
/home/crepel/Documents/EPFL/bluetooth_stuff/Link_layer_security/firmware_project/bin/targets/nordic_end/app/apps/bleprph/bleprph.elf:     file format elf32-littlearm
/home/crepel/Documents/EPFL/bluetooth_stuff/Link_layer_security/firmware_project/bin/targets/nordic_end/app/apps/bleprph/bleprph.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0000c121

Program Header:
0x70000001 off    0x00032df8 vaddr 0x00032df8 paddr 0x00032df8 align 2**2
         filesz 0x00000018 memsz 0x00000018 flags r--
    LOAD off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**16
         filesz 0x00032e10 memsz 0x00032e10 flags rwx
    LOAD off    0x00040100 vaddr 0x20000100 paddr 0x00032e10 align 2**16
         filesz 0x00000458 memsz 0x0000047c flags rw-
    LOAD off    0x00040580 vaddr 0x20000580 paddr 0x00033268 align 2**16
         filesz 0x00000000 memsz 0x00003e8c flags rw-
    LOAD off    0x00050000 vaddr 0x20000000 paddr 0x20000000 align 2**16
         filesz 0x00000000 memsz 0x00000100 flags rw-
private flags = 5000200: [Version5 EABI] [soft-float ABI]

Sections:
Idx Name               Size      VMA       LMA       File off  Algn  Flags
  0 .imghdr            00000020  0000c000  0000c000  0000c000  2**0  ALLOC
  1 .text              00026dd8  0000c020  0000c020  0000c020  2**3  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.extab         00000000  00032df8  00032df8  00040558  2**0  CONTENTS
  3 .ARM.exidx         00000018  00032df8  00032df8  00032df8  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .vector_relocation 00000100  20000000  20000000  00050000  2**0  ALLOC
  5 .rtt               00000000  20000100  20000100  00040558  2**0  CONTENTS
  6 .data              00000458  20000100  00032e10  00040100  2**2  CONTENTS, ALLOC, LOAD, DATA
  7 .bssnz             00000024  20000558  00033268  00040558  2**2  ALLOC
  8 .bss               00003e8c  20000580  00033268  00040580  2**3  ALLOC
  9 .stack_dummy       000001b0  20004410  20004410  00040558  2**3  CONTENTS, READONLY
 10 .ARM.attributes    0000002a  00000000  00000000  00040708  2**0  CONTENTS, READONLY
 11 .comment           0000007f  00000000  00000000  00040732  2**0  CONTENTS, READONLY
 12 .svc_table         00000004  00000000  00000000  000407b1  2**0  CONTENTS, READONLY
 13 .debug_line        0004882f  00000000  00000000  000407b5  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_info        0012e6ca  00000000  00000000  00088fe4  2**0  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev      0001f940  00000000  00000000  001b76ae  2**0  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges     00005c90  00000000  00000000  001d6ff0  2**3  CONTENTS, READONLY, DEBUGGING
 17 .debug_str         0001c8aa  00000000  00000000  001dcc80  2**0  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc         00053ea3  00000000  00000000  001f952a  2**0  CONTENTS, READONLY, DEBUGGING
 19 .debug_ranges      00005ac0  00000000  00000000  0024d3cd  2**0  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame       00010804  00000000  00000000  00252e90  2**2  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
0000c000 l    d  .imghdr	00000000 .imghdr
0000c020 l    d  .text	00000000 .text
00032df8 l    d  .ARM.extab	00000000 .ARM.extab
00032df8 l    d  .ARM.exidx	00000000 .ARM.exidx
20000000 l    d  .vector_relocation	00000000 .vector_relocation
20000100 l    d  .rtt	00000000 .rtt
20000100 l    d  .data	00000000 .data
20000558 l    d  .bssnz	00000000 .bssnz
20000580 l    d  .bss	00000000 .bss
20004410 l    d  .stack_dummy	00000000 .stack_dummy
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .svc_table	00000000 .svc_table
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 gcc_startup_nrf52840.o
000001b0 l       *ABS*	00000000 Stack_Size
00000000 l       *ABS*	00000000 Heap_Size
0000c128 l       .text	00000000 .bss_zero_loop
00000000 l    df *ABS*	00000000 sbrk.c
20000100 l     O .data	00000004 sbrkBase
20000104 l     O .data	00000004 sbrkLimit
20000108 l     O .data	00000004 brk
00000000 l    df *ABS*	00000000 hal_system.c
00000000 l    df *ABS*	00000000 system_nrf52.c
0000c270 l     F .text	00000024 errata_36
0000c294 l     F .text	00000024 errata_98
0000c2b8 l     F .text	00000024 errata_103
0000c2dc l     F .text	00000024 errata_115
0000c300 l     F .text	00000024 errata_120
0000c324 l     F .text	00000024 errata_121
00000000 l    df *ABS*	00000000 start.c
00000000 l    df *ABS*	00000000 main.c
0000c474 l     F .text	00000014 bleprph_on_reset
0000c488 l     F .text	000000cc bleprph_advertise
0000c610 l     F .text	000001d4 bleprph_gap_event
0000c554 l     F .text	00000024 bleprph_on_sync
0000c578 l     F .text	00000098 bleprph_print_conn_desc
20000580 l     O .bss	00000019 ver_str.10961
00000000 l    df *ABS*	00000000 misc.c
00000000 l    df *ABS*	00000000 gatt_svr.c
0000c888 l     F .text	00000026 gatt_svr_chr_write
0000c8b0 l     F .text	000000bc gatt_svr_chr_access_sec_test
20000599 l     O .bss	00000001 gatt_svr_sec_test_static_val
20000110 l     O .data	00000048 __compound_literal.0
0003163c l     O .text	00000011 gatt_svr_chr_sec_test_rand_uuid
00031650 l     O .text	00000011 gatt_svr_chr_sec_test_static_uuid
000316f8 l     O .text	00000011 gatt_svr_svc_sec_test_uuid
0003170c l     O .text	00000020 gatt_svr_svcs
00000000 l    df *ABS*	00000000 nordic_end-sysinit-app.c
00000000 l    df *ABS*	00000000 split.c
2000059a l     O .bss	00000001 split_app_active
2000059b l     O .bss	00000001 split_mode_cur
20000158 l     O .data	00000024 split_scfg
0003172c l     O .text	00000020 __compound_literal.0
00000000 l    df *ABS*	00000000 cmsis_nvic.c
00000000 l    df *ABS*	00000000 os_fault.c
00000000 l    df *ABS*	00000000 os.c
0000ccb0 l     F .text	0000001e os_main
200005a0 l     O .bss	00000100 g_idle_task_stack
200006a0 l     O .bss	00000800 g_os_main_stack
00000000 l    df *ABS*	00000000 os_callout.c
00000000 l    df *ABS*	00000000 os_dev.c
0000d010 l     F .text	0000005c os_dev_add
0000d06c l     F .text	00000026 os_dev_initialize
0000d092 l     F .text	00000020 os_dev_init
20000ea0 l     O .bss	00000008 g_os_dev_list
00000000 l    df *ABS*	00000000 os_eventq.c
20000ea8 l     O .bss	00000010 os_eventq_main
00000000 l    df *ABS*	00000000 os_mbuf.c
00000000 l    df *ABS*	00000000 os_mempool.c
0000db0c l     F .text	00000078 os_mempool_init_internal
00000000 l    df *ABS*	00000000 os_msys.c
0000dc94 l     F .text	00000010 os_msys_find_biggest_pool
0000dca4 l     F .text	0000002c os_msys_find_pool
0000dd1c l     F .text	00000058 os_msys_init_once
20000eb8 l     O .bss	000009a0 os_msys_1_data
20001858 l     O .bss	0000000c os_msys_1_mbuf_pool
20001864 l     O .bss	0000001c os_msys_1_mempool
2000017c l     O .data	00000008 g_msys_pool_list
00000000 l    df *ABS*	00000000 os_sanity.c
0000de00 l     F .text	00000020 os_sanity_check_list_lock
0000de20 l     F .text	0000001c os_sanity_check_list_unlock
00000000 l    df *ABS*	00000000 os_sched.c
00000000 l    df *ABS*	00000000 os_task.c
0000e198 l     F .text	00000018 _clear_stack
00000000 l    df *ABS*	00000000 os_time.c
0000e300 l     F .text	0000004c os_deltatime
0000e34c l     F .text	00000064 os_time_tick
20001888 l     O .bss	00000030 basetod
00000000 l    df *ABS*	00000000 os_arch_arm.c
0000e514 l     F .text	00000002 os_arch_task_return_handler
00000000 l    df *ABS*	00000000 os_mutex.c
00000000 l    df *ABS*	00000000 HAL_CM4.o
0000e8bc l       .text	00000000 SVC_User
0000e8da l       .text	00000000 SVC_Done
00000000 l    df *ABS*	00000000 lrand48.c
00000000 l    df *ABS*	00000000 memcmp.c
0000e970 l       .text	00000000 test1
0000e964 l       .text	00000000 loop1
0000e976 l       .text	00000000 res1
0000e992 l       .text	00000000 test2
0000e99a l       .text	00000000 done
0000e986 l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memcpy.c
0000e9a6 l       .text	00000000 test1
0000e9a2 l       .text	00000000 loop1
0000e9b4 l       .text	00000000 test2
0000e9b0 l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 srand48.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strncat.c
00000000 l    df *ABS*	00000000 jrand48.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 imgmgr.c
0000eb4c l     F .text	0000005c imgr_erase_state
20000194 l     O .data	0000000c imgr_mgmt_group
000318e8 l     O .text	00000038 imgr_mgmt_handlers
00000000 l    df *ABS*	00000000 imgmgr_util.c
00000000 l    df *ABS*	00000000 smp.c
0000ec10 l     F .text	0000000c smp_free_buf
0000ec1c l     F .text	00000010 smp_init_writer
0000ec2c l     F .text	00000012 smp_init_reader
0000ec3e l     F .text	0000002c smp_write_at
0000ec6a l     F .text	00000010 smp_reset_buf
0000ec7a l     F .text	00000008 smp_trim_front
0000ec82 l     F .text	00000030 smp_alloc_rsp
0000ecb2 l     F .text	00000024 smp_rsp_frag_alloc
0000ed1c l     F .text	0000004c smp_process_packet
0000ed68 l     F .text	0000000a smp_event_data_in
00000000 l    df *ABS*	00000000 smp_ble.c
0000ee00 l     F .text	00000028 smp_ble_out
0000ee28 l     F .text	00000040 smp_ble_event_data_in
0000ee68 l     F .text	00000094 gatt_svr_chr_access_smp
200001a0 l     O .data	00000030 __compound_literal.0
00031958 l     O .text	00000011 gatt_svr_chr_smp
0003196c l     O .text	00000011 gatt_svr_svc_smp
00031980 l     O .text	00000020 gatt_svr_svcs
00000000 l    df *ABS*	00000000 config_init.c
0000ef94 l     F .text	000000e8 config_init_fcb
200018bc l     O .bss	0000006c conf_fcb_area
200001d0 l     O .data	00000038 config_init_conf_fcb
00000000 l    df *ABS*	00000000 config_store.c
0000f0aa l     F .text	0000003c conf_dup_check_cb
0000f0e6 l     F .text	0000001c conf_load_cb
0000f20c l     F .text	00000008 conf_store_one
20001928 l     O .bss	00000001 conf_loaded
20001929 l     O .bss	00000001 conf_loading
00000000 l    df *ABS*	00000000 config.c
0000f280 l     F .text	00000034 conf_get_cb
0000f2b4 l     F .text	0000002a conf_set_cb
0000f2de l     F .text	00000020 conf_commit_cb
0000f2fe l     F .text	00000008 conf_ev_fn_load
2000192c l     O .bss	0000000c conf_mtx
20000208 l     O .data	00000010 conf_ev_load
00000000 l    df *ABS*	00000000 config_fcb.c
0000f724 l     F .text	00000028 conf_fcb_load
0000f74c l     F .text	00000044 conf_fcb_load_cb
0000f790 l     F .text	00000032 conf_fcb_var_read
0000f7c2 l     F .text	000000d6 conf_fcb_compress_internal
0000f898 l     F .text	00000066 conf_fcb_append
0000f9a6 l     F .text	0000000a conf_fcb_save
20000218 l     O .data	00000010 conf_fcb_itf
00000000 l    df *ABS*	00000000 config_line.c
00000000 l    df *ABS*	00000000 config_mgmt.c
0000faa4 l     F .text	000000bc conf_mgmt_write
0000fb60 l     F .text	0000007c conf_mgmt_read
20000228 l     O .data	0000000c conf_mgmt_group
000319b4 l     O .text	00000008 conf_mgmt_handlers
00000000 l    df *ABS*	00000000 console.c
0000fbec l     F .text	00000054 add_ascii_num_with_char
0000fc40 l     F .text	0000003c console_handle_line
0000fc7c l     F .text	0000003c console_filter_out
0000fcb8 l     F .text	0000001e console_filter_write
0000fcd8 l     F .text	00000044 console_append_char
0000fd1c l     F .text	0000001e console_write_nolock
0000fd3c l     F .text	00000050 handle_end
0000fd8c l     F .text	00000050 handle_home
0000fddc l     F .text	00000068 del_char
0000fe44 l     F .text	00000020 handle_delete
0000fe64 l     F .text	00000190 handle_ansi
0000fff4 l     F .text	00000058 handle_backspace
0001004c l     F .text	0000005c console_clear_line
000100a8 l     F .text	000000a8 insert_char
0001015c l     F .text	0000010c handle_nlip
20001938 l     O .bss	00000004 ansi_val
2000193c l     O .bss	00000004 ansi_val_2
20001940 l     O .bss	00000010 avail_queue
20001950 l     O .bss	00000004 completion
20001954 l     O .bss	00000004 console_compat_rx_cb
20001958 l     O .bss	0000000c console_write_lock
20001964 l     O .bss	00000002 cur
20001968 l     O .bss	00000004 current_line_ev
2000196c l     O .bss	00000004 esc_state
20001970 l     O .bss	00000004 lines_queue
20001974 l     O .bss	00000004 nlip_state
20001978 l     O .bss	00000001 prev_endl.8637
20001979 l     O .bss	00000001 rx_stalled
2000197a l     O .bss	00000002 trailing_chars
20000234 l     O .data	00000004 echo
00000000 l    df *ABS*	00000000 console_fmt.c
00000000 l    df *ABS*	00000000 ticks.c
20000238 l     O .data	00000001 do_ticks
00000000 l    df *ABS*	00000000 uart_console.c
000105a0 l     F .text	00000008 uart_blocking_tx
000105a8 l     F .text	00000014 uart_console_ring_add_char
000105bc l     F .text	00000014 uart_console_ring_pull_char
000105d0 l     F .text	00000016 uart_console_ring_is_full
000105e6 l     F .text	0000000e uart_console_ring_is_empty
000105f4 l     F .text	00000034 uart_console_tx_flush
00010628 l     F .text	0000001c uart_console_tx_char
00010644 l     F .text	00000058 uart_console_queue_char
0001069c l     F .text	00000044 uart_console_rx_char
000106e0 l     F .text	00000074 uart_console_rx_char_event
2000197c l     O .bss	00000008 cr_rx
20001984 l     O .bss	00000020 cr_rx_buf
200019a4 l     O .bss	00000008 cr_tx
200019ac l     O .bss	00000020 cr_tx_buf
200019cc l     O .bss	00000001 uart_console_rx_stalled
200019d0 l     O .bss	00000004 uart_dev
200019d4 l     O .bss	00000004 write_char_cb
2000023c l     O .data	00000004 b.8487
00000000 l    df *ABS*	00000000 flash_map.c
0001086c l     F .text	0000003c flash_area_find_idx
000108a8 l     F .text	00000058 flash_map_area_overlaps
00010900 l     F .text	0000007c flash_map_add_new_dflt_areas
0001097c l     F .text	00000078 flash_map_read_mfg
200019d8 l     O .bss	00000078 mfg_areas.8520
00000000 l    df *ABS*	00000000 id.c
00010c0c l     F .text	00000074 id_conf_export
00010c80 l     F .text	000000a0 id_conf_get
00010d20 l     F .text	00000034 id_conf_set
00010d54 l     F .text	00000060 id_read_mfghash
00000000 l    df *ABS*	00000000 log.c
00010e08 l     F .text	00000028 log_module_find_idx
00010e30 l     F .text	0000001c log_registered
00010e4c l     F .text	0000000c log_chk_type
00010e58 l     F .text	00000014 log_chk_max_entry_len
00010e6c l     F .text	00000016 log_call_append_cb
00010e88 l     F .text	00000128 log_append_prepare
000110bc l     F .text	0000003c log_read_last_hdr
000112e6 l     F .text	00000040 log_read_hdr_walk
0001124a l     F .text	0000004c log_walk_body_fn
20001a50 l     O .bss	00000004 g_log_module_count
20001a54 l     O .bss	00000008 g_log_module_list
20001a5c l     O .bss	00000001 log_written
20000268 l     O .data	00000008 g_log_list
00000000 l    df *ABS*	00000000 log_console.c
00011326 l     F .text	00000004 log_console_read
0001132a l     F .text	00000004 log_console_walk
0001132e l     F .text	00000004 log_console_flush
00011334 l     F .text	00000048 log_console_print_hdr
0001137c l     F .text	00000048 log_console_dump_cbor_entry
000113c4 l     F .text	00000040 log_console_append_body
00011404 l     F .text	0000001c log_console_append
20001a60 l     O .bss	0000001c log_console
00000000 l    df *ABS*	00000000 log_level.c
20001a7c l     O .bss	00000080 log_level_map
00000000 l    df *ABS*	00000000 modlog.c
000114a4 l     F .text	00000028 modlog_find_by_module
000114cc l     F .text	0000003c modlog_insert
00011508 l     F .text	0000001c modlog_alloc
00011524 l     F .text	00000058 modlog_infer_handle
0001157c l     F .text	00000046 modlog_register_no_lock
000115c2 l     F .text	0000002e modlog_append_one
000115f0 l     F .text	00000080 modlog_append_no_lock
20001afc l     O .bss	00000004 modlog_first_dflt
20001b00 l     O .bss	000000c0 modlog_mapping_buf
20001bc0 l     O .bss	00000004 modlog_mappings
20001bc4 l     O .bss	00000024 modlog_rwl
00000000 l    df *ABS*	00000000 mfg.c
000117e4 l     F .text	00000094 mfg_seek_next_aux
00011878 l     F .text	00000070 mfg_read_mmr
000118e8 l     F .text	00000054 mfg_read_next_mmr
0001193c l     F .text	00000044 mfg_open_flash_area
00011980 l     F .text	00000044 mfg_read_tlv_body
00011a60 l     F .text	0000004e mfg_read_mmr_refs
20001be8 l     O .bss	00000001 mfg_initialized
20001bec l     O .bss	00000018 mfg_mmrs
20001c04 l     O .bss	00000004 mfg_num_mmrs
00000000 l    df *ABS*	00000000 log_reboot.c
00011ab0 l     F .text	00000048 reboot_conf_export
00011af8 l     F .text	00000054 reboot_conf_get
00011b4c l     F .text	00000054 reboot_conf_set
00011ba0 l     F .text	0000009c log_reboot_init_fcb
00011c3c l     F .text	00000014 log_reboot_init_console
00011c50 l     F .text	000002e8 log_reboot_write
20001c08 l     O .bss	00000001 log_reboot_written
20001c0c l     O .bss	0000001c reboot_log
20001c28 l     O .bss	00000034 reboot_log_fcb
20001c5c l     O .bss	0000000c reboot_sector
00000000 l    df *ABS*	00000000 stats.c
0001200c l     F .text	00000010 stats_offset
0001201c l     F .text	0000004c stats_register_internal
00012100 l     F .text	0000003c stats_module_init_internal
00000000 l    df *ABS*	00000000 sysinit.c
00012202 l     F .text	00000006 sysinit_dflt_panic_cb
00000000 l    df *ABS*	00000000 mem.c
00000000 l    df *ABS*	00000000 rwlock.c
00012298 l     F .text	0000000c rwlock_complete_handoff
000122a4 l     F .text	0000001a rwlock_read_must_block
000122be l     F .text	00000016 rwlock_write_must_block
000122d4 l     F .text	0000003a rwlock_unblock
00000000 l    df *ABS*	00000000 scfg.c
00012430 l     F .text	00000014 scfg_find_setting_by_val
00012444 l     F .text	00000054 scfg_setting_id
00012498 l     F .text	00000040 scfg_handler_export
000124d8 l     F .text	0000001c scfg_find_setting_by_name
000124f4 l     F .text	0000002a scfg_handler_get
0001251e l     F .text	0000003e scfg_handler_set
00000000 l    df *ABS*	00000000 cborattr.c
00012628 l     F .text	0000006c valid_attr_type
00012694 l     F .text	0000004c cbor_target_address
000128b4 l     F .text	000002f2 cbor_internal_read_object
00000000 l    df *ABS*	00000000 img_mgmt.c
00012bb2 l     F .text	0000003e img_mgmt_find_tlvs
00012bf0 l     F .text	00000040 img_mgmt_erase
00012c30 l     F .text	0000004c img_mgmt_upload_good_rsp
00012d94 l     F .text	00000036 img_mgmt_upload_log
00012e44 l     F .text	0000020c img_mgmt_upload
20001c68 l     O .bss	00000004 img_mgmt_upload_arg
20001c6c l     O .bss	00000004 img_mgmt_upload_cb
2000029c l     O .data	0000000c img_mgmt_group
00031bfc l     O .text	00000030 img_mgmt_handlers
00000000 l    df *ABS*	00000000 img_mgmt_state.c
00000000 l    df *ABS*	00000000 img_mgmt_util.c
00000000 l    df *ABS*	00000000 mynewt_img_mgmt.c
00013442 l     F .text	00000040 img_mgmt_vercmp
00013482 l     F .text	00000046 img_mgmt_find_best_area_id
00000000 l    df *ABS*	00000000 mynewt_img_mgmt_log.c
00013864 l     F .text	00000004 img_mgmt_log_gen
00000000 l    df *ABS*	00000000 mynewt_log_mgmt.c
000138b8 l     F .text	00000020 mynewt_log_mgmt_find_log
000138d8 l     F .text	000000d8 mynewt_log_mgmt_walk_cb
00000000 l    df *ABS*	00000000 os_mgmt.c
00013b04 l     F .text	0000000a os_mgmt_reset
00013b10 l     F .text	00000144 os_mgmt_taskstat_encode_one
00013c54 l     F .text	0000006c os_mgmt_taskstat_read
00013cc0 l     F .text	00000074 os_mgmt_echo
200002a8 l     O .data	0000000c os_mgmt_group
00031cd0 l     O .text	00000030 os_mgmt_group_handlers
00000000 l    df *ABS*	00000000 mynewt_os_mgmt.c
00013d4c l     F .text	0000001c mynewt_os_mgmt_task_at
00013d68 l     F .text	00000014 mynewt_os_mgmt_stack_usage
00013d7c l     F .text	0000000a mynewt_os_mgmt_reset_tmo
20001c70 l     O .bss	00000020 mynewt_os_mgmt_reset_callout
00000000 l    df *ABS*	00000000 mynewt_stat_mgmt.c
00013e2c l     F .text	00000044 mynewt_stat_mgmt_walk_cb
00000000 l    df *ABS*	00000000 mgmt.c
00013ee4 l     F .text	00000050 mgmt_find_group
20001c90 l     O .bss	00000004 evt_cb
20001c94 l     O .bss	00000004 mgmt_group_list
20001c98 l     O .bss	00000004 mgmt_group_list_end
00000000 l    df *ABS*	00000000 smp.c
00014080 l     F .text	00000016 smp_align4
00014096 l     F .text	0000000a smp_rsp_op
000140a0 l     F .text	0000002a smp_init_rsp_hdr
000140ca l     F .text	0000001a smp_read_hdr
000140e4 l     F .text	00000074 smp_handle_single_payload
00014158 l     F .text	00000012 smp_write_hdr
0001416a l     F .text	0000005e smp_handle_single_req
000141c8 l     F .text	0000007c smp_build_err_rsp
00014244 l     F .text	0000004c smp_on_err
00000000 l    df *ABS*	00000000 mcumgr_util.c
00000000 l    df *ABS*	00000000 ble_ll.c
0001440c l     F .text	00000070 ble_ll_count_rx_adv_pdus
0001447c l     F .text	00000060 ble_ll_count_rx_stats
000144dc l     F .text	00000020 ble_ll_flush_pkt_queue
0001454c l     F .text	0000001c ble_ll_hw_err_timer_cb
00014568 l     F .text	0000000a ble_ll_event_comp_pkts
00014572 l     F .text	00000008 ble_ll_event_dbuf_overflow
0001457c l     F .text	00000078 ble_ll_tx_pkt_in
000145f4 l     F .text	00000008 ble_ll_event_tx_pkt
000145fc l     F .text	000000b8 ble_ll_rx_pkt_in
000146b4 l     F .text	00000008 ble_ll_event_rx_pkt
000146bc l     F .text	00000020 ble_ll_seed_prng
20001ca0 l     O .bss	000001e0 g_ble_ll_stack
00031d64 l     O .text	00000008 g_ble_ll_pdu_header_tx_time
00000000 l    df *ABS*	00000000 ble_ll_adv.c
00014dc0 l     F .text	0000001a ble_ll_adv_first_chan
00014dda l     F .text	0000001a ble_ll_adv_final_chan
00014df4 l     F .text	00000016 ble_ll_adv_flags_set
00014e0a l     F .text	00000018 ble_ll_adv_flags_clear
00014e22 l     F .text	0000007c ble_ll_adv_rpa_update
00014e9e l     F .text	00000016 ble_ll_adv_active_chanset_clear
00014eb4 l     F .text	00000030 ble_ll_adv_tx_done
00014ee4 l     F .text	0000004c ble_ll_adv_sm_find_configured
00014f30 l     F .text	00000034 ble_ll_adv_active_chanset_set_pri
00014f64 l     F .text	0000002c ble_ll_adv_scheduled
00014f90 l     F .text	00000054 ble_ll_adv_set_sched
000150fc l     F .text	000000e8 ble_ll_adv_tx_start_cb
00014fe4 l     F .text	00000118 ble_ll_adv_sm_start
000151e4 l     F .text	000000aa ble_ll_adv_legacy_pdu_make
0001528e l     F .text	0000005a ble_ll_adv_scan_rsp_legacy_pdu_make
000152e8 l     F .text	00000030 ble_ll_adv_drop_event
00015318 l     F .text	00000052 ble_ll_adv_update_adv_scan_rsp_data
0001536c l     F .text	00000070 ble_ll_adv_sm_stop
000153dc l     F .text	0000002e ble_ll_adv_set_enable
0001540a l     F .text	00000068 ble_ll_adv_update_data_mbuf
00015472 l     F .text	000000b0 ble_ll_adv_set_scan_rsp_data
00015522 l     F .text	000000ca ble_ll_adv_set_adv_data
000155ec l     F .text	0000004c ble_ll_adv_already_connected
00015638 l     F .text	0000015c ble_ll_adv_rx_req
00015794 l     F .text	000000fc ble_ll_adv_conn_req_rxd
00015890 l     F .text	00000026 ble_ll_adv_sm_stop_timeout
000158b8 l     F .text	00000064 ble_ll_adv_reschedule_event
0001591c l     F .text	00000034 ble_ll_adv_sm_init
00015a94 l     F .text	0000000a ble_ll_adv_event_done
00015974 l     F .text	00000110 ble_ll_adv_done
00015a84 l     F .text	00000010 ble_ll_adv_make_done
00000000 l    df *ABS*	00000000 ble_ll_conn.c
00015e64 l     F .text	0000001a ble_ll_conn_is_empty_pdu
00015e7e l     F .text	0000004c ble_ll_conn_calc_dci_csa1
00015ecc l     F .text	00000018 ble_ll_conn_halt
00015ee4 l     F .text	00000014 ble_ll_conn_current_sm_over
00015ef8 l     F .text	00000010 ble_ll_conn_rxend_unencrypt
00015f08 l     F .text	00000010 ble_ll_conn_txend_encrypt
00015f18 l     F .text	00000008 ble_ll_conn_wait_txend
00015f20 l     F .text	0000000a ble_ll_conn_connect_ind_txend_to_init
00015f2a l     F .text	0000000a ble_ll_conn_connect_ind_txend_to_standby
00015f34 l     F .text	00000028 ble_ll_init_get_conn_comp_ev
00015f5c l     F .text	00000032 ble_ll_conn_start_rx_encrypt
00015f8e l     F .text	00000010 ble_ll_conn_start_rx_unencrypt
00015f9e l     F .text	00000018 ble_ll_conn_continue_rx_encrypt
00015fb6 l     F .text	00000020 ble_ll_conn_adjust_pyld_len
00015fd6 l     F .text	00000030 ble_ll_update_max_tx_octets_phy_mode
00016008 l     F .text	00000040 ble_ll_conn_get_next_sched_time
00016048 l     F .text	00000468 ble_ll_conn_tx_pdu
000164b0 l     F .text	00000144 ble_ll_conn_event_start_cb
000165f4 l     F .text	00000070 ble_ll_conn_master_common_init
00016664 l     F .text	00000036 ble_ll_conn_calc_itvl_ticks
0001669a l     F .text	0000006e ble_ll_conn_can_send_next_pdu
00016708 l     F .text	0000006c ble_ll_conn_chk_csm_flags
00016774 l     F .text	000000a0 ble_ll_conn_connect_ind_tx_pducb
00016814 l     F .text	00000108 ble_ll_conn_is_peer_adv
0001691c l     F .text	000000c0 ble_ll_conn_connect_ind_prepare
00016a74 l     F .text	00000268 ble_ll_conn_next_event
00016cdc l     F .text	00000118 ble_ll_conn_created
00016df4 l     F .text	00000016 ble_ll_conn_set_csa
00017160 l     F .text	00000138 ble_ll_conn_event_end
00000000 l    df *ABS*	00000000 ble_ll_conn_hci.c
00018010 l     F .text	0000002e ble_ll_conn_hci_chk_scan_params
00018040 l     F .text	00000028 ble_ll_init_alloc_conn_comp_ev
000180be l     F .text	00000066 ble_ll_conn_process_conn_params
00018284 l     F .text	00000034 ble_ll_conn_hci_cancel_conn_complete_event
20001e80 l     O .bss	00000004 g_ble_ll_last_num_comp_pkt_evt
00000000 l    df *ABS*	00000000 ble_ll_ctrl.c
00018b8c l     F .text	00000038 ble_ll_ctrl_enc_allowed_pdu
00018bc4 l     F .text	00000020 ble_ll_ctrl_rx_start_enc_req
00018be4 l     F .text	0000001a ble_ll_ctrl_rx_pause_enc_req
00018bfe l     F .text	00000020 ble_ll_ctrl_rx_pause_enc_rsp
00018c1e l     F .text	0000000c ble_ll_ctrl_proc_rsp_timer_cb
00018c2c l     F .text	00000028 ble_ll_ctrl_start_rsp_timer
00018c54 l     F .text	00000114 ble_ll_ctrl_conn_upd_make
00018d68 l     F .text	00000026 ble_ll_ctrl_version_ind_make
00018d8e l     F .text	00000028 ble_ll_ctrl_datalen_upd_make
00018db6 l     F .text	000000cc ble_ll_ctrl_conn_param_pdu_make
00018e84 l     F .text	00000044 ble_ll_ctrl_chanmap_req_make
00018ec8 l     F .text	0000002c ble_ll_ctrl_update_features
00018ef4 l     F .text	00000052 ble_ll_ctrl_rx_feature_req
00018f46 l     F .text	0000004c ble_ll_ctrl_enc_req_make
00018f94 l     F .text	000000e0 ble_ll_ctrl_proc_init
00019074 l     F .text	00000088 ble_ll_ctrl_rx_conn_update
000190fc l     F .text	0000004c ble_ll_ctrl_rx_chanmap_req
00019148 l     F .text	00000066 ble_ll_ctrl_len_proc
000191ae l     F .text	0000007e ble_ll_ctrl_rx_enc_req
000192d8 l     F .text	0000003c ble_ll_ctrl_rx_enc_rsp
000193cc l     F .text	00000164 ble_ll_ctrl_conn_param_pdu_proc
00019530 l     F .text	00000034 ble_ll_ctrl_rx_conn_param_rsp
000196ec l     F .text	000000cc ble_ll_ctrl_proc_unk_rsp
000197b8 l     F .text	00000038 ble_ll_ctrl_rx_feature_rsp
000197f0 l     F .text	00000060 ble_ll_ctrl_rx_version_ind
00019850 l     F .text	0000004c ble_ll_ctrl_rx_start_enc_rsp
0001989c l     F .text	0000000a ble_ll_ctrl_rx_ping_rsp
000198a6 l     F .text	00000068 ble_ll_ctrl_rx_conn_param_req
0001990e l     F .text	0000007c ble_ll_ctrl_rx_reject_ind
00000000 l    df *ABS*	00000000 ble_ll_hci.c
00019e32 l     F .text	00000004 ble_ll_hci_get_num_cmd_pkts
00019e36 l     F .text	00000020 ble_ll_hci_rd_local_version
00019e56 l     F .text	0000001c ble_ll_hci_rd_local_supp_feat
00019e74 l     F .text	00000018 ble_ll_hci_rd_bd_addr
00019e8c l     F .text	0000001c ble_ll_hci_set_le_event_mask
00019ea8 l     F .text	00000018 ble_ll_hci_le_read_bufsize
00019ec0 l     F .text	00000018 ble_ll_hci_le_rd_sugg_data_len
00019ed8 l     F .text	00000020 ble_ll_hci_le_rd_max_data_len
00019ef8 l     F .text	0000004a ble_ll_hci_le_cmd_send_cmd_status
00019f44 l     F .text	0000001c ble_ll_read_rf_path_compensation
00019f60 l     F .text	0000001c ble_ll_hci_cb_set_event_mask
00019f7c l     F .text	0000001c ble_ll_hci_cb_set_event_mask2
00019f98 l     F .text	00000022 ble_ll_hci_link_ctrl_cmd_proc
00019fba l     F .text	0000004a ble_ll_hci_ctlr_bb_cmd_proc
0001a004 l     F .text	00000054 ble_ll_hci_rd_local_supp_cmd
0001a058 l     F .text	0000005a ble_ll_hci_info_params_cmd_proc
0001a0b2 l     F .text	00000014 ble_ll_hci_status_params_cmd_proc
0001a0c6 l     F .text	00000016 ble_ll_hci_le_read_local_features
0001a0dc l     F .text	00000042 ble_ll_hci_le_encrypt
0001a11e l     F .text	00000012 ble_ll_hci_le_rand
0001a130 l     F .text	00000016 ble_ll_hci_le_read_supp_states
0001a148 l     F .text	00000058 ble_ll_hci_le_wr_sugg_data_len
0001a1a0 l     F .text	00000020 ble_ll_read_tx_power
0001a1c0 l     F .text	00000064 ble_ll_write_rf_path_compensation
0001a224 l     F .text	000002b6 ble_ll_hci_le_cmd_proc
0001a510 l     F .text	00000118 ble_ll_hci_cmd_proc
20001e84 l     O .bss	00000010 g_ble_ll_hci_cmd_ev
20001e98 l     O .bss	00000008 g_ble_ll_hci_event_mask
20001ea0 l     O .bss	00000008 g_ble_ll_hci_event_mask2
20001ea8 l     O .bss	00000008 g_ble_ll_hci_le_event_mask
20001eb0 l     O .bss	00000002 rx_path_pwr_compensation
20001eb2 l     O .bss	00000002 tx_path_pwr_compensation
00000000 l    df *ABS*	00000000 ble_ll_hci_ev.c
00000000 l    df *ABS*	00000000 ble_ll_rand.c
00000000 l    df *ABS*	00000000 ble_ll_resolv.c
0001ab7c l     F .text	00000018 ble_ll_resolv_irk_nonzero
0001ab94 l     F .text	0000002c ble_ll_is_controller_busy
0001abc0 l     F .text	00000020 ble_ll_resolv_list_chg_allowed
0001abe0 l     F .text	00000040 ble_ll_is_on_resolv_list
0001ac20 l     F .text	00000078 ble_ll_resolv_gen_priv_addr
0001ac98 l     F .text	00000064 ble_ll_resolv_rpa_timer_cb
00000000 l    df *ABS*	00000000 ble_ll_rfmgmt.c
0001b240 l     F .text	00000034 ble_ll_rfmgmt_disable
0001b274 l     F .text	0000004c ble_ll_rfmgmt_release_ev
0001b2c0 l     F .text	0000003c ble_ll_rfmgmt_enable
0001b2fc l     F .text	00000014 ble_ll_rfmgmt_timer_exp
0001b310 l     F .text	00000084 ble_ll_rfmgmt_timer_reschedule
20001eb4 l     O .bss	00000044 g_ble_ll_rfmgmt_data
00000000 l    df *ABS*	00000000 ble_ll_scan.c
0001b4c8 l     F .text	0000000c ble_ll_get_chan_to_scan
0001b4d4 l     F .text	0000000e ble_ll_scan_get_next_adv_prim_chan
0001b4e2 l     F .text	0000002a ble_ll_scan_move_window_to
0001b50c l     F .text	00000030 ble_ll_scan_is_inside_window
0001b53c l     F .text	00000056 ble_ll_scan_get_addr_data_from_legacy
0001b594 l     F .text	000000c8 ble_ll_scan_req_backoff
0001b65c l     F .text	00000074 ble_ll_scan_have_rxd_scan_rsp
0001b6d0 l     F .text	00000060 ble_ll_scan_dup_update_legacy
0001b730 l     F .text	0000012c ble_ll_scan_rx_filter
0001b85c l     F .text	000000b0 ble_ll_scan_rx_isr_on_legacy
0001b90c l     F .text	00000026 ble_ll_scan_req_tx_pdu_cb
0001b932 l     F .text	0000002e ble_ll_scan_refresh_nrpa
0001b960 l     F .text	00000070 ble_ll_scan_req_pdu_prepare
0001b9d0 l     F .text	0000007c ble_ll_scan_send_scan_req
0001ba58 l     F .text	00000118 ble_ll_scan_start
0001bb70 l     F .text	00000058 ble_ll_scan_rx_pkt_in_restore_addr_data
0001bbc8 l     F .text	000000f8 ble_ll_scan_dup_check_legacy
0001bcc0 l     F .text	0000005e ble_ll_hci_send_dir_adv_report
0001bd20 l     F .text	00000094 ble_ll_hci_send_adv_report
0001bdb4 l     F .text	000000c4 ble_ll_scan_send_adv_report
0001be78 l     F .text	00000090 ble_ll_scan_rx_pkt_in_on_legacy
0001bf08 l     F .text	000000a8 ble_ll_scan_sm_start
0001bfb0 l     F .text	00000084 ble_ll_scan_common_init
0001c034 l     F .text	000000e0 ble_ll_scan_event_proc
0001c420 l     F .text	00000024 ble_ll_scan_interrupted_event_cb
0001c1bc l     F .text	00000128 ble_ll_scan_set_enable
20001ef8 l     O .bss	00000001 g_ble_ll_scan_num_rsp_advs
20001efc l     O .bss	00000014 g_ble_ll_scan_params
20001f10 l     O .bss	00000088 g_ble_ll_scan_sm
20001f98 l     O .bss	00000008 g_scan_dup_list
20001fa0 l     O .bss	00000080 g_scan_dup_mem
20002020 l     O .bss	0000001c g_scan_dup_pool
00000000 l    df *ABS*	00000000 ble_ll_sched.c
0001c77c l     F .text	0000002e ble_ll_sched_is_overlap
0001c7ac l     F .text	00000024 ble_ll_sched_insert_if_empty
0001c7d0 l     F .text	0000003c ble_ll_sched_conn_overlap
0001c80c l     F .text	00000024 ble_ll_sched_overlaps_current
0001c830 l     F .text	0000008c ble_ll_sched_execute_item
0001c8bc l     F .text	00000048 ble_ll_sched_run
00000000 l    df *ABS*	00000000 ble_ll_utils.c
00031e2c l     O .text	00000010 g_ble_sca_ppm_tbl
00000000 l    df *ABS*	00000000 ble_ll_whitelist.c
0001d21c l     F .text	0000001c ble_ll_whitelist_chg_allowed
0001d238 l     F .text	0000003c ble_ll_whitelist_search
00000000 l    df *ABS*	00000000 ble_mitm_ll.c
00000000 l    df *ABS*	00000000 ble_hw.c
0001d36c l     F .text	00000040 ble_rng_isr
2000203c l     O .bss	00000001 g_ble_hw_whitelist_mask
00000000 l    df *ABS*	00000000 ble_phy.c
0001d6d4 l     F .text	00000018 ble_phy_apply_errata_102_106_107
0001d6ec l     F .text	00000020 nrf_wait_disabled
0001d70c l     F .text	000000ac ble_phy_set_start_time
0001d7b8 l     F .text	00000004 ble_phy_get_ccm_datarate
0001d7bc l     F .text	00000100 ble_phy_rx_xcvr_setup
0001d8bc l     F .text	00000030 ble_phy_set_access_addr
0001d8ec l     F .text	0000001c ble_phy_stop_usec_timer
0001d908 l     F .text	0000003c ble_phy_disable_irq_and_ppi
0001d944 l     F .text	00000058 ble_phy_set_start_now
0001daac l     F .text	000000e4 ble_phy_tx_end_isr
0001e0f8 l     F .text	00000098 ble_phy_isr
0001de64 l     F .text	00000140 ble_phy_rx_start_isr
0001dfa4 l     F .text	00000154 ble_phy_rx_end_isr
20002040 l     O .bss	00000104 g_ble_phy_enc_buf
20002144 l     O .bss	00000104 g_ble_phy_rx_buf
20002248 l     O .bss	00000104 g_ble_phy_tx_buf
00031e44 l     O .text	00000028 g_ble_phy_chan_freq
00031e6c l     O .text	00000004 g_ble_phy_t_rxaddrdelay
00031e70 l     O .text	00000004 g_ble_phy_t_rxenddelay
00031e74 l     O .text	00000004 g_ble_phy_t_txdelay
00031e78 l     O .text	00000004 g_ble_phy_t_txenddelay
00000000 l    df *ABS*	00000000 ble_att.c
0001e43c l     F .text	00000028 ble_att_rx_dispatch_entry_find
0001e464 l     F .text	000001f4 ble_att_inc_rx_stat
0001e658 l     F .text	00000032 ble_att_rx_handle_unknown_request
0001e68a l     F .text	00000082 ble_att_rx
2000234c l     O .bss	00000002 ble_att_preferred_mtu_val
00031e84 l     O .text	000000d8 ble_att_rx_dispatch
00000000 l    df *ABS*	00000000 ble_att_clt.c
00000000 l    df *ABS*	00000000 ble_att_cmd.c
00000000 l    df *ABS*	00000000 ble_att_svr.c
0001ebd8 l     F .text	00000010 ble_att_svr_next_id
0001ebe8 l     F .text	00000024 ble_att_svr_prep_find_prev
0001ec0c l     F .text	0000005c ble_att_svr_prep_validate
0001ec68 l     F .text	00000020 ble_att_svr_entry_alloc
0001ec88 l     F .text	0000001a ble_att_svr_get_sec_state
0001eca2 l     F .text	00000116 ble_att_svr_check_perms
0001edb8 l     F .text	0000005e ble_att_svr_read
0001ee16 l     F .text	00000062 ble_att_svr_write
0001ee78 l     F .text	00000018 ble_att_svr_pullup_req_base
0001ee90 l     F .text	00000068 ble_att_svr_build_mtu_rsp
0001eef8 l     F .text	00000024 ble_att_svr_pkt
0001ef1c l     F .text	00000032 ble_att_svr_build_write_rsp
0001ef4e l     F .text	00000032 ble_att_svr_build_indicate_rsp
0001ef80 l     F .text	000000b0 ble_att_svr_fill_info
0001f030 l     F .text	00000060 ble_att_svr_build_find_info_rsp
0001f090 l     F .text	00000048 ble_att_svr_read_group_type_entry_write
0001f0d8 l     F .text	00000024 ble_att_svr_is_valid_find_group_type
0001f0fc l     F .text	00000054 ble_att_svr_is_valid_group_end
0001f150 l     F .text	00000016 ble_att_svr_is_valid_read_group_type
0001f166 l     F .text	0000005c ble_att_svr_read_flat
0001f1c2 l     F .text	0000005c ble_att_svr_fill_type_value_entry
0001f220 l     F .text	000000e8 ble_att_svr_fill_type_value
0001f308 l     F .text	00000062 ble_att_svr_build_find_type_value_rsp
0001f36a l     F .text	0000003a ble_att_svr_service_uuid
0001f3a4 l     F .text	00000184 ble_att_svr_build_read_group_type_rsp
0001f528 l     F .text	0000001c ble_att_svr_prep_free
0001f544 l     F .text	0000003c ble_att_svr_prep_alloc
0001f580 l     F .text	0000007c ble_att_svr_insert_prep_entry
0001f5fc l     F .text	00000048 ble_att_svr_prep_extract
0001f644 l     F .text	00000014 ble_att_svr_free_start_mem
0001f6cc l     F .text	00000034 ble_att_svr_write_handle
0001f700 l     F .text	00000064 ble_att_svr_prep_write
0001f798 l     F .text	00000136 ble_att_svr_build_read_type_rsp
0001f918 l     F .text	000000a6 ble_att_svr_build_read_mult_rsp
0001f9f0 l     F .text	000000a4 ble_att_svr_tx_rsp
20002350 l     O .bss	00000004 ble_att_svr_entry_mem
20002354 l     O .bss	0000001c ble_att_svr_entry_pool
20002370 l     O .bss	00000008 ble_att_svr_hidden_list
20002378 l     O .bss	00000002 ble_att_svr_id
2000237c l     O .bss	00000008 ble_att_svr_list
20002384 l     O .bss	00000300 ble_att_svr_prep_entry_mem
20002684 l     O .bss	0000001c ble_att_svr_prep_entry_pool
00000000 l    df *ABS*	00000000 ble_gap.c
00020220 l     F .text	0000002a ble_gap_call_event_cb
0002024c l     F .text	0000002c ble_gap_is_preempted
00020278 l     F .text	00000010 ble_gap_has_client
00020288 l     F .text	00000012 ble_gap_update_to_l2cap
0002029c l     F .text	00000018 ble_gap_adv_active_instance
000202b4 l     F .text	00000020 ble_gap_accept_master_conn
000202d4 l     F .text	0000003c ble_gap_accept_slave_conn
00020310 l     F .text	00000028 ble_gap_adv_type
00020338 l     F .text	00000032 ble_gap_adv_dflt_itvls
0002036c l     F .text	00000024 ble_gap_update_entry_find
00020390 l     F .text	00000046 ble_gap_validate_conn_params
000203d8 l     F .text	00000020 ble_gap_event_listener_call
000203f8 l     F .text	00000034 ble_gap_extract_conn_cb
0002042c l     F .text	00000028 ble_gap_call_conn_event_cb
00020454 l     F .text	00000094 ble_gap_fill_conn_desc
000204e8 l     F .text	00000016 ble_gap_conn_to_snapshot
000204fe l     F .text	00000028 ble_gap_find_snapshot
00020526 l     F .text	0000001e ble_gap_rd_rem_sup_feat_tx
00020544 l     F .text	0000001a ble_gap_conn_cancel_tx
0002055e l     F .text	00000024 ble_gap_adv_enable_tx
00020582 l     F .text	00000094 ble_gap_adv_params_tx
00020616 l     F .text	00000042 ble_gap_tx_param_pos_reply
00020658 l     F .text	00000022 ble_gap_tx_param_neg_reply
0002067a l     F .text	00000042 ble_gap_update_tx
000206bc l     F .text	00000030 ble_gap_update_entry_remove
000206ec l     F .text	00000024 ble_gap_master_reset_state
00020710 l     F .text	00000030 ble_gap_master_extract_state
00020740 l     F .text	00000032 ble_gap_master_connect_failure
00020774 l     F .text	00000024 ble_gap_master_failed
00020798 l     F .text	00000040 ble_gap_master_connect_cancelled
000207d8 l     F .text	00000020 ble_gap_slave_reset_state
000207f8 l     F .text	0000002c ble_gap_slave_extract_cb
00020824 l     F .text	00000038 ble_gap_adv_finished
0002085c l     F .text	00000014 ble_gap_update_entry_free
00020870 l     F .text	00000038 ble_gap_master_ticks_until_exp
000208a8 l     F .text	0000003c ble_gap_update_next_exp
000208e4 l     F .text	00000038 ble_gap_slave_ticks_until_exp
0002091c l     F .text	0000002c ble_gap_slave_timer
00020948 l     F .text	00000020 ble_gap_slave_set_timer
00020968 l     F .text	00000074 ble_gap_log_adv
000209dc l     F .text	00000030 ble_gap_log_update
00020a0c l     F .text	0000004c ble_gap_master_timer
00020a58 l     F .text	00000084 ble_gap_adv_validate
00020adc l     F .text	00000024 ble_gap_update_entry_alloc
00020f34 l     F .text	00000044 ble_gap_adv_stop_no_lock
00020fa0 l     F .text	0000004c ble_gap_conn_cancel_no_lock
00021088 l     F .text	0000003e ble_gap_update_notify
00021280 l     F .text	0000002c ble_gap_update_l2cap_cb
000212ac l     F .text	00000044 ble_gap_update_timer
00021318 l     F .text	00000034 ble_gap_update_failed
200026a0 l     O .bss	00000004 ble_gap_event_listener_list
200026a4 l     O .bss	00000004 ble_gap_update_entries
200026a8 l     O .bss	00000018 ble_gap_update_entry_mem
200026c0 l     O .bss	0000001c ble_gap_update_entry_pool
20000558 l     O .bssnz	00000014 ble_gap_master
2000056c l     O .bssnz	00000010 ble_gap_slave
200026dc l     O .bss	0000000c preempt_done_mutex
200026e8 l     O .bss	00000008 slaves.12889
00000000 l    df *ABS*	00000000 ble_gattc.c
00021928 l     F .text	0000000c ble_gattc_err_dispatch_get
00021934 l     F .text	0000000c ble_gattc_resume_dispatch_get
00021940 l     F .text	0000000c ble_gattc_tmo_dispatch_get
0002194c l     F .text	00000024 ble_gattc_proc_matches_conn_op
00021970 l     F .text	0000001e ble_gattc_proc_matches_expired
0002198e l     F .text	00000008 ble_gattc_proc_matches_stalled
00021996 l     F .text	00000014 ble_gattc_proc_timeout
000219ac l     F .text	0000001c ble_gattc_error
000219c8 l     F .text	00000040 ble_gattc_mtu_cb
00021a08 l     F .text	0000000e ble_gattc_mtu_tmo
00021a16 l     F .text	0000000a ble_gattc_mtu_err
00021a20 l     F .text	00000040 ble_gattc_disc_all_svcs_cb
00021a60 l     F .text	0000000e ble_gattc_disc_all_svcs_tmo
00021a6e l     F .text	00000016 ble_gattc_disc_all_svcs_err
00021a84 l     F .text	00000040 ble_gattc_disc_svc_uuid_cb
00021ac4 l     F .text	0000000e ble_gattc_disc_svc_uuid_tmo
00021ad2 l     F .text	00000014 ble_gattc_disc_svc_uuid_err
00021ae8 l     F .text	00000040 ble_gattc_find_inc_svcs_cb
00021b28 l     F .text	0000000e ble_gattc_find_inc_svcs_tmo
00021b36 l     F .text	00000018 ble_gattc_find_inc_svcs_err
00021b50 l     F .text	00000040 ble_gattc_disc_all_chrs_cb
00021b90 l     F .text	0000000e ble_gattc_disc_all_chrs_tmo
00021b9e l     F .text	00000014 ble_gattc_disc_all_chrs_err
00021bb4 l     F .text	00000040 ble_gattc_disc_chr_uuid_cb
00021bf4 l     F .text	0000000e ble_gattc_disc_chr_uuid_tmo
00021c02 l     F .text	00000014 ble_gattc_disc_chr_uuid_err
00021c18 l     F .text	00000048 ble_gattc_disc_all_dscs_cb
00021c60 l     F .text	0000000e ble_gattc_disc_all_dscs_tmo
00021c6e l     F .text	00000014 ble_gattc_disc_all_dscs_err
00021c84 l     F .text	00000040 ble_gattc_read_cb
00021cc4 l     F .text	0000000e ble_gattc_read_tmo
00021cd2 l     F .text	0000000a ble_gattc_read_err
00021cdc l     F .text	00000040 ble_gattc_read_uuid_cb
00021d1c l     F .text	0000000e ble_gattc_read_uuid_tmo
00021d2a l     F .text	0000000a ble_gattc_read_uuid_err
00021d34 l     F .text	00000040 ble_gattc_read_long_cb
00021d74 l     F .text	0000000e ble_gattc_read_long_tmo
00021d82 l     F .text	0000000a ble_gattc_read_long_err
00021d8c l     F .text	00000054 ble_gattc_read_mult_cb
00021de0 l     F .text	0000000e ble_gattc_read_mult_tmo
00021dee l     F .text	0000000a ble_gattc_read_mult_err
00021df8 l     F .text	00000038 ble_gattc_write_long_cb
00021e30 l     F .text	0000000c ble_gattc_write_long_tmo
00021e3c l     F .text	00000048 ble_gattc_write_reliable_cb
00021e84 l     F .text	0000000c ble_gattc_write_reliable_tmo
00021e90 l     F .text	0000002c ble_gattc_proc_set_resume_timer
00021ebc l     F .text	00000014 ble_gattc_process_resume_status
00021ed0 l     F .text	00000010 ble_gattc_proc_set_exp_timer
00021ee0 l     F .text	00000024 ble_gattc_ticks_until_resume
00021f04 l     F .text	00000078 ble_gattc_extract
00021f7c l     F .text	0000002c ble_gattc_extract_expired
00021fa8 l     F .text	00000014 ble_gattc_extract_stalled
00021fbc l     F .text	00000020 ble_gattc_extract_by_conn_op
00021fdc l     F .text	00000014 ble_gattc_extract_first_by_conn_op
00021ff0 l     F .text	00000020 ble_gattc_proc_insert
00022010 l     F .text	00000010 ble_gattc_indicate_tmo
00022020 l     F .text	0000004c ble_gattc_write_cb
0002206c l     F .text	0000000c ble_gattc_write_tmo
00022078 l     F .text	00000008 ble_gattc_write_err
00022080 l     F .text	00000044 ble_gattc_proc_free
000220c4 l     F .text	0000003e ble_gattc_fail_procs
00022102 l     F .text	00000020 ble_gattc_write_reliable_err
00022122 l     F .text	0000002a ble_gattc_write_long_err
0002214c l     F .text	00000084 ble_gattc_write_reliable_tx
000221d0 l     F .text	00000024 ble_gattc_write_reliable_resume
000221f4 l     F .text	0000006e ble_gattc_write_long_tx
00022262 l     F .text	00000024 ble_gattc_write_long_resume
00022286 l     F .text	0000001a ble_gattc_read_long_tx
000222a0 l     F .text	00000026 ble_gattc_read_long_resume
000222c6 l     F .text	00000012 ble_gattc_disc_all_dscs_tx
000222d8 l     F .text	00000026 ble_gattc_disc_all_dscs_resume
00022300 l     F .text	00000028 ble_gattc_disc_chr_uuid_tx
00022328 l     F .text	00000026 ble_gattc_disc_chr_uuid_resume
00022350 l     F .text	00000028 ble_gattc_disc_all_chrs_tx
00022378 l     F .text	00000026 ble_gattc_disc_all_chrs_resume
000223a0 l     F .text	00000030 ble_gattc_find_inc_svcs_tx
000223d0 l     F .text	00000026 ble_gattc_find_inc_svcs_resume
000223f6 l     F .text	0000003a ble_gattc_disc_svc_uuid_tx
00022430 l     F .text	00000026 ble_gattc_disc_svc_uuid_resume
00022458 l     F .text	00000028 ble_gattc_disc_all_svcs_tx
00022480 l     F .text	00000026 ble_gattc_disc_all_svcs_resume
000224a6 l     F .text	00000026 ble_gattc_process_status
000224cc l     F .text	00000040 ble_gattc_resume_procs
0002250c l     F .text	0000001c ble_gattc_proc_alloc
00022528 l     F .text	00000014 ble_gattc_log_proc_init
0002253c l     F .text	00000020 ble_gattc_log_notify
0002255c l     F .text	00000020 ble_gattc_log_indicate
0002257c l     F .text	00000028 ble_gattc_indicate_err
000225a4 l     F .text	00000024 ble_gattc_indicate_rx_rsp
200026f0 l     O .bss	000000e0 ble_gattc_proc_mem
200027d0 l     O .bss	0000001c ble_gattc_proc_pool
200027ec l     O .bss	00000008 ble_gattc_procs
200027f4 l     O .bss	00000004 ble_gattc_resume_at
200027f8 l     O .bss	00000004 error.12640
00032254 l     O .text	0000003c ble_gattc_err_dispatch
000322f8 l     O .text	0000003c ble_gattc_resume_dispatch
00032334 l     O .text	0000003c ble_gattc_tmo_dispatch
00000000 l    df *ABS*	00000000 ble_gatts.c
0002285c l     F .text	0000001a ble_gatts_chr_clt_cfg_allowed
00022876 l     F .text	00000056 ble_gatts_att_flags_from_chr_flags
000228cc l     F .text	00000056 ble_gatts_chr_properties
00022922 l     F .text	00000014 ble_gatts_chr_is_sane
00022936 l     F .text	0000000c ble_gatts_chr_op
00022944 l     F .text	00000020 ble_gatts_chr_inc_val_stat
00022964 l     F .text	0000002c ble_gatts_find_svc_entry_idx
00022990 l     F .text	0000003c ble_gatts_svc_incs_satisfied
000229cc l     F .text	0000000c ble_gatts_dsc_op
000229d8 l     F .text	00000024 ble_gatts_dsc_inc_stat
000229fc l     F .text	00000014 ble_gatts_dsc_is_sane
00022a10 l     F .text	00000024 ble_gatts_clt_cfg_find_idx
00022a34 l     F .text	00000018 ble_gatts_clt_cfg_find
00022a4c l     F .text	00000024 ble_gatts_svc_type_to_uuid
00022a70 l     F .text	0000001a ble_gatts_svc_is_sane
00022a8c l     F .text	0000000c ble_gatts_clt_cfg_size
00022a98 l     F .text	00000034 ble_gatts_schedule_update
00022acc l     F .text	000000e2 ble_gatts_count_resources
00022bb0 l     F .text	000000f8 ble_gatts_clt_cfg_access_locked
00022ca8 l     F .text	00000032 ble_gatts_subscribe_event
00022d6c l     F .text	00000028 ble_gatts_register_inc
00023100 l     F .text	00000058 ble_gatts_inc_access
00022d94 l     F .text	00000038 ble_gatts_register_clt_cfg_dsc
00022dcc l     F .text	00000064 ble_gatts_register_dsc
0002322e l     F .text	00000038 ble_gatts_dsc_access
00022e30 l     F .text	00000108 ble_gatts_register_chr
000230a4 l     F .text	0000005c ble_gatts_chr_def_access
000231f6 l     F .text	00000038 ble_gatts_chr_val_access
00022f38 l     F .text	000000c4 ble_gatts_register_svc
00023070 l     F .text	00000034 ble_gatts_svc_access
00022ffc l     F .text	00000074 ble_gatts_register_round
00023158 l     F .text	0000009e ble_gatts_val_access
00023266 l     F .text	0000002e ble_gatts_mutable
00023294 l     F .text	00000024 ble_gatts_free_mem
000232b8 l     F .text	0000001c ble_gatts_free_svc_defs
000232d4 l     F .text	0000006c ble_gatts_tx_notifications_one_chr
200027fc l     O .bss	00000004 ble_gatts_clt_cfg_mem
20002800 l     O .bss	0000001c ble_gatts_clt_cfg_pool
2000281c l     O .bss	00000004 ble_gatts_clt_cfgs
20002820 l     O .bss	00000004 ble_gatts_num_cfgable_chrs
20002824 l     O .bss	00000004 ble_gatts_num_svc_defs
20002828 l     O .bss	00000002 ble_gatts_num_svc_entries
2000282c l     O .bss	00000004 ble_gatts_svc_defs
20002830 l     O .bss	00000004 ble_gatts_svc_entries
200002b4 l     O .data	00000004 __compound_literal.0
200002b8 l     O .data	00000004 __compound_literal.1
200002bc l     O .data	00000004 __compound_literal.2
200002c0 l     O .data	00000004 __compound_literal.3
200002c4 l     O .data	00000004 __compound_literal.4
00000000 l    df *ABS*	00000000 ble_hs.c
0002394c l     F .text	0000004a ble_hs_wakeup_tx_conn
00023998 l     F .text	00000018 ble_hs_event_rx_hci_ev
000239b0 l     F .text	0000001c ble_hs_clear_rx_queue
000239cc l     F .text	00000030 ble_hs_rx_data
000239fc l     F .text	00000008 ble_hs_event_tx_notify
00023a10 l     F .text	00000014 ble_hs_sched_start_stage2
00023a24 l     F .text	00000008 ble_hs_event_start_stage1
00023aac l     F .text	00000008 ble_hs_event_rx_data
00023b04 l     F .text	00000020 ble_hs_timer_reset
00023b24 l     F .text	00000030 ble_hs_timer_sched
00023b54 l     F .text	00000064 ble_hs_sync
00023bb8 l     F .text	0000005c ble_hs_reset
00023c14 l     F .text	00000008 ble_hs_event_reset
00023c1c l     F .text	00000054 ble_hs_timer_exp
00023d64 l     F .text	0000001e ble_hs_event_start_stage2
20002834 l     O .bss	00000010 ble_hs_ev_reset
20002844 l     O .bss	00000010 ble_hs_ev_start_stage1
20002854 l     O .bss	00000010 ble_hs_ev_start_stage2
20002864 l     O .bss	00000010 ble_hs_ev_tx_notifications
20002874 l     O .bss	00000004 ble_hs_evq
20002878 l     O .bss	000000a0 ble_hs_hci_os_event_buf
20002918 l     O .bss	0000000c ble_hs_mutex
20002924 l     O .bss	00000004 ble_hs_parent_task
20002928 l     O .bss	00000004 ble_hs_reset_reason
2000292c l     O .bss	00000018 ble_hs_rx_q
20002944 l     O .bss	00000020 ble_hs_timer
00000000 l    df *ABS*	00000000 ble_hs_adv.c
00023fec l     F .text	00000068 ble_hs_adv_set_hdr
00024054 l     F .text	0000004e ble_hs_adv_set_flat_mbuf
000240a2 l     F .text	0000005e ble_hs_adv_set_array_uuid16
00024100 l     F .text	00000062 ble_hs_adv_set_array_uuid128
00024162 l     F .text	0000006a ble_hs_adv_set_array_uuid32
000241cc l     F .text	00000066 ble_hs_adv_set_array16
00024232 l     F .text	000002d0 adv_set_fields
00000000 l    df *ABS*	00000000 ble_hs_atomic.c
00000000 l    df *ABS*	00000000 ble_hs_conn.c
20002964 l     O .bss	00000064 ble_hs_conn_elem_mem
200029c8 l     O .bss	00000006 ble_hs_conn_null_addr
200029d0 l     O .bss	0000001c ble_hs_conn_pool
200029ec l     O .bss	00000004 ble_hs_conns
00000000 l    df *ABS*	00000000 ble_hs_flow.c
00000000 l    df *ABS*	00000000 ble_hs_hci.c
00024980 l     F .text	0000004a ble_hs_hci_rx_cmd_complete
000249ca l     F .text	00000024 ble_hs_hci_rx_cmd_status
000249f0 l     F .text	0000000c ble_hs_hci_max_acl_payload_sz
000249fc l     F .text	00000014 ble_hs_hci_lock
00024a10 l     F .text	00000030 ble_hs_hci_wait_for_ack
00024a40 l     F .text	00000090 ble_hs_hci_process_ack
00024ad0 l     F .text	00000010 ble_hs_hci_unlock
00024ae0 l     F .text	00000024 ble_hs_hci_rx_ack
00024b04 l     F .text	00000024 ble_hs_hci_frag_alloc
00024b28 l     F .text	00000048 ble_hs_hci_acl_hdr_prepend
200029f0 l     O .bss	00000004 ble_hs_hci_ack
200029f4 l     O .bss	00000002 ble_hs_hci_buf_sz
200029f8 l     O .bss	0000011c ble_hs_hci_frag_data
20002b14 l     O .bss	0000000c ble_hs_hci_frag_mbuf_pool
20002b20 l     O .bss	0000001c ble_hs_hci_frag_mempool
20002b3c l     O .bss	0000000c ble_hs_hci_mutex
20002b48 l     O .bss	00000008 ble_hs_hci_sem
20002b50 l     O .bss	00000004 ble_hs_hci_sup_feat
20002b54 l     O .bss	00000001 ble_hs_hci_version
00000000 l    df *ABS*	00000000 ble_hs_hci_cmd.c
00024d94 l     F .text	00000018 ble_hs_hci_cmd_transport
00024dac l     F .text	0000003c ble_hs_hci_cmd_send
00000000 l    df *ABS*	00000000 ble_hs_hci_evt.c
00024e20 l     F .text	00000024 ble_hs_hci_evt_dispatch_find
00024e44 l     F .text	00000014 ble_hs_hci_evt_le_dispatch_find
00024e58 l     F .text	00000026 ble_hs_hci_evt_le_meta
00024e7e l     F .text	0000004c ble_hs_hci_evt_le_adv_rpt_first_pass
00024eca l     F .text	00000004 ble_hs_hci_evt_le_ext_adv_rpt
00024ece l     F .text	00000004 ble_hs_hci_evt_le_periodic_adv_sync_estab
00024ed2 l     F .text	00000004 ble_hs_hci_evt_le_periodic_adv_rpt
00024ed6 l     F .text	00000004 ble_hs_hci_evt_le_periodic_adv_sync_lost
00024eda l     F .text	00000004 ble_hs_hci_evt_le_periodic_adv_sync_transfer
00024ede l     F .text	00000004 ble_hs_hci_evt_le_scan_timeout
00024ee2 l     F .text	00000004 ble_hs_hci_evt_le_adv_set_terminated
00024ee6 l     F .text	00000004 ble_hs_hci_evt_le_scan_req_rcvd
00024eea l     F .text	00000014 ble_hs_hci_evt_hw_error
00024efe l     F .text	00000014 ble_hs_hci_evt_enc_key_refresh
00024f12 l     F .text	00000014 ble_hs_hci_evt_encrypt_change
00024f26 l     F .text	00000032 ble_hs_hci_evt_disconn_complete
00024f58 l     F .text	00000062 ble_hs_hci_evt_num_completed_pkts
00024fba l     F .text	00000014 ble_hs_hci_evt_le_phy_update_complete
00024fce l     F .text	0000007e ble_hs_hci_evt_le_dir_adv_rpt
0002504c l     F .text	0000007e ble_hs_hci_evt_le_adv_rpt
000250ca l     F .text	00000086 ble_hs_hci_evt_le_enh_conn_complete
00025150 l     F .text	00000066 ble_hs_hci_evt_le_conn_complete
000251b6 l     F .text	00000014 ble_hs_hci_evt_le_conn_parm_req
000251ca l     F .text	00000014 ble_hs_hci_evt_le_lt_key_req
000251de l     F .text	00000014 ble_hs_hci_evt_le_rd_rem_used_feat_complete
000251f2 l     F .text	00000014 ble_hs_hci_evt_le_conn_upd_complete
00032408 l     O .text	00000030 ble_hs_hci_evt_dispatch
00032438 l     O .text	00000064 ble_hs_hci_evt_le_dispatch
00000000 l    df *ABS*	00000000 ble_hs_hci_util.c
00000000 l    df *ABS*	00000000 ble_hs_id.c
000254b8 l     F .text	00000042 ble_hs_id_addr_type_usable
20002b58 l     O .bss	00000006 ble_hs_id_pub
20002b60 l     O .bss	00000006 ble_hs_id_rnd
000324bc l     O .text	00000002 priv_addr_types.12031
000324c0 l     O .text	00000002 pub_addr_types.12030
00000000 l    df *ABS*	00000000 ble_hs_log.c
00000000 l    df *ABS*	00000000 ble_hs_mbuf.c
000255dc l     F .text	0000002a ble_hs_mbuf_gen_pkt
00000000 l    df *ABS*	00000000 ble_hs_misc.c
00025678 l     F .text	00000034 ble_hs_misc_restore_one_irk
00000000 l    df *ABS*	00000000 ble_hs_mqueue.c
00000000 l    df *ABS*	00000000 ble_hs_pvcy.c
000257a8 l     F .text	0000002e ble_hs_pvcy_set_addr_timeout
000257d6 l     F .text	0000001a ble_hs_pvcy_clear_entries
000257f0 l     F .text	0000001e ble_hs_pvcy_set_resolve_enabled
000258b4 l     F .text	0000008c ble_hs_pvcy_add_entry_hci
20002b68 l     O .bss	00000010 ble_hs_pvcy_irk
20002b78 l     O .bss	00000001 ble_hs_pvcy_started
00000000 l    df *ABS*	00000000 ble_hs_startup.c
000259fc l     F .text	0000001a ble_hs_startup_reset_tx
00025a16 l     F .text	00000030 ble_hs_startup_le_read_buf_sz_tx
00025a46 l     F .text	00000030 ble_hs_startup_read_buf_sz_tx
00025a76 l     F .text	0000002a ble_hs_startup_read_local_ver_tx
00025aa0 l     F .text	00000058 ble_hs_startup_set_evmask_tx
00025af8 l     F .text	00000048 ble_hs_startup_le_set_evmask_tx
00025b40 l     F .text	0000005e ble_hs_startup_read_buf_sz
00025b9e l     F .text	00000028 ble_hs_startup_le_read_sup_f_tx
00025bc6 l     F .text	00000028 ble_hs_startup_read_bd_addr
00000000 l    df *ABS*	00000000 ble_hs_stop.c
00025c44 l     F .text	00000048 ble_hs_stop_done
00025c8c l     F .text	00000020 ble_hs_stop_terminate_timeout_cb
20002b79 l     O .bss	00000001 ble_hs_stop_conn_cnt
20002b7c l     O .bss	0000000c ble_hs_stop_gap_listener
20002b88 l     O .bss	00000004 ble_hs_stop_listeners
20002b8c l     O .bss	00000020 ble_hs_stop_terminate_tmo
00000000 l    df *ABS*	00000000 ble_l2cap.c
00025cc8 l     F .text	00000012 ble_l2cap_get_mtu
00025cda l     F .text	00000020 ble_l2cap_append_rx
00025dde l     F .text	0000004c ble_l2cap_rx_payload
20002bac l     O .bss	00000054 ble_l2cap_chan_mem
00000000 l    df *ABS*	00000000 ble_l2cap_sig.c
00025f80 l     F .text	0000001c ble_l2cap_sig_next_id
00025f9c l     F .text	00000014 ble_l2cap_sig_dispatch_get
00025fb0 l     F .text	0000002c ble_l2cap_sig_proc_matches
00025fdc l     F .text	00000004 ble_l2cap_sig_rx_noop
00025fe0 l     F .text	00000020 ble_l2cap_sig_update_call_cb
00026000 l     F .text	00000024 ble_l2cap_sig_proc_insert
00026024 l     F .text	00000060 ble_l2cap_sig_proc_extract
00026084 l     F .text	00000020 ble_l2cap_sig_proc_alloc
000260a4 l     F .text	00000014 ble_l2cap_sig_proc_set_timer
000260b8 l     F .text	0000005c ble_l2cap_sig_extract_expired
00026114 l     F .text	00000014 ble_l2cap_sig_proc_free
00026128 l     F .text	00000018 ble_l2cap_sig_process_status
00026140 l     F .text	00000014 ble_l2cap_sig_rx_reject
00026154 l     F .text	0000004a ble_l2cap_sig_update_rsp_rx
000261a0 l     F .text	00000084 ble_l2cap_sig_rx
00026224 l     F .text	000000a0 ble_l2cap_sig_update_req_rx
20002c00 l     O .bss	00000001 ble_l2cap_sig_cur_id
20002c04 l     O .bss	00000014 ble_l2cap_sig_proc_mem
20002c18 l     O .bss	0000001c ble_l2cap_sig_proc_pool
20002c34 l     O .bss	00000008 ble_l2cap_sig_procs
00032558 l     O .text	0000006c ble_l2cap_sig_dispatch
00000000 l    df *ABS*	00000000 ble_l2cap_sig_cmd.c
00000000 l    df *ABS*	00000000 ble_sm.c
00026524 l     F .text	00000014 ble_sm_dispatch_get
00026538 l     F .text	00000028 ble_sm_proc_remove
00026560 l     F .text	00000038 ble_sm_proc_matches
00026598 l     F .text	00000018 ble_sm_insert
000265b0 l     F .text	0000000c ble_sm_rx_noop
000265bc l     F .text	00000028 ble_sm_build_authreq
000265e4 l     F .text	00000022 ble_sm_key_dist
00026606 l     F .text	00000010 ble_sm_state_after_pair
00026618 l     F .text	00000024 ble_sm_pair_base_fill
0002663c l     F .text	00000020 ble_sm_pair_req_fill
0002665c l     F .text	00000028 ble_sm_pair_rsp_fill
00026684 l     F .text	0000000e ble_sm_verify_auth_requirements
00026692 l     F .text	0000000a ble_sm_gen_ediv
0002669c l     F .text	0000000c ble_sm_gen_master_id_rand
000266a8 l     F .text	0000000c ble_sm_gen_csrk
000266b4 l     F .text	00000014 ble_sm_io_action
000266c8 l     F .text	000000b2 ble_sm_pair_cfg
0002677a l     F .text	00000026 ble_sm_gen_ltk
000267a0 l     F .text	0000003c ble_sm_exec
000267dc l     F .text	00000032 ble_sm_sec_req_exec
0002680e l     F .text	000000e6 ble_sm_fill_store_value
000268f4 l     F .text	00000048 ble_sm_update_sec_state
0002693c l     F .text	00000032 ble_sm_key_exch_success
0002696e l     F .text	0000027a ble_sm_key_exch_exec
00026be8 l     F .text	0000001e ble_sm_key_rxed
00026c06 l     F .text	00000040 ble_sm_start_encrypt_tx
00026c46 l     F .text	0000000e ble_sm_enc_restore_exec
00026c54 l     F .text	00000044 ble_sm_enc_start_exec
00026c98 l     F .text	0000004a ble_sm_ltk_req_reply_tx
00026ce2 l     F .text	00000024 ble_sm_ltk_start_exec
00026d06 l     F .text	00000030 ble_sm_ltk_req_neg_reply_tx
00026d36 l     F .text	0000004e ble_sm_ltk_restore_exec
00026d84 l     F .text	00000012 ble_sm_random_exec
00026d96 l     F .text	00000012 ble_sm_confirm_exec
00026da8 l     F .text	00000014 ble_sm_proc_set_timer
00026dbc l     F .text	00000070 ble_sm_extract_expired
00026e2c l     F .text	00000038 ble_sm_pair_fail_tx
00026e64 l     F .text	000000e6 ble_sm_persist_keys
00026f4c l     F .text	00000014 ble_sm_proc_free
00026f60 l     F .text	00000020 ble_sm_proc_alloc
00026f80 l     F .text	00000044 ble_sm_retrieve_ltk
00026fc4 l     F .text	0000002a ble_sm_fail_rx
00026fee l     F .text	00000054 ble_sm_read_bond
00027042 l     F .text	0000007c ble_sm_chk_repeat_pairing
000270d8 l     F .text	0000003c ble_sm_chk_store_overflow_by_type
00027114 l     F .text	00000020 ble_sm_chk_store_overflow
000271f8 l     F .text	00000080 ble_sm_sign_info_rx
00027278 l     F .text	0000007a ble_sm_id_addr_info_rx
000272f2 l     F .text	00000080 ble_sm_id_info_rx
00027372 l     F .text	0000007a ble_sm_master_id_rx
000273ec l     F .text	00000086 ble_sm_enc_info_rx
00027472 l     F .text	0000013a ble_sm_pair_req_rx
00027600 l     F .text	000000ae ble_sm_confirm_rx
000276ae l     F .text	000000c0 ble_sm_pair_rsp_rx
0002784c l     F .text	000000f0 ble_sm_enc_event_rx
0002793c l     F .text	00000078 ble_sm_rx
00027ad6 l     F .text	000000a4 ble_sm_pair_exec
00027b8a l     F .text	0000006c ble_sm_random_rx
00027d5a l     F .text	000000ec ble_sm_sec_req_rx
20002c3c l     O .bss	00000180 ble_sm_proc_mem
20002dbc l     O .bss	0000001c ble_sm_proc_pool
20002dd8 l     O .bss	00000008 ble_sm_procs
000325dc l     O .text	0000003c ble_sm_dispatch
00032654 l     O .text	0000002c ble_sm_state_dispatch
00000000 l    df *ABS*	00000000 ble_sm_cmd.c
00000000 l    df *ABS*	00000000 ble_sm_sc.c
00027f2c l     F .text	00000014 ble_sm_sc_initiator_txes_confirm
00027f40 l     F .text	00000014 ble_sm_sc_responder_verifies_random
00027f54 l     F .text	00000046 ble_sm_sc_gen_ri
00027f9a l     F .text	00000026 ble_sm_sc_random_advance
00027fc0 l     F .text	00000048 ble_sm_sc_gen_numcmp
00028008 l     F .text	00000008 ble_sm_gen_pub_priv
00028010 l     F .text	0000003c ble_sm_sc_ensure_keys_generated
0002804c l     F .text	00000038 ble_sm_sc_dhkey_addrs
00028138 l     F .text	00000162 ble_sm_dhkey_check_process
20002de0 l     O .bss	00000001 ble_sm_sc_keys_generated
20002de4 l     O .bss	00000020 ble_sm_sc_priv_key
20002e04 l     O .bss	00000040 ble_sm_sc_pub_key
00032680 l     O .text	00000019 ble_sm_sc_init_ioa
0003269c l     O .text	00000019 ble_sm_sc_resp_ioa
00000000 l    df *ABS*	00000000 ble_store.c
000288d4 l     F .text	00000018 ble_store_status
00028998 l     F .text	00000008 ble_store_persist_sec
00000000 l    df *ABS*	00000000 ble_store_util.c
00028b12 l     F .text	0000000a ble_store_util_iter_count
00028b1c l     F .text	0000005c ble_store_util_iter_unique_peer
00000000 l    df *ABS*	00000000 ble_uuid.c
000326b8 l     O .text	00000010 ble_uuid_base
00000000 l    df *ABS*	00000000 ble_sm_alg.c
00028e9e l     F .text	0000000c ble_sm_alg_log_buf
00028eaa l     F .text	0000003e ble_sm_alg_aes_cmac
00028ee8 l     F .text	00000010 ble_sm_alg_rand
00032720 l     O .text	00000020 ble_sm_alg_dbg_priv_key
0003277c l     O .text	000000b0 curve_secp256r1
0003282c l     O .text	00000010 salt.12283
00000000 l    df *ABS*	00000000 ble_svc_ans.c
00029338 l     F .text	0000007c ble_svc_ans_new_alert_notify
000293b4 l     F .text	0000002c ble_svc_ans_unr_alert_notify
000293e0 l     F .text	00000026 ble_svc_ans_chr_write
00029408 l     F .text	00000208 ble_svc_ans_access
20002e44 l     O .bss	00000002 ble_svc_ans_alert_not_ctrl_pt
20002e46 l     O .bss	00000002 ble_svc_ans_conn_handle
20002e48 l     O .bss	00000001 ble_svc_ans_new_alert_cat
20002e4c l     O .bss	00000008 ble_svc_ans_new_alert_cnt
20002e54 l     O .bss	00000014 ble_svc_ans_new_alert_val
20002e68 l     O .bss	00000002 ble_svc_ans_new_alert_val_handle
20002e6a l     O .bss	00000002 ble_svc_ans_new_alert_val_len
20002e6c l     O .bss	00000001 ble_svc_ans_unr_alert_cat
20002e70 l     O .bss	00000008 ble_svc_ans_unr_alert_cnt
20002e78 l     O .bss	00000002 ble_svc_ans_unr_alert_stat
20002e7a l     O .bss	00000002 ble_svc_ans_unr_alert_val_handle
200002f0 l     O .data	00000004 __compound_literal.0
200002f4 l     O .data	00000004 __compound_literal.1
200002f8 l     O .data	00000004 __compound_literal.2
200002fc l     O .data	00000004 __compound_literal.3
20000300 l     O .data	00000004 __compound_literal.4
20000304 l     O .data	00000004 __compound_literal.5
20000308 l     O .data	00000090 __compound_literal.6
0003283c l     O .text	00000020 ble_svc_ans_defs
00000000 l    df *ABS*	00000000 ble_svc_dis.c
00029694 l     F .text	00000064 ble_svc_dis_access
20000398 l     O .data	00000004 __compound_literal.0
2000039c l     O .data	00000004 __compound_literal.1
200003a0 l     O .data	00000004 __compound_literal.2
200003a4 l     O .data	00000048 __compound_literal.3
0003285c l     O .text	00000020 ble_svc_dis_defs
00000000 l    df *ABS*	00000000 ble_svc_gap.c
00029778 l     F .text	00000016 ble_svc_gap_device_name_write_access
0002978e l     F .text	00000016 ble_svc_gap_appearance_write_access
000297a4 l     F .text	00000028 ble_svc_gap_device_name_read_access
000297cc l     F .text	0000002c ble_svc_gap_appearance_read_access
000297f8 l     F .text	00000098 ble_svc_gap_access
20002e7c l     O .bss	00000002 ble_svc_gap_appearance
20000408 l     O .data	00000004 __compound_literal.0
2000040c l     O .data	00000004 __compound_literal.1
20000410 l     O .data	00000004 __compound_literal.2
20000414 l     O .data	00000048 __compound_literal.3
2000045c l     O .data	00000020 ble_svc_gap_name
00032894 l     O .text	00000020 ble_svc_gap_defs
00000000 l    df *ABS*	00000000 ble_svc_gatt.c
00029904 l     F .text	00000068 ble_svc_gatt_access
20002e7e l     O .bss	00000002 ble_svc_gatt_changed_val_handle
20002e80 l     O .bss	00000002 ble_svc_gatt_end_handle
20002e82 l     O .bss	00000002 ble_svc_gatt_start_handle
2000047c l     O .data	00000004 __compound_literal.0
20000480 l     O .data	00000004 __compound_literal.1
20000484 l     O .data	00000030 __compound_literal.2
000328b4 l     O .text	00000020 ble_svc_gatt_defs
00000000 l    df *ABS*	00000000 ble_store_config.c
000299e0 l     F .text	00000094 ble_store_config_find_sec
00029a74 l     F .text	00000038 ble_store_config_read_peer_sec
00029aac l     F .text	00000038 ble_store_config_read_our_sec
00029ae4 l     F .text	00000084 ble_store_config_find_cccd
00029b68 l     F .text	00000028 ble_store_config_read_cccd
00029b90 l     F .text	0000002e ble_store_config_print_key_sec
00029bfe l     F .text	00000046 ble_store_config_print_value_sec
00029c44 l     F .text	00000058 ble_store_config_write_peer_sec
00029c9c l     F .text	00000058 ble_store_config_write_our_sec
00029cf4 l     F .text	0000004c ble_store_config_write_cccd
00029d6a l     F .text	00000022 ble_store_config_delete_obj
00029d8c l     F .text	00000024 ble_store_config_delete_sec
00029db0 l     F .text	00000024 ble_store_config_delete_peer_sec
00029dd4 l     F .text	00000024 ble_store_config_delete_our_sec
00029df8 l     F .text	00000034 ble_store_config_delete_cccd
00000000 l    df *ABS*	00000000 ble_store_config_conf.c
00029eb8 l     F .text	0000002c ble_store_config_serialize_arr
00029ee4 l     F .text	0000002c ble_store_config_persist_sec_set
00029f10 l     F .text	00000078 ble_store_config_conf_export
00029f88 l     F .text	0000001c ble_store_config_deserialize_arr
00029fa4 l     F .text	00000080 ble_store_config_conf_set
200004b4 l     O .data	00000020 ble_store_config_conf_handler
00000000 l    df *ABS*	00000000 addr.c
0002a0cc l     F .text	00000012 ble_hs_util_load_rand_addr
0002a0de l     F .text	00000032 ble_hs_util_ensure_rand_addr
00000000 l    df *ABS*	00000000 ble_hci_ram.c
20002e84 l     O .bss	00000104 ble_hci_ram_cmd_buf
20002f88 l     O .bss	0000001c ble_hci_ram_cmd_pool
20002fa4 l     O .bss	00000090 ble_hci_ram_evt_hi_buf
20003034 l     O .bss	0000001c ble_hci_ram_evt_hi_pool
20003050 l     O .bss	00000240 ble_hci_ram_evt_lo_buf
20003290 l     O .bss	0000001c ble_hci_ram_evt_lo_pool
200032ac l     O .bss	00000004 ble_hci_ram_rx_acl_hs_arg
200032b0 l     O .bss	00000004 ble_hci_ram_rx_acl_hs_cb
200032b4 l     O .bss	00000004 ble_hci_ram_rx_acl_ll_arg
200032b8 l     O .bss	00000004 ble_hci_ram_rx_acl_ll_cb
200032bc l     O .bss	00000004 ble_hci_ram_rx_cmd_hs_arg
200032c0 l     O .bss	00000004 ble_hci_ram_rx_cmd_hs_cb
200032c4 l     O .bss	00000004 ble_hci_ram_rx_cmd_ll_arg
200032c8 l     O .bss	00000004 ble_hci_ram_rx_cmd_ll_cb
00000000 l    df *ABS*	00000000 bootutil_misc.c
0002a418 l     F .text	0000000c boot_flag_decode
0002a424 l     F .text	00000018 boot_magic_decode
0002a43c l     F .text	0000006a boot_write_trailer
0002a4a6 l     F .text	00000016 boot_write_trailer_flag
00032974 l     O .text	00000012 boot_swap_tables
00000000 l    df *ABS*	00000000 aes_encrypt.c
000329fc l     O .text	00000100 sbox
00000000 l    df *ABS*	00000000 cmac_mode.c
00000000 l    df *ABS*	00000000 ecc.c
0002b17c l     F .text	0000001c vli_numDigits
0002b198 l     F .text	00000024 uECC_vli_rshift1
0002b1bc l     F .text	00000040 muladd
0002b1fc l     F .text	000000c2 uECC_vli_mult
0002b3e8 l     F .text	00000042 uECC_vli_add
0002b42a l     F .text	0000003c vli_modInv_update
0002b7fa l     F .text	0000000c uECC_vli_modSquare_fast
0002b9c2 l     F .text	00000118 XYcZ_addC
0002bc58 l     F .text	0000006e XYcZ_initial_double
200032cc l     O .bss	00000004 g_rng_function
00032afc l     O .text	000000b0 curve_secp256r1
00000000 l    df *ABS*	00000000 ecc_dh.c
00000000 l    df *ABS*	00000000 utils.c
00000000 l    df *ABS*	00000000 base64.c
0002c254 l     F .text	00000020 pos
0002c274 l     F .text	0000004c token_decode
00032bac l     O .text	00000041 base64_chars
00000000 l    df *ABS*	00000000 cbor_buf_reader.c
0002c3a4 l     F .text	00000006 cbuf_buf_reader_get8
0002c3aa l     F .text	00000012 cbor_buf_reader_cpy
0002c3bc l     F .text	00000018 cbor_buf_reader_cmp
0002c3d4 l     F .text	00000018 cbuf_buf_reader_get64
0002c3ec l     F .text	00000008 cbuf_buf_reader_get32
0002c3f4 l     F .text	0000000a cbuf_buf_reader_get16
00000000 l    df *ABS*	00000000 cbor_buf_writer.c
00000000 l    df *ABS*	00000000 cbor_mbuf_reader.c
0002c47e l     F .text	0000001e cbor_mbuf_reader_cpy
0002c49c l     F .text	0000001c cbor_mbuf_reader_get8
0002c4b8 l     F .text	00000018 cbor_mbuf_reader_cmp
0002c4d0 l     F .text	0000001e cbor_mbuf_reader_get64
0002c4ee l     F .text	0000001a cbor_mbuf_reader_get32
0002c508 l     F .text	00000020 cbor_mbuf_reader_get16
00000000 l    df *ABS*	00000000 cbor_mbuf_writer.c
00000000 l    df *ABS*	00000000 cborencoder.c
0002c5b4 l     F .text	00000096 create_container
0002c64a l     F .text	00000076 encode_string
00000000 l    df *ABS*	00000000 cborparser.c
0002c8a8 l     F .text	00000024 is_fixed_type
0002c8cc l     F .text	00000004 iterate_noop
0002c8d0 l     F .text	00000144 preparse_value
0002ca14 l     F .text	0000004c preparse_next_value
0002ca60 l     F .text	000000aa extract_length
0002cb0a l     F .text	00000178 iterate_string_chunks
0002cc82 l     F .text	000000f0 advance_internal
0002d040 l     F .text	00000084 advance_recursive
00000000 l    df *ABS*	00000000 cborpretty.c
0002d104 l     F .text	00000028 hexDump
0002d12c l     F .text	000001b4 utf8EscapedDump
0002d2e0 l     F .text	000003b8 value_to_pretty
0002d698 l     F .text	00000064 container_to_pretty
00000000 l    df *ABS*	00000000 cborparser_dup_string.c
00000000 l    df *ABS*	00000000 fcb.c
00000000 l    df *ABS*	00000000 fcb_append.c
0002da24 l     F .text	00000032 fcb_new_area
00000000 l    df *ABS*	00000000 fcb_elem_info.c
00000000 l    df *ABS*	00000000 fcb_getnext.c
00000000 l    df *ABS*	00000000 fcb_rotate.c
00000000 l    df *ABS*	00000000 fcb_walk.c
00000000 l    df *ABS*	00000000 hal_bsp.c
00000000 l    df *ABS*	00000000 hal_flash.c
0002df0c l     F .text	0000001e hal_flash_check_addr
200032d0 l     O .bss	00000001 protected_flash
00000000 l    df *ABS*	00000000 hal_flash.c
0002e1d8 l     F .text	00000028 nrf52k_flash_wait_ready
0002e200 l     F .text	00000054 nrf52k_flash_erase_sector
0002e254 l     F .text	00000004 nrf52k_flash_init
0002e258 l     F .text	00000028 nrf52k_flash_sector_info
0002e280 l     F .text	000000d0 nrf52k_flash_write
0002e350 l     F .text	0000000e nrf52k_flash_read
00032cb4 l     O .text	0000001c nrf52k_flash_funcs
00000000 l    df *ABS*	00000000 hal_os_tick.c
0002e360 l     F .text	000000f4 nrf52_timer_handler
00000000 l    df *ABS*	00000000 hal_watchdog.c
0002e5ac l     F .text	00000016 nrf52_hal_wdt_default_handler
0002e5c4 l     F .text	00000020 nrf52_wdt_irq_handler
00000000 l    df *ABS*	00000000 nrf52_clock.c
200032d1 l     O .bss	00000001 nrf52_clock_hfxo_refcnt
00000000 l    df *ABS*	00000000 nrf52_hw_id.c
00000000 l    df *ABS*	00000000 nrf52_periph.c
0002e744 l     F .text	00000040 nrf52_periph_create_timers
0002e784 l     F .text	00000044 nrf52_periph_create_uart
200032d4 l     O .bss	0000003c os_bsp_uart0
00032cd0 l     O .text	00000004 os_bsp_uart0_cfg
00000000 l    df *ABS*	00000000 hal_timer.c
0002e7d4 l     F .text	0000000a nrf_read_timer_cntr
0002e7e0 l     F .text	000000f4 nrf_timer_set_ocmp
0002e8d4 l     F .text	0000000a nrf_timer_disable_ocmp
0002e8de l     F .text	00000010 nrf_rtc_disable_ocmp
0002e8f0 l     F .text	00000054 hal_timer_read_bsptimer
0002e944 l     F .text	00000070 hal_timer_chk_queue
0002e9b4 l     F .text	00000040 hal_rtc_timer_irq_handler
00032cd4 l     O .text	00000018 nrf52_hal_timers
00000000 l    df *ABS*	00000000 endian.c
00000000 l    df *ABS*	00000000 os_cputime.c
00000000 l    df *ABS*	00000000 os_cputime_pwr2.c
00000000 l    df *ABS*	00000000 os_error.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 malloc.c
0002f04c l     F .text	00000004 malloc_lock_nop
0002f050 l     F .text	00000002 malloc_unlock_nop
0002f052 l     F .text	00000048 __malloc_from_block
0002f09c l     F .text	00000064 __free_block
200004d4 l     O .data	00000018 __malloc_head
200004ec l     O .data	00000004 malloc_lock
200004f0 l     O .data	00000004 malloc_unlock
00000000 l    df *ABS*	00000000 mynewt.c
0002f1e8 l     F .text	00000004 stdin_read
0002f1ec l     F .text	00000010 stdout_write
200004f4 l     O .data	00000004 _stdin
200004f8 l     O .data	00000008 _stdin_methods
00000000 l    df *ABS*	00000000 realloc.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strchr.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 strsep.c
00000000 l    df *ABS*	00000000 strtok_r.c
00000000 l    df *ABS*	00000000 strtoll.c
00000000 l    df *ABS*	00000000 strtoull.c
00000000 l    df *ABS*	00000000 tinyprintf.c
0002f31c l     F .text	000000c0 ui2a
0002f3dc l     F .text	00000020 i2a
0002f3fc l     F .text	00000030 a2d
0002f42c l     F .text	00000036 a2i
0002f462 l     F .text	0000002a putf
0002f48c l     F .text	0000011c putchw
0002f5a8 l     F .text	00000064 intarg
00000000 l    df *ABS*	00000000 vprintf.c
00000000 l    df *ABS*	00000000 memfile.c
00000000 l    df *ABS*	00000000 strntoumax.c
00000000 l    df *ABS*	00000000 strpbrk.c
00000000 l    df *ABS*	00000000 log_fcb.c
0002fab0 l     F .text	00000004 log_fcb_registered
0002fab4 l     F .text	0000000a log_fcb_flush
0002fabe l     F .text	000000a0 log_fcb_find_gte
0002fb5e l     F .text	00000068 log_fcb_walk_impl
0002fbc6 l     F .text	0000000a log_fcb_walk_area
0002fbd0 l     F .text	0000000a log_fcb_walk
0002fbda l     F .text	0000002c log_fcb_write_mbuf
0002fc06 l     F .text	0000002a log_fcb_hdr_body_bytes
0002fc30 l     F .text	0000002c log_fcb_read
0002fc5c l     F .text	00000056 log_fcb_copy_entry
0002ffba l     F .text	0000001c log_fcb_append
0002fcb2 l     F .text	00000040 log_fcb_copy
0002fcf4 l     F .text	000000ac log_fcb_rtr_erase
0002fda0 l     F .text	00000060 log_fcb_start_append
0002fe00 l     F .text	00000094 log_fcb_append_mbuf_body
0002fe94 l     F .text	0000006a log_fcb_append_mbuf
0002fefe l     F .text	000000bc log_fcb_append_body
0002ffd6 l     F .text	00000060 log_fcb_read_mbuf
00000000 l    df *ABS*	00000000 crc8.c
00032d24 l     O .text	00000010 crc8_small_table
00000000 l    df *ABS*	00000000 log_mgmt.c
0003006c l     F .text	0000000a cbor_cnt_writer
00030078 l     F .text	00000098 log_mgmt_logs_list
00030110 l     F .text	000000a0 log_mgmt_level_list
000301b0 l     F .text	000000a0 log_mgmt_module_list
00030250 l     F .text	00000090 log_mgmt_clear
000302e0 l     F .text	000000c8 log_encode_entries
00030784 l     F .text	00000090 log_mgmt_cb_encode
000303a8 l     F .text	00000094 log_encode
0003043c l     F .text	00000154 log_mgmt_show
00030590 l     F .text	000001f4 log_mgmt_encode_entry
20000500 l     O .data	0000000c log_mgmt_group
2000050c l     O .data	00000030 log_mgmt_handlers
00000000 l    df *ABS*	00000000 stat_mgmt.c
00030824 l     F .text	0000008c stat_mgmt_list
000308b0 l     F .text	000000b8 stat_mgmt_show
00030968 l     F .text	00000032 stat_mgmt_cb_encode
2000053c l     O .data	0000000c stat_mgmt_group
20000548 l     O .data	00000010 stat_mgmt_handlers
00000000 l    df *ABS*	00000000 uart_hal.c
000309ac l     F .text	00000022 uart_hal_blocking_tx
000309ce l     F .text	00000022 uart_hal_start_rx
000309f0 l     F .text	00000022 uart_hal_start_tx
00030a12 l     F .text	00000030 uart_hal_resume
00030a42 l     F .text	0000002e uart_hal_suspend
00030a70 l     F .text	00000016 uart_hal_close
00030a86 l     F .text	0000008a uart_hal_open
00000000 l    df *ABS*	00000000 hal_uart.c
00030b78 l     F .text	00000020 hal_uart_tx_fill_buf
00030b98 l     F .text	00000072 uart_irq_handler
00030c0c l     F .text	00000014 uart0_irq_handler
00030c20 l     F .text	00000014 uart1_irq_handler
00030c34 l     F .text	000000f0 hal_uart_baudrate
20003310 l     O .bss	0000001c uart0
2000332c l     O .bss	0000001c uart1
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 ble_ll_supp_cmd.c
00000000 l    df *ABS*	00000000 nordic_end-sysflash.c
00000000 l    df *ABS*	00000000 ble_hs_cfg.c
00000000 l    df *ABS*	00000000 SVC_Table.S
00000000 l       .svc_table	00000000 SVC_End
0002cd72 g     F .text	00000090 _cbor_value_decode_int64_internal
0000da04 g     F .text	00000058 os_mbuf_trim_front
20004170 g     O .bss	000000f0 ble_store_config_peer_secs
000188f2 g     F .text	00000054 ble_ll_conn_hci_rd_chan_map
0001eaa0 g     F .text	00000004 ble_att_clt_tx_read_group_type
000247b4 g     F .text	0000001c ble_hs_conn_find_by_idx
000125bc g     F .text	0000006c scfg_register
0001383c g     F .text	00000028 img_mgmt_module_init
0002e688 g     F .text	00000044 nrf52_clock_hfxo_request
00025244 g     F .text	000000a0 ble_hs_hci_evt_acl_process
000107c4 g     F .text	000000a8 uart_console_init
00015aa0 g     F .text	0000002c ble_ll_adv_rpa_timeout
0002c5a4 g     F .text	00000010 cbor_mbuf_writer_init
000134c8 g     F .text	000001a4 img_mgmt_impl_upload_inspect
0002554c g     F .text	00000048 ble_hs_id_infer_auto
20003c30 g     O .bss	00000001 g_ble_ll_sched_offset_ticks
0001eaa4 g     F .text	00000004 ble_att_clt_rx_read_group_type
00028f68 g     F .text	00000128 ble_sm_alg_f5
0000e63c g     F .text	00000030 os_arch_start
00010b5e g     F .text	00000024 flash_area_id_from_image_slot
200040b8 g     O .bss	00000038 ble_hs_stats
0000f958 g     F .text	00000014 conf_fcb_dst
20004410 g       .bss	00000000 __HeapBase
20003414 g     O .bss	00000008 g_os_task_list
0000cc2c g     F .text	00000084 os_idle_task
0001ea94 g     F .text	00000004 ble_att_clt_tx_read_blob
0002f290 g     F .text	00000010 strcpy
00017ca0 g     F .text	00000044 ble_ll_conn_set_global_chanmap
20003e80 g     O .bss	000000e4 ble_att_stats
20003424 g     O .bss	00000006 __rand48_seed
00000000 g       .svc_table	00000000 SVC_Count
0000c18e  w    F .text	00000002 TIMER2_IRQHandler
0002f94c g     F .text	00000018 fmemopen_w
0001334c g     F .text	0000009c img_mgmt_state_write
00012250 g     F .text	00000048 mem_split_frag
000275cc g     F .text	00000034 ble_sm_proc_can_advance
0000c188  w    F .text	00000002 DebugMon_Handler
0000c85c g     F .text	0000002c print_addr
0000d576 g     F .text	0000005a os_mbuf_copydata
200033f8 g     O .bss	00000008 g_os_mempool_list
0000cea0 g     F .text	0000001a os_callout_init
000270c0 g     F .text	00000018 ble_sm_num_procs
0000cebc g     F .text	0000003c os_callout_stop
0002163c g     F .text	0000004a ble_gap_notify_rx_event
0000c18e  w    F .text	00000002 RTC0_IRQHandler
0001cf58 g     F .text	00000078 ble_ll_sched_adv_resched_pdu
00015d1c g     F .text	00000040 ble_ll_adv_rx_isr_start
00013ebc g     F .text	00000028 stat_mgmt_module_init
0002a4e2 g     F .text	000000c0 boot_read_swap_state
0001e2b0 g     F .text	00000124 ble_phy_tx
0002996c g     F .text	00000074 ble_svc_gatt_init
000195c8 g     F .text	0000004e ble_ll_ctrl_proc_start
0002f100 g     F .text	00000050 add_malloc_block
20003c54 g     O .bss	00000040 g_ble_ll_whitelist
0002278a g     F .text	0000002c ble_gattc_rx_err
0001c558 g     F .text	00000014 ble_ll_scan_rx_pkt_in
00024978 g     F .text	00000002 ble_hs_flow_connection_broken
00013fdc g     F .text	00000028 mgmt_write_rsp_status
00018974 g     F .text	00000072 ble_ll_conn_hci_set_data_len
0001b11c g     F .text	0000002c ble_ll_resolv_set_local_rpa
00014b48 g     F .text	0000007c ble_ll_reset
0000d1ae g     F .text	00000070 os_eventq_put
000253d4 g     F .text	0000001c ble_hs_id_set_pub
00013a64 g     F .text	0000005c log_mgmt_impl_foreach_entry
0001ad78 g     F .text	0000012c ble_ll_resolv_list_add
20000100 g       .data	00000000 __data_start__
00028a58 g     F .text	0000001c ble_store_key_from_value_cccd
0000d880 g     F .text	00000062 os_mbuf_extend
0002f2e4 g     F .text	00000020 strtok_r
00032c9c g     O .text	00000018 nrf52k_flash_dev
000263c8 g     F .text	00000048 ble_l2cap_sig_timer
0002db88 g     F .text	00000046 fcb_append_finish
200040f0 g     O .bss	0000001c ble_hs_hci_ev_pool
0002bef4 g     F .text	0000005c regularize_k
0002c464 g     F .text	00000014 cbor_buf_writer_init
0002f88c g     F .text	00000024 printf
00032cec g     O .text	00000004 stdout
0000c18e  w    F .text	00000002 SWI0_EGU0_IRQHandler
00032cf8 g     O .text	0000002c log_fcb_handler
00028a9e g     F .text	00000074 ble_store_iterate
0002d782 g     F .text	00000024 fcb_free_sector_cnt
000112d0 g     F .text	0000000a log_flush
20004120 g     O .bss	0000001c ble_l2cap_chan_pool
00018aa2 g     F .text	0000004c ble_ll_conn_hci_le_ltk_neg_reply
0000e5ac g     F .text	0000008c os_arch_os_init
00011f38 g     F .text	00000044 log_reboot
0000c17e  w    F .text	00000002 HardFault_Handler
0001fc0a g     F .text	000000a8 ble_att_svr_rx_read_type
0002b7da g     F .text	00000020 uECC_vli_modMult_fast
0002ea04 g     F .text	00000068 hal_timer_init
0002bfca g     F .text	00000042 uECC_vli_bytesToNative
0002370c g     F .text	00000080 ble_gatts_bonding_established
000119d6 g     F .text	0000001a mfg_seek_next_with_type
0001fdea g     F .text	000000c2 ble_att_svr_rx_read_group_type
00022800 g     F .text	0000005c ble_gattc_init
0002eea6 g     F .text	00000008 os_cputime_timer_stop
0002c734 g     F .text	00000094 cbor_encode_int
0001e204 g     F .text	0000004c ble_phy_rx_set_start_time
0002a5f2 g     F .text	00000054 boot_write_swap_info
0000e66c g     F .text	0000005c os_arch_os_start
20003f64 g     O .bss	00000088 ble_gap_stats
20004084 g     O .bss	00000034 ble_gatts_stats
2000348c g     O .bss	00000001 g_console_ignore_non_nlip
20000248 g     O .data	00000020 id_conf
00020b2c g     F .text	00000010 ble_gap_master_in_progress
0002a190 g     F .text	0000002c ble_hci_trans_hs_cmd_tx
00024512 g     F .text	0000002a ble_hs_atomic_conn_delete
2000348d g     O .bss	00000001 g_console_silence_non_nlip
0000c96c g     F .text	00000090 gatt_svr_register_cb
0002ce22 g     F .text	00000048 cbor_value_advance_fixed
000201d8 g     F .text	00000048 ble_att_svr_init
0002df52 g     F .text	00000010 hal_flash_align
000111ec g     F .text	00000014 log_read
00013adc g     F .text	00000028 log_mgmt_module_init
0002390c g     F .text	00000040 ble_gatts_init
00014b14 g     F .text	0000000c ble_ll_state_get
000275ac g     F .text	00000020 ble_sm_ioact_state
0000c18e  w    F .text	00000002 SWI2_EGU2_IRQHandler
0002a4bc g     F .text	00000020 boot_magic_compatible_check
00013064 g     F .text	00000018 img_mgmt_my_version
0001c450 g     F .text	00000088 ble_ll_scan_rx_isr_end
00028a32 g     F .text	0000000e ble_store_read_cccd
000227b6 g     F .text	00000024 ble_gattc_rx_mtu
0000e90a g     F .text	0000000c SysTick_Handler
00026444 g     F .text	0000002e ble_l2cap_sig_tx
0001a856 g     F .text	00000044 ble_ll_hci_ev_conn_update
0000c18e  w    F .text	00000002 GPIOTE_IRQHandler
0001fb28 g     F .text	0000006a ble_att_svr_rx_find_info
0001aa94 g     F .text	0000007c ble_ll_rand_data_get
00028958 g     F .text	00000040 ble_store_write
0001fdae g     F .text	0000003c ble_att_svr_rx_read_mult
00026370 g     F .text	00000020 ble_l2cap_sig_create_chan
0001d58c g     F .text	00000048 ble_hw_rng_init
00014930 g     F .text	00000028 ble_ll_rx_pdu_in
00012ba6 g     F .text	0000000c cbor_read_object
0002c580 g     F .text	00000022 cbor_mbuf_writer
0000dc5c g     F .text	00000026 os_memblock_put
0000c18e  w    F .text	00000002 PWM1_IRQHandler
0000f12c g     F .text	0000000c conf_dst_register
0000dda2 g     F .text	00000028 os_msys_get_pkthdr
200034a8 g     O .bss	00000004 flash_map
0000e9ba g     F .text	00000036 memmove
0001afd4 g     F .text	00000054 ble_ll_resolv_set_rpa_tmo
0001ea90 g     F .text	00000004 ble_att_clt_rx_read
0002e114 g     F .text	00000030 hal_flash_is_erased
00023a80 g     F .text	00000008 ble_hs_lock
0001afa0 g     F .text	00000034 ble_ll_resolv_local_addr_rd
0002b466 g     F .text	00000042 uECC_vli_sub
00028940 g     F .text	00000018 ble_store_overflow_event
0000e8e0 g     F .text	0000002a PendSV_Handler
0002f8ea g     F .text	0000001c snprintf
0000db98 g     F .text	00000036 os_mempool_clear
00025dca g     F .text	00000014 ble_l2cap_remove_rx
0000c17c  w    F .text	00000002 NMI_Handler
000233b4 g     F .text	0000005c ble_gatts_connection_broken
00032e10 g       .ARM.exidx	00000000 __exidx_end
0001d62c g     F .text	0000000c ble_hw_resolv_list_clear
0000c9fc g     F .text	00000020 gatt_svr_init
0000c020 g       .text	00000000 __isr_vector_start
0001c444 g     F .text	0000000a ble_ll_scan_interrupted
0002a040 g     F .text	0000001c ble_store_config_persist_peer_secs
000187e0 g     F .text	000000a0 ble_ll_conn_hci_disconnect_cmd
00010fb0 g     F .text	00000048 log_init
0002f91c g     F .text	0000002e memfile_write
0000e520 g     F .text	00000014 os_arch_ctx_sw
0001c6d0 g     F .text	00000008 ble_ll_scan_get_pdu_data
0002c7c8 g     F .text	0000005e cbor_encode_simple_value
000121dc g     F .text	00000026 stats_init_and_reg
00030b10 g     F .text	00000068 uart_hal_init
0000c1f8 g     F .text	0000002c hal_system_reset
0002eede g     F .text	00000042 os_error_to_sys
0001b1f0 g     F .text	00000034 ble_ll_resolv_init
0000ccdc g     F .text	00000088 os_init_idle_task
0002c400 g     F .text	00000038 cbor_buf_reader_init
00027bf6 g     F .text	00000038 ble_sm_timer
20000194 g       .data	00000000 __aeabi_unwind_cpp_pr0
0000df94 g     F .text	0000000c os_sched_set_current_task
0000c18e  w    F .text	00000002 POWER_CLOCK_IRQHandler
00025d60 g     F .text	0000002c ble_l2cap_parse_hdr
00016fd8 g     F .text	00000074 ble_ll_conn_update_eff_data_len
00032e10 g       .ARM.exidx	00000000 __etext
00020b64 g     F .text	0000002a ble_gap_rx_l2cap_update_req
00031dc8 g     O .text	0000001f g_ble_ll_ctrl_pkt_lengths
00014864 g     F .text	00000054 ble_ll_set_random_addr
00025874 g     F .text	0000003e ble_hs_pvcy_set_mode
00022780 g     F .text	0000000a ble_gattc_indicate
0000e4a0 g     F .text	0000004e os_get_uptime_usec
00016e2a g     F .text	00000002 ble_ll_conn_init_wfr_timer_exp
0001053c g     F .text	0000003c console_vprintf
00023d8c g     F .text	00000260 ble_hs_init
0001d6a8 g     F .text	00000004 ble_hw_resolv_list_size
000213e4 g     F .text	0000011c ble_gap_update_params
000183a4 g     F .text	0000002a ble_ll_auth_pyld_tmo_event_send
0000dd84 g     F .text	0000001e os_msys_get
0000c18e  w    F .text	00000002 RADIO_IRQHandler
00028678 g     F .text	00000110 ble_sm_sc_public_key_rx
0002462c g     F .text	00000054 ble_hs_conn_free
00010aca g     F .text	00000026 flash_area_write
00015b1c g     F .text	00000108 ble_ll_adv_set_adv_params
0000d8e2 g     F .text	0000010a os_mbuf_pullup
000225c8 g     F .text	00000068 ble_gattc_timer
00018404 g     F .text	00000150 ble_ll_conn_create
20003498 g     O .bss	00000010 rx_ev
200035c0 g     O .bss	0000010c ble_ll_stats
000139de g     F .text	00000016 log_mgmt_impl_get_module
0000e6e0 g     F .text	000000c0 os_mutex_release
00012068 g     F .text	0000000a stats_size
00013f8a g     F .text	0000000e mgmt_streamer_init_writer
000121b4 g     F .text	00000028 stats_register
00025652 g     F .text	00000024 ble_hs_mbuf_pullup_base
000227da g     F .text	0000001a ble_gattc_rx_indicate_rsp
0000de4c g     F .text	00000024 os_sanity_check_register
20003c34 g     O .bss	00000018 g_ble_ll_sched_timer
20000558 g       .bssnz	00000000 __bssnz_start__
20003480 g     O .bss	00000004 conf_load_srcs
0002d7e6 g     F .text	0000001e fcb_get_len
00015df8 g     F .text	00000030 ble_ll_adv_reset
0000e404 g     F .text	00000026 os_time_delay
00021686 g     F .text	00000044 ble_gap_notify_tx_event
0002a6e0 g     F .text	0000000a boot_swap_type
0002c164 g     F .text	000000bc uECC_shared_secret
20003cdc g     O .bss	00000034 g_ble_phy_data
0002a340 g     F .text	00000004 ble_hci_trans_reset
0000d7b4 g     F .text	00000088 os_mbuf_copyinto
000247d0 g     F .text	0000000e ble_hs_conn_exists
0001957c g     F .text	0000004c ble_ll_ctrl_terminate_start
0000c18e  w    F .text	00000002 PDM_IRQHandler
00020d34 g     F .text	0000002a ble_gap_adv_set_fields
000119f0 g     F .text	0000000a mfg_read_tlv_flash_area
00010594 g     F .text	0000000c console_get_ticks
00027ac6 g     F .text	00000010 ble_sm_our_pair_rand
0001dd94 g     F .text	0000004e ble_phy_txpower_round
20003430 g     O .bss	00000034 g_smp_ble_transport
00015e28 g     F .text	00000020 ble_ll_adv_enabled
0002ce02 g     F .text	00000020 cbor_parser_init
00024d34 g     F .text	0000000c ble_hs_hci_set_hci_version
0000d6ee g     F .text	000000c6 os_mbuf_prepend
00014958 g     F .text	00000034 ble_ll_acl_data_in
200002c8 g     O .data	00000028 ble_hs_cfg
0001ff58 g     F .text	00000016 ble_att_svr_prep_clear
00028c44 g     F .text	00000026 ble_store_util_status_rr
0001d554 g     F .text	00000038 ble_hw_encrypt_block
000279d8 g     F .text	000000ee ble_sm_ltk_req_rx
20003ae0 g     O .bss	000000d8 g_ble_ll_resolv_list
00028ef8 g     F .text	0000006e ble_sm_alg_f4
0000dc84 g     F .text	00000010 os_mempool_module_init
0000ed74 g     F .text	0000000c mgmt_evq_set
0001478e g     F .text	0000001c ble_ll_addr_subtype
0000c18e  w    F .text	00000002 TEMP_IRQHandler
0000e546 g     F .text	0000000a os_arch_in_critical
00028da4 g     F .text	0000000e ble_uuid_u16
0000c18e  w    F .text	00000002 QDEC_IRQHandler
00016e2c g     F .text	00000028 ble_ll_conn_auth_pyld_timer_start
0000c18e  w    F .text	00000002 TIMER3_IRQHandler
00024758 g     F .text	0000005c ble_hs_conn_find_by_addr
00014070 g     F .text	00000010 mgmt_evt
0001d608 g     F .text	00000024 ble_hw_rng_stop
000147c0 g     F .text	0000007c ble_ll_is_valid_random_addr
000177d4 g     F .text	00000184 ble_ll_conn_rx_data_pdu
000292d4 g     F .text	00000054 ble_sm_alg_gen_key_pair
00016e6e g     F .text	00000064 ble_ll_conn_master_init
0000e516 g     F .text	0000000a timer_handler
00013e70 g     F .text	00000024 stat_mgmt_impl_get_group
0000d120 g     F .text	00000020 os_dev_lookup
0000dfa0 g     F .text	00000090 os_sched_sleep
000173f8 g     F .text	00000028 ble_ll_init_rx_isr_start
00013f56 g     F .text	00000010 mgmt_streamer_reset_buf
0000e9a0 g     F .text	0000001a memcpy
00023a04 g     F .text	0000000c ble_hs_evq_get
0001d3dc g     F .text	0000003c ble_hw_get_static_addr
0001c730 g     F .text	0000004c ble_ll_scan_init
00014004 g     F .text	00000010 mgmt_err_from_cbor
00024750 g     F .text	00000008 ble_hs_conn_find_assert
0000c18e  w    F .text	00000002 PWM3_IRQHandler
00015db0 g     F .text	0000002e ble_ll_adv_get_local_rpa
0000f3bc g     F .text	00000034 conf_parse_name
0002b960 g     F .text	00000062 x_side_default
0001b028 g     F .text	00000038 ble_ll_resolve_set_priv_mode
0002e5e4 g     F .text	00000080 hal_watchdog_init
0001ad24 g     F .text	00000014 ble_ll_resolv_list_read_size
00013146 g     F .text	0000004a img_mgmt_state_set_pending
0001af3c g     F .text	00000030 ble_ll_resolv_enable_cmd
0002a7d0 g     F .text	000000bc tc_aes128_set_encrypt_key
0000f138 g     F .text	00000054 conf_load
0001da28 g     F .text	00000084 ble_phy_wfr_enable
000137d6 g     F .text	0000002e img_mgmt_impl_erase_image_data
00023340 g     F .text	00000074 ble_gatts_register_svcs
00018730 g     F .text	00000066 ble_ll_conn_hci_param_nrr
0001c6b4 g     F .text	00000008 ble_ll_scan_get_local_rpa
0002ee56 g     F .text	0000000c os_cputime_init
20003488 g     O .bss	00000004 conf_handlers
0002ec14 g     F .text	00000028 hal_timer_set_cb
00020020 g     F .text	000000b4 ble_att_svr_rx_exec_write
00020fec g     F .text	0000005c ble_gap_terminate_with_conn
000253f0 g     F .text	00000078 ble_hs_id_set_rnd
00019616 g     F .text	00000030 ble_ll_ctrl_initiate_dle
00031014 g     F .text	00000000 .hidden __aeabi_uldivmod
0001eafc g     F .text	00000040 ble_att_clt_tx_indicate
0002e144 g     F .text	00000062 hal_flash_isempty
0000ca8c g     F .text	00000048 split_app_init
00000020 g       *ABS*	00000000 _imghdr_size
0000df58 g     F .text	00000030 os_sched_ctx_sw_hook
0002dc8c g     F .text	00000058 fcb_elem_info
20003490 g     O .bss	00000004 console_is_midline
0000d40c g     F .text	00000014 os_mbuf_free
0000c18e  w    F .text	00000002 FPU_IRQHandler
00021738 g     F .text	00000038 ble_gap_mtu_event
0000c18e  w    F .text	00000002 USBD_IRQHandler
0001eb46 g     F .text	00000026 ble_att_cmd_prepare
2000010c g     O .data	00000004 SystemCoreClock
0001e250 g     F .text	00000024 ble_phy_restart_rx
0000c1dc g     F .text	0000000c hal_system_init
00027f00 g     F .text	0000002c ble_sm_tx
00025d30 g     F .text	00000028 ble_l2cap_chan_free
0002c826 g     F .text	00000010 cbor_encode_byte_string
20003be0 g     O .bss	00000050 g_ble_ll_scan_rsp_advs
0000c18e  w    F .text	00000002 SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler
000215ea g     F .text	00000026 ble_gap_identity_event
0000e550 g     F .text	00000044 os_arch_task_stack_init
00028db2 g     F .text	0000003e ble_uuid_init_from_att_buf
000183ce g     F .text	00000034 ble_ll_disconn_comp_event_send
0002f150 g     F .text	0000006c malloc
0001f8e4 g     F .text	00000034 ble_att_svr_read_handle
00010aa4 g     F .text	00000026 flash_area_read
00013868 g     F .text	00000014 img_mgmt_impl_log_upload_start
0000f610 g     F .text	0000002c conf_str_from_bytes
0002497a g     F .text	00000002 ble_hs_flow_fill_acl_usrhdr
0000cb50 g     F .text	00000044 __assert_func
0001ad38 g     F .text	00000040 ble_ll_resolv_list_find
00023620 g     F .text	000000c4 ble_gatts_rx_indicate_ack
0000eaec g     F .text	00000018 imgr_my_version
0001e71c g     F .text	000001f8 ble_att_inc_tx_stat
0001376e g     F .text	00000036 img_mgmt_impl_read
0002b37c g     F .text	00000034 uECC_vli_cmp_unsafe
0000e0f4 g     F .text	00000048 os_sched_wakeup_ticks
000104dc g     F .text	00000060 console_pkg_init
0000eba8 g     F .text	0000002c imgmgr_module_init
000172f4 g     F .text	00000104 ble_ll_init_rx_pkt_in
0000c184  w    F .text	00000002 UsageFault_Handler
00016a2c g     F .text	0000002c ble_ll_conn_sm_get
0002f8b0 g     F .text	0000003a vsnprintf
0002f304 g     F .text	0000000c strtoll
200033f0 g     O .bss	00000008 g_callout_list
00025940 g     F .text	00000038 ble_hs_pvcy_add_entry
00028df0 g     F .text	0000002c ble_uuid_init_from_att_mbuf
0001c628 g     F .text	00000020 ble_ll_scan_can_chg_whitelist
00024d28 g     F .text	0000000c ble_hs_hci_set_le_supported_feat
0001d5d4 g     F .text	00000034 ble_hw_rng_start
000236e4 g     F .text	00000028 ble_gatts_tx_notifications
0001c2e4 g     F .text	00000074 ble_ll_scan_rx_isr_start
00014748 g     F .text	00000016 ble_ll_chk_txrx_time
20003860 g     O .bss	00000016 g_ble_ll_conn_params
0000c18e  w    F .text	00000002 UARTE0_UART0_IRQHandler
00013d44 g     F .text	00000008 os_mgmt_module_init
0002f60c g     F .text	0000025c tfp_format
000131b4 g     F .text	00000198 img_mgmt_state_read
2003fe50 g       *ABS*	00000000 __HeapLimit
20000580 g       .bss	00000000 __bss_start__
00023a88 g     F .text	00000008 ble_hs_unlock
0000c1e8 g     F .text	00000010 hal_debugger_connected
0002c0cc g     F .text	00000098 uECC_make_key
00028e74 g     F .text	00000006 ble_uuid_length
0001eab4 g     F .text	00000004 ble_att_clt_tx_exec_write
0001ea78 g     F .text	00000004 ble_att_clt_rx_find_info
0002dfc8 g     F .text	00000074 hal_flash_write
0000c18e  w    F .text	00000002 TIMER4_IRQHandler
000226c8 g     F .text	000000b8 ble_gattc_indicate_custom
0001d3ac g     F .text	00000030 ble_hw_get_public_addr
000216ca g     F .text	0000006e ble_gap_subscribe_event
0001c358 g     F .text	00000056 ble_ll_scan_adv_decode_addr
0003106c g     F .text	000002cc .hidden __udivmoddi4
0002b2ec g     F .text	0000002a uECC_vli_isZero
0001a6a8 g     F .text	0000007c ble_ll_hci_is_event_enabled
0001dcfc g     F .text	00000050 ble_phy_encrypt_enable
0002d004 g     F .text	0000003c _cbor_value_copy_string
0002a05c g     F .text	0000003c ble_store_config_persist_cccds
0001dd88 g     F .text	0000000c ble_phy_set_txend_cb
0001d638 g     F .text	00000038 ble_hw_resolv_list_add
000252e4 g     F .text	0000000e ble_hs_hci_util_handle_pb_bc_join
0001ab10 g     F .text	0000002c ble_ll_rand_prand_get
0001e3ec g     F .text	00000010 ble_phy_xcvr_state_get
000247ec g     F .text	000000d4 ble_hs_conn_addrs
2000340c g     O .bss	00000004 g_current_task
0000de70 g     F .text	00000084 os_sanity_run
0001de00 g     F .text	0000000c ble_phy_set_rx_pwr_compensation
00017728 g     F .text	0000003c ble_ll_conn_timeout
200037d8 g     O .bss	00000004 g_ble_ll_cur_adv_sm
0002c87e g     F .text	0000002a cbor_encoder_close_container
0000e534 g     F .text	0000000c os_arch_save_sr
0002570c g     F .text	00000010 ble_hs_misc_peer_addr_type_to_id
0002378c g     F .text	000000e6 ble_gatts_bonding_restored
0001acfc g     F .text	00000028 ble_ll_resolv_list_clr
00030fcc g     F .text	00000048 hal_uart_close
0002a5c4 g     F .text	00000020 boot_write_magic
0000db84 g     F .text	00000014 os_mempool_init
0000f07c g     F .text	0000002c config_pkg_init
00013102 g     F .text	00000026 img_mgmt_state_any_pending
0000e42c g     F .text	00000038 os_gettimeofday
2000341c g     O .bss	00000001 g_task_id
0000f3f0 g     F .text	00000016 conf_parse_and_lookup
00018946 g     F .text	0000002e ble_ll_conn_hci_set_chan_class
2000410c g     O .bss	00000001 ble_hs_sync_state
00012c7c g     F .text	00000118 img_mgmt_read_info
20000290 g     O .data	00000008 g_stats_registry
00020bd0 g     F .text	00000118 ble_gap_adv_start
0001eabc g     F .text	00000040 ble_att_clt_tx_notify
0002859c g     F .text	000000dc ble_sm_sc_public_key_exec
0000f39c g     F .text	00000020 conf_handler_lookup
00014bcc g     F .text	00000070 ble_ll_pdu_max_tx_octets_get
00013f66 g     F .text	00000016 mgmt_streamer_write_at
00024d18 g     F .text	00000010 ble_hs_hci_acl_tx
20003ab4 g     O .bss	0000000c g_ble_ll_rnum_data
00013d34 g     F .text	00000010 os_mgmt_register_group
0001fcb2 g     F .text	0000007c ble_att_svr_rx_read
0002ed78 g     F .text	00000016 get_le32
00030e0c g     F .text	00000064 hal_uart_blocking_tx
00017420 g     F .text	00000308 ble_ll_init_rx_isr_end
00019350 g     F .text	0000001e ble_ll_ctrl_is_start_enc_rsp
00032df8 g       .text	00000000 __exidx_start
0002f964 g     F .text	0000011a strntoumax
00020f78 g     F .text	00000014 ble_gap_disc_active
0000def4 g     F .text	00000010 os_sanity_init
20003878 g     O .bss	00000004 g_ble_ll_conn_cur_sm
0003193c g     O .text	0000001c g_smp_cbor_cfg
0000d458 g     F .text	000000a8 os_mbuf_append
000119fa g     F .text	0000000a mfg_read_tlv_mmr_ref
0002ee04 g     F .text	00000016 get_be32
0001ea8c g     F .text	00000004 ble_att_clt_tx_read
0000e880 g     F .text	00000014 os_set_env
0001eab0 g     F .text	00000004 ble_att_clt_rx_prep_write
0002def0 g     F .text	00000010 hal_bsp_flash_dev
0002e7c8 g     F .text	0000000c nrf52_periph_create
00025868 g     F .text	0000000c ble_hs_pvcy_our_irk
00032cf0 g     O .text	00000008 MemFile_methods
0002b3d8 g     F .text	00000010 cond_set
20003400 g     O .bss	0000000c g_os_sanity_check_mu
00023a90 g     F .text	0000001c ble_hs_process_rx_data_queue
20004118 g     O .bss	00000006 ble_hs_misc_null_addr
00010b16 g     F .text	0000000a flash_area_align
20003c4c g     O .bss	00000008 g_ble_ll_sched_q
0000c18e  w    F .text	00000002 CRYPTOCELL_IRQHandler
0000e2a0 g     F .text	00000060 os_task_info_get
0000c1a0 g     F .text	0000003c _sbrk
0001dd4c g     F .text	00000010 ble_phy_encrypt_set_pkt_cntr
00028a4c g     F .text	0000000c ble_store_delete_cccd
0002d0f0 g     F .text	00000014 cbor_value_calculate_string_length
0002e454 g     F .text	000000b0 os_tick_idle
0001704c g     F .text	00000114 ble_ll_conn_end
00010578 g     F .text	0000001c console_printf
0002580e g     F .text	00000032 ble_hs_pvcy_remove_entry
0001d1e4 g     F .text	00000038 ble_ll_utils_calc_window_widening
00010350 g     F .text	00000008 console_blocking_mode
0000f18c g     F .text	00000018 conf_ensure_loaded
0002ce6a g     F .text	0000014a cbor_value_enter_container
0000c18e  w    F .text	00000002 I2S_IRQHandler
00020d5e g     F .text	0000000a ble_gap_adv_active
0000c470 g     F .text	00000002 _init
00015c6a g     F .text	00000020 ble_ll_hci_set_adv_data
0001eb8c g     F .text	0000004a ble_att_tx
000238bc g     F .text	00000050 ble_gatts_count_cfg
0002e03c g     F .text	000000d8 hal_flash_erase
0001d418 g     F .text	00000018 ble_hw_whitelist_clear
0002a4dc g     F .text	00000006 boot_swap_info_off
00015c30 g     F .text	0000001a ble_ll_hci_adv_set_enable
000254fa g     F .text	00000032 ble_hs_id_copy_addr
00015cd8 g     F .text	00000044 ble_ll_adv_rx_pkt_in
0002dce4 g     F .text	0000004e fcb_getnext_in_area
0000c18e  w    F .text	00000002 SWI4_EGU4_IRQHandler
000226b0 g     F .text	0000000a ble_gattc_notify
000125a0 g     F .text	0000001a scfg_save_val
00021870 g     F .text	00000038 ble_gap_event_listener_unregister
00025e2a g     F .text	000000b8 ble_l2cap_rx
0000ed80 g     F .text	00000026 smp_rx_req
0002e504 g     F .text	000000a8 os_tick_init
0001d9a0 g     F .text	00000088 ble_phy_rxpdu_copy
00021610 g     F .text	0000002c ble_gap_repeat_pairing_event
0001cc18 g     F .text	00000100 ble_ll_sched_slave_new
0002da06 g     F .text	0000001e fcb_clear
00029bbe g     F .text	00000040 ble_store_config_read
00025606 g     F .text	0000000a ble_hs_mbuf_acl_pkt
0002dbce g     F .text	000000be fcb_elem_crc8
0001eab8 g     F .text	00000004 ble_att_clt_rx_exec_write
00012e30 g     F .text	00000014 img_mgmt_dfu_pending
00011420 g     F .text	00000008 log_console_get
0002a240 g     F .text	0000005c ble_hci_trans_buf_alloc
00027134 g     F .text	0000000a ble_sm_gen_pair_rand
0000c18e  w    F .text	00000002 TIMER0_IRQHandler
0000cd64 g     F .text	000000d0 os_init
0002a648 g     F .text	00000098 boot_swap_type_multi
00023410 g     F .text	00000148 ble_gatts_start
0000c120 g     F .text	0000005c Reset_Handler
0001c6ac g     F .text	00000008 ble_ll_scan_get_peer_rpa
00024b70 g     F .text	00000020 ble_hs_hci_set_buf_sz
0002d7c0 g     F .text	00000026 fcb_put_len
0000c18e  w    F .text	00000002 UARTE1_IRQHandler
0002eec8 g     F .text	00000016 os_cputime_ticks_to_usecs
000116a4 g     F .text	0000003c modlog_append
0000ef48 g     F .text	0000004c smp_ble_pkg_init
20004116 g     O .bss	00000002 ble_hs_hci_avail_pkts
00010150 g     F .text	0000000c console_echo
00017958 g     F .text	00000258 ble_ll_conn_rx_isr_end
0002c220 g     F .text	00000018 _copy
00027cb4 g     F .text	000000a6 ble_sm_enc_initiate
20003584 g     O .bss	00000001 sysinit_active
0001d534 g     F .text	00000014 ble_hw_whitelist_disable
0001cd18 g     F .text	000000cc ble_ll_sched_adv_new
0001d548 g     F .text	0000000c ble_hw_whitelist_match
00018880 g     F .text	00000042 ble_ll_conn_hci_rd_rem_ver_cmd
20003494 g     O .bss	00000001 g_console_silence
000235c8 g     F .text	00000056 ble_gatts_send_next_indicate
0000cad4 g     F .text	0000000c split_app_active_get
0002ed2c g     F .text	00000008 put_le16
0002154c g     F .text	00000028 ble_gap_unpair_oldest_peer
2000410e g     O .bss	00000002 ble_hs_max_services
00019330 g     F .text	00000020 ble_ll_ctrl_enc_allowed_pdu_tx
0000d39a g     F .text	0000000a os_mbuf_pool_init
0001f764 g     F .text	00000034 ble_att_svr_find_by_uuid
0002c846 g     F .text	0000000a cbor_encoder_create_array
0000e916 g     F .text	0000001e os_default_irq_asm
0002b682 g     F .text	00000022 uECC_vli_modSub
0000e13c g     F .text	0000000c os_sched_next_task
000210c8 g     F .text	00000094 ble_gap_conn_broken
0002bada g     F .text	00000132 uECC_vli_modInv
0000df04 g     F .text	00000054 os_sched_insert
0000cef8 g     F .text	00000080 os_callout_reset
00011a10 g     F .text	00000040 mfg_init
0001e958 g     F .text	0000002c ble_att_mtu
0002e6cc g     F .text	00000044 nrf52_clock_hfxo_release
0000d184 g     F .text	00000010 os_dev_reset
0001e9e8 g     F .text	00000028 ble_att_clt_rx_error
00026390 g     F .text	00000038 ble_l2cap_sig_conn_broken
0001c114 g     F .text	0000001c ble_ll_scan_halt
0002b35e g     F .text	0000001e uECC_vli_set
0001caa8 g     F .text	00000170 ble_ll_sched_master_new
000248c0 g     F .text	00000084 ble_hs_conn_timer
0002f870 g     F .text	0000001c fprintf
000256fc g     F .text	00000010 ble_hs_misc_own_addr_type_to_id
00023cd8 g     F .text	0000000c ble_hs_hw_error
00025208 g     F .text	0000003c ble_hs_hci_evt_process
0000e6cc g     F .text	00000014 os_mutex_init
0001366c g     F .text	00000046 img_mgmt_impl_erase_slot
0000c190 g     F .text	00000010 _sbrkInit
0001b494 g     F .text	00000034 ble_ll_rfmgmt_enable_now
00023578 g     F .text	00000050 ble_gatts_conn_init
00013f34 g     F .text	00000010 mgmt_streamer_alloc_rsp
0000d21e g     F .text	0000001a os_eventq_get_no_wait
0001eb6c g     F .text	00000020 ble_att_cmd_get
2000057c g       .bssnz	00000000 __bssnz_end__
000148b8 g     F .text	00000028 ble_ll_is_our_devaddr
00010b84 g     F .text	00000088 flash_map_init
0001d2ac g     F .text	00000010 ble_ll_whitelist_match
000296f8 g     F .text	0000000c ble_svc_dis_firmware_revision_set
0002f908 g     F .text	00000014 vprintf
00031044 g     F .text	00000028 .hidden __popcountsi2
0000ccd0 g     F .text	0000000c os_started
0000c18e  w    F .text	00000002 TIMER1_IRQHandler
20000000 g       .bss	00000000 _ram_start
00028cbc g     F .text	0000003c ble_uuid_cmp
20000270 g     O .data	00000020 reboot_conf_handler
2000342c g     O .bss	00000004 g_smp_evq
0000f370 g     F .text	00000010 conf_unlock
000279c8 g     F .text	00000010 ble_sm_enc_key_refresh_rx
00024d4c g     F .text	00000048 ble_hs_hci_init
0000e0b8 g     F .text	0000003c os_sched_os_timer_exp
20000000 g       .vector_relocation	00000000 __vector_tbl_reloc__
0001a724 g     F .text	0000003c ble_ll_hci_cmd_rx
00023a38 g     F .text	00000024 ble_hs_is_parent_task
0001307c g     F .text	00000010 img_mgmt_register_group
00012194 g     F .text	00000020 stats_group_find
0001a9ec g     F .text	00000030 ble_ll_hci_ev_hw_err
0001d2a0 g     F .text	0000000c ble_ll_whitelist_read_size
00031a60 g     O .text	0000002c log_console_handler
0001af6c g     F .text	00000034 ble_ll_resolv_peer_addr_rd
000123e2 g     F .text	0000001e rwlock_release_write
0000c18e  w    F .text	00000002 SPIM3_IRQHandler
0001255c g     F .text	00000044 scfg_save_setting
00012dca g     F .text	0000003c img_mgmt_find_by_hash
0002d0c4 g     F .text	0000002c cbor_value_advance
0000d522 g     F .text	00000054 os_mbuf_appendfrom
0002c870 g     F .text	0000000e cbor_encoder_create_indef_byte_string
00010ff8 g     F .text	00000010 log_list_get_next
0000c18e  w    F .text	00000002 PWM2_IRQHandler
00023cb8 g     F .text	00000020 ble_hs_sched_reset
000196b6 g     F .text	00000036 ble_ll_ctrl_proc_stop
0000ebd4 g     F .text	0000003c imgr_ver_str
00011a04 g     F .text	0000000a mfg_read_tlv_hash
0001fb92 g     F .text	00000078 ble_att_svr_rx_find_type_value
0001b17c g     F .text	00000068 ble_ll_resolv_rpa
200036cc g     O .bss	00000006 g_random_addr
20000558 g       .data	00000000 __data_end__
0002c438 g     F .text	0000002c cbor_buf_writer
000110f8 g     F .text	000000d0 log_register
0002539c g     F .text	00000038 ble_hs_hci_util_data_hdr_strip
0002dd32 g     F .text	0000001a fcb_getnext_area
0000f63c g     F .text	00000028 conf_export_cb
00012368 g     F .text	00000026 rwlock_release_read
00022630 g     F .text	00000080 ble_gattc_notify_custom
0000c18e  w    F .text	00000002 ECB_IRQHandler
00028e1c g     F .text	00000058 ble_uuid_flat
0001d068 g     F .text	00000010 ble_ll_sched_stop
0000edec g     F .text	00000014 smp_ble_get_mtu
00018124 g     F .text	00000160 ble_ll_conn_comp_event_send
20004260 g     O .bss	00000004 ble_store_config_num_peer_secs
0002b654 g     F .text	0000002e uECC_vli_modAdd
00027eac g     F .text	00000020 ble_sm_create_chan
00027e6c g     F .text	00000040 ble_sm_init
0001e400 g     F .text	00000020 ble_phy_resolv_list_enable
000289a0 g     F .text	0000001a ble_store_full_event
0001a76c g     F .text	00000058 ble_ll_hci_init
0001fa94 g     F .text	00000094 ble_att_svr_rx_mtu
0001498c g     F .text	00000058 ble_ll_rx_start
0001f6a8 g     F .text	0000000c ble_att_svr_prev_handle
0001e274 g     F .text	0000003c ble_phy_tx_set_start_time
000288ec g     F .text	0000002c ble_store_read
20003420 g     O .bss	00000004 g_os_time
0001e914 g     F .text	0000000a ble_att_set_peer_mtu
00030d24 g     F .text	0000003c hal_uart_init_cbs
0001e984 g     F .text	00000028 ble_att_create_chan
0001b3cc g     F .text	00000038 ble_ll_rfmgmt_reset
0002e674 g     F .text	00000014 hal_watchdog_tickle
00013f44 g     F .text	00000012 mgmt_streamer_trim_front
2000440c g       .bss	00000000 __bss_end__
00016e0c g     F .text	0000001c ble_ll_conn_wfr_timer_exp
0002833c g     F .text	000000a6 ble_sm_sc_random_exec
0000d3a4 g     F .text	00000032 os_mbuf_get
0000c18e  w    F .text	00000002 SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler
0002571c g     F .text	00000014 ble_hs_misc_restore_irks
00028bc8 g     F .text	00000066 ble_store_util_delete_peer
0002afe6 g     F .text	0000005a tc_cmac_setup
0001d518 g     F .text	0000001c ble_hw_whitelist_enable
20000240 g     O .data	00000004 id_app_str
00020b3e g     F .text	00000026 ble_gap_rx_rd_rem_sup_feat_complete
0002d804 g     F .text	00000038 fcb_sector_hdr_init
0001e93e g     F .text	0000001a ble_att_truncate_to_mtu
00027b7a g     F .text	00000010 ble_sm_peer_pair_rand
0002d7a6 g     F .text	0000001a fcb_is_empty
00014c3c g     F .text	00000184 ble_ll_init
000245ca g     F .text	00000034 ble_hs_conn_chan_insert
00011048 g     F .text	00000010 log_hdr_len
20004110 g     O .bss	00000002 ble_hs_max_attrs
20004264 g     O .bss	00000080 ble_store_config_cccds
0001d670 g     F .text	00000038 ble_hw_resolv_list_rmv
0000dd74 g     F .text	00000010 os_msys_reset
0000c18e g     F .text	00000002 Default_Handler
0000c45c g     F .text	00000014 _start
00030814 g     F .text	00000010 log_mgmt_register_group
00020180 g     F .text	00000058 ble_att_svr_start
0001d498 g     F .text	00000080 ble_hw_whitelist_rmv
00015c4a g     F .text	00000020 ble_ll_hci_set_scan_rsp_data
00014776 g     F .text	00000018 ble_ll_addr_is_id
000112da g     F .text	0000000c log_fill_current_img_hash
00013d86 g     F .text	0000004a os_mgmt_impl_task_info
20000244 g     O .data	00000004 id_bsp_str
00029610 g     F .text	00000084 ble_svc_ans_init
20003574 g     O .bss	00000010 g_stats_stats
00013190 g     F .text	00000024 img_mgmt_state_confirm
2000387c g     O .bss	00000004 g_ble_ll_conn_comp_ev
0002c2c0 g     F .text	0000008c base64_encode
0000e894 g     F .text	00000006 os_arch_init_task_stack
200042e4 g     O .bss	00000004 ble_store_config_num_our_secs
000193b0 g     F .text	0000001c ble_ll_ctrl_conn_param_reply
0000d2ba g     F .text	00000022 os_eventq_run
00018684 g     F .text	000000ac ble_ll_conn_hci_param_rr
00013e94 g     F .text	00000028 stat_mgmt_impl_foreach_entry
0002eeb8 g     F .text	00000010 os_cputime_usecs_to_ticks
0002ee1a g     F .text	00000020 swap_in_place
0000f35c g     F .text	00000014 conf_lock
0000dbce g     F .text	0000003e os_memblock_from
00032964 g     O .text	00000010 boot_img_magic
200036d4 g     O .bss	00000006 g_dev_addr
0001d154 g     F .text	00000052 ble_ll_utils_remapped_channel
0000caf8 g     F .text	00000024 split_write_split
00014044 g     F .text	00000016 mgmt_ntoh_hdr
00010268 g     F .text	00000034 console_lock
00014b20 g     F .text	00000010 ble_ll_event_send
0001c648 g     F .text	00000058 ble_ll_scan_initiator_start
00012074 g     F .text	00000068 stats_walk
20003484 g     O .bss	00000004 conf_save_dst
00027c2e g     F .text	00000086 ble_sm_pair_initiate
20003d10 g     O .bss	0000010c g_nrf_encrypt_scratchpad
0001d0a0 g     F .text	000000b4 ble_ll_utils_calc_access_addr
00026480 g     F .text	00000040 ble_l2cap_sig_cmd_get
00028b78 g     F .text	00000030 ble_store_util_bonded_peers
200034b0 g     O .bss	0000005a id_mfghash
0001cde4 g     F .text	00000174 ble_ll_sched_adv_reschedule
00013050 g     F .text	00000014 img_mgmt_dfu_confirmed
20003348 g     O .bss	00000050 g_idle_task
00029328 g     F .text	00000010 ble_sm_alg_ecc_init
20000298 g     O .data	00000004 sysinit_panic_cb
0002ec3c g     F .text	0000008c hal_timer_start_at
0001d1a6 g     F .text	0000003e ble_ll_utils_calc_num_used_chans
00025730 g     F .text	00000014 ble_mqueue_init
00014b08 g     F .text	0000000c ble_ll_state_set
00013f7c g     F .text	0000000e mgmt_streamer_init_reader
20001880 g     O .bss	00000004 g_os_sanity_check_list
00024720 g     F .text	00000018 ble_hs_conn_find
0002a1bc g     F .text	0000002c ble_hci_trans_ll_evt_tx
00025468 g     F .text	00000050 ble_hs_id_addr
0002f2a0 g     F .text	00000024 strncpy
00030d60 g     F .text	00000060 hal_uart_start_tx
00028918 g     F .text	00000028 ble_store_delete
0000dc0c g     F .text	00000032 os_memblock_get
0000e030 g     F .text	00000088 os_sched_wakeup
00029e58 g     F .text	00000060 ble_store_config_init
0001c4d8 g     F .text	00000080 ble_ll_scan_wfr_timer_exp
0000d336 g     F .text	00000026 os_mqueue_get
0002bf50 g     F .text	00000052 EccPoint_compute_public_key
0002ef20 g     F .text	00000010 os_sem_init
00023a2c g     F .text	0000000c ble_hs_evq_set
00021770 g     F .text	00000024 ble_gap_preempt_no_lock
0002f1fc g     F .text	00000060 realloc
00012220 g     F .text	00000030 mem_init_mbuf_pool
00029274 g     F .text	00000060 ble_sm_alg_gen_dhkey
000247e0 g     F .text	0000000c ble_hs_conn_first
0001de58 g     F .text	0000000c ble_phy_disable
0000cb94 g     F .text	00000098 os_default_irq
0000edc0 g     F .text	0000002c smp_pkg_init
0002b316 g     F .text	00000014 uECC_vli_testBit
20003c94 g     O .bss	00000001 g_nrf_num_irks
00010b20 g     F .text	0000000a flash_area_erased_val
0002b32a g     F .text	00000034 uECC_vli_numBits
000188c2 g     F .text	00000030 ble_ll_conn_hci_rd_rssi
20004112 g     O .bss	00000001 ble_hs_enabled_state
00016a08 g     F .text	00000024 ble_ll_conn_find_active_conn
000212f0 g     F .text	00000026 ble_gap_timer
0002bd90 g     F .text	00000164 EccPoint_mult
00024c60 g     F .text	000000b8 ble_hs_hci_acl_tx_now
00027e46 g     F .text	00000026 ble_sm_connection_broken
20003410 g     O .bss	00000004 g_os_last_ctx_sw_time
20003880 g     O .bss	00000008 g_ble_ll_conn_free_list
0002ef30 g     F .text	00000064 os_sem_release
0001d044 g     F .text	00000024 ble_ll_sched_next_time
00013128 g     F .text	0000001e img_mgmt_slot_in_use
00014b30 g     F .text	0000000a ble_ll_read_supp_states
0000e958 g     F .text	00000048 memcmp
0000e594 g     F .text	00000018 os_arch_init
00013fa8 g     F .text	0000001c mgmt_register_group
0001dde4 g     F .text	0000001c ble_phy_txpwr_set
0002d83c g     F .text	0000004e fcb_sector_hdr_read
0000f9b0 g     F .text	00000096 conf_line_parse
00031338  w    F .text	00000002 .hidden __aeabi_ldiv0
0002ed8e g     F .text	00000076 get_le64
0003003c g     F .text	00000030 crc8_calc
0000f6d0 g     F .text	00000054 conf_commit
00012208 g     F .text	0000000c sysinit_start
0002ea6c g     F .text	00000170 hal_timer_config
0000d140 g     F .text	00000044 os_dev_open
00029d40 g     F .text	0000002a ble_store_config_write
0000ea58 g     F .text	0000002c strncat
00017ce4 g     F .text	000001dc ble_ll_conn_slave_start
000215a6 g     F .text	00000044 ble_gap_enc_event
00015d5c g     F .text	00000028 ble_ll_adv_can_chg_whitelist
0000cae0 g     F .text	00000018 split_mode_set
000169dc g     F .text	00000012 ble_ll_conn_is_lru
0002d88a g     F .text	00000128 fcb_init
0002bc0c g     F .text	0000000e EccPoint_isZero
0000da5c g     F .text	000000ae os_mbuf_pack_chains
0000eefc g     F .text	0000004c smp_ble_gatt_svr_init
000104d4 g     F .text	00000008 console_is_init
00024bb4 g     F .text	0000007c ble_hs_hci_cmd_tx
0000ea28 g     F .text	00000014 srand48
0001d2bc g     F .text	00000060 ble_ll_whitelist_add
00016e54 g     F .text	0000001a ble_ll_conn_auth_pyld_timer_cb
0000f214 g     F .text	00000058 conf_save
000291c0 g     F .text	000000b4 ble_sm_alg_g2
0002ef94 g     F .text	000000b8 os_sem_pend
0002e664 g     F .text	00000010 hal_watchdog_enable
0001387c g     F .text	00000014 img_mgmt_impl_log_upload_done
00012400 g     F .text	00000030 rwlock_init
00015d84 g     F .text	0000002c ble_ll_adv_send_conn_comp_ev
00025bee g     F .text	00000054 ble_hs_startup_go
0001230e g     F .text	0000005a rwlock_acquire_read
00023ce4 g     F .text	00000080 ble_hs_start
00015ae8 g     F .text	00000034 ble_ll_adv_halt
0002ee9e g     F .text	00000008 os_cputime_timer_start
00015950 g     F .text	00000024 ble_ll_adv_chk_rpa_timeout
00019314 g     F .text	0000001c ble_ll_ctrl_enc_allowed_pdu_rx
0001dd5c g     F .text	0000002c ble_phy_encrypt_disable
000189e6 g     F .text	00000060 ble_ll_conn_hci_le_start_encrypt
0000d35c g     F .text	0000003e os_mqueue_put
00023c70 g     F .text	0000000a ble_hs_timer_resched
0001a628 g     F .text	00000028 ble_ll_hci_send_noop
0000dcd0 g     F .text	0000004c os_msys_register
0001c6bc g     F .text	00000014 ble_ll_scan_set_peer_rpa
20003398 g     O .bss	00000004 g_os_idle_ctr
000109f4 g     F .text	00000034 flash_area_open
00018b20 g     F .text	0000006c ble_ll_conn_hci_wr_auth_pyld_tmo
0002f310 g     F .text	0000000c strtoull
0000d674 g     F .text	0000007a os_mbuf_cmpf
000111c8 g     F .text	00000024 log_walk_body
00010db4 g     F .text	00000054 id_init
0000c18e  w    F .text	00000002 SAADC_IRQHandler
0002a5a2 g     F .text	00000020 boot_read_swap_state_by_id
0001922c g     F .text	000000ac ble_ll_calc_session_key
0002a214 g     F .text	0000002c ble_hci_trans_ll_acl_tx
00028cf8 g     F .text	000000ac ble_uuid_to_str
00022cda g     F .text	00000092 ble_gatts_clt_cfg_access
00012e1c g     F .text	00000014 img_mgmt_dfu_started
0001e3e0 g     F .text	0000000c ble_phy_rx_started
000288c0 g     F .text	00000014 ble_sm_sc_init
0000e9f0 g     F .text	00000038 memset
0000c020 g       .text	00000100 __isr_vector
0001feac g     F .text	0000006c ble_att_svr_rx_write
20003588 g     O .bss	00000030 g_img_mgmt_state
0000c7e4 g     F .text	00000078 main
00011296 g     F .text	0000003a log_read_body
00020112 g     F .text	0000006c ble_att_svr_rx_indicate
0002ddd0 g     F .text	00000034 fcb_getnext
00018a46 g     F .text	0000005c ble_ll_conn_hci_le_ltk_reply
00028ba8 g     F .text	00000020 ble_store_util_delete_all
0001d078 g     F .text	00000028 ble_ll_sched_init
0001ab58 g     F .text	00000024 ble_ll_rand_init
20003464 g     O .bss	00000018 g_smp_ble_mq
00010780 g     F .text	00000034 console_out_nolock
0001a90c g     F .text	00000050 ble_ll_hci_ev_ltk_req
0002b2c0 g     F .text	0000000c uECC_set_rng
0002c6ca g     F .text	0000006a cbor_encode_uint
0001ba4c g     F .text	0000000a ble_ll_scan_timer_cb
0000c18e  w    F .text	00000002 CCM_AAR_IRQHandler
0000c18e  w    F .text	00000002 WDT_IRQHandler
000144fc g     F .text	00000050 ble_ll_task
00025dbe g     F .text	0000000c ble_l2cap_get_conn_handle
00011670 g     F .text	00000034 modlog_register
00018068 g     F .text	00000056 ble_ll_conn_hci_chk_conn_params
0002de04 g     F .text	00000076 fcb_rotate
0002b4a8 g     F .text	000001ac vli_mmod_fast_secp256r1
200036dc g     O .bss	00000050 g_ble_ll_task
0001a9aa g     F .text	00000042 ble_ll_hci_ev_rd_rem_ver
00012214 g     F .text	0000000c sysinit_end
00021048 g     F .text	00000040 ble_gap_terminate
0001171c g     F .text	000000c8 modlog_init
0000e89a g     F .text	00000046 SVC_Handler
000218a8 g     F .text	00000080 ble_gap_init
0001a650 g     F .text	00000058 ble_ll_hci_is_le_event_enabled
00020f8c g     F .text	00000014 ble_gap_conn_active
0001aa1c g     F .text	00000026 ble_ll_hci_ev_databuf_overflow
0002a098 g     F .text	00000034 ble_store_config_conf_init
0001a4da g     F .text	00000004 ble_ll_hci_adv_mode_ext
0000d1a4 g     F .text	0000000a os_eventq_inited
0001aea4 g     F .text	00000098 ble_ll_resolv_list_rmv
0001a80c g     F .text	0000004a ble_ll_hci_ev_rem_conn_parm_req
0002829c g     F .text	000000a0 ble_sm_sc_confirm_exec
00013dd0 g     F .text	0000005c os_mgmt_impl_reset
00014014 g     F .text	00000030 mgmt_ctxt_init
20003e1c g     O .bss	00000040 ble_phy_stats
00018554 g     F .text	00000060 ble_ll_conn_hci_read_rem_features
0002b3b0 g     F .text	00000028 uECC_vli_equal
0002df72 g     F .text	00000054 hal_flash_read
00025594 g     F .text	00000018 ble_hs_id_reset
0001029c g     F .text	0000003c console_unlock
0000d31c g     F .text	00000008 os_eventq_dflt_get
000324e8 g     O .text	00000010 ble_hs_pvcy_default_irk
0002ebdc g     F .text	00000038 hal_timer_read
0002b2cc g     F .text	0000000c uECC_get_rng
200043f0 g     O .bss	0000001c nrf52_hal_timer5
0000d238 g     F .text	00000082 os_eventq_get
00010af0 g     F .text	00000026 flash_area_erase
00013a54 g     F .text	00000010 log_mgmt_impl_get_next_idx
0000d444 g     F .text	00000014 os_mbuf_len
0002b114 g     F .text	00000068 tc_cmac_final
0000e4ee g     F .text	00000026 os_time_ms_to_ticks
0001c6a0 g     F .text	0000000c ble_ll_scan_enabled
000110b0 g     F .text	0000000a log_walk
0000cfd4 g     F .text	0000003c os_callout_wakeup_ticks
00020b3c g     F .text	00000002 ble_gap_rx_adv_report
00025d8c g     F .text	00000032 ble_l2cap_prepend_hdr
0000c18e  w    F .text	00000002 SWI5_EGU5_IRQHandler
00015e48 g     F .text	0000001c ble_ll_adv_init
0002a344 g     F .text	000000d4 ble_hci_ram_init
0002561a g     F .text	0000000a ble_hs_mbuf_att_pkt
200034ac g     O .bss	00000004 flash_map_entries
0000d5d0 g     F .text	000000a4 os_mbuf_adj
0001c6d8 g     F .text	00000010 ble_ll_scan_whitelist_enabled
0001405a g     F .text	00000016 mgmt_hton_hdr
20003570 g     O .bss	00000002 reboot_cnt
0000f380 g     F .text	0000001c conf_register
0000c020 g       .imghdr	00000000 __text
00030036 g     F .text	00000004 crc8_init
200035b8 g     O .bss	00000004 img_mgmt_dfu_callbacks_fn
0000f96c g     F .text	0000003a conf_fcb_kv_save
000119c4 g     F .text	00000012 mfg_seek_next
0002bfa2 g     F .text	00000028 uECC_vli_nativeToBytes
0001c130 g     F .text	0000008c ble_ll_scan_sm_stop
0003099c g     F .text	00000010 stat_mgmt_register_group
2000413c g     O .bss	00000034 ble_l2cap_stats
00023d82 g     F .text	00000008 ble_hs_tx_data
0000ea3c g     F .text	0000001c strcmp
00010b50 g     F .text	0000000e flash_area_read_is_empty
00010754 g     F .text	0000002c uart_console_blocking_mode
000279b4 g     F .text	00000014 ble_sm_enc_change_rx
0000df88 g     F .text	0000000c os_sched_get_current_task
0002c850 g     F .text	00000020 cbor_encoder_create_map
000102d8 g     F .text	00000078 console_write
00015de4 g     F .text	00000014 ble_ll_adv_wfr_timer_exp
20003bb8 g     O .bss	00000028 g_ble_ll_resolv_data
00021574 g     F .text	00000032 ble_gap_passkey_event
00025d58 g     F .text	00000008 ble_l2cap_is_mtu_req_sent
0000e948 g     F .text	00000010 lrand48
0002e710 g     F .text	00000034 hal_bsp_hw_id
0001db90 g     F .text	0000016c ble_phy_init
0001ea84 g     F .text	00000004 ble_att_clt_tx_read_type
0000c358 g     F .text	00000104 SystemInit
0002eeae g     F .text	0000000a os_cputime_get32
0000f900 g     F .text	00000058 conf_fcb_src
00028c6a g     F .text	00000052 ble_uuid_init_from_buf
000147aa g     F .text	00000016 ble_ll_is_valid_public_addr
0000c18e  w    F .text	00000002 RNG_IRQHandler
0002776e g     F .text	000000de ble_sm_process_result
000255ac g     F .text	00000024 ble_hs_log_mbuf
00011200 g     F .text	0000004a log_read_hdr
0000d2dc g     F .text	00000040 os_eventq_remove
000283e4 g     F .text	000001b8 ble_sm_sc_random_rx
0001d31c g     F .text	0000003c ble_ll_whitelist_rmv
20003730 g     O .bss	000000a8 g_ble_ll_data
00024738 g     F .text	00000018 ble_hs_conn_insert
0001e3fc g     F .text	00000004 ble_phy_max_data_pdu_pyld
0000f1a4 g     F .text	00000068 conf_save_one
000262c4 g     F .text	000000ac ble_l2cap_sig_update
0000f406 g     F .text	0000015e conf_value_from_str
00011008 g     F .text	00000040 log_module_get_name
00029890 g     F .text	00000074 ble_svc_gap_init
0001eaa8 g     F .text	00000004 ble_att_clt_rx_write
0002ed34 g     F .text	00000014 put_le32
00012e08 g     F .text	00000014 img_mgmt_dfu_stopped
0001c904 g     F .text	000001a4 ble_ll_sched_conn_reschedule
00023874 g     F .text	00000048 ble_gatts_add_svcs
00013804 g     F .text	00000038 img_mgmt_impl_swap_type
0002f25c g     F .text	00000020 sprintf
00014ad8 g     F .text	00000030 ble_ll_tx_mbuf_pducb
20003888 g     O .bss	00000004 g_ble_ll_conn_create_sm
00024de8 g     F .text	00000038 ble_hs_hci_cmd_send_buf
0001eb3c g     F .text	0000000a ble_att_clt_rx_indicate
0001ea7c g     F .text	00000004 ble_att_clt_tx_find_type_value
0001ea98 g     F .text	00000004 ble_att_clt_rx_read_blob
0000e148 g     F .text	00000022 os_sched
0001ea80 g     F .text	00000004 ble_att_clt_rx_find_type_value
000245b4 g     F .text	00000016 ble_hs_conn_chan_find_by_scid
200003ec g     O .data	0000001c ble_svc_dis_data
00030dc0 g     F .text	0000004c hal_uart_start_rx
0002df62 g     F .text	00000010 hal_flash_erased_val
0001e434 g     F .text	00000008 ble_phy_rfclk_disable
0001ea88 g     F .text	00000004 ble_att_clt_rx_read_type
00013890 g     F .text	00000014 img_mgmt_impl_log_pending
00025624 g     F .text	0000002e ble_hs_mbuf_to_flat
00017c58 g     F .text	00000048 ble_ll_conn_tx_pkt_in
200042e8 g     O .bss	00000004 ble_store_config_num_cccds
200037dc g     O .bss	00000080 g_ble_ll_adv_sm
0000e7a0 g     F .text	000000e0 os_mutex_pend
00000000 g       .svc_table	00000000 SVC_Table
00025610 g     F .text	0000000a ble_hs_mbuf_l2cap_pkt
0000c18e  w    F .text	00000002 RTC2_IRQHandler
0001b0f4 g     F .text	00000028 ble_ll_resolv_set_peer_rpa
000271b8 g     F .text	00000040 ble_sm_proc_find
0001b1e4 g     F .text	0000000c ble_ll_resolv_enabled
20040000 g       .bss	00000000 __StackTop
0001e91e g     F .text	00000020 ble_att_chan_mtu
0002c836 g     F .text	00000010 cbor_encode_text_string
000252f4 g     F .text	00000040 ble_hs_hci_util_read_adv_tx_pwr
000126e0 g     F .text	000001d4 cbor_read_array
00029090 g     F .text	00000130 ble_sm_alg_f6
20003c98 g     O .bss	00000040 g_nrf_irk_list
0001a95c g     F .text	0000004e ble_ll_hci_ev_rd_rem_used_feat
0000d324 g     F .text	00000012 os_mqueue_init
0000f0a8 g     F .text	00000002 config_pkg_init_stage2
0002c240 g     F .text	00000012 _double_byte
000289c8 g     F .text	0000000c ble_store_write_our_sec
00019d66 g     F .text	000000cc ble_ll_ctrl_tx_done
000256dc g     F .text	00000020 ble_hs_misc_conn_chan_find_reqd
0000c18e  w    F .text	00000002 PWM0_IRQHandler
0000c18e  w    F .text	00000002 SWI3_EGU3_IRQHandler
00019564 g     F .text	00000018 ble_ll_ctrl_is_terminate_ind
0002f2c4 g     F .text	00000020 strsep
0001a7c4 g     F .text	00000048 ble_ll_hci_ev_datalen_chg
0001308c g     F .text	00000076 img_mgmt_state_flags
0000fa48 g     F .text	0000005a conf_line_make
000200d4 g     F .text	0000003e ble_att_svr_rx_notify
0001e9ac g     F .text	0000003c ble_att_init
0001f8ce g     F .text	00000016 ble_att_svr_ticks_until_tmo
0002552c g     F .text	00000020 ble_hs_id_use_addr
0002b2d8 g     F .text	00000014 uECC_vli_clear
00024584 g     F .text	00000030 ble_hs_conn_can_alloc
000148f4 g     F .text	0000003c ble_ll_wfr_timer_exp
0002453c g     F .text	0000002c ble_hs_atomic_conn_flags
000139b0 g     F .text	0000002e log_mgmt_impl_get_log
0002576a g     F .text	0000003e ble_mqueue_put
00025376 g     F .text	00000026 ble_hs_hci_util_set_random_addr
00010a28 g     F .text	0000007c flash_area_to_sectors
0002c34c g     F .text	00000058 base64_decode
00020ce8 g     F .text	0000004c ble_gap_adv_set_data
0001b404 g     F .text	00000028 ble_ll_rfmgmt_scan_changed
0002497c g     F .text	00000004 ble_hs_flow_startup
0001d430 g     F .text	00000068 ble_hw_whitelist_add
00026410 g     F .text	00000034 ble_l2cap_sig_init
00017764 g     F .text	00000070 ble_ll_conn_rx_isr_start
0000cf78 g     F .text	0000005c os_callout_tick
00024944 g     F .text	00000034 ble_hs_conn_init
00032988 g     O .text	00000048 sysflash_map_dflt
00021794 g     F .text	00000018 ble_gap_preempt
000107b4 g     F .text	00000010 uart_console_is_init
0000c120 g       .text	00000000 __isr_vector_end
0000ce34 g     F .text	00000022 os_start
0001483c g     F .text	00000028 ble_ll_is_valid_own_addr_type
00026504 g     F .text	0000001e ble_l2cap_sig_reject_invalid_cid_tx
00019d18 g     F .text	0000004e ble_ll_ctrl_reject_ind_send
0001475e g     F .text	00000018 ble_ll_is_rpa
0002134c g     F .text	00000098 ble_gap_rx_param_req
0002ee3a g     F .text	0000001c swap_buf
0001936e g     F .text	00000042 ble_ll_ctrl_start_enc_send
00014b3c g     F .text	0000000c ble_ll_read_supp_features
00016ed4 g     F .text	00000104 ble_ll_conn_sm_new
00015c8c g     F .text	0000004c ble_ll_adv_rx_isr_end
0002b6a4 g     F .text	00000136 uECC_vli_mmod
00018798 g     F .text	00000048 ble_ll_conn_create_cancel
000185b4 g     F .text	000000d0 ble_ll_conn_hci_update
0001aa44 g     F .text	00000050 ble_ll_rand_sample
000289d4 g     F .text	0000000e ble_store_read_peer_sec
00028872 g     F .text	0000004e ble_sm_sc_dhkey_check_rx
0000c18e  w    F .text	00000002 RTC1_IRQHandler
0002c238 g     F .text	00000008 _set
0002a6ea g     F .text	00000092 boot_set_pending
0000e1b0 g     F .text	0000000a os_task_stacktop_get
20003fec g     O .bss	00000098 ble_gattc_stats
00025334 g     F .text	00000042 ble_hs_hci_util_rand
00014bc4 g     F .text	00000006 ble_ll_pdu_tx_time_get
00030ecc g     F .text	00000100 hal_uart_config
0002ee62 g     F .text	0000003c os_cputime_timer_init
00026472 g     F .text	0000000e ble_l2cap_sig_hdr_parse
0001f9be g     F .text	00000030 ble_att_svr_tx_error_rsp
00016a58 g     F .text	0000001c ble_ll_conn_calc_dci
00013f98 g     F .text	00000010 mgmt_streamer_free_buf
00013ac0 g     F .text	0000001c log_mgmt_impl_clear
0002bcc6 g     F .text	000000ca XYcZ_add
0000f26c g     F .text	00000014 conf_store_init
0001d368 g     F .text	00000002 do_works_mitm
0001d360 g     F .text	00000008 ble_ll_whitelist_disable
000148e0 g     F .text	00000014 ble_ll_get_our_devaddr
000136b2 g     F .text	00000088 img_mgmt_impl_write_pending
00025978 g     F .text	00000084 ble_hs_pvcy_set_our_irk
0001c56c g     F .text	0000009c ble_ll_scan_set_scan_params
0000c18e  w    F .text	00000002 SWI1_EGU1_IRQHandler
000211c0 g     F .text	000000c0 ble_gap_rx_update_complete
0001e3d4 g     F .text	0000000c ble_phy_access_addr_get
0000d83c g     F .text	00000044 os_mbuf_concat
000289e2 g     F .text	00000050 ble_store_write_peer_sec
00010358 g     F .text	0000017c console_handle_char
0001c3b0 g     F .text	00000070 ble_ll_scan_chk_resume
0000eda8 g     F .text	00000018 smp_transport_init
0002d704 g     F .text	0000007e _cbor_value_dup_string
00011a50 g     F .text	00000010 mfg_open
20000184 g     O .data	00000008 g_os_run_list
0001b394 g     F .text	00000038 ble_ll_rfmgmt_init
00014290 g     F .text	0000010a smp_process_request_packet
0000cb1c g     F .text	00000034 NVIC_Relocate
00023a70 g     F .text	00000010 ble_hs_unlock_nested
0000f104 g     F .text	00000028 conf_src_register
0002c6c0 g     F .text	0000000a cbor_encoder_init
0000ca1c g     F .text	00000070 sysinit_app
00028c30 g     F .text	00000014 ble_store_util_count
00025cfc g     F .text	00000034 ble_l2cap_chan_alloc
0001ea74 g     F .text	00000004 ble_att_clt_tx_find_info
200018b8 g     O .bss	00000004 os_flags
0002c478 g     F .text	00000006 cbor_buf_writer_buffer_size
0001373a g     F .text	00000034 img_mgmt_impl_write_confirmed
0000e540 g     F .text	00000006 os_arch_restore_sr
200043e4 g     O .bss	0000000c g_hal_os_tick
00025f20 g     F .text	00000060 ble_l2cap_init
0000ecd8 g     F .text	00000044 smp_tx_rsp
0001c6e8 g     F .text	00000048 ble_ll_scan_reset
000146dc g     F .text	0000005c ble_ll_rxpdu_alloc
0001a4e0 g     F .text	00000030 ble_ll_hci_event_send
00011f7c g     F .text	00000090 log_reboot_pkg_init
0002d9b2 g     F .text	00000054 fcb_offset_last_n
00015dde g     F .text	00000004 ble_ll_adv_get_peer_rpa
0002a110 g     F .text	0000002e ble_hs_util_ensure_addr
2003fe50 g       *ABS*	000001b0 __StackLimit
00010b2a g     F .text	00000026 flash_area_is_empty
2000339c g     O .bss	00000004 g_os_started
0001e190 g     F .text	00000074 ble_phy_rx
00020d68 g     F .text	000001cc ble_gap_rx_conn_complete
0000c18e  w    F .text	00000002 SPIM2_SPIS2_SPI2_IRQHandler
0001c608 g     F .text	00000020 ble_ll_hci_scan_set_enable
0002a29c g     F .text	000000a4 ble_hci_trans_buf_free
00025ee2 g     F .text	0000003e ble_l2cap_tx
0002a140 g     F .text	00000028 ble_hci_trans_cfg_hs
0000c18e  w    F .text	00000002 NFCT_IRQHandler
0001a760 g     F .text	0000000a ble_ll_hci_acl_rx
20003cd8 g     O .bss	00000004 g_ble_rng_isr_cb
20003890 g     O .bss	000001a0 g_ble_ll_conn_sm
0002cfb4 g     F .text	00000050 cbor_value_leave_container
0002af70 g     F .text	00000032 gf_double
0002ed48 g     F .text	00000026 put_le64
0002a024 g     F .text	0000001c ble_store_config_persist_our_secs
00014738 g     F .text	00000010 ble_ll_chk_txrx_octets
00028a40 g     F .text	0000000c ble_store_write_cccd
0002da56 g     F .text	00000036 fcb_append_to_scratch
000137a4 g     F .text	00000032 img_mgmt_impl_write_image_data
0000c348 g     F .text	00000010 SystemCoreClockUpdate
0002a88c g     F .text	000006e4 tc_aes_encrypt
20003e5c g     O .bss	00000021 g_nrf_ccm_data
0000d420 g     F .text	00000024 os_mbuf_free_chain
00029e2c g     F .text	0000002a ble_store_config_delete
000133e8 g     F .text	0000005a img_mgmt_ver_str
00023ab4 g     F .text	0000003a ble_hs_wakeup_tx
0000e464 g     F .text	0000003c os_get_uptime
00016e28 g     F .text	00000002 ble_ll_conn_reset_pending_aux_conn_rsp
0002b806 g     F .text	0000015a double_jacobian_default
0000ddcc g     F .text	00000034 os_msys_init
00024700 g     F .text	00000020 ble_hs_conn_remove
0001f6b4 g     F .text	00000018 ble_att_svr_find_by_handle
0002dd4c g     F .text	00000084 fcb_getnext_nolock
0000d500 g     F .text	00000022 os_mbuf_off
000149e4 g     F .text	000000f4 ble_ll_rx_end
20003495 g     O .bss	00000001 g_is_output_nlip
00024b90 g     F .text	00000024 ble_hs_hci_add_avail_pkts
0000e3b0 g     F .text	0000000c os_time_get
20003554 g     O .bss	0000001c modlog_mapping_pool
0002a168 g     F .text	00000028 ble_hci_trans_cfg_ll
000289ba g     F .text	0000000e ble_store_read_our_sec
0001ff6e g     F .text	000000b2 ble_att_svr_rx_prep_write
0002ecc8 g     F .text	00000064 hal_timer_stop
0001b060 g     F .text	0000000c ble_ll_resolv_get_rpa_tmo
0002bc1a g     F .text	0000003e apply_z
0000f698 g     F .text	00000038 conf_get_value
00011058 g     F .text	00000058 log_append_body
0001b06c g     F .text	00000086 ble_ll_resolv_get_priv_addr
0001b460 g     F .text	00000034 ble_ll_rfmgmt_release
0001eaac g     F .text	00000004 ble_att_clt_tx_prep_write
0000d3d6 g     F .text	00000036 os_mbuf_get_pkthdr
200042f0 g     O .bss	000000f0 ble_store_config_our_secs
2000354c g     O .bss	00000008 g_log_info
0000f564 g     F .text	000000ac conf_str_from_value
0001e42c g     F .text	00000008 ble_phy_rfclk_enable
00031338  w    F .text	00000002 .hidden __aeabi_idiv0
0002c528 g     F .text	00000058 cbor_mbuf_reader_init
20004114 g     O .bss	00000002 ble_hs_max_client_configs
0001fd2e g     F .text	00000080 ble_att_svr_rx_read_blob
00023558 g     F .text	00000020 ble_gatts_conn_can_alloc
000139f4 g     F .text	00000060 log_mgmt_impl_get_level
0002da8c g     F .text	000000fc fcb_append
0002afb6 g     F .text	00000030 tc_cmac_init
0001439c g     F .text	00000070 ull_to_s
00029704 g     F .text	00000074 ble_svc_dis_init
0000f664 g     F .text	00000034 conf_set_value
0001d358 g     F .text	00000008 ble_ll_whitelist_enable
00023a5c g     F .text	00000014 ble_hs_lock_nested
00024502 g     F .text	00000010 ble_hs_adv_set_fields
00031e00 g     O .text	0000002a g_ble_ll_supp_cmds
0000e1bc g     F .text	000000e4 os_task_init
0000c224 g     F .text	0000004c hal_system_clock_start
00028a74 g     F .text	0000002a ble_store_key_from_value_sec
0002c00c g     F .text	00000078 uECC_valid_point
0000c182  w    F .text	00000002 BusFault_Handler
00025cac g     F .text	0000001c ble_hs_stop_init
00011428 g     F .text	00000060 log_console_init
0002713e g     F .text	00000078 ble_sm_ia_ra
00023c7c g     F .text	0000003c ble_hs_enqueue_hci_event
0001a89a g     F .text	00000072 ble_ll_hci_ev_encrypt_chg
0000eadc g     F .text	00000010 strlen
0000d0b4 g     F .text	00000040 os_dev_create
000245fe g     F .text	0000002c ble_hs_conn_delete_chan
0000dc3e g     F .text	0000001e os_memblock_put_from_cb
0001e420 g     F .text	0000000c ble_phy_resolv_list_disable
0001238e g     F .text	00000054 rwlock_acquire_write
20003ac0 g     O .bss	00000020 g_ble_ll_rnum_buf
0000d194 g     F .text	00000010 os_eventq_init
0001ea9c g     F .text	00000004 ble_att_clt_rx_read_mult
0000e3bc g     F .text	00000048 os_time_advance
00018aee g     F .text	00000032 ble_ll_conn_hci_rd_auth_pyld_tmo
000169f0 g     F .text	00000018 ble_ll_conn_get_ce_end_time
0000e16c g     F .text	0000002c os_sched_resort
200043e0 g     O .bss	00000004 boot_current_slot
00028e7a g     F .text	00000024 ble_uuid_to_mbuf
00020b00 g     F .text	0000002a ble_gap_conn_find
0000d9ec g     F .text	00000018 os_mbuf_prepend_pullup
0001e70c g     F .text	0000000e ble_att_conn_chan_find
0002df2a g     F .text	00000028 hal_flash_init
0002ed6e g     F .text	0000000a get_le16
00017298 g     F .text	00000030 ble_ll_conn_connect_ind_send
0002f27c g     F .text	00000014 strchr
0000c18e  w    F .text	00000002 MWU_IRQHandler
0001213c g     F .text	00000058 stats_module_init
00020b8e g     F .text	00000040 ble_gap_rx_phy_update_complete
00017ec0 g     F .text	000000c8 ble_ll_conn_module_reset
00013fc4 g     F .text	00000016 mgmt_find_handler
0000c180  w    F .text	00000002 MemoryManagement_Handler
000217ac g     F .text	000000c4 ble_gap_preempt_done
0000c18e  w    F .text	00000002 QSPI_IRQHandler
00015c24 g     F .text	0000000c ble_ll_adv_read_txpwr
00027ecc g     F .text	00000034 ble_sm_cmd_get
00024d40 g     F .text	0000000c ble_hs_hci_get_hci_version
0001ea10 g     F .text	00000064 ble_att_clt_rx_mtu
0002a1e8 g     F .text	0000002c ble_hci_trans_hs_acl_tx
20003a30 g     O .bss	00000080 ble_ll_conn_stats
2000350c g     O .bss	00000040 id_serial
00023af0 g     F .text	00000014 ble_hs_is_enabled
00011488 g     F .text	0000001c log_level_get
0002e9f4 g     F .text	00000010 nrf52_timer5_irq_handler
00017bb0 g     F .text	000000a6 ble_ll_conn_enqueue_pkt
00015acc g     F .text	0000001c ble_ll_adv_event_rmvd_from_sched
0002afa2 g     F .text	00000014 tc_cmac_erase
000255d0 g     F .text	0000000c ble_hs_log_flat_buf
0002a77c g     F .text	00000054 boot_set_confirmed
00019646 g     F .text	00000070 ble_ll_ctrl_chk_proc_start
0000c18e  w    F .text	00000002 COMP_LPCOMP_IRQHandler
000264c0 g     F .text	00000044 ble_l2cap_sig_reject_tx
0001d6ac g     F .text	00000028 ble_hw_resolv_list_match
0001ff18 g     F .text	00000040 ble_att_svr_rx_write_no_rsp
0002e1a6 g     F .text	00000032 hal_flash_isempty_no_buf
0001f658 g     F .text	00000050 ble_att_svr_register
0000d0f4 g     F .text	0000002c os_dev_initialize_all
00025744 g     F .text	00000026 ble_mqueue_get
0002b040 g     F .text	000000d4 tc_cmac_update
0001b42c g     F .text	00000034 ble_ll_rfmgmt_sched_changed
00017f88 g     F .text	00000088 ble_ll_conn_module_init
000116e0 g     F .text	0000003a modlog_printf
00021500 g     F .text	0000004c ble_gap_unpair
0001cfd0 g     F .text	00000074 ble_ll_sched_rmv_elem
0000fbdc g     F .text	00000010 conf_mgmt_register
000256ac g     F .text	00000030 ble_hs_misc_conn_chan_find
000226ba g     F .text	0000000c ble_gatts_indicate_fail_notconn
00024568 g     F .text	0000001c ble_hs_atomic_first_conn_handle
0000eb04 g     F .text	00000046 imgmgr_find_best_area_id
0001d99c g     F .text	00000004 ble_phy_get_cur_phy
2000018c g     O .data	00000008 g_os_sleep_list
0000ea84 g     F .text	00000058 jrand48
00028788 g     F .text	000000ea ble_sm_sc_dhkey_check_exec
00028084 g     F .text	000000b4 ble_sm_sc_io_action
00025840 g     F .text	00000028 ble_hs_pvcy_ensure_started
0001998c g     F .text	0000038a ble_ll_ctrl_rx_pdu
0002df00 g     F .text	0000000c hal_bsp_init
000227f4 g     F .text	0000000c ble_gattc_connection_broken
0000ce58 g     F .text	00000048 os_pkg_init
0001de0c g     F .text	0000004c ble_phy_setchan
20003ab0 g     O .bss	00000004 g_ble_ll_conn_active_list
000182b8 g     F .text	000000ec ble_ll_conn_num_comp_pkts_event_send
000138a4 g     F .text	00000014 img_mgmt_impl_log_confirm
0001ab3c g     F .text	0000001c ble_ll_rand_start
0002115c g     F .text	00000064 ble_gap_rx_disconn_complete
0000f308 g     F .text	00000054 conf_init
0000de3c g     F .text	00000010 os_sanity_check_init
0001b224 g     F .text	0000001c ble_ll_resolv_list_reset
0002de7a g     F .text	00000074 fcb_walk
0001d274 g     F .text	0000002c ble_ll_whitelist_clear
00024680 g     F .text	00000080 ble_hs_conn_alloc
00024c30 g     F .text	00000030 ble_hs_hci_rx_evt
00030e70 g     F .text	0000005c hal_uart_init
0002d6fc g     F .text	00000008 cbor_value_to_pretty_advance
000172c8 g     F .text	0000002c ble_ll_conn_event_halt
000120dc g     F .text	00000022 stats_init
0002f868 g     F .text	00000008 vfprintf
2000347c g     O .bss	00000002 g_ble_smp_attr_handle
0002c084 g     F .text	00000048 uECC_valid_public_key
0002fa7e g     F .text	00000032 strpbrk
0001b148 g     F .text	00000034 ble_ll_resolv_gen_rpa
200033a0 g     O .bss	00000050 g_os_main_task
0002f1bc g     F .text	0000002c free
0002a5e4 g     F .text	0000000e boot_write_image_ok



Disassembly of section .text:

0000c020 <__isr_vector>:
    c020:	20040000 	.word	0x20040000
    c024:	0000c121 	.word	0x0000c121
    c028:	0000c17d 	.word	0x0000c17d
    c02c:	0000c17f 	.word	0x0000c17f
    c030:	0000c181 	.word	0x0000c181
    c034:	0000c183 	.word	0x0000c183
    c038:	0000c185 	.word	0x0000c185
	...
    c04c:	0000e89b 	.word	0x0000e89b
    c050:	0000c189 	.word	0x0000c189
    c054:	00000000 	.word	0x00000000
    c058:	0000e8e1 	.word	0x0000e8e1
    c05c:	0000e90b 	.word	0x0000e90b
    c060:	0000c18f 	.word	0x0000c18f
    c064:	0000c18f 	.word	0x0000c18f
    c068:	0000c18f 	.word	0x0000c18f
    c06c:	0000c18f 	.word	0x0000c18f
    c070:	0000c18f 	.word	0x0000c18f
    c074:	0000c18f 	.word	0x0000c18f
    c078:	0000c18f 	.word	0x0000c18f
    c07c:	0000c18f 	.word	0x0000c18f
    c080:	0000c18f 	.word	0x0000c18f
    c084:	0000c18f 	.word	0x0000c18f
    c088:	0000c18f 	.word	0x0000c18f
    c08c:	0000c18f 	.word	0x0000c18f
    c090:	0000c18f 	.word	0x0000c18f
    c094:	0000c18f 	.word	0x0000c18f
    c098:	0000c18f 	.word	0x0000c18f
    c09c:	0000c18f 	.word	0x0000c18f
    c0a0:	0000c18f 	.word	0x0000c18f
    c0a4:	0000c18f 	.word	0x0000c18f
    c0a8:	0000c18f 	.word	0x0000c18f
    c0ac:	0000c18f 	.word	0x0000c18f
    c0b0:	0000c18f 	.word	0x0000c18f
    c0b4:	0000c18f 	.word	0x0000c18f
    c0b8:	0000c18f 	.word	0x0000c18f
    c0bc:	0000c18f 	.word	0x0000c18f
    c0c0:	0000c18f 	.word	0x0000c18f
    c0c4:	0000c18f 	.word	0x0000c18f
    c0c8:	0000c18f 	.word	0x0000c18f
    c0cc:	0000c18f 	.word	0x0000c18f
    c0d0:	0000c18f 	.word	0x0000c18f
    c0d4:	0000c18f 	.word	0x0000c18f
	...
    c0e0:	0000c18f 	.word	0x0000c18f
    c0e4:	0000c18f 	.word	0x0000c18f
    c0e8:	0000c18f 	.word	0x0000c18f
    c0ec:	0000c18f 	.word	0x0000c18f
    c0f0:	0000c18f 	.word	0x0000c18f
    c0f4:	0000c18f 	.word	0x0000c18f
    c0f8:	0000c18f 	.word	0x0000c18f
    c0fc:	0000c18f 	.word	0x0000c18f
    c100:	0000c18f 	.word	0x0000c18f
    c104:	0000c18f 	.word	0x0000c18f
    c108:	0000c18f 	.word	0x0000c18f
    c10c:	00000000 	.word	0x00000000
    c110:	0000c18f 	.word	0x0000c18f
	...
    c11c:	0000c18f 	.word	0x0000c18f

0000c120 <Reset_Handler>:
    .type    Reset_Handler, %function
Reset_Handler:
    .fnstart

    /* Clear BSS */
    mov     r0, #0
    c120:	f04f 0000 	mov.w	r0, #0
    ldr     r2, =__bss_start__
    c124:	4a0c      	ldr	r2, [pc, #48]	; (c158 <.bss_zero_loop+0x30>)
    ldr     r3, =__bss_end__
    c126:	4b0d      	ldr	r3, [pc, #52]	; (c15c <.bss_zero_loop+0x34>)

0000c128 <.bss_zero_loop>:
.bss_zero_loop:
    cmp     r2, r3
    c128:	429a      	cmp	r2, r3
    itt     lt
    c12a:	bfbc      	itt	lt
    strlt   r0, [r2], #4
    c12c:	f842 0b04 	strlt.w	r0, [r2], #4
    blt    .bss_zero_loop
    c130:	e7fa      	blt.n	c128 <.bss_zero_loop>
 *      linker script.
 *      __etext: End of code section, i.e., begin of data sections to copy from.
 *      __data_start__/__data_end__: RAM address range that data should be
 *      copied to. Both must be aligned to 4 bytes boundary.  */

    ldr    r1, =__etext
    c132:	490b      	ldr	r1, [pc, #44]	; (c160 <.bss_zero_loop+0x38>)
    ldr    r2, =__data_start__
    c134:	4a0b      	ldr	r2, [pc, #44]	; (c164 <.bss_zero_loop+0x3c>)
    ldr    r3, =__data_end__
    c136:	4b0c      	ldr	r3, [pc, #48]	; (c168 <.bss_zero_loop+0x40>)

    subs    r3, r2
    c138:	1a9b      	subs	r3, r3, r2
    ble     .LC0
    c13a:	dd03      	ble.n	c144 <.bss_zero_loop+0x1c>

.LC1:
    subs    r3, 4
    c13c:	3b04      	subs	r3, #4
    ldr    r0, [r1,r3]
    c13e:	58c8      	ldr	r0, [r1, r3]
    str    r0, [r2,r3]
    c140:	50d0      	str	r0, [r2, r3]
    bgt    .LC1
    c142:	dcfb      	bgt.n	c13c <.bss_zero_loop+0x14>

.LC0:

    LDR     R0, =__HeapBase
    c144:	4809      	ldr	r0, [pc, #36]	; (c16c <.bss_zero_loop+0x44>)
    LDR     R1, =__HeapLimit
    c146:	490a      	ldr	r1, [pc, #40]	; (c170 <.bss_zero_loop+0x48>)
    BL      _sbrkInit
    c148:	f000 f822 	bl	c190 <_sbrkInit>

    LDR     R0, =SystemInit
    c14c:	4809      	ldr	r0, [pc, #36]	; (c174 <.bss_zero_loop+0x4c>)
    BLX     R0
    c14e:	4780      	blx	r0

    BL      hal_system_init
    c150:	f000 f844 	bl	c1dc <hal_system_init>

    LDR     R0, =_start
    c154:	4808      	ldr	r0, [pc, #32]	; (c178 <.bss_zero_loop+0x50>)
    BX      R0
    c156:	4700      	bx	r0
    ldr     r2, =__bss_start__
    c158:	20000580 	.word	0x20000580
    ldr     r3, =__bss_end__
    c15c:	2000440c 	.word	0x2000440c
    ldr    r1, =__etext
    c160:	00032e10 	.word	0x00032e10
    ldr    r2, =__data_start__
    c164:	20000100 	.word	0x20000100
    ldr    r3, =__data_end__
    c168:	20000558 	.word	0x20000558
    LDR     R0, =__HeapBase
    c16c:	20004410 	.word	0x20004410
    LDR     R1, =__HeapLimit
    c170:	2003fe50 	.word	0x2003fe50
    LDR     R0, =SystemInit
    c174:	0000c359 	.word	0x0000c359
    LDR     R0, =_start
    c178:	0000c45d 	.word	0x0000c45d

0000c17c <NMI_Handler>:
/* Dummy Exception Handlers (infinite loops which can be modified) */

    .weak   NMI_Handler
    .type   NMI_Handler, %function
NMI_Handler:
    B       .
    c17c:	e7fe      	b.n	c17c <NMI_Handler>

0000c17e <HardFault_Handler>:


    .weak   HardFault_Handler
    .type   HardFault_Handler, %function
HardFault_Handler:
    B       .
    c17e:	e7fe      	b.n	c17e <HardFault_Handler>

0000c180 <MemoryManagement_Handler>:


    .weak   MemoryManagement_Handler
    .type   MemoryManagement_Handler, %function
MemoryManagement_Handler:
    B       .
    c180:	e7fe      	b.n	c180 <MemoryManagement_Handler>

0000c182 <BusFault_Handler>:


    .weak   BusFault_Handler
    .type   BusFault_Handler, %function
BusFault_Handler:
    B       .
    c182:	e7fe      	b.n	c182 <BusFault_Handler>

0000c184 <UsageFault_Handler>:


    .weak   UsageFault_Handler
    .type   UsageFault_Handler, %function
UsageFault_Handler:
    B       .
    c184:	e7fe      	b.n	c184 <UsageFault_Handler>


    .weak   SVC_Handler
    .type   SVC_Handler, %function
SVC_Handler:
    B       .
    c186:	e7fe      	b.n	c186 <UsageFault_Handler+0x2>

0000c188 <DebugMon_Handler>:


    .weak   DebugMon_Handler
    .type   DebugMon_Handler, %function
DebugMon_Handler:
    b       .
    c188:	e7fe      	b.n	c188 <DebugMon_Handler>


    .weak   PendSV_Handler
    .type   PendSV_Handler, %function
PendSV_Handler:
    B       .
    c18a:	e7fe      	b.n	c18a <DebugMon_Handler+0x2>


    .weak   SysTick_Handler
    .type   SysTick_Handler, %function
SysTick_Handler:
    B       .
    c18c:	e7fe      	b.n	c18c <DebugMon_Handler+0x4>

0000c18e <Default_Handler>:
/* IRQ Handlers */

    .globl  Default_Handler
    .type   Default_Handler, %function
Default_Handler:
    B       .
    c18e:	e7fe      	b.n	c18e <Default_Handler>

0000c190 <_sbrkInit>:
static char *sbrkLimit __attribute__ ((section (".data")));
static char *brk __attribute__ ((section (".data")));

void
_sbrkInit(char *base, char *limit) {
    sbrkBase = base;
    c190:	4b02      	ldr	r3, [pc, #8]	; (c19c <_sbrkInit+0xc>)
    c192:	6018      	str	r0, [r3, #0]
    sbrkLimit = limit;
    c194:	6059      	str	r1, [r3, #4]
    brk = base;
    c196:	6098      	str	r0, [r3, #8]
}
    c198:	4770      	bx	lr
    c19a:	bf00      	nop
    c19c:	20000100 	.word	0x20000100

0000c1a0 <_sbrk>:
void *
_sbrk(int incr)
{
    void *prev_brk;

    if (incr < 0) {
    c1a0:	1e03      	subs	r3, r0, #0
    c1a2:	db09      	blt.n	c1b8 <_sbrk+0x18>
            prev_brk = brk;
            brk -= incr;
        }
    } else {
        /* Allocating memory from the heap. */
        if (sbrkLimit - brk >= incr) {
    c1a4:	4a0c      	ldr	r2, [pc, #48]	; (c1d8 <_sbrk+0x38>)
    c1a6:	6890      	ldr	r0, [r2, #8]
    c1a8:	6852      	ldr	r2, [r2, #4]
    c1aa:	1a12      	subs	r2, r2, r0
    c1ac:	429a      	cmp	r2, r3
    c1ae:	db0f      	blt.n	c1d0 <_sbrk+0x30>
            prev_brk = brk;
            brk += incr;
    c1b0:	4403      	add	r3, r0
    c1b2:	4a09      	ldr	r2, [pc, #36]	; (c1d8 <_sbrk+0x38>)
    c1b4:	6093      	str	r3, [r2, #8]
    c1b6:	4770      	bx	lr
        if (brk - incr < sbrkBase) {
    c1b8:	4a07      	ldr	r2, [pc, #28]	; (c1d8 <_sbrk+0x38>)
    c1ba:	6890      	ldr	r0, [r2, #8]
    c1bc:	4403      	add	r3, r0
    c1be:	6812      	ldr	r2, [r2, #0]
    c1c0:	4293      	cmp	r3, r2
    c1c2:	d302      	bcc.n	c1ca <_sbrk+0x2a>
            brk -= incr;
    c1c4:	4a04      	ldr	r2, [pc, #16]	; (c1d8 <_sbrk+0x38>)
    c1c6:	6093      	str	r3, [r2, #8]
    c1c8:	4770      	bx	lr
            prev_brk = (void *)-1;
    c1ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c1ce:	4770      	bx	lr
        } else {
            prev_brk = (void *)-1;
    c1d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        }
    }

    return prev_brk;
}
    c1d4:	4770      	bx	lr
    c1d6:	bf00      	nop
    c1d8:	20000100 	.word	0x20000100

0000c1dc <hal_system_init>:
 */
void
hal_system_init(void)
{
#if MYNEWT_VAL(MCU_DCDC_ENABLED)
    NRF_POWER->DCDCEN = 1;
    c1dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    c1e0:	2201      	movs	r2, #1
    c1e2:	f8c3 2578 	str.w	r2, [r3, #1400]	; 0x578
#endif
}
    c1e6:	4770      	bx	lr

0000c1e8 <hal_debugger_connected>:
}

int
hal_debugger_connected(void)
{
    return CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk;
    c1e8:	4b02      	ldr	r3, [pc, #8]	; (c1f4 <hal_debugger_connected+0xc>)
    c1ea:	6818      	ldr	r0, [r3, #0]
}
    c1ec:	f000 0001 	and.w	r0, r0, #1
    c1f0:	4770      	bx	lr
    c1f2:	bf00      	nop
    c1f4:	e000edf0 	.word	0xe000edf0

0000c1f8 <hal_system_reset>:
{
    c1f8:	b508      	push	{r3, lr}
        HAL_DEBUG_BREAK();
    c1fa:	f7ff fff5 	bl	c1e8 <hal_debugger_connected>
    c1fe:	b100      	cbz	r0, c202 <hal_system_reset+0xa>

static inline void
hal_debug_break(void)
{
#if !MYNEWT_VAL(MCU_DEBUG_IGNORE_BKPT)
    __BKPT(1);
    c200:	be01      	bkpt	0x0001
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    c202:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    c206:	4905      	ldr	r1, [pc, #20]	; (c21c <hal_system_reset+0x24>)
    c208:	68ca      	ldr	r2, [r1, #12]
    c20a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    c20e:	4b04      	ldr	r3, [pc, #16]	; (c220 <hal_system_reset+0x28>)
    c210:	4313      	orrs	r3, r2
    c212:	60cb      	str	r3, [r1, #12]
    c214:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    c218:	bf00      	nop
    c21a:	e7fd      	b.n	c218 <hal_system_reset+0x20>
    c21c:	e000ed00 	.word	0xe000ed00
    c220:	05fa0004 	.word	0x05fa0004

0000c224 <hal_system_clock_start>:
        }
    }
#endif

    /* Check if this clock source is already running */
    if ((NRF_CLOCK->LFCLKSTAT & regmsk) != regval) {
    c224:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    c228:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
    c22c:	4b0f      	ldr	r3, [pc, #60]	; (c26c <hal_system_clock_start+0x48>)
    c22e:	4013      	ands	r3, r2
    c230:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
    c234:	d018      	beq.n	c268 <hal_system_clock_start+0x44>
        NRF_CLOCK->TASKS_LFCLKSTOP = 1;
    c236:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    c23a:	2201      	movs	r2, #1
    c23c:	60da      	str	r2, [r3, #12]
        NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    c23e:	2100      	movs	r1, #0
    c240:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
        NRF_CLOCK->LFCLKSRC = clksrc;
    c244:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
        NRF_CLOCK->TASKS_LFCLKSTART = 1;
    c248:	609a      	str	r2, [r3, #8]

        /* Wait here till started! */
        while (1) {
            if (NRF_CLOCK->EVENTS_LFCLKSTARTED) {
    c24a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    c24e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    c252:	2b00      	cmp	r3, #0
    c254:	d0f9      	beq.n	c24a <hal_system_clock_start+0x26>
                if ((NRF_CLOCK->LFCLKSTAT & regmsk) == regval) {
    c256:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    c25a:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
    c25e:	4b03      	ldr	r3, [pc, #12]	; (c26c <hal_system_clock_start+0x48>)
    c260:	4013      	ands	r3, r2
    c262:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
    c266:	d1f0      	bne.n	c24a <hal_system_clock_start+0x26>
                }
            }
        }
    }
#endif
}
    c268:	4770      	bx	lr
    c26a:	bf00      	nop
    c26c:	00010003 	.word	0x00010003

0000c270 <errata_36>:
#endif

#ifdef NRF52840_XXAA
static bool errata_36(void)
{
	if ((*(uint32_t *)0x10000130ul == 0x8ul) &&
    c270:	4b06      	ldr	r3, [pc, #24]	; (c28c <errata_36+0x1c>)
    c272:	681b      	ldr	r3, [r3, #0]
    c274:	2b08      	cmp	r3, #8
    c276:	d001      	beq.n	c27c <errata_36+0xc>
			(*(uint32_t *)0x10000134ul == 0x0ul)) {
		return true;
	}

	return false;
    c278:	2000      	movs	r0, #0
    c27a:	4770      	bx	lr
			(*(uint32_t *)0x10000134ul == 0x0ul)) {
    c27c:	4b04      	ldr	r3, [pc, #16]	; (c290 <errata_36+0x20>)
    c27e:	681b      	ldr	r3, [r3, #0]
	if ((*(uint32_t *)0x10000130ul == 0x8ul) &&
    c280:	b10b      	cbz	r3, c286 <errata_36+0x16>
	return false;
    c282:	2000      	movs	r0, #0
    c284:	4770      	bx	lr
		return true;
    c286:	2001      	movs	r0, #1
}
    c288:	4770      	bx	lr
    c28a:	bf00      	nop
    c28c:	10000130 	.word	0x10000130
    c290:	10000134 	.word	0x10000134

0000c294 <errata_98>:


static bool errata_98(void)
{
	if ((*(uint32_t *)0x10000130ul == 0x8ul) &&
    c294:	4b06      	ldr	r3, [pc, #24]	; (c2b0 <errata_98+0x1c>)
    c296:	681b      	ldr	r3, [r3, #0]
    c298:	2b08      	cmp	r3, #8
    c29a:	d001      	beq.n	c2a0 <errata_98+0xc>
			(*(uint32_t *)0x10000134ul == 0x0ul)) {
		return true;
	}

	return false;
    c29c:	2000      	movs	r0, #0
    c29e:	4770      	bx	lr
			(*(uint32_t *)0x10000134ul == 0x0ul)) {
    c2a0:	4b04      	ldr	r3, [pc, #16]	; (c2b4 <errata_98+0x20>)
    c2a2:	681b      	ldr	r3, [r3, #0]
	if ((*(uint32_t *)0x10000130ul == 0x8ul) &&
    c2a4:	b10b      	cbz	r3, c2aa <errata_98+0x16>
	return false;
    c2a6:	2000      	movs	r0, #0
    c2a8:	4770      	bx	lr
		return true;
    c2aa:	2001      	movs	r0, #1
}
    c2ac:	4770      	bx	lr
    c2ae:	bf00      	nop
    c2b0:	10000130 	.word	0x10000130
    c2b4:	10000134 	.word	0x10000134

0000c2b8 <errata_103>:


static bool errata_103(void)
{
	if ((*(uint32_t *)0x10000130ul == 0x8ul) &&
    c2b8:	4b06      	ldr	r3, [pc, #24]	; (c2d4 <errata_103+0x1c>)
    c2ba:	681b      	ldr	r3, [r3, #0]
    c2bc:	2b08      	cmp	r3, #8
    c2be:	d001      	beq.n	c2c4 <errata_103+0xc>
			(*(uint32_t *)0x10000134ul == 0x0ul)) {
		return true;
	}

	return false;
    c2c0:	2000      	movs	r0, #0
    c2c2:	4770      	bx	lr
			(*(uint32_t *)0x10000134ul == 0x0ul)) {
    c2c4:	4b04      	ldr	r3, [pc, #16]	; (c2d8 <errata_103+0x20>)
    c2c6:	681b      	ldr	r3, [r3, #0]
	if ((*(uint32_t *)0x10000130ul == 0x8ul) &&
    c2c8:	b10b      	cbz	r3, c2ce <errata_103+0x16>
	return false;
    c2ca:	2000      	movs	r0, #0
    c2cc:	4770      	bx	lr
		return true;
    c2ce:	2001      	movs	r0, #1
}
    c2d0:	4770      	bx	lr
    c2d2:	bf00      	nop
    c2d4:	10000130 	.word	0x10000130
    c2d8:	10000134 	.word	0x10000134

0000c2dc <errata_115>:


static bool errata_115(void)
{
	if ((*(uint32_t *)0x10000130ul == 0x8ul) &&
    c2dc:	4b06      	ldr	r3, [pc, #24]	; (c2f8 <errata_115+0x1c>)
    c2de:	681b      	ldr	r3, [r3, #0]
    c2e0:	2b08      	cmp	r3, #8
    c2e2:	d001      	beq.n	c2e8 <errata_115+0xc>
			(*(uint32_t *)0x10000134ul == 0x0ul)) {
		return true;
	}

	return false;
    c2e4:	2000      	movs	r0, #0
    c2e6:	4770      	bx	lr
			(*(uint32_t *)0x10000134ul == 0x0ul)) {
    c2e8:	4b04      	ldr	r3, [pc, #16]	; (c2fc <errata_115+0x20>)
    c2ea:	681b      	ldr	r3, [r3, #0]
	if ((*(uint32_t *)0x10000130ul == 0x8ul) &&
    c2ec:	b10b      	cbz	r3, c2f2 <errata_115+0x16>
	return false;
    c2ee:	2000      	movs	r0, #0
    c2f0:	4770      	bx	lr
		return true;
    c2f2:	2001      	movs	r0, #1
}
    c2f4:	4770      	bx	lr
    c2f6:	bf00      	nop
    c2f8:	10000130 	.word	0x10000130
    c2fc:	10000134 	.word	0x10000134

0000c300 <errata_120>:


static bool errata_120(void)
{
	if ((*(uint32_t *)0x10000130ul == 0x8ul) &&
    c300:	4b06      	ldr	r3, [pc, #24]	; (c31c <errata_120+0x1c>)
    c302:	681b      	ldr	r3, [r3, #0]
    c304:	2b08      	cmp	r3, #8
    c306:	d001      	beq.n	c30c <errata_120+0xc>
			(*(uint32_t *)0x10000134ul == 0x0ul)) {
		return true;
	}

	return false;
    c308:	2000      	movs	r0, #0
    c30a:	4770      	bx	lr
			(*(uint32_t *)0x10000134ul == 0x0ul)) {
    c30c:	4b04      	ldr	r3, [pc, #16]	; (c320 <errata_120+0x20>)
    c30e:	681b      	ldr	r3, [r3, #0]
	if ((*(uint32_t *)0x10000130ul == 0x8ul) &&
    c310:	b10b      	cbz	r3, c316 <errata_120+0x16>
	return false;
    c312:	2000      	movs	r0, #0
    c314:	4770      	bx	lr
		return true;
    c316:	2001      	movs	r0, #1
}
    c318:	4770      	bx	lr
    c31a:	bf00      	nop
    c31c:	10000130 	.word	0x10000130
    c320:	10000134 	.word	0x10000134

0000c324 <errata_121>:

static bool errata_121(void)
{
	if ((*(uint32_t *)0x10000130ul == 0x8ul) &&
    c324:	4b06      	ldr	r3, [pc, #24]	; (c340 <errata_121+0x1c>)
    c326:	681b      	ldr	r3, [r3, #0]
    c328:	2b08      	cmp	r3, #8
    c32a:	d001      	beq.n	c330 <errata_121+0xc>
			(*(uint32_t *)0x10000134ul == 0x0ul)) {
		return true;
	}

	return false;
    c32c:	2000      	movs	r0, #0
    c32e:	4770      	bx	lr
			(*(uint32_t *)0x10000134ul == 0x0ul)) {
    c330:	4b04      	ldr	r3, [pc, #16]	; (c344 <errata_121+0x20>)
    c332:	681b      	ldr	r3, [r3, #0]
	if ((*(uint32_t *)0x10000130ul == 0x8ul) &&
    c334:	b10b      	cbz	r3, c33a <errata_121+0x16>
	return false;
    c336:	2000      	movs	r0, #0
    c338:	4770      	bx	lr
		return true;
    c33a:	2001      	movs	r0, #1
}
    c33c:	4770      	bx	lr
    c33e:	bf00      	nop
    c340:	10000130 	.word	0x10000130
    c344:	10000134 	.word	0x10000134

0000c348 <SystemCoreClockUpdate>:
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    c348:	4b01      	ldr	r3, [pc, #4]	; (c350 <SystemCoreClockUpdate+0x8>)
    c34a:	4a02      	ldr	r2, [pc, #8]	; (c354 <SystemCoreClockUpdate+0xc>)
    c34c:	601a      	str	r2, [r3, #0]
}
    c34e:	4770      	bx	lr
    c350:	2000010c 	.word	0x2000010c
    c354:	03d09000 	.word	0x03d09000

0000c358 <SystemInit>:
{
    c358:	b508      	push	{r3, lr}
        if (errata_36()){
    c35a:	f7ff ff89 	bl	c270 <errata_36>
    c35e:	b140      	cbz	r0, c372 <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    c360:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    c364:	2200      	movs	r2, #0
    c366:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    c36a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    c36e:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
        if (errata_98()){
    c372:	f7ff ff8f 	bl	c294 <errata_98>
    c376:	b110      	cbz	r0, c37e <SystemInit+0x26>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    c378:	4b2d      	ldr	r3, [pc, #180]	; (c430 <SystemInit+0xd8>)
    c37a:	4a2e      	ldr	r2, [pc, #184]	; (c434 <SystemInit+0xdc>)
    c37c:	601a      	str	r2, [r3, #0]
        if (errata_103()){
    c37e:	f7ff ff9b 	bl	c2b8 <errata_103>
    c382:	b118      	cbz	r0, c38c <SystemInit+0x34>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    c384:	4b2c      	ldr	r3, [pc, #176]	; (c438 <SystemInit+0xe0>)
    c386:	22fb      	movs	r2, #251	; 0xfb
    c388:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
        if (errata_115()){
    c38c:	f7ff ffa6 	bl	c2dc <errata_115>
    c390:	b148      	cbz	r0, c3a6 <SystemInit+0x4e>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    c392:	492a      	ldr	r1, [pc, #168]	; (c43c <SystemInit+0xe4>)
    c394:	680b      	ldr	r3, [r1, #0]
    c396:	f023 030f 	bic.w	r3, r3, #15
    c39a:	4a29      	ldr	r2, [pc, #164]	; (c440 <SystemInit+0xe8>)
    c39c:	6812      	ldr	r2, [r2, #0]
    c39e:	f002 020f 	and.w	r2, r2, #15
    c3a2:	4313      	orrs	r3, r2
    c3a4:	600b      	str	r3, [r1, #0]
        if (errata_120()){
    c3a6:	f7ff ffab 	bl	c300 <errata_120>
    c3aa:	b118      	cbz	r0, c3b4 <SystemInit+0x5c>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    c3ac:	4b25      	ldr	r3, [pc, #148]	; (c444 <SystemInit+0xec>)
    c3ae:	f44f 7200 	mov.w	r2, #512	; 0x200
    c3b2:	601a      	str	r2, [r3, #0]
        if (errata_121()){
    c3b4:	f7ff ffb6 	bl	c324 <errata_121>
    c3b8:	b110      	cbz	r0, c3c0 <SystemInit+0x68>
            *(volatile uint32_t *)0x40029600ul = 0x00040400ul;
    c3ba:	4b23      	ldr	r3, [pc, #140]	; (c448 <SystemInit+0xf0>)
    c3bc:	4a23      	ldr	r2, [pc, #140]	; (c44c <SystemInit+0xf4>)
    c3be:	601a      	str	r2, [r3, #0]
            if ((NRF_UICR->NFCPINS & UICR_NFCPINS_PROTECT_Msk) == (UICR_NFCPINS_PROTECT_NFC << UICR_NFCPINS_PROTECT_Pos)){
    c3c0:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    c3c4:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
    c3c8:	f013 0f01 	tst.w	r3, #1
    c3cc:	d104      	bne.n	c3d8 <SystemInit+0x80>
    SystemCoreClockUpdate();
    c3ce:	f7ff ffbb 	bl	c348 <SystemCoreClockUpdate>
    NVIC_Relocate();
    c3d2:	f000 fba3 	bl	cb1c <NVIC_Relocate>
}
    c3d6:	bd08      	pop	{r3, pc}
                NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
    c3d8:	4b1d      	ldr	r3, [pc, #116]	; (c450 <SystemInit+0xf8>)
    c3da:	2201      	movs	r2, #1
    c3dc:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
                while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    c3e0:	4b1b      	ldr	r3, [pc, #108]	; (c450 <SystemInit+0xf8>)
    c3e2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    c3e6:	2b00      	cmp	r3, #0
    c3e8:	d0fa      	beq.n	c3e0 <SystemInit+0x88>
                NRF_UICR->NFCPINS &= ~UICR_NFCPINS_PROTECT_Msk;
    c3ea:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
    c3ee:	f8d2 320c 	ldr.w	r3, [r2, #524]	; 0x20c
    c3f2:	f023 0301 	bic.w	r3, r3, #1
    c3f6:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
                while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    c3fa:	4b15      	ldr	r3, [pc, #84]	; (c450 <SystemInit+0xf8>)
    c3fc:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    c400:	2b00      	cmp	r3, #0
    c402:	d0fa      	beq.n	c3fa <SystemInit+0xa2>
                NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
    c404:	4b12      	ldr	r3, [pc, #72]	; (c450 <SystemInit+0xf8>)
    c406:	2200      	movs	r2, #0
    c408:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
                while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    c40c:	4b10      	ldr	r3, [pc, #64]	; (c450 <SystemInit+0xf8>)
    c40e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    c412:	2b00      	cmp	r3, #0
    c414:	d0fa      	beq.n	c40c <SystemInit+0xb4>
    c416:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    c41a:	490e      	ldr	r1, [pc, #56]	; (c454 <SystemInit+0xfc>)
    c41c:	68ca      	ldr	r2, [r1, #12]
    c41e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    c422:	4b0d      	ldr	r3, [pc, #52]	; (c458 <SystemInit+0x100>)
    c424:	4313      	orrs	r3, r2
    c426:	60cb      	str	r3, [r1, #12]
    c428:	f3bf 8f4f 	dsb	sy
    __NOP();
    c42c:	bf00      	nop
    c42e:	e7fd      	b.n	c42c <SystemInit+0xd4>
    c430:	4000568c 	.word	0x4000568c
    c434:	00038148 	.word	0x00038148
    c438:	4000f000 	.word	0x4000f000
    c43c:	40000ee4 	.word	0x40000ee4
    c440:	10000258 	.word	0x10000258
    c444:	40029640 	.word	0x40029640
    c448:	40029600 	.word	0x40029600
    c44c:	00040400 	.word	0x00040400
    c450:	4001e000 	.word	0x4001e000
    c454:	e000ed00 	.word	0xe000ed00
    c458:	05fa0004 	.word	0x05fa0004

0000c45c <_start>:

/*
 * Rudimentary startup function.
 */
void _start(void)
{
    c45c:	b508      	push	{r3, lr}
    int rc;

    rc = main(0, NULL);
    exit(rc);
#else
    os_init(main);
    c45e:	4803      	ldr	r0, [pc, #12]	; (c46c <_start+0x10>)
    c460:	f000 fc80 	bl	cd64 <os_init>
    os_start();
    c464:	f000 fce6 	bl	ce34 <os_start>
#endif
}
    c468:	bd08      	pop	{r3, pc}
    c46a:	bf00      	nop
    c46c:	0000c7e5 	.word	0x0000c7e5

0000c470 <_init>:

void
_init(void)
{
}
    c470:	4770      	bx	lr
	...

0000c474 <bleprph_on_reset>:
    return 0;
}

static void
bleprph_on_reset(int reason)
{
    c474:	b508      	push	{r3, lr}
    MODLOG_DFLT(ERROR, "Resetting state; reason=%d\n", reason);
    c476:	4603      	mov	r3, r0
    c478:	4a02      	ldr	r2, [pc, #8]	; (c484 <bleprph_on_reset+0x10>)
    c47a:	2103      	movs	r1, #3
    c47c:	2000      	movs	r0, #0
    c47e:	f005 f92f 	bl	116e0 <modlog_printf>
}
    c482:	bd08      	pop	{r3, pc}
    c484:	00031500 	.word	0x00031500

0000c488 <bleprph_advertise>:
{
    c488:	b500      	push	{lr}
    c48a:	b09f      	sub	sp, #124	; 0x7c
    rc = ble_hs_id_infer_auto(0, &own_addr_type);
    c48c:	f10d 0173 	add.w	r1, sp, #115	; 0x73
    c490:	2000      	movs	r0, #0
    c492:	f019 f85b 	bl	2554c <ble_hs_id_infer_auto>
    if (rc != 0) {
    c496:	b140      	cbz	r0, c4aa <bleprph_advertise+0x22>
    c498:	4603      	mov	r3, r0
        MODLOG_DFLT(ERROR, "error determining address type; rc=%d\n", rc);
    c49a:	4a28      	ldr	r2, [pc, #160]	; (c53c <bleprph_advertise+0xb4>)
    c49c:	2103      	movs	r1, #3
    c49e:	2000      	movs	r0, #0
    c4a0:	f005 f91e 	bl	116e0 <modlog_printf>
}
    c4a4:	b01f      	add	sp, #124	; 0x7c
    c4a6:	f85d fb04 	ldr.w	pc, [sp], #4
    memset(&fields, 0, sizeof fields);
    c4aa:	2260      	movs	r2, #96	; 0x60
    c4ac:	2100      	movs	r1, #0
    c4ae:	a802      	add	r0, sp, #8
    c4b0:	f002 fa9e 	bl	e9f0 <memset>
    fields.flags = BLE_HS_ADV_F_DISC_GEN |
    c4b4:	2306      	movs	r3, #6
    c4b6:	f88d 3008 	strb.w	r3, [sp, #8]
    fields.tx_pwr_lvl_is_present = 1;
    c4ba:	2301      	movs	r3, #1
    c4bc:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
    fields.tx_pwr_lvl = BLE_HS_ADV_TX_PWR_LVL_AUTO;
    c4c0:	2380      	movs	r3, #128	; 0x80
    c4c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    fields.name = (uint8_t *)name;
    c4c6:	4b1e      	ldr	r3, [pc, #120]	; (c540 <bleprph_advertise+0xb8>)
    c4c8:	9309      	str	r3, [sp, #36]	; 0x24
    fields.name_len = strlen(name);
    c4ca:	230a      	movs	r3, #10
    c4cc:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    fields.name_is_complete = 1;
    c4d0:	2301      	movs	r3, #1
    c4d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    fields.uuids16 = (ble_uuid16_t[]){
    c4d6:	4b1b      	ldr	r3, [pc, #108]	; (c544 <bleprph_advertise+0xbc>)
    c4d8:	681a      	ldr	r2, [r3, #0]
    c4da:	ab1e      	add	r3, sp, #120	; 0x78
    c4dc:	f843 2d04 	str.w	r2, [r3, #-4]!
    c4e0:	9303      	str	r3, [sp, #12]
    fields.num_uuids16 = 1;
    c4e2:	2301      	movs	r3, #1
    c4e4:	f88d 3010 	strb.w	r3, [sp, #16]
    fields.uuids16_is_complete = 1;
    c4e8:	f88d 3011 	strb.w	r3, [sp, #17]
    rc = ble_gap_adv_set_fields(&fields);
    c4ec:	a802      	add	r0, sp, #8
    c4ee:	f014 fc21 	bl	20d34 <ble_gap_adv_set_fields>
    if (rc != 0) {
    c4f2:	4603      	mov	r3, r0
    c4f4:	b128      	cbz	r0, c502 <bleprph_advertise+0x7a>
        MODLOG_DFLT(ERROR, "error setting advertisement data; rc=%d\n", rc);
    c4f6:	4a14      	ldr	r2, [pc, #80]	; (c548 <bleprph_advertise+0xc0>)
    c4f8:	2103      	movs	r1, #3
    c4fa:	2000      	movs	r0, #0
    c4fc:	f005 f8f0 	bl	116e0 <modlog_printf>
        return;
    c500:	e7d0      	b.n	c4a4 <bleprph_advertise+0x1c>
    memset(&adv_params, 0, sizeof adv_params);
    c502:	2100      	movs	r1, #0
    c504:	f8cd 106a 	str.w	r1, [sp, #106]	; 0x6a
    c508:	f8cd 106e 	str.w	r1, [sp, #110]	; 0x6e
    adv_params.conn_mode = BLE_GAP_CONN_MODE_UND;
    c50c:	2302      	movs	r3, #2
    c50e:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
    adv_params.disc_mode = BLE_GAP_DISC_MODE_GEN;
    c512:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
    rc = ble_gap_adv_start(own_addr_type, NULL, BLE_HS_FOREVER,
    c516:	f89d 0073 	ldrb.w	r0, [sp, #115]	; 0x73
    c51a:	9101      	str	r1, [sp, #4]
    c51c:	4b0b      	ldr	r3, [pc, #44]	; (c54c <bleprph_advertise+0xc4>)
    c51e:	9300      	str	r3, [sp, #0]
    c520:	ab1a      	add	r3, sp, #104	; 0x68
    c522:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    c526:	f014 fb53 	bl	20bd0 <ble_gap_adv_start>
    if (rc != 0) {
    c52a:	4603      	mov	r3, r0
    c52c:	2800      	cmp	r0, #0
    c52e:	d0b9      	beq.n	c4a4 <bleprph_advertise+0x1c>
        MODLOG_DFLT(ERROR, "error enabling advertisement; rc=%d\n", rc);
    c530:	4a07      	ldr	r2, [pc, #28]	; (c550 <bleprph_advertise+0xc8>)
    c532:	2103      	movs	r1, #3
    c534:	2000      	movs	r0, #0
    c536:	f005 f8d3 	bl	116e0 <modlog_printf>
        return;
    c53a:	e7b3      	b.n	c4a4 <bleprph_advertise+0x1c>
    c53c:	00031340 	.word	0x00031340
    c540:	00031368 	.word	0x00031368
    c544:	0003133c 	.word	0x0003133c
    c548:	00031374 	.word	0x00031374
    c54c:	0000c611 	.word	0x0000c611
    c550:	000313a0 	.word	0x000313a0

0000c554 <bleprph_on_sync>:

static void
bleprph_on_sync(void)
{
    c554:	b508      	push	{r3, lr}
    int rc;

    /* Make sure we have proper identity address set (public preferred) */
    rc = ble_hs_util_ensure_addr(0);
    c556:	2000      	movs	r0, #0
    c558:	f01d fdda 	bl	2a110 <ble_hs_util_ensure_addr>
    assert(rc == 0);
    c55c:	b910      	cbnz	r0, c564 <bleprph_on_sync+0x10>

    /* Begin advertising. */
    bleprph_advertise();
    c55e:	f7ff ff93 	bl	c488 <bleprph_advertise>
}
    c562:	bd08      	pop	{r3, pc}
    assert(rc == 0);
    c564:	f7ff fe40 	bl	c1e8 <hal_debugger_connected>
    c568:	b100      	cbz	r0, c56c <bleprph_on_sync+0x18>
    c56a:	be01      	bkpt	0x0001
    c56c:	2300      	movs	r3, #0
    c56e:	461a      	mov	r2, r3
    c570:	4619      	mov	r1, r3
    c572:	4618      	mov	r0, r3
    c574:	f000 faec 	bl	cb50 <__assert_func>

0000c578 <bleprph_print_conn_desc>:
{
    c578:	b530      	push	{r4, r5, lr}
    c57a:	b087      	sub	sp, #28
    c57c:	4604      	mov	r4, r0
    MODLOG_DFLT(INFO, "handle=%d our_ota_addr_type=%d our_ota_addr=",
    c57e:	8c03      	ldrh	r3, [r0, #32]
    c580:	7c82      	ldrb	r2, [r0, #18]
    c582:	9200      	str	r2, [sp, #0]
    c584:	4a1d      	ldr	r2, [pc, #116]	; (c5fc <bleprph_print_conn_desc+0x84>)
    c586:	2101      	movs	r1, #1
    c588:	2000      	movs	r0, #0
    c58a:	f005 f8a9 	bl	116e0 <modlog_printf>
    print_addr(desc->our_ota_addr.val);
    c58e:	f104 0013 	add.w	r0, r4, #19
    c592:	f000 f963 	bl	c85c <print_addr>
    MODLOG_DFLT(INFO, " our_id_addr_type=%d our_id_addr=",
    c596:	7923      	ldrb	r3, [r4, #4]
    c598:	4a19      	ldr	r2, [pc, #100]	; (c600 <bleprph_print_conn_desc+0x88>)
    c59a:	2101      	movs	r1, #1
    c59c:	2000      	movs	r0, #0
    c59e:	f005 f89f 	bl	116e0 <modlog_printf>
    print_addr(desc->our_id_addr.val);
    c5a2:	1d60      	adds	r0, r4, #5
    c5a4:	f000 f95a 	bl	c85c <print_addr>
    MODLOG_DFLT(INFO, " peer_ota_addr_type=%d peer_ota_addr=",
    c5a8:	7e63      	ldrb	r3, [r4, #25]
    c5aa:	4a16      	ldr	r2, [pc, #88]	; (c604 <bleprph_print_conn_desc+0x8c>)
    c5ac:	2101      	movs	r1, #1
    c5ae:	2000      	movs	r0, #0
    c5b0:	f005 f896 	bl	116e0 <modlog_printf>
    print_addr(desc->peer_ota_addr.val);
    c5b4:	f104 001a 	add.w	r0, r4, #26
    c5b8:	f000 f950 	bl	c85c <print_addr>
    MODLOG_DFLT(INFO, " peer_id_addr_type=%d peer_id_addr=",
    c5bc:	7ae3      	ldrb	r3, [r4, #11]
    c5be:	4a12      	ldr	r2, [pc, #72]	; (c608 <bleprph_print_conn_desc+0x90>)
    c5c0:	2101      	movs	r1, #1
    c5c2:	2000      	movs	r0, #0
    c5c4:	f005 f88c 	bl	116e0 <modlog_printf>
    print_addr(desc->peer_id_addr.val);
    c5c8:	f104 000c 	add.w	r0, r4, #12
    c5cc:	f000 f946 	bl	c85c <print_addr>
    MODLOG_DFLT(INFO, " conn_itvl=%d conn_latency=%d supervision_timeout=%d "
    c5d0:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    c5d2:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
    c5d4:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
    c5d6:	7822      	ldrb	r2, [r4, #0]
    c5d8:	f002 0401 	and.w	r4, r2, #1
    c5dc:	f3c2 0540 	ubfx	r5, r2, #1, #1
    c5e0:	f3c2 0280 	ubfx	r2, r2, #2, #1
    c5e4:	9204      	str	r2, [sp, #16]
    c5e6:	9503      	str	r5, [sp, #12]
    c5e8:	9402      	str	r4, [sp, #8]
    c5ea:	9001      	str	r0, [sp, #4]
    c5ec:	9100      	str	r1, [sp, #0]
    c5ee:	4a07      	ldr	r2, [pc, #28]	; (c60c <bleprph_print_conn_desc+0x94>)
    c5f0:	2101      	movs	r1, #1
    c5f2:	2000      	movs	r0, #0
    c5f4:	f005 f874 	bl	116e0 <modlog_printf>
}
    c5f8:	b007      	add	sp, #28
    c5fa:	bd30      	pop	{r4, r5, pc}
    c5fc:	0003151c 	.word	0x0003151c
    c600:	0003154c 	.word	0x0003154c
    c604:	00031570 	.word	0x00031570
    c608:	00031598 	.word	0x00031598
    c60c:	000315bc 	.word	0x000315bc

0000c610 <bleprph_gap_event>:
{
    c610:	b570      	push	{r4, r5, r6, lr}
    c612:	b092      	sub	sp, #72	; 0x48
    c614:	4604      	mov	r4, r0
    switch (event->type) {
    c616:	7803      	ldrb	r3, [r0, #0]
    c618:	2b11      	cmp	r3, #17
    c61a:	f200 80cc 	bhi.w	c7b6 <bleprph_gap_event+0x1a6>
    c61e:	e8df f003 	tbb	[pc, r3]
    c622:	3309      	.short	0x3309
    c624:	caca48ca 	.word	0xcaca48ca
    c628:	67cacaca 	.word	0x67cacaca
    c62c:	cacaca71 	.word	0xcacaca71
    c630:	b5caa990 	.word	0xb5caa990
        MODLOG_DFLT(INFO, "connection %s; status=%d ",
    c634:	6842      	ldr	r2, [r0, #4]
    c636:	b9da      	cbnz	r2, c670 <bleprph_gap_event+0x60>
    c638:	4b60      	ldr	r3, [pc, #384]	; (c7bc <bleprph_gap_event+0x1ac>)
    c63a:	9200      	str	r2, [sp, #0]
    c63c:	4a60      	ldr	r2, [pc, #384]	; (c7c0 <bleprph_gap_event+0x1b0>)
    c63e:	2101      	movs	r1, #1
    c640:	2000      	movs	r0, #0
    c642:	f005 f84d 	bl	116e0 <modlog_printf>
        if (event->connect.status == 0) {
    c646:	6863      	ldr	r3, [r4, #4]
    c648:	b93b      	cbnz	r3, c65a <bleprph_gap_event+0x4a>
            rc = ble_gap_conn_find(event->connect.conn_handle, &desc);
    c64a:	a907      	add	r1, sp, #28
    c64c:	8920      	ldrh	r0, [r4, #8]
    c64e:	f014 fa57 	bl	20b00 <ble_gap_conn_find>
            assert(rc == 0);
    c652:	b978      	cbnz	r0, c674 <bleprph_gap_event+0x64>
            bleprph_print_conn_desc(&desc);
    c654:	a807      	add	r0, sp, #28
    c656:	f7ff ff8f 	bl	c578 <bleprph_print_conn_desc>
        MODLOG_DFLT(INFO, "\n");
    c65a:	4a5a      	ldr	r2, [pc, #360]	; (c7c4 <bleprph_gap_event+0x1b4>)
    c65c:	2101      	movs	r1, #1
    c65e:	2000      	movs	r0, #0
    c660:	f005 f83e 	bl	116e0 <modlog_printf>
        if (event->connect.status != 0) {
    c664:	6864      	ldr	r4, [r4, #4]
    c666:	b30c      	cbz	r4, c6ac <bleprph_gap_event+0x9c>
            bleprph_advertise();
    c668:	f7ff ff0e 	bl	c488 <bleprph_advertise>
        return 0;
    c66c:	2400      	movs	r4, #0
    c66e:	e01d      	b.n	c6ac <bleprph_gap_event+0x9c>
        MODLOG_DFLT(INFO, "connection %s; status=%d ",
    c670:	4b55      	ldr	r3, [pc, #340]	; (c7c8 <bleprph_gap_event+0x1b8>)
    c672:	e7e2      	b.n	c63a <bleprph_gap_event+0x2a>
            assert(rc == 0);
    c674:	f7ff fdb8 	bl	c1e8 <hal_debugger_connected>
    c678:	b100      	cbz	r0, c67c <bleprph_gap_event+0x6c>
    c67a:	be01      	bkpt	0x0001
    c67c:	2300      	movs	r3, #0
    c67e:	461a      	mov	r2, r3
    c680:	4619      	mov	r1, r3
    c682:	4618      	mov	r0, r3
    c684:	f000 fa64 	bl	cb50 <__assert_func>
        MODLOG_DFLT(INFO, "disconnect; reason=%d ", event->disconnect.reason);
    c688:	6843      	ldr	r3, [r0, #4]
    c68a:	4a50      	ldr	r2, [pc, #320]	; (c7cc <bleprph_gap_event+0x1bc>)
    c68c:	2101      	movs	r1, #1
    c68e:	2000      	movs	r0, #0
    c690:	f005 f826 	bl	116e0 <modlog_printf>
        bleprph_print_conn_desc(&event->disconnect.conn);
    c694:	f104 0008 	add.w	r0, r4, #8
    c698:	f7ff ff6e 	bl	c578 <bleprph_print_conn_desc>
        MODLOG_DFLT(INFO, "\n");
    c69c:	4a49      	ldr	r2, [pc, #292]	; (c7c4 <bleprph_gap_event+0x1b4>)
    c69e:	2101      	movs	r1, #1
    c6a0:	2000      	movs	r0, #0
    c6a2:	f005 f81d 	bl	116e0 <modlog_printf>
        bleprph_advertise();
    c6a6:	f7ff feef 	bl	c488 <bleprph_advertise>
        return 0;
    c6aa:	2400      	movs	r4, #0
}
    c6ac:	4620      	mov	r0, r4
    c6ae:	b012      	add	sp, #72	; 0x48
    c6b0:	bd70      	pop	{r4, r5, r6, pc}
        MODLOG_DFLT(INFO, "connection updated; status=%d ",
    c6b2:	6843      	ldr	r3, [r0, #4]
    c6b4:	4a46      	ldr	r2, [pc, #280]	; (c7d0 <bleprph_gap_event+0x1c0>)
    c6b6:	2101      	movs	r1, #1
    c6b8:	2000      	movs	r0, #0
    c6ba:	f005 f811 	bl	116e0 <modlog_printf>
        rc = ble_gap_conn_find(event->conn_update.conn_handle, &desc);
    c6be:	a907      	add	r1, sp, #28
    c6c0:	8920      	ldrh	r0, [r4, #8]
    c6c2:	f014 fa1d 	bl	20b00 <ble_gap_conn_find>
        assert(rc == 0);
    c6c6:	4604      	mov	r4, r0
    c6c8:	b940      	cbnz	r0, c6dc <bleprph_gap_event+0xcc>
        bleprph_print_conn_desc(&desc);
    c6ca:	a807      	add	r0, sp, #28
    c6cc:	f7ff ff54 	bl	c578 <bleprph_print_conn_desc>
        MODLOG_DFLT(INFO, "\n");
    c6d0:	4a3c      	ldr	r2, [pc, #240]	; (c7c4 <bleprph_gap_event+0x1b4>)
    c6d2:	2101      	movs	r1, #1
    c6d4:	2000      	movs	r0, #0
    c6d6:	f005 f803 	bl	116e0 <modlog_printf>
        return 0;
    c6da:	e7e7      	b.n	c6ac <bleprph_gap_event+0x9c>
        assert(rc == 0);
    c6dc:	f7ff fd84 	bl	c1e8 <hal_debugger_connected>
    c6e0:	b100      	cbz	r0, c6e4 <bleprph_gap_event+0xd4>
    c6e2:	be01      	bkpt	0x0001
    c6e4:	2300      	movs	r3, #0
    c6e6:	461a      	mov	r2, r3
    c6e8:	4619      	mov	r1, r3
    c6ea:	4618      	mov	r0, r3
    c6ec:	f000 fa30 	bl	cb50 <__assert_func>
        MODLOG_DFLT(INFO, "advertise complete; reason=%d",
    c6f0:	6843      	ldr	r3, [r0, #4]
    c6f2:	4a38      	ldr	r2, [pc, #224]	; (c7d4 <bleprph_gap_event+0x1c4>)
    c6f4:	2101      	movs	r1, #1
    c6f6:	2000      	movs	r0, #0
    c6f8:	f004 fff2 	bl	116e0 <modlog_printf>
        bleprph_advertise();
    c6fc:	f7ff fec4 	bl	c488 <bleprph_advertise>
        return 0;
    c700:	2400      	movs	r4, #0
    c702:	e7d3      	b.n	c6ac <bleprph_gap_event+0x9c>
        MODLOG_DFLT(INFO, "encryption change event; status=%d ",
    c704:	6843      	ldr	r3, [r0, #4]
    c706:	4a34      	ldr	r2, [pc, #208]	; (c7d8 <bleprph_gap_event+0x1c8>)
    c708:	2101      	movs	r1, #1
    c70a:	2000      	movs	r0, #0
    c70c:	f004 ffe8 	bl	116e0 <modlog_printf>
        rc = ble_gap_conn_find(event->connect.conn_handle, &desc);
    c710:	a907      	add	r1, sp, #28
    c712:	8920      	ldrh	r0, [r4, #8]
    c714:	f014 f9f4 	bl	20b00 <ble_gap_conn_find>
        assert(rc == 0);
    c718:	4604      	mov	r4, r0
    c71a:	b940      	cbnz	r0, c72e <bleprph_gap_event+0x11e>
        bleprph_print_conn_desc(&desc);
    c71c:	a807      	add	r0, sp, #28
    c71e:	f7ff ff2b 	bl	c578 <bleprph_print_conn_desc>
        MODLOG_DFLT(INFO, "\n");
    c722:	4a28      	ldr	r2, [pc, #160]	; (c7c4 <bleprph_gap_event+0x1b4>)
    c724:	2101      	movs	r1, #1
    c726:	2000      	movs	r0, #0
    c728:	f004 ffda 	bl	116e0 <modlog_printf>
        return 0;
    c72c:	e7be      	b.n	c6ac <bleprph_gap_event+0x9c>
        assert(rc == 0);
    c72e:	f7ff fd5b 	bl	c1e8 <hal_debugger_connected>
    c732:	b100      	cbz	r0, c736 <bleprph_gap_event+0x126>
    c734:	be01      	bkpt	0x0001
    c736:	2300      	movs	r3, #0
    c738:	461a      	mov	r2, r3
    c73a:	4619      	mov	r1, r3
    c73c:	4618      	mov	r0, r3
    c73e:	f000 fa07 	bl	cb50 <__assert_func>
        MODLOG_DFLT(INFO, "subscribe event; conn_handle=%d attr_handle=%d "
    c742:	8883      	ldrh	r3, [r0, #4]
    c744:	88c1      	ldrh	r1, [r0, #6]
    c746:	7a00      	ldrb	r0, [r0, #8]
    c748:	7a62      	ldrb	r2, [r4, #9]
    c74a:	f002 0401 	and.w	r4, r2, #1
    c74e:	f3c2 0540 	ubfx	r5, r2, #1, #1
    c752:	f3c2 0680 	ubfx	r6, r2, #2, #1
    c756:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    c75a:	9205      	str	r2, [sp, #20]
    c75c:	9604      	str	r6, [sp, #16]
    c75e:	9503      	str	r5, [sp, #12]
    c760:	9402      	str	r4, [sp, #8]
    c762:	9001      	str	r0, [sp, #4]
    c764:	9100      	str	r1, [sp, #0]
    c766:	4a1d      	ldr	r2, [pc, #116]	; (c7dc <bleprph_gap_event+0x1cc>)
    c768:	2101      	movs	r1, #1
    c76a:	2000      	movs	r0, #0
    c76c:	f004 ffb8 	bl	116e0 <modlog_printf>
        return 0;
    c770:	2400      	movs	r4, #0
    c772:	e79b      	b.n	c6ac <bleprph_gap_event+0x9c>
        MODLOG_DFLT(INFO, "mtu update event; conn_handle=%d cid=%d mtu=%d\n",
    c774:	8883      	ldrh	r3, [r0, #4]
    c776:	88c2      	ldrh	r2, [r0, #6]
    c778:	8901      	ldrh	r1, [r0, #8]
    c77a:	9101      	str	r1, [sp, #4]
    c77c:	9200      	str	r2, [sp, #0]
    c77e:	4a18      	ldr	r2, [pc, #96]	; (c7e0 <bleprph_gap_event+0x1d0>)
    c780:	2101      	movs	r1, #1
    c782:	2000      	movs	r0, #0
    c784:	f004 ffac 	bl	116e0 <modlog_printf>
        return 0;
    c788:	2400      	movs	r4, #0
    c78a:	e78f      	b.n	c6ac <bleprph_gap_event+0x9c>
        rc = ble_gap_conn_find(event->repeat_pairing.conn_handle, &desc);
    c78c:	a907      	add	r1, sp, #28
    c78e:	8880      	ldrh	r0, [r0, #4]
    c790:	f014 f9b6 	bl	20b00 <ble_gap_conn_find>
        assert(rc == 0);
    c794:	b928      	cbnz	r0, c7a2 <bleprph_gap_event+0x192>
        ble_store_util_delete_peer(&desc.peer_id_addr);
    c796:	f10d 0027 	add.w	r0, sp, #39	; 0x27
    c79a:	f01c fa15 	bl	28bc8 <ble_store_util_delete_peer>
        return BLE_GAP_REPEAT_PAIRING_RETRY;
    c79e:	2401      	movs	r4, #1
    c7a0:	e784      	b.n	c6ac <bleprph_gap_event+0x9c>
        assert(rc == 0);
    c7a2:	f7ff fd21 	bl	c1e8 <hal_debugger_connected>
    c7a6:	b100      	cbz	r0, c7aa <bleprph_gap_event+0x19a>
    c7a8:	be01      	bkpt	0x0001
    c7aa:	2300      	movs	r3, #0
    c7ac:	461a      	mov	r2, r3
    c7ae:	4619      	mov	r1, r3
    c7b0:	4618      	mov	r0, r3
    c7b2:	f000 f9cd 	bl	cb50 <__assert_func>
    return 0;
    c7b6:	2400      	movs	r4, #0
    c7b8:	e778      	b.n	c6ac <bleprph_gap_event+0x9c>
    c7ba:	bf00      	nop
    c7bc:	000313c8 	.word	0x000313c8
    c7c0:	000313dc 	.word	0x000313dc
    c7c4:	000324e4 	.word	0x000324e4
    c7c8:	000313d4 	.word	0x000313d4
    c7cc:	000313f8 	.word	0x000313f8
    c7d0:	00031410 	.word	0x00031410
    c7d4:	00031430 	.word	0x00031430
    c7d8:	00031450 	.word	0x00031450
    c7dc:	00031474 	.word	0x00031474
    c7e0:	000314d0 	.word	0x000314d0

0000c7e4 <main>:
 *
 * @return int NOTE: this function should never return!
 */
int
main(void)
{
    c7e4:	b510      	push	{r4, lr}
    c7e6:	b082      	sub	sp, #8
    static char ver_str[IMGMGR_NMGR_MAX_VER];
#endif
    int rc;

    /* Initialize OS */
    sysinit();
    c7e8:	f005 fd0e 	bl	12208 <sysinit_start>
    c7ec:	f000 f916 	bl	ca1c <sysinit_app>
    c7f0:	f005 fd10 	bl	12214 <sysinit_end>

    /* Initialize the NimBLE host configuration. */
    ble_hs_cfg.reset_cb = bleprph_on_reset;
    c7f4:	4b13      	ldr	r3, [pc, #76]	; (c844 <main+0x60>)
    c7f6:	4a14      	ldr	r2, [pc, #80]	; (c848 <main+0x64>)
    c7f8:	60da      	str	r2, [r3, #12]
    ble_hs_cfg.sync_cb = bleprph_on_sync;
    c7fa:	4a14      	ldr	r2, [pc, #80]	; (c84c <main+0x68>)
    c7fc:	611a      	str	r2, [r3, #16]
    ble_hs_cfg.gatts_register_cb = gatt_svr_register_cb;
    c7fe:	4a14      	ldr	r2, [pc, #80]	; (c850 <main+0x6c>)
    c800:	601a      	str	r2, [r3, #0]
    ble_hs_cfg.store_status_cb = ble_store_util_status_rr;
    c802:	4a14      	ldr	r2, [pc, #80]	; (c854 <main+0x70>)
    c804:	621a      	str	r2, [r3, #32]

    rc = gatt_svr_init();
    c806:	f000 f8f9 	bl	c9fc <gatt_svr_init>
    assert(rc == 0);
    c80a:	b148      	cbz	r0, c820 <main+0x3c>
    c80c:	f7ff fcec 	bl	c1e8 <hal_debugger_connected>
    c810:	b100      	cbz	r0, c814 <main+0x30>
    c812:	be01      	bkpt	0x0001
    c814:	2300      	movs	r3, #0
    c816:	461a      	mov	r2, r3
    c818:	4619      	mov	r1, r3
    c81a:	4618      	mov	r0, r3
    c81c:	f000 f998 	bl	cb50 <__assert_func>

#if MYNEWT_VAL(BLE_SVC_DIS_FIRMWARE_REVISION_READ_PERM) >= 0
    /* Set firmware version in DIS */
    imgr_my_version(&ver);
    c820:	4668      	mov	r0, sp
    c822:	f002 f963 	bl	eaec <imgr_my_version>
    imgr_ver_str(&ver, ver_str);
    c826:	4c0c      	ldr	r4, [pc, #48]	; (c858 <main+0x74>)
    c828:	4621      	mov	r1, r4
    c82a:	4668      	mov	r0, sp
    c82c:	f002 f9d2 	bl	ebd4 <imgr_ver_str>
    ble_svc_dis_firmware_revision_set(ver_str);
    c830:	4620      	mov	r0, r4
    c832:	f01c ff61 	bl	296f8 <ble_svc_dis_firmware_revision_set>

#if MYNEWT_VAL(BLEPRPH_LE_PHY_SUPPORT)
    phy_init();
#endif

    conf_load();
    c836:	f002 fc7f 	bl	f138 <conf_load>

    /*
     * As the last thing, process events from default event queue.
     */
    while (1) {
        os_eventq_run(os_eventq_dflt_get());
    c83a:	f000 fd6f 	bl	d31c <os_eventq_dflt_get>
    c83e:	f000 fd3c 	bl	d2ba <os_eventq_run>
    c842:	e7fa      	b.n	c83a <main+0x56>
    c844:	200002c8 	.word	0x200002c8
    c848:	0000c475 	.word	0x0000c475
    c84c:	0000c555 	.word	0x0000c555
    c850:	0000c96d 	.word	0x0000c96d
    c854:	00028c45 	.word	0x00028c45
    c858:	20000580 	.word	0x20000580

0000c85c <print_addr>:
    }
}

void
print_addr(const void *addr)
{
    c85c:	b530      	push	{r4, r5, lr}
    c85e:	b087      	sub	sp, #28
    const uint8_t *u8p;

    u8p = addr;
    MODLOG_DFLT(INFO, "%02x:%02x:%02x:%02x:%02x:%02x",
    c860:	7943      	ldrb	r3, [r0, #5]
    c862:	7902      	ldrb	r2, [r0, #4]
    c864:	78c1      	ldrb	r1, [r0, #3]
    c866:	7884      	ldrb	r4, [r0, #2]
    c868:	7845      	ldrb	r5, [r0, #1]
    c86a:	7800      	ldrb	r0, [r0, #0]
    c86c:	9004      	str	r0, [sp, #16]
    c86e:	9503      	str	r5, [sp, #12]
    c870:	9402      	str	r4, [sp, #8]
    c872:	9101      	str	r1, [sp, #4]
    c874:	9200      	str	r2, [sp, #0]
    c876:	4a03      	ldr	r2, [pc, #12]	; (c884 <print_addr+0x28>)
    c878:	2101      	movs	r1, #1
    c87a:	2000      	movs	r0, #0
    c87c:	f004 ff30 	bl	116e0 <modlog_printf>
                u8p[5], u8p[4], u8p[3], u8p[2], u8p[1], u8p[0]);
}
    c880:	b007      	add	sp, #28
    c882:	bd30      	pop	{r4, r5, pc}
    c884:	0003161c 	.word	0x0003161c

0000c888 <gatt_svr_chr_write>:
};

static int
gatt_svr_chr_write(struct os_mbuf *om, uint16_t min_len, uint16_t max_len,
                   void *dst, uint16_t *len)
{
    c888:	b510      	push	{r4, lr}
    uint16_t om_len;
    int rc;

    om_len = OS_MBUF_PKTLEN(om);
    c88a:	8a04      	ldrh	r4, [r0, #16]
    if (om_len < min_len || om_len > max_len) {
    c88c:	428c      	cmp	r4, r1
    c88e:	d309      	bcc.n	c8a4 <gatt_svr_chr_write+0x1c>
    c890:	4294      	cmp	r4, r2
    c892:	d809      	bhi.n	c8a8 <gatt_svr_chr_write+0x20>
    c894:	4619      	mov	r1, r3
        return BLE_ATT_ERR_INVALID_ATTR_VALUE_LEN;
    }

    rc = ble_hs_mbuf_to_flat(om, dst, max_len, len);
    c896:	9b02      	ldr	r3, [sp, #8]
    c898:	f018 fec4 	bl	25624 <ble_hs_mbuf_to_flat>
    if (rc != 0) {
    c89c:	4603      	mov	r3, r0
    c89e:	b120      	cbz	r0, c8aa <gatt_svr_chr_write+0x22>
        return BLE_ATT_ERR_UNLIKELY;
    c8a0:	230e      	movs	r3, #14
    c8a2:	e002      	b.n	c8aa <gatt_svr_chr_write+0x22>
        return BLE_ATT_ERR_INVALID_ATTR_VALUE_LEN;
    c8a4:	230d      	movs	r3, #13
    c8a6:	e000      	b.n	c8aa <gatt_svr_chr_write+0x22>
    c8a8:	230d      	movs	r3, #13
    }

    return 0;
}
    c8aa:	4618      	mov	r0, r3
    c8ac:	bd10      	pop	{r4, pc}
	...

0000c8b0 <gatt_svr_chr_access_sec_test>:

static int
gatt_svr_chr_access_sec_test(uint16_t conn_handle, uint16_t attr_handle,
                             struct ble_gatt_access_ctxt *ctxt,
                             void *arg)
{
    c8b0:	b530      	push	{r4, r5, lr}
    c8b2:	b085      	sub	sp, #20
    c8b4:	4614      	mov	r4, r2
    const ble_uuid_t *uuid;
    int rand_num;
    int rc;

    uuid = ctxt->chr->uuid;
    c8b6:	6893      	ldr	r3, [r2, #8]
    c8b8:	681d      	ldr	r5, [r3, #0]

    /* Determine which characteristic is being accessed by examining its
     * 128-bit UUID.
     */

    if (ble_uuid_cmp(uuid, &gatt_svr_chr_sec_test_rand_uuid.u) == 0) {
    c8ba:	4929      	ldr	r1, [pc, #164]	; (c960 <gatt_svr_chr_access_sec_test+0xb0>)
    c8bc:	4628      	mov	r0, r5
    c8be:	f01c f9fd 	bl	28cbc <ble_uuid_cmp>
    c8c2:	b9d8      	cbnz	r0, c8fc <gatt_svr_chr_access_sec_test+0x4c>
        assert(ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR);
    c8c4:	7823      	ldrb	r3, [r4, #0]
    c8c6:	b96b      	cbnz	r3, c8e4 <gatt_svr_chr_access_sec_test+0x34>
}

#define RAND_MAX 0x7fffffff
__extern_inline int rand(void)
{
	return (int)lrand48();
    c8c8:	f002 f83e 	bl	e948 <lrand48>

        /* Respond with a 32-bit random number. */
        rand_num = rand();
    c8cc:	a904      	add	r1, sp, #16
    c8ce:	f841 0d04 	str.w	r0, [r1, #-4]!
        rc = os_mbuf_append(ctxt->om, &rand_num, sizeof rand_num);
    c8d2:	2204      	movs	r2, #4
    c8d4:	6860      	ldr	r0, [r4, #4]
    c8d6:	f000 fdbf 	bl	d458 <os_mbuf_append>
        return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
    c8da:	4603      	mov	r3, r0
    c8dc:	b960      	cbnz	r0, c8f8 <gatt_svr_chr_access_sec_test+0x48>
    /* Unknown characteristic; the nimble stack should not have called this
     * function.
     */
    assert(0);
    return BLE_ATT_ERR_UNLIKELY;
}
    c8de:	4618      	mov	r0, r3
    c8e0:	b005      	add	sp, #20
    c8e2:	bd30      	pop	{r4, r5, pc}
        assert(ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR);
    c8e4:	f7ff fc80 	bl	c1e8 <hal_debugger_connected>
    c8e8:	b100      	cbz	r0, c8ec <gatt_svr_chr_access_sec_test+0x3c>
    c8ea:	be01      	bkpt	0x0001
    c8ec:	2300      	movs	r3, #0
    c8ee:	461a      	mov	r2, r3
    c8f0:	4619      	mov	r1, r3
    c8f2:	4618      	mov	r0, r3
    c8f4:	f000 f92c 	bl	cb50 <__assert_func>
        return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
    c8f8:	2311      	movs	r3, #17
    c8fa:	e7f0      	b.n	c8de <gatt_svr_chr_access_sec_test+0x2e>
    if (ble_uuid_cmp(uuid, &gatt_svr_chr_sec_test_static_uuid.u) == 0) {
    c8fc:	4919      	ldr	r1, [pc, #100]	; (c964 <gatt_svr_chr_access_sec_test+0xb4>)
    c8fe:	4628      	mov	r0, r5
    c900:	f01c f9dc 	bl	28cbc <ble_uuid_cmp>
    c904:	bb08      	cbnz	r0, c94a <gatt_svr_chr_access_sec_test+0x9a>
        switch (ctxt->op) {
    c906:	7823      	ldrb	r3, [r4, #0]
    c908:	b15b      	cbz	r3, c922 <gatt_svr_chr_access_sec_test+0x72>
    c90a:	2b01      	cmp	r3, #1
    c90c:	d113      	bne.n	c936 <gatt_svr_chr_access_sec_test+0x86>
            rc = gatt_svr_chr_write(ctxt->om,
    c90e:	6860      	ldr	r0, [r4, #4]
    c910:	2300      	movs	r3, #0
    c912:	9300      	str	r3, [sp, #0]
    c914:	4b14      	ldr	r3, [pc, #80]	; (c968 <gatt_svr_chr_access_sec_test+0xb8>)
    c916:	2201      	movs	r2, #1
    c918:	4611      	mov	r1, r2
    c91a:	f7ff ffb5 	bl	c888 <gatt_svr_chr_write>
    c91e:	4603      	mov	r3, r0
            return rc;
    c920:	e7dd      	b.n	c8de <gatt_svr_chr_access_sec_test+0x2e>
            rc = os_mbuf_append(ctxt->om, &gatt_svr_sec_test_static_val,
    c922:	2201      	movs	r2, #1
    c924:	4910      	ldr	r1, [pc, #64]	; (c968 <gatt_svr_chr_access_sec_test+0xb8>)
    c926:	6860      	ldr	r0, [r4, #4]
    c928:	f000 fd96 	bl	d458 <os_mbuf_append>
            return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
    c92c:	4603      	mov	r3, r0
    c92e:	2800      	cmp	r0, #0
    c930:	d0d5      	beq.n	c8de <gatt_svr_chr_access_sec_test+0x2e>
    c932:	2311      	movs	r3, #17
    c934:	e7d3      	b.n	c8de <gatt_svr_chr_access_sec_test+0x2e>
            assert(0);
    c936:	f7ff fc57 	bl	c1e8 <hal_debugger_connected>
    c93a:	b100      	cbz	r0, c93e <gatt_svr_chr_access_sec_test+0x8e>
    c93c:	be01      	bkpt	0x0001
    c93e:	2300      	movs	r3, #0
    c940:	461a      	mov	r2, r3
    c942:	4619      	mov	r1, r3
    c944:	4618      	mov	r0, r3
    c946:	f000 f903 	bl	cb50 <__assert_func>
    assert(0);
    c94a:	f7ff fc4d 	bl	c1e8 <hal_debugger_connected>
    c94e:	b100      	cbz	r0, c952 <gatt_svr_chr_access_sec_test+0xa2>
    c950:	be01      	bkpt	0x0001
    c952:	2300      	movs	r3, #0
    c954:	461a      	mov	r2, r3
    c956:	4619      	mov	r1, r3
    c958:	4618      	mov	r0, r3
    c95a:	f000 f8f9 	bl	cb50 <__assert_func>
    c95e:	bf00      	nop
    c960:	0003163c 	.word	0x0003163c
    c964:	00031650 	.word	0x00031650
    c968:	20000599 	.word	0x20000599

0000c96c <gatt_svr_register_cb>:

void
gatt_svr_register_cb(struct ble_gatt_register_ctxt *ctxt, void *arg)
{
    c96c:	b510      	push	{r4, lr}
    c96e:	b08c      	sub	sp, #48	; 0x30
    c970:	4604      	mov	r4, r0
    char buf[BLE_UUID_STR_LEN];

    switch (ctxt->op) {
    c972:	7803      	ldrb	r3, [r0, #0]
    c974:	2b02      	cmp	r3, #2
    c976:	d01c      	beq.n	c9b2 <gatt_svr_register_cb+0x46>
    c978:	2b03      	cmp	r3, #3
    c97a:	d02a      	beq.n	c9d2 <gatt_svr_register_cb+0x66>
    c97c:	2b01      	cmp	r3, #1
    c97e:	d009      	beq.n	c994 <gatt_svr_register_cb+0x28>
                    ble_uuid_to_str(ctxt->dsc.dsc_def->uuid, buf),
                    ctxt->dsc.handle);
        break;

    default:
        assert(0);
    c980:	f7ff fc32 	bl	c1e8 <hal_debugger_connected>
    c984:	b100      	cbz	r0, c988 <gatt_svr_register_cb+0x1c>
    c986:	be01      	bkpt	0x0001
    c988:	2300      	movs	r3, #0
    c98a:	461a      	mov	r2, r3
    c98c:	4619      	mov	r1, r3
    c98e:	4618      	mov	r0, r3
    c990:	f000 f8de 	bl	cb50 <__assert_func>
        MODLOG_DFLT(DEBUG, "registered service %s with handle=%d\n",
    c994:	6883      	ldr	r3, [r0, #8]
    c996:	a902      	add	r1, sp, #8
    c998:	6858      	ldr	r0, [r3, #4]
    c99a:	f01c f9ad 	bl	28cf8 <ble_uuid_to_str>
    c99e:	88a3      	ldrh	r3, [r4, #4]
    c9a0:	9300      	str	r3, [sp, #0]
    c9a2:	4603      	mov	r3, r0
    c9a4:	4a12      	ldr	r2, [pc, #72]	; (c9f0 <gatt_svr_register_cb+0x84>)
    c9a6:	2100      	movs	r1, #0
    c9a8:	4608      	mov	r0, r1
    c9aa:	f004 fe99 	bl	116e0 <modlog_printf>
        break;
    }
}
    c9ae:	b00c      	add	sp, #48	; 0x30
    c9b0:	bd10      	pop	{r4, pc}
        MODLOG_DFLT(DEBUG, "registering characteristic %s with "
    c9b2:	6883      	ldr	r3, [r0, #8]
    c9b4:	a902      	add	r1, sp, #8
    c9b6:	6818      	ldr	r0, [r3, #0]
    c9b8:	f01c f99e 	bl	28cf8 <ble_uuid_to_str>
    c9bc:	88a3      	ldrh	r3, [r4, #4]
    c9be:	88e2      	ldrh	r2, [r4, #6]
    c9c0:	9201      	str	r2, [sp, #4]
    c9c2:	9300      	str	r3, [sp, #0]
    c9c4:	4603      	mov	r3, r0
    c9c6:	4a0b      	ldr	r2, [pc, #44]	; (c9f4 <gatt_svr_register_cb+0x88>)
    c9c8:	2100      	movs	r1, #0
    c9ca:	4608      	mov	r0, r1
    c9cc:	f004 fe88 	bl	116e0 <modlog_printf>
        break;
    c9d0:	e7ed      	b.n	c9ae <gatt_svr_register_cb+0x42>
        MODLOG_DFLT(DEBUG, "registering descriptor %s with handle=%d\n",
    c9d2:	6883      	ldr	r3, [r0, #8]
    c9d4:	a902      	add	r1, sp, #8
    c9d6:	6818      	ldr	r0, [r3, #0]
    c9d8:	f01c f98e 	bl	28cf8 <ble_uuid_to_str>
    c9dc:	88a3      	ldrh	r3, [r4, #4]
    c9de:	9300      	str	r3, [sp, #0]
    c9e0:	4603      	mov	r3, r0
    c9e2:	4a05      	ldr	r2, [pc, #20]	; (c9f8 <gatt_svr_register_cb+0x8c>)
    c9e4:	2100      	movs	r1, #0
    c9e6:	4608      	mov	r0, r1
    c9e8:	f004 fe7a 	bl	116e0 <modlog_printf>
        break;
    c9ec:	e7df      	b.n	c9ae <gatt_svr_register_cb+0x42>
    c9ee:	bf00      	nop
    c9f0:	00031664 	.word	0x00031664
    c9f4:	0003168c 	.word	0x0003168c
    c9f8:	000316cc 	.word	0x000316cc

0000c9fc <gatt_svr_init>:

int
gatt_svr_init(void)
{
    c9fc:	b508      	push	{r3, lr}
    int rc;

    rc = ble_gatts_count_cfg(gatt_svr_svcs);
    c9fe:	4806      	ldr	r0, [pc, #24]	; (ca18 <gatt_svr_init+0x1c>)
    ca00:	f016 ff5c 	bl	238bc <ble_gatts_count_cfg>
    if (rc != 0) {
    ca04:	4603      	mov	r3, r0
    ca06:	b108      	cbz	r0, ca0c <gatt_svr_init+0x10>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
    ca08:	4618      	mov	r0, r3
    ca0a:	bd08      	pop	{r3, pc}
    rc = ble_gatts_add_svcs(gatt_svr_svcs);
    ca0c:	4802      	ldr	r0, [pc, #8]	; (ca18 <gatt_svr_init+0x1c>)
    ca0e:	f016 ff31 	bl	23874 <ble_gatts_add_svcs>
    ca12:	4603      	mov	r3, r0
    ca14:	e7f8      	b.n	ca08 <gatt_svr_init+0xc>
    ca16:	bf00      	nop
    ca18:	0003170c 	.word	0x0003170c

0000ca1c <sysinit_app>:
void smp_ble_pkg_init(void);
void stat_mgmt_module_init(void);

void
sysinit_app(void)
{
    ca1c:	b508      	push	{r3, lr}
    /*** Stage 0 */
    /* 0.0: os_pkg_init (kernel/os) */
    os_pkg_init();
    ca1e:	f000 fa1b 	bl	ce58 <os_pkg_init>

    /*** Stage 2 */
    /* 2.0: flash_map_init (sys/flash_map) */
    flash_map_init();
    ca22:	f004 f8af 	bl	10b84 <flash_map_init>

    /*** Stage 10 */
    /* 10.0: stats_module_init (sys/stats/full) */
    stats_module_init();
    ca26:	f005 fb89 	bl	1213c <stats_module_init>

    /*** Stage 20 */
    /* 20.0: console_pkg_init (sys/console/full) */
    console_pkg_init();
    ca2a:	f003 fd57 	bl	104dc <console_pkg_init>

    /*** Stage 50 */
    /* 50.0: config_pkg_init (sys/config) */
    config_pkg_init();
    ca2e:	f002 fb25 	bl	f07c <config_pkg_init>

    /*** Stage 100 */
    /* 100.0: ble_hci_ram_init (nimble/transport/ram) */
    ble_hci_ram_init();
    ca32:	f01d fc87 	bl	2a344 <ble_hci_ram_init>
    /* 100.1: log_init (sys/log/full) */
    log_init();
    ca36:	f004 fabb 	bl	10fb0 <log_init>
    /* 100.2: mfg_init (sys/mfg) */
    mfg_init();
    ca3a:	f004 ffe9 	bl	11a10 <mfg_init>
    /* 100.3: modlog_init (sys/log/modlog) */
    modlog_init();
    ca3e:	f004 fe6d 	bl	1171c <modlog_init>

    /*** Stage 200 */
    /* 200.0: ble_hs_init (nimble/host) */
    ble_hs_init();
    ca42:	f017 f9a3 	bl	23d8c <ble_hs_init>
    /* 200.1: log_reboot_pkg_init (sys/reboot) */
    log_reboot_pkg_init();
    ca46:	f005 fa99 	bl	11f7c <log_reboot_pkg_init>

    /*** Stage 220 */
    /* 220.0: config_pkg_init_stage2 (sys/config) */
    config_pkg_init_stage2();
    ca4a:	f002 fb2d 	bl	f0a8 <config_pkg_init_stage2>

    /*** Stage 250 */
    /* 250.0: ble_ll_init (nimble/controller) */
    ble_ll_init();
    ca4e:	f008 f8f5 	bl	14c3c <ble_ll_init>

    /*** Stage 301 */
    /* 301.0: ble_svc_gap_init (nimble/host/services/gap) */
    ble_svc_gap_init();
    ca52:	f01c ff1d 	bl	29890 <ble_svc_gap_init>

    /*** Stage 302 */
    /* 302.0: ble_svc_gatt_init (nimble/host/services/gatt) */
    ble_svc_gatt_init();
    ca56:	f01c ff89 	bl	2996c <ble_svc_gatt_init>

    /*** Stage 303 */
    /* 303.0: ble_svc_ans_init (nimble/host/services/ans) */
    ble_svc_ans_init();
    ca5a:	f01c fdd9 	bl	29610 <ble_svc_ans_init>
    /* 303.1: ble_svc_dis_init (nimble/host/services/dis) */
    ble_svc_dis_init();
    ca5e:	f01c fe51 	bl	29704 <ble_svc_dis_init>

    /*** Stage 500 */
    /* 500.0: ble_store_config_init (nimble/host/store/config) */
    ble_store_config_init();
    ca62:	f01d f9f9 	bl	29e58 <ble_store_config_init>
    /* 500.1: id_init (sys/id) */
    id_init();
    ca66:	f004 f9a5 	bl	10db4 <id_init>
    /* 500.2: imgmgr_module_init (mgmt/imgmgr) */
    imgmgr_module_init();
    ca6a:	f002 f89d 	bl	eba8 <imgmgr_module_init>
    /* 500.3: smp_pkg_init (mgmt/smp) */
    smp_pkg_init();
    ca6e:	f002 f9a7 	bl	edc0 <smp_pkg_init>
    /* 500.4: split_app_init (boot/split) */
    split_app_init();
    ca72:	f000 f80b 	bl	ca8c <split_app_init>

    /*** Stage 501 */
    /* 501.0: img_mgmt_module_init (cmd/img_mgmt/port/mynewt) */
    img_mgmt_module_init();
    ca76:	f006 fee1 	bl	1383c <img_mgmt_module_init>
    /* 501.1: log_mgmt_module_init (cmd/log_mgmt/port/mynewt) */
    log_mgmt_module_init();
    ca7a:	f007 f82f 	bl	13adc <log_mgmt_module_init>
    /* 501.2: os_mgmt_module_init (cmd/os_mgmt) */
    os_mgmt_module_init();
    ca7e:	f007 f961 	bl	13d44 <os_mgmt_module_init>
    /* 501.3: smp_ble_pkg_init (mgmt/smp/transport/ble) */
    smp_ble_pkg_init();
    ca82:	f002 fa61 	bl	ef48 <smp_ble_pkg_init>
    /* 501.4: stat_mgmt_module_init (cmd/stat_mgmt/port/mynewt) */
    stat_mgmt_module_init();
    ca86:	f007 fa19 	bl	13ebc <stat_mgmt_module_init>
}
    ca8a:	bd08      	pop	{r3, pc}

0000ca8c <split_app_init>:
    },
};

void
split_app_init(void)
{
    ca8c:	b508      	push	{r3, lr}
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
    ca8e:	4b0e      	ldr	r3, [pc, #56]	; (cac8 <split_app_init+0x3c>)
    ca90:	781b      	ldrb	r3, [r3, #0]
    ca92:	b12b      	cbz	r3, caa0 <split_app_init+0x14>

    rc = scfg_register(&split_scfg, "split");
    ca94:	490d      	ldr	r1, [pc, #52]	; (cacc <split_app_init+0x40>)
    ca96:	480e      	ldr	r0, [pc, #56]	; (cad0 <split_app_init+0x44>)
    ca98:	f005 fd90 	bl	125bc <scfg_register>
    assert(rc == 0);
    ca9c:	b950      	cbnz	r0, cab4 <split_app_init+0x28>
}
    ca9e:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
    caa0:	f7ff fba2 	bl	c1e8 <hal_debugger_connected>
    caa4:	b100      	cbz	r0, caa8 <split_app_init+0x1c>
    caa6:	be01      	bkpt	0x0001
    caa8:	2300      	movs	r3, #0
    caaa:	461a      	mov	r2, r3
    caac:	4619      	mov	r1, r3
    caae:	4618      	mov	r0, r3
    cab0:	f000 f84e 	bl	cb50 <__assert_func>
    assert(rc == 0);
    cab4:	f7ff fb98 	bl	c1e8 <hal_debugger_connected>
    cab8:	b100      	cbz	r0, cabc <split_app_init+0x30>
    caba:	be01      	bkpt	0x0001
    cabc:	2300      	movs	r3, #0
    cabe:	461a      	mov	r2, r3
    cac0:	4619      	mov	r1, r3
    cac2:	4618      	mov	r0, r3
    cac4:	f000 f844 	bl	cb50 <__assert_func>
    cac8:	20003584 	.word	0x20003584
    cacc:	0003174c 	.word	0x0003174c
    cad0:	20000158 	.word	0x20000158

0000cad4 <split_app_active_get>:

int
split_app_active_get(void)
{
    return split_app_active;
}
    cad4:	4b01      	ldr	r3, [pc, #4]	; (cadc <split_app_active_get+0x8>)
    cad6:	f993 0000 	ldrsb.w	r0, [r3]
    cada:	4770      	bx	lr
    cadc:	2000059a 	.word	0x2000059a

0000cae0 <split_mode_set>:
    /* XXX: For now, cast this as an integer.  This value should either be
     * treated as an enumeration generally (i.e. not read directly and assigned
     * from values in flash), or switched to a native type of integer.  However,
     * this is not a high priority change, so just cast it for now.
     */
    if ((int) split_mode < 0 || (int) split_mode >= SPLIT_MODE_CNT) {
    cae0:	2803      	cmp	r0, #3
    cae2:	d803      	bhi.n	caec <split_mode_set+0xc>
        return SYS_EINVAL;
    }

    split_mode_cur = split_mode;
    cae4:	4b03      	ldr	r3, [pc, #12]	; (caf4 <split_mode_set+0x14>)
    cae6:	7018      	strb	r0, [r3, #0]
    return 0;
    cae8:	2000      	movs	r0, #0
    caea:	4770      	bx	lr
        return SYS_EINVAL;
    caec:	f06f 0001 	mvn.w	r0, #1
}
    caf0:	4770      	bx	lr
    caf2:	bf00      	nop
    caf4:	2000059b 	.word	0x2000059b

0000caf8 <split_write_split>:

int
split_write_split(split_mode_t split_mode)
{
    caf8:	b508      	push	{r3, lr}
    int rc;

    rc = split_mode_set(split_mode);
    cafa:	f7ff fff1 	bl	cae0 <split_mode_set>
    if (rc != 0) {
    cafe:	4603      	mov	r3, r0
    cb00:	b108      	cbz	r0, cb06 <split_write_split+0xe>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
    cb02:	4618      	mov	r0, r3
    cb04:	bd08      	pop	{r3, pc}
    rc = scfg_save_val(&split_scfg, &split_mode_cur);
    cb06:	4903      	ldr	r1, [pc, #12]	; (cb14 <split_write_split+0x1c>)
    cb08:	4803      	ldr	r0, [pc, #12]	; (cb18 <split_write_split+0x20>)
    cb0a:	f005 fd49 	bl	125a0 <scfg_save_val>
    cb0e:	4603      	mov	r3, r0
    cb10:	e7f7      	b.n	cb02 <split_write_split+0xa>
    cb12:	bf00      	nop
    cb14:	2000059b 	.word	0x2000059b
    cb18:	20000158 	.word	0x20000158

0000cb1c <NVIC_Relocate>:
     * designated in the linker script.
     */
    current_location = (uint32_t *)&__isr_vector;
    new_location = (uint32_t *)&__vector_tbl_reloc__;

    if (new_location != current_location) {
    cb1c:	4a09      	ldr	r2, [pc, #36]	; (cb44 <NVIC_Relocate+0x28>)
    cb1e:	4b0a      	ldr	r3, [pc, #40]	; (cb48 <NVIC_Relocate+0x2c>)
    cb20:	429a      	cmp	r2, r3
    cb22:	d00a      	beq.n	cb3a <NVIC_Relocate+0x1e>
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
    cb24:	2300      	movs	r3, #0
    cb26:	e006      	b.n	cb36 <NVIC_Relocate+0x1a>
            new_location[i] = current_location[i];
    cb28:	4a07      	ldr	r2, [pc, #28]	; (cb48 <NVIC_Relocate+0x2c>)
    cb2a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    cb2e:	4a05      	ldr	r2, [pc, #20]	; (cb44 <NVIC_Relocate+0x28>)
    cb30:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
    cb34:	3301      	adds	r3, #1
    cb36:	2b35      	cmp	r3, #53	; 0x35
    cb38:	ddf6      	ble.n	cb28 <NVIC_Relocate+0xc>
    }

    /* Set VTOR except for M0 */
#if ((__CORTEX_M == 0) && (__VTOR_PRESENT == 0))
#else
    SCB->VTOR = (uint32_t)&__vector_tbl_reloc__;
    cb3a:	4a02      	ldr	r2, [pc, #8]	; (cb44 <NVIC_Relocate+0x28>)
    cb3c:	4b03      	ldr	r3, [pc, #12]	; (cb4c <NVIC_Relocate+0x30>)
    cb3e:	609a      	str	r2, [r3, #8]
#endif
}
    cb40:	4770      	bx	lr
    cb42:	bf00      	nop
    cb44:	20000000 	.word	0x20000000
    cb48:	0000c020 	.word	0x0000c020
    cb4c:	e000ed00 	.word	0xe000ed00

0000cb50 <__assert_func>:
}
#endif

void
__assert_func(const char *file, int line, const char *func, const char *e)
{
    cb50:	b508      	push	{r3, lr}
    cb52:	4675      	mov	r5, lr
    cb54:	4604      	mov	r4, r0
    cb56:	460e      	mov	r6, r1
#if MYNEWT_VAL(OS_CRASH_LOG)
    struct log_reboot_info lri;
#endif
    int sr;

    OS_ENTER_CRITICAL(sr);
    cb58:	f001 fcec 	bl	e534 <os_arch_save_sr>
    (void)sr;
    console_blocking_mode();
    cb5c:	f003 fbf8 	bl	10350 <console_blocking_mode>
    OS_PRINT_ASSERT(file, line, func, e);
    cb60:	b16c      	cbz	r4, cb7e <__assert_func+0x2e>
    cb62:	4633      	mov	r3, r6
    cb64:	4622      	mov	r2, r4
    cb66:	4629      	mov	r1, r5
    cb68:	4807      	ldr	r0, [pc, #28]	; (cb88 <__assert_func+0x38>)
    cb6a:	f003 fd05 	bl	10578 <console_printf>

#if MYNEWT_VAL(OS_ASSERT_CB)
    os_assert_cb();
#endif

    SCB->ICSR = SCB_ICSR_NMIPENDSET_Msk;
    cb6e:	4b07      	ldr	r3, [pc, #28]	; (cb8c <__assert_func+0x3c>)
    cb70:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    cb74:	605a      	str	r2, [r3, #4]
    asm("isb");
    cb76:	f3bf 8f6f 	isb	sy
    hal_system_reset();
    cb7a:	f7ff fb3d 	bl	c1f8 <hal_system_reset>
    OS_PRINT_ASSERT(file, line, func, e);
    cb7e:	4629      	mov	r1, r5
    cb80:	4803      	ldr	r0, [pc, #12]	; (cb90 <__assert_func+0x40>)
    cb82:	f003 fcf9 	bl	10578 <console_printf>
    cb86:	e7f2      	b.n	cb6e <__assert_func+0x1e>
    cb88:	0003176c 	.word	0x0003176c
    cb8c:	e000ed00 	.word	0xe000ed00
    cb90:	0003175c 	.word	0x0003175c

0000cb94 <os_default_irq>:
}

void
os_default_irq(struct trap_frame *tf)
{
    cb94:	b500      	push	{lr}
    cb96:	b083      	sub	sp, #12
    cb98:	4604      	mov	r4, r0
#endif
#if MYNEWT_VAL(OS_CRASH_RESTORE_REGS)
    uint32_t orig_sp;
#endif

    console_blocking_mode();
    cb9a:	f003 fbd9 	bl	10350 <console_blocking_mode>
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
      SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk, (uint32_t)tf->ef);
    cb9e:	4d1b      	ldr	r5, [pc, #108]	; (cc0c <os_default_irq+0x78>)
    cba0:	6869      	ldr	r1, [r5, #4]
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
    cba2:	6822      	ldr	r2, [r4, #0]
    cba4:	f3c1 0108 	ubfx	r1, r1, #0, #9
    cba8:	4819      	ldr	r0, [pc, #100]	; (cc10 <os_default_irq+0x7c>)
    cbaa:	f003 fce5 	bl	10578 <console_printf>
    console_printf(" r0:0x%08lx  r1:0x%08lx  r2:0x%08lx  r3:0x%08lx\n",
      tf->ef->r0, tf->ef->r1, tf->ef->r2, tf->ef->r3);
    cbae:	6820      	ldr	r0, [r4, #0]
    console_printf(" r0:0x%08lx  r1:0x%08lx  r2:0x%08lx  r3:0x%08lx\n",
    cbb0:	6883      	ldr	r3, [r0, #8]
    cbb2:	6842      	ldr	r2, [r0, #4]
    cbb4:	6801      	ldr	r1, [r0, #0]
    cbb6:	68c0      	ldr	r0, [r0, #12]
    cbb8:	9000      	str	r0, [sp, #0]
    cbba:	4816      	ldr	r0, [pc, #88]	; (cc14 <os_default_irq+0x80>)
    cbbc:	f003 fcdc 	bl	10578 <console_printf>
    console_printf(" r4:0x%08lx  r5:0x%08lx  r6:0x%08lx  r7:0x%08lx\n",
    cbc0:	6923      	ldr	r3, [r4, #16]
    cbc2:	9300      	str	r3, [sp, #0]
    cbc4:	68e3      	ldr	r3, [r4, #12]
    cbc6:	68a2      	ldr	r2, [r4, #8]
    cbc8:	6861      	ldr	r1, [r4, #4]
    cbca:	4813      	ldr	r0, [pc, #76]	; (cc18 <os_default_irq+0x84>)
    cbcc:	f003 fcd4 	bl	10578 <console_printf>
      tf->r4, tf->r5, tf->r6, tf->r7);
    console_printf(" r8:0x%08lx  r9:0x%08lx r10:0x%08lx r11:0x%08lx\n",
    cbd0:	6a23      	ldr	r3, [r4, #32]
    cbd2:	9300      	str	r3, [sp, #0]
    cbd4:	69e3      	ldr	r3, [r4, #28]
    cbd6:	69a2      	ldr	r2, [r4, #24]
    cbd8:	6961      	ldr	r1, [r4, #20]
    cbda:	4810      	ldr	r0, [pc, #64]	; (cc1c <os_default_irq+0x88>)
    cbdc:	f003 fccc 	bl	10578 <console_printf>
      tf->r8, tf->r9, tf->r10, tf->r11);
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
      tf->ef->r12, tf->ef->lr, tf->ef->pc, tf->ef->psr);
    cbe0:	6820      	ldr	r0, [r4, #0]
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
    cbe2:	6983      	ldr	r3, [r0, #24]
    cbe4:	6942      	ldr	r2, [r0, #20]
    cbe6:	6901      	ldr	r1, [r0, #16]
    cbe8:	69c0      	ldr	r0, [r0, #28]
    cbea:	9000      	str	r0, [sp, #0]
    cbec:	480c      	ldr	r0, [pc, #48]	; (cc20 <os_default_irq+0x8c>)
    cbee:	f003 fcc3 	bl	10578 <console_printf>
    console_printf("ICSR:0x%08lx HFSR:0x%08lx CFSR:0x%08lx\n",
    cbf2:	6869      	ldr	r1, [r5, #4]
    cbf4:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    cbf6:	6aab      	ldr	r3, [r5, #40]	; 0x28
    cbf8:	480a      	ldr	r0, [pc, #40]	; (cc24 <os_default_irq+0x90>)
    cbfa:	f003 fcbd 	bl	10578 <console_printf>
      SCB->ICSR, SCB->HFSR, SCB->CFSR);
    console_printf("BFAR:0x%08lx MMFAR:0x%08lx\n", SCB->BFAR, SCB->MMFAR);
    cbfe:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    cc00:	6b6a      	ldr	r2, [r5, #52]	; 0x34
    cc02:	4809      	ldr	r0, [pc, #36]	; (cc28 <os_default_irq+0x94>)
    cc04:	f003 fcb8 	bl	10578 <console_printf>
            : "r0"
        );
    }
#endif

    hal_system_reset();
    cc08:	f7ff faf6 	bl	c1f8 <hal_system_reset>
    cc0c:	e000ed00 	.word	0xe000ed00
    cc10:	00031784 	.word	0x00031784
    cc14:	000317b8 	.word	0x000317b8
    cc18:	000317ec 	.word	0x000317ec
    cc1c:	00031820 	.word	0x00031820
    cc20:	00031854 	.word	0x00031854
    cc24:	00031888 	.word	0x00031888
    cc28:	000318b0 	.word	0x000318b0

0000cc2c <os_idle_task>:
 *
 * @param arg unused
 */
void
os_idle_task(void *arg)
{
    cc2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

    sanity_itvl_ticks = (MYNEWT_VAL(SANITY_INTERVAL) * OS_TICKS_PER_SEC) / 1000;
    sanity_last = 0;

#if MYNEWT_VAL(WATCHDOG_INTERVAL) > 0
    hal_watchdog_tickle();
    cc2e:	f021 fd21 	bl	2e674 <hal_watchdog_tickle>
    sanity_last = 0;
    cc32:	2500      	movs	r5, #0
    cc34:	e00e      	b.n	cc54 <os_idle_task+0x28>
    while (1) {
        ++g_os_idle_ctr;

        now = os_time_get();
        if (OS_TIME_TICK_GEQ(now, sanity_last + sanity_itvl_ticks)) {
            os_sanity_run();
    cc36:	f001 f91b 	bl	de70 <os_sanity_run>
#if MYNEWT_VAL(WATCHDOG_INTERVAL) > 0
            /* Tickle the watchdog after successfully running sanity */
            hal_watchdog_tickle();
    cc3a:	f021 fd1b 	bl	2e674 <hal_watchdog_tickle>
#if MYNEWT_VAL(OS_WATCHDOG_MONITOR)
            os_cputime_timer_stop(&os_wdog_monitor);
            os_cputime_timer_relative(&os_wdog_monitor, OS_WDOG_MONITOR_TMO);
#endif
#endif
            sanity_last = now;
    cc3e:	4625      	mov	r5, r4
    cc40:	e014      	b.n	cc6c <os_idle_task+0x40>
         * happens on next interval in case it was already performed on current
         * tick.
         */
        sanity_to_next = sanity_last + sanity_itvl_ticks - now;
        if ((int)sanity_to_next <= 0) {
            sanity_to_next += sanity_itvl_ticks;
    cc42:	f503 63f0 	add.w	r3, r3, #1920	; 0x780
    cc46:	e025      	b.n	cc94 <os_idle_task+0x68>
        }
        iticks = min(iticks, sanity_to_next);

        if (iticks < MIN_IDLE_TICKS) {
            iticks = 0;
    cc48:	2000      	movs	r0, #0
        /* Tell the architecture specific support to put the processor to sleep
         * for 'n' ticks.
         */

        os_trace_idle();
        os_tick_idle(iticks);
    cc4a:	f021 fc03 	bl	2e454 <os_tick_idle>
        OS_EXIT_CRITICAL(sr);
    cc4e:	4638      	mov	r0, r7
    cc50:	f001 fc76 	bl	e540 <os_arch_restore_sr>
        ++g_os_idle_ctr;
    cc54:	4a15      	ldr	r2, [pc, #84]	; (ccac <os_idle_task+0x80>)
    cc56:	6813      	ldr	r3, [r2, #0]
    cc58:	3301      	adds	r3, #1
    cc5a:	6013      	str	r3, [r2, #0]
        now = os_time_get();
    cc5c:	f001 fba8 	bl	e3b0 <os_time_get>
    cc60:	4604      	mov	r4, r0
        if (OS_TIME_TICK_GEQ(now, sanity_last + sanity_itvl_ticks)) {
    cc62:	f505 63f0 	add.w	r3, r5, #1920	; 0x780
    cc66:	1ac3      	subs	r3, r0, r3
    cc68:	2b00      	cmp	r3, #0
    cc6a:	dae4      	bge.n	cc36 <os_idle_task+0xa>
        OS_ENTER_CRITICAL(sr);
    cc6c:	f001 fc62 	bl	e534 <os_arch_save_sr>
    cc70:	4607      	mov	r7, r0
        now = os_time_get();
    cc72:	f001 fb9d 	bl	e3b0 <os_time_get>
    cc76:	4606      	mov	r6, r0
        sticks = os_sched_wakeup_ticks(now);
    cc78:	f001 fa3c 	bl	e0f4 <os_sched_wakeup_ticks>
    cc7c:	4604      	mov	r4, r0
        cticks = os_callout_wakeup_ticks(now);
    cc7e:	4630      	mov	r0, r6
    cc80:	f000 f9a8 	bl	cfd4 <os_callout_wakeup_ticks>
        iticks = min(sticks, cticks);
    cc84:	42a0      	cmp	r0, r4
    cc86:	bf28      	it	cs
    cc88:	4620      	movcs	r0, r4
        sanity_to_next = sanity_last + sanity_itvl_ticks - now;
    cc8a:	f505 63f0 	add.w	r3, r5, #1920	; 0x780
    cc8e:	1b9b      	subs	r3, r3, r6
        if ((int)sanity_to_next <= 0) {
    cc90:	2b00      	cmp	r3, #0
    cc92:	ddd6      	ble.n	cc42 <os_idle_task+0x16>
        iticks = min(iticks, sanity_to_next);
    cc94:	4298      	cmp	r0, r3
    cc96:	bf28      	it	cs
    cc98:	4618      	movcs	r0, r3
        if (iticks < MIN_IDLE_TICKS) {
    cc9a:	280b      	cmp	r0, #11
    cc9c:	d9d4      	bls.n	cc48 <os_idle_task+0x1c>
        } else if (iticks > MAX_IDLE_TICKS) {
    cc9e:	f5b0 3f96 	cmp.w	r0, #76800	; 0x12c00
    cca2:	d9d2      	bls.n	cc4a <os_idle_task+0x1e>
            iticks = MAX_IDLE_TICKS;
    cca4:	f44f 3096 	mov.w	r0, #76800	; 0x12c00
    cca8:	e7cf      	b.n	cc4a <os_idle_task+0x1e>
    ccaa:	bf00      	nop
    ccac:	20003398 	.word	0x20003398

0000ccb0 <os_main>:
    return (g_os_started);
}

static void
os_main(void *arg)
{
    ccb0:	b508      	push	{r3, lr}
    ccb2:	4603      	mov	r3, r0
    int (*fn)(int argc, char **argv) = arg;

#if !MYNEWT_VAL(SELFTEST)
    fn(0, NULL);
    ccb4:	2100      	movs	r1, #0
    ccb6:	4608      	mov	r0, r1
    ccb8:	4798      	blx	r3
    (void)fn;
    while (1) {
        os_eventq_run(os_eventq_dflt_get());
    }
#endif
    assert(0);
    ccba:	f7ff fa95 	bl	c1e8 <hal_debugger_connected>
    ccbe:	b100      	cbz	r0, ccc2 <os_main+0x12>
    ccc0:	be01      	bkpt	0x0001
    ccc2:	2300      	movs	r3, #0
    ccc4:	461a      	mov	r2, r3
    ccc6:	4619      	mov	r1, r3
    ccc8:	4618      	mov	r0, r3
    ccca:	f7ff ff41 	bl	cb50 <__assert_func>
	...

0000ccd0 <os_started>:
}
    ccd0:	4b01      	ldr	r3, [pc, #4]	; (ccd8 <os_started+0x8>)
    ccd2:	6818      	ldr	r0, [r3, #0]
    ccd4:	4770      	bx	lr
    ccd6:	bf00      	nop
    ccd8:	2000339c 	.word	0x2000339c

0000ccdc <os_init_idle_task>:
}
#endif

void
os_init_idle_task(void)
{
    ccdc:	b500      	push	{lr}
    ccde:	b085      	sub	sp, #20
    int rc;

    rc = os_task_init(&g_idle_task, "idle", os_idle_task, NULL,
    cce0:	2340      	movs	r3, #64	; 0x40
    cce2:	9303      	str	r3, [sp, #12]
    cce4:	4b1b      	ldr	r3, [pc, #108]	; (cd54 <os_init_idle_task+0x78>)
    cce6:	9302      	str	r3, [sp, #8]
    cce8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    ccec:	9301      	str	r3, [sp, #4]
    ccee:	23ff      	movs	r3, #255	; 0xff
    ccf0:	9300      	str	r3, [sp, #0]
    ccf2:	2300      	movs	r3, #0
    ccf4:	4a18      	ldr	r2, [pc, #96]	; (cd58 <os_init_idle_task+0x7c>)
    ccf6:	4919      	ldr	r1, [pc, #100]	; (cd5c <os_init_idle_task+0x80>)
    ccf8:	4819      	ldr	r0, [pc, #100]	; (cd60 <os_init_idle_task+0x84>)
    ccfa:	f001 fa5f 	bl	e1bc <os_task_init>
            OS_IDLE_PRIO, OS_WAIT_FOREVER, g_idle_task_stack,
            OS_STACK_ALIGN(OS_IDLE_STACK_SIZE));
    assert(rc == 0);
    ccfe:	b950      	cbnz	r0, cd16 <os_init_idle_task+0x3a>

    /* Initialize sanity */
    rc = os_sanity_init();
    cd00:	f001 f8f8 	bl	def4 <os_sanity_init>
    assert(rc == 0);
    cd04:	b988      	cbnz	r0, cd2a <os_init_idle_task+0x4e>

#if MYNEWT_VAL(WATCHDOG_INTERVAL) > 0
    rc = hal_watchdog_init(MYNEWT_VAL(WATCHDOG_INTERVAL));
    cd06:	f247 5030 	movw	r0, #30000	; 0x7530
    cd0a:	f021 fc6b 	bl	2e5e4 <hal_watchdog_init>
    assert(rc == 0);
    cd0e:	b9b0      	cbnz	r0, cd3e <os_init_idle_task+0x62>
#if MYNEWT_VAL(OS_WATCHDOG_MONITOR)
    os_cputime_timer_init(&os_wdog_monitor, os_wdog_monitor_tmo, NULL);
    os_cputime_timer_relative(&os_wdog_monitor, OS_WDOG_MONITOR_TMO);
#endif
#endif
}
    cd10:	b005      	add	sp, #20
    cd12:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
    cd16:	f7ff fa67 	bl	c1e8 <hal_debugger_connected>
    cd1a:	b100      	cbz	r0, cd1e <os_init_idle_task+0x42>
    cd1c:	be01      	bkpt	0x0001
    cd1e:	2300      	movs	r3, #0
    cd20:	461a      	mov	r2, r3
    cd22:	4619      	mov	r1, r3
    cd24:	4618      	mov	r0, r3
    cd26:	f7ff ff13 	bl	cb50 <__assert_func>
    assert(rc == 0);
    cd2a:	f7ff fa5d 	bl	c1e8 <hal_debugger_connected>
    cd2e:	b100      	cbz	r0, cd32 <os_init_idle_task+0x56>
    cd30:	be01      	bkpt	0x0001
    cd32:	2300      	movs	r3, #0
    cd34:	461a      	mov	r2, r3
    cd36:	4619      	mov	r1, r3
    cd38:	4618      	mov	r0, r3
    cd3a:	f7ff ff09 	bl	cb50 <__assert_func>
    assert(rc == 0);
    cd3e:	f7ff fa53 	bl	c1e8 <hal_debugger_connected>
    cd42:	b100      	cbz	r0, cd46 <os_init_idle_task+0x6a>
    cd44:	be01      	bkpt	0x0001
    cd46:	2300      	movs	r3, #0
    cd48:	461a      	mov	r2, r3
    cd4a:	4619      	mov	r1, r3
    cd4c:	4618      	mov	r0, r3
    cd4e:	f7ff feff 	bl	cb50 <__assert_func>
    cd52:	bf00      	nop
    cd54:	200005a0 	.word	0x200005a0
    cd58:	0000cc2d 	.word	0x0000cc2d
    cd5c:	000318d4 	.word	0x000318d4
    cd60:	20003348 	.word	0x20003348

0000cd64 <os_init>:

void
os_init(int (*main_fn)(int argc, char **arg))
{
    cd64:	b510      	push	{r4, lr}
    cd66:	b084      	sub	sp, #16
    cd68:	4604      	mov	r4, r0
#if MYNEWT_VAL(RTT)
    memset(&_SEGGER_RTT, 0, sizeof(_SEGGER_RTT));
    SEGGER_RTT_Init();
#endif

    TAILQ_INIT(&g_callout_list);
    cd6a:	4b2c      	ldr	r3, [pc, #176]	; (ce1c <os_init+0xb8>)
    cd6c:	2200      	movs	r2, #0
    cd6e:	601a      	str	r2, [r3, #0]
    cd70:	605b      	str	r3, [r3, #4]
    STAILQ_INIT(&g_os_task_list);
    cd72:	4b2b      	ldr	r3, [pc, #172]	; (ce20 <os_init+0xbc>)
    cd74:	601a      	str	r2, [r3, #0]
    cd76:	605b      	str	r3, [r3, #4]
    os_eventq_init(os_eventq_dflt_get());
    cd78:	f000 fad0 	bl	d31c <os_eventq_dflt_get>
    cd7c:	f000 fa0a 	bl	d194 <os_eventq_init>

    /* Initialize device list. */
    os_dev_reset();
    cd80:	f000 fa00 	bl	d184 <os_dev_reset>

    err = os_arch_os_init();
    cd84:	f001 fc12 	bl	e5ac <os_arch_os_init>
    assert(err == OS_OK);
    cd88:	bb00      	cbnz	r0, cdcc <os_init+0x68>

    if (main_fn) {
    cd8a:	b18c      	cbz	r4, cdb0 <os_init+0x4c>
        err = os_task_init(&g_os_main_task, "main", os_main, main_fn,
    cd8c:	f44f 7300 	mov.w	r3, #512	; 0x200
    cd90:	9303      	str	r3, [sp, #12]
    cd92:	4b24      	ldr	r3, [pc, #144]	; (ce24 <os_init+0xc0>)
    cd94:	9302      	str	r3, [sp, #8]
    cd96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    cd9a:	9301      	str	r3, [sp, #4]
    cd9c:	237f      	movs	r3, #127	; 0x7f
    cd9e:	9300      	str	r3, [sp, #0]
    cda0:	4623      	mov	r3, r4
    cda2:	4a21      	ldr	r2, [pc, #132]	; (ce28 <os_init+0xc4>)
    cda4:	4921      	ldr	r1, [pc, #132]	; (ce2c <os_init+0xc8>)
    cda6:	4822      	ldr	r0, [pc, #136]	; (ce30 <os_init+0xcc>)
    cda8:	f001 fa08 	bl	e1bc <os_task_init>
    cdac:	b2c0      	uxtb	r0, r0
                   OS_MAIN_TASK_PRIO,
                   (OS_MAIN_TASK_TIMER_TICKS == 0) ? OS_WAIT_FOREVER : OS_MAIN_TASK_TIMER_TICKS,
                   g_os_main_stack, OS_STACK_ALIGN(OS_MAIN_STACK_SIZE));
        assert(err == 0);
    cdae:	b9b8      	cbnz	r0, cde0 <os_init+0x7c>
    }

    /* Call bsp related OS initializations */
    hal_bsp_init();
    cdb0:	f021 f8a6 	bl	2df00 <hal_bsp_init>

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_PRIMARY);
    cdb4:	2001      	movs	r0, #1
    cdb6:	f000 f99d 	bl	d0f4 <os_dev_initialize_all>
    cdba:	b2c0      	uxtb	r0, r0
    assert(err == OS_OK);
    cdbc:	b9d0      	cbnz	r0, cdf4 <os_init+0x90>

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_SECONDARY);
    cdbe:	2002      	movs	r0, #2
    cdc0:	f000 f998 	bl	d0f4 <os_dev_initialize_all>
    cdc4:	b2c0      	uxtb	r0, r0
    assert(err == OS_OK);
    cdc6:	b9f8      	cbnz	r0, ce08 <os_init+0xa4>
}
    cdc8:	b004      	add	sp, #16
    cdca:	bd10      	pop	{r4, pc}
    assert(err == OS_OK);
    cdcc:	f7ff fa0c 	bl	c1e8 <hal_debugger_connected>
    cdd0:	b100      	cbz	r0, cdd4 <os_init+0x70>
    cdd2:	be01      	bkpt	0x0001
    cdd4:	2300      	movs	r3, #0
    cdd6:	461a      	mov	r2, r3
    cdd8:	4619      	mov	r1, r3
    cdda:	4618      	mov	r0, r3
    cddc:	f7ff feb8 	bl	cb50 <__assert_func>
        assert(err == 0);
    cde0:	f7ff fa02 	bl	c1e8 <hal_debugger_connected>
    cde4:	b100      	cbz	r0, cde8 <os_init+0x84>
    cde6:	be01      	bkpt	0x0001
    cde8:	2300      	movs	r3, #0
    cdea:	461a      	mov	r2, r3
    cdec:	4619      	mov	r1, r3
    cdee:	4618      	mov	r0, r3
    cdf0:	f7ff feae 	bl	cb50 <__assert_func>
    assert(err == OS_OK);
    cdf4:	f7ff f9f8 	bl	c1e8 <hal_debugger_connected>
    cdf8:	b100      	cbz	r0, cdfc <os_init+0x98>
    cdfa:	be01      	bkpt	0x0001
    cdfc:	2300      	movs	r3, #0
    cdfe:	461a      	mov	r2, r3
    ce00:	4619      	mov	r1, r3
    ce02:	4618      	mov	r0, r3
    ce04:	f7ff fea4 	bl	cb50 <__assert_func>
    assert(err == OS_OK);
    ce08:	f7ff f9ee 	bl	c1e8 <hal_debugger_connected>
    ce0c:	b100      	cbz	r0, ce10 <os_init+0xac>
    ce0e:	be01      	bkpt	0x0001
    ce10:	2300      	movs	r3, #0
    ce12:	461a      	mov	r2, r3
    ce14:	4619      	mov	r1, r3
    ce16:	4618      	mov	r0, r3
    ce18:	f7ff fe9a 	bl	cb50 <__assert_func>
    ce1c:	200033f0 	.word	0x200033f0
    ce20:	20003414 	.word	0x20003414
    ce24:	200006a0 	.word	0x200006a0
    ce28:	0000ccb1 	.word	0x0000ccb1
    ce2c:	000318cc 	.word	0x000318cc
    ce30:	200033a0 	.word	0x200033a0

0000ce34 <os_start>:

void
os_start(void)
{
    ce34:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_SCHEDULING)
    os_error_t err;

#if MYNEWT_VAL(WATCHDOG_INTERVAL) > 0
    /* Enable the watchdog prior to starting the OS */
    hal_watchdog_enable();
    ce36:	f021 fc15 	bl	2e664 <hal_watchdog_enable>
#endif

    err = os_arch_os_start();
    ce3a:	f001 fc17 	bl	e66c <os_arch_os_start>
    assert(err == OS_OK);
    ce3e:	b900      	cbnz	r0, ce42 <os_start+0xe>
#else
    assert(0);
#endif
}
    ce40:	bd08      	pop	{r3, pc}
    assert(err == OS_OK);
    ce42:	f7ff f9d1 	bl	c1e8 <hal_debugger_connected>
    ce46:	b100      	cbz	r0, ce4a <os_start+0x16>
    ce48:	be01      	bkpt	0x0001
    ce4a:	2300      	movs	r3, #0
    ce4c:	461a      	mov	r2, r3
    ce4e:	4619      	mov	r1, r3
    ce50:	4618      	mov	r0, r3
    ce52:	f7ff fe7d 	bl	cb50 <__assert_func>
	...

0000ce58 <os_pkg_init>:
    hal_system_reset();
}

void
os_pkg_init(void)
{
    ce58:	b508      	push	{r3, lr}
    os_error_t err;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
    ce5a:	4b10      	ldr	r3, [pc, #64]	; (ce9c <os_pkg_init+0x44>)
    ce5c:	781b      	ldrb	r3, [r3, #0]
    ce5e:	b14b      	cbz	r3, ce74 <os_pkg_init+0x1c>

    err = os_dev_initialize_all(OS_DEV_INIT_KERNEL);
    ce60:	2003      	movs	r0, #3
    ce62:	f000 f947 	bl	d0f4 <os_dev_initialize_all>
    ce66:	b2c0      	uxtb	r0, r0
    assert(err == OS_OK);
    ce68:	b970      	cbnz	r0, ce88 <os_pkg_init+0x30>

    os_mempool_module_init();
    ce6a:	f000 ff0b 	bl	dc84 <os_mempool_module_init>
    os_msys_init();
    ce6e:	f000 ffad 	bl	ddcc <os_msys_init>
}
    ce72:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
    ce74:	f7ff f9b8 	bl	c1e8 <hal_debugger_connected>
    ce78:	b100      	cbz	r0, ce7c <os_pkg_init+0x24>
    ce7a:	be01      	bkpt	0x0001
    ce7c:	2300      	movs	r3, #0
    ce7e:	461a      	mov	r2, r3
    ce80:	4619      	mov	r1, r3
    ce82:	4618      	mov	r0, r3
    ce84:	f7ff fe64 	bl	cb50 <__assert_func>
    assert(err == OS_OK);
    ce88:	f7ff f9ae 	bl	c1e8 <hal_debugger_connected>
    ce8c:	b100      	cbz	r0, ce90 <os_pkg_init+0x38>
    ce8e:	be01      	bkpt	0x0001
    ce90:	2300      	movs	r3, #0
    ce92:	461a      	mov	r2, r3
    ce94:	4619      	mov	r1, r3
    ce96:	4618      	mov	r0, r3
    ce98:	f7ff fe5a 	bl	cb50 <__assert_func>
    ce9c:	20003584 	.word	0x20003584

0000cea0 <os_callout_init>:

struct os_callout_list g_callout_list;

void os_callout_init(struct os_callout *c, struct os_eventq *evq,
                     os_event_fn *ev_cb, void *ev_arg)
{
    cea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cea2:	4604      	mov	r4, r0
    cea4:	460d      	mov	r5, r1
    cea6:	4617      	mov	r7, r2
    cea8:	461e      	mov	r6, r3
    os_trace_api_u32x2(OS_TRACE_ID_CALLOUT_INIT, (uint32_t)c, (uint32_t)evq);

    memset(c, 0, sizeof(*c));
    ceaa:	2220      	movs	r2, #32
    ceac:	2100      	movs	r1, #0
    ceae:	f001 fd9f 	bl	e9f0 <memset>
    c->c_ev.ev_cb = ev_cb;
    ceb2:	6067      	str	r7, [r4, #4]
    c->c_ev.ev_arg = ev_arg;
    ceb4:	60a6      	str	r6, [r4, #8]
    c->c_evq = evq;
    ceb6:	6125      	str	r5, [r4, #16]

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_INIT);
}
    ceb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0000cebc <os_callout_stop>:

void
os_callout_stop(struct os_callout *c)
{
    cebc:	b538      	push	{r3, r4, r5, lr}
    cebe:	4604      	mov	r4, r0
    os_sr_t sr;

    os_trace_api_u32(OS_TRACE_ID_CALLOUT_STOP, (uint32_t)c);

    OS_ENTER_CRITICAL(sr);
    cec0:	f001 fb38 	bl	e534 <os_arch_save_sr>
    cec4:	4605      	mov	r5, r0
 * @return 1 if queued, 0 if not queued.
 */
static inline int
os_callout_queued(struct os_callout *c)
{
    return c->c_next.tqe_prev != NULL;
    cec6:	69e3      	ldr	r3, [r4, #28]

    if (os_callout_queued(c)) {
    cec8:	b13b      	cbz	r3, ceda <os_callout_stop+0x1e>
        TAILQ_REMOVE(&g_callout_list, c, c_next);
    ceca:	69a2      	ldr	r2, [r4, #24]
    cecc:	b172      	cbz	r2, ceec <os_callout_stop+0x30>
    cece:	61d3      	str	r3, [r2, #28]
    ced0:	69e3      	ldr	r3, [r4, #28]
    ced2:	69a2      	ldr	r2, [r4, #24]
    ced4:	601a      	str	r2, [r3, #0]
        c->c_next.tqe_prev = NULL;
    ced6:	2300      	movs	r3, #0
    ced8:	61e3      	str	r3, [r4, #28]
    }

    if (c->c_evq) {
    ceda:	6920      	ldr	r0, [r4, #16]
    cedc:	b110      	cbz	r0, cee4 <os_callout_stop+0x28>
        os_eventq_remove(c->c_evq, &c->c_ev);
    cede:	4621      	mov	r1, r4
    cee0:	f000 f9fc 	bl	d2dc <os_eventq_remove>
    }

    OS_EXIT_CRITICAL(sr);
    cee4:	4628      	mov	r0, r5
    cee6:	f001 fb2b 	bl	e540 <os_arch_restore_sr>

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_STOP);
}
    ceea:	bd38      	pop	{r3, r4, r5, pc}
        TAILQ_REMOVE(&g_callout_list, c, c_next);
    ceec:	4a01      	ldr	r2, [pc, #4]	; (cef4 <os_callout_stop+0x38>)
    ceee:	6053      	str	r3, [r2, #4]
    cef0:	e7ee      	b.n	ced0 <os_callout_stop+0x14>
    cef2:	bf00      	nop
    cef4:	200033f0 	.word	0x200033f0

0000cef8 <os_callout_reset>:

int
os_callout_reset(struct os_callout *c, os_time_t ticks)
{
    cef8:	b570      	push	{r4, r5, r6, lr}
    struct os_callout *entry;
    os_sr_t sr;
    int ret;

    /* Ensure this callout has been initialized. */
    assert(c->c_evq != NULL);
    cefa:	6903      	ldr	r3, [r0, #16]
    cefc:	b1c3      	cbz	r3, cf30 <os_callout_reset+0x38>
    cefe:	4605      	mov	r5, r0
    cf00:	460c      	mov	r4, r1

    os_trace_api_u32x2(OS_TRACE_ID_CALLOUT_RESET, (uint32_t)c, (uint32_t)ticks);

    if (ticks > INT32_MAX) {
    cf02:	2900      	cmp	r1, #0
    cf04:	db34      	blt.n	cf70 <os_callout_reset+0x78>
        ret = OS_EINVAL;
        goto err;
    }

    OS_ENTER_CRITICAL(sr);
    cf06:	f001 fb15 	bl	e534 <os_arch_save_sr>
    cf0a:	4606      	mov	r6, r0

    os_callout_stop(c);
    cf0c:	4628      	mov	r0, r5
    cf0e:	f7ff ffd5 	bl	cebc <os_callout_stop>

    if (ticks == 0) {
    cf12:	b904      	cbnz	r4, cf16 <os_callout_reset+0x1e>
        ticks = 1;
    cf14:	2401      	movs	r4, #1
    }

    c->c_ticks = os_time_get() + ticks;
    cf16:	f001 fa4b 	bl	e3b0 <os_time_get>
    cf1a:	4420      	add	r0, r4
    cf1c:	6168      	str	r0, [r5, #20]

    entry = NULL;
    TAILQ_FOREACH(entry, &g_callout_list, c_next) {
    cf1e:	4b15      	ldr	r3, [pc, #84]	; (cf74 <os_callout_reset+0x7c>)
    cf20:	681b      	ldr	r3, [r3, #0]
    cf22:	b17b      	cbz	r3, cf44 <os_callout_reset+0x4c>
        if (OS_TIME_TICK_LT(c->c_ticks, entry->c_ticks)) {
    cf24:	695a      	ldr	r2, [r3, #20]
    cf26:	1a82      	subs	r2, r0, r2
    cf28:	2a00      	cmp	r2, #0
    cf2a:	db0b      	blt.n	cf44 <os_callout_reset+0x4c>
    TAILQ_FOREACH(entry, &g_callout_list, c_next) {
    cf2c:	699b      	ldr	r3, [r3, #24]
    cf2e:	e7f8      	b.n	cf22 <os_callout_reset+0x2a>
    assert(c->c_evq != NULL);
    cf30:	f7ff f95a 	bl	c1e8 <hal_debugger_connected>
    cf34:	b100      	cbz	r0, cf38 <os_callout_reset+0x40>
    cf36:	be01      	bkpt	0x0001
    cf38:	2300      	movs	r3, #0
    cf3a:	461a      	mov	r2, r3
    cf3c:	4619      	mov	r1, r3
    cf3e:	4618      	mov	r0, r3
    cf40:	f7ff fe06 	bl	cb50 <__assert_func>
            break;
        }
    }

    if (entry) {
    cf44:	b15b      	cbz	r3, cf5e <os_callout_reset+0x66>
        TAILQ_INSERT_BEFORE(entry, c, c_next);
    cf46:	69da      	ldr	r2, [r3, #28]
    cf48:	61ea      	str	r2, [r5, #28]
    cf4a:	61ab      	str	r3, [r5, #24]
    cf4c:	69da      	ldr	r2, [r3, #28]
    cf4e:	6015      	str	r5, [r2, #0]
    cf50:	3518      	adds	r5, #24
    cf52:	61dd      	str	r5, [r3, #28]
    } else {
        TAILQ_INSERT_TAIL(&g_callout_list, c, c_next);
    }

    OS_EXIT_CRITICAL(sr);
    cf54:	4630      	mov	r0, r6
    cf56:	f001 faf3 	bl	e540 <os_arch_restore_sr>

    ret = OS_OK;
    cf5a:	2000      	movs	r0, #0

err:
    os_trace_api_ret_u32(OS_TRACE_ID_CALLOUT_RESET, (uint32_t)ret);
    return ret;
}
    cf5c:	bd70      	pop	{r4, r5, r6, pc}
        TAILQ_INSERT_TAIL(&g_callout_list, c, c_next);
    cf5e:	2300      	movs	r3, #0
    cf60:	61ab      	str	r3, [r5, #24]
    cf62:	4b04      	ldr	r3, [pc, #16]	; (cf74 <os_callout_reset+0x7c>)
    cf64:	685a      	ldr	r2, [r3, #4]
    cf66:	61ea      	str	r2, [r5, #28]
    cf68:	6015      	str	r5, [r2, #0]
    cf6a:	3518      	adds	r5, #24
    cf6c:	605d      	str	r5, [r3, #4]
    cf6e:	e7f1      	b.n	cf54 <os_callout_reset+0x5c>
        ret = OS_EINVAL;
    cf70:	2002      	movs	r0, #2
    return ret;
    cf72:	e7f3      	b.n	cf5c <os_callout_reset+0x64>
    cf74:	200033f0 	.word	0x200033f0

0000cf78 <os_callout_tick>:
 * to run, it posts an event for each callout that's ready to run,
 * to the event queue provided to os_callout_init().
 */
void
os_callout_tick(void)
{
    cf78:	b538      	push	{r3, r4, r5, lr}
    struct os_callout *c;
    uint32_t now;

    os_trace_api_void(OS_TRACE_ID_CALLOUT_TICK);

    now = os_time_get();
    cf7a:	f001 fa19 	bl	e3b0 <os_time_get>
    cf7e:	4605      	mov	r5, r0
    cf80:	e00f      	b.n	cfa2 <os_callout_tick+0x2a>
    while (1) {
        OS_ENTER_CRITICAL(sr);
        c = TAILQ_FIRST(&g_callout_list);
        if (c) {
            if (OS_TIME_TICK_GEQ(now, c->c_ticks)) {
                TAILQ_REMOVE(&g_callout_list, c, c_next);
    cf82:	69e2      	ldr	r2, [r4, #28]
    cf84:	4b12      	ldr	r3, [pc, #72]	; (cfd0 <os_callout_tick+0x58>)
    cf86:	605a      	str	r2, [r3, #4]
    cf88:	69e3      	ldr	r3, [r4, #28]
    cf8a:	69a2      	ldr	r2, [r4, #24]
    cf8c:	601a      	str	r2, [r3, #0]
                c->c_next.tqe_prev = NULL;
    cf8e:	2300      	movs	r3, #0
    cf90:	61e3      	str	r3, [r4, #28]
            } else {
                c = NULL;
            }
        }
        OS_EXIT_CRITICAL(sr);
    cf92:	f001 fad5 	bl	e540 <os_arch_restore_sr>

        if (c) {
    cf96:	b1d4      	cbz	r4, cfce <os_callout_tick+0x56>
            if (c->c_evq) {
    cf98:	6920      	ldr	r0, [r4, #16]
    cf9a:	b9a0      	cbnz	r0, cfc6 <os_callout_tick+0x4e>
                os_eventq_put(c->c_evq, &c->c_ev);
            } else {
                c->c_ev.ev_cb(&c->c_ev);
    cf9c:	6863      	ldr	r3, [r4, #4]
    cf9e:	4620      	mov	r0, r4
    cfa0:	4798      	blx	r3
        OS_ENTER_CRITICAL(sr);
    cfa2:	f001 fac7 	bl	e534 <os_arch_save_sr>
        c = TAILQ_FIRST(&g_callout_list);
    cfa6:	4b0a      	ldr	r3, [pc, #40]	; (cfd0 <os_callout_tick+0x58>)
    cfa8:	681c      	ldr	r4, [r3, #0]
        if (c) {
    cfaa:	2c00      	cmp	r4, #0
    cfac:	d0f1      	beq.n	cf92 <os_callout_tick+0x1a>
            if (OS_TIME_TICK_GEQ(now, c->c_ticks)) {
    cfae:	6963      	ldr	r3, [r4, #20]
    cfb0:	1aeb      	subs	r3, r5, r3
    cfb2:	2b00      	cmp	r3, #0
    cfb4:	db05      	blt.n	cfc2 <os_callout_tick+0x4a>
                TAILQ_REMOVE(&g_callout_list, c, c_next);
    cfb6:	69a3      	ldr	r3, [r4, #24]
    cfb8:	2b00      	cmp	r3, #0
    cfba:	d0e2      	beq.n	cf82 <os_callout_tick+0xa>
    cfbc:	69e2      	ldr	r2, [r4, #28]
    cfbe:	61da      	str	r2, [r3, #28]
    cfc0:	e7e2      	b.n	cf88 <os_callout_tick+0x10>
                c = NULL;
    cfc2:	2400      	movs	r4, #0
    cfc4:	e7e5      	b.n	cf92 <os_callout_tick+0x1a>
                os_eventq_put(c->c_evq, &c->c_ev);
    cfc6:	4621      	mov	r1, r4
    cfc8:	f000 f8f1 	bl	d1ae <os_eventq_put>
    cfcc:	e7e9      	b.n	cfa2 <os_callout_tick+0x2a>
            break;
        }
    }

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_TICK);
}
    cfce:	bd38      	pop	{r3, r4, r5, pc}
    cfd0:	200033f0 	.word	0x200033f0

0000cfd4 <os_callout_wakeup_ticks>:
 *
 * @return Number of ticks to first pending callout
 */
os_time_t
os_callout_wakeup_ticks(os_time_t now)
{
    cfd4:	b510      	push	{r4, lr}
    cfd6:	4604      	mov	r4, r0
    os_time_t rt;
    struct os_callout *c;

    OS_ASSERT_CRITICAL();
    cfd8:	f001 fab5 	bl	e546 <os_arch_in_critical>
    cfdc:	b130      	cbz	r0, cfec <os_callout_wakeup_ticks+0x18>

    c = TAILQ_FIRST(&g_callout_list);
    cfde:	4b0b      	ldr	r3, [pc, #44]	; (d00c <os_callout_wakeup_ticks+0x38>)
    cfe0:	681b      	ldr	r3, [r3, #0]
    if (c != NULL) {
    cfe2:	b17b      	cbz	r3, d004 <os_callout_wakeup_ticks+0x30>
        if (OS_TIME_TICK_GEQ(c->c_ticks, now)) {
    cfe4:	6958      	ldr	r0, [r3, #20]
    cfe6:	1b00      	subs	r0, r0, r4
    cfe8:	d40a      	bmi.n	d000 <os_callout_wakeup_ticks+0x2c>
    } else {
        rt = OS_TIMEOUT_NEVER;
    }

    return (rt);
}
    cfea:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
    cfec:	f7ff f8fc 	bl	c1e8 <hal_debugger_connected>
    cff0:	b100      	cbz	r0, cff4 <os_callout_wakeup_ticks+0x20>
    cff2:	be01      	bkpt	0x0001
    cff4:	2300      	movs	r3, #0
    cff6:	461a      	mov	r2, r3
    cff8:	4619      	mov	r1, r3
    cffa:	4618      	mov	r0, r3
    cffc:	f7ff fda8 	bl	cb50 <__assert_func>
            rt = 0;     /* callout time is in the past */
    d000:	2000      	movs	r0, #0
    d002:	e7f2      	b.n	cfea <os_callout_wakeup_ticks+0x16>
        rt = OS_TIMEOUT_NEVER;
    d004:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return (rt);
    d008:	e7ef      	b.n	cfea <os_callout_wakeup_ticks+0x16>
    d00a:	bf00      	nop
    d00c:	200033f0 	.word	0x200033f0

0000d010 <os_dev_add>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_add(struct os_dev *dev)
{
    d010:	b430      	push	{r4, r5}
    struct os_dev *cur_dev;
    struct os_dev *prev_dev;

    /* If no devices present, insert into head */
    if (STAILQ_FIRST(&g_os_dev_list) == NULL) {
    d012:	4b15      	ldr	r3, [pc, #84]	; (d068 <os_dev_add+0x58>)
    d014:	681d      	ldr	r5, [r3, #0]
    d016:	b115      	cbz	r5, d01e <os_dev_add+0xe>
    /* Add devices to the list, sorted first by stage, then by
     * priority.  Keep sorted in this order for initialization
     * stage.
     */
    prev_dev = NULL;
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
    d018:	462b      	mov	r3, r5
    prev_dev = NULL;
    d01a:	2400      	movs	r4, #0
    d01c:	e008      	b.n	d030 <os_dev_add+0x20>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
    d01e:	4603      	mov	r3, r0
    d020:	f843 5f20 	str.w	r5, [r3, #32]!
    d024:	4a10      	ldr	r2, [pc, #64]	; (d068 <os_dev_add+0x58>)
    d026:	6053      	str	r3, [r2, #4]
    d028:	6010      	str	r0, [r2, #0]
        return (0);
    d02a:	e010      	b.n	d04e <os_dev_add+0x3e>
        if (dev->od_stage < cur_dev->od_stage ||
            ((dev->od_stage == cur_dev->od_stage) &&
             (dev->od_priority < cur_dev->od_priority))) {
            break;
        }
        prev_dev = cur_dev;
    d02c:	461c      	mov	r4, r3
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
    d02e:	6a1b      	ldr	r3, [r3, #32]
    d030:	b143      	cbz	r3, d044 <os_dev_add+0x34>
        if (dev->od_stage < cur_dev->od_stage ||
    d032:	7e01      	ldrb	r1, [r0, #24]
    d034:	7e1a      	ldrb	r2, [r3, #24]
    d036:	4291      	cmp	r1, r2
    d038:	d304      	bcc.n	d044 <os_dev_add+0x34>
    d03a:	d1f7      	bne.n	d02c <os_dev_add+0x1c>
             (dev->od_priority < cur_dev->od_priority))) {
    d03c:	7e41      	ldrb	r1, [r0, #25]
    d03e:	7e5a      	ldrb	r2, [r3, #25]
            ((dev->od_stage == cur_dev->od_stage) &&
    d040:	4291      	cmp	r1, r2
    d042:	d2f3      	bcs.n	d02c <os_dev_add+0x1c>
    }

    if (prev_dev) {
    d044:	b15c      	cbz	r4, d05e <os_dev_add+0x4e>
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
    d046:	6a23      	ldr	r3, [r4, #32]
    d048:	6203      	str	r3, [r0, #32]
    d04a:	b11b      	cbz	r3, d054 <os_dev_add+0x44>
    d04c:	6220      	str	r0, [r4, #32]
    } else {
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
    }

    return (0);
}
    d04e:	2000      	movs	r0, #0
    d050:	bc30      	pop	{r4, r5}
    d052:	4770      	bx	lr
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
    d054:	f100 0320 	add.w	r3, r0, #32
    d058:	4a03      	ldr	r2, [pc, #12]	; (d068 <os_dev_add+0x58>)
    d05a:	6053      	str	r3, [r2, #4]
    d05c:	e7f6      	b.n	d04c <os_dev_add+0x3c>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
    d05e:	6205      	str	r5, [r0, #32]
    d060:	4b01      	ldr	r3, [pc, #4]	; (d068 <os_dev_add+0x58>)
    d062:	6018      	str	r0, [r3, #0]
    d064:	e7f3      	b.n	d04e <os_dev_add+0x3e>
    d066:	bf00      	nop
    d068:	20000ea0 	.word	0x20000ea0

0000d06c <os_dev_initialize>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_initialize(struct os_dev *dev)
{
    d06c:	b510      	push	{r4, lr}
    d06e:	4604      	mov	r4, r0
    int rc;

    rc = dev->od_init(dev, dev->od_init_arg);
    d070:	6903      	ldr	r3, [r0, #16]
    d072:	6941      	ldr	r1, [r0, #20]
    d074:	4798      	blx	r3
    if (rc != 0) {
    d076:	4603      	mov	r3, r0
    d078:	b128      	cbz	r0, d086 <os_dev_initialize+0x1a>
        if (dev->od_flags & OS_DEV_F_INIT_CRITICAL) {
    d07a:	7ee2      	ldrb	r2, [r4, #27]
    d07c:	f012 0f08 	tst.w	r2, #8
    d080:	d105      	bne.n	d08e <os_dev_initialize+0x22>
            goto err;
        }
    } else {
        dev->od_flags |= OS_DEV_F_STATUS_READY;
    }
    return 0;
    d082:	2300      	movs	r3, #0
    d084:	e003      	b.n	d08e <os_dev_initialize+0x22>
        dev->od_flags |= OS_DEV_F_STATUS_READY;
    d086:	7ee2      	ldrb	r2, [r4, #27]
    d088:	f042 0201 	orr.w	r2, r2, #1
    d08c:	76e2      	strb	r2, [r4, #27]
err:
    return rc;
}
    d08e:	4618      	mov	r0, r3
    d090:	bd10      	pop	{r4, pc}

0000d092 <os_dev_init>:
    dev->od_name = name;
    d092:	61c1      	str	r1, [r0, #28]
    dev->od_stage = stage;
    d094:	7602      	strb	r2, [r0, #24]
    dev->od_priority = priority;
    d096:	7643      	strb	r3, [r0, #25]
    dev->od_flags = 0;
    d098:	2300      	movs	r3, #0
    d09a:	76c3      	strb	r3, [r0, #27]
    dev->od_open_ref = 0;
    d09c:	7683      	strb	r3, [r0, #26]
    dev->od_init = od_init;
    d09e:	9a00      	ldr	r2, [sp, #0]
    d0a0:	6102      	str	r2, [r0, #16]
    dev->od_init_arg = arg;
    d0a2:	9a01      	ldr	r2, [sp, #4]
    d0a4:	6142      	str	r2, [r0, #20]
    memset(&dev->od_handlers, 0, sizeof(dev->od_handlers));
    d0a6:	6003      	str	r3, [r0, #0]
    d0a8:	6043      	str	r3, [r0, #4]
    d0aa:	6083      	str	r3, [r0, #8]
    d0ac:	60c3      	str	r3, [r0, #12]
}
    d0ae:	4618      	mov	r0, r3
    d0b0:	4770      	bx	lr
	...

0000d0b4 <os_dev_create>:

int
os_dev_create(struct os_dev *dev, const char *name, uint8_t stage,
        uint8_t priority, os_dev_init_func_t od_init, void *arg)
{
    d0b4:	b530      	push	{r4, r5, lr}
    d0b6:	b083      	sub	sp, #12
    d0b8:	4605      	mov	r5, r0
    int rc;

    rc = os_dev_init(dev, name, stage, priority, od_init, arg);
    d0ba:	9c07      	ldr	r4, [sp, #28]
    d0bc:	9401      	str	r4, [sp, #4]
    d0be:	9c06      	ldr	r4, [sp, #24]
    d0c0:	9400      	str	r4, [sp, #0]
    d0c2:	f7ff ffe6 	bl	d092 <os_dev_init>
    if (rc != 0) {
    d0c6:	4603      	mov	r3, r0
    d0c8:	b110      	cbz	r0, d0d0 <os_dev_create+0x1c>
    if (g_os_started) {
        rc = os_dev_initialize(dev);
    }
err:
    return (rc);
}
    d0ca:	4618      	mov	r0, r3
    d0cc:	b003      	add	sp, #12
    d0ce:	bd30      	pop	{r4, r5, pc}
    rc = os_dev_add(dev);
    d0d0:	4628      	mov	r0, r5
    d0d2:	f7ff ff9d 	bl	d010 <os_dev_add>
    if (rc != 0) {
    d0d6:	4603      	mov	r3, r0
    d0d8:	2800      	cmp	r0, #0
    d0da:	d1f6      	bne.n	d0ca <os_dev_create+0x16>
    if (g_os_started) {
    d0dc:	4a04      	ldr	r2, [pc, #16]	; (d0f0 <os_dev_create+0x3c>)
    d0de:	6812      	ldr	r2, [r2, #0]
    d0e0:	2a00      	cmp	r2, #0
    d0e2:	d0f2      	beq.n	d0ca <os_dev_create+0x16>
        rc = os_dev_initialize(dev);
    d0e4:	4628      	mov	r0, r5
    d0e6:	f7ff ffc1 	bl	d06c <os_dev_initialize>
    d0ea:	4603      	mov	r3, r0
    return (rc);
    d0ec:	e7ed      	b.n	d0ca <os_dev_create+0x16>
    d0ee:	bf00      	nop
    d0f0:	2000339c 	.word	0x2000339c

0000d0f4 <os_dev_initialize_all>:

int
os_dev_initialize_all(uint8_t stage)
{
    d0f4:	b538      	push	{r3, r4, r5, lr}
    d0f6:	4605      	mov	r5, r0
    struct os_dev *dev;
    int rc = 0;

    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
    d0f8:	4b08      	ldr	r3, [pc, #32]	; (d11c <os_dev_initialize_all+0x28>)
    d0fa:	681c      	ldr	r4, [r3, #0]
    int rc = 0;
    d0fc:	2200      	movs	r2, #0
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
    d0fe:	e000      	b.n	d102 <os_dev_initialize_all+0xe>
    d100:	6a24      	ldr	r4, [r4, #32]
    d102:	b144      	cbz	r4, d116 <os_dev_initialize_all+0x22>
        if (dev->od_stage == stage) {
    d104:	7e23      	ldrb	r3, [r4, #24]
    d106:	42ab      	cmp	r3, r5
    d108:	d1fa      	bne.n	d100 <os_dev_initialize_all+0xc>
            rc = os_dev_initialize(dev);
    d10a:	4620      	mov	r0, r4
    d10c:	f7ff ffae 	bl	d06c <os_dev_initialize>
            if (rc) {
    d110:	4602      	mov	r2, r0
    d112:	2800      	cmp	r0, #0
    d114:	d0f4      	beq.n	d100 <os_dev_initialize_all+0xc>
            }
        }
    }

    return (rc);
}
    d116:	4610      	mov	r0, r2
    d118:	bd38      	pop	{r3, r4, r5, pc}
    d11a:	bf00      	nop
    d11c:	20000ea0 	.word	0x20000ea0

0000d120 <os_dev_lookup>:
    return (rc);
}

struct os_dev *
os_dev_lookup(const char *name)
{
    d120:	b538      	push	{r3, r4, r5, lr}
    d122:	4605      	mov	r5, r0
    struct os_dev *dev;

    dev = NULL;
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
    d124:	4b05      	ldr	r3, [pc, #20]	; (d13c <os_dev_lookup+0x1c>)
    d126:	681c      	ldr	r4, [r3, #0]
    d128:	b134      	cbz	r4, d138 <os_dev_lookup+0x18>
        if (!strcmp(dev->od_name, name)) {
    d12a:	4629      	mov	r1, r5
    d12c:	69e0      	ldr	r0, [r4, #28]
    d12e:	f001 fc85 	bl	ea3c <strcmp>
    d132:	b108      	cbz	r0, d138 <os_dev_lookup+0x18>
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
    d134:	6a24      	ldr	r4, [r4, #32]
    d136:	e7f7      	b.n	d128 <os_dev_lookup+0x8>
            break;
        }
    }
    return (dev);
}
    d138:	4620      	mov	r0, r4
    d13a:	bd38      	pop	{r3, r4, r5, pc}
    d13c:	20000ea0 	.word	0x20000ea0

0000d140 <os_dev_open>:

struct os_dev *
os_dev_open(const char *devname, uint32_t timo, void *arg)
{
    d140:	b570      	push	{r4, r5, r6, lr}
    d142:	460d      	mov	r5, r1
    d144:	4616      	mov	r6, r2
    struct os_dev *dev;
    os_sr_t sr;
    int rc;

    dev = os_dev_lookup(devname);
    d146:	f7ff ffeb 	bl	d120 <os_dev_lookup>
    if (dev == NULL) {
    d14a:	4604      	mov	r4, r0
    d14c:	b1a0      	cbz	r0, d178 <os_dev_open+0x38>
        return (NULL);
    }

    /* Device is not ready to be opened. */
    if ((dev->od_flags & OS_DEV_F_STATUS_READY) == 0) {
    d14e:	7ec3      	ldrb	r3, [r0, #27]
    d150:	f013 0f01 	tst.w	r3, #1
    d154:	d012      	beq.n	d17c <os_dev_open+0x3c>
        return (NULL);
    }

    if (dev->od_handlers.od_open) {
    d156:	6803      	ldr	r3, [r0, #0]
    d158:	b11b      	cbz	r3, d162 <os_dev_open+0x22>
        rc = dev->od_handlers.od_open(dev, timo, arg);
    d15a:	4632      	mov	r2, r6
    d15c:	4629      	mov	r1, r5
    d15e:	4798      	blx	r3
        if (rc != 0) {
    d160:	b970      	cbnz	r0, d180 <os_dev_open+0x40>
            goto err;
        }
    }

    OS_ENTER_CRITICAL(sr);
    d162:	f001 f9e7 	bl	e534 <os_arch_save_sr>
    ++dev->od_open_ref;
    d166:	7ea3      	ldrb	r3, [r4, #26]
    d168:	3301      	adds	r3, #1
    d16a:	76a3      	strb	r3, [r4, #26]
    dev->od_flags |= OS_DEV_F_STATUS_OPEN;
    d16c:	7ee3      	ldrb	r3, [r4, #27]
    d16e:	f043 0302 	orr.w	r3, r3, #2
    d172:	76e3      	strb	r3, [r4, #27]
    OS_EXIT_CRITICAL(sr);
    d174:	f001 f9e4 	bl	e540 <os_arch_restore_sr>

    return (dev);
err:
    return (NULL);
}
    d178:	4620      	mov	r0, r4
    d17a:	bd70      	pop	{r4, r5, r6, pc}
        return (NULL);
    d17c:	2400      	movs	r4, #0
    d17e:	e7fb      	b.n	d178 <os_dev_open+0x38>
    return (NULL);
    d180:	2400      	movs	r4, #0
    d182:	e7f9      	b.n	d178 <os_dev_open+0x38>

0000d184 <os_dev_reset>:
}

void
os_dev_reset(void)
{
    STAILQ_INIT(&g_os_dev_list);
    d184:	4b02      	ldr	r3, [pc, #8]	; (d190 <os_dev_reset+0xc>)
    d186:	2200      	movs	r2, #0
    d188:	601a      	str	r2, [r3, #0]
    d18a:	605b      	str	r3, [r3, #4]
}
    d18c:	4770      	bx	lr
    d18e:	bf00      	nop
    d190:	20000ea0 	.word	0x20000ea0

0000d194 <os_eventq_init>:
static struct os_eventq os_eventq_main;

void
os_eventq_init(struct os_eventq *evq)
{
    memset(evq, 0, sizeof(*evq));
    d194:	2200      	movs	r2, #0
    d196:	6002      	str	r2, [r0, #0]
    d198:	6042      	str	r2, [r0, #4]
    STAILQ_INIT(&evq->evq_list);
    d19a:	4603      	mov	r3, r0
    d19c:	f843 2f08 	str.w	r2, [r3, #8]!
    d1a0:	60c3      	str	r3, [r0, #12]
}
    d1a2:	4770      	bx	lr

0000d1a4 <os_eventq_inited>:

int
os_eventq_inited(const struct os_eventq *evq)
{
    return evq->evq_list.stqh_last != NULL;
    d1a4:	68c0      	ldr	r0, [r0, #12]
}
    d1a6:	3000      	adds	r0, #0
    d1a8:	bf18      	it	ne
    d1aa:	2001      	movne	r0, #1
    d1ac:	4770      	bx	lr

0000d1ae <os_eventq_put>:

void
os_eventq_put(struct os_eventq *evq, struct os_event *ev)
{
    d1ae:	b570      	push	{r4, r5, r6, lr}
    int resched;
    os_sr_t sr;

    assert(evq != NULL && os_eventq_inited(evq));
    d1b0:	b1f0      	cbz	r0, d1f0 <os_eventq_put+0x42>
    d1b2:	460c      	mov	r4, r1
    d1b4:	4605      	mov	r5, r0
    d1b6:	f7ff fff5 	bl	d1a4 <os_eventq_inited>
    d1ba:	b1c8      	cbz	r0, d1f0 <os_eventq_put+0x42>

    os_trace_api_u32x2(OS_TRACE_ID_EVENTQ_PUT, (uint32_t)evq, (uint32_t)ev);

    OS_ENTER_CRITICAL(sr);
    d1bc:	f001 f9ba 	bl	e534 <os_arch_save_sr>
    d1c0:	4606      	mov	r6, r0

    /* Do not queue if already queued */
    if (OS_EVENT_QUEUED(ev)) {
    d1c2:	7823      	ldrb	r3, [r4, #0]
    d1c4:	b9f3      	cbnz	r3, d204 <os_eventq_put+0x56>
        os_trace_api_ret(OS_TRACE_ID_EVENTQ_PUT);
        return;
    }

    /* Queue the event */
    ev->ev_queued = 1;
    d1c6:	2301      	movs	r3, #1
    d1c8:	7023      	strb	r3, [r4, #0]
    STAILQ_INSERT_TAIL(&evq->evq_list, ev, ev_next);
    d1ca:	2300      	movs	r3, #0
    d1cc:	60e3      	str	r3, [r4, #12]
    d1ce:	68eb      	ldr	r3, [r5, #12]
    d1d0:	601c      	str	r4, [r3, #0]
    d1d2:	340c      	adds	r4, #12
    d1d4:	60ec      	str	r4, [r5, #12]

    resched = 0;
    if (evq->evq_task) {
    d1d6:	6868      	ldr	r0, [r5, #4]
    d1d8:	b1d8      	cbz	r0, d212 <os_eventq_put+0x64>
        /* If task waiting on event, wake it up.
         * Check if task is sleeping, because another event
         * queue may have woken this task up beforehand.
         */
        if (evq->evq_task->t_state == OS_TASK_SLEEP) {
    d1da:	7b03      	ldrb	r3, [r0, #12]
    d1dc:	2b02      	cmp	r3, #2
    d1de:	d014      	beq.n	d20a <os_eventq_put+0x5c>
    resched = 0;
    d1e0:	2400      	movs	r4, #0
            resched = 1;
        }
        /* Either way, NULL out the task, because the task will
         * be awake upon exit of this function.
         */
        evq->evq_task = NULL;
    d1e2:	2300      	movs	r3, #0
    d1e4:	606b      	str	r3, [r5, #4]
    }

    OS_EXIT_CRITICAL(sr);
    d1e6:	4630      	mov	r0, r6
    d1e8:	f001 f9aa 	bl	e540 <os_arch_restore_sr>

    if (resched) {
    d1ec:	b99c      	cbnz	r4, d216 <os_eventq_put+0x68>
        os_sched(NULL);
    }

    os_trace_api_ret(OS_TRACE_ID_EVENTQ_PUT);
}
    d1ee:	bd70      	pop	{r4, r5, r6, pc}
    assert(evq != NULL && os_eventq_inited(evq));
    d1f0:	f7fe fffa 	bl	c1e8 <hal_debugger_connected>
    d1f4:	b100      	cbz	r0, d1f8 <os_eventq_put+0x4a>
    d1f6:	be01      	bkpt	0x0001
    d1f8:	2300      	movs	r3, #0
    d1fa:	461a      	mov	r2, r3
    d1fc:	4619      	mov	r1, r3
    d1fe:	4618      	mov	r0, r3
    d200:	f7ff fca6 	bl	cb50 <__assert_func>
        OS_EXIT_CRITICAL(sr);
    d204:	f001 f99c 	bl	e540 <os_arch_restore_sr>
    d208:	e7f1      	b.n	d1ee <os_eventq_put+0x40>
            os_sched_wakeup(evq->evq_task);
    d20a:	f000 ff11 	bl	e030 <os_sched_wakeup>
            resched = 1;
    d20e:	2401      	movs	r4, #1
    d210:	e7e7      	b.n	d1e2 <os_eventq_put+0x34>
    resched = 0;
    d212:	2400      	movs	r4, #0
    d214:	e7e7      	b.n	d1e6 <os_eventq_put+0x38>
        os_sched(NULL);
    d216:	2000      	movs	r0, #0
    d218:	f000 ff96 	bl	e148 <os_sched>
    d21c:	e7e7      	b.n	d1ee <os_eventq_put+0x40>

0000d21e <os_eventq_get_no_wait>:
{
    struct os_event *ev;

    os_trace_api_u32(OS_TRACE_ID_EVENTQ_GET_NO_WAIT, (uint32_t)evq);

    ev = STAILQ_FIRST(&evq->evq_list);
    d21e:	6883      	ldr	r3, [r0, #8]
    if (ev) {
    d220:	b123      	cbz	r3, d22c <os_eventq_get_no_wait+0xe>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
    d222:	68da      	ldr	r2, [r3, #12]
    d224:	6082      	str	r2, [r0, #8]
    d226:	b11a      	cbz	r2, d230 <os_eventq_get_no_wait+0x12>
        ev->ev_queued = 0;
    d228:	2200      	movs	r2, #0
    d22a:	701a      	strb	r2, [r3, #0]
    }

    os_trace_api_ret_u32(OS_TRACE_ID_EVENTQ_GET_NO_WAIT, (uint32_t)ev);

    return ev;
}
    d22c:	4618      	mov	r0, r3
    d22e:	4770      	bx	lr
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
    d230:	f100 0208 	add.w	r2, r0, #8
    d234:	60c2      	str	r2, [r0, #12]
    d236:	e7f7      	b.n	d228 <os_eventq_get_no_wait+0xa>

0000d238 <os_eventq_get>:

struct os_event *
os_eventq_get(struct os_eventq *evq)
{
    d238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d23a:	4605      	mov	r5, r0
    os_sr_t sr;
    struct os_task *t;

    os_trace_api_u32(OS_TRACE_ID_EVENTQ_GET, (uint32_t)evq);

    t = os_sched_get_current_task();
    d23c:	f000 fea4 	bl	df88 <os_sched_get_current_task>
    d240:	4604      	mov	r4, r0
    if (evq->evq_owner != t) {
    d242:	682b      	ldr	r3, [r5, #0]
    d244:	4283      	cmp	r3, r0
    d246:	d001      	beq.n	d24c <os_eventq_get+0x14>
        if (evq->evq_owner == NULL) {
    d248:	b9db      	cbnz	r3, d282 <os_eventq_get+0x4a>
            evq->evq_owner = t;
    d24a:	6028      	str	r0, [r5, #0]
             * by another.
             */
            assert(0);
        }
    }
    OS_ENTER_CRITICAL(sr);
    d24c:	f001 f972 	bl	e534 <os_arch_save_sr>
    d250:	4607      	mov	r7, r0
pull_one:
    ev = STAILQ_FIRST(&evq->evq_list);
    d252:	68ae      	ldr	r6, [r5, #8]
    if (ev) {
    d254:	b9fe      	cbnz	r6, d296 <os_eventq_get+0x5e>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
        ev->ev_queued = 0;
        t->t_flags &= ~OS_TASK_FLAG_EVQ_WAIT;
    } else {
        evq->evq_task = t;
    d256:	606c      	str	r4, [r5, #4]
        os_sched_sleep(evq->evq_task, OS_TIMEOUT_NEVER);
    d258:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    d25c:	4620      	mov	r0, r4
    d25e:	f000 fe9f 	bl	dfa0 <os_sched_sleep>
        t->t_flags |= OS_TASK_FLAG_EVQ_WAIT;
    d262:	7b63      	ldrb	r3, [r4, #13]
    d264:	f043 0308 	orr.w	r3, r3, #8
    d268:	7363      	strb	r3, [r4, #13]
        OS_EXIT_CRITICAL(sr);
    d26a:	4638      	mov	r0, r7
    d26c:	f001 f968 	bl	e540 <os_arch_restore_sr>

        os_sched(NULL);
    d270:	2000      	movs	r0, #0
    d272:	f000 ff69 	bl	e148 <os_sched>

        OS_ENTER_CRITICAL(sr);
    d276:	f001 f95d 	bl	e534 <os_arch_save_sr>
    d27a:	4607      	mov	r7, r0
        evq->evq_task = NULL;
    d27c:	2300      	movs	r3, #0
    d27e:	606b      	str	r3, [r5, #4]
        goto pull_one;
    d280:	e7e7      	b.n	d252 <os_eventq_get+0x1a>
            assert(0);
    d282:	f7fe ffb1 	bl	c1e8 <hal_debugger_connected>
    d286:	b100      	cbz	r0, d28a <os_eventq_get+0x52>
    d288:	be01      	bkpt	0x0001
    d28a:	2300      	movs	r3, #0
    d28c:	461a      	mov	r2, r3
    d28e:	4619      	mov	r1, r3
    d290:	4618      	mov	r0, r3
    d292:	f7ff fc5d 	bl	cb50 <__assert_func>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
    d296:	68f3      	ldr	r3, [r6, #12]
    d298:	60ab      	str	r3, [r5, #8]
    d29a:	b153      	cbz	r3, d2b2 <os_eventq_get+0x7a>
        ev->ev_queued = 0;
    d29c:	2300      	movs	r3, #0
    d29e:	7033      	strb	r3, [r6, #0]
        t->t_flags &= ~OS_TASK_FLAG_EVQ_WAIT;
    d2a0:	7b63      	ldrb	r3, [r4, #13]
    d2a2:	f023 0308 	bic.w	r3, r3, #8
    d2a6:	7363      	strb	r3, [r4, #13]
    }
    OS_EXIT_CRITICAL(sr);
    d2a8:	4638      	mov	r0, r7
    d2aa:	f001 f949 	bl	e540 <os_arch_restore_sr>
#if MYNEWT_VAL(OS_EVENTQ_DEBUG)
    evq->evq_prev = ev;
#endif

    return (ev);
}
    d2ae:	4630      	mov	r0, r6
    d2b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
    d2b2:	f105 0308 	add.w	r3, r5, #8
    d2b6:	60eb      	str	r3, [r5, #12]
    d2b8:	e7f0      	b.n	d29c <os_eventq_get+0x64>

0000d2ba <os_eventq_run>:
}
#endif

void
os_eventq_run(struct os_eventq *evq)
{
    d2ba:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_EVENTQ_MONITOR)
    struct os_eventq_mon *mon;
    uint32_t ticks;
#endif

    ev = os_eventq_get(evq);
    d2bc:	f7ff ffbc 	bl	d238 <os_eventq_get>
    assert(ev->ev_cb != NULL);
    d2c0:	6843      	ldr	r3, [r0, #4]
    d2c2:	b10b      	cbz	r3, d2c8 <os_eventq_run+0xe>
#if MYNEWT_VAL(OS_EVENTQ_MONITOR)
    ticks = os_cputime_get32();
#endif
    ev->ev_cb(ev);
    d2c4:	4798      	blx	r3
        if (ticks > mon->em_max) {
            mon->em_max = ticks;
        }
    }
#endif
}
    d2c6:	bd08      	pop	{r3, pc}
    assert(ev->ev_cb != NULL);
    d2c8:	f7fe ff8e 	bl	c1e8 <hal_debugger_connected>
    d2cc:	b100      	cbz	r0, d2d0 <os_eventq_run+0x16>
    d2ce:	be01      	bkpt	0x0001
    d2d0:	2300      	movs	r3, #0
    d2d2:	461a      	mov	r2, r3
    d2d4:	4619      	mov	r1, r3
    d2d6:	4618      	mov	r0, r3
    d2d8:	f7ff fc3a 	bl	cb50 <__assert_func>

0000d2dc <os_eventq_remove>:
    return (ev);
}

void
os_eventq_remove(struct os_eventq *evq, struct os_event *ev)
{
    d2dc:	b538      	push	{r3, r4, r5, lr}
    d2de:	4605      	mov	r5, r0
    d2e0:	460c      	mov	r4, r1
    os_sr_t sr;

    os_trace_api_u32x2(OS_TRACE_ID_EVENTQ_REMOVE, (uint32_t)evq, (uint32_t)ev);

    OS_ENTER_CRITICAL(sr);
    d2e2:	f001 f927 	bl	e534 <os_arch_save_sr>
    if (OS_EVENT_QUEUED(ev)) {
    d2e6:	7823      	ldrb	r3, [r4, #0]
    d2e8:	b183      	cbz	r3, d30c <os_eventq_remove+0x30>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
    d2ea:	68aa      	ldr	r2, [r5, #8]
    d2ec:	42a2      	cmp	r2, r4
    d2ee:	d107      	bne.n	d300 <os_eventq_remove+0x24>
    d2f0:	68d3      	ldr	r3, [r2, #12]
    d2f2:	60ab      	str	r3, [r5, #8]
    d2f4:	b953      	cbnz	r3, d30c <os_eventq_remove+0x30>
    d2f6:	f105 0308 	add.w	r3, r5, #8
    d2fa:	60eb      	str	r3, [r5, #12]
    d2fc:	e006      	b.n	d30c <os_eventq_remove+0x30>
    d2fe:	461a      	mov	r2, r3
    d300:	68d3      	ldr	r3, [r2, #12]
    d302:	42a3      	cmp	r3, r4
    d304:	d1fb      	bne.n	d2fe <os_eventq_remove+0x22>
    d306:	68db      	ldr	r3, [r3, #12]
    d308:	60d3      	str	r3, [r2, #12]
    d30a:	b123      	cbz	r3, d316 <os_eventq_remove+0x3a>
    }
    ev->ev_queued = 0;
    d30c:	2300      	movs	r3, #0
    d30e:	7023      	strb	r3, [r4, #0]
    OS_EXIT_CRITICAL(sr);
    d310:	f001 f916 	bl	e540 <os_arch_restore_sr>

    os_trace_api_ret(OS_TRACE_ID_EVENTQ_REMOVE);
}
    d314:	bd38      	pop	{r3, r4, r5, pc}
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
    d316:	320c      	adds	r2, #12
    d318:	60ea      	str	r2, [r5, #12]
    d31a:	e7f7      	b.n	d30c <os_eventq_remove+0x30>

0000d31c <os_eventq_dflt_get>:

struct os_eventq *
os_eventq_dflt_get(void)
{
    return &os_eventq_main;
}
    d31c:	4800      	ldr	r0, [pc, #0]	; (d320 <os_eventq_dflt_get+0x4>)
    d31e:	4770      	bx	lr
    d320:	20000ea8 	.word	0x20000ea8

0000d324 <os_mqueue_init>:
#endif
#include "os/mynewt.h"

int
os_mqueue_init(struct os_mqueue *mq, os_event_fn *ev_cb, void *arg)
{
    d324:	4603      	mov	r3, r0
    struct os_event *ev;

    STAILQ_INIT(&mq->mq_head);
    d326:	2000      	movs	r0, #0
    d328:	6018      	str	r0, [r3, #0]
    d32a:	605b      	str	r3, [r3, #4]

    ev = &mq->mq_ev;
    memset(ev, 0, sizeof(*ev));
    d32c:	6098      	str	r0, [r3, #8]
    d32e:	6158      	str	r0, [r3, #20]
    ev->ev_cb = ev_cb;
    d330:	60d9      	str	r1, [r3, #12]
    ev->ev_arg = arg;
    d332:	611a      	str	r2, [r3, #16]

    return (0);
}
    d334:	4770      	bx	lr

0000d336 <os_mqueue_get>:

struct os_mbuf *
os_mqueue_get(struct os_mqueue *mq)
{
    d336:	b538      	push	{r3, r4, r5, lr}
    d338:	4605      	mov	r5, r0
    struct os_mbuf_pkthdr *mp;
    struct os_mbuf *m;
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
    d33a:	f001 f8fb 	bl	e534 <os_arch_save_sr>
    mp = STAILQ_FIRST(&mq->mq_head);
    d33e:	682c      	ldr	r4, [r5, #0]
    if (mp) {
    d340:	b114      	cbz	r4, d348 <os_mqueue_get+0x12>
        STAILQ_REMOVE_HEAD(&mq->mq_head, omp_next);
    d342:	6863      	ldr	r3, [r4, #4]
    d344:	602b      	str	r3, [r5, #0]
    d346:	b12b      	cbz	r3, d354 <os_mqueue_get+0x1e>
    }
    OS_EXIT_CRITICAL(sr);
    d348:	f001 f8fa 	bl	e540 <os_arch_restore_sr>

    if (mp) {
    d34c:	b124      	cbz	r4, d358 <os_mqueue_get+0x22>
        m = OS_MBUF_PKTHDR_TO_MBUF(mp);
    d34e:	f1a4 0010 	sub.w	r0, r4, #16
    } else {
        m = NULL;
    }

    return (m);
}
    d352:	bd38      	pop	{r3, r4, r5, pc}
        STAILQ_REMOVE_HEAD(&mq->mq_head, omp_next);
    d354:	606d      	str	r5, [r5, #4]
    d356:	e7f7      	b.n	d348 <os_mqueue_get+0x12>
        m = NULL;
    d358:	2000      	movs	r0, #0
    return (m);
    d35a:	e7fa      	b.n	d352 <os_mqueue_get+0x1c>

0000d35c <os_mqueue_put>:

int
os_mqueue_put(struct os_mqueue *mq, struct os_eventq *evq, struct os_mbuf *m)
{
    d35c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    struct os_mbuf_pkthdr *mp;
    os_sr_t sr;
    int rc;

    /* Can only place the head of a chained mbuf on the queue. */
    if (!OS_MBUF_IS_PKTHDR(m)) {
    d35e:	7953      	ldrb	r3, [r2, #5]
    d360:	2b07      	cmp	r3, #7
    d362:	d916      	bls.n	d392 <os_mqueue_put+0x36>
    d364:	4614      	mov	r4, r2
    d366:	460e      	mov	r6, r1
    d368:	4605      	mov	r5, r0
        rc = OS_EINVAL;
        goto err;
    }

    mp = OS_MBUF_PKTHDR(m);
    d36a:	f102 0710 	add.w	r7, r2, #16

    OS_ENTER_CRITICAL(sr);
    d36e:	f001 f8e1 	bl	e534 <os_arch_save_sr>
    STAILQ_INSERT_TAIL(&mq->mq_head, mp, omp_next);
    d372:	2300      	movs	r3, #0
    d374:	f844 3f14 	str.w	r3, [r4, #20]!
    d378:	686b      	ldr	r3, [r5, #4]
    d37a:	601f      	str	r7, [r3, #0]
    d37c:	606c      	str	r4, [r5, #4]
    OS_EXIT_CRITICAL(sr);
    d37e:	f001 f8df 	bl	e540 <os_arch_restore_sr>

    /* Only post an event to the queue if its specified */
    if (evq) {
    d382:	b146      	cbz	r6, d396 <os_mqueue_put+0x3a>
        os_eventq_put(evq, &mq->mq_ev);
    d384:	f105 0108 	add.w	r1, r5, #8
    d388:	4630      	mov	r0, r6
    d38a:	f7ff ff10 	bl	d1ae <os_eventq_put>
    }

    return (0);
    d38e:	2000      	movs	r0, #0
    d390:	e000      	b.n	d394 <os_mqueue_put+0x38>
err:
    return (rc);
    d392:	2002      	movs	r0, #2
}
    d394:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return (0);
    d396:	2000      	movs	r0, #0
    d398:	e7fc      	b.n	d394 <os_mqueue_put+0x38>

0000d39a <os_mbuf_pool_init>:

int
os_mbuf_pool_init(struct os_mbuf_pool *omp, struct os_mempool *mp,
                  uint16_t buf_len, uint16_t nbufs)
{
    omp->omp_databuf_len = buf_len - sizeof(struct os_mbuf);
    d39a:	3a10      	subs	r2, #16
    d39c:	8002      	strh	r2, [r0, #0]
    omp->omp_pool = mp;
    d39e:	6041      	str	r1, [r0, #4]

    return (0);
}
    d3a0:	2000      	movs	r0, #0
    d3a2:	4770      	bx	lr

0000d3a4 <os_mbuf_get>:

struct os_mbuf *
os_mbuf_get(struct os_mbuf_pool *omp, uint16_t leadingspace)
{
    d3a4:	b538      	push	{r3, r4, r5, lr}
    struct os_mbuf *om;

    os_trace_api_u32x2(OS_TRACE_ID_MBUF_GET, (uint32_t)omp,
                       (uint32_t)leadingspace);

    if (leadingspace > omp->omp_databuf_len) {
    d3a6:	8803      	ldrh	r3, [r0, #0]
    d3a8:	428b      	cmp	r3, r1
    d3aa:	d312      	bcc.n	d3d2 <os_mbuf_get+0x2e>
    d3ac:	460d      	mov	r5, r1
    d3ae:	4604      	mov	r4, r0
        om = NULL;
        goto done;
    }

    om = os_memblock_get(omp->omp_pool);
    d3b0:	6840      	ldr	r0, [r0, #4]
    d3b2:	f000 fc2b 	bl	dc0c <os_memblock_get>
    if (!om) {
    d3b6:	4603      	mov	r3, r0
    d3b8:	b148      	cbz	r0, d3ce <os_mbuf_get+0x2a>
        goto done;
    }

    SLIST_NEXT(om, om_next) = NULL;
    d3ba:	2200      	movs	r2, #0
    d3bc:	60c2      	str	r2, [r0, #12]
    om->om_flags = 0;
    d3be:	7102      	strb	r2, [r0, #4]
    om->om_pkthdr_len = 0;
    d3c0:	7142      	strb	r2, [r0, #5]
    om->om_len = 0;
    d3c2:	80c2      	strh	r2, [r0, #6]
    om->om_data = (&om->om_databuf[0] + leadingspace);
    d3c4:	f100 0110 	add.w	r1, r0, #16
    d3c8:	4429      	add	r1, r5
    d3ca:	6001      	str	r1, [r0, #0]
    om->om_omp = omp;
    d3cc:	6084      	str	r4, [r0, #8]

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_GET, (uint32_t)om);
    return om;
}
    d3ce:	4618      	mov	r0, r3
    d3d0:	bd38      	pop	{r3, r4, r5, pc}
        om = NULL;
    d3d2:	2300      	movs	r3, #0
    return om;
    d3d4:	e7fb      	b.n	d3ce <os_mbuf_get+0x2a>

0000d3d6 <os_mbuf_get_pkthdr>:

struct os_mbuf *
os_mbuf_get_pkthdr(struct os_mbuf_pool *omp, uint8_t user_pkthdr_len)
{
    d3d6:	b538      	push	{r3, r4, r5, lr}

    os_trace_api_u32x2(OS_TRACE_ID_MBUF_GET_PKTHDR, (uint32_t)omp,
                       (uint32_t)user_pkthdr_len);

    /* User packet header must fit inside mbuf */
    pkthdr_len = user_pkthdr_len + sizeof(struct os_mbuf_pkthdr);
    d3d8:	f101 0508 	add.w	r5, r1, #8
    if ((pkthdr_len > omp->omp_databuf_len) || (pkthdr_len > 255)) {
    d3dc:	8803      	ldrh	r3, [r0, #0]
    d3de:	42ab      	cmp	r3, r5
    d3e0:	d310      	bcc.n	d404 <os_mbuf_get_pkthdr+0x2e>
    d3e2:	2dff      	cmp	r5, #255	; 0xff
    d3e4:	d810      	bhi.n	d408 <os_mbuf_get_pkthdr+0x32>
        om = NULL;
        goto done;
    }

    om = os_mbuf_get(omp, 0);
    d3e6:	2100      	movs	r1, #0
    d3e8:	f7ff ffdc 	bl	d3a4 <os_mbuf_get>
    if (om) {
    d3ec:	4603      	mov	r3, r0
    d3ee:	b138      	cbz	r0, d400 <os_mbuf_get_pkthdr+0x2a>
        om->om_pkthdr_len = pkthdr_len;
    d3f0:	715d      	strb	r5, [r3, #5]
        om->om_data += pkthdr_len;
    d3f2:	6802      	ldr	r2, [r0, #0]
    d3f4:	4415      	add	r5, r2
    d3f6:	6005      	str	r5, [r0, #0]

        pkthdr = OS_MBUF_PKTHDR(om);
        pkthdr->omp_len = 0;
    d3f8:	2200      	movs	r2, #0
    d3fa:	8202      	strh	r2, [r0, #16]
        pkthdr->omp_flags = 0;
    d3fc:	8242      	strh	r2, [r0, #18]
        STAILQ_NEXT(pkthdr, omp_next) = NULL;
    d3fe:	6142      	str	r2, [r0, #20]
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_GET_PKTHDR, (uint32_t)om);
    return om;
}
    d400:	4618      	mov	r0, r3
    d402:	bd38      	pop	{r3, r4, r5, pc}
        om = NULL;
    d404:	2300      	movs	r3, #0
    d406:	e7fb      	b.n	d400 <os_mbuf_get_pkthdr+0x2a>
    d408:	2300      	movs	r3, #0
    return om;
    d40a:	e7f9      	b.n	d400 <os_mbuf_get_pkthdr+0x2a>

0000d40c <os_mbuf_free>:

int
os_mbuf_free(struct os_mbuf *om)
{
    d40c:	b508      	push	{r3, lr}
    int rc;

    os_trace_api_u32(OS_TRACE_ID_MBUF_FREE, (uint32_t)om);

    if (om->om_omp != NULL) {
    d40e:	6883      	ldr	r3, [r0, #8]
    d410:	b123      	cbz	r3, d41c <os_mbuf_free+0x10>
    d412:	4601      	mov	r1, r0
        rc = os_memblock_put(om->om_omp->omp_pool, om);
    d414:	6858      	ldr	r0, [r3, #4]
    d416:	f000 fc21 	bl	dc5c <os_memblock_put>
    rc = 0;

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_FREE, (uint32_t)rc);
    return (rc);
}
    d41a:	bd08      	pop	{r3, pc}
    rc = 0;
    d41c:	2000      	movs	r0, #0
    return (rc);
    d41e:	e7fc      	b.n	d41a <os_mbuf_free+0xe>

0000d420 <os_mbuf_free_chain>:

int
os_mbuf_free_chain(struct os_mbuf *om)
{
    d420:	4603      	mov	r3, r0
    struct os_mbuf *next;
    int rc;

    os_trace_api_u32(OS_TRACE_ID_MBUF_FREE_CHAIN, (uint32_t)om);

    while (om != NULL) {
    d422:	b160      	cbz	r0, d43e <os_mbuf_free_chain+0x1e>
{
    d424:	b510      	push	{r4, lr}
        next = SLIST_NEXT(om, om_next);
    d426:	68dc      	ldr	r4, [r3, #12]

        rc = os_mbuf_free(om);
    d428:	4618      	mov	r0, r3
    d42a:	f7ff ffef 	bl	d40c <os_mbuf_free>
        if (rc != 0) {
            goto done;
        }

        om = next;
    d42e:	4623      	mov	r3, r4
        if (rc != 0) {
    d430:	4602      	mov	r2, r0
    d432:	b910      	cbnz	r0, d43a <os_mbuf_free_chain+0x1a>
    while (om != NULL) {
    d434:	2c00      	cmp	r4, #0
    d436:	d1f6      	bne.n	d426 <os_mbuf_free_chain+0x6>
    }

    rc = 0;
    d438:	2200      	movs	r2, #0

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_FREE_CHAIN, (uint32_t)rc);
    return (rc);
}
    d43a:	4610      	mov	r0, r2
    d43c:	bd10      	pop	{r4, pc}
    rc = 0;
    d43e:	2200      	movs	r2, #0
}
    d440:	4610      	mov	r0, r2
    d442:	4770      	bx	lr

0000d444 <os_mbuf_len>:
uint16_t
os_mbuf_len(const struct os_mbuf *om)
{
    uint16_t len;

    len = 0;
    d444:	2300      	movs	r3, #0
    while (om != NULL) {
    d446:	e003      	b.n	d450 <os_mbuf_len+0xc>
        len += om->om_len;
    d448:	88c2      	ldrh	r2, [r0, #6]
    d44a:	4413      	add	r3, r2
    d44c:	b29b      	uxth	r3, r3
        om = SLIST_NEXT(om, om_next);
    d44e:	68c0      	ldr	r0, [r0, #12]
    while (om != NULL) {
    d450:	2800      	cmp	r0, #0
    d452:	d1f9      	bne.n	d448 <os_mbuf_len+0x4>
    }

    return len;
}
    d454:	4618      	mov	r0, r3
    d456:	4770      	bx	lr

0000d458 <os_mbuf_append>:

int
os_mbuf_append(struct os_mbuf *om, const void *data,  uint16_t len)
{
    d458:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    struct os_mbuf *new;
    int remainder;
    int space;
    int rc;

    if (om == NULL) {
    d45c:	2800      	cmp	r0, #0
    d45e:	d04d      	beq.n	d4fc <os_mbuf_append+0xa4>
    d460:	460f      	mov	r7, r1
    d462:	4691      	mov	r9, r2
    d464:	4682      	mov	sl, r0
        rc = OS_EINVAL;
        goto err;
    }

    omp = om->om_omp;
    d466:	f8d0 8008 	ldr.w	r8, [r0, #8]

    /* Scroll to last mbuf in the chain */
    last = om;
    d46a:	4605      	mov	r5, r0
    while (SLIST_NEXT(last, om_next) != NULL) {
    d46c:	e000      	b.n	d470 <os_mbuf_append+0x18>
        last = SLIST_NEXT(last, om_next);
    d46e:	461d      	mov	r5, r3
    while (SLIST_NEXT(last, om_next) != NULL) {
    d470:	68eb      	ldr	r3, [r5, #12]
    d472:	2b00      	cmp	r3, #0
    d474:	d1fb      	bne.n	d46e <os_mbuf_append+0x16>
    }

    remainder = len;
    d476:	464e      	mov	r6, r9
static inline uint16_t
_os_mbuf_trailingspace(struct os_mbuf *om)
{
    struct os_mbuf_pool *omp;

    omp = om->om_omp;
    d478:	68ab      	ldr	r3, [r5, #8]

    return (&om->om_databuf[0] + omp->omp_databuf_len) -
    d47a:	f105 0410 	add.w	r4, r5, #16
    d47e:	881b      	ldrh	r3, [r3, #0]
    d480:	441c      	add	r4, r3
      (om->om_data + om->om_len);
    d482:	6828      	ldr	r0, [r5, #0]
    d484:	88eb      	ldrh	r3, [r5, #6]
    d486:	4418      	add	r0, r3
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
    d488:	1a24      	subs	r4, r4, r0
    d48a:	b2a4      	uxth	r4, r4
    space = OS_MBUF_TRAILINGSPACE(last);

    /* If room in current mbuf, copy the first part of the data into the
     * remaining space in that mbuf.
     */
    if (space > 0) {
    d48c:	b164      	cbz	r4, d4a8 <os_mbuf_append+0x50>
        if (space > remainder) {
    d48e:	454c      	cmp	r4, r9
    d490:	dd00      	ble.n	d494 <os_mbuf_append+0x3c>
            space = remainder;
    d492:	464c      	mov	r4, r9
        }

        memcpy(OS_MBUF_DATA(last, uint8_t *) + last->om_len , data, space);
    d494:	4622      	mov	r2, r4
    d496:	4639      	mov	r1, r7
    d498:	f001 fa82 	bl	e9a0 <memcpy>

        last->om_len += space;
    d49c:	88eb      	ldrh	r3, [r5, #6]
    d49e:	4423      	add	r3, r4
    d4a0:	80eb      	strh	r3, [r5, #6]
        data += space;
    d4a2:	4427      	add	r7, r4
        remainder -= space;
    d4a4:	eba9 0604 	sub.w	r6, r9, r4
    }

    /* Take the remaining data, and keep allocating new mbufs and copying
     * data into it, until data is exhausted.
     */
    while (remainder > 0) {
    d4a8:	2e00      	cmp	r6, #0
    d4aa:	dd16      	ble.n	d4da <os_mbuf_append+0x82>
        new = os_mbuf_get(omp, 0);
    d4ac:	2100      	movs	r1, #0
    d4ae:	4640      	mov	r0, r8
    d4b0:	f7ff ff78 	bl	d3a4 <os_mbuf_get>
        if (!new) {
    d4b4:	4604      	mov	r4, r0
    d4b6:	b180      	cbz	r0, d4da <os_mbuf_append+0x82>
            break;
        }

        new->om_len = min(omp->omp_databuf_len, remainder);
    d4b8:	f8b8 2000 	ldrh.w	r2, [r8]
    d4bc:	42b2      	cmp	r2, r6
    d4be:	bfa8      	it	ge
    d4c0:	4632      	movge	r2, r6
    d4c2:	b292      	uxth	r2, r2
    d4c4:	80c2      	strh	r2, [r0, #6]
        memcpy(OS_MBUF_DATA(new, void *), data, new->om_len);
    d4c6:	4639      	mov	r1, r7
    d4c8:	6800      	ldr	r0, [r0, #0]
    d4ca:	f001 fa69 	bl	e9a0 <memcpy>
        data += new->om_len;
    d4ce:	88e3      	ldrh	r3, [r4, #6]
    d4d0:	441f      	add	r7, r3
        remainder -= new->om_len;
    d4d2:	1af6      	subs	r6, r6, r3
        SLIST_NEXT(last, om_next) = new;
    d4d4:	60ec      	str	r4, [r5, #12]
        last = new;
    d4d6:	4625      	mov	r5, r4
    d4d8:	e7e6      	b.n	d4a8 <os_mbuf_append+0x50>
    }

    /* Adjust the packet header length in the buffer */
    if (OS_MBUF_IS_PKTHDR(om)) {
    d4da:	f89a 3005 	ldrb.w	r3, [sl, #5]
    d4de:	2b07      	cmp	r3, #7
    d4e0:	d907      	bls.n	d4f2 <os_mbuf_append+0x9a>
        OS_MBUF_PKTHDR(om)->omp_len += len - remainder;
    d4e2:	eba9 0906 	sub.w	r9, r9, r6
    d4e6:	f8ba 3010 	ldrh.w	r3, [sl, #16]
    d4ea:	fa13 f989 	uxtah	r9, r3, r9
    d4ee:	f8aa 9010 	strh.w	r9, [sl, #16]
    }

    if (remainder != 0) {
    d4f2:	b106      	cbz	r6, d4f6 <os_mbuf_append+0x9e>
        rc = OS_ENOMEM;
    d4f4:	2601      	movs	r6, #1


    return (0);
err:
    return (rc);
}
    d4f6:	4630      	mov	r0, r6
    d4f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        rc = OS_EINVAL;
    d4fc:	2602      	movs	r6, #2
    d4fe:	e7fa      	b.n	d4f6 <os_mbuf_append+0x9e>

0000d500 <os_mbuf_off>:

    /* Cast away const. */
    cur = (struct os_mbuf *)om;

    while (1) {
        if (cur == NULL) {
    d500:	b170      	cbz	r0, d520 <os_mbuf_off+0x20>
{
    d502:	b410      	push	{r4}
    d504:	e002      	b.n	d50c <os_mbuf_off+0xc>

            *out_off = off;
            return cur;
        }

        off -= cur->om_len;
    d506:	1ac9      	subs	r1, r1, r3
        cur = next;
    d508:	4620      	mov	r0, r4
        if (cur == NULL) {
    d50a:	b13c      	cbz	r4, d51c <os_mbuf_off+0x1c>
        next = SLIST_NEXT(cur, om_next);
    d50c:	68c4      	ldr	r4, [r0, #12]
        if (cur->om_len > off ||
    d50e:	88c3      	ldrh	r3, [r0, #6]
    d510:	428b      	cmp	r3, r1
    d512:	dc02      	bgt.n	d51a <os_mbuf_off+0x1a>
    d514:	d1f7      	bne.n	d506 <os_mbuf_off+0x6>
            (cur->om_len == off && next == NULL)) {
    d516:	2c00      	cmp	r4, #0
    d518:	d1f5      	bne.n	d506 <os_mbuf_off+0x6>
            *out_off = off;
    d51a:	8011      	strh	r1, [r2, #0]
    }
}
    d51c:	bc10      	pop	{r4}
    d51e:	4770      	bx	lr
    d520:	4770      	bx	lr

0000d522 <os_mbuf_appendfrom>:
{
    d522:	b5f0      	push	{r4, r5, r6, r7, lr}
    d524:	b083      	sub	sp, #12
    d526:	4607      	mov	r7, r0
    d528:	4608      	mov	r0, r1
    d52a:	4611      	mov	r1, r2
    d52c:	461e      	mov	r6, r3
    src_cur_om = os_mbuf_off(src, src_off, &src_cur_off);
    d52e:	f10d 0206 	add.w	r2, sp, #6
    d532:	f7ff ffe5 	bl	d500 <os_mbuf_off>
    d536:	4605      	mov	r5, r0
    while (len > 0) {
    d538:	b1be      	cbz	r6, d56a <os_mbuf_appendfrom+0x48>
        if (src_cur_om == NULL) {
    d53a:	b1d5      	cbz	r5, d572 <os_mbuf_appendfrom+0x50>
        chunk_sz = min(len, src_cur_om->om_len - src_cur_off);
    d53c:	88ec      	ldrh	r4, [r5, #6]
    d53e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    d542:	1ae4      	subs	r4, r4, r3
    d544:	42b4      	cmp	r4, r6
    d546:	bfa8      	it	ge
    d548:	4634      	movge	r4, r6
    d54a:	b2a4      	uxth	r4, r4
        rc = os_mbuf_append(dst, src_cur_om->om_data + src_cur_off, chunk_sz);
    d54c:	6829      	ldr	r1, [r5, #0]
    d54e:	4622      	mov	r2, r4
    d550:	4419      	add	r1, r3
    d552:	4638      	mov	r0, r7
    d554:	f7ff ff80 	bl	d458 <os_mbuf_append>
        if (rc != 0) {
    d558:	4603      	mov	r3, r0
    d55a:	b938      	cbnz	r0, d56c <os_mbuf_appendfrom+0x4a>
        len -= chunk_sz;
    d55c:	1b34      	subs	r4, r6, r4
    d55e:	b2a6      	uxth	r6, r4
        src_cur_om = SLIST_NEXT(src_cur_om, om_next);
    d560:	68ed      	ldr	r5, [r5, #12]
        src_cur_off = 0;
    d562:	2300      	movs	r3, #0
    d564:	f8ad 3006 	strh.w	r3, [sp, #6]
    d568:	e7e6      	b.n	d538 <os_mbuf_appendfrom+0x16>
    return 0;
    d56a:	2300      	movs	r3, #0
}
    d56c:	4618      	mov	r0, r3
    d56e:	b003      	add	sp, #12
    d570:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return OS_EINVAL;
    d572:	2302      	movs	r3, #2
    d574:	e7fa      	b.n	d56c <os_mbuf_appendfrom+0x4a>

0000d576 <os_mbuf_copydata>:

int
os_mbuf_copydata(const struct os_mbuf *m, int off, int len, void *dst)
{
    d576:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d578:	4604      	mov	r4, r0
    d57a:	461f      	mov	r7, r3
    unsigned int count;
    uint8_t *udst;

    if (!len) {
    d57c:	4616      	mov	r6, r2
    d57e:	b312      	cbz	r2, d5c6 <os_mbuf_copydata+0x50>
        return 0;
    }

    udst = dst;

    while (off > 0) {
    d580:	2900      	cmp	r1, #0
    d582:	dd06      	ble.n	d592 <os_mbuf_copydata+0x1c>
        if (!m) {
    d584:	b30c      	cbz	r4, d5ca <os_mbuf_copydata+0x54>
            return (-1);
        }

        if (off < m->om_len)
    d586:	88e3      	ldrh	r3, [r4, #6]
    d588:	428b      	cmp	r3, r1
    d58a:	dc02      	bgt.n	d592 <os_mbuf_copydata+0x1c>
            break;
        off -= m->om_len;
    d58c:	1ac9      	subs	r1, r1, r3
        m = SLIST_NEXT(m, om_next);
    d58e:	68e4      	ldr	r4, [r4, #12]
    d590:	e7f6      	b.n	d580 <os_mbuf_copydata+0xa>
    }
    while (len > 0 && m != NULL) {
    d592:	2e00      	cmp	r6, #0
    d594:	dd10      	ble.n	d5b8 <os_mbuf_copydata+0x42>
    d596:	b17c      	cbz	r4, d5b8 <os_mbuf_copydata+0x42>
        count = min(m->om_len - off, len);
    d598:	88e5      	ldrh	r5, [r4, #6]
    d59a:	1a6d      	subs	r5, r5, r1
    d59c:	42b5      	cmp	r5, r6
    d59e:	bfa8      	it	ge
    d5a0:	4635      	movge	r5, r6
        memcpy(udst, m->om_data + off, count);
    d5a2:	6823      	ldr	r3, [r4, #0]
    d5a4:	462a      	mov	r2, r5
    d5a6:	4419      	add	r1, r3
    d5a8:	4638      	mov	r0, r7
    d5aa:	f001 f9f9 	bl	e9a0 <memcpy>
        len -= count;
    d5ae:	1b76      	subs	r6, r6, r5
        udst += count;
    d5b0:	442f      	add	r7, r5
        off = 0;
        m = SLIST_NEXT(m, om_next);
    d5b2:	68e4      	ldr	r4, [r4, #12]
        off = 0;
    d5b4:	2100      	movs	r1, #0
    d5b6:	e7ec      	b.n	d592 <os_mbuf_copydata+0x1c>
    }

    return (len > 0 ? -1 : 0);
    d5b8:	2e00      	cmp	r6, #0
    d5ba:	dc01      	bgt.n	d5c0 <os_mbuf_copydata+0x4a>
    d5bc:	2000      	movs	r0, #0
    d5be:	e003      	b.n	d5c8 <os_mbuf_copydata+0x52>
    d5c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    d5c4:	e000      	b.n	d5c8 <os_mbuf_copydata+0x52>
        return 0;
    d5c6:	4610      	mov	r0, r2
}
    d5c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return (-1);
    d5ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    d5ce:	e7fb      	b.n	d5c8 <os_mbuf_copydata+0x52>

0000d5d0 <os_mbuf_adj>:
{
    int len = req_len;
    struct os_mbuf *m;
    int count;

    if ((m = mp) == NULL)
    d5d0:	2800      	cmp	r0, #0
    d5d2:	d04e      	beq.n	d672 <os_mbuf_adj+0xa2>
{
    d5d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d5d6:	4604      	mov	r4, r0
        return;
    if (len >= 0) {
    d5d8:	2900      	cmp	r1, #0
    d5da:	db1c      	blt.n	d616 <os_mbuf_adj+0x46>
    if ((m = mp) == NULL)
    d5dc:	4603      	mov	r3, r0
    int len = req_len;
    d5de:	460a      	mov	r2, r1
    d5e0:	e005      	b.n	d5ee <os_mbuf_adj+0x1e>
            if (m->om_len <= len) {
                len -= m->om_len;
                m->om_len = 0;
                m = SLIST_NEXT(m, om_next);
            } else {
                m->om_len -= len;
    d5e2:	1a80      	subs	r0, r0, r2
    d5e4:	80d8      	strh	r0, [r3, #6]
                m->om_data += len;
    d5e6:	6818      	ldr	r0, [r3, #0]
    d5e8:	4402      	add	r2, r0
    d5ea:	601a      	str	r2, [r3, #0]
                len = 0;
    d5ec:	2200      	movs	r2, #0
        while (m != NULL && len > 0) {
    d5ee:	b14b      	cbz	r3, d604 <os_mbuf_adj+0x34>
    d5f0:	2a00      	cmp	r2, #0
    d5f2:	dd07      	ble.n	d604 <os_mbuf_adj+0x34>
            if (m->om_len <= len) {
    d5f4:	88d8      	ldrh	r0, [r3, #6]
    d5f6:	4290      	cmp	r0, r2
    d5f8:	dcf3      	bgt.n	d5e2 <os_mbuf_adj+0x12>
                len -= m->om_len;
    d5fa:	1a12      	subs	r2, r2, r0
                m->om_len = 0;
    d5fc:	2000      	movs	r0, #0
    d5fe:	80d8      	strh	r0, [r3, #6]
                m = SLIST_NEXT(m, om_next);
    d600:	68db      	ldr	r3, [r3, #12]
    d602:	e7f4      	b.n	d5ee <os_mbuf_adj+0x1e>
            }
        }
        if (OS_MBUF_IS_PKTHDR(mp))
    d604:	7963      	ldrb	r3, [r4, #5]
    d606:	2b07      	cmp	r3, #7
    d608:	d904      	bls.n	d614 <os_mbuf_adj+0x44>
            OS_MBUF_PKTHDR(mp)->omp_len -= (req_len - len);
    d60a:	1a52      	subs	r2, r2, r1
    d60c:	8a21      	ldrh	r1, [r4, #16]
    d60e:	fa11 f282 	uxtah	r2, r1, r2
    d612:	8222      	strh	r2, [r4, #16]
                break;
            }
            count -= m->om_len;
        }
    }
}
    d614:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        len = -len;
    d616:	424f      	negs	r7, r1
        count = 0;
    d618:	2200      	movs	r2, #0
    d61a:	e000      	b.n	d61e <os_mbuf_adj+0x4e>
            m = SLIST_NEXT(m, om_next);
    d61c:	4628      	mov	r0, r5
            count += m->om_len;
    d61e:	88c3      	ldrh	r3, [r0, #6]
    d620:	441a      	add	r2, r3
            if (SLIST_NEXT(m, om_next) == (struct os_mbuf *)0)
    d622:	68c5      	ldr	r5, [r0, #12]
    d624:	2d00      	cmp	r5, #0
    d626:	d1f9      	bne.n	d61c <os_mbuf_adj+0x4c>
        if (m->om_len >= len) {
    d628:	42bb      	cmp	r3, r7
    d62a:	db09      	blt.n	d640 <os_mbuf_adj+0x70>
            m->om_len -= len;
    d62c:	b2bf      	uxth	r7, r7
    d62e:	1bdb      	subs	r3, r3, r7
    d630:	80c3      	strh	r3, [r0, #6]
            if (OS_MBUF_IS_PKTHDR(mp))
    d632:	7963      	ldrb	r3, [r4, #5]
    d634:	2b07      	cmp	r3, #7
    d636:	d9ed      	bls.n	d614 <os_mbuf_adj+0x44>
                OS_MBUF_PKTHDR(mp)->omp_len -= len;
    d638:	8a23      	ldrh	r3, [r4, #16]
    d63a:	1bdf      	subs	r7, r3, r7
    d63c:	8227      	strh	r7, [r4, #16]
    d63e:	e7e9      	b.n	d614 <os_mbuf_adj+0x44>
        if (count < 0)
    d640:	188a      	adds	r2, r1, r2
    d642:	d40b      	bmi.n	d65c <os_mbuf_adj+0x8c>
        if (OS_MBUF_IS_PKTHDR(m))
    d644:	7963      	ldrb	r3, [r4, #5]
    d646:	2b07      	cmp	r3, #7
    d648:	d900      	bls.n	d64c <os_mbuf_adj+0x7c>
            OS_MBUF_PKTHDR(m)->omp_len = count;
    d64a:	8222      	strh	r2, [r4, #16]
        for (; m; m = SLIST_NEXT(m, om_next)) {
    d64c:	2c00      	cmp	r4, #0
    d64e:	d0e1      	beq.n	d614 <os_mbuf_adj+0x44>
            if (m->om_len >= count) {
    d650:	88e3      	ldrh	r3, [r4, #6]
    d652:	4293      	cmp	r3, r2
    d654:	da04      	bge.n	d660 <os_mbuf_adj+0x90>
            count -= m->om_len;
    d656:	1ad2      	subs	r2, r2, r3
        for (; m; m = SLIST_NEXT(m, om_next)) {
    d658:	68e4      	ldr	r4, [r4, #12]
    d65a:	e7f7      	b.n	d64c <os_mbuf_adj+0x7c>
            count = 0;
    d65c:	2200      	movs	r2, #0
    d65e:	e7f1      	b.n	d644 <os_mbuf_adj+0x74>
                m->om_len = count;
    d660:	80e2      	strh	r2, [r4, #6]
                if (SLIST_NEXT(m, om_next) != NULL) {
    d662:	68e0      	ldr	r0, [r4, #12]
    d664:	2800      	cmp	r0, #0
    d666:	d0d5      	beq.n	d614 <os_mbuf_adj+0x44>
                    os_mbuf_free_chain(SLIST_NEXT(m, om_next));
    d668:	f7ff feda 	bl	d420 <os_mbuf_free_chain>
                    SLIST_NEXT(m, om_next) = NULL;
    d66c:	2300      	movs	r3, #0
    d66e:	60e3      	str	r3, [r4, #12]
    d670:	e7d0      	b.n	d614 <os_mbuf_adj+0x44>
    d672:	4770      	bx	lr

0000d674 <os_mbuf_cmpf>:

int
os_mbuf_cmpf(const struct os_mbuf *om, int off, const void *data, int len)
{
    d674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d678:	b082      	sub	sp, #8
    uint16_t chunk_sz;
    uint16_t data_off;
    uint16_t om_off;
    int rc;

    if (len <= 0) {
    d67a:	1e1e      	subs	r6, r3, #0
    d67c:	dd2d      	ble.n	d6da <os_mbuf_cmpf+0x66>
    d67e:	4617      	mov	r7, r2
        return 0;
    }

    data_off = 0;
    om = os_mbuf_off(om, off, &om_off);
    d680:	f10d 0206 	add.w	r2, sp, #6
    d684:	f7ff ff3c 	bl	d500 <os_mbuf_off>
    d688:	4604      	mov	r4, r0
    data_off = 0;
    d68a:	f04f 0800 	mov.w	r8, #0
    d68e:	e009      	b.n	d6a4 <os_mbuf_cmpf+0x30>
            if (rc != 0) {
                return rc;
            }
        }

        data_off += chunk_sz;
    d690:	4445      	add	r5, r8
    d692:	fa1f f885 	uxth.w	r8, r5
        if (data_off == len) {
    d696:	45b0      	cmp	r8, r6
    d698:	d027      	beq.n	d6ea <os_mbuf_cmpf+0x76>
            return 0;
        }

        om = SLIST_NEXT(om, om_next);
    d69a:	68e4      	ldr	r4, [r4, #12]
        om_off = 0;
    d69c:	2300      	movs	r3, #0
    d69e:	f8ad 3006 	strh.w	r3, [sp, #6]

        if (om == NULL) {
    d6a2:	b1bc      	cbz	r4, d6d4 <os_mbuf_cmpf+0x60>
        if (om == NULL) {
    d6a4:	b1f4      	cbz	r4, d6e4 <os_mbuf_cmpf+0x70>
        chunk_sz = min(om->om_len - om_off, len - data_off);
    d6a6:	eba6 0208 	sub.w	r2, r6, r8
    d6aa:	88e3      	ldrh	r3, [r4, #6]
    d6ac:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    d6b0:	1a1b      	subs	r3, r3, r0
    d6b2:	429a      	cmp	r2, r3
    d6b4:	bfa8      	it	ge
    d6b6:	461a      	movge	r2, r3
    d6b8:	b295      	uxth	r5, r2
        if (chunk_sz > 0) {
    d6ba:	2d00      	cmp	r5, #0
    d6bc:	d0e8      	beq.n	d690 <os_mbuf_cmpf+0x1c>
            rc = memcmp(om->om_data + om_off, data + data_off, chunk_sz);
    d6be:	6823      	ldr	r3, [r4, #0]
    d6c0:	462a      	mov	r2, r5
    d6c2:	eb07 0108 	add.w	r1, r7, r8
    d6c6:	4418      	add	r0, r3
    d6c8:	f001 f946 	bl	e958 <memcmp>
            if (rc != 0) {
    d6cc:	4603      	mov	r3, r0
    d6ce:	2800      	cmp	r0, #0
    d6d0:	d0de      	beq.n	d690 <os_mbuf_cmpf+0x1c>
    d6d2:	e003      	b.n	d6dc <os_mbuf_cmpf+0x68>
            return INT_MAX;
    d6d4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    d6d8:	e000      	b.n	d6dc <os_mbuf_cmpf+0x68>
        return 0;
    d6da:	2300      	movs	r3, #0
        }
    }
}
    d6dc:	4618      	mov	r0, r3
    d6de:	b002      	add	sp, #8
    d6e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return INT_MAX;
    d6e4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    d6e8:	e7f8      	b.n	d6dc <os_mbuf_cmpf+0x68>
            return 0;
    d6ea:	2300      	movs	r3, #0
    d6ec:	e7f6      	b.n	d6dc <os_mbuf_cmpf+0x68>

0000d6ee <os_mbuf_prepend>:
    }
}

struct os_mbuf *
os_mbuf_prepend(struct os_mbuf *om, int len)
{
    d6ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d6f0:	4604      	mov	r4, r0
    d6f2:	460e      	mov	r6, r1
    d6f4:	e019      	b.n	d72a <os_mbuf_prepend+0x3c>
    startoff = 0;
    d6f6:	2000      	movs	r0, #0
    d6f8:	e01b      	b.n	d732 <os_mbuf_prepend+0x44>
        /* The current head didn't have enough space; allocate a new head. */
        if (OS_MBUF_IS_PKTHDR(om)) {
            p = os_mbuf_get_pkthdr(om->om_omp,
                om->om_pkthdr_len - sizeof (struct os_mbuf_pkthdr));
        } else {
            p = os_mbuf_get(om->om_omp, 0);
    d6fa:	2100      	movs	r1, #0
    d6fc:	68a0      	ldr	r0, [r4, #8]
    d6fe:	f7ff fe51 	bl	d3a4 <os_mbuf_get>
    d702:	4605      	mov	r5, r0
        }
        if (p == NULL) {
    d704:	2d00      	cmp	r5, #0
    d706:	d033      	beq.n	d770 <os_mbuf_prepend+0x82>
            os_mbuf_free_chain(om);
            om = NULL;
            break;
        }

        if (OS_MBUF_IS_PKTHDR(om)) {
    d708:	7963      	ldrb	r3, [r4, #5]
    d70a:	2b07      	cmp	r3, #7
    d70c:	d836      	bhi.n	d77c <os_mbuf_prepend+0x8e>
    omp = om->om_omp;
    d70e:	68aa      	ldr	r2, [r5, #8]
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
    d710:	f105 0310 	add.w	r3, r5, #16
    d714:	8812      	ldrh	r2, [r2, #0]
    d716:	4413      	add	r3, r2
      (om->om_data + om->om_len);
    d718:	6829      	ldr	r1, [r5, #0]
    d71a:	88ea      	ldrh	r2, [r5, #6]
    d71c:	440a      	add	r2, r1
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
    d71e:	1a9b      	subs	r3, r3, r2
        }

        /* Move the new head's data pointer to the end so that data can be
         * prepended.
         */
        p->om_data += OS_MBUF_TRAILINGSPACE(p);
    d720:	fa11 f383 	uxtah	r3, r1, r3
    d724:	602b      	str	r3, [r5, #0]

        SLIST_NEXT(p, om_next) = om;
    d726:	60ec      	str	r4, [r5, #12]
        om = p;
    d728:	462c      	mov	r4, r5
    if (OS_MBUF_IS_PKTHDR(om)) {
    d72a:	7961      	ldrb	r1, [r4, #5]
    d72c:	2907      	cmp	r1, #7
    d72e:	d9e2      	bls.n	d6f6 <os_mbuf_prepend+0x8>
        startoff = om->om_pkthdr_len;
    d730:	b288      	uxth	r0, r1
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
    d732:	4623      	mov	r3, r4
    d734:	f853 2b10 	ldr.w	r2, [r3], #16
        ((uint8_t *) &om->om_databuf[0] + startoff));
    d738:	4403      	add	r3, r0
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
    d73a:	1ad3      	subs	r3, r2, r3
    d73c:	b29b      	uxth	r3, r3
        leading = min(len, OS_MBUF_LEADINGSPACE(om));
    d73e:	429e      	cmp	r6, r3
    d740:	da00      	bge.n	d744 <os_mbuf_prepend+0x56>
    d742:	4633      	mov	r3, r6
        om->om_data -= leading;
    d744:	1ad2      	subs	r2, r2, r3
    d746:	6022      	str	r2, [r4, #0]
        om->om_len += leading;
    d748:	b298      	uxth	r0, r3
    d74a:	88e2      	ldrh	r2, [r4, #6]
    d74c:	4402      	add	r2, r0
    d74e:	80e2      	strh	r2, [r4, #6]
        if (OS_MBUF_IS_PKTHDR(om)) {
    d750:	2907      	cmp	r1, #7
    d752:	d902      	bls.n	d75a <os_mbuf_prepend+0x6c>
            OS_MBUF_PKTHDR(om)->omp_len += leading;
    d754:	8a22      	ldrh	r2, [r4, #16]
    d756:	4410      	add	r0, r2
    d758:	8220      	strh	r0, [r4, #16]
        if (len == 0) {
    d75a:	1af6      	subs	r6, r6, r3
    d75c:	d00c      	beq.n	d778 <os_mbuf_prepend+0x8a>
        if (OS_MBUF_IS_PKTHDR(om)) {
    d75e:	2907      	cmp	r1, #7
    d760:	d9cb      	bls.n	d6fa <os_mbuf_prepend+0xc>
            p = os_mbuf_get_pkthdr(om->om_omp,
    d762:	3908      	subs	r1, #8
    d764:	b2c9      	uxtb	r1, r1
    d766:	68a0      	ldr	r0, [r4, #8]
    d768:	f7ff fe35 	bl	d3d6 <os_mbuf_get_pkthdr>
    d76c:	4605      	mov	r5, r0
    d76e:	e7c9      	b.n	d704 <os_mbuf_prepend+0x16>
            os_mbuf_free_chain(om);
    d770:	4620      	mov	r0, r4
    d772:	f7ff fe55 	bl	d420 <os_mbuf_free_chain>
            om = NULL;
    d776:	462c      	mov	r4, r5
    }

    return om;
}
    d778:	4620      	mov	r0, r4
    d77a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    assert(new_buf->om_len == 0);
    d77c:	88eb      	ldrh	r3, [r5, #6]
    d77e:	b97b      	cbnz	r3, d7a0 <os_mbuf_prepend+0xb2>
    memcpy(&new_buf->om_databuf[0], &old_buf->om_databuf[0],
    d780:	f105 0710 	add.w	r7, r5, #16
    d784:	7962      	ldrb	r2, [r4, #5]
    d786:	f104 0110 	add.w	r1, r4, #16
    d78a:	4638      	mov	r0, r7
    d78c:	f001 f908 	bl	e9a0 <memcpy>
    new_buf->om_pkthdr_len = old_buf->om_pkthdr_len;
    d790:	7963      	ldrb	r3, [r4, #5]
    d792:	716b      	strb	r3, [r5, #5]
    new_buf->om_data = new_buf->om_databuf + old_buf->om_pkthdr_len;
    d794:	7963      	ldrb	r3, [r4, #5]
    d796:	441f      	add	r7, r3
    d798:	602f      	str	r7, [r5, #0]
            om->om_pkthdr_len = 0;
    d79a:	2300      	movs	r3, #0
    d79c:	7163      	strb	r3, [r4, #5]
    d79e:	e7b6      	b.n	d70e <os_mbuf_prepend+0x20>
    assert(new_buf->om_len == 0);
    d7a0:	f7fe fd22 	bl	c1e8 <hal_debugger_connected>
    d7a4:	b100      	cbz	r0, d7a8 <os_mbuf_prepend+0xba>
    d7a6:	be01      	bkpt	0x0001
    d7a8:	2300      	movs	r3, #0
    d7aa:	461a      	mov	r2, r3
    d7ac:	4619      	mov	r1, r3
    d7ae:	4618      	mov	r0, r3
    d7b0:	f7ff f9ce 	bl	cb50 <__assert_func>

0000d7b4 <os_mbuf_copyinto>:
    return om;
}

int
os_mbuf_copyinto(struct os_mbuf *om, int off, const void *src, int len)
{
    d7b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    d7b8:	b083      	sub	sp, #12
    d7ba:	4681      	mov	r9, r0
    d7bc:	4688      	mov	r8, r1
    d7be:	4617      	mov	r7, r2
    d7c0:	461e      	mov	r6, r3
    uint16_t cur_off;
    int copylen;
    int rc;

    /* Find the mbuf,offset pair for the start of the destination. */
    cur = os_mbuf_off(om, off, &cur_off);
    d7c2:	f10d 0206 	add.w	r2, sp, #6
    d7c6:	f7ff fe9b 	bl	d500 <os_mbuf_off>
    if (cur == NULL) {
    d7ca:	4605      	mov	r5, r0
    d7cc:	b948      	cbnz	r0, d7e2 <os_mbuf_copyinto+0x2e>
        return -1;
    d7ce:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    d7d2:	e02d      	b.n	d830 <os_mbuf_copyinto+0x7c>
            len -= copylen;

            copylen = 0;
        }

        if (len == 0) {
    d7d4:	b366      	cbz	r6, d830 <os_mbuf_copyinto+0x7c>
            /* All the source data fit in the existing mbuf chain. */
            return 0;
        }

        next = SLIST_NEXT(cur, om_next);
    d7d6:	68eb      	ldr	r3, [r5, #12]
        if (next == NULL) {
    d7d8:	b1ab      	cbz	r3, d806 <os_mbuf_copyinto+0x52>
            break;
        }

        cur = next;
        cur_off = 0;
    d7da:	2200      	movs	r2, #0
    d7dc:	f8ad 2006 	strh.w	r2, [sp, #6]
        cur = next;
    d7e0:	461d      	mov	r5, r3
        copylen = min(cur->om_len - cur_off, len);
    d7e2:	88ec      	ldrh	r4, [r5, #6]
    d7e4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    d7e8:	1ae4      	subs	r4, r4, r3
    d7ea:	42b4      	cmp	r4, r6
    d7ec:	bfa8      	it	ge
    d7ee:	4634      	movge	r4, r6
        if (copylen > 0) {
    d7f0:	2c00      	cmp	r4, #0
    d7f2:	ddef      	ble.n	d7d4 <os_mbuf_copyinto+0x20>
            memcpy(cur->om_data + cur_off, sptr, copylen);
    d7f4:	6828      	ldr	r0, [r5, #0]
    d7f6:	4622      	mov	r2, r4
    d7f8:	4639      	mov	r1, r7
    d7fa:	4418      	add	r0, r3
    d7fc:	f001 f8d0 	bl	e9a0 <memcpy>
            sptr += copylen;
    d800:	4427      	add	r7, r4
            len -= copylen;
    d802:	1b36      	subs	r6, r6, r4
    d804:	e7e6      	b.n	d7d4 <os_mbuf_copyinto+0x20>
    }

    /* Append the remaining data to the end of the chain. */
    rc = os_mbuf_append(cur, sptr, len);
    d806:	b2b2      	uxth	r2, r6
    d808:	4639      	mov	r1, r7
    d80a:	4628      	mov	r0, r5
    d80c:	f7ff fe24 	bl	d458 <os_mbuf_append>
    if (rc != 0) {
    d810:	b968      	cbnz	r0, d82e <os_mbuf_copyinto+0x7a>
        return rc;
    }

    /* Fix up the packet header, if one is present. */
    if (OS_MBUF_IS_PKTHDR(om)) {
    d812:	f899 2005 	ldrb.w	r2, [r9, #5]
    d816:	2a07      	cmp	r2, #7
    d818:	d90e      	bls.n	d838 <os_mbuf_copyinto+0x84>
        OS_MBUF_PKTHDR(om)->omp_len =
            max(OS_MBUF_PKTHDR(om)->omp_len, off + len);
    d81a:	4446      	add	r6, r8
    d81c:	f8b9 8010 	ldrh.w	r8, [r9, #16]
    d820:	4546      	cmp	r6, r8
    d822:	bfb8      	it	lt
    d824:	4646      	movlt	r6, r8
        OS_MBUF_PKTHDR(om)->omp_len =
    d826:	f8a9 6010 	strh.w	r6, [r9, #16]
    }

    return 0;
    d82a:	4606      	mov	r6, r0
    d82c:	e000      	b.n	d830 <os_mbuf_copyinto+0x7c>
        return rc;
    d82e:	4606      	mov	r6, r0
}
    d830:	4630      	mov	r0, r6
    d832:	b003      	add	sp, #12
    d834:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return 0;
    d838:	4606      	mov	r6, r0
    d83a:	e7f9      	b.n	d830 <os_mbuf_copyinto+0x7c>

0000d83c <os_mbuf_concat>:
{
    struct os_mbuf *next;
    struct os_mbuf *cur;

    /* Point 'cur' to the last buffer in the first chain. */
    cur = first;
    d83c:	4602      	mov	r2, r0
    d83e:	e000      	b.n	d842 <os_mbuf_concat+0x6>
        next = SLIST_NEXT(cur, om_next);
        if (next == NULL) {
            break;
        }

        cur = next;
    d840:	461a      	mov	r2, r3
        next = SLIST_NEXT(cur, om_next);
    d842:	68d3      	ldr	r3, [r2, #12]
        if (next == NULL) {
    d844:	2b00      	cmp	r3, #0
    d846:	d1fb      	bne.n	d840 <os_mbuf_concat+0x4>
    }

    /* Attach the second chain to the end of the first. */
    SLIST_NEXT(cur, om_next) = second;
    d848:	60d1      	str	r1, [r2, #12]

    /* If the first chain has a packet header, calculate the length of the
     * second chain and add it to the header length.
     */
    if (OS_MBUF_IS_PKTHDR(first)) {
    d84a:	7943      	ldrb	r3, [r0, #5]
    d84c:	2b07      	cmp	r3, #7
    d84e:	d914      	bls.n	d87a <os_mbuf_concat+0x3e>
        if (OS_MBUF_IS_PKTHDR(second)) {
    d850:	794b      	ldrb	r3, [r1, #5]
    d852:	2b07      	cmp	r3, #7
    d854:	d80d      	bhi.n	d872 <os_mbuf_concat+0x36>
            OS_MBUF_PKTHDR(first)->omp_len += OS_MBUF_PKTHDR(second)->omp_len;
        } else {
            for (cur = second; cur != NULL; cur = SLIST_NEXT(cur, om_next)) {
    d856:	460b      	mov	r3, r1
    d858:	b179      	cbz	r1, d87a <os_mbuf_concat+0x3e>
{
    d85a:	b410      	push	{r4}
                OS_MBUF_PKTHDR(first)->omp_len += cur->om_len;
    d85c:	88da      	ldrh	r2, [r3, #6]
    d85e:	8a04      	ldrh	r4, [r0, #16]
    d860:	4422      	add	r2, r4
    d862:	8202      	strh	r2, [r0, #16]
            for (cur = second; cur != NULL; cur = SLIST_NEXT(cur, om_next)) {
    d864:	68db      	ldr	r3, [r3, #12]
    d866:	2b00      	cmp	r3, #0
    d868:	d1f8      	bne.n	d85c <os_mbuf_concat+0x20>
            }
        }
    }

    second->om_pkthdr_len = 0;
    d86a:	2300      	movs	r3, #0
    d86c:	714b      	strb	r3, [r1, #5]
}
    d86e:	bc10      	pop	{r4}
    d870:	4770      	bx	lr
            OS_MBUF_PKTHDR(first)->omp_len += OS_MBUF_PKTHDR(second)->omp_len;
    d872:	8a0b      	ldrh	r3, [r1, #16]
    d874:	8a02      	ldrh	r2, [r0, #16]
    d876:	4413      	add	r3, r2
    d878:	8203      	strh	r3, [r0, #16]
    second->om_pkthdr_len = 0;
    d87a:	2300      	movs	r3, #0
    d87c:	714b      	strb	r3, [r1, #5]
    d87e:	4770      	bx	lr

0000d880 <os_mbuf_extend>:

void *
os_mbuf_extend(struct os_mbuf *om, uint16_t len)
{
    d880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    struct os_mbuf *newm;
    struct os_mbuf *last;
    void *data;

    if (len > om->om_omp->omp_databuf_len) {
    d882:	6887      	ldr	r7, [r0, #8]
    d884:	883b      	ldrh	r3, [r7, #0]
    d886:	428b      	cmp	r3, r1
    d888:	d327      	bcc.n	d8da <os_mbuf_extend+0x5a>
        return NULL;
    }

    /* Scroll to last mbuf in the chain */
    last = om;
    d88a:	4604      	mov	r4, r0
    d88c:	e000      	b.n	d890 <os_mbuf_extend+0x10>
    while (SLIST_NEXT(last, om_next) != NULL) {
        last = SLIST_NEXT(last, om_next);
    d88e:	461c      	mov	r4, r3
    while (SLIST_NEXT(last, om_next) != NULL) {
    d890:	68e3      	ldr	r3, [r4, #12]
    d892:	2b00      	cmp	r3, #0
    d894:	d1fb      	bne.n	d88e <os_mbuf_extend+0xe>
    d896:	460d      	mov	r5, r1
    d898:	4606      	mov	r6, r0
    omp = om->om_omp;
    d89a:	68a2      	ldr	r2, [r4, #8]
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
    d89c:	f104 0310 	add.w	r3, r4, #16
    d8a0:	8812      	ldrh	r2, [r2, #0]
    d8a2:	4413      	add	r3, r2
      (om->om_data + om->om_len);
    d8a4:	6822      	ldr	r2, [r4, #0]
    d8a6:	88e1      	ldrh	r1, [r4, #6]
    d8a8:	440a      	add	r2, r1
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
    d8aa:	1a9b      	subs	r3, r3, r2
    d8ac:	b29b      	uxth	r3, r3
    }

    if (OS_MBUF_TRAILINGSPACE(last) < len) {
    d8ae:	429d      	cmp	r5, r3
    d8b0:	d80b      	bhi.n	d8ca <os_mbuf_extend+0x4a>

        SLIST_NEXT(last, om_next) = newm;
        last = newm;
    }

    data = last->om_data + last->om_len;
    d8b2:	6820      	ldr	r0, [r4, #0]
    d8b4:	88e3      	ldrh	r3, [r4, #6]
    d8b6:	4418      	add	r0, r3
    last->om_len += len;
    d8b8:	442b      	add	r3, r5
    d8ba:	80e3      	strh	r3, [r4, #6]

    if (OS_MBUF_IS_PKTHDR(om)) {
    d8bc:	7973      	ldrb	r3, [r6, #5]
    d8be:	2b07      	cmp	r3, #7
    d8c0:	d902      	bls.n	d8c8 <os_mbuf_extend+0x48>
        OS_MBUF_PKTHDR(om)->omp_len += len;
    d8c2:	8a31      	ldrh	r1, [r6, #16]
    d8c4:	440d      	add	r5, r1
    d8c6:	8235      	strh	r5, [r6, #16]
    }

    return data;
}
    d8c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        newm = os_mbuf_get(om->om_omp, 0);
    d8ca:	2100      	movs	r1, #0
    d8cc:	4638      	mov	r0, r7
    d8ce:	f7ff fd69 	bl	d3a4 <os_mbuf_get>
        if (newm == NULL) {
    d8d2:	b120      	cbz	r0, d8de <os_mbuf_extend+0x5e>
        SLIST_NEXT(last, om_next) = newm;
    d8d4:	60e0      	str	r0, [r4, #12]
        last = newm;
    d8d6:	4604      	mov	r4, r0
    d8d8:	e7eb      	b.n	d8b2 <os_mbuf_extend+0x32>
        return NULL;
    d8da:	2000      	movs	r0, #0
    d8dc:	e7f4      	b.n	d8c8 <os_mbuf_extend+0x48>
            return NULL;
    d8de:	2000      	movs	r0, #0
    d8e0:	e7f2      	b.n	d8c8 <os_mbuf_extend+0x48>

0000d8e2 <os_mbuf_pullup>:


struct os_mbuf *
os_mbuf_pullup(struct os_mbuf *om, uint16_t len)
{
    d8e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d8e6:	4604      	mov	r4, r0
    struct os_mbuf *next;
    struct os_mbuf *om2;
    int count;
    int space;

    omp = om->om_omp;
    d8e8:	6880      	ldr	r0, [r0, #8]
    /*
     * If first mbuf has no cluster, and has room for len bytes
     * without shifting current data, pullup into it,
     * otherwise allocate a new mbuf to prepend to the chain.
     */
    if (om->om_len >= len) {
    d8ea:	88e2      	ldrh	r2, [r4, #6]
    d8ec:	428a      	cmp	r2, r1
    d8ee:	d279      	bcs.n	d9e4 <os_mbuf_pullup+0x102>
    d8f0:	460d      	mov	r5, r1
    d8f2:	f104 0310 	add.w	r3, r4, #16
    d8f6:	8806      	ldrh	r6, [r0, #0]
    d8f8:	4433      	add	r3, r6
      (om->om_data + om->om_len);
    d8fa:	6821      	ldr	r1, [r4, #0]
    d8fc:	4411      	add	r1, r2
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
    d8fe:	1a5b      	subs	r3, r3, r1
        return (om);
    }
    if (om->om_len + OS_MBUF_TRAILINGSPACE(om) >= len &&
    d900:	fa12 f383 	uxtah	r3, r2, r3
    d904:	4629      	mov	r1, r5
    d906:	42ab      	cmp	r3, r5
    d908:	db12      	blt.n	d930 <os_mbuf_pullup+0x4e>
        SLIST_NEXT(om, om_next)) {
    d90a:	68e3      	ldr	r3, [r4, #12]
    if (om->om_len + OS_MBUF_TRAILINGSPACE(om) >= len &&
    d90c:	b183      	cbz	r3, d930 <os_mbuf_pullup+0x4e>
        om2 = om;
        om = SLIST_NEXT(om, om_next);
        len -= om2->om_len;
    d90e:	1aad      	subs	r5, r5, r2
    d910:	b2ad      	uxth	r5, r5
        om2 = om;
    d912:	4627      	mov	r7, r4
        om = SLIST_NEXT(om, om_next);
    d914:	461c      	mov	r4, r3
    omp = om->om_omp;
    d916:	68bb      	ldr	r3, [r7, #8]
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
    d918:	f107 0810 	add.w	r8, r7, #16
    d91c:	881b      	ldrh	r3, [r3, #0]
    d91e:	4498      	add	r8, r3
      (om->om_data + om->om_len);
    d920:	683b      	ldr	r3, [r7, #0]
    d922:	88fa      	ldrh	r2, [r7, #6]
    d924:	4413      	add	r3, r2
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
    d926:	eba8 0803 	sub.w	r8, r8, r3
    d92a:	fa1f f888 	uxth.w	r8, r8
    d92e:	e02d      	b.n	d98c <os_mbuf_pullup+0xaa>
    } else {
        if (len > omp->omp_databuf_len - om->om_pkthdr_len) {
    d930:	7963      	ldrb	r3, [r4, #5]
    d932:	1af6      	subs	r6, r6, r3
    d934:	42b1      	cmp	r1, r6
    d936:	dc50      	bgt.n	d9da <os_mbuf_pullup+0xf8>
            goto bad;
        }

        om2 = os_mbuf_get(omp, 0);
    d938:	2100      	movs	r1, #0
    d93a:	f7ff fd33 	bl	d3a4 <os_mbuf_get>
        if (om2 == NULL) {
    d93e:	4607      	mov	r7, r0
    d940:	2800      	cmp	r0, #0
    d942:	d04a      	beq.n	d9da <os_mbuf_pullup+0xf8>
            goto bad;
        }

        if (OS_MBUF_IS_PKTHDR(om)) {
    d944:	7963      	ldrb	r3, [r4, #5]
    d946:	2b07      	cmp	r3, #7
    d948:	d9e5      	bls.n	d916 <os_mbuf_pullup+0x34>
    assert(new_buf->om_len == 0);
    d94a:	88c3      	ldrh	r3, [r0, #6]
    d94c:	b96b      	cbnz	r3, d96a <os_mbuf_pullup+0x88>
    memcpy(&new_buf->om_databuf[0], &old_buf->om_databuf[0],
    d94e:	f100 0610 	add.w	r6, r0, #16
    d952:	7962      	ldrb	r2, [r4, #5]
    d954:	f104 0110 	add.w	r1, r4, #16
    d958:	4630      	mov	r0, r6
    d95a:	f001 f821 	bl	e9a0 <memcpy>
    new_buf->om_pkthdr_len = old_buf->om_pkthdr_len;
    d95e:	7963      	ldrb	r3, [r4, #5]
    d960:	717b      	strb	r3, [r7, #5]
    new_buf->om_data = new_buf->om_databuf + old_buf->om_pkthdr_len;
    d962:	7963      	ldrb	r3, [r4, #5]
    d964:	441e      	add	r6, r3
    d966:	603e      	str	r6, [r7, #0]
    d968:	e7d5      	b.n	d916 <os_mbuf_pullup+0x34>
    assert(new_buf->om_len == 0);
    d96a:	f7fe fc3d 	bl	c1e8 <hal_debugger_connected>
    d96e:	b100      	cbz	r0, d972 <os_mbuf_pullup+0x90>
    d970:	be01      	bkpt	0x0001
    d972:	2300      	movs	r3, #0
    d974:	461a      	mov	r2, r3
    d976:	4619      	mov	r1, r3
    d978:	4618      	mov	r0, r3
    d97a:	f7ff f8e9 	bl	cb50 <__assert_func>
        om->om_len -= count;
        space -= count;
        if (om->om_len) {
            om->om_data += count;
        } else {
            next = SLIST_NEXT(om, om_next);
    d97e:	68e6      	ldr	r6, [r4, #12]
            os_mbuf_free(om);
    d980:	4620      	mov	r0, r4
    d982:	f7ff fd43 	bl	d40c <os_mbuf_free>
            om = next;
    d986:	4634      	mov	r4, r6
        }
    } while (len > 0 && om);
    d988:	b30d      	cbz	r5, d9ce <os_mbuf_pullup+0xec>
    d98a:	b304      	cbz	r4, d9ce <os_mbuf_pullup+0xec>
        count = min(min(len, space), om->om_len);
    d98c:	88e6      	ldrh	r6, [r4, #6]
    d98e:	462b      	mov	r3, r5
    d990:	4545      	cmp	r5, r8
    d992:	bfa8      	it	ge
    d994:	4643      	movge	r3, r8
    d996:	429e      	cmp	r6, r3
    d998:	bfa8      	it	ge
    d99a:	461e      	movge	r6, r3
        memcpy(om2->om_data + om2->om_len, om->om_data, count);
    d99c:	6838      	ldr	r0, [r7, #0]
    d99e:	88fb      	ldrh	r3, [r7, #6]
    d9a0:	4632      	mov	r2, r6
    d9a2:	6821      	ldr	r1, [r4, #0]
    d9a4:	4418      	add	r0, r3
    d9a6:	f000 fffb 	bl	e9a0 <memcpy>
        len -= count;
    d9aa:	b2b2      	uxth	r2, r6
    d9ac:	1aad      	subs	r5, r5, r2
    d9ae:	b2ad      	uxth	r5, r5
        om2->om_len += count;
    d9b0:	88fb      	ldrh	r3, [r7, #6]
    d9b2:	4413      	add	r3, r2
    d9b4:	80fb      	strh	r3, [r7, #6]
        om->om_len -= count;
    d9b6:	88e3      	ldrh	r3, [r4, #6]
    d9b8:	1a9b      	subs	r3, r3, r2
    d9ba:	b29b      	uxth	r3, r3
    d9bc:	80e3      	strh	r3, [r4, #6]
        space -= count;
    d9be:	eba8 0806 	sub.w	r8, r8, r6
        if (om->om_len) {
    d9c2:	2b00      	cmp	r3, #0
    d9c4:	d0db      	beq.n	d97e <os_mbuf_pullup+0x9c>
            om->om_data += count;
    d9c6:	6823      	ldr	r3, [r4, #0]
    d9c8:	441e      	add	r6, r3
    d9ca:	6026      	str	r6, [r4, #0]
    d9cc:	e7dc      	b.n	d988 <os_mbuf_pullup+0xa6>
    if (len > 0) {
    d9ce:	b90d      	cbnz	r5, d9d4 <os_mbuf_pullup+0xf2>
        os_mbuf_free(om2);
        goto bad;
    }
    SLIST_NEXT(om2, om_next) = om;
    d9d0:	60fc      	str	r4, [r7, #12]
    return (om2);
    d9d2:	e008      	b.n	d9e6 <os_mbuf_pullup+0x104>
        os_mbuf_free(om2);
    d9d4:	4638      	mov	r0, r7
    d9d6:	f7ff fd19 	bl	d40c <os_mbuf_free>
bad:
    os_mbuf_free_chain(om);
    d9da:	4620      	mov	r0, r4
    d9dc:	f7ff fd20 	bl	d420 <os_mbuf_free_chain>
    return (NULL);
    d9e0:	2700      	movs	r7, #0
    d9e2:	e000      	b.n	d9e6 <os_mbuf_pullup+0x104>
        return (om);
    d9e4:	4627      	mov	r7, r4
}
    d9e6:	4638      	mov	r0, r7
    d9e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d9ec <os_mbuf_prepend_pullup>:
{
    d9ec:	b510      	push	{r4, lr}
    d9ee:	460c      	mov	r4, r1
    om = os_mbuf_prepend(om, len);
    d9f0:	f7ff fe7d 	bl	d6ee <os_mbuf_prepend>
    if (om == NULL) {
    d9f4:	4603      	mov	r3, r0
    d9f6:	b118      	cbz	r0, da00 <os_mbuf_prepend_pullup+0x14>
    om = os_mbuf_pullup(om, len);
    d9f8:	4621      	mov	r1, r4
    d9fa:	f7ff ff72 	bl	d8e2 <os_mbuf_pullup>
    d9fe:	4603      	mov	r3, r0
}
    da00:	4618      	mov	r0, r3
    da02:	bd10      	pop	{r4, pc}

0000da04 <os_mbuf_trim_front>:

struct os_mbuf *
os_mbuf_trim_front(struct os_mbuf *om)
{
    da04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    da06:	4606      	mov	r6, r0
    struct os_mbuf *next;
    struct os_mbuf *cur;

    /* Abort early if there is nothing to trim. */
    if (om->om_len != 0) {
    da08:	88c7      	ldrh	r7, [r0, #6]
    da0a:	b9d7      	cbnz	r7, da42 <os_mbuf_trim_front+0x3e>
    }

    /* Starting with the second mbuf in the chain, continue removing and
     * freeing mbufs until an non-empty one is encountered.
     */
    cur = SLIST_NEXT(om, om_next);
    da0c:	68c4      	ldr	r4, [r0, #12]
    while (cur != NULL && cur->om_len == 0) {
    da0e:	e005      	b.n	da1c <os_mbuf_trim_front+0x18>
        next = SLIST_NEXT(cur, om_next);
    da10:	68e5      	ldr	r5, [r4, #12]

        SLIST_NEXT(om, om_next) = next;
    da12:	60f5      	str	r5, [r6, #12]
        os_mbuf_free(cur);
    da14:	4620      	mov	r0, r4
    da16:	f7ff fcf9 	bl	d40c <os_mbuf_free>

        cur = next;
    da1a:	462c      	mov	r4, r5
    while (cur != NULL && cur->om_len == 0) {
    da1c:	b114      	cbz	r4, da24 <os_mbuf_trim_front+0x20>
    da1e:	88e3      	ldrh	r3, [r4, #6]
    da20:	2b00      	cmp	r3, #0
    da22:	d0f5      	beq.n	da10 <os_mbuf_trim_front+0xc>
    }

    if (cur == NULL) {
    da24:	b16c      	cbz	r4, da42 <os_mbuf_trim_front+0x3e>
    if (OS_MBUF_IS_PKTHDR(om)) {
    da26:	7963      	ldrb	r3, [r4, #5]
    da28:	2b07      	cmp	r3, #7
    da2a:	d900      	bls.n	da2e <os_mbuf_trim_front+0x2a>
        startoff = om->om_pkthdr_len;
    da2c:	b29f      	uxth	r7, r3
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
    da2e:	4620      	mov	r0, r4
    da30:	f850 3b10 	ldr.w	r3, [r0], #16
        ((uint8_t *) &om->om_databuf[0] + startoff));
    da34:	4407      	add	r7, r0
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
    da36:	1bdf      	subs	r7, r3, r7
    da38:	b2bf      	uxth	r7, r7
    }

    /* Try to remove the first mbuf in the chain.  If this buffer contains a
     * packet header, make sure the second buffer can accommodate it.
     */
    if (OS_MBUF_LEADINGSPACE(cur) >= om->om_pkthdr_len) {
    da3a:	7973      	ldrb	r3, [r6, #5]
    da3c:	b29a      	uxth	r2, r3
    da3e:	42ba      	cmp	r2, r7
    da40:	d901      	bls.n	da46 <os_mbuf_trim_front+0x42>
        os_mbuf_free(om);
        om = cur;
    }

    return om;
}
    da42:	4630      	mov	r0, r6
    da44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        cur->om_pkthdr_len = om->om_pkthdr_len;
    da46:	7163      	strb	r3, [r4, #5]
        memcpy(OS_MBUF_PKTHDR(cur), OS_MBUF_PKTHDR(om), om->om_pkthdr_len);
    da48:	7972      	ldrb	r2, [r6, #5]
    da4a:	f106 0110 	add.w	r1, r6, #16
    da4e:	f000 ffa7 	bl	e9a0 <memcpy>
        os_mbuf_free(om);
    da52:	4630      	mov	r0, r6
    da54:	f7ff fcda 	bl	d40c <os_mbuf_free>
        om = cur;
    da58:	4626      	mov	r6, r4
    da5a:	e7f2      	b.n	da42 <os_mbuf_trim_front+0x3e>

0000da5c <os_mbuf_pack_chains>:
    return 0;
}

struct os_mbuf *
os_mbuf_pack_chains(struct os_mbuf *m1, struct os_mbuf *m2)
{
    da5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint8_t *dptr;
    struct os_mbuf *cur;
    struct os_mbuf *next;

    /* If m1 is NULL, return NULL */
    if (m1 == NULL) {
    da60:	4681      	mov	r9, r0
    da62:	2800      	cmp	r0, #0
    da64:	d04e      	beq.n	db04 <os_mbuf_pack_chains+0xa8>

    /*
     * Concatenate the two chains to start. This will discard packet header in
     * m2 and adjust packet length in m1 if m1 has a packet header.
     */
    if (m2 != NULL) {
    da66:	b109      	cbz	r1, da6c <os_mbuf_pack_chains+0x10>
        os_mbuf_concat(m1, m2);
    da68:	f7ff fee8 	bl	d83c <os_mbuf_concat>
{
    da6c:	464d      	mov	r5, r9
    da6e:	e006      	b.n	da7e <os_mbuf_pack_chains+0x22>
    startoff = 0;
    da70:	2300      	movs	r3, #0
    da72:	e008      	b.n	da86 <os_mbuf_pack_chains+0x2a>

    cur = m1;
    while (1) {
        /* If there is leading space in the mbuf, move data up */
        if (OS_MBUF_LEADINGSPACE(cur)) {
            dptr = &cur->om_databuf[0];
    da74:	4634      	mov	r4, r6
    da76:	e010      	b.n	da9a <os_mbuf_pack_chains+0x3e>
        if (next == NULL) {
            break;
        }

        /* Move cur to next as we filled up current */
        cur = next;
    da78:	4625      	mov	r5, r4
        if (next == NULL) {
    da7a:	2c00      	cmp	r4, #0
    da7c:	d042      	beq.n	db04 <os_mbuf_pack_chains+0xa8>
    if (OS_MBUF_IS_PKTHDR(om)) {
    da7e:	796a      	ldrb	r2, [r5, #5]
    da80:	2a07      	cmp	r2, #7
    da82:	d9f5      	bls.n	da70 <os_mbuf_pack_chains+0x14>
        startoff = om->om_pkthdr_len;
    da84:	b293      	uxth	r3, r2
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
    da86:	462e      	mov	r6, r5
    da88:	f856 1b10 	ldr.w	r1, [r6], #16
        ((uint8_t *) &om->om_databuf[0] + startoff));
    da8c:	4433      	add	r3, r6
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
    da8e:	1acb      	subs	r3, r1, r3
    da90:	b29b      	uxth	r3, r3
        if (OS_MBUF_LEADINGSPACE(cur)) {
    da92:	b13b      	cbz	r3, daa4 <os_mbuf_pack_chains+0x48>
            if (OS_MBUF_IS_PKTHDR(cur)) {
    da94:	2a07      	cmp	r2, #7
    da96:	d9ed      	bls.n	da74 <os_mbuf_pack_chains+0x18>
                dptr += cur->om_pkthdr_len;
    da98:	18b4      	adds	r4, r6, r2
            memmove(dptr, cur->om_data, cur->om_len);
    da9a:	88ea      	ldrh	r2, [r5, #6]
    da9c:	4620      	mov	r0, r4
    da9e:	f000 ff8c 	bl	e9ba <memmove>
            cur->om_data = dptr;
    daa2:	602c      	str	r4, [r5, #0]
        dptr = cur->om_data + cur->om_len;
    daa4:	682b      	ldr	r3, [r5, #0]
    daa6:	f8b5 8006 	ldrh.w	r8, [r5, #6]
    daaa:	4498      	add	r8, r3
        next = SLIST_NEXT(cur, om_next);
    daac:	68ec      	ldr	r4, [r5, #12]
    omp = om->om_omp;
    daae:	68ab      	ldr	r3, [r5, #8]
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
    dab0:	881f      	ldrh	r7, [r3, #0]
    dab2:	4437      	add	r7, r6
    dab4:	eba7 0708 	sub.w	r7, r7, r8
    dab8:	b2bf      	uxth	r7, r7
        while (rem_len && next) {
    daba:	2f00      	cmp	r7, #0
    dabc:	d0dc      	beq.n	da78 <os_mbuf_pack_chains+0x1c>
    dabe:	2c00      	cmp	r4, #0
    dac0:	d0da      	beq.n	da78 <os_mbuf_pack_chains+0x1c>
            copylen = min(rem_len, next->om_len);
    dac2:	88e6      	ldrh	r6, [r4, #6]
    dac4:	42be      	cmp	r6, r7
    dac6:	bf28      	it	cs
    dac8:	463e      	movcs	r6, r7
            memcpy(dptr, next->om_data, copylen);
    daca:	4632      	mov	r2, r6
    dacc:	6821      	ldr	r1, [r4, #0]
    dace:	4640      	mov	r0, r8
    dad0:	f000 ff66 	bl	e9a0 <memcpy>
            cur->om_len += copylen;
    dad4:	88eb      	ldrh	r3, [r5, #6]
    dad6:	4433      	add	r3, r6
    dad8:	80eb      	strh	r3, [r5, #6]
            dptr += copylen;
    dada:	44b0      	add	r8, r6
            rem_len -= copylen;
    dadc:	1bbf      	subs	r7, r7, r6
    dade:	b2bf      	uxth	r7, r7
            next->om_data += copylen;
    dae0:	6823      	ldr	r3, [r4, #0]
    dae2:	4433      	add	r3, r6
    dae4:	6023      	str	r3, [r4, #0]
            next->om_len -= copylen;
    dae6:	88e3      	ldrh	r3, [r4, #6]
    dae8:	1b9e      	subs	r6, r3, r6
    daea:	80e6      	strh	r6, [r4, #6]
            while (next->om_len == 0) {
    daec:	88e3      	ldrh	r3, [r4, #6]
    daee:	2b00      	cmp	r3, #0
    daf0:	d1e3      	bne.n	daba <os_mbuf_pack_chains+0x5e>
                SLIST_NEXT(cur, om_next) = SLIST_NEXT(next, om_next);
    daf2:	68e3      	ldr	r3, [r4, #12]
    daf4:	60eb      	str	r3, [r5, #12]
                os_mbuf_free(next);
    daf6:	4620      	mov	r0, r4
    daf8:	f7ff fc88 	bl	d40c <os_mbuf_free>
                next = SLIST_NEXT(cur, om_next);
    dafc:	68ec      	ldr	r4, [r5, #12]
                if (next == NULL) {
    dafe:	2c00      	cmp	r4, #0
    db00:	d1f4      	bne.n	daec <os_mbuf_pack_chains+0x90>
    db02:	e7da      	b.n	daba <os_mbuf_pack_chains+0x5e>
    }

    return m1;
}
    db04:	4648      	mov	r0, r9
    db06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

0000db0c <os_mempool_init_internal>:
    int i;
    uint8_t *block_addr;
    struct os_memblock *block_ptr;

    /* Check for valid parameters */
    if (!mp || (block_size == 0)) {
    db0c:	2800      	cmp	r0, #0
    db0e:	d031      	beq.n	db74 <os_mempool_init_internal+0x68>
{
    db10:	b430      	push	{r4, r5}
    db12:	4604      	mov	r4, r0
    if (!mp || (block_size == 0)) {
    db14:	2a00      	cmp	r2, #0
    db16:	d02f      	beq.n	db78 <os_mempool_init_internal+0x6c>
        return OS_INVALID_PARM;
    }

    if ((!membuf) && (blocks != 0)) {
    db18:	b1bb      	cbz	r3, db4a <os_mempool_init_internal+0x3e>
        return OS_INVALID_PARM;
    }

    if (membuf != NULL) {
    db1a:	b113      	cbz	r3, db22 <os_mempool_init_internal+0x16>
        /* Blocks need to be sized properly and memory buffer should be
         * aligned
         */
        if (((uint32_t)membuf & (OS_ALIGNMENT - 1)) != 0) {
    db1c:	f013 0f03 	tst.w	r3, #3
    db20:	d12c      	bne.n	db7c <os_mempool_init_internal+0x70>
            return OS_MEM_NOT_ALIGNED;
        }
    }

    /* Initialize the memory pool structure */
    mp->mp_block_size = block_size;
    db22:	6022      	str	r2, [r4, #0]
    mp->mp_num_free = blocks;
    db24:	80e1      	strh	r1, [r4, #6]
    mp->mp_min_free = blocks;
    db26:	8121      	strh	r1, [r4, #8]
    mp->mp_flags = flags;
    db28:	f89d 000c 	ldrb.w	r0, [sp, #12]
    db2c:	72a0      	strb	r0, [r4, #10]
    mp->mp_num_blocks = blocks;
    db2e:	80a1      	strh	r1, [r4, #4]
    mp->mp_membuf_addr = (uint32_t)membuf;
    db30:	60e3      	str	r3, [r4, #12]
    mp->name = name;
    db32:	9802      	ldr	r0, [sp, #8]
    db34:	61a0      	str	r0, [r4, #24]
    SLIST_FIRST(mp) = membuf;
    db36:	6163      	str	r3, [r4, #20]

    if (blocks > 0) {
    db38:	b199      	cbz	r1, db62 <os_mempool_init_internal+0x56>
        os_mempool_poison(mp, membuf);
        os_mempool_guard(mp, membuf);
        true_block_size = OS_MEMPOOL_TRUE_BLOCK_SIZE(mp);
    db3a:	f012 0f03 	tst.w	r2, #3
    db3e:	d002      	beq.n	db46 <os_mempool_init_internal+0x3a>
    db40:	f022 0203 	bic.w	r2, r2, #3
    db44:	3204      	adds	r2, #4

        /* Chain the memory blocks to the free list */
        block_addr = (uint8_t *)membuf;
        block_ptr = (struct os_memblock *)block_addr;
        for (i = 1; i < blocks; i++) {
    db46:	2001      	movs	r0, #1
    db48:	e007      	b.n	db5a <os_mempool_init_internal+0x4e>
    if ((!membuf) && (blocks != 0)) {
    db4a:	2900      	cmp	r1, #0
    db4c:	d0e5      	beq.n	db1a <os_mempool_init_internal+0xe>
        return OS_INVALID_PARM;
    db4e:	2003      	movs	r0, #3
    db50:	e00e      	b.n	db70 <os_mempool_init_internal+0x64>
            block_addr += true_block_size;
    db52:	189d      	adds	r5, r3, r2
            os_mempool_poison(mp, block_addr);
            os_mempool_guard(mp, block_addr);
            SLIST_NEXT(block_ptr, mb_next) = (struct os_memblock *)block_addr;
    db54:	601d      	str	r5, [r3, #0]
        for (i = 1; i < blocks; i++) {
    db56:	3001      	adds	r0, #1
            block_addr += true_block_size;
    db58:	462b      	mov	r3, r5
        for (i = 1; i < blocks; i++) {
    db5a:	4281      	cmp	r1, r0
    db5c:	dcf9      	bgt.n	db52 <os_mempool_init_internal+0x46>
            block_ptr = (struct os_memblock *)block_addr;
        }

        /* Last one in the list should be NULL */
        SLIST_NEXT(block_ptr, mb_next) = NULL;
    db5e:	2200      	movs	r2, #0
    db60:	601a      	str	r2, [r3, #0]
    }

    STAILQ_INSERT_TAIL(&g_os_mempool_list, mp, mp_list);
    db62:	2000      	movs	r0, #0
    db64:	6120      	str	r0, [r4, #16]
    db66:	4b06      	ldr	r3, [pc, #24]	; (db80 <os_mempool_init_internal+0x74>)
    db68:	685a      	ldr	r2, [r3, #4]
    db6a:	6014      	str	r4, [r2, #0]
    db6c:	3410      	adds	r4, #16
    db6e:	605c      	str	r4, [r3, #4]

    return OS_OK;
}
    db70:	bc30      	pop	{r4, r5}
    db72:	4770      	bx	lr
        return OS_INVALID_PARM;
    db74:	2003      	movs	r0, #3
}
    db76:	4770      	bx	lr
        return OS_INVALID_PARM;
    db78:	2003      	movs	r0, #3
    db7a:	e7f9      	b.n	db70 <os_mempool_init_internal+0x64>
            return OS_MEM_NOT_ALIGNED;
    db7c:	2004      	movs	r0, #4
    db7e:	e7f7      	b.n	db70 <os_mempool_init_internal+0x64>
    db80:	200033f8 	.word	0x200033f8

0000db84 <os_mempool_init>:

os_error_t
os_mempool_init(struct os_mempool *mp, uint16_t blocks, uint32_t block_size,
                void *membuf, char *name)
{
    db84:	b510      	push	{r4, lr}
    db86:	b082      	sub	sp, #8
    return os_mempool_init_internal(mp, blocks, block_size, membuf, name, 0);
    db88:	2400      	movs	r4, #0
    db8a:	9401      	str	r4, [sp, #4]
    db8c:	9c04      	ldr	r4, [sp, #16]
    db8e:	9400      	str	r4, [sp, #0]
    db90:	f7ff ffbc 	bl	db0c <os_mempool_init_internal>
}
    db94:	b002      	add	sp, #8
    db96:	bd10      	pop	{r4, pc}

0000db98 <os_mempool_clear>:
    struct os_memblock *block_ptr;
    int true_block_size;
    uint8_t *block_addr;
    uint16_t blocks;

    if (!mp) {
    db98:	4601      	mov	r1, r0
    db9a:	b1b0      	cbz	r0, dbca <os_mempool_clear+0x32>
        return OS_INVALID_PARM;
    }

    true_block_size = OS_MEMPOOL_TRUE_BLOCK_SIZE(mp);
    db9c:	6800      	ldr	r0, [r0, #0]
    db9e:	f010 0f03 	tst.w	r0, #3
    dba2:	d002      	beq.n	dbaa <os_mempool_clear+0x12>
    dba4:	f020 0003 	bic.w	r0, r0, #3
    dba8:	3004      	adds	r0, #4

    /* cleanup the memory pool structure */
    mp->mp_num_free = mp->mp_num_blocks;
    dbaa:	888b      	ldrh	r3, [r1, #4]
    dbac:	80cb      	strh	r3, [r1, #6]
    mp->mp_min_free = mp->mp_num_blocks;
    dbae:	810b      	strh	r3, [r1, #8]
    os_mempool_poison(mp, (void *)mp->mp_membuf_addr);
    os_mempool_guard(mp, (void *)mp->mp_membuf_addr);
    SLIST_FIRST(mp) = (void *)mp->mp_membuf_addr;
    dbb0:	68ca      	ldr	r2, [r1, #12]
    dbb2:	614a      	str	r2, [r1, #20]
    /* Chain the memory blocks to the free list */
    block_addr = (uint8_t *)mp->mp_membuf_addr;
    block_ptr = (struct os_memblock *)block_addr;
    blocks = mp->mp_num_blocks;

    while (blocks > 1) {
    dbb4:	e004      	b.n	dbc0 <os_mempool_clear+0x28>
        block_addr += true_block_size;
    dbb6:	1811      	adds	r1, r2, r0
        os_mempool_poison(mp, block_addr);
        os_mempool_guard(mp, block_addr);
        SLIST_NEXT(block_ptr, mb_next) = (struct os_memblock *)block_addr;
    dbb8:	6011      	str	r1, [r2, #0]
        block_ptr = (struct os_memblock *)block_addr;
        --blocks;
    dbba:	3b01      	subs	r3, #1
    dbbc:	b29b      	uxth	r3, r3
        block_ptr = (struct os_memblock *)block_addr;
    dbbe:	460a      	mov	r2, r1
    while (blocks > 1) {
    dbc0:	2b01      	cmp	r3, #1
    dbc2:	d8f8      	bhi.n	dbb6 <os_mempool_clear+0x1e>
    }

    /* Last one in the list should be NULL */
    SLIST_NEXT(block_ptr, mb_next) = NULL;
    dbc4:	2000      	movs	r0, #0
    dbc6:	6010      	str	r0, [r2, #0]

    return OS_OK;
    dbc8:	4770      	bx	lr
        return OS_INVALID_PARM;
    dbca:	2003      	movs	r0, #3
}
    dbcc:	4770      	bx	lr

0000dbce <os_memblock_from>:
    return true;
}

int
os_memblock_from(const struct os_mempool *mp, const void *block_addr)
{
    dbce:	b410      	push	{r4}

    static_assert(sizeof block_addr == sizeof baddr32,
                  "Pointer to void must be 32-bits.");

    baddr32 = (uint32_t)block_addr;
    true_block_size = OS_MEMPOOL_TRUE_BLOCK_SIZE(mp);
    dbd0:	6803      	ldr	r3, [r0, #0]
    dbd2:	f013 0f03 	tst.w	r3, #3
    dbd6:	d002      	beq.n	dbde <os_memblock_from+0x10>
    dbd8:	f023 0303 	bic.w	r3, r3, #3
    dbdc:	3304      	adds	r3, #4
    end = mp->mp_membuf_addr + (mp->mp_num_blocks * true_block_size);
    dbde:	68c4      	ldr	r4, [r0, #12]
    dbe0:	8882      	ldrh	r2, [r0, #4]
    dbe2:	fb03 4202 	mla	r2, r3, r2, r4

    /* Check that the block is in the memory buffer range. */
    if ((baddr32 < mp->mp_membuf_addr) || (baddr32 >= end)) {
    dbe6:	428c      	cmp	r4, r1
    dbe8:	d80b      	bhi.n	dc02 <os_memblock_from+0x34>
    dbea:	4291      	cmp	r1, r2
    dbec:	d20c      	bcs.n	dc08 <os_memblock_from+0x3a>
        return 0;
    }

    /* All freed blocks should be on true block size boundaries! */
    if (((baddr32 - mp->mp_membuf_addr) % true_block_size) != 0) {
    dbee:	1b09      	subs	r1, r1, r4
    dbf0:	fbb1 f2f3 	udiv	r2, r1, r3
    dbf4:	fb03 1112 	mls	r1, r3, r2, r1
    dbf8:	b909      	cbnz	r1, dbfe <os_memblock_from+0x30>
        return 0;
    }

    return 1;
    dbfa:	2001      	movs	r0, #1
    dbfc:	e002      	b.n	dc04 <os_memblock_from+0x36>
        return 0;
    dbfe:	2000      	movs	r0, #0
    dc00:	e000      	b.n	dc04 <os_memblock_from+0x36>
        return 0;
    dc02:	2000      	movs	r0, #0
}
    dc04:	bc10      	pop	{r4}
    dc06:	4770      	bx	lr
        return 0;
    dc08:	2000      	movs	r0, #0
    dc0a:	e7fb      	b.n	dc04 <os_memblock_from+0x36>

0000dc0c <os_memblock_get>:

void *
os_memblock_get(struct os_mempool *mp)
{
    dc0c:	b538      	push	{r3, r4, r5, lr}

    os_trace_api_u32(OS_TRACE_ID_MEMBLOCK_GET, (uint32_t)mp);

    /* Check to make sure they passed in a memory pool (or something) */
    block = NULL;
    if (mp) {
    dc0e:	b1a0      	cbz	r0, dc3a <os_memblock_get+0x2e>
    dc10:	4604      	mov	r4, r0
        OS_ENTER_CRITICAL(sr);
    dc12:	f000 fc8f 	bl	e534 <os_arch_save_sr>
        /* Check for any free */
        if (mp->mp_num_free) {
    dc16:	88e3      	ldrh	r3, [r4, #6]
    dc18:	b153      	cbz	r3, dc30 <os_memblock_get+0x24>
            /* Get a free block */
            block = SLIST_FIRST(mp);
    dc1a:	6965      	ldr	r5, [r4, #20]

            /* Set new free list head */
            SLIST_FIRST(mp) = SLIST_NEXT(block, mb_next);
    dc1c:	682a      	ldr	r2, [r5, #0]
    dc1e:	6162      	str	r2, [r4, #20]

            /* Decrement number free by 1 */
            mp->mp_num_free--;
    dc20:	3b01      	subs	r3, #1
    dc22:	b29b      	uxth	r3, r3
    dc24:	80e3      	strh	r3, [r4, #6]
            if (mp->mp_min_free > mp->mp_num_free) {
    dc26:	8922      	ldrh	r2, [r4, #8]
    dc28:	4293      	cmp	r3, r2
    dc2a:	d202      	bcs.n	dc32 <os_memblock_get+0x26>
                mp->mp_min_free = mp->mp_num_free;
    dc2c:	8123      	strh	r3, [r4, #8]
    dc2e:	e000      	b.n	dc32 <os_memblock_get+0x26>
    block = NULL;
    dc30:	2500      	movs	r5, #0
            }
        }
        OS_EXIT_CRITICAL(sr);
    dc32:	f000 fc85 	bl	e540 <os_arch_restore_sr>
    }

    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_GET, (uint32_t)block);

    return (void *)block;
}
    dc36:	4628      	mov	r0, r5
    dc38:	bd38      	pop	{r3, r4, r5, pc}
    block = NULL;
    dc3a:	2500      	movs	r5, #0
    return (void *)block;
    dc3c:	e7fb      	b.n	dc36 <os_memblock_get+0x2a>

0000dc3e <os_memblock_put_from_cb>:

os_error_t
os_memblock_put_from_cb(struct os_mempool *mp, void *block_addr)
{
    dc3e:	b538      	push	{r3, r4, r5, lr}
    dc40:	4604      	mov	r4, r0
    dc42:	460d      	mov	r5, r1

    os_mempool_guard_check(mp, block_addr);
    os_mempool_poison(mp, block_addr);

    block = (struct os_memblock *)block_addr;
    OS_ENTER_CRITICAL(sr);
    dc44:	f000 fc76 	bl	e534 <os_arch_save_sr>

    /* Chain current free list pointer to this block; make this block head */
    SLIST_NEXT(block, mb_next) = SLIST_FIRST(mp);
    dc48:	6963      	ldr	r3, [r4, #20]
    dc4a:	602b      	str	r3, [r5, #0]
    SLIST_FIRST(mp) = block;
    dc4c:	6165      	str	r5, [r4, #20]

    /* XXX: Should we check that the number free <= number blocks? */
    /* Increment number free */
    mp->mp_num_free++;
    dc4e:	88e3      	ldrh	r3, [r4, #6]
    dc50:	3301      	adds	r3, #1
    dc52:	80e3      	strh	r3, [r4, #6]

    OS_EXIT_CRITICAL(sr);
    dc54:	f000 fc74 	bl	e540 <os_arch_restore_sr>

    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_PUT_FROM_CB, (uint32_t)OS_OK);

    return OS_OK;
}
    dc58:	2000      	movs	r0, #0
    dc5a:	bd38      	pop	{r3, r4, r5, pc}

0000dc5c <os_memblock_put>:

    os_trace_api_u32x2(OS_TRACE_ID_MEMBLOCK_PUT, (uint32_t)mp,
                       (uint32_t)block_addr);

    /* Make sure parameters are valid */
    if ((mp == NULL) || (block_addr == NULL)) {
    dc5c:	b168      	cbz	r0, dc7a <os_memblock_put+0x1e>
{
    dc5e:	b508      	push	{r3, lr}
    if ((mp == NULL) || (block_addr == NULL)) {
    dc60:	b169      	cbz	r1, dc7e <os_memblock_put+0x22>
    }
#endif
    /* If this is an extended mempool with a put callback, call the callback
     * instead of freeing the block directly.
     */
    if (mp->mp_flags & OS_MEMPOOL_F_EXT) {
    dc62:	7a83      	ldrb	r3, [r0, #10]
    dc64:	f013 0f01 	tst.w	r3, #1
    dc68:	d004      	beq.n	dc74 <os_memblock_put+0x18>
        mpe = (struct os_mempool_ext *)mp;
        if (mpe->mpe_put_cb != NULL) {
    dc6a:	69c3      	ldr	r3, [r0, #28]
    dc6c:	b113      	cbz	r3, dc74 <os_memblock_put+0x18>
            ret = mpe->mpe_put_cb(mpe, block_addr, mpe->mpe_put_arg);
    dc6e:	6a02      	ldr	r2, [r0, #32]
    dc70:	4798      	blx	r3
    ret = os_memblock_put_from_cb(mp, block_addr);

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_PUT, (uint32_t)ret);
    return ret;
}
    dc72:	bd08      	pop	{r3, pc}
    ret = os_memblock_put_from_cb(mp, block_addr);
    dc74:	f7ff ffe3 	bl	dc3e <os_memblock_put_from_cb>
    dc78:	e7fb      	b.n	dc72 <os_memblock_put+0x16>
        ret = OS_INVALID_PARM;
    dc7a:	2003      	movs	r0, #3
}
    dc7c:	4770      	bx	lr
        ret = OS_INVALID_PARM;
    dc7e:	2003      	movs	r0, #3
    dc80:	e7f7      	b.n	dc72 <os_memblock_put+0x16>
	...

0000dc84 <os_mempool_module_init>:
}

void
os_mempool_module_init(void)
{
    STAILQ_INIT(&g_os_mempool_list);
    dc84:	4b02      	ldr	r3, [pc, #8]	; (dc90 <os_mempool_module_init+0xc>)
    dc86:	2200      	movs	r2, #0
    dc88:	601a      	str	r2, [r3, #0]
    dc8a:	605b      	str	r3, [r3, #4]
}
    dc8c:	4770      	bx	lr
    dc8e:	bf00      	nop
    dc90:	200033f8 	.word	0x200033f8

0000dc94 <os_msys_find_biggest_pool>:

static struct os_mbuf_pool *
os_msys_find_biggest_pool(void)
{
    /* Mempools are sorted by the blocksize, so just return last one */
    return STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
    dc94:	4b02      	ldr	r3, [pc, #8]	; (dca0 <os_msys_find_biggest_pool+0xc>)
    dc96:	6818      	ldr	r0, [r3, #0]
    dc98:	b108      	cbz	r0, dc9e <os_msys_find_biggest_pool+0xa>
    dc9a:	6858      	ldr	r0, [r3, #4]
    dc9c:	3808      	subs	r0, #8
}
    dc9e:	4770      	bx	lr
    dca0:	2000017c 	.word	0x2000017c

0000dca4 <os_msys_find_pool>:
os_msys_find_pool(uint16_t dsize)
{
    struct os_mbuf_pool *pool;

    pool = NULL;
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
    dca4:	4b09      	ldr	r3, [pc, #36]	; (dccc <os_msys_find_pool+0x28>)
    dca6:	6819      	ldr	r1, [r3, #0]
    dca8:	460b      	mov	r3, r1
    dcaa:	b123      	cbz	r3, dcb6 <os_msys_find_pool+0x12>
        if (dsize <= pool->omp_databuf_len) {
    dcac:	881a      	ldrh	r2, [r3, #0]
    dcae:	4282      	cmp	r2, r0
    dcb0:	d201      	bcs.n	dcb6 <os_msys_find_pool+0x12>
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
    dcb2:	689b      	ldr	r3, [r3, #8]
    dcb4:	e7f9      	b.n	dcaa <os_msys_find_pool+0x6>
            break;
        }
    }

    if (!pool) {
    dcb6:	b10b      	cbz	r3, dcbc <os_msys_find_pool+0x18>
        pool = STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
    }

    return (pool);
}
    dcb8:	4618      	mov	r0, r3
    dcba:	4770      	bx	lr
        pool = STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
    dcbc:	b119      	cbz	r1, dcc6 <os_msys_find_pool+0x22>
    dcbe:	4b03      	ldr	r3, [pc, #12]	; (dccc <os_msys_find_pool+0x28>)
    dcc0:	685b      	ldr	r3, [r3, #4]
    dcc2:	3b08      	subs	r3, #8
    dcc4:	e7f8      	b.n	dcb8 <os_msys_find_pool+0x14>
    dcc6:	460b      	mov	r3, r1
    return (pool);
    dcc8:	e7f6      	b.n	dcb8 <os_msys_find_pool+0x14>
    dcca:	bf00      	nop
    dccc:	2000017c 	.word	0x2000017c

0000dcd0 <os_msys_register>:
{
    dcd0:	b430      	push	{r4, r5}
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
    dcd2:	4b11      	ldr	r3, [pc, #68]	; (dd18 <os_msys_register+0x48>)
    dcd4:	681d      	ldr	r5, [r3, #0]
    dcd6:	462b      	mov	r3, r5
    prev = NULL;
    dcd8:	2400      	movs	r4, #0
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
    dcda:	b133      	cbz	r3, dcea <os_msys_register+0x1a>
        if (new_pool->omp_databuf_len < pool->omp_databuf_len) {
    dcdc:	8801      	ldrh	r1, [r0, #0]
    dcde:	881a      	ldrh	r2, [r3, #0]
    dce0:	4291      	cmp	r1, r2
    dce2:	d302      	bcc.n	dcea <os_msys_register+0x1a>
        prev = pool;
    dce4:	461c      	mov	r4, r3
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
    dce6:	689b      	ldr	r3, [r3, #8]
    dce8:	e7f7      	b.n	dcda <os_msys_register+0xa>
    if (prev) {
    dcea:	b15c      	cbz	r4, dd04 <os_msys_register+0x34>
        STAILQ_INSERT_AFTER(&g_msys_pool_list, prev, new_pool, omp_next);
    dcec:	68a3      	ldr	r3, [r4, #8]
    dcee:	6083      	str	r3, [r0, #8]
    dcf0:	b11b      	cbz	r3, dcfa <os_msys_register+0x2a>
    dcf2:	60a0      	str	r0, [r4, #8]
}
    dcf4:	2000      	movs	r0, #0
    dcf6:	bc30      	pop	{r4, r5}
    dcf8:	4770      	bx	lr
        STAILQ_INSERT_AFTER(&g_msys_pool_list, prev, new_pool, omp_next);
    dcfa:	f100 0308 	add.w	r3, r0, #8
    dcfe:	4a06      	ldr	r2, [pc, #24]	; (dd18 <os_msys_register+0x48>)
    dd00:	6053      	str	r3, [r2, #4]
    dd02:	e7f6      	b.n	dcf2 <os_msys_register+0x22>
        STAILQ_INSERT_HEAD(&g_msys_pool_list, new_pool, omp_next);
    dd04:	6085      	str	r5, [r0, #8]
    dd06:	b115      	cbz	r5, dd0e <os_msys_register+0x3e>
    dd08:	4b03      	ldr	r3, [pc, #12]	; (dd18 <os_msys_register+0x48>)
    dd0a:	6018      	str	r0, [r3, #0]
    dd0c:	e7f2      	b.n	dcf4 <os_msys_register+0x24>
    dd0e:	f100 0308 	add.w	r3, r0, #8
    dd12:	4a01      	ldr	r2, [pc, #4]	; (dd18 <os_msys_register+0x48>)
    dd14:	6053      	str	r3, [r2, #4]
    dd16:	e7f7      	b.n	dd08 <os_msys_register+0x38>
    dd18:	2000017c 	.word	0x2000017c

0000dd1c <os_msys_init_once>:

static void
os_msys_init_once(void *data, struct os_mempool *mempool,
                  struct os_mbuf_pool *mbuf_pool,
                  int block_count, int block_size, char *name)
{
    dd1c:	b530      	push	{r4, r5, lr}
    dd1e:	b083      	sub	sp, #12
    dd20:	4614      	mov	r4, r2
    int rc;

    rc = mem_init_mbuf_pool(data, mempool, mbuf_pool, block_count, block_size,
    dd22:	9d07      	ldr	r5, [sp, #28]
    dd24:	9501      	str	r5, [sp, #4]
    dd26:	9d06      	ldr	r5, [sp, #24]
    dd28:	9500      	str	r5, [sp, #0]
    dd2a:	f004 fa79 	bl	12220 <mem_init_mbuf_pool>
                            name);
    SYSINIT_PANIC_ASSERT(rc == 0);
    dd2e:	b928      	cbnz	r0, dd3c <os_msys_init_once+0x20>

    rc = os_msys_register(mbuf_pool);
    dd30:	4620      	mov	r0, r4
    dd32:	f7ff ffcd 	bl	dcd0 <os_msys_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
    dd36:	b970      	cbnz	r0, dd56 <os_msys_init_once+0x3a>
}
    dd38:	b003      	add	sp, #12
    dd3a:	bd30      	pop	{r4, r5, pc}
    SYSINIT_PANIC_ASSERT(rc == 0);
    dd3c:	f7fe fa54 	bl	c1e8 <hal_debugger_connected>
    dd40:	b100      	cbz	r0, dd44 <os_msys_init_once+0x28>
    dd42:	be01      	bkpt	0x0001
    dd44:	2000      	movs	r0, #0
    dd46:	9000      	str	r0, [sp, #0]
    dd48:	4b09      	ldr	r3, [pc, #36]	; (dd70 <os_msys_init_once+0x54>)
    dd4a:	681d      	ldr	r5, [r3, #0]
    dd4c:	4603      	mov	r3, r0
    dd4e:	4602      	mov	r2, r0
    dd50:	4601      	mov	r1, r0
    dd52:	47a8      	blx	r5
    dd54:	e7ec      	b.n	dd30 <os_msys_init_once+0x14>
    SYSINIT_PANIC_ASSERT(rc == 0);
    dd56:	f7fe fa47 	bl	c1e8 <hal_debugger_connected>
    dd5a:	b100      	cbz	r0, dd5e <os_msys_init_once+0x42>
    dd5c:	be01      	bkpt	0x0001
    dd5e:	2000      	movs	r0, #0
    dd60:	9000      	str	r0, [sp, #0]
    dd62:	4b03      	ldr	r3, [pc, #12]	; (dd70 <os_msys_init_once+0x54>)
    dd64:	681c      	ldr	r4, [r3, #0]
    dd66:	4603      	mov	r3, r0
    dd68:	4602      	mov	r2, r0
    dd6a:	4601      	mov	r1, r0
    dd6c:	47a0      	blx	r4
}
    dd6e:	e7e3      	b.n	dd38 <os_msys_init_once+0x1c>
    dd70:	20000298 	.word	0x20000298

0000dd74 <os_msys_reset>:
    STAILQ_INIT(&g_msys_pool_list);
    dd74:	4b02      	ldr	r3, [pc, #8]	; (dd80 <os_msys_reset+0xc>)
    dd76:	2200      	movs	r2, #0
    dd78:	601a      	str	r2, [r3, #0]
    dd7a:	605b      	str	r3, [r3, #4]
}
    dd7c:	4770      	bx	lr
    dd7e:	bf00      	nop
    dd80:	2000017c 	.word	0x2000017c

0000dd84 <os_msys_get>:
{
    dd84:	b510      	push	{r4, lr}
    dd86:	460c      	mov	r4, r1
    if (dsize == 0) {
    dd88:	b930      	cbnz	r0, dd98 <os_msys_get+0x14>
        pool = os_msys_find_biggest_pool();
    dd8a:	f7ff ff83 	bl	dc94 <os_msys_find_biggest_pool>
    if (!pool) {
    dd8e:	b130      	cbz	r0, dd9e <os_msys_get+0x1a>
    m = os_mbuf_get(pool, leadingspace);
    dd90:	4621      	mov	r1, r4
    dd92:	f7ff fb07 	bl	d3a4 <os_mbuf_get>
}
    dd96:	bd10      	pop	{r4, pc}
        pool = os_msys_find_pool(dsize);
    dd98:	f7ff ff84 	bl	dca4 <os_msys_find_pool>
    dd9c:	e7f7      	b.n	dd8e <os_msys_get+0xa>
    return (NULL);
    dd9e:	2000      	movs	r0, #0
    dda0:	e7f9      	b.n	dd96 <os_msys_get+0x12>

0000dda2 <os_msys_get_pkthdr>:
{
    dda2:	b510      	push	{r4, lr}
    dda4:	460c      	mov	r4, r1
    if (dsize == 0) {
    dda6:	b930      	cbnz	r0, ddb6 <os_msys_get_pkthdr+0x14>
        pool = os_msys_find_biggest_pool();
    dda8:	f7ff ff74 	bl	dc94 <os_msys_find_biggest_pool>
    if (!pool) {
    ddac:	b158      	cbz	r0, ddc6 <os_msys_get_pkthdr+0x24>
    m = os_mbuf_get_pkthdr(pool, user_hdr_len);
    ddae:	b2e1      	uxtb	r1, r4
    ddb0:	f7ff fb11 	bl	d3d6 <os_mbuf_get_pkthdr>
}
    ddb4:	bd10      	pop	{r4, pc}
    ddb6:	f101 0308 	add.w	r3, r1, #8
    ddba:	b29b      	uxth	r3, r3
        pool = os_msys_find_pool(dsize + total_pkthdr_len);
    ddbc:	4403      	add	r3, r0
    ddbe:	b298      	uxth	r0, r3
    ddc0:	f7ff ff70 	bl	dca4 <os_msys_find_pool>
    ddc4:	e7f2      	b.n	ddac <os_msys_get_pkthdr+0xa>
    return (NULL);
    ddc6:	2000      	movs	r0, #0
    ddc8:	e7f4      	b.n	ddb4 <os_msys_get_pkthdr+0x12>
	...

0000ddcc <os_msys_init>:

void
os_msys_init(void)
{
    ddcc:	b500      	push	{lr}
    ddce:	b083      	sub	sp, #12
    int rc;

    os_msys_reset();
    ddd0:	f7ff ffd0 	bl	dd74 <os_msys_reset>

    (void)os_msys_init_once;
    (void)rc;

#if MYNEWT_VAL(MSYS_1_BLOCK_COUNT) > 0
    os_msys_init_once(os_msys_1_data,
    ddd4:	4b06      	ldr	r3, [pc, #24]	; (ddf0 <os_msys_init+0x24>)
    ddd6:	9301      	str	r3, [sp, #4]
    ddd8:	2370      	movs	r3, #112	; 0x70
    ddda:	9300      	str	r3, [sp, #0]
    dddc:	2316      	movs	r3, #22
    ddde:	4a05      	ldr	r2, [pc, #20]	; (ddf4 <os_msys_init+0x28>)
    dde0:	4905      	ldr	r1, [pc, #20]	; (ddf8 <os_msys_init+0x2c>)
    dde2:	4806      	ldr	r0, [pc, #24]	; (ddfc <os_msys_init+0x30>)
    dde4:	f7ff ff9a 	bl	dd1c <os_msys_init_once>
    os_msys_sc.sc_checkin_itvl =
        OS_TICKS_PER_SEC * MYNEWT_VAL(MSYS_SANITY_TIMEOUT) / 1000;
    rc = os_sanity_check_register(&os_msys_sc);
    SYSINIT_PANIC_ASSERT(rc == 0);
#endif
}
    dde8:	b003      	add	sp, #12
    ddea:	f85d fb04 	ldr.w	pc, [sp], #4
    ddee:	bf00      	nop
    ddf0:	000318dc 	.word	0x000318dc
    ddf4:	20001858 	.word	0x20001858
    ddf8:	20001864 	.word	0x20001864
    ddfc:	20000eb8 	.word	0x20000eb8

0000de00 <os_sanity_check_list_lock>:
 *
 * @return 0 on success, error code on failure.
 */
static int
os_sanity_check_list_lock(void)
{
    de00:	b508      	push	{r3, lr}
    int rc;

    if (!g_os_started) {
    de02:	4b05      	ldr	r3, [pc, #20]	; (de18 <os_sanity_check_list_lock+0x18>)
    de04:	6818      	ldr	r0, [r3, #0]
    de06:	b900      	cbnz	r0, de0a <os_sanity_check_list_lock+0xa>
    }

    return (0);
err:
    return (rc);
}
    de08:	bd08      	pop	{r3, pc}
    rc = os_mutex_pend(&g_os_sanity_check_mu, OS_WAIT_FOREVER);
    de0a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    de0e:	4803      	ldr	r0, [pc, #12]	; (de1c <os_sanity_check_list_lock+0x1c>)
    de10:	f000 fcc6 	bl	e7a0 <os_mutex_pend>
err:
    de14:	e7f8      	b.n	de08 <os_sanity_check_list_lock+0x8>
    de16:	bf00      	nop
    de18:	2000339c 	.word	0x2000339c
    de1c:	20003400 	.word	0x20003400

0000de20 <os_sanity_check_list_unlock>:
 *
 * @return 0 on success, error code on failure
 */
static int
os_sanity_check_list_unlock(void)
{
    de20:	b508      	push	{r3, lr}
    int rc;

    if (!g_os_started) {
    de22:	4b04      	ldr	r3, [pc, #16]	; (de34 <os_sanity_check_list_unlock+0x14>)
    de24:	6818      	ldr	r0, [r3, #0]
    de26:	b900      	cbnz	r0, de2a <os_sanity_check_list_unlock+0xa>
    }

    return (0);
err:
    return (rc);
}
    de28:	bd08      	pop	{r3, pc}
    rc = os_mutex_release(&g_os_sanity_check_mu);
    de2a:	4803      	ldr	r0, [pc, #12]	; (de38 <os_sanity_check_list_unlock+0x18>)
    de2c:	f000 fc58 	bl	e6e0 <os_mutex_release>
err:
    de30:	e7fa      	b.n	de28 <os_sanity_check_list_unlock+0x8>
    de32:	bf00      	nop
    de34:	2000339c 	.word	0x2000339c
    de38:	20003400 	.word	0x20003400

0000de3c <os_sanity_check_init>:
    memset(sc, 0, sizeof(*sc));
    de3c:	2300      	movs	r3, #0
    de3e:	6003      	str	r3, [r0, #0]
    de40:	6043      	str	r3, [r0, #4]
    de42:	6083      	str	r3, [r0, #8]
    de44:	60c3      	str	r3, [r0, #12]
    de46:	6103      	str	r3, [r0, #16]
}
    de48:	4618      	mov	r0, r3
    de4a:	4770      	bx	lr

0000de4c <os_sanity_check_register>:
}


int
os_sanity_check_register(struct os_sanity_check *sc)
{
    de4c:	b510      	push	{r4, lr}
    de4e:	4604      	mov	r4, r0
    int rc;

    rc = os_sanity_check_list_lock();
    de50:	f7ff ffd6 	bl	de00 <os_sanity_check_list_lock>
    if (rc != OS_OK) {
    de54:	4603      	mov	r3, r0
    de56:	b108      	cbz	r0, de5c <os_sanity_check_register+0x10>
    }

    return (0);
err:
    return (rc);
}
    de58:	4618      	mov	r0, r3
    de5a:	bd10      	pop	{r4, pc}
    SLIST_INSERT_HEAD(&g_os_sanity_check_list, sc, sc_next);
    de5c:	4b03      	ldr	r3, [pc, #12]	; (de6c <os_sanity_check_register+0x20>)
    de5e:	681a      	ldr	r2, [r3, #0]
    de60:	6122      	str	r2, [r4, #16]
    de62:	601c      	str	r4, [r3, #0]
    rc = os_sanity_check_list_unlock();
    de64:	f7ff ffdc 	bl	de20 <os_sanity_check_list_unlock>
    de68:	4603      	mov	r3, r0
err:
    de6a:	e7f5      	b.n	de58 <os_sanity_check_register+0xc>
    de6c:	20001880 	.word	0x20001880

0000de70 <os_sanity_run>:
 * Goes through the sanity check list, and performs sanity checks.  If any of
 * these checks failed, or tasks have not checked in, it resets the processor.
 */
void
os_sanity_run(void)
{
    de70:	b510      	push	{r4, lr}
    struct os_sanity_check *sc;
    int rc;

    rc = os_sanity_check_list_lock();
    de72:	f7ff ffc5 	bl	de00 <os_sanity_check_list_lock>
    if (rc != 0) {
    de76:	b910      	cbnz	r0, de7e <os_sanity_run+0xe>
        assert(0);
    }

    SLIST_FOREACH(sc, &g_os_sanity_check_list, sc_next) {
    de78:	4b1d      	ldr	r3, [pc, #116]	; (def0 <os_sanity_run+0x80>)
    de7a:	681c      	ldr	r4, [r3, #0]
    de7c:	e012      	b.n	dea4 <os_sanity_run+0x34>
        assert(0);
    de7e:	f7fe f9b3 	bl	c1e8 <hal_debugger_connected>
    de82:	b100      	cbz	r0, de86 <os_sanity_run+0x16>
    de84:	be01      	bkpt	0x0001
    de86:	2300      	movs	r3, #0
    de88:	461a      	mov	r2, r3
    de8a:	4619      	mov	r1, r3
    de8c:	4618      	mov	r0, r3
    de8e:	f7fe fe5f 	bl	cb50 <__assert_func>
                sc->sc_checkin_last = os_time_get();
                continue;
            }
        }

        if (OS_TIME_TICK_GT(os_time_get(),
    de92:	f000 fa8d 	bl	e3b0 <os_time_get>
    de96:	6823      	ldr	r3, [r4, #0]
    de98:	6862      	ldr	r2, [r4, #4]
    de9a:	4413      	add	r3, r2
    de9c:	1ac3      	subs	r3, r0, r3
    de9e:	2b00      	cmp	r3, #0
    dea0:	dc0d      	bgt.n	debe <os_sanity_run+0x4e>
    SLIST_FOREACH(sc, &g_os_sanity_check_list, sc_next) {
    dea2:	6924      	ldr	r4, [r4, #16]
    dea4:	b1ac      	cbz	r4, ded2 <os_sanity_run+0x62>
        if (sc->sc_func) {
    dea6:	68a3      	ldr	r3, [r4, #8]
    dea8:	2b00      	cmp	r3, #0
    deaa:	d0f2      	beq.n	de92 <os_sanity_run+0x22>
            rc = sc->sc_func(sc, sc->sc_arg);
    deac:	68e1      	ldr	r1, [r4, #12]
    deae:	4620      	mov	r0, r4
    deb0:	4798      	blx	r3
            if (rc == OS_OK) {
    deb2:	2800      	cmp	r0, #0
    deb4:	d1ed      	bne.n	de92 <os_sanity_run+0x22>
                sc->sc_checkin_last = os_time_get();
    deb6:	f000 fa7b 	bl	e3b0 <os_time_get>
    deba:	6020      	str	r0, [r4, #0]
                continue;
    debc:	e7f1      	b.n	dea2 <os_sanity_run+0x32>
                    sc->sc_checkin_last + sc->sc_checkin_itvl)) {
            assert(0);
    debe:	f7fe f993 	bl	c1e8 <hal_debugger_connected>
    dec2:	b100      	cbz	r0, dec6 <os_sanity_run+0x56>
    dec4:	be01      	bkpt	0x0001
    dec6:	2300      	movs	r3, #0
    dec8:	461a      	mov	r2, r3
    deca:	4619      	mov	r1, r3
    decc:	4618      	mov	r0, r3
    dece:	f7fe fe3f 	bl	cb50 <__assert_func>
        }
    }

    rc = os_sanity_check_list_unlock();
    ded2:	f7ff ffa5 	bl	de20 <os_sanity_check_list_unlock>
    if (rc != 0) {
    ded6:	b900      	cbnz	r0, deda <os_sanity_run+0x6a>
        assert(0);
    }
}
    ded8:	bd10      	pop	{r4, pc}
        assert(0);
    deda:	f7fe f985 	bl	c1e8 <hal_debugger_connected>
    dede:	b100      	cbz	r0, dee2 <os_sanity_run+0x72>
    dee0:	be01      	bkpt	0x0001
    dee2:	2300      	movs	r3, #0
    dee4:	461a      	mov	r2, r3
    dee6:	4619      	mov	r1, r3
    dee8:	4618      	mov	r0, r3
    deea:	f7fe fe31 	bl	cb50 <__assert_func>
    deee:	bf00      	nop
    def0:	20001880 	.word	0x20001880

0000def4 <os_sanity_init>:

int
os_sanity_init(void)
{
    def4:	b508      	push	{r3, lr}
    int rc;

    rc = os_mutex_init(&g_os_sanity_check_mu);
    def6:	4802      	ldr	r0, [pc, #8]	; (df00 <os_sanity_init+0xc>)
    def8:	f000 fbe8 	bl	e6cc <os_mutex_init>
    }

    return (0);
err:
    return (rc);
}
    defc:	bd08      	pop	{r3, pc}
    defe:	bf00      	nop
    df00:	20003400 	.word	0x20003400

0000df04 <os_sched_insert>:
{
    struct os_task *entry;
    os_sr_t sr;
    os_error_t rc;

    if (t->t_state != OS_TASK_READY) {
    df04:	7b03      	ldrb	r3, [r0, #12]
    df06:	2b01      	cmp	r3, #1
    df08:	d001      	beq.n	df0e <os_sched_insert+0xa>
    }
    OS_EXIT_CRITICAL(sr);

    return (0);
err:
    return (rc);
    df0a:	2002      	movs	r0, #2
}
    df0c:	4770      	bx	lr
{
    df0e:	b510      	push	{r4, lr}
    df10:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
    df12:	f000 fb0f 	bl	e534 <os_arch_save_sr>
    TAILQ_FOREACH(entry, &g_os_run_list, t_os_list) {
    df16:	4b0f      	ldr	r3, [pc, #60]	; (df54 <os_sched_insert+0x50>)
    df18:	681b      	ldr	r3, [r3, #0]
    df1a:	b12b      	cbz	r3, df28 <os_sched_insert+0x24>
        if (t->t_prio < entry->t_prio) {
    df1c:	7ae1      	ldrb	r1, [r4, #11]
    df1e:	7ada      	ldrb	r2, [r3, #11]
    df20:	4291      	cmp	r1, r2
    df22:	d301      	bcc.n	df28 <os_sched_insert+0x24>
    TAILQ_FOREACH(entry, &g_os_run_list, t_os_list) {
    df24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    df26:	e7f8      	b.n	df1a <os_sched_insert+0x16>
    if (entry) {
    df28:	b153      	cbz	r3, df40 <os_sched_insert+0x3c>
        TAILQ_INSERT_BEFORE(entry, (struct os_task *) t, t_os_list);
    df2a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    df2c:	64a2      	str	r2, [r4, #72]	; 0x48
    df2e:	6463      	str	r3, [r4, #68]	; 0x44
    df30:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    df32:	6014      	str	r4, [r2, #0]
    df34:	3444      	adds	r4, #68	; 0x44
    df36:	649c      	str	r4, [r3, #72]	; 0x48
    OS_EXIT_CRITICAL(sr);
    df38:	f000 fb02 	bl	e540 <os_arch_restore_sr>
    return (0);
    df3c:	2000      	movs	r0, #0
}
    df3e:	bd10      	pop	{r4, pc}
        TAILQ_INSERT_TAIL(&g_os_run_list, (struct os_task *) t, t_os_list);
    df40:	2300      	movs	r3, #0
    df42:	6463      	str	r3, [r4, #68]	; 0x44
    df44:	4b03      	ldr	r3, [pc, #12]	; (df54 <os_sched_insert+0x50>)
    df46:	685a      	ldr	r2, [r3, #4]
    df48:	64a2      	str	r2, [r4, #72]	; 0x48
    df4a:	6014      	str	r4, [r2, #0]
    df4c:	3444      	adds	r4, #68	; 0x44
    df4e:	605c      	str	r4, [r3, #4]
    df50:	e7f2      	b.n	df38 <os_sched_insert+0x34>
    df52:	bf00      	nop
    df54:	20000184 	.word	0x20000184

0000df58 <os_sched_ctx_sw_hook>:

void
os_sched_ctx_sw_hook(struct os_task *next_t)
{
    df58:	b410      	push	{r4}
    stack = g_current_task->t_stackbottom;
    for (i = 0; i < MYNEWT_VAL(OS_CTX_SW_STACK_GUARD); i++) {
        assert(stack[i] == OS_STACK_PATTERN);
    }
#endif
    next_t->t_ctx_sw_cnt++;
    df5a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    df5c:	3301      	adds	r3, #1
    df5e:	63c3      	str	r3, [r0, #60]	; 0x3c
#if MYNEWT_VAL(OS_TASK_RUN_TIME_CPUTIME)
    ticks = os_cputime_get32();
#else
    ticks = g_os_time;
    df60:	4b06      	ldr	r3, [pc, #24]	; (df7c <os_sched_ctx_sw_hook+0x24>)
    df62:	6818      	ldr	r0, [r3, #0]
#endif
    g_current_task->t_run_time += ticks - g_os_last_ctx_sw_time;
    df64:	4b06      	ldr	r3, [pc, #24]	; (df80 <os_sched_ctx_sw_hook+0x28>)
    df66:	681c      	ldr	r4, [r3, #0]
    df68:	4906      	ldr	r1, [pc, #24]	; (df84 <os_sched_ctx_sw_hook+0x2c>)
    df6a:	680b      	ldr	r3, [r1, #0]
    df6c:	1ac2      	subs	r2, r0, r3
    df6e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    df70:	4413      	add	r3, r2
    df72:	63a3      	str	r3, [r4, #56]	; 0x38
    g_os_last_ctx_sw_time = ticks;
    df74:	6008      	str	r0, [r1, #0]
}
    df76:	bc10      	pop	{r4}
    df78:	4770      	bx	lr
    df7a:	bf00      	nop
    df7c:	20003420 	.word	0x20003420
    df80:	2000340c 	.word	0x2000340c
    df84:	20003410 	.word	0x20003410

0000df88 <os_sched_get_current_task>:

struct os_task *
os_sched_get_current_task(void)
{
    return (g_current_task);
}
    df88:	4b01      	ldr	r3, [pc, #4]	; (df90 <os_sched_get_current_task+0x8>)
    df8a:	6818      	ldr	r0, [r3, #0]
    df8c:	4770      	bx	lr
    df8e:	bf00      	nop
    df90:	2000340c 	.word	0x2000340c

0000df94 <os_sched_set_current_task>:
 * @param t Pointer to currently running task.
 */
void
os_sched_set_current_task(struct os_task *t)
{
    g_current_task = t;
    df94:	4b01      	ldr	r3, [pc, #4]	; (df9c <os_sched_set_current_task+0x8>)
    df96:	6018      	str	r0, [r3, #0]
}
    df98:	4770      	bx	lr
    df9a:	bf00      	nop
    df9c:	2000340c 	.word	0x2000340c

0000dfa0 <os_sched_sleep>:
 * NOTE: must be called with interrupts disabled! This function does not call
 * the scheduler
 */
int
os_sched_sleep(struct os_task *t, os_time_t nticks)
{
    dfa0:	b538      	push	{r3, r4, r5, lr}
    dfa2:	4604      	mov	r4, r0
    dfa4:	460d      	mov	r5, r1
    struct os_task *entry;

    entry = NULL;

    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
    dfa6:	6c43      	ldr	r3, [r0, #68]	; 0x44
    dfa8:	b1d3      	cbz	r3, dfe0 <os_sched_sleep+0x40>
    dfaa:	6c82      	ldr	r2, [r0, #72]	; 0x48
    dfac:	649a      	str	r2, [r3, #72]	; 0x48
    dfae:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    dfb0:	6c62      	ldr	r2, [r4, #68]	; 0x44
    dfb2:	601a      	str	r2, [r3, #0]
    t->t_state = OS_TASK_SLEEP;
    dfb4:	2302      	movs	r3, #2
    dfb6:	7323      	strb	r3, [r4, #12]
    t->t_next_wakeup = os_time_get() + nticks;
    dfb8:	f000 f9fa 	bl	e3b0 <os_time_get>
    dfbc:	4428      	add	r0, r5
    dfbe:	6360      	str	r0, [r4, #52]	; 0x34
    if (nticks == OS_TIMEOUT_NEVER) {
    dfc0:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    dfc4:	d010      	beq.n	dfe8 <os_sched_sleep+0x48>
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
    } else {
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
    dfc6:	4b18      	ldr	r3, [pc, #96]	; (e028 <os_sched_sleep+0x88>)
    dfc8:	681b      	ldr	r3, [r3, #0]
    dfca:	b1d3      	cbz	r3, e002 <os_sched_sleep+0x62>
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
    dfcc:	7b5a      	ldrb	r2, [r3, #13]
    dfce:	f012 0f01 	tst.w	r2, #1
    dfd2:	d116      	bne.n	e002 <os_sched_sleep+0x62>
                    OS_TIME_TICK_GT(entry->t_next_wakeup, t->t_next_wakeup)) {
    dfd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    dfd6:	1a12      	subs	r2, r2, r0
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
    dfd8:	2a00      	cmp	r2, #0
    dfda:	dc12      	bgt.n	e002 <os_sched_sleep+0x62>
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
    dfdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    dfde:	e7f4      	b.n	dfca <os_sched_sleep+0x2a>
    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
    dfe0:	6c82      	ldr	r2, [r0, #72]	; 0x48
    dfe2:	4b12      	ldr	r3, [pc, #72]	; (e02c <os_sched_sleep+0x8c>)
    dfe4:	605a      	str	r2, [r3, #4]
    dfe6:	e7e2      	b.n	dfae <os_sched_sleep+0xe>
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
    dfe8:	7b63      	ldrb	r3, [r4, #13]
    dfea:	f043 0301 	orr.w	r3, r3, #1
    dfee:	7363      	strb	r3, [r4, #13]
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
    dff0:	2300      	movs	r3, #0
    dff2:	6463      	str	r3, [r4, #68]	; 0x44
    dff4:	4b0c      	ldr	r3, [pc, #48]	; (e028 <os_sched_sleep+0x88>)
    dff6:	685a      	ldr	r2, [r3, #4]
    dff8:	64a2      	str	r2, [r4, #72]	; 0x48
    dffa:	6014      	str	r4, [r2, #0]
    dffc:	3444      	adds	r4, #68	; 0x44
    dffe:	605c      	str	r4, [r3, #4]
    e000:	e007      	b.n	e012 <os_sched_sleep+0x72>
                break;
            }
        }
        if (entry) {
    e002:	b143      	cbz	r3, e016 <os_sched_sleep+0x76>
            TAILQ_INSERT_BEFORE(entry, t, t_os_list);
    e004:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    e006:	64a2      	str	r2, [r4, #72]	; 0x48
    e008:	6463      	str	r3, [r4, #68]	; 0x44
    e00a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    e00c:	6014      	str	r4, [r2, #0]
    e00e:	3444      	adds	r4, #68	; 0x44
    e010:	649c      	str	r4, [r3, #72]	; 0x48
        }
    }

    os_trace_task_stop_ready(t, OS_TASK_SLEEP);
    return (0);
}
    e012:	2000      	movs	r0, #0
    e014:	bd38      	pop	{r3, r4, r5, pc}
            TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
    e016:	2300      	movs	r3, #0
    e018:	6463      	str	r3, [r4, #68]	; 0x44
    e01a:	4b03      	ldr	r3, [pc, #12]	; (e028 <os_sched_sleep+0x88>)
    e01c:	685a      	ldr	r2, [r3, #4]
    e01e:	64a2      	str	r2, [r4, #72]	; 0x48
    e020:	6014      	str	r4, [r2, #0]
    e022:	3444      	adds	r4, #68	; 0x44
    e024:	605c      	str	r4, [r3, #4]
    e026:	e7f4      	b.n	e012 <os_sched_sleep+0x72>
    e028:	2000018c 	.word	0x2000018c
    e02c:	20000184 	.word	0x20000184

0000e030 <os_sched_wakeup>:
 *
 * NOTE: This function must be called with interrupts disabled.
 */
int
os_sched_wakeup(struct os_task *t)
{
    e030:	b508      	push	{r3, lr}
    struct os_task_obj *os_obj;

    assert(t->t_state == OS_TASK_SLEEP);
    e032:	7b03      	ldrb	r3, [r0, #12]
    e034:	2b02      	cmp	r3, #2
    e036:	d108      	bne.n	e04a <os_sched_wakeup+0x1a>

    /* Remove self from object list if waiting on one */
    if (t->t_obj) {
    e038:	69c3      	ldr	r3, [r0, #28]
    e03a:	b31b      	cbz	r3, e084 <os_sched_wakeup+0x54>
        os_obj = (struct os_task_obj *)t->t_obj;
        assert(!SLIST_EMPTY(&os_obj->obj_head));
    e03c:	681a      	ldr	r2, [r3, #0]
    e03e:	b172      	cbz	r2, e05e <os_sched_wakeup+0x2e>
        SLIST_REMOVE(&os_obj->obj_head, t, os_task, t_obj_list);
    e040:	4282      	cmp	r2, r0
    e042:	d117      	bne.n	e074 <os_sched_wakeup+0x44>
    e044:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
    e046:	601a      	str	r2, [r3, #0]
    e048:	e019      	b.n	e07e <os_sched_wakeup+0x4e>
    assert(t->t_state == OS_TASK_SLEEP);
    e04a:	f7fe f8cd 	bl	c1e8 <hal_debugger_connected>
    e04e:	b100      	cbz	r0, e052 <os_sched_wakeup+0x22>
    e050:	be01      	bkpt	0x0001
    e052:	2300      	movs	r3, #0
    e054:	461a      	mov	r2, r3
    e056:	4619      	mov	r1, r3
    e058:	4618      	mov	r0, r3
    e05a:	f7fe fd79 	bl	cb50 <__assert_func>
        assert(!SLIST_EMPTY(&os_obj->obj_head));
    e05e:	f7fe f8c3 	bl	c1e8 <hal_debugger_connected>
    e062:	b100      	cbz	r0, e066 <os_sched_wakeup+0x36>
    e064:	be01      	bkpt	0x0001
    e066:	2300      	movs	r3, #0
    e068:	461a      	mov	r2, r3
    e06a:	4619      	mov	r1, r3
    e06c:	4618      	mov	r0, r3
    e06e:	f7fe fd6f 	bl	cb50 <__assert_func>
        SLIST_REMOVE(&os_obj->obj_head, t, os_task, t_obj_list);
    e072:	461a      	mov	r2, r3
    e074:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
    e076:	4283      	cmp	r3, r0
    e078:	d1fb      	bne.n	e072 <os_sched_wakeup+0x42>
    e07a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    e07c:	64d3      	str	r3, [r2, #76]	; 0x4c
        SLIST_NEXT(t, t_obj_list) = NULL;
    e07e:	2300      	movs	r3, #0
    e080:	64c3      	str	r3, [r0, #76]	; 0x4c
        t->t_obj = NULL;
    e082:	61c3      	str	r3, [r0, #28]
    }

    /* Remove task from sleep list */
    t->t_state = OS_TASK_READY;
    e084:	2301      	movs	r3, #1
    e086:	7303      	strb	r3, [r0, #12]
    t->t_next_wakeup = 0;
    e088:	2300      	movs	r3, #0
    e08a:	6343      	str	r3, [r0, #52]	; 0x34
    t->t_flags &= ~OS_TASK_FLAG_NO_TIMEOUT;
    e08c:	7b43      	ldrb	r3, [r0, #13]
    e08e:	f023 0301 	bic.w	r3, r3, #1
    e092:	7343      	strb	r3, [r0, #13]
    TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
    e094:	6c43      	ldr	r3, [r0, #68]	; 0x44
    e096:	b143      	cbz	r3, e0aa <os_sched_wakeup+0x7a>
    e098:	6c82      	ldr	r2, [r0, #72]	; 0x48
    e09a:	649a      	str	r2, [r3, #72]	; 0x48
    e09c:	6c83      	ldr	r3, [r0, #72]	; 0x48
    e09e:	6c42      	ldr	r2, [r0, #68]	; 0x44
    e0a0:	601a      	str	r2, [r3, #0]
    os_sched_insert(t);
    e0a2:	f7ff ff2f 	bl	df04 <os_sched_insert>

    os_trace_task_start_ready(t);

    return (0);
}
    e0a6:	2000      	movs	r0, #0
    e0a8:	bd08      	pop	{r3, pc}
    TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
    e0aa:	6c82      	ldr	r2, [r0, #72]	; 0x48
    e0ac:	4b01      	ldr	r3, [pc, #4]	; (e0b4 <os_sched_wakeup+0x84>)
    e0ae:	605a      	str	r2, [r3, #4]
    e0b0:	e7f4      	b.n	e09c <os_sched_wakeup+0x6c>
    e0b2:	bf00      	nop
    e0b4:	2000018c 	.word	0x2000018c

0000e0b8 <os_sched_os_timer_exp>:
 * removed from the sleep list and added to the run list.
 *
 */
void
os_sched_os_timer_exp(void)
{
    e0b8:	b570      	push	{r4, r5, r6, lr}
    struct os_task *t;
    struct os_task *next;
    os_time_t now;
    os_sr_t sr;

    now = os_time_get();
    e0ba:	f000 f979 	bl	e3b0 <os_time_get>
    e0be:	4605      	mov	r5, r0

    OS_ENTER_CRITICAL(sr);
    e0c0:	f000 fa38 	bl	e534 <os_arch_save_sr>
    e0c4:	4606      	mov	r6, r0

    /*
     * Wakeup any tasks that have their sleep timer expired
     */
    t = TAILQ_FIRST(&g_os_sleep_list);
    e0c6:	4b0a      	ldr	r3, [pc, #40]	; (e0f0 <os_sched_os_timer_exp+0x38>)
    e0c8:	6818      	ldr	r0, [r3, #0]
    while (t) {
    e0ca:	b160      	cbz	r0, e0e6 <os_sched_os_timer_exp+0x2e>
        /* If task waiting forever, do not check next wakeup time */
        if (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT) {
    e0cc:	7b43      	ldrb	r3, [r0, #13]
    e0ce:	f013 0f01 	tst.w	r3, #1
    e0d2:	d108      	bne.n	e0e6 <os_sched_os_timer_exp+0x2e>
            break;
        }
        next = TAILQ_NEXT(t, t_os_list);
    e0d4:	6c44      	ldr	r4, [r0, #68]	; 0x44
        if (OS_TIME_TICK_GEQ(now, t->t_next_wakeup)) {
    e0d6:	6b43      	ldr	r3, [r0, #52]	; 0x34
    e0d8:	1aeb      	subs	r3, r5, r3
    e0da:	2b00      	cmp	r3, #0
    e0dc:	db03      	blt.n	e0e6 <os_sched_os_timer_exp+0x2e>
            os_sched_wakeup(t);
    e0de:	f7ff ffa7 	bl	e030 <os_sched_wakeup>
        } else {
            break;
        }
        t = next;
    e0e2:	4620      	mov	r0, r4
    e0e4:	e7f1      	b.n	e0ca <os_sched_os_timer_exp+0x12>
    }

    OS_EXIT_CRITICAL(sr);
    e0e6:	4630      	mov	r0, r6
    e0e8:	f000 fa2a 	bl	e540 <os_arch_restore_sr>
}
    e0ec:	bd70      	pop	{r4, r5, r6, pc}
    e0ee:	bf00      	nop
    e0f0:	2000018c 	.word	0x2000018c

0000e0f4 <os_sched_wakeup_ticks>:
 * Return the number of ticks until the first sleep timer expires.If there are
 * no such tasks then return OS_TIMEOUT_NEVER instead.
 */
os_time_t
os_sched_wakeup_ticks(os_time_t now)
{
    e0f4:	b510      	push	{r4, lr}
    e0f6:	4604      	mov	r4, r0
    os_time_t rt;
    struct os_task *t;

    OS_ASSERT_CRITICAL();
    e0f8:	f000 fa25 	bl	e546 <os_arch_in_critical>
    e0fc:	b150      	cbz	r0, e114 <os_sched_wakeup_ticks+0x20>

    t = TAILQ_FIRST(&g_os_sleep_list);
    e0fe:	4b0e      	ldr	r3, [pc, #56]	; (e138 <os_sched_wakeup_ticks+0x44>)
    e100:	681b      	ldr	r3, [r3, #0]
    if (t == NULL || (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT)) {
    e102:	b19b      	cbz	r3, e12c <os_sched_wakeup_ticks+0x38>
    e104:	7b5a      	ldrb	r2, [r3, #13]
    e106:	f012 0f01 	tst.w	r2, #1
    e10a:	d112      	bne.n	e132 <os_sched_wakeup_ticks+0x3e>
        rt = OS_TIMEOUT_NEVER;
    } else if (OS_TIME_TICK_GEQ(t->t_next_wakeup, now)) {
    e10c:	6b58      	ldr	r0, [r3, #52]	; 0x34
    e10e:	1b00      	subs	r0, r0, r4
    e110:	d40a      	bmi.n	e128 <os_sched_wakeup_ticks+0x34>
        rt = t->t_next_wakeup - now;
    } else {
        rt = 0;     /* wakeup time was in the past */
    }
    return (rt);
}
    e112:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
    e114:	f7fe f868 	bl	c1e8 <hal_debugger_connected>
    e118:	b100      	cbz	r0, e11c <os_sched_wakeup_ticks+0x28>
    e11a:	be01      	bkpt	0x0001
    e11c:	2300      	movs	r3, #0
    e11e:	461a      	mov	r2, r3
    e120:	4619      	mov	r1, r3
    e122:	4618      	mov	r0, r3
    e124:	f7fe fd14 	bl	cb50 <__assert_func>
        rt = 0;     /* wakeup time was in the past */
    e128:	2000      	movs	r0, #0
    e12a:	e7f2      	b.n	e112 <os_sched_wakeup_ticks+0x1e>
        rt = OS_TIMEOUT_NEVER;
    e12c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    e130:	e7ef      	b.n	e112 <os_sched_wakeup_ticks+0x1e>
    e132:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return (rt);
    e136:	e7ec      	b.n	e112 <os_sched_wakeup_ticks+0x1e>
    e138:	2000018c 	.word	0x2000018c

0000e13c <os_sched_next_task>:
 */
struct os_task *
os_sched_next_task(void)
{
    return (TAILQ_FIRST(&g_os_run_list));
}
    e13c:	4b01      	ldr	r3, [pc, #4]	; (e144 <os_sched_next_task+0x8>)
    e13e:	6818      	ldr	r0, [r3, #0]
    e140:	4770      	bx	lr
    e142:	bf00      	nop
    e144:	20000184 	.word	0x20000184

0000e148 <os_sched>:
{
    e148:	b538      	push	{r3, r4, r5, lr}
    e14a:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
    e14c:	f000 f9f2 	bl	e534 <os_arch_save_sr>
    e150:	4605      	mov	r5, r0
    if (!next_t) {
    e152:	b134      	cbz	r4, e162 <os_sched+0x1a>
    os_arch_ctx_sw(next_t);
    e154:	4620      	mov	r0, r4
    e156:	f000 f9e3 	bl	e520 <os_arch_ctx_sw>
    OS_EXIT_CRITICAL(sr);
    e15a:	4628      	mov	r0, r5
    e15c:	f000 f9f0 	bl	e540 <os_arch_restore_sr>
}
    e160:	bd38      	pop	{r3, r4, r5, pc}
        next_t = os_sched_next_task();
    e162:	f7ff ffeb 	bl	e13c <os_sched_next_task>
    e166:	4604      	mov	r4, r0
    e168:	e7f4      	b.n	e154 <os_sched+0xc>
	...

0000e16c <os_sched_resort>:
 * NOTE: this function expects interrupts to be disabled so they
 * are not disabled here.
 */
void
os_sched_resort(struct os_task *t)
{
    e16c:	b508      	push	{r3, lr}
    if (t->t_state == OS_TASK_READY) {
    e16e:	7b03      	ldrb	r3, [r0, #12]
    e170:	2b01      	cmp	r3, #1
    e172:	d000      	beq.n	e176 <os_sched_resort+0xa>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
        os_sched_insert(t);
    }
}
    e174:	bd08      	pop	{r3, pc}
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
    e176:	6c43      	ldr	r3, [r0, #68]	; 0x44
    e178:	b13b      	cbz	r3, e18a <os_sched_resort+0x1e>
    e17a:	6c82      	ldr	r2, [r0, #72]	; 0x48
    e17c:	649a      	str	r2, [r3, #72]	; 0x48
    e17e:	6c83      	ldr	r3, [r0, #72]	; 0x48
    e180:	6c42      	ldr	r2, [r0, #68]	; 0x44
    e182:	601a      	str	r2, [r3, #0]
        os_sched_insert(t);
    e184:	f7ff febe 	bl	df04 <os_sched_insert>
}
    e188:	e7f4      	b.n	e174 <os_sched_resort+0x8>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
    e18a:	6c82      	ldr	r2, [r0, #72]	; 0x48
    e18c:	4b01      	ldr	r3, [pc, #4]	; (e194 <os_sched_resort+0x28>)
    e18e:	605a      	str	r2, [r3, #4]
    e190:	e7f5      	b.n	e17e <os_sched_resort+0x12>
    e192:	bf00      	nop
    e194:	20000184 	.word	0x20000184

0000e198 <_clear_stack>:
static void
_clear_stack(os_stack_t *stack_bottom, int size)
{
    int i;

    for (i = 0; i < size; i++) {
    e198:	2300      	movs	r3, #0
    e19a:	e003      	b.n	e1a4 <_clear_stack+0xc>
        stack_bottom[i] = OS_STACK_PATTERN;
    e19c:	4a03      	ldr	r2, [pc, #12]	; (e1ac <_clear_stack+0x14>)
    e19e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    for (i = 0; i < size; i++) {
    e1a2:	3301      	adds	r3, #1
    e1a4:	428b      	cmp	r3, r1
    e1a6:	dbf9      	blt.n	e19c <_clear_stack+0x4>
    }
}
    e1a8:	4770      	bx	lr
    e1aa:	bf00      	nop
    e1ac:	deadbeef 	.word	0xdeadbeef

0000e1b0 <os_task_stacktop_get>:
}

os_stack_t *
os_task_stacktop_get(struct os_task *t)
{
    return &t->t_stackbottom[t->t_stacksize];
    e1b0:	6843      	ldr	r3, [r0, #4]
    e1b2:	8900      	ldrh	r0, [r0, #8]
}
    e1b4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    e1b8:	4770      	bx	lr
	...

0000e1bc <os_task_init>:
{
    e1bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e1c0:	4604      	mov	r4, r0
    e1c2:	460e      	mov	r6, r1
    e1c4:	4690      	mov	r8, r2
    e1c6:	461d      	mov	r5, r3
    e1c8:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
    memset(t, 0, sizeof(*t));
    e1cc:	2250      	movs	r2, #80	; 0x50
    e1ce:	2100      	movs	r1, #0
    e1d0:	f000 fc0e 	bl	e9f0 <memset>
    t->t_func = func;
    e1d4:	f8c4 8014 	str.w	r8, [r4, #20]
    t->t_arg = arg;
    e1d8:	61a5      	str	r5, [r4, #24]
    OS_ENTER_CRITICAL(sr);
    e1da:	f000 f9ab 	bl	e534 <os_arch_save_sr>
    rc = g_task_id;
    e1de:	4b2e      	ldr	r3, [pc, #184]	; (e298 <os_task_init+0xdc>)
    e1e0:	781d      	ldrb	r5, [r3, #0]
    g_task_id++;
    e1e2:	1c6a      	adds	r2, r5, #1
    e1e4:	701a      	strb	r2, [r3, #0]
    OS_EXIT_CRITICAL(sr);
    e1e6:	f000 f9ab 	bl	e540 <os_arch_restore_sr>
    t->t_taskid = os_task_next_id();
    e1ea:	72a5      	strb	r5, [r4, #10]
    t->t_prio = prio;
    e1ec:	f89d 3018 	ldrb.w	r3, [sp, #24]
    e1f0:	72e3      	strb	r3, [r4, #11]
    t->t_state = OS_TASK_READY;
    e1f2:	2301      	movs	r3, #1
    e1f4:	7323      	strb	r3, [r4, #12]
    t->t_name = name;
    e1f6:	6126      	str	r6, [r4, #16]
    t->t_next_wakeup = 0;
    e1f8:	2300      	movs	r3, #0
    e1fa:	6363      	str	r3, [r4, #52]	; 0x34
    rc = os_sanity_check_init(&t->t_sanity_check);
    e1fc:	f104 0620 	add.w	r6, r4, #32
    e200:	4630      	mov	r0, r6
    e202:	f7ff fe1b 	bl	de3c <os_sanity_check_init>
    if (rc != OS_OK) {
    e206:	4605      	mov	r5, r0
    e208:	2800      	cmp	r0, #0
    e20a:	d138      	bne.n	e27e <os_task_init+0xc2>
    if (sanity_itvl != OS_WAIT_FOREVER) {
    e20c:	9b07      	ldr	r3, [sp, #28]
    e20e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    e212:	d005      	beq.n	e220 <os_task_init+0x64>
        sc->sc_checkin_itvl = sanity_itvl;
    e214:	6263      	str	r3, [r4, #36]	; 0x24
        rc = os_sanity_check_register(sc);
    e216:	4630      	mov	r0, r6
    e218:	f7ff fe18 	bl	de4c <os_sanity_check_register>
        if (rc != OS_OK) {
    e21c:	4605      	mov	r5, r0
    e21e:	bb70      	cbnz	r0, e27e <os_task_init+0xc2>
    _clear_stack(stack_bottom, stack_size);
    e220:	4639      	mov	r1, r7
    e222:	9808      	ldr	r0, [sp, #32]
    e224:	f7ff ffb8 	bl	e198 <_clear_stack>
    t->t_stackbottom = stack_bottom;
    e228:	9b08      	ldr	r3, [sp, #32]
    e22a:	6063      	str	r3, [r4, #4]
    t->t_stacksize = stack_size;
    e22c:	8127      	strh	r7, [r4, #8]
    t->t_stackptr = os_arch_task_stack_init(t, os_task_stacktop_get(t),
    e22e:	4620      	mov	r0, r4
    e230:	f7ff ffbe 	bl	e1b0 <os_task_stacktop_get>
    e234:	463a      	mov	r2, r7
    e236:	4601      	mov	r1, r0
    e238:	4620      	mov	r0, r4
    e23a:	f000 f989 	bl	e550 <os_arch_task_stack_init>
    e23e:	6020      	str	r0, [r4, #0]
    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
    e240:	4b16      	ldr	r3, [pc, #88]	; (e29c <os_task_init+0xe0>)
    e242:	681b      	ldr	r3, [r3, #0]
    e244:	b17b      	cbz	r3, e266 <os_task_init+0xaa>
        assert(t->t_prio != task->t_prio);
    e246:	7ae1      	ldrb	r1, [r4, #11]
    e248:	7ada      	ldrb	r2, [r3, #11]
    e24a:	4291      	cmp	r1, r2
    e24c:	d001      	beq.n	e252 <os_task_init+0x96>
    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
    e24e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    e250:	e7f8      	b.n	e244 <os_task_init+0x88>
        assert(t->t_prio != task->t_prio);
    e252:	f7fd ffc9 	bl	c1e8 <hal_debugger_connected>
    e256:	b100      	cbz	r0, e25a <os_task_init+0x9e>
    e258:	be01      	bkpt	0x0001
    e25a:	2300      	movs	r3, #0
    e25c:	461a      	mov	r2, r3
    e25e:	4619      	mov	r1, r3
    e260:	4618      	mov	r0, r3
    e262:	f7fe fc75 	bl	cb50 <__assert_func>
    STAILQ_INSERT_TAIL(&g_os_task_list, t, t_os_task_list);
    e266:	6423      	str	r3, [r4, #64]	; 0x40
    e268:	4b0c      	ldr	r3, [pc, #48]	; (e29c <os_task_init+0xe0>)
    e26a:	685a      	ldr	r2, [r3, #4]
    e26c:	6014      	str	r4, [r2, #0]
    e26e:	f104 0240 	add.w	r2, r4, #64	; 0x40
    e272:	605a      	str	r2, [r3, #4]
    rc = os_sched_insert(t);
    e274:	4620      	mov	r0, r4
    e276:	f7ff fe45 	bl	df04 <os_sched_insert>
    e27a:	4605      	mov	r5, r0
    if (rc != OS_OK) {
    e27c:	b110      	cbz	r0, e284 <os_task_init+0xc8>
}
    e27e:	4628      	mov	r0, r5
    e280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (os_started()) {
    e284:	f7fe fd24 	bl	ccd0 <os_started>
    e288:	b908      	cbnz	r0, e28e <os_task_init+0xd2>
    return (0);
    e28a:	4605      	mov	r5, r0
    e28c:	e7f7      	b.n	e27e <os_task_init+0xc2>
        os_sched(NULL);
    e28e:	2000      	movs	r0, #0
    e290:	f7ff ff5a 	bl	e148 <os_sched>
    e294:	e7f3      	b.n	e27e <os_task_init+0xc2>
    e296:	bf00      	nop
    e298:	2000341c 	.word	0x2000341c
    e29c:	20003414 	.word	0x20003414

0000e2a0 <os_task_info_get>:
    return rc;
}

void
os_task_info_get(const struct os_task *task, struct os_task_info *oti)
{
    e2a0:	b538      	push	{r3, r4, r5, lr}
    e2a2:	4604      	mov	r4, r0
    os_stack_t *bottom;
    os_stack_t *top;

    oti->oti_prio = task->t_prio;
    e2a4:	7ac3      	ldrb	r3, [r0, #11]
    e2a6:	700b      	strb	r3, [r1, #0]
    oti->oti_taskid = task->t_taskid;
    e2a8:	7a83      	ldrb	r3, [r0, #10]
    e2aa:	704b      	strb	r3, [r1, #1]
    oti->oti_state = task->t_state;
    e2ac:	7b03      	ldrb	r3, [r0, #12]
    e2ae:	708b      	strb	r3, [r1, #2]

    bottom = task->t_stackbottom;
    e2b0:	6843      	ldr	r3, [r0, #4]
    top = bottom + task->t_stacksize;
    e2b2:	8902      	ldrh	r2, [r0, #8]
    e2b4:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    while (bottom < top) {
    e2b8:	4293      	cmp	r3, r2
    e2ba:	d205      	bcs.n	e2c8 <os_task_info_get+0x28>
        if (*bottom != OS_STACK_PATTERN) {
    e2bc:	681d      	ldr	r5, [r3, #0]
    e2be:	480f      	ldr	r0, [pc, #60]	; (e2fc <os_task_info_get+0x5c>)
    e2c0:	4285      	cmp	r5, r0
    e2c2:	d101      	bne.n	e2c8 <os_task_info_get+0x28>
            break;
        }
        ++bottom;
    e2c4:	3304      	adds	r3, #4
    e2c6:	e7f7      	b.n	e2b8 <os_task_info_get+0x18>
    }

    oti->oti_stkusage = (uint16_t) (top - bottom);
    e2c8:	1ad3      	subs	r3, r2, r3
    e2ca:	f3c3 038f 	ubfx	r3, r3, #2, #16
    e2ce:	808b      	strh	r3, [r1, #4]
    oti->oti_stksize = task->t_stacksize;
    e2d0:	8923      	ldrh	r3, [r4, #8]
    e2d2:	80cb      	strh	r3, [r1, #6]
    oti->oti_cswcnt = task->t_ctx_sw_cnt;
    e2d4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    e2d6:	608b      	str	r3, [r1, #8]
    oti->oti_runtime = task->t_run_time;
    e2d8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    e2da:	60cb      	str	r3, [r1, #12]
    oti->oti_last_checkin = task->t_sanity_check.sc_checkin_last;
    e2dc:	6a23      	ldr	r3, [r4, #32]
    e2de:	610b      	str	r3, [r1, #16]
    oti->oti_next_checkin = task->t_sanity_check.sc_checkin_last +
    e2e0:	6a23      	ldr	r3, [r4, #32]
                            task->t_sanity_check.sc_checkin_itvl;
    e2e2:	6a62      	ldr	r2, [r4, #36]	; 0x24
    oti->oti_next_checkin = task->t_sanity_check.sc_checkin_last +
    e2e4:	4413      	add	r3, r2
    e2e6:	614b      	str	r3, [r1, #20]
    oti->oti_name[0] = '\0';
    e2e8:	4608      	mov	r0, r1
    e2ea:	2300      	movs	r3, #0
    e2ec:	f800 3f18 	strb.w	r3, [r0, #24]!
    strncat(oti->oti_name, task->t_name, sizeof(oti->oti_name) - 1);
    e2f0:	221f      	movs	r2, #31
    e2f2:	6921      	ldr	r1, [r4, #16]
    e2f4:	f000 fbb0 	bl	ea58 <strncat>
}
    e2f8:	bd38      	pop	{r3, r4, r5, pc}
    e2fa:	bf00      	nop
    e2fc:	deadbeef 	.word	0xdeadbeef

0000e300 <os_deltatime>:
} basetod;

static void
os_deltatime(os_time_t delta, const struct os_timeval *base,
    struct os_timeval *result)
{
    e300:	e92d 0830 	stmdb	sp!, {r4, r5, fp}
    struct os_timeval tvdelta;

    tvdelta.tv_sec = delta / OS_TICKS_PER_SEC;
    e304:	09c3      	lsrs	r3, r0, #7
    tvdelta.tv_usec = (delta % OS_TICKS_PER_SEC) * OS_USEC_PER_TICK;
    e306:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    os_timeradd(base, &tvdelta, result);
    e30a:	e9d1 4500 	ldrd	r4, r5, [r1]
    e30e:	eb14 0b03 	adds.w	fp, r4, r3
    e312:	f145 0c00 	adc.w	ip, r5, #0
    e316:	e9c2 bc00 	strd	fp, ip, [r2]
    e31a:	688b      	ldr	r3, [r1, #8]
    e31c:	f641 6184 	movw	r1, #7812	; 0x1e84
    e320:	fb01 3000 	mla	r0, r1, r0, r3
    e324:	6090      	str	r0, [r2, #8]
    e326:	4b08      	ldr	r3, [pc, #32]	; (e348 <os_deltatime+0x48>)
    e328:	4298      	cmp	r0, r3
    e32a:	dd0a      	ble.n	e342 <os_deltatime+0x42>
    e32c:	f11b 0401 	adds.w	r4, fp, #1
    e330:	f14c 0500 	adc.w	r5, ip, #0
    e334:	e9c2 4500 	strd	r4, r5, [r2]
    e338:	f5a0 2074 	sub.w	r0, r0, #999424	; 0xf4000
    e33c:	f5a0 7010 	sub.w	r0, r0, #576	; 0x240
    e340:	6090      	str	r0, [r2, #8]
}
    e342:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
    e346:	4770      	bx	lr
    e348:	000f423f 	.word	0x000f423f

0000e34c <os_time_tick>:
}

#if MYNEWT_VAL(OS_SCHEDULING)
static void
os_time_tick(int ticks)
{
    e34c:	b570      	push	{r4, r5, r6, lr}
    os_sr_t sr;
    os_time_t delta, prev_os_time;

    assert(ticks >= 0);
    e34e:	1e04      	subs	r4, r0, #0
    e350:	db0d      	blt.n	e36e <os_time_tick+0x22>

    OS_ENTER_CRITICAL(sr);
    e352:	f000 f8ef 	bl	e534 <os_arch_save_sr>
    e356:	4605      	mov	r5, r0
    prev_os_time = g_os_time;
    e358:	4a13      	ldr	r2, [pc, #76]	; (e3a8 <os_time_tick+0x5c>)
    e35a:	6813      	ldr	r3, [r2, #0]
    g_os_time += ticks;
    e35c:	18e0      	adds	r0, r4, r3
    e35e:	6010      	str	r0, [r2, #0]

    /*
     * Update 'basetod' when 'g_os_time' crosses the 0x00000000 and
     * 0x80000000 thresholds.
     */
    if ((prev_os_time ^ g_os_time) >> 31) {
    e360:	ea90 0f03 	teq	r0, r3
    e364:	d40d      	bmi.n	e382 <os_time_tick+0x36>
        delta = g_os_time - basetod.ostime;
        os_deltatime(delta, &basetod.uptime, &basetod.uptime);
        os_deltatime(delta, &basetod.utctime, &basetod.utctime);
        basetod.ostime = g_os_time;
    }
    OS_EXIT_CRITICAL(sr);
    e366:	4628      	mov	r0, r5
    e368:	f000 f8ea 	bl	e540 <os_arch_restore_sr>
}
    e36c:	bd70      	pop	{r4, r5, r6, pc}
    assert(ticks >= 0);
    e36e:	f7fd ff3b 	bl	c1e8 <hal_debugger_connected>
    e372:	b100      	cbz	r0, e376 <os_time_tick+0x2a>
    e374:	be01      	bkpt	0x0001
    e376:	2300      	movs	r3, #0
    e378:	461a      	mov	r2, r3
    e37a:	4619      	mov	r1, r3
    e37c:	4618      	mov	r0, r3
    e37e:	f7fe fbe7 	bl	cb50 <__assert_func>
        delta = g_os_time - basetod.ostime;
    e382:	4e0a      	ldr	r6, [pc, #40]	; (e3ac <os_time_tick+0x60>)
    e384:	4631      	mov	r1, r6
    e386:	f851 4b08 	ldr.w	r4, [r1], #8
    e38a:	1b04      	subs	r4, r0, r4
        os_deltatime(delta, &basetod.uptime, &basetod.uptime);
    e38c:	460a      	mov	r2, r1
    e38e:	4620      	mov	r0, r4
    e390:	f7ff ffb6 	bl	e300 <os_deltatime>
        os_deltatime(delta, &basetod.utctime, &basetod.utctime);
    e394:	f106 0118 	add.w	r1, r6, #24
    e398:	460a      	mov	r2, r1
    e39a:	4620      	mov	r0, r4
    e39c:	f7ff ffb0 	bl	e300 <os_deltatime>
        basetod.ostime = g_os_time;
    e3a0:	4b01      	ldr	r3, [pc, #4]	; (e3a8 <os_time_tick+0x5c>)
    e3a2:	681b      	ldr	r3, [r3, #0]
    e3a4:	6033      	str	r3, [r6, #0]
    e3a6:	e7de      	b.n	e366 <os_time_tick+0x1a>
    e3a8:	20003420 	.word	0x20003420
    e3ac:	20001888 	.word	0x20001888

0000e3b0 <os_time_get>:
}
    e3b0:	4b01      	ldr	r3, [pc, #4]	; (e3b8 <os_time_get+0x8>)
    e3b2:	6818      	ldr	r0, [r3, #0]
    e3b4:	4770      	bx	lr
    e3b6:	bf00      	nop
    e3b8:	20003420 	.word	0x20003420

0000e3bc <os_time_advance>:

void
os_time_advance(int ticks)
{
    e3bc:	b510      	push	{r4, lr}
    assert(ticks >= 0);
    e3be:	1e04      	subs	r4, r0, #0
    e3c0:	db09      	blt.n	e3d6 <os_time_advance+0x1a>

    if (ticks > 0) {
    e3c2:	2c00      	cmp	r4, #0
    e3c4:	dd06      	ble.n	e3d4 <os_time_advance+0x18>
        if (!os_started()) {
    e3c6:	f7fe fc83 	bl	ccd0 <os_started>
    e3ca:	b970      	cbnz	r0, e3ea <os_time_advance+0x2e>
            g_os_time += ticks;
    e3cc:	4a0c      	ldr	r2, [pc, #48]	; (e400 <os_time_advance+0x44>)
    e3ce:	6813      	ldr	r3, [r2, #0]
    e3d0:	441c      	add	r4, r3
    e3d2:	6014      	str	r4, [r2, #0]
            os_callout_tick();
            os_sched_os_timer_exp();
            os_sched(NULL);
        }
    }
}
    e3d4:	bd10      	pop	{r4, pc}
    assert(ticks >= 0);
    e3d6:	f7fd ff07 	bl	c1e8 <hal_debugger_connected>
    e3da:	b100      	cbz	r0, e3de <os_time_advance+0x22>
    e3dc:	be01      	bkpt	0x0001
    e3de:	2300      	movs	r3, #0
    e3e0:	461a      	mov	r2, r3
    e3e2:	4619      	mov	r1, r3
    e3e4:	4618      	mov	r0, r3
    e3e6:	f7fe fbb3 	bl	cb50 <__assert_func>
            os_time_tick(ticks);
    e3ea:	4620      	mov	r0, r4
    e3ec:	f7ff ffae 	bl	e34c <os_time_tick>
            os_callout_tick();
    e3f0:	f7fe fdc2 	bl	cf78 <os_callout_tick>
            os_sched_os_timer_exp();
    e3f4:	f7ff fe60 	bl	e0b8 <os_sched_os_timer_exp>
            os_sched(NULL);
    e3f8:	2000      	movs	r0, #0
    e3fa:	f7ff fea5 	bl	e148 <os_sched>
}
    e3fe:	e7e9      	b.n	e3d4 <os_time_advance+0x18>
    e400:	20003420 	.word	0x20003420

0000e404 <os_time_delay>:
void
os_time_delay(os_time_t osticks)
{
    os_sr_t sr;

    if (osticks > 0) {
    e404:	b900      	cbnz	r0, e408 <os_time_delay+0x4>
    e406:	4770      	bx	lr
{
    e408:	b538      	push	{r3, r4, r5, lr}
    e40a:	4604      	mov	r4, r0
        OS_ENTER_CRITICAL(sr);
    e40c:	f000 f892 	bl	e534 <os_arch_save_sr>
    e410:	4605      	mov	r5, r0
        os_sched_sleep(os_sched_get_current_task(), (os_time_t)osticks);
    e412:	f7ff fdb9 	bl	df88 <os_sched_get_current_task>
    e416:	4621      	mov	r1, r4
    e418:	f7ff fdc2 	bl	dfa0 <os_sched_sleep>
        OS_EXIT_CRITICAL(sr);
    e41c:	4628      	mov	r0, r5
    e41e:	f000 f88f 	bl	e540 <os_arch_restore_sr>
        os_sched(NULL);
    e422:	2000      	movs	r0, #0
    e424:	f7ff fe90 	bl	e148 <os_sched>
    }
}
    e428:	bd38      	pop	{r3, r4, r5, pc}
	...

0000e42c <os_gettimeofday>:
    return (0);
}

int
os_gettimeofday(struct os_timeval *tv, struct os_timezone *tz)
{
    e42c:	b570      	push	{r4, r5, r6, lr}
    e42e:	4605      	mov	r5, r0
    e430:	460c      	mov	r4, r1
    os_sr_t sr;
    os_time_t delta;

    OS_ENTER_CRITICAL(sr);
    e432:	f000 f87f 	bl	e534 <os_arch_save_sr>
    e436:	4606      	mov	r6, r0
    if (tv != NULL) {
    e438:	b145      	cbz	r5, e44c <os_gettimeofday+0x20>
        delta = os_time_get() - basetod.ostime;
    e43a:	f7ff ffb9 	bl	e3b0 <os_time_get>
    e43e:	4908      	ldr	r1, [pc, #32]	; (e460 <os_gettimeofday+0x34>)
    e440:	f851 3b18 	ldr.w	r3, [r1], #24
        os_deltatime(delta, &basetod.utctime, tv);
    e444:	462a      	mov	r2, r5
    e446:	1ac0      	subs	r0, r0, r3
    e448:	f7ff ff5a 	bl	e300 <os_deltatime>
    }

    if (tz != NULL) {
    e44c:	b114      	cbz	r4, e454 <os_gettimeofday+0x28>
        *tz = basetod.timezone;
    e44e:	4b04      	ldr	r3, [pc, #16]	; (e460 <os_gettimeofday+0x34>)
    e450:	6a98      	ldr	r0, [r3, #40]	; 0x28
    e452:	6020      	str	r0, [r4, #0]
    }
    OS_EXIT_CRITICAL(sr);
    e454:	4630      	mov	r0, r6
    e456:	f000 f873 	bl	e540 <os_arch_restore_sr>

    return (0);
}
    e45a:	2000      	movs	r0, #0
    e45c:	bd70      	pop	{r4, r5, r6, pc}
    e45e:	bf00      	nop
    e460:	20001888 	.word	0x20001888

0000e464 <os_get_uptime>:
    return basetod.utctime.tv_sec > 0;
}

void
os_get_uptime(struct os_timeval *tvp)
{
    e464:	b5f0      	push	{r4, r5, r6, r7, lr}
    e466:	b085      	sub	sp, #20
    e468:	4606      	mov	r6, r0
  struct os_timeval tv;
  os_time_t delta;
  os_sr_t sr;
  os_time_t ostime;

  OS_ENTER_CRITICAL(sr);
    e46a:	f000 f863 	bl	e534 <os_arch_save_sr>
    e46e:	4607      	mov	r7, r0
  tv = basetod.uptime;
    e470:	4d0a      	ldr	r5, [pc, #40]	; (e49c <os_get_uptime+0x38>)
    e472:	466c      	mov	r4, sp
    e474:	f105 0308 	add.w	r3, r5, #8
    e478:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    e47a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ostime = basetod.ostime;
    e47e:	682d      	ldr	r5, [r5, #0]
  delta = os_time_get() - ostime;
    e480:	f7ff ff96 	bl	e3b0 <os_time_get>
    e484:	1b45      	subs	r5, r0, r5
  OS_EXIT_CRITICAL(sr);
    e486:	4638      	mov	r0, r7
    e488:	f000 f85a 	bl	e540 <os_arch_restore_sr>

  os_deltatime(delta, &tv, tvp);
    e48c:	4632      	mov	r2, r6
    e48e:	4621      	mov	r1, r4
    e490:	4628      	mov	r0, r5
    e492:	f7ff ff35 	bl	e300 <os_deltatime>
}
    e496:	b005      	add	sp, #20
    e498:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e49a:	bf00      	nop
    e49c:	20001888 	.word	0x20001888

0000e4a0 <os_get_uptime_usec>:

int64_t
os_get_uptime_usec(void)
{
    e4a0:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
    e4a4:	b084      	sub	sp, #16
  struct os_timeval tv;

  os_get_uptime(&tv);
    e4a6:	4668      	mov	r0, sp
    e4a8:	f7ff ffdc 	bl	e464 <os_get_uptime>

  return (tv.tv_sec * 1000000 + tv.tv_usec);
    e4ac:	e9dd 0100 	ldrd	r0, r1, [sp]
    e4b0:	014c      	lsls	r4, r1, #5
    e4b2:	0142      	lsls	r2, r0, #5
    e4b4:	ea44 63d0 	orr.w	r3, r4, r0, lsr #27
    e4b8:	1a12      	subs	r2, r2, r0
    e4ba:	eb63 0301 	sbc.w	r3, r3, r1
    e4be:	025c      	lsls	r4, r3, #9
    e4c0:	ea44 54d2 	orr.w	r4, r4, r2, lsr #23
    e4c4:	0255      	lsls	r5, r2, #9
    e4c6:	182e      	adds	r6, r5, r0
    e4c8:	eb44 0701 	adc.w	r7, r4, r1
    e4cc:	01bd      	lsls	r5, r7, #6
    e4ce:	ea45 6596 	orr.w	r5, r5, r6, lsr #26
    e4d2:	01b4      	lsls	r4, r6, #6
    e4d4:	1ba2      	subs	r2, r4, r6
    e4d6:	eb65 0307 	sbc.w	r3, r5, r7
    e4da:	1884      	adds	r4, r0, r2
    e4dc:	eb41 0503 	adc.w	r5, r1, r3
}
    e4e0:	9b02      	ldr	r3, [sp, #8]
    e4e2:	18e0      	adds	r0, r4, r3
    e4e4:	eb45 71e3 	adc.w	r1, r5, r3, asr #31
    e4e8:	b004      	add	sp, #16
    e4ea:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}

0000e4ee <os_time_ms_to_ticks>:

int
os_time_ms_to_ticks(uint32_t ms, os_time_t *out_ticks)
{
    e4ee:	b538      	push	{r3, r4, r5, lr}
    e4f0:	4604      	mov	r4, r0
    e4f2:	460d      	mov	r5, r1
#endif

    static_assert(OS_TICKS_PER_SEC <= UINT32_MAX,
                  "OS_TICKS_PER_SEC must be <= UINT32_MAX");

    ticks = ((uint64_t)ms * OS_TICKS_PER_SEC) / 1000;
    e4f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    e4f8:	2300      	movs	r3, #0
    e4fa:	01c0      	lsls	r0, r0, #7
    e4fc:	0e61      	lsrs	r1, r4, #25
    e4fe:	f022 fd89 	bl	31014 <__aeabi_uldivmod>
    if (ticks > UINT32_MAX) {
    e502:	2901      	cmp	r1, #1
    e504:	bf08      	it	eq
    e506:	2800      	cmpeq	r0, #0
    e508:	d202      	bcs.n	e510 <os_time_ms_to_ticks+0x22>
        return OS_EINVAL;
    }

    *out_ticks = ticks;
    e50a:	6028      	str	r0, [r5, #0]
    return 0;
    e50c:	2000      	movs	r0, #0
}
    e50e:	bd38      	pop	{r3, r4, r5, pc}
        return OS_EINVAL;
    e510:	2002      	movs	r0, #2
    e512:	e7fc      	b.n	e50e <os_time_ms_to_ticks+0x20>

0000e514 <os_arch_task_return_handler>:
    return ret;
}

static void
os_arch_task_return_handler(void)
{
    e514:	e7fe      	b.n	e514 <os_arch_task_return_handler>

0000e516 <timer_handler>:
{
    e516:	b508      	push	{r3, lr}
    os_time_advance(1);
    e518:	2001      	movs	r0, #1
    e51a:	f7ff ff4f 	bl	e3bc <os_time_advance>
}
    e51e:	bd08      	pop	{r3, pc}

0000e520 <os_arch_ctx_sw>:
{
    e520:	b508      	push	{r3, lr}
    os_sched_ctx_sw_hook(t);
    e522:	f7ff fd19 	bl	df58 <os_sched_ctx_sw_hook>
    SCB->ICSR = SCB_ICSR_PENDSVSET_Msk;
    e526:	4b02      	ldr	r3, [pc, #8]	; (e530 <os_arch_ctx_sw+0x10>)
    e528:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    e52c:	605a      	str	r2, [r3, #4]
}
    e52e:	bd08      	pop	{r3, pc}
    e530:	e000ed00 	.word	0xe000ed00

0000e534 <os_arch_save_sr>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    e534:	f3ef 8010 	mrs	r0, PRIMASK
    isr_ctx = __get_PRIMASK() & 1;
    e538:	f000 0001 	and.w	r0, r0, #1
  __ASM volatile ("cpsid i" : : : "memory");
    e53c:	b672      	cpsid	i
}
    e53e:	4770      	bx	lr

0000e540 <os_arch_restore_sr>:
    if (!isr_ctx) {
    e540:	b900      	cbnz	r0, e544 <os_arch_restore_sr+0x4>
  __ASM volatile ("cpsie i" : : : "memory");
    e542:	b662      	cpsie	i
}
    e544:	4770      	bx	lr

0000e546 <os_arch_in_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    e546:	f3ef 8010 	mrs	r0, PRIMASK
}
    e54a:	f000 0001 	and.w	r0, r0, #1
    e54e:	4770      	bx	lr

0000e550 <os_arch_task_stack_init>:
    while (1);
}

os_stack_t *
os_arch_task_stack_init(struct os_task *t, os_stack_t *stack_top, int size)
{
    e550:	b570      	push	{r4, r5, r6, lr}
    e552:	4606      	mov	r6, r0
    e554:	460d      	mov	r5, r1
    int i;
    os_stack_t *s;
    struct stack_frame *sf;

    /* Get stack frame pointer */
    s = (os_stack_t *) ((uint8_t *) stack_top - sizeof(*sf));
    e556:	f1a1 0440 	sub.w	r4, r1, #64	; 0x40

    /* Zero out R1-R3, R12 */
    for (i = 9; i < 13; ++i) {
    e55a:	2309      	movs	r3, #9
    e55c:	e003      	b.n	e566 <os_arch_task_stack_init+0x16>
        s[i] = 0;
    e55e:	2200      	movs	r2, #0
    e560:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    for (i = 9; i < 13; ++i) {
    e564:	3301      	adds	r3, #1
    e566:	2b0c      	cmp	r3, #12
    e568:	ddf9      	ble.n	e55e <os_arch_task_stack_init+0xe>
    }

    /* Set registers R4 - R11 on stack. */
    os_arch_init_task_stack(s);
    e56a:	4620      	mov	r0, r4
    e56c:	f000 f992 	bl	e894 <os_arch_init_task_stack>

    /* Set remaining portions of stack frame */
    sf = (struct stack_frame *) s;
    sf->xpsr = INITIAL_xPSR;
    e570:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    e574:	f845 3c04 	str.w	r3, [r5, #-4]
    sf->pc = (uint32_t)t->t_func;
    e578:	6973      	ldr	r3, [r6, #20]
    e57a:	f845 3c08 	str.w	r3, [r5, #-8]
    sf->r0 = (uint32_t)t->t_arg;
    e57e:	69b3      	ldr	r3, [r6, #24]
    e580:	f845 3c20 	str.w	r3, [r5, #-32]
    /* Set function to cache returns from tasks. */
    sf->lr = (uint32_t)os_arch_task_return_handler;
    e584:	4b02      	ldr	r3, [pc, #8]	; (e590 <os_arch_task_stack_init+0x40>)
    e586:	f845 3c0c 	str.w	r3, [r5, #-12]
#if MYNEWT_VAL(HARDFLOAT)
    sf->exc_lr = INITIAL_LR;
#endif

    return (s);
}
    e58a:	4620      	mov	r0, r4
    e58c:	bd70      	pop	{r4, r5, r6, pc}
    e58e:	bf00      	nop
    e590:	0000e515 	.word	0x0000e515

0000e594 <os_arch_init>:

void
os_arch_init(void)
{
    e594:	b508      	push	{r3, lr}
    /*
     * Trap on divide-by-zero.
     */
    SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    e596:	4a04      	ldr	r2, [pc, #16]	; (e5a8 <os_arch_init+0x14>)
    e598:	6953      	ldr	r3, [r2, #20]
    e59a:	f043 0310 	orr.w	r3, r3, #16
    e59e:	6153      	str	r3, [r2, #20]
    os_init_idle_task();
    e5a0:	f7fe fb9c 	bl	ccdc <os_init_idle_task>
}
    e5a4:	bd08      	pop	{r3, pc}
    e5a6:	bf00      	nop
    e5a8:	e000ed00 	.word	0xe000ed00

0000e5ac <os_arch_os_init>:
    SVC_Call(os_arch_init);
}

os_error_t
os_arch_os_init(void)
{
    e5ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    e5ae:	f3ef 8405 	mrs	r4, IPSR
    os_error_t err;
    int i;

    /* Cannot be called within an ISR */
    err = OS_ERR_IN_ISR;
    if (__get_IPSR() == 0) {
    e5b2:	b90c      	cbnz	r4, e5b8 <os_arch_os_init+0xc>
        err = OS_OK;

        /* Drop priority for all interrupts */
        for (i = 0; i < sizeof(NVIC->IP); i++) {
    e5b4:	2400      	movs	r4, #0
    e5b6:	e009      	b.n	e5cc <os_arch_os_init+0x20>
    err = OS_ERR_IN_ISR;
    e5b8:	2007      	movs	r0, #7
    e5ba:	e02e      	b.n	e61a <os_arch_os_init+0x6e>
            NVIC->IP[i] = -1;
    e5bc:	f104 4560 	add.w	r5, r4, #3758096384	; 0xe0000000
    e5c0:	f505 4561 	add.w	r5, r5, #57600	; 0xe100
    e5c4:	26ff      	movs	r6, #255	; 0xff
    e5c6:	f885 6300 	strb.w	r6, [r5, #768]	; 0x300
        for (i = 0; i < sizeof(NVIC->IP); i++) {
    e5ca:	3401      	adds	r4, #1
    e5cc:	2cef      	cmp	r4, #239	; 0xef
    e5ce:	d9f5      	bls.n	e5bc <os_arch_os_init+0x10>
         * Install default interrupt handler for all interrupts except Reset,
         * which'll print out system state at the time of the interrupt, and
         * few other regs which should help in trying to figure out what went
         * wrong.
         */
        for (i = -NVIC_USER_IRQ_OFFSET + 2;
    e5d0:	f06f 040d 	mvn.w	r4, #13
    e5d4:	e007      	b.n	e5e6 <os_arch_os_init+0x3a>
             i < NVIC_NUM_VECTORS - NVIC_USER_IRQ_OFFSET; i++) {
            NVIC_SetVector(i, (uint32_t)os_default_irq_asm);
    e5d6:	b265      	sxtb	r5, r4
  uint32_t vectors = (uint32_t )SCB->VTOR;
    e5d8:	4e12      	ldr	r6, [pc, #72]	; (e624 <os_arch_os_init+0x78>)
    e5da:	68b6      	ldr	r6, [r6, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
    e5dc:	3510      	adds	r5, #16
    e5de:	4f12      	ldr	r7, [pc, #72]	; (e628 <os_arch_os_init+0x7c>)
    e5e0:	f846 7025 	str.w	r7, [r6, r5, lsl #2]
             i < NVIC_NUM_VECTORS - NVIC_USER_IRQ_OFFSET; i++) {
    e5e4:	3401      	adds	r4, #1
        for (i = -NVIC_USER_IRQ_OFFSET + 2;
    e5e6:	2c25      	cmp	r4, #37	; 0x25
    e5e8:	ddf5      	ble.n	e5d6 <os_arch_os_init+0x2a>
  uint32_t vectors = (uint32_t )SCB->VTOR;
    e5ea:	4c0e      	ldr	r4, [pc, #56]	; (e624 <os_arch_os_init+0x78>)
    e5ec:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
    e5ee:	4e0f      	ldr	r6, [pc, #60]	; (e62c <os_arch_os_init+0x80>)
    e5f0:	62ee      	str	r6, [r5, #44]	; 0x2c
  uint32_t vectors = (uint32_t )SCB->VTOR;
    e5f2:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
    e5f4:	4e0e      	ldr	r6, [pc, #56]	; (e630 <os_arch_os_init+0x84>)
    e5f6:	63ae      	str	r6, [r5, #56]	; 0x38
  uint32_t vectors = (uint32_t )SCB->VTOR;
    e5f8:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
    e5fa:	4e0e      	ldr	r6, [pc, #56]	; (e634 <os_arch_os_init+0x88>)
    e5fc:	63ee      	str	r6, [r5, #60]	; 0x3c
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    e5fe:	25e0      	movs	r5, #224	; 0xe0
    e600:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
    e604:	2520      	movs	r5, #32
    e606:	77e5      	strb	r5, [r4, #31]
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    e608:	f3ef 8414 	mrs	r4, CONTROL

        /* Set the SVC interrupt to priority 0 (highest configurable) */
        NVIC_SetPriority(SVCall_IRQn, SVC_PRIO);

        /* Check if privileged or not */
        if ((__get_CONTROL() & 1) == 0) {
    e60c:	f014 0f01 	tst.w	r4, #1
    e610:	d004      	beq.n	e61c <os_arch_os_init+0x70>
    SVC_Call(os_arch_init);
    e612:	f8df c024 	ldr.w	ip, [pc, #36]	; e638 <os_arch_os_init+0x8c>
    e616:	df00      	svc	0
        err = OS_OK;
    e618:	2000      	movs	r0, #0
            svc_os_arch_init();
        }
    }

    return err;
}
    e61a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            os_arch_init();
    e61c:	f7ff ffba 	bl	e594 <os_arch_init>
        err = OS_OK;
    e620:	2000      	movs	r0, #0
    e622:	e7fa      	b.n	e61a <os_arch_os_init+0x6e>
    e624:	e000ed00 	.word	0xe000ed00
    e628:	0000e917 	.word	0x0000e917
    e62c:	0000e89b 	.word	0x0000e89b
    e630:	0000e8e1 	.word	0x0000e8e1
    e634:	0000e90b 	.word	0x0000e90b
    e638:	0000e595 	.word	0x0000e595

0000e63c <os_arch_start>:

uint32_t
os_arch_start(void)
{
    e63c:	b510      	push	{r4, lr}
    struct os_task *t;

    /* Get the highest priority ready to run to set the current task */
    t = os_sched_next_task();
    e63e:	f7ff fd7d 	bl	e13c <os_sched_next_task>
    e642:	4604      	mov	r4, r0
    os_sched_set_current_task(t);
    e644:	f7ff fca6 	bl	df94 <os_sched_set_current_task>

    /* Adjust PSP so it looks like this task just took an exception */
    __set_PSP((uint32_t)t->t_stackptr + offsetof(struct stack_frame, r0));
    e648:	6823      	ldr	r3, [r4, #0]
    e64a:	3320      	adds	r3, #32
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    e64c:	f383 8809 	msr	PSP, r3

    /* Intitialize and start system clock timer */
    os_tick_init(OS_TICKS_PER_SEC, OS_TICK_PRIO);
    e650:	2106      	movs	r1, #6
    e652:	2080      	movs	r0, #128	; 0x80
    e654:	f01f ff56 	bl	2e504 <os_tick_init>

    /* Mark the OS as started, right before we run our first task */
    g_os_started = 1;
    e658:	4b03      	ldr	r3, [pc, #12]	; (e668 <os_arch_start+0x2c>)
    e65a:	2201      	movs	r2, #1
    e65c:	601a      	str	r2, [r3, #0]

    /* Perform context switch */
    os_arch_ctx_sw(t);
    e65e:	4620      	mov	r0, r4
    e660:	f7ff ff5e 	bl	e520 <os_arch_ctx_sw>

    return (uint32_t)(t->t_arg);
}
    e664:	69a0      	ldr	r0, [r4, #24]
    e666:	bd10      	pop	{r4, pc}
    e668:	2000339c 	.word	0x2000339c

0000e66c <os_arch_os_start>:
 *
 * @return os_error_t
 */
os_error_t
os_arch_os_start(void)
{
    e66c:	b510      	push	{r4, lr}
     * privileged or un-privileged mode.
     *
     * We switch to using "empty" part of idle task's stack until
     * the svc_os_arch_start() executes SVC, and we will never return.
     */
    os_set_env(g_idle_task.t_stackptr - 1);
    e66e:	4814      	ldr	r0, [pc, #80]	; (e6c0 <os_arch_os_start+0x54>)
    e670:	6800      	ldr	r0, [r0, #0]
    e672:	3804      	subs	r0, #4
    e674:	f000 f904 	bl	e880 <os_set_env>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    e678:	f3ef 8405 	mrs	r4, IPSR

    err = OS_ERR_IN_ISR;
    if (__get_IPSR() == 0) {
    e67c:	b9d4      	cbnz	r4, e6b4 <os_arch_os_start+0x48>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    e67e:	f3ef 8414 	mrs	r4, CONTROL
         * The following switch statement is really just a sanity check to
         * insure that the os initialization routine was called prior to the
         * os start routine.
         */
        err = OS_OK;
        switch (__get_CONTROL() & 0x03) {
    e682:	f004 0403 	and.w	r4, r4, #3
    e686:	2c03      	cmp	r4, #3
    e688:	d808      	bhi.n	e69c <os_arch_os_start+0x30>
    e68a:	e8df f004 	tbb	[pc, r4]
    e68e:	1515      	.short	0x1515
    e690:	0c02      	.short	0x0c02
        case 0x02:
            /*
             * We are running in Privileged Thread mode w/SP = PSP but we
             * are supposed to be un-privileged.
             */
            if ((os_flags & 1) == OS_RUN_UNPRIV) {
    e692:	4c0c      	ldr	r4, [pc, #48]	; (e6c4 <os_arch_os_start+0x58>)
    e694:	6824      	ldr	r4, [r4, #0]
    e696:	f014 0f01 	tst.w	r4, #1
    e69a:	d10f      	bne.n	e6bc <os_arch_os_start+0x50>
    SVC_Call(os_arch_start);
    e69c:	f8df c028 	ldr.w	ip, [pc, #40]	; e6c8 <os_arch_os_start+0x5c>
    e6a0:	df00      	svc	0
    e6a2:	2000      	movs	r0, #0
            svc_os_arch_start();
        }
    }

    return err;
}
    e6a4:	bd10      	pop	{r4, pc}
            if  ((os_flags & 1) == OS_RUN_PRIV) {
    e6a6:	4c07      	ldr	r4, [pc, #28]	; (e6c4 <os_arch_os_start+0x58>)
    e6a8:	6824      	ldr	r4, [r4, #0]
    e6aa:	f014 0f01 	tst.w	r4, #1
    e6ae:	d1f5      	bne.n	e69c <os_arch_os_start+0x30>
                err = OS_ERR_PRIV;
    e6b0:	2008      	movs	r0, #8
    e6b2:	e7f7      	b.n	e6a4 <os_arch_os_start+0x38>
    err = OS_ERR_IN_ISR;
    e6b4:	2007      	movs	r0, #7
    e6b6:	e7f5      	b.n	e6a4 <os_arch_os_start+0x38>
            err = OS_ERR_PRIV;
    e6b8:	2008      	movs	r0, #8
    e6ba:	e7f3      	b.n	e6a4 <os_arch_os_start+0x38>
                err = OS_ERR_PRIV;
    e6bc:	2008      	movs	r0, #8
    e6be:	e7f1      	b.n	e6a4 <os_arch_os_start+0x38>
    e6c0:	20003348 	.word	0x20003348
    e6c4:	200018b8 	.word	0x200018b8
    e6c8:	0000e63d 	.word	0x0000e63d

0000e6cc <os_mutex_init>:
os_error_t
os_mutex_init(struct os_mutex *mu)
{
    os_error_t ret;

    if (!mu) {
    e6cc:	4603      	mov	r3, r0
    e6ce:	b128      	cbz	r0, e6dc <os_mutex_init+0x10>
    }

    os_trace_api_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)mu);

    /* Initialize to 0 */
    mu->mu_prio = 0;
    e6d0:	2000      	movs	r0, #0
    e6d2:	7158      	strb	r0, [r3, #5]
    mu->mu_level = 0;
    e6d4:	80d8      	strh	r0, [r3, #6]
    mu->mu_owner = NULL;
    e6d6:	6098      	str	r0, [r3, #8]
    SLIST_FIRST(&mu->mu_head) = NULL;
    e6d8:	6018      	str	r0, [r3, #0]
    e6da:	4770      	bx	lr
        ret = OS_INVALID_PARM;
    e6dc:	2003      	movs	r0, #3
    ret = OS_OK;

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)ret);
    return ret;
}
    e6de:	4770      	bx	lr

0000e6e0 <os_mutex_release>:

os_error_t
os_mutex_release(struct os_mutex *mu)
{
    e6e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32(OS_TRACE_ID_MUTEX_RELEASE, (uint32_t)mu);

    /* Check if OS is started */
    if (!g_os_started) {
    e6e2:	4b2e      	ldr	r3, [pc, #184]	; (e79c <os_mutex_release+0xbc>)
    e6e4:	681b      	ldr	r3, [r3, #0]
    e6e6:	2b00      	cmp	r3, #0
    e6e8:	d052      	beq.n	e790 <os_mutex_release+0xb0>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid mutex */
    if (!mu) {
    e6ea:	2800      	cmp	r0, #0
    e6ec:	d052      	beq.n	e794 <os_mutex_release+0xb4>
    e6ee:	4604      	mov	r4, r0
        ret = OS_INVALID_PARM;
        goto done;
    }

    /* We better own this mutex! */
    current = os_sched_get_current_task();
    e6f0:	f7ff fc4a 	bl	df88 <os_sched_get_current_task>
    e6f4:	4605      	mov	r5, r0
    if ((mu->mu_level == 0) || (mu->mu_owner != current)) {
    e6f6:	88e3      	ldrh	r3, [r4, #6]
    e6f8:	2b00      	cmp	r3, #0
    e6fa:	d04d      	beq.n	e798 <os_mutex_release+0xb8>
    e6fc:	68a2      	ldr	r2, [r4, #8]
    e6fe:	4282      	cmp	r2, r0
    e700:	d001      	beq.n	e706 <os_mutex_release+0x26>
        ret = OS_BAD_MUTEX;
    e702:	2005      	movs	r0, #5
    e704:	e045      	b.n	e792 <os_mutex_release+0xb2>
        goto done;
    }

    /* Don't release if nested, just decrement nesting level */
    if (mu->mu_level != 1) {
    e706:	2b01      	cmp	r3, #1
    e708:	d003      	beq.n	e712 <os_mutex_release+0x32>
        --mu->mu_level;
    e70a:	3b01      	subs	r3, #1
    e70c:	80e3      	strh	r3, [r4, #6]
        ret = OS_OK;
    e70e:	2000      	movs	r0, #0
        goto done;
    e710:	e03f      	b.n	e792 <os_mutex_release+0xb2>
    }

    OS_ENTER_CRITICAL(sr);
    e712:	f7ff ff0f 	bl	e534 <os_arch_save_sr>
    e716:	4607      	mov	r7, r0

    /* Decrement nesting level (this effectively sets nesting level to 0) */
    --mu->mu_level;
    e718:	88e3      	ldrh	r3, [r4, #6]
    e71a:	3b01      	subs	r3, #1
    e71c:	80e3      	strh	r3, [r4, #6]

    /* Restore owner task's priority; resort list if different  */
    if (current->t_prio != mu->mu_prio) {
    e71e:	7aea      	ldrb	r2, [r5, #11]
    e720:	7963      	ldrb	r3, [r4, #5]
    e722:	429a      	cmp	r2, r3
    e724:	d11e      	bne.n	e764 <os_mutex_release+0x84>
        current->t_prio = mu->mu_prio;
        os_sched_resort(current);
    }

    /* Check if tasks are waiting for the mutex */
    rdy = SLIST_FIRST(&mu->mu_head);
    e726:	6826      	ldr	r6, [r4, #0]
    if (rdy) {
    e728:	b146      	cbz	r6, e73c <os_mutex_release+0x5c>
        /* There is one waiting. Wake it up */
        assert(rdy->t_obj);
    e72a:	69f3      	ldr	r3, [r6, #28]
    e72c:	b1fb      	cbz	r3, e76e <os_mutex_release+0x8e>
        os_sched_wakeup(rdy);
    e72e:	4630      	mov	r0, r6
    e730:	f7ff fc7e 	bl	e030 <os_sched_wakeup>

        /* Set mutex internals */
        mu->mu_level = 1;
    e734:	2301      	movs	r3, #1
    e736:	80e3      	strh	r3, [r4, #6]
        mu->mu_prio = rdy->t_prio;
    e738:	7af3      	ldrb	r3, [r6, #11]
    e73a:	7163      	strb	r3, [r4, #5]
    }

    /* Set new owner of mutex (or NULL if not owned) */
    mu->mu_owner = rdy;
    e73c:	60a6      	str	r6, [r4, #8]
    if (rdy) {
    e73e:	b116      	cbz	r6, e746 <os_mutex_release+0x66>
        rdy->t_lockcnt++;
    e740:	7bb3      	ldrb	r3, [r6, #14]
    e742:	3301      	adds	r3, #1
    e744:	73b3      	strb	r3, [r6, #14]
    }
    --current->t_lockcnt;
    e746:	7bab      	ldrb	r3, [r5, #14]
    e748:	3b01      	subs	r3, #1
    e74a:	73ab      	strb	r3, [r5, #14]

    /* Do we need to re-schedule? */
    resched = 0;
    rdy = os_sched_next_task();
    e74c:	f7ff fcf6 	bl	e13c <os_sched_next_task>
    e750:	4604      	mov	r4, r0
    if (rdy != current) {
    e752:	4285      	cmp	r5, r0
    e754:	d015      	beq.n	e782 <os_mutex_release+0xa2>
        resched = 1;
    e756:	2501      	movs	r5, #1
    }
    OS_EXIT_CRITICAL(sr);
    e758:	4638      	mov	r0, r7
    e75a:	f7ff fef1 	bl	e540 <os_arch_restore_sr>

    /* Re-schedule if needed */
    if (resched) {
    e75e:	b995      	cbnz	r5, e786 <os_mutex_release+0xa6>
        os_sched(rdy);
    }

    ret = OS_OK;
    e760:	2000      	movs	r0, #0
    e762:	e016      	b.n	e792 <os_mutex_release+0xb2>
        current->t_prio = mu->mu_prio;
    e764:	72eb      	strb	r3, [r5, #11]
        os_sched_resort(current);
    e766:	4628      	mov	r0, r5
    e768:	f7ff fd00 	bl	e16c <os_sched_resort>
    e76c:	e7db      	b.n	e726 <os_mutex_release+0x46>
        assert(rdy->t_obj);
    e76e:	f7fd fd3b 	bl	c1e8 <hal_debugger_connected>
    e772:	b100      	cbz	r0, e776 <os_mutex_release+0x96>
    e774:	be01      	bkpt	0x0001
    e776:	2300      	movs	r3, #0
    e778:	461a      	mov	r2, r3
    e77a:	4619      	mov	r1, r3
    e77c:	4618      	mov	r0, r3
    e77e:	f7fe f9e7 	bl	cb50 <__assert_func>
    resched = 0;
    e782:	2500      	movs	r5, #0
    e784:	e7e8      	b.n	e758 <os_mutex_release+0x78>
        os_sched(rdy);
    e786:	4620      	mov	r0, r4
    e788:	f7ff fcde 	bl	e148 <os_sched>
    ret = OS_OK;
    e78c:	2000      	movs	r0, #0
    e78e:	e000      	b.n	e792 <os_mutex_release+0xb2>
        ret = OS_NOT_STARTED;
    e790:	2009      	movs	r0, #9

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_RELEASE, (uint32_t)ret);
    return ret;
}
    e792:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ret = OS_INVALID_PARM;
    e794:	2003      	movs	r0, #3
    e796:	e7fc      	b.n	e792 <os_mutex_release+0xb2>
        ret = OS_BAD_MUTEX;
    e798:	2005      	movs	r0, #5
    e79a:	e7fa      	b.n	e792 <os_mutex_release+0xb2>
    e79c:	2000339c 	.word	0x2000339c

0000e7a0 <os_mutex_pend>:
    struct os_task *last;

    os_trace_api_u32x2(OS_TRACE_ID_MUTEX_PEND, (uint32_t)mu, (uint32_t)timeout);

    /* OS must be started when calling this function */
    if (!g_os_started) {
    e7a0:	4b36      	ldr	r3, [pc, #216]	; (e87c <os_mutex_pend+0xdc>)
    e7a2:	681b      	ldr	r3, [r3, #0]
    e7a4:	2b00      	cmp	r3, #0
    e7a6:	d065      	beq.n	e874 <os_mutex_pend+0xd4>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid mutex */
    if (!mu) {
    e7a8:	2800      	cmp	r0, #0
    e7aa:	d065      	beq.n	e878 <os_mutex_pend+0xd8>
{
    e7ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e7b0:	460f      	mov	r7, r1
    e7b2:	4604      	mov	r4, r0
        ret = OS_INVALID_PARM;
        goto done;
    }

    OS_ENTER_CRITICAL(sr);
    e7b4:	f7ff febe 	bl	e534 <os_arch_save_sr>
    e7b8:	4680      	mov	r8, r0

    /* Is this owned? */
    current = os_sched_get_current_task();
    e7ba:	f7ff fbe5 	bl	df88 <os_sched_get_current_task>
    e7be:	4605      	mov	r5, r0
    if (mu->mu_level == 0) {
    e7c0:	88e3      	ldrh	r3, [r4, #6]
    e7c2:	b19b      	cbz	r3, e7ec <os_mutex_pend+0x4c>
        ret = OS_OK;
        goto done;
    }

    /* Are we owner? */
    if (mu->mu_owner == current) {
    e7c4:	68a2      	ldr	r2, [r4, #8]
    e7c6:	4282      	cmp	r2, r0
    e7c8:	d01e      	beq.n	e808 <os_mutex_pend+0x68>
        ret = OS_OK;
        goto done;
    }

    /* Mutex is not owned by us. If timeout is 0, return immediately */
    if (timeout == 0) {
    e7ca:	b327      	cbz	r7, e816 <os_mutex_pend+0x76>
        ret = OS_TIMEOUT;
        goto done;
    }

    /* Change priority of owner if needed */
    if (mu->mu_owner->t_prio > current->t_prio) {
    e7cc:	7ad1      	ldrb	r1, [r2, #11]
    e7ce:	7ac3      	ldrb	r3, [r0, #11]
    e7d0:	4299      	cmp	r1, r3
    e7d2:	d825      	bhi.n	e820 <os_mutex_pend+0x80>
        os_sched_resort(mu->mu_owner);
    }

    /* Link current task to tasks waiting for mutex */
    last = NULL;
    if (!SLIST_EMPTY(&mu->mu_head)) {
    e7d4:	6821      	ldr	r1, [r4, #0]
    e7d6:	b369      	cbz	r1, e834 <os_mutex_pend+0x94>
        /* Insert in priority order */
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
    e7d8:	460b      	mov	r3, r1
    last = NULL;
    e7da:	2600      	movs	r6, #0
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
    e7dc:	b32b      	cbz	r3, e82a <os_mutex_pend+0x8a>
            if (current->t_prio < entry->t_prio) {
    e7de:	7ae8      	ldrb	r0, [r5, #11]
    e7e0:	7ada      	ldrb	r2, [r3, #11]
    e7e2:	4290      	cmp	r0, r2
    e7e4:	d321      	bcc.n	e82a <os_mutex_pend+0x8a>
                break;
            }
            last = entry;
    e7e6:	461e      	mov	r6, r3
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
    e7e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    e7ea:	e7f7      	b.n	e7dc <os_mutex_pend+0x3c>
        mu->mu_owner = current;
    e7ec:	60a0      	str	r0, [r4, #8]
        mu->mu_prio  = current->t_prio;
    e7ee:	7ac3      	ldrb	r3, [r0, #11]
    e7f0:	7163      	strb	r3, [r4, #5]
        current->t_lockcnt++;
    e7f2:	7b83      	ldrb	r3, [r0, #14]
    e7f4:	3301      	adds	r3, #1
    e7f6:	7383      	strb	r3, [r0, #14]
        mu->mu_level = 1;
    e7f8:	2301      	movs	r3, #1
    e7fa:	80e3      	strh	r3, [r4, #6]
        OS_EXIT_CRITICAL(sr);
    e7fc:	4640      	mov	r0, r8
    e7fe:	f7ff fe9f 	bl	e540 <os_arch_restore_sr>
        ret = OS_OK;
    e802:	2000      	movs	r0, #0
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_PEND, (uint32_t)ret);
    return ret;
}
    e804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ++mu->mu_level;
    e808:	3301      	adds	r3, #1
    e80a:	80e3      	strh	r3, [r4, #6]
        OS_EXIT_CRITICAL(sr);
    e80c:	4640      	mov	r0, r8
    e80e:	f7ff fe97 	bl	e540 <os_arch_restore_sr>
        ret = OS_OK;
    e812:	2000      	movs	r0, #0
        goto done;
    e814:	e7f6      	b.n	e804 <os_mutex_pend+0x64>
        OS_EXIT_CRITICAL(sr);
    e816:	4640      	mov	r0, r8
    e818:	f7ff fe92 	bl	e540 <os_arch_restore_sr>
        ret = OS_TIMEOUT;
    e81c:	2006      	movs	r0, #6
        goto done;
    e81e:	e7f1      	b.n	e804 <os_mutex_pend+0x64>
        mu->mu_owner->t_prio = current->t_prio;
    e820:	72d3      	strb	r3, [r2, #11]
        os_sched_resort(mu->mu_owner);
    e822:	68a0      	ldr	r0, [r4, #8]
    e824:	f7ff fca2 	bl	e16c <os_sched_resort>
    e828:	e7d4      	b.n	e7d4 <os_mutex_pend+0x34>
    if (last) {
    e82a:	b11e      	cbz	r6, e834 <os_mutex_pend+0x94>
        SLIST_INSERT_AFTER(last, current, t_obj_list);
    e82c:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
    e82e:	64eb      	str	r3, [r5, #76]	; 0x4c
    e830:	64f5      	str	r5, [r6, #76]	; 0x4c
    e832:	e001      	b.n	e838 <os_mutex_pend+0x98>
        SLIST_INSERT_HEAD(&mu->mu_head, current, t_obj_list);
    e834:	64e9      	str	r1, [r5, #76]	; 0x4c
    e836:	6025      	str	r5, [r4, #0]
    current->t_obj = mu;
    e838:	61ec      	str	r4, [r5, #28]
    current->t_flags |= OS_TASK_FLAG_MUTEX_WAIT;
    e83a:	7b6b      	ldrb	r3, [r5, #13]
    e83c:	f043 0304 	orr.w	r3, r3, #4
    e840:	736b      	strb	r3, [r5, #13]
    os_sched_sleep(current, timeout);
    e842:	4639      	mov	r1, r7
    e844:	4628      	mov	r0, r5
    e846:	f7ff fbab 	bl	dfa0 <os_sched_sleep>
    OS_EXIT_CRITICAL(sr);
    e84a:	4640      	mov	r0, r8
    e84c:	f7ff fe78 	bl	e540 <os_arch_restore_sr>
    os_sched(NULL);
    e850:	2000      	movs	r0, #0
    e852:	f7ff fc79 	bl	e148 <os_sched>
    OS_ENTER_CRITICAL(sr);
    e856:	f7ff fe6d 	bl	e534 <os_arch_save_sr>
    current->t_flags &= ~OS_TASK_FLAG_MUTEX_WAIT;
    e85a:	7b6b      	ldrb	r3, [r5, #13]
    e85c:	f023 0304 	bic.w	r3, r3, #4
    e860:	736b      	strb	r3, [r5, #13]
    OS_EXIT_CRITICAL(sr);
    e862:	f7ff fe6d 	bl	e540 <os_arch_restore_sr>
    if (mu->mu_owner == current) {
    e866:	68a3      	ldr	r3, [r4, #8]
    e868:	42ab      	cmp	r3, r5
    e86a:	d001      	beq.n	e870 <os_mutex_pend+0xd0>
        ret = OS_TIMEOUT;
    e86c:	2006      	movs	r0, #6
    e86e:	e7c9      	b.n	e804 <os_mutex_pend+0x64>
        ret = OS_OK;
    e870:	2000      	movs	r0, #0
    e872:	e7c7      	b.n	e804 <os_mutex_pend+0x64>
        ret = OS_NOT_STARTED;
    e874:	2009      	movs	r0, #9
    e876:	4770      	bx	lr
        ret = OS_INVALID_PARM;
    e878:	2003      	movs	r0, #3
}
    e87a:	4770      	bx	lr
    e87c:	2000339c 	.word	0x2000339c

0000e880 <os_set_env>:
        .global os_set_env
os_set_env:
        .fnstart
        .cantunwind

        MSR     PSP,R0
    e880:	f380 8809 	msr	PSP, r0
        LDR     R0,=os_flags
    e884:	482b      	ldr	r0, [pc, #172]	; (e934 <os_default_irq_asm+0x1e>)
        LDRB    R0,[R0]
    e886:	7800      	ldrb	r0, [r0, #0]
        ADDS    R0, R0, #2
    e888:	3002      	adds	r0, #2
        MSR     CONTROL,R0
    e88a:	f380 8814 	msr	CONTROL, r0
        ISB
    e88e:	f3bf 8f6f 	isb	sy
        BX      LR
    e892:	4770      	bx	lr

0000e894 <os_arch_init_task_stack>:
        .type   os_arch_init_task_stack, %function
        .global os_arch_init_task_stack
os_arch_init_task_stack:
        .fnstart

        STMIA   R0,{R4-R11}
    e894:	e880 0ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp}
        BX      LR
    e898:	4770      	bx	lr

0000e89a <SVC_Handler>:
        PUSH    {R4,LR}
        BL      os_trace_isr_enter
        POP     {R4,LR}
#endif

        MRS     R0,PSP                  /* Read PSP */
    e89a:	f3ef 8009 	mrs	r0, PSP
        LDR     R1,[R0,#24]             /* Read Saved PC from Stack */
    e89e:	6981      	ldr	r1, [r0, #24]
        LDRB    R1,[R1,#-2]             /* Load SVC Number */
    e8a0:	f811 1c02 	ldrb.w	r1, [r1, #-2]
        CBNZ    R1,SVC_User
    e8a4:	b951      	cbnz	r1, e8bc <SVC_User>

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
    e8a6:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
    e8aa:	b510      	push	{r4, lr}
        BLX     R12                     /* Call SVC Function */
    e8ac:	47e0      	blx	ip
        POP     {R4,LR}                 /* Restore EXC_RETURN */
    e8ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

        MRS     R12,PSP                 /* Read PSP */
    e8b2:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R2}             /* Store return values */
    e8b6:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR                      /* Return from interrupt */
    e8ba:	4770      	bx	lr

0000e8bc <SVC_User>:

        /*------------------- User SVC ------------------------------*/
SVC_User:
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
    e8bc:	b510      	push	{r4, lr}
        LDR     R2,=SVC_Count
    e8be:	4a1e      	ldr	r2, [pc, #120]	; (e938 <os_default_irq_asm+0x22>)
        LDR     R2,[R2]
    e8c0:	6812      	ldr	r2, [r2, #0]
        CMP     R1,R2
    e8c2:	4291      	cmp	r1, r2
        BHI     SVC_Done                /* Overflow */
    e8c4:	d809      	bhi.n	e8da <SVC_Done>

        LDR     R4,=SVC_Table-4
    e8c6:	4c1d      	ldr	r4, [pc, #116]	; (e93c <os_default_irq_asm+0x26>)
        LDR     R4,[R4,R1,LSL #2]       /* Load SVC Function Address */
    e8c8:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
    e8cc:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        BLX     R4                      /* Call SVC Function */
    e8d0:	47a0      	blx	r4

        MRS     R12,PSP
    e8d2:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R3}             /* Function return values */
    e8d6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

0000e8da <SVC_Done>:
SVC_Done:
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
    e8da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR                      /* Return from interrupt */
    e8de:	4770      	bx	lr

0000e8e0 <PendSV_Handler>:
        .global PendSV_Handler
PendSV_Handler:
        .fnstart
        .cantunwind

        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
    e8e0:	4b17      	ldr	r3, [pc, #92]	; (e940 <os_default_irq_asm+0x2a>)
        LDR     R2,[R3]                 /* Store in R2 */
    e8e2:	681a      	ldr	r2, [r3, #0]
        LDR     R3,=g_current_task      /* Get current task */
    e8e4:	4b17      	ldr	r3, [pc, #92]	; (e944 <os_default_irq_asm+0x2e>)
        LDR     R1,[R3]                 /* Current task in R1 */
    e8e6:	6819      	ldr	r1, [r3, #0]
        CMP     R1,R2
    e8e8:	4291      	cmp	r1, r2
        IT      EQ
    e8ea:	bf08      	it	eq
        BXEQ    LR                      /* RETI, no task switch */
    e8ec:	4770      	bxeq	lr

        MRS     R12,PSP                 /* Read PSP */
    e8ee:	f3ef 8c09 	mrs	ip, PSP
        TST     LR,#0x10                /* is it extended frame? */
        IT      EQ
        VSTMDBEQ R12!,{S16-S31}         /* yes; push the regs */
        STMDB   R12!,{R4-R11,LR}        /* Save Old context */
#else
        STMDB   R12!,{R4-R11}           /* Save Old context */
    e8f2:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#endif
        STR     R12,[R1,#0]             /* Update stack pointer in current task */
    e8f6:	f8c1 c000 	str.w	ip, [r1]
        STR     R2,[R3]                 /* g_current_task = highest ready */
    e8fa:	601a      	str	r2, [r3, #0]

        LDR     R12,[R2,#0]             /* get stack pointer of task we will start */
    e8fc:	f8d2 c000 	ldr.w	ip, [r2]
        ITTE    EQ
        VLDMIAEQ R12!,{S16-S31}         /* yes; pull the regs */
        MVNEQ   LR,#~0xFFFFFFED         /* BX treats it as extended */
        MVNNE   LR,#~0xFFFFFFFD         /* BX treats is as basic frame */
#else
        LDMIA   R12!,{R4-R11}           /* Restore New Context */
    e900:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#endif
        MSR     PSP,R12                 /* Write PSP */
    e904:	f38c 8809 	msr	PSP, ip
        MOV     R0, R2
        BL      os_trace_task_start_exec
        POP     {R4,LR}
#endif

        BX      LR                      /* Return to Thread Mode */
    e908:	4770      	bx	lr

0000e90a <SysTick_Handler>:
        .global SysTick_Handler
SysTick_Handler:
        .fnstart
        .cantunwind

        PUSH    {R4,LR}                 /* Save EXC_RETURN */
    e90a:	b510      	push	{r4, lr}
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_enter
#endif
        BL      timer_handler
    e90c:	f7ff fe03 	bl	e516 <timer_handler>
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
    e910:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR
    e914:	4770      	bx	lr

0000e916 <os_default_irq_asm>:

        /*
         * LR = 0xfffffff9 if we were using MSP as SP
         * LR = 0xfffffffd if we were using PSP as SP
         */
        TST     LR,#4
    e916:	f01e 0f04 	tst.w	lr, #4
        ITE     EQ
    e91a:	bf0c      	ite	eq
        MRSEQ   R3,MSP
    e91c:	f3ef 8308 	mrseq	r3, MSP
        MRSNE   R3,PSP
    e920:	f3ef 8309 	mrsne	r3, PSP
        PUSH    {R3-R11,LR}
    e924:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        MOV     R0, SP
    e928:	4668      	mov	r0, sp
        BL      os_default_irq
    e92a:	f7fe f933 	bl	cb94 <os_default_irq>
        POP     {R3-R11,LR}                 /* Restore EXC_RETURN */
    e92e:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR
    e932:	4770      	bx	lr
        LDR     R0,=os_flags
    e934:	200018b8 	.word	0x200018b8
        LDR     R2,=SVC_Count
    e938:	00000000 	.word	0x00000000
        LDR     R4,=SVC_Table-4
    e93c:	fffffffc 	.word	0xfffffffc
        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
    e940:	20000184 	.word	0x20000184
        LDR     R3,=g_current_task      /* Get current task */
    e944:	2000340c 	.word	0x2000340c

0000e948 <lrand48>:
#include <stdint.h>

extern unsigned short __rand48_seed[3];	/* Common with mrand48.c, srand48.c */

long lrand48(void)
{
    e948:	b508      	push	{r3, lr}
	return (uint32_t) jrand48(__rand48_seed) >> 1;
    e94a:	4802      	ldr	r0, [pc, #8]	; (e954 <lrand48+0xc>)
    e94c:	f000 f89a 	bl	ea84 <jrand48>
}
    e950:	0840      	lsrs	r0, r0, #1
    e952:	bd08      	pop	{r3, pc}
    e954:	20003424 	.word	0x20003424

0000e958 <memcmp>:
int memcmp(const void *s1, const void *s2, size_t n)
{
    int d = 0;

#if defined(ARCH_cortex_m3) || defined(ARCH_cortex_m4) || defined(ARCH_cortex_m7)
    asm (".syntax unified                   \n"
    e958:	b470      	push	{r4, r5, r6}
    e95a:	f04f 0500 	mov.w	r5, #0
    e95e:	f022 0603 	bic.w	r6, r2, #3
    e962:	e005      	b.n	e970 <test1>

0000e964 <loop1>:
    e964:	5943      	ldr	r3, [r0, r5]
    e966:	594c      	ldr	r4, [r1, r5]
    e968:	42a3      	cmp	r3, r4
    e96a:	d104      	bne.n	e976 <res1>
    e96c:	f105 0504 	add.w	r5, r5, #4

0000e970 <test1>:
    e970:	42b5      	cmp	r5, r6
    e972:	d1f7      	bne.n	e964 <loop1>
    e974:	e00d      	b.n	e992 <test2>

0000e976 <res1>:
    e976:	ba1b      	rev	r3, r3
    e978:	ba24      	rev	r4, r4
    e97a:	1b1b      	subs	r3, r3, r4
    e97c:	bf8c      	ite	hi
    e97e:	2301      	movhi	r3, #1
    e980:	f04f 33ff 	movls.w	r3, #4294967295	; 0xffffffff
    e984:	e009      	b.n	e99a <done>

0000e986 <loop2>:
    e986:	5d43      	ldrb	r3, [r0, r5]
    e988:	5d4c      	ldrb	r4, [r1, r5]
    e98a:	1b1b      	subs	r3, r3, r4
    e98c:	d105      	bne.n	e99a <done>
    e98e:	f105 0501 	add.w	r5, r5, #1

0000e992 <test2>:
    e992:	4295      	cmp	r5, r2
    e994:	d1f7      	bne.n	e986 <loop2>
    e996:	f04f 0300 	mov.w	r3, #0

0000e99a <done>:
    e99a:	4618      	mov	r0, r3
    e99c:	bc70      	pop	{r4, r5, r6}
			break;
	}
#endif

	return d;
}
    e99e:	4770      	bx	lr

0000e9a0 <memcpy>:
#if defined(__ARM_FEATURE_UNALIGNED)
        /*
         * We can speed up a bit by moving 32-bit words if unaligned access is
         * supported (e.g. Cortex-M3/4/7/33).
         */
        asm (".syntax unified           \n"
    e9a0:	e001      	b.n	e9a6 <test1>

0000e9a2 <loop1>:
    e9a2:	588b      	ldr	r3, [r1, r2]
    e9a4:	5083      	str	r3, [r0, r2]

0000e9a6 <test1>:
    e9a6:	3a04      	subs	r2, #4
    e9a8:	d5fb      	bpl.n	e9a2 <loop1>
    e9aa:	f102 0204 	add.w	r2, r2, #4
             "       bpl  loop1         \n"
             "       add  r2, #4        \n"
            );
#endif

        asm (".syntax unified           \n"
    e9ae:	e001      	b.n	e9b4 <test2>

0000e9b0 <loop2>:
    e9b0:	5c8b      	ldrb	r3, [r1, r2]
    e9b2:	5483      	strb	r3, [r0, r2]

0000e9b4 <test2>:
    e9b4:	3a01      	subs	r2, #1
    e9b6:	d5fb      	bpl.n	e9b0 <loop2>
		*q++ = *p++;
	}
#endif

	return dst;
}
    e9b8:	4770      	bx	lr

0000e9ba <memmove>:
 */

#include <string.h>

void *memmove(void *dst, const void *src, size_t n)
{
    e9ba:	b410      	push	{r4}
		q += (n - 1);
		asm volatile("std; rep; movsb; cld"
			     : "+c" (n), "+S"(p), "+D"(q));
	}
#else
	if (q < p) {
    e9bc:	4281      	cmp	r1, r0
    e9be:	d80c      	bhi.n	e9da <memmove+0x20>
		while (n--) {
			*q++ = *p++;
		}
	} else {
		p += n;
    e9c0:	4411      	add	r1, r2
		q += n;
    e9c2:	1883      	adds	r3, r0, r2
		while (n--) {
    e9c4:	e010      	b.n	e9e8 <memmove+0x2e>
			*q++ = *p++;
    e9c6:	780a      	ldrb	r2, [r1, #0]
    e9c8:	701a      	strb	r2, [r3, #0]
    e9ca:	3301      	adds	r3, #1
    e9cc:	3101      	adds	r1, #1
		while (n--) {
    e9ce:	4622      	mov	r2, r4
    e9d0:	1e54      	subs	r4, r2, #1
    e9d2:	2a00      	cmp	r2, #0
    e9d4:	d1f7      	bne.n	e9c6 <memmove+0xc>
		}
	}
#endif

	return dst;
}
    e9d6:	bc10      	pop	{r4}
    e9d8:	4770      	bx	lr
	char *q = dst;
    e9da:	4603      	mov	r3, r0
    e9dc:	e7f8      	b.n	e9d0 <memmove+0x16>
			*--q = *--p;
    e9de:	f811 2d01 	ldrb.w	r2, [r1, #-1]!
    e9e2:	f803 2d01 	strb.w	r2, [r3, #-1]!
		while (n--) {
    e9e6:	4622      	mov	r2, r4
    e9e8:	1e54      	subs	r4, r2, #1
    e9ea:	2a00      	cmp	r2, #0
    e9ec:	d1f7      	bne.n	e9de <memmove+0x24>
    e9ee:	e7f2      	b.n	e9d6 <memmove+0x1c>

0000e9f0 <memset>:
#if defined(__arm__)
#include <mcu/cmsis_nvic.h>
#endif

void *memset(void *dst, int c, size_t n)
{
    e9f0:	b430      	push	{r4, r5}
	asm volatile ("cld ; rep ; stosq ; movl %3,%%ecx ; rep ; stosb"
		      :"+c" (nq), "+D" (q)
		      : "a" ((unsigned char)c * 0x0101010101010101U),
			"r" ((uint32_t) n & 7));
#elif defined(__arm__)
    asm volatile (".syntax unified                          \n"
    e9f2:	4605      	mov	r5, r0
    e9f4:	b2c9      	uxtb	r1, r1
    e9f6:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    e9fa:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    e9fe:	18ab      	adds	r3, r5, r2
    ea00:	2403      	movs	r4, #3
    ea02:	4023      	ands	r3, r4
    ea04:	1ad3      	subs	r3, r2, r3
    ea06:	d40b      	bmi.n	ea20 <memset+0x30>
    ea08:	e001      	b.n	ea0e <memset+0x1e>
    ea0a:	3a01      	subs	r2, #1
    ea0c:	54a9      	strb	r1, [r5, r2]
    ea0e:	429a      	cmp	r2, r3
    ea10:	d1fb      	bne.n	ea0a <memset+0x1a>
    ea12:	e000      	b.n	ea16 <memset+0x26>
    ea14:	50a9      	str	r1, [r5, r2]
    ea16:	3a04      	subs	r2, #4
    ea18:	d5fc      	bpl.n	ea14 <memset+0x24>
    ea1a:	3204      	adds	r2, #4
    ea1c:	e000      	b.n	ea20 <memset+0x30>
    ea1e:	54a9      	strb	r1, [r5, r2]
    ea20:	3a01      	subs	r2, #1
    ea22:	d5fc      	bpl.n	ea1e <memset+0x2e>
		*q++ = c;
	}
#endif

	return dst;
}
    ea24:	bc30      	pop	{r4, r5}
    ea26:	4770      	bx	lr

0000ea28 <srand48>:

unsigned short __rand48_seed[3];	/* Common with mrand48.c, lrand48.c */

void srand48(long seedval)
{
	__rand48_seed[0] = 0x330e;
    ea28:	4b03      	ldr	r3, [pc, #12]	; (ea38 <srand48+0x10>)
    ea2a:	f243 320e 	movw	r2, #13070	; 0x330e
    ea2e:	801a      	strh	r2, [r3, #0]
	__rand48_seed[1] = (unsigned short)seedval;
    ea30:	8058      	strh	r0, [r3, #2]
	__rand48_seed[2] = (unsigned short)((uint32_t) seedval >> 16);
    ea32:	0c00      	lsrs	r0, r0, #16
    ea34:	8098      	strh	r0, [r3, #4]
}
    ea36:	4770      	bx	lr
    ea38:	20003424 	.word	0x20003424

0000ea3c <strcmp>:
 */

#include <string.h>

int strcmp(const char *s1, const char *s2)
{
    ea3c:	b430      	push	{r4, r5}
    ea3e:	4602      	mov	r2, r0
	const unsigned char *c2 = (const unsigned char *)s2;
	unsigned char ch;
	int d = 0;

	while (1) {
		d = (int)(ch = *c1++) - (int)*c2++;
    ea40:	1c55      	adds	r5, r2, #1
    ea42:	7813      	ldrb	r3, [r2, #0]
    ea44:	1c4c      	adds	r4, r1, #1
    ea46:	7808      	ldrb	r0, [r1, #0]
		if (d || !ch)
    ea48:	1a18      	subs	r0, r3, r0
    ea4a:	d103      	bne.n	ea54 <strcmp+0x18>
		d = (int)(ch = *c1++) - (int)*c2++;
    ea4c:	462a      	mov	r2, r5
    ea4e:	4621      	mov	r1, r4
		if (d || !ch)
    ea50:	2b00      	cmp	r3, #0
    ea52:	d1f5      	bne.n	ea40 <strcmp+0x4>
			break;
	}

	return d;
}
    ea54:	bc30      	pop	{r4, r5}
    ea56:	4770      	bx	lr

0000ea58 <strncat>:
 */

#include <string.h>

char *strncat(char *dst, const char *src, size_t n)
{
    ea58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ea5a:	4607      	mov	r7, r0
    ea5c:	460d      	mov	r5, r1
    ea5e:	4614      	mov	r4, r2
	char *q = strchr(dst, '\0');
    ea60:	f000 f83c 	bl	eadc <strlen>
    ea64:	4438      	add	r0, r7
	const char *p = src;
	char ch;

	while (n--) {
    ea66:	1e62      	subs	r2, r4, #1
    ea68:	b144      	cbz	r4, ea7c <strncat+0x24>
		*q++ = ch = *p++;
    ea6a:	1c6e      	adds	r6, r5, #1
    ea6c:	782b      	ldrb	r3, [r5, #0]
    ea6e:	1c41      	adds	r1, r0, #1
    ea70:	7003      	strb	r3, [r0, #0]
	while (n--) {
    ea72:	4614      	mov	r4, r2
		if (!ch)
    ea74:	b123      	cbz	r3, ea80 <strncat+0x28>
		*q++ = ch = *p++;
    ea76:	4635      	mov	r5, r6
    ea78:	4608      	mov	r0, r1
    ea7a:	e7f4      	b.n	ea66 <strncat+0xe>
			return dst;
	}
	*q = '\0';
    ea7c:	2300      	movs	r3, #0
    ea7e:	7003      	strb	r3, [r0, #0]

	return dst;
}
    ea80:	4638      	mov	r0, r7
    ea82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000ea84 <jrand48>:

#include <stdlib.h>
#include <stdint.h>

long jrand48(unsigned short xsubi[3])
{
    ea84:	e92d 08f0 	stmdb	sp!, {r4, r5, r6, r7, fp}
    ea88:	4601      	mov	r1, r0
	uint64_t x;

	/* The xsubi[] array is littleendian by spec */
	x = (uint64_t) (uint16_t) xsubi[0] +
    ea8a:	f8b0 b000 	ldrh.w	fp, [r0]
    ea8e:	f04f 0c00 	mov.w	ip, #0
	    ((uint64_t) (uint16_t) xsubi[1] << 16) +
    ea92:	8846      	ldrh	r6, [r0, #2]
    ea94:	0c35      	lsrs	r5, r6, #16
    ea96:	0434      	lsls	r4, r6, #16
	x = (uint64_t) (uint16_t) xsubi[0] +
    ea98:	eb1b 0204 	adds.w	r2, fp, r4
    ea9c:	eb4c 0305 	adc.w	r3, ip, r5
	    ((uint64_t) (uint16_t) xsubi[2] << 32);
    eaa0:	2400      	movs	r4, #0
    eaa2:	8885      	ldrh	r5, [r0, #4]
	x = (uint64_t) (uint16_t) xsubi[0] +
    eaa4:	1916      	adds	r6, r2, r4
    eaa6:	eb43 0705 	adc.w	r7, r3, r5

	x = (0x5deece66dULL * x) + 0xb;
    eaaa:	4c0b      	ldr	r4, [pc, #44]	; (ead8 <jrand48+0x54>)
    eaac:	2005      	movs	r0, #5
    eaae:	fb00 f006 	mul.w	r0, r0, r6
    eab2:	fb04 0007 	mla	r0, r4, r7, r0
    eab6:	fba6 2304 	umull	r2, r3, r6, r4
    eaba:	4403      	add	r3, r0
    eabc:	f112 040b 	adds.w	r4, r2, #11
    eac0:	f143 0500 	adc.w	r5, r3, #0

	xsubi[0] = (unsigned short)(uint16_t) x;
    eac4:	800c      	strh	r4, [r1, #0]
	xsubi[1] = (unsigned short)(uint16_t) (x >> 16);
    eac6:	0c20      	lsrs	r0, r4, #16
    eac8:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
    eacc:	8048      	strh	r0, [r1, #2]
	xsubi[2] = (unsigned short)(uint16_t) (x >> 32);
    eace:	808d      	strh	r5, [r1, #4]

	return (long)(int32_t) (x >> 16);
}
    ead0:	e8bd 08f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp}
    ead4:	4770      	bx	lr
    ead6:	bf00      	nop
    ead8:	deece66d 	.word	0xdeece66d

0000eadc <strlen>:

#include <string.h>

size_t strlen(const char *s)
{
	const char *ss = s;
    eadc:	4603      	mov	r3, r0
	while (*ss)
    eade:	e000      	b.n	eae2 <strlen+0x6>
		ss++;
    eae0:	3301      	adds	r3, #1
	while (*ss)
    eae2:	781a      	ldrb	r2, [r3, #0]
    eae4:	2a00      	cmp	r2, #0
    eae6:	d1fb      	bne.n	eae0 <strlen+0x4>
	return ss - s;
}
    eae8:	1a18      	subs	r0, r3, r0
    eaea:	4770      	bx	lr

0000eaec <imgr_my_version>:
    return 0;
}

int
imgr_my_version(struct image_version *ver)
{
    eaec:	b508      	push	{r3, lr}
    return img_mgmt_read_info(boot_current_slot, ver, NULL, NULL);
    eaee:	2300      	movs	r3, #0
    eaf0:	461a      	mov	r2, r3
    eaf2:	4601      	mov	r1, r0
    eaf4:	4802      	ldr	r0, [pc, #8]	; (eb00 <imgr_my_version+0x14>)
    eaf6:	6800      	ldr	r0, [r0, #0]
    eaf8:	f004 f8c0 	bl	12c7c <img_mgmt_read_info>
}
    eafc:	bd08      	pop	{r3, pc}
    eafe:	bf00      	nop
    eb00:	200043e0 	.word	0x200043e0

0000eb04 <imgmgr_find_best_area_id>:
    return -1;
}

int
imgmgr_find_best_area_id(void)
{
    eb04:	b530      	push	{r4, r5, lr}
    eb06:	b083      	sub	sp, #12
    struct image_version ver;
    int best = -1;
    int i;
    int rc;

    for (i = 0; i < 2; i++) {
    eb08:	2400      	movs	r4, #0
    int best = -1;
    eb0a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    for (i = 0; i < 2; i++) {
    eb0e:	e000      	b.n	eb12 <imgmgr_find_best_area_id+0xe>
    eb10:	3401      	adds	r4, #1
    eb12:	2c01      	cmp	r4, #1
    eb14:	dc10      	bgt.n	eb38 <imgmgr_find_best_area_id+0x34>
        rc = img_mgmt_read_info(i, &ver, NULL, NULL);
    eb16:	2300      	movs	r3, #0
    eb18:	461a      	mov	r2, r3
    eb1a:	4669      	mov	r1, sp
    eb1c:	4620      	mov	r0, r4
    eb1e:	f004 f8ad 	bl	12c7c <img_mgmt_read_info>
        if (rc < 0) {
    eb22:	2800      	cmp	r0, #0
    eb24:	dbf4      	blt.n	eb10 <imgmgr_find_best_area_id+0xc>
            continue;
        }
        if (rc == 0) {
    eb26:	b930      	cbnz	r0, eb36 <imgmgr_find_best_area_id+0x32>
            /* Image in slot is ok. */
            if (img_mgmt_slot_in_use(i)) {
    eb28:	4620      	mov	r0, r4
    eb2a:	f004 fafd 	bl	13128 <img_mgmt_slot_in_use>
    eb2e:	2800      	cmp	r0, #0
    eb30:	d1ee      	bne.n	eb10 <imgmgr_find_best_area_id+0xc>
            } else {
                /*
                 * Not active slot, but image is ok. Use it if there are
                 * no better candidates.
                 */
                best = i;
    eb32:	4625      	mov	r5, r4
    eb34:	e7ec      	b.n	eb10 <imgmgr_find_best_area_id+0xc>
            }
            continue;
        }
        best = i;
    eb36:	4625      	mov	r5, r4
        break;
    }
    if (best >= 0) {
    eb38:	2d00      	cmp	r5, #0
    eb3a:	db03      	blt.n	eb44 <imgmgr_find_best_area_id+0x40>
        best = flash_area_id_from_image_slot(best);
    eb3c:	4628      	mov	r0, r5
    eb3e:	f002 f80e 	bl	10b5e <flash_area_id_from_image_slot>
    eb42:	4605      	mov	r5, r0
    }
    return best;
}
    eb44:	4628      	mov	r0, r5
    eb46:	b003      	add	sp, #12
    eb48:	bd30      	pop	{r4, r5, pc}
	...

0000eb4c <imgr_erase_state>:

static int
imgr_erase_state(struct mgmt_ctxt *ctxt)
{
    eb4c:	b570      	push	{r4, r5, r6, lr}
    eb4e:	b082      	sub	sp, #8
    eb50:	4605      	mov	r5, r0
    const struct flash_area *fa;
    int area_id;
    int rc;
    CborError g_err = CborNoError;

    area_id = imgmgr_find_best_area_id();
    eb52:	f7ff ffd7 	bl	eb04 <imgmgr_find_best_area_id>
    if (area_id >= 0) {
    eb56:	2800      	cmp	r0, #0
    eb58:	db1b      	blt.n	eb92 <imgr_erase_state+0x46>
        rc = flash_area_open(area_id, &fa);
    eb5a:	a901      	add	r1, sp, #4
    eb5c:	b2c0      	uxtb	r0, r0
    eb5e:	f001 ff49 	bl	109f4 <flash_area_open>
        if (rc) {
    eb62:	b9d0      	cbnz	r0, eb9a <imgr_erase_state+0x4e>
            return img_mgmt_error_rsp(ctxt, MGMT_ERR_EINVAL,
                                      img_mgmt_err_str_flash_open_failed);
        }

        rc = flash_area_erase(fa, 0, sizeof(struct image_header));
    eb64:	2220      	movs	r2, #32
    eb66:	2100      	movs	r1, #0
    eb68:	9801      	ldr	r0, [sp, #4]
    eb6a:	f001 ffc1 	bl	10af0 <flash_area_erase>
        if (rc) {
    eb6e:	4604      	mov	r4, r0
    eb70:	b9a8      	cbnz	r0, eb9e <imgr_erase_state+0x52>
CBOR_API CborError cbor_encode_negative_int(CborEncoder *encoder, uint64_t absolute_value);
CBOR_API CborError cbor_encode_simple_value(CborEncoder *encoder, uint8_t value);
CBOR_API CborError cbor_encode_tag(CborEncoder *encoder, CborTag tag);
CBOR_API CborError cbor_encode_text_string(CborEncoder *encoder, const char *string, size_t length);
CBOR_INLINE_API CborError cbor_encode_text_stringz(CborEncoder *encoder, const char *string)
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
    eb72:	2202      	movs	r2, #2
    eb74:	490b      	ldr	r1, [pc, #44]	; (eba4 <imgr_erase_state+0x58>)
    eb76:	4628      	mov	r0, r5
    eb78:	f01d fe5d 	bl	2c836 <cbor_encode_text_string>
    eb7c:	4606      	mov	r6, r0
    } else {
        return img_mgmt_error_rsp(ctxt, MGMT_ERR_ENOMEM, img_mgmt_err_str_no_slot);
    }

    g_err |= cbor_encode_text_stringz(&ctxt->encoder, "rc");
    g_err |= cbor_encode_int(&ctxt->encoder, MGMT_ERR_EOK);
    eb7e:	2200      	movs	r2, #0
    eb80:	2300      	movs	r3, #0
    eb82:	4628      	mov	r0, r5
    eb84:	f01d fdd6 	bl	2c734 <cbor_encode_int>

    if (g_err) {
    eb88:	ea50 0306 	orrs.w	r3, r0, r6
    eb8c:	d002      	beq.n	eb94 <imgr_erase_state+0x48>
        return MGMT_ERR_ENOMEM;
    eb8e:	2402      	movs	r4, #2
    eb90:	e000      	b.n	eb94 <imgr_erase_state+0x48>
        return img_mgmt_error_rsp(ctxt, MGMT_ERR_ENOMEM, img_mgmt_err_str_no_slot);
    eb92:	2402      	movs	r4, #2
    }

    return 0;
}
    eb94:	4620      	mov	r0, r4
    eb96:	b002      	add	sp, #8
    eb98:	bd70      	pop	{r4, r5, r6, pc}
            return img_mgmt_error_rsp(ctxt, MGMT_ERR_EINVAL,
    eb9a:	2403      	movs	r4, #3
    eb9c:	e7fa      	b.n	eb94 <imgr_erase_state+0x48>
            return img_mgmt_error_rsp(ctxt, MGMT_ERR_EINVAL,
    eb9e:	2403      	movs	r4, #3
    eba0:	e7f8      	b.n	eb94 <imgr_erase_state+0x48>
    eba2:	bf00      	nop
    eba4:	000318e4 	.word	0x000318e4

0000eba8 <imgmgr_module_init>:

void
imgmgr_module_init(void)
{
    eba8:	b508      	push	{r3, lr}
    int rc;
    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
    ebaa:	4b08      	ldr	r3, [pc, #32]	; (ebcc <imgmgr_module_init+0x24>)
    ebac:	781b      	ldrb	r3, [r3, #0]
    ebae:	b11b      	cbz	r3, ebb8 <imgmgr_module_init+0x10>

    mgmt_register_group(&imgr_mgmt_group);
    ebb0:	4807      	ldr	r0, [pc, #28]	; (ebd0 <imgmgr_module_init+0x28>)
    ebb2:	f005 f9f9 	bl	13fa8 <mgmt_register_group>
    rc = imgr_cli_register();
    SYSINIT_PANIC_ASSERT(rc == 0);
#else
    (void) rc;
#endif
}
    ebb6:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
    ebb8:	f7fd fb16 	bl	c1e8 <hal_debugger_connected>
    ebbc:	b100      	cbz	r0, ebc0 <imgmgr_module_init+0x18>
    ebbe:	be01      	bkpt	0x0001
    ebc0:	2300      	movs	r3, #0
    ebc2:	461a      	mov	r2, r3
    ebc4:	4619      	mov	r1, r3
    ebc6:	4618      	mov	r0, r3
    ebc8:	f7fd ffc2 	bl	cb50 <__assert_func>
    ebcc:	20003584 	.word	0x20003584
    ebd0:	20000194 	.word	0x20000194

0000ebd4 <imgr_ver_str>:
    return 0;
}

int
imgr_ver_str(struct image_version *ver, char *dst)
{
    ebd4:	b510      	push	{r4, lr}
    ebd6:	b082      	sub	sp, #8
    ebd8:	460c      	mov	r4, r1
    if (ver->iv_build_num) {
    ebda:	6841      	ldr	r1, [r0, #4]
    ebdc:	b949      	cbnz	r1, ebf2 <imgr_ver_str+0x1e>
        return sprintf(dst, "%u.%u.%u.%lu",
          ver->iv_major, ver->iv_minor, ver->iv_revision,
          (unsigned long)ver->iv_build_num);
    } else {
        return sprintf(dst, "%u.%u.%u",
          ver->iv_major, ver->iv_minor, ver->iv_revision);
    ebde:	7802      	ldrb	r2, [r0, #0]
    ebe0:	7843      	ldrb	r3, [r0, #1]
    ebe2:	8841      	ldrh	r1, [r0, #2]
        return sprintf(dst, "%u.%u.%u",
    ebe4:	9100      	str	r1, [sp, #0]
    ebe6:	4908      	ldr	r1, [pc, #32]	; (ec08 <imgr_ver_str+0x34>)
    ebe8:	4620      	mov	r0, r4
    ebea:	f020 fb37 	bl	2f25c <sprintf>
    }
}
    ebee:	b002      	add	sp, #8
    ebf0:	bd10      	pop	{r4, pc}
          ver->iv_major, ver->iv_minor, ver->iv_revision,
    ebf2:	7802      	ldrb	r2, [r0, #0]
    ebf4:	7843      	ldrb	r3, [r0, #1]
    ebf6:	8840      	ldrh	r0, [r0, #2]
        return sprintf(dst, "%u.%u.%u.%lu",
    ebf8:	9101      	str	r1, [sp, #4]
    ebfa:	9000      	str	r0, [sp, #0]
    ebfc:	4903      	ldr	r1, [pc, #12]	; (ec0c <imgr_ver_str+0x38>)
    ebfe:	4620      	mov	r0, r4
    ec00:	f020 fb2c 	bl	2f25c <sprintf>
    ec04:	e7f3      	b.n	ebee <imgr_ver_str+0x1a>
    ec06:	bf00      	nop
    ec08:	00031930 	.word	0x00031930
    ec0c:	00031920 	.word	0x00031920

0000ec10 <smp_free_buf>:
}

static void
smp_free_buf(void *m, void *arg)
{
    if (!m) {
    ec10:	b118      	cbz	r0, ec1a <smp_free_buf+0xa>
{
    ec12:	b508      	push	{r3, lr}
        return;
    }

    os_mbuf_free_chain(m);
    ec14:	f7fe fc04 	bl	d420 <os_mbuf_free_chain>
}
    ec18:	bd08      	pop	{r3, pc}
    ec1a:	4770      	bx	lr

0000ec1c <smp_init_writer>:
smp_init_writer(struct cbor_encoder_writer *writer, void *m,
		void *arg)
{
    struct cbor_mbuf_writer *cmw;
     
    if (!writer) {
    ec1c:	b120      	cbz	r0, ec28 <smp_init_writer+0xc>
{
    ec1e:	b508      	push	{r3, lr}
        return MGMT_ERR_EINVAL;
    }

    cmw = (struct cbor_mbuf_writer *)writer;
    cbor_mbuf_writer_init(cmw, m);
    ec20:	f01d fcc0 	bl	2c5a4 <cbor_mbuf_writer_init>

    return 0;
    ec24:	2000      	movs	r0, #0
}
    ec26:	bd08      	pop	{r3, pc}
        return MGMT_ERR_EINVAL;
    ec28:	2003      	movs	r0, #3
}
    ec2a:	4770      	bx	lr

0000ec2c <smp_init_reader>:
    if (!reader) {
    ec2c:	b128      	cbz	r0, ec3a <smp_init_reader+0xe>
{
    ec2e:	b508      	push	{r3, lr}
    cbor_mbuf_reader_init(cmr, m, 0);
    ec30:	2200      	movs	r2, #0
    ec32:	f01d fc79 	bl	2c528 <cbor_mbuf_reader_init>
    return 0;
    ec36:	2000      	movs	r0, #0
}
    ec38:	bd08      	pop	{r3, pc}
        return MGMT_ERR_EINVAL;
    ec3a:	2003      	movs	r0, #3
}
    ec3c:	4770      	bx	lr

0000ec3e <smp_write_at>:
{
    ec3e:	b538      	push	{r3, r4, r5, lr}
    if (!writer) {
    ec40:	b160      	cbz	r0, ec5c <smp_write_at+0x1e>
    ec42:	4604      	mov	r4, r0
    m = cmw->m;
    ec44:	6885      	ldr	r5, [r0, #8]
    if (offset > OS_MBUF_PKTLEN(m)) {
    ec46:	8a28      	ldrh	r0, [r5, #16]
    ec48:	4288      	cmp	r0, r1
    ec4a:	d309      	bcc.n	ec60 <smp_write_at+0x22>
    rc = os_mbuf_copyinto(m, offset, data, len);
    ec4c:	4628      	mov	r0, r5
    ec4e:	f7fe fdb1 	bl	d7b4 <os_mbuf_copyinto>
    if (rc) {
    ec52:	4603      	mov	r3, r0
    ec54:	b938      	cbnz	r0, ec66 <smp_write_at+0x28>
    writer->bytes_written = OS_MBUF_PKTLEN(m);
    ec56:	8a2a      	ldrh	r2, [r5, #16]
    ec58:	6062      	str	r2, [r4, #4]
    return 0;
    ec5a:	e002      	b.n	ec62 <smp_write_at+0x24>
        return MGMT_ERR_EINVAL;
    ec5c:	2303      	movs	r3, #3
    ec5e:	e000      	b.n	ec62 <smp_write_at+0x24>
        return MGMT_ERR_EINVAL;
    ec60:	2303      	movs	r3, #3
}
    ec62:	4618      	mov	r0, r3
    ec64:	bd38      	pop	{r3, r4, r5, pc}
        return MGMT_ERR_ENOMEM;
    ec66:	2302      	movs	r3, #2
    ec68:	e7fb      	b.n	ec62 <smp_write_at+0x24>

0000ec6a <smp_reset_buf>:
    if (!m) {
    ec6a:	b128      	cbz	r0, ec78 <smp_reset_buf+0xe>
{
    ec6c:	b508      	push	{r3, lr}
    os_mbuf_adj(m, -1 * OS_MBUF_PKTLEN((struct os_mbuf *)m));
    ec6e:	8a01      	ldrh	r1, [r0, #16]
    ec70:	4249      	negs	r1, r1
    ec72:	f7fe fcad 	bl	d5d0 <os_mbuf_adj>
}
    ec76:	bd08      	pop	{r3, pc}
    ec78:	4770      	bx	lr

0000ec7a <smp_trim_front>:
{
    ec7a:	b508      	push	{r3, lr}
    os_mbuf_adj(m, len);
    ec7c:	f7fe fca8 	bl	d5d0 <os_mbuf_adj>
}
    ec80:	bd08      	pop	{r3, pc}

0000ec82 <smp_alloc_rsp>:
{
    ec82:	b538      	push	{r3, r4, r5, lr}
   if (!req) {
    ec84:	b188      	cbz	r0, ecaa <smp_alloc_rsp+0x28>
    ec86:	4604      	mov	r4, r0
   rsp = os_msys_get_pkthdr(0, OS_MBUF_USRHDR_LEN(m));
    ec88:	7941      	ldrb	r1, [r0, #5]
    ec8a:	3908      	subs	r1, #8
    ec8c:	b289      	uxth	r1, r1
    ec8e:	2000      	movs	r0, #0
    ec90:	f7ff f887 	bl	dda2 <os_msys_get_pkthdr>
   if (!rsp) {
    ec94:	4605      	mov	r5, r0
    ec96:	b150      	cbz	r0, ecae <smp_alloc_rsp+0x2c>
   memcpy(OS_MBUF_USRHDR(rsp), OS_MBUF_USRHDR(m), OS_MBUF_USRHDR_LEN(m));
    ec98:	7962      	ldrb	r2, [r4, #5]
    ec9a:	3a08      	subs	r2, #8
    ec9c:	f104 0118 	add.w	r1, r4, #24
    eca0:	3018      	adds	r0, #24
    eca2:	f7ff fe7d 	bl	e9a0 <memcpy>
}
    eca6:	4628      	mov	r0, r5
    eca8:	bd38      	pop	{r3, r4, r5, pc}
       return NULL;
    ecaa:	2500      	movs	r5, #0
    ecac:	e7fb      	b.n	eca6 <smp_alloc_rsp+0x24>
       return NULL;
    ecae:	2500      	movs	r5, #0
    ecb0:	e7f9      	b.n	eca6 <smp_alloc_rsp+0x24>

0000ecb2 <smp_rsp_frag_alloc>:
/**
 * Allocates an mbuf to costain an outgoing response fragment.
 */
static struct os_mbuf *
smp_rsp_frag_alloc(uint16_t frag_size, void *arg)
{
    ecb2:	b538      	push	{r3, r4, r5, lr}
    ecb4:	460c      	mov	r4, r1
    /* We need to duplicate the user header from the source response, as that
     * is where transport-specific information is stored.
     */
    src_rsp = arg;

    frag = os_msys_get_pkthdr(frag_size, OS_MBUF_USRHDR_LEN(src_rsp));
    ecb6:	7949      	ldrb	r1, [r1, #5]
    ecb8:	3908      	subs	r1, #8
    ecba:	b289      	uxth	r1, r1
    ecbc:	f7ff f871 	bl	dda2 <os_msys_get_pkthdr>
    if (frag != NULL) {
    ecc0:	4605      	mov	r5, r0
    ecc2:	b130      	cbz	r0, ecd2 <smp_rsp_frag_alloc+0x20>
        /* Copy the user header from the response into the fragmest mbuf. */
        memcpy(OS_MBUF_USRHDR(frag), OS_MBUF_USRHDR(src_rsp),
               OS_MBUF_USRHDR_LEN(src_rsp));
    ecc4:	7962      	ldrb	r2, [r4, #5]
        memcpy(OS_MBUF_USRHDR(frag), OS_MBUF_USRHDR(src_rsp),
    ecc6:	3a08      	subs	r2, #8
    ecc8:	f104 0118 	add.w	r1, r4, #24
    eccc:	3018      	adds	r0, #24
    ecce:	f7ff fe67 	bl	e9a0 <memcpy>
    }

    return frag;
}
    ecd2:	4628      	mov	r0, r5
    ecd4:	bd38      	pop	{r3, r4, r5, pc}
	...

0000ecd8 <smp_tx_rsp>:

int
smp_tx_rsp(struct smp_streamer *ns, void *rsp, void *arg)
{
    ecd8:	b570      	push	{r4, r5, r6, lr}
    ecda:	b082      	sub	sp, #8
    ecdc:	460c      	mov	r4, r1
    ecde:	4615      	mov	r5, r2
    struct os_mbuf *m;
    uint16_t mtu;
    int rc;

    st = arg;
    m  = rsp;
    ece0:	9101      	str	r1, [sp, #4]

    mtu = st->st_get_mtu(rsp);
    ece2:	6b13      	ldr	r3, [r2, #48]	; 0x30
    ece4:	4608      	mov	r0, r1
    ece6:	4798      	blx	r3
    if (mtu == 0U) {
    ece8:	4606      	mov	r6, r0
    ecea:	b180      	cbz	r0, ed0e <smp_tx_rsp+0x36>
        /* The transport cannot support a transmission right now. */
        return MGMT_ERR_EUNKNOWN;
    }

    while (m != NULL) {
    ecec:	9b01      	ldr	r3, [sp, #4]
    ecee:	b163      	cbz	r3, ed0a <smp_tx_rsp+0x32>
        frag = mem_split_frag(&m, mtu, smp_rsp_frag_alloc, rsp);
    ecf0:	4623      	mov	r3, r4
    ecf2:	4a09      	ldr	r2, [pc, #36]	; (ed18 <smp_tx_rsp+0x40>)
    ecf4:	4631      	mov	r1, r6
    ecf6:	a801      	add	r0, sp, #4
    ecf8:	f003 faaa 	bl	12250 <mem_split_frag>
        if (frag == NULL) {
    ecfc:	b150      	cbz	r0, ed14 <smp_tx_rsp+0x3c>
            return MGMT_ERR_ENOMEM;
        }

        rc = st->st_output(frag);
    ecfe:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    ed00:	4790      	blx	r2
        if (rc != 0) {
    ed02:	2800      	cmp	r0, #0
    ed04:	d0f2      	beq.n	ecec <smp_tx_rsp+0x14>
            return MGMT_ERR_EUNKNOWN;
    ed06:	2001      	movs	r0, #1
    ed08:	e002      	b.n	ed10 <smp_tx_rsp+0x38>
        }
    }

    return 0;
    ed0a:	2000      	movs	r0, #0
    ed0c:	e000      	b.n	ed10 <smp_tx_rsp+0x38>
        return MGMT_ERR_EUNKNOWN;
    ed0e:	2001      	movs	r0, #1
}
    ed10:	b002      	add	sp, #8
    ed12:	bd70      	pop	{r4, r5, r6, pc}
            return MGMT_ERR_ENOMEM;
    ed14:	2002      	movs	r0, #2
    ed16:	e7fb      	b.n	ed10 <smp_tx_rsp+0x38>
    ed18:	0000ecb3 	.word	0x0000ecb3

0000ed1c <smp_process_packet>:
    struct cbor_mbuf_reader reader;
    struct cbor_mbuf_writer writer;
    struct os_mbuf *m;
    int rc;

    if (!st) {
    ed1c:	b1c0      	cbz	r0, ed50 <smp_process_packet+0x34>
{
    ed1e:	b510      	push	{r4, lr}
    ed20:	b08c      	sub	sp, #48	; 0x30
    ed22:	4604      	mov	r4, r0
        return MGMT_ERR_EINVAL;
    }

    st->st_streamer = (struct smp_streamer) {
    ed24:	4b0e      	ldr	r3, [pc, #56]	; (ed60 <smp_process_packet+0x44>)
    ed26:	6003      	str	r3, [r0, #0]
    ed28:	6060      	str	r0, [r4, #4]
    ed2a:	ab03      	add	r3, sp, #12
    ed2c:	6083      	str	r3, [r0, #8]
    ed2e:	f8c0 d00c 	str.w	sp, [r0, #12]
    ed32:	4b0c      	ldr	r3, [pc, #48]	; (ed64 <smp_process_packet+0x48>)
    ed34:	6103      	str	r3, [r0, #16]
        },
        .tx_rsp_cb = smp_tx_rsp,
    };

    while (1) {
        m = os_mqueue_get(&st->st_imq);
    ed36:	f104 0014 	add.w	r0, r4, #20
    ed3a:	f7fe fafc 	bl	d336 <os_mqueue_get>
        if (!m) {
    ed3e:	4601      	mov	r1, r0
    ed40:	b148      	cbz	r0, ed56 <smp_process_packet+0x3a>
            break;
        }

        rc = smp_process_request_packet(&st->st_streamer, m);
    ed42:	4620      	mov	r0, r4
    ed44:	f005 faa4 	bl	14290 <smp_process_request_packet>
        if (rc) {
    ed48:	4603      	mov	r3, r0
    ed4a:	2800      	cmp	r0, #0
    ed4c:	d0f3      	beq.n	ed36 <smp_process_packet+0x1a>
    ed4e:	e003      	b.n	ed58 <smp_process_packet+0x3c>
        return MGMT_ERR_EINVAL;
    ed50:	2303      	movs	r3, #3
            return rc;
        }
    }
    
    return 0;
}
    ed52:	4618      	mov	r0, r3
    ed54:	4770      	bx	lr
    return 0;
    ed56:	2300      	movs	r3, #0
}
    ed58:	4618      	mov	r0, r3
    ed5a:	b00c      	add	sp, #48	; 0x30
    ed5c:	bd10      	pop	{r4, pc}
    ed5e:	bf00      	nop
    ed60:	0003193c 	.word	0x0003193c
    ed64:	0000ecd9 	.word	0x0000ecd9

0000ed68 <smp_event_data_in>:
    return rc;
}

static void
smp_event_data_in(struct os_event *ev)
{
    ed68:	b508      	push	{r3, lr}
    smp_process_packet(ev->ev_arg);
    ed6a:	6880      	ldr	r0, [r0, #8]
    ed6c:	f7ff ffd6 	bl	ed1c <smp_process_packet>
}
    ed70:	bd08      	pop	{r3, pc}
	...

0000ed74 <mgmt_evq_set>:
    g_smp_evq = evq;
    ed74:	4b01      	ldr	r3, [pc, #4]	; (ed7c <mgmt_evq_set+0x8>)
    ed76:	6018      	str	r0, [r3, #0]
}
    ed78:	4770      	bx	lr
    ed7a:	bf00      	nop
    ed7c:	2000342c 	.word	0x2000342c

0000ed80 <smp_rx_req>:
{
    ed80:	b538      	push	{r3, r4, r5, lr}
    ed82:	460c      	mov	r4, r1
    rc = os_mqueue_put(&st->st_imq, os_eventq_dflt_get(), req);
    ed84:	f100 0514 	add.w	r5, r0, #20
    ed88:	f7fe fac8 	bl	d31c <os_eventq_dflt_get>
    ed8c:	4622      	mov	r2, r4
    ed8e:	4601      	mov	r1, r0
    ed90:	4628      	mov	r0, r5
    ed92:	f7fe fae3 	bl	d35c <os_mqueue_put>
    if (rc) {
    ed96:	4605      	mov	r5, r0
    ed98:	b908      	cbnz	r0, ed9e <smp_rx_req+0x1e>
}
    ed9a:	4628      	mov	r0, r5
    ed9c:	bd38      	pop	{r3, r4, r5, pc}
    os_mbuf_free_chain(req);
    ed9e:	4620      	mov	r0, r4
    eda0:	f7fe fb3e 	bl	d420 <os_mbuf_free_chain>
    return rc;
    eda4:	e7f9      	b.n	ed9a <smp_rx_req+0x1a>
	...

0000eda8 <smp_transport_init>:

int
smp_transport_init(struct smp_transport *st,
                   smp_transport_out_func_t output_func,
                   smp_transport_get_mtu_func_t get_mtu_func)
{
    eda8:	b508      	push	{r3, lr}
    int rc;

    st->st_output = output_func;
    edaa:	62c1      	str	r1, [r0, #44]	; 0x2c
    st->st_get_mtu = get_mtu_func;
    edac:	6302      	str	r2, [r0, #48]	; 0x30

    rc = os_mqueue_init(&st->st_imq, smp_event_data_in, st);
    edae:	4602      	mov	r2, r0
    edb0:	4902      	ldr	r1, [pc, #8]	; (edbc <smp_transport_init+0x14>)
    edb2:	3014      	adds	r0, #20
    edb4:	f7fe fab6 	bl	d324 <os_mqueue_init>
    }

    return 0;
err:
    return rc;
}
    edb8:	bd08      	pop	{r3, pc}
    edba:	bf00      	nop
    edbc:	0000ed69 	.word	0x0000ed69

0000edc0 <smp_pkg_init>:

void
smp_pkg_init(void)
{
    edc0:	b508      	push	{r3, lr}
    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
    edc2:	4b09      	ldr	r3, [pc, #36]	; (ede8 <smp_pkg_init+0x28>)
    edc4:	781b      	ldrb	r3, [r3, #0]
    edc6:	b123      	cbz	r3, edd2 <smp_pkg_init+0x12>

    mgmt_evq_set(os_eventq_dflt_get());
    edc8:	f7fe faa8 	bl	d31c <os_eventq_dflt_get>
    edcc:	f7ff ffd2 	bl	ed74 <mgmt_evq_set>
}
    edd0:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
    edd2:	f7fd fa09 	bl	c1e8 <hal_debugger_connected>
    edd6:	b100      	cbz	r0, edda <smp_pkg_init+0x1a>
    edd8:	be01      	bkpt	0x0001
    edda:	2300      	movs	r3, #0
    eddc:	461a      	mov	r2, r3
    edde:	4619      	mov	r1, r3
    ede0:	4618      	mov	r0, r3
    ede2:	f7fd feb5 	bl	cb50 <__assert_func>
    ede6:	bf00      	nop
    ede8:	20003584 	.word	0x20003584

0000edec <smp_ble_get_mtu>:
            return BLE_ATT_ERR_UNLIKELY;
    }
}

uint16_t
smp_ble_get_mtu(struct os_mbuf *req) {
    edec:	b508      	push	{r3, lr}

    uint16_t conn_handle;
    uint16_t mtu;

    memcpy(&conn_handle, OS_MBUF_USRHDR(req), sizeof (conn_handle));
    mtu = ble_att_mtu(conn_handle);
    edee:	8b00      	ldrh	r0, [r0, #24]
    edf0:	f00f fdb2 	bl	1e958 <ble_att_mtu>
    if (!mtu) {
    edf4:	4603      	mov	r3, r0
    edf6:	b108      	cbz	r0, edfc <smp_ble_get_mtu+0x10>
        /* No longer connected. */
        return 0;
    }

    /* 3 is the number of bytes for ATT notification base */
    mtu = mtu - 3;
    edf8:	1ec3      	subs	r3, r0, #3
    edfa:	b29b      	uxth	r3, r3

    return (mtu);
}
    edfc:	4618      	mov	r0, r3
    edfe:	bd08      	pop	{r3, pc}

0000ee00 <smp_ble_out>:
    }
}

static int
smp_ble_out(struct os_mbuf *om)
{
    ee00:	b538      	push	{r3, r4, r5, lr}
    ee02:	4604      	mov	r4, r0
    int rc;

    rc = os_mqueue_put(&g_smp_ble_mq, os_eventq_dflt_get(), om);
    ee04:	f7fe fa8a 	bl	d31c <os_eventq_dflt_get>
    ee08:	4622      	mov	r2, r4
    ee0a:	4601      	mov	r1, r0
    ee0c:	4805      	ldr	r0, [pc, #20]	; (ee24 <smp_ble_out+0x24>)
    ee0e:	f7fe faa5 	bl	d35c <os_mqueue_put>
    if (rc != 0) {
    ee12:	4605      	mov	r5, r0
    ee14:	b908      	cbnz	r0, ee1a <smp_ble_out+0x1a>

    return 0;
err:
    os_mbuf_free_chain(om);
    return rc;
}
    ee16:	4628      	mov	r0, r5
    ee18:	bd38      	pop	{r3, r4, r5, pc}
    os_mbuf_free_chain(om);
    ee1a:	4620      	mov	r0, r4
    ee1c:	f7fe fb00 	bl	d420 <os_mbuf_free_chain>
    return rc;
    ee20:	e7f9      	b.n	ee16 <smp_ble_out+0x16>
    ee22:	bf00      	nop
    ee24:	20003464 	.word	0x20003464

0000ee28 <smp_ble_event_data_in>:
{
    ee28:	b508      	push	{r3, lr}
    while ((m_resp = os_mqueue_get(&g_smp_ble_mq)) != NULL) {
    ee2a:	480d      	ldr	r0, [pc, #52]	; (ee60 <smp_ble_event_data_in+0x38>)
    ee2c:	f7fe fa83 	bl	d336 <os_mqueue_get>
    ee30:	4603      	mov	r3, r0
    ee32:	b1a0      	cbz	r0, ee5e <smp_ble_event_data_in+0x36>
        assert(OS_MBUF_USRHDR_LEN(m_resp) >= sizeof (conn_handle));
    ee34:	795a      	ldrb	r2, [r3, #5]
    ee36:	3a08      	subs	r2, #8
    ee38:	2a01      	cmp	r2, #1
    ee3a:	d906      	bls.n	ee4a <smp_ble_event_data_in+0x22>
        ble_gattc_notify_custom(conn_handle, g_ble_smp_attr_handle,
    ee3c:	461a      	mov	r2, r3
    ee3e:	4909      	ldr	r1, [pc, #36]	; (ee64 <smp_ble_event_data_in+0x3c>)
    ee40:	8809      	ldrh	r1, [r1, #0]
    ee42:	8b18      	ldrh	r0, [r3, #24]
    ee44:	f013 fbf4 	bl	22630 <ble_gattc_notify_custom>
    ee48:	e7ef      	b.n	ee2a <smp_ble_event_data_in+0x2>
        assert(OS_MBUF_USRHDR_LEN(m_resp) >= sizeof (conn_handle));
    ee4a:	f7fd f9cd 	bl	c1e8 <hal_debugger_connected>
    ee4e:	b100      	cbz	r0, ee52 <smp_ble_event_data_in+0x2a>
    ee50:	be01      	bkpt	0x0001
    ee52:	2300      	movs	r3, #0
    ee54:	461a      	mov	r2, r3
    ee56:	4619      	mov	r1, r3
    ee58:	4618      	mov	r0, r3
    ee5a:	f7fd fe79 	bl	cb50 <__assert_func>
}
    ee5e:	bd08      	pop	{r3, pc}
    ee60:	20003464 	.word	0x20003464
    ee64:	2000347c 	.word	0x2000347c

0000ee68 <gatt_svr_chr_access_smp>:
{
    ee68:	b570      	push	{r4, r5, r6, lr}
    switch (ctxt->op) {
    ee6a:	7813      	ldrb	r3, [r2, #0]
    ee6c:	2b01      	cmp	r3, #1
    ee6e:	d136      	bne.n	eede <gatt_svr_chr_access_smp+0x76>
    ee70:	4606      	mov	r6, r0
    ee72:	4615      	mov	r5, r2
            if (OS_MBUF_USRHDR_LEN(ctxt->om) >= sizeof (conn_handle)) {
    ee74:	6854      	ldr	r4, [r2, #4]
    ee76:	7963      	ldrb	r3, [r4, #5]
    ee78:	f1a3 0208 	sub.w	r2, r3, #8
    ee7c:	2a01      	cmp	r2, #1
    ee7e:	d90a      	bls.n	ee96 <gatt_svr_chr_access_smp+0x2e>
                ctxt->om = NULL;
    ee80:	2300      	movs	r3, #0
    ee82:	606b      	str	r3, [r5, #4]
            memcpy(OS_MBUF_USRHDR(m_req), &conn_handle, sizeof(conn_handle));
    ee84:	8326      	strh	r6, [r4, #24]
            rc = smp_rx_req(&g_smp_ble_transport, m_req);
    ee86:	4621      	mov	r1, r4
    ee88:	481b      	ldr	r0, [pc, #108]	; (eef8 <gatt_svr_chr_access_smp+0x90>)
    ee8a:	f7ff ff79 	bl	ed80 <smp_rx_req>
            if (rc) {
    ee8e:	4603      	mov	r3, r0
    ee90:	bb18      	cbnz	r0, eeda <gatt_svr_chr_access_smp+0x72>
}
    ee92:	4618      	mov	r0, r3
    ee94:	bd70      	pop	{r4, r5, r6, pc}
    if (OS_MBUF_IS_PKTHDR(om)) {
    ee96:	2b07      	cmp	r3, #7
    ee98:	d901      	bls.n	ee9e <gatt_svr_chr_access_smp+0x36>
        startoff = om->om_pkthdr_len;
    ee9a:	b29b      	uxth	r3, r3
    ee9c:	e000      	b.n	eea0 <gatt_svr_chr_access_smp+0x38>
    startoff = 0;
    ee9e:	2300      	movs	r3, #0
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
    eea0:	4621      	mov	r1, r4
    eea2:	f851 2b10 	ldr.w	r2, [r1], #16
        ((uint8_t *) &om->om_databuf[0] + startoff));
    eea6:	440b      	add	r3, r1
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
    eea8:	1ad3      	subs	r3, r2, r3
    eeaa:	b29b      	uxth	r3, r3
            } else if (OS_MBUF_LEADINGSPACE(ctxt->om) >=
    eeac:	2b01      	cmp	r3, #1
    eeae:	d905      	bls.n	eebc <gatt_svr_chr_access_smp+0x54>
                ctxt->om = NULL;
    eeb0:	2300      	movs	r3, #0
    eeb2:	606b      	str	r3, [r5, #4]
                m_req->om_pkthdr_len += sizeof (conn_handle);
    eeb4:	7963      	ldrb	r3, [r4, #5]
    eeb6:	3302      	adds	r3, #2
    eeb8:	7163      	strb	r3, [r4, #5]
    eeba:	e7e3      	b.n	ee84 <gatt_svr_chr_access_smp+0x1c>
                m_req = os_msys_get_pkthdr(OS_MBUF_PKTLEN(ctxt->om),
    eebc:	2102      	movs	r1, #2
    eebe:	8a20      	ldrh	r0, [r4, #16]
    eec0:	f7fe ff6f 	bl	dda2 <os_msys_get_pkthdr>
                if (!m_req) {
    eec4:	4604      	mov	r4, r0
    eec6:	b1a0      	cbz	r0, eef2 <gatt_svr_chr_access_smp+0x8a>
                rc = os_mbuf_appendfrom(m_req, ctxt->om, 0,
    eec8:	6869      	ldr	r1, [r5, #4]
    eeca:	8a0b      	ldrh	r3, [r1, #16]
    eecc:	2200      	movs	r2, #0
    eece:	f7fe fb28 	bl	d522 <os_mbuf_appendfrom>
                if (rc) {
    eed2:	2800      	cmp	r0, #0
    eed4:	d0d6      	beq.n	ee84 <gatt_svr_chr_access_smp+0x1c>
                    return BLE_ATT_ERR_INSUFFICIENT_RES;
    eed6:	2311      	movs	r3, #17
    eed8:	e7db      	b.n	ee92 <gatt_svr_chr_access_smp+0x2a>
                return BLE_ATT_ERR_UNLIKELY;
    eeda:	230e      	movs	r3, #14
    eedc:	e7d9      	b.n	ee92 <gatt_svr_chr_access_smp+0x2a>
            assert(0);
    eede:	f7fd f983 	bl	c1e8 <hal_debugger_connected>
    eee2:	b100      	cbz	r0, eee6 <gatt_svr_chr_access_smp+0x7e>
    eee4:	be01      	bkpt	0x0001
    eee6:	2300      	movs	r3, #0
    eee8:	461a      	mov	r2, r3
    eeea:	4619      	mov	r1, r3
    eeec:	4618      	mov	r0, r3
    eeee:	f7fd fe2f 	bl	cb50 <__assert_func>
                    return BLE_ATT_ERR_INSUFFICIENT_RES;
    eef2:	2311      	movs	r3, #17
    eef4:	e7cd      	b.n	ee92 <gatt_svr_chr_access_smp+0x2a>
    eef6:	bf00      	nop
    eef8:	20003430 	.word	0x20003430

0000eefc <smp_ble_gatt_svr_init>:
 * @param eventq
 * @return 0 on success; non-zero on failure
 */
int
smp_ble_gatt_svr_init(void)
{
    eefc:	b508      	push	{r3, lr}
    int rc;

    rc = ble_gatts_count_cfg(gatt_svr_svcs);
    eefe:	480c      	ldr	r0, [pc, #48]	; (ef30 <smp_ble_gatt_svr_init+0x34>)
    ef00:	f014 fcdc 	bl	238bc <ble_gatts_count_cfg>
    if (rc != 0) {
    ef04:	4603      	mov	r3, r0
    ef06:	b108      	cbz	r0, ef0c <smp_ble_gatt_svr_init+0x10>

    rc = smp_transport_init(&g_smp_ble_transport, smp_ble_out, smp_ble_get_mtu);

err:
    return rc;
}
    ef08:	4618      	mov	r0, r3
    ef0a:	bd08      	pop	{r3, pc}
    rc = ble_gatts_add_svcs(gatt_svr_svcs);
    ef0c:	4808      	ldr	r0, [pc, #32]	; (ef30 <smp_ble_gatt_svr_init+0x34>)
    ef0e:	f014 fcb1 	bl	23874 <ble_gatts_add_svcs>
    if (rc != 0) {
    ef12:	4603      	mov	r3, r0
    ef14:	2800      	cmp	r0, #0
    ef16:	d1f7      	bne.n	ef08 <smp_ble_gatt_svr_init+0xc>
    os_mqueue_init(&g_smp_ble_mq, &smp_ble_event_data_in, NULL);
    ef18:	2200      	movs	r2, #0
    ef1a:	4906      	ldr	r1, [pc, #24]	; (ef34 <smp_ble_gatt_svr_init+0x38>)
    ef1c:	4806      	ldr	r0, [pc, #24]	; (ef38 <smp_ble_gatt_svr_init+0x3c>)
    ef1e:	f7fe fa01 	bl	d324 <os_mqueue_init>
    rc = smp_transport_init(&g_smp_ble_transport, smp_ble_out, smp_ble_get_mtu);
    ef22:	4a06      	ldr	r2, [pc, #24]	; (ef3c <smp_ble_gatt_svr_init+0x40>)
    ef24:	4906      	ldr	r1, [pc, #24]	; (ef40 <smp_ble_gatt_svr_init+0x44>)
    ef26:	4807      	ldr	r0, [pc, #28]	; (ef44 <smp_ble_gatt_svr_init+0x48>)
    ef28:	f7ff ff3e 	bl	eda8 <smp_transport_init>
    ef2c:	4603      	mov	r3, r0
    ef2e:	e7eb      	b.n	ef08 <smp_ble_gatt_svr_init+0xc>
    ef30:	00031980 	.word	0x00031980
    ef34:	0000ee29 	.word	0x0000ee29
    ef38:	20003464 	.word	0x20003464
    ef3c:	0000eded 	.word	0x0000eded
    ef40:	0000ee01 	.word	0x0000ee01
    ef44:	20003430 	.word	0x20003430

0000ef48 <smp_ble_pkg_init>:

void
smp_ble_pkg_init(void)
{
    ef48:	b510      	push	{r4, lr}
    ef4a:	b082      	sub	sp, #8
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
    ef4c:	4b0f      	ldr	r3, [pc, #60]	; (ef8c <smp_ble_pkg_init+0x44>)
    ef4e:	781b      	ldrb	r3, [r3, #0]
    ef50:	b123      	cbz	r3, ef5c <smp_ble_pkg_init+0x14>

    rc = smp_ble_gatt_svr_init();
    ef52:	f7ff ffd3 	bl	eefc <smp_ble_gatt_svr_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
    ef56:	b958      	cbnz	r0, ef70 <smp_ble_pkg_init+0x28>
}
    ef58:	b002      	add	sp, #8
    ef5a:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
    ef5c:	f7fd f944 	bl	c1e8 <hal_debugger_connected>
    ef60:	b100      	cbz	r0, ef64 <smp_ble_pkg_init+0x1c>
    ef62:	be01      	bkpt	0x0001
    ef64:	2300      	movs	r3, #0
    ef66:	461a      	mov	r2, r3
    ef68:	4619      	mov	r1, r3
    ef6a:	4618      	mov	r0, r3
    ef6c:	f7fd fdf0 	bl	cb50 <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
    ef70:	f7fd f93a 	bl	c1e8 <hal_debugger_connected>
    ef74:	b100      	cbz	r0, ef78 <smp_ble_pkg_init+0x30>
    ef76:	be01      	bkpt	0x0001
    ef78:	2000      	movs	r0, #0
    ef7a:	9000      	str	r0, [sp, #0]
    ef7c:	4b04      	ldr	r3, [pc, #16]	; (ef90 <smp_ble_pkg_init+0x48>)
    ef7e:	681c      	ldr	r4, [r3, #0]
    ef80:	4603      	mov	r3, r0
    ef82:	4602      	mov	r2, r0
    ef84:	4601      	mov	r1, r0
    ef86:	47a0      	blx	r4
}
    ef88:	e7e6      	b.n	ef58 <smp_ble_pkg_init+0x10>
    ef8a:	bf00      	nop
    ef8c:	20003584 	.word	0x20003584
    ef90:	20000298 	.word	0x20000298

0000ef94 <config_init_fcb>:
    .cf_fcb.f_sectors = conf_fcb_area,
};

static void
config_init_fcb(void)
{
    ef94:	b510      	push	{r4, lr}
    ef96:	b084      	sub	sp, #16
    int cnt;
    int rc;

    rc = flash_area_to_sectors(MYNEWT_VAL(CONFIG_FCB_FLASH_AREA), &cnt, NULL);
    ef98:	2200      	movs	r2, #0
    ef9a:	a903      	add	r1, sp, #12
    ef9c:	2011      	movs	r0, #17
    ef9e:	f001 fd43 	bl	10a28 <flash_area_to_sectors>
    SYSINIT_PANIC_ASSERT(rc == 0);
    efa2:	b990      	cbnz	r0, efca <config_init_fcb+0x36>
    SYSINIT_PANIC_ASSERT(
    efa4:	9b03      	ldr	r3, [sp, #12]
    efa6:	2b09      	cmp	r3, #9
    efa8:	d81c      	bhi.n	efe4 <config_init_fcb+0x50>
        cnt <= sizeof(conf_fcb_area) / sizeof(conf_fcb_area[0]));
    flash_area_to_sectors(
    efaa:	4a31      	ldr	r2, [pc, #196]	; (f070 <config_init_fcb+0xdc>)
    efac:	a903      	add	r1, sp, #12
    efae:	2011      	movs	r0, #17
    efb0:	f001 fd3a 	bl	10a28 <flash_area_to_sectors>
        MYNEWT_VAL(CONFIG_FCB_FLASH_AREA), &cnt, conf_fcb_area);

    config_init_conf_fcb.cf_fcb.f_sector_cnt = cnt;
    efb4:	482f      	ldr	r0, [pc, #188]	; (f074 <config_init_fcb+0xe0>)
    efb6:	9b03      	ldr	r3, [sp, #12]
    efb8:	7343      	strb	r3, [r0, #13]

    rc = conf_fcb_src(&config_init_conf_fcb);
    efba:	f000 fca1 	bl	f900 <conf_fcb_src>
    if (rc) {
    efbe:	4603      	mov	r3, r0
    efc0:	2800      	cmp	r0, #0
    efc2:	d033      	beq.n	f02c <config_init_fcb+0x98>
        for (cnt = 0;
    efc4:	2300      	movs	r3, #0
    efc6:	9303      	str	r3, [sp, #12]
    efc8:	e027      	b.n	f01a <config_init_fcb+0x86>
    SYSINIT_PANIC_ASSERT(rc == 0);
    efca:	f7fd f90d 	bl	c1e8 <hal_debugger_connected>
    efce:	b100      	cbz	r0, efd2 <config_init_fcb+0x3e>
    efd0:	be01      	bkpt	0x0001
    efd2:	2000      	movs	r0, #0
    efd4:	9000      	str	r0, [sp, #0]
    efd6:	4b28      	ldr	r3, [pc, #160]	; (f078 <config_init_fcb+0xe4>)
    efd8:	681c      	ldr	r4, [r3, #0]
    efda:	4603      	mov	r3, r0
    efdc:	4602      	mov	r2, r0
    efde:	4601      	mov	r1, r0
    efe0:	47a0      	blx	r4
    efe2:	e7df      	b.n	efa4 <config_init_fcb+0x10>
    SYSINIT_PANIC_ASSERT(
    efe4:	f7fd f900 	bl	c1e8 <hal_debugger_connected>
    efe8:	b100      	cbz	r0, efec <config_init_fcb+0x58>
    efea:	be01      	bkpt	0x0001
    efec:	2000      	movs	r0, #0
    efee:	9000      	str	r0, [sp, #0]
    eff0:	4b21      	ldr	r3, [pc, #132]	; (f078 <config_init_fcb+0xe4>)
    eff2:	681c      	ldr	r4, [r3, #0]
    eff4:	4603      	mov	r3, r0
    eff6:	4602      	mov	r2, r0
    eff8:	4601      	mov	r1, r0
    effa:	47a0      	blx	r4
    effc:	e7d5      	b.n	efaa <config_init_fcb+0x16>
             cnt < config_init_conf_fcb.cf_fcb.f_sector_cnt;
             cnt++) {

            flash_area_erase(&conf_fcb_area[cnt], 0,
    effe:	4c1c      	ldr	r4, [pc, #112]	; (f070 <config_init_fcb+0xdc>)
    f000:	0053      	lsls	r3, r2, #1
    f002:	1899      	adds	r1, r3, r2
    f004:	0088      	lsls	r0, r1, #2
    f006:	4602      	mov	r2, r0
    f008:	4422      	add	r2, r4
    f00a:	6892      	ldr	r2, [r2, #8]
    f00c:	2100      	movs	r1, #0
    f00e:	4420      	add	r0, r4
    f010:	f001 fd6e 	bl	10af0 <flash_area_erase>
             cnt++) {
    f014:	9b03      	ldr	r3, [sp, #12]
    f016:	3301      	adds	r3, #1
    f018:	9303      	str	r3, [sp, #12]
             cnt < config_init_conf_fcb.cf_fcb.f_sector_cnt;
    f01a:	4b16      	ldr	r3, [pc, #88]	; (f074 <config_init_fcb+0xe0>)
    f01c:	7b5b      	ldrb	r3, [r3, #13]
    f01e:	9a03      	ldr	r2, [sp, #12]
        for (cnt = 0;
    f020:	4293      	cmp	r3, r2
    f022:	dcec      	bgt.n	effe <config_init_fcb+0x6a>
                             conf_fcb_area[cnt].fa_size);
        }
        rc = conf_fcb_src(&config_init_conf_fcb);
    f024:	4813      	ldr	r0, [pc, #76]	; (f074 <config_init_fcb+0xe0>)
    f026:	f000 fc6b 	bl	f900 <conf_fcb_src>
    f02a:	4603      	mov	r3, r0
    }
    SYSINIT_PANIC_ASSERT(rc == 0);
    f02c:	b92b      	cbnz	r3, f03a <config_init_fcb+0xa6>
    rc = conf_fcb_dst(&config_init_conf_fcb);
    f02e:	4811      	ldr	r0, [pc, #68]	; (f074 <config_init_fcb+0xe0>)
    f030:	f000 fc92 	bl	f958 <conf_fcb_dst>
    SYSINIT_PANIC_ASSERT(rc == 0);
    f034:	b970      	cbnz	r0, f054 <config_init_fcb+0xc0>
}
    f036:	b004      	add	sp, #16
    f038:	bd10      	pop	{r4, pc}
    SYSINIT_PANIC_ASSERT(rc == 0);
    f03a:	f7fd f8d5 	bl	c1e8 <hal_debugger_connected>
    f03e:	b100      	cbz	r0, f042 <config_init_fcb+0xae>
    f040:	be01      	bkpt	0x0001
    f042:	2000      	movs	r0, #0
    f044:	9000      	str	r0, [sp, #0]
    f046:	4b0c      	ldr	r3, [pc, #48]	; (f078 <config_init_fcb+0xe4>)
    f048:	681c      	ldr	r4, [r3, #0]
    f04a:	4603      	mov	r3, r0
    f04c:	4602      	mov	r2, r0
    f04e:	4601      	mov	r1, r0
    f050:	47a0      	blx	r4
    f052:	e7ec      	b.n	f02e <config_init_fcb+0x9a>
    SYSINIT_PANIC_ASSERT(rc == 0);
    f054:	f7fd f8c8 	bl	c1e8 <hal_debugger_connected>
    f058:	b100      	cbz	r0, f05c <config_init_fcb+0xc8>
    f05a:	be01      	bkpt	0x0001
    f05c:	2000      	movs	r0, #0
    f05e:	9000      	str	r0, [sp, #0]
    f060:	4b05      	ldr	r3, [pc, #20]	; (f078 <config_init_fcb+0xe4>)
    f062:	681c      	ldr	r4, [r3, #0]
    f064:	4603      	mov	r3, r0
    f066:	4602      	mov	r2, r0
    f068:	4601      	mov	r1, r0
    f06a:	47a0      	blx	r4
}
    f06c:	e7e3      	b.n	f036 <config_init_fcb+0xa2>
    f06e:	bf00      	nop
    f070:	200018bc 	.word	0x200018bc
    f074:	200001d0 	.word	0x200001d0
    f078:	20000298 	.word	0x20000298

0000f07c <config_pkg_init>:
#endif
#endif

void
config_pkg_init(void)
{
    f07c:	b508      	push	{r3, lr}
    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
    f07e:	4b09      	ldr	r3, [pc, #36]	; (f0a4 <config_pkg_init+0x28>)
    f080:	781b      	ldrb	r3, [r3, #0]
    f082:	b123      	cbz	r3, f08e <config_pkg_init+0x12>

    conf_init();
    f084:	f000 f940 	bl	f308 <conf_init>

#if MYNEWT_VAL(CONFIG_AUTO_INIT)
#if MYNEWT_VAL(CONFIG_NFFS)
    config_init_fs();
#elif MYNEWT_VAL(CONFIG_FCB)
    config_init_fcb();
    f088:	f7ff ff84 	bl	ef94 <config_init_fcb>
#elif MYNEWT_VAL(CONFIG_FCB2)
    config_init_fcb2();
#endif
#endif
}
    f08c:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
    f08e:	f7fd f8ab 	bl	c1e8 <hal_debugger_connected>
    f092:	b100      	cbz	r0, f096 <config_pkg_init+0x1a>
    f094:	be01      	bkpt	0x0001
    f096:	2300      	movs	r3, #0
    f098:	461a      	mov	r2, r3
    f09a:	4619      	mov	r1, r3
    f09c:	4618      	mov	r0, r3
    f09e:	f7fd fd57 	bl	cb50 <__assert_func>
    f0a2:	bf00      	nop
    f0a4:	20003584 	.word	0x20003584

0000f0a8 <config_pkg_init_stage2>:
     */
#if MYNEWT_VAL(CONFIG_NFFS)
    fs_mkdir(MYNEWT_VAL(CONFIG_NFFS_DIR));
#endif
#endif
}
    f0a8:	4770      	bx	lr

0000f0aa <conf_dup_check_cb>:
    return 0;
}

static void
conf_dup_check_cb(char *name, char *val, void *cb_arg)
{
    f0aa:	b538      	push	{r3, r4, r5, lr}
    f0ac:	460d      	mov	r5, r1
    f0ae:	4614      	mov	r4, r2
    struct conf_dup_check_arg *cdca = (struct conf_dup_check_arg *)cb_arg;

    if (strcmp(name, cdca->name)) {
    f0b0:	6811      	ldr	r1, [r2, #0]
    f0b2:	f7ff fcc3 	bl	ea3c <strcmp>
    f0b6:	b940      	cbnz	r0, f0ca <conf_dup_check_cb+0x20>
        return;
    }
    if (!val) {
    f0b8:	b145      	cbz	r5, f0cc <conf_dup_check_cb+0x22>
            cdca->is_dup = 1;
        } else {
            cdca->is_dup = 0;
        }
    } else {
        if (cdca->val && !strcmp(val, cdca->val)) {
    f0ba:	6861      	ldr	r1, [r4, #4]
    f0bc:	b119      	cbz	r1, f0c6 <conf_dup_check_cb+0x1c>
    f0be:	4628      	mov	r0, r5
    f0c0:	f7ff fcbc 	bl	ea3c <strcmp>
    f0c4:	b160      	cbz	r0, f0e0 <conf_dup_check_cb+0x36>
            cdca->is_dup = 1;
        } else {
            cdca->is_dup = 0;
    f0c6:	2300      	movs	r3, #0
    f0c8:	60a3      	str	r3, [r4, #8]
        }
    }
}
    f0ca:	bd38      	pop	{r3, r4, r5, pc}
        if (!cdca->val || cdca->val[0] == '\0') {
    f0cc:	6863      	ldr	r3, [r4, #4]
    f0ce:	b10b      	cbz	r3, f0d4 <conf_dup_check_cb+0x2a>
    f0d0:	781b      	ldrb	r3, [r3, #0]
    f0d2:	b913      	cbnz	r3, f0da <conf_dup_check_cb+0x30>
            cdca->is_dup = 1;
    f0d4:	2301      	movs	r3, #1
    f0d6:	60a3      	str	r3, [r4, #8]
    f0d8:	e7f7      	b.n	f0ca <conf_dup_check_cb+0x20>
            cdca->is_dup = 0;
    f0da:	2300      	movs	r3, #0
    f0dc:	60a3      	str	r3, [r4, #8]
    f0de:	e7f4      	b.n	f0ca <conf_dup_check_cb+0x20>
            cdca->is_dup = 1;
    f0e0:	2301      	movs	r3, #1
    f0e2:	60a3      	str	r3, [r4, #8]
    f0e4:	e7f1      	b.n	f0ca <conf_dup_check_cb+0x20>

0000f0e6 <conf_load_cb>:
{
    f0e6:	b538      	push	{r3, r4, r5, lr}
    f0e8:	4604      	mov	r4, r0
    f0ea:	460d      	mov	r5, r1
    if (!cb_arg || !strcmp((char*)cb_arg, name)) {
    f0ec:	b122      	cbz	r2, f0f8 <conf_load_cb+0x12>
    f0ee:	4610      	mov	r0, r2
    f0f0:	4621      	mov	r1, r4
    f0f2:	f7ff fca3 	bl	ea3c <strcmp>
    f0f6:	b918      	cbnz	r0, f100 <conf_load_cb+0x1a>
        conf_set_value(name, val);
    f0f8:	4629      	mov	r1, r5
    f0fa:	4620      	mov	r0, r4
    f0fc:	f000 fab2 	bl	f664 <conf_set_value>
}
    f100:	bd38      	pop	{r3, r4, r5, pc}
	...

0000f104 <conf_src_register>:
    SLIST_FOREACH(cur, &conf_load_srcs, cs_next) {
    f104:	4b08      	ldr	r3, [pc, #32]	; (f128 <conf_src_register+0x24>)
    f106:	6819      	ldr	r1, [r3, #0]
    f108:	460b      	mov	r3, r1
    prev = NULL;
    f10a:	2200      	movs	r2, #0
    SLIST_FOREACH(cur, &conf_load_srcs, cs_next) {
    f10c:	e001      	b.n	f112 <conf_src_register+0xe>
        prev = cur;
    f10e:	461a      	mov	r2, r3
    SLIST_FOREACH(cur, &conf_load_srcs, cs_next) {
    f110:	681b      	ldr	r3, [r3, #0]
    f112:	2b00      	cmp	r3, #0
    f114:	d1fb      	bne.n	f10e <conf_src_register+0xa>
    if (!prev) {
    f116:	b11a      	cbz	r2, f120 <conf_src_register+0x1c>
        SLIST_INSERT_AFTER(prev, cs, cs_next);
    f118:	6813      	ldr	r3, [r2, #0]
    f11a:	6003      	str	r3, [r0, #0]
    f11c:	6010      	str	r0, [r2, #0]
}
    f11e:	4770      	bx	lr
        SLIST_INSERT_HEAD(&conf_load_srcs, cs, cs_next);
    f120:	6001      	str	r1, [r0, #0]
    f122:	4b01      	ldr	r3, [pc, #4]	; (f128 <conf_src_register+0x24>)
    f124:	6018      	str	r0, [r3, #0]
    f126:	4770      	bx	lr
    f128:	20003480 	.word	0x20003480

0000f12c <conf_dst_register>:
    conf_save_dst = cs;
    f12c:	4b01      	ldr	r3, [pc, #4]	; (f134 <conf_dst_register+0x8>)
    f12e:	6018      	str	r0, [r3, #0]
}
    f130:	4770      	bx	lr
    f132:	bf00      	nop
    f134:	20003484 	.word	0x20003484

0000f138 <conf_load>:
{
    f138:	b510      	push	{r4, lr}
    conf_lock();
    f13a:	f000 f90f 	bl	f35c <conf_lock>
    conf_loaded = true;
    f13e:	2301      	movs	r3, #1
    f140:	4a0e      	ldr	r2, [pc, #56]	; (f17c <conf_load+0x44>)
    f142:	7013      	strb	r3, [r2, #0]
    conf_loading = true;
    f144:	4a0e      	ldr	r2, [pc, #56]	; (f180 <conf_load+0x48>)
    f146:	7013      	strb	r3, [r2, #0]
    SLIST_FOREACH(cs, &conf_load_srcs, cs_next) {
    f148:	4b0e      	ldr	r3, [pc, #56]	; (f184 <conf_load+0x4c>)
    f14a:	681c      	ldr	r4, [r3, #0]
    f14c:	e000      	b.n	f150 <conf_load+0x18>
    f14e:	6824      	ldr	r4, [r4, #0]
    f150:	b164      	cbz	r4, f16c <conf_load+0x34>
        cs->cs_itf->csi_load(cs, conf_load_cb, NULL);
    f152:	6863      	ldr	r3, [r4, #4]
    f154:	681b      	ldr	r3, [r3, #0]
    f156:	2200      	movs	r2, #0
    f158:	490b      	ldr	r1, [pc, #44]	; (f188 <conf_load+0x50>)
    f15a:	4620      	mov	r0, r4
    f15c:	4798      	blx	r3
        if (SLIST_NEXT(cs, cs_next)) {
    f15e:	6823      	ldr	r3, [r4, #0]
    f160:	2b00      	cmp	r3, #0
    f162:	d0f4      	beq.n	f14e <conf_load+0x16>
            conf_commit(NULL);
    f164:	2000      	movs	r0, #0
    f166:	f000 fab3 	bl	f6d0 <conf_commit>
    f16a:	e7f0      	b.n	f14e <conf_load+0x16>
    conf_loading = false;
    f16c:	4b04      	ldr	r3, [pc, #16]	; (f180 <conf_load+0x48>)
    f16e:	701c      	strb	r4, [r3, #0]
    conf_unlock();
    f170:	f000 f8fe 	bl	f370 <conf_unlock>
    return conf_commit(NULL);
    f174:	4620      	mov	r0, r4
    f176:	f000 faab 	bl	f6d0 <conf_commit>
}
    f17a:	bd10      	pop	{r4, pc}
    f17c:	20001928 	.word	0x20001928
    f180:	20001929 	.word	0x20001929
    f184:	20003480 	.word	0x20003480
    f188:	0000f0e7 	.word	0x0000f0e7

0000f18c <conf_ensure_loaded>:
{
    f18c:	b508      	push	{r3, lr}
    if (conf_loaded) {
    f18e:	4b04      	ldr	r3, [pc, #16]	; (f1a0 <conf_ensure_loaded+0x14>)
    f190:	781b      	ldrb	r3, [r3, #0]
    f192:	b10b      	cbz	r3, f198 <conf_ensure_loaded+0xc>
        return 0;
    f194:	2000      	movs	r0, #0
}
    f196:	bd08      	pop	{r3, pc}
    return conf_load();
    f198:	f7ff ffce 	bl	f138 <conf_load>
    f19c:	e7fb      	b.n	f196 <conf_ensure_loaded+0xa>
    f19e:	bf00      	nop
    f1a0:	20001928 	.word	0x20001928

0000f1a4 <conf_save_one>:
/*
 * Append a single value to persisted config. Don't store duplicate value.
 */
int
conf_save_one(const char *name, char *value)
{
    f1a4:	b570      	push	{r4, r5, r6, lr}
    f1a6:	b084      	sub	sp, #16
    f1a8:	4605      	mov	r5, r0
    f1aa:	460e      	mov	r6, r1
    struct conf_store *cs;
    struct conf_dup_check_arg cdca;
    int rc;

    conf_lock();
    f1ac:	f000 f8d6 	bl	f35c <conf_lock>
    if (!conf_save_dst) {
    f1b0:	4b13      	ldr	r3, [pc, #76]	; (f200 <conf_save_one+0x5c>)
    f1b2:	681b      	ldr	r3, [r3, #0]
    f1b4:	b1fb      	cbz	r3, f1f6 <conf_save_one+0x52>
    }

    /*
     * Check if we're writing the same value again.
     */
    cdca.name = name;
    f1b6:	9501      	str	r5, [sp, #4]
    cdca.val = value;
    f1b8:	9602      	str	r6, [sp, #8]
    cdca.is_dup = 0;
    f1ba:	2300      	movs	r3, #0
    f1bc:	9303      	str	r3, [sp, #12]
    SLIST_FOREACH(cs, &conf_load_srcs, cs_next) {
    f1be:	4b11      	ldr	r3, [pc, #68]	; (f204 <conf_save_one+0x60>)
    f1c0:	681c      	ldr	r4, [r3, #0]
    f1c2:	e006      	b.n	f1d2 <conf_save_one+0x2e>
        cs->cs_itf->csi_load(cs, conf_dup_check_cb, &cdca);
    f1c4:	6863      	ldr	r3, [r4, #4]
    f1c6:	681b      	ldr	r3, [r3, #0]
    f1c8:	aa01      	add	r2, sp, #4
    f1ca:	490f      	ldr	r1, [pc, #60]	; (f208 <conf_save_one+0x64>)
    f1cc:	4620      	mov	r0, r4
    f1ce:	4798      	blx	r3
    SLIST_FOREACH(cs, &conf_load_srcs, cs_next) {
    f1d0:	6824      	ldr	r4, [r4, #0]
    f1d2:	2c00      	cmp	r4, #0
    f1d4:	d1f6      	bne.n	f1c4 <conf_save_one+0x20>
    }
    if (cdca.is_dup == 1) {
    f1d6:	9b03      	ldr	r3, [sp, #12]
    f1d8:	2b01      	cmp	r3, #1
    f1da:	d00e      	beq.n	f1fa <conf_save_one+0x56>
        rc = 0;
        goto out;
    }
    cs = conf_save_dst;
    f1dc:	4b08      	ldr	r3, [pc, #32]	; (f200 <conf_save_one+0x5c>)
    f1de:	6818      	ldr	r0, [r3, #0]
    rc = cs->cs_itf->csi_save(cs, name, value);
    f1e0:	6843      	ldr	r3, [r0, #4]
    f1e2:	689b      	ldr	r3, [r3, #8]
    f1e4:	4632      	mov	r2, r6
    f1e6:	4629      	mov	r1, r5
    f1e8:	4798      	blx	r3
    f1ea:	4604      	mov	r4, r0
out:
    conf_unlock();
    f1ec:	f000 f8c0 	bl	f370 <conf_unlock>
    return rc;
}
    f1f0:	4620      	mov	r0, r4
    f1f2:	b004      	add	sp, #16
    f1f4:	bd70      	pop	{r4, r5, r6, pc}
        rc = OS_ENOENT;
    f1f6:	240a      	movs	r4, #10
    f1f8:	e7f8      	b.n	f1ec <conf_save_one+0x48>
        rc = 0;
    f1fa:	2400      	movs	r4, #0
    f1fc:	e7f6      	b.n	f1ec <conf_save_one+0x48>
    f1fe:	bf00      	nop
    f200:	20003484 	.word	0x20003484
    f204:	20003480 	.word	0x20003480
    f208:	0000f0ab 	.word	0x0000f0ab

0000f20c <conf_store_one>:

static void
conf_store_one(char *name, char *value)
{
    f20c:	b508      	push	{r3, lr}
    conf_save_one(name, value);
    f20e:	f7ff ffc9 	bl	f1a4 <conf_save_one>
}
    f212:	bd08      	pop	{r3, pc}

0000f214 <conf_save>:
 * Walk through all registered subsystems, and ask them to export their
 * config variables. Persist these settings.
 */
int
conf_save(void)
{
    f214:	b570      	push	{r4, r5, r6, lr}
    struct conf_store *cs;
    struct conf_handler *ch;
    int rc;
    int rc2;

    conf_lock();
    f216:	f000 f8a1 	bl	f35c <conf_lock>
    cs = conf_save_dst;
    f21a:	4b11      	ldr	r3, [pc, #68]	; (f260 <conf_save+0x4c>)
    f21c:	681e      	ldr	r6, [r3, #0]
    if (!cs) {
    f21e:	b1e6      	cbz	r6, f25a <conf_save+0x46>
        rc = OS_ENOENT;
        goto out;
    }

    if (cs->cs_itf->csi_save_start) {
    f220:	6873      	ldr	r3, [r6, #4]
    f222:	685b      	ldr	r3, [r3, #4]
    f224:	b10b      	cbz	r3, f22a <conf_save+0x16>
        cs->cs_itf->csi_save_start(cs);
    f226:	4630      	mov	r0, r6
    f228:	4798      	blx	r3
    }
    rc = 0;
    SLIST_FOREACH(ch, &conf_handlers, ch_list) {
    f22a:	4b0e      	ldr	r3, [pc, #56]	; (f264 <conf_save+0x50>)
    f22c:	681c      	ldr	r4, [r3, #0]
    rc = 0;
    f22e:	2500      	movs	r5, #0
    SLIST_FOREACH(ch, &conf_handlers, ch_list) {
    f230:	e000      	b.n	f234 <conf_save+0x20>
    f232:	6824      	ldr	r4, [r4, #0]
    f234:	b144      	cbz	r4, f248 <conf_save+0x34>
        rc2 = conf_export_cb(ch, conf_store_one, CONF_EXPORT_PERSIST);
    f236:	2200      	movs	r2, #0
    f238:	490b      	ldr	r1, [pc, #44]	; (f268 <conf_save+0x54>)
    f23a:	4620      	mov	r0, r4
    f23c:	f000 f9fe 	bl	f63c <conf_export_cb>
        if (!rc) {
    f240:	2d00      	cmp	r5, #0
    f242:	d1f6      	bne.n	f232 <conf_save+0x1e>
            rc = rc2;
    f244:	4605      	mov	r5, r0
    f246:	e7f4      	b.n	f232 <conf_save+0x1e>
        }
    }
    if (cs->cs_itf->csi_save_end) {
    f248:	6873      	ldr	r3, [r6, #4]
    f24a:	68db      	ldr	r3, [r3, #12]
    f24c:	b10b      	cbz	r3, f252 <conf_save+0x3e>
        cs->cs_itf->csi_save_end(cs);
    f24e:	4630      	mov	r0, r6
    f250:	4798      	blx	r3
    }
out:
    conf_unlock();
    f252:	f000 f88d 	bl	f370 <conf_unlock>
    return rc;
}
    f256:	4628      	mov	r0, r5
    f258:	bd70      	pop	{r4, r5, r6, pc}
        rc = OS_ENOENT;
    f25a:	250a      	movs	r5, #10
    f25c:	e7f9      	b.n	f252 <conf_save+0x3e>
    f25e:	bf00      	nop
    f260:	20003484 	.word	0x20003484
    f264:	20003488 	.word	0x20003488
    f268:	0000f20d 	.word	0x0000f20d

0000f26c <conf_store_init>:

void
conf_store_init(void)
{
    conf_loaded = false;
    f26c:	2300      	movs	r3, #0
    f26e:	4a02      	ldr	r2, [pc, #8]	; (f278 <conf_store_init+0xc>)
    f270:	7013      	strb	r3, [r2, #0]
    SLIST_INIT(&conf_load_srcs);
    f272:	4a02      	ldr	r2, [pc, #8]	; (f27c <conf_store_init+0x10>)
    f274:	6013      	str	r3, [r2, #0]
}
    f276:	4770      	bx	lr
    f278:	20001928 	.word	0x20001928
    f27c:	20003480 	.word	0x20003480

0000f280 <conf_get_cb>:
 * Executes a conf_handler's "get" callback and returns the result.
 */
static char *
conf_get_cb(struct conf_handler *ch, int argc, char **argv, char *val,
            int val_len_max)
{
    f280:	b530      	push	{r4, r5, lr}
    f282:	b083      	sub	sp, #12
    f284:	460c      	mov	r4, r1
    f286:	4611      	mov	r1, r2
    f288:	461a      	mov	r2, r3
    if (ch->ch_ext) {
    f28a:	7a03      	ldrb	r3, [r0, #8]
    f28c:	b143      	cbz	r3, f2a0 <conf_get_cb+0x20>
        if (ch->ch_get_ext != NULL) {
    f28e:	68c5      	ldr	r5, [r0, #12]
    f290:	b165      	cbz	r5, f2ac <conf_get_cb+0x2c>
            return ch->ch_get_ext(argc, argv, val, val_len_max, ch->ch_arg);
    f292:	69c3      	ldr	r3, [r0, #28]
    f294:	9300      	str	r3, [sp, #0]
    f296:	9b06      	ldr	r3, [sp, #24]
    f298:	4620      	mov	r0, r4
    f29a:	47a8      	blx	r5
            return ch->ch_get(argc, argv, val, val_len_max);
        }
    }

    return NULL;
}
    f29c:	b003      	add	sp, #12
    f29e:	bd30      	pop	{r4, r5, pc}
        if (ch->ch_get != NULL) {
    f2a0:	68c5      	ldr	r5, [r0, #12]
    f2a2:	b12d      	cbz	r5, f2b0 <conf_get_cb+0x30>
            return ch->ch_get(argc, argv, val, val_len_max);
    f2a4:	9b06      	ldr	r3, [sp, #24]
    f2a6:	4620      	mov	r0, r4
    f2a8:	47a8      	blx	r5
    f2aa:	e7f7      	b.n	f29c <conf_get_cb+0x1c>
    return NULL;
    f2ac:	2000      	movs	r0, #0
    f2ae:	e7f5      	b.n	f29c <conf_get_cb+0x1c>
    f2b0:	2000      	movs	r0, #0
    f2b2:	e7f3      	b.n	f29c <conf_get_cb+0x1c>

0000f2b4 <conf_set_cb>:
/**
 * Executes a conf_handler's "set" callback and returns the result.
 */
static int
conf_set_cb(struct conf_handler *ch, int argc, char **argv, char *val)
{
    f2b4:	b538      	push	{r3, r4, r5, lr}
    f2b6:	460c      	mov	r4, r1
    f2b8:	4611      	mov	r1, r2
    f2ba:	461a      	mov	r2, r3
    if (ch->ch_ext) {
    f2bc:	7a03      	ldrb	r3, [r0, #8]
    f2be:	b12b      	cbz	r3, f2cc <conf_set_cb+0x18>
        if (ch->ch_set_ext != NULL) {
    f2c0:	6905      	ldr	r5, [r0, #16]
    f2c2:	b145      	cbz	r5, f2d6 <conf_set_cb+0x22>
            return ch->ch_set_ext(argc, argv, val, ch->ch_arg);
    f2c4:	69c3      	ldr	r3, [r0, #28]
    f2c6:	4620      	mov	r0, r4
    f2c8:	47a8      	blx	r5
            return ch->ch_set(argc, argv, val);
        }
    }

    return OS_ERROR;
}
    f2ca:	bd38      	pop	{r3, r4, r5, pc}
        if (ch->ch_set != NULL) {
    f2cc:	6903      	ldr	r3, [r0, #16]
    f2ce:	b123      	cbz	r3, f2da <conf_set_cb+0x26>
            return ch->ch_set(argc, argv, val);
    f2d0:	4620      	mov	r0, r4
    f2d2:	4798      	blx	r3
    f2d4:	e7f9      	b.n	f2ca <conf_set_cb+0x16>
    return OS_ERROR;
    f2d6:	200c      	movs	r0, #12
    f2d8:	e7f7      	b.n	f2ca <conf_set_cb+0x16>
    f2da:	200c      	movs	r0, #12
    f2dc:	e7f5      	b.n	f2ca <conf_set_cb+0x16>

0000f2de <conf_commit_cb>:
/**
 * Executes a conf_handler's "commit" callback and returns the result.
 */
static int
conf_commit_cb(struct conf_handler *ch)
{
    f2de:	b508      	push	{r3, lr}
    if (ch->ch_ext) {
    f2e0:	7a03      	ldrb	r3, [r0, #8]
    f2e2:	b123      	cbz	r3, f2ee <conf_commit_cb+0x10>
        if (ch->ch_commit_ext != NULL) {
    f2e4:	6943      	ldr	r3, [r0, #20]
    f2e6:	b133      	cbz	r3, f2f6 <conf_commit_cb+0x18>
            return ch->ch_commit_ext(ch->ch_arg);
    f2e8:	69c0      	ldr	r0, [r0, #28]
    f2ea:	4798      	blx	r3
    f2ec:	e002      	b.n	f2f4 <conf_commit_cb+0x16>
        }
    } else {
        if (ch->ch_commit != NULL) {
    f2ee:	6943      	ldr	r3, [r0, #20]
    f2f0:	b11b      	cbz	r3, f2fa <conf_commit_cb+0x1c>
            return ch->ch_commit();
    f2f2:	4798      	blx	r3
        }
    }

    return 0;
}
    f2f4:	bd08      	pop	{r3, pc}
    return 0;
    f2f6:	2000      	movs	r0, #0
    f2f8:	e7fc      	b.n	f2f4 <conf_commit_cb+0x16>
    f2fa:	2000      	movs	r0, #0
    f2fc:	e7fa      	b.n	f2f4 <conf_commit_cb+0x16>

0000f2fe <conf_ev_fn_load>:
{
    f2fe:	b508      	push	{r3, lr}
    conf_ensure_loaded();
    f300:	f7ff ff44 	bl	f18c <conf_ensure_loaded>
}
    f304:	bd08      	pop	{r3, pc}
	...

0000f308 <conf_init>:
{
    f308:	b510      	push	{r4, lr}
    f30a:	b082      	sub	sp, #8
    os_mutex_init(&conf_mtx);
    f30c:	480f      	ldr	r0, [pc, #60]	; (f34c <conf_init+0x44>)
    f30e:	f7ff f9dd 	bl	e6cc <os_mutex_init>
    SLIST_INIT(&conf_handlers);
    f312:	4b0f      	ldr	r3, [pc, #60]	; (f350 <conf_init+0x48>)
    f314:	2200      	movs	r2, #0
    f316:	601a      	str	r2, [r3, #0]
    conf_store_init();
    f318:	f7ff ffa8 	bl	f26c <conf_store_init>
    rc = conf_mgmt_register();
    f31c:	f000 fc5e 	bl	fbdc <conf_mgmt_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
    f320:	b930      	cbnz	r0, f330 <conf_init+0x28>
    os_eventq_put(os_eventq_dflt_get(), &conf_ev_load);
    f322:	f7fd fffb 	bl	d31c <os_eventq_dflt_get>
    f326:	490b      	ldr	r1, [pc, #44]	; (f354 <conf_init+0x4c>)
    f328:	f7fd ff41 	bl	d1ae <os_eventq_put>
}
    f32c:	b002      	add	sp, #8
    f32e:	bd10      	pop	{r4, pc}
    SYSINIT_PANIC_ASSERT(rc == 0);
    f330:	f7fc ff5a 	bl	c1e8 <hal_debugger_connected>
    f334:	b100      	cbz	r0, f338 <conf_init+0x30>
    f336:	be01      	bkpt	0x0001
    f338:	2000      	movs	r0, #0
    f33a:	9000      	str	r0, [sp, #0]
    f33c:	4b06      	ldr	r3, [pc, #24]	; (f358 <conf_init+0x50>)
    f33e:	681c      	ldr	r4, [r3, #0]
    f340:	4603      	mov	r3, r0
    f342:	4602      	mov	r2, r0
    f344:	4601      	mov	r1, r0
    f346:	47a0      	blx	r4
    f348:	e7eb      	b.n	f322 <conf_init+0x1a>
    f34a:	bf00      	nop
    f34c:	2000192c 	.word	0x2000192c
    f350:	20003488 	.word	0x20003488
    f354:	20000208 	.word	0x20000208
    f358:	20000298 	.word	0x20000298

0000f35c <conf_lock>:
{
    f35c:	b508      	push	{r3, lr}
    os_mutex_pend(&conf_mtx, 0xFFFFFFFF);
    f35e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    f362:	4802      	ldr	r0, [pc, #8]	; (f36c <conf_lock+0x10>)
    f364:	f7ff fa1c 	bl	e7a0 <os_mutex_pend>
}
    f368:	bd08      	pop	{r3, pc}
    f36a:	bf00      	nop
    f36c:	2000192c 	.word	0x2000192c

0000f370 <conf_unlock>:
{
    f370:	b508      	push	{r3, lr}
    os_mutex_release(&conf_mtx);
    f372:	4802      	ldr	r0, [pc, #8]	; (f37c <conf_unlock+0xc>)
    f374:	f7ff f9b4 	bl	e6e0 <os_mutex_release>
}
    f378:	bd08      	pop	{r3, pc}
    f37a:	bf00      	nop
    f37c:	2000192c 	.word	0x2000192c

0000f380 <conf_register>:
{
    f380:	b510      	push	{r4, lr}
    f382:	4604      	mov	r4, r0
    conf_lock();
    f384:	f7ff ffea 	bl	f35c <conf_lock>
    SLIST_INSERT_HEAD(&conf_handlers, handler, ch_list);
    f388:	4b03      	ldr	r3, [pc, #12]	; (f398 <conf_register+0x18>)
    f38a:	681a      	ldr	r2, [r3, #0]
    f38c:	6022      	str	r2, [r4, #0]
    f38e:	601c      	str	r4, [r3, #0]
    conf_unlock();
    f390:	f7ff ffee 	bl	f370 <conf_unlock>
}
    f394:	2000      	movs	r0, #0
    f396:	bd10      	pop	{r4, pc}
    f398:	20003488 	.word	0x20003488

0000f39c <conf_handler_lookup>:
{
    f39c:	b538      	push	{r3, r4, r5, lr}
    f39e:	4605      	mov	r5, r0
    SLIST_FOREACH(ch, &conf_handlers, ch_list) {
    f3a0:	4b05      	ldr	r3, [pc, #20]	; (f3b8 <conf_handler_lookup+0x1c>)
    f3a2:	681c      	ldr	r4, [r3, #0]
    f3a4:	b134      	cbz	r4, f3b4 <conf_handler_lookup+0x18>
        if (!strcmp(name, ch->ch_name)) {
    f3a6:	6861      	ldr	r1, [r4, #4]
    f3a8:	4628      	mov	r0, r5
    f3aa:	f7ff fb47 	bl	ea3c <strcmp>
    f3ae:	b108      	cbz	r0, f3b4 <conf_handler_lookup+0x18>
    SLIST_FOREACH(ch, &conf_handlers, ch_list) {
    f3b0:	6824      	ldr	r4, [r4, #0]
    f3b2:	e7f7      	b.n	f3a4 <conf_handler_lookup+0x8>
}
    f3b4:	4620      	mov	r0, r4
    f3b6:	bd38      	pop	{r3, r4, r5, pc}
    f3b8:	20003488 	.word	0x20003488

0000f3bc <conf_parse_name>:
{
    f3bc:	b570      	push	{r4, r5, r6, lr}
    f3be:	b082      	sub	sp, #8
    f3c0:	460e      	mov	r6, r1
    f3c2:	4615      	mov	r5, r2
    tok = strtok_r(name, sep, &tok_ptr);
    f3c4:	aa01      	add	r2, sp, #4
    f3c6:	4909      	ldr	r1, [pc, #36]	; (f3ec <conf_parse_name+0x30>)
    f3c8:	f01f ff8c 	bl	2f2e4 <strtok_r>
    i = 0;
    f3cc:	2300      	movs	r3, #0
    while (tok) {
    f3ce:	e008      	b.n	f3e2 <conf_parse_name+0x26>
        name_argv[i++] = tok;
    f3d0:	1c5c      	adds	r4, r3, #1
    f3d2:	f845 0023 	str.w	r0, [r5, r3, lsl #2]
        tok = strtok_r(NULL, sep, &tok_ptr);
    f3d6:	aa01      	add	r2, sp, #4
    f3d8:	4904      	ldr	r1, [pc, #16]	; (f3ec <conf_parse_name+0x30>)
    f3da:	2000      	movs	r0, #0
    f3dc:	f01f ff82 	bl	2f2e4 <strtok_r>
        name_argv[i++] = tok;
    f3e0:	4623      	mov	r3, r4
    while (tok) {
    f3e2:	2800      	cmp	r0, #0
    f3e4:	d1f4      	bne.n	f3d0 <conf_parse_name+0x14>
    *name_argc = i;
    f3e6:	6033      	str	r3, [r6, #0]
}
    f3e8:	b002      	add	sp, #8
    f3ea:	bd70      	pop	{r4, r5, r6, pc}
    f3ec:	000319a0 	.word	0x000319a0

0000f3f0 <conf_parse_and_lookup>:
{
    f3f0:	b510      	push	{r4, lr}
    f3f2:	4614      	mov	r4, r2
    rc = conf_parse_name(name, name_argc, name_argv);
    f3f4:	f7ff ffe2 	bl	f3bc <conf_parse_name>
    if (rc) {
    f3f8:	b918      	cbnz	r0, f402 <conf_parse_and_lookup+0x12>
    return conf_handler_lookup(name_argv[0]);
    f3fa:	6820      	ldr	r0, [r4, #0]
    f3fc:	f7ff ffce 	bl	f39c <conf_handler_lookup>
}
    f400:	bd10      	pop	{r4, pc}
        return NULL;
    f402:	2000      	movs	r0, #0
    f404:	e7fc      	b.n	f400 <conf_parse_and_lookup+0x10>

0000f406 <conf_value_from_str>:
    if (!val_str) {
    f406:	2800      	cmp	r0, #0
    f408:	f000 8092 	beq.w	f530 <conf_value_from_str+0x12a>
{
    f40c:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
    f410:	b082      	sub	sp, #8
    f412:	4605      	mov	r5, r0
    f414:	461e      	mov	r6, r3
    f416:	4617      	mov	r7, r2
    f418:	460c      	mov	r4, r1
    switch (type) {
    f41a:	3902      	subs	r1, #2
    f41c:	290c      	cmp	r1, #12
    f41e:	f200 8089 	bhi.w	f534 <conf_value_from_str+0x12e>
    f422:	e8df f001 	tbb	[pc, r1]
    f426:	0707      	.short	0x0707
    f428:	87730707 	.word	0x87730707
    f42c:	4a078787 	.word	0x4a078787
    f430:	4a4a      	.short	0x4a4a
    f432:	4a          	.byte	0x4a
    f433:	00          	.byte	0x00
        val = strtoll(val_str, &eptr, 0);
    f434:	2200      	movs	r2, #0
    f436:	a901      	add	r1, sp, #4
    f438:	f01f ff64 	bl	2f304 <strtoll>
        if (*eptr != '\0') {
    f43c:	9b01      	ldr	r3, [sp, #4]
    f43e:	781b      	ldrb	r3, [r3, #0]
    f440:	2b00      	cmp	r3, #0
    f442:	d17b      	bne.n	f53c <conf_value_from_str+0x136>
        if (type == CONF_BOOL) {
    f444:	2c0a      	cmp	r4, #10
    f446:	d009      	beq.n	f45c <conf_value_from_str+0x56>
        } else if (type == CONF_INT8) {
    f448:	2c02      	cmp	r4, #2
    f44a:	d013      	beq.n	f474 <conf_value_from_str+0x6e>
        } else if (type == CONF_INT16) {
    f44c:	2c03      	cmp	r4, #3
    f44e:	d01d      	beq.n	f48c <conf_value_from_str+0x86>
        } else if (type == CONF_INT32) {
    f450:	2c04      	cmp	r4, #4
    f452:	d027      	beq.n	f4a4 <conf_value_from_str+0x9e>
            *(int64_t *)vp = val;
    f454:	e9c7 0100 	strd	r0, r1, [r7]
    return 0;
    f458:	2000      	movs	r0, #0
    f45a:	e06c      	b.n	f536 <conf_value_from_str+0x130>
            if (val < 0 || val > 1) {
    f45c:	2900      	cmp	r1, #0
    f45e:	bf08      	it	eq
    f460:	2802      	cmpeq	r0, #2
    f462:	d26d      	bcs.n	f540 <conf_value_from_str+0x13a>
            *(bool *)vp = val;
    f464:	ea50 0301 	orrs.w	r3, r0, r1
    f468:	bf14      	ite	ne
    f46a:	2301      	movne	r3, #1
    f46c:	2300      	moveq	r3, #0
    f46e:	703b      	strb	r3, [r7, #0]
    return 0;
    f470:	2000      	movs	r0, #0
    f472:	e060      	b.n	f536 <conf_value_from_str+0x130>
            if (val < INT8_MIN || val > INT8_MAX) {
    f474:	f110 0280 	adds.w	r2, r0, #128	; 0x80
    f478:	f141 0300 	adc.w	r3, r1, #0
    f47c:	2b00      	cmp	r3, #0
    f47e:	bf08      	it	eq
    f480:	f5b2 7f80 	cmpeq.w	r2, #256	; 0x100
    f484:	d25e      	bcs.n	f544 <conf_value_from_str+0x13e>
            *(int8_t *)vp = val;
    f486:	7038      	strb	r0, [r7, #0]
    return 0;
    f488:	2000      	movs	r0, #0
    f48a:	e054      	b.n	f536 <conf_value_from_str+0x130>
            if (val < INT16_MIN || val > INT16_MAX) {
    f48c:	f510 4200 	adds.w	r2, r0, #32768	; 0x8000
    f490:	f141 0300 	adc.w	r3, r1, #0
    f494:	2b00      	cmp	r3, #0
    f496:	bf08      	it	eq
    f498:	f5b2 3f80 	cmpeq.w	r2, #65536	; 0x10000
    f49c:	d254      	bcs.n	f548 <conf_value_from_str+0x142>
            *(int16_t *)vp = val;
    f49e:	8038      	strh	r0, [r7, #0]
    return 0;
    f4a0:	2000      	movs	r0, #0
    f4a2:	e048      	b.n	f536 <conf_value_from_str+0x130>
            if (val < INT32_MIN || val > INT32_MAX) {
    f4a4:	f110 4200 	adds.w	r2, r0, #2147483648	; 0x80000000
    f4a8:	f141 0300 	adc.w	r3, r1, #0
    f4ac:	2b01      	cmp	r3, #1
    f4ae:	bf08      	it	eq
    f4b0:	2a00      	cmpeq	r2, #0
    f4b2:	d24b      	bcs.n	f54c <conf_value_from_str+0x146>
            *(int32_t *)vp = val;
    f4b4:	6038      	str	r0, [r7, #0]
    return 0;
    f4b6:	2000      	movs	r0, #0
    f4b8:	e03d      	b.n	f536 <conf_value_from_str+0x130>
        uval = strtoull(val_str, &eptr, 0);
    f4ba:	2200      	movs	r2, #0
    f4bc:	a901      	add	r1, sp, #4
    f4be:	f01f ff27 	bl	2f310 <strtoull>
        if (*eptr != '\0') {
    f4c2:	9b01      	ldr	r3, [sp, #4]
    f4c4:	781b      	ldrb	r3, [r3, #0]
    f4c6:	2b00      	cmp	r3, #0
    f4c8:	d142      	bne.n	f550 <conf_value_from_str+0x14a>
        if (type == CONF_UINT8) {
    f4ca:	2c0b      	cmp	r4, #11
    f4cc:	d007      	beq.n	f4de <conf_value_from_str+0xd8>
        } else if (type == CONF_UINT16) {
    f4ce:	2c0c      	cmp	r4, #12
    f4d0:	d00d      	beq.n	f4ee <conf_value_from_str+0xe8>
        } else if (type == CONF_UINT32) {
    f4d2:	2c0d      	cmp	r4, #13
    f4d4:	d013      	beq.n	f4fe <conf_value_from_str+0xf8>
            *(uint64_t *)vp = uval;
    f4d6:	e9c7 0100 	strd	r0, r1, [r7]
    return 0;
    f4da:	2000      	movs	r0, #0
    f4dc:	e02b      	b.n	f536 <conf_value_from_str+0x130>
            if (uval > UINT8_MAX) {
    f4de:	2900      	cmp	r1, #0
    f4e0:	bf08      	it	eq
    f4e2:	f5b0 7f80 	cmpeq.w	r0, #256	; 0x100
    f4e6:	d235      	bcs.n	f554 <conf_value_from_str+0x14e>
            *(uint8_t *)vp = uval;
    f4e8:	7038      	strb	r0, [r7, #0]
    return 0;
    f4ea:	2000      	movs	r0, #0
    f4ec:	e023      	b.n	f536 <conf_value_from_str+0x130>
            if (uval > UINT16_MAX) {
    f4ee:	2900      	cmp	r1, #0
    f4f0:	bf08      	it	eq
    f4f2:	f5b0 3f80 	cmpeq.w	r0, #65536	; 0x10000
    f4f6:	d22f      	bcs.n	f558 <conf_value_from_str+0x152>
            *(uint16_t *)vp = uval;
    f4f8:	8038      	strh	r0, [r7, #0]
    return 0;
    f4fa:	2000      	movs	r0, #0
    f4fc:	e01b      	b.n	f536 <conf_value_from_str+0x130>
            if (uval > UINT32_MAX) {
    f4fe:	2901      	cmp	r1, #1
    f500:	bf08      	it	eq
    f502:	2800      	cmpeq	r0, #0
    f504:	d22a      	bcs.n	f55c <conf_value_from_str+0x156>
            *(uint32_t *)vp = uval;
    f506:	6038      	str	r0, [r7, #0]
    return 0;
    f508:	2000      	movs	r0, #0
    f50a:	e014      	b.n	f536 <conf_value_from_str+0x130>
        val = strlen(val_str);
    f50c:	f7ff fae6 	bl	eadc <strlen>
    f510:	2100      	movs	r1, #0
        if (val + 1 > maxlen) {
    f512:	f110 0b01 	adds.w	fp, r0, #1
    f516:	f141 0c00 	adc.w	ip, r1, #0
    f51a:	17f3      	asrs	r3, r6, #31
    f51c:	455e      	cmp	r6, fp
    f51e:	eb73 030c 	sbcs.w	r3, r3, ip
    f522:	db1d      	blt.n	f560 <conf_value_from_str+0x15a>
        strcpy(vp, val_str);
    f524:	4629      	mov	r1, r5
    f526:	4638      	mov	r0, r7
    f528:	f01f feb2 	bl	2f290 <strcpy>
    return 0;
    f52c:	2000      	movs	r0, #0
        break;
    f52e:	e002      	b.n	f536 <conf_value_from_str+0x130>
    return OS_INVALID_PARM;
    f530:	2003      	movs	r0, #3
}
    f532:	4770      	bx	lr
    return OS_INVALID_PARM;
    f534:	2003      	movs	r0, #3
}
    f536:	b002      	add	sp, #8
    f538:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
    return OS_INVALID_PARM;
    f53c:	2003      	movs	r0, #3
    f53e:	e7fa      	b.n	f536 <conf_value_from_str+0x130>
    f540:	2003      	movs	r0, #3
    f542:	e7f8      	b.n	f536 <conf_value_from_str+0x130>
    f544:	2003      	movs	r0, #3
    f546:	e7f6      	b.n	f536 <conf_value_from_str+0x130>
    f548:	2003      	movs	r0, #3
    f54a:	e7f4      	b.n	f536 <conf_value_from_str+0x130>
    f54c:	2003      	movs	r0, #3
    f54e:	e7f2      	b.n	f536 <conf_value_from_str+0x130>
    f550:	2003      	movs	r0, #3
    f552:	e7f0      	b.n	f536 <conf_value_from_str+0x130>
    f554:	2003      	movs	r0, #3
    f556:	e7ee      	b.n	f536 <conf_value_from_str+0x130>
    f558:	2003      	movs	r0, #3
    f55a:	e7ec      	b.n	f536 <conf_value_from_str+0x130>
    f55c:	2003      	movs	r0, #3
    f55e:	e7ea      	b.n	f536 <conf_value_from_str+0x130>
    f560:	2003      	movs	r0, #3
    f562:	e7e8      	b.n	f536 <conf_value_from_str+0x130>

0000f564 <conf_str_from_value>:
    if (type == CONF_STRING) {
    f564:	2806      	cmp	r0, #6
    f566:	d04b      	beq.n	f600 <conf_str_from_value+0x9c>
{
    f568:	b570      	push	{r4, r5, r6, lr}
    f56a:	b082      	sub	sp, #8
    f56c:	4616      	mov	r6, r2
    f56e:	460c      	mov	r4, r1
    switch (type) {
    f570:	1e85      	subs	r5, r0, #2
    f572:	2d0c      	cmp	r5, #12
    f574:	d846      	bhi.n	f604 <conf_str_from_value+0xa0>
    f576:	e8df f005 	tbb	[pc, r5]
    f57a:	0707      	.short	0x0707
    f57c:	45450707 	.word	0x45450707
    f580:	29074545 	.word	0x29074545
    f584:	2929      	.short	0x2929
    f586:	29          	.byte	0x29
    f587:	00          	.byte	0x00
        if (type == CONF_BOOL) {
    f588:	280a      	cmp	r0, #10
    f58a:	d008      	beq.n	f59e <conf_str_from_value+0x3a>
        } else if (type == CONF_INT8) {
    f58c:	2802      	cmp	r0, #2
    f58e:	d012      	beq.n	f5b6 <conf_str_from_value+0x52>
        } else if (type == CONF_INT16) {
    f590:	2803      	cmp	r0, #3
    f592:	d014      	beq.n	f5be <conf_str_from_value+0x5a>
        } else if (type == CONF_INT32) {
    f594:	2804      	cmp	r0, #4
    f596:	d016      	beq.n	f5c6 <conf_str_from_value+0x62>
            val = *(int64_t *)vp;
    f598:	e9d1 0100 	ldrd	r0, r1, [r1]
    f59c:	e001      	b.n	f5a2 <conf_str_from_value+0x3e>
            val = *(bool *)vp;
    f59e:	7820      	ldrb	r0, [r4, #0]
    f5a0:	2100      	movs	r1, #0
        snprintf(buf, buf_len, "%lld", val);
    f5a2:	e9cd 0100 	strd	r0, r1, [sp]
    f5a6:	4a18      	ldr	r2, [pc, #96]	; (f608 <conf_str_from_value+0xa4>)
    f5a8:	4619      	mov	r1, r3
    f5aa:	4630      	mov	r0, r6
    f5ac:	f020 f99d 	bl	2f8ea <snprintf>
        return buf;
    f5b0:	4630      	mov	r0, r6
}
    f5b2:	b002      	add	sp, #8
    f5b4:	bd70      	pop	{r4, r5, r6, pc}
            val = *(int8_t *)vp;
    f5b6:	f994 0000 	ldrsb.w	r0, [r4]
    f5ba:	17c1      	asrs	r1, r0, #31
    f5bc:	e7f1      	b.n	f5a2 <conf_str_from_value+0x3e>
            val = *(int16_t *)vp;
    f5be:	f9b4 0000 	ldrsh.w	r0, [r4]
    f5c2:	17c1      	asrs	r1, r0, #31
    f5c4:	e7ed      	b.n	f5a2 <conf_str_from_value+0x3e>
            val = *(int32_t *)vp;
    f5c6:	6808      	ldr	r0, [r1, #0]
    f5c8:	17c1      	asrs	r1, r0, #31
    f5ca:	e7ea      	b.n	f5a2 <conf_str_from_value+0x3e>
        if (type == CONF_UINT8) {
    f5cc:	280b      	cmp	r0, #11
    f5ce:	d006      	beq.n	f5de <conf_str_from_value+0x7a>
        } else if (type == CONF_UINT16) {
    f5d0:	280c      	cmp	r0, #12
    f5d2:	d00f      	beq.n	f5f4 <conf_str_from_value+0x90>
        } else if (type == CONF_UINT32) {
    f5d4:	280d      	cmp	r0, #13
    f5d6:	d010      	beq.n	f5fa <conf_str_from_value+0x96>
            uval = *(uint64_t *)vp;
    f5d8:	e9d1 0100 	ldrd	r0, r1, [r1]
    f5dc:	e001      	b.n	f5e2 <conf_str_from_value+0x7e>
            uval = *(uint8_t *)vp;
    f5de:	7820      	ldrb	r0, [r4, #0]
    f5e0:	2100      	movs	r1, #0
        snprintf(buf, buf_len, "%llu", uval);
    f5e2:	e9cd 0100 	strd	r0, r1, [sp]
    f5e6:	4a09      	ldr	r2, [pc, #36]	; (f60c <conf_str_from_value+0xa8>)
    f5e8:	4619      	mov	r1, r3
    f5ea:	4630      	mov	r0, r6
    f5ec:	f020 f97d 	bl	2f8ea <snprintf>
        return buf;
    f5f0:	4630      	mov	r0, r6
    f5f2:	e7de      	b.n	f5b2 <conf_str_from_value+0x4e>
            uval = *(uint16_t *)vp;
    f5f4:	8820      	ldrh	r0, [r4, #0]
    f5f6:	2100      	movs	r1, #0
    f5f8:	e7f3      	b.n	f5e2 <conf_str_from_value+0x7e>
            uval = *(uint32_t *)vp;
    f5fa:	6808      	ldr	r0, [r1, #0]
    f5fc:	2100      	movs	r1, #0
    f5fe:	e7f0      	b.n	f5e2 <conf_str_from_value+0x7e>
        return vp;
    f600:	4608      	mov	r0, r1
}
    f602:	4770      	bx	lr
        return NULL;
    f604:	2000      	movs	r0, #0
    f606:	e7d4      	b.n	f5b2 <conf_str_from_value+0x4e>
    f608:	000319a4 	.word	0x000319a4
    f60c:	000319ac 	.word	0x000319ac

0000f610 <conf_str_from_bytes>:
{
    f610:	b538      	push	{r3, r4, r5, lr}
    if (BASE64_ENCODE_SIZE(vp_len) > buf_len) {
    f612:	1e4d      	subs	r5, r1, #1
    f614:	4c08      	ldr	r4, [pc, #32]	; (f638 <conf_str_from_bytes+0x28>)
    f616:	fb84 c405 	smull	ip, r4, r4, r5
    f61a:	eba4 74e5 	sub.w	r4, r4, r5, asr #31
    f61e:	3401      	adds	r4, #1
    f620:	ebb3 0f84 	cmp.w	r3, r4, lsl #2
    f624:	db05      	blt.n	f632 <conf_str_from_bytes+0x22>
    f626:	4614      	mov	r4, r2
    base64_encode(vp, vp_len, buf, 1);
    f628:	2301      	movs	r3, #1
    f62a:	f01c fe49 	bl	2c2c0 <base64_encode>
    return buf;
    f62e:	4620      	mov	r0, r4
}
    f630:	bd38      	pop	{r3, r4, r5, pc}
        return NULL;
    f632:	2000      	movs	r0, #0
    f634:	e7fc      	b.n	f630 <conf_str_from_bytes+0x20>
    f636:	bf00      	nop
    f638:	55555556 	.word	0x55555556

0000f63c <conf_export_cb>:
 * Executes a conf_handler's "export" callback and returns the result.
 */
int
conf_export_cb(struct conf_handler *ch, conf_export_func_t export_func,
               conf_export_tgt_t tgt)
{
    f63c:	b510      	push	{r4, lr}
    f63e:	460c      	mov	r4, r1
    f640:	4611      	mov	r1, r2
    if (ch->ch_ext) {
    f642:	7a03      	ldrb	r3, [r0, #8]
    f644:	b12b      	cbz	r3, f652 <conf_export_cb+0x16>
        if (ch->ch_export_ext != NULL) {
    f646:	6983      	ldr	r3, [r0, #24]
    f648:	b143      	cbz	r3, f65c <conf_export_cb+0x20>
            return ch->ch_export_ext(export_func, tgt, ch->ch_arg);
    f64a:	69c2      	ldr	r2, [r0, #28]
    f64c:	4620      	mov	r0, r4
    f64e:	4798      	blx	r3
    f650:	e003      	b.n	f65a <conf_export_cb+0x1e>
        }
    } else {
        if (ch->ch_export != NULL) {
    f652:	6983      	ldr	r3, [r0, #24]
    f654:	b123      	cbz	r3, f660 <conf_export_cb+0x24>
            return ch->ch_export(export_func, tgt);
    f656:	4620      	mov	r0, r4
    f658:	4798      	blx	r3
        }
    }

    return 0;
}
    f65a:	bd10      	pop	{r4, pc}
    return 0;
    f65c:	2000      	movs	r0, #0
    f65e:	e7fc      	b.n	f65a <conf_export_cb+0x1e>
    f660:	2000      	movs	r0, #0
    f662:	e7fa      	b.n	f65a <conf_export_cb+0x1e>

0000f664 <conf_set_value>:

int
conf_set_value(char *name, char *val_str)
{
    f664:	b530      	push	{r4, r5, lr}
    f666:	b08b      	sub	sp, #44	; 0x2c
    f668:	4604      	mov	r4, r0
    f66a:	460d      	mov	r5, r1
    int name_argc;
    char *name_argv[CONF_MAX_DIR_DEPTH];
    struct conf_handler *ch;
    int rc;

    conf_lock();
    f66c:	f7ff fe76 	bl	f35c <conf_lock>
    ch = conf_parse_and_lookup(name, &name_argc, name_argv);
    f670:	aa01      	add	r2, sp, #4
    f672:	a909      	add	r1, sp, #36	; 0x24
    f674:	4620      	mov	r0, r4
    f676:	f7ff febb 	bl	f3f0 <conf_parse_and_lookup>
    if (!ch) {
    f67a:	b158      	cbz	r0, f694 <conf_set_value+0x30>
        rc = OS_INVALID_PARM;
        goto out;
    }

    rc = conf_set_cb(ch, name_argc - 1, &name_argv[1], val_str);
    f67c:	462b      	mov	r3, r5
    f67e:	aa02      	add	r2, sp, #8
    f680:	9909      	ldr	r1, [sp, #36]	; 0x24
    f682:	3901      	subs	r1, #1
    f684:	f7ff fe16 	bl	f2b4 <conf_set_cb>
    f688:	4604      	mov	r4, r0

out:
    conf_unlock();
    f68a:	f7ff fe71 	bl	f370 <conf_unlock>
    return rc;
}
    f68e:	4620      	mov	r0, r4
    f690:	b00b      	add	sp, #44	; 0x2c
    f692:	bd30      	pop	{r4, r5, pc}
        rc = OS_INVALID_PARM;
    f694:	2403      	movs	r4, #3
    f696:	e7f8      	b.n	f68a <conf_set_value+0x26>

0000f698 <conf_get_value>:
 * Return value will be pointer to beginning of that buffer,
 * except for string it will pointer to beginning of string.
 */
char *
conf_get_value(char *name, char *buf, int buf_len)
{
    f698:	b570      	push	{r4, r5, r6, lr}
    f69a:	b08c      	sub	sp, #48	; 0x30
    f69c:	4604      	mov	r4, r0
    f69e:	460d      	mov	r5, r1
    f6a0:	4616      	mov	r6, r2
    int name_argc;
    char *name_argv[CONF_MAX_DIR_DEPTH];
    struct conf_handler *ch;
    char *rval = NULL;

    conf_lock();
    f6a2:	f7ff fe5b 	bl	f35c <conf_lock>
    ch = conf_parse_and_lookup(name, &name_argc, name_argv);
    f6a6:	aa03      	add	r2, sp, #12
    f6a8:	a90b      	add	r1, sp, #44	; 0x2c
    f6aa:	4620      	mov	r0, r4
    f6ac:	f7ff fea0 	bl	f3f0 <conf_parse_and_lookup>
    if (!ch) {
    f6b0:	b160      	cbz	r0, f6cc <conf_get_value+0x34>
        goto out;
    }

    rval = conf_get_cb(ch, name_argc - 1, &name_argv[1], buf, buf_len);
    f6b2:	9600      	str	r6, [sp, #0]
    f6b4:	462b      	mov	r3, r5
    f6b6:	aa04      	add	r2, sp, #16
    f6b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
    f6ba:	3901      	subs	r1, #1
    f6bc:	f7ff fde0 	bl	f280 <conf_get_cb>
    f6c0:	4604      	mov	r4, r0

out:
    conf_unlock();
    f6c2:	f7ff fe55 	bl	f370 <conf_unlock>
    return rval;
}
    f6c6:	4620      	mov	r0, r4
    f6c8:	b00c      	add	sp, #48	; 0x30
    f6ca:	bd70      	pop	{r4, r5, r6, pc}
    char *rval = NULL;
    f6cc:	2400      	movs	r4, #0
    f6ce:	e7f8      	b.n	f6c2 <conf_get_value+0x2a>

0000f6d0 <conf_commit>:


int
conf_commit(char *name)
{
    f6d0:	b530      	push	{r4, r5, lr}
    f6d2:	b08b      	sub	sp, #44	; 0x2c
    f6d4:	4604      	mov	r4, r0
    char *name_argv[CONF_MAX_DIR_DEPTH];
    struct conf_handler *ch;
    int rc;
    int rc2;

    conf_lock();
    f6d6:	f7ff fe41 	bl	f35c <conf_lock>
    if (name) {
    f6da:	b16c      	cbz	r4, f6f8 <conf_commit+0x28>
        ch = conf_parse_and_lookup(name, &name_argc, name_argv);
    f6dc:	aa01      	add	r2, sp, #4
    f6de:	a909      	add	r1, sp, #36	; 0x24
    f6e0:	4620      	mov	r0, r4
    f6e2:	f7ff fe85 	bl	f3f0 <conf_parse_and_lookup>
        if (!ch) {
    f6e6:	b1c0      	cbz	r0, f71a <conf_commit+0x4a>
            rc = OS_INVALID_PARM;
            goto out;
        }
        rc = conf_commit_cb(ch);
    f6e8:	f7ff fdf9 	bl	f2de <conf_commit_cb>
    f6ec:	4605      	mov	r5, r0
                }
            }
        }
    }
out:
    conf_unlock();
    f6ee:	f7ff fe3f 	bl	f370 <conf_unlock>
    return rc;
}
    f6f2:	4628      	mov	r0, r5
    f6f4:	b00b      	add	sp, #44	; 0x2c
    f6f6:	bd30      	pop	{r4, r5, pc}
        SLIST_FOREACH(ch, &conf_handlers, ch_list) {
    f6f8:	4b09      	ldr	r3, [pc, #36]	; (f720 <conf_commit+0x50>)
    f6fa:	681c      	ldr	r4, [r3, #0]
        rc = 0;
    f6fc:	2500      	movs	r5, #0
        SLIST_FOREACH(ch, &conf_handlers, ch_list) {
    f6fe:	e000      	b.n	f702 <conf_commit+0x32>
    f700:	6824      	ldr	r4, [r4, #0]
    f702:	2c00      	cmp	r4, #0
    f704:	d0f3      	beq.n	f6ee <conf_commit+0x1e>
            if (ch->ch_commit) {
    f706:	6963      	ldr	r3, [r4, #20]
    f708:	2b00      	cmp	r3, #0
    f70a:	d0f9      	beq.n	f700 <conf_commit+0x30>
                rc2 = conf_commit_cb(ch);
    f70c:	4620      	mov	r0, r4
    f70e:	f7ff fde6 	bl	f2de <conf_commit_cb>
                if (!rc) {
    f712:	2d00      	cmp	r5, #0
    f714:	d1f4      	bne.n	f700 <conf_commit+0x30>
                    rc = rc2;
    f716:	4605      	mov	r5, r0
    f718:	e7f2      	b.n	f700 <conf_commit+0x30>
            rc = OS_INVALID_PARM;
    f71a:	2503      	movs	r5, #3
    f71c:	e7e7      	b.n	f6ee <conf_commit+0x1e>
    f71e:	bf00      	nop
    f720:	20003488 	.word	0x20003488

0000f724 <conf_fcb_load>:
    return 0;
}

static int
conf_fcb_load(struct conf_store *cs, conf_store_load_cb cb, void *cb_arg)
{
    f724:	b500      	push	{lr}
    f726:	b083      	sub	sp, #12
    struct conf_fcb *cf = (struct conf_fcb *)cs;
    struct conf_fcb_load_cb_arg arg;
    int rc;

    arg.cb = cb;
    f728:	9100      	str	r1, [sp, #0]
    arg.cb_arg = cb_arg;
    f72a:	9201      	str	r2, [sp, #4]
    rc = fcb_walk(&cf->cf_fcb, 0, conf_fcb_load_cb, &arg);
    f72c:	466b      	mov	r3, sp
    f72e:	4a06      	ldr	r2, [pc, #24]	; (f748 <conf_fcb_load+0x24>)
    f730:	2100      	movs	r1, #0
    f732:	3008      	adds	r0, #8
    f734:	f01e fba1 	bl	2de7a <fcb_walk>
    if (rc) {
    f738:	4603      	mov	r3, r0
    f73a:	b918      	cbnz	r0, f744 <conf_fcb_load+0x20>
        return OS_EINVAL;
    }
    return OS_OK;
}
    f73c:	4618      	mov	r0, r3
    f73e:	b003      	add	sp, #12
    f740:	f85d fb04 	ldr.w	pc, [sp], #4
        return OS_EINVAL;
    f744:	2302      	movs	r3, #2
    f746:	e7f9      	b.n	f73c <conf_fcb_load+0x18>
    f748:	0000f74d 	.word	0x0000f74d

0000f74c <conf_fcb_load_cb>:
{
    f74c:	b530      	push	{r4, r5, lr}
    f74e:	b0db      	sub	sp, #364	; 0x16c
    f750:	460d      	mov	r5, r1
    len = loc->fe_data_len;
    f752:	8984      	ldrh	r4, [r0, #12]
    if (len >= sizeof(buf)) {
    f754:	f5b4 7fb0 	cmp.w	r4, #352	; 0x160
    f758:	d301      	bcc.n	f75e <conf_fcb_load_cb+0x12>
        len = sizeof(buf) - 1;
    f75a:	f240 145f 	movw	r4, #351	; 0x15f
    rc = flash_area_read(loc->fe_area, loc->fe_data_off, buf, len);
    f75e:	4623      	mov	r3, r4
    f760:	aa02      	add	r2, sp, #8
    f762:	6881      	ldr	r1, [r0, #8]
    f764:	6800      	ldr	r0, [r0, #0]
    f766:	f001 f99d 	bl	10aa4 <flash_area_read>
    if (rc) {
    f76a:	b110      	cbz	r0, f772 <conf_fcb_load_cb+0x26>
}
    f76c:	2000      	movs	r0, #0
    f76e:	b05b      	add	sp, #364	; 0x16c
    f770:	bd30      	pop	{r4, r5, pc}
    buf[len] = '\0';
    f772:	a802      	add	r0, sp, #8
    f774:	2300      	movs	r3, #0
    f776:	5503      	strb	r3, [r0, r4]
    rc = conf_line_parse(buf, &name_str, &val_str);
    f778:	466a      	mov	r2, sp
    f77a:	a901      	add	r1, sp, #4
    f77c:	f000 f918 	bl	f9b0 <conf_line_parse>
    if (rc) {
    f780:	2800      	cmp	r0, #0
    f782:	d1f3      	bne.n	f76c <conf_fcb_load_cb+0x20>
    argp->cb(name_str, val_str, argp->cb_arg);
    f784:	682b      	ldr	r3, [r5, #0]
    f786:	686a      	ldr	r2, [r5, #4]
    f788:	9900      	ldr	r1, [sp, #0]
    f78a:	9801      	ldr	r0, [sp, #4]
    f78c:	4798      	blx	r3
    return 0;
    f78e:	e7ed      	b.n	f76c <conf_fcb_load_cb+0x20>

0000f790 <conf_fcb_var_read>:

static int
conf_fcb_var_read(struct fcb_entry *loc, char *buf, char **name, char **val)
{
    f790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f792:	4604      	mov	r4, r0
    f794:	460d      	mov	r5, r1
    f796:	4616      	mov	r6, r2
    f798:	461f      	mov	r7, r3
    int rc;

    rc = flash_area_read(loc->fe_area, loc->fe_data_off, buf, loc->fe_data_len);
    f79a:	8983      	ldrh	r3, [r0, #12]
    f79c:	460a      	mov	r2, r1
    f79e:	6881      	ldr	r1, [r0, #8]
    f7a0:	6800      	ldr	r0, [r0, #0]
    f7a2:	f001 f97f 	bl	10aa4 <flash_area_read>
    if (rc) {
    f7a6:	4603      	mov	r3, r0
    f7a8:	b108      	cbz	r0, f7ae <conf_fcb_var_read+0x1e>
        return rc;
    }
    buf[loc->fe_data_len] = '\0';
    rc = conf_line_parse(buf, name, val);
    return rc;
}
    f7aa:	4618      	mov	r0, r3
    f7ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    buf[loc->fe_data_len] = '\0';
    f7ae:	89a3      	ldrh	r3, [r4, #12]
    f7b0:	2200      	movs	r2, #0
    f7b2:	54ea      	strb	r2, [r5, r3]
    rc = conf_line_parse(buf, name, val);
    f7b4:	463a      	mov	r2, r7
    f7b6:	4631      	mov	r1, r6
    f7b8:	4628      	mov	r0, r5
    f7ba:	f000 f8f9 	bl	f9b0 <conf_line_parse>
    f7be:	4603      	mov	r3, r0
    return rc;
    f7c0:	e7f3      	b.n	f7aa <conf_fcb_var_read+0x1a>

0000f7c2 <conf_fcb_compress_internal>:
static void
conf_fcb_compress_internal(struct fcb *fcb,
                           int (*copy_or_not)(const char *name, const char *val,
                                              void *cn_arg),
                           void *cn_arg)
{
    f7c2:	b5f0      	push	{r4, r5, r6, r7, lr}
    f7c4:	f5ad 7d3d 	sub.w	sp, sp, #756	; 0x2f4
    f7c8:	4604      	mov	r4, r0
    f7ca:	460e      	mov	r6, r1
    f7cc:	4617      	mov	r7, r2
    struct fcb_entry loc2;
    char *name1, *val1;
    char *name2, *val2;
    int copy;

    rc = fcb_append_to_scratch(fcb);
    f7ce:	f01e f942 	bl	2da56 <fcb_append_to_scratch>
    if (rc) {
    f7d2:	2800      	cmp	r0, #0
    f7d4:	d15d      	bne.n	f892 <conf_fcb_compress_internal+0xd0>
        return; /* XXX */
    }

    loc1.fe_area = NULL;
    f7d6:	2300      	movs	r3, #0
    f7d8:	9308      	str	r3, [sp, #32]
    loc1.fe_elem_off = 0;
    f7da:	9309      	str	r3, [sp, #36]	; 0x24
    while (fcb_getnext(fcb, &loc1) == 0) {
    f7dc:	a908      	add	r1, sp, #32
    f7de:	4620      	mov	r0, r4
    f7e0:	f01e faf6 	bl	2ddd0 <fcb_getnext>
    f7e4:	2800      	cmp	r0, #0
    f7e6:	d151      	bne.n	f88c <conf_fcb_compress_internal+0xca>
        if (loc1.fe_area != fcb->f_oldest) {
    f7e8:	9a08      	ldr	r2, [sp, #32]
    f7ea:	69a3      	ldr	r3, [r4, #24]
    f7ec:	429a      	cmp	r2, r3
    f7ee:	d14d      	bne.n	f88c <conf_fcb_compress_internal+0xca>
            break;
        }
        rc = conf_fcb_var_read(&loc1, buf1, &name1, &val1);
    f7f0:	ab02      	add	r3, sp, #8
    f7f2:	aa03      	add	r2, sp, #12
    f7f4:	a964      	add	r1, sp, #400	; 0x190
    f7f6:	a808      	add	r0, sp, #32
    f7f8:	f7ff ffca 	bl	f790 <conf_fcb_var_read>
        if (rc) {
    f7fc:	2800      	cmp	r0, #0
    f7fe:	d1ed      	bne.n	f7dc <conf_fcb_compress_internal+0x1a>
            continue;
        }
        if (!val1) {
    f800:	9b02      	ldr	r3, [sp, #8]
    f802:	2b00      	cmp	r3, #0
    f804:	d0ea      	beq.n	f7dc <conf_fcb_compress_internal+0x1a>
            continue;
        }
        loc2 = loc1;
    f806:	ad04      	add	r5, sp, #16
    f808:	ab08      	add	r3, sp, #32
    f80a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    f80c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
        copy = 1;
        while (fcb_getnext(fcb, &loc2) == 0) {
    f810:	a904      	add	r1, sp, #16
    f812:	4620      	mov	r0, r4
    f814:	f01e fadc 	bl	2ddd0 <fcb_getnext>
    f818:	b978      	cbnz	r0, f83a <conf_fcb_compress_internal+0x78>
            rc = conf_fcb_var_read(&loc2, buf2, &name2, &val2);
    f81a:	466b      	mov	r3, sp
    f81c:	aa01      	add	r2, sp, #4
    f81e:	a90c      	add	r1, sp, #48	; 0x30
    f820:	a804      	add	r0, sp, #16
    f822:	f7ff ffb5 	bl	f790 <conf_fcb_var_read>
            if (rc) {
    f826:	2800      	cmp	r0, #0
    f828:	d1f2      	bne.n	f810 <conf_fcb_compress_internal+0x4e>
                continue;
            }
            if (!strcmp(name1, name2)) {
    f82a:	9901      	ldr	r1, [sp, #4]
    f82c:	9803      	ldr	r0, [sp, #12]
    f82e:	f7ff f905 	bl	ea3c <strcmp>
    f832:	4603      	mov	r3, r0
    f834:	2800      	cmp	r0, #0
    f836:	d1eb      	bne.n	f810 <conf_fcb_compress_internal+0x4e>
    f838:	e000      	b.n	f83c <conf_fcb_compress_internal+0x7a>
        copy = 1;
    f83a:	2301      	movs	r3, #1
                copy = 0;
                break;
            }
        }
        if (!copy) {
    f83c:	2b00      	cmp	r3, #0
    f83e:	d0cd      	beq.n	f7dc <conf_fcb_compress_internal+0x1a>
            continue;
        }

        if (copy_or_not) {
    f840:	b12e      	cbz	r6, f84e <conf_fcb_compress_internal+0x8c>
            if (copy_or_not(name1, val1, cn_arg)) {
    f842:	463a      	mov	r2, r7
    f844:	9902      	ldr	r1, [sp, #8]
    f846:	9803      	ldr	r0, [sp, #12]
    f848:	47b0      	blx	r6
    f84a:	2800      	cmp	r0, #0
    f84c:	d1c6      	bne.n	f7dc <conf_fcb_compress_internal+0x1a>
            }
        }
        /*
         * Can't find one. Must copy.
         */
        rc = flash_area_read(loc1.fe_area, loc1.fe_data_off, buf1,
    f84e:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    f852:	aa64      	add	r2, sp, #400	; 0x190
    f854:	990a      	ldr	r1, [sp, #40]	; 0x28
    f856:	9808      	ldr	r0, [sp, #32]
    f858:	f001 f924 	bl	10aa4 <flash_area_read>
          loc1.fe_data_len);
        if (rc) {
    f85c:	2800      	cmp	r0, #0
    f85e:	d1bd      	bne.n	f7dc <conf_fcb_compress_internal+0x1a>
            continue;
        }
        rc = fcb_append(fcb, loc1.fe_data_len, &loc2);
    f860:	aa04      	add	r2, sp, #16
    f862:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
    f866:	4620      	mov	r0, r4
    f868:	f01e f910 	bl	2da8c <fcb_append>
        if (rc) {
    f86c:	2800      	cmp	r0, #0
    f86e:	d1b5      	bne.n	f7dc <conf_fcb_compress_internal+0x1a>
            continue;
        }
        rc = flash_area_write(loc2.fe_area, loc2.fe_data_off, buf1,
    f870:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    f874:	aa64      	add	r2, sp, #400	; 0x190
    f876:	9906      	ldr	r1, [sp, #24]
    f878:	9804      	ldr	r0, [sp, #16]
    f87a:	f001 f926 	bl	10aca <flash_area_write>
          loc1.fe_data_len);
        if (rc) {
    f87e:	2800      	cmp	r0, #0
    f880:	d1ac      	bne.n	f7dc <conf_fcb_compress_internal+0x1a>
            continue;
        }
        fcb_append_finish(fcb, &loc2);
    f882:	a904      	add	r1, sp, #16
    f884:	4620      	mov	r0, r4
    f886:	f01e f97f 	bl	2db88 <fcb_append_finish>
    f88a:	e7a7      	b.n	f7dc <conf_fcb_compress_internal+0x1a>
    }
    rc = fcb_rotate(fcb);
    f88c:	4620      	mov	r0, r4
    f88e:	f01e fab9 	bl	2de04 <fcb_rotate>
    if (rc) {
        /* XXXX */
        ;
    }
}
    f892:	f50d 7d3d 	add.w	sp, sp, #756	; 0x2f4
    f896:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000f898 <conf_fcb_append>:

static int
conf_fcb_append(struct fcb *fcb, char *buf, int len)
{
    f898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f89c:	b084      	sub	sp, #16
    f89e:	4605      	mov	r5, r0
    f8a0:	4688      	mov	r8, r1
    f8a2:	4617      	mov	r7, r2
    int rc;
    int i;
    struct fcb_entry loc;

    for (i = 0; i < 10; i++) {
    f8a4:	2400      	movs	r4, #0
    f8a6:	e005      	b.n	f8b4 <conf_fcb_append+0x1c>
            break;
        }
        if (fcb->f_scratch_cnt == 0) {
            return OS_ENOMEM;
        }
        conf_fcb_compress_internal(fcb, NULL, NULL);
    f8a8:	2200      	movs	r2, #0
    f8aa:	4611      	mov	r1, r2
    f8ac:	4628      	mov	r0, r5
    f8ae:	f7ff ff88 	bl	f7c2 <conf_fcb_compress_internal>
    for (i = 0; i < 10; i++) {
    f8b2:	3401      	adds	r4, #1
    f8b4:	2c09      	cmp	r4, #9
    f8b6:	dc0d      	bgt.n	f8d4 <conf_fcb_append+0x3c>
        rc = fcb_append(fcb, len, &loc);
    f8b8:	466a      	mov	r2, sp
    f8ba:	b2b9      	uxth	r1, r7
    f8bc:	4628      	mov	r0, r5
    f8be:	f01e f8e5 	bl	2da8c <fcb_append>
    f8c2:	4606      	mov	r6, r0
        if (rc != FCB_ERR_NOSPACE) {
    f8c4:	f110 0f04 	cmn.w	r0, #4
    f8c8:	d104      	bne.n	f8d4 <conf_fcb_append+0x3c>
        if (fcb->f_scratch_cnt == 0) {
    f8ca:	79ab      	ldrb	r3, [r5, #6]
    f8cc:	2b00      	cmp	r3, #0
    f8ce:	d1eb      	bne.n	f8a8 <conf_fcb_append+0x10>
            return OS_ENOMEM;
    f8d0:	2401      	movs	r4, #1
    f8d2:	e00e      	b.n	f8f2 <conf_fcb_append+0x5a>
    }
    if (rc) {
    f8d4:	b966      	cbnz	r6, f8f0 <conf_fcb_append+0x58>
        return OS_EINVAL;
    }
    rc = flash_area_write(loc.fe_area, loc.fe_data_off, buf, len);
    f8d6:	463b      	mov	r3, r7
    f8d8:	4642      	mov	r2, r8
    f8da:	9902      	ldr	r1, [sp, #8]
    f8dc:	9800      	ldr	r0, [sp, #0]
    f8de:	f001 f8f4 	bl	10aca <flash_area_write>
    if (rc) {
    f8e2:	4604      	mov	r4, r0
    f8e4:	b948      	cbnz	r0, f8fa <conf_fcb_append+0x62>
        return OS_EINVAL;
    }
    fcb_append_finish(fcb, &loc);
    f8e6:	4669      	mov	r1, sp
    f8e8:	4628      	mov	r0, r5
    f8ea:	f01e f94d 	bl	2db88 <fcb_append_finish>
    return OS_OK;
    f8ee:	e000      	b.n	f8f2 <conf_fcb_append+0x5a>
        return OS_EINVAL;
    f8f0:	2402      	movs	r4, #2
}
    f8f2:	4620      	mov	r0, r4
    f8f4:	b004      	add	sp, #16
    f8f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return OS_EINVAL;
    f8fa:	2402      	movs	r4, #2
    f8fc:	e7f9      	b.n	f8f2 <conf_fcb_append+0x5a>
	...

0000f900 <conf_fcb_src>:
{
    f900:	b570      	push	{r4, r5, r6, lr}
    f902:	4604      	mov	r4, r0
    cf->cf_fcb.f_version = CONF_FCB_VERS;
    f904:	2301      	movs	r3, #1
    f906:	7303      	strb	r3, [r0, #12]
    if (cf->cf_fcb.f_sector_cnt > 1) {
    f908:	7b43      	ldrb	r3, [r0, #13]
    f90a:	2b01      	cmp	r3, #1
    f90c:	d915      	bls.n	f93a <conf_fcb_src+0x3a>
        cf->cf_fcb.f_scratch_cnt = 1;
    f90e:	2301      	movs	r3, #1
    f910:	7383      	strb	r3, [r0, #14]
        rc = fcb_init(&cf->cf_fcb);
    f912:	f104 0508 	add.w	r5, r4, #8
    f916:	4628      	mov	r0, r5
    f918:	f01d ffb7 	bl	2d88a <fcb_init>
        if (rc) {
    f91c:	4606      	mov	r6, r0
    f91e:	b9b0      	cbnz	r0, f94e <conf_fcb_src+0x4e>
        if (cf->cf_fcb.f_scratch_cnt &&
    f920:	7ba3      	ldrb	r3, [r4, #14]
    f922:	b16b      	cbz	r3, f940 <conf_fcb_src+0x40>
            fcb_free_sector_cnt(&cf->cf_fcb) < 1) {
    f924:	4628      	mov	r0, r5
    f926:	f01d ff2c 	bl	2d782 <fcb_free_sector_cnt>
        if (cf->cf_fcb.f_scratch_cnt &&
    f92a:	2800      	cmp	r0, #0
    f92c:	dc08      	bgt.n	f940 <conf_fcb_src+0x40>
            flash_area_erase(cf->cf_fcb.f_active.fe_area, 0,
    f92e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    f930:	6882      	ldr	r2, [r0, #8]
    f932:	2100      	movs	r1, #0
    f934:	f001 f8dc 	bl	10af0 <flash_area_erase>
        rc = fcb_init(&cf->cf_fcb);
    f938:	e7eb      	b.n	f912 <conf_fcb_src+0x12>
        cf->cf_fcb.f_scratch_cnt = 0;
    f93a:	2300      	movs	r3, #0
    f93c:	7383      	strb	r3, [r0, #14]
    f93e:	e7e8      	b.n	f912 <conf_fcb_src+0x12>
    cf->cf_store.cs_itf = &conf_fcb_itf;
    f940:	4b04      	ldr	r3, [pc, #16]	; (f954 <conf_fcb_src+0x54>)
    f942:	6063      	str	r3, [r4, #4]
    conf_src_register(&cf->cf_store);
    f944:	4620      	mov	r0, r4
    f946:	f7ff fbdd 	bl	f104 <conf_src_register>
}
    f94a:	4630      	mov	r0, r6
    f94c:	bd70      	pop	{r4, r5, r6, pc}
            return OS_INVALID_PARM;
    f94e:	2603      	movs	r6, #3
    f950:	e7fb      	b.n	f94a <conf_fcb_src+0x4a>
    f952:	bf00      	nop
    f954:	20000218 	.word	0x20000218

0000f958 <conf_fcb_dst>:
{
    f958:	b508      	push	{r3, lr}
    cf->cf_store.cs_itf = &conf_fcb_itf;
    f95a:	4b03      	ldr	r3, [pc, #12]	; (f968 <conf_fcb_dst+0x10>)
    f95c:	6043      	str	r3, [r0, #4]
    conf_dst_register(&cf->cf_store);
    f95e:	f7ff fbe5 	bl	f12c <conf_dst_register>
}
    f962:	2000      	movs	r0, #0
    f964:	bd08      	pop	{r3, pc}
    f966:	bf00      	nop
    f968:	20000218 	.word	0x20000218

0000f96c <conf_fcb_kv_save>:
conf_fcb_kv_save(struct fcb *fcb, const char *name, const char *value)
{
    char buf[CONF_MAX_NAME_LEN + CONF_MAX_VAL_LEN + 32];
    int len;

    if (!name) {
    f96c:	b1a9      	cbz	r1, f99a <conf_fcb_kv_save+0x2e>
{
    f96e:	b530      	push	{r4, r5, lr}
    f970:	b0d9      	sub	sp, #356	; 0x164
    f972:	4613      	mov	r3, r2
    f974:	4605      	mov	r5, r0
        return OS_INVALID_PARM;
    }

    len = conf_line_make(buf, sizeof(buf), name, value);
    f976:	460a      	mov	r2, r1
    f978:	f44f 71b0 	mov.w	r1, #352	; 0x160
    f97c:	4668      	mov	r0, sp
    f97e:	f000 f863 	bl	fa48 <conf_line_make>
    if (len < 0 || len + 2 > sizeof(buf)) {
    f982:	1e02      	subs	r2, r0, #0
    f984:	db0b      	blt.n	f99e <conf_fcb_kv_save+0x32>
    f986:	1c93      	adds	r3, r2, #2
    f988:	f5b3 7fb0 	cmp.w	r3, #352	; 0x160
    f98c:	d809      	bhi.n	f9a2 <conf_fcb_kv_save+0x36>
        return OS_INVALID_PARM;
    }
    return conf_fcb_append(fcb, buf, len);
    f98e:	4669      	mov	r1, sp
    f990:	4628      	mov	r0, r5
    f992:	f7ff ff81 	bl	f898 <conf_fcb_append>
}
    f996:	b059      	add	sp, #356	; 0x164
    f998:	bd30      	pop	{r4, r5, pc}
        return OS_INVALID_PARM;
    f99a:	2003      	movs	r0, #3
}
    f99c:	4770      	bx	lr
        return OS_INVALID_PARM;
    f99e:	2003      	movs	r0, #3
    f9a0:	e7f9      	b.n	f996 <conf_fcb_kv_save+0x2a>
    f9a2:	2003      	movs	r0, #3
    f9a4:	e7f7      	b.n	f996 <conf_fcb_kv_save+0x2a>

0000f9a6 <conf_fcb_save>:
{
    f9a6:	b508      	push	{r3, lr}
    return conf_fcb_kv_save(&cf->cf_fcb, name, value);
    f9a8:	3008      	adds	r0, #8
    f9aa:	f7ff ffdf 	bl	f96c <conf_fcb_kv_save>
}
    f9ae:	bd08      	pop	{r3, pc}

0000f9b0 <conf_line_parse>:
#include "config/config.h"
#include "config_priv.h"

int
conf_line_parse(char *buf, char **namep, char **valp)
{
    f9b0:	b410      	push	{r4}
        FIND_NAME_END,
        FIND_VAL,
        FIND_VAL_END
    } state = FIND_NAME;

    *valp = NULL;
    f9b2:	2400      	movs	r4, #0
    f9b4:	6014      	str	r4, [r2, #0]
    for (cp = buf; *cp != '\0'; cp++) {
    f9b6:	e017      	b.n	f9e8 <conf_line_parse+0x38>
	return __c < 0x20;
}

__extern_inline int isspace(int __c)
{
	return __c == ' ' || __c == '\n' || __c == '\t' || __c == '\r';
    f9b8:	2b20      	cmp	r3, #32
    f9ba:	d014      	beq.n	f9e6 <conf_line_parse+0x36>
    f9bc:	2b0a      	cmp	r3, #10
    f9be:	d012      	beq.n	f9e6 <conf_line_parse+0x36>
    f9c0:	2b09      	cmp	r3, #9
    f9c2:	d010      	beq.n	f9e6 <conf_line_parse+0x36>
    f9c4:	2b0d      	cmp	r3, #13
    f9c6:	d00e      	beq.n	f9e6 <conf_line_parse+0x36>
        switch (state) {
        case FIND_NAME:
            if (!isspace((unsigned char)*cp)) {
                *namep = cp;
    f9c8:	6008      	str	r0, [r1, #0]
                state = FIND_NAME_END;
    f9ca:	2401      	movs	r4, #1
    f9cc:	e00b      	b.n	f9e6 <conf_line_parse+0x36>
            }
            break;
        case FIND_NAME_END:
            if (*cp == '=') {
    f9ce:	2b3d      	cmp	r3, #61	; 0x3d
    f9d0:	d01a      	beq.n	fa08 <conf_line_parse+0x58>
    f9d2:	2b20      	cmp	r3, #32
    f9d4:	d005      	beq.n	f9e2 <conf_line_parse+0x32>
    f9d6:	2b0a      	cmp	r3, #10
    f9d8:	d003      	beq.n	f9e2 <conf_line_parse+0x32>
    f9da:	2b09      	cmp	r3, #9
    f9dc:	d001      	beq.n	f9e2 <conf_line_parse+0x32>
    f9de:	2b0d      	cmp	r3, #13
    f9e0:	d101      	bne.n	f9e6 <conf_line_parse+0x36>
                *cp = '\0';
                state = FIND_VAL;
            } else if (isspace((unsigned char)*cp)) {
                *cp = '\0';
    f9e2:	2300      	movs	r3, #0
    f9e4:	7003      	strb	r3, [r0, #0]
    for (cp = buf; *cp != '\0'; cp++) {
    f9e6:	3001      	adds	r0, #1
    f9e8:	7803      	ldrb	r3, [r0, #0]
    f9ea:	b313      	cbz	r3, fa32 <conf_line_parse+0x82>
        switch (state) {
    f9ec:	2c03      	cmp	r4, #3
    f9ee:	d8fa      	bhi.n	f9e6 <conf_line_parse+0x36>
    f9f0:	f20f 0c04 	addw	ip, pc, #4
    f9f4:	f85c f024 	ldr.w	pc, [ip, r4, lsl #2]
    f9f8:	0000f9b9 	.word	0x0000f9b9
    f9fc:	0000f9cf 	.word	0x0000f9cf
    fa00:	0000fa11 	.word	0x0000fa11
    fa04:	0000fa27 	.word	0x0000fa27
                *cp = '\0';
    fa08:	2300      	movs	r3, #0
    fa0a:	7003      	strb	r3, [r0, #0]
                state = FIND_VAL;
    fa0c:	2402      	movs	r4, #2
    fa0e:	e7ea      	b.n	f9e6 <conf_line_parse+0x36>
    fa10:	2b20      	cmp	r3, #32
    fa12:	d0e8      	beq.n	f9e6 <conf_line_parse+0x36>
    fa14:	2b0a      	cmp	r3, #10
    fa16:	d0e6      	beq.n	f9e6 <conf_line_parse+0x36>
    fa18:	2b09      	cmp	r3, #9
    fa1a:	d0e4      	beq.n	f9e6 <conf_line_parse+0x36>
    fa1c:	2b0d      	cmp	r3, #13
    fa1e:	d0e2      	beq.n	f9e6 <conf_line_parse+0x36>
            }
            break;
        case FIND_VAL:
            if (!isspace((unsigned char)*cp)) {
                *valp = cp;
    fa20:	6010      	str	r0, [r2, #0]
                state = FIND_VAL_END;
    fa22:	2403      	movs	r4, #3
    fa24:	e7df      	b.n	f9e6 <conf_line_parse+0x36>
	    (__c >= '{' && __c <= '~');
}

__extern_inline int isprint(int __c)
{
	return (__c >= 0x20 && __c <= 0x7e);
    fa26:	3b20      	subs	r3, #32
            }
            break;
        case FIND_VAL_END:
            if (!isprint((unsigned char)*cp)) {
    fa28:	2b5e      	cmp	r3, #94	; 0x5e
    fa2a:	d9dc      	bls.n	f9e6 <conf_line_parse+0x36>
                *cp = '\0';
    fa2c:	2300      	movs	r3, #0
    fa2e:	7003      	strb	r3, [r0, #0]
    fa30:	e7d9      	b.n	f9e6 <conf_line_parse+0x36>
            }
            break;
        }
    }
    if (state == FIND_VAL_END || state == FIND_VAL) {
    fa32:	3c02      	subs	r4, #2
    fa34:	b2e4      	uxtb	r4, r4
    fa36:	2c01      	cmp	r4, #1
    fa38:	d802      	bhi.n	fa40 <conf_line_parse+0x90>
        return 0;
    fa3a:	2000      	movs	r0, #0
    } else {
        return -1;
    }
}
    fa3c:	bc10      	pop	{r4}
    fa3e:	4770      	bx	lr
        return -1;
    fa40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    fa44:	e7fa      	b.n	fa3c <conf_line_parse+0x8c>
    fa46:	bf00      	nop

0000fa48 <conf_line_make>:

int
conf_line_make(char *dst, int dlen, const char *name, const char *value)
{
    fa48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    fa4c:	4606      	mov	r6, r0
    fa4e:	4689      	mov	r9, r1
    fa50:	4690      	mov	r8, r2
    fa52:	461f      	mov	r7, r3
    int nlen;
    int vlen;
    int off;

    nlen = strlen(name);
    fa54:	4610      	mov	r0, r2
    fa56:	f7ff f841 	bl	eadc <strlen>
    fa5a:	4605      	mov	r5, r0
    if (value) {
    fa5c:	b1e7      	cbz	r7, fa98 <conf_line_make+0x50>
        vlen = strlen(value);
    fa5e:	4638      	mov	r0, r7
    fa60:	f7ff f83c 	bl	eadc <strlen>
    fa64:	4604      	mov	r4, r0
    } else {
        vlen = 0;
    }
    if (nlen + vlen + 2 > dlen) {
    fa66:	1963      	adds	r3, r4, r5
    fa68:	3302      	adds	r3, #2
    fa6a:	454b      	cmp	r3, r9
    fa6c:	dc16      	bgt.n	fa9c <conf_line_make+0x54>
        return -1;
    }
    memcpy(dst, name, nlen);
    fa6e:	462a      	mov	r2, r5
    fa70:	4641      	mov	r1, r8
    fa72:	4630      	mov	r0, r6
    fa74:	f7fe ff94 	bl	e9a0 <memcpy>
    off = nlen;
    dst[off++] = '=';
    fa78:	f105 0801 	add.w	r8, r5, #1
    fa7c:	233d      	movs	r3, #61	; 0x3d
    fa7e:	5573      	strb	r3, [r6, r5]

    memcpy(dst + off, value, vlen);
    fa80:	4622      	mov	r2, r4
    fa82:	4639      	mov	r1, r7
    fa84:	eb06 0008 	add.w	r0, r6, r8
    fa88:	f7fe ff8a 	bl	e9a0 <memcpy>
    off += vlen;
    fa8c:	eb04 0008 	add.w	r0, r4, r8
    dst[off] = '\0';
    fa90:	2300      	movs	r3, #0
    fa92:	5433      	strb	r3, [r6, r0]

    return off;
}
    fa94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        vlen = 0;
    fa98:	2400      	movs	r4, #0
    fa9a:	e7e4      	b.n	fa66 <conf_line_make+0x1e>
        return -1;
    fa9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    faa0:	e7f8      	b.n	fa94 <conf_line_make+0x4c>
	...

0000faa4 <conf_mgmt_write>:
    return 0;
}

static int
conf_mgmt_write(struct mgmt_ctxt *cb)
{
    faa4:	b570      	push	{r4, r5, r6, lr}
    faa6:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
    faaa:	4606      	mov	r6, r0
    int rc;
    char name_str[CONF_MAX_NAME_LEN];
    char val_str[CONF_MAX_VAL_LEN];
    bool do_save = false;
    faac:	f10d 05c7 	add.w	r5, sp, #199	; 0xc7
    fab0:	2400      	movs	r4, #0
    fab2:	f88d 40c7 	strb.w	r4, [sp, #199]	; 0xc7
    const struct cbor_attr_t val_attr[] = {
    fab6:	22bc      	movs	r2, #188	; 0xbc
    fab8:	4621      	mov	r1, r4
    faba:	a801      	add	r0, sp, #4
    fabc:	f7fe ff98 	bl	e9f0 <memset>
    fac0:	4b24      	ldr	r3, [pc, #144]	; (fb54 <conf_mgmt_write+0xb0>)
    fac2:	9300      	str	r3, [sp, #0]
    fac4:	2304      	movs	r3, #4
    fac6:	f88d 3004 	strb.w	r3, [sp, #4]
    faca:	aa72      	add	r2, sp, #456	; 0x1c8
    facc:	9202      	str	r2, [sp, #8]
    face:	2240      	movs	r2, #64	; 0x40
    fad0:	920a      	str	r2, [sp, #40]	; 0x28
    fad2:	4a21      	ldr	r2, [pc, #132]	; (fb58 <conf_mgmt_write+0xb4>)
    fad4:	920c      	str	r2, [sp, #48]	; 0x30
    fad6:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
    fada:	ab32      	add	r3, sp, #200	; 0xc8
    fadc:	930e      	str	r3, [sp, #56]	; 0x38
    fade:	f44f 7280 	mov.w	r2, #256	; 0x100
    fae2:	9216      	str	r2, [sp, #88]	; 0x58
    fae4:	4a1d      	ldr	r2, [pc, #116]	; (fb5c <conf_mgmt_write+0xb8>)
    fae6:	9218      	str	r2, [sp, #96]	; 0x60
    fae8:	2205      	movs	r2, #5
    faea:	f88d 2064 	strb.w	r2, [sp, #100]	; 0x64
    faee:	951a      	str	r5, [sp, #104]	; 0x68
        [3] = {
            .attribute = NULL
        }
    };

    name_str[0] = '\0';
    faf0:	f88d 41c8 	strb.w	r4, [sp, #456]	; 0x1c8
    val_str[0] = '\0';
    faf4:	f88d 40c8 	strb.w	r4, [sp, #200]	; 0xc8

    rc = cbor_read_object(&cb->it, val_attr);
    faf8:	4669      	mov	r1, sp
    fafa:	f106 001c 	add.w	r0, r6, #28
    fafe:	f003 f852 	bl	12ba6 <cbor_read_object>
    if (rc) {
    fb02:	b9e8      	cbnz	r0, fb40 <conf_mgmt_write+0x9c>
        return MGMT_ERR_EINVAL;
    }

    if (name_str[0] != '\0') {
    fb04:	f89d 31c8 	ldrb.w	r3, [sp, #456]	; 0x1c8
    fb08:	b13b      	cbz	r3, fb1a <conf_mgmt_write+0x76>
        if (val_str[0] != '\0') {
    fb0a:	f89d 30c8 	ldrb.w	r3, [sp, #200]	; 0xc8
    fb0e:	b193      	cbz	r3, fb36 <conf_mgmt_write+0x92>
            rc = conf_set_value(name_str, val_str);
    fb10:	a932      	add	r1, sp, #200	; 0xc8
    fb12:	a872      	add	r0, sp, #456	; 0x1c8
    fb14:	f7ff fda6 	bl	f664 <conf_set_value>
        } else {
            rc = conf_set_value(name_str, NULL);
        }
        if (rc) {
    fb18:	b9b8      	cbnz	r0, fb4a <conf_mgmt_write+0xa6>
            return MGMT_ERR_EINVAL;
        }
    }
    rc = conf_commit(NULL);
    fb1a:	2000      	movs	r0, #0
    fb1c:	f7ff fdd8 	bl	f6d0 <conf_commit>
    if (rc) {
    fb20:	4603      	mov	r3, r0
    fb22:	b9a0      	cbnz	r0, fb4e <conf_mgmt_write+0xaa>
        return MGMT_ERR_EINVAL;
    }
    if (do_save) {
    fb24:	f89d 20c7 	ldrb.w	r2, [sp, #199]	; 0xc7
    fb28:	b15a      	cbz	r2, fb42 <conf_mgmt_write+0x9e>
        rc = conf_save();
    fb2a:	f7ff fb73 	bl	f214 <conf_save>
        if (rc) {
    fb2e:	4603      	mov	r3, r0
    fb30:	b138      	cbz	r0, fb42 <conf_mgmt_write+0x9e>
            return MGMT_ERR_EINVAL;
    fb32:	2303      	movs	r3, #3
    fb34:	e005      	b.n	fb42 <conf_mgmt_write+0x9e>
            rc = conf_set_value(name_str, NULL);
    fb36:	2100      	movs	r1, #0
    fb38:	a872      	add	r0, sp, #456	; 0x1c8
    fb3a:	f7ff fd93 	bl	f664 <conf_set_value>
    fb3e:	e7eb      	b.n	fb18 <conf_mgmt_write+0x74>
        return MGMT_ERR_EINVAL;
    fb40:	2303      	movs	r3, #3
        }
    }
    return 0;
}
    fb42:	4618      	mov	r0, r3
    fb44:	f50d 7d02 	add.w	sp, sp, #520	; 0x208
    fb48:	bd70      	pop	{r4, r5, r6, pc}
            return MGMT_ERR_EINVAL;
    fb4a:	2303      	movs	r3, #3
    fb4c:	e7f9      	b.n	fb42 <conf_mgmt_write+0x9e>
        return MGMT_ERR_EINVAL;
    fb4e:	2303      	movs	r3, #3
    fb50:	e7f7      	b.n	fb42 <conf_mgmt_write+0x9e>
    fb52:	bf00      	nop
    fb54:	00032d6c 	.word	0x00032d6c
    fb58:	000319bc 	.word	0x000319bc
    fb5c:	000319c0 	.word	0x000319c0

0000fb60 <conf_mgmt_read>:
{
    fb60:	b5f0      	push	{r4, r5, r6, r7, lr}
    fb62:	b0e9      	sub	sp, #420	; 0x1a4
    fb64:	4604      	mov	r4, r0
    const struct cbor_attr_t attr[2] = {
    fb66:	225c      	movs	r2, #92	; 0x5c
    fb68:	2100      	movs	r1, #0
    fb6a:	a801      	add	r0, sp, #4
    fb6c:	f7fe ff40 	bl	e9f0 <memset>
    fb70:	4b18      	ldr	r3, [pc, #96]	; (fbd4 <conf_mgmt_read+0x74>)
    fb72:	9300      	str	r3, [sp, #0]
    fb74:	2304      	movs	r3, #4
    fb76:	f88d 3004 	strb.w	r3, [sp, #4]
    fb7a:	ab58      	add	r3, sp, #352	; 0x160
    fb7c:	9302      	str	r3, [sp, #8]
    fb7e:	2340      	movs	r3, #64	; 0x40
    fb80:	930a      	str	r3, [sp, #40]	; 0x28
    rc = cbor_read_object(&cb->it, attr);
    fb82:	4669      	mov	r1, sp
    fb84:	f104 001c 	add.w	r0, r4, #28
    fb88:	f003 f80d 	bl	12ba6 <cbor_read_object>
    if (rc) {
    fb8c:	b9d8      	cbnz	r0, fbc6 <conf_mgmt_read+0x66>
    fb8e:	4605      	mov	r5, r0
    val = conf_get_value(name_str, val_str, sizeof(val_str));
    fb90:	f44f 7280 	mov.w	r2, #256	; 0x100
    fb94:	a918      	add	r1, sp, #96	; 0x60
    fb96:	a858      	add	r0, sp, #352	; 0x160
    fb98:	f7ff fd7e 	bl	f698 <conf_get_value>
    if (!val) {
    fb9c:	4606      	mov	r6, r0
    fb9e:	b1b0      	cbz	r0, fbce <conf_mgmt_read+0x6e>
    fba0:	2203      	movs	r2, #3
    fba2:	490d      	ldr	r1, [pc, #52]	; (fbd8 <conf_mgmt_read+0x78>)
    fba4:	4620      	mov	r0, r4
    fba6:	f01c fe46 	bl	2c836 <cbor_encode_text_string>
    fbaa:	4607      	mov	r7, r0
    fbac:	4630      	mov	r0, r6
    fbae:	f7fe ff95 	bl	eadc <strlen>
    fbb2:	4602      	mov	r2, r0
    fbb4:	4631      	mov	r1, r6
    fbb6:	4620      	mov	r0, r4
    fbb8:	f01c fe3d 	bl	2c836 <cbor_encode_text_string>
    if (g_err) {
    fbbc:	ea50 0307 	orrs.w	r3, r0, r7
    fbc0:	d002      	beq.n	fbc8 <conf_mgmt_read+0x68>
        return MGMT_ERR_ENOMEM;
    fbc2:	2502      	movs	r5, #2
    fbc4:	e000      	b.n	fbc8 <conf_mgmt_read+0x68>
        return MGMT_ERR_EINVAL;
    fbc6:	2503      	movs	r5, #3
}
    fbc8:	4628      	mov	r0, r5
    fbca:	b069      	add	sp, #420	; 0x1a4
    fbcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return MGMT_ERR_EINVAL;
    fbce:	2503      	movs	r5, #3
    fbd0:	e7fa      	b.n	fbc8 <conf_mgmt_read+0x68>
    fbd2:	bf00      	nop
    fbd4:	00032d6c 	.word	0x00032d6c
    fbd8:	000319bc 	.word	0x000319bc

0000fbdc <conf_mgmt_register>:

int
conf_mgmt_register(void)
{
    fbdc:	b508      	push	{r3, lr}
     mgmt_register_group(&conf_mgmt_group);
    fbde:	4802      	ldr	r0, [pc, #8]	; (fbe8 <conf_mgmt_register+0xc>)
    fbe0:	f004 f9e2 	bl	13fa8 <mgmt_register_group>
     return 0;
}
    fbe4:	2000      	movs	r0, #0
    fbe6:	bd08      	pop	{r3, pc}
    fbe8:	20000228 	.word	0x20000228

0000fbec <add_ascii_num_with_char>:
 * Helper function for terminal escape sequences with number parameter.
 * It adds ascii encoded number plus one character.
 */
static char *
add_ascii_num_with_char(char *str, unsigned int num, char c)
{
    fbec:	b4f0      	push	{r4, r5, r6, r7}
    char *p = str;
    fbee:	4604      	mov	r4, r0
    fbf0:	e000      	b.n	fbf4 <add_ascii_num_with_char+0x8>
    char *s;
    char tmp;

    /* Put digits in reverse order first. */
    do {
        *p++ = (num % 10) + '0';
    fbf2:	4634      	mov	r4, r6
    fbf4:	4b11      	ldr	r3, [pc, #68]	; (fc3c <add_ascii_num_with_char+0x50>)
    fbf6:	fba3 5301 	umull	r5, r3, r3, r1
    fbfa:	08db      	lsrs	r3, r3, #3
    fbfc:	461d      	mov	r5, r3
    fbfe:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    fc02:	005e      	lsls	r6, r3, #1
    fc04:	1b8b      	subs	r3, r1, r6
    fc06:	1c66      	adds	r6, r4, #1
    fc08:	3330      	adds	r3, #48	; 0x30
    fc0a:	7023      	strb	r3, [r4, #0]
        num /= 10;
    fc0c:	4629      	mov	r1, r5
    } while (num);
    fc0e:	2d00      	cmp	r5, #0
    fc10:	d1ef      	bne.n	fbf2 <add_ascii_num_with_char+0x6>
    s = str;
    str = p;
    --p;
    fc12:	4623      	mov	r3, r4
    fc14:	e009      	b.n	fc2a <add_ascii_num_with_char+0x3e>
    /* Revers order of characters, to get correct number representation */
    while (s < p) {
       tmp = *s;
    fc16:	4605      	mov	r5, r0
    fc18:	f815 6b01 	ldrb.w	r6, [r5], #1
       *s++ = *p;
    fc1c:	4619      	mov	r1, r3
    fc1e:	f811 7901 	ldrb.w	r7, [r1], #-1
    fc22:	7007      	strb	r7, [r0, #0]
       *p-- = tmp;
    fc24:	701e      	strb	r6, [r3, #0]
       *s++ = *p;
    fc26:	4628      	mov	r0, r5
       *p-- = tmp;
    fc28:	460b      	mov	r3, r1
    while (s < p) {
    fc2a:	4283      	cmp	r3, r0
    fc2c:	d8f3      	bhi.n	fc16 <add_ascii_num_with_char+0x2a>
    }

    *str++ = c;
    fc2e:	7062      	strb	r2, [r4, #1]
    *str = '\0';
    fc30:	2300      	movs	r3, #0
    fc32:	70a3      	strb	r3, [r4, #2]

    return str;
}
    fc34:	1ca0      	adds	r0, r4, #2
    fc36:	bcf0      	pop	{r4, r5, r6, r7}
    fc38:	4770      	bx	lr
    fc3a:	bf00      	nop
    fc3c:	cccccccd 	.word	0xcccccccd

0000fc40 <console_handle_line>:
    esc_state &= ~ESC_ANSI;
}

static void
console_handle_line(void)
{
    fc40:	b508      	push	{r3, lr}
    cur = 0;
    fc42:	2300      	movs	r3, #0
    fc44:	4a08      	ldr	r2, [pc, #32]	; (fc68 <console_handle_line+0x28>)
    fc46:	8013      	strh	r3, [r2, #0]
    trailing_chars = 0;
    fc48:	4a08      	ldr	r2, [pc, #32]	; (fc6c <console_handle_line+0x2c>)
    fc4a:	8013      	strh	r3, [r2, #0]
    os_eventq_put(lines_queue, current_line_ev);
    fc4c:	4b08      	ldr	r3, [pc, #32]	; (fc70 <console_handle_line+0x30>)
    fc4e:	6819      	ldr	r1, [r3, #0]
    fc50:	4b08      	ldr	r3, [pc, #32]	; (fc74 <console_handle_line+0x34>)
    fc52:	6818      	ldr	r0, [r3, #0]
    fc54:	f7fd faab 	bl	d1ae <os_eventq_put>

#if MYNEWT_VAL(CONSOLE_COMPAT)
    if (console_compat_rx_cb) {
    fc58:	4b07      	ldr	r3, [pc, #28]	; (fc78 <console_handle_line+0x38>)
    fc5a:	681b      	ldr	r3, [r3, #0]
    fc5c:	b103      	cbz	r3, fc60 <console_handle_line+0x20>
        console_compat_rx_cb();
    fc5e:	4798      	blx	r3
    }
#endif

    current_line_ev = NULL;
    fc60:	4b03      	ldr	r3, [pc, #12]	; (fc70 <console_handle_line+0x30>)
    fc62:	2200      	movs	r2, #0
    fc64:	601a      	str	r2, [r3, #0]
}
    fc66:	bd08      	pop	{r3, pc}
    fc68:	20001964 	.word	0x20001964
    fc6c:	2000197a 	.word	0x2000197a
    fc70:	20001968 	.word	0x20001968
    fc74:	20001970 	.word	0x20001970
    fc78:	20001954 	.word	0x20001954

0000fc7c <console_filter_out>:
{
    fc7c:	b508      	push	{r3, lr}
    if (g_console_silence) {
    fc7e:	4b0b      	ldr	r3, [pc, #44]	; (fcac <console_filter_out+0x30>)
    fc80:	781b      	ldrb	r3, [r3, #0]
    fc82:	b973      	cbnz	r3, fca2 <console_filter_out+0x26>
    if (prompt_has_focus || g_is_output_nlip) {
    fc84:	4b0a      	ldr	r3, [pc, #40]	; (fcb0 <console_filter_out+0x34>)
    fc86:	781b      	ldrb	r3, [r3, #0]
    fc88:	b94b      	cbnz	r3, fc9e <console_filter_out+0x22>
    console_is_midline = c != '\n' && c != '\r';
    fc8a:	280a      	cmp	r0, #10
    fc8c:	d00c      	beq.n	fca8 <console_filter_out+0x2c>
    fc8e:	280d      	cmp	r0, #13
    fc90:	d008      	beq.n	fca4 <console_filter_out+0x28>
    fc92:	2201      	movs	r2, #1
    fc94:	4b07      	ldr	r3, [pc, #28]	; (fcb4 <console_filter_out+0x38>)
    fc96:	601a      	str	r2, [r3, #0]
        c = console_out_nolock(c);
    fc98:	f000 fd72 	bl	10780 <console_out_nolock>
    return c;
    fc9c:	e001      	b.n	fca2 <console_filter_out+0x26>
        return console_out_nolock(c);
    fc9e:	f000 fd6f 	bl	10780 <console_out_nolock>
}
    fca2:	bd08      	pop	{r3, pc}
    console_is_midline = c != '\n' && c != '\r';
    fca4:	2200      	movs	r2, #0
    fca6:	e7f5      	b.n	fc94 <console_filter_out+0x18>
    fca8:	2200      	movs	r2, #0
    fcaa:	e7f3      	b.n	fc94 <console_filter_out+0x18>
    fcac:	20003494 	.word	0x20003494
    fcb0:	20003495 	.word	0x20003495
    fcb4:	20003490 	.word	0x20003490

0000fcb8 <console_filter_write>:
{
    fcb8:	b570      	push	{r4, r5, r6, lr}
    fcba:	4606      	mov	r6, r0
    fcbc:	460d      	mov	r5, r1
    for (i = 0; i < cnt; i++) {
    fcbe:	2400      	movs	r4, #0
    fcc0:	42ac      	cmp	r4, r5
    fcc2:	da07      	bge.n	fcd4 <console_filter_write+0x1c>
        if (console_filter_out((int)str[i]) == EOF) {
    fcc4:	5d30      	ldrb	r0, [r6, r4]
    fcc6:	f7ff ffd9 	bl	fc7c <console_filter_out>
    fcca:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    fcce:	d001      	beq.n	fcd4 <console_filter_write+0x1c>
    for (i = 0; i < cnt; i++) {
    fcd0:	3401      	adds	r4, #1
    fcd2:	e7f5      	b.n	fcc0 <console_filter_write+0x8>
}
    fcd4:	bd70      	pop	{r4, r5, r6, pc}
	...

0000fcd8 <console_append_char>:
    return handled;
}

static int
console_append_char(char *line, uint8_t byte)
{
    fcd8:	b508      	push	{r3, lr}
    if (cur + trailing_chars >= MYNEWT_VAL(CONSOLE_MAX_INPUT_LEN) - 1) {
    fcda:	4b0d      	ldr	r3, [pc, #52]	; (fd10 <console_append_char+0x38>)
    fcdc:	881b      	ldrh	r3, [r3, #0]
    fcde:	4a0d      	ldr	r2, [pc, #52]	; (fd14 <console_append_char+0x3c>)
    fce0:	8812      	ldrh	r2, [r2, #0]
    fce2:	4413      	add	r3, r2
    fce4:	2bfe      	cmp	r3, #254	; 0xfe
    fce6:	dc0e      	bgt.n	fd06 <console_append_char+0x2e>
        return 0;
    }

    line[cur + trailing_chars] = byte;
    fce8:	54c1      	strb	r1, [r0, r3]

    if (byte == '\0') {
    fcea:	b171      	cbz	r1, fd0a <console_append_char+0x32>
        return 1;
    }

    if (echo) {
    fcec:	4b0a      	ldr	r3, [pc, #40]	; (fd18 <console_append_char+0x40>)
    fcee:	681b      	ldr	r3, [r3, #0]
    fcf0:	b92b      	cbnz	r3, fcfe <console_append_char+0x26>
        /* Echo back to console */
        console_switch_to_prompt();
        console_out_nolock(byte);
        console_switch_to_logs();
    }
    ++cur;
    fcf2:	4a07      	ldr	r2, [pc, #28]	; (fd10 <console_append_char+0x38>)
    fcf4:	8813      	ldrh	r3, [r2, #0]
    fcf6:	3301      	adds	r3, #1
    fcf8:	8013      	strh	r3, [r2, #0]
    return 1;
    fcfa:	2001      	movs	r0, #1
    fcfc:	e004      	b.n	fd08 <console_append_char+0x30>
    fcfe:	4608      	mov	r0, r1
        console_out_nolock(byte);
    fd00:	f000 fd3e 	bl	10780 <console_out_nolock>
    fd04:	e7f5      	b.n	fcf2 <console_append_char+0x1a>
        return 0;
    fd06:	2000      	movs	r0, #0
}
    fd08:	bd08      	pop	{r3, pc}
        return 1;
    fd0a:	2001      	movs	r0, #1
    fd0c:	e7fc      	b.n	fd08 <console_append_char+0x30>
    fd0e:	bf00      	nop
    fd10:	20001964 	.word	0x20001964
    fd14:	2000197a 	.word	0x2000197a
    fd18:	20000234 	.word	0x20000234

0000fd1c <console_write_nolock>:
{
    fd1c:	b570      	push	{r4, r5, r6, lr}
    fd1e:	4606      	mov	r6, r0
    fd20:	460d      	mov	r5, r1
    for (i = 0; i < cnt; i++) {
    fd22:	2400      	movs	r4, #0
    fd24:	42ac      	cmp	r4, r5
    fd26:	da07      	bge.n	fd38 <console_write_nolock+0x1c>
        if (console_out_nolock((int)str[i]) == EOF) {
    fd28:	5d30      	ldrb	r0, [r6, r4]
    fd2a:	f000 fd29 	bl	10780 <console_out_nolock>
    fd2e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    fd32:	d001      	beq.n	fd38 <console_write_nolock+0x1c>
    for (i = 0; i < cnt; i++) {
    fd34:	3401      	adds	r4, #1
    fd36:	e7f5      	b.n	fd24 <console_write_nolock+0x8>
}
    fd38:	bd70      	pop	{r4, r5, r6, pc}
	...

0000fd3c <handle_end>:
    if (trailing_chars) {
    fd3c:	4b11      	ldr	r3, [pc, #68]	; (fd84 <handle_end+0x48>)
    fd3e:	8819      	ldrh	r1, [r3, #0]
    fd40:	b901      	cbnz	r1, fd44 <handle_end+0x8>
    fd42:	4770      	bx	lr
{
    fd44:	b510      	push	{r4, lr}
    fd46:	b084      	sub	sp, #16
    char seq[14] = CSI;
    fd48:	f645 331b 	movw	r3, #23323	; 0x5b1b
    fd4c:	9300      	str	r3, [sp, #0]
    fd4e:	2300      	movs	r3, #0
    fd50:	9301      	str	r3, [sp, #4]
    fd52:	9302      	str	r3, [sp, #8]
    fd54:	f8ad 300c 	strh.w	r3, [sp, #12]
    if (count) {
    fd58:	b949      	cbnz	r1, fd6e <handle_end+0x32>
        cur += trailing_chars;
    fd5a:	490b      	ldr	r1, [pc, #44]	; (fd88 <handle_end+0x4c>)
    fd5c:	4a09      	ldr	r2, [pc, #36]	; (fd84 <handle_end+0x48>)
    fd5e:	880b      	ldrh	r3, [r1, #0]
    fd60:	8810      	ldrh	r0, [r2, #0]
    fd62:	4403      	add	r3, r0
    fd64:	800b      	strh	r3, [r1, #0]
        trailing_chars = 0;
    fd66:	2300      	movs	r3, #0
    fd68:	8013      	strh	r3, [r2, #0]
}
    fd6a:	b004      	add	sp, #16
    fd6c:	bd10      	pop	{r4, pc}
        p = add_ascii_num_with_char(seq + 2, count, 'C');
    fd6e:	466c      	mov	r4, sp
    fd70:	2243      	movs	r2, #67	; 0x43
    fd72:	f10d 0002 	add.w	r0, sp, #2
    fd76:	f7ff ff39 	bl	fbec <add_ascii_num_with_char>
        console_write_nolock(seq, p - seq);
    fd7a:	1b01      	subs	r1, r0, r4
    fd7c:	4620      	mov	r0, r4
    fd7e:	f7ff ffcd 	bl	fd1c <console_write_nolock>
    fd82:	e7ea      	b.n	fd5a <handle_end+0x1e>
    fd84:	2000197a 	.word	0x2000197a
    fd88:	20001964 	.word	0x20001964

0000fd8c <handle_home>:
    if (cur) {
    fd8c:	4b11      	ldr	r3, [pc, #68]	; (fdd4 <handle_home+0x48>)
    fd8e:	8819      	ldrh	r1, [r3, #0]
    fd90:	b901      	cbnz	r1, fd94 <handle_home+0x8>
    fd92:	4770      	bx	lr
{
    fd94:	b510      	push	{r4, lr}
    fd96:	b084      	sub	sp, #16
    char seq[14] = CSI;
    fd98:	f645 331b 	movw	r3, #23323	; 0x5b1b
    fd9c:	9300      	str	r3, [sp, #0]
    fd9e:	2300      	movs	r3, #0
    fda0:	9301      	str	r3, [sp, #4]
    fda2:	9302      	str	r3, [sp, #8]
    fda4:	f8ad 300c 	strh.w	r3, [sp, #12]
    if (count) {
    fda8:	b949      	cbnz	r1, fdbe <handle_home+0x32>
        trailing_chars += cur;
    fdaa:	490b      	ldr	r1, [pc, #44]	; (fdd8 <handle_home+0x4c>)
    fdac:	4a09      	ldr	r2, [pc, #36]	; (fdd4 <handle_home+0x48>)
    fdae:	880b      	ldrh	r3, [r1, #0]
    fdb0:	8810      	ldrh	r0, [r2, #0]
    fdb2:	4403      	add	r3, r0
    fdb4:	800b      	strh	r3, [r1, #0]
        cur = 0;
    fdb6:	2300      	movs	r3, #0
    fdb8:	8013      	strh	r3, [r2, #0]
}
    fdba:	b004      	add	sp, #16
    fdbc:	bd10      	pop	{r4, pc}
        p = add_ascii_num_with_char(seq + 2, count, 'D');
    fdbe:	466c      	mov	r4, sp
    fdc0:	2244      	movs	r2, #68	; 0x44
    fdc2:	f10d 0002 	add.w	r0, sp, #2
    fdc6:	f7ff ff11 	bl	fbec <add_ascii_num_with_char>
        console_write_nolock(seq, p - seq);
    fdca:	1b01      	subs	r1, r0, r4
    fdcc:	4620      	mov	r0, r4
    fdce:	f7ff ffa5 	bl	fd1c <console_write_nolock>
    fdd2:	e7ea      	b.n	fdaa <handle_home+0x1e>
    fdd4:	20001964 	.word	0x20001964
    fdd8:	2000197a 	.word	0x2000197a

0000fddc <del_char>:
{
    fddc:	b530      	push	{r4, r5, lr}
    fdde:	b085      	sub	sp, #20
    fde0:	4604      	mov	r4, r0
    left = trailing_chars;
    fde2:	4b17      	ldr	r3, [pc, #92]	; (fe40 <del_char+0x64>)
    fde4:	881b      	ldrh	r3, [r3, #0]
    while (left-- > 1) {
    fde6:	e005      	b.n	fdf4 <del_char+0x18>
        *pos = *(pos + 1);
    fde8:	7860      	ldrb	r0, [r4, #1]
    fdea:	f804 0b01 	strb.w	r0, [r4], #1
        console_out_nolock(*(pos++));
    fdee:	f000 fcc7 	bl	10780 <console_out_nolock>
    while (left-- > 1) {
    fdf2:	462b      	mov	r3, r5
    fdf4:	1e5d      	subs	r5, r3, #1
    fdf6:	2b01      	cmp	r3, #1
    fdf8:	dcf6      	bgt.n	fde8 <del_char+0xc>
    if (trailing_chars) {
    fdfa:	4b11      	ldr	r3, [pc, #68]	; (fe40 <del_char+0x64>)
    fdfc:	881b      	ldrh	r3, [r3, #0]
    fdfe:	b90b      	cbnz	r3, fe04 <del_char+0x28>
}
    fe00:	b005      	add	sp, #20
    fe02:	bd30      	pop	{r4, r5, pc}
        console_out_nolock(' ');
    fe04:	2020      	movs	r0, #32
    fe06:	f000 fcbb 	bl	10780 <console_out_nolock>
        cursor_backward(trailing_chars);
    fe0a:	4b0d      	ldr	r3, [pc, #52]	; (fe40 <del_char+0x64>)
    fe0c:	8819      	ldrh	r1, [r3, #0]
    char seq[14] = CSI;
    fe0e:	f645 331b 	movw	r3, #23323	; 0x5b1b
    fe12:	9300      	str	r3, [sp, #0]
    fe14:	2300      	movs	r3, #0
    fe16:	9301      	str	r3, [sp, #4]
    fe18:	9302      	str	r3, [sp, #8]
    fe1a:	f8ad 300c 	strh.w	r3, [sp, #12]
    if (count) {
    fe1e:	b921      	cbnz	r1, fe2a <del_char+0x4e>
        trailing_chars--;
    fe20:	4a07      	ldr	r2, [pc, #28]	; (fe40 <del_char+0x64>)
    fe22:	8813      	ldrh	r3, [r2, #0]
    fe24:	3b01      	subs	r3, #1
    fe26:	8013      	strh	r3, [r2, #0]
}
    fe28:	e7ea      	b.n	fe00 <del_char+0x24>
        p = add_ascii_num_with_char(seq + 2, count, 'D');
    fe2a:	466c      	mov	r4, sp
    fe2c:	2244      	movs	r2, #68	; 0x44
    fe2e:	f10d 0002 	add.w	r0, sp, #2
    fe32:	f7ff fedb 	bl	fbec <add_ascii_num_with_char>
        console_write_nolock(seq, p - seq);
    fe36:	1b01      	subs	r1, r0, r4
    fe38:	4620      	mov	r0, r4
    fe3a:	f7ff ff6f 	bl	fd1c <console_write_nolock>
    fe3e:	e7ef      	b.n	fe20 <del_char+0x44>
    fe40:	2000197a 	.word	0x2000197a

0000fe44 <handle_delete>:
{
    fe44:	b508      	push	{r3, lr}
    if (trailing_chars) {
    fe46:	4b05      	ldr	r3, [pc, #20]	; (fe5c <handle_delete+0x18>)
    fe48:	881b      	ldrh	r3, [r3, #0]
    fe4a:	b903      	cbnz	r3, fe4e <handle_delete+0xa>
}
    fe4c:	bd08      	pop	{r3, pc}
        del_char(&line[cur]);
    fe4e:	4b04      	ldr	r3, [pc, #16]	; (fe60 <handle_delete+0x1c>)
    fe50:	881b      	ldrh	r3, [r3, #0]
    fe52:	4418      	add	r0, r3
    fe54:	f7ff ffc2 	bl	fddc <del_char>
}
    fe58:	e7f8      	b.n	fe4c <handle_delete+0x8>
    fe5a:	bf00      	nop
    fe5c:	2000197a 	.word	0x2000197a
    fe60:	20001964 	.word	0x20001964

0000fe64 <handle_ansi>:
    if (esc_state & ESC_ANSI_FIRST) {
    fe64:	4b5e      	ldr	r3, [pc, #376]	; (ffe0 <handle_ansi+0x17c>)
    fe66:	681b      	ldr	r3, [r3, #0]
    fe68:	f013 0f04 	tst.w	r3, #4
    fe6c:	d044      	beq.n	fef8 <handle_ansi+0x94>
        esc_state &= ~ESC_ANSI_FIRST;
    fe6e:	f023 0304 	bic.w	r3, r3, #4
    fe72:	4a5b      	ldr	r2, [pc, #364]	; (ffe0 <handle_ansi+0x17c>)
    fe74:	6013      	str	r3, [r2, #0]
        if (!isdigit(byte)) {
    fe76:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
    fe7a:	2a09      	cmp	r2, #9
    fe7c:	d931      	bls.n	fee2 <handle_ansi+0x7e>
            ansi_val = 1;
    fe7e:	4b59      	ldr	r3, [pc, #356]	; (ffe4 <handle_ansi+0x180>)
    fe80:	2201      	movs	r2, #1
    fe82:	601a      	str	r2, [r3, #0]
{
    fe84:	b510      	push	{r4, lr}
    fe86:	b084      	sub	sp, #16
    switch (byte) {
    fe88:	2846      	cmp	r0, #70	; 0x46
    fe8a:	f000 809c 	beq.w	ffc6 <handle_ansi+0x162>
    fe8e:	d85e      	bhi.n	ff4e <handle_ansi+0xea>
    fe90:	2843      	cmp	r0, #67	; 0x43
    fe92:	d06c      	beq.n	ff6e <handle_ansi+0x10a>
    fe94:	2844      	cmp	r0, #68	; 0x44
    fe96:	f040 808f 	bne.w	ffb8 <handle_ansi+0x154>
        if (ansi_val > cur) {
    fe9a:	4b53      	ldr	r3, [pc, #332]	; (ffe8 <handle_ansi+0x184>)
    fe9c:	881b      	ldrh	r3, [r3, #0]
    fe9e:	4a51      	ldr	r2, [pc, #324]	; (ffe4 <handle_ansi+0x180>)
    fea0:	6811      	ldr	r1, [r2, #0]
    fea2:	428b      	cmp	r3, r1
    fea4:	f0c0 8088 	bcc.w	ffb8 <handle_ansi+0x154>
        trailing_chars += ansi_val;
    fea8:	b28a      	uxth	r2, r1
    feaa:	4c50      	ldr	r4, [pc, #320]	; (ffec <handle_ansi+0x188>)
    feac:	8820      	ldrh	r0, [r4, #0]
    feae:	4410      	add	r0, r2
    feb0:	8020      	strh	r0, [r4, #0]
        cur -= ansi_val;
    feb2:	1a9b      	subs	r3, r3, r2
    feb4:	4a4c      	ldr	r2, [pc, #304]	; (ffe8 <handle_ansi+0x184>)
    feb6:	8013      	strh	r3, [r2, #0]
    char seq[14] = CSI;
    feb8:	f645 331b 	movw	r3, #23323	; 0x5b1b
    febc:	9300      	str	r3, [sp, #0]
    febe:	2300      	movs	r3, #0
    fec0:	9301      	str	r3, [sp, #4]
    fec2:	9302      	str	r3, [sp, #8]
    fec4:	f8ad 300c 	strh.w	r3, [sp, #12]
    if (count) {
    fec8:	2900      	cmp	r1, #0
    feca:	d075      	beq.n	ffb8 <handle_ansi+0x154>
        p = add_ascii_num_with_char(seq + 2, count, 'D');
    fecc:	466c      	mov	r4, sp
    fece:	2244      	movs	r2, #68	; 0x44
    fed0:	f10d 0002 	add.w	r0, sp, #2
    fed4:	f7ff fe8a 	bl	fbec <add_ascii_num_with_char>
        console_write_nolock(seq, p - seq);
    fed8:	1b01      	subs	r1, r0, r4
    feda:	4620      	mov	r0, r4
    fedc:	f7ff ff1e 	bl	fd1c <console_write_nolock>
    fee0:	e06a      	b.n	ffb8 <handle_ansi+0x154>
        esc_state |= ESC_ANSI_VAL;
    fee2:	f043 0308 	orr.w	r3, r3, #8
    fee6:	4a3e      	ldr	r2, [pc, #248]	; (ffe0 <handle_ansi+0x17c>)
    fee8:	6013      	str	r3, [r2, #0]
        ansi_val = byte - '0';
    feea:	3830      	subs	r0, #48	; 0x30
    feec:	4b3d      	ldr	r3, [pc, #244]	; (ffe4 <handle_ansi+0x180>)
    feee:	6018      	str	r0, [r3, #0]
        ansi_val_2 = 0;
    fef0:	4b3f      	ldr	r3, [pc, #252]	; (fff0 <handle_ansi+0x18c>)
    fef2:	2200      	movs	r2, #0
    fef4:	601a      	str	r2, [r3, #0]
        return;
    fef6:	4770      	bx	lr
    if (esc_state & ESC_ANSI_VAL) {
    fef8:	f013 0f08 	tst.w	r3, #8
    fefc:	d0c2      	beq.n	fe84 <handle_ansi+0x20>
        if (isdigit(byte)) {
    fefe:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
    ff02:	2a09      	cmp	r2, #9
    ff04:	d814      	bhi.n	ff30 <handle_ansi+0xcc>
            if (esc_state & ESC_ANSI_VAL_2) {
    ff06:	f013 0f10 	tst.w	r3, #16
    ff0a:	d008      	beq.n	ff1e <handle_ansi+0xba>
                ansi_val_2 *= 10;
    ff0c:	4938      	ldr	r1, [pc, #224]	; (fff0 <handle_ansi+0x18c>)
    ff0e:	680a      	ldr	r2, [r1, #0]
    ff10:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    ff14:	0053      	lsls	r3, r2, #1
                ansi_val_2 += byte - '0';
    ff16:	4403      	add	r3, r0
    ff18:	3b30      	subs	r3, #48	; 0x30
    ff1a:	600b      	str	r3, [r1, #0]
    ff1c:	4770      	bx	lr
                ansi_val *= 10;
    ff1e:	4931      	ldr	r1, [pc, #196]	; (ffe4 <handle_ansi+0x180>)
    ff20:	680a      	ldr	r2, [r1, #0]
    ff22:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    ff26:	0053      	lsls	r3, r2, #1
                ansi_val += byte - '0';
    ff28:	4403      	add	r3, r0
    ff2a:	3b30      	subs	r3, #48	; 0x30
    ff2c:	600b      	str	r3, [r1, #0]
    ff2e:	4770      	bx	lr
        if (byte == ';' && !(esc_state & ESC_ANSI_VAL_2)) {
    ff30:	283b      	cmp	r0, #59	; 0x3b
    ff32:	d004      	beq.n	ff3e <handle_ansi+0xda>
        esc_state &= ~ESC_ANSI_VAL_2;
    ff34:	f023 0318 	bic.w	r3, r3, #24
    ff38:	4a29      	ldr	r2, [pc, #164]	; (ffe0 <handle_ansi+0x17c>)
    ff3a:	6013      	str	r3, [r2, #0]
    ff3c:	e7a2      	b.n	fe84 <handle_ansi+0x20>
        if (byte == ';' && !(esc_state & ESC_ANSI_VAL_2)) {
    ff3e:	f013 0f10 	tst.w	r3, #16
    ff42:	d1f7      	bne.n	ff34 <handle_ansi+0xd0>
            esc_state |= ESC_ANSI_VAL_2;
    ff44:	f043 0310 	orr.w	r3, r3, #16
    ff48:	4a25      	ldr	r2, [pc, #148]	; (ffe0 <handle_ansi+0x17c>)
    ff4a:	6013      	str	r3, [r2, #0]
    ff4c:	4770      	bx	lr
    switch (byte) {
    ff4e:	2848      	cmp	r0, #72	; 0x48
    ff50:	d02f      	beq.n	ffb2 <handle_ansi+0x14e>
    ff52:	287e      	cmp	r0, #126	; 0x7e
    ff54:	d130      	bne.n	ffb8 <handle_ansi+0x154>
        switch (ansi_val) {
    ff56:	4b23      	ldr	r3, [pc, #140]	; (ffe4 <handle_ansi+0x180>)
    ff58:	681b      	ldr	r3, [r3, #0]
    ff5a:	2b03      	cmp	r3, #3
    ff5c:	d037      	beq.n	ffce <handle_ansi+0x16a>
    ff5e:	2b04      	cmp	r3, #4
    ff60:	d039      	beq.n	ffd6 <handle_ansi+0x172>
    ff62:	2b01      	cmp	r3, #1
    ff64:	d128      	bne.n	ffb8 <handle_ansi+0x154>
            handle_home(line);
    ff66:	4608      	mov	r0, r1
    ff68:	f7ff ff10 	bl	fd8c <handle_home>
            break;
    ff6c:	e024      	b.n	ffb8 <handle_ansi+0x154>
        if (ansi_val > trailing_chars) {
    ff6e:	4b1f      	ldr	r3, [pc, #124]	; (ffec <handle_ansi+0x188>)
    ff70:	881b      	ldrh	r3, [r3, #0]
    ff72:	4a1c      	ldr	r2, [pc, #112]	; (ffe4 <handle_ansi+0x180>)
    ff74:	6811      	ldr	r1, [r2, #0]
    ff76:	428b      	cmp	r3, r1
    ff78:	d31e      	bcc.n	ffb8 <handle_ansi+0x154>
        trailing_chars -= ansi_val;
    ff7a:	b28a      	uxth	r2, r1
    ff7c:	1a9b      	subs	r3, r3, r2
    ff7e:	481b      	ldr	r0, [pc, #108]	; (ffec <handle_ansi+0x188>)
    ff80:	8003      	strh	r3, [r0, #0]
        cur += ansi_val;
    ff82:	4b19      	ldr	r3, [pc, #100]	; (ffe8 <handle_ansi+0x184>)
    ff84:	8818      	ldrh	r0, [r3, #0]
    ff86:	4402      	add	r2, r0
    ff88:	801a      	strh	r2, [r3, #0]
    char seq[14] = CSI;
    ff8a:	f645 331b 	movw	r3, #23323	; 0x5b1b
    ff8e:	9300      	str	r3, [sp, #0]
    ff90:	2300      	movs	r3, #0
    ff92:	9301      	str	r3, [sp, #4]
    ff94:	9302      	str	r3, [sp, #8]
    ff96:	f8ad 300c 	strh.w	r3, [sp, #12]
    if (count) {
    ff9a:	b169      	cbz	r1, ffb8 <handle_ansi+0x154>
        p = add_ascii_num_with_char(seq + 2, count, 'C');
    ff9c:	466c      	mov	r4, sp
    ff9e:	2243      	movs	r2, #67	; 0x43
    ffa0:	f10d 0002 	add.w	r0, sp, #2
    ffa4:	f7ff fe22 	bl	fbec <add_ascii_num_with_char>
        console_write_nolock(seq, p - seq);
    ffa8:	1b01      	subs	r1, r0, r4
    ffaa:	4620      	mov	r0, r4
    ffac:	f7ff feb6 	bl	fd1c <console_write_nolock>
    ffb0:	e002      	b.n	ffb8 <handle_ansi+0x154>
        handle_home(line);
    ffb2:	4608      	mov	r0, r1
    ffb4:	f7ff feea 	bl	fd8c <handle_home>
    esc_state &= ~ESC_ANSI;
    ffb8:	4a09      	ldr	r2, [pc, #36]	; (ffe0 <handle_ansi+0x17c>)
    ffba:	6813      	ldr	r3, [r2, #0]
    ffbc:	f023 0302 	bic.w	r3, r3, #2
    ffc0:	6013      	str	r3, [r2, #0]
}
    ffc2:	b004      	add	sp, #16
    ffc4:	bd10      	pop	{r4, pc}
        handle_end(line);
    ffc6:	4608      	mov	r0, r1
    ffc8:	f7ff feb8 	bl	fd3c <handle_end>
        break;
    ffcc:	e7f4      	b.n	ffb8 <handle_ansi+0x154>
            handle_delete(line);
    ffce:	4608      	mov	r0, r1
    ffd0:	f7ff ff38 	bl	fe44 <handle_delete>
            break;
    ffd4:	e7f0      	b.n	ffb8 <handle_ansi+0x154>
            handle_end(line);
    ffd6:	4608      	mov	r0, r1
    ffd8:	f7ff feb0 	bl	fd3c <handle_end>
            break;
    ffdc:	e7ec      	b.n	ffb8 <handle_ansi+0x154>
    ffde:	bf00      	nop
    ffe0:	2000196c 	.word	0x2000196c
    ffe4:	20001938 	.word	0x20001938
    ffe8:	20001964 	.word	0x20001964
    ffec:	2000197a 	.word	0x2000197a
    fff0:	2000193c 	.word	0x2000193c

0000fff4 <handle_backspace>:

static void
handle_backspace(char *line)
{
    if (cur > 0) {
    fff4:	4b13      	ldr	r3, [pc, #76]	; (10044 <handle_backspace+0x50>)
    fff6:	881b      	ldrh	r3, [r3, #0]
    fff8:	b903      	cbnz	r3, fffc <handle_backspace+0x8>
    fffa:	4770      	bx	lr
{
    fffc:	b530      	push	{r4, r5, lr}
    fffe:	b085      	sub	sp, #20
   10000:	4604      	mov	r4, r0
    char seq[14] = CSI;
   10002:	f645 331b 	movw	r3, #23323	; 0x5b1b
   10006:	9300      	str	r3, [sp, #0]
   10008:	2300      	movs	r3, #0
   1000a:	9301      	str	r3, [sp, #4]
   1000c:	9302      	str	r3, [sp, #8]
   1000e:	f8ad 300c 	strh.w	r3, [sp, #12]
        p = add_ascii_num_with_char(seq + 2, count, 'D');
   10012:	466d      	mov	r5, sp
   10014:	2244      	movs	r2, #68	; 0x44
   10016:	2101      	movs	r1, #1
   10018:	f10d 0002 	add.w	r0, sp, #2
   1001c:	f7ff fde6 	bl	fbec <add_ascii_num_with_char>
        console_write_nolock(seq, p - seq);
   10020:	1b41      	subs	r1, r0, r5
   10022:	4628      	mov	r0, r5
   10024:	f7ff fe7a 	bl	fd1c <console_write_nolock>
        cursor_backward(1);
        cur--;
   10028:	4a06      	ldr	r2, [pc, #24]	; (10044 <handle_backspace+0x50>)
   1002a:	8813      	ldrh	r3, [r2, #0]
   1002c:	3b01      	subs	r3, #1
   1002e:	b29b      	uxth	r3, r3
   10030:	8013      	strh	r3, [r2, #0]
        trailing_chars++;
   10032:	4905      	ldr	r1, [pc, #20]	; (10048 <handle_backspace+0x54>)
   10034:	880a      	ldrh	r2, [r1, #0]
   10036:	3201      	adds	r2, #1
   10038:	800a      	strh	r2, [r1, #0]
        del_char(&line[cur]);
   1003a:	18e0      	adds	r0, r4, r3
   1003c:	f7ff fece 	bl	fddc <del_char>
    }
}
   10040:	b005      	add	sp, #20
   10042:	bd30      	pop	{r4, r5, pc}
   10044:	20001964 	.word	0x20001964
   10048:	2000197a 	.word	0x2000197a

0001004c <console_clear_line>:
{
   1004c:	b510      	push	{r4, lr}
   1004e:	b084      	sub	sp, #16
    if (cur) {
   10050:	4b13      	ldr	r3, [pc, #76]	; (100a0 <console_clear_line+0x54>)
   10052:	8819      	ldrh	r1, [r3, #0]
   10054:	b979      	cbnz	r1, 10076 <console_clear_line+0x2a>
    cur = 0;
   10056:	2300      	movs	r3, #0
   10058:	4a11      	ldr	r2, [pc, #68]	; (100a0 <console_clear_line+0x54>)
   1005a:	8013      	strh	r3, [r2, #0]
    trailing_chars = 0;
   1005c:	4a11      	ldr	r2, [pc, #68]	; (100a4 <console_clear_line+0x58>)
   1005e:	8013      	strh	r3, [r2, #0]
    console_out_nolock(ESC);
   10060:	201b      	movs	r0, #27
   10062:	f000 fb8d 	bl	10780 <console_out_nolock>
    console_out_nolock('[');
   10066:	205b      	movs	r0, #91	; 0x5b
   10068:	f000 fb8a 	bl	10780 <console_out_nolock>
    console_out_nolock('K');
   1006c:	204b      	movs	r0, #75	; 0x4b
   1006e:	f000 fb87 	bl	10780 <console_out_nolock>
}
   10072:	b004      	add	sp, #16
   10074:	bd10      	pop	{r4, pc}
    char seq[14] = CSI;
   10076:	f645 331b 	movw	r3, #23323	; 0x5b1b
   1007a:	9300      	str	r3, [sp, #0]
   1007c:	2300      	movs	r3, #0
   1007e:	9301      	str	r3, [sp, #4]
   10080:	9302      	str	r3, [sp, #8]
   10082:	f8ad 300c 	strh.w	r3, [sp, #12]
    if (count) {
   10086:	2900      	cmp	r1, #0
   10088:	d0e5      	beq.n	10056 <console_clear_line+0xa>
        p = add_ascii_num_with_char(seq + 2, count, 'D');
   1008a:	466c      	mov	r4, sp
   1008c:	2244      	movs	r2, #68	; 0x44
   1008e:	f10d 0002 	add.w	r0, sp, #2
   10092:	f7ff fdab 	bl	fbec <add_ascii_num_with_char>
        console_write_nolock(seq, p - seq);
   10096:	1b01      	subs	r1, r0, r4
   10098:	4620      	mov	r0, r4
   1009a:	f7ff fe3f 	bl	fd1c <console_write_nolock>
   1009e:	e7da      	b.n	10056 <console_clear_line+0xa>
   100a0:	20001964 	.word	0x20001964
   100a4:	2000197a 	.word	0x2000197a

000100a8 <insert_char>:
        cur + trailing_chars >= MYNEWT_VAL(CONSOLE_MAX_INPUT_LEN) - 1) {
   100a8:	4b26      	ldr	r3, [pc, #152]	; (10144 <insert_char+0x9c>)
   100aa:	881b      	ldrh	r3, [r3, #0]
   100ac:	4a26      	ldr	r2, [pc, #152]	; (10148 <insert_char+0xa0>)
   100ae:	8812      	ldrh	r2, [r2, #0]
   100b0:	4413      	add	r3, r2
    if ((!MYNEWT_VAL(CONSOLE_HISTORY_AUTO_SEARCH) || !trailing_selection) &&
   100b2:	2bfe      	cmp	r3, #254	; 0xfe
   100b4:	dc45      	bgt.n	10142 <insert_char+0x9a>
{
   100b6:	b5f0      	push	{r4, r5, r6, r7, lr}
   100b8:	b085      	sub	sp, #20
   100ba:	460f      	mov	r7, r1
   100bc:	4606      	mov	r6, r0
    if (echo) {
   100be:	4b23      	ldr	r3, [pc, #140]	; (1014c <insert_char+0xa4>)
   100c0:	681b      	ldr	r3, [r3, #0]
   100c2:	b963      	cbnz	r3, 100de <insert_char+0x36>
    ++cur;
   100c4:	4a1f      	ldr	r2, [pc, #124]	; (10144 <insert_char+0x9c>)
   100c6:	8813      	ldrh	r3, [r2, #0]
   100c8:	3301      	adds	r3, #1
   100ca:	8013      	strh	r3, [r2, #0]
    if (trailing_chars == 0) {
   100cc:	4b1e      	ldr	r3, [pc, #120]	; (10148 <insert_char+0xa0>)
   100ce:	881b      	ldrh	r3, [r3, #0]
   100d0:	b903      	cbnz	r3, 100d4 <insert_char+0x2c>
        *pos = c;
   100d2:	7037      	strb	r7, [r6, #0]
    tmp = *pos;
   100d4:	4634      	mov	r4, r6
   100d6:	f814 5b01 	ldrb.w	r5, [r4], #1
    *(pos++) = c;
   100da:	7037      	strb	r7, [r6, #0]
    while (end-- > 0) {
   100dc:	e00a      	b.n	100f4 <insert_char+0x4c>
        console_out_nolock(c);
   100de:	4608      	mov	r0, r1
   100e0:	f000 fb4e 	bl	10780 <console_out_nolock>
   100e4:	e7ee      	b.n	100c4 <insert_char+0x1c>
        c = *pos;
   100e6:	4622      	mov	r2, r4
   100e8:	f812 1b01 	ldrb.w	r1, [r2], #1
        *(pos++) = tmp;
   100ec:	7025      	strb	r5, [r4, #0]
    while (end-- > 0) {
   100ee:	4633      	mov	r3, r6
        tmp = c;
   100f0:	460d      	mov	r5, r1
        *(pos++) = tmp;
   100f2:	4614      	mov	r4, r2
    while (end-- > 0) {
   100f4:	1e5e      	subs	r6, r3, #1
   100f6:	2b00      	cmp	r3, #0
   100f8:	dd07      	ble.n	1010a <insert_char+0x62>
        if (echo) {
   100fa:	4b14      	ldr	r3, [pc, #80]	; (1014c <insert_char+0xa4>)
   100fc:	681b      	ldr	r3, [r3, #0]
   100fe:	2b00      	cmp	r3, #0
   10100:	d0f1      	beq.n	100e6 <insert_char+0x3e>
            console_out_nolock(tmp);
   10102:	4628      	mov	r0, r5
   10104:	f000 fb3c 	bl	10780 <console_out_nolock>
   10108:	e7ed      	b.n	100e6 <insert_char+0x3e>
    if (echo) {
   1010a:	4b10      	ldr	r3, [pc, #64]	; (1014c <insert_char+0xa4>)
   1010c:	681b      	ldr	r3, [r3, #0]
   1010e:	b90b      	cbnz	r3, 10114 <insert_char+0x6c>
}
   10110:	b005      	add	sp, #20
   10112:	bdf0      	pop	{r4, r5, r6, r7, pc}
        cursor_backward(trailing_chars);
   10114:	4b0c      	ldr	r3, [pc, #48]	; (10148 <insert_char+0xa0>)
   10116:	8819      	ldrh	r1, [r3, #0]
    char seq[14] = CSI;
   10118:	f645 331b 	movw	r3, #23323	; 0x5b1b
   1011c:	9300      	str	r3, [sp, #0]
   1011e:	2300      	movs	r3, #0
   10120:	9301      	str	r3, [sp, #4]
   10122:	9302      	str	r3, [sp, #8]
   10124:	f8ad 300c 	strh.w	r3, [sp, #12]
    if (count) {
   10128:	2900      	cmp	r1, #0
   1012a:	d0f1      	beq.n	10110 <insert_char+0x68>
        p = add_ascii_num_with_char(seq + 2, count, 'D');
   1012c:	466c      	mov	r4, sp
   1012e:	2244      	movs	r2, #68	; 0x44
   10130:	f10d 0002 	add.w	r0, sp, #2
   10134:	f7ff fd5a 	bl	fbec <add_ascii_num_with_char>
        console_write_nolock(seq, p - seq);
   10138:	1b01      	subs	r1, r0, r4
   1013a:	4620      	mov	r0, r4
   1013c:	f7ff fdee 	bl	fd1c <console_write_nolock>
   10140:	e7e6      	b.n	10110 <insert_char+0x68>
   10142:	4770      	bx	lr
   10144:	20001964 	.word	0x20001964
   10148:	2000197a 	.word	0x2000197a
   1014c:	20000234 	.word	0x20000234

00010150 <console_echo>:
    echo = on;
   10150:	4b01      	ldr	r3, [pc, #4]	; (10158 <console_echo+0x8>)
   10152:	6018      	str	r0, [r3, #0]
}
   10154:	4770      	bx	lr
   10156:	bf00      	nop
   10158:	20000234 	.word	0x20000234

0001015c <handle_nlip>:
{
   1015c:	b570      	push	{r4, r5, r6, lr}
   1015e:	4604      	mov	r4, r0
    input = current_line_ev->ev_arg;
   10160:	4b3d      	ldr	r3, [pc, #244]	; (10258 <handle_nlip+0xfc>)
   10162:	681b      	ldr	r3, [r3, #0]
   10164:	689d      	ldr	r5, [r3, #8]
    switch (nlip_state) {
   10166:	4b3d      	ldr	r3, [pc, #244]	; (1025c <handle_nlip+0x100>)
   10168:	681b      	ldr	r3, [r3, #0]
   1016a:	3b04      	subs	r3, #4
   1016c:	2b10      	cmp	r3, #16
   1016e:	d855      	bhi.n	1021c <handle_nlip+0xc0>
   10170:	e8df f003 	tbb	[pc, r3]
   10174:	5420543a 	.word	0x5420543a
   10178:	54540954 	.word	0x54540954
   1017c:	54545454 	.word	0x54545454
   10180:	54545454 	.word	0x54545454
   10184:	09          	.byte	0x09
   10185:	00          	.byte	0x00
        insert_char(&input->line[cur], byte);
   10186:	4b36      	ldr	r3, [pc, #216]	; (10260 <handle_nlip+0x104>)
   10188:	8818      	ldrh	r0, [r3, #0]
   1018a:	4621      	mov	r1, r4
   1018c:	4428      	add	r0, r5
   1018e:	f7ff ff8b 	bl	100a8 <insert_char>
        if (byte == '\n') {
   10192:	2c0a      	cmp	r4, #10
   10194:	d001      	beq.n	1019a <handle_nlip+0x3e>
    handled = 1;
   10196:	2001      	movs	r0, #1
   10198:	e013      	b.n	101c2 <handle_nlip+0x66>
            input->line[cur] = '\0';
   1019a:	4b31      	ldr	r3, [pc, #196]	; (10260 <handle_nlip+0x104>)
   1019c:	881b      	ldrh	r3, [r3, #0]
   1019e:	2400      	movs	r4, #0
   101a0:	54ec      	strb	r4, [r5, r3]
            console_echo(1);
   101a2:	2001      	movs	r0, #1
   101a4:	f7ff ffd4 	bl	10150 <console_echo>
            nlip_state = 0;
   101a8:	4b2c      	ldr	r3, [pc, #176]	; (1025c <handle_nlip+0x100>)
   101aa:	601c      	str	r4, [r3, #0]
            console_handle_line();
   101ac:	f7ff fd48 	bl	fc40 <console_handle_line>
    handled = 1;
   101b0:	2001      	movs	r0, #1
   101b2:	e006      	b.n	101c2 <handle_nlip+0x66>
        if (byte == CONSOLE_NLIP_PKT_START2) {
   101b4:	2809      	cmp	r0, #9
   101b6:	d005      	beq.n	101c4 <handle_nlip+0x68>
            nlip_state = 0;
   101b8:	4b28      	ldr	r3, [pc, #160]	; (1025c <handle_nlip+0x100>)
   101ba:	2200      	movs	r2, #0
   101bc:	601a      	str	r2, [r3, #0]
            handled = g_console_ignore_non_nlip;
   101be:	4b29      	ldr	r3, [pc, #164]	; (10264 <handle_nlip+0x108>)
   101c0:	7818      	ldrb	r0, [r3, #0]
}
   101c2:	bd70      	pop	{r4, r5, r6, pc}
            nlip_state = NLIP_PKT_START2;
   101c4:	4b25      	ldr	r3, [pc, #148]	; (1025c <handle_nlip+0x100>)
   101c6:	6018      	str	r0, [r3, #0]
            console_echo(0);
   101c8:	2000      	movs	r0, #0
   101ca:	f7ff ffc1 	bl	10150 <console_echo>
            insert_char(&input->line[cur], CONSOLE_NLIP_PKT_START1);
   101ce:	4e24      	ldr	r6, [pc, #144]	; (10260 <handle_nlip+0x104>)
   101d0:	8830      	ldrh	r0, [r6, #0]
   101d2:	2106      	movs	r1, #6
   101d4:	4428      	add	r0, r5
   101d6:	f7ff ff67 	bl	100a8 <insert_char>
            insert_char(&input->line[cur], CONSOLE_NLIP_PKT_START2);
   101da:	8830      	ldrh	r0, [r6, #0]
   101dc:	4621      	mov	r1, r4
   101de:	4428      	add	r0, r5
   101e0:	f7ff ff62 	bl	100a8 <insert_char>
    handled = 1;
   101e4:	2001      	movs	r0, #1
   101e6:	e7ec      	b.n	101c2 <handle_nlip+0x66>
        if (byte == CONSOLE_NLIP_DATA_START2) {
   101e8:	2814      	cmp	r0, #20
   101ea:	d005      	beq.n	101f8 <handle_nlip+0x9c>
            nlip_state = 0;
   101ec:	4b1b      	ldr	r3, [pc, #108]	; (1025c <handle_nlip+0x100>)
   101ee:	2200      	movs	r2, #0
   101f0:	601a      	str	r2, [r3, #0]
            handled = g_console_ignore_non_nlip;
   101f2:	4b1c      	ldr	r3, [pc, #112]	; (10264 <handle_nlip+0x108>)
   101f4:	7818      	ldrb	r0, [r3, #0]
   101f6:	e7e4      	b.n	101c2 <handle_nlip+0x66>
            nlip_state = NLIP_DATA_START2;
   101f8:	4b18      	ldr	r3, [pc, #96]	; (1025c <handle_nlip+0x100>)
   101fa:	6018      	str	r0, [r3, #0]
            console_echo(0);
   101fc:	2000      	movs	r0, #0
   101fe:	f7ff ffa7 	bl	10150 <console_echo>
            insert_char(&input->line[cur], CONSOLE_NLIP_DATA_START1);
   10202:	4e17      	ldr	r6, [pc, #92]	; (10260 <handle_nlip+0x104>)
   10204:	8830      	ldrh	r0, [r6, #0]
   10206:	2104      	movs	r1, #4
   10208:	4428      	add	r0, r5
   1020a:	f7ff ff4d 	bl	100a8 <insert_char>
            insert_char(&input->line[cur], CONSOLE_NLIP_DATA_START2);
   1020e:	8830      	ldrh	r0, [r6, #0]
   10210:	4621      	mov	r1, r4
   10212:	4428      	add	r0, r5
   10214:	f7ff ff48 	bl	100a8 <insert_char>
    handled = 1;
   10218:	2001      	movs	r0, #1
   1021a:	e7d2      	b.n	101c2 <handle_nlip+0x66>
        if (byte == CONSOLE_NLIP_DATA_START1) {
   1021c:	2804      	cmp	r0, #4
   1021e:	d00a      	beq.n	10236 <handle_nlip+0xda>
        } else if (byte == CONSOLE_NLIP_PKT_START1) {
   10220:	2806      	cmp	r0, #6
   10222:	d00d      	beq.n	10240 <handle_nlip+0xe4>
            handled = g_console_ignore_non_nlip && byte != '\r' && byte != '\n';
   10224:	4b0f      	ldr	r3, [pc, #60]	; (10264 <handle_nlip+0x108>)
   10226:	781b      	ldrb	r3, [r3, #0]
   10228:	b18b      	cbz	r3, 1024e <handle_nlip+0xf2>
   1022a:	280d      	cmp	r0, #13
   1022c:	d011      	beq.n	10252 <handle_nlip+0xf6>
   1022e:	280a      	cmp	r0, #10
   10230:	d00b      	beq.n	1024a <handle_nlip+0xee>
   10232:	2001      	movs	r0, #1
    return handled;
   10234:	e7c5      	b.n	101c2 <handle_nlip+0x66>
            nlip_state = NLIP_DATA_START1;
   10236:	4b09      	ldr	r3, [pc, #36]	; (1025c <handle_nlip+0x100>)
   10238:	2204      	movs	r2, #4
   1023a:	601a      	str	r2, [r3, #0]
    handled = 1;
   1023c:	2001      	movs	r0, #1
   1023e:	e7c0      	b.n	101c2 <handle_nlip+0x66>
            nlip_state = NLIP_PKT_START1;
   10240:	4b06      	ldr	r3, [pc, #24]	; (1025c <handle_nlip+0x100>)
   10242:	2206      	movs	r2, #6
   10244:	601a      	str	r2, [r3, #0]
    handled = 1;
   10246:	2001      	movs	r0, #1
   10248:	e7bb      	b.n	101c2 <handle_nlip+0x66>
            handled = g_console_ignore_non_nlip && byte != '\r' && byte != '\n';
   1024a:	2000      	movs	r0, #0
   1024c:	e7b9      	b.n	101c2 <handle_nlip+0x66>
   1024e:	2000      	movs	r0, #0
   10250:	e7b7      	b.n	101c2 <handle_nlip+0x66>
   10252:	2000      	movs	r0, #0
   10254:	e7b5      	b.n	101c2 <handle_nlip+0x66>
   10256:	bf00      	nop
   10258:	20001968 	.word	0x20001968
   1025c:	20001974 	.word	0x20001974
   10260:	20001964 	.word	0x20001964
   10264:	2000348c 	.word	0x2000348c

00010268 <console_lock>:
{
   10268:	b508      	push	{r3, lr}
#endif

static inline int
os_arch_in_isr(void)
{
    return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   1026a:	4b0a      	ldr	r3, [pc, #40]	; (10294 <console_lock+0x2c>)
   1026c:	685b      	ldr	r3, [r3, #4]
   1026e:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (os_arch_in_isr()) {
   10272:	b123      	cbz	r3, 1027e <console_lock+0x16>
 *
 * @return number of times lock was called from current task
 */
static inline uint16_t os_mutex_get_level(struct os_mutex *mu)
{
    return mu->mu_level;
   10274:	4b08      	ldr	r3, [pc, #32]	; (10298 <console_lock+0x30>)
   10276:	88db      	ldrh	r3, [r3, #6]
        if (os_mutex_get_level(&console_write_lock)) {
   10278:	b94b      	cbnz	r3, 1028e <console_lock+0x26>
    int rc = OS_OK;
   1027a:	2000      	movs	r0, #0
}
   1027c:	bd08      	pop	{r3, pc}
   1027e:	4601      	mov	r1, r0
    rc = os_mutex_pend(&console_write_lock, timeout);
   10280:	4805      	ldr	r0, [pc, #20]	; (10298 <console_lock+0x30>)
   10282:	f7fe fa8d 	bl	e7a0 <os_mutex_pend>
    if (rc == OS_NOT_STARTED) {
   10286:	2809      	cmp	r0, #9
   10288:	d1f8      	bne.n	1027c <console_lock+0x14>
        rc = OS_OK;
   1028a:	2000      	movs	r0, #0
    return rc;
   1028c:	e7f6      	b.n	1027c <console_lock+0x14>
            rc = OS_EBUSY;
   1028e:	200b      	movs	r0, #11
   10290:	e7f4      	b.n	1027c <console_lock+0x14>
   10292:	bf00      	nop
   10294:	e000ed00 	.word	0xe000ed00
   10298:	20001958 	.word	0x20001958

0001029c <console_unlock>:
{
   1029c:	b508      	push	{r3, lr}
   1029e:	4b0c      	ldr	r3, [pc, #48]	; (102d0 <console_unlock+0x34>)
   102a0:	685b      	ldr	r3, [r3, #4]
   102a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (os_arch_in_isr()) {
   102a6:	b10b      	cbz	r3, 102ac <console_unlock+0x10>
    int rc = OS_OK;
   102a8:	2000      	movs	r0, #0
}
   102aa:	bd08      	pop	{r3, pc}
    rc = os_mutex_release(&console_write_lock);
   102ac:	4809      	ldr	r0, [pc, #36]	; (102d4 <console_unlock+0x38>)
   102ae:	f7fe fa17 	bl	e6e0 <os_mutex_release>
    assert(rc == OS_OK || rc == OS_NOT_STARTED);
   102b2:	2800      	cmp	r0, #0
   102b4:	d0f9      	beq.n	102aa <console_unlock+0xe>
   102b6:	2809      	cmp	r0, #9
   102b8:	d0f7      	beq.n	102aa <console_unlock+0xe>
   102ba:	f7fb ff95 	bl	c1e8 <hal_debugger_connected>
   102be:	b100      	cbz	r0, 102c2 <console_unlock+0x26>
   102c0:	be01      	bkpt	0x0001
   102c2:	2300      	movs	r3, #0
   102c4:	461a      	mov	r2, r3
   102c6:	4619      	mov	r1, r3
   102c8:	4618      	mov	r0, r3
   102ca:	f7fc fc41 	bl	cb50 <__assert_func>
   102ce:	bf00      	nop
   102d0:	e000ed00 	.word	0xe000ed00
   102d4:	20001958 	.word	0x20001958

000102d8 <console_write>:
{
   102d8:	b538      	push	{r3, r4, r5, lr}
   102da:	4605      	mov	r5, r0
   102dc:	460c      	mov	r4, r1
    if (console_lock(timeout) != OS_OK) {
   102de:	2080      	movs	r0, #128	; 0x80
   102e0:	f7ff ffc2 	bl	10268 <console_lock>
   102e4:	b9e0      	cbnz	r0, 10320 <console_write+0x48>
    if (cnt >= 2 && str[0] == CONSOLE_NLIP_DATA_START1 &&
   102e6:	2c01      	cmp	r4, #1
   102e8:	dd02      	ble.n	102f0 <console_write+0x18>
   102ea:	782b      	ldrb	r3, [r5, #0]
   102ec:	2b04      	cmp	r3, #4
   102ee:	d018      	beq.n	10322 <console_write+0x4a>
    if (cnt >= 3 && str[1] == CONSOLE_NLIP_PKT_START1 &&
   102f0:	2c02      	cmp	r4, #2
   102f2:	dd02      	ble.n	102fa <console_write+0x22>
   102f4:	786b      	ldrb	r3, [r5, #1]
   102f6:	2b06      	cmp	r3, #6
   102f8:	d01a      	beq.n	10330 <console_write+0x58>
    if (!g_is_output_nlip && g_console_silence_non_nlip) {
   102fa:	4b13      	ldr	r3, [pc, #76]	; (10348 <console_write+0x70>)
   102fc:	781b      	ldrb	r3, [r3, #0]
   102fe:	b913      	cbnz	r3, 10306 <console_write+0x2e>
   10300:	4b12      	ldr	r3, [pc, #72]	; (1034c <console_write+0x74>)
   10302:	781b      	ldrb	r3, [r3, #0]
   10304:	b91b      	cbnz	r3, 1030e <console_write+0x36>
    console_filter_write(str, cnt);
   10306:	4621      	mov	r1, r4
   10308:	4628      	mov	r0, r5
   1030a:	f7ff fcd5 	bl	fcb8 <console_filter_write>
    if (cnt > 0 && str[cnt - 1] == '\n') {
   1030e:	2c00      	cmp	r4, #0
   10310:	dd04      	ble.n	1031c <console_write+0x44>
   10312:	442c      	add	r4, r5
   10314:	f814 3c01 	ldrb.w	r3, [r4, #-1]
   10318:	2b0a      	cmp	r3, #10
   1031a:	d010      	beq.n	1033e <console_write+0x66>
    (void)console_unlock();
   1031c:	f7ff ffbe 	bl	1029c <console_unlock>
}
   10320:	bd38      	pop	{r3, r4, r5, pc}
        str[1] == CONSOLE_NLIP_DATA_START2) {
   10322:	786b      	ldrb	r3, [r5, #1]
    if (cnt >= 2 && str[0] == CONSOLE_NLIP_DATA_START1 &&
   10324:	2b14      	cmp	r3, #20
   10326:	d1e3      	bne.n	102f0 <console_write+0x18>
        g_is_output_nlip = 1;
   10328:	4b07      	ldr	r3, [pc, #28]	; (10348 <console_write+0x70>)
   1032a:	2201      	movs	r2, #1
   1032c:	701a      	strb	r2, [r3, #0]
   1032e:	e7df      	b.n	102f0 <console_write+0x18>
        str[2] == CONSOLE_NLIP_PKT_START2) {
   10330:	78ab      	ldrb	r3, [r5, #2]
    if (cnt >= 3 && str[1] == CONSOLE_NLIP_PKT_START1 &&
   10332:	2b09      	cmp	r3, #9
   10334:	d1e1      	bne.n	102fa <console_write+0x22>
        g_is_output_nlip = 1;
   10336:	4b04      	ldr	r3, [pc, #16]	; (10348 <console_write+0x70>)
   10338:	2201      	movs	r2, #1
   1033a:	701a      	strb	r2, [r3, #0]
   1033c:	e7dd      	b.n	102fa <console_write+0x22>
        g_is_output_nlip = 0;
   1033e:	4b02      	ldr	r3, [pc, #8]	; (10348 <console_write+0x70>)
   10340:	2200      	movs	r2, #0
   10342:	701a      	strb	r2, [r3, #0]
   10344:	e7ea      	b.n	1031c <console_write+0x44>
   10346:	bf00      	nop
   10348:	20003495 	.word	0x20003495
   1034c:	2000348d 	.word	0x2000348d

00010350 <console_blocking_mode>:
{
   10350:	b508      	push	{r3, lr}
    uart_console_blocking_mode();
   10352:	f000 f9ff 	bl	10754 <uart_console_blocking_mode>
}
   10356:	bd08      	pop	{r3, pc}

00010358 <console_handle_char>:

int
console_handle_char(uint8_t byte)
{
   10358:	b570      	push	{r4, r5, r6, lr}
    return 0;
#endif
    struct console_input *input;
    static char prev_endl = '\0';

    if (!lines_queue) {
   1035a:	4b54      	ldr	r3, [pc, #336]	; (104ac <console_handle_char+0x154>)
   1035c:	681b      	ldr	r3, [r3, #0]
   1035e:	2b00      	cmp	r3, #0
   10360:	f000 809f 	beq.w	104a2 <console_handle_char+0x14a>
   10364:	4604      	mov	r4, r0
        return 0;
    }

    if (!current_line_ev) {
   10366:	4b52      	ldr	r3, [pc, #328]	; (104b0 <console_handle_char+0x158>)
   10368:	681b      	ldr	r3, [r3, #0]
   1036a:	b14b      	cbz	r3, 10380 <console_handle_char+0x28>
        if (!current_line_ev) {
            rx_stalled = true;
            return -1;
        }
    }
    input = current_line_ev->ev_arg;
   1036c:	4b50      	ldr	r3, [pc, #320]	; (104b0 <console_handle_char+0x158>)
   1036e:	681b      	ldr	r3, [r3, #0]
   10370:	689e      	ldr	r6, [r3, #8]

    if (handle_nlip(byte)) {
   10372:	4620      	mov	r0, r4
   10374:	f7ff fef2 	bl	1015c <handle_nlip>
   10378:	b178      	cbz	r0, 1039a <console_handle_char+0x42>
        return 0;
   1037a:	2500      	movs	r5, #0
    }
unlock:
    (void)console_unlock();

    return 0;
}
   1037c:	4628      	mov	r0, r5
   1037e:	bd70      	pop	{r4, r5, r6, pc}
        current_line_ev = os_eventq_get_no_wait(&avail_queue);
   10380:	484c      	ldr	r0, [pc, #304]	; (104b4 <console_handle_char+0x15c>)
   10382:	f7fc ff4c 	bl	d21e <os_eventq_get_no_wait>
   10386:	4b4a      	ldr	r3, [pc, #296]	; (104b0 <console_handle_char+0x158>)
   10388:	6018      	str	r0, [r3, #0]
        if (!current_line_ev) {
   1038a:	2800      	cmp	r0, #0
   1038c:	d1ee      	bne.n	1036c <console_handle_char+0x14>
            rx_stalled = true;
   1038e:	4b4a      	ldr	r3, [pc, #296]	; (104b8 <console_handle_char+0x160>)
   10390:	2201      	movs	r2, #1
   10392:	701a      	strb	r2, [r3, #0]
            return -1;
   10394:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   10398:	e7f0      	b.n	1037c <console_handle_char+0x24>
    if (console_lock(1000)) {
   1039a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   1039e:	f7ff ff63 	bl	10268 <console_lock>
   103a2:	4605      	mov	r5, r0
   103a4:	2800      	cmp	r0, #0
   103a6:	d17e      	bne.n	104a6 <console_handle_char+0x14e>
    if (esc_state & ESC_ANSI) {
   103a8:	4b44      	ldr	r3, [pc, #272]	; (104bc <console_handle_char+0x164>)
   103aa:	681b      	ldr	r3, [r3, #0]
   103ac:	f013 0f02 	tst.w	r3, #2
   103b0:	d118      	bne.n	103e4 <console_handle_char+0x8c>
    if (esc_state & ESC_ESC) {
   103b2:	f013 0f01 	tst.w	r3, #1
   103b6:	d11c      	bne.n	103f2 <console_handle_char+0x9a>
   103b8:	f1a4 0320 	sub.w	r3, r4, #32
    if (!isprint(byte)) {
   103bc:	2b5e      	cmp	r3, #94	; 0x5e
   103be:	d969      	bls.n	10494 <console_handle_char+0x13c>
        handle_ansi(byte, input->line);
   103c0:	4631      	mov	r1, r6
   103c2:	4620      	mov	r0, r4
   103c4:	f7ff fd4e 	bl	fe64 <handle_ansi>
        switch (byte) {
   103c8:	2c0a      	cmp	r4, #10
   103ca:	d03c      	beq.n	10446 <console_handle_char+0xee>
   103cc:	d921      	bls.n	10412 <console_handle_char+0xba>
   103ce:	2c0d      	cmp	r4, #13
   103d0:	d039      	beq.n	10446 <console_handle_char+0xee>
   103d2:	d926      	bls.n	10422 <console_handle_char+0xca>
   103d4:	2c1b      	cmp	r4, #27
   103d6:	d12a      	bne.n	1042e <console_handle_char+0xd6>
            esc_state |= ESC_ESC;
   103d8:	4a38      	ldr	r2, [pc, #224]	; (104bc <console_handle_char+0x164>)
   103da:	6813      	ldr	r3, [r2, #0]
   103dc:	f043 0301 	orr.w	r3, r3, #1
   103e0:	6013      	str	r3, [r2, #0]
            break;
   103e2:	e003      	b.n	103ec <console_handle_char+0x94>
        handle_ansi(byte, input->line);
   103e4:	4631      	mov	r1, r6
   103e6:	4620      	mov	r0, r4
   103e8:	f7ff fd3c 	bl	fe64 <handle_ansi>
    (void)console_unlock();
   103ec:	f7ff ff56 	bl	1029c <console_unlock>
    return 0;
   103f0:	e7c4      	b.n	1037c <console_handle_char+0x24>
        esc_state &= ~ESC_ESC;
   103f2:	f023 0301 	bic.w	r3, r3, #1
   103f6:	4a31      	ldr	r2, [pc, #196]	; (104bc <console_handle_char+0x164>)
   103f8:	6013      	str	r3, [r2, #0]
        handle_ansi(byte, input->line);
   103fa:	4631      	mov	r1, r6
   103fc:	4620      	mov	r0, r4
   103fe:	f7ff fd31 	bl	fe64 <handle_ansi>
        switch (byte) {
   10402:	2c5b      	cmp	r4, #91	; 0x5b
   10404:	d1f2      	bne.n	103ec <console_handle_char+0x94>
            esc_state |= ESC_ANSI;
   10406:	4a2d      	ldr	r2, [pc, #180]	; (104bc <console_handle_char+0x164>)
   10408:	6813      	ldr	r3, [r2, #0]
            esc_state |= ESC_ANSI_FIRST;
   1040a:	f043 0306 	orr.w	r3, r3, #6
   1040e:	6013      	str	r3, [r2, #0]
            break;
   10410:	e7ec      	b.n	103ec <console_handle_char+0x94>
        switch (byte) {
   10412:	2c08      	cmp	r4, #8
   10414:	d00d      	beq.n	10432 <console_handle_char+0xda>
   10416:	d831      	bhi.n	1047c <console_handle_char+0x124>
   10418:	2c03      	cmp	r4, #3
   1041a:	d10e      	bne.n	1043a <console_handle_char+0xe2>
            console_clear_line();
   1041c:	f7ff fe16 	bl	1004c <console_clear_line>
            break;
   10420:	e7e4      	b.n	103ec <console_handle_char+0x94>
        switch (byte) {
   10422:	2c0c      	cmp	r4, #12
   10424:	d109      	bne.n	1043a <console_handle_char+0xe2>
                console_out_nolock(VT);
   10426:	200c      	movs	r0, #12
   10428:	f000 f9aa 	bl	10780 <console_out_nolock>
            break;
   1042c:	e7de      	b.n	103ec <console_handle_char+0x94>
        switch (byte) {
   1042e:	2c7f      	cmp	r4, #127	; 0x7f
   10430:	d103      	bne.n	1043a <console_handle_char+0xe2>
            handle_backspace(input->line);
   10432:	4630      	mov	r0, r6
   10434:	f7ff fdde 	bl	fff4 <handle_backspace>
            break;
   10438:	e7d8      	b.n	103ec <console_handle_char+0x94>
            insert_char(&input->line[cur], byte);
   1043a:	4b21      	ldr	r3, [pc, #132]	; (104c0 <console_handle_char+0x168>)
   1043c:	8818      	ldrh	r0, [r3, #0]
   1043e:	4621      	mov	r1, r4
   10440:	4430      	add	r0, r6
   10442:	f7ff fe31 	bl	100a8 <insert_char>
            if (byte == '\n' && prev_endl == '\r') {
   10446:	2c0a      	cmp	r4, #10
   10448:	d103      	bne.n	10452 <console_handle_char+0xfa>
   1044a:	4b1e      	ldr	r3, [pc, #120]	; (104c4 <console_handle_char+0x16c>)
   1044c:	781b      	ldrb	r3, [r3, #0]
   1044e:	2b0d      	cmp	r3, #13
   10450:	d011      	beq.n	10476 <console_handle_char+0x11e>
            prev_endl = byte;
   10452:	4b1c      	ldr	r3, [pc, #112]	; (104c4 <console_handle_char+0x16c>)
   10454:	701c      	strb	r4, [r3, #0]
            input->line[cur + trailing_chars] = '\0';
   10456:	4b1a      	ldr	r3, [pc, #104]	; (104c0 <console_handle_char+0x168>)
   10458:	881b      	ldrh	r3, [r3, #0]
   1045a:	4a1b      	ldr	r2, [pc, #108]	; (104c8 <console_handle_char+0x170>)
   1045c:	8812      	ldrh	r2, [r2, #0]
   1045e:	4413      	add	r3, r2
   10460:	2200      	movs	r2, #0
   10462:	54f2      	strb	r2, [r6, r3]
                console_filter_out('\r');
   10464:	200d      	movs	r0, #13
   10466:	f7ff fc09 	bl	fc7c <console_filter_out>
                console_filter_out('\n');
   1046a:	200a      	movs	r0, #10
   1046c:	f7ff fc06 	bl	fc7c <console_filter_out>
            console_handle_line();
   10470:	f7ff fbe6 	bl	fc40 <console_handle_line>
            break;
   10474:	e7ba      	b.n	103ec <console_handle_char+0x94>
                prev_endl = byte;
   10476:	4b13      	ldr	r3, [pc, #76]	; (104c4 <console_handle_char+0x16c>)
   10478:	701c      	strb	r4, [r3, #0]
                break;
   1047a:	e7b7      	b.n	103ec <console_handle_char+0x94>
            if (completion && (!trailing_chars ||
   1047c:	4b13      	ldr	r3, [pc, #76]	; (104cc <console_handle_char+0x174>)
   1047e:	681b      	ldr	r3, [r3, #0]
   10480:	2b00      	cmp	r3, #0
   10482:	d0b3      	beq.n	103ec <console_handle_char+0x94>
   10484:	4a10      	ldr	r2, [pc, #64]	; (104c8 <console_handle_char+0x170>)
   10486:	8812      	ldrh	r2, [r2, #0]
   10488:	2a00      	cmp	r2, #0
   1048a:	d1af      	bne.n	103ec <console_handle_char+0x94>
                completion(input->line, console_append_char);
   1048c:	4910      	ldr	r1, [pc, #64]	; (104d0 <console_handle_char+0x178>)
   1048e:	4630      	mov	r0, r6
   10490:	4798      	blx	r3
   10492:	e7ab      	b.n	103ec <console_handle_char+0x94>
        insert_char(&input->line[cur], byte);
   10494:	4b0a      	ldr	r3, [pc, #40]	; (104c0 <console_handle_char+0x168>)
   10496:	8818      	ldrh	r0, [r3, #0]
   10498:	4621      	mov	r1, r4
   1049a:	4430      	add	r0, r6
   1049c:	f7ff fe04 	bl	100a8 <insert_char>
   104a0:	e7a4      	b.n	103ec <console_handle_char+0x94>
        return 0;
   104a2:	2500      	movs	r5, #0
   104a4:	e76a      	b.n	1037c <console_handle_char+0x24>
        return -1;
   104a6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   104aa:	e767      	b.n	1037c <console_handle_char+0x24>
   104ac:	20001970 	.word	0x20001970
   104b0:	20001968 	.word	0x20001968
   104b4:	20001940 	.word	0x20001940
   104b8:	20001979 	.word	0x20001979
   104bc:	2000196c 	.word	0x2000196c
   104c0:	20001964 	.word	0x20001964
   104c4:	20001978 	.word	0x20001978
   104c8:	2000197a 	.word	0x2000197a
   104cc:	20001950 	.word	0x20001950
   104d0:	0000fcd9 	.word	0x0000fcd9

000104d4 <console_is_init>:

int
console_is_init(void)
{
   104d4:	b508      	push	{r3, lr}
#if MYNEWT_VAL(CONSOLE_UART)
    return uart_console_is_init();
   104d6:	f000 f96d 	bl	107b4 <uart_console_is_init>
#endif
#if MYNEWT_VAL(CONSOLE_BLE_MONITOR)
    return ble_monitor_console_is_init();
#endif
    return 0;
}
   104da:	bd08      	pop	{r3, pc}

000104dc <console_pkg_init>:
}
#endif

void
console_pkg_init(void)
{
   104dc:	b510      	push	{r4, lr}
   104de:	b082      	sub	sp, #8
    int rc = 0;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   104e0:	4b12      	ldr	r3, [pc, #72]	; (1052c <console_pkg_init+0x50>)
   104e2:	781b      	ldrb	r3, [r3, #0]
   104e4:	b153      	cbz	r3, 104fc <console_pkg_init+0x20>

    os_eventq_init(&avail_queue);
   104e6:	4812      	ldr	r0, [pc, #72]	; (10530 <console_pkg_init+0x54>)
   104e8:	f7fc fe54 	bl	d194 <os_eventq_init>
    os_mutex_init(&console_write_lock);
   104ec:	4811      	ldr	r0, [pc, #68]	; (10534 <console_pkg_init+0x58>)
   104ee:	f7fe f8ed 	bl	e6cc <os_mutex_init>

#if MYNEWT_VAL(CONSOLE_UART)
    rc = uart_console_init();
   104f2:	f000 f967 	bl	107c4 <uart_console_init>
#endif
#if MYNEWT_VAL(CONSOLE_RTT)
    rc = rtt_console_init();
#endif
    SYSINIT_PANIC_ASSERT(rc == 0);
   104f6:	b958      	cbnz	r0, 10510 <console_pkg_init+0x34>
}
   104f8:	b002      	add	sp, #8
   104fa:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   104fc:	f7fb fe74 	bl	c1e8 <hal_debugger_connected>
   10500:	b100      	cbz	r0, 10504 <console_pkg_init+0x28>
   10502:	be01      	bkpt	0x0001
   10504:	2300      	movs	r3, #0
   10506:	461a      	mov	r2, r3
   10508:	4619      	mov	r1, r3
   1050a:	4618      	mov	r0, r3
   1050c:	f7fc fb20 	bl	cb50 <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
   10510:	f7fb fe6a 	bl	c1e8 <hal_debugger_connected>
   10514:	b100      	cbz	r0, 10518 <console_pkg_init+0x3c>
   10516:	be01      	bkpt	0x0001
   10518:	2000      	movs	r0, #0
   1051a:	9000      	str	r0, [sp, #0]
   1051c:	4b06      	ldr	r3, [pc, #24]	; (10538 <console_pkg_init+0x5c>)
   1051e:	681c      	ldr	r4, [r3, #0]
   10520:	4603      	mov	r3, r0
   10522:	4602      	mov	r2, r0
   10524:	4601      	mov	r1, r0
   10526:	47a0      	blx	r4
}
   10528:	e7e6      	b.n	104f8 <console_pkg_init+0x1c>
   1052a:	bf00      	nop
   1052c:	20003584 	.word	0x20003584
   10530:	20001940 	.word	0x20001940
   10534:	20001958 	.word	0x20001958
   10538:	20000298 	.word	0x20000298

0001053c <console_vprintf>:

#if MYNEWT_VAL(BASELIBC_PRESENT)

int
console_vprintf(const char *fmt, va_list ap)
{
   1053c:	b570      	push	{r4, r5, r6, lr}
   1053e:	4604      	mov	r4, r0
   10540:	460d      	mov	r5, r1
    int num_chars;

    num_chars = 0;

    if (console_get_ticks()) {
   10542:	f000 f827 	bl	10594 <console_get_ticks>
   10546:	b160      	cbz	r0, 10562 <console_vprintf+0x26>
        /* Prefix each line with a timestamp. */
        if (!console_is_midline) {
   10548:	4b09      	ldr	r3, [pc, #36]	; (10570 <console_vprintf+0x34>)
   1054a:	681b      	ldr	r3, [r3, #0]
   1054c:	b10b      	cbz	r3, 10552 <console_vprintf+0x16>
    num_chars = 0;
   1054e:	2600      	movs	r6, #0
   10550:	e008      	b.n	10564 <console_vprintf+0x28>
            num_chars += printf("%06lu ", (unsigned long)os_time_get());
   10552:	f7fd ff2d 	bl	e3b0 <os_time_get>
   10556:	4601      	mov	r1, r0
   10558:	4806      	ldr	r0, [pc, #24]	; (10574 <console_vprintf+0x38>)
   1055a:	f01f f997 	bl	2f88c <printf>
   1055e:	4606      	mov	r6, r0
   10560:	e000      	b.n	10564 <console_vprintf+0x28>
    num_chars = 0;
   10562:	2600      	movs	r6, #0
        }
    }

    num_chars += vprintf(fmt, ap);
   10564:	4629      	mov	r1, r5
   10566:	4620      	mov	r0, r4
   10568:	f01f f9ce 	bl	2f908 <vprintf>

    return num_chars;
}
   1056c:	4430      	add	r0, r6
   1056e:	bd70      	pop	{r4, r5, r6, pc}
   10570:	20003490 	.word	0x20003490
   10574:	000319c8 	.word	0x000319c8

00010578 <console_printf>:
 *                                  unlimited.  This return value is analogous
 *                                  to that of snprintf.
 */
int
console_printf(const char *fmt, ...)
{
   10578:	b40f      	push	{r0, r1, r2, r3}
   1057a:	b500      	push	{lr}
   1057c:	b083      	sub	sp, #12
   1057e:	a904      	add	r1, sp, #16
   10580:	f851 0b04 	ldr.w	r0, [r1], #4
    va_list args;
    int num_chars;

    va_start(args, fmt);
   10584:	9101      	str	r1, [sp, #4]
    num_chars = console_vprintf(fmt, args);
   10586:	f7ff ffd9 	bl	1053c <console_vprintf>
    va_end(args);

    return num_chars;
}
   1058a:	b003      	add	sp, #12
   1058c:	f85d eb04 	ldr.w	lr, [sp], #4
   10590:	b004      	add	sp, #16
   10592:	4770      	bx	lr

00010594 <console_get_ticks>:

/* return value of CONSOLE_TICKS */
char console_get_ticks(void)
{
    return do_ticks;
}
   10594:	4b01      	ldr	r3, [pc, #4]	; (1059c <console_get_ticks+0x8>)
   10596:	7818      	ldrb	r0, [r3, #0]
   10598:	4770      	bx	lr
   1059a:	bf00      	nop
   1059c:	20000238 	.word	0x20000238

000105a0 <uart_blocking_tx>:
 *
 * @param dev		Uart device in question
 */
static inline void
uart_blocking_tx(struct uart_dev *dev, uint8_t byte)
{
   105a0:	b508      	push	{r3, lr}
    dev->ud_funcs.uf_blocking_tx(dev, byte);
   105a2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   105a4:	4798      	blx	r3
}
   105a6:	bd08      	pop	{r3, pc}

000105a8 <uart_console_ring_add_char>:
}

static void
uart_console_ring_add_char(struct console_ring *cr, char ch)
{
    cr->buf[cr->head] = ch;
   105a8:	6842      	ldr	r2, [r0, #4]
   105aa:	7803      	ldrb	r3, [r0, #0]
   105ac:	54d1      	strb	r1, [r2, r3]
    cr->head = inc_and_wrap(cr->head, cr->size);
   105ae:	7803      	ldrb	r3, [r0, #0]
   105b0:	8842      	ldrh	r2, [r0, #2]
    return (i + 1) & (max - 1);
   105b2:	3301      	adds	r3, #1
   105b4:	3a01      	subs	r2, #1
   105b6:	4013      	ands	r3, r2
    cr->head = inc_and_wrap(cr->head, cr->size);
   105b8:	7003      	strb	r3, [r0, #0]
}
   105ba:	4770      	bx	lr

000105bc <uart_console_ring_pull_char>:

static uint8_t
uart_console_ring_pull_char(struct console_ring *cr)
{
   105bc:	4602      	mov	r2, r0
    uint8_t ch;

    ch = cr->buf[cr->tail];
   105be:	6841      	ldr	r1, [r0, #4]
   105c0:	7843      	ldrb	r3, [r0, #1]
   105c2:	5cc8      	ldrb	r0, [r1, r3]
    cr->tail = inc_and_wrap(cr->tail, cr->size);
   105c4:	8851      	ldrh	r1, [r2, #2]
    return (i + 1) & (max - 1);
   105c6:	3301      	adds	r3, #1
   105c8:	3901      	subs	r1, #1
   105ca:	400b      	ands	r3, r1
    cr->tail = inc_and_wrap(cr->tail, cr->size);
   105cc:	7053      	strb	r3, [r2, #1]
    return ch;
}
   105ce:	4770      	bx	lr

000105d0 <uart_console_ring_is_full>:

static bool
uart_console_ring_is_full(const struct console_ring *cr)
{
    return inc_and_wrap(cr->head, cr->size) == cr->tail;
   105d0:	7803      	ldrb	r3, [r0, #0]
   105d2:	8842      	ldrh	r2, [r0, #2]
    return (i + 1) & (max - 1);
   105d4:	3301      	adds	r3, #1
   105d6:	3a01      	subs	r2, #1
   105d8:	4013      	ands	r3, r2
    return inc_and_wrap(cr->head, cr->size) == cr->tail;
   105da:	7840      	ldrb	r0, [r0, #1]
}
   105dc:	4298      	cmp	r0, r3
   105de:	bf14      	ite	ne
   105e0:	2000      	movne	r0, #0
   105e2:	2001      	moveq	r0, #1
   105e4:	4770      	bx	lr

000105e6 <uart_console_ring_is_empty>:

static bool
uart_console_ring_is_empty(const struct console_ring *cr)
{
    return cr->head == cr->tail;
   105e6:	7802      	ldrb	r2, [r0, #0]
   105e8:	7840      	ldrb	r0, [r0, #1]
}
   105ea:	4282      	cmp	r2, r0
   105ec:	bf14      	ite	ne
   105ee:	2000      	movne	r0, #0
   105f0:	2001      	moveq	r0, #1
   105f2:	4770      	bx	lr

000105f4 <uart_console_tx_flush>:
/*
 * Flush cnt characters from console output queue.
 */
static void
uart_console_tx_flush(int cnt)
{
   105f4:	b538      	push	{r3, r4, r5, lr}
   105f6:	4605      	mov	r5, r0
    int i;
    uint8_t byte;

    for (i = 0; i < cnt; i++) {
   105f8:	2400      	movs	r4, #0
   105fa:	42ac      	cmp	r4, r5
   105fc:	da0e      	bge.n	1061c <uart_console_tx_flush+0x28>
        if (uart_console_ring_is_empty(&cr_tx)) {
   105fe:	4808      	ldr	r0, [pc, #32]	; (10620 <uart_console_tx_flush+0x2c>)
   10600:	f7ff fff1 	bl	105e6 <uart_console_ring_is_empty>
   10604:	b950      	cbnz	r0, 1061c <uart_console_tx_flush+0x28>
            break;
        }
        byte = uart_console_ring_pull_char(&cr_tx);
   10606:	4806      	ldr	r0, [pc, #24]	; (10620 <uart_console_tx_flush+0x2c>)
   10608:	f7ff ffd8 	bl	105bc <uart_console_ring_pull_char>
        uart_blocking_tx(uart_dev, byte);
   1060c:	4b05      	ldr	r3, [pc, #20]	; (10624 <uart_console_tx_flush+0x30>)
   1060e:	681b      	ldr	r3, [r3, #0]
    dev->ud_funcs.uf_blocking_tx(dev, byte);
   10610:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   10612:	4601      	mov	r1, r0
   10614:	4618      	mov	r0, r3
   10616:	4790      	blx	r2
    for (i = 0; i < cnt; i++) {
   10618:	3401      	adds	r4, #1
   1061a:	e7ee      	b.n	105fa <uart_console_tx_flush+0x6>
    }
}
   1061c:	bd38      	pop	{r3, r4, r5, pc}
   1061e:	bf00      	nop
   10620:	200019a4 	.word	0x200019a4
   10624:	200019d0 	.word	0x200019d0

00010628 <uart_console_tx_char>:
 * Interrupts disabled when console_tx_char/console_rx_char are called.
 * Characters sent only in blocking mode.
 */
static int
uart_console_tx_char(void *arg)
{
   10628:	b508      	push	{r3, lr}
    if (uart_console_ring_is_empty(&cr_tx)) {
   1062a:	4805      	ldr	r0, [pc, #20]	; (10640 <uart_console_tx_char+0x18>)
   1062c:	f7ff ffdb 	bl	105e6 <uart_console_ring_is_empty>
   10630:	b918      	cbnz	r0, 1063a <uart_console_tx_char+0x12>
        return -1;
    }
    return uart_console_ring_pull_char(&cr_tx);
   10632:	4803      	ldr	r0, [pc, #12]	; (10640 <uart_console_tx_char+0x18>)
   10634:	f7ff ffc2 	bl	105bc <uart_console_ring_pull_char>
}
   10638:	bd08      	pop	{r3, pc}
        return -1;
   1063a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1063e:	e7fb      	b.n	10638 <uart_console_tx_char+0x10>
   10640:	200019a4 	.word	0x200019a4

00010644 <uart_console_queue_char>:
    if (((uart_dev->ud_dev.od_flags & OS_DEV_F_STATUS_OPEN) == 0) ||
   10644:	7ec3      	ldrb	r3, [r0, #27]
   10646:	f003 0306 	and.w	r3, r3, #6
   1064a:	2b02      	cmp	r3, #2
   1064c:	d000      	beq.n	10650 <uart_console_queue_char+0xc>
   1064e:	4770      	bx	lr
{
   10650:	b570      	push	{r4, r5, r6, lr}
   10652:	460e      	mov	r6, r1
   10654:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
   10656:	f7fd ff6d 	bl	e534 <os_arch_save_sr>
   1065a:	4605      	mov	r5, r0
    while (uart_console_ring_is_full(&cr_tx)) {
   1065c:	e002      	b.n	10664 <uart_console_queue_char+0x20>
        OS_ENTER_CRITICAL(sr);
   1065e:	f7fd ff69 	bl	e534 <os_arch_save_sr>
   10662:	4605      	mov	r5, r0
    while (uart_console_ring_is_full(&cr_tx)) {
   10664:	480c      	ldr	r0, [pc, #48]	; (10698 <uart_console_queue_char+0x54>)
   10666:	f7ff ffb3 	bl	105d0 <uart_console_ring_is_full>
   1066a:	b168      	cbz	r0, 10688 <uart_console_queue_char+0x44>
    dev->ud_funcs.uf_start_tx(dev);
   1066c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1066e:	4620      	mov	r0, r4
   10670:	4798      	blx	r3
        OS_EXIT_CRITICAL(sr);
   10672:	4628      	mov	r0, r5
   10674:	f7fd ff64 	bl	e540 <os_arch_restore_sr>
        if (os_started()) {
   10678:	f7fc fb2a 	bl	ccd0 <os_started>
   1067c:	2800      	cmp	r0, #0
   1067e:	d0ee      	beq.n	1065e <uart_console_queue_char+0x1a>
            os_time_delay(1);
   10680:	2001      	movs	r0, #1
   10682:	f7fd febf 	bl	e404 <os_time_delay>
   10686:	e7ea      	b.n	1065e <uart_console_queue_char+0x1a>
    uart_console_ring_add_char(&cr_tx, ch);
   10688:	4631      	mov	r1, r6
   1068a:	4803      	ldr	r0, [pc, #12]	; (10698 <uart_console_queue_char+0x54>)
   1068c:	f7ff ff8c 	bl	105a8 <uart_console_ring_add_char>
    OS_EXIT_CRITICAL(sr);
   10690:	4628      	mov	r0, r5
   10692:	f7fd ff55 	bl	e540 <os_arch_restore_sr>
}
   10696:	bd70      	pop	{r4, r5, r6, pc}
   10698:	200019a4 	.word	0x200019a4

0001069c <uart_console_rx_char>:
/*
 * Interrupts disabled when console_tx_char/console_rx_char are called.
 */
static int
uart_console_rx_char(void *arg, uint8_t byte)
{
   1069c:	b510      	push	{r4, lr}
   1069e:	460c      	mov	r4, r1
#if MYNEWT_VAL(CONSOLE_UART_RX_BUF_SIZE) > 0
    if (uart_console_ring_is_full(&cr_rx)) {
   106a0:	480c      	ldr	r0, [pc, #48]	; (106d4 <uart_console_rx_char+0x38>)
   106a2:	f7ff ff95 	bl	105d0 <uart_console_ring_is_full>
   106a6:	b940      	cbnz	r0, 106ba <uart_console_rx_char+0x1e>
        uart_console_rx_stalled = true;
        return -1;
    }

    uart_console_ring_add_char(&cr_rx, byte);
   106a8:	4621      	mov	r1, r4
   106aa:	480a      	ldr	r0, [pc, #40]	; (106d4 <uart_console_rx_char+0x38>)
   106ac:	f7ff ff7c 	bl	105a8 <uart_console_ring_add_char>

    if (!rx_ev.ev_queued) {
   106b0:	4b09      	ldr	r3, [pc, #36]	; (106d8 <uart_console_rx_char+0x3c>)
   106b2:	781b      	ldrb	r3, [r3, #0]
   106b4:	b13b      	cbz	r3, 106c6 <uart_console_rx_char+0x2a>
        os_eventq_put(os_eventq_dflt_get(), &rx_ev);
    }

    return 0;
   106b6:	2000      	movs	r0, #0
#else
    return console_handle_char(byte);
#endif
}
   106b8:	bd10      	pop	{r4, pc}
        uart_console_rx_stalled = true;
   106ba:	4b08      	ldr	r3, [pc, #32]	; (106dc <uart_console_rx_char+0x40>)
   106bc:	2201      	movs	r2, #1
   106be:	701a      	strb	r2, [r3, #0]
        return -1;
   106c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   106c4:	e7f8      	b.n	106b8 <uart_console_rx_char+0x1c>
        os_eventq_put(os_eventq_dflt_get(), &rx_ev);
   106c6:	f7fc fe29 	bl	d31c <os_eventq_dflt_get>
   106ca:	4903      	ldr	r1, [pc, #12]	; (106d8 <uart_console_rx_char+0x3c>)
   106cc:	f7fc fd6f 	bl	d1ae <os_eventq_put>
    return 0;
   106d0:	2000      	movs	r0, #0
   106d2:	e7f1      	b.n	106b8 <uart_console_rx_char+0x1c>
   106d4:	2000197c 	.word	0x2000197c
   106d8:	20003498 	.word	0x20003498
   106dc:	200019cc 	.word	0x200019cc

000106e0 <uart_console_rx_char_event>:

#if MYNEWT_VAL(CONSOLE_UART_RX_BUF_SIZE) > 0
static void
uart_console_rx_char_event(struct os_event *ev)
{
   106e0:	b510      	push	{r4, lr}
    static int b = -1;
    int sr;
    int ret;

    /* We may have unhandled character - try it first */
    if (b >= 0) {
   106e2:	4b18      	ldr	r3, [pc, #96]	; (10744 <uart_console_rx_char_event+0x64>)
   106e4:	6818      	ldr	r0, [r3, #0]
   106e6:	2800      	cmp	r0, #0
   106e8:	db0b      	blt.n	10702 <uart_console_rx_char_event+0x22>
        ret = console_handle_char(b);
   106ea:	b2c0      	uxtb	r0, r0
   106ec:	f7ff fe34 	bl	10358 <console_handle_char>
        if (ret < 0) {
   106f0:	2800      	cmp	r0, #0
   106f2:	da06      	bge.n	10702 <uart_console_rx_char_event+0x22>
   106f4:	e024      	b.n	10740 <uart_console_rx_char_event+0x60>
        if (uart_console_rx_stalled) {
            uart_console_rx_stalled = false;
            uart_start_rx(uart_dev);
        }

        ret = console_handle_char(b);
   106f6:	4b13      	ldr	r3, [pc, #76]	; (10744 <uart_console_rx_char_event+0x64>)
   106f8:	7818      	ldrb	r0, [r3, #0]
   106fa:	f7ff fe2d 	bl	10358 <console_handle_char>
        if (ret < 0) {
   106fe:	2800      	cmp	r0, #0
   10700:	db1e      	blt.n	10740 <uart_console_rx_char_event+0x60>
    while (!uart_console_ring_is_empty(&cr_rx)) {
   10702:	4811      	ldr	r0, [pc, #68]	; (10748 <uart_console_rx_char_event+0x68>)
   10704:	f7ff ff6f 	bl	105e6 <uart_console_ring_is_empty>
   10708:	b9b0      	cbnz	r0, 10738 <uart_console_rx_char_event+0x58>
        OS_ENTER_CRITICAL(sr);
   1070a:	f7fd ff13 	bl	e534 <os_arch_save_sr>
   1070e:	4604      	mov	r4, r0
        b = uart_console_ring_pull_char(&cr_rx);
   10710:	480d      	ldr	r0, [pc, #52]	; (10748 <uart_console_rx_char_event+0x68>)
   10712:	f7ff ff53 	bl	105bc <uart_console_ring_pull_char>
   10716:	4b0b      	ldr	r3, [pc, #44]	; (10744 <uart_console_rx_char_event+0x64>)
   10718:	6018      	str	r0, [r3, #0]
        OS_EXIT_CRITICAL(sr);
   1071a:	4620      	mov	r0, r4
   1071c:	f7fd ff10 	bl	e540 <os_arch_restore_sr>
        if (uart_console_rx_stalled) {
   10720:	4b0a      	ldr	r3, [pc, #40]	; (1074c <uart_console_rx_char_event+0x6c>)
   10722:	781b      	ldrb	r3, [r3, #0]
   10724:	2b00      	cmp	r3, #0
   10726:	d0e6      	beq.n	106f6 <uart_console_rx_char_event+0x16>
            uart_console_rx_stalled = false;
   10728:	4b08      	ldr	r3, [pc, #32]	; (1074c <uart_console_rx_char_event+0x6c>)
   1072a:	2200      	movs	r2, #0
   1072c:	701a      	strb	r2, [r3, #0]
            uart_start_rx(uart_dev);
   1072e:	4b08      	ldr	r3, [pc, #32]	; (10750 <uart_console_rx_char_event+0x70>)
   10730:	6818      	ldr	r0, [r3, #0]
    dev->ud_funcs.uf_start_rx(dev);
   10732:	6a83      	ldr	r3, [r0, #40]	; 0x28
   10734:	4798      	blx	r3
   10736:	e7de      	b.n	106f6 <uart_console_rx_char_event+0x16>
            return;
        }
    }

    b = -1;
   10738:	4b02      	ldr	r3, [pc, #8]	; (10744 <uart_console_rx_char_event+0x64>)
   1073a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1073e:	601a      	str	r2, [r3, #0]
}
   10740:	bd10      	pop	{r4, pc}
   10742:	bf00      	nop
   10744:	2000023c 	.word	0x2000023c
   10748:	2000197c 	.word	0x2000197c
   1074c:	200019cc 	.word	0x200019cc
   10750:	200019d0 	.word	0x200019d0

00010754 <uart_console_blocking_mode>:
{
   10754:	b510      	push	{r4, lr}
    OS_ENTER_CRITICAL(sr);
   10756:	f7fd feed 	bl	e534 <os_arch_save_sr>
   1075a:	4604      	mov	r4, r0
    if (write_char_cb) {
   1075c:	4b06      	ldr	r3, [pc, #24]	; (10778 <uart_console_blocking_mode+0x24>)
   1075e:	681b      	ldr	r3, [r3, #0]
   10760:	b12b      	cbz	r3, 1076e <uart_console_blocking_mode+0x1a>
        write_char_cb = uart_blocking_tx;
   10762:	4b05      	ldr	r3, [pc, #20]	; (10778 <uart_console_blocking_mode+0x24>)
   10764:	4a05      	ldr	r2, [pc, #20]	; (1077c <uart_console_blocking_mode+0x28>)
   10766:	601a      	str	r2, [r3, #0]
        uart_console_tx_flush(MYNEWT_VAL(CONSOLE_UART_TX_BUF_SIZE));
   10768:	2020      	movs	r0, #32
   1076a:	f7ff ff43 	bl	105f4 <uart_console_tx_flush>
    OS_EXIT_CRITICAL(sr);
   1076e:	4620      	mov	r0, r4
   10770:	f7fd fee6 	bl	e540 <os_arch_restore_sr>
}
   10774:	bd10      	pop	{r4, pc}
   10776:	bf00      	nop
   10778:	200019d4 	.word	0x200019d4
   1077c:	000105a1 	.word	0x000105a1

00010780 <console_out_nolock>:
{
   10780:	b538      	push	{r3, r4, r5, lr}
   10782:	4604      	mov	r4, r0
    if (!write_char_cb) {
   10784:	4b09      	ldr	r3, [pc, #36]	; (107ac <console_out_nolock+0x2c>)
   10786:	681b      	ldr	r3, [r3, #0]
   10788:	b173      	cbz	r3, 107a8 <console_out_nolock+0x28>
    if ('\n' == c) {
   1078a:	280a      	cmp	r0, #10
   1078c:	d103      	bne.n	10796 <console_out_nolock+0x16>
        write_char_cb(uart_dev, '\r');
   1078e:	210d      	movs	r1, #13
   10790:	4a07      	ldr	r2, [pc, #28]	; (107b0 <console_out_nolock+0x30>)
   10792:	6810      	ldr	r0, [r2, #0]
   10794:	4798      	blx	r3
    write_char_cb(uart_dev, c);
   10796:	4d06      	ldr	r5, [pc, #24]	; (107b0 <console_out_nolock+0x30>)
   10798:	4b04      	ldr	r3, [pc, #16]	; (107ac <console_out_nolock+0x2c>)
   1079a:	681b      	ldr	r3, [r3, #0]
   1079c:	b2e1      	uxtb	r1, r4
   1079e:	6828      	ldr	r0, [r5, #0]
   107a0:	4798      	blx	r3
    uart_start_tx(uart_dev);
   107a2:	6828      	ldr	r0, [r5, #0]
    dev->ud_funcs.uf_start_tx(dev);
   107a4:	6a43      	ldr	r3, [r0, #36]	; 0x24
   107a6:	4798      	blx	r3
}
   107a8:	4620      	mov	r0, r4
   107aa:	bd38      	pop	{r3, r4, r5, pc}
   107ac:	200019d4 	.word	0x200019d4
   107b0:	200019d0 	.word	0x200019d0

000107b4 <uart_console_is_init>:
#endif

int
uart_console_is_init(void)
{
    return uart_dev != NULL;
   107b4:	4b02      	ldr	r3, [pc, #8]	; (107c0 <uart_console_is_init+0xc>)
   107b6:	6818      	ldr	r0, [r3, #0]
}
   107b8:	3000      	adds	r0, #0
   107ba:	bf18      	it	ne
   107bc:	2001      	movne	r0, #1
   107be:	4770      	bx	lr
   107c0:	200019d0 	.word	0x200019d0

000107c4 <uart_console_init>:
    return 0;
}

int
uart_console_init(void)
{
   107c4:	b500      	push	{lr}
   107c6:	b087      	sub	sp, #28
    struct uart_conf uc = {
   107c8:	2300      	movs	r3, #0
   107ca:	f8cd 3006 	str.w	r3, [sp, #6]
   107ce:	f8cd 300e 	str.w	r3, [sp, #14]
   107d2:	f8cd 3012 	str.w	r3, [sp, #18]
   107d6:	f8ad 3016 	strh.w	r3, [sp, #22]
   107da:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   107de:	9300      	str	r3, [sp, #0]
   107e0:	2308      	movs	r3, #8
   107e2:	f88d 3004 	strb.w	r3, [sp, #4]
   107e6:	2301      	movs	r3, #1
   107e8:	f88d 3005 	strb.w	r3, [sp, #5]
   107ec:	4b13      	ldr	r3, [pc, #76]	; (1083c <uart_console_init+0x78>)
   107ee:	9302      	str	r3, [sp, #8]
   107f0:	4b13      	ldr	r3, [pc, #76]	; (10840 <uart_console_init+0x7c>)
   107f2:	9303      	str	r3, [sp, #12]
        .uc_flow_ctl = MYNEWT_VAL(CONSOLE_UART_FLOW_CONTROL),
        .uc_tx_char = uart_console_tx_char,
        .uc_rx_char = uart_console_rx_char,
    };

    cr_tx.size = MYNEWT_VAL(CONSOLE_UART_TX_BUF_SIZE);
   107f4:	4b13      	ldr	r3, [pc, #76]	; (10844 <uart_console_init+0x80>)
   107f6:	2220      	movs	r2, #32
   107f8:	805a      	strh	r2, [r3, #2]
    cr_tx.buf = cr_tx_buf;
   107fa:	4913      	ldr	r1, [pc, #76]	; (10848 <uart_console_init+0x84>)
   107fc:	6059      	str	r1, [r3, #4]
    write_char_cb = uart_console_queue_char;
   107fe:	4b13      	ldr	r3, [pc, #76]	; (1084c <uart_console_init+0x88>)
   10800:	4913      	ldr	r1, [pc, #76]	; (10850 <uart_console_init+0x8c>)
   10802:	6019      	str	r1, [r3, #0]

#if MYNEWT_VAL(CONSOLE_UART_RX_BUF_SIZE) > 0
    cr_rx.size = MYNEWT_VAL(CONSOLE_UART_RX_BUF_SIZE);
   10804:	4b13      	ldr	r3, [pc, #76]	; (10854 <uart_console_init+0x90>)
   10806:	805a      	strh	r2, [r3, #2]
    cr_rx.buf = cr_rx_buf;
   10808:	4a13      	ldr	r2, [pc, #76]	; (10858 <uart_console_init+0x94>)
   1080a:	605a      	str	r2, [r3, #4]

    rx_ev.ev_cb = uart_console_rx_char_event;
   1080c:	4b13      	ldr	r3, [pc, #76]	; (1085c <uart_console_init+0x98>)
   1080e:	4a14      	ldr	r2, [pc, #80]	; (10860 <uart_console_init+0x9c>)
   10810:	605a      	str	r2, [r3, #4]
#endif

    if (!uart_dev) {
   10812:	4b14      	ldr	r3, [pc, #80]	; (10864 <uart_console_init+0xa0>)
   10814:	681b      	ldr	r3, [r3, #0]
   10816:	b11b      	cbz	r3, 10820 <uart_console_init+0x5c>
          OS_TIMEOUT_NEVER, &uc);
        if (!uart_dev) {
            return -1;
        }
    }
    return 0;
   10818:	2000      	movs	r0, #0
}
   1081a:	b007      	add	sp, #28
   1081c:	f85d fb04 	ldr.w	pc, [sp], #4
        uart_dev = (struct uart_dev *)os_dev_open(MYNEWT_VAL(CONSOLE_UART_DEV),
   10820:	466a      	mov	r2, sp
   10822:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   10826:	4810      	ldr	r0, [pc, #64]	; (10868 <uart_console_init+0xa4>)
   10828:	f7fc fc8a 	bl	d140 <os_dev_open>
   1082c:	4b0d      	ldr	r3, [pc, #52]	; (10864 <uart_console_init+0xa0>)
   1082e:	6018      	str	r0, [r3, #0]
        if (!uart_dev) {
   10830:	b108      	cbz	r0, 10836 <uart_console_init+0x72>
    return 0;
   10832:	2000      	movs	r0, #0
   10834:	e7f1      	b.n	1081a <uart_console_init+0x56>
            return -1;
   10836:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1083a:	e7ee      	b.n	1081a <uart_console_init+0x56>
   1083c:	00010629 	.word	0x00010629
   10840:	0001069d 	.word	0x0001069d
   10844:	200019a4 	.word	0x200019a4
   10848:	200019ac 	.word	0x200019ac
   1084c:	200019d4 	.word	0x200019d4
   10850:	00010645 	.word	0x00010645
   10854:	2000197c 	.word	0x2000197c
   10858:	20001984 	.word	0x20001984
   1085c:	20003498 	.word	0x20003498
   10860:	000106e1 	.word	0x000106e1
   10864:	200019d0 	.word	0x200019d0
   10868:	000319d0 	.word	0x000319d0

0001086c <flash_area_find_idx>:
const struct flash_area *flash_map;
int flash_map_entries;

static int
flash_area_find_idx(uint8_t id)
{
   1086c:	b410      	push	{r4}
    int i;

    if (flash_map == NULL) {
   1086e:	4b0c      	ldr	r3, [pc, #48]	; (108a0 <flash_area_find_idx+0x34>)
   10870:	681c      	ldr	r4, [r3, #0]
   10872:	b18c      	cbz	r4, 10898 <flash_area_find_idx+0x2c>
        return -1;
    }

    for (i = 0; i < flash_map_entries; i++) {
   10874:	2300      	movs	r3, #0
   10876:	4a0b      	ldr	r2, [pc, #44]	; (108a4 <flash_area_find_idx+0x38>)
   10878:	6812      	ldr	r2, [r2, #0]
   1087a:	429a      	cmp	r2, r3
   1087c:	dd07      	ble.n	1088e <flash_area_find_idx+0x22>
        if (flash_map[i].fa_id == id) {
   1087e:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   10882:	008a      	lsls	r2, r1, #2
   10884:	5ca2      	ldrb	r2, [r4, r2]
   10886:	4282      	cmp	r2, r0
   10888:	d003      	beq.n	10892 <flash_area_find_idx+0x26>
    for (i = 0; i < flash_map_entries; i++) {
   1088a:	3301      	adds	r3, #1
   1088c:	e7f3      	b.n	10876 <flash_area_find_idx+0xa>
            return i;
        }
    }

    return -1;
   1088e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
   10892:	4618      	mov	r0, r3
   10894:	bc10      	pop	{r4}
   10896:	4770      	bx	lr
        return -1;
   10898:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1089c:	e7f9      	b.n	10892 <flash_area_find_idx+0x26>
   1089e:	bf00      	nop
   108a0:	200034a8 	.word	0x200034a8
   108a4:	200034ac 	.word	0x200034ac

000108a8 <flash_map_area_overlaps>:
    const struct flash_area *area2;
    uint32_t end1;
    uint32_t end2;
    int i;

    for (i = 0; i < flash_map_entries; i++) {
   108a8:	2300      	movs	r3, #0
   108aa:	4a13      	ldr	r2, [pc, #76]	; (108f8 <flash_map_area_overlaps+0x50>)
   108ac:	6812      	ldr	r2, [r2, #0]
   108ae:	429a      	cmp	r2, r3
   108b0:	dd1f      	ble.n	108f2 <flash_map_area_overlaps+0x4a>
{
   108b2:	b430      	push	{r4, r5}
   108b4:	e004      	b.n	108c0 <flash_map_area_overlaps+0x18>
    for (i = 0; i < flash_map_entries; i++) {
   108b6:	3301      	adds	r3, #1
   108b8:	4a0f      	ldr	r2, [pc, #60]	; (108f8 <flash_map_area_overlaps+0x50>)
   108ba:	6812      	ldr	r2, [r2, #0]
   108bc:	429a      	cmp	r2, r3
   108be:	dd15      	ble.n	108ec <flash_map_area_overlaps+0x44>
        area2 = &flash_map[i];
   108c0:	4a0e      	ldr	r2, [pc, #56]	; (108fc <flash_map_area_overlaps+0x54>)
   108c2:	6812      	ldr	r2, [r2, #0]
   108c4:	eb03 0443 	add.w	r4, r3, r3, lsl #1
   108c8:	00a1      	lsls	r1, r4, #2
   108ca:	440a      	add	r2, r1

        if (area1->fa_device_id == area2->fa_device_id) {
   108cc:	7844      	ldrb	r4, [r0, #1]
   108ce:	7851      	ldrb	r1, [r2, #1]
   108d0:	428c      	cmp	r4, r1
   108d2:	d1f0      	bne.n	108b6 <flash_map_area_overlaps+0xe>
            end1 = area1->fa_off + area1->fa_size;
   108d4:	6845      	ldr	r5, [r0, #4]
   108d6:	6881      	ldr	r1, [r0, #8]
   108d8:	4429      	add	r1, r5
            end2 = area2->fa_off + area2->fa_size;
   108da:	6854      	ldr	r4, [r2, #4]
   108dc:	6892      	ldr	r2, [r2, #8]
   108de:	4422      	add	r2, r4

            if (end1 > area2->fa_off && area1->fa_off < end2) {
   108e0:	428c      	cmp	r4, r1
   108e2:	d2e8      	bcs.n	108b6 <flash_map_area_overlaps+0xe>
   108e4:	4295      	cmp	r5, r2
   108e6:	d2e6      	bcs.n	108b6 <flash_map_area_overlaps+0xe>
                return true;
   108e8:	2001      	movs	r0, #1
   108ea:	e000      	b.n	108ee <flash_map_area_overlaps+0x46>
            }
        }
    }

    return false;
   108ec:	2000      	movs	r0, #0
}
   108ee:	bc30      	pop	{r4, r5}
   108f0:	4770      	bx	lr
    return false;
   108f2:	2000      	movs	r0, #0
}
   108f4:	4770      	bx	lr
   108f6:	bf00      	nop
   108f8:	200034ac 	.word	0x200034ac
   108fc:	200034a8 	.word	0x200034a8

00010900 <flash_map_add_new_dflt_areas>:
 * Adds areas from the hardcoded flash map that aren't present in, and don't
 * overlap with, the manufacturing flash map.
 */
static void
flash_map_add_new_dflt_areas(void)
{
   10900:	b570      	push	{r4, r5, r6, lr}

    const struct flash_area *dflt_area;
    struct flash_area *dst_area;
    int i;
    
    for (i = 0; i < num_dflt_entries; i++) {
   10902:	2400      	movs	r4, #0
   10904:	e00a      	b.n	1091c <flash_map_add_new_dflt_areas+0x1c>
            /* Default flash map contains a new entry. */
            if (flash_map_entries >= MYNEWT_VAL(FLASH_MAP_MAX_AREAS)) {
                DFLT_LOG_DEBUG("failed to add default flash area: "
                               "no room: id=%d",
                               dflt_area->fa_id);
                DEBUG_PANIC();
   10906:	f7fb fc6f 	bl	c1e8 <hal_debugger_connected>
   1090a:	b100      	cbz	r0, 1090e <flash_map_add_new_dflt_areas+0xe>
   1090c:	be01      	bkpt	0x0001
   1090e:	2300      	movs	r3, #0
   10910:	461a      	mov	r2, r3
   10912:	4619      	mov	r1, r3
   10914:	4618      	mov	r0, r3
   10916:	f7fc f91b 	bl	cb50 <__assert_func>
    for (i = 0; i < num_dflt_entries; i++) {
   1091a:	3401      	adds	r4, #1
   1091c:	2c05      	cmp	r4, #5
   1091e:	dc26      	bgt.n	1096e <flash_map_add_new_dflt_areas+0x6e>
        dflt_area = &sysflash_map_dflt[i];
   10920:	0063      	lsls	r3, r4, #1
   10922:	4423      	add	r3, r4
   10924:	009a      	lsls	r2, r3, #2
   10926:	4b12      	ldr	r3, [pc, #72]	; (10970 <flash_map_add_new_dflt_areas+0x70>)
   10928:	18d6      	adds	r6, r2, r3
        if (flash_area_find_idx(dflt_area->fa_id) == -1) {
   1092a:	5c98      	ldrb	r0, [r3, r2]
   1092c:	f7ff ff9e 	bl	1086c <flash_area_find_idx>
   10930:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   10934:	d1f1      	bne.n	1091a <flash_map_add_new_dflt_areas+0x1a>
            if (flash_map_entries >= MYNEWT_VAL(FLASH_MAP_MAX_AREAS)) {
   10936:	4b0f      	ldr	r3, [pc, #60]	; (10974 <flash_map_add_new_dflt_areas+0x74>)
   10938:	681d      	ldr	r5, [r3, #0]
   1093a:	2d09      	cmp	r5, #9
   1093c:	dce3      	bgt.n	10906 <flash_map_add_new_dflt_areas+0x6>
                return;
            } 

            /* Add the default entry if it doesn't cause any overlaps. */
            if (flash_map_area_overlaps(dflt_area)) {
   1093e:	4630      	mov	r0, r6
   10940:	f7ff ffb2 	bl	108a8 <flash_map_area_overlaps>
   10944:	2800      	cmp	r0, #0
   10946:	d1e8      	bne.n	1091a <flash_map_add_new_dflt_areas+0x1a>
                DFLT_LOG_DEBUG("failed to add default flash area: "
                               "overlap: id=%d",
                               dflt_area->fa_id);
            } else {
                /* Cast away const. */
                dst_area = (struct flash_area *) &flash_map[flash_map_entries];
   10948:	4b0b      	ldr	r3, [pc, #44]	; (10978 <flash_map_add_new_dflt_areas+0x78>)
   1094a:	681b      	ldr	r3, [r3, #0]
   1094c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   10950:	00aa      	lsls	r2, r5, #2
   10952:	4413      	add	r3, r2

                *dst_area = *dflt_area;
   10954:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   10958:	0091      	lsls	r1, r2, #2
   1095a:	4a05      	ldr	r2, [pc, #20]	; (10970 <flash_map_add_new_dflt_areas+0x70>)
   1095c:	440a      	add	r2, r1
   1095e:	ca07      	ldmia	r2, {r0, r1, r2}
   10960:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                flash_map_entries++;
   10964:	4a03      	ldr	r2, [pc, #12]	; (10974 <flash_map_add_new_dflt_areas+0x74>)
   10966:	6813      	ldr	r3, [r2, #0]
   10968:	3301      	adds	r3, #1
   1096a:	6013      	str	r3, [r2, #0]
   1096c:	e7d5      	b.n	1091a <flash_map_add_new_dflt_areas+0x1a>
            }
        }
    }
}
   1096e:	bd70      	pop	{r4, r5, r6, pc}
   10970:	00032988 	.word	0x00032988
   10974:	200034ac 	.word	0x200034ac
   10978:	200034a8 	.word	0x200034a8

0001097c <flash_map_read_mfg>:
{
   1097c:	b570      	push	{r4, r5, r6, lr}
   1097e:	b086      	sub	sp, #24
   10980:	4605      	mov	r5, r0
   10982:	460e      	mov	r6, r1
   10984:	4614      	mov	r4, r2
    *out_num_areas = 0;
   10986:	2300      	movs	r3, #0
   10988:	6013      	str	r3, [r2, #0]
    mfg_init();
   1098a:	f001 f841 	bl	11a10 <mfg_init>
    mfg_open(&reader);
   1098e:	a801      	add	r0, sp, #4
   10990:	f001 f85e 	bl	11a50 <mfg_open>
        if (*out_num_areas >= max_areas) {
   10994:	6823      	ldr	r3, [r4, #0]
   10996:	42ab      	cmp	r3, r5
   10998:	da29      	bge.n	109ee <flash_map_read_mfg+0x72>
        rc = mfg_seek_next_with_type(&reader, MFG_META_TLV_TYPE_FLASH_AREA);
   1099a:	2102      	movs	r1, #2
   1099c:	a801      	add	r0, sp, #4
   1099e:	f001 f81a 	bl	119d6 <mfg_seek_next_with_type>
   109a2:	4603      	mov	r3, r0
        switch (rc) {
   109a4:	f110 0f0f 	cmn.w	r0, #15
   109a8:	d003      	beq.n	109b2 <flash_map_read_mfg+0x36>
   109aa:	b120      	cbz	r0, 109b6 <flash_map_read_mfg+0x3a>
}
   109ac:	4618      	mov	r0, r3
   109ae:	b006      	add	sp, #24
   109b0:	bd70      	pop	{r4, r5, r6, pc}
            return 0;
   109b2:	2300      	movs	r3, #0
   109b4:	e7fa      	b.n	109ac <flash_map_read_mfg+0x30>
        rc = mfg_read_tlv_flash_area(&reader, &meta_flash_area);
   109b6:	a903      	add	r1, sp, #12
   109b8:	a801      	add	r0, sp, #4
   109ba:	f001 f819 	bl	119f0 <mfg_read_tlv_flash_area>
        if (rc != 0) {
   109be:	4603      	mov	r3, r0
   109c0:	2800      	cmp	r0, #0
   109c2:	d1f3      	bne.n	109ac <flash_map_read_mfg+0x30>
        fap = out_areas + *out_num_areas;
   109c4:	6823      	ldr	r3, [r4, #0]
   109c6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   109ca:	009a      	lsls	r2, r3, #2
   109cc:	18b3      	adds	r3, r6, r2
        fap->fa_id = meta_flash_area.area_id;
   109ce:	f89d 100c 	ldrb.w	r1, [sp, #12]
   109d2:	54b1      	strb	r1, [r6, r2]
        fap->fa_device_id = meta_flash_area.device_id;
   109d4:	f89d 200d 	ldrb.w	r2, [sp, #13]
   109d8:	705a      	strb	r2, [r3, #1]
        fap->fa_off = meta_flash_area.offset;
   109da:	f8dd 200e 	ldr.w	r2, [sp, #14]
   109de:	605a      	str	r2, [r3, #4]
        fap->fa_size = meta_flash_area.size;
   109e0:	f8dd 2012 	ldr.w	r2, [sp, #18]
   109e4:	609a      	str	r2, [r3, #8]
        (*out_num_areas)++;
   109e6:	6823      	ldr	r3, [r4, #0]
   109e8:	3301      	adds	r3, #1
   109ea:	6023      	str	r3, [r4, #0]
        if (*out_num_areas >= max_areas) {
   109ec:	e7d2      	b.n	10994 <flash_map_read_mfg+0x18>
            return -1;
   109ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   109f2:	e7db      	b.n	109ac <flash_map_read_mfg+0x30>

000109f4 <flash_area_open>:
{
   109f4:	b538      	push	{r3, r4, r5, lr}
    if (flash_map == NULL) {
   109f6:	4b0b      	ldr	r3, [pc, #44]	; (10a24 <flash_area_open+0x30>)
   109f8:	681c      	ldr	r4, [r3, #0]
   109fa:	b164      	cbz	r4, 10a16 <flash_area_open+0x22>
   109fc:	460d      	mov	r5, r1
    idx = flash_area_find_idx(id);
   109fe:	f7ff ff35 	bl	1086c <flash_area_find_idx>
    if (idx == -1) {
   10a02:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   10a06:	d009      	beq.n	10a1c <flash_area_open+0x28>
    *fap = &flash_map[idx];
   10a08:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   10a0c:	0083      	lsls	r3, r0, #2
   10a0e:	441c      	add	r4, r3
   10a10:	602c      	str	r4, [r5, #0]
    return 0;
   10a12:	2000      	movs	r0, #0
}
   10a14:	bd38      	pop	{r3, r4, r5, pc}
        return SYS_EACCES;
   10a16:	f06f 0006 	mvn.w	r0, #6
   10a1a:	e7fb      	b.n	10a14 <flash_area_open+0x20>
        return SYS_ENOENT;
   10a1c:	f06f 0003 	mvn.w	r0, #3
   10a20:	e7f8      	b.n	10a14 <flash_area_open+0x20>
   10a22:	bf00      	nop
   10a24:	200034a8 	.word	0x200034a8

00010a28 <flash_area_to_sectors>:
{
   10a28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10a2c:	b084      	sub	sp, #16
   10a2e:	460f      	mov	r7, r1
   10a30:	4616      	mov	r6, r2
    rc = flash_area_open(id, &fa);
   10a32:	fa5f f980 	uxtb.w	r9, r0
   10a36:	a903      	add	r1, sp, #12
   10a38:	4648      	mov	r0, r9
   10a3a:	f7ff ffdb 	bl	109f4 <flash_area_open>
    if (rc != 0) {
   10a3e:	4680      	mov	r8, r0
   10a40:	b118      	cbz	r0, 10a4a <flash_area_to_sectors+0x22>
}
   10a42:	4640      	mov	r0, r8
   10a44:	b004      	add	sp, #16
   10a46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    *cnt = 0;
   10a4a:	2300      	movs	r3, #0
   10a4c:	603b      	str	r3, [r7, #0]
    hf = hal_bsp_flash_dev(fa->fa_device_id);
   10a4e:	9b03      	ldr	r3, [sp, #12]
   10a50:	7858      	ldrb	r0, [r3, #1]
   10a52:	f01d fa4d 	bl	2def0 <hal_bsp_flash_dev>
   10a56:	4605      	mov	r5, r0
    for (i = 0; i < hf->hf_sector_cnt; i++) {
   10a58:	4644      	mov	r4, r8
   10a5a:	e003      	b.n	10a64 <flash_area_to_sectors+0x3c>
            (*cnt)++;
   10a5c:	683b      	ldr	r3, [r7, #0]
   10a5e:	3301      	adds	r3, #1
   10a60:	603b      	str	r3, [r7, #0]
    for (i = 0; i < hf->hf_sector_cnt; i++) {
   10a62:	3401      	adds	r4, #1
   10a64:	68eb      	ldr	r3, [r5, #12]
   10a66:	42a3      	cmp	r3, r4
   10a68:	ddeb      	ble.n	10a42 <flash_area_to_sectors+0x1a>
        hf->hf_itf->hff_sector_info(hf, i, &start, &size);
   10a6a:	682b      	ldr	r3, [r5, #0]
   10a6c:	f8d3 a00c 	ldr.w	sl, [r3, #12]
   10a70:	ab01      	add	r3, sp, #4
   10a72:	aa02      	add	r2, sp, #8
   10a74:	4621      	mov	r1, r4
   10a76:	4628      	mov	r0, r5
   10a78:	47d0      	blx	sl
        if (start >= fa->fa_off && start < fa->fa_off + fa->fa_size) {
   10a7a:	9903      	ldr	r1, [sp, #12]
   10a7c:	684b      	ldr	r3, [r1, #4]
   10a7e:	9a02      	ldr	r2, [sp, #8]
   10a80:	4293      	cmp	r3, r2
   10a82:	d8ee      	bhi.n	10a62 <flash_area_to_sectors+0x3a>
   10a84:	6889      	ldr	r1, [r1, #8]
   10a86:	440b      	add	r3, r1
   10a88:	429a      	cmp	r2, r3
   10a8a:	d2ea      	bcs.n	10a62 <flash_area_to_sectors+0x3a>
            if (ret) {
   10a8c:	2e00      	cmp	r6, #0
   10a8e:	d0e5      	beq.n	10a5c <flash_area_to_sectors+0x34>
                ret->fa_id = id;
   10a90:	f886 9000 	strb.w	r9, [r6]
                ret->fa_device_id = fa->fa_device_id;
   10a94:	9b03      	ldr	r3, [sp, #12]
   10a96:	785b      	ldrb	r3, [r3, #1]
   10a98:	7073      	strb	r3, [r6, #1]
                ret->fa_off = start;
   10a9a:	6072      	str	r2, [r6, #4]
                ret->fa_size = size;
   10a9c:	9b01      	ldr	r3, [sp, #4]
   10a9e:	60b3      	str	r3, [r6, #8]
                ret++;
   10aa0:	360c      	adds	r6, #12
   10aa2:	e7db      	b.n	10a5c <flash_area_to_sectors+0x34>

00010aa4 <flash_area_read>:
{
   10aa4:	b538      	push	{r3, r4, r5, lr}
    if (off > fa->fa_size || off + len > fa->fa_size) {
   10aa6:	6884      	ldr	r4, [r0, #8]
   10aa8:	428c      	cmp	r4, r1
   10aaa:	d308      	bcc.n	10abe <flash_area_read+0x1a>
   10aac:	18cd      	adds	r5, r1, r3
   10aae:	42ac      	cmp	r4, r5
   10ab0:	d308      	bcc.n	10ac4 <flash_area_read+0x20>
    return hal_flash_read(fa->fa_device_id, fa->fa_off + off, dst, len);
   10ab2:	6844      	ldr	r4, [r0, #4]
   10ab4:	4421      	add	r1, r4
   10ab6:	7840      	ldrb	r0, [r0, #1]
   10ab8:	f01d fa5b 	bl	2df72 <hal_flash_read>
}
   10abc:	bd38      	pop	{r3, r4, r5, pc}
        return -1;
   10abe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10ac2:	e7fb      	b.n	10abc <flash_area_read+0x18>
   10ac4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10ac8:	e7f8      	b.n	10abc <flash_area_read+0x18>

00010aca <flash_area_write>:
{
   10aca:	b538      	push	{r3, r4, r5, lr}
    if (off > fa->fa_size || off + len > fa->fa_size) {
   10acc:	6884      	ldr	r4, [r0, #8]
   10ace:	428c      	cmp	r4, r1
   10ad0:	d308      	bcc.n	10ae4 <flash_area_write+0x1a>
   10ad2:	18cd      	adds	r5, r1, r3
   10ad4:	42ac      	cmp	r4, r5
   10ad6:	d308      	bcc.n	10aea <flash_area_write+0x20>
    return hal_flash_write(fa->fa_device_id, fa->fa_off + off,
   10ad8:	6844      	ldr	r4, [r0, #4]
   10ada:	4421      	add	r1, r4
   10adc:	7840      	ldrb	r0, [r0, #1]
   10ade:	f01d fa73 	bl	2dfc8 <hal_flash_write>
}
   10ae2:	bd38      	pop	{r3, r4, r5, pc}
        return -1;
   10ae4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10ae8:	e7fb      	b.n	10ae2 <flash_area_write+0x18>
   10aea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10aee:	e7f8      	b.n	10ae2 <flash_area_write+0x18>

00010af0 <flash_area_erase>:
    if (off > fa->fa_size || off + len > fa->fa_size) {
   10af0:	6883      	ldr	r3, [r0, #8]
   10af2:	428b      	cmp	r3, r1
   10af4:	d309      	bcc.n	10b0a <flash_area_erase+0x1a>
{
   10af6:	b510      	push	{r4, lr}
    if (off > fa->fa_size || off + len > fa->fa_size) {
   10af8:	188c      	adds	r4, r1, r2
   10afa:	42a3      	cmp	r3, r4
   10afc:	d308      	bcc.n	10b10 <flash_area_erase+0x20>
    return hal_flash_erase(fa->fa_device_id, fa->fa_off + off, len);
   10afe:	6843      	ldr	r3, [r0, #4]
   10b00:	4419      	add	r1, r3
   10b02:	7840      	ldrb	r0, [r0, #1]
   10b04:	f01d fa9a 	bl	2e03c <hal_flash_erase>
}
   10b08:	bd10      	pop	{r4, pc}
        return -1;
   10b0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   10b0e:	4770      	bx	lr
        return -1;
   10b10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10b14:	e7f8      	b.n	10b08 <flash_area_erase+0x18>

00010b16 <flash_area_align>:
{
   10b16:	b508      	push	{r3, lr}
    return hal_flash_align(fa->fa_device_id);
   10b18:	7840      	ldrb	r0, [r0, #1]
   10b1a:	f01d fa1a 	bl	2df52 <hal_flash_align>
}
   10b1e:	bd08      	pop	{r3, pc}

00010b20 <flash_area_erased_val>:
{
   10b20:	b508      	push	{r3, lr}
    return hal_flash_erased_val(fa->fa_device_id);
   10b22:	7840      	ldrb	r0, [r0, #1]
   10b24:	f01d fa1d 	bl	2df62 <hal_flash_erased_val>
}
   10b28:	bd08      	pop	{r3, pc}

00010b2a <flash_area_is_empty>:
{
   10b2a:	b510      	push	{r4, lr}
   10b2c:	460c      	mov	r4, r1
    *empty = false;
   10b2e:	2300      	movs	r3, #0
   10b30:	700b      	strb	r3, [r1, #0]
    rc = hal_flash_isempty_no_buf(fa->fa_device_id, fa->fa_off, fa->fa_size);
   10b32:	6882      	ldr	r2, [r0, #8]
   10b34:	6841      	ldr	r1, [r0, #4]
   10b36:	7840      	ldrb	r0, [r0, #1]
   10b38:	f01d fb35 	bl	2e1a6 <hal_flash_isempty_no_buf>
    if (rc < 0) {
   10b3c:	2800      	cmp	r0, #0
   10b3e:	db02      	blt.n	10b46 <flash_area_is_empty+0x1c>
    } else if (rc == 1) {
   10b40:	2801      	cmp	r0, #1
   10b42:	d001      	beq.n	10b48 <flash_area_is_empty+0x1e>
    return 0;
   10b44:	2000      	movs	r0, #0
}
   10b46:	bd10      	pop	{r4, pc}
        *empty = true;
   10b48:	2301      	movs	r3, #1
   10b4a:	7023      	strb	r3, [r4, #0]
    return 0;
   10b4c:	2000      	movs	r0, #0
   10b4e:	e7fa      	b.n	10b46 <flash_area_is_empty+0x1c>

00010b50 <flash_area_read_is_empty>:
{
   10b50:	b510      	push	{r4, lr}
    return hal_flash_isempty(fa->fa_device_id, fa->fa_off + off, dst, len);
   10b52:	6844      	ldr	r4, [r0, #4]
   10b54:	4421      	add	r1, r4
   10b56:	7840      	ldrb	r0, [r0, #1]
   10b58:	f01d faf4 	bl	2e144 <hal_flash_isempty>
}
   10b5c:	bd10      	pop	{r4, pc}

00010b5e <flash_area_id_from_image_slot>:
    switch (slot) {
   10b5e:	b170      	cbz	r0, 10b7e <flash_area_id_from_image_slot+0x20>
{
   10b60:	b508      	push	{r3, lr}
    switch (slot) {
   10b62:	2801      	cmp	r0, #1
   10b64:	d101      	bne.n	10b6a <flash_area_id_from_image_slot+0xc>
        return FLASH_AREA_IMAGE_1;
   10b66:	2002      	movs	r0, #2
}
   10b68:	bd08      	pop	{r3, pc}
        assert(0);
   10b6a:	f7fb fb3d 	bl	c1e8 <hal_debugger_connected>
   10b6e:	b100      	cbz	r0, 10b72 <flash_area_id_from_image_slot+0x14>
   10b70:	be01      	bkpt	0x0001
   10b72:	2300      	movs	r3, #0
   10b74:	461a      	mov	r2, r3
   10b76:	4619      	mov	r1, r3
   10b78:	4618      	mov	r0, r3
   10b7a:	f7fb ffe9 	bl	cb50 <__assert_func>
        return FLASH_AREA_IMAGE_0;
   10b7e:	2001      	movs	r0, #1
}
   10b80:	4770      	bx	lr
	...

00010b84 <flash_map_init>:

void
flash_map_init(void)
{
   10b84:	b510      	push	{r4, lr}
   10b86:	b084      	sub	sp, #16

    int num_areas;
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   10b88:	4b1a      	ldr	r3, [pc, #104]	; (10bf4 <flash_map_init+0x70>)
   10b8a:	781b      	ldrb	r3, [r3, #0]
   10b8c:	b193      	cbz	r3, 10bb4 <flash_map_init+0x30>

    rc = hal_flash_init();
   10b8e:	f01d f9cc 	bl	2df2a <hal_flash_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   10b92:	b9c8      	cbnz	r0, 10bc8 <flash_map_init+0x44>
     *    In particular, a FLASH_AREA_BOOTLOADER entry is required for the boot
     *    MMR, as well as an entry for each extended MMR.
     * 2. If we fail to read the flash map from the MMRs, the system continues
     *    to use the default flash map.
     */
    flash_map = sysflash_map_dflt;
   10b94:	4b18      	ldr	r3, [pc, #96]	; (10bf8 <flash_map_init+0x74>)
   10b96:	4a19      	ldr	r2, [pc, #100]	; (10bfc <flash_map_init+0x78>)
   10b98:	601a      	str	r2, [r3, #0]
    flash_map_entries = sizeof sysflash_map_dflt / sizeof sysflash_map_dflt[0];
   10b9a:	4b19      	ldr	r3, [pc, #100]	; (10c00 <flash_map_init+0x7c>)
   10b9c:	2206      	movs	r2, #6
   10b9e:	601a      	str	r2, [r3, #0]

    /* Attempt to read the flash map from the manufacturing meta regions.  On
     * success, use the new flash map instead of the default hardcoded one.
     */
    rc = flash_map_read_mfg(sizeof mfg_areas / sizeof mfg_areas[0],
   10ba0:	aa03      	add	r2, sp, #12
   10ba2:	4918      	ldr	r1, [pc, #96]	; (10c04 <flash_map_init+0x80>)
   10ba4:	200a      	movs	r0, #10
   10ba6:	f7ff fee9 	bl	1097c <flash_map_read_mfg>
                            mfg_areas, &num_areas);
    if (rc != 0 || num_areas == 0) {
   10baa:	b908      	cbnz	r0, 10bb0 <flash_map_init+0x2c>
   10bac:	9b03      	ldr	r3, [sp, #12]
   10bae:	b9c3      	cbnz	r3, 10be2 <flash_map_init+0x5e>
    /* The hardcoded flash map may contain new areas that aren't present in the
     * manufacturing flash map.  Try including them if they don't overlap with
     * any mfg areas.
     */
    flash_map_add_new_dflt_areas();
}
   10bb0:	b004      	add	sp, #16
   10bb2:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   10bb4:	f7fb fb18 	bl	c1e8 <hal_debugger_connected>
   10bb8:	b100      	cbz	r0, 10bbc <flash_map_init+0x38>
   10bba:	be01      	bkpt	0x0001
   10bbc:	2300      	movs	r3, #0
   10bbe:	461a      	mov	r2, r3
   10bc0:	4619      	mov	r1, r3
   10bc2:	4618      	mov	r0, r3
   10bc4:	f7fb ffc4 	bl	cb50 <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
   10bc8:	f7fb fb0e 	bl	c1e8 <hal_debugger_connected>
   10bcc:	b100      	cbz	r0, 10bd0 <flash_map_init+0x4c>
   10bce:	be01      	bkpt	0x0001
   10bd0:	2000      	movs	r0, #0
   10bd2:	9000      	str	r0, [sp, #0]
   10bd4:	4b0c      	ldr	r3, [pc, #48]	; (10c08 <flash_map_init+0x84>)
   10bd6:	681c      	ldr	r4, [r3, #0]
   10bd8:	4603      	mov	r3, r0
   10bda:	4602      	mov	r2, r0
   10bdc:	4601      	mov	r1, r0
   10bde:	47a0      	blx	r4
   10be0:	e7d8      	b.n	10b94 <flash_map_init+0x10>
    flash_map = mfg_areas;
   10be2:	4a05      	ldr	r2, [pc, #20]	; (10bf8 <flash_map_init+0x74>)
   10be4:	4907      	ldr	r1, [pc, #28]	; (10c04 <flash_map_init+0x80>)
   10be6:	6011      	str	r1, [r2, #0]
    flash_map_entries = num_areas;
   10be8:	4a05      	ldr	r2, [pc, #20]	; (10c00 <flash_map_init+0x7c>)
   10bea:	6013      	str	r3, [r2, #0]
    flash_map_add_new_dflt_areas();
   10bec:	f7ff fe88 	bl	10900 <flash_map_add_new_dflt_areas>
   10bf0:	e7de      	b.n	10bb0 <flash_map_init+0x2c>
   10bf2:	bf00      	nop
   10bf4:	20003584 	.word	0x20003584
   10bf8:	200034a8 	.word	0x200034a8
   10bfc:	00032988 	.word	0x00032988
   10c00:	200034ac 	.word	0x200034ac
   10c04:	200019d8 	.word	0x200019d8
   10c08:	20000298 	.word	0x20000298

00010c0c <id_conf_export>:
}

static int
id_conf_export(void (*export_func)(char *name, char *val),
  enum conf_export_tgt tgt)
{
   10c0c:	b510      	push	{r4, lr}
   10c0e:	b098      	sub	sp, #96	; 0x60
   10c10:	4604      	mov	r4, r0
    uint8_t src_buf[HAL_BSP_MAX_ID_LEN];
    char str[sizeof(src_buf) * 2];
    int len;

    if (tgt == CONF_EXPORT_SHOW) {
   10c12:	2901      	cmp	r1, #1
   10c14:	d005      	beq.n	10c22 <id_conf_export+0x16>
#if MYNEWT_VAL(ID_TARGET_PRESENT)
        export_func("id/target", MYNEWT_VAL(TARGET_NAME));
#endif
    }
#if MYNEWT_VAL(ID_SERIAL_PRESENT)
    export_func("id/serial", id_serial);
   10c16:	4911      	ldr	r1, [pc, #68]	; (10c5c <id_conf_export+0x50>)
   10c18:	4811      	ldr	r0, [pc, #68]	; (10c60 <id_conf_export+0x54>)
   10c1a:	47a0      	blx	r4
        export_func("id/model", (char *)id_model);
    }
#endif /* ID_MODEL_LOCAL */
#endif /* ID_MODEL_PRESENT */
    return 0;
}
   10c1c:	2000      	movs	r0, #0
   10c1e:	b018      	add	sp, #96	; 0x60
   10c20:	bd10      	pop	{r4, pc}
        len = hal_bsp_hw_id(src_buf, sizeof(src_buf));
   10c22:	2120      	movs	r1, #32
   10c24:	a810      	add	r0, sp, #64	; 0x40
   10c26:	f01d fd73 	bl	2e710 <hal_bsp_hw_id>
        if (len > 0) {
   10c2a:	1e01      	subs	r1, r0, #0
   10c2c:	dc0e      	bgt.n	10c4c <id_conf_export+0x40>
        export_func("id/hwid", str);
   10c2e:	4669      	mov	r1, sp
   10c30:	480c      	ldr	r0, [pc, #48]	; (10c64 <id_conf_export+0x58>)
   10c32:	47a0      	blx	r4
        export_func("id/bsp", (char *)id_bsp_str);
   10c34:	4b0c      	ldr	r3, [pc, #48]	; (10c68 <id_conf_export+0x5c>)
   10c36:	6819      	ldr	r1, [r3, #0]
   10c38:	480c      	ldr	r0, [pc, #48]	; (10c6c <id_conf_export+0x60>)
   10c3a:	47a0      	blx	r4
        export_func("id/app", (char *)id_app_str);
   10c3c:	4b0c      	ldr	r3, [pc, #48]	; (10c70 <id_conf_export+0x64>)
   10c3e:	6819      	ldr	r1, [r3, #0]
   10c40:	480c      	ldr	r0, [pc, #48]	; (10c74 <id_conf_export+0x68>)
   10c42:	47a0      	blx	r4
        export_func("id/mfghash", (char *)id_mfghash);
   10c44:	490c      	ldr	r1, [pc, #48]	; (10c78 <id_conf_export+0x6c>)
   10c46:	480d      	ldr	r0, [pc, #52]	; (10c7c <id_conf_export+0x70>)
   10c48:	47a0      	blx	r4
   10c4a:	e7e4      	b.n	10c16 <id_conf_export+0xa>
            conf_str_from_bytes(src_buf, len, str, sizeof(str));
   10c4c:	2340      	movs	r3, #64	; 0x40
   10c4e:	466a      	mov	r2, sp
   10c50:	eb0d 0003 	add.w	r0, sp, r3
   10c54:	f7fe fcdc 	bl	f610 <conf_str_from_bytes>
   10c58:	e7e9      	b.n	10c2e <id_conf_export+0x22>
   10c5a:	bf00      	nop
   10c5c:	2000350c 	.word	0x2000350c
   10c60:	000319fc 	.word	0x000319fc
   10c64:	000319d8 	.word	0x000319d8
   10c68:	20000244 	.word	0x20000244
   10c6c:	000319e0 	.word	0x000319e0
   10c70:	20000240 	.word	0x20000240
   10c74:	000319e8 	.word	0x000319e8
   10c78:	200034b0 	.word	0x200034b0
   10c7c:	000319f0 	.word	0x000319f0

00010c80 <id_conf_get>:
    if (argc == 1) {
   10c80:	2801      	cmp	r0, #1
   10c82:	d132      	bne.n	10cea <id_conf_get+0x6a>
{
   10c84:	b570      	push	{r4, r5, r6, lr}
   10c86:	b088      	sub	sp, #32
   10c88:	461d      	mov	r5, r3
   10c8a:	4614      	mov	r4, r2
        if (!strcmp(argv[0], "hwid")) {
   10c8c:	680e      	ldr	r6, [r1, #0]
   10c8e:	491b      	ldr	r1, [pc, #108]	; (10cfc <id_conf_get+0x7c>)
   10c90:	4630      	mov	r0, r6
   10c92:	f7fd fed3 	bl	ea3c <strcmp>
   10c96:	b1a8      	cbz	r0, 10cc4 <id_conf_get+0x44>
        } else if (!strcmp(argv[0], "bsp")) {
   10c98:	4919      	ldr	r1, [pc, #100]	; (10d00 <id_conf_get+0x80>)
   10c9a:	4630      	mov	r0, r6
   10c9c:	f7fd fece 	bl	ea3c <strcmp>
   10ca0:	b1e0      	cbz	r0, 10cdc <id_conf_get+0x5c>
        } else if (!strcmp(argv[0], "app")) {
   10ca2:	4918      	ldr	r1, [pc, #96]	; (10d04 <id_conf_get+0x84>)
   10ca4:	4630      	mov	r0, r6
   10ca6:	f7fd fec9 	bl	ea3c <strcmp>
   10caa:	b1d8      	cbz	r0, 10ce4 <id_conf_get+0x64>
        } else if (!strcmp(argv[0], "serial")) {
   10cac:	4916      	ldr	r1, [pc, #88]	; (10d08 <id_conf_get+0x88>)
   10cae:	4630      	mov	r0, r6
   10cb0:	f7fd fec4 	bl	ea3c <strcmp>
   10cb4:	b1e8      	cbz	r0, 10cf2 <id_conf_get+0x72>
        } else if (!strcmp(argv[0], "mfghash")) {
   10cb6:	4915      	ldr	r1, [pc, #84]	; (10d0c <id_conf_get+0x8c>)
   10cb8:	4630      	mov	r0, r6
   10cba:	f7fd febf 	bl	ea3c <strcmp>
   10cbe:	b9d0      	cbnz	r0, 10cf6 <id_conf_get+0x76>
            return id_mfghash;
   10cc0:	4813      	ldr	r0, [pc, #76]	; (10d10 <id_conf_get+0x90>)
   10cc2:	e00d      	b.n	10ce0 <id_conf_get+0x60>
            len = hal_bsp_hw_id(src_buf, sizeof(src_buf));
   10cc4:	2120      	movs	r1, #32
   10cc6:	4668      	mov	r0, sp
   10cc8:	f01d fd22 	bl	2e710 <hal_bsp_hw_id>
            if (len > 0) {
   10ccc:	1e01      	subs	r1, r0, #0
   10cce:	dd0e      	ble.n	10cee <id_conf_get+0x6e>
                return conf_str_from_bytes(src_buf, len, val, val_len_max);
   10cd0:	462b      	mov	r3, r5
   10cd2:	4622      	mov	r2, r4
   10cd4:	4668      	mov	r0, sp
   10cd6:	f7fe fc9b 	bl	f610 <conf_str_from_bytes>
   10cda:	e001      	b.n	10ce0 <id_conf_get+0x60>
            return (char *)id_bsp_str;
   10cdc:	4b0d      	ldr	r3, [pc, #52]	; (10d14 <id_conf_get+0x94>)
   10cde:	6818      	ldr	r0, [r3, #0]
}
   10ce0:	b008      	add	sp, #32
   10ce2:	bd70      	pop	{r4, r5, r6, pc}
            return (char *)id_app_str;
   10ce4:	4b0c      	ldr	r3, [pc, #48]	; (10d18 <id_conf_get+0x98>)
   10ce6:	6818      	ldr	r0, [r3, #0]
   10ce8:	e7fa      	b.n	10ce0 <id_conf_get+0x60>
    return NULL;
   10cea:	2000      	movs	r0, #0
}
   10cec:	4770      	bx	lr
    return NULL;
   10cee:	2000      	movs	r0, #0
   10cf0:	e7f6      	b.n	10ce0 <id_conf_get+0x60>
            return (char *)id_serial;
   10cf2:	480a      	ldr	r0, [pc, #40]	; (10d1c <id_conf_get+0x9c>)
   10cf4:	e7f4      	b.n	10ce0 <id_conf_get+0x60>
    return NULL;
   10cf6:	2000      	movs	r0, #0
   10cf8:	e7f2      	b.n	10ce0 <id_conf_get+0x60>
   10cfa:	bf00      	nop
   10cfc:	00031a08 	.word	0x00031a08
   10d00:	00031a10 	.word	0x00031a10
   10d04:	00031a14 	.word	0x00031a14
   10d08:	00031a18 	.word	0x00031a18
   10d0c:	00031a20 	.word	0x00031a20
   10d10:	200034b0 	.word	0x200034b0
   10d14:	20000244 	.word	0x20000244
   10d18:	20000240 	.word	0x20000240
   10d1c:	2000350c 	.word	0x2000350c

00010d20 <id_conf_set>:
    if (argc == 1) {
   10d20:	2801      	cmp	r0, #1
   10d22:	d10e      	bne.n	10d42 <id_conf_set+0x22>
{
   10d24:	b510      	push	{r4, lr}
   10d26:	4614      	mov	r4, r2
   10d28:	460b      	mov	r3, r1
        if (!strcmp(argv[0], "serial")) {
   10d2a:	4908      	ldr	r1, [pc, #32]	; (10d4c <id_conf_set+0x2c>)
   10d2c:	6818      	ldr	r0, [r3, #0]
   10d2e:	f7fd fe85 	bl	ea3c <strcmp>
   10d32:	b940      	cbnz	r0, 10d46 <id_conf_set+0x26>
            return CONF_VALUE_SET(val, CONF_STRING, id_serial);
   10d34:	2340      	movs	r3, #64	; 0x40
   10d36:	4a06      	ldr	r2, [pc, #24]	; (10d50 <id_conf_set+0x30>)
   10d38:	2106      	movs	r1, #6
   10d3a:	4620      	mov	r0, r4
   10d3c:	f7fe fb63 	bl	f406 <conf_value_from_str>
}
   10d40:	bd10      	pop	{r4, pc}
    return OS_ENOENT;
   10d42:	200a      	movs	r0, #10
}
   10d44:	4770      	bx	lr
    return OS_ENOENT;
   10d46:	200a      	movs	r0, #10
   10d48:	e7fa      	b.n	10d40 <id_conf_set+0x20>
   10d4a:	bf00      	nop
   10d4c:	00031a18 	.word	0x00031a18
   10d50:	2000350c 	.word	0x2000350c

00010d54 <id_read_mfghash>:

static void
id_read_mfghash(void)
{
   10d54:	b530      	push	{r4, r5, lr}
   10d56:	b08b      	sub	sp, #44	; 0x2c
    uint8_t raw_hash[MFG_HASH_SZ];
    struct mfg_reader reader;
    int str_off;
    int rc;

    memset(id_mfghash, 0, sizeof id_mfghash);
   10d58:	225a      	movs	r2, #90	; 0x5a
   10d5a:	2100      	movs	r1, #0
   10d5c:	4814      	ldr	r0, [pc, #80]	; (10db0 <id_read_mfghash+0x5c>)
   10d5e:	f7fd fe47 	bl	e9f0 <memset>

    mfg_open(&reader);
   10d62:	4668      	mov	r0, sp
   10d64:	f000 fe74 	bl	11a50 <mfg_open>

    str_off = 0;
   10d68:	2400      	movs	r4, #0
   10d6a:	e009      	b.n	10d80 <id_read_mfghash+0x2c>
            id_mfghash[str_off] = ':';
            str_off++;
        }

        /* Append the SHA256 hash as a base64-encoded string. */
        base64_encode(raw_hash, sizeof raw_hash, &id_mfghash[str_off], 1);
   10d6c:	4d10      	ldr	r5, [pc, #64]	; (10db0 <id_read_mfghash+0x5c>)
   10d6e:	2301      	movs	r3, #1
   10d70:	192a      	adds	r2, r5, r4
   10d72:	2120      	movs	r1, #32
   10d74:	a802      	add	r0, sp, #8
   10d76:	f01b faa3 	bl	2c2c0 <base64_encode>
        str_off += ID_BASE64_MFG_HASH_SZ;
   10d7a:	342c      	adds	r4, #44	; 0x2c

        id_mfghash[str_off] = '\0';
   10d7c:	2300      	movs	r3, #0
   10d7e:	552b      	strb	r3, [r5, r4]
        rc = mfg_seek_next_with_type(&reader, MFG_META_TLV_TYPE_HASH);
   10d80:	2101      	movs	r1, #1
   10d82:	4668      	mov	r0, sp
   10d84:	f000 fe27 	bl	119d6 <mfg_seek_next_with_type>
        if (rc != 0) {
   10d88:	b978      	cbnz	r0, 10daa <id_read_mfghash+0x56>
        if (str_off + ID_BASE64_MFG_HASH_SZ + 1 > sizeof id_mfghash) {
   10d8a:	f104 032d 	add.w	r3, r4, #45	; 0x2d
   10d8e:	2b5a      	cmp	r3, #90	; 0x5a
   10d90:	d80b      	bhi.n	10daa <id_read_mfghash+0x56>
        rc = mfg_read_tlv_hash(&reader, raw_hash);
   10d92:	a902      	add	r1, sp, #8
   10d94:	4668      	mov	r0, sp
   10d96:	f000 fe35 	bl	11a04 <mfg_read_tlv_hash>
        if (rc != 0) {
   10d9a:	b930      	cbnz	r0, 10daa <id_read_mfghash+0x56>
        if (str_off != 0) {
   10d9c:	2c00      	cmp	r4, #0
   10d9e:	d0e5      	beq.n	10d6c <id_read_mfghash+0x18>
            id_mfghash[str_off] = ':';
   10da0:	4b03      	ldr	r3, [pc, #12]	; (10db0 <id_read_mfghash+0x5c>)
   10da2:	223a      	movs	r2, #58	; 0x3a
   10da4:	551a      	strb	r2, [r3, r4]
            str_off++;
   10da6:	3401      	adds	r4, #1
   10da8:	e7e0      	b.n	10d6c <id_read_mfghash+0x18>
    }
}
   10daa:	b00b      	add	sp, #44	; 0x2c
   10dac:	bd30      	pop	{r4, r5, pc}
   10dae:	bf00      	nop
   10db0:	200034b0 	.word	0x200034b0

00010db4 <id_init>:

void
id_init(void)
{
   10db4:	b510      	push	{r4, lr}
   10db6:	b082      	sub	sp, #8
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   10db8:	4b10      	ldr	r3, [pc, #64]	; (10dfc <id_init+0x48>)
   10dba:	781b      	ldrb	r3, [r3, #0]
   10dbc:	b13b      	cbz	r3, 10dce <id_init+0x1a>

    rc = conf_register(&id_conf);
   10dbe:	4810      	ldr	r0, [pc, #64]	; (10e00 <id_init+0x4c>)
   10dc0:	f7fe fade 	bl	f380 <conf_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
   10dc4:	b968      	cbnz	r0, 10de2 <id_init+0x2e>

    /* Attempt to read the manufacturing image hash from the meta region. */
    id_read_mfghash();
   10dc6:	f7ff ffc5 	bl	10d54 <id_read_mfghash>
}
   10dca:	b002      	add	sp, #8
   10dcc:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   10dce:	f7fb fa0b 	bl	c1e8 <hal_debugger_connected>
   10dd2:	b100      	cbz	r0, 10dd6 <id_init+0x22>
   10dd4:	be01      	bkpt	0x0001
   10dd6:	2300      	movs	r3, #0
   10dd8:	461a      	mov	r2, r3
   10dda:	4619      	mov	r1, r3
   10ddc:	4618      	mov	r0, r3
   10dde:	f7fb feb7 	bl	cb50 <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
   10de2:	f7fb fa01 	bl	c1e8 <hal_debugger_connected>
   10de6:	b100      	cbz	r0, 10dea <id_init+0x36>
   10de8:	be01      	bkpt	0x0001
   10dea:	2000      	movs	r0, #0
   10dec:	9000      	str	r0, [sp, #0]
   10dee:	4b05      	ldr	r3, [pc, #20]	; (10e04 <id_init+0x50>)
   10df0:	681c      	ldr	r4, [r3, #0]
   10df2:	4603      	mov	r3, r0
   10df4:	4602      	mov	r2, r0
   10df6:	4601      	mov	r1, r0
   10df8:	47a0      	blx	r4
   10dfa:	e7e4      	b.n	10dc6 <id_init+0x12>
   10dfc:	20003584 	.word	0x20003584
   10e00:	20000248 	.word	0x20000248
   10e04:	20000298 	.word	0x20000298

00010e08 <log_module_find_idx>:
log_module_find_idx(uint8_t id)
{
    const struct log_module_entry *entry;
    int i;

    for (i = 0; i < g_log_module_count; i++) {
   10e08:	2300      	movs	r3, #0
   10e0a:	4a07      	ldr	r2, [pc, #28]	; (10e28 <log_module_find_idx+0x20>)
   10e0c:	6812      	ldr	r2, [r2, #0]
   10e0e:	429a      	cmp	r2, r3
   10e10:	dd06      	ble.n	10e20 <log_module_find_idx+0x18>
        entry = &g_log_module_list[i];
        if (entry->id == id) {
   10e12:	4a06      	ldr	r2, [pc, #24]	; (10e2c <log_module_find_idx+0x24>)
   10e14:	f932 2033 	ldrsh.w	r2, [r2, r3, lsl #3]
   10e18:	4282      	cmp	r2, r0
   10e1a:	d003      	beq.n	10e24 <log_module_find_idx+0x1c>
    for (i = 0; i < g_log_module_count; i++) {
   10e1c:	3301      	adds	r3, #1
   10e1e:	e7f4      	b.n	10e0a <log_module_find_idx+0x2>
            return i;
        }
    }

    return -1;
   10e20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
   10e24:	4618      	mov	r0, r3
   10e26:	4770      	bx	lr
   10e28:	20001a50 	.word	0x20001a50
   10e2c:	20001a54 	.word	0x20001a54

00010e30 <log_registered>:
static int
log_registered(struct log *log)
{
    struct log *cur;

    STAILQ_FOREACH(cur, &g_log_list, l_next) {
   10e30:	4b05      	ldr	r3, [pc, #20]	; (10e48 <log_registered+0x18>)
   10e32:	681b      	ldr	r3, [r3, #0]
   10e34:	b11b      	cbz	r3, 10e3e <log_registered+0xe>
        if (cur == log) {
   10e36:	4283      	cmp	r3, r0
   10e38:	d003      	beq.n	10e42 <log_registered+0x12>
    STAILQ_FOREACH(cur, &g_log_list, l_next) {
   10e3a:	68db      	ldr	r3, [r3, #12]
   10e3c:	e7fa      	b.n	10e34 <log_registered+0x4>
            return 1;
        }
    }

    return 0;
   10e3e:	2000      	movs	r0, #0
   10e40:	4770      	bx	lr
            return 1;
   10e42:	2001      	movs	r0, #1
}
   10e44:	4770      	bx	lr
   10e46:	bf00      	nop
   10e48:	20000268 	.word	0x20000268

00010e4c <log_chk_type>:
{
    int rc;

    rc = OS_OK;

    switch(etype) {
   10e4c:	2802      	cmp	r0, #2
   10e4e:	d801      	bhi.n	10e54 <log_chk_type+0x8>
    rc = OS_OK;
   10e50:	2000      	movs	r0, #0
   10e52:	4770      	bx	lr
        case LOG_ETYPE_STRING:
        case LOG_ETYPE_BINARY:
        case LOG_ETYPE_CBOR:
            break;
        default:
            rc = OS_ERROR;
   10e54:	200c      	movs	r0, #12
            break;
    }

    return rc;
}
   10e56:	4770      	bx	lr

00010e58 <log_chk_max_entry_len>:
log_chk_max_entry_len(struct log *log, uint16_t len)
{
    int rc;

    rc = OS_OK;
    if (log->l_max_entry_len != 0) {
   10e58:	8b43      	ldrh	r3, [r0, #26]
   10e5a:	b12b      	cbz	r3, 10e68 <log_chk_max_entry_len+0x10>
        if (len > log->l_max_entry_len) {
   10e5c:	428b      	cmp	r3, r1
   10e5e:	d201      	bcs.n	10e64 <log_chk_max_entry_len+0xc>
            LOG_STATS_INC(log, too_long);
            rc = OS_ENOMEM;
   10e60:	2001      	movs	r0, #1
        }
    }

    return rc;
}
   10e62:	4770      	bx	lr
    rc = OS_OK;
   10e64:	2000      	movs	r0, #0
   10e66:	4770      	bx	lr
   10e68:	2000      	movs	r0, #0
   10e6a:	4770      	bx	lr

00010e6c <log_call_append_cb>:
/**
 * Calls the given log's append callback, if it has one.
 */
static void
log_call_append_cb(struct log *log, uint32_t idx)
{
   10e6c:	b500      	push	{lr}
   10e6e:	b083      	sub	sp, #12
     * preventing a TOCTTOU race.
     * (This all assumes that function pointer reads and writes are atomic.)
     */
    log_append_cb * volatile cb;

    cb = log->l_append_cb;
   10e70:	6903      	ldr	r3, [r0, #16]
   10e72:	9301      	str	r3, [sp, #4]
    if (cb != NULL) {
   10e74:	9b01      	ldr	r3, [sp, #4]
   10e76:	b10b      	cbz	r3, 10e7c <log_call_append_cb+0x10>
        cb(log, idx);
   10e78:	9b01      	ldr	r3, [sp, #4]
   10e7a:	4798      	blx	r3
    }
}
   10e7c:	b003      	add	sp, #12
   10e7e:	f85d fb04 	ldr.w	pc, [sp], #4
   10e82:	0000      	movs	r0, r0
   10e84:	0000      	movs	r0, r0
	...

00010e88 <log_append_prepare>:
{
   10e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10e8c:	b087      	sub	sp, #28
   10e8e:	4606      	mov	r6, r0
   10e90:	4689      	mov	r9, r1
   10e92:	4615      	mov	r5, r2
   10e94:	469a      	mov	sl, r3
   10e96:	9c10      	ldr	r4, [sp, #64]	; 0x40
    rc = log_chk_type(etype);
   10e98:	4618      	mov	r0, r3
   10e9a:	f7ff ffd7 	bl	10e4c <log_chk_type>
    assert(rc == OS_OK);
   10e9e:	2800      	cmp	r0, #0
   10ea0:	d140      	bne.n	10f24 <log_append_prepare+0x9c>
    if (log->l_name == NULL || log->l_log == NULL) {
   10ea2:	6833      	ldr	r3, [r6, #0]
   10ea4:	2b00      	cmp	r3, #0
   10ea6:	d06f      	beq.n	10f88 <log_append_prepare+0x100>
   10ea8:	6873      	ldr	r3, [r6, #4]
   10eaa:	2b00      	cmp	r3, #0
   10eac:	d06f      	beq.n	10f8e <log_append_prepare+0x106>
    if (level > LOG_LEVEL_MAX) {
   10eae:	2d0f      	cmp	r5, #15
   10eb0:	d900      	bls.n	10eb4 <log_append_prepare+0x2c>
        level = LOG_LEVEL_MAX;
   10eb2:	250f      	movs	r5, #15
    if (log->l_log->log_type == LOG_TYPE_STORAGE) {
   10eb4:	681b      	ldr	r3, [r3, #0]
   10eb6:	2b02      	cmp	r3, #2
   10eb8:	d03e      	beq.n	10f38 <log_append_prepare+0xb0>
    if (level < log->l_level) {
   10eba:	7e33      	ldrb	r3, [r6, #24]
   10ebc:	42ab      	cmp	r3, r5
   10ebe:	d869      	bhi.n	10f94 <log_append_prepare+0x10c>
    if (level < log_level_get(module)) {
   10ec0:	4648      	mov	r0, r9
   10ec2:	f000 fae1 	bl	11488 <log_level_get>
   10ec6:	42a8      	cmp	r0, r5
   10ec8:	d867      	bhi.n	10f9a <log_append_prepare+0x112>
    OS_ENTER_CRITICAL(sr);
   10eca:	f7fd fb33 	bl	e534 <os_arch_save_sr>
    idx = g_log_info.li_next_index++;
   10ece:	4b36      	ldr	r3, [pc, #216]	; (10fa8 <log_append_prepare+0x120>)
   10ed0:	f8d3 8000 	ldr.w	r8, [r3]
   10ed4:	f108 0201 	add.w	r2, r8, #1
   10ed8:	601a      	str	r2, [r3, #0]
    OS_EXIT_CRITICAL(sr);
   10eda:	f7fd fb31 	bl	e540 <os_arch_restore_sr>
    rc = os_gettimeofday(&tv, NULL);
   10ede:	2100      	movs	r1, #0
   10ee0:	a802      	add	r0, sp, #8
   10ee2:	f7fd faa3 	bl	e42c <os_gettimeofday>
    if (rc || tv.tv_sec < UTC01_01_2016) {
   10ee6:	4683      	mov	fp, r0
   10ee8:	b948      	cbnz	r0, 10efe <log_append_prepare+0x76>
   10eea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   10eee:	e9cd 0100 	strd	r0, r1, [sp]
   10ef2:	a32b      	add	r3, pc, #172	; (adr r3, 10fa0 <log_append_prepare+0x118>)
   10ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
   10ef8:	4282      	cmp	r2, r0
   10efa:	418b      	sbcs	r3, r1
   10efc:	db20      	blt.n	10f40 <log_append_prepare+0xb8>
        ue->ue_ts = os_get_uptime_usec();
   10efe:	f7fd facf 	bl	e4a0 <os_get_uptime_usec>
   10f02:	6020      	str	r0, [r4, #0]
   10f04:	6061      	str	r1, [r4, #4]
    ue->ue_level = level;
   10f06:	7365      	strb	r5, [r4, #13]
    ue->ue_module = module;
   10f08:	f884 900c 	strb.w	r9, [r4, #12]
    ue->ue_index = idx;
   10f0c:	f8c4 8008 	str.w	r8, [r4, #8]
    ue->ue_etype = etype;
   10f10:	7ba3      	ldrb	r3, [r4, #14]
   10f12:	f36a 0303 	bfi	r3, sl, #0, #4
    ue->ue_flags = 0;
   10f16:	f36f 1307 	bfc	r3, #4, #4
   10f1a:	73a3      	strb	r3, [r4, #14]
}
   10f1c:	4658      	mov	r0, fp
   10f1e:	b007      	add	sp, #28
   10f20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    assert(rc == OS_OK);
   10f24:	f7fb f960 	bl	c1e8 <hal_debugger_connected>
   10f28:	b100      	cbz	r0, 10f2c <log_append_prepare+0xa4>
   10f2a:	be01      	bkpt	0x0001
   10f2c:	2300      	movs	r3, #0
   10f2e:	461a      	mov	r2, r3
   10f30:	4619      	mov	r1, r3
   10f32:	4618      	mov	r0, r3
   10f34:	f7fb fe0c 	bl	cb50 <__assert_func>
        log_written = 1;
   10f38:	4b1c      	ldr	r3, [pc, #112]	; (10fac <log_append_prepare+0x124>)
   10f3a:	2201      	movs	r2, #1
   10f3c:	701a      	strb	r2, [r3, #0]
   10f3e:	e7bc      	b.n	10eba <log_append_prepare+0x32>
        ue->ue_ts = tv.tv_sec * 1000000 + tv.tv_usec;
   10f40:	e9dd 6700 	ldrd	r6, r7, [sp]
   10f44:	0179      	lsls	r1, r7, #5
   10f46:	0172      	lsls	r2, r6, #5
   10f48:	ea41 63d6 	orr.w	r3, r1, r6, lsr #27
   10f4c:	1b96      	subs	r6, r2, r6
   10f4e:	eb63 0707 	sbc.w	r7, r3, r7
   10f52:	0279      	lsls	r1, r7, #9
   10f54:	ea41 51d6 	orr.w	r1, r1, r6, lsr #23
   10f58:	0270      	lsls	r0, r6, #9
   10f5a:	e9dd 2300 	ldrd	r2, r3, [sp]
   10f5e:	1812      	adds	r2, r2, r0
   10f60:	414b      	adcs	r3, r1
   10f62:	461f      	mov	r7, r3
   10f64:	0199      	lsls	r1, r3, #6
   10f66:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
   10f6a:	0190      	lsls	r0, r2, #6
   10f6c:	1a82      	subs	r2, r0, r2
   10f6e:	eb61 0307 	sbc.w	r3, r1, r7
   10f72:	e9dd 6700 	ldrd	r6, r7, [sp]
   10f76:	18b6      	adds	r6, r6, r2
   10f78:	415f      	adcs	r7, r3
   10f7a:	9b04      	ldr	r3, [sp, #16]
   10f7c:	18f1      	adds	r1, r6, r3
   10f7e:	eb47 72e3 	adc.w	r2, r7, r3, asr #31
   10f82:	6021      	str	r1, [r4, #0]
   10f84:	6062      	str	r2, [r4, #4]
   10f86:	e7be      	b.n	10f06 <log_append_prepare+0x7e>
        rc = -1;
   10f88:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
   10f8c:	e7c6      	b.n	10f1c <log_append_prepare+0x94>
   10f8e:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
   10f92:	e7c3      	b.n	10f1c <log_append_prepare+0x94>
        rc = -1;
   10f94:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
   10f98:	e7c0      	b.n	10f1c <log_append_prepare+0x94>
        rc = -1;
   10f9a:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
    return (rc);
   10f9e:	e7bd      	b.n	10f1c <log_append_prepare+0x94>
   10fa0:	5685c17f 	.word	0x5685c17f
   10fa4:	00000000 	.word	0x00000000
   10fa8:	2000354c 	.word	0x2000354c
   10fac:	20001a5c 	.word	0x20001a5c

00010fb0 <log_init>:
{
   10fb0:	b508      	push	{r3, lr}
    SYSINIT_ASSERT_ACTIVE();
   10fb2:	4b0d      	ldr	r3, [pc, #52]	; (10fe8 <log_init+0x38>)
   10fb4:	781b      	ldrb	r3, [r3, #0]
   10fb6:	b163      	cbz	r3, 10fd2 <log_init+0x22>
    log_written = 0;
   10fb8:	2300      	movs	r3, #0
   10fba:	4a0c      	ldr	r2, [pc, #48]	; (10fec <log_init+0x3c>)
   10fbc:	7013      	strb	r3, [r2, #0]
    STAILQ_INIT(&g_log_list);
   10fbe:	4a0c      	ldr	r2, [pc, #48]	; (10ff0 <log_init+0x40>)
   10fc0:	6013      	str	r3, [r2, #0]
   10fc2:	6052      	str	r2, [r2, #4]
    g_log_info.li_version = MYNEWT_VAL(LOG_VERSION);
   10fc4:	4a0b      	ldr	r2, [pc, #44]	; (10ff4 <log_init+0x44>)
   10fc6:	2103      	movs	r1, #3
   10fc8:	7111      	strb	r1, [r2, #4]
    g_log_info.li_next_index = 0;
   10fca:	6013      	str	r3, [r2, #0]
    log_console_init();
   10fcc:	f000 fa2c 	bl	11428 <log_console_init>
}
   10fd0:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   10fd2:	f7fb f909 	bl	c1e8 <hal_debugger_connected>
   10fd6:	b100      	cbz	r0, 10fda <log_init+0x2a>
   10fd8:	be01      	bkpt	0x0001
   10fda:	2300      	movs	r3, #0
   10fdc:	461a      	mov	r2, r3
   10fde:	4619      	mov	r1, r3
   10fe0:	4618      	mov	r0, r3
   10fe2:	f7fb fdb5 	bl	cb50 <__assert_func>
   10fe6:	bf00      	nop
   10fe8:	20003584 	.word	0x20003584
   10fec:	20001a5c 	.word	0x20001a5c
   10ff0:	20000268 	.word	0x20000268
   10ff4:	2000354c 	.word	0x2000354c

00010ff8 <log_list_get_next>:
    if (log == NULL) {
   10ff8:	b108      	cbz	r0, 10ffe <log_list_get_next+0x6>
        next = STAILQ_NEXT(log, l_next);
   10ffa:	68c0      	ldr	r0, [r0, #12]
}
   10ffc:	4770      	bx	lr
        next = STAILQ_FIRST(&g_log_list);
   10ffe:	4b01      	ldr	r3, [pc, #4]	; (11004 <log_list_get_next+0xc>)
   11000:	6818      	ldr	r0, [r3, #0]
   11002:	4770      	bx	lr
   11004:	20000268 	.word	0x20000268

00011008 <log_module_get_name>:
    switch (module) {
   11008:	2804      	cmp	r0, #4
   1100a:	d011      	beq.n	11030 <log_module_get_name+0x28>
   1100c:	2806      	cmp	r0, #6
   1100e:	d00d      	beq.n	1102c <log_module_get_name+0x24>
   11010:	b150      	cbz	r0, 11028 <log_module_get_name+0x20>
{
   11012:	b508      	push	{r3, lr}
        idx = log_module_find_idx(module);
   11014:	f7ff fef8 	bl	10e08 <log_module_find_idx>
        if (idx != -1) {
   11018:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   1101c:	d00a      	beq.n	11034 <log_module_get_name+0x2c>
            return g_log_module_list[idx].name;
   1101e:	4b06      	ldr	r3, [pc, #24]	; (11038 <log_module_get_name+0x30>)
   11020:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   11024:	6840      	ldr	r0, [r0, #4]
}
   11026:	bd08      	pop	{r3, pc}
        return "DEFAULT";
   11028:	4804      	ldr	r0, [pc, #16]	; (1103c <log_module_get_name+0x34>)
   1102a:	4770      	bx	lr
        return "REBOOT";
   1102c:	4804      	ldr	r0, [pc, #16]	; (11040 <log_module_get_name+0x38>)
   1102e:	4770      	bx	lr
        return "NIMBLE_HOST";
   11030:	4804      	ldr	r0, [pc, #16]	; (11044 <log_module_get_name+0x3c>)
}
   11032:	4770      	bx	lr
    return NULL;
   11034:	2000      	movs	r0, #0
   11036:	e7f6      	b.n	11026 <log_module_get_name+0x1e>
   11038:	20001a54 	.word	0x20001a54
   1103c:	00031a44 	.word	0x00031a44
   11040:	00031a58 	.word	0x00031a58
   11044:	00031a4c 	.word	0x00031a4c

00011048 <log_hdr_len>:
    if (hdr->ue_flags & LOG_FLAGS_IMG_HASH) {
   11048:	7b83      	ldrb	r3, [r0, #14]
   1104a:	f013 0f10 	tst.w	r3, #16
   1104e:	d101      	bne.n	11054 <log_hdr_len+0xc>
    return LOG_BASE_ENTRY_HDR_SIZE;
   11050:	200f      	movs	r0, #15
}
   11052:	4770      	bx	lr
        return LOG_BASE_ENTRY_HDR_SIZE + LOG_IMG_HASHLEN;
   11054:	2013      	movs	r0, #19
   11056:	4770      	bx	lr

00011058 <log_append_body>:
}

int
log_append_body(struct log *log, uint8_t module, uint8_t level, uint8_t etype,
                const void *body, uint16_t body_len)
{
   11058:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1105c:	b089      	sub	sp, #36	; 0x24
   1105e:	4606      	mov	r6, r0
   11060:	460f      	mov	r7, r1
   11062:	4690      	mov	r8, r2
   11064:	4699      	mov	r9, r3
   11066:	f8bd 5044 	ldrh.w	r5, [sp, #68]	; 0x44
    struct log_entry_hdr hdr;
    int rc;

    LOG_STATS_INC(log, writes);

    rc = log_chk_max_entry_len(log, body_len);
   1106a:	4629      	mov	r1, r5
   1106c:	f7ff fef4 	bl	10e58 <log_chk_max_entry_len>
    if (rc != OS_OK) {
   11070:	4604      	mov	r4, r0
   11072:	b118      	cbz	r0, 1107c <log_append_body+0x24>
    }

    log_call_append_cb(log, hdr.ue_index);

    return 0;
}
   11074:	4620      	mov	r0, r4
   11076:	b009      	add	sp, #36	; 0x24
   11078:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    rc = log_append_prepare(log, module, level, etype, &hdr);
   1107c:	ab03      	add	r3, sp, #12
   1107e:	9300      	str	r3, [sp, #0]
   11080:	464b      	mov	r3, r9
   11082:	4642      	mov	r2, r8
   11084:	4639      	mov	r1, r7
   11086:	4630      	mov	r0, r6
   11088:	f7ff fefe 	bl	10e88 <log_append_prepare>
    if (rc != 0) {
   1108c:	4604      	mov	r4, r0
   1108e:	2800      	cmp	r0, #0
   11090:	d1f0      	bne.n	11074 <log_append_body+0x1c>
    rc = log->l_log->log_append_body(log, &hdr, body, body_len);
   11092:	6873      	ldr	r3, [r6, #4]
   11094:	691c      	ldr	r4, [r3, #16]
   11096:	462b      	mov	r3, r5
   11098:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1109a:	a903      	add	r1, sp, #12
   1109c:	4630      	mov	r0, r6
   1109e:	47a0      	blx	r4
    if (rc != 0) {
   110a0:	4604      	mov	r4, r0
   110a2:	2800      	cmp	r0, #0
   110a4:	d1e6      	bne.n	11074 <log_append_body+0x1c>
    log_call_append_cb(log, hdr.ue_index);
   110a6:	9905      	ldr	r1, [sp, #20]
   110a8:	4630      	mov	r0, r6
   110aa:	f7ff fedf 	bl	10e6c <log_call_append_cb>
    return 0;
   110ae:	e7e1      	b.n	11074 <log_append_body+0x1c>

000110b0 <log_walk>:
}

int
log_walk(struct log *log, log_walk_func_t walk_func,
         struct log_offset *log_offset)
{
   110b0:	b508      	push	{r3, lr}
    int rc;

    rc = log->l_log->log_walk(log, walk_func, log_offset);
   110b2:	6843      	ldr	r3, [r0, #4]
   110b4:	69db      	ldr	r3, [r3, #28]
   110b6:	4798      	blx	r3
    }

    return (0);
err:
    return (rc);
}
   110b8:	bd08      	pop	{r3, pc}
	...

000110bc <log_read_last_hdr>:
{
   110bc:	b530      	push	{r4, r5, lr}
   110be:	b089      	sub	sp, #36	; 0x24
    arg.hdr = out_hdr;
   110c0:	9106      	str	r1, [sp, #24]
    arg.read_success = 0;
   110c2:	2300      	movs	r3, #0
   110c4:	9307      	str	r3, [sp, #28]
    log_offset.lo_arg = &arg;
   110c6:	aa06      	add	r2, sp, #24
   110c8:	9204      	str	r2, [sp, #16]
    log_offset.lo_ts = -1;
   110ca:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   110ce:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   110d2:	e9cd 4500 	strd	r4, r5, [sp]
    log_offset.lo_index = 0;
   110d6:	9302      	str	r3, [sp, #8]
    log_offset.lo_data_len = 0;
   110d8:	9303      	str	r3, [sp, #12]
    log_walk(log, log_read_hdr_walk, &log_offset);
   110da:	466a      	mov	r2, sp
   110dc:	4905      	ldr	r1, [pc, #20]	; (110f4 <log_read_last_hdr+0x38>)
   110de:	f7ff ffe7 	bl	110b0 <log_walk>
    if (!arg.read_success) {
   110e2:	9b07      	ldr	r3, [sp, #28]
   110e4:	b113      	cbz	r3, 110ec <log_read_last_hdr+0x30>
    return 0;
   110e6:	2000      	movs	r0, #0
}
   110e8:	b009      	add	sp, #36	; 0x24
   110ea:	bd30      	pop	{r4, r5, pc}
        return -1;
   110ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   110f0:	e7fa      	b.n	110e8 <log_read_last_hdr+0x2c>
   110f2:	bf00      	nop
   110f4:	000112e7 	.word	0x000112e7

000110f8 <log_register>:
{
   110f8:	b530      	push	{r4, r5, lr}
   110fa:	b087      	sub	sp, #28
   110fc:	460c      	mov	r4, r1
   110fe:	f89d 1028 	ldrb.w	r1, [sp, #40]	; 0x28
    assert(!log_written);
   11102:	4d2e      	ldr	r5, [pc, #184]	; (111bc <log_register+0xc4>)
   11104:	782d      	ldrb	r5, [r5, #0]
   11106:	bb3d      	cbnz	r5, 11158 <log_register+0x60>
    if (level > LOG_LEVEL_MAX) {
   11108:	290f      	cmp	r1, #15
   1110a:	d900      	bls.n	1110e <log_register+0x16>
        level = LOG_LEVEL_MAX;
   1110c:	210f      	movs	r1, #15
    log->l_name = name;
   1110e:	6020      	str	r0, [r4, #0]
    log->l_log = lh;
   11110:	6062      	str	r2, [r4, #4]
    log->l_arg = arg;
   11112:	60a3      	str	r3, [r4, #8]
    log->l_level = level;
   11114:	7621      	strb	r1, [r4, #24]
    log->l_append_cb = NULL;
   11116:	2300      	movs	r3, #0
   11118:	6123      	str	r3, [r4, #16]
    log->l_max_entry_len = 0;
   1111a:	8363      	strh	r3, [r4, #26]
    if (!log_registered(log)) {
   1111c:	4620      	mov	r0, r4
   1111e:	f7ff fe87 	bl	10e30 <log_registered>
   11122:	b938      	cbnz	r0, 11134 <log_register+0x3c>
        STAILQ_INSERT_TAIL(&g_log_list, log, l_next);
   11124:	2300      	movs	r3, #0
   11126:	60e3      	str	r3, [r4, #12]
   11128:	4b25      	ldr	r3, [pc, #148]	; (111c0 <log_register+0xc8>)
   1112a:	685a      	ldr	r2, [r3, #4]
   1112c:	6014      	str	r4, [r2, #0]
   1112e:	f104 020c 	add.w	r2, r4, #12
   11132:	605a      	str	r2, [r3, #4]
    if (log->l_log->log_registered) {
   11134:	6863      	ldr	r3, [r4, #4]
   11136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   11138:	b31b      	cbz	r3, 11182 <log_register+0x8a>
        rc = log->l_log->log_registered(log);
   1113a:	4620      	mov	r0, r4
   1113c:	4798      	blx	r3
        if (rc) {
   1113e:	4605      	mov	r5, r0
   11140:	b1f8      	cbz	r0, 11182 <log_register+0x8a>
            STAILQ_REMOVE(&g_log_list, log, log, l_next);
   11142:	4b1f      	ldr	r3, [pc, #124]	; (111c0 <log_register+0xc8>)
   11144:	681a      	ldr	r2, [r3, #0]
   11146:	42a2      	cmp	r2, r4
   11148:	d111      	bne.n	1116e <log_register+0x76>
   1114a:	68d3      	ldr	r3, [r2, #12]
   1114c:	4a1c      	ldr	r2, [pc, #112]	; (111c0 <log_register+0xc8>)
   1114e:	6013      	str	r3, [r2, #0]
   11150:	b9e3      	cbnz	r3, 1118c <log_register+0x94>
   11152:	4613      	mov	r3, r2
   11154:	605a      	str	r2, [r3, #4]
   11156:	e019      	b.n	1118c <log_register+0x94>
    assert(!log_written);
   11158:	f7fb f846 	bl	c1e8 <hal_debugger_connected>
   1115c:	b100      	cbz	r0, 11160 <log_register+0x68>
   1115e:	be01      	bkpt	0x0001
   11160:	2300      	movs	r3, #0
   11162:	461a      	mov	r2, r3
   11164:	4619      	mov	r1, r3
   11166:	4618      	mov	r0, r3
   11168:	f7fb fcf2 	bl	cb50 <__assert_func>
            STAILQ_REMOVE(&g_log_list, log, log, l_next);
   1116c:	461a      	mov	r2, r3
   1116e:	68d3      	ldr	r3, [r2, #12]
   11170:	42a3      	cmp	r3, r4
   11172:	d1fb      	bne.n	1116c <log_register+0x74>
   11174:	68db      	ldr	r3, [r3, #12]
   11176:	60d3      	str	r3, [r2, #12]
   11178:	b943      	cbnz	r3, 1118c <log_register+0x94>
   1117a:	320c      	adds	r2, #12
   1117c:	4b10      	ldr	r3, [pc, #64]	; (111c0 <log_register+0xc8>)
   1117e:	605a      	str	r2, [r3, #4]
   11180:	e004      	b.n	1118c <log_register+0x94>
    if (log->l_log->log_type == LOG_TYPE_STORAGE) {
   11182:	6863      	ldr	r3, [r4, #4]
   11184:	681b      	ldr	r3, [r3, #0]
   11186:	2b02      	cmp	r3, #2
   11188:	d003      	beq.n	11192 <log_register+0x9a>
    return (0);
   1118a:	2500      	movs	r5, #0
}
   1118c:	4628      	mov	r0, r5
   1118e:	b007      	add	sp, #28
   11190:	bd30      	pop	{r4, r5, pc}
        rc = log_read_last_hdr(log, &hdr);
   11192:	a901      	add	r1, sp, #4
   11194:	4620      	mov	r0, r4
   11196:	f7ff ff91 	bl	110bc <log_read_last_hdr>
        if (rc == 0) {
   1119a:	4605      	mov	r5, r0
   1119c:	b108      	cbz	r0, 111a2 <log_register+0xaa>
    return (0);
   1119e:	2500      	movs	r5, #0
   111a0:	e7f4      	b.n	1118c <log_register+0x94>
            OS_ENTER_CRITICAL(sr);
   111a2:	f7fd f9c7 	bl	e534 <os_arch_save_sr>
            if (hdr.ue_index >= g_log_info.li_next_index) {
   111a6:	9b03      	ldr	r3, [sp, #12]
   111a8:	4a06      	ldr	r2, [pc, #24]	; (111c4 <log_register+0xcc>)
   111aa:	6812      	ldr	r2, [r2, #0]
   111ac:	4293      	cmp	r3, r2
   111ae:	d302      	bcc.n	111b6 <log_register+0xbe>
                g_log_info.li_next_index = hdr.ue_index + 1;
   111b0:	3301      	adds	r3, #1
   111b2:	4a04      	ldr	r2, [pc, #16]	; (111c4 <log_register+0xcc>)
   111b4:	6013      	str	r3, [r2, #0]
            OS_EXIT_CRITICAL(sr);
   111b6:	f7fd f9c3 	bl	e540 <os_arch_restore_sr>
   111ba:	e7e7      	b.n	1118c <log_register+0x94>
   111bc:	20001a5c 	.word	0x20001a5c
   111c0:	20000268 	.word	0x20000268
   111c4:	2000354c 	.word	0x2000354c

000111c8 <log_walk_body>:
}

int
log_walk_body(struct log *log, log_walk_body_func_t walk_body_func,
              struct log_offset *log_offset)
{
   111c8:	b510      	push	{r4, lr}
   111ca:	b082      	sub	sp, #8
   111cc:	4614      	mov	r4, r2
    struct log_walk_body_arg lwba = {
   111ce:	9100      	str	r1, [sp, #0]
        .fn = walk_body_func,
        .arg = log_offset->lo_arg,
   111d0:	6913      	ldr	r3, [r2, #16]
    struct log_walk_body_arg lwba = {
   111d2:	9301      	str	r3, [sp, #4]
    };
    int rc;

    log_offset->lo_arg = &lwba;
   111d4:	f8c2 d010 	str.w	sp, [r2, #16]
    rc = log->l_log->log_walk(log, log_walk_body_fn, log_offset);
   111d8:	6843      	ldr	r3, [r0, #4]
   111da:	69db      	ldr	r3, [r3, #28]
   111dc:	4902      	ldr	r1, [pc, #8]	; (111e8 <log_walk_body+0x20>)
   111de:	4798      	blx	r3
    log_offset->lo_arg = lwba.arg;
   111e0:	9b01      	ldr	r3, [sp, #4]
   111e2:	6123      	str	r3, [r4, #16]

    return rc;
}
   111e4:	b002      	add	sp, #8
   111e6:	bd10      	pop	{r4, pc}
   111e8:	0001124b 	.word	0x0001124b

000111ec <log_read>:
 * @return                      The number of bytes read; 0 on failure.
 */
int
log_read(struct log *log, const void *dptr, void *buf, uint16_t off,
         uint16_t len)
{
   111ec:	b530      	push	{r4, r5, lr}
   111ee:	b083      	sub	sp, #12
    int rc;

    rc = log->l_log->log_read(log, dptr, buf, off, len);
   111f0:	6844      	ldr	r4, [r0, #4]
   111f2:	6864      	ldr	r4, [r4, #4]
   111f4:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   111f8:	9500      	str	r5, [sp, #0]
   111fa:	47a0      	blx	r4

    return (rc);
}
   111fc:	b003      	add	sp, #12
   111fe:	bd30      	pop	{r4, r5, pc}

00011200 <log_read_hdr>:

int
log_read_hdr(struct log *log, const void *dptr, struct log_entry_hdr *hdr)
{
   11200:	b570      	push	{r4, r5, r6, lr}
   11202:	b082      	sub	sp, #8
   11204:	4605      	mov	r5, r0
   11206:	460e      	mov	r6, r1
   11208:	4614      	mov	r4, r2
    int bytes_read;

    bytes_read = log_read(log, dptr, hdr, 0, LOG_BASE_ENTRY_HDR_SIZE);
   1120a:	230f      	movs	r3, #15
   1120c:	9300      	str	r3, [sp, #0]
   1120e:	2300      	movs	r3, #0
   11210:	f7ff ffec 	bl	111ec <log_read>
    if (bytes_read != LOG_BASE_ENTRY_HDR_SIZE) {
   11214:	280f      	cmp	r0, #15
   11216:	d115      	bne.n	11244 <log_read_hdr+0x44>
        return SYS_EIO;
    }

    if (hdr->ue_flags & LOG_FLAGS_IMG_HASH) {
   11218:	7ba3      	ldrb	r3, [r4, #14]
   1121a:	f013 0f10 	tst.w	r3, #16
   1121e:	d102      	bne.n	11226 <log_read_hdr+0x26>
        if (bytes_read != LOG_IMG_HASHLEN) {
            return SYS_EIO;
        }
    }

    return 0;
   11220:	2000      	movs	r0, #0
}
   11222:	b002      	add	sp, #8
   11224:	bd70      	pop	{r4, r5, r6, pc}
        bytes_read = log_read(log, dptr, hdr->ue_imghash,
   11226:	2304      	movs	r3, #4
   11228:	9300      	str	r3, [sp, #0]
   1122a:	230f      	movs	r3, #15
   1122c:	18e2      	adds	r2, r4, r3
   1122e:	4631      	mov	r1, r6
   11230:	4628      	mov	r0, r5
   11232:	f7ff ffdb 	bl	111ec <log_read>
        if (bytes_read != LOG_IMG_HASHLEN) {
   11236:	2804      	cmp	r0, #4
   11238:	d101      	bne.n	1123e <log_read_hdr+0x3e>
    return 0;
   1123a:	2000      	movs	r0, #0
   1123c:	e7f1      	b.n	11222 <log_read_hdr+0x22>
            return SYS_EIO;
   1123e:	f06f 0004 	mvn.w	r0, #4
   11242:	e7ee      	b.n	11222 <log_read_hdr+0x22>
        return SYS_EIO;
   11244:	f06f 0004 	mvn.w	r0, #4
   11248:	e7eb      	b.n	11222 <log_read_hdr+0x22>

0001124a <log_walk_body_fn>:
{
   1124a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1124e:	b088      	sub	sp, #32
   11250:	4680      	mov	r8, r0
   11252:	460c      	mov	r4, r1
   11254:	4616      	mov	r6, r2
   11256:	461d      	mov	r5, r3
    lwba = log_offset->lo_arg;
   11258:	690f      	ldr	r7, [r1, #16]
    rc = log_read_hdr(log, dptr, &ueh);
   1125a:	aa03      	add	r2, sp, #12
   1125c:	4631      	mov	r1, r6
   1125e:	f7ff ffcf 	bl	11200 <log_read_hdr>
    if (rc != 0) {
   11262:	4603      	mov	r3, r0
   11264:	b998      	cbnz	r0, 1128e <log_walk_body_fn+0x44>
    if (log_offset->lo_index <= ueh.ue_index) {
   11266:	68a1      	ldr	r1, [r4, #8]
   11268:	9a05      	ldr	r2, [sp, #20]
   1126a:	4291      	cmp	r1, r2
   1126c:	d80f      	bhi.n	1128e <log_walk_body_fn+0x44>
        len -= log_hdr_len(&ueh);
   1126e:	a803      	add	r0, sp, #12
   11270:	f7ff feea 	bl	11048 <log_hdr_len>
   11274:	1a28      	subs	r0, r5, r0
   11276:	b280      	uxth	r0, r0
        log_offset->lo_arg = lwba->arg;
   11278:	687b      	ldr	r3, [r7, #4]
   1127a:	6123      	str	r3, [r4, #16]
        rc = lwba->fn(log, log_offset, &ueh, dptr, len);
   1127c:	683d      	ldr	r5, [r7, #0]
   1127e:	9000      	str	r0, [sp, #0]
   11280:	4633      	mov	r3, r6
   11282:	aa03      	add	r2, sp, #12
   11284:	4621      	mov	r1, r4
   11286:	4640      	mov	r0, r8
   11288:	47a8      	blx	r5
   1128a:	4603      	mov	r3, r0
        log_offset->lo_arg = lwba;
   1128c:	6127      	str	r7, [r4, #16]
}
   1128e:	4618      	mov	r0, r3
   11290:	b008      	add	sp, #32
   11292:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00011296 <log_read_body>:

int
log_read_body(struct log *log, const void *dptr, void *buf, uint16_t off,
              uint16_t len)
{
   11296:	b5f0      	push	{r4, r5, r6, r7, lr}
   11298:	b089      	sub	sp, #36	; 0x24
   1129a:	4605      	mov	r5, r0
   1129c:	460e      	mov	r6, r1
   1129e:	4617      	mov	r7, r2
   112a0:	461c      	mov	r4, r3
    int rc;
    struct log_entry_hdr hdr;

    rc = log_read_hdr(log, dptr, &hdr);
   112a2:	aa03      	add	r2, sp, #12
   112a4:	f7ff ffac 	bl	11200 <log_read_hdr>
    if (rc) {
   112a8:	4602      	mov	r2, r0
   112aa:	b110      	cbz	r0, 112b2 <log_read_body+0x1c>
        return rc;
    }

    return log_read(log, dptr, buf, log_hdr_len(&hdr) + off, len);
}
   112ac:	4610      	mov	r0, r2
   112ae:	b009      	add	sp, #36	; 0x24
   112b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return log_read(log, dptr, buf, log_hdr_len(&hdr) + off, len);
   112b2:	a803      	add	r0, sp, #12
   112b4:	f7ff fec8 	bl	11048 <log_hdr_len>
   112b8:	1903      	adds	r3, r0, r4
   112ba:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
   112be:	9200      	str	r2, [sp, #0]
   112c0:	b29b      	uxth	r3, r3
   112c2:	463a      	mov	r2, r7
   112c4:	4631      	mov	r1, r6
   112c6:	4628      	mov	r0, r5
   112c8:	f7ff ff90 	bl	111ec <log_read>
   112cc:	4602      	mov	r2, r0
   112ce:	e7ed      	b.n	112ac <log_read_body+0x16>

000112d0 <log_flush>:
    return log_read_mbuf(log, dptr, om, log_hdr_len(&hdr) + off, len);
}

int
log_flush(struct log *log)
{
   112d0:	b508      	push	{r3, lr}
    int rc;

    rc = log->l_log->log_flush(log);
   112d2:	6843      	ldr	r3, [r0, #4]
   112d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   112d6:	4798      	blx	r3
    }

    return (0);
err:
    return (rc);
}
   112d8:	bd08      	pop	{r3, pc}

000112da <log_fill_current_img_hash>:
    hdr->ue_flags |= LOG_FLAGS_IMG_HASH;

    /* We have to account for LOG_IMG_HASHLEN bytes of hash */
    return imgr_get_current_hash(hdr->ue_imghash, LOG_IMG_HASHLEN);
#endif
    memset(hdr->ue_imghash, 0, LOG_IMG_HASHLEN);
   112da:	2300      	movs	r3, #0
   112dc:	f8c0 300f 	str.w	r3, [r0, #15]

    return SYS_ENOTSUP;
}
   112e0:	f06f 000b 	mvn.w	r0, #11
   112e4:	4770      	bx	lr

000112e6 <log_read_hdr_walk>:
{
   112e6:	b530      	push	{r4, r5, lr}
   112e8:	b083      	sub	sp, #12
   112ea:	4615      	mov	r5, r2
    arg = log_offset->lo_arg;
   112ec:	690c      	ldr	r4, [r1, #16]
    rc = log_read(log, dptr, arg->hdr, 0, LOG_BASE_ENTRY_HDR_SIZE);
   112ee:	6822      	ldr	r2, [r4, #0]
   112f0:	230f      	movs	r3, #15
   112f2:	9300      	str	r3, [sp, #0]
   112f4:	2300      	movs	r3, #0
   112f6:	4629      	mov	r1, r5
   112f8:	f7ff ff78 	bl	111ec <log_read>
    if (rc >= LOG_BASE_ENTRY_HDR_SIZE) {
   112fc:	280e      	cmp	r0, #14
   112fe:	dd01      	ble.n	11304 <log_read_hdr_walk+0x1e>
        arg->read_success = 1;
   11300:	2301      	movs	r3, #1
   11302:	6063      	str	r3, [r4, #4]
    if (arg->hdr->ue_flags & LOG_FLAGS_IMG_HASH) {
   11304:	6820      	ldr	r0, [r4, #0]
   11306:	7b83      	ldrb	r3, [r0, #14]
   11308:	f013 0f10 	tst.w	r3, #16
   1130c:	d102      	bne.n	11314 <log_read_hdr_walk+0x2e>
}
   1130e:	2001      	movs	r0, #1
   11310:	b003      	add	sp, #12
   11312:	bd30      	pop	{r4, r5, pc}
        rc = log_fill_current_img_hash(arg->hdr);
   11314:	f7ff ffe1 	bl	112da <log_fill_current_img_hash>
        if (!rc || rc == SYS_ENOTSUP) {
   11318:	b110      	cbz	r0, 11320 <log_read_hdr_walk+0x3a>
   1131a:	f110 0f0c 	cmn.w	r0, #12
   1131e:	d1f6      	bne.n	1130e <log_read_hdr_walk+0x28>
            arg->read_success = 1;
   11320:	2301      	movs	r3, #1
   11322:	6063      	str	r3, [r4, #4]
   11324:	e7f3      	b.n	1130e <log_read_hdr_walk+0x28>

00011326 <log_console_read>:
log_console_read(struct log *log, const void *dptr, void *buf, uint16_t offset,
        uint16_t len)
{
    /* You don't read console, console read you */
    return (OS_EINVAL);
}
   11326:	2002      	movs	r0, #2
   11328:	4770      	bx	lr

0001132a <log_console_walk>:
log_console_walk(struct log *log, log_walk_func_t walk_func,
        struct log_offset *log_offset)
{
    /* You don't walk console, console walk you. */
    return (OS_EINVAL);
}
   1132a:	2002      	movs	r0, #2
   1132c:	4770      	bx	lr

0001132e <log_console_flush>:
static int
log_console_flush(struct log *log)
{
    /* You don't flush console, console flush you. */
    return (OS_EINVAL);
}
   1132e:	2002      	movs	r0, #2
   11330:	4770      	bx	lr
	...

00011334 <log_console_print_hdr>:
{
   11334:	b510      	push	{r4, lr}
   11336:	b082      	sub	sp, #8
   11338:	4604      	mov	r4, r0
                   hdr->ue_ts, hdr->ue_module, hdr->ue_level);
   1133a:	7b01      	ldrb	r1, [r0, #12]
   1133c:	7b40      	ldrb	r0, [r0, #13]
    console_printf("[ts=%lluus, mod=%u level=%u ",
   1133e:	6822      	ldr	r2, [r4, #0]
   11340:	6863      	ldr	r3, [r4, #4]
   11342:	9001      	str	r0, [sp, #4]
   11344:	9100      	str	r1, [sp, #0]
   11346:	480a      	ldr	r0, [pc, #40]	; (11370 <log_console_print_hdr+0x3c>)
   11348:	f7ff f916 	bl	10578 <console_printf>
    if (hdr->ue_flags & LOG_FLAGS_IMG_HASH) {
   1134c:	7ba3      	ldrb	r3, [r4, #14]
   1134e:	f013 0f10 	tst.w	r3, #16
   11352:	d104      	bne.n	1135e <log_console_print_hdr+0x2a>
    console_printf("]");
   11354:	4807      	ldr	r0, [pc, #28]	; (11374 <log_console_print_hdr+0x40>)
   11356:	f7ff f90f 	bl	10578 <console_printf>
}
   1135a:	b002      	add	sp, #8
   1135c:	bd10      	pop	{r4, pc}
        console_printf("ih=0x%x%x%x%x", hdr->ue_imghash[0], hdr->ue_imghash[1],
   1135e:	7be1      	ldrb	r1, [r4, #15]
   11360:	7c22      	ldrb	r2, [r4, #16]
                       hdr->ue_imghash[2], hdr->ue_imghash[3]);
   11362:	7c63      	ldrb	r3, [r4, #17]
   11364:	7ca0      	ldrb	r0, [r4, #18]
        console_printf("ih=0x%x%x%x%x", hdr->ue_imghash[0], hdr->ue_imghash[1],
   11366:	9000      	str	r0, [sp, #0]
   11368:	4803      	ldr	r0, [pc, #12]	; (11378 <log_console_print_hdr+0x44>)
   1136a:	f7ff f905 	bl	10578 <console_printf>
   1136e:	e7f1      	b.n	11354 <log_console_print_hdr+0x20>
   11370:	00031a94 	.word	0x00031a94
   11374:	00031ac4 	.word	0x00031ac4
   11378:	00031ab4 	.word	0x00031ab4

0001137c <log_console_dump_cbor_entry>:
{
   1137c:	b570      	push	{r4, r5, r6, lr}
   1137e:	b094      	sub	sp, #80	; 0x50
    cbor_buf_reader_init(&cbor_buf_reader, dptr, len);
   11380:	460a      	mov	r2, r1
   11382:	4601      	mov	r1, r0
   11384:	a805      	add	r0, sp, #20
   11386:	f01b f83b 	bl	2c400 <cbor_buf_reader_init>
    cbor_parser_init(&cbor_buf_reader.r, 0, &cbor_parser, &cbor_value);
   1138a:	ad0d      	add	r5, sp, #52	; 0x34
   1138c:	462b      	mov	r3, r5
   1138e:	aa11      	add	r2, sp, #68	; 0x44
   11390:	2100      	movs	r1, #0
   11392:	a805      	add	r0, sp, #20
   11394:	f01b fd35 	bl	2ce02 <cbor_parser_init>
    cbor_value_to_pretty(stdout, &cbor_value);
   11398:	4b08      	ldr	r3, [pc, #32]	; (113bc <log_console_dump_cbor_entry+0x40>)
   1139a:	681e      	ldr	r6, [r3, #0]

/* Human-readable (dump) API */
CBOR_API CborError cbor_value_to_pretty_advance(FILE *out, CborValue *value);
CBOR_INLINE_API CborError cbor_value_to_pretty(FILE *out, const CborValue *value)
{
    CborValue copy = *value;
   1139c:	ac01      	add	r4, sp, #4
   1139e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   113a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return cbor_value_to_pretty_advance(out, &copy);
   113a6:	4621      	mov	r1, r4
   113a8:	4630      	mov	r0, r6
   113aa:	f01c f9a7 	bl	2d6fc <cbor_value_to_pretty_advance>
    console_write("\n", 1);
   113ae:	2101      	movs	r1, #1
   113b0:	4803      	ldr	r0, [pc, #12]	; (113c0 <log_console_dump_cbor_entry+0x44>)
   113b2:	f7fe ff91 	bl	102d8 <console_write>
}
   113b6:	2000      	movs	r0, #0
   113b8:	b014      	add	sp, #80	; 0x50
   113ba:	bd70      	pop	{r4, r5, r6, pc}
   113bc:	00032cec 	.word	0x00032cec
   113c0:	000324e4 	.word	0x000324e4

000113c4 <log_console_append_body>:
{
   113c4:	b570      	push	{r4, r5, r6, lr}
   113c6:	460c      	mov	r4, r1
   113c8:	4615      	mov	r5, r2
   113ca:	461e      	mov	r6, r3
    if (!console_is_init()) {
   113cc:	f7ff f882 	bl	104d4 <console_is_init>
   113d0:	b158      	cbz	r0, 113ea <log_console_append_body+0x26>
    if (!console_is_midline) {
   113d2:	4b0b      	ldr	r3, [pc, #44]	; (11400 <log_console_append_body+0x3c>)
   113d4:	681b      	ldr	r3, [r3, #0]
   113d6:	b153      	cbz	r3, 113ee <log_console_append_body+0x2a>
    if (hdr->ue_etype != LOG_ETYPE_CBOR) {
   113d8:	7ba3      	ldrb	r3, [r4, #14]
   113da:	f003 030f 	and.w	r3, r3, #15
   113de:	2b01      	cmp	r3, #1
   113e0:	d009      	beq.n	113f6 <log_console_append_body+0x32>
        console_write(body, body_len);
   113e2:	4631      	mov	r1, r6
   113e4:	4628      	mov	r0, r5
   113e6:	f7fe ff77 	bl	102d8 <console_write>
}
   113ea:	2000      	movs	r0, #0
   113ec:	bd70      	pop	{r4, r5, r6, pc}
        log_console_print_hdr(hdr);
   113ee:	4620      	mov	r0, r4
   113f0:	f7ff ffa0 	bl	11334 <log_console_print_hdr>
   113f4:	e7f0      	b.n	113d8 <log_console_append_body+0x14>
        log_console_dump_cbor_entry(body, body_len);
   113f6:	b2b1      	uxth	r1, r6
   113f8:	4628      	mov	r0, r5
   113fa:	f7ff ffbf 	bl	1137c <log_console_dump_cbor_entry>
   113fe:	e7f4      	b.n	113ea <log_console_append_body+0x26>
   11400:	20003490 	.word	0x20003490

00011404 <log_console_append>:
{
   11404:	b570      	push	{r4, r5, r6, lr}
   11406:	4605      	mov	r5, r0
   11408:	460c      	mov	r4, r1
   1140a:	4616      	mov	r6, r2
    hdr_len = log_hdr_len(buf);
   1140c:	4608      	mov	r0, r1
   1140e:	f7ff fe1b 	bl	11048 <log_hdr_len>
    return log_console_append_body(log, buf, (uint8_t *)buf + hdr_len,
   11412:	1a33      	subs	r3, r6, r0
   11414:	1822      	adds	r2, r4, r0
   11416:	4621      	mov	r1, r4
   11418:	4628      	mov	r0, r5
   1141a:	f7ff ffd3 	bl	113c4 <log_console_append_body>
}
   1141e:	bd70      	pop	{r4, r5, r6, pc}

00011420 <log_console_get>:
}
   11420:	4800      	ldr	r0, [pc, #0]	; (11424 <log_console_get+0x4>)
   11422:	4770      	bx	lr
   11424:	20001a60 	.word	0x20001a60

00011428 <log_console_init>:
    .log_flush = log_console_flush,
};

void
log_console_init(void)
{
   11428:	b510      	push	{r4, lr}
   1142a:	b082      	sub	sp, #8
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1142c:	4b11      	ldr	r3, [pc, #68]	; (11474 <log_console_init+0x4c>)
   1142e:	781b      	ldrb	r3, [r3, #0]
   11430:	b14b      	cbz	r3, 11446 <log_console_init+0x1e>

    rc = log_register("console", &log_console, &log_console_handler, NULL,
   11432:	2300      	movs	r3, #0
   11434:	9300      	str	r3, [sp, #0]
   11436:	4a10      	ldr	r2, [pc, #64]	; (11478 <log_console_init+0x50>)
   11438:	4910      	ldr	r1, [pc, #64]	; (1147c <log_console_init+0x54>)
   1143a:	4811      	ldr	r0, [pc, #68]	; (11480 <log_console_init+0x58>)
   1143c:	f7ff fe5c 	bl	110f8 <log_register>
                      MYNEWT_VAL(LOG_LEVEL));
    SYSINIT_PANIC_ASSERT(rc == 0);
   11440:	b958      	cbnz	r0, 1145a <log_console_init+0x32>
}
   11442:	b002      	add	sp, #8
   11444:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   11446:	f7fa fecf 	bl	c1e8 <hal_debugger_connected>
   1144a:	b100      	cbz	r0, 1144e <log_console_init+0x26>
   1144c:	be01      	bkpt	0x0001
   1144e:	2300      	movs	r3, #0
   11450:	461a      	mov	r2, r3
   11452:	4619      	mov	r1, r3
   11454:	4618      	mov	r0, r3
   11456:	f7fb fb7b 	bl	cb50 <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1145a:	f7fa fec5 	bl	c1e8 <hal_debugger_connected>
   1145e:	b100      	cbz	r0, 11462 <log_console_init+0x3a>
   11460:	be01      	bkpt	0x0001
   11462:	2000      	movs	r0, #0
   11464:	9000      	str	r0, [sp, #0]
   11466:	4b07      	ldr	r3, [pc, #28]	; (11484 <log_console_init+0x5c>)
   11468:	681c      	ldr	r4, [r3, #0]
   1146a:	4603      	mov	r3, r0
   1146c:	4602      	mov	r2, r0
   1146e:	4601      	mov	r1, r0
   11470:	47a0      	blx	r4
}
   11472:	e7e6      	b.n	11442 <log_console_init+0x1a>
   11474:	20003584 	.word	0x20003584
   11478:	00031a60 	.word	0x00031a60
   1147c:	20001a60 	.word	0x20001a60
   11480:	00031a8c 	.word	0x00031a8c
   11484:	20000298 	.word	0x20000298

00011488 <log_level_get>:
uint8_t
log_level_get(uint8_t module)
{
    uint8_t byte;

    byte = log_level_map[module / 2];
   11488:	0843      	lsrs	r3, r0, #1
   1148a:	4a05      	ldr	r2, [pc, #20]	; (114a0 <log_level_get+0x18>)
   1148c:	5cd3      	ldrb	r3, [r2, r3]
    if (module % 2 == 0) {
   1148e:	f010 0f01 	tst.w	r0, #1
   11492:	d001      	beq.n	11498 <log_level_get+0x10>
        return byte & 0x0f;
    } else {
        return byte >> 4;
   11494:	0918      	lsrs	r0, r3, #4
    }
}
   11496:	4770      	bx	lr
        return byte & 0x0f;
   11498:	f003 000f 	and.w	r0, r3, #15
   1149c:	4770      	bx	lr
   1149e:	bf00      	nop
   114a0:	20001a7c 	.word	0x20001a7c

000114a4 <modlog_find_by_module>:
    return cur;
}

static struct modlog_mapping *
modlog_find_by_module(uint8_t module, struct modlog_mapping **out_prev)
{
   114a4:	b410      	push	{r4}
    struct modlog_mapping *prev;
    struct modlog_mapping *cur;

    prev = NULL;
    SLIST_FOREACH(cur, &modlog_mappings, next) {
   114a6:	4b08      	ldr	r3, [pc, #32]	; (114c8 <modlog_find_by_module+0x24>)
   114a8:	681b      	ldr	r3, [r3, #0]
    prev = NULL;
   114aa:	2400      	movs	r4, #0
    SLIST_FOREACH(cur, &modlog_mappings, next) {
   114ac:	b13b      	cbz	r3, 114be <modlog_find_by_module+0x1a>
        if (cur->desc.module == module) {
   114ae:	7a5a      	ldrb	r2, [r3, #9]
   114b0:	4282      	cmp	r2, r0
   114b2:	d004      	beq.n	114be <modlog_find_by_module+0x1a>
            break;
        }

        if (cur->desc.module > module) {
   114b4:	d802      	bhi.n	114bc <modlog_find_by_module+0x18>
            cur = NULL;
            break;
        }

        prev = cur;
   114b6:	461c      	mov	r4, r3
    SLIST_FOREACH(cur, &modlog_mappings, next) {
   114b8:	681b      	ldr	r3, [r3, #0]
   114ba:	e7f7      	b.n	114ac <modlog_find_by_module+0x8>
            cur = NULL;
   114bc:	2300      	movs	r3, #0
    }

    if (out_prev != NULL) {
   114be:	b101      	cbz	r1, 114c2 <modlog_find_by_module+0x1e>
        *out_prev = prev;
   114c0:	600c      	str	r4, [r1, #0]
    }

    return cur;
}
   114c2:	4618      	mov	r0, r3
   114c4:	bc10      	pop	{r4}
   114c6:	4770      	bx	lr
   114c8:	20001bc0 	.word	0x20001bc0

000114cc <modlog_insert>:

static void
modlog_insert(struct modlog_mapping *mm)
{
   114cc:	b510      	push	{r4, lr}
   114ce:	b082      	sub	sp, #8
   114d0:	4604      	mov	r4, r0
    struct modlog_mapping *prev;

    modlog_find_by_module(mm->desc.module, &prev);
   114d2:	a901      	add	r1, sp, #4
   114d4:	7a40      	ldrb	r0, [r0, #9]
   114d6:	f7ff ffe5 	bl	114a4 <modlog_find_by_module>
    if (prev == NULL) {
   114da:	9b01      	ldr	r3, [sp, #4]
   114dc:	b143      	cbz	r3, 114f0 <modlog_insert+0x24>
        SLIST_INSERT_HEAD(&modlog_mappings, mm, next);
    } else {
        SLIST_INSERT_AFTER(prev, mm, next);
   114de:	681b      	ldr	r3, [r3, #0]
   114e0:	6023      	str	r3, [r4, #0]
   114e2:	9b01      	ldr	r3, [sp, #4]
   114e4:	601c      	str	r4, [r3, #0]
    }

    if (mm->desc.module == MODLOG_MODULE_DFLT) {
   114e6:	7a63      	ldrb	r3, [r4, #9]
   114e8:	2bff      	cmp	r3, #255	; 0xff
   114ea:	d006      	beq.n	114fa <modlog_insert+0x2e>
        modlog_first_dflt = mm;
    }
}
   114ec:	b002      	add	sp, #8
   114ee:	bd10      	pop	{r4, pc}
        SLIST_INSERT_HEAD(&modlog_mappings, mm, next);
   114f0:	4b03      	ldr	r3, [pc, #12]	; (11500 <modlog_insert+0x34>)
   114f2:	681a      	ldr	r2, [r3, #0]
   114f4:	6022      	str	r2, [r4, #0]
   114f6:	601c      	str	r4, [r3, #0]
   114f8:	e7f5      	b.n	114e6 <modlog_insert+0x1a>
        modlog_first_dflt = mm;
   114fa:	4b02      	ldr	r3, [pc, #8]	; (11504 <modlog_insert+0x38>)
   114fc:	601c      	str	r4, [r3, #0]
}
   114fe:	e7f5      	b.n	114ec <modlog_insert+0x20>
   11500:	20001bc0 	.word	0x20001bc0
   11504:	20001afc 	.word	0x20001afc

00011508 <modlog_alloc>:
{
   11508:	b508      	push	{r3, lr}
    mm = os_memblock_get(&modlog_mapping_pool);
   1150a:	4805      	ldr	r0, [pc, #20]	; (11520 <modlog_alloc+0x18>)
   1150c:	f7fc fb7e 	bl	dc0c <os_memblock_get>
    if (mm != NULL) {
   11510:	4603      	mov	r3, r0
   11512:	b118      	cbz	r0, 1151c <modlog_alloc+0x14>
        *mm = (struct modlog_mapping) { 0 };
   11514:	2200      	movs	r2, #0
   11516:	6002      	str	r2, [r0, #0]
   11518:	6042      	str	r2, [r0, #4]
   1151a:	6082      	str	r2, [r0, #8]
}
   1151c:	4618      	mov	r0, r3
   1151e:	bd08      	pop	{r3, pc}
   11520:	20003554 	.word	0x20003554

00011524 <modlog_infer_handle>:
{
   11524:	b508      	push	{r3, lr}
    off = (uintptr_t)mm - (uintptr_t)modlog_mapping_buf;
   11526:	4b13      	ldr	r3, [pc, #76]	; (11574 <modlog_infer_handle+0x50>)
   11528:	1ac0      	subs	r0, r0, r3
    idx = off / elem_sz;
   1152a:	4a13      	ldr	r2, [pc, #76]	; (11578 <modlog_infer_handle+0x54>)
   1152c:	fba2 3200 	umull	r3, r2, r2, r0
   11530:	08d2      	lsrs	r2, r2, #3
    assert(idx >= 0 && idx < MYNEWT_VAL(MODLOG_MAX_MAPPINGS));
   11532:	2a0f      	cmp	r2, #15
   11534:	d80a      	bhi.n	1154c <modlog_infer_handle+0x28>
    assert(off % elem_sz == 0);
   11536:	4b10      	ldr	r3, [pc, #64]	; (11578 <modlog_infer_handle+0x54>)
   11538:	fba3 1300 	umull	r1, r3, r3, r0
   1153c:	08db      	lsrs	r3, r3, #3
   1153e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   11542:	0099      	lsls	r1, r3, #2
   11544:	4288      	cmp	r0, r1
   11546:	d10b      	bne.n	11560 <modlog_infer_handle+0x3c>
}
   11548:	b2d0      	uxtb	r0, r2
   1154a:	bd08      	pop	{r3, pc}
    assert(idx >= 0 && idx < MYNEWT_VAL(MODLOG_MAX_MAPPINGS));
   1154c:	f7fa fe4c 	bl	c1e8 <hal_debugger_connected>
   11550:	b100      	cbz	r0, 11554 <modlog_infer_handle+0x30>
   11552:	be01      	bkpt	0x0001
   11554:	2300      	movs	r3, #0
   11556:	461a      	mov	r2, r3
   11558:	4619      	mov	r1, r3
   1155a:	4618      	mov	r0, r3
   1155c:	f7fb faf8 	bl	cb50 <__assert_func>
    assert(off % elem_sz == 0);
   11560:	f7fa fe42 	bl	c1e8 <hal_debugger_connected>
   11564:	b100      	cbz	r0, 11568 <modlog_infer_handle+0x44>
   11566:	be01      	bkpt	0x0001
   11568:	2300      	movs	r3, #0
   1156a:	461a      	mov	r2, r3
   1156c:	4619      	mov	r1, r3
   1156e:	4618      	mov	r0, r3
   11570:	f7fb faee 	bl	cb50 <__assert_func>
   11574:	20001b00 	.word	0x20001b00
   11578:	aaaaaaab 	.word	0xaaaaaaab

0001157c <modlog_register_no_lock>:
modlog_register_no_lock(uint8_t module, struct log *log, uint8_t min_level,
                        uint8_t *out_handle)
{
    struct modlog_mapping *mm;

    if (log == NULL) {
   1157c:	b1c9      	cbz	r1, 115b2 <modlog_register_no_lock+0x36>
{
   1157e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11582:	4688      	mov	r8, r1
   11584:	461d      	mov	r5, r3
   11586:	4616      	mov	r6, r2
   11588:	4607      	mov	r7, r0
        return SYS_EINVAL;
    }

    mm = modlog_alloc();
   1158a:	f7ff ffbd 	bl	11508 <modlog_alloc>
    if (mm == NULL) {
   1158e:	4604      	mov	r4, r0
   11590:	b190      	cbz	r0, 115b8 <modlog_register_no_lock+0x3c>
        return SYS_ENOMEM;
    }

    mm->desc = (struct modlog_desc) {
        .log = log,
        .handle = modlog_infer_handle(mm),
   11592:	f7ff ffc7 	bl	11524 <modlog_infer_handle>
    mm->desc = (struct modlog_desc) {
   11596:	f8c4 8004 	str.w	r8, [r4, #4]
   1159a:	7220      	strb	r0, [r4, #8]
   1159c:	7267      	strb	r7, [r4, #9]
   1159e:	72a6      	strb	r6, [r4, #10]
        .module = module,
        .min_level = min_level,
    };

    modlog_insert(mm);
   115a0:	4620      	mov	r0, r4
   115a2:	f7ff ff93 	bl	114cc <modlog_insert>

    if (out_handle != NULL) {
   115a6:	b155      	cbz	r5, 115be <modlog_register_no_lock+0x42>
        *out_handle = mm->desc.handle;
   115a8:	7a23      	ldrb	r3, [r4, #8]
   115aa:	702b      	strb	r3, [r5, #0]
    }

    return 0;
   115ac:	2000      	movs	r0, #0
}
   115ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SYS_EINVAL;
   115b2:	f06f 0001 	mvn.w	r0, #1
}
   115b6:	4770      	bx	lr
        return SYS_ENOMEM;
   115b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   115bc:	e7f7      	b.n	115ae <modlog_register_no_lock+0x32>
    return 0;
   115be:	2000      	movs	r0, #0
   115c0:	e7f5      	b.n	115ae <modlog_register_no_lock+0x32>

000115c2 <modlog_append_one>:
}

static int
modlog_append_one(struct modlog_mapping *mm, uint8_t module, uint8_t level,
                  uint8_t etype, void *data, uint16_t len)
{
   115c2:	b510      	push	{r4, lr}
   115c4:	b082      	sub	sp, #8
    int rc;

    if (level >= mm->desc.min_level) {
   115c6:	7a84      	ldrb	r4, [r0, #10]
   115c8:	4294      	cmp	r4, r2
   115ca:	d903      	bls.n	115d4 <modlog_append_one+0x12>
    } else {
        LOG_STATS_INC(mm->desc.log, writes);
        LOG_STATS_INC(mm->desc.log, drops);
    }

    return 0;
   115cc:	2300      	movs	r3, #0
}
   115ce:	4618      	mov	r0, r3
   115d0:	b002      	add	sp, #8
   115d2:	bd10      	pop	{r4, pc}
        rc = log_append_body(mm->desc.log, module, level, etype, data, len);
   115d4:	6840      	ldr	r0, [r0, #4]
   115d6:	f8bd 4014 	ldrh.w	r4, [sp, #20]
   115da:	9401      	str	r4, [sp, #4]
   115dc:	9c04      	ldr	r4, [sp, #16]
   115de:	9400      	str	r4, [sp, #0]
   115e0:	f7ff fd3a 	bl	11058 <log_append_body>
        if (rc != 0) {
   115e4:	4603      	mov	r3, r0
   115e6:	2800      	cmp	r0, #0
   115e8:	d0f1      	beq.n	115ce <modlog_append_one+0xc>
            return SYS_EIO;
   115ea:	f06f 0304 	mvn.w	r3, #4
   115ee:	e7ee      	b.n	115ce <modlog_append_one+0xc>

000115f0 <modlog_append_no_lock>:

static int
modlog_append_no_lock(uint8_t module, uint8_t level, uint8_t etype,
                      void *data, uint16_t len)
{
   115f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   115f4:	b083      	sub	sp, #12
   115f6:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
    struct modlog_mapping *mm;
    int rc;

    if (module == MODLOG_MODULE_DFLT) {
   115fa:	28ff      	cmp	r0, #255	; 0xff
   115fc:	d02d      	beq.n	1165a <modlog_append_no_lock+0x6a>
   115fe:	461f      	mov	r7, r3
   11600:	4691      	mov	r9, r2
   11602:	4688      	mov	r8, r1
   11604:	4605      	mov	r5, r0
        return SYS_EINVAL;
    }

    mm = modlog_find_by_module(module, NULL);
   11606:	2100      	movs	r1, #0
   11608:	f7ff ff4c 	bl	114a4 <modlog_find_by_module>
    if (mm != NULL) {
   1160c:	4604      	mov	r4, r0
   1160e:	b188      	cbz	r0, 11634 <modlog_append_no_lock+0x44>
        while (mm != NULL && mm->desc.module == module) {
   11610:	b334      	cbz	r4, 11660 <modlog_append_no_lock+0x70>
   11612:	7a63      	ldrb	r3, [r4, #9]
   11614:	42ab      	cmp	r3, r5
   11616:	d10b      	bne.n	11630 <modlog_append_no_lock+0x40>
            rc = modlog_append_one(mm, module, level, etype, data, len);
   11618:	9601      	str	r6, [sp, #4]
   1161a:	9700      	str	r7, [sp, #0]
   1161c:	464b      	mov	r3, r9
   1161e:	4642      	mov	r2, r8
   11620:	4629      	mov	r1, r5
   11622:	4620      	mov	r0, r4
   11624:	f7ff ffcd 	bl	115c2 <modlog_append_one>
            if (rc != 0) {
   11628:	4603      	mov	r3, r0
   1162a:	b9d0      	cbnz	r0, 11662 <modlog_append_no_lock+0x72>
                return rc;
            }

            mm = SLIST_NEXT(mm, next);
   1162c:	6824      	ldr	r4, [r4, #0]
   1162e:	e7ef      	b.n	11610 <modlog_append_no_lock+0x20>
        }
        return 0;
   11630:	2300      	movs	r3, #0
   11632:	e016      	b.n	11662 <modlog_append_no_lock+0x72>
    }

    /* No mappings match the specified module; write to the default set. */
    for (mm = modlog_first_dflt;
   11634:	4b0d      	ldr	r3, [pc, #52]	; (1166c <modlog_append_no_lock+0x7c>)
   11636:	681c      	ldr	r4, [r3, #0]
   11638:	e000      	b.n	1163c <modlog_append_no_lock+0x4c>
         mm != NULL;
         mm = SLIST_NEXT(mm, next)) {
   1163a:	6824      	ldr	r4, [r4, #0]
    for (mm = modlog_first_dflt;
   1163c:	b15c      	cbz	r4, 11656 <modlog_append_no_lock+0x66>

        rc = modlog_append_one(mm, module, level, etype, data, len);
   1163e:	9601      	str	r6, [sp, #4]
   11640:	9700      	str	r7, [sp, #0]
   11642:	464b      	mov	r3, r9
   11644:	4642      	mov	r2, r8
   11646:	4629      	mov	r1, r5
   11648:	4620      	mov	r0, r4
   1164a:	f7ff ffba 	bl	115c2 <modlog_append_one>
        if (rc != 0) {
   1164e:	4603      	mov	r3, r0
   11650:	2800      	cmp	r0, #0
   11652:	d0f2      	beq.n	1163a <modlog_append_no_lock+0x4a>
   11654:	e005      	b.n	11662 <modlog_append_no_lock+0x72>
            return rc;
        }
    }

    return 0;
   11656:	2300      	movs	r3, #0
   11658:	e003      	b.n	11662 <modlog_append_no_lock+0x72>
        return SYS_EINVAL;
   1165a:	f06f 0301 	mvn.w	r3, #1
   1165e:	e000      	b.n	11662 <modlog_append_no_lock+0x72>
        return 0;
   11660:	2300      	movs	r3, #0
}
   11662:	4618      	mov	r0, r3
   11664:	b003      	add	sp, #12
   11666:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1166a:	bf00      	nop
   1166c:	20001afc 	.word	0x20001afc

00011670 <modlog_register>:
}

int
modlog_register(uint8_t module, struct log *log, uint8_t min_level,
                uint8_t *out_handle)
{
   11670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11674:	4605      	mov	r5, r0
   11676:	460e      	mov	r6, r1
   11678:	4617      	mov	r7, r2
   1167a:	4698      	mov	r8, r3
    int rc;

    rwlock_acquire_write(&modlog_rwl);
   1167c:	4c08      	ldr	r4, [pc, #32]	; (116a0 <modlog_register+0x30>)
   1167e:	4620      	mov	r0, r4
   11680:	f000 fe85 	bl	1238e <rwlock_acquire_write>
    rc = modlog_register_no_lock(module, log, min_level, out_handle);
   11684:	4643      	mov	r3, r8
   11686:	463a      	mov	r2, r7
   11688:	4631      	mov	r1, r6
   1168a:	4628      	mov	r0, r5
   1168c:	f7ff ff76 	bl	1157c <modlog_register_no_lock>
   11690:	4605      	mov	r5, r0
    rwlock_release_write(&modlog_rwl);
   11692:	4620      	mov	r0, r4
   11694:	f000 fea5 	bl	123e2 <rwlock_release_write>

    return rc;
}
   11698:	4628      	mov	r0, r5
   1169a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1169e:	bf00      	nop
   116a0:	20001bc4 	.word	0x20001bc4

000116a4 <modlog_append>:
}

int
modlog_append(uint8_t module, uint8_t level, uint8_t etype,
              void *data, uint16_t len)
{
   116a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   116a8:	b082      	sub	sp, #8
   116aa:	4605      	mov	r5, r0
   116ac:	460e      	mov	r6, r1
   116ae:	4617      	mov	r7, r2
   116b0:	4698      	mov	r8, r3
    int rc;

    rwlock_acquire_read(&modlog_rwl);
   116b2:	4c0a      	ldr	r4, [pc, #40]	; (116dc <modlog_append+0x38>)
   116b4:	4620      	mov	r0, r4
   116b6:	f000 fe2a 	bl	1230e <rwlock_acquire_read>
    rc = modlog_append_no_lock(module, level, etype, data, len);
   116ba:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   116be:	9300      	str	r3, [sp, #0]
   116c0:	4643      	mov	r3, r8
   116c2:	463a      	mov	r2, r7
   116c4:	4631      	mov	r1, r6
   116c6:	4628      	mov	r0, r5
   116c8:	f7ff ff92 	bl	115f0 <modlog_append_no_lock>
   116cc:	4605      	mov	r5, r0
    rwlock_release_read(&modlog_rwl);
   116ce:	4620      	mov	r0, r4
   116d0:	f000 fe4a 	bl	12368 <rwlock_release_read>

    return rc;
}
   116d4:	4628      	mov	r0, r5
   116d6:	b002      	add	sp, #8
   116d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   116dc:	20001bc4 	.word	0x20001bc4

000116e0 <modlog_printf>:
    return rc;
}

void
modlog_printf(uint8_t module, uint8_t level, const char *msg, ...)
{
   116e0:	b40c      	push	{r2, r3}
   116e2:	b530      	push	{r4, r5, lr}
   116e4:	b0a5      	sub	sp, #148	; 0x94
   116e6:	4604      	mov	r4, r0
   116e8:	460d      	mov	r5, r1
   116ea:	ab28      	add	r3, sp, #160	; 0xa0
   116ec:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list args;
    char buf[MYNEWT_VAL(MODLOG_MAX_PRINTF_LEN)];
    int len;

    va_start(args, msg);
   116f0:	9323      	str	r3, [sp, #140]	; 0x8c
    len = vsnprintf(buf, MYNEWT_VAL(MODLOG_MAX_PRINTF_LEN), msg, args);
   116f2:	2180      	movs	r1, #128	; 0x80
   116f4:	a803      	add	r0, sp, #12
   116f6:	f01e f8db 	bl	2f8b0 <vsnprintf>
    va_end(args);

    if (len >= MYNEWT_VAL(MODLOG_MAX_PRINTF_LEN)) {
   116fa:	287f      	cmp	r0, #127	; 0x7f
   116fc:	dd00      	ble.n	11700 <modlog_printf+0x20>
        len = MYNEWT_VAL(MODLOG_MAX_PRINTF_LEN) - 1;
   116fe:	207f      	movs	r0, #127	; 0x7f
    }

    modlog_append(module, level, LOG_ETYPE_STRING, buf, len);
   11700:	b280      	uxth	r0, r0
   11702:	9000      	str	r0, [sp, #0]
   11704:	ab03      	add	r3, sp, #12
   11706:	2200      	movs	r2, #0
   11708:	4629      	mov	r1, r5
   1170a:	4620      	mov	r0, r4
   1170c:	f7ff ffca 	bl	116a4 <modlog_append>
}
   11710:	b025      	add	sp, #148	; 0x94
   11712:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   11716:	b002      	add	sp, #8
   11718:	4770      	bx	lr
	...

0001171c <modlog_init>:

void
modlog_init(void)
{
   1171c:	b510      	push	{r4, lr}
   1171e:	b082      	sub	sp, #8
    int rc;

    SYSINIT_ASSERT_ACTIVE();
   11720:	4b28      	ldr	r3, [pc, #160]	; (117c4 <modlog_init+0xa8>)
   11722:	781b      	ldrb	r3, [r3, #0]
   11724:	b1e3      	cbz	r3, 11760 <modlog_init+0x44>

    rc = os_mempool_init(&modlog_mapping_pool, MYNEWT_VAL(MODLOG_MAX_MAPPINGS),
   11726:	4b28      	ldr	r3, [pc, #160]	; (117c8 <modlog_init+0xac>)
   11728:	9300      	str	r3, [sp, #0]
   1172a:	4b28      	ldr	r3, [pc, #160]	; (117cc <modlog_init+0xb0>)
   1172c:	220c      	movs	r2, #12
   1172e:	2110      	movs	r1, #16
   11730:	4827      	ldr	r0, [pc, #156]	; (117d0 <modlog_init+0xb4>)
   11732:	f7fc fa27 	bl	db84 <os_mempool_init>
                         sizeof (struct modlog_mapping), modlog_mapping_buf,
                         "modlog_mapping_pool");
    SYSINIT_PANIC_ASSERT(rc == 0);
   11736:	b9e8      	cbnz	r0, 11774 <modlog_init+0x58>

    SLIST_INIT(&modlog_mappings);
   11738:	2300      	movs	r3, #0
   1173a:	4a26      	ldr	r2, [pc, #152]	; (117d4 <modlog_init+0xb8>)
   1173c:	6013      	str	r3, [r2, #0]
    modlog_first_dflt = NULL;
   1173e:	4a26      	ldr	r2, [pc, #152]	; (117d8 <modlog_init+0xbc>)
   11740:	6013      	str	r3, [r2, #0]

    rc = rwlock_init(&modlog_rwl);
   11742:	4826      	ldr	r0, [pc, #152]	; (117dc <modlog_init+0xc0>)
   11744:	f000 fe5c 	bl	12400 <rwlock_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   11748:	bb08      	cbnz	r0, 1178e <modlog_init+0x72>

    /* Register the default console mapping if configured. */
#if MYNEWT_VAL(MODLOG_CONSOLE_DFLT)
    rc = modlog_register(MODLOG_MODULE_DFLT, log_console_get(),
   1174a:	f7ff fe69 	bl	11420 <log_console_get>
   1174e:	2300      	movs	r3, #0
   11750:	461a      	mov	r2, r3
   11752:	4601      	mov	r1, r0
   11754:	20ff      	movs	r0, #255	; 0xff
   11756:	f7ff ff8b 	bl	11670 <modlog_register>
                         LOG_LEVEL_DEBUG, NULL);
    SYSINIT_PANIC_ASSERT(rc == 0);
   1175a:	bb28      	cbnz	r0, 117a8 <modlog_init+0x8c>
#endif
}
   1175c:	b002      	add	sp, #8
   1175e:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   11760:	f7fa fd42 	bl	c1e8 <hal_debugger_connected>
   11764:	b100      	cbz	r0, 11768 <modlog_init+0x4c>
   11766:	be01      	bkpt	0x0001
   11768:	2300      	movs	r3, #0
   1176a:	461a      	mov	r2, r3
   1176c:	4619      	mov	r1, r3
   1176e:	4618      	mov	r0, r3
   11770:	f7fb f9ee 	bl	cb50 <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
   11774:	f7fa fd38 	bl	c1e8 <hal_debugger_connected>
   11778:	b100      	cbz	r0, 1177c <modlog_init+0x60>
   1177a:	be01      	bkpt	0x0001
   1177c:	2000      	movs	r0, #0
   1177e:	9000      	str	r0, [sp, #0]
   11780:	4b17      	ldr	r3, [pc, #92]	; (117e0 <modlog_init+0xc4>)
   11782:	681c      	ldr	r4, [r3, #0]
   11784:	4603      	mov	r3, r0
   11786:	4602      	mov	r2, r0
   11788:	4601      	mov	r1, r0
   1178a:	47a0      	blx	r4
   1178c:	e7d4      	b.n	11738 <modlog_init+0x1c>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1178e:	f7fa fd2b 	bl	c1e8 <hal_debugger_connected>
   11792:	b100      	cbz	r0, 11796 <modlog_init+0x7a>
   11794:	be01      	bkpt	0x0001
   11796:	2000      	movs	r0, #0
   11798:	9000      	str	r0, [sp, #0]
   1179a:	4b11      	ldr	r3, [pc, #68]	; (117e0 <modlog_init+0xc4>)
   1179c:	681c      	ldr	r4, [r3, #0]
   1179e:	4603      	mov	r3, r0
   117a0:	4602      	mov	r2, r0
   117a2:	4601      	mov	r1, r0
   117a4:	47a0      	blx	r4
   117a6:	e7d0      	b.n	1174a <modlog_init+0x2e>
    SYSINIT_PANIC_ASSERT(rc == 0);
   117a8:	f7fa fd1e 	bl	c1e8 <hal_debugger_connected>
   117ac:	b100      	cbz	r0, 117b0 <modlog_init+0x94>
   117ae:	be01      	bkpt	0x0001
   117b0:	2000      	movs	r0, #0
   117b2:	9000      	str	r0, [sp, #0]
   117b4:	4b0a      	ldr	r3, [pc, #40]	; (117e0 <modlog_init+0xc4>)
   117b6:	681c      	ldr	r4, [r3, #0]
   117b8:	4603      	mov	r3, r0
   117ba:	4602      	mov	r2, r0
   117bc:	4601      	mov	r1, r0
   117be:	47a0      	blx	r4
}
   117c0:	e7cc      	b.n	1175c <modlog_init+0x40>
   117c2:	bf00      	nop
   117c4:	20003584 	.word	0x20003584
   117c8:	00031ac8 	.word	0x00031ac8
   117cc:	20001b00 	.word	0x20001b00
   117d0:	20003554 	.word	0x20003554
   117d4:	20001bc0 	.word	0x20001bc0
   117d8:	20001afc 	.word	0x20001afc
   117dc:	20001bc4 	.word	0x20001bc4
   117e0:	20000298 	.word	0x20000298

000117e4 <mfg_seek_next_aux>:
 *                                  for reading.
 *                              Other MFG error code on failure.
 */
static int
mfg_seek_next_aux(struct mfg_reader *reader)
{
   117e4:	b530      	push	{r4, r5, lr}
   117e6:	b083      	sub	sp, #12
    const struct flash_area *fap;
    const struct mfg_mmr *mmr;
    int rc;

    if (reader->mmr_idx >= mfg_num_mmrs) {
   117e8:	7885      	ldrb	r5, [r0, #2]
   117ea:	4b21      	ldr	r3, [pc, #132]	; (11870 <mfg_seek_next_aux+0x8c>)
   117ec:	681b      	ldr	r3, [r3, #0]
   117ee:	429d      	cmp	r5, r3
   117f0:	da32      	bge.n	11858 <mfg_seek_next_aux+0x74>
   117f2:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }

    mmr = &mfg_mmrs[reader->mmr_idx];

    rc = flash_area_open(mmr->area_id, &fap);
   117f4:	eb05 0245 	add.w	r2, r5, r5, lsl #1
   117f8:	0093      	lsls	r3, r2, #2
   117fa:	a901      	add	r1, sp, #4
   117fc:	4a1d      	ldr	r2, [pc, #116]	; (11874 <mfg_seek_next_aux+0x90>)
   117fe:	5cd0      	ldrb	r0, [r2, r3]
   11800:	f7ff f8f8 	bl	109f4 <flash_area_open>
    if (rc != 0) {
   11804:	bb58      	cbnz	r0, 1185e <mfg_seek_next_aux+0x7a>
        return SYS_EIO;
    }

    if (reader->offset == 0) {
   11806:	6862      	ldr	r2, [r4, #4]
   11808:	b9c2      	cbnz	r2, 1183c <mfg_seek_next_aux+0x58>
        /* First seek; advance to the start of the MMR. */
        reader->offset = mmr->offset;
   1180a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   1180e:	00aa      	lsls	r2, r5, #2
   11810:	4b18      	ldr	r3, [pc, #96]	; (11874 <mfg_seek_next_aux+0x90>)
   11812:	4413      	add	r3, r2
   11814:	685b      	ldr	r3, [r3, #4]
   11816:	6063      	str	r3, [r4, #4]
    } else {
        /* Follow-up seek; skip the current TLV. */
        reader->offset += MFG_META_TLV_SZ + reader->cur_tlv.size;
    }

    if (reader->offset >= fap->fa_size - MFG_META_FOOTER_SZ) {
   11818:	6861      	ldr	r1, [r4, #4]
   1181a:	9801      	ldr	r0, [sp, #4]
   1181c:	6883      	ldr	r3, [r0, #8]
   1181e:	3b08      	subs	r3, #8
   11820:	4299      	cmp	r1, r3
   11822:	d310      	bcc.n	11846 <mfg_seek_next_aux+0x62>
        /* Reached end of the MMR; advance to the next MMR if one exists. */
        if (reader->mmr_idx + 1 >= mfg_num_mmrs) {
   11824:	78a3      	ldrb	r3, [r4, #2]
   11826:	1c59      	adds	r1, r3, #1
   11828:	4a11      	ldr	r2, [pc, #68]	; (11870 <mfg_seek_next_aux+0x8c>)
   1182a:	6812      	ldr	r2, [r2, #0]
   1182c:	4291      	cmp	r1, r2
   1182e:	da19      	bge.n	11864 <mfg_seek_next_aux+0x80>
            rc = SYS_EDONE;
        } else {
            reader->offset = 0;
   11830:	2200      	movs	r2, #0
   11832:	6062      	str	r2, [r4, #4]
            reader->mmr_idx++;
   11834:	70a1      	strb	r1, [r4, #2]
            rc = SYS_EAGAIN;
   11836:	f06f 0305 	mvn.w	r3, #5
   1183a:	e015      	b.n	11868 <mfg_seek_next_aux+0x84>
        reader->offset += MFG_META_TLV_SZ + reader->cur_tlv.size;
   1183c:	7863      	ldrb	r3, [r4, #1]
   1183e:	4413      	add	r3, r2
   11840:	3302      	adds	r3, #2
   11842:	6063      	str	r3, [r4, #4]
   11844:	e7e8      	b.n	11818 <mfg_seek_next_aux+0x34>
        }
        goto done;
    }

    /* Read current TLV header. */
    rc = flash_area_read(fap, reader->offset, &reader->cur_tlv,
   11846:	2302      	movs	r3, #2
   11848:	4622      	mov	r2, r4
   1184a:	f7ff f92b 	bl	10aa4 <flash_area_read>
                         MFG_META_TLV_SZ);
    if (rc != 0) {
   1184e:	4603      	mov	r3, r0
   11850:	b150      	cbz	r0, 11868 <mfg_seek_next_aux+0x84>
        rc = SYS_EIO;
   11852:	f06f 0304 	mvn.w	r3, #4
   11856:	e007      	b.n	11868 <mfg_seek_next_aux+0x84>
        return SYS_EINVAL;
   11858:	f06f 0301 	mvn.w	r3, #1
   1185c:	e004      	b.n	11868 <mfg_seek_next_aux+0x84>
        return SYS_EIO;
   1185e:	f06f 0304 	mvn.w	r3, #4
   11862:	e001      	b.n	11868 <mfg_seek_next_aux+0x84>
            rc = SYS_EDONE;
   11864:	f06f 030e 	mvn.w	r3, #14
    }

done:
    flash_area_close(fap);
    return rc;
}
   11868:	4618      	mov	r0, r3
   1186a:	b003      	add	sp, #12
   1186c:	bd30      	pop	{r4, r5, pc}
   1186e:	bf00      	nop
   11870:	20001c04 	.word	0x20001c04
   11874:	20001bec 	.word	0x20001bec

00011878 <mfg_read_mmr>:
/**
 * Reads an MMR from the end of the specified flash area.
 */
static int
mfg_read_mmr(uint8_t area_id, struct mfg_mmr *out_mmr)
{
   11878:	b530      	push	{r4, r5, lr}
   1187a:	b085      	sub	sp, #20
   1187c:	4605      	mov	r5, r0
   1187e:	460c      	mov	r4, r1
    const struct flash_area *fap;
    struct mfg_meta_footer ftr;
    int rc;

    rc = flash_area_open(area_id, &fap);
   11880:	a903      	add	r1, sp, #12
   11882:	f7ff f8b7 	bl	109f4 <flash_area_open>
    if (rc != 0) {
   11886:	b9e8      	cbnz	r0, 118c4 <mfg_read_mmr+0x4c>
        return SYS_EIO;
    }

    /* Read the MMR footer. */
    rc = flash_area_read(fap, fap->fa_size - sizeof ftr, &ftr, sizeof ftr);
   11888:	9803      	ldr	r0, [sp, #12]
   1188a:	6881      	ldr	r1, [r0, #8]
   1188c:	2308      	movs	r3, #8
   1188e:	aa01      	add	r2, sp, #4
   11890:	3908      	subs	r1, #8
   11892:	f7ff f907 	bl	10aa4 <flash_area_read>
    flash_area_close(fap);

    if (rc != 0) {
   11896:	4601      	mov	r1, r0
   11898:	b9b8      	cbnz	r0, 118ca <mfg_read_mmr+0x52>
        return SYS_EIO;
    }

    if (ftr.magic != MFG_META_MAGIC) {
   1189a:	9a02      	ldr	r2, [sp, #8]
   1189c:	4b11      	ldr	r3, [pc, #68]	; (118e4 <mfg_read_mmr+0x6c>)
   1189e:	429a      	cmp	r2, r3
   118a0:	d116      	bne.n	118d0 <mfg_read_mmr+0x58>
        return SYS_ENODEV;
    }

    if (ftr.version != MFG_META_VERSION) {
   118a2:	f89d 3006 	ldrb.w	r3, [sp, #6]
   118a6:	2b02      	cmp	r3, #2
   118a8:	d115      	bne.n	118d6 <mfg_read_mmr+0x5e>
        return SYS_ENOTSUP;
    }

    if (ftr.size > fap->fa_size) {
   118aa:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   118ae:	9b03      	ldr	r3, [sp, #12]
   118b0:	689b      	ldr	r3, [r3, #8]
   118b2:	429a      	cmp	r2, r3
   118b4:	d812      	bhi.n	118dc <mfg_read_mmr+0x64>
        return SYS_ENODEV;
    }

    *out_mmr = (struct mfg_mmr) {
        .area_id = area_id,
        .offset = fap->fa_size - ftr.size,
   118b6:	1a9b      	subs	r3, r3, r2
    *out_mmr = (struct mfg_mmr) {
   118b8:	7025      	strb	r5, [r4, #0]
   118ba:	6063      	str	r3, [r4, #4]
   118bc:	60a2      	str	r2, [r4, #8]
        .size = ftr.size,
    };

    return 0;
}
   118be:	4608      	mov	r0, r1
   118c0:	b005      	add	sp, #20
   118c2:	bd30      	pop	{r4, r5, pc}
        return SYS_EIO;
   118c4:	f06f 0104 	mvn.w	r1, #4
   118c8:	e7f9      	b.n	118be <mfg_read_mmr+0x46>
        return SYS_EIO;
   118ca:	f06f 0104 	mvn.w	r1, #4
   118ce:	e7f6      	b.n	118be <mfg_read_mmr+0x46>
        return SYS_ENODEV;
   118d0:	f06f 0108 	mvn.w	r1, #8
   118d4:	e7f3      	b.n	118be <mfg_read_mmr+0x46>
        return SYS_ENOTSUP;
   118d6:	f06f 010b 	mvn.w	r1, #11
   118da:	e7f0      	b.n	118be <mfg_read_mmr+0x46>
        return SYS_ENODEV;
   118dc:	f06f 0108 	mvn.w	r1, #8
   118e0:	e7ed      	b.n	118be <mfg_read_mmr+0x46>
   118e2:	bf00      	nop
   118e4:	3bb2a269 	.word	0x3bb2a269

000118e8 <mfg_read_next_mmr>:
 * Reads an MMR from the end of the specified flash area.  On success, the
 * global MMR list is populated with the result for subsequent reading.
 */
static int
mfg_read_next_mmr(uint8_t area_id)
{
   118e8:	b508      	push	{r3, lr}
    int rc;
    int i;

    /* Detect if this MMR has already been read. */
    for (i = 0; i < mfg_num_mmrs; i++) {
   118ea:	2300      	movs	r3, #0
   118ec:	4a11      	ldr	r2, [pc, #68]	; (11934 <mfg_read_next_mmr+0x4c>)
   118ee:	6812      	ldr	r2, [r2, #0]
   118f0:	429a      	cmp	r2, r3
   118f2:	dd08      	ble.n	11906 <mfg_read_next_mmr+0x1e>
        if (mfg_mmrs[i].area_id == area_id) {
   118f4:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   118f8:	008a      	lsls	r2, r1, #2
   118fa:	490f      	ldr	r1, [pc, #60]	; (11938 <mfg_read_next_mmr+0x50>)
   118fc:	5c8a      	ldrb	r2, [r1, r2]
   118fe:	4282      	cmp	r2, r0
   11900:	d011      	beq.n	11926 <mfg_read_next_mmr+0x3e>
    for (i = 0; i < mfg_num_mmrs; i++) {
   11902:	3301      	adds	r3, #1
   11904:	e7f2      	b.n	118ec <mfg_read_next_mmr+0x4>
            return SYS_EALREADY;
        }
    }

    if (mfg_num_mmrs >= MYNEWT_VAL(MFG_MAX_MMRS)) {
   11906:	2a01      	cmp	r2, #1
   11908:	dc11      	bgt.n	1192e <mfg_read_next_mmr+0x46>
        return SYS_ENOMEM;
    }

    rc = mfg_read_mmr(area_id, &mfg_mmrs[mfg_num_mmrs]);
   1190a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   1190e:	0093      	lsls	r3, r2, #2
   11910:	4909      	ldr	r1, [pc, #36]	; (11938 <mfg_read_next_mmr+0x50>)
   11912:	4419      	add	r1, r3
   11914:	f7ff ffb0 	bl	11878 <mfg_read_mmr>
    if (rc != 0) {
   11918:	4603      	mov	r3, r0
   1191a:	b930      	cbnz	r0, 1192a <mfg_read_next_mmr+0x42>
        return rc;
    }

    mfg_num_mmrs++;
   1191c:	4905      	ldr	r1, [pc, #20]	; (11934 <mfg_read_next_mmr+0x4c>)
   1191e:	680a      	ldr	r2, [r1, #0]
   11920:	3201      	adds	r2, #1
   11922:	600a      	str	r2, [r1, #0]
    return 0;
   11924:	e001      	b.n	1192a <mfg_read_next_mmr+0x42>
            return SYS_EALREADY;
   11926:	f06f 030a 	mvn.w	r3, #10
}
   1192a:	4618      	mov	r0, r3
   1192c:	bd08      	pop	{r3, pc}
        return SYS_ENOMEM;
   1192e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11932:	e7fa      	b.n	1192a <mfg_read_next_mmr+0x42>
   11934:	20001c04 	.word	0x20001c04
   11938:	20001bec 	.word	0x20001bec

0001193c <mfg_open_flash_area>:
{
   1193c:	b508      	push	{r3, lr}
    assert(reader->mmr_idx < mfg_num_mmrs);
   1193e:	7883      	ldrb	r3, [r0, #2]
   11940:	4a0d      	ldr	r2, [pc, #52]	; (11978 <mfg_open_flash_area+0x3c>)
   11942:	6812      	ldr	r2, [r2, #0]
   11944:	4293      	cmp	r3, r2
   11946:	da0a      	bge.n	1195e <mfg_open_flash_area+0x22>
    rc = flash_area_open(mmr->area_id, fap);
   11948:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1194c:	009a      	lsls	r2, r3, #2
   1194e:	4b0b      	ldr	r3, [pc, #44]	; (1197c <mfg_open_flash_area+0x40>)
   11950:	5c98      	ldrb	r0, [r3, r2]
   11952:	f7ff f84f 	bl	109f4 <flash_area_open>
    if (rc != 0) {
   11956:	4603      	mov	r3, r0
   11958:	b958      	cbnz	r0, 11972 <mfg_open_flash_area+0x36>
}
   1195a:	4618      	mov	r0, r3
   1195c:	bd08      	pop	{r3, pc}
    assert(reader->mmr_idx < mfg_num_mmrs);
   1195e:	f7fa fc43 	bl	c1e8 <hal_debugger_connected>
   11962:	b100      	cbz	r0, 11966 <mfg_open_flash_area+0x2a>
   11964:	be01      	bkpt	0x0001
   11966:	2300      	movs	r3, #0
   11968:	461a      	mov	r2, r3
   1196a:	4619      	mov	r1, r3
   1196c:	4618      	mov	r0, r3
   1196e:	f7fb f8ef 	bl	cb50 <__assert_func>
        return SYS_EIO;
   11972:	f06f 0304 	mvn.w	r3, #4
   11976:	e7f0      	b.n	1195a <mfg_open_flash_area+0x1e>
   11978:	20001c04 	.word	0x20001c04
   1197c:	20001bec 	.word	0x20001bec

00011980 <mfg_read_tlv_body>:
{
   11980:	b570      	push	{r4, r5, r6, lr}
   11982:	b082      	sub	sp, #8
   11984:	4606      	mov	r6, r0
   11986:	460c      	mov	r4, r1
   11988:	4615      	mov	r5, r2
    rc = mfg_open_flash_area(reader, &fap);
   1198a:	a901      	add	r1, sp, #4
   1198c:	f7ff ffd6 	bl	1193c <mfg_open_flash_area>
    if (rc != 0) {
   11990:	4603      	mov	r3, r0
   11992:	b110      	cbz	r0, 1199a <mfg_read_tlv_body+0x1a>
}
   11994:	4618      	mov	r0, r3
   11996:	b002      	add	sp, #8
   11998:	bd70      	pop	{r4, r5, r6, pc}
    memset(dst, 0, max_size);
   1199a:	462a      	mov	r2, r5
   1199c:	2100      	movs	r1, #0
   1199e:	4620      	mov	r0, r4
   119a0:	f7fd f826 	bl	e9f0 <memset>
    read_sz = min(max_size, reader->cur_tlv.size);
   119a4:	7873      	ldrb	r3, [r6, #1]
    rc = flash_area_read(fap, reader->offset + MFG_META_TLV_SZ, dst, read_sz);
   119a6:	6871      	ldr	r1, [r6, #4]
   119a8:	42ab      	cmp	r3, r5
   119aa:	bfa8      	it	ge
   119ac:	462b      	movge	r3, r5
   119ae:	4622      	mov	r2, r4
   119b0:	3102      	adds	r1, #2
   119b2:	9801      	ldr	r0, [sp, #4]
   119b4:	f7ff f876 	bl	10aa4 <flash_area_read>
    if (rc != 0) {
   119b8:	4603      	mov	r3, r0
   119ba:	2800      	cmp	r0, #0
   119bc:	d0ea      	beq.n	11994 <mfg_read_tlv_body+0x14>
        return SYS_EIO;
   119be:	f06f 0304 	mvn.w	r3, #4
   119c2:	e7e7      	b.n	11994 <mfg_read_tlv_body+0x14>

000119c4 <mfg_seek_next>:
{
   119c4:	b510      	push	{r4, lr}
   119c6:	4604      	mov	r4, r0
        rc = mfg_seek_next_aux(reader);
   119c8:	4620      	mov	r0, r4
   119ca:	f7ff ff0b 	bl	117e4 <mfg_seek_next_aux>
    } while (rc == SYS_EAGAIN);
   119ce:	f110 0f06 	cmn.w	r0, #6
   119d2:	d0f9      	beq.n	119c8 <mfg_seek_next+0x4>
}
   119d4:	bd10      	pop	{r4, pc}

000119d6 <mfg_seek_next_with_type>:
{
   119d6:	b538      	push	{r3, r4, r5, lr}
   119d8:	4604      	mov	r4, r0
   119da:	460d      	mov	r5, r1
        rc = mfg_seek_next(reader);
   119dc:	4620      	mov	r0, r4
   119de:	f7ff fff1 	bl	119c4 <mfg_seek_next>
        if (rc != 0) {
   119e2:	4602      	mov	r2, r0
   119e4:	b910      	cbnz	r0, 119ec <mfg_seek_next_with_type+0x16>
        if (reader->cur_tlv.type == type) {
   119e6:	7823      	ldrb	r3, [r4, #0]
   119e8:	42ab      	cmp	r3, r5
   119ea:	d1f7      	bne.n	119dc <mfg_seek_next_with_type+0x6>
}
   119ec:	4610      	mov	r0, r2
   119ee:	bd38      	pop	{r3, r4, r5, pc}

000119f0 <mfg_read_tlv_flash_area>:
{
   119f0:	b508      	push	{r3, lr}
    return mfg_read_tlv_body(reader, out_mfa, sizeof *out_mfa);
   119f2:	220a      	movs	r2, #10
   119f4:	f7ff ffc4 	bl	11980 <mfg_read_tlv_body>
}
   119f8:	bd08      	pop	{r3, pc}

000119fa <mfg_read_tlv_mmr_ref>:
{
   119fa:	b508      	push	{r3, lr}
    return mfg_read_tlv_body(reader, out_mr, sizeof *out_mr);
   119fc:	2201      	movs	r2, #1
   119fe:	f7ff ffbf 	bl	11980 <mfg_read_tlv_body>
}
   11a02:	bd08      	pop	{r3, pc}

00011a04 <mfg_read_tlv_hash>:
{
   11a04:	b508      	push	{r3, lr}
    return mfg_read_tlv_body(reader, out_hash, MFG_HASH_SZ);
   11a06:	2220      	movs	r2, #32
   11a08:	f7ff ffba 	bl	11980 <mfg_read_tlv_body>
}
   11a0c:	bd08      	pop	{r3, pc}
	...

00011a10 <mfg_init>:
 * called before any TLVs can be read.  No-op if this function has already
 * executed successfully.
 */
void
mfg_init(void)
{
   11a10:	b508      	push	{r3, lr}
    int rc;

    if (mfg_initialized) {
   11a12:	4b0d      	ldr	r3, [pc, #52]	; (11a48 <mfg_init+0x38>)
   11a14:	781b      	ldrb	r3, [r3, #0]
   11a16:	b94b      	cbnz	r3, 11a2c <mfg_init+0x1c>
        return;
    }
    mfg_initialized = true;
   11a18:	4b0b      	ldr	r3, [pc, #44]	; (11a48 <mfg_init+0x38>)
   11a1a:	2201      	movs	r2, #1
   11a1c:	701a      	strb	r2, [r3, #0]

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   11a1e:	4b0b      	ldr	r3, [pc, #44]	; (11a4c <mfg_init+0x3c>)
   11a20:	781b      	ldrb	r3, [r3, #0]
   11a22:	b123      	cbz	r3, 11a2e <mfg_init+0x1e>

    /* Read the first MMR from the boot loader area. */
    rc = mfg_read_next_mmr(FLASH_AREA_BOOTLOADER);
   11a24:	2000      	movs	r0, #0
   11a26:	f7ff ff5f 	bl	118e8 <mfg_read_next_mmr>
    if (rc != 0) {
   11a2a:	b150      	cbz	r0, 11a42 <mfg_init+0x32>

    return;

err:
    MFG_LOG_ERROR("failed to read MMRs: rc=%d", rc);
}
   11a2c:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   11a2e:	f7fa fbdb 	bl	c1e8 <hal_debugger_connected>
   11a32:	b100      	cbz	r0, 11a36 <mfg_init+0x26>
   11a34:	be01      	bkpt	0x0001
   11a36:	2300      	movs	r3, #0
   11a38:	461a      	mov	r2, r3
   11a3a:	4619      	mov	r1, r3
   11a3c:	4618      	mov	r0, r3
   11a3e:	f7fb f887 	bl	cb50 <__assert_func>
    rc = mfg_read_mmr_refs();
   11a42:	f000 f80d 	bl	11a60 <mfg_read_mmr_refs>
err:
   11a46:	e7f1      	b.n	11a2c <mfg_init+0x1c>
   11a48:	20001be8 	.word	0x20001be8
   11a4c:	20003584 	.word	0x20003584

00011a50 <mfg_open>:
{
   11a50:	b510      	push	{r4, lr}
   11a52:	4604      	mov	r4, r0
    mfg_init();
   11a54:	f7ff ffdc 	bl	11a10 <mfg_init>
    *out_reader = (struct mfg_reader) { 0 };
   11a58:	2300      	movs	r3, #0
   11a5a:	6023      	str	r3, [r4, #0]
   11a5c:	6063      	str	r3, [r4, #4]
}
   11a5e:	bd10      	pop	{r4, pc}

00011a60 <mfg_read_mmr_refs>:
{
   11a60:	b500      	push	{lr}
   11a62:	b085      	sub	sp, #20
    mfg_open(&reader);
   11a64:	a801      	add	r0, sp, #4
   11a66:	f7ff fff3 	bl	11a50 <mfg_open>
        rc = mfg_seek_next_with_type(&reader, MFG_META_TLV_TYPE_MMR_REF);
   11a6a:	2104      	movs	r1, #4
   11a6c:	eb0d 0001 	add.w	r0, sp, r1
   11a70:	f7ff ffb1 	bl	119d6 <mfg_seek_next_with_type>
   11a74:	4603      	mov	r3, r0
        switch (rc) {
   11a76:	f110 0f0f 	cmn.w	r0, #15
   11a7a:	d004      	beq.n	11a86 <mfg_read_mmr_refs+0x26>
   11a7c:	b128      	cbz	r0, 11a8a <mfg_read_mmr_refs+0x2a>
}
   11a7e:	4618      	mov	r0, r3
   11a80:	b005      	add	sp, #20
   11a82:	f85d fb04 	ldr.w	pc, [sp], #4
            return 0;
   11a86:	2300      	movs	r3, #0
   11a88:	e7f9      	b.n	11a7e <mfg_read_mmr_refs+0x1e>
        rc = mfg_read_tlv_mmr_ref(&reader, &mmr_ref);
   11a8a:	a903      	add	r1, sp, #12
   11a8c:	a801      	add	r0, sp, #4
   11a8e:	f7ff ffb4 	bl	119fa <mfg_read_tlv_mmr_ref>
        if (rc != 0) {
   11a92:	4603      	mov	r3, r0
   11a94:	2800      	cmp	r0, #0
   11a96:	d1f2      	bne.n	11a7e <mfg_read_mmr_refs+0x1e>
        rc = mfg_read_next_mmr(mmr_ref.area_id);
   11a98:	f89d 000c 	ldrb.w	r0, [sp, #12]
   11a9c:	f7ff ff24 	bl	118e8 <mfg_read_next_mmr>
        if (rc != 0 && rc != SYS_EALREADY) {
   11aa0:	4603      	mov	r3, r0
   11aa2:	2800      	cmp	r0, #0
   11aa4:	d0e1      	beq.n	11a6a <mfg_read_mmr_refs+0xa>
   11aa6:	f110 0f0b 	cmn.w	r0, #11
   11aaa:	d0de      	beq.n	11a6a <mfg_read_mmr_refs+0xa>
   11aac:	e7e7      	b.n	11a7e <mfg_read_mmr_refs+0x1e>
	...

00011ab0 <reboot_conf_export>:
reboot_conf_export(void (*func)(char *name, char *val),
                   enum conf_export_tgt tgt)
{
    char str[12];

    if (tgt == CONF_EXPORT_SHOW) {
   11ab0:	2901      	cmp	r1, #1
   11ab2:	d001      	beq.n	11ab8 <reboot_conf_export+0x8>
        func("reboot/written",
             conf_str_from_value(CONF_BOOL, &log_reboot_written, str,
                                 sizeof str));
    }
    return 0;
}
   11ab4:	2000      	movs	r0, #0
   11ab6:	4770      	bx	lr
{
   11ab8:	b510      	push	{r4, lr}
   11aba:	b084      	sub	sp, #16
   11abc:	4604      	mov	r4, r0
        func("reboot/reboot_cnt",
   11abe:	230c      	movs	r3, #12
   11ac0:	aa01      	add	r2, sp, #4
   11ac2:	4909      	ldr	r1, [pc, #36]	; (11ae8 <reboot_conf_export+0x38>)
   11ac4:	2003      	movs	r0, #3
   11ac6:	f7fd fd4d 	bl	f564 <conf_str_from_value>
   11aca:	4601      	mov	r1, r0
   11acc:	4807      	ldr	r0, [pc, #28]	; (11aec <reboot_conf_export+0x3c>)
   11ace:	47a0      	blx	r4
        func("reboot/written",
   11ad0:	230c      	movs	r3, #12
   11ad2:	aa01      	add	r2, sp, #4
   11ad4:	4906      	ldr	r1, [pc, #24]	; (11af0 <reboot_conf_export+0x40>)
   11ad6:	200a      	movs	r0, #10
   11ad8:	f7fd fd44 	bl	f564 <conf_str_from_value>
   11adc:	4601      	mov	r1, r0
   11ade:	4805      	ldr	r0, [pc, #20]	; (11af4 <reboot_conf_export+0x44>)
   11ae0:	47a0      	blx	r4
}
   11ae2:	2000      	movs	r0, #0
   11ae4:	b004      	add	sp, #16
   11ae6:	bd10      	pop	{r4, pc}
   11ae8:	20003570 	.word	0x20003570
   11aec:	00031ba8 	.word	0x00031ba8
   11af0:	20001c08 	.word	0x20001c08
   11af4:	00031bbc 	.word	0x00031bbc

00011af8 <reboot_conf_get>:
    if (argc == 1) {
   11af8:	2801      	cmp	r0, #1
   11afa:	d11b      	bne.n	11b34 <reboot_conf_get+0x3c>
{
   11afc:	b570      	push	{r4, r5, r6, lr}
   11afe:	461d      	mov	r5, r3
   11b00:	4614      	mov	r4, r2
        if (!strcmp(argv[0], "reboot_cnt")) {
   11b02:	680e      	ldr	r6, [r1, #0]
   11b04:	490d      	ldr	r1, [pc, #52]	; (11b3c <reboot_conf_get+0x44>)
   11b06:	4630      	mov	r0, r6
   11b08:	f7fc ff98 	bl	ea3c <strcmp>
   11b0c:	b158      	cbz	r0, 11b26 <reboot_conf_get+0x2e>
        } else if (!strcmp(argv[0], "written")) {
   11b0e:	490c      	ldr	r1, [pc, #48]	; (11b40 <reboot_conf_get+0x48>)
   11b10:	4630      	mov	r0, r6
   11b12:	f7fc ff93 	bl	ea3c <strcmp>
   11b16:	b978      	cbnz	r0, 11b38 <reboot_conf_get+0x40>
            return conf_str_from_value(CONF_BOOL, &log_reboot_written,
   11b18:	462b      	mov	r3, r5
   11b1a:	4622      	mov	r2, r4
   11b1c:	4909      	ldr	r1, [pc, #36]	; (11b44 <reboot_conf_get+0x4c>)
   11b1e:	200a      	movs	r0, #10
   11b20:	f7fd fd20 	bl	f564 <conf_str_from_value>
}
   11b24:	bd70      	pop	{r4, r5, r6, pc}
            return conf_str_from_value(CONF_INT16, &reboot_cnt, buf, max_len);
   11b26:	462b      	mov	r3, r5
   11b28:	4622      	mov	r2, r4
   11b2a:	4907      	ldr	r1, [pc, #28]	; (11b48 <reboot_conf_get+0x50>)
   11b2c:	2003      	movs	r0, #3
   11b2e:	f7fd fd19 	bl	f564 <conf_str_from_value>
   11b32:	e7f7      	b.n	11b24 <reboot_conf_get+0x2c>
    return NULL;
   11b34:	2000      	movs	r0, #0
}
   11b36:	4770      	bx	lr
    return NULL;
   11b38:	2000      	movs	r0, #0
   11b3a:	e7f3      	b.n	11b24 <reboot_conf_get+0x2c>
   11b3c:	00031bcc 	.word	0x00031bcc
   11b40:	00031bd8 	.word	0x00031bd8
   11b44:	20001c08 	.word	0x20001c08
   11b48:	20003570 	.word	0x20003570

00011b4c <reboot_conf_set>:
    if (argc == 1) {
   11b4c:	2801      	cmp	r0, #1
   11b4e:	d11a      	bne.n	11b86 <reboot_conf_set+0x3a>
{
   11b50:	b538      	push	{r3, r4, r5, lr}
   11b52:	4614      	mov	r4, r2
        if (!strcmp(argv[0], "reboot_cnt")) {
   11b54:	680d      	ldr	r5, [r1, #0]
   11b56:	490e      	ldr	r1, [pc, #56]	; (11b90 <reboot_conf_set+0x44>)
   11b58:	4628      	mov	r0, r5
   11b5a:	f7fc ff6f 	bl	ea3c <strcmp>
   11b5e:	b158      	cbz	r0, 11b78 <reboot_conf_set+0x2c>
        } else if (!strcmp(argv[0], "written")) {
   11b60:	490c      	ldr	r1, [pc, #48]	; (11b94 <reboot_conf_set+0x48>)
   11b62:	4628      	mov	r0, r5
   11b64:	f7fc ff6a 	bl	ea3c <strcmp>
   11b68:	b978      	cbnz	r0, 11b8a <reboot_conf_set+0x3e>
            return CONF_VALUE_SET(val, CONF_INT16, log_reboot_written);
   11b6a:	2301      	movs	r3, #1
   11b6c:	4a0a      	ldr	r2, [pc, #40]	; (11b98 <reboot_conf_set+0x4c>)
   11b6e:	2103      	movs	r1, #3
   11b70:	4620      	mov	r0, r4
   11b72:	f7fd fc48 	bl	f406 <conf_value_from_str>
}
   11b76:	bd38      	pop	{r3, r4, r5, pc}
            return CONF_VALUE_SET(val, CONF_INT16, reboot_cnt);
   11b78:	2302      	movs	r3, #2
   11b7a:	4a08      	ldr	r2, [pc, #32]	; (11b9c <reboot_conf_set+0x50>)
   11b7c:	2103      	movs	r1, #3
   11b7e:	4620      	mov	r0, r4
   11b80:	f7fd fc41 	bl	f406 <conf_value_from_str>
   11b84:	e7f7      	b.n	11b76 <reboot_conf_set+0x2a>
    return OS_ENOENT;
   11b86:	200a      	movs	r0, #10
}
   11b88:	4770      	bx	lr
    return OS_ENOENT;
   11b8a:	200a      	movs	r0, #10
   11b8c:	e7f3      	b.n	11b76 <reboot_conf_set+0x2a>
   11b8e:	bf00      	nop
   11b90:	00031bcc 	.word	0x00031bcc
   11b94:	00031bd8 	.word	0x00031bd8
   11b98:	20001c08 	.word	0x20001c08
   11b9c:	20003570 	.word	0x20003570

00011ba0 <log_reboot_init_fcb>:
{
   11ba0:	b510      	push	{r4, lr}
   11ba2:	b084      	sub	sp, #16
    if (flash_area_open(MYNEWT_VAL(REBOOT_LOG_FLASH_AREA), &ptr)) {
   11ba4:	a903      	add	r1, sp, #12
   11ba6:	2010      	movs	r0, #16
   11ba8:	f7fe ff24 	bl	109f4 <flash_area_open>
   11bac:	2800      	cmp	r0, #0
   11bae:	d133      	bne.n	11c18 <log_reboot_init_fcb+0x78>
    reboot_log_fcb.fl_entries = MYNEWT_VAL(REBOOT_LOG_ENTRY_COUNT);
   11bb0:	4b1b      	ldr	r3, [pc, #108]	; (11c20 <log_reboot_init_fcb+0x80>)
   11bb2:	220a      	movs	r2, #10
   11bb4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    reboot_sector = *ptr;
   11bb8:	9a03      	ldr	r2, [sp, #12]
   11bba:	4c1a      	ldr	r4, [pc, #104]	; (11c24 <log_reboot_init_fcb+0x84>)
   11bbc:	ca07      	ldmia	r2, {r0, r1, r2}
   11bbe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    fcbp->f_magic = 0x7EADBADF;
   11bc2:	4a19      	ldr	r2, [pc, #100]	; (11c28 <log_reboot_init_fcb+0x88>)
   11bc4:	601a      	str	r2, [r3, #0]
    fcbp->f_version = g_log_info.li_version;
   11bc6:	4a19      	ldr	r2, [pc, #100]	; (11c2c <log_reboot_init_fcb+0x8c>)
   11bc8:	7912      	ldrb	r2, [r2, #4]
   11bca:	711a      	strb	r2, [r3, #4]
    fcbp->f_sector_cnt = 1;
   11bcc:	2201      	movs	r2, #1
   11bce:	715a      	strb	r2, [r3, #5]
    fcbp->f_sectors = &reboot_sector;
   11bd0:	609c      	str	r4, [r3, #8]
    rc = fcb_init(fcbp);
   11bd2:	4618      	mov	r0, r3
   11bd4:	f01b fe59 	bl	2d88a <fcb_init>
    if (rc) {
   11bd8:	b148      	cbz	r0, 11bee <log_reboot_init_fcb+0x4e>
        flash_area_erase(ptr, 0, ptr->fa_size);
   11bda:	9803      	ldr	r0, [sp, #12]
   11bdc:	6882      	ldr	r2, [r0, #8]
   11bde:	2100      	movs	r1, #0
   11be0:	f7fe ff86 	bl	10af0 <flash_area_erase>
        rc = fcb_init(fcbp);
   11be4:	480e      	ldr	r0, [pc, #56]	; (11c20 <log_reboot_init_fcb+0x80>)
   11be6:	f01b fe50 	bl	2d88a <fcb_init>
        if (rc) {
   11bea:	4603      	mov	r3, r0
   11bec:	b948      	cbnz	r0, 11c02 <log_reboot_init_fcb+0x62>
    rc = log_register("reboot_log", &reboot_log, &log_fcb_handler,
   11bee:	2300      	movs	r3, #0
   11bf0:	9300      	str	r3, [sp, #0]
   11bf2:	4b0b      	ldr	r3, [pc, #44]	; (11c20 <log_reboot_init_fcb+0x80>)
   11bf4:	4a0e      	ldr	r2, [pc, #56]	; (11c30 <log_reboot_init_fcb+0x90>)
   11bf6:	490f      	ldr	r1, [pc, #60]	; (11c34 <log_reboot_init_fcb+0x94>)
   11bf8:	480f      	ldr	r0, [pc, #60]	; (11c38 <log_reboot_init_fcb+0x98>)
   11bfa:	f7ff fa7d 	bl	110f8 <log_register>
    if (rc != 0) {
   11bfe:	4603      	mov	r3, r0
   11c00:	b110      	cbz	r0, 11c08 <log_reboot_init_fcb+0x68>
}
   11c02:	4618      	mov	r0, r3
   11c04:	b004      	add	sp, #16
   11c06:	bd10      	pop	{r4, pc}
    rc = modlog_register(LOG_MODULE_REBOOT, &reboot_log, LOG_SYSLEVEL,
   11c08:	2300      	movs	r3, #0
   11c0a:	461a      	mov	r2, r3
   11c0c:	4909      	ldr	r1, [pc, #36]	; (11c34 <log_reboot_init_fcb+0x94>)
   11c0e:	2006      	movs	r0, #6
   11c10:	f7ff fd2e 	bl	11670 <modlog_register>
   11c14:	4603      	mov	r3, r0
   11c16:	e7f4      	b.n	11c02 <log_reboot_init_fcb+0x62>
        return SYS_EUNKNOWN;
   11c18:	f06f 030c 	mvn.w	r3, #12
   11c1c:	e7f1      	b.n	11c02 <log_reboot_init_fcb+0x62>
   11c1e:	bf00      	nop
   11c20:	20001c28 	.word	0x20001c28
   11c24:	20001c5c 	.word	0x20001c5c
   11c28:	7eadbadf 	.word	0x7eadbadf
   11c2c:	2000354c 	.word	0x2000354c
   11c30:	00032cf8 	.word	0x00032cf8
   11c34:	20001c0c 	.word	0x20001c0c
   11c38:	00031ae0 	.word	0x00031ae0

00011c3c <log_reboot_init_console>:
{
   11c3c:	b508      	push	{r3, lr}
    rc = modlog_register(LOG_MODULE_REBOOT, log_console_get(), LOG_SYSLEVEL,
   11c3e:	f7ff fbef 	bl	11420 <log_console_get>
   11c42:	2300      	movs	r3, #0
   11c44:	461a      	mov	r2, r3
   11c46:	4601      	mov	r1, r0
   11c48:	2006      	movs	r0, #6
   11c4a:	f7ff fd11 	bl	11670 <modlog_register>
}
   11c4e:	bd08      	pop	{r3, pc}

00011c50 <log_reboot_write>:
{
   11c50:	b5f0      	push	{r4, r5, r6, r7, lr}
   11c52:	f5ad 7d1d 	sub.w	sp, sp, #628	; 0x274
   11c56:	4607      	mov	r7, r0
        if (flash_area_open(MYNEWT_VAL(REBOOT_LOG_FLASH_AREA), &ptr)) {
   11c58:	a904      	add	r1, sp, #16
   11c5a:	2010      	movs	r0, #16
   11c5c:	f7fe feca 	bl	109f4 <flash_area_open>
   11c60:	b120      	cbz	r0, 11c6c <log_reboot_write+0x1c>
            return 0;
   11c62:	2600      	movs	r6, #0
}
   11c64:	4630      	mov	r0, r6
   11c66:	f50d 7d1d 	add.w	sp, sp, #628	; 0x274
   11c6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    rc = img_mgmt_read_info(boot_current_slot, &ver, hash, &flags);
   11c6c:	ab05      	add	r3, sp, #20
   11c6e:	aa92      	add	r2, sp, #584	; 0x248
   11c70:	a99a      	add	r1, sp, #616	; 0x268
   11c72:	4897      	ldr	r0, [pc, #604]	; (11ed0 <log_reboot_write+0x280>)
   11c74:	6800      	ldr	r0, [r0, #0]
   11c76:	f001 f801 	bl	12c7c <img_mgmt_read_info>
    if (rc != 0) {
   11c7a:	4606      	mov	r6, r0
   11c7c:	2800      	cmp	r0, #0
   11c7e:	d1f1      	bne.n	11c64 <log_reboot_write+0x14>
    memset(cbor_enc_buf, 0, sizeof cbor_enc_buf);
   11c80:	f44f 7480 	mov.w	r4, #256	; 0x100
   11c84:	4622      	mov	r2, r4
   11c86:	2100      	movs	r1, #0
   11c88:	a812      	add	r0, sp, #72	; 0x48
   11c8a:	f7fc feb1 	bl	e9f0 <memset>
    cbor_buf_writer_init(&writer, cbor_enc_buf, sizeof cbor_enc_buf);
   11c8e:	4622      	mov	r2, r4
   11c90:	a912      	add	r1, sp, #72	; 0x48
   11c92:	a80e      	add	r0, sp, #56	; 0x38
   11c94:	f01a fbe6 	bl	2c464 <cbor_buf_writer_init>
    cbor_encoder_init(&enc, &writer.enc, 0);
   11c98:	2200      	movs	r2, #0
   11c9a:	a90e      	add	r1, sp, #56	; 0x38
   11c9c:	a80a      	add	r0, sp, #40	; 0x28
   11c9e:	f01a fd0f 	bl	2c6c0 <cbor_encoder_init>
    rc = cbor_encoder_create_map(&enc, &map, CborIndefiniteLength);
   11ca2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   11ca6:	a906      	add	r1, sp, #24
   11ca8:	a80a      	add	r0, sp, #40	; 0x28
   11caa:	f01a fdd1 	bl	2c850 <cbor_encoder_create_map>
    if (rc != 0) {
   11cae:	4606      	mov	r6, r0
   11cb0:	2800      	cmp	r0, #0
   11cb2:	d1d7      	bne.n	11c64 <log_reboot_write+0x14>
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   11cb4:	2203      	movs	r2, #3
   11cb6:	4987      	ldr	r1, [pc, #540]	; (11ed4 <log_reboot_write+0x284>)
   11cb8:	a806      	add	r0, sp, #24
   11cba:	f01a fdbc 	bl	2c836 <cbor_encode_text_string>
    cbor_encode_text_stringz(&map, REBOOT_REASON_STR(info->reason));
   11cbe:	783b      	ldrb	r3, [r7, #0]
   11cc0:	2b01      	cmp	r3, #1
   11cc2:	d011      	beq.n	11ce8 <log_reboot_write+0x98>
   11cc4:	2b02      	cmp	r3, #2
   11cc6:	d048      	beq.n	11d5a <log_reboot_write+0x10a>
   11cc8:	2b03      	cmp	r3, #3
   11cca:	d048      	beq.n	11d5e <log_reboot_write+0x10e>
   11ccc:	2b04      	cmp	r3, #4
   11cce:	d048      	beq.n	11d62 <log_reboot_write+0x112>
   11cd0:	2b05      	cmp	r3, #5
   11cd2:	d048      	beq.n	11d66 <log_reboot_write+0x116>
   11cd4:	2b06      	cmp	r3, #6
   11cd6:	d048      	beq.n	11d6a <log_reboot_write+0x11a>
   11cd8:	2b07      	cmp	r3, #7
   11cda:	d048      	beq.n	11d6e <log_reboot_write+0x11e>
   11cdc:	2b08      	cmp	r3, #8
   11cde:	d001      	beq.n	11ce4 <log_reboot_write+0x94>
   11ce0:	4c7d      	ldr	r4, [pc, #500]	; (11ed8 <log_reboot_write+0x288>)
   11ce2:	e002      	b.n	11cea <log_reboot_write+0x9a>
   11ce4:	4c7d      	ldr	r4, [pc, #500]	; (11edc <log_reboot_write+0x28c>)
   11ce6:	e000      	b.n	11cea <log_reboot_write+0x9a>
   11ce8:	4c7d      	ldr	r4, [pc, #500]	; (11ee0 <log_reboot_write+0x290>)
   11cea:	4620      	mov	r0, r4
   11cec:	f7fc fef6 	bl	eadc <strlen>
   11cf0:	4602      	mov	r2, r0
   11cf2:	4621      	mov	r1, r4
   11cf4:	a806      	add	r0, sp, #24
   11cf6:	f01a fd9e 	bl	2c836 <cbor_encode_text_string>
   11cfa:	2203      	movs	r2, #3
   11cfc:	4979      	ldr	r1, [pc, #484]	; (11ee4 <log_reboot_write+0x294>)
   11cfe:	a806      	add	r0, sp, #24
   11d00:	f01a fd99 	bl	2c836 <cbor_encode_text_string>
    cbor_encode_int(&map, reboot_cnt);
   11d04:	4b78      	ldr	r3, [pc, #480]	; (11ee8 <log_reboot_write+0x298>)
   11d06:	881a      	ldrh	r2, [r3, #0]
   11d08:	2300      	movs	r3, #0
   11d0a:	a806      	add	r0, sp, #24
   11d0c:	f01a fd12 	bl	2c734 <cbor_encode_int>
   11d10:	2203      	movs	r2, #3
   11d12:	4976      	ldr	r1, [pc, #472]	; (11eec <log_reboot_write+0x29c>)
   11d14:	a806      	add	r0, sp, #24
   11d16:	f01a fd8e 	bl	2c836 <cbor_encode_text_string>
                  ver.iv_major, ver.iv_minor, ver.iv_revision,
   11d1a:	f89d 3268 	ldrb.w	r3, [sp, #616]	; 0x268
   11d1e:	f89d 2269 	ldrb.w	r2, [sp, #617]	; 0x269
   11d22:	f8bd 126a 	ldrh.w	r1, [sp, #618]	; 0x26a
    snprintf(buf, sizeof buf, "%u.%u.%u.%u",
   11d26:	989b      	ldr	r0, [sp, #620]	; 0x26c
   11d28:	9002      	str	r0, [sp, #8]
   11d2a:	9101      	str	r1, [sp, #4]
   11d2c:	9200      	str	r2, [sp, #0]
   11d2e:	4a70      	ldr	r2, [pc, #448]	; (11ef0 <log_reboot_write+0x2a0>)
   11d30:	f44f 7180 	mov.w	r1, #256	; 0x100
   11d34:	a852      	add	r0, sp, #328	; 0x148
   11d36:	f01d fdd8 	bl	2f8ea <snprintf>
   11d3a:	a852      	add	r0, sp, #328	; 0x148
   11d3c:	f7fc fece 	bl	eadc <strlen>
   11d40:	4602      	mov	r2, r0
   11d42:	a952      	add	r1, sp, #328	; 0x148
   11d44:	a806      	add	r0, sp, #24
   11d46:	f01a fd76 	bl	2c836 <cbor_encode_text_string>
   11d4a:	2204      	movs	r2, #4
   11d4c:	4969      	ldr	r1, [pc, #420]	; (11ef4 <log_reboot_write+0x2a4>)
   11d4e:	a806      	add	r0, sp, #24
   11d50:	f01a fd71 	bl	2c836 <cbor_encode_text_string>
    for (i = 0; i < sizeof hash; i++) {
   11d54:	4634      	mov	r4, r6
    off = 0;
   11d56:	4635      	mov	r5, r6
   11d58:	e018      	b.n	11d8c <log_reboot_write+0x13c>
    cbor_encode_text_stringz(&map, REBOOT_REASON_STR(info->reason));
   11d5a:	4c67      	ldr	r4, [pc, #412]	; (11ef8 <log_reboot_write+0x2a8>)
   11d5c:	e7c5      	b.n	11cea <log_reboot_write+0x9a>
   11d5e:	4c67      	ldr	r4, [pc, #412]	; (11efc <log_reboot_write+0x2ac>)
   11d60:	e7c3      	b.n	11cea <log_reboot_write+0x9a>
   11d62:	4c67      	ldr	r4, [pc, #412]	; (11f00 <log_reboot_write+0x2b0>)
   11d64:	e7c1      	b.n	11cea <log_reboot_write+0x9a>
   11d66:	4c67      	ldr	r4, [pc, #412]	; (11f04 <log_reboot_write+0x2b4>)
   11d68:	e7bf      	b.n	11cea <log_reboot_write+0x9a>
   11d6a:	4c67      	ldr	r4, [pc, #412]	; (11f08 <log_reboot_write+0x2b8>)
   11d6c:	e7bd      	b.n	11cea <log_reboot_write+0x9a>
   11d6e:	4c67      	ldr	r4, [pc, #412]	; (11f0c <log_reboot_write+0x2bc>)
   11d70:	e7bb      	b.n	11cea <log_reboot_write+0x9a>
                        (unsigned int)hash[i]);
   11d72:	ab9c      	add	r3, sp, #624	; 0x270
   11d74:	4423      	add	r3, r4
        off += snprintf(buf + off, sizeof buf - off, "%02x",
   11d76:	f813 3c28 	ldrb.w	r3, [r3, #-40]
   11d7a:	4a65      	ldr	r2, [pc, #404]	; (11f10 <log_reboot_write+0x2c0>)
   11d7c:	f5c5 7180 	rsb	r1, r5, #256	; 0x100
   11d80:	a852      	add	r0, sp, #328	; 0x148
   11d82:	4428      	add	r0, r5
   11d84:	f01d fdb1 	bl	2f8ea <snprintf>
   11d88:	3502      	adds	r5, #2
    for (i = 0; i < sizeof hash; i++) {
   11d8a:	3401      	adds	r4, #1
   11d8c:	2c1f      	cmp	r4, #31
   11d8e:	d9f0      	bls.n	11d72 <log_reboot_write+0x122>
   11d90:	a852      	add	r0, sp, #328	; 0x148
   11d92:	f7fc fea3 	bl	eadc <strlen>
   11d96:	4602      	mov	r2, r0
   11d98:	a952      	add	r1, sp, #328	; 0x148
   11d9a:	a806      	add	r0, sp, #24
   11d9c:	f01a fd4b 	bl	2c836 <cbor_encode_text_string>
    if (info->file != NULL) {
   11da0:	687b      	ldr	r3, [r7, #4]
   11da2:	b1eb      	cbz	r3, 11de0 <log_reboot_write+0x190>
   11da4:	2203      	movs	r2, #3
   11da6:	495b      	ldr	r1, [pc, #364]	; (11f14 <log_reboot_write+0x2c4>)
   11da8:	a806      	add	r0, sp, #24
   11daa:	f01a fd44 	bl	2c836 <cbor_encode_text_string>
        if (strlen(info->file) > ((sizeof buf) / 3)) {
   11dae:	687c      	ldr	r4, [r7, #4]
   11db0:	4620      	mov	r0, r4
   11db2:	f7fc fe93 	bl	eadc <strlen>
   11db6:	2855      	cmp	r0, #85	; 0x55
   11db8:	d952      	bls.n	11e60 <log_reboot_write+0x210>
            off = strlen(info->file) - ((sizeof buf) / 3);
   11dba:	f1a0 0355 	sub.w	r3, r0, #85	; 0x55
        snprintf(buf, sizeof buf, "%s:%d",
   11dbe:	68ba      	ldr	r2, [r7, #8]
   11dc0:	9200      	str	r2, [sp, #0]
   11dc2:	4423      	add	r3, r4
   11dc4:	4a54      	ldr	r2, [pc, #336]	; (11f18 <log_reboot_write+0x2c8>)
   11dc6:	f44f 7180 	mov.w	r1, #256	; 0x100
   11dca:	a852      	add	r0, sp, #328	; 0x148
   11dcc:	f01d fd8d 	bl	2f8ea <snprintf>
   11dd0:	a852      	add	r0, sp, #328	; 0x148
   11dd2:	f7fc fe83 	bl	eadc <strlen>
   11dd6:	4602      	mov	r2, r0
   11dd8:	a952      	add	r1, sp, #328	; 0x148
   11dda:	a806      	add	r0, sp, #24
   11ddc:	f01a fd2b 	bl	2c836 <cbor_encode_text_string>
    if (info->pc != 0) {
   11de0:	68fb      	ldr	r3, [r7, #12]
   11de2:	2b00      	cmp	r3, #0
   11de4:	d13e      	bne.n	11e64 <log_reboot_write+0x214>
    state_flags = img_mgmt_state_flags(boot_current_slot);
   11de6:	4b3a      	ldr	r3, [pc, #232]	; (11ed0 <log_reboot_write+0x280>)
   11de8:	6818      	ldr	r0, [r3, #0]
   11dea:	f001 f94f 	bl	1308c <img_mgmt_state_flags>
   11dee:	4605      	mov	r5, r0
   11df0:	2205      	movs	r2, #5
   11df2:	494a      	ldr	r1, [pc, #296]	; (11f1c <log_reboot_write+0x2cc>)
   11df4:	a806      	add	r0, sp, #24
   11df6:	f01a fd1e 	bl	2c836 <cbor_encode_text_string>
    buf[0] = '\0';
   11dfa:	2300      	movs	r3, #0
   11dfc:	f88d 3148 	strb.w	r3, [sp, #328]	; 0x148
    if (state_flags & IMG_MGMT_STATE_F_ACTIVE) {
   11e00:	f015 0f04 	tst.w	r5, #4
   11e04:	d139      	bne.n	11e7a <log_reboot_write+0x22a>
    off = 0;
   11e06:	4634      	mov	r4, r6
    if (!(flags & IMAGE_F_NON_BOOTABLE)) {
   11e08:	9b05      	ldr	r3, [sp, #20]
   11e0a:	f013 0f10 	tst.w	r3, #16
   11e0e:	d03d      	beq.n	11e8c <log_reboot_write+0x23c>
    if (state_flags & IMG_MGMT_STATE_F_CONFIRMED) {
   11e10:	f015 0f02 	tst.w	r5, #2
   11e14:	d144      	bne.n	11ea0 <log_reboot_write+0x250>
    if (state_flags & IMG_MGMT_STATE_F_PENDING) {
   11e16:	f015 0f01 	tst.w	r5, #1
   11e1a:	d14b      	bne.n	11eb4 <log_reboot_write+0x264>
    if (off > 1) {
   11e1c:	2c01      	cmp	r4, #1
   11e1e:	dd03      	ble.n	11e28 <log_reboot_write+0x1d8>
        buf[off - 1] = '\0';
   11e20:	3c01      	subs	r4, #1
   11e22:	ab52      	add	r3, sp, #328	; 0x148
   11e24:	2200      	movs	r2, #0
   11e26:	551a      	strb	r2, [r3, r4]
   11e28:	a852      	add	r0, sp, #328	; 0x148
   11e2a:	f7fc fe57 	bl	eadc <strlen>
   11e2e:	4602      	mov	r2, r0
   11e30:	a952      	add	r1, sp, #328	; 0x148
   11e32:	a806      	add	r0, sp, #24
   11e34:	f01a fcff 	bl	2c836 <cbor_encode_text_string>
    cbor_buf_len = cbor_buf_writer_buffer_size(&writer, cbor_enc_buf) + 1;
   11e38:	a912      	add	r1, sp, #72	; 0x48
   11e3a:	a80e      	add	r0, sp, #56	; 0x38
   11e3c:	f01a fb1c 	bl	2c478 <cbor_buf_writer_buffer_size>
   11e40:	1c44      	adds	r4, r0, #1
    rc = cbor_encoder_close_container(&enc, &map);
   11e42:	a906      	add	r1, sp, #24
   11e44:	a80a      	add	r0, sp, #40	; 0x28
   11e46:	f01a fd1a 	bl	2c87e <cbor_encoder_close_container>
    if (rc != 0) {
   11e4a:	2800      	cmp	r0, #0
   11e4c:	d13c      	bne.n	11ec8 <log_reboot_write+0x278>
    modlog_append(LOG_MODULE_REBOOT, LOG_LEVEL_CRITICAL, LOG_ETYPE_CBOR,
   11e4e:	b2a4      	uxth	r4, r4
   11e50:	9400      	str	r4, [sp, #0]
   11e52:	ab12      	add	r3, sp, #72	; 0x48
   11e54:	2201      	movs	r2, #1
   11e56:	2104      	movs	r1, #4
   11e58:	2006      	movs	r0, #6
   11e5a:	f7ff fc23 	bl	116a4 <modlog_append>
    return 0;
   11e5e:	e701      	b.n	11c64 <log_reboot_write+0x14>
        off  = 0;
   11e60:	4633      	mov	r3, r6
   11e62:	e7ac      	b.n	11dbe <log_reboot_write+0x16e>
   11e64:	2202      	movs	r2, #2
   11e66:	492e      	ldr	r1, [pc, #184]	; (11f20 <log_reboot_write+0x2d0>)
   11e68:	a806      	add	r0, sp, #24
   11e6a:	f01a fce4 	bl	2c836 <cbor_encode_text_string>
        cbor_encode_int(&map, info->pc);
   11e6e:	68fa      	ldr	r2, [r7, #12]
   11e70:	2300      	movs	r3, #0
   11e72:	a806      	add	r0, sp, #24
   11e74:	f01a fc5e 	bl	2c734 <cbor_encode_int>
   11e78:	e7b5      	b.n	11de6 <log_reboot_write+0x196>
        off += snprintf(buf + off, sizeof buf - off, "%s ", "active");
   11e7a:	4b2a      	ldr	r3, [pc, #168]	; (11f24 <log_reboot_write+0x2d4>)
   11e7c:	4a2a      	ldr	r2, [pc, #168]	; (11f28 <log_reboot_write+0x2d8>)
   11e7e:	f44f 7180 	mov.w	r1, #256	; 0x100
   11e82:	a852      	add	r0, sp, #328	; 0x148
   11e84:	f01d fd31 	bl	2f8ea <snprintf>
   11e88:	2407      	movs	r4, #7
   11e8a:	e7bd      	b.n	11e08 <log_reboot_write+0x1b8>
        off += snprintf(buf + off, sizeof buf - off, "%s ", "bootable");
   11e8c:	4b27      	ldr	r3, [pc, #156]	; (11f2c <log_reboot_write+0x2dc>)
   11e8e:	4a26      	ldr	r2, [pc, #152]	; (11f28 <log_reboot_write+0x2d8>)
   11e90:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   11e94:	a852      	add	r0, sp, #328	; 0x148
   11e96:	4420      	add	r0, r4
   11e98:	f01d fd27 	bl	2f8ea <snprintf>
   11e9c:	3409      	adds	r4, #9
   11e9e:	e7b7      	b.n	11e10 <log_reboot_write+0x1c0>
        off += snprintf(buf + off, sizeof buf - off, "%s ", "confirmed");
   11ea0:	4b23      	ldr	r3, [pc, #140]	; (11f30 <log_reboot_write+0x2e0>)
   11ea2:	4a21      	ldr	r2, [pc, #132]	; (11f28 <log_reboot_write+0x2d8>)
   11ea4:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   11ea8:	a852      	add	r0, sp, #328	; 0x148
   11eaa:	4420      	add	r0, r4
   11eac:	f01d fd1d 	bl	2f8ea <snprintf>
   11eb0:	340a      	adds	r4, #10
   11eb2:	e7b0      	b.n	11e16 <log_reboot_write+0x1c6>
        off += snprintf(buf + off, sizeof buf - off, "%s ", "pending");
   11eb4:	4b1f      	ldr	r3, [pc, #124]	; (11f34 <log_reboot_write+0x2e4>)
   11eb6:	4a1c      	ldr	r2, [pc, #112]	; (11f28 <log_reboot_write+0x2d8>)
   11eb8:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   11ebc:	a852      	add	r0, sp, #328	; 0x148
   11ebe:	4420      	add	r0, r4
   11ec0:	f01d fd13 	bl	2f8ea <snprintf>
   11ec4:	3408      	adds	r4, #8
   11ec6:	e7a9      	b.n	11e1c <log_reboot_write+0x1cc>
        return SYS_ENOMEM;
   11ec8:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   11ecc:	e6ca      	b.n	11c64 <log_reboot_write+0x14>
   11ece:	bf00      	nop
   11ed0:	200043e0 	.word	0x200043e0
   11ed4:	00031b44 	.word	0x00031b44
   11ed8:	00031b38 	.word	0x00031b38
   11edc:	00031b40 	.word	0x00031b40
   11ee0:	00031af8 	.word	0x00031af8
   11ee4:	00031b48 	.word	0x00031b48
   11ee8:	20003570 	.word	0x20003570
   11eec:	00031b4c 	.word	0x00031b4c
   11ef0:	00031b50 	.word	0x00031b50
   11ef4:	00031b5c 	.word	0x00031b5c
   11ef8:	00031aec 	.word	0x00031aec
   11efc:	00031b00 	.word	0x00031b00
   11f00:	00031b08 	.word	0x00031b08
   11f04:	00031b10 	.word	0x00031b10
   11f08:	00031b1c 	.word	0x00031b1c
   11f0c:	00031b28 	.word	0x00031b28
   11f10:	00032718 	.word	0x00032718
   11f14:	00031b64 	.word	0x00031b64
   11f18:	00031b68 	.word	0x00031b68
   11f1c:	00031b74 	.word	0x00031b74
   11f20:	00031b70 	.word	0x00031b70
   11f24:	00031b7c 	.word	0x00031b7c
   11f28:	00031b84 	.word	0x00031b84
   11f2c:	00031b88 	.word	0x00031b88
   11f30:	00031b94 	.word	0x00031b94
   11f34:	00031ba0 	.word	0x00031ba0

00011f38 <log_reboot>:
{
   11f38:	b538      	push	{r3, r4, r5, lr}
    if (log_reboot_written) {
   11f3a:	4b0d      	ldr	r3, [pc, #52]	; (11f70 <log_reboot+0x38>)
   11f3c:	f993 3000 	ldrsb.w	r3, [r3]
   11f40:	b113      	cbz	r3, 11f48 <log_reboot+0x10>
        return 0;
   11f42:	2500      	movs	r5, #0
}
   11f44:	4628      	mov	r0, r5
   11f46:	bd38      	pop	{r3, r4, r5, pc}
   11f48:	4604      	mov	r4, r0
    rc = log_reboot_write(info);
   11f4a:	f7ff fe81 	bl	11c50 <log_reboot_write>
    if (rc != 0) {
   11f4e:	4605      	mov	r5, r0
   11f50:	2800      	cmp	r0, #0
   11f52:	d1f7      	bne.n	11f44 <log_reboot+0xc>
    if (info->reason != HAL_RESET_REQUESTED &&
   11f54:	7823      	ldrb	r3, [r4, #0]
   11f56:	2b06      	cmp	r3, #6
   11f58:	d0f4      	beq.n	11f44 <log_reboot+0xc>
   11f5a:	2b08      	cmp	r3, #8
   11f5c:	d0f2      	beq.n	11f44 <log_reboot+0xc>
        log_reboot_written = 1;
   11f5e:	4b04      	ldr	r3, [pc, #16]	; (11f70 <log_reboot+0x38>)
   11f60:	2201      	movs	r2, #1
   11f62:	701a      	strb	r2, [r3, #0]
        conf_save_one("reboot/written", "1");
   11f64:	4903      	ldr	r1, [pc, #12]	; (11f74 <log_reboot+0x3c>)
   11f66:	4804      	ldr	r0, [pc, #16]	; (11f78 <log_reboot+0x40>)
   11f68:	f7fd f91c 	bl	f1a4 <conf_save_one>
   11f6c:	e7ea      	b.n	11f44 <log_reboot+0xc>
   11f6e:	bf00      	nop
   11f70:	20001c08 	.word	0x20001c08
   11f74:	00031adc 	.word	0x00031adc
   11f78:	00031bbc 	.word	0x00031bbc

00011f7c <log_reboot_pkg_init>:

void
log_reboot_pkg_init(void)
{
   11f7c:	b510      	push	{r4, lr}
   11f7e:	b082      	sub	sp, #8
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   11f80:	4b1f      	ldr	r3, [pc, #124]	; (12000 <log_reboot_pkg_init+0x84>)
   11f82:	781b      	ldrb	r3, [r3, #0]
   11f84:	b15b      	cbz	r3, 11f9e <log_reboot_pkg_init+0x22>

    rc = conf_register(&reboot_conf_handler);
   11f86:	481f      	ldr	r0, [pc, #124]	; (12004 <log_reboot_pkg_init+0x88>)
   11f88:	f7fd f9fa 	bl	f380 <conf_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
   11f8c:	b988      	cbnz	r0, 11fb2 <log_reboot_pkg_init+0x36>

#if MYNEWT_VAL(REBOOT_LOG_FCB)
    rc = log_reboot_init_fcb();
   11f8e:	f7ff fe07 	bl	11ba0 <log_reboot_init_fcb>
    SYSINIT_PANIC_ASSERT(rc == 0);
   11f92:	b9d8      	cbnz	r0, 11fcc <log_reboot_pkg_init+0x50>
#endif
#if MYNEWT_VAL(REBOOT_LOG_CONSOLE)
    rc = log_reboot_init_console();
   11f94:	f7ff fe52 	bl	11c3c <log_reboot_init_console>
    SYSINIT_PANIC_ASSERT(rc == 0);
   11f98:	bb28      	cbnz	r0, 11fe6 <log_reboot_pkg_init+0x6a>
#endif
}
   11f9a:	b002      	add	sp, #8
   11f9c:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   11f9e:	f7fa f923 	bl	c1e8 <hal_debugger_connected>
   11fa2:	b100      	cbz	r0, 11fa6 <log_reboot_pkg_init+0x2a>
   11fa4:	be01      	bkpt	0x0001
   11fa6:	2300      	movs	r3, #0
   11fa8:	461a      	mov	r2, r3
   11faa:	4619      	mov	r1, r3
   11fac:	4618      	mov	r0, r3
   11fae:	f7fa fdcf 	bl	cb50 <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
   11fb2:	f7fa f919 	bl	c1e8 <hal_debugger_connected>
   11fb6:	b100      	cbz	r0, 11fba <log_reboot_pkg_init+0x3e>
   11fb8:	be01      	bkpt	0x0001
   11fba:	2000      	movs	r0, #0
   11fbc:	9000      	str	r0, [sp, #0]
   11fbe:	4b12      	ldr	r3, [pc, #72]	; (12008 <log_reboot_pkg_init+0x8c>)
   11fc0:	681c      	ldr	r4, [r3, #0]
   11fc2:	4603      	mov	r3, r0
   11fc4:	4602      	mov	r2, r0
   11fc6:	4601      	mov	r1, r0
   11fc8:	47a0      	blx	r4
   11fca:	e7e0      	b.n	11f8e <log_reboot_pkg_init+0x12>
    SYSINIT_PANIC_ASSERT(rc == 0);
   11fcc:	f7fa f90c 	bl	c1e8 <hal_debugger_connected>
   11fd0:	b100      	cbz	r0, 11fd4 <log_reboot_pkg_init+0x58>
   11fd2:	be01      	bkpt	0x0001
   11fd4:	2000      	movs	r0, #0
   11fd6:	9000      	str	r0, [sp, #0]
   11fd8:	4b0b      	ldr	r3, [pc, #44]	; (12008 <log_reboot_pkg_init+0x8c>)
   11fda:	681c      	ldr	r4, [r3, #0]
   11fdc:	4603      	mov	r3, r0
   11fde:	4602      	mov	r2, r0
   11fe0:	4601      	mov	r1, r0
   11fe2:	47a0      	blx	r4
   11fe4:	e7d6      	b.n	11f94 <log_reboot_pkg_init+0x18>
    SYSINIT_PANIC_ASSERT(rc == 0);
   11fe6:	f7fa f8ff 	bl	c1e8 <hal_debugger_connected>
   11fea:	b100      	cbz	r0, 11fee <log_reboot_pkg_init+0x72>
   11fec:	be01      	bkpt	0x0001
   11fee:	2000      	movs	r0, #0
   11ff0:	9000      	str	r0, [sp, #0]
   11ff2:	4b05      	ldr	r3, [pc, #20]	; (12008 <log_reboot_pkg_init+0x8c>)
   11ff4:	681c      	ldr	r4, [r3, #0]
   11ff6:	4603      	mov	r3, r0
   11ff8:	4602      	mov	r2, r0
   11ffa:	4601      	mov	r1, r0
   11ffc:	47a0      	blx	r4
}
   11ffe:	e7cc      	b.n	11f9a <log_reboot_pkg_init+0x1e>
   12000:	20003584 	.word	0x20003584
   12004:	20000270 	.word	0x20000270
   12008:	20000298 	.word	0x20000298

0001200c <stats_offset>:
    STAILQ_HEAD_INITIALIZER(g_stats_registry);

static size_t
stats_offset(const struct stats_hdr *hdr)
{
    if (hdr->s_flags & STATS_HDR_F_PERSIST) {
   1200c:	88c3      	ldrh	r3, [r0, #6]
   1200e:	f013 0f01 	tst.w	r3, #1
   12012:	d101      	bne.n	12018 <stats_offset+0xc>
        return sizeof (struct stats_persisted_hdr);
    } else {
        return sizeof (struct stats_hdr);
   12014:	200c      	movs	r0, #12
    }
}
   12016:	4770      	bx	lr
        return sizeof (struct stats_persisted_hdr);
   12018:	2030      	movs	r0, #48	; 0x30
   1201a:	4770      	bx	lr

0001201c <stats_register_internal>:
    return (uint8_t *)hdr + offset;
}

static int
stats_register_internal(const char *name, struct stats_hdr *shdr)
{
   1201c:	b570      	push	{r4, r5, r6, lr}
   1201e:	4606      	mov	r6, r0
   12020:	460d      	mov	r5, r1
    int rc;

    /* Don't allow duplicate entries, return an error if this stat
     * is already registered.
     */
    STAILQ_FOREACH(cur, &g_stats_registry, s_next) {
   12022:	4b0f      	ldr	r3, [pc, #60]	; (12060 <stats_register_internal+0x44>)
   12024:	681c      	ldr	r4, [r3, #0]
   12026:	b144      	cbz	r4, 1203a <stats_register_internal+0x1e>
        if (!strcmp(cur->s_name, name) || cur == shdr) {
   12028:	4631      	mov	r1, r6
   1202a:	6820      	ldr	r0, [r4, #0]
   1202c:	f7fc fd06 	bl	ea3c <strcmp>
   12030:	b180      	cbz	r0, 12054 <stats_register_internal+0x38>
   12032:	42ac      	cmp	r4, r5
   12034:	d011      	beq.n	1205a <stats_register_internal+0x3e>
    STAILQ_FOREACH(cur, &g_stats_registry, s_next) {
   12036:	68a4      	ldr	r4, [r4, #8]
   12038:	e7f5      	b.n	12026 <stats_register_internal+0xa>
            rc = -1;
            goto err;
        }
    }

    shdr->s_name = name;
   1203a:	602e      	str	r6, [r5, #0]
    if (shdr->s_flags & STATS_HDR_F_PERSIST) {
        stats_conf_assert_valid(shdr);
    }
#endif

    STAILQ_INSERT_TAIL(&g_stats_registry, shdr, s_next);
   1203c:	2000      	movs	r0, #0
   1203e:	60a8      	str	r0, [r5, #8]
   12040:	4b07      	ldr	r3, [pc, #28]	; (12060 <stats_register_internal+0x44>)
   12042:	685a      	ldr	r2, [r3, #4]
   12044:	6015      	str	r5, [r2, #0]
   12046:	3508      	adds	r5, #8
   12048:	605d      	str	r5, [r3, #4]

    STATS_INC(g_stats_stats, num_registered);
   1204a:	4a06      	ldr	r2, [pc, #24]	; (12064 <stats_register_internal+0x48>)
   1204c:	68d3      	ldr	r3, [r2, #12]
   1204e:	3301      	adds	r3, #1
   12050:	60d3      	str	r3, [r2, #12]

    return (0);
err:
    return (rc);
}
   12052:	bd70      	pop	{r4, r5, r6, pc}
    return (rc);
   12054:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12058:	e7fb      	b.n	12052 <stats_register_internal+0x36>
   1205a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1205e:	e7f8      	b.n	12052 <stats_register_internal+0x36>
   12060:	20000290 	.word	0x20000290
   12064:	20003574 	.word	0x20003574

00012068 <stats_size>:
    return hdr->s_cnt * hdr->s_size;
   12068:	7943      	ldrb	r3, [r0, #5]
   1206a:	7900      	ldrb	r0, [r0, #4]
}
   1206c:	fb00 f003 	mul.w	r0, r0, r3
   12070:	4770      	bx	lr
	...

00012074 <stats_walk>:
 * @return 0 on success, the return code of the walk_func on abort.
 *
 */
int
stats_walk(struct stats_hdr *hdr, stats_walk_func_t walk_func, void *arg)
{
   12074:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12078:	b085      	sub	sp, #20
   1207a:	4605      	mov	r5, r0
   1207c:	460f      	mov	r7, r1
   1207e:	4690      	mov	r8, r2
    int rc;
#if MYNEWT_VAL(STATS_NAMES)
    int i;
#endif

    start = stats_offset(hdr);
   12080:	f7ff ffc4 	bl	1200c <stats_offset>
   12084:	4681      	mov	r9, r0
   12086:	b284      	uxth	r4, r0
    cur = start;
    end = start + stats_size(hdr);
   12088:	4628      	mov	r0, r5
   1208a:	f7ff ffed 	bl	12068 <stats_size>
   1208e:	fa14 f080 	uxtah	r0, r4, r0
   12092:	b286      	uxth	r6, r0

    while (cur < end) {
   12094:	42b4      	cmp	r4, r6
   12096:	d21a      	bcs.n	120ce <stats_walk+0x5a>
        /* Do this check irrespective of whether MYNEWT_VALUE(STATS_NAMES)
         * is set.  Users may only partially name elements in the statistics
         * structure.
         */
        if (name == NULL) {
            ent_n = (cur - start) / hdr->s_size;
   12098:	fa1f f389 	uxth.w	r3, r9
   1209c:	1ae3      	subs	r3, r4, r3
   1209e:	792a      	ldrb	r2, [r5, #4]
            len = snprintf(name_buf, sizeof(name_buf), "s%d", ent_n);
   120a0:	fb93 f3f2 	sdiv	r3, r3, r2
   120a4:	4a0c      	ldr	r2, [pc, #48]	; (120d8 <stats_walk+0x64>)
   120a6:	210c      	movs	r1, #12
   120a8:	a801      	add	r0, sp, #4
   120aa:	f01d fc1e 	bl	2f8ea <snprintf>
            name_buf[len] = '\0';
   120ae:	ab04      	add	r3, sp, #16
   120b0:	4418      	add	r0, r3
   120b2:	2300      	movs	r3, #0
   120b4:	f800 3c0c 	strb.w	r3, [r0, #-12]
            name = name_buf;
        }

        rc = walk_func(hdr, arg, name, cur);
   120b8:	4623      	mov	r3, r4
   120ba:	aa01      	add	r2, sp, #4
   120bc:	4641      	mov	r1, r8
   120be:	4628      	mov	r0, r5
   120c0:	47b8      	blx	r7
        if (rc != 0) {
   120c2:	4603      	mov	r3, r0
   120c4:	b920      	cbnz	r0, 120d0 <stats_walk+0x5c>
        }

        /* Statistics are variable sized, move forward either 16, 32 or 64
         * bits in the structure.
         */
        cur += hdr->s_size;
   120c6:	792b      	ldrb	r3, [r5, #4]
   120c8:	441c      	add	r4, r3
   120ca:	b2a4      	uxth	r4, r4
   120cc:	e7e2      	b.n	12094 <stats_walk+0x20>
    }

    return (0);
   120ce:	2300      	movs	r3, #0
err:
    return (rc);
}
   120d0:	4618      	mov	r0, r3
   120d2:	b005      	add	sp, #20
   120d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   120d8:	00031bf0 	.word	0x00031bf0

000120dc <stats_init>:
 * @return 0 on success, non-zero error code on failure.
 */
int
stats_init(struct stats_hdr *shdr, uint8_t size, uint8_t cnt,
        const struct stats_name_map *map, uint8_t map_cnt)
{
   120dc:	b570      	push	{r4, r5, r6, lr}
   120de:	4604      	mov	r4, r0
   120e0:	460e      	mov	r6, r1
   120e2:	4615      	mov	r5, r2
    size_t offset;

    offset = stats_offset(shdr);
   120e4:	f7ff ff92 	bl	1200c <stats_offset>
    memset((uint8_t *)shdr + offset, 0, size * cnt);
   120e8:	fb05 f206 	mul.w	r2, r5, r6
   120ec:	2100      	movs	r1, #0
   120ee:	4420      	add	r0, r4
   120f0:	f7fc fc7e 	bl	e9f0 <memset>

    shdr->s_size = size;
   120f4:	7126      	strb	r6, [r4, #4]
    shdr->s_cnt = cnt;
   120f6:	7165      	strb	r5, [r4, #5]
    shdr->s_flags = 0;
   120f8:	2000      	movs	r0, #0
   120fa:	80e0      	strh	r0, [r4, #6]
    shdr->s_map = map;
    shdr->s_map_cnt = map_cnt;
#endif

    return (0);
}
   120fc:	bd70      	pop	{r4, r5, r6, pc}
	...

00012100 <stats_module_init_internal>:
{
   12100:	b500      	push	{lr}
   12102:	b083      	sub	sp, #12
    STAILQ_INIT(&g_stats_registry);
   12104:	4a0a      	ldr	r2, [pc, #40]	; (12130 <stats_module_init_internal+0x30>)
   12106:	2300      	movs	r3, #0
   12108:	6013      	str	r3, [r2, #0]
   1210a:	6052      	str	r2, [r2, #4]
    rc = stats_init(STATS_HDR(g_stats_stats),
   1210c:	9300      	str	r3, [sp, #0]
   1210e:	2201      	movs	r2, #1
   12110:	2104      	movs	r1, #4
   12112:	4808      	ldr	r0, [pc, #32]	; (12134 <stats_module_init_internal+0x34>)
   12114:	f7ff ffe2 	bl	120dc <stats_init>
    if (rc) {
   12118:	4603      	mov	r3, r0
   1211a:	b118      	cbz	r0, 12124 <stats_module_init_internal+0x24>
}
   1211c:	4618      	mov	r0, r3
   1211e:	b003      	add	sp, #12
   12120:	f85d fb04 	ldr.w	pc, [sp], #4
    rc = stats_register_internal("stat", STATS_HDR(g_stats_stats));
   12124:	4903      	ldr	r1, [pc, #12]	; (12134 <stats_module_init_internal+0x34>)
   12126:	4804      	ldr	r0, [pc, #16]	; (12138 <stats_module_init_internal+0x38>)
   12128:	f7ff ff78 	bl	1201c <stats_register_internal>
   1212c:	4603      	mov	r3, r0
   1212e:	e7f5      	b.n	1211c <stats_module_init_internal+0x1c>
   12130:	20000290 	.word	0x20000290
   12134:	20003574 	.word	0x20003574
   12138:	00031be8 	.word	0x00031be8

0001213c <stats_module_init>:
{
   1213c:	b510      	push	{r4, lr}
   1213e:	b082      	sub	sp, #8
    SYSINIT_ASSERT_ACTIVE();
   12140:	4b11      	ldr	r3, [pc, #68]	; (12188 <stats_module_init+0x4c>)
   12142:	781b      	ldrb	r3, [r3, #0]
   12144:	b123      	cbz	r3, 12150 <stats_module_init+0x14>
    if (g_stats_stats.snum_registered) {
   12146:	4b11      	ldr	r3, [pc, #68]	; (1218c <stats_module_init+0x50>)
   12148:	68db      	ldr	r3, [r3, #12]
   1214a:	b15b      	cbz	r3, 12164 <stats_module_init+0x28>
}
   1214c:	b002      	add	sp, #8
   1214e:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   12150:	f7fa f84a 	bl	c1e8 <hal_debugger_connected>
   12154:	b100      	cbz	r0, 12158 <stats_module_init+0x1c>
   12156:	be01      	bkpt	0x0001
   12158:	2300      	movs	r3, #0
   1215a:	461a      	mov	r2, r3
   1215c:	4619      	mov	r1, r3
   1215e:	4618      	mov	r0, r3
   12160:	f7fa fcf6 	bl	cb50 <__assert_func>
    rc = stats_module_init_internal();
   12164:	f7ff ffcc 	bl	12100 <stats_module_init_internal>
    SYSINIT_PANIC_ASSERT(rc == 0);
   12168:	2800      	cmp	r0, #0
   1216a:	d0ef      	beq.n	1214c <stats_module_init+0x10>
   1216c:	f7fa f83c 	bl	c1e8 <hal_debugger_connected>
   12170:	b100      	cbz	r0, 12174 <stats_module_init+0x38>
   12172:	be01      	bkpt	0x0001
   12174:	2000      	movs	r0, #0
   12176:	9000      	str	r0, [sp, #0]
   12178:	4b05      	ldr	r3, [pc, #20]	; (12190 <stats_module_init+0x54>)
   1217a:	681c      	ldr	r4, [r3, #0]
   1217c:	4603      	mov	r3, r0
   1217e:	4602      	mov	r2, r0
   12180:	4601      	mov	r1, r0
   12182:	47a0      	blx	r4
   12184:	e7e2      	b.n	1214c <stats_module_init+0x10>
   12186:	bf00      	nop
   12188:	20003584 	.word	0x20003584
   1218c:	20003574 	.word	0x20003574
   12190:	20000298 	.word	0x20000298

00012194 <stats_group_find>:
 *
 * @return statistic structure if found, NULL if not found.
 */
struct stats_hdr *
stats_group_find(const char *name)
{
   12194:	b538      	push	{r3, r4, r5, lr}
   12196:	4605      	mov	r5, r0
    struct stats_hdr *cur;

    cur = NULL;
    STAILQ_FOREACH(cur, &g_stats_registry, s_next) {
   12198:	4b05      	ldr	r3, [pc, #20]	; (121b0 <stats_group_find+0x1c>)
   1219a:	681c      	ldr	r4, [r3, #0]
   1219c:	b134      	cbz	r4, 121ac <stats_group_find+0x18>
        if (!strcmp(cur->s_name, name)) {
   1219e:	4629      	mov	r1, r5
   121a0:	6820      	ldr	r0, [r4, #0]
   121a2:	f7fc fc4b 	bl	ea3c <strcmp>
   121a6:	b108      	cbz	r0, 121ac <stats_group_find+0x18>
    STAILQ_FOREACH(cur, &g_stats_registry, s_next) {
   121a8:	68a4      	ldr	r4, [r4, #8]
   121aa:	e7f7      	b.n	1219c <stats_group_find+0x8>
            break;
        }
    }

    return (cur);
}
   121ac:	4620      	mov	r0, r4
   121ae:	bd38      	pop	{r3, r4, r5, pc}
   121b0:	20000290 	.word	0x20000290

000121b4 <stats_register>:
 *
 * @return 0 on success, non-zero error code on failure.
 */
int
stats_register(const char *name, struct stats_hdr *shdr)
{
   121b4:	b538      	push	{r3, r4, r5, lr}
   121b6:	4604      	mov	r4, r0
   121b8:	460d      	mov	r5, r1
    /*
     * We should always have at least "stat" registered so if there are no stats
     * registered, try to initialize module first. This allows to register stat
     * before sysinit is called (e.g. from BSP).
     */
    if (g_stats_stats.snum_registered == 0) {
   121ba:	4b07      	ldr	r3, [pc, #28]	; (121d8 <stats_register+0x24>)
   121bc:	68db      	ldr	r3, [r3, #12]
   121be:	b913      	cbnz	r3, 121c6 <stats_register+0x12>
        if (stats_module_init_internal()) {
   121c0:	f7ff ff9e 	bl	12100 <stats_module_init_internal>
   121c4:	b920      	cbnz	r0, 121d0 <stats_register+0x1c>
            return -1;
        }
    }

    return stats_register_internal(name, shdr);
   121c6:	4629      	mov	r1, r5
   121c8:	4620      	mov	r0, r4
   121ca:	f7ff ff27 	bl	1201c <stats_register_internal>
}
   121ce:	bd38      	pop	{r3, r4, r5, pc}
            return -1;
   121d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   121d4:	e7fb      	b.n	121ce <stats_register+0x1a>
   121d6:	bf00      	nop
   121d8:	20003574 	.word	0x20003574

000121dc <stats_init_and_reg>:
 */
int
stats_init_and_reg(struct stats_hdr *shdr, uint8_t size, uint8_t cnt,
                   const struct stats_name_map *map, uint8_t map_cnt,
                   const char *name)
{
   121dc:	b530      	push	{r4, r5, lr}
   121de:	b083      	sub	sp, #12
   121e0:	4605      	mov	r5, r0
    int rc;

    rc = stats_init(shdr, size, cnt, map, map_cnt);
   121e2:	f89d 4018 	ldrb.w	r4, [sp, #24]
   121e6:	9400      	str	r4, [sp, #0]
   121e8:	f7ff ff78 	bl	120dc <stats_init>
    if (rc != 0) {
   121ec:	4603      	mov	r3, r0
   121ee:	b110      	cbz	r0, 121f6 <stats_init_and_reg+0x1a>
    if (rc != 0) {
        return rc;
    }

    return rc;
}
   121f0:	4618      	mov	r0, r3
   121f2:	b003      	add	sp, #12
   121f4:	bd30      	pop	{r4, r5, pc}
    rc = stats_register(name, shdr);
   121f6:	4629      	mov	r1, r5
   121f8:	9807      	ldr	r0, [sp, #28]
   121fa:	f7ff ffdb 	bl	121b4 <stats_register>
   121fe:	4603      	mov	r3, r0
   12200:	e7f6      	b.n	121f0 <stats_init_and_reg+0x14>

00012202 <sysinit_dflt_panic_cb>:
#include "os/mynewt.h"

static void
sysinit_dflt_panic_cb(const char *file, int line, const char *func,
                      const char *expr, const char *msg)
{
   12202:	b508      	push	{r3, lr}
    if (msg != NULL) {
        fprintf(stderr, "sysinit failure: %s\n", msg);
    }
#endif

    __assert_func(file, line, func, expr);
   12204:	f7fa fca4 	bl	cb50 <__assert_func>

00012208 <sysinit_start>:
}

void
sysinit_start(void)
{
    sysinit_active = 1;
   12208:	4b01      	ldr	r3, [pc, #4]	; (12210 <sysinit_start+0x8>)
   1220a:	2201      	movs	r2, #1
   1220c:	701a      	strb	r2, [r3, #0]
}
   1220e:	4770      	bx	lr
   12210:	20003584 	.word	0x20003584

00012214 <sysinit_end>:

void
sysinit_end(void)
{
    sysinit_active = 0;
   12214:	4b01      	ldr	r3, [pc, #4]	; (1221c <sysinit_end+0x8>)
   12216:	2200      	movs	r2, #0
   12218:	701a      	strb	r2, [r3, #0]
}
   1221a:	4770      	bx	lr
   1221c:	20003584 	.word	0x20003584

00012220 <mem_init_mbuf_pool>:

int
mem_init_mbuf_pool(void *mem, struct os_mempool *mempool,
                   struct os_mbuf_pool *mbuf_pool, int num_blocks,
                   int block_size, char *name)
{
   12220:	b570      	push	{r4, r5, r6, lr}
   12222:	b082      	sub	sp, #8
   12224:	460c      	mov	r4, r1
   12226:	4616      	mov	r6, r2
    int rc;

    rc = os_mempool_init(mempool, num_blocks, block_size, mem, name);
   12228:	b29d      	uxth	r5, r3
   1222a:	9b07      	ldr	r3, [sp, #28]
   1222c:	9300      	str	r3, [sp, #0]
   1222e:	4603      	mov	r3, r0
   12230:	9a06      	ldr	r2, [sp, #24]
   12232:	4629      	mov	r1, r5
   12234:	4620      	mov	r0, r4
   12236:	f7fb fca5 	bl	db84 <os_mempool_init>
    if (rc != 0) {
   1223a:	b108      	cbz	r0, 12240 <mem_init_mbuf_pool+0x20>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   1223c:	b002      	add	sp, #8
   1223e:	bd70      	pop	{r4, r5, r6, pc}
    rc = os_mbuf_pool_init(mbuf_pool, mempool, block_size, num_blocks);
   12240:	462b      	mov	r3, r5
   12242:	9a06      	ldr	r2, [sp, #24]
   12244:	b292      	uxth	r2, r2
   12246:	4621      	mov	r1, r4
   12248:	4630      	mov	r0, r6
   1224a:	f7fb f8a6 	bl	d39a <os_mbuf_pool_init>
   1224e:	e7f5      	b.n	1223c <mem_init_mbuf_pool+0x1c>

00012250 <mem_split_frag>:
 *                              NULL on failure.
 */
struct os_mbuf *
mem_split_frag(struct os_mbuf **om, uint16_t max_frag_sz,
               mem_frag_alloc_fn *alloc_cb, void *cb_arg)
{
   12250:	b570      	push	{r4, r5, r6, lr}
   12252:	460d      	mov	r5, r1
    struct os_mbuf *frag;
    int rc;

    if (OS_MBUF_PKTLEN(*om) <= max_frag_sz) {
   12254:	6806      	ldr	r6, [r0, #0]
   12256:	8a31      	ldrh	r1, [r6, #16]
   12258:	42a9      	cmp	r1, r5
   1225a:	d915      	bls.n	12288 <mem_split_frag+0x38>
   1225c:	4619      	mov	r1, r3
   1225e:	4604      	mov	r4, r0
        *om = NULL;
        return frag;
    }

    /* Packet needs to be split.  Allocate a new buffer for the fragment. */
    frag = alloc_cb(max_frag_sz, cb_arg);
   12260:	4628      	mov	r0, r5
   12262:	4790      	blx	r2
    if (frag == NULL) {
   12264:	4606      	mov	r6, r0
   12266:	b190      	cbz	r0, 1228e <mem_split_frag+0x3e>
        goto err;
    }

    /* Move data from the front of the packet into the fragment mbuf. */
    rc = os_mbuf_appendfrom(frag, *om, 0, max_frag_sz);
   12268:	462b      	mov	r3, r5
   1226a:	2200      	movs	r2, #0
   1226c:	6821      	ldr	r1, [r4, #0]
   1226e:	f7fb f958 	bl	d522 <os_mbuf_appendfrom>
    if (rc != 0) {
   12272:	b960      	cbnz	r0, 1228e <mem_split_frag+0x3e>
        goto err;
    }
    os_mbuf_adj(*om, max_frag_sz);
   12274:	4629      	mov	r1, r5
   12276:	6820      	ldr	r0, [r4, #0]
   12278:	f7fb f9aa 	bl	d5d0 <os_mbuf_adj>

    /* Free unused portion of of source mbuf chain, if possible. */
    *om = os_mbuf_trim_front(*om);
   1227c:	6820      	ldr	r0, [r4, #0]
   1227e:	f7fb fbc1 	bl	da04 <os_mbuf_trim_front>
   12282:	6020      	str	r0, [r4, #0]
    return frag;

err:
    os_mbuf_free_chain(frag);
    return NULL;
}
   12284:	4630      	mov	r0, r6
   12286:	bd70      	pop	{r4, r5, r6, pc}
        *om = NULL;
   12288:	2300      	movs	r3, #0
   1228a:	6003      	str	r3, [r0, #0]
        return frag;
   1228c:	e7fa      	b.n	12284 <mem_split_frag+0x34>
    os_mbuf_free_chain(frag);
   1228e:	4630      	mov	r0, r6
   12290:	f7fb f8c6 	bl	d420 <os_mbuf_free_chain>
    return NULL;
   12294:	2600      	movs	r6, #0
   12296:	e7f5      	b.n	12284 <mem_split_frag+0x34>

00012298 <rwlock_complete_handoff>:
static void
rwlock_complete_handoff(struct rwlock *lock)
{
    RWLOCK_DBG_ASSERT(lock->mtx.mu_owner == g_current_task);
    RWLOCK_DBG_ASSERT(lock->handoffs > 0);
    lock->handoffs--;
   12298:	f890 3020 	ldrb.w	r3, [r0, #32]
   1229c:	3b01      	subs	r3, #1
   1229e:	f880 3020 	strb.w	r3, [r0, #32]
}
   122a2:	4770      	bx	lr

000122a4 <rwlock_read_must_block>:
static bool
rwlock_read_must_block(const struct rwlock *lock)
{
    RWLOCK_DBG_ASSERT(lock->mtx.mu_owner == g_current_task);

    return lock->active_writer ||
   122a4:	69c3      	ldr	r3, [r0, #28]
           lock->pending_writers > 0 ||
   122a6:	f013 2fff 	tst.w	r3, #4278255360	; 0xff00ff00
   122aa:	d106      	bne.n	122ba <rwlock_read_must_block+0x16>
           lock->handoffs > 0;
   122ac:	f890 3020 	ldrb.w	r3, [r0, #32]
           lock->pending_writers > 0 ||
   122b0:	b90b      	cbnz	r3, 122b6 <rwlock_read_must_block+0x12>
   122b2:	2000      	movs	r0, #0
}
   122b4:	4770      	bx	lr
           lock->pending_writers > 0 ||
   122b6:	2001      	movs	r0, #1
   122b8:	4770      	bx	lr
   122ba:	2001      	movs	r0, #1
   122bc:	4770      	bx	lr

000122be <rwlock_write_must_block>:
static bool
rwlock_write_must_block(const struct rwlock *lock)
{
    RWLOCK_DBG_ASSERT(lock->mtx.mu_owner == g_current_task);

    return lock->active_writer ||
   122be:	8b83      	ldrh	r3, [r0, #28]
           lock->num_readers > 0 ||
   122c0:	b933      	cbnz	r3, 122d0 <rwlock_write_must_block+0x12>
           lock->handoffs > 0;
   122c2:	f890 3020 	ldrb.w	r3, [r0, #32]
           lock->num_readers > 0 ||
   122c6:	b90b      	cbnz	r3, 122cc <rwlock_write_must_block+0xe>
   122c8:	2000      	movs	r0, #0
}
   122ca:	4770      	bx	lr
           lock->num_readers > 0 ||
   122cc:	2001      	movs	r0, #1
   122ce:	4770      	bx	lr
   122d0:	2001      	movs	r0, #1
   122d2:	4770      	bx	lr

000122d4 <rwlock_unblock>:
{
   122d4:	b510      	push	{r4, lr}
   122d6:	4604      	mov	r4, r0
    if (lock->pending_writers > 0) {
   122d8:	7fc3      	ldrb	r3, [r0, #31]
   122da:	b91b      	cbnz	r3, 122e4 <rwlock_unblock+0x10>
        lock->handoffs = lock->pending_readers;
   122dc:	7f83      	ldrb	r3, [r0, #30]
   122de:	f880 3020 	strb.w	r3, [r0, #32]
        while (lock->pending_readers > 0) {
   122e2:	e010      	b.n	12306 <rwlock_unblock+0x32>
        lock->handoffs = 1;
   122e4:	2301      	movs	r3, #1
   122e6:	f880 3020 	strb.w	r3, [r0, #32]
        os_sem_release(&lock->wsem);
   122ea:	3014      	adds	r0, #20
   122ec:	f01c fe20 	bl	2ef30 <os_sem_release>
        lock->pending_writers--;
   122f0:	7fe3      	ldrb	r3, [r4, #31]
   122f2:	3b01      	subs	r3, #1
   122f4:	77e3      	strb	r3, [r4, #31]
   122f6:	e009      	b.n	1230c <rwlock_unblock+0x38>
            os_sem_release(&lock->rsem);
   122f8:	f104 000c 	add.w	r0, r4, #12
   122fc:	f01c fe18 	bl	2ef30 <os_sem_release>
            lock->pending_readers--;
   12300:	7fa3      	ldrb	r3, [r4, #30]
   12302:	3b01      	subs	r3, #1
   12304:	77a3      	strb	r3, [r4, #30]
        while (lock->pending_readers > 0) {
   12306:	7fa3      	ldrb	r3, [r4, #30]
   12308:	2b00      	cmp	r3, #0
   1230a:	d1f5      	bne.n	122f8 <rwlock_unblock+0x24>
}
   1230c:	bd10      	pop	{r4, pc}

0001230e <rwlock_acquire_read>:

void
rwlock_acquire_read(struct rwlock *lock)
{
   1230e:	b538      	push	{r3, r4, r5, lr}
   12310:	4604      	mov	r4, r0
    bool acquired;

    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
   12312:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   12316:	f7fc fa43 	bl	e7a0 <os_mutex_pend>

    if (rwlock_read_must_block(lock)) {
   1231a:	4620      	mov	r0, r4
   1231c:	f7ff ffc2 	bl	122a4 <rwlock_read_must_block>
   12320:	b140      	cbz	r0, 12334 <rwlock_acquire_read+0x26>
        lock->pending_readers++;
   12322:	7fa3      	ldrb	r3, [r4, #30]
   12324:	3301      	adds	r3, #1
   12326:	77a3      	strb	r3, [r4, #30]
        acquired = false;
   12328:	2500      	movs	r5, #0
    } else {
        lock->num_readers++;
        acquired = true;
    }

    os_mutex_release(&lock->mtx);
   1232a:	4620      	mov	r0, r4
   1232c:	f7fc f9d8 	bl	e6e0 <os_mutex_release>

    if (acquired) {
   12330:	b12d      	cbz	r5, 1233e <rwlock_acquire_read+0x30>
    /* Record reader ownership. */
    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
    lock->num_readers++;
    rwlock_complete_handoff(lock);
    os_mutex_release(&lock->mtx);
}
   12332:	bd38      	pop	{r3, r4, r5, pc}
        lock->num_readers++;
   12334:	7f23      	ldrb	r3, [r4, #28]
   12336:	3301      	adds	r3, #1
   12338:	7723      	strb	r3, [r4, #28]
        acquired = true;
   1233a:	2501      	movs	r5, #1
   1233c:	e7f5      	b.n	1232a <rwlock_acquire_read+0x1c>
    os_sem_pend(&lock->rsem, OS_TIMEOUT_NEVER);
   1233e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   12342:	f104 000c 	add.w	r0, r4, #12
   12346:	f01c fe25 	bl	2ef94 <os_sem_pend>
    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
   1234a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1234e:	4620      	mov	r0, r4
   12350:	f7fc fa26 	bl	e7a0 <os_mutex_pend>
    lock->num_readers++;
   12354:	7f23      	ldrb	r3, [r4, #28]
   12356:	3301      	adds	r3, #1
   12358:	7723      	strb	r3, [r4, #28]
    rwlock_complete_handoff(lock);
   1235a:	4620      	mov	r0, r4
   1235c:	f7ff ff9c 	bl	12298 <rwlock_complete_handoff>
    os_mutex_release(&lock->mtx);
   12360:	4620      	mov	r0, r4
   12362:	f7fc f9bd 	bl	e6e0 <os_mutex_release>
   12366:	e7e4      	b.n	12332 <rwlock_acquire_read+0x24>

00012368 <rwlock_release_read>:

void
rwlock_release_read(struct rwlock *lock)
{
   12368:	b510      	push	{r4, lr}
   1236a:	4604      	mov	r4, r0
    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
   1236c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   12370:	f7fc fa16 	bl	e7a0 <os_mutex_pend>

    RWLOCK_DBG_ASSERT(lock->num_readers > 0);
    lock->num_readers--;
   12374:	7f23      	ldrb	r3, [r4, #28]
   12376:	3b01      	subs	r3, #1
   12378:	b2db      	uxtb	r3, r3
   1237a:	7723      	strb	r3, [r4, #28]

    /* If this is the last active reader, unblock a pending writer if there is
     * one.
     */
    if (lock->num_readers == 0) {
   1237c:	b11b      	cbz	r3, 12386 <rwlock_release_read+0x1e>
        rwlock_unblock(lock);
    }

    os_mutex_release(&lock->mtx);
   1237e:	4620      	mov	r0, r4
   12380:	f7fc f9ae 	bl	e6e0 <os_mutex_release>
}
   12384:	bd10      	pop	{r4, pc}
        rwlock_unblock(lock);
   12386:	4620      	mov	r0, r4
   12388:	f7ff ffa4 	bl	122d4 <rwlock_unblock>
   1238c:	e7f7      	b.n	1237e <rwlock_release_read+0x16>

0001238e <rwlock_acquire_write>:

void
rwlock_acquire_write(struct rwlock *lock)
{
   1238e:	b538      	push	{r3, r4, r5, lr}
   12390:	4604      	mov	r4, r0
    bool acquired;

    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
   12392:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   12396:	f7fc fa03 	bl	e7a0 <os_mutex_pend>

    if (rwlock_write_must_block(lock)) {
   1239a:	4620      	mov	r0, r4
   1239c:	f7ff ff8f 	bl	122be <rwlock_write_must_block>
   123a0:	b140      	cbz	r0, 123b4 <rwlock_acquire_write+0x26>
        lock->pending_writers++;
   123a2:	7fe3      	ldrb	r3, [r4, #31]
   123a4:	3301      	adds	r3, #1
   123a6:	77e3      	strb	r3, [r4, #31]
        acquired = false;
   123a8:	2500      	movs	r5, #0
    } else {
        lock->active_writer = true;
        acquired = true;
    }

    os_mutex_release(&lock->mtx);
   123aa:	4620      	mov	r0, r4
   123ac:	f7fc f998 	bl	e6e0 <os_mutex_release>

    if (acquired) {
   123b0:	b11d      	cbz	r5, 123ba <rwlock_acquire_write+0x2c>
    /* Record writer ownership. */
    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
    lock->active_writer = true;
    rwlock_complete_handoff(lock);
    os_mutex_release(&lock->mtx);
}
   123b2:	bd38      	pop	{r3, r4, r5, pc}
        lock->active_writer = true;
   123b4:	2501      	movs	r5, #1
   123b6:	7765      	strb	r5, [r4, #29]
   123b8:	e7f7      	b.n	123aa <rwlock_acquire_write+0x1c>
    os_sem_pend(&lock->wsem, OS_TIMEOUT_NEVER);
   123ba:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   123be:	f104 0014 	add.w	r0, r4, #20
   123c2:	f01c fde7 	bl	2ef94 <os_sem_pend>
    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
   123c6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   123ca:	4620      	mov	r0, r4
   123cc:	f7fc f9e8 	bl	e7a0 <os_mutex_pend>
    lock->active_writer = true;
   123d0:	2301      	movs	r3, #1
   123d2:	7763      	strb	r3, [r4, #29]
    rwlock_complete_handoff(lock);
   123d4:	4620      	mov	r0, r4
   123d6:	f7ff ff5f 	bl	12298 <rwlock_complete_handoff>
    os_mutex_release(&lock->mtx);
   123da:	4620      	mov	r0, r4
   123dc:	f7fc f980 	bl	e6e0 <os_mutex_release>
   123e0:	e7e7      	b.n	123b2 <rwlock_acquire_write+0x24>

000123e2 <rwlock_release_write>:

void
rwlock_release_write(struct rwlock *lock)
{
   123e2:	b510      	push	{r4, lr}
   123e4:	4604      	mov	r4, r0
    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
   123e6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   123ea:	f7fc f9d9 	bl	e7a0 <os_mutex_pend>

    RWLOCK_DBG_ASSERT(lock->active_writer);
    lock->active_writer = false;
   123ee:	2300      	movs	r3, #0
   123f0:	7763      	strb	r3, [r4, #29]

    rwlock_unblock(lock);
   123f2:	4620      	mov	r0, r4
   123f4:	f7ff ff6e 	bl	122d4 <rwlock_unblock>

    os_mutex_release(&lock->mtx);
   123f8:	4620      	mov	r0, r4
   123fa:	f7fc f971 	bl	e6e0 <os_mutex_release>
}
   123fe:	bd10      	pop	{r4, pc}

00012400 <rwlock_init>:

int
rwlock_init(struct rwlock *lock)
{
   12400:	b510      	push	{r4, lr}
   12402:	4604      	mov	r4, r0
    int rc;

    *lock = (struct rwlock) { 0 };
   12404:	2224      	movs	r2, #36	; 0x24
   12406:	2100      	movs	r1, #0
   12408:	f7fc faf2 	bl	e9f0 <memset>

    rc = os_mutex_init(&lock->mtx);
   1240c:	4620      	mov	r0, r4
   1240e:	f7fc f95d 	bl	e6cc <os_mutex_init>
    if (rc != 0) {
   12412:	b100      	cbz	r0, 12416 <rwlock_init+0x16>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   12414:	bd10      	pop	{r4, pc}
    rc = os_sem_init(&lock->rsem, 0);
   12416:	2100      	movs	r1, #0
   12418:	f104 000c 	add.w	r0, r4, #12
   1241c:	f01c fd80 	bl	2ef20 <os_sem_init>
    if (rc != 0) {
   12420:	2800      	cmp	r0, #0
   12422:	d1f7      	bne.n	12414 <rwlock_init+0x14>
    rc = os_sem_init(&lock->wsem, 0);
   12424:	2100      	movs	r1, #0
   12426:	f104 0014 	add.w	r0, r4, #20
   1242a:	f01c fd79 	bl	2ef20 <os_sem_init>
   1242e:	e7f1      	b.n	12414 <rwlock_init+0x14>

00012430 <scfg_find_setting_by_val>:
static struct scfg_setting *
scfg_find_setting_by_val(const struct scfg_group *group, const void *val)
{
    const struct scfg_setting *setting;

    SCFG_FOREACH_SETTING(group, setting) {
   12430:	6800      	ldr	r0, [r0, #0]
   12432:	6803      	ldr	r3, [r0, #0]
   12434:	b123      	cbz	r3, 12440 <scfg_find_setting_by_val+0x10>
        if (setting->val == val) {
   12436:	6843      	ldr	r3, [r0, #4]
   12438:	428b      	cmp	r3, r1
   1243a:	d002      	beq.n	12442 <scfg_find_setting_by_val+0x12>
    SCFG_FOREACH_SETTING(group, setting) {
   1243c:	3010      	adds	r0, #16
   1243e:	e7f8      	b.n	12432 <scfg_find_setting_by_val+0x2>
            /* Cast away const. */
            return (struct scfg_setting *)setting;
        }
    }

    return NULL;
   12440:	2000      	movs	r0, #0
}
   12442:	4770      	bx	lr

00012444 <scfg_setting_id>:
{
   12444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12448:	4682      	mov	sl, r0
   1244a:	4688      	mov	r8, r1
   1244c:	4614      	mov	r4, r2
    group_len = strlen(group_name);
   1244e:	f7fc fb45 	bl	eadc <strlen>
   12452:	4605      	mov	r5, r0
    setting_len = strlen(setting_name);
   12454:	4640      	mov	r0, r8
   12456:	f7fc fb41 	bl	eadc <strlen>
    assert(group_len + 1 + setting_len < SCFG_SETTING_ID_BUF_SIZE);
   1245a:	1c6f      	adds	r7, r5, #1
   1245c:	183e      	adds	r6, r7, r0
   1245e:	2e40      	cmp	r6, #64	; 0x40
   12460:	dc10      	bgt.n	12484 <scfg_setting_id+0x40>
   12462:	4681      	mov	r9, r0
    memcpy(&buf[off], group_name, group_len);
   12464:	462a      	mov	r2, r5
   12466:	4651      	mov	r1, sl
   12468:	4620      	mov	r0, r4
   1246a:	f7fc fa99 	bl	e9a0 <memcpy>
    buf[off] = '/';
   1246e:	232f      	movs	r3, #47	; 0x2f
   12470:	5563      	strb	r3, [r4, r5]
    memcpy(&buf[off], setting_name, setting_len);
   12472:	464a      	mov	r2, r9
   12474:	4641      	mov	r1, r8
   12476:	19e0      	adds	r0, r4, r7
   12478:	f7fc fa92 	bl	e9a0 <memcpy>
    buf[off] = '\0';
   1247c:	2300      	movs	r3, #0
   1247e:	55a3      	strb	r3, [r4, r6]
}
   12480:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    assert(group_len + 1 + setting_len < SCFG_SETTING_ID_BUF_SIZE);
   12484:	f7f9 feb0 	bl	c1e8 <hal_debugger_connected>
   12488:	b100      	cbz	r0, 1248c <scfg_setting_id+0x48>
   1248a:	be01      	bkpt	0x0001
   1248c:	2300      	movs	r3, #0
   1248e:	461a      	mov	r2, r3
   12490:	4619      	mov	r1, r3
   12492:	4618      	mov	r0, r3
   12494:	f7fa fb5c 	bl	cb50 <__assert_func>

00012498 <scfg_handler_export>:
}

static int
scfg_handler_export(void (*func)(char *name, char *val),
                    enum conf_export_tgt tgt, void *arg)
{
   12498:	b570      	push	{r4, r5, r6, lr}
   1249a:	b098      	sub	sp, #96	; 0x60
   1249c:	4606      	mov	r6, r0
   1249e:	4615      	mov	r5, r2
    char val_buf[SCFG_NUM_STR_BUF_SIZE];
    char *val;

    group = arg;

    SCFG_FOREACH_SETTING(group, setting) {
   124a0:	6814      	ldr	r4, [r2, #0]
   124a2:	e009      	b.n	124b8 <scfg_handler_export+0x20>
        scfg_setting_id(group->handler.ch_name, setting->name, id_buf);
        if (setting->private) {
            val = "<set>";
        } else {
            val = conf_str_from_value(setting->type, setting->val,
   124a4:	2315      	movs	r3, #21
   124a6:	aa01      	add	r2, sp, #4
   124a8:	6861      	ldr	r1, [r4, #4]
   124aa:	7b20      	ldrb	r0, [r4, #12]
   124ac:	f7fd f85a 	bl	f564 <conf_str_from_value>
   124b0:	4601      	mov	r1, r0
                                      val_buf, sizeof val_buf);
        }
        func(id_buf, val);
   124b2:	a807      	add	r0, sp, #28
   124b4:	47b0      	blx	r6
    SCFG_FOREACH_SETTING(group, setting) {
   124b6:	3410      	adds	r4, #16
   124b8:	6821      	ldr	r1, [r4, #0]
   124ba:	b141      	cbz	r1, 124ce <scfg_handler_export+0x36>
        scfg_setting_id(group->handler.ch_name, setting->name, id_buf);
   124bc:	aa07      	add	r2, sp, #28
   124be:	68a8      	ldr	r0, [r5, #8]
   124c0:	f7ff ffc0 	bl	12444 <scfg_setting_id>
        if (setting->private) {
   124c4:	7b63      	ldrb	r3, [r4, #13]
   124c6:	2b00      	cmp	r3, #0
   124c8:	d0ec      	beq.n	124a4 <scfg_handler_export+0xc>
            val = "<set>";
   124ca:	4902      	ldr	r1, [pc, #8]	; (124d4 <scfg_handler_export+0x3c>)
   124cc:	e7f1      	b.n	124b2 <scfg_handler_export+0x1a>
    }

    return 0;
}
   124ce:	2000      	movs	r0, #0
   124d0:	b018      	add	sp, #96	; 0x60
   124d2:	bd70      	pop	{r4, r5, r6, pc}
   124d4:	00031bf4 	.word	0x00031bf4

000124d8 <scfg_find_setting_by_name>:
{
   124d8:	b538      	push	{r3, r4, r5, lr}
   124da:	460d      	mov	r5, r1
    SCFG_FOREACH_SETTING(group, setting) {
   124dc:	6804      	ldr	r4, [r0, #0]
   124de:	6820      	ldr	r0, [r4, #0]
   124e0:	b128      	cbz	r0, 124ee <scfg_find_setting_by_name+0x16>
        if (strcmp(setting->name, setting_name) == 0) {
   124e2:	4629      	mov	r1, r5
   124e4:	f7fc faaa 	bl	ea3c <strcmp>
   124e8:	b110      	cbz	r0, 124f0 <scfg_find_setting_by_name+0x18>
    SCFG_FOREACH_SETTING(group, setting) {
   124ea:	3410      	adds	r4, #16
   124ec:	e7f7      	b.n	124de <scfg_find_setting_by_name+0x6>
    return NULL;
   124ee:	2400      	movs	r4, #0
}
   124f0:	4620      	mov	r0, r4
   124f2:	bd38      	pop	{r3, r4, r5, pc}

000124f4 <scfg_handler_get>:
    if (argc < 1) {
   124f4:	2800      	cmp	r0, #0
   124f6:	dd0e      	ble.n	12516 <scfg_handler_get+0x22>
{
   124f8:	b570      	push	{r4, r5, r6, lr}
   124fa:	461d      	mov	r5, r3
   124fc:	4614      	mov	r4, r2
    setting = scfg_find_setting_by_name(group, argv[0]);
   124fe:	6809      	ldr	r1, [r1, #0]
   12500:	9804      	ldr	r0, [sp, #16]
   12502:	f7ff ffe9 	bl	124d8 <scfg_find_setting_by_name>
    if (setting == NULL) {
   12506:	b140      	cbz	r0, 1251a <scfg_handler_get+0x26>
    return conf_str_from_value(setting->type, setting->val, buf, max_len);
   12508:	462b      	mov	r3, r5
   1250a:	4622      	mov	r2, r4
   1250c:	6841      	ldr	r1, [r0, #4]
   1250e:	7b00      	ldrb	r0, [r0, #12]
   12510:	f7fd f828 	bl	f564 <conf_str_from_value>
}
   12514:	bd70      	pop	{r4, r5, r6, pc}
        return NULL;
   12516:	2000      	movs	r0, #0
}
   12518:	4770      	bx	lr
        return NULL;
   1251a:	2000      	movs	r0, #0
   1251c:	e7fa      	b.n	12514 <scfg_handler_get+0x20>

0001251e <scfg_handler_set>:
    if (argc < 1) {
   1251e:	2800      	cmp	r0, #0
   12520:	dd15      	ble.n	1254e <scfg_handler_set+0x30>
{
   12522:	b510      	push	{r4, lr}
   12524:	4618      	mov	r0, r3
   12526:	4614      	mov	r4, r2
    setting = scfg_find_setting_by_name(group, argv[0]);
   12528:	6809      	ldr	r1, [r1, #0]
   1252a:	f7ff ffd5 	bl	124d8 <scfg_find_setting_by_name>
    if (setting == NULL) {
   1252e:	b190      	cbz	r0, 12556 <scfg_handler_set+0x38>
    rc = conf_value_from_str(val, setting->type, setting->val,
   12530:	6883      	ldr	r3, [r0, #8]
   12532:	6842      	ldr	r2, [r0, #4]
   12534:	7b01      	ldrb	r1, [r0, #12]
   12536:	4620      	mov	r0, r4
   12538:	f7fc ff65 	bl	f406 <conf_value_from_str>
    if (rc != 0) {
   1253c:	4603      	mov	r3, r0
   1253e:	b908      	cbnz	r0, 12544 <scfg_handler_set+0x26>
}
   12540:	4618      	mov	r0, r3
   12542:	bd10      	pop	{r4, pc}
        return os_error_to_sys(rc);
   12544:	b2c0      	uxtb	r0, r0
   12546:	f01c fcca 	bl	2eede <os_error_to_sys>
   1254a:	4603      	mov	r3, r0
   1254c:	e7f8      	b.n	12540 <scfg_handler_set+0x22>
        return SYS_EINVAL;
   1254e:	f06f 0301 	mvn.w	r3, #1
}
   12552:	4618      	mov	r0, r3
   12554:	4770      	bx	lr
        return SYS_ENOENT;
   12556:	f06f 0303 	mvn.w	r3, #3
   1255a:	e7f1      	b.n	12540 <scfg_handler_set+0x22>

0001255c <scfg_save_setting>:

int
scfg_save_setting(const struct scfg_group *group,
                  const struct scfg_setting *setting)
{
   1255c:	b570      	push	{r4, r5, r6, lr}
   1255e:	b098      	sub	sp, #96	; 0x60
   12560:	4606      	mov	r6, r0
   12562:	460c      	mov	r4, r1
    char id_buf[SCFG_SETTING_ID_BUF_SIZE];
    char val_buf[SCFG_NUM_STR_BUF_SIZE];
    char *val;
    int rc;

    val = conf_str_from_value(setting->type, setting->val,
   12564:	2315      	movs	r3, #21
   12566:	aa01      	add	r2, sp, #4
   12568:	6849      	ldr	r1, [r1, #4]
   1256a:	7b20      	ldrb	r0, [r4, #12]
   1256c:	f7fc fffa 	bl	f564 <conf_str_from_value>
                              val_buf, sizeof val_buf);
    if (val == NULL) {
   12570:	b198      	cbz	r0, 1259a <scfg_save_setting+0x3e>
   12572:	4605      	mov	r5, r0
        return SYS_EUNKNOWN;
    }

    scfg_setting_id(group->handler.ch_name, setting->name, id_buf);
   12574:	aa07      	add	r2, sp, #28
   12576:	6821      	ldr	r1, [r4, #0]
   12578:	68b0      	ldr	r0, [r6, #8]
   1257a:	f7ff ff63 	bl	12444 <scfg_setting_id>

    rc = conf_save_one(id_buf, val);
   1257e:	4629      	mov	r1, r5
   12580:	a807      	add	r0, sp, #28
   12582:	f7fc fe0f 	bl	f1a4 <conf_save_one>
    if (rc != 0) {
   12586:	4603      	mov	r3, r0
   12588:	b910      	cbnz	r0, 12590 <scfg_save_setting+0x34>
        return os_error_to_sys(rc);
    }

    return 0;
}
   1258a:	4618      	mov	r0, r3
   1258c:	b018      	add	sp, #96	; 0x60
   1258e:	bd70      	pop	{r4, r5, r6, pc}
        return os_error_to_sys(rc);
   12590:	b2c0      	uxtb	r0, r0
   12592:	f01c fca4 	bl	2eede <os_error_to_sys>
   12596:	4603      	mov	r3, r0
   12598:	e7f7      	b.n	1258a <scfg_save_setting+0x2e>
        return SYS_EUNKNOWN;
   1259a:	f06f 030c 	mvn.w	r3, #12
   1259e:	e7f4      	b.n	1258a <scfg_save_setting+0x2e>

000125a0 <scfg_save_val>:
    return scfg_save_setting(group, setting);
}

int
scfg_save_val(const struct scfg_group *group, const void *val)
{
   125a0:	b510      	push	{r4, lr}
   125a2:	4604      	mov	r4, r0
    const struct scfg_setting *setting;

    setting = scfg_find_setting_by_val(group, val);
   125a4:	f7ff ff44 	bl	12430 <scfg_find_setting_by_val>
    if (setting == NULL) {
   125a8:	b120      	cbz	r0, 125b4 <scfg_save_val+0x14>
   125aa:	4601      	mov	r1, r0
        return SYS_ENOENT;
    }

    return scfg_save_setting(group, setting);
   125ac:	4620      	mov	r0, r4
   125ae:	f7ff ffd5 	bl	1255c <scfg_save_setting>
}
   125b2:	bd10      	pop	{r4, pc}
        return SYS_ENOENT;
   125b4:	f06f 0003 	mvn.w	r0, #3
   125b8:	e7fb      	b.n	125b2 <scfg_save_val+0x12>
	...

000125bc <scfg_register>:
scfg_register(struct scfg_group *group, char *name)
{
    const struct scfg_setting *setting;
    int rc;

    SCFG_FOREACH_SETTING(group, setting) {
   125bc:	6803      	ldr	r3, [r0, #0]
   125be:	e000      	b.n	125c2 <scfg_register+0x6>
   125c0:	3310      	adds	r3, #16
   125c2:	681a      	ldr	r2, [r3, #0]
   125c4:	b152      	cbz	r2, 125dc <scfg_register+0x20>
        switch (setting->type) {
   125c6:	7b1a      	ldrb	r2, [r3, #12]
   125c8:	2a02      	cmp	r2, #2
   125ca:	d303      	bcc.n	125d4 <scfg_register+0x18>
   125cc:	2a06      	cmp	r2, #6
   125ce:	d9f7      	bls.n	125c0 <scfg_register+0x4>
   125d0:	2a0a      	cmp	r2, #10
   125d2:	d0f5      	beq.n	125c0 <scfg_register+0x4>
        case CONF_BOOL:
            break;

        default:
            /* We don't know how to (de)serialize the other data types. */
            return SYS_EINVAL;
   125d4:	f06f 0301 	mvn.w	r3, #1
    if (rc != 0) {
        return os_error_to_sys(rc);
    }

    return 0;
}
   125d8:	4618      	mov	r0, r3
   125da:	4770      	bx	lr
{
   125dc:	b570      	push	{r4, r5, r6, lr}
   125de:	460d      	mov	r5, r1
   125e0:	4604      	mov	r4, r0
    group->handler = (struct conf_handler) {
   125e2:	1d06      	adds	r6, r0, #4
   125e4:	2220      	movs	r2, #32
   125e6:	2100      	movs	r1, #0
   125e8:	4630      	mov	r0, r6
   125ea:	f7fc fa01 	bl	e9f0 <memset>
   125ee:	60a5      	str	r5, [r4, #8]
   125f0:	2301      	movs	r3, #1
   125f2:	7323      	strb	r3, [r4, #12]
   125f4:	4b09      	ldr	r3, [pc, #36]	; (1261c <scfg_register+0x60>)
   125f6:	6123      	str	r3, [r4, #16]
   125f8:	4b09      	ldr	r3, [pc, #36]	; (12620 <scfg_register+0x64>)
   125fa:	6163      	str	r3, [r4, #20]
   125fc:	4b09      	ldr	r3, [pc, #36]	; (12624 <scfg_register+0x68>)
   125fe:	61e3      	str	r3, [r4, #28]
   12600:	6224      	str	r4, [r4, #32]
    rc = conf_register(&group->handler);
   12602:	4630      	mov	r0, r6
   12604:	f7fc febc 	bl	f380 <conf_register>
    if (rc != 0) {
   12608:	4603      	mov	r3, r0
   1260a:	b908      	cbnz	r0, 12610 <scfg_register+0x54>
}
   1260c:	4618      	mov	r0, r3
   1260e:	bd70      	pop	{r4, r5, r6, pc}
        return os_error_to_sys(rc);
   12610:	b2c0      	uxtb	r0, r0
   12612:	f01c fc64 	bl	2eede <os_error_to_sys>
   12616:	4603      	mov	r3, r0
   12618:	e7f8      	b.n	1260c <scfg_register+0x50>
   1261a:	bf00      	nop
   1261c:	000124f5 	.word	0x000124f5
   12620:	0001251f 	.word	0x0001251f
   12624:	00012499 	.word	0x00012499

00012628 <valid_attr_type>:
 * one-to-one because of signedness of integers
 * and therefore we need a function to do this trickery */
static int
valid_attr_type(CborType ct, CborAttrType at)
{
    switch (at) {
   12628:	3901      	subs	r1, #1
   1262a:	290a      	cmp	r1, #10
   1262c:	d822      	bhi.n	12674 <valid_attr_type+0x4c>
   1262e:	e8df f001 	tbb	[pc, r1]
   12632:	0606      	.short	0x0606
   12634:	21110d09 	.word	0x21110d09
   12638:	21191521 	.word	0x21191521
   1263c:	1d          	.byte	0x1d
   1263d:	00          	.byte	0x00
    case CborAttrIntegerType:
    case CborAttrUnsignedIntegerType:
        if (ct == CborIntegerType) {
   1263e:	b1d8      	cbz	r0, 12678 <valid_attr_type+0x50>
        }
        break;
    default:
        break;
    }
    return 0;
   12640:	2000      	movs	r0, #0
   12642:	4770      	bx	lr
        if (ct == CborByteStringType) {
   12644:	2840      	cmp	r0, #64	; 0x40
   12646:	d019      	beq.n	1267c <valid_attr_type+0x54>
    return 0;
   12648:	2000      	movs	r0, #0
   1264a:	4770      	bx	lr
        if (ct == CborTextStringType) {
   1264c:	2860      	cmp	r0, #96	; 0x60
   1264e:	d017      	beq.n	12680 <valid_attr_type+0x58>
    return 0;
   12650:	2000      	movs	r0, #0
   12652:	4770      	bx	lr
        if (ct == CborBooleanType) {
   12654:	28f5      	cmp	r0, #245	; 0xf5
   12656:	d015      	beq.n	12684 <valid_attr_type+0x5c>
    return 0;
   12658:	2000      	movs	r0, #0
   1265a:	4770      	bx	lr
        if (ct == CborArrayType) {
   1265c:	2880      	cmp	r0, #128	; 0x80
   1265e:	d013      	beq.n	12688 <valid_attr_type+0x60>
    return 0;
   12660:	2000      	movs	r0, #0
   12662:	4770      	bx	lr
        if (ct == CborMapType) {
   12664:	28a0      	cmp	r0, #160	; 0xa0
   12666:	d011      	beq.n	1268c <valid_attr_type+0x64>
    return 0;
   12668:	2000      	movs	r0, #0
   1266a:	4770      	bx	lr
        if (ct == CborNullType) {
   1266c:	28f6      	cmp	r0, #246	; 0xf6
   1266e:	d00f      	beq.n	12690 <valid_attr_type+0x68>
    return 0;
   12670:	2000      	movs	r0, #0
   12672:	4770      	bx	lr
   12674:	2000      	movs	r0, #0
   12676:	4770      	bx	lr
            return 1;
   12678:	2001      	movs	r0, #1
   1267a:	4770      	bx	lr
            return 1;
   1267c:	2001      	movs	r0, #1
   1267e:	4770      	bx	lr
            return 1;
   12680:	2001      	movs	r0, #1
   12682:	4770      	bx	lr
            return 1;
   12684:	2001      	movs	r0, #1
   12686:	4770      	bx	lr
            return 1;
   12688:	2001      	movs	r0, #1
   1268a:	4770      	bx	lr
            return 1;
   1268c:	2001      	movs	r0, #1
   1268e:	4770      	bx	lr
            return 1;
   12690:	2001      	movs	r0, #1
}
   12692:	4770      	bx	lr

00012694 <cbor_target_address>:
cbor_target_address(const struct cbor_attr_t *cursor,
                    const struct cbor_array_t *parent, int offset)
{
    char *targetaddr = NULL;

    if (parent == NULL || parent->element_type != CborAttrStructObjectType) {
   12694:	460b      	mov	r3, r1
   12696:	b111      	cbz	r1, 1269e <cbor_target_address+0xa>
   12698:	7809      	ldrb	r1, [r1, #0]
   1269a:	290a      	cmp	r1, #10
   1269c:	d017      	beq.n	126ce <cbor_target_address+0x3a>
        /* ordinary case - use the address in the cursor structure */
        switch (cursor->type) {
   1269e:	7903      	ldrb	r3, [r0, #4]
   126a0:	3b01      	subs	r3, #1
   126a2:	2b04      	cmp	r3, #4
   126a4:	d81a      	bhi.n	126dc <cbor_target_address+0x48>
   126a6:	e8df f003 	tbb	[pc, r3]
   126aa:	0703      	.short	0x0703
   126ac:	0d0b      	.short	0x0d0b
   126ae:	0f          	.byte	0x0f
   126af:	00          	.byte	0x00
        case CborAttrNullType:
            targetaddr = NULL;
            break;
        case CborAttrIntegerType:
            targetaddr = (char *)&cursor->addr.integer[offset];
   126b0:	6880      	ldr	r0, [r0, #8]
   126b2:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
            break;
   126b6:	4770      	bx	lr
        case CborAttrUnsignedIntegerType:
            targetaddr = (char *)&cursor->addr.uinteger[offset];
   126b8:	6880      	ldr	r0, [r0, #8]
   126ba:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
            break;
   126be:	4770      	bx	lr
        case CborAttrDoubleType:
            targetaddr = (char *)&cursor->addr.real[offset];
            break;
#endif
        case CborAttrByteStringType:
            targetaddr = (char *) cursor->addr.bytestring.data;
   126c0:	6880      	ldr	r0, [r0, #8]
            break;
   126c2:	4770      	bx	lr
        case CborAttrTextStringType:
            targetaddr = cursor->addr.string;
   126c4:	6880      	ldr	r0, [r0, #8]
            break;
   126c6:	4770      	bx	lr
        case CborAttrBooleanType:
            targetaddr = (char *)&cursor->addr.boolean[offset];
   126c8:	6880      	ldr	r0, [r0, #8]
   126ca:	4410      	add	r0, r2
            break;
   126cc:	4770      	bx	lr
            break;
        }
    } else {
        /* tricky case - hacking a member in an array of structures */
        targetaddr =
            parent->arr.objects.base + (offset * parent->arr.objects.stride) +
   126ce:	6899      	ldr	r1, [r3, #8]
   126d0:	68db      	ldr	r3, [r3, #12]
            cursor->addr.offset;
   126d2:	6880      	ldr	r0, [r0, #8]
            parent->arr.objects.base + (offset * parent->arr.objects.stride) +
   126d4:	fb03 0002 	mla	r0, r3, r2, r0
        targetaddr =
   126d8:	4408      	add	r0, r1
   126da:	4770      	bx	lr
            targetaddr = NULL;
   126dc:	2000      	movs	r0, #0
    }
    return targetaddr;
}
   126de:	4770      	bx	lr

000126e0 <cbor_read_array>:
    return err;
}

int
cbor_read_array(struct CborValue *value, const struct cbor_array_t *arr)
{
   126e0:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
   126e4:	b086      	sub	sp, #24
   126e6:	4680      	mov	r8, r0
   126e8:	460c      	mov	r4, r1
    int off, arrcount;
    size_t len;
    void *lptr;
    char *tp;

    err = cbor_value_enter_container(value, &elem);
   126ea:	a902      	add	r1, sp, #8
   126ec:	f01a fbbd 	bl	2ce6a <cbor_value_enter_container>
    if (err) {
   126f0:	4605      	mov	r5, r0
   126f2:	2800      	cmp	r0, #0
   126f4:	f040 80db 	bne.w	128ae <cbor_read_array+0x1ce>
        return err;
    }
    arrcount = 0;
    tp = arr->arr.strings.store;
   126f8:	68a7      	ldr	r7, [r4, #8]
    for (off = 0; off < arr->maxlen; off++) {
   126fa:	2600      	movs	r6, #0
   126fc:	e09e      	b.n	1283c <cbor_read_array+0x15c>
        switch (arr->element_type) {
        case CborAttrBooleanType:
            lptr = &arr->arr.booleans.store[off];
   126fe:	6862      	ldr	r2, [r4, #4]
{ return value->type == CborBooleanType; }
   12700:	f89d 3016 	ldrb.w	r3, [sp, #22]
    assert(cbor_value_is_boolean(value));
   12704:	2bf5      	cmp	r3, #245	; 0xf5
   12706:	d106      	bne.n	12716 <cbor_read_array+0x36>
    *result = !!value->extra;
   12708:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   1270c:	3300      	adds	r3, #0
   1270e:	bf18      	it	ne
   12710:	2301      	movne	r3, #1
   12712:	5593      	strb	r3, [r2, r6]
            err |= cbor_value_get_boolean(&elem, lptr);
            break;
   12714:	e088      	b.n	12828 <cbor_read_array+0x148>
    assert(cbor_value_is_boolean(value));
   12716:	f7f9 fd67 	bl	c1e8 <hal_debugger_connected>
   1271a:	b100      	cbz	r0, 1271e <cbor_read_array+0x3e>
   1271c:	be01      	bkpt	0x0001
   1271e:	2300      	movs	r3, #0
   12720:	461a      	mov	r2, r3
   12722:	4619      	mov	r1, r3
   12724:	4618      	mov	r0, r3
   12726:	f7fa fa13 	bl	cb50 <__assert_func>
        case CborAttrIntegerType:
            lptr = &arr->arr.integers.store[off];
   1272a:	6863      	ldr	r3, [r4, #4]
   1272c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
{ return value->type == CborIntegerType; }
   12730:	f89d 3016 	ldrb.w	r3, [sp, #22]
    assert(cbor_value_is_integer(value));
   12734:	b9b3      	cbnz	r3, 12764 <cbor_read_array+0x84>
    return value->flags & CborIteratorFlag_IntegerValueTooLarge ?
   12736:	f89d 3017 	ldrb.w	r3, [sp, #23]
                _cbor_value_decode_int64_internal(value) : value->extra;
   1273a:	f013 0f01 	tst.w	r3, #1
   1273e:	d11b      	bne.n	12778 <cbor_read_array+0x98>
   12740:	f8bd b014 	ldrh.w	fp, [sp, #20]
   12744:	f04f 0c00 	mov.w	ip, #0
    *result = (int64_t) _cbor_value_extract_int64_helper(value);
   12748:	e9c9 bc00 	strd	fp, ip, [r9]
    if (value->flags & CborIteratorFlag_NegativeInteger)
   1274c:	f89d 3017 	ldrb.w	r3, [sp, #23]
   12750:	f013 0f02 	tst.w	r3, #2
   12754:	d068      	beq.n	12828 <cbor_read_array+0x148>
        *result = -*result - 1;
   12756:	ea6f 000b 	mvn.w	r0, fp
   1275a:	ea6f 010c 	mvn.w	r1, ip
   1275e:	e9c9 0100 	strd	r0, r1, [r9]
            err |= cbor_value_get_int64(&elem, lptr);
            break;
   12762:	e061      	b.n	12828 <cbor_read_array+0x148>
    assert(cbor_value_is_integer(value));
   12764:	f7f9 fd40 	bl	c1e8 <hal_debugger_connected>
   12768:	b100      	cbz	r0, 1276c <cbor_read_array+0x8c>
   1276a:	be01      	bkpt	0x0001
   1276c:	2300      	movs	r3, #0
   1276e:	461a      	mov	r2, r3
   12770:	4619      	mov	r1, r3
   12772:	4618      	mov	r0, r3
   12774:	f7fa f9ec 	bl	cb50 <__assert_func>
                _cbor_value_decode_int64_internal(value) : value->extra;
   12778:	a802      	add	r0, sp, #8
   1277a:	f01a fafa 	bl	2cd72 <_cbor_value_decode_int64_internal>
   1277e:	4683      	mov	fp, r0
   12780:	468c      	mov	ip, r1
   12782:	e7e1      	b.n	12748 <cbor_read_array+0x68>
        case CborAttrUnsignedIntegerType:
            lptr = &arr->arr.uintegers.store[off];
   12784:	6863      	ldr	r3, [r4, #4]
   12786:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
{ return value->type == CborIntegerType; }
   1278a:	f89d 3016 	ldrb.w	r3, [sp, #22]
{ return cbor_value_is_integer(value) && (value->flags & CborIteratorFlag_NegativeInteger) == 0; }
   1278e:	b933      	cbnz	r3, 1279e <cbor_read_array+0xbe>
   12790:	f89d 3017 	ldrb.w	r3, [sp, #23]
   12794:	f013 0f02 	tst.w	r3, #2
   12798:	d00e      	beq.n	127b8 <cbor_read_array+0xd8>
   1279a:	2300      	movs	r3, #0
   1279c:	e000      	b.n	127a0 <cbor_read_array+0xc0>
   1279e:	2300      	movs	r3, #0
    assert(cbor_value_is_unsigned_integer(value));
   127a0:	b163      	cbz	r3, 127bc <cbor_read_array+0xdc>
    return value->flags & CborIteratorFlag_IntegerValueTooLarge ?
   127a2:	f89d 3017 	ldrb.w	r3, [sp, #23]
                _cbor_value_decode_int64_internal(value) : value->extra;
   127a6:	f013 0f01 	tst.w	r3, #1
   127aa:	d111      	bne.n	127d0 <cbor_read_array+0xf0>
   127ac:	f8bd 0014 	ldrh.w	r0, [sp, #20]
   127b0:	2100      	movs	r1, #0
    *result = _cbor_value_extract_int64_helper(value);
   127b2:	e9c9 0100 	strd	r0, r1, [r9]
            err |= cbor_value_get_uint64(&elem, lptr);
            break;
   127b6:	e037      	b.n	12828 <cbor_read_array+0x148>
{ return cbor_value_is_integer(value) && (value->flags & CborIteratorFlag_NegativeInteger) == 0; }
   127b8:	2301      	movs	r3, #1
   127ba:	e7f1      	b.n	127a0 <cbor_read_array+0xc0>
    assert(cbor_value_is_unsigned_integer(value));
   127bc:	f7f9 fd14 	bl	c1e8 <hal_debugger_connected>
   127c0:	b100      	cbz	r0, 127c4 <cbor_read_array+0xe4>
   127c2:	be01      	bkpt	0x0001
   127c4:	2300      	movs	r3, #0
   127c6:	461a      	mov	r2, r3
   127c8:	4619      	mov	r1, r3
   127ca:	4618      	mov	r0, r3
   127cc:	f7fa f9c0 	bl	cb50 <__assert_func>
                _cbor_value_decode_int64_internal(value) : value->extra;
   127d0:	a802      	add	r0, sp, #8
   127d2:	f01a face 	bl	2cd72 <_cbor_value_decode_int64_internal>
   127d6:	e7ec      	b.n	127b2 <cbor_read_array+0xd2>
            lptr = &arr->arr.reals.store[off];
            err |= cbor_value_get_double(&elem, lptr);
            break;
#endif
        case CborAttrTextStringType:
            len = arr->arr.strings.storelen - (tp - arr->arr.strings.store);
   127d8:	68e3      	ldr	r3, [r4, #12]
   127da:	68a2      	ldr	r2, [r4, #8]
   127dc:	1aba      	subs	r2, r7, r2
   127de:	1a9b      	subs	r3, r3, r2
   127e0:	9301      	str	r3, [sp, #4]
{ return value->type == CborTextStringType; }
   127e2:	f89d 3016 	ldrb.w	r3, [sp, #22]
    assert(cbor_value_is_text_string(value));
   127e6:	2b60      	cmp	r3, #96	; 0x60
   127e8:	d10d      	bne.n	12806 <cbor_read_array+0x126>
    return _cbor_value_copy_string(value, buffer, buflen, next);
   127ea:	2300      	movs	r3, #0
   127ec:	aa01      	add	r2, sp, #4
   127ee:	4639      	mov	r1, r7
   127f0:	a802      	add	r0, sp, #8
   127f2:	f01a fc07 	bl	2d004 <_cbor_value_copy_string>
            err |= cbor_value_copy_text_string(&elem, tp, &len, NULL);
   127f6:	4305      	orrs	r5, r0
            arr->arr.strings.ptrs[off] = tp;
   127f8:	6863      	ldr	r3, [r4, #4]
   127fa:	f843 7026 	str.w	r7, [r3, r6, lsl #2]
            tp += len + 1;
   127fe:	9b01      	ldr	r3, [sp, #4]
   12800:	3301      	adds	r3, #1
   12802:	441f      	add	r7, r3
            break;
   12804:	e010      	b.n	12828 <cbor_read_array+0x148>
    assert(cbor_value_is_text_string(value));
   12806:	f7f9 fcef 	bl	c1e8 <hal_debugger_connected>
   1280a:	b100      	cbz	r0, 1280e <cbor_read_array+0x12e>
   1280c:	be01      	bkpt	0x0001
   1280e:	2300      	movs	r3, #0
   12810:	461a      	mov	r2, r3
   12812:	4619      	mov	r1, r3
   12814:	4618      	mov	r0, r3
   12816:	f7fa f99b 	bl	cb50 <__assert_func>
        case CborAttrStructObjectType:
            err |= cbor_internal_read_object(&elem, arr->arr.objects.subtype,
   1281a:	4633      	mov	r3, r6
   1281c:	4622      	mov	r2, r4
   1281e:	6861      	ldr	r1, [r4, #4]
   12820:	a802      	add	r0, sp, #8
   12822:	f000 f847 	bl	128b4 <cbor_internal_read_object>
   12826:	4305      	orrs	r5, r0
            break;
        default:
            err |= CborErrorIllegalType;
            break;
        }
        arrcount++;
   12828:	3601      	adds	r6, #1
        if (arr->element_type != CborAttrStructObjectType) {
   1282a:	7823      	ldrb	r3, [r4, #0]
   1282c:	2b0a      	cmp	r3, #10
   1282e:	d126      	bne.n	1287e <cbor_read_array+0x19e>
{ return value && value->type != CborInvalidType; }
   12830:	f89d 3016 	ldrb.w	r3, [sp, #22]
   12834:	2bff      	cmp	r3, #255	; 0xff
   12836:	d027      	beq.n	12888 <cbor_read_array+0x1a8>
   12838:	2301      	movs	r3, #1
            err |= cbor_value_advance(&elem);
        }
        if (!cbor_value_is_valid(&elem)) {
   1283a:	b33b      	cbz	r3, 1288c <cbor_read_array+0x1ac>
    for (off = 0; off < arr->maxlen; off++) {
   1283c:	6963      	ldr	r3, [r4, #20]
   1283e:	42b3      	cmp	r3, r6
   12840:	dd24      	ble.n	1288c <cbor_read_array+0x1ac>
        switch (arr->element_type) {
   12842:	7823      	ldrb	r3, [r4, #0]
   12844:	3b01      	subs	r3, #1
   12846:	2b09      	cmp	r3, #9
   12848:	d816      	bhi.n	12878 <cbor_read_array+0x198>
   1284a:	a201      	add	r2, pc, #4	; (adr r2, 12850 <cbor_read_array+0x170>)
   1284c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   12850:	0001272b 	.word	0x0001272b
   12854:	00012785 	.word	0x00012785
   12858:	00012879 	.word	0x00012879
   1285c:	000127d9 	.word	0x000127d9
   12860:	000126ff 	.word	0x000126ff
   12864:	00012879 	.word	0x00012879
   12868:	00012879 	.word	0x00012879
   1286c:	00012879 	.word	0x00012879
   12870:	00012879 	.word	0x00012879
   12874:	0001281b 	.word	0x0001281b
            err |= CborErrorIllegalType;
   12878:	f445 7582 	orr.w	r5, r5, #260	; 0x104
            break;
   1287c:	e7d4      	b.n	12828 <cbor_read_array+0x148>
            err |= cbor_value_advance(&elem);
   1287e:	a802      	add	r0, sp, #8
   12880:	f01a fc20 	bl	2d0c4 <cbor_value_advance>
   12884:	4305      	orrs	r5, r0
   12886:	e7d3      	b.n	12830 <cbor_read_array+0x150>
   12888:	2300      	movs	r3, #0
   1288a:	e7d6      	b.n	1283a <cbor_read_array+0x15a>
            break;
        }
    }
    if (arr->count) {
   1288c:	6923      	ldr	r3, [r4, #16]
   1288e:	b133      	cbz	r3, 1289e <cbor_read_array+0x1be>
        *arr->count = arrcount;
   12890:	601e      	str	r6, [r3, #0]
   12892:	e004      	b.n	1289e <cbor_read_array+0x1be>
    }
    while (!cbor_value_at_end(&elem)) {
        err |= CborErrorDataTooLarge;
   12894:	f445 6580 	orr.w	r5, r5, #1024	; 0x400
        cbor_value_advance(&elem);
   12898:	a802      	add	r0, sp, #8
   1289a:	f01a fc13 	bl	2d0c4 <cbor_value_advance>
{ return it->remaining == 0; }
   1289e:	9b04      	ldr	r3, [sp, #16]
    while (!cbor_value_at_end(&elem)) {
   128a0:	2b00      	cmp	r3, #0
   128a2:	d1f7      	bne.n	12894 <cbor_read_array+0x1b4>
    }
    err |= cbor_value_leave_container(value, &elem);
   128a4:	a902      	add	r1, sp, #8
   128a6:	4640      	mov	r0, r8
   128a8:	f01a fb84 	bl	2cfb4 <cbor_value_leave_container>
   128ac:	4328      	orrs	r0, r5
    return err;
}
   128ae:	b006      	add	sp, #24
   128b0:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}

000128b4 <cbor_internal_read_object>:
{
   128b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   128b8:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
   128bc:	4683      	mov	fp, r0
   128be:	9101      	str	r1, [sp, #4]
   128c0:	4690      	mov	r8, r2
   128c2:	4699      	mov	r9, r3
    size_t len = 0;
   128c4:	2300      	movs	r3, #0
   128c6:	9304      	str	r3, [sp, #16]
    for (cursor = attrs; cursor->attribute != NULL; cursor++) {
   128c8:	460c      	mov	r4, r1
   128ca:	e006      	b.n	128da <cbor_internal_read_object+0x26>
                    memcpy(lptr, &cursor->dflt.integer, sizeof(long long int));
   128cc:	4623      	mov	r3, r4
   128ce:	f853 1f20 	ldr.w	r1, [r3, #32]!
   128d2:	685b      	ldr	r3, [r3, #4]
   128d4:	6001      	str	r1, [r0, #0]
   128d6:	6043      	str	r3, [r0, #4]
    for (cursor = attrs; cursor->attribute != NULL; cursor++) {
   128d8:	3430      	adds	r4, #48	; 0x30
   128da:	6823      	ldr	r3, [r4, #0]
   128dc:	b1eb      	cbz	r3, 1291a <cbor_internal_read_object+0x66>
        if (!cursor->nodefault) {
   128de:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   128e2:	2b00      	cmp	r3, #0
   128e4:	d1f8      	bne.n	128d8 <cbor_internal_read_object+0x24>
            lptr = cbor_target_address(cursor, parent, offset);
   128e6:	464a      	mov	r2, r9
   128e8:	4641      	mov	r1, r8
   128ea:	4620      	mov	r0, r4
   128ec:	f7ff fed2 	bl	12694 <cbor_target_address>
            if (lptr != NULL) {
   128f0:	2800      	cmp	r0, #0
   128f2:	d0f1      	beq.n	128d8 <cbor_internal_read_object+0x24>
                switch (cursor->type) {
   128f4:	7923      	ldrb	r3, [r4, #4]
   128f6:	2b02      	cmp	r3, #2
   128f8:	d004      	beq.n	12904 <cbor_internal_read_object+0x50>
   128fa:	2b05      	cmp	r3, #5
   128fc:	d009      	beq.n	12912 <cbor_internal_read_object+0x5e>
   128fe:	2b01      	cmp	r3, #1
   12900:	d1ea      	bne.n	128d8 <cbor_internal_read_object+0x24>
   12902:	e7e3      	b.n	128cc <cbor_internal_read_object+0x18>
                    memcpy(lptr, &cursor->dflt.integer,
   12904:	4623      	mov	r3, r4
   12906:	f853 1f20 	ldr.w	r1, [r3, #32]!
   1290a:	685b      	ldr	r3, [r3, #4]
   1290c:	6001      	str	r1, [r0, #0]
   1290e:	6043      	str	r3, [r0, #4]
                    break;
   12910:	e7e2      	b.n	128d8 <cbor_internal_read_object+0x24>
                    memcpy(lptr, &cursor->dflt.boolean, sizeof(bool));
   12912:	f894 3020 	ldrb.w	r3, [r4, #32]
   12916:	7003      	strb	r3, [r0, #0]
                    break;
   12918:	e7de      	b.n	128d8 <cbor_internal_read_object+0x24>
{ return value->type == CborMapType; }
   1291a:	f89b 300e 	ldrb.w	r3, [fp, #14]
    if (cbor_value_is_map(root_value)) {
   1291e:	2ba0      	cmp	r3, #160	; 0xa0
   12920:	d005      	beq.n	1292e <cbor_internal_read_object+0x7a>
        return err;
   12922:	f44f 7082 	mov.w	r0, #260	; 0x104
}
   12926:	f50d 7d0b 	add.w	sp, sp, #556	; 0x22c
   1292a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        err |= cbor_value_enter_container(root_value, &cur_value);
   1292e:	a905      	add	r1, sp, #20
   12930:	4658      	mov	r0, fp
   12932:	f01a fa9a 	bl	2ce6a <cbor_value_enter_container>
   12936:	4607      	mov	r7, r0
    while (cbor_value_is_valid(&cur_value) && !err) {
   12938:	e078      	b.n	12a2c <cbor_internal_read_object+0x178>
            if (cbor_value_calculate_string_length(&cur_value, &len) == 0) {
   1293a:	a904      	add	r1, sp, #16
   1293c:	a805      	add	r0, sp, #20
   1293e:	f01a fbd7 	bl	2d0f0 <cbor_value_calculate_string_length>
   12942:	b970      	cbnz	r0, 12962 <cbor_internal_read_object+0xae>
                if (len > CBORATTR_MAX_SIZE) {
   12944:	9b04      	ldr	r3, [sp, #16]
   12946:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   1294a:	d81c      	bhi.n	12986 <cbor_internal_read_object+0xd2>
{ return value->type == CborTextStringType; }
   1294c:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    assert(cbor_value_is_text_string(value));
   12950:	2b60      	cmp	r3, #96	; 0x60
   12952:	d11b      	bne.n	1298c <cbor_internal_read_object+0xd8>
    return _cbor_value_copy_string(value, buffer, buflen, next);
   12954:	2300      	movs	r3, #0
   12956:	aa04      	add	r2, sp, #16
   12958:	a909      	add	r1, sp, #36	; 0x24
   1295a:	a805      	add	r0, sp, #20
   1295c:	f01a fb52 	bl	2d004 <_cbor_value_copy_string>
                err |= cbor_value_copy_text_string(&cur_value, attrbuf, &len,
   12960:	4307      	orrs	r7, r0
            err |= cbor_value_advance(&cur_value);
   12962:	a805      	add	r0, sp, #20
   12964:	f01a fbae 	bl	2d0c4 <cbor_value_advance>
   12968:	4307      	orrs	r7, r0
{ return value && value->type != CborInvalidType; }
   1296a:	f89d 6022 	ldrb.w	r6, [sp, #34]	; 0x22
   1296e:	2eff      	cmp	r6, #255	; 0xff
   12970:	d016      	beq.n	129a0 <cbor_internal_read_object+0xec>
   12972:	2301      	movs	r3, #1
            if (cbor_value_is_valid(&cur_value)) {
   12974:	2b00      	cmp	r3, #0
   12976:	d169      	bne.n	12a4c <cbor_internal_read_object+0x198>
                err |= CborErrorIllegalType;
   12978:	f447 7782 	orr.w	r7, r7, #260	; 0x104
    if (!err) {
   1297c:	2f00      	cmp	r7, #0
   1297e:	f000 810c 	beq.w	12b9a <cbor_internal_read_object+0x2e6>
    return err;
   12982:	4638      	mov	r0, r7
   12984:	e7cf      	b.n	12926 <cbor_internal_read_object+0x72>
                    err |= CborErrorDataTooLarge;
   12986:	f447 6780 	orr.w	r7, r7, #1024	; 0x400
                    break;
   1298a:	e7f7      	b.n	1297c <cbor_internal_read_object+0xc8>
    assert(cbor_value_is_text_string(value));
   1298c:	f7f9 fc2c 	bl	c1e8 <hal_debugger_connected>
   12990:	b100      	cbz	r0, 12994 <cbor_internal_read_object+0xe0>
   12992:	be01      	bkpt	0x0001
   12994:	2300      	movs	r3, #0
   12996:	461a      	mov	r2, r3
   12998:	4619      	mov	r1, r3
   1299a:	4618      	mov	r0, r3
   1299c:	f7fa f8d8 	bl	cb50 <__assert_func>
{ return value && value->type != CborInvalidType; }
   129a0:	2300      	movs	r3, #0
   129a2:	e7e7      	b.n	12974 <cbor_internal_read_object+0xc0>
                    attrbuf[0] == '\0') {
   129a4:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
                if (cursor->attribute == CBORATTR_ATTR_UNNAMED &&
   129a8:	b963      	cbnz	r3, 129c4 <cbor_internal_read_object+0x110>
                    best_match = cursor;
   129aa:	46a2      	mov	sl, r4
        for (cursor = attrs; cursor->attribute != NULL; cursor++) {
   129ac:	3430      	adds	r4, #48	; 0x30
   129ae:	6825      	ldr	r5, [r4, #0]
   129b0:	b1a5      	cbz	r5, 129dc <cbor_internal_read_object+0x128>
            if (valid_attr_type(type, cursor->type)) {
   129b2:	7921      	ldrb	r1, [r4, #4]
   129b4:	4630      	mov	r0, r6
   129b6:	f7ff fe37 	bl	12628 <valid_attr_type>
   129ba:	2800      	cmp	r0, #0
   129bc:	d0f6      	beq.n	129ac <cbor_internal_read_object+0xf8>
                if (cursor->attribute == CBORATTR_ATTR_UNNAMED &&
   129be:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   129c2:	d0ef      	beq.n	129a4 <cbor_internal_read_object+0xf0>
                } else if (strlen(cursor->attribute) == len &&
   129c4:	4628      	mov	r0, r5
   129c6:	f7fc f889 	bl	eadc <strlen>
   129ca:	9a04      	ldr	r2, [sp, #16]
   129cc:	4290      	cmp	r0, r2
   129ce:	d1ed      	bne.n	129ac <cbor_internal_read_object+0xf8>
                    !memcmp(cursor->attribute, attrbuf, len)) {
   129d0:	a909      	add	r1, sp, #36	; 0x24
   129d2:	4628      	mov	r0, r5
   129d4:	f7fb ffc0 	bl	e958 <memcmp>
                } else if (strlen(cursor->attribute) == len &&
   129d8:	2800      	cmp	r0, #0
   129da:	d1e7      	bne.n	129ac <cbor_internal_read_object+0xf8>
        if (!cursor->attribute && best_match) {
   129dc:	b1a5      	cbz	r5, 12a08 <cbor_internal_read_object+0x154>
        if (cursor->attribute != NULL) {
   129de:	6823      	ldr	r3, [r4, #0]
   129e0:	b30b      	cbz	r3, 12a26 <cbor_internal_read_object+0x172>
            lptr = cbor_target_address(cursor, parent, offset);
   129e2:	464a      	mov	r2, r9
   129e4:	4641      	mov	r1, r8
   129e6:	4620      	mov	r0, r4
   129e8:	f7ff fe54 	bl	12694 <cbor_target_address>
   129ec:	4605      	mov	r5, r0
            switch (cursor->type) {
   129ee:	7923      	ldrb	r3, [r4, #4]
   129f0:	3b01      	subs	r3, #1
   129f2:	2b0a      	cmp	r3, #10
   129f4:	f200 80cc 	bhi.w	12b90 <cbor_internal_read_object+0x2dc>
   129f8:	e8df f003 	tbb	[pc, r3]
   129fc:	a3886136 	.word	0xa3886136
   12a00:	bbcaca0b 	.word	0xbbcaca0b
   12a04:	cac2      	.short	0xcac2
   12a06:	15          	.byte	0x15
   12a07:	00          	.byte	0x00
        if (!cursor->attribute && best_match) {
   12a08:	f1ba 0f00 	cmp.w	sl, #0
   12a0c:	d0e7      	beq.n	129de <cbor_internal_read_object+0x12a>
            cursor = best_match;
   12a0e:	4654      	mov	r4, sl
   12a10:	e7e5      	b.n	129de <cbor_internal_read_object+0x12a>
{ return value->type == CborBooleanType; }
   12a12:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    assert(cbor_value_is_boolean(value));
   12a16:	2bf5      	cmp	r3, #245	; 0xf5
   12a18:	d11c      	bne.n	12a54 <cbor_internal_read_object+0x1a0>
    *result = !!value->extra;
   12a1a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   12a1e:	3300      	adds	r3, #0
   12a20:	bf18      	it	ne
   12a22:	2301      	movne	r3, #1
   12a24:	7003      	strb	r3, [r0, #0]
        cbor_value_advance(&cur_value);
   12a26:	a805      	add	r0, sp, #20
   12a28:	f01a fb4c 	bl	2d0c4 <cbor_value_advance>
{ return value && value->type != CborInvalidType; }
   12a2c:	f89d 6022 	ldrb.w	r6, [sp, #34]	; 0x22
   12a30:	2eff      	cmp	r6, #255	; 0xff
   12a32:	f000 80b0 	beq.w	12b96 <cbor_internal_read_object+0x2e2>
   12a36:	2301      	movs	r3, #1
    while (cbor_value_is_valid(&cur_value) && !err) {
   12a38:	2b00      	cmp	r3, #0
   12a3a:	d09f      	beq.n	1297c <cbor_internal_read_object+0xc8>
   12a3c:	2f00      	cmp	r7, #0
   12a3e:	d19d      	bne.n	1297c <cbor_internal_read_object+0xc8>
        if (cbor_value_is_text_string(&cur_value)) {
   12a40:	2e60      	cmp	r6, #96	; 0x60
   12a42:	f43f af7a 	beq.w	1293a <cbor_internal_read_object+0x86>
            attrbuf[0] = '\0';
   12a46:	2300      	movs	r3, #0
   12a48:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        for (cursor = attrs; cursor->attribute != NULL; cursor++) {
   12a4c:	9c01      	ldr	r4, [sp, #4]
        best_match = NULL;
   12a4e:	f04f 0a00 	mov.w	sl, #0
        for (cursor = attrs; cursor->attribute != NULL; cursor++) {
   12a52:	e7ac      	b.n	129ae <cbor_internal_read_object+0xfa>
    assert(cbor_value_is_boolean(value));
   12a54:	f7f9 fbc8 	bl	c1e8 <hal_debugger_connected>
   12a58:	b100      	cbz	r0, 12a5c <cbor_internal_read_object+0x1a8>
   12a5a:	be01      	bkpt	0x0001
   12a5c:	2300      	movs	r3, #0
   12a5e:	461a      	mov	r2, r3
   12a60:	4619      	mov	r1, r3
   12a62:	4618      	mov	r0, r3
   12a64:	f7fa f874 	bl	cb50 <__assert_func>
{ return value->type == CborIntegerType; }
   12a68:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    assert(cbor_value_is_integer(value));
   12a6c:	b9bb      	cbnz	r3, 12a9e <cbor_internal_read_object+0x1ea>
    return value->flags & CborIteratorFlag_IntegerValueTooLarge ?
   12a6e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
                _cbor_value_decode_int64_internal(value) : value->extra;
   12a72:	f013 0f01 	tst.w	r3, #1
   12a76:	d11c      	bne.n	12ab2 <cbor_internal_read_object+0x1fe>
   12a78:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   12a7c:	2400      	movs	r4, #0
    *result = (int64_t) _cbor_value_extract_int64_helper(value);
   12a7e:	4619      	mov	r1, r3
   12a80:	4622      	mov	r2, r4
   12a82:	e9c5 1200 	strd	r1, r2, [r5]
    if (value->flags & CborIteratorFlag_NegativeInteger)
   12a86:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   12a8a:	f013 0f02 	tst.w	r3, #2
   12a8e:	d0ca      	beq.n	12a26 <cbor_internal_read_object+0x172>
        *result = -*result - 1;
   12a90:	43c9      	mvns	r1, r1
   12a92:	43e2      	mvns	r2, r4
   12a94:	4608      	mov	r0, r1
   12a96:	4611      	mov	r1, r2
   12a98:	e9c5 0100 	strd	r0, r1, [r5]
                break;
   12a9c:	e7c3      	b.n	12a26 <cbor_internal_read_object+0x172>
    assert(cbor_value_is_integer(value));
   12a9e:	f7f9 fba3 	bl	c1e8 <hal_debugger_connected>
   12aa2:	b100      	cbz	r0, 12aa6 <cbor_internal_read_object+0x1f2>
   12aa4:	be01      	bkpt	0x0001
   12aa6:	2300      	movs	r3, #0
   12aa8:	461a      	mov	r2, r3
   12aaa:	4619      	mov	r1, r3
   12aac:	4618      	mov	r0, r3
   12aae:	f7fa f84f 	bl	cb50 <__assert_func>
                _cbor_value_decode_int64_internal(value) : value->extra;
   12ab2:	a805      	add	r0, sp, #20
   12ab4:	f01a f95d 	bl	2cd72 <_cbor_value_decode_int64_internal>
   12ab8:	4603      	mov	r3, r0
   12aba:	460c      	mov	r4, r1
   12abc:	e7df      	b.n	12a7e <cbor_internal_read_object+0x1ca>
{ return value->type == CborIntegerType; }
   12abe:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
{ return cbor_value_is_integer(value) && (value->flags & CborIteratorFlag_NegativeInteger) == 0; }
   12ac2:	b933      	cbnz	r3, 12ad2 <cbor_internal_read_object+0x21e>
   12ac4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   12ac8:	f013 0f02 	tst.w	r3, #2
   12acc:	d00e      	beq.n	12aec <cbor_internal_read_object+0x238>
   12ace:	2300      	movs	r3, #0
   12ad0:	e000      	b.n	12ad4 <cbor_internal_read_object+0x220>
   12ad2:	2300      	movs	r3, #0
    assert(cbor_value_is_unsigned_integer(value));
   12ad4:	b163      	cbz	r3, 12af0 <cbor_internal_read_object+0x23c>
    return value->flags & CborIteratorFlag_IntegerValueTooLarge ?
   12ad6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
                _cbor_value_decode_int64_internal(value) : value->extra;
   12ada:	f013 0f01 	tst.w	r3, #1
   12ade:	d111      	bne.n	12b04 <cbor_internal_read_object+0x250>
   12ae0:	f8bd 0020 	ldrh.w	r0, [sp, #32]
   12ae4:	2100      	movs	r1, #0
    *result = _cbor_value_extract_int64_helper(value);
   12ae6:	e9c5 0100 	strd	r0, r1, [r5]
                break;
   12aea:	e79c      	b.n	12a26 <cbor_internal_read_object+0x172>
{ return cbor_value_is_integer(value) && (value->flags & CborIteratorFlag_NegativeInteger) == 0; }
   12aec:	2301      	movs	r3, #1
   12aee:	e7f1      	b.n	12ad4 <cbor_internal_read_object+0x220>
    assert(cbor_value_is_unsigned_integer(value));
   12af0:	f7f9 fb7a 	bl	c1e8 <hal_debugger_connected>
   12af4:	b100      	cbz	r0, 12af8 <cbor_internal_read_object+0x244>
   12af6:	be01      	bkpt	0x0001
   12af8:	2300      	movs	r3, #0
   12afa:	461a      	mov	r2, r3
   12afc:	4619      	mov	r1, r3
   12afe:	4618      	mov	r0, r3
   12b00:	f7fa f826 	bl	cb50 <__assert_func>
                _cbor_value_decode_int64_internal(value) : value->extra;
   12b04:	a805      	add	r0, sp, #20
   12b06:	f01a f934 	bl	2cd72 <_cbor_value_decode_int64_internal>
   12b0a:	e7ec      	b.n	12ae6 <cbor_internal_read_object+0x232>
                size_t len = cursor->len;
   12b0c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   12b0e:	9303      	str	r3, [sp, #12]
{ return value->type == CborByteStringType; }
   12b10:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    assert(cbor_value_is_byte_string(value));
   12b14:	2b40      	cmp	r3, #64	; 0x40
   12b16:	d10a      	bne.n	12b2e <cbor_internal_read_object+0x27a>
    return _cbor_value_copy_string(value, buffer, buflen, next);
   12b18:	2300      	movs	r3, #0
   12b1a:	aa03      	add	r2, sp, #12
   12b1c:	4601      	mov	r1, r0
   12b1e:	a805      	add	r0, sp, #20
   12b20:	f01a fa70 	bl	2d004 <_cbor_value_copy_string>
                err |= cbor_value_copy_byte_string(&cur_value, lptr,
   12b24:	4307      	orrs	r7, r0
                *cursor->addr.bytestring.len = len;
   12b26:	68e3      	ldr	r3, [r4, #12]
   12b28:	9a03      	ldr	r2, [sp, #12]
   12b2a:	601a      	str	r2, [r3, #0]
   12b2c:	e77b      	b.n	12a26 <cbor_internal_read_object+0x172>
    assert(cbor_value_is_byte_string(value));
   12b2e:	f7f9 fb5b 	bl	c1e8 <hal_debugger_connected>
   12b32:	b100      	cbz	r0, 12b36 <cbor_internal_read_object+0x282>
   12b34:	be01      	bkpt	0x0001
   12b36:	2300      	movs	r3, #0
   12b38:	461a      	mov	r2, r3
   12b3a:	4619      	mov	r1, r3
   12b3c:	4618      	mov	r0, r3
   12b3e:	f7fa f807 	bl	cb50 <__assert_func>
                size_t len = cursor->len;
   12b42:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   12b44:	9303      	str	r3, [sp, #12]
{ return value->type == CborTextStringType; }
   12b46:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    assert(cbor_value_is_text_string(value));
   12b4a:	2b60      	cmp	r3, #96	; 0x60
   12b4c:	d107      	bne.n	12b5e <cbor_internal_read_object+0x2aa>
    return _cbor_value_copy_string(value, buffer, buflen, next);
   12b4e:	2300      	movs	r3, #0
   12b50:	aa03      	add	r2, sp, #12
   12b52:	4601      	mov	r1, r0
   12b54:	a805      	add	r0, sp, #20
   12b56:	f01a fa55 	bl	2d004 <_cbor_value_copy_string>
                err |= cbor_value_copy_text_string(&cur_value, lptr,
   12b5a:	4307      	orrs	r7, r0
   12b5c:	e763      	b.n	12a26 <cbor_internal_read_object+0x172>
    assert(cbor_value_is_text_string(value));
   12b5e:	f7f9 fb43 	bl	c1e8 <hal_debugger_connected>
   12b62:	b100      	cbz	r0, 12b66 <cbor_internal_read_object+0x2b2>
   12b64:	be01      	bkpt	0x0001
   12b66:	2300      	movs	r3, #0
   12b68:	461a      	mov	r2, r3
   12b6a:	4619      	mov	r1, r3
   12b6c:	4618      	mov	r0, r3
   12b6e:	f7f9 ffef 	bl	cb50 <__assert_func>
                err |= cbor_read_array(&cur_value, &cursor->addr.array);
   12b72:	f104 0108 	add.w	r1, r4, #8
   12b76:	a805      	add	r0, sp, #20
   12b78:	f7ff fdb2 	bl	126e0 <cbor_read_array>
   12b7c:	4307      	orrs	r7, r0
                continue;
   12b7e:	e755      	b.n	12a2c <cbor_internal_read_object+0x178>
                err |= cbor_internal_read_object(&cur_value, cursor->addr.obj,
   12b80:	2300      	movs	r3, #0
   12b82:	461a      	mov	r2, r3
   12b84:	68a1      	ldr	r1, [r4, #8]
   12b86:	a805      	add	r0, sp, #20
   12b88:	f7ff fe94 	bl	128b4 <cbor_internal_read_object>
   12b8c:	4307      	orrs	r7, r0
                continue;
   12b8e:	e74d      	b.n	12a2c <cbor_internal_read_object+0x178>
                err |= CborErrorIllegalType;
   12b90:	f447 7782 	orr.w	r7, r7, #260	; 0x104
   12b94:	e747      	b.n	12a26 <cbor_internal_read_object+0x172>
{ return value && value->type != CborInvalidType; }
   12b96:	2300      	movs	r3, #0
   12b98:	e74e      	b.n	12a38 <cbor_internal_read_object+0x184>
        err |= cbor_value_leave_container(root_value, &cur_value);
   12b9a:	a905      	add	r1, sp, #20
   12b9c:	4658      	mov	r0, fp
   12b9e:	f01a fa09 	bl	2cfb4 <cbor_value_leave_container>
   12ba2:	4307      	orrs	r7, r0
   12ba4:	e6ed      	b.n	12982 <cbor_internal_read_object+0xce>

00012ba6 <cbor_read_object>:

int
cbor_read_object(struct CborValue *value, const struct cbor_attr_t *attrs)
{
   12ba6:	b508      	push	{r3, lr}
    int st;

    st = cbor_internal_read_object(value, attrs, NULL, 0);
   12ba8:	2300      	movs	r3, #0
   12baa:	461a      	mov	r2, r3
   12bac:	f7ff fe82 	bl	128b4 <cbor_internal_read_object>
    return st;
}
   12bb0:	bd08      	pop	{r3, pc}

00012bb2 <img_mgmt_find_tlvs>:
 * Finds the TLVs in the specified image slot, if any.
 */
static int
img_mgmt_find_tlvs(int slot, size_t *start_off, size_t *end_off,
                   uint16_t magic)
{
   12bb2:	b570      	push	{r4, r5, r6, lr}
   12bb4:	b082      	sub	sp, #8
   12bb6:	460c      	mov	r4, r1
   12bb8:	4616      	mov	r6, r2
   12bba:	461d      	mov	r5, r3
    struct image_tlv_info tlv_info;
    int rc;

    rc = img_mgmt_impl_read(slot, *start_off, &tlv_info, sizeof tlv_info);
   12bbc:	2304      	movs	r3, #4
   12bbe:	eb0d 0203 	add.w	r2, sp, r3
   12bc2:	6809      	ldr	r1, [r1, #0]
   12bc4:	f000 fdd3 	bl	1376e <img_mgmt_impl_read>
    if (rc != 0) {
   12bc8:	b960      	cbnz	r0, 12be4 <img_mgmt_find_tlvs+0x32>
   12bca:	4603      	mov	r3, r0
        /* Read error. */
        return MGMT_ERR_EUNKNOWN;
    }

    if (tlv_info.it_magic != magic) {
   12bcc:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   12bd0:	42aa      	cmp	r2, r5
   12bd2:	d10b      	bne.n	12bec <img_mgmt_find_tlvs+0x3a>
        /* No TLVs. */
        return MGMT_ERR_ENOENT;
    }

    *start_off += sizeof tlv_info;
   12bd4:	6822      	ldr	r2, [r4, #0]
   12bd6:	3204      	adds	r2, #4
   12bd8:	6022      	str	r2, [r4, #0]
    *end_off = *start_off + tlv_info.it_tlv_tot;
   12bda:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   12bde:	440a      	add	r2, r1
   12be0:	6032      	str	r2, [r6, #0]

    return 0;
   12be2:	e000      	b.n	12be6 <img_mgmt_find_tlvs+0x34>
        return MGMT_ERR_EUNKNOWN;
   12be4:	2301      	movs	r3, #1
}
   12be6:	4618      	mov	r0, r3
   12be8:	b002      	add	sp, #8
   12bea:	bd70      	pop	{r4, r5, r6, pc}
        return MGMT_ERR_ENOENT;
   12bec:	2305      	movs	r3, #5
   12bee:	e7fa      	b.n	12be6 <img_mgmt_find_tlvs+0x34>

00012bf0 <img_mgmt_erase>:
/**
 * Command handler: image erase
 */
static int
img_mgmt_erase(struct mgmt_ctxt *ctxt)
{
   12bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12bf2:	4605      	mov	r5, r0
    CborError err;
    int rc;

    if (img_mgmt_slot_in_use(1)) {
   12bf4:	2001      	movs	r0, #1
   12bf6:	f000 fa97 	bl	13128 <img_mgmt_slot_in_use>
   12bfa:	b998      	cbnz	r0, 12c24 <img_mgmt_erase+0x34>
   12bfc:	4604      	mov	r4, r0
        /* No free slot. */
        return MGMT_ERR_EBADSTATE;
    }
    
    rc = img_mgmt_impl_erase_slot();
   12bfe:	f000 fd35 	bl	1366c <img_mgmt_impl_erase_slot>
   12c02:	4607      	mov	r7, r0
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   12c04:	2202      	movs	r2, #2
   12c06:	4909      	ldr	r1, [pc, #36]	; (12c2c <img_mgmt_erase+0x3c>)
   12c08:	4628      	mov	r0, r5
   12c0a:	f019 fe14 	bl	2c836 <cbor_encode_text_string>
   12c0e:	4606      	mov	r6, r0

    err = 0;
    err |= cbor_encode_text_stringz(&ctxt->encoder, "rc");
    err |= cbor_encode_int(&ctxt->encoder, rc);
   12c10:	463a      	mov	r2, r7
   12c12:	17fb      	asrs	r3, r7, #31
   12c14:	4628      	mov	r0, r5
   12c16:	f019 fd8d 	bl	2c734 <cbor_encode_int>

    if (err != 0) {
   12c1a:	ea50 0306 	orrs.w	r3, r0, r6
   12c1e:	d002      	beq.n	12c26 <img_mgmt_erase+0x36>
        return MGMT_ERR_ENOMEM;
   12c20:	2402      	movs	r4, #2
   12c22:	e000      	b.n	12c26 <img_mgmt_erase+0x36>
        return MGMT_ERR_EBADSTATE;
   12c24:	2406      	movs	r4, #6
    }

    return 0;
}
   12c26:	4620      	mov	r0, r4
   12c28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12c2a:	bf00      	nop
   12c2c:	000318e4 	.word	0x000318e4

00012c30 <img_mgmt_upload_good_rsp>:

static int
img_mgmt_upload_good_rsp(struct mgmt_ctxt *ctxt)
{
   12c30:	b538      	push	{r3, r4, r5, lr}
   12c32:	4605      	mov	r5, r0
   12c34:	2202      	movs	r2, #2
   12c36:	490e      	ldr	r1, [pc, #56]	; (12c70 <img_mgmt_upload_good_rsp+0x40>)
   12c38:	f019 fdfd 	bl	2c836 <cbor_encode_text_string>
   12c3c:	4604      	mov	r4, r0
    CborError err = CborNoError;

    err |= cbor_encode_text_stringz(&ctxt->encoder, "rc");
    err |= cbor_encode_int(&ctxt->encoder, MGMT_ERR_EOK);
   12c3e:	2200      	movs	r2, #0
   12c40:	2300      	movs	r3, #0
   12c42:	4628      	mov	r0, r5
   12c44:	f019 fd76 	bl	2c734 <cbor_encode_int>
   12c48:	4304      	orrs	r4, r0
   12c4a:	2203      	movs	r2, #3
   12c4c:	4909      	ldr	r1, [pc, #36]	; (12c74 <img_mgmt_upload_good_rsp+0x44>)
   12c4e:	4628      	mov	r0, r5
   12c50:	f019 fdf1 	bl	2c836 <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&ctxt->encoder, "off");
   12c54:	4304      	orrs	r4, r0
    err |= cbor_encode_int(&ctxt->encoder, g_img_mgmt_state.off);
   12c56:	4b08      	ldr	r3, [pc, #32]	; (12c78 <img_mgmt_upload_good_rsp+0x48>)
   12c58:	685a      	ldr	r2, [r3, #4]
   12c5a:	2300      	movs	r3, #0
   12c5c:	4628      	mov	r0, r5
   12c5e:	f019 fd69 	bl	2c734 <cbor_encode_int>

    if (err != 0) {
   12c62:	ea54 0300 	orrs.w	r3, r4, r0
   12c66:	d101      	bne.n	12c6c <img_mgmt_upload_good_rsp+0x3c>
        return MGMT_ERR_ENOMEM;
    }

    return 0;
   12c68:	2000      	movs	r0, #0
}
   12c6a:	bd38      	pop	{r3, r4, r5, pc}
        return MGMT_ERR_ENOMEM;
   12c6c:	2002      	movs	r0, #2
   12c6e:	e7fc      	b.n	12c6a <img_mgmt_upload_good_rsp+0x3a>
   12c70:	000318e4 	.word	0x000318e4
   12c74:	00031c44 	.word	0x00031c44
   12c78:	20003588 	.word	0x20003588

00012c7c <img_mgmt_read_info>:
{
   12c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
   12c7e:	b08d      	sub	sp, #52	; 0x34
   12c80:	4604      	mov	r4, r0
   12c82:	460d      	mov	r5, r1
   12c84:	4616      	mov	r6, r2
   12c86:	461f      	mov	r7, r3
    rc = img_mgmt_impl_read(image_slot, 0, &hdr, sizeof hdr);
   12c88:	2320      	movs	r3, #32
   12c8a:	aa04      	add	r2, sp, #16
   12c8c:	2100      	movs	r1, #0
   12c8e:	f000 fd6e 	bl	1376e <img_mgmt_impl_read>
    if (rc != 0) {
   12c92:	2800      	cmp	r0, #0
   12c94:	d16d      	bne.n	12d72 <img_mgmt_read_info+0xf6>
    if (ver != NULL) {
   12c96:	b11d      	cbz	r5, 12ca0 <img_mgmt_read_info+0x24>
        memset(ver, 0xff, sizeof(*ver));
   12c98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12c9c:	602b      	str	r3, [r5, #0]
   12c9e:	606b      	str	r3, [r5, #4]
    if (hdr.ih_magic == IMAGE_MAGIC) {
   12ca0:	9b04      	ldr	r3, [sp, #16]
   12ca2:	4a3b      	ldr	r2, [pc, #236]	; (12d90 <img_mgmt_read_info+0x114>)
   12ca4:	4293      	cmp	r3, r2
   12ca6:	d004      	beq.n	12cb2 <img_mgmt_read_info+0x36>
    } else if (hdr.ih_magic == 0xffffffff) {
   12ca8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   12cac:	d025      	beq.n	12cfa <img_mgmt_read_info+0x7e>
        return MGMT_ERR_EUNKNOWN;
   12cae:	2501      	movs	r5, #1
   12cb0:	e060      	b.n	12d74 <img_mgmt_read_info+0xf8>
        if (ver != NULL) {
   12cb2:	b11d      	cbz	r5, 12cbc <img_mgmt_read_info+0x40>
            memcpy(ver, &hdr.ih_ver, sizeof(*ver));
   12cb4:	ab09      	add	r3, sp, #36	; 0x24
   12cb6:	cb03      	ldmia	r3!, {r0, r1}
   12cb8:	6028      	str	r0, [r5, #0]
   12cba:	6069      	str	r1, [r5, #4]
    if (flags != NULL) {
   12cbc:	b10f      	cbz	r7, 12cc2 <img_mgmt_read_info+0x46>
        *flags = hdr.ih_flags;
   12cbe:	9b08      	ldr	r3, [sp, #32]
   12cc0:	603b      	str	r3, [r7, #0]
    data_off = hdr.ih_hdr_size + hdr.ih_img_size;
   12cc2:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   12cc6:	9a07      	ldr	r2, [sp, #28]
   12cc8:	4413      	add	r3, r2
   12cca:	9302      	str	r3, [sp, #8]
    rc = img_mgmt_find_tlvs(image_slot, &data_off, &data_end, IMAGE_TLV_PROT_INFO_MAGIC);
   12ccc:	f646 1308 	movw	r3, #26888	; 0x6908
   12cd0:	aa01      	add	r2, sp, #4
   12cd2:	a902      	add	r1, sp, #8
   12cd4:	4620      	mov	r0, r4
   12cd6:	f7ff ff6c 	bl	12bb2 <img_mgmt_find_tlvs>
    if (!rc) {
   12cda:	b910      	cbnz	r0, 12ce2 <img_mgmt_read_info+0x66>
        data_off = data_end - sizeof(struct image_tlv_info);
   12cdc:	9b01      	ldr	r3, [sp, #4]
   12cde:	3b04      	subs	r3, #4
   12ce0:	9302      	str	r3, [sp, #8]
    rc = img_mgmt_find_tlvs(image_slot, &data_off, &data_end, IMAGE_TLV_INFO_MAGIC);
   12ce2:	f646 1307 	movw	r3, #26887	; 0x6907
   12ce6:	aa01      	add	r2, sp, #4
   12ce8:	a902      	add	r1, sp, #8
   12cea:	4620      	mov	r0, r4
   12cec:	f7ff ff61 	bl	12bb2 <img_mgmt_find_tlvs>
    if (rc != 0) {
   12cf0:	4605      	mov	r5, r0
   12cf2:	2800      	cmp	r0, #0
   12cf4:	d141      	bne.n	12d7a <img_mgmt_read_info+0xfe>
    hash_found = false;
   12cf6:	2700      	movs	r7, #0
   12cf8:	e00f      	b.n	12d1a <img_mgmt_read_info+0x9e>
        return MGMT_ERR_ENOENT;
   12cfa:	2505      	movs	r5, #5
   12cfc:	e03a      	b.n	12d74 <img_mgmt_read_info+0xf8>
        if (tlv.it_type == 0xff && tlv.it_len == 0xffff) {
   12cfe:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   12d02:	f64f 72ff 	movw	r2, #65535	; 0xffff
   12d06:	4291      	cmp	r1, r2
   12d08:	d116      	bne.n	12d38 <img_mgmt_read_info+0xbc>
            return MGMT_ERR_EUNKNOWN;
   12d0a:	2501      	movs	r5, #1
   12d0c:	e032      	b.n	12d74 <img_mgmt_read_info+0xf8>
            data_off += sizeof tlv + tlv.it_len;
   12d0e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   12d12:	9a02      	ldr	r2, [sp, #8]
   12d14:	4413      	add	r3, r2
   12d16:	3304      	adds	r3, #4
   12d18:	9302      	str	r3, [sp, #8]
    while (data_off + sizeof tlv <= data_end) {
   12d1a:	9902      	ldr	r1, [sp, #8]
   12d1c:	1d0a      	adds	r2, r1, #4
   12d1e:	9b01      	ldr	r3, [sp, #4]
   12d20:	429a      	cmp	r2, r3
   12d22:	d823      	bhi.n	12d6c <img_mgmt_read_info+0xf0>
        rc = img_mgmt_impl_read(image_slot, data_off, &tlv, sizeof tlv);
   12d24:	2304      	movs	r3, #4
   12d26:	aa03      	add	r2, sp, #12
   12d28:	4620      	mov	r0, r4
   12d2a:	f000 fd20 	bl	1376e <img_mgmt_impl_read>
        if (rc != 0) {
   12d2e:	bb30      	cbnz	r0, 12d7e <img_mgmt_read_info+0x102>
        if (tlv.it_type == 0xff && tlv.it_len == 0xffff) {
   12d30:	f89d 300c 	ldrb.w	r3, [sp, #12]
   12d34:	2bff      	cmp	r3, #255	; 0xff
   12d36:	d0e2      	beq.n	12cfe <img_mgmt_read_info+0x82>
        if (tlv.it_type != IMAGE_TLV_SHA256 || tlv.it_len != IMAGE_HASH_LEN) {
   12d38:	2b10      	cmp	r3, #16
   12d3a:	d1e8      	bne.n	12d0e <img_mgmt_read_info+0x92>
   12d3c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   12d40:	2b20      	cmp	r3, #32
   12d42:	d1e4      	bne.n	12d0e <img_mgmt_read_info+0x92>
        if (hash_found) {
   12d44:	b9ef      	cbnz	r7, 12d82 <img_mgmt_read_info+0x106>
        data_off += sizeof tlv;
   12d46:	9902      	ldr	r1, [sp, #8]
   12d48:	3104      	adds	r1, #4
   12d4a:	9102      	str	r1, [sp, #8]
        if (hash != NULL) {
   12d4c:	b166      	cbz	r6, 12d68 <img_mgmt_read_info+0xec>
            if (data_off + IMAGE_HASH_LEN > data_end) {
   12d4e:	f101 0320 	add.w	r3, r1, #32
   12d52:	9a01      	ldr	r2, [sp, #4]
   12d54:	4293      	cmp	r3, r2
   12d56:	d816      	bhi.n	12d86 <img_mgmt_read_info+0x10a>
            rc = img_mgmt_impl_read(image_slot, data_off, hash,
   12d58:	2320      	movs	r3, #32
   12d5a:	4632      	mov	r2, r6
   12d5c:	4620      	mov	r0, r4
   12d5e:	f000 fd06 	bl	1376e <img_mgmt_impl_read>
            if (rc != 0) {
   12d62:	b990      	cbnz	r0, 12d8a <img_mgmt_read_info+0x10e>
        hash_found = true;
   12d64:	2701      	movs	r7, #1
   12d66:	e7d8      	b.n	12d1a <img_mgmt_read_info+0x9e>
   12d68:	2701      	movs	r7, #1
   12d6a:	e7d6      	b.n	12d1a <img_mgmt_read_info+0x9e>
    if (!hash_found) {
   12d6c:	b917      	cbnz	r7, 12d74 <img_mgmt_read_info+0xf8>
        return MGMT_ERR_EUNKNOWN;
   12d6e:	2501      	movs	r5, #1
   12d70:	e000      	b.n	12d74 <img_mgmt_read_info+0xf8>
        return MGMT_ERR_EUNKNOWN;
   12d72:	2501      	movs	r5, #1
}
   12d74:	4628      	mov	r0, r5
   12d76:	b00d      	add	sp, #52	; 0x34
   12d78:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return MGMT_ERR_EUNKNOWN;
   12d7a:	2501      	movs	r5, #1
   12d7c:	e7fa      	b.n	12d74 <img_mgmt_read_info+0xf8>
            return MGMT_ERR_EUNKNOWN;
   12d7e:	2501      	movs	r5, #1
   12d80:	e7f8      	b.n	12d74 <img_mgmt_read_info+0xf8>
            return MGMT_ERR_EUNKNOWN;
   12d82:	2501      	movs	r5, #1
   12d84:	e7f6      	b.n	12d74 <img_mgmt_read_info+0xf8>
                return MGMT_ERR_EUNKNOWN;
   12d86:	2501      	movs	r5, #1
   12d88:	e7f4      	b.n	12d74 <img_mgmt_read_info+0xf8>
                return MGMT_ERR_EUNKNOWN;
   12d8a:	2501      	movs	r5, #1
   12d8c:	e7f2      	b.n	12d74 <img_mgmt_read_info+0xf8>
   12d8e:	bf00      	nop
   12d90:	96f3b83d 	.word	0x96f3b83d

00012d94 <img_mgmt_upload_log>:
 *
 * @return                      0 on success; nonzero on failure.
 */
static int
img_mgmt_upload_log(bool is_first, bool is_last, int status)
{
   12d94:	b510      	push	{r4, lr}
   12d96:	b088      	sub	sp, #32
   12d98:	4614      	mov	r4, r2
    uint8_t hash[IMAGE_HASH_LEN];
    const uint8_t *hashp;
    int rc;

    if (is_first) {
   12d9a:	b970      	cbnz	r0, 12dba <img_mgmt_upload_log+0x26>
        return img_mgmt_impl_log_upload_start(status);
    }

    if (is_last || status != 0) {
   12d9c:	b901      	cbnz	r1, 12da0 <img_mgmt_upload_log+0xc>
   12d9e:	b192      	cbz	r2, 12dc6 <img_mgmt_upload_log+0x32>
        /* Log the image hash if we know it. */
        rc = img_mgmt_read_info(1, NULL, hash, NULL);
   12da0:	2300      	movs	r3, #0
   12da2:	466a      	mov	r2, sp
   12da4:	4619      	mov	r1, r3
   12da6:	2001      	movs	r0, #1
   12da8:	f7ff ff68 	bl	12c7c <img_mgmt_read_info>
        if (rc != 0) {
   12dac:	b148      	cbz	r0, 12dc2 <img_mgmt_upload_log+0x2e>
            hashp = NULL;
   12dae:	2100      	movs	r1, #0
        } else {
            hashp = hash;
        }

        return img_mgmt_impl_log_upload_done(status, hashp);
   12db0:	4620      	mov	r0, r4
   12db2:	f000 fd63 	bl	1387c <img_mgmt_impl_log_upload_done>
    }

    /* Nothing to log. */
    return 0;
}
   12db6:	b008      	add	sp, #32
   12db8:	bd10      	pop	{r4, pc}
        return img_mgmt_impl_log_upload_start(status);
   12dba:	4610      	mov	r0, r2
   12dbc:	f000 fd54 	bl	13868 <img_mgmt_impl_log_upload_start>
   12dc0:	e7f9      	b.n	12db6 <img_mgmt_upload_log+0x22>
            hashp = hash;
   12dc2:	4669      	mov	r1, sp
   12dc4:	e7f4      	b.n	12db0 <img_mgmt_upload_log+0x1c>
    return 0;
   12dc6:	4610      	mov	r0, r2
   12dc8:	e7f5      	b.n	12db6 <img_mgmt_upload_log+0x22>

00012dca <img_mgmt_find_by_hash>:
{
   12dca:	b570      	push	{r4, r5, r6, lr}
   12dcc:	b088      	sub	sp, #32
   12dce:	4606      	mov	r6, r0
   12dd0:	460d      	mov	r5, r1
    for (i = 0; i < 2; i++) {
   12dd2:	2400      	movs	r4, #0
   12dd4:	e000      	b.n	12dd8 <img_mgmt_find_by_hash+0xe>
   12dd6:	3401      	adds	r4, #1
   12dd8:	2c01      	cmp	r4, #1
   12dda:	dc0f      	bgt.n	12dfc <img_mgmt_find_by_hash+0x32>
        if (img_mgmt_read_info(i, ver, hash, NULL) != 0) {
   12ddc:	2300      	movs	r3, #0
   12dde:	466a      	mov	r2, sp
   12de0:	4629      	mov	r1, r5
   12de2:	4620      	mov	r0, r4
   12de4:	f7ff ff4a 	bl	12c7c <img_mgmt_read_info>
   12de8:	2800      	cmp	r0, #0
   12dea:	d1f4      	bne.n	12dd6 <img_mgmt_find_by_hash+0xc>
        if (!memcmp(hash, find, IMAGE_HASH_LEN)) {
   12dec:	2220      	movs	r2, #32
   12dee:	4631      	mov	r1, r6
   12df0:	4668      	mov	r0, sp
   12df2:	f7fb fdb1 	bl	e958 <memcmp>
   12df6:	2800      	cmp	r0, #0
   12df8:	d1ed      	bne.n	12dd6 <img_mgmt_find_by_hash+0xc>
   12dfa:	e001      	b.n	12e00 <img_mgmt_find_by_hash+0x36>
    return -1;
   12dfc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
   12e00:	4620      	mov	r0, r4
   12e02:	b008      	add	sp, #32
   12e04:	bd70      	pop	{r4, r5, r6, pc}
	...

00012e08 <img_mgmt_dfu_stopped>:
    return img_mgmt_upload_good_rsp(ctxt);
}

void
img_mgmt_dfu_stopped(void)
{
   12e08:	b508      	push	{r3, lr}
    if (img_mgmt_dfu_callbacks_fn && img_mgmt_dfu_callbacks_fn->dfu_stopped_cb) {
   12e0a:	4b03      	ldr	r3, [pc, #12]	; (12e18 <img_mgmt_dfu_stopped+0x10>)
   12e0c:	681b      	ldr	r3, [r3, #0]
   12e0e:	b113      	cbz	r3, 12e16 <img_mgmt_dfu_stopped+0xe>
   12e10:	685b      	ldr	r3, [r3, #4]
   12e12:	b103      	cbz	r3, 12e16 <img_mgmt_dfu_stopped+0xe>
        img_mgmt_dfu_callbacks_fn->dfu_stopped_cb();
   12e14:	4798      	blx	r3
    }
}
   12e16:	bd08      	pop	{r3, pc}
   12e18:	200035b8 	.word	0x200035b8

00012e1c <img_mgmt_dfu_started>:

void
img_mgmt_dfu_started(void)
{
   12e1c:	b508      	push	{r3, lr}
    if (img_mgmt_dfu_callbacks_fn && img_mgmt_dfu_callbacks_fn->dfu_started_cb) {
   12e1e:	4b03      	ldr	r3, [pc, #12]	; (12e2c <img_mgmt_dfu_started+0x10>)
   12e20:	681b      	ldr	r3, [r3, #0]
   12e22:	b113      	cbz	r3, 12e2a <img_mgmt_dfu_started+0xe>
   12e24:	681b      	ldr	r3, [r3, #0]
   12e26:	b103      	cbz	r3, 12e2a <img_mgmt_dfu_started+0xe>
        img_mgmt_dfu_callbacks_fn->dfu_started_cb();
   12e28:	4798      	blx	r3
    }
}
   12e2a:	bd08      	pop	{r3, pc}
   12e2c:	200035b8 	.word	0x200035b8

00012e30 <img_mgmt_dfu_pending>:

void
img_mgmt_dfu_pending(void)
{
   12e30:	b508      	push	{r3, lr}
    if (img_mgmt_dfu_callbacks_fn && img_mgmt_dfu_callbacks_fn->dfu_pending_cb) {
   12e32:	4b03      	ldr	r3, [pc, #12]	; (12e40 <img_mgmt_dfu_pending+0x10>)
   12e34:	681b      	ldr	r3, [r3, #0]
   12e36:	b113      	cbz	r3, 12e3e <img_mgmt_dfu_pending+0xe>
   12e38:	689b      	ldr	r3, [r3, #8]
   12e3a:	b103      	cbz	r3, 12e3e <img_mgmt_dfu_pending+0xe>
        img_mgmt_dfu_callbacks_fn->dfu_pending_cb();
   12e3c:	4798      	blx	r3
    }
}
   12e3e:	bd08      	pop	{r3, pc}
   12e40:	200035b8 	.word	0x200035b8

00012e44 <img_mgmt_upload>:
{
   12e44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12e48:	f5ad 7d63 	sub.w	sp, sp, #908	; 0x38c
   12e4c:	4605      	mov	r5, r0
    struct img_mgmt_upload_req req = {
   12e4e:	ac50      	add	r4, sp, #320	; 0x140
   12e50:	f44f 7210 	mov.w	r2, #576	; 0x240
   12e54:	2100      	movs	r1, #0
   12e56:	4620      	mov	r0, r4
   12e58:	f7fb fdca 	bl	e9f0 <memset>
   12e5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12e60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12e64:	e9c4 2300 	strd	r2, r3, [r4]
   12e68:	e9c4 2302 	strd	r2, r3, [r4, #8]
    const struct cbor_attr_t off_attr[] = {
   12e6c:	f44f 7290 	mov.w	r2, #288	; 0x120
   12e70:	2100      	movs	r1, #0
   12e72:	a808      	add	r0, sp, #32
   12e74:	f7fb fdbc 	bl	e9f0 <memset>
   12e78:	4b6d      	ldr	r3, [pc, #436]	; (13030 <img_mgmt_upload+0x1ec>)
   12e7a:	9308      	str	r3, [sp, #32]
   12e7c:	2303      	movs	r3, #3
   12e7e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   12e82:	aa56      	add	r2, sp, #344	; 0x158
   12e84:	920a      	str	r2, [sp, #40]	; 0x28
   12e86:	aa54      	add	r2, sp, #336	; 0x150
   12e88:	920b      	str	r2, [sp, #44]	; 0x2c
   12e8a:	f44f 7200 	mov.w	r2, #512	; 0x200
   12e8e:	9212      	str	r2, [sp, #72]	; 0x48
   12e90:	4a68      	ldr	r2, [pc, #416]	; (13034 <img_mgmt_upload+0x1f0>)
   12e92:	9214      	str	r2, [sp, #80]	; 0x50
   12e94:	2102      	movs	r1, #2
   12e96:	f88d 1054 	strb.w	r1, [sp, #84]	; 0x54
   12e9a:	aa52      	add	r2, sp, #328	; 0x148
   12e9c:	9216      	str	r2, [sp, #88]	; 0x58
   12e9e:	2201      	movs	r2, #1
   12ea0:	f88d 207c 	strb.w	r2, [sp, #124]	; 0x7c
   12ea4:	4864      	ldr	r0, [pc, #400]	; (13038 <img_mgmt_upload+0x1f4>)
   12ea6:	9020      	str	r0, [sp, #128]	; 0x80
   12ea8:	f88d 1084 	strb.w	r1, [sp, #132]	; 0x84
   12eac:	9422      	str	r4, [sp, #136]	; 0x88
   12eae:	f88d 20ac 	strb.w	r2, [sp, #172]	; 0xac
   12eb2:	4a62      	ldr	r2, [pc, #392]	; (1303c <img_mgmt_upload+0x1f8>)
   12eb4:	922c      	str	r2, [sp, #176]	; 0xb0
   12eb6:	f88d 30b4 	strb.w	r3, [sp, #180]	; 0xb4
   12eba:	abd6      	add	r3, sp, #856	; 0x358
   12ebc:	932e      	str	r3, [sp, #184]	; 0xb8
   12ebe:	ab55      	add	r3, sp, #340	; 0x154
   12ec0:	932f      	str	r3, [sp, #188]	; 0xbc
   12ec2:	2320      	movs	r3, #32
   12ec4:	9336      	str	r3, [sp, #216]	; 0xd8
   12ec6:	4b5e      	ldr	r3, [pc, #376]	; (13040 <img_mgmt_upload+0x1fc>)
   12ec8:	9338      	str	r3, [sp, #224]	; 0xe0
   12eca:	2305      	movs	r3, #5
   12ecc:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
   12ed0:	abde      	add	r3, sp, #888	; 0x378
   12ed2:	933a      	str	r3, [sp, #232]	; 0xe8
    const char *errstr = NULL;
   12ed4:	2300      	movs	r3, #0
   12ed6:	9307      	str	r3, [sp, #28]
    rc = cbor_read_object(&ctxt->it, off_attr);
   12ed8:	a908      	add	r1, sp, #32
   12eda:	f105 001c 	add.w	r0, r5, #28
   12ede:	f7ff fe62 	bl	12ba6 <cbor_read_object>
    if (rc != 0) {
   12ee2:	2800      	cmp	r0, #0
   12ee4:	f040 809d 	bne.w	13022 <img_mgmt_upload+0x1de>
    rc = img_mgmt_impl_upload_inspect(&req, &action, &errstr);
   12ee8:	aa07      	add	r2, sp, #28
   12eea:	4669      	mov	r1, sp
   12eec:	a850      	add	r0, sp, #320	; 0x140
   12eee:	f000 faeb 	bl	134c8 <img_mgmt_impl_upload_inspect>
    if (rc != 0) {
   12ef2:	4604      	mov	r4, r0
   12ef4:	2800      	cmp	r0, #0
   12ef6:	d12d      	bne.n	12f54 <img_mgmt_upload+0x110>
    if (!action.proceed) {
   12ef8:	f89d 6010 	ldrb.w	r6, [sp, #16]
   12efc:	2e00      	cmp	r6, #0
   12efe:	d02c      	beq.n	12f5a <img_mgmt_upload+0x116>
    if (img_mgmt_upload_cb != NULL) {
   12f00:	4b50      	ldr	r3, [pc, #320]	; (13044 <img_mgmt_upload+0x200>)
   12f02:	681b      	ldr	r3, [r3, #0]
   12f04:	2b00      	cmp	r3, #0
   12f06:	d02d      	beq.n	12f64 <img_mgmt_upload+0x120>
        rc = img_mgmt_upload_cb(req.off, action.size, img_mgmt_upload_arg);
   12f08:	4a4f      	ldr	r2, [pc, #316]	; (13048 <img_mgmt_upload+0x204>)
   12f0a:	6812      	ldr	r2, [r2, #0]
   12f0c:	9900      	ldr	r1, [sp, #0]
   12f0e:	9850      	ldr	r0, [sp, #320]	; 0x140
   12f10:	4798      	blx	r3
        if (rc != 0) {
   12f12:	4604      	mov	r4, r0
   12f14:	b330      	cbz	r0, 12f64 <img_mgmt_upload+0x120>
            errstr = img_mgmt_err_str_app_reject;
   12f16:	2300      	movs	r3, #0
   12f18:	9307      	str	r3, [sp, #28]
    img_mgmt_upload_log(req.off == 0, g_img_mgmt_state.off == g_img_mgmt_state.size, rc);
   12f1a:	9850      	ldr	r0, [sp, #320]	; 0x140
   12f1c:	9a51      	ldr	r2, [sp, #324]	; 0x144
   12f1e:	4b4b      	ldr	r3, [pc, #300]	; (1304c <img_mgmt_upload+0x208>)
   12f20:	6859      	ldr	r1, [r3, #4]
   12f22:	689b      	ldr	r3, [r3, #8]
   12f24:	4302      	orrs	r2, r0
   12f26:	bf0c      	ite	eq
   12f28:	2001      	moveq	r0, #1
   12f2a:	2000      	movne	r0, #0
   12f2c:	4622      	mov	r2, r4
   12f2e:	4299      	cmp	r1, r3
   12f30:	bf14      	ite	ne
   12f32:	2100      	movne	r1, #0
   12f34:	2101      	moveq	r1, #1
   12f36:	f7ff ff2d 	bl	12d94 <img_mgmt_upload_log>
    mgmt_evt(MGMT_EVT_OP_CMD_STATUS, MGMT_GROUP_ID_IMAGE, IMG_MGMT_ID_UPLOAD,
   12f3a:	abe1      	add	r3, sp, #900	; 0x384
   12f3c:	2201      	movs	r2, #1
   12f3e:	4611      	mov	r1, r2
   12f40:	2002      	movs	r0, #2
   12f42:	f001 f895 	bl	14070 <mgmt_evt>
    if (rc != 0) {
   12f46:	2c00      	cmp	r4, #0
   12f48:	d168      	bne.n	1301c <img_mgmt_upload+0x1d8>
    return img_mgmt_upload_good_rsp(ctxt);
   12f4a:	4628      	mov	r0, r5
   12f4c:	f7ff fe70 	bl	12c30 <img_mgmt_upload_good_rsp>
   12f50:	4604      	mov	r4, r0
   12f52:	e067      	b.n	13024 <img_mgmt_upload+0x1e0>
        img_mgmt_dfu_stopped();
   12f54:	f7ff ff58 	bl	12e08 <img_mgmt_dfu_stopped>
        return rc;
   12f58:	e064      	b.n	13024 <img_mgmt_upload+0x1e0>
        return img_mgmt_upload_good_rsp(ctxt);
   12f5a:	4628      	mov	r0, r5
   12f5c:	f7ff fe68 	bl	12c30 <img_mgmt_upload_good_rsp>
   12f60:	4604      	mov	r4, r0
   12f62:	e05f      	b.n	13024 <img_mgmt_upload+0x1e0>
    g_img_mgmt_state.area_id = action.area_id;
   12f64:	9a03      	ldr	r2, [sp, #12]
   12f66:	4b39      	ldr	r3, [pc, #228]	; (1304c <img_mgmt_upload+0x208>)
   12f68:	601a      	str	r2, [r3, #0]
    g_img_mgmt_state.size = action.size;
   12f6a:	9a00      	ldr	r2, [sp, #0]
   12f6c:	609a      	str	r2, [r3, #8]
    if (req.off == 0) {
   12f6e:	ab50      	add	r3, sp, #320	; 0x140
   12f70:	e9d3 2300 	ldrd	r2, r3, [r3]
   12f74:	4313      	orrs	r3, r2
   12f76:	d015      	beq.n	12fa4 <img_mgmt_upload+0x160>
    if (req.data_len != 0) {
   12f78:	9b54      	ldr	r3, [sp, #336]	; 0x150
   12f7a:	2b00      	cmp	r3, #0
   12f7c:	d0cd      	beq.n	12f1a <img_mgmt_upload+0xd6>
        if (g_img_mgmt_state.off + req.data_len == g_img_mgmt_state.size) {
   12f7e:	4a33      	ldr	r2, [pc, #204]	; (1304c <img_mgmt_upload+0x208>)
   12f80:	6851      	ldr	r1, [r2, #4]
   12f82:	440b      	add	r3, r1
   12f84:	6892      	ldr	r2, [r2, #8]
   12f86:	4293      	cmp	r3, r2
   12f88:	d000      	beq.n	12f8c <img_mgmt_upload+0x148>
    bool last = false;
   12f8a:	2600      	movs	r6, #0
        rc = img_mgmt_impl_write_image_data(req.off, req.img_data, action.write_bytes, last);
   12f8c:	4633      	mov	r3, r6
   12f8e:	9a02      	ldr	r2, [sp, #8]
   12f90:	a956      	add	r1, sp, #344	; 0x158
   12f92:	9850      	ldr	r0, [sp, #320]	; 0x140
   12f94:	f000 fc06 	bl	137a4 <img_mgmt_impl_write_image_data>
        if (rc != 0) {
   12f98:	4604      	mov	r4, r0
   12f9a:	b370      	cbz	r0, 12ffa <img_mgmt_upload+0x1b6>
            errstr = img_mgmt_err_str_flash_write_failed;
   12f9c:	2300      	movs	r3, #0
   12f9e:	9307      	str	r3, [sp, #28]
            rc = MGMT_ERR_EUNKNOWN;
   12fa0:	2401      	movs	r4, #1
            goto end;
   12fa2:	e7ba      	b.n	12f1a <img_mgmt_upload+0xd6>
        g_img_mgmt_state.off = 0;
   12fa4:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 1304c <img_mgmt_upload+0x208>
   12fa8:	f04f 0900 	mov.w	r9, #0
   12fac:	f8c8 9004 	str.w	r9, [r8, #4]
        img_mgmt_dfu_started();
   12fb0:	f7ff ff34 	bl	12e1c <img_mgmt_dfu_started>
        cmd_status_arg.status = IMG_MGMT_ID_UPLOAD_STATUS_START;
   12fb4:	f8cd 9384 	str.w	r9, [sp, #900]	; 0x384
        g_img_mgmt_state.data_sha_len = req.data_sha_len;
   12fb8:	9f55      	ldr	r7, [sp, #340]	; 0x154
   12fba:	f888 700c 	strb.w	r7, [r8, #12]
        memcpy(g_img_mgmt_state.data_sha, req.data_sha, req.data_sha_len);
   12fbe:	463a      	mov	r2, r7
   12fc0:	a9d6      	add	r1, sp, #856	; 0x358
   12fc2:	f108 000d 	add.w	r0, r8, #13
   12fc6:	f7fb fceb 	bl	e9a0 <memcpy>
        memset(&g_img_mgmt_state.data_sha[req.data_sha_len], 0,
   12fca:	f107 0008 	add.w	r0, r7, #8
   12fce:	4440      	add	r0, r8
   12fd0:	f1c7 0220 	rsb	r2, r7, #32
   12fd4:	4649      	mov	r1, r9
   12fd6:	3005      	adds	r0, #5
   12fd8:	f7fb fd0a 	bl	e9f0 <memset>
        if (action.erase) {
   12fdc:	f89d 3011 	ldrb.w	r3, [sp, #17]
   12fe0:	2b00      	cmp	r3, #0
   12fe2:	d0c9      	beq.n	12f78 <img_mgmt_upload+0x134>
            rc = img_mgmt_impl_erase_image_data(0, req.size);
   12fe4:	9952      	ldr	r1, [sp, #328]	; 0x148
   12fe6:	4648      	mov	r0, r9
   12fe8:	f000 fbf5 	bl	137d6 <img_mgmt_impl_erase_image_data>
            if (rc != 0) {
   12fec:	4604      	mov	r4, r0
   12fee:	2800      	cmp	r0, #0
   12ff0:	d0c2      	beq.n	12f78 <img_mgmt_upload+0x134>
                errstr = img_mgmt_err_str_flash_erase_failed;
   12ff2:	f8cd 901c 	str.w	r9, [sp, #28]
                rc = MGMT_ERR_EUNKNOWN;
   12ff6:	2401      	movs	r4, #1
                goto end;
   12ff8:	e78f      	b.n	12f1a <img_mgmt_upload+0xd6>
            g_img_mgmt_state.off += action.write_bytes;
   12ffa:	9b02      	ldr	r3, [sp, #8]
   12ffc:	4a13      	ldr	r2, [pc, #76]	; (1304c <img_mgmt_upload+0x208>)
   12ffe:	6851      	ldr	r1, [r2, #4]
   13000:	440b      	add	r3, r1
   13002:	6053      	str	r3, [r2, #4]
            if (g_img_mgmt_state.off == g_img_mgmt_state.size) {
   13004:	6892      	ldr	r2, [r2, #8]
   13006:	4293      	cmp	r3, r2
   13008:	d187      	bne.n	12f1a <img_mgmt_upload+0xd6>
                img_mgmt_dfu_pending();
   1300a:	f7ff ff11 	bl	12e30 <img_mgmt_dfu_pending>
                cmd_status_arg.status = IMG_MGMT_ID_UPLOAD_STATUS_ONGOING;
   1300e:	2301      	movs	r3, #1
   13010:	93e1      	str	r3, [sp, #900]	; 0x384
                g_img_mgmt_state.area_id = -1;
   13012:	4b0e      	ldr	r3, [pc, #56]	; (1304c <img_mgmt_upload+0x208>)
   13014:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   13018:	601a      	str	r2, [r3, #0]
   1301a:	e77e      	b.n	12f1a <img_mgmt_upload+0xd6>
        img_mgmt_dfu_stopped();
   1301c:	f7ff fef4 	bl	12e08 <img_mgmt_dfu_stopped>
        return img_mgmt_error_rsp(ctxt, rc, errstr);
   13020:	e000      	b.n	13024 <img_mgmt_upload+0x1e0>
        return MGMT_ERR_EINVAL;
   13022:	2403      	movs	r4, #3
}
   13024:	4620      	mov	r0, r4
   13026:	f50d 7d63 	add.w	sp, sp, #908	; 0x38c
   1302a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1302e:	bf00      	nop
   13030:	00031c2c 	.word	0x00031c2c
   13034:	00031c34 	.word	0x00031c34
   13038:	00031c44 	.word	0x00031c44
   1303c:	00031c38 	.word	0x00031c38
   13040:	00031c3c 	.word	0x00031c3c
   13044:	20001c6c 	.word	0x20001c6c
   13048:	20001c68 	.word	0x20001c68
   1304c:	20003588 	.word	0x20003588

00013050 <img_mgmt_dfu_confirmed>:

void
img_mgmt_dfu_confirmed(void)
{
   13050:	b508      	push	{r3, lr}
    if (img_mgmt_dfu_callbacks_fn && img_mgmt_dfu_callbacks_fn->dfu_confirmed_cb) {
   13052:	4b03      	ldr	r3, [pc, #12]	; (13060 <img_mgmt_dfu_confirmed+0x10>)
   13054:	681b      	ldr	r3, [r3, #0]
   13056:	b113      	cbz	r3, 1305e <img_mgmt_dfu_confirmed+0xe>
   13058:	68db      	ldr	r3, [r3, #12]
   1305a:	b103      	cbz	r3, 1305e <img_mgmt_dfu_confirmed+0xe>
        img_mgmt_dfu_callbacks_fn->dfu_confirmed_cb();
   1305c:	4798      	blx	r3
    }
}
   1305e:	bd08      	pop	{r3, pc}
   13060:	200035b8 	.word	0x200035b8

00013064 <img_mgmt_my_version>:
}


int
img_mgmt_my_version(struct image_version *ver)
{
   13064:	b508      	push	{r3, lr}
    return img_mgmt_read_info(IMG_MGMT_BOOT_CURR_SLOT, ver, NULL, NULL);
   13066:	2300      	movs	r3, #0
   13068:	461a      	mov	r2, r3
   1306a:	4601      	mov	r1, r0
   1306c:	4802      	ldr	r0, [pc, #8]	; (13078 <img_mgmt_my_version+0x14>)
   1306e:	6800      	ldr	r0, [r0, #0]
   13070:	f7ff fe04 	bl	12c7c <img_mgmt_read_info>
}
   13074:	bd08      	pop	{r3, pc}
   13076:	bf00      	nop
   13078:	200043e0 	.word	0x200043e0

0001307c <img_mgmt_register_group>:

void
img_mgmt_register_group(void)
{
   1307c:	b508      	push	{r3, lr}
    mgmt_register_group(&img_mgmt_group);
   1307e:	4802      	ldr	r0, [pc, #8]	; (13088 <img_mgmt_register_group+0xc>)
   13080:	f000 ff92 	bl	13fa8 <mgmt_register_group>
}
   13084:	bd08      	pop	{r3, pc}
   13086:	bf00      	nop
   13088:	2000029c 	.word	0x2000029c

0001308c <img_mgmt_state_flags>:
/**
 * Collects information about the specified image slot.
 */
uint8_t
img_mgmt_state_flags(int query_slot)
{
   1308c:	b510      	push	{r4, lr}
    uint8_t flags;
    int swap_type;

    assert(query_slot == 0 || query_slot == 1);
   1308e:	2801      	cmp	r0, #1
   13090:	d808      	bhi.n	130a4 <img_mgmt_state_flags+0x18>
   13092:	4604      	mov	r4, r0
    flags = 0;

    /* Determine if this is is pending or confirmed (only applicable for
     * unified images and loaders.
     */
    swap_type = img_mgmt_impl_swap_type();
   13094:	f000 fbb6 	bl	13804 <img_mgmt_impl_swap_type>
    switch (swap_type) {
   13098:	2803      	cmp	r0, #3
   1309a:	d822      	bhi.n	130e2 <img_mgmt_state_flags+0x56>
   1309c:	e8df f000 	tbb	[pc, r0]
   130a0:	1c17120c 	.word	0x1c17120c
    assert(query_slot == 0 || query_slot == 1);
   130a4:	f7f9 f8a0 	bl	c1e8 <hal_debugger_connected>
   130a8:	b100      	cbz	r0, 130ac <img_mgmt_state_flags+0x20>
   130aa:	be01      	bkpt	0x0001
   130ac:	2300      	movs	r3, #0
   130ae:	461a      	mov	r2, r3
   130b0:	4619      	mov	r1, r3
   130b2:	4618      	mov	r0, r3
   130b4:	f7f9 fd4c 	bl	cb50 <__assert_func>
    case IMG_MGMT_SWAP_TYPE_NONE:
        if (query_slot == 0) {
   130b8:	b1ac      	cbz	r4, 130e6 <img_mgmt_state_flags+0x5a>
    flags = 0;
   130ba:	2000      	movs	r0, #0
        break;
    }

    /* Slot 0 is always active. */
    /* XXX: The slot 0 assumption only holds when running from flash. */
    if (query_slot == 0) {
   130bc:	b90c      	cbnz	r4, 130c2 <img_mgmt_state_flags+0x36>
        flags |= IMG_MGMT_STATE_F_ACTIVE;
   130be:	f040 0004 	orr.w	r0, r0, #4
    }

    return flags;
}
   130c2:	bd10      	pop	{r4, pc}
        if (query_slot == 0) {
   130c4:	b18c      	cbz	r4, 130ea <img_mgmt_state_flags+0x5e>
        } else if (query_slot == 1) {
   130c6:	2c01      	cmp	r4, #1
   130c8:	d011      	beq.n	130ee <img_mgmt_state_flags+0x62>
    flags = 0;
   130ca:	2000      	movs	r0, #0
   130cc:	e7f6      	b.n	130bc <img_mgmt_state_flags+0x30>
        if (query_slot == 0) {
   130ce:	b184      	cbz	r4, 130f2 <img_mgmt_state_flags+0x66>
        } else if (query_slot == 1) {
   130d0:	2c01      	cmp	r4, #1
   130d2:	d010      	beq.n	130f6 <img_mgmt_state_flags+0x6a>
    flags = 0;
   130d4:	2000      	movs	r0, #0
   130d6:	e7f1      	b.n	130bc <img_mgmt_state_flags+0x30>
        if (query_slot == 0) {
   130d8:	b17c      	cbz	r4, 130fa <img_mgmt_state_flags+0x6e>
        } else if (query_slot == 1) {
   130da:	2c01      	cmp	r4, #1
   130dc:	d00f      	beq.n	130fe <img_mgmt_state_flags+0x72>
    flags = 0;
   130de:	2000      	movs	r0, #0
   130e0:	e7ec      	b.n	130bc <img_mgmt_state_flags+0x30>
   130e2:	2000      	movs	r0, #0
   130e4:	e7ea      	b.n	130bc <img_mgmt_state_flags+0x30>
            flags |= IMG_MGMT_STATE_F_ACTIVE;
   130e6:	2006      	movs	r0, #6
   130e8:	e7e8      	b.n	130bc <img_mgmt_state_flags+0x30>
            flags |= IMG_MGMT_STATE_F_CONFIRMED;
   130ea:	2002      	movs	r0, #2
   130ec:	e7e6      	b.n	130bc <img_mgmt_state_flags+0x30>
            flags |= IMG_MGMT_STATE_F_PENDING;
   130ee:	2001      	movs	r0, #1
   130f0:	e7e4      	b.n	130bc <img_mgmt_state_flags+0x30>
            flags |= IMG_MGMT_STATE_F_CONFIRMED;
   130f2:	2002      	movs	r0, #2
   130f4:	e7e2      	b.n	130bc <img_mgmt_state_flags+0x30>
            flags |= IMG_MGMT_STATE_F_PENDING | IMG_MGMT_STATE_F_PERMANENT;
   130f6:	2009      	movs	r0, #9
   130f8:	e7e0      	b.n	130bc <img_mgmt_state_flags+0x30>
            flags |= IMG_MGMT_STATE_F_ACTIVE;
   130fa:	2004      	movs	r0, #4
   130fc:	e7de      	b.n	130bc <img_mgmt_state_flags+0x30>
            flags |= IMG_MGMT_STATE_F_CONFIRMED;
   130fe:	2002      	movs	r0, #2
   13100:	e7dc      	b.n	130bc <img_mgmt_state_flags+0x30>

00013102 <img_mgmt_state_any_pending>:
 * Indicates whether any image slot is pending (i.e., whether a test swap will
 * happen on the next reboot.
 */
int
img_mgmt_state_any_pending(void)
{
   13102:	b508      	push	{r3, lr}
    return img_mgmt_state_flags(0) & IMG_MGMT_STATE_F_PENDING ||
   13104:	2000      	movs	r0, #0
   13106:	f7ff ffc1 	bl	1308c <img_mgmt_state_flags>
   1310a:	f010 0f01 	tst.w	r0, #1
   1310e:	d001      	beq.n	13114 <img_mgmt_state_any_pending+0x12>
   13110:	2001      	movs	r0, #1
           img_mgmt_state_flags(1) & IMG_MGMT_STATE_F_PENDING;
}
   13112:	bd08      	pop	{r3, pc}
           img_mgmt_state_flags(1) & IMG_MGMT_STATE_F_PENDING;
   13114:	2001      	movs	r0, #1
   13116:	f7ff ffb9 	bl	1308c <img_mgmt_state_flags>
    return img_mgmt_state_flags(0) & IMG_MGMT_STATE_F_PENDING ||
   1311a:	f010 0f01 	tst.w	r0, #1
   1311e:	d001      	beq.n	13124 <img_mgmt_state_any_pending+0x22>
   13120:	2001      	movs	r0, #1
   13122:	e7f6      	b.n	13112 <img_mgmt_state_any_pending+0x10>
   13124:	2000      	movs	r0, #0
   13126:	e7f4      	b.n	13112 <img_mgmt_state_any_pending+0x10>

00013128 <img_mgmt_slot_in_use>:
 * Indicates whether the specified slot has any flags.  If no flags are set,
 * the slot can be freely erased.
 */
int
img_mgmt_slot_in_use(int slot)
{
   13128:	b508      	push	{r3, lr}
    uint8_t state_flags;

    state_flags = img_mgmt_state_flags(slot);
   1312a:	f7ff ffaf 	bl	1308c <img_mgmt_state_flags>
    return state_flags & IMG_MGMT_STATE_F_ACTIVE       ||
           state_flags & IMG_MGMT_STATE_F_CONFIRMED    ||
   1312e:	f010 0f06 	tst.w	r0, #6
   13132:	d106      	bne.n	13142 <img_mgmt_slot_in_use+0x1a>
   13134:	f010 0f01 	tst.w	r0, #1
   13138:	d101      	bne.n	1313e <img_mgmt_slot_in_use+0x16>
   1313a:	2000      	movs	r0, #0
   1313c:	e002      	b.n	13144 <img_mgmt_slot_in_use+0x1c>
   1313e:	2001      	movs	r0, #1
   13140:	e000      	b.n	13144 <img_mgmt_slot_in_use+0x1c>
   13142:	2001      	movs	r0, #1
           state_flags & IMG_MGMT_STATE_F_PENDING;
}
   13144:	bd08      	pop	{r3, pc}

00013146 <img_mgmt_state_set_pending>:
 * argument is specified, the system doesn't require a confirm after the swap
 * occurs.
 */
int
img_mgmt_state_set_pending(int slot, int permanent)
{
   13146:	b530      	push	{r4, r5, lr}
   13148:	b089      	sub	sp, #36	; 0x24
   1314a:	4604      	mov	r4, r0
   1314c:	460d      	mov	r5, r1
    uint8_t hash[IMAGE_HASH_LEN];
    uint8_t state_flags;
    const uint8_t *hashp;
    int rc;

    state_flags = img_mgmt_state_flags(slot);
   1314e:	f7ff ff9d 	bl	1308c <img_mgmt_state_flags>

    /* Unconfirmed slots are always runable.  A confirmed slot can only be
     * run if it is a loader in a split image setup.
     */
    if (state_flags & IMG_MGMT_STATE_F_CONFIRMED && slot != 0) {
   13152:	f010 0f02 	tst.w	r0, #2
   13156:	d000      	beq.n	1315a <img_mgmt_state_set_pending+0x14>
   13158:	b92c      	cbnz	r4, 13166 <img_mgmt_state_set_pending+0x20>
        rc = MGMT_ERR_EBADSTATE;
        goto done;
    }

    rc = img_mgmt_impl_write_pending(slot, permanent);
   1315a:	1c29      	adds	r1, r5, #0
   1315c:	bf18      	it	ne
   1315e:	2101      	movne	r1, #1
   13160:	4620      	mov	r0, r4
   13162:	f000 faa6 	bl	136b2 <img_mgmt_impl_write_pending>
        rc = MGMT_ERR_EUNKNOWN;
    }

done:
    /* Log the image hash if we know it. */
    rc = img_mgmt_read_info(slot, NULL, hash, NULL);
   13166:	2300      	movs	r3, #0
   13168:	466a      	mov	r2, sp
   1316a:	4619      	mov	r1, r3
   1316c:	4620      	mov	r0, r4
   1316e:	f7ff fd85 	bl	12c7c <img_mgmt_read_info>
    if (rc != 0) {
   13172:	4603      	mov	r3, r0
   13174:	b130      	cbz	r0, 13184 <img_mgmt_state_set_pending+0x3e>
        hashp = NULL;
   13176:	2100      	movs	r1, #0
    } else {
        hashp = hash;
    }

    if (permanent) {
   13178:	b935      	cbnz	r5, 13188 <img_mgmt_state_set_pending+0x42>
        return img_mgmt_impl_log_confirm(rc, hashp);
    } else {
        return img_mgmt_impl_log_pending(rc, hashp);
   1317a:	4618      	mov	r0, r3
   1317c:	f000 fb88 	bl	13890 <img_mgmt_impl_log_pending>
    }
}
   13180:	b009      	add	sp, #36	; 0x24
   13182:	bd30      	pop	{r4, r5, pc}
        hashp = hash;
   13184:	4669      	mov	r1, sp
   13186:	e7f7      	b.n	13178 <img_mgmt_state_set_pending+0x32>
        return img_mgmt_impl_log_confirm(rc, hashp);
   13188:	4618      	mov	r0, r3
   1318a:	f000 fb8b 	bl	138a4 <img_mgmt_impl_log_confirm>
   1318e:	e7f7      	b.n	13180 <img_mgmt_state_set_pending+0x3a>

00013190 <img_mgmt_state_confirm>:
 * Confirms the current image state.  Prevents a fallback from occurring on the
 * next reboot if the active image is currently being tested.
 */
int
img_mgmt_state_confirm(void)
{
   13190:	b510      	push	{r4, lr}
    int rc;

    /* Confirm disallowed if a test is pending. */
    if (img_mgmt_state_any_pending()) {
   13192:	f7ff ffb6 	bl	13102 <img_mgmt_state_any_pending>
   13196:	b128      	cbz	r0, 131a4 <img_mgmt_state_confirm+0x14>
        rc = MGMT_ERR_EBADSTATE;
   13198:	2406      	movs	r4, #6
        rc = MGMT_ERR_EUNKNOWN;
    }

     img_mgmt_dfu_confirmed();
err:
    return img_mgmt_impl_log_confirm(rc, NULL);
   1319a:	2100      	movs	r1, #0
   1319c:	4620      	mov	r0, r4
   1319e:	f000 fb81 	bl	138a4 <img_mgmt_impl_log_confirm>
}
   131a2:	bd10      	pop	{r4, pc}
    rc = img_mgmt_impl_write_confirmed();
   131a4:	f000 fac9 	bl	1373a <img_mgmt_impl_write_confirmed>
    if (rc != 0) {
   131a8:	4604      	mov	r4, r0
   131aa:	b100      	cbz	r0, 131ae <img_mgmt_state_confirm+0x1e>
        rc = MGMT_ERR_EUNKNOWN;
   131ac:	2401      	movs	r4, #1
     img_mgmt_dfu_confirmed();
   131ae:	f7ff ff4f 	bl	13050 <img_mgmt_dfu_confirmed>
   131b2:	e7f2      	b.n	1319a <img_mgmt_state_confirm+0xa>

000131b4 <img_mgmt_state_read>:
/**
 * Command handler: image state read
 */
int
img_mgmt_state_read(struct mgmt_ctxt *ctxt)
{
   131b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   131b6:	b09b      	sub	sp, #108	; 0x6c
   131b8:	4605      	mov	r5, r0
   131ba:	2206      	movs	r2, #6
   131bc:	4959      	ldr	r1, [pc, #356]	; (13324 <img_mgmt_state_read+0x170>)
   131be:	f019 fb3a 	bl	2c836 <cbor_encode_text_string>
   131c2:	4604      	mov	r4, r0
    int i;

    err = 0;
    err |= cbor_encode_text_stringz(&ctxt->encoder, "images");

    err |= cbor_encoder_create_array(&ctxt->encoder, &images,
   131c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   131c8:	a905      	add	r1, sp, #20
   131ca:	4628      	mov	r0, r5
   131cc:	f019 fb3b 	bl	2c846 <cbor_encoder_create_array>
   131d0:	4304      	orrs	r4, r0
                                       CborIndefiniteLength);
    for (i = 0; i < 2; i++) {
   131d2:	2600      	movs	r6, #0
   131d4:	e000      	b.n	131d8 <img_mgmt_state_read+0x24>
   131d6:	3601      	adds	r6, #1
   131d8:	2e01      	cmp	r6, #1
   131da:	f300 808a 	bgt.w	132f2 <img_mgmt_state_read+0x13e>
        rc = img_mgmt_read_info(i, &ver, hash, &flags);
   131de:	466b      	mov	r3, sp
   131e0:	aa0b      	add	r2, sp, #44	; 0x2c
   131e2:	a909      	add	r1, sp, #36	; 0x24
   131e4:	4630      	mov	r0, r6
   131e6:	f7ff fd49 	bl	12c7c <img_mgmt_read_info>
        if (rc != 0) {
   131ea:	2800      	cmp	r0, #0
   131ec:	d1f3      	bne.n	131d6 <img_mgmt_state_read+0x22>
            continue;
        }

        state_flags = img_mgmt_state_flags(i);
   131ee:	4630      	mov	r0, r6
   131f0:	f7ff ff4c 	bl	1308c <img_mgmt_state_flags>
   131f4:	4607      	mov	r7, r0

        err |= cbor_encoder_create_map(&images, &image,
   131f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   131fa:	a901      	add	r1, sp, #4
   131fc:	a805      	add	r0, sp, #20
   131fe:	f019 fb27 	bl	2c850 <cbor_encoder_create_map>
   13202:	4304      	orrs	r4, r0
   13204:	2204      	movs	r2, #4
   13206:	4948      	ldr	r1, [pc, #288]	; (13328 <img_mgmt_state_read+0x174>)
   13208:	eb0d 0002 	add.w	r0, sp, r2
   1320c:	f019 fb13 	bl	2c836 <cbor_encode_text_string>
                                         CborIndefiniteLength);
        err |= cbor_encode_text_stringz(&image, "slot");
   13210:	4304      	orrs	r4, r0
        err |= cbor_encode_int(&image, i);
   13212:	4632      	mov	r2, r6
   13214:	17f3      	asrs	r3, r6, #31
   13216:	a801      	add	r0, sp, #4
   13218:	f019 fa8c 	bl	2c734 <cbor_encode_int>
   1321c:	4304      	orrs	r4, r0
   1321e:	2207      	movs	r2, #7
   13220:	4942      	ldr	r1, [pc, #264]	; (1332c <img_mgmt_state_read+0x178>)
   13222:	a801      	add	r0, sp, #4
   13224:	f019 fb07 	bl	2c836 <cbor_encode_text_string>

        err |= cbor_encode_text_stringz(&image, "version");
   13228:	4304      	orrs	r4, r0
        img_mgmt_ver_str(&ver, vers_str);
   1322a:	a913      	add	r1, sp, #76	; 0x4c
   1322c:	a809      	add	r0, sp, #36	; 0x24
   1322e:	f000 f8db 	bl	133e8 <img_mgmt_ver_str>
   13232:	a813      	add	r0, sp, #76	; 0x4c
   13234:	f7fb fc52 	bl	eadc <strlen>
   13238:	4602      	mov	r2, r0
   1323a:	a913      	add	r1, sp, #76	; 0x4c
   1323c:	a801      	add	r0, sp, #4
   1323e:	f019 fafa 	bl	2c836 <cbor_encode_text_string>
        err |= cbor_encode_text_stringz(&image, vers_str);
   13242:	4304      	orrs	r4, r0
   13244:	2204      	movs	r2, #4
   13246:	493a      	ldr	r1, [pc, #232]	; (13330 <img_mgmt_state_read+0x17c>)
   13248:	eb0d 0002 	add.w	r0, sp, r2
   1324c:	f019 faf3 	bl	2c836 <cbor_encode_text_string>

        err |= cbor_encode_text_stringz(&image, "hash");
   13250:	4304      	orrs	r4, r0
        err |= cbor_encode_byte_string(&image, hash, IMAGE_HASH_LEN);
   13252:	2220      	movs	r2, #32
   13254:	a90b      	add	r1, sp, #44	; 0x2c
   13256:	a801      	add	r0, sp, #4
   13258:	f019 fae5 	bl	2c826 <cbor_encode_byte_string>
   1325c:	4304      	orrs	r4, r0
   1325e:	2208      	movs	r2, #8
   13260:	4934      	ldr	r1, [pc, #208]	; (13334 <img_mgmt_state_read+0x180>)
   13262:	a801      	add	r0, sp, #4
   13264:	f019 fae7 	bl	2c836 <cbor_encode_text_string>

        err |= cbor_encode_text_stringz(&image, "bootable");
   13268:	4304      	orrs	r4, r0
        err |= cbor_encode_boolean(&image, !(flags & IMAGE_F_NON_BOOTABLE));
   1326a:	9b00      	ldr	r3, [sp, #0]
   1326c:	f013 0f10 	tst.w	r3, #16
{ return cbor_encode_simple_value(encoder, (int)value - 1 + (CborBooleanType & 0x1f)); }
   13270:	bf14      	ite	ne
   13272:	2114      	movne	r1, #20
   13274:	2115      	moveq	r1, #21
   13276:	a801      	add	r0, sp, #4
   13278:	f019 faa6 	bl	2c7c8 <cbor_encode_simple_value>
   1327c:	4304      	orrs	r4, r0
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   1327e:	2207      	movs	r2, #7
   13280:	492d      	ldr	r1, [pc, #180]	; (13338 <img_mgmt_state_read+0x184>)
   13282:	a801      	add	r0, sp, #4
   13284:	f019 fad7 	bl	2c836 <cbor_encode_text_string>

        err |= cbor_encode_text_stringz(&image, "pending");
   13288:	4304      	orrs	r4, r0
        err |= cbor_encode_boolean(&image,
   1328a:	f007 0101 	and.w	r1, r7, #1
{ return cbor_encode_simple_value(encoder, (int)value - 1 + (CborBooleanType & 0x1f)); }
   1328e:	3114      	adds	r1, #20
   13290:	a801      	add	r0, sp, #4
   13292:	f019 fa99 	bl	2c7c8 <cbor_encode_simple_value>
   13296:	4304      	orrs	r4, r0
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   13298:	2209      	movs	r2, #9
   1329a:	4928      	ldr	r1, [pc, #160]	; (1333c <img_mgmt_state_read+0x188>)
   1329c:	a801      	add	r0, sp, #4
   1329e:	f019 faca 	bl	2c836 <cbor_encode_text_string>
                                     state_flags & IMG_MGMT_STATE_F_PENDING);

        err |= cbor_encode_text_stringz(&image, "confirmed");
   132a2:	4304      	orrs	r4, r0
        err |= cbor_encode_boolean(&image,
   132a4:	f3c7 0140 	ubfx	r1, r7, #1, #1
{ return cbor_encode_simple_value(encoder, (int)value - 1 + (CborBooleanType & 0x1f)); }
   132a8:	3114      	adds	r1, #20
   132aa:	a801      	add	r0, sp, #4
   132ac:	f019 fa8c 	bl	2c7c8 <cbor_encode_simple_value>
   132b0:	4304      	orrs	r4, r0
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   132b2:	2206      	movs	r2, #6
   132b4:	4922      	ldr	r1, [pc, #136]	; (13340 <img_mgmt_state_read+0x18c>)
   132b6:	a801      	add	r0, sp, #4
   132b8:	f019 fabd 	bl	2c836 <cbor_encode_text_string>
                                     state_flags & IMG_MGMT_STATE_F_CONFIRMED);

        err |= cbor_encode_text_stringz(&image, "active");
   132bc:	4304      	orrs	r4, r0
        err |= cbor_encode_boolean(&image,
   132be:	f3c7 0180 	ubfx	r1, r7, #2, #1
{ return cbor_encode_simple_value(encoder, (int)value - 1 + (CborBooleanType & 0x1f)); }
   132c2:	3114      	adds	r1, #20
   132c4:	a801      	add	r0, sp, #4
   132c6:	f019 fa7f 	bl	2c7c8 <cbor_encode_simple_value>
   132ca:	4304      	orrs	r4, r0
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   132cc:	2209      	movs	r2, #9
   132ce:	491d      	ldr	r1, [pc, #116]	; (13344 <img_mgmt_state_read+0x190>)
   132d0:	a801      	add	r0, sp, #4
   132d2:	f019 fab0 	bl	2c836 <cbor_encode_text_string>
                                     state_flags & IMG_MGMT_STATE_F_ACTIVE);

        err |= cbor_encode_text_stringz(&image, "permanent");
   132d6:	4304      	orrs	r4, r0
        err |= cbor_encode_boolean(&image,
   132d8:	f3c7 01c0 	ubfx	r1, r7, #3, #1
{ return cbor_encode_simple_value(encoder, (int)value - 1 + (CborBooleanType & 0x1f)); }
   132dc:	3114      	adds	r1, #20
   132de:	a801      	add	r0, sp, #4
   132e0:	f019 fa72 	bl	2c7c8 <cbor_encode_simple_value>
   132e4:	4304      	orrs	r4, r0
                                     state_flags & IMG_MGMT_STATE_F_PERMANENT);

        err |= cbor_encoder_close_container(&images, &image);
   132e6:	a901      	add	r1, sp, #4
   132e8:	a805      	add	r0, sp, #20
   132ea:	f019 fac8 	bl	2c87e <cbor_encoder_close_container>
   132ee:	4304      	orrs	r4, r0
   132f0:	e771      	b.n	131d6 <img_mgmt_state_read+0x22>
    }

    err |= cbor_encoder_close_container(&ctxt->encoder, &images);
   132f2:	a905      	add	r1, sp, #20
   132f4:	4628      	mov	r0, r5
   132f6:	f019 fac2 	bl	2c87e <cbor_encoder_close_container>
   132fa:	4304      	orrs	r4, r0
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   132fc:	220b      	movs	r2, #11
   132fe:	4912      	ldr	r1, [pc, #72]	; (13348 <img_mgmt_state_read+0x194>)
   13300:	4628      	mov	r0, r5
   13302:	f019 fa98 	bl	2c836 <cbor_encode_text_string>

    err |= cbor_encode_text_stringz(&ctxt->encoder, "splitStatus");
   13306:	4304      	orrs	r4, r0
    err |= cbor_encode_int(&ctxt->encoder, 0);
   13308:	2200      	movs	r2, #0
   1330a:	2300      	movs	r3, #0
   1330c:	4628      	mov	r0, r5
   1330e:	f019 fa11 	bl	2c734 <cbor_encode_int>

    if (err != 0) {
   13312:	ea54 0300 	orrs.w	r3, r4, r0
   13316:	d102      	bne.n	1331e <img_mgmt_state_read+0x16a>
        return MGMT_ERR_ENOMEM;
    }

    return 0;
   13318:	2000      	movs	r0, #0
}
   1331a:	b01b      	add	sp, #108	; 0x6c
   1331c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return MGMT_ERR_ENOMEM;
   1331e:	2002      	movs	r0, #2
   13320:	e7fb      	b.n	1331a <img_mgmt_state_read+0x166>
   13322:	bf00      	nop
   13324:	00031c48 	.word	0x00031c48
   13328:	00031c50 	.word	0x00031c50
   1332c:	00031c58 	.word	0x00031c58
   13330:	00031b5c 	.word	0x00031b5c
   13334:	00031b88 	.word	0x00031b88
   13338:	00031ba0 	.word	0x00031ba0
   1333c:	00031b94 	.word	0x00031b94
   13340:	00031b7c 	.word	0x00031b7c
   13344:	00031c60 	.word	0x00031c60
   13348:	00031c6c 	.word	0x00031c6c

0001334c <img_mgmt_state_write>:
/**
 * Command handler: image state write
 */
int
img_mgmt_state_write(struct mgmt_ctxt *ctxt)
{
   1334c:	b510      	push	{r4, lr}
   1334e:	b0b0      	sub	sp, #192	; 0xc0
   13350:	4604      	mov	r4, r0
    size_t hash_len;
    bool confirm;
    int slot;
    int rc;

    const struct cbor_attr_t write_attr[] = {
   13352:	228c      	movs	r2, #140	; 0x8c
   13354:	2100      	movs	r1, #0
   13356:	a801      	add	r0, sp, #4
   13358:	f7fb fb4a 	bl	e9f0 <memset>
   1335c:	4b20      	ldr	r3, [pc, #128]	; (133e0 <img_mgmt_state_write+0x94>)
   1335e:	9300      	str	r3, [sp, #0]
   13360:	2303      	movs	r3, #3
   13362:	f88d 3004 	strb.w	r3, [sp, #4]
   13366:	ab27      	add	r3, sp, #156	; 0x9c
   13368:	9302      	str	r3, [sp, #8]
   1336a:	ab26      	add	r3, sp, #152	; 0x98
   1336c:	9303      	str	r3, [sp, #12]
   1336e:	2321      	movs	r3, #33	; 0x21
   13370:	930a      	str	r3, [sp, #40]	; 0x28
   13372:	4b1c      	ldr	r3, [pc, #112]	; (133e4 <img_mgmt_state_write+0x98>)
   13374:	930c      	str	r3, [sp, #48]	; 0x30
   13376:	2305      	movs	r3, #5
   13378:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
   1337c:	f10d 0397 	add.w	r3, sp, #151	; 0x97
   13380:	930e      	str	r3, [sp, #56]	; 0x38
            .dflt.boolean = false,
        },
        [2] = { 0 },
    };

    hash_len = 0;
   13382:	2300      	movs	r3, #0
   13384:	9326      	str	r3, [sp, #152]	; 0x98
    rc = cbor_read_object(&ctxt->it, write_attr);
   13386:	4669      	mov	r1, sp
   13388:	f104 001c 	add.w	r0, r4, #28
   1338c:	f7ff fc0b 	bl	12ba6 <cbor_read_object>
    if (rc != 0) {
   13390:	bb10      	cbnz	r0, 133d8 <img_mgmt_state_write+0x8c>
   13392:	4603      	mov	r3, r0
        return MGMT_ERR_EINVAL;
    }

    /* Determine which slot is being operated on. */
    if (hash_len == 0) {
   13394:	9a26      	ldr	r2, [sp, #152]	; 0x98
   13396:	b97a      	cbnz	r2, 133b8 <img_mgmt_state_write+0x6c>
        if (confirm) {
   13398:	f89d 2097 	ldrb.w	r2, [sp, #151]	; 0x97
   1339c:	b152      	cbz	r2, 133b4 <img_mgmt_state_write+0x68>
        if (slot < 0) {
            return MGMT_ERR_EINVAL;
        }
    }

    if (slot == 0 && confirm) {
   1339e:	f89d 2097 	ldrb.w	r2, [sp, #151]	; 0x97
   133a2:	b992      	cbnz	r2, 133ca <img_mgmt_state_write+0x7e>
        /* Confirm current setup. */
        rc = img_mgmt_state_confirm();
    } else {
        rc = img_mgmt_state_set_pending(slot, confirm);
   133a4:	f89d 1097 	ldrb.w	r1, [sp, #151]	; 0x97
   133a8:	4618      	mov	r0, r3
   133aa:	f7ff fecc 	bl	13146 <img_mgmt_state_set_pending>
    }
    if (rc != 0) {
   133ae:	b178      	cbz	r0, 133d0 <img_mgmt_state_write+0x84>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   133b0:	b030      	add	sp, #192	; 0xc0
   133b2:	bd10      	pop	{r4, pc}
            return MGMT_ERR_EINVAL;
   133b4:	2003      	movs	r0, #3
   133b6:	e7fb      	b.n	133b0 <img_mgmt_state_write+0x64>
        slot = img_mgmt_find_by_hash(hash, NULL);
   133b8:	2100      	movs	r1, #0
   133ba:	a827      	add	r0, sp, #156	; 0x9c
   133bc:	f7ff fd05 	bl	12dca <img_mgmt_find_by_hash>
        if (slot < 0) {
   133c0:	1e03      	subs	r3, r0, #0
   133c2:	db0b      	blt.n	133dc <img_mgmt_state_write+0x90>
    if (slot == 0 && confirm) {
   133c4:	2b00      	cmp	r3, #0
   133c6:	d1ed      	bne.n	133a4 <img_mgmt_state_write+0x58>
   133c8:	e7e9      	b.n	1339e <img_mgmt_state_write+0x52>
        rc = img_mgmt_state_confirm();
   133ca:	f7ff fee1 	bl	13190 <img_mgmt_state_confirm>
   133ce:	e7ee      	b.n	133ae <img_mgmt_state_write+0x62>
    rc = img_mgmt_state_read(ctxt);
   133d0:	4620      	mov	r0, r4
   133d2:	f7ff feef 	bl	131b4 <img_mgmt_state_read>
   133d6:	e7eb      	b.n	133b0 <img_mgmt_state_write+0x64>
        return MGMT_ERR_EINVAL;
   133d8:	2003      	movs	r0, #3
   133da:	e7e9      	b.n	133b0 <img_mgmt_state_write+0x64>
            return MGMT_ERR_EINVAL;
   133dc:	2003      	movs	r0, #3
   133de:	e7e7      	b.n	133b0 <img_mgmt_state_write+0x64>
   133e0:	00031b5c 	.word	0x00031b5c
   133e4:	00031c78 	.word	0x00031c78

000133e8 <img_mgmt_ver_str>:
#include "img_mgmt/image.h"
#include "img_mgmt/img_mgmt.h"

int
img_mgmt_ver_str(const struct image_version *ver, char *dst)
{
   133e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   133ea:	4606      	mov	r6, r0
   133ec:	460c      	mov	r4, r1
    int off;

    off = 0;

    off += ull_to_s(ver->iv_major, INT_MAX, dst + off);
   133ee:	460b      	mov	r3, r1
   133f0:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   133f4:	7830      	ldrb	r0, [r6, #0]
   133f6:	2100      	movs	r1, #0
   133f8:	f000 ffd0 	bl	1439c <ull_to_s>

    dst[off++] = '.';
   133fc:	1c45      	adds	r5, r0, #1
   133fe:	272e      	movs	r7, #46	; 0x2e
   13400:	5427      	strb	r7, [r4, r0]
    off += ull_to_s(ver->iv_minor, INT_MAX, dst + off);
   13402:	1963      	adds	r3, r4, r5
   13404:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   13408:	7870      	ldrb	r0, [r6, #1]
   1340a:	2100      	movs	r1, #0
   1340c:	f000 ffc6 	bl	1439c <ull_to_s>
   13410:	4428      	add	r0, r5

    dst[off++] = '.';
   13412:	1c45      	adds	r5, r0, #1
   13414:	5427      	strb	r7, [r4, r0]
    off += ull_to_s(ver->iv_revision, INT_MAX, dst + off);
   13416:	1963      	adds	r3, r4, r5
   13418:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   1341c:	8870      	ldrh	r0, [r6, #2]
   1341e:	2100      	movs	r1, #0
   13420:	f000 ffbc 	bl	1439c <ull_to_s>
   13424:	4428      	add	r0, r5

    if (ver->iv_build_num != 0) {
   13426:	6873      	ldr	r3, [r6, #4]
   13428:	b90b      	cbnz	r3, 1342e <img_mgmt_ver_str+0x46>
        dst[off++] = '.';
        off += ull_to_s(ver->iv_build_num, INT_MAX, dst + off);
    }

    return 0;
}
   1342a:	2000      	movs	r0, #0
   1342c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        dst[off++] = '.';
   1342e:	1c43      	adds	r3, r0, #1
   13430:	5427      	strb	r7, [r4, r0]
        off += ull_to_s(ver->iv_build_num, INT_MAX, dst + off);
   13432:	4423      	add	r3, r4
   13434:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   13438:	6870      	ldr	r0, [r6, #4]
   1343a:	2100      	movs	r1, #0
   1343c:	f000 ffae 	bl	1439c <ull_to_s>
   13440:	e7f3      	b.n	1342a <img_mgmt_ver_str+0x42>

00013442 <img_mgmt_vercmp>:
 * @return                       1 if a > b
 */
static int
img_mgmt_vercmp(const struct image_version *a, const struct image_version *b)
{
    if (a->iv_major < b->iv_major) {
   13442:	7802      	ldrb	r2, [r0, #0]
   13444:	780b      	ldrb	r3, [r1, #0]
   13446:	429a      	cmp	r2, r3
   13448:	d30e      	bcc.n	13468 <img_mgmt_vercmp+0x26>
        return -1;
    } else if (a->iv_major > b->iv_major) {
   1344a:	d810      	bhi.n	1346e <img_mgmt_vercmp+0x2c>
        return 1;
    }

    if (a->iv_minor < b->iv_minor) {
   1344c:	7842      	ldrb	r2, [r0, #1]
   1344e:	784b      	ldrb	r3, [r1, #1]
   13450:	429a      	cmp	r2, r3
   13452:	d30e      	bcc.n	13472 <img_mgmt_vercmp+0x30>
        return -1;
    } else if (a->iv_minor > b->iv_minor) {
   13454:	d810      	bhi.n	13478 <img_mgmt_vercmp+0x36>
        return 1;
    }

    if (a->iv_revision < b->iv_revision) {
   13456:	8842      	ldrh	r2, [r0, #2]
   13458:	884b      	ldrh	r3, [r1, #2]
   1345a:	429a      	cmp	r2, r3
   1345c:	d30e      	bcc.n	1347c <img_mgmt_vercmp+0x3a>
        return -1;
    } else if (a->iv_revision > b->iv_revision) {
   1345e:	d801      	bhi.n	13464 <img_mgmt_vercmp+0x22>
        return 1;
    }

    /* Note: For semver compatibility, don't compare the 32-bit build num. */

    return 0;
   13460:	2000      	movs	r0, #0
}
   13462:	4770      	bx	lr
        return 1;
   13464:	2001      	movs	r0, #1
   13466:	4770      	bx	lr
        return -1;
   13468:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1346c:	4770      	bx	lr
        return 1;
   1346e:	2001      	movs	r0, #1
   13470:	4770      	bx	lr
        return -1;
   13472:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13476:	4770      	bx	lr
        return 1;
   13478:	2001      	movs	r0, #1
   1347a:	4770      	bx	lr
        return -1;
   1347c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   13480:	4770      	bx	lr

00013482 <img_mgmt_find_best_area_id>:
{
   13482:	b530      	push	{r4, r5, lr}
   13484:	b083      	sub	sp, #12
    for (i = 0; i < 2; i++) {
   13486:	2400      	movs	r4, #0
    int best = -1;
   13488:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    for (i = 0; i < 2; i++) {
   1348c:	e000      	b.n	13490 <img_mgmt_find_best_area_id+0xe>
   1348e:	3401      	adds	r4, #1
   13490:	2c01      	cmp	r4, #1
   13492:	dc10      	bgt.n	134b6 <img_mgmt_find_best_area_id+0x34>
        rc = img_mgmt_read_info(i, &ver, NULL, NULL);
   13494:	2300      	movs	r3, #0
   13496:	461a      	mov	r2, r3
   13498:	4669      	mov	r1, sp
   1349a:	4620      	mov	r0, r4
   1349c:	f7ff fbee 	bl	12c7c <img_mgmt_read_info>
        if (rc < 0) {
   134a0:	2800      	cmp	r0, #0
   134a2:	dbf4      	blt.n	1348e <img_mgmt_find_best_area_id+0xc>
        if (rc == 0) {
   134a4:	b930      	cbnz	r0, 134b4 <img_mgmt_find_best_area_id+0x32>
            if (img_mgmt_slot_in_use(i)) {
   134a6:	4620      	mov	r0, r4
   134a8:	f7ff fe3e 	bl	13128 <img_mgmt_slot_in_use>
   134ac:	2800      	cmp	r0, #0
   134ae:	d1ee      	bne.n	1348e <img_mgmt_find_best_area_id+0xc>
                best = i;
   134b0:	4625      	mov	r5, r4
   134b2:	e7ec      	b.n	1348e <img_mgmt_find_best_area_id+0xc>
        best = i;
   134b4:	4625      	mov	r5, r4
    if (best >= 0) {
   134b6:	2d00      	cmp	r5, #0
   134b8:	db03      	blt.n	134c2 <img_mgmt_find_best_area_id+0x40>
        best = flash_area_id_from_image_slot(best);
   134ba:	4628      	mov	r0, r5
   134bc:	f7fd fb4f 	bl	10b5e <flash_area_id_from_image_slot>
   134c0:	4605      	mov	r5, r0
}
   134c2:	4628      	mov	r0, r5
   134c4:	b003      	add	sp, #12
   134c6:	bd30      	pop	{r4, r5, pc}

000134c8 <img_mgmt_impl_upload_inspect>:
 */
int
img_mgmt_impl_upload_inspect(const struct img_mgmt_upload_req *req,
                             struct img_mgmt_upload_action *action,
                             const char **errstr)
{
   134c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   134cc:	b084      	sub	sp, #16
    struct image_version cur_ver;
    uint8_t rem_bytes;
    bool empty;
    int rc;

    memset(action, 0, sizeof *action);
   134ce:	2300      	movs	r3, #0
   134d0:	600b      	str	r3, [r1, #0]
   134d2:	604b      	str	r3, [r1, #4]
   134d4:	608b      	str	r3, [r1, #8]
   134d6:	60cb      	str	r3, [r1, #12]
   134d8:	610b      	str	r3, [r1, #16]
   134da:	614b      	str	r3, [r1, #20]

    if (req->off == -1) {
   134dc:	e9d0 6700 	ldrd	r6, r7, [r0]
   134e0:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   134e4:	bf08      	it	eq
   134e6:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   134ea:	d043      	beq.n	13574 <img_mgmt_impl_upload_inspect+0xac>
   134ec:	4690      	mov	r8, r2
   134ee:	460c      	mov	r4, r1
   134f0:	4605      	mov	r5, r0
        /* Request did not include an `off` field. */
        *errstr = img_mgmt_err_str_hdr_malformed;
        return MGMT_ERR_EINVAL;
    }

    if (req->off == 0) {
   134f2:	ea56 0307 	orrs.w	r3, r6, r7
   134f6:	d17f      	bne.n	135f8 <img_mgmt_impl_upload_inspect+0x130>
        /* First upload chunk. */
        if (req->data_len < sizeof(struct image_header)) {
   134f8:	6903      	ldr	r3, [r0, #16]
   134fa:	2b1f      	cmp	r3, #31
   134fc:	d93d      	bls.n	1357a <img_mgmt_impl_upload_inspect+0xb2>
             */
            *errstr = img_mgmt_err_str_hdr_malformed;
            return MGMT_ERR_EINVAL;
        }

        if (req->size == -1) {
   134fe:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
   13502:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   13506:	bf08      	it	eq
   13508:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   1350c:	d039      	beq.n	13582 <img_mgmt_impl_upload_inspect+0xba>
            /* Request did not include a `len` field. */
            *errstr = img_mgmt_err_str_hdr_malformed;
            return MGMT_ERR_EINVAL;
        }
        action->size = req->size;
   1350e:	e9c1 2300 	strd	r2, r3, [r1]

        hdr = (struct image_header *)req->img_data;
        if (hdr->ih_magic != IMAGE_MAGIC) {
   13512:	6982      	ldr	r2, [r0, #24]
   13514:	4b52      	ldr	r3, [pc, #328]	; (13660 <img_mgmt_impl_upload_inspect+0x198>)
   13516:	429a      	cmp	r2, r3
   13518:	d138      	bne.n	1358c <img_mgmt_impl_upload_inspect+0xc4>
            *errstr = img_mgmt_err_str_magic_mismatch;
            return MGMT_ERR_EINVAL;
        }

        if (req->data_sha_len > IMG_MGMT_DATA_SHA_LEN) {
   1351a:	6942      	ldr	r2, [r0, #20]
   1351c:	2a20      	cmp	r2, #32
   1351e:	f200 8099 	bhi.w	13654 <img_mgmt_impl_upload_inspect+0x18c>
         * If request includes proper data hash we can check whether there is
         * upload in progress (interrupted due to e.g. link disconnection) with
         * the same data hash so we can just resume it by simply including
         * current upload offset in response.
         */
        if ((req->data_sha_len > 0) && (g_img_mgmt_state.area_id != -1)) {
   13522:	b142      	cbz	r2, 13536 <img_mgmt_impl_upload_inspect+0x6e>
   13524:	4b4f      	ldr	r3, [pc, #316]	; (13664 <img_mgmt_impl_upload_inspect+0x19c>)
   13526:	681b      	ldr	r3, [r3, #0]
   13528:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1352c:	d003      	beq.n	13536 <img_mgmt_impl_upload_inspect+0x6e>
            if ((g_img_mgmt_state.data_sha_len == req->data_sha_len) &&
   1352e:	4b4d      	ldr	r3, [pc, #308]	; (13664 <img_mgmt_impl_upload_inspect+0x19c>)
   13530:	7b1b      	ldrb	r3, [r3, #12]
   13532:	429a      	cmp	r2, r3
   13534:	d02f      	beq.n	13596 <img_mgmt_impl_upload_inspect+0xce>
                                                        req->data_sha_len)) {
                return 0;
            }
        }

        action->area_id = img_mgmt_find_best_area_id();
   13536:	f7ff ffa4 	bl	13482 <img_mgmt_find_best_area_id>
   1353a:	60e0      	str	r0, [r4, #12]
        if (action->area_id < 0) {
   1353c:	2800      	cmp	r0, #0
   1353e:	db33      	blt.n	135a8 <img_mgmt_impl_upload_inspect+0xe0>
            /* No slot where to upload! */
            *errstr = img_mgmt_err_str_no_slot;
            return MGMT_ERR_ENOMEM;
        }

        if (req->upgrade) {
   13540:	f895 3238 	ldrb.w	r3, [r5, #568]	; 0x238
   13544:	b163      	cbz	r3, 13560 <img_mgmt_impl_upload_inspect+0x98>
            /* User specified upgrade-only.  Make sure new image version is
             * greater than that of the currently running image.
             */
            rc = img_mgmt_my_version(&cur_ver);
   13546:	a801      	add	r0, sp, #4
   13548:	f7ff fd8c 	bl	13064 <img_mgmt_my_version>
            if (rc != 0) {
   1354c:	2800      	cmp	r0, #0
   1354e:	f040 8083 	bne.w	13658 <img_mgmt_impl_upload_inspect+0x190>
                return MGMT_ERR_EUNKNOWN;
            }

            if (img_mgmt_vercmp(&cur_ver, &hdr->ih_ver) >= 0) {
   13552:	f105 012c 	add.w	r1, r5, #44	; 0x2c
   13556:	a801      	add	r0, sp, #4
   13558:	f7ff ff73 	bl	13442 <img_mgmt_vercmp>
   1355c:	2800      	cmp	r0, #0
   1355e:	da28      	bge.n	135b2 <img_mgmt_impl_upload_inspect+0xea>
        }

#if MYNEWT_VAL(IMG_MGMT_LAZY_ERASE)
        (void) empty;
#else
        rc = flash_area_open(action->area_id, &fa);
   13560:	a903      	add	r1, sp, #12
   13562:	7b20      	ldrb	r0, [r4, #12]
   13564:	f7fd fa46 	bl	109f4 <flash_area_open>
        if (rc) {
   13568:	b340      	cbz	r0, 135bc <img_mgmt_impl_upload_inspect+0xf4>
            *errstr = img_mgmt_err_str_flash_open_failed;
   1356a:	2300      	movs	r3, #0
   1356c:	f8c8 3000 	str.w	r3, [r8]
            return MGMT_ERR_EUNKNOWN;
   13570:	2301      	movs	r3, #1
   13572:	e051      	b.n	13618 <img_mgmt_impl_upload_inspect+0x150>
        *errstr = img_mgmt_err_str_hdr_malformed;
   13574:	6013      	str	r3, [r2, #0]
        return MGMT_ERR_EINVAL;
   13576:	2303      	movs	r3, #3
   13578:	e04e      	b.n	13618 <img_mgmt_impl_upload_inspect+0x150>
            *errstr = img_mgmt_err_str_hdr_malformed;
   1357a:	2300      	movs	r3, #0
   1357c:	6013      	str	r3, [r2, #0]
            return MGMT_ERR_EINVAL;
   1357e:	2303      	movs	r3, #3
   13580:	e04a      	b.n	13618 <img_mgmt_impl_upload_inspect+0x150>
            *errstr = img_mgmt_err_str_hdr_malformed;
   13582:	2300      	movs	r3, #0
   13584:	f8c8 3000 	str.w	r3, [r8]
            return MGMT_ERR_EINVAL;
   13588:	2303      	movs	r3, #3
   1358a:	e045      	b.n	13618 <img_mgmt_impl_upload_inspect+0x150>
            *errstr = img_mgmt_err_str_magic_mismatch;
   1358c:	2300      	movs	r3, #0
   1358e:	f8c8 3000 	str.w	r3, [r8]
            return MGMT_ERR_EINVAL;
   13592:	2303      	movs	r3, #3
   13594:	e040      	b.n	13618 <img_mgmt_impl_upload_inspect+0x150>
                            !memcmp(g_img_mgmt_state.data_sha, req->data_sha,
   13596:	f500 7106 	add.w	r1, r0, #536	; 0x218
   1359a:	4833      	ldr	r0, [pc, #204]	; (13668 <img_mgmt_impl_upload_inspect+0x1a0>)
   1359c:	f7fb f9dc 	bl	e958 <memcmp>
            if ((g_img_mgmt_state.data_sha_len == req->data_sha_len) &&
   135a0:	4603      	mov	r3, r0
   135a2:	2800      	cmp	r0, #0
   135a4:	d1c7      	bne.n	13536 <img_mgmt_impl_upload_inspect+0x6e>
   135a6:	e037      	b.n	13618 <img_mgmt_impl_upload_inspect+0x150>
            *errstr = img_mgmt_err_str_no_slot;
   135a8:	2300      	movs	r3, #0
   135aa:	f8c8 3000 	str.w	r3, [r8]
            return MGMT_ERR_ENOMEM;
   135ae:	2302      	movs	r3, #2
   135b0:	e032      	b.n	13618 <img_mgmt_impl_upload_inspect+0x150>
                *errstr = img_mgmt_err_str_downgrade;
   135b2:	2300      	movs	r3, #0
   135b4:	f8c8 3000 	str.w	r3, [r8]
                return MGMT_ERR_EBADSTATE;
   135b8:	2306      	movs	r3, #6
   135ba:	e02d      	b.n	13618 <img_mgmt_impl_upload_inspect+0x150>
        }

        rc = flash_area_is_empty(fa, &empty);
   135bc:	f10d 0103 	add.w	r1, sp, #3
   135c0:	9803      	ldr	r0, [sp, #12]
   135c2:	f7fd fab2 	bl	10b2a <flash_area_is_empty>
        flash_area_close(fa);
        if (rc) {
   135c6:	2800      	cmp	r0, #0
   135c8:	d148      	bne.n	1365c <img_mgmt_impl_upload_inspect+0x194>
            return MGMT_ERR_EUNKNOWN;
        }

        action->erase = !empty;
   135ca:	f89d 3003 	ldrb.w	r3, [sp, #3]
   135ce:	f083 0301 	eor.w	r3, r3, #1
   135d2:	7463      	strb	r3, [r4, #17]
            return 0;
        }
    }

    /* Calculate size of flash write. */
    action->write_bytes = req->data_len;
   135d4:	692b      	ldr	r3, [r5, #16]
   135d6:	60a3      	str	r3, [r4, #8]
    if (req->off + req->data_len < action->size) {
   135d8:	e9d5 6700 	ldrd	r6, r7, [r5]
   135dc:	6929      	ldr	r1, [r5, #16]
   135de:	1872      	adds	r2, r6, r1
   135e0:	f147 0300 	adc.w	r3, r7, #0
   135e4:	e9d4 0100 	ldrd	r0, r1, [r4]
   135e8:	428b      	cmp	r3, r1
   135ea:	bf08      	it	eq
   135ec:	4282      	cmpeq	r2, r0
   135ee:	d317      	bcc.n	13620 <img_mgmt_impl_upload_inspect+0x158>
        if (rem_bytes) {
            action->write_bytes -= rem_bytes;
        }
    }

    action->proceed = true;
   135f0:	2301      	movs	r3, #1
   135f2:	7423      	strb	r3, [r4, #16]
    return 0;
   135f4:	2300      	movs	r3, #0
   135f6:	e00f      	b.n	13618 <img_mgmt_impl_upload_inspect+0x150>
        action->area_id = g_img_mgmt_state.area_id;
   135f8:	491a      	ldr	r1, [pc, #104]	; (13664 <img_mgmt_impl_upload_inspect+0x19c>)
   135fa:	680b      	ldr	r3, [r1, #0]
   135fc:	60e3      	str	r3, [r4, #12]
        action->size = g_img_mgmt_state.size;
   135fe:	688b      	ldr	r3, [r1, #8]
   13600:	6023      	str	r3, [r4, #0]
   13602:	2300      	movs	r3, #0
   13604:	6063      	str	r3, [r4, #4]
        if (req->off != g_img_mgmt_state.off) {
   13606:	e9d0 2300 	ldrd	r2, r3, [r0]
   1360a:	6848      	ldr	r0, [r1, #4]
   1360c:	2100      	movs	r1, #0
   1360e:	428b      	cmp	r3, r1
   13610:	bf08      	it	eq
   13612:	4282      	cmpeq	r2, r0
   13614:	d0de      	beq.n	135d4 <img_mgmt_impl_upload_inspect+0x10c>
            return 0;
   13616:	2300      	movs	r3, #0
}
   13618:	4618      	mov	r0, r3
   1361a:	b004      	add	sp, #16
   1361c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = flash_area_open(action->area_id, &fa);
   13620:	a903      	add	r1, sp, #12
   13622:	7b20      	ldrb	r0, [r4, #12]
   13624:	f7fd f9e6 	bl	109f4 <flash_area_open>
        if (rc) {
   13628:	b120      	cbz	r0, 13634 <img_mgmt_impl_upload_inspect+0x16c>
            *errstr = img_mgmt_err_str_flash_open_failed;
   1362a:	2300      	movs	r3, #0
   1362c:	f8c8 3000 	str.w	r3, [r8]
            return MGMT_ERR_EUNKNOWN;
   13630:	2301      	movs	r3, #1
   13632:	e7f1      	b.n	13618 <img_mgmt_impl_upload_inspect+0x150>
        rem_bytes = req->data_len % flash_area_align(fa);
   13634:	692d      	ldr	r5, [r5, #16]
   13636:	9803      	ldr	r0, [sp, #12]
   13638:	f7fd fa6d 	bl	10b16 <flash_area_align>
   1363c:	fbb5 f3f0 	udiv	r3, r5, r0
   13640:	fb00 5013 	mls	r0, r0, r3, r5
        if (rem_bytes) {
   13644:	f010 0fff 	tst.w	r0, #255	; 0xff
   13648:	d0d2      	beq.n	135f0 <img_mgmt_impl_upload_inspect+0x128>
            action->write_bytes -= rem_bytes;
   1364a:	b2c0      	uxtb	r0, r0
   1364c:	68a3      	ldr	r3, [r4, #8]
   1364e:	1a18      	subs	r0, r3, r0
   13650:	60a0      	str	r0, [r4, #8]
   13652:	e7cd      	b.n	135f0 <img_mgmt_impl_upload_inspect+0x128>
            return MGMT_ERR_EINVAL;
   13654:	2303      	movs	r3, #3
   13656:	e7df      	b.n	13618 <img_mgmt_impl_upload_inspect+0x150>
                return MGMT_ERR_EUNKNOWN;
   13658:	2301      	movs	r3, #1
   1365a:	e7dd      	b.n	13618 <img_mgmt_impl_upload_inspect+0x150>
            return MGMT_ERR_EUNKNOWN;
   1365c:	2301      	movs	r3, #1
   1365e:	e7db      	b.n	13618 <img_mgmt_impl_upload_inspect+0x150>
   13660:	96f3b83d 	.word	0x96f3b83d
   13664:	20003588 	.word	0x20003588
   13668:	20003595 	.word	0x20003595

0001366c <img_mgmt_impl_erase_slot>:

int
img_mgmt_impl_erase_slot(void)
{
   1366c:	b500      	push	{lr}
   1366e:	b083      	sub	sp, #12
    const struct flash_area *fa;
    bool empty;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_1, &fa);
   13670:	a901      	add	r1, sp, #4
   13672:	2002      	movs	r0, #2
   13674:	f7fd f9be 	bl	109f4 <flash_area_open>
    if (rc != 0) {
   13678:	b120      	cbz	r0, 13684 <img_mgmt_impl_erase_slot+0x18>
        return MGMT_ERR_EUNKNOWN;
   1367a:	2301      	movs	r3, #1
            return MGMT_ERR_EUNKNOWN;
        }
    }

    return 0;
}
   1367c:	4618      	mov	r0, r3
   1367e:	b003      	add	sp, #12
   13680:	f85d fb04 	ldr.w	pc, [sp], #4
    rc = flash_area_is_empty(fa, &empty);
   13684:	f10d 0103 	add.w	r1, sp, #3
   13688:	9801      	ldr	r0, [sp, #4]
   1368a:	f7fd fa4e 	bl	10b2a <flash_area_is_empty>
    if (rc != 0) {
   1368e:	4603      	mov	r3, r0
   13690:	b968      	cbnz	r0, 136ae <img_mgmt_impl_erase_slot+0x42>
    if (!empty) {
   13692:	f89d 2003 	ldrb.w	r2, [sp, #3]
   13696:	2a00      	cmp	r2, #0
   13698:	d1f0      	bne.n	1367c <img_mgmt_impl_erase_slot+0x10>
        rc = flash_area_erase(fa, 0, fa->fa_size);
   1369a:	9801      	ldr	r0, [sp, #4]
   1369c:	6882      	ldr	r2, [r0, #8]
   1369e:	2100      	movs	r1, #0
   136a0:	f7fd fa26 	bl	10af0 <flash_area_erase>
        if (rc != 0) {
   136a4:	4603      	mov	r3, r0
   136a6:	2800      	cmp	r0, #0
   136a8:	d0e8      	beq.n	1367c <img_mgmt_impl_erase_slot+0x10>
            return MGMT_ERR_EUNKNOWN;
   136aa:	2301      	movs	r3, #1
   136ac:	e7e6      	b.n	1367c <img_mgmt_impl_erase_slot+0x10>
        return MGMT_ERR_EUNKNOWN;
   136ae:	2301      	movs	r3, #1
   136b0:	e7e4      	b.n	1367c <img_mgmt_impl_erase_slot+0x10>

000136b2 <img_mgmt_impl_write_pending>:

int
img_mgmt_impl_write_pending(int slot, bool permanent)
{
   136b2:	b5f0      	push	{r4, r5, r6, r7, lr}
   136b4:	b083      	sub	sp, #12
   136b6:	4604      	mov	r4, r0
   136b8:	460f      	mov	r7, r1
    uint32_t image_flags;
    uint8_t state_flags;
    int split_app_active;
    int rc;

    state_flags = img_mgmt_state_flags(slot);
   136ba:	f7ff fce7 	bl	1308c <img_mgmt_state_flags>
   136be:	4605      	mov	r5, r0
    split_app_active = split_app_active_get();
   136c0:	f7f9 fa08 	bl	cad4 <split_app_active_get>
   136c4:	4606      	mov	r6, r0

    /* Unconfirmed slots are always runable.  A confirmed slot can only be
     * run if it is a loader in a split image setup.
     */
    if (state_flags & IMG_MGMT_STATE_F_CONFIRMED &&
   136c6:	f015 0f02 	tst.w	r5, #2
   136ca:	d001      	beq.n	136d0 <img_mgmt_impl_write_pending+0x1e>
   136cc:	bb6c      	cbnz	r4, 1372a <img_mgmt_impl_write_pending+0x78>
        (slot != 0 || !split_app_active)) {
   136ce:	b370      	cbz	r0, 1372e <img_mgmt_impl_write_pending+0x7c>

        return MGMT_ERR_EBADSTATE;
    }

    rc = img_mgmt_read_info(slot, NULL, NULL, &image_flags);
   136d0:	ab01      	add	r3, sp, #4
   136d2:	2200      	movs	r2, #0
   136d4:	4611      	mov	r1, r2
   136d6:	4620      	mov	r0, r4
   136d8:	f7ff fad0 	bl	12c7c <img_mgmt_read_info>
    if (rc != 0) {
   136dc:	bb48      	cbnz	r0, 13732 <img_mgmt_impl_write_pending+0x80>
        return MGMT_ERR_EUNKNOWN;
    }

    if (!(image_flags & IMAGE_F_NON_BOOTABLE)) {
   136de:	9b01      	ldr	r3, [sp, #4]
   136e0:	f013 0f10 	tst.w	r3, #16
   136e4:	d114      	bne.n	13710 <img_mgmt_impl_write_pending+0x5e>
        /* Unified image or loader. */
        if (!split_app_active) {
   136e6:	b13e      	cbz	r6, 136f8 <img_mgmt_impl_write_pending+0x46>
            if (rc != 0) {
                return MGMT_ERR_EUNKNOWN;
            }
        } else {
            /* Currently loader + app; testing loader-only. */
            if (permanent) {
   136e8:	b16f      	cbz	r7, 13706 <img_mgmt_impl_write_pending+0x54>
                rc = split_write_split(SPLIT_MODE_LOADER);
   136ea:	2000      	movs	r0, #0
   136ec:	f7f9 fa04 	bl	caf8 <split_write_split>
   136f0:	4603      	mov	r3, r0
            } else {
                rc = split_write_split(SPLIT_MODE_TEST_LOADER);
            }
            if (rc != 0) {
   136f2:	b1fb      	cbz	r3, 13734 <img_mgmt_impl_write_pending+0x82>
                return MGMT_ERR_EUNKNOWN;
   136f4:	2301      	movs	r3, #1
   136f6:	e01d      	b.n	13734 <img_mgmt_impl_write_pending+0x82>
            rc = boot_set_pending(permanent);
   136f8:	4638      	mov	r0, r7
   136fa:	f016 fff6 	bl	2a6ea <boot_set_pending>
            if (rc != 0) {
   136fe:	4603      	mov	r3, r0
   13700:	b1c0      	cbz	r0, 13734 <img_mgmt_impl_write_pending+0x82>
                return MGMT_ERR_EUNKNOWN;
   13702:	2301      	movs	r3, #1
   13704:	e016      	b.n	13734 <img_mgmt_impl_write_pending+0x82>
                rc = split_write_split(SPLIT_MODE_TEST_LOADER);
   13706:	2003      	movs	r0, #3
   13708:	f7f9 f9f6 	bl	caf8 <split_write_split>
   1370c:	4603      	mov	r3, r0
   1370e:	e7f0      	b.n	136f2 <img_mgmt_impl_write_pending+0x40>
            }
        }
    } else {
        /* Testing split app. */
        if (permanent) {
   13710:	b137      	cbz	r7, 13720 <img_mgmt_impl_write_pending+0x6e>
            rc = split_write_split(SPLIT_MODE_APP);
   13712:	2002      	movs	r0, #2
   13714:	f7f9 f9f0 	bl	caf8 <split_write_split>
   13718:	4603      	mov	r3, r0
        } else {
            rc = split_write_split(SPLIT_MODE_TEST_APP);
        }
        if (rc != 0) {
   1371a:	b15b      	cbz	r3, 13734 <img_mgmt_impl_write_pending+0x82>
            return MGMT_ERR_EUNKNOWN;
   1371c:	2301      	movs	r3, #1
   1371e:	e009      	b.n	13734 <img_mgmt_impl_write_pending+0x82>
            rc = split_write_split(SPLIT_MODE_TEST_APP);
   13720:	2001      	movs	r0, #1
   13722:	f7f9 f9e9 	bl	caf8 <split_write_split>
   13726:	4603      	mov	r3, r0
   13728:	e7f7      	b.n	1371a <img_mgmt_impl_write_pending+0x68>
        return MGMT_ERR_EBADSTATE;
   1372a:	2306      	movs	r3, #6
   1372c:	e002      	b.n	13734 <img_mgmt_impl_write_pending+0x82>
   1372e:	2306      	movs	r3, #6
   13730:	e000      	b.n	13734 <img_mgmt_impl_write_pending+0x82>
        return MGMT_ERR_EUNKNOWN;
   13732:	2301      	movs	r3, #1
        }
    }

    return 0;
}
   13734:	4618      	mov	r0, r3
   13736:	b003      	add	sp, #12
   13738:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001373a <img_mgmt_impl_write_confirmed>:

int
img_mgmt_impl_write_confirmed(void)
{
   1373a:	b508      	push	{r3, lr}
    int rc;

    /* Confirm the unified image or loader in slot 0. */
    rc = boot_set_confirmed();
   1373c:	f017 f81e 	bl	2a77c <boot_set_confirmed>
    if (rc != 0) {
   13740:	b110      	cbz	r0, 13748 <img_mgmt_impl_write_confirmed+0xe>
        return MGMT_ERR_EUNKNOWN;
   13742:	2301      	movs	r3, #1
            return MGMT_ERR_EUNKNOWN;
        }
    }

    return 0;
}
   13744:	4618      	mov	r0, r3
   13746:	bd08      	pop	{r3, pc}
    if (split_app_active_get()) {
   13748:	f7f9 f9c4 	bl	cad4 <split_app_active_get>
   1374c:	b138      	cbz	r0, 1375e <img_mgmt_impl_write_confirmed+0x24>
        rc = split_write_split(SPLIT_MODE_APP);
   1374e:	2002      	movs	r0, #2
   13750:	f7f9 f9d2 	bl	caf8 <split_write_split>
        if (rc != 0) {
   13754:	4603      	mov	r3, r0
   13756:	2800      	cmp	r0, #0
   13758:	d0f4      	beq.n	13744 <img_mgmt_impl_write_confirmed+0xa>
            return MGMT_ERR_EUNKNOWN;
   1375a:	2301      	movs	r3, #1
   1375c:	e7f2      	b.n	13744 <img_mgmt_impl_write_confirmed+0xa>
        rc = split_write_split(SPLIT_MODE_LOADER);
   1375e:	2000      	movs	r0, #0
   13760:	f7f9 f9ca 	bl	caf8 <split_write_split>
        if (rc != 0) {
   13764:	4603      	mov	r3, r0
   13766:	2800      	cmp	r0, #0
   13768:	d0ec      	beq.n	13744 <img_mgmt_impl_write_confirmed+0xa>
            return MGMT_ERR_EUNKNOWN;
   1376a:	2301      	movs	r3, #1
   1376c:	e7ea      	b.n	13744 <img_mgmt_impl_write_confirmed+0xa>

0001376e <img_mgmt_impl_read>:

int
img_mgmt_impl_read(int slot, unsigned int offset, void *dst,
                   unsigned int num_bytes)
{
   1376e:	b570      	push	{r4, r5, r6, lr}
   13770:	b082      	sub	sp, #8
   13772:	460c      	mov	r4, r1
   13774:	4615      	mov	r5, r2
   13776:	461e      	mov	r6, r3
    const struct flash_area *fa;
    int area_id;
    int rc;

    area_id = flash_area_id_from_image_slot(slot);
   13778:	f7fd f9f1 	bl	10b5e <flash_area_id_from_image_slot>
    rc = flash_area_open(area_id, &fa);
   1377c:	a901      	add	r1, sp, #4
   1377e:	b2c0      	uxtb	r0, r0
   13780:	f7fd f938 	bl	109f4 <flash_area_open>
    if (rc != 0) {
   13784:	b118      	cbz	r0, 1378e <img_mgmt_impl_read+0x20>
        return MGMT_ERR_EUNKNOWN;
   13786:	2301      	movs	r3, #1
    if (rc != 0) {
        return MGMT_ERR_EUNKNOWN;
    }

    return 0;
}
   13788:	4618      	mov	r0, r3
   1378a:	b002      	add	sp, #8
   1378c:	bd70      	pop	{r4, r5, r6, pc}
    rc = flash_area_read(fa, offset, dst, num_bytes);
   1378e:	4633      	mov	r3, r6
   13790:	462a      	mov	r2, r5
   13792:	4621      	mov	r1, r4
   13794:	9801      	ldr	r0, [sp, #4]
   13796:	f7fd f985 	bl	10aa4 <flash_area_read>
    if (rc != 0) {
   1379a:	4603      	mov	r3, r0
   1379c:	2800      	cmp	r0, #0
   1379e:	d0f3      	beq.n	13788 <img_mgmt_impl_read+0x1a>
        return MGMT_ERR_EUNKNOWN;
   137a0:	2301      	movs	r3, #1
   137a2:	e7f1      	b.n	13788 <img_mgmt_impl_read+0x1a>

000137a4 <img_mgmt_impl_write_image_data>:

#else
int
img_mgmt_impl_write_image_data(unsigned int offset, const void *data,
                               unsigned int num_bytes, bool last)
{
   137a4:	b570      	push	{r4, r5, r6, lr}
   137a6:	b082      	sub	sp, #8
   137a8:	4604      	mov	r4, r0
   137aa:	460d      	mov	r5, r1
   137ac:	4616      	mov	r6, r2
    const struct flash_area *fa;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_1, &fa);
   137ae:	a901      	add	r1, sp, #4
   137b0:	2002      	movs	r0, #2
   137b2:	f7fd f91f 	bl	109f4 <flash_area_open>
    if (rc != 0) {
   137b6:	b118      	cbz	r0, 137c0 <img_mgmt_impl_write_image_data+0x1c>
        return MGMT_ERR_EUNKNOWN;
   137b8:	2301      	movs	r3, #1
    if (rc != 0) {
        return MGMT_ERR_EUNKNOWN;
    }

    return 0;
}
   137ba:	4618      	mov	r0, r3
   137bc:	b002      	add	sp, #8
   137be:	bd70      	pop	{r4, r5, r6, pc}
    rc = flash_area_write(fa, offset, data, num_bytes);
   137c0:	4633      	mov	r3, r6
   137c2:	462a      	mov	r2, r5
   137c4:	4621      	mov	r1, r4
   137c6:	9801      	ldr	r0, [sp, #4]
   137c8:	f7fd f97f 	bl	10aca <flash_area_write>
    if (rc != 0) {
   137cc:	4603      	mov	r3, r0
   137ce:	2800      	cmp	r0, #0
   137d0:	d0f3      	beq.n	137ba <img_mgmt_impl_write_image_data+0x16>
        return MGMT_ERR_EUNKNOWN;
   137d2:	2301      	movs	r3, #1
   137d4:	e7f1      	b.n	137ba <img_mgmt_impl_write_image_data+0x16>

000137d6 <img_mgmt_impl_erase_image_data>:
#endif

int
img_mgmt_impl_erase_image_data(unsigned int off, unsigned int num_bytes)
{
   137d6:	b530      	push	{r4, r5, lr}
   137d8:	b083      	sub	sp, #12
   137da:	4604      	mov	r4, r0
   137dc:	460d      	mov	r5, r1
    const struct flash_area *fa;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_1, &fa);
   137de:	a901      	add	r1, sp, #4
   137e0:	2002      	movs	r0, #2
   137e2:	f7fd f907 	bl	109f4 <flash_area_open>
    if (rc != 0) {
   137e6:	b118      	cbz	r0, 137f0 <img_mgmt_impl_erase_image_data+0x1a>
        return MGMT_ERR_EUNKNOWN;
   137e8:	2301      	movs	r3, #1
    if (rc != 0) {
        return MGMT_ERR_EUNKNOWN;
    }

    return 0;
}
   137ea:	4618      	mov	r0, r3
   137ec:	b003      	add	sp, #12
   137ee:	bd30      	pop	{r4, r5, pc}
    rc = flash_area_erase(fa, off, num_bytes);
   137f0:	462a      	mov	r2, r5
   137f2:	4621      	mov	r1, r4
   137f4:	9801      	ldr	r0, [sp, #4]
   137f6:	f7fd f97b 	bl	10af0 <flash_area_erase>
    if (rc != 0) {
   137fa:	4603      	mov	r3, r0
   137fc:	2800      	cmp	r0, #0
   137fe:	d0f4      	beq.n	137ea <img_mgmt_impl_erase_image_data+0x14>
        return MGMT_ERR_EUNKNOWN;
   13800:	2301      	movs	r3, #1
   13802:	e7f2      	b.n	137ea <img_mgmt_impl_erase_image_data+0x14>

00013804 <img_mgmt_impl_swap_type>:
}
#endif

int
img_mgmt_impl_swap_type(void)
{
   13804:	b508      	push	{r3, lr}
    switch (boot_swap_type()) {
   13806:	f016 ff6b 	bl	2a6e0 <boot_swap_type>
   1380a:	3801      	subs	r0, #1
   1380c:	2803      	cmp	r0, #3
   1380e:	d807      	bhi.n	13820 <img_mgmt_impl_swap_type+0x1c>
   13810:	e8df f000 	tbb	[pc, r0]
   13814:	04021210 	.word	0x04021210
    case BOOT_SWAP_TYPE_NONE:
        return IMG_MGMT_SWAP_TYPE_NONE;
    case BOOT_SWAP_TYPE_TEST:
        return IMG_MGMT_SWAP_TYPE_TEST;
    case BOOT_SWAP_TYPE_PERM:
        return IMG_MGMT_SWAP_TYPE_PERM;
   13818:	2002      	movs	r0, #2
        return IMG_MGMT_SWAP_TYPE_REVERT;
    default:
        assert(0);
        return IMG_MGMT_SWAP_TYPE_NONE;
    }
}
   1381a:	bd08      	pop	{r3, pc}
        return IMG_MGMT_SWAP_TYPE_REVERT;
   1381c:	2003      	movs	r0, #3
   1381e:	e7fc      	b.n	1381a <img_mgmt_impl_swap_type+0x16>
        assert(0);
   13820:	f7f8 fce2 	bl	c1e8 <hal_debugger_connected>
   13824:	b100      	cbz	r0, 13828 <img_mgmt_impl_swap_type+0x24>
   13826:	be01      	bkpt	0x0001
   13828:	2300      	movs	r3, #0
   1382a:	461a      	mov	r2, r3
   1382c:	4619      	mov	r1, r3
   1382e:	4618      	mov	r0, r3
   13830:	f7f9 f98e 	bl	cb50 <__assert_func>
        return IMG_MGMT_SWAP_TYPE_NONE;
   13834:	2000      	movs	r0, #0
   13836:	e7f0      	b.n	1381a <img_mgmt_impl_swap_type+0x16>
        return IMG_MGMT_SWAP_TYPE_TEST;
   13838:	2001      	movs	r0, #1
   1383a:	e7ee      	b.n	1381a <img_mgmt_impl_swap_type+0x16>

0001383c <img_mgmt_module_init>:

void
img_mgmt_module_init(void)
{
   1383c:	b508      	push	{r3, lr}
    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1383e:	4b08      	ldr	r3, [pc, #32]	; (13860 <img_mgmt_module_init+0x24>)
   13840:	781b      	ldrb	r3, [r3, #0]
   13842:	b113      	cbz	r3, 1384a <img_mgmt_module_init+0xe>

    img_mgmt_register_group();
   13844:	f7ff fc1a 	bl	1307c <img_mgmt_register_group>
}
   13848:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   1384a:	f7f8 fccd 	bl	c1e8 <hal_debugger_connected>
   1384e:	b100      	cbz	r0, 13852 <img_mgmt_module_init+0x16>
   13850:	be01      	bkpt	0x0001
   13852:	2300      	movs	r3, #0
   13854:	461a      	mov	r2, r3
   13856:	4619      	mov	r1, r3
   13858:	4618      	mov	r0, r3
   1385a:	f7f9 f979 	bl	cb50 <__assert_func>
   1385e:	bf00      	nop
   13860:	20003584 	.word	0x20003584

00013864 <img_mgmt_log_gen>:
    modlog_append_mbuf(MYNEWT_VAL(IMG_MGMT_LOG_MOD), LOG_LEVEL_INFO,
                       LOG_ETYPE_CBOR, om);
#endif

    return 0;
}
   13864:	2000      	movs	r0, #0
   13866:	4770      	bx	lr

00013868 <img_mgmt_impl_log_upload_start>:

int
img_mgmt_impl_log_upload_start(int status)
{
   13868:	b508      	push	{r3, lr}
    return img_mgmt_log_gen(IMG_MGMT_LOG_EV_UPSTART, status, NULL);
   1386a:	2200      	movs	r2, #0
   1386c:	4601      	mov	r1, r0
   1386e:	4802      	ldr	r0, [pc, #8]	; (13878 <img_mgmt_impl_log_upload_start+0x10>)
   13870:	f7ff fff8 	bl	13864 <img_mgmt_log_gen>
}
   13874:	bd08      	pop	{r3, pc}
   13876:	bf00      	nop
   13878:	00031c98 	.word	0x00031c98

0001387c <img_mgmt_impl_log_upload_done>:

int
img_mgmt_impl_log_upload_done(int status, const uint8_t *hash)
{
   1387c:	b508      	push	{r3, lr}
    return img_mgmt_log_gen(IMG_MGMT_LOG_EV_UPDONE, 0, hash);
   1387e:	460a      	mov	r2, r1
   13880:	2100      	movs	r1, #0
   13882:	4802      	ldr	r0, [pc, #8]	; (1388c <img_mgmt_impl_log_upload_done+0x10>)
   13884:	f7ff ffee 	bl	13864 <img_mgmt_log_gen>
}
   13888:	bd08      	pop	{r3, pc}
   1388a:	bf00      	nop
   1388c:	00031c90 	.word	0x00031c90

00013890 <img_mgmt_impl_log_pending>:

int
img_mgmt_impl_log_pending(int status, const uint8_t *hash)
{
   13890:	b508      	push	{r3, lr}
    return img_mgmt_log_gen(IMG_MGMT_LOG_EV_PEND, status, hash);
   13892:	460a      	mov	r2, r1
   13894:	4601      	mov	r1, r0
   13896:	4802      	ldr	r0, [pc, #8]	; (138a0 <img_mgmt_impl_log_pending+0x10>)
   13898:	f7ff ffe4 	bl	13864 <img_mgmt_log_gen>
}
   1389c:	bd08      	pop	{r3, pc}
   1389e:	bf00      	nop
   138a0:	00031c88 	.word	0x00031c88

000138a4 <img_mgmt_impl_log_confirm>:

int
img_mgmt_impl_log_confirm(int status, const uint8_t *hash)
{
   138a4:	b508      	push	{r3, lr}
    return img_mgmt_log_gen(IMG_MGMT_LOG_EV_CONF, status, hash);
   138a6:	460a      	mov	r2, r1
   138a8:	4601      	mov	r1, r0
   138aa:	4802      	ldr	r0, [pc, #8]	; (138b4 <img_mgmt_impl_log_confirm+0x10>)
   138ac:	f7ff ffda 	bl	13864 <img_mgmt_log_gen>
}
   138b0:	bd08      	pop	{r3, pc}
   138b2:	bf00      	nop
   138b4:	00031c80 	.word	0x00031c80

000138b8 <mynewt_log_mgmt_find_log>:
    void *arg;
};

static struct log *
mynewt_log_mgmt_find_log(const char *log_name)
{
   138b8:	b538      	push	{r3, r4, r5, lr}
   138ba:	4605      	mov	r5, r0
    struct log *log;

    log = NULL;
   138bc:	2400      	movs	r4, #0
    while (1) {
        log = log_list_get_next(log);
   138be:	4620      	mov	r0, r4
   138c0:	f7fd fb9a 	bl	10ff8 <log_list_get_next>
        if (log == NULL) {
   138c4:	4604      	mov	r4, r0
   138c6:	b128      	cbz	r0, 138d4 <mynewt_log_mgmt_find_log+0x1c>
            return NULL;
        }

        if (strcmp(log->l_name, log_name) == 0) {
   138c8:	4629      	mov	r1, r5
   138ca:	6800      	ldr	r0, [r0, #0]
   138cc:	f7fb f8b6 	bl	ea3c <strcmp>
   138d0:	2800      	cmp	r0, #0
   138d2:	d1f4      	bne.n	138be <mynewt_log_mgmt_find_log+0x6>
            return log;
        }
    }
}
   138d4:	4620      	mov	r0, r4
   138d6:	bd38      	pop	{r3, r4, r5, pc}

000138d8 <mynewt_log_mgmt_walk_cb>:

static int
mynewt_log_mgmt_walk_cb(struct log *log, struct log_offset *log_offset,
                        const struct log_entry_hdr *leh,
                        const void *dptr, uint16_t len)
{
   138d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   138dc:	b08d      	sub	sp, #52	; 0x34
   138de:	f8bd 5058 	ldrh.w	r5, [sp, #88]	; 0x58
    int read_len;
    int offset;
    int rc;

    rc = 0;
    mynewt_log_mgmt_walk_arg = log_offset->lo_arg;
   138e2:	690e      	ldr	r6, [r1, #16]
     * If specified timestamp == 0: encode entries whose index >=
     *     specified index.
     * Else: encode entries whose timestamp >= specified timestamp and whose
     *      index >= specified index
     */
    if (log_offset->lo_ts == 0) {
   138e4:	e9d1 ab00 	ldrd	sl, fp, [r1]
   138e8:	ea5a 040b 	orrs.w	r4, sl, fp
   138ec:	d128      	bne.n	13940 <mynewt_log_mgmt_walk_cb+0x68>
        if (log_offset->lo_index > leh->ue_index) {
   138ee:	688c      	ldr	r4, [r1, #8]
   138f0:	6891      	ldr	r1, [r2, #8]
   138f2:	428c      	cmp	r4, r1
   138f4:	d853      	bhi.n	1399e <mynewt_log_mgmt_walk_cb+0xc6>
               (leh->ue_ts == log_offset->lo_ts &&
                leh->ue_index < log_offset->lo_index)) {
        return 0;
    }

    entry.ts = leh->ue_ts;
   138f6:	6814      	ldr	r4, [r2, #0]
   138f8:	6851      	ldr	r1, [r2, #4]
   138fa:	9402      	str	r4, [sp, #8]
   138fc:	9103      	str	r1, [sp, #12]
    entry.index = leh->ue_index;
   138fe:	6891      	ldr	r1, [r2, #8]
   13900:	9104      	str	r1, [sp, #16]
    entry.module = leh->ue_module;
   13902:	7b11      	ldrb	r1, [r2, #12]
   13904:	f88d 101c 	strb.w	r1, [sp, #28]
    entry.level = leh->ue_level;
   13908:	7b51      	ldrb	r1, [r2, #13]
   1390a:	f88d 101d 	strb.w	r1, [sp, #29]

    entry.type = leh->ue_etype;
   1390e:	7b94      	ldrb	r4, [r2, #14]
   13910:	f89d 101e 	ldrb.w	r1, [sp, #30]
   13914:	f364 0103 	bfi	r1, r4, #0, #4
    entry.flags = leh->ue_flags;
   13918:	0927      	lsrs	r7, r4, #4
   1391a:	f367 1107 	bfi	r1, r7, #4, #4
   1391e:	f88d 101e 	strb.w	r1, [sp, #30]
    entry.imghash = (leh->ue_flags & LOG_FLAGS_IMG_HASH) ?
        leh->ue_imghash : NULL;
   13922:	f014 0f10 	tst.w	r4, #16
   13926:	d01d      	beq.n	13964 <mynewt_log_mgmt_walk_cb+0x8c>
   13928:	320f      	adds	r2, #15
   1392a:	4698      	mov	r8, r3
   1392c:	4607      	mov	r7, r0
    entry.imghash = (leh->ue_flags & LOG_FLAGS_IMG_HASH) ?
   1392e:	9208      	str	r2, [sp, #32]
    entry.len = len;
   13930:	9506      	str	r5, [sp, #24]
    entry.data = mynewt_log_mgmt_walk_arg->chunk;
   13932:	f106 0904 	add.w	r9, r6, #4
   13936:	f8cd 9014 	str.w	r9, [sp, #20]
    rc = 0;
   1393a:	2300      	movs	r3, #0

    for (offset = 0; offset < len; offset += LOG_MGMT_CHUNK_LEN) {
   1393c:	461c      	mov	r4, r3
   1393e:	e027      	b.n	13990 <mynewt_log_mgmt_walk_cb+0xb8>
    } else if (leh->ue_ts < log_offset->lo_ts   ||
   13940:	f8d2 8000 	ldr.w	r8, [r2]
   13944:	f8d2 9004 	ldr.w	r9, [r2, #4]
   13948:	45d0      	cmp	r8, sl
   1394a:	eb79 040b 	sbcs.w	r4, r9, fp
   1394e:	db2b      	blt.n	139a8 <mynewt_log_mgmt_walk_cb+0xd0>
   13950:	45cb      	cmp	fp, r9
   13952:	bf08      	it	eq
   13954:	45c2      	cmpeq	sl, r8
   13956:	d1ce      	bne.n	138f6 <mynewt_log_mgmt_walk_cb+0x1e>
                leh->ue_index < log_offset->lo_index)) {
   13958:	6894      	ldr	r4, [r2, #8]
   1395a:	6889      	ldr	r1, [r1, #8]
               (leh->ue_ts == log_offset->lo_ts &&
   1395c:	428c      	cmp	r4, r1
   1395e:	d2ca      	bcs.n	138f6 <mynewt_log_mgmt_walk_cb+0x1e>
        return 0;
   13960:	2300      	movs	r3, #0
   13962:	e01d      	b.n	139a0 <mynewt_log_mgmt_walk_cb+0xc8>
        leh->ue_imghash : NULL;
   13964:	2200      	movs	r2, #0
   13966:	e7e0      	b.n	1392a <mynewt_log_mgmt_walk_cb+0x52>
        if (len - offset < LOG_MGMT_CHUNK_LEN) {
            read_len = len - offset;
        } else {
            read_len = LOG_MGMT_CHUNK_LEN;
        }
        entry.offset = offset;
   13968:	9409      	str	r4, [sp, #36]	; 0x24
        entry.chunklen = read_len;
   1396a:	920a      	str	r2, [sp, #40]	; 0x28

        rc = log_read_body(log, dptr, mynewt_log_mgmt_walk_arg->chunk, offset,
   1396c:	b292      	uxth	r2, r2
   1396e:	9200      	str	r2, [sp, #0]
   13970:	b2a3      	uxth	r3, r4
   13972:	464a      	mov	r2, r9
   13974:	4641      	mov	r1, r8
   13976:	4638      	mov	r0, r7
   13978:	f7fd fc8d 	bl	11296 <log_read_body>
                           read_len);
        if (rc < 0) {
   1397c:	2800      	cmp	r0, #0
   1397e:	db15      	blt.n	139ac <mynewt_log_mgmt_walk_cb+0xd4>
            return LOG_MGMT_ERR_EUNKNOWN;
        }
        rc = mynewt_log_mgmt_walk_arg->cb(&entry, mynewt_log_mgmt_walk_arg->arg);
   13980:	6833      	ldr	r3, [r6, #0]
   13982:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
   13986:	a802      	add	r0, sp, #8
   13988:	4798      	blx	r3
        if (rc) {
   1398a:	4603      	mov	r3, r0
   1398c:	b940      	cbnz	r0, 139a0 <mynewt_log_mgmt_walk_cb+0xc8>
    for (offset = 0; offset < len; offset += LOG_MGMT_CHUNK_LEN) {
   1398e:	3480      	adds	r4, #128	; 0x80
   13990:	42a5      	cmp	r5, r4
   13992:	dd05      	ble.n	139a0 <mynewt_log_mgmt_walk_cb+0xc8>
        if (len - offset < LOG_MGMT_CHUNK_LEN) {
   13994:	1b2a      	subs	r2, r5, r4
   13996:	2a7f      	cmp	r2, #127	; 0x7f
   13998:	dde6      	ble.n	13968 <mynewt_log_mgmt_walk_cb+0x90>
            read_len = LOG_MGMT_CHUNK_LEN;
   1399a:	2280      	movs	r2, #128	; 0x80
   1399c:	e7e4      	b.n	13968 <mynewt_log_mgmt_walk_cb+0x90>
            return 0;
   1399e:	2300      	movs	r3, #0
            break;
        }
    }

    return rc;
}
   139a0:	4618      	mov	r0, r3
   139a2:	b00d      	add	sp, #52	; 0x34
   139a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return 0;
   139a8:	2300      	movs	r3, #0
   139aa:	e7f9      	b.n	139a0 <mynewt_log_mgmt_walk_cb+0xc8>
            return LOG_MGMT_ERR_EUNKNOWN;
   139ac:	2301      	movs	r3, #1
   139ae:	e7f7      	b.n	139a0 <mynewt_log_mgmt_walk_cb+0xc8>

000139b0 <log_mgmt_impl_get_log>:
{
   139b0:	b570      	push	{r4, r5, r6, lr}
   139b2:	4605      	mov	r5, r0
   139b4:	460e      	mov	r6, r1
    for (i = 0; i <= idx; i++) {
   139b6:	2400      	movs	r4, #0
    log = NULL;
   139b8:	4623      	mov	r3, r4
    for (i = 0; i <= idx; i++) {
   139ba:	42ac      	cmp	r4, r5
   139bc:	dc06      	bgt.n	139cc <log_mgmt_impl_get_log+0x1c>
        log = log_list_get_next(log);
   139be:	4618      	mov	r0, r3
   139c0:	f7fd fb1a 	bl	10ff8 <log_list_get_next>
        if (log == NULL) {
   139c4:	4603      	mov	r3, r0
   139c6:	b140      	cbz	r0, 139da <log_mgmt_impl_get_log+0x2a>
    for (i = 0; i <= idx; i++) {
   139c8:	3401      	adds	r4, #1
   139ca:	e7f6      	b.n	139ba <log_mgmt_impl_get_log+0xa>
    out_log->name = log->l_name;
   139cc:	681a      	ldr	r2, [r3, #0]
   139ce:	6032      	str	r2, [r6, #0]
    out_log->type = log->l_log->log_type;
   139d0:	685b      	ldr	r3, [r3, #4]
   139d2:	681b      	ldr	r3, [r3, #0]
   139d4:	6073      	str	r3, [r6, #4]
    return 0;
   139d6:	2000      	movs	r0, #0
}
   139d8:	bd70      	pop	{r4, r5, r6, pc}
            return LOG_MGMT_ERR_ENOENT;
   139da:	2005      	movs	r0, #5
   139dc:	e7fc      	b.n	139d8 <log_mgmt_impl_get_log+0x28>

000139de <log_mgmt_impl_get_module>:
{
   139de:	b510      	push	{r4, lr}
   139e0:	460c      	mov	r4, r1
    name = LOG_MODULE_STR(idx);
   139e2:	b2c0      	uxtb	r0, r0
   139e4:	f7fd fb10 	bl	11008 <log_module_get_name>
    if (name == NULL) {
   139e8:	b110      	cbz	r0, 139f0 <log_mgmt_impl_get_module+0x12>
        *out_module_name = name;
   139ea:	6020      	str	r0, [r4, #0]
        return 0;
   139ec:	2000      	movs	r0, #0
}
   139ee:	bd10      	pop	{r4, pc}
        return LOG_MGMT_ERR_ENOENT;
   139f0:	2005      	movs	r0, #5
   139f2:	e7fc      	b.n	139ee <log_mgmt_impl_get_module+0x10>

000139f4 <log_mgmt_impl_get_level>:
    if (idx >= LOG_LEVEL_MAX) {
   139f4:	280e      	cmp	r0, #14
   139f6:	dc1d      	bgt.n	13a34 <log_mgmt_impl_get_level+0x40>
{
   139f8:	b538      	push	{r3, r4, r5, lr}
    name = LOG_LEVEL_STR(idx);
   139fa:	b158      	cbz	r0, 13a14 <log_mgmt_impl_get_level+0x20>
   139fc:	2801      	cmp	r0, #1
   139fe:	d013      	beq.n	13a28 <log_mgmt_impl_get_level+0x34>
   13a00:	2802      	cmp	r0, #2
   13a02:	d013      	beq.n	13a2c <log_mgmt_impl_get_level+0x38>
   13a04:	2803      	cmp	r0, #3
   13a06:	d013      	beq.n	13a30 <log_mgmt_impl_get_level+0x3c>
   13a08:	2804      	cmp	r0, #4
   13a0a:	d001      	beq.n	13a10 <log_mgmt_impl_get_level+0x1c>
   13a0c:	4d0b      	ldr	r5, [pc, #44]	; (13a3c <log_mgmt_impl_get_level+0x48>)
   13a0e:	e002      	b.n	13a16 <log_mgmt_impl_get_level+0x22>
   13a10:	4d0b      	ldr	r5, [pc, #44]	; (13a40 <log_mgmt_impl_get_level+0x4c>)
   13a12:	e000      	b.n	13a16 <log_mgmt_impl_get_level+0x22>
   13a14:	4d0b      	ldr	r5, [pc, #44]	; (13a44 <log_mgmt_impl_get_level+0x50>)
   13a16:	460c      	mov	r4, r1
    if (!strcmp(name, "UNKNOWN")) {
   13a18:	4908      	ldr	r1, [pc, #32]	; (13a3c <log_mgmt_impl_get_level+0x48>)
   13a1a:	4628      	mov	r0, r5
   13a1c:	f7fb f80e 	bl	ea3c <strcmp>
   13a20:	b150      	cbz	r0, 13a38 <log_mgmt_impl_get_level+0x44>
        *out_level_name = name;
   13a22:	6025      	str	r5, [r4, #0]
        return 0;
   13a24:	2000      	movs	r0, #0
}
   13a26:	bd38      	pop	{r3, r4, r5, pc}
    name = LOG_LEVEL_STR(idx);
   13a28:	4d07      	ldr	r5, [pc, #28]	; (13a48 <log_mgmt_impl_get_level+0x54>)
   13a2a:	e7f4      	b.n	13a16 <log_mgmt_impl_get_level+0x22>
   13a2c:	4d07      	ldr	r5, [pc, #28]	; (13a4c <log_mgmt_impl_get_level+0x58>)
   13a2e:	e7f2      	b.n	13a16 <log_mgmt_impl_get_level+0x22>
   13a30:	4d07      	ldr	r5, [pc, #28]	; (13a50 <log_mgmt_impl_get_level+0x5c>)
   13a32:	e7f0      	b.n	13a16 <log_mgmt_impl_get_level+0x22>
        return LOG_MGMT_ERR_ENOENT;
   13a34:	2005      	movs	r0, #5
}
   13a36:	4770      	bx	lr
        return LOG_MGMT_ERR_ENOENT;
   13a38:	2005      	movs	r0, #5
   13a3a:	e7f4      	b.n	13a26 <log_mgmt_impl_get_level+0x32>
   13a3c:	00031b38 	.word	0x00031b38
   13a40:	00031cc0 	.word	0x00031cc0
   13a44:	00031ca8 	.word	0x00031ca8
   13a48:	00031ca0 	.word	0x00031ca0
   13a4c:	00031cb0 	.word	0x00031cb0
   13a50:	00031cb8 	.word	0x00031cb8

00013a54 <log_mgmt_impl_get_next_idx>:
    *out_idx = g_log_info.li_next_index;
   13a54:	4b02      	ldr	r3, [pc, #8]	; (13a60 <log_mgmt_impl_get_next_idx+0xc>)
   13a56:	681b      	ldr	r3, [r3, #0]
   13a58:	6003      	str	r3, [r0, #0]
}
   13a5a:	2000      	movs	r0, #0
   13a5c:	4770      	bx	lr
   13a5e:	bf00      	nop
   13a60:	2000354c 	.word	0x2000354c

00013a64 <log_mgmt_impl_foreach_entry>:

int
log_mgmt_impl_foreach_entry(const char *log_name,
                            const struct log_mgmt_filter *filter,
                            log_mgmt_foreach_entry_fn *cb, void *arg)
{
   13a64:	b5f0      	push	{r4, r5, r6, r7, lr}
   13a66:	b0a9      	sub	sp, #164	; 0xa4
   13a68:	4604      	mov	r4, r0
   13a6a:	460f      	mov	r7, r1
   13a6c:	4616      	mov	r6, r2
   13a6e:	461d      	mov	r5, r3
    struct mynewt_log_mgmt_walk_arg walk_arg;
    struct log_offset offset;
    struct log *log;

    walk_arg = (struct mynewt_log_mgmt_walk_arg) {
   13a70:	2280      	movs	r2, #128	; 0x80
   13a72:	2100      	movs	r1, #0
   13a74:	a807      	add	r0, sp, #28
   13a76:	f7fa ffbb 	bl	e9f0 <memset>
   13a7a:	9606      	str	r6, [sp, #24]
   13a7c:	9527      	str	r5, [sp, #156]	; 0x9c
        .cb = cb,
        .arg = arg,
    };

    log = mynewt_log_mgmt_find_log(log_name);
   13a7e:	4620      	mov	r0, r4
   13a80:	f7ff ff1a 	bl	138b8 <mynewt_log_mgmt_find_log>
    if (log == NULL) {
   13a84:	b1b0      	cbz	r0, 13ab4 <log_mgmt_impl_foreach_entry+0x50>
   13a86:	4605      	mov	r5, r0
        return LOG_MGMT_ERR_ENOENT;
    }

    if (strcmp(log->l_name, log_name) == 0) {
   13a88:	4621      	mov	r1, r4
   13a8a:	6800      	ldr	r0, [r0, #0]
   13a8c:	f7fa ffd6 	bl	ea3c <strcmp>
   13a90:	b990      	cbnz	r0, 13ab8 <log_mgmt_impl_foreach_entry+0x54>
        offset.lo_arg = &walk_arg;
   13a92:	ab06      	add	r3, sp, #24
   13a94:	9304      	str	r3, [sp, #16]
        offset.lo_ts = filter->min_timestamp;
   13a96:	e9d7 2300 	ldrd	r2, r3, [r7]
   13a9a:	e9cd 2300 	strd	r2, r3, [sp]
        offset.lo_index = filter->min_index;
   13a9e:	68bb      	ldr	r3, [r7, #8]
   13aa0:	9302      	str	r3, [sp, #8]
        offset.lo_data_len = 0;
   13aa2:	2300      	movs	r3, #0
   13aa4:	9303      	str	r3, [sp, #12]

        return log_walk_body(log, mynewt_log_mgmt_walk_cb, &offset);
   13aa6:	466a      	mov	r2, sp
   13aa8:	4904      	ldr	r1, [pc, #16]	; (13abc <log_mgmt_impl_foreach_entry+0x58>)
   13aaa:	4628      	mov	r0, r5
   13aac:	f7fd fb8c 	bl	111c8 <log_walk_body>
    }

    return LOG_MGMT_ERR_ENOENT;
}
   13ab0:	b029      	add	sp, #164	; 0xa4
   13ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return LOG_MGMT_ERR_ENOENT;
   13ab4:	2005      	movs	r0, #5
   13ab6:	e7fb      	b.n	13ab0 <log_mgmt_impl_foreach_entry+0x4c>
    return LOG_MGMT_ERR_ENOENT;
   13ab8:	2005      	movs	r0, #5
   13aba:	e7f9      	b.n	13ab0 <log_mgmt_impl_foreach_entry+0x4c>
   13abc:	000138d9 	.word	0x000138d9

00013ac0 <log_mgmt_impl_clear>:

int
log_mgmt_impl_clear(const char *log_name)
{
   13ac0:	b508      	push	{r3, lr}
    struct log *log;
    int rc;

    log = mynewt_log_mgmt_find_log(log_name);
   13ac2:	f7ff fef9 	bl	138b8 <mynewt_log_mgmt_find_log>
    if (log == NULL) {
   13ac6:	b138      	cbz	r0, 13ad8 <log_mgmt_impl_clear+0x18>
        return LOG_MGMT_ERR_ENOENT;
    }

    rc = log_flush(log);
   13ac8:	f7fd fc02 	bl	112d0 <log_flush>
    if (rc != 0) {
   13acc:	4603      	mov	r3, r0
   13ace:	b908      	cbnz	r0, 13ad4 <log_mgmt_impl_clear+0x14>
        return LOG_MGMT_ERR_EUNKNOWN;
    }

    return 0;
}
   13ad0:	4618      	mov	r0, r3
   13ad2:	bd08      	pop	{r3, pc}
        return LOG_MGMT_ERR_EUNKNOWN;
   13ad4:	2301      	movs	r3, #1
   13ad6:	e7fb      	b.n	13ad0 <log_mgmt_impl_clear+0x10>
        return LOG_MGMT_ERR_ENOENT;
   13ad8:	2305      	movs	r3, #5
   13ada:	e7f9      	b.n	13ad0 <log_mgmt_impl_clear+0x10>

00013adc <log_mgmt_module_init>:

void
log_mgmt_module_init(void)
{
   13adc:	b508      	push	{r3, lr}
    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   13ade:	4b08      	ldr	r3, [pc, #32]	; (13b00 <log_mgmt_module_init+0x24>)
   13ae0:	781b      	ldrb	r3, [r3, #0]
   13ae2:	b113      	cbz	r3, 13aea <log_mgmt_module_init+0xe>

    log_mgmt_register_group();
   13ae4:	f01c fe96 	bl	30814 <log_mgmt_register_group>
}
   13ae8:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   13aea:	f7f8 fb7d 	bl	c1e8 <hal_debugger_connected>
   13aee:	b100      	cbz	r0, 13af2 <log_mgmt_module_init+0x16>
   13af0:	be01      	bkpt	0x0001
   13af2:	2300      	movs	r3, #0
   13af4:	461a      	mov	r2, r3
   13af6:	4619      	mov	r1, r3
   13af8:	4618      	mov	r0, r3
   13afa:	f7f9 f829 	bl	cb50 <__assert_func>
   13afe:	bf00      	nop
   13b00:	20003584 	.word	0x20003584

00013b04 <os_mgmt_reset>:
/**
 * Command handler: os reset
 */
static int
os_mgmt_reset(struct mgmt_ctxt *ctxt)
{
   13b04:	b508      	push	{r3, lr}
    return os_mgmt_impl_reset(OS_MGMT_RESET_MS);
   13b06:	20fa      	movs	r0, #250	; 0xfa
   13b08:	f000 f962 	bl	13dd0 <os_mgmt_impl_reset>
}
   13b0c:	bd08      	pop	{r3, pc}
	...

00013b10 <os_mgmt_taskstat_encode_one>:
{
   13b10:	b5f0      	push	{r4, r5, r6, r7, lr}
   13b12:	b085      	sub	sp, #20
   13b14:	4606      	mov	r6, r0
   13b16:	460d      	mov	r5, r1
    err |= cbor_encode_text_stringz(encoder, task_info->oti_name);
   13b18:	f101 0418 	add.w	r4, r1, #24
   13b1c:	4620      	mov	r0, r4
   13b1e:	f7fa ffdd 	bl	eadc <strlen>
   13b22:	4602      	mov	r2, r0
   13b24:	4621      	mov	r1, r4
   13b26:	4630      	mov	r0, r6
   13b28:	f018 fe85 	bl	2c836 <cbor_encode_text_string>
   13b2c:	4604      	mov	r4, r0
    err |= cbor_encoder_create_map(encoder, &task_map, CborIndefiniteLength);
   13b2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   13b32:	4669      	mov	r1, sp
   13b34:	4630      	mov	r0, r6
   13b36:	f018 fe8b 	bl	2c850 <cbor_encoder_create_map>
   13b3a:	4304      	orrs	r4, r0
   13b3c:	2204      	movs	r2, #4
   13b3e:	493c      	ldr	r1, [pc, #240]	; (13c30 <os_mgmt_taskstat_encode_one+0x120>)
   13b40:	4668      	mov	r0, sp
   13b42:	f018 fe78 	bl	2c836 <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&task_map, "prio");
   13b46:	4304      	orrs	r4, r0
    err |= cbor_encode_uint(&task_map, task_info->oti_prio);
   13b48:	782a      	ldrb	r2, [r5, #0]
   13b4a:	2300      	movs	r3, #0
   13b4c:	4668      	mov	r0, sp
   13b4e:	f018 fdbc 	bl	2c6ca <cbor_encode_uint>
   13b52:	4304      	orrs	r4, r0
   13b54:	2203      	movs	r2, #3
   13b56:	4937      	ldr	r1, [pc, #220]	; (13c34 <os_mgmt_taskstat_encode_one+0x124>)
   13b58:	4668      	mov	r0, sp
   13b5a:	f018 fe6c 	bl	2c836 <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&task_map, "tid");
   13b5e:	4304      	orrs	r4, r0
    err |= cbor_encode_uint(&task_map, task_info->oti_taskid);
   13b60:	786a      	ldrb	r2, [r5, #1]
   13b62:	2300      	movs	r3, #0
   13b64:	4668      	mov	r0, sp
   13b66:	f018 fdb0 	bl	2c6ca <cbor_encode_uint>
   13b6a:	4304      	orrs	r4, r0
   13b6c:	2205      	movs	r2, #5
   13b6e:	4932      	ldr	r1, [pc, #200]	; (13c38 <os_mgmt_taskstat_encode_one+0x128>)
   13b70:	4668      	mov	r0, sp
   13b72:	f018 fe60 	bl	2c836 <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&task_map, "state");
   13b76:	4304      	orrs	r4, r0
    err |= cbor_encode_uint(&task_map, task_info->oti_state);
   13b78:	78aa      	ldrb	r2, [r5, #2]
   13b7a:	2300      	movs	r3, #0
   13b7c:	4668      	mov	r0, sp
   13b7e:	f018 fda4 	bl	2c6ca <cbor_encode_uint>
   13b82:	4304      	orrs	r4, r0
   13b84:	2206      	movs	r2, #6
   13b86:	492d      	ldr	r1, [pc, #180]	; (13c3c <os_mgmt_taskstat_encode_one+0x12c>)
   13b88:	4668      	mov	r0, sp
   13b8a:	f018 fe54 	bl	2c836 <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&task_map, "stkuse");
   13b8e:	4304      	orrs	r4, r0
    err |= cbor_encode_uint(&task_map, task_info->oti_stkusage);
   13b90:	88aa      	ldrh	r2, [r5, #4]
   13b92:	2300      	movs	r3, #0
   13b94:	4668      	mov	r0, sp
   13b96:	f018 fd98 	bl	2c6ca <cbor_encode_uint>
   13b9a:	4304      	orrs	r4, r0
   13b9c:	2206      	movs	r2, #6
   13b9e:	4928      	ldr	r1, [pc, #160]	; (13c40 <os_mgmt_taskstat_encode_one+0x130>)
   13ba0:	4668      	mov	r0, sp
   13ba2:	f018 fe48 	bl	2c836 <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&task_map, "stksiz");
   13ba6:	4304      	orrs	r4, r0
    err |= cbor_encode_uint(&task_map, task_info->oti_stksize);
   13ba8:	88ea      	ldrh	r2, [r5, #6]
   13baa:	2300      	movs	r3, #0
   13bac:	4668      	mov	r0, sp
   13bae:	f018 fd8c 	bl	2c6ca <cbor_encode_uint>
   13bb2:	4304      	orrs	r4, r0
   13bb4:	2206      	movs	r2, #6
   13bb6:	4923      	ldr	r1, [pc, #140]	; (13c44 <os_mgmt_taskstat_encode_one+0x134>)
   13bb8:	4668      	mov	r0, sp
   13bba:	f018 fe3c 	bl	2c836 <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&task_map, "cswcnt");
   13bbe:	4304      	orrs	r4, r0
    err |= cbor_encode_uint(&task_map, task_info->oti_cswcnt);
   13bc0:	2700      	movs	r7, #0
   13bc2:	68aa      	ldr	r2, [r5, #8]
   13bc4:	463b      	mov	r3, r7
   13bc6:	4668      	mov	r0, sp
   13bc8:	f018 fd7f 	bl	2c6ca <cbor_encode_uint>
   13bcc:	4304      	orrs	r4, r0
   13bce:	2207      	movs	r2, #7
   13bd0:	491d      	ldr	r1, [pc, #116]	; (13c48 <os_mgmt_taskstat_encode_one+0x138>)
   13bd2:	4668      	mov	r0, sp
   13bd4:	f018 fe2f 	bl	2c836 <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&task_map, "runtime");
   13bd8:	4304      	orrs	r4, r0
    err |= cbor_encode_uint(&task_map, task_info->oti_runtime);
   13bda:	68ea      	ldr	r2, [r5, #12]
   13bdc:	463b      	mov	r3, r7
   13bde:	4668      	mov	r0, sp
   13be0:	f018 fd73 	bl	2c6ca <cbor_encode_uint>
   13be4:	4304      	orrs	r4, r0
   13be6:	220c      	movs	r2, #12
   13be8:	4918      	ldr	r1, [pc, #96]	; (13c4c <os_mgmt_taskstat_encode_one+0x13c>)
   13bea:	4668      	mov	r0, sp
   13bec:	f018 fe23 	bl	2c836 <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&task_map, "last_checkin");
   13bf0:	4304      	orrs	r4, r0
    err |= cbor_encode_uint(&task_map, task_info->oti_last_checkin);
   13bf2:	692a      	ldr	r2, [r5, #16]
   13bf4:	463b      	mov	r3, r7
   13bf6:	4668      	mov	r0, sp
   13bf8:	f018 fd67 	bl	2c6ca <cbor_encode_uint>
   13bfc:	4304      	orrs	r4, r0
   13bfe:	220c      	movs	r2, #12
   13c00:	4913      	ldr	r1, [pc, #76]	; (13c50 <os_mgmt_taskstat_encode_one+0x140>)
   13c02:	4668      	mov	r0, sp
   13c04:	f018 fe17 	bl	2c836 <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&task_map, "next_checkin");
   13c08:	4304      	orrs	r4, r0
    err |= cbor_encode_uint(&task_map, task_info->oti_next_checkin);
   13c0a:	696a      	ldr	r2, [r5, #20]
   13c0c:	463b      	mov	r3, r7
   13c0e:	4668      	mov	r0, sp
   13c10:	f018 fd5b 	bl	2c6ca <cbor_encode_uint>
   13c14:	4304      	orrs	r4, r0
    err |= cbor_encoder_close_container(encoder, &task_map);
   13c16:	4669      	mov	r1, sp
   13c18:	4630      	mov	r0, r6
   13c1a:	f018 fe30 	bl	2c87e <cbor_encoder_close_container>
    if (err != 0) {
   13c1e:	ea54 0300 	orrs.w	r3, r4, r0
   13c22:	d102      	bne.n	13c2a <os_mgmt_taskstat_encode_one+0x11a>
    return 0;
   13c24:	2000      	movs	r0, #0
}
   13c26:	b005      	add	sp, #20
   13c28:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return MGMT_ERR_ENOMEM;
   13c2a:	2002      	movs	r0, #2
   13c2c:	e7fb      	b.n	13c26 <os_mgmt_taskstat_encode_one+0x116>
   13c2e:	bf00      	nop
   13c30:	00031d00 	.word	0x00031d00
   13c34:	00031d08 	.word	0x00031d08
   13c38:	00031d0c 	.word	0x00031d0c
   13c3c:	00031d14 	.word	0x00031d14
   13c40:	00031d1c 	.word	0x00031d1c
   13c44:	00031d24 	.word	0x00031d24
   13c48:	00031d2c 	.word	0x00031d2c
   13c4c:	00031d34 	.word	0x00031d34
   13c50:	00031d44 	.word	0x00031d44

00013c54 <os_mgmt_taskstat_read>:
{
   13c54:	b570      	push	{r4, r5, r6, lr}
   13c56:	b092      	sub	sp, #72	; 0x48
   13c58:	4606      	mov	r6, r0
   13c5a:	2205      	movs	r2, #5
   13c5c:	4917      	ldr	r1, [pc, #92]	; (13cbc <os_mgmt_taskstat_read+0x68>)
   13c5e:	f018 fdea 	bl	2c836 <cbor_encode_text_string>
   13c62:	4604      	mov	r4, r0
    err |= cbor_encoder_create_map(&ctxt->encoder, &tasks_map,
   13c64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   13c68:	4669      	mov	r1, sp
   13c6a:	4630      	mov	r0, r6
   13c6c:	f018 fdf0 	bl	2c850 <cbor_encoder_create_map>
    if (err != 0) {
   13c70:	ea50 0304 	orrs.w	r3, r0, r4
   13c74:	d11e      	bne.n	13cb4 <os_mgmt_taskstat_read+0x60>
    for (task_idx = 0; ; task_idx++) {
   13c76:	2500      	movs	r5, #0
        rc = os_mgmt_impl_task_info(task_idx, &task_info);
   13c78:	a904      	add	r1, sp, #16
   13c7a:	4628      	mov	r0, r5
   13c7c:	f000 f883 	bl	13d86 <os_mgmt_impl_task_info>
   13c80:	4604      	mov	r4, r0
        if (rc == MGMT_ERR_ENOENT) {
   13c82:	2805      	cmp	r0, #5
   13c84:	d00d      	beq.n	13ca2 <os_mgmt_taskstat_read+0x4e>
        } else if (rc != 0) {
   13c86:	b9b0      	cbnz	r0, 13cb6 <os_mgmt_taskstat_read+0x62>
        rc = os_mgmt_taskstat_encode_one(&tasks_map, &task_info);
   13c88:	a904      	add	r1, sp, #16
   13c8a:	4668      	mov	r0, sp
   13c8c:	f7ff ff40 	bl	13b10 <os_mgmt_taskstat_encode_one>
        if (rc != 0) {
   13c90:	4604      	mov	r4, r0
   13c92:	b908      	cbnz	r0, 13c98 <os_mgmt_taskstat_read+0x44>
    for (task_idx = 0; ; task_idx++) {
   13c94:	3501      	adds	r5, #1
        rc = os_mgmt_impl_task_info(task_idx, &task_info);
   13c96:	e7ef      	b.n	13c78 <os_mgmt_taskstat_read+0x24>
            cbor_encoder_close_container(&ctxt->encoder, &tasks_map);
   13c98:	4669      	mov	r1, sp
   13c9a:	4630      	mov	r0, r6
   13c9c:	f018 fdef 	bl	2c87e <cbor_encoder_close_container>
            return rc;
   13ca0:	e009      	b.n	13cb6 <os_mgmt_taskstat_read+0x62>
    err = cbor_encoder_close_container(&ctxt->encoder, &tasks_map);
   13ca2:	4669      	mov	r1, sp
   13ca4:	4630      	mov	r0, r6
   13ca6:	f018 fdea 	bl	2c87e <cbor_encoder_close_container>
    if (err != 0) {
   13caa:	b908      	cbnz	r0, 13cb0 <os_mgmt_taskstat_read+0x5c>
    return 0;
   13cac:	2400      	movs	r4, #0
   13cae:	e002      	b.n	13cb6 <os_mgmt_taskstat_read+0x62>
        return MGMT_ERR_ENOMEM;
   13cb0:	2402      	movs	r4, #2
   13cb2:	e000      	b.n	13cb6 <os_mgmt_taskstat_read+0x62>
        return MGMT_ERR_ENOMEM;
   13cb4:	2402      	movs	r4, #2
}
   13cb6:	4620      	mov	r0, r4
   13cb8:	b012      	add	sp, #72	; 0x48
   13cba:	bd70      	pop	{r4, r5, r6, pc}
   13cbc:	00031d54 	.word	0x00031d54

00013cc0 <os_mgmt_echo>:
{
   13cc0:	b530      	push	{r4, r5, lr}
   13cc2:	b0b9      	sub	sp, #228	; 0xe4
   13cc4:	4604      	mov	r4, r0
    const struct cbor_attr_t attrs[2] = {
   13cc6:	225c      	movs	r2, #92	; 0x5c
   13cc8:	2100      	movs	r1, #0
   13cca:	a801      	add	r0, sp, #4
   13ccc:	f7fa fe90 	bl	e9f0 <memset>
   13cd0:	4b16      	ldr	r3, [pc, #88]	; (13d2c <os_mgmt_echo+0x6c>)
   13cd2:	9300      	str	r3, [sp, #0]
   13cd4:	2304      	movs	r3, #4
   13cd6:	f88d 3004 	strb.w	r3, [sp, #4]
   13cda:	ab18      	add	r3, sp, #96	; 0x60
   13cdc:	9302      	str	r3, [sp, #8]
   13cde:	2380      	movs	r3, #128	; 0x80
   13ce0:	930a      	str	r3, [sp, #40]	; 0x28
   13ce2:	2301      	movs	r3, #1
   13ce4:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    echo_buf[0] = '\0';
   13ce8:	2300      	movs	r3, #0
   13cea:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
    err = cbor_read_object(&ctxt->it, attrs);
   13cee:	4669      	mov	r1, sp
   13cf0:	f104 001c 	add.w	r0, r4, #28
   13cf4:	f7fe ff57 	bl	12ba6 <cbor_read_object>
    if (err != 0) {
   13cf8:	b9a8      	cbnz	r0, 13d26 <os_mgmt_echo+0x66>
   13cfa:	4605      	mov	r5, r0
   13cfc:	2201      	movs	r2, #1
   13cfe:	490c      	ldr	r1, [pc, #48]	; (13d30 <os_mgmt_echo+0x70>)
   13d00:	4620      	mov	r0, r4
   13d02:	f018 fd98 	bl	2c836 <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&ctxt->encoder, "r");
   13d06:	4305      	orrs	r5, r0
    err |= cbor_encode_text_string(&ctxt->encoder, echo_buf, strlen(echo_buf));
   13d08:	a818      	add	r0, sp, #96	; 0x60
   13d0a:	f7fa fee7 	bl	eadc <strlen>
   13d0e:	4602      	mov	r2, r0
   13d10:	a918      	add	r1, sp, #96	; 0x60
   13d12:	4620      	mov	r0, r4
   13d14:	f018 fd8f 	bl	2c836 <cbor_encode_text_string>
    if (err != 0) {
   13d18:	ea55 0300 	orrs.w	r3, r5, r0
   13d1c:	d101      	bne.n	13d22 <os_mgmt_echo+0x62>
    return 0;
   13d1e:	2000      	movs	r0, #0
   13d20:	e002      	b.n	13d28 <os_mgmt_echo+0x68>
        return MGMT_ERR_ENOMEM;
   13d22:	2002      	movs	r0, #2
   13d24:	e000      	b.n	13d28 <os_mgmt_echo+0x68>
        return MGMT_ERR_EINVAL;
   13d26:	2003      	movs	r0, #3
}
   13d28:	b039      	add	sp, #228	; 0xe4
   13d2a:	bd30      	pop	{r4, r5, pc}
   13d2c:	00031b6c 	.word	0x00031b6c
   13d30:	00031ccc 	.word	0x00031ccc

00013d34 <os_mgmt_register_group>:

void
os_mgmt_register_group(void)
{
   13d34:	b508      	push	{r3, lr}
    mgmt_register_group(&os_mgmt_group);
   13d36:	4802      	ldr	r0, [pc, #8]	; (13d40 <os_mgmt_register_group+0xc>)
   13d38:	f000 f936 	bl	13fa8 <mgmt_register_group>
}
   13d3c:	bd08      	pop	{r3, pc}
   13d3e:	bf00      	nop
   13d40:	200002a8 	.word	0x200002a8

00013d44 <os_mgmt_module_init>:

void
os_mgmt_module_init(void)
{
   13d44:	b508      	push	{r3, lr}
    os_mgmt_register_group();
   13d46:	f7ff fff5 	bl	13d34 <os_mgmt_register_group>
}
   13d4a:	bd08      	pop	{r3, pc}

00013d4c <mynewt_os_mgmt_task_at>:
mynewt_os_mgmt_task_at(int idx)
{
    const struct os_task *task;
    int i;

    task = STAILQ_FIRST(&g_os_task_list);
   13d4c:	4b05      	ldr	r3, [pc, #20]	; (13d64 <mynewt_os_mgmt_task_at+0x18>)
   13d4e:	681b      	ldr	r3, [r3, #0]
    for (i = 0; i < idx; i++) {
   13d50:	2200      	movs	r2, #0
   13d52:	4282      	cmp	r2, r0
   13d54:	da03      	bge.n	13d5e <mynewt_os_mgmt_task_at+0x12>
        if (task == NULL) {
   13d56:	b113      	cbz	r3, 13d5e <mynewt_os_mgmt_task_at+0x12>
            break;
        }

        task = STAILQ_NEXT(task, t_os_task_list);
   13d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    for (i = 0; i < idx; i++) {
   13d5a:	3201      	adds	r2, #1
   13d5c:	e7f9      	b.n	13d52 <mynewt_os_mgmt_task_at+0x6>
    }

    return task;
}
   13d5e:	4618      	mov	r0, r3
   13d60:	4770      	bx	lr
   13d62:	bf00      	nop
   13d64:	20003414 	.word	0x20003414

00013d68 <mynewt_os_mgmt_stack_usage>:
{
   13d68:	b500      	push	{lr}
   13d6a:	b08f      	sub	sp, #60	; 0x3c
    os_task_info_get(task, &oti);
   13d6c:	4669      	mov	r1, sp
   13d6e:	f7fa fa97 	bl	e2a0 <os_task_info_get>
}
   13d72:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   13d76:	b00f      	add	sp, #60	; 0x3c
   13d78:	f85d fb04 	ldr.w	pc, [sp], #4

00013d7c <mynewt_os_mgmt_reset_tmo>:
{
   13d7c:	b508      	push	{r3, lr}
    hal_watchdog_tickle();
   13d7e:	f01a fc79 	bl	2e674 <hal_watchdog_tickle>
    hal_system_reset();
   13d82:	f7f8 fa39 	bl	c1f8 <hal_system_reset>

00013d86 <os_mgmt_impl_task_info>:

int
os_mgmt_impl_task_info(int idx, struct os_mgmt_task_info *out_info)
{
   13d86:	b538      	push	{r3, r4, r5, lr}
   13d88:	460d      	mov	r5, r1
    const struct os_task *task;

    task = mynewt_os_mgmt_task_at(idx);
   13d8a:	f7ff ffdf 	bl	13d4c <mynewt_os_mgmt_task_at>
    if (task == NULL) {
   13d8e:	b1e8      	cbz	r0, 13dcc <os_mgmt_impl_task_info+0x46>
   13d90:	4604      	mov	r4, r0
        return MGMT_ERR_ENOENT;
    }

    out_info->oti_prio = task->t_prio;
   13d92:	7ac3      	ldrb	r3, [r0, #11]
   13d94:	702b      	strb	r3, [r5, #0]
    out_info->oti_taskid = task->t_taskid;
   13d96:	7a83      	ldrb	r3, [r0, #10]
   13d98:	706b      	strb	r3, [r5, #1]
    out_info->oti_state = task->t_state;
   13d9a:	7b03      	ldrb	r3, [r0, #12]
   13d9c:	70ab      	strb	r3, [r5, #2]
    out_info->oti_stkusage = mynewt_os_mgmt_stack_usage(task);
   13d9e:	f7ff ffe3 	bl	13d68 <mynewt_os_mgmt_stack_usage>
   13da2:	80a8      	strh	r0, [r5, #4]
    out_info->oti_stksize = task->t_stacksize;
   13da4:	8923      	ldrh	r3, [r4, #8]
   13da6:	80eb      	strh	r3, [r5, #6]
    out_info->oti_cswcnt = task->t_ctx_sw_cnt;
   13da8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   13daa:	60ab      	str	r3, [r5, #8]
    out_info->oti_runtime = task->t_run_time;
   13dac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   13dae:	60eb      	str	r3, [r5, #12]
    out_info->oti_last_checkin = task->t_sanity_check.sc_checkin_last;
   13db0:	6a23      	ldr	r3, [r4, #32]
   13db2:	612b      	str	r3, [r5, #16]
    out_info->oti_next_checkin = task->t_sanity_check.sc_checkin_last +
   13db4:	6a23      	ldr	r3, [r4, #32]
                                 task->t_sanity_check.sc_checkin_itvl;
   13db6:	6a62      	ldr	r2, [r4, #36]	; 0x24
    out_info->oti_next_checkin = task->t_sanity_check.sc_checkin_last +
   13db8:	4413      	add	r3, r2
   13dba:	616b      	str	r3, [r5, #20]
    strncpy(out_info->oti_name, task->t_name, sizeof out_info->oti_name);
   13dbc:	2220      	movs	r2, #32
   13dbe:	6921      	ldr	r1, [r4, #16]
   13dc0:	f105 0018 	add.w	r0, r5, #24
   13dc4:	f01b fa6c 	bl	2f2a0 <strncpy>

    return 0;
   13dc8:	2000      	movs	r0, #0
}
   13dca:	bd38      	pop	{r3, r4, r5, pc}
        return MGMT_ERR_ENOENT;
   13dcc:	2005      	movs	r0, #5
   13dce:	e7fc      	b.n	13dca <os_mgmt_impl_task_info+0x44>

00013dd0 <os_mgmt_impl_reset>:

int
os_mgmt_impl_reset(unsigned int delay_ms)
{
   13dd0:	b530      	push	{r4, r5, lr}
   13dd2:	b085      	sub	sp, #20
   13dd4:	4604      	mov	r4, r0
#if MYNEWT_VAL(LOG_SOFT_RESET)
    struct log_reboot_info info = {
   13dd6:	2306      	movs	r3, #6
   13dd8:	f88d 3000 	strb.w	r3, [sp]
   13ddc:	2300      	movs	r3, #0
   13dde:	9301      	str	r3, [sp, #4]
   13de0:	9302      	str	r3, [sp, #8]
   13de2:	9303      	str	r3, [sp, #12]
        .file = NULL,
        .line = 0,
        .pc = 0,
    };

    if (img_mgmt_state_any_pending()) {
   13de4:	f7ff f98d 	bl	13102 <img_mgmt_state_any_pending>
   13de8:	b110      	cbz	r0, 13df0 <os_mgmt_impl_reset+0x20>
        info.reason = HAL_RESET_DFU;
   13dea:	2308      	movs	r3, #8
   13dec:	f88d 3000 	strb.w	r3, [sp]
    }
#endif
    os_callout_init(&mynewt_os_mgmt_reset_callout, os_eventq_dflt_get(),
   13df0:	f7f9 fa94 	bl	d31c <os_eventq_dflt_get>
   13df4:	4d0a      	ldr	r5, [pc, #40]	; (13e20 <os_mgmt_impl_reset+0x50>)
   13df6:	2300      	movs	r3, #0
   13df8:	4a0a      	ldr	r2, [pc, #40]	; (13e24 <os_mgmt_impl_reset+0x54>)
   13dfa:	4601      	mov	r1, r0
   13dfc:	4628      	mov	r0, r5
   13dfe:	f7f9 f84f 	bl	cea0 <os_callout_init>
                    mynewt_os_mgmt_reset_tmo, NULL);

#if MYNEWT_VAL(LOG_SOFT_RESET)
    log_reboot(&info);
   13e02:	4668      	mov	r0, sp
   13e04:	f7fe f898 	bl	11f38 <log_reboot>
#endif
    os_callout_reset(&mynewt_os_mgmt_reset_callout,
                     delay_ms * OS_TICKS_PER_SEC / 1000);
   13e08:	01e4      	lsls	r4, r4, #7
   13e0a:	4907      	ldr	r1, [pc, #28]	; (13e28 <os_mgmt_impl_reset+0x58>)
   13e0c:	fba1 3104 	umull	r3, r1, r1, r4
    os_callout_reset(&mynewt_os_mgmt_reset_callout,
   13e10:	0989      	lsrs	r1, r1, #6
   13e12:	4628      	mov	r0, r5
   13e14:	f7f9 f870 	bl	cef8 <os_callout_reset>

    return 0;
}
   13e18:	2000      	movs	r0, #0
   13e1a:	b005      	add	sp, #20
   13e1c:	bd30      	pop	{r4, r5, pc}
   13e1e:	bf00      	nop
   13e20:	20001c70 	.word	0x20001c70
   13e24:	00013d7d 	.word	0x00013d7d
   13e28:	10624dd3 	.word	0x10624dd3

00013e2c <mynewt_stat_mgmt_walk_cb>:
}

static int
mynewt_stat_mgmt_walk_cb(struct stats_hdr *hdr, void *arg,
                         char *name, uint16_t off)
{
   13e2c:	b530      	push	{r4, r5, lr}
   13e2e:	b085      	sub	sp, #20
    struct stat_mgmt_entry entry;
    void *stat_val;

    walk_arg = arg;

    stat_val = (uint8_t *)hdr + off;
   13e30:	18c5      	adds	r5, r0, r3
    switch (hdr->s_size) {
   13e32:	7904      	ldrb	r4, [r0, #4]
   13e34:	2c04      	cmp	r4, #4
   13e36:	d011      	beq.n	13e5c <mynewt_stat_mgmt_walk_cb+0x30>
   13e38:	2c08      	cmp	r4, #8
   13e3a:	d014      	beq.n	13e66 <mynewt_stat_mgmt_walk_cb+0x3a>
   13e3c:	2c02      	cmp	r4, #2
   13e3e:	d001      	beq.n	13e44 <mynewt_stat_mgmt_walk_cb+0x18>
        break;
    case sizeof (uint64_t):
        entry.value = *(uint64_t *) stat_val;
        break;
    default:
        return MGMT_ERR_EUNKNOWN;
   13e40:	2001      	movs	r0, #1
   13e42:	e009      	b.n	13e58 <mynewt_stat_mgmt_walk_cb+0x2c>
        entry.value = *(uint16_t *) stat_val;
   13e44:	5ac4      	ldrh	r4, [r0, r3]
   13e46:	2500      	movs	r5, #0
   13e48:	e9cd 4502 	strd	r4, r5, [sp, #8]
    }
    entry.name = name;
   13e4c:	a804      	add	r0, sp, #16
   13e4e:	f840 2d10 	str.w	r2, [r0, #-16]!

    return walk_arg->cb(&entry, walk_arg->arg);
   13e52:	680b      	ldr	r3, [r1, #0]
   13e54:	6849      	ldr	r1, [r1, #4]
   13e56:	4798      	blx	r3
}
   13e58:	b005      	add	sp, #20
   13e5a:	bd30      	pop	{r4, r5, pc}
        entry.value = *(uint32_t *) stat_val;
   13e5c:	58c3      	ldr	r3, [r0, r3]
   13e5e:	9302      	str	r3, [sp, #8]
   13e60:	2300      	movs	r3, #0
   13e62:	9303      	str	r3, [sp, #12]
        break;
   13e64:	e7f2      	b.n	13e4c <mynewt_stat_mgmt_walk_cb+0x20>
        entry.value = *(uint64_t *) stat_val;
   13e66:	e9d5 4500 	ldrd	r4, r5, [r5]
   13e6a:	e9cd 4502 	strd	r4, r5, [sp, #8]
        break;
   13e6e:	e7ed      	b.n	13e4c <mynewt_stat_mgmt_walk_cb+0x20>

00013e70 <stat_mgmt_impl_get_group>:
    STAILQ_FOREACH(cur, &g_stats_registry, s_next) {
   13e70:	4b07      	ldr	r3, [pc, #28]	; (13e90 <stat_mgmt_impl_get_group+0x20>)
   13e72:	681b      	ldr	r3, [r3, #0]
    i = 0;
   13e74:	2200      	movs	r2, #0
    STAILQ_FOREACH(cur, &g_stats_registry, s_next) {
   13e76:	b123      	cbz	r3, 13e82 <stat_mgmt_impl_get_group+0x12>
        if (i == idx) {
   13e78:	4282      	cmp	r2, r0
   13e7a:	d007      	beq.n	13e8c <stat_mgmt_impl_get_group+0x1c>
        i++;
   13e7c:	3201      	adds	r2, #1
    STAILQ_FOREACH(cur, &g_stats_registry, s_next) {
   13e7e:	689b      	ldr	r3, [r3, #8]
   13e80:	e7f9      	b.n	13e76 <stat_mgmt_impl_get_group+0x6>
    rc = MGMT_ERR_ENOENT;
   13e82:	2005      	movs	r0, #5
    if (!rc) {
   13e84:	b908      	cbnz	r0, 13e8a <stat_mgmt_impl_get_group+0x1a>
        *out_name = cur->s_name;
   13e86:	681b      	ldr	r3, [r3, #0]
   13e88:	600b      	str	r3, [r1, #0]
}
   13e8a:	4770      	bx	lr
            rc = 0;
   13e8c:	2000      	movs	r0, #0
   13e8e:	e7f9      	b.n	13e84 <stat_mgmt_impl_get_group+0x14>
   13e90:	20000290 	.word	0x20000290

00013e94 <stat_mgmt_impl_foreach_entry>:

int
stat_mgmt_impl_foreach_entry(const char *group_name,
                             stat_mgmt_foreach_entry_fn *cb,
                             void *arg)
{
   13e94:	b530      	push	{r4, r5, lr}
   13e96:	b083      	sub	sp, #12
   13e98:	460d      	mov	r5, r1
   13e9a:	4614      	mov	r4, r2
    struct mynewt_stat_mgmt_walk_arg walk_arg;
    struct stats_hdr *hdr;

    hdr = stats_group_find(group_name);
   13e9c:	f7fe f97a 	bl	12194 <stats_group_find>
    if (hdr == NULL) {
   13ea0:	b138      	cbz	r0, 13eb2 <stat_mgmt_impl_foreach_entry+0x1e>
        return MGMT_ERR_ENOENT;
    }

    walk_arg = (struct mynewt_stat_mgmt_walk_arg) {
   13ea2:	9500      	str	r5, [sp, #0]
   13ea4:	9401      	str	r4, [sp, #4]
        .cb = cb,
        .arg = arg,
    };

    return stats_walk(hdr, mynewt_stat_mgmt_walk_cb, &walk_arg);
   13ea6:	466a      	mov	r2, sp
   13ea8:	4903      	ldr	r1, [pc, #12]	; (13eb8 <stat_mgmt_impl_foreach_entry+0x24>)
   13eaa:	f7fe f8e3 	bl	12074 <stats_walk>
}
   13eae:	b003      	add	sp, #12
   13eb0:	bd30      	pop	{r4, r5, pc}
        return MGMT_ERR_ENOENT;
   13eb2:	2005      	movs	r0, #5
   13eb4:	e7fb      	b.n	13eae <stat_mgmt_impl_foreach_entry+0x1a>
   13eb6:	bf00      	nop
   13eb8:	00013e2d 	.word	0x00013e2d

00013ebc <stat_mgmt_module_init>:

void
stat_mgmt_module_init(void)
{
   13ebc:	b508      	push	{r3, lr}
    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   13ebe:	4b08      	ldr	r3, [pc, #32]	; (13ee0 <stat_mgmt_module_init+0x24>)
   13ec0:	781b      	ldrb	r3, [r3, #0]
   13ec2:	b113      	cbz	r3, 13eca <stat_mgmt_module_init+0xe>

    stat_mgmt_register_group();
   13ec4:	f01c fd6a 	bl	3099c <stat_mgmt_register_group>
}
   13ec8:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   13eca:	f7f8 f98d 	bl	c1e8 <hal_debugger_connected>
   13ece:	b100      	cbz	r0, 13ed2 <stat_mgmt_module_init+0x16>
   13ed0:	be01      	bkpt	0x0001
   13ed2:	2300      	movs	r3, #0
   13ed4:	461a      	mov	r2, r3
   13ed6:	4619      	mov	r1, r3
   13ed8:	4618      	mov	r0, r3
   13eda:	f7f8 fe39 	bl	cb50 <__assert_func>
   13ede:	bf00      	nop
   13ee0:	20003584 	.word	0x20003584

00013ee4 <mgmt_find_group>:
     * Find the group with the specified group id, if one exists
     * check the handler for the command id and make sure
     * that is not NULL. If that is not set, look for the group
     * with a command id that is set
     */
    for (group = mgmt_group_list; group != NULL; group = group->mg_next) {
   13ee4:	4b12      	ldr	r3, [pc, #72]	; (13f30 <mgmt_find_group+0x4c>)
   13ee6:	681b      	ldr	r3, [r3, #0]
   13ee8:	b303      	cbz	r3, 13f2c <mgmt_find_group+0x48>
        if (group->mg_group_id == group_id) {
   13eea:	895a      	ldrh	r2, [r3, #10]
   13eec:	4282      	cmp	r2, r0
   13eee:	d017      	beq.n	13f20 <mgmt_find_group+0x3c>
    for (group = mgmt_group_list; group != NULL; group = group->mg_next) {
   13ef0:	681b      	ldr	r3, [r3, #0]
   13ef2:	e7f9      	b.n	13ee8 <mgmt_find_group+0x4>
   13ef4:	681b      	ldr	r3, [r3, #0]
   13ef6:	b173      	cbz	r3, 13f16 <mgmt_find_group+0x32>
        if (group->mg_group_id == group_id) {
   13ef8:	895a      	ldrh	r2, [r3, #10]
   13efa:	4282      	cmp	r2, r0
   13efc:	d1fa      	bne.n	13ef4 <mgmt_find_group+0x10>
            if (command_id >= group->mg_handlers_count) {
   13efe:	891a      	ldrh	r2, [r3, #8]
   13f00:	428a      	cmp	r2, r1
   13f02:	d90b      	bls.n	13f1c <mgmt_find_group+0x38>
                return NULL;
            }

            if (!group->mg_handlers[command_id].mh_read &&
   13f04:	685a      	ldr	r2, [r3, #4]
   13f06:	eb02 04c1 	add.w	r4, r2, r1, lsl #3
   13f0a:	f852 2031 	ldr.w	r2, [r2, r1, lsl #3]
   13f0e:	b912      	cbnz	r2, 13f16 <mgmt_find_group+0x32>
                !group->mg_handlers[command_id].mh_write) {
   13f10:	6862      	ldr	r2, [r4, #4]
            if (!group->mg_handlers[command_id].mh_read &&
   13f12:	2a00      	cmp	r2, #0
   13f14:	d0ee      	beq.n	13ef4 <mgmt_find_group+0x10>
            break;
        }
    }

    return group;
}
   13f16:	4618      	mov	r0, r3
   13f18:	bc10      	pop	{r4}
   13f1a:	4770      	bx	lr
                return NULL;
   13f1c:	2300      	movs	r3, #0
   13f1e:	e7fa      	b.n	13f16 <mgmt_find_group+0x32>
            if (command_id >= group->mg_handlers_count) {
   13f20:	891a      	ldrh	r2, [r3, #8]
   13f22:	428a      	cmp	r2, r1
   13f24:	d901      	bls.n	13f2a <mgmt_find_group+0x46>
{
   13f26:	b410      	push	{r4}
   13f28:	e7ec      	b.n	13f04 <mgmt_find_group+0x20>
                return NULL;
   13f2a:	2300      	movs	r3, #0
}
   13f2c:	4618      	mov	r0, r3
   13f2e:	4770      	bx	lr
   13f30:	20001c94 	.word	0x20001c94

00013f34 <mgmt_streamer_alloc_rsp>:
{
   13f34:	b508      	push	{r3, lr}
   13f36:	4603      	mov	r3, r0
   13f38:	4608      	mov	r0, r1
    return streamer->cfg->alloc_rsp(req, streamer->cb_arg);
   13f3a:	681a      	ldr	r2, [r3, #0]
   13f3c:	6812      	ldr	r2, [r2, #0]
   13f3e:	6859      	ldr	r1, [r3, #4]
   13f40:	4790      	blx	r2
}
   13f42:	bd08      	pop	{r3, pc}

00013f44 <mgmt_streamer_trim_front>:
{
   13f44:	b510      	push	{r4, lr}
   13f46:	4603      	mov	r3, r0
   13f48:	4608      	mov	r0, r1
   13f4a:	4611      	mov	r1, r2
    streamer->cfg->trim_front(buf, len, streamer->cb_arg);
   13f4c:	681a      	ldr	r2, [r3, #0]
   13f4e:	6854      	ldr	r4, [r2, #4]
   13f50:	685a      	ldr	r2, [r3, #4]
   13f52:	47a0      	blx	r4
}
   13f54:	bd10      	pop	{r4, pc}

00013f56 <mgmt_streamer_reset_buf>:
{
   13f56:	b508      	push	{r3, lr}
   13f58:	4603      	mov	r3, r0
   13f5a:	4608      	mov	r0, r1
    streamer->cfg->reset_buf(buf, streamer->cb_arg);
   13f5c:	681a      	ldr	r2, [r3, #0]
   13f5e:	6892      	ldr	r2, [r2, #8]
   13f60:	6859      	ldr	r1, [r3, #4]
   13f62:	4790      	blx	r2
}
   13f64:	bd08      	pop	{r3, pc}

00013f66 <mgmt_streamer_write_at>:
{
   13f66:	b530      	push	{r4, r5, lr}
   13f68:	b083      	sub	sp, #12
    return streamer->cfg->write_at(streamer->writer, offset, data, len,
   13f6a:	6804      	ldr	r4, [r0, #0]
   13f6c:	68e4      	ldr	r4, [r4, #12]
   13f6e:	68c5      	ldr	r5, [r0, #12]
   13f70:	6840      	ldr	r0, [r0, #4]
   13f72:	9000      	str	r0, [sp, #0]
   13f74:	4628      	mov	r0, r5
   13f76:	47a0      	blx	r4
}
   13f78:	b003      	add	sp, #12
   13f7a:	bd30      	pop	{r4, r5, pc}

00013f7c <mgmt_streamer_init_reader>:
{
   13f7c:	b508      	push	{r3, lr}
    return streamer->cfg->init_reader(streamer->reader, buf, streamer->cb_arg);
   13f7e:	6803      	ldr	r3, [r0, #0]
   13f80:	691b      	ldr	r3, [r3, #16]
   13f82:	6842      	ldr	r2, [r0, #4]
   13f84:	6880      	ldr	r0, [r0, #8]
   13f86:	4798      	blx	r3
}
   13f88:	bd08      	pop	{r3, pc}

00013f8a <mgmt_streamer_init_writer>:
{
   13f8a:	b508      	push	{r3, lr}
    return streamer->cfg->init_writer(streamer->writer, buf, streamer->cb_arg);
   13f8c:	6803      	ldr	r3, [r0, #0]
   13f8e:	695b      	ldr	r3, [r3, #20]
   13f90:	6842      	ldr	r2, [r0, #4]
   13f92:	68c0      	ldr	r0, [r0, #12]
   13f94:	4798      	blx	r3
}
   13f96:	bd08      	pop	{r3, pc}

00013f98 <mgmt_streamer_free_buf>:
{
   13f98:	b508      	push	{r3, lr}
   13f9a:	4603      	mov	r3, r0
   13f9c:	4608      	mov	r0, r1
    streamer->cfg->free_buf(buf, streamer->cb_arg);
   13f9e:	681a      	ldr	r2, [r3, #0]
   13fa0:	6992      	ldr	r2, [r2, #24]
   13fa2:	6859      	ldr	r1, [r3, #4]
   13fa4:	4790      	blx	r2
}
   13fa6:	bd08      	pop	{r3, pc}

00013fa8 <mgmt_register_group>:

void
mgmt_register_group(struct mgmt_group *group)
{
    if (mgmt_group_list_end == NULL) {
   13fa8:	4b04      	ldr	r3, [pc, #16]	; (13fbc <mgmt_register_group+0x14>)
   13faa:	681b      	ldr	r3, [r3, #0]
   13fac:	b11b      	cbz	r3, 13fb6 <mgmt_register_group+0xe>
        mgmt_group_list = group;
    } else {
        mgmt_group_list_end->mg_next = group;
   13fae:	6018      	str	r0, [r3, #0]
    }
    mgmt_group_list_end = group;
   13fb0:	4b02      	ldr	r3, [pc, #8]	; (13fbc <mgmt_register_group+0x14>)
   13fb2:	6018      	str	r0, [r3, #0]
}
   13fb4:	4770      	bx	lr
        mgmt_group_list = group;
   13fb6:	4b02      	ldr	r3, [pc, #8]	; (13fc0 <mgmt_register_group+0x18>)
   13fb8:	6018      	str	r0, [r3, #0]
   13fba:	e7f9      	b.n	13fb0 <mgmt_register_group+0x8>
   13fbc:	20001c98 	.word	0x20001c98
   13fc0:	20001c94 	.word	0x20001c94

00013fc4 <mgmt_find_handler>:

const struct mgmt_handler *
mgmt_find_handler(uint16_t group_id, uint16_t command_id)
{
   13fc4:	b510      	push	{r4, lr}
   13fc6:	460c      	mov	r4, r1
    const struct mgmt_group *group;

    group = mgmt_find_group(group_id, command_id);
   13fc8:	f7ff ff8c 	bl	13ee4 <mgmt_find_group>
    if (!group) {
   13fcc:	b118      	cbz	r0, 13fd6 <mgmt_find_handler+0x12>
        return NULL;
    }

    return &group->mg_handlers[command_id];
   13fce:	6840      	ldr	r0, [r0, #4]
   13fd0:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
}
   13fd4:	bd10      	pop	{r4, pc}
        return NULL;
   13fd6:	2000      	movs	r0, #0
   13fd8:	e7fc      	b.n	13fd4 <mgmt_find_handler+0x10>
	...

00013fdc <mgmt_write_rsp_status>:

int
mgmt_write_rsp_status(struct mgmt_ctxt *ctxt, int errcode)
{
   13fdc:	b538      	push	{r3, r4, r5, lr}
   13fde:	4604      	mov	r4, r0
   13fe0:	460d      	mov	r5, r1
   13fe2:	2202      	movs	r2, #2
   13fe4:	4906      	ldr	r1, [pc, #24]	; (14000 <mgmt_write_rsp_status+0x24>)
   13fe6:	f018 fc26 	bl	2c836 <cbor_encode_text_string>
    int rc;

    rc = cbor_encode_text_stringz(&ctxt->encoder, "rc");
    if (rc != 0) {
   13fea:	4603      	mov	r3, r0
   13fec:	b108      	cbz	r0, 13ff2 <mgmt_write_rsp_status+0x16>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   13fee:	4618      	mov	r0, r3
   13ff0:	bd38      	pop	{r3, r4, r5, pc}
    rc = cbor_encode_int(&ctxt->encoder, errcode);
   13ff2:	462a      	mov	r2, r5
   13ff4:	17eb      	asrs	r3, r5, #31
   13ff6:	4620      	mov	r0, r4
   13ff8:	f018 fb9c 	bl	2c734 <cbor_encode_int>
   13ffc:	4603      	mov	r3, r0
   13ffe:	e7f6      	b.n	13fee <mgmt_write_rsp_status+0x12>
   14000:	000318e4 	.word	0x000318e4

00014004 <mgmt_err_from_cbor>:

int
mgmt_err_from_cbor(int cbor_status)
{
    switch (cbor_status) {
   14004:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
   14008:	d002      	beq.n	14010 <mgmt_err_from_cbor+0xc>
   1400a:	b110      	cbz	r0, 14012 <mgmt_err_from_cbor+0xe>
        case CborNoError:           return MGMT_ERR_EOK;
        case CborErrorOutOfMemory:  return MGMT_ERR_ENOMEM;
        default:                    return MGMT_ERR_EUNKNOWN;
   1400c:	2001      	movs	r0, #1
   1400e:	4770      	bx	lr
        case CborErrorOutOfMemory:  return MGMT_ERR_ENOMEM;
   14010:	2002      	movs	r0, #2
    }
}
   14012:	4770      	bx	lr

00014014 <mgmt_ctxt_init>:

int
mgmt_ctxt_init(struct mgmt_ctxt *ctxt, struct mgmt_streamer *streamer)
{
   14014:	b570      	push	{r4, r5, r6, lr}
   14016:	4604      	mov	r4, r0
   14018:	460e      	mov	r6, r1

#ifdef __ZEPHYR__
    rc = cbor_parser_cust_reader_init(streamer->reader, 0, &ctxt->parser,
                                      &ctxt->it);
#else
    rc = cbor_parser_init(streamer->reader, 0, &ctxt->parser, &ctxt->it);
   1401a:	f100 031c 	add.w	r3, r0, #28
   1401e:	f100 0210 	add.w	r2, r0, #16
   14022:	2100      	movs	r1, #0
   14024:	68b0      	ldr	r0, [r6, #8]
   14026:	f018 feec 	bl	2ce02 <cbor_parser_init>
#endif
    if (rc != CborNoError) {
   1402a:	4605      	mov	r5, r0
   1402c:	b120      	cbz	r0, 14038 <mgmt_ctxt_init+0x24>
        return mgmt_err_from_cbor(rc);
   1402e:	f7ff ffe9 	bl	14004 <mgmt_err_from_cbor>
   14032:	4605      	mov	r5, r0
#else
    cbor_encoder_init(&ctxt->encoder, streamer->writer, 0);
#endif

    return 0;
}
   14034:	4628      	mov	r0, r5
   14036:	bd70      	pop	{r4, r5, r6, pc}
    cbor_encoder_init(&ctxt->encoder, streamer->writer, 0);
   14038:	2200      	movs	r2, #0
   1403a:	68f1      	ldr	r1, [r6, #12]
   1403c:	4620      	mov	r0, r4
   1403e:	f018 fb3f 	bl	2c6c0 <cbor_encoder_init>
    return 0;
   14042:	e7f7      	b.n	14034 <mgmt_ctxt_init+0x20>

00014044 <mgmt_ntoh_hdr>:

void
mgmt_ntoh_hdr(struct mgmt_hdr *hdr)
{
    hdr->nh_len = ntohs(hdr->nh_len);
   14044:	8842      	ldrh	r2, [r0, #2]
   14046:	0213      	lsls	r3, r2, #8
   14048:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
   1404c:	8043      	strh	r3, [r0, #2]
    hdr->nh_group = ntohs(hdr->nh_group);
   1404e:	8882      	ldrh	r2, [r0, #4]
   14050:	0213      	lsls	r3, r2, #8
   14052:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
   14056:	8083      	strh	r3, [r0, #4]
}
   14058:	4770      	bx	lr

0001405a <mgmt_hton_hdr>:

void
mgmt_hton_hdr(struct mgmt_hdr *hdr)
{
    hdr->nh_len = htons(hdr->nh_len);
   1405a:	8842      	ldrh	r2, [r0, #2]
   1405c:	0213      	lsls	r3, r2, #8
   1405e:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
   14062:	8043      	strh	r3, [r0, #2]
    hdr->nh_group = htons(hdr->nh_group);
   14064:	8882      	ldrh	r2, [r0, #4]
   14066:	0213      	lsls	r3, r2, #8
   14068:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
   1406c:	8083      	strh	r3, [r0, #4]
}
   1406e:	4770      	bx	lr

00014070 <mgmt_evt>:
    evt_cb = cb;
}

void
mgmt_evt(uint8_t opcode, uint16_t group, uint8_t id, void *arg)
{
   14070:	b510      	push	{r4, lr}
    if (evt_cb) {
   14072:	4c02      	ldr	r4, [pc, #8]	; (1407c <mgmt_evt+0xc>)
   14074:	6824      	ldr	r4, [r4, #0]
   14076:	b104      	cbz	r4, 1407a <mgmt_evt+0xa>
        evt_cb(opcode, group, id, arg);
   14078:	47a0      	blx	r4
    }
}
   1407a:	bd10      	pop	{r4, pc}
   1407c:	20001c90 	.word	0x20001c90

00014080 <smp_align4>:
static int
smp_align4(int x)
{
    int rem;

    rem = x % 4;
   14080:	4242      	negs	r2, r0
   14082:	f000 0303 	and.w	r3, r0, #3
   14086:	f002 0203 	and.w	r2, r2, #3
   1408a:	bf58      	it	pl
   1408c:	4253      	negpl	r3, r2
    if (rem == 0) {
   1408e:	b10b      	cbz	r3, 14094 <smp_align4+0x14>
        return x;
    } else {
        return x - rem + 4;
   14090:	1ac0      	subs	r0, r0, r3
   14092:	3004      	adds	r0, #4
    }
}
   14094:	4770      	bx	lr

00014096 <smp_rsp_op>:
 * Converts a request opcode to its corresponding response opcode.
 */
static uint8_t
smp_rsp_op(uint8_t req_op)
{
    if (req_op == MGMT_OP_READ) {
   14096:	b908      	cbnz	r0, 1409c <smp_rsp_op+0x6>
        return MGMT_OP_READ_RSP;
   14098:	2001      	movs	r0, #1
   1409a:	4770      	bx	lr
    } else {
        return MGMT_OP_WRITE_RSP;
   1409c:	2003      	movs	r0, #3
    }
}
   1409e:	4770      	bx	lr

000140a0 <smp_init_rsp_hdr>:

static void
smp_init_rsp_hdr(const struct mgmt_hdr *req_hdr, struct mgmt_hdr *rsp_hdr)
{
   140a0:	b570      	push	{r4, r5, r6, lr}
   140a2:	4605      	mov	r5, r0
   140a4:	460c      	mov	r4, r1
    *rsp_hdr = (struct mgmt_hdr) {
        .nh_len = 0,
        .nh_flags = 0,
        .nh_op = smp_rsp_op(req_hdr->nh_op),
   140a6:	7800      	ldrb	r0, [r0, #0]
   140a8:	f000 0007 	and.w	r0, r0, #7
   140ac:	f7ff fff3 	bl	14096 <smp_rsp_op>
        .nh_group = req_hdr->nh_group,
   140b0:	88ae      	ldrh	r6, [r5, #4]
        .nh_seq = req_hdr->nh_seq,
   140b2:	79a9      	ldrb	r1, [r5, #6]
        .nh_id = req_hdr->nh_id,
   140b4:	79ea      	ldrb	r2, [r5, #7]
    *rsp_hdr = (struct mgmt_hdr) {
   140b6:	2300      	movs	r3, #0
   140b8:	6023      	str	r3, [r4, #0]
   140ba:	7823      	ldrb	r3, [r4, #0]
   140bc:	f360 0302 	bfi	r3, r0, #0, #3
   140c0:	7023      	strb	r3, [r4, #0]
   140c2:	80a6      	strh	r6, [r4, #4]
   140c4:	71a1      	strb	r1, [r4, #6]
   140c6:	71e2      	strb	r2, [r4, #7]
    };
}
   140c8:	bd70      	pop	{r4, r5, r6, pc}

000140ca <smp_read_hdr>:
static int
smp_read_hdr(struct smp_streamer *streamer, struct mgmt_hdr *dst_hdr)
{
    struct cbor_decoder_reader *reader;

    reader = streamer->mgmt_stmr.reader;
   140ca:	6880      	ldr	r0, [r0, #8]

    if (reader->message_size < sizeof *dst_hdr) {
   140cc:	6983      	ldr	r3, [r0, #24]
   140ce:	2b07      	cmp	r3, #7
   140d0:	d906      	bls.n	140e0 <smp_read_hdr+0x16>
{
   140d2:	b510      	push	{r4, lr}
        return MGMT_ERR_EINVAL;
    }

    reader->cpy(reader, (char *)dst_hdr, 0, sizeof *dst_hdr);
   140d4:	6944      	ldr	r4, [r0, #20]
   140d6:	2308      	movs	r3, #8
   140d8:	2200      	movs	r2, #0
   140da:	47a0      	blx	r4
    return 0;
   140dc:	2000      	movs	r0, #0
}
   140de:	bd10      	pop	{r4, pc}
        return MGMT_ERR_EINVAL;
   140e0:	2003      	movs	r0, #3
}
   140e2:	4770      	bx	lr

000140e4 <smp_handle_single_payload>:
 * @return                      A MGMT_ERR_[...] error code.
 */
static int
smp_handle_single_payload(struct mgmt_ctxt *cbuf,
                          const struct mgmt_hdr *req_hdr, bool *handler_found)
{
   140e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   140e6:	b085      	sub	sp, #20
   140e8:	4605      	mov	r5, r0
   140ea:	460c      	mov	r4, r1
   140ec:	4617      	mov	r7, r2
    const struct mgmt_handler *handler;
    mgmt_handler_fn *handler_fn;
    struct CborEncoder payload_encoder;
    int rc;

    handler = mgmt_find_handler(req_hdr->nh_group, req_hdr->nh_id);
   140ee:	79c9      	ldrb	r1, [r1, #7]
   140f0:	88a0      	ldrh	r0, [r4, #4]
   140f2:	f7ff ff67 	bl	13fc4 <mgmt_find_handler>
    if (handler == NULL) {
   140f6:	b348      	cbz	r0, 1414c <smp_handle_single_payload+0x68>
   140f8:	4606      	mov	r6, r0
    }

    /* Begin response payload.  Response fields are inserted into the root
     * map as key value pairs.
     */
    rc = cbor_encoder_create_map(&cbuf->encoder, &payload_encoder,
   140fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   140fe:	4669      	mov	r1, sp
   14100:	4628      	mov	r0, r5
   14102:	f018 fba5 	bl	2c850 <cbor_encoder_create_map>
                                 CborIndefiniteLength);
    rc = mgmt_err_from_cbor(rc);
   14106:	f7ff ff7d 	bl	14004 <mgmt_err_from_cbor>
    if (rc != 0) {
   1410a:	4603      	mov	r3, r0
   1410c:	b9f8      	cbnz	r0, 1414e <smp_handle_single_payload+0x6a>
        return rc;
    }

    switch (req_hdr->nh_op) {
   1410e:	7823      	ldrb	r3, [r4, #0]
   14110:	f013 0307 	ands.w	r3, r3, #7
   14114:	d003      	beq.n	1411e <smp_handle_single_payload+0x3a>
   14116:	2b02      	cmp	r3, #2
   14118:	d016      	beq.n	14148 <smp_handle_single_payload+0x64>
    case MGMT_OP_WRITE:
        handler_fn = handler->mh_write;
        break;

    default:
        return MGMT_ERR_EINVAL;
   1411a:	2303      	movs	r3, #3
   1411c:	e017      	b.n	1414e <smp_handle_single_payload+0x6a>
        handler_fn = handler->mh_read;
   1411e:	6836      	ldr	r6, [r6, #0]
    }

    if (handler_fn) {
   14120:	b1c6      	cbz	r6, 14154 <smp_handle_single_payload+0x70>
        *handler_found = true;
   14122:	2001      	movs	r0, #1
   14124:	7038      	strb	r0, [r7, #0]
        mgmt_evt(MGMT_EVT_OP_CMD_RECV, req_hdr->nh_group, req_hdr->nh_id, NULL);
   14126:	2300      	movs	r3, #0
   14128:	79e2      	ldrb	r2, [r4, #7]
   1412a:	88a1      	ldrh	r1, [r4, #4]
   1412c:	f7ff ffa0 	bl	14070 <mgmt_evt>

        rc = handler_fn(cbuf);
   14130:	4628      	mov	r0, r5
   14132:	47b0      	blx	r6
    } else {
        rc = MGMT_ERR_ENOTSUP;
    }

    if (rc != 0) {
   14134:	4603      	mov	r3, r0
   14136:	b950      	cbnz	r0, 1414e <smp_handle_single_payload+0x6a>
        return rc;
    }

    /* End response payload. */
    rc = cbor_encoder_close_container(&cbuf->encoder, &payload_encoder);
   14138:	4669      	mov	r1, sp
   1413a:	4628      	mov	r0, r5
   1413c:	f018 fb9f 	bl	2c87e <cbor_encoder_close_container>
    return mgmt_err_from_cbor(rc);
   14140:	f7ff ff60 	bl	14004 <mgmt_err_from_cbor>
   14144:	4603      	mov	r3, r0
   14146:	e002      	b.n	1414e <smp_handle_single_payload+0x6a>
        handler_fn = handler->mh_write;
   14148:	6876      	ldr	r6, [r6, #4]
        break;
   1414a:	e7e9      	b.n	14120 <smp_handle_single_payload+0x3c>
        return MGMT_ERR_ENOTSUP;
   1414c:	2308      	movs	r3, #8
}
   1414e:	4618      	mov	r0, r3
   14150:	b005      	add	sp, #20
   14152:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rc = MGMT_ERR_ENOTSUP;
   14154:	2308      	movs	r3, #8
   14156:	e7fa      	b.n	1414e <smp_handle_single_payload+0x6a>

00014158 <smp_write_hdr>:
{
   14158:	b508      	push	{r3, lr}
    rc = mgmt_streamer_write_at(&streamer->mgmt_stmr, 0, src_hdr,
   1415a:	2308      	movs	r3, #8
   1415c:	460a      	mov	r2, r1
   1415e:	2100      	movs	r1, #0
   14160:	f7ff ff01 	bl	13f66 <mgmt_streamer_write_at>
    return mgmt_err_from_cbor(rc);
   14164:	f7ff ff4e 	bl	14004 <mgmt_err_from_cbor>
}
   14168:	bd08      	pop	{r3, pc}

0001416a <smp_handle_single_req>:
 * @return                      A MGMT_ERR_[...] error code.
 */
static int
smp_handle_single_req(struct smp_streamer *streamer,
                      const struct mgmt_hdr *req_hdr, bool *handler_found)
{
   1416a:	b570      	push	{r4, r5, r6, lr}
   1416c:	b08e      	sub	sp, #56	; 0x38
   1416e:	4604      	mov	r4, r0
   14170:	460d      	mov	r5, r1
   14172:	4616      	mov	r6, r2
    struct mgmt_ctxt cbuf;
    struct mgmt_hdr rsp_hdr;
    int rc;

    rc = mgmt_ctxt_init(&cbuf, &streamer->mgmt_stmr);
   14174:	4601      	mov	r1, r0
   14176:	a803      	add	r0, sp, #12
   14178:	f7ff ff4c 	bl	14014 <mgmt_ctxt_init>
    if (rc != 0) {
   1417c:	4603      	mov	r3, r0
   1417e:	b110      	cbz	r0, 14186 <smp_handle_single_req+0x1c>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   14180:	4618      	mov	r0, r3
   14182:	b00e      	add	sp, #56	; 0x38
   14184:	bd70      	pop	{r4, r5, r6, pc}
    smp_init_rsp_hdr(req_hdr, &rsp_hdr);
   14186:	a901      	add	r1, sp, #4
   14188:	4628      	mov	r0, r5
   1418a:	f7ff ff89 	bl	140a0 <smp_init_rsp_hdr>
    rc = smp_write_hdr(streamer, &rsp_hdr);
   1418e:	a901      	add	r1, sp, #4
   14190:	4620      	mov	r0, r4
   14192:	f7ff ffe1 	bl	14158 <smp_write_hdr>
    if (rc != 0) {
   14196:	4603      	mov	r3, r0
   14198:	2800      	cmp	r0, #0
   1419a:	d1f1      	bne.n	14180 <smp_handle_single_req+0x16>
    rc = smp_handle_single_payload(&cbuf, req_hdr, handler_found);
   1419c:	4632      	mov	r2, r6
   1419e:	4629      	mov	r1, r5
   141a0:	a803      	add	r0, sp, #12
   141a2:	f7ff ff9f 	bl	140e4 <smp_handle_single_payload>
    if (rc != 0) {
   141a6:	4603      	mov	r3, r0
   141a8:	2800      	cmp	r0, #0
   141aa:	d1e9      	bne.n	14180 <smp_handle_single_req+0x16>
{   return encoder->writer->bytes_written; }
   141ac:	9b03      	ldr	r3, [sp, #12]
   141ae:	685b      	ldr	r3, [r3, #4]
    rsp_hdr.nh_len = cbor_encode_bytes_written(&cbuf.encoder) - MGMT_HDR_SIZE;
   141b0:	3b08      	subs	r3, #8
   141b2:	f8ad 3006 	strh.w	r3, [sp, #6]
    mgmt_hton_hdr(&rsp_hdr);
   141b6:	a801      	add	r0, sp, #4
   141b8:	f7ff ff4f 	bl	1405a <mgmt_hton_hdr>
    rc = smp_write_hdr(streamer, &rsp_hdr);
   141bc:	a901      	add	r1, sp, #4
   141be:	4620      	mov	r0, r4
   141c0:	f7ff ffca 	bl	14158 <smp_write_hdr>
   141c4:	4603      	mov	r3, r0
   141c6:	e7db      	b.n	14180 <smp_handle_single_req+0x16>

000141c8 <smp_build_err_rsp>:
{
   141c8:	b570      	push	{r4, r5, r6, lr}
   141ca:	b092      	sub	sp, #72	; 0x48
   141cc:	4604      	mov	r4, r0
   141ce:	460d      	mov	r5, r1
   141d0:	4616      	mov	r6, r2
    rc = mgmt_ctxt_init(&cbuf, &streamer->mgmt_stmr);
   141d2:	4601      	mov	r1, r0
   141d4:	a803      	add	r0, sp, #12
   141d6:	f7ff ff1d 	bl	14014 <mgmt_ctxt_init>
    if (rc != 0) {
   141da:	4603      	mov	r3, r0
   141dc:	b110      	cbz	r0, 141e4 <smp_build_err_rsp+0x1c>
}
   141de:	4618      	mov	r0, r3
   141e0:	b012      	add	sp, #72	; 0x48
   141e2:	bd70      	pop	{r4, r5, r6, pc}
    smp_init_rsp_hdr(req_hdr, &rsp_hdr);
   141e4:	a901      	add	r1, sp, #4
   141e6:	4628      	mov	r0, r5
   141e8:	f7ff ff5a 	bl	140a0 <smp_init_rsp_hdr>
    rc = smp_write_hdr(streamer, &rsp_hdr);
   141ec:	a901      	add	r1, sp, #4
   141ee:	4620      	mov	r0, r4
   141f0:	f7ff ffb2 	bl	14158 <smp_write_hdr>
    if (rc != 0) {
   141f4:	4603      	mov	r3, r0
   141f6:	2800      	cmp	r0, #0
   141f8:	d1f1      	bne.n	141de <smp_build_err_rsp+0x16>
    rc = cbor_encoder_create_map(&cbuf.encoder, &map, CborIndefiniteLength);
   141fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   141fe:	a90e      	add	r1, sp, #56	; 0x38
   14200:	a803      	add	r0, sp, #12
   14202:	f018 fb25 	bl	2c850 <cbor_encoder_create_map>
    if (rc != 0) {
   14206:	4603      	mov	r3, r0
   14208:	2800      	cmp	r0, #0
   1420a:	d1e8      	bne.n	141de <smp_build_err_rsp+0x16>
    rc = mgmt_write_rsp_status(&cbuf, status);
   1420c:	4631      	mov	r1, r6
   1420e:	a803      	add	r0, sp, #12
   14210:	f7ff fee4 	bl	13fdc <mgmt_write_rsp_status>
    if (rc != 0) {
   14214:	4603      	mov	r3, r0
   14216:	2800      	cmp	r0, #0
   14218:	d1e1      	bne.n	141de <smp_build_err_rsp+0x16>
    rc = cbor_encoder_close_container(&cbuf.encoder, &map);
   1421a:	a90e      	add	r1, sp, #56	; 0x38
   1421c:	a803      	add	r0, sp, #12
   1421e:	f018 fb2e 	bl	2c87e <cbor_encoder_close_container>
    if (rc != 0) {
   14222:	4603      	mov	r3, r0
   14224:	2800      	cmp	r0, #0
   14226:	d1da      	bne.n	141de <smp_build_err_rsp+0x16>
   14228:	9b03      	ldr	r3, [sp, #12]
   1422a:	685b      	ldr	r3, [r3, #4]
    rsp_hdr.nh_len = cbor_encode_bytes_written(&cbuf.encoder) - MGMT_HDR_SIZE;
   1422c:	3b08      	subs	r3, #8
   1422e:	f8ad 3006 	strh.w	r3, [sp, #6]
    mgmt_hton_hdr(&rsp_hdr);
   14232:	a801      	add	r0, sp, #4
   14234:	f7ff ff11 	bl	1405a <mgmt_hton_hdr>
    rc = smp_write_hdr(streamer, &rsp_hdr);
   14238:	a901      	add	r1, sp, #4
   1423a:	4620      	mov	r0, r4
   1423c:	f7ff ff8c 	bl	14158 <smp_write_hdr>
   14240:	4603      	mov	r3, r0
   14242:	e7cc      	b.n	141de <smp_build_err_rsp+0x16>

00014244 <smp_on_err>:
 * @param status                The status to indicate in the error response.
 */
static void
smp_on_err(struct smp_streamer *streamer, const struct mgmt_hdr *req_hdr,
           void *req, void *rsp, int status)
{
   14244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14246:	4604      	mov	r4, r0
   14248:	460f      	mov	r7, r1
   1424a:	4616      	mov	r6, r2
    int rc;

    /* Prefer the response buffer for holding the error response.  If no
     * response buffer was allocated, use the request buffer instead.
     */
    if (rsp == NULL) {
   1424c:	461d      	mov	r5, r3
   1424e:	b1e3      	cbz	r3, 1428a <smp_on_err+0x46>
        rsp = req;
        req = NULL;
    }

    /* Clear the partial response from the buffer, if any. */
    mgmt_streamer_reset_buf(&streamer->mgmt_stmr, rsp);
   14250:	4629      	mov	r1, r5
   14252:	4620      	mov	r0, r4
   14254:	f7ff fe7f 	bl	13f56 <mgmt_streamer_reset_buf>
    mgmt_streamer_init_writer(&streamer->mgmt_stmr, rsp);
   14258:	4629      	mov	r1, r5
   1425a:	4620      	mov	r0, r4
   1425c:	f7ff fe95 	bl	13f8a <mgmt_streamer_init_writer>

    /* Build and transmit the error response. */
    rc = smp_build_err_rsp(streamer, req_hdr, status);
   14260:	9a06      	ldr	r2, [sp, #24]
   14262:	4639      	mov	r1, r7
   14264:	4620      	mov	r0, r4
   14266:	f7ff ffaf 	bl	141c8 <smp_build_err_rsp>
    if (rc == 0) {
   1426a:	b928      	cbnz	r0, 14278 <smp_on_err+0x34>
        streamer->tx_rsp_cb(streamer, rsp, streamer->mgmt_stmr.cb_arg);
   1426c:	6923      	ldr	r3, [r4, #16]
   1426e:	6862      	ldr	r2, [r4, #4]
   14270:	4629      	mov	r1, r5
   14272:	4620      	mov	r0, r4
   14274:	4798      	blx	r3
        rsp = NULL;
   14276:	2500      	movs	r5, #0
    }

    /* Free any extra buffers. */
    mgmt_streamer_free_buf(&streamer->mgmt_stmr, req);
   14278:	4631      	mov	r1, r6
   1427a:	4620      	mov	r0, r4
   1427c:	f7ff fe8c 	bl	13f98 <mgmt_streamer_free_buf>
    mgmt_streamer_free_buf(&streamer->mgmt_stmr, rsp);
   14280:	4629      	mov	r1, r5
   14282:	4620      	mov	r0, r4
   14284:	f7ff fe88 	bl	13f98 <mgmt_streamer_free_buf>
}
   14288:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        req = NULL;
   1428a:	462e      	mov	r6, r5
        rsp = req;
   1428c:	4615      	mov	r5, r2
   1428e:	e7df      	b.n	14250 <smp_on_err+0xc>

00014290 <smp_process_request_packet>:
 *
 * @return                      0 on success, MGMT_ERR_[...] code on failure.
 */
int
smp_process_request_packet(struct smp_streamer *streamer, void *req)
{
   14290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14294:	b086      	sub	sp, #24
   14296:	4604      	mov	r4, r0
   14298:	460e      	mov	r6, r1

    rsp = NULL;
    valid_hdr = true;

    while (1) {
        handler_found = false;
   1429a:	2300      	movs	r3, #0
   1429c:	f88d 300b 	strb.w	r3, [sp, #11]

        rc = mgmt_streamer_init_reader(&streamer->mgmt_stmr, req);
   142a0:	46a0      	mov	r8, r4
   142a2:	4631      	mov	r1, r6
   142a4:	4620      	mov	r0, r4
   142a6:	f7ff fe69 	bl	13f7c <mgmt_streamer_init_reader>
        if (rc != 0) {
   142aa:	4605      	mov	r5, r0
   142ac:	2800      	cmp	r0, #0
   142ae:	d140      	bne.n	14332 <smp_process_request_packet+0xa2>
            valid_hdr = false;
            break;
        }

        /* Read the management header and strip it from the request. */
        rc = smp_read_hdr(streamer, &req_hdr);
   142b0:	a904      	add	r1, sp, #16
   142b2:	4620      	mov	r0, r4
   142b4:	f7ff ff09 	bl	140ca <smp_read_hdr>
        if (rc != 0) {
   142b8:	4605      	mov	r5, r0
   142ba:	2800      	cmp	r0, #0
   142bc:	d14a      	bne.n	14354 <smp_process_request_packet+0xc4>
            valid_hdr = false;
            break;
        }
        mgmt_ntoh_hdr(&req_hdr);
   142be:	a804      	add	r0, sp, #16
   142c0:	f7ff fec0 	bl	14044 <mgmt_ntoh_hdr>
        mgmt_streamer_trim_front(&streamer->mgmt_stmr, req, MGMT_HDR_SIZE);
   142c4:	2208      	movs	r2, #8
   142c6:	4631      	mov	r1, r6
   142c8:	4620      	mov	r0, r4
   142ca:	f7ff fe3b 	bl	13f44 <mgmt_streamer_trim_front>

        rsp = mgmt_streamer_alloc_rsp(&streamer->mgmt_stmr, req);
   142ce:	4631      	mov	r1, r6
   142d0:	4620      	mov	r0, r4
   142d2:	f7ff fe2f 	bl	13f34 <mgmt_streamer_alloc_rsp>
        if (rsp == NULL) {
   142d6:	4607      	mov	r7, r0
   142d8:	2800      	cmp	r0, #0
   142da:	d03e      	beq.n	1435a <smp_process_request_packet+0xca>
            rc = MGMT_ERR_ENOMEM;
            break;
        }

        rc = mgmt_streamer_init_writer(&streamer->mgmt_stmr, rsp);
   142dc:	4601      	mov	r1, r0
   142de:	4620      	mov	r0, r4
   142e0:	f7ff fe53 	bl	13f8a <mgmt_streamer_init_writer>
        if (rc != 0) {
   142e4:	4605      	mov	r5, r0
   142e6:	2800      	cmp	r0, #0
   142e8:	d13a      	bne.n	14360 <smp_process_request_packet+0xd0>
            break;
        }

        /* Process the request payload and build the response. */
        rc = smp_handle_single_req(streamer, &req_hdr, &handler_found);
   142ea:	f10d 020b 	add.w	r2, sp, #11
   142ee:	a904      	add	r1, sp, #16
   142f0:	4620      	mov	r0, r4
   142f2:	f7ff ff3a 	bl	1416a <smp_handle_single_req>
        if (rc != 0) {
   142f6:	4605      	mov	r5, r0
   142f8:	bba0      	cbnz	r0, 14364 <smp_process_request_packet+0xd4>
            break;
        }

        /* Send the response. */
        rc = streamer->tx_rsp_cb(streamer, rsp, streamer->mgmt_stmr.cb_arg);
   142fa:	6923      	ldr	r3, [r4, #16]
   142fc:	6862      	ldr	r2, [r4, #4]
   142fe:	4639      	mov	r1, r7
   14300:	4620      	mov	r0, r4
   14302:	4798      	blx	r3
        rsp = NULL;
        if (rc != 0) {
   14304:	4605      	mov	r5, r0
   14306:	bb78      	cbnz	r0, 14368 <smp_process_request_packet+0xd8>
            break;
        }

        /* Trim processed request to free up space for subsequent responses. */
        mgmt_streamer_trim_front(&streamer->mgmt_stmr, req,
                                 smp_align4(req_hdr.nh_len));
   14308:	f8bd 0012 	ldrh.w	r0, [sp, #18]
   1430c:	f7ff feb8 	bl	14080 <smp_align4>
        mgmt_streamer_trim_front(&streamer->mgmt_stmr, req,
   14310:	4602      	mov	r2, r0
   14312:	4631      	mov	r1, r6
   14314:	4620      	mov	r0, r4
   14316:	f7ff fe15 	bl	13f44 <mgmt_streamer_trim_front>

        cmd_done_arg.err = MGMT_ERR_EOK;
   1431a:	ab06      	add	r3, sp, #24
   1431c:	2200      	movs	r2, #0
   1431e:	f843 2d0c 	str.w	r2, [r3, #-12]!
        mgmt_evt(MGMT_EVT_OP_CMD_DONE, req_hdr.nh_group, req_hdr.nh_id,
   14322:	f89d 2017 	ldrb.w	r2, [sp, #23]
   14326:	f8bd 1014 	ldrh.w	r1, [sp, #20]
   1432a:	2003      	movs	r0, #3
   1432c:	f7ff fea0 	bl	14070 <mgmt_evt>
        handler_found = false;
   14330:	e7b3      	b.n	1429a <smp_process_request_packet+0xa>
            valid_hdr = false;
   14332:	2300      	movs	r3, #0
   14334:	461f      	mov	r7, r3
                 &cmd_done_arg);
    }

    if (rc != 0 && valid_hdr) {
   14336:	b105      	cbz	r5, 1433a <smp_process_request_packet+0xaa>
   14338:	b9cb      	cbnz	r3, 1436e <smp_process_request_packet+0xde>
        }

        return rc;
    }

    mgmt_streamer_free_buf(&streamer->mgmt_stmr, req);
   1433a:	4631      	mov	r1, r6
   1433c:	4640      	mov	r0, r8
   1433e:	f7ff fe2b 	bl	13f98 <mgmt_streamer_free_buf>
    mgmt_streamer_free_buf(&streamer->mgmt_stmr, rsp);
   14342:	4639      	mov	r1, r7
   14344:	4640      	mov	r0, r8
   14346:	f7ff fe27 	bl	13f98 <mgmt_streamer_free_buf>
    return 0;
   1434a:	2500      	movs	r5, #0
}
   1434c:	4628      	mov	r0, r5
   1434e:	b006      	add	sp, #24
   14350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            valid_hdr = false;
   14354:	2300      	movs	r3, #0
   14356:	461f      	mov	r7, r3
   14358:	e7ed      	b.n	14336 <smp_process_request_packet+0xa6>
            rc = MGMT_ERR_ENOMEM;
   1435a:	2502      	movs	r5, #2
    valid_hdr = true;
   1435c:	2301      	movs	r3, #1
   1435e:	e7ea      	b.n	14336 <smp_process_request_packet+0xa6>
   14360:	2301      	movs	r3, #1
   14362:	e7e8      	b.n	14336 <smp_process_request_packet+0xa6>
   14364:	2301      	movs	r3, #1
   14366:	e7e6      	b.n	14336 <smp_process_request_packet+0xa6>
   14368:	2301      	movs	r3, #1
        rsp = NULL;
   1436a:	2700      	movs	r7, #0
   1436c:	e7e3      	b.n	14336 <smp_process_request_packet+0xa6>
        smp_on_err(streamer, &req_hdr, req, rsp, rc);
   1436e:	9500      	str	r5, [sp, #0]
   14370:	463b      	mov	r3, r7
   14372:	4632      	mov	r2, r6
   14374:	a904      	add	r1, sp, #16
   14376:	4620      	mov	r0, r4
   14378:	f7ff ff64 	bl	14244 <smp_on_err>
        if (handler_found) {
   1437c:	f89d 300b 	ldrb.w	r3, [sp, #11]
   14380:	2b00      	cmp	r3, #0
   14382:	d0e3      	beq.n	1434c <smp_process_request_packet+0xbc>
            cmd_done_arg.err = rc;
   14384:	ab06      	add	r3, sp, #24
   14386:	f843 5d0c 	str.w	r5, [r3, #-12]!
            mgmt_evt(MGMT_EVT_OP_CMD_DONE, req_hdr.nh_group, req_hdr.nh_id,
   1438a:	f89d 2017 	ldrb.w	r2, [sp, #23]
   1438e:	f8bd 1014 	ldrh.w	r1, [sp, #20]
   14392:	2003      	movs	r0, #3
   14394:	f7ff fe6c 	bl	14070 <mgmt_evt>
   14398:	e7d8      	b.n	1434c <smp_process_request_packet+0xbc>
	...

0001439c <ull_to_s>:
#include <stdbool.h>
#include "util/mcumgr_util.h"

int
ull_to_s(unsigned long long val, int dst_max_len, char *dst)
{
   1439c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   143a0:	4604      	mov	r4, r0
   143a2:	460d      	mov	r5, r1
   143a4:	4699      	mov	r9, r3
    int digit;
    int off;
    int len;

    /* First, calculate the length of the resulting string. */
    copy = val;
   143a6:	4603      	mov	r3, r0
    for (len = 0; copy != 0; len++) {
   143a8:	2700      	movs	r7, #0
   143aa:	e004      	b.n	143b6 <ull_to_s+0x1a>
        copy /= 10;
   143ac:	4916      	ldr	r1, [pc, #88]	; (14408 <ull_to_s+0x6c>)
   143ae:	fba1 1303 	umull	r1, r3, r1, r3
   143b2:	08db      	lsrs	r3, r3, #3
    for (len = 0; copy != 0; len++) {
   143b4:	3701      	adds	r7, #1
   143b6:	2b00      	cmp	r3, #0
   143b8:	d1f8      	bne.n	143ac <ull_to_s+0x10>
    }

    /* A value of 0 still requires one character ("0"). */
    if (len == 0) {
   143ba:	b907      	cbnz	r7, 143be <ull_to_s+0x22>
        len = 1;
   143bc:	2701      	movs	r7, #1
    }

    /* Ensure the buffer can accommodate the string and terminator. */
    if (len >= dst_max_len - 1) {
   143be:	3a01      	subs	r2, #1
   143c0:	42ba      	cmp	r2, r7
   143c2:	dd1d      	ble.n	14400 <ull_to_s+0x64>
        return -1;
    }

    /* Encode the string from right to left. */
    off = len;
    dst[off--] = '\0';
   143c4:	1e7e      	subs	r6, r7, #1
   143c6:	2300      	movs	r3, #0
   143c8:	f809 3007 	strb.w	r3, [r9, r7]
    do {
        digit = val % 10;
   143cc:	220a      	movs	r2, #10
   143ce:	2300      	movs	r3, #0
   143d0:	4620      	mov	r0, r4
   143d2:	4629      	mov	r1, r5
   143d4:	f01c fe1e 	bl	31014 <__aeabi_uldivmod>
        dst[off--] = '0' + digit;
   143d8:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
   143dc:	3230      	adds	r2, #48	; 0x30
   143de:	f809 2006 	strb.w	r2, [r9, r6]

        val /= 10;
   143e2:	220a      	movs	r2, #10
   143e4:	2300      	movs	r3, #0
   143e6:	4620      	mov	r0, r4
   143e8:	4629      	mov	r1, r5
   143ea:	f01c fe13 	bl	31014 <__aeabi_uldivmod>
   143ee:	4604      	mov	r4, r0
   143f0:	460d      	mov	r5, r1
        dst[off--] = '0' + digit;
   143f2:	4646      	mov	r6, r8
    } while (val > 0);
   143f4:	ea54 0305 	orrs.w	r3, r4, r5
   143f8:	d1e8      	bne.n	143cc <ull_to_s+0x30>

    return len;
}
   143fa:	4638      	mov	r0, r7
   143fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return -1;
   14400:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   14404:	e7f9      	b.n	143fa <ull_to_s+0x5e>
   14406:	bf00      	nop
   14408:	cccccccd 	.word	0xcccccccd

0001440c <ble_ll_count_rx_adv_pdus>:
 */
static void
ble_ll_count_rx_adv_pdus(uint8_t pdu_type)
{
    /* Count received packet types  */
    switch (pdu_type) {
   1440c:	2808      	cmp	r0, #8
   1440e:	d832      	bhi.n	14476 <ble_ll_count_rx_adv_pdus+0x6a>
   14410:	e8df f000 	tbb	[pc, r0]
   14414:	19140f0a 	.word	0x19140f0a
   14418:	052d231e 	.word	0x052d231e
   1441c:	28          	.byte	0x28
   1441d:	00          	.byte	0x00
    case BLE_ADV_PDU_TYPE_ADV_EXT_IND:
        STATS_INC(ble_ll_stats, rx_adv_ext_ind);
   1441e:	4a16      	ldr	r2, [pc, #88]	; (14478 <ble_ll_count_rx_adv_pdus+0x6c>)
   14420:	6d53      	ldr	r3, [r2, #84]	; 0x54
   14422:	3301      	adds	r3, #1
   14424:	6553      	str	r3, [r2, #84]	; 0x54
        break;
   14426:	4770      	bx	lr
    case BLE_ADV_PDU_TYPE_ADV_IND:
        STATS_INC(ble_ll_stats, rx_adv_ind);
   14428:	4a13      	ldr	r2, [pc, #76]	; (14478 <ble_ll_count_rx_adv_pdus+0x6c>)
   1442a:	6c93      	ldr	r3, [r2, #72]	; 0x48
   1442c:	3301      	adds	r3, #1
   1442e:	6493      	str	r3, [r2, #72]	; 0x48
        break;
   14430:	4770      	bx	lr
    case BLE_ADV_PDU_TYPE_ADV_DIRECT_IND:
        STATS_INC(ble_ll_stats, rx_adv_direct_ind);
   14432:	4a11      	ldr	r2, [pc, #68]	; (14478 <ble_ll_count_rx_adv_pdus+0x6c>)
   14434:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   14436:	3301      	adds	r3, #1
   14438:	64d3      	str	r3, [r2, #76]	; 0x4c
        break;
   1443a:	4770      	bx	lr
    case BLE_ADV_PDU_TYPE_ADV_NONCONN_IND:
        STATS_INC(ble_ll_stats, rx_adv_nonconn_ind);
   1443c:	4a0e      	ldr	r2, [pc, #56]	; (14478 <ble_ll_count_rx_adv_pdus+0x6c>)
   1443e:	6d13      	ldr	r3, [r2, #80]	; 0x50
   14440:	3301      	adds	r3, #1
   14442:	6513      	str	r3, [r2, #80]	; 0x50
        break;
   14444:	4770      	bx	lr
    case BLE_ADV_PDU_TYPE_SCAN_REQ:
        STATS_INC(ble_ll_stats, rx_scan_reqs);
   14446:	4a0c      	ldr	r2, [pc, #48]	; (14478 <ble_ll_count_rx_adv_pdus+0x6c>)
   14448:	6d93      	ldr	r3, [r2, #88]	; 0x58
   1444a:	3301      	adds	r3, #1
   1444c:	6593      	str	r3, [r2, #88]	; 0x58
        break;
   1444e:	4770      	bx	lr
    case BLE_ADV_PDU_TYPE_SCAN_RSP:
        STATS_INC(ble_ll_stats, rx_scan_rsps);
   14450:	4a09      	ldr	r2, [pc, #36]	; (14478 <ble_ll_count_rx_adv_pdus+0x6c>)
   14452:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
   14454:	3301      	adds	r3, #1
   14456:	65d3      	str	r3, [r2, #92]	; 0x5c
        break;
   14458:	4770      	bx	lr
    case BLE_ADV_PDU_TYPE_CONNECT_IND:
        STATS_INC(ble_ll_stats, rx_connect_reqs);
   1445a:	4a07      	ldr	r2, [pc, #28]	; (14478 <ble_ll_count_rx_adv_pdus+0x6c>)
   1445c:	6e13      	ldr	r3, [r2, #96]	; 0x60
   1445e:	3301      	adds	r3, #1
   14460:	6613      	str	r3, [r2, #96]	; 0x60
        break;
   14462:	4770      	bx	lr
    case BLE_ADV_PDU_TYPE_AUX_CONNECT_RSP:
        STATS_INC(ble_ll_stats, rx_aux_connect_rsp);
   14464:	4a04      	ldr	r2, [pc, #16]	; (14478 <ble_ll_count_rx_adv_pdus+0x6c>)
   14466:	6e93      	ldr	r3, [r2, #104]	; 0x68
   14468:	3301      	adds	r3, #1
   1446a:	6693      	str	r3, [r2, #104]	; 0x68
        break;
   1446c:	4770      	bx	lr
    case BLE_ADV_PDU_TYPE_ADV_SCAN_IND:
        STATS_INC(ble_ll_stats, rx_scan_ind);
   1446e:	4a02      	ldr	r2, [pc, #8]	; (14478 <ble_ll_count_rx_adv_pdus+0x6c>)
   14470:	6e53      	ldr	r3, [r2, #100]	; 0x64
   14472:	3301      	adds	r3, #1
   14474:	6653      	str	r3, [r2, #100]	; 0x64
        break;
    default:
        break;
    }
}
   14476:	4770      	bx	lr
   14478:	200035c0 	.word	0x200035c0

0001447c <ble_ll_count_rx_stats>:
 * @param hdr
 * @param len
 */
static void
ble_ll_count_rx_stats(struct ble_mbuf_hdr *hdr, uint16_t len, uint8_t pdu_type)
{
   1447c:	b510      	push	{r4, lr}
    uint8_t crcok;
    bool connection_data;

    crcok = BLE_MBUF_HDR_CRC_OK(hdr);
   1447e:	8803      	ldrh	r3, [r0, #0]
   14480:	f003 0407 	and.w	r4, r3, #7
    if (!connection_data) {
        connection_data = (BLE_MBUF_HDR_RX_STATE(hdr) == BLE_LL_STATE_DTM);
    }
#endif

    if (crcok) {
   14484:	f013 0f80 	tst.w	r3, #128	; 0x80
   14488:	d014      	beq.n	144b4 <ble_ll_count_rx_stats+0x38>
        if (connection_data) {
   1448a:	2c04      	cmp	r4, #4
   1448c:	d107      	bne.n	1449e <ble_ll_count_rx_stats+0x22>
            STATS_INC(ble_ll_stats, rx_data_pdu_crc_ok);
   1448e:	4b12      	ldr	r3, [pc, #72]	; (144d8 <ble_ll_count_rx_stats+0x5c>)
   14490:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   14492:	3201      	adds	r2, #1
   14494:	635a      	str	r2, [r3, #52]	; 0x34
            STATS_INCN(ble_ll_stats, rx_data_bytes_crc_ok, len);
   14496:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   14498:	4411      	add	r1, r2
   1449a:	63d9      	str	r1, [r3, #60]	; 0x3c
   1449c:	e013      	b.n	144c6 <ble_ll_count_rx_stats+0x4a>
   1449e:	4610      	mov	r0, r2
        } else {
            STATS_INC(ble_ll_stats, rx_adv_pdu_crc_ok);
   144a0:	4b0d      	ldr	r3, [pc, #52]	; (144d8 <ble_ll_count_rx_stats+0x5c>)
   144a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   144a4:	3201      	adds	r2, #1
   144a6:	625a      	str	r2, [r3, #36]	; 0x24
            STATS_INCN(ble_ll_stats, rx_adv_bytes_crc_ok, len);
   144a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   144aa:	4411      	add	r1, r2
   144ac:	62d9      	str	r1, [r3, #44]	; 0x2c
            ble_ll_count_rx_adv_pdus(pdu_type);
   144ae:	f7ff ffad 	bl	1440c <ble_ll_count_rx_adv_pdus>
   144b2:	e008      	b.n	144c6 <ble_ll_count_rx_stats+0x4a>
        }
    } else {
        if (connection_data) {
   144b4:	2c04      	cmp	r4, #4
   144b6:	d007      	beq.n	144c8 <ble_ll_count_rx_stats+0x4c>
            STATS_INC(ble_ll_stats, rx_data_pdu_crc_err);
            STATS_INCN(ble_ll_stats, rx_data_bytes_crc_err, len);
        } else {
            STATS_INC(ble_ll_stats, rx_adv_pdu_crc_err);
   144b8:	4b07      	ldr	r3, [pc, #28]	; (144d8 <ble_ll_count_rx_stats+0x5c>)
   144ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   144bc:	3201      	adds	r2, #1
   144be:	629a      	str	r2, [r3, #40]	; 0x28
            STATS_INCN(ble_ll_stats, rx_adv_bytes_crc_err, len);
   144c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   144c2:	4411      	add	r1, r2
   144c4:	6319      	str	r1, [r3, #48]	; 0x30
        }
    }
}
   144c6:	bd10      	pop	{r4, pc}
            STATS_INC(ble_ll_stats, rx_data_pdu_crc_err);
   144c8:	4b03      	ldr	r3, [pc, #12]	; (144d8 <ble_ll_count_rx_stats+0x5c>)
   144ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   144cc:	3201      	adds	r2, #1
   144ce:	639a      	str	r2, [r3, #56]	; 0x38
            STATS_INCN(ble_ll_stats, rx_data_bytes_crc_err, len);
   144d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   144d2:	4411      	add	r1, r2
   144d4:	6419      	str	r1, [r3, #64]	; 0x40
   144d6:	e7f6      	b.n	144c6 <ble_ll_count_rx_stats+0x4a>
   144d8:	200035c0 	.word	0x200035c0

000144dc <ble_ll_flush_pkt_queue>:
 *
 * @param pktq
 */
static void
ble_ll_flush_pkt_queue(struct ble_ll_pkt_q *pktq)
{
   144dc:	b510      	push	{r4, lr}
   144de:	4604      	mov	r4, r0
    struct os_mbuf_pkthdr *pkthdr;
    struct os_mbuf *om;

    /* FLush all packets from Link layer queues */
    while (STAILQ_FIRST(pktq)) {
   144e0:	e001      	b.n	144e6 <ble_ll_flush_pkt_queue+0xa>
        pkthdr = STAILQ_FIRST(pktq);
        om = OS_MBUF_PKTHDR_TO_MBUF(pkthdr);

        /* Remove from queue and free the mbuf */
        STAILQ_REMOVE_HEAD(pktq, omp_next);
        os_mbuf_free_chain(om);
   144e2:	f7f8 ff9d 	bl	d420 <os_mbuf_free_chain>
    while (STAILQ_FIRST(pktq)) {
   144e6:	6823      	ldr	r3, [r4, #0]
   144e8:	b13b      	cbz	r3, 144fa <ble_ll_flush_pkt_queue+0x1e>
        om = OS_MBUF_PKTHDR_TO_MBUF(pkthdr);
   144ea:	f1a3 0010 	sub.w	r0, r3, #16
        STAILQ_REMOVE_HEAD(pktq, omp_next);
   144ee:	685b      	ldr	r3, [r3, #4]
   144f0:	6023      	str	r3, [r4, #0]
   144f2:	2b00      	cmp	r3, #0
   144f4:	d1f5      	bne.n	144e2 <ble_ll_flush_pkt_queue+0x6>
   144f6:	6064      	str	r4, [r4, #4]
   144f8:	e7f3      	b.n	144e2 <ble_ll_flush_pkt_queue+0x6>
    }
}
   144fa:	bd10      	pop	{r4, pc}

000144fc <ble_ll_task>:
{
   144fc:	b508      	push	{r3, lr}
    ble_phy_init();
   144fe:	f009 fb47 	bl	1db90 <ble_phy_init>
    ble_phy_txpwr_set(MYNEWT_VAL(BLE_LL_TX_PWR_DBM));
   14502:	2000      	movs	r0, #0
   14504:	f009 fc6e 	bl	1dde4 <ble_phy_txpwr_set>
    ble_hci_trans_cfg_ll(ble_ll_hci_cmd_rx, NULL, ble_ll_hci_acl_rx, NULL);
   14508:	2300      	movs	r3, #0
   1450a:	4a0d      	ldr	r2, [pc, #52]	; (14540 <ble_ll_task+0x44>)
   1450c:	4619      	mov	r1, r3
   1450e:	480d      	ldr	r0, [pc, #52]	; (14544 <ble_ll_task+0x48>)
   14510:	f015 fe2a 	bl	2a168 <ble_hci_trans_cfg_ll>
    ble_ll_hci_send_noop();
   14514:	f006 f888 	bl	1a628 <ble_ll_hci_send_noop>
    ble_ll_rand_start();
   14518:	f006 fb10 	bl	1ab3c <ble_ll_rand_start>
ble_npl_eventq_get(struct ble_npl_eventq *evq, ble_npl_time_t tmo)
{
    struct os_event *ev;

    if (tmo == BLE_NPL_TIME_FOREVER) {
        ev = os_eventq_get(&evq->evq);
   1451c:	480a      	ldr	r0, [pc, #40]	; (14548 <ble_ll_task+0x4c>)
   1451e:	f7f8 fe8b 	bl	d238 <os_eventq_get>
        assert(ev);
   14522:	b110      	cbz	r0, 1452a <ble_ll_task+0x2e>
}

static inline void
ble_npl_event_run(struct ble_npl_event *ev)
{
    ev->ev.ev_cb(&ev->ev);
   14524:	6842      	ldr	r2, [r0, #4]
   14526:	4790      	blx	r2
   14528:	e7f8      	b.n	1451c <ble_ll_task+0x20>
   1452a:	f7f7 fe5d 	bl	c1e8 <hal_debugger_connected>
   1452e:	b100      	cbz	r0, 14532 <ble_ll_task+0x36>
   14530:	be01      	bkpt	0x0001
   14532:	2300      	movs	r3, #0
   14534:	461a      	mov	r2, r3
   14536:	4619      	mov	r1, r3
   14538:	4618      	mov	r0, r3
   1453a:	f7f8 fb09 	bl	cb50 <__assert_func>
   1453e:	bf00      	nop
   14540:	0001a761 	.word	0x0001a761
   14544:	0001a725 	.word	0x0001a725
   14548:	20003740 	.word	0x20003740

0001454c <ble_ll_hw_err_timer_cb>:
{
   1454c:	b508      	push	{r3, lr}
    if (ble_ll_hci_ev_hw_err(BLE_HW_ERR_HCI_SYNC_LOSS)) {
   1454e:	2001      	movs	r0, #1
   14550:	f006 fa4c 	bl	1a9ec <ble_ll_hci_ev_hw_err>
   14554:	b900      	cbnz	r0, 14558 <ble_ll_hw_err_timer_cb+0xc>
}
   14556:	bd08      	pop	{r3, pc}
}

static inline ble_npl_error_t
ble_npl_callout_reset(struct ble_npl_callout *co, ble_npl_time_t ticks)
{
    return (ble_npl_error_t)os_callout_reset(&co->co, ticks);
   14558:	2106      	movs	r1, #6
   1455a:	4802      	ldr	r0, [pc, #8]	; (14564 <ble_ll_hw_err_timer_cb+0x18>)
   1455c:	f7f8 fccc 	bl	cef8 <os_callout_reset>
   14560:	e7f9      	b.n	14556 <ble_ll_hw_err_timer_cb+0xa>
   14562:	bf00      	nop
   14564:	200037b8 	.word	0x200037b8

00014568 <ble_ll_event_comp_pkts>:
{
   14568:	b508      	push	{r3, lr}
    ble_ll_conn_num_comp_pkts_event_send(NULL);
   1456a:	2000      	movs	r0, #0
   1456c:	f003 fea4 	bl	182b8 <ble_ll_conn_num_comp_pkts_event_send>
}
   14570:	bd08      	pop	{r3, pc}

00014572 <ble_ll_event_dbuf_overflow>:
{
   14572:	b508      	push	{r3, lr}
    ble_ll_hci_ev_databuf_overflow();
   14574:	f006 fa52 	bl	1aa1c <ble_ll_hci_ev_databuf_overflow>
}
   14578:	bd08      	pop	{r3, pc}
	...

0001457c <ble_ll_tx_pkt_in>:
{
   1457c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    while (STAILQ_FIRST(&g_ble_ll_data.ll_tx_pkt_q)) {
   1457e:	e00a      	b.n	14596 <ble_ll_tx_pkt_in+0x1a>
        STAILQ_REMOVE_HEAD(&g_ble_ll_data.ll_tx_pkt_q, omp_next);
   14580:	4613      	mov	r3, r2
   14582:	3260      	adds	r2, #96	; 0x60
   14584:	665a      	str	r2, [r3, #100]	; 0x64
   14586:	e010      	b.n	145aa <ble_ll_tx_pkt_in+0x2e>
            STATS_INC(ble_ll_stats, bad_acl_hdr);
   14588:	4a18      	ldr	r2, [pc, #96]	; (145ec <ble_ll_tx_pkt_in+0x70>)
   1458a:	69d3      	ldr	r3, [r2, #28]
   1458c:	3301      	adds	r3, #1
   1458e:	61d3      	str	r3, [r2, #28]
            os_mbuf_free_chain(om);
   14590:	4628      	mov	r0, r5
   14592:	f7f8 ff45 	bl	d420 <os_mbuf_free_chain>
    while (STAILQ_FIRST(&g_ble_ll_data.ll_tx_pkt_q)) {
   14596:	4b16      	ldr	r3, [pc, #88]	; (145f0 <ble_ll_tx_pkt_in+0x74>)
   14598:	6e1c      	ldr	r4, [r3, #96]	; 0x60
   1459a:	b32c      	cbz	r4, 145e8 <ble_ll_tx_pkt_in+0x6c>
        om = (struct os_mbuf *)((uint8_t *)pkthdr - sizeof(struct os_mbuf));
   1459c:	f1a4 0510 	sub.w	r5, r4, #16
        STAILQ_REMOVE_HEAD(&g_ble_ll_data.ll_tx_pkt_q, omp_next);
   145a0:	6863      	ldr	r3, [r4, #4]
   145a2:	4a13      	ldr	r2, [pc, #76]	; (145f0 <ble_ll_tx_pkt_in+0x74>)
   145a4:	6613      	str	r3, [r2, #96]	; 0x60
   145a6:	2b00      	cmp	r3, #0
   145a8:	d0ea      	beq.n	14580 <ble_ll_tx_pkt_in+0x4>
        handle = get_le16(om->om_data);
   145aa:	f854 0c10 	ldr.w	r0, [r4, #-16]
   145ae:	f01a fbde 	bl	2ed6e <get_le16>
   145b2:	4607      	mov	r7, r0
        length = get_le16(om->om_data + 2);
   145b4:	f854 0c10 	ldr.w	r0, [r4, #-16]
   145b8:	3002      	adds	r0, #2
   145ba:	f01a fbd8 	bl	2ed6e <get_le16>
   145be:	4606      	mov	r6, r0
        os_mbuf_adj(om, sizeof(struct hci_data_hdr));
   145c0:	2104      	movs	r1, #4
   145c2:	4628      	mov	r0, r5
   145c4:	f7f9 f804 	bl	d5d0 <os_mbuf_adj>
        pb = handle & 0x3000;
   145c8:	f407 5240 	and.w	r2, r7, #12288	; 0x3000
        if ((pkthdr->omp_len != length) || (pb > 0x1000) || (length == 0)) {
   145cc:	8823      	ldrh	r3, [r4, #0]
   145ce:	42b3      	cmp	r3, r6
   145d0:	d1da      	bne.n	14588 <ble_ll_tx_pkt_in+0xc>
   145d2:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
   145d6:	d8d7      	bhi.n	14588 <ble_ll_tx_pkt_in+0xc>
   145d8:	2e00      	cmp	r6, #0
   145da:	d0d5      	beq.n	14588 <ble_ll_tx_pkt_in+0xc>
        ble_ll_conn_tx_pkt_in(om, handle, length);
   145dc:	4632      	mov	r2, r6
   145de:	4639      	mov	r1, r7
   145e0:	4628      	mov	r0, r5
   145e2:	f003 fb39 	bl	17c58 <ble_ll_conn_tx_pkt_in>
   145e6:	e7d6      	b.n	14596 <ble_ll_tx_pkt_in+0x1a>
}
   145e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   145ea:	bf00      	nop
   145ec:	200035c0 	.word	0x200035c0
   145f0:	20003730 	.word	0x20003730

000145f4 <ble_ll_event_tx_pkt>:
{
   145f4:	b508      	push	{r3, lr}
    ble_ll_tx_pkt_in();
   145f6:	f7ff ffc1 	bl	1457c <ble_ll_tx_pkt_in>
}
   145fa:	bd08      	pop	{r3, pc}

000145fc <ble_ll_rx_pkt_in>:
{
   145fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    while (STAILQ_FIRST(&g_ble_ll_data.ll_rx_pkt_q)) {
   14600:	e011      	b.n	14626 <ble_ll_rx_pkt_in+0x2a>
        STAILQ_REMOVE_HEAD(&g_ble_ll_data.ll_rx_pkt_q, omp_next);
   14602:	4613      	mov	r3, r2
   14604:	3248      	adds	r2, #72	; 0x48
   14606:	64da      	str	r2, [r3, #76]	; 0x4c
   14608:	e01b      	b.n	14642 <ble_ll_rx_pkt_in+0x46>
            ble_ll_conn_rx_data_pdu(m, ble_hdr);
   1460a:	4631      	mov	r1, r6
   1460c:	4638      	mov	r0, r7
   1460e:	f003 f8e1 	bl	177d4 <ble_ll_conn_rx_data_pdu>
   14612:	e008      	b.n	14626 <ble_ll_rx_pkt_in+0x2a>
            ble_ll_adv_rx_pkt_in(pdu_type, rxbuf, ble_hdr);
   14614:	4632      	mov	r2, r6
   14616:	4641      	mov	r1, r8
   14618:	4628      	mov	r0, r5
   1461a:	f001 fb5d 	bl	15cd8 <ble_ll_adv_rx_pkt_in>
        if (m) {
   1461e:	b117      	cbz	r7, 14626 <ble_ll_rx_pkt_in+0x2a>
            os_mbuf_free_chain(m);
   14620:	4638      	mov	r0, r7
   14622:	f7f8 fefd 	bl	d420 <os_mbuf_free_chain>
    while (STAILQ_FIRST(&g_ble_ll_data.ll_rx_pkt_q)) {
   14626:	4b21      	ldr	r3, [pc, #132]	; (146ac <ble_ll_rx_pkt_in+0xb0>)
   14628:	6c9c      	ldr	r4, [r3, #72]	; 0x48
   1462a:	2c00      	cmp	r4, #0
   1462c:	d03b      	beq.n	146a6 <ble_ll_rx_pkt_in+0xaa>
        m = (struct os_mbuf *)((uint8_t *)pkthdr - sizeof(struct os_mbuf));
   1462e:	f1a4 0710 	sub.w	r7, r4, #16
        OS_ENTER_CRITICAL(sr);
   14632:	f7f9 ff7f 	bl	e534 <os_arch_save_sr>
        STAILQ_REMOVE_HEAD(&g_ble_ll_data.ll_rx_pkt_q, omp_next);
   14636:	4a1d      	ldr	r2, [pc, #116]	; (146ac <ble_ll_rx_pkt_in+0xb0>)
   14638:	6c93      	ldr	r3, [r2, #72]	; 0x48
   1463a:	685b      	ldr	r3, [r3, #4]
   1463c:	6493      	str	r3, [r2, #72]	; 0x48
   1463e:	2b00      	cmp	r3, #0
   14640:	d0df      	beq.n	14602 <ble_ll_rx_pkt_in+0x6>
        OS_EXIT_CRITICAL(sr);
   14642:	f7f9 ff7d 	bl	e540 <os_arch_restore_sr>
        ble_hdr = BLE_MBUF_HDR_PTR(m);
   14646:	f104 0608 	add.w	r6, r4, #8
        rxbuf = m->om_data;
   1464a:	f854 8c10 	ldr.w	r8, [r4, #-16]
        pdu_type = rxbuf[0] & BLE_ADV_PDU_HDR_TYPE_MASK;
   1464e:	f898 5000 	ldrb.w	r5, [r8]
   14652:	f005 050f 	and.w	r5, r5, #15
        ble_ll_count_rx_stats(ble_hdr, pkthdr->omp_len, pdu_type);
   14656:	462a      	mov	r2, r5
   14658:	8821      	ldrh	r1, [r4, #0]
   1465a:	4630      	mov	r0, r6
   1465c:	f7ff ff0e 	bl	1447c <ble_ll_count_rx_stats>
        switch (BLE_MBUF_HDR_RX_STATE(ble_hdr)) {
   14660:	7a23      	ldrb	r3, [r4, #8]
   14662:	f003 0307 	and.w	r3, r3, #7
   14666:	3b01      	subs	r3, #1
   14668:	2b03      	cmp	r3, #3
   1466a:	d817      	bhi.n	1469c <ble_ll_rx_pkt_in+0xa0>
   1466c:	a201      	add	r2, pc, #4	; (adr r2, 14674 <ble_ll_rx_pkt_in+0x78>)
   1466e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   14672:	bf00      	nop
   14674:	00014615 	.word	0x00014615
   14678:	00014685 	.word	0x00014685
   1467c:	00014691 	.word	0x00014691
   14680:	0001460b 	.word	0x0001460b
            ble_ll_scan_rx_pkt_in(pdu_type, m, ble_hdr);
   14684:	4632      	mov	r2, r6
   14686:	4639      	mov	r1, r7
   14688:	4628      	mov	r0, r5
   1468a:	f007 ff65 	bl	1c558 <ble_ll_scan_rx_pkt_in>
            break;
   1468e:	e7c6      	b.n	1461e <ble_ll_rx_pkt_in+0x22>
            ble_ll_init_rx_pkt_in(pdu_type, rxbuf, ble_hdr);
   14690:	4632      	mov	r2, r6
   14692:	4641      	mov	r1, r8
   14694:	4628      	mov	r0, r5
   14696:	f002 fe2d 	bl	172f4 <ble_ll_init_rx_pkt_in>
            break;
   1469a:	e7c0      	b.n	1461e <ble_ll_rx_pkt_in+0x22>
            STATS_INC(ble_ll_stats, bad_ll_state);
   1469c:	4a04      	ldr	r2, [pc, #16]	; (146b0 <ble_ll_rx_pkt_in+0xb4>)
   1469e:	6993      	ldr	r3, [r2, #24]
   146a0:	3301      	adds	r3, #1
   146a2:	6193      	str	r3, [r2, #24]
            break;
   146a4:	e7bb      	b.n	1461e <ble_ll_rx_pkt_in+0x22>
}
   146a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   146aa:	bf00      	nop
   146ac:	20003730 	.word	0x20003730
   146b0:	200035c0 	.word	0x200035c0

000146b4 <ble_ll_event_rx_pkt>:
{
   146b4:	b508      	push	{r3, lr}
    ble_ll_rx_pkt_in();
   146b6:	f7ff ffa1 	bl	145fc <ble_ll_rx_pkt_in>
}
   146ba:	bd08      	pop	{r3, pc}

000146bc <ble_ll_seed_prng>:
    return rc;
}

static void
ble_ll_seed_prng(void)
{
   146bc:	b508      	push	{r3, lr}

    /* Seed random number generator with least significant bytes of device
     * address.
     */
    seed = 0;
    for (i = 0; i < 4; ++i) {
   146be:	2300      	movs	r3, #0
    seed = 0;
   146c0:	4618      	mov	r0, r3
    for (i = 0; i < 4; ++i) {
   146c2:	e004      	b.n	146ce <ble_ll_seed_prng+0x12>
        seed |= g_dev_addr[i];
   146c4:	4a04      	ldr	r2, [pc, #16]	; (146d8 <ble_ll_seed_prng+0x1c>)
   146c6:	5cd2      	ldrb	r2, [r2, r3]
   146c8:	4310      	orrs	r0, r2
        seed <<= 8;
   146ca:	0200      	lsls	r0, r0, #8
    for (i = 0; i < 4; ++i) {
   146cc:	3301      	adds	r3, #1
   146ce:	2b03      	cmp	r3, #3
   146d0:	ddf8      	ble.n	146c4 <ble_ll_seed_prng+0x8>
}
__extern_inline void srand(unsigned int __s)
{
	srand48(__s);
   146d2:	f7fa f9a9 	bl	ea28 <srand48>
    }
    srand(seed);
}
   146d6:	bd08      	pop	{r3, pc}
   146d8:	200036d4 	.word	0x200036d4

000146dc <ble_ll_rxpdu_alloc>:
{
   146dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   146de:	4604      	mov	r4, r0
    om_ret = os_msys_get_pkthdr(len, sizeof(struct ble_mbuf_hdr));
   146e0:	2110      	movs	r1, #16
   146e2:	f7f9 fb5e 	bl	dda2 <os_msys_get_pkthdr>
    if (!om_ret) {
   146e6:	b1e8      	cbz	r0, 14724 <ble_ll_rxpdu_alloc+0x48>
   146e8:	4606      	mov	r6, r0
    pkthdr->omp_len = len;
   146ea:	8204      	strh	r4, [r0, #16]
    databuf_len = om_ret->om_omp->omp_databuf_len & ~3;
   146ec:	6883      	ldr	r3, [r0, #8]
   146ee:	881b      	ldrh	r3, [r3, #0]
   146f0:	f023 0303 	bic.w	r3, r3, #3
   146f4:	b29b      	uxth	r3, r3
    om_ret->om_data += 4;
   146f6:	6802      	ldr	r2, [r0, #0]
   146f8:	3204      	adds	r2, #4
   146fa:	6002      	str	r2, [r0, #0]
    rem_len -= databuf_len - om_ret->om_pkthdr_len - 4;
   146fc:	461f      	mov	r7, r3
   146fe:	7942      	ldrb	r2, [r0, #5]
   14700:	1a9b      	subs	r3, r3, r2
   14702:	3b04      	subs	r3, #4
   14704:	1ae4      	subs	r4, r4, r3
    om = om_ret;
   14706:	4605      	mov	r5, r0
    while (rem_len > 0) {
   14708:	2c00      	cmp	r4, #0
   1470a:	dd10      	ble.n	1472e <ble_ll_rxpdu_alloc+0x52>
        om_next = os_msys_get(rem_len, 0);
   1470c:	2100      	movs	r1, #0
   1470e:	b2a0      	uxth	r0, r4
   14710:	f7f9 fb38 	bl	dd84 <os_msys_get>
        if (!om_next) {
   14714:	b118      	cbz	r0, 1471e <ble_ll_rxpdu_alloc+0x42>
        SLIST_NEXT(om, om_next) = om_next;
   14716:	60e8      	str	r0, [r5, #12]
        rem_len -= databuf_len;
   14718:	1be4      	subs	r4, r4, r7
        om = om_next;
   1471a:	4605      	mov	r5, r0
   1471c:	e7f4      	b.n	14708 <ble_ll_rxpdu_alloc+0x2c>
            os_mbuf_free_chain(om_ret);
   1471e:	4630      	mov	r0, r6
   14720:	f7f8 fe7e 	bl	d420 <os_mbuf_free_chain>
    STATS_INC(ble_ll_stats, no_bufs);
   14724:	4a03      	ldr	r2, [pc, #12]	; (14734 <ble_ll_rxpdu_alloc+0x58>)
   14726:	6a13      	ldr	r3, [r2, #32]
   14728:	3301      	adds	r3, #1
   1472a:	6213      	str	r3, [r2, #32]
    return NULL;
   1472c:	2600      	movs	r6, #0
}
   1472e:	4630      	mov	r0, r6
   14730:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14732:	bf00      	nop
   14734:	200035c0 	.word	0x200035c0

00014738 <ble_ll_chk_txrx_octets>:
    if ((octets < BLE_LL_CONN_SUPP_BYTES_MIN) ||
   14738:	381b      	subs	r0, #27
   1473a:	b280      	uxth	r0, r0
   1473c:	28e0      	cmp	r0, #224	; 0xe0
   1473e:	d801      	bhi.n	14744 <ble_ll_chk_txrx_octets+0xc>
        rc = 1;
   14740:	2001      	movs	r0, #1
}
   14742:	4770      	bx	lr
        rc = 0;
   14744:	2000      	movs	r0, #0
   14746:	4770      	bx	lr

00014748 <ble_ll_chk_txrx_time>:
    if ((time < BLE_LL_CONN_SUPP_TIME_MIN) ||
   14748:	f5a0 70a4 	sub.w	r0, r0, #328	; 0x148
   1474c:	b280      	uxth	r0, r0
   1474e:	f244 1348 	movw	r3, #16712	; 0x4148
   14752:	4298      	cmp	r0, r3
   14754:	d801      	bhi.n	1475a <ble_ll_chk_txrx_time+0x12>
        rc = 1;
   14756:	2001      	movs	r0, #1
}
   14758:	4770      	bx	lr
        rc = 0;
   1475a:	2000      	movs	r0, #0
   1475c:	4770      	bx	lr

0001475e <ble_ll_is_rpa>:
    if (addr_type && ((addr[5] & 0xc0) == 0x40)) {
   1475e:	b131      	cbz	r1, 1476e <ble_ll_is_rpa+0x10>
   14760:	7943      	ldrb	r3, [r0, #5]
   14762:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   14766:	2b40      	cmp	r3, #64	; 0x40
   14768:	d003      	beq.n	14772 <ble_ll_is_rpa+0x14>
        rc = 0;
   1476a:	2000      	movs	r0, #0
   1476c:	4770      	bx	lr
   1476e:	2000      	movs	r0, #0
   14770:	4770      	bx	lr
        rc = 1;
   14772:	2001      	movs	r0, #1
}
   14774:	4770      	bx	lr

00014776 <ble_ll_addr_is_id>:
    return !addr_type || ((addr[5] & 0xc0) == 0xc0);
   14776:	b141      	cbz	r1, 1478a <ble_ll_addr_is_id+0x14>
   14778:	7943      	ldrb	r3, [r0, #5]
   1477a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1477e:	2bc0      	cmp	r3, #192	; 0xc0
   14780:	d001      	beq.n	14786 <ble_ll_addr_is_id+0x10>
   14782:	2000      	movs	r0, #0
}
   14784:	4770      	bx	lr
    return !addr_type || ((addr[5] & 0xc0) == 0xc0);
   14786:	2001      	movs	r0, #1
   14788:	4770      	bx	lr
   1478a:	2001      	movs	r0, #1
   1478c:	4770      	bx	lr

0001478e <ble_ll_addr_subtype>:
    if (!addr_type) {
   1478e:	b141      	cbz	r1, 147a2 <ble_ll_addr_subtype+0x14>
    switch (addr[5] >> 6) {
   14790:	7943      	ldrb	r3, [r0, #5]
   14792:	099b      	lsrs	r3, r3, #6
   14794:	d003      	beq.n	1479e <ble_ll_addr_subtype+0x10>
   14796:	2b01      	cmp	r3, #1
   14798:	d005      	beq.n	147a6 <ble_ll_addr_subtype+0x18>
        return BLE_LL_ADDR_SUBTYPE_IDENTITY; /* static random */
   1479a:	2000      	movs	r0, #0
   1479c:	4770      	bx	lr
        return BLE_LL_ADDR_SUBTYPE_NRPA; /* NRPA */
   1479e:	2002      	movs	r0, #2
   147a0:	4770      	bx	lr
        return BLE_LL_ADDR_SUBTYPE_IDENTITY;
   147a2:	2000      	movs	r0, #0
   147a4:	4770      	bx	lr
        return BLE_LL_ADDR_SUBTYPE_RPA; /* RPA */
   147a6:	2001      	movs	r0, #1
}
   147a8:	4770      	bx	lr

000147aa <ble_ll_is_valid_public_addr>:
    for (i = 0; i < BLE_DEV_ADDR_LEN; ++i) {
   147aa:	2300      	movs	r3, #0
   147ac:	2b05      	cmp	r3, #5
   147ae:	dc03      	bgt.n	147b8 <ble_ll_is_valid_public_addr+0xe>
        if (addr[i]) {
   147b0:	5cc2      	ldrb	r2, [r0, r3]
   147b2:	b91a      	cbnz	r2, 147bc <ble_ll_is_valid_public_addr+0x12>
    for (i = 0; i < BLE_DEV_ADDR_LEN; ++i) {
   147b4:	3301      	adds	r3, #1
   147b6:	e7f9      	b.n	147ac <ble_ll_is_valid_public_addr+0x2>
    return 0;
   147b8:	2000      	movs	r0, #0
   147ba:	4770      	bx	lr
            return 1;
   147bc:	2001      	movs	r0, #1
}
   147be:	4770      	bx	lr

000147c0 <ble_ll_is_valid_random_addr>:
{
   147c0:	b510      	push	{r4, lr}
    sum = 0;
   147c2:	2300      	movs	r3, #0
    for (i = 0; i < (BLE_DEV_ADDR_LEN -1); ++i) {
   147c4:	461a      	mov	r2, r3
   147c6:	e003      	b.n	147d0 <ble_ll_is_valid_random_addr+0x10>
        sum += addr[i];
   147c8:	5c84      	ldrb	r4, [r0, r2]
   147ca:	4423      	add	r3, r4
   147cc:	b29b      	uxth	r3, r3
    for (i = 0; i < (BLE_DEV_ADDR_LEN -1); ++i) {
   147ce:	3201      	adds	r2, #1
   147d0:	2a04      	cmp	r2, #4
   147d2:	ddf9      	ble.n	147c8 <ble_ll_is_valid_random_addr+0x8>
    sum += addr[5] & 0x3f;
   147d4:	7942      	ldrb	r2, [r0, #5]
   147d6:	f002 013f 	and.w	r1, r2, #63	; 0x3f
   147da:	440b      	add	r3, r1
   147dc:	b29b      	uxth	r3, r3
    if ((sum == 0) || (sum == ((5*255) + 0x3f))) {
   147de:	b1f3      	cbz	r3, 1481e <ble_ll_is_valid_random_addr+0x5e>
   147e0:	f240 543a 	movw	r4, #1338	; 0x53a
   147e4:	42a3      	cmp	r3, r4
   147e6:	d01d      	beq.n	14824 <ble_ll_is_valid_random_addr+0x64>
    addr_type = addr[5] & 0xc0;
   147e8:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
    if (addr_type == 0xc0) {
   147ec:	2ac0      	cmp	r2, #192	; 0xc0
   147ee:	d01b      	beq.n	14828 <ble_ll_is_valid_random_addr+0x68>
    } else if (addr_type == 0x40) {
   147f0:	2a40      	cmp	r2, #64	; 0x40
   147f2:	d009      	beq.n	14808 <ble_ll_is_valid_random_addr+0x48>
    } else if (addr_type == 0) {
   147f4:	b9f2      	cbnz	r2, 14834 <ble_ll_is_valid_random_addr+0x74>
   147f6:	4601      	mov	r1, r0
        if (!memcmp(g_dev_addr, addr, BLE_DEV_ADDR_LEN)) {
   147f8:	2206      	movs	r2, #6
   147fa:	480f      	ldr	r0, [pc, #60]	; (14838 <ble_ll_is_valid_random_addr+0x78>)
   147fc:	f7fa f8ac 	bl	e958 <memcmp>
   14800:	4603      	mov	r3, r0
   14802:	b168      	cbz	r0, 14820 <ble_ll_is_valid_random_addr+0x60>
    rc = 1;
   14804:	2301      	movs	r3, #1
   14806:	e00b      	b.n	14820 <ble_ll_is_valid_random_addr+0x60>
        sum = addr[3] + addr[4] + (addr[5] & 0x3f);
   14808:	78c3      	ldrb	r3, [r0, #3]
   1480a:	7902      	ldrb	r2, [r0, #4]
   1480c:	4413      	add	r3, r2
        if ((sum == 0) || (sum == (255 + 255 + 0x3f))) {
   1480e:	18c9      	adds	r1, r1, r3
   14810:	d00c      	beq.n	1482c <ble_ll_is_valid_random_addr+0x6c>
   14812:	f240 233d 	movw	r3, #573	; 0x23d
   14816:	4299      	cmp	r1, r3
   14818:	d00a      	beq.n	14830 <ble_ll_is_valid_random_addr+0x70>
    rc = 1;
   1481a:	2301      	movs	r3, #1
   1481c:	e000      	b.n	14820 <ble_ll_is_valid_random_addr+0x60>
        return 0;
   1481e:	2300      	movs	r3, #0
}
   14820:	4618      	mov	r0, r3
   14822:	bd10      	pop	{r4, pc}
        return 0;
   14824:	2300      	movs	r3, #0
   14826:	e7fb      	b.n	14820 <ble_ll_is_valid_random_addr+0x60>
    rc = 1;
   14828:	2301      	movs	r3, #1
   1482a:	e7f9      	b.n	14820 <ble_ll_is_valid_random_addr+0x60>
            rc = 0;
   1482c:	2300      	movs	r3, #0
   1482e:	e7f7      	b.n	14820 <ble_ll_is_valid_random_addr+0x60>
   14830:	2300      	movs	r3, #0
   14832:	e7f5      	b.n	14820 <ble_ll_is_valid_random_addr+0x60>
        rc = 0;
   14834:	2300      	movs	r3, #0
   14836:	e7f3      	b.n	14820 <ble_ll_is_valid_random_addr+0x60>
   14838:	200036d4 	.word	0x200036d4

0001483c <ble_ll_is_valid_own_addr_type>:
{
   1483c:	b508      	push	{r3, lr}
    switch (own_addr_type) {
   1483e:	2803      	cmp	r0, #3
   14840:	d80b      	bhi.n	1485a <ble_ll_is_valid_own_addr_type+0x1e>
   14842:	e8df f000 	tbb	[pc, r0]
   14846:	0602      	.short	0x0602
   14848:	0602      	.short	0x0602
        rc = ble_ll_is_valid_public_addr(g_dev_addr);
   1484a:	4805      	ldr	r0, [pc, #20]	; (14860 <ble_ll_is_valid_own_addr_type+0x24>)
   1484c:	f7ff ffad 	bl	147aa <ble_ll_is_valid_public_addr>
}
   14850:	bd08      	pop	{r3, pc}
        rc = ble_ll_is_valid_random_addr(random_addr);
   14852:	4608      	mov	r0, r1
   14854:	f7ff ffb4 	bl	147c0 <ble_ll_is_valid_random_addr>
        break;
   14858:	e7fa      	b.n	14850 <ble_ll_is_valid_own_addr_type+0x14>
        rc = 0;
   1485a:	2000      	movs	r0, #0
    return rc;
   1485c:	e7f8      	b.n	14850 <ble_ll_is_valid_own_addr_type+0x14>
   1485e:	bf00      	nop
   14860:	200036d4 	.word	0x200036d4

00014864 <ble_ll_set_random_addr>:
{
   14864:	b570      	push	{r4, r5, r6, lr}
    if (len < sizeof(*cmd)) {
   14866:	2905      	cmp	r1, #5
   14868:	d91c      	bls.n	148a4 <ble_ll_set_random_addr+0x40>
    if (g_ble_ll_conn_create_sm || ble_ll_scan_enabled() ||
   1486a:	4b11      	ldr	r3, [pc, #68]	; (148b0 <ble_ll_set_random_addr+0x4c>)
   1486c:	681b      	ldr	r3, [r3, #0]
   1486e:	b113      	cbz	r3, 14876 <ble_ll_set_random_addr+0x12>
        return BLE_ERR_CMD_DISALLOWED;
   14870:	240c      	movs	r4, #12
}
   14872:	4620      	mov	r0, r4
   14874:	bd70      	pop	{r4, r5, r6, pc}
   14876:	4616      	mov	r6, r2
   14878:	4605      	mov	r5, r0
    if (g_ble_ll_conn_create_sm || ble_ll_scan_enabled() ||
   1487a:	f007 ff11 	bl	1c6a0 <ble_ll_scan_enabled>
   1487e:	4604      	mov	r4, r0
   14880:	b990      	cbnz	r0, 148a8 <ble_ll_set_random_addr+0x44>
   14882:	b14e      	cbz	r6, 14898 <ble_ll_set_random_addr+0x34>
    if (!ble_ll_is_valid_random_addr(cmd->addr)) {
   14884:	4628      	mov	r0, r5
   14886:	f7ff ff9b 	bl	147c0 <ble_ll_is_valid_random_addr>
   1488a:	b178      	cbz	r0, 148ac <ble_ll_set_random_addr+0x48>
    memcpy(g_random_addr, cmd->addr, BLE_DEV_ADDR_LEN);
   1488c:	4b09      	ldr	r3, [pc, #36]	; (148b4 <ble_ll_set_random_addr+0x50>)
   1488e:	682a      	ldr	r2, [r5, #0]
   14890:	601a      	str	r2, [r3, #0]
   14892:	88aa      	ldrh	r2, [r5, #4]
   14894:	809a      	strh	r2, [r3, #4]
    return BLE_ERR_SUCCESS;
   14896:	e7ec      	b.n	14872 <ble_ll_set_random_addr+0xe>
                                (!hci_adv_ext && ble_ll_adv_enabled())) {
   14898:	f001 fac6 	bl	15e28 <ble_ll_adv_enabled>
   1489c:	2800      	cmp	r0, #0
   1489e:	d0f1      	beq.n	14884 <ble_ll_set_random_addr+0x20>
        return BLE_ERR_CMD_DISALLOWED;
   148a0:	240c      	movs	r4, #12
   148a2:	e7e6      	b.n	14872 <ble_ll_set_random_addr+0xe>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   148a4:	2412      	movs	r4, #18
   148a6:	e7e4      	b.n	14872 <ble_ll_set_random_addr+0xe>
        return BLE_ERR_CMD_DISALLOWED;
   148a8:	240c      	movs	r4, #12
   148aa:	e7e2      	b.n	14872 <ble_ll_set_random_addr+0xe>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   148ac:	2412      	movs	r4, #18
   148ae:	e7e0      	b.n	14872 <ble_ll_set_random_addr+0xe>
   148b0:	20003888 	.word	0x20003888
   148b4:	200036cc 	.word	0x200036cc

000148b8 <ble_ll_is_our_devaddr>:
{
   148b8:	b508      	push	{r3, lr}
    if (addr_type) {
   148ba:	b141      	cbz	r1, 148ce <ble_ll_is_our_devaddr+0x16>
        our_addr = g_random_addr;
   148bc:	4b06      	ldr	r3, [pc, #24]	; (148d8 <ble_ll_is_our_devaddr+0x20>)
    if (!memcmp(our_addr, addr, BLE_DEV_ADDR_LEN)) {
   148be:	2206      	movs	r2, #6
   148c0:	4601      	mov	r1, r0
   148c2:	4618      	mov	r0, r3
   148c4:	f7fa f848 	bl	e958 <memcmp>
   148c8:	b918      	cbnz	r0, 148d2 <ble_ll_is_our_devaddr+0x1a>
        rc = 1;
   148ca:	2001      	movs	r0, #1
}
   148cc:	bd08      	pop	{r3, pc}
        our_addr = g_dev_addr;
   148ce:	4b03      	ldr	r3, [pc, #12]	; (148dc <ble_ll_is_our_devaddr+0x24>)
   148d0:	e7f5      	b.n	148be <ble_ll_is_our_devaddr+0x6>
    rc = 0;
   148d2:	2000      	movs	r0, #0
   148d4:	e7fa      	b.n	148cc <ble_ll_is_our_devaddr+0x14>
   148d6:	bf00      	nop
   148d8:	200036cc 	.word	0x200036cc
   148dc:	200036d4 	.word	0x200036d4

000148e0 <ble_ll_get_our_devaddr>:
    if (addr_type) {
   148e0:	b908      	cbnz	r0, 148e6 <ble_ll_get_our_devaddr+0x6>
    return g_dev_addr;
   148e2:	4802      	ldr	r0, [pc, #8]	; (148ec <ble_ll_get_our_devaddr+0xc>)
}
   148e4:	4770      	bx	lr
        return g_random_addr;
   148e6:	4802      	ldr	r0, [pc, #8]	; (148f0 <ble_ll_get_our_devaddr+0x10>)
   148e8:	4770      	bx	lr
   148ea:	bf00      	nop
   148ec:	200036d4 	.word	0x200036d4
   148f0:	200036cc 	.word	0x200036cc

000148f4 <ble_ll_wfr_timer_exp>:
{
   148f4:	b538      	push	{r3, r4, r5, lr}
    rx_start = ble_phy_rx_started();
   148f6:	f009 fd73 	bl	1e3e0 <ble_phy_rx_started>
   148fa:	4605      	mov	r5, r0
    lls = g_ble_ll_data.ll_state;
   148fc:	4b0b      	ldr	r3, [pc, #44]	; (1492c <ble_ll_wfr_timer_exp+0x38>)
   148fe:	7a1c      	ldrb	r4, [r3, #8]
    ble_ll_trace_u32x3(BLE_LL_TRACE_ID_WFR_EXP, lls, ble_phy_xcvr_state_get(),
   14900:	f009 fd74 	bl	1e3ec <ble_phy_xcvr_state_get>
    if (!rx_start) {
   14904:	b945      	cbnz	r5, 14918 <ble_ll_wfr_timer_exp+0x24>
        switch (lls) {
   14906:	1e63      	subs	r3, r4, #1
   14908:	2b03      	cmp	r3, #3
   1490a:	d805      	bhi.n	14918 <ble_ll_wfr_timer_exp+0x24>
   1490c:	e8df f003 	tbb	[pc, r3]
   14910:	050b0802 	.word	0x050b0802
            ble_ll_adv_wfr_timer_exp();
   14914:	f001 fa66 	bl	15de4 <ble_ll_adv_wfr_timer_exp>
}
   14918:	bd38      	pop	{r3, r4, r5, pc}
            ble_ll_conn_wfr_timer_exp();
   1491a:	f002 fa77 	bl	16e0c <ble_ll_conn_wfr_timer_exp>
            break;
   1491e:	e7fb      	b.n	14918 <ble_ll_wfr_timer_exp+0x24>
            ble_ll_scan_wfr_timer_exp();
   14920:	f007 fdda 	bl	1c4d8 <ble_ll_scan_wfr_timer_exp>
            break;
   14924:	e7f8      	b.n	14918 <ble_ll_wfr_timer_exp+0x24>
            ble_ll_conn_init_wfr_timer_exp();
   14926:	f002 fa80 	bl	16e2a <ble_ll_conn_init_wfr_timer_exp>
}
   1492a:	e7f5      	b.n	14918 <ble_ll_wfr_timer_exp+0x24>
   1492c:	20003730 	.word	0x20003730

00014930 <ble_ll_rx_pdu_in>:
{
   14930:	b508      	push	{r3, lr}
    pkthdr = OS_MBUF_PKTHDR(rxpdu);
   14932:	f100 0110 	add.w	r1, r0, #16
    STAILQ_INSERT_TAIL(&g_ble_ll_data.ll_rx_pkt_q, pkthdr, omp_next);
   14936:	2300      	movs	r3, #0
   14938:	f840 3f14 	str.w	r3, [r0, #20]!
   1493c:	4b05      	ldr	r3, [pc, #20]	; (14954 <ble_ll_rx_pdu_in+0x24>)
   1493e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
   14940:	6011      	str	r1, [r2, #0]
   14942:	64d8      	str	r0, [r3, #76]	; 0x4c
    os_eventq_put(&evq->evq, &ev->ev);
   14944:	f103 0138 	add.w	r1, r3, #56	; 0x38
   14948:	f103 0010 	add.w	r0, r3, #16
   1494c:	f7f8 fc2f 	bl	d1ae <os_eventq_put>
}
   14950:	bd08      	pop	{r3, pc}
   14952:	bf00      	nop
   14954:	20003730 	.word	0x20003730

00014958 <ble_ll_acl_data_in>:
{
   14958:	b538      	push	{r3, r4, r5, lr}
   1495a:	4604      	mov	r4, r0
    pkthdr = OS_MBUF_PKTHDR(txpkt);
   1495c:	f100 0510 	add.w	r5, r0, #16
    OS_ENTER_CRITICAL(sr);
   14960:	f7f9 fde8 	bl	e534 <os_arch_save_sr>
    STAILQ_INSERT_TAIL(&g_ble_ll_data.ll_tx_pkt_q, pkthdr, omp_next);
   14964:	4623      	mov	r3, r4
   14966:	2200      	movs	r2, #0
   14968:	f843 2f14 	str.w	r2, [r3, #20]!
   1496c:	4c06      	ldr	r4, [pc, #24]	; (14988 <ble_ll_acl_data_in+0x30>)
   1496e:	6e62      	ldr	r2, [r4, #100]	; 0x64
   14970:	6015      	str	r5, [r2, #0]
   14972:	6663      	str	r3, [r4, #100]	; 0x64
    OS_EXIT_CRITICAL(sr);
   14974:	f7f9 fde4 	bl	e540 <os_arch_restore_sr>
   14978:	f104 0150 	add.w	r1, r4, #80	; 0x50
   1497c:	f104 0010 	add.w	r0, r4, #16
   14980:	f7f8 fc15 	bl	d1ae <os_eventq_put>
}
   14984:	bd38      	pop	{r3, r4, r5, pc}
   14986:	bf00      	nop
   14988:	20003730 	.word	0x20003730

0001498c <ble_ll_rx_start>:
{
   1498c:	b510      	push	{r4, lr}
   1498e:	4614      	mov	r4, r2
    pdu_type = rxbuf[0] & BLE_ADV_PDU_HDR_TYPE_MASK;
   14990:	7800      	ldrb	r0, [r0, #0]
   14992:	f000 000f 	and.w	r0, r0, #15
    ble_ll_trace_u32x2(BLE_LL_TRACE_ID_RX_START, g_ble_ll_data.ll_state,
   14996:	4b11      	ldr	r3, [pc, #68]	; (149dc <ble_ll_rx_start+0x50>)
   14998:	7a1b      	ldrb	r3, [r3, #8]
    switch (g_ble_ll_data.ll_state) {
   1499a:	3b01      	subs	r3, #1
   1499c:	2b03      	cmp	r3, #3
   1499e:	d815      	bhi.n	149cc <ble_ll_rx_start+0x40>
   149a0:	e8df f003 	tbb	[pc, r3]
   149a4:	020c1009 	.word	0x020c1009
        rc = ble_ll_conn_rx_isr_start(rxhdr, ble_phy_access_addr_get());
   149a8:	f009 fd14 	bl	1e3d4 <ble_phy_access_addr_get>
   149ac:	4601      	mov	r1, r0
   149ae:	4620      	mov	r0, r4
   149b0:	f002 fed8 	bl	17764 <ble_ll_conn_rx_isr_start>
}
   149b4:	bd10      	pop	{r4, pc}
        rc = ble_ll_adv_rx_isr_start(pdu_type);
   149b6:	f001 f9b1 	bl	15d1c <ble_ll_adv_rx_isr_start>
        break;
   149ba:	e7fb      	b.n	149b4 <ble_ll_rx_start+0x28>
        rc = ble_ll_init_rx_isr_start(pdu_type, rxhdr);
   149bc:	4621      	mov	r1, r4
   149be:	f002 fd1b 	bl	173f8 <ble_ll_init_rx_isr_start>
        break;
   149c2:	e7f7      	b.n	149b4 <ble_ll_rx_start+0x28>
        rc = ble_ll_scan_rx_isr_start(pdu_type, &rxhdr->rxinfo.flags);
   149c4:	4621      	mov	r1, r4
   149c6:	f007 fc8d 	bl	1c2e4 <ble_ll_scan_rx_isr_start>
        break;
   149ca:	e7f3      	b.n	149b4 <ble_ll_rx_start+0x28>
        STATS_INC(ble_ll_stats, bad_ll_state);
   149cc:	4a04      	ldr	r2, [pc, #16]	; (149e0 <ble_ll_rx_start+0x54>)
   149ce:	6993      	ldr	r3, [r2, #24]
   149d0:	3301      	adds	r3, #1
   149d2:	6193      	str	r3, [r2, #24]
        rc = -1;
   149d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return rc;
   149d8:	e7ec      	b.n	149b4 <ble_ll_rx_start+0x28>
   149da:	bf00      	nop
   149dc:	20003730 	.word	0x20003730
   149e0:	200035c0 	.word	0x200035c0

000149e4 <ble_ll_rx_end>:
{
   149e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   149e6:	4605      	mov	r5, r0
    crcok = BLE_MBUF_HDR_CRC_OK(rxhdr);
   149e8:	880b      	ldrh	r3, [r1, #0]
   149ea:	f003 0280 	and.w	r2, r3, #128	; 0x80
   149ee:	f3c3 16c0 	ubfx	r6, r3, #7, #1
    pdu_type = rxbuf[0] & BLE_ADV_PDU_HDR_TYPE_MASK;
   149f2:	7804      	ldrb	r4, [r0, #0]
    len = rxbuf[1];
   149f4:	7840      	ldrb	r0, [r0, #1]
    if (BLE_MBUF_HDR_RX_STATE(rxhdr) == BLE_LL_STATE_CONNECTION) {
   149f6:	f003 0307 	and.w	r3, r3, #7
   149fa:	2b04      	cmp	r3, #4
   149fc:	d00b      	beq.n	14a16 <ble_ll_rx_end+0x32>
   149fe:	f004 040f 	and.w	r4, r4, #15
    if (crcok) {
   14a02:	b30a      	cbz	r2, 14a48 <ble_ll_rx_end+0x64>
        switch (pdu_type) {
   14a04:	2c08      	cmp	r4, #8
   14a06:	d80d      	bhi.n	14a24 <ble_ll_rx_end+0x40>
   14a08:	e8df f004 	tbb	[pc, r4]
   14a0c:	0a140a14 	.word	0x0a140a14
   14a10:	2f141a14 	.word	0x2f141a14
   14a14:	2f          	.byte	0x2f
   14a15:	00          	.byte	0x00
        rc = ble_ll_conn_rx_isr_end(rxbuf, rxhdr);
   14a16:	4628      	mov	r0, r5
   14a18:	f002 ff9e 	bl	17958 <ble_ll_conn_rx_isr_end>
   14a1c:	4604      	mov	r4, r0
        return rc;
   14a1e:	e032      	b.n	14a86 <ble_ll_rx_end+0xa2>
            if (len != BLE_SCAN_REQ_LEN) {
   14a20:	280c      	cmp	r0, #12
   14a22:	d005      	beq.n	14a30 <ble_ll_rx_end+0x4c>
            STATS_INC(ble_ll_stats, rx_adv_malformed_pkts);
   14a24:	4a2b      	ldr	r2, [pc, #172]	; (14ad4 <ble_ll_rx_end+0xf0>)
   14a26:	6c53      	ldr	r3, [r2, #68]	; 0x44
   14a28:	3301      	adds	r3, #1
   14a2a:	6453      	str	r3, [r2, #68]	; 0x44
   14a2c:	2201      	movs	r2, #1
   14a2e:	e00c      	b.n	14a4a <ble_ll_rx_end+0x66>
    badpkt = 0;
   14a30:	2200      	movs	r2, #0
   14a32:	e00a      	b.n	14a4a <ble_ll_rx_end+0x66>
            if ((len < BLE_DEV_ADDR_LEN) || (len > BLE_ADV_SCAN_IND_MAX_LEN)) {
   14a34:	1f83      	subs	r3, r0, #6
   14a36:	b2db      	uxtb	r3, r3
   14a38:	2b1f      	cmp	r3, #31
   14a3a:	d8f3      	bhi.n	14a24 <ble_ll_rx_end+0x40>
    badpkt = 0;
   14a3c:	2200      	movs	r2, #0
   14a3e:	e004      	b.n	14a4a <ble_ll_rx_end+0x66>
            if (len != BLE_CONNECT_REQ_LEN) {
   14a40:	2822      	cmp	r0, #34	; 0x22
   14a42:	d1ef      	bne.n	14a24 <ble_ll_rx_end+0x40>
    badpkt = 0;
   14a44:	2200      	movs	r2, #0
   14a46:	e000      	b.n	14a4a <ble_ll_rx_end+0x66>
   14a48:	2200      	movs	r2, #0
    switch (BLE_MBUF_HDR_RX_STATE(rxhdr)) {
   14a4a:	780b      	ldrb	r3, [r1, #0]
   14a4c:	f003 0307 	and.w	r3, r3, #7
   14a50:	2b02      	cmp	r3, #2
   14a52:	d025      	beq.n	14aa0 <ble_ll_rx_end+0xbc>
   14a54:	2b03      	cmp	r3, #3
   14a56:	d036      	beq.n	14ac6 <ble_ll_rx_end+0xe2>
   14a58:	2b01      	cmp	r3, #1
   14a5a:	d008      	beq.n	14a6e <ble_ll_rx_end+0x8a>
        STATS_INC(ble_ll_stats, bad_ll_state);
   14a5c:	4a1d      	ldr	r2, [pc, #116]	; (14ad4 <ble_ll_rx_end+0xf0>)
   14a5e:	6993      	ldr	r3, [r2, #24]
   14a60:	3301      	adds	r3, #1
   14a62:	6193      	str	r3, [r2, #24]
        rc = -1;
   14a64:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   14a68:	e00d      	b.n	14a86 <ble_ll_rx_end+0xa2>
    badpkt = 0;
   14a6a:	2200      	movs	r2, #0
   14a6c:	e7ed      	b.n	14a4a <ble_ll_rx_end+0x66>
        if (!badpkt) {
   14a6e:	b162      	cbz	r2, 14a8a <ble_ll_rx_end+0xa6>
    rxpdu = NULL;
   14a70:	2700      	movs	r7, #0
        rc = ble_ll_adv_rx_isr_end(pdu_type, rxpdu, crcok);
   14a72:	4632      	mov	r2, r6
   14a74:	4639      	mov	r1, r7
   14a76:	4620      	mov	r0, r4
   14a78:	f001 f908 	bl	15c8c <ble_ll_adv_rx_isr_end>
   14a7c:	4604      	mov	r4, r0
    if (rxpdu) {
   14a7e:	b117      	cbz	r7, 14a86 <ble_ll_rx_end+0xa2>
        ble_ll_rx_pdu_in(rxpdu);
   14a80:	4638      	mov	r0, r7
   14a82:	f7ff ff55 	bl	14930 <ble_ll_rx_pdu_in>
}
   14a86:	4620      	mov	r0, r4
   14a88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            rxpdu = ble_ll_rxpdu_alloc(len + BLE_LL_PDU_HDR_LEN);
   14a8a:	3002      	adds	r0, #2
   14a8c:	f7ff fe26 	bl	146dc <ble_ll_rxpdu_alloc>
            if (rxpdu) {
   14a90:	4607      	mov	r7, r0
   14a92:	2800      	cmp	r0, #0
   14a94:	d0ed      	beq.n	14a72 <ble_ll_rx_end+0x8e>
                ble_phy_rxpdu_copy(rxbuf, rxpdu);
   14a96:	4601      	mov	r1, r0
   14a98:	4628      	mov	r0, r5
   14a9a:	f008 ff81 	bl	1d9a0 <ble_phy_rxpdu_copy>
   14a9e:	e7e8      	b.n	14a72 <ble_ll_rx_end+0x8e>
        if (!badpkt) {
   14aa0:	b132      	cbz	r2, 14ab0 <ble_ll_rx_end+0xcc>
    rxpdu = NULL;
   14aa2:	2700      	movs	r7, #0
        rc = ble_ll_scan_rx_isr_end(rxpdu, crcok);
   14aa4:	4631      	mov	r1, r6
   14aa6:	4638      	mov	r0, r7
   14aa8:	f007 fcd2 	bl	1c450 <ble_ll_scan_rx_isr_end>
   14aac:	4604      	mov	r4, r0
        break;
   14aae:	e7e6      	b.n	14a7e <ble_ll_rx_end+0x9a>
            rxpdu = ble_ll_rxpdu_alloc(len + BLE_LL_PDU_HDR_LEN);
   14ab0:	3002      	adds	r0, #2
   14ab2:	f7ff fe13 	bl	146dc <ble_ll_rxpdu_alloc>
            if (rxpdu) {
   14ab6:	4607      	mov	r7, r0
   14ab8:	2800      	cmp	r0, #0
   14aba:	d0f3      	beq.n	14aa4 <ble_ll_rx_end+0xc0>
                ble_phy_rxpdu_copy(rxbuf, rxpdu);
   14abc:	4601      	mov	r1, r0
   14abe:	4628      	mov	r0, r5
   14ac0:	f008 ff6e 	bl	1d9a0 <ble_phy_rxpdu_copy>
   14ac4:	e7ee      	b.n	14aa4 <ble_ll_rx_end+0xc0>
        rc = ble_ll_init_rx_isr_end(rxbuf, crcok, rxhdr);
   14ac6:	460a      	mov	r2, r1
   14ac8:	4631      	mov	r1, r6
   14aca:	4628      	mov	r0, r5
   14acc:	f002 fca8 	bl	17420 <ble_ll_init_rx_isr_end>
   14ad0:	4604      	mov	r4, r0
   14ad2:	e7d8      	b.n	14a86 <ble_ll_rx_end+0xa2>
   14ad4:	200035c0 	.word	0x200035c0

00014ad8 <ble_ll_tx_mbuf_pducb>:
{
   14ad8:	b538      	push	{r3, r4, r5, lr}
    BLE_LL_ASSERT(txpdu);
   14ada:	b159      	cbz	r1, 14af4 <ble_ll_tx_mbuf_pducb+0x1c>
   14adc:	4615      	mov	r5, r2
   14ade:	460c      	mov	r4, r1
    os_mbuf_copydata(txpdu, ble_hdr->txinfo.offset, ble_hdr->txinfo.pyld_len,
   14ae0:	4603      	mov	r3, r0
   14ae2:	7e8a      	ldrb	r2, [r1, #26]
   14ae4:	7e49      	ldrb	r1, [r1, #25]
   14ae6:	4620      	mov	r0, r4
   14ae8:	f7f8 fd45 	bl	d576 <os_mbuf_copydata>
    *hdr_byte = ble_hdr->txinfo.hdr_byte;
   14aec:	7ee3      	ldrb	r3, [r4, #27]
   14aee:	702b      	strb	r3, [r5, #0]
}
   14af0:	7ea0      	ldrb	r0, [r4, #26]
   14af2:	bd38      	pop	{r3, r4, r5, pc}
    BLE_LL_ASSERT(txpdu);
   14af4:	f7f7 fb78 	bl	c1e8 <hal_debugger_connected>
   14af8:	b100      	cbz	r0, 14afc <ble_ll_tx_mbuf_pducb+0x24>
   14afa:	be01      	bkpt	0x0001
   14afc:	2300      	movs	r3, #0
   14afe:	461a      	mov	r2, r3
   14b00:	4619      	mov	r1, r3
   14b02:	4618      	mov	r0, r3
   14b04:	f7f8 f824 	bl	cb50 <__assert_func>

00014b08 <ble_ll_state_set>:
    g_ble_ll_data.ll_state = ll_state;
   14b08:	4b01      	ldr	r3, [pc, #4]	; (14b10 <ble_ll_state_set+0x8>)
   14b0a:	7218      	strb	r0, [r3, #8]
}
   14b0c:	4770      	bx	lr
   14b0e:	bf00      	nop
   14b10:	20003730 	.word	0x20003730

00014b14 <ble_ll_state_get>:
}
   14b14:	4b01      	ldr	r3, [pc, #4]	; (14b1c <ble_ll_state_get+0x8>)
   14b16:	7a18      	ldrb	r0, [r3, #8]
   14b18:	4770      	bx	lr
   14b1a:	bf00      	nop
   14b1c:	20003730 	.word	0x20003730

00014b20 <ble_ll_event_send>:
{
   14b20:	b508      	push	{r3, lr}
   14b22:	4601      	mov	r1, r0
   14b24:	4801      	ldr	r0, [pc, #4]	; (14b2c <ble_ll_event_send+0xc>)
   14b26:	f7f8 fb42 	bl	d1ae <os_eventq_put>
}
   14b2a:	bd08      	pop	{r3, pc}
   14b2c:	20003740 	.word	0x20003740

00014b30 <ble_ll_read_supp_states>:
}
   14b30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14b34:	f240 31ff 	movw	r1, #1023	; 0x3ff
   14b38:	4770      	bx	lr
	...

00014b3c <ble_ll_read_supp_features>:
}
   14b3c:	4b01      	ldr	r3, [pc, #4]	; (14b44 <ble_ll_read_supp_features+0x8>)
   14b3e:	e9d3 0100 	ldrd	r0, r1, [r3]
   14b42:	4770      	bx	lr
   14b44:	20003730 	.word	0x20003730

00014b48 <ble_ll_reset>:
{
   14b48:	b538      	push	{r3, r4, r5, lr}
    OS_ENTER_CRITICAL(sr);
   14b4a:	f7f9 fcf3 	bl	e534 <os_arch_save_sr>
   14b4e:	4604      	mov	r4, r0
    ble_phy_disable();
   14b50:	f009 f982 	bl	1de58 <ble_phy_disable>
    ble_ll_sched_stop();
   14b54:	f008 fa88 	bl	1d068 <ble_ll_sched_stop>
    ble_ll_scan_reset();
   14b58:	f007 fdc6 	bl	1c6e8 <ble_ll_scan_reset>
    ble_ll_rfmgmt_reset();
   14b5c:	f006 fc36 	bl	1b3cc <ble_ll_rfmgmt_reset>
    OS_EXIT_CRITICAL(sr);
   14b60:	4620      	mov	r0, r4
   14b62:	f7f9 fced 	bl	e540 <os_arch_restore_sr>
    ble_ll_adv_reset();
   14b66:	f001 f947 	bl	15df8 <ble_ll_adv_reset>
    ble_ll_flush_pkt_queue(&g_ble_ll_data.ll_tx_pkt_q);
   14b6a:	4c13      	ldr	r4, [pc, #76]	; (14bb8 <ble_ll_reset+0x70>)
   14b6c:	4620      	mov	r0, r4
   14b6e:	f7ff fcb5 	bl	144dc <ble_ll_flush_pkt_queue>
    ble_ll_flush_pkt_queue(&g_ble_ll_data.ll_rx_pkt_q);
   14b72:	f1a4 0018 	sub.w	r0, r4, #24
   14b76:	f7ff fcb1 	bl	144dc <ble_ll_flush_pkt_queue>
    STATS_RESET(ble_ll_stats);
   14b7a:	f44f 7280 	mov.w	r2, #256	; 0x100
   14b7e:	2100      	movs	r1, #0
   14b80:	480e      	ldr	r0, [pc, #56]	; (14bbc <ble_ll_reset+0x74>)
   14b82:	f7f9 ff35 	bl	e9f0 <memset>
    g_ble_ll_data.ll_pref_tx_phys = 0;
   14b86:	2500      	movs	r5, #0
   14b88:	f804 5c54 	strb.w	r5, [r4, #-84]
    g_ble_ll_data.ll_pref_rx_phys = 0;
   14b8c:	f804 5c53 	strb.w	r5, [r4, #-83]
    ble_ll_conn_module_reset();
   14b90:	f003 f996 	bl	17ec0 <ble_ll_conn_module_reset>
    ble_ll_hci_init();
   14b94:	f005 fdea 	bl	1a76c <ble_ll_hci_init>
    ble_ll_sched_init();
   14b98:	f008 fa6e 	bl	1d078 <ble_ll_sched_init>
    ble_ll_state_set(BLE_LL_STATE_STANDBY);
   14b9c:	4628      	mov	r0, r5
   14b9e:	f7ff ffb3 	bl	14b08 <ble_ll_state_set>
    memset(g_random_addr, 0, BLE_DEV_ADDR_LEN);
   14ba2:	4b07      	ldr	r3, [pc, #28]	; (14bc0 <ble_ll_reset+0x78>)
   14ba4:	601d      	str	r5, [r3, #0]
   14ba6:	809d      	strh	r5, [r3, #4]
    ble_ll_whitelist_clear();
   14ba8:	f008 fb64 	bl	1d274 <ble_ll_whitelist_clear>
    ble_ll_resolv_list_reset();
   14bac:	f006 fb3a 	bl	1b224 <ble_ll_resolv_list_reset>
    rc = ble_phy_init();
   14bb0:	f008 ffee 	bl	1db90 <ble_phy_init>
}
   14bb4:	bd38      	pop	{r3, r4, r5, pc}
   14bb6:	bf00      	nop
   14bb8:	20003790 	.word	0x20003790
   14bbc:	200035cc 	.word	0x200035cc
   14bc0:	200036cc 	.word	0x200036cc

00014bc4 <ble_ll_pdu_tx_time_get>:
    }

    usecs += g_ble_ll_pdu_header_tx_time[phy_mode];
#else
    usecs = (((payload_len) + BLE_LL_PDU_HDR_LEN + BLE_LL_ACC_ADDR_LEN
            + BLE_LL_PREAMBLE_LEN + BLE_LL_CRC_LEN) << 3);
   14bc4:	300a      	adds	r0, #10
#endif

    return usecs;
}
   14bc6:	00c0      	lsls	r0, r0, #3
   14bc8:	4770      	bx	lr
	...

00014bcc <ble_ll_pdu_max_tx_octets_get>:

uint16_t
ble_ll_pdu_max_tx_octets_get(uint32_t usecs, int phy_mode)
{
   14bcc:	b508      	push	{r3, lr}
    uint32_t header_tx_time;
    uint16_t octets = 0;

    BLE_LL_ASSERT(phy_mode < BLE_PHY_NUM_MODE);
   14bce:	2903      	cmp	r1, #3
   14bd0:	dc0f      	bgt.n	14bf2 <ble_ll_pdu_max_tx_octets_get+0x26>

    header_tx_time = g_ble_ll_pdu_header_tx_time[phy_mode];
   14bd2:	4b19      	ldr	r3, [pc, #100]	; (14c38 <ble_ll_pdu_max_tx_octets_get+0x6c>)
   14bd4:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
     * Reference:
     * Core v5.0, Vol 6, Part B, section 4.5.10
     * see connEffectiveMaxTxTime and connEffectiveMaxRxTime definitions
     */

    if (usecs < header_tx_time) {
   14bd8:	4283      	cmp	r3, r0
   14bda:	d82a      	bhi.n	14c32 <ble_ll_pdu_max_tx_octets_get+0x66>
        return 27;
    }

    usecs -= header_tx_time;
   14bdc:	1ac0      	subs	r0, r0, r3

    if (phy_mode == BLE_PHY_MODE_1M) {
   14bde:	2901      	cmp	r1, #1
   14be0:	d011      	beq.n	14c06 <ble_ll_pdu_max_tx_octets_get+0x3a>
        /* 8 usecs per byte */
        octets = usecs >> 3;
    } else if (phy_mode == BLE_PHY_MODE_2M) {
   14be2:	2902      	cmp	r1, #2
   14be4:	d015      	beq.n	14c12 <ble_ll_pdu_max_tx_octets_get+0x46>
        /* 4 usecs per byte */
        octets = usecs >> 2;
    } else if (phy_mode == BLE_PHY_MODE_CODED_125KBPS) {
   14be6:	2903      	cmp	r1, #3
   14be8:	d016      	beq.n	14c18 <ble_ll_pdu_max_tx_octets_get+0x4c>
        /* S=8 => 8 * 8 = 64 usecs per byte */
        octets = usecs >> 6;
    } else if (phy_mode == BLE_PHY_MODE_CODED_500KBPS) {
   14bea:	b9c1      	cbnz	r1, 14c1e <ble_ll_pdu_max_tx_octets_get+0x52>
        /* S=2 => 2 * 8 = 16 usecs per byte */
        octets = usecs >> 4;
   14bec:	f3c0 100f 	ubfx	r0, r0, #4, #16
   14bf0:	e00b      	b.n	14c0a <ble_ll_pdu_max_tx_octets_get+0x3e>
    BLE_LL_ASSERT(phy_mode < BLE_PHY_NUM_MODE);
   14bf2:	f7f7 faf9 	bl	c1e8 <hal_debugger_connected>
   14bf6:	b100      	cbz	r0, 14bfa <ble_ll_pdu_max_tx_octets_get+0x2e>
   14bf8:	be01      	bkpt	0x0001
   14bfa:	2300      	movs	r3, #0
   14bfc:	461a      	mov	r2, r3
   14bfe:	4619      	mov	r1, r3
   14c00:	4618      	mov	r0, r3
   14c02:	f7f7 ffa5 	bl	cb50 <__assert_func>
        octets = usecs >> 3;
   14c06:	f3c0 00cf 	ubfx	r0, r0, #3, #16
    } else {
        BLE_LL_ASSERT(0);
    }

    /* see comment at the beginning */
    return max(27, octets);
   14c0a:	281b      	cmp	r0, #27
   14c0c:	bf38      	it	cc
   14c0e:	201b      	movcc	r0, #27
}
   14c10:	bd08      	pop	{r3, pc}
        octets = usecs >> 2;
   14c12:	f3c0 008f 	ubfx	r0, r0, #2, #16
   14c16:	e7f8      	b.n	14c0a <ble_ll_pdu_max_tx_octets_get+0x3e>
        octets = usecs >> 6;
   14c18:	f3c0 108f 	ubfx	r0, r0, #6, #16
   14c1c:	e7f5      	b.n	14c0a <ble_ll_pdu_max_tx_octets_get+0x3e>
        BLE_LL_ASSERT(0);
   14c1e:	f7f7 fae3 	bl	c1e8 <hal_debugger_connected>
   14c22:	b100      	cbz	r0, 14c26 <ble_ll_pdu_max_tx_octets_get+0x5a>
   14c24:	be01      	bkpt	0x0001
   14c26:	2300      	movs	r3, #0
   14c28:	461a      	mov	r2, r3
   14c2a:	4619      	mov	r1, r3
   14c2c:	4618      	mov	r0, r3
   14c2e:	f7f7 ff8f 	bl	cb50 <__assert_func>
        return 27;
   14c32:	201b      	movs	r0, #27
   14c34:	e7ec      	b.n	14c10 <ble_ll_pdu_max_tx_octets_get+0x44>
   14c36:	bf00      	nop
   14c38:	00031d64 	.word	0x00031d64

00014c3c <ble_ll_init>:
 *
 * @return int
 */
void
ble_ll_init(void)
{
   14c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
   14c3e:	b08d      	sub	sp, #52	; 0x34
    uint64_t features;
    ble_addr_t addr;
    struct ble_ll_obj *lldata;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   14c40:	4b51      	ldr	r3, [pc, #324]	; (14d88 <ble_ll_init+0x14c>)
   14c42:	781b      	ldrb	r3, [r3, #0]
   14c44:	2b00      	cmp	r3, #0
   14c46:	d07b      	beq.n	14d40 <ble_ll_init+0x104>
    return memcmp(addr, BLE_ADDR_ANY, BLE_DEV_ADDR_LEN) == 0;
   14c48:	2300      	movs	r3, #0
   14c4a:	9308      	str	r3, [sp, #32]
   14c4c:	f8cd 3023 	str.w	r3, [sp, #35]	; 0x23
   14c50:	2206      	movs	r2, #6
   14c52:	a908      	add	r1, sp, #32
   14c54:	484d      	ldr	r0, [pc, #308]	; (14d8c <ble_ll_init+0x150>)
   14c56:	f7f9 fe7f 	bl	e958 <memcmp>

    ble_ll_trace_init();
    ble_phy_trace_init();

    /* Set public device address if not already set */
    if (ble_ll_is_addr_empty(g_dev_addr)) {
   14c5a:	b988      	cbnz	r0, 14c80 <ble_ll_init+0x44>
        /* Use sycfg address if configured, otherwise try to read from HW */
        if (!ble_ll_is_addr_empty(MYNEWT_VAL(BLE_PUBLIC_DEV_ADDR))) {
   14c5c:	2300      	movs	r3, #0
   14c5e:	9306      	str	r3, [sp, #24]
   14c60:	f8ad 301c 	strh.w	r3, [sp, #28]
    return memcmp(addr, BLE_ADDR_ANY, BLE_DEV_ADDR_LEN) == 0;
   14c64:	930a      	str	r3, [sp, #40]	; 0x28
   14c66:	f8cd 302b 	str.w	r3, [sp, #43]	; 0x2b
   14c6a:	2206      	movs	r2, #6
   14c6c:	a90a      	add	r1, sp, #40	; 0x28
   14c6e:	a806      	add	r0, sp, #24
   14c70:	f7f9 fe72 	bl	e958 <memcmp>
        if (!ble_ll_is_addr_empty(MYNEWT_VAL(BLE_PUBLIC_DEV_ADDR))) {
   14c74:	2800      	cmp	r0, #0
   14c76:	d06d      	beq.n	14d54 <ble_ll_init+0x118>
            memcpy(g_dev_addr, MYNEWT_VAL(BLE_PUBLIC_DEV_ADDR), BLE_DEV_ADDR_LEN);
   14c78:	4b44      	ldr	r3, [pc, #272]	; (14d8c <ble_ll_init+0x150>)
   14c7a:	2200      	movs	r2, #0
   14c7c:	601a      	str	r2, [r3, #0]
   14c7e:	809a      	strh	r2, [r3, #4]
                memcpy(g_dev_addr, &addr.val[0], BLE_DEV_ADDR_LEN);
            }
        }
    }

    ble_ll_rfmgmt_init();
   14c80:	f006 fb88 	bl	1b394 <ble_ll_rfmgmt_init>

    /* Get pointer to global data object */
    lldata = &g_ble_ll_data;

    /* Set acl pkt size and number */
    lldata->ll_num_acl_pkts = MYNEWT_VAL(BLE_ACL_BUF_COUNT);
   14c84:	4c42      	ldr	r4, [pc, #264]	; (14d90 <ble_ll_init+0x154>)
   14c86:	2604      	movs	r6, #4
   14c88:	7266      	strb	r6, [r4, #9]
    lldata->ll_acl_pkt_size = MYNEWT_VAL(BLE_ACL_BUF_SIZE);
   14c8a:	23ff      	movs	r3, #255	; 0xff
   14c8c:	8163      	strh	r3, [r4, #10]
    os_eventq_init(&evq->evq);
   14c8e:	f104 0710 	add.w	r7, r4, #16
   14c92:	4638      	mov	r0, r7
   14c94:	f7f8 fa7e 	bl	d194 <os_eventq_init>

    /* Initialize eventq */
    ble_npl_eventq_init(&lldata->ll_evq);

    /* Initialize the transmit (from host) and receive (from phy) queues */
    STAILQ_INIT(&lldata->ll_tx_pkt_q);
   14c98:	2500      	movs	r5, #0
   14c9a:	4623      	mov	r3, r4
   14c9c:	f843 5f60 	str.w	r5, [r3, #96]!
   14ca0:	6663      	str	r3, [r4, #100]	; 0x64
    STAILQ_INIT(&lldata->ll_rx_pkt_q);
   14ca2:	4623      	mov	r3, r4
   14ca4:	f843 5f48 	str.w	r5, [r3, #72]!
   14ca8:	64e3      	str	r3, [r4, #76]	; 0x4c
    memset(ev, 0, sizeof(*ev));
   14caa:	63a5      	str	r5, [r4, #56]	; 0x38
   14cac:	6425      	str	r5, [r4, #64]	; 0x40
   14cae:	6465      	str	r5, [r4, #68]	; 0x44
    ev->ev.ev_cb = (os_event_fn *)fn;
   14cb0:	4b38      	ldr	r3, [pc, #224]	; (14d94 <ble_ll_init+0x158>)
   14cb2:	63e3      	str	r3, [r4, #60]	; 0x3c
    memset(ev, 0, sizeof(*ev));
   14cb4:	6525      	str	r5, [r4, #80]	; 0x50
   14cb6:	65a5      	str	r5, [r4, #88]	; 0x58
   14cb8:	65e5      	str	r5, [r4, #92]	; 0x5c
    ev->ev.ev_cb = (os_event_fn *)fn;
   14cba:	4b37      	ldr	r3, [pc, #220]	; (14d98 <ble_ll_init+0x15c>)
   14cbc:	6563      	str	r3, [r4, #84]	; 0x54
    memset(ev, 0, sizeof(*ev));
   14cbe:	66a5      	str	r5, [r4, #104]	; 0x68
   14cc0:	6725      	str	r5, [r4, #112]	; 0x70
   14cc2:	6765      	str	r5, [r4, #116]	; 0x74
    ev->ev.ev_cb = (os_event_fn *)fn;
   14cc4:	4b35      	ldr	r3, [pc, #212]	; (14d9c <ble_ll_init+0x160>)
   14cc6:	66e3      	str	r3, [r4, #108]	; 0x6c
    memset(ev, 0, sizeof(*ev));
   14cc8:	67a5      	str	r5, [r4, #120]	; 0x78
   14cca:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
   14cce:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
    ev->ev.ev_cb = (os_event_fn *)fn;
   14cd2:	4b33      	ldr	r3, [pc, #204]	; (14da0 <ble_ll_init+0x164>)
   14cd4:	67e3      	str	r3, [r4, #124]	; 0x7c
    os_callout_init(&co->co, &evq->evq, (os_event_fn *)ev_cb, ev_arg);
   14cd6:	462b      	mov	r3, r5
   14cd8:	4a32      	ldr	r2, [pc, #200]	; (14da4 <ble_ll_init+0x168>)
   14cda:	4639      	mov	r1, r7
   14cdc:	f104 0088 	add.w	r0, r4, #136	; 0x88
   14ce0:	f7f8 f8de 	bl	cea0 <os_callout_init>
                         &g_ble_ll_data.ll_evq,
                         ble_ll_hw_err_timer_cb,
                         NULL);

    /* Initialize LL HCI */
    ble_ll_hci_init();
   14ce4:	f005 fd42 	bl	1a76c <ble_ll_hci_init>

    /* Init the scheduler */
    ble_ll_sched_init();
   14ce8:	f008 f9c6 	bl	1d078 <ble_ll_sched_init>

    /* Initialize advertiser */
    ble_ll_adv_init();
   14cec:	f001 f8ac 	bl	15e48 <ble_ll_adv_init>

    /* Initialize a scanner */
    ble_ll_scan_init();
   14cf0:	f007 fd1e 	bl	1c730 <ble_ll_scan_init>

    /* Initialize the connection module */
    ble_ll_conn_module_init();
   14cf4:	f003 f948 	bl	17f88 <ble_ll_conn_module_init>
    features |= BLE_LL_FEAT_LE_ENCRYPTION;
#endif

#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LL_PRIVACY)
    features |= (BLE_LL_FEAT_LL_PRIVACY | BLE_LL_FEAT_EXT_SCAN_FILT);
    ble_ll_resolv_init();
   14cf8:	f006 fa7a 	bl	1b1f0 <ble_ll_resolv_init>
    features |= BLE_LL_FEAT_SYNC_TRANS_RECV;
    features |= BLE_LL_FEAT_SYNC_TRANS_SEND;
#endif

    /* Initialize random number generation */
    ble_ll_rand_init();
   14cfc:	f005 ff2c 	bl	1ab58 <ble_ll_rand_init>

    /* XXX: This really doesn't belong here, as the address probably has not
     * been set yet.
     */
    ble_ll_seed_prng();
   14d00:	f7ff fcdc 	bl	146bc <ble_ll_seed_prng>

    lldata->ll_supp_features = features;
   14d04:	22ff      	movs	r2, #255	; 0xff
   14d06:	2300      	movs	r3, #0
   14d08:	e9c4 2300 	strd	r2, r3, [r4]

    rc = stats_init_and_reg(STATS_HDR(ble_ll_stats),
   14d0c:	4b26      	ldr	r3, [pc, #152]	; (14da8 <ble_ll_init+0x16c>)
   14d0e:	9301      	str	r3, [sp, #4]
   14d10:	9500      	str	r5, [sp, #0]
   14d12:	462b      	mov	r3, r5
   14d14:	2240      	movs	r2, #64	; 0x40
   14d16:	4631      	mov	r1, r6
   14d18:	4824      	ldr	r0, [pc, #144]	; (14dac <ble_ll_init+0x170>)
   14d1a:	f7fd fa5f 	bl	121dc <stats_init_and_reg>
                            STATS_SIZE_INIT_PARMS(ble_ll_stats, STATS_SIZE_32),
                            STATS_NAME_INIT_PARMS(ble_ll_stats),
                            "ble_ll");
    SYSINIT_PANIC_ASSERT(rc == 0);
   14d1e:	bb30      	cbnz	r0, 14d6e <ble_ll_init+0x132>
    ble_ll_dtm_init();
#endif

#if MYNEWT
    /* Initialize the LL task */
    os_task_init(&g_ble_ll_task, "ble_ll", ble_ll_task, NULL,
   14d20:	2378      	movs	r3, #120	; 0x78
   14d22:	9303      	str	r3, [sp, #12]
   14d24:	4b22      	ldr	r3, [pc, #136]	; (14db0 <ble_ll_init+0x174>)
   14d26:	9302      	str	r3, [sp, #8]
   14d28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14d2c:	9301      	str	r3, [sp, #4]
   14d2e:	2300      	movs	r3, #0
   14d30:	9300      	str	r3, [sp, #0]
   14d32:	4a20      	ldr	r2, [pc, #128]	; (14db4 <ble_ll_init+0x178>)
   14d34:	491c      	ldr	r1, [pc, #112]	; (14da8 <ble_ll_init+0x16c>)
   14d36:	4820      	ldr	r0, [pc, #128]	; (14db8 <ble_ll_init+0x17c>)
   14d38:	f7f9 fa40 	bl	e1bc <os_task_init>
 * For non-Mynewt OS it is required that OS creates task for LL and run LL
 * routine which is wrapped by nimble_port_ll_task_func().
 */

#endif
}
   14d3c:	b00d      	add	sp, #52	; 0x34
   14d3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    SYSINIT_ASSERT_ACTIVE();
   14d40:	f7f7 fa52 	bl	c1e8 <hal_debugger_connected>
   14d44:	b100      	cbz	r0, 14d48 <ble_ll_init+0x10c>
   14d46:	be01      	bkpt	0x0001
   14d48:	2300      	movs	r3, #0
   14d4a:	461a      	mov	r2, r3
   14d4c:	4619      	mov	r1, r3
   14d4e:	4618      	mov	r0, r3
   14d50:	f7f7 fefe 	bl	cb50 <__assert_func>
            rc = ble_hw_get_public_addr(&addr);
   14d54:	a804      	add	r0, sp, #16
   14d56:	f008 fb29 	bl	1d3ac <ble_hw_get_public_addr>
            if (!rc) {
   14d5a:	2800      	cmp	r0, #0
   14d5c:	d190      	bne.n	14c80 <ble_ll_init+0x44>
                memcpy(g_dev_addr, &addr.val[0], BLE_DEV_ADDR_LEN);
   14d5e:	4a0b      	ldr	r2, [pc, #44]	; (14d8c <ble_ll_init+0x150>)
   14d60:	ab0c      	add	r3, sp, #48	; 0x30
   14d62:	f853 1d1f 	ldr.w	r1, [r3, #-31]!
   14d66:	6011      	str	r1, [r2, #0]
   14d68:	889b      	ldrh	r3, [r3, #4]
   14d6a:	8093      	strh	r3, [r2, #4]
   14d6c:	e788      	b.n	14c80 <ble_ll_init+0x44>
    SYSINIT_PANIC_ASSERT(rc == 0);
   14d6e:	f7f7 fa3b 	bl	c1e8 <hal_debugger_connected>
   14d72:	b100      	cbz	r0, 14d76 <ble_ll_init+0x13a>
   14d74:	be01      	bkpt	0x0001
   14d76:	2000      	movs	r0, #0
   14d78:	9000      	str	r0, [sp, #0]
   14d7a:	4b10      	ldr	r3, [pc, #64]	; (14dbc <ble_ll_init+0x180>)
   14d7c:	681c      	ldr	r4, [r3, #0]
   14d7e:	4603      	mov	r3, r0
   14d80:	4602      	mov	r2, r0
   14d82:	4601      	mov	r1, r0
   14d84:	47a0      	blx	r4
   14d86:	e7cb      	b.n	14d20 <ble_ll_init+0xe4>
   14d88:	20003584 	.word	0x20003584
   14d8c:	200036d4 	.word	0x200036d4
   14d90:	20003730 	.word	0x20003730
   14d94:	000146b5 	.word	0x000146b5
   14d98:	000145f5 	.word	0x000145f5
   14d9c:	00014573 	.word	0x00014573
   14da0:	00014569 	.word	0x00014569
   14da4:	0001454d 	.word	0x0001454d
   14da8:	00031d5c 	.word	0x00031d5c
   14dac:	200035c0 	.word	0x200035c0
   14db0:	20001ca0 	.word	0x20001ca0
   14db4:	000144fd 	.word	0x000144fd
   14db8:	200036dc 	.word	0x200036dc
   14dbc:	20000298 	.word	0x20000298

00014dc0 <ble_ll_adv_first_chan>:
ble_ll_adv_first_chan(struct ble_ll_adv_sm *advsm)
{
    uint8_t adv_chan;

    /* Set first advertising channel */
    if (advsm->adv_chanmask & 0x01) {
   14dc0:	7883      	ldrb	r3, [r0, #2]
   14dc2:	f013 0f01 	tst.w	r3, #1
   14dc6:	d106      	bne.n	14dd6 <ble_ll_adv_first_chan+0x16>
        adv_chan = BLE_PHY_ADV_CHAN_START;
    } else if (advsm->adv_chanmask & 0x02) {
   14dc8:	f013 0f02 	tst.w	r3, #2
   14dcc:	d101      	bne.n	14dd2 <ble_ll_adv_first_chan+0x12>
        adv_chan = BLE_PHY_ADV_CHAN_START + 1;
    } else {
        adv_chan = BLE_PHY_ADV_CHAN_START + 2;
   14dce:	2027      	movs	r0, #39	; 0x27
    }

    return adv_chan;
}
   14dd0:	4770      	bx	lr
        adv_chan = BLE_PHY_ADV_CHAN_START + 1;
   14dd2:	2026      	movs	r0, #38	; 0x26
   14dd4:	4770      	bx	lr
        adv_chan = BLE_PHY_ADV_CHAN_START;
   14dd6:	2025      	movs	r0, #37	; 0x25
   14dd8:	4770      	bx	lr

00014dda <ble_ll_adv_final_chan>:
static uint8_t
ble_ll_adv_final_chan(struct ble_ll_adv_sm *advsm)
{
    uint8_t adv_chan;

    if (advsm->adv_chanmask & 0x04) {
   14dda:	7883      	ldrb	r3, [r0, #2]
   14ddc:	f013 0f04 	tst.w	r3, #4
   14de0:	d106      	bne.n	14df0 <ble_ll_adv_final_chan+0x16>
        adv_chan = BLE_PHY_ADV_CHAN_START + 2;
    } else if (advsm->adv_chanmask & 0x02) {
   14de2:	f013 0f02 	tst.w	r3, #2
   14de6:	d101      	bne.n	14dec <ble_ll_adv_final_chan+0x12>
        adv_chan = BLE_PHY_ADV_CHAN_START + 1;
    } else {
        adv_chan = BLE_PHY_ADV_CHAN_START;
   14de8:	2025      	movs	r0, #37	; 0x25
    }

    return adv_chan;
}
   14dea:	4770      	bx	lr
        adv_chan = BLE_PHY_ADV_CHAN_START + 1;
   14dec:	2026      	movs	r0, #38	; 0x26
   14dee:	4770      	bx	lr
        adv_chan = BLE_PHY_ADV_CHAN_START + 2;
   14df0:	2027      	movs	r0, #39	; 0x27
   14df2:	4770      	bx	lr

00014df4 <ble_ll_adv_flags_set>:
{
   14df4:	b538      	push	{r3, r4, r5, lr}
   14df6:	4605      	mov	r5, r0
   14df8:	460c      	mov	r4, r1
    OS_ENTER_CRITICAL(sr);
   14dfa:	f7f9 fb9b 	bl	e534 <os_arch_save_sr>
    advsm->flags |= flags;
   14dfe:	896b      	ldrh	r3, [r5, #10]
   14e00:	431c      	orrs	r4, r3
   14e02:	816c      	strh	r4, [r5, #10]
    OS_EXIT_CRITICAL(sr);
   14e04:	f7f9 fb9c 	bl	e540 <os_arch_restore_sr>
}
   14e08:	bd38      	pop	{r3, r4, r5, pc}

00014e0a <ble_ll_adv_flags_clear>:
{
   14e0a:	b538      	push	{r3, r4, r5, lr}
   14e0c:	4604      	mov	r4, r0
   14e0e:	460d      	mov	r5, r1
    OS_ENTER_CRITICAL(sr);
   14e10:	f7f9 fb90 	bl	e534 <os_arch_save_sr>
    advsm->flags &= ~flags;
   14e14:	8961      	ldrh	r1, [r4, #10]
   14e16:	ea21 0105 	bic.w	r1, r1, r5
   14e1a:	8161      	strh	r1, [r4, #10]
    OS_EXIT_CRITICAL(sr);
   14e1c:	f7f9 fb90 	bl	e540 <os_arch_restore_sr>
}
   14e20:	bd38      	pop	{r3, r4, r5, pc}

00014e22 <ble_ll_adv_rpa_update>:
{
   14e22:	b538      	push	{r3, r4, r5, lr}
   14e24:	4604      	mov	r4, r0
    if (ble_ll_resolv_gen_rpa(advsm->peer_addr, advsm->peer_addr_type,
   14e26:	f100 0534 	add.w	r5, r0, #52	; 0x34
   14e2a:	2301      	movs	r3, #1
   14e2c:	f100 0228 	add.w	r2, r0, #40	; 0x28
   14e30:	7941      	ldrb	r1, [r0, #5]
   14e32:	4628      	mov	r0, r5
   14e34:	f006 f988 	bl	1b148 <ble_ll_resolv_gen_rpa>
   14e38:	b960      	cbnz	r0, 14e54 <ble_ll_adv_rpa_update+0x32>
        if (advsm->own_addr_type & 1) {
   14e3a:	7923      	ldrb	r3, [r4, #4]
   14e3c:	f013 0f01 	tst.w	r3, #1
   14e40:	d00d      	beq.n	14e5e <ble_ll_adv_rpa_update+0x3c>
            ble_ll_adv_flags_set(advsm, BLE_LL_ADV_SM_FLAG_TX_ADD);
   14e42:	2101      	movs	r1, #1
   14e44:	4620      	mov	r0, r4
   14e46:	f7ff ffd5 	bl	14df4 <ble_ll_adv_flags_set>
    if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_DIRECTED) {
   14e4a:	89a3      	ldrh	r3, [r4, #12]
   14e4c:	f013 0f04 	tst.w	r3, #4
   14e50:	d10a      	bne.n	14e68 <ble_ll_adv_rpa_update+0x46>
}
   14e52:	bd38      	pop	{r3, r4, r5, pc}
        ble_ll_adv_flags_set(advsm, BLE_LL_ADV_SM_FLAG_TX_ADD);
   14e54:	2101      	movs	r1, #1
   14e56:	4620      	mov	r0, r4
   14e58:	f7ff ffcc 	bl	14df4 <ble_ll_adv_flags_set>
   14e5c:	e7f5      	b.n	14e4a <ble_ll_adv_rpa_update+0x28>
            ble_ll_adv_flags_clear(advsm, BLE_LL_ADV_SM_FLAG_TX_ADD);
   14e5e:	2101      	movs	r1, #1
   14e60:	4620      	mov	r0, r4
   14e62:	f7ff ffd2 	bl	14e0a <ble_ll_adv_flags_clear>
   14e66:	e7f0      	b.n	14e4a <ble_ll_adv_rpa_update+0x28>
        if (ble_ll_resolv_gen_rpa(advsm->peer_addr, advsm->peer_addr_type,
   14e68:	2300      	movs	r3, #0
   14e6a:	f104 023a 	add.w	r2, r4, #58	; 0x3a
   14e6e:	7961      	ldrb	r1, [r4, #5]
   14e70:	4628      	mov	r0, r5
   14e72:	f006 f969 	bl	1b148 <ble_ll_resolv_gen_rpa>
   14e76:	b940      	cbnz	r0, 14e8a <ble_ll_adv_rpa_update+0x68>
            if (advsm->peer_addr_type & 1) {
   14e78:	7963      	ldrb	r3, [r4, #5]
   14e7a:	f013 0f01 	tst.w	r3, #1
   14e7e:	d109      	bne.n	14e94 <ble_ll_adv_rpa_update+0x72>
                ble_ll_adv_flags_clear(advsm, BLE_LL_ADV_SM_FLAG_RX_ADD);
   14e80:	2102      	movs	r1, #2
   14e82:	4620      	mov	r0, r4
   14e84:	f7ff ffc1 	bl	14e0a <ble_ll_adv_flags_clear>
}
   14e88:	e7e3      	b.n	14e52 <ble_ll_adv_rpa_update+0x30>
            ble_ll_adv_flags_set(advsm, BLE_LL_ADV_SM_FLAG_RX_ADD);
   14e8a:	2102      	movs	r1, #2
   14e8c:	4620      	mov	r0, r4
   14e8e:	f7ff ffb1 	bl	14df4 <ble_ll_adv_flags_set>
   14e92:	e7de      	b.n	14e52 <ble_ll_adv_rpa_update+0x30>
                ble_ll_adv_flags_set(advsm, BLE_LL_ADV_SM_FLAG_RX_ADD);
   14e94:	2102      	movs	r1, #2
   14e96:	4620      	mov	r0, r4
   14e98:	f7ff ffac 	bl	14df4 <ble_ll_adv_flags_set>
   14e9c:	e7d9      	b.n	14e52 <ble_ll_adv_rpa_update+0x30>

00014e9e <ble_ll_adv_active_chanset_clear>:
{
   14e9e:	b510      	push	{r4, lr}
   14ea0:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
   14ea2:	f7f9 fb47 	bl	e534 <os_arch_save_sr>
    advsm->flags &= ~BLE_LL_ADV_SM_FLAG_ACTIVE_CHANSET_MASK;
   14ea6:	8963      	ldrh	r3, [r4, #10]
   14ea8:	f023 0330 	bic.w	r3, r3, #48	; 0x30
   14eac:	8163      	strh	r3, [r4, #10]
    OS_EXIT_CRITICAL(sr);
   14eae:	f7f9 fb47 	bl	e540 <os_arch_restore_sr>
}
   14eb2:	bd10      	pop	{r4, pc}

00014eb4 <ble_ll_adv_tx_done>:
 * @param advsm
 *
 */
static void
ble_ll_adv_tx_done(void *arg)
{
   14eb4:	b510      	push	{r4, lr}
   14eb6:	4604      	mov	r4, r0
    struct ble_ll_adv_sm *advsm;

    /* reset power to max after advertising */
    ble_phy_txpwr_set(MYNEWT_VAL(BLE_LL_TX_PWR_DBM));
   14eb8:	2000      	movs	r0, #0
   14eba:	f008 ff93 	bl	1dde4 <ble_phy_txpwr_set>
    os_eventq_put(&evq->evq, &ev->ev);
   14ebe:	f104 0154 	add.w	r1, r4, #84	; 0x54
   14ec2:	4806      	ldr	r0, [pc, #24]	; (14edc <ble_ll_adv_tx_done+0x28>)
   14ec4:	f7f8 f973 	bl	d1ae <os_eventq_put>
    }
#else
    ble_npl_eventq_put(&g_ble_ll_data.ll_evq, &advsm->adv_txdone_ev);
#endif

    ble_ll_state_set(BLE_LL_STATE_STANDBY);
   14ec8:	2000      	movs	r0, #0
   14eca:	f7ff fe1d 	bl	14b08 <ble_ll_state_set>

    ble_ll_adv_active_chanset_clear(advsm);
   14ece:	4620      	mov	r0, r4
   14ed0:	f7ff ffe5 	bl	14e9e <ble_ll_adv_active_chanset_clear>

    /* We no longer have a current state machine */
    g_ble_ll_cur_adv_sm = NULL;
   14ed4:	4b02      	ldr	r3, [pc, #8]	; (14ee0 <ble_ll_adv_tx_done+0x2c>)
   14ed6:	2200      	movs	r2, #0
   14ed8:	601a      	str	r2, [r3, #0]
}
   14eda:	bd10      	pop	{r4, pc}
   14edc:	20003740 	.word	0x20003740
   14ee0:	200037d8 	.word	0x200037d8

00014ee4 <ble_ll_adv_sm_find_configured>:
{
   14ee4:	b510      	push	{r4, lr}
   14ee6:	4604      	mov	r4, r0
    if (!ble_ll_hci_adv_mode_ext()) {
   14ee8:	f005 faf7 	bl	1a4da <ble_ll_hci_adv_mode_ext>
   14eec:	b9c0      	cbnz	r0, 14f20 <ble_ll_adv_sm_find_configured+0x3c>
        BLE_LL_ASSERT(instance == 0);
   14eee:	b90c      	cbnz	r4, 14ef4 <ble_ll_adv_sm_find_configured+0x10>
        return &g_ble_ll_adv_sm[0];
   14ef0:	480e      	ldr	r0, [pc, #56]	; (14f2c <ble_ll_adv_sm_find_configured+0x48>)
}
   14ef2:	bd10      	pop	{r4, pc}
        BLE_LL_ASSERT(instance == 0);
   14ef4:	f7f7 f978 	bl	c1e8 <hal_debugger_connected>
   14ef8:	b100      	cbz	r0, 14efc <ble_ll_adv_sm_find_configured+0x18>
   14efa:	be01      	bkpt	0x0001
   14efc:	2300      	movs	r3, #0
   14efe:	461a      	mov	r2, r3
   14f00:	4619      	mov	r1, r3
   14f02:	4618      	mov	r0, r3
   14f04:	f7f7 fe24 	bl	cb50 <__assert_func>
        advsm = &g_ble_ll_adv_sm[i];
   14f08:	4808      	ldr	r0, [pc, #32]	; (14f2c <ble_ll_adv_sm_find_configured+0x48>)
   14f0a:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
        if ((advsm->flags & BLE_LL_ADV_SM_FLAG_CONFIGURED) &&
   14f0e:	8942      	ldrh	r2, [r0, #10]
   14f10:	f012 0f80 	tst.w	r2, #128	; 0x80
   14f14:	d002      	beq.n	14f1c <ble_ll_adv_sm_find_configured+0x38>
                (advsm->adv_instance == instance)) {
   14f16:	7842      	ldrb	r2, [r0, #1]
        if ((advsm->flags & BLE_LL_ADV_SM_FLAG_CONFIGURED) &&
   14f18:	42a2      	cmp	r2, r4
   14f1a:	d0ea      	beq.n	14ef2 <ble_ll_adv_sm_find_configured+0xe>
    for (i = 0; i < ARRAY_SIZE(g_ble_ll_adv_sm); i++) {
   14f1c:	3301      	adds	r3, #1
   14f1e:	e000      	b.n	14f22 <ble_ll_adv_sm_find_configured+0x3e>
   14f20:	2300      	movs	r3, #0
   14f22:	2b00      	cmp	r3, #0
   14f24:	d0f0      	beq.n	14f08 <ble_ll_adv_sm_find_configured+0x24>
    return NULL;
   14f26:	2000      	movs	r0, #0
   14f28:	e7e3      	b.n	14ef2 <ble_ll_adv_sm_find_configured+0xe>
   14f2a:	bf00      	nop
   14f2c:	200037dc 	.word	0x200037dc

00014f30 <ble_ll_adv_active_chanset_set_pri>:
{
   14f30:	b510      	push	{r4, lr}
   14f32:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
   14f34:	f7f9 fafe 	bl	e534 <os_arch_save_sr>
    assert((advsm->flags & BLE_LL_ADV_SM_FLAG_ACTIVE_CHANSET_MASK) == 0);
   14f38:	8963      	ldrh	r3, [r4, #10]
   14f3a:	f013 0f30 	tst.w	r3, #48	; 0x30
   14f3e:	d107      	bne.n	14f50 <ble_ll_adv_active_chanset_set_pri+0x20>
    advsm->flags &= ~BLE_LL_ADV_SM_FLAG_ACTIVE_CHANSET_MASK;
   14f40:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    advsm->flags |= 0x10;
   14f44:	f043 0310 	orr.w	r3, r3, #16
   14f48:	8163      	strh	r3, [r4, #10]
    OS_EXIT_CRITICAL(sr);
   14f4a:	f7f9 faf9 	bl	e540 <os_arch_restore_sr>
}
   14f4e:	bd10      	pop	{r4, pc}
    assert((advsm->flags & BLE_LL_ADV_SM_FLAG_ACTIVE_CHANSET_MASK) == 0);
   14f50:	f7f7 f94a 	bl	c1e8 <hal_debugger_connected>
   14f54:	b100      	cbz	r0, 14f58 <ble_ll_adv_active_chanset_set_pri+0x28>
   14f56:	be01      	bkpt	0x0001
   14f58:	2300      	movs	r3, #0
   14f5a:	461a      	mov	r2, r3
   14f5c:	4619      	mov	r1, r3
   14f5e:	4618      	mov	r0, r3
   14f60:	f7f7 fdf6 	bl	cb50 <__assert_func>

00014f64 <ble_ll_adv_scheduled>:
}
#endif

static void
ble_ll_adv_scheduled(struct ble_ll_adv_sm *advsm, uint32_t sch_start, void *arg)
{
   14f64:	b538      	push	{r3, r4, r5, lr}
    /* The event start time is when we start transmission of the adv PDU */
    advsm->adv_event_start_time = sch_start + g_ble_ll_sched_offset_ticks;
   14f66:	4b08      	ldr	r3, [pc, #32]	; (14f88 <ble_ll_adv_scheduled+0x24>)
   14f68:	781c      	ldrb	r4, [r3, #0]
   14f6a:	440c      	add	r4, r1
   14f6c:	6184      	str	r4, [r0, #24]
    advsm->adv_pdu_start_time = advsm->adv_event_start_time;
   14f6e:	61c4      	str	r4, [r0, #28]
                             os_cputime_usecs_to_ticks(advsm->duration * 10000);
    }
#else
    /* Set the time at which we must end directed, high-duty cycle advertising.
     */
    if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_HD_DIRECTED) {
   14f70:	8983      	ldrh	r3, [r0, #12]
   14f72:	f013 0f08 	tst.w	r3, #8
   14f76:	d100      	bne.n	14f7a <ble_ll_adv_scheduled+0x16>
        advsm->adv_end_time = advsm->adv_event_start_time +
                     os_cputime_usecs_to_ticks(BLE_LL_ADV_STATE_HD_MAX * 1000);
    }
#endif
}
   14f78:	bd38      	pop	{r3, r4, r5, pc}
   14f7a:	4605      	mov	r5, r0
                     os_cputime_usecs_to_ticks(BLE_LL_ADV_STATE_HD_MAX * 1000);
   14f7c:	4803      	ldr	r0, [pc, #12]	; (14f8c <ble_ll_adv_scheduled+0x28>)
   14f7e:	f019 ff9b 	bl	2eeb8 <os_cputime_usecs_to_ticks>
        advsm->adv_end_time = advsm->adv_event_start_time +
   14f82:	4404      	add	r4, r0
   14f84:	622c      	str	r4, [r5, #32]
}
   14f86:	e7f7      	b.n	14f78 <ble_ll_adv_scheduled+0x14>
   14f88:	20003c30 	.word	0x20003c30
   14f8c:	00138800 	.word	0x00138800

00014f90 <ble_ll_adv_set_sched>:
{
   14f90:	b538      	push	{r3, r4, r5, lr}
   14f92:	4604      	mov	r4, r0
    sch->cb_arg = advsm;
   14f94:	6700      	str	r0, [r0, #112]	; 0x70
    sch->sched_cb = ble_ll_adv_tx_start_cb;
   14f96:	4b11      	ldr	r3, [pc, #68]	; (14fdc <ble_ll_adv_set_sched+0x4c>)
   14f98:	6743      	str	r3, [r0, #116]	; 0x74
    sch->sched_type = BLE_LL_SCHED_TYPE_ADV;
   14f9a:	2101      	movs	r1, #1
   14f9c:	f880 1064 	strb.w	r1, [r0, #100]	; 0x64
    max_usecs = ble_ll_pdu_tx_time_get(advsm->adv_pdu_len, BLE_PHY_MODE_1M);
   14fa0:	79c0      	ldrb	r0, [r0, #7]
   14fa2:	f7ff fe0f 	bl	14bc4 <ble_ll_pdu_tx_time_get>
    if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_DIRECTED) {
   14fa6:	89a3      	ldrh	r3, [r4, #12]
   14fa8:	f013 0f04 	tst.w	r3, #4
   14fac:	d105      	bne.n	14fba <ble_ll_adv_set_sched+0x2a>
    } else if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_CONNECTABLE) {
   14fae:	f013 0f01 	tst.w	r3, #1
   14fb2:	d004      	beq.n	14fbe <ble_ll_adv_set_sched+0x2e>
        max_usecs += BLE_LL_SCHED_ADV_MAX_USECS;
   14fb4:	f500 7055 	add.w	r0, r0, #852	; 0x354
   14fb8:	e001      	b.n	14fbe <ble_ll_adv_set_sched+0x2e>
        max_usecs += BLE_LL_SCHED_DIRECT_ADV_MAX_USECS;
   14fba:	f500 70fb 	add.w	r0, r0, #502	; 0x1f6
    sch->start_time = advsm->adv_pdu_start_time - g_ble_ll_sched_offset_ticks;
   14fbe:	69e5      	ldr	r5, [r4, #28]
   14fc0:	4b07      	ldr	r3, [pc, #28]	; (14fe0 <ble_ll_adv_set_sched+0x50>)
   14fc2:	781b      	ldrb	r3, [r3, #0]
   14fc4:	1aeb      	subs	r3, r5, r3
   14fc6:	66a3      	str	r3, [r4, #104]	; 0x68
    sch->remainder = 0;
   14fc8:	2300      	movs	r3, #0
   14fca:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66

/* Convert usecs to ticks and round up to nearest tick */
static inline uint32_t
ble_ll_usecs_to_ticks_round_up(uint32_t usecs)
{
    return os_cputime_usecs_to_ticks(usecs + 30);
   14fce:	301e      	adds	r0, #30
   14fd0:	f019 ff72 	bl	2eeb8 <os_cputime_usecs_to_ticks>
    sch->end_time = advsm->adv_pdu_start_time +
   14fd4:	4428      	add	r0, r5
   14fd6:	66e0      	str	r0, [r4, #108]	; 0x6c
}
   14fd8:	bd38      	pop	{r3, r4, r5, pc}
   14fda:	bf00      	nop
   14fdc:	000150fd 	.word	0x000150fd
   14fe0:	20003c30 	.word	0x20003c30

00014fe4 <ble_ll_adv_sm_start>:
 *
 * @return int
 */
static int
ble_ll_adv_sm_start(struct ble_ll_adv_sm *advsm)
{
   14fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14fe6:	4604      	mov	r4, r0
    const uint8_t *random_addr;
    uint32_t earliest_start_time;
    int32_t delta;

    /* only clear flags that are not set from HCI */
    ble_ll_adv_flags_clear(advsm, BLE_LL_ADV_SM_FLAG_TX_ADD |
   14fe8:	210b      	movs	r1, #11
   14fea:	f7ff ff0e 	bl	14e0a <ble_ll_adv_flags_clear>
    random_addr = advsm->adv_random_addr;
#else
    random_addr = g_random_addr;
#endif

    if (!ble_ll_is_valid_own_addr_type(advsm->own_addr_type, random_addr)) {
   14fee:	493f      	ldr	r1, [pc, #252]	; (150ec <ble_ll_adv_sm_start+0x108>)
   14ff0:	7920      	ldrb	r0, [r4, #4]
   14ff2:	f7ff fc23 	bl	1483c <ble_ll_is_valid_own_addr_type>
   14ff6:	2800      	cmp	r0, #0
   14ff8:	d073      	beq.n	150e2 <ble_ll_adv_sm_start+0xfe>

    /*
     * Get an event with which to send the connection complete event if
     * this is connectable
     */
    if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_CONNECTABLE) {
   14ffa:	89a3      	ldrh	r3, [r4, #12]
   14ffc:	f013 0f01 	tst.w	r3, #1
   15000:	d001      	beq.n	15006 <ble_ll_adv_sm_start+0x22>
        /* We expect this to be NULL but if not we wont allocate one... */
        if (advsm->conn_comp_ev == NULL) {
   15002:	6d23      	ldr	r3, [r4, #80]	; 0x50
   15004:	b14b      	cbz	r3, 1501a <ble_ll_adv_sm_start+0x36>
            advsm->conn_comp_ev = evbuf;
        }
    }

    /* Set advertising address */
    if ((advsm->own_addr_type & 1) == 0) {
   15006:	7923      	ldrb	r3, [r4, #4]
   15008:	f013 0f01 	tst.w	r3, #1
   1500c:	d00c      	beq.n	15028 <ble_ll_adv_sm_start+0x44>
#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LL_EXT_ADV)
        addr = advsm->adv_random_addr;
#else
        addr = g_random_addr;
#endif
        advsm->flags |= BLE_LL_ADV_SM_FLAG_TX_ADD;
   1500e:	8962      	ldrh	r2, [r4, #10]
   15010:	f042 0201 	orr.w	r2, r2, #1
   15014:	8162      	strh	r2, [r4, #10]
        addr = g_random_addr;
   15016:	4a35      	ldr	r2, [pc, #212]	; (150ec <ble_ll_adv_sm_start+0x108>)
   15018:	e007      	b.n	1502a <ble_ll_adv_sm_start+0x46>
            evbuf = ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   1501a:	2002      	movs	r0, #2
   1501c:	f015 f910 	bl	2a240 <ble_hci_trans_buf_alloc>
            if (!evbuf) {
   15020:	2800      	cmp	r0, #0
   15022:	d060      	beq.n	150e6 <ble_ll_adv_sm_start+0x102>
            advsm->conn_comp_ev = evbuf;
   15024:	6520      	str	r0, [r4, #80]	; 0x50
   15026:	e7ee      	b.n	15006 <ble_ll_adv_sm_start+0x22>
        addr = g_dev_addr;
   15028:	4a31      	ldr	r2, [pc, #196]	; (150f0 <ble_ll_adv_sm_start+0x10c>)
    }
    memcpy(advsm->adva, addr, BLE_DEV_ADDR_LEN);
   1502a:	6811      	ldr	r1, [r2, #0]
   1502c:	62a1      	str	r1, [r4, #40]	; 0x28
   1502e:	8892      	ldrh	r2, [r2, #4]
   15030:	85a2      	strh	r2, [r4, #44]	; 0x2c

    if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_DIRECTED) {
   15032:	89a2      	ldrh	r2, [r4, #12]
   15034:	f012 0f04 	tst.w	r2, #4
   15038:	d133      	bne.n	150a2 <ble_ll_adv_sm_start+0xbe>
        }
    }

#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LL_PRIVACY)
    /* This will generate an RPA for both initiator addr and adva */
    if (advsm->own_addr_type > BLE_HCI_ADV_OWN_ADDR_RANDOM) {
   1503a:	2b01      	cmp	r3, #1
   1503c:	d841      	bhi.n	150c2 <ble_ll_adv_sm_start+0xde>
        ble_ll_adv_rpa_update(advsm);
    }
#endif

    /* Set flag telling us that advertising is enabled */
    advsm->adv_enabled = 1;
   1503e:	2301      	movs	r3, #1
   15040:	7023      	strb	r3, [r4, #0]
    advsm->channel_id = ((access_addr & 0xffff0000) >> 16) ^
                         (access_addr & 0x0000ffff);
#endif

    /* Determine the advertising interval we will use */
    if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_HD_DIRECTED) {
   15042:	89a3      	ldrh	r3, [r4, #12]
   15044:	f013 0f08 	tst.w	r3, #8
   15048:	d03f      	beq.n	150ca <ble_ll_adv_sm_start+0xe6>
        /* Set it to max. allowed for high duty cycle advertising */
        advsm->adv_itvl_usecs = BLE_LL_ADV_PDU_ITVL_HD_MS_MAX;
   1504a:	f640 63a6 	movw	r3, #3750	; 0xea6
   1504e:	6163      	str	r3, [r4, #20]
        advsm->adv_itvl_usecs = (uint32_t)advsm->adv_itvl_max;
        advsm->adv_itvl_usecs *= BLE_LL_ADV_ITVL;
    }

    /* Set first advertising channel */
    adv_chan = ble_ll_adv_first_chan(advsm);
   15050:	4620      	mov	r0, r4
   15052:	f7ff feb5 	bl	14dc0 <ble_ll_adv_first_chan>
    advsm->adv_chan = adv_chan;
   15056:	71a0      	strb	r0, [r4, #6]
     * used to setup start time for scheduler item.
     * Then we check if start time for scheduler item (which includes scheduler
     * overhead) is no earlier than calculated earliest possible start time and
     * adjust scheduler item if necessary.
     */
    earliest_start_time = ble_ll_rfmgmt_enable_now();
   15058:	f006 fa1c 	bl	1b494 <ble_ll_rfmgmt_enable_now>
   1505c:	4607      	mov	r7, r0
	return (int)lrand48();
   1505e:	f7f9 fc73 	bl	e948 <lrand48>

    start_delay_us = rand() % (BLE_LL_ADV_DELAY_MS_MAX * 1000);
   15062:	4b24      	ldr	r3, [pc, #144]	; (150f4 <ble_ll_adv_sm_start+0x110>)
   15064:	fb83 2300 	smull	r2, r3, r3, r0
   15068:	17c5      	asrs	r5, r0, #31
   1506a:	ebc5 3523 	rsb	r5, r5, r3, asr #12
   1506e:	f242 7310 	movw	r3, #10000	; 0x2710
   15072:	fb03 0515 	mls	r5, r3, r5, r0
    advsm->adv_pdu_start_time = os_cputime_get32() +
   15076:	f019 ff1a 	bl	2eeae <os_cputime_get32>
   1507a:	4606      	mov	r6, r0
                                os_cputime_usecs_to_ticks(start_delay_us);
   1507c:	4628      	mov	r0, r5
   1507e:	f019 ff1b 	bl	2eeb8 <os_cputime_usecs_to_ticks>
    advsm->adv_pdu_start_time = os_cputime_get32() +
   15082:	4430      	add	r0, r6
   15084:	61e0      	str	r0, [r4, #28]

    ble_ll_adv_set_sched(advsm);
   15086:	4620      	mov	r0, r4
   15088:	f7ff ff82 	bl	14f90 <ble_ll_adv_set_sched>

    delta = (int32_t)(advsm->adv_sch.start_time - earliest_start_time);
   1508c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    if (delta < 0) {
   1508e:	1bdb      	subs	r3, r3, r7
   15090:	d422      	bmi.n	150d8 <ble_ll_adv_sm_start+0xf4>
        advsm->adv_sch.start_time -= delta;
        advsm->adv_sch.end_time -= delta;
    }

    /* This does actual scheduling */
    ble_ll_sched_adv_new(&advsm->adv_sch, ble_ll_adv_scheduled, NULL);
   15092:	2200      	movs	r2, #0
   15094:	4918      	ldr	r1, [pc, #96]	; (150f8 <ble_ll_adv_sm_start+0x114>)
   15096:	f104 0064 	add.w	r0, r4, #100	; 0x64
   1509a:	f007 fe3d 	bl	1cd18 <ble_ll_sched_adv_new>
    if (!(advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY)) {
        ble_ll_adv_aux_schedule(advsm);
    }
#endif

    return BLE_ERR_SUCCESS;
   1509e:	2000      	movs	r0, #0
}
   150a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        memcpy(advsm->initiator_addr, advsm->peer_addr, BLE_DEV_ADDR_LEN);
   150a2:	4622      	mov	r2, r4
   150a4:	f852 1f34 	ldr.w	r1, [r2, #52]!
   150a8:	f8c4 103a 	str.w	r1, [r4, #58]	; 0x3a
   150ac:	8892      	ldrh	r2, [r2, #4]
   150ae:	87e2      	strh	r2, [r4, #62]	; 0x3e
        if (advsm->peer_addr_type & 1) {
   150b0:	7962      	ldrb	r2, [r4, #5]
   150b2:	f012 0f01 	tst.w	r2, #1
   150b6:	d0c0      	beq.n	1503a <ble_ll_adv_sm_start+0x56>
            advsm->flags |= BLE_LL_ADV_SM_FLAG_RX_ADD;
   150b8:	8962      	ldrh	r2, [r4, #10]
   150ba:	f042 0202 	orr.w	r2, r2, #2
   150be:	8162      	strh	r2, [r4, #10]
   150c0:	e7bb      	b.n	1503a <ble_ll_adv_sm_start+0x56>
        ble_ll_adv_rpa_update(advsm);
   150c2:	4620      	mov	r0, r4
   150c4:	f7ff fead 	bl	14e22 <ble_ll_adv_rpa_update>
   150c8:	e7b9      	b.n	1503e <ble_ll_adv_sm_start+0x5a>
        advsm->adv_itvl_usecs = (uint32_t)advsm->adv_itvl_max;
   150ca:	8a22      	ldrh	r2, [r4, #16]
        advsm->adv_itvl_usecs *= BLE_LL_ADV_ITVL;
   150cc:	f240 2371 	movw	r3, #625	; 0x271
   150d0:	fb03 f302 	mul.w	r3, r3, r2
   150d4:	6163      	str	r3, [r4, #20]
   150d6:	e7bb      	b.n	15050 <ble_ll_adv_sm_start+0x6c>
        advsm->adv_sch.start_time -= delta;
   150d8:	66a7      	str	r7, [r4, #104]	; 0x68
        advsm->adv_sch.end_time -= delta;
   150da:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
   150dc:	1ad3      	subs	r3, r2, r3
   150de:	66e3      	str	r3, [r4, #108]	; 0x6c
   150e0:	e7d7      	b.n	15092 <ble_ll_adv_sm_start+0xae>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   150e2:	2012      	movs	r0, #18
   150e4:	e7dc      	b.n	150a0 <ble_ll_adv_sm_start+0xbc>
                return BLE_ERR_MEM_CAPACITY;
   150e6:	2007      	movs	r0, #7
   150e8:	e7da      	b.n	150a0 <ble_ll_adv_sm_start+0xbc>
   150ea:	bf00      	nop
   150ec:	200036cc 	.word	0x200036cc
   150f0:	200036d4 	.word	0x200036d4
   150f4:	68db8bad 	.word	0x68db8bad
   150f8:	00014f65 	.word	0x00014f65

000150fc <ble_ll_adv_tx_start_cb>:
{
   150fc:	b538      	push	{r3, r4, r5, lr}
   150fe:	4605      	mov	r5, r0
    advsm = (struct ble_ll_adv_sm *)sch->cb_arg;
   15100:	68c4      	ldr	r4, [r0, #12]
    g_ble_ll_cur_adv_sm = advsm;
   15102:	4b31      	ldr	r3, [pc, #196]	; (151c8 <ble_ll_adv_tx_start_cb+0xcc>)
   15104:	601c      	str	r4, [r3, #0]
    ble_ll_adv_active_chanset_set_pri(advsm);
   15106:	4620      	mov	r0, r4
   15108:	f7ff ff12 	bl	14f30 <ble_ll_adv_active_chanset_set_pri>
    if ((advsm->flags & BLE_LL_ADV_SM_FLAG_NEW_ADV_DATA) ||
   1510c:	8963      	ldrh	r3, [r4, #10]
   1510e:	f413 6fc0 	tst.w	r3, #1536	; 0x600
   15112:	d115      	bne.n	15140 <ble_ll_adv_tx_start_cb+0x44>
    ble_phy_txpwr_set(advsm->adv_txpwr);
   15114:	f994 0009 	ldrsb.w	r0, [r4, #9]
   15118:	f008 fe64 	bl	1dde4 <ble_phy_txpwr_set>
    rc = ble_phy_setchan(advsm->adv_chan, BLE_ACCESS_ADDR_ADV, BLE_LL_CRCINIT_ADV);
   1511c:	4a2b      	ldr	r2, [pc, #172]	; (151cc <ble_ll_adv_tx_start_cb+0xd0>)
   1511e:	492c      	ldr	r1, [pc, #176]	; (151d0 <ble_ll_adv_tx_start_cb+0xd4>)
   15120:	79a0      	ldrb	r0, [r4, #6]
   15122:	f008 fe73 	bl	1de0c <ble_phy_setchan>
    assert(rc == 0);
   15126:	b988      	cbnz	r0, 1514c <ble_ll_adv_tx_start_cb+0x50>
    txstart = sch->start_time + g_ble_ll_sched_offset_ticks;
   15128:	6868      	ldr	r0, [r5, #4]
   1512a:	4b2a      	ldr	r3, [pc, #168]	; (151d4 <ble_ll_adv_tx_start_cb+0xd8>)
   1512c:	781b      	ldrb	r3, [r3, #0]
    rc = ble_phy_tx_set_start_time(txstart, sch->remainder);
   1512e:	78a9      	ldrb	r1, [r5, #2]
   15130:	4418      	add	r0, r3
   15132:	f009 f89f 	bl	1e274 <ble_phy_tx_set_start_time>
    if (rc) {
   15136:	b198      	cbz	r0, 15160 <ble_ll_adv_tx_start_cb+0x64>
        STATS_INC(ble_ll_stats, adv_late_starts);
   15138:	4a27      	ldr	r2, [pc, #156]	; (151d8 <ble_ll_adv_tx_start_cb+0xdc>)
   1513a:	6f13      	ldr	r3, [r2, #112]	; 0x70
   1513c:	3301      	adds	r3, #1
   1513e:	6713      	str	r3, [r2, #112]	; 0x70
    ble_ll_adv_tx_done(advsm);
   15140:	4620      	mov	r0, r4
   15142:	f7ff feb7 	bl	14eb4 <ble_ll_adv_tx_done>
    return BLE_LL_SCHED_STATE_DONE;
   15146:	2501      	movs	r5, #1
}
   15148:	4628      	mov	r0, r5
   1514a:	bd38      	pop	{r3, r4, r5, pc}
    assert(rc == 0);
   1514c:	f7f7 f84c 	bl	c1e8 <hal_debugger_connected>
   15150:	b100      	cbz	r0, 15154 <ble_ll_adv_tx_start_cb+0x58>
   15152:	be01      	bkpt	0x0001
   15154:	2300      	movs	r3, #0
   15156:	461a      	mov	r2, r3
   15158:	4619      	mov	r1, r3
   1515a:	4618      	mov	r0, r3
   1515c:	f7f7 fcf8 	bl	cb50 <__assert_func>
    ble_phy_encrypt_disable();
   15160:	f008 fdfc 	bl	1dd5c <ble_phy_encrypt_disable>
    advsm->adv_rpa_index = -1;
   15164:	23ff      	movs	r3, #255	; 0xff
   15166:	7223      	strb	r3, [r4, #8]
    if (ble_ll_resolv_enabled()) {
   15168:	f006 f83c 	bl	1b1e4 <ble_ll_resolv_enabled>
   1516c:	b300      	cbz	r0, 151b0 <ble_ll_adv_tx_start_cb+0xb4>
        ble_phy_resolv_list_enable();
   1516e:	f009 f947 	bl	1e400 <ble_phy_resolv_list_enable>
    if ((advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY) &&
   15172:	89a3      	ldrh	r3, [r4, #12]
   15174:	f013 0f10 	tst.w	r3, #16
   15178:	d002      	beq.n	15180 <ble_ll_adv_tx_start_cb+0x84>
   1517a:	f013 0f03 	tst.w	r3, #3
   1517e:	d11a      	bne.n	151b6 <ble_ll_adv_tx_start_cb+0xba>
        ble_phy_set_txend_cb(ble_ll_adv_tx_done, advsm);
   15180:	4621      	mov	r1, r4
   15182:	4816      	ldr	r0, [pc, #88]	; (151dc <ble_ll_adv_tx_start_cb+0xe0>)
   15184:	f008 fe00 	bl	1dd88 <ble_phy_set_txend_cb>
        end_trans = BLE_PHY_TRANSITION_NONE;
   15188:	2200      	movs	r2, #0
    rc = ble_phy_tx(ble_ll_adv_legacy_pdu_make, advsm, end_trans);
   1518a:	4621      	mov	r1, r4
   1518c:	4814      	ldr	r0, [pc, #80]	; (151e0 <ble_ll_adv_tx_start_cb+0xe4>)
   1518e:	f009 f88f 	bl	1e2b0 <ble_phy_tx>
    if (rc) {
   15192:	4605      	mov	r5, r0
   15194:	2800      	cmp	r0, #0
   15196:	d1d3      	bne.n	15140 <ble_ll_adv_tx_start_cb+0x44>
    if (advsm->adv_filter_policy != BLE_HCI_ADV_FILT_NONE) {
   15198:	78e3      	ldrb	r3, [r4, #3]
   1519a:	b193      	cbz	r3, 151c2 <ble_ll_adv_tx_start_cb+0xc6>
        ble_ll_whitelist_enable();
   1519c:	f008 f8dc 	bl	1d358 <ble_ll_whitelist_enable>
    ble_ll_state_set(BLE_LL_STATE_ADV);
   151a0:	2001      	movs	r0, #1
   151a2:	f7ff fcb1 	bl	14b08 <ble_ll_state_set>
    STATS_INC(ble_ll_stats, adv_txg);
   151a6:	4a0c      	ldr	r2, [pc, #48]	; (151d8 <ble_ll_adv_tx_start_cb+0xdc>)
   151a8:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
   151aa:	3301      	adds	r3, #1
   151ac:	66d3      	str	r3, [r2, #108]	; 0x6c
    return BLE_LL_SCHED_STATE_RUNNING;
   151ae:	e7cb      	b.n	15148 <ble_ll_adv_tx_start_cb+0x4c>
        ble_phy_resolv_list_disable();
   151b0:	f009 f936 	bl	1e420 <ble_phy_resolv_list_disable>
   151b4:	e7dd      	b.n	15172 <ble_ll_adv_tx_start_cb+0x76>
        ble_phy_set_txend_cb(NULL, NULL);
   151b6:	2100      	movs	r1, #0
   151b8:	4608      	mov	r0, r1
   151ba:	f008 fde5 	bl	1dd88 <ble_phy_set_txend_cb>
        end_trans = BLE_PHY_TRANSITION_TX_RX;
   151be:	2202      	movs	r2, #2
        ble_phy_set_txend_cb(NULL, NULL);
   151c0:	e7e3      	b.n	1518a <ble_ll_adv_tx_start_cb+0x8e>
        ble_ll_whitelist_disable();
   151c2:	f008 f8cd 	bl	1d360 <ble_ll_whitelist_disable>
   151c6:	e7eb      	b.n	151a0 <ble_ll_adv_tx_start_cb+0xa4>
   151c8:	200037d8 	.word	0x200037d8
   151cc:	00555555 	.word	0x00555555
   151d0:	8e89bed6 	.word	0x8e89bed6
   151d4:	20003c30 	.word	0x20003c30
   151d8:	200035c0 	.word	0x200035c0
   151dc:	00014eb5 	.word	0x00014eb5
   151e0:	000151e5 	.word	0x000151e5

000151e4 <ble_ll_adv_legacy_pdu_make>:
{
   151e4:	b570      	push	{r4, r5, r6, lr}
   151e6:	460c      	mov	r4, r1
    adv_data_len = ADV_DATA_LEN(advsm);
   151e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   151ea:	b333      	cbz	r3, 1523a <ble_ll_adv_legacy_pdu_make+0x56>
   151ec:	7c19      	ldrb	r1, [r3, #16]
    pdulen = BLE_DEV_ADDR_LEN + adv_data_len;
   151ee:	1d8d      	adds	r5, r1, #6
   151f0:	b2ed      	uxtb	r5, r5
    if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_DIRECTED) {
   151f2:	89a3      	ldrh	r3, [r4, #12]
   151f4:	f013 0f04 	tst.w	r3, #4
   151f8:	d021      	beq.n	1523e <ble_ll_adv_legacy_pdu_make+0x5a>
        if (advsm->flags & BLE_LL_ADV_SM_FLAG_RX_ADD) {
   151fa:	8963      	ldrh	r3, [r4, #10]
   151fc:	f013 0f02 	tst.w	r3, #2
   15200:	d125      	bne.n	1524e <ble_ll_adv_legacy_pdu_make+0x6a>
        pdu_type = BLE_ADV_PDU_TYPE_ADV_DIRECT_IND;
   15202:	2301      	movs	r3, #1
        pdulen = BLE_ADV_DIRECT_IND_LEN;
   15204:	250c      	movs	r5, #12
        adv_data_len = 0;
   15206:	2100      	movs	r1, #0
    assert(adv_data_len <= BLE_ADV_LEGACY_DATA_MAX_LEN);
   15208:	291f      	cmp	r1, #31
   1520a:	d828      	bhi.n	1525e <ble_ll_adv_legacy_pdu_make+0x7a>
    advsm->adv_pdu_len = pdulen + BLE_LL_PDU_HDR_LEN;
   1520c:	1cae      	adds	r6, r5, #2
   1520e:	71e6      	strb	r6, [r4, #7]
    if (advsm->flags & BLE_LL_ADV_SM_FLAG_TX_ADD) {
   15210:	8966      	ldrh	r6, [r4, #10]
   15212:	f016 0f01 	tst.w	r6, #1
   15216:	d001      	beq.n	1521c <ble_ll_adv_legacy_pdu_make+0x38>
        pdu_type |= BLE_ADV_PDU_HDR_TXADD_RAND;
   15218:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    *hdr_byte = pdu_type;
   1521c:	7013      	strb	r3, [r2, #0]
    memcpy(dptr, advsm->adva, BLE_DEV_ADDR_LEN);
   1521e:	4623      	mov	r3, r4
   15220:	f853 2f28 	ldr.w	r2, [r3, #40]!
   15224:	6002      	str	r2, [r0, #0]
   15226:	889b      	ldrh	r3, [r3, #4]
   15228:	8083      	strh	r3, [r0, #4]
    dptr += BLE_DEV_ADDR_LEN;
   1522a:	1d83      	adds	r3, r0, #6
    if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_DIRECTED) {
   1522c:	89a2      	ldrh	r2, [r4, #12]
   1522e:	f012 0f04 	tst.w	r2, #4
   15232:	d11e      	bne.n	15272 <ble_ll_adv_legacy_pdu_make+0x8e>
    if (adv_data_len != 0) {
   15234:	bb29      	cbnz	r1, 15282 <ble_ll_adv_legacy_pdu_make+0x9e>
}
   15236:	4628      	mov	r0, r5
   15238:	bd70      	pop	{r4, r5, r6, pc}
    adv_data_len = ADV_DATA_LEN(advsm);
   1523a:	2100      	movs	r1, #0
   1523c:	e7d7      	b.n	151ee <ble_ll_adv_legacy_pdu_make+0xa>
    } else if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_CONNECTABLE) {
   1523e:	f013 0f01 	tst.w	r3, #1
   15242:	d108      	bne.n	15256 <ble_ll_adv_legacy_pdu_make+0x72>
    } else if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_SCANNABLE) {
   15244:	f013 0f02 	tst.w	r3, #2
   15248:	d007      	beq.n	1525a <ble_ll_adv_legacy_pdu_make+0x76>
        pdu_type = BLE_ADV_PDU_TYPE_ADV_SCAN_IND;
   1524a:	2306      	movs	r3, #6
   1524c:	e7dc      	b.n	15208 <ble_ll_adv_legacy_pdu_make+0x24>
            pdu_type |= BLE_ADV_PDU_HDR_RXADD_RAND;
   1524e:	2381      	movs	r3, #129	; 0x81
        pdulen = BLE_ADV_DIRECT_IND_LEN;
   15250:	250c      	movs	r5, #12
        adv_data_len = 0;
   15252:	2100      	movs	r1, #0
   15254:	e7d8      	b.n	15208 <ble_ll_adv_legacy_pdu_make+0x24>
        pdu_type = BLE_ADV_PDU_TYPE_ADV_IND;
   15256:	2300      	movs	r3, #0
   15258:	e7d6      	b.n	15208 <ble_ll_adv_legacy_pdu_make+0x24>
        pdu_type = BLE_ADV_PDU_TYPE_ADV_NONCONN_IND;
   1525a:	2302      	movs	r3, #2
   1525c:	e7d4      	b.n	15208 <ble_ll_adv_legacy_pdu_make+0x24>
    assert(adv_data_len <= BLE_ADV_LEGACY_DATA_MAX_LEN);
   1525e:	f7f6 ffc3 	bl	c1e8 <hal_debugger_connected>
   15262:	b100      	cbz	r0, 15266 <ble_ll_adv_legacy_pdu_make+0x82>
   15264:	be01      	bkpt	0x0001
   15266:	2300      	movs	r3, #0
   15268:	461a      	mov	r2, r3
   1526a:	4619      	mov	r1, r3
   1526c:	4618      	mov	r0, r3
   1526e:	f7f7 fc6f 	bl	cb50 <__assert_func>
        memcpy(dptr, advsm->initiator_addr, BLE_DEV_ADDR_LEN);
   15272:	4622      	mov	r2, r4
   15274:	f852 6f3a 	ldr.w	r6, [r2, #58]!
   15278:	f8c0 6006 	str.w	r6, [r0, #6]
   1527c:	8892      	ldrh	r2, [r2, #4]
   1527e:	809a      	strh	r2, [r3, #4]
   15280:	e7d8      	b.n	15234 <ble_ll_adv_legacy_pdu_make+0x50>
        os_mbuf_copydata(advsm->adv_data, 0, adv_data_len, dptr);
   15282:	460a      	mov	r2, r1
   15284:	2100      	movs	r1, #0
   15286:	6c20      	ldr	r0, [r4, #64]	; 0x40
   15288:	f7f8 f975 	bl	d576 <os_mbuf_copydata>
   1528c:	e7d3      	b.n	15236 <ble_ll_adv_legacy_pdu_make+0x52>

0001528e <ble_ll_adv_scan_rsp_legacy_pdu_make>:
{
   1528e:	b538      	push	{r3, r4, r5, lr}
   15290:	460c      	mov	r4, r1
    scan_rsp_len = SCAN_RSP_DATA_LEN(advsm);
   15292:	6c8b      	ldr	r3, [r1, #72]	; 0x48
   15294:	b1eb      	cbz	r3, 152d2 <ble_ll_adv_scan_rsp_legacy_pdu_make+0x44>
   15296:	7c19      	ldrb	r1, [r3, #16]
    assert(scan_rsp_len <= BLE_SCAN_RSP_LEGACY_DATA_MAX_LEN);
   15298:	291f      	cmp	r1, #31
   1529a:	d810      	bhi.n	152be <ble_ll_adv_scan_rsp_legacy_pdu_make+0x30>
    pdulen = BLE_DEV_ADDR_LEN + scan_rsp_len;
   1529c:	1d8d      	adds	r5, r1, #6
   1529e:	b2ed      	uxtb	r5, r5
    if (advsm->flags & BLE_LL_ADV_SM_FLAG_TX_ADD) {
   152a0:	8963      	ldrh	r3, [r4, #10]
   152a2:	f013 0f01 	tst.w	r3, #1
   152a6:	d116      	bne.n	152d6 <ble_ll_adv_scan_rsp_legacy_pdu_make+0x48>
    hdr = BLE_ADV_PDU_TYPE_SCAN_RSP;
   152a8:	2304      	movs	r3, #4
    *hdr_byte = hdr;
   152aa:	7013      	strb	r3, [r2, #0]
    memcpy(dptr, advsm->adva, BLE_DEV_ADDR_LEN);
   152ac:	4622      	mov	r2, r4
   152ae:	f852 3f28 	ldr.w	r3, [r2, #40]!
   152b2:	6003      	str	r3, [r0, #0]
   152b4:	8893      	ldrh	r3, [r2, #4]
   152b6:	8083      	strh	r3, [r0, #4]
    if (scan_rsp_len != 0) {
   152b8:	b979      	cbnz	r1, 152da <ble_ll_adv_scan_rsp_legacy_pdu_make+0x4c>
}
   152ba:	4628      	mov	r0, r5
   152bc:	bd38      	pop	{r3, r4, r5, pc}
    assert(scan_rsp_len <= BLE_SCAN_RSP_LEGACY_DATA_MAX_LEN);
   152be:	f7f6 ff93 	bl	c1e8 <hal_debugger_connected>
   152c2:	b100      	cbz	r0, 152c6 <ble_ll_adv_scan_rsp_legacy_pdu_make+0x38>
   152c4:	be01      	bkpt	0x0001
   152c6:	2300      	movs	r3, #0
   152c8:	461a      	mov	r2, r3
   152ca:	4619      	mov	r1, r3
   152cc:	4618      	mov	r0, r3
   152ce:	f7f7 fc3f 	bl	cb50 <__assert_func>
    scan_rsp_len = SCAN_RSP_DATA_LEN(advsm);
   152d2:	2100      	movs	r1, #0
   152d4:	e7e2      	b.n	1529c <ble_ll_adv_scan_rsp_legacy_pdu_make+0xe>
        hdr |= BLE_ADV_PDU_HDR_TXADD_RAND;
   152d6:	2344      	movs	r3, #68	; 0x44
   152d8:	e7e7      	b.n	152aa <ble_ll_adv_scan_rsp_legacy_pdu_make+0x1c>
        os_mbuf_copydata(advsm->scan_rsp_data, 0, scan_rsp_len,
   152da:	1d83      	adds	r3, r0, #6
   152dc:	460a      	mov	r2, r1
   152de:	2100      	movs	r1, #0
   152e0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   152e2:	f7f8 f948 	bl	d576 <os_mbuf_copydata>
   152e6:	e7e8      	b.n	152ba <ble_ll_adv_scan_rsp_legacy_pdu_make+0x2c>

000152e8 <ble_ll_adv_drop_event>:
    return rc;
}

static void
ble_ll_adv_drop_event(struct ble_ll_adv_sm *advsm)
{
   152e8:	b510      	push	{r4, lr}
   152ea:	4604      	mov	r4, r0
    STATS_INC(ble_ll_stats, adv_drop_event);
   152ec:	4a08      	ldr	r2, [pc, #32]	; (15310 <ble_ll_adv_drop_event+0x28>)
   152ee:	6f93      	ldr	r3, [r2, #120]	; 0x78
   152f0:	3301      	adds	r3, #1
   152f2:	6793      	str	r3, [r2, #120]	; 0x78

    ble_ll_sched_rmv_elem(&advsm->adv_sch);
   152f4:	3064      	adds	r0, #100	; 0x64
   152f6:	f007 fe6b 	bl	1cfd0 <ble_ll_sched_rmv_elem>

    ble_npl_eventq_remove(&g_ble_ll_data.ll_evq, &advsm->adv_sec_txdone_ev);
    advsm->aux_active = 0;
#endif

    advsm->adv_chan = ble_ll_adv_final_chan(advsm);
   152fa:	4620      	mov	r0, r4
   152fc:	f7ff fd6d 	bl	14dda <ble_ll_adv_final_chan>
   15300:	71a0      	strb	r0, [r4, #6]
   15302:	f104 0154 	add.w	r1, r4, #84	; 0x54
   15306:	4803      	ldr	r0, [pc, #12]	; (15314 <ble_ll_adv_drop_event+0x2c>)
   15308:	f7f7 ff51 	bl	d1ae <os_eventq_put>
    ble_npl_eventq_put(&g_ble_ll_data.ll_evq, &advsm->adv_txdone_ev);
}
   1530c:	bd10      	pop	{r4, pc}
   1530e:	bf00      	nop
   15310:	200035c0 	.word	0x200035c0
   15314:	20003740 	.word	0x20003740

00015318 <ble_ll_adv_update_adv_scan_rsp_data>:
    if (!(advsm->flags & BLE_LL_ADV_SM_FLAG_NEW_ADV_DATA) &&
   15318:	8943      	ldrh	r3, [r0, #10]
   1531a:	f413 6fc0 	tst.w	r3, #1536	; 0x600
   1531e:	d023      	beq.n	15368 <ble_ll_adv_update_adv_scan_rsp_data+0x50>
{
   15320:	b510      	push	{r4, lr}
   15322:	4604      	mov	r4, r0
    if (advsm->flags & BLE_LL_ADV_SM_FLAG_NEW_ADV_DATA) {
   15324:	f413 7f00 	tst.w	r3, #512	; 0x200
   15328:	d00e      	beq.n	15348 <ble_ll_adv_update_adv_scan_rsp_data+0x30>
        if (advsm->new_adv_data) {
   1532a:	6c43      	ldr	r3, [r0, #68]	; 0x44
   1532c:	b133      	cbz	r3, 1533c <ble_ll_adv_update_adv_scan_rsp_data+0x24>
            os_mbuf_free_chain(advsm->adv_data);
   1532e:	6c00      	ldr	r0, [r0, #64]	; 0x40
   15330:	f7f8 f876 	bl	d420 <os_mbuf_free_chain>
            advsm->adv_data = advsm->new_adv_data;
   15334:	6c63      	ldr	r3, [r4, #68]	; 0x44
   15336:	6423      	str	r3, [r4, #64]	; 0x40
            advsm->new_adv_data = NULL;
   15338:	2300      	movs	r3, #0
   1533a:	6463      	str	r3, [r4, #68]	; 0x44
        ble_ll_adv_flags_clear(advsm, BLE_LL_ADV_SM_FLAG_NEW_ADV_DATA);
   1533c:	f44f 7100 	mov.w	r1, #512	; 0x200
   15340:	4620      	mov	r0, r4
   15342:	f7ff fd62 	bl	14e0a <ble_ll_adv_flags_clear>
}
   15346:	bd10      	pop	{r4, pc}
    } else if (advsm->flags & BLE_LL_ADV_SM_FLAG_NEW_SCAN_RSP_DATA) {
   15348:	f413 6f80 	tst.w	r3, #1024	; 0x400
   1534c:	d0fb      	beq.n	15346 <ble_ll_adv_update_adv_scan_rsp_data+0x2e>
        os_mbuf_free_chain(advsm->scan_rsp_data);
   1534e:	6c80      	ldr	r0, [r0, #72]	; 0x48
   15350:	f7f8 f866 	bl	d420 <os_mbuf_free_chain>
        advsm->scan_rsp_data = advsm->new_scan_rsp_data;
   15354:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   15356:	64a3      	str	r3, [r4, #72]	; 0x48
        advsm->new_scan_rsp_data = NULL;
   15358:	2300      	movs	r3, #0
   1535a:	64e3      	str	r3, [r4, #76]	; 0x4c
        ble_ll_adv_flags_clear(advsm, BLE_LL_ADV_SM_FLAG_NEW_SCAN_RSP_DATA);
   1535c:	f44f 6180 	mov.w	r1, #1024	; 0x400
   15360:	4620      	mov	r0, r4
   15362:	f7ff fd52 	bl	14e0a <ble_ll_adv_flags_clear>
   15366:	e7ee      	b.n	15346 <ble_ll_adv_update_adv_scan_rsp_data+0x2e>
   15368:	4770      	bx	lr
	...

0001536c <ble_ll_adv_sm_stop>:
{
   1536c:	b538      	push	{r3, r4, r5, lr}
    if (advsm->adv_enabled) {
   1536e:	7803      	ldrb	r3, [r0, #0]
   15370:	b903      	cbnz	r3, 15374 <ble_ll_adv_sm_stop+0x8>
}
   15372:	bd38      	pop	{r3, r4, r5, pc}
   15374:	4604      	mov	r4, r0
        ble_ll_rfmgmt_release();
   15376:	f006 f873 	bl	1b460 <ble_ll_rfmgmt_release>
        ble_ll_sched_rmv_elem(&advsm->adv_sch);
   1537a:	f104 0064 	add.w	r0, r4, #100	; 0x64
   1537e:	f007 fe27 	bl	1cfd0 <ble_ll_sched_rmv_elem>
        OS_ENTER_CRITICAL(sr);
   15382:	f7f9 f8d7 	bl	e534 <os_arch_save_sr>
   15386:	4605      	mov	r5, r0
        if (ble_ll_state_get() == BLE_LL_STATE_ADV) {
   15388:	f7ff fbc4 	bl	14b14 <ble_ll_state_get>
   1538c:	2801      	cmp	r0, #1
   1538e:	d016      	beq.n	153be <ble_ll_adv_sm_stop+0x52>
        OS_EXIT_CRITICAL(sr);
   15390:	4628      	mov	r0, r5
   15392:	f7f9 f8d5 	bl	e540 <os_arch_restore_sr>
    os_eventq_remove(&evq->evq, &ev->ev);
   15396:	f104 0154 	add.w	r1, r4, #84	; 0x54
   1539a:	480e      	ldr	r0, [pc, #56]	; (153d4 <ble_ll_adv_sm_stop+0x68>)
   1539c:	f7f7 ff9e 	bl	d2dc <os_eventq_remove>
        if (advsm->conn_comp_ev) {
   153a0:	6d20      	ldr	r0, [r4, #80]	; 0x50
   153a2:	b118      	cbz	r0, 153ac <ble_ll_adv_sm_stop+0x40>
            ble_hci_trans_buf_free(advsm->conn_comp_ev);
   153a4:	f014 ff7a 	bl	2a29c <ble_hci_trans_buf_free>
            advsm->conn_comp_ev = NULL;
   153a8:	2300      	movs	r3, #0
   153aa:	6523      	str	r3, [r4, #80]	; 0x50
        ble_ll_adv_active_chanset_clear(advsm);
   153ac:	4620      	mov	r0, r4
   153ae:	f7ff fd76 	bl	14e9e <ble_ll_adv_active_chanset_clear>
        advsm->adv_enabled = 0;
   153b2:	2300      	movs	r3, #0
   153b4:	7023      	strb	r3, [r4, #0]
        ble_ll_adv_update_adv_scan_rsp_data(advsm);
   153b6:	4620      	mov	r0, r4
   153b8:	f7ff ffae 	bl	15318 <ble_ll_adv_update_adv_scan_rsp_data>
}
   153bc:	e7d9      	b.n	15372 <ble_ll_adv_sm_stop+0x6>
            ble_phy_disable();
   153be:	f008 fd4b 	bl	1de58 <ble_phy_disable>
            ble_ll_state_set(BLE_LL_STATE_STANDBY);
   153c2:	2000      	movs	r0, #0
   153c4:	f7ff fba0 	bl	14b08 <ble_ll_state_set>
            g_ble_ll_cur_adv_sm = NULL;
   153c8:	4b03      	ldr	r3, [pc, #12]	; (153d8 <ble_ll_adv_sm_stop+0x6c>)
   153ca:	2200      	movs	r2, #0
   153cc:	601a      	str	r2, [r3, #0]
            ble_ll_scan_chk_resume();
   153ce:	f006 ffef 	bl	1c3b0 <ble_ll_scan_chk_resume>
   153d2:	e7dd      	b.n	15390 <ble_ll_adv_sm_stop+0x24>
   153d4:	20003740 	.word	0x20003740
   153d8:	200037d8 	.word	0x200037d8

000153dc <ble_ll_adv_set_enable>:
{
   153dc:	b510      	push	{r4, lr}
   153de:	460c      	mov	r4, r1
    advsm = ble_ll_adv_sm_find_configured(instance);
   153e0:	f7ff fd80 	bl	14ee4 <ble_ll_adv_sm_find_configured>
    if (!advsm) {
   153e4:	b168      	cbz	r0, 15402 <ble_ll_adv_set_enable+0x26>
    if (enable == 1) {
   153e6:	2c01      	cmp	r4, #1
   153e8:	d004      	beq.n	153f4 <ble_ll_adv_set_enable+0x18>
    } else if (enable == 0) {
   153ea:	b964      	cbnz	r4, 15406 <ble_ll_adv_set_enable+0x2a>
        ble_ll_adv_sm_stop(advsm);
   153ec:	f7ff ffbe 	bl	1536c <ble_ll_adv_sm_stop>
    rc = BLE_ERR_SUCCESS;
   153f0:	2000      	movs	r0, #0
}
   153f2:	bd10      	pop	{r4, pc}
        if (!advsm->adv_enabled) {
   153f4:	7802      	ldrb	r2, [r0, #0]
   153f6:	b10a      	cbz	r2, 153fc <ble_ll_adv_set_enable+0x20>
    rc = BLE_ERR_SUCCESS;
   153f8:	2000      	movs	r0, #0
   153fa:	e7fa      	b.n	153f2 <ble_ll_adv_set_enable+0x16>
            rc = ble_ll_adv_sm_start(advsm);
   153fc:	f7ff fdf2 	bl	14fe4 <ble_ll_adv_sm_start>
   15400:	e7f7      	b.n	153f2 <ble_ll_adv_set_enable+0x16>
        return BLE_ERR_UNK_ADV_INDENT;
   15402:	2042      	movs	r0, #66	; 0x42
   15404:	e7f5      	b.n	153f2 <ble_ll_adv_set_enable+0x16>
        rc = BLE_ERR_INV_HCI_CMD_PARMS;
   15406:	2012      	movs	r0, #18
   15408:	e7f3      	b.n	153f2 <ble_ll_adv_set_enable+0x16>

0001540a <ble_ll_adv_update_data_mbuf>:
{
   1540a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1540e:	4605      	mov	r5, r0
   15410:	4617      	mov	r7, r2
   15412:	4698      	mov	r8, r3
   15414:	f8bd 6018 	ldrh.w	r6, [sp, #24]
    om = *omp;
   15418:	6804      	ldr	r4, [r0, #0]
    if (new_data) {
   1541a:	b149      	cbz	r1, 15430 <ble_ll_adv_update_data_mbuf+0x26>
        if (om) {
   1541c:	b114      	cbz	r4, 15424 <ble_ll_adv_update_data_mbuf+0x1a>
            os_mbuf_free_chain(om);
   1541e:	4620      	mov	r0, r4
   15420:	f7f7 fffe 	bl	d420 <os_mbuf_free_chain>
        om = os_msys_get_pkthdr(datalen, 0);
   15424:	2100      	movs	r1, #0
   15426:	4630      	mov	r0, r6
   15428:	f7f8 fcbb 	bl	dda2 <os_msys_get_pkthdr>
        if (!om) {
   1542c:	4604      	mov	r4, r0
   1542e:	b1e8      	cbz	r0, 1546c <ble_ll_adv_update_data_mbuf+0x62>
    assert(om);
   15430:	b174      	cbz	r4, 15450 <ble_ll_adv_update_data_mbuf+0x46>
    if (OS_MBUF_PKTLEN(om) + datalen > maxlen) {
   15432:	8a23      	ldrh	r3, [r4, #16]
   15434:	4433      	add	r3, r6
   15436:	42bb      	cmp	r3, r7
   15438:	dc14      	bgt.n	15464 <ble_ll_adv_update_data_mbuf+0x5a>
    ret = os_mbuf_append(om, data, datalen);
   1543a:	4632      	mov	r2, r6
   1543c:	4641      	mov	r1, r8
   1543e:	4620      	mov	r0, r4
   15440:	f7f8 f80a 	bl	d458 <os_mbuf_append>
    if (ret) {
   15444:	b190      	cbz	r0, 1546c <ble_ll_adv_update_data_mbuf+0x62>
        os_mbuf_free_chain(om);
   15446:	4620      	mov	r0, r4
   15448:	f7f7 ffea 	bl	d420 <os_mbuf_free_chain>
        om = NULL;
   1544c:	2400      	movs	r4, #0
   1544e:	e00d      	b.n	1546c <ble_ll_adv_update_data_mbuf+0x62>
    assert(om);
   15450:	f7f6 feca 	bl	c1e8 <hal_debugger_connected>
   15454:	b100      	cbz	r0, 15458 <ble_ll_adv_update_data_mbuf+0x4e>
   15456:	be01      	bkpt	0x0001
   15458:	2300      	movs	r3, #0
   1545a:	461a      	mov	r2, r3
   1545c:	4619      	mov	r1, r3
   1545e:	4618      	mov	r0, r3
   15460:	f7f7 fb76 	bl	cb50 <__assert_func>
        os_mbuf_free_chain(om);
   15464:	4620      	mov	r0, r4
   15466:	f7f7 ffdb 	bl	d420 <os_mbuf_free_chain>
        om = NULL;
   1546a:	2400      	movs	r4, #0
    *omp = om;
   1546c:	602c      	str	r4, [r5, #0]
}
   1546e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00015472 <ble_ll_adv_set_scan_rsp_data>:
{
   15472:	b5f0      	push	{r4, r5, r6, r7, lr}
   15474:	b083      	sub	sp, #12
   15476:	4607      	mov	r7, r0
   15478:	460e      	mov	r6, r1
   1547a:	461d      	mov	r5, r3
    advsm = ble_ll_adv_sm_find_configured(instance);
   1547c:	4610      	mov	r0, r2
   1547e:	f7ff fd31 	bl	14ee4 <ble_ll_adv_sm_find_configured>
    if (!advsm) {
   15482:	2800      	cmp	r0, #0
   15484:	d042      	beq.n	1550c <ble_ll_adv_set_scan_rsp_data+0x9a>
   15486:	4604      	mov	r4, r0
    if (!(advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_SCANNABLE)) {
   15488:	8983      	ldrh	r3, [r0, #12]
   1548a:	f013 0f02 	tst.w	r3, #2
   1548e:	d102      	bne.n	15496 <ble_ll_adv_set_scan_rsp_data+0x24>
        if (!(advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY)) {
   15490:	f013 0f10 	tst.w	r3, #16
   15494:	d03c      	beq.n	15510 <ble_ll_adv_set_scan_rsp_data+0x9e>
    switch (operation) {
   15496:	2d03      	cmp	r5, #3
   15498:	d13c      	bne.n	15514 <ble_ll_adv_set_scan_rsp_data+0xa2>
        if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY) {
   1549a:	f013 0f10 	tst.w	r3, #16
   1549e:	d001      	beq.n	154a4 <ble_ll_adv_set_scan_rsp_data+0x32>
            if (datalen > BLE_SCAN_RSP_LEGACY_DATA_MAX_LEN) {
   154a0:	2e1f      	cmp	r6, #31
   154a2:	d83a      	bhi.n	1551a <ble_ll_adv_set_scan_rsp_data+0xa8>
    new_data = (operation == BLE_HCI_LE_SET_DATA_OPER_COMPLETE) ||
   154a4:	2d03      	cmp	r5, #3
   154a6:	d021      	beq.n	154ec <ble_ll_adv_set_scan_rsp_data+0x7a>
   154a8:	2d01      	cmp	r5, #1
   154aa:	d000      	beq.n	154ae <ble_ll_adv_set_scan_rsp_data+0x3c>
   154ac:	2500      	movs	r5, #0
    if (advsm->adv_enabled) {
   154ae:	7823      	ldrb	r3, [r4, #0]
   154b0:	b1f3      	cbz	r3, 154f0 <ble_ll_adv_set_scan_rsp_data+0x7e>
        if (advsm->new_scan_rsp_data) {
   154b2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   154b4:	b14b      	cbz	r3, 154ca <ble_ll_adv_set_scan_rsp_data+0x58>
            ble_ll_adv_flags_clear(advsm, BLE_LL_ADV_SM_FLAG_NEW_SCAN_RSP_DATA);
   154b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
   154ba:	4620      	mov	r0, r4
   154bc:	f7ff fca5 	bl	14e0a <ble_ll_adv_flags_clear>
            os_mbuf_free_chain(advsm->new_scan_rsp_data);
   154c0:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   154c2:	f7f7 ffad 	bl	d420 <os_mbuf_free_chain>
            advsm->new_scan_rsp_data = NULL;
   154c6:	2300      	movs	r3, #0
   154c8:	64e3      	str	r3, [r4, #76]	; 0x4c
        ble_ll_adv_update_data_mbuf(&advsm->new_scan_rsp_data, new_data,
   154ca:	9600      	str	r6, [sp, #0]
   154cc:	463b      	mov	r3, r7
   154ce:	221f      	movs	r2, #31
   154d0:	4629      	mov	r1, r5
   154d2:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   154d6:	f7ff ff98 	bl	1540a <ble_ll_adv_update_data_mbuf>
        if (!advsm->new_scan_rsp_data) {
   154da:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   154dc:	b1fb      	cbz	r3, 1551e <ble_ll_adv_set_scan_rsp_data+0xac>
        ble_ll_adv_flags_set(advsm, BLE_LL_ADV_SM_FLAG_NEW_SCAN_RSP_DATA);
   154de:	f44f 6180 	mov.w	r1, #1024	; 0x400
   154e2:	4620      	mov	r0, r4
   154e4:	f7ff fc86 	bl	14df4 <ble_ll_adv_flags_set>
    return BLE_ERR_SUCCESS;
   154e8:	2000      	movs	r0, #0
   154ea:	e014      	b.n	15516 <ble_ll_adv_set_scan_rsp_data+0xa4>
    new_data = (operation == BLE_HCI_LE_SET_DATA_OPER_COMPLETE) ||
   154ec:	2501      	movs	r5, #1
   154ee:	e7de      	b.n	154ae <ble_ll_adv_set_scan_rsp_data+0x3c>
        ble_ll_adv_update_data_mbuf(&advsm->scan_rsp_data, new_data,
   154f0:	9600      	str	r6, [sp, #0]
   154f2:	463b      	mov	r3, r7
   154f4:	221f      	movs	r2, #31
   154f6:	4629      	mov	r1, r5
   154f8:	f104 0048 	add.w	r0, r4, #72	; 0x48
   154fc:	f7ff ff85 	bl	1540a <ble_ll_adv_update_data_mbuf>
        if (!advsm->scan_rsp_data) {
   15500:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   15502:	b10b      	cbz	r3, 15508 <ble_ll_adv_set_scan_rsp_data+0x96>
    return BLE_ERR_SUCCESS;
   15504:	2000      	movs	r0, #0
   15506:	e006      	b.n	15516 <ble_ll_adv_set_scan_rsp_data+0xa4>
            return BLE_ERR_MEM_CAPACITY;
   15508:	2007      	movs	r0, #7
   1550a:	e004      	b.n	15516 <ble_ll_adv_set_scan_rsp_data+0xa4>
        return BLE_ERR_UNK_ADV_INDENT;
   1550c:	2042      	movs	r0, #66	; 0x42
   1550e:	e002      	b.n	15516 <ble_ll_adv_set_scan_rsp_data+0xa4>
            return BLE_ERR_INV_HCI_CMD_PARMS;
   15510:	2012      	movs	r0, #18
   15512:	e000      	b.n	15516 <ble_ll_adv_set_scan_rsp_data+0xa4>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   15514:	2012      	movs	r0, #18
}
   15516:	b003      	add	sp, #12
   15518:	bdf0      	pop	{r4, r5, r6, r7, pc}
                return BLE_ERR_INV_HCI_CMD_PARMS;
   1551a:	2012      	movs	r0, #18
   1551c:	e7fb      	b.n	15516 <ble_ll_adv_set_scan_rsp_data+0xa4>
            return BLE_ERR_MEM_CAPACITY;
   1551e:	2007      	movs	r0, #7
   15520:	e7f9      	b.n	15516 <ble_ll_adv_set_scan_rsp_data+0xa4>

00015522 <ble_ll_adv_set_adv_data>:
{
   15522:	b5f0      	push	{r4, r5, r6, r7, lr}
   15524:	b083      	sub	sp, #12
   15526:	4607      	mov	r7, r0
   15528:	460e      	mov	r6, r1
   1552a:	461d      	mov	r5, r3
    advsm = ble_ll_adv_sm_find_configured(instance);
   1552c:	4610      	mov	r0, r2
   1552e:	f7ff fcd9 	bl	14ee4 <ble_ll_adv_sm_find_configured>
    if (!advsm) {
   15532:	2800      	cmp	r0, #0
   15534:	d04f      	beq.n	155d6 <ble_ll_adv_set_adv_data+0xb4>
   15536:	4604      	mov	r4, r0
    if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY) {
   15538:	8983      	ldrh	r3, [r0, #12]
   1553a:	f013 0f10 	tst.w	r3, #16
   1553e:	d007      	beq.n	15550 <ble_ll_adv_set_adv_data+0x2e>
        if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_DIRECTED) {
   15540:	f013 0f04 	tst.w	r3, #4
   15544:	d007      	beq.n	15556 <ble_ll_adv_set_adv_data+0x34>
            if (ble_ll_hci_adv_mode_ext()) {
   15546:	f004 ffc8 	bl	1a4da <ble_ll_hci_adv_mode_ext>
   1554a:	b120      	cbz	r0, 15556 <ble_ll_adv_set_adv_data+0x34>
                return BLE_ERR_INV_HCI_CMD_PARMS;
   1554c:	2012      	movs	r0, #18
   1554e:	e047      	b.n	155e0 <ble_ll_adv_set_adv_data+0xbe>
        if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_SCANNABLE) {
   15550:	f013 0f02 	tst.w	r3, #2
   15554:	d141      	bne.n	155da <ble_ll_adv_set_adv_data+0xb8>
    switch (operation) {
   15556:	2d03      	cmp	r5, #3
   15558:	d141      	bne.n	155de <ble_ll_adv_set_adv_data+0xbc>
        if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY) {
   1555a:	89a3      	ldrh	r3, [r4, #12]
   1555c:	f013 0f10 	tst.w	r3, #16
   15560:	d001      	beq.n	15566 <ble_ll_adv_set_adv_data+0x44>
            if (datalen > BLE_ADV_LEGACY_DATA_MAX_LEN) {
   15562:	2e1f      	cmp	r6, #31
   15564:	d83e      	bhi.n	155e4 <ble_ll_adv_set_adv_data+0xc2>
        ble_ll_adv_flags_clear(advsm, BLE_LL_ADV_SM_FLAG_ADV_DATA_INCOMPLETE);
   15566:	2140      	movs	r1, #64	; 0x40
   15568:	4620      	mov	r0, r4
   1556a:	f7ff fc4e 	bl	14e0a <ble_ll_adv_flags_clear>
    new_data = (operation == BLE_HCI_LE_SET_DATA_OPER_COMPLETE) ||
   1556e:	2d03      	cmp	r5, #3
   15570:	d021      	beq.n	155b6 <ble_ll_adv_set_adv_data+0x94>
   15572:	2d01      	cmp	r5, #1
   15574:	d000      	beq.n	15578 <ble_ll_adv_set_adv_data+0x56>
   15576:	2500      	movs	r5, #0
    if (advsm->adv_enabled) {
   15578:	7823      	ldrb	r3, [r4, #0]
   1557a:	b1f3      	cbz	r3, 155ba <ble_ll_adv_set_adv_data+0x98>
        if (advsm->new_adv_data) {
   1557c:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1557e:	b14b      	cbz	r3, 15594 <ble_ll_adv_set_adv_data+0x72>
            ble_ll_adv_flags_clear(advsm, BLE_LL_ADV_SM_FLAG_NEW_ADV_DATA);
   15580:	f44f 7100 	mov.w	r1, #512	; 0x200
   15584:	4620      	mov	r0, r4
   15586:	f7ff fc40 	bl	14e0a <ble_ll_adv_flags_clear>
            os_mbuf_free_chain(advsm->new_adv_data);
   1558a:	6c60      	ldr	r0, [r4, #68]	; 0x44
   1558c:	f7f7 ff48 	bl	d420 <os_mbuf_free_chain>
            advsm->new_adv_data = NULL;
   15590:	2300      	movs	r3, #0
   15592:	6463      	str	r3, [r4, #68]	; 0x44
        ble_ll_adv_update_data_mbuf(&advsm->new_adv_data, new_data,
   15594:	9600      	str	r6, [sp, #0]
   15596:	463b      	mov	r3, r7
   15598:	221f      	movs	r2, #31
   1559a:	4629      	mov	r1, r5
   1559c:	f104 0044 	add.w	r0, r4, #68	; 0x44
   155a0:	f7ff ff33 	bl	1540a <ble_ll_adv_update_data_mbuf>
        if (!advsm->new_adv_data) {
   155a4:	6c63      	ldr	r3, [r4, #68]	; 0x44
   155a6:	b1fb      	cbz	r3, 155e8 <ble_ll_adv_set_adv_data+0xc6>
        ble_ll_adv_flags_set(advsm, BLE_LL_ADV_SM_FLAG_NEW_ADV_DATA);
   155a8:	f44f 7100 	mov.w	r1, #512	; 0x200
   155ac:	4620      	mov	r0, r4
   155ae:	f7ff fc21 	bl	14df4 <ble_ll_adv_flags_set>
    return BLE_ERR_SUCCESS;
   155b2:	2000      	movs	r0, #0
   155b4:	e014      	b.n	155e0 <ble_ll_adv_set_adv_data+0xbe>
    new_data = (operation == BLE_HCI_LE_SET_DATA_OPER_COMPLETE) ||
   155b6:	2501      	movs	r5, #1
   155b8:	e7de      	b.n	15578 <ble_ll_adv_set_adv_data+0x56>
        ble_ll_adv_update_data_mbuf(&advsm->adv_data, new_data,
   155ba:	9600      	str	r6, [sp, #0]
   155bc:	463b      	mov	r3, r7
   155be:	221f      	movs	r2, #31
   155c0:	4629      	mov	r1, r5
   155c2:	f104 0040 	add.w	r0, r4, #64	; 0x40
   155c6:	f7ff ff20 	bl	1540a <ble_ll_adv_update_data_mbuf>
        if (!advsm->adv_data) {
   155ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
   155cc:	b10b      	cbz	r3, 155d2 <ble_ll_adv_set_adv_data+0xb0>
    return BLE_ERR_SUCCESS;
   155ce:	2000      	movs	r0, #0
   155d0:	e006      	b.n	155e0 <ble_ll_adv_set_adv_data+0xbe>
            return BLE_ERR_MEM_CAPACITY;
   155d2:	2007      	movs	r0, #7
   155d4:	e004      	b.n	155e0 <ble_ll_adv_set_adv_data+0xbe>
        return BLE_ERR_UNK_ADV_INDENT;
   155d6:	2042      	movs	r0, #66	; 0x42
   155d8:	e002      	b.n	155e0 <ble_ll_adv_set_adv_data+0xbe>
            return BLE_ERR_INV_HCI_CMD_PARMS;
   155da:	2012      	movs	r0, #18
   155dc:	e000      	b.n	155e0 <ble_ll_adv_set_adv_data+0xbe>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   155de:	2012      	movs	r0, #18
}
   155e0:	b003      	add	sp, #12
   155e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
                return BLE_ERR_INV_HCI_CMD_PARMS;
   155e4:	2012      	movs	r0, #18
   155e6:	e7fb      	b.n	155e0 <ble_ll_adv_set_adv_data+0xbe>
            return BLE_ERR_MEM_CAPACITY;
   155e8:	2007      	movs	r0, #7
   155ea:	e7f9      	b.n	155e0 <ble_ll_adv_set_adv_data+0xbe>

000155ec <ble_ll_adv_already_connected>:
{
   155ec:	b570      	push	{r4, r5, r6, lr}
   155ee:	4605      	mov	r5, r0
   155f0:	460e      	mov	r6, r1
    SLIST_FOREACH(connsm, &g_ble_ll_conn_active_list, act_sle) {
   155f2:	4b10      	ldr	r3, [pc, #64]	; (15634 <ble_ll_adv_already_connected+0x48>)
   155f4:	681c      	ldr	r4, [r3, #0]
   155f6:	e006      	b.n	15606 <ble_ll_adv_already_connected+0x1a>
                if (connsm->peer_addr_type & 1) {
   155f8:	f894 3092 	ldrb.w	r3, [r4, #146]	; 0x92
   155fc:	f013 0f01 	tst.w	r3, #1
   15600:	d115      	bne.n	1562e <ble_ll_adv_already_connected+0x42>
    SLIST_FOREACH(connsm, &g_ble_ll_conn_active_list, act_sle) {
   15602:	f8d4 40b8 	ldr.w	r4, [r4, #184]	; 0xb8
   15606:	b184      	cbz	r4, 1562a <ble_ll_adv_already_connected+0x3e>
        if (!memcmp(&connsm->peer_addr, addr, BLE_DEV_ADDR_LEN)) {
   15608:	2206      	movs	r2, #6
   1560a:	4629      	mov	r1, r5
   1560c:	f104 0093 	add.w	r0, r4, #147	; 0x93
   15610:	f7f9 f9a2 	bl	e958 <memcmp>
   15614:	2800      	cmp	r0, #0
   15616:	d1f4      	bne.n	15602 <ble_ll_adv_already_connected+0x16>
            if (addr_type == BLE_ADDR_RANDOM) {
   15618:	2e01      	cmp	r6, #1
   1561a:	d0ed      	beq.n	155f8 <ble_ll_adv_already_connected+0xc>
                if ((connsm->peer_addr_type & 1) == 0) {
   1561c:	f894 3092 	ldrb.w	r3, [r4, #146]	; 0x92
   15620:	f013 0f01 	tst.w	r3, #1
   15624:	d1ed      	bne.n	15602 <ble_ll_adv_already_connected+0x16>
                    return 1;
   15626:	2001      	movs	r0, #1
   15628:	e000      	b.n	1562c <ble_ll_adv_already_connected+0x40>
    return 0;
   1562a:	2000      	movs	r0, #0
}
   1562c:	bd70      	pop	{r4, r5, r6, pc}
                    return 1;
   1562e:	2001      	movs	r0, #1
   15630:	e7fc      	b.n	1562c <ble_ll_adv_already_connected+0x40>
   15632:	bf00      	nop
   15634:	20003ab0 	.word	0x20003ab0

00015638 <ble_ll_adv_rx_req>:
{
   15638:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1563c:	4607      	mov	r7, r0
   1563e:	460e      	mov	r6, r1
    advsm = g_ble_ll_cur_adv_sm;
   15640:	4b4f      	ldr	r3, [pc, #316]	; (15780 <ble_ll_adv_rx_req+0x148>)
   15642:	f8d3 8000 	ldr.w	r8, [r3]
    rxbuf = rxpdu->om_data;
   15646:	680d      	ldr	r5, [r1, #0]
    if (memcmp(advsm->adva, adva, BLE_DEV_ADDR_LEN)) {
   15648:	2206      	movs	r2, #6
   1564a:	f105 0108 	add.w	r1, r5, #8
   1564e:	f108 0028 	add.w	r0, r8, #40	; 0x28
   15652:	f7f9 f981 	bl	e958 <memcmp>
   15656:	2800      	cmp	r0, #0
   15658:	f040 8085 	bne.w	15766 <ble_ll_adv_rx_req+0x12e>
   1565c:	4682      	mov	sl, r0
    if (pdu_type == BLE_ADV_PDU_TYPE_SCAN_REQ) {
   1565e:	2f03      	cmp	r7, #3
   15660:	d022      	beq.n	156a8 <ble_ll_adv_rx_req+0x70>
        chk_wl = advsm->adv_filter_policy & 2;
   15662:	f898 4003 	ldrb.w	r4, [r8, #3]
   15666:	f004 0402 	and.w	r4, r4, #2
    if (rxbuf[0] & BLE_ADV_PDU_HDR_TXADD_MASK) {
   1566a:	782b      	ldrb	r3, [r5, #0]
   1566c:	f013 0f40 	tst.w	r3, #64	; 0x40
   15670:	d01f      	beq.n	156b2 <ble_ll_adv_rx_req+0x7a>
        txadd = BLE_ADDR_RANDOM;
   15672:	f04f 0901 	mov.w	r9, #1
    peer = rxbuf + BLE_LL_PDU_HDR_LEN;
   15676:	3502      	adds	r5, #2
    if (ble_ll_resolv_enabled()) {
   15678:	f005 fdb4 	bl	1b1e4 <ble_ll_resolv_enabled>
   1567c:	b9e0      	cbnz	r0, 156b8 <ble_ll_adv_rx_req+0x80>
    if (chk_wl && !ble_ll_whitelist_match(peer, peer_addr_type, resolved)) {
   1567e:	2c00      	cmp	r4, #0
   15680:	d150      	bne.n	15724 <ble_ll_adv_rx_req+0xec>
    ble_hdr->rxinfo.flags |= BLE_MBUF_HDR_F_DEVMATCH;
   15682:	8b33      	ldrh	r3, [r6, #24]
   15684:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   15688:	8333      	strh	r3, [r6, #24]
    if (pdu_type == BLE_ADV_PDU_TYPE_SCAN_REQ) {
   1568a:	2f03      	cmp	r7, #3
   1568c:	d054      	beq.n	15738 <ble_ll_adv_rx_req+0x100>
    } else if (pdu_type == BLE_ADV_PDU_TYPE_AUX_CONNECT_REQ) {
   1568e:	2f05      	cmp	r7, #5
   15690:	d16f      	bne.n	15772 <ble_ll_adv_rx_req+0x13a>
        if (ble_ll_adv_already_connected(peer, peer_addr_type)) {
   15692:	4649      	mov	r1, r9
   15694:	4628      	mov	r0, r5
   15696:	f7ff ffa9 	bl	155ec <ble_ll_adv_already_connected>
   1569a:	2800      	cmp	r0, #0
   1569c:	d16c      	bne.n	15778 <ble_ll_adv_rx_req+0x140>
    rc = -1;
   1569e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
   156a2:	4618      	mov	r0, r3
   156a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        chk_wl = advsm->adv_filter_policy & 1;
   156a8:	f898 4003 	ldrb.w	r4, [r8, #3]
   156ac:	f004 0401 	and.w	r4, r4, #1
   156b0:	e7db      	b.n	1566a <ble_ll_adv_rx_req+0x32>
        txadd = BLE_ADDR_PUBLIC;
   156b2:	f04f 0900 	mov.w	r9, #0
   156b6:	e7de      	b.n	15676 <ble_ll_adv_rx_req+0x3e>
        if (ble_ll_is_rpa(peer, txadd)) {
   156b8:	4649      	mov	r1, r9
   156ba:	4628      	mov	r0, r5
   156bc:	f7ff f84f 	bl	1475e <ble_ll_is_rpa>
   156c0:	4683      	mov	fp, r0
   156c2:	b300      	cbz	r0, 15706 <ble_ll_adv_rx_req+0xce>
            advsm->adv_rpa_index = ble_hw_resolv_list_match();
   156c4:	f007 fff2 	bl	1d6ac <ble_hw_resolv_list_match>
   156c8:	b240      	sxtb	r0, r0
   156ca:	f888 0008 	strb.w	r0, [r8, #8]
            if (advsm->adv_rpa_index >= 0) {
   156ce:	2800      	cmp	r0, #0
   156d0:	db14      	blt.n	156fc <ble_ll_adv_rx_req+0xc4>
                ble_hdr->rxinfo.flags |= BLE_MBUF_HDR_F_RESOLVED;
   156d2:	8b33      	ldrh	r3, [r6, #24]
   156d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   156d8:	8333      	strh	r3, [r6, #24]
                rl = &g_ble_ll_resolv_list[advsm->adv_rpa_index];
   156da:	f998 2008 	ldrsb.w	r2, [r8, #8]
                if (chk_wl) {
   156de:	2c00      	cmp	r4, #0
   156e0:	d0cd      	beq.n	1567e <ble_ll_adv_rx_req+0x46>
                    peer = rl->rl_identity_addr;
   156e2:	2336      	movs	r3, #54	; 0x36
   156e4:	fb03 f302 	mul.w	r3, r3, r2
   156e8:	f103 0520 	add.w	r5, r3, #32
   156ec:	4a25      	ldr	r2, [pc, #148]	; (15784 <ble_ll_adv_rx_req+0x14c>)
   156ee:	4415      	add	r5, r2
   156f0:	3504      	adds	r5, #4
                    peer_addr_type = rl->rl_addr_type;
   156f2:	f812 9003 	ldrb.w	r9, [r2, r3]
                    resolved = 1;
   156f6:	f04f 0a01 	mov.w	sl, #1
   156fa:	e7c0      	b.n	1567e <ble_ll_adv_rx_req+0x46>
                if (chk_wl) {
   156fc:	2c00      	cmp	r4, #0
   156fe:	d0be      	beq.n	1567e <ble_ll_adv_rx_req+0x46>
                    return -1;
   15700:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15704:	e7cd      	b.n	156a2 <ble_ll_adv_rx_req+0x6a>
            rl = ble_ll_resolv_list_find(peer, peer_addr_type);
   15706:	4649      	mov	r1, r9
   15708:	4628      	mov	r0, r5
   1570a:	f005 fb15 	bl	1ad38 <ble_ll_resolv_list_find>
            if (rl && (rl->rl_priv_mode == BLE_HCI_PRIVACY_NETWORK) &&
   1570e:	b128      	cbz	r0, 1571c <ble_ll_adv_rx_req+0xe4>
   15710:	7842      	ldrb	r2, [r0, #1]
   15712:	b92a      	cbnz	r2, 15720 <ble_ll_adv_rx_req+0xe8>
                rl->rl_has_peer) {
   15714:	78c3      	ldrb	r3, [r0, #3]
            if (rl && (rl->rl_priv_mode == BLE_HCI_PRIVACY_NETWORK) &&
   15716:	bb4b      	cbnz	r3, 1576c <ble_ll_adv_rx_req+0x134>
    resolved = 0;
   15718:	46da      	mov	sl, fp
   1571a:	e7b0      	b.n	1567e <ble_ll_adv_rx_req+0x46>
   1571c:	46da      	mov	sl, fp
   1571e:	e7ae      	b.n	1567e <ble_ll_adv_rx_req+0x46>
   15720:	46da      	mov	sl, fp
   15722:	e7ac      	b.n	1567e <ble_ll_adv_rx_req+0x46>
    if (chk_wl && !ble_ll_whitelist_match(peer, peer_addr_type, resolved)) {
   15724:	4652      	mov	r2, sl
   15726:	4649      	mov	r1, r9
   15728:	4628      	mov	r0, r5
   1572a:	f007 fdbf 	bl	1d2ac <ble_ll_whitelist_match>
   1572e:	2800      	cmp	r0, #0
   15730:	d1a7      	bne.n	15682 <ble_ll_adv_rx_req+0x4a>
        return -1;
   15732:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15736:	e7b4      	b.n	156a2 <ble_ll_adv_rx_req+0x6a>
        ble_phy_set_txend_cb(ble_ll_adv_tx_done, advsm);
   15738:	4641      	mov	r1, r8
   1573a:	4813      	ldr	r0, [pc, #76]	; (15788 <ble_ll_adv_rx_req+0x150>)
   1573c:	f008 fb24 	bl	1dd88 <ble_phy_set_txend_cb>
        rc = ble_phy_tx(ble_ll_adv_scan_rsp_legacy_pdu_make, advsm,
   15740:	2200      	movs	r2, #0
   15742:	4641      	mov	r1, r8
   15744:	4811      	ldr	r0, [pc, #68]	; (1578c <ble_ll_adv_rx_req+0x154>)
   15746:	f008 fdb3 	bl	1e2b0 <ble_phy_tx>
        if (!rc) {
   1574a:	4603      	mov	r3, r0
   1574c:	2800      	cmp	r0, #0
   1574e:	d1a8      	bne.n	156a2 <ble_ll_adv_rx_req+0x6a>
            ble_hdr->rxinfo.flags |= BLE_MBUF_HDR_F_SCAN_RSP_TXD;
   15750:	8b32      	ldrh	r2, [r6, #24]
   15752:	f042 0210 	orr.w	r2, r2, #16
   15756:	8332      	strh	r2, [r6, #24]
            STATS_INC(ble_ll_stats, scan_rsp_txg);
   15758:	490d      	ldr	r1, [pc, #52]	; (15790 <ble_ll_adv_rx_req+0x158>)
   1575a:	f8d1 2094 	ldr.w	r2, [r1, #148]	; 0x94
   1575e:	3201      	adds	r2, #1
   15760:	f8c1 2094 	str.w	r2, [r1, #148]	; 0x94
   15764:	e79d      	b.n	156a2 <ble_ll_adv_rx_req+0x6a>
        return -1;
   15766:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1576a:	e79a      	b.n	156a2 <ble_ll_adv_rx_req+0x6a>
                return -1;
   1576c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15770:	e797      	b.n	156a2 <ble_ll_adv_rx_req+0x6a>
    rc = -1;
   15772:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15776:	e794      	b.n	156a2 <ble_ll_adv_rx_req+0x6a>
            return -1;
   15778:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1577c:	e791      	b.n	156a2 <ble_ll_adv_rx_req+0x6a>
   1577e:	bf00      	nop
   15780:	200037d8 	.word	0x200037d8
   15784:	20003ae0 	.word	0x20003ae0
   15788:	00014eb5 	.word	0x00014eb5
   1578c:	0001528f 	.word	0x0001528f
   15790:	200035c0 	.word	0x200035c0

00015794 <ble_ll_adv_conn_req_rxd>:
{
   15794:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if (!(advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY)) {
   15798:	8993      	ldrh	r3, [r2, #12]
   1579a:	f013 0f10 	tst.w	r3, #16
   1579e:	d103      	bne.n	157a8 <ble_ll_adv_conn_req_rxd+0x14>
        if (!(advsm->flags & BLE_LL_ADV_SM_FLAG_CONN_RSP_TXD)) {
   157a0:	8954      	ldrh	r4, [r2, #10]
   157a2:	f014 0f08 	tst.w	r4, #8
   157a6:	d069      	beq.n	1587c <ble_ll_adv_conn_req_rxd+0xe8>
    resolved = BLE_MBUF_HDR_RESOLVED(hdr);
   157a8:	880c      	ldrh	r4, [r1, #0]
   157aa:	f404 6680 	and.w	r6, r4, #1024	; 0x400
    inita = rxbuf + BLE_LL_PDU_HDR_LEN;
   157ae:	1c87      	adds	r7, r0, #2
    if (hdr->rxinfo.flags & BLE_MBUF_HDR_F_DEVMATCH) {
   157b0:	f014 0f40 	tst.w	r4, #64	; 0x40
   157b4:	d064      	beq.n	15880 <ble_ll_adv_conn_req_rxd+0xec>
        if (rxbuf[0] & BLE_ADV_PDU_HDR_TXADD_MASK) {
   157b6:	7804      	ldrb	r4, [r0, #0]
   157b8:	f014 0f40 	tst.w	r4, #64	; 0x40
   157bc:	d019      	beq.n	157f2 <ble_ll_adv_conn_req_rxd+0x5e>
            addr_type = BLE_ADDR_RANDOM;
   157be:	f04f 0801 	mov.w	r8, #1
   157c2:	4614      	mov	r4, r2
   157c4:	4689      	mov	r9, r1
   157c6:	4605      	mov	r5, r0
        if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_DIRECTED) {
   157c8:	f013 0f04 	tst.w	r3, #4
   157cc:	d01d      	beq.n	1580a <ble_ll_adv_conn_req_rxd+0x76>
            if (resolved) {
   157ce:	b19e      	cbz	r6, 157f8 <ble_ll_adv_conn_req_rxd+0x64>
                ident_addr = g_ble_ll_resolv_list[advsm->adv_rpa_index].rl_identity_addr;
   157d0:	f992 2008 	ldrsb.w	r2, [r2, #8]
   157d4:	2336      	movs	r3, #54	; 0x36
   157d6:	fb03 f302 	mul.w	r3, r3, r2
   157da:	f103 0120 	add.w	r1, r3, #32
   157de:	4a2b      	ldr	r2, [pc, #172]	; (1588c <ble_ll_adv_conn_req_rxd+0xf8>)
   157e0:	4411      	add	r1, r2
   157e2:	3104      	adds	r1, #4
                addr_type = g_ble_ll_resolv_list[advsm->adv_rpa_index].rl_addr_type;
   157e4:	f812 8003 	ldrb.w	r8, [r2, r3]
            if ((addr_type != advsm->peer_addr_type) ||
   157e8:	7963      	ldrb	r3, [r4, #5]
   157ea:	4543      	cmp	r3, r8
   157ec:	d006      	beq.n	157fc <ble_ll_adv_conn_req_rxd+0x68>
   157ee:	2500      	movs	r5, #0
   157f0:	e047      	b.n	15882 <ble_ll_adv_conn_req_rxd+0xee>
            addr_type = BLE_ADDR_PUBLIC;
   157f2:	f04f 0800 	mov.w	r8, #0
   157f6:	e7e4      	b.n	157c2 <ble_ll_adv_conn_req_rxd+0x2e>
            ident_addr = inita;
   157f8:	4639      	mov	r1, r7
   157fa:	e7f5      	b.n	157e8 <ble_ll_adv_conn_req_rxd+0x54>
                memcmp(advsm->peer_addr, ident_addr, BLE_DEV_ADDR_LEN)) {
   157fc:	2206      	movs	r2, #6
   157fe:	f104 0034 	add.w	r0, r4, #52	; 0x34
   15802:	f7f9 f8a9 	bl	e958 <memcmp>
            if ((addr_type != advsm->peer_addr_type) ||
   15806:	2800      	cmp	r0, #0
   15808:	d13e      	bne.n	15888 <ble_ll_adv_conn_req_rxd+0xf4>
        if (resolved) {
   1580a:	b9a6      	cbnz	r6, 15836 <ble_ll_adv_conn_req_rxd+0xa2>
                          !(advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY));
   1580c:	89a3      	ldrh	r3, [r4, #12]
        valid = ble_ll_conn_slave_start(rxbuf, addr_type, hdr,
   1580e:	091b      	lsrs	r3, r3, #4
   15810:	f083 0301 	eor.w	r3, r3, #1
   15814:	f003 0301 	and.w	r3, r3, #1
   15818:	464a      	mov	r2, r9
   1581a:	4641      	mov	r1, r8
   1581c:	4628      	mov	r0, r5
   1581e:	f002 fa61 	bl	17ce4 <ble_ll_conn_slave_start>
        if (valid) {
   15822:	4605      	mov	r5, r0
   15824:	b368      	cbz	r0, 15882 <ble_ll_adv_conn_req_rxd+0xee>
            if (!(advsm->flags & BLE_LL_ADV_SM_FLAG_CONN_RSP_TXD)) {
   15826:	8963      	ldrh	r3, [r4, #10]
   15828:	f013 0f08 	tst.w	r3, #8
   1582c:	d129      	bne.n	15882 <ble_ll_adv_conn_req_rxd+0xee>
                ble_ll_adv_sm_stop(advsm);
   1582e:	4620      	mov	r0, r4
   15830:	f7ff fd9c 	bl	1536c <ble_ll_adv_sm_stop>
   15834:	e025      	b.n	15882 <ble_ll_adv_conn_req_rxd+0xee>
            memcpy(advsm->adv_rpa, inita, BLE_DEV_ADDR_LEN);
   15836:	683b      	ldr	r3, [r7, #0]
   15838:	f8c4 302e 	str.w	r3, [r4, #46]	; 0x2e
   1583c:	88bb      	ldrh	r3, [r7, #4]
   1583e:	8663      	strh	r3, [r4, #50]	; 0x32
            ble_ll_resolv_set_peer_rpa(advsm->adv_rpa_index, inita);
   15840:	4639      	mov	r1, r7
   15842:	f994 0008 	ldrsb.w	r0, [r4, #8]
   15846:	f005 fc55 	bl	1b0f4 <ble_ll_resolv_set_peer_rpa>
                   g_ble_ll_resolv_list[advsm->adv_rpa_index].rl_identity_addr,
   1584a:	f994 3008 	ldrsb.w	r3, [r4, #8]
   1584e:	2236      	movs	r2, #54	; 0x36
   15850:	fb02 f303 	mul.w	r3, r2, r3
   15854:	3320      	adds	r3, #32
   15856:	490d      	ldr	r1, [pc, #52]	; (1588c <ble_ll_adv_conn_req_rxd+0xf8>)
   15858:	440b      	add	r3, r1
            memcpy(inita,
   1585a:	f853 0f04 	ldr.w	r0, [r3, #4]!
   1585e:	f8c5 0002 	str.w	r0, [r5, #2]
   15862:	889b      	ldrh	r3, [r3, #4]
   15864:	80bb      	strh	r3, [r7, #4]
            addr_type = g_ble_ll_resolv_list[advsm->adv_rpa_index].rl_addr_type;
   15866:	f994 3008 	ldrsb.w	r3, [r4, #8]
   1586a:	fb02 f203 	mul.w	r2, r2, r3
   1586e:	f811 8002 	ldrb.w	r8, [r1, r2]
            addr_type += 2;
   15872:	f108 0802 	add.w	r8, r8, #2
   15876:	fa5f f888 	uxtb.w	r8, r8
   1587a:	e7c7      	b.n	1580c <ble_ll_adv_conn_req_rxd+0x78>
            return 0;
   1587c:	2500      	movs	r5, #0
   1587e:	e000      	b.n	15882 <ble_ll_adv_conn_req_rxd+0xee>
    valid = 0;
   15880:	2500      	movs	r5, #0
}
   15882:	4628      	mov	r0, r5
   15884:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   15888:	2500      	movs	r5, #0
   1588a:	e7fa      	b.n	15882 <ble_ll_adv_conn_req_rxd+0xee>
   1588c:	20003ae0 	.word	0x20003ae0

00015890 <ble_ll_adv_sm_stop_timeout>:
{
   15890:	b510      	push	{r4, lr}
   15892:	4604      	mov	r4, r0
    if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_HD_DIRECTED) {
   15894:	8983      	ldrh	r3, [r0, #12]
   15896:	f013 0f08 	tst.w	r3, #8
   1589a:	d103      	bne.n	158a4 <ble_ll_adv_sm_stop_timeout+0x14>
    ble_ll_adv_sm_stop(advsm);
   1589c:	4620      	mov	r0, r4
   1589e:	f7ff fd65 	bl	1536c <ble_ll_adv_sm_stop>
}
   158a2:	bd10      	pop	{r4, pc}
        ble_ll_conn_comp_event_send(NULL, BLE_ERR_DIR_ADV_TMO,
   158a4:	4603      	mov	r3, r0
   158a6:	6d02      	ldr	r2, [r0, #80]	; 0x50
   158a8:	213c      	movs	r1, #60	; 0x3c
   158aa:	2000      	movs	r0, #0
   158ac:	f002 fc3a 	bl	18124 <ble_ll_conn_comp_event_send>
        advsm->conn_comp_ev = NULL;
   158b0:	2300      	movs	r3, #0
   158b2:	6523      	str	r3, [r4, #80]	; 0x50
   158b4:	e7f2      	b.n	1589c <ble_ll_adv_sm_stop_timeout+0xc>
	...

000158b8 <ble_ll_adv_reschedule_event>:

static void
ble_ll_adv_reschedule_event(struct ble_ll_adv_sm *advsm)
{
   158b8:	b510      	push	{r4, lr}
   158ba:	b082      	sub	sp, #8
    int rc;
    uint32_t start_time;
    uint32_t max_delay_ticks;

    assert(advsm->adv_enabled);
   158bc:	7803      	ldrb	r3, [r0, #0]
   158be:	b1b3      	cbz	r3, 158ee <ble_ll_adv_reschedule_event+0x36>
   158c0:	4604      	mov	r4, r0

    if (!advsm->adv_sch.enqueued) {
   158c2:	f890 3065 	ldrb.w	r3, [r0, #101]	; 0x65
   158c6:	b983      	cbnz	r3, 158ea <ble_ll_adv_reschedule_event+0x32>
        if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_HD_DIRECTED) {
   158c8:	8983      	ldrh	r3, [r0, #12]
   158ca:	f013 0f08 	tst.w	r3, #8
   158ce:	d018      	beq.n	15902 <ble_ll_adv_reschedule_event+0x4a>
            max_delay_ticks = 0;
   158d0:	2200      	movs	r2, #0
        } else {
            max_delay_ticks =
                    os_cputime_usecs_to_ticks(BLE_LL_ADV_DELAY_MS_MAX * 1000);
        }

        rc = ble_ll_sched_adv_reschedule(&advsm->adv_sch, &start_time,
   158d2:	a901      	add	r1, sp, #4
   158d4:	f104 0064 	add.w	r0, r4, #100	; 0x64
   158d8:	f007 fa84 	bl	1cde4 <ble_ll_sched_adv_reschedule>
                                         max_delay_ticks);
        if (rc) {
   158dc:	b9b8      	cbnz	r0, 1590e <ble_ll_adv_reschedule_event+0x56>
            ble_ll_adv_drop_event(advsm);
            return;
        }

        start_time += g_ble_ll_sched_offset_ticks;
   158de:	4b0e      	ldr	r3, [pc, #56]	; (15918 <ble_ll_adv_reschedule_event+0x60>)
   158e0:	781b      	ldrb	r3, [r3, #0]
   158e2:	9a01      	ldr	r2, [sp, #4]
   158e4:	4413      	add	r3, r2
        advsm->adv_event_start_time = start_time;
   158e6:	61a3      	str	r3, [r4, #24]
        advsm->adv_pdu_start_time = start_time;
   158e8:	61e3      	str	r3, [r4, #28]
    if (!(advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY) &&
                                                        !advsm->aux_active) {
        ble_ll_adv_aux_schedule(advsm);
    }
#endif
}
   158ea:	b002      	add	sp, #8
   158ec:	bd10      	pop	{r4, pc}
    assert(advsm->adv_enabled);
   158ee:	f7f6 fc7b 	bl	c1e8 <hal_debugger_connected>
   158f2:	b100      	cbz	r0, 158f6 <ble_ll_adv_reschedule_event+0x3e>
   158f4:	be01      	bkpt	0x0001
   158f6:	2300      	movs	r3, #0
   158f8:	461a      	mov	r2, r3
   158fa:	4619      	mov	r1, r3
   158fc:	4618      	mov	r0, r3
   158fe:	f7f7 f927 	bl	cb50 <__assert_func>
            max_delay_ticks =
   15902:	f242 7010 	movw	r0, #10000	; 0x2710
   15906:	f019 fad7 	bl	2eeb8 <os_cputime_usecs_to_ticks>
   1590a:	4602      	mov	r2, r0
   1590c:	e7e1      	b.n	158d2 <ble_ll_adv_reschedule_event+0x1a>
            ble_ll_adv_drop_event(advsm);
   1590e:	4620      	mov	r0, r4
   15910:	f7ff fcea 	bl	152e8 <ble_ll_adv_drop_event>
   15914:	e7e9      	b.n	158ea <ble_ll_adv_reschedule_event+0x32>
   15916:	bf00      	nop
   15918:	20003c30 	.word	0x20003c30

0001591c <ble_ll_adv_sm_init>:
    return 0;
}

static void
ble_ll_adv_sm_init(struct ble_ll_adv_sm *advsm)
{
   1591c:	b510      	push	{r4, lr}
   1591e:	4604      	mov	r4, r0
    memset(advsm, 0, sizeof(struct ble_ll_adv_sm));
   15920:	2280      	movs	r2, #128	; 0x80
   15922:	2100      	movs	r1, #0
   15924:	f7f9 f864 	bl	e9f0 <memset>

    advsm->adv_itvl_min = BLE_HCI_ADV_ITVL_DEF;
   15928:	f44f 6300 	mov.w	r3, #2048	; 0x800
   1592c:	81e3      	strh	r3, [r4, #14]
    advsm->adv_itvl_max = BLE_HCI_ADV_ITVL_DEF;
   1592e:	8223      	strh	r3, [r4, #16]
    advsm->adv_chanmask = BLE_HCI_ADV_CHANMASK_DEF;
   15930:	2307      	movs	r3, #7
   15932:	70a3      	strb	r3, [r4, #2]
    memset(ev, 0, sizeof(*ev));
   15934:	2300      	movs	r3, #0
   15936:	6563      	str	r3, [r4, #84]	; 0x54
   15938:	6623      	str	r3, [r4, #96]	; 0x60
    ev->ev.ev_queued = 0;
   1593a:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
    ev->ev.ev_cb = (os_event_fn *)fn;
   1593e:	4b03      	ldr	r3, [pc, #12]	; (1594c <ble_ll_adv_sm_init+0x30>)
   15940:	65a3      	str	r3, [r4, #88]	; 0x58
    ev->ev.ev_arg = arg;
   15942:	65e4      	str	r4, [r4, #92]	; 0x5c
#endif
#endif

    /* Configure instances to be legacy on start */
    advsm->props |= BLE_HCI_LE_SET_EXT_ADV_PROP_SCANNABLE;
    advsm->props |= BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY;
   15944:	2312      	movs	r3, #18
   15946:	81a3      	strh	r3, [r4, #12]
}
   15948:	bd10      	pop	{r4, pc}
   1594a:	bf00      	nop
   1594c:	00015a95 	.word	0x00015a95

00015950 <ble_ll_adv_chk_rpa_timeout>:
    if (advsm->own_addr_type < BLE_HCI_ADV_OWN_ADDR_PRIV_PUB) {
   15950:	7903      	ldrb	r3, [r0, #4]
   15952:	2b01      	cmp	r3, #1
   15954:	d903      	bls.n	1595e <ble_ll_adv_chk_rpa_timeout+0xe>
    if (advsm->flags & BLE_LL_ADV_SM_FLAG_ADV_RPA_TMO) {
   15956:	8943      	ldrh	r3, [r0, #10]
   15958:	f413 7f80 	tst.w	r3, #256	; 0x100
   1595c:	d100      	bne.n	15960 <ble_ll_adv_chk_rpa_timeout+0x10>
   1595e:	4770      	bx	lr
{
   15960:	b510      	push	{r4, lr}
   15962:	4604      	mov	r4, r0
        ble_ll_adv_rpa_update(advsm);
   15964:	f7ff fa5d 	bl	14e22 <ble_ll_adv_rpa_update>
        ble_ll_adv_flags_clear(advsm, BLE_LL_ADV_SM_FLAG_ADV_RPA_TMO);
   15968:	f44f 7180 	mov.w	r1, #256	; 0x100
   1596c:	4620      	mov	r0, r4
   1596e:	f7ff fa4c 	bl	14e0a <ble_ll_adv_flags_clear>
}
   15972:	bd10      	pop	{r4, pc}

00015974 <ble_ll_adv_done>:
{
   15974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    assert(advsm->adv_enabled);
   15978:	7803      	ldrb	r3, [r0, #0]
   1597a:	2b00      	cmp	r3, #0
   1597c:	d047      	beq.n	15a0e <ble_ll_adv_done+0x9a>
   1597e:	4604      	mov	r4, r0
    ble_ll_rfmgmt_release();
   15980:	f005 fd6e 	bl	1b460 <ble_ll_rfmgmt_release>
    ble_ll_adv_update_adv_scan_rsp_data(advsm);
   15984:	4620      	mov	r0, r4
   15986:	f7ff fcc7 	bl	15318 <ble_ll_adv_update_adv_scan_rsp_data>
    ble_ll_sched_rmv_elem(&advsm->adv_sch);
   1598a:	f104 0564 	add.w	r5, r4, #100	; 0x64
   1598e:	4628      	mov	r0, r5
   15990:	f007 fb1e 	bl	1cfd0 <ble_ll_sched_rmv_elem>
    os_eventq_remove(&evq->evq, &ev->ev);
   15994:	f104 0654 	add.w	r6, r4, #84	; 0x54
   15998:	4631      	mov	r1, r6
   1599a:	4837      	ldr	r0, [pc, #220]	; (15a78 <ble_ll_adv_done+0x104>)
   1599c:	f7f7 fc9e 	bl	d2dc <os_eventq_remove>
    final_adv_chan = ble_ll_adv_final_chan(advsm);
   159a0:	4620      	mov	r0, r4
   159a2:	f7ff fa1a 	bl	14dda <ble_ll_adv_final_chan>
    if (advsm->adv_chan == final_adv_chan) {
   159a6:	79a3      	ldrb	r3, [r4, #6]
   159a8:	4283      	cmp	r3, r0
   159aa:	d03a      	beq.n	15a22 <ble_ll_adv_done+0xae>
        ++advsm->adv_chan;
   159ac:	3301      	adds	r3, #1
   159ae:	b2db      	uxtb	r3, r3
   159b0:	71a3      	strb	r3, [r4, #6]
        mask = 1 << (advsm->adv_chan - BLE_PHY_ADV_CHAN_START);
   159b2:	f1a3 0125 	sub.w	r1, r3, #37	; 0x25
   159b6:	2201      	movs	r2, #1
   159b8:	408a      	lsls	r2, r1
        if ((mask & advsm->adv_chanmask) == 0) {
   159ba:	78a1      	ldrb	r1, [r4, #2]
   159bc:	420a      	tst	r2, r1
   159be:	d101      	bne.n	159c4 <ble_ll_adv_done+0x50>
            ++advsm->adv_chan;
   159c0:	3301      	adds	r3, #1
   159c2:	71a3      	strb	r3, [r4, #6]
        advsm->adv_pdu_start_time = os_cputime_get32() +
   159c4:	f019 fa73 	bl	2eeae <os_cputime_get32>
   159c8:	4b2c      	ldr	r3, [pc, #176]	; (15a7c <ble_ll_adv_done+0x108>)
   159ca:	781b      	ldrb	r3, [r3, #0]
   159cc:	4418      	add	r0, r3
   159ce:	61e0      	str	r0, [r4, #28]
        resched_pdu = 1;
   159d0:	2701      	movs	r7, #1
    if ((advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_HD_DIRECTED) &&
   159d2:	89a3      	ldrh	r3, [r4, #12]
   159d4:	f013 0f08 	tst.w	r3, #8
   159d8:	d003      	beq.n	159e2 <ble_ll_adv_done+0x6e>
            (advsm->adv_pdu_start_time >= advsm->adv_end_time)) {
   159da:	69e2      	ldr	r2, [r4, #28]
   159dc:	6a23      	ldr	r3, [r4, #32]
    if ((advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_HD_DIRECTED) &&
   159de:	429a      	cmp	r2, r3
   159e0:	d240      	bcs.n	15a64 <ble_ll_adv_done+0xf0>
    ble_ll_adv_chk_rpa_timeout(advsm);
   159e2:	4620      	mov	r0, r4
   159e4:	f7ff ffb4 	bl	15950 <ble_ll_adv_chk_rpa_timeout>
    ble_ll_adv_set_sched(advsm);
   159e8:	4620      	mov	r0, r4
   159ea:	f7ff fad1 	bl	14f90 <ble_ll_adv_set_sched>
    if (!resched_pdu) {
   159ee:	2f00      	cmp	r7, #0
   159f0:	d03c      	beq.n	15a6c <ble_ll_adv_done+0xf8>
    rc = ble_ll_sched_adv_resched_pdu(&advsm->adv_sch);
   159f2:	4628      	mov	r0, r5
   159f4:	f007 fab0 	bl	1cf58 <ble_ll_sched_adv_resched_pdu>
    if (rc) {
   159f8:	2800      	cmp	r0, #0
   159fa:	d03a      	beq.n	15a72 <ble_ll_adv_done+0xfe>
        STATS_INC(ble_ll_stats, adv_resched_pdu_fail);
   159fc:	4a20      	ldr	r2, [pc, #128]	; (15a80 <ble_ll_adv_done+0x10c>)
   159fe:	6f53      	ldr	r3, [r2, #116]	; 0x74
   15a00:	3301      	adds	r3, #1
   15a02:	6753      	str	r3, [r2, #116]	; 0x74
    os_eventq_put(&evq->evq, &ev->ev);
   15a04:	4631      	mov	r1, r6
   15a06:	481c      	ldr	r0, [pc, #112]	; (15a78 <ble_ll_adv_done+0x104>)
   15a08:	f7f7 fbd1 	bl	d1ae <os_eventq_put>
   15a0c:	e031      	b.n	15a72 <ble_ll_adv_done+0xfe>
    assert(advsm->adv_enabled);
   15a0e:	f7f6 fbeb 	bl	c1e8 <hal_debugger_connected>
   15a12:	b100      	cbz	r0, 15a16 <ble_ll_adv_done+0xa2>
   15a14:	be01      	bkpt	0x0001
   15a16:	2300      	movs	r3, #0
   15a18:	461a      	mov	r2, r3
   15a1a:	4619      	mov	r1, r3
   15a1c:	4618      	mov	r0, r3
   15a1e:	f7f7 f897 	bl	cb50 <__assert_func>
        ble_ll_scan_chk_resume();
   15a22:	f006 fcc5 	bl	1c3b0 <ble_ll_scan_chk_resume>
        advsm->adv_chan = ble_ll_adv_first_chan(advsm);
   15a26:	4620      	mov	r0, r4
   15a28:	f7ff f9ca 	bl	14dc0 <ble_ll_adv_first_chan>
   15a2c:	71a0      	strb	r0, [r4, #6]
        tick_itvl = os_cputime_usecs_to_ticks(itvl);
   15a2e:	6960      	ldr	r0, [r4, #20]
   15a30:	f019 fa42 	bl	2eeb8 <os_cputime_usecs_to_ticks>
   15a34:	4680      	mov	r8, r0
        advsm->adv_event_start_time += tick_itvl;
   15a36:	69a0      	ldr	r0, [r4, #24]
   15a38:	4440      	add	r0, r8
   15a3a:	61a0      	str	r0, [r4, #24]
        advsm->adv_pdu_start_time = advsm->adv_event_start_time;
   15a3c:	61e0      	str	r0, [r4, #28]
        start_time = advsm->adv_pdu_start_time - g_ble_ll_sched_offset_ticks;
   15a3e:	4b0f      	ldr	r3, [pc, #60]	; (15a7c <ble_ll_adv_done+0x108>)
   15a40:	781f      	ldrb	r7, [r3, #0]
   15a42:	1bc7      	subs	r7, r0, r7
        delta_t = (int32_t)(start_time - os_cputime_get32());
   15a44:	f019 fa33 	bl	2eeae <os_cputime_get32>
        if (delta_t < 0) {
   15a48:	1a38      	subs	r0, r7, r0
   15a4a:	d401      	bmi.n	15a50 <ble_ll_adv_done+0xdc>
        resched_pdu = 0;
   15a4c:	2700      	movs	r7, #0
   15a4e:	e7c0      	b.n	159d2 <ble_ll_adv_done+0x5e>
            while (delta_t < 0) {
   15a50:	2800      	cmp	r0, #0
   15a52:	da05      	bge.n	15a60 <ble_ll_adv_done+0xec>
                advsm->adv_event_start_time += tick_itvl;
   15a54:	69a3      	ldr	r3, [r4, #24]
   15a56:	4443      	add	r3, r8
   15a58:	61a3      	str	r3, [r4, #24]
                advsm->adv_pdu_start_time = advsm->adv_event_start_time;
   15a5a:	61e3      	str	r3, [r4, #28]
                delta_t += (int32_t)tick_itvl;
   15a5c:	4440      	add	r0, r8
   15a5e:	e7f7      	b.n	15a50 <ble_ll_adv_done+0xdc>
        resched_pdu = 0;
   15a60:	2700      	movs	r7, #0
   15a62:	e7b6      	b.n	159d2 <ble_ll_adv_done+0x5e>
        ble_ll_adv_sm_stop_timeout(advsm);
   15a64:	4620      	mov	r0, r4
   15a66:	f7ff ff13 	bl	15890 <ble_ll_adv_sm_stop_timeout>
        return;
   15a6a:	e002      	b.n	15a72 <ble_ll_adv_done+0xfe>
        ble_ll_adv_reschedule_event(advsm);
   15a6c:	4620      	mov	r0, r4
   15a6e:	f7ff ff23 	bl	158b8 <ble_ll_adv_reschedule_event>
}
   15a72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15a76:	bf00      	nop
   15a78:	20003740 	.word	0x20003740
   15a7c:	20003c30 	.word	0x20003c30
   15a80:	200035c0 	.word	0x200035c0

00015a84 <ble_ll_adv_make_done>:
{
   15a84:	b510      	push	{r4, lr}
   15a86:	4604      	mov	r4, r0
    ble_ll_adv_active_chanset_clear(advsm);
   15a88:	f7ff fa09 	bl	14e9e <ble_ll_adv_active_chanset_clear>
    ble_ll_adv_done(advsm);
   15a8c:	4620      	mov	r0, r4
   15a8e:	f7ff ff71 	bl	15974 <ble_ll_adv_done>
}
   15a92:	bd10      	pop	{r4, pc}

00015a94 <ble_ll_adv_event_done>:
{
   15a94:	b508      	push	{r3, lr}
    ble_ll_adv_done(ble_npl_event_get_arg(ev));
   15a96:	6880      	ldr	r0, [r0, #8]
   15a98:	f7ff ff6c 	bl	15974 <ble_ll_adv_done>
}
   15a9c:	bd08      	pop	{r3, pc}
	...

00015aa0 <ble_ll_adv_rpa_timeout>:
{
   15aa0:	b510      	push	{r4, lr}
    for (i = 0; i < BLE_ADV_INSTANCES; i++) {
   15aa2:	2400      	movs	r4, #0
   15aa4:	2c00      	cmp	r4, #0
   15aa6:	dd00      	ble.n	15aaa <ble_ll_adv_rpa_timeout+0xa>
}
   15aa8:	bd10      	pop	{r4, pc}
        advsm = &g_ble_ll_adv_sm[i];
   15aaa:	01e2      	lsls	r2, r4, #7
   15aac:	4b06      	ldr	r3, [pc, #24]	; (15ac8 <ble_ll_adv_rpa_timeout+0x28>)
   15aae:	18d0      	adds	r0, r2, r3
        if (advsm->adv_enabled &&
   15ab0:	5cd3      	ldrb	r3, [r2, r3]
   15ab2:	b113      	cbz	r3, 15aba <ble_ll_adv_rpa_timeout+0x1a>
                advsm->own_addr_type > BLE_HCI_ADV_OWN_ADDR_RANDOM) {
   15ab4:	7903      	ldrb	r3, [r0, #4]
        if (advsm->adv_enabled &&
   15ab6:	2b01      	cmp	r3, #1
   15ab8:	d801      	bhi.n	15abe <ble_ll_adv_rpa_timeout+0x1e>
    for (i = 0; i < BLE_ADV_INSTANCES; i++) {
   15aba:	3401      	adds	r4, #1
   15abc:	e7f2      	b.n	15aa4 <ble_ll_adv_rpa_timeout+0x4>
            ble_ll_adv_flags_set(advsm, BLE_LL_ADV_SM_FLAG_ADV_RPA_TMO);
   15abe:	f44f 7180 	mov.w	r1, #256	; 0x100
   15ac2:	f7ff f997 	bl	14df4 <ble_ll_adv_flags_set>
   15ac6:	e7f8      	b.n	15aba <ble_ll_adv_rpa_timeout+0x1a>
   15ac8:	200037dc 	.word	0x200037dc

00015acc <ble_ll_adv_event_rmvd_from_sched>:
{
   15acc:	b510      	push	{r4, lr}
   15ace:	4604      	mov	r4, r0
    advsm->adv_chan = ble_ll_adv_final_chan(advsm);
   15ad0:	f7ff f983 	bl	14dda <ble_ll_adv_final_chan>
   15ad4:	71a0      	strb	r0, [r4, #6]
   15ad6:	f104 0154 	add.w	r1, r4, #84	; 0x54
   15ada:	4802      	ldr	r0, [pc, #8]	; (15ae4 <ble_ll_adv_event_rmvd_from_sched+0x18>)
   15adc:	f7f7 fb67 	bl	d1ae <os_eventq_put>
}
   15ae0:	bd10      	pop	{r4, pc}
   15ae2:	bf00      	nop
   15ae4:	20003740 	.word	0x20003740

00015ae8 <ble_ll_adv_halt>:
{
   15ae8:	b510      	push	{r4, lr}
    if (g_ble_ll_cur_adv_sm != NULL) {
   15aea:	4b0a      	ldr	r3, [pc, #40]	; (15b14 <ble_ll_adv_halt+0x2c>)
   15aec:	681c      	ldr	r4, [r3, #0]
   15aee:	b184      	cbz	r4, 15b12 <ble_ll_adv_halt+0x2a>
        ble_phy_txpwr_set(MYNEWT_VAL(BLE_LL_TX_PWR_DBM));
   15af0:	2000      	movs	r0, #0
   15af2:	f008 f977 	bl	1dde4 <ble_phy_txpwr_set>
   15af6:	f104 0154 	add.w	r1, r4, #84	; 0x54
   15afa:	4807      	ldr	r0, [pc, #28]	; (15b18 <ble_ll_adv_halt+0x30>)
   15afc:	f7f7 fb57 	bl	d1ae <os_eventq_put>
        ble_ll_state_set(BLE_LL_STATE_STANDBY);
   15b00:	2000      	movs	r0, #0
   15b02:	f7ff f801 	bl	14b08 <ble_ll_state_set>
        ble_ll_adv_active_chanset_clear(g_ble_ll_cur_adv_sm);
   15b06:	4c03      	ldr	r4, [pc, #12]	; (15b14 <ble_ll_adv_halt+0x2c>)
   15b08:	6820      	ldr	r0, [r4, #0]
   15b0a:	f7ff f9c8 	bl	14e9e <ble_ll_adv_active_chanset_clear>
        g_ble_ll_cur_adv_sm = NULL;
   15b0e:	2300      	movs	r3, #0
   15b10:	6023      	str	r3, [r4, #0]
}
   15b12:	bd10      	pop	{r4, pc}
   15b14:	200037d8 	.word	0x200037d8
   15b18:	20003740 	.word	0x20003740

00015b1c <ble_ll_adv_set_adv_params>:
    if (len != sizeof(*cmd)) {
   15b1c:	290f      	cmp	r1, #15
   15b1e:	d161      	bne.n	15be4 <ble_ll_adv_set_adv_params+0xc8>
   15b20:	4603      	mov	r3, r0
    if (advsm->adv_enabled) {
   15b22:	4a3e      	ldr	r2, [pc, #248]	; (15c1c <ble_ll_adv_set_adv_params+0x100>)
   15b24:	7812      	ldrb	r2, [r2, #0]
   15b26:	2a00      	cmp	r2, #0
   15b28:	d15e      	bne.n	15be8 <ble_ll_adv_set_adv_params+0xcc>
{
   15b2a:	b4f0      	push	{r4, r5, r6, r7}
    adv_itvl_min = le16toh(cmd->min_interval);
   15b2c:	8804      	ldrh	r4, [r0, #0]
    adv_itvl_max = le16toh(cmd->max_interval);
   15b2e:	8845      	ldrh	r5, [r0, #2]
    adv_filter_policy = cmd->filter_policy;
   15b30:	7b86      	ldrb	r6, [r0, #14]
    switch (cmd->type) {
   15b32:	7901      	ldrb	r1, [r0, #4]
   15b34:	2904      	cmp	r1, #4
   15b36:	d859      	bhi.n	15bec <ble_ll_adv_set_adv_params+0xd0>
   15b38:	e8df f001 	tbb	[pc, r1]
   15b3c:	1d1b0503 	.word	0x1d1b0503
   15b40:	11          	.byte	0x11
   15b41:	00          	.byte	0x00
        props = BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY_IND;
   15b42:	2213      	movs	r2, #19
   15b44:	e018      	b.n	15b78 <ble_ll_adv_set_adv_params+0x5c>
        memcpy(advsm->peer_addr, cmd->peer_addr, BLE_DEV_ADDR_LEN);
   15b46:	4619      	mov	r1, r3
   15b48:	4c35      	ldr	r4, [pc, #212]	; (15c20 <ble_ll_adv_set_adv_params+0x104>)
   15b4a:	f851 0f07 	ldr.w	r0, [r1, #7]!
   15b4e:	6020      	str	r0, [r4, #0]
   15b50:	8889      	ldrh	r1, [r1, #4]
   15b52:	80a1      	strh	r1, [r4, #4]
        adv_filter_policy = BLE_HCI_ADV_FILT_NONE;
   15b54:	4616      	mov	r6, r2
        props = BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY_HD_DIR ;
   15b56:	221d      	movs	r2, #29
        adv_itvl_max = 0;
   15b58:	2500      	movs	r5, #0
        adv_itvl_min = 0;
   15b5a:	462c      	mov	r4, r5
        break;
   15b5c:	e00c      	b.n	15b78 <ble_ll_adv_set_adv_params+0x5c>
        memcpy(advsm->peer_addr, cmd->peer_addr, BLE_DEV_ADDR_LEN);
   15b5e:	4619      	mov	r1, r3
   15b60:	4e2f      	ldr	r6, [pc, #188]	; (15c20 <ble_ll_adv_set_adv_params+0x104>)
   15b62:	f851 0f07 	ldr.w	r0, [r1, #7]!
   15b66:	6030      	str	r0, [r6, #0]
   15b68:	8889      	ldrh	r1, [r1, #4]
   15b6a:	80b1      	strh	r1, [r6, #4]
        adv_filter_policy = BLE_HCI_ADV_FILT_NONE;
   15b6c:	4616      	mov	r6, r2
        props = BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY_LD_DIR ;
   15b6e:	2215      	movs	r2, #21
        break;
   15b70:	e002      	b.n	15b78 <ble_ll_adv_set_adv_params+0x5c>
        props = BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY_SCAN;
   15b72:	2212      	movs	r2, #18
        break;
   15b74:	e000      	b.n	15b78 <ble_ll_adv_set_adv_params+0x5c>
        props = BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY_NONCONN;
   15b76:	2210      	movs	r2, #16
    if (!(props & BLE_HCI_LE_SET_EXT_ADV_PROP_HD_DIRECTED)) {
   15b78:	f012 0f08 	tst.w	r2, #8
   15b7c:	d10b      	bne.n	15b96 <ble_ll_adv_set_adv_params+0x7a>
        if ((adv_itvl_min > adv_itvl_max) ||
   15b7e:	42ac      	cmp	r4, r5
   15b80:	d836      	bhi.n	15bf0 <ble_ll_adv_set_adv_params+0xd4>
   15b82:	2c1f      	cmp	r4, #31
   15b84:	d936      	bls.n	15bf4 <ble_ll_adv_set_adv_params+0xd8>
                (adv_itvl_min < BLE_HCI_ADV_ITVL_MIN) ||
   15b86:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
   15b8a:	d835      	bhi.n	15bf8 <ble_ll_adv_set_adv_params+0xdc>
                (adv_itvl_min > BLE_HCI_ADV_ITVL_MAX) ||
   15b8c:	2d1f      	cmp	r5, #31
   15b8e:	d935      	bls.n	15bfc <ble_ll_adv_set_adv_params+0xe0>
                (adv_itvl_max < BLE_HCI_ADV_ITVL_MIN) ||
   15b90:	f5b5 4f80 	cmp.w	r5, #16384	; 0x4000
   15b94:	d834      	bhi.n	15c00 <ble_ll_adv_set_adv_params+0xe4>
    if ((cmd->own_addr_type > BLE_HCI_ADV_OWN_ADDR_MAX) ||
   15b96:	7959      	ldrb	r1, [r3, #5]
   15b98:	2903      	cmp	r1, #3
   15b9a:	d833      	bhi.n	15c04 <ble_ll_adv_set_adv_params+0xe8>
        (cmd->peer_addr_type > BLE_HCI_ADV_PEER_ADDR_MAX)) {
   15b9c:	7999      	ldrb	r1, [r3, #6]
    if ((cmd->own_addr_type > BLE_HCI_ADV_OWN_ADDR_MAX) ||
   15b9e:	2901      	cmp	r1, #1
   15ba0:	d833      	bhi.n	15c0a <ble_ll_adv_set_adv_params+0xee>
    advsm->adv_txpwr = MYNEWT_VAL(BLE_LL_TX_PWR_DBM);
   15ba2:	491e      	ldr	r1, [pc, #120]	; (15c1c <ble_ll_adv_set_adv_params+0x100>)
   15ba4:	2000      	movs	r0, #0
   15ba6:	7248      	strb	r0, [r1, #9]
    if (cmd->own_addr_type > BLE_HCI_ADV_OWN_ADDR_RANDOM) {
   15ba8:	7959      	ldrb	r1, [r3, #5]
   15baa:	2901      	cmp	r1, #1
   15bac:	d812      	bhi.n	15bd4 <ble_ll_adv_set_adv_params+0xb8>
    if (((cmd->chan_map & 0xF8) != 0) || (cmd->chan_map == 0)) {
   15bae:	7b59      	ldrb	r1, [r3, #13]
   15bb0:	f011 0ff8 	tst.w	r1, #248	; 0xf8
   15bb4:	d12b      	bne.n	15c0e <ble_ll_adv_set_adv_params+0xf2>
   15bb6:	b361      	cbz	r1, 15c12 <ble_ll_adv_set_adv_params+0xf6>
    if (adv_filter_policy > BLE_HCI_ADV_FILT_MAX) {
   15bb8:	2e03      	cmp	r6, #3
   15bba:	d82c      	bhi.n	15c16 <ble_ll_adv_set_adv_params+0xfa>
    advsm->own_addr_type = cmd->own_addr_type;
   15bbc:	795f      	ldrb	r7, [r3, #5]
   15bbe:	4817      	ldr	r0, [pc, #92]	; (15c1c <ble_ll_adv_set_adv_params+0x100>)
   15bc0:	7107      	strb	r7, [r0, #4]
    advsm->peer_addr_type = cmd->peer_addr_type;
   15bc2:	799b      	ldrb	r3, [r3, #6]
   15bc4:	7143      	strb	r3, [r0, #5]
    advsm->adv_filter_policy = adv_filter_policy;
   15bc6:	70c6      	strb	r6, [r0, #3]
    advsm->adv_chanmask = cmd->chan_map;
   15bc8:	7081      	strb	r1, [r0, #2]
    advsm->adv_itvl_min = adv_itvl_min;
   15bca:	81c4      	strh	r4, [r0, #14]
    advsm->adv_itvl_max = adv_itvl_max;
   15bcc:	8205      	strh	r5, [r0, #16]
    advsm->props = props;
   15bce:	8182      	strh	r2, [r0, #12]
    return 0;
   15bd0:	2000      	movs	r0, #0
   15bd2:	e018      	b.n	15c06 <ble_ll_adv_set_adv_params+0xea>
        memcpy(advsm->peer_addr, cmd->peer_addr, BLE_DEV_ADDR_LEN);
   15bd4:	4619      	mov	r1, r3
   15bd6:	4f12      	ldr	r7, [pc, #72]	; (15c20 <ble_ll_adv_set_adv_params+0x104>)
   15bd8:	f851 0f07 	ldr.w	r0, [r1, #7]!
   15bdc:	6038      	str	r0, [r7, #0]
   15bde:	8889      	ldrh	r1, [r1, #4]
   15be0:	80b9      	strh	r1, [r7, #4]
   15be2:	e7e4      	b.n	15bae <ble_ll_adv_set_adv_params+0x92>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   15be4:	2012      	movs	r0, #18
   15be6:	4770      	bx	lr
        return BLE_ERR_CMD_DISALLOWED;
   15be8:	200c      	movs	r0, #12
}
   15bea:	4770      	bx	lr
        return BLE_ERR_INV_HCI_CMD_PARMS;
   15bec:	2012      	movs	r0, #18
   15bee:	e00a      	b.n	15c06 <ble_ll_adv_set_adv_params+0xea>
            return BLE_ERR_INV_HCI_CMD_PARMS;
   15bf0:	2012      	movs	r0, #18
   15bf2:	e008      	b.n	15c06 <ble_ll_adv_set_adv_params+0xea>
   15bf4:	2012      	movs	r0, #18
   15bf6:	e006      	b.n	15c06 <ble_ll_adv_set_adv_params+0xea>
   15bf8:	2012      	movs	r0, #18
   15bfa:	e004      	b.n	15c06 <ble_ll_adv_set_adv_params+0xea>
   15bfc:	2012      	movs	r0, #18
   15bfe:	e002      	b.n	15c06 <ble_ll_adv_set_adv_params+0xea>
   15c00:	2012      	movs	r0, #18
   15c02:	e000      	b.n	15c06 <ble_ll_adv_set_adv_params+0xea>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   15c04:	2012      	movs	r0, #18
}
   15c06:	bcf0      	pop	{r4, r5, r6, r7}
   15c08:	4770      	bx	lr
        return BLE_ERR_INV_HCI_CMD_PARMS;
   15c0a:	2012      	movs	r0, #18
   15c0c:	e7fb      	b.n	15c06 <ble_ll_adv_set_adv_params+0xea>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   15c0e:	2012      	movs	r0, #18
   15c10:	e7f9      	b.n	15c06 <ble_ll_adv_set_adv_params+0xea>
   15c12:	2012      	movs	r0, #18
   15c14:	e7f7      	b.n	15c06 <ble_ll_adv_set_adv_params+0xea>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   15c16:	2012      	movs	r0, #18
   15c18:	e7f5      	b.n	15c06 <ble_ll_adv_set_adv_params+0xea>
   15c1a:	bf00      	nop
   15c1c:	200037dc 	.word	0x200037dc
   15c20:	20003810 	.word	0x20003810

00015c24 <ble_ll_adv_read_txpwr>:
    rsp->power_level = MYNEWT_VAL(BLE_LL_TX_PWR_DBM);
   15c24:	2300      	movs	r3, #0
   15c26:	7003      	strb	r3, [r0, #0]
    *rsplen = sizeof(*rsp);
   15c28:	2201      	movs	r2, #1
   15c2a:	700a      	strb	r2, [r1, #0]
}
   15c2c:	4618      	mov	r0, r3
   15c2e:	4770      	bx	lr

00015c30 <ble_ll_hci_adv_set_enable>:
    if (len != sizeof(*cmd)) {
   15c30:	2901      	cmp	r1, #1
   15c32:	d001      	beq.n	15c38 <ble_ll_hci_adv_set_enable+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   15c34:	2012      	movs	r0, #18
}
   15c36:	4770      	bx	lr
{
   15c38:	b508      	push	{r3, lr}
    return ble_ll_adv_set_enable(0, cmd->enable, -1, 0);
   15c3a:	2300      	movs	r3, #0
   15c3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15c40:	7801      	ldrb	r1, [r0, #0]
   15c42:	4618      	mov	r0, r3
   15c44:	f7ff fbca 	bl	153dc <ble_ll_adv_set_enable>
}
   15c48:	bd08      	pop	{r3, pc}

00015c4a <ble_ll_hci_set_scan_rsp_data>:
    if ((len != sizeof(*cmd)) || (cmd->scan_rsp_len > sizeof(cmd->scan_rsp))) {
   15c4a:	2920      	cmp	r1, #32
   15c4c:	d109      	bne.n	15c62 <ble_ll_hci_set_scan_rsp_data+0x18>
   15c4e:	7801      	ldrb	r1, [r0, #0]
   15c50:	291f      	cmp	r1, #31
   15c52:	d808      	bhi.n	15c66 <ble_ll_hci_set_scan_rsp_data+0x1c>
{
   15c54:	b508      	push	{r3, lr}
    return ble_ll_adv_set_scan_rsp_data(cmd->scan_rsp, cmd->scan_rsp_len, 0,
   15c56:	2303      	movs	r3, #3
   15c58:	2200      	movs	r2, #0
   15c5a:	3001      	adds	r0, #1
   15c5c:	f7ff fc09 	bl	15472 <ble_ll_adv_set_scan_rsp_data>
}
   15c60:	bd08      	pop	{r3, pc}
        return BLE_ERR_INV_HCI_CMD_PARMS;
   15c62:	2012      	movs	r0, #18
   15c64:	4770      	bx	lr
   15c66:	2012      	movs	r0, #18
}
   15c68:	4770      	bx	lr

00015c6a <ble_ll_hci_set_adv_data>:
    if ((len != sizeof(*cmd)) || (cmd->adv_data_len > sizeof(cmd->adv_data))) {
   15c6a:	2920      	cmp	r1, #32
   15c6c:	d109      	bne.n	15c82 <ble_ll_hci_set_adv_data+0x18>
   15c6e:	7801      	ldrb	r1, [r0, #0]
   15c70:	291f      	cmp	r1, #31
   15c72:	d808      	bhi.n	15c86 <ble_ll_hci_set_adv_data+0x1c>
{
   15c74:	b508      	push	{r3, lr}
    return ble_ll_adv_set_adv_data(cmd->adv_data, cmd->adv_data_len, 0,
   15c76:	2303      	movs	r3, #3
   15c78:	2200      	movs	r2, #0
   15c7a:	3001      	adds	r0, #1
   15c7c:	f7ff fc51 	bl	15522 <ble_ll_adv_set_adv_data>
}
   15c80:	bd08      	pop	{r3, pc}
        return BLE_ERR_INV_HCI_CMD_PARMS;
   15c82:	2012      	movs	r0, #18
   15c84:	4770      	bx	lr
   15c86:	2012      	movs	r0, #18
}
   15c88:	4770      	bx	lr
	...

00015c8c <ble_ll_adv_rx_isr_end>:
{
   15c8c:	b510      	push	{r4, lr}
    if (rxpdu == NULL) {
   15c8e:	b141      	cbz	r1, 15ca2 <ble_ll_adv_rx_isr_end+0x16>
   15c90:	460b      	mov	r3, r1
        if (crcok) {
   15c92:	b19a      	cbz	r2, 15cbc <ble_ll_adv_rx_isr_end+0x30>
            if ((pdu_type == BLE_ADV_PDU_TYPE_SCAN_REQ) ||
   15c94:	2803      	cmp	r0, #3
   15c96:	d00b      	beq.n	15cb0 <ble_ll_adv_rx_isr_end+0x24>
   15c98:	2805      	cmp	r0, #5
   15c9a:	d009      	beq.n	15cb0 <ble_ll_adv_rx_isr_end+0x24>
    rc = -1;
   15c9c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   15ca0:	e00e      	b.n	15cc0 <ble_ll_adv_rx_isr_end+0x34>
        ble_ll_adv_tx_done(g_ble_ll_cur_adv_sm);
   15ca2:	4b0c      	ldr	r3, [pc, #48]	; (15cd4 <ble_ll_adv_rx_isr_end+0x48>)
   15ca4:	6818      	ldr	r0, [r3, #0]
   15ca6:	f7ff f905 	bl	14eb4 <ble_ll_adv_tx_done>
    rc = -1;
   15caa:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   15cae:	e00b      	b.n	15cc8 <ble_ll_adv_rx_isr_end+0x3c>
                rc = ble_ll_adv_rx_req(pdu_type, rxpdu);
   15cb0:	4619      	mov	r1, r3
   15cb2:	f7ff fcc1 	bl	15638 <ble_ll_adv_rx_req>
        if (rc) {
   15cb6:	4604      	mov	r4, r0
   15cb8:	b128      	cbz	r0, 15cc6 <ble_ll_adv_rx_isr_end+0x3a>
   15cba:	e001      	b.n	15cc0 <ble_ll_adv_rx_isr_end+0x34>
    rc = -1;
   15cbc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
            g_ble_ll_cur_adv_sm = NULL;
   15cc0:	4b04      	ldr	r3, [pc, #16]	; (15cd4 <ble_ll_adv_rx_isr_end+0x48>)
   15cc2:	2200      	movs	r2, #0
   15cc4:	601a      	str	r2, [r3, #0]
    if (rc) {
   15cc6:	b114      	cbz	r4, 15cce <ble_ll_adv_rx_isr_end+0x42>
        ble_ll_state_set(BLE_LL_STATE_STANDBY);
   15cc8:	2000      	movs	r0, #0
   15cca:	f7fe ff1d 	bl	14b08 <ble_ll_state_set>
}
   15cce:	4620      	mov	r0, r4
   15cd0:	bd10      	pop	{r4, pc}
   15cd2:	bf00      	nop
   15cd4:	200037d8 	.word	0x200037d8

00015cd8 <ble_ll_adv_rx_pkt_in>:
    if (!advsm->adv_enabled) {
   15cd8:	4b0f      	ldr	r3, [pc, #60]	; (15d18 <ble_ll_adv_rx_pkt_in+0x40>)
   15cda:	781b      	ldrb	r3, [r3, #0]
   15cdc:	b1db      	cbz	r3, 15d16 <ble_ll_adv_rx_pkt_in+0x3e>
{
   15cde:	b510      	push	{r4, lr}
   15ce0:	4614      	mov	r4, r2
   15ce2:	460b      	mov	r3, r1
    if (BLE_MBUF_HDR_CRC_OK(hdr)) {
   15ce4:	8812      	ldrh	r2, [r2, #0]
   15ce6:	f012 0f80 	tst.w	r2, #128	; 0x80
   15cea:	d003      	beq.n	15cf4 <ble_ll_adv_rx_pkt_in+0x1c>
        if (ptype == BLE_ADV_PDU_TYPE_CONNECT_IND) {
   15cec:	2805      	cmp	r0, #5
   15cee:	d006      	beq.n	15cfe <ble_ll_adv_rx_pkt_in+0x26>
            if ((ptype == BLE_ADV_PDU_TYPE_SCAN_REQ) &&
   15cf0:	2803      	cmp	r0, #3
   15cf2:	d00c      	beq.n	15d0e <ble_ll_adv_rx_pkt_in+0x36>
        ble_ll_adv_make_done(advsm, hdr);
   15cf4:	4621      	mov	r1, r4
   15cf6:	4808      	ldr	r0, [pc, #32]	; (15d18 <ble_ll_adv_rx_pkt_in+0x40>)
   15cf8:	f7ff fec4 	bl	15a84 <ble_ll_adv_make_done>
}
   15cfc:	bd10      	pop	{r4, pc}
            if (ble_ll_adv_conn_req_rxd(rxbuf, hdr, advsm)) {
   15cfe:	4a06      	ldr	r2, [pc, #24]	; (15d18 <ble_ll_adv_rx_pkt_in+0x40>)
   15d00:	4621      	mov	r1, r4
   15d02:	4618      	mov	r0, r3
   15d04:	f7ff fd46 	bl	15794 <ble_ll_adv_conn_req_rxd>
   15d08:	2800      	cmp	r0, #0
   15d0a:	d0f3      	beq.n	15cf4 <ble_ll_adv_rx_pkt_in+0x1c>
   15d0c:	e7f6      	b.n	15cfc <ble_ll_adv_rx_pkt_in+0x24>
            if ((ptype == BLE_ADV_PDU_TYPE_SCAN_REQ) &&
   15d0e:	f012 0f10 	tst.w	r2, #16
   15d12:	d0ef      	beq.n	15cf4 <ble_ll_adv_rx_pkt_in+0x1c>
   15d14:	e7f2      	b.n	15cfc <ble_ll_adv_rx_pkt_in+0x24>
   15d16:	4770      	bx	lr
   15d18:	200037dc 	.word	0x200037dc

00015d1c <ble_ll_adv_rx_isr_start>:
{
   15d1c:	b508      	push	{r3, lr}
    advsm = g_ble_ll_cur_adv_sm;
   15d1e:	4b0e      	ldr	r3, [pc, #56]	; (15d58 <ble_ll_adv_rx_isr_start+0x3c>)
   15d20:	681a      	ldr	r2, [r3, #0]
    if (pdu_type == BLE_ADV_PDU_TYPE_SCAN_REQ) {
   15d22:	2803      	cmp	r0, #3
   15d24:	d00b      	beq.n	15d3e <ble_ll_adv_rx_isr_start+0x22>
        if (pdu_type == BLE_ADV_PDU_TYPE_CONNECT_IND) {
   15d26:	2805      	cmp	r0, #5
   15d28:	d10f      	bne.n	15d4a <ble_ll_adv_rx_isr_start+0x2e>
            if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_CONNECTABLE) {
   15d2a:	8993      	ldrh	r3, [r2, #12]
   15d2c:	f013 0f01 	tst.w	r3, #1
   15d30:	d00b      	beq.n	15d4a <ble_ll_adv_rx_isr_start+0x2e>
                rc = !(advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY);
   15d32:	0918      	lsrs	r0, r3, #4
   15d34:	f080 0001 	eor.w	r0, r0, #1
   15d38:	f000 0001 	and.w	r0, r0, #1
}
   15d3c:	bd08      	pop	{r3, pc}
        if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_SCANNABLE) {
   15d3e:	8993      	ldrh	r3, [r2, #12]
   15d40:	f013 0f02 	tst.w	r3, #2
   15d44:	d001      	beq.n	15d4a <ble_ll_adv_rx_isr_start+0x2e>
            rc = 1;
   15d46:	2001      	movs	r0, #1
    return rc;
   15d48:	e7f8      	b.n	15d3c <ble_ll_adv_rx_isr_start+0x20>
        ble_ll_adv_tx_done(advsm);
   15d4a:	4610      	mov	r0, r2
   15d4c:	f7ff f8b2 	bl	14eb4 <ble_ll_adv_tx_done>
   15d50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15d54:	e7f2      	b.n	15d3c <ble_ll_adv_rx_isr_start+0x20>
   15d56:	bf00      	nop
   15d58:	200037d8 	.word	0x200037d8

00015d5c <ble_ll_adv_can_chg_whitelist>:
    for (i = 0; i < BLE_ADV_INSTANCES; ++i) {
   15d5c:	2300      	movs	r3, #0
   15d5e:	2b00      	cmp	r3, #0
   15d60:	dd01      	ble.n	15d66 <ble_ll_adv_can_chg_whitelist+0xa>
    rc = 1;
   15d62:	2001      	movs	r0, #1
   15d64:	4770      	bx	lr
        if (advsm->adv_enabled &&
   15d66:	01da      	lsls	r2, r3, #7
   15d68:	4905      	ldr	r1, [pc, #20]	; (15d80 <ble_ll_adv_can_chg_whitelist+0x24>)
   15d6a:	5c8a      	ldrb	r2, [r1, r2]
   15d6c:	b11a      	cbz	r2, 15d76 <ble_ll_adv_can_chg_whitelist+0x1a>
            (advsm->adv_filter_policy != BLE_HCI_ADV_FILT_NONE)) {
   15d6e:	eb01 12c3 	add.w	r2, r1, r3, lsl #7
   15d72:	78d2      	ldrb	r2, [r2, #3]
        if (advsm->adv_enabled &&
   15d74:	b90a      	cbnz	r2, 15d7a <ble_ll_adv_can_chg_whitelist+0x1e>
    for (i = 0; i < BLE_ADV_INSTANCES; ++i) {
   15d76:	3301      	adds	r3, #1
   15d78:	e7f1      	b.n	15d5e <ble_ll_adv_can_chg_whitelist+0x2>
            rc = 0;
   15d7a:	2000      	movs	r0, #0
}
   15d7c:	4770      	bx	lr
   15d7e:	bf00      	nop
   15d80:	200037dc 	.word	0x200037dc

00015d84 <ble_ll_adv_send_conn_comp_ev>:
{
   15d84:	b508      	push	{r3, lr}
    evbuf = advsm->conn_comp_ev;
   15d86:	4b09      	ldr	r3, [pc, #36]	; (15dac <ble_ll_adv_send_conn_comp_ev+0x28>)
   15d88:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    assert(evbuf != NULL);
   15d8a:	b12a      	cbz	r2, 15d98 <ble_ll_adv_send_conn_comp_ev+0x14>
    advsm->conn_comp_ev = NULL;
   15d8c:	4b07      	ldr	r3, [pc, #28]	; (15dac <ble_ll_adv_send_conn_comp_ev+0x28>)
   15d8e:	2100      	movs	r1, #0
   15d90:	6519      	str	r1, [r3, #80]	; 0x50
    ble_ll_conn_comp_event_send(connsm, BLE_ERR_SUCCESS, evbuf, advsm);
   15d92:	f002 f9c7 	bl	18124 <ble_ll_conn_comp_event_send>
}
   15d96:	bd08      	pop	{r3, pc}
    assert(evbuf != NULL);
   15d98:	f7f6 fa26 	bl	c1e8 <hal_debugger_connected>
   15d9c:	b100      	cbz	r0, 15da0 <ble_ll_adv_send_conn_comp_ev+0x1c>
   15d9e:	be01      	bkpt	0x0001
   15da0:	2300      	movs	r3, #0
   15da2:	461a      	mov	r2, r3
   15da4:	4619      	mov	r1, r3
   15da6:	4618      	mov	r0, r3
   15da8:	f7f6 fed2 	bl	cb50 <__assert_func>
   15dac:	200037dc 	.word	0x200037dc

00015db0 <ble_ll_adv_get_local_rpa>:
{
   15db0:	b510      	push	{r4, lr}
    if (advsm->own_addr_type > BLE_HCI_ADV_OWN_ADDR_RANDOM) {
   15db2:	7903      	ldrb	r3, [r0, #4]
   15db4:	2b01      	cmp	r3, #1
   15db6:	d90e      	bls.n	15dd6 <ble_ll_adv_get_local_rpa+0x26>
        if ((advsm->flags & BLE_LL_ADV_SM_FLAG_TX_ADD) &&
   15db8:	8943      	ldrh	r3, [r0, #10]
   15dba:	f013 0f01 	tst.w	r3, #1
   15dbe:	d00c      	beq.n	15dda <ble_ll_adv_get_local_rpa+0x2a>
                                    ble_ll_is_rpa(advsm->adva, 1)) {
   15dc0:	f100 0428 	add.w	r4, r0, #40	; 0x28
   15dc4:	2101      	movs	r1, #1
   15dc6:	4620      	mov	r0, r4
   15dc8:	f7fe fcc9 	bl	1475e <ble_ll_is_rpa>
        if ((advsm->flags & BLE_LL_ADV_SM_FLAG_TX_ADD) &&
   15dcc:	b108      	cbz	r0, 15dd2 <ble_ll_adv_get_local_rpa+0x22>
}
   15dce:	4620      	mov	r0, r4
   15dd0:	bd10      	pop	{r4, pc}
    uint8_t *rpa = NULL;
   15dd2:	2400      	movs	r4, #0
   15dd4:	e7fb      	b.n	15dce <ble_ll_adv_get_local_rpa+0x1e>
   15dd6:	2400      	movs	r4, #0
   15dd8:	e7f9      	b.n	15dce <ble_ll_adv_get_local_rpa+0x1e>
   15dda:	2400      	movs	r4, #0
    return rpa;
   15ddc:	e7f7      	b.n	15dce <ble_ll_adv_get_local_rpa+0x1e>

00015dde <ble_ll_adv_get_peer_rpa>:
}
   15dde:	302e      	adds	r0, #46	; 0x2e
   15de0:	4770      	bx	lr
	...

00015de4 <ble_ll_adv_wfr_timer_exp>:
{
   15de4:	b508      	push	{r3, lr}
    ble_phy_disable();
   15de6:	f008 f837 	bl	1de58 <ble_phy_disable>
    ble_ll_adv_tx_done(g_ble_ll_cur_adv_sm);
   15dea:	4b02      	ldr	r3, [pc, #8]	; (15df4 <ble_ll_adv_wfr_timer_exp+0x10>)
   15dec:	6818      	ldr	r0, [r3, #0]
   15dee:	f7ff f861 	bl	14eb4 <ble_ll_adv_tx_done>
}
   15df2:	bd08      	pop	{r3, pc}
   15df4:	200037d8 	.word	0x200037d8

00015df8 <ble_ll_adv_reset>:
{
   15df8:	b538      	push	{r3, r4, r5, lr}
    for (i = 0; i < BLE_ADV_INSTANCES; ++i) {
   15dfa:	2500      	movs	r5, #0
   15dfc:	2d00      	cmp	r5, #0
   15dfe:	dd00      	ble.n	15e02 <ble_ll_adv_reset+0xa>
}
   15e00:	bd38      	pop	{r3, r4, r5, pc}
        advsm = &g_ble_ll_adv_sm[i];
   15e02:	4c08      	ldr	r4, [pc, #32]	; (15e24 <ble_ll_adv_reset+0x2c>)
   15e04:	eb04 14c5 	add.w	r4, r4, r5, lsl #7
        ble_ll_adv_sm_stop(advsm);
   15e08:	4620      	mov	r0, r4
   15e0a:	f7ff faaf 	bl	1536c <ble_ll_adv_sm_stop>
        os_mbuf_free_chain(advsm->adv_data);
   15e0e:	6c20      	ldr	r0, [r4, #64]	; 0x40
   15e10:	f7f7 fb06 	bl	d420 <os_mbuf_free_chain>
        os_mbuf_free_chain(advsm->scan_rsp_data);
   15e14:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   15e16:	f7f7 fb03 	bl	d420 <os_mbuf_free_chain>
        ble_ll_adv_sm_init(advsm);
   15e1a:	4620      	mov	r0, r4
   15e1c:	f7ff fd7e 	bl	1591c <ble_ll_adv_sm_init>
    for (i = 0; i < BLE_ADV_INSTANCES; ++i) {
   15e20:	3501      	adds	r5, #1
   15e22:	e7eb      	b.n	15dfc <ble_ll_adv_reset+0x4>
   15e24:	200037dc 	.word	0x200037dc

00015e28 <ble_ll_adv_enabled>:
    for (i = 0; i < BLE_ADV_INSTANCES; i++) {
   15e28:	2300      	movs	r3, #0
   15e2a:	2b00      	cmp	r3, #0
   15e2c:	dd01      	ble.n	15e32 <ble_ll_adv_enabled+0xa>
    return 0;
   15e2e:	2000      	movs	r0, #0
   15e30:	4770      	bx	lr
        if (g_ble_ll_adv_sm[i].adv_enabled) {
   15e32:	01da      	lsls	r2, r3, #7
   15e34:	4903      	ldr	r1, [pc, #12]	; (15e44 <ble_ll_adv_enabled+0x1c>)
   15e36:	5c8a      	ldrb	r2, [r1, r2]
   15e38:	b90a      	cbnz	r2, 15e3e <ble_ll_adv_enabled+0x16>
    for (i = 0; i < BLE_ADV_INSTANCES; i++) {
   15e3a:	3301      	adds	r3, #1
   15e3c:	e7f5      	b.n	15e2a <ble_ll_adv_enabled+0x2>
            return 1;
   15e3e:	2001      	movs	r0, #1
}
   15e40:	4770      	bx	lr
   15e42:	bf00      	nop
   15e44:	200037dc 	.word	0x200037dc

00015e48 <ble_ll_adv_init>:
 * Initialize the advertising functionality of a BLE device. This should
 * be called once on initialization
 */
void
ble_ll_adv_init(void)
{
   15e48:	b510      	push	{r4, lr}
    int i;

    /* Set default advertising parameters */
    for (i = 0; i < BLE_ADV_INSTANCES; ++i) {
   15e4a:	2400      	movs	r4, #0
   15e4c:	2c00      	cmp	r4, #0
   15e4e:	dd00      	ble.n	15e52 <ble_ll_adv_init+0xa>
        ble_ll_adv_sm_init(&g_ble_ll_adv_sm[i]);
    }
}
   15e50:	bd10      	pop	{r4, pc}
        ble_ll_adv_sm_init(&g_ble_ll_adv_sm[i]);
   15e52:	4803      	ldr	r0, [pc, #12]	; (15e60 <ble_ll_adv_init+0x18>)
   15e54:	eb00 10c4 	add.w	r0, r0, r4, lsl #7
   15e58:	f7ff fd60 	bl	1591c <ble_ll_adv_sm_init>
    for (i = 0; i < BLE_ADV_INSTANCES; ++i) {
   15e5c:	3401      	adds	r4, #1
   15e5e:	e7f5      	b.n	15e4c <ble_ll_adv_init+0x4>
   15e60:	200037dc 	.word	0x200037dc

00015e64 <ble_ll_conn_is_empty_pdu>:
ble_ll_conn_is_empty_pdu(uint8_t *rxbuf)
{
    int rc;
    uint8_t llid;

    llid = rxbuf[0] & BLE_LL_DATA_HDR_LLID_MASK;
   15e64:	7803      	ldrb	r3, [r0, #0]
   15e66:	f003 0303 	and.w	r3, r3, #3
    if ((llid == BLE_LL_LLID_DATA_FRAG) && (rxbuf[1] == 0)) {
   15e6a:	2b01      	cmp	r3, #1
   15e6c:	d001      	beq.n	15e72 <ble_ll_conn_is_empty_pdu+0xe>
        rc = 1;
    } else {
        rc = 0;
   15e6e:	2000      	movs	r0, #0
   15e70:	4770      	bx	lr
    if ((llid == BLE_LL_LLID_DATA_FRAG) && (rxbuf[1] == 0)) {
   15e72:	7843      	ldrb	r3, [r0, #1]
   15e74:	b10b      	cbz	r3, 15e7a <ble_ll_conn_is_empty_pdu+0x16>
        rc = 0;
   15e76:	2000      	movs	r0, #0
   15e78:	4770      	bx	lr
        rc = 1;
   15e7a:	2001      	movs	r0, #1
    }
    return rc;
}
   15e7c:	4770      	bx	lr

00015e7e <ble_ll_conn_calc_dci_csa1>:
    return connsm;
}

static uint8_t
ble_ll_conn_calc_dci_csa1(struct ble_ll_conn_sm *conn)
{
   15e7e:	b508      	push	{r3, lr}
   15e80:	4601      	mov	r1, r0
    uint8_t curchan;
    uint8_t remap_index;
    uint8_t bitpos;

    /* Get next unmapped channel */
    curchan = conn->last_unmapped_chan + conn->hop_inc;
   15e82:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
   15e86:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
   15e8a:	4403      	add	r3, r0
   15e8c:	b2d8      	uxtb	r0, r3
    if (curchan > BLE_PHY_NUM_DATA_CHANS) {
   15e8e:	2825      	cmp	r0, #37	; 0x25
   15e90:	d902      	bls.n	15e98 <ble_ll_conn_calc_dci_csa1+0x1a>
        curchan -= BLE_PHY_NUM_DATA_CHANS;
   15e92:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
   15e96:	b2d8      	uxtb	r0, r3
    }

    /* Save unmapped channel */
    conn->last_unmapped_chan = curchan;
   15e98:	f881 0030 	strb.w	r0, [r1, #48]	; 0x30

    /* Is this a valid channel? */
    bitpos = 1 << (curchan & 0x07);
   15e9c:	f000 0207 	and.w	r2, r0, #7
   15ea0:	2301      	movs	r3, #1
   15ea2:	4093      	lsls	r3, r2
    if (conn->chanmap[curchan >> 3] & bitpos) {
   15ea4:	f3c0 02c7 	ubfx	r2, r0, #3, #8
   15ea8:	440a      	add	r2, r1
   15eaa:	f892 2020 	ldrb.w	r2, [r2, #32]
   15eae:	4213      	tst	r3, r2
   15eb0:	d000      	beq.n	15eb4 <ble_ll_conn_calc_dci_csa1+0x36>

    /* Calculate remap index */
    remap_index = curchan % conn->num_used_chans;

    return ble_ll_utils_remapped_channel(remap_index, conn->chanmap);
}
   15eb2:	bd08      	pop	{r3, pc}
    remap_index = curchan % conn->num_used_chans;
   15eb4:	f891 2031 	ldrb.w	r2, [r1, #49]	; 0x31
   15eb8:	fbb0 f3f2 	udiv	r3, r0, r2
   15ebc:	fb02 0013 	mls	r0, r2, r3, r0
    return ble_ll_utils_remapped_channel(remap_index, conn->chanmap);
   15ec0:	3120      	adds	r1, #32
   15ec2:	b2c0      	uxtb	r0, r0
   15ec4:	f007 f946 	bl	1d154 <ble_ll_utils_remapped_channel>
   15ec8:	e7f3      	b.n	15eb2 <ble_ll_conn_calc_dci_csa1+0x34>
	...

00015ecc <ble_ll_conn_halt>:
{
   15ecc:	b508      	push	{r3, lr}
    ble_phy_disable();
   15ece:	f007 ffc3 	bl	1de58 <ble_phy_disable>
    ble_ll_state_set(BLE_LL_STATE_STANDBY);
   15ed2:	2000      	movs	r0, #0
   15ed4:	f7fe fe18 	bl	14b08 <ble_ll_state_set>
    g_ble_ll_conn_cur_sm = NULL;
   15ed8:	4b01      	ldr	r3, [pc, #4]	; (15ee0 <ble_ll_conn_halt+0x14>)
   15eda:	2200      	movs	r2, #0
   15edc:	601a      	str	r2, [r3, #0]
}
   15ede:	bd08      	pop	{r3, pc}
   15ee0:	20003878 	.word	0x20003878

00015ee4 <ble_ll_conn_current_sm_over>:
{
   15ee4:	b510      	push	{r4, lr}
   15ee6:	4604      	mov	r4, r0
    ble_ll_conn_halt();
   15ee8:	f7ff fff0 	bl	15ecc <ble_ll_conn_halt>
    if (connsm) {
   15eec:	b11c      	cbz	r4, 15ef6 <ble_ll_conn_current_sm_over+0x12>
        ble_ll_event_send(&connsm->conn_ev_end);
   15eee:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   15ef2:	f7fe fe15 	bl	14b20 <ble_ll_event_send>
}
   15ef6:	bd10      	pop	{r4, pc}

00015ef8 <ble_ll_conn_rxend_unencrypt>:
    ble_ll_conn_current_sm_over(connsm);
}

static void
ble_ll_conn_rxend_unencrypt(void *arg)
{
   15ef8:	b508      	push	{r3, lr}
    struct ble_ll_conn_sm *connsm;

    connsm = (struct ble_ll_conn_sm *)arg;
    CONN_F_ENCRYPTED(connsm) = 0;
   15efa:	7882      	ldrb	r2, [r0, #2]
   15efc:	f36f 0241 	bfc	r2, #1, #1
   15f00:	7082      	strb	r2, [r0, #2]
    ble_ll_conn_current_sm_over(connsm);
   15f02:	f7ff ffef 	bl	15ee4 <ble_ll_conn_current_sm_over>
}
   15f06:	bd08      	pop	{r3, pc}

00015f08 <ble_ll_conn_txend_encrypt>:
{
   15f08:	b508      	push	{r3, lr}
    CONN_F_ENCRYPTED(connsm) = 1;
   15f0a:	7883      	ldrb	r3, [r0, #2]
   15f0c:	f043 0302 	orr.w	r3, r3, #2
   15f10:	7083      	strb	r3, [r0, #2]
    ble_ll_conn_current_sm_over(connsm);
   15f12:	f7ff ffe7 	bl	15ee4 <ble_ll_conn_current_sm_over>
}
   15f16:	bd08      	pop	{r3, pc}

00015f18 <ble_ll_conn_wait_txend>:
{
   15f18:	b508      	push	{r3, lr}
    ble_ll_conn_current_sm_over(connsm);
   15f1a:	f7ff ffe3 	bl	15ee4 <ble_ll_conn_current_sm_over>
}
   15f1e:	bd08      	pop	{r3, pc}

00015f20 <ble_ll_conn_connect_ind_txend_to_init>:
    ble_ll_state_set(BLE_LL_STATE_STANDBY);
}

static void
ble_ll_conn_connect_ind_txend_to_init(void *arg)
{
   15f20:	b508      	push	{r3, lr}
    ble_ll_state_set(BLE_LL_STATE_INITIATING);
   15f22:	2003      	movs	r0, #3
   15f24:	f7fe fdf0 	bl	14b08 <ble_ll_state_set>
}
   15f28:	bd08      	pop	{r3, pc}

00015f2a <ble_ll_conn_connect_ind_txend_to_standby>:
{
   15f2a:	b508      	push	{r3, lr}
    ble_ll_state_set(BLE_LL_STATE_STANDBY);
   15f2c:	2000      	movs	r0, #0
   15f2e:	f7fe fdeb 	bl	14b08 <ble_ll_state_set>
}
   15f32:	bd08      	pop	{r3, pc}

00015f34 <ble_ll_init_get_conn_comp_ev>:
{
   15f34:	b508      	push	{r3, lr}
    evbuf = g_ble_ll_conn_comp_ev;
   15f36:	4b08      	ldr	r3, [pc, #32]	; (15f58 <ble_ll_init_get_conn_comp_ev+0x24>)
   15f38:	6818      	ldr	r0, [r3, #0]
    BLE_LL_ASSERT(evbuf != NULL);
   15f3a:	b118      	cbz	r0, 15f44 <ble_ll_init_get_conn_comp_ev+0x10>
    g_ble_ll_conn_comp_ev = NULL;
   15f3c:	4b06      	ldr	r3, [pc, #24]	; (15f58 <ble_ll_init_get_conn_comp_ev+0x24>)
   15f3e:	2200      	movs	r2, #0
   15f40:	601a      	str	r2, [r3, #0]
}
   15f42:	bd08      	pop	{r3, pc}
    BLE_LL_ASSERT(evbuf != NULL);
   15f44:	f7f6 f950 	bl	c1e8 <hal_debugger_connected>
   15f48:	b100      	cbz	r0, 15f4c <ble_ll_init_get_conn_comp_ev+0x18>
   15f4a:	be01      	bkpt	0x0001
   15f4c:	2300      	movs	r3, #0
   15f4e:	461a      	mov	r2, r3
   15f50:	4619      	mov	r1, r3
   15f52:	4618      	mov	r0, r3
   15f54:	f7f6 fdfc 	bl	cb50 <__assert_func>
   15f58:	2000387c 	.word	0x2000387c

00015f5c <ble_ll_conn_start_rx_encrypt>:
{
   15f5c:	b500      	push	{lr}
   15f5e:	b083      	sub	sp, #12
   15f60:	4602      	mov	r2, r0
    CONN_F_ENCRYPTED(connsm) = 1;
   15f62:	7883      	ldrb	r3, [r0, #2]
   15f64:	f043 0302 	orr.w	r3, r3, #2
   15f68:	7083      	strb	r3, [r0, #2]
    ble_phy_encrypt_enable(connsm->enc_data.rx_pkt_cntr,
   15f6a:	f8d0 0120 	ldr.w	r0, [r0, #288]	; 0x120
                           !CONN_IS_MASTER(connsm));
   15f6e:	79d3      	ldrb	r3, [r2, #7]
    ble_phy_encrypt_enable(connsm->enc_data.rx_pkt_cntr,
   15f70:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
   15f74:	bf18      	it	ne
   15f76:	2301      	movne	r3, #1
   15f78:	9300      	str	r3, [sp, #0]
   15f7a:	f502 73ac 	add.w	r3, r2, #344	; 0x158
   15f7e:	f502 7298 	add.w	r2, r2, #304	; 0x130
   15f82:	2100      	movs	r1, #0
   15f84:	f007 feba 	bl	1dcfc <ble_phy_encrypt_enable>
}
   15f88:	b003      	add	sp, #12
   15f8a:	f85d fb04 	ldr.w	pc, [sp], #4

00015f8e <ble_ll_conn_start_rx_unencrypt>:
{
   15f8e:	b508      	push	{r3, lr}
    CONN_F_ENCRYPTED(connsm) = 0;
   15f90:	7883      	ldrb	r3, [r0, #2]
   15f92:	f36f 0341 	bfc	r3, #1, #1
   15f96:	7083      	strb	r3, [r0, #2]
    ble_phy_encrypt_disable();
   15f98:	f007 fee0 	bl	1dd5c <ble_phy_encrypt_disable>
}
   15f9c:	bd08      	pop	{r3, pc}

00015f9e <ble_ll_conn_continue_rx_encrypt>:
{
   15f9e:	b508      	push	{r3, lr}
                                 !CONN_IS_MASTER(connsm));
   15fa0:	79c2      	ldrb	r2, [r0, #7]
    ble_phy_encrypt_set_pkt_cntr(connsm->enc_data.rx_pkt_cntr,
   15fa2:	f112 32ff 	adds.w	r2, r2, #4294967295	; 0xffffffff
   15fa6:	bf18      	it	ne
   15fa8:	2201      	movne	r2, #1
   15faa:	f8d0 0120 	ldr.w	r0, [r0, #288]	; 0x120
   15fae:	2100      	movs	r1, #0
   15fb0:	f007 fecc 	bl	1dd4c <ble_phy_encrypt_set_pkt_cntr>
}
   15fb4:	bd08      	pop	{r3, pc}

00015fb6 <ble_ll_conn_adjust_pyld_len>:
{
   15fb6:	b538      	push	{r3, r4, r5, lr}
   15fb8:	4604      	mov	r4, r0
   15fba:	460d      	mov	r5, r1
    phy_max_tx_octets = ble_ll_pdu_max_tx_octets_get(connsm->eff_max_tx_time,
   15fbc:	2101      	movs	r1, #1
   15fbe:	8b00      	ldrh	r0, [r0, #24]
   15fc0:	f7fe fe04 	bl	14bcc <ble_ll_pdu_max_tx_octets_get>
    if (ret > connsm->eff_max_tx_octets) {
   15fc4:	7ba3      	ldrb	r3, [r4, #14]
   15fc6:	42ab      	cmp	r3, r5
   15fc8:	d300      	bcc.n	15fcc <ble_ll_conn_adjust_pyld_len+0x16>
    ret = pyld_len;
   15fca:	462b      	mov	r3, r5
    if (ret > phy_max_tx_octets) {
   15fcc:	4283      	cmp	r3, r0
   15fce:	d900      	bls.n	15fd2 <ble_ll_conn_adjust_pyld_len+0x1c>
}
   15fd0:	bd38      	pop	{r3, r4, r5, pc}
    if (ret > phy_max_tx_octets) {
   15fd2:	4618      	mov	r0, r3
   15fd4:	e7fc      	b.n	15fd0 <ble_ll_conn_adjust_pyld_len+0x1a>

00015fd6 <ble_ll_update_max_tx_octets_phy_mode>:
{
   15fd6:	b538      	push	{r3, r4, r5, lr}
   15fd8:	4604      	mov	r4, r0
    usecs = connsm->eff_max_tx_time;
   15fda:	8b05      	ldrh	r5, [r0, #24]
            ble_ll_pdu_max_tx_octets_get(usecs, BLE_PHY_MODE_1M);
   15fdc:	2101      	movs	r1, #1
   15fde:	4628      	mov	r0, r5
   15fe0:	f7fe fdf4 	bl	14bcc <ble_ll_pdu_max_tx_octets_get>
    connsm->max_tx_octets_phy_mode[BLE_PHY_MODE_1M] =
   15fe4:	7760      	strb	r0, [r4, #29]
            ble_ll_pdu_max_tx_octets_get(usecs, BLE_PHY_MODE_2M);
   15fe6:	2102      	movs	r1, #2
   15fe8:	4628      	mov	r0, r5
   15fea:	f7fe fdef 	bl	14bcc <ble_ll_pdu_max_tx_octets_get>
    connsm->max_tx_octets_phy_mode[BLE_PHY_MODE_2M] =
   15fee:	77a0      	strb	r0, [r4, #30]
            ble_ll_pdu_max_tx_octets_get(usecs, BLE_PHY_MODE_CODED_125KBPS);
   15ff0:	2103      	movs	r1, #3
   15ff2:	4628      	mov	r0, r5
   15ff4:	f7fe fdea 	bl	14bcc <ble_ll_pdu_max_tx_octets_get>
    connsm->max_tx_octets_phy_mode[BLE_PHY_MODE_CODED_125KBPS] =
   15ff8:	77e0      	strb	r0, [r4, #31]
            ble_ll_pdu_max_tx_octets_get(usecs, BLE_PHY_MODE_CODED_500KBPS);
   15ffa:	2100      	movs	r1, #0
   15ffc:	4628      	mov	r0, r5
   15ffe:	f7fe fde5 	bl	14bcc <ble_ll_pdu_max_tx_octets_get>
    connsm->max_tx_octets_phy_mode[BLE_PHY_MODE_CODED_500KBPS] =
   16002:	7720      	strb	r0, [r4, #28]
}
   16004:	bd38      	pop	{r3, r4, r5, pc}
	...

00016008 <ble_ll_conn_get_next_sched_time>:
{
   16008:	b510      	push	{r4, lr}
   1600a:	b082      	sub	sp, #8
    ce_end = connsm->anchor_point + connsm->conn_itvl_ticks -
   1600c:	6f44      	ldr	r4, [r0, #116]	; 0x74
   1600e:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
   16010:	441c      	add	r4, r3
   16012:	4b0c      	ldr	r3, [pc, #48]	; (16044 <ble_ll_conn_get_next_sched_time+0x3c>)
   16014:	781b      	ldrb	r3, [r3, #0]
   16016:	1ae4      	subs	r4, r4, r3
    if ((connsm->anchor_point_usecs + connsm->conn_itvl_usecs) >= 31) {
   16018:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
   1601c:	f890 2079 	ldrb.w	r2, [r0, #121]	; 0x79
   16020:	4413      	add	r3, r2
   16022:	2b1e      	cmp	r3, #30
   16024:	dd00      	ble.n	16028 <ble_ll_conn_get_next_sched_time+0x20>
        ++ce_end;
   16026:	3401      	adds	r4, #1
    if (ble_ll_sched_next_time(&next_sched_time)) {
   16028:	a801      	add	r0, sp, #4
   1602a:	f007 f80b 	bl	1d044 <ble_ll_sched_next_time>
   1602e:	b118      	cbz	r0, 16038 <ble_ll_conn_get_next_sched_time+0x30>
        if (CPUTIME_LT(next_sched_time, ce_end)) {
   16030:	9b01      	ldr	r3, [sp, #4]
   16032:	1b1a      	subs	r2, r3, r4
   16034:	2a00      	cmp	r2, #0
   16036:	db02      	blt.n	1603e <ble_ll_conn_get_next_sched_time+0x36>
}
   16038:	4620      	mov	r0, r4
   1603a:	b002      	add	sp, #8
   1603c:	bd10      	pop	{r4, pc}
            ce_end = next_sched_time;
   1603e:	461c      	mov	r4, r3
    return ce_end;
   16040:	e7fa      	b.n	16038 <ble_ll_conn_get_next_sched_time+0x30>
   16042:	bf00      	nop
   16044:	20003c30 	.word	0x20003c30

00016048 <ble_ll_conn_tx_pdu>:
{
   16048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1604c:	b08f      	sub	sp, #60	; 0x3c
   1604e:	4604      	mov	r4, r0
    if (connsm->csmflags.cfbit.terminate_ind_rxd) {
   16050:	7803      	ldrb	r3, [r0, #0]
   16052:	f013 0f04 	tst.w	r3, #4
   16056:	d036      	beq.n	160c6 <ble_ll_conn_tx_pdu+0x7e>
        CONN_F_EMPTY_PDU_TXD(connsm) = 1;
   16058:	7843      	ldrb	r3, [r0, #1]
   1605a:	f043 0320 	orr.w	r3, r3, #32
   1605e:	7043      	strb	r3, [r0, #1]
    ble_hdr = NULL;
   16060:	2700      	movs	r7, #0
    m = NULL;
   16062:	463e      	mov	r6, r7
    hdr_byte = BLE_LL_LLID_DATA_FRAG;
   16064:	2501      	movs	r5, #1
    md = 0;
   16066:	46b9      	mov	r9, r7
    if (CONN_F_EMPTY_PDU_TXD(connsm)) {
   16068:	7863      	ldrb	r3, [r4, #1]
   1606a:	f013 0f20 	tst.w	r3, #32
   1606e:	d00a      	beq.n	16086 <ble_ll_conn_tx_pdu+0x3e>
        m->om_data += BLE_MBUF_MEMBLOCK_OVERHEAD;
   16070:	ab0e      	add	r3, sp, #56	; 0x38
   16072:	9304      	str	r3, [sp, #16]
        ble_hdr->txinfo.flags = 0;
   16074:	2300      	movs	r3, #0
   16076:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
        ble_hdr->txinfo.offset = 0;
   1607a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
        ble_hdr->txinfo.pyld_len = 0;
   1607e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
        ble_hdr = &empty_pdu.ble_hdr;
   16082:	af0a      	add	r7, sp, #40	; 0x28
        m = (struct os_mbuf *)&empty_pdu;
   16084:	ae04      	add	r6, sp, #16
    if (connsm->tx_seqnum) {
   16086:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
   1608a:	b10b      	cbz	r3, 16090 <ble_ll_conn_tx_pdu+0x48>
        hdr_byte |= BLE_LL_DATA_HDR_SN_MASK;
   1608c:	f045 0508 	orr.w	r5, r5, #8
    if (md) {
   16090:	f1b9 0f00 	cmp.w	r9, #0
   16094:	d001      	beq.n	1609a <ble_ll_conn_tx_pdu+0x52>
        hdr_byte |= BLE_LL_DATA_HDR_MD_MASK;
   16096:	f045 0510 	orr.w	r5, r5, #16
    if (connsm->next_exp_seqnum) {
   1609a:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
   1609e:	b10b      	cbz	r3, 160a4 <ble_ll_conn_tx_pdu+0x5c>
        hdr_byte |= BLE_LL_DATA_HDR_NESN_MASK;
   160a0:	f045 0504 	orr.w	r5, r5, #4
    ble_hdr->txinfo.hdr_byte = hdr_byte;
   160a4:	70fd      	strb	r5, [r7, #3]
    if ((connsm->csmflags.cfbit.terminate_ind_rxd) ||
   160a6:	7823      	ldrb	r3, [r4, #0]
   160a8:	f013 0f04 	tst.w	r3, #4
   160ac:	f040 8129 	bne.w	16302 <ble_ll_conn_tx_pdu+0x2ba>
        ((connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) && (md == 0) &&
   160b0:	f894 8007 	ldrb.w	r8, [r4, #7]
    if ((connsm->csmflags.cfbit.terminate_ind_rxd) ||
   160b4:	f1b8 0f02 	cmp.w	r8, #2
   160b8:	f000 8109 	beq.w	162ce <ble_ll_conn_tx_pdu+0x286>
        txend_func = NULL;
   160bc:	f04f 0a00 	mov.w	sl, #0
        end_transition = BLE_PHY_TRANSITION_TX_RX;
   160c0:	f04f 0802 	mov.w	r8, #2
   160c4:	e121      	b.n	1630a <ble_ll_conn_tx_pdu+0x2c2>
    pkthdr = STAILQ_FIRST(&connsm->conn_txq);
   160c6:	f8d0 a0b0 	ldr.w	sl, [r0, #176]	; 0xb0
    if (!connsm->cur_tx_pdu && !CONN_F_EMPTY_PDU_TXD(connsm) && !pkthdr) {
   160ca:	f8d0 60ac 	ldr.w	r6, [r0, #172]	; 0xac
   160ce:	b336      	cbz	r6, 1611e <ble_ll_conn_tx_pdu+0xd6>
    if (!connsm->cur_tx_pdu && !CONN_F_EMPTY_PDU_TXD(connsm)) {
   160d0:	b39e      	cbz	r6, 1613a <ble_ll_conn_tx_pdu+0xf2>
        if (connsm->cur_tx_pdu) {
   160d2:	2e00      	cmp	r6, #0
   160d4:	f000 8091 	beq.w	161fa <ble_ll_conn_tx_pdu+0x1b2>
            ble_hdr = BLE_MBUF_HDR_PTR(m);
   160d8:	f106 0718 	add.w	r7, r6, #24
            pktlen = OS_MBUF_PKTLEN(m);
   160dc:	f8b6 8010 	ldrh.w	r8, [r6, #16]
            cur_txlen = ble_hdr->txinfo.pyld_len;
   160e0:	f896 b01a 	ldrb.w	fp, [r6, #26]
            cur_offset = ble_hdr->txinfo.offset;
   160e4:	f896 9019 	ldrb.w	r9, [r6, #25]
            if (cur_offset == 0) {
   160e8:	f1b9 0f00 	cmp.w	r9, #0
   160ec:	d17b      	bne.n	161e6 <ble_ll_conn_tx_pdu+0x19e>
                hdr_byte = ble_hdr->txinfo.hdr_byte & BLE_LL_DATA_HDR_LLID_MASK;
   160ee:	7ef5      	ldrb	r5, [r6, #27]
   160f0:	f005 0503 	and.w	r5, r5, #3
            if (connsm->enc_data.enc_state > CONN_ENC_S_ENCRYPTED) {
   160f4:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
   160f8:	2b02      	cmp	r3, #2
   160fa:	f240 8095 	bls.w	16228 <ble_ll_conn_tx_pdu+0x1e0>
                if (nextpkthdr && !ble_ll_ctrl_enc_allowed_pdu_tx(nextpkthdr)
   160fe:	f1ba 0f00 	cmp.w	sl, #0
   16102:	f000 8091 	beq.w	16228 <ble_ll_conn_tx_pdu+0x1e0>
   16106:	4650      	mov	r0, sl
   16108:	f003 f912 	bl	19330 <ble_ll_ctrl_enc_allowed_pdu_tx>
   1610c:	2800      	cmp	r0, #0
   1610e:	f040 808b 	bne.w	16228 <ble_ll_conn_tx_pdu+0x1e0>
                    && ((connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) ||
   16112:	79e3      	ldrb	r3, [r4, #7]
   16114:	2b01      	cmp	r3, #1
   16116:	d168      	bne.n	161ea <ble_ll_conn_tx_pdu+0x1a2>
                    nextpkthdr = NULL;
   16118:	f04f 0a00 	mov.w	sl, #0
   1611c:	e084      	b.n	16228 <ble_ll_conn_tx_pdu+0x1e0>
    if (!connsm->cur_tx_pdu && !CONN_F_EMPTY_PDU_TXD(connsm) && !pkthdr) {
   1611e:	7843      	ldrb	r3, [r0, #1]
   16120:	f013 0f20 	tst.w	r3, #32
   16124:	d1d4      	bne.n	160d0 <ble_ll_conn_tx_pdu+0x88>
   16126:	f1ba 0f00 	cmp.w	sl, #0
   1612a:	d1d1      	bne.n	160d0 <ble_ll_conn_tx_pdu+0x88>
        CONN_F_EMPTY_PDU_TXD(connsm) = 1;
   1612c:	f043 0320 	orr.w	r3, r3, #32
   16130:	7043      	strb	r3, [r0, #1]
    ble_hdr = NULL;
   16132:	2700      	movs	r7, #0
    hdr_byte = BLE_LL_LLID_DATA_FRAG;
   16134:	2501      	movs	r5, #1
    md = 0;
   16136:	46b9      	mov	r9, r7
        goto conn_tx_pdu;
   16138:	e796      	b.n	16068 <ble_ll_conn_tx_pdu+0x20>
    if (!connsm->cur_tx_pdu && !CONN_F_EMPTY_PDU_TXD(connsm)) {
   1613a:	7863      	ldrb	r3, [r4, #1]
   1613c:	f013 0f20 	tst.w	r3, #32
   16140:	d1c7      	bne.n	160d2 <ble_ll_conn_tx_pdu+0x8a>
        m = OS_MBUF_PKTHDR_TO_MBUF(pkthdr);
   16142:	f1aa 0610 	sub.w	r6, sl, #16
        nextpkthdr = STAILQ_NEXT(pkthdr, omp_next);
   16146:	f8da 9004 	ldr.w	r9, [sl, #4]
        if (connsm->enc_data.enc_state > CONN_ENC_S_ENCRYPTED) {
   1614a:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
   1614e:	2b02      	cmp	r3, #2
   16150:	d81b      	bhi.n	1618a <ble_ll_conn_tx_pdu+0x142>
        STAILQ_REMOVE_HEAD(&connsm->conn_txq, omp_next);
   16152:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   16156:	685b      	ldr	r3, [r3, #4]
   16158:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
   1615c:	b3bb      	cbz	r3, 161ce <ble_ll_conn_tx_pdu+0x186>
        ble_hdr = BLE_MBUF_HDR_PTR(m);
   1615e:	f10a 0708 	add.w	r7, sl, #8
        llid = ble_hdr->txinfo.hdr_byte & BLE_LL_DATA_HDR_LLID_MASK;
   16162:	f89a 300b 	ldrb.w	r3, [sl, #11]
   16166:	f003 0303 	and.w	r3, r3, #3
        pktlen = pkthdr->omp_len;
   1616a:	f8ba 8000 	ldrh.w	r8, [sl]
        if (llid == BLE_LL_LLID_CTRL) {
   1616e:	2b03      	cmp	r3, #3
   16170:	d132      	bne.n	161d8 <ble_ll_conn_tx_pdu+0x190>
            cur_txlen = pktlen;
   16172:	fa5f fb88 	uxtb.w	fp, r8
        ble_hdr->txinfo.pyld_len = cur_txlen;
   16176:	f88a b00a 	strb.w	fp, [sl, #10]
        hdr_byte = ble_hdr->txinfo.hdr_byte;
   1617a:	f89a 500b 	ldrb.w	r5, [sl, #11]
        connsm->cur_tx_pdu = m;
   1617e:	f8c4 60ac 	str.w	r6, [r4, #172]	; 0xac
   16182:	46ca      	mov	sl, r9
    cur_offset = 0;
   16184:	f04f 0900 	mov.w	r9, #0
        connsm->cur_tx_pdu = m;
   16188:	e04e      	b.n	16228 <ble_ll_conn_tx_pdu+0x1e0>
            if (!ble_ll_ctrl_enc_allowed_pdu_tx(pkthdr)) {
   1618a:	4650      	mov	r0, sl
   1618c:	f003 f8d0 	bl	19330 <ble_ll_ctrl_enc_allowed_pdu_tx>
   16190:	b938      	cbnz	r0, 161a2 <ble_ll_conn_tx_pdu+0x15a>
                CONN_F_EMPTY_PDU_TXD(connsm) = 1;
   16192:	7863      	ldrb	r3, [r4, #1]
   16194:	f043 0320 	orr.w	r3, r3, #32
   16198:	7063      	strb	r3, [r4, #1]
    ble_hdr = NULL;
   1619a:	2700      	movs	r7, #0
    hdr_byte = BLE_LL_LLID_DATA_FRAG;
   1619c:	2501      	movs	r5, #1
    md = 0;
   1619e:	46b9      	mov	r9, r7
                goto conn_tx_pdu;
   161a0:	e762      	b.n	16068 <ble_ll_conn_tx_pdu+0x20>
            if (nextpkthdr && !ble_ll_ctrl_enc_allowed_pdu_tx(nextpkthdr)
   161a2:	f1b9 0f00 	cmp.w	r9, #0
   161a6:	d0d4      	beq.n	16152 <ble_ll_conn_tx_pdu+0x10a>
   161a8:	4648      	mov	r0, r9
   161aa:	f003 f8c1 	bl	19330 <ble_ll_ctrl_enc_allowed_pdu_tx>
   161ae:	2800      	cmp	r0, #0
   161b0:	d1cf      	bne.n	16152 <ble_ll_conn_tx_pdu+0x10a>
                && ((connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) ||
   161b2:	79e3      	ldrb	r3, [r4, #7]
   161b4:	2b01      	cmp	r3, #1
   161b6:	d007      	beq.n	161c8 <ble_ll_conn_tx_pdu+0x180>
                    !ble_ll_ctrl_is_start_enc_rsp(m))) {
   161b8:	4630      	mov	r0, r6
   161ba:	f003 f8c9 	bl	19350 <ble_ll_ctrl_is_start_enc_rsp>
                && ((connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) ||
   161be:	2800      	cmp	r0, #0
   161c0:	d1c7      	bne.n	16152 <ble_ll_conn_tx_pdu+0x10a>
                nextpkthdr = NULL;
   161c2:	f04f 0900 	mov.w	r9, #0
   161c6:	e7c4      	b.n	16152 <ble_ll_conn_tx_pdu+0x10a>
   161c8:	f04f 0900 	mov.w	r9, #0
   161cc:	e7c1      	b.n	16152 <ble_ll_conn_tx_pdu+0x10a>
        STAILQ_REMOVE_HEAD(&connsm->conn_txq, omp_next);
   161ce:	f104 03b0 	add.w	r3, r4, #176	; 0xb0
   161d2:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
   161d6:	e7c2      	b.n	1615e <ble_ll_conn_tx_pdu+0x116>
            cur_txlen = ble_ll_conn_adjust_pyld_len(connsm, pktlen);
   161d8:	4641      	mov	r1, r8
   161da:	4620      	mov	r0, r4
   161dc:	f7ff feeb 	bl	15fb6 <ble_ll_conn_adjust_pyld_len>
   161e0:	fa5f fb80 	uxtb.w	fp, r0
   161e4:	e7c7      	b.n	16176 <ble_ll_conn_tx_pdu+0x12e>
    hdr_byte = BLE_LL_LLID_DATA_FRAG;
   161e6:	2501      	movs	r5, #1
   161e8:	e784      	b.n	160f4 <ble_ll_conn_tx_pdu+0xac>
                        !ble_ll_ctrl_is_start_enc_rsp(connsm->cur_tx_pdu))) {
   161ea:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
   161ee:	f003 f8af 	bl	19350 <ble_ll_ctrl_is_start_enc_rsp>
                    && ((connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) ||
   161f2:	b9c8      	cbnz	r0, 16228 <ble_ll_conn_tx_pdu+0x1e0>
                    nextpkthdr = NULL;
   161f4:	f04f 0a00 	mov.w	sl, #0
   161f8:	e016      	b.n	16228 <ble_ll_conn_tx_pdu+0x1e0>
            if (connsm->enc_data.enc_state > CONN_ENC_S_ENCRYPTED) {
   161fa:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
   161fe:	2b02      	cmp	r3, #2
   16200:	d90d      	bls.n	1621e <ble_ll_conn_tx_pdu+0x1d6>
                if (nextpkthdr && !ble_ll_ctrl_enc_allowed_pdu_tx(nextpkthdr)) {
   16202:	f1ba 0f00 	cmp.w	sl, #0
   16206:	d03e      	beq.n	16286 <ble_ll_conn_tx_pdu+0x23e>
   16208:	4650      	mov	r0, sl
   1620a:	f003 f891 	bl	19330 <ble_ll_ctrl_enc_allowed_pdu_tx>
   1620e:	2800      	cmp	r0, #0
   16210:	d03f      	beq.n	16292 <ble_ll_conn_tx_pdu+0x24a>
    ble_hdr = NULL;
   16212:	2700      	movs	r7, #0
            pktlen = 0;
   16214:	46b8      	mov	r8, r7
    cur_offset = 0;
   16216:	46b9      	mov	r9, r7
            cur_txlen = 0;
   16218:	46bb      	mov	fp, r7
    hdr_byte = BLE_LL_LLID_DATA_FRAG;
   1621a:	2501      	movs	r5, #1
   1621c:	e004      	b.n	16228 <ble_ll_conn_tx_pdu+0x1e0>
    ble_hdr = NULL;
   1621e:	2700      	movs	r7, #0
            pktlen = 0;
   16220:	46b8      	mov	r8, r7
    cur_offset = 0;
   16222:	46b9      	mov	r9, r7
            cur_txlen = 0;
   16224:	46bb      	mov	fp, r7
    hdr_byte = BLE_LL_LLID_DATA_FRAG;
   16226:	2501      	movs	r5, #1
    if (nextpkthdr || ((cur_offset + cur_txlen) < pktlen)) {
   16228:	f1ba 0f00 	cmp.w	sl, #0
   1622c:	d039      	beq.n	162a2 <ble_ll_conn_tx_pdu+0x25a>
        next_event_time = ble_ll_conn_get_next_sched_time(connsm);
   1622e:	4620      	mov	r0, r4
   16230:	f7ff feea 	bl	16008 <ble_ll_conn_get_next_sched_time>
   16234:	9003      	str	r0, [sp, #12]
        if ((cur_offset + cur_txlen) < pktlen) {
   16236:	eb09 030b 	add.w	r3, r9, fp
   1623a:	4543      	cmp	r3, r8
   1623c:	da38      	bge.n	162b0 <ble_ll_conn_tx_pdu+0x268>
            next_txlen = pktlen - (cur_offset + cur_txlen);
   1623e:	fa5f f088 	uxtb.w	r0, r8
   16242:	fa5f f883 	uxtb.w	r8, r3
   16246:	eba0 0008 	sub.w	r0, r0, r8
   1624a:	b2c0      	uxtb	r0, r0
        ticks = (BLE_LL_IFS * 3) + connsm->eff_max_rx_time +
   1624c:	f8b4 801a 	ldrh.w	r8, [r4, #26]
            ble_ll_pdu_tx_time_get(next_txlen, tx_phy_mode) +
   16250:	2101      	movs	r1, #1
   16252:	f7fe fcb7 	bl	14bc4 <ble_ll_pdu_tx_time_get>
        ticks = (BLE_LL_IFS * 3) + connsm->eff_max_rx_time +
   16256:	4480      	add	r8, r0
            ble_ll_pdu_tx_time_get(cur_txlen, tx_phy_mode);
   16258:	2101      	movs	r1, #1
   1625a:	4658      	mov	r0, fp
   1625c:	f7fe fcb2 	bl	14bc4 <ble_ll_pdu_tx_time_get>
            ble_ll_pdu_tx_time_get(next_txlen, tx_phy_mode) +
   16260:	4440      	add	r0, r8
        ticks = (BLE_LL_IFS * 3) + connsm->eff_max_rx_time +
   16262:	f500 70e1 	add.w	r0, r0, #450	; 0x1c2
        if (connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) {
   16266:	79e3      	ldrb	r3, [r4, #7]
   16268:	2b01      	cmp	r3, #1
   1626a:	d029      	beq.n	162c0 <ble_ll_conn_tx_pdu+0x278>
        ticks = os_cputime_usecs_to_ticks(ticks);
   1626c:	f018 fe24 	bl	2eeb8 <os_cputime_usecs_to_ticks>
   16270:	4680      	mov	r8, r0
        if ((int32_t)((os_cputime_get32() + ticks) - next_event_time) < 0) {
   16272:	f018 fe1c 	bl	2eeae <os_cputime_get32>
   16276:	4440      	add	r0, r8
   16278:	9b03      	ldr	r3, [sp, #12]
   1627a:	1ac0      	subs	r0, r0, r3
   1627c:	2800      	cmp	r0, #0
   1627e:	db23      	blt.n	162c8 <ble_ll_conn_tx_pdu+0x280>
    md = 0;
   16280:	f04f 0900 	mov.w	r9, #0
   16284:	e6f0      	b.n	16068 <ble_ll_conn_tx_pdu+0x20>
    ble_hdr = NULL;
   16286:	2700      	movs	r7, #0
            pktlen = 0;
   16288:	46b8      	mov	r8, r7
    cur_offset = 0;
   1628a:	46b9      	mov	r9, r7
            cur_txlen = 0;
   1628c:	46bb      	mov	fp, r7
    hdr_byte = BLE_LL_LLID_DATA_FRAG;
   1628e:	2501      	movs	r5, #1
   16290:	e7ca      	b.n	16228 <ble_ll_conn_tx_pdu+0x1e0>
                    nextpkthdr = NULL;
   16292:	f04f 0a00 	mov.w	sl, #0
    ble_hdr = NULL;
   16296:	4657      	mov	r7, sl
            pktlen = 0;
   16298:	46d0      	mov	r8, sl
    cur_offset = 0;
   1629a:	46d1      	mov	r9, sl
            cur_txlen = 0;
   1629c:	46d3      	mov	fp, sl
    hdr_byte = BLE_LL_LLID_DATA_FRAG;
   1629e:	2501      	movs	r5, #1
   162a0:	e7c2      	b.n	16228 <ble_ll_conn_tx_pdu+0x1e0>
    if (nextpkthdr || ((cur_offset + cur_txlen) < pktlen)) {
   162a2:	eb09 030b 	add.w	r3, r9, fp
   162a6:	4543      	cmp	r3, r8
   162a8:	dbc1      	blt.n	1622e <ble_ll_conn_tx_pdu+0x1e6>
    md = 0;
   162aa:	f04f 0900 	mov.w	r9, #0
   162ae:	e6db      	b.n	16068 <ble_ll_conn_tx_pdu+0x20>
            if (nextpkthdr->omp_len > connsm->eff_max_tx_octets) {
   162b0:	f8ba 3000 	ldrh.w	r3, [sl]
   162b4:	7ba0      	ldrb	r0, [r4, #14]
   162b6:	b282      	uxth	r2, r0
   162b8:	4293      	cmp	r3, r2
   162ba:	d8c7      	bhi.n	1624c <ble_ll_conn_tx_pdu+0x204>
                next_txlen = nextpkthdr->omp_len;
   162bc:	b2d8      	uxtb	r0, r3
   162be:	e7c5      	b.n	1624c <ble_ll_conn_tx_pdu+0x204>
            ticks += (BLE_LL_IFS + connsm->eff_max_rx_time);
   162c0:	8b63      	ldrh	r3, [r4, #26]
   162c2:	4418      	add	r0, r3
   162c4:	3096      	adds	r0, #150	; 0x96
   162c6:	e7d1      	b.n	1626c <ble_ll_conn_tx_pdu+0x224>
            md = 1;
   162c8:	f04f 0901 	mov.w	r9, #1
   162cc:	e6cc      	b.n	16068 <ble_ll_conn_tx_pdu+0x20>
        ((connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) && (md == 0) &&
   162ce:	f1b9 0f00 	cmp.w	r9, #0
   162d2:	d14f      	bne.n	16374 <ble_ll_conn_tx_pdu+0x32c>
         (connsm->cons_rxd_bad_crc == 0) &&
   162d4:	f894 a034 	ldrb.w	sl, [r4, #52]	; 0x34
        ((connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) && (md == 0) &&
   162d8:	f1ba 0f00 	cmp.w	sl, #0
   162dc:	d14d      	bne.n	1637a <ble_ll_conn_tx_pdu+0x332>
         ((connsm->last_rxd_hdr_byte & BLE_LL_DATA_HDR_MD_MASK) == 0) &&
   162de:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
         (connsm->cons_rxd_bad_crc == 0) &&
   162e2:	f013 0f10 	tst.w	r3, #16
   162e6:	d002      	beq.n	162ee <ble_ll_conn_tx_pdu+0x2a6>
        txend_func = NULL;
   162e8:	f04f 0a00 	mov.w	sl, #0
   162ec:	e00d      	b.n	1630a <ble_ll_conn_tx_pdu+0x2c2>
         !ble_ll_ctrl_is_terminate_ind(hdr_byte, m->om_data[0]))) {
   162ee:	6833      	ldr	r3, [r6, #0]
   162f0:	7819      	ldrb	r1, [r3, #0]
   162f2:	4628      	mov	r0, r5
   162f4:	f003 f936 	bl	19564 <ble_ll_ctrl_is_terminate_ind>
         ((connsm->last_rxd_hdr_byte & BLE_LL_DATA_HDR_MD_MASK) == 0) &&
   162f8:	b938      	cbnz	r0, 1630a <ble_ll_conn_tx_pdu+0x2c2>
        end_transition = BLE_PHY_TRANSITION_NONE;
   162fa:	46d0      	mov	r8, sl
        txend_func = ble_ll_conn_wait_txend;
   162fc:	f8df a198 	ldr.w	sl, [pc, #408]	; 16498 <ble_ll_conn_tx_pdu+0x450>
   16300:	e003      	b.n	1630a <ble_ll_conn_tx_pdu+0x2c2>
   16302:	f8df a194 	ldr.w	sl, [pc, #404]	; 16498 <ble_ll_conn_tx_pdu+0x450>
        end_transition = BLE_PHY_TRANSITION_NONE;
   16306:	f04f 0800 	mov.w	r8, #0
    llid = ble_hdr->txinfo.hdr_byte & BLE_LL_DATA_HDR_LLID_MASK;
   1630a:	78fb      	ldrb	r3, [r7, #3]
   1630c:	f003 0303 	and.w	r3, r3, #3
    if (llid == BLE_LL_LLID_CTRL) {
   16310:	2b03      	cmp	r3, #3
   16312:	d035      	beq.n	16380 <ble_ll_conn_tx_pdu+0x338>
        opcode = 0;
   16314:	2300      	movs	r3, #0
        is_ctrl = 0;
   16316:	461a      	mov	r2, r3
    } else if (is_ctrl && (opcode == BLE_LL_CTRL_START_ENC_REQ)) {
   16318:	b10a      	cbz	r2, 1631e <ble_ll_conn_tx_pdu+0x2d6>
   1631a:	2b05      	cmp	r3, #5
   1631c:	d04d      	beq.n	163ba <ble_ll_conn_tx_pdu+0x372>
    } else if (is_ctrl && (opcode == BLE_LL_CTRL_PAUSE_ENC_RSP)) {
   1631e:	b10a      	cbz	r2, 16324 <ble_ll_conn_tx_pdu+0x2dc>
   16320:	2b0b      	cmp	r3, #11
   16322:	d05f      	beq.n	163e4 <ble_ll_conn_tx_pdu+0x39c>
        if (CONN_F_ENCRYPTED(connsm)) {
   16324:	78a3      	ldrb	r3, [r4, #2]
   16326:	f013 0f02 	tst.w	r3, #2
   1632a:	f040 8089 	bne.w	16440 <ble_ll_conn_tx_pdu+0x3f8>
    ble_phy_set_txend_cb(txend_func, connsm);
   1632e:	4621      	mov	r1, r4
   16330:	4650      	mov	r0, sl
   16332:	f007 fd29 	bl	1dd88 <ble_phy_set_txend_cb>
    rc = ble_phy_tx(ble_ll_tx_mbuf_pducb, m, end_transition);
   16336:	4642      	mov	r2, r8
   16338:	4631      	mov	r1, r6
   1633a:	4855      	ldr	r0, [pc, #340]	; (16490 <ble_ll_conn_tx_pdu+0x448>)
   1633c:	f007 ffb8 	bl	1e2b0 <ble_phy_tx>
    if (!rc) {
   16340:	4602      	mov	r2, r0
   16342:	b998      	cbnz	r0, 1636c <ble_ll_conn_tx_pdu+0x324>
        cur_txlen = ble_hdr->txinfo.pyld_len;
   16344:	78b9      	ldrb	r1, [r7, #2]
        CONN_F_LAST_TXD_MD(connsm) = md;
   16346:	7863      	ldrb	r3, [r4, #1]
   16348:	f369 1386 	bfi	r3, r9, #6, #1
   1634c:	7063      	strb	r3, [r4, #1]
        if (CONN_F_EMPTY_PDU_TXD(connsm)) {
   1634e:	f013 0f20 	tst.w	r3, #32
   16352:	f000 8089 	beq.w	16468 <ble_ll_conn_tx_pdu+0x420>
            if (connsm->csmflags.cfbit.terminate_ind_rxd) {
   16356:	7823      	ldrb	r3, [r4, #0]
   16358:	f013 0f04 	tst.w	r3, #4
   1635c:	d002      	beq.n	16364 <ble_ll_conn_tx_pdu+0x31c>
                connsm->csmflags.cfbit.terminate_ind_rxd_acked = 1;
   1635e:	f043 0308 	orr.w	r3, r3, #8
   16362:	7023      	strb	r3, [r4, #0]
            STATS_INC(ble_ll_conn_stats, tx_empty_pdus);
   16364:	494b      	ldr	r1, [pc, #300]	; (16494 <ble_ll_conn_tx_pdu+0x44c>)
   16366:	6ecb      	ldr	r3, [r1, #108]	; 0x6c
   16368:	3301      	adds	r3, #1
   1636a:	66cb      	str	r3, [r1, #108]	; 0x6c
}
   1636c:	4610      	mov	r0, r2
   1636e:	b00f      	add	sp, #60	; 0x3c
   16370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        txend_func = NULL;
   16374:	f04f 0a00 	mov.w	sl, #0
   16378:	e7c7      	b.n	1630a <ble_ll_conn_tx_pdu+0x2c2>
   1637a:	f04f 0a00 	mov.w	sl, #0
   1637e:	e7c4      	b.n	1630a <ble_ll_conn_tx_pdu+0x2c2>
        opcode = m->om_data[0];
   16380:	6833      	ldr	r3, [r6, #0]
   16382:	781b      	ldrb	r3, [r3, #0]
    if (is_ctrl && (opcode == BLE_LL_CTRL_START_ENC_RSP)) {
   16384:	2b06      	cmp	r3, #6
   16386:	d001      	beq.n	1638c <ble_ll_conn_tx_pdu+0x344>
        is_ctrl = 1;
   16388:	2201      	movs	r2, #1
   1638a:	e7c5      	b.n	16318 <ble_ll_conn_tx_pdu+0x2d0>
        CONN_F_ENCRYPTED(connsm) = 1;
   1638c:	78a3      	ldrb	r3, [r4, #2]
   1638e:	f043 0302 	orr.w	r3, r3, #2
   16392:	70a3      	strb	r3, [r4, #2]
        connsm->enc_data.tx_encrypted = 1;
   16394:	2301      	movs	r3, #1
   16396:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
                               CONN_IS_MASTER(connsm));
   1639a:	79e3      	ldrb	r3, [r4, #7]
        ble_phy_encrypt_enable(connsm->enc_data.tx_pkt_cntr,
   1639c:	2b01      	cmp	r3, #1
   1639e:	bf14      	ite	ne
   163a0:	2300      	movne	r3, #0
   163a2:	2301      	moveq	r3, #1
   163a4:	9300      	str	r3, [sp, #0]
   163a6:	f504 73ac 	add.w	r3, r4, #344	; 0x158
   163aa:	f504 7298 	add.w	r2, r4, #304	; 0x130
   163ae:	f8d4 011c 	ldr.w	r0, [r4, #284]	; 0x11c
   163b2:	2100      	movs	r1, #0
   163b4:	f007 fca2 	bl	1dcfc <ble_phy_encrypt_enable>
   163b8:	e7b9      	b.n	1632e <ble_ll_conn_tx_pdu+0x2e6>
        CONN_F_ENCRYPTED(connsm) = 0;
   163ba:	78a3      	ldrb	r3, [r4, #2]
   163bc:	f36f 0341 	bfc	r3, #1, #1
   163c0:	70a3      	strb	r3, [r4, #2]
        connsm->enc_data.enc_state = CONN_ENC_S_START_ENC_RSP_WAIT;
   163c2:	2307      	movs	r3, #7
   163c4:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
        connsm->enc_data.tx_encrypted = 0;
   163c8:	2300      	movs	r3, #0
   163ca:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
        ble_phy_encrypt_disable();
   163ce:	f007 fcc5 	bl	1dd5c <ble_phy_encrypt_disable>
        if (txend_func == NULL) {
   163d2:	f1ba 0f00 	cmp.w	sl, #0
   163d6:	d002      	beq.n	163de <ble_ll_conn_tx_pdu+0x396>
            txend_func = ble_ll_conn_txend_encrypt;
   163d8:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 1649c <ble_ll_conn_tx_pdu+0x454>
   163dc:	e7a7      	b.n	1632e <ble_ll_conn_tx_pdu+0x2e6>
            txend_func = ble_ll_conn_start_rx_encrypt;
   163de:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 164a0 <ble_ll_conn_tx_pdu+0x458>
   163e2:	e7a4      	b.n	1632e <ble_ll_conn_tx_pdu+0x2e6>
        if (connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) {
   163e4:	79e3      	ldrb	r3, [r4, #7]
   163e6:	2b02      	cmp	r3, #2
   163e8:	d00c      	beq.n	16404 <ble_ll_conn_tx_pdu+0x3bc>
            CONN_F_ENCRYPTED(connsm) = 0;
   163ea:	78a3      	ldrb	r3, [r4, #2]
   163ec:	f36f 0341 	bfc	r3, #1, #1
   163f0:	70a3      	strb	r3, [r4, #2]
            connsm->enc_data.enc_state = CONN_ENC_S_PAUSED;
   163f2:	2305      	movs	r3, #5
   163f4:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
            connsm->enc_data.tx_encrypted = 0;
   163f8:	2300      	movs	r3, #0
   163fa:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
            ble_phy_encrypt_disable();
   163fe:	f007 fcad 	bl	1dd5c <ble_phy_encrypt_disable>
   16402:	e794      	b.n	1632e <ble_ll_conn_tx_pdu+0x2e6>
            CONN_F_ENCRYPTED(connsm) = 1;
   16404:	78a2      	ldrb	r2, [r4, #2]
   16406:	f042 0202 	orr.w	r2, r2, #2
   1640a:	70a2      	strb	r2, [r4, #2]
            connsm->enc_data.tx_encrypted = 1;
   1640c:	2201      	movs	r2, #1
   1640e:	f884 2119 	strb.w	r2, [r4, #281]	; 0x119
            ble_phy_encrypt_enable(connsm->enc_data.tx_pkt_cntr,
   16412:	4293      	cmp	r3, r2
   16414:	bf14      	ite	ne
   16416:	2300      	movne	r3, #0
   16418:	2301      	moveq	r3, #1
   1641a:	9300      	str	r3, [sp, #0]
   1641c:	f504 73ac 	add.w	r3, r4, #344	; 0x158
   16420:	f504 7298 	add.w	r2, r4, #304	; 0x130
   16424:	f8d4 011c 	ldr.w	r0, [r4, #284]	; 0x11c
   16428:	2100      	movs	r1, #0
   1642a:	f007 fc67 	bl	1dcfc <ble_phy_encrypt_enable>
            if (txend_func == NULL) {
   1642e:	f1ba 0f00 	cmp.w	sl, #0
   16432:	d002      	beq.n	1643a <ble_ll_conn_tx_pdu+0x3f2>
                txend_func = ble_ll_conn_rxend_unencrypt;
   16434:	f8df a06c 	ldr.w	sl, [pc, #108]	; 164a4 <ble_ll_conn_tx_pdu+0x45c>
   16438:	e779      	b.n	1632e <ble_ll_conn_tx_pdu+0x2e6>
                txend_func = ble_ll_conn_start_rx_unencrypt;
   1643a:	f8df a06c 	ldr.w	sl, [pc, #108]	; 164a8 <ble_ll_conn_tx_pdu+0x460>
   1643e:	e776      	b.n	1632e <ble_ll_conn_tx_pdu+0x2e6>
            connsm->enc_data.tx_encrypted = 1;
   16440:	2301      	movs	r3, #1
   16442:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
                                         CONN_IS_MASTER(connsm));
   16446:	79e2      	ldrb	r2, [r4, #7]
            ble_phy_encrypt_set_pkt_cntr(connsm->enc_data.tx_pkt_cntr,
   16448:	429a      	cmp	r2, r3
   1644a:	bf14      	ite	ne
   1644c:	2200      	movne	r2, #0
   1644e:	2201      	moveq	r2, #1
   16450:	f8d4 011c 	ldr.w	r0, [r4, #284]	; 0x11c
   16454:	2100      	movs	r1, #0
   16456:	f007 fc79 	bl	1dd4c <ble_phy_encrypt_set_pkt_cntr>
            if (txend_func == NULL) {
   1645a:	f1ba 0f00 	cmp.w	sl, #0
   1645e:	f47f af66 	bne.w	1632e <ble_ll_conn_tx_pdu+0x2e6>
                txend_func = ble_ll_conn_continue_rx_encrypt;
   16462:	f8df a048 	ldr.w	sl, [pc, #72]	; 164ac <ble_ll_conn_tx_pdu+0x464>
   16466:	e762      	b.n	1632e <ble_ll_conn_tx_pdu+0x2e6>
        } else if ((hdr_byte & BLE_LL_DATA_HDR_LLID_MASK) == BLE_LL_LLID_CTRL) {
   16468:	f005 0503 	and.w	r5, r5, #3
   1646c:	2d03      	cmp	r5, #3
   1646e:	d007      	beq.n	16480 <ble_ll_conn_tx_pdu+0x438>
            STATS_INC(ble_ll_conn_stats, tx_l2cap_pdus);
   16470:	4b08      	ldr	r3, [pc, #32]	; (16494 <ble_ll_conn_tx_pdu+0x44c>)
   16472:	6e58      	ldr	r0, [r3, #100]	; 0x64
   16474:	3001      	adds	r0, #1
   16476:	6658      	str	r0, [r3, #100]	; 0x64
            STATS_INCN(ble_ll_conn_stats, tx_l2cap_bytes, cur_txlen);
   16478:	6e98      	ldr	r0, [r3, #104]	; 0x68
   1647a:	4401      	add	r1, r0
   1647c:	6699      	str	r1, [r3, #104]	; 0x68
    return rc;
   1647e:	e775      	b.n	1636c <ble_ll_conn_tx_pdu+0x324>
            STATS_INC(ble_ll_conn_stats, tx_ctrl_pdus);
   16480:	4b04      	ldr	r3, [pc, #16]	; (16494 <ble_ll_conn_tx_pdu+0x44c>)
   16482:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
   16484:	3001      	adds	r0, #1
   16486:	65d8      	str	r0, [r3, #92]	; 0x5c
            STATS_INCN(ble_ll_conn_stats, tx_ctrl_bytes, cur_txlen);
   16488:	6e18      	ldr	r0, [r3, #96]	; 0x60
   1648a:	4401      	add	r1, r0
   1648c:	6619      	str	r1, [r3, #96]	; 0x60
   1648e:	e76d      	b.n	1636c <ble_ll_conn_tx_pdu+0x324>
   16490:	00014ad9 	.word	0x00014ad9
   16494:	20003a30 	.word	0x20003a30
   16498:	00015f19 	.word	0x00015f19
   1649c:	00015f09 	.word	0x00015f09
   164a0:	00015f5d 	.word	0x00015f5d
   164a4:	00015ef9 	.word	0x00015ef9
   164a8:	00015f8f 	.word	0x00015f8f
   164ac:	00015f9f 	.word	0x00015f9f

000164b0 <ble_ll_conn_event_start_cb>:
{
   164b0:	b530      	push	{r4, r5, lr}
   164b2:	b083      	sub	sp, #12
    connsm = (struct ble_ll_conn_sm *)sch->cb_arg;
   164b4:	68c4      	ldr	r4, [r0, #12]
    g_ble_ll_conn_cur_sm = connsm;
   164b6:	4b4c      	ldr	r3, [pc, #304]	; (165e8 <ble_ll_conn_event_start_cb+0x138>)
   164b8:	601c      	str	r4, [r3, #0]
    BLE_LL_ASSERT(connsm);
   164ba:	2c00      	cmp	r4, #0
   164bc:	d043      	beq.n	16546 <ble_ll_conn_event_start_cb+0x96>
   164be:	4605      	mov	r5, r0
    if (connsm->conn_state == BLE_LL_CONN_STATE_IDLE) {
   164c0:	79a3      	ldrb	r3, [r4, #6]
   164c2:	2b00      	cmp	r3, #0
   164c4:	d049      	beq.n	1655a <ble_ll_conn_event_start_cb+0xaa>
    ble_ll_whitelist_disable();
   164c6:	f006 ff4b 	bl	1d360 <ble_ll_whitelist_disable>
    ble_ll_state_set(BLE_LL_STATE_CONNECTION);
   164ca:	2004      	movs	r0, #4
   164cc:	f7fe fb1c 	bl	14b08 <ble_ll_state_set>
    ble_phy_setchan(connsm->data_chan_index, connsm->access_addr,
   164d0:	6da2      	ldr	r2, [r4, #88]	; 0x58
   164d2:	6d61      	ldr	r1, [r4, #84]	; 0x54
   164d4:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
   164d8:	f007 fc98 	bl	1de0c <ble_phy_setchan>
    ble_phy_resolv_list_disable();
   164dc:	f007 ffa0 	bl	1e420 <ble_phy_resolv_list_disable>
    if (connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) {
   164e0:	79e3      	ldrb	r3, [r4, #7]
   164e2:	2b01      	cmp	r3, #1
   164e4:	d047      	beq.n	16576 <ble_ll_conn_event_start_cb+0xc6>
        if (CONN_F_ENCRYPTED(connsm)) {
   164e6:	78a3      	ldrb	r3, [r4, #2]
   164e8:	f013 0f02 	tst.w	r3, #2
   164ec:	d069      	beq.n	165c2 <ble_ll_conn_event_start_cb+0x112>
            ble_phy_encrypt_enable(connsm->enc_data.rx_pkt_cntr,
   164ee:	f8d4 0120 	ldr.w	r0, [r4, #288]	; 0x120
   164f2:	2301      	movs	r3, #1
   164f4:	9300      	str	r3, [sp, #0]
   164f6:	f504 73ac 	add.w	r3, r4, #344	; 0x158
   164fa:	f504 7298 	add.w	r2, r4, #304	; 0x130
   164fe:	2100      	movs	r1, #0
   16500:	f007 fbfc 	bl	1dcfc <ble_phy_encrypt_enable>
        start = sch->start_time + g_ble_ll_sched_offset_ticks;
   16504:	6868      	ldr	r0, [r5, #4]
   16506:	4b39      	ldr	r3, [pc, #228]	; (165ec <ble_ll_conn_event_start_cb+0x13c>)
   16508:	781b      	ldrb	r3, [r3, #0]
        rc = ble_phy_rx_set_start_time(start, sch->remainder);
   1650a:	78a9      	ldrb	r1, [r5, #2]
   1650c:	4418      	add	r0, r3
   1650e:	f007 fe79 	bl	1e204 <ble_phy_rx_set_start_time>
        if (rc) {
   16512:	4605      	mov	r5, r0
   16514:	2800      	cmp	r0, #0
   16516:	d057      	beq.n	165c8 <ble_ll_conn_event_start_cb+0x118>
            STATS_INC(ble_ll_conn_stats, slave_ce_failures);
   16518:	4a35      	ldr	r2, [pc, #212]	; (165f0 <ble_ll_conn_event_start_cb+0x140>)
   1651a:	6b13      	ldr	r3, [r2, #48]	; 0x30
   1651c:	3301      	adds	r3, #1
   1651e:	6313      	str	r3, [r2, #48]	; 0x30
        ble_ll_event_send(&connsm->conn_ev_end);
   16520:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   16524:	f7fe fafc 	bl	14b20 <ble_ll_event_send>
        ble_phy_disable();
   16528:	f007 fc96 	bl	1de58 <ble_phy_disable>
        ble_ll_state_set(BLE_LL_STATE_STANDBY);
   1652c:	2000      	movs	r0, #0
   1652e:	f7fe faeb 	bl	14b08 <ble_ll_state_set>
        g_ble_ll_conn_cur_sm = NULL;
   16532:	4b2d      	ldr	r3, [pc, #180]	; (165e8 <ble_ll_conn_event_start_cb+0x138>)
   16534:	2200      	movs	r2, #0
   16536:	601a      	str	r2, [r3, #0]
   16538:	2501      	movs	r5, #1
    connsm->last_scheduled = os_cputime_get32();
   1653a:	f018 fcb8 	bl	2eeae <os_cputime_get32>
   1653e:	6660      	str	r0, [r4, #100]	; 0x64
}
   16540:	4628      	mov	r0, r5
   16542:	b003      	add	sp, #12
   16544:	bd30      	pop	{r4, r5, pc}
    BLE_LL_ASSERT(connsm);
   16546:	f7f5 fe4f 	bl	c1e8 <hal_debugger_connected>
   1654a:	b100      	cbz	r0, 1654e <ble_ll_conn_event_start_cb+0x9e>
   1654c:	be01      	bkpt	0x0001
   1654e:	2300      	movs	r3, #0
   16550:	461a      	mov	r2, r3
   16552:	4619      	mov	r1, r3
   16554:	4618      	mov	r0, r3
   16556:	f7f6 fafb 	bl	cb50 <__assert_func>
        STATS_INC(ble_ll_conn_stats, sched_start_in_idle);
   1655a:	4a25      	ldr	r2, [pc, #148]	; (165f0 <ble_ll_conn_event_start_cb+0x140>)
   1655c:	6f53      	ldr	r3, [r2, #116]	; 0x74
   1655e:	3301      	adds	r3, #1
   16560:	6753      	str	r3, [r2, #116]	; 0x74
        BLE_LL_ASSERT(0);
   16562:	f7f5 fe41 	bl	c1e8 <hal_debugger_connected>
   16566:	b100      	cbz	r0, 1656a <ble_ll_conn_event_start_cb+0xba>
   16568:	be01      	bkpt	0x0001
   1656a:	2300      	movs	r3, #0
   1656c:	461a      	mov	r2, r3
   1656e:	4619      	mov	r1, r3
   16570:	4618      	mov	r0, r3
   16572:	f7f6 faed 	bl	cb50 <__assert_func>
        start = sch->start_time + g_ble_ll_sched_offset_ticks;
   16576:	6868      	ldr	r0, [r5, #4]
   16578:	4b1c      	ldr	r3, [pc, #112]	; (165ec <ble_ll_conn_event_start_cb+0x13c>)
   1657a:	781b      	ldrb	r3, [r3, #0]
        rc = ble_phy_tx_set_start_time(start, sch->remainder);
   1657c:	78a9      	ldrb	r1, [r5, #2]
   1657e:	4418      	add	r0, r3
   16580:	f007 fe78 	bl	1e274 <ble_phy_tx_set_start_time>
        if (!rc) {
   16584:	b9c0      	cbnz	r0, 165b8 <ble_ll_conn_event_start_cb+0x108>
            if (CONN_F_ENCRYPTED(connsm)) {
   16586:	78a3      	ldrb	r3, [r4, #2]
   16588:	f013 0f02 	tst.w	r3, #2
   1658c:	d011      	beq.n	165b2 <ble_ll_conn_event_start_cb+0x102>
                ble_phy_encrypt_enable(connsm->enc_data.tx_pkt_cntr,
   1658e:	f8d4 011c 	ldr.w	r0, [r4, #284]	; 0x11c
   16592:	2301      	movs	r3, #1
   16594:	9300      	str	r3, [sp, #0]
   16596:	f504 73ac 	add.w	r3, r4, #344	; 0x158
   1659a:	f504 7298 	add.w	r2, r4, #304	; 0x130
   1659e:	2100      	movs	r1, #0
   165a0:	f007 fbac 	bl	1dcfc <ble_phy_encrypt_enable>
            rc = ble_ll_conn_tx_pdu(connsm);
   165a4:	4620      	mov	r0, r4
   165a6:	f7ff fd4f 	bl	16048 <ble_ll_conn_tx_pdu>
            if (!rc) {
   165aa:	4605      	mov	r5, r0
   165ac:	2800      	cmp	r0, #0
   165ae:	d1b7      	bne.n	16520 <ble_ll_conn_event_start_cb+0x70>
   165b0:	e7c3      	b.n	1653a <ble_ll_conn_event_start_cb+0x8a>
                ble_phy_encrypt_disable();
   165b2:	f007 fbd3 	bl	1dd5c <ble_phy_encrypt_disable>
   165b6:	e7f5      	b.n	165a4 <ble_ll_conn_event_start_cb+0xf4>
            STATS_INC(ble_ll_conn_stats, conn_ev_late);
   165b8:	4a0d      	ldr	r2, [pc, #52]	; (165f0 <ble_ll_conn_event_start_cb+0x140>)
   165ba:	6913      	ldr	r3, [r2, #16]
   165bc:	3301      	adds	r3, #1
   165be:	6113      	str	r3, [r2, #16]
   165c0:	e7ae      	b.n	16520 <ble_ll_conn_event_start_cb+0x70>
            ble_phy_encrypt_disable();
   165c2:	f007 fbcb 	bl	1dd5c <ble_phy_encrypt_disable>
   165c6:	e79d      	b.n	16504 <ble_ll_conn_event_start_cb+0x54>
            connsm->csmflags.cfbit.slave_set_last_anchor = 1;
   165c8:	7823      	ldrb	r3, [r4, #0]
   165ca:	f043 0320 	orr.w	r3, r3, #32
   165ce:	7023      	strb	r3, [r4, #0]
            usecs = connsm->slave_cur_tx_win_usecs + 61 +
   165d0:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
                (2 * connsm->slave_cur_window_widening);
   165d4:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
            usecs = connsm->slave_cur_tx_win_usecs + 61 +
   165d8:	eb02 0243 	add.w	r2, r2, r3, lsl #1
            ble_phy_wfr_enable(BLE_PHY_WFR_ENABLE_RX, 0, usecs);
   165dc:	323d      	adds	r2, #61	; 0x3d
   165de:	2100      	movs	r1, #0
   165e0:	4608      	mov	r0, r1
   165e2:	f007 fa21 	bl	1da28 <ble_phy_wfr_enable>
   165e6:	e7a8      	b.n	1653a <ble_ll_conn_event_start_cb+0x8a>
   165e8:	20003878 	.word	0x20003878
   165ec:	20003c30 	.word	0x20003c30
   165f0:	20003a30 	.word	0x20003a30

000165f4 <ble_ll_conn_master_common_init>:
{
   165f4:	b510      	push	{r4, lr}
   165f6:	4604      	mov	r4, r0
    connsm->conn_role = BLE_LL_CONN_ROLE_MASTER;
   165f8:	2301      	movs	r3, #1
   165fa:	71c3      	strb	r3, [r0, #7]
    connsm->tx_win_size = BLE_LL_CONN_TX_WIN_MIN + 1;
   165fc:	2302      	movs	r3, #2
   165fe:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
    connsm->tx_win_off = 0;
   16602:	2300      	movs	r3, #0
   16604:	f8a0 3072 	strh.w	r3, [r0, #114]	; 0x72
    connsm->master_sca = MYNEWT_VAL(BLE_LL_MASTER_SCA);
   16608:	2304      	movs	r3, #4
   1660a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
   1660e:	f7f8 f99b 	bl	e948 <lrand48>
    connsm->hop_inc = (rand() % 12) + 5;
   16612:	4a11      	ldr	r2, [pc, #68]	; (16658 <ble_ll_conn_master_common_init+0x64>)
   16614:	fb82 3200 	smull	r3, r2, r2, r0
   16618:	17c3      	asrs	r3, r0, #31
   1661a:	ebc3 0362 	rsb	r3, r3, r2, asr #1
   1661e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   16622:	009a      	lsls	r2, r3, #2
   16624:	1a83      	subs	r3, r0, r2
   16626:	3305      	adds	r3, #5
   16628:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
    connsm->num_used_chans = g_ble_ll_conn_params.num_used_chans;
   1662c:	4b0b      	ldr	r3, [pc, #44]	; (1665c <ble_ll_conn_master_common_init+0x68>)
   1662e:	795a      	ldrb	r2, [r3, #5]
   16630:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
    memcpy(connsm->chanmap, g_ble_ll_conn_params.master_chan_map,
   16634:	681a      	ldr	r2, [r3, #0]
   16636:	6222      	str	r2, [r4, #32]
   16638:	791b      	ldrb	r3, [r3, #4]
   1663a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    connsm->access_addr = ble_ll_utils_calc_access_addr();
   1663e:	f006 fd2f 	bl	1d0a0 <ble_ll_utils_calc_access_addr>
   16642:	6560      	str	r0, [r4, #84]	; 0x54
   16644:	f7f8 f980 	bl	e948 <lrand48>
    connsm->crcinit = rand() & 0xffffff;
   16648:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1664c:	65a0      	str	r0, [r4, #88]	; 0x58
    connsm->conn_sch.sched_cb = ble_ll_conn_event_start_cb;
   1664e:	4b04      	ldr	r3, [pc, #16]	; (16660 <ble_ll_conn_master_common_init+0x6c>)
   16650:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
}
   16654:	bd10      	pop	{r4, pc}
   16656:	bf00      	nop
   16658:	2aaaaaab 	.word	0x2aaaaaab
   1665c:	20003860 	.word	0x20003860
   16660:	000164b1 	.word	0x000164b1

00016664 <ble_ll_conn_calc_itvl_ticks>:
{
   16664:	b570      	push	{r4, r5, r6, lr}
   16666:	4605      	mov	r5, r0
    usecs = connsm->conn_itvl * BLE_LL_CONN_ITVL_USECS;
   16668:	f8b0 0068 	ldrh.w	r0, [r0, #104]	; 0x68
   1666c:	f240 44e2 	movw	r4, #1250	; 0x4e2
   16670:	fb04 f400 	mul.w	r4, r4, r0
    ticks = os_cputime_usecs_to_ticks(usecs);
   16674:	4620      	mov	r0, r4
   16676:	f018 fc1f 	bl	2eeb8 <os_cputime_usecs_to_ticks>
   1667a:	4606      	mov	r6, r0
                                        os_cputime_ticks_to_usecs(ticks));
   1667c:	f018 fc24 	bl	2eec8 <os_cputime_ticks_to_usecs>
    connsm->conn_itvl_usecs = (uint8_t)(usecs -
   16680:	1a20      	subs	r0, r4, r0
   16682:	b2c0      	uxtb	r0, r0
   16684:	f885 0079 	strb.w	r0, [r5, #121]	; 0x79
    if (connsm->conn_itvl_usecs == 31) {
   16688:	281f      	cmp	r0, #31
   1668a:	d001      	beq.n	16690 <ble_ll_conn_calc_itvl_ticks+0x2c>
    connsm->conn_itvl_ticks = ticks;
   1668c:	67ee      	str	r6, [r5, #124]	; 0x7c
}
   1668e:	bd70      	pop	{r4, r5, r6, pc}
        connsm->conn_itvl_usecs = 0;
   16690:	2300      	movs	r3, #0
   16692:	f885 3079 	strb.w	r3, [r5, #121]	; 0x79
        ++ticks;
   16696:	3601      	adds	r6, #1
   16698:	e7f8      	b.n	1668c <ble_ll_conn_calc_itvl_ticks+0x28>

0001669a <ble_ll_conn_can_send_next_pdu>:
{
   1669a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) {
   1669c:	79c3      	ldrb	r3, [r0, #7]
   1669e:	2b01      	cmp	r3, #1
   166a0:	d001      	beq.n	166a6 <ble_ll_conn_can_send_next_pdu+0xc>
    rc = 1;
   166a2:	2001      	movs	r0, #1
}
   166a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   166a6:	4616      	mov	r6, r2
   166a8:	460d      	mov	r5, r1
   166aa:	4604      	mov	r4, r0
        next_sched_time = ble_ll_conn_get_next_sched_time(connsm);
   166ac:	f7ff fcac 	bl	16008 <ble_ll_conn_get_next_sched_time>
   166b0:	4607      	mov	r7, r0
        txpdu = connsm->cur_tx_pdu;
   166b2:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
        if (!txpdu) {
   166b6:	b1ca      	cbz	r2, 166ec <ble_ll_conn_can_send_next_pdu+0x52>
            pkthdr = OS_MBUF_PKTHDR(txpdu);
   166b8:	f102 0310 	add.w	r3, r2, #16
        if (txpdu) {
   166bc:	b1ea      	cbz	r2, 166fa <ble_ll_conn_can_send_next_pdu+0x60>
            rem_bytes = pkthdr->omp_len - txhdr->txinfo.offset;
   166be:	781b      	ldrb	r3, [r3, #0]
   166c0:	7e52      	ldrb	r2, [r2, #25]
   166c2:	1a9b      	subs	r3, r3, r2
   166c4:	b2db      	uxtb	r3, r3
            if (rem_bytes > connsm->eff_max_tx_octets) {
   166c6:	7ba0      	ldrb	r0, [r4, #14]
   166c8:	4298      	cmp	r0, r3
   166ca:	d300      	bcc.n	166ce <ble_ll_conn_can_send_next_pdu+0x34>
            rem_bytes = pkthdr->omp_len - txhdr->txinfo.offset;
   166cc:	4618      	mov	r0, r3
            usecs = ble_ll_pdu_tx_time_get(rem_bytes, tx_phy_mode);
   166ce:	2101      	movs	r1, #1
   166d0:	f7fe fa78 	bl	14bc4 <ble_ll_pdu_tx_time_get>
        usecs += (BLE_LL_IFS * 2) + connsm->eff_max_rx_time;
   166d4:	8b64      	ldrh	r4, [r4, #26]
   166d6:	4420      	add	r0, r4
   166d8:	f500 7496 	add.w	r4, r0, #300	; 0x12c
        allowed_usecs = os_cputime_ticks_to_usecs(ticks);
   166dc:	1b78      	subs	r0, r7, r5
   166de:	f018 fbf3 	bl	2eec8 <os_cputime_ticks_to_usecs>
        if ((usecs + add_usecs) >= allowed_usecs) {
   166e2:	4434      	add	r4, r6
   166e4:	4284      	cmp	r4, r0
   166e6:	d30d      	bcc.n	16704 <ble_ll_conn_can_send_next_pdu+0x6a>
            rc = 0;
   166e8:	2000      	movs	r0, #0
    return rc;
   166ea:	e7db      	b.n	166a4 <ble_ll_conn_can_send_next_pdu+0xa>
            pkthdr = STAILQ_FIRST(&connsm->conn_txq);
   166ec:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
            if (pkthdr) {
   166f0:	2b00      	cmp	r3, #0
   166f2:	d0e3      	beq.n	166bc <ble_ll_conn_can_send_next_pdu+0x22>
                txpdu = OS_MBUF_PKTHDR_TO_MBUF(pkthdr);
   166f4:	f1a3 0210 	sub.w	r2, r3, #16
   166f8:	e7e0      	b.n	166bc <ble_ll_conn_can_send_next_pdu+0x22>
            usecs = ble_ll_pdu_tx_time_get(0, tx_phy_mode);
   166fa:	2101      	movs	r1, #1
   166fc:	2000      	movs	r0, #0
   166fe:	f7fe fa61 	bl	14bc4 <ble_ll_pdu_tx_time_get>
   16702:	e7e7      	b.n	166d4 <ble_ll_conn_can_send_next_pdu+0x3a>
    rc = 1;
   16704:	2001      	movs	r0, #1
   16706:	e7cd      	b.n	166a4 <ble_ll_conn_can_send_next_pdu+0xa>

00016708 <ble_ll_conn_chk_csm_flags>:
{
   16708:	b510      	push	{r4, lr}
   1670a:	4604      	mov	r4, r0
    if (connsm->csmflags.cfbit.send_ltk_req) {
   1670c:	7883      	ldrb	r3, [r0, #2]
   1670e:	f013 0f01 	tst.w	r3, #1
   16712:	d114      	bne.n	1673e <ble_ll_conn_chk_csm_flags+0x36>
    if (connsm->csmflags.cfbit.host_expects_upd_event) {
   16714:	7863      	ldrb	r3, [r4, #1]
   16716:	f013 0f02 	tst.w	r3, #2
   1671a:	d00f      	beq.n	1673c <ble_ll_conn_chk_csm_flags+0x34>
        if (IS_PENDING_CTRL_PROC(connsm, BLE_LL_CTRL_PROC_CONN_UPDATE)) {
   1671c:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
   16720:	f013 0f01 	tst.w	r3, #1
   16724:	d119      	bne.n	1675a <ble_ll_conn_chk_csm_flags+0x52>
            if (IS_PENDING_CTRL_PROC(connsm, BLE_LL_CTRL_PROC_CONN_PARAM_REQ)) {
   16726:	f013 0f40 	tst.w	r3, #64	; 0x40
   1672a:	d11c      	bne.n	16766 <ble_ll_conn_chk_csm_flags+0x5e>
        update_status = BLE_ERR_SUCCESS;
   1672c:	2100      	movs	r1, #0
        ble_ll_hci_ev_conn_update(connsm, update_status);
   1672e:	4620      	mov	r0, r4
   16730:	f004 f891 	bl	1a856 <ble_ll_hci_ev_conn_update>
        connsm->csmflags.cfbit.host_expects_upd_event = 0;
   16734:	7863      	ldrb	r3, [r4, #1]
   16736:	f36f 0341 	bfc	r3, #1, #1
   1673a:	7063      	strb	r3, [r4, #1]
}
   1673c:	bd10      	pop	{r4, pc}
        if (ble_ll_hci_ev_ltk_req(connsm)) {
   1673e:	f004 f8e5 	bl	1a90c <ble_ll_hci_ev_ltk_req>
   16742:	b920      	cbnz	r0, 1674e <ble_ll_conn_chk_csm_flags+0x46>
        connsm->csmflags.cfbit.send_ltk_req = 0;
   16744:	78a3      	ldrb	r3, [r4, #2]
   16746:	f36f 0300 	bfc	r3, #0, #1
   1674a:	70a3      	strb	r3, [r4, #2]
   1674c:	e7e2      	b.n	16714 <ble_ll_conn_chk_csm_flags+0xc>
            ble_ll_ctrl_reject_ind_send(connsm, BLE_LL_CTRL_ENC_REQ,
   1674e:	2206      	movs	r2, #6
   16750:	2103      	movs	r1, #3
   16752:	4620      	mov	r0, r4
   16754:	f003 fae0 	bl	19d18 <ble_ll_ctrl_reject_ind_send>
   16758:	e7f4      	b.n	16744 <ble_ll_conn_chk_csm_flags+0x3c>
            ble_ll_ctrl_proc_stop(connsm, BLE_LL_CTRL_PROC_CONN_UPDATE);
   1675a:	2100      	movs	r1, #0
   1675c:	4620      	mov	r0, r4
   1675e:	f002 ffaa 	bl	196b6 <ble_ll_ctrl_proc_stop>
        update_status = BLE_ERR_SUCCESS;
   16762:	2100      	movs	r1, #0
   16764:	e7e3      	b.n	1672e <ble_ll_conn_chk_csm_flags+0x26>
                ble_ll_ctrl_proc_stop(connsm, BLE_LL_CTRL_PROC_CONN_PARAM_REQ);
   16766:	2106      	movs	r1, #6
   16768:	4620      	mov	r0, r4
   1676a:	f002 ffa4 	bl	196b6 <ble_ll_ctrl_proc_stop>
                update_status = connsm->reject_reason;
   1676e:	f894 1037 	ldrb.w	r1, [r4, #55]	; 0x37
   16772:	e7dc      	b.n	1672e <ble_ll_conn_chk_csm_flags+0x26>

00016774 <ble_ll_conn_connect_ind_tx_pducb>:

static uint8_t
ble_ll_conn_connect_ind_tx_pducb(uint8_t *dptr, void *pducb_arg, uint8_t *hdr_byte)
{
   16774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16776:	4604      	mov	r4, r0
   16778:	460d      	mov	r5, r1
   1677a:	4617      	mov	r7, r2
    connsm = pducb_arg;
    /*
     * pdu_data was prepared just before starting TX and is expected to be
     * still valid here
     */
    pdu_data = ble_ll_scan_get_pdu_data();
   1677c:	f005 ffa8 	bl	1c6d0 <ble_ll_scan_get_pdu_data>
   16780:	4606      	mov	r6, r0

    memcpy(dptr, pdu_data->inita, BLE_DEV_ADDR_LEN);
   16782:	4603      	mov	r3, r0
   16784:	f853 2f01 	ldr.w	r2, [r3, #1]!
   16788:	6022      	str	r2, [r4, #0]
   1678a:	889b      	ldrh	r3, [r3, #4]
   1678c:	80a3      	strh	r3, [r4, #4]
    memcpy(dptr + BLE_DEV_ADDR_LEN, pdu_data->adva, BLE_DEV_ADDR_LEN);
   1678e:	4603      	mov	r3, r0
   16790:	f853 2f07 	ldr.w	r2, [r3, #7]!
   16794:	f8c4 2006 	str.w	r2, [r4, #6]
   16798:	889b      	ldrh	r3, [r3, #4]
   1679a:	8163      	strh	r3, [r4, #10]

    dptr += 2 * BLE_DEV_ADDR_LEN;

    put_le32(dptr, connsm->access_addr);
   1679c:	6d69      	ldr	r1, [r5, #84]	; 0x54
   1679e:	f104 000c 	add.w	r0, r4, #12
   167a2:	f018 fac7 	bl	2ed34 <put_le32>
    dptr[4] = (uint8_t)connsm->crcinit;
   167a6:	f895 3058 	ldrb.w	r3, [r5, #88]	; 0x58
   167aa:	7423      	strb	r3, [r4, #16]
    dptr[5] = (uint8_t)(connsm->crcinit >> 8);
   167ac:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
   167b0:	7463      	strb	r3, [r4, #17]
    dptr[6] = (uint8_t)(connsm->crcinit >> 16);
   167b2:	f895 305a 	ldrb.w	r3, [r5, #90]	; 0x5a
   167b6:	74a3      	strb	r3, [r4, #18]
    dptr[7] = connsm->tx_win_size;
   167b8:	f895 303a 	ldrb.w	r3, [r5, #58]	; 0x3a
   167bc:	74e3      	strb	r3, [r4, #19]
    put_le16(dptr + 8, connsm->tx_win_off);
   167be:	f8b5 1072 	ldrh.w	r1, [r5, #114]	; 0x72
   167c2:	f104 0014 	add.w	r0, r4, #20
   167c6:	f018 fab1 	bl	2ed2c <put_le16>
    put_le16(dptr + 10, connsm->conn_itvl);
   167ca:	f8b5 1068 	ldrh.w	r1, [r5, #104]	; 0x68
   167ce:	f104 0016 	add.w	r0, r4, #22
   167d2:	f018 faab 	bl	2ed2c <put_le16>
    put_le16(dptr + 12, connsm->slave_latency);
   167d6:	f8b5 106a 	ldrh.w	r1, [r5, #106]	; 0x6a
   167da:	f104 0018 	add.w	r0, r4, #24
   167de:	f018 faa5 	bl	2ed2c <put_le16>
    put_le16(dptr + 14, connsm->supervision_tmo);
   167e2:	f8b5 106c 	ldrh.w	r1, [r5, #108]	; 0x6c
   167e6:	f104 001a 	add.w	r0, r4, #26
   167ea:	f018 fa9f 	bl	2ed2c <put_le16>
    memcpy(dptr + 16, &connsm->chanmap, BLE_LL_CONN_CHMAP_LEN);
   167ee:	462b      	mov	r3, r5
   167f0:	f853 2f20 	ldr.w	r2, [r3, #32]!
   167f4:	61e2      	str	r2, [r4, #28]
   167f6:	791b      	ldrb	r3, [r3, #4]
   167f8:	f884 3020 	strb.w	r3, [r4, #32]
    dptr[21] = connsm->hop_inc | (connsm->master_sca << 5);
   167fc:	f995 302e 	ldrsb.w	r3, [r5, #46]	; 0x2e
   16800:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
   16804:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
   16808:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21

    *hdr_byte = pdu_data->hdr_byte;
   1680c:	7833      	ldrb	r3, [r6, #0]
   1680e:	703b      	strb	r3, [r7, #0]

    return 34;
}
   16810:	2022      	movs	r0, #34	; 0x22
   16812:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00016814 <ble_ll_conn_is_peer_adv>:
{
   16814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    connsm = g_ble_ll_conn_create_sm;
   16816:	4b3f      	ldr	r3, [pc, #252]	; (16914 <ble_ll_conn_is_peer_adv+0x100>)
   16818:	681d      	ldr	r5, [r3, #0]
    if (!connsm) {
   1681a:	2d00      	cmp	r5, #0
   1681c:	d06d      	beq.n	168fa <ble_ll_conn_is_peer_adv+0xe6>
   1681e:	4614      	mov	r4, r2
   16820:	460f      	mov	r7, r1
   16822:	4606      	mov	r6, r0
    switch (connsm->peer_addr_type) {
   16824:	f895 3092 	ldrb.w	r3, [r5, #146]	; 0x92
   16828:	2b03      	cmp	r3, #3
   1682a:	d868      	bhi.n	168fe <ble_ll_conn_is_peer_adv+0xea>
   1682c:	e8df f003 	tbb	[pc, r3]
   16830:	51420202 	.word	0x51420202
        if (ble_ll_addr_is_id(adva, addr_type)) {
   16834:	4601      	mov	r1, r0
   16836:	4638      	mov	r0, r7
   16838:	f7fd ff9d 	bl	14776 <ble_ll_addr_is_id>
   1683c:	b9d0      	cbnz	r0, 16874 <ble_ll_conn_is_peer_adv+0x60>
        if ((index >= 0) &&
   1683e:	2c00      	cmp	r4, #0
   16840:	db32      	blt.n	168a8 <ble_ll_conn_is_peer_adv+0x94>
                (g_ble_ll_resolv_list[index].rl_addr_type == connsm->peer_addr_type)) {
   16842:	2336      	movs	r3, #54	; 0x36
   16844:	fb03 f304 	mul.w	r3, r3, r4
   16848:	4a33      	ldr	r2, [pc, #204]	; (16918 <ble_ll_conn_is_peer_adv+0x104>)
   1684a:	5cd2      	ldrb	r2, [r2, r3]
   1684c:	f895 3092 	ldrb.w	r3, [r5, #146]	; 0x92
        if ((index >= 0) &&
   16850:	429a      	cmp	r2, r3
   16852:	d021      	beq.n	16898 <ble_ll_conn_is_peer_adv+0x84>
    uint8_t *peer_addr = NULL;
   16854:	2000      	movs	r0, #0
        if ((connsm->peer_addr_type == addr_type) && !peer_addr) {
   16856:	f895 3092 	ldrb.w	r3, [r5, #146]	; 0x92
   1685a:	42b3      	cmp	r3, r6
   1685c:	d026      	beq.n	168ac <ble_ll_conn_is_peer_adv+0x98>
    if (peer_addr) {
   1685e:	2800      	cmp	r0, #0
   16860:	d055      	beq.n	1690e <ble_ll_conn_is_peer_adv+0xfa>
        if (!memcmp(peer_addr, connsm->peer_addr, BLE_DEV_ADDR_LEN)) {
   16862:	2206      	movs	r2, #6
   16864:	f105 0193 	add.w	r1, r5, #147	; 0x93
   16868:	f7f8 f876 	bl	e958 <memcmp>
   1686c:	2800      	cmp	r0, #0
   1686e:	d142      	bne.n	168f6 <ble_ll_conn_is_peer_adv+0xe2>
            rc = 1;
   16870:	2001      	movs	r0, #1
   16872:	e043      	b.n	168fc <ble_ll_conn_is_peer_adv+0xe8>
            if (ble_ll_resolv_enabled()) {
   16874:	f004 fcb6 	bl	1b1e4 <ble_ll_resolv_enabled>
   16878:	2800      	cmp	r0, #0
   1687a:	d0e0      	beq.n	1683e <ble_ll_conn_is_peer_adv+0x2a>
                rl = ble_ll_resolv_list_find(adva, addr_type);
   1687c:	4631      	mov	r1, r6
   1687e:	4638      	mov	r0, r7
   16880:	f004 fa5a 	bl	1ad38 <ble_ll_resolv_list_find>
                if (rl && (rl->rl_priv_mode == BLE_HCI_PRIVACY_NETWORK) &&
   16884:	2800      	cmp	r0, #0
   16886:	d0da      	beq.n	1683e <ble_ll_conn_is_peer_adv+0x2a>
   16888:	7842      	ldrb	r2, [r0, #1]
   1688a:	2a00      	cmp	r2, #0
   1688c:	d1d7      	bne.n	1683e <ble_ll_conn_is_peer_adv+0x2a>
                    rl->rl_has_peer) {
   1688e:	78c3      	ldrb	r3, [r0, #3]
                if (rl && (rl->rl_priv_mode == BLE_HCI_PRIVACY_NETWORK) &&
   16890:	2b00      	cmp	r3, #0
   16892:	d0d4      	beq.n	1683e <ble_ll_conn_is_peer_adv+0x2a>
                    return 0;
   16894:	2000      	movs	r0, #0
   16896:	e031      	b.n	168fc <ble_ll_conn_is_peer_adv+0xe8>
            peer_addr = g_ble_ll_resolv_list[index].rl_identity_addr;
   16898:	2036      	movs	r0, #54	; 0x36
   1689a:	fb00 f004 	mul.w	r0, r0, r4
   1689e:	3020      	adds	r0, #32
   168a0:	4b1d      	ldr	r3, [pc, #116]	; (16918 <ble_ll_conn_is_peer_adv+0x104>)
   168a2:	4418      	add	r0, r3
   168a4:	3004      	adds	r0, #4
   168a6:	e7d6      	b.n	16856 <ble_ll_conn_is_peer_adv+0x42>
    uint8_t *peer_addr = NULL;
   168a8:	2000      	movs	r0, #0
   168aa:	e7d4      	b.n	16856 <ble_ll_conn_is_peer_adv+0x42>
        if ((connsm->peer_addr_type == addr_type) && !peer_addr) {
   168ac:	2800      	cmp	r0, #0
   168ae:	d1d6      	bne.n	1685e <ble_ll_conn_is_peer_adv+0x4a>
            peer_addr = adva;
   168b0:	4638      	mov	r0, r7
   168b2:	e7d4      	b.n	1685e <ble_ll_conn_is_peer_adv+0x4a>
        if ((index < 0) ||
   168b4:	2c00      	cmp	r4, #0
   168b6:	db24      	blt.n	16902 <ble_ll_conn_is_peer_adv+0xee>
            (g_ble_ll_resolv_list[index].rl_addr_type != 0)) {
   168b8:	2336      	movs	r3, #54	; 0x36
   168ba:	fb03 f304 	mul.w	r3, r3, r4
   168be:	4a16      	ldr	r2, [pc, #88]	; (16918 <ble_ll_conn_is_peer_adv+0x104>)
   168c0:	5cd3      	ldrb	r3, [r2, r3]
        if ((index < 0) ||
   168c2:	bb03      	cbnz	r3, 16906 <ble_ll_conn_is_peer_adv+0xf2>
        peer_addr = g_ble_ll_resolv_list[index].rl_identity_addr;
   168c4:	2036      	movs	r0, #54	; 0x36
   168c6:	fb00 f004 	mul.w	r0, r0, r4
   168ca:	3020      	adds	r0, #32
   168cc:	4410      	add	r0, r2
   168ce:	3004      	adds	r0, #4
        break;
   168d0:	e7c5      	b.n	1685e <ble_ll_conn_is_peer_adv+0x4a>
        if ((index < 0) ||
   168d2:	2c00      	cmp	r4, #0
   168d4:	db19      	blt.n	1690a <ble_ll_conn_is_peer_adv+0xf6>
            (g_ble_ll_resolv_list[index].rl_addr_type != 1)) {
   168d6:	2336      	movs	r3, #54	; 0x36
   168d8:	fb03 f304 	mul.w	r3, r3, r4
   168dc:	4a0e      	ldr	r2, [pc, #56]	; (16918 <ble_ll_conn_is_peer_adv+0x104>)
   168de:	5cd3      	ldrb	r3, [r2, r3]
        if ((index < 0) ||
   168e0:	2b01      	cmp	r3, #1
   168e2:	d001      	beq.n	168e8 <ble_ll_conn_is_peer_adv+0xd4>
            return 0;
   168e4:	2000      	movs	r0, #0
   168e6:	e009      	b.n	168fc <ble_ll_conn_is_peer_adv+0xe8>
        peer_addr = g_ble_ll_resolv_list[index].rl_identity_addr;
   168e8:	2036      	movs	r0, #54	; 0x36
   168ea:	fb00 f004 	mul.w	r0, r0, r4
   168ee:	3020      	adds	r0, #32
   168f0:	4410      	add	r0, r2
   168f2:	3004      	adds	r0, #4
        break;
   168f4:	e7b3      	b.n	1685e <ble_ll_conn_is_peer_adv+0x4a>
    rc = 0;
   168f6:	2000      	movs	r0, #0
   168f8:	e000      	b.n	168fc <ble_ll_conn_is_peer_adv+0xe8>
        return 0;
   168fa:	2000      	movs	r0, #0
}
   168fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    rc = 0;
   168fe:	2000      	movs	r0, #0
   16900:	e7fc      	b.n	168fc <ble_ll_conn_is_peer_adv+0xe8>
            return 0;
   16902:	2000      	movs	r0, #0
   16904:	e7fa      	b.n	168fc <ble_ll_conn_is_peer_adv+0xe8>
   16906:	2000      	movs	r0, #0
   16908:	e7f8      	b.n	168fc <ble_ll_conn_is_peer_adv+0xe8>
            return 0;
   1690a:	2000      	movs	r0, #0
   1690c:	e7f6      	b.n	168fc <ble_ll_conn_is_peer_adv+0xe8>
    rc = 0;
   1690e:	2000      	movs	r0, #0
   16910:	e7f4      	b.n	168fc <ble_ll_conn_is_peer_adv+0xe8>
   16912:	bf00      	nop
   16914:	20003888 	.word	0x20003888
   16918:	20003ae0 	.word	0x20003ae0

0001691c <ble_ll_conn_connect_ind_prepare>:
{
   1691c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   16920:	460c      	mov	r4, r1
   16922:	461d      	mov	r5, r3
   16924:	f89d 1020 	ldrb.w	r1, [sp, #32]
   16928:	9b09      	ldr	r3, [sp, #36]	; 0x24
    if (adva_type) {
   1692a:	4690      	mov	r8, r2
   1692c:	b99a      	cbnz	r2, 16956 <ble_ll_conn_connect_ind_prepare+0x3a>
    hdr = BLE_ADV_PDU_TYPE_CONNECT_IND;
   1692e:	2605      	movs	r6, #5
    if (inita) {
   16930:	b19b      	cbz	r3, 1695a <ble_ll_conn_connect_ind_prepare+0x3e>
        memcpy(pdu_data->inita, inita, BLE_DEV_ADDR_LEN);
   16932:	681a      	ldr	r2, [r3, #0]
   16934:	f8c4 2001 	str.w	r2, [r4, #1]
   16938:	889b      	ldrh	r3, [r3, #4]
   1693a:	f8a4 3005 	strh.w	r3, [r4, #5]
        if (inita_type) {
   1693e:	b109      	cbz	r1, 16944 <ble_ll_conn_connect_ind_prepare+0x28>
            hdr |= BLE_ADV_PDU_HDR_TXADD_RAND;
   16940:	f046 0640 	orr.w	r6, r6, #64	; 0x40
    memcpy(pdu_data->adva, adva, BLE_DEV_ADDR_LEN);
   16944:	682b      	ldr	r3, [r5, #0]
   16946:	f8c4 3007 	str.w	r3, [r4, #7]
   1694a:	88ab      	ldrh	r3, [r5, #4]
   1694c:	f8a4 300b 	strh.w	r3, [r4, #11]
    pdu_data->hdr_byte = hdr;
   16950:	7026      	strb	r6, [r4, #0]
}
   16952:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        hdr |= BLE_ADV_PDU_HDR_RXADD_MASK;
   16956:	2685      	movs	r6, #133	; 0x85
   16958:	e7ea      	b.n	16930 <ble_ll_conn_connect_ind_prepare+0x14>
        connsm = g_ble_ll_conn_create_sm;
   1695a:	4b1c      	ldr	r3, [pc, #112]	; (169cc <ble_ll_conn_connect_ind_prepare+0xb0>)
   1695c:	f8d3 9000 	ldr.w	r9, [r3]
        if ((connsm->own_addr_type & 1) == 0) {
   16960:	f899 3091 	ldrb.w	r3, [r9, #145]	; 0x91
   16964:	f013 0f01 	tst.w	r3, #1
   16968:	d010      	beq.n	1698c <ble_ll_conn_connect_ind_prepare+0x70>
            hdr |= BLE_ADV_PDU_HDR_TXADD_RAND;
   1696a:	f046 0640 	orr.w	r6, r6, #64	; 0x40
            addr = g_random_addr;
   1696e:	4f18      	ldr	r7, [pc, #96]	; (169d0 <ble_ll_conn_connect_ind_prepare+0xb4>)
        if (connsm->own_addr_type > BLE_HCI_ADV_OWN_ADDR_RANDOM) {
   16970:	2b01      	cmp	r3, #1
   16972:	d80d      	bhi.n	16990 <ble_ll_conn_connect_ind_prepare+0x74>
        if (addr) {
   16974:	2f00      	cmp	r7, #0
   16976:	d0e5      	beq.n	16944 <ble_ll_conn_connect_ind_prepare+0x28>
            memcpy(pdu_data->inita, addr, BLE_DEV_ADDR_LEN);
   16978:	683b      	ldr	r3, [r7, #0]
   1697a:	f8c4 3001 	str.w	r3, [r4, #1]
   1697e:	88bb      	ldrh	r3, [r7, #4]
   16980:	f8a4 3005 	strh.w	r3, [r4, #5]
            connsm->inita_identity_used = 1;
   16984:	2301      	movs	r3, #1
   16986:	f889 3090 	strb.w	r3, [r9, #144]	; 0x90
   1698a:	e7db      	b.n	16944 <ble_ll_conn_connect_ind_prepare+0x28>
            addr = g_dev_addr;
   1698c:	4f11      	ldr	r7, [pc, #68]	; (169d4 <ble_ll_conn_connect_ind_prepare+0xb8>)
   1698e:	e7ef      	b.n	16970 <ble_ll_conn_connect_ind_prepare+0x54>
            is_rpa = ble_ll_is_rpa(adva, adva_type);
   16990:	4641      	mov	r1, r8
   16992:	4628      	mov	r0, r5
   16994:	f7fd fee3 	bl	1475e <ble_ll_is_rpa>
            if (is_rpa) {
   16998:	b198      	cbz	r0, 169c2 <ble_ll_conn_connect_ind_prepare+0xa6>
                if (rpa_index >= 0) {
   1699a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1699c:	2b00      	cmp	r3, #0
   1699e:	dbe9      	blt.n	16974 <ble_ll_conn_connect_ind_prepare+0x58>
                    rl = &g_ble_ll_resolv_list[rpa_index];
   169a0:	2336      	movs	r3, #54	; 0x36
   169a2:	480d      	ldr	r0, [pc, #52]	; (169d8 <ble_ll_conn_connect_ind_prepare+0xbc>)
   169a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   169a6:	fb03 0002 	mla	r0, r3, r2, r0
            if (rl && rl->rl_has_local) {
   169aa:	2800      	cmp	r0, #0
   169ac:	d0e2      	beq.n	16974 <ble_ll_conn_connect_ind_prepare+0x58>
   169ae:	7883      	ldrb	r3, [r0, #2]
   169b0:	2b00      	cmp	r3, #0
   169b2:	d0df      	beq.n	16974 <ble_ll_conn_connect_ind_prepare+0x58>
                hdr |= BLE_ADV_PDU_HDR_TXADD_RAND;
   169b4:	f046 0640 	orr.w	r6, r6, #64	; 0x40
                ble_ll_resolv_get_priv_addr(rl, 1, pdu_data->inita);
   169b8:	1c62      	adds	r2, r4, #1
   169ba:	2101      	movs	r1, #1
   169bc:	f004 fb56 	bl	1b06c <ble_ll_resolv_get_priv_addr>
   169c0:	e7c0      	b.n	16944 <ble_ll_conn_connect_ind_prepare+0x28>
                 rl = ble_ll_resolv_list_find(adva, adva_type);
   169c2:	4641      	mov	r1, r8
   169c4:	4628      	mov	r0, r5
   169c6:	f004 f9b7 	bl	1ad38 <ble_ll_resolv_list_find>
   169ca:	e7ee      	b.n	169aa <ble_ll_conn_connect_ind_prepare+0x8e>
   169cc:	20003888 	.word	0x20003888
   169d0:	200036cc 	.word	0x200036cc
   169d4:	200036d4 	.word	0x200036d4
   169d8:	20003ae0 	.word	0x20003ae0

000169dc <ble_ll_conn_is_lru>:
    if ((int32_t)(s1->last_scheduled - s2->last_scheduled) < 0) {
   169dc:	6e43      	ldr	r3, [r0, #100]	; 0x64
   169de:	6e4a      	ldr	r2, [r1, #100]	; 0x64
   169e0:	1a9b      	subs	r3, r3, r2
   169e2:	2b00      	cmp	r3, #0
   169e4:	db01      	blt.n	169ea <ble_ll_conn_is_lru+0xe>
        rc = 0;
   169e6:	2000      	movs	r0, #0
}
   169e8:	4770      	bx	lr
        rc = 1;
   169ea:	2001      	movs	r0, #1
   169ec:	4770      	bx	lr
	...

000169f0 <ble_ll_conn_get_ce_end_time>:
{
   169f0:	b508      	push	{r3, lr}
    if (g_ble_ll_conn_cur_sm) {
   169f2:	4b04      	ldr	r3, [pc, #16]	; (16a04 <ble_ll_conn_get_ce_end_time+0x14>)
   169f4:	681b      	ldr	r3, [r3, #0]
   169f6:	b10b      	cbz	r3, 169fc <ble_ll_conn_get_ce_end_time+0xc>
        ce_end_time = g_ble_ll_conn_cur_sm->ce_end_time;
   169f8:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
}
   169fa:	bd08      	pop	{r3, pc}
        ce_end_time = os_cputime_get32();
   169fc:	f018 fa57 	bl	2eeae <os_cputime_get32>
    return ce_end_time;
   16a00:	e7fb      	b.n	169fa <ble_ll_conn_get_ce_end_time+0xa>
   16a02:	bf00      	nop
   16a04:	20003878 	.word	0x20003878

00016a08 <ble_ll_conn_find_active_conn>:
    if ((handle != 0) && (handle <= MYNEWT_VAL(BLE_MAX_CONNECTIONS))) {
   16a08:	2801      	cmp	r0, #1
   16a0a:	d108      	bne.n	16a1e <ble_ll_conn_find_active_conn+0x16>
        connsm = &g_ble_ll_conn_sm[handle - 1];
   16a0c:	3801      	subs	r0, #1
   16a0e:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
   16a12:	4b05      	ldr	r3, [pc, #20]	; (16a28 <ble_ll_conn_find_active_conn+0x20>)
   16a14:	fb02 3000 	mla	r0, r2, r0, r3
        if (connsm->conn_state == BLE_LL_CONN_STATE_IDLE) {
   16a18:	7983      	ldrb	r3, [r0, #6]
   16a1a:	b113      	cbz	r3, 16a22 <ble_ll_conn_find_active_conn+0x1a>
}
   16a1c:	4770      	bx	lr
    connsm = NULL;
   16a1e:	2000      	movs	r0, #0
   16a20:	4770      	bx	lr
            connsm = NULL;
   16a22:	2000      	movs	r0, #0
    return connsm;
   16a24:	e7fa      	b.n	16a1c <ble_ll_conn_find_active_conn+0x14>
   16a26:	bf00      	nop
   16a28:	20003890 	.word	0x20003890

00016a2c <ble_ll_conn_sm_get>:
    connsm = STAILQ_FIRST(&g_ble_ll_conn_free_list);
   16a2c:	4b08      	ldr	r3, [pc, #32]	; (16a50 <ble_ll_conn_sm_get+0x24>)
   16a2e:	6818      	ldr	r0, [r3, #0]
    if (connsm) {
   16a30:	b140      	cbz	r0, 16a44 <ble_ll_conn_sm_get+0x18>
        STAILQ_REMOVE_HEAD(&g_ble_ll_conn_free_list, free_stqe);
   16a32:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
   16a36:	4a06      	ldr	r2, [pc, #24]	; (16a50 <ble_ll_conn_sm_get+0x24>)
   16a38:	6013      	str	r3, [r2, #0]
   16a3a:	b103      	cbz	r3, 16a3e <ble_ll_conn_sm_get+0x12>
}
   16a3c:	4770      	bx	lr
        STAILQ_REMOVE_HEAD(&g_ble_ll_conn_free_list, free_stqe);
   16a3e:	4613      	mov	r3, r2
   16a40:	605a      	str	r2, [r3, #4]
   16a42:	4770      	bx	lr
        STATS_INC(ble_ll_conn_stats, no_free_conn_sm);
   16a44:	4a03      	ldr	r2, [pc, #12]	; (16a54 <ble_ll_conn_sm_get+0x28>)
   16a46:	6a13      	ldr	r3, [r2, #32]
   16a48:	3301      	adds	r3, #1
   16a4a:	6213      	str	r3, [r2, #32]
    return connsm;
   16a4c:	e7f6      	b.n	16a3c <ble_ll_conn_sm_get+0x10>
   16a4e:	bf00      	nop
   16a50:	20003880 	.word	0x20003880
   16a54:	20003a30 	.word	0x20003a30

00016a58 <ble_ll_conn_calc_dci>:
{
   16a58:	b538      	push	{r3, r4, r5, lr}
   16a5a:	4605      	mov	r5, r0
   16a5c:	460c      	mov	r4, r1
    index = conn->data_chan_index;
   16a5e:	f890 002f 	ldrb.w	r0, [r0, #47]	; 0x2f
    while (latency > 0) {
   16a62:	e004      	b.n	16a6e <ble_ll_conn_calc_dci+0x16>
        index = ble_ll_conn_calc_dci_csa1(conn);
   16a64:	4628      	mov	r0, r5
   16a66:	f7ff fa0a 	bl	15e7e <ble_ll_conn_calc_dci_csa1>
        latency--;
   16a6a:	3c01      	subs	r4, #1
   16a6c:	b2a4      	uxth	r4, r4
    while (latency > 0) {
   16a6e:	2c00      	cmp	r4, #0
   16a70:	d1f8      	bne.n	16a64 <ble_ll_conn_calc_dci+0xc>
}
   16a72:	bd38      	pop	{r3, r4, r5, pc}

00016a74 <ble_ll_conn_next_event>:
{
   16a74:	b570      	push	{r4, r5, r6, lr}
   16a76:	4604      	mov	r4, r0
    ble_ll_conn_chk_csm_flags(connsm);
   16a78:	f7ff fe46 	bl	16708 <ble_ll_conn_chk_csm_flags>
    if (connsm->disconnect_reason && !CONN_F_TERMINATE_STARTED(connsm)) {
   16a7c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   16a80:	b11b      	cbz	r3, 16a8a <ble_ll_conn_next_event+0x16>
   16a82:	f994 3000 	ldrsb.w	r3, [r4]
   16a86:	2b00      	cmp	r3, #0
   16a88:	da59      	bge.n	16b3e <ble_ll_conn_next_event+0xca>
    if (CONN_F_TERMINATE_STARTED(connsm) && (connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE)) {
   16a8a:	7822      	ldrb	r2, [r4, #0]
   16a8c:	f012 0f80 	tst.w	r2, #128	; 0x80
   16a90:	d159      	bne.n	16b46 <ble_ll_conn_next_event+0xd2>
    itvl = connsm->conn_itvl * BLE_LL_CONN_ITVL_USECS;
   16a92:	f8b4 0068 	ldrh.w	r0, [r4, #104]	; 0x68
   16a96:	f240 45e2 	movw	r5, #1250	; 0x4e2
   16a9a:	fb05 f500 	mul.w	r5, r5, r0
        !CONN_F_PHY_UPDATE_SCHED(connsm)                &&
   16a9e:	6821      	ldr	r1, [r4, #0]
   16aa0:	4b8c      	ldr	r3, [pc, #560]	; (16cd4 <ble_ll_conn_next_event+0x260>)
   16aa2:	400b      	ands	r3, r1
    if (connsm->csmflags.cfbit.allow_slave_latency      &&
   16aa4:	2b10      	cmp	r3, #16
   16aa6:	d055      	beq.n	16b54 <ble_ll_conn_next_event+0xe0>
    latency = 1;
   16aa8:	2601      	movs	r6, #1
    connsm->event_cntr += latency;
   16aaa:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
   16aae:	4433      	add	r3, r6
   16ab0:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
    if (latency == 1) {
   16ab4:	2e01      	cmp	r6, #1
   16ab6:	d159      	bne.n	16b6c <ble_ll_conn_next_event+0xf8>
        connsm->anchor_point += connsm->conn_itvl_ticks;
   16ab8:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
   16aba:	6f63      	ldr	r3, [r4, #116]	; 0x74
   16abc:	4413      	add	r3, r2
   16abe:	6763      	str	r3, [r4, #116]	; 0x74
        connsm->anchor_point_usecs += connsm->conn_itvl_usecs;
   16ac0:	f894 3079 	ldrb.w	r3, [r4, #121]	; 0x79
   16ac4:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
   16ac8:	4413      	add	r3, r2
   16aca:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    if (connsm->anchor_point_usecs >= 31) {
   16ace:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   16ad2:	2b1e      	cmp	r3, #30
   16ad4:	d905      	bls.n	16ae2 <ble_ll_conn_next_event+0x6e>
        ++connsm->anchor_point;
   16ad6:	6f62      	ldr	r2, [r4, #116]	; 0x74
   16ad8:	3201      	adds	r2, #1
   16ada:	6762      	str	r2, [r4, #116]	; 0x74
        connsm->anchor_point_usecs -= 31;
   16adc:	3b1f      	subs	r3, #31
   16ade:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    if (connsm->csmflags.cfbit.conn_update_sched &&
   16ae2:	7863      	ldrb	r3, [r4, #1]
   16ae4:	f013 0f01 	tst.w	r3, #1
   16ae8:	d005      	beq.n	16af6 <ble_ll_conn_next_event+0x82>
        (connsm->event_cntr == connsm->conn_update_req.instant)) {
   16aea:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
   16aee:	f8b4 3180 	ldrh.w	r3, [r4, #384]	; 0x180
    if (connsm->csmflags.cfbit.conn_update_sched &&
   16af2:	429a      	cmp	r2, r3
   16af4:	d049      	beq.n	16b8a <ble_ll_conn_next_event+0x116>
    if (connsm->csmflags.cfbit.chanmap_update_scheduled &&
   16af6:	7863      	ldrb	r3, [r4, #1]
   16af8:	f013 0f10 	tst.w	r3, #16
   16afc:	d007      	beq.n	16b0e <ble_ll_conn_next_event+0x9a>
        ((int16_t)(connsm->chanmap_instant - connsm->event_cntr) <= 0)) {
   16afe:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
   16b00:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
   16b04:	1a9b      	subs	r3, r3, r2
   16b06:	b21b      	sxth	r3, r3
    if (connsm->csmflags.cfbit.chanmap_update_scheduled &&
   16b08:	2b00      	cmp	r3, #0
   16b0a:	f340 80a4 	ble.w	16c56 <ble_ll_conn_next_event+0x1e2>
    connsm->data_chan_index = ble_ll_conn_calc_dci(connsm, latency);
   16b0e:	4631      	mov	r1, r6
   16b10:	4620      	mov	r0, r4
   16b12:	f7ff ffa1 	bl	16a58 <ble_ll_conn_calc_dci>
   16b16:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
    if (CONN_F_TERMINATE_STARTED(connsm)) {
   16b1a:	f994 3000 	ldrsb.w	r3, [r4]
   16b1e:	2b00      	cmp	r3, #0
   16b20:	f2c0 80b0 	blt.w	16c84 <ble_ll_conn_next_event+0x210>
    if (connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) {
   16b24:	79e3      	ldrb	r3, [r4, #7]
   16b26:	2b02      	cmp	r3, #2
   16b28:	f000 80b5 	beq.w	16c96 <ble_ll_conn_next_event+0x222>
    itvl = MYNEWT_VAL(BLE_LL_CONN_INIT_SLOTS) * BLE_LL_SCHED_32KHZ_TICKS_PER_SLOT;
   16b2c:	23a4      	movs	r3, #164	; 0xa4
    itvl -= g_ble_ll_sched_offset_ticks;
   16b2e:	4a6a      	ldr	r2, [pc, #424]	; (16cd8 <ble_ll_conn_next_event+0x264>)
   16b30:	7810      	ldrb	r0, [r2, #0]
   16b32:	1a18      	subs	r0, r3, r0
    connsm->ce_end_time = connsm->anchor_point + itvl;
   16b34:	6f63      	ldr	r3, [r4, #116]	; 0x74
   16b36:	4403      	add	r3, r0
   16b38:	65e3      	str	r3, [r4, #92]	; 0x5c
    return 0;
   16b3a:	2000      	movs	r0, #0
}
   16b3c:	bd70      	pop	{r4, r5, r6, pc}
        ble_ll_ctrl_terminate_start(connsm);
   16b3e:	4620      	mov	r0, r4
   16b40:	f002 fd1c 	bl	1957c <ble_ll_ctrl_terminate_start>
   16b44:	e7a1      	b.n	16a8a <ble_ll_conn_next_event+0x16>
    if (CONN_F_TERMINATE_STARTED(connsm) && (connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE)) {
   16b46:	79e3      	ldrb	r3, [r4, #7]
   16b48:	2b02      	cmp	r3, #2
   16b4a:	d1a2      	bne.n	16a92 <ble_ll_conn_next_event+0x1e>
        connsm->slave_latency = 0;
   16b4c:	2300      	movs	r3, #0
   16b4e:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
   16b52:	e79e      	b.n	16a92 <ble_ll_conn_next_event+0x1e>
        if (connsm->csmflags.cfbit.pkt_rxd) {
   16b54:	f012 0f01 	tst.w	r2, #1
   16b58:	d006      	beq.n	16b68 <ble_ll_conn_next_event+0xf4>
            latency += connsm->slave_latency;
   16b5a:	f8b4 606a 	ldrh.w	r6, [r4, #106]	; 0x6a
   16b5e:	3601      	adds	r6, #1
   16b60:	b2b6      	uxth	r6, r6
            itvl = itvl * latency;
   16b62:	fb06 f505 	mul.w	r5, r6, r5
   16b66:	e7a0      	b.n	16aaa <ble_ll_conn_next_event+0x36>
    latency = 1;
   16b68:	2601      	movs	r6, #1
   16b6a:	e79e      	b.n	16aaa <ble_ll_conn_next_event+0x36>
        ticks = os_cputime_usecs_to_ticks(itvl);
   16b6c:	4628      	mov	r0, r5
   16b6e:	f018 f9a3 	bl	2eeb8 <os_cputime_usecs_to_ticks>
        connsm->anchor_point += ticks;
   16b72:	6f63      	ldr	r3, [r4, #116]	; 0x74
   16b74:	4403      	add	r3, r0
   16b76:	6763      	str	r3, [r4, #116]	; 0x74
        connsm->anchor_point_usecs += (itvl - os_cputime_ticks_to_usecs(ticks));
   16b78:	f018 f9a6 	bl	2eec8 <os_cputime_ticks_to_usecs>
   16b7c:	1a28      	subs	r0, r5, r0
   16b7e:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
   16b82:	4428      	add	r0, r5
   16b84:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78
   16b88:	e7a1      	b.n	16ace <ble_ll_conn_next_event+0x5a>
        if ((connsm->conn_role == BLE_LL_CONN_ROLE_MASTER)  ||
   16b8a:	79e3      	ldrb	r3, [r4, #7]
   16b8c:	2b01      	cmp	r3, #1
   16b8e:	d007      	beq.n	16ba0 <ble_ll_conn_next_event+0x12c>
   16b90:	2b02      	cmp	r3, #2
   16b92:	d031      	beq.n	16bf8 <ble_ll_conn_next_event+0x184>
            (connsm->conn_itvl != upd->interval)            ||
   16b94:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
   16b98:	f8b4 317a 	ldrh.w	r3, [r4, #378]	; 0x17a
             IS_PENDING_CTRL_PROC(connsm, BLE_LL_CTRL_PROC_CONN_PARAM_REQ)) ||
   16b9c:	429a      	cmp	r2, r3
   16b9e:	d031      	beq.n	16c04 <ble_ll_conn_next_event+0x190>
            connsm->csmflags.cfbit.host_expects_upd_event = 1;
   16ba0:	7863      	ldrb	r3, [r4, #1]
   16ba2:	f043 0302 	orr.w	r3, r3, #2
   16ba6:	7063      	strb	r3, [r4, #1]
        connsm->supervision_tmo = upd->timeout;
   16ba8:	f8b4 317e 	ldrh.w	r3, [r4, #382]	; 0x17e
   16bac:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
        connsm->slave_latency = upd->latency;
   16bb0:	f8b4 317c 	ldrh.w	r3, [r4, #380]	; 0x17c
   16bb4:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
        connsm->tx_win_size = upd->winsize;
   16bb8:	f894 2176 	ldrb.w	r2, [r4, #374]	; 0x176
   16bbc:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
            connsm->tx_win_size * BLE_LL_CONN_TX_WIN_USECS;
   16bc0:	f240 43e2 	movw	r3, #1250	; 0x4e2
   16bc4:	fb03 f302 	mul.w	r3, r3, r2
        connsm->slave_cur_tx_win_usecs =
   16bc8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        connsm->tx_win_off = upd->winoffset;
   16bcc:	f8b4 3178 	ldrh.w	r3, [r4, #376]	; 0x178
   16bd0:	f8a4 3072 	strh.w	r3, [r4, #114]	; 0x72
        connsm->conn_itvl = upd->interval;
   16bd4:	f8b4 317a 	ldrh.w	r3, [r4, #378]	; 0x17a
   16bd8:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
        ble_ll_conn_calc_itvl_ticks(connsm);
   16bdc:	4620      	mov	r0, r4
   16bde:	f7ff fd41 	bl	16664 <ble_ll_conn_calc_itvl_ticks>
        if (upd->winoffset != 0) {
   16be2:	f8b4 3178 	ldrh.w	r3, [r4, #376]	; 0x178
   16be6:	b9d3      	cbnz	r3, 16c1e <ble_ll_conn_next_event+0x1aa>
        connsm->last_rxd_pdu_cputime = connsm->anchor_point;
   16be8:	6f63      	ldr	r3, [r4, #116]	; 0x74
   16bea:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        connsm->csmflags.cfbit.conn_update_sched = 0;
   16bee:	7863      	ldrb	r3, [r4, #1]
   16bf0:	f36f 0300 	bfc	r3, #0, #1
   16bf4:	7063      	strb	r3, [r4, #1]
   16bf6:	e77e      	b.n	16af6 <ble_ll_conn_next_event+0x82>
             IS_PENDING_CTRL_PROC(connsm, BLE_LL_CTRL_PROC_CONN_PARAM_REQ)) ||
   16bf8:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
            ((connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) &&
   16bfc:	f013 0f40 	tst.w	r3, #64	; 0x40
   16c00:	d1ce      	bne.n	16ba0 <ble_ll_conn_next_event+0x12c>
   16c02:	e7c7      	b.n	16b94 <ble_ll_conn_next_event+0x120>
            (connsm->slave_latency != upd->latency)         ||
   16c04:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
   16c08:	f8b4 317c 	ldrh.w	r3, [r4, #380]	; 0x17c
            (connsm->conn_itvl != upd->interval)            ||
   16c0c:	429a      	cmp	r2, r3
   16c0e:	d1c7      	bne.n	16ba0 <ble_ll_conn_next_event+0x12c>
            (connsm->supervision_tmo != upd->timeout)) {
   16c10:	f8b4 206c 	ldrh.w	r2, [r4, #108]	; 0x6c
   16c14:	f8b4 317e 	ldrh.w	r3, [r4, #382]	; 0x17e
            (connsm->slave_latency != upd->latency)         ||
   16c18:	429a      	cmp	r2, r3
   16c1a:	d1c1      	bne.n	16ba0 <ble_ll_conn_next_event+0x12c>
   16c1c:	e7c4      	b.n	16ba8 <ble_ll_conn_next_event+0x134>
            usecs = upd->winoffset * BLE_LL_CONN_ITVL_USECS;
   16c1e:	f240 45e2 	movw	r5, #1250	; 0x4e2
   16c22:	fb05 f503 	mul.w	r5, r5, r3
            ticks = os_cputime_usecs_to_ticks(usecs);
   16c26:	4628      	mov	r0, r5
   16c28:	f018 f946 	bl	2eeb8 <os_cputime_usecs_to_ticks>
            connsm->anchor_point += ticks;
   16c2c:	6f63      	ldr	r3, [r4, #116]	; 0x74
   16c2e:	4403      	add	r3, r0
   16c30:	6763      	str	r3, [r4, #116]	; 0x74
            usecs = usecs - os_cputime_ticks_to_usecs(ticks);
   16c32:	f018 f949 	bl	2eec8 <os_cputime_ticks_to_usecs>
   16c36:	1a28      	subs	r0, r5, r0
            connsm->anchor_point_usecs += usecs;
   16c38:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   16c3c:	4403      	add	r3, r0
   16c3e:	b2db      	uxtb	r3, r3
   16c40:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
            if (connsm->anchor_point_usecs >= 31) {
   16c44:	2b1e      	cmp	r3, #30
   16c46:	d9cf      	bls.n	16be8 <ble_ll_conn_next_event+0x174>
                ++connsm->anchor_point;
   16c48:	6f62      	ldr	r2, [r4, #116]	; 0x74
   16c4a:	3201      	adds	r2, #1
   16c4c:	6762      	str	r2, [r4, #116]	; 0x74
                connsm->anchor_point_usecs -= 31;
   16c4e:	3b1f      	subs	r3, #31
   16c50:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
   16c54:	e7c8      	b.n	16be8 <ble_ll_conn_next_event+0x174>
            ble_ll_utils_calc_num_used_chans(connsm->req_chanmap);
   16c56:	f104 0525 	add.w	r5, r4, #37	; 0x25
   16c5a:	4628      	mov	r0, r5
   16c5c:	f006 faa3 	bl	1d1a6 <ble_ll_utils_calc_num_used_chans>
        connsm->num_used_chans =
   16c60:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
        memcpy(connsm->chanmap, connsm->req_chanmap, BLE_LL_CONN_CHMAP_LEN);
   16c64:	f8d4 3025 	ldr.w	r3, [r4, #37]	; 0x25
   16c68:	6223      	str	r3, [r4, #32]
   16c6a:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   16c6e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
        connsm->csmflags.cfbit.chanmap_update_scheduled = 0;
   16c72:	7863      	ldrb	r3, [r4, #1]
   16c74:	f36f 1304 	bfc	r3, #4, #1
   16c78:	7063      	strb	r3, [r4, #1]
        ble_ll_ctrl_proc_stop(connsm, BLE_LL_CTRL_PROC_CHAN_MAP_UPD);
   16c7a:	2101      	movs	r1, #1
   16c7c:	4620      	mov	r0, r4
   16c7e:	f002 fd1a 	bl	196b6 <ble_ll_ctrl_proc_stop>
   16c82:	e744      	b.n	16b0e <ble_ll_conn_next_event+0x9a>
        if ((int32_t)(connsm->terminate_timeout - connsm->anchor_point) <= 0) {
   16c84:	6e23      	ldr	r3, [r4, #96]	; 0x60
   16c86:	6f62      	ldr	r2, [r4, #116]	; 0x74
   16c88:	1a9b      	subs	r3, r3, r2
   16c8a:	2b00      	cmp	r3, #0
   16c8c:	f73f af4a 	bgt.w	16b24 <ble_ll_conn_next_event+0xb0>
            return -1;
   16c90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16c94:	e752      	b.n	16b3c <ble_ll_conn_next_event+0xc8>
        cur_ww = ble_ll_utils_calc_window_widening(connsm->anchor_point,
   16c96:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
   16c9a:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
   16c9e:	6f60      	ldr	r0, [r4, #116]	; 0x74
   16ca0:	f006 faa0 	bl	1d1e4 <ble_ll_utils_calc_window_widening>
        max_ww = (connsm->conn_itvl * (BLE_LL_CONN_ITVL_USECS/2)) - BLE_LL_IFS;
   16ca4:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
   16ca8:	f240 2371 	movw	r3, #625	; 0x271
   16cac:	fb03 f302 	mul.w	r3, r3, r2
   16cb0:	3b96      	subs	r3, #150	; 0x96
        if (cur_ww >= max_ww) {
   16cb2:	4298      	cmp	r0, r3
   16cb4:	d20a      	bcs.n	16ccc <ble_ll_conn_next_event+0x258>
        cur_ww += BLE_LL_JITTER_USECS;
   16cb6:	3010      	adds	r0, #16
        connsm->slave_cur_window_widening = cur_ww;
   16cb8:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
        itvl += os_cputime_usecs_to_ticks(cur_ww + connsm->slave_cur_tx_win_usecs);
   16cbc:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
   16cc0:	4418      	add	r0, r3
   16cc2:	f018 f8f9 	bl	2eeb8 <os_cputime_usecs_to_ticks>
   16cc6:	f100 03a4 	add.w	r3, r0, #164	; 0xa4
   16cca:	e730      	b.n	16b2e <ble_ll_conn_next_event+0xba>
            return -1;
   16ccc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16cd0:	e734      	b.n	16b3c <ble_ll_conn_next_event+0xc8>
   16cd2:	bf00      	nop
   16cd4:	00401110 	.word	0x00401110
   16cd8:	20003c30 	.word	0x20003c30

00016cdc <ble_ll_conn_created>:
{
   16cdc:	b570      	push	{r4, r5, r6, lr}
   16cde:	4604      	mov	r4, r0
   16ce0:	460d      	mov	r5, r1
    connsm->conn_state = BLE_LL_CONN_STATE_CREATED;
   16ce2:	2301      	movs	r3, #1
   16ce4:	7183      	strb	r3, [r0, #6]
    connsm->csmflags.cfbit.pkt_rxd = 0;
   16ce6:	7803      	ldrb	r3, [r0, #0]
   16ce8:	f36f 0300 	bfc	r3, #0, #1
   16cec:	7003      	strb	r3, [r0, #0]
    connsm->last_scheduled = os_cputime_get32();
   16cee:	f018 f8de 	bl	2eeae <os_cputime_get32>
   16cf2:	6660      	str	r0, [r4, #100]	; 0x64
    connsm->last_rxd_pdu_cputime = connsm->last_scheduled;
   16cf4:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) {
   16cf8:	79e3      	ldrb	r3, [r4, #7]
   16cfa:	2b02      	cmp	r3, #2
   16cfc:	d010      	beq.n	16d20 <ble_ll_conn_created+0x44>
        if (connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) {
   16cfe:	79e3      	ldrb	r3, [r4, #7]
   16d00:	2b02      	cmp	r3, #2
   16d02:	d06e      	beq.n	16de2 <ble_ll_conn_created+0x106>
            evbuf = ble_ll_init_get_conn_comp_ev();
   16d04:	f7ff f916 	bl	15f34 <ble_ll_init_get_conn_comp_ev>
            ble_ll_conn_comp_event_send(connsm, BLE_ERR_SUCCESS, evbuf, NULL);
   16d08:	2300      	movs	r3, #0
   16d0a:	4602      	mov	r2, r0
   16d0c:	4619      	mov	r1, r3
   16d0e:	4620      	mov	r0, r4
   16d10:	f001 fa08 	bl	18124 <ble_ll_conn_comp_event_send>
            ble_ll_ctrl_proc_start(connsm, BLE_LL_CTRL_PROC_FEATURE_XCHG);
   16d14:	2103      	movs	r1, #3
   16d16:	4620      	mov	r0, r4
   16d18:	f002 fc56 	bl	195c8 <ble_ll_ctrl_proc_start>
   16d1c:	2001      	movs	r0, #1
}
   16d1e:	bd70      	pop	{r4, r5, r6, pc}
        connsm->last_anchor_point = rxhdr->beg_cputime;
   16d20:	68ab      	ldr	r3, [r5, #8]
   16d22:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
        usecs = rxhdr->rem_usecs + 1250 +
   16d26:	68ee      	ldr	r6, [r5, #12]
                (connsm->tx_win_off * BLE_LL_CONN_TX_WIN_USECS) +
   16d28:	f8b4 0072 	ldrh.w	r0, [r4, #114]	; 0x72
        usecs = rxhdr->rem_usecs + 1250 +
   16d2c:	f240 43e2 	movw	r3, #1250	; 0x4e2
   16d30:	fb03 6600 	mla	r6, r3, r0, r6
                ble_ll_pdu_tx_time_get(BLE_CONNECT_REQ_LEN,
   16d34:	79a9      	ldrb	r1, [r5, #6]
   16d36:	2022      	movs	r0, #34	; 0x22
   16d38:	f7fd ff44 	bl	14bc4 <ble_ll_pdu_tx_time_get>
                (connsm->tx_win_off * BLE_LL_CONN_TX_WIN_USECS) +
   16d3c:	4430      	add	r0, r6
        usecs = rxhdr->rem_usecs + 1250 +
   16d3e:	f200 46e2 	addw	r6, r0, #1250	; 0x4e2
        if (rxhdr->rxinfo.channel < BLE_PHY_NUM_DATA_CHANS) {
   16d42:	78ab      	ldrb	r3, [r5, #2]
   16d44:	2b24      	cmp	r3, #36	; 0x24
   16d46:	d80c      	bhi.n	16d62 <ble_ll_conn_created+0x86>
            switch (rxhdr->rxinfo.phy) {
   16d48:	f995 3005 	ldrsb.w	r3, [r5, #5]
   16d4c:	2b01      	cmp	r3, #1
   16d4e:	db37      	blt.n	16dc0 <ble_ll_conn_created+0xe4>
   16d50:	2b02      	cmp	r3, #2
   16d52:	dd04      	ble.n	16d5e <ble_ll_conn_created+0x82>
   16d54:	2b03      	cmp	r3, #3
   16d56:	d133      	bne.n	16dc0 <ble_ll_conn_created+0xe4>
                usecs += 2500;
   16d58:	f600 66a6 	addw	r6, r0, #3750	; 0xea6
                break;
   16d5c:	e001      	b.n	16d62 <ble_ll_conn_created+0x86>
                usecs += 1250;
   16d5e:	f600 16c4 	addw	r6, r0, #2500	; 0x9c4
        endtime = os_cputime_usecs_to_ticks(usecs);
   16d62:	4630      	mov	r0, r6
   16d64:	f018 f8a8 	bl	2eeb8 <os_cputime_usecs_to_ticks>
        connsm->anchor_point = rxhdr->beg_cputime + endtime;
   16d68:	68ab      	ldr	r3, [r5, #8]
   16d6a:	4403      	add	r3, r0
   16d6c:	6763      	str	r3, [r4, #116]	; 0x74
        connsm->anchor_point_usecs = usecs - os_cputime_ticks_to_usecs(endtime);
   16d6e:	f018 f8ab 	bl	2eec8 <os_cputime_ticks_to_usecs>
   16d72:	1a30      	subs	r0, r6, r0
   16d74:	b2c0      	uxtb	r0, r0
   16d76:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78
        if (connsm->anchor_point_usecs == 31) {
   16d7a:	281f      	cmp	r0, #31
   16d7c:	d02a      	beq.n	16dd4 <ble_ll_conn_created+0xf8>
            connsm->tx_win_size * BLE_LL_CONN_TX_WIN_USECS;
   16d7e:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
   16d82:	f240 40e2 	movw	r0, #1250	; 0x4e2
   16d86:	fb00 f003 	mul.w	r0, r0, r3
        connsm->slave_cur_tx_win_usecs =
   16d8a:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
        connsm->ce_end_time = connsm->anchor_point +
   16d8e:	6f66      	ldr	r6, [r4, #116]	; 0x74
            + os_cputime_usecs_to_ticks(connsm->slave_cur_tx_win_usecs) + 1;
   16d90:	f018 f892 	bl	2eeb8 <os_cputime_usecs_to_ticks>
   16d94:	4430      	add	r0, r6
   16d96:	30a5      	adds	r0, #165	; 0xa5
        connsm->ce_end_time = connsm->anchor_point +
   16d98:	65e0      	str	r0, [r4, #92]	; 0x5c
        connsm->slave_cur_window_widening = BLE_LL_JITTER_USECS;
   16d9a:	2310      	movs	r3, #16
   16d9c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        while (ble_ll_sched_slave_new(connsm)) {
   16da0:	4620      	mov	r0, r4
   16da2:	f005 ff39 	bl	1cc18 <ble_ll_sched_slave_new>
   16da6:	2800      	cmp	r0, #0
   16da8:	d0a9      	beq.n	16cfe <ble_ll_conn_created+0x22>
            if (ble_ll_conn_next_event(connsm)) {
   16daa:	4620      	mov	r0, r4
   16dac:	f7ff fe62 	bl	16a74 <ble_ll_conn_next_event>
   16db0:	2800      	cmp	r0, #0
   16db2:	d0f5      	beq.n	16da0 <ble_ll_conn_created+0xc4>
                STATS_INC(ble_ll_conn_stats, cant_set_sched);
   16db4:	4a0e      	ldr	r2, [pc, #56]	; (16df0 <ble_ll_conn_created+0x114>)
   16db6:	68d3      	ldr	r3, [r2, #12]
   16db8:	3301      	adds	r3, #1
   16dba:	60d3      	str	r3, [r2, #12]
                rc = 0;
   16dbc:	2000      	movs	r0, #0
   16dbe:	e7ae      	b.n	16d1e <ble_ll_conn_created+0x42>
                BLE_LL_ASSERT(0);
   16dc0:	f7f5 fa12 	bl	c1e8 <hal_debugger_connected>
   16dc4:	b100      	cbz	r0, 16dc8 <ble_ll_conn_created+0xec>
   16dc6:	be01      	bkpt	0x0001
   16dc8:	2300      	movs	r3, #0
   16dca:	461a      	mov	r2, r3
   16dcc:	4619      	mov	r1, r3
   16dce:	4618      	mov	r0, r3
   16dd0:	f7f5 febe 	bl	cb50 <__assert_func>
            ++connsm->anchor_point;
   16dd4:	6f63      	ldr	r3, [r4, #116]	; 0x74
   16dd6:	3301      	adds	r3, #1
   16dd8:	6763      	str	r3, [r4, #116]	; 0x74
            connsm->anchor_point_usecs = 0;
   16dda:	2300      	movs	r3, #0
   16ddc:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
   16de0:	e7cd      	b.n	16d7e <ble_ll_conn_created+0xa2>
            ble_ll_adv_send_conn_comp_ev(connsm, rxhdr);
   16de2:	4629      	mov	r1, r5
   16de4:	4620      	mov	r0, r4
   16de6:	f7fe ffcd 	bl	15d84 <ble_ll_adv_send_conn_comp_ev>
   16dea:	2001      	movs	r0, #1
   16dec:	e797      	b.n	16d1e <ble_ll_conn_created+0x42>
   16dee:	bf00      	nop
   16df0:	20003a30 	.word	0x20003a30

00016df4 <ble_ll_conn_set_csa>:
{
   16df4:	b510      	push	{r4, lr}
   16df6:	4604      	mov	r4, r0
    connsm->last_unmapped_chan = 0;
   16df8:	2300      	movs	r3, #0
   16dfa:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
    connsm->data_chan_index = ble_ll_conn_calc_dci(connsm, 1);
   16dfe:	2101      	movs	r1, #1
   16e00:	f7ff fe2a 	bl	16a58 <ble_ll_conn_calc_dci>
   16e04:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
}
   16e08:	bd10      	pop	{r4, pc}
	...

00016e0c <ble_ll_conn_wfr_timer_exp>:
{
   16e0c:	b508      	push	{r3, lr}
    ble_ll_conn_current_sm_over(connsm);
   16e0e:	4b04      	ldr	r3, [pc, #16]	; (16e20 <ble_ll_conn_wfr_timer_exp+0x14>)
   16e10:	6818      	ldr	r0, [r3, #0]
   16e12:	f7ff f867 	bl	15ee4 <ble_ll_conn_current_sm_over>
    STATS_INC(ble_ll_conn_stats, wfr_expirations);
   16e16:	4a03      	ldr	r2, [pc, #12]	; (16e24 <ble_ll_conn_wfr_timer_exp+0x18>)
   16e18:	6953      	ldr	r3, [r2, #20]
   16e1a:	3301      	adds	r3, #1
   16e1c:	6153      	str	r3, [r2, #20]
}
   16e1e:	bd08      	pop	{r3, pc}
   16e20:	20003878 	.word	0x20003878
   16e24:	20003a30 	.word	0x20003a30

00016e28 <ble_ll_conn_reset_pending_aux_conn_rsp>:
}
   16e28:	4770      	bx	lr

00016e2a <ble_ll_conn_init_wfr_timer_exp>:
}
   16e2a:	4770      	bx	lr

00016e2c <ble_ll_conn_auth_pyld_timer_start>:
{
   16e2c:	b510      	push	{r4, lr}
   16e2e:	4604      	mov	r4, r0
    tmo = (int32_t)BLE_LL_CONN_AUTH_PYLD_OS_TMO(connsm->auth_pyld_tmo);
   16e30:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
   16e34:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   16e38:	0058      	lsls	r0, r3, #1
os_time_ms_to_ticks32(uint32_t ms)
{
#if OS_TICKS_PER_SEC == 1000
    return ms;
#else
    return ((uint64_t)ms * OS_TICKS_PER_SEC) / 1000;
   16e3a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   16e3e:	2300      	movs	r3, #0
   16e40:	01c0      	lsls	r0, r0, #7
   16e42:	2100      	movs	r1, #0
   16e44:	f01a f8e6 	bl	31014 <__aeabi_uldivmod>
    return (ble_npl_error_t)os_callout_reset(&co->co, ticks);
   16e48:	4601      	mov	r1, r0
   16e4a:	f104 00f8 	add.w	r0, r4, #248	; 0xf8
   16e4e:	f7f6 f853 	bl	cef8 <os_callout_reset>
}
   16e52:	bd10      	pop	{r4, pc}

00016e54 <ble_ll_conn_auth_pyld_timer_cb>:
{
   16e54:	b510      	push	{r4, lr}
    return ev->ev.ev_arg;
   16e56:	6884      	ldr	r4, [r0, #8]
    ble_ll_auth_pyld_tmo_event_send(connsm);
   16e58:	4620      	mov	r0, r4
   16e5a:	f001 faa3 	bl	183a4 <ble_ll_auth_pyld_tmo_event_send>
    ble_ll_ctrl_proc_start(connsm, BLE_LL_CTRL_PROC_LE_PING);
   16e5e:	2107      	movs	r1, #7
   16e60:	4620      	mov	r0, r4
   16e62:	f002 fbb1 	bl	195c8 <ble_ll_ctrl_proc_start>
    ble_ll_conn_auth_pyld_timer_start(connsm);
   16e66:	4620      	mov	r0, r4
   16e68:	f7ff ffe0 	bl	16e2c <ble_ll_conn_auth_pyld_timer_start>
}
   16e6c:	bd10      	pop	{r4, pc}

00016e6e <ble_ll_conn_master_init>:
{
   16e6e:	b538      	push	{r3, r4, r5, lr}
   16e70:	4605      	mov	r5, r0
   16e72:	460c      	mov	r4, r1
    ble_ll_conn_master_common_init(connsm);
   16e74:	f7ff fbbe 	bl	165f4 <ble_ll_conn_master_common_init>
    connsm->slave_latency = hcc->conn_latency;
   16e78:	8a63      	ldrh	r3, [r4, #18]
   16e7a:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
    connsm->supervision_tmo = hcc->supervision_timeout;
   16e7e:	8aa3      	ldrh	r3, [r4, #20]
   16e80:	f8a5 306c 	strh.w	r3, [r5, #108]	; 0x6c
    connsm->own_addr_type = hcc->own_addr_type;
   16e84:	7b23      	ldrb	r3, [r4, #12]
   16e86:	f885 3091 	strb.w	r3, [r5, #145]	; 0x91
    if (hcc->filter_policy == 0) {
   16e8a:	7923      	ldrb	r3, [r4, #4]
   16e8c:	b173      	cbz	r3, 16eac <ble_ll_conn_master_init+0x3e>
    connsm->conn_itvl = hcc->conn_itvl_max;
   16e8e:	8a23      	ldrh	r3, [r4, #16]
   16e90:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
    if (hcc->min_ce_len > (connsm->conn_itvl * 2)) {
   16e94:	8ae1      	ldrh	r1, [r4, #22]
   16e96:	005a      	lsls	r2, r3, #1
   16e98:	4291      	cmp	r1, r2
   16e9a:	dd13      	ble.n	16ec4 <ble_ll_conn_master_init+0x56>
        connsm->min_ce_len = connsm->conn_itvl * 2;
   16e9c:	f8a5 206e 	strh.w	r2, [r5, #110]	; 0x6e
    if (hcc->max_ce_len > (connsm->conn_itvl * 2)) {
   16ea0:	8b21      	ldrh	r1, [r4, #24]
   16ea2:	428a      	cmp	r2, r1
   16ea4:	db11      	blt.n	16eca <ble_ll_conn_master_init+0x5c>
        connsm->max_ce_len = hcc->max_ce_len;
   16ea6:	f8a5 1070 	strh.w	r1, [r5, #112]	; 0x70
}
   16eaa:	bd38      	pop	{r3, r4, r5, pc}
        memcpy(&connsm->peer_addr, &hcc->peer_addr, BLE_DEV_ADDR_LEN);
   16eac:	4623      	mov	r3, r4
   16eae:	f853 2f06 	ldr.w	r2, [r3, #6]!
   16eb2:	f8c5 2093 	str.w	r2, [r5, #147]	; 0x93
   16eb6:	889b      	ldrh	r3, [r3, #4]
   16eb8:	f8a5 3097 	strh.w	r3, [r5, #151]	; 0x97
        connsm->peer_addr_type = hcc->peer_addr_type;
   16ebc:	7963      	ldrb	r3, [r4, #5]
   16ebe:	f885 3092 	strb.w	r3, [r5, #146]	; 0x92
   16ec2:	e7e4      	b.n	16e8e <ble_ll_conn_master_init+0x20>
        connsm->min_ce_len = hcc->min_ce_len;
   16ec4:	f8a5 106e 	strh.w	r1, [r5, #110]	; 0x6e
   16ec8:	e7ea      	b.n	16ea0 <ble_ll_conn_master_init+0x32>
        connsm->max_ce_len = connsm->conn_itvl * 2;
   16eca:	005b      	lsls	r3, r3, #1
   16ecc:	f8a5 3070 	strh.w	r3, [r5, #112]	; 0x70
   16ed0:	e7eb      	b.n	16eaa <ble_ll_conn_master_init+0x3c>
	...

00016ed4 <ble_ll_conn_sm_new>:
{
   16ed4:	b570      	push	{r4, r5, r6, lr}
   16ed6:	4604      	mov	r4, r0
    connsm->csmflags.conn_flags = 0;
   16ed8:	2500      	movs	r5, #0
   16eda:	6005      	str	r5, [r0, #0]
    connsm->event_cntr = 0;
   16edc:	f8a0 504a 	strh.w	r5, [r0, #74]	; 0x4a
    connsm->conn_state = BLE_LL_CONN_STATE_IDLE;
   16ee0:	7185      	strb	r5, [r0, #6]
    connsm->disconnect_reason = 0;
   16ee2:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
    connsm->rxd_disconnect_reason = 0;
   16ee6:	f880 503d 	strb.w	r5, [r0, #61]	; 0x3d
    connsm->conn_features = BLE_LL_CONN_INITIAL_FEATURES;
   16eea:	2322      	movs	r3, #34	; 0x22
   16eec:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
    memset(connsm->remote_features, 0, sizeof(connsm->remote_features));
   16ef0:	6405      	str	r5, [r0, #64]	; 0x40
   16ef2:	f8c0 5043 	str.w	r5, [r0, #67]	; 0x43
    connsm->vers_nr = 0;
   16ef6:	f880 503e 	strb.w	r5, [r0, #62]	; 0x3e
    connsm->comp_id = 0;
   16efa:	f8a0 504e 	strh.w	r5, [r0, #78]	; 0x4e
    connsm->sub_vers_nr = 0;
   16efe:	f8a0 5050 	strh.w	r5, [r0, #80]	; 0x50
    connsm->reject_reason = BLE_ERR_SUCCESS;
   16f02:	f880 5037 	strb.w	r5, [r0, #55]	; 0x37
    connsm->conn_rssi = BLE_LL_CONN_UNKNOWN_RSSI;
   16f06:	237f      	movs	r3, #127	; 0x7f
   16f08:	7203      	strb	r3, [r0, #8]
    connsm->rpa_index = -1;
   16f0a:	23ff      	movs	r3, #255	; 0xff
   16f0c:	7243      	strb	r3, [r0, #9]
    connsm->inita_identity_used = 0;
   16f0e:	f880 5090 	strb.w	r5, [r0, #144]	; 0x90
    connsm->cur_ctrl_proc = BLE_LL_CTRL_PROC_IDLE;
   16f12:	f880 303b 	strb.w	r3, [r0, #59]	; 0x3b
    connsm->pending_ctrl_procs = 0;
   16f16:	f8a0 5048 	strh.w	r5, [r0, #72]	; 0x48
    connsm->conn_param_req.handle = 0;
   16f1a:	f8a0 5168 	strh.w	r5, [r0, #360]	; 0x168
    memset(ev, 0, sizeof(*ev));
   16f1e:	f8c0 509c 	str.w	r5, [r0, #156]	; 0x9c
   16f22:	f8c0 50a8 	str.w	r5, [r0, #168]	; 0xa8
    ev->ev.ev_queued = 0;
   16f26:	f880 509c 	strb.w	r5, [r0, #156]	; 0x9c
    ev->ev.ev_cb = (os_event_fn *)fn;
   16f2a:	4b26      	ldr	r3, [pc, #152]	; (16fc4 <ble_ll_conn_sm_new+0xf0>)
   16f2c:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
    ev->ev.ev_arg = arg;
   16f30:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
    STAILQ_INIT(&connsm->conn_txq);
   16f34:	4603      	mov	r3, r0
   16f36:	f843 5fb0 	str.w	r5, [r3, #176]!
   16f3a:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4
    connsm->cur_tx_pdu = NULL;
   16f3e:	f8c0 50ac 	str.w	r5, [r0, #172]	; 0xac
    connsm->tx_seqnum = 0;
   16f42:	f880 5032 	strb.w	r5, [r0, #50]	; 0x32
    connsm->next_exp_seqnum = 0;
   16f46:	f880 5033 	strb.w	r5, [r0, #51]	; 0x33
    connsm->cons_rxd_bad_crc = 0;
   16f4a:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
    connsm->last_rxd_sn = 1;
   16f4e:	2601      	movs	r6, #1
   16f50:	f880 6035 	strb.w	r6, [r0, #53]	; 0x35
    connsm->completed_pkts = 0;
   16f54:	f8a0 504c 	strh.w	r5, [r0, #76]	; 0x4c
    connsm->max_tx_octets = conn_params->conn_init_max_tx_octets;
   16f58:	4b1b      	ldr	r3, [pc, #108]	; (16fc8 <ble_ll_conn_sm_new+0xf4>)
   16f5a:	7a1a      	ldrb	r2, [r3, #8]
   16f5c:	7282      	strb	r2, [r0, #10]
    connsm->max_rx_octets = conn_params->supp_max_rx_octets;
   16f5e:	79da      	ldrb	r2, [r3, #7]
   16f60:	72c2      	strb	r2, [r0, #11]
    connsm->max_tx_time = conn_params->conn_init_max_tx_time;
   16f62:	899a      	ldrh	r2, [r3, #12]
   16f64:	8202      	strh	r2, [r0, #16]
    connsm->max_rx_time = conn_params->supp_max_rx_time;
   16f66:	8a9b      	ldrh	r3, [r3, #20]
   16f68:	8243      	strh	r3, [r0, #18]
    connsm->rem_max_tx_time = BLE_LL_CONN_SUPP_TIME_MIN;
   16f6a:	f44f 73a4 	mov.w	r3, #328	; 0x148
   16f6e:	8283      	strh	r3, [r0, #20]
    connsm->rem_max_rx_time = BLE_LL_CONN_SUPP_TIME_MIN;
   16f70:	82c3      	strh	r3, [r0, #22]
    connsm->eff_max_tx_time = BLE_LL_CONN_SUPP_TIME_MIN;
   16f72:	8303      	strh	r3, [r0, #24]
    connsm->eff_max_rx_time = BLE_LL_CONN_SUPP_TIME_MIN;
   16f74:	8343      	strh	r3, [r0, #26]
    connsm->rem_max_tx_octets = BLE_LL_CONN_SUPP_BYTES_MIN;
   16f76:	231b      	movs	r3, #27
   16f78:	7303      	strb	r3, [r0, #12]
    connsm->rem_max_rx_octets = BLE_LL_CONN_SUPP_BYTES_MIN;
   16f7a:	7343      	strb	r3, [r0, #13]
    connsm->eff_max_tx_octets = BLE_LL_CONN_SUPP_BYTES_MIN;
   16f7c:	7383      	strb	r3, [r0, #14]
    connsm->eff_max_rx_octets = BLE_LL_CONN_SUPP_BYTES_MIN;
   16f7e:	73c3      	strb	r3, [r0, #15]
    ble_ll_update_max_tx_octets_phy_mode(connsm);
   16f80:	f7ff f829 	bl	15fd6 <ble_ll_update_max_tx_octets_phy_mode>
    memset(&connsm->enc_data, 0, sizeof(struct ble_ll_conn_enc_data));
   16f84:	2250      	movs	r2, #80	; 0x50
   16f86:	4629      	mov	r1, r5
   16f88:	f504 708c 	add.w	r0, r4, #280	; 0x118
   16f8c:	f7f7 fd30 	bl	e9f0 <memset>
    connsm->enc_data.enc_state = CONN_ENC_S_UNENCRYPTED;
   16f90:	f884 6118 	strb.w	r6, [r4, #280]	; 0x118
    connsm->auth_pyld_tmo = BLE_LL_CONN_DEF_AUTH_PYLD_TMO;
   16f94:	f640 33b8 	movw	r3, #3000	; 0xbb8
   16f98:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
    CONN_F_LE_PING_SUPP(connsm) = 1;
   16f9c:	78a3      	ldrb	r3, [r4, #2]
   16f9e:	f043 0308 	orr.w	r3, r3, #8
   16fa2:	70a3      	strb	r3, [r4, #2]
    os_callout_init(&co->co, &evq->evq, (os_event_fn *)ev_cb, ev_arg);
   16fa4:	4623      	mov	r3, r4
   16fa6:	4a09      	ldr	r2, [pc, #36]	; (16fcc <ble_ll_conn_sm_new+0xf8>)
   16fa8:	4909      	ldr	r1, [pc, #36]	; (16fd0 <ble_ll_conn_sm_new+0xfc>)
   16faa:	f104 00f8 	add.w	r0, r4, #248	; 0xf8
   16fae:	f7f5 ff77 	bl	cea0 <os_callout_init>
    ble_ll_conn_calc_itvl_ticks(connsm);
   16fb2:	4620      	mov	r0, r4
   16fb4:	f7ff fb56 	bl	16664 <ble_ll_conn_calc_itvl_ticks>
    SLIST_INSERT_HEAD(&g_ble_ll_conn_active_list, connsm, act_sle);
   16fb8:	4b06      	ldr	r3, [pc, #24]	; (16fd4 <ble_ll_conn_sm_new+0x100>)
   16fba:	681a      	ldr	r2, [r3, #0]
   16fbc:	f8c4 20b8 	str.w	r2, [r4, #184]	; 0xb8
   16fc0:	601c      	str	r4, [r3, #0]
}
   16fc2:	bd70      	pop	{r4, r5, r6, pc}
   16fc4:	00017161 	.word	0x00017161
   16fc8:	20003860 	.word	0x20003860
   16fcc:	00016e55 	.word	0x00016e55
   16fd0:	20003740 	.word	0x20003740
   16fd4:	20003ab0 	.word	0x20003ab0

00016fd8 <ble_ll_conn_update_eff_data_len>:
{
   16fd8:	b510      	push	{r4, lr}
   16fda:	4604      	mov	r4, r0
    eff_time = min(connsm->rem_max_tx_time, connsm->max_rx_time);
   16fdc:	8a43      	ldrh	r3, [r0, #18]
   16fde:	8a82      	ldrh	r2, [r0, #20]
   16fe0:	4293      	cmp	r3, r2
   16fe2:	bf28      	it	cs
   16fe4:	4613      	movcs	r3, r2
    if (eff_time != connsm->eff_max_rx_time) {
   16fe6:	8b42      	ldrh	r2, [r0, #26]
   16fe8:	429a      	cmp	r2, r3
   16fea:	d020      	beq.n	1702e <ble_ll_conn_update_eff_data_len+0x56>
        connsm->eff_max_rx_time = eff_time;
   16fec:	8343      	strh	r3, [r0, #26]
        send_event = 1;
   16fee:	2101      	movs	r1, #1
    eff_time = min(connsm->rem_max_rx_time, connsm->max_tx_time);
   16ff0:	8a23      	ldrh	r3, [r4, #16]
   16ff2:	8ae2      	ldrh	r2, [r4, #22]
   16ff4:	4293      	cmp	r3, r2
   16ff6:	bf28      	it	cs
   16ff8:	4613      	movcs	r3, r2
    if (eff_time != connsm->eff_max_tx_time) {
   16ffa:	8b22      	ldrh	r2, [r4, #24]
   16ffc:	429a      	cmp	r2, r3
   16ffe:	d118      	bne.n	17032 <ble_ll_conn_update_eff_data_len+0x5a>
    eff_bytes = min(connsm->rem_max_tx_octets, connsm->max_rx_octets);
   17000:	7b22      	ldrb	r2, [r4, #12]
   17002:	7ae3      	ldrb	r3, [r4, #11]
   17004:	429a      	cmp	r2, r3
   17006:	d21a      	bcs.n	1703e <ble_ll_conn_update_eff_data_len+0x66>
   17008:	b293      	uxth	r3, r2
    if (eff_bytes != connsm->eff_max_rx_octets) {
   1700a:	7be2      	ldrb	r2, [r4, #15]
   1700c:	429a      	cmp	r2, r3
   1700e:	d001      	beq.n	17014 <ble_ll_conn_update_eff_data_len+0x3c>
        connsm->eff_max_rx_octets = eff_bytes;
   17010:	73e3      	strb	r3, [r4, #15]
        send_event = 1;
   17012:	2101      	movs	r1, #1
    eff_bytes = min(connsm->rem_max_rx_octets, connsm->max_tx_octets);
   17014:	7b62      	ldrb	r2, [r4, #13]
   17016:	7aa3      	ldrb	r3, [r4, #10]
   17018:	429a      	cmp	r2, r3
   1701a:	d212      	bcs.n	17042 <ble_ll_conn_update_eff_data_len+0x6a>
   1701c:	b293      	uxth	r3, r2
    if (eff_bytes != connsm->eff_max_tx_octets) {
   1701e:	7ba2      	ldrb	r2, [r4, #14]
   17020:	429a      	cmp	r2, r3
   17022:	d010      	beq.n	17046 <ble_ll_conn_update_eff_data_len+0x6e>
        connsm->eff_max_tx_octets = eff_bytes;
   17024:	73a3      	strb	r3, [r4, #14]
        ble_ll_hci_ev_datalen_chg(connsm);
   17026:	4620      	mov	r0, r4
   17028:	f003 fbcc 	bl	1a7c4 <ble_ll_hci_ev_datalen_chg>
}
   1702c:	bd10      	pop	{r4, pc}
    send_event = 0;
   1702e:	2100      	movs	r1, #0
   17030:	e7de      	b.n	16ff0 <ble_ll_conn_update_eff_data_len+0x18>
        connsm->eff_max_tx_time = eff_time;
   17032:	8323      	strh	r3, [r4, #24]
        ble_ll_update_max_tx_octets_phy_mode(connsm);
   17034:	4620      	mov	r0, r4
   17036:	f7fe ffce 	bl	15fd6 <ble_ll_update_max_tx_octets_phy_mode>
        send_event = 1;
   1703a:	2101      	movs	r1, #1
   1703c:	e7e0      	b.n	17000 <ble_ll_conn_update_eff_data_len+0x28>
    eff_bytes = min(connsm->rem_max_tx_octets, connsm->max_rx_octets);
   1703e:	b29b      	uxth	r3, r3
   17040:	e7e3      	b.n	1700a <ble_ll_conn_update_eff_data_len+0x32>
    eff_bytes = min(connsm->rem_max_rx_octets, connsm->max_tx_octets);
   17042:	b29b      	uxth	r3, r3
   17044:	e7eb      	b.n	1701e <ble_ll_conn_update_eff_data_len+0x46>
    if (send_event) {
   17046:	2900      	cmp	r1, #0
   17048:	d1ed      	bne.n	17026 <ble_ll_conn_update_eff_data_len+0x4e>
   1704a:	e7ef      	b.n	1702c <ble_ll_conn_update_eff_data_len+0x54>

0001704c <ble_ll_conn_end>:
{
   1704c:	b570      	push	{r4, r5, r6, lr}
   1704e:	4604      	mov	r4, r0
   17050:	460d      	mov	r5, r1
    ble_ll_sched_rmv_elem(&connsm->conn_sch);
   17052:	30dc      	adds	r0, #220	; 0xdc
   17054:	f005 ffbc 	bl	1cfd0 <ble_ll_sched_rmv_elem>
    OS_ENTER_CRITICAL(sr);
   17058:	f7f7 fa6c 	bl	e534 <os_arch_save_sr>
   1705c:	4606      	mov	r6, r0
    if (g_ble_ll_conn_cur_sm == connsm) {
   1705e:	4b3b      	ldr	r3, [pc, #236]	; (1714c <ble_ll_conn_end+0x100>)
   17060:	681b      	ldr	r3, [r3, #0]
   17062:	42a3      	cmp	r3, r4
   17064:	d012      	beq.n	1708c <ble_ll_conn_end+0x40>
    OS_EXIT_CRITICAL(sr);
   17066:	4630      	mov	r0, r6
   17068:	f7f7 fa6a 	bl	e540 <os_arch_restore_sr>
}

static inline void
ble_npl_callout_stop(struct ble_npl_callout *co)
{
    os_callout_stop(&co->co);
   1706c:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
   17070:	f7f5 ff24 	bl	cebc <os_callout_stop>
   17074:	f104 00f8 	add.w	r0, r4, #248	; 0xf8
   17078:	f7f5 ff20 	bl	cebc <os_callout_stop>
    SLIST_REMOVE(&g_ble_ll_conn_active_list, connsm, ble_ll_conn_sm, act_sle);
   1707c:	4b34      	ldr	r3, [pc, #208]	; (17150 <ble_ll_conn_end+0x104>)
   1707e:	681a      	ldr	r2, [r3, #0]
   17080:	42a2      	cmp	r2, r4
   17082:	d10b      	bne.n	1709c <ble_ll_conn_end+0x50>
   17084:	f8d2 20b8 	ldr.w	r2, [r2, #184]	; 0xb8
   17088:	601a      	str	r2, [r3, #0]
   1708a:	e00f      	b.n	170ac <ble_ll_conn_end+0x60>
        ble_ll_conn_halt();
   1708c:	f7fe ff1e 	bl	15ecc <ble_ll_conn_halt>
        STATS_INC(ble_ll_conn_stats, conn_event_while_tmo);
   17090:	4a30      	ldr	r2, [pc, #192]	; (17154 <ble_ll_conn_end+0x108>)
   17092:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
   17094:	3301      	adds	r3, #1
   17096:	67d3      	str	r3, [r2, #124]	; 0x7c
   17098:	e7e5      	b.n	17066 <ble_ll_conn_end+0x1a>
    SLIST_REMOVE(&g_ble_ll_conn_active_list, connsm, ble_ll_conn_sm, act_sle);
   1709a:	461a      	mov	r2, r3
   1709c:	f8d2 30b8 	ldr.w	r3, [r2, #184]	; 0xb8
   170a0:	42a3      	cmp	r3, r4
   170a2:	d1fa      	bne.n	1709a <ble_ll_conn_end+0x4e>
   170a4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
   170a8:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
    if (connsm->cur_tx_pdu) {
   170ac:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
   170b0:	b140      	cbz	r0, 170c4 <ble_ll_conn_end+0x78>
        os_mbuf_free_chain(connsm->cur_tx_pdu);
   170b2:	f7f6 f9b5 	bl	d420 <os_mbuf_free_chain>
        connsm->cur_tx_pdu = NULL;
   170b6:	2300      	movs	r3, #0
   170b8:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
   170bc:	e002      	b.n	170c4 <ble_ll_conn_end+0x78>
        os_mbuf_free_chain(m);
   170be:	3810      	subs	r0, #16
   170c0:	f7f6 f9ae 	bl	d420 <os_mbuf_free_chain>
        pkthdr = STAILQ_FIRST(&connsm->conn_txq);
   170c4:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
        if (!pkthdr) {
   170c8:	b148      	cbz	r0, 170de <ble_ll_conn_end+0x92>
        STAILQ_REMOVE_HEAD(&connsm->conn_txq, omp_next);
   170ca:	6843      	ldr	r3, [r0, #4]
   170cc:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
   170d0:	2b00      	cmp	r3, #0
   170d2:	d1f4      	bne.n	170be <ble_ll_conn_end+0x72>
   170d4:	f104 03b0 	add.w	r3, r4, #176	; 0xb0
   170d8:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
   170dc:	e7ef      	b.n	170be <ble_ll_conn_end+0x72>
    os_eventq_remove(&evq->evq, &ev->ev);
   170de:	f104 019c 	add.w	r1, r4, #156	; 0x9c
   170e2:	481d      	ldr	r0, [pc, #116]	; (17158 <ble_ll_conn_end+0x10c>)
   170e4:	f7f6 f8fa 	bl	d2dc <os_eventq_remove>
    connsm->conn_state = BLE_LL_CONN_STATE_IDLE;
   170e8:	2300      	movs	r3, #0
   170ea:	71a3      	strb	r3, [r4, #6]
    if (connsm->csmflags.cfbit.pending_hci_rd_features &&
   170ec:	78e3      	ldrb	r3, [r4, #3]
   170ee:	f003 0318 	and.w	r3, r3, #24
   170f2:	2b18      	cmp	r3, #24
   170f4:	d017      	beq.n	17126 <ble_ll_conn_end+0xda>
    if (connsm->csmflags.cfbit.pending_hci_rd_features) {
   170f6:	78e3      	ldrb	r3, [r4, #3]
   170f8:	f013 0f10 	tst.w	r3, #16
   170fc:	d11c      	bne.n	17138 <ble_ll_conn_end+0xec>
    if (ble_err && (ble_err != BLE_ERR_UNK_CONN_ID ||
   170fe:	b14d      	cbz	r5, 17114 <ble_ll_conn_end+0xc8>
   17100:	2d02      	cmp	r5, #2
   17102:	d103      	bne.n	1710c <ble_ll_conn_end+0xc0>
   17104:	7823      	ldrb	r3, [r4, #0]
   17106:	f013 0f04 	tst.w	r3, #4
   1710a:	d003      	beq.n	17114 <ble_ll_conn_end+0xc8>
        ble_ll_disconn_comp_event_send(connsm, ble_err);
   1710c:	4629      	mov	r1, r5
   1710e:	4620      	mov	r0, r4
   17110:	f001 f95d 	bl	183ce <ble_ll_disconn_comp_event_send>
    STAILQ_INSERT_TAIL(&g_ble_ll_conn_free_list, connsm, free_stqe);
   17114:	2300      	movs	r3, #0
   17116:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
   1711a:	4b10      	ldr	r3, [pc, #64]	; (1715c <ble_ll_conn_end+0x110>)
   1711c:	685a      	ldr	r2, [r3, #4]
   1711e:	6014      	str	r4, [r2, #0]
   17120:	34b8      	adds	r4, #184	; 0xb8
   17122:	605c      	str	r4, [r3, #4]
}
   17124:	bd70      	pop	{r4, r5, r6, pc}
        ble_ll_hci_ev_rd_rem_used_feat(connsm, BLE_ERR_SUCCESS);
   17126:	2100      	movs	r1, #0
   17128:	4620      	mov	r0, r4
   1712a:	f003 fc17 	bl	1a95c <ble_ll_hci_ev_rd_rem_used_feat>
        connsm->csmflags.cfbit.pending_hci_rd_features = 0;
   1712e:	78e3      	ldrb	r3, [r4, #3]
   17130:	f36f 1304 	bfc	r3, #4, #1
   17134:	70e3      	strb	r3, [r4, #3]
   17136:	e7de      	b.n	170f6 <ble_ll_conn_end+0xaa>
        ble_ll_hci_ev_rd_rem_used_feat(connsm, ble_err);
   17138:	4629      	mov	r1, r5
   1713a:	4620      	mov	r0, r4
   1713c:	f003 fc0e 	bl	1a95c <ble_ll_hci_ev_rd_rem_used_feat>
        connsm->csmflags.cfbit.pending_hci_rd_features = 0;
   17140:	78e3      	ldrb	r3, [r4, #3]
   17142:	f36f 1304 	bfc	r3, #4, #1
   17146:	70e3      	strb	r3, [r4, #3]
   17148:	e7d9      	b.n	170fe <ble_ll_conn_end+0xb2>
   1714a:	bf00      	nop
   1714c:	20003878 	.word	0x20003878
   17150:	20003ab0 	.word	0x20003ab0
   17154:	20003a30 	.word	0x20003a30
   17158:	20003740 	.word	0x20003740
   1715c:	20003880 	.word	0x20003880

00017160 <ble_ll_conn_event_end>:
{
   17160:	b538      	push	{r3, r4, r5, lr}
   17162:	4604      	mov	r4, r0
    ble_ll_rfmgmt_release();
   17164:	f004 f97c 	bl	1b460 <ble_ll_rfmgmt_release>
    return ev->ev.ev_arg;
   17168:	68a4      	ldr	r4, [r4, #8]
    BLE_LL_ASSERT(connsm);
   1716a:	b18c      	cbz	r4, 17190 <ble_ll_conn_event_end+0x30>
    if (connsm->conn_state == BLE_LL_CONN_STATE_IDLE) {
   1716c:	79a3      	ldrb	r3, [r4, #6]
   1716e:	b1cb      	cbz	r3, 171a4 <ble_ll_conn_event_end+0x44>
    ble_ll_scan_chk_resume();
   17170:	f005 f91e 	bl	1c3b0 <ble_ll_scan_chk_resume>
    if ((connsm->csmflags.cfbit.terminate_ind_txd) ||
   17174:	7823      	ldrb	r3, [r4, #0]
   17176:	f013 0202 	ands.w	r2, r3, #2
   1717a:	d103      	bne.n	17184 <ble_ll_conn_event_end+0x24>
                    (connsm->csmflags.cfbit.terminate_ind_rxd &&
   1717c:	f003 030c 	and.w	r3, r3, #12
    if ((connsm->csmflags.cfbit.terminate_ind_txd) ||
   17180:	2b0c      	cmp	r3, #12
   17182:	d122      	bne.n	171ca <ble_ll_conn_event_end+0x6a>
        if (connsm->csmflags.cfbit.terminate_ind_txd) {
   17184:	b9e2      	cbnz	r2, 171c0 <ble_ll_conn_event_end+0x60>
            ble_err = connsm->rxd_disconnect_reason;
   17186:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
            if (ble_err == 0) {
   1718a:	b9d1      	cbnz	r1, 171c2 <ble_ll_conn_event_end+0x62>
                ble_err = BLE_ERR_REM_USER_CONN_TERM;
   1718c:	2113      	movs	r1, #19
   1718e:	e018      	b.n	171c2 <ble_ll_conn_event_end+0x62>
    BLE_LL_ASSERT(connsm);
   17190:	f7f5 f82a 	bl	c1e8 <hal_debugger_connected>
   17194:	b100      	cbz	r0, 17198 <ble_ll_conn_event_end+0x38>
   17196:	be01      	bkpt	0x0001
   17198:	2300      	movs	r3, #0
   1719a:	461a      	mov	r2, r3
   1719c:	4619      	mov	r1, r3
   1719e:	4618      	mov	r0, r3
   171a0:	f7f5 fcd6 	bl	cb50 <__assert_func>
        STATS_INC(ble_ll_conn_stats, sched_end_in_idle);
   171a4:	4a39      	ldr	r2, [pc, #228]	; (1728c <ble_ll_conn_event_end+0x12c>)
   171a6:	6f93      	ldr	r3, [r2, #120]	; 0x78
   171a8:	3301      	adds	r3, #1
   171aa:	6793      	str	r3, [r2, #120]	; 0x78
        BLE_LL_ASSERT(0);
   171ac:	f7f5 f81c 	bl	c1e8 <hal_debugger_connected>
   171b0:	b100      	cbz	r0, 171b4 <ble_ll_conn_event_end+0x54>
   171b2:	be01      	bkpt	0x0001
   171b4:	2300      	movs	r3, #0
   171b6:	461a      	mov	r2, r3
   171b8:	4619      	mov	r1, r3
   171ba:	4618      	mov	r0, r3
   171bc:	f7f5 fcc8 	bl	cb50 <__assert_func>
            ble_err = BLE_ERR_CONN_TERM_LOCAL;
   171c0:	2116      	movs	r1, #22
        ble_ll_conn_end(connsm, ble_err);
   171c2:	4620      	mov	r0, r4
   171c4:	f7ff ff42 	bl	1704c <ble_ll_conn_end>
}
   171c8:	bd38      	pop	{r3, r4, r5, pc}
    os_eventq_remove(&evq->evq, &ev->ev);
   171ca:	f104 019c 	add.w	r1, r4, #156	; 0x9c
   171ce:	4830      	ldr	r0, [pc, #192]	; (17290 <ble_ll_conn_event_end+0x130>)
   171d0:	f7f6 f884 	bl	d2dc <os_eventq_remove>
    if (connsm->csmflags.cfbit.pkt_rxd) {
   171d4:	7823      	ldrb	r3, [r4, #0]
   171d6:	f013 0f01 	tst.w	r3, #1
   171da:	d002      	beq.n	171e2 <ble_ll_conn_event_end+0x82>
        connsm->slave_cur_tx_win_usecs = 0;
   171dc:	2300      	movs	r3, #0
   171de:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    if (ble_ll_conn_next_event(connsm)) {
   171e2:	4620      	mov	r0, r4
   171e4:	f7ff fc46 	bl	16a74 <ble_ll_conn_next_event>
   171e8:	b9d0      	cbnz	r0, 17220 <ble_ll_conn_event_end+0xc0>
    connsm->cons_rxd_bad_crc = 0;
   171ea:	2200      	movs	r2, #0
   171ec:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    connsm->csmflags.cfbit.pkt_rxd = 0;
   171f0:	7823      	ldrb	r3, [r4, #0]
   171f2:	f362 0300 	bfi	r3, r2, #0, #1
   171f6:	7023      	strb	r3, [r4, #0]
    ble_ll_ctrl_chk_proc_start(connsm);
   171f8:	4620      	mov	r0, r4
   171fa:	f002 fa24 	bl	19646 <ble_ll_ctrl_chk_proc_start>
    connsm->conn_sch.sched_cb = ble_ll_conn_event_start_cb;
   171fe:	4b25      	ldr	r3, [pc, #148]	; (17294 <ble_ll_conn_event_end+0x134>)
   17200:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
    while (ble_ll_sched_conn_reschedule(connsm)) {
   17204:	4620      	mov	r0, r4
   17206:	f005 fb7d 	bl	1c904 <ble_ll_sched_conn_reschedule>
   1720a:	b170      	cbz	r0, 1722a <ble_ll_conn_event_end+0xca>
        if (ble_ll_conn_next_event(connsm)) {
   1720c:	4620      	mov	r0, r4
   1720e:	f7ff fc31 	bl	16a74 <ble_ll_conn_next_event>
   17212:	2800      	cmp	r0, #0
   17214:	d0f6      	beq.n	17204 <ble_ll_conn_event_end+0xa4>
            ble_ll_conn_end(connsm, BLE_ERR_CONN_TERM_LOCAL);
   17216:	2116      	movs	r1, #22
   17218:	4620      	mov	r0, r4
   1721a:	f7ff ff17 	bl	1704c <ble_ll_conn_end>
            return;
   1721e:	e7d3      	b.n	171c8 <ble_ll_conn_event_end+0x68>
        ble_ll_conn_end(connsm, BLE_ERR_CONN_TERM_LOCAL);
   17220:	2116      	movs	r1, #22
   17222:	4620      	mov	r0, r4
   17224:	f7ff ff12 	bl	1704c <ble_ll_conn_end>
        return;
   17228:	e7ce      	b.n	171c8 <ble_ll_conn_event_end+0x68>
    if (connsm->conn_state == BLE_LL_CONN_STATE_CREATED) {
   1722a:	79a3      	ldrb	r3, [r4, #6]
   1722c:	2b01      	cmp	r3, #1
   1722e:	d01f      	beq.n	17270 <ble_ll_conn_event_end+0x110>
        tmo = connsm->supervision_tmo * BLE_HCI_CONN_SPVN_TMO_UNITS * 1000UL;
   17230:	f8b4 306c 	ldrh.w	r3, [r4, #108]	; 0x6c
   17234:	f242 7010 	movw	r0, #10000	; 0x2710
   17238:	fb00 f003 	mul.w	r0, r0, r3
        ble_err = BLE_ERR_CONN_SPVN_TMO;
   1723c:	2508      	movs	r5, #8
    tmo = os_cputime_usecs_to_ticks(tmo);
   1723e:	f017 fe3b 	bl	2eeb8 <os_cputime_usecs_to_ticks>
    if ((int32_t)(connsm->anchor_point - connsm->last_rxd_pdu_cputime) >= tmo) {
   17242:	6f63      	ldr	r3, [r4, #116]	; 0x74
   17244:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
   17248:	1a9b      	subs	r3, r3, r2
   1724a:	4283      	cmp	r3, r0
   1724c:	d218      	bcs.n	17280 <ble_ll_conn_event_end+0x120>
    ble_ll_conn_num_comp_pkts_event_send(connsm);
   1724e:	4620      	mov	r0, r4
   17250:	f001 f832 	bl	182b8 <ble_ll_conn_num_comp_pkts_event_send>
    if (connsm->csmflags.cfbit.pending_hci_rd_features &&
   17254:	78e3      	ldrb	r3, [r4, #3]
   17256:	f003 0318 	and.w	r3, r3, #24
   1725a:	2b18      	cmp	r3, #24
   1725c:	d1b4      	bne.n	171c8 <ble_ll_conn_event_end+0x68>
        ble_ll_hci_ev_rd_rem_used_feat(connsm, BLE_ERR_SUCCESS);
   1725e:	2100      	movs	r1, #0
   17260:	4620      	mov	r0, r4
   17262:	f003 fb7b 	bl	1a95c <ble_ll_hci_ev_rd_rem_used_feat>
        connsm->csmflags.cfbit.pending_hci_rd_features = 0;
   17266:	78e3      	ldrb	r3, [r4, #3]
   17268:	f36f 1304 	bfc	r3, #4, #1
   1726c:	70e3      	strb	r3, [r4, #3]
   1726e:	e7ab      	b.n	171c8 <ble_ll_conn_event_end+0x68>
        tmo = (uint32_t)connsm->conn_itvl * BLE_LL_CONN_ITVL_USECS * 6UL;
   17270:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
   17274:	f641 504c 	movw	r0, #7500	; 0x1d4c
   17278:	fb00 f003 	mul.w	r0, r0, r3
        ble_err = BLE_ERR_CONN_ESTABLISHMENT;
   1727c:	253e      	movs	r5, #62	; 0x3e
   1727e:	e7de      	b.n	1723e <ble_ll_conn_event_end+0xde>
        ble_ll_conn_end(connsm, ble_err);
   17280:	4629      	mov	r1, r5
   17282:	4620      	mov	r0, r4
   17284:	f7ff fee2 	bl	1704c <ble_ll_conn_end>
        return;
   17288:	e79e      	b.n	171c8 <ble_ll_conn_event_end+0x68>
   1728a:	bf00      	nop
   1728c:	20003a30 	.word	0x20003a30
   17290:	20003740 	.word	0x20003740
   17294:	000164b1 	.word	0x000164b1

00017298 <ble_ll_conn_connect_ind_send>:
 * @param addr_type Address type of advertiser
 * @param adva Address of advertiser
 */
int
ble_ll_conn_connect_ind_send(struct ble_ll_conn_sm *connsm, uint8_t end_trans)
{
   17298:	b538      	push	{r3, r4, r5, lr}
   1729a:	4604      	mov	r4, r0
    int rc;

    if (end_trans == BLE_PHY_TRANSITION_NONE) {
   1729c:	460d      	mov	r5, r1
   1729e:	b149      	cbz	r1, 172b4 <ble_ll_conn_connect_ind_send+0x1c>
        ble_phy_set_txend_cb(ble_ll_conn_connect_ind_txend_to_standby, NULL);
    } else {
        ble_phy_set_txend_cb(ble_ll_conn_connect_ind_txend_to_init, NULL);
   172a0:	2100      	movs	r1, #0
   172a2:	4806      	ldr	r0, [pc, #24]	; (172bc <ble_ll_conn_connect_ind_send+0x24>)
   172a4:	f006 fd70 	bl	1dd88 <ble_phy_set_txend_cb>
    }

    rc = ble_phy_tx(ble_ll_conn_connect_ind_tx_pducb, connsm, end_trans);
   172a8:	462a      	mov	r2, r5
   172aa:	4621      	mov	r1, r4
   172ac:	4804      	ldr	r0, [pc, #16]	; (172c0 <ble_ll_conn_connect_ind_send+0x28>)
   172ae:	f006 ffff 	bl	1e2b0 <ble_phy_tx>

    return rc;
}
   172b2:	bd38      	pop	{r3, r4, r5, pc}
        ble_phy_set_txend_cb(ble_ll_conn_connect_ind_txend_to_standby, NULL);
   172b4:	4803      	ldr	r0, [pc, #12]	; (172c4 <ble_ll_conn_connect_ind_send+0x2c>)
   172b6:	f006 fd67 	bl	1dd88 <ble_phy_set_txend_cb>
   172ba:	e7f5      	b.n	172a8 <ble_ll_conn_connect_ind_send+0x10>
   172bc:	00015f21 	.word	0x00015f21
   172c0:	00016775 	.word	0x00016775
   172c4:	00015f2b 	.word	0x00015f2b

000172c8 <ble_ll_conn_event_halt>:
 * NOTE: the phy has been disabled as well as the wfr timer before this is
 * called.
 */
void
ble_ll_conn_event_halt(void)
{
   172c8:	b510      	push	{r4, lr}
    ble_ll_state_set(BLE_LL_STATE_STANDBY);
   172ca:	2000      	movs	r0, #0
   172cc:	f7fd fc1c 	bl	14b08 <ble_ll_state_set>
    if (g_ble_ll_conn_cur_sm) {
   172d0:	4b07      	ldr	r3, [pc, #28]	; (172f0 <ble_ll_conn_event_halt+0x28>)
   172d2:	681b      	ldr	r3, [r3, #0]
   172d4:	b153      	cbz	r3, 172ec <ble_ll_conn_event_halt+0x24>
        g_ble_ll_conn_cur_sm->csmflags.cfbit.pkt_rxd = 0;
   172d6:	781a      	ldrb	r2, [r3, #0]
   172d8:	f36f 0200 	bfc	r2, #0, #1
   172dc:	701a      	strb	r2, [r3, #0]
        ble_ll_event_send(&g_ble_ll_conn_cur_sm->conn_ev_end);
   172de:	4c04      	ldr	r4, [pc, #16]	; (172f0 <ble_ll_conn_event_halt+0x28>)
   172e0:	6820      	ldr	r0, [r4, #0]
   172e2:	309c      	adds	r0, #156	; 0x9c
   172e4:	f7fd fc1c 	bl	14b20 <ble_ll_event_send>
        g_ble_ll_conn_cur_sm = NULL;
   172e8:	2300      	movs	r3, #0
   172ea:	6023      	str	r3, [r4, #0]
    }
}
   172ec:	bd10      	pop	{r4, pc}
   172ee:	bf00      	nop
   172f0:	20003878 	.word	0x20003878

000172f4 <ble_ll_init_rx_pkt_in>:
 * @param ble_hdr
 */
void
ble_ll_init_rx_pkt_in(uint8_t pdu_type, uint8_t *rxbuf,
                      struct ble_mbuf_hdr *ble_hdr)
{
   172f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   172f6:	b08b      	sub	sp, #44	; 0x2c
    uint8_t *addr;
    uint8_t *adv_addr;
    uint8_t *inita;
    uint8_t inita_type;
    struct ble_ll_conn_sm *connsm;
    int ext_adv_mode = -1;
   172f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   172fc:	9305      	str	r3, [sp, #20]
         aux_data = ble_hdr->rxinfo.user_data;
     }
#endif

    /* Get the connection state machine we are trying to create */
    connsm = g_ble_ll_conn_create_sm;
   172fe:	4b3c      	ldr	r3, [pc, #240]	; (173f0 <ble_ll_init_rx_pkt_in+0xfc>)
   17300:	681e      	ldr	r6, [r3, #0]
    if (!connsm) {
   17302:	b15e      	cbz	r6, 1731c <ble_ll_init_rx_pkt_in+0x28>
   17304:	4615      	mov	r5, r2
   17306:	460c      	mov	r4, r1
        }
#endif
        return;
    }

    if (!BLE_MBUF_HDR_CRC_OK(ble_hdr)) {
   17308:	8813      	ldrh	r3, [r2, #0]
   1730a:	f013 0f80 	tst.w	r3, #128	; 0x80
   1730e:	d003      	beq.n	17318 <ble_ll_init_rx_pkt_in+0x24>
        }
    }
#endif

    /* If we have sent a connect request, we need to enter CONNECTION state */
    if (connsm && CONN_F_CONN_REQ_TXD(connsm)) {
   17310:	f996 3001 	ldrsb.w	r3, [r6, #1]
   17314:	2b00      	cmp	r3, #0
   17316:	db03      	blt.n	17320 <ble_ll_init_rx_pkt_in+0x2c>
    if (aux_data) {
        ble_ll_scan_aux_data_unref(ble_hdr->rxinfo.user_data);
        ble_hdr->rxinfo.user_data = NULL;
    }
#endif
    ble_ll_scan_chk_resume();
   17318:	f005 f84a 	bl	1c3b0 <ble_ll_scan_chk_resume>
}
   1731c:	b00b      	add	sp, #44	; 0x2c
   1731e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (ble_ll_scan_adv_decode_addr(pdu_type, rxbuf, ble_hdr,
   17320:	ab05      	add	r3, sp, #20
   17322:	9303      	str	r3, [sp, #12]
   17324:	f10d 031b 	add.w	r3, sp, #27
   17328:	9302      	str	r3, [sp, #8]
   1732a:	ab07      	add	r3, sp, #28
   1732c:	9301      	str	r3, [sp, #4]
   1732e:	f10d 0327 	add.w	r3, sp, #39	; 0x27
   17332:	9300      	str	r3, [sp, #0]
   17334:	ab08      	add	r3, sp, #32
   17336:	f005 f80f 	bl	1c358 <ble_ll_scan_adv_decode_addr>
   1733a:	2800      	cmp	r0, #0
   1733c:	d1ec      	bne.n	17318 <ble_ll_init_rx_pkt_in+0x24>
        if (connsm->rpa_index >= 0) {
   1733e:	f996 2009 	ldrsb.w	r2, [r6, #9]
   17342:	2a00      	cmp	r2, #0
   17344:	db36      	blt.n	173b4 <ble_ll_init_rx_pkt_in+0xc0>
            addr_type = g_ble_ll_resolv_list[connsm->rpa_index].rl_addr_type + 2;
   17346:	482b      	ldr	r0, [pc, #172]	; (173f4 <ble_ll_init_rx_pkt_in+0x100>)
   17348:	2336      	movs	r3, #54	; 0x36
   1734a:	fb03 f302 	mul.w	r3, r3, r2
   1734e:	5cc1      	ldrb	r1, [r0, r3]
   17350:	3102      	adds	r1, #2
   17352:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
            addr = g_ble_ll_resolv_list[connsm->rpa_index].rl_identity_addr;
   17356:	f103 0720 	add.w	r7, r3, #32
   1735a:	4407      	add	r7, r0
   1735c:	3704      	adds	r7, #4
        if (connsm->rpa_index >= 0) {
   1735e:	2a00      	cmp	r2, #0
   17360:	db30      	blt.n	173c4 <ble_ll_init_rx_pkt_in+0xd0>
            connsm->peer_addr_type = addr_type;
   17362:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   17366:	f886 3092 	strb.w	r3, [r6, #146]	; 0x92
            memcpy(connsm->peer_addr, addr, BLE_DEV_ADDR_LEN);
   1736a:	683b      	ldr	r3, [r7, #0]
   1736c:	f8c6 3093 	str.w	r3, [r6, #147]	; 0x93
   17370:	88bb      	ldrh	r3, [r7, #4]
   17372:	f8a6 3097 	strh.w	r3, [r6, #151]	; 0x97
            ble_ll_scan_set_peer_rpa(adv_addr);
   17376:	9808      	ldr	r0, [sp, #32]
   17378:	f005 f9a0 	bl	1c6bc <ble_ll_scan_set_peer_rpa>
            ble_ll_resolv_set_peer_rpa(connsm->rpa_index, rxbuf + BLE_LL_PDU_HDR_LEN);
   1737c:	1ca1      	adds	r1, r4, #2
   1737e:	f996 0009 	ldrsb.w	r0, [r6, #9]
   17382:	f003 feb7 	bl	1b0f4 <ble_ll_resolv_set_peer_rpa>
            if (ble_ll_is_rpa(inita, inita_type)) {
   17386:	f89d 101b 	ldrb.w	r1, [sp, #27]
   1738a:	9807      	ldr	r0, [sp, #28]
   1738c:	f7fd f9e7 	bl	1475e <ble_ll_is_rpa>
   17390:	b990      	cbnz	r0, 173b8 <ble_ll_init_rx_pkt_in+0xc4>
        g_ble_ll_conn_create_sm = NULL;
   17392:	2000      	movs	r0, #0
   17394:	4b16      	ldr	r3, [pc, #88]	; (173f0 <ble_ll_init_rx_pkt_in+0xfc>)
   17396:	6018      	str	r0, [r3, #0]
        ble_ll_scan_sm_stop(0);
   17398:	f004 feca 	bl	1c130 <ble_ll_scan_sm_stop>
        if (ble_hdr->rxinfo.channel < BLE_PHY_NUM_DATA_CHANS) {
   1739c:	78ab      	ldrb	r3, [r5, #2]
   1739e:	2b24      	cmp	r3, #36	; 0x24
   173a0:	d81f      	bhi.n	173e2 <ble_ll_init_rx_pkt_in+0xee>
            ble_ll_conn_set_csa(connsm, 1);
   173a2:	2101      	movs	r1, #1
   173a4:	4630      	mov	r0, r6
   173a6:	f7ff fd25 	bl	16df4 <ble_ll_conn_set_csa>
        ble_ll_conn_created(connsm, NULL);
   173aa:	2100      	movs	r1, #0
   173ac:	4630      	mov	r0, r6
   173ae:	f7ff fc95 	bl	16cdc <ble_ll_conn_created>
        return;
   173b2:	e7b3      	b.n	1731c <ble_ll_init_rx_pkt_in+0x28>
            addr = adv_addr;
   173b4:	9f08      	ldr	r7, [sp, #32]
   173b6:	e7d2      	b.n	1735e <ble_ll_init_rx_pkt_in+0x6a>
                ble_ll_resolv_set_local_rpa(connsm->rpa_index, inita);
   173b8:	9907      	ldr	r1, [sp, #28]
   173ba:	f996 0009 	ldrsb.w	r0, [r6, #9]
   173be:	f003 fead 	bl	1b11c <ble_ll_resolv_set_local_rpa>
   173c2:	e7e6      	b.n	17392 <ble_ll_init_rx_pkt_in+0x9e>
        } else if (ble_ll_scan_whitelist_enabled()) {
   173c4:	f005 f988 	bl	1c6d8 <ble_ll_scan_whitelist_enabled>
   173c8:	2800      	cmp	r0, #0
   173ca:	d0e2      	beq.n	17392 <ble_ll_init_rx_pkt_in+0x9e>
            connsm->peer_addr_type = addr_type;
   173cc:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   173d0:	f886 3092 	strb.w	r3, [r6, #146]	; 0x92
            memcpy(connsm->peer_addr, addr, BLE_DEV_ADDR_LEN);
   173d4:	683b      	ldr	r3, [r7, #0]
   173d6:	f8c6 3093 	str.w	r3, [r6, #147]	; 0x93
   173da:	88bb      	ldrh	r3, [r7, #4]
   173dc:	f8a6 3097 	strh.w	r3, [r6, #151]	; 0x97
   173e0:	e7d7      	b.n	17392 <ble_ll_init_rx_pkt_in+0x9e>
            ble_ll_conn_set_csa(connsm, rxbuf[0] & BLE_ADV_PDU_HDR_CHSEL_MASK);
   173e2:	7821      	ldrb	r1, [r4, #0]
   173e4:	f3c1 1140 	ubfx	r1, r1, #5, #1
   173e8:	4630      	mov	r0, r6
   173ea:	f7ff fd03 	bl	16df4 <ble_ll_conn_set_csa>
   173ee:	e7dc      	b.n	173aa <ble_ll_init_rx_pkt_in+0xb6>
   173f0:	20003888 	.word	0x20003888
   173f4:	20003ae0 	.word	0x20003ae0

000173f8 <ble_ll_init_rx_isr_start>:
int
ble_ll_init_rx_isr_start(uint8_t pdu_type, struct ble_mbuf_hdr *ble_hdr)
{
    struct ble_ll_conn_sm *connsm;

    connsm = g_ble_ll_conn_create_sm;
   173f8:	4b08      	ldr	r3, [pc, #32]	; (1741c <ble_ll_init_rx_isr_start+0x24>)
   173fa:	681b      	ldr	r3, [r3, #0]
    if (!connsm) {
   173fc:	b143      	cbz	r3, 17410 <ble_ll_init_rx_isr_start+0x18>
        return 0;
    }

    if ((pdu_type == BLE_ADV_PDU_TYPE_ADV_IND) ||
   173fe:	b148      	cbz	r0, 17414 <ble_ll_init_rx_isr_start+0x1c>
   17400:	2801      	cmp	r0, #1
   17402:	d009      	beq.n	17418 <ble_ll_init_rx_isr_start+0x20>
        (pdu_type == BLE_ADV_PDU_TYPE_ADV_DIRECT_IND ||
   17404:	2808      	cmp	r0, #8
   17406:	d001      	beq.n	1740c <ble_ll_init_rx_isr_start+0x14>
        ble_hdr->rxinfo.flags |= BLE_MBUF_HDR_F_EXT_ADV;
        return 1;
    }
#endif

    return 0;
   17408:	2000      	movs	r0, #0
}
   1740a:	4770      	bx	lr
        return 1;
   1740c:	2001      	movs	r0, #1
   1740e:	4770      	bx	lr
        return 0;
   17410:	2000      	movs	r0, #0
   17412:	4770      	bx	lr
        return 1;
   17414:	2001      	movs	r0, #1
   17416:	4770      	bx	lr
   17418:	2001      	movs	r0, #1
   1741a:	4770      	bx	lr
   1741c:	20003888 	.word	0x20003888

00017420 <ble_ll_init_rx_isr_end>:
 *       > 0: Do not disable PHY as that has already been done.
 */
int
ble_ll_init_rx_isr_end(uint8_t *rxbuf, uint8_t crcok,
                       struct ble_mbuf_hdr *ble_hdr)
{
   17420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17424:	b08d      	sub	sp, #52	; 0x34
    int chk_wl;
    int index;
    uint8_t pdu_type;
    uint8_t adv_addr_type;
    uint8_t peer_addr_type;
    uint8_t *adv_addr = NULL;
   17426:	2300      	movs	r3, #0
   17428:	930a      	str	r3, [sp, #40]	; 0x28
    uint8_t *peer;
    uint8_t *init_addr = NULL;
   1742a:	9309      	str	r3, [sp, #36]	; 0x24
#endif
#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LL_EXT_ADV)
    struct ble_ll_scan_sm *scansm;
    uint8_t phy;
#endif
    int ext_adv_mode = -1;
   1742c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17430:	9307      	str	r3, [sp, #28]

    /* Get connection state machine to use if connection to be established */
    connsm = g_ble_ll_conn_create_sm;
   17432:	4bac      	ldr	r3, [pc, #688]	; (176e4 <ble_ll_init_rx_isr_end+0x2c4>)
   17434:	681e      	ldr	r6, [r3, #0]
    /* This could happen if connection init was cancelled while isr end was
     * already pending
     */
    if (!connsm) {
   17436:	b1f6      	cbz	r6, 17476 <ble_ll_init_rx_isr_end+0x56>
   17438:	4604      	mov	r4, r0
   1743a:	4690      	mov	r8, r2
        ble_ll_state_set(BLE_LL_STATE_STANDBY);
        return -1;
    }

    rc = -1;
    pdu_type = rxbuf[0] & BLE_ADV_PDU_HDR_TYPE_MASK;
   1743c:	7805      	ldrb	r5, [r0, #0]
   1743e:	f005 050f 	and.w	r5, r5, #15
    pyld_len = rxbuf[1];
   17442:	7847      	ldrb	r7, [r0, #1]
        ble_hdr->rxinfo.user_data = scansm->cur_aux_data;
        scansm->cur_aux_data = NULL;
    }
#endif

    if (!crcok) {
   17444:	b9e9      	cbnz	r1, 17482 <ble_ll_init_rx_isr_end+0x62>
    rc = -1;
   17446:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff

    /*
     * We have to restart receive if we cant hand up pdu. We return 0 so that
     * the phy does not get disabled.
     */
    rxpdu = ble_ll_rxpdu_alloc(pyld_len + BLE_LL_PDU_HDR_LEN);
   1744a:	1cb8      	adds	r0, r7, #2
   1744c:	f7fd f946 	bl	146dc <ble_ll_rxpdu_alloc>
    if (rxpdu == NULL) {
   17450:	4605      	mov	r5, r0
   17452:	2800      	cmp	r0, #0
   17454:	f000 814f 	beq.w	176f6 <ble_ll_init_rx_isr_end+0x2d6>
            ble_ll_sched_rmv_elem(&connsm->conn_sch);
        }
        ble_phy_restart_rx();
        rc = 0;
    } else {
        ble_phy_rxpdu_copy(rxbuf, rxpdu);
   17458:	4601      	mov	r1, r0
   1745a:	4620      	mov	r0, r4
   1745c:	f006 faa0 	bl	1d9a0 <ble_phy_rxpdu_copy>
        ble_ll_rx_pdu_in(rxpdu);
   17460:	4628      	mov	r0, r5
   17462:	f7fd fa65 	bl	14930 <ble_ll_rx_pdu_in>
    }

    if (rc) {
   17466:	f1b8 0f00 	cmp.w	r8, #0
   1746a:	f000 814c 	beq.w	17706 <ble_ll_init_rx_isr_end+0x2e6>
        ble_ll_state_set(BLE_LL_STATE_STANDBY);
   1746e:	2000      	movs	r0, #0
   17470:	f7fd fb4a 	bl	14b08 <ble_ll_state_set>
   17474:	e147      	b.n	17706 <ble_ll_init_rx_isr_end+0x2e6>
        ble_ll_state_set(BLE_LL_STATE_STANDBY);
   17476:	2000      	movs	r0, #0
   17478:	f7fd fb46 	bl	14b08 <ble_ll_state_set>
        return -1;
   1747c:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   17480:	e141      	b.n	17706 <ble_ll_init_rx_isr_end+0x2e6>
    if (ble_ll_scan_adv_decode_addr(pdu_type, rxbuf, ble_hdr,
   17482:	ab07      	add	r3, sp, #28
   17484:	9303      	str	r3, [sp, #12]
   17486:	f10d 0323 	add.w	r3, sp, #35	; 0x23
   1748a:	9302      	str	r3, [sp, #8]
   1748c:	ab09      	add	r3, sp, #36	; 0x24
   1748e:	9301      	str	r3, [sp, #4]
   17490:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
   17494:	9300      	str	r3, [sp, #0]
   17496:	ab0a      	add	r3, sp, #40	; 0x28
   17498:	4601      	mov	r1, r0
   1749a:	4628      	mov	r0, r5
   1749c:	f004 ff5c 	bl	1c358 <ble_ll_scan_adv_decode_addr>
   174a0:	9004      	str	r0, [sp, #16]
   174a2:	2800      	cmp	r0, #0
   174a4:	f040 8106 	bne.w	176b4 <ble_ll_init_rx_isr_end+0x294>
    switch (pdu_type) {
   174a8:	b155      	cbz	r5, 174c0 <ble_ll_init_rx_isr_end+0xa0>
   174aa:	2d01      	cmp	r5, #1
   174ac:	f040 8105 	bne.w	176ba <ble_ll_init_rx_isr_end+0x29a>
        inita_is_rpa = (uint8_t)ble_ll_is_rpa(init_addr, init_addr_type);
   174b0:	f89d 1023 	ldrb.w	r1, [sp, #35]	; 0x23
   174b4:	9809      	ldr	r0, [sp, #36]	; 0x24
   174b6:	f7fd f952 	bl	1475e <ble_ll_is_rpa>
   174ba:	b2c5      	uxtb	r5, r0
        if (!inita_is_rpa) {
   174bc:	2d00      	cmp	r5, #0
   174be:	d036      	beq.n	1752e <ble_ll_init_rx_isr_end+0x10e>
    peer = adv_addr;
   174c0:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    peer_addr_type = adv_addr_type;
   174c4:	f89d b02f 	ldrb.w	fp, [sp, #47]	; 0x2f
    chk_wl = ble_ll_scan_whitelist_enabled();
   174c8:	f005 f906 	bl	1c6d8 <ble_ll_scan_whitelist_enabled>
   174cc:	9005      	str	r0, [sp, #20]
    if (ble_ll_is_rpa(adv_addr, adv_addr_type) && ble_ll_resolv_enabled()) {
   174ce:	f89d 102f 	ldrb.w	r1, [sp, #47]	; 0x2f
   174d2:	980a      	ldr	r0, [sp, #40]	; 0x28
   174d4:	f7fd f943 	bl	1475e <ble_ll_is_rpa>
   174d8:	2800      	cmp	r0, #0
   174da:	d132      	bne.n	17542 <ble_ll_init_rx_isr_end+0x122>
    } else if (init_addr) {
   174dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   174de:	2b00      	cmp	r3, #0
   174e0:	f000 808f 	beq.w	17602 <ble_ll_init_rx_isr_end+0x1e2>
        if (inita_is_rpa && !ble_ll_resolv_enabled()) {
   174e4:	b125      	cbz	r5, 174f0 <ble_ll_init_rx_isr_end+0xd0>
   174e6:	f003 fe7d 	bl	1b1e4 <ble_ll_resolv_enabled>
   174ea:	2800      	cmp	r0, #0
   174ec:	f000 80f1 	beq.w	176d2 <ble_ll_init_rx_isr_end+0x2b2>
        rl = ble_ll_resolv_list_find(adv_addr, adv_addr_type);
   174f0:	f89d 102f 	ldrb.w	r1, [sp, #47]	; 0x2f
   174f4:	980a      	ldr	r0, [sp, #40]	; 0x28
   174f6:	f003 fc1f 	bl	1ad38 <ble_ll_resolv_list_find>
        if (rl && !inita_is_rpa &&
   174fa:	4682      	mov	sl, r0
   174fc:	b130      	cbz	r0, 1750c <ble_ll_init_rx_isr_end+0xec>
   174fe:	b92d      	cbnz	r5, 1750c <ble_ll_init_rx_isr_end+0xec>
           (rl->rl_priv_mode == BLE_HCI_PRIVACY_NETWORK) &&
   17500:	7843      	ldrb	r3, [r0, #1]
        if (rl && !inita_is_rpa &&
   17502:	b91b      	cbnz	r3, 1750c <ble_ll_init_rx_isr_end+0xec>
           rl->rl_has_local) {
   17504:	7883      	ldrb	r3, [r0, #2]
           (rl->rl_priv_mode == BLE_HCI_PRIVACY_NETWORK) &&
   17506:	2b00      	cmp	r3, #0
   17508:	f040 80e6 	bne.w	176d8 <ble_ll_init_rx_isr_end+0x2b8>
        if (inita_is_rpa) {
   1750c:	2d00      	cmp	r5, #0
   1750e:	f000 8096 	beq.w	1763e <ble_ll_init_rx_isr_end+0x21e>
            if (!rl || !ble_ll_resolv_rpa(init_addr, rl->rl_local_irk)) {
   17512:	f1ba 0f00 	cmp.w	sl, #0
   17516:	f000 80e2 	beq.w	176de <ble_ll_init_rx_isr_end+0x2be>
   1751a:	f10a 0104 	add.w	r1, sl, #4
   1751e:	9809      	ldr	r0, [sp, #36]	; 0x24
   17520:	f003 fe2c 	bl	1b17c <ble_ll_resolv_rpa>
   17524:	2800      	cmp	r0, #0
   17526:	d15c      	bne.n	175e2 <ble_ll_init_rx_isr_end+0x1c2>
    rc = -1;
   17528:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   1752c:	e78d      	b.n	1744a <ble_ll_init_rx_isr_end+0x2a>
            if (!ble_ll_is_our_devaddr(init_addr, init_addr_type)) {
   1752e:	f89d 1023 	ldrb.w	r1, [sp, #35]	; 0x23
   17532:	9809      	ldr	r0, [sp, #36]	; 0x24
   17534:	f7fd f9c0 	bl	148b8 <ble_ll_is_our_devaddr>
   17538:	2800      	cmp	r0, #0
   1753a:	d1c1      	bne.n	174c0 <ble_ll_init_rx_isr_end+0xa0>
    rc = -1;
   1753c:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   17540:	e783      	b.n	1744a <ble_ll_init_rx_isr_end+0x2a>
    if (ble_ll_is_rpa(adv_addr, adv_addr_type) && ble_ll_resolv_enabled()) {
   17542:	f003 fe4f 	bl	1b1e4 <ble_ll_resolv_enabled>
   17546:	2800      	cmp	r0, #0
   17548:	d0c8      	beq.n	174dc <ble_ll_init_rx_isr_end+0xbc>
        index = ble_hw_resolv_list_match();
   1754a:	f006 f8af 	bl	1d6ac <ble_hw_resolv_list_match>
        if (index >= 0) {
   1754e:	f1b0 0a00 	subs.w	sl, r0, #0
   17552:	db3d      	blt.n	175d0 <ble_ll_init_rx_isr_end+0x1b0>
            ble_hdr->rxinfo.flags |= BLE_MBUF_HDR_F_RESOLVED;
   17554:	f8b8 3000 	ldrh.w	r3, [r8]
   17558:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   1755c:	f8a8 3000 	strh.w	r3, [r8]
            connsm->rpa_index = index;
   17560:	f886 a009 	strb.w	sl, [r6, #9]
            peer = rl->rl_identity_addr;
   17564:	2336      	movs	r3, #54	; 0x36
   17566:	fb03 f30a 	mul.w	r3, r3, sl
   1756a:	f103 0920 	add.w	r9, r3, #32
   1756e:	4a5e      	ldr	r2, [pc, #376]	; (176e8 <ble_ll_init_rx_isr_end+0x2c8>)
   17570:	4491      	add	r9, r2
   17572:	f109 0904 	add.w	r9, r9, #4
            peer_addr_type = rl->rl_addr_type;
   17576:	18d1      	adds	r1, r2, r3
   17578:	f812 b003 	ldrb.w	fp, [r2, r3]
            if ((rl->rl_priv_mode == BLE_HCI_PRIVACY_NETWORK) && init_addr &&
   1757c:	784b      	ldrb	r3, [r1, #1]
   1757e:	b933      	cbnz	r3, 1758e <ble_ll_init_rx_isr_end+0x16e>
   17580:	9b09      	ldr	r3, [sp, #36]	; 0x24
   17582:	b123      	cbz	r3, 1758e <ble_ll_init_rx_isr_end+0x16e>
   17584:	b91d      	cbnz	r5, 1758e <ble_ll_init_rx_isr_end+0x16e>
                !inita_is_rpa && rl->rl_has_local) {
   17586:	788b      	ldrb	r3, [r1, #2]
   17588:	2b00      	cmp	r3, #0
   1758a:	f040 8099 	bne.w	176c0 <ble_ll_init_rx_isr_end+0x2a0>
            if (init_addr && inita_is_rpa) {
   1758e:	9809      	ldr	r0, [sp, #36]	; 0x24
   17590:	b388      	cbz	r0, 175f6 <ble_ll_init_rx_isr_end+0x1d6>
   17592:	b915      	cbnz	r5, 1759a <ble_ll_init_rx_isr_end+0x17a>
            resolved = 1;
   17594:	2301      	movs	r3, #1
   17596:	9304      	str	r3, [sp, #16]
   17598:	e035      	b.n	17606 <ble_ll_init_rx_isr_end+0x1e6>
                                       g_ble_ll_resolv_list[index].rl_local_irk)) {
   1759a:	2136      	movs	r1, #54	; 0x36
   1759c:	4b52      	ldr	r3, [pc, #328]	; (176e8 <ble_ll_init_rx_isr_end+0x2c8>)
   1759e:	fb01 310a 	mla	r1, r1, sl, r3
                if (!ble_ll_resolv_rpa(init_addr,
   175a2:	3104      	adds	r1, #4
   175a4:	f003 fdea 	bl	1b17c <ble_ll_resolv_rpa>
   175a8:	b910      	cbnz	r0, 175b0 <ble_ll_init_rx_isr_end+0x190>
    rc = -1;
   175aa:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   175ae:	e74c      	b.n	1744a <ble_ll_init_rx_isr_end+0x2a>
                memcpy(init_addr, rl->rl_local_rpa, BLE_DEV_ADDR_LEN);
   175b0:	2336      	movs	r3, #54	; 0x36
   175b2:	fb03 f30a 	mul.w	r3, r3, sl
   175b6:	f103 0228 	add.w	r2, r3, #40	; 0x28
   175ba:	4b4b      	ldr	r3, [pc, #300]	; (176e8 <ble_ll_init_rx_isr_end+0x2c8>)
   175bc:	4413      	add	r3, r2
   175be:	9a09      	ldr	r2, [sp, #36]	; 0x24
   175c0:	f853 1f02 	ldr.w	r1, [r3, #2]!
   175c4:	6011      	str	r1, [r2, #0]
   175c6:	889b      	ldrh	r3, [r3, #4]
   175c8:	8093      	strh	r3, [r2, #4]
            resolved = 1;
   175ca:	2301      	movs	r3, #1
   175cc:	9304      	str	r3, [sp, #16]
   175ce:	e01a      	b.n	17606 <ble_ll_init_rx_isr_end+0x1e6>
            if (chk_wl) {
   175d0:	9a05      	ldr	r2, [sp, #20]
   175d2:	2a00      	cmp	r2, #0
   175d4:	d177      	bne.n	176c6 <ble_ll_init_rx_isr_end+0x2a6>
            if (init_addr && inita_is_rpa) {
   175d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   175d8:	b183      	cbz	r3, 175fc <ble_ll_init_rx_isr_end+0x1dc>
   175da:	2d00      	cmp	r5, #0
   175dc:	d176      	bne.n	176cc <ble_ll_init_rx_isr_end+0x2ac>
    resolved = 0;
   175de:	9204      	str	r2, [sp, #16]
   175e0:	e011      	b.n	17606 <ble_ll_init_rx_isr_end+0x1e6>
            memcpy(init_addr, rl->rl_local_rpa, BLE_DEV_ADDR_LEN);
   175e2:	4653      	mov	r3, sl
   175e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   175e6:	f853 1f2a 	ldr.w	r1, [r3, #42]!
   175ea:	6011      	str	r1, [r2, #0]
   175ec:	889b      	ldrh	r3, [r3, #4]
   175ee:	8093      	strh	r3, [r2, #4]
    index = -1;
   175f0:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   175f4:	e007      	b.n	17606 <ble_ll_init_rx_isr_end+0x1e6>
            resolved = 1;
   175f6:	2301      	movs	r3, #1
   175f8:	9304      	str	r3, [sp, #16]
   175fa:	e004      	b.n	17606 <ble_ll_init_rx_isr_end+0x1e6>
    resolved = 0;
   175fc:	9b05      	ldr	r3, [sp, #20]
   175fe:	9304      	str	r3, [sp, #16]
   17600:	e001      	b.n	17606 <ble_ll_init_rx_isr_end+0x1e6>
    index = -1;
   17602:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
    if (chk_wl) {
   17606:	9b05      	ldr	r3, [sp, #20]
   17608:	b1e3      	cbz	r3, 17644 <ble_ll_init_rx_isr_end+0x224>
        if (!ble_ll_whitelist_match(peer, peer_addr_type, resolved)) {
   1760a:	9a04      	ldr	r2, [sp, #16]
   1760c:	4659      	mov	r1, fp
   1760e:	4648      	mov	r0, r9
   17610:	f005 fe4c 	bl	1d2ac <ble_ll_whitelist_match>
   17614:	2800      	cmp	r0, #0
   17616:	d06b      	beq.n	176f0 <ble_ll_init_rx_isr_end+0x2d0>
    ble_hdr->rxinfo.flags |= BLE_MBUF_HDR_F_DEVMATCH;
   17618:	f8b8 3000 	ldrh.w	r3, [r8]
   1761c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   17620:	f8a8 3000 	strh.w	r3, [r8]
    if (ble_ll_sched_master_new(connsm, ble_hdr, pyld_len)) {
   17624:	463a      	mov	r2, r7
   17626:	4641      	mov	r1, r8
   17628:	4630      	mov	r0, r6
   1762a:	f005 fa3d 	bl	1caa8 <ble_ll_sched_master_new>
   1762e:	b1a0      	cbz	r0, 1765a <ble_ll_init_rx_isr_end+0x23a>
        STATS_INC(ble_ll_conn_stats, cant_set_sched);
   17630:	4a2e      	ldr	r2, [pc, #184]	; (176ec <ble_ll_init_rx_isr_end+0x2cc>)
   17632:	68d3      	ldr	r3, [r2, #12]
   17634:	3301      	adds	r3, #1
   17636:	60d3      	str	r3, [r2, #12]
    rc = -1;
   17638:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
        goto init_rx_isr_exit;
   1763c:	e705      	b.n	1744a <ble_ll_init_rx_isr_end+0x2a>
    index = -1;
   1763e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   17642:	e7e0      	b.n	17606 <ble_ll_init_rx_isr_end+0x1e6>
        if (!ble_ll_conn_is_peer_adv(adv_addr_type, adv_addr, index)) {
   17644:	4652      	mov	r2, sl
   17646:	990a      	ldr	r1, [sp, #40]	; 0x28
   17648:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
   1764c:	f7ff f8e2 	bl	16814 <ble_ll_conn_is_peer_adv>
   17650:	2800      	cmp	r0, #0
   17652:	d1e1      	bne.n	17618 <ble_ll_init_rx_isr_end+0x1f8>
    rc = -1;
   17654:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   17658:	e6f7      	b.n	1744a <ble_ll_init_rx_isr_end+0x2a>
    ble_ll_conn_connect_ind_prepare(connsm,
   1765a:	f005 f839 	bl	1c6d0 <ble_ll_scan_get_pdu_data>
   1765e:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
   17662:	f898 3002 	ldrb.w	r3, [r8, #2]
   17666:	9303      	str	r3, [sp, #12]
   17668:	f8cd a008 	str.w	sl, [sp, #8]
   1766c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1766e:	9301      	str	r3, [sp, #4]
   17670:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   17674:	9300      	str	r3, [sp, #0]
   17676:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   17678:	4601      	mov	r1, r0
   1767a:	4630      	mov	r0, r6
   1767c:	f7ff f94e 	bl	1691c <ble_ll_conn_connect_ind_prepare>
    rc = ble_ll_conn_connect_ind_send(connsm, conn_req_end_trans);
   17680:	2100      	movs	r1, #0
   17682:	4630      	mov	r0, r6
   17684:	f7ff fe08 	bl	17298 <ble_ll_conn_connect_ind_send>
    if (rc) {
   17688:	4680      	mov	r8, r0
   1768a:	b970      	cbnz	r0, 176aa <ble_ll_init_rx_isr_end+0x28a>
    if (init_addr && !inita_is_rpa) {
   1768c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1768e:	b11b      	cbz	r3, 17698 <ble_ll_init_rx_isr_end+0x278>
   17690:	b915      	cbnz	r5, 17698 <ble_ll_init_rx_isr_end+0x278>
        connsm->inita_identity_used = 1;
   17692:	2301      	movs	r3, #1
   17694:	f886 3090 	strb.w	r3, [r6, #144]	; 0x90
    CONN_F_CONN_REQ_TXD(connsm) = 1;
   17698:	7873      	ldrb	r3, [r6, #1]
   1769a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1769e:	7073      	strb	r3, [r6, #1]
    STATS_INC(ble_ll_conn_stats, conn_req_txd);
   176a0:	4a12      	ldr	r2, [pc, #72]	; (176ec <ble_ll_init_rx_isr_end+0x2cc>)
   176a2:	6c13      	ldr	r3, [r2, #64]	; 0x40
   176a4:	3301      	adds	r3, #1
   176a6:	6413      	str	r3, [r2, #64]	; 0x40
   176a8:	e6cf      	b.n	1744a <ble_ll_init_rx_isr_end+0x2a>
        ble_ll_sched_rmv_elem(&connsm->conn_sch);
   176aa:	f106 00dc 	add.w	r0, r6, #220	; 0xdc
   176ae:	f005 fc8f 	bl	1cfd0 <ble_ll_sched_rmv_elem>
        goto init_rx_isr_exit;
   176b2:	e6ca      	b.n	1744a <ble_ll_init_rx_isr_end+0x2a>
    rc = -1;
   176b4:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   176b8:	e6c7      	b.n	1744a <ble_ll_init_rx_isr_end+0x2a>
   176ba:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   176be:	e6c4      	b.n	1744a <ble_ll_init_rx_isr_end+0x2a>
   176c0:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   176c4:	e6c1      	b.n	1744a <ble_ll_init_rx_isr_end+0x2a>
   176c6:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   176ca:	e6be      	b.n	1744a <ble_ll_init_rx_isr_end+0x2a>
   176cc:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   176d0:	e6bb      	b.n	1744a <ble_ll_init_rx_isr_end+0x2a>
   176d2:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   176d6:	e6b8      	b.n	1744a <ble_ll_init_rx_isr_end+0x2a>
   176d8:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   176dc:	e6b5      	b.n	1744a <ble_ll_init_rx_isr_end+0x2a>
   176de:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   176e2:	e6b2      	b.n	1744a <ble_ll_init_rx_isr_end+0x2a>
   176e4:	20003888 	.word	0x20003888
   176e8:	20003ae0 	.word	0x20003ae0
   176ec:	20003a30 	.word	0x20003a30
   176f0:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   176f4:	e6a9      	b.n	1744a <ble_ll_init_rx_isr_end+0x2a>
        if (CONN_F_CONN_REQ_TXD(connsm) == 1) {
   176f6:	f996 3001 	ldrsb.w	r3, [r6, #1]
   176fa:	2b00      	cmp	r3, #0
   176fc:	db07      	blt.n	1770e <ble_ll_init_rx_isr_end+0x2ee>
        ble_phy_restart_rx();
   176fe:	f006 fda7 	bl	1e250 <ble_phy_restart_rx>
        rc = 0;
   17702:	f04f 0800 	mov.w	r8, #0
    }

    return rc;
}
   17706:	4640      	mov	r0, r8
   17708:	b00d      	add	sp, #52	; 0x34
   1770a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            CONN_F_CONN_REQ_TXD(connsm) = 0;
   1770e:	7873      	ldrb	r3, [r6, #1]
   17710:	f36f 13c7 	bfc	r3, #7, #1
   17714:	7073      	strb	r3, [r6, #1]
            CONN_F_AUX_CONN_REQ(connsm) = 0;
   17716:	78f3      	ldrb	r3, [r6, #3]
   17718:	f36f 0382 	bfc	r3, #2, #1
   1771c:	70f3      	strb	r3, [r6, #3]
            ble_ll_sched_rmv_elem(&connsm->conn_sch);
   1771e:	f106 00dc 	add.w	r0, r6, #220	; 0xdc
   17722:	f005 fc55 	bl	1cfd0 <ble_ll_sched_rmv_elem>
   17726:	e7ea      	b.n	176fe <ble_ll_init_rx_isr_end+0x2de>

00017728 <ble_ll_conn_timeout>:
 * @param connsm
 * @param ble_err
 */
void
ble_ll_conn_timeout(struct ble_ll_conn_sm *connsm, uint8_t ble_err)
{
   17728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1772a:	4604      	mov	r4, r0
   1772c:	460d      	mov	r5, r1
    int was_current;
    os_sr_t sr;

    was_current = 0;
    OS_ENTER_CRITICAL(sr);
   1772e:	f7f6 ff01 	bl	e534 <os_arch_save_sr>
   17732:	4606      	mov	r6, r0
    if (g_ble_ll_conn_cur_sm == connsm) {
   17734:	4b0a      	ldr	r3, [pc, #40]	; (17760 <ble_ll_conn_timeout+0x38>)
   17736:	681b      	ldr	r3, [r3, #0]
   17738:	42a3      	cmp	r3, r4
   1773a:	d009      	beq.n	17750 <ble_ll_conn_timeout+0x28>
    was_current = 0;
   1773c:	2700      	movs	r7, #0
        ble_ll_conn_current_sm_over(NULL);
        was_current = 1;
    }
    OS_EXIT_CRITICAL(sr);
   1773e:	4630      	mov	r0, r6
   17740:	f7f6 fefe 	bl	e540 <os_arch_restore_sr>

    /* Check if we need to resume scanning */
    if (was_current) {
   17744:	b94f      	cbnz	r7, 1775a <ble_ll_conn_timeout+0x32>
        ble_ll_scan_chk_resume();
    }

    ble_ll_conn_end(connsm, ble_err);
   17746:	4629      	mov	r1, r5
   17748:	4620      	mov	r0, r4
   1774a:	f7ff fc7f 	bl	1704c <ble_ll_conn_end>
}
   1774e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ble_ll_conn_current_sm_over(NULL);
   17750:	2000      	movs	r0, #0
   17752:	f7fe fbc7 	bl	15ee4 <ble_ll_conn_current_sm_over>
        was_current = 1;
   17756:	2701      	movs	r7, #1
   17758:	e7f1      	b.n	1773e <ble_ll_conn_timeout+0x16>
        ble_ll_scan_chk_resume();
   1775a:	f004 fe29 	bl	1c3b0 <ble_ll_scan_chk_resume>
   1775e:	e7f2      	b.n	17746 <ble_ll_conn_timeout+0x1e>
   17760:	20003878 	.word	0x20003878

00017764 <ble_ll_conn_rx_isr_start>:
 *
 * @param rxhdr
 */
int
ble_ll_conn_rx_isr_start(struct ble_mbuf_hdr *rxhdr, uint32_t aa)
{
   17764:	b510      	push	{r4, lr}
     * Disable wait for response timer since we receive a response. We dont
     * care if this is the response we were waiting for or not; the code
     * called at receive end will deal with ending the connection event
     * if needed
     */
    connsm = g_ble_ll_conn_cur_sm;
   17766:	4b19      	ldr	r3, [pc, #100]	; (177cc <ble_ll_conn_rx_isr_start+0x68>)
   17768:	681c      	ldr	r4, [r3, #0]
    if (connsm) {
   1776a:	b35c      	cbz	r4, 177c4 <ble_ll_conn_rx_isr_start+0x60>
        /* Double check access address. Better match connection state machine */
        if (aa != connsm->access_addr) {
   1776c:	6d63      	ldr	r3, [r4, #84]	; 0x54
   1776e:	428b      	cmp	r3, r1
   17770:	d117      	bne.n	177a2 <ble_ll_conn_rx_isr_start+0x3e>
            g_ble_ll_conn_cur_sm = NULL;
            return -1;
        }

        /* Set connection handle in mbuf header */
        rxhdr->rxinfo.handle = connsm->conn_handle;
   17772:	88a3      	ldrh	r3, [r4, #4]
   17774:	70c3      	strb	r3, [r0, #3]

        /* Set flag denoting we have received a packet in connection event */
        connsm->csmflags.cfbit.pkt_rxd = 1;
   17776:	7823      	ldrb	r3, [r4, #0]
   17778:	f043 0301 	orr.w	r3, r3, #1
   1777c:	7023      	strb	r3, [r4, #0]

        /* Connection is established */
        connsm->conn_state = BLE_LL_CONN_STATE_ESTABLISHED;
   1777e:	2202      	movs	r2, #2
   17780:	71a2      	strb	r2, [r4, #6]

        /* Set anchor point (and last) if 1st rxd frame in connection event */
        if (connsm->csmflags.cfbit.slave_set_last_anchor) {
   17782:	f013 0f20 	tst.w	r3, #32
   17786:	d01f      	beq.n	177c8 <ble_ll_conn_rx_isr_start+0x64>
            connsm->csmflags.cfbit.slave_set_last_anchor = 0;
   17788:	b2db      	uxtb	r3, r3
   1778a:	f36f 1345 	bfc	r3, #5, #1
   1778e:	7023      	strb	r3, [r4, #0]
            connsm->last_anchor_point = rxhdr->beg_cputime;
   17790:	6883      	ldr	r3, [r0, #8]
   17792:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
            connsm->anchor_point = connsm->last_anchor_point;
   17796:	6763      	str	r3, [r4, #116]	; 0x74
            connsm->anchor_point_usecs = rxhdr->rem_usecs;
   17798:	68c3      	ldr	r3, [r0, #12]
   1779a:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
        }
    }
    return 1;
   1779e:	2001      	movs	r0, #1
}
   177a0:	bd10      	pop	{r4, pc}
            STATS_INC(ble_ll_conn_stats, rx_data_pdu_bad_aa);
   177a2:	4a0b      	ldr	r2, [pc, #44]	; (177d0 <ble_ll_conn_rx_isr_start+0x6c>)
   177a4:	6a93      	ldr	r3, [r2, #40]	; 0x28
   177a6:	3301      	adds	r3, #1
   177a8:	6293      	str	r3, [r2, #40]	; 0x28
            ble_ll_state_set(BLE_LL_STATE_STANDBY);
   177aa:	2000      	movs	r0, #0
   177ac:	f7fd f9ac 	bl	14b08 <ble_ll_state_set>
            ble_ll_event_send(&connsm->conn_ev_end);
   177b0:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   177b4:	f7fd f9b4 	bl	14b20 <ble_ll_event_send>
            g_ble_ll_conn_cur_sm = NULL;
   177b8:	4b04      	ldr	r3, [pc, #16]	; (177cc <ble_ll_conn_rx_isr_start+0x68>)
   177ba:	2200      	movs	r2, #0
   177bc:	601a      	str	r2, [r3, #0]
            return -1;
   177be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   177c2:	e7ed      	b.n	177a0 <ble_ll_conn_rx_isr_start+0x3c>
    return 1;
   177c4:	2001      	movs	r0, #1
   177c6:	e7eb      	b.n	177a0 <ble_ll_conn_rx_isr_start+0x3c>
   177c8:	2001      	movs	r0, #1
   177ca:	e7e9      	b.n	177a0 <ble_ll_conn_rx_isr_start+0x3c>
   177cc:	20003878 	.word	0x20003878
   177d0:	20003a30 	.word	0x20003a30

000177d4 <ble_ll_conn_rx_data_pdu>:
 * @param rxpdu Pointer to received pdu
 * @param rxpdu Pointer to ble mbuf header of received pdu
 */
void
ble_ll_conn_rx_data_pdu(struct os_mbuf *rxpdu, struct ble_mbuf_hdr *hdr)
{
   177d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   177d8:	4605      	mov	r5, r0
    uint8_t llid;
    uint16_t acl_len;
    uint16_t acl_hdr;
    struct ble_ll_conn_sm *connsm;

    if (BLE_MBUF_HDR_CRC_OK(hdr)) {
   177da:	880b      	ldrh	r3, [r1, #0]
   177dc:	f013 0f80 	tst.w	r3, #128	; 0x80
   177e0:	f000 80b3 	beq.w	1794a <ble_ll_conn_rx_data_pdu+0x176>
   177e4:	460c      	mov	r4, r1
        /* XXX: there is a chance that the connection was thrown away and
           re-used before processing packets here. Fix this. */
        /* We better have a connection state machine */
        connsm = ble_ll_conn_find_active_conn(hdr->rxinfo.handle);
   177e6:	78c8      	ldrb	r0, [r1, #3]
   177e8:	f7ff f90e 	bl	16a08 <ble_ll_conn_find_active_conn>
        if (connsm) {
   177ec:	4606      	mov	r6, r0
   177ee:	2800      	cmp	r0, #0
   177f0:	f000 80a7 	beq.w	17942 <ble_ll_conn_rx_data_pdu+0x16e>
            /* Check state machine */
            ble_ll_conn_chk_csm_flags(connsm);
   177f4:	f7fe ff88 	bl	16708 <ble_ll_conn_chk_csm_flags>

            /* Validate rx data pdu */
            rxbuf = rxpdu->om_data;
   177f8:	682b      	ldr	r3, [r5, #0]
            hdr_byte = rxbuf[0];
   177fa:	781f      	ldrb	r7, [r3, #0]
            acl_len = rxbuf[1];
   177fc:	f893 8001 	ldrb.w	r8, [r3, #1]
   17800:	fa1f f988 	uxth.w	r9, r8

            /*
             * Check that the LLID and payload length are reasonable.
             * Empty payload is only allowed for LLID == 01b.
             *  */
            if ((llid == 0) ||
   17804:	f017 0a03 	ands.w	sl, r7, #3
   17808:	d005      	beq.n	17816 <ble_ll_conn_rx_data_pdu+0x42>
   1780a:	f1b9 0f00 	cmp.w	r9, #0
   1780e:	d107      	bne.n	17820 <ble_ll_conn_rx_data_pdu+0x4c>
                ((acl_len == 0) && (llid != BLE_LL_LLID_DATA_FRAG))) {
   17810:	f1ba 0f01 	cmp.w	sl, #1
   17814:	d004      	beq.n	17820 <ble_ll_conn_rx_data_pdu+0x4c>
                STATS_INC(ble_ll_conn_stats, rx_bad_llid);
   17816:	4a4f      	ldr	r2, [pc, #316]	; (17954 <ble_ll_conn_rx_data_pdu+0x180>)
   17818:	6d93      	ldr	r3, [r2, #88]	; 0x58
   1781a:	3301      	adds	r3, #1
   1781c:	6593      	str	r3, [r2, #88]	; 0x58
                goto conn_rx_data_pdu_end;
   1781e:	e094      	b.n	1794a <ble_ll_conn_rx_data_pdu+0x176>
            /* Check if PDU is allowed when encryption is started. If not,
             * terminate connection.
             *
             * Reference: Core 5.0, Vol 6, Part B, 5.1.3.1
             */
            if ((connsm->enc_data.enc_state > CONN_ENC_S_PAUSE_ENC_RSP_WAIT) &&
   17820:	f896 3118 	ldrb.w	r3, [r6, #280]	; 0x118
   17824:	2b04      	cmp	r3, #4
   17826:	d843      	bhi.n	178b0 <ble_ll_conn_rx_data_pdu+0xdc>
            /*
             * Reset authenticated payload timeout if valid MIC. NOTE: we dont
             * check the MIC failure bit as that would have terminated the
             * connection
             */
            if ((connsm->enc_data.enc_state == CONN_ENC_S_ENCRYPTED) &&
   17828:	f896 3118 	ldrb.w	r3, [r6, #280]	; 0x118
   1782c:	2b02      	cmp	r3, #2
   1782e:	d049      	beq.n	178c4 <ble_ll_conn_rx_data_pdu+0xf0>
                ble_ll_conn_auth_pyld_timer_start(connsm);
            }
#endif

            /* Update RSSI */
            connsm->conn_rssi = hdr->rxinfo.rssi;
   17830:	f994 3004 	ldrsb.w	r3, [r4, #4]
   17834:	7233      	strb	r3, [r6, #8]

            /*
             * If we are a slave, we can only start to use slave latency
             * once we have received a NESN of 1 from the master
             */
            if (connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) {
   17836:	79f3      	ldrb	r3, [r6, #7]
   17838:	2b02      	cmp	r3, #2
   1783a:	d04e      	beq.n	178da <ble_ll_conn_rx_data_pdu+0x106>

            /*
             * Discard the received PDU if the sequence number is the same
             * as the last received sequence number
             */
            rxd_sn = hdr_byte & BLE_LL_DATA_HDR_SN_MASK;
   1783c:	f007 0708 	and.w	r7, r7, #8
            if (rxd_sn != connsm->last_rxd_sn) {
   17840:	f896 3035 	ldrb.w	r3, [r6, #53]	; 0x35
   17844:	42bb      	cmp	r3, r7
   17846:	d077      	beq.n	17938 <ble_ll_conn_rx_data_pdu+0x164>
                /* Update last rxd sn */
                connsm->last_rxd_sn = rxd_sn;
   17848:	f886 7035 	strb.w	r7, [r6, #53]	; 0x35

                /* No need to do anything if empty pdu */
                if ((llid == BLE_LL_LLID_DATA_FRAG) && (acl_len == 0)) {
   1784c:	f1ba 0f01 	cmp.w	sl, #1
   17850:	d04b      	beq.n	178ea <ble_ll_conn_rx_data_pdu+0x116>
#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LE_ENCRYPTION)
                /*
                 * XXX: should we check to see if we are in a state where we
                 * might expect to get an encrypted PDU?
                 */
                if (BLE_MBUF_HDR_MIC_FAILURE(hdr)) {
   17852:	8823      	ldrh	r3, [r4, #0]
   17854:	f013 0f20 	tst.w	r3, #32
   17858:	d14b      	bne.n	178f2 <ble_ll_conn_rx_data_pdu+0x11e>
                    ble_ll_conn_timeout(connsm, BLE_ERR_CONN_TERM_MIC);
                    goto conn_rx_data_pdu_end;
                }
#endif

                if (llid == BLE_LL_LLID_CTRL) {
   1785a:	f1ba 0f03 	cmp.w	sl, #3
   1785e:	d051      	beq.n	17904 <ble_ll_conn_rx_data_pdu+0x130>
                    if (ble_ll_ctrl_rx_pdu(connsm, rxpdu)) {
                        STATS_INC(ble_ll_conn_stats, rx_malformed_ctrl_pdus);
                    }
                } else {
                    /* Count # of received l2cap frames and byes */
                    STATS_INC(ble_ll_conn_stats, rx_l2cap_pdus);
   17860:	4a3c      	ldr	r2, [pc, #240]	; (17954 <ble_ll_conn_rx_data_pdu+0x180>)
   17862:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   17864:	3301      	adds	r3, #1
   17866:	64d3      	str	r3, [r2, #76]	; 0x4c
                    STATS_INCN(ble_ll_conn_stats, rx_l2cap_bytes, acl_len);
   17868:	6d13      	ldr	r3, [r2, #80]	; 0x50
   1786a:	4443      	add	r3, r8
   1786c:	6513      	str	r3, [r2, #80]	; 0x50
    if (OS_MBUF_IS_PKTHDR(om)) {
   1786e:	796b      	ldrb	r3, [r5, #5]
   17870:	2b07      	cmp	r3, #7
   17872:	d955      	bls.n	17920 <ble_ll_conn_rx_data_pdu+0x14c>
        startoff = om->om_pkthdr_len;
   17874:	b299      	uxth	r1, r3
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   17876:	462a      	mov	r2, r5
   17878:	f852 3b10 	ldr.w	r3, [r2], #16
        ((uint8_t *) &om->om_databuf[0] + startoff));
   1787c:	440a      	add	r2, r1
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   1787e:	1a9b      	subs	r3, r3, r2
   17880:	b29b      	uxth	r3, r3

                    /* NOTE: there should be at least two bytes available */
                    BLE_LL_ASSERT(OS_MBUF_LEADINGSPACE(rxpdu) >= 2);
   17882:	2b01      	cmp	r3, #1
   17884:	d94e      	bls.n	17924 <ble_ll_conn_rx_data_pdu+0x150>
                    os_mbuf_prepend(rxpdu, 2);
   17886:	2102      	movs	r1, #2
   17888:	4628      	mov	r0, r5
   1788a:	f7f5 ff30 	bl	d6ee <os_mbuf_prepend>
                    rxbuf = rxpdu->om_data;
   1788e:	682c      	ldr	r4, [r5, #0]

                    acl_hdr = (llid << 12) | connsm->conn_handle;
   17890:	f9b6 1004 	ldrsh.w	r1, [r6, #4]
   17894:	ea41 310a 	orr.w	r1, r1, sl, lsl #12
                    put_le16(rxbuf, acl_hdr);
   17898:	b289      	uxth	r1, r1
   1789a:	4620      	mov	r0, r4
   1789c:	f017 fa46 	bl	2ed2c <put_le16>
                    put_le16(rxbuf + 2, acl_len);
   178a0:	4649      	mov	r1, r9
   178a2:	1ca0      	adds	r0, r4, #2
   178a4:	f017 fa42 	bl	2ed2c <put_le16>
                    ble_hci_trans_ll_acl_tx(rxpdu);
   178a8:	4628      	mov	r0, r5
   178aa:	f012 fcb3 	bl	2a214 <ble_hci_trans_ll_acl_tx>
   178ae:	e04f      	b.n	17950 <ble_ll_conn_rx_data_pdu+0x17c>
                    !ble_ll_ctrl_enc_allowed_pdu_rx(rxpdu)) {
   178b0:	4628      	mov	r0, r5
   178b2:	f001 fd2f 	bl	19314 <ble_ll_ctrl_enc_allowed_pdu_rx>
            if ((connsm->enc_data.enc_state > CONN_ENC_S_PAUSE_ENC_RSP_WAIT) &&
   178b6:	2800      	cmp	r0, #0
   178b8:	d1b6      	bne.n	17828 <ble_ll_conn_rx_data_pdu+0x54>
                ble_ll_conn_timeout(connsm, BLE_ERR_CONN_TERM_MIC);
   178ba:	213d      	movs	r1, #61	; 0x3d
   178bc:	4630      	mov	r0, r6
   178be:	f7ff ff33 	bl	17728 <ble_ll_conn_timeout>
                goto conn_rx_data_pdu_end;
   178c2:	e042      	b.n	1794a <ble_ll_conn_rx_data_pdu+0x176>
            if ((connsm->enc_data.enc_state == CONN_ENC_S_ENCRYPTED) &&
   178c4:	78b3      	ldrb	r3, [r6, #2]
   178c6:	f013 0f08 	tst.w	r3, #8
   178ca:	d0b1      	beq.n	17830 <ble_ll_conn_rx_data_pdu+0x5c>
                CONN_F_LE_PING_SUPP(connsm) && (acl_len != 0)) {
   178cc:	f1b9 0f00 	cmp.w	r9, #0
   178d0:	d0ae      	beq.n	17830 <ble_ll_conn_rx_data_pdu+0x5c>
                ble_ll_conn_auth_pyld_timer_start(connsm);
   178d2:	4630      	mov	r0, r6
   178d4:	f7ff faaa 	bl	16e2c <ble_ll_conn_auth_pyld_timer_start>
   178d8:	e7aa      	b.n	17830 <ble_ll_conn_rx_data_pdu+0x5c>
                if (hdr_byte & BLE_LL_DATA_HDR_NESN_MASK) {
   178da:	f017 0f04 	tst.w	r7, #4
   178de:	d0ad      	beq.n	1783c <ble_ll_conn_rx_data_pdu+0x68>
                    connsm->csmflags.cfbit.allow_slave_latency = 1;
   178e0:	7833      	ldrb	r3, [r6, #0]
   178e2:	f043 0310 	orr.w	r3, r3, #16
   178e6:	7033      	strb	r3, [r6, #0]
   178e8:	e7a8      	b.n	1783c <ble_ll_conn_rx_data_pdu+0x68>
                if ((llid == BLE_LL_LLID_DATA_FRAG) && (acl_len == 0)) {
   178ea:	f1b9 0f00 	cmp.w	r9, #0
   178ee:	d02c      	beq.n	1794a <ble_ll_conn_rx_data_pdu+0x176>
   178f0:	e7af      	b.n	17852 <ble_ll_conn_rx_data_pdu+0x7e>
                    STATS_INC(ble_ll_conn_stats, mic_failures);
   178f2:	4a18      	ldr	r2, [pc, #96]	; (17954 <ble_ll_conn_rx_data_pdu+0x180>)
   178f4:	6f13      	ldr	r3, [r2, #112]	; 0x70
   178f6:	3301      	adds	r3, #1
   178f8:	6713      	str	r3, [r2, #112]	; 0x70
                    ble_ll_conn_timeout(connsm, BLE_ERR_CONN_TERM_MIC);
   178fa:	213d      	movs	r1, #61	; 0x3d
   178fc:	4630      	mov	r0, r6
   178fe:	f7ff ff13 	bl	17728 <ble_ll_conn_timeout>
                    goto conn_rx_data_pdu_end;
   17902:	e022      	b.n	1794a <ble_ll_conn_rx_data_pdu+0x176>
                    STATS_INC(ble_ll_conn_stats, rx_ctrl_pdus);
   17904:	4a13      	ldr	r2, [pc, #76]	; (17954 <ble_ll_conn_rx_data_pdu+0x180>)
   17906:	6c93      	ldr	r3, [r2, #72]	; 0x48
   17908:	3301      	adds	r3, #1
   1790a:	6493      	str	r3, [r2, #72]	; 0x48
                    if (ble_ll_ctrl_rx_pdu(connsm, rxpdu)) {
   1790c:	4629      	mov	r1, r5
   1790e:	4630      	mov	r0, r6
   17910:	f002 f83c 	bl	1998c <ble_ll_ctrl_rx_pdu>
   17914:	b1e0      	cbz	r0, 17950 <ble_ll_conn_rx_data_pdu+0x17c>
                        STATS_INC(ble_ll_conn_stats, rx_malformed_ctrl_pdus);
   17916:	4a0f      	ldr	r2, [pc, #60]	; (17954 <ble_ll_conn_rx_data_pdu+0x180>)
   17918:	6d53      	ldr	r3, [r2, #84]	; 0x54
   1791a:	3301      	adds	r3, #1
   1791c:	6553      	str	r3, [r2, #84]	; 0x54
   1791e:	e017      	b.n	17950 <ble_ll_conn_rx_data_pdu+0x17c>
    startoff = 0;
   17920:	2100      	movs	r1, #0
   17922:	e7a8      	b.n	17876 <ble_ll_conn_rx_data_pdu+0xa2>
                    BLE_LL_ASSERT(OS_MBUF_LEADINGSPACE(rxpdu) >= 2);
   17924:	f7f4 fc60 	bl	c1e8 <hal_debugger_connected>
   17928:	b100      	cbz	r0, 1792c <ble_ll_conn_rx_data_pdu+0x158>
   1792a:	be01      	bkpt	0x0001
   1792c:	2300      	movs	r3, #0
   1792e:	461a      	mov	r2, r3
   17930:	4619      	mov	r1, r3
   17932:	4618      	mov	r0, r3
   17934:	f7f5 f90c 	bl	cb50 <__assert_func>
                }

                /* NOTE: we dont free the mbuf since we handed it off! */
                return;
            } else {
                STATS_INC(ble_ll_conn_stats, data_pdu_rx_dup);
   17938:	4a06      	ldr	r2, [pc, #24]	; (17954 <ble_ll_conn_rx_data_pdu+0x180>)
   1793a:	6b53      	ldr	r3, [r2, #52]	; 0x34
   1793c:	3301      	adds	r3, #1
   1793e:	6353      	str	r3, [r2, #52]	; 0x34
   17940:	e003      	b.n	1794a <ble_ll_conn_rx_data_pdu+0x176>
            }
        } else {
            STATS_INC(ble_ll_conn_stats, no_conn_sm);
   17942:	4a04      	ldr	r2, [pc, #16]	; (17954 <ble_ll_conn_rx_data_pdu+0x180>)
   17944:	69d3      	ldr	r3, [r2, #28]
   17946:	3301      	adds	r3, #1
   17948:	61d3      	str	r3, [r2, #28]
        }
    }

    /* Free buffer */
conn_rx_data_pdu_end:
    os_mbuf_free_chain(rxpdu);
   1794a:	4628      	mov	r0, r5
   1794c:	f7f5 fd68 	bl	d420 <os_mbuf_free_chain>
}
   17950:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   17954:	20003a30 	.word	0x20003a30

00017958 <ble_ll_conn_rx_isr_end>:
 *      == 0: Success. Do not disable the PHY.
 *       > 0: Do not disable PHY as that has already been done.
 */
int
ble_ll_conn_rx_isr_end(uint8_t *rxbuf, struct ble_mbuf_hdr *rxhdr)
{
   17958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1795c:	b083      	sub	sp, #12
   1795e:	4607      	mov	r7, r0
   17960:	460e      	mov	r6, r1
    struct os_mbuf *rxpdu;
    struct ble_mbuf_hdr *txhdr;
    int rx_phy_mode;

    /* Retrieve the header and payload length */
    hdr_byte = rxbuf[0];
   17962:	f890 a000 	ldrb.w	sl, [r0]
    rx_pyld_len = rxbuf[1];
   17966:	7843      	ldrb	r3, [r0, #1]
   17968:	9300      	str	r3, [sp, #0]
     * now is that we should not ack the packet if we have no receive
     * buffers available. We want to free up our transmit PDU if it was
     * acked, but we should not ack the received frame if we cant hand it up.
     * NOTE: we hand up empty pdu's to the LL task!
     */
    rxpdu = ble_ll_rxpdu_alloc(rx_pyld_len + BLE_LL_PDU_HDR_LEN);
   1796a:	fa1f f983 	uxth.w	r9, r3
   1796e:	f109 0002 	add.w	r0, r9, #2
   17972:	f7fc feb3 	bl	146dc <ble_ll_rxpdu_alloc>
   17976:	4680      	mov	r8, r0
    /*
     * We should have a current connection state machine. If we dont, we just
     * hand the packet to the higher layer to count it.
     */
    rc = -1;
    connsm = g_ble_ll_conn_cur_sm;
   17978:	4b8a      	ldr	r3, [pc, #552]	; (17ba4 <ble_ll_conn_rx_isr_end+0x24c>)
   1797a:	681c      	ldr	r4, [r3, #0]
    if (!connsm) {
   1797c:	b3a4      	cbz	r4, 179e8 <ble_ll_conn_rx_isr_end+0x90>
    /*
     * Calculate the end time of the received PDU. NOTE: this looks strange
     * but for the 32768 crystal we add the time it takes to send the packet
     * to the 'additional usecs' field to save some calculations.
     */
    begtime = rxhdr->beg_cputime;
   1797e:	f8d6 b008 	ldr.w	fp, [r6, #8]
#if BLE_LL_BT5_PHY_SUPPORTED
    rx_phy_mode = connsm->phy_data.rx_phy_mode;
#else
    rx_phy_mode = BLE_PHY_MODE_1M;
#endif
    add_usecs = rxhdr->rem_usecs +
   17982:	68f5      	ldr	r5, [r6, #12]
            ble_ll_pdu_tx_time_get(rx_pyld_len, rx_phy_mode);
   17984:	2101      	movs	r1, #1
   17986:	4648      	mov	r0, r9
   17988:	f7fd f91c 	bl	14bc4 <ble_ll_pdu_tx_time_get>
    add_usecs = rxhdr->rem_usecs +
   1798c:	4405      	add	r5, r0
    /*
     * Check the packet CRC. A connection event can continue even if the
     * received PDU does not pass the CRC check. If we receive two consecutive
     * CRC errors we end the conection event.
     */
    if (!BLE_MBUF_HDR_CRC_OK(rxhdr)) {
   1798e:	8833      	ldrh	r3, [r6, #0]
   17990:	f013 0f80 	tst.w	r3, #128	; 0x80
   17994:	d138      	bne.n	17a08 <ble_ll_conn_rx_isr_end+0xb0>
        /*
         * Increment # of consecutively received CRC errors. If more than
         * one we will end the connection event.
         */
        ++connsm->cons_rxd_bad_crc;
   17996:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
   1799a:	3301      	adds	r3, #1
   1799c:	b2db      	uxtb	r3, r3
   1799e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if (connsm->cons_rxd_bad_crc >= 2) {
   179a2:	2b01      	cmp	r3, #1
   179a4:	d927      	bls.n	179f6 <ble_ll_conn_rx_isr_end+0x9e>
            reply = 0;
   179a6:	2300      	movs	r3, #0
    /* If reply flag set, send data pdu and continue connection event */
    rc = -1;
    if (rx_pyld_len && CONN_F_ENCRYPTED(connsm)) {
        rx_pyld_len += BLE_LL_DATA_MIC_LEN;
    }
    if (reply && ble_ll_conn_can_send_next_pdu(connsm, begtime, add_usecs)) {
   179a8:	2b00      	cmp	r3, #0
   179aa:	f000 80f1 	beq.w	17b90 <ble_ll_conn_rx_isr_end+0x238>
   179ae:	462a      	mov	r2, r5
   179b0:	4659      	mov	r1, fp
   179b2:	4620      	mov	r0, r4
   179b4:	f7fe fe71 	bl	1669a <ble_ll_conn_can_send_next_pdu>
   179b8:	2800      	cmp	r0, #0
   179ba:	f000 80ec 	beq.w	17b96 <ble_ll_conn_rx_isr_end+0x23e>
        rc = ble_ll_conn_tx_pdu(connsm);
   179be:	4620      	mov	r0, r4
   179c0:	f7fe fb42 	bl	16048 <ble_ll_conn_tx_pdu>
   179c4:	4606      	mov	r6, r0
    }

conn_exit:
    /* Copy the received pdu and hand it up */
    if (rxpdu) {
   179c6:	f1b8 0f00 	cmp.w	r8, #0
   179ca:	d006      	beq.n	179da <ble_ll_conn_rx_isr_end+0x82>
        ble_phy_rxpdu_copy(rxbuf, rxpdu);
   179cc:	4641      	mov	r1, r8
   179ce:	4638      	mov	r0, r7
   179d0:	f005 ffe6 	bl	1d9a0 <ble_phy_rxpdu_copy>
        ble_ll_rx_pdu_in(rxpdu);
   179d4:	4640      	mov	r0, r8
   179d6:	f7fc ffab 	bl	14930 <ble_ll_rx_pdu_in>
    }

    /* Send link layer a connection end event if over */
    if (rc) {
   179da:	2e00      	cmp	r6, #0
   179dc:	f040 80de 	bne.w	17b9c <ble_ll_conn_rx_isr_end+0x244>
        ble_ll_conn_current_sm_over(connsm);
    }

    return rc;
}
   179e0:	4630      	mov	r0, r6
   179e2:	b003      	add	sp, #12
   179e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        STATS_INC(ble_ll_conn_stats, rx_data_pdu_no_conn);
   179e8:	4a6f      	ldr	r2, [pc, #444]	; (17ba8 <ble_ll_conn_rx_isr_end+0x250>)
   179ea:	6a53      	ldr	r3, [r2, #36]	; 0x24
   179ec:	3301      	adds	r3, #1
   179ee:	6253      	str	r3, [r2, #36]	; 0x24
    rc = -1;
   179f0:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
        goto conn_exit;
   179f4:	e7e7      	b.n	179c6 <ble_ll_conn_rx_isr_end+0x6e>
            if (connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) {
   179f6:	79e3      	ldrb	r3, [r4, #7]
   179f8:	2b01      	cmp	r3, #1
   179fa:	d001      	beq.n	17a00 <ble_ll_conn_rx_isr_end+0xa8>
                reply = 1;
   179fc:	2301      	movs	r3, #1
   179fe:	e7d3      	b.n	179a8 <ble_ll_conn_rx_isr_end+0x50>
                reply = CONN_F_LAST_TXD_MD(connsm);
   17a00:	7863      	ldrb	r3, [r4, #1]
   17a02:	f3c3 1380 	ubfx	r3, r3, #6, #1
   17a06:	e7cf      	b.n	179a8 <ble_ll_conn_rx_isr_end+0x50>
        connsm->cons_rxd_bad_crc = 0;
   17a08:	2300      	movs	r3, #0
   17a0a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
                                        os_cputime_usecs_to_ticks(add_usecs);
   17a0e:	4628      	mov	r0, r5
   17a10:	f017 fa52 	bl	2eeb8 <os_cputime_usecs_to_ticks>
        connsm->last_rxd_pdu_cputime = begtime +
   17a14:	4458      	add	r0, fp
   17a16:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
        if ((hdr_byte & BLE_LL_DATA_HDR_LLID_MASK) == 0) {
   17a1a:	f01a 0303 	ands.w	r3, sl, #3
   17a1e:	f000 80b4 	beq.w	17b8a <ble_ll_conn_rx_isr_end+0x232>
        connsm->last_rxd_hdr_byte = hdr_byte;
   17a22:	f884 a036 	strb.w	sl, [r4, #54]	; 0x36
        if ((hdr_byte & BLE_LL_DATA_HDR_LLID_MASK) == BLE_LL_LLID_CTRL) {
   17a26:	2b03      	cmp	r3, #3
   17a28:	d03c      	beq.n	17aa4 <ble_ll_conn_rx_isr_end+0x14c>
    uint8_t opcode = 0;
   17a2a:	f04f 0900 	mov.w	r9, #0
        is_ctrl = 0;
   17a2e:	f8cd 9004 	str.w	r9, [sp, #4]
        hdr_sn = hdr_byte & BLE_LL_DATA_HDR_SN_MASK;
   17a32:	f00a 0208 	and.w	r2, sl, #8
        conn_nesn = connsm->next_exp_seqnum;
   17a36:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
        if (rxpdu && ((hdr_sn && conn_nesn) || (!hdr_sn && !conn_nesn))) {
   17a3a:	f1b8 0f00 	cmp.w	r8, #0
   17a3e:	d014      	beq.n	17a6a <ble_ll_conn_rx_isr_end+0x112>
   17a40:	b102      	cbz	r2, 17a44 <ble_ll_conn_rx_isr_end+0xec>
   17a42:	b90b      	cbnz	r3, 17a48 <ble_ll_conn_rx_isr_end+0xf0>
   17a44:	b98a      	cbnz	r2, 17a6a <ble_ll_conn_rx_isr_end+0x112>
   17a46:	b983      	cbnz	r3, 17a6a <ble_ll_conn_rx_isr_end+0x112>
            connsm->next_exp_seqnum ^= 1;
   17a48:	f083 0301 	eor.w	r3, r3, #1
   17a4c:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
            if (CONN_F_ENCRYPTED(connsm) && !ble_ll_conn_is_empty_pdu(rxbuf)) {
   17a50:	78a3      	ldrb	r3, [r4, #2]
   17a52:	f013 0f02 	tst.w	r3, #2
   17a56:	d008      	beq.n	17a6a <ble_ll_conn_rx_isr_end+0x112>
   17a58:	4638      	mov	r0, r7
   17a5a:	f7fe fa03 	bl	15e64 <ble_ll_conn_is_empty_pdu>
   17a5e:	b920      	cbnz	r0, 17a6a <ble_ll_conn_rx_isr_end+0x112>
                ++connsm->enc_data.rx_pkt_cntr;
   17a60:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   17a64:	3301      	adds	r3, #1
   17a66:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
        ble_ll_trace_u32x2(BLE_LL_TRACE_ID_CONN_RX, connsm->tx_seqnum,
   17a6a:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
   17a6e:	f00a 0204 	and.w	r2, sl, #4
        if (CONN_F_EMPTY_PDU_TXD(connsm) || connsm->cur_tx_pdu) {
   17a72:	7861      	ldrb	r1, [r4, #1]
   17a74:	f011 0f20 	tst.w	r1, #32
   17a78:	d102      	bne.n	17a80 <ble_ll_conn_rx_isr_end+0x128>
   17a7a:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
   17a7e:	b139      	cbz	r1, 17a90 <ble_ll_conn_rx_isr_end+0x138>
            if ((hdr_nesn && conn_sn) || (!hdr_nesn && !conn_sn)) {
   17a80:	b102      	cbz	r2, 17a84 <ble_ll_conn_rx_isr_end+0x12c>
   17a82:	b90b      	cbnz	r3, 17a88 <ble_ll_conn_rx_isr_end+0x130>
   17a84:	b99a      	cbnz	r2, 17aae <ble_ll_conn_rx_isr_end+0x156>
   17a86:	b993      	cbnz	r3, 17aae <ble_ll_conn_rx_isr_end+0x156>
                STATS_INC(ble_ll_conn_stats, data_pdu_txf);
   17a88:	4a47      	ldr	r2, [pc, #284]	; (17ba8 <ble_ll_conn_rx_isr_end+0x250>)
   17a8a:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
   17a8c:	3301      	adds	r3, #1
   17a8e:	63d3      	str	r3, [r2, #60]	; 0x3c
        if (is_ctrl && (opcode == BLE_LL_CTRL_TERMINATE_IND)
   17a90:	9b01      	ldr	r3, [sp, #4]
   17a92:	b113      	cbz	r3, 17a9a <ble_ll_conn_rx_isr_end+0x142>
   17a94:	f1b9 0f02 	cmp.w	r9, #2
   17a98:	d05e      	beq.n	17b58 <ble_ll_conn_rx_isr_end+0x200>
        if (connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) {
   17a9a:	79e3      	ldrb	r3, [r4, #7]
   17a9c:	2b01      	cmp	r3, #1
   17a9e:	d066      	beq.n	17b6e <ble_ll_conn_rx_isr_end+0x216>
            reply = 1;
   17aa0:	2301      	movs	r3, #1
   17aa2:	e781      	b.n	179a8 <ble_ll_conn_rx_isr_end+0x50>
            opcode = rxbuf[2];
   17aa4:	f897 9002 	ldrb.w	r9, [r7, #2]
            is_ctrl = 1;
   17aa8:	2301      	movs	r3, #1
   17aaa:	9301      	str	r3, [sp, #4]
   17aac:	e7c1      	b.n	17a32 <ble_ll_conn_rx_isr_end+0xda>
                connsm->tx_seqnum ^= 1;
   17aae:	f083 0301 	eor.w	r3, r3, #1
   17ab2:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
                STATS_INC(ble_ll_conn_stats, data_pdu_txg);
   17ab6:	4a3c      	ldr	r2, [pc, #240]	; (17ba8 <ble_ll_conn_rx_isr_end+0x250>)
   17ab8:	6b93      	ldr	r3, [r2, #56]	; 0x38
   17aba:	3301      	adds	r3, #1
   17abc:	6393      	str	r3, [r2, #56]	; 0x38
                if (CONN_F_EMPTY_PDU_TXD(connsm)) {
   17abe:	7863      	ldrb	r3, [r4, #1]
   17ac0:	f013 0f20 	tst.w	r3, #32
   17ac4:	d004      	beq.n	17ad0 <ble_ll_conn_rx_isr_end+0x178>
                    CONN_F_EMPTY_PDU_TXD(connsm) = 0;
   17ac6:	7863      	ldrb	r3, [r4, #1]
   17ac8:	f36f 1345 	bfc	r3, #5, #1
   17acc:	7063      	strb	r3, [r4, #1]
                    goto chk_rx_terminate_ind;
   17ace:	e7df      	b.n	17a90 <ble_ll_conn_rx_isr_end+0x138>
                txpdu = connsm->cur_tx_pdu;
   17ad0:	f8d4 60ac 	ldr.w	r6, [r4, #172]	; 0xac
                if (txpdu) {
   17ad4:	2e00      	cmp	r6, #0
   17ad6:	d0db      	beq.n	17a90 <ble_ll_conn_rx_isr_end+0x138>
                    if (connsm->enc_data.tx_encrypted) {
   17ad8:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   17adc:	b123      	cbz	r3, 17ae8 <ble_ll_conn_rx_isr_end+0x190>
                        ++connsm->enc_data.tx_pkt_cntr;
   17ade:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   17ae2:	3301      	adds	r3, #1
   17ae4:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
                    if ((txhdr->txinfo.hdr_byte & BLE_LL_DATA_HDR_LLID_MASK)
   17ae8:	7ef3      	ldrb	r3, [r6, #27]
   17aea:	f003 0303 	and.w	r3, r3, #3
   17aee:	2b03      	cmp	r3, #3
   17af0:	d018      	beq.n	17b24 <ble_ll_conn_rx_isr_end+0x1cc>
                    txhdr->txinfo.offset += txhdr->txinfo.pyld_len;
   17af2:	7eb1      	ldrb	r1, [r6, #26]
   17af4:	7e73      	ldrb	r3, [r6, #25]
   17af6:	440b      	add	r3, r1
   17af8:	b2db      	uxtb	r3, r3
   17afa:	7673      	strb	r3, [r6, #25]
                    if (txhdr->txinfo.offset >= OS_MBUF_PKTLEN(txpdu)) {
   17afc:	b298      	uxth	r0, r3
   17afe:	8a32      	ldrh	r2, [r6, #16]
   17b00:	4290      	cmp	r0, r2
   17b02:	d321      	bcc.n	17b48 <ble_ll_conn_rx_isr_end+0x1f0>
                        if (txhdr->txinfo.pyld_len != 0) {
   17b04:	b139      	cbz	r1, 17b16 <ble_ll_conn_rx_isr_end+0x1be>
                            ++connsm->completed_pkts;
   17b06:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
   17b0a:	3301      	adds	r3, #1
   17b0c:	b29b      	uxth	r3, r3
   17b0e:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
                            if (connsm->completed_pkts > 2) {
   17b12:	2b02      	cmp	r3, #2
   17b14:	d812      	bhi.n	17b3c <ble_ll_conn_rx_isr_end+0x1e4>
                        os_mbuf_free_chain(txpdu);
   17b16:	4630      	mov	r0, r6
   17b18:	f7f5 fc82 	bl	d420 <os_mbuf_free_chain>
                        connsm->cur_tx_pdu = NULL;
   17b1c:	2300      	movs	r3, #0
   17b1e:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
   17b22:	e7b5      	b.n	17a90 <ble_ll_conn_rx_isr_end+0x138>
                        connsm->cur_tx_pdu = NULL;
   17b24:	2300      	movs	r3, #0
   17b26:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
                        rc = ble_ll_ctrl_tx_done(txpdu, connsm);
   17b2a:	4621      	mov	r1, r4
   17b2c:	4630      	mov	r0, r6
   17b2e:	f002 f91a 	bl	19d66 <ble_ll_ctrl_tx_done>
                        if (rc) {
   17b32:	4606      	mov	r6, r0
   17b34:	2800      	cmp	r0, #0
   17b36:	f47f af46 	bne.w	179c6 <ble_ll_conn_rx_isr_end+0x6e>
   17b3a:	e7a9      	b.n	17a90 <ble_ll_conn_rx_isr_end+0x138>
    os_eventq_put(&evq->evq, &ev->ev);
   17b3c:	481b      	ldr	r0, [pc, #108]	; (17bac <ble_ll_conn_rx_isr_end+0x254>)
   17b3e:	4601      	mov	r1, r0
   17b40:	3868      	subs	r0, #104	; 0x68
   17b42:	f7f5 fb34 	bl	d1ae <os_eventq_put>
   17b46:	e7e6      	b.n	17b16 <ble_ll_conn_rx_isr_end+0x1be>
                        rem_bytes = OS_MBUF_PKTLEN(txpdu) - txhdr->txinfo.offset;
   17b48:	b2d2      	uxtb	r2, r2
   17b4a:	1ad3      	subs	r3, r2, r3
                        rem_bytes = ble_ll_conn_adjust_pyld_len(connsm, rem_bytes);
   17b4c:	b2d9      	uxtb	r1, r3
   17b4e:	4620      	mov	r0, r4
   17b50:	f7fe fa31 	bl	15fb6 <ble_ll_conn_adjust_pyld_len>
                        txhdr->txinfo.pyld_len = rem_bytes;
   17b54:	76b0      	strb	r0, [r6, #26]
   17b56:	e79b      	b.n	17a90 <ble_ll_conn_rx_isr_end+0x138>
                    && (rx_pyld_len == (1 + BLE_LL_CTRL_TERMINATE_IND_LEN))) {
   17b58:	9b00      	ldr	r3, [sp, #0]
   17b5a:	2b02      	cmp	r3, #2
   17b5c:	d19d      	bne.n	17a9a <ble_ll_conn_rx_isr_end+0x142>
            connsm->csmflags.cfbit.terminate_ind_rxd = 1;
   17b5e:	7823      	ldrb	r3, [r4, #0]
   17b60:	f043 0304 	orr.w	r3, r3, #4
   17b64:	7023      	strb	r3, [r4, #0]
            connsm->rxd_disconnect_reason = rxbuf[3];
   17b66:	78fb      	ldrb	r3, [r7, #3]
   17b68:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
   17b6c:	e795      	b.n	17a9a <ble_ll_conn_rx_isr_end+0x142>
            reply = CONN_F_LAST_TXD_MD(connsm) || (hdr_byte & BLE_LL_DATA_HDR_MD_MASK);
   17b6e:	7863      	ldrb	r3, [r4, #1]
   17b70:	f013 0f40 	tst.w	r3, #64	; 0x40
   17b74:	d104      	bne.n	17b80 <ble_ll_conn_rx_isr_end+0x228>
   17b76:	f01a 0f10 	tst.w	sl, #16
   17b7a:	d004      	beq.n	17b86 <ble_ll_conn_rx_isr_end+0x22e>
   17b7c:	2301      	movs	r3, #1
   17b7e:	e000      	b.n	17b82 <ble_ll_conn_rx_isr_end+0x22a>
   17b80:	2301      	movs	r3, #1
   17b82:	b2db      	uxtb	r3, r3
   17b84:	e710      	b.n	179a8 <ble_ll_conn_rx_isr_end+0x50>
   17b86:	2300      	movs	r3, #0
   17b88:	e7fb      	b.n	17b82 <ble_ll_conn_rx_isr_end+0x22a>
    rc = -1;
   17b8a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   17b8e:	e71a      	b.n	179c6 <ble_ll_conn_rx_isr_end+0x6e>
    rc = -1;
   17b90:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   17b94:	e717      	b.n	179c6 <ble_ll_conn_rx_isr_end+0x6e>
   17b96:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   17b9a:	e714      	b.n	179c6 <ble_ll_conn_rx_isr_end+0x6e>
        ble_ll_conn_current_sm_over(connsm);
   17b9c:	4620      	mov	r0, r4
   17b9e:	f7fe f9a1 	bl	15ee4 <ble_ll_conn_current_sm_over>
    return rc;
   17ba2:	e71d      	b.n	179e0 <ble_ll_conn_rx_isr_end+0x88>
   17ba4:	20003878 	.word	0x20003878
   17ba8:	20003a30 	.word	0x20003a30
   17bac:	200037a8 	.word	0x200037a8

00017bb0 <ble_ll_conn_enqueue_pkt>:
 * @param om
 */
void
ble_ll_conn_enqueue_pkt(struct ble_ll_conn_sm *connsm, struct os_mbuf *om,
                        uint8_t hdr_byte, uint8_t length)
{
   17bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17bb2:	4605      	mov	r5, r0
   17bb4:	460c      	mov	r4, r1
    struct os_mbuf_pkthdr *pkthdr;
    struct ble_mbuf_hdr *ble_hdr;
    int lifo;

    /* Set mbuf length and packet length if a control PDU */
    if (hdr_byte == BLE_LL_LLID_CTRL) {
   17bb6:	2a03      	cmp	r2, #3
   17bb8:	d00d      	beq.n	17bd6 <ble_ll_conn_enqueue_pkt+0x26>
        OS_MBUF_PKTHDR(om)->omp_len = length;
    }

    /* Set BLE transmit header */
    ble_hdr = BLE_MBUF_HDR_PTR(om);
    ble_hdr->txinfo.flags = 0;
   17bba:	2300      	movs	r3, #0
   17bbc:	7623      	strb	r3, [r4, #24]
    ble_hdr->txinfo.offset = 0;
   17bbe:	7663      	strb	r3, [r4, #25]
    ble_hdr->txinfo.hdr_byte = hdr_byte;
   17bc0:	76e2      	strb	r2, [r4, #27]
     * need to do this now.
     */

    lifo = 0;
#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LE_ENCRYPTION)
    if (connsm->enc_data.enc_state > CONN_ENC_S_ENCRYPTED) {
   17bc2:	f895 3118 	ldrb.w	r3, [r5, #280]	; 0x118
   17bc6:	2b02      	cmp	r3, #2
   17bc8:	d923      	bls.n	17c12 <ble_ll_conn_enqueue_pkt+0x62>

        /*
         * If this is one of the following types we need to insert it at
         * head of queue.
         */
        llid = ble_hdr->txinfo.hdr_byte & BLE_LL_DATA_HDR_LLID_MASK;
   17bca:	f002 0203 	and.w	r2, r2, #3
        if (llid == BLE_LL_LLID_CTRL) {
   17bce:	2a03      	cmp	r2, #3
   17bd0:	d005      	beq.n	17bde <ble_ll_conn_enqueue_pkt+0x2e>
    lifo = 0;
   17bd2:	2600      	movs	r6, #0
   17bd4:	e01e      	b.n	17c14 <ble_ll_conn_enqueue_pkt+0x64>
        om->om_len = length;
   17bd6:	b29b      	uxth	r3, r3
   17bd8:	80cb      	strh	r3, [r1, #6]
        OS_MBUF_PKTHDR(om)->omp_len = length;
   17bda:	820b      	strh	r3, [r1, #16]
   17bdc:	e7ed      	b.n	17bba <ble_ll_conn_enqueue_pkt+0xa>
            switch (om->om_data[0]) {
   17bde:	6822      	ldr	r2, [r4, #0]
   17be0:	7812      	ldrb	r2, [r2, #0]
   17be2:	3a02      	subs	r2, #2
   17be4:	2a0f      	cmp	r2, #15
   17be6:	d809      	bhi.n	17bfc <ble_ll_conn_enqueue_pkt+0x4c>
   17be8:	e8df f002 	tbb	[pc, r2]
   17bec:	220f0f22 	.word	0x220f0f22
   17bf0:	08080822 	.word	0x08080822
   17bf4:	22080a08 	.word	0x22080a08
   17bf8:	22080808 	.word	0x22080808
    lifo = 0;
   17bfc:	2600      	movs	r6, #0
   17bfe:	e009      	b.n	17c14 <ble_ll_conn_enqueue_pkt+0x64>
            case BLE_LL_CTRL_START_ENC_REQ:
            case BLE_LL_CTRL_START_ENC_RSP:
                lifo = 1;
                break;
            case BLE_LL_CTRL_PAUSE_ENC_RSP:
                if (connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) {
   17c00:	79eb      	ldrb	r3, [r5, #7]
   17c02:	2b01      	cmp	r3, #1
   17c04:	d016      	beq.n	17c34 <ble_ll_conn_enqueue_pkt+0x84>
    lifo = 0;
   17c06:	2600      	movs	r6, #0
   17c08:	e004      	b.n	17c14 <ble_ll_conn_enqueue_pkt+0x64>
            case BLE_LL_CTRL_ENC_REQ:
            case BLE_LL_CTRL_ENC_RSP:
                /* If encryption has been paused, we don't want to send any packets from the
                 * TX queue, as they would go unencrypted.
                 */
                if (connsm->enc_data.enc_state == CONN_ENC_S_PAUSED) {
   17c0a:	2b05      	cmp	r3, #5
   17c0c:	d014      	beq.n	17c38 <ble_ll_conn_enqueue_pkt+0x88>
    lifo = 0;
   17c0e:	2600      	movs	r6, #0
   17c10:	e000      	b.n	17c14 <ble_ll_conn_enqueue_pkt+0x64>
   17c12:	2600      	movs	r6, #0
        }
    }
#endif

    /* Add to transmit queue for the connection */
    pkthdr = OS_MBUF_PKTHDR(om);
   17c14:	f104 0710 	add.w	r7, r4, #16
    OS_ENTER_CRITICAL(sr);
   17c18:	f7f6 fc8c 	bl	e534 <os_arch_save_sr>
    if (lifo) {
   17c1c:	b196      	cbz	r6, 17c44 <ble_ll_conn_enqueue_pkt+0x94>
        STAILQ_INSERT_HEAD(&connsm->conn_txq, pkthdr, omp_next);
   17c1e:	f8d5 30b0 	ldr.w	r3, [r5, #176]	; 0xb0
   17c22:	6163      	str	r3, [r4, #20]
   17c24:	b153      	cbz	r3, 17c3c <ble_ll_conn_enqueue_pkt+0x8c>
   17c26:	f8c5 70b0 	str.w	r7, [r5, #176]	; 0xb0
    } else {
        STAILQ_INSERT_TAIL(&connsm->conn_txq, pkthdr, omp_next);
    }
    OS_EXIT_CRITICAL(sr);
   17c2a:	f7f6 fc89 	bl	e540 <os_arch_restore_sr>
}
   17c2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                lifo = 1;
   17c30:	2601      	movs	r6, #1
   17c32:	e7ef      	b.n	17c14 <ble_ll_conn_enqueue_pkt+0x64>
                    lifo = 1;
   17c34:	2601      	movs	r6, #1
   17c36:	e7ed      	b.n	17c14 <ble_ll_conn_enqueue_pkt+0x64>
                    lifo = 1;
   17c38:	2601      	movs	r6, #1
   17c3a:	e7eb      	b.n	17c14 <ble_ll_conn_enqueue_pkt+0x64>
        STAILQ_INSERT_HEAD(&connsm->conn_txq, pkthdr, omp_next);
   17c3c:	3414      	adds	r4, #20
   17c3e:	f8c5 40b4 	str.w	r4, [r5, #180]	; 0xb4
   17c42:	e7f0      	b.n	17c26 <ble_ll_conn_enqueue_pkt+0x76>
        STAILQ_INSERT_TAIL(&connsm->conn_txq, pkthdr, omp_next);
   17c44:	2300      	movs	r3, #0
   17c46:	f844 3f14 	str.w	r3, [r4, #20]!
   17c4a:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   17c4e:	601f      	str	r7, [r3, #0]
   17c50:	f8c5 40b4 	str.w	r4, [r5, #180]	; 0xb4
   17c54:	e7e9      	b.n	17c2a <ble_ll_conn_enqueue_pkt+0x7a>
	...

00017c58 <ble_ll_conn_tx_pkt_in>:
 *
 * @return int
 */
void
ble_ll_conn_tx_pkt_in(struct os_mbuf *om, uint16_t handle, uint16_t length)
{
   17c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17c5a:	4605      	mov	r5, r0
   17c5c:	460c      	mov	r4, r1
   17c5e:	4617      	mov	r7, r2
    uint16_t pb;
    struct ble_ll_conn_sm *connsm;

    /* See if we have an active matching connection handle */
    conn_handle = handle & 0x0FFF;
    connsm = ble_ll_conn_find_active_conn(conn_handle);
   17c60:	f3c1 000b 	ubfx	r0, r1, #0, #12
   17c64:	f7fe fed0 	bl	16a08 <ble_ll_conn_find_active_conn>
    if (connsm) {
   17c68:	b180      	cbz	r0, 17c8c <ble_ll_conn_tx_pkt_in+0x34>
   17c6a:	4606      	mov	r6, r0
        /* Construct LL header in buffer (NOTE: pb already checked) */
        pb = handle & 0x3000;
        if (pb == 0) {
   17c6c:	f414 5f40 	tst.w	r4, #12288	; 0x3000
   17c70:	d00a      	beq.n	17c88 <ble_ll_conn_tx_pkt_in+0x30>
            hdr_byte = BLE_LL_LLID_DATA_START;
        } else {
            hdr_byte = BLE_LL_LLID_DATA_FRAG;
   17c72:	2201      	movs	r2, #1
        }

        /* Add to total l2cap pdus enqueue */
        STATS_INC(ble_ll_conn_stats, l2cap_enqueued);
   17c74:	4909      	ldr	r1, [pc, #36]	; (17c9c <ble_ll_conn_tx_pkt_in+0x44>)
   17c76:	6c4b      	ldr	r3, [r1, #68]	; 0x44
   17c78:	3301      	adds	r3, #1
   17c7a:	644b      	str	r3, [r1, #68]	; 0x44

        /* Clear flags field in BLE header */
        ble_ll_conn_enqueue_pkt(connsm, om, hdr_byte, length);
   17c7c:	b2fb      	uxtb	r3, r7
   17c7e:	4629      	mov	r1, r5
   17c80:	4630      	mov	r0, r6
   17c82:	f7ff ff95 	bl	17bb0 <ble_ll_conn_enqueue_pkt>
    } else {
        /* No connection found! */
        STATS_INC(ble_ll_conn_stats, handle_not_found);
        os_mbuf_free_chain(om);
    }
}
   17c86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            hdr_byte = BLE_LL_LLID_DATA_START;
   17c88:	2202      	movs	r2, #2
   17c8a:	e7f3      	b.n	17c74 <ble_ll_conn_tx_pkt_in+0x1c>
        STATS_INC(ble_ll_conn_stats, handle_not_found);
   17c8c:	4a03      	ldr	r2, [pc, #12]	; (17c9c <ble_ll_conn_tx_pkt_in+0x44>)
   17c8e:	6993      	ldr	r3, [r2, #24]
   17c90:	3301      	adds	r3, #1
   17c92:	6193      	str	r3, [r2, #24]
        os_mbuf_free_chain(om);
   17c94:	4628      	mov	r0, r5
   17c96:	f7f5 fbc3 	bl	d420 <os_mbuf_free_chain>
}
   17c9a:	e7f4      	b.n	17c86 <ble_ll_conn_tx_pkt_in+0x2e>
   17c9c:	20003a30 	.word	0x20003a30

00017ca0 <ble_ll_conn_set_global_chanmap>:
 * @param num_used_chans
 * @param chanmap
 */
void
ble_ll_conn_set_global_chanmap(uint8_t num_used_chans, const uint8_t *chanmap)
{
   17ca0:	b538      	push	{r3, r4, r5, lr}
   17ca2:	4605      	mov	r5, r0
   17ca4:	460c      	mov	r4, r1
    struct ble_ll_conn_sm *connsm;
    struct ble_ll_conn_global_params *conn_params;

    /* Do nothing if same channel map */
    conn_params = &g_ble_ll_conn_params;
    if (!memcmp(conn_params->master_chan_map, chanmap, BLE_LL_CONN_CHMAP_LEN)) {
   17ca6:	2205      	movs	r2, #5
   17ca8:	480c      	ldr	r0, [pc, #48]	; (17cdc <ble_ll_conn_set_global_chanmap+0x3c>)
   17caa:	f7f6 fe55 	bl	e958 <memcmp>
   17cae:	b900      	cbnz	r0, 17cb2 <ble_ll_conn_set_global_chanmap+0x12>
    SLIST_FOREACH(connsm, &g_ble_ll_conn_active_list, act_sle) {
        if (connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) {
            ble_ll_ctrl_proc_start(connsm, BLE_LL_CTRL_PROC_CHAN_MAP_UPD);
        }
    }
}
   17cb0:	bd38      	pop	{r3, r4, r5, pc}
    conn_params->num_used_chans = num_used_chans;
   17cb2:	4b0a      	ldr	r3, [pc, #40]	; (17cdc <ble_ll_conn_set_global_chanmap+0x3c>)
   17cb4:	715d      	strb	r5, [r3, #5]
    memcpy(conn_params->master_chan_map, chanmap, BLE_LL_CONN_CHMAP_LEN);
   17cb6:	6822      	ldr	r2, [r4, #0]
   17cb8:	601a      	str	r2, [r3, #0]
   17cba:	7922      	ldrb	r2, [r4, #4]
   17cbc:	711a      	strb	r2, [r3, #4]
    SLIST_FOREACH(connsm, &g_ble_ll_conn_active_list, act_sle) {
   17cbe:	4b08      	ldr	r3, [pc, #32]	; (17ce0 <ble_ll_conn_set_global_chanmap+0x40>)
   17cc0:	681c      	ldr	r4, [r3, #0]
   17cc2:	e001      	b.n	17cc8 <ble_ll_conn_set_global_chanmap+0x28>
   17cc4:	f8d4 40b8 	ldr.w	r4, [r4, #184]	; 0xb8
   17cc8:	2c00      	cmp	r4, #0
   17cca:	d0f1      	beq.n	17cb0 <ble_ll_conn_set_global_chanmap+0x10>
        if (connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) {
   17ccc:	79e3      	ldrb	r3, [r4, #7]
   17cce:	2b01      	cmp	r3, #1
   17cd0:	d1f8      	bne.n	17cc4 <ble_ll_conn_set_global_chanmap+0x24>
            ble_ll_ctrl_proc_start(connsm, BLE_LL_CTRL_PROC_CHAN_MAP_UPD);
   17cd2:	2101      	movs	r1, #1
   17cd4:	4620      	mov	r0, r4
   17cd6:	f001 fc77 	bl	195c8 <ble_ll_ctrl_proc_start>
   17cda:	e7f3      	b.n	17cc4 <ble_ll_conn_set_global_chanmap+0x24>
   17cdc:	20003860 	.word	0x20003860
   17ce0:	20003ab0 	.word	0x20003ab0

00017ce4 <ble_ll_conn_slave_start>:
 * @return 0: connection not started; 1 connecton started
 */
int
ble_ll_conn_slave_start(uint8_t *rxbuf, uint8_t pat, struct ble_mbuf_hdr *rxhdr,
                        bool force_csa2)
{
   17ce4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   17ce8:	4606      	mov	r6, r0
   17cea:	4689      	mov	r9, r1
   17cec:	4617      	mov	r7, r2
   17cee:	4698      	mov	r8, r3
    uint8_t *inita;
    uint8_t *dptr;
    struct ble_ll_conn_sm *connsm;

    /* Ignore the connection request if we are already connected*/
    inita = rxbuf + BLE_LL_PDU_HDR_LEN;
   17cf0:	1c85      	adds	r5, r0, #2
    SLIST_FOREACH(connsm, &g_ble_ll_conn_active_list, act_sle) {
   17cf2:	4b6f      	ldr	r3, [pc, #444]	; (17eb0 <ble_ll_conn_slave_start+0x1cc>)
   17cf4:	681c      	ldr	r4, [r3, #0]
   17cf6:	e007      	b.n	17d08 <ble_ll_conn_slave_start+0x24>
            if (rxbuf[0] & BLE_ADV_PDU_HDR_TXADD_MASK) {
                if (connsm->peer_addr_type & 1) {
                    return 0;
                }
            } else {
                if ((connsm->peer_addr_type & 1) == 0) {
   17cf8:	f894 2092 	ldrb.w	r2, [r4, #146]	; 0x92
   17cfc:	f012 0f01 	tst.w	r2, #1
   17d00:	f000 8088 	beq.w	17e14 <ble_ll_conn_slave_start+0x130>
    SLIST_FOREACH(connsm, &g_ble_ll_conn_active_list, act_sle) {
   17d04:	f8d4 40b8 	ldr.w	r4, [r4, #184]	; 0xb8
   17d08:	b194      	cbz	r4, 17d30 <ble_ll_conn_slave_start+0x4c>
        if (!memcmp(&connsm->peer_addr, inita, BLE_DEV_ADDR_LEN)) {
   17d0a:	2206      	movs	r2, #6
   17d0c:	4629      	mov	r1, r5
   17d0e:	f104 0093 	add.w	r0, r4, #147	; 0x93
   17d12:	f7f6 fe21 	bl	e958 <memcmp>
   17d16:	4603      	mov	r3, r0
   17d18:	2800      	cmp	r0, #0
   17d1a:	d1f3      	bne.n	17d04 <ble_ll_conn_slave_start+0x20>
            if (rxbuf[0] & BLE_ADV_PDU_HDR_TXADD_MASK) {
   17d1c:	7832      	ldrb	r2, [r6, #0]
   17d1e:	f012 0f40 	tst.w	r2, #64	; 0x40
   17d22:	d0e9      	beq.n	17cf8 <ble_ll_conn_slave_start+0x14>
                if (connsm->peer_addr_type & 1) {
   17d24:	f894 2092 	ldrb.w	r2, [r4, #146]	; 0x92
   17d28:	f012 0f01 	tst.w	r2, #1
   17d2c:	d0ea      	beq.n	17d04 <ble_ll_conn_slave_start+0x20>
   17d2e:	e071      	b.n	17e14 <ble_ll_conn_slave_start+0x130>
            }
        }
    }

    /* Allocate a connection. If none available, dont do anything */
    connsm = ble_ll_conn_sm_get();
   17d30:	f7fe fe7c 	bl	16a2c <ble_ll_conn_sm_get>
    if (connsm == NULL) {
   17d34:	4604      	mov	r4, r0
   17d36:	2800      	cmp	r0, #0
   17d38:	f000 80b7 	beq.w	17eaa <ble_ll_conn_slave_start+0x1c6>

    /* Set the pointer at the start of the connection data */
    dptr = rxbuf + BLE_LL_CONN_REQ_ADVA_OFF + BLE_DEV_ADDR_LEN;

    /* Set connection state machine information */
    connsm->access_addr = get_le32(dptr);
   17d3c:	f106 000e 	add.w	r0, r6, #14
   17d40:	f017 f81a 	bl	2ed78 <get_le32>
   17d44:	6560      	str	r0, [r4, #84]	; 0x54
    crcinit = dptr[6];
   17d46:	7d32      	ldrb	r2, [r6, #20]
    crcinit = (crcinit << 8) | dptr[5];
   17d48:	7cf3      	ldrb	r3, [r6, #19]
   17d4a:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
    crcinit = (crcinit << 8) | dptr[4];
   17d4e:	7cb3      	ldrb	r3, [r6, #18]
   17d50:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    connsm->crcinit = crcinit;
   17d54:	65a3      	str	r3, [r4, #88]	; 0x58
    connsm->tx_win_size = dptr[7];
   17d56:	7d73      	ldrb	r3, [r6, #21]
   17d58:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    connsm->tx_win_off = get_le16(dptr + 8);
   17d5c:	f106 0016 	add.w	r0, r6, #22
   17d60:	f017 f805 	bl	2ed6e <get_le16>
   17d64:	f8a4 0072 	strh.w	r0, [r4, #114]	; 0x72
    connsm->conn_itvl = get_le16(dptr + 10);
   17d68:	f106 0018 	add.w	r0, r6, #24
   17d6c:	f016 ffff 	bl	2ed6e <get_le16>
   17d70:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
    connsm->slave_latency = get_le16(dptr + 12);
   17d74:	f106 001a 	add.w	r0, r6, #26
   17d78:	f016 fff9 	bl	2ed6e <get_le16>
   17d7c:	f8a4 006a 	strh.w	r0, [r4, #106]	; 0x6a
    connsm->supervision_tmo = get_le16(dptr + 14);
   17d80:	f106 001c 	add.w	r0, r6, #28
   17d84:	f016 fff3 	bl	2ed6e <get_le16>
   17d88:	f8a4 006c 	strh.w	r0, [r4, #108]	; 0x6c
    memcpy(&connsm->chanmap, dptr + 16, BLE_LL_CONN_CHMAP_LEN);
   17d8c:	f104 0220 	add.w	r2, r4, #32
   17d90:	4633      	mov	r3, r6
   17d92:	f853 1f1e 	ldr.w	r1, [r3, #30]!
   17d96:	6221      	str	r1, [r4, #32]
   17d98:	791b      	ldrb	r3, [r3, #4]
   17d9a:	7113      	strb	r3, [r2, #4]
    connsm->hop_inc = dptr[21] & 0x1F;
   17d9c:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
   17da0:	f003 031f 	and.w	r3, r3, #31
   17da4:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
    connsm->master_sca = dptr[21] >> 5;
   17da8:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
   17dac:	095b      	lsrs	r3, r3, #5
   17dae:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

    /* Error check parameters */
    if ((connsm->tx_win_off > connsm->conn_itvl) ||
   17db2:	f8b4 1072 	ldrh.w	r1, [r4, #114]	; 0x72
   17db6:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
   17dba:	4299      	cmp	r1, r3
   17dbc:	d81e      	bhi.n	17dfc <ble_ll_conn_slave_start+0x118>
   17dbe:	2b05      	cmp	r3, #5
   17dc0:	d91c      	bls.n	17dfc <ble_ll_conn_slave_start+0x118>
        (connsm->conn_itvl < BLE_HCI_CONN_ITVL_MIN) ||
   17dc2:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   17dc6:	d819      	bhi.n	17dfc <ble_ll_conn_slave_start+0x118>
        (connsm->conn_itvl > BLE_HCI_CONN_ITVL_MAX) ||
        (connsm->tx_win_size < BLE_LL_CONN_TX_WIN_MIN) ||
   17dc8:	f894 103a 	ldrb.w	r1, [r4, #58]	; 0x3a
        (connsm->conn_itvl > BLE_HCI_CONN_ITVL_MAX) ||
   17dcc:	b1b1      	cbz	r1, 17dfc <ble_ll_conn_slave_start+0x118>
        (connsm->slave_latency > BLE_LL_CONN_SLAVE_LATENCY_MAX)) {
   17dce:	f8b4 e06a 	ldrh.w	lr, [r4, #106]	; 0x6a
        (connsm->tx_win_size < BLE_LL_CONN_TX_WIN_MIN) ||
   17dd2:	f5be 7ffa 	cmp.w	lr, #500	; 0x1f4
   17dd6:	d211      	bcs.n	17dfc <ble_ll_conn_slave_start+0x118>
        goto err_slave_start;
    }

    /* Slave latency cannot cause a supervision timeout */
    temp = (connsm->slave_latency + 1) * (connsm->conn_itvl * 2) *
   17dd8:	f640 1cc4 	movw	ip, #2500	; 0x9c4
   17ddc:	fb0c fc03 	mul.w	ip, ip, r3
   17de0:	fb0e cc0c 	mla	ip, lr, ip, ip
            BLE_LL_CONN_ITVL_USECS;
    if ((connsm->supervision_tmo * 10000) <= temp ) {
   17de4:	f242 7e10 	movw	lr, #10000	; 0x2710
   17de8:	fb0e f000 	mul.w	r0, lr, r0
   17dec:	4560      	cmp	r0, ip
   17dee:	d905      	bls.n	17dfc <ble_ll_conn_slave_start+0x118>

    /*
     * The transmit window must be less than or equal to the lesser of 10
     * msecs or the connection interval minus 1.25 msecs.
     */
    temp = connsm->conn_itvl - 1;
   17df0:	3b01      	subs	r3, #1
    if (temp > 8) {
   17df2:	2b08      	cmp	r3, #8
   17df4:	d900      	bls.n	17df8 <ble_ll_conn_slave_start+0x114>
        temp = 8;
   17df6:	2308      	movs	r3, #8
    }
    if (connsm->tx_win_size > temp) {
   17df8:	4299      	cmp	r1, r3
   17dfa:	d90e      	bls.n	17e1a <ble_ll_conn_slave_start+0x136>
        STAILQ_INSERT_TAIL(&g_ble_ll_conn_free_list, connsm, free_stqe);
    }
    return rc;

err_slave_start:
    STAILQ_INSERT_TAIL(&g_ble_ll_conn_free_list, connsm, free_stqe);
   17dfc:	2300      	movs	r3, #0
   17dfe:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
   17e02:	4a2c      	ldr	r2, [pc, #176]	; (17eb4 <ble_ll_conn_slave_start+0x1d0>)
   17e04:	6851      	ldr	r1, [r2, #4]
   17e06:	600c      	str	r4, [r1, #0]
   17e08:	34b8      	adds	r4, #184	; 0xb8
   17e0a:	6054      	str	r4, [r2, #4]
    STATS_INC(ble_ll_conn_stats, slave_rxd_bad_conn_req_params);
   17e0c:	492a      	ldr	r1, [pc, #168]	; (17eb8 <ble_ll_conn_slave_start+0x1d4>)
   17e0e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
   17e10:	3201      	adds	r2, #1
   17e12:	62ca      	str	r2, [r1, #44]	; 0x2c
    return 0;
}
   17e14:	4618      	mov	r0, r3
   17e16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    memcpy(&connsm->peer_addr, inita, BLE_DEV_ADDR_LEN);
   17e1a:	682b      	ldr	r3, [r5, #0]
   17e1c:	f8c4 3093 	str.w	r3, [r4, #147]	; 0x93
   17e20:	88ab      	ldrh	r3, [r5, #4]
   17e22:	f8a4 3097 	strh.w	r3, [r4, #151]	; 0x97
    connsm->peer_addr_type = pat;
   17e26:	f884 9092 	strb.w	r9, [r4, #146]	; 0x92
    connsm->num_used_chans = ble_ll_utils_calc_num_used_chans(connsm->chanmap);
   17e2a:	4610      	mov	r0, r2
   17e2c:	f005 f9bb 	bl	1d1a6 <ble_ll_utils_calc_num_used_chans>
   17e30:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
    if (connsm->num_used_chans < 2) {
   17e34:	2801      	cmp	r0, #1
   17e36:	d9e1      	bls.n	17dfc <ble_ll_conn_slave_start+0x118>
    connsm->conn_role = BLE_LL_CONN_ROLE_SLAVE;
   17e38:	2302      	movs	r3, #2
   17e3a:	71e3      	strb	r3, [r4, #7]
    ble_ll_conn_sm_new(connsm);
   17e3c:	4620      	mov	r0, r4
   17e3e:	f7ff f849 	bl	16ed4 <ble_ll_conn_sm_new>
                        force_csa2 || (rxbuf[0] & BLE_ADV_PDU_HDR_CHSEL_MASK));
   17e42:	f1b8 0f00 	cmp.w	r8, #0
   17e46:	d105      	bne.n	17e54 <ble_ll_conn_slave_start+0x170>
   17e48:	7833      	ldrb	r3, [r6, #0]
   17e4a:	f013 0f20 	tst.w	r3, #32
   17e4e:	d020      	beq.n	17e92 <ble_ll_conn_slave_start+0x1ae>
   17e50:	2101      	movs	r1, #1
   17e52:	e000      	b.n	17e56 <ble_ll_conn_slave_start+0x172>
   17e54:	2101      	movs	r1, #1
    ble_ll_conn_set_csa(connsm,
   17e56:	4620      	mov	r0, r4
   17e58:	f7fe ffcc 	bl	16df4 <ble_ll_conn_set_csa>
    connsm->conn_sch.sched_cb = ble_ll_conn_event_start_cb;
   17e5c:	4b17      	ldr	r3, [pc, #92]	; (17ebc <ble_ll_conn_slave_start+0x1d8>)
   17e5e:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
    rc = ble_ll_conn_created(connsm, rxhdr);
   17e62:	4639      	mov	r1, r7
   17e64:	4620      	mov	r0, r4
   17e66:	f7fe ff39 	bl	16cdc <ble_ll_conn_created>
    if (!rc) {
   17e6a:	4603      	mov	r3, r0
   17e6c:	2800      	cmp	r0, #0
   17e6e:	d1d1      	bne.n	17e14 <ble_ll_conn_slave_start+0x130>
        SLIST_REMOVE(&g_ble_ll_conn_active_list, connsm, ble_ll_conn_sm, act_sle);
   17e70:	4a0f      	ldr	r2, [pc, #60]	; (17eb0 <ble_ll_conn_slave_start+0x1cc>)
   17e72:	6812      	ldr	r2, [r2, #0]
   17e74:	42a2      	cmp	r2, r4
   17e76:	d10f      	bne.n	17e98 <ble_ll_conn_slave_start+0x1b4>
   17e78:	f8d2 10b8 	ldr.w	r1, [r2, #184]	; 0xb8
   17e7c:	4a0c      	ldr	r2, [pc, #48]	; (17eb0 <ble_ll_conn_slave_start+0x1cc>)
   17e7e:	6011      	str	r1, [r2, #0]
        STAILQ_INSERT_TAIL(&g_ble_ll_conn_free_list, connsm, free_stqe);
   17e80:	2200      	movs	r2, #0
   17e82:	f8c4 20b8 	str.w	r2, [r4, #184]	; 0xb8
   17e86:	4a0b      	ldr	r2, [pc, #44]	; (17eb4 <ble_ll_conn_slave_start+0x1d0>)
   17e88:	6851      	ldr	r1, [r2, #4]
   17e8a:	600c      	str	r4, [r1, #0]
   17e8c:	34b8      	adds	r4, #184	; 0xb8
   17e8e:	6054      	str	r4, [r2, #4]
   17e90:	e7c0      	b.n	17e14 <ble_ll_conn_slave_start+0x130>
                        force_csa2 || (rxbuf[0] & BLE_ADV_PDU_HDR_CHSEL_MASK));
   17e92:	2100      	movs	r1, #0
   17e94:	e7df      	b.n	17e56 <ble_ll_conn_slave_start+0x172>
        SLIST_REMOVE(&g_ble_ll_conn_active_list, connsm, ble_ll_conn_sm, act_sle);
   17e96:	460a      	mov	r2, r1
   17e98:	f8d2 10b8 	ldr.w	r1, [r2, #184]	; 0xb8
   17e9c:	42a1      	cmp	r1, r4
   17e9e:	d1fa      	bne.n	17e96 <ble_ll_conn_slave_start+0x1b2>
   17ea0:	f8d1 10b8 	ldr.w	r1, [r1, #184]	; 0xb8
   17ea4:	f8c2 10b8 	str.w	r1, [r2, #184]	; 0xb8
   17ea8:	e7ea      	b.n	17e80 <ble_ll_conn_slave_start+0x19c>
        return 0;
   17eaa:	2300      	movs	r3, #0
   17eac:	e7b2      	b.n	17e14 <ble_ll_conn_slave_start+0x130>
   17eae:	bf00      	nop
   17eb0:	20003ab0 	.word	0x20003ab0
   17eb4:	20003880 	.word	0x20003880
   17eb8:	20003a30 	.word	0x20003a30
   17ebc:	000164b1 	.word	0x000164b1

00017ec0 <ble_ll_conn_module_reset>:
 *
 * Context: Link Layer task
 */
void
ble_ll_conn_module_reset(void)
{
   17ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint16_t maxbytes;
    struct ble_ll_conn_sm *connsm;
    struct ble_ll_conn_global_params *conn_params;

    /* Kill the current one first (if one is running) */
    if (g_ble_ll_conn_cur_sm) {
   17ec2:	4b2b      	ldr	r3, [pc, #172]	; (17f70 <ble_ll_conn_module_reset+0xb0>)
   17ec4:	6818      	ldr	r0, [r3, #0]
   17ec6:	b118      	cbz	r0, 17ed0 <ble_ll_conn_module_reset+0x10>
        connsm = g_ble_ll_conn_cur_sm;
        g_ble_ll_conn_cur_sm = NULL;
   17ec8:	2100      	movs	r1, #0
   17eca:	6019      	str	r1, [r3, #0]
        ble_ll_conn_end(connsm, BLE_ERR_SUCCESS);
   17ecc:	f7ff f8be 	bl	1704c <ble_ll_conn_end>
    }

    /* Free the global connection complete event if there is one */
    if (g_ble_ll_conn_comp_ev) {
   17ed0:	4b28      	ldr	r3, [pc, #160]	; (17f74 <ble_ll_conn_module_reset+0xb4>)
   17ed2:	6818      	ldr	r0, [r3, #0]
   17ed4:	b120      	cbz	r0, 17ee0 <ble_ll_conn_module_reset+0x20>
        ble_hci_trans_buf_free(g_ble_ll_conn_comp_ev);
   17ed6:	f012 f9e1 	bl	2a29c <ble_hci_trans_buf_free>
        g_ble_ll_conn_comp_ev = NULL;
   17eda:	4b26      	ldr	r3, [pc, #152]	; (17f74 <ble_ll_conn_module_reset+0xb4>)
   17edc:	2200      	movs	r2, #0
   17ede:	601a      	str	r2, [r3, #0]
    }

    /* Reset connection we are attempting to create */
    g_ble_ll_conn_create_sm = NULL;
   17ee0:	4b25      	ldr	r3, [pc, #148]	; (17f78 <ble_ll_conn_module_reset+0xb8>)
   17ee2:	2200      	movs	r2, #0
   17ee4:	601a      	str	r2, [r3, #0]

    /* Now go through and end all the connections */
    while (1) {
        connsm = SLIST_FIRST(&g_ble_ll_conn_active_list);
   17ee6:	4b25      	ldr	r3, [pc, #148]	; (17f7c <ble_ll_conn_module_reset+0xbc>)
   17ee8:	6818      	ldr	r0, [r3, #0]
        if (!connsm) {
   17eea:	b118      	cbz	r0, 17ef4 <ble_ll_conn_module_reset+0x34>
            break;
        }
        ble_ll_conn_end(connsm, BLE_ERR_SUCCESS);
   17eec:	2100      	movs	r1, #0
   17eee:	f7ff f8ad 	bl	1704c <ble_ll_conn_end>
        connsm = SLIST_FIRST(&g_ble_ll_conn_active_list);
   17ef2:	e7f8      	b.n	17ee6 <ble_ll_conn_module_reset+0x26>
    }

    /* Get the maximum supported PHY PDU size from the PHY */
    max_phy_pyld = ble_phy_max_data_pdu_pyld();
   17ef4:	f006 fa82 	bl	1e3fc <ble_phy_max_data_pdu_pyld>
   17ef8:	4605      	mov	r5, r0

    /* Configure the global LL parameters */
    conn_params = &g_ble_ll_conn_params;

    maxbytes = min(MYNEWT_VAL(BLE_LL_SUPP_MAX_RX_BYTES), max_phy_pyld);
   17efa:	4606      	mov	r6, r0
   17efc:	28fb      	cmp	r0, #251	; 0xfb
   17efe:	bf28      	it	cs
   17f00:	26fb      	movcs	r6, #251	; 0xfb
   17f02:	b2f6      	uxtb	r6, r6
    conn_params->supp_max_rx_octets = maxbytes;
   17f04:	4c1e      	ldr	r4, [pc, #120]	; (17f80 <ble_ll_conn_module_reset+0xc0>)
   17f06:	71e6      	strb	r6, [r4, #7]
#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LE_CODED_PHY)
    conn_params->supp_max_rx_time = MAX_TIME_CODED(maxbytes);
#else
    conn_params->supp_max_rx_time = MAX_TIME_UNCODED(maxbytes);
   17f08:	1d37      	adds	r7, r6, #4
   17f0a:	2101      	movs	r1, #1
   17f0c:	4638      	mov	r0, r7
   17f0e:	f7fc fe59 	bl	14bc4 <ble_ll_pdu_tx_time_get>
   17f12:	82a0      	strh	r0, [r4, #20]
#endif

    maxbytes = min(MYNEWT_VAL(BLE_LL_SUPP_MAX_TX_BYTES), max_phy_pyld);
    conn_params->supp_max_tx_octets = maxbytes;
   17f14:	71a6      	strb	r6, [r4, #6]
#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LE_CODED_PHY)
    conn_params->supp_max_tx_time = MAX_TIME_CODED(maxbytes);
#else
    conn_params->supp_max_tx_time = MAX_TIME_UNCODED(maxbytes);
   17f16:	2101      	movs	r1, #1
   17f18:	4638      	mov	r0, r7
   17f1a:	f7fc fe53 	bl	14bc4 <ble_ll_pdu_tx_time_get>
   17f1e:	8260      	strh	r0, [r4, #18]
#endif

    maxbytes = min(MYNEWT_VAL(BLE_LL_CONN_INIT_MAX_TX_BYTES), max_phy_pyld);
   17f20:	2d1b      	cmp	r5, #27
   17f22:	bf28      	it	cs
   17f24:	251b      	movcs	r5, #27
   17f26:	b2ed      	uxtb	r5, r5
    conn_params->conn_init_max_tx_octets = maxbytes;
   17f28:	7225      	strb	r5, [r4, #8]
    conn_params->conn_init_max_tx_time = MAX_TIME_UNCODED(maxbytes);
   17f2a:	3504      	adds	r5, #4
   17f2c:	2101      	movs	r1, #1
   17f2e:	4628      	mov	r0, r5
   17f30:	f7fc fe48 	bl	14bc4 <ble_ll_pdu_tx_time_get>
   17f34:	81a0      	strh	r0, [r4, #12]
    conn_params->conn_init_max_tx_time_uncoded = MAX_TIME_UNCODED(maxbytes);
   17f36:	2101      	movs	r1, #1
   17f38:	4628      	mov	r0, r5
   17f3a:	f7fc fe43 	bl	14bc4 <ble_ll_pdu_tx_time_get>
   17f3e:	81e0      	strh	r0, [r4, #14]
    conn_params->conn_init_max_tx_time_coded = MAX_TIME_CODED(maxbytes);
   17f40:	2103      	movs	r1, #3
   17f42:	4628      	mov	r0, r5
   17f44:	f7fc fe3e 	bl	14bc4 <ble_ll_pdu_tx_time_get>
   17f48:	8220      	strh	r0, [r4, #16]

    conn_params->sugg_tx_octets = BLE_LL_CONN_SUPP_BYTES_MIN;
   17f4a:	231b      	movs	r3, #27
   17f4c:	7263      	strb	r3, [r4, #9]
    conn_params->sugg_tx_time = BLE_LL_CONN_SUPP_TIME_MIN;
   17f4e:	f44f 73a4 	mov.w	r3, #328	; 0x148
   17f52:	8163      	strh	r3, [r4, #10]

    /* Mask in all channels by default */
    conn_params->num_used_chans = BLE_PHY_NUM_DATA_CHANS;
   17f54:	2325      	movs	r3, #37	; 0x25
   17f56:	7163      	strb	r3, [r4, #5]
    memset(conn_params->master_chan_map, 0xff, BLE_LL_CONN_CHMAP_LEN - 1);
   17f58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17f5c:	6023      	str	r3, [r4, #0]
    conn_params->master_chan_map[4] = 0x1f;
   17f5e:	231f      	movs	r3, #31
   17f60:	7123      	strb	r3, [r4, #4]

    /* Reset statistics */
    STATS_RESET(ble_ll_conn_stats);
   17f62:	2274      	movs	r2, #116	; 0x74
   17f64:	2100      	movs	r1, #0
   17f66:	4807      	ldr	r0, [pc, #28]	; (17f84 <ble_ll_conn_module_reset+0xc4>)
   17f68:	f7f6 fd42 	bl	e9f0 <memset>
    /* reset default sync transfer params */
    g_ble_ll_conn_sync_transfer_params.max_skip = 0;
    g_ble_ll_conn_sync_transfer_params.mode = 0;
    g_ble_ll_conn_sync_transfer_params.sync_timeout_us = 0;
#endif
}
   17f6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17f6e:	bf00      	nop
   17f70:	20003878 	.word	0x20003878
   17f74:	2000387c 	.word	0x2000387c
   17f78:	20003888 	.word	0x20003888
   17f7c:	20003ab0 	.word	0x20003ab0
   17f80:	20003860 	.word	0x20003860
   17f84:	20003a3c 	.word	0x20003a3c

00017f88 <ble_ll_conn_module_init>:

/* Initialize the connection module */
void
ble_ll_conn_module_init(void)
{
   17f88:	b530      	push	{r4, r5, lr}
   17f8a:	b083      	sub	sp, #12
    int rc;
    uint16_t i;
    struct ble_ll_conn_sm *connsm;

    /* Initialize list of active conections */
    SLIST_INIT(&g_ble_ll_conn_active_list);
   17f8c:	2400      	movs	r4, #0
   17f8e:	4b1b      	ldr	r3, [pc, #108]	; (17ffc <ble_ll_conn_module_init+0x74>)
   17f90:	601c      	str	r4, [r3, #0]
    STAILQ_INIT(&g_ble_ll_conn_free_list);
   17f92:	4b1b      	ldr	r3, [pc, #108]	; (18000 <ble_ll_conn_module_init+0x78>)
   17f94:	601c      	str	r4, [r3, #0]
   17f96:	605b      	str	r3, [r3, #4]
    /*
     * Take all the connections off the free memory pool and add them to
     * the free connection list, assigning handles in linear order. Note:
     * the specification allows a handle of zero; we just avoid using it.
     */
    connsm = &g_ble_ll_conn_sm[0];
   17f98:	4d1a      	ldr	r5, [pc, #104]	; (18004 <ble_ll_conn_module_init+0x7c>)
    for (i = 0; i < MYNEWT_VAL(BLE_MAX_CONNECTIONS); ++i) {
   17f9a:	b16c      	cbz	r4, 17fb8 <ble_ll_conn_module_init+0x30>
        connsm->conn_sch.cb_arg = connsm;
        ++connsm;
    }

    /* Register connection statistics */
    rc = stats_init_and_reg(STATS_HDR(ble_ll_conn_stats),
   17f9c:	4b1a      	ldr	r3, [pc, #104]	; (18008 <ble_ll_conn_module_init+0x80>)
   17f9e:	9301      	str	r3, [sp, #4]
   17fa0:	2300      	movs	r3, #0
   17fa2:	9300      	str	r3, [sp, #0]
   17fa4:	221d      	movs	r2, #29
   17fa6:	2104      	movs	r1, #4
   17fa8:	4818      	ldr	r0, [pc, #96]	; (1800c <ble_ll_conn_module_init+0x84>)
   17faa:	f7fa f917 	bl	121dc <stats_init_and_reg>
                            STATS_SIZE_INIT_PARMS(ble_ll_conn_stats, STATS_SIZE_32),
                            STATS_NAME_INIT_PARMS(ble_ll_conn_stats),
                            "ble_ll_conn");
    BLE_LL_ASSERT(rc == 0);
   17fae:	b9d0      	cbnz	r0, 17fe6 <ble_ll_conn_module_init+0x5e>

    /* Call reset to finish reset of initialization */
    ble_ll_conn_module_reset();
   17fb0:	f7ff ff86 	bl	17ec0 <ble_ll_conn_module_reset>
}
   17fb4:	b003      	add	sp, #12
   17fb6:	bd30      	pop	{r4, r5, pc}
        memset(connsm, 0, sizeof(struct ble_ll_conn_sm));
   17fb8:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
   17fbc:	2100      	movs	r1, #0
   17fbe:	4628      	mov	r0, r5
   17fc0:	f7f6 fd16 	bl	e9f0 <memset>
        connsm->conn_handle = i + 1;
   17fc4:	3401      	adds	r4, #1
   17fc6:	b2a4      	uxth	r4, r4
   17fc8:	80ac      	strh	r4, [r5, #4]
        STAILQ_INSERT_TAIL(&g_ble_ll_conn_free_list, connsm, free_stqe);
   17fca:	4b0d      	ldr	r3, [pc, #52]	; (18000 <ble_ll_conn_module_init+0x78>)
   17fcc:	685a      	ldr	r2, [r3, #4]
   17fce:	6015      	str	r5, [r2, #0]
   17fd0:	f105 02b8 	add.w	r2, r5, #184	; 0xb8
   17fd4:	605a      	str	r2, [r3, #4]
        connsm->conn_sch.sched_type = BLE_LL_SCHED_TYPE_CONN;
   17fd6:	2303      	movs	r3, #3
   17fd8:	f885 30dc 	strb.w	r3, [r5, #220]	; 0xdc
        connsm->conn_sch.cb_arg = connsm;
   17fdc:	f8c5 50e8 	str.w	r5, [r5, #232]	; 0xe8
        ++connsm;
   17fe0:	f505 75d0 	add.w	r5, r5, #416	; 0x1a0
   17fe4:	e7d9      	b.n	17f9a <ble_ll_conn_module_init+0x12>
    BLE_LL_ASSERT(rc == 0);
   17fe6:	f7f4 f8ff 	bl	c1e8 <hal_debugger_connected>
   17fea:	b100      	cbz	r0, 17fee <ble_ll_conn_module_init+0x66>
   17fec:	be01      	bkpt	0x0001
   17fee:	2300      	movs	r3, #0
   17ff0:	461a      	mov	r2, r3
   17ff2:	4619      	mov	r1, r3
   17ff4:	4618      	mov	r0, r3
   17ff6:	f7f4 fdab 	bl	cb50 <__assert_func>
   17ffa:	bf00      	nop
   17ffc:	20003ab0 	.word	0x20003ab0
   18000:	20003880 	.word	0x20003880
   18004:	20003890 	.word	0x20003890
   18008:	00031d6c 	.word	0x00031d6c
   1800c:	20003a30 	.word	0x20003a30

00018010 <ble_ll_conn_hci_chk_scan_params>:

static int
ble_ll_conn_hci_chk_scan_params(uint16_t itvl, uint16_t window)
{
    /* Check interval and window */
    if ((itvl < BLE_HCI_SCAN_ITVL_MIN) ||
   18010:	1f03      	subs	r3, r0, #4
   18012:	b29b      	uxth	r3, r3
   18014:	f643 72fc 	movw	r2, #16380	; 0x3ffc
   18018:	4293      	cmp	r3, r2
   1801a:	d80a      	bhi.n	18032 <ble_ll_conn_hci_chk_scan_params+0x22>
        (itvl > BLE_HCI_SCAN_ITVL_MAX) ||
   1801c:	2903      	cmp	r1, #3
   1801e:	d90a      	bls.n	18036 <ble_ll_conn_hci_chk_scan_params+0x26>
        (window < BLE_HCI_SCAN_WINDOW_MIN) ||
   18020:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
   18024:	d809      	bhi.n	1803a <ble_ll_conn_hci_chk_scan_params+0x2a>
        (window > BLE_HCI_SCAN_WINDOW_MAX) ||
   18026:	4288      	cmp	r0, r1
   18028:	d301      	bcc.n	1802e <ble_ll_conn_hci_chk_scan_params+0x1e>
        (itvl < window)) {
        return BLE_ERR_INV_HCI_CMD_PARMS;
    }

    return 0;
   1802a:	2000      	movs	r0, #0
}
   1802c:	4770      	bx	lr
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1802e:	2012      	movs	r0, #18
   18030:	4770      	bx	lr
   18032:	2012      	movs	r0, #18
   18034:	4770      	bx	lr
   18036:	2012      	movs	r0, #18
   18038:	4770      	bx	lr
   1803a:	2012      	movs	r0, #18
   1803c:	4770      	bx	lr
	...

00018040 <ble_ll_init_alloc_conn_comp_ev>:
{
   18040:	b508      	push	{r3, lr}
    evbuf = g_ble_ll_conn_comp_ev;
   18042:	4b08      	ldr	r3, [pc, #32]	; (18064 <ble_ll_init_alloc_conn_comp_ev+0x24>)
   18044:	681b      	ldr	r3, [r3, #0]
    if (evbuf == NULL) {
   18046:	b10b      	cbz	r3, 1804c <ble_ll_init_alloc_conn_comp_ev+0xc>
    rc = 0;
   18048:	2000      	movs	r0, #0
}
   1804a:	bd08      	pop	{r3, pc}
        evbuf = ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   1804c:	2002      	movs	r0, #2
   1804e:	f012 f8f7 	bl	2a240 <ble_hci_trans_buf_alloc>
        if (!evbuf) {
   18052:	b118      	cbz	r0, 1805c <ble_ll_init_alloc_conn_comp_ev+0x1c>
            g_ble_ll_conn_comp_ev = evbuf;
   18054:	4a03      	ldr	r2, [pc, #12]	; (18064 <ble_ll_init_alloc_conn_comp_ev+0x24>)
   18056:	6010      	str	r0, [r2, #0]
    rc = 0;
   18058:	2000      	movs	r0, #0
   1805a:	e7f6      	b.n	1804a <ble_ll_init_alloc_conn_comp_ev+0xa>
            rc = -1;
   1805c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return rc;
   18060:	e7f3      	b.n	1804a <ble_ll_init_alloc_conn_comp_ev+0xa>
   18062:	bf00      	nop
   18064:	2000387c 	.word	0x2000387c

00018068 <ble_ll_conn_hci_chk_conn_params>:
    if ((itvl_min > itvl_max) ||
   18068:	4288      	cmp	r0, r1
   1806a:	d81c      	bhi.n	180a6 <ble_ll_conn_hci_chk_conn_params+0x3e>
   1806c:	2805      	cmp	r0, #5
   1806e:	d91c      	bls.n	180aa <ble_ll_conn_hci_chk_conn_params+0x42>
        (itvl_min < BLE_HCI_CONN_ITVL_MIN) ||
   18070:	f5b1 6f48 	cmp.w	r1, #3200	; 0xc80
   18074:	d81b      	bhi.n	180ae <ble_ll_conn_hci_chk_conn_params+0x46>
        (itvl_max > BLE_HCI_CONN_ITVL_MAX) ||
   18076:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
   1807a:	d21a      	bcs.n	180b2 <ble_ll_conn_hci_chk_conn_params+0x4a>
        (latency > BLE_HCI_CONN_LATENCY_MAX) ||
   1807c:	2b09      	cmp	r3, #9
   1807e:	d91a      	bls.n	180b6 <ble_ll_conn_hci_chk_conn_params+0x4e>
        (spvn_tmo < BLE_HCI_CONN_SPVN_TIMEOUT_MIN) ||
   18080:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   18084:	d819      	bhi.n	180ba <ble_ll_conn_hci_chk_conn_params+0x52>
    spvn_tmo_usecs *= (BLE_HCI_CONN_SPVN_TMO_UNITS * 1000);
   18086:	f242 7010 	movw	r0, #10000	; 0x2710
   1808a:	fb00 f303 	mul.w	r3, r0, r3
    min_spvn_tmo_usecs = (uint32_t)itvl_max * 2 * BLE_LL_CONN_ITVL_USECS;
   1808e:	f640 10c4 	movw	r0, #2500	; 0x9c4
   18092:	fb00 f101 	mul.w	r1, r0, r1
    min_spvn_tmo_usecs *= (1 + latency);
   18096:	fb02 1101 	mla	r1, r2, r1, r1
    if (spvn_tmo_usecs <= min_spvn_tmo_usecs) {
   1809a:	428b      	cmp	r3, r1
   1809c:	d901      	bls.n	180a2 <ble_ll_conn_hci_chk_conn_params+0x3a>
    return BLE_ERR_SUCCESS;
   1809e:	2000      	movs	r0, #0
}
   180a0:	4770      	bx	lr
        return BLE_ERR_INV_HCI_CMD_PARMS;
   180a2:	2012      	movs	r0, #18
   180a4:	4770      	bx	lr
        return BLE_ERR_INV_HCI_CMD_PARMS;
   180a6:	2012      	movs	r0, #18
   180a8:	4770      	bx	lr
   180aa:	2012      	movs	r0, #18
   180ac:	4770      	bx	lr
   180ae:	2012      	movs	r0, #18
   180b0:	4770      	bx	lr
   180b2:	2012      	movs	r0, #18
   180b4:	4770      	bx	lr
   180b6:	2012      	movs	r0, #18
   180b8:	4770      	bx	lr
   180ba:	2012      	movs	r0, #18
   180bc:	4770      	bx	lr

000180be <ble_ll_conn_process_conn_params>:
#endif

static int
ble_ll_conn_process_conn_params(const struct ble_hci_le_rem_conn_param_rr_cp *cmd,
                                struct ble_ll_conn_sm *connsm)
{
   180be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int rc;
    struct hci_conn_update *hcu;

    /* Retrieve command data */
    hcu = &connsm->conn_param_req;
    hcu->handle = connsm->conn_handle;
   180c0:	888b      	ldrh	r3, [r1, #4]
   180c2:	f8a1 3168 	strh.w	r3, [r1, #360]	; 0x168

    BLE_LL_ASSERT(connsm->conn_handle == le16toh(cmd->conn_handle));
   180c6:	8802      	ldrh	r2, [r0, #0]
   180c8:	4293      	cmp	r3, r2
   180ca:	d11d      	bne.n	18108 <ble_ll_conn_process_conn_params+0x4a>

    hcu->conn_itvl_min = le16toh(cmd->conn_itvl_min);
   180cc:	8844      	ldrh	r4, [r0, #2]
   180ce:	f8a1 416a 	strh.w	r4, [r1, #362]	; 0x16a
    hcu->conn_itvl_max = le16toh(cmd->conn_itvl_max);
   180d2:	8885      	ldrh	r5, [r0, #4]
   180d4:	f8a1 516c 	strh.w	r5, [r1, #364]	; 0x16c
    hcu->conn_latency = le16toh(cmd->conn_latency);
   180d8:	88c2      	ldrh	r2, [r0, #6]
   180da:	f8a1 216e 	strh.w	r2, [r1, #366]	; 0x16e
    hcu->supervision_timeout = le16toh(cmd->supervision_timeout);
   180de:	8903      	ldrh	r3, [r0, #8]
   180e0:	f8a1 3170 	strh.w	r3, [r1, #368]	; 0x170
    hcu->min_ce_len = le16toh(cmd->min_ce);
   180e4:	8947      	ldrh	r7, [r0, #10]
   180e6:	b2be      	uxth	r6, r7
   180e8:	f8a1 7172 	strh.w	r7, [r1, #370]	; 0x172
    hcu->max_ce_len = le16toh(cmd->max_ce);
   180ec:	8980      	ldrh	r0, [r0, #12]
   180ee:	b287      	uxth	r7, r0
   180f0:	f8a1 0174 	strh.w	r0, [r1, #372]	; 0x174

    /* Check that parameter values are in range */
    rc = ble_ll_conn_hci_chk_conn_params(hcu->conn_itvl_min,
   180f4:	4629      	mov	r1, r5
   180f6:	4620      	mov	r0, r4
   180f8:	f7ff ffb6 	bl	18068 <ble_ll_conn_hci_chk_conn_params>
                                         hcu->conn_itvl_max,
                                         hcu->conn_latency,
                                         hcu->supervision_timeout);

    /* Check valid min/max ce length */
    if (rc || (hcu->min_ce_len > hcu->max_ce_len)) {
   180fc:	4603      	mov	r3, r0
   180fe:	b978      	cbnz	r0, 18120 <ble_ll_conn_process_conn_params+0x62>
   18100:	42be      	cmp	r6, r7
   18102:	d80b      	bhi.n	1811c <ble_ll_conn_process_conn_params+0x5e>
        return BLE_ERR_INV_HCI_CMD_PARMS;
    }
    return rc;
}
   18104:	4618      	mov	r0, r3
   18106:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    BLE_LL_ASSERT(connsm->conn_handle == le16toh(cmd->conn_handle));
   18108:	f7f4 f86e 	bl	c1e8 <hal_debugger_connected>
   1810c:	b100      	cbz	r0, 18110 <ble_ll_conn_process_conn_params+0x52>
   1810e:	be01      	bkpt	0x0001
   18110:	2300      	movs	r3, #0
   18112:	461a      	mov	r2, r3
   18114:	4619      	mov	r1, r3
   18116:	4618      	mov	r0, r3
   18118:	f7f4 fd1a 	bl	cb50 <__assert_func>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1811c:	2312      	movs	r3, #18
   1811e:	e7f1      	b.n	18104 <ble_ll_conn_process_conn_params+0x46>
   18120:	2312      	movs	r3, #18
   18122:	e7ef      	b.n	18104 <ble_ll_conn_process_conn_params+0x46>

00018124 <ble_ll_conn_comp_event_send>:
{
   18124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    BLE_LL_ASSERT(evbuf);
   18126:	b382      	cbz	r2, 1818a <ble_ll_conn_comp_event_send+0x66>
   18128:	4605      	mov	r5, r0
   1812a:	460e      	mov	r6, r1
   1812c:	461f      	mov	r7, r3
   1812e:	4614      	mov	r4, r2
    if (ble_ll_hci_is_le_event_enabled(BLE_HCI_LE_SUBEV_ENH_CONN_COMPLETE)) {
   18130:	200a      	movs	r0, #10
   18132:	f002 fa8d 	bl	1a650 <ble_ll_hci_is_le_event_enabled>
   18136:	2800      	cmp	r0, #0
   18138:	d067      	beq.n	1820a <ble_ll_conn_comp_event_send+0xe6>
        hci_ev->opcode = BLE_HCI_EVCODE_LE_META;
   1813a:	233e      	movs	r3, #62	; 0x3e
   1813c:	7023      	strb	r3, [r4, #0]
        hci_ev->length = sizeof(*enh_ev);
   1813e:	221f      	movs	r2, #31
   18140:	7062      	strb	r2, [r4, #1]
        memset(enh_ev, 0, sizeof(*enh_ev));
   18142:	2100      	movs	r1, #0
   18144:	1ca0      	adds	r0, r4, #2
   18146:	f7f6 fc53 	bl	e9f0 <memset>
        enh_ev->subev_code = BLE_HCI_LE_SUBEV_ENH_CONN_COMPLETE;
   1814a:	230a      	movs	r3, #10
   1814c:	70a3      	strb	r3, [r4, #2]
        enh_ev->status = status;
   1814e:	70e6      	strb	r6, [r4, #3]
        if (connsm) {
   18150:	2d00      	cmp	r5, #0
   18152:	d04b      	beq.n	181ec <ble_ll_conn_comp_event_send+0xc8>
            enh_ev->conn_handle = htole16(connsm->conn_handle);
   18154:	88ab      	ldrh	r3, [r5, #4]
   18156:	80a3      	strh	r3, [r4, #4]
            enh_ev->role = connsm->conn_role - 1;
   18158:	79eb      	ldrb	r3, [r5, #7]
   1815a:	3b01      	subs	r3, #1
   1815c:	71a3      	strb	r3, [r4, #6]
            enh_ev->peer_addr_type = connsm->peer_addr_type;
   1815e:	f895 3092 	ldrb.w	r3, [r5, #146]	; 0x92
   18162:	71e3      	strb	r3, [r4, #7]
            memcpy(enh_ev->peer_addr, connsm->peer_addr, BLE_DEV_ADDR_LEN);
   18164:	462b      	mov	r3, r5
   18166:	f853 2f93 	ldr.w	r2, [r3, #147]!
   1816a:	60a2      	str	r2, [r4, #8]
   1816c:	889b      	ldrh	r3, [r3, #4]
   1816e:	81a3      	strh	r3, [r4, #12]
            if (connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) {
   18170:	79eb      	ldrb	r3, [r5, #7]
   18172:	2b01      	cmp	r3, #1
   18174:	d113      	bne.n	1819e <ble_ll_conn_comp_event_send+0x7a>
                if (connsm->inita_identity_used) {
   18176:	f895 3090 	ldrb.w	r3, [r5, #144]	; 0x90
   1817a:	b9cb      	cbnz	r3, 181b0 <ble_ll_conn_comp_event_send+0x8c>
                } else  if (connsm->own_addr_type > BLE_HCI_ADV_OWN_ADDR_RANDOM) {
   1817c:	f895 3091 	ldrb.w	r3, [r5, #145]	; 0x91
   18180:	2b01      	cmp	r3, #1
   18182:	d915      	bls.n	181b0 <ble_ll_conn_comp_event_send+0x8c>
                    rpa = ble_ll_scan_get_local_rpa();
   18184:	f004 fa96 	bl	1c6b4 <ble_ll_scan_get_local_rpa>
   18188:	e00c      	b.n	181a4 <ble_ll_conn_comp_event_send+0x80>
    BLE_LL_ASSERT(evbuf);
   1818a:	f7f4 f82d 	bl	c1e8 <hal_debugger_connected>
   1818e:	b100      	cbz	r0, 18192 <ble_ll_conn_comp_event_send+0x6e>
   18190:	be01      	bkpt	0x0001
   18192:	2300      	movs	r3, #0
   18194:	461a      	mov	r2, r3
   18196:	4619      	mov	r1, r3
   18198:	4618      	mov	r0, r3
   1819a:	f7f4 fcd9 	bl	cb50 <__assert_func>
                rpa = ble_ll_adv_get_local_rpa(advsm);
   1819e:	4638      	mov	r0, r7
   181a0:	f7fd fe06 	bl	15db0 <ble_ll_adv_get_local_rpa>
            if (rpa) {
   181a4:	b120      	cbz	r0, 181b0 <ble_ll_conn_comp_event_send+0x8c>
                memcpy(enh_ev->local_rpa, rpa, BLE_DEV_ADDR_LEN);
   181a6:	6803      	ldr	r3, [r0, #0]
   181a8:	f8c4 300e 	str.w	r3, [r4, #14]
   181ac:	8883      	ldrh	r3, [r0, #4]
   181ae:	8263      	strh	r3, [r4, #18]
             if (connsm->peer_addr_type < BLE_HCI_CONN_PEER_ADDR_PUBLIC_IDENT
   181b0:	f895 3092 	ldrb.w	r3, [r5, #146]	; 0x92
   181b4:	2b01      	cmp	r3, #1
   181b6:	d91d      	bls.n	181f4 <ble_ll_conn_comp_event_send+0xd0>
             if (enh_ev->peer_addr_type > BLE_HCI_CONN_PEER_ADDR_RANDOM) {
   181b8:	79e3      	ldrb	r3, [r4, #7]
   181ba:	2b01      	cmp	r3, #1
   181bc:	d909      	bls.n	181d2 <ble_ll_conn_comp_event_send+0xae>
                 if (connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) {
   181be:	79eb      	ldrb	r3, [r5, #7]
   181c0:	2b01      	cmp	r3, #1
   181c2:	d01f      	beq.n	18204 <ble_ll_conn_comp_event_send+0xe0>
                     rpa = ble_ll_adv_get_peer_rpa(advsm);
   181c4:	4638      	mov	r0, r7
   181c6:	f7fd fe0a 	bl	15dde <ble_ll_adv_get_peer_rpa>
                 memcpy(enh_ev->peer_rpa, rpa, BLE_DEV_ADDR_LEN);
   181ca:	6803      	ldr	r3, [r0, #0]
   181cc:	6163      	str	r3, [r4, #20]
   181ce:	8883      	ldrh	r3, [r0, #4]
   181d0:	8323      	strh	r3, [r4, #24]
            enh_ev->conn_itvl = htole16(connsm->conn_itvl);
   181d2:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
   181d6:	8363      	strh	r3, [r4, #26]
            enh_ev->conn_latency = htole16(connsm->slave_latency);
   181d8:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
   181dc:	83a3      	strh	r3, [r4, #28]
            enh_ev->supervision_timeout = htole16(connsm->supervision_tmo);
   181de:	f8b5 306c 	ldrh.w	r3, [r5, #108]	; 0x6c
   181e2:	83e3      	strh	r3, [r4, #30]
            enh_ev->mca = connsm->master_sca;
   181e4:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
   181e8:	f884 3020 	strb.w	r3, [r4, #32]
        ble_ll_hci_event_send(hci_ev);
   181ec:	4620      	mov	r0, r4
   181ee:	f002 f977 	bl	1a4e0 <ble_ll_hci_event_send>
}
   181f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                     && (connsm->rpa_index > -1)) {
   181f4:	f995 3009 	ldrsb.w	r3, [r5, #9]
   181f8:	2b00      	cmp	r3, #0
   181fa:	dbdd      	blt.n	181b8 <ble_ll_conn_comp_event_send+0x94>
                 enh_ev->peer_addr_type += 2;
   181fc:	79e3      	ldrb	r3, [r4, #7]
   181fe:	3302      	adds	r3, #2
   18200:	71e3      	strb	r3, [r4, #7]
   18202:	e7d9      	b.n	181b8 <ble_ll_conn_comp_event_send+0x94>
                     rpa = ble_ll_scan_get_peer_rpa();
   18204:	f004 fa52 	bl	1c6ac <ble_ll_scan_get_peer_rpa>
   18208:	e7df      	b.n	181ca <ble_ll_conn_comp_event_send+0xa6>
    if (ble_ll_hci_is_le_event_enabled(BLE_HCI_LE_SUBEV_CONN_COMPLETE)) {
   1820a:	2001      	movs	r0, #1
   1820c:	f002 fa20 	bl	1a650 <ble_ll_hci_is_le_event_enabled>
   18210:	b3a0      	cbz	r0, 1827c <ble_ll_conn_comp_event_send+0x158>
        hci_ev->opcode = BLE_HCI_EVCODE_LE_META;
   18212:	233e      	movs	r3, #62	; 0x3e
   18214:	7023      	strb	r3, [r4, #0]
        hci_ev->length = sizeof(*ev);
   18216:	2313      	movs	r3, #19
   18218:	7063      	strb	r3, [r4, #1]
        memset(ev, 0, sizeof(*ev));
   1821a:	2200      	movs	r2, #0
   1821c:	f8c4 2002 	str.w	r2, [r4, #2]
   18220:	f8c4 2006 	str.w	r2, [r4, #6]
   18224:	f8c4 200a 	str.w	r2, [r4, #10]
   18228:	f8c4 200e 	str.w	r2, [r4, #14]
   1822c:	f8c4 2011 	str.w	r2, [r4, #17]
        ev->subev_code = BLE_HCI_LE_SUBEV_CONN_COMPLETE;
   18230:	2301      	movs	r3, #1
   18232:	70a3      	strb	r3, [r4, #2]
        ev->status = status;
   18234:	70e6      	strb	r6, [r4, #3]
        if (connsm) {
   18236:	b1ed      	cbz	r5, 18274 <ble_ll_conn_comp_event_send+0x150>
            ev->conn_handle = htole16(connsm->conn_handle);
   18238:	88ab      	ldrh	r3, [r5, #4]
   1823a:	80a3      	strh	r3, [r4, #4]
            ev->role = connsm->conn_role - 1;
   1823c:	79eb      	ldrb	r3, [r5, #7]
   1823e:	3b01      	subs	r3, #1
   18240:	71a3      	strb	r3, [r4, #6]
            ev->peer_addr_type = connsm->peer_addr_type;
   18242:	f895 3092 	ldrb.w	r3, [r5, #146]	; 0x92
   18246:	71e3      	strb	r3, [r4, #7]
            if (ev->peer_addr_type > BLE_HCI_CONN_PEER_ADDR_RANDOM) {
   18248:	2b01      	cmp	r3, #1
   1824a:	d901      	bls.n	18250 <ble_ll_conn_comp_event_send+0x12c>
                ev->peer_addr_type -= 2;
   1824c:	3b02      	subs	r3, #2
   1824e:	71e3      	strb	r3, [r4, #7]
            memcpy(ev->peer_addr, connsm->peer_addr, BLE_DEV_ADDR_LEN);
   18250:	462b      	mov	r3, r5
   18252:	f853 2f93 	ldr.w	r2, [r3, #147]!
   18256:	60a2      	str	r2, [r4, #8]
   18258:	889b      	ldrh	r3, [r3, #4]
   1825a:	81a3      	strh	r3, [r4, #12]
            ev->conn_itvl = htole16(connsm->conn_itvl);
   1825c:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
   18260:	81e3      	strh	r3, [r4, #14]
            ev->conn_latency = htole16(connsm->slave_latency);
   18262:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
   18266:	8223      	strh	r3, [r4, #16]
            ev->supervision_timeout = htole16(connsm->supervision_tmo);
   18268:	f8b5 306c 	ldrh.w	r3, [r5, #108]	; 0x6c
   1826c:	8263      	strh	r3, [r4, #18]
            ev->mca = connsm->master_sca;
   1826e:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
   18272:	7523      	strb	r3, [r4, #20]
        ble_ll_hci_event_send(hci_ev);
   18274:	4620      	mov	r0, r4
   18276:	f002 f933 	bl	1a4e0 <ble_ll_hci_event_send>
        return;
   1827a:	e7ba      	b.n	181f2 <ble_ll_conn_comp_event_send+0xce>
    ble_hci_trans_buf_free(evbuf);
   1827c:	4620      	mov	r0, r4
   1827e:	f012 f80d 	bl	2a29c <ble_hci_trans_buf_free>
   18282:	e7b6      	b.n	181f2 <ble_ll_conn_comp_event_send+0xce>

00018284 <ble_ll_conn_hci_cancel_conn_complete_event>:
/* this is called from same context after cmd complete is send so it is
 * safe to use g_ble_ll_conn_comp_ev
 */
static void
ble_ll_conn_hci_cancel_conn_complete_event(void)
{
   18284:	b508      	push	{r3, lr}
    BLE_LL_ASSERT(g_ble_ll_conn_comp_ev);
   18286:	4b0b      	ldr	r3, [pc, #44]	; (182b4 <ble_ll_conn_hci_cancel_conn_complete_event+0x30>)
   18288:	681a      	ldr	r2, [r3, #0]
   1828a:	b142      	cbz	r2, 1829e <ble_ll_conn_hci_cancel_conn_complete_event+0x1a>

    ble_ll_conn_comp_event_send(NULL, BLE_ERR_UNK_CONN_ID,
   1828c:	2300      	movs	r3, #0
   1828e:	2102      	movs	r1, #2
   18290:	4618      	mov	r0, r3
   18292:	f7ff ff47 	bl	18124 <ble_ll_conn_comp_event_send>
                                g_ble_ll_conn_comp_ev, NULL);
    g_ble_ll_conn_comp_ev = NULL;
   18296:	4b07      	ldr	r3, [pc, #28]	; (182b4 <ble_ll_conn_hci_cancel_conn_complete_event+0x30>)
   18298:	2200      	movs	r2, #0
   1829a:	601a      	str	r2, [r3, #0]
}
   1829c:	bd08      	pop	{r3, pc}
    BLE_LL_ASSERT(g_ble_ll_conn_comp_ev);
   1829e:	f7f3 ffa3 	bl	c1e8 <hal_debugger_connected>
   182a2:	b100      	cbz	r0, 182a6 <ble_ll_conn_hci_cancel_conn_complete_event+0x22>
   182a4:	be01      	bkpt	0x0001
   182a6:	2300      	movs	r3, #0
   182a8:	461a      	mov	r2, r3
   182aa:	4619      	mov	r1, r3
   182ac:	4618      	mov	r0, r3
   182ae:	f7f4 fc4f 	bl	cb50 <__assert_func>
   182b2:	bf00      	nop
   182b4:	2000387c 	.word	0x2000387c

000182b8 <ble_ll_conn_num_comp_pkts_event_send>:
{
   182b8:	b570      	push	{r4, r5, r6, lr}
    if (connsm == NULL) {
   182ba:	b320      	cbz	r0, 18306 <ble_ll_conn_num_comp_pkts_event_send+0x4e>
   182bc:	4604      	mov	r4, r0
}

static inline uint32_t
ble_npl_time_get(void)
{
    return os_time_get();
   182be:	f7f6 f877 	bl	e3b0 <os_time_get>
    if ((ble_npl_stime_t)(ble_npl_time_get() - g_ble_ll_last_num_comp_pkt_evt) <
   182c2:	4b36      	ldr	r3, [pc, #216]	; (1839c <ble_ll_conn_num_comp_pkts_event_send+0xe4>)
   182c4:	681b      	ldr	r3, [r3, #0]
   182c6:	1ac0      	subs	r0, r0, r3
   182c8:	28ff      	cmp	r0, #255	; 0xff
   182ca:	d81c      	bhi.n	18306 <ble_ll_conn_num_comp_pkts_event_send+0x4e>
        if (connsm->completed_pkts) {
   182cc:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
   182d0:	2b00      	cmp	r3, #0
   182d2:	d05f      	beq.n	18394 <ble_ll_conn_num_comp_pkts_event_send+0xdc>
            hci_ev = (void *) ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   182d4:	2002      	movs	r0, #2
   182d6:	f011 ffb3 	bl	2a240 <ble_hci_trans_buf_alloc>
            if (hci_ev) {
   182da:	2800      	cmp	r0, #0
   182dc:	d05a      	beq.n	18394 <ble_ll_conn_num_comp_pkts_event_send+0xdc>
                hci_ev->opcode = BLE_HCI_EVCODE_NUM_COMP_PKTS;
   182de:	2213      	movs	r2, #19
   182e0:	7002      	strb	r2, [r0, #0]
                hci_ev->length = sizeof(*ev);
   182e2:	2201      	movs	r2, #1
   182e4:	7042      	strb	r2, [r0, #1]
                ev->count = 1;
   182e6:	7082      	strb	r2, [r0, #2]
                ev->completed[0].handle = htole16(connsm->conn_handle);
   182e8:	88a2      	ldrh	r2, [r4, #4]
   182ea:	f8a0 2003 	strh.w	r2, [r0, #3]
                ev->completed[0].packets = htole16(connsm->completed_pkts);
   182ee:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   182f2:	f8a0 2005 	strh.w	r2, [r0, #5]
                hci_ev->length += sizeof(ev->completed[0]);
   182f6:	2205      	movs	r2, #5
   182f8:	7042      	strb	r2, [r0, #1]
                connsm->completed_pkts = 0;
   182fa:	2200      	movs	r2, #0
   182fc:	f8a4 204c 	strh.w	r2, [r4, #76]	; 0x4c
                ble_ll_hci_event_send(hci_ev);
   18300:	f002 f8ee 	bl	1a4e0 <ble_ll_hci_event_send>
   18304:	e046      	b.n	18394 <ble_ll_conn_num_comp_pkts_event_send+0xdc>
    SLIST_FOREACH(connsm, &g_ble_ll_conn_active_list, act_sle) {
   18306:	4b26      	ldr	r3, [pc, #152]	; (183a0 <ble_ll_conn_num_comp_pkts_event_send+0xe8>)
   18308:	681c      	ldr	r4, [r3, #0]
    event_sent = 0;
   1830a:	2600      	movs	r6, #0
    hci_ev = NULL;
   1830c:	4632      	mov	r2, r6
    ev = NULL;
   1830e:	4635      	mov	r5, r6
    SLIST_FOREACH(connsm, &g_ble_ll_conn_active_list, act_sle) {
   18310:	e018      	b.n	18344 <ble_ll_conn_num_comp_pkts_event_send+0x8c>
            if (!hci_ev) {
   18312:	b322      	cbz	r2, 1835e <ble_ll_conn_num_comp_pkts_event_send+0xa6>
            ev->completed[ev->count].handle = htole16(connsm->conn_handle);
   18314:	782b      	ldrb	r3, [r5, #0]
   18316:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   1831a:	88a1      	ldrh	r1, [r4, #4]
   1831c:	f8a3 1001 	strh.w	r1, [r3, #1]
            ev->completed[ev->count].packets = htole16(connsm->completed_pkts);
   18320:	f8b4 104c 	ldrh.w	r1, [r4, #76]	; 0x4c
   18324:	f8a3 1003 	strh.w	r1, [r3, #3]
            hci_ev->length += sizeof(ev->completed[ev->count]);
   18328:	7853      	ldrb	r3, [r2, #1]
   1832a:	3304      	adds	r3, #4
   1832c:	7053      	strb	r3, [r2, #1]
            ev->count++;
   1832e:	782b      	ldrb	r3, [r5, #0]
   18330:	3301      	adds	r3, #1
   18332:	702b      	strb	r3, [r5, #0]
            connsm->completed_pkts = 0;
   18334:	2300      	movs	r3, #0
   18336:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
            if (ev->count == max_handles) {
   1833a:	782b      	ldrb	r3, [r5, #0]
   1833c:	2b11      	cmp	r3, #17
   1833e:	d01b      	beq.n	18378 <ble_ll_conn_num_comp_pkts_event_send+0xc0>
    SLIST_FOREACH(connsm, &g_ble_ll_conn_active_list, act_sle) {
   18340:	f8d4 40b8 	ldr.w	r4, [r4, #184]	; 0xb8
   18344:	b1f4      	cbz	r4, 18384 <ble_ll_conn_num_comp_pkts_event_send+0xcc>
        if ((connsm->conn_state != BLE_LL_CONN_STATE_IDLE) &&
   18346:	79a3      	ldrb	r3, [r4, #6]
   18348:	2b00      	cmp	r3, #0
   1834a:	d0f9      	beq.n	18340 <ble_ll_conn_num_comp_pkts_event_send+0x88>
            (connsm->completed_pkts || !STAILQ_EMPTY(&connsm->conn_txq))) {
   1834c:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
        if ((connsm->conn_state != BLE_LL_CONN_STATE_IDLE) &&
   18350:	2b00      	cmp	r3, #0
   18352:	d1de      	bne.n	18312 <ble_ll_conn_num_comp_pkts_event_send+0x5a>
            (connsm->completed_pkts || !STAILQ_EMPTY(&connsm->conn_txq))) {
   18354:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   18358:	2b00      	cmp	r3, #0
   1835a:	d1da      	bne.n	18312 <ble_ll_conn_num_comp_pkts_event_send+0x5a>
   1835c:	e7f0      	b.n	18340 <ble_ll_conn_num_comp_pkts_event_send+0x88>
                hci_ev = (void *) ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   1835e:	2002      	movs	r0, #2
   18360:	f011 ff6e 	bl	2a240 <ble_hci_trans_buf_alloc>
                if (!hci_ev) {
   18364:	4602      	mov	r2, r0
   18366:	b168      	cbz	r0, 18384 <ble_ll_conn_num_comp_pkts_event_send+0xcc>
                hci_ev->opcode = BLE_HCI_EVCODE_NUM_COMP_PKTS;
   18368:	2313      	movs	r3, #19
   1836a:	7003      	strb	r3, [r0, #0]
                hci_ev->length = sizeof(*ev);
   1836c:	2301      	movs	r3, #1
   1836e:	7043      	strb	r3, [r0, #1]
                ev = (void *)hci_ev->data;
   18370:	1c85      	adds	r5, r0, #2
                ev->count = 0;
   18372:	2300      	movs	r3, #0
   18374:	7083      	strb	r3, [r0, #2]
   18376:	e7cd      	b.n	18314 <ble_ll_conn_num_comp_pkts_event_send+0x5c>
                ble_ll_hci_event_send(hci_ev);
   18378:	4610      	mov	r0, r2
   1837a:	f002 f8b1 	bl	1a4e0 <ble_ll_hci_event_send>
                event_sent = 1;
   1837e:	2601      	movs	r6, #1
                hci_ev = NULL;
   18380:	2200      	movs	r2, #0
   18382:	e7dd      	b.n	18340 <ble_ll_conn_num_comp_pkts_event_send+0x88>
    if (hci_ev) {
   18384:	b13a      	cbz	r2, 18396 <ble_ll_conn_num_comp_pkts_event_send+0xde>
        ble_ll_hci_event_send(hci_ev);
   18386:	4610      	mov	r0, r2
   18388:	f002 f8aa 	bl	1a4e0 <ble_ll_hci_event_send>
   1838c:	f7f6 f810 	bl	e3b0 <os_time_get>
        g_ble_ll_last_num_comp_pkt_evt = ble_npl_time_get();
   18390:	4b02      	ldr	r3, [pc, #8]	; (1839c <ble_ll_conn_num_comp_pkts_event_send+0xe4>)
   18392:	6018      	str	r0, [r3, #0]
}
   18394:	bd70      	pop	{r4, r5, r6, pc}
    if (event_sent) {
   18396:	2e00      	cmp	r6, #0
   18398:	d1f8      	bne.n	1838c <ble_ll_conn_num_comp_pkts_event_send+0xd4>
   1839a:	e7fb      	b.n	18394 <ble_ll_conn_num_comp_pkts_event_send+0xdc>
   1839c:	20001e80 	.word	0x20001e80
   183a0:	20003ab0 	.word	0x20003ab0

000183a4 <ble_ll_auth_pyld_tmo_event_send>:
{
   183a4:	b510      	push	{r4, lr}
   183a6:	4604      	mov	r4, r0
    if (ble_ll_hci_is_event_enabled(BLE_HCI_EVCODE_AUTH_PYLD_TMO)) {
   183a8:	2057      	movs	r0, #87	; 0x57
   183aa:	f002 f97d 	bl	1a6a8 <ble_ll_hci_is_event_enabled>
   183ae:	b900      	cbnz	r0, 183b2 <ble_ll_auth_pyld_tmo_event_send+0xe>
}
   183b0:	bd10      	pop	{r4, pc}
        hci_ev = (void *) ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   183b2:	2002      	movs	r0, #2
   183b4:	f011 ff44 	bl	2a240 <ble_hci_trans_buf_alloc>
        if (hci_ev) {
   183b8:	2800      	cmp	r0, #0
   183ba:	d0f9      	beq.n	183b0 <ble_ll_auth_pyld_tmo_event_send+0xc>
            hci_ev->opcode = BLE_HCI_EVCODE_AUTH_PYLD_TMO;
   183bc:	2257      	movs	r2, #87	; 0x57
   183be:	7002      	strb	r2, [r0, #0]
            hci_ev->length = sizeof(*ev);
   183c0:	2202      	movs	r2, #2
   183c2:	7042      	strb	r2, [r0, #1]
            ev->conn_handle = htole16(connsm->conn_handle);
   183c4:	88a2      	ldrh	r2, [r4, #4]
   183c6:	8042      	strh	r2, [r0, #2]
            ble_ll_hci_event_send(hci_ev);
   183c8:	f002 f88a 	bl	1a4e0 <ble_ll_hci_event_send>
}
   183cc:	e7f0      	b.n	183b0 <ble_ll_auth_pyld_tmo_event_send+0xc>

000183ce <ble_ll_disconn_comp_event_send>:
{
   183ce:	b538      	push	{r3, r4, r5, lr}
   183d0:	4605      	mov	r5, r0
   183d2:	460c      	mov	r4, r1
    if (ble_ll_hci_is_event_enabled(BLE_HCI_EVCODE_DISCONN_CMP)) {
   183d4:	2005      	movs	r0, #5
   183d6:	f002 f967 	bl	1a6a8 <ble_ll_hci_is_event_enabled>
   183da:	b900      	cbnz	r0, 183de <ble_ll_disconn_comp_event_send+0x10>
}
   183dc:	bd38      	pop	{r3, r4, r5, pc}
        hci_ev = (void *) ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   183de:	2002      	movs	r0, #2
   183e0:	f011 ff2e 	bl	2a240 <ble_hci_trans_buf_alloc>
        if (hci_ev) {
   183e4:	2800      	cmp	r0, #0
   183e6:	d0f9      	beq.n	183dc <ble_ll_disconn_comp_event_send+0xe>
            hci_ev->opcode = BLE_HCI_EVCODE_DISCONN_CMP;
   183e8:	2205      	movs	r2, #5
   183ea:	7002      	strb	r2, [r0, #0]
            hci_ev->length = sizeof(*ev);
   183ec:	2204      	movs	r2, #4
   183ee:	7042      	strb	r2, [r0, #1]
            ev->status = BLE_ERR_SUCCESS;
   183f0:	2200      	movs	r2, #0
   183f2:	7082      	strb	r2, [r0, #2]
            ev->conn_handle = htole16(connsm->conn_handle);
   183f4:	88aa      	ldrh	r2, [r5, #4]
   183f6:	f8a0 2003 	strh.w	r2, [r0, #3]
            ev->reason = reason;
   183fa:	7144      	strb	r4, [r0, #5]
            ble_ll_hci_event_send(hci_ev);
   183fc:	f002 f870 	bl	1a4e0 <ble_ll_hci_event_send>
}
   18400:	e7ec      	b.n	183dc <ble_ll_disconn_comp_event_send+0xe>
	...

00018404 <ble_ll_conn_create>:
{
   18404:	b510      	push	{r4, lr}
   18406:	b088      	sub	sp, #32
    struct hci_create_conn hcc = { 0 };
   18408:	2300      	movs	r3, #0
   1840a:	9301      	str	r3, [sp, #4]
   1840c:	9302      	str	r3, [sp, #8]
   1840e:	9303      	str	r3, [sp, #12]
   18410:	9304      	str	r3, [sp, #16]
   18412:	9305      	str	r3, [sp, #20]
   18414:	9306      	str	r3, [sp, #24]
   18416:	f8ad 301c 	strh.w	r3, [sp, #28]
    if (len < sizeof(*cmd)) {
   1841a:	2918      	cmp	r1, #24
   1841c:	f240 8082 	bls.w	18524 <ble_ll_conn_create+0x120>
    if (g_ble_ll_conn_create_sm) {
   18420:	4b49      	ldr	r3, [pc, #292]	; (18548 <ble_ll_conn_create+0x144>)
   18422:	681b      	ldr	r3, [r3, #0]
   18424:	b11b      	cbz	r3, 1842e <ble_ll_conn_create+0x2a>
        return BLE_ERR_CMD_DISALLOWED;
   18426:	230c      	movs	r3, #12
}
   18428:	4618      	mov	r0, r3
   1842a:	b008      	add	sp, #32
   1842c:	bd10      	pop	{r4, pc}
   1842e:	4604      	mov	r4, r0
    if (ble_ll_scan_enabled()) {
   18430:	f004 f936 	bl	1c6a0 <ble_ll_scan_enabled>
   18434:	2800      	cmp	r0, #0
   18436:	d177      	bne.n	18528 <ble_ll_conn_create+0x124>
    hcc.scan_itvl = le16toh(cmd->scan_itvl);
   18438:	8820      	ldrh	r0, [r4, #0]
   1843a:	f8ad 0004 	strh.w	r0, [sp, #4]
    hcc.scan_window = le16toh(cmd->scan_window);
   1843e:	8861      	ldrh	r1, [r4, #2]
   18440:	f8ad 1006 	strh.w	r1, [sp, #6]
    rc = ble_ll_conn_hci_chk_scan_params(hcc.scan_itvl, hcc.scan_window);
   18444:	f7ff fde4 	bl	18010 <ble_ll_conn_hci_chk_scan_params>
    if (rc) {
   18448:	2800      	cmp	r0, #0
   1844a:	d16f      	bne.n	1852c <ble_ll_conn_create+0x128>
    hcc.filter_policy = cmd->filter_policy;
   1844c:	7923      	ldrb	r3, [r4, #4]
   1844e:	f88d 3008 	strb.w	r3, [sp, #8]
    if (hcc.filter_policy > BLE_HCI_INITIATOR_FILT_POLICY_MAX) {
   18452:	2b01      	cmp	r3, #1
   18454:	d86c      	bhi.n	18530 <ble_ll_conn_create+0x12c>
    if (hcc.filter_policy == 0) {
   18456:	b963      	cbnz	r3, 18472 <ble_ll_conn_create+0x6e>
        hcc.peer_addr_type = cmd->peer_addr_type;
   18458:	7963      	ldrb	r3, [r4, #5]
   1845a:	f88d 3009 	strb.w	r3, [sp, #9]
        if (hcc.peer_addr_type > BLE_HCI_CONN_PEER_ADDR_MAX) {
   1845e:	2b03      	cmp	r3, #3
   18460:	d868      	bhi.n	18534 <ble_ll_conn_create+0x130>
        memcpy(&hcc.peer_addr, cmd->peer_addr, BLE_DEV_ADDR_LEN);
   18462:	4623      	mov	r3, r4
   18464:	f853 2f06 	ldr.w	r2, [r3, #6]!
   18468:	f8cd 200a 	str.w	r2, [sp, #10]
   1846c:	889b      	ldrh	r3, [r3, #4]
   1846e:	f8ad 300e 	strh.w	r3, [sp, #14]
    hcc.own_addr_type = cmd->own_addr_type;
   18472:	7b23      	ldrb	r3, [r4, #12]
   18474:	f88d 3010 	strb.w	r3, [sp, #16]
    if (hcc.own_addr_type > BLE_HCI_ADV_OWN_ADDR_MAX) {
   18478:	2b03      	cmp	r3, #3
   1847a:	d85d      	bhi.n	18538 <ble_ll_conn_create+0x134>
    hcc.conn_itvl_min = le16toh(cmd->min_conn_itvl);
   1847c:	f8b4 000d 	ldrh.w	r0, [r4, #13]
   18480:	f8ad 0012 	strh.w	r0, [sp, #18]
    hcc.conn_itvl_max = le16toh(cmd->max_conn_itvl);
   18484:	f8b4 100f 	ldrh.w	r1, [r4, #15]
   18488:	f8ad 1014 	strh.w	r1, [sp, #20]
    hcc.conn_latency = le16toh(cmd->conn_latency);
   1848c:	f8b4 2011 	ldrh.w	r2, [r4, #17]
   18490:	f8ad 2016 	strh.w	r2, [sp, #22]
    hcc.supervision_timeout = le16toh(cmd->tmo);
   18494:	f8b4 3013 	ldrh.w	r3, [r4, #19]
   18498:	f8ad 3018 	strh.w	r3, [sp, #24]
    rc = ble_ll_conn_hci_chk_conn_params(hcc.conn_itvl_min,
   1849c:	f7ff fde4 	bl	18068 <ble_ll_conn_hci_chk_conn_params>
    if (rc) {
   184a0:	4603      	mov	r3, r0
   184a2:	2800      	cmp	r0, #0
   184a4:	d1c0      	bne.n	18428 <ble_ll_conn_create+0x24>
    hcc.min_ce_len = le16toh(cmd->min_ce);
   184a6:	f8b4 3015 	ldrh.w	r3, [r4, #21]
   184aa:	b299      	uxth	r1, r3
   184ac:	f8ad 301a 	strh.w	r3, [sp, #26]
    hcc.max_ce_len = le16toh(cmd->max_ce);
   184b0:	f8b4 3017 	ldrh.w	r3, [r4, #23]
   184b4:	b29a      	uxth	r2, r3
   184b6:	f8ad 301c 	strh.w	r3, [sp, #28]
    if (hcc.min_ce_len > hcc.max_ce_len) {
   184ba:	4291      	cmp	r1, r2
   184bc:	d83e      	bhi.n	1853c <ble_ll_conn_create+0x138>
    if (ble_ll_init_alloc_conn_comp_ev()) {
   184be:	f7ff fdbf 	bl	18040 <ble_ll_init_alloc_conn_comp_ev>
   184c2:	2800      	cmp	r0, #0
   184c4:	d13c      	bne.n	18540 <ble_ll_conn_create+0x13c>
    connsm = ble_ll_conn_sm_get();
   184c6:	f7fe fab1 	bl	16a2c <ble_ll_conn_sm_get>
    if (connsm == NULL) {
   184ca:	4604      	mov	r4, r0
   184cc:	2800      	cmp	r0, #0
   184ce:	d039      	beq.n	18544 <ble_ll_conn_create+0x140>
    ble_ll_conn_master_init(connsm, &hcc);
   184d0:	a901      	add	r1, sp, #4
   184d2:	f7fe fccc 	bl	16e6e <ble_ll_conn_master_init>
    ble_ll_conn_sm_new(connsm);
   184d6:	4620      	mov	r0, r4
   184d8:	f7fe fcfc 	bl	16ed4 <ble_ll_conn_sm_new>
    rc = ble_ll_scan_initiator_start(&hcc, &connsm->scansm);
   184dc:	f504 71ce 	add.w	r1, r4, #412	; 0x19c
   184e0:	a801      	add	r0, sp, #4
   184e2:	f004 f8b1 	bl	1c648 <ble_ll_scan_initiator_start>
    if (rc) {
   184e6:	4603      	mov	r3, r0
   184e8:	b1c8      	cbz	r0, 1851e <ble_ll_conn_create+0x11a>
        SLIST_REMOVE(&g_ble_ll_conn_active_list,connsm,ble_ll_conn_sm,act_sle);
   184ea:	4a18      	ldr	r2, [pc, #96]	; (1854c <ble_ll_conn_create+0x148>)
   184ec:	6811      	ldr	r1, [r2, #0]
   184ee:	42a1      	cmp	r1, r4
   184f0:	d104      	bne.n	184fc <ble_ll_conn_create+0xf8>
   184f2:	f8d1 10b8 	ldr.w	r1, [r1, #184]	; 0xb8
   184f6:	6011      	str	r1, [r2, #0]
   184f8:	e008      	b.n	1850c <ble_ll_conn_create+0x108>
   184fa:	4611      	mov	r1, r2
   184fc:	f8d1 20b8 	ldr.w	r2, [r1, #184]	; 0xb8
   18500:	42a2      	cmp	r2, r4
   18502:	d1fa      	bne.n	184fa <ble_ll_conn_create+0xf6>
   18504:	f8d2 20b8 	ldr.w	r2, [r2, #184]	; 0xb8
   18508:	f8c1 20b8 	str.w	r2, [r1, #184]	; 0xb8
        STAILQ_INSERT_TAIL(&g_ble_ll_conn_free_list, connsm, free_stqe);
   1850c:	2200      	movs	r2, #0
   1850e:	f8c4 20b8 	str.w	r2, [r4, #184]	; 0xb8
   18512:	4a0f      	ldr	r2, [pc, #60]	; (18550 <ble_ll_conn_create+0x14c>)
   18514:	6851      	ldr	r1, [r2, #4]
   18516:	600c      	str	r4, [r1, #0]
   18518:	34b8      	adds	r4, #184	; 0xb8
   1851a:	6054      	str	r4, [r2, #4]
   1851c:	e784      	b.n	18428 <ble_ll_conn_create+0x24>
        g_ble_ll_conn_create_sm = connsm;
   1851e:	4a0a      	ldr	r2, [pc, #40]	; (18548 <ble_ll_conn_create+0x144>)
   18520:	6014      	str	r4, [r2, #0]
   18522:	e781      	b.n	18428 <ble_ll_conn_create+0x24>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   18524:	2312      	movs	r3, #18
   18526:	e77f      	b.n	18428 <ble_ll_conn_create+0x24>
        return BLE_ERR_CMD_DISALLOWED;
   18528:	230c      	movs	r3, #12
   1852a:	e77d      	b.n	18428 <ble_ll_conn_create+0x24>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1852c:	2312      	movs	r3, #18
   1852e:	e77b      	b.n	18428 <ble_ll_conn_create+0x24>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   18530:	2312      	movs	r3, #18
   18532:	e779      	b.n	18428 <ble_ll_conn_create+0x24>
            return BLE_ERR_INV_HCI_CMD_PARMS;
   18534:	2312      	movs	r3, #18
   18536:	e777      	b.n	18428 <ble_ll_conn_create+0x24>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   18538:	2312      	movs	r3, #18
   1853a:	e775      	b.n	18428 <ble_ll_conn_create+0x24>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1853c:	2312      	movs	r3, #18
   1853e:	e773      	b.n	18428 <ble_ll_conn_create+0x24>
        return BLE_ERR_MEM_CAPACITY;
   18540:	2307      	movs	r3, #7
   18542:	e771      	b.n	18428 <ble_ll_conn_create+0x24>
        return BLE_ERR_CONN_LIMIT;
   18544:	2309      	movs	r3, #9
   18546:	e76f      	b.n	18428 <ble_ll_conn_create+0x24>
   18548:	20003888 	.word	0x20003888
   1854c:	20003ab0 	.word	0x20003ab0
   18550:	20003880 	.word	0x20003880

00018554 <ble_ll_conn_hci_read_rem_features>:
    if (len != sizeof(*cmd)) {
   18554:	2902      	cmp	r1, #2
   18556:	d001      	beq.n	1855c <ble_ll_conn_hci_read_rem_features+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   18558:	2012      	movs	r0, #18
}
   1855a:	4770      	bx	lr
{
   1855c:	b510      	push	{r4, lr}
    connsm = ble_ll_conn_find_active_conn(le16toh(cmd->conn_handle));
   1855e:	8800      	ldrh	r0, [r0, #0]
   18560:	f7fe fa52 	bl	16a08 <ble_ll_conn_find_active_conn>
    if (!connsm) {
   18564:	4604      	mov	r4, r0
   18566:	b308      	cbz	r0, 185ac <ble_ll_conn_hci_read_rem_features+0x58>
    if (connsm->csmflags.cfbit.pending_hci_rd_features) {
   18568:	78c3      	ldrb	r3, [r0, #3]
   1856a:	f013 0f10 	tst.w	r3, #16
   1856e:	d11f      	bne.n	185b0 <ble_ll_conn_hci_read_rem_features+0x5c>
    if (!connsm->csmflags.cfbit.rxd_features &&
   18570:	f013 0f08 	tst.w	r3, #8
   18574:	d10b      	bne.n	1858e <ble_ll_conn_hci_read_rem_features+0x3a>
                !IS_PENDING_CTRL_PROC(connsm, BLE_LL_CTRL_PROC_FEATURE_XCHG)) {
   18576:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
    if (!connsm->csmflags.cfbit.rxd_features &&
   1857a:	f013 0f08 	tst.w	r3, #8
   1857e:	d106      	bne.n	1858e <ble_ll_conn_hci_read_rem_features+0x3a>
        if ((connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) &&
   18580:	79c3      	ldrb	r3, [r0, #7]
   18582:	2b02      	cmp	r3, #2
   18584:	d009      	beq.n	1859a <ble_ll_conn_hci_read_rem_features+0x46>
        ble_ll_ctrl_proc_start(connsm, BLE_LL_CTRL_PROC_FEATURE_XCHG);
   18586:	2103      	movs	r1, #3
   18588:	4620      	mov	r0, r4
   1858a:	f001 f81d 	bl	195c8 <ble_ll_ctrl_proc_start>
    connsm->csmflags.cfbit.pending_hci_rd_features = 1;
   1858e:	78e3      	ldrb	r3, [r4, #3]
   18590:	f043 0310 	orr.w	r3, r3, #16
   18594:	70e3      	strb	r3, [r4, #3]
    return BLE_ERR_SUCCESS;
   18596:	2000      	movs	r0, #0
}
   18598:	bd10      	pop	{r4, pc}
            !(ble_ll_read_supp_features() & BLE_LL_FEAT_SLAVE_INIT)) {
   1859a:	f7fc facf 	bl	14b3c <ble_ll_read_supp_features>
   1859e:	f000 0208 	and.w	r2, r0, #8
   185a2:	2300      	movs	r3, #0
        if ((connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) &&
   185a4:	4313      	orrs	r3, r2
   185a6:	d1ee      	bne.n	18586 <ble_ll_conn_hci_read_rem_features+0x32>
                return BLE_ERR_CMD_DISALLOWED;
   185a8:	200c      	movs	r0, #12
   185aa:	e7f5      	b.n	18598 <ble_ll_conn_hci_read_rem_features+0x44>
        return BLE_ERR_UNK_CONN_ID;
   185ac:	2002      	movs	r0, #2
   185ae:	e7f3      	b.n	18598 <ble_ll_conn_hci_read_rem_features+0x44>
        return BLE_ERR_CMD_DISALLOWED;
   185b0:	200c      	movs	r0, #12
   185b2:	e7f1      	b.n	18598 <ble_ll_conn_hci_read_rem_features+0x44>

000185b4 <ble_ll_conn_hci_update>:
{
   185b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   185b8:	4605      	mov	r5, r0
    handle = le16toh(cmd->conn_handle);
   185ba:	8806      	ldrh	r6, [r0, #0]
    connsm = ble_ll_conn_find_active_conn(handle);
   185bc:	4630      	mov	r0, r6
   185be:	f7fe fa23 	bl	16a08 <ble_ll_conn_find_active_conn>
    if (!connsm) {
   185c2:	2800      	cmp	r0, #0
   185c4:	d050      	beq.n	18668 <ble_ll_conn_hci_update+0xb4>
   185c6:	4604      	mov	r4, r0
    if (IS_PENDING_CTRL_PROC(connsm, BLE_LL_CTRL_PROC_CONN_PARAM_REQ) ||
   185c8:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
   185cc:	f013 0f41 	tst.w	r3, #65	; 0x41
   185d0:	d14c      	bne.n	1866c <ble_ll_conn_hci_update+0xb8>
    if ((connsm->conn_features & BLE_LL_FEAT_CONN_PARM_REQ) == 0) {
   185d2:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
   185d6:	f013 0f02 	tst.w	r3, #2
   185da:	d105      	bne.n	185e8 <ble_ll_conn_hci_update+0x34>
        if (connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) {
   185dc:	79c3      	ldrb	r3, [r0, #7]
   185de:	2b02      	cmp	r3, #2
   185e0:	d048      	beq.n	18674 <ble_ll_conn_hci_update+0xc0>
        ctrl_proc = BLE_LL_CTRL_PROC_CONN_UPDATE;
   185e2:	f04f 0800 	mov.w	r8, #0
   185e6:	e001      	b.n	185ec <ble_ll_conn_hci_update+0x38>
        ctrl_proc = BLE_LL_CTRL_PROC_CONN_PARAM_REQ;
   185e8:	f04f 0806 	mov.w	r8, #6
    if (connsm->csmflags.cfbit.awaiting_host_reply) {
   185ec:	7823      	ldrb	r3, [r4, #0]
   185ee:	f013 0f40 	tst.w	r3, #64	; 0x40
   185f2:	d00c      	beq.n	1860e <ble_ll_conn_hci_update+0x5a>
        if (connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) {
   185f4:	79e3      	ldrb	r3, [r4, #7]
   185f6:	2b02      	cmp	r3, #2
   185f8:	d03e      	beq.n	18678 <ble_ll_conn_hci_update+0xc4>
            connsm->csmflags.cfbit.awaiting_host_reply = 0;
   185fa:	7823      	ldrb	r3, [r4, #0]
   185fc:	f36f 1386 	bfc	r3, #6, #1
   18600:	7023      	strb	r3, [r4, #0]
            ble_ll_ctrl_reject_ind_send(connsm, connsm->host_reply_opcode,
   18602:	2223      	movs	r2, #35	; 0x23
   18604:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
   18608:	4620      	mov	r0, r4
   1860a:	f001 fb85 	bl	19d18 <ble_ll_ctrl_reject_ind_send>
    if (connsm->csmflags.cfbit.chanmap_update_scheduled) {
   1860e:	7863      	ldrb	r3, [r4, #1]
   18610:	f013 0f10 	tst.w	r3, #16
   18614:	d002      	beq.n	1861c <ble_ll_conn_hci_update+0x68>
        if (connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) {
   18616:	79e3      	ldrb	r3, [r4, #7]
   18618:	2b02      	cmp	r3, #2
   1861a:	d02f      	beq.n	1867c <ble_ll_conn_hci_update+0xc8>
    hcu->conn_itvl_min = le16toh(cmd->conn_itvl_min);
   1861c:	886b      	ldrh	r3, [r5, #2]
   1861e:	b298      	uxth	r0, r3
   18620:	f8a4 316a 	strh.w	r3, [r4, #362]	; 0x16a
    hcu->conn_itvl_max = le16toh(cmd->conn_itvl_max);
   18624:	88ab      	ldrh	r3, [r5, #4]
   18626:	b299      	uxth	r1, r3
   18628:	f8a4 316c 	strh.w	r3, [r4, #364]	; 0x16c
    hcu->conn_latency = le16toh(cmd->conn_latency);
   1862c:	88eb      	ldrh	r3, [r5, #6]
   1862e:	b29a      	uxth	r2, r3
   18630:	f8a4 316e 	strh.w	r3, [r4, #366]	; 0x16e
    hcu->supervision_timeout = le16toh(cmd->supervision_timeout);
   18634:	892f      	ldrh	r7, [r5, #8]
   18636:	b2bb      	uxth	r3, r7
   18638:	f8a4 7170 	strh.w	r7, [r4, #368]	; 0x170
    hcu->min_ce_len = le16toh(cmd->min_ce_len);
   1863c:	896f      	ldrh	r7, [r5, #10]
   1863e:	fa1f fc87 	uxth.w	ip, r7
   18642:	f8a4 7172 	strh.w	r7, [r4, #370]	; 0x172
    hcu->max_ce_len = le16toh(cmd->max_ce_len);
   18646:	89ad      	ldrh	r5, [r5, #12]
   18648:	b2af      	uxth	r7, r5
   1864a:	f8a4 5174 	strh.w	r5, [r4, #372]	; 0x174
    if (hcu->min_ce_len > hcu->max_ce_len) {
   1864e:	45bc      	cmp	ip, r7
   18650:	d816      	bhi.n	18680 <ble_ll_conn_hci_update+0xcc>
    rc = ble_ll_conn_hci_chk_conn_params(hcu->conn_itvl_min,
   18652:	f7ff fd09 	bl	18068 <ble_ll_conn_hci_chk_conn_params>
    if (!rc) {
   18656:	4605      	mov	r5, r0
   18658:	b948      	cbnz	r0, 1866e <ble_ll_conn_hci_update+0xba>
        hcu->handle = handle;
   1865a:	f8a4 6168 	strh.w	r6, [r4, #360]	; 0x168
        ble_ll_ctrl_proc_start(connsm, ctrl_proc);
   1865e:	4641      	mov	r1, r8
   18660:	4620      	mov	r0, r4
   18662:	f000 ffb1 	bl	195c8 <ble_ll_ctrl_proc_start>
   18666:	e002      	b.n	1866e <ble_ll_conn_hci_update+0xba>
        return BLE_ERR_UNK_CONN_ID;
   18668:	2502      	movs	r5, #2
   1866a:	e000      	b.n	1866e <ble_ll_conn_hci_update+0xba>
        return BLE_ERR_CMD_DISALLOWED;
   1866c:	250c      	movs	r5, #12
}
   1866e:	4628      	mov	r0, r5
   18670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return BLE_ERR_UNSUPP_REM_FEATURE;
   18674:	251a      	movs	r5, #26
   18676:	e7fa      	b.n	1866e <ble_ll_conn_hci_update+0xba>
            return BLE_ERR_LMP_COLLISION;
   18678:	2523      	movs	r5, #35	; 0x23
   1867a:	e7f8      	b.n	1866e <ble_ll_conn_hci_update+0xba>
            return BLE_ERR_DIFF_TRANS_COLL;
   1867c:	252a      	movs	r5, #42	; 0x2a
   1867e:	e7f6      	b.n	1866e <ble_ll_conn_hci_update+0xba>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   18680:	2512      	movs	r5, #18
   18682:	e7f4      	b.n	1866e <ble_ll_conn_hci_update+0xba>

00018684 <ble_ll_conn_hci_param_rr>:
{
   18684:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (len != sizeof(*cmd)) {
   18688:	290e      	cmp	r1, #14
   1868a:	d003      	beq.n	18694 <ble_ll_conn_hci_param_rr+0x10>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1868c:	2412      	movs	r4, #18
}
   1868e:	4620      	mov	r0, r4
   18690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   18694:	461e      	mov	r6, r3
   18696:	4615      	mov	r5, r2
   18698:	4604      	mov	r4, r0
    handle = le16toh(cmd->conn_handle);
   1869a:	8807      	ldrh	r7, [r0, #0]
   1869c:	fa1f f887 	uxth.w	r8, r7
    if ((ble_ll_read_supp_features() & BLE_LL_FEAT_CONN_PARM_REQ) == 0) {
   186a0:	f7fc fa4c 	bl	14b3c <ble_ll_read_supp_features>
   186a4:	f000 0202 	and.w	r2, r0, #2
   186a8:	2300      	movs	r3, #0
   186aa:	4313      	orrs	r3, r2
   186ac:	d104      	bne.n	186b8 <ble_ll_conn_hci_param_rr+0x34>
        rc = BLE_ERR_UNKNOWN_HCI_CMD;
   186ae:	2401      	movs	r4, #1
    rsp->conn_handle = htole16(handle);
   186b0:	802f      	strh	r7, [r5, #0]
    *rsplen = sizeof(*rsp);
   186b2:	2302      	movs	r3, #2
   186b4:	7033      	strb	r3, [r6, #0]
    return rc;
   186b6:	e7ea      	b.n	1868e <ble_ll_conn_hci_param_rr+0xa>
    connsm = ble_ll_conn_find_active_conn(handle);
   186b8:	4640      	mov	r0, r8
   186ba:	f7fe f9a5 	bl	16a08 <ble_ll_conn_find_active_conn>
    if (!connsm) {
   186be:	4680      	mov	r8, r0
   186c0:	b388      	cbz	r0, 18726 <ble_ll_conn_hci_param_rr+0xa2>
    rc = ble_ll_conn_process_conn_params(cmd, connsm);
   186c2:	4601      	mov	r1, r0
   186c4:	4620      	mov	r0, r4
   186c6:	f7ff fcfa 	bl	180be <ble_ll_conn_process_conn_params>
   186ca:	4604      	mov	r4, r0
    if (connsm->csmflags.cfbit.awaiting_host_reply) {
   186cc:	f898 3000 	ldrb.w	r3, [r8]
   186d0:	f013 0f40 	tst.w	r3, #64	; 0x40
   186d4:	d0ec      	beq.n	186b0 <ble_ll_conn_hci_param_rr+0x2c>
        if (rc == BLE_ERR_SUCCESS) {
   186d6:	b9c8      	cbnz	r0, 1870c <ble_ll_conn_hci_param_rr+0x88>
            om = os_msys_get_pkthdr(BLE_LL_CTRL_MAX_PDU_LEN,
   186d8:	2110      	movs	r1, #16
   186da:	201b      	movs	r0, #27
   186dc:	f7f5 fb61 	bl	dda2 <os_msys_get_pkthdr>
            if (om) {
   186e0:	4681      	mov	r9, r0
   186e2:	b1c8      	cbz	r0, 18718 <ble_ll_conn_hci_param_rr+0x94>
                dptr = om->om_data;
   186e4:	f8d0 a000 	ldr.w	sl, [r0]
                rsp_opcode = ble_ll_ctrl_conn_param_reply(connsm, dptr,
   186e8:	f508 72c1 	add.w	r2, r8, #386	; 0x182
   186ec:	4651      	mov	r1, sl
   186ee:	4640      	mov	r0, r8
   186f0:	f000 fe5e 	bl	193b0 <ble_ll_ctrl_conn_param_reply>
                dptr[0] = rsp_opcode;
   186f4:	f88a 0000 	strb.w	r0, [sl]
                len = g_ble_ll_ctrl_pkt_lengths[rsp_opcode] + 1;
   186f8:	4b0c      	ldr	r3, [pc, #48]	; (1872c <ble_ll_conn_hci_param_rr+0xa8>)
   186fa:	5c1b      	ldrb	r3, [r3, r0]
   186fc:	3301      	adds	r3, #1
                ble_ll_conn_enqueue_pkt(connsm, om, BLE_LL_LLID_CTRL, len);
   186fe:	b2db      	uxtb	r3, r3
   18700:	2203      	movs	r2, #3
   18702:	4649      	mov	r1, r9
   18704:	4640      	mov	r0, r8
   18706:	f7ff fa53 	bl	17bb0 <ble_ll_conn_enqueue_pkt>
   1870a:	e005      	b.n	18718 <ble_ll_conn_hci_param_rr+0x94>
            ble_ll_ctrl_reject_ind_send(connsm, connsm->host_reply_opcode,
   1870c:	223b      	movs	r2, #59	; 0x3b
   1870e:	f898 1038 	ldrb.w	r1, [r8, #56]	; 0x38
   18712:	4640      	mov	r0, r8
   18714:	f001 fb00 	bl	19d18 <ble_ll_ctrl_reject_ind_send>
        connsm->csmflags.cfbit.awaiting_host_reply = 0;
   18718:	f898 3000 	ldrb.w	r3, [r8]
   1871c:	f36f 1386 	bfc	r3, #6, #1
   18720:	f888 3000 	strb.w	r3, [r8]
   18724:	e7c4      	b.n	186b0 <ble_ll_conn_hci_param_rr+0x2c>
        rc = BLE_ERR_UNK_CONN_ID;
   18726:	2402      	movs	r4, #2
   18728:	e7c2      	b.n	186b0 <ble_ll_conn_hci_param_rr+0x2c>
   1872a:	bf00      	nop
   1872c:	00031dc8 	.word	0x00031dc8

00018730 <ble_ll_conn_hci_param_nrr>:
    if (len != sizeof(*cmd)) {
   18730:	2903      	cmp	r1, #3
   18732:	d001      	beq.n	18738 <ble_ll_conn_hci_param_nrr+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   18734:	2012      	movs	r0, #18
}
   18736:	4770      	bx	lr
{
   18738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1873c:	461e      	mov	r6, r3
   1873e:	4615      	mov	r5, r2
   18740:	4604      	mov	r4, r0
    handle = le16toh(cmd->conn_handle);
   18742:	8807      	ldrh	r7, [r0, #0]
   18744:	fa1f f887 	uxth.w	r8, r7
    if ((ble_ll_read_supp_features() & BLE_LL_FEAT_CONN_PARM_REQ) == 0) {
   18748:	f7fc f9f8 	bl	14b3c <ble_ll_read_supp_features>
   1874c:	f000 0202 	and.w	r2, r0, #2
   18750:	2300      	movs	r3, #0
   18752:	4313      	orrs	r3, r2
   18754:	d105      	bne.n	18762 <ble_ll_conn_hci_param_nrr+0x32>
        rc = BLE_ERR_UNKNOWN_HCI_CMD;
   18756:	2001      	movs	r0, #1
    rsp->conn_handle = htole16(handle);
   18758:	802f      	strh	r7, [r5, #0]
    *rsplen = sizeof(*rsp);
   1875a:	2302      	movs	r3, #2
   1875c:	7033      	strb	r3, [r6, #0]
}
   1875e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    connsm = ble_ll_conn_find_active_conn(handle);
   18762:	4640      	mov	r0, r8
   18764:	f7fe f950 	bl	16a08 <ble_ll_conn_find_active_conn>
    if (!connsm) {
   18768:	4680      	mov	r8, r0
   1876a:	b190      	cbz	r0, 18792 <ble_ll_conn_hci_param_nrr+0x62>
    if (connsm->csmflags.cfbit.awaiting_host_reply) {
   1876c:	7803      	ldrb	r3, [r0, #0]
   1876e:	f013 0f40 	tst.w	r3, #64	; 0x40
   18772:	d101      	bne.n	18778 <ble_ll_conn_hci_param_nrr+0x48>
    rc = BLE_ERR_SUCCESS;
   18774:	2000      	movs	r0, #0
   18776:	e7ef      	b.n	18758 <ble_ll_conn_hci_param_nrr+0x28>
        ble_ll_ctrl_reject_ind_send(connsm, connsm->host_reply_opcode,
   18778:	78a2      	ldrb	r2, [r4, #2]
   1877a:	f890 1038 	ldrb.w	r1, [r0, #56]	; 0x38
   1877e:	f001 facb 	bl	19d18 <ble_ll_ctrl_reject_ind_send>
        connsm->csmflags.cfbit.awaiting_host_reply = 0;
   18782:	f898 3000 	ldrb.w	r3, [r8]
   18786:	f36f 1386 	bfc	r3, #6, #1
   1878a:	f888 3000 	strb.w	r3, [r8]
    rc = BLE_ERR_SUCCESS;
   1878e:	2000      	movs	r0, #0
   18790:	e7e2      	b.n	18758 <ble_ll_conn_hci_param_nrr+0x28>
        rc = BLE_ERR_UNK_CONN_ID;
   18792:	2002      	movs	r0, #2
   18794:	e7e0      	b.n	18758 <ble_ll_conn_hci_param_nrr+0x28>
	...

00018798 <ble_ll_conn_create_cancel>:
 *
 * @return int
 */
int
ble_ll_conn_create_cancel(ble_ll_hci_post_cmd_complete_cb *post_cmd_cb)
{
   18798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1879a:	4607      	mov	r7, r0
     * If we receive this command and we have not got a connection
     * create command, we have to return disallowed. The spec does not say
     * what happens if the connection has already been established. We
     * return disallowed as well
     */
    OS_ENTER_CRITICAL(sr);
   1879c:	f7f5 feca 	bl	e534 <os_arch_save_sr>
   187a0:	4606      	mov	r6, r0
    connsm = g_ble_ll_conn_create_sm;
   187a2:	4b0d      	ldr	r3, [pc, #52]	; (187d8 <ble_ll_conn_create_cancel+0x40>)
   187a4:	681d      	ldr	r5, [r3, #0]
    if (connsm && (connsm->conn_state == BLE_LL_CONN_STATE_IDLE)) {
   187a6:	b195      	cbz	r5, 187ce <ble_ll_conn_create_cancel+0x36>
   187a8:	79ab      	ldrb	r3, [r5, #6]
   187aa:	b993      	cbnz	r3, 187d2 <ble_ll_conn_create_cancel+0x3a>
        /* stop scanning and end the connection event */
        g_ble_ll_conn_create_sm = NULL;
   187ac:	2400      	movs	r4, #0
   187ae:	4b0a      	ldr	r3, [pc, #40]	; (187d8 <ble_ll_conn_create_cancel+0x40>)
   187b0:	601c      	str	r4, [r3, #0]
        ble_ll_scan_sm_stop(1);
   187b2:	2001      	movs	r0, #1
   187b4:	f003 fcbc 	bl	1c130 <ble_ll_scan_sm_stop>
        ble_ll_conn_end(connsm, BLE_ERR_UNK_CONN_ID);
   187b8:	2102      	movs	r1, #2
   187ba:	4628      	mov	r0, r5
   187bc:	f7fe fc46 	bl	1704c <ble_ll_conn_end>

        *post_cmd_cb = ble_ll_conn_hci_cancel_conn_complete_event;
   187c0:	4b06      	ldr	r3, [pc, #24]	; (187dc <ble_ll_conn_create_cancel+0x44>)
   187c2:	603b      	str	r3, [r7, #0]
        rc = BLE_ERR_SUCCESS;
    } else {
        /* If we are not attempting to create a connection*/
        rc = BLE_ERR_CMD_DISALLOWED;
    }
    OS_EXIT_CRITICAL(sr);
   187c4:	4630      	mov	r0, r6
   187c6:	f7f5 febb 	bl	e540 <os_arch_restore_sr>

    return rc;
}
   187ca:	4620      	mov	r0, r4
   187cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rc = BLE_ERR_CMD_DISALLOWED;
   187ce:	240c      	movs	r4, #12
   187d0:	e7f8      	b.n	187c4 <ble_ll_conn_create_cancel+0x2c>
   187d2:	240c      	movs	r4, #12
   187d4:	e7f6      	b.n	187c4 <ble_ll_conn_create_cancel+0x2c>
   187d6:	bf00      	nop
   187d8:	20003888 	.word	0x20003888
   187dc:	00018285 	.word	0x00018285

000187e0 <ble_ll_conn_hci_disconnect_cmd>:
    int rc;
    uint16_t handle;
    struct ble_ll_conn_sm *connsm;
    const struct ble_hci_lc_disconnect_cp *cmd = (const void *) cmdbuf;

    if (len != sizeof (*cmd)) {
   187e0:	2903      	cmp	r1, #3
   187e2:	d143      	bne.n	1886c <ble_ll_conn_hci_disconnect_cmd+0x8c>
        return BLE_ERR_INV_HCI_CMD_PARMS;
    }

    /* Check for valid parameters */
    handle = le16toh(cmd->conn_handle);
   187e4:	8802      	ldrh	r2, [r0, #0]

    rc = BLE_ERR_INV_HCI_CMD_PARMS;
    if (handle <= BLE_LL_CONN_MAX_CONN_HANDLE) {
   187e6:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
   187ea:	d241      	bcs.n	18870 <ble_ll_conn_hci_disconnect_cmd+0x90>
        /* Make sure reason is valid */
        switch (cmd->reason) {
   187ec:	7883      	ldrb	r3, [r0, #2]
   187ee:	3b05      	subs	r3, #5
   187f0:	2b36      	cmp	r3, #54	; 0x36
   187f2:	d83f      	bhi.n	18874 <ble_ll_conn_hci_disconnect_cmd+0x94>
   187f4:	e8df f003 	tbb	[pc, r3]
   187f8:	3e3e3e1c 	.word	0x3e3e3e1c
   187fc:	3e3e3e3e 	.word	0x3e3e3e3e
   18800:	3e3e3e3e 	.word	0x3e3e3e3e
   18804:	1c1c3e3e 	.word	0x1c1c3e3e
   18808:	3e3e3e1c 	.word	0x3e3e3e1c
   1880c:	3e3e1c3e 	.word	0x3e3e1c3e
   18810:	3e3e3e3e 	.word	0x3e3e3e3e
   18814:	3e3e3e3e 	.word	0x3e3e3e3e
   18818:	3e3e3e3e 	.word	0x3e3e3e3e
   1881c:	3e3e3e1c 	.word	0x3e3e3e1c
   18820:	3e3e3e3e 	.word	0x3e3e3e3e
   18824:	3e3e3e3e 	.word	0x3e3e3e3e
   18828:	3e3e3e3e 	.word	0x3e3e3e3e
   1882c:	3e3e      	.short	0x3e3e
   1882e:	1c          	.byte	0x1c
   1882f:	00          	.byte	0x00
{
   18830:	b510      	push	{r4, lr}
   18832:	4604      	mov	r4, r0
        case BLE_ERR_RD_CONN_TERM_RESRCS:
        case BLE_ERR_RD_CONN_TERM_PWROFF:
        case BLE_ERR_UNSUPP_REM_FEATURE:
        case BLE_ERR_UNIT_KEY_PAIRING:
        case BLE_ERR_CONN_PARMS:
            connsm = ble_ll_conn_find_active_conn(handle);
   18834:	4610      	mov	r0, r2
   18836:	f7fe f8e7 	bl	16a08 <ble_ll_conn_find_active_conn>
            if (connsm) {
   1883a:	b1e8      	cbz	r0, 18878 <ble_ll_conn_hci_disconnect_cmd+0x98>
                /* Do not allow command if we are in process of disconnecting */
                if (connsm->disconnect_reason) {
   1883c:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
   18840:	b9e2      	cbnz	r2, 1887c <ble_ll_conn_hci_disconnect_cmd+0x9c>
                    rc = BLE_ERR_CMD_DISALLOWED;
                } else {
                    /* This control procedure better not be pending! */
                    BLE_LL_ASSERT(CONN_F_TERMINATE_STARTED(connsm) == 0);
   18842:	f990 2000 	ldrsb.w	r2, [r0]
   18846:	2a00      	cmp	r2, #0
   18848:	db06      	blt.n	18858 <ble_ll_conn_hci_disconnect_cmd+0x78>

                    /* Record the disconnect reason */
                    connsm->disconnect_reason = cmd->reason;
   1884a:	78a2      	ldrb	r2, [r4, #2]
   1884c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c

                    /* Start this control procedure */
                    ble_ll_ctrl_terminate_start(connsm);
   18850:	f000 fe94 	bl	1957c <ble_ll_ctrl_terminate_start>

                    rc = BLE_ERR_SUCCESS;
   18854:	2000      	movs	r0, #0
            break;
        }
    }

    return rc;
}
   18856:	bd10      	pop	{r4, pc}
                    BLE_LL_ASSERT(CONN_F_TERMINATE_STARTED(connsm) == 0);
   18858:	f7f3 fcc6 	bl	c1e8 <hal_debugger_connected>
   1885c:	b100      	cbz	r0, 18860 <ble_ll_conn_hci_disconnect_cmd+0x80>
   1885e:	be01      	bkpt	0x0001
   18860:	2300      	movs	r3, #0
   18862:	461a      	mov	r2, r3
   18864:	4619      	mov	r1, r3
   18866:	4618      	mov	r0, r3
   18868:	f7f4 f972 	bl	cb50 <__assert_func>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1886c:	2012      	movs	r0, #18
   1886e:	4770      	bx	lr
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   18870:	2012      	movs	r0, #18
   18872:	4770      	bx	lr
   18874:	2012      	movs	r0, #18
}
   18876:	4770      	bx	lr
                rc = BLE_ERR_UNK_CONN_ID;
   18878:	2002      	movs	r0, #2
   1887a:	e7ec      	b.n	18856 <ble_ll_conn_hci_disconnect_cmd+0x76>
                    rc = BLE_ERR_CMD_DISALLOWED;
   1887c:	200c      	movs	r0, #12
   1887e:	e7ea      	b.n	18856 <ble_ll_conn_hci_disconnect_cmd+0x76>

00018880 <ble_ll_conn_hci_rd_rem_ver_cmd>:
ble_ll_conn_hci_rd_rem_ver_cmd(const uint8_t *cmdbuf, uint8_t len)
{
    struct ble_ll_conn_sm *connsm;
    const struct ble_hci_rd_rem_ver_info_cp *cmd = (const void *) cmdbuf;

    if (len != sizeof(*cmd)) {
   18880:	2902      	cmp	r1, #2
   18882:	d001      	beq.n	18888 <ble_ll_conn_hci_rd_rem_ver_cmd+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   18884:	2012      	movs	r0, #18
    } else {
        connsm->pending_ctrl_procs |= (1 << BLE_LL_CTRL_PROC_VERSION_XCHG);
    }

    return BLE_ERR_SUCCESS;
}
   18886:	4770      	bx	lr
{
   18888:	b508      	push	{r3, lr}
    connsm = ble_ll_conn_find_active_conn(le16toh(cmd->conn_handle));
   1888a:	8800      	ldrh	r0, [r0, #0]
   1888c:	f7fe f8bc 	bl	16a08 <ble_ll_conn_find_active_conn>
    if (!connsm) {
   18890:	b198      	cbz	r0, 188ba <ble_ll_conn_hci_rd_rem_ver_cmd+0x3a>
    if (IS_PENDING_CTRL_PROC(connsm, BLE_LL_CTRL_PROC_VERSION_XCHG)) {
   18892:	f8b0 2048 	ldrh.w	r2, [r0, #72]	; 0x48
   18896:	f012 0f10 	tst.w	r2, #16
   1889a:	d110      	bne.n	188be <ble_ll_conn_hci_rd_rem_ver_cmd+0x3e>
    if (!connsm->csmflags.cfbit.version_ind_sent) {
   1889c:	7841      	ldrb	r1, [r0, #1]
   1889e:	f011 0f04 	tst.w	r1, #4
   188a2:	d005      	beq.n	188b0 <ble_ll_conn_hci_rd_rem_ver_cmd+0x30>
        connsm->pending_ctrl_procs |= (1 << BLE_LL_CTRL_PROC_VERSION_XCHG);
   188a4:	f042 0210 	orr.w	r2, r2, #16
   188a8:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
    return BLE_ERR_SUCCESS;
   188ac:	2000      	movs	r0, #0
}
   188ae:	bd08      	pop	{r3, pc}
        ble_ll_ctrl_proc_start(connsm, BLE_LL_CTRL_PROC_VERSION_XCHG);
   188b0:	2104      	movs	r1, #4
   188b2:	f000 fe89 	bl	195c8 <ble_ll_ctrl_proc_start>
    return BLE_ERR_SUCCESS;
   188b6:	2000      	movs	r0, #0
   188b8:	e7f9      	b.n	188ae <ble_ll_conn_hci_rd_rem_ver_cmd+0x2e>
        return BLE_ERR_UNK_CONN_ID;
   188ba:	2002      	movs	r0, #2
   188bc:	e7f7      	b.n	188ae <ble_ll_conn_hci_rd_rem_ver_cmd+0x2e>
        return BLE_ERR_CMD_DISALLOWED;
   188be:	200c      	movs	r0, #12
   188c0:	e7f5      	b.n	188ae <ble_ll_conn_hci_rd_rem_ver_cmd+0x2e>

000188c2 <ble_ll_conn_hci_rd_rssi>:
    const struct ble_hci_rd_rssi_cp *cmd = (const void *) cmdbuf;
    struct ble_hci_rd_rssi_rp *rsp = (void *) rspbuf;
    struct ble_ll_conn_sm *connsm;
    int rc;

    if (len != sizeof(*cmd)) {
   188c2:	2902      	cmp	r1, #2
   188c4:	d001      	beq.n	188ca <ble_ll_conn_hci_rd_rssi+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   188c6:	2012      	movs	r0, #18
        rc = BLE_ERR_SUCCESS;
    }

    *rsplen = sizeof(*rsp);
    return rc;
}
   188c8:	4770      	bx	lr
{
   188ca:	b538      	push	{r3, r4, r5, lr}
   188cc:	461d      	mov	r5, r3
   188ce:	4614      	mov	r4, r2
    rsp->handle = cmd->handle;
   188d0:	8803      	ldrh	r3, [r0, #0]
   188d2:	8013      	strh	r3, [r2, #0]
    connsm = ble_ll_conn_find_active_conn(le16toh(cmd->handle));
   188d4:	8800      	ldrh	r0, [r0, #0]
   188d6:	f7fe f897 	bl	16a08 <ble_ll_conn_find_active_conn>
    if (!connsm) {
   188da:	b130      	cbz	r0, 188ea <ble_ll_conn_hci_rd_rssi+0x28>
        rsp->rssi = connsm->conn_rssi;
   188dc:	f990 3008 	ldrsb.w	r3, [r0, #8]
   188e0:	70a3      	strb	r3, [r4, #2]
        rc = BLE_ERR_SUCCESS;
   188e2:	2000      	movs	r0, #0
    *rsplen = sizeof(*rsp);
   188e4:	2303      	movs	r3, #3
   188e6:	702b      	strb	r3, [r5, #0]
}
   188e8:	bd38      	pop	{r3, r4, r5, pc}
        rsp->rssi = 127;
   188ea:	237f      	movs	r3, #127	; 0x7f
   188ec:	70a3      	strb	r3, [r4, #2]
        rc = BLE_ERR_UNK_CONN_ID;
   188ee:	2002      	movs	r0, #2
   188f0:	e7f8      	b.n	188e4 <ble_ll_conn_hci_rd_rssi+0x22>

000188f2 <ble_ll_conn_hci_rd_chan_map>:
    struct ble_hci_le_rd_chan_map_rp *rsp = (void *) rspbuf;
    struct ble_ll_conn_sm *connsm;
    uint16_t handle;
    int rc;

    if (len != sizeof(*cmd)) {
   188f2:	2902      	cmp	r1, #2
   188f4:	d001      	beq.n	188fa <ble_ll_conn_hci_rd_chan_map+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   188f6:	2012      	movs	r0, #18

    rsp->conn_handle = htole16(handle);

    *rsplen = sizeof(*rsp);
    return rc;
}
   188f8:	4770      	bx	lr
{
   188fa:	b570      	push	{r4, r5, r6, lr}
   188fc:	461d      	mov	r5, r3
   188fe:	4614      	mov	r4, r2
    handle = le16toh(cmd->conn_handle);
   18900:	8806      	ldrh	r6, [r0, #0]
    connsm = ble_ll_conn_find_active_conn(handle);
   18902:	4630      	mov	r0, r6
   18904:	f7fe f880 	bl	16a08 <ble_ll_conn_find_active_conn>
    if (!connsm) {
   18908:	4602      	mov	r2, r0
   1890a:	b170      	cbz	r0, 1892a <ble_ll_conn_hci_rd_chan_map+0x38>
        if (connsm->csmflags.cfbit.chanmap_update_scheduled) {
   1890c:	7843      	ldrb	r3, [r0, #1]
   1890e:	f013 0f10 	tst.w	r3, #16
   18912:	d010      	beq.n	18936 <ble_ll_conn_hci_rd_chan_map+0x44>
            memcpy(rsp->chan_map, connsm->req_chanmap, BLE_LL_CONN_CHMAP_LEN);
   18914:	f852 3f25 	ldr.w	r3, [r2, #37]!
   18918:	f8c4 3002 	str.w	r3, [r4, #2]
   1891c:	7913      	ldrb	r3, [r2, #4]
   1891e:	71a3      	strb	r3, [r4, #6]
        rc = BLE_ERR_SUCCESS;
   18920:	2000      	movs	r0, #0
    rsp->conn_handle = htole16(handle);
   18922:	8026      	strh	r6, [r4, #0]
    *rsplen = sizeof(*rsp);
   18924:	2307      	movs	r3, #7
   18926:	702b      	strb	r3, [r5, #0]
}
   18928:	bd70      	pop	{r4, r5, r6, pc}
        memset(rsp->chan_map, 0, sizeof(rsp->chan_map));
   1892a:	2200      	movs	r2, #0
   1892c:	f8c4 2002 	str.w	r2, [r4, #2]
   18930:	71a2      	strb	r2, [r4, #6]
        rc = BLE_ERR_UNK_CONN_ID;
   18932:	2002      	movs	r0, #2
   18934:	e7f5      	b.n	18922 <ble_ll_conn_hci_rd_chan_map+0x30>
            memcpy(rsp->chan_map, connsm->chanmap, BLE_LL_CONN_CHMAP_LEN);
   18936:	f852 3f20 	ldr.w	r3, [r2, #32]!
   1893a:	f8c4 3002 	str.w	r3, [r4, #2]
   1893e:	7913      	ldrb	r3, [r2, #4]
   18940:	71a3      	strb	r3, [r4, #6]
        rc = BLE_ERR_SUCCESS;
   18942:	2000      	movs	r0, #0
   18944:	e7ed      	b.n	18922 <ble_ll_conn_hci_rd_chan_map+0x30>

00018946 <ble_ll_conn_hci_set_chan_class>:
ble_ll_conn_hci_set_chan_class(const uint8_t *cmdbuf, uint8_t len)
{
    const struct ble_hci_le_set_host_chan_class_cp *cmd = (const void *) cmdbuf;
    uint8_t num_used_chans;

    if (len != sizeof(*cmd)) {
   18946:	2905      	cmp	r1, #5
   18948:	d001      	beq.n	1894e <ble_ll_conn_hci_set_chan_class+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1894a:	2012      	movs	r0, #18
    }

    /* Set the host channel mask */
    ble_ll_conn_set_global_chanmap(num_used_chans, cmd->chan_map);
    return BLE_ERR_SUCCESS;
}
   1894c:	4770      	bx	lr
{
   1894e:	b510      	push	{r4, lr}
   18950:	4604      	mov	r4, r0
    num_used_chans = ble_ll_utils_calc_num_used_chans(cmd->chan_map);
   18952:	f004 fc28 	bl	1d1a6 <ble_ll_utils_calc_num_used_chans>
    if ((num_used_chans < 2) || ((cmd->chan_map[4] & 0xe0) != 0)) {
   18956:	2801      	cmp	r0, #1
   18958:	d908      	bls.n	1896c <ble_ll_conn_hci_set_chan_class+0x26>
   1895a:	7923      	ldrb	r3, [r4, #4]
   1895c:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   18960:	d106      	bne.n	18970 <ble_ll_conn_hci_set_chan_class+0x2a>
    ble_ll_conn_set_global_chanmap(num_used_chans, cmd->chan_map);
   18962:	4621      	mov	r1, r4
   18964:	f7ff f99c 	bl	17ca0 <ble_ll_conn_set_global_chanmap>
    return BLE_ERR_SUCCESS;
   18968:	2000      	movs	r0, #0
}
   1896a:	bd10      	pop	{r4, pc}
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1896c:	2012      	movs	r0, #18
   1896e:	e7fc      	b.n	1896a <ble_ll_conn_hci_set_chan_class+0x24>
   18970:	2012      	movs	r0, #18
   18972:	e7fa      	b.n	1896a <ble_ll_conn_hci_set_chan_class+0x24>

00018974 <ble_ll_conn_hci_set_data_len>:
    uint16_t handle;
    uint16_t txoctets;
    uint16_t txtime;
    struct ble_ll_conn_sm *connsm;

    if (len != sizeof(*cmd)) {
   18974:	2906      	cmp	r1, #6
   18976:	d001      	beq.n	1897c <ble_ll_conn_hci_set_data_len+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   18978:	2012      	movs	r0, #18

done:
    rsp->conn_handle = htole16(handle);
    *rsplen = sizeof(*rsp);
    return rc;
}
   1897a:	4770      	bx	lr
{
   1897c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18980:	461e      	mov	r6, r3
   18982:	4615      	mov	r5, r2
   18984:	4604      	mov	r4, r0
    handle = le16toh(cmd->conn_handle);
   18986:	8807      	ldrh	r7, [r0, #0]
    connsm = ble_ll_conn_find_active_conn(handle);
   18988:	4638      	mov	r0, r7
   1898a:	f7fe f83d 	bl	16a08 <ble_ll_conn_find_active_conn>
    if (!connsm) {
   1898e:	4680      	mov	r8, r0
   18990:	b1f8      	cbz	r0, 189d2 <ble_ll_conn_hci_set_data_len+0x5e>
    txoctets = le16toh(cmd->tx_octets);
   18992:	f8b4 9002 	ldrh.w	r9, [r4, #2]
    txtime = le16toh(cmd->tx_time);
   18996:	88a4      	ldrh	r4, [r4, #4]
   18998:	fa1f fa84 	uxth.w	sl, r4
    if (!ble_ll_chk_txrx_octets(txoctets) ||
   1899c:	4648      	mov	r0, r9
   1899e:	f7fb fecb 	bl	14738 <ble_ll_chk_txrx_octets>
   189a2:	b908      	cbnz	r0, 189a8 <ble_ll_conn_hci_set_data_len+0x34>
        rc = BLE_ERR_INV_HCI_CMD_PARMS;
   189a4:	2012      	movs	r0, #18
   189a6:	e015      	b.n	189d4 <ble_ll_conn_hci_set_data_len+0x60>
        !ble_ll_chk_txrx_time(txtime)) {
   189a8:	4650      	mov	r0, sl
   189aa:	f7fb fecd 	bl	14748 <ble_ll_chk_txrx_time>
    if (!ble_ll_chk_txrx_octets(txoctets) ||
   189ae:	b1b0      	cbz	r0, 189de <ble_ll_conn_hci_set_data_len+0x6a>
    if (connsm->max_tx_time != txtime ||
   189b0:	f8b8 3010 	ldrh.w	r3, [r8, #16]
   189b4:	4553      	cmp	r3, sl
   189b6:	d103      	bne.n	189c0 <ble_ll_conn_hci_set_data_len+0x4c>
        connsm->max_tx_octets != txoctets) {
   189b8:	f898 300a 	ldrb.w	r3, [r8, #10]
    if (connsm->max_tx_time != txtime ||
   189bc:	454b      	cmp	r3, r9
   189be:	d010      	beq.n	189e2 <ble_ll_conn_hci_set_data_len+0x6e>
        connsm->max_tx_time = txtime;
   189c0:	f8a8 4010 	strh.w	r4, [r8, #16]
        connsm->max_tx_octets = txoctets;
   189c4:	f888 900a 	strb.w	r9, [r8, #10]
        ble_ll_ctrl_initiate_dle(connsm);
   189c8:	4640      	mov	r0, r8
   189ca:	f000 fe24 	bl	19616 <ble_ll_ctrl_initiate_dle>
    rc = BLE_ERR_SUCCESS;
   189ce:	2000      	movs	r0, #0
   189d0:	e000      	b.n	189d4 <ble_ll_conn_hci_set_data_len+0x60>
        rc = BLE_ERR_UNK_CONN_ID;
   189d2:	2002      	movs	r0, #2
    rsp->conn_handle = htole16(handle);
   189d4:	802f      	strh	r7, [r5, #0]
    *rsplen = sizeof(*rsp);
   189d6:	2302      	movs	r3, #2
   189d8:	7033      	strb	r3, [r6, #0]
}
   189da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        rc = BLE_ERR_INV_HCI_CMD_PARMS;
   189de:	2012      	movs	r0, #18
   189e0:	e7f8      	b.n	189d4 <ble_ll_conn_hci_set_data_len+0x60>
    rc = BLE_ERR_SUCCESS;
   189e2:	2000      	movs	r0, #0
   189e4:	e7f6      	b.n	189d4 <ble_ll_conn_hci_set_data_len+0x60>

000189e6 <ble_ll_conn_hci_le_start_encrypt>:
{
    const struct ble_hci_le_start_encrypt_cp *cmd = (const void *) cmdbuf;
    struct ble_ll_conn_sm *connsm;
    int rc;

    if (len != sizeof(*cmd)) {
   189e6:	291c      	cmp	r1, #28
   189e8:	d001      	beq.n	189ee <ble_ll_conn_hci_le_start_encrypt+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   189ea:	2012      	movs	r0, #18
        ble_ll_ctrl_proc_start(connsm, BLE_LL_CTRL_PROC_ENCRYPT);
        rc = BLE_ERR_SUCCESS;
    }

    return rc;
}
   189ec:	4770      	bx	lr
{
   189ee:	b538      	push	{r3, r4, r5, lr}
   189f0:	4604      	mov	r4, r0
    connsm = ble_ll_conn_find_active_conn(le16toh(cmd->conn_handle));
   189f2:	8800      	ldrh	r0, [r0, #0]
   189f4:	f7fe f808 	bl	16a08 <ble_ll_conn_find_active_conn>
    if (!connsm) {
   189f8:	4605      	mov	r5, r0
   189fa:	b1f0      	cbz	r0, 18a3a <ble_ll_conn_hci_le_start_encrypt+0x54>
    } else if (connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) {
   189fc:	79c3      	ldrb	r3, [r0, #7]
   189fe:	2b02      	cmp	r3, #2
   18a00:	d01d      	beq.n	18a3e <ble_ll_conn_hci_le_start_encrypt+0x58>
    } else if (connsm->cur_ctrl_proc == BLE_LL_CTRL_PROC_ENCRYPT) {
   18a02:	f890 303b 	ldrb.w	r3, [r0, #59]	; 0x3b
   18a06:	2b02      	cmp	r3, #2
   18a08:	d01b      	beq.n	18a42 <ble_ll_conn_hci_le_start_encrypt+0x5c>
        connsm->enc_data.host_rand_num = le64toh(cmd->rand);
   18a0a:	f8d4 2002 	ldr.w	r2, [r4, #2]
   18a0e:	f8d4 3006 	ldr.w	r3, [r4, #6]
   18a12:	f8c0 2128 	str.w	r2, [r0, #296]	; 0x128
   18a16:	f8c0 312c 	str.w	r3, [r0, #300]	; 0x12c
        connsm->enc_data.enc_div = le16toh(cmd->div);
   18a1a:	8963      	ldrh	r3, [r4, #10]
   18a1c:	f8a0 311a 	strh.w	r3, [r0, #282]	; 0x11a
        swap_buf(connsm->enc_data.enc_block.key, cmd->ltk, 16);
   18a20:	2210      	movs	r2, #16
   18a22:	f104 010c 	add.w	r1, r4, #12
   18a26:	f500 709c 	add.w	r0, r0, #312	; 0x138
   18a2a:	f016 fa06 	bl	2ee3a <swap_buf>
        ble_ll_ctrl_proc_start(connsm, BLE_LL_CTRL_PROC_ENCRYPT);
   18a2e:	2102      	movs	r1, #2
   18a30:	4628      	mov	r0, r5
   18a32:	f000 fdc9 	bl	195c8 <ble_ll_ctrl_proc_start>
        rc = BLE_ERR_SUCCESS;
   18a36:	2000      	movs	r0, #0
}
   18a38:	bd38      	pop	{r3, r4, r5, pc}
        rc = BLE_ERR_UNK_CONN_ID;
   18a3a:	2002      	movs	r0, #2
   18a3c:	e7fc      	b.n	18a38 <ble_ll_conn_hci_le_start_encrypt+0x52>
        rc = BLE_ERR_UNSPECIFIED;
   18a3e:	201f      	movs	r0, #31
   18a40:	e7fa      	b.n	18a38 <ble_ll_conn_hci_le_start_encrypt+0x52>
        rc = BLE_ERR_CMD_DISALLOWED;
   18a42:	200c      	movs	r0, #12
   18a44:	e7f8      	b.n	18a38 <ble_ll_conn_hci_le_start_encrypt+0x52>

00018a46 <ble_ll_conn_hci_le_ltk_reply>:
    struct ble_hci_le_lt_key_req_reply_rp *rsp = (void *) rspbuf;
    struct ble_ll_conn_sm *connsm;
    uint16_t handle;
    int rc;

    if (len != sizeof(*cmd)) {
   18a46:	2912      	cmp	r1, #18
   18a48:	d001      	beq.n	18a4e <ble_ll_conn_hci_le_ltk_reply+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   18a4a:	2012      	movs	r0, #18
ltk_key_cmd_complete:
    rsp->conn_handle = htole16(handle);

    *rsplen = sizeof(*rsp);
    return rc;
}
   18a4c:	4770      	bx	lr
{
   18a4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18a52:	461e      	mov	r6, r3
   18a54:	4615      	mov	r5, r2
   18a56:	4604      	mov	r4, r0
    handle = le16toh(cmd->conn_handle);
   18a58:	8807      	ldrh	r7, [r0, #0]
    connsm = ble_ll_conn_find_active_conn(handle);
   18a5a:	4638      	mov	r0, r7
   18a5c:	f7fd ffd4 	bl	16a08 <ble_ll_conn_find_active_conn>
    if (!connsm) {
   18a60:	4680      	mov	r8, r0
   18a62:	b1d0      	cbz	r0, 18a9a <ble_ll_conn_hci_le_ltk_reply+0x54>
    if (connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) {
   18a64:	79c3      	ldrb	r3, [r0, #7]
   18a66:	2b01      	cmp	r3, #1
   18a68:	d019      	beq.n	18a9e <ble_ll_conn_hci_le_ltk_reply+0x58>
    if (connsm->enc_data.enc_state != CONN_ENC_S_LTK_REQ_WAIT) {
   18a6a:	f890 3118 	ldrb.w	r3, [r0, #280]	; 0x118
   18a6e:	2b08      	cmp	r3, #8
   18a70:	d005      	beq.n	18a7e <ble_ll_conn_hci_le_ltk_reply+0x38>
        rc = BLE_ERR_CMD_DISALLOWED;
   18a72:	200c      	movs	r0, #12
    rsp->conn_handle = htole16(handle);
   18a74:	802f      	strh	r7, [r5, #0]
    *rsplen = sizeof(*rsp);
   18a76:	2302      	movs	r3, #2
   18a78:	7033      	strb	r3, [r6, #0]
}
   18a7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    swap_buf(connsm->enc_data.enc_block.key, cmd->ltk, 16);
   18a7e:	2210      	movs	r2, #16
   18a80:	1ca1      	adds	r1, r4, #2
   18a82:	f500 709c 	add.w	r0, r0, #312	; 0x138
   18a86:	f016 f9d8 	bl	2ee3a <swap_buf>
    ble_ll_calc_session_key(connsm);
   18a8a:	4640      	mov	r0, r8
   18a8c:	f000 fbce 	bl	1922c <ble_ll_calc_session_key>
    ble_ll_ctrl_start_enc_send(connsm);
   18a90:	4640      	mov	r0, r8
   18a92:	f000 fc6c 	bl	1936e <ble_ll_ctrl_start_enc_send>
    rc = BLE_ERR_SUCCESS;
   18a96:	2000      	movs	r0, #0
   18a98:	e7ec      	b.n	18a74 <ble_ll_conn_hci_le_ltk_reply+0x2e>
        rc = BLE_ERR_UNK_CONN_ID;
   18a9a:	2002      	movs	r0, #2
   18a9c:	e7ea      	b.n	18a74 <ble_ll_conn_hci_le_ltk_reply+0x2e>
        rc = BLE_ERR_UNSPECIFIED;
   18a9e:	201f      	movs	r0, #31
   18aa0:	e7e8      	b.n	18a74 <ble_ll_conn_hci_le_ltk_reply+0x2e>

00018aa2 <ble_ll_conn_hci_le_ltk_neg_reply>:
    struct ble_hci_le_lt_key_req_neg_reply_rp *rsp = (void *) rspbuf;
    struct ble_ll_conn_sm *connsm;
    uint16_t handle;
    int rc;

    if (len != sizeof(*cmd)) {
   18aa2:	2902      	cmp	r1, #2
   18aa4:	d001      	beq.n	18aaa <ble_ll_conn_hci_le_ltk_neg_reply+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   18aa6:	2012      	movs	r0, #18
ltk_key_cmd_complete:
    rsp->conn_handle = htole16(handle);

    *rsplen = sizeof(*rsp);
    return rc;
}
   18aa8:	4770      	bx	lr
{
   18aaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18aac:	461d      	mov	r5, r3
   18aae:	4614      	mov	r4, r2
    handle = le16toh(cmd->conn_handle);
   18ab0:	8806      	ldrh	r6, [r0, #0]
    connsm = ble_ll_conn_find_active_conn(handle);
   18ab2:	4630      	mov	r0, r6
   18ab4:	f7fd ffa8 	bl	16a08 <ble_ll_conn_find_active_conn>
    if (!connsm) {
   18ab8:	4607      	mov	r7, r0
   18aba:	b1a0      	cbz	r0, 18ae6 <ble_ll_conn_hci_le_ltk_neg_reply+0x44>
    if (connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) {
   18abc:	79c3      	ldrb	r3, [r0, #7]
   18abe:	2b01      	cmp	r3, #1
   18ac0:	d013      	beq.n	18aea <ble_ll_conn_hci_le_ltk_neg_reply+0x48>
    if (connsm->enc_data.enc_state != CONN_ENC_S_LTK_REQ_WAIT) {
   18ac2:	f890 3118 	ldrb.w	r3, [r0, #280]	; 0x118
   18ac6:	2b08      	cmp	r3, #8
   18ac8:	d004      	beq.n	18ad4 <ble_ll_conn_hci_le_ltk_neg_reply+0x32>
        rc = BLE_ERR_CMD_DISALLOWED;
   18aca:	200c      	movs	r0, #12
    rsp->conn_handle = htole16(handle);
   18acc:	8026      	strh	r6, [r4, #0]
    *rsplen = sizeof(*rsp);
   18ace:	2302      	movs	r3, #2
   18ad0:	702b      	strb	r3, [r5, #0]
}
   18ad2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ble_ll_ctrl_reject_ind_send(connsm, BLE_LL_CTRL_ENC_REQ,
   18ad4:	2206      	movs	r2, #6
   18ad6:	2103      	movs	r1, #3
   18ad8:	f001 f91e 	bl	19d18 <ble_ll_ctrl_reject_ind_send>
    connsm->enc_data.enc_state = CONN_ENC_S_LTK_NEG_REPLY;
   18adc:	2309      	movs	r3, #9
   18ade:	f887 3118 	strb.w	r3, [r7, #280]	; 0x118
    rc = BLE_ERR_SUCCESS;
   18ae2:	2000      	movs	r0, #0
   18ae4:	e7f2      	b.n	18acc <ble_ll_conn_hci_le_ltk_neg_reply+0x2a>
        rc = BLE_ERR_UNK_CONN_ID;
   18ae6:	2002      	movs	r0, #2
   18ae8:	e7f0      	b.n	18acc <ble_ll_conn_hci_le_ltk_neg_reply+0x2a>
        rc = BLE_ERR_UNSPECIFIED;
   18aea:	201f      	movs	r0, #31
   18aec:	e7ee      	b.n	18acc <ble_ll_conn_hci_le_ltk_neg_reply+0x2a>

00018aee <ble_ll_conn_hci_rd_auth_pyld_tmo>:
    struct ble_ll_conn_sm *connsm;
    uint16_t handle;
    int rc;


    if (len != sizeof(*cmd)) {
   18aee:	2902      	cmp	r1, #2
   18af0:	d001      	beq.n	18af6 <ble_ll_conn_hci_rd_auth_pyld_tmo+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   18af2:	2012      	movs	r0, #18

    rsp->conn_handle = htole16(handle);

    *rsplen = sizeof(*rsp);
    return rc;
}
   18af4:	4770      	bx	lr
{
   18af6:	b570      	push	{r4, r5, r6, lr}
   18af8:	461d      	mov	r5, r3
   18afa:	4614      	mov	r4, r2
    handle = le16toh(cmd->conn_handle);
   18afc:	8806      	ldrh	r6, [r0, #0]
    connsm = ble_ll_conn_find_active_conn(handle);
   18afe:	4630      	mov	r0, r6
   18b00:	f7fd ff82 	bl	16a08 <ble_ll_conn_find_active_conn>
    if (!connsm) {
   18b04:	b138      	cbz	r0, 18b16 <ble_ll_conn_hci_rd_auth_pyld_tmo+0x28>
        rsp->tmo = htole16(connsm->auth_pyld_tmo);
   18b06:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
   18b0a:	8063      	strh	r3, [r4, #2]
        rc = BLE_ERR_SUCCESS;
   18b0c:	2000      	movs	r0, #0
    rsp->conn_handle = htole16(handle);
   18b0e:	8026      	strh	r6, [r4, #0]
    *rsplen = sizeof(*rsp);
   18b10:	2304      	movs	r3, #4
   18b12:	702b      	strb	r3, [r5, #0]
}
   18b14:	bd70      	pop	{r4, r5, r6, pc}
        rsp->tmo = 0;
   18b16:	2300      	movs	r3, #0
   18b18:	70a3      	strb	r3, [r4, #2]
   18b1a:	70e3      	strb	r3, [r4, #3]
        rc = BLE_ERR_UNK_CONN_ID;
   18b1c:	2002      	movs	r0, #2
   18b1e:	e7f6      	b.n	18b0e <ble_ll_conn_hci_rd_auth_pyld_tmo+0x20>

00018b20 <ble_ll_conn_hci_wr_auth_pyld_tmo>:
    uint32_t min_tmo;
    uint16_t handle;
    uint16_t tmo;
    int rc;

    if (len != sizeof(*cmd)) {
   18b20:	2904      	cmp	r1, #4
   18b22:	d001      	beq.n	18b28 <ble_ll_conn_hci_wr_auth_pyld_tmo+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   18b24:	2012      	movs	r0, #18
    }

    rsp->conn_handle = htole16(handle);
    *rsplen = sizeof(*rsp);
    return rc;
}
   18b26:	4770      	bx	lr
{
   18b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18b2a:	461d      	mov	r5, r3
   18b2c:	4616      	mov	r6, r2
   18b2e:	4604      	mov	r4, r0
    handle = le16toh(cmd->conn_handle);
   18b30:	8807      	ldrh	r7, [r0, #0]
    connsm = ble_ll_conn_find_active_conn(handle);
   18b32:	4638      	mov	r0, r7
   18b34:	f7fd ff68 	bl	16a08 <ble_ll_conn_find_active_conn>
    if (!connsm) {
   18b38:	4603      	mov	r3, r0
   18b3a:	b1d8      	cbz	r0, 18b74 <ble_ll_conn_hci_wr_auth_pyld_tmo+0x54>
        tmo = le16toh(cmd->tmo);
   18b3c:	8862      	ldrh	r2, [r4, #2]
   18b3e:	b290      	uxth	r0, r2
        min_tmo = (uint32_t)connsm->conn_itvl * BLE_LL_CONN_ITVL_USECS;
   18b40:	f8b3 4068 	ldrh.w	r4, [r3, #104]	; 0x68
   18b44:	f240 41e2 	movw	r1, #1250	; 0x4e2
   18b48:	fb01 f104 	mul.w	r1, r1, r4
        min_tmo *= (connsm->slave_latency + 1);
   18b4c:	f8b3 406a 	ldrh.w	r4, [r3, #106]	; 0x6a
   18b50:	fb04 1101 	mla	r1, r4, r1, r1
        min_tmo /= 10000;
   18b54:	4c0c      	ldr	r4, [pc, #48]	; (18b88 <ble_ll_conn_hci_wr_auth_pyld_tmo+0x68>)
   18b56:	fba4 4101 	umull	r4, r1, r4, r1
        if (tmo < min_tmo) {
   18b5a:	ebb0 3f51 	cmp.w	r0, r1, lsr #13
   18b5e:	d30b      	bcc.n	18b78 <ble_ll_conn_hci_wr_auth_pyld_tmo+0x58>
            connsm->auth_pyld_tmo = tmo;
   18b60:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
   18b64:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
            if (ble_npl_callout_is_active(&connsm->auth_pyld_timer)) {
   18b68:	b15a      	cbz	r2, 18b82 <ble_ll_conn_hci_wr_auth_pyld_tmo+0x62>
                ble_ll_conn_auth_pyld_timer_start(connsm);
   18b6a:	4618      	mov	r0, r3
   18b6c:	f7fe f95e 	bl	16e2c <ble_ll_conn_auth_pyld_timer_start>
    rc = BLE_ERR_SUCCESS;
   18b70:	2000      	movs	r0, #0
   18b72:	e002      	b.n	18b7a <ble_ll_conn_hci_wr_auth_pyld_tmo+0x5a>
        rc = BLE_ERR_UNK_CONN_ID;
   18b74:	2002      	movs	r0, #2
   18b76:	e000      	b.n	18b7a <ble_ll_conn_hci_wr_auth_pyld_tmo+0x5a>
            rc = BLE_ERR_INV_HCI_CMD_PARMS;
   18b78:	2012      	movs	r0, #18
    rsp->conn_handle = htole16(handle);
   18b7a:	8037      	strh	r7, [r6, #0]
    *rsplen = sizeof(*rsp);
   18b7c:	2302      	movs	r3, #2
   18b7e:	702b      	strb	r3, [r5, #0]
}
   18b80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    rc = BLE_ERR_SUCCESS;
   18b82:	2000      	movs	r0, #0
   18b84:	e7f9      	b.n	18b7a <ble_ll_conn_hci_wr_auth_pyld_tmo+0x5a>
   18b86:	bf00      	nop
   18b88:	d1b71759 	.word	0xd1b71759

00018b8c <ble_ll_ctrl_enc_allowed_pdu>:
{
    int allowed;

    allowed = 0;

    switch (llid) {
   18b8c:	2801      	cmp	r0, #1
   18b8e:	d010      	beq.n	18bb2 <ble_ll_ctrl_enc_allowed_pdu+0x26>
   18b90:	2803      	cmp	r0, #3
   18b92:	d113      	bne.n	18bbc <ble_ll_ctrl_enc_allowed_pdu+0x30>
    case BLE_LL_LLID_CTRL:
        switch (opcode) {
   18b94:	3a02      	subs	r2, #2
   18b96:	2a0f      	cmp	r2, #15
   18b98:	d809      	bhi.n	18bae <ble_ll_ctrl_enc_allowed_pdu+0x22>
   18b9a:	e8df f002 	tbb	[pc, r2]
   18b9e:	1111      	.short	0x1111
   18ba0:	08111111 	.word	0x08111111
   18ba4:	11110808 	.word	0x11110808
   18ba8:	08081108 	.word	0x08081108
   18bac:	1108      	.short	0x1108
    allowed = 0;
   18bae:	2000      	movs	r0, #0
   18bb0:	4770      	bx	lr
            allowed = 1;
            break;
        }
        break;
    case BLE_LL_LLID_DATA_FRAG:
        if (len == 0) {
   18bb2:	b909      	cbnz	r1, 18bb8 <ble_ll_ctrl_enc_allowed_pdu+0x2c>
            /* Empty PDUs are allowed */
            allowed = 1;
   18bb4:	2001      	movs	r0, #1
        }
        break;
    }

    return allowed;
}
   18bb6:	4770      	bx	lr
    allowed = 0;
   18bb8:	2000      	movs	r0, #0
   18bba:	4770      	bx	lr
   18bbc:	2000      	movs	r0, #0
   18bbe:	4770      	bx	lr
            allowed = 1;
   18bc0:	2001      	movs	r0, #1
   18bc2:	4770      	bx	lr

00018bc4 <ble_ll_ctrl_rx_start_enc_req>:
{
    int rc;

    /* Only master should receive start enc request */
    rc = BLE_ERR_MAX;
    if (connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) {
   18bc4:	79c3      	ldrb	r3, [r0, #7]
   18bc6:	2b01      	cmp	r3, #1
   18bc8:	d001      	beq.n	18bce <ble_ll_ctrl_rx_start_enc_req+0xa>
        if (connsm->enc_data.enc_state == CONN_ENC_S_START_ENC_REQ_WAIT) {
            connsm->enc_data.enc_state = CONN_ENC_S_START_ENC_RSP_WAIT;
            rc = BLE_LL_CTRL_START_ENC_RSP;
        }
    } else {
        rc = BLE_LL_CTRL_UNKNOWN_RSP;
   18bca:	2007      	movs	r0, #7
   18bcc:	4770      	bx	lr
        if (connsm->enc_data.enc_state == CONN_ENC_S_START_ENC_REQ_WAIT) {
   18bce:	f890 3118 	ldrb.w	r3, [r0, #280]	; 0x118
   18bd2:	2b06      	cmp	r3, #6
   18bd4:	d001      	beq.n	18bda <ble_ll_ctrl_rx_start_enc_req+0x16>
    rc = BLE_ERR_MAX;
   18bd6:	20ff      	movs	r0, #255	; 0xff
    }
    return rc;
}
   18bd8:	4770      	bx	lr
            connsm->enc_data.enc_state = CONN_ENC_S_START_ENC_RSP_WAIT;
   18bda:	2307      	movs	r3, #7
   18bdc:	f880 3118 	strb.w	r3, [r0, #280]	; 0x118
            rc = BLE_LL_CTRL_START_ENC_RSP;
   18be0:	2006      	movs	r0, #6
   18be2:	4770      	bx	lr

00018be4 <ble_ll_ctrl_rx_pause_enc_req>:
     * The spec does not say what to do here, but if we receive a pause
     * encryption request and we are not encrypted, what do we do? We
     * ignore it...
     */
    rc = BLE_ERR_MAX;
    if ((connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) &&
   18be4:	79c3      	ldrb	r3, [r0, #7]
   18be6:	2b02      	cmp	r3, #2
   18be8:	d001      	beq.n	18bee <ble_ll_ctrl_rx_pause_enc_req+0xa>
        (connsm->enc_data.enc_state == CONN_ENC_S_ENCRYPTED)) {
        rc = BLE_LL_CTRL_PAUSE_ENC_RSP;
    } else {
        rc = BLE_LL_CTRL_UNKNOWN_RSP;
   18bea:	2007      	movs	r0, #7
   18bec:	4770      	bx	lr
        (connsm->enc_data.enc_state == CONN_ENC_S_ENCRYPTED)) {
   18bee:	f890 3118 	ldrb.w	r3, [r0, #280]	; 0x118
    if ((connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) &&
   18bf2:	2b02      	cmp	r3, #2
   18bf4:	d001      	beq.n	18bfa <ble_ll_ctrl_rx_pause_enc_req+0x16>
        rc = BLE_LL_CTRL_UNKNOWN_RSP;
   18bf6:	2007      	movs	r0, #7
   18bf8:	4770      	bx	lr
        rc = BLE_LL_CTRL_PAUSE_ENC_RSP;
   18bfa:	200b      	movs	r0, #11
    }

    return rc;
}
   18bfc:	4770      	bx	lr

00018bfe <ble_ll_ctrl_rx_pause_enc_rsp>:
static uint8_t
ble_ll_ctrl_rx_pause_enc_rsp(struct ble_ll_conn_sm *connsm)
{
    int rc;

    if (connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) {
   18bfe:	79c3      	ldrb	r3, [r0, #7]
   18c00:	2b01      	cmp	r3, #1
   18c02:	d00a      	beq.n	18c1a <ble_ll_ctrl_rx_pause_enc_rsp+0x1c>
        rc = BLE_LL_CTRL_PAUSE_ENC_RSP;
    } else if (connsm->enc_data.enc_state == CONN_ENC_S_PAUSE_ENC_RSP_WAIT) {
   18c04:	f890 3118 	ldrb.w	r3, [r0, #280]	; 0x118
   18c08:	2b04      	cmp	r3, #4
   18c0a:	d001      	beq.n	18c10 <ble_ll_ctrl_rx_pause_enc_rsp+0x12>
         * From this moment encryption is paused.
         */
        rc = BLE_ERR_MAX;
        connsm->enc_data.enc_state = CONN_ENC_S_PAUSED;
    } else {
        rc = BLE_LL_CTRL_UNKNOWN_RSP;
   18c0c:	2007      	movs	r0, #7
    }

    return rc;
}
   18c0e:	4770      	bx	lr
        connsm->enc_data.enc_state = CONN_ENC_S_PAUSED;
   18c10:	2305      	movs	r3, #5
   18c12:	f880 3118 	strb.w	r3, [r0, #280]	; 0x118
        rc = BLE_ERR_MAX;
   18c16:	20ff      	movs	r0, #255	; 0xff
   18c18:	4770      	bx	lr
        rc = BLE_LL_CTRL_PAUSE_ENC_RSP;
   18c1a:	200b      	movs	r0, #11
   18c1c:	4770      	bx	lr

00018c1e <ble_ll_ctrl_proc_rsp_timer_cb>:
{
   18c1e:	b508      	push	{r3, lr}
    ble_ll_conn_timeout((struct ble_ll_conn_sm *)ble_npl_event_get_arg(ev),
   18c20:	2122      	movs	r1, #34	; 0x22
   18c22:	6880      	ldr	r0, [r0, #8]
   18c24:	f7fe fd80 	bl	17728 <ble_ll_conn_timeout>
}
   18c28:	bd08      	pop	{r3, pc}
	...

00018c2c <ble_ll_ctrl_start_rsp_timer>:
{
   18c2c:	b510      	push	{r4, lr}
   18c2e:	4603      	mov	r3, r0
    os_callout_init(&co->co, &evq->evq, (os_event_fn *)ev_cb, ev_arg);
   18c30:	f100 04bc 	add.w	r4, r0, #188	; 0xbc
   18c34:	4a05      	ldr	r2, [pc, #20]	; (18c4c <ble_ll_ctrl_start_rsp_timer+0x20>)
   18c36:	4906      	ldr	r1, [pc, #24]	; (18c50 <ble_ll_ctrl_start_rsp_timer+0x24>)
   18c38:	4620      	mov	r0, r4
   18c3a:	f7f4 f931 	bl	cea0 <os_callout_init>
    return (ble_npl_error_t)os_callout_reset(&co->co, ticks);
   18c3e:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
   18c42:	4620      	mov	r0, r4
   18c44:	f7f4 f958 	bl	cef8 <os_callout_reset>
}
   18c48:	bd10      	pop	{r4, pc}
   18c4a:	bf00      	nop
   18c4c:	00018c1f 	.word	0x00018c1f
   18c50:	20003740 	.word	0x20003740

00018c54 <ble_ll_ctrl_conn_upd_make>:
{
   18c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18c56:	4604      	mov	r4, r0
   18c58:	460e      	mov	r6, r1
    instant = connsm->event_cntr + connsm->slave_latency + 6 + 1;
   18c5a:	f8b0 504a 	ldrh.w	r5, [r0, #74]	; 0x4a
   18c5e:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
   18c62:	441d      	add	r5, r3
   18c64:	b2ad      	uxth	r5, r5
   18c66:	3507      	adds	r5, #7
   18c68:	b2ad      	uxth	r5, r5
    if (cp) {
   18c6a:	2a00      	cmp	r2, #0
   18c6c:	d066      	beq.n	18d3c <ble_ll_ctrl_conn_upd_make+0xe8>
   18c6e:	4611      	mov	r1, r2
        if (cp->offset0 != 0xFFFF) {
   18c70:	8997      	ldrh	r7, [r2, #12]
   18c72:	f64f 73ff 	movw	r3, #65535	; 0xffff
   18c76:	429f      	cmp	r7, r3
   18c78:	d05c      	beq.n	18d34 <ble_ll_ctrl_conn_upd_make+0xe0>
            new_itvl_usecs = cp->interval_max * BLE_LL_CONN_ITVL_USECS;
   18c7a:	8853      	ldrh	r3, [r2, #2]
   18c7c:	f240 42e2 	movw	r2, #1250	; 0x4e2
   18c80:	fb02 f303 	mul.w	r3, r2, r3
            old_itvl_usecs = connsm->conn_itvl * BLE_LL_CONN_ITVL_USECS;
   18c84:	f8b0 0068 	ldrh.w	r0, [r0, #104]	; 0x68
   18c88:	fb02 f200 	mul.w	r2, r2, r0
            if ((int16_t)(cp->ref_conn_event_cnt - instant) >= 0) {
   18c8c:	8948      	ldrh	r0, [r1, #10]
   18c8e:	eba0 0c05 	sub.w	ip, r0, r5
   18c92:	f41c 4f00 	tst.w	ip, #32768	; 0x8000
   18c96:	d140      	bne.n	18d1a <ble_ll_ctrl_conn_upd_make+0xc6>
                num_old_ce = cp->ref_conn_event_cnt - instant;
   18c98:	4660      	mov	r0, ip
                dt += (cp->offset0 * BLE_LL_CONN_ITVL_USECS);
   18c9a:	f240 4ce2 	movw	ip, #1250	; 0x4e2
   18c9e:	fb0c f707 	mul.w	r7, ip, r7
   18ca2:	fb00 7202 	mla	r2, r0, r2, r7
                dt = dt % new_itvl_usecs;
   18ca6:	fbb2 f0f3 	udiv	r0, r2, r3
   18caa:	fb03 2310 	mls	r3, r3, r0, r2
            req->winoffset = dt / BLE_LL_CONN_TX_WIN_USECS;
   18cae:	4a2d      	ldr	r2, [pc, #180]	; (18d64 <ble_ll_ctrl_conn_upd_make+0x110>)
   18cb0:	fba2 2303 	umull	r2, r3, r2, r3
   18cb4:	0a9b      	lsrs	r3, r3, #10
   18cb6:	f8a4 3178 	strh.w	r3, [r4, #376]	; 0x178
        req->interval = cp->interval_max;
   18cba:	884b      	ldrh	r3, [r1, #2]
   18cbc:	f8a4 317a 	strh.w	r3, [r4, #378]	; 0x17a
        req->timeout = cp->timeout;
   18cc0:	88cb      	ldrh	r3, [r1, #6]
   18cc2:	f8a4 317e 	strh.w	r3, [r4, #382]	; 0x17e
        req->latency = cp->latency;
   18cc6:	888b      	ldrh	r3, [r1, #4]
   18cc8:	f8a4 317c 	strh.w	r3, [r4, #380]	; 0x17c
        req->winsize = 1;
   18ccc:	2301      	movs	r3, #1
   18cce:	f884 3176 	strb.w	r3, [r4, #374]	; 0x176
    req->instant = instant;
   18cd2:	f8a4 5180 	strh.w	r5, [r4, #384]	; 0x180
    pyld[0] = req->winsize;
   18cd6:	f894 3176 	ldrb.w	r3, [r4, #374]	; 0x176
   18cda:	4630      	mov	r0, r6
   18cdc:	f800 3b01 	strb.w	r3, [r0], #1
    put_le16(pyld + 1, req->winoffset);
   18ce0:	f8b4 1178 	ldrh.w	r1, [r4, #376]	; 0x178
   18ce4:	f016 f822 	bl	2ed2c <put_le16>
    put_le16(pyld + 3, req->interval);
   18ce8:	f8b4 117a 	ldrh.w	r1, [r4, #378]	; 0x17a
   18cec:	1cf0      	adds	r0, r6, #3
   18cee:	f016 f81d 	bl	2ed2c <put_le16>
    put_le16(pyld + 5, req->latency);
   18cf2:	f8b4 117c 	ldrh.w	r1, [r4, #380]	; 0x17c
   18cf6:	1d70      	adds	r0, r6, #5
   18cf8:	f016 f818 	bl	2ed2c <put_le16>
    put_le16(pyld + 7, req->timeout);
   18cfc:	f8b4 117e 	ldrh.w	r1, [r4, #382]	; 0x17e
   18d00:	1df0      	adds	r0, r6, #7
   18d02:	f016 f813 	bl	2ed2c <put_le16>
    put_le16(pyld + 9, instant);
   18d06:	4629      	mov	r1, r5
   18d08:	f106 0009 	add.w	r0, r6, #9
   18d0c:	f016 f80e 	bl	2ed2c <put_le16>
    connsm->csmflags.cfbit.conn_update_sched = 1;
   18d10:	7863      	ldrb	r3, [r4, #1]
   18d12:	f043 0301 	orr.w	r3, r3, #1
   18d16:	7063      	strb	r3, [r4, #1]
}
   18d18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                num_old_ce = instant - cp->ref_conn_event_cnt;
   18d1a:	1a28      	subs	r0, r5, r0
                dt = old_itvl_usecs * num_old_ce;
   18d1c:	fb00 f202 	mul.w	r2, r0, r2
                dt -= (cp->offset0 * BLE_LL_CONN_ITVL_USECS);
   18d20:	f240 40e2 	movw	r0, #1250	; 0x4e2
   18d24:	fb00 2217 	mls	r2, r0, r7, r2
                dt = dt % new_itvl_usecs;
   18d28:	fbb2 f7f3 	udiv	r7, r2, r3
   18d2c:	fb03 2217 	mls	r2, r3, r7, r2
                dt = new_itvl_usecs - dt;
   18d30:	1a9b      	subs	r3, r3, r2
   18d32:	e7bc      	b.n	18cae <ble_ll_ctrl_conn_upd_make+0x5a>
            req->winoffset = 0;
   18d34:	2300      	movs	r3, #0
   18d36:	f8a0 3178 	strh.w	r3, [r0, #376]	; 0x178
   18d3a:	e7be      	b.n	18cba <ble_ll_ctrl_conn_upd_make+0x66>
        req->interval = hcu->conn_itvl_max;
   18d3c:	f8b0 316c 	ldrh.w	r3, [r0, #364]	; 0x16c
   18d40:	f8a0 317a 	strh.w	r3, [r0, #378]	; 0x17a
        req->timeout = hcu->supervision_timeout;
   18d44:	f8b0 3170 	ldrh.w	r3, [r0, #368]	; 0x170
   18d48:	f8a0 317e 	strh.w	r3, [r0, #382]	; 0x17e
        req->latency = hcu->conn_latency;
   18d4c:	f8b0 316e 	ldrh.w	r3, [r0, #366]	; 0x16e
   18d50:	f8a0 317c 	strh.w	r3, [r0, #380]	; 0x17c
        req->winoffset = 0;
   18d54:	2300      	movs	r3, #0
   18d56:	f8a0 3178 	strh.w	r3, [r0, #376]	; 0x178
        req->winsize = connsm->tx_win_size;
   18d5a:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
   18d5e:	f880 3176 	strb.w	r3, [r0, #374]	; 0x176
   18d62:	e7b6      	b.n	18cd2 <ble_ll_ctrl_conn_upd_make+0x7e>
   18d64:	d1b71759 	.word	0xd1b71759

00018d68 <ble_ll_ctrl_version_ind_make>:
    put_le16(dptr + 21, offset);
}

static void
ble_ll_ctrl_version_ind_make(struct ble_ll_conn_sm *connsm, uint8_t *pyld)
{
   18d68:	b510      	push	{r4, lr}
   18d6a:	460c      	mov	r4, r1
    /* Set flag to denote we have sent/received this */
    connsm->csmflags.cfbit.version_ind_sent = 1;
   18d6c:	7843      	ldrb	r3, [r0, #1]
   18d6e:	f043 0304 	orr.w	r3, r3, #4
   18d72:	7043      	strb	r3, [r0, #1]

    /* Fill out response */
    pyld[0] = BLE_HCI_VER_BCS;
   18d74:	4608      	mov	r0, r1
   18d76:	2309      	movs	r3, #9
   18d78:	f800 3b01 	strb.w	r3, [r0], #1
    put_le16(pyld + 1, MYNEWT_VAL(BLE_LL_MFRG_ID));
   18d7c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   18d80:	f015 ffd4 	bl	2ed2c <put_le16>
    put_le16(pyld + 3, BLE_LL_SUB_VERS_NR);
   18d84:	2100      	movs	r1, #0
   18d86:	1ce0      	adds	r0, r4, #3
   18d88:	f015 ffd0 	bl	2ed2c <put_le16>
}
   18d8c:	bd10      	pop	{r4, pc}

00018d8e <ble_ll_ctrl_datalen_upd_make>:
{
   18d8e:	b538      	push	{r3, r4, r5, lr}
   18d90:	4605      	mov	r5, r0
   18d92:	460c      	mov	r4, r1
    put_le16(dptr + 1, connsm->max_rx_octets);
   18d94:	7ac1      	ldrb	r1, [r0, #11]
   18d96:	1c60      	adds	r0, r4, #1
   18d98:	f015 ffc8 	bl	2ed2c <put_le16>
    put_le16(dptr + 3, connsm->max_rx_time);
   18d9c:	8a69      	ldrh	r1, [r5, #18]
   18d9e:	1ce0      	adds	r0, r4, #3
   18da0:	f015 ffc4 	bl	2ed2c <put_le16>
    put_le16(dptr + 5, connsm->max_tx_octets);
   18da4:	7aa9      	ldrb	r1, [r5, #10]
   18da6:	1d60      	adds	r0, r4, #5
   18da8:	f015 ffc0 	bl	2ed2c <put_le16>
    put_le16(dptr + 7, connsm->max_tx_time);
   18dac:	8a29      	ldrh	r1, [r5, #16]
   18dae:	1de0      	adds	r0, r4, #7
   18db0:	f015 ffbc 	bl	2ed2c <put_le16>
}
   18db4:	bd38      	pop	{r3, r4, r5, pc}

00018db6 <ble_ll_ctrl_conn_param_pdu_make>:
{
   18db6:	b570      	push	{r4, r5, r6, lr}
   18db8:	4605      	mov	r5, r0
   18dba:	460c      	mov	r4, r1
    if (req) {
   18dbc:	2a00      	cmp	r2, #0
   18dbe:	d144      	bne.n	18e4a <ble_ll_ctrl_conn_param_pdu_make+0x94>
        BLE_LL_ASSERT(hcu->handle != 0);
   18dc0:	f8b0 3168 	ldrh.w	r3, [r0, #360]	; 0x168
   18dc4:	2b00      	cmp	r3, #0
   18dc6:	d052      	beq.n	18e6e <ble_ll_ctrl_conn_param_pdu_make+0xb8>
        put_le16(dptr, hcu->conn_itvl_min);
   18dc8:	f8b0 116a 	ldrh.w	r1, [r0, #362]	; 0x16a
   18dcc:	4620      	mov	r0, r4
   18dce:	f015 ffad 	bl	2ed2c <put_le16>
        put_le16(dptr + 2, hcu->conn_itvl_max);
   18dd2:	f8b5 116c 	ldrh.w	r1, [r5, #364]	; 0x16c
   18dd6:	1ca0      	adds	r0, r4, #2
   18dd8:	f015 ffa8 	bl	2ed2c <put_le16>
        put_le16(dptr + 4, hcu->conn_latency);
   18ddc:	f8b5 116e 	ldrh.w	r1, [r5, #366]	; 0x16e
   18de0:	1d20      	adds	r0, r4, #4
   18de2:	f015 ffa3 	bl	2ed2c <put_le16>
        put_le16(dptr + 6, hcu->supervision_timeout);
   18de6:	f8b5 1170 	ldrh.w	r1, [r5, #368]	; 0x170
   18dea:	1da0      	adds	r0, r4, #6
   18dec:	f015 ff9e 	bl	2ed2c <put_le16>
    dptr[8] = 0;
   18df0:	2300      	movs	r3, #0
   18df2:	7223      	strb	r3, [r4, #8]
    put_le16(dptr + 9, connsm->event_cntr);
   18df4:	f8b5 104a 	ldrh.w	r1, [r5, #74]	; 0x4a
   18df8:	f104 0009 	add.w	r0, r4, #9
   18dfc:	f015 ff96 	bl	2ed2c <put_le16>
    put_le16(dptr + 11, offset);
   18e00:	f64f 71ff 	movw	r1, #65535	; 0xffff
   18e04:	f104 000b 	add.w	r0, r4, #11
   18e08:	f015 ff90 	bl	2ed2c <put_le16>
    put_le16(dptr + 13, offset);
   18e0c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   18e10:	f104 000d 	add.w	r0, r4, #13
   18e14:	f015 ff8a 	bl	2ed2c <put_le16>
    put_le16(dptr + 15, offset);
   18e18:	f64f 71ff 	movw	r1, #65535	; 0xffff
   18e1c:	f104 000f 	add.w	r0, r4, #15
   18e20:	f015 ff84 	bl	2ed2c <put_le16>
    put_le16(dptr + 17, offset);
   18e24:	f64f 71ff 	movw	r1, #65535	; 0xffff
   18e28:	f104 0011 	add.w	r0, r4, #17
   18e2c:	f015 ff7e 	bl	2ed2c <put_le16>
    put_le16(dptr + 19, offset);
   18e30:	f64f 71ff 	movw	r1, #65535	; 0xffff
   18e34:	f104 0013 	add.w	r0, r4, #19
   18e38:	f015 ff78 	bl	2ed2c <put_le16>
    put_le16(dptr + 21, offset);
   18e3c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   18e40:	f104 0015 	add.w	r0, r4, #21
   18e44:	f015 ff72 	bl	2ed2c <put_le16>
}
   18e48:	bd70      	pop	{r4, r5, r6, pc}
   18e4a:	4616      	mov	r6, r2
        put_le16(dptr, req->interval_min);
   18e4c:	8811      	ldrh	r1, [r2, #0]
   18e4e:	4620      	mov	r0, r4
   18e50:	f015 ff6c 	bl	2ed2c <put_le16>
        put_le16(dptr + 2, req->interval_max);
   18e54:	8871      	ldrh	r1, [r6, #2]
   18e56:	1ca0      	adds	r0, r4, #2
   18e58:	f015 ff68 	bl	2ed2c <put_le16>
        put_le16(dptr + 4, req->latency);
   18e5c:	88b1      	ldrh	r1, [r6, #4]
   18e5e:	1d20      	adds	r0, r4, #4
   18e60:	f015 ff64 	bl	2ed2c <put_le16>
        put_le16(dptr + 6, req->timeout);
   18e64:	88f1      	ldrh	r1, [r6, #6]
   18e66:	1da0      	adds	r0, r4, #6
   18e68:	f015 ff60 	bl	2ed2c <put_le16>
   18e6c:	e7c0      	b.n	18df0 <ble_ll_ctrl_conn_param_pdu_make+0x3a>
        BLE_LL_ASSERT(hcu->handle != 0);
   18e6e:	f7f3 f9bb 	bl	c1e8 <hal_debugger_connected>
   18e72:	b100      	cbz	r0, 18e76 <ble_ll_ctrl_conn_param_pdu_make+0xc0>
   18e74:	be01      	bkpt	0x0001
   18e76:	2300      	movs	r3, #0
   18e78:	461a      	mov	r2, r3
   18e7a:	4619      	mov	r1, r3
   18e7c:	4618      	mov	r0, r3
   18e7e:	f7f3 fe67 	bl	cb50 <__assert_func>
	...

00018e84 <ble_ll_ctrl_chanmap_req_make>:
 * @param connsm    Pointer to connection state machine
 * @param pyld      Pointer to payload of LL control PDU
 */
static void
ble_ll_ctrl_chanmap_req_make(struct ble_ll_conn_sm *connsm, uint8_t *pyld)
{
   18e84:	b510      	push	{r4, lr}
   18e86:	4604      	mov	r4, r0
   18e88:	4608      	mov	r0, r1
    /* Copy channel map that host desires into request */
    memcpy(pyld, g_ble_ll_conn_params.master_chan_map, BLE_LL_CONN_CHMAP_LEN);
   18e8a:	4b0e      	ldr	r3, [pc, #56]	; (18ec4 <ble_ll_ctrl_chanmap_req_make+0x40>)
   18e8c:	681a      	ldr	r2, [r3, #0]
   18e8e:	600a      	str	r2, [r1, #0]
   18e90:	791b      	ldrb	r3, [r3, #4]
   18e92:	710b      	strb	r3, [r1, #4]
    memcpy(connsm->req_chanmap, pyld, BLE_LL_CONN_CHMAP_LEN);
   18e94:	680b      	ldr	r3, [r1, #0]
   18e96:	f8c4 3025 	str.w	r3, [r4, #37]	; 0x25
   18e9a:	790b      	ldrb	r3, [r1, #4]
   18e9c:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29

    /* Place instant into request */
    connsm->chanmap_instant = connsm->event_cntr + connsm->slave_latency + 6 + 1;
   18ea0:	f8b4 104a 	ldrh.w	r1, [r4, #74]	; 0x4a
   18ea4:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
   18ea8:	4419      	add	r1, r3
   18eaa:	b289      	uxth	r1, r1
   18eac:	3107      	adds	r1, #7
   18eae:	b289      	uxth	r1, r1
   18eb0:	8561      	strh	r1, [r4, #42]	; 0x2a
    put_le16(pyld + BLE_LL_CONN_CHMAP_LEN, connsm->chanmap_instant);
   18eb2:	3005      	adds	r0, #5
   18eb4:	f015 ff3a 	bl	2ed2c <put_le16>

    /* Set scheduled flag */
    connsm->csmflags.cfbit.chanmap_update_scheduled = 1;
   18eb8:	7863      	ldrb	r3, [r4, #1]
   18eba:	f043 0310 	orr.w	r3, r3, #16
   18ebe:	7063      	strb	r3, [r4, #1]
}
   18ec0:	bd10      	pop	{r4, pc}
   18ec2:	bf00      	nop
   18ec4:	20003860 	.word	0x20003860

00018ec8 <ble_ll_ctrl_update_features>:
    ble_ll_ctrl_proc_start(connsm, BLE_LL_CTRL_PROC_DATA_LEN_UPD);
}

static void
ble_ll_ctrl_update_features(struct ble_ll_conn_sm *connsm, uint8_t *feat)
{
   18ec8:	b410      	push	{r4}
    connsm->conn_features = feat[0];
   18eca:	780b      	ldrb	r3, [r1, #0]
   18ecc:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
    memcpy(connsm->remote_features, feat + 1, 7);
   18ed0:	f851 2f01 	ldr.w	r2, [r1, #1]!
   18ed4:	6402      	str	r2, [r0, #64]	; 0x40
   18ed6:	888c      	ldrh	r4, [r1, #4]
   18ed8:	798a      	ldrb	r2, [r1, #6]
   18eda:	f8a0 4044 	strh.w	r4, [r0, #68]	; 0x44
   18ede:	f880 2046 	strb.w	r2, [r0, #70]	; 0x46

    /* If we received peer's features for the 1st time, we should try DLE */
    if (!connsm->csmflags.cfbit.rxd_features) {
   18ee2:	78c3      	ldrb	r3, [r0, #3]
   18ee4:	f013 0f08 	tst.w	r3, #8
   18ee8:	d102      	bne.n	18ef0 <ble_ll_ctrl_update_features+0x28>
            connsm->max_rx_time = BLE_LL_CONN_SUPP_TIME_MAX_CODED;
        }
#endif

        connsm->csmflags.cfbit.pending_initiate_dle = 1;
        connsm->csmflags.cfbit.rxd_features = 1;
   18eea:	f043 0328 	orr.w	r3, r3, #40	; 0x28
   18eee:	70c3      	strb	r3, [r0, #3]
    }
}
   18ef0:	bc10      	pop	{r4}
   18ef2:	4770      	bx	lr

00018ef4 <ble_ll_ctrl_rx_feature_req>:

    /*
     * Only accept slave feature requests if we are a master and feature
     * requests if we are a slave.
     */
    if (opcode ==  BLE_LL_CTRL_SLAVE_FEATURE_REQ) {
   18ef4:	2b0e      	cmp	r3, #14
   18ef6:	d004      	beq.n	18f02 <ble_ll_ctrl_rx_feature_req+0xe>
        if (connsm->conn_role != BLE_LL_CONN_ROLE_MASTER) {
            return BLE_LL_CTRL_UNKNOWN_RSP;
        }
    } else {
        /* XXX: not sure this is correct but do it anyway */
        if (connsm->conn_role != BLE_LL_CONN_ROLE_SLAVE) {
   18ef8:	79c3      	ldrb	r3, [r0, #7]
   18efa:	2b02      	cmp	r3, #2
   18efc:	d006      	beq.n	18f0c <ble_ll_ctrl_rx_feature_req+0x18>
            return BLE_LL_CTRL_UNKNOWN_RSP;
   18efe:	2007      	movs	r0, #7

    put_le64(rspbuf + 1, our_feat);
    rspbuf[1] = connsm->conn_features;

    return rsp_opcode;
}
   18f00:	4770      	bx	lr
        if (connsm->conn_role != BLE_LL_CONN_ROLE_MASTER) {
   18f02:	79c3      	ldrb	r3, [r0, #7]
   18f04:	2b01      	cmp	r3, #1
   18f06:	d001      	beq.n	18f0c <ble_ll_ctrl_rx_feature_req+0x18>
            return BLE_LL_CTRL_UNKNOWN_RSP;
   18f08:	2007      	movs	r0, #7
   18f0a:	4770      	bx	lr
{
   18f0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18f10:	4616      	mov	r6, r2
   18f12:	460d      	mov	r5, r1
   18f14:	4604      	mov	r4, r0
    our_feat = ble_ll_read_supp_features();
   18f16:	f7fb fe11 	bl	14b3c <ble_ll_read_supp_features>
   18f1a:	4607      	mov	r7, r0
   18f1c:	4688      	mov	r8, r1
    ble_ll_ctrl_update_features(connsm, dptr);
   18f1e:	4629      	mov	r1, r5
   18f20:	4620      	mov	r0, r4
   18f22:	f7ff ffd1 	bl	18ec8 <ble_ll_ctrl_update_features>
    connsm->conn_features &= our_feat;
   18f26:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
   18f2a:	403b      	ands	r3, r7
   18f2c:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
    put_le64(rspbuf + 1, our_feat);
   18f30:	463a      	mov	r2, r7
   18f32:	4643      	mov	r3, r8
   18f34:	1c70      	adds	r0, r6, #1
   18f36:	f015 ff07 	bl	2ed48 <put_le64>
    rspbuf[1] = connsm->conn_features;
   18f3a:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
   18f3e:	7073      	strb	r3, [r6, #1]
    return rsp_opcode;
   18f40:	2009      	movs	r0, #9
}
   18f42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00018f46 <ble_ll_ctrl_enc_req_make>:
{
   18f46:	b570      	push	{r4, r5, r6, lr}
   18f48:	4604      	mov	r4, r0
   18f4a:	460d      	mov	r5, r1
    put_le64(dptr, connsm->enc_data.host_rand_num);
   18f4c:	f500 7394 	add.w	r3, r0, #296	; 0x128
   18f50:	e9d3 2300 	ldrd	r2, r3, [r3]
   18f54:	4608      	mov	r0, r1
   18f56:	f015 fef7 	bl	2ed48 <put_le64>
    put_le16(dptr + 8, connsm->enc_data.enc_div);
   18f5a:	f8b4 111a 	ldrh.w	r1, [r4, #282]	; 0x11a
   18f5e:	f105 0008 	add.w	r0, r5, #8
   18f62:	f015 fee3 	bl	2ed2c <put_le16>
    ble_ll_rand_data_get(connsm->enc_data.enc_block.plain_text + 8, 8);
   18f66:	f504 76a8 	add.w	r6, r4, #336	; 0x150
   18f6a:	2108      	movs	r1, #8
   18f6c:	4630      	mov	r0, r6
   18f6e:	f001 fd91 	bl	1aa94 <ble_ll_rand_data_get>
    swap_buf(dptr + 10, connsm->enc_data.enc_block.plain_text + 8, 8);
   18f72:	2208      	movs	r2, #8
   18f74:	4631      	mov	r1, r6
   18f76:	f105 000a 	add.w	r0, r5, #10
   18f7a:	f015 ff5e 	bl	2ee3a <swap_buf>
    ble_ll_rand_data_get(connsm->enc_data.iv, 4);
   18f7e:	2104      	movs	r1, #4
   18f80:	f504 7098 	add.w	r0, r4, #304	; 0x130
   18f84:	f001 fd86 	bl	1aa94 <ble_ll_rand_data_get>
    memcpy(dptr + 18, connsm->enc_data.iv, 4);
   18f88:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
   18f8c:	f8c5 3012 	str.w	r3, [r5, #18]
}
   18f90:	bd70      	pop	{r4, r5, r6, pc}
	...

00018f94 <ble_ll_ctrl_proc_init>:
 * @param connsm
 * @param ctrl_proc
 */
static struct os_mbuf *
ble_ll_ctrl_proc_init(struct ble_ll_conn_sm *connsm, int ctrl_proc)
{
   18f94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18f98:	4606      	mov	r6, r0
   18f9a:	460d      	mov	r5, r1
    uint8_t *dptr;
    uint8_t *ctrdata;
    struct os_mbuf *om;

    /* Get an mbuf for the control pdu */
    om = os_msys_get_pkthdr(BLE_LL_CTRL_MAX_PDU_LEN, sizeof(struct ble_mbuf_hdr));
   18f9c:	2110      	movs	r1, #16
   18f9e:	201b      	movs	r0, #27
   18fa0:	f7f4 feff 	bl	dda2 <os_msys_get_pkthdr>

    if (om) {
   18fa4:	4604      	mov	r4, r0
   18fa6:	b1d8      	cbz	r0, 18fe0 <ble_ll_ctrl_proc_init+0x4c>
        /* The control data starts after the opcode (1 byte) */
        dptr = om->om_data;
   18fa8:	6807      	ldr	r7, [r0, #0]
        ctrdata = dptr + 1;
   18faa:	f107 0801 	add.w	r8, r7, #1

        switch (ctrl_proc) {
   18fae:	2d08      	cmp	r5, #8
   18fb0:	d851      	bhi.n	19056 <ble_ll_ctrl_proc_init+0xc2>
   18fb2:	e8df f005 	tbb	[pc, r5]
   18fb6:	1805      	.short	0x1805
   18fb8:	322c1e44 	.word	0x322c1e44
   18fbc:	5a37      	.short	0x5a37
   18fbe:	3e          	.byte	0x3e
   18fbf:	00          	.byte	0x00
        case BLE_LL_CTRL_PROC_CONN_UPDATE:
            opcode = BLE_LL_CTRL_CONN_UPDATE_IND;
            ble_ll_ctrl_conn_upd_make(connsm, ctrdata, NULL);
   18fc0:	2200      	movs	r2, #0
   18fc2:	4641      	mov	r1, r8
   18fc4:	4630      	mov	r0, r6
   18fc6:	f7ff fe45 	bl	18c54 <ble_ll_ctrl_conn_upd_make>
            opcode = BLE_LL_CTRL_CONN_UPDATE_IND;
   18fca:	2500      	movs	r5, #0
            BLE_LL_ASSERT(0);
            break;
        }

        /* Set llid, length and opcode */
        dptr[0] = opcode;
   18fcc:	703d      	strb	r5, [r7, #0]
        len = g_ble_ll_ctrl_pkt_lengths[opcode] + 1;
   18fce:	4b28      	ldr	r3, [pc, #160]	; (19070 <ble_ll_ctrl_proc_init+0xdc>)
   18fd0:	5d5b      	ldrb	r3, [r3, r5]
   18fd2:	3301      	adds	r3, #1

        /* Add packet to transmit queue of connection */
        ble_ll_conn_enqueue_pkt(connsm, om, BLE_LL_LLID_CTRL, len);
   18fd4:	b2db      	uxtb	r3, r3
   18fd6:	2203      	movs	r2, #3
   18fd8:	4621      	mov	r1, r4
   18fda:	4630      	mov	r0, r6
   18fdc:	f7fe fde8 	bl	17bb0 <ble_ll_conn_enqueue_pkt>
    }

    return om;
}
   18fe0:	4620      	mov	r0, r4
   18fe2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            ble_ll_ctrl_chanmap_req_make(connsm, ctrdata);
   18fe6:	4641      	mov	r1, r8
   18fe8:	4630      	mov	r0, r6
   18fea:	f7ff ff4b 	bl	18e84 <ble_ll_ctrl_chanmap_req_make>
            opcode = BLE_LL_CTRL_CHANNEL_MAP_REQ;
   18fee:	2501      	movs	r5, #1
            break;
   18ff0:	e7ec      	b.n	18fcc <ble_ll_ctrl_proc_init+0x38>
            if (connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) {
   18ff2:	79f3      	ldrb	r3, [r6, #7]
   18ff4:	2b01      	cmp	r3, #1
   18ff6:	d008      	beq.n	1900a <ble_ll_ctrl_proc_init+0x76>
                opcode = BLE_LL_CTRL_SLAVE_FEATURE_REQ;
   18ff8:	250e      	movs	r5, #14
            put_le64(ctrdata, ble_ll_read_supp_features());
   18ffa:	f7fb fd9f 	bl	14b3c <ble_ll_read_supp_features>
   18ffe:	4602      	mov	r2, r0
   19000:	460b      	mov	r3, r1
   19002:	4640      	mov	r0, r8
   19004:	f015 fea0 	bl	2ed48 <put_le64>
            break;
   19008:	e7e0      	b.n	18fcc <ble_ll_ctrl_proc_init+0x38>
                opcode = BLE_LL_CTRL_FEATURE_REQ;
   1900a:	2508      	movs	r5, #8
   1900c:	e7f5      	b.n	18ffa <ble_ll_ctrl_proc_init+0x66>
            ble_ll_ctrl_version_ind_make(connsm, ctrdata);
   1900e:	4641      	mov	r1, r8
   19010:	4630      	mov	r0, r6
   19012:	f7ff fea9 	bl	18d68 <ble_ll_ctrl_version_ind_make>
            opcode = BLE_LL_CTRL_VERSION_IND;
   19016:	250c      	movs	r5, #12
            break;
   19018:	e7d8      	b.n	18fcc <ble_ll_ctrl_proc_init+0x38>
            ctrdata[0] = connsm->disconnect_reason;
   1901a:	f896 303c 	ldrb.w	r3, [r6, #60]	; 0x3c
   1901e:	707b      	strb	r3, [r7, #1]
            opcode = BLE_LL_CTRL_TERMINATE_IND;
   19020:	2502      	movs	r5, #2
            break;
   19022:	e7d3      	b.n	18fcc <ble_ll_ctrl_proc_init+0x38>
            ble_ll_ctrl_conn_param_pdu_make(connsm, ctrdata, NULL);
   19024:	2200      	movs	r2, #0
   19026:	4641      	mov	r1, r8
   19028:	4630      	mov	r0, r6
   1902a:	f7ff fec4 	bl	18db6 <ble_ll_ctrl_conn_param_pdu_make>
            opcode = BLE_LL_CTRL_CONN_PARM_REQ;
   1902e:	250f      	movs	r5, #15
            break;
   19030:	e7cc      	b.n	18fcc <ble_ll_ctrl_proc_init+0x38>
            ble_ll_ctrl_datalen_upd_make(connsm, dptr);
   19032:	4639      	mov	r1, r7
   19034:	4630      	mov	r0, r6
   19036:	f7ff feaa 	bl	18d8e <ble_ll_ctrl_datalen_upd_make>
            opcode = BLE_LL_CTRL_LENGTH_REQ;
   1903a:	2514      	movs	r5, #20
            break;
   1903c:	e7c6      	b.n	18fcc <ble_ll_ctrl_proc_init+0x38>
            if (connsm->enc_data.enc_state == CONN_ENC_S_ENCRYPTED) {
   1903e:	f896 3118 	ldrb.w	r3, [r6, #280]	; 0x118
   19042:	2b02      	cmp	r3, #2
   19044:	d101      	bne.n	1904a <ble_ll_ctrl_proc_init+0xb6>
                opcode = BLE_LL_CTRL_PAUSE_ENC_REQ;
   19046:	250a      	movs	r5, #10
   19048:	e7c0      	b.n	18fcc <ble_ll_ctrl_proc_init+0x38>
                ble_ll_ctrl_enc_req_make(connsm, ctrdata);
   1904a:	4641      	mov	r1, r8
   1904c:	4630      	mov	r0, r6
   1904e:	f7ff ff7a 	bl	18f46 <ble_ll_ctrl_enc_req_make>
                opcode = BLE_LL_CTRL_ENC_REQ;
   19052:	2503      	movs	r5, #3
   19054:	e7ba      	b.n	18fcc <ble_ll_ctrl_proc_init+0x38>
            BLE_LL_ASSERT(0);
   19056:	f7f3 f8c7 	bl	c1e8 <hal_debugger_connected>
   1905a:	b100      	cbz	r0, 1905e <ble_ll_ctrl_proc_init+0xca>
   1905c:	be01      	bkpt	0x0001
   1905e:	2300      	movs	r3, #0
   19060:	461a      	mov	r2, r3
   19062:	4619      	mov	r1, r3
   19064:	4618      	mov	r0, r3
   19066:	f7f3 fd73 	bl	cb50 <__assert_func>
            opcode = BLE_LL_CTRL_PING_REQ;
   1906a:	2512      	movs	r5, #18
   1906c:	e7ae      	b.n	18fcc <ble_ll_ctrl_proc_init+0x38>
   1906e:	bf00      	nop
   19070:	00031dc8 	.word	0x00031dc8

00019074 <ble_ll_ctrl_rx_conn_update>:
{
   19074:	b538      	push	{r3, r4, r5, lr}
    if (connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) {
   19076:	79c3      	ldrb	r3, [r0, #7]
   19078:	2b01      	cmp	r3, #1
   1907a:	d03b      	beq.n	190f4 <ble_ll_ctrl_rx_conn_update+0x80>
   1907c:	460d      	mov	r5, r1
   1907e:	4604      	mov	r4, r0
    reqdata->winsize = dptr[0];
   19080:	4608      	mov	r0, r1
   19082:	f810 3b01 	ldrb.w	r3, [r0], #1
   19086:	f884 3176 	strb.w	r3, [r4, #374]	; 0x176
    reqdata->winoffset = get_le16(dptr + 1);
   1908a:	f015 fe70 	bl	2ed6e <get_le16>
   1908e:	f8a4 0178 	strh.w	r0, [r4, #376]	; 0x178
    reqdata->interval = get_le16(dptr + 3);
   19092:	1ce8      	adds	r0, r5, #3
   19094:	f015 fe6b 	bl	2ed6e <get_le16>
   19098:	f8a4 017a 	strh.w	r0, [r4, #378]	; 0x17a
    reqdata->latency = get_le16(dptr + 5);
   1909c:	1d68      	adds	r0, r5, #5
   1909e:	f015 fe66 	bl	2ed6e <get_le16>
   190a2:	f8a4 017c 	strh.w	r0, [r4, #380]	; 0x17c
    reqdata->timeout = get_le16(dptr + 7);
   190a6:	1de8      	adds	r0, r5, #7
   190a8:	f015 fe61 	bl	2ed6e <get_le16>
   190ac:	f8a4 017e 	strh.w	r0, [r4, #382]	; 0x17e
    reqdata->instant = get_le16(dptr + 9);
   190b0:	f105 0009 	add.w	r0, r5, #9
   190b4:	f015 fe5b 	bl	2ed6e <get_le16>
   190b8:	f8a4 0180 	strh.w	r0, [r4, #384]	; 0x180
    conn_events = (reqdata->instant - connsm->event_cntr) & 0xFFFF;
   190bc:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
   190c0:	1ac3      	subs	r3, r0, r3
   190c2:	b29b      	uxth	r3, r3
    if (conn_events >= 32767) {
   190c4:	f647 72fe 	movw	r2, #32766	; 0x7ffe
   190c8:	4293      	cmp	r3, r2
   190ca:	d80d      	bhi.n	190e8 <ble_ll_ctrl_rx_conn_update+0x74>
        connsm->csmflags.cfbit.conn_update_sched = 1;
   190cc:	7862      	ldrb	r2, [r4, #1]
   190ce:	f042 0201 	orr.w	r2, r2, #1
   190d2:	7062      	strb	r2, [r4, #1]
        if (conn_events == 0) {
   190d4:	b983      	cbnz	r3, 190f8 <ble_ll_ctrl_rx_conn_update+0x84>
            reqdata->winoffset = 0;
   190d6:	f8a4 3178 	strh.w	r3, [r4, #376]	; 0x178
            reqdata->winsize = 0;
   190da:	f884 3176 	strb.w	r3, [r4, #374]	; 0x176
            reqdata->instant += 1;
   190de:	3001      	adds	r0, #1
   190e0:	f8a4 0180 	strh.w	r0, [r4, #384]	; 0x180
    return rsp_opcode;
   190e4:	20ff      	movs	r0, #255	; 0xff
   190e6:	e006      	b.n	190f6 <ble_ll_ctrl_rx_conn_update+0x82>
        ble_ll_conn_timeout(connsm, BLE_ERR_INSTANT_PASSED);
   190e8:	2128      	movs	r1, #40	; 0x28
   190ea:	4620      	mov	r0, r4
   190ec:	f7fe fb1c 	bl	17728 <ble_ll_conn_timeout>
    return rsp_opcode;
   190f0:	20ff      	movs	r0, #255	; 0xff
   190f2:	e000      	b.n	190f6 <ble_ll_ctrl_rx_conn_update+0x82>
        return BLE_LL_CTRL_UNKNOWN_RSP;
   190f4:	2007      	movs	r0, #7
}
   190f6:	bd38      	pop	{r3, r4, r5, pc}
    return rsp_opcode;
   190f8:	20ff      	movs	r0, #255	; 0xff
   190fa:	e7fc      	b.n	190f6 <ble_ll_ctrl_rx_conn_update+0x82>

000190fc <ble_ll_ctrl_rx_chanmap_req>:
{
   190fc:	b538      	push	{r3, r4, r5, lr}
    if (connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) {
   190fe:	79c3      	ldrb	r3, [r0, #7]
   19100:	2b01      	cmp	r3, #1
   19102:	d01f      	beq.n	19144 <ble_ll_ctrl_rx_chanmap_req+0x48>
   19104:	460d      	mov	r5, r1
   19106:	4604      	mov	r4, r0
    instant = get_le16(dptr + BLE_LL_CONN_CHMAP_LEN);
   19108:	1d48      	adds	r0, r1, #5
   1910a:	f015 fe30 	bl	2ed6e <get_le16>
    conn_events = (instant - connsm->event_cntr) & 0xFFFF;
   1910e:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
   19112:	1ac3      	subs	r3, r0, r3
   19114:	b29b      	uxth	r3, r3
    if (conn_events >= 32767) {
   19116:	f647 72fe 	movw	r2, #32766	; 0x7ffe
   1911a:	4293      	cmp	r3, r2
   1911c:	d80c      	bhi.n	19138 <ble_ll_ctrl_rx_chanmap_req+0x3c>
        connsm->chanmap_instant = instant;
   1911e:	8560      	strh	r0, [r4, #42]	; 0x2a
        memcpy(connsm->req_chanmap, dptr, BLE_LL_CONN_CHMAP_LEN);
   19120:	682b      	ldr	r3, [r5, #0]
   19122:	f8c4 3025 	str.w	r3, [r4, #37]	; 0x25
   19126:	792b      	ldrb	r3, [r5, #4]
   19128:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
        connsm->csmflags.cfbit.chanmap_update_scheduled = 1;
   1912c:	7863      	ldrb	r3, [r4, #1]
   1912e:	f043 0310 	orr.w	r3, r3, #16
   19132:	7063      	strb	r3, [r4, #1]
    return BLE_ERR_MAX;
   19134:	20ff      	movs	r0, #255	; 0xff
   19136:	e006      	b.n	19146 <ble_ll_ctrl_rx_chanmap_req+0x4a>
        ble_ll_conn_timeout(connsm, BLE_ERR_INSTANT_PASSED);
   19138:	2128      	movs	r1, #40	; 0x28
   1913a:	4620      	mov	r0, r4
   1913c:	f7fe faf4 	bl	17728 <ble_ll_conn_timeout>
    return BLE_ERR_MAX;
   19140:	20ff      	movs	r0, #255	; 0xff
   19142:	e000      	b.n	19146 <ble_ll_ctrl_rx_chanmap_req+0x4a>
        return BLE_LL_CTRL_UNKNOWN_RSP;
   19144:	2007      	movs	r0, #7
}
   19146:	bd38      	pop	{r3, r4, r5, pc}

00019148 <ble_ll_ctrl_len_proc>:
{
   19148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1914c:	4680      	mov	r8, r0
   1914e:	460c      	mov	r4, r1
    ctrl_req.max_rx_bytes = get_le16(dptr);
   19150:	4608      	mov	r0, r1
   19152:	f015 fe0c 	bl	2ed6e <get_le16>
   19156:	4605      	mov	r5, r0
    ctrl_req.max_rx_time = get_le16(dptr + 2);
   19158:	1ca0      	adds	r0, r4, #2
   1915a:	f015 fe08 	bl	2ed6e <get_le16>
   1915e:	4606      	mov	r6, r0
    ctrl_req.max_tx_bytes = get_le16(dptr + 4);
   19160:	1d20      	adds	r0, r4, #4
   19162:	f015 fe04 	bl	2ed6e <get_le16>
   19166:	4607      	mov	r7, r0
    ctrl_req.max_tx_time = get_le16(dptr + 6);
   19168:	1da0      	adds	r0, r4, #6
   1916a:	f015 fe00 	bl	2ed6e <get_le16>
    if ((ctrl_req.max_rx_bytes < BLE_LL_CONN_SUPP_BYTES_MIN) ||
   1916e:	2d1a      	cmp	r5, #26
   19170:	d916      	bls.n	191a0 <ble_ll_ctrl_len_proc+0x58>
   19172:	f5b6 7fa4 	cmp.w	r6, #328	; 0x148
   19176:	d316      	bcc.n	191a6 <ble_ll_ctrl_len_proc+0x5e>
        (ctrl_req.max_rx_time < BLE_LL_CONN_SUPP_TIME_MIN) ||
   19178:	2f1a      	cmp	r7, #26
   1917a:	d916      	bls.n	191aa <ble_ll_ctrl_len_proc+0x62>
        (ctrl_req.max_tx_bytes < BLE_LL_CONN_SUPP_BYTES_MIN) ||
   1917c:	f5b0 7fa4 	cmp.w	r0, #328	; 0x148
   19180:	d201      	bcs.n	19186 <ble_ll_ctrl_len_proc+0x3e>
        rc = 1;
   19182:	2001      	movs	r0, #1
    return rc;
   19184:	e00d      	b.n	191a2 <ble_ll_ctrl_len_proc+0x5a>
        connsm->rem_max_rx_time = ctrl_req.max_rx_time;
   19186:	f8a8 6016 	strh.w	r6, [r8, #22]
        connsm->rem_max_tx_time = ctrl_req.max_tx_time;
   1918a:	f8a8 0014 	strh.w	r0, [r8, #20]
        connsm->rem_max_rx_octets = ctrl_req.max_rx_bytes;
   1918e:	f888 500d 	strb.w	r5, [r8, #13]
        connsm->rem_max_tx_octets = ctrl_req.max_tx_bytes;
   19192:	f888 700c 	strb.w	r7, [r8, #12]
        ble_ll_conn_update_eff_data_len(connsm);
   19196:	4640      	mov	r0, r8
   19198:	f7fd ff1e 	bl	16fd8 <ble_ll_conn_update_eff_data_len>
        rc = 0;
   1919c:	2000      	movs	r0, #0
   1919e:	e000      	b.n	191a2 <ble_ll_ctrl_len_proc+0x5a>
        rc = 1;
   191a0:	2001      	movs	r0, #1
}
   191a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = 1;
   191a6:	2001      	movs	r0, #1
   191a8:	e7fb      	b.n	191a2 <ble_ll_ctrl_len_proc+0x5a>
   191aa:	2001      	movs	r0, #1
   191ac:	e7f9      	b.n	191a2 <ble_ll_ctrl_len_proc+0x5a>

000191ae <ble_ll_ctrl_rx_enc_req>:
{
   191ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (connsm->conn_role != BLE_LL_CONN_ROLE_SLAVE) {
   191b0:	79c3      	ldrb	r3, [r0, #7]
   191b2:	2b02      	cmp	r3, #2
   191b4:	d001      	beq.n	191ba <ble_ll_ctrl_rx_enc_req+0xc>
        return BLE_LL_CTRL_UNKNOWN_RSP;
   191b6:	2007      	movs	r0, #7
}
   191b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   191ba:	4616      	mov	r6, r2
   191bc:	460d      	mov	r5, r1
   191be:	4604      	mov	r4, r0
    connsm->enc_data.enc_state = CONN_ENC_S_LTK_REQ_WAIT;
   191c0:	2708      	movs	r7, #8
   191c2:	f880 7118 	strb.w	r7, [r0, #280]	; 0x118
    connsm->enc_data.rx_pkt_cntr = 0;
   191c6:	2300      	movs	r3, #0
   191c8:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
    connsm->enc_data.tx_pkt_cntr = 0;
   191cc:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
    connsm->enc_data.tx_encrypted = 0;
   191d0:	f880 3119 	strb.w	r3, [r0, #281]	; 0x119
    connsm->enc_data.host_rand_num = get_le64(dptr);
   191d4:	4608      	mov	r0, r1
   191d6:	f015 fdda 	bl	2ed8e <get_le64>
   191da:	f504 7394 	add.w	r3, r4, #296	; 0x128
   191de:	e9c3 0100 	strd	r0, r1, [r3]
    connsm->enc_data.enc_div = get_le16(dptr + 8);
   191e2:	19e8      	adds	r0, r5, r7
   191e4:	f015 fdc3 	bl	2ed6e <get_le16>
   191e8:	f8a4 011a 	strh.w	r0, [r4, #282]	; 0x11a
    swap_buf(connsm->enc_data.enc_block.plain_text + 8, dptr + 10, 8);
   191ec:	463a      	mov	r2, r7
   191ee:	f105 010a 	add.w	r1, r5, #10
   191f2:	f504 70a8 	add.w	r0, r4, #336	; 0x150
   191f6:	f015 fe20 	bl	2ee3a <swap_buf>
    memcpy(connsm->enc_data.iv, dptr + 18, 4);
   191fa:	f8d5 3012 	ldr.w	r3, [r5, #18]
   191fe:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
    ble_ll_rand_data_get(connsm->enc_data.enc_block.plain_text, 8);
   19202:	f504 75a4 	add.w	r5, r4, #328	; 0x148
   19206:	4639      	mov	r1, r7
   19208:	4628      	mov	r0, r5
   1920a:	f001 fc43 	bl	1aa94 <ble_ll_rand_data_get>
    swap_buf(rspdata, connsm->enc_data.enc_block.plain_text, 8);
   1920e:	463a      	mov	r2, r7
   19210:	4629      	mov	r1, r5
   19212:	4630      	mov	r0, r6
   19214:	f015 fe11 	bl	2ee3a <swap_buf>
    ble_ll_rand_data_get(connsm->enc_data.iv + 4, 4);
   19218:	2104      	movs	r1, #4
   1921a:	f504 709a 	add.w	r0, r4, #308	; 0x134
   1921e:	f001 fc39 	bl	1aa94 <ble_ll_rand_data_get>
    memcpy(rspdata + 8, connsm->enc_data.iv + 4, 4);
   19222:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
   19226:	60b3      	str	r3, [r6, #8]
    return BLE_LL_CTRL_ENC_RSP;
   19228:	2004      	movs	r0, #4
   1922a:	e7c5      	b.n	191b8 <ble_ll_ctrl_rx_enc_req+0xa>

0001922c <ble_ll_calc_session_key>:
{
   1922c:	b570      	push	{r4, r5, r6, lr}
   1922e:	4605      	mov	r5, r0
        if (!ble_hw_encrypt_block(&connsm->enc_data.enc_block)) {
   19230:	f505 709c 	add.w	r0, r5, #312	; 0x138
   19234:	f004 f98e 	bl	1d554 <ble_hw_encrypt_block>
   19238:	4606      	mov	r6, r0
   1923a:	2800      	cmp	r0, #0
   1923c:	d1f8      	bne.n	19230 <ble_ll_calc_session_key+0x4>
    console_printf("Calculating Session Key for handle=%u",
   1923e:	88a9      	ldrh	r1, [r5, #4]
   19240:	481e      	ldr	r0, [pc, #120]	; (192bc <ble_ll_calc_session_key+0x90>)
   19242:	f7f7 f999 	bl	10578 <console_printf>
    console_printf("\nLTK:");
   19246:	481e      	ldr	r0, [pc, #120]	; (192c0 <ble_ll_calc_session_key+0x94>)
   19248:	f7f7 f996 	bl	10578 <console_printf>
    for (cnt = 0; cnt < 16; ++cnt) {
   1924c:	4634      	mov	r4, r6
   1924e:	e006      	b.n	1925e <ble_ll_calc_session_key+0x32>
        console_printf("%02x", connsm->enc_data.enc_block.key[cnt]);
   19250:	192b      	adds	r3, r5, r4
   19252:	f893 1138 	ldrb.w	r1, [r3, #312]	; 0x138
   19256:	481b      	ldr	r0, [pc, #108]	; (192c4 <ble_ll_calc_session_key+0x98>)
   19258:	f7f7 f98e 	bl	10578 <console_printf>
    for (cnt = 0; cnt < 16; ++cnt) {
   1925c:	3401      	adds	r4, #1
   1925e:	2c0f      	cmp	r4, #15
   19260:	ddf6      	ble.n	19250 <ble_ll_calc_session_key+0x24>
    console_printf("\nSKD:");
   19262:	4819      	ldr	r0, [pc, #100]	; (192c8 <ble_ll_calc_session_key+0x9c>)
   19264:	f7f7 f988 	bl	10578 <console_printf>
    for (cnt = 0; cnt < 16; ++cnt) {
   19268:	4634      	mov	r4, r6
   1926a:	e006      	b.n	1927a <ble_ll_calc_session_key+0x4e>
        console_printf("%02x", connsm->enc_data.enc_block.plain_text[cnt]);
   1926c:	192b      	adds	r3, r5, r4
   1926e:	f893 1148 	ldrb.w	r1, [r3, #328]	; 0x148
   19272:	4814      	ldr	r0, [pc, #80]	; (192c4 <ble_ll_calc_session_key+0x98>)
   19274:	f7f7 f980 	bl	10578 <console_printf>
    for (cnt = 0; cnt < 16; ++cnt) {
   19278:	3401      	adds	r4, #1
   1927a:	2c0f      	cmp	r4, #15
   1927c:	ddf6      	ble.n	1926c <ble_ll_calc_session_key+0x40>
    console_printf("\nSession Key:");
   1927e:	4813      	ldr	r0, [pc, #76]	; (192cc <ble_ll_calc_session_key+0xa0>)
   19280:	f7f7 f97a 	bl	10578 <console_printf>
    for (cnt = 0; cnt < 16; ++cnt) {
   19284:	4634      	mov	r4, r6
   19286:	e006      	b.n	19296 <ble_ll_calc_session_key+0x6a>
        console_printf("%02x", connsm->enc_data.enc_block.cipher_text[cnt]);
   19288:	192b      	adds	r3, r5, r4
   1928a:	f893 1158 	ldrb.w	r1, [r3, #344]	; 0x158
   1928e:	480d      	ldr	r0, [pc, #52]	; (192c4 <ble_ll_calc_session_key+0x98>)
   19290:	f7f7 f972 	bl	10578 <console_printf>
    for (cnt = 0; cnt < 16; ++cnt) {
   19294:	3401      	adds	r4, #1
   19296:	2c0f      	cmp	r4, #15
   19298:	ddf6      	ble.n	19288 <ble_ll_calc_session_key+0x5c>
    console_printf("\nIV:");
   1929a:	480d      	ldr	r0, [pc, #52]	; (192d0 <ble_ll_calc_session_key+0xa4>)
   1929c:	f7f7 f96c 	bl	10578 <console_printf>
    for (cnt = 0; cnt < 8; ++ cnt) {
   192a0:	e006      	b.n	192b0 <ble_ll_calc_session_key+0x84>
        console_printf("%02x", connsm->enc_data.iv[cnt]);
   192a2:	19ab      	adds	r3, r5, r6
   192a4:	f893 1130 	ldrb.w	r1, [r3, #304]	; 0x130
   192a8:	4806      	ldr	r0, [pc, #24]	; (192c4 <ble_ll_calc_session_key+0x98>)
   192aa:	f7f7 f965 	bl	10578 <console_printf>
    for (cnt = 0; cnt < 8; ++ cnt) {
   192ae:	3601      	adds	r6, #1
   192b0:	2e07      	cmp	r6, #7
   192b2:	ddf6      	ble.n	192a2 <ble_ll_calc_session_key+0x76>
    console_printf("\n");
   192b4:	4807      	ldr	r0, [pc, #28]	; (192d4 <ble_ll_calc_session_key+0xa8>)
   192b6:	f7f7 f95f 	bl	10578 <console_printf>
}
   192ba:	bd70      	pop	{r4, r5, r6, pc}
   192bc:	00031d78 	.word	0x00031d78
   192c0:	00031da0 	.word	0x00031da0
   192c4:	00032718 	.word	0x00032718
   192c8:	00031da8 	.word	0x00031da8
   192cc:	00031db0 	.word	0x00031db0
   192d0:	00031dc0 	.word	0x00031dc0
   192d4:	000324e4 	.word	0x000324e4

000192d8 <ble_ll_ctrl_rx_enc_rsp>:
{
   192d8:	b538      	push	{r3, r4, r5, lr}
    if (connsm->cur_ctrl_proc == BLE_LL_CTRL_PROC_ENCRYPT) {
   192da:	f890 303b 	ldrb.w	r3, [r0, #59]	; 0x3b
   192de:	2b02      	cmp	r3, #2
   192e0:	d000      	beq.n	192e4 <ble_ll_ctrl_rx_enc_rsp+0xc>
}
   192e2:	bd38      	pop	{r3, r4, r5, pc}
   192e4:	460d      	mov	r5, r1
   192e6:	4604      	mov	r4, r0
        connsm->enc_data.rx_pkt_cntr = 0;
   192e8:	2300      	movs	r3, #0
   192ea:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
        connsm->enc_data.tx_pkt_cntr = 0;
   192ee:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
        connsm->enc_data.tx_encrypted = 0;
   192f2:	f880 3119 	strb.w	r3, [r0, #281]	; 0x119
        swap_buf(connsm->enc_data.enc_block.plain_text, dptr, 8);
   192f6:	2208      	movs	r2, #8
   192f8:	f500 70a4 	add.w	r0, r0, #328	; 0x148
   192fc:	f015 fd9d 	bl	2ee3a <swap_buf>
        memcpy(connsm->enc_data.iv + 4, dptr + 8, 4);
   19300:	68ab      	ldr	r3, [r5, #8]
   19302:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
        ble_ll_calc_session_key(connsm);
   19306:	4620      	mov	r0, r4
   19308:	f7ff ff90 	bl	1922c <ble_ll_calc_session_key>
        connsm->enc_data.enc_state = CONN_ENC_S_START_ENC_REQ_WAIT;
   1930c:	2306      	movs	r3, #6
   1930e:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
}
   19312:	e7e6      	b.n	192e2 <ble_ll_ctrl_rx_enc_rsp+0xa>

00019314 <ble_ll_ctrl_enc_allowed_pdu_rx>:
{
   19314:	b508      	push	{r3, lr}
    llid = rxpdu->om_data[0] & BLE_LL_DATA_HDR_LLID_MASK;
   19316:	6803      	ldr	r3, [r0, #0]
   19318:	7818      	ldrb	r0, [r3, #0]
   1931a:	f000 0003 	and.w	r0, r0, #3
    len = rxpdu->om_data[1];
   1931e:	7859      	ldrb	r1, [r3, #1]
    if (llid == BLE_LL_LLID_CTRL) {
   19320:	2803      	cmp	r0, #3
   19322:	d003      	beq.n	1932c <ble_ll_ctrl_enc_allowed_pdu_rx+0x18>
        opcode = 0;
   19324:	2200      	movs	r2, #0
    return ble_ll_ctrl_enc_allowed_pdu(llid, len, opcode);
   19326:	f7ff fc31 	bl	18b8c <ble_ll_ctrl_enc_allowed_pdu>
}
   1932a:	bd08      	pop	{r3, pc}
        opcode = rxpdu->om_data[2];
   1932c:	789a      	ldrb	r2, [r3, #2]
   1932e:	e7fa      	b.n	19326 <ble_ll_ctrl_enc_allowed_pdu_rx+0x12>

00019330 <ble_ll_ctrl_enc_allowed_pdu_tx>:
{
   19330:	b508      	push	{r3, lr}
    llid = ble_hdr->txinfo.hdr_byte & BLE_LL_DATA_HDR_LLID_MASK;
   19332:	7ac3      	ldrb	r3, [r0, #11]
   19334:	f003 0303 	and.w	r3, r3, #3
    len = ble_hdr->txinfo.pyld_len;
   19338:	7a81      	ldrb	r1, [r0, #10]
    if (llid == BLE_LL_LLID_CTRL) {
   1933a:	2b03      	cmp	r3, #3
   1933c:	d004      	beq.n	19348 <ble_ll_ctrl_enc_allowed_pdu_tx+0x18>
        opcode = 0;
   1933e:	2200      	movs	r2, #0
    return ble_ll_ctrl_enc_allowed_pdu(llid, len, opcode);
   19340:	4618      	mov	r0, r3
   19342:	f7ff fc23 	bl	18b8c <ble_ll_ctrl_enc_allowed_pdu>
}
   19346:	bd08      	pop	{r3, pc}
        opcode = m->om_data[0];
   19348:	f850 2c10 	ldr.w	r2, [r0, #-16]
   1934c:	7812      	ldrb	r2, [r2, #0]
   1934e:	e7f7      	b.n	19340 <ble_ll_ctrl_enc_allowed_pdu_tx+0x10>

00019350 <ble_ll_ctrl_is_start_enc_rsp>:
    llid = ble_hdr->txinfo.hdr_byte & BLE_LL_DATA_HDR_LLID_MASK;
   19350:	7ec3      	ldrb	r3, [r0, #27]
   19352:	f003 0303 	and.w	r3, r3, #3
    if (llid == BLE_LL_LLID_CTRL) {
   19356:	2b03      	cmp	r3, #3
   19358:	d001      	beq.n	1935e <ble_ll_ctrl_is_start_enc_rsp+0xe>
    is_start_enc_rsp = 0;
   1935a:	2000      	movs	r0, #0
   1935c:	4770      	bx	lr
        opcode = txpdu->om_data[0];
   1935e:	6803      	ldr	r3, [r0, #0]
   19360:	781b      	ldrb	r3, [r3, #0]
        if (opcode == BLE_LL_CTRL_START_ENC_RSP) {
   19362:	2b06      	cmp	r3, #6
   19364:	d001      	beq.n	1936a <ble_ll_ctrl_is_start_enc_rsp+0x1a>
    is_start_enc_rsp = 0;
   19366:	2000      	movs	r0, #0
   19368:	4770      	bx	lr
            is_start_enc_rsp = 1;
   1936a:	2001      	movs	r0, #1
}
   1936c:	4770      	bx	lr

0001936e <ble_ll_ctrl_start_enc_send>:
{
   1936e:	b510      	push	{r4, lr}
   19370:	4604      	mov	r4, r0
    om = os_msys_get_pkthdr(BLE_LL_CTRL_MAX_PDU_LEN,
   19372:	2110      	movs	r1, #16
   19374:	201b      	movs	r0, #27
   19376:	f7f4 fd14 	bl	dda2 <os_msys_get_pkthdr>
    if (om) {
   1937a:	b1b0      	cbz	r0, 193aa <ble_ll_ctrl_start_enc_send+0x3c>
   1937c:	4601      	mov	r1, r0
        om->om_data[0] = BLE_LL_CTRL_START_ENC_REQ;
   1937e:	6803      	ldr	r3, [r0, #0]
   19380:	2205      	movs	r2, #5
   19382:	701a      	strb	r2, [r3, #0]
        ble_ll_conn_enqueue_pkt(connsm, om, BLE_LL_LLID_CTRL, 1);
   19384:	2301      	movs	r3, #1
   19386:	2203      	movs	r2, #3
   19388:	4620      	mov	r0, r4
   1938a:	f7fe fc11 	bl	17bb0 <ble_ll_conn_enqueue_pkt>
        if (connsm->cur_ctrl_proc == BLE_LL_CTRL_PROC_IDLE) {
   1938e:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
   19392:	2bff      	cmp	r3, #255	; 0xff
   19394:	d001      	beq.n	1939a <ble_ll_ctrl_start_enc_send+0x2c>
        rc = 0;
   19396:	2000      	movs	r0, #0
}
   19398:	bd10      	pop	{r4, pc}
            connsm->cur_ctrl_proc = BLE_LL_CTRL_PROC_ENCRYPT;
   1939a:	2302      	movs	r3, #2
   1939c:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
            ble_ll_ctrl_start_rsp_timer(connsm);
   193a0:	4620      	mov	r0, r4
   193a2:	f7ff fc43 	bl	18c2c <ble_ll_ctrl_start_rsp_timer>
        rc = 0;
   193a6:	2000      	movs	r0, #0
   193a8:	e7f6      	b.n	19398 <ble_ll_ctrl_start_enc_send+0x2a>
        rc = -1;
   193aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   193ae:	e7f3      	b.n	19398 <ble_ll_ctrl_start_enc_send+0x2a>

000193b0 <ble_ll_ctrl_conn_param_reply>:
{
   193b0:	b508      	push	{r3, lr}
    if (connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) {
   193b2:	79c3      	ldrb	r3, [r0, #7]
   193b4:	2b02      	cmp	r3, #2
   193b6:	d004      	beq.n	193c2 <ble_ll_ctrl_conn_param_reply+0x12>
        ble_ll_ctrl_conn_upd_make(connsm, rsp + 1, req);
   193b8:	3101      	adds	r1, #1
   193ba:	f7ff fc4b 	bl	18c54 <ble_ll_ctrl_conn_upd_make>
        rsp_opcode = BLE_LL_CTRL_CONN_UPDATE_IND;
   193be:	2000      	movs	r0, #0
}
   193c0:	bd08      	pop	{r3, pc}
        ble_ll_ctrl_conn_param_pdu_make(connsm, rsp + 1, req);
   193c2:	3101      	adds	r1, #1
   193c4:	f7ff fcf7 	bl	18db6 <ble_ll_ctrl_conn_param_pdu_make>
        rsp_opcode = BLE_LL_CTRL_CONN_PARM_RSP;
   193c8:	2010      	movs	r0, #16
   193ca:	e7f9      	b.n	193c0 <ble_ll_ctrl_conn_param_reply+0x10>

000193cc <ble_ll_ctrl_conn_param_pdu_proc>:
{
   193cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   193d0:	4604      	mov	r4, r0
   193d2:	460d      	mov	r5, r1
   193d4:	4617      	mov	r7, r2
   193d6:	461e      	mov	r6, r3
    req = &connsm->conn_cp;
   193d8:	f500 78c1 	add.w	r8, r0, #386	; 0x182
    req->interval_min = get_le16(dptr);
   193dc:	4608      	mov	r0, r1
   193de:	f015 fcc6 	bl	2ed6e <get_le16>
   193e2:	f8a4 0182 	strh.w	r0, [r4, #386]	; 0x182
    req->interval_max = get_le16(dptr + 2);
   193e6:	1ca8      	adds	r0, r5, #2
   193e8:	f015 fcc1 	bl	2ed6e <get_le16>
   193ec:	f8a4 0184 	strh.w	r0, [r4, #388]	; 0x184
    req->latency = get_le16(dptr + 4);
   193f0:	1d28      	adds	r0, r5, #4
   193f2:	f015 fcbc 	bl	2ed6e <get_le16>
   193f6:	f8a4 0186 	strh.w	r0, [r4, #390]	; 0x186
    req->timeout = get_le16(dptr + 6);
   193fa:	1da8      	adds	r0, r5, #6
   193fc:	f015 fcb7 	bl	2ed6e <get_le16>
   19400:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188
    req->pref_periodicity = dptr[8];
   19404:	7a2b      	ldrb	r3, [r5, #8]
   19406:	f884 318a 	strb.w	r3, [r4, #394]	; 0x18a
    req->ref_conn_event_cnt  = get_le16(dptr + 9);
   1940a:	f105 0009 	add.w	r0, r5, #9
   1940e:	f015 fcae 	bl	2ed6e <get_le16>
   19412:	f8a4 018c 	strh.w	r0, [r4, #396]	; 0x18c
    req->offset0 = get_le16(dptr + 11);
   19416:	f105 000b 	add.w	r0, r5, #11
   1941a:	f015 fca8 	bl	2ed6e <get_le16>
   1941e:	f8a4 018e 	strh.w	r0, [r4, #398]	; 0x18e
    req->offset1 = get_le16(dptr + 13);
   19422:	f105 000d 	add.w	r0, r5, #13
   19426:	f015 fca2 	bl	2ed6e <get_le16>
   1942a:	f8a4 0190 	strh.w	r0, [r4, #400]	; 0x190
    req->offset2 = get_le16(dptr + 15);
   1942e:	f105 000f 	add.w	r0, r5, #15
   19432:	f015 fc9c 	bl	2ed6e <get_le16>
   19436:	f8a4 0192 	strh.w	r0, [r4, #402]	; 0x192
    req->offset3 = get_le16(dptr + 17);
   1943a:	f105 0011 	add.w	r0, r5, #17
   1943e:	f015 fc96 	bl	2ed6e <get_le16>
   19442:	f8a4 0194 	strh.w	r0, [r4, #404]	; 0x194
    req->offset4 = get_le16(dptr + 19);
   19446:	f105 0013 	add.w	r0, r5, #19
   1944a:	f015 fc90 	bl	2ed6e <get_le16>
   1944e:	f8a4 0196 	strh.w	r0, [r4, #406]	; 0x196
    req->offset5 = get_le16(dptr + 21);
   19452:	f105 0015 	add.w	r0, r5, #21
   19456:	f015 fc8a 	bl	2ed6e <get_le16>
   1945a:	f8a4 0198 	strh.w	r0, [r4, #408]	; 0x198
    rc = ble_ll_conn_hci_chk_conn_params(req->interval_min,
   1945e:	f8b4 3188 	ldrh.w	r3, [r4, #392]	; 0x188
   19462:	f8b4 2186 	ldrh.w	r2, [r4, #390]	; 0x186
   19466:	f8b4 1184 	ldrh.w	r1, [r4, #388]	; 0x184
   1946a:	f8b4 0182 	ldrh.w	r0, [r4, #386]	; 0x182
   1946e:	f7fe fdfb 	bl	18068 <ble_ll_conn_hci_chk_conn_params>
    if (rc) {
   19472:	2800      	cmp	r0, #0
   19474:	d156      	bne.n	19524 <ble_ll_ctrl_conn_param_pdu_proc+0x158>
    if (opcode == BLE_LL_CTRL_CONN_PARM_REQ) {
   19476:	2e0f      	cmp	r6, #15
   19478:	d00b      	beq.n	19492 <ble_ll_ctrl_conn_param_pdu_proc+0xc6>
    if ((connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) ||
   1947a:	79e3      	ldrb	r3, [r4, #7]
   1947c:	2b02      	cmp	r3, #2
   1947e:	d024      	beq.n	194ca <ble_ll_ctrl_conn_param_pdu_proc+0xfe>
   19480:	2e10      	cmp	r6, #16
   19482:	d022      	beq.n	194ca <ble_ll_ctrl_conn_param_pdu_proc+0xfe>
        if (!ble_ll_hci_is_le_event_enabled(BLE_HCI_LE_SUBEV_REM_CONN_PARM_REQ)){
   19484:	2006      	movs	r0, #6
   19486:	f001 f8e3 	bl	1a650 <ble_ll_hci_is_le_event_enabled>
   1948a:	2800      	cmp	r0, #0
   1948c:	d13e      	bne.n	1950c <ble_ll_ctrl_conn_param_pdu_proc+0x140>
            ble_err = BLE_ERR_UNSUPP_REM_FEATURE;
   1948e:	231a      	movs	r3, #26
   19490:	e049      	b.n	19526 <ble_ll_ctrl_conn_param_pdu_proc+0x15a>
        if ((connsm->conn_itvl >= req->interval_min) &&
   19492:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
   19496:	f8b4 2182 	ldrh.w	r2, [r4, #386]	; 0x182
   1949a:	4293      	cmp	r3, r2
   1949c:	d3ed      	bcc.n	1947a <ble_ll_ctrl_conn_param_pdu_proc+0xae>
            (connsm->conn_itvl <= req->interval_max) &&
   1949e:	f8b4 2184 	ldrh.w	r2, [r4, #388]	; 0x184
        if ((connsm->conn_itvl >= req->interval_min) &&
   194a2:	4293      	cmp	r3, r2
   194a4:	d8e9      	bhi.n	1947a <ble_ll_ctrl_conn_param_pdu_proc+0xae>
            (connsm->supervision_tmo == req->timeout) &&
   194a6:	f8b4 206c 	ldrh.w	r2, [r4, #108]	; 0x6c
   194aa:	f8b4 3188 	ldrh.w	r3, [r4, #392]	; 0x188
            (connsm->conn_itvl <= req->interval_max) &&
   194ae:	429a      	cmp	r2, r3
   194b0:	d1e3      	bne.n	1947a <ble_ll_ctrl_conn_param_pdu_proc+0xae>
            (connsm->slave_latency == req->latency)) {
   194b2:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
   194b6:	f8b4 3186 	ldrh.w	r3, [r4, #390]	; 0x186
            (connsm->supervision_tmo == req->timeout) &&
   194ba:	429a      	cmp	r2, r3
   194bc:	d1dd      	bne.n	1947a <ble_ll_ctrl_conn_param_pdu_proc+0xae>
        rsp_opcode = ble_ll_ctrl_conn_param_reply(connsm, rspbuf, req);
   194be:	4642      	mov	r2, r8
   194c0:	4639      	mov	r1, r7
   194c2:	4620      	mov	r0, r4
   194c4:	f7ff ff74 	bl	193b0 <ble_ll_ctrl_conn_param_reply>
   194c8:	e030      	b.n	1952c <ble_ll_ctrl_conn_param_pdu_proc+0x160>
        if (hcu->handle != 0) {
   194ca:	f8b4 3168 	ldrh.w	r3, [r4, #360]	; 0x168
   194ce:	2b00      	cmp	r3, #0
   194d0:	d0d8      	beq.n	19484 <ble_ll_ctrl_conn_param_pdu_proc+0xb8>
            if (!((req->interval_min < hcu->conn_itvl_min) ||
   194d2:	f8b4 3182 	ldrh.w	r3, [r4, #386]	; 0x182
   194d6:	f8b4 216a 	ldrh.w	r2, [r4, #362]	; 0x16a
   194da:	4293      	cmp	r3, r2
   194dc:	d3d2      	bcc.n	19484 <ble_ll_ctrl_conn_param_pdu_proc+0xb8>
                  (req->interval_min > hcu->conn_itvl_max) ||
   194de:	f8b4 116c 	ldrh.w	r1, [r4, #364]	; 0x16c
            if (!((req->interval_min < hcu->conn_itvl_min) ||
   194e2:	428b      	cmp	r3, r1
   194e4:	d8ce      	bhi.n	19484 <ble_ll_ctrl_conn_param_pdu_proc+0xb8>
                  (req->interval_max < hcu->conn_itvl_min) ||
   194e6:	f8b4 3184 	ldrh.w	r3, [r4, #388]	; 0x184
                  (req->interval_min > hcu->conn_itvl_max) ||
   194ea:	429a      	cmp	r2, r3
   194ec:	d8ca      	bhi.n	19484 <ble_ll_ctrl_conn_param_pdu_proc+0xb8>
                  (req->interval_max < hcu->conn_itvl_min) ||
   194ee:	4299      	cmp	r1, r3
   194f0:	d3c8      	bcc.n	19484 <ble_ll_ctrl_conn_param_pdu_proc+0xb8>
                  (req->latency != hcu->conn_latency) ||
   194f2:	f8b4 2186 	ldrh.w	r2, [r4, #390]	; 0x186
   194f6:	f8b4 316e 	ldrh.w	r3, [r4, #366]	; 0x16e
                  (req->interval_max > hcu->conn_itvl_max) ||
   194fa:	429a      	cmp	r2, r3
   194fc:	d1c2      	bne.n	19484 <ble_ll_ctrl_conn_param_pdu_proc+0xb8>
                  (req->timeout != hcu->supervision_timeout))) {
   194fe:	f8b4 2188 	ldrh.w	r2, [r4, #392]	; 0x188
   19502:	f8b4 3170 	ldrh.w	r3, [r4, #368]	; 0x170
            if (!((req->interval_min < hcu->conn_itvl_min) ||
   19506:	429a      	cmp	r2, r3
   19508:	d1bc      	bne.n	19484 <ble_ll_ctrl_conn_param_pdu_proc+0xb8>
   1950a:	e7d8      	b.n	194be <ble_ll_ctrl_conn_param_pdu_proc+0xf2>
        ble_ll_hci_ev_rem_conn_parm_req(connsm, req);
   1950c:	4641      	mov	r1, r8
   1950e:	4620      	mov	r0, r4
   19510:	f001 f97c 	bl	1a80c <ble_ll_hci_ev_rem_conn_parm_req>
        connsm->host_reply_opcode = opcode;
   19514:	f884 6038 	strb.w	r6, [r4, #56]	; 0x38
        connsm->csmflags.cfbit.awaiting_host_reply = 1;
   19518:	7823      	ldrb	r3, [r4, #0]
   1951a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1951e:	7023      	strb	r3, [r4, #0]
        rsp_opcode = 255;
   19520:	20ff      	movs	r0, #255	; 0xff
   19522:	e003      	b.n	1952c <ble_ll_ctrl_conn_param_pdu_proc+0x160>
        ble_err = BLE_ERR_INV_LMP_LL_PARM;
   19524:	231e      	movs	r3, #30
        rspbuf[1] = opcode;
   19526:	707e      	strb	r6, [r7, #1]
        rspbuf[2] = ble_err;
   19528:	70bb      	strb	r3, [r7, #2]
        rsp_opcode = BLE_LL_CTRL_REJECT_IND_EXT;
   1952a:	2011      	movs	r0, #17
}
   1952c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00019530 <ble_ll_ctrl_rx_conn_param_rsp>:
{
   19530:	b508      	push	{r3, lr}
    if (connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) {
   19532:	79c3      	ldrb	r3, [r0, #7]
   19534:	2b02      	cmp	r3, #2
   19536:	d011      	beq.n	1955c <ble_ll_ctrl_rx_conn_param_rsp+0x2c>
    if (connsm->csmflags.cfbit.awaiting_host_reply) {
   19538:	7803      	ldrb	r3, [r0, #0]
   1953a:	f013 0f40 	tst.w	r3, #64	; 0x40
   1953e:	d003      	beq.n	19548 <ble_ll_ctrl_rx_conn_param_rsp+0x18>
        connsm->csmflags.cfbit.awaiting_host_reply = 0;
   19540:	7803      	ldrb	r3, [r0, #0]
   19542:	f36f 1386 	bfc	r3, #6, #1
   19546:	7003      	strb	r3, [r0, #0]
    if (!IS_PENDING_CTRL_PROC(connsm, BLE_LL_CTRL_PROC_CONN_PARAM_REQ)) {
   19548:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
   1954c:	f013 0f40 	tst.w	r3, #64	; 0x40
   19550:	d006      	beq.n	19560 <ble_ll_ctrl_rx_conn_param_rsp+0x30>
    rsp_opcode = ble_ll_ctrl_conn_param_pdu_proc(connsm, dptr, rspbuf,
   19552:	2310      	movs	r3, #16
   19554:	f7ff ff3a 	bl	193cc <ble_ll_ctrl_conn_param_pdu_proc>
   19558:	b2c0      	uxtb	r0, r0
}
   1955a:	bd08      	pop	{r3, pc}
        return BLE_LL_CTRL_UNKNOWN_RSP;
   1955c:	2007      	movs	r0, #7
   1955e:	e7fc      	b.n	1955a <ble_ll_ctrl_rx_conn_param_rsp+0x2a>
        return BLE_ERR_MAX;
   19560:	20ff      	movs	r0, #255	; 0xff
   19562:	e7fa      	b.n	1955a <ble_ll_ctrl_rx_conn_param_rsp+0x2a>

00019564 <ble_ll_ctrl_is_terminate_ind>:
ble_ll_ctrl_is_terminate_ind(uint8_t hdr, uint8_t opcode)
{
    int rc;

    rc = 0;
    if ((hdr & BLE_LL_DATA_HDR_LLID_MASK) == BLE_LL_LLID_CTRL) {
   19564:	f000 0003 	and.w	r0, r0, #3
   19568:	2803      	cmp	r0, #3
   1956a:	d001      	beq.n	19570 <ble_ll_ctrl_is_terminate_ind+0xc>
    rc = 0;
   1956c:	2000      	movs	r0, #0
   1956e:	4770      	bx	lr
        if (opcode == BLE_LL_CTRL_TERMINATE_IND) {
   19570:	2902      	cmp	r1, #2
   19572:	d001      	beq.n	19578 <ble_ll_ctrl_is_terminate_ind+0x14>
    rc = 0;
   19574:	2000      	movs	r0, #0
   19576:	4770      	bx	lr
            rc = 1;
   19578:	2001      	movs	r0, #1
        }
    }
    return rc;
}
   1957a:	4770      	bx	lr

0001957c <ble_ll_ctrl_terminate_start>:
 *
 * @param connsm
 */
void
ble_ll_ctrl_terminate_start(struct ble_ll_conn_sm *connsm)
{
   1957c:	b570      	push	{r4, r5, r6, lr}
    int ctrl_proc;
    uint32_t usecs;
    struct os_mbuf *om;

    BLE_LL_ASSERT(connsm->disconnect_reason != 0);
   1957e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
   19582:	b1bb      	cbz	r3, 195b4 <ble_ll_ctrl_terminate_start+0x38>
   19584:	4604      	mov	r4, r0

    ctrl_proc = BLE_LL_CTRL_PROC_TERMINATE;
    om = ble_ll_ctrl_proc_init(connsm, ctrl_proc);
   19586:	2105      	movs	r1, #5
   19588:	f7ff fd04 	bl	18f94 <ble_ll_ctrl_proc_init>
    if (om) {
   1958c:	b188      	cbz	r0, 195b2 <ble_ll_ctrl_terminate_start+0x36>
        CONN_F_TERMINATE_STARTED(connsm) = 1;
   1958e:	7823      	ldrb	r3, [r4, #0]
   19590:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   19594:	7023      	strb	r3, [r4, #0]

        /* Set terminate "timeout" */
        usecs = connsm->supervision_tmo * BLE_HCI_CONN_SPVN_TMO_UNITS * 1000;
   19596:	f8b4 306c 	ldrh.w	r3, [r4, #108]	; 0x6c
   1959a:	f242 7610 	movw	r6, #10000	; 0x2710
   1959e:	fb06 f603 	mul.w	r6, r6, r3
        connsm->terminate_timeout = os_cputime_get32() +
   195a2:	f015 fc84 	bl	2eeae <os_cputime_get32>
   195a6:	4605      	mov	r5, r0
            os_cputime_usecs_to_ticks(usecs);
   195a8:	4630      	mov	r0, r6
   195aa:	f015 fc85 	bl	2eeb8 <os_cputime_usecs_to_ticks>
        connsm->terminate_timeout = os_cputime_get32() +
   195ae:	4428      	add	r0, r5
   195b0:	6620      	str	r0, [r4, #96]	; 0x60
    }
}
   195b2:	bd70      	pop	{r4, r5, r6, pc}
    BLE_LL_ASSERT(connsm->disconnect_reason != 0);
   195b4:	f7f2 fe18 	bl	c1e8 <hal_debugger_connected>
   195b8:	b100      	cbz	r0, 195bc <ble_ll_ctrl_terminate_start+0x40>
   195ba:	be01      	bkpt	0x0001
   195bc:	2300      	movs	r3, #0
   195be:	461a      	mov	r2, r3
   195c0:	4619      	mov	r1, r3
   195c2:	4618      	mov	r0, r3
   195c4:	f7f3 fac4 	bl	cb50 <__assert_func>

000195c8 <ble_ll_ctrl_proc_start>:
 *
 * @param connsm Pointer to connection state machine.
 */
void
ble_ll_ctrl_proc_start(struct ble_ll_conn_sm *connsm, int ctrl_proc)
{
   195c8:	b538      	push	{r3, r4, r5, lr}
    struct os_mbuf *om;

    BLE_LL_ASSERT(ctrl_proc != BLE_LL_CTRL_PROC_TERMINATE);
   195ca:	2905      	cmp	r1, #5
   195cc:	d00d      	beq.n	195ea <ble_ll_ctrl_proc_start+0x22>
   195ce:	4604      	mov	r4, r0
   195d0:	460d      	mov	r5, r1

    om = NULL;
    if (connsm->cur_ctrl_proc == BLE_LL_CTRL_PROC_IDLE) {
   195d2:	f890 303b 	ldrb.w	r3, [r0, #59]	; 0x3b
   195d6:	2bff      	cmp	r3, #255	; 0xff
   195d8:	d011      	beq.n	195fe <ble_ll_ctrl_proc_start+0x36>
            }
        }
    }

    /* Set bitmask denoting control procedure is pending */
    connsm->pending_ctrl_procs |= (1 << ctrl_proc);
   195da:	2101      	movs	r1, #1
   195dc:	40a9      	lsls	r1, r5
   195de:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
   195e2:	4319      	orrs	r1, r3
   195e4:	f8a4 1048 	strh.w	r1, [r4, #72]	; 0x48
}
   195e8:	bd38      	pop	{r3, r4, r5, pc}
    BLE_LL_ASSERT(ctrl_proc != BLE_LL_CTRL_PROC_TERMINATE);
   195ea:	f7f2 fdfd 	bl	c1e8 <hal_debugger_connected>
   195ee:	b100      	cbz	r0, 195f2 <ble_ll_ctrl_proc_start+0x2a>
   195f0:	be01      	bkpt	0x0001
   195f2:	2300      	movs	r3, #0
   195f4:	461a      	mov	r2, r3
   195f6:	4619      	mov	r1, r3
   195f8:	4618      	mov	r0, r3
   195fa:	f7f3 faa9 	bl	cb50 <__assert_func>
        om = ble_ll_ctrl_proc_init(connsm, ctrl_proc);
   195fe:	f7ff fcc9 	bl	18f94 <ble_ll_ctrl_proc_init>
        if (om) {
   19602:	2800      	cmp	r0, #0
   19604:	d0e9      	beq.n	195da <ble_ll_ctrl_proc_start+0x12>
            connsm->cur_ctrl_proc = ctrl_proc;
   19606:	f884 503b 	strb.w	r5, [r4, #59]	; 0x3b
            if (ctrl_proc != BLE_LL_CTRL_PROC_CHAN_MAP_UPD) {
   1960a:	2d01      	cmp	r5, #1
   1960c:	d0e5      	beq.n	195da <ble_ll_ctrl_proc_start+0x12>
                ble_ll_ctrl_start_rsp_timer(connsm);
   1960e:	4620      	mov	r0, r4
   19610:	f7ff fb0c 	bl	18c2c <ble_ll_ctrl_start_rsp_timer>
   19614:	e7e1      	b.n	195da <ble_ll_ctrl_proc_start+0x12>

00019616 <ble_ll_ctrl_initiate_dle>:
{
   19616:	b508      	push	{r3, lr}
    if (!(connsm->conn_features & BLE_LL_FEAT_DATA_LEN_EXT)) {
   19618:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
   1961c:	f013 0f20 	tst.w	r3, #32
   19620:	d010      	beq.n	19644 <ble_ll_ctrl_initiate_dle+0x2e>
    if ((connsm->max_tx_octets <= BLE_LL_CONN_SUPP_BYTES_MIN) &&
   19622:	7a83      	ldrb	r3, [r0, #10]
   19624:	2b1b      	cmp	r3, #27
   19626:	d80a      	bhi.n	1963e <ble_ll_ctrl_initiate_dle+0x28>
        (connsm->max_rx_octets <= BLE_LL_CONN_SUPP_BYTES_MIN) &&
   19628:	7ac3      	ldrb	r3, [r0, #11]
    if ((connsm->max_tx_octets <= BLE_LL_CONN_SUPP_BYTES_MIN) &&
   1962a:	2b1b      	cmp	r3, #27
   1962c:	d807      	bhi.n	1963e <ble_ll_ctrl_initiate_dle+0x28>
        (connsm->max_tx_time <= BLE_LL_CONN_SUPP_TIME_MIN) &&
   1962e:	8a03      	ldrh	r3, [r0, #16]
        (connsm->max_rx_octets <= BLE_LL_CONN_SUPP_BYTES_MIN) &&
   19630:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   19634:	d803      	bhi.n	1963e <ble_ll_ctrl_initiate_dle+0x28>
        (connsm->max_rx_time <= BLE_LL_CONN_SUPP_TIME_MIN)) {
   19636:	8a43      	ldrh	r3, [r0, #18]
        (connsm->max_tx_time <= BLE_LL_CONN_SUPP_TIME_MIN) &&
   19638:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   1963c:	d902      	bls.n	19644 <ble_ll_ctrl_initiate_dle+0x2e>
    ble_ll_ctrl_proc_start(connsm, BLE_LL_CTRL_PROC_DATA_LEN_UPD);
   1963e:	2108      	movs	r1, #8
   19640:	f7ff ffc2 	bl	195c8 <ble_ll_ctrl_proc_start>
}
   19644:	bd08      	pop	{r3, pc}

00019646 <ble_ll_ctrl_chk_proc_start>:
 *
 * @param connsm Pointer to connection state machine.
 */
void
ble_ll_ctrl_chk_proc_start(struct ble_ll_conn_sm *connsm)
{
   19646:	b538      	push	{r3, r4, r5, lr}
   19648:	4604      	mov	r4, r0

    /*
     * If we are terminating, dont start any new procedures but start
     * terminate if needed
     */
    if (connsm->disconnect_reason) {
   1964a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
   1964e:	b133      	cbz	r3, 1965e <ble_ll_ctrl_chk_proc_start+0x18>
        if (!CONN_F_TERMINATE_STARTED(connsm)) {
   19650:	f990 3000 	ldrsb.w	r3, [r0]
   19654:	2b00      	cmp	r3, #0
   19656:	db06      	blt.n	19666 <ble_ll_ctrl_chk_proc_start+0x20>
            /*
             * If the terminate procedure has not started it means we were not
             * able to start it right away (no control pdu was available).
             * Start it now. No need to start any other procedures.
             */
            ble_ll_ctrl_terminate_start(connsm);
   19658:	f7ff ff90 	bl	1957c <ble_ll_ctrl_terminate_start>
   1965c:	e003      	b.n	19666 <ble_ll_ctrl_chk_proc_start+0x20>
        }
        return;
    }

    /* If there is a running procedure or no pending, do nothing */
    if ((connsm->cur_ctrl_proc == BLE_LL_CTRL_PROC_IDLE) &&
   1965e:	f890 303b 	ldrb.w	r3, [r0, #59]	; 0x3b
   19662:	2bff      	cmp	r3, #255	; 0xff
   19664:	d000      	beq.n	19668 <ble_ll_ctrl_chk_proc_start+0x22>
                    break;
                }
            }
        }
    }
}
   19666:	bd38      	pop	{r3, r4, r5, pc}
        (connsm->pending_ctrl_procs != 0)) {
   19668:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
    if ((connsm->cur_ctrl_proc == BLE_LL_CTRL_PROC_IDLE) &&
   1966c:	2b00      	cmp	r3, #0
   1966e:	d0fa      	beq.n	19666 <ble_ll_ctrl_chk_proc_start+0x20>
        for (i = 0; i < BLE_LL_CTRL_PROC_NUM; ++i) {
   19670:	2500      	movs	r5, #0
   19672:	2d09      	cmp	r5, #9
   19674:	dcf7      	bgt.n	19666 <ble_ll_ctrl_chk_proc_start+0x20>
            if (IS_PENDING_CTRL_PROC(connsm, i)) {
   19676:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
   1967a:	412b      	asrs	r3, r5
   1967c:	f013 0f01 	tst.w	r3, #1
   19680:	d017      	beq.n	196b2 <ble_ll_ctrl_chk_proc_start+0x6c>
                if ((i == BLE_LL_CTRL_PROC_VERSION_XCHG) &&
   19682:	2d04      	cmp	r5, #4
   19684:	d004      	beq.n	19690 <ble_ll_ctrl_chk_proc_start+0x4a>
                    ble_ll_ctrl_proc_start(connsm, i);
   19686:	4629      	mov	r1, r5
   19688:	4620      	mov	r0, r4
   1968a:	f7ff ff9d 	bl	195c8 <ble_ll_ctrl_proc_start>
                    break;
   1968e:	e7ea      	b.n	19666 <ble_ll_ctrl_chk_proc_start+0x20>
                if ((i == BLE_LL_CTRL_PROC_VERSION_XCHG) &&
   19690:	7863      	ldrb	r3, [r4, #1]
   19692:	f013 0f08 	tst.w	r3, #8
   19696:	d0f6      	beq.n	19686 <ble_ll_ctrl_chk_proc_start+0x40>
                    ble_ll_hci_ev_rd_rem_ver(connsm, BLE_ERR_SUCCESS);
   19698:	2100      	movs	r1, #0
   1969a:	4620      	mov	r0, r4
   1969c:	f001 f985 	bl	1a9aa <ble_ll_hci_ev_rd_rem_ver>
                    CLR_PENDING_CTRL_PROC(connsm, i);
   196a0:	2301      	movs	r3, #1
   196a2:	fa03 f205 	lsl.w	r2, r3, r5
   196a6:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
   196aa:	ea23 0302 	bic.w	r3, r3, r2
   196ae:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
        for (i = 0; i < BLE_LL_CTRL_PROC_NUM; ++i) {
   196b2:	3501      	adds	r5, #1
   196b4:	e7dd      	b.n	19672 <ble_ll_ctrl_chk_proc_start+0x2c>

000196b6 <ble_ll_ctrl_proc_stop>:
{
   196b6:	b538      	push	{r3, r4, r5, lr}
   196b8:	4604      	mov	r4, r0
   196ba:	460d      	mov	r5, r1
    if (connsm->cur_ctrl_proc == ctrl_proc) {
   196bc:	f890 303b 	ldrb.w	r3, [r0, #59]	; 0x3b
   196c0:	428b      	cmp	r3, r1
   196c2:	d00c      	beq.n	196de <ble_ll_ctrl_proc_stop+0x28>
    CLR_PENDING_CTRL_PROC(connsm, ctrl_proc);
   196c4:	2101      	movs	r1, #1
   196c6:	fa01 f305 	lsl.w	r3, r1, r5
   196ca:	f8b4 1048 	ldrh.w	r1, [r4, #72]	; 0x48
   196ce:	ea21 0103 	bic.w	r1, r1, r3
   196d2:	f8a4 1048 	strh.w	r1, [r4, #72]	; 0x48
    ble_ll_ctrl_chk_proc_start(connsm);
   196d6:	4620      	mov	r0, r4
   196d8:	f7ff ffb5 	bl	19646 <ble_ll_ctrl_chk_proc_start>
}
   196dc:	bd38      	pop	{r3, r4, r5, pc}
    os_callout_stop(&co->co);
   196de:	30bc      	adds	r0, #188	; 0xbc
   196e0:	f7f3 fbec 	bl	cebc <os_callout_stop>
        connsm->cur_ctrl_proc = BLE_LL_CTRL_PROC_IDLE;
   196e4:	23ff      	movs	r3, #255	; 0xff
   196e6:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
   196ea:	e7eb      	b.n	196c4 <ble_ll_ctrl_proc_stop+0xe>

000196ec <ble_ll_ctrl_proc_unk_rsp>:
{
   196ec:	b538      	push	{r3, r4, r5, lr}
   196ee:	4605      	mov	r5, r0
   196f0:	4613      	mov	r3, r2
    opcode = dptr[0];
   196f2:	780c      	ldrb	r4, [r1, #0]
    switch (opcode) {
   196f4:	2c14      	cmp	r4, #20
   196f6:	d837      	bhi.n	19768 <ble_ll_ctrl_proc_unk_rsp+0x7c>
   196f8:	e8df f004 	tbb	[pc, r4]
   196fc:	36363639 	.word	0x36363639
   19700:	36363636 	.word	0x36363636
   19704:	36363636 	.word	0x36363636
   19708:	1b133636 	.word	0x1b133636
   1970c:	362e3638 	.word	0x362e3638
   19710:	0b          	.byte	0x0b
   19711:	00          	.byte	0x00
        BLE_LL_CONN_CLEAR_FEATURE(connsm, BLE_LL_FEAT_DATA_LEN_EXT);
   19712:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
   19716:	f023 0320 	bic.w	r3, r3, #32
   1971a:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
        ctrl_proc = BLE_LL_CTRL_PROC_DATA_LEN_UPD;
   1971e:	2408      	movs	r4, #8
        break;
   19720:	e025      	b.n	1976e <ble_ll_ctrl_proc_unk_rsp+0x82>
        BLE_LL_CONN_CLEAR_FEATURE(connsm, BLE_LL_FEAT_SLAVE_INIT);
   19722:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
   19726:	f023 0308 	bic.w	r3, r3, #8
   1972a:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
        ctrl_proc = BLE_LL_CTRL_PROC_FEATURE_XCHG;
   1972e:	2403      	movs	r4, #3
        break;
   19730:	e01d      	b.n	1976e <ble_ll_ctrl_proc_unk_rsp+0x82>
        BLE_LL_CONN_CLEAR_FEATURE(connsm, BLE_LL_FEAT_CONN_PARM_REQ);
   19732:	f890 203f 	ldrb.w	r2, [r0, #63]	; 0x3f
   19736:	f022 0202 	bic.w	r2, r2, #2
   1973a:	f880 203f 	strb.w	r2, [r0, #63]	; 0x3f
        if (connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) {
   1973e:	79c2      	ldrb	r2, [r0, #7]
   19740:	2a01      	cmp	r2, #1
   19742:	d001      	beq.n	19748 <ble_ll_ctrl_proc_unk_rsp+0x5c>
        ctrl_proc = BLE_LL_CTRL_PROC_CONN_PARAM_REQ;
   19744:	2406      	movs	r4, #6
   19746:	e012      	b.n	1976e <ble_ll_ctrl_proc_unk_rsp+0x82>
            ble_ll_ctrl_conn_upd_make(connsm, rspdata, NULL);
   19748:	2200      	movs	r2, #0
   1974a:	4619      	mov	r1, r3
   1974c:	f7ff fa82 	bl	18c54 <ble_ll_ctrl_conn_upd_make>
            connsm->reject_reason = BLE_ERR_SUCCESS;
   19750:	2000      	movs	r0, #0
   19752:	f885 0037 	strb.w	r0, [r5, #55]	; 0x37
            return BLE_LL_CTRL_CONN_UPDATE_IND;
   19756:	e00f      	b.n	19778 <ble_ll_ctrl_proc_unk_rsp+0x8c>
        BLE_LL_CONN_CLEAR_FEATURE(connsm, BLE_LL_FEAT_LE_PING);
   19758:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
   1975c:	f023 0310 	bic.w	r3, r3, #16
   19760:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
        ctrl_proc = BLE_LL_CTRL_PROC_LE_PING;
   19764:	2407      	movs	r4, #7
        break;
   19766:	e002      	b.n	1976e <ble_ll_ctrl_proc_unk_rsp+0x82>
        ctrl_proc = BLE_LL_CTRL_PROC_NUM;
   19768:	240a      	movs	r4, #10
        break;
   1976a:	e000      	b.n	1976e <ble_ll_ctrl_proc_unk_rsp+0x82>
        ctrl_proc = BLE_LL_CTRL_PROC_CONN_PARAM_REQ;
   1976c:	2406      	movs	r4, #6
    if (connsm->cur_ctrl_proc == ctrl_proc) {
   1976e:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
   19772:	42a3      	cmp	r3, r4
   19774:	d001      	beq.n	1977a <ble_ll_ctrl_proc_unk_rsp+0x8e>
    return BLE_ERR_MAX;
   19776:	20ff      	movs	r0, #255	; 0xff
}
   19778:	bd38      	pop	{r3, r4, r5, pc}
        ble_ll_ctrl_proc_stop(connsm, ctrl_proc);
   1977a:	4621      	mov	r1, r4
   1977c:	4628      	mov	r0, r5
   1977e:	f7ff ff9a 	bl	196b6 <ble_ll_ctrl_proc_stop>
        if (ctrl_proc == BLE_LL_CTRL_PROC_CONN_PARAM_REQ) {
   19782:	2c06      	cmp	r4, #6
   19784:	d003      	beq.n	1978e <ble_ll_ctrl_proc_unk_rsp+0xa2>
        } else if (ctrl_proc == BLE_LL_CTRL_PROC_FEATURE_XCHG) {
   19786:	2c03      	cmp	r4, #3
   19788:	d007      	beq.n	1979a <ble_ll_ctrl_proc_unk_rsp+0xae>
    return BLE_ERR_MAX;
   1978a:	20ff      	movs	r0, #255	; 0xff
   1978c:	e7f4      	b.n	19778 <ble_ll_ctrl_proc_unk_rsp+0x8c>
            ble_ll_hci_ev_conn_update(connsm, BLE_ERR_UNSUPP_REM_FEATURE);
   1978e:	211a      	movs	r1, #26
   19790:	4628      	mov	r0, r5
   19792:	f001 f860 	bl	1a856 <ble_ll_hci_ev_conn_update>
    return BLE_ERR_MAX;
   19796:	20ff      	movs	r0, #255	; 0xff
   19798:	e7ee      	b.n	19778 <ble_ll_ctrl_proc_unk_rsp+0x8c>
            if (connsm->csmflags.cfbit.pending_hci_rd_features) {
   1979a:	78eb      	ldrb	r3, [r5, #3]
   1979c:	f013 0f10 	tst.w	r3, #16
   197a0:	d105      	bne.n	197ae <ble_ll_ctrl_proc_unk_rsp+0xc2>
            connsm->csmflags.cfbit.pending_hci_rd_features = 0;
   197a2:	78eb      	ldrb	r3, [r5, #3]
   197a4:	f36f 1304 	bfc	r3, #4, #1
   197a8:	70eb      	strb	r3, [r5, #3]
    return BLE_ERR_MAX;
   197aa:	20ff      	movs	r0, #255	; 0xff
   197ac:	e7e4      	b.n	19778 <ble_ll_ctrl_proc_unk_rsp+0x8c>
                ble_ll_hci_ev_rd_rem_used_feat(connsm,
   197ae:	211a      	movs	r1, #26
   197b0:	4628      	mov	r0, r5
   197b2:	f001 f8d3 	bl	1a95c <ble_ll_hci_ev_rd_rem_used_feat>
   197b6:	e7f4      	b.n	197a2 <ble_ll_ctrl_proc_unk_rsp+0xb6>

000197b8 <ble_ll_ctrl_rx_feature_rsp>:
{
   197b8:	b510      	push	{r4, lr}
   197ba:	4604      	mov	r4, r0
    ble_ll_ctrl_update_features(connsm, dptr);
   197bc:	f7ff fb84 	bl	18ec8 <ble_ll_ctrl_update_features>
    if (IS_PENDING_CTRL_PROC(connsm, BLE_LL_CTRL_PROC_FEATURE_XCHG)) {
   197c0:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
   197c4:	f013 0f08 	tst.w	r3, #8
   197c8:	d104      	bne.n	197d4 <ble_ll_ctrl_rx_feature_rsp+0x1c>
    if (connsm->csmflags.cfbit.pending_hci_rd_features) {
   197ca:	78e3      	ldrb	r3, [r4, #3]
   197cc:	f013 0f10 	tst.w	r3, #16
   197d0:	d105      	bne.n	197de <ble_ll_ctrl_rx_feature_rsp+0x26>
}
   197d2:	bd10      	pop	{r4, pc}
        ble_ll_ctrl_proc_stop(connsm, BLE_LL_CTRL_PROC_FEATURE_XCHG);
   197d4:	2103      	movs	r1, #3
   197d6:	4620      	mov	r0, r4
   197d8:	f7ff ff6d 	bl	196b6 <ble_ll_ctrl_proc_stop>
   197dc:	e7f5      	b.n	197ca <ble_ll_ctrl_rx_feature_rsp+0x12>
        ble_ll_hci_ev_rd_rem_used_feat(connsm, BLE_ERR_SUCCESS);
   197de:	2100      	movs	r1, #0
   197e0:	4620      	mov	r0, r4
   197e2:	f001 f8bb 	bl	1a95c <ble_ll_hci_ev_rd_rem_used_feat>
        connsm->csmflags.cfbit.pending_hci_rd_features = 0;
   197e6:	78e3      	ldrb	r3, [r4, #3]
   197e8:	f36f 1304 	bfc	r3, #4, #1
   197ec:	70e3      	strb	r3, [r4, #3]
}
   197ee:	e7f0      	b.n	197d2 <ble_ll_ctrl_rx_feature_rsp+0x1a>

000197f0 <ble_ll_ctrl_rx_version_ind>:
{
   197f0:	b570      	push	{r4, r5, r6, lr}
   197f2:	4604      	mov	r4, r0
   197f4:	460d      	mov	r5, r1
   197f6:	4616      	mov	r6, r2
    connsm->vers_nr = dptr[0];
   197f8:	4608      	mov	r0, r1
   197fa:	f810 3b01 	ldrb.w	r3, [r0], #1
   197fe:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    connsm->comp_id = get_le16(dptr + 1);
   19802:	f015 fab4 	bl	2ed6e <get_le16>
   19806:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
    connsm->sub_vers_nr = get_le16(dptr + 3);
   1980a:	1ce8      	adds	r0, r5, #3
   1980c:	f015 faaf 	bl	2ed6e <get_le16>
   19810:	f8a4 0050 	strh.w	r0, [r4, #80]	; 0x50
    connsm->csmflags.cfbit.rxd_version_ind = 1;
   19814:	7863      	ldrb	r3, [r4, #1]
   19816:	f043 0308 	orr.w	r3, r3, #8
   1981a:	7063      	strb	r3, [r4, #1]
    if (!connsm->csmflags.cfbit.version_ind_sent) {
   1981c:	f013 0f04 	tst.w	r3, #4
   19820:	d007      	beq.n	19832 <ble_ll_ctrl_rx_version_ind+0x42>
    rsp_opcode = BLE_ERR_MAX;
   19822:	25ff      	movs	r5, #255	; 0xff
    if (IS_PENDING_CTRL_PROC(connsm, BLE_LL_CTRL_PROC_VERSION_XCHG)) {
   19824:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
   19828:	f013 0f10 	tst.w	r3, #16
   1982c:	d107      	bne.n	1983e <ble_ll_ctrl_rx_version_ind+0x4e>
}
   1982e:	4628      	mov	r0, r5
   19830:	bd70      	pop	{r4, r5, r6, pc}
        ble_ll_ctrl_version_ind_make(connsm, rspbuf);
   19832:	4631      	mov	r1, r6
   19834:	4620      	mov	r0, r4
   19836:	f7ff fa97 	bl	18d68 <ble_ll_ctrl_version_ind_make>
        rsp_opcode = BLE_LL_CTRL_VERSION_IND;
   1983a:	250c      	movs	r5, #12
   1983c:	e7f2      	b.n	19824 <ble_ll_ctrl_rx_version_ind+0x34>
        ble_ll_hci_ev_rd_rem_ver(connsm, BLE_ERR_SUCCESS);
   1983e:	2100      	movs	r1, #0
   19840:	4620      	mov	r0, r4
   19842:	f001 f8b2 	bl	1a9aa <ble_ll_hci_ev_rd_rem_ver>
        ble_ll_ctrl_proc_stop(connsm, BLE_LL_CTRL_PROC_VERSION_XCHG);
   19846:	2104      	movs	r1, #4
   19848:	4620      	mov	r0, r4
   1984a:	f7ff ff34 	bl	196b6 <ble_ll_ctrl_proc_stop>
   1984e:	e7ee      	b.n	1982e <ble_ll_ctrl_rx_version_ind+0x3e>

00019850 <ble_ll_ctrl_rx_start_enc_rsp>:
{
   19850:	b538      	push	{r3, r4, r5, lr}
    if (connsm->enc_data.enc_state != CONN_ENC_S_START_ENC_RSP_WAIT) {
   19852:	f890 3118 	ldrb.w	r3, [r0, #280]	; 0x118
   19856:	2b07      	cmp	r3, #7
   19858:	d11e      	bne.n	19898 <ble_ll_ctrl_rx_start_enc_rsp+0x48>
   1985a:	4604      	mov	r4, r0
    if (connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) {
   1985c:	79c3      	ldrb	r3, [r0, #7]
   1985e:	2b01      	cmp	r3, #1
   19860:	d00a      	beq.n	19878 <ble_ll_ctrl_rx_start_enc_rsp+0x28>
        if (connsm->cur_ctrl_proc == BLE_LL_CTRL_PROC_ENCRYPT) {
   19862:	f890 303b 	ldrb.w	r3, [r0, #59]	; 0x3b
   19866:	2b02      	cmp	r3, #2
   19868:	d011      	beq.n	1988e <ble_ll_ctrl_rx_start_enc_rsp+0x3e>
        rc = BLE_LL_CTRL_START_ENC_RSP;
   1986a:	2506      	movs	r5, #6
    ble_ll_hci_ev_encrypt_chg(connsm, BLE_ERR_SUCCESS);
   1986c:	2100      	movs	r1, #0
   1986e:	4620      	mov	r0, r4
   19870:	f001 f813 	bl	1a89a <ble_ll_hci_ev_encrypt_chg>
    return rc;
   19874:	b2e8      	uxtb	r0, r5
}
   19876:	bd38      	pop	{r3, r4, r5, pc}
        ble_ll_ctrl_proc_stop(connsm, BLE_LL_CTRL_PROC_ENCRYPT);
   19878:	2102      	movs	r1, #2
   1987a:	f7ff ff1c 	bl	196b6 <ble_ll_ctrl_proc_stop>
        connsm->enc_data.enc_state = CONN_ENC_S_ENCRYPTED;
   1987e:	2302      	movs	r3, #2
   19880:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
        ble_ll_conn_auth_pyld_timer_start(connsm);
   19884:	4620      	mov	r0, r4
   19886:	f7fd fad1 	bl	16e2c <ble_ll_conn_auth_pyld_timer_start>
        rc = BLE_ERR_MAX;
   1988a:	25ff      	movs	r5, #255	; 0xff
   1988c:	e7ee      	b.n	1986c <ble_ll_ctrl_rx_start_enc_rsp+0x1c>
            ble_ll_ctrl_proc_stop(connsm, BLE_LL_CTRL_PROC_ENCRYPT);
   1988e:	2102      	movs	r1, #2
   19890:	f7ff ff11 	bl	196b6 <ble_ll_ctrl_proc_stop>
        rc = BLE_LL_CTRL_START_ENC_RSP;
   19894:	2506      	movs	r5, #6
   19896:	e7e9      	b.n	1986c <ble_ll_ctrl_rx_start_enc_rsp+0x1c>
        return BLE_ERR_MAX;
   19898:	20ff      	movs	r0, #255	; 0xff
   1989a:	e7ec      	b.n	19876 <ble_ll_ctrl_rx_start_enc_rsp+0x26>

0001989c <ble_ll_ctrl_rx_ping_rsp>:
{
   1989c:	b508      	push	{r3, lr}
    ble_ll_ctrl_proc_stop(connsm, BLE_LL_CTRL_PROC_LE_PING);
   1989e:	2107      	movs	r1, #7
   198a0:	f7ff ff09 	bl	196b6 <ble_ll_ctrl_proc_stop>
}
   198a4:	bd08      	pop	{r3, pc}

000198a6 <ble_ll_ctrl_rx_conn_param_req>:
    if (connsm->csmflags.cfbit.awaiting_host_reply) {
   198a6:	7803      	ldrb	r3, [r0, #0]
   198a8:	f013 0f40 	tst.w	r3, #64	; 0x40
   198ac:	d12d      	bne.n	1990a <ble_ll_ctrl_rx_conn_param_req+0x64>
{
   198ae:	b570      	push	{r4, r5, r6, lr}
   198b0:	4616      	mov	r6, r2
   198b2:	460d      	mov	r5, r1
   198b4:	4604      	mov	r4, r0
    if (IS_PENDING_CTRL_PROC(connsm, BLE_LL_CTRL_PROC_CONN_PARAM_REQ)) {
   198b6:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
   198ba:	f013 0f40 	tst.w	r3, #64	; 0x40
   198be:	d00f      	beq.n	198e0 <ble_ll_ctrl_rx_conn_param_req+0x3a>
        if (connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) {
   198c0:	79c3      	ldrb	r3, [r0, #7]
   198c2:	2b02      	cmp	r3, #2
   198c4:	d005      	beq.n	198d2 <ble_ll_ctrl_rx_conn_param_req+0x2c>
            rspbuf[1] = BLE_LL_CTRL_CONN_PARM_REQ;
   198c6:	230f      	movs	r3, #15
   198c8:	7053      	strb	r3, [r2, #1]
            rspbuf[2] = BLE_ERR_LMP_COLLISION;
   198ca:	2323      	movs	r3, #35	; 0x23
   198cc:	7093      	strb	r3, [r2, #2]
            return rsp_opcode;
   198ce:	2011      	movs	r0, #17
   198d0:	e014      	b.n	198fc <ble_ll_ctrl_rx_conn_param_req+0x56>
            ble_ll_ctrl_proc_stop(connsm, BLE_LL_CTRL_PROC_CONN_PARAM_REQ);
   198d2:	2106      	movs	r1, #6
   198d4:	f7ff feef 	bl	196b6 <ble_ll_ctrl_proc_stop>
            ble_ll_hci_ev_conn_update(connsm, BLE_ERR_LMP_COLLISION);
   198d8:	2123      	movs	r1, #35	; 0x23
   198da:	4620      	mov	r0, r4
   198dc:	f000 ffbb 	bl	1a856 <ble_ll_hci_ev_conn_update>
    if ((connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) &&
   198e0:	79e3      	ldrb	r3, [r4, #7]
   198e2:	2b01      	cmp	r3, #1
   198e4:	d103      	bne.n	198ee <ble_ll_ctrl_rx_conn_param_req+0x48>
   198e6:	7863      	ldrb	r3, [r4, #1]
   198e8:	f013 0f10 	tst.w	r3, #16
   198ec:	d107      	bne.n	198fe <ble_ll_ctrl_rx_conn_param_req+0x58>
    rsp_opcode = ble_ll_ctrl_conn_param_pdu_proc(connsm, dptr, rspbuf,
   198ee:	230f      	movs	r3, #15
   198f0:	4632      	mov	r2, r6
   198f2:	4629      	mov	r1, r5
   198f4:	4620      	mov	r0, r4
   198f6:	f7ff fd69 	bl	193cc <ble_ll_ctrl_conn_param_pdu_proc>
   198fa:	b2c0      	uxtb	r0, r0
}
   198fc:	bd70      	pop	{r4, r5, r6, pc}
        rspbuf[1] = BLE_LL_CTRL_CONN_PARM_REQ;
   198fe:	230f      	movs	r3, #15
   19900:	7073      	strb	r3, [r6, #1]
        rspbuf[2] = BLE_ERR_DIFF_TRANS_COLL;
   19902:	232a      	movs	r3, #42	; 0x2a
   19904:	70b3      	strb	r3, [r6, #2]
        return rsp_opcode;
   19906:	2011      	movs	r0, #17
   19908:	e7f8      	b.n	198fc <ble_ll_ctrl_rx_conn_param_req+0x56>
        return BLE_ERR_MAX;
   1990a:	20ff      	movs	r0, #255	; 0xff
}
   1990c:	4770      	bx	lr

0001990e <ble_ll_ctrl_rx_reject_ind>:
{
   1990e:	b538      	push	{r3, r4, r5, lr}
   19910:	4604      	mov	r4, r0
    if (opcode == BLE_LL_CTRL_REJECT_IND) {
   19912:	2a0d      	cmp	r2, #13
   19914:	d00a      	beq.n	1992c <ble_ll_ctrl_rx_reject_ind+0x1e>
        ble_error = dptr[1];
   19916:	784d      	ldrb	r5, [r1, #1]
    switch (connsm->cur_ctrl_proc) {
   19918:	f894 003b 	ldrb.w	r0, [r4, #59]	; 0x3b
   1991c:	2806      	cmp	r0, #6
   1991e:	d007      	beq.n	19930 <ble_ll_ctrl_rx_reject_ind+0x22>
   19920:	2808      	cmp	r0, #8
   19922:	d02c      	beq.n	1997e <ble_ll_ctrl_rx_reject_ind+0x70>
   19924:	2802      	cmp	r0, #2
   19926:	d01d      	beq.n	19964 <ble_ll_ctrl_rx_reject_ind+0x56>
    uint8_t rsp_opcode = BLE_ERR_MAX;
   19928:	20ff      	movs	r0, #255	; 0xff
   1992a:	e027      	b.n	1997c <ble_ll_ctrl_rx_reject_ind+0x6e>
        ble_error = dptr[0];
   1992c:	780d      	ldrb	r5, [r1, #0]
   1992e:	e7f3      	b.n	19918 <ble_ll_ctrl_rx_reject_ind+0xa>
        if (opcode == BLE_LL_CTRL_REJECT_IND_EXT) {
   19930:	2a11      	cmp	r2, #17
   19932:	d001      	beq.n	19938 <ble_ll_ctrl_rx_reject_ind+0x2a>
    uint8_t rsp_opcode = BLE_ERR_MAX;
   19934:	20ff      	movs	r0, #255	; 0xff
   19936:	e021      	b.n	1997c <ble_ll_ctrl_rx_reject_ind+0x6e>
            if (connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) {
   19938:	79e2      	ldrb	r2, [r4, #7]
   1993a:	2a01      	cmp	r2, #1
   1993c:	d009      	beq.n	19952 <ble_ll_ctrl_rx_reject_ind+0x44>
                ble_ll_ctrl_proc_stop(connsm, BLE_LL_CTRL_PROC_CONN_PARAM_REQ);
   1993e:	2106      	movs	r1, #6
   19940:	4620      	mov	r0, r4
   19942:	f7ff feb8 	bl	196b6 <ble_ll_ctrl_proc_stop>
                ble_ll_hci_ev_conn_update(connsm, ble_error);
   19946:	4629      	mov	r1, r5
   19948:	4620      	mov	r0, r4
   1994a:	f000 ff84 	bl	1a856 <ble_ll_hci_ev_conn_update>
    uint8_t rsp_opcode = BLE_ERR_MAX;
   1994e:	20ff      	movs	r0, #255	; 0xff
   19950:	e014      	b.n	1997c <ble_ll_ctrl_rx_reject_ind+0x6e>
                ble_ll_ctrl_conn_upd_make(connsm, rspdata, NULL);
   19952:	2200      	movs	r2, #0
   19954:	4619      	mov	r1, r3
   19956:	4620      	mov	r0, r4
   19958:	f7ff f97c 	bl	18c54 <ble_ll_ctrl_conn_upd_make>
                connsm->reject_reason = BLE_ERR_SUCCESS;
   1995c:	2000      	movs	r0, #0
   1995e:	f884 0037 	strb.w	r0, [r4, #55]	; 0x37
   19962:	e00b      	b.n	1997c <ble_ll_ctrl_rx_reject_ind+0x6e>
        ble_ll_ctrl_proc_stop(connsm, BLE_LL_CTRL_PROC_ENCRYPT);
   19964:	2102      	movs	r1, #2
   19966:	4620      	mov	r0, r4
   19968:	f7ff fea5 	bl	196b6 <ble_ll_ctrl_proc_stop>
        ble_ll_hci_ev_encrypt_chg(connsm, ble_error);
   1996c:	4629      	mov	r1, r5
   1996e:	4620      	mov	r0, r4
   19970:	f000 ff93 	bl	1a89a <ble_ll_hci_ev_encrypt_chg>
        connsm->enc_data.enc_state = CONN_ENC_S_UNENCRYPTED;
   19974:	2301      	movs	r3, #1
   19976:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
    uint8_t rsp_opcode = BLE_ERR_MAX;
   1997a:	20ff      	movs	r0, #255	; 0xff
}
   1997c:	bd38      	pop	{r3, r4, r5, pc}
        ble_ll_ctrl_proc_stop(connsm, BLE_LL_CTRL_PROC_DATA_LEN_UPD);
   1997e:	2108      	movs	r1, #8
   19980:	4620      	mov	r0, r4
   19982:	f7ff fe98 	bl	196b6 <ble_ll_ctrl_proc_stop>
    uint8_t rsp_opcode = BLE_ERR_MAX;
   19986:	20ff      	movs	r0, #255	; 0xff
        break;
   19988:	e7f8      	b.n	1997c <ble_ll_ctrl_rx_reject_ind+0x6e>
	...

0001998c <ble_ll_ctrl_rx_pdu>:
 * @param om
 * @param connsm
 */
int
ble_ll_ctrl_rx_pdu(struct ble_ll_conn_sm *connsm, struct os_mbuf *om)
{
   1998c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19990:	4606      	mov	r6, r0
   19992:	460f      	mov	r7, r1
    /*
     * dptr points to om_data pointer. The first byte of om_data is the
     * first byte of the Data Channel PDU header. Get length from header and
     * opcode from LL control PDU.
     */
    dptr = om->om_data;
   19994:	680c      	ldr	r4, [r1, #0]
    len = dptr[1];
   19996:	7863      	ldrb	r3, [r4, #1]
    opcode = dptr[2];
   19998:	78a5      	ldrb	r5, [r4, #2]
#endif

    /* If opcode comes from reserved value or CtrlData fields is invalid
     * we shall respond with LL_UNKNOWN_RSP
     */
    if ((opcode >= BLE_LL_CTRL_OPCODES) ||
   1999a:	2d1e      	cmp	r5, #30
   1999c:	f200 8188 	bhi.w	19cb0 <ble_ll_ctrl_rx_pdu+0x324>
   199a0:	f104 0901 	add.w	r9, r4, #1
   199a4:	f104 0803 	add.w	r8, r4, #3
   199a8:	3b01      	subs	r3, #1
   199aa:	b2db      	uxtb	r3, r3
        (len != g_ble_ll_ctrl_pkt_lengths[opcode])) {
   199ac:	4abf      	ldr	r2, [pc, #764]	; (19cac <ble_ll_ctrl_rx_pdu+0x320>)
   199ae:	5d52      	ldrb	r2, [r2, r5]
    if ((opcode >= BLE_LL_CTRL_OPCODES) ||
   199b0:	429a      	cmp	r2, r3
   199b2:	f040 8184 	bne.w	19cbe <ble_ll_ctrl_rx_pdu+0x332>
        rsp_opcode = BLE_LL_CTRL_UNKNOWN_RSP;
        goto ll_ctrl_send_rsp;
    }

    /* Check if the feature is supported. */
    switch (opcode) {
   199b6:	1eeb      	subs	r3, r5, #3
   199b8:	2b19      	cmp	r3, #25
   199ba:	d867      	bhi.n	19a8c <ble_ll_ctrl_rx_pdu+0x100>
   199bc:	e8df f003 	tbb	[pc, r3]
   199c0:	66196619 	.word	0x66196619
   199c4:	19666666 	.word	0x19666666
   199c8:	1f666666 	.word	0x1f666666
   199cc:	16661c1c 	.word	0x16661c1c
   199d0:	13660d66 	.word	0x13660d66
   199d4:	66106666 	.word	0x66106666
   199d8:	2266      	.short	0x2266
    case BLE_LL_CTRL_LENGTH_REQ:
        feature = BLE_LL_FEAT_DATA_LEN_EXT;
   199da:	f04f 0a20 	mov.w	sl, #32
   199de:	e013      	b.n	19a08 <ble_ll_ctrl_rx_pdu+0x7c>
        break;
    case BLE_LL_CTRL_PHY_REQ:
        feature = BLE_LL_FEAT_LE_2M_PHY | BLE_LL_FEAT_LE_CODED_PHY;
        break;
    case BLE_LL_CTRL_MIN_USED_CHAN_IND:
        feature = BLE_LL_FEAT_MIN_USED_CHAN;
   199e0:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
   199e4:	e010      	b.n	19a08 <ble_ll_ctrl_rx_pdu+0x7c>
        feature = BLE_LL_FEAT_LE_2M_PHY | BLE_LL_FEAT_LE_CODED_PHY;
   199e6:	f44f 6a10 	mov.w	sl, #2304	; 0x900
   199ea:	e00d      	b.n	19a08 <ble_ll_ctrl_rx_pdu+0x7c>
        feature = BLE_LL_FEAT_LE_PING;
   199ec:	f04f 0a10 	mov.w	sl, #16
   199f0:	e00a      	b.n	19a08 <ble_ll_ctrl_rx_pdu+0x7c>
        feature = BLE_LL_FEAT_LE_ENCRYPTION;
   199f2:	f04f 0a01 	mov.w	sl, #1
   199f6:	e007      	b.n	19a08 <ble_ll_ctrl_rx_pdu+0x7c>
        feature = BLE_LL_FEAT_CONN_PARM_REQ;
   199f8:	f04f 0a02 	mov.w	sl, #2
   199fc:	e004      	b.n	19a08 <ble_ll_ctrl_rx_pdu+0x7c>
        feature = BLE_LL_FEAT_SLAVE_INIT;
   199fe:	f04f 0a08 	mov.w	sl, #8
   19a02:	e001      	b.n	19a08 <ble_ll_ctrl_rx_pdu+0x7c>
        break;
    case BLE_LL_CTRL_PERIODIC_SYNC_IND:
        feature = BLE_LL_FEAT_SYNC_TRANS_RECV;
   19a04:	f04f 7a00 	mov.w	sl, #33554432	; 0x2000000
        feature = 0;
        break;
    }

    if (feature) {
        features = ble_ll_read_supp_features();
   19a08:	f7fb f898 	bl	14b3c <ble_ll_read_supp_features>
        if ((features & feature) == 0) {
   19a0c:	ea1a 0f00 	tst.w	sl, r0
   19a10:	d13c      	bne.n	19a8c <ble_ll_ctrl_rx_pdu+0x100>
            if (opcode == BLE_LL_CTRL_ENC_REQ) {
   19a12:	2d03      	cmp	r5, #3
   19a14:	d024      	beq.n	19a60 <ble_ll_ctrl_rx_pdu+0xd4>
    int rc = 0;
   19a16:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   19a1a:	46ca      	mov	sl, r9
                    rsp_opcode = BLE_LL_CTRL_REJECT_IND;
                    rspbuf[1] = BLE_ERR_UNSUPP_REM_FEATURE;
                }
            } else {
                /* Construct unknown rsp pdu */
                rsp_opcode = BLE_LL_CTRL_UNKNOWN_RSP;
   19a1c:	f04f 0807 	mov.w	r8, #7
        break;
    }

    /* Free mbuf or send response */
ll_ctrl_send_rsp:
    if (rsp_opcode == BLE_ERR_MAX) {
   19a20:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   19a24:	f000 8164 	beq.w	19cf0 <ble_ll_ctrl_rx_pdu+0x364>
    } else {
        /*
         * Write the response opcode into the buffer. If this is an unknown
         * response, put opcode of unknown pdu into buffer.
         */
        rspbuf[0] = rsp_opcode;
   19a28:	f884 8000 	strb.w	r8, [r4]
        if (rsp_opcode == BLE_LL_CTRL_UNKNOWN_RSP) {
   19a2c:	f1b8 0f07 	cmp.w	r8, #7
   19a30:	f000 8162 	beq.w	19cf8 <ble_ll_ctrl_rx_pdu+0x36c>
            rspbuf[1] = opcode;
        }
        len = g_ble_ll_ctrl_pkt_lengths[rsp_opcode] + 1;
   19a34:	4b9d      	ldr	r3, [pc, #628]	; (19cac <ble_ll_ctrl_rx_pdu+0x320>)
   19a36:	f813 3008 	ldrb.w	r3, [r3, r8]
   19a3a:	3301      	adds	r3, #1
        ble_ll_conn_enqueue_pkt(connsm, om, BLE_LL_LLID_CTRL, len);
   19a3c:	b2db      	uxtb	r3, r3
   19a3e:	2203      	movs	r2, #3
   19a40:	4639      	mov	r1, r7
   19a42:	4630      	mov	r0, r6
   19a44:	f7fe f8b4 	bl	17bb0 <ble_ll_conn_enqueue_pkt>
#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LE_ENCRYPTION)
        if (restart_encryption) {
   19a48:	f1ba 0f00 	cmp.w	sl, #0
   19a4c:	f040 8156 	bne.w	19cfc <ble_ll_ctrl_rx_pdu+0x370>
            ble_ll_ctrl_proc_init(connsm, BLE_LL_CTRL_PROC_ENCRYPT);
        }
#endif
    }

    if (connsm->csmflags.cfbit.pending_initiate_dle) {
   19a50:	78f3      	ldrb	r3, [r6, #3]
   19a52:	f013 0f20 	tst.w	r3, #32
   19a56:	f040 8156 	bne.w	19d06 <ble_ll_ctrl_rx_pdu+0x37a>
        connsm->csmflags.cfbit.pending_initiate_dle = 0;
        ble_ll_ctrl_initiate_dle(connsm);
    }

    return rc;
}
   19a5a:	4648      	mov	r0, r9
   19a5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                if (connsm->conn_features & BLE_LL_FEAT_EXTENDED_REJ) {
   19a60:	f896 303f 	ldrb.w	r3, [r6, #63]	; 0x3f
   19a64:	f013 0f04 	tst.w	r3, #4
   19a68:	d008      	beq.n	19a7c <ble_ll_ctrl_rx_pdu+0xf0>
                    rspbuf[1] = opcode;
   19a6a:	7065      	strb	r5, [r4, #1]
                    rspbuf[2] = BLE_ERR_UNSUPP_REM_FEATURE;
   19a6c:	231a      	movs	r3, #26
   19a6e:	70a3      	strb	r3, [r4, #2]
    int rc = 0;
   19a70:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   19a74:	46ca      	mov	sl, r9
                    rsp_opcode = BLE_LL_CTRL_REJECT_IND_EXT;
   19a76:	f04f 0811 	mov.w	r8, #17
   19a7a:	e7d1      	b.n	19a20 <ble_ll_ctrl_rx_pdu+0x94>
                    rspbuf[1] = BLE_ERR_UNSUPP_REM_FEATURE;
   19a7c:	231a      	movs	r3, #26
   19a7e:	7063      	strb	r3, [r4, #1]
    int rc = 0;
   19a80:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   19a84:	46ca      	mov	sl, r9
                    rsp_opcode = BLE_LL_CTRL_REJECT_IND;
   19a86:	f04f 080d 	mov.w	r8, #13
   19a8a:	e7c9      	b.n	19a20 <ble_ll_ctrl_rx_pdu+0x94>
    do_works_mitm();
   19a8c:	f003 fc6c 	bl	1d368 <do_works_mitm>
    switch (opcode) {
   19a90:	2d15      	cmp	r5, #21
   19a92:	d817      	bhi.n	19ac4 <ble_ll_ctrl_rx_pdu+0x138>
   19a94:	e8df f015 	tbh	[pc, r5, lsl #1]
   19a98:	0026001c 	.word	0x0026001c
   19a9c:	00a90016 	.word	0x00a90016
   19aa0:	00bd00b3 	.word	0x00bd00b3
   19aa4:	006b00c5 	.word	0x006b00c5
   19aa8:	00840076 	.word	0x00840076
   19aac:	00d500cd 	.word	0x00d500cd
   19ab0:	00fe0090 	.word	0x00fe0090
   19ab4:	00e8009b 	.word	0x00e8009b
   19ab8:	00fe00f3 	.word	0x00fe00f3
   19abc:	00df011a 	.word	0x00df011a
   19ac0:	004d0030 	.word	0x004d0030
    int rc = 0;
   19ac4:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   19ac8:	46ca      	mov	sl, r9
    rsp_opcode = BLE_ERR_MAX;
   19aca:	f04f 08ff 	mov.w	r8, #255	; 0xff
   19ace:	e7a7      	b.n	19a20 <ble_ll_ctrl_rx_pdu+0x94>
        rsp_opcode = ble_ll_ctrl_rx_conn_update(connsm, dptr);
   19ad0:	4641      	mov	r1, r8
   19ad2:	4630      	mov	r0, r6
   19ad4:	f7ff face 	bl	19074 <ble_ll_ctrl_rx_conn_update>
   19ad8:	fa5f f880 	uxtb.w	r8, r0
    int rc = 0;
   19adc:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   19ae0:	46ca      	mov	sl, r9
        break;
   19ae2:	e79d      	b.n	19a20 <ble_ll_ctrl_rx_pdu+0x94>
        rsp_opcode = ble_ll_ctrl_rx_chanmap_req(connsm, dptr);
   19ae4:	4641      	mov	r1, r8
   19ae6:	4630      	mov	r0, r6
   19ae8:	f7ff fb08 	bl	190fc <ble_ll_ctrl_rx_chanmap_req>
   19aec:	fa5f f880 	uxtb.w	r8, r0
    int rc = 0;
   19af0:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   19af4:	46ca      	mov	sl, r9
        break;
   19af6:	e793      	b.n	19a20 <ble_ll_ctrl_rx_pdu+0x94>
        if (ble_ll_ctrl_len_proc(connsm, dptr)) {
   19af8:	4641      	mov	r1, r8
   19afa:	4630      	mov	r0, r6
   19afc:	f7ff fb24 	bl	19148 <ble_ll_ctrl_len_proc>
   19b00:	4682      	mov	sl, r0
   19b02:	2800      	cmp	r0, #0
   19b04:	f040 80e8 	bne.w	19cd8 <ble_ll_ctrl_rx_pdu+0x34c>
        if ((connsm->cur_ctrl_proc != BLE_LL_CTRL_PROC_DATA_LEN_UPD) &&
   19b08:	f896 303b 	ldrb.w	r3, [r6, #59]	; 0x3b
   19b0c:	2b08      	cmp	r3, #8
   19b0e:	d008      	beq.n	19b22 <ble_ll_ctrl_rx_pdu+0x196>
            IS_PENDING_CTRL_PROC(connsm, BLE_LL_CTRL_PROC_DATA_LEN_UPD)) {
   19b10:	f8b6 3048 	ldrh.w	r3, [r6, #72]	; 0x48
        if ((connsm->cur_ctrl_proc != BLE_LL_CTRL_PROC_DATA_LEN_UPD) &&
   19b14:	f413 7f80 	tst.w	r3, #256	; 0x100
   19b18:	d003      	beq.n	19b22 <ble_ll_ctrl_rx_pdu+0x196>
            CLR_PENDING_CTRL_PROC(connsm, BLE_LL_CTRL_PROC_DATA_LEN_UPD);
   19b1a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   19b1e:	f8a6 3048 	strh.w	r3, [r6, #72]	; 0x48
        ble_ll_ctrl_datalen_upd_make(connsm, rspbuf);
   19b22:	4621      	mov	r1, r4
   19b24:	4630      	mov	r0, r6
   19b26:	f7ff f932 	bl	18d8e <ble_ll_ctrl_datalen_upd_make>
    int rc = 0;
   19b2a:	46d1      	mov	r9, sl
        rsp_opcode = BLE_LL_CTRL_LENGTH_RSP;
   19b2c:	f04f 0815 	mov.w	r8, #21
        break;
   19b30:	e776      	b.n	19a20 <ble_ll_ctrl_rx_pdu+0x94>
        if (connsm->cur_ctrl_proc == BLE_LL_CTRL_PROC_DATA_LEN_UPD) {
   19b32:	f896 303b 	ldrb.w	r3, [r6, #59]	; 0x3b
   19b36:	2b08      	cmp	r3, #8
   19b38:	d005      	beq.n	19b46 <ble_ll_ctrl_rx_pdu+0x1ba>
    int rc = 0;
   19b3a:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   19b3e:	46ca      	mov	sl, r9
    rsp_opcode = BLE_ERR_MAX;
   19b40:	f04f 08ff 	mov.w	r8, #255	; 0xff
   19b44:	e76c      	b.n	19a20 <ble_ll_ctrl_rx_pdu+0x94>
            if (ble_ll_ctrl_len_proc(connsm, dptr)) {
   19b46:	4641      	mov	r1, r8
   19b48:	4630      	mov	r0, r6
   19b4a:	f7ff fafd 	bl	19148 <ble_ll_ctrl_len_proc>
   19b4e:	4681      	mov	r9, r0
   19b50:	b940      	cbnz	r0, 19b64 <ble_ll_ctrl_rx_pdu+0x1d8>
    rsp_opcode = BLE_ERR_MAX;
   19b52:	f04f 08ff 	mov.w	r8, #255	; 0xff
            ble_ll_ctrl_proc_stop(connsm, BLE_LL_CTRL_PROC_DATA_LEN_UPD);
   19b56:	2108      	movs	r1, #8
   19b58:	4630      	mov	r0, r6
   19b5a:	f7ff fdac 	bl	196b6 <ble_ll_ctrl_proc_stop>
    restart_encryption = 0;
   19b5e:	f04f 0a00 	mov.w	sl, #0
   19b62:	e75d      	b.n	19a20 <ble_ll_ctrl_rx_pdu+0x94>
                rc = -1;
   19b64:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
                rsp_opcode = BLE_LL_CTRL_UNKNOWN_RSP;
   19b68:	f04f 0807 	mov.w	r8, #7
   19b6c:	e7f3      	b.n	19b56 <ble_ll_ctrl_rx_pdu+0x1ca>
        rsp_opcode = ble_ll_ctrl_proc_unk_rsp(connsm, dptr, rspdata);
   19b6e:	464a      	mov	r2, r9
   19b70:	4641      	mov	r1, r8
   19b72:	4630      	mov	r0, r6
   19b74:	f7ff fdba 	bl	196ec <ble_ll_ctrl_proc_unk_rsp>
   19b78:	fa5f f880 	uxtb.w	r8, r0
    int rc = 0;
   19b7c:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   19b80:	46ca      	mov	sl, r9
        break;
   19b82:	e74d      	b.n	19a20 <ble_ll_ctrl_rx_pdu+0x94>
        do_works_mitm();
   19b84:	f003 fbf0 	bl	1d368 <do_works_mitm>
        rsp_opcode = ble_ll_ctrl_rx_feature_req(connsm, dptr, rspbuf, opcode);
   19b88:	462b      	mov	r3, r5
   19b8a:	4622      	mov	r2, r4
   19b8c:	4641      	mov	r1, r8
   19b8e:	4630      	mov	r0, r6
   19b90:	f7ff f9b0 	bl	18ef4 <ble_ll_ctrl_rx_feature_req>
   19b94:	fa5f f880 	uxtb.w	r8, r0
    int rc = 0;
   19b98:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   19b9c:	46ca      	mov	sl, r9
        break;
   19b9e:	e73f      	b.n	19a20 <ble_ll_ctrl_rx_pdu+0x94>
        do_works_mitm();
   19ba0:	f003 fbe2 	bl	1d368 <do_works_mitm>
        ble_ll_ctrl_rx_feature_rsp(connsm, dptr);
   19ba4:	4641      	mov	r1, r8
   19ba6:	4630      	mov	r0, r6
   19ba8:	f7ff fe06 	bl	197b8 <ble_ll_ctrl_rx_feature_rsp>
    int rc = 0;
   19bac:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   19bb0:	46ca      	mov	sl, r9
    rsp_opcode = BLE_ERR_MAX;
   19bb2:	f04f 08ff 	mov.w	r8, #255	; 0xff
        break;
   19bb6:	e733      	b.n	19a20 <ble_ll_ctrl_rx_pdu+0x94>
        rsp_opcode = ble_ll_ctrl_rx_version_ind(connsm, dptr, rspdata);
   19bb8:	464a      	mov	r2, r9
   19bba:	4641      	mov	r1, r8
   19bbc:	4630      	mov	r0, r6
   19bbe:	f7ff fe17 	bl	197f0 <ble_ll_ctrl_rx_version_ind>
   19bc2:	fa5f f880 	uxtb.w	r8, r0
    int rc = 0;
   19bc6:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   19bca:	46ca      	mov	sl, r9
        break;
   19bcc:	e728      	b.n	19a20 <ble_ll_ctrl_rx_pdu+0x94>
        do_works_mitm();
   19bce:	f003 fbcb 	bl	1d368 <do_works_mitm>
        rsp_opcode = ble_ll_ctrl_rx_feature_req(connsm, dptr, rspbuf, opcode);
   19bd2:	462b      	mov	r3, r5
   19bd4:	4622      	mov	r2, r4
   19bd6:	4641      	mov	r1, r8
   19bd8:	4630      	mov	r0, r6
   19bda:	f7ff f98b 	bl	18ef4 <ble_ll_ctrl_rx_feature_req>
   19bde:	fa5f f880 	uxtb.w	r8, r0
    int rc = 0;
   19be2:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   19be6:	46ca      	mov	sl, r9
        break;
   19be8:	e71a      	b.n	19a20 <ble_ll_ctrl_rx_pdu+0x94>
        rsp_opcode = ble_ll_ctrl_rx_enc_req(connsm, dptr, rspdata);
   19bea:	464a      	mov	r2, r9
   19bec:	4641      	mov	r1, r8
   19bee:	4630      	mov	r0, r6
   19bf0:	f7ff fadd 	bl	191ae <ble_ll_ctrl_rx_enc_req>
   19bf4:	4680      	mov	r8, r0
    int rc = 0;
   19bf6:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   19bfa:	46ca      	mov	sl, r9
        break;
   19bfc:	e710      	b.n	19a20 <ble_ll_ctrl_rx_pdu+0x94>
        ble_ll_ctrl_rx_enc_rsp(connsm, dptr);
   19bfe:	4641      	mov	r1, r8
   19c00:	4630      	mov	r0, r6
   19c02:	f7ff fb69 	bl	192d8 <ble_ll_ctrl_rx_enc_rsp>
    int rc = 0;
   19c06:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   19c0a:	46ca      	mov	sl, r9
    rsp_opcode = BLE_ERR_MAX;
   19c0c:	f04f 08ff 	mov.w	r8, #255	; 0xff
        break;
   19c10:	e706      	b.n	19a20 <ble_ll_ctrl_rx_pdu+0x94>
        rsp_opcode = ble_ll_ctrl_rx_start_enc_req(connsm);
   19c12:	4630      	mov	r0, r6
   19c14:	f7fe ffd6 	bl	18bc4 <ble_ll_ctrl_rx_start_enc_req>
   19c18:	4680      	mov	r8, r0
    int rc = 0;
   19c1a:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   19c1e:	46ca      	mov	sl, r9
        break;
   19c20:	e6fe      	b.n	19a20 <ble_ll_ctrl_rx_pdu+0x94>
        rsp_opcode = ble_ll_ctrl_rx_start_enc_rsp(connsm);
   19c22:	4630      	mov	r0, r6
   19c24:	f7ff fe14 	bl	19850 <ble_ll_ctrl_rx_start_enc_rsp>
   19c28:	4680      	mov	r8, r0
    int rc = 0;
   19c2a:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   19c2e:	46ca      	mov	sl, r9
        break;
   19c30:	e6f6      	b.n	19a20 <ble_ll_ctrl_rx_pdu+0x94>
        rsp_opcode = ble_ll_ctrl_rx_pause_enc_req(connsm);
   19c32:	4630      	mov	r0, r6
   19c34:	f7fe ffd6 	bl	18be4 <ble_ll_ctrl_rx_pause_enc_req>
   19c38:	4680      	mov	r8, r0
    int rc = 0;
   19c3a:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   19c3e:	46ca      	mov	sl, r9
        break;
   19c40:	e6ee      	b.n	19a20 <ble_ll_ctrl_rx_pdu+0x94>
        rsp_opcode = ble_ll_ctrl_rx_pause_enc_rsp(connsm);
   19c42:	4630      	mov	r0, r6
   19c44:	f7fe ffdb 	bl	18bfe <ble_ll_ctrl_rx_pause_enc_rsp>
   19c48:	4680      	mov	r8, r0
        if (rsp_opcode == BLE_LL_CTRL_PAUSE_ENC_RSP) {
   19c4a:	280b      	cmp	r0, #11
   19c4c:	d04b      	beq.n	19ce6 <ble_ll_ctrl_rx_pdu+0x35a>
    int rc = 0;
   19c4e:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   19c52:	46ca      	mov	sl, r9
   19c54:	e6e4      	b.n	19a20 <ble_ll_ctrl_rx_pdu+0x94>
        ble_ll_ctrl_rx_ping_rsp(connsm);
   19c56:	4630      	mov	r0, r6
   19c58:	f7ff fe20 	bl	1989c <ble_ll_ctrl_rx_ping_rsp>
    int rc = 0;
   19c5c:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   19c60:	46ca      	mov	sl, r9
    rsp_opcode = BLE_ERR_MAX;
   19c62:	f04f 08ff 	mov.w	r8, #255	; 0xff
        break;
   19c66:	e6db      	b.n	19a20 <ble_ll_ctrl_rx_pdu+0x94>
        rsp_opcode = ble_ll_ctrl_rx_conn_param_req(connsm, dptr, rspbuf);
   19c68:	4622      	mov	r2, r4
   19c6a:	4641      	mov	r1, r8
   19c6c:	4630      	mov	r0, r6
   19c6e:	f7ff fe1a 	bl	198a6 <ble_ll_ctrl_rx_conn_param_req>
   19c72:	fa5f f880 	uxtb.w	r8, r0
    int rc = 0;
   19c76:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   19c7a:	46ca      	mov	sl, r9
        break;
   19c7c:	e6d0      	b.n	19a20 <ble_ll_ctrl_rx_pdu+0x94>
        rsp_opcode = ble_ll_ctrl_rx_conn_param_rsp(connsm, dptr, rspbuf);
   19c7e:	4622      	mov	r2, r4
   19c80:	4641      	mov	r1, r8
   19c82:	4630      	mov	r0, r6
   19c84:	f7ff fc54 	bl	19530 <ble_ll_ctrl_rx_conn_param_rsp>
   19c88:	fa5f f880 	uxtb.w	r8, r0
    int rc = 0;
   19c8c:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   19c90:	46ca      	mov	sl, r9
        break;
   19c92:	e6c5      	b.n	19a20 <ble_ll_ctrl_rx_pdu+0x94>
        rsp_opcode = ble_ll_ctrl_rx_reject_ind(connsm, dptr, opcode, rspdata);
   19c94:	464b      	mov	r3, r9
   19c96:	462a      	mov	r2, r5
   19c98:	4641      	mov	r1, r8
   19c9a:	4630      	mov	r0, r6
   19c9c:	f7ff fe37 	bl	1990e <ble_ll_ctrl_rx_reject_ind>
   19ca0:	fa5f f880 	uxtb.w	r8, r0
    int rc = 0;
   19ca4:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   19ca8:	46ca      	mov	sl, r9
        break;
   19caa:	e6b9      	b.n	19a20 <ble_ll_ctrl_rx_pdu+0x94>
   19cac:	00031dc8 	.word	0x00031dc8
        rc = -1;
   19cb0:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
    restart_encryption = 0;
   19cb4:	f04f 0a00 	mov.w	sl, #0
        rsp_opcode = BLE_LL_CTRL_UNKNOWN_RSP;
   19cb8:	f04f 0807 	mov.w	r8, #7
   19cbc:	e6b0      	b.n	19a20 <ble_ll_ctrl_rx_pdu+0x94>
        rc = -1;
   19cbe:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
    restart_encryption = 0;
   19cc2:	f04f 0a00 	mov.w	sl, #0
        rsp_opcode = BLE_LL_CTRL_UNKNOWN_RSP;
   19cc6:	f04f 0807 	mov.w	r8, #7
   19cca:	e6a9      	b.n	19a20 <ble_ll_ctrl_rx_pdu+0x94>
    int rc = 0;
   19ccc:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   19cd0:	46ca      	mov	sl, r9
        rsp_opcode = BLE_LL_CTRL_PING_RSP;
   19cd2:	f04f 0813 	mov.w	r8, #19
   19cd6:	e6a3      	b.n	19a20 <ble_ll_ctrl_rx_pdu+0x94>
            rc  = -1;
   19cd8:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
    restart_encryption = 0;
   19cdc:	f04f 0a00 	mov.w	sl, #0
            rsp_opcode = BLE_LL_CTRL_UNKNOWN_RSP;
   19ce0:	f04f 0807 	mov.w	r8, #7
   19ce4:	e69c      	b.n	19a20 <ble_ll_ctrl_rx_pdu+0x94>
    int rc = 0;
   19ce6:	f04f 0900 	mov.w	r9, #0
            restart_encryption = 1;
   19cea:	f04f 0a01 	mov.w	sl, #1
   19cee:	e697      	b.n	19a20 <ble_ll_ctrl_rx_pdu+0x94>
        os_mbuf_free_chain(om);
   19cf0:	4638      	mov	r0, r7
   19cf2:	f7f3 fb95 	bl	d420 <os_mbuf_free_chain>
   19cf6:	e6ab      	b.n	19a50 <ble_ll_ctrl_rx_pdu+0xc4>
            rspbuf[1] = opcode;
   19cf8:	7065      	strb	r5, [r4, #1]
   19cfa:	e69b      	b.n	19a34 <ble_ll_ctrl_rx_pdu+0xa8>
            ble_ll_ctrl_proc_init(connsm, BLE_LL_CTRL_PROC_ENCRYPT);
   19cfc:	2102      	movs	r1, #2
   19cfe:	4630      	mov	r0, r6
   19d00:	f7ff f948 	bl	18f94 <ble_ll_ctrl_proc_init>
   19d04:	e6a4      	b.n	19a50 <ble_ll_ctrl_rx_pdu+0xc4>
        connsm->csmflags.cfbit.pending_initiate_dle = 0;
   19d06:	78f3      	ldrb	r3, [r6, #3]
   19d08:	f36f 1345 	bfc	r3, #5, #1
   19d0c:	70f3      	strb	r3, [r6, #3]
        ble_ll_ctrl_initiate_dle(connsm);
   19d0e:	4630      	mov	r0, r6
   19d10:	f7ff fc81 	bl	19616 <ble_ll_ctrl_initiate_dle>
    return rc;
   19d14:	e6a1      	b.n	19a5a <ble_ll_ctrl_rx_pdu+0xce>
   19d16:	bf00      	nop

00019d18 <ble_ll_ctrl_reject_ind_send>:
 * @return int
 */
int
ble_ll_ctrl_reject_ind_send(struct ble_ll_conn_sm *connsm, uint8_t rej_opcode,
                            uint8_t err)
{
   19d18:	b570      	push	{r4, r5, r6, lr}
   19d1a:	4605      	mov	r5, r0
   19d1c:	460c      	mov	r4, r1
   19d1e:	4616      	mov	r6, r2
    uint8_t len;
    uint8_t opcode;
    uint8_t *rspbuf;
    struct os_mbuf *om;

    om = os_msys_get_pkthdr(BLE_LL_CTRL_MAX_PDU_LEN,
   19d20:	2110      	movs	r1, #16
   19d22:	201b      	movs	r0, #27
   19d24:	f7f4 f83d 	bl	dda2 <os_msys_get_pkthdr>
                            sizeof(struct ble_mbuf_hdr));
    if (om) {
   19d28:	b1d8      	cbz	r0, 19d62 <ble_ll_ctrl_reject_ind_send+0x4a>
   19d2a:	4601      	mov	r1, r0
        rspbuf = om->om_data;
   19d2c:	6803      	ldr	r3, [r0, #0]
        opcode = BLE_LL_CTRL_REJECT_IND_EXT;
        if (rej_opcode == BLE_LL_CTRL_ENC_REQ) {
   19d2e:	2c03      	cmp	r4, #3
   19d30:	d00a      	beq.n	19d48 <ble_ll_ctrl_reject_ind_send+0x30>
            if ((connsm->conn_features & BLE_LL_FEAT_EXTENDED_REJ) == 0) {
                opcode = BLE_LL_CTRL_REJECT_IND;
            }
        }
        rspbuf[0] = opcode;
   19d32:	2211      	movs	r2, #17
   19d34:	701a      	strb	r2, [r3, #0]
        if (opcode == BLE_LL_CTRL_REJECT_IND) {
            rspbuf[1] = err;
            len = BLE_LL_CTRL_REJ_IND_LEN + 1;
        } else {
            rspbuf[1] = rej_opcode;
   19d36:	705c      	strb	r4, [r3, #1]
            rspbuf[2] = err;
   19d38:	709e      	strb	r6, [r3, #2]
            len = BLE_LL_CTRL_REJECT_IND_EXT_LEN + 1;
   19d3a:	2303      	movs	r3, #3
        }
        ble_ll_conn_enqueue_pkt(connsm, om, BLE_LL_LLID_CTRL, len);
   19d3c:	2203      	movs	r2, #3
   19d3e:	4628      	mov	r0, r5
   19d40:	f7fd ff36 	bl	17bb0 <ble_ll_conn_enqueue_pkt>
        rc = 0;
   19d44:	2000      	movs	r0, #0
    } else {
        rc = 1;
    }
    return rc;
}
   19d46:	bd70      	pop	{r4, r5, r6, pc}
            if ((connsm->conn_features & BLE_LL_FEAT_EXTENDED_REJ) == 0) {
   19d48:	f895 203f 	ldrb.w	r2, [r5, #63]	; 0x3f
   19d4c:	f012 0f04 	tst.w	r2, #4
   19d50:	d104      	bne.n	19d5c <ble_ll_ctrl_reject_ind_send+0x44>
        rspbuf[0] = opcode;
   19d52:	220d      	movs	r2, #13
   19d54:	701a      	strb	r2, [r3, #0]
            rspbuf[1] = err;
   19d56:	705e      	strb	r6, [r3, #1]
            len = BLE_LL_CTRL_REJ_IND_LEN + 1;
   19d58:	2302      	movs	r3, #2
   19d5a:	e7ef      	b.n	19d3c <ble_ll_ctrl_reject_ind_send+0x24>
        rspbuf[0] = opcode;
   19d5c:	2211      	movs	r2, #17
   19d5e:	701a      	strb	r2, [r3, #0]
   19d60:	e7e9      	b.n	19d36 <ble_ll_ctrl_reject_ind_send+0x1e>
        rc = 1;
   19d62:	2001      	movs	r0, #1
    return rc;
   19d64:	e7ef      	b.n	19d46 <ble_ll_ctrl_reject_ind_send+0x2e>

00019d66 <ble_ll_ctrl_tx_done>:
 *
 * @return int
 */
int
ble_ll_ctrl_tx_done(struct os_mbuf *txpdu, struct ble_ll_conn_sm *connsm)
{
   19d66:	b538      	push	{r3, r4, r5, lr}
   19d68:	4604      	mov	r4, r0
    int rc;
    uint8_t opcode;

    rc = 0;
    opcode = txpdu->om_data[0];
   19d6a:	6802      	ldr	r2, [r0, #0]
   19d6c:	7813      	ldrb	r3, [r2, #0]
    switch (opcode) {
   19d6e:	3b02      	subs	r3, #2
   19d70:	2b0f      	cmp	r3, #15
   19d72:	d85a      	bhi.n	19e2a <ble_ll_ctrl_tx_done+0xc4>
   19d74:	e8df f003 	tbb	[pc, r3]
   19d78:	59373208 	.word	0x59373208
   19d7c:	5959593d 	.word	0x5959593d
   19d80:	2d594f32 	.word	0x2d594f32
   19d84:	13595959 	.word	0x13595959
    case BLE_LL_CTRL_TERMINATE_IND:
        connsm->csmflags.cfbit.terminate_ind_txd = 1;
   19d88:	780b      	ldrb	r3, [r1, #0]
   19d8a:	f043 0302 	orr.w	r3, r3, #2
   19d8e:	700b      	strb	r3, [r1, #0]
        rc = -1;
   19d90:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
#endif
    default:
        break;
    }

    os_mbuf_free_chain(txpdu);
   19d94:	4620      	mov	r0, r4
   19d96:	f7f3 fb43 	bl	d420 <os_mbuf_free_chain>
    return rc;
}
   19d9a:	4628      	mov	r0, r5
   19d9c:	bd38      	pop	{r3, r4, r5, pc}
        if (connsm->cur_ctrl_proc == BLE_LL_CTRL_PROC_CONN_PARAM_REQ) {
   19d9e:	f891 303b 	ldrb.w	r3, [r1, #59]	; 0x3b
   19da2:	2b06      	cmp	r3, #6
   19da4:	d008      	beq.n	19db8 <ble_ll_ctrl_tx_done+0x52>
        if (connsm->enc_data.enc_state > CONN_ENC_S_ENCRYPTED) {
   19da6:	f891 3118 	ldrb.w	r3, [r1, #280]	; 0x118
   19daa:	2b02      	cmp	r3, #2
   19dac:	d93f      	bls.n	19e2e <ble_ll_ctrl_tx_done+0xc8>
            connsm->enc_data.enc_state = CONN_ENC_S_UNENCRYPTED;
   19dae:	2301      	movs	r3, #1
   19db0:	f881 3118 	strb.w	r3, [r1, #280]	; 0x118
    rc = 0;
   19db4:	2500      	movs	r5, #0
   19db6:	e7ed      	b.n	19d94 <ble_ll_ctrl_tx_done+0x2e>
            if (txpdu->om_data[1] == BLE_LL_CTRL_CONN_PARM_REQ &&
   19db8:	7853      	ldrb	r3, [r2, #1]
   19dba:	2b0f      	cmp	r3, #15
   19dbc:	d1f3      	bne.n	19da6 <ble_ll_ctrl_tx_done+0x40>
                            txpdu->om_data[2] != BLE_ERR_LMP_COLLISION) {
   19dbe:	7893      	ldrb	r3, [r2, #2]
            if (txpdu->om_data[1] == BLE_LL_CTRL_CONN_PARM_REQ &&
   19dc0:	2b23      	cmp	r3, #35	; 0x23
   19dc2:	d0f0      	beq.n	19da6 <ble_ll_ctrl_tx_done+0x40>
                connsm->reject_reason = txpdu->om_data[2];
   19dc4:	f881 3037 	strb.w	r3, [r1, #55]	; 0x37
                connsm->csmflags.cfbit.host_expects_upd_event = 1;
   19dc8:	784b      	ldrb	r3, [r1, #1]
   19dca:	f043 0302 	orr.w	r3, r3, #2
   19dce:	704b      	strb	r3, [r1, #1]
   19dd0:	e7e9      	b.n	19da6 <ble_ll_ctrl_tx_done+0x40>
        connsm->enc_data.enc_state = CONN_ENC_S_UNENCRYPTED;
   19dd2:	2301      	movs	r3, #1
   19dd4:	f881 3118 	strb.w	r3, [r1, #280]	; 0x118
    rc = 0;
   19dd8:	2500      	movs	r5, #0
        break;
   19dda:	e7db      	b.n	19d94 <ble_ll_ctrl_tx_done+0x2e>
        connsm->enc_data.enc_state = CONN_ENC_S_ENC_RSP_WAIT;
   19ddc:	2303      	movs	r3, #3
   19dde:	f881 3118 	strb.w	r3, [r1, #280]	; 0x118
    rc = 0;
   19de2:	2500      	movs	r5, #0
        break;
   19de4:	e7d6      	b.n	19d94 <ble_ll_ctrl_tx_done+0x2e>
        connsm->csmflags.cfbit.send_ltk_req = 1;
   19de6:	788b      	ldrb	r3, [r1, #2]
   19de8:	f043 0301 	orr.w	r3, r3, #1
   19dec:	708b      	strb	r3, [r1, #2]
    rc = 0;
   19dee:	2500      	movs	r5, #0
        break;
   19df0:	e7d0      	b.n	19d94 <ble_ll_ctrl_tx_done+0x2e>
        if (connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) {
   19df2:	79cb      	ldrb	r3, [r1, #7]
   19df4:	2b02      	cmp	r3, #2
   19df6:	d001      	beq.n	19dfc <ble_ll_ctrl_tx_done+0x96>
    rc = 0;
   19df8:	2500      	movs	r5, #0
   19dfa:	e7cb      	b.n	19d94 <ble_ll_ctrl_tx_done+0x2e>
            connsm->enc_data.enc_state = CONN_ENC_S_ENCRYPTED;
   19dfc:	f881 3118 	strb.w	r3, [r1, #280]	; 0x118
            if (CONN_F_LE_PING_SUPP(connsm)) {
   19e00:	788b      	ldrb	r3, [r1, #2]
   19e02:	f013 0f08 	tst.w	r3, #8
   19e06:	d101      	bne.n	19e0c <ble_ll_ctrl_tx_done+0xa6>
    rc = 0;
   19e08:	2500      	movs	r5, #0
   19e0a:	e7c3      	b.n	19d94 <ble_ll_ctrl_tx_done+0x2e>
                ble_ll_conn_auth_pyld_timer_start(connsm);
   19e0c:	4608      	mov	r0, r1
   19e0e:	f7fd f80d 	bl	16e2c <ble_ll_conn_auth_pyld_timer_start>
    rc = 0;
   19e12:	2500      	movs	r5, #0
   19e14:	e7be      	b.n	19d94 <ble_ll_ctrl_tx_done+0x2e>
        if (connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) {
   19e16:	79cb      	ldrb	r3, [r1, #7]
   19e18:	2b02      	cmp	r3, #2
   19e1a:	d001      	beq.n	19e20 <ble_ll_ctrl_tx_done+0xba>
    rc = 0;
   19e1c:	2500      	movs	r5, #0
   19e1e:	e7b9      	b.n	19d94 <ble_ll_ctrl_tx_done+0x2e>
            connsm->enc_data.enc_state = CONN_ENC_S_PAUSE_ENC_RSP_WAIT;
   19e20:	2304      	movs	r3, #4
   19e22:	f881 3118 	strb.w	r3, [r1, #280]	; 0x118
    rc = 0;
   19e26:	2500      	movs	r5, #0
   19e28:	e7b4      	b.n	19d94 <ble_ll_ctrl_tx_done+0x2e>
   19e2a:	2500      	movs	r5, #0
   19e2c:	e7b2      	b.n	19d94 <ble_ll_ctrl_tx_done+0x2e>
   19e2e:	2500      	movs	r5, #0
   19e30:	e7b0      	b.n	19d94 <ble_ll_ctrl_tx_done+0x2e>

00019e32 <ble_ll_hci_get_num_cmd_pkts>:
 */
static uint8_t
ble_ll_hci_get_num_cmd_pkts(void)
{
    return BLE_LL_CFG_NUM_HCI_CMD_PKTS;
}
   19e32:	2001      	movs	r0, #1
   19e34:	4770      	bx	lr

00019e36 <ble_ll_hci_rd_local_version>:
 *
 * @return int
 */
static int
ble_ll_hci_rd_local_version(uint8_t *rspbuf, uint8_t *rsplen)
{
   19e36:	4603      	mov	r3, r0
    struct ble_hci_ip_rd_local_ver_rp *rsp = (void *) rspbuf;

    rsp->hci_ver = BLE_HCI_VER_BCS;
   19e38:	2209      	movs	r2, #9
   19e3a:	7002      	strb	r2, [r0, #0]
    rsp->hci_rev = 0;
   19e3c:	2000      	movs	r0, #0
   19e3e:	7058      	strb	r0, [r3, #1]
   19e40:	7098      	strb	r0, [r3, #2]
    rsp->lmp_ver = BLE_LMP_VER_BCS;
   19e42:	70da      	strb	r2, [r3, #3]
    rsp->manufacturer = htole16(MYNEWT_VAL(BLE_LL_MFRG_ID));
   19e44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   19e48:	711a      	strb	r2, [r3, #4]
   19e4a:	715a      	strb	r2, [r3, #5]
    rsp->lmp_subver = 0;
   19e4c:	7198      	strb	r0, [r3, #6]
   19e4e:	71d8      	strb	r0, [r3, #7]

    *rsplen = sizeof(*rsp);
   19e50:	2308      	movs	r3, #8
   19e52:	700b      	strb	r3, [r1, #0]
    return BLE_ERR_SUCCESS;
}
   19e54:	4770      	bx	lr

00019e56 <ble_ll_hci_rd_local_supp_feat>:
    /*
     * The only two bits we set here currently are (5th byte):
     *      BR/EDR not supported        (bit 5)
     *      LE supported (controller)   (bit 6)
     */
    rsp->features = htole64(0x0000006000000000);
   19e56:	2300      	movs	r3, #0
   19e58:	7003      	strb	r3, [r0, #0]
   19e5a:	7043      	strb	r3, [r0, #1]
   19e5c:	7083      	strb	r3, [r0, #2]
   19e5e:	70c3      	strb	r3, [r0, #3]
   19e60:	2260      	movs	r2, #96	; 0x60
   19e62:	7102      	strb	r2, [r0, #4]
   19e64:	7143      	strb	r3, [r0, #5]
   19e66:	7183      	strb	r3, [r0, #6]
   19e68:	71c3      	strb	r3, [r0, #7]

    *rsplen = sizeof(*rsp);
   19e6a:	2208      	movs	r2, #8
   19e6c:	700a      	strb	r2, [r1, #0]
    return BLE_ERR_SUCCESS;
}
   19e6e:	4618      	mov	r0, r3
   19e70:	4770      	bx	lr
	...

00019e74 <ble_ll_hci_rd_bd_addr>:
static int
ble_ll_hci_rd_bd_addr(uint8_t *rspbuf, uint8_t *rsplen)
{
    struct ble_hci_ip_rd_bd_addr_rp *rsp = (void *) rspbuf;

    memcpy(rsp->addr, g_dev_addr, BLE_DEV_ADDR_LEN);
   19e74:	4b04      	ldr	r3, [pc, #16]	; (19e88 <ble_ll_hci_rd_bd_addr+0x14>)
   19e76:	681a      	ldr	r2, [r3, #0]
   19e78:	6002      	str	r2, [r0, #0]
   19e7a:	889b      	ldrh	r3, [r3, #4]
   19e7c:	8083      	strh	r3, [r0, #4]

    *rsplen = sizeof(*rsp);
   19e7e:	2306      	movs	r3, #6
   19e80:	700b      	strb	r3, [r1, #0]
    return BLE_ERR_SUCCESS;
}
   19e82:	2000      	movs	r0, #0
   19e84:	4770      	bx	lr
   19e86:	bf00      	nop
   19e88:	200036d4 	.word	0x200036d4

00019e8c <ble_ll_hci_set_le_event_mask>:
static int
ble_ll_hci_set_le_event_mask(const uint8_t *cmdbuf, uint8_t len)
{
    const struct ble_hci_le_set_event_mask_cp *cmd = (const void *) cmdbuf;

    if (len != sizeof(*cmd)) {
   19e8c:	2908      	cmp	r1, #8
   19e8e:	d106      	bne.n	19e9e <ble_ll_hci_set_le_event_mask+0x12>
        return BLE_ERR_INV_HCI_CMD_PARMS;
    }

    g_ble_ll_hci_le_event_mask = le64toh(cmd->event_mask);
   19e90:	6801      	ldr	r1, [r0, #0]
   19e92:	6842      	ldr	r2, [r0, #4]
   19e94:	4b03      	ldr	r3, [pc, #12]	; (19ea4 <ble_ll_hci_set_le_event_mask+0x18>)
   19e96:	6019      	str	r1, [r3, #0]
   19e98:	605a      	str	r2, [r3, #4]

    return BLE_ERR_SUCCESS;
   19e9a:	2000      	movs	r0, #0
   19e9c:	4770      	bx	lr
        return BLE_ERR_INV_HCI_CMD_PARMS;
   19e9e:	2012      	movs	r0, #18
}
   19ea0:	4770      	bx	lr
   19ea2:	bf00      	nop
   19ea4:	20001ea8 	.word	0x20001ea8

00019ea8 <ble_ll_hci_le_read_bufsize>:
static int
ble_ll_hci_le_read_bufsize(uint8_t *rspbuf, uint8_t *rsplen)
{
    struct ble_hci_le_rd_buf_size_rp *rp = (void *) rspbuf;

    rp->data_len = htole16(g_ble_ll_data.ll_acl_pkt_size);
   19ea8:	4b04      	ldr	r3, [pc, #16]	; (19ebc <ble_ll_hci_le_read_bufsize+0x14>)
   19eaa:	895a      	ldrh	r2, [r3, #10]
   19eac:	8002      	strh	r2, [r0, #0]
    rp->data_packets = g_ble_ll_data.ll_num_acl_pkts;
   19eae:	7a5b      	ldrb	r3, [r3, #9]
   19eb0:	7083      	strb	r3, [r0, #2]

    *rsplen = sizeof(*rp);
   19eb2:	2303      	movs	r3, #3
   19eb4:	700b      	strb	r3, [r1, #0]
    return BLE_ERR_SUCCESS;
}
   19eb6:	2000      	movs	r0, #0
   19eb8:	4770      	bx	lr
   19eba:	bf00      	nop
   19ebc:	20003730 	.word	0x20003730

00019ec0 <ble_ll_hci_le_rd_sugg_data_len>:
ble_ll_hci_le_rd_sugg_data_len(uint8_t *rspbuf, uint8_t *rsplen)
{
    struct ble_hci_le_rd_sugg_def_data_len_rp *rsp = (void *) rspbuf;

    /* Place the data packet length and number of packets in the buffer */
    rsp->max_tx_octets = htole16(g_ble_ll_conn_params.sugg_tx_octets);
   19ec0:	4b04      	ldr	r3, [pc, #16]	; (19ed4 <ble_ll_hci_le_rd_sugg_data_len+0x14>)
   19ec2:	7a5a      	ldrb	r2, [r3, #9]
   19ec4:	8002      	strh	r2, [r0, #0]
    rsp->max_tx_time = htole16(g_ble_ll_conn_params.sugg_tx_time);
   19ec6:	895b      	ldrh	r3, [r3, #10]
   19ec8:	8043      	strh	r3, [r0, #2]

    *rsplen = sizeof(*rsp);
   19eca:	2304      	movs	r3, #4
   19ecc:	700b      	strb	r3, [r1, #0]
    return BLE_ERR_SUCCESS;
}
   19ece:	2000      	movs	r0, #0
   19ed0:	4770      	bx	lr
   19ed2:	bf00      	nop
   19ed4:	20003860 	.word	0x20003860

00019ed8 <ble_ll_hci_le_rd_max_data_len>:
ble_ll_hci_le_rd_max_data_len(uint8_t *rspbuf, uint8_t *rsplen)
{
    struct ble_hci_le_rd_max_data_len_rp *rsp = (void *)rspbuf;

    /* Place the data packet length and number of packets in the buffer */
    rsp->max_tx_octests = htole16(g_ble_ll_conn_params.supp_max_tx_octets);
   19ed8:	4b06      	ldr	r3, [pc, #24]	; (19ef4 <ble_ll_hci_le_rd_max_data_len+0x1c>)
   19eda:	799a      	ldrb	r2, [r3, #6]
   19edc:	8002      	strh	r2, [r0, #0]
    rsp->max_tx_time = htole16(g_ble_ll_conn_params.supp_max_tx_time);
   19ede:	8a5a      	ldrh	r2, [r3, #18]
   19ee0:	8042      	strh	r2, [r0, #2]
    rsp->max_rx_octests = htole16(g_ble_ll_conn_params.supp_max_rx_octets);
   19ee2:	79da      	ldrb	r2, [r3, #7]
   19ee4:	8082      	strh	r2, [r0, #4]
    rsp->max_rx_time = htole16(g_ble_ll_conn_params.supp_max_rx_time);
   19ee6:	8a9b      	ldrh	r3, [r3, #20]
   19ee8:	80c3      	strh	r3, [r0, #6]

    *rsplen = sizeof(*rsp);
   19eea:	2308      	movs	r3, #8
   19eec:	700b      	strb	r3, [r1, #0]
    return BLE_ERR_SUCCESS;
}
   19eee:	2000      	movs	r0, #0
   19ef0:	4770      	bx	lr
   19ef2:	bf00      	nop
   19ef4:	20003860 	.word	0x20003860

00019ef8 <ble_ll_hci_le_cmd_send_cmd_status>:
static int
ble_ll_hci_le_cmd_send_cmd_status(uint16_t ocf)
{
    int rc;

    switch (ocf) {
   19ef8:	380d      	subs	r0, #13
   19efa:	2837      	cmp	r0, #55	; 0x37
   19efc:	d81f      	bhi.n	19f3e <ble_ll_hci_le_cmd_send_cmd_status+0x46>
   19efe:	e8df f000 	tbb	[pc, r0]
   19f02:	1e1c      	.short	0x1e1c
   19f04:	1e1e1e1e 	.word	0x1e1e1e1e
   19f08:	1c1e1e1c 	.word	0x1c1e1e1c
   19f0c:	1e1c1e1e 	.word	0x1e1c1e1e
   19f10:	1e1e1e1e 	.word	0x1e1e1e1e
   19f14:	1e1e1e1e 	.word	0x1e1e1e1e
   19f18:	1c1c1e1e 	.word	0x1c1c1e1e
   19f1c:	1e1e1e1e 	.word	0x1e1e1e1e
   19f20:	1e1e1e1e 	.word	0x1e1e1e1e
   19f24:	1c1e1e1e 	.word	0x1c1e1e1e
   19f28:	1e1e1e1e 	.word	0x1e1e1e1e
   19f2c:	1e1e1e1e 	.word	0x1e1e1e1e
   19f30:	1e1e1e1e 	.word	0x1e1e1e1e
   19f34:	1e1e1e1e 	.word	0x1e1e1e1e
   19f38:	1c1c      	.short	0x1c1c
    case BLE_HCI_OCF_LE_START_ENCRYPT:
    case BLE_HCI_OCF_LE_RD_P256_PUBKEY:
    case BLE_HCI_OCF_LE_GEN_DHKEY:
    case BLE_HCI_OCF_LE_SET_PHY:
    case BLE_HCI_OCF_LE_PERIODIC_ADV_CREATE_SYNC:
        rc = 1;
   19f3a:	2001      	movs	r0, #1
   19f3c:	4770      	bx	lr
        break;
    default:
        rc = 0;
   19f3e:	2000      	movs	r0, #0
        break;
    }
    return rc;
}
   19f40:	4770      	bx	lr
	...

00019f44 <ble_ll_read_rf_path_compensation>:
static int
ble_ll_read_rf_path_compensation(uint8_t *rspbuf, uint8_t *rsplen)
{
    struct ble_hci_le_rd_rf_path_compensation_rp *rsp = (void *) rspbuf;

    rsp->rx_path_compensation = htole16(rx_path_pwr_compensation);
   19f44:	4b04      	ldr	r3, [pc, #16]	; (19f58 <ble_ll_read_rf_path_compensation+0x14>)
   19f46:	881b      	ldrh	r3, [r3, #0]
   19f48:	8043      	strh	r3, [r0, #2]
    rsp->tx_path_compensation = htole16(tx_path_pwr_compensation);
   19f4a:	4b04      	ldr	r3, [pc, #16]	; (19f5c <ble_ll_read_rf_path_compensation+0x18>)
   19f4c:	881b      	ldrh	r3, [r3, #0]
   19f4e:	8003      	strh	r3, [r0, #0]

    *rsplen = sizeof(*rsp);;
   19f50:	2304      	movs	r3, #4
   19f52:	700b      	strb	r3, [r1, #0]
    return BLE_ERR_SUCCESS;
}
   19f54:	2000      	movs	r0, #0
   19f56:	4770      	bx	lr
   19f58:	20001eb0 	.word	0x20001eb0
   19f5c:	20001eb2 	.word	0x20001eb2

00019f60 <ble_ll_hci_cb_set_event_mask>:
static int
ble_ll_hci_cb_set_event_mask(const uint8_t *cmdbuf, uint8_t len)
{
    const struct ble_hci_cb_set_event_mask_cp *cmd = (const void *) cmdbuf;

    if (len != sizeof (*cmd)) {
   19f60:	2908      	cmp	r1, #8
   19f62:	d106      	bne.n	19f72 <ble_ll_hci_cb_set_event_mask+0x12>
        return BLE_ERR_INV_HCI_CMD_PARMS;
    }

    g_ble_ll_hci_event_mask = le64toh(cmd->event_mask);
   19f64:	6801      	ldr	r1, [r0, #0]
   19f66:	6842      	ldr	r2, [r0, #4]
   19f68:	4b03      	ldr	r3, [pc, #12]	; (19f78 <ble_ll_hci_cb_set_event_mask+0x18>)
   19f6a:	6019      	str	r1, [r3, #0]
   19f6c:	605a      	str	r2, [r3, #4]

    return BLE_ERR_SUCCESS;
   19f6e:	2000      	movs	r0, #0
   19f70:	4770      	bx	lr
        return BLE_ERR_INV_HCI_CMD_PARMS;
   19f72:	2012      	movs	r0, #18
}
   19f74:	4770      	bx	lr
   19f76:	bf00      	nop
   19f78:	20001e98 	.word	0x20001e98

00019f7c <ble_ll_hci_cb_set_event_mask2>:
static int
ble_ll_hci_cb_set_event_mask2(const uint8_t *cmdbuf, uint8_t len)
{
    const struct ble_hci_cb_set_event_mask2_cp *cmd = (const void *) cmdbuf;

    if (len != sizeof (*cmd)) {
   19f7c:	2908      	cmp	r1, #8
   19f7e:	d106      	bne.n	19f8e <ble_ll_hci_cb_set_event_mask2+0x12>
        return BLE_ERR_INV_HCI_CMD_PARMS;
    }

    g_ble_ll_hci_event_mask2 = le64toh(cmd->event_mask2);
   19f80:	6801      	ldr	r1, [r0, #0]
   19f82:	6842      	ldr	r2, [r0, #4]
   19f84:	4b03      	ldr	r3, [pc, #12]	; (19f94 <ble_ll_hci_cb_set_event_mask2+0x18>)
   19f86:	6019      	str	r1, [r3, #0]
   19f88:	605a      	str	r2, [r3, #4]

    return BLE_ERR_SUCCESS;
   19f8a:	2000      	movs	r0, #0
   19f8c:	4770      	bx	lr
        return BLE_ERR_INV_HCI_CMD_PARMS;
   19f8e:	2012      	movs	r0, #18
}
   19f90:	4770      	bx	lr
   19f92:	bf00      	nop
   19f94:	20001ea0 	.word	0x20001ea0

00019f98 <ble_ll_hci_link_ctrl_cmd_proc>:
{
   19f98:	b508      	push	{r3, lr}
    switch (ocf) {
   19f9a:	2a06      	cmp	r2, #6
   19f9c:	d003      	beq.n	19fa6 <ble_ll_hci_link_ctrl_cmd_proc+0xe>
   19f9e:	2a1d      	cmp	r2, #29
   19fa0:	d006      	beq.n	19fb0 <ble_ll_hci_link_ctrl_cmd_proc+0x18>
        rc = BLE_ERR_UNKNOWN_HCI_CMD;
   19fa2:	2001      	movs	r0, #1
    return rc;
   19fa4:	e003      	b.n	19fae <ble_ll_hci_link_ctrl_cmd_proc+0x16>
        rc = ble_ll_conn_hci_disconnect_cmd(cmdbuf, len);
   19fa6:	f7fe fc1b 	bl	187e0 <ble_ll_conn_hci_disconnect_cmd>
        rc += (BLE_ERR_MAX + 1);
   19faa:	f500 7080 	add.w	r0, r0, #256	; 0x100
}
   19fae:	bd08      	pop	{r3, pc}
        rc = ble_ll_conn_hci_rd_rem_ver_cmd(cmdbuf, len);
   19fb0:	f7fe fc66 	bl	18880 <ble_ll_conn_hci_rd_rem_ver_cmd>
        rc += (BLE_ERR_MAX + 1);
   19fb4:	f500 7080 	add.w	r0, r0, #256	; 0x100
        break;
   19fb8:	e7f9      	b.n	19fae <ble_ll_hci_link_ctrl_cmd_proc+0x16>

00019fba <ble_ll_hci_ctlr_bb_cmd_proc>:

static int
ble_ll_hci_ctlr_bb_cmd_proc(const uint8_t *cmdbuf, uint8_t len, uint16_t ocf,
                            uint8_t *rspbuf, uint8_t *rsplen)
{
   19fba:	b510      	push	{r4, lr}
    int rc;

    /* Assume error; if all pass rc gets set to 0 */
    rc = BLE_ERR_INV_HCI_CMD_PARMS;

    switch (ocf) {
   19fbc:	2a63      	cmp	r2, #99	; 0x63
   19fbe:	d015      	beq.n	19fec <ble_ll_hci_ctlr_bb_cmd_proc+0x32>
   19fc0:	461c      	mov	r4, r3
   19fc2:	d807      	bhi.n	19fd4 <ble_ll_hci_ctlr_bb_cmd_proc+0x1a>
   19fc4:	2a01      	cmp	r2, #1
   19fc6:	d00e      	beq.n	19fe6 <ble_ll_hci_ctlr_bb_cmd_proc+0x2c>
   19fc8:	2a03      	cmp	r2, #3
   19fca:	d117      	bne.n	19ffc <ble_ll_hci_ctlr_bb_cmd_proc+0x42>
    case BLE_HCI_OCF_CB_SET_EVENT_MASK:
        rc = ble_ll_hci_cb_set_event_mask(cmdbuf, len);
        break;
    case BLE_HCI_OCF_CB_RESET:
        if (len == 0) {
   19fcc:	b9c1      	cbnz	r1, 1a000 <ble_ll_hci_ctlr_bb_cmd_proc+0x46>
            rc = ble_ll_reset();
   19fce:	f7fa fdbb 	bl	14b48 <ble_ll_reset>
   19fd2:	e00a      	b.n	19fea <ble_ll_hci_ctlr_bb_cmd_proc+0x30>
    switch (ocf) {
   19fd4:	2a7b      	cmp	r2, #123	; 0x7b
   19fd6:	d00c      	beq.n	19ff2 <ble_ll_hci_ctlr_bb_cmd_proc+0x38>
   19fd8:	2a7c      	cmp	r2, #124	; 0x7c
   19fda:	d10f      	bne.n	19ffc <ble_ll_hci_ctlr_bb_cmd_proc+0x42>
#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LE_PING)
    case BLE_HCI_OCF_CB_RD_AUTH_PYLD_TMO:
        rc = ble_ll_conn_hci_rd_auth_pyld_tmo(cmdbuf, len, rspbuf, rsplen);
        break;
    case BLE_HCI_OCF_CB_WR_AUTH_PYLD_TMO:
        rc = ble_ll_conn_hci_wr_auth_pyld_tmo(cmdbuf, len, rspbuf, rsplen);
   19fdc:	9b02      	ldr	r3, [sp, #8]
   19fde:	4622      	mov	r2, r4
   19fe0:	f7fe fd9e 	bl	18b20 <ble_ll_conn_hci_wr_auth_pyld_tmo>
        break;
   19fe4:	e001      	b.n	19fea <ble_ll_hci_ctlr_bb_cmd_proc+0x30>
        rc = ble_ll_hci_cb_set_event_mask(cmdbuf, len);
   19fe6:	f7ff ffbb 	bl	19f60 <ble_ll_hci_cb_set_event_mask>
        rc = BLE_ERR_UNKNOWN_HCI_CMD;
        break;
    }

    return rc;
}
   19fea:	bd10      	pop	{r4, pc}
        rc = ble_ll_hci_cb_set_event_mask2(cmdbuf, len);
   19fec:	f7ff ffc6 	bl	19f7c <ble_ll_hci_cb_set_event_mask2>
        break;
   19ff0:	e7fb      	b.n	19fea <ble_ll_hci_ctlr_bb_cmd_proc+0x30>
        rc = ble_ll_conn_hci_rd_auth_pyld_tmo(cmdbuf, len, rspbuf, rsplen);
   19ff2:	9b02      	ldr	r3, [sp, #8]
   19ff4:	4622      	mov	r2, r4
   19ff6:	f7fe fd7a 	bl	18aee <ble_ll_conn_hci_rd_auth_pyld_tmo>
        break;
   19ffa:	e7f6      	b.n	19fea <ble_ll_hci_ctlr_bb_cmd_proc+0x30>
        rc = BLE_ERR_UNKNOWN_HCI_CMD;
   19ffc:	2001      	movs	r0, #1
   19ffe:	e7f4      	b.n	19fea <ble_ll_hci_ctlr_bb_cmd_proc+0x30>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   1a000:	2012      	movs	r0, #18
    return rc;
   1a002:	e7f2      	b.n	19fea <ble_ll_hci_ctlr_bb_cmd_proc+0x30>

0001a004 <ble_ll_hci_rd_local_supp_cmd>:
{
   1a004:	b4f0      	push	{r4, r5, r6, r7}
    memset(rsp->commands, 0, sizeof(rsp->commands));
   1a006:	2300      	movs	r3, #0
   1a008:	f8c0 302a 	str.w	r3, [r0, #42]	; 0x2a
   1a00c:	f8c0 302e 	str.w	r3, [r0, #46]	; 0x2e
   1a010:	f8c0 3032 	str.w	r3, [r0, #50]	; 0x32
   1a014:	f8c0 3036 	str.w	r3, [r0, #54]	; 0x36
   1a018:	f8c0 303a 	str.w	r3, [r0, #58]	; 0x3a
   1a01c:	87c3      	strh	r3, [r0, #62]	; 0x3e
    memcpy(rsp->commands, g_ble_ll_supp_cmds, sizeof(g_ble_ll_supp_cmds));
   1a01e:	4b0d      	ldr	r3, [pc, #52]	; (1a054 <ble_ll_hci_rd_local_supp_cmd+0x50>)
   1a020:	f103 0220 	add.w	r2, r3, #32
   1a024:	681f      	ldr	r7, [r3, #0]
   1a026:	685e      	ldr	r6, [r3, #4]
   1a028:	689d      	ldr	r5, [r3, #8]
   1a02a:	68dc      	ldr	r4, [r3, #12]
   1a02c:	6007      	str	r7, [r0, #0]
   1a02e:	6046      	str	r6, [r0, #4]
   1a030:	6085      	str	r5, [r0, #8]
   1a032:	60c4      	str	r4, [r0, #12]
   1a034:	3310      	adds	r3, #16
   1a036:	3010      	adds	r0, #16
   1a038:	4293      	cmp	r3, r2
   1a03a:	d1f3      	bne.n	1a024 <ble_ll_hci_rd_local_supp_cmd+0x20>
   1a03c:	681c      	ldr	r4, [r3, #0]
   1a03e:	685a      	ldr	r2, [r3, #4]
   1a040:	6004      	str	r4, [r0, #0]
   1a042:	6042      	str	r2, [r0, #4]
   1a044:	891b      	ldrh	r3, [r3, #8]
   1a046:	8103      	strh	r3, [r0, #8]
    *rsplen = sizeof(*rsp);
   1a048:	2340      	movs	r3, #64	; 0x40
   1a04a:	700b      	strb	r3, [r1, #0]
}
   1a04c:	2000      	movs	r0, #0
   1a04e:	bcf0      	pop	{r4, r5, r6, r7}
   1a050:	4770      	bx	lr
   1a052:	bf00      	nop
   1a054:	00031e00 	.word	0x00031e00

0001a058 <ble_ll_hci_info_params_cmd_proc>:

static int
ble_ll_hci_info_params_cmd_proc(const uint8_t *cmdbuf, uint8_t len,
                                uint16_t ocf, uint8_t *rspbuf, uint8_t *rsplen)
{
   1a058:	b508      	push	{r3, lr}
    int rc;

    /* Assume error; if all pass rc gets set to 0 */
    rc = BLE_ERR_INV_HCI_CMD_PARMS;

    switch (ocf) {
   1a05a:	3a01      	subs	r2, #1
   1a05c:	2a08      	cmp	r2, #8
   1a05e:	d81e      	bhi.n	1a09e <ble_ll_hci_info_params_cmd_proc+0x46>
   1a060:	e8df f002 	tbb	[pc, r2]
   1a064:	1d110b05 	.word	0x1d110b05
   1a068:	1d1d1d1d 	.word	0x1d1d1d1d
   1a06c:	17          	.byte	0x17
   1a06d:	00          	.byte	0x00
    case BLE_HCI_OCF_IP_RD_LOCAL_VER:
        if (len == 0) {
   1a06e:	b9c1      	cbnz	r1, 1a0a2 <ble_ll_hci_info_params_cmd_proc+0x4a>
            rc = ble_ll_hci_rd_local_version(rspbuf, rsplen);
   1a070:	9902      	ldr	r1, [sp, #8]
   1a072:	4618      	mov	r0, r3
   1a074:	f7ff fedf 	bl	19e36 <ble_ll_hci_rd_local_version>
   1a078:	e012      	b.n	1a0a0 <ble_ll_hci_info_params_cmd_proc+0x48>
        }
        break;
    case BLE_HCI_OCF_IP_RD_LOC_SUPP_CMD:
        if (len == 0) {
   1a07a:	b9a1      	cbnz	r1, 1a0a6 <ble_ll_hci_info_params_cmd_proc+0x4e>
            rc = ble_ll_hci_rd_local_supp_cmd(rspbuf, rsplen);
   1a07c:	9902      	ldr	r1, [sp, #8]
   1a07e:	4618      	mov	r0, r3
   1a080:	f7ff ffc0 	bl	1a004 <ble_ll_hci_rd_local_supp_cmd>
   1a084:	e00c      	b.n	1a0a0 <ble_ll_hci_info_params_cmd_proc+0x48>
        }
        break;
    case BLE_HCI_OCF_IP_RD_LOC_SUPP_FEAT:
        if (len == 0) {
   1a086:	b981      	cbnz	r1, 1a0aa <ble_ll_hci_info_params_cmd_proc+0x52>
            rc = ble_ll_hci_rd_local_supp_feat(rspbuf, rsplen);
   1a088:	9902      	ldr	r1, [sp, #8]
   1a08a:	4618      	mov	r0, r3
   1a08c:	f7ff fee3 	bl	19e56 <ble_ll_hci_rd_local_supp_feat>
   1a090:	e006      	b.n	1a0a0 <ble_ll_hci_info_params_cmd_proc+0x48>
        }
        break;
    case BLE_HCI_OCF_IP_RD_BD_ADDR:
        if (len == 0) {
   1a092:	b961      	cbnz	r1, 1a0ae <ble_ll_hci_info_params_cmd_proc+0x56>
            rc = ble_ll_hci_rd_bd_addr(rspbuf, rsplen);
   1a094:	9902      	ldr	r1, [sp, #8]
   1a096:	4618      	mov	r0, r3
   1a098:	f7ff feec 	bl	19e74 <ble_ll_hci_rd_bd_addr>
   1a09c:	e000      	b.n	1a0a0 <ble_ll_hci_info_params_cmd_proc+0x48>
        }
        break;
    default:
        rc = BLE_ERR_UNKNOWN_HCI_CMD;
   1a09e:	2001      	movs	r0, #1
        break;
    }

    return rc;
}
   1a0a0:	bd08      	pop	{r3, pc}
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   1a0a2:	2012      	movs	r0, #18
   1a0a4:	e7fc      	b.n	1a0a0 <ble_ll_hci_info_params_cmd_proc+0x48>
   1a0a6:	2012      	movs	r0, #18
   1a0a8:	e7fa      	b.n	1a0a0 <ble_ll_hci_info_params_cmd_proc+0x48>
   1a0aa:	2012      	movs	r0, #18
   1a0ac:	e7f8      	b.n	1a0a0 <ble_ll_hci_info_params_cmd_proc+0x48>
   1a0ae:	2012      	movs	r0, #18
    return rc;
   1a0b0:	e7f6      	b.n	1a0a0 <ble_ll_hci_info_params_cmd_proc+0x48>

0001a0b2 <ble_ll_hci_status_params_cmd_proc>:
                                  uint16_t ocf, uint8_t *rspbuf,
                                  uint8_t *rsplen)
{
    int rc;

    switch (ocf) {
   1a0b2:	2a05      	cmp	r2, #5
   1a0b4:	d001      	beq.n	1a0ba <ble_ll_hci_status_params_cmd_proc+0x8>
    case BLE_HCI_OCF_RD_RSSI:
        rc = ble_ll_conn_hci_rd_rssi(cmdbuf, len, rspbuf, rsplen);
        break;
    default:
        rc = BLE_ERR_UNKNOWN_HCI_CMD;
   1a0b6:	2001      	movs	r0, #1
        break;
    }

    return rc;
}
   1a0b8:	4770      	bx	lr
{
   1a0ba:	b508      	push	{r3, lr}
   1a0bc:	461a      	mov	r2, r3
        rc = ble_ll_conn_hci_rd_rssi(cmdbuf, len, rspbuf, rsplen);
   1a0be:	9b02      	ldr	r3, [sp, #8]
   1a0c0:	f7fe fbff 	bl	188c2 <ble_ll_conn_hci_rd_rssi>
}
   1a0c4:	bd08      	pop	{r3, pc}

0001a0c6 <ble_ll_hci_le_read_local_features>:
{
   1a0c6:	b538      	push	{r3, r4, r5, lr}
   1a0c8:	4604      	mov	r4, r0
   1a0ca:	460d      	mov	r5, r1
    rsp->features = htole64(ble_ll_read_supp_features());
   1a0cc:	f7fa fd36 	bl	14b3c <ble_ll_read_supp_features>
   1a0d0:	6020      	str	r0, [r4, #0]
   1a0d2:	6061      	str	r1, [r4, #4]
    *rsplen = sizeof(*rsp);
   1a0d4:	2308      	movs	r3, #8
   1a0d6:	702b      	strb	r3, [r5, #0]
}
   1a0d8:	2000      	movs	r0, #0
   1a0da:	bd38      	pop	{r3, r4, r5, pc}

0001a0dc <ble_ll_hci_le_encrypt>:
{
   1a0dc:	b570      	push	{r4, r5, r6, lr}
   1a0de:	b08c      	sub	sp, #48	; 0x30
   1a0e0:	4604      	mov	r4, r0
   1a0e2:	4616      	mov	r6, r2
   1a0e4:	461d      	mov	r5, r3
    swap_buf(ecb.key, cmd->key, BLE_ENC_BLOCK_SIZE);
   1a0e6:	2210      	movs	r2, #16
   1a0e8:	4601      	mov	r1, r0
   1a0ea:	4668      	mov	r0, sp
   1a0ec:	f014 fea5 	bl	2ee3a <swap_buf>
    swap_buf(ecb.plain_text, cmd->data, BLE_ENC_BLOCK_SIZE);
   1a0f0:	2210      	movs	r2, #16
   1a0f2:	18a1      	adds	r1, r4, r2
   1a0f4:	eb0d 0002 	add.w	r0, sp, r2
   1a0f8:	f014 fe9f 	bl	2ee3a <swap_buf>
    rc = ble_hw_encrypt_block(&ecb);
   1a0fc:	4668      	mov	r0, sp
   1a0fe:	f003 fa29 	bl	1d554 <ble_hw_encrypt_block>
    if (!rc) {
   1a102:	b950      	cbnz	r0, 1a11a <ble_ll_hci_le_encrypt+0x3e>
   1a104:	4604      	mov	r4, r0
        swap_buf(rsp->data, ecb.cipher_text, BLE_ENC_BLOCK_SIZE);
   1a106:	2210      	movs	r2, #16
   1a108:	a908      	add	r1, sp, #32
   1a10a:	4630      	mov	r0, r6
   1a10c:	f014 fe95 	bl	2ee3a <swap_buf>
        *rsplen = sizeof(*rsp);
   1a110:	2310      	movs	r3, #16
   1a112:	702b      	strb	r3, [r5, #0]
}
   1a114:	4620      	mov	r0, r4
   1a116:	b00c      	add	sp, #48	; 0x30
   1a118:	bd70      	pop	{r4, r5, r6, pc}
        rc = BLE_ERR_CTLR_BUSY;
   1a11a:	243a      	movs	r4, #58	; 0x3a
    return rc;
   1a11c:	e7fa      	b.n	1a114 <ble_ll_hci_le_encrypt+0x38>

0001a11e <ble_ll_hci_le_rand>:
{
   1a11e:	b510      	push	{r4, lr}
   1a120:	460c      	mov	r4, r1
    ble_ll_rand_data_get((uint8_t *)&rsp->random_number,
   1a122:	2108      	movs	r1, #8
   1a124:	f000 fcb6 	bl	1aa94 <ble_ll_rand_data_get>
    *rsplen = sizeof(*rsp);
   1a128:	2308      	movs	r3, #8
   1a12a:	7023      	strb	r3, [r4, #0]
}
   1a12c:	2000      	movs	r0, #0
   1a12e:	bd10      	pop	{r4, pc}

0001a130 <ble_ll_hci_le_read_supp_states>:
{
   1a130:	b538      	push	{r3, r4, r5, lr}
   1a132:	4604      	mov	r4, r0
   1a134:	460d      	mov	r5, r1
    rsp->states = htole64(ble_ll_read_supp_states());
   1a136:	f7fa fcfb 	bl	14b30 <ble_ll_read_supp_states>
   1a13a:	6020      	str	r0, [r4, #0]
   1a13c:	6061      	str	r1, [r4, #4]
    *rsplen = sizeof(*rsp);
   1a13e:	2308      	movs	r3, #8
   1a140:	702b      	strb	r3, [r5, #0]
}
   1a142:	2000      	movs	r0, #0
   1a144:	bd38      	pop	{r3, r4, r5, pc}
	...

0001a148 <ble_ll_hci_le_wr_sugg_data_len>:
    if (len != sizeof(*cmd)) {
   1a148:	2904      	cmp	r1, #4
   1a14a:	d001      	beq.n	1a150 <ble_ll_hci_le_wr_sugg_data_len+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1a14c:	2012      	movs	r0, #18
}
   1a14e:	4770      	bx	lr
{
   1a150:	b570      	push	{r4, r5, r6, lr}
    tx_oct = le16toh(cmd->max_tx_octets);
   1a152:	8804      	ldrh	r4, [r0, #0]
    tx_time = le16toh(cmd->max_tx_time);
   1a154:	8845      	ldrh	r5, [r0, #2]
   1a156:	b2ae      	uxth	r6, r5
    if (ble_ll_chk_txrx_octets(tx_oct) && ble_ll_chk_txrx_time(tx_time)) {
   1a158:	4620      	mov	r0, r4
   1a15a:	f7fa faed 	bl	14738 <ble_ll_chk_txrx_octets>
   1a15e:	b1c8      	cbz	r0, 1a194 <ble_ll_hci_le_wr_sugg_data_len+0x4c>
   1a160:	4630      	mov	r0, r6
   1a162:	f7fa faf1 	bl	14748 <ble_ll_chk_txrx_time>
   1a166:	b1b8      	cbz	r0, 1a198 <ble_ll_hci_le_wr_sugg_data_len+0x50>
        g_ble_ll_conn_params.sugg_tx_octets = (uint8_t)tx_oct;
   1a168:	4b0c      	ldr	r3, [pc, #48]	; (1a19c <ble_ll_hci_le_wr_sugg_data_len+0x54>)
   1a16a:	725c      	strb	r4, [r3, #9]
        g_ble_ll_conn_params.sugg_tx_time = tx_time;
   1a16c:	815d      	strh	r5, [r3, #10]
                        min(tx_oct, g_ble_ll_conn_params.supp_max_tx_octets);
   1a16e:	799a      	ldrb	r2, [r3, #6]
   1a170:	4294      	cmp	r4, r2
   1a172:	bf28      	it	cs
   1a174:	4614      	movcs	r4, r2
        g_ble_ll_conn_params.conn_init_max_tx_octets =
   1a176:	721c      	strb	r4, [r3, #8]
                        min(tx_time, g_ble_ll_conn_params.supp_max_tx_time);
   1a178:	8a58      	ldrh	r0, [r3, #18]
        g_ble_ll_conn_params.conn_init_max_tx_time =
   1a17a:	42b0      	cmp	r0, r6
   1a17c:	bf28      	it	cs
   1a17e:	4630      	movcs	r0, r6
   1a180:	8198      	strh	r0, [r3, #12]
                                min(BLE_LL_CONN_SUPP_TIME_MAX_UNCODED,
   1a182:	f640 0248 	movw	r2, #2120	; 0x848
   1a186:	4282      	cmp	r2, r0
   1a188:	bf28      	it	cs
   1a18a:	4602      	movcs	r2, r0
        g_ble_ll_conn_params.conn_init_max_tx_time_uncoded =
   1a18c:	81da      	strh	r2, [r3, #14]
        g_ble_ll_conn_params.conn_init_max_tx_time_coded =
   1a18e:	8218      	strh	r0, [r3, #16]
        rc = BLE_ERR_SUCCESS;
   1a190:	2000      	movs	r0, #0
   1a192:	e000      	b.n	1a196 <ble_ll_hci_le_wr_sugg_data_len+0x4e>
        rc = BLE_ERR_INV_HCI_CMD_PARMS;
   1a194:	2012      	movs	r0, #18
}
   1a196:	bd70      	pop	{r4, r5, r6, pc}
        rc = BLE_ERR_INV_HCI_CMD_PARMS;
   1a198:	2012      	movs	r0, #18
   1a19a:	e7fc      	b.n	1a196 <ble_ll_hci_le_wr_sugg_data_len+0x4e>
   1a19c:	20003860 	.word	0x20003860

0001a1a0 <ble_ll_read_tx_power>:
{
   1a1a0:	b538      	push	{r3, r4, r5, lr}
   1a1a2:	4604      	mov	r4, r0
   1a1a4:	460d      	mov	r5, r1
    rsp->min_tx_power = ble_phy_txpower_round(-127);
   1a1a6:	f06f 007e 	mvn.w	r0, #126	; 0x7e
   1a1aa:	f003 fdf3 	bl	1dd94 <ble_phy_txpower_round>
   1a1ae:	7020      	strb	r0, [r4, #0]
    rsp->max_tx_power = ble_phy_txpower_round(126);
   1a1b0:	207e      	movs	r0, #126	; 0x7e
   1a1b2:	f003 fdef 	bl	1dd94 <ble_phy_txpower_round>
   1a1b6:	7060      	strb	r0, [r4, #1]
    *rsplen = sizeof(*rsp);
   1a1b8:	2302      	movs	r3, #2
   1a1ba:	702b      	strb	r3, [r5, #0]
}
   1a1bc:	2000      	movs	r0, #0
   1a1be:	bd38      	pop	{r3, r4, r5, pc}

0001a1c0 <ble_ll_write_rf_path_compensation>:
    if (len != sizeof(*cmd)) {
   1a1c0:	2904      	cmp	r1, #4
   1a1c2:	d121      	bne.n	1a208 <ble_ll_write_rf_path_compensation+0x48>
{
   1a1c4:	b510      	push	{r4, lr}
    tx = le16toh(cmd->tx_path_compensation);
   1a1c6:	f9b0 3000 	ldrsh.w	r3, [r0]
   1a1ca:	461c      	mov	r4, r3
    rx = le16toh(cmd->rx_path_compensation);
   1a1cc:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
   1a1d0:	b20a      	sxth	r2, r1
    if ((tx < -1280) || (tx > 1280) || (rx < -1280) || (rx > 1280)) {
   1a1d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
   1a1d6:	b29b      	uxth	r3, r3
   1a1d8:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
   1a1dc:	d816      	bhi.n	1a20c <ble_ll_write_rf_path_compensation+0x4c>
   1a1de:	f512 6fa0 	cmn.w	r2, #1280	; 0x500
   1a1e2:	db15      	blt.n	1a210 <ble_ll_write_rf_path_compensation+0x50>
   1a1e4:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
   1a1e8:	dc14      	bgt.n	1a214 <ble_ll_write_rf_path_compensation+0x54>
    tx_path_pwr_compensation = tx;
   1a1ea:	4b0b      	ldr	r3, [pc, #44]	; (1a218 <ble_ll_write_rf_path_compensation+0x58>)
   1a1ec:	801c      	strh	r4, [r3, #0]
    rx_path_pwr_compensation = rx;
   1a1ee:	4b0b      	ldr	r3, [pc, #44]	; (1a21c <ble_ll_write_rf_path_compensation+0x5c>)
   1a1f0:	8019      	strh	r1, [r3, #0]
    ble_phy_set_rx_pwr_compensation(rx_path_pwr_compensation / 10);
   1a1f2:	480b      	ldr	r0, [pc, #44]	; (1a220 <ble_ll_write_rf_path_compensation+0x60>)
   1a1f4:	fb80 3002 	smull	r3, r0, r0, r2
   1a1f8:	17d2      	asrs	r2, r2, #31
   1a1fa:	ebc2 00a0 	rsb	r0, r2, r0, asr #2
   1a1fe:	b240      	sxtb	r0, r0
   1a200:	f003 fdfe 	bl	1de00 <ble_phy_set_rx_pwr_compensation>
    return BLE_ERR_SUCCESS;
   1a204:	2000      	movs	r0, #0
   1a206:	e002      	b.n	1a20e <ble_ll_write_rf_path_compensation+0x4e>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1a208:	2012      	movs	r0, #18
}
   1a20a:	4770      	bx	lr
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1a20c:	2012      	movs	r0, #18
}
   1a20e:	bd10      	pop	{r4, pc}
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1a210:	2012      	movs	r0, #18
   1a212:	e7fc      	b.n	1a20e <ble_ll_write_rf_path_compensation+0x4e>
   1a214:	2012      	movs	r0, #18
   1a216:	e7fa      	b.n	1a20e <ble_ll_write_rf_path_compensation+0x4e>
   1a218:	20001eb2 	.word	0x20001eb2
   1a21c:	20001eb0 	.word	0x20001eb0
   1a220:	66666667 	.word	0x66666667

0001a224 <ble_ll_hci_le_cmd_proc>:
{
   1a224:	b538      	push	{r3, r4, r5, lr}
   1a226:	4615      	mov	r5, r2
   1a228:	461a      	mov	r2, r3
    switch (ocf) {
   1a22a:	1e6b      	subs	r3, r5, #1
   1a22c:	2b4d      	cmp	r3, #77	; 0x4d
   1a22e:	f200 8152 	bhi.w	1a4d6 <ble_ll_hci_le_cmd_proc+0x2b2>
   1a232:	e8df f013 	tbh	[pc, r3, lsl #1]
   1a236:	004e      	.short	0x004e
   1a238:	0064005b 	.word	0x0064005b
   1a23c:	006d0150 	.word	0x006d0150
   1a240:	00760072 	.word	0x00760072
   1a244:	0083007f 	.word	0x0083007f
   1a248:	008b0087 	.word	0x008b0087
   1a24c:	0093008f 	.word	0x0093008f
   1a250:	009f0097 	.word	0x009f0097
   1a254:	00af00a8 	.word	0x00af00a8
   1a258:	00b700b3 	.word	0x00b700b3
   1a25c:	00bf00bb 	.word	0x00bf00bb
   1a260:	00c800c4 	.word	0x00c800c4
   1a264:	00d600cd 	.word	0x00d600cd
   1a268:	00df00da 	.word	0x00df00da
   1a26c:	015000e4 	.word	0x015000e4
   1a270:	01500150 	.word	0x01500150
   1a274:	00f200ed 	.word	0x00f200ed
   1a278:	00fc00f7 	.word	0x00fc00f7
   1a27c:	01500105 	.word	0x01500105
   1a280:	01090150 	.word	0x01090150
   1a284:	0111010d 	.word	0x0111010d
   1a288:	01210118 	.word	0x01210118
   1a28c:	012b0126 	.word	0x012b0126
   1a290:	0133012f 	.word	0x0133012f
   1a294:	01500150 	.word	0x01500150
   1a298:	01500150 	.word	0x01500150
   1a29c:	01500150 	.word	0x01500150
   1a2a0:	01500150 	.word	0x01500150
   1a2a4:	01500150 	.word	0x01500150
   1a2a8:	01500150 	.word	0x01500150
   1a2ac:	01500150 	.word	0x01500150
   1a2b0:	01500150 	.word	0x01500150
   1a2b4:	01500150 	.word	0x01500150
   1a2b8:	01500150 	.word	0x01500150
   1a2bc:	01500150 	.word	0x01500150
   1a2c0:	01500150 	.word	0x01500150
   1a2c4:	01500150 	.word	0x01500150
   1a2c8:	013c0150 	.word	0x013c0150
   1a2cc:	01480142 	.word	0x01480142
   1a2d0:	014c      	.short	0x014c
        rc = ble_ll_hci_set_le_event_mask(cmdbuf, len);
   1a2d2:	f7ff fddb 	bl	19e8c <ble_ll_hci_set_le_event_mask>
   1a2d6:	4604      	mov	r4, r0
    if (ble_ll_hci_le_cmd_send_cmd_status(ocf) || rc == BLE_ERR_UNKNOWN_HCI_CMD) {
   1a2d8:	4628      	mov	r0, r5
   1a2da:	f7ff fe0d 	bl	19ef8 <ble_ll_hci_le_cmd_send_cmd_status>
   1a2de:	b908      	cbnz	r0, 1a2e4 <ble_ll_hci_le_cmd_proc+0xc0>
   1a2e0:	2c01      	cmp	r4, #1
   1a2e2:	d101      	bne.n	1a2e8 <ble_ll_hci_le_cmd_proc+0xc4>
        rc += (BLE_ERR_MAX + 1);
   1a2e4:	f504 7480 	add.w	r4, r4, #256	; 0x100
}
   1a2e8:	4620      	mov	r0, r4
   1a2ea:	bd38      	pop	{r3, r4, r5, pc}
        if (len == 0) {
   1a2ec:	b109      	cbz	r1, 1a2f2 <ble_ll_hci_le_cmd_proc+0xce>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   1a2ee:	2412      	movs	r4, #18
   1a2f0:	e7f2      	b.n	1a2d8 <ble_ll_hci_le_cmd_proc+0xb4>
            rc = ble_ll_hci_le_read_bufsize(rspbuf, rsplen);
   1a2f2:	9904      	ldr	r1, [sp, #16]
   1a2f4:	4610      	mov	r0, r2
   1a2f6:	f7ff fdd7 	bl	19ea8 <ble_ll_hci_le_read_bufsize>
   1a2fa:	4604      	mov	r4, r0
   1a2fc:	e7ec      	b.n	1a2d8 <ble_ll_hci_le_cmd_proc+0xb4>
        if (len == 0) {
   1a2fe:	b109      	cbz	r1, 1a304 <ble_ll_hci_le_cmd_proc+0xe0>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   1a300:	2412      	movs	r4, #18
   1a302:	e7e9      	b.n	1a2d8 <ble_ll_hci_le_cmd_proc+0xb4>
            rc = ble_ll_hci_le_read_local_features(rspbuf, rsplen);
   1a304:	9904      	ldr	r1, [sp, #16]
   1a306:	4610      	mov	r0, r2
   1a308:	f7ff fedd 	bl	1a0c6 <ble_ll_hci_le_read_local_features>
   1a30c:	4604      	mov	r4, r0
   1a30e:	e7e3      	b.n	1a2d8 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_set_random_addr(cmdbuf, len, false);
   1a310:	2200      	movs	r2, #0
   1a312:	f7fa faa7 	bl	14864 <ble_ll_set_random_addr>
   1a316:	4604      	mov	r4, r0
        break;
   1a318:	e7de      	b.n	1a2d8 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_adv_set_adv_params(cmdbuf, len);
   1a31a:	f7fb fbff 	bl	15b1c <ble_ll_adv_set_adv_params>
   1a31e:	4604      	mov	r4, r0
        break;
   1a320:	e7da      	b.n	1a2d8 <ble_ll_hci_le_cmd_proc+0xb4>
        if (len == 0) {
   1a322:	b109      	cbz	r1, 1a328 <ble_ll_hci_le_cmd_proc+0x104>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   1a324:	2412      	movs	r4, #18
   1a326:	e7d7      	b.n	1a2d8 <ble_ll_hci_le_cmd_proc+0xb4>
            rc = ble_ll_adv_read_txpwr(rspbuf, rsplen);
   1a328:	9904      	ldr	r1, [sp, #16]
   1a32a:	4610      	mov	r0, r2
   1a32c:	f7fb fc7a 	bl	15c24 <ble_ll_adv_read_txpwr>
   1a330:	4604      	mov	r4, r0
   1a332:	e7d1      	b.n	1a2d8 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_hci_set_adv_data(cmdbuf, len);
   1a334:	f7fb fc99 	bl	15c6a <ble_ll_hci_set_adv_data>
   1a338:	4604      	mov	r4, r0
        break;
   1a33a:	e7cd      	b.n	1a2d8 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_hci_set_scan_rsp_data(cmdbuf, len);
   1a33c:	f7fb fc85 	bl	15c4a <ble_ll_hci_set_scan_rsp_data>
   1a340:	4604      	mov	r4, r0
        break;
   1a342:	e7c9      	b.n	1a2d8 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_hci_adv_set_enable(cmdbuf, len);
   1a344:	f7fb fc74 	bl	15c30 <ble_ll_hci_adv_set_enable>
   1a348:	4604      	mov	r4, r0
        break;
   1a34a:	e7c5      	b.n	1a2d8 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_scan_set_scan_params(cmdbuf, len);
   1a34c:	f002 f90e 	bl	1c56c <ble_ll_scan_set_scan_params>
   1a350:	4604      	mov	r4, r0
        break;
   1a352:	e7c1      	b.n	1a2d8 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_hci_scan_set_enable(cmdbuf, len);
   1a354:	f002 f958 	bl	1c608 <ble_ll_hci_scan_set_enable>
   1a358:	4604      	mov	r4, r0
        break;
   1a35a:	e7bd      	b.n	1a2d8 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_conn_create(cmdbuf, len);
   1a35c:	f7fe f852 	bl	18404 <ble_ll_conn_create>
   1a360:	4604      	mov	r4, r0
        break;
   1a362:	e7b9      	b.n	1a2d8 <ble_ll_hci_le_cmd_proc+0xb4>
        if (len == 0) {
   1a364:	b109      	cbz	r1, 1a36a <ble_ll_hci_le_cmd_proc+0x146>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   1a366:	2412      	movs	r4, #18
   1a368:	e7b6      	b.n	1a2d8 <ble_ll_hci_le_cmd_proc+0xb4>
            rc = ble_ll_conn_create_cancel(cb);
   1a36a:	9805      	ldr	r0, [sp, #20]
   1a36c:	f7fe fa14 	bl	18798 <ble_ll_conn_create_cancel>
   1a370:	4604      	mov	r4, r0
   1a372:	e7b1      	b.n	1a2d8 <ble_ll_hci_le_cmd_proc+0xb4>
        if (len == 0) {
   1a374:	b109      	cbz	r1, 1a37a <ble_ll_hci_le_cmd_proc+0x156>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   1a376:	2412      	movs	r4, #18
   1a378:	e7ae      	b.n	1a2d8 <ble_ll_hci_le_cmd_proc+0xb4>
            rc = ble_ll_whitelist_read_size(rspbuf, rsplen);
   1a37a:	9904      	ldr	r1, [sp, #16]
   1a37c:	4610      	mov	r0, r2
   1a37e:	f002 ff8f 	bl	1d2a0 <ble_ll_whitelist_read_size>
   1a382:	4604      	mov	r4, r0
   1a384:	e7a8      	b.n	1a2d8 <ble_ll_hci_le_cmd_proc+0xb4>
        if (len == 0) {
   1a386:	b109      	cbz	r1, 1a38c <ble_ll_hci_le_cmd_proc+0x168>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   1a388:	2412      	movs	r4, #18
   1a38a:	e7a5      	b.n	1a2d8 <ble_ll_hci_le_cmd_proc+0xb4>
            rc = ble_ll_whitelist_clear();
   1a38c:	f002 ff72 	bl	1d274 <ble_ll_whitelist_clear>
   1a390:	4604      	mov	r4, r0
   1a392:	e7a1      	b.n	1a2d8 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_whitelist_add(cmdbuf, len);
   1a394:	f002 ff92 	bl	1d2bc <ble_ll_whitelist_add>
   1a398:	4604      	mov	r4, r0
        break;
   1a39a:	e79d      	b.n	1a2d8 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_whitelist_rmv(cmdbuf, len);
   1a39c:	f002 ffbe 	bl	1d31c <ble_ll_whitelist_rmv>
   1a3a0:	4604      	mov	r4, r0
        break;
   1a3a2:	e799      	b.n	1a2d8 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_conn_hci_update(cmdbuf, len);
   1a3a4:	f7fe f906 	bl	185b4 <ble_ll_conn_hci_update>
   1a3a8:	4604      	mov	r4, r0
        break;
   1a3aa:	e795      	b.n	1a2d8 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_conn_hci_set_chan_class(cmdbuf, len);
   1a3ac:	f7fe facb 	bl	18946 <ble_ll_conn_hci_set_chan_class>
   1a3b0:	4604      	mov	r4, r0
        break;
   1a3b2:	e791      	b.n	1a2d8 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_conn_hci_rd_chan_map(cmdbuf, len, rspbuf, rsplen);
   1a3b4:	9b04      	ldr	r3, [sp, #16]
   1a3b6:	f7fe fa9c 	bl	188f2 <ble_ll_conn_hci_rd_chan_map>
   1a3ba:	4604      	mov	r4, r0
        break;
   1a3bc:	e78c      	b.n	1a2d8 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_conn_hci_read_rem_features(cmdbuf, len);
   1a3be:	f7fe f8c9 	bl	18554 <ble_ll_conn_hci_read_rem_features>
   1a3c2:	4604      	mov	r4, r0
        break;
   1a3c4:	e788      	b.n	1a2d8 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_hci_le_encrypt(cmdbuf, len, rspbuf, rsplen);
   1a3c6:	9b04      	ldr	r3, [sp, #16]
   1a3c8:	f7ff fe88 	bl	1a0dc <ble_ll_hci_le_encrypt>
   1a3cc:	4604      	mov	r4, r0
        break;
   1a3ce:	e783      	b.n	1a2d8 <ble_ll_hci_le_cmd_proc+0xb4>
        if (len == 0) {
   1a3d0:	b109      	cbz	r1, 1a3d6 <ble_ll_hci_le_cmd_proc+0x1b2>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   1a3d2:	2412      	movs	r4, #18
   1a3d4:	e780      	b.n	1a2d8 <ble_ll_hci_le_cmd_proc+0xb4>
            rc = ble_ll_hci_le_rand(rspbuf, rsplen);
   1a3d6:	9904      	ldr	r1, [sp, #16]
   1a3d8:	4610      	mov	r0, r2
   1a3da:	f7ff fea0 	bl	1a11e <ble_ll_hci_le_rand>
   1a3de:	4604      	mov	r4, r0
   1a3e0:	e77a      	b.n	1a2d8 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_conn_hci_le_start_encrypt(cmdbuf, len);
   1a3e2:	f7fe fb00 	bl	189e6 <ble_ll_conn_hci_le_start_encrypt>
   1a3e6:	4604      	mov	r4, r0
        break;
   1a3e8:	e776      	b.n	1a2d8 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_conn_hci_le_ltk_reply(cmdbuf, len, rspbuf, rsplen);
   1a3ea:	9b04      	ldr	r3, [sp, #16]
   1a3ec:	f7fe fb2b 	bl	18a46 <ble_ll_conn_hci_le_ltk_reply>
   1a3f0:	4604      	mov	r4, r0
        break;
   1a3f2:	e771      	b.n	1a2d8 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_conn_hci_le_ltk_neg_reply(cmdbuf, len, rspbuf, rsplen);
   1a3f4:	9b04      	ldr	r3, [sp, #16]
   1a3f6:	f7fe fb54 	bl	18aa2 <ble_ll_conn_hci_le_ltk_neg_reply>
   1a3fa:	4604      	mov	r4, r0
        break;
   1a3fc:	e76c      	b.n	1a2d8 <ble_ll_hci_le_cmd_proc+0xb4>
        if (len == 0) {
   1a3fe:	b109      	cbz	r1, 1a404 <ble_ll_hci_le_cmd_proc+0x1e0>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   1a400:	2412      	movs	r4, #18
   1a402:	e769      	b.n	1a2d8 <ble_ll_hci_le_cmd_proc+0xb4>
            rc = ble_ll_hci_le_read_supp_states(rspbuf, rsplen);
   1a404:	9904      	ldr	r1, [sp, #16]
   1a406:	4610      	mov	r0, r2
   1a408:	f7ff fe92 	bl	1a130 <ble_ll_hci_le_read_supp_states>
   1a40c:	4604      	mov	r4, r0
   1a40e:	e763      	b.n	1a2d8 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_conn_hci_param_rr(cmdbuf, len, rspbuf, rsplen);
   1a410:	9b04      	ldr	r3, [sp, #16]
   1a412:	f7fe f937 	bl	18684 <ble_ll_conn_hci_param_rr>
   1a416:	4604      	mov	r4, r0
        break;
   1a418:	e75e      	b.n	1a2d8 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_conn_hci_param_nrr(cmdbuf, len, rspbuf, rsplen);
   1a41a:	9b04      	ldr	r3, [sp, #16]
   1a41c:	f7fe f988 	bl	18730 <ble_ll_conn_hci_param_nrr>
   1a420:	4604      	mov	r4, r0
        break;
   1a422:	e759      	b.n	1a2d8 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_conn_hci_set_data_len(cmdbuf, len, rspbuf, rsplen);
   1a424:	9b04      	ldr	r3, [sp, #16]
   1a426:	f7fe faa5 	bl	18974 <ble_ll_conn_hci_set_data_len>
   1a42a:	4604      	mov	r4, r0
        break;
   1a42c:	e754      	b.n	1a2d8 <ble_ll_hci_le_cmd_proc+0xb4>
        if (len == 0) {
   1a42e:	b109      	cbz	r1, 1a434 <ble_ll_hci_le_cmd_proc+0x210>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   1a430:	2412      	movs	r4, #18
   1a432:	e751      	b.n	1a2d8 <ble_ll_hci_le_cmd_proc+0xb4>
            rc = ble_ll_hci_le_rd_sugg_data_len(rspbuf, rsplen);
   1a434:	9904      	ldr	r1, [sp, #16]
   1a436:	4610      	mov	r0, r2
   1a438:	f7ff fd42 	bl	19ec0 <ble_ll_hci_le_rd_sugg_data_len>
   1a43c:	4604      	mov	r4, r0
   1a43e:	e74b      	b.n	1a2d8 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_hci_le_wr_sugg_data_len(cmdbuf, len);
   1a440:	f7ff fe82 	bl	1a148 <ble_ll_hci_le_wr_sugg_data_len>
   1a444:	4604      	mov	r4, r0
        break;
   1a446:	e747      	b.n	1a2d8 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_resolv_list_add(cmdbuf, len);
   1a448:	f000 fc96 	bl	1ad78 <ble_ll_resolv_list_add>
   1a44c:	4604      	mov	r4, r0
        break;
   1a44e:	e743      	b.n	1a2d8 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_resolv_list_rmv(cmdbuf, len);
   1a450:	f000 fd28 	bl	1aea4 <ble_ll_resolv_list_rmv>
   1a454:	4604      	mov	r4, r0
        break;
   1a456:	e73f      	b.n	1a2d8 <ble_ll_hci_le_cmd_proc+0xb4>
        if (len == 0) {
   1a458:	b109      	cbz	r1, 1a45e <ble_ll_hci_le_cmd_proc+0x23a>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   1a45a:	2412      	movs	r4, #18
   1a45c:	e73c      	b.n	1a2d8 <ble_ll_hci_le_cmd_proc+0xb4>
            rc = ble_ll_resolv_list_clr();
   1a45e:	f000 fc4d 	bl	1acfc <ble_ll_resolv_list_clr>
   1a462:	4604      	mov	r4, r0
   1a464:	e738      	b.n	1a2d8 <ble_ll_hci_le_cmd_proc+0xb4>
        if (len == 0) {
   1a466:	b109      	cbz	r1, 1a46c <ble_ll_hci_le_cmd_proc+0x248>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   1a468:	2412      	movs	r4, #18
   1a46a:	e735      	b.n	1a2d8 <ble_ll_hci_le_cmd_proc+0xb4>
            rc = ble_ll_resolv_list_read_size(rspbuf, rsplen);
   1a46c:	9904      	ldr	r1, [sp, #16]
   1a46e:	4610      	mov	r0, r2
   1a470:	f000 fc58 	bl	1ad24 <ble_ll_resolv_list_read_size>
   1a474:	4604      	mov	r4, r0
   1a476:	e72f      	b.n	1a2d8 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_resolv_peer_addr_rd(cmdbuf, len, rspbuf, rsplen);
   1a478:	9b04      	ldr	r3, [sp, #16]
   1a47a:	f000 fd77 	bl	1af6c <ble_ll_resolv_peer_addr_rd>
   1a47e:	4604      	mov	r4, r0
        break;
   1a480:	e72a      	b.n	1a2d8 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_resolv_local_addr_rd(cmdbuf, len, rspbuf, rsplen);
   1a482:	9b04      	ldr	r3, [sp, #16]
   1a484:	f000 fd8c 	bl	1afa0 <ble_ll_resolv_local_addr_rd>
   1a488:	4604      	mov	r4, r0
        break;
   1a48a:	e725      	b.n	1a2d8 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_resolv_enable_cmd(cmdbuf, len);
   1a48c:	f000 fd56 	bl	1af3c <ble_ll_resolv_enable_cmd>
   1a490:	4604      	mov	r4, r0
        break;
   1a492:	e721      	b.n	1a2d8 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_resolv_set_rpa_tmo(cmdbuf, len);
   1a494:	f000 fd9e 	bl	1afd4 <ble_ll_resolv_set_rpa_tmo>
   1a498:	4604      	mov	r4, r0
        break;
   1a49a:	e71d      	b.n	1a2d8 <ble_ll_hci_le_cmd_proc+0xb4>
        if (len == 0) {
   1a49c:	b109      	cbz	r1, 1a4a2 <ble_ll_hci_le_cmd_proc+0x27e>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   1a49e:	2412      	movs	r4, #18
   1a4a0:	e71a      	b.n	1a2d8 <ble_ll_hci_le_cmd_proc+0xb4>
            rc = ble_ll_hci_le_rd_max_data_len(rspbuf, rsplen);
   1a4a2:	9904      	ldr	r1, [sp, #16]
   1a4a4:	4610      	mov	r0, r2
   1a4a6:	f7ff fd17 	bl	19ed8 <ble_ll_hci_le_rd_max_data_len>
   1a4aa:	4604      	mov	r4, r0
   1a4ac:	e714      	b.n	1a2d8 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_read_tx_power(rspbuf, rsplen);
   1a4ae:	9904      	ldr	r1, [sp, #16]
   1a4b0:	4610      	mov	r0, r2
   1a4b2:	f7ff fe75 	bl	1a1a0 <ble_ll_read_tx_power>
   1a4b6:	4604      	mov	r4, r0
        break;
   1a4b8:	e70e      	b.n	1a2d8 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_read_rf_path_compensation(rspbuf, rsplen);
   1a4ba:	9904      	ldr	r1, [sp, #16]
   1a4bc:	4610      	mov	r0, r2
   1a4be:	f7ff fd41 	bl	19f44 <ble_ll_read_rf_path_compensation>
   1a4c2:	4604      	mov	r4, r0
        break;
   1a4c4:	e708      	b.n	1a2d8 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_write_rf_path_compensation(cmdbuf, len);
   1a4c6:	f7ff fe7b 	bl	1a1c0 <ble_ll_write_rf_path_compensation>
   1a4ca:	4604      	mov	r4, r0
        break;
   1a4cc:	e704      	b.n	1a2d8 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_resolve_set_priv_mode(cmdbuf, len);
   1a4ce:	f000 fdab 	bl	1b028 <ble_ll_resolve_set_priv_mode>
   1a4d2:	4604      	mov	r4, r0
        break;
   1a4d4:	e700      	b.n	1a2d8 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = BLE_ERR_UNKNOWN_HCI_CMD;
   1a4d6:	2401      	movs	r4, #1
   1a4d8:	e6fe      	b.n	1a2d8 <ble_ll_hci_le_cmd_proc+0xb4>

0001a4da <ble_ll_hci_adv_mode_ext>:
}
   1a4da:	2000      	movs	r0, #0
   1a4dc:	4770      	bx	lr
	...

0001a4e0 <ble_ll_hci_event_send>:
{
   1a4e0:	b508      	push	{r3, lr}
    BLE_LL_ASSERT(sizeof(*hci_ev) + hci_ev->length <= BLE_LL_MAX_EVT_LEN);
   1a4e2:	7843      	ldrb	r3, [r0, #1]
   1a4e4:	3302      	adds	r3, #2
   1a4e6:	2b46      	cmp	r3, #70	; 0x46
   1a4e8:	d806      	bhi.n	1a4f8 <ble_ll_hci_event_send+0x18>
    STATS_INC(ble_ll_stats, hci_events_sent);
   1a4ea:	4a08      	ldr	r2, [pc, #32]	; (1a50c <ble_ll_hci_event_send+0x2c>)
   1a4ec:	6953      	ldr	r3, [r2, #20]
   1a4ee:	3301      	adds	r3, #1
   1a4f0:	6153      	str	r3, [r2, #20]
    rc = ble_hci_trans_ll_evt_tx((uint8_t *)hci_ev);
   1a4f2:	f00f fe63 	bl	2a1bc <ble_hci_trans_ll_evt_tx>
}
   1a4f6:	bd08      	pop	{r3, pc}
    BLE_LL_ASSERT(sizeof(*hci_ev) + hci_ev->length <= BLE_LL_MAX_EVT_LEN);
   1a4f8:	f7f1 fe76 	bl	c1e8 <hal_debugger_connected>
   1a4fc:	b100      	cbz	r0, 1a500 <ble_ll_hci_event_send+0x20>
   1a4fe:	be01      	bkpt	0x0001
   1a500:	2300      	movs	r3, #0
   1a502:	461a      	mov	r2, r3
   1a504:	4619      	mov	r1, r3
   1a506:	4618      	mov	r0, r3
   1a508:	f7f2 fb22 	bl	cb50 <__assert_func>
   1a50c:	200035c0 	.word	0x200035c0

0001a510 <ble_ll_hci_cmd_proc>:
 *
 * @param ev Pointer to os event containing a pointer to command buffer
 */
static void
ble_ll_hci_cmd_proc(struct ble_npl_event *ev)
{
   1a510:	b570      	push	{r4, r5, r6, lr}
   1a512:	b084      	sub	sp, #16
    uint8_t ogf;
    uint8_t rsplen;
    struct ble_hci_cmd *cmd;
    uint16_t opcode;
    uint16_t ocf;
    ble_ll_hci_post_cmd_complete_cb post_cb = NULL;
   1a514:	2300      	movs	r3, #0
   1a516:	9302      	str	r3, [sp, #8]
    return ev->ev.ev_arg;
   1a518:	6884      	ldr	r4, [r0, #8]

    BLE_LL_DEBUG_GPIO(HCI_CMD, 1);

    /* The command buffer is the event argument */
    cmd = ble_npl_event_get_arg(ev);
    BLE_LL_ASSERT(cmd != NULL);
   1a51a:	b194      	cbz	r4, 1a542 <ble_ll_hci_cmd_proc+0x32>

    /* Get the opcode from the command buffer */
    opcode = le16toh(cmd->opcode);
   1a51c:	4623      	mov	r3, r4
   1a51e:	f833 6b06 	ldrh.w	r6, [r3], #6
   1a522:	b2b1      	uxth	r1, r6
    ocf = BLE_HCI_OCF(opcode);
   1a524:	f3c1 0209 	ubfx	r2, r1, #0, #10
    ogf = BLE_HCI_OGF(opcode);
   1a528:	0a89      	lsrs	r1, r1, #10
     */
    hci_ev = (struct ble_hci_ev *) cmd;
    rspbuf = hci_ev->data + sizeof(*cmd_complete);

    /* Assume response length is zero */
    rsplen = 0;
   1a52a:	2000      	movs	r0, #0
   1a52c:	f88d 000f 	strb.w	r0, [sp, #15]

    switch (ogf) {
   1a530:	3901      	subs	r1, #1
   1a532:	2907      	cmp	r1, #7
   1a534:	d862      	bhi.n	1a5fc <ble_ll_hci_cmd_proc+0xec>
   1a536:	e8df f001 	tbb	[pc, r1]
   1a53a:	610e      	.short	0x610e
   1a53c:	61433a31 	.word	0x61433a31
   1a540:	4c61      	.short	0x4c61
    BLE_LL_ASSERT(cmd != NULL);
   1a542:	f7f1 fe51 	bl	c1e8 <hal_debugger_connected>
   1a546:	b100      	cbz	r0, 1a54a <ble_ll_hci_cmd_proc+0x3a>
   1a548:	be01      	bkpt	0x0001
   1a54a:	2300      	movs	r3, #0
   1a54c:	461a      	mov	r2, r3
   1a54e:	4619      	mov	r1, r3
   1a550:	4618      	mov	r0, r3
   1a552:	f7f2 fafd 	bl	cb50 <__assert_func>
    case BLE_HCI_OGF_LINK_CTRL:
        rc = ble_ll_hci_link_ctrl_cmd_proc(cmd->data, cmd->length, ocf);
   1a556:	78a1      	ldrb	r1, [r4, #2]
   1a558:	1ce0      	adds	r0, r4, #3
   1a55a:	f7ff fd1d 	bl	19f98 <ble_ll_hci_link_ctrl_cmd_proc>
   1a55e:	4605      	mov	r5, r0
        rc = BLE_ERR_UNKNOWN_HCI_CMD;
        break;
    }

    /* If no response is generated, we free the buffers */
    BLE_LL_ASSERT(rc >= 0);
   1a560:	2d00      	cmp	r5, #0
   1a562:	db41      	blt.n	1a5e8 <ble_ll_hci_cmd_proc+0xd8>
    if (rc <= BLE_ERR_MAX) {
   1a564:	2dff      	cmp	r5, #255	; 0xff
   1a566:	dc4b      	bgt.n	1a600 <ble_ll_hci_cmd_proc+0xf0>
        /* Create a command complete event with status from command */
        hci_ev->opcode = BLE_HCI_EVCODE_COMMAND_COMPLETE;
   1a568:	230e      	movs	r3, #14
   1a56a:	7023      	strb	r3, [r4, #0]
        hci_ev->length = sizeof(*cmd_complete) + rsplen;
   1a56c:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1a570:	3304      	adds	r3, #4
   1a572:	7063      	strb	r3, [r4, #1]

        cmd_complete = (void *) hci_ev->data;
        cmd_complete->num_packets = ble_ll_hci_get_num_cmd_pkts();
   1a574:	f7ff fc5d 	bl	19e32 <ble_ll_hci_get_num_cmd_pkts>
   1a578:	70a0      	strb	r0, [r4, #2]
        cmd_complete->opcode = htole16(opcode);
   1a57a:	f8a4 6003 	strh.w	r6, [r4, #3]
        cmd_complete->status = (uint8_t) rc;
   1a57e:	7165      	strb	r5, [r4, #5]
        cmd_status->num_packets = ble_ll_hci_get_num_cmd_pkts();
        cmd_status->opcode = htole16(opcode);
    }

    /* Count commands and those in error */
    if (rc) {
   1a580:	2d00      	cmp	r5, #0
   1a582:	d049      	beq.n	1a618 <ble_ll_hci_cmd_proc+0x108>
        STATS_INC(ble_ll_stats, hci_cmd_errs);
   1a584:	4a27      	ldr	r2, [pc, #156]	; (1a624 <ble_ll_hci_cmd_proc+0x114>)
   1a586:	6913      	ldr	r3, [r2, #16]
   1a588:	3301      	adds	r3, #1
   1a58a:	6113      	str	r3, [r2, #16]
    } else {
        STATS_INC(ble_ll_stats, hci_cmds);
    }

    /* Send the event (events cannot be masked) */
    ble_ll_hci_event_send(hci_ev);
   1a58c:	4620      	mov	r0, r4
   1a58e:	f7ff ffa7 	bl	1a4e0 <ble_ll_hci_event_send>

    /* Call post callback if set by command handler */
    if (post_cb) {
   1a592:	9b02      	ldr	r3, [sp, #8]
   1a594:	b103      	cbz	r3, 1a598 <ble_ll_hci_cmd_proc+0x88>
        post_cb();
   1a596:	4798      	blx	r3
    }

    BLE_LL_DEBUG_GPIO(HCI_CMD, 0);
}
   1a598:	b004      	add	sp, #16
   1a59a:	bd70      	pop	{r4, r5, r6, pc}
        rc = ble_ll_hci_ctlr_bb_cmd_proc(cmd->data, cmd->length, ocf, rspbuf, &rsplen);
   1a59c:	78a1      	ldrb	r1, [r4, #2]
   1a59e:	f10d 000f 	add.w	r0, sp, #15
   1a5a2:	9000      	str	r0, [sp, #0]
   1a5a4:	1ce0      	adds	r0, r4, #3
   1a5a6:	f7ff fd08 	bl	19fba <ble_ll_hci_ctlr_bb_cmd_proc>
   1a5aa:	4605      	mov	r5, r0
        break;
   1a5ac:	e7d8      	b.n	1a560 <ble_ll_hci_cmd_proc+0x50>
        rc = ble_ll_hci_info_params_cmd_proc(cmd->data, cmd->length, ocf, rspbuf, &rsplen);
   1a5ae:	78a1      	ldrb	r1, [r4, #2]
   1a5b0:	f10d 000f 	add.w	r0, sp, #15
   1a5b4:	9000      	str	r0, [sp, #0]
   1a5b6:	1ce0      	adds	r0, r4, #3
   1a5b8:	f7ff fd4e 	bl	1a058 <ble_ll_hci_info_params_cmd_proc>
   1a5bc:	4605      	mov	r5, r0
        break;
   1a5be:	e7cf      	b.n	1a560 <ble_ll_hci_cmd_proc+0x50>
        rc = ble_ll_hci_status_params_cmd_proc(cmd->data, cmd->length, ocf, rspbuf, &rsplen);
   1a5c0:	78a1      	ldrb	r1, [r4, #2]
   1a5c2:	f10d 000f 	add.w	r0, sp, #15
   1a5c6:	9000      	str	r0, [sp, #0]
   1a5c8:	1ce0      	adds	r0, r4, #3
   1a5ca:	f7ff fd72 	bl	1a0b2 <ble_ll_hci_status_params_cmd_proc>
   1a5ce:	4605      	mov	r5, r0
        break;
   1a5d0:	e7c6      	b.n	1a560 <ble_ll_hci_cmd_proc+0x50>
        rc = ble_ll_hci_le_cmd_proc(cmd->data, cmd->length, ocf, rspbuf, &rsplen, &post_cb);
   1a5d2:	78a1      	ldrb	r1, [r4, #2]
   1a5d4:	a802      	add	r0, sp, #8
   1a5d6:	9001      	str	r0, [sp, #4]
   1a5d8:	f10d 000f 	add.w	r0, sp, #15
   1a5dc:	9000      	str	r0, [sp, #0]
   1a5de:	1ce0      	adds	r0, r4, #3
   1a5e0:	f7ff fe20 	bl	1a224 <ble_ll_hci_le_cmd_proc>
   1a5e4:	4605      	mov	r5, r0
        break;
   1a5e6:	e7bb      	b.n	1a560 <ble_ll_hci_cmd_proc+0x50>
    BLE_LL_ASSERT(rc >= 0);
   1a5e8:	f7f1 fdfe 	bl	c1e8 <hal_debugger_connected>
   1a5ec:	b100      	cbz	r0, 1a5f0 <ble_ll_hci_cmd_proc+0xe0>
   1a5ee:	be01      	bkpt	0x0001
   1a5f0:	2300      	movs	r3, #0
   1a5f2:	461a      	mov	r2, r3
   1a5f4:	4619      	mov	r1, r3
   1a5f6:	4618      	mov	r0, r3
   1a5f8:	f7f2 faaa 	bl	cb50 <__assert_func>
        rc = BLE_ERR_UNKNOWN_HCI_CMD;
   1a5fc:	2501      	movs	r5, #1
   1a5fe:	e7b1      	b.n	1a564 <ble_ll_hci_cmd_proc+0x54>
        rc -= (BLE_ERR_MAX + 1);
   1a600:	f5a5 7580 	sub.w	r5, r5, #256	; 0x100
        hci_ev->opcode = BLE_HCI_EVCODE_COMMAND_STATUS;
   1a604:	230f      	movs	r3, #15
   1a606:	7023      	strb	r3, [r4, #0]
        hci_ev->length = sizeof(*cmd_status);
   1a608:	2304      	movs	r3, #4
   1a60a:	7063      	strb	r3, [r4, #1]
        cmd_status->status = (uint8_t)rc;
   1a60c:	70a5      	strb	r5, [r4, #2]
        cmd_status->num_packets = ble_ll_hci_get_num_cmd_pkts();
   1a60e:	f7ff fc10 	bl	19e32 <ble_ll_hci_get_num_cmd_pkts>
   1a612:	70e0      	strb	r0, [r4, #3]
        cmd_status->opcode = htole16(opcode);
   1a614:	80a6      	strh	r6, [r4, #4]
   1a616:	e7b3      	b.n	1a580 <ble_ll_hci_cmd_proc+0x70>
        STATS_INC(ble_ll_stats, hci_cmds);
   1a618:	4a02      	ldr	r2, [pc, #8]	; (1a624 <ble_ll_hci_cmd_proc+0x114>)
   1a61a:	68d3      	ldr	r3, [r2, #12]
   1a61c:	3301      	adds	r3, #1
   1a61e:	60d3      	str	r3, [r2, #12]
   1a620:	e7b4      	b.n	1a58c <ble_ll_hci_cmd_proc+0x7c>
   1a622:	bf00      	nop
   1a624:	200035c0 	.word	0x200035c0

0001a628 <ble_ll_hci_send_noop>:
{
   1a628:	b510      	push	{r4, lr}
    hci_ev = (void *) ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   1a62a:	2002      	movs	r0, #2
   1a62c:	f00f fe08 	bl	2a240 <ble_hci_trans_buf_alloc>
    if (hci_ev) {
   1a630:	b168      	cbz	r0, 1a64e <ble_ll_hci_send_noop+0x26>
   1a632:	4604      	mov	r4, r0
        hci_ev->opcode = BLE_HCI_EVCODE_COMMAND_COMPLETE;
   1a634:	230e      	movs	r3, #14
   1a636:	7003      	strb	r3, [r0, #0]
        hci_ev->length = sizeof(*ev);
   1a638:	2303      	movs	r3, #3
   1a63a:	7043      	strb	r3, [r0, #1]
        ev->num_packets = ble_ll_hci_get_num_cmd_pkts();
   1a63c:	f7ff fbf9 	bl	19e32 <ble_ll_hci_get_num_cmd_pkts>
   1a640:	70a0      	strb	r0, [r4, #2]
        ev->opcode = BLE_HCI_OPCODE_NOP;
   1a642:	2300      	movs	r3, #0
   1a644:	70e3      	strb	r3, [r4, #3]
   1a646:	7123      	strb	r3, [r4, #4]
        ble_ll_hci_event_send(hci_ev);
   1a648:	4620      	mov	r0, r4
   1a64a:	f7ff ff49 	bl	1a4e0 <ble_ll_hci_event_send>
}
   1a64e:	bd10      	pop	{r4, pc}

0001a650 <ble_ll_hci_is_le_event_enabled>:
{
   1a650:	e92d 0830 	stmdb	sp!, {r4, r5, fp}
    if (g_ble_ll_hci_event_mask & (1ull << (BLE_HCI_EVCODE_LE_META - 1))) {
   1a654:	4b12      	ldr	r3, [pc, #72]	; (1a6a0 <ble_ll_hci_is_le_event_enabled+0x50>)
   1a656:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a65a:	2400      	movs	r4, #0
   1a65c:	f003 5500 	and.w	r5, r3, #536870912	; 0x20000000
   1a660:	ea54 0305 	orrs.w	r3, r4, r5
   1a664:	d01a      	beq.n	1a69c <ble_ll_hci_is_le_event_enabled+0x4c>
        return g_ble_ll_hci_le_event_mask & (1ull << (subev - 1));
   1a666:	1e45      	subs	r5, r0, #1
   1a668:	2101      	movs	r1, #1
   1a66a:	3821      	subs	r0, #33	; 0x21
   1a66c:	f1c5 0420 	rsb	r4, r5, #32
   1a670:	fa01 fc00 	lsl.w	ip, r1, r0
   1a674:	fa21 f404 	lsr.w	r4, r1, r4
   1a678:	ea4c 0c04 	orr.w	ip, ip, r4
   1a67c:	fa01 fb05 	lsl.w	fp, r1, r5
   1a680:	4908      	ldr	r1, [pc, #32]	; (1a6a4 <ble_ll_hci_is_le_event_enabled+0x54>)
   1a682:	e9d1 0100 	ldrd	r0, r1, [r1]
   1a686:	ea0b 0200 	and.w	r2, fp, r0
   1a68a:	ea0c 0301 	and.w	r3, ip, r1
   1a68e:	4313      	orrs	r3, r2
   1a690:	bf14      	ite	ne
   1a692:	2001      	movne	r0, #1
   1a694:	2000      	moveq	r0, #0
}
   1a696:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
   1a69a:	4770      	bx	lr
    return false;
   1a69c:	2000      	movs	r0, #0
   1a69e:	e7fa      	b.n	1a696 <ble_ll_hci_is_le_event_enabled+0x46>
   1a6a0:	20001e98 	.word	0x20001e98
   1a6a4:	20001ea8 	.word	0x20001ea8

0001a6a8 <ble_ll_hci_is_event_enabled>:
{
   1a6a8:	e92d 0830 	stmdb	sp!, {r4, r5, fp}
    if (evcode >= 64) {
   1a6ac:	283f      	cmp	r0, #63	; 0x3f
   1a6ae:	d81a      	bhi.n	1a6e6 <ble_ll_hci_is_event_enabled+0x3e>
    return g_ble_ll_hci_event_mask & (1ull << (evcode - 1));
   1a6b0:	1e45      	subs	r5, r0, #1
   1a6b2:	2101      	movs	r1, #1
   1a6b4:	3821      	subs	r0, #33	; 0x21
   1a6b6:	f1c5 0420 	rsb	r4, r5, #32
   1a6ba:	fa01 fc00 	lsl.w	ip, r1, r0
   1a6be:	fa21 f404 	lsr.w	r4, r1, r4
   1a6c2:	ea4c 0c04 	orr.w	ip, ip, r4
   1a6c6:	fa01 fb05 	lsl.w	fp, r1, r5
   1a6ca:	4914      	ldr	r1, [pc, #80]	; (1a71c <ble_ll_hci_is_event_enabled+0x74>)
   1a6cc:	e9d1 0100 	ldrd	r0, r1, [r1]
   1a6d0:	ea0b 0200 	and.w	r2, fp, r0
   1a6d4:	ea0c 0301 	and.w	r3, ip, r1
   1a6d8:	4313      	orrs	r3, r2
   1a6da:	bf14      	ite	ne
   1a6dc:	2001      	movne	r0, #1
   1a6de:	2000      	moveq	r0, #0
}
   1a6e0:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
   1a6e4:	4770      	bx	lr
        return g_ble_ll_hci_event_mask2 & (1ull << (evcode - 64));
   1a6e6:	f1a0 0540 	sub.w	r5, r0, #64	; 0x40
   1a6ea:	2101      	movs	r1, #1
   1a6ec:	3860      	subs	r0, #96	; 0x60
   1a6ee:	f1c5 0420 	rsb	r4, r5, #32
   1a6f2:	fa01 fc00 	lsl.w	ip, r1, r0
   1a6f6:	fa21 f404 	lsr.w	r4, r1, r4
   1a6fa:	ea4c 0c04 	orr.w	ip, ip, r4
   1a6fe:	fa01 fb05 	lsl.w	fp, r1, r5
   1a702:	4907      	ldr	r1, [pc, #28]	; (1a720 <ble_ll_hci_is_event_enabled+0x78>)
   1a704:	e9d1 0100 	ldrd	r0, r1, [r1]
   1a708:	ea0b 0200 	and.w	r2, fp, r0
   1a70c:	ea0c 0301 	and.w	r3, ip, r1
   1a710:	4313      	orrs	r3, r2
   1a712:	bf14      	ite	ne
   1a714:	2001      	movne	r0, #1
   1a716:	2000      	moveq	r0, #0
   1a718:	e7e2      	b.n	1a6e0 <ble_ll_hci_is_event_enabled+0x38>
   1a71a:	bf00      	nop
   1a71c:	20001e98 	.word	0x20001e98
   1a720:	20001ea0 	.word	0x20001ea0

0001a724 <ble_ll_hci_cmd_rx>:
 * @return                      0 on success;
 *                              BLE_ERR_MEM_CAPACITY on HCI buffer exhaustion.
 */
int
ble_ll_hci_cmd_rx(uint8_t *cmd, void *arg)
{
   1a724:	b508      	push	{r3, lr}
    return ev->ev.ev_queued;
   1a726:	4b0c      	ldr	r3, [pc, #48]	; (1a758 <ble_ll_hci_cmd_rx+0x34>)
   1a728:	781b      	ldrb	r3, [r3, #0]
    struct ble_npl_event *ev;

    /* Get an event structure off the queue */
    ev = &g_ble_ll_hci_cmd_ev;
    if (ble_npl_event_is_queued(ev)) {
   1a72a:	b99b      	cbnz	r3, 1a754 <ble_ll_hci_cmd_rx+0x30>
    assert(ev->ev.ev_queued == 0);
   1a72c:	4b0a      	ldr	r3, [pc, #40]	; (1a758 <ble_ll_hci_cmd_rx+0x34>)
   1a72e:	781b      	ldrb	r3, [r3, #0]
   1a730:	b933      	cbnz	r3, 1a740 <ble_ll_hci_cmd_rx+0x1c>
    ev->ev.ev_arg = arg;
   1a732:	4909      	ldr	r1, [pc, #36]	; (1a758 <ble_ll_hci_cmd_rx+0x34>)
   1a734:	6088      	str	r0, [r1, #8]
    os_eventq_put(&evq->evq, &ev->ev);
   1a736:	4809      	ldr	r0, [pc, #36]	; (1a75c <ble_ll_hci_cmd_rx+0x38>)
   1a738:	f7f2 fd39 	bl	d1ae <os_eventq_put>

    /* Fill out the event and post to Link Layer */
    ble_npl_event_set_arg(ev, cmd);
    ble_npl_eventq_put(&g_ble_ll_data.ll_evq, ev);

    return 0;
   1a73c:	2000      	movs	r0, #0
}
   1a73e:	bd08      	pop	{r3, pc}
    assert(ev->ev.ev_queued == 0);
   1a740:	f7f1 fd52 	bl	c1e8 <hal_debugger_connected>
   1a744:	b100      	cbz	r0, 1a748 <ble_ll_hci_cmd_rx+0x24>
   1a746:	be01      	bkpt	0x0001
   1a748:	2300      	movs	r3, #0
   1a74a:	461a      	mov	r2, r3
   1a74c:	4619      	mov	r1, r3
   1a74e:	4618      	mov	r0, r3
   1a750:	f7f2 f9fe 	bl	cb50 <__assert_func>
        return BLE_ERR_MEM_CAPACITY;
   1a754:	2007      	movs	r0, #7
   1a756:	e7f2      	b.n	1a73e <ble_ll_hci_cmd_rx+0x1a>
   1a758:	20001e84 	.word	0x20001e84
   1a75c:	20003740 	.word	0x20003740

0001a760 <ble_ll_hci_acl_rx>:

/* Send ACL data from host to contoller */
int
ble_ll_hci_acl_rx(struct os_mbuf *om, void *arg)
{
   1a760:	b508      	push	{r3, lr}
    ble_ll_acl_data_in(om);
   1a762:	f7fa f8f9 	bl	14958 <ble_ll_acl_data_in>
    return 0;
}
   1a766:	2000      	movs	r0, #0
   1a768:	bd08      	pop	{r3, pc}
	...

0001a76c <ble_ll_hci_init>:
    memset(ev, 0, sizeof(*ev));
   1a76c:	4a0e      	ldr	r2, [pc, #56]	; (1a7a8 <ble_ll_hci_init+0x3c>)
   1a76e:	2300      	movs	r3, #0
   1a770:	6013      	str	r3, [r2, #0]
   1a772:	6093      	str	r3, [r2, #8]
   1a774:	60d3      	str	r3, [r2, #12]
    ev->ev.ev_cb = (os_event_fn *)fn;
   1a776:	490d      	ldr	r1, [pc, #52]	; (1a7ac <ble_ll_hci_init+0x40>)
   1a778:	6051      	str	r1, [r2, #4]

    /* Set event callback for command processing */
    ble_npl_event_init(&g_ble_ll_hci_cmd_ev, ble_ll_hci_cmd_proc, NULL);

    /* Set defaults for LE events: Vol 2 Part E 7.8.1 */
    g_ble_ll_hci_le_event_mask = 0x1f;
   1a77a:	4a0d      	ldr	r2, [pc, #52]	; (1a7b0 <ble_ll_hci_init+0x44>)
   1a77c:	201f      	movs	r0, #31
   1a77e:	2100      	movs	r1, #0
   1a780:	e9c2 0100 	strd	r0, r1, [r2]

    /* Set defaults for controller/baseband events: Vol 2 Part E 7.3.1 */
    g_ble_ll_hci_event_mask = 0x1fffffffffff;
   1a784:	4a0b      	ldr	r2, [pc, #44]	; (1a7b4 <ble_ll_hci_init+0x48>)
   1a786:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a78a:	f641 71ff 	movw	r1, #8191	; 0x1fff
   1a78e:	e9c2 0100 	strd	r0, r1, [r2]


    /* Set page 2 to 0 */
    g_ble_ll_hci_event_mask2 = 0;
   1a792:	4a09      	ldr	r2, [pc, #36]	; (1a7b8 <ble_ll_hci_init+0x4c>)
   1a794:	2000      	movs	r0, #0
   1a796:	2100      	movs	r1, #0
   1a798:	e9c2 0100 	strd	r0, r1, [r2]

    /* reset RF path compensation values */
    rx_path_pwr_compensation = 0;
   1a79c:	4a07      	ldr	r2, [pc, #28]	; (1a7bc <ble_ll_hci_init+0x50>)
   1a79e:	8013      	strh	r3, [r2, #0]
    tx_path_pwr_compensation = 0;
   1a7a0:	4a07      	ldr	r2, [pc, #28]	; (1a7c0 <ble_ll_hci_init+0x54>)
   1a7a2:	8013      	strh	r3, [r2, #0]

#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LL_EXT_ADV)
    /* after reset both legacy and extended advertising commands are allowed */
    hci_adv_mode = ADV_MODE_ANY;
#endif
}
   1a7a4:	4770      	bx	lr
   1a7a6:	bf00      	nop
   1a7a8:	20001e84 	.word	0x20001e84
   1a7ac:	0001a511 	.word	0x0001a511
   1a7b0:	20001ea8 	.word	0x20001ea8
   1a7b4:	20001e98 	.word	0x20001e98
   1a7b8:	20001ea0 	.word	0x20001ea0
   1a7bc:	20001eb0 	.word	0x20001eb0
   1a7c0:	20001eb2 	.word	0x20001eb2

0001a7c4 <ble_ll_hci_ev_datalen_chg>:
 *
 * @param connsm Pointer to connection state machine
 */
void
ble_ll_hci_ev_datalen_chg(struct ble_ll_conn_sm *connsm)
{
   1a7c4:	b510      	push	{r4, lr}
   1a7c6:	4604      	mov	r4, r0
    struct ble_hci_ev_le_subev_data_len_chg *ev;
    struct ble_hci_ev *hci_ev;

    if (ble_ll_hci_is_le_event_enabled(BLE_HCI_LE_SUBEV_DATA_LEN_CHG)) {
   1a7c8:	2007      	movs	r0, #7
   1a7ca:	f7ff ff41 	bl	1a650 <ble_ll_hci_is_le_event_enabled>
   1a7ce:	b900      	cbnz	r0, 1a7d2 <ble_ll_hci_ev_datalen_chg+0xe>
            ev->max_rx_time = htole16(connsm->eff_max_rx_time);

            ble_ll_hci_event_send(hci_ev);
        }
    }
}
   1a7d0:	bd10      	pop	{r4, pc}
        hci_ev = (void *) ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   1a7d2:	2002      	movs	r0, #2
   1a7d4:	f00f fd34 	bl	2a240 <ble_hci_trans_buf_alloc>
        if (hci_ev) {
   1a7d8:	2800      	cmp	r0, #0
   1a7da:	d0f9      	beq.n	1a7d0 <ble_ll_hci_ev_datalen_chg+0xc>
            hci_ev->opcode = BLE_HCI_EVCODE_LE_META;
   1a7dc:	223e      	movs	r2, #62	; 0x3e
   1a7de:	7002      	strb	r2, [r0, #0]
            hci_ev->length = sizeof(*ev);
   1a7e0:	220b      	movs	r2, #11
   1a7e2:	7042      	strb	r2, [r0, #1]
            ev->subev_code = BLE_HCI_LE_SUBEV_DATA_LEN_CHG;
   1a7e4:	2207      	movs	r2, #7
   1a7e6:	7082      	strb	r2, [r0, #2]
            ev->conn_handle = htole16(connsm->conn_handle);
   1a7e8:	88a2      	ldrh	r2, [r4, #4]
   1a7ea:	f8a0 2003 	strh.w	r2, [r0, #3]
            ev->max_tx_octets = htole16(connsm->eff_max_tx_octets);
   1a7ee:	7ba2      	ldrb	r2, [r4, #14]
   1a7f0:	f8a0 2005 	strh.w	r2, [r0, #5]
            ev->max_tx_time = htole16(connsm->eff_max_tx_time);
   1a7f4:	8b22      	ldrh	r2, [r4, #24]
   1a7f6:	f8a0 2007 	strh.w	r2, [r0, #7]
            ev->max_rx_octets = htole16(connsm->eff_max_rx_octets);
   1a7fa:	7be2      	ldrb	r2, [r4, #15]
   1a7fc:	f8a0 2009 	strh.w	r2, [r0, #9]
            ev->max_rx_time = htole16(connsm->eff_max_rx_time);
   1a800:	8b62      	ldrh	r2, [r4, #26]
   1a802:	f8a0 200b 	strh.w	r2, [r0, #11]
            ble_ll_hci_event_send(hci_ev);
   1a806:	f7ff fe6b 	bl	1a4e0 <ble_ll_hci_event_send>
}
   1a80a:	e7e1      	b.n	1a7d0 <ble_ll_hci_ev_datalen_chg+0xc>

0001a80c <ble_ll_hci_ev_rem_conn_parm_req>:
 * @param connsm Pointer to connection state machine
 */
void
ble_ll_hci_ev_rem_conn_parm_req(struct ble_ll_conn_sm *connsm,
                                struct ble_ll_conn_params *cp)
{
   1a80c:	b538      	push	{r3, r4, r5, lr}
   1a80e:	4605      	mov	r5, r0
   1a810:	460c      	mov	r4, r1
    struct ble_hci_ev_le_subev_rem_conn_param_req *ev;
    struct ble_hci_ev *hci_ev;

    if (ble_ll_hci_is_le_event_enabled(BLE_HCI_LE_SUBEV_REM_CONN_PARM_REQ)) {
   1a812:	2006      	movs	r0, #6
   1a814:	f7ff ff1c 	bl	1a650 <ble_ll_hci_is_le_event_enabled>
   1a818:	b900      	cbnz	r0, 1a81c <ble_ll_hci_ev_rem_conn_parm_req+0x10>
            ev->timeout = htole16(cp->timeout);

            ble_ll_hci_event_send(hci_ev);
        }
    }
}
   1a81a:	bd38      	pop	{r3, r4, r5, pc}
        hci_ev = (void *) ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   1a81c:	2002      	movs	r0, #2
   1a81e:	f00f fd0f 	bl	2a240 <ble_hci_trans_buf_alloc>
        if (hci_ev) {
   1a822:	2800      	cmp	r0, #0
   1a824:	d0f9      	beq.n	1a81a <ble_ll_hci_ev_rem_conn_parm_req+0xe>
            hci_ev->opcode = BLE_HCI_EVCODE_LE_META;
   1a826:	223e      	movs	r2, #62	; 0x3e
   1a828:	7002      	strb	r2, [r0, #0]
            hci_ev->length = sizeof(*ev);
   1a82a:	220b      	movs	r2, #11
   1a82c:	7042      	strb	r2, [r0, #1]
            ev->subev_code = BLE_HCI_LE_SUBEV_REM_CONN_PARM_REQ;
   1a82e:	2206      	movs	r2, #6
   1a830:	7082      	strb	r2, [r0, #2]
            ev->conn_handle = htole16(connsm->conn_handle);
   1a832:	88aa      	ldrh	r2, [r5, #4]
   1a834:	f8a0 2003 	strh.w	r2, [r0, #3]
            ev->min_interval = htole16(cp->interval_min);
   1a838:	8822      	ldrh	r2, [r4, #0]
   1a83a:	f8a0 2005 	strh.w	r2, [r0, #5]
            ev->max_interval = htole16(cp->interval_max);
   1a83e:	8862      	ldrh	r2, [r4, #2]
   1a840:	f8a0 2007 	strh.w	r2, [r0, #7]
            ev->latency = htole16(cp->latency);
   1a844:	88a2      	ldrh	r2, [r4, #4]
   1a846:	f8a0 2009 	strh.w	r2, [r0, #9]
            ev->timeout = htole16(cp->timeout);
   1a84a:	88e2      	ldrh	r2, [r4, #6]
   1a84c:	f8a0 200b 	strh.w	r2, [r0, #11]
            ble_ll_hci_event_send(hci_ev);
   1a850:	f7ff fe46 	bl	1a4e0 <ble_ll_hci_event_send>
}
   1a854:	e7e1      	b.n	1a81a <ble_ll_hci_ev_rem_conn_parm_req+0xe>

0001a856 <ble_ll_hci_ev_conn_update>:
 * @param connsm Pointer to connection state machine
 * @param status The error code.
 */
void
ble_ll_hci_ev_conn_update(struct ble_ll_conn_sm *connsm, uint8_t status)
{
   1a856:	b538      	push	{r3, r4, r5, lr}
   1a858:	4604      	mov	r4, r0
   1a85a:	460d      	mov	r5, r1
    struct ble_hci_ev_le_subev_conn_upd_complete *ev;
    struct ble_hci_ev *hci_ev;

    if (ble_ll_hci_is_le_event_enabled(BLE_HCI_LE_SUBEV_CONN_UPD_COMPLETE)) {
   1a85c:	2003      	movs	r0, #3
   1a85e:	f7ff fef7 	bl	1a650 <ble_ll_hci_is_le_event_enabled>
   1a862:	b900      	cbnz	r0, 1a866 <ble_ll_hci_ev_conn_update+0x10>
            ev->supervision_timeout = htole16(connsm->supervision_tmo);

            ble_ll_hci_event_send(hci_ev);
        }
    }
}
   1a864:	bd38      	pop	{r3, r4, r5, pc}
        hci_ev = (void *) ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   1a866:	2002      	movs	r0, #2
   1a868:	f00f fcea 	bl	2a240 <ble_hci_trans_buf_alloc>
        if (hci_ev) {
   1a86c:	2800      	cmp	r0, #0
   1a86e:	d0f9      	beq.n	1a864 <ble_ll_hci_ev_conn_update+0xe>
            hci_ev->opcode = BLE_HCI_EVCODE_LE_META;
   1a870:	223e      	movs	r2, #62	; 0x3e
   1a872:	7002      	strb	r2, [r0, #0]
            hci_ev->length = sizeof(*ev);
   1a874:	220a      	movs	r2, #10
   1a876:	7042      	strb	r2, [r0, #1]
            ev->subev_code = BLE_HCI_LE_SUBEV_CONN_UPD_COMPLETE;
   1a878:	2203      	movs	r2, #3
   1a87a:	7082      	strb	r2, [r0, #2]
            ev->status = status;
   1a87c:	70c5      	strb	r5, [r0, #3]
            ev->conn_handle = htole16(connsm->conn_handle);
   1a87e:	88a2      	ldrh	r2, [r4, #4]
   1a880:	8082      	strh	r2, [r0, #4]
            ev->conn_itvl = htole16(connsm->conn_itvl);
   1a882:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
   1a886:	80c2      	strh	r2, [r0, #6]
            ev->conn_latency = htole16(connsm->slave_latency);
   1a888:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
   1a88c:	8102      	strh	r2, [r0, #8]
            ev->supervision_timeout = htole16(connsm->supervision_tmo);
   1a88e:	f8b4 206c 	ldrh.w	r2, [r4, #108]	; 0x6c
   1a892:	8142      	strh	r2, [r0, #10]
            ble_ll_hci_event_send(hci_ev);
   1a894:	f7ff fe24 	bl	1a4e0 <ble_ll_hci_event_send>
}
   1a898:	e7e4      	b.n	1a864 <ble_ll_hci_ev_conn_update+0xe>

0001a89a <ble_ll_hci_ev_encrypt_chg>:

#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LE_ENCRYPTION)
void
ble_ll_hci_ev_encrypt_chg(struct ble_ll_conn_sm *connsm, uint8_t status)
{
   1a89a:	b538      	push	{r3, r4, r5, lr}
   1a89c:	4604      	mov	r4, r0
   1a89e:	460d      	mov	r5, r1
    struct ble_hci_ev_enc_key_refresh *ev_key_refresh;
    struct ble_hci_ev_enrypt_chg *ev_enc_chf;
    struct ble_hci_ev *hci_ev;

    if (CONN_F_ENC_CHANGE_SENT(connsm) == 0) {
   1a8a0:	7883      	ldrb	r3, [r0, #2]
   1a8a2:	f013 0f04 	tst.w	r3, #4
   1a8a6:	d11c      	bne.n	1a8e2 <ble_ll_hci_ev_encrypt_chg+0x48>
        if (ble_ll_hci_is_event_enabled(BLE_HCI_EVCODE_ENCRYPT_CHG)) {
   1a8a8:	2008      	movs	r0, #8
   1a8aa:	f7ff fefd 	bl	1a6a8 <ble_ll_hci_is_event_enabled>
   1a8ae:	b920      	cbnz	r0, 1a8ba <ble_ll_hci_ev_encrypt_chg+0x20>

                ble_ll_hci_event_send(hci_ev);
            }
        }

        CONN_F_ENC_CHANGE_SENT(connsm) = 1;
   1a8b0:	78a3      	ldrb	r3, [r4, #2]
   1a8b2:	f043 0304 	orr.w	r3, r3, #4
   1a8b6:	70a3      	strb	r3, [r4, #2]
            ev_key_refresh->conn_handle = htole16(connsm->conn_handle);

            ble_ll_hci_event_send(hci_ev);
        }
    }
}
   1a8b8:	bd38      	pop	{r3, r4, r5, pc}
            hci_ev = (void *)ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   1a8ba:	2002      	movs	r0, #2
   1a8bc:	f00f fcc0 	bl	2a240 <ble_hci_trans_buf_alloc>
            if (hci_ev) {
   1a8c0:	2800      	cmp	r0, #0
   1a8c2:	d0f5      	beq.n	1a8b0 <ble_ll_hci_ev_encrypt_chg+0x16>
                hci_ev->opcode = BLE_HCI_EVCODE_ENCRYPT_CHG;
   1a8c4:	2208      	movs	r2, #8
   1a8c6:	7002      	strb	r2, [r0, #0]
                hci_ev->length = sizeof(*ev_enc_chf);
   1a8c8:	2204      	movs	r2, #4
   1a8ca:	7042      	strb	r2, [r0, #1]
                ev_enc_chf->status = status;
   1a8cc:	7085      	strb	r5, [r0, #2]
                ev_enc_chf->connection_handle = htole16(connsm->conn_handle);
   1a8ce:	88a2      	ldrh	r2, [r4, #4]
   1a8d0:	f8a0 2003 	strh.w	r2, [r0, #3]
                ev_enc_chf->enabled = (status == BLE_ERR_SUCCESS) ? 0x01 : 0x00;
   1a8d4:	fab5 f585 	clz	r5, r5
   1a8d8:	096d      	lsrs	r5, r5, #5
   1a8da:	7145      	strb	r5, [r0, #5]
                ble_ll_hci_event_send(hci_ev);
   1a8dc:	f7ff fe00 	bl	1a4e0 <ble_ll_hci_event_send>
   1a8e0:	e7e6      	b.n	1a8b0 <ble_ll_hci_ev_encrypt_chg+0x16>
    if (ble_ll_hci_is_event_enabled(BLE_HCI_EVCODE_ENC_KEY_REFRESH)) {
   1a8e2:	2030      	movs	r0, #48	; 0x30
   1a8e4:	f7ff fee0 	bl	1a6a8 <ble_ll_hci_is_event_enabled>
   1a8e8:	2800      	cmp	r0, #0
   1a8ea:	d0e5      	beq.n	1a8b8 <ble_ll_hci_ev_encrypt_chg+0x1e>
        hci_ev = (void *)ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   1a8ec:	2002      	movs	r0, #2
   1a8ee:	f00f fca7 	bl	2a240 <ble_hci_trans_buf_alloc>
        if (hci_ev) {
   1a8f2:	2800      	cmp	r0, #0
   1a8f4:	d0e0      	beq.n	1a8b8 <ble_ll_hci_ev_encrypt_chg+0x1e>
            hci_ev->opcode = BLE_HCI_EVCODE_ENC_KEY_REFRESH;
   1a8f6:	2230      	movs	r2, #48	; 0x30
   1a8f8:	7002      	strb	r2, [r0, #0]
            hci_ev->length = sizeof(*ev_key_refresh);
   1a8fa:	2203      	movs	r2, #3
   1a8fc:	7042      	strb	r2, [r0, #1]
            ev_key_refresh->status = status;
   1a8fe:	7085      	strb	r5, [r0, #2]
            ev_key_refresh->conn_handle = htole16(connsm->conn_handle);
   1a900:	88a2      	ldrh	r2, [r4, #4]
   1a902:	f8a0 2003 	strh.w	r2, [r0, #3]
            ble_ll_hci_event_send(hci_ev);
   1a906:	f7ff fdeb 	bl	1a4e0 <ble_ll_hci_event_send>
   1a90a:	e7d5      	b.n	1a8b8 <ble_ll_hci_ev_encrypt_chg+0x1e>

0001a90c <ble_ll_hci_ev_ltk_req>:
 *
 * @param connsm Pointer to connection state machine
 */
int
ble_ll_hci_ev_ltk_req(struct ble_ll_conn_sm *connsm)
{
   1a90c:	b510      	push	{r4, lr}
   1a90e:	4604      	mov	r4, r0
    struct ble_hci_ev_le_subev_lt_key_req *ev;
    struct ble_hci_ev *hci_ev;
    int rc;

    if (ble_ll_hci_is_le_event_enabled(BLE_HCI_LE_SUBEV_LT_KEY_REQ)) {
   1a910:	2005      	movs	r0, #5
   1a912:	f7ff fe9d 	bl	1a650 <ble_ll_hci_is_le_event_enabled>
   1a916:	b1e0      	cbz	r0, 1a952 <ble_ll_hci_ev_ltk_req+0x46>
        hci_ev = (void *) ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   1a918:	2002      	movs	r0, #2
   1a91a:	f00f fc91 	bl	2a240 <ble_hci_trans_buf_alloc>
        if (hci_ev) {
   1a91e:	b1d8      	cbz	r0, 1a958 <ble_ll_hci_ev_ltk_req+0x4c>
            hci_ev->opcode = BLE_HCI_EVCODE_LE_META;
   1a920:	223e      	movs	r2, #62	; 0x3e
   1a922:	7002      	strb	r2, [r0, #0]
            hci_ev->length = sizeof(*ev);
   1a924:	220d      	movs	r2, #13
   1a926:	7042      	strb	r2, [r0, #1]
            ev = (void *) hci_ev->data;

            ev->subev_code = BLE_HCI_LE_SUBEV_LT_KEY_REQ;
   1a928:	2205      	movs	r2, #5
   1a92a:	7082      	strb	r2, [r0, #2]
            ev->conn_handle = htole16(connsm->conn_handle);
   1a92c:	88a2      	ldrh	r2, [r4, #4]
   1a92e:	f8a0 2003 	strh.w	r2, [r0, #3]
            ev->rand = htole64(connsm->enc_data.host_rand_num);
   1a932:	f8d4 1128 	ldr.w	r1, [r4, #296]	; 0x128
   1a936:	f8d4 212c 	ldr.w	r2, [r4, #300]	; 0x12c
   1a93a:	f8c0 1005 	str.w	r1, [r0, #5]
   1a93e:	f8c0 2009 	str.w	r2, [r0, #9]
            ev->div = htole16(connsm->enc_data.enc_div);
   1a942:	f8b4 211a 	ldrh.w	r2, [r4, #282]	; 0x11a
   1a946:	f8a0 200d 	strh.w	r2, [r0, #13]

            ble_ll_hci_event_send(hci_ev);
   1a94a:	f7ff fdc9 	bl	1a4e0 <ble_ll_hci_event_send>
        }
        rc = 0;
   1a94e:	2000      	movs	r0, #0
    if (rc == 0) {
        bletest_ltk_req_reply(connsm->conn_handle);
    }
#endif
    return rc;
}
   1a950:	bd10      	pop	{r4, pc}
        rc = -1;
   1a952:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a956:	e7fb      	b.n	1a950 <ble_ll_hci_ev_ltk_req+0x44>
        rc = 0;
   1a958:	2000      	movs	r0, #0
    return rc;
   1a95a:	e7f9      	b.n	1a950 <ble_ll_hci_ev_ltk_req+0x44>

0001a95c <ble_ll_hci_ev_rd_rem_used_feat>:
#endif

void
ble_ll_hci_ev_rd_rem_used_feat(struct ble_ll_conn_sm *connsm, uint8_t status)
{
   1a95c:	b538      	push	{r3, r4, r5, lr}
   1a95e:	4604      	mov	r4, r0
   1a960:	460d      	mov	r5, r1
    struct ble_hci_ev_le_subev_rd_rem_used_feat *ev;
    struct ble_hci_ev *hci_ev;

    if (ble_ll_hci_is_le_event_enabled(BLE_HCI_LE_SUBEV_RD_REM_USED_FEAT)) {
   1a962:	2004      	movs	r0, #4
   1a964:	f7ff fe74 	bl	1a650 <ble_ll_hci_is_le_event_enabled>
   1a968:	b900      	cbnz	r0, 1a96c <ble_ll_hci_ev_rd_rem_used_feat+0x10>
            memcpy(ev->features + 1, connsm->remote_features, 7);

            ble_ll_hci_event_send(hci_ev);
        }
    }
}
   1a96a:	bd38      	pop	{r3, r4, r5, pc}
        hci_ev = (void *) ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   1a96c:	2002      	movs	r0, #2
   1a96e:	f00f fc67 	bl	2a240 <ble_hci_trans_buf_alloc>
        if (hci_ev) {
   1a972:	4603      	mov	r3, r0
   1a974:	2800      	cmp	r0, #0
   1a976:	d0f8      	beq.n	1a96a <ble_ll_hci_ev_rd_rem_used_feat+0xe>
            hci_ev->opcode = BLE_HCI_EVCODE_LE_META;
   1a978:	223e      	movs	r2, #62	; 0x3e
   1a97a:	7002      	strb	r2, [r0, #0]
            hci_ev->length = sizeof(*ev);
   1a97c:	220c      	movs	r2, #12
   1a97e:	7042      	strb	r2, [r0, #1]
            ev->subev_code = BLE_HCI_LE_SUBEV_RD_REM_USED_FEAT;
   1a980:	2204      	movs	r2, #4
   1a982:	7082      	strb	r2, [r0, #2]
            ev->status = status;
   1a984:	70c5      	strb	r5, [r0, #3]
            ev->conn_handle = htole16(connsm->conn_handle);
   1a986:	88a2      	ldrh	r2, [r4, #4]
   1a988:	8082      	strh	r2, [r0, #4]
            ev->features[0] = connsm->conn_features;
   1a98a:	f894 203f 	ldrb.w	r2, [r4, #63]	; 0x3f
   1a98e:	7182      	strb	r2, [r0, #6]
            memcpy(ev->features + 1, connsm->remote_features, 7);
   1a990:	f854 1f40 	ldr.w	r1, [r4, #64]!
   1a994:	f8c0 1007 	str.w	r1, [r0, #7]
   1a998:	88a0      	ldrh	r0, [r4, #4]
   1a99a:	79a1      	ldrb	r1, [r4, #6]
   1a99c:	f8a3 000b 	strh.w	r0, [r3, #11]
   1a9a0:	7359      	strb	r1, [r3, #13]
            ble_ll_hci_event_send(hci_ev);
   1a9a2:	4618      	mov	r0, r3
   1a9a4:	f7ff fd9c 	bl	1a4e0 <ble_ll_hci_event_send>
}
   1a9a8:	e7df      	b.n	1a96a <ble_ll_hci_ev_rd_rem_used_feat+0xe>

0001a9aa <ble_ll_hci_ev_rd_rem_ver>:

void
ble_ll_hci_ev_rd_rem_ver(struct ble_ll_conn_sm *connsm, uint8_t status)
{
   1a9aa:	b538      	push	{r3, r4, r5, lr}
   1a9ac:	4604      	mov	r4, r0
   1a9ae:	460d      	mov	r5, r1
    struct ble_hci_ev_rd_rem_ver_info_cmp *ev;
    struct ble_hci_ev *hci_ev;

    if (ble_ll_hci_is_event_enabled(BLE_HCI_EVCODE_RD_REM_VER_INFO_CMP)) {
   1a9b0:	200c      	movs	r0, #12
   1a9b2:	f7ff fe79 	bl	1a6a8 <ble_ll_hci_is_event_enabled>
   1a9b6:	b900      	cbnz	r0, 1a9ba <ble_ll_hci_ev_rd_rem_ver+0x10>
            ev->subversion = htole16(connsm->sub_vers_nr);

            ble_ll_hci_event_send(hci_ev);
        }
    }
}
   1a9b8:	bd38      	pop	{r3, r4, r5, pc}
        hci_ev = (void *) ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   1a9ba:	2002      	movs	r0, #2
   1a9bc:	f00f fc40 	bl	2a240 <ble_hci_trans_buf_alloc>
        if (hci_ev) {
   1a9c0:	2800      	cmp	r0, #0
   1a9c2:	d0f9      	beq.n	1a9b8 <ble_ll_hci_ev_rd_rem_ver+0xe>
            hci_ev->opcode = BLE_HCI_EVCODE_RD_REM_VER_INFO_CMP;
   1a9c4:	220c      	movs	r2, #12
   1a9c6:	7002      	strb	r2, [r0, #0]
            hci_ev->length = sizeof(*ev);
   1a9c8:	2208      	movs	r2, #8
   1a9ca:	7042      	strb	r2, [r0, #1]
            ev->status = status;
   1a9cc:	7085      	strb	r5, [r0, #2]
            ev->conn_handle = htole16(connsm->conn_handle);
   1a9ce:	88a2      	ldrh	r2, [r4, #4]
   1a9d0:	f8a0 2003 	strh.w	r2, [r0, #3]
            ev->version = connsm->vers_nr;
   1a9d4:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
   1a9d8:	7142      	strb	r2, [r0, #5]
            ev->manufacturer = htole16(connsm->comp_id);
   1a9da:	f8b4 204e 	ldrh.w	r2, [r4, #78]	; 0x4e
   1a9de:	80c2      	strh	r2, [r0, #6]
            ev->subversion = htole16(connsm->sub_vers_nr);
   1a9e0:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
   1a9e4:	8102      	strh	r2, [r0, #8]
            ble_ll_hci_event_send(hci_ev);
   1a9e6:	f7ff fd7b 	bl	1a4e0 <ble_ll_hci_event_send>
}
   1a9ea:	e7e5      	b.n	1a9b8 <ble_ll_hci_ev_rd_rem_ver+0xe>

0001a9ec <ble_ll_hci_ev_hw_err>:
 *
 * @return int 0: event masked or event sent, -1 otherwise
 */
int
ble_ll_hci_ev_hw_err(uint8_t hw_err)
{
   1a9ec:	b510      	push	{r4, lr}
   1a9ee:	4604      	mov	r4, r0
    struct ble_hci_ev_hw_error *ev;
    struct ble_hci_ev *hci_ev;
    int rc;

    rc = 0;
    if (ble_ll_hci_is_event_enabled(BLE_HCI_EVCODE_HW_ERROR)) {
   1a9f0:	2010      	movs	r0, #16
   1a9f2:	f7ff fe59 	bl	1a6a8 <ble_ll_hci_is_event_enabled>
   1a9f6:	b908      	cbnz	r0, 1a9fc <ble_ll_hci_ev_hw_err+0x10>
    rc = 0;
   1a9f8:	2000      	movs	r0, #0
        } else {
            rc = -1;
        }
    }
    return rc;
}
   1a9fa:	bd10      	pop	{r4, pc}
        hci_ev = (void *)ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   1a9fc:	2002      	movs	r0, #2
   1a9fe:	f00f fc1f 	bl	2a240 <ble_hci_trans_buf_alloc>
        if (hci_ev) {
   1aa02:	b140      	cbz	r0, 1aa16 <ble_ll_hci_ev_hw_err+0x2a>
            hci_ev->opcode = BLE_HCI_EVCODE_HW_ERROR;
   1aa04:	2210      	movs	r2, #16
   1aa06:	7002      	strb	r2, [r0, #0]
            hci_ev->length = sizeof(*ev);
   1aa08:	2201      	movs	r2, #1
   1aa0a:	7042      	strb	r2, [r0, #1]
            ev->hw_code = hw_err;
   1aa0c:	7084      	strb	r4, [r0, #2]
            ble_ll_hci_event_send(hci_ev);
   1aa0e:	f7ff fd67 	bl	1a4e0 <ble_ll_hci_event_send>
    rc = 0;
   1aa12:	2000      	movs	r0, #0
   1aa14:	e7f1      	b.n	1a9fa <ble_ll_hci_ev_hw_err+0xe>
            rc = -1;
   1aa16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return rc;
   1aa1a:	e7ee      	b.n	1a9fa <ble_ll_hci_ev_hw_err+0xe>

0001aa1c <ble_ll_hci_ev_databuf_overflow>:

void
ble_ll_hci_ev_databuf_overflow(void)
{
   1aa1c:	b508      	push	{r3, lr}
    struct ble_hci_ev_data_buf_overflow *ev;
    struct ble_hci_ev *hci_ev;

    if (ble_ll_hci_is_event_enabled(BLE_HCI_EVCODE_DATA_BUF_OVERFLOW)) {
   1aa1e:	201a      	movs	r0, #26
   1aa20:	f7ff fe42 	bl	1a6a8 <ble_ll_hci_is_event_enabled>
   1aa24:	b900      	cbnz	r0, 1aa28 <ble_ll_hci_ev_databuf_overflow+0xc>
            ev->link_type = BLE_HCI_EVENT_ACL_BUF_OVERFLOW;

            ble_ll_hci_event_send(hci_ev);
        }
    }
}
   1aa26:	bd08      	pop	{r3, pc}
        hci_ev = (void *) ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   1aa28:	2002      	movs	r0, #2
   1aa2a:	f00f fc09 	bl	2a240 <ble_hci_trans_buf_alloc>
        if (hci_ev) {
   1aa2e:	2800      	cmp	r0, #0
   1aa30:	d0f9      	beq.n	1aa26 <ble_ll_hci_ev_databuf_overflow+0xa>
            hci_ev->opcode = BLE_HCI_EVCODE_DATA_BUF_OVERFLOW;
   1aa32:	221a      	movs	r2, #26
   1aa34:	7002      	strb	r2, [r0, #0]
            hci_ev->length = sizeof(*ev);
   1aa36:	2201      	movs	r2, #1
   1aa38:	7042      	strb	r2, [r0, #1]
            ev->link_type = BLE_HCI_EVENT_ACL_BUF_OVERFLOW;
   1aa3a:	7082      	strb	r2, [r0, #2]
            ble_ll_hci_event_send(hci_ev);
   1aa3c:	f7ff fd50 	bl	1a4e0 <ble_ll_hci_event_send>
}
   1aa40:	e7f1      	b.n	1aa26 <ble_ll_hci_ev_databuf_overflow+0xa>
	...

0001aa44 <ble_ll_rand_sample>:
#define IS_RNUM_BUF_END(x)  \
    (x == &g_ble_ll_rnum_buf[MYNEWT_VAL(BLE_LL_RNG_BUFSIZE) - 1])

void
ble_ll_rand_sample(uint8_t rnum)
{
   1aa44:	b538      	push	{r3, r4, r5, lr}
   1aa46:	4605      	mov	r5, r0
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
   1aa48:	f7f3 fd74 	bl	e534 <os_arch_save_sr>
   1aa4c:	4604      	mov	r4, r0
    if (g_ble_ll_rnum_data.rnd_size < MYNEWT_VAL(BLE_LL_RNG_BUFSIZE)) {
   1aa4e:	4b0f      	ldr	r3, [pc, #60]	; (1aa8c <ble_ll_rand_sample+0x48>)
   1aa50:	7a1b      	ldrb	r3, [r3, #8]
   1aa52:	b2db      	uxtb	r3, r3
   1aa54:	2b1f      	cmp	r3, #31
   1aa56:	d815      	bhi.n	1aa84 <ble_ll_rand_sample+0x40>
        ++g_ble_ll_rnum_data.rnd_size;
   1aa58:	4a0c      	ldr	r2, [pc, #48]	; (1aa8c <ble_ll_rand_sample+0x48>)
   1aa5a:	7a13      	ldrb	r3, [r2, #8]
   1aa5c:	3301      	adds	r3, #1
   1aa5e:	b2db      	uxtb	r3, r3
   1aa60:	7213      	strb	r3, [r2, #8]
        g_ble_ll_rnum_data.rnd_in[0] = rnum;
   1aa62:	6813      	ldr	r3, [r2, #0]
   1aa64:	701d      	strb	r5, [r3, #0]
        if (IS_RNUM_BUF_END(g_ble_ll_rnum_data.rnd_in)) {
   1aa66:	6813      	ldr	r3, [r2, #0]
   1aa68:	4a09      	ldr	r2, [pc, #36]	; (1aa90 <ble_ll_rand_sample+0x4c>)
   1aa6a:	4293      	cmp	r3, r2
   1aa6c:	d006      	beq.n	1aa7c <ble_ll_rand_sample+0x38>
            g_ble_ll_rnum_data.rnd_in = g_ble_ll_rnum_buf;
        } else {
            ++g_ble_ll_rnum_data.rnd_in;
   1aa6e:	3301      	adds	r3, #1
   1aa70:	4a06      	ldr	r2, [pc, #24]	; (1aa8c <ble_ll_rand_sample+0x48>)
   1aa72:	6013      	str	r3, [r2, #0]
        }
    } else {
        /* Stop generating random numbers as we are full */
        ble_hw_rng_stop();
    }
    OS_EXIT_CRITICAL(sr);
   1aa74:	4620      	mov	r0, r4
   1aa76:	f7f3 fd63 	bl	e540 <os_arch_restore_sr>
}
   1aa7a:	bd38      	pop	{r3, r4, r5, pc}
            g_ble_ll_rnum_data.rnd_in = g_ble_ll_rnum_buf;
   1aa7c:	4b03      	ldr	r3, [pc, #12]	; (1aa8c <ble_ll_rand_sample+0x48>)
   1aa7e:	3a1f      	subs	r2, #31
   1aa80:	601a      	str	r2, [r3, #0]
   1aa82:	e7f7      	b.n	1aa74 <ble_ll_rand_sample+0x30>
        ble_hw_rng_stop();
   1aa84:	f002 fdc0 	bl	1d608 <ble_hw_rng_stop>
   1aa88:	e7f4      	b.n	1aa74 <ble_ll_rand_sample+0x30>
   1aa8a:	bf00      	nop
   1aa8c:	20003ab4 	.word	0x20003ab4
   1aa90:	20003adf 	.word	0x20003adf

0001aa94 <ble_ll_rand_data_get>:
#endif

/* Get 'len' bytes of random data */
int
ble_ll_rand_data_get(uint8_t *buf, uint8_t len)
{
   1aa94:	b538      	push	{r3, r4, r5, lr}
   1aa96:	4604      	mov	r4, r0
   1aa98:	460d      	mov	r5, r1
    }
#else
    uint8_t rnums;
    os_sr_t sr;

    while (len != 0) {
   1aa9a:	e017      	b.n	1aacc <ble_ll_rand_data_get+0x38>
        len -= rnums;
        g_ble_ll_rnum_data.rnd_size -= rnums;
        while (rnums) {
            buf[0] = g_ble_ll_rnum_data.rnd_out[0];
            if (IS_RNUM_BUF_END(g_ble_ll_rnum_data.rnd_out)) {
                g_ble_ll_rnum_data.rnd_out = g_ble_ll_rnum_buf;
   1aa9c:	4a1a      	ldr	r2, [pc, #104]	; (1ab08 <ble_ll_rand_data_get+0x74>)
   1aa9e:	391f      	subs	r1, #31
   1aaa0:	6051      	str	r1, [r2, #4]
            } else {
                ++g_ble_ll_rnum_data.rnd_out;
            }
            ++buf;
   1aaa2:	3401      	adds	r4, #1
            --rnums;
   1aaa4:	3b01      	subs	r3, #1
   1aaa6:	b2db      	uxtb	r3, r3
        while (rnums) {
   1aaa8:	b15b      	cbz	r3, 1aac2 <ble_ll_rand_data_get+0x2e>
            buf[0] = g_ble_ll_rnum_data.rnd_out[0];
   1aaaa:	4a17      	ldr	r2, [pc, #92]	; (1ab08 <ble_ll_rand_data_get+0x74>)
   1aaac:	6851      	ldr	r1, [r2, #4]
   1aaae:	7809      	ldrb	r1, [r1, #0]
   1aab0:	7021      	strb	r1, [r4, #0]
            if (IS_RNUM_BUF_END(g_ble_ll_rnum_data.rnd_out)) {
   1aab2:	6852      	ldr	r2, [r2, #4]
   1aab4:	4915      	ldr	r1, [pc, #84]	; (1ab0c <ble_ll_rand_data_get+0x78>)
   1aab6:	428a      	cmp	r2, r1
   1aab8:	d0f0      	beq.n	1aa9c <ble_ll_rand_data_get+0x8>
                ++g_ble_ll_rnum_data.rnd_out;
   1aaba:	3201      	adds	r2, #1
   1aabc:	4912      	ldr	r1, [pc, #72]	; (1ab08 <ble_ll_rand_data_get+0x74>)
   1aabe:	604a      	str	r2, [r1, #4]
   1aac0:	e7ef      	b.n	1aaa2 <ble_ll_rand_data_get+0xe>
        }
        OS_EXIT_CRITICAL(sr);
   1aac2:	f7f3 fd3d 	bl	e540 <os_arch_restore_sr>

        /* Make sure rng is started! */
        ble_hw_rng_start();
   1aac6:	f002 fd85 	bl	1d5d4 <ble_hw_rng_start>

        /* Wait till bytes are in buffer. */
        if (len) {
   1aaca:	b985      	cbnz	r5, 1aaee <ble_ll_rand_data_get+0x5a>
    while (len != 0) {
   1aacc:	b1d5      	cbz	r5, 1ab04 <ble_ll_rand_data_get+0x70>
        OS_ENTER_CRITICAL(sr);
   1aace:	f7f3 fd31 	bl	e534 <os_arch_save_sr>
        rnums = g_ble_ll_rnum_data.rnd_size;
   1aad2:	4b0d      	ldr	r3, [pc, #52]	; (1ab08 <ble_ll_rand_data_get+0x74>)
   1aad4:	7a1b      	ldrb	r3, [r3, #8]
   1aad6:	b2db      	uxtb	r3, r3
        if (rnums > len) {
   1aad8:	429d      	cmp	r5, r3
   1aada:	d200      	bcs.n	1aade <ble_ll_rand_data_get+0x4a>
            rnums = len;
   1aadc:	462b      	mov	r3, r5
        len -= rnums;
   1aade:	1aed      	subs	r5, r5, r3
   1aae0:	b2ed      	uxtb	r5, r5
        g_ble_ll_rnum_data.rnd_size -= rnums;
   1aae2:	4909      	ldr	r1, [pc, #36]	; (1ab08 <ble_ll_rand_data_get+0x74>)
   1aae4:	7a0a      	ldrb	r2, [r1, #8]
   1aae6:	1ad2      	subs	r2, r2, r3
   1aae8:	b2d2      	uxtb	r2, r2
   1aaea:	720a      	strb	r2, [r1, #8]
        while (rnums) {
   1aaec:	e7dc      	b.n	1aaa8 <ble_ll_rand_data_get+0x14>
            while ((g_ble_ll_rnum_data.rnd_size < len) &&
   1aaee:	4b06      	ldr	r3, [pc, #24]	; (1ab08 <ble_ll_rand_data_get+0x74>)
   1aaf0:	7a1b      	ldrb	r3, [r3, #8]
   1aaf2:	b2db      	uxtb	r3, r3
   1aaf4:	42ab      	cmp	r3, r5
   1aaf6:	d2e9      	bcs.n	1aacc <ble_ll_rand_data_get+0x38>
                   (g_ble_ll_rnum_data.rnd_size < MYNEWT_VAL(BLE_LL_RNG_BUFSIZE))) {
   1aaf8:	4b03      	ldr	r3, [pc, #12]	; (1ab08 <ble_ll_rand_data_get+0x74>)
   1aafa:	7a1b      	ldrb	r3, [r3, #8]
   1aafc:	b2db      	uxtb	r3, r3
            while ((g_ble_ll_rnum_data.rnd_size < len) &&
   1aafe:	2b1f      	cmp	r3, #31
   1ab00:	d9f5      	bls.n	1aaee <ble_ll_rand_data_get+0x5a>
   1ab02:	e7e3      	b.n	1aacc <ble_ll_rand_data_get+0x38>
            }
        }
    }
#endif
    return BLE_ERR_SUCCESS;
}
   1ab04:	2000      	movs	r0, #0
   1ab06:	bd38      	pop	{r3, r4, r5, pc}
   1ab08:	20003ab4 	.word	0x20003ab4
   1ab0c:	20003adf 	.word	0x20003adf

0001ab10 <ble_ll_rand_prand_get>:
 *
 * @param prand
 */
void
ble_ll_rand_prand_get(uint8_t *prand)
{
   1ab10:	b510      	push	{r4, lr}
   1ab12:	4604      	mov	r4, r0
    uint16_t sum;

    while (1) {
        /* Get 24 bits of random data */
        ble_ll_rand_data_get(prand, 3);
   1ab14:	2103      	movs	r1, #3
   1ab16:	4620      	mov	r0, r4
   1ab18:	f7ff ffbc 	bl	1aa94 <ble_ll_rand_data_get>

        /* Prand cannot be all zeros or 1's. */
        sum = prand[0] + prand[1] + prand[2];
   1ab1c:	7823      	ldrb	r3, [r4, #0]
   1ab1e:	7862      	ldrb	r2, [r4, #1]
   1ab20:	4413      	add	r3, r2
   1ab22:	78a2      	ldrb	r2, [r4, #2]
        if ((sum != 0) && (sum != (3 * 0xff))) {
   1ab24:	18d3      	adds	r3, r2, r3
   1ab26:	d0f5      	beq.n	1ab14 <ble_ll_rand_prand_get+0x4>
   1ab28:	f240 21fd 	movw	r1, #765	; 0x2fd
   1ab2c:	428b      	cmp	r3, r1
   1ab2e:	d0f1      	beq.n	1ab14 <ble_ll_rand_prand_get+0x4>
            break;
        }
    }

    /* Upper two bits must be 01 */
    prand[2] &= ~0xc0;
   1ab30:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    prand[2] |= 0x40;
   1ab34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   1ab38:	70a2      	strb	r2, [r4, #2]
}
   1ab3a:	bd10      	pop	{r4, pc}

0001ab3c <ble_ll_rand_start>:
 *
 * @return int
 */
int
ble_ll_rand_start(void)
{
   1ab3c:	b508      	push	{r3, lr}
#if MYNEWT_VAL(TRNG)
    /* Nothing to do - this is handled by driver */
#else
    /* Start the generation of numbers if we are not full */
    if (g_ble_ll_rnum_data.rnd_size < MYNEWT_VAL(BLE_LL_RNG_BUFSIZE)) {
   1ab3e:	4b05      	ldr	r3, [pc, #20]	; (1ab54 <ble_ll_rand_start+0x18>)
   1ab40:	7a1b      	ldrb	r3, [r3, #8]
   1ab42:	b2db      	uxtb	r3, r3
   1ab44:	2b1f      	cmp	r3, #31
   1ab46:	d901      	bls.n	1ab4c <ble_ll_rand_start+0x10>
        ble_hw_rng_start();
    }
#endif
    return 0;
}
   1ab48:	2000      	movs	r0, #0
   1ab4a:	bd08      	pop	{r3, pc}
        ble_hw_rng_start();
   1ab4c:	f002 fd42 	bl	1d5d4 <ble_hw_rng_start>
   1ab50:	e7fa      	b.n	1ab48 <ble_ll_rand_start+0xc>
   1ab52:	bf00      	nop
   1ab54:	20003ab4 	.word	0x20003ab4

0001ab58 <ble_ll_rand_init>:
 *
 * @return int
 */
int
ble_ll_rand_init(void)
{
   1ab58:	b508      	push	{r3, lr}
#if MYNEWT_VAL(TRNG)
    g_trng = (struct trng_dev *) os_dev_open("trng", OS_TIMEOUT_NEVER, NULL);
#else
    g_ble_ll_rnum_data.rnd_in = g_ble_ll_rnum_buf;
   1ab5a:	4b05      	ldr	r3, [pc, #20]	; (1ab70 <ble_ll_rand_init+0x18>)
   1ab5c:	4a05      	ldr	r2, [pc, #20]	; (1ab74 <ble_ll_rand_init+0x1c>)
   1ab5e:	601a      	str	r2, [r3, #0]
    g_ble_ll_rnum_data.rnd_out = g_ble_ll_rnum_buf;
   1ab60:	605a      	str	r2, [r3, #4]
    ble_hw_rng_init(ble_ll_rand_sample, 1);
   1ab62:	2101      	movs	r1, #1
   1ab64:	4804      	ldr	r0, [pc, #16]	; (1ab78 <ble_ll_rand_init+0x20>)
   1ab66:	f002 fd11 	bl	1d58c <ble_hw_rng_init>
#endif
    return 0;
}
   1ab6a:	2000      	movs	r0, #0
   1ab6c:	bd08      	pop	{r3, pc}
   1ab6e:	bf00      	nop
   1ab70:	20003ab4 	.word	0x20003ab4
   1ab74:	20003ac0 	.word	0x20003ac0
   1ab78:	0001aa45 	.word	0x0001aa45

0001ab7c <ble_ll_resolv_irk_nonzero>:
{
    int i;
    int rc;

    rc = 0;
    for (i = 0; i < 16; ++i) {
   1ab7c:	2300      	movs	r3, #0
   1ab7e:	2b0f      	cmp	r3, #15
   1ab80:	dc04      	bgt.n	1ab8c <ble_ll_resolv_irk_nonzero+0x10>
        if (*irk != 0) {
   1ab82:	7802      	ldrb	r2, [r0, #0]
   1ab84:	b922      	cbnz	r2, 1ab90 <ble_ll_resolv_irk_nonzero+0x14>
            rc = 1;
            break;
        }
        ++irk;
   1ab86:	3001      	adds	r0, #1
    for (i = 0; i < 16; ++i) {
   1ab88:	3301      	adds	r3, #1
   1ab8a:	e7f8      	b.n	1ab7e <ble_ll_resolv_irk_nonzero+0x2>
    rc = 0;
   1ab8c:	2000      	movs	r0, #0
   1ab8e:	4770      	bx	lr
            rc = 1;
   1ab90:	2001      	movs	r0, #1
    }

    return rc;
}
   1ab92:	4770      	bx	lr

0001ab94 <ble_ll_is_controller_busy>:
{
   1ab94:	b508      	push	{r3, lr}
    return ble_ll_adv_enabled() || ble_ll_scan_enabled() ||
   1ab96:	f7fb f947 	bl	15e28 <ble_ll_adv_enabled>
   1ab9a:	b110      	cbz	r0, 1aba2 <ble_ll_is_controller_busy+0xe>
   1ab9c:	2301      	movs	r3, #1
}
   1ab9e:	4618      	mov	r0, r3
   1aba0:	bd08      	pop	{r3, pc}
    return ble_ll_adv_enabled() || ble_ll_scan_enabled() ||
   1aba2:	f001 fd7d 	bl	1c6a0 <ble_ll_scan_enabled>
   1aba6:	4603      	mov	r3, r0
   1aba8:	b928      	cbnz	r0, 1abb6 <ble_ll_is_controller_busy+0x22>
   1abaa:	4a04      	ldr	r2, [pc, #16]	; (1abbc <ble_ll_is_controller_busy+0x28>)
   1abac:	6812      	ldr	r2, [r2, #0]
   1abae:	2a00      	cmp	r2, #0
   1abb0:	d0f5      	beq.n	1ab9e <ble_ll_is_controller_busy+0xa>
   1abb2:	2301      	movs	r3, #1
   1abb4:	e7f3      	b.n	1ab9e <ble_ll_is_controller_busy+0xa>
   1abb6:	2301      	movs	r3, #1
   1abb8:	e7f1      	b.n	1ab9e <ble_ll_is_controller_busy+0xa>
   1abba:	bf00      	nop
   1abbc:	20003888 	.word	0x20003888

0001abc0 <ble_ll_resolv_list_chg_allowed>:
{
   1abc0:	b508      	push	{r3, lr}
    if (g_ble_ll_resolv_data.addr_res_enabled &&
   1abc2:	4b06      	ldr	r3, [pc, #24]	; (1abdc <ble_ll_resolv_list_chg_allowed+0x1c>)
   1abc4:	781b      	ldrb	r3, [r3, #0]
   1abc6:	b90b      	cbnz	r3, 1abcc <ble_ll_resolv_list_chg_allowed+0xc>
        rc = 1;
   1abc8:	2001      	movs	r0, #1
}
   1abca:	bd08      	pop	{r3, pc}
       ble_ll_is_controller_busy()) {
   1abcc:	f7ff ffe2 	bl	1ab94 <ble_ll_is_controller_busy>
    if (g_ble_ll_resolv_data.addr_res_enabled &&
   1abd0:	b908      	cbnz	r0, 1abd6 <ble_ll_resolv_list_chg_allowed+0x16>
        rc = 1;
   1abd2:	2001      	movs	r0, #1
    return rc;
   1abd4:	e7f9      	b.n	1abca <ble_ll_resolv_list_chg_allowed+0xa>
        rc = 0;
   1abd6:	2000      	movs	r0, #0
   1abd8:	e7f7      	b.n	1abca <ble_ll_resolv_list_chg_allowed+0xa>
   1abda:	bf00      	nop
   1abdc:	20003bb8 	.word	0x20003bb8

0001abe0 <ble_ll_is_on_resolv_list>:
 * is the 'position' of the device in the resolving list (the index of the
 * element plus 1).
 */
static int
ble_ll_is_on_resolv_list(const uint8_t *addr, uint8_t addr_type)
{
   1abe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1abe2:	4607      	mov	r7, r0
   1abe4:	460e      	mov	r6, r1
    int i;
    struct ble_ll_resolv_entry *rl;

    rl = &g_ble_ll_resolv_list[0];
   1abe6:	4c0c      	ldr	r4, [pc, #48]	; (1ac18 <ble_ll_is_on_resolv_list+0x38>)
    for (i = 0; i < g_ble_ll_resolv_data.rl_cnt; ++i) {
   1abe8:	2500      	movs	r5, #0
   1abea:	e001      	b.n	1abf0 <ble_ll_is_on_resolv_list+0x10>
        if ((rl->rl_addr_type == addr_type) &&
            (!memcmp(&rl->rl_identity_addr[0], addr, BLE_DEV_ADDR_LEN))) {
            return i + 1;
        }
        ++rl;
   1abec:	3436      	adds	r4, #54	; 0x36
    for (i = 0; i < g_ble_ll_resolv_data.rl_cnt; ++i) {
   1abee:	3501      	adds	r5, #1
   1abf0:	4b0a      	ldr	r3, [pc, #40]	; (1ac1c <ble_ll_is_on_resolv_list+0x3c>)
   1abf2:	78db      	ldrb	r3, [r3, #3]
   1abf4:	42ab      	cmp	r3, r5
   1abf6:	dd0c      	ble.n	1ac12 <ble_ll_is_on_resolv_list+0x32>
        if ((rl->rl_addr_type == addr_type) &&
   1abf8:	7823      	ldrb	r3, [r4, #0]
   1abfa:	42b3      	cmp	r3, r6
   1abfc:	d1f6      	bne.n	1abec <ble_ll_is_on_resolv_list+0xc>
            (!memcmp(&rl->rl_identity_addr[0], addr, BLE_DEV_ADDR_LEN))) {
   1abfe:	2206      	movs	r2, #6
   1ac00:	4639      	mov	r1, r7
   1ac02:	f104 0024 	add.w	r0, r4, #36	; 0x24
   1ac06:	f7f3 fea7 	bl	e958 <memcmp>
        if ((rl->rl_addr_type == addr_type) &&
   1ac0a:	2800      	cmp	r0, #0
   1ac0c:	d1ee      	bne.n	1abec <ble_ll_is_on_resolv_list+0xc>
            return i + 1;
   1ac0e:	1c68      	adds	r0, r5, #1
   1ac10:	e000      	b.n	1ac14 <ble_ll_is_on_resolv_list+0x34>
    }

    return 0;
   1ac12:	2000      	movs	r0, #0
}
   1ac14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ac16:	bf00      	nop
   1ac18:	20003ae0 	.word	0x20003ae0
   1ac1c:	20003bb8 	.word	0x20003bb8

0001ac20 <ble_ll_resolv_gen_priv_addr>:
{
   1ac20:	b570      	push	{r4, r5, r6, lr}
   1ac22:	b08c      	sub	sp, #48	; 0x30
    BLE_LL_ASSERT(rl != NULL);
   1ac24:	b350      	cbz	r0, 1ac7c <ble_ll_resolv_gen_priv_addr+0x5c>
   1ac26:	4605      	mov	r5, r0
    if (local) {
   1ac28:	bb91      	cbnz	r1, 1ac90 <ble_ll_resolv_gen_priv_addr+0x70>
        addr = rl->rl_peer_rpa;
   1ac2a:	f100 0430 	add.w	r4, r0, #48	; 0x30
        irk = rl->rl_peer_irk;
   1ac2e:	3514      	adds	r5, #20
    ble_ll_rand_prand_get(prand);
   1ac30:	1ce0      	adds	r0, r4, #3
   1ac32:	f7ff ff6d 	bl	1ab10 <ble_ll_rand_prand_get>
    memcpy(ecb.key, irk, 16);
   1ac36:	466e      	mov	r6, sp
   1ac38:	6828      	ldr	r0, [r5, #0]
   1ac3a:	6869      	ldr	r1, [r5, #4]
   1ac3c:	68aa      	ldr	r2, [r5, #8]
   1ac3e:	68eb      	ldr	r3, [r5, #12]
   1ac40:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    memset(ecb.plain_text, 0, 13);
   1ac42:	2300      	movs	r3, #0
   1ac44:	9304      	str	r3, [sp, #16]
   1ac46:	9305      	str	r3, [sp, #20]
   1ac48:	9306      	str	r3, [sp, #24]
   1ac4a:	f88d 301c 	strb.w	r3, [sp, #28]
    ecb.plain_text[13] = prand[2];
   1ac4e:	7963      	ldrb	r3, [r4, #5]
   1ac50:	f88d 301d 	strb.w	r3, [sp, #29]
    ecb.plain_text[14] = prand[1];
   1ac54:	7923      	ldrb	r3, [r4, #4]
   1ac56:	f88d 301e 	strb.w	r3, [sp, #30]
    ecb.plain_text[15] = prand[0];
   1ac5a:	78e3      	ldrb	r3, [r4, #3]
   1ac5c:	f88d 301f 	strb.w	r3, [sp, #31]
    ble_hw_encrypt_block(&ecb);
   1ac60:	4668      	mov	r0, sp
   1ac62:	f002 fc77 	bl	1d554 <ble_hw_encrypt_block>
    addr[0] = ecb.cipher_text[15];
   1ac66:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   1ac6a:	7023      	strb	r3, [r4, #0]
    addr[1] = ecb.cipher_text[14];
   1ac6c:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
   1ac70:	7063      	strb	r3, [r4, #1]
    addr[2] = ecb.cipher_text[13];
   1ac72:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   1ac76:	70a3      	strb	r3, [r4, #2]
}
   1ac78:	b00c      	add	sp, #48	; 0x30
   1ac7a:	bd70      	pop	{r4, r5, r6, pc}
    BLE_LL_ASSERT(rl != NULL);
   1ac7c:	f7f1 fab4 	bl	c1e8 <hal_debugger_connected>
   1ac80:	b100      	cbz	r0, 1ac84 <ble_ll_resolv_gen_priv_addr+0x64>
   1ac82:	be01      	bkpt	0x0001
   1ac84:	2300      	movs	r3, #0
   1ac86:	461a      	mov	r2, r3
   1ac88:	4619      	mov	r1, r3
   1ac8a:	4618      	mov	r0, r3
   1ac8c:	f7f1 ff60 	bl	cb50 <__assert_func>
        addr = rl->rl_local_rpa;
   1ac90:	f100 042a 	add.w	r4, r0, #42	; 0x2a
        irk = rl->rl_local_irk;
   1ac94:	3504      	adds	r5, #4
   1ac96:	e7cb      	b.n	1ac30 <ble_ll_resolv_gen_priv_addr+0x10>

0001ac98 <ble_ll_resolv_rpa_timer_cb>:
{
   1ac98:	b570      	push	{r4, r5, r6, lr}
    rl = &g_ble_ll_resolv_list[0];
   1ac9a:	4c16      	ldr	r4, [pc, #88]	; (1acf4 <ble_ll_resolv_rpa_timer_cb+0x5c>)
    for (i = 0; i < g_ble_ll_resolv_data.rl_cnt; ++i) {
   1ac9c:	2500      	movs	r5, #0
   1ac9e:	e00c      	b.n	1acba <ble_ll_resolv_rpa_timer_cb+0x22>
            OS_ENTER_CRITICAL(sr);
   1aca0:	f7f3 fc48 	bl	e534 <os_arch_save_sr>
   1aca4:	4606      	mov	r6, r0
            ble_ll_resolv_gen_priv_addr(rl, 1);
   1aca6:	2101      	movs	r1, #1
   1aca8:	4620      	mov	r0, r4
   1acaa:	f7ff ffb9 	bl	1ac20 <ble_ll_resolv_gen_priv_addr>
            OS_EXIT_CRITICAL(sr);
   1acae:	4630      	mov	r0, r6
   1acb0:	f7f3 fc46 	bl	e540 <os_arch_restore_sr>
   1acb4:	e008      	b.n	1acc8 <ble_ll_resolv_rpa_timer_cb+0x30>
        ++rl;
   1acb6:	3436      	adds	r4, #54	; 0x36
    for (i = 0; i < g_ble_ll_resolv_data.rl_cnt; ++i) {
   1acb8:	3501      	adds	r5, #1
   1acba:	4b0f      	ldr	r3, [pc, #60]	; (1acf8 <ble_ll_resolv_rpa_timer_cb+0x60>)
   1acbc:	78db      	ldrb	r3, [r3, #3]
   1acbe:	42ab      	cmp	r3, r5
   1acc0:	dd10      	ble.n	1ace4 <ble_ll_resolv_rpa_timer_cb+0x4c>
        if (rl->rl_has_local) {
   1acc2:	78a3      	ldrb	r3, [r4, #2]
   1acc4:	2b00      	cmp	r3, #0
   1acc6:	d1eb      	bne.n	1aca0 <ble_ll_resolv_rpa_timer_cb+0x8>
        if (rl->rl_has_peer) {
   1acc8:	78e3      	ldrb	r3, [r4, #3]
   1acca:	2b00      	cmp	r3, #0
   1accc:	d0f3      	beq.n	1acb6 <ble_ll_resolv_rpa_timer_cb+0x1e>
            OS_ENTER_CRITICAL(sr);
   1acce:	f7f3 fc31 	bl	e534 <os_arch_save_sr>
   1acd2:	4606      	mov	r6, r0
            ble_ll_resolv_gen_priv_addr(rl, 0);
   1acd4:	2100      	movs	r1, #0
   1acd6:	4620      	mov	r0, r4
   1acd8:	f7ff ffa2 	bl	1ac20 <ble_ll_resolv_gen_priv_addr>
            OS_EXIT_CRITICAL(sr);
   1acdc:	4630      	mov	r0, r6
   1acde:	f7f3 fc2f 	bl	e540 <os_arch_restore_sr>
   1ace2:	e7e8      	b.n	1acb6 <ble_ll_resolv_rpa_timer_cb+0x1e>
    ble_npl_callout_reset(&g_ble_ll_resolv_data.rpa_timer,
   1ace4:	4804      	ldr	r0, [pc, #16]	; (1acf8 <ble_ll_resolv_rpa_timer_cb+0x60>)
    return (ble_npl_error_t)os_callout_reset(&co->co, ticks);
   1ace6:	6841      	ldr	r1, [r0, #4]
   1ace8:	3008      	adds	r0, #8
   1acea:	f7f2 f905 	bl	cef8 <os_callout_reset>
    ble_ll_adv_rpa_timeout();
   1acee:	f7fa fed7 	bl	15aa0 <ble_ll_adv_rpa_timeout>
}
   1acf2:	bd70      	pop	{r4, r5, r6, pc}
   1acf4:	20003ae0 	.word	0x20003ae0
   1acf8:	20003bb8 	.word	0x20003bb8

0001acfc <ble_ll_resolv_list_clr>:
{
   1acfc:	b538      	push	{r3, r4, r5, lr}
    if (!ble_ll_resolv_list_chg_allowed()) {
   1acfe:	f7ff ff5f 	bl	1abc0 <ble_ll_resolv_list_chg_allowed>
   1ad02:	b158      	cbz	r0, 1ad1c <ble_ll_resolv_list_clr+0x20>
    g_ble_ll_resolv_data.rl_cnt_hw = 0;
   1ad04:	4d06      	ldr	r5, [pc, #24]	; (1ad20 <ble_ll_resolv_list_clr+0x24>)
   1ad06:	2400      	movs	r4, #0
   1ad08:	70ac      	strb	r4, [r5, #2]
    g_ble_ll_resolv_data.rl_cnt = 0;
   1ad0a:	70ec      	strb	r4, [r5, #3]
    ble_hw_resolv_list_clear();
   1ad0c:	f002 fc8e 	bl	1d62c <ble_hw_resolv_list_clear>
    os_callout_stop(&co->co);
   1ad10:	f105 0008 	add.w	r0, r5, #8
   1ad14:	f7f2 f8d2 	bl	cebc <os_callout_stop>
    return BLE_ERR_SUCCESS;
   1ad18:	4620      	mov	r0, r4
}
   1ad1a:	bd38      	pop	{r3, r4, r5, pc}
        return BLE_ERR_CMD_DISALLOWED;
   1ad1c:	200c      	movs	r0, #12
   1ad1e:	e7fc      	b.n	1ad1a <ble_ll_resolv_list_clr+0x1e>
   1ad20:	20003bb8 	.word	0x20003bb8

0001ad24 <ble_ll_resolv_list_read_size>:
    rsp->size = g_ble_ll_resolv_data.rl_size;
   1ad24:	4b03      	ldr	r3, [pc, #12]	; (1ad34 <ble_ll_resolv_list_read_size+0x10>)
   1ad26:	785b      	ldrb	r3, [r3, #1]
   1ad28:	7003      	strb	r3, [r0, #0]
    *rsplen = sizeof(*rsp);
   1ad2a:	2301      	movs	r3, #1
   1ad2c:	700b      	strb	r3, [r1, #0]
}
   1ad2e:	2000      	movs	r0, #0
   1ad30:	4770      	bx	lr
   1ad32:	bf00      	nop
   1ad34:	20003bb8 	.word	0x20003bb8

0001ad38 <ble_ll_resolv_list_find>:
 *
 * @return Pointer to resolving list entry or NULL if no entry found.
 */
struct ble_ll_resolv_entry *
ble_ll_resolv_list_find(const uint8_t *addr, uint8_t addr_type)
{
   1ad38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ad3a:	4607      	mov	r7, r0
   1ad3c:	460e      	mov	r6, r1
    int i;
    struct ble_ll_resolv_entry *rl;

    rl = &g_ble_ll_resolv_list[0];
   1ad3e:	4c0c      	ldr	r4, [pc, #48]	; (1ad70 <ble_ll_resolv_list_find+0x38>)
    for (i = 0; i < g_ble_ll_resolv_data.rl_cnt; ++i) {
   1ad40:	2500      	movs	r5, #0
   1ad42:	e001      	b.n	1ad48 <ble_ll_resolv_list_find+0x10>
        if ((rl->rl_addr_type == addr_type) &&
            (!memcmp(&rl->rl_identity_addr[0], addr, BLE_DEV_ADDR_LEN))) {
            return rl;
        }
        ++rl;
   1ad44:	3436      	adds	r4, #54	; 0x36
    for (i = 0; i < g_ble_ll_resolv_data.rl_cnt; ++i) {
   1ad46:	3501      	adds	r5, #1
   1ad48:	4b0a      	ldr	r3, [pc, #40]	; (1ad74 <ble_ll_resolv_list_find+0x3c>)
   1ad4a:	78db      	ldrb	r3, [r3, #3]
   1ad4c:	42ab      	cmp	r3, r5
   1ad4e:	dd0b      	ble.n	1ad68 <ble_ll_resolv_list_find+0x30>
        if ((rl->rl_addr_type == addr_type) &&
   1ad50:	7823      	ldrb	r3, [r4, #0]
   1ad52:	42b3      	cmp	r3, r6
   1ad54:	d1f6      	bne.n	1ad44 <ble_ll_resolv_list_find+0xc>
            (!memcmp(&rl->rl_identity_addr[0], addr, BLE_DEV_ADDR_LEN))) {
   1ad56:	2206      	movs	r2, #6
   1ad58:	4639      	mov	r1, r7
   1ad5a:	f104 0024 	add.w	r0, r4, #36	; 0x24
   1ad5e:	f7f3 fdfb 	bl	e958 <memcmp>
        if ((rl->rl_addr_type == addr_type) &&
   1ad62:	2800      	cmp	r0, #0
   1ad64:	d1ee      	bne.n	1ad44 <ble_ll_resolv_list_find+0xc>
   1ad66:	e000      	b.n	1ad6a <ble_ll_resolv_list_find+0x32>
    }

    return NULL;
   1ad68:	2400      	movs	r4, #0
}
   1ad6a:	4620      	mov	r0, r4
   1ad6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ad6e:	bf00      	nop
   1ad70:	20003ae0 	.word	0x20003ae0
   1ad74:	20003bb8 	.word	0x20003bb8

0001ad78 <ble_ll_resolv_list_add>:
 *
 * @return int
 */
int
ble_ll_resolv_list_add(const uint8_t *cmdbuf, uint8_t len)
{
   1ad78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    const struct ble_hci_le_add_resolv_list_cp *cmd = (const void *) cmdbuf;
    struct ble_ll_resolv_entry *rl;
    int rc = BLE_ERR_SUCCESS;

    if (len != sizeof(*cmd)) {
   1ad7c:	2927      	cmp	r1, #39	; 0x27
   1ad7e:	d003      	beq.n	1ad88 <ble_ll_resolv_list_add+0x10>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1ad80:	2512      	movs	r5, #18
        ble_npl_callout_reset(&g_ble_ll_resolv_data.rpa_timer,
                              g_ble_ll_resolv_data.rpa_tmo);
    }

    return rc;
}
   1ad82:	4628      	mov	r0, r5
   1ad84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1ad88:	4604      	mov	r4, r0
    if (!ble_ll_resolv_list_chg_allowed()) {
   1ad8a:	f7ff ff19 	bl	1abc0 <ble_ll_resolv_list_chg_allowed>
   1ad8e:	2800      	cmp	r0, #0
   1ad90:	d07d      	beq.n	1ae8e <ble_ll_resolv_list_add+0x116>
    if (g_ble_ll_resolv_data.rl_cnt >= g_ble_ll_resolv_data.rl_size) {
   1ad92:	4b42      	ldr	r3, [pc, #264]	; (1ae9c <ble_ll_resolv_list_add+0x124>)
   1ad94:	78df      	ldrb	r7, [r3, #3]
   1ad96:	785b      	ldrb	r3, [r3, #1]
   1ad98:	429f      	cmp	r7, r3
   1ad9a:	d27a      	bcs.n	1ae92 <ble_ll_resolv_list_add+0x11a>
    if (ble_ll_is_on_resolv_list(cmd->peer_id_addr, cmd->peer_addr_type)) {
   1ad9c:	f104 0801 	add.w	r8, r4, #1
   1ada0:	7821      	ldrb	r1, [r4, #0]
   1ada2:	4640      	mov	r0, r8
   1ada4:	f7ff ff1c 	bl	1abe0 <ble_ll_is_on_resolv_list>
   1ada8:	4605      	mov	r5, r0
   1adaa:	2800      	cmp	r0, #0
   1adac:	d173      	bne.n	1ae96 <ble_ll_resolv_list_add+0x11e>
    if (ble_ll_resolv_irk_nonzero(cmd->peer_irk)) {
   1adae:	f104 0907 	add.w	r9, r4, #7
   1adb2:	4648      	mov	r0, r9
   1adb4:	f7ff fee2 	bl	1ab7c <ble_ll_resolv_irk_nonzero>
   1adb8:	bb60      	cbnz	r0, 1ae14 <ble_ll_resolv_list_add+0x9c>
        rl = &g_ble_ll_resolv_list[g_ble_ll_resolv_data.rl_cnt];
   1adba:	2636      	movs	r6, #54	; 0x36
   1adbc:	4b38      	ldr	r3, [pc, #224]	; (1aea0 <ble_ll_resolv_list_add+0x128>)
   1adbe:	fb06 3607 	mla	r6, r6, r7, r3
    memset (rl, 0, sizeof(*rl));
   1adc2:	2236      	movs	r2, #54	; 0x36
   1adc4:	2100      	movs	r1, #0
   1adc6:	4630      	mov	r0, r6
   1adc8:	f7f3 fe12 	bl	e9f0 <memset>
    rl->rl_addr_type = cmd->peer_addr_type;
   1adcc:	7822      	ldrb	r2, [r4, #0]
   1adce:	4633      	mov	r3, r6
   1add0:	f803 2b24 	strb.w	r2, [r3], #36
    memcpy(rl->rl_identity_addr, cmd->peer_id_addr, BLE_DEV_ADDR_LEN);
   1add4:	f8d8 2000 	ldr.w	r2, [r8]
   1add8:	6272      	str	r2, [r6, #36]	; 0x24
   1adda:	f8b8 2004 	ldrh.w	r2, [r8, #4]
   1adde:	809a      	strh	r2, [r3, #4]
    if (ble_ll_resolv_irk_nonzero(cmd->peer_irk)) {
   1ade0:	4648      	mov	r0, r9
   1ade2:	f7ff fecb 	bl	1ab7c <ble_ll_resolv_irk_nonzero>
   1ade6:	bb28      	cbnz	r0, 1ae34 <ble_ll_resolv_list_add+0xbc>
    if (ble_ll_resolv_irk_nonzero(cmd->local_irk)) {
   1ade8:	3417      	adds	r4, #23
   1adea:	4620      	mov	r0, r4
   1adec:	f7ff fec6 	bl	1ab7c <ble_ll_resolv_irk_nonzero>
   1adf0:	bb68      	cbnz	r0, 1ae4e <ble_ll_resolv_list_add+0xd6>
    rl->rl_priv_mode = BLE_HCI_PRIVACY_NETWORK;
   1adf2:	2300      	movs	r3, #0
   1adf4:	7073      	strb	r3, [r6, #1]
    if (rl->rl_has_peer) {
   1adf6:	78f3      	ldrb	r3, [r6, #3]
   1adf8:	bba3      	cbnz	r3, 1ae64 <ble_ll_resolv_list_add+0xec>
    g_ble_ll_resolv_data.rl_cnt++;
   1adfa:	4a28      	ldr	r2, [pc, #160]	; (1ae9c <ble_ll_resolv_list_add+0x124>)
   1adfc:	78d3      	ldrb	r3, [r2, #3]
   1adfe:	3301      	adds	r3, #1
   1ae00:	b2db      	uxtb	r3, r3
   1ae02:	70d3      	strb	r3, [r2, #3]
    if (g_ble_ll_resolv_data.rl_cnt == 1) {
   1ae04:	2b01      	cmp	r3, #1
   1ae06:	d1bc      	bne.n	1ad82 <ble_ll_resolv_list_add+0xa>
        ble_npl_callout_reset(&g_ble_ll_resolv_data.rpa_timer,
   1ae08:	4610      	mov	r0, r2
    return (ble_npl_error_t)os_callout_reset(&co->co, ticks);
   1ae0a:	6851      	ldr	r1, [r2, #4]
   1ae0c:	3008      	adds	r0, #8
   1ae0e:	f7f2 f873 	bl	cef8 <os_callout_reset>
   1ae12:	e7b6      	b.n	1ad82 <ble_ll_resolv_list_add+0xa>
        memmove(&g_ble_ll_resolv_list[g_ble_ll_resolv_data.rl_cnt_hw + 1],
   1ae14:	4b21      	ldr	r3, [pc, #132]	; (1ae9c <ble_ll_resolv_list_add+0x124>)
   1ae16:	789b      	ldrb	r3, [r3, #2]
   1ae18:	2236      	movs	r2, #54	; 0x36
   1ae1a:	fb03 2c02 	mla	ip, r3, r2, r2
   1ae1e:	4820      	ldr	r0, [pc, #128]	; (1aea0 <ble_ll_resolv_list_add+0x128>)
                &g_ble_ll_resolv_list[g_ble_ll_resolv_data.rl_cnt_hw],
   1ae20:	fb02 0603 	mla	r6, r2, r3, r0
                (g_ble_ll_resolv_data.rl_cnt - g_ble_ll_resolv_data.rl_cnt_hw) *
   1ae24:	1aff      	subs	r7, r7, r3
        memmove(&g_ble_ll_resolv_list[g_ble_ll_resolv_data.rl_cnt_hw + 1],
   1ae26:	fb02 f207 	mul.w	r2, r2, r7
   1ae2a:	4631      	mov	r1, r6
   1ae2c:	4460      	add	r0, ip
   1ae2e:	f7f3 fdc4 	bl	e9ba <memmove>
   1ae32:	e7c6      	b.n	1adc2 <ble_ll_resolv_list_add+0x4a>
        swap_buf(rl->rl_peer_irk, cmd->peer_irk, 16);
   1ae34:	2210      	movs	r2, #16
   1ae36:	4649      	mov	r1, r9
   1ae38:	f106 0014 	add.w	r0, r6, #20
   1ae3c:	f013 fffd 	bl	2ee3a <swap_buf>
        rl->rl_has_peer = 1;
   1ae40:	2301      	movs	r3, #1
   1ae42:	70f3      	strb	r3, [r6, #3]
        ble_ll_resolv_gen_priv_addr(rl, 0);
   1ae44:	2100      	movs	r1, #0
   1ae46:	4630      	mov	r0, r6
   1ae48:	f7ff feea 	bl	1ac20 <ble_ll_resolv_gen_priv_addr>
   1ae4c:	e7cc      	b.n	1ade8 <ble_ll_resolv_list_add+0x70>
        swap_buf(rl->rl_local_irk, cmd->local_irk, 16);
   1ae4e:	2210      	movs	r2, #16
   1ae50:	4621      	mov	r1, r4
   1ae52:	1d30      	adds	r0, r6, #4
   1ae54:	f013 fff1 	bl	2ee3a <swap_buf>
        rl->rl_has_local = 1;
   1ae58:	2101      	movs	r1, #1
   1ae5a:	70b1      	strb	r1, [r6, #2]
        ble_ll_resolv_gen_priv_addr(rl, 1);
   1ae5c:	4630      	mov	r0, r6
   1ae5e:	f7ff fedf 	bl	1ac20 <ble_ll_resolv_gen_priv_addr>
   1ae62:	e7c6      	b.n	1adf2 <ble_ll_resolv_list_add+0x7a>
        rc = ble_hw_resolv_list_add(rl->rl_peer_irk);
   1ae64:	f106 0014 	add.w	r0, r6, #20
   1ae68:	f002 fbe6 	bl	1d638 <ble_hw_resolv_list_add>
        BLE_LL_ASSERT(rc == BLE_ERR_SUCCESS);
   1ae6c:	4605      	mov	r5, r0
   1ae6e:	b920      	cbnz	r0, 1ae7a <ble_ll_resolv_list_add+0x102>
        g_ble_ll_resolv_data.rl_cnt_hw++;
   1ae70:	4a0a      	ldr	r2, [pc, #40]	; (1ae9c <ble_ll_resolv_list_add+0x124>)
   1ae72:	7893      	ldrb	r3, [r2, #2]
   1ae74:	3301      	adds	r3, #1
   1ae76:	7093      	strb	r3, [r2, #2]
   1ae78:	e7bf      	b.n	1adfa <ble_ll_resolv_list_add+0x82>
        BLE_LL_ASSERT(rc == BLE_ERR_SUCCESS);
   1ae7a:	f7f1 f9b5 	bl	c1e8 <hal_debugger_connected>
   1ae7e:	b100      	cbz	r0, 1ae82 <ble_ll_resolv_list_add+0x10a>
   1ae80:	be01      	bkpt	0x0001
   1ae82:	2300      	movs	r3, #0
   1ae84:	461a      	mov	r2, r3
   1ae86:	4619      	mov	r1, r3
   1ae88:	4618      	mov	r0, r3
   1ae8a:	f7f1 fe61 	bl	cb50 <__assert_func>
        return BLE_ERR_CMD_DISALLOWED;
   1ae8e:	250c      	movs	r5, #12
   1ae90:	e777      	b.n	1ad82 <ble_ll_resolv_list_add+0xa>
        return BLE_ERR_MEM_CAPACITY;
   1ae92:	2507      	movs	r5, #7
   1ae94:	e775      	b.n	1ad82 <ble_ll_resolv_list_add+0xa>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1ae96:	2512      	movs	r5, #18
   1ae98:	e773      	b.n	1ad82 <ble_ll_resolv_list_add+0xa>
   1ae9a:	bf00      	nop
   1ae9c:	20003bb8 	.word	0x20003bb8
   1aea0:	20003ae0 	.word	0x20003ae0

0001aea4 <ble_ll_resolv_list_rmv>:
ble_ll_resolv_list_rmv(const uint8_t *cmdbuf, uint8_t len)
{
    const struct ble_hci_le_rmv_resolve_list_cp *cmd = (const void *) cmdbuf;
    int position;

    if (len != sizeof(*cmd)) {
   1aea4:	2907      	cmp	r1, #7
   1aea6:	d001      	beq.n	1aeac <ble_ll_resolv_list_rmv+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1aea8:	2012      	movs	r0, #18

        return BLE_ERR_SUCCESS;
    }

    return BLE_ERR_UNK_CONN_ID;
}
   1aeaa:	4770      	bx	lr
{
   1aeac:	b570      	push	{r4, r5, r6, lr}
   1aeae:	4604      	mov	r4, r0
    if (!ble_ll_resolv_list_chg_allowed()) {
   1aeb0:	f7ff fe86 	bl	1abc0 <ble_ll_resolv_list_chg_allowed>
   1aeb4:	2800      	cmp	r0, #0
   1aeb6:	d037      	beq.n	1af28 <ble_ll_resolv_list_rmv+0x84>
    position = ble_ll_is_on_resolv_list(cmd->peer_id_addr, cmd->peer_addr_type);
   1aeb8:	7821      	ldrb	r1, [r4, #0]
   1aeba:	1c60      	adds	r0, r4, #1
   1aebc:	f7ff fe90 	bl	1abe0 <ble_ll_is_on_resolv_list>
    if (position) {
   1aec0:	4604      	mov	r4, r0
   1aec2:	b398      	cbz	r0, 1af2c <ble_ll_resolv_list_rmv+0x88>
        BLE_LL_ASSERT(position <= g_ble_ll_resolv_data.rl_cnt);
   1aec4:	4b1a      	ldr	r3, [pc, #104]	; (1af30 <ble_ll_resolv_list_rmv+0x8c>)
   1aec6:	78dd      	ldrb	r5, [r3, #3]
   1aec8:	4285      	cmp	r5, r0
   1aeca:	db16      	blt.n	1aefa <ble_ll_resolv_list_rmv+0x56>
        memmove(&g_ble_ll_resolv_list[position - 1],
   1aecc:	1e46      	subs	r6, r0, #1
   1aece:	2336      	movs	r3, #54	; 0x36
   1aed0:	4818      	ldr	r0, [pc, #96]	; (1af34 <ble_ll_resolv_list_rmv+0x90>)
                (g_ble_ll_resolv_data.rl_cnt - position) *
   1aed2:	1b2a      	subs	r2, r5, r4
        memmove(&g_ble_ll_resolv_list[position - 1],
   1aed4:	fb03 f202 	mul.w	r2, r3, r2
   1aed8:	fb03 0104 	mla	r1, r3, r4, r0
   1aedc:	fb03 0006 	mla	r0, r3, r6, r0
   1aee0:	f7f3 fd6b 	bl	e9ba <memmove>
        g_ble_ll_resolv_data.rl_cnt--;
   1aee4:	4b12      	ldr	r3, [pc, #72]	; (1af30 <ble_ll_resolv_list_rmv+0x8c>)
   1aee6:	3d01      	subs	r5, #1
   1aee8:	70dd      	strb	r5, [r3, #3]
        if (position <= g_ble_ll_resolv_data.rl_cnt_hw) {
   1aeea:	789b      	ldrb	r3, [r3, #2]
   1aeec:	42a3      	cmp	r3, r4
   1aeee:	da0e      	bge.n	1af0e <ble_ll_resolv_list_rmv+0x6a>
        if (g_ble_ll_resolv_data.rl_cnt == 0) {
   1aef0:	4b0f      	ldr	r3, [pc, #60]	; (1af30 <ble_ll_resolv_list_rmv+0x8c>)
   1aef2:	78db      	ldrb	r3, [r3, #3]
   1aef4:	b19b      	cbz	r3, 1af1e <ble_ll_resolv_list_rmv+0x7a>
        return BLE_ERR_SUCCESS;
   1aef6:	2000      	movs	r0, #0
   1aef8:	e017      	b.n	1af2a <ble_ll_resolv_list_rmv+0x86>
        BLE_LL_ASSERT(position <= g_ble_ll_resolv_data.rl_cnt);
   1aefa:	f7f1 f975 	bl	c1e8 <hal_debugger_connected>
   1aefe:	b100      	cbz	r0, 1af02 <ble_ll_resolv_list_rmv+0x5e>
   1af00:	be01      	bkpt	0x0001
   1af02:	2300      	movs	r3, #0
   1af04:	461a      	mov	r2, r3
   1af06:	4619      	mov	r1, r3
   1af08:	4618      	mov	r0, r3
   1af0a:	f7f1 fe21 	bl	cb50 <__assert_func>
            ble_hw_resolv_list_rmv(position - 1);
   1af0e:	4630      	mov	r0, r6
   1af10:	f002 fbae 	bl	1d670 <ble_hw_resolv_list_rmv>
            g_ble_ll_resolv_data.rl_cnt_hw--;
   1af14:	4a06      	ldr	r2, [pc, #24]	; (1af30 <ble_ll_resolv_list_rmv+0x8c>)
   1af16:	7893      	ldrb	r3, [r2, #2]
   1af18:	3b01      	subs	r3, #1
   1af1a:	7093      	strb	r3, [r2, #2]
   1af1c:	e7e8      	b.n	1aef0 <ble_ll_resolv_list_rmv+0x4c>
    os_callout_stop(&co->co);
   1af1e:	4806      	ldr	r0, [pc, #24]	; (1af38 <ble_ll_resolv_list_rmv+0x94>)
   1af20:	f7f1 ffcc 	bl	cebc <os_callout_stop>
        return BLE_ERR_SUCCESS;
   1af24:	2000      	movs	r0, #0
   1af26:	e000      	b.n	1af2a <ble_ll_resolv_list_rmv+0x86>
        return BLE_ERR_CMD_DISALLOWED;
   1af28:	200c      	movs	r0, #12
}
   1af2a:	bd70      	pop	{r4, r5, r6, pc}
    return BLE_ERR_UNK_CONN_ID;
   1af2c:	2002      	movs	r0, #2
   1af2e:	e7fc      	b.n	1af2a <ble_ll_resolv_list_rmv+0x86>
   1af30:	20003bb8 	.word	0x20003bb8
   1af34:	20003ae0 	.word	0x20003ae0
   1af38:	20003bc0 	.word	0x20003bc0

0001af3c <ble_ll_resolv_enable_cmd>:
int
ble_ll_resolv_enable_cmd(const uint8_t *cmdbuf, uint8_t len)
{
    const struct ble_hci_le_set_addr_res_en_cp *cmd = (const void *) cmdbuf;

    if (len != sizeof(*cmd)) {
   1af3c:	2901      	cmp	r1, #1
   1af3e:	d002      	beq.n	1af46 <ble_ll_resolv_enable_cmd+0xa>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1af40:	2312      	movs	r3, #18
    }

    g_ble_ll_resolv_data.addr_res_enabled = cmd->enable;

    return BLE_ERR_SUCCESS;
}
   1af42:	4618      	mov	r0, r3
   1af44:	4770      	bx	lr
{
   1af46:	b510      	push	{r4, lr}
   1af48:	4604      	mov	r4, r0
    if (ble_ll_is_controller_busy()) {
   1af4a:	f7ff fe23 	bl	1ab94 <ble_ll_is_controller_busy>
   1af4e:	4603      	mov	r3, r0
   1af50:	b930      	cbnz	r0, 1af60 <ble_ll_resolv_enable_cmd+0x24>
    if (cmd->enable > 1) {
   1af52:	7822      	ldrb	r2, [r4, #0]
   1af54:	2a01      	cmp	r2, #1
   1af56:	d805      	bhi.n	1af64 <ble_ll_resolv_enable_cmd+0x28>
    g_ble_ll_resolv_data.addr_res_enabled = cmd->enable;
   1af58:	4903      	ldr	r1, [pc, #12]	; (1af68 <ble_ll_resolv_enable_cmd+0x2c>)
   1af5a:	700a      	strb	r2, [r1, #0]
}
   1af5c:	4618      	mov	r0, r3
   1af5e:	bd10      	pop	{r4, pc}
        return  BLE_ERR_CMD_DISALLOWED;
   1af60:	230c      	movs	r3, #12
   1af62:	e7fb      	b.n	1af5c <ble_ll_resolv_enable_cmd+0x20>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1af64:	2312      	movs	r3, #18
   1af66:	e7f9      	b.n	1af5c <ble_ll_resolv_enable_cmd+0x20>
   1af68:	20003bb8 	.word	0x20003bb8

0001af6c <ble_ll_resolv_peer_addr_rd>:
    const struct ble_hci_le_rd_peer_recolv_addr_cp *cmd = (const void *) cmdbuf;
    struct ble_hci_le_rd_peer_recolv_addr_rp *rsp = (void *) rspbuf;
    struct ble_ll_resolv_entry *rl;
    int rc;

    if (len != sizeof(*cmd)) {
   1af6c:	2907      	cmp	r1, #7
   1af6e:	d001      	beq.n	1af74 <ble_ll_resolv_peer_addr_rd+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1af70:	2012      	movs	r0, #18
        rc = BLE_ERR_UNK_CONN_ID;
    }

    *rsplen = sizeof(*rsp);
    return rc;
}
   1af72:	4770      	bx	lr
{
   1af74:	b538      	push	{r3, r4, r5, lr}
   1af76:	461d      	mov	r5, r3
   1af78:	4614      	mov	r4, r2
    rl = ble_ll_resolv_list_find(cmd->peer_id_addr, cmd->peer_addr_type);
   1af7a:	7801      	ldrb	r1, [r0, #0]
   1af7c:	3001      	adds	r0, #1
   1af7e:	f7ff fedb 	bl	1ad38 <ble_ll_resolv_list_find>
    if (rl) {
   1af82:	b140      	cbz	r0, 1af96 <ble_ll_resolv_peer_addr_rd+0x2a>
        memcpy(rsp->rpa, rl->rl_peer_rpa, BLE_DEV_ADDR_LEN);
   1af84:	f850 3f30 	ldr.w	r3, [r0, #48]!
   1af88:	6023      	str	r3, [r4, #0]
   1af8a:	8883      	ldrh	r3, [r0, #4]
   1af8c:	80a3      	strh	r3, [r4, #4]
        rc = BLE_ERR_SUCCESS;
   1af8e:	2000      	movs	r0, #0
    *rsplen = sizeof(*rsp);
   1af90:	2306      	movs	r3, #6
   1af92:	702b      	strb	r3, [r5, #0]
}
   1af94:	bd38      	pop	{r3, r4, r5, pc}
        memset(rsp->rpa, 0, BLE_DEV_ADDR_LEN);
   1af96:	2300      	movs	r3, #0
   1af98:	6023      	str	r3, [r4, #0]
   1af9a:	80a3      	strh	r3, [r4, #4]
        rc = BLE_ERR_UNK_CONN_ID;
   1af9c:	2002      	movs	r0, #2
   1af9e:	e7f7      	b.n	1af90 <ble_ll_resolv_peer_addr_rd+0x24>

0001afa0 <ble_ll_resolv_local_addr_rd>:
    const struct ble_hci_le_rd_local_recolv_addr_cp *cmd = (const void *) cmdbuf;
    struct ble_hci_le_rd_local_recolv_addr_rp *rsp = (void *) rspbuf;
    struct ble_ll_resolv_entry *rl;
    int rc;

    if (len != sizeof(*cmd)) {
   1afa0:	2907      	cmp	r1, #7
   1afa2:	d001      	beq.n	1afa8 <ble_ll_resolv_local_addr_rd+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1afa4:	2012      	movs	r0, #18
        rc = BLE_ERR_UNK_CONN_ID;
    }

    *rsplen = sizeof(*rsp);
    return rc;
}
   1afa6:	4770      	bx	lr
{
   1afa8:	b538      	push	{r3, r4, r5, lr}
   1afaa:	461d      	mov	r5, r3
   1afac:	4614      	mov	r4, r2
    rl = ble_ll_resolv_list_find(cmd->peer_id_addr, cmd->peer_addr_type);
   1afae:	7801      	ldrb	r1, [r0, #0]
   1afb0:	3001      	adds	r0, #1
   1afb2:	f7ff fec1 	bl	1ad38 <ble_ll_resolv_list_find>
    if (rl) {
   1afb6:	b140      	cbz	r0, 1afca <ble_ll_resolv_local_addr_rd+0x2a>
        memcpy(rsp->rpa, rl->rl_local_rpa, BLE_DEV_ADDR_LEN);
   1afb8:	f850 3f2a 	ldr.w	r3, [r0, #42]!
   1afbc:	6023      	str	r3, [r4, #0]
   1afbe:	8883      	ldrh	r3, [r0, #4]
   1afc0:	80a3      	strh	r3, [r4, #4]
        rc = BLE_ERR_SUCCESS;
   1afc2:	2000      	movs	r0, #0
    *rsplen = sizeof(*rsp);
   1afc4:	2306      	movs	r3, #6
   1afc6:	702b      	strb	r3, [r5, #0]
}
   1afc8:	bd38      	pop	{r3, r4, r5, pc}
        memset(rsp->rpa, 0, BLE_DEV_ADDR_LEN);
   1afca:	2300      	movs	r3, #0
   1afcc:	6023      	str	r3, [r4, #0]
   1afce:	80a3      	strh	r3, [r4, #4]
        rc = BLE_ERR_UNK_CONN_ID;
   1afd0:	2002      	movs	r0, #2
   1afd2:	e7f7      	b.n	1afc4 <ble_ll_resolv_local_addr_rd+0x24>

0001afd4 <ble_ll_resolv_set_rpa_tmo>:
ble_ll_resolv_set_rpa_tmo(const uint8_t *cmdbuf, uint8_t len)
{
    const struct ble_hci_le_set_rpa_tmo_cp *cmd = (const void *)cmdbuf;
    uint16_t tmo_secs;

    if (len != sizeof(*cmd)) {
   1afd4:	2902      	cmp	r1, #2
   1afd6:	d11e      	bne.n	1b016 <ble_ll_resolv_set_rpa_tmo+0x42>
{
   1afd8:	b508      	push	{r3, lr}
        return BLE_ERR_INV_HCI_CMD_PARMS;
    }

    tmo_secs = le16toh(cmd->rpa_timeout);
   1afda:	8802      	ldrh	r2, [r0, #0]
    if (!((tmo_secs > 0) && (tmo_secs <= 0xA1B8))) {
   1afdc:	1e53      	subs	r3, r2, #1
   1afde:	b29b      	uxth	r3, r3
   1afe0:	f24a 11b7 	movw	r1, #41399	; 0xa1b7
   1afe4:	428b      	cmp	r3, r1
   1afe6:	d818      	bhi.n	1b01a <ble_ll_resolv_set_rpa_tmo+0x46>
        return BLE_ERR_INV_HCI_CMD_PARMS;
    }

    g_ble_ll_resolv_data.rpa_tmo = ble_npl_time_ms_to_ticks32(tmo_secs * 1000);
   1afe8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1afec:	fb01 f102 	mul.w	r1, r1, r2
   1aff0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1aff4:	2300      	movs	r3, #0
   1aff6:	01c8      	lsls	r0, r1, #7
   1aff8:	0e49      	lsrs	r1, r1, #25
   1affa:	f016 f80b 	bl	31014 <__aeabi_uldivmod>
   1affe:	4b08      	ldr	r3, [pc, #32]	; (1b020 <ble_ll_resolv_set_rpa_tmo+0x4c>)
   1b000:	6058      	str	r0, [r3, #4]

    /* restart timer if there is something on RL */
    if (g_ble_ll_resolv_data.rl_cnt) {
   1b002:	78db      	ldrb	r3, [r3, #3]
   1b004:	b90b      	cbnz	r3, 1b00a <ble_ll_resolv_set_rpa_tmo+0x36>
        ble_npl_callout_reset(&g_ble_ll_resolv_data.rpa_timer,
                              g_ble_ll_resolv_data.rpa_tmo);
    }

    return BLE_ERR_SUCCESS;
   1b006:	2000      	movs	r0, #0
}
   1b008:	bd08      	pop	{r3, pc}
    return (ble_npl_error_t)os_callout_reset(&co->co, ticks);
   1b00a:	4601      	mov	r1, r0
   1b00c:	4805      	ldr	r0, [pc, #20]	; (1b024 <ble_ll_resolv_set_rpa_tmo+0x50>)
   1b00e:	f7f1 ff73 	bl	cef8 <os_callout_reset>
    return BLE_ERR_SUCCESS;
   1b012:	2000      	movs	r0, #0
   1b014:	e7f8      	b.n	1b008 <ble_ll_resolv_set_rpa_tmo+0x34>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1b016:	2012      	movs	r0, #18
}
   1b018:	4770      	bx	lr
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1b01a:	2012      	movs	r0, #18
   1b01c:	e7f4      	b.n	1b008 <ble_ll_resolv_set_rpa_tmo+0x34>
   1b01e:	bf00      	nop
   1b020:	20003bb8 	.word	0x20003bb8
   1b024:	20003bc0 	.word	0x20003bc0

0001b028 <ble_ll_resolve_set_priv_mode>:

int
ble_ll_resolve_set_priv_mode(const uint8_t *cmdbuf, uint8_t len)
{
   1b028:	b570      	push	{r4, r5, r6, lr}
   1b02a:	4605      	mov	r5, r0
   1b02c:	460e      	mov	r6, r1
    const struct ble_hci_le_set_privacy_mode_cp *cmd = (const void *) cmdbuf;
    struct ble_ll_resolv_entry *rl;

    if (ble_ll_is_controller_busy()) {
   1b02e:	f7ff fdb1 	bl	1ab94 <ble_ll_is_controller_busy>
   1b032:	b978      	cbnz	r0, 1b054 <ble_ll_resolve_set_priv_mode+0x2c>
   1b034:	4604      	mov	r4, r0
        return BLE_ERR_CMD_DISALLOWED;
    }

    if (len != sizeof(*cmd)) {
   1b036:	2e08      	cmp	r6, #8
   1b038:	d002      	beq.n	1b040 <ble_ll_resolve_set_priv_mode+0x18>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1b03a:	2412      	movs	r4, #18
    }

    rl->rl_priv_mode = cmd->mode;

    return BLE_ERR_SUCCESS;
}
   1b03c:	4620      	mov	r0, r4
   1b03e:	bd70      	pop	{r4, r5, r6, pc}
    rl = ble_ll_resolv_list_find(cmd->peer_id_addr, cmd->peer_id_addr_type);
   1b040:	7829      	ldrb	r1, [r5, #0]
   1b042:	1c68      	adds	r0, r5, #1
   1b044:	f7ff fe78 	bl	1ad38 <ble_ll_resolv_list_find>
    if (!rl) {
   1b048:	b130      	cbz	r0, 1b058 <ble_ll_resolve_set_priv_mode+0x30>
    if (cmd->mode > BLE_HCI_PRIVACY_DEVICE) {
   1b04a:	79eb      	ldrb	r3, [r5, #7]
   1b04c:	2b01      	cmp	r3, #1
   1b04e:	d805      	bhi.n	1b05c <ble_ll_resolve_set_priv_mode+0x34>
    rl->rl_priv_mode = cmd->mode;
   1b050:	7043      	strb	r3, [r0, #1]
    return BLE_ERR_SUCCESS;
   1b052:	e7f3      	b.n	1b03c <ble_ll_resolve_set_priv_mode+0x14>
        return BLE_ERR_CMD_DISALLOWED;
   1b054:	240c      	movs	r4, #12
   1b056:	e7f1      	b.n	1b03c <ble_ll_resolve_set_priv_mode+0x14>
        return BLE_ERR_UNK_CONN_ID;
   1b058:	2402      	movs	r4, #2
   1b05a:	e7ef      	b.n	1b03c <ble_ll_resolve_set_priv_mode+0x14>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1b05c:	2412      	movs	r4, #18
   1b05e:	e7ed      	b.n	1b03c <ble_ll_resolve_set_priv_mode+0x14>

0001b060 <ble_ll_resolv_get_rpa_tmo>:
 */
uint32_t
ble_ll_resolv_get_rpa_tmo(void)
{
    return g_ble_ll_resolv_data.rpa_tmo;
}
   1b060:	4b01      	ldr	r3, [pc, #4]	; (1b068 <ble_ll_resolv_get_rpa_tmo+0x8>)
   1b062:	6858      	ldr	r0, [r3, #4]
   1b064:	4770      	bx	lr
   1b066:	bf00      	nop
   1b068:	20003bb8 	.word	0x20003bb8

0001b06c <ble_ll_resolv_get_priv_addr>:

void
ble_ll_resolv_get_priv_addr(struct ble_ll_resolv_entry *rl, int local,
                            uint8_t *addr)
{
   1b06c:	b570      	push	{r4, r5, r6, lr}
    os_sr_t sr;

    BLE_LL_ASSERT(rl != NULL);
   1b06e:	b180      	cbz	r0, 1b092 <ble_ll_resolv_get_priv_addr+0x26>
   1b070:	460e      	mov	r6, r1
   1b072:	4615      	mov	r5, r2
   1b074:	4604      	mov	r4, r0
    BLE_LL_ASSERT(addr != NULL);
   1b076:	b1b2      	cbz	r2, 1b0a6 <ble_ll_resolv_get_priv_addr+0x3a>

    OS_ENTER_CRITICAL(sr);
   1b078:	f7f3 fa5c 	bl	e534 <os_arch_save_sr>
    if (local) {
   1b07c:	b33e      	cbz	r6, 1b0ce <ble_ll_resolv_get_priv_addr+0x62>
        BLE_LL_ASSERT(rl->rl_has_local);
   1b07e:	78a3      	ldrb	r3, [r4, #2]
   1b080:	b1db      	cbz	r3, 1b0ba <ble_ll_resolv_get_priv_addr+0x4e>
        memcpy(addr, rl->rl_local_rpa, BLE_DEV_ADDR_LEN);
   1b082:	f854 3f2a 	ldr.w	r3, [r4, #42]!
   1b086:	602b      	str	r3, [r5, #0]
   1b088:	88a3      	ldrh	r3, [r4, #4]
   1b08a:	80ab      	strh	r3, [r5, #4]
    } else {
        BLE_LL_ASSERT(rl->rl_has_peer);
        memcpy(addr, rl->rl_peer_rpa, BLE_DEV_ADDR_LEN);
    }

    OS_EXIT_CRITICAL(sr);
   1b08c:	f7f3 fa58 	bl	e540 <os_arch_restore_sr>
}
   1b090:	bd70      	pop	{r4, r5, r6, pc}
    BLE_LL_ASSERT(rl != NULL);
   1b092:	f7f1 f8a9 	bl	c1e8 <hal_debugger_connected>
   1b096:	b100      	cbz	r0, 1b09a <ble_ll_resolv_get_priv_addr+0x2e>
   1b098:	be01      	bkpt	0x0001
   1b09a:	2300      	movs	r3, #0
   1b09c:	461a      	mov	r2, r3
   1b09e:	4619      	mov	r1, r3
   1b0a0:	4618      	mov	r0, r3
   1b0a2:	f7f1 fd55 	bl	cb50 <__assert_func>
    BLE_LL_ASSERT(addr != NULL);
   1b0a6:	f7f1 f89f 	bl	c1e8 <hal_debugger_connected>
   1b0aa:	b100      	cbz	r0, 1b0ae <ble_ll_resolv_get_priv_addr+0x42>
   1b0ac:	be01      	bkpt	0x0001
   1b0ae:	2300      	movs	r3, #0
   1b0b0:	461a      	mov	r2, r3
   1b0b2:	4619      	mov	r1, r3
   1b0b4:	4618      	mov	r0, r3
   1b0b6:	f7f1 fd4b 	bl	cb50 <__assert_func>
        BLE_LL_ASSERT(rl->rl_has_local);
   1b0ba:	f7f1 f895 	bl	c1e8 <hal_debugger_connected>
   1b0be:	b100      	cbz	r0, 1b0c2 <ble_ll_resolv_get_priv_addr+0x56>
   1b0c0:	be01      	bkpt	0x0001
   1b0c2:	2300      	movs	r3, #0
   1b0c4:	461a      	mov	r2, r3
   1b0c6:	4619      	mov	r1, r3
   1b0c8:	4618      	mov	r0, r3
   1b0ca:	f7f1 fd41 	bl	cb50 <__assert_func>
        BLE_LL_ASSERT(rl->rl_has_peer);
   1b0ce:	78e3      	ldrb	r3, [r4, #3]
   1b0d0:	b12b      	cbz	r3, 1b0de <ble_ll_resolv_get_priv_addr+0x72>
        memcpy(addr, rl->rl_peer_rpa, BLE_DEV_ADDR_LEN);
   1b0d2:	f854 3f30 	ldr.w	r3, [r4, #48]!
   1b0d6:	602b      	str	r3, [r5, #0]
   1b0d8:	88a3      	ldrh	r3, [r4, #4]
   1b0da:	80ab      	strh	r3, [r5, #4]
   1b0dc:	e7d6      	b.n	1b08c <ble_ll_resolv_get_priv_addr+0x20>
        BLE_LL_ASSERT(rl->rl_has_peer);
   1b0de:	f7f1 f883 	bl	c1e8 <hal_debugger_connected>
   1b0e2:	b100      	cbz	r0, 1b0e6 <ble_ll_resolv_get_priv_addr+0x7a>
   1b0e4:	be01      	bkpt	0x0001
   1b0e6:	2300      	movs	r3, #0
   1b0e8:	461a      	mov	r2, r3
   1b0ea:	4619      	mov	r1, r3
   1b0ec:	4618      	mov	r0, r3
   1b0ee:	f7f1 fd2f 	bl	cb50 <__assert_func>
	...

0001b0f4 <ble_ll_resolv_set_peer_rpa>:

void
ble_ll_resolv_set_peer_rpa(int index, uint8_t *rpa)
{
   1b0f4:	b538      	push	{r3, r4, r5, lr}
   1b0f6:	4605      	mov	r5, r0
   1b0f8:	460c      	mov	r4, r1
    os_sr_t sr;
    struct ble_ll_resolv_entry *rl;

    OS_ENTER_CRITICAL(sr);
   1b0fa:	f7f3 fa1b 	bl	e534 <os_arch_save_sr>
    rl = &g_ble_ll_resolv_list[index];
    memcpy(rl->rl_peer_rpa, rpa, BLE_DEV_ADDR_LEN);
   1b0fe:	2336      	movs	r3, #54	; 0x36
   1b100:	fb03 f305 	mul.w	r3, r3, r5
   1b104:	3330      	adds	r3, #48	; 0x30
   1b106:	4a04      	ldr	r2, [pc, #16]	; (1b118 <ble_ll_resolv_set_peer_rpa+0x24>)
   1b108:	1899      	adds	r1, r3, r2
   1b10a:	6825      	ldr	r5, [r4, #0]
   1b10c:	509d      	str	r5, [r3, r2]
   1b10e:	88a3      	ldrh	r3, [r4, #4]
   1b110:	808b      	strh	r3, [r1, #4]
    OS_EXIT_CRITICAL(sr);
   1b112:	f7f3 fa15 	bl	e540 <os_arch_restore_sr>
}
   1b116:	bd38      	pop	{r3, r4, r5, pc}
   1b118:	20003ae0 	.word	0x20003ae0

0001b11c <ble_ll_resolv_set_local_rpa>:

void
ble_ll_resolv_set_local_rpa(int index, uint8_t *rpa)
{
   1b11c:	b538      	push	{r3, r4, r5, lr}
   1b11e:	4605      	mov	r5, r0
   1b120:	460c      	mov	r4, r1
    os_sr_t sr;
    struct ble_ll_resolv_entry *rl;

    OS_ENTER_CRITICAL(sr);
   1b122:	f7f3 fa07 	bl	e534 <os_arch_save_sr>
    rl = &g_ble_ll_resolv_list[index];
    memcpy(rl->rl_local_rpa, rpa, BLE_DEV_ADDR_LEN);
   1b126:	2336      	movs	r3, #54	; 0x36
   1b128:	fb03 f305 	mul.w	r3, r3, r5
   1b12c:	3328      	adds	r3, #40	; 0x28
   1b12e:	4a05      	ldr	r2, [pc, #20]	; (1b144 <ble_ll_resolv_set_local_rpa+0x28>)
   1b130:	4413      	add	r3, r2
   1b132:	6822      	ldr	r2, [r4, #0]
   1b134:	f8c3 2002 	str.w	r2, [r3, #2]
   1b138:	88a2      	ldrh	r2, [r4, #4]
   1b13a:	80da      	strh	r2, [r3, #6]
    OS_EXIT_CRITICAL(sr);
   1b13c:	f7f3 fa00 	bl	e540 <os_arch_restore_sr>
}
   1b140:	bd38      	pop	{r3, r4, r5, pc}
   1b142:	bf00      	nop
   1b144:	20003ae0 	.word	0x20003ae0

0001b148 <ble_ll_resolv_gen_rpa>:
 *
 * @return int
 */
int
ble_ll_resolv_gen_rpa(uint8_t *addr, uint8_t addr_type, uint8_t *rpa, int local)
{
   1b148:	b538      	push	{r3, r4, r5, lr}
   1b14a:	4615      	mov	r5, r2
   1b14c:	461c      	mov	r4, r3
    struct ble_ll_resolv_entry *rl;

    rl = ble_ll_resolv_list_find(addr, addr_type);
   1b14e:	f7ff fdf3 	bl	1ad38 <ble_ll_resolv_list_find>
    if (rl) {
   1b152:	b168      	cbz	r0, 1b170 <ble_ll_resolv_gen_rpa+0x28>
   1b154:	4603      	mov	r3, r0
        if ((local && rl->rl_has_local) || (!local && rl->rl_has_peer)) {
   1b156:	b10c      	cbz	r4, 1b15c <ble_ll_resolv_gen_rpa+0x14>
   1b158:	7882      	ldrb	r2, [r0, #2]
   1b15a:	b912      	cbnz	r2, 1b162 <ble_ll_resolv_gen_rpa+0x1a>
   1b15c:	b954      	cbnz	r4, 1b174 <ble_ll_resolv_gen_rpa+0x2c>
   1b15e:	78da      	ldrb	r2, [r3, #3]
   1b160:	b152      	cbz	r2, 1b178 <ble_ll_resolv_gen_rpa+0x30>
            ble_ll_resolv_get_priv_addr(rl, local, rpa);
   1b162:	462a      	mov	r2, r5
   1b164:	4621      	mov	r1, r4
   1b166:	4618      	mov	r0, r3
   1b168:	f7ff ff80 	bl	1b06c <ble_ll_resolv_get_priv_addr>
            return 1;
   1b16c:	2001      	movs	r0, #1
        }
    }

    return 0;
}
   1b16e:	bd38      	pop	{r3, r4, r5, pc}
    return 0;
   1b170:	2000      	movs	r0, #0
   1b172:	e7fc      	b.n	1b16e <ble_ll_resolv_gen_rpa+0x26>
   1b174:	2000      	movs	r0, #0
   1b176:	e7fa      	b.n	1b16e <ble_ll_resolv_gen_rpa+0x26>
   1b178:	4620      	mov	r0, r4
   1b17a:	e7f8      	b.n	1b16e <ble_ll_resolv_gen_rpa+0x26>

0001b17c <ble_ll_resolv_rpa>:
 *
 * @return int
 */
int
ble_ll_resolv_rpa(const uint8_t *rpa, const uint8_t *irk)
{
   1b17c:	b510      	push	{r4, lr}
   1b17e:	b08c      	sub	sp, #48	; 0x30
   1b180:	4604      	mov	r4, r0
    struct ble_encryption_block ecb;

    irk32 = (const uint32_t *)irk;
    key32 = (uint32_t *)&ecb.key[0];

    key32[0] = irk32[0];
   1b182:	680b      	ldr	r3, [r1, #0]
   1b184:	9300      	str	r3, [sp, #0]
    key32[1] = irk32[1];
   1b186:	684b      	ldr	r3, [r1, #4]
   1b188:	9301      	str	r3, [sp, #4]
    key32[2] = irk32[2];
   1b18a:	688b      	ldr	r3, [r1, #8]
   1b18c:	9302      	str	r3, [sp, #8]
    key32[3] = irk32[3];
   1b18e:	68cb      	ldr	r3, [r1, #12]
   1b190:	9303      	str	r3, [sp, #12]

    pt32 = (uint32_t *)&ecb.plain_text[0];
    pt32[0] = 0;
   1b192:	2300      	movs	r3, #0
   1b194:	9304      	str	r3, [sp, #16]
    pt32[1] = 0;
   1b196:	9305      	str	r3, [sp, #20]
    pt32[2] = 0;
   1b198:	9306      	str	r3, [sp, #24]
    pt32[3] = 0;
   1b19a:	9307      	str	r3, [sp, #28]

    ecb.plain_text[15] = rpa[3];
   1b19c:	78c3      	ldrb	r3, [r0, #3]
   1b19e:	f88d 301f 	strb.w	r3, [sp, #31]
    ecb.plain_text[14] = rpa[4];
   1b1a2:	7903      	ldrb	r3, [r0, #4]
   1b1a4:	f88d 301e 	strb.w	r3, [sp, #30]
    ecb.plain_text[13] = rpa[5];
   1b1a8:	7943      	ldrb	r3, [r0, #5]
   1b1aa:	f88d 301d 	strb.w	r3, [sp, #29]

    ble_hw_encrypt_block(&ecb);
   1b1ae:	4668      	mov	r0, sp
   1b1b0:	f002 f9d0 	bl	1d554 <ble_hw_encrypt_block>
    if ((ecb.cipher_text[15] == rpa[0]) && (ecb.cipher_text[14] == rpa[1]) &&
   1b1b4:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
   1b1b8:	7823      	ldrb	r3, [r4, #0]
   1b1ba:	429a      	cmp	r2, r3
   1b1bc:	d002      	beq.n	1b1c4 <ble_ll_resolv_rpa+0x48>
        (ecb.cipher_text[13] == rpa[2])) {
        rc = 1;
    } else {
        rc = 0;
   1b1be:	2000      	movs	r0, #0
    }

    return rc;
}
   1b1c0:	b00c      	add	sp, #48	; 0x30
   1b1c2:	bd10      	pop	{r4, pc}
    if ((ecb.cipher_text[15] == rpa[0]) && (ecb.cipher_text[14] == rpa[1]) &&
   1b1c4:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
   1b1c8:	7863      	ldrb	r3, [r4, #1]
   1b1ca:	429a      	cmp	r2, r3
   1b1cc:	d001      	beq.n	1b1d2 <ble_ll_resolv_rpa+0x56>
        rc = 0;
   1b1ce:	2000      	movs	r0, #0
   1b1d0:	e7f6      	b.n	1b1c0 <ble_ll_resolv_rpa+0x44>
        (ecb.cipher_text[13] == rpa[2])) {
   1b1d2:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
   1b1d6:	78a3      	ldrb	r3, [r4, #2]
    if ((ecb.cipher_text[15] == rpa[0]) && (ecb.cipher_text[14] == rpa[1]) &&
   1b1d8:	429a      	cmp	r2, r3
   1b1da:	d001      	beq.n	1b1e0 <ble_ll_resolv_rpa+0x64>
        rc = 0;
   1b1dc:	2000      	movs	r0, #0
   1b1de:	e7ef      	b.n	1b1c0 <ble_ll_resolv_rpa+0x44>
        rc = 1;
   1b1e0:	2001      	movs	r0, #1
    return rc;
   1b1e2:	e7ed      	b.n	1b1c0 <ble_ll_resolv_rpa+0x44>

0001b1e4 <ble_ll_resolv_enabled>:
 */
uint8_t
ble_ll_resolv_enabled(void)
{
    return g_ble_ll_resolv_data.addr_res_enabled;
}
   1b1e4:	4b01      	ldr	r3, [pc, #4]	; (1b1ec <ble_ll_resolv_enabled+0x8>)
   1b1e6:	7818      	ldrb	r0, [r3, #0]
   1b1e8:	4770      	bx	lr
   1b1ea:	bf00      	nop
   1b1ec:	20003bb8 	.word	0x20003bb8

0001b1f0 <ble_ll_resolv_init>:
    ble_ll_resolv_init();
}

void
ble_ll_resolv_init(void)
{
   1b1f0:	b510      	push	{r4, lr}
    uint8_t hw_size;

    /* Default is 15 minutes */
    g_ble_ll_resolv_data.rpa_tmo = ble_npl_time_ms_to_ticks32(15 * 60 * 1000);
   1b1f2:	4b09      	ldr	r3, [pc, #36]	; (1b218 <ble_ll_resolv_init+0x28>)
   1b1f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
   1b1f8:	605a      	str	r2, [r3, #4]

    hw_size = ble_hw_resolv_list_size();
   1b1fa:	f002 fa55 	bl	1d6a8 <ble_hw_resolv_list_size>
    if (hw_size > MYNEWT_VAL(BLE_LL_RESOLV_LIST_SIZE)) {
   1b1fe:	2804      	cmp	r0, #4
   1b200:	d900      	bls.n	1b204 <ble_ll_resolv_init+0x14>
        hw_size = MYNEWT_VAL(BLE_LL_RESOLV_LIST_SIZE);
   1b202:	2004      	movs	r0, #4
    }
    g_ble_ll_resolv_data.rl_size = hw_size;
   1b204:	4c04      	ldr	r4, [pc, #16]	; (1b218 <ble_ll_resolv_init+0x28>)
   1b206:	7060      	strb	r0, [r4, #1]
    os_callout_init(&co->co, &evq->evq, (os_event_fn *)ev_cb, ev_arg);
   1b208:	2300      	movs	r3, #0
   1b20a:	4a04      	ldr	r2, [pc, #16]	; (1b21c <ble_ll_resolv_init+0x2c>)
   1b20c:	4904      	ldr	r1, [pc, #16]	; (1b220 <ble_ll_resolv_init+0x30>)
   1b20e:	f104 0008 	add.w	r0, r4, #8
   1b212:	f7f1 fe45 	bl	cea0 <os_callout_init>

    ble_npl_callout_init(&g_ble_ll_resolv_data.rpa_timer,
                         &g_ble_ll_data.ll_evq,
                         ble_ll_resolv_rpa_timer_cb,
                         NULL);
}
   1b216:	bd10      	pop	{r4, pc}
   1b218:	20003bb8 	.word	0x20003bb8
   1b21c:	0001ac99 	.word	0x0001ac99
   1b220:	20003740 	.word	0x20003740

0001b224 <ble_ll_resolv_list_reset>:
{
   1b224:	b508      	push	{r3, lr}
    g_ble_ll_resolv_data.addr_res_enabled = 0;
   1b226:	4805      	ldr	r0, [pc, #20]	; (1b23c <ble_ll_resolv_list_reset+0x18>)
   1b228:	2300      	movs	r3, #0
   1b22a:	f800 3b08 	strb.w	r3, [r0], #8
    os_callout_stop(&co->co);
   1b22e:	f7f1 fe45 	bl	cebc <os_callout_stop>
    ble_ll_resolv_list_clr();
   1b232:	f7ff fd63 	bl	1acfc <ble_ll_resolv_list_clr>
    ble_ll_resolv_init();
   1b236:	f7ff ffdb 	bl	1b1f0 <ble_ll_resolv_init>
}
   1b23a:	bd08      	pop	{r3, pc}
   1b23c:	20003bb8 	.word	0x20003bb8

0001b240 <ble_ll_rfmgmt_disable>:
    }
}

static void
ble_ll_rfmgmt_disable(void)
{
   1b240:	b508      	push	{r3, lr}
    OS_ASSERT_CRITICAL();
   1b242:	f7f3 f980 	bl	e546 <os_arch_in_critical>
   1b246:	b118      	cbz	r0, 1b250 <ble_ll_rfmgmt_disable+0x10>

    if (g_ble_ll_rfmgmt_data.state != RFMGMT_STATE_OFF) {
   1b248:	4b09      	ldr	r3, [pc, #36]	; (1b270 <ble_ll_rfmgmt_disable+0x30>)
   1b24a:	781b      	ldrb	r3, [r3, #0]
   1b24c:	b953      	cbnz	r3, 1b264 <ble_ll_rfmgmt_disable+0x24>
        ble_phy_rfclk_disable();
        g_ble_ll_rfmgmt_data.state = RFMGMT_STATE_OFF;
    }
}
   1b24e:	bd08      	pop	{r3, pc}
    OS_ASSERT_CRITICAL();
   1b250:	f7f0 ffca 	bl	c1e8 <hal_debugger_connected>
   1b254:	b100      	cbz	r0, 1b258 <ble_ll_rfmgmt_disable+0x18>
   1b256:	be01      	bkpt	0x0001
   1b258:	2300      	movs	r3, #0
   1b25a:	461a      	mov	r2, r3
   1b25c:	4619      	mov	r1, r3
   1b25e:	4618      	mov	r0, r3
   1b260:	f7f1 fc76 	bl	cb50 <__assert_func>
        ble_phy_rfclk_disable();
   1b264:	f003 f8e6 	bl	1e434 <ble_phy_rfclk_disable>
        g_ble_ll_rfmgmt_data.state = RFMGMT_STATE_OFF;
   1b268:	4b01      	ldr	r3, [pc, #4]	; (1b270 <ble_ll_rfmgmt_disable+0x30>)
   1b26a:	2200      	movs	r2, #0
   1b26c:	701a      	strb	r2, [r3, #0]
}
   1b26e:	e7ee      	b.n	1b24e <ble_ll_rfmgmt_disable+0xe>
   1b270:	20001eb4 	.word	0x20001eb4

0001b274 <ble_ll_rfmgmt_release_ev>:
    ble_ll_rfmgmt_enable();
}

static void
ble_ll_rfmgmt_release_ev(struct ble_npl_event *ev)
{
   1b274:	b538      	push	{r3, r4, r5, lr}
    uint32_t now;
    bool can_disable;
    uint8_t lls;
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
   1b276:	f7f3 f95d 	bl	e534 <os_arch_save_sr>
   1b27a:	4605      	mov	r5, r0

    now = os_cputime_get32();
   1b27c:	f013 fe17 	bl	2eeae <os_cputime_get32>
   1b280:	4604      	mov	r4, r0

    can_disable = true;
    lls = ble_ll_state_get();
   1b282:	f7f9 fc47 	bl	14b14 <ble_ll_state_get>

    if (rfmgmt->enable_scan && CPUTIME_GEQ(now, rfmgmt->enable_scan_at)) {
   1b286:	4b0d      	ldr	r3, [pc, #52]	; (1b2bc <ble_ll_rfmgmt_release_ev+0x48>)
   1b288:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   1b28c:	b123      	cbz	r3, 1b298 <ble_ll_rfmgmt_release_ev+0x24>
   1b28e:	4b0b      	ldr	r3, [pc, #44]	; (1b2bc <ble_ll_rfmgmt_release_ev+0x48>)
   1b290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1b292:	1ae3      	subs	r3, r4, r3
   1b294:	2b00      	cmp	r3, #0
   1b296:	da09      	bge.n	1b2ac <ble_ll_rfmgmt_release_ev+0x38>
        /* Blocked by scan */
        can_disable = false;
    } else if (rfmgmt->enable_sched && CPUTIME_GEQ(now, rfmgmt->enable_sched_at)) {
   1b298:	4b08      	ldr	r3, [pc, #32]	; (1b2bc <ble_ll_rfmgmt_release_ev+0x48>)
   1b29a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   1b29e:	b123      	cbz	r3, 1b2aa <ble_ll_rfmgmt_release_ev+0x36>
   1b2a0:	4b06      	ldr	r3, [pc, #24]	; (1b2bc <ble_ll_rfmgmt_release_ev+0x48>)
   1b2a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1b2a4:	1ae4      	subs	r4, r4, r3
   1b2a6:	2c00      	cmp	r4, #0
   1b2a8:	da00      	bge.n	1b2ac <ble_ll_rfmgmt_release_ev+0x38>
        /* Blocked by scheduler item */
        can_disable = false;
    } else if (lls != BLE_LL_STATE_STANDBY) {
   1b2aa:	b118      	cbz	r0, 1b2b4 <ble_ll_rfmgmt_release_ev+0x40>

    if (can_disable) {
        ble_ll_rfmgmt_disable();
    }

    OS_EXIT_CRITICAL(sr);
   1b2ac:	4628      	mov	r0, r5
   1b2ae:	f7f3 f947 	bl	e540 <os_arch_restore_sr>
}
   1b2b2:	bd38      	pop	{r3, r4, r5, pc}
        ble_ll_rfmgmt_disable();
   1b2b4:	f7ff ffc4 	bl	1b240 <ble_ll_rfmgmt_disable>
   1b2b8:	e7f8      	b.n	1b2ac <ble_ll_rfmgmt_release_ev+0x38>
   1b2ba:	bf00      	nop
   1b2bc:	20001eb4 	.word	0x20001eb4

0001b2c0 <ble_ll_rfmgmt_enable>:
{
   1b2c0:	b510      	push	{r4, lr}
    OS_ASSERT_CRITICAL();
   1b2c2:	f7f3 f940 	bl	e546 <os_arch_in_critical>
   1b2c6:	b118      	cbz	r0, 1b2d0 <ble_ll_rfmgmt_enable+0x10>
    if (g_ble_ll_rfmgmt_data.state == RFMGMT_STATE_OFF) {
   1b2c8:	4b0b      	ldr	r3, [pc, #44]	; (1b2f8 <ble_ll_rfmgmt_enable+0x38>)
   1b2ca:	781b      	ldrb	r3, [r3, #0]
   1b2cc:	b153      	cbz	r3, 1b2e4 <ble_ll_rfmgmt_enable+0x24>
}
   1b2ce:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
   1b2d0:	f7f0 ff8a 	bl	c1e8 <hal_debugger_connected>
   1b2d4:	b100      	cbz	r0, 1b2d8 <ble_ll_rfmgmt_enable+0x18>
   1b2d6:	be01      	bkpt	0x0001
   1b2d8:	2300      	movs	r3, #0
   1b2da:	461a      	mov	r2, r3
   1b2dc:	4619      	mov	r1, r3
   1b2de:	4618      	mov	r0, r3
   1b2e0:	f7f1 fc36 	bl	cb50 <__assert_func>
        g_ble_ll_rfmgmt_data.state = RFMGMT_STATE_ENABLING;
   1b2e4:	4c04      	ldr	r4, [pc, #16]	; (1b2f8 <ble_ll_rfmgmt_enable+0x38>)
   1b2e6:	2301      	movs	r3, #1
   1b2e8:	7023      	strb	r3, [r4, #0]
        g_ble_ll_rfmgmt_data.enabled_at = os_cputime_get32();
   1b2ea:	f013 fde0 	bl	2eeae <os_cputime_get32>
   1b2ee:	6320      	str	r0, [r4, #48]	; 0x30
        ble_phy_rfclk_enable();
   1b2f0:	f003 f89c 	bl	1e42c <ble_phy_rfclk_enable>
}
   1b2f4:	e7eb      	b.n	1b2ce <ble_ll_rfmgmt_enable+0xe>
   1b2f6:	bf00      	nop
   1b2f8:	20001eb4 	.word	0x20001eb4

0001b2fc <ble_ll_rfmgmt_timer_exp>:
{
   1b2fc:	b508      	push	{r3, lr}
    g_ble_ll_rfmgmt_data.timer_scheduled = false;
   1b2fe:	4b03      	ldr	r3, [pc, #12]	; (1b30c <ble_ll_rfmgmt_timer_exp+0x10>)
   1b300:	2200      	movs	r2, #0
   1b302:	771a      	strb	r2, [r3, #28]
    ble_ll_rfmgmt_enable();
   1b304:	f7ff ffdc 	bl	1b2c0 <ble_ll_rfmgmt_enable>
}
   1b308:	bd08      	pop	{r3, pc}
   1b30a:	bf00      	nop
   1b30c:	20001eb4 	.word	0x20001eb4

0001b310 <ble_ll_rfmgmt_timer_reschedule>:
{
   1b310:	b510      	push	{r4, lr}
    if (rfmgmt->enable_scan && rfmgmt->enable_sched) {
   1b312:	4b1f      	ldr	r3, [pc, #124]	; (1b390 <ble_ll_rfmgmt_timer_reschedule+0x80>)
   1b314:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   1b318:	b15b      	cbz	r3, 1b332 <ble_ll_rfmgmt_timer_reschedule+0x22>
   1b31a:	4a1d      	ldr	r2, [pc, #116]	; (1b390 <ble_ll_rfmgmt_timer_reschedule+0x80>)
   1b31c:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
   1b320:	b13a      	cbz	r2, 1b332 <ble_ll_rfmgmt_timer_reschedule+0x22>
        if (CPUTIME_LT(rfmgmt->enable_scan_at, rfmgmt->enable_sched_at)) {
   1b322:	4b1b      	ldr	r3, [pc, #108]	; (1b390 <ble_ll_rfmgmt_timer_reschedule+0x80>)
   1b324:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1b326:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   1b328:	1b13      	subs	r3, r2, r4
   1b32a:	2b00      	cmp	r3, #0
   1b32c:	da04      	bge.n	1b338 <ble_ll_rfmgmt_timer_reschedule+0x28>
            enable_at = rfmgmt->enable_scan_at;
   1b32e:	4614      	mov	r4, r2
   1b330:	e002      	b.n	1b338 <ble_ll_rfmgmt_timer_reschedule+0x28>
    } else if (rfmgmt->enable_scan) {
   1b332:	b1e3      	cbz	r3, 1b36e <ble_ll_rfmgmt_timer_reschedule+0x5e>
        enable_at = rfmgmt->enable_scan_at;
   1b334:	4b16      	ldr	r3, [pc, #88]	; (1b390 <ble_ll_rfmgmt_timer_reschedule+0x80>)
   1b336:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    if (rfmgmt->timer_scheduled) {
   1b338:	4b15      	ldr	r3, [pc, #84]	; (1b390 <ble_ll_rfmgmt_timer_reschedule+0x80>)
   1b33a:	7f1b      	ldrb	r3, [r3, #28]
   1b33c:	b14b      	cbz	r3, 1b352 <ble_ll_rfmgmt_timer_reschedule+0x42>
        if (rfmgmt->timer_scheduled_at == enable_at) {
   1b33e:	4b14      	ldr	r3, [pc, #80]	; (1b390 <ble_ll_rfmgmt_timer_reschedule+0x80>)
   1b340:	6a1b      	ldr	r3, [r3, #32]
   1b342:	42a3      	cmp	r3, r4
   1b344:	d012      	beq.n	1b36c <ble_ll_rfmgmt_timer_reschedule+0x5c>
        rfmgmt->timer_scheduled = false;
   1b346:	4812      	ldr	r0, [pc, #72]	; (1b390 <ble_ll_rfmgmt_timer_reschedule+0x80>)
   1b348:	2300      	movs	r3, #0
   1b34a:	7703      	strb	r3, [r0, #28]
        os_cputime_timer_stop(&rfmgmt->timer);
   1b34c:	3004      	adds	r0, #4
   1b34e:	f013 fdaa 	bl	2eea6 <os_cputime_timer_stop>
    if (CPUTIME_LEQ(enable_at, os_cputime_get32())) {
   1b352:	f013 fdac 	bl	2eeae <os_cputime_get32>
   1b356:	1a20      	subs	r0, r4, r0
   1b358:	2800      	cmp	r0, #0
   1b35a:	dd16      	ble.n	1b38a <ble_ll_rfmgmt_timer_reschedule+0x7a>
    rfmgmt->timer_scheduled = true;
   1b35c:	480c      	ldr	r0, [pc, #48]	; (1b390 <ble_ll_rfmgmt_timer_reschedule+0x80>)
   1b35e:	2301      	movs	r3, #1
   1b360:	7703      	strb	r3, [r0, #28]
    rfmgmt->timer_scheduled_at = enable_at;
   1b362:	6204      	str	r4, [r0, #32]
    os_cputime_timer_start(&rfmgmt->timer, enable_at);
   1b364:	4621      	mov	r1, r4
   1b366:	3004      	adds	r0, #4
   1b368:	f013 fd99 	bl	2ee9e <os_cputime_timer_start>
}
   1b36c:	bd10      	pop	{r4, pc}
    } else if (rfmgmt->enable_sched) {
   1b36e:	4b08      	ldr	r3, [pc, #32]	; (1b390 <ble_ll_rfmgmt_timer_reschedule+0x80>)
   1b370:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   1b374:	b113      	cbz	r3, 1b37c <ble_ll_rfmgmt_timer_reschedule+0x6c>
        enable_at = rfmgmt->enable_sched_at;
   1b376:	4b06      	ldr	r3, [pc, #24]	; (1b390 <ble_ll_rfmgmt_timer_reschedule+0x80>)
   1b378:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   1b37a:	e7dd      	b.n	1b338 <ble_ll_rfmgmt_timer_reschedule+0x28>
        rfmgmt->timer_scheduled = false;
   1b37c:	4804      	ldr	r0, [pc, #16]	; (1b390 <ble_ll_rfmgmt_timer_reschedule+0x80>)
   1b37e:	2300      	movs	r3, #0
   1b380:	7703      	strb	r3, [r0, #28]
        os_cputime_timer_stop(&rfmgmt->timer);
   1b382:	3004      	adds	r0, #4
   1b384:	f013 fd8f 	bl	2eea6 <os_cputime_timer_stop>
        return;
   1b388:	e7f0      	b.n	1b36c <ble_ll_rfmgmt_timer_reschedule+0x5c>
        ble_ll_rfmgmt_enable();
   1b38a:	f7ff ff99 	bl	1b2c0 <ble_ll_rfmgmt_enable>
        return;
   1b38e:	e7ed      	b.n	1b36c <ble_ll_rfmgmt_timer_reschedule+0x5c>
   1b390:	20001eb4 	.word	0x20001eb4

0001b394 <ble_ll_rfmgmt_init>:
    return rem_ticks;
}

void
ble_ll_rfmgmt_init(void)
{
   1b394:	b538      	push	{r3, r4, r5, lr}
    struct ble_ll_rfmgmt_data *rfmgmt = &g_ble_ll_rfmgmt_data;

    rfmgmt->state = RFMGMT_STATE_OFF;
   1b396:	4c0a      	ldr	r4, [pc, #40]	; (1b3c0 <ble_ll_rfmgmt_init+0x2c>)
   1b398:	2500      	movs	r5, #0
   1b39a:	7025      	strb	r5, [r4, #0]
   1b39c:	f240 50fa 	movw	r0, #1530	; 0x5fa
   1b3a0:	f013 fd8a 	bl	2eeb8 <os_cputime_usecs_to_ticks>

    rfmgmt->ticks_to_enabled =
   1b3a4:	8060      	strh	r0, [r4, #2]
            ble_ll_usecs_to_ticks_round_up(MYNEWT_VAL(BLE_LL_RFMGMT_ENABLE_TIME));

    rfmgmt->timer_scheduled = false;
   1b3a6:	7725      	strb	r5, [r4, #28]
    os_cputime_timer_init(&rfmgmt->timer, ble_ll_rfmgmt_timer_exp, NULL);
   1b3a8:	462a      	mov	r2, r5
   1b3aa:	4906      	ldr	r1, [pc, #24]	; (1b3c4 <ble_ll_rfmgmt_init+0x30>)
   1b3ac:	1d20      	adds	r0, r4, #4
   1b3ae:	f013 fd58 	bl	2ee62 <os_cputime_timer_init>
    memset(ev, 0, sizeof(*ev));
   1b3b2:	6365      	str	r5, [r4, #52]	; 0x34
   1b3b4:	63e5      	str	r5, [r4, #60]	; 0x3c
   1b3b6:	6425      	str	r5, [r4, #64]	; 0x40
    ev->ev.ev_cb = (os_event_fn *)fn;
   1b3b8:	4b03      	ldr	r3, [pc, #12]	; (1b3c8 <ble_ll_rfmgmt_init+0x34>)
   1b3ba:	63a3      	str	r3, [r4, #56]	; 0x38

    ble_npl_event_init(&rfmgmt->release_ev, ble_ll_rfmgmt_release_ev, NULL);
}
   1b3bc:	bd38      	pop	{r3, r4, r5, pc}
   1b3be:	bf00      	nop
   1b3c0:	20001eb4 	.word	0x20001eb4
   1b3c4:	0001b2fd 	.word	0x0001b2fd
   1b3c8:	0001b275 	.word	0x0001b275

0001b3cc <ble_ll_rfmgmt_reset>:

void
ble_ll_rfmgmt_reset(void)
{
   1b3cc:	b538      	push	{r3, r4, r5, lr}
    struct ble_ll_rfmgmt_data *rfmgmt = &g_ble_ll_rfmgmt_data;

    rfmgmt->timer_scheduled = false;
   1b3ce:	4c0b      	ldr	r4, [pc, #44]	; (1b3fc <ble_ll_rfmgmt_reset+0x30>)
   1b3d0:	2500      	movs	r5, #0
   1b3d2:	7725      	strb	r5, [r4, #28]
    rfmgmt->timer_scheduled_at = 0;
   1b3d4:	6225      	str	r5, [r4, #32]
    os_cputime_timer_stop(&rfmgmt->timer);
   1b3d6:	1d20      	adds	r0, r4, #4
   1b3d8:	f013 fd65 	bl	2eea6 <os_cputime_timer_stop>
    os_eventq_remove(&evq->evq, &ev->ev);
   1b3dc:	f104 0134 	add.w	r1, r4, #52	; 0x34
   1b3e0:	4807      	ldr	r0, [pc, #28]	; (1b400 <ble_ll_rfmgmt_reset+0x34>)
   1b3e2:	f7f1 ff7b 	bl	d2dc <os_eventq_remove>

    ble_npl_eventq_remove(&g_ble_ll_data.ll_evq, &rfmgmt->release_ev);

    ble_ll_rfmgmt_disable();
   1b3e6:	f7ff ff2b 	bl	1b240 <ble_ll_rfmgmt_disable>

    rfmgmt->enable_scan = false;
   1b3ea:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
    rfmgmt->enable_scan_at = 0;
   1b3ee:	62a5      	str	r5, [r4, #40]	; 0x28
    rfmgmt->enable_sched = false;
   1b3f0:	f884 5025 	strb.w	r5, [r4, #37]	; 0x25
    rfmgmt->enable_sched_at = 0;
   1b3f4:	62e5      	str	r5, [r4, #44]	; 0x2c

    rfmgmt->enabled_at = 0;
   1b3f6:	6325      	str	r5, [r4, #48]	; 0x30
}
   1b3f8:	bd38      	pop	{r3, r4, r5, pc}
   1b3fa:	bf00      	nop
   1b3fc:	20001eb4 	.word	0x20001eb4
   1b400:	20003740 	.word	0x20003740

0001b404 <ble_ll_rfmgmt_scan_changed>:

void
ble_ll_rfmgmt_scan_changed(bool enabled, uint32_t next_window)
{
   1b404:	b570      	push	{r4, r5, r6, lr}
   1b406:	4606      	mov	r6, r0
   1b408:	460c      	mov	r4, r1
    struct ble_ll_rfmgmt_data *rfmgmt = &g_ble_ll_rfmgmt_data;
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
   1b40a:	f7f3 f893 	bl	e534 <os_arch_save_sr>
   1b40e:	4605      	mov	r5, r0

    rfmgmt->enable_scan = enabled;
   1b410:	4b05      	ldr	r3, [pc, #20]	; (1b428 <ble_ll_rfmgmt_scan_changed+0x24>)
   1b412:	f883 6024 	strb.w	r6, [r3, #36]	; 0x24
    rfmgmt->enable_scan_at = next_window - rfmgmt->ticks_to_enabled;
   1b416:	885a      	ldrh	r2, [r3, #2]
   1b418:	1aa4      	subs	r4, r4, r2
   1b41a:	629c      	str	r4, [r3, #40]	; 0x28

    ble_ll_rfmgmt_timer_reschedule();
   1b41c:	f7ff ff78 	bl	1b310 <ble_ll_rfmgmt_timer_reschedule>

    OS_EXIT_CRITICAL(sr);
   1b420:	4628      	mov	r0, r5
   1b422:	f7f3 f88d 	bl	e540 <os_arch_restore_sr>
}
   1b426:	bd70      	pop	{r4, r5, r6, pc}
   1b428:	20001eb4 	.word	0x20001eb4

0001b42c <ble_ll_rfmgmt_sched_changed>:

void
ble_ll_rfmgmt_sched_changed(struct ble_ll_sched_item *first)
{
   1b42c:	b538      	push	{r3, r4, r5, lr}
   1b42e:	4604      	mov	r4, r0
    struct ble_ll_rfmgmt_data *rfmgmt = &g_ble_ll_rfmgmt_data;
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
   1b430:	f7f3 f880 	bl	e534 <os_arch_save_sr>
   1b434:	4605      	mov	r5, r0

    rfmgmt->enable_sched = (first != NULL);
   1b436:	2c00      	cmp	r4, #0
   1b438:	bf14      	ite	ne
   1b43a:	2201      	movne	r2, #1
   1b43c:	2200      	moveq	r2, #0
   1b43e:	4b07      	ldr	r3, [pc, #28]	; (1b45c <ble_ll_rfmgmt_sched_changed+0x30>)
   1b440:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    if (first) {
   1b444:	d004      	beq.n	1b450 <ble_ll_rfmgmt_sched_changed+0x24>
        rfmgmt->enable_sched_at = first->start_time - rfmgmt->ticks_to_enabled;
   1b446:	6863      	ldr	r3, [r4, #4]
   1b448:	4a04      	ldr	r2, [pc, #16]	; (1b45c <ble_ll_rfmgmt_sched_changed+0x30>)
   1b44a:	8851      	ldrh	r1, [r2, #2]
   1b44c:	1a5b      	subs	r3, r3, r1
   1b44e:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    ble_ll_rfmgmt_timer_reschedule();
   1b450:	f7ff ff5e 	bl	1b310 <ble_ll_rfmgmt_timer_reschedule>

    OS_EXIT_CRITICAL(sr);
   1b454:	4628      	mov	r0, r5
   1b456:	f7f3 f873 	bl	e540 <os_arch_restore_sr>
}
   1b45a:	bd38      	pop	{r3, r4, r5, pc}
   1b45c:	20001eb4 	.word	0x20001eb4

0001b460 <ble_ll_rfmgmt_release>:

void
ble_ll_rfmgmt_release(void)
{
   1b460:	b538      	push	{r3, r4, r5, lr}
    struct ble_ll_rfmgmt_data *rfmgmt = &g_ble_ll_rfmgmt_data;
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
   1b462:	f7f3 f867 	bl	e534 <os_arch_save_sr>
   1b466:	4605      	mov	r5, r0
   1b468:	4c08      	ldr	r4, [pc, #32]	; (1b48c <ble_ll_rfmgmt_release+0x2c>)
   1b46a:	f104 0134 	add.w	r1, r4, #52	; 0x34
   1b46e:	4808      	ldr	r0, [pc, #32]	; (1b490 <ble_ll_rfmgmt_release+0x30>)
   1b470:	f7f1 ff34 	bl	d2dc <os_eventq_remove>

    ble_npl_eventq_remove(&g_ble_ll_data.ll_evq, &rfmgmt->release_ev);

    if (g_ble_ll_rfmgmt_data.state != RFMGMT_STATE_OFF) {
   1b474:	7823      	ldrb	r3, [r4, #0]
   1b476:	b91b      	cbnz	r3, 1b480 <ble_ll_rfmgmt_release+0x20>
        ble_npl_eventq_put(&g_ble_ll_data.ll_evq, &rfmgmt->release_ev);
    }

    OS_EXIT_CRITICAL(sr);
   1b478:	4628      	mov	r0, r5
   1b47a:	f7f3 f861 	bl	e540 <os_arch_restore_sr>
}
   1b47e:	bd38      	pop	{r3, r4, r5, pc}
    os_eventq_put(&evq->evq, &ev->ev);
   1b480:	f104 0134 	add.w	r1, r4, #52	; 0x34
   1b484:	4802      	ldr	r0, [pc, #8]	; (1b490 <ble_ll_rfmgmt_release+0x30>)
   1b486:	f7f1 fe92 	bl	d1ae <os_eventq_put>
   1b48a:	e7f5      	b.n	1b478 <ble_ll_rfmgmt_release+0x18>
   1b48c:	20001eb4 	.word	0x20001eb4
   1b490:	20003740 	.word	0x20003740

0001b494 <ble_ll_rfmgmt_enable_now>:

uint32_t
ble_ll_rfmgmt_enable_now(void)
{
   1b494:	b538      	push	{r3, r4, r5, lr}
    struct ble_ll_rfmgmt_data *rfmgmt = &g_ble_ll_rfmgmt_data;
    uint32_t enabled_at;
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
   1b496:	f7f3 f84d 	bl	e534 <os_arch_save_sr>
   1b49a:	4605      	mov	r5, r0

    ble_ll_rfmgmt_enable();
   1b49c:	f7ff ff10 	bl	1b2c0 <ble_ll_rfmgmt_enable>

    if (rfmgmt->state == RFMGMT_STATE_ENABLED) {
   1b4a0:	4b08      	ldr	r3, [pc, #32]	; (1b4c4 <ble_ll_rfmgmt_enable_now+0x30>)
   1b4a2:	781b      	ldrb	r3, [r3, #0]
   1b4a4:	2b02      	cmp	r3, #2
   1b4a6:	d009      	beq.n	1b4bc <ble_ll_rfmgmt_enable_now+0x28>
        enabled_at = os_cputime_get32();
    } else {
        enabled_at = rfmgmt->enabled_at + rfmgmt->ticks_to_enabled + 1;
   1b4a8:	4b06      	ldr	r3, [pc, #24]	; (1b4c4 <ble_ll_rfmgmt_enable_now+0x30>)
   1b4aa:	6b1c      	ldr	r4, [r3, #48]	; 0x30
   1b4ac:	885b      	ldrh	r3, [r3, #2]
   1b4ae:	441c      	add	r4, r3
   1b4b0:	3401      	adds	r4, #1
    }

    OS_EXIT_CRITICAL(sr);
   1b4b2:	4628      	mov	r0, r5
   1b4b4:	f7f3 f844 	bl	e540 <os_arch_restore_sr>

    return enabled_at;
}
   1b4b8:	4620      	mov	r0, r4
   1b4ba:	bd38      	pop	{r3, r4, r5, pc}
        enabled_at = os_cputime_get32();
   1b4bc:	f013 fcf7 	bl	2eeae <os_cputime_get32>
   1b4c0:	4604      	mov	r4, r0
   1b4c2:	e7f6      	b.n	1b4b2 <ble_ll_rfmgmt_enable_now+0x1e>
   1b4c4:	20001eb4 	.word	0x20001eb4

0001b4c8 <ble_ll_get_chan_to_scan>:

static void
ble_ll_get_chan_to_scan(struct ble_ll_scan_sm *scansm, uint8_t *chan,
                        int *phy)
{
    struct ble_ll_scan_params *scanp = scansm->scanp;
   1b4c8:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    }

    *chan = aux_data->chan;
    *phy = aux_data->aux_phy;
#else
    *chan = scanp->scan_chan;
   1b4ca:	7958      	ldrb	r0, [r3, #5]
   1b4cc:	7008      	strb	r0, [r1, #0]
    *phy = scanp->phy;
   1b4ce:	781b      	ldrb	r3, [r3, #0]
   1b4d0:	6013      	str	r3, [r2, #0]
#endif
}
   1b4d2:	4770      	bx	lr

0001b4d4 <ble_ll_scan_get_next_adv_prim_chan>:
}

static uint8_t
ble_ll_scan_get_next_adv_prim_chan(uint8_t chan)
{
    ++chan;
   1b4d4:	3001      	adds	r0, #1
   1b4d6:	b2c0      	uxtb	r0, r0
    if (chan == BLE_PHY_NUM_CHANS) {
   1b4d8:	2828      	cmp	r0, #40	; 0x28
   1b4da:	d000      	beq.n	1b4de <ble_ll_scan_get_next_adv_prim_chan+0xa>
        chan = BLE_PHY_ADV_CHAN_START;
    }

    return chan;
}
   1b4dc:	4770      	bx	lr
        chan = BLE_PHY_ADV_CHAN_START;
   1b4de:	2025      	movs	r0, #37	; 0x25
   1b4e0:	e7fc      	b.n	1b4dc <ble_ll_scan_get_next_adv_prim_chan+0x8>

0001b4e2 <ble_ll_scan_move_window_to>:

static uint32_t
ble_ll_scan_move_window_to(struct ble_ll_scan_params *scanp, uint32_t time)
{
   1b4e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b4e4:	4605      	mov	r5, r0
   1b4e6:	460f      	mov	r7, r1
    /*
     * Move window until given tick is before or inside window and move to next
     * channel for each skipped interval.
     */

    end_time = scanp->timing.start_time + scanp->timing.window;
   1b4e8:	6904      	ldr	r4, [r0, #16]
   1b4ea:	68c6      	ldr	r6, [r0, #12]
   1b4ec:	4434      	add	r4, r6
    while (CPUTIME_GEQ(time, end_time)) {
   1b4ee:	e008      	b.n	1b502 <ble_ll_scan_move_window_to+0x20>
        scanp->timing.start_time += scanp->timing.interval;
   1b4f0:	68ac      	ldr	r4, [r5, #8]
   1b4f2:	692b      	ldr	r3, [r5, #16]
   1b4f4:	441c      	add	r4, r3
   1b4f6:	612c      	str	r4, [r5, #16]
        scanp->scan_chan = ble_ll_scan_get_next_adv_prim_chan(scanp->scan_chan);
   1b4f8:	7968      	ldrb	r0, [r5, #5]
   1b4fa:	f7ff ffeb 	bl	1b4d4 <ble_ll_scan_get_next_adv_prim_chan>
   1b4fe:	7168      	strb	r0, [r5, #5]
        end_time = scanp->timing.start_time + scanp->timing.window;
   1b500:	4434      	add	r4, r6
    while (CPUTIME_GEQ(time, end_time)) {
   1b502:	1b3c      	subs	r4, r7, r4
   1b504:	2c00      	cmp	r4, #0
   1b506:	daf3      	bge.n	1b4f0 <ble_ll_scan_move_window_to+0xe>
    }

    return scanp->timing.start_time;
}
   1b508:	6928      	ldr	r0, [r5, #16]
   1b50a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001b50c <ble_ll_scan_is_inside_window>:

static bool
ble_ll_scan_is_inside_window(struct ble_ll_scan_params *scanp, uint32_t time)
{
   1b50c:	b538      	push	{r3, r4, r5, lr}
   1b50e:	4605      	mov	r5, r0
   1b510:	460c      	mov	r4, r1
    uint32_t start_time;

    /* Make sure we are checking against closest window */
    start_time = ble_ll_scan_move_window_to(scanp, time);
   1b512:	f7ff ffe6 	bl	1b4e2 <ble_ll_scan_move_window_to>

    if (scanp->timing.window == scanp->timing.interval) {
   1b516:	68eb      	ldr	r3, [r5, #12]
   1b518:	68aa      	ldr	r2, [r5, #8]
   1b51a:	4293      	cmp	r3, r2
   1b51c:	d00c      	beq.n	1b538 <ble_ll_scan_is_inside_window+0x2c>
        /* always inside window in continuous scan */
        return true;
    }

    return CPUTIME_GEQ(time, start_time) &&
   1b51e:	1a22      	subs	r2, r4, r0
   1b520:	2a00      	cmp	r2, #0
   1b522:	db05      	blt.n	1b530 <ble_ll_scan_is_inside_window+0x24>
           CPUTIME_LT(time, start_time + scanp->timing.window);
   1b524:	4403      	add	r3, r0
   1b526:	1ae3      	subs	r3, r4, r3
    return CPUTIME_GEQ(time, start_time) &&
   1b528:	2b00      	cmp	r3, #0
   1b52a:	db03      	blt.n	1b534 <ble_ll_scan_is_inside_window+0x28>
   1b52c:	2000      	movs	r0, #0
   1b52e:	e004      	b.n	1b53a <ble_ll_scan_is_inside_window+0x2e>
   1b530:	2000      	movs	r0, #0
   1b532:	e002      	b.n	1b53a <ble_ll_scan_is_inside_window+0x2e>
   1b534:	2001      	movs	r0, #1
   1b536:	e000      	b.n	1b53a <ble_ll_scan_is_inside_window+0x2e>
        return true;
   1b538:	2001      	movs	r0, #1
}
   1b53a:	bd38      	pop	{r3, r4, r5, pc}

0001b53c <ble_ll_scan_get_addr_data_from_legacy>:
}

static void
ble_ll_scan_get_addr_data_from_legacy(uint8_t pdu_type, uint8_t *rxbuf,
                                     struct ble_ll_scan_addr_data *addrd)
{
   1b53c:	b508      	push	{r3, lr}
    BLE_LL_ASSERT(pdu_type < BLE_ADV_PDU_TYPE_ADV_EXT_IND);
   1b53e:	2806      	cmp	r0, #6
   1b540:	d80f      	bhi.n	1b562 <ble_ll_scan_get_addr_data_from_legacy+0x26>

    addrd->adva_present = true;
   1b542:	2301      	movs	r3, #1
   1b544:	7013      	strb	r3, [r2, #0]

    addrd->adva = rxbuf + BLE_LL_PDU_HDR_LEN;
   1b546:	1c8b      	adds	r3, r1, #2
   1b548:	6053      	str	r3, [r2, #4]
    addrd->adva_type = ble_ll_get_addr_type(rxbuf[0] & BLE_ADV_PDU_HDR_TXADD_MASK);
   1b54a:	780b      	ldrb	r3, [r1, #0]
    if (txrxflag) {
   1b54c:	f013 0f40 	tst.w	r3, #64	; 0x40
   1b550:	d011      	beq.n	1b576 <ble_ll_scan_get_addr_data_from_legacy+0x3a>
        return BLE_HCI_ADV_OWN_ADDR_RANDOM;
   1b552:	2301      	movs	r3, #1
   1b554:	7053      	strb	r3, [r2, #1]

    if (pdu_type == BLE_ADV_PDU_TYPE_ADV_DIRECT_IND) {
   1b556:	2801      	cmp	r0, #1
   1b558:	d00f      	beq.n	1b57a <ble_ll_scan_get_addr_data_from_legacy+0x3e>
        addrd->targeta = rxbuf + BLE_LL_PDU_HDR_LEN + BLE_DEV_ADDR_LEN;
        addrd->targeta_type = ble_ll_get_addr_type(rxbuf[0] & BLE_ADV_PDU_HDR_RXADD_MASK);
    } else {
        addrd->targeta = NULL;
   1b55a:	2300      	movs	r3, #0
   1b55c:	60d3      	str	r3, [r2, #12]
        addrd->targeta_type = 0;
   1b55e:	7213      	strb	r3, [r2, #8]
    }
}
   1b560:	bd08      	pop	{r3, pc}
    BLE_LL_ASSERT(pdu_type < BLE_ADV_PDU_TYPE_ADV_EXT_IND);
   1b562:	f7f0 fe41 	bl	c1e8 <hal_debugger_connected>
   1b566:	b100      	cbz	r0, 1b56a <ble_ll_scan_get_addr_data_from_legacy+0x2e>
   1b568:	be01      	bkpt	0x0001
   1b56a:	2300      	movs	r3, #0
   1b56c:	461a      	mov	r2, r3
   1b56e:	4619      	mov	r1, r3
   1b570:	4618      	mov	r0, r3
   1b572:	f7f1 faed 	bl	cb50 <__assert_func>
    return BLE_HCI_ADV_OWN_ADDR_PUBLIC;
   1b576:	2300      	movs	r3, #0
   1b578:	e7ec      	b.n	1b554 <ble_ll_scan_get_addr_data_from_legacy+0x18>
        addrd->targeta = rxbuf + BLE_LL_PDU_HDR_LEN + BLE_DEV_ADDR_LEN;
   1b57a:	f101 0308 	add.w	r3, r1, #8
   1b57e:	60d3      	str	r3, [r2, #12]
    if (txrxflag) {
   1b580:	f991 3000 	ldrsb.w	r3, [r1]
   1b584:	2b00      	cmp	r3, #0
   1b586:	db02      	blt.n	1b58e <ble_ll_scan_get_addr_data_from_legacy+0x52>
    return BLE_HCI_ADV_OWN_ADDR_PUBLIC;
   1b588:	2300      	movs	r3, #0
        addrd->targeta_type = ble_ll_get_addr_type(rxbuf[0] & BLE_ADV_PDU_HDR_RXADD_MASK);
   1b58a:	7213      	strb	r3, [r2, #8]
   1b58c:	e7e8      	b.n	1b560 <ble_ll_scan_get_addr_data_from_legacy+0x24>
        return BLE_HCI_ADV_OWN_ADDR_RANDOM;
   1b58e:	2301      	movs	r3, #1
   1b590:	e7fb      	b.n	1b58a <ble_ll_scan_get_addr_data_from_legacy+0x4e>
	...

0001b594 <ble_ll_scan_req_backoff>:
{
   1b594:	b510      	push	{r4, lr}
    BLE_LL_ASSERT(scansm->backoff_count == 0);
   1b596:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
   1b598:	bb03      	cbnz	r3, 1b5dc <ble_ll_scan_req_backoff+0x48>
   1b59a:	4604      	mov	r4, r0
    BLE_LL_ASSERT(scansm->scan_rsp_pending == 0);
   1b59c:	78c3      	ldrb	r3, [r0, #3]
   1b59e:	bb3b      	cbnz	r3, 1b5f0 <ble_ll_scan_req_backoff+0x5c>
    if (success) {
   1b5a0:	2900      	cmp	r1, #0
   1b5a2:	d037      	beq.n	1b614 <ble_ll_scan_req_backoff+0x80>
        scansm->scan_rsp_cons_fails = 0;
   1b5a4:	2300      	movs	r3, #0
   1b5a6:	7103      	strb	r3, [r0, #4]
        ++scansm->scan_rsp_cons_ok;
   1b5a8:	7943      	ldrb	r3, [r0, #5]
   1b5aa:	3301      	adds	r3, #1
   1b5ac:	b2db      	uxtb	r3, r3
   1b5ae:	7143      	strb	r3, [r0, #5]
        if (scansm->scan_rsp_cons_ok == 2) {
   1b5b0:	2b02      	cmp	r3, #2
   1b5b2:	d027      	beq.n	1b604 <ble_ll_scan_req_backoff+0x70>
        STATS_INC(ble_ll_stats, scan_req_txg);
   1b5b4:	4a28      	ldr	r2, [pc, #160]	; (1b658 <ble_ll_scan_req_backoff+0xc4>)
   1b5b6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
   1b5ba:	3301      	adds	r3, #1
   1b5bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
   1b5c0:	f7f3 f9c2 	bl	e948 <lrand48>
    scansm->backoff_count = rand() & (scansm->upper_limit - 1);
   1b5c4:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   1b5c6:	3b01      	subs	r3, #1
   1b5c8:	b21b      	sxth	r3, r3
   1b5ca:	4018      	ands	r0, r3
   1b5cc:	b280      	uxth	r0, r0
    ++scansm->backoff_count;
   1b5ce:	3001      	adds	r0, #1
   1b5d0:	b280      	uxth	r0, r0
   1b5d2:	84e0      	strh	r0, [r4, #38]	; 0x26
    BLE_LL_ASSERT(scansm->backoff_count <= 256);
   1b5d4:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   1b5d8:	d833      	bhi.n	1b642 <ble_ll_scan_req_backoff+0xae>
}
   1b5da:	bd10      	pop	{r4, pc}
    BLE_LL_ASSERT(scansm->backoff_count == 0);
   1b5dc:	f7f0 fe04 	bl	c1e8 <hal_debugger_connected>
   1b5e0:	b100      	cbz	r0, 1b5e4 <ble_ll_scan_req_backoff+0x50>
   1b5e2:	be01      	bkpt	0x0001
   1b5e4:	2300      	movs	r3, #0
   1b5e6:	461a      	mov	r2, r3
   1b5e8:	4619      	mov	r1, r3
   1b5ea:	4618      	mov	r0, r3
   1b5ec:	f7f1 fab0 	bl	cb50 <__assert_func>
    BLE_LL_ASSERT(scansm->scan_rsp_pending == 0);
   1b5f0:	f7f0 fdfa 	bl	c1e8 <hal_debugger_connected>
   1b5f4:	b100      	cbz	r0, 1b5f8 <ble_ll_scan_req_backoff+0x64>
   1b5f6:	be01      	bkpt	0x0001
   1b5f8:	2300      	movs	r3, #0
   1b5fa:	461a      	mov	r2, r3
   1b5fc:	4619      	mov	r1, r3
   1b5fe:	4618      	mov	r0, r3
   1b600:	f7f1 faa6 	bl	cb50 <__assert_func>
            scansm->scan_rsp_cons_ok = 0;
   1b604:	2300      	movs	r3, #0
   1b606:	7143      	strb	r3, [r0, #5]
            if (scansm->upper_limit > 1) {
   1b608:	8c83      	ldrh	r3, [r0, #36]	; 0x24
   1b60a:	2b01      	cmp	r3, #1
   1b60c:	d9d2      	bls.n	1b5b4 <ble_ll_scan_req_backoff+0x20>
                scansm->upper_limit >>= 1;
   1b60e:	085b      	lsrs	r3, r3, #1
   1b610:	8483      	strh	r3, [r0, #36]	; 0x24
   1b612:	e7cf      	b.n	1b5b4 <ble_ll_scan_req_backoff+0x20>
        scansm->scan_rsp_cons_ok = 0;
   1b614:	2300      	movs	r3, #0
   1b616:	7143      	strb	r3, [r0, #5]
        ++scansm->scan_rsp_cons_fails;
   1b618:	7903      	ldrb	r3, [r0, #4]
   1b61a:	3301      	adds	r3, #1
   1b61c:	b2db      	uxtb	r3, r3
   1b61e:	7103      	strb	r3, [r0, #4]
        if (scansm->scan_rsp_cons_fails == 2) {
   1b620:	2b02      	cmp	r3, #2
   1b622:	d006      	beq.n	1b632 <ble_ll_scan_req_backoff+0x9e>
        STATS_INC(ble_ll_stats, scan_req_txf);
   1b624:	4a0c      	ldr	r2, [pc, #48]	; (1b658 <ble_ll_scan_req_backoff+0xc4>)
   1b626:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
   1b62a:	3301      	adds	r3, #1
   1b62c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
   1b630:	e7c6      	b.n	1b5c0 <ble_ll_scan_req_backoff+0x2c>
            scansm->scan_rsp_cons_fails = 0;
   1b632:	2300      	movs	r3, #0
   1b634:	7103      	strb	r3, [r0, #4]
            if (scansm->upper_limit < 256) {
   1b636:	8c83      	ldrh	r3, [r0, #36]	; 0x24
   1b638:	2bff      	cmp	r3, #255	; 0xff
   1b63a:	d8f3      	bhi.n	1b624 <ble_ll_scan_req_backoff+0x90>
                scansm->upper_limit <<= 1;
   1b63c:	005b      	lsls	r3, r3, #1
   1b63e:	8483      	strh	r3, [r0, #36]	; 0x24
   1b640:	e7f0      	b.n	1b624 <ble_ll_scan_req_backoff+0x90>
    BLE_LL_ASSERT(scansm->backoff_count <= 256);
   1b642:	f7f0 fdd1 	bl	c1e8 <hal_debugger_connected>
   1b646:	b100      	cbz	r0, 1b64a <ble_ll_scan_req_backoff+0xb6>
   1b648:	be01      	bkpt	0x0001
   1b64a:	2300      	movs	r3, #0
   1b64c:	461a      	mov	r2, r3
   1b64e:	4619      	mov	r1, r3
   1b650:	4618      	mov	r0, r3
   1b652:	f7f1 fa7d 	bl	cb50 <__assert_func>
   1b656:	bf00      	nop
   1b658:	200035c0 	.word	0x200035c0

0001b65c <ble_ll_scan_have_rxd_scan_rsp>:
{
   1b65c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1b660:	4606      	mov	r6, r0
   1b662:	460f      	mov	r7, r1
   1b664:	4690      	mov	r8, r2
   1b666:	4699      	mov	r9, r3
    num_advs = g_ble_ll_scan_num_rsp_advs;
   1b668:	4b17      	ldr	r3, [pc, #92]	; (1b6c8 <ble_ll_scan_have_rxd_scan_rsp+0x6c>)
   1b66a:	781c      	ldrb	r4, [r3, #0]
    adv = &g_ble_ll_scan_rsp_advs[0];
   1b66c:	4d17      	ldr	r5, [pc, #92]	; (1b6cc <ble_ll_scan_have_rxd_scan_rsp+0x70>)
    while (num_advs) {
   1b66e:	e00c      	b.n	1b68a <ble_ll_scan_have_rxd_scan_rsp+0x2e>
                if ((adv->sc_adv_flags & BLE_LL_SC_ADV_F_RANDOM_ADDR) == 0) {
   1b670:	882b      	ldrh	r3, [r5, #0]
   1b672:	f013 0f01 	tst.w	r3, #1
   1b676:	d105      	bne.n	1b684 <ble_ll_scan_have_rxd_scan_rsp+0x28>
                    if (ext_adv) {
   1b678:	f1b8 0f00 	cmp.w	r8, #0
   1b67c:	d020      	beq.n	1b6c0 <ble_ll_scan_have_rxd_scan_rsp+0x64>
                        if (adi == adv->adi) {
   1b67e:	886b      	ldrh	r3, [r5, #2]
   1b680:	454b      	cmp	r3, r9
   1b682:	d01f      	beq.n	1b6c4 <ble_ll_scan_have_rxd_scan_rsp+0x68>
        ++adv;
   1b684:	350a      	adds	r5, #10
        --num_advs;
   1b686:	3c01      	subs	r4, #1
   1b688:	b2e4      	uxtb	r4, r4
    while (num_advs) {
   1b68a:	b1a4      	cbz	r4, 1b6b6 <ble_ll_scan_have_rxd_scan_rsp+0x5a>
        if (!memcmp(&adv->adv_addr, addr, BLE_DEV_ADDR_LEN)) {
   1b68c:	2206      	movs	r2, #6
   1b68e:	4631      	mov	r1, r6
   1b690:	1d28      	adds	r0, r5, #4
   1b692:	f7f3 f961 	bl	e958 <memcmp>
   1b696:	2800      	cmp	r0, #0
   1b698:	d1f4      	bne.n	1b684 <ble_ll_scan_have_rxd_scan_rsp+0x28>
            if (txadd) {
   1b69a:	2f00      	cmp	r7, #0
   1b69c:	d0e8      	beq.n	1b670 <ble_ll_scan_have_rxd_scan_rsp+0x14>
                if (adv->sc_adv_flags & BLE_LL_SC_ADV_F_RANDOM_ADDR) {
   1b69e:	882b      	ldrh	r3, [r5, #0]
   1b6a0:	f013 0f01 	tst.w	r3, #1
   1b6a4:	d0ee      	beq.n	1b684 <ble_ll_scan_have_rxd_scan_rsp+0x28>
                    if (ext_adv) {
   1b6a6:	f1b8 0f00 	cmp.w	r8, #0
   1b6aa:	d007      	beq.n	1b6bc <ble_ll_scan_have_rxd_scan_rsp+0x60>
                        if (adi == adv->adi) {
   1b6ac:	886b      	ldrh	r3, [r5, #2]
   1b6ae:	454b      	cmp	r3, r9
   1b6b0:	d1e8      	bne.n	1b684 <ble_ll_scan_have_rxd_scan_rsp+0x28>
                            return 1;
   1b6b2:	2001      	movs	r0, #1
   1b6b4:	e000      	b.n	1b6b8 <ble_ll_scan_have_rxd_scan_rsp+0x5c>
    return 0;
   1b6b6:	2000      	movs	r0, #0
}
   1b6b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                    return 1;
   1b6bc:	2001      	movs	r0, #1
   1b6be:	e7fb      	b.n	1b6b8 <ble_ll_scan_have_rxd_scan_rsp+0x5c>
                    return 1;
   1b6c0:	2001      	movs	r0, #1
   1b6c2:	e7f9      	b.n	1b6b8 <ble_ll_scan_have_rxd_scan_rsp+0x5c>
                            return 1;
   1b6c4:	2001      	movs	r0, #1
   1b6c6:	e7f7      	b.n	1b6b8 <ble_ll_scan_have_rxd_scan_rsp+0x5c>
   1b6c8:	20001ef8 	.word	0x20001ef8
   1b6cc:	20003be0 	.word	0x20003be0

0001b6d0 <ble_ll_scan_dup_update_legacy>:
{
   1b6d0:	b570      	push	{r4, r5, r6, lr}
   1b6d2:	461e      	mov	r6, r3
    e = TAILQ_FIRST(&g_scan_dup_list);
   1b6d4:	4b15      	ldr	r3, [pc, #84]	; (1b72c <ble_ll_scan_dup_update_legacy+0x5c>)
   1b6d6:	681c      	ldr	r4, [r3, #0]
    BLE_LL_ASSERT(e && e->type == type && !memcmp(e->addr, addr, 6));
   1b6d8:	b1a4      	cbz	r4, 1b704 <ble_ll_scan_dup_update_legacy+0x34>
   1b6da:	4615      	mov	r5, r2
   1b6dc:	f000 0001 	and.w	r0, r0, #1
   1b6e0:	7823      	ldrb	r3, [r4, #0]
   1b6e2:	4283      	cmp	r3, r0
   1b6e4:	d10e      	bne.n	1b704 <ble_ll_scan_dup_update_legacy+0x34>
   1b6e6:	2206      	movs	r2, #6
   1b6e8:	1c60      	adds	r0, r4, #1
   1b6ea:	f7f3 f935 	bl	e958 <memcmp>
   1b6ee:	b948      	cbnz	r0, 1b704 <ble_ll_scan_dup_update_legacy+0x34>
    if (subev == BLE_HCI_LE_SUBEV_DIRECT_ADV_RPT) {
   1b6f0:	2d0b      	cmp	r5, #11
   1b6f2:	d011      	beq.n	1b718 <ble_ll_scan_dup_update_legacy+0x48>
        if (evtype == BLE_HCI_ADV_RPT_EVTYPE_SCAN_RSP) {
   1b6f4:	2e04      	cmp	r6, #4
   1b6f6:	d014      	beq.n	1b722 <ble_ll_scan_dup_update_legacy+0x52>
            e->flags |= BLE_LL_SCAN_DUP_F_ADV_REPORT_SENT;
   1b6f8:	79e3      	ldrb	r3, [r4, #7]
   1b6fa:	f043 0301 	orr.w	r3, r3, #1
   1b6fe:	71e3      	strb	r3, [r4, #7]
}
   1b700:	2000      	movs	r0, #0
   1b702:	bd70      	pop	{r4, r5, r6, pc}
    BLE_LL_ASSERT(e && e->type == type && !memcmp(e->addr, addr, 6));
   1b704:	f7f0 fd70 	bl	c1e8 <hal_debugger_connected>
   1b708:	b100      	cbz	r0, 1b70c <ble_ll_scan_dup_update_legacy+0x3c>
   1b70a:	be01      	bkpt	0x0001
   1b70c:	2300      	movs	r3, #0
   1b70e:	461a      	mov	r2, r3
   1b710:	4619      	mov	r1, r3
   1b712:	4618      	mov	r0, r3
   1b714:	f7f1 fa1c 	bl	cb50 <__assert_func>
        e->flags |= BLE_LL_SCAN_DUP_F_DIR_ADV_REPORT_SENT;
   1b718:	79e3      	ldrb	r3, [r4, #7]
   1b71a:	f043 0302 	orr.w	r3, r3, #2
   1b71e:	71e3      	strb	r3, [r4, #7]
   1b720:	e7ee      	b.n	1b700 <ble_ll_scan_dup_update_legacy+0x30>
            e->flags |= BLE_LL_SCAN_DUP_F_SCAN_RSP_SENT;
   1b722:	79e3      	ldrb	r3, [r4, #7]
   1b724:	f043 0304 	orr.w	r3, r3, #4
   1b728:	71e3      	strb	r3, [r4, #7]
   1b72a:	e7e9      	b.n	1b700 <ble_ll_scan_dup_update_legacy+0x30>
   1b72c:	20001f98 	.word	0x20001f98

0001b730 <ble_ll_scan_rx_filter>:
 *          1 = match
 *          2 = match, but do not scan
 */
static int
ble_ll_scan_rx_filter(struct ble_mbuf_hdr *hdr, struct ble_ll_scan_addr_data *addrd)
{
   1b730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b734:	4606      	mov	r6, r0
   1b736:	460c      	mov	r4, r1
    struct ble_ll_scan_sm *scansm = &g_ble_ll_scan_sm;
    struct ble_ll_scan_params *scanp = scansm->scanp;
   1b738:	4b46      	ldr	r3, [pc, #280]	; (1b854 <ble_ll_scan_rx_filter+0x124>)
   1b73a:	f8d3 806c 	ldr.w	r8, [r3, #108]	; 0x6c
#endif
    bool scan_req_allowed = true;
    int resolved = 0;

    /* Use AdvA as initial advertiser address, we may try to resolve it later */
    addrd->adv_addr = addrd->adva;
   1b73e:	684b      	ldr	r3, [r1, #4]
   1b740:	614b      	str	r3, [r1, #20]
    addrd->adv_addr_type = addrd->adva_type;
   1b742:	784b      	ldrb	r3, [r1, #1]
   1b744:	740b      	strb	r3, [r1, #16]

#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LL_PRIVACY)
    /* By default, assume AdvA is not resolved */
    rxinfo->rpa_index = -1;
   1b746:	23ff      	movs	r3, #255	; 0xff
   1b748:	71c3      	strb	r3, [r0, #7]

    switch (ble_ll_addr_subtype(addrd->adva, addrd->adva_type)) {
   1b74a:	7849      	ldrb	r1, [r1, #1]
   1b74c:	6860      	ldr	r0, [r4, #4]
   1b74e:	f7f9 f81e 	bl	1478e <ble_ll_addr_subtype>
   1b752:	4605      	mov	r5, r0
   1b754:	b328      	cbz	r0, 1b7a2 <ble_ll_scan_rx_filter+0x72>
   1b756:	2801      	cmp	r0, #1
   1b758:	d130      	bne.n	1b7bc <ble_ll_scan_rx_filter+0x8c>
         * Only resolve if packet actually contained AdvA.
         * In extended advertising PDUs we may use RL index from a PDU that
         * already had AdvA (e.g. ADV_EXT_IND in case of AUX_ADV_IND without
         * AdvA). In legacy advertising PDUs we always need to resolve AdvA.
         */
        if (addrd->adva_present) {
   1b75a:	7823      	ldrb	r3, [r4, #0]
   1b75c:	b1bb      	cbz	r3, 1b78e <ble_ll_scan_rx_filter+0x5e>
            rxinfo->rpa_index = ble_hw_resolv_list_match();
   1b75e:	f001 ffa5 	bl	1d6ac <ble_hw_resolv_list_match>
   1b762:	b240      	sxtb	r0, r0
   1b764:	71f0      	strb	r0, [r6, #7]
            BLE_LL_ASSERT(false);
            rxinfo->rpa_index = -1;
#endif
        }

        if (rxinfo->rpa_index < 0) {
   1b766:	2800      	cmp	r0, #0
   1b768:	db3f      	blt.n	1b7ea <ble_ll_scan_rx_filter+0xba>
            aux_data->rpa_index = rxinfo->rpa_index;
        }
#endif

        /* Use resolved identity address as advertiser address */
        rl = &g_ble_ll_resolv_list[rxinfo->rpa_index];
   1b76a:	2336      	movs	r3, #54	; 0x36
   1b76c:	fb03 f000 	mul.w	r0, r3, r0
   1b770:	4a39      	ldr	r2, [pc, #228]	; (1b858 <ble_ll_scan_rx_filter+0x128>)
   1b772:	1887      	adds	r7, r0, r2
        addrd->adv_addr = rl->rl_identity_addr;
   1b774:	f100 0320 	add.w	r3, r0, #32
   1b778:	4413      	add	r3, r2
   1b77a:	3304      	adds	r3, #4
   1b77c:	6163      	str	r3, [r4, #20]
        addrd->adv_addr_type = rl->rl_addr_type;
   1b77e:	5c83      	ldrb	r3, [r0, r2]
   1b780:	7423      	strb	r3, [r4, #16]
        addrd->rl = rl;
   1b782:	61a7      	str	r7, [r4, #24]

        rxinfo->flags |= BLE_MBUF_HDR_F_RESOLVED;
   1b784:	8833      	ldrh	r3, [r6, #0]
   1b786:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   1b78a:	8033      	strh	r3, [r6, #0]
        resolved = 1;
        break;
   1b78c:	e018      	b.n	1b7c0 <ble_ll_scan_rx_filter+0x90>
            BLE_LL_ASSERT(false);
   1b78e:	f7f0 fd2b 	bl	c1e8 <hal_debugger_connected>
   1b792:	b100      	cbz	r0, 1b796 <ble_ll_scan_rx_filter+0x66>
   1b794:	be01      	bkpt	0x0001
   1b796:	2300      	movs	r3, #0
   1b798:	461a      	mov	r2, r3
   1b79a:	4619      	mov	r1, r3
   1b79c:	4618      	mov	r0, r3
   1b79e:	f7f1 f9d7 	bl	cb50 <__assert_func>
    case BLE_LL_ADDR_SUBTYPE_IDENTITY:
        /*
         * If AdvA is an identity address, we need to check if that device was
         * added to RL in order to use proper privacy mode.
         */
        rl = ble_ll_resolv_list_find(addrd->adva, addrd->adva_type);
   1b7a2:	7861      	ldrb	r1, [r4, #1]
   1b7a4:	6860      	ldr	r0, [r4, #4]
   1b7a6:	f7ff fac7 	bl	1ad38 <ble_ll_resolv_list_find>
        if (!rl) {
   1b7aa:	4607      	mov	r7, r0
   1b7ac:	b140      	cbz	r0, 1b7c0 <ble_ll_scan_rx_filter+0x90>
            break;
        }

        addrd->rl = rl;
   1b7ae:	61a0      	str	r0, [r4, #24]

        /* Ignore device if using network privacy mode and it has IRK */
        if ((rl->rl_priv_mode == BLE_HCI_PRIVACY_NETWORK) && rl->rl_has_peer) {
   1b7b0:	7843      	ldrb	r3, [r0, #1]
   1b7b2:	b92b      	cbnz	r3, 1b7c0 <ble_ll_scan_rx_filter+0x90>
   1b7b4:	78c3      	ldrb	r3, [r0, #3]
   1b7b6:	b11b      	cbz	r3, 1b7c0 <ble_ll_scan_rx_filter+0x90>
            return 0;
   1b7b8:	462b      	mov	r3, r5
   1b7ba:	e038      	b.n	1b82e <ble_ll_scan_rx_filter+0xfe>
    int resolved = 0;
   1b7bc:	2500      	movs	r5, #0
    struct ble_ll_resolv_entry *rl = NULL;
   1b7be:	462f      	mov	r7, r5
    default:
        /* NRPA goes through filtering policy directly */
        break;
    }

    if (addrd->targeta) {
   1b7c0:	68e0      	ldr	r0, [r4, #12]
   1b7c2:	b360      	cbz	r0, 1b81e <ble_ll_scan_rx_filter+0xee>
        switch (ble_ll_addr_subtype(addrd->targeta, addrd->targeta_type)) {
   1b7c4:	7a21      	ldrb	r1, [r4, #8]
   1b7c6:	f7f8 ffe2 	bl	1478e <ble_ll_addr_subtype>
   1b7ca:	4603      	mov	r3, r0
   1b7cc:	b1b8      	cbz	r0, 1b7fe <ble_ll_scan_rx_filter+0xce>
   1b7ce:	2801      	cmp	r0, #1
   1b7d0:	d130      	bne.n	1b834 <ble_ll_scan_rx_filter+0x104>
        case BLE_LL_ADDR_SUBTYPE_RPA:
            /* Check if TargetA can be resolved using the same RL entry as AdvA */
            if (rl && ble_ll_resolv_rpa(addrd->targeta, rl->rl_local_irk)) {
   1b7d2:	b16f      	cbz	r7, 1b7f0 <ble_ll_scan_rx_filter+0xc0>
   1b7d4:	1d39      	adds	r1, r7, #4
   1b7d6:	68e0      	ldr	r0, [r4, #12]
   1b7d8:	f7ff fcd0 	bl	1b17c <ble_ll_resolv_rpa>
   1b7dc:	b140      	cbz	r0, 1b7f0 <ble_ll_scan_rx_filter+0xc0>
                rxinfo->flags |= BLE_MBUF_HDR_F_TARGETA_RESOLVED;
   1b7de:	8833      	ldrh	r3, [r6, #0]
   1b7e0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   1b7e4:	8033      	strh	r3, [r6, #0]
    bool scan_req_allowed = true;
   1b7e6:	2601      	movs	r6, #1
                break;
   1b7e8:	e01a      	b.n	1b820 <ble_ll_scan_rx_filter+0xf0>
    int resolved = 0;
   1b7ea:	2500      	movs	r5, #0
    struct ble_ll_resolv_entry *rl = NULL;
   1b7ec:	462f      	mov	r7, r5
   1b7ee:	e7e7      	b.n	1b7c0 <ble_ll_scan_rx_filter+0x90>
            }

            /* Check if scan filter policy allows unresolved RPAs to be processed */
            if (!(scanp->scan_filt_policy & 0x02)) {
   1b7f0:	f898 3002 	ldrb.w	r3, [r8, #2]
   1b7f4:	f013 0f02 	tst.w	r3, #2
   1b7f8:	d027      	beq.n	1b84a <ble_ll_scan_rx_filter+0x11a>
            /*
             * We will notify host as requited by scan policy, but make sure we
             * do not send scan request since we do not know if this is directed
             * to us.
             */
            scan_req_allowed = false;
   1b7fa:	2600      	movs	r6, #0
   1b7fc:	e010      	b.n	1b820 <ble_ll_scan_rx_filter+0xf0>
            break;
        case BLE_LL_ADDR_SUBTYPE_IDENTITY:
            /* We shall ignore identity in TargetA if we are using RPA */
            if ((scanp->own_addr_type & 0x02) && rl && rl->rl_has_local) {
   1b7fe:	f898 2001 	ldrb.w	r2, [r8, #1]
   1b802:	f012 0f02 	tst.w	r2, #2
   1b806:	d002      	beq.n	1b80e <ble_ll_scan_rx_filter+0xde>
   1b808:	b10f      	cbz	r7, 1b80e <ble_ll_scan_rx_filter+0xde>
   1b80a:	78ba      	ldrb	r2, [r7, #2]
   1b80c:	b97a      	cbnz	r2, 1b82e <ble_ll_scan_rx_filter+0xfe>
                return 0;
            }
            /* Ignore if not directed to us */
            if (!ble_ll_is_our_devaddr(addrd->targeta, addrd->targeta_type)) {
   1b80e:	7a21      	ldrb	r1, [r4, #8]
   1b810:	68e0      	ldr	r0, [r4, #12]
   1b812:	f7f9 f851 	bl	148b8 <ble_ll_is_our_devaddr>
   1b816:	4603      	mov	r3, r0
   1b818:	b148      	cbz	r0, 1b82e <ble_ll_scan_rx_filter+0xfe>
    bool scan_req_allowed = true;
   1b81a:	2601      	movs	r6, #1
   1b81c:	e000      	b.n	1b820 <ble_ll_scan_rx_filter+0xf0>
   1b81e:	2601      	movs	r6, #1
        return 0;
    }
#endif

    /* Check on WL if required by scan filter policy */
    if (scanp->scan_filt_policy & 0x01) {
   1b820:	f898 3002 	ldrb.w	r3, [r8, #2]
   1b824:	f013 0f01 	tst.w	r3, #1
   1b828:	d106      	bne.n	1b838 <ble_ll_scan_rx_filter+0x108>
        if (!ble_ll_whitelist_match(addrd->adv_addr, addrd->adv_addr_type, resolved)) {
            return 0;
        }
    }

    return scan_req_allowed ? 1 : 2;
   1b82a:	b186      	cbz	r6, 1b84e <ble_ll_scan_rx_filter+0x11e>
   1b82c:	2301      	movs	r3, #1
}
   1b82e:	4618      	mov	r0, r3
   1b830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bool scan_req_allowed = true;
   1b834:	2601      	movs	r6, #1
   1b836:	e7f3      	b.n	1b820 <ble_ll_scan_rx_filter+0xf0>
        if (!ble_ll_whitelist_match(addrd->adv_addr, addrd->adv_addr_type, resolved)) {
   1b838:	462a      	mov	r2, r5
   1b83a:	7c21      	ldrb	r1, [r4, #16]
   1b83c:	6960      	ldr	r0, [r4, #20]
   1b83e:	f001 fd35 	bl	1d2ac <ble_ll_whitelist_match>
   1b842:	4603      	mov	r3, r0
   1b844:	2800      	cmp	r0, #0
   1b846:	d1f0      	bne.n	1b82a <ble_ll_scan_rx_filter+0xfa>
   1b848:	e7f1      	b.n	1b82e <ble_ll_scan_rx_filter+0xfe>
                return 0;
   1b84a:	2300      	movs	r3, #0
   1b84c:	e7ef      	b.n	1b82e <ble_ll_scan_rx_filter+0xfe>
    return scan_req_allowed ? 1 : 2;
   1b84e:	2302      	movs	r3, #2
   1b850:	e7ed      	b.n	1b82e <ble_ll_scan_rx_filter+0xfe>
   1b852:	bf00      	nop
   1b854:	20001f10 	.word	0x20001f10
   1b858:	20003ae0 	.word	0x20003ae0

0001b85c <ble_ll_scan_rx_isr_on_legacy>:

static int
ble_ll_scan_rx_isr_on_legacy(uint8_t pdu_type, uint8_t *rxbuf,
                             struct ble_mbuf_hdr *hdr,
                             struct ble_ll_scan_addr_data *addrd)
{
   1b85c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b85e:	4606      	mov	r6, r0
   1b860:	4614      	mov	r4, r2
   1b862:	461d      	mov	r5, r3
    struct ble_ll_scan_sm *scansm = &g_ble_ll_scan_sm;
    struct ble_ll_scan_params *scanp = scansm->scanp;
   1b864:	4b27      	ldr	r3, [pc, #156]	; (1b904 <ble_ll_scan_rx_isr_on_legacy+0xa8>)
   1b866:	6edf      	ldr	r7, [r3, #108]	; 0x6c
    struct ble_mbuf_hdr_rxinfo *rxinfo = &hdr->rxinfo;
    uint8_t sreq_adva_type;
    uint8_t *sreq_adva;
    int rc;

    ble_ll_scan_get_addr_data_from_legacy(pdu_type, rxbuf, addrd);
   1b868:	462a      	mov	r2, r5
   1b86a:	f7ff fe67 	bl	1b53c <ble_ll_scan_get_addr_data_from_legacy>

    if (pdu_type == BLE_ADV_PDU_TYPE_SCAN_RSP) {
   1b86e:	2e04      	cmp	r6, #4
   1b870:	d127      	bne.n	1b8c2 <ble_ll_scan_rx_isr_on_legacy+0x66>
        if (!BLE_MBUF_HDR_SCAN_RSP_RXD(hdr)) {
   1b872:	8823      	ldrh	r3, [r4, #0]
   1b874:	f013 0f08 	tst.w	r3, #8
   1b878:	d03a      	beq.n	1b8f0 <ble_ll_scan_rx_isr_on_legacy+0x94>
             * update backoff.
             */
            return -1;
        }

        sreq_adva_type = !!(scansm->pdu_data.hdr_byte & BLE_ADV_PDU_HDR_RXADD_MASK);
   1b87a:	4b22      	ldr	r3, [pc, #136]	; (1b904 <ble_ll_scan_rx_isr_on_legacy+0xa8>)
   1b87c:	7d9a      	ldrb	r2, [r3, #22]

        /*
         * Ignore scan response if AdvA does not match AdvA in request and also
         * update backoff as if there was no scan response.
         */
        if ((addrd->adva_type != sreq_adva_type) ||
   1b87e:	786b      	ldrb	r3, [r5, #1]
   1b880:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   1b884:	d116      	bne.n	1b8b4 <ble_ll_scan_rx_isr_on_legacy+0x58>
            memcmp(addrd->adva, sreq_adva, BLE_DEV_ADDR_LEN)) {
   1b886:	2206      	movs	r2, #6
   1b888:	491f      	ldr	r1, [pc, #124]	; (1b908 <ble_ll_scan_rx_isr_on_legacy+0xac>)
   1b88a:	6868      	ldr	r0, [r5, #4]
   1b88c:	f7f3 f864 	bl	e958 <memcmp>
        if ((addrd->adva_type != sreq_adva_type) ||
   1b890:	4605      	mov	r5, r0
   1b892:	b978      	cbnz	r0, 1b8b4 <ble_ll_scan_rx_isr_on_legacy+0x58>
        /*
         * We are not pushing this one through filters so need to update
         * rpa_index here as otherwise pkt_in won't be able to determine
         * advertiser address properly.
         */
        rxinfo->rpa_index = ble_hw_resolv_list_match();
   1b894:	f001 ff0a 	bl	1d6ac <ble_hw_resolv_list_match>
   1b898:	b240      	sxtb	r0, r0
   1b89a:	71e0      	strb	r0, [r4, #7]
        if (rxinfo->rpa_index >= 0) {
   1b89c:	2800      	cmp	r0, #0
   1b89e:	db03      	blt.n	1b8a8 <ble_ll_scan_rx_isr_on_legacy+0x4c>
            rxinfo->flags |= BLE_MBUF_HDR_F_RESOLVED;
   1b8a0:	8823      	ldrh	r3, [r4, #0]
   1b8a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   1b8a6:	8023      	strh	r3, [r4, #0]
        }
#endif

        rxinfo->flags |= BLE_MBUF_HDR_F_DEVMATCH;
   1b8a8:	8823      	ldrh	r3, [r4, #0]
   1b8aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1b8ae:	8023      	strh	r3, [r4, #0]
    }

    return (scanp->scan_type == BLE_SCAN_TYPE_ACTIVE) &&
           ((pdu_type == BLE_ADV_PDU_TYPE_ADV_IND) ||
            (pdu_type == BLE_ADV_PDU_TYPE_ADV_SCAN_IND));
}
   1b8b0:	4628      	mov	r0, r5
   1b8b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            ble_ll_scan_req_backoff(scansm, 0);
   1b8b4:	2100      	movs	r1, #0
   1b8b6:	4813      	ldr	r0, [pc, #76]	; (1b904 <ble_ll_scan_rx_isr_on_legacy+0xa8>)
   1b8b8:	f7ff fe6c 	bl	1b594 <ble_ll_scan_req_backoff>
            return -1;
   1b8bc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1b8c0:	e7f6      	b.n	1b8b0 <ble_ll_scan_rx_isr_on_legacy+0x54>
    rc = ble_ll_scan_rx_filter(hdr, addrd);
   1b8c2:	4629      	mov	r1, r5
   1b8c4:	4620      	mov	r0, r4
   1b8c6:	f7ff ff33 	bl	1b730 <ble_ll_scan_rx_filter>
    if (!rc) {
   1b8ca:	4605      	mov	r5, r0
   1b8cc:	2800      	cmp	r0, #0
   1b8ce:	d0ef      	beq.n	1b8b0 <ble_ll_scan_rx_isr_on_legacy+0x54>
    rxinfo->flags |= BLE_MBUF_HDR_F_DEVMATCH;
   1b8d0:	8823      	ldrh	r3, [r4, #0]
   1b8d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1b8d6:	8023      	strh	r3, [r4, #0]
    if (rc == 2) {
   1b8d8:	2802      	cmp	r0, #2
   1b8da:	d00c      	beq.n	1b8f6 <ble_ll_scan_rx_isr_on_legacy+0x9a>
    return (scanp->scan_type == BLE_SCAN_TYPE_ACTIVE) &&
   1b8dc:	793b      	ldrb	r3, [r7, #4]
   1b8de:	2b01      	cmp	r3, #1
   1b8e0:	d001      	beq.n	1b8e6 <ble_ll_scan_rx_isr_on_legacy+0x8a>
   1b8e2:	2500      	movs	r5, #0
   1b8e4:	e7e4      	b.n	1b8b0 <ble_ll_scan_rx_isr_on_legacy+0x54>
   1b8e6:	b146      	cbz	r6, 1b8fa <ble_ll_scan_rx_isr_on_legacy+0x9e>
           ((pdu_type == BLE_ADV_PDU_TYPE_ADV_IND) ||
   1b8e8:	2e06      	cmp	r6, #6
   1b8ea:	d008      	beq.n	1b8fe <ble_ll_scan_rx_isr_on_legacy+0xa2>
    return (scanp->scan_type == BLE_SCAN_TYPE_ACTIVE) &&
   1b8ec:	2500      	movs	r5, #0
   1b8ee:	e7df      	b.n	1b8b0 <ble_ll_scan_rx_isr_on_legacy+0x54>
            return -1;
   1b8f0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1b8f4:	e7dc      	b.n	1b8b0 <ble_ll_scan_rx_isr_on_legacy+0x54>
        return 0;
   1b8f6:	2500      	movs	r5, #0
   1b8f8:	e7da      	b.n	1b8b0 <ble_ll_scan_rx_isr_on_legacy+0x54>
    return (scanp->scan_type == BLE_SCAN_TYPE_ACTIVE) &&
   1b8fa:	2501      	movs	r5, #1
   1b8fc:	e7d8      	b.n	1b8b0 <ble_ll_scan_rx_isr_on_legacy+0x54>
   1b8fe:	2501      	movs	r5, #1
   1b900:	e7d6      	b.n	1b8b0 <ble_ll_scan_rx_isr_on_legacy+0x54>
   1b902:	bf00      	nop
   1b904:	20001f10 	.word	0x20001f10
   1b908:	20001f2d 	.word	0x20001f2d

0001b90c <ble_ll_scan_req_tx_pdu_cb>:
{
   1b90c:	b410      	push	{r4}
    memcpy(dptr, pdu_data->scana, BLE_DEV_ADDR_LEN);
   1b90e:	460b      	mov	r3, r1
   1b910:	f853 4f17 	ldr.w	r4, [r3, #23]!
   1b914:	6004      	str	r4, [r0, #0]
   1b916:	889b      	ldrh	r3, [r3, #4]
   1b918:	8083      	strh	r3, [r0, #4]
    memcpy(dptr + BLE_DEV_ADDR_LEN, pdu_data->adva, BLE_DEV_ADDR_LEN);
   1b91a:	460b      	mov	r3, r1
   1b91c:	f853 4f1d 	ldr.w	r4, [r3, #29]!
   1b920:	f8c0 4006 	str.w	r4, [r0, #6]
   1b924:	889b      	ldrh	r3, [r3, #4]
   1b926:	8143      	strh	r3, [r0, #10]
    *hdr_byte = pdu_data->hdr_byte;
   1b928:	7d8b      	ldrb	r3, [r1, #22]
   1b92a:	7013      	strb	r3, [r2, #0]
}
   1b92c:	200c      	movs	r0, #12
   1b92e:	bc10      	pop	{r4}
   1b930:	4770      	bx	lr

0001b932 <ble_ll_scan_refresh_nrpa>:
{
   1b932:	b538      	push	{r3, r4, r5, lr}
   1b934:	4604      	mov	r4, r0
    return os_time_get();
   1b936:	f7f2 fd3b 	bl	e3b0 <os_time_get>
    if ((ble_npl_stime_t)(now - scansm->scan_nrpa_timer) >= 0) {
   1b93a:	68e3      	ldr	r3, [r4, #12]
   1b93c:	1ac3      	subs	r3, r0, r3
   1b93e:	2b00      	cmp	r3, #0
   1b940:	db0d      	blt.n	1b95e <ble_ll_scan_refresh_nrpa+0x2c>
   1b942:	4605      	mov	r5, r0
        ble_ll_rand_data_get(scansm->scan_nrpa, BLE_DEV_ADDR_LEN);
   1b944:	2106      	movs	r1, #6
   1b946:	f104 0010 	add.w	r0, r4, #16
   1b94a:	f7ff f8a3 	bl	1aa94 <ble_ll_rand_data_get>
        scansm->scan_nrpa[5] &= ~0xc0;
   1b94e:	7d63      	ldrb	r3, [r4, #21]
   1b950:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1b954:	7563      	strb	r3, [r4, #21]
        scansm->scan_nrpa_timer = now + ble_ll_resolv_get_rpa_tmo();
   1b956:	f7ff fb83 	bl	1b060 <ble_ll_resolv_get_rpa_tmo>
   1b95a:	4428      	add	r0, r5
   1b95c:	60e0      	str	r0, [r4, #12]
}
   1b95e:	bd38      	pop	{r3, r4, r5, pc}

0001b960 <ble_ll_scan_req_pdu_prepare>:
{
   1b960:	b570      	push	{r4, r5, r6, lr}
   1b962:	b082      	sub	sp, #8
   1b964:	4604      	mov	r4, r0
   1b966:	460e      	mov	r6, r1
    if (adv_addr_type) {
   1b968:	bb1a      	cbnz	r2, 1b9b2 <ble_ll_scan_req_pdu_prepare+0x52>
    hdr_byte = BLE_ADV_PDU_TYPE_SCAN_REQ;
   1b96a:	2503      	movs	r5, #3
    if (scansm->own_addr_type & 0x01) {
   1b96c:	7861      	ldrb	r1, [r4, #1]
   1b96e:	f011 0f01 	tst.w	r1, #1
   1b972:	d020      	beq.n	1b9b6 <ble_ll_scan_req_pdu_prepare+0x56>
        hdr_byte |= BLE_ADV_PDU_HDR_TXADD_RAND;
   1b974:	f045 0540 	orr.w	r5, r5, #64	; 0x40
        scana = g_random_addr;
   1b978:	4a13      	ldr	r2, [pc, #76]	; (1b9c8 <ble_ll_scan_req_pdu_prepare+0x68>)
    if (scansm->own_addr_type & 0x02) {
   1b97a:	f011 0f02 	tst.w	r1, #2
   1b97e:	d009      	beq.n	1b994 <ble_ll_scan_req_pdu_prepare+0x34>
        if (rl && rl->rl_has_local) {
   1b980:	b10b      	cbz	r3, 1b986 <ble_ll_scan_req_pdu_prepare+0x26>
   1b982:	789a      	ldrb	r2, [r3, #2]
   1b984:	b9ca      	cbnz	r2, 1b9ba <ble_ll_scan_req_pdu_prepare+0x5a>
            ble_ll_scan_refresh_nrpa(scansm);
   1b986:	4620      	mov	r0, r4
   1b988:	f7ff ffd3 	bl	1b932 <ble_ll_scan_refresh_nrpa>
            scana = scansm->scan_nrpa;
   1b98c:	f104 0210 	add.w	r2, r4, #16
        hdr_byte |= BLE_ADV_PDU_HDR_TXADD_RAND;
   1b990:	f045 0540 	orr.w	r5, r5, #64	; 0x40
    pdu_data->hdr_byte = hdr_byte;
   1b994:	75a5      	strb	r5, [r4, #22]
    memcpy(pdu_data->scana, scana, BLE_DEV_ADDR_LEN);
   1b996:	6813      	ldr	r3, [r2, #0]
   1b998:	f8c4 3017 	str.w	r3, [r4, #23]
   1b99c:	8893      	ldrh	r3, [r2, #4]
   1b99e:	f8a4 301b 	strh.w	r3, [r4, #27]
    memcpy(pdu_data->adva, adv_addr, BLE_DEV_ADDR_LEN);
   1b9a2:	6833      	ldr	r3, [r6, #0]
   1b9a4:	f8c4 301d 	str.w	r3, [r4, #29]
   1b9a8:	88b3      	ldrh	r3, [r6, #4]
   1b9aa:	f8a4 3021 	strh.w	r3, [r4, #33]	; 0x21
}
   1b9ae:	b002      	add	sp, #8
   1b9b0:	bd70      	pop	{r4, r5, r6, pc}
        hdr_byte |= BLE_ADV_PDU_HDR_RXADD_RAND;
   1b9b2:	2583      	movs	r5, #131	; 0x83
   1b9b4:	e7da      	b.n	1b96c <ble_ll_scan_req_pdu_prepare+0xc>
        scana = g_dev_addr;
   1b9b6:	4a05      	ldr	r2, [pc, #20]	; (1b9cc <ble_ll_scan_req_pdu_prepare+0x6c>)
   1b9b8:	e7df      	b.n	1b97a <ble_ll_scan_req_pdu_prepare+0x1a>
            ble_ll_resolv_get_priv_addr(rl, 1, rpa);
   1b9ba:	466a      	mov	r2, sp
   1b9bc:	2101      	movs	r1, #1
   1b9be:	4618      	mov	r0, r3
   1b9c0:	f7ff fb54 	bl	1b06c <ble_ll_resolv_get_priv_addr>
            scana = rpa;
   1b9c4:	466a      	mov	r2, sp
   1b9c6:	e7e3      	b.n	1b990 <ble_ll_scan_req_pdu_prepare+0x30>
   1b9c8:	200036cc 	.word	0x200036cc
   1b9cc:	200036d4 	.word	0x200036d4

0001b9d0 <ble_ll_scan_send_scan_req>:

static bool
ble_ll_scan_send_scan_req(uint8_t pdu_type, uint8_t *rxbuf,
                          struct ble_mbuf_hdr *hdr,
                          struct ble_ll_scan_addr_data *addrd)
{
   1b9d0:	b570      	push	{r4, r5, r6, lr}
   1b9d2:	4615      	mov	r5, r2
   1b9d4:	461c      	mov	r4, r3
        is_ext_adv = true;
    }
#endif

    /* Check if we already scanned this device successfully */
    if (ble_ll_scan_have_rxd_scan_rsp(addrd->adv_addr, addrd->adv_addr_type,
   1b9d6:	2300      	movs	r3, #0
   1b9d8:	461a      	mov	r2, r3
   1b9da:	7c21      	ldrb	r1, [r4, #16]
   1b9dc:	6960      	ldr	r0, [r4, #20]
   1b9de:	f7ff fe3d 	bl	1b65c <ble_ll_scan_have_rxd_scan_rsp>
   1b9e2:	bb40      	cbnz	r0, 1ba36 <ble_ll_scan_send_scan_req+0x66>
                                      is_ext_adv, adi)) {
        return false;
    }

    /* Better not be a scan response pending */
    BLE_LL_ASSERT(scansm->scan_rsp_pending == 0);
   1b9e4:	4b17      	ldr	r3, [pc, #92]	; (1ba44 <ble_ll_scan_send_scan_req+0x74>)
   1b9e6:	78db      	ldrb	r3, [r3, #3]
   1b9e8:	b9db      	cbnz	r3, 1ba22 <ble_ll_scan_send_scan_req+0x52>

    /* We want to send a request. See if backoff allows us */
    if (scansm->backoff_count > 0) {
   1b9ea:	4b16      	ldr	r3, [pc, #88]	; (1ba44 <ble_ll_scan_send_scan_req+0x74>)
   1b9ec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
   1b9ee:	b123      	cbz	r3, 1b9fa <ble_ll_scan_send_scan_req+0x2a>
        if (--scansm->backoff_count != 0) {
   1b9f0:	3b01      	subs	r3, #1
   1b9f2:	b29b      	uxth	r3, r3
   1b9f4:	4a13      	ldr	r2, [pc, #76]	; (1ba44 <ble_ll_scan_send_scan_req+0x74>)
   1b9f6:	84d3      	strh	r3, [r2, #38]	; 0x26
   1b9f8:	b9fb      	cbnz	r3, 1ba3a <ble_ll_scan_send_scan_req+0x6a>
        return false;
    }
#endif

    /* Use original AdvA in scan request (Core 5.1, Vol 6, Part B, section 6.3) */
    ble_ll_scan_req_pdu_prepare(scansm, addrd->adva, addrd->adva_type, addrd->rl);
   1b9fa:	4e12      	ldr	r6, [pc, #72]	; (1ba44 <ble_ll_scan_send_scan_req+0x74>)
   1b9fc:	69a3      	ldr	r3, [r4, #24]
   1b9fe:	7862      	ldrb	r2, [r4, #1]
   1ba00:	6861      	ldr	r1, [r4, #4]
   1ba02:	4630      	mov	r0, r6
   1ba04:	f7ff ffac 	bl	1b960 <ble_ll_scan_req_pdu_prepare>

    rc = ble_phy_tx(ble_ll_scan_req_tx_pdu_cb, scansm, BLE_PHY_TRANSITION_TX_RX);
   1ba08:	2202      	movs	r2, #2
   1ba0a:	4631      	mov	r1, r6
   1ba0c:	480e      	ldr	r0, [pc, #56]	; (1ba48 <ble_ll_scan_send_scan_req+0x78>)
   1ba0e:	f002 fc4f 	bl	1e2b0 <ble_phy_tx>
    if (rc) {
   1ba12:	b9a0      	cbnz	r0, 1ba3e <ble_ll_scan_send_scan_req+0x6e>
        return false;
    }

    scansm->scan_rsp_pending = 1;
   1ba14:	2001      	movs	r0, #1
   1ba16:	70f0      	strb	r0, [r6, #3]
    rxinfo->flags |= BLE_MBUF_HDR_F_SCAN_REQ_TXD;
   1ba18:	882b      	ldrh	r3, [r5, #0]
   1ba1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   1ba1e:	802b      	strh	r3, [r5, #0]
        scansm->cur_aux_data = ble_ll_scan_aux_data_ref(aux_data);
        STATS_INC(ble_ll_stats, aux_scan_req_tx);
    }
#endif

    return true;
   1ba20:	e00a      	b.n	1ba38 <ble_ll_scan_send_scan_req+0x68>
    BLE_LL_ASSERT(scansm->scan_rsp_pending == 0);
   1ba22:	f7f0 fbe1 	bl	c1e8 <hal_debugger_connected>
   1ba26:	b100      	cbz	r0, 1ba2a <ble_ll_scan_send_scan_req+0x5a>
   1ba28:	be01      	bkpt	0x0001
   1ba2a:	2300      	movs	r3, #0
   1ba2c:	461a      	mov	r2, r3
   1ba2e:	4619      	mov	r1, r3
   1ba30:	4618      	mov	r0, r3
   1ba32:	f7f1 f88d 	bl	cb50 <__assert_func>
        return false;
   1ba36:	2000      	movs	r0, #0
}
   1ba38:	bd70      	pop	{r4, r5, r6, pc}
            return false;
   1ba3a:	2000      	movs	r0, #0
   1ba3c:	e7fc      	b.n	1ba38 <ble_ll_scan_send_scan_req+0x68>
        return false;
   1ba3e:	2000      	movs	r0, #0
   1ba40:	e7fa      	b.n	1ba38 <ble_ll_scan_send_scan_req+0x68>
   1ba42:	bf00      	nop
   1ba44:	20001f10 	.word	0x20001f10
   1ba48:	0001b90d 	.word	0x0001b90d

0001ba4c <ble_ll_scan_timer_cb>:
 *
 * @param arg Pointer to scan state machine.
 */
void
ble_ll_scan_timer_cb(void *arg)
{
   1ba4c:	b508      	push	{r3, lr}
    struct ble_ll_scan_sm *scansm;

    scansm = (struct ble_ll_scan_sm *)arg;
    ble_ll_event_send(&scansm->scan_sched_ev);
   1ba4e:	302c      	adds	r0, #44	; 0x2c
   1ba50:	f7f9 f866 	bl	14b20 <ble_ll_event_send>
}
   1ba54:	bd08      	pop	{r3, pc}
	...

0001ba58 <ble_ll_scan_start>:
{
   1ba58:	b570      	push	{r4, r5, r6, lr}
   1ba5a:	b082      	sub	sp, #8
    struct ble_ll_scan_params *scanp = scansm->scanp;
   1ba5c:	6ec5      	ldr	r5, [r0, #108]	; 0x6c
    BLE_LL_ASSERT(scansm->scan_rsp_pending == 0);
   1ba5e:	78c3      	ldrb	r3, [r0, #3]
   1ba60:	2b00      	cmp	r3, #0
   1ba62:	d130      	bne.n	1bac6 <ble_ll_scan_start+0x6e>
   1ba64:	460c      	mov	r4, r1
    ble_ll_get_chan_to_scan(scansm, &scan_chan, &phy);
   1ba66:	466a      	mov	r2, sp
   1ba68:	f10d 0107 	add.w	r1, sp, #7
   1ba6c:	f7ff fd2c 	bl	1b4c8 <ble_ll_get_chan_to_scan>
    BLE_LL_ASSERT(!sch || scan_chan < BLE_PHY_ADV_CHAN_START);
   1ba70:	b11c      	cbz	r4, 1ba7a <ble_ll_scan_start+0x22>
   1ba72:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1ba76:	2b24      	cmp	r3, #36	; 0x24
   1ba78:	d82f      	bhi.n	1bada <ble_ll_scan_start+0x82>
    BLE_LL_ASSERT(sch || scan_chan >= BLE_PHY_ADV_CHAN_START);
   1ba7a:	2c00      	cmp	r4, #0
   1ba7c:	d037      	beq.n	1baee <ble_ll_scan_start+0x96>
    rc = ble_phy_setchan(scan_chan, BLE_ACCESS_ADDR_ADV, BLE_LL_CRCINIT_ADV);
   1ba7e:	4a39      	ldr	r2, [pc, #228]	; (1bb64 <ble_ll_scan_start+0x10c>)
   1ba80:	4939      	ldr	r1, [pc, #228]	; (1bb68 <ble_ll_scan_start+0x110>)
   1ba82:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1ba86:	f002 f9c1 	bl	1de0c <ble_phy_setchan>
    BLE_LL_ASSERT(rc == 0);
   1ba8a:	4606      	mov	r6, r0
   1ba8c:	2800      	cmp	r0, #0
   1ba8e:	d13c      	bne.n	1bb0a <ble_ll_scan_start+0xb2>
    ble_phy_set_txend_cb(NULL, NULL);
   1ba90:	2100      	movs	r1, #0
   1ba92:	4608      	mov	r0, r1
   1ba94:	f002 f978 	bl	1dd88 <ble_phy_set_txend_cb>
    ble_phy_encrypt_disable();
   1ba98:	f002 f960 	bl	1dd5c <ble_phy_encrypt_disable>
    if (ble_ll_resolv_enabled()) {
   1ba9c:	f7ff fba2 	bl	1b1e4 <ble_ll_resolv_enabled>
   1baa0:	2800      	cmp	r0, #0
   1baa2:	d03c      	beq.n	1bb1e <ble_ll_scan_start+0xc6>
        ble_phy_resolv_list_enable();
   1baa4:	f002 fcac 	bl	1e400 <ble_phy_resolv_list_enable>
    if (sch) {
   1baa8:	2c00      	cmp	r4, #0
   1baaa:	d03b      	beq.n	1bb24 <ble_ll_scan_start+0xcc>
        rc = ble_phy_rx_set_start_time(sch->start_time +
   1baac:	6863      	ldr	r3, [r4, #4]
   1baae:	4a2f      	ldr	r2, [pc, #188]	; (1bb6c <ble_ll_scan_start+0x114>)
   1bab0:	7810      	ldrb	r0, [r2, #0]
   1bab2:	78a1      	ldrb	r1, [r4, #2]
   1bab4:	4418      	add	r0, r3
   1bab6:	f002 fba5 	bl	1e204 <ble_phy_rx_set_start_time>
    if (!rc || rc == BLE_PHY_ERR_RX_LATE) {
   1baba:	2800      	cmp	r0, #0
   1babc:	d03b      	beq.n	1bb36 <ble_ll_scan_start+0xde>
   1babe:	2806      	cmp	r0, #6
   1bac0:	d039      	beq.n	1bb36 <ble_ll_scan_start+0xde>
   1bac2:	4606      	mov	r6, r0
    return rc;
   1bac4:	e043      	b.n	1bb4e <ble_ll_scan_start+0xf6>
    BLE_LL_ASSERT(scansm->scan_rsp_pending == 0);
   1bac6:	f7f0 fb8f 	bl	c1e8 <hal_debugger_connected>
   1baca:	b100      	cbz	r0, 1bace <ble_ll_scan_start+0x76>
   1bacc:	be01      	bkpt	0x0001
   1bace:	2300      	movs	r3, #0
   1bad0:	461a      	mov	r2, r3
   1bad2:	4619      	mov	r1, r3
   1bad4:	4618      	mov	r0, r3
   1bad6:	f7f1 f83b 	bl	cb50 <__assert_func>
    BLE_LL_ASSERT(!sch || scan_chan < BLE_PHY_ADV_CHAN_START);
   1bada:	f7f0 fb85 	bl	c1e8 <hal_debugger_connected>
   1bade:	b100      	cbz	r0, 1bae2 <ble_ll_scan_start+0x8a>
   1bae0:	be01      	bkpt	0x0001
   1bae2:	2300      	movs	r3, #0
   1bae4:	461a      	mov	r2, r3
   1bae6:	4619      	mov	r1, r3
   1bae8:	4618      	mov	r0, r3
   1baea:	f7f1 f831 	bl	cb50 <__assert_func>
    BLE_LL_ASSERT(sch || scan_chan >= BLE_PHY_ADV_CHAN_START);
   1baee:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1baf2:	2b24      	cmp	r3, #36	; 0x24
   1baf4:	d8c3      	bhi.n	1ba7e <ble_ll_scan_start+0x26>
   1baf6:	f7f0 fb77 	bl	c1e8 <hal_debugger_connected>
   1bafa:	b100      	cbz	r0, 1bafe <ble_ll_scan_start+0xa6>
   1bafc:	be01      	bkpt	0x0001
   1bafe:	2300      	movs	r3, #0
   1bb00:	461a      	mov	r2, r3
   1bb02:	4619      	mov	r1, r3
   1bb04:	4618      	mov	r0, r3
   1bb06:	f7f1 f823 	bl	cb50 <__assert_func>
    BLE_LL_ASSERT(rc == 0);
   1bb0a:	f7f0 fb6d 	bl	c1e8 <hal_debugger_connected>
   1bb0e:	b100      	cbz	r0, 1bb12 <ble_ll_scan_start+0xba>
   1bb10:	be01      	bkpt	0x0001
   1bb12:	2300      	movs	r3, #0
   1bb14:	461a      	mov	r2, r3
   1bb16:	4619      	mov	r1, r3
   1bb18:	4618      	mov	r0, r3
   1bb1a:	f7f1 f819 	bl	cb50 <__assert_func>
        ble_phy_resolv_list_disable();
   1bb1e:	f002 fc7f 	bl	1e420 <ble_phy_resolv_list_disable>
   1bb22:	e7c1      	b.n	1baa8 <ble_ll_scan_start+0x50>
        rc = ble_phy_rx_set_start_time(os_cputime_get32() +
   1bb24:	f013 f9c3 	bl	2eeae <os_cputime_get32>
   1bb28:	4b10      	ldr	r3, [pc, #64]	; (1bb6c <ble_ll_scan_start+0x114>)
   1bb2a:	781b      	ldrb	r3, [r3, #0]
   1bb2c:	2100      	movs	r1, #0
   1bb2e:	4418      	add	r0, r3
   1bb30:	f002 fb68 	bl	1e204 <ble_phy_rx_set_start_time>
   1bb34:	e7c1      	b.n	1baba <ble_ll_scan_start+0x62>
        if (scanp->scan_filt_policy & 1) {
   1bb36:	78ab      	ldrb	r3, [r5, #2]
   1bb38:	f013 0f01 	tst.w	r3, #1
   1bb3c:	d00a      	beq.n	1bb54 <ble_ll_scan_start+0xfc>
            ble_ll_whitelist_enable();
   1bb3e:	f001 fc0b 	bl	1d358 <ble_ll_whitelist_enable>
        if (scanp->scan_type == BLE_SCAN_TYPE_INITIATE) {
   1bb42:	792b      	ldrb	r3, [r5, #4]
   1bb44:	2b02      	cmp	r3, #2
   1bb46:	d008      	beq.n	1bb5a <ble_ll_scan_start+0x102>
            ble_ll_state_set(BLE_LL_STATE_SCANNING);
   1bb48:	2002      	movs	r0, #2
   1bb4a:	f7f8 ffdd 	bl	14b08 <ble_ll_state_set>
}
   1bb4e:	4630      	mov	r0, r6
   1bb50:	b002      	add	sp, #8
   1bb52:	bd70      	pop	{r4, r5, r6, pc}
            ble_ll_whitelist_disable();
   1bb54:	f001 fc04 	bl	1d360 <ble_ll_whitelist_disable>
   1bb58:	e7f3      	b.n	1bb42 <ble_ll_scan_start+0xea>
            ble_ll_state_set(BLE_LL_STATE_INITIATING);
   1bb5a:	2003      	movs	r0, #3
   1bb5c:	f7f8 ffd4 	bl	14b08 <ble_ll_state_set>
   1bb60:	e7f5      	b.n	1bb4e <ble_ll_scan_start+0xf6>
   1bb62:	bf00      	nop
   1bb64:	00555555 	.word	0x00555555
   1bb68:	8e89bed6 	.word	0x8e89bed6
   1bb6c:	20003c30 	.word	0x20003c30

0001bb70 <ble_ll_scan_rx_pkt_in_restore_addr_data>:
#endif

static void
ble_ll_scan_rx_pkt_in_restore_addr_data(struct ble_mbuf_hdr *hdr,
                                        struct ble_ll_scan_addr_data *addrd)
{
   1bb70:	b538      	push	{r3, r4, r5, lr}
    struct ble_ll_scan_sm *scansm = &g_ble_ll_scan_sm;
    struct ble_mbuf_hdr_rxinfo *rxinfo = &hdr->rxinfo;
    struct ble_ll_resolv_entry *rl;
#endif

    addrd->adv_addr = addrd->adva;
   1bb72:	684b      	ldr	r3, [r1, #4]
   1bb74:	614b      	str	r3, [r1, #20]
    addrd->adv_addr_type = addrd->adva_type;
   1bb76:	784b      	ldrb	r3, [r1, #1]
   1bb78:	740b      	strb	r3, [r1, #16]

#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LL_PRIVACY)
    if (rxinfo->rpa_index >= 0) {
   1bb7a:	f990 2007 	ldrsb.w	r2, [r0, #7]
   1bb7e:	2a00      	cmp	r2, #0
   1bb80:	db0c      	blt.n	1bb9c <ble_ll_scan_rx_pkt_in_restore_addr_data+0x2c>
        rl = &g_ble_ll_resolv_list[rxinfo->rpa_index];
   1bb82:	2336      	movs	r3, #54	; 0x36
   1bb84:	fb03 f302 	mul.w	r3, r3, r2
   1bb88:	4c0d      	ldr	r4, [pc, #52]	; (1bbc0 <ble_ll_scan_rx_pkt_in_restore_addr_data+0x50>)
   1bb8a:	191d      	adds	r5, r3, r4
        addrd->adv_addr = rl->rl_identity_addr;
   1bb8c:	f103 0220 	add.w	r2, r3, #32
   1bb90:	4422      	add	r2, r4
   1bb92:	3204      	adds	r2, #4
   1bb94:	614a      	str	r2, [r1, #20]
        addrd->adv_addr_type = rl->rl_addr_type;
   1bb96:	5d1b      	ldrb	r3, [r3, r4]
   1bb98:	740b      	strb	r3, [r1, #16]
        addrd->rl = rl;
   1bb9a:	618d      	str	r5, [r1, #24]
    }
    if (hdr->rxinfo.flags & BLE_MBUF_HDR_F_TARGETA_RESOLVED) {
   1bb9c:	8803      	ldrh	r3, [r0, #0]
   1bb9e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   1bba2:	d100      	bne.n	1bba6 <ble_ll_scan_rx_pkt_in_restore_addr_data+0x36>
        addrd->targeta = ble_ll_get_our_devaddr(scansm->own_addr_type & 1);
        addrd->targeta_type = scansm->own_addr_type & 1;
    }
#endif
}
   1bba4:	bd38      	pop	{r3, r4, r5, pc}
   1bba6:	460c      	mov	r4, r1
        addrd->targeta = ble_ll_get_our_devaddr(scansm->own_addr_type & 1);
   1bba8:	4d06      	ldr	r5, [pc, #24]	; (1bbc4 <ble_ll_scan_rx_pkt_in_restore_addr_data+0x54>)
   1bbaa:	7868      	ldrb	r0, [r5, #1]
   1bbac:	f000 0001 	and.w	r0, r0, #1
   1bbb0:	f7f8 fe96 	bl	148e0 <ble_ll_get_our_devaddr>
   1bbb4:	60e0      	str	r0, [r4, #12]
        addrd->targeta_type = scansm->own_addr_type & 1;
   1bbb6:	786b      	ldrb	r3, [r5, #1]
   1bbb8:	f003 0301 	and.w	r3, r3, #1
   1bbbc:	7223      	strb	r3, [r4, #8]
}
   1bbbe:	e7f1      	b.n	1bba4 <ble_ll_scan_rx_pkt_in_restore_addr_data+0x34>
   1bbc0:	20003ae0 	.word	0x20003ae0
   1bbc4:	20001f10 	.word	0x20001f10

0001bbc8 <ble_ll_scan_dup_check_legacy>:
{
   1bbc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bbca:	460e      	mov	r6, r1
   1bbcc:	4617      	mov	r7, r2
    type = BLE_LL_SCAN_ENTRY_TYPE_LEGACY(addr_type);
   1bbce:	f000 0501 	and.w	r5, r0, #1
    TAILQ_FOREACH(e, &g_scan_dup_list, link) {
   1bbd2:	4b39      	ldr	r3, [pc, #228]	; (1bcb8 <ble_ll_scan_dup_check_legacy+0xf0>)
   1bbd4:	681c      	ldr	r4, [r3, #0]
   1bbd6:	e000      	b.n	1bbda <ble_ll_scan_dup_check_legacy+0x12>
   1bbd8:	68a4      	ldr	r4, [r4, #8]
   1bbda:	b14c      	cbz	r4, 1bbf0 <ble_ll_scan_dup_check_legacy+0x28>
        if ((e->type == type) && !memcmp(e->addr, addr, 6)) {
   1bbdc:	7823      	ldrb	r3, [r4, #0]
   1bbde:	42ab      	cmp	r3, r5
   1bbe0:	d1fa      	bne.n	1bbd8 <ble_ll_scan_dup_check_legacy+0x10>
   1bbe2:	2206      	movs	r2, #6
   1bbe4:	4631      	mov	r1, r6
   1bbe6:	1c60      	adds	r0, r4, #1
   1bbe8:	f7f2 feb6 	bl	e958 <memcmp>
   1bbec:	2800      	cmp	r0, #0
   1bbee:	d1f3      	bne.n	1bbd8 <ble_ll_scan_dup_check_legacy+0x10>
    if (e) {
   1bbf0:	2c00      	cmp	r4, #0
   1bbf2:	d02d      	beq.n	1bc50 <ble_ll_scan_dup_check_legacy+0x88>
        if (pdu_type == BLE_ADV_PDU_TYPE_ADV_DIRECT_IND) {
   1bbf4:	2f01      	cmp	r7, #1
   1bbf6:	d01a      	beq.n	1bc2e <ble_ll_scan_dup_check_legacy+0x66>
        } else if (pdu_type == BLE_ADV_PDU_TYPE_SCAN_RSP) {
   1bbf8:	2f04      	cmp	r7, #4
   1bbfa:	d01c      	beq.n	1bc36 <ble_ll_scan_dup_check_legacy+0x6e>
            rc = e->flags & BLE_LL_SCAN_DUP_F_ADV_REPORT_SENT;
   1bbfc:	79e0      	ldrb	r0, [r4, #7]
   1bbfe:	f000 0001 	and.w	r0, r0, #1
    if (e != TAILQ_FIRST(&g_scan_dup_list)) {
   1bc02:	4b2d      	ldr	r3, [pc, #180]	; (1bcb8 <ble_ll_scan_dup_check_legacy+0xf0>)
   1bc04:	681b      	ldr	r3, [r3, #0]
   1bc06:	429c      	cmp	r4, r3
   1bc08:	d010      	beq.n	1bc2c <ble_ll_scan_dup_check_legacy+0x64>
        TAILQ_REMOVE(&g_scan_dup_list, e, link);
   1bc0a:	68a3      	ldr	r3, [r4, #8]
   1bc0c:	b1bb      	cbz	r3, 1bc3e <ble_ll_scan_dup_check_legacy+0x76>
   1bc0e:	68e2      	ldr	r2, [r4, #12]
   1bc10:	60da      	str	r2, [r3, #12]
   1bc12:	68e3      	ldr	r3, [r4, #12]
   1bc14:	68a2      	ldr	r2, [r4, #8]
   1bc16:	601a      	str	r2, [r3, #0]
        TAILQ_INSERT_HEAD(&g_scan_dup_list, e, link);
   1bc18:	4b27      	ldr	r3, [pc, #156]	; (1bcb8 <ble_ll_scan_dup_check_legacy+0xf0>)
   1bc1a:	681b      	ldr	r3, [r3, #0]
   1bc1c:	60a3      	str	r3, [r4, #8]
   1bc1e:	b193      	cbz	r3, 1bc46 <ble_ll_scan_dup_check_legacy+0x7e>
   1bc20:	f104 0208 	add.w	r2, r4, #8
   1bc24:	60da      	str	r2, [r3, #12]
   1bc26:	4b24      	ldr	r3, [pc, #144]	; (1bcb8 <ble_ll_scan_dup_check_legacy+0xf0>)
   1bc28:	601c      	str	r4, [r3, #0]
   1bc2a:	60e3      	str	r3, [r4, #12]
}
   1bc2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            rc = e->flags & BLE_LL_SCAN_DUP_F_DIR_ADV_REPORT_SENT;
   1bc2e:	79e0      	ldrb	r0, [r4, #7]
   1bc30:	f000 0002 	and.w	r0, r0, #2
   1bc34:	e7e5      	b.n	1bc02 <ble_ll_scan_dup_check_legacy+0x3a>
            rc = e->flags & BLE_LL_SCAN_DUP_F_SCAN_RSP_SENT;
   1bc36:	79e0      	ldrb	r0, [r4, #7]
   1bc38:	f000 0004 	and.w	r0, r0, #4
   1bc3c:	e7e1      	b.n	1bc02 <ble_ll_scan_dup_check_legacy+0x3a>
        TAILQ_REMOVE(&g_scan_dup_list, e, link);
   1bc3e:	68e2      	ldr	r2, [r4, #12]
   1bc40:	4b1d      	ldr	r3, [pc, #116]	; (1bcb8 <ble_ll_scan_dup_check_legacy+0xf0>)
   1bc42:	605a      	str	r2, [r3, #4]
   1bc44:	e7e5      	b.n	1bc12 <ble_ll_scan_dup_check_legacy+0x4a>
        TAILQ_INSERT_HEAD(&g_scan_dup_list, e, link);
   1bc46:	f104 0308 	add.w	r3, r4, #8
   1bc4a:	4a1b      	ldr	r2, [pc, #108]	; (1bcb8 <ble_ll_scan_dup_check_legacy+0xf0>)
   1bc4c:	6053      	str	r3, [r2, #4]
   1bc4e:	e7ea      	b.n	1bc26 <ble_ll_scan_dup_check_legacy+0x5e>
    e = os_memblock_get(&g_scan_dup_pool);
   1bc50:	481a      	ldr	r0, [pc, #104]	; (1bcbc <ble_ll_scan_dup_check_legacy+0xf4>)
   1bc52:	f7f1 ffdb 	bl	dc0c <os_memblock_get>
    if (!e) {
   1bc56:	4603      	mov	r3, r0
   1bc58:	b1c8      	cbz	r0, 1bc8e <ble_ll_scan_dup_check_legacy+0xc6>
    memset(e, 0, sizeof(*e));
   1bc5a:	2200      	movs	r2, #0
   1bc5c:	601a      	str	r2, [r3, #0]
   1bc5e:	605a      	str	r2, [r3, #4]
   1bc60:	609a      	str	r2, [r3, #8]
   1bc62:	60da      	str	r2, [r3, #12]
        e->flags = 0;
   1bc64:	71da      	strb	r2, [r3, #7]
        e->type = type;
   1bc66:	461a      	mov	r2, r3
   1bc68:	f802 5b01 	strb.w	r5, [r2], #1
        memcpy(e->addr, addr, 6);
   1bc6c:	6831      	ldr	r1, [r6, #0]
   1bc6e:	f8c3 1001 	str.w	r1, [r3, #1]
   1bc72:	88b1      	ldrh	r1, [r6, #4]
   1bc74:	8091      	strh	r1, [r2, #4]
        TAILQ_INSERT_HEAD(&g_scan_dup_list, e, link);
   1bc76:	4a10      	ldr	r2, [pc, #64]	; (1bcb8 <ble_ll_scan_dup_check_legacy+0xf0>)
   1bc78:	6812      	ldr	r2, [r2, #0]
   1bc7a:	609a      	str	r2, [r3, #8]
   1bc7c:	b1ba      	cbz	r2, 1bcae <ble_ll_scan_dup_check_legacy+0xe6>
   1bc7e:	f103 0108 	add.w	r1, r3, #8
   1bc82:	60d1      	str	r1, [r2, #12]
   1bc84:	4a0c      	ldr	r2, [pc, #48]	; (1bcb8 <ble_ll_scan_dup_check_legacy+0xf0>)
   1bc86:	6013      	str	r3, [r2, #0]
   1bc88:	60da      	str	r2, [r3, #12]
        rc = 0;
   1bc8a:	2000      	movs	r0, #0
    return rc;
   1bc8c:	e7ce      	b.n	1bc2c <ble_ll_scan_dup_check_legacy+0x64>
        e = TAILQ_LAST(&g_scan_dup_list, ble_ll_scan_dup_list);
   1bc8e:	4b0a      	ldr	r3, [pc, #40]	; (1bcb8 <ble_ll_scan_dup_check_legacy+0xf0>)
   1bc90:	685b      	ldr	r3, [r3, #4]
   1bc92:	685b      	ldr	r3, [r3, #4]
   1bc94:	681b      	ldr	r3, [r3, #0]
        TAILQ_REMOVE(&g_scan_dup_list, e, link);
   1bc96:	689a      	ldr	r2, [r3, #8]
   1bc98:	b12a      	cbz	r2, 1bca6 <ble_ll_scan_dup_check_legacy+0xde>
   1bc9a:	68d9      	ldr	r1, [r3, #12]
   1bc9c:	60d1      	str	r1, [r2, #12]
   1bc9e:	68da      	ldr	r2, [r3, #12]
   1bca0:	6899      	ldr	r1, [r3, #8]
   1bca2:	6011      	str	r1, [r2, #0]
   1bca4:	e7d9      	b.n	1bc5a <ble_ll_scan_dup_check_legacy+0x92>
   1bca6:	68d9      	ldr	r1, [r3, #12]
   1bca8:	4a03      	ldr	r2, [pc, #12]	; (1bcb8 <ble_ll_scan_dup_check_legacy+0xf0>)
   1bcaa:	6051      	str	r1, [r2, #4]
   1bcac:	e7f7      	b.n	1bc9e <ble_ll_scan_dup_check_legacy+0xd6>
        TAILQ_INSERT_HEAD(&g_scan_dup_list, e, link);
   1bcae:	f103 0208 	add.w	r2, r3, #8
   1bcb2:	4901      	ldr	r1, [pc, #4]	; (1bcb8 <ble_ll_scan_dup_check_legacy+0xf0>)
   1bcb4:	604a      	str	r2, [r1, #4]
   1bcb6:	e7e5      	b.n	1bc84 <ble_ll_scan_dup_check_legacy+0xbc>
   1bcb8:	20001f98 	.word	0x20001f98
   1bcbc:	20002020 	.word	0x20002020

0001bcc0 <ble_ll_hci_send_dir_adv_report>:
{
   1bcc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bcc2:	4605      	mov	r5, r0
   1bcc4:	460f      	mov	r7, r1
   1bcc6:	4614      	mov	r4, r2
   1bcc8:	461e      	mov	r6, r3
    if (!ble_ll_hci_is_le_event_enabled(BLE_HCI_LE_SUBEV_DIRECT_ADV_RPT)) {
   1bcca:	200b      	movs	r0, #11
   1bccc:	f7fe fcc0 	bl	1a650 <ble_ll_hci_is_le_event_enabled>
   1bcd0:	b1f8      	cbz	r0, 1bd12 <ble_ll_hci_send_dir_adv_report+0x52>
    hci_ev = (void *) ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_LO);
   1bcd2:	2001      	movs	r0, #1
   1bcd4:	f00e fab4 	bl	2a240 <ble_hci_trans_buf_alloc>
    if (!hci_ev) {
   1bcd8:	b1f0      	cbz	r0, 1bd18 <ble_ll_hci_send_dir_adv_report+0x58>
    hci_ev->opcode = BLE_HCI_EVCODE_LE_META;
   1bcda:	223e      	movs	r2, #62	; 0x3e
   1bcdc:	7002      	strb	r2, [r0, #0]
    hci_ev->length = sizeof(*ev) + sizeof(*(ev->reports));
   1bcde:	2212      	movs	r2, #18
   1bce0:	7042      	strb	r2, [r0, #1]
    ev->subev_code = BLE_HCI_LE_SUBEV_DIRECT_ADV_RPT;
   1bce2:	220b      	movs	r2, #11
   1bce4:	7082      	strb	r2, [r0, #2]
    ev->num_reports = 1;
   1bce6:	2201      	movs	r2, #1
   1bce8:	70c2      	strb	r2, [r0, #3]
    ev->reports[0].type = BLE_HCI_ADV_RPT_EVTYPE_DIR_IND;
   1bcea:	7102      	strb	r2, [r0, #4]
    ev->reports[0].addr_type = addr_type;
   1bcec:	7147      	strb	r7, [r0, #5]
    memcpy(ev->reports[0].addr, addr, BLE_DEV_ADDR_LEN);
   1bcee:	682a      	ldr	r2, [r5, #0]
   1bcf0:	f8c0 2006 	str.w	r2, [r0, #6]
   1bcf4:	88aa      	ldrh	r2, [r5, #4]
   1bcf6:	8142      	strh	r2, [r0, #10]
    ev->reports[0].dir_addr_type = inita_type;
   1bcf8:	7306      	strb	r6, [r0, #12]
    memcpy(ev->reports[0].dir_addr, inita, BLE_DEV_ADDR_LEN);
   1bcfa:	6822      	ldr	r2, [r4, #0]
   1bcfc:	f8c0 200d 	str.w	r2, [r0, #13]
   1bd00:	88a2      	ldrh	r2, [r4, #4]
   1bd02:	f8a0 2011 	strh.w	r2, [r0, #17]
    ev->reports[0].rssi = rssi;
   1bd06:	f99d 2018 	ldrsb.w	r2, [sp, #24]
   1bd0a:	74c2      	strb	r2, [r0, #19]
    return ble_ll_hci_event_send(hci_ev);
   1bd0c:	f7fe fbe8 	bl	1a4e0 <ble_ll_hci_event_send>
}
   1bd10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return -1;
   1bd12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1bd16:	e7fb      	b.n	1bd10 <ble_ll_hci_send_dir_adv_report+0x50>
        return -1;
   1bd18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1bd1c:	e7f8      	b.n	1bd10 <ble_ll_hci_send_dir_adv_report+0x50>
	...

0001bd20 <ble_ll_hci_send_adv_report>:
{
   1bd20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1bd24:	4681      	mov	r9, r0
   1bd26:	460e      	mov	r6, r1
   1bd28:	4690      	mov	r8, r2
   1bd2a:	461f      	mov	r7, r3
   1bd2c:	f89d 5020 	ldrb.w	r5, [sp, #32]
    if (!ble_ll_hci_is_le_event_enabled(BLE_HCI_LE_SUBEV_ADV_RPT)) {
   1bd30:	2002      	movs	r0, #2
   1bd32:	f7fe fc8d 	bl	1a650 <ble_ll_hci_is_le_event_enabled>
   1bd36:	b3a8      	cbz	r0, 1bda4 <ble_ll_hci_send_adv_report+0x84>
    if ((sizeof(*ev) + sizeof(ev->reports[0]) + adv_data_len + 1) > BLE_HCI_MAX_DATA_LEN) {
   1bd38:	f105 030c 	add.w	r3, r5, #12
   1bd3c:	2b44      	cmp	r3, #68	; 0x44
   1bd3e:	d828      	bhi.n	1bd92 <ble_ll_hci_send_adv_report+0x72>
    hci_ev = (void *) ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_LO);
   1bd40:	2001      	movs	r0, #1
   1bd42:	f00e fa7d 	bl	2a240 <ble_hci_trans_buf_alloc>
    if (!hci_ev) {
   1bd46:	4604      	mov	r4, r0
   1bd48:	b378      	cbz	r0, 1bdaa <ble_ll_hci_send_adv_report+0x8a>
    hci_ev->opcode = BLE_HCI_EVCODE_LE_META;
   1bd4a:	233e      	movs	r3, #62	; 0x3e
   1bd4c:	7003      	strb	r3, [r0, #0]
    hci_ev->length = sizeof(*ev) + sizeof(ev->reports[0]) + adv_data_len + 1;
   1bd4e:	f105 030c 	add.w	r3, r5, #12
   1bd52:	7043      	strb	r3, [r0, #1]
    ev = (void *) hci_ev->data;
   1bd54:	f100 0a02 	add.w	sl, r0, #2
    ev->subev_code = BLE_HCI_LE_SUBEV_ADV_RPT;
   1bd58:	2302      	movs	r3, #2
   1bd5a:	7083      	strb	r3, [r0, #2]
    ev->num_reports = 1;
   1bd5c:	2301      	movs	r3, #1
   1bd5e:	70c3      	strb	r3, [r0, #3]
    ev->reports[0].type = evtype;
   1bd60:	f880 9004 	strb.w	r9, [r0, #4]
    ev->reports[0].addr_type = addr_type;
   1bd64:	f880 8005 	strb.w	r8, [r0, #5]
    memcpy(ev->reports[0].addr, addr, BLE_DEV_ADDR_LEN);
   1bd68:	6833      	ldr	r3, [r6, #0]
   1bd6a:	f8c0 3006 	str.w	r3, [r0, #6]
   1bd6e:	88b3      	ldrh	r3, [r6, #4]
   1bd70:	8143      	strh	r3, [r0, #10]
    ev->reports[0].data_len = adv_data_len;
   1bd72:	7305      	strb	r5, [r0, #12]
    os_mbuf_copydata(adv_data, 0, adv_data_len, ev->reports[0].data);
   1bd74:	f100 030d 	add.w	r3, r0, #13
   1bd78:	462a      	mov	r2, r5
   1bd7a:	2100      	movs	r1, #0
   1bd7c:	9809      	ldr	r0, [sp, #36]	; 0x24
   1bd7e:	f7f1 fbfa 	bl	d576 <os_mbuf_copydata>
    ev_rssi = (int8_t *) (hci_ev->data + sizeof(*ev) + sizeof(ev->reports[0]) + adv_data_len);
   1bd82:	350b      	adds	r5, #11
    *ev_rssi = rssi;
   1bd84:	f80a 7005 	strb.w	r7, [sl, r5]
    return ble_ll_hci_event_send(hci_ev);
   1bd88:	4620      	mov	r0, r4
   1bd8a:	f7fe fba9 	bl	1a4e0 <ble_ll_hci_event_send>
}
   1bd8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        STATS_INC(ble_ll_stats, adv_evt_dropped);
   1bd92:	4a07      	ldr	r2, [pc, #28]	; (1bdb0 <ble_ll_hci_send_adv_report+0x90>)
   1bd94:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
   1bd98:	3301      	adds	r3, #1
   1bd9a:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
        return -1;
   1bd9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1bda2:	e7f4      	b.n	1bd8e <ble_ll_hci_send_adv_report+0x6e>
        return -1;
   1bda4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1bda8:	e7f1      	b.n	1bd8e <ble_ll_hci_send_adv_report+0x6e>
        return -1;
   1bdaa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1bdae:	e7ee      	b.n	1bd8e <ble_ll_hci_send_adv_report+0x6e>
   1bdb0:	200035c0 	.word	0x200035c0

0001bdb4 <ble_ll_scan_send_adv_report>:
{
   1bdb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bdb8:	b085      	sub	sp, #20
   1bdba:	4605      	mov	r5, r0
   1bdbc:	468a      	mov	sl, r1
   1bdbe:	4616      	mov	r6, r2
   1bdc0:	9303      	str	r3, [sp, #12]
   1bdc2:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
   1bdc6:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
   1bdca:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
    if (pdu_type == BLE_ADV_PDU_TYPE_ADV_DIRECT_IND) {
   1bdce:	2801      	cmp	r0, #1
   1bdd0:	d030      	beq.n	1be34 <ble_ll_scan_send_adv_report+0x80>
        if (pdu_type == BLE_ADV_PDU_TYPE_ADV_IND) {
   1bdd2:	b120      	cbz	r0, 1bdde <ble_ll_scan_send_adv_report+0x2a>
        } else if (pdu_type == BLE_ADV_PDU_TYPE_ADV_SCAN_IND) {
   1bdd4:	2806      	cmp	r0, #6
   1bdd6:	d038      	beq.n	1be4a <ble_ll_scan_send_adv_report+0x96>
        } else if (pdu_type == BLE_ADV_PDU_TYPE_ADV_NONCONN_IND) {
   1bdd8:	2802      	cmp	r0, #2
   1bdda:	d034      	beq.n	1be46 <ble_ll_scan_send_adv_report+0x92>
            evtype = BLE_HCI_ADV_RPT_EVTYPE_SCAN_RSP;
   1bddc:	2504      	movs	r5, #4
        adv_data_len = om->om_data[1] - BLE_DEV_ADDR_LEN;
   1bdde:	f8d8 3000 	ldr.w	r3, [r8]
   1bde2:	785c      	ldrb	r4, [r3, #1]
   1bde4:	3c06      	subs	r4, #6
   1bde6:	b2e4      	uxtb	r4, r4
        os_mbuf_adj(om, BLE_LL_PDU_HDR_LEN + BLE_DEV_ADDR_LEN);
   1bde8:	2108      	movs	r1, #8
   1bdea:	4640      	mov	r0, r8
   1bdec:	f7f1 fbf0 	bl	d5d0 <os_mbuf_adj>
    uint8_t subev = BLE_HCI_LE_SUBEV_ADV_RPT;
   1bdf0:	f04f 0b02 	mov.w	fp, #2
    if (BLE_MBUF_HDR_RESOLVED(hdr)) {
   1bdf4:	f8b9 3000 	ldrh.w	r3, [r9]
   1bdf8:	f413 6f80 	tst.w	r3, #1024	; 0x400
   1bdfc:	d001      	beq.n	1be02 <ble_ll_scan_send_adv_report+0x4e>
        adva_type += 2;
   1bdfe:	3602      	adds	r6, #2
   1be00:	b2f6      	uxtb	r6, r6
    if (BLE_MBUF_HDR_TARGETA_RESOLVED(hdr)) {
   1be02:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   1be06:	d001      	beq.n	1be0c <ble_ll_scan_send_adv_report+0x58>
        inita_type += 2;
   1be08:	3702      	adds	r7, #2
   1be0a:	b2ff      	uxtb	r7, r7
    if (subev == BLE_HCI_LE_SUBEV_DIRECT_ADV_RPT) {
   1be0c:	f1bb 0f0b 	cmp.w	fp, #11
   1be10:	d021      	beq.n	1be56 <ble_ll_scan_send_adv_report+0xa2>
    rc = ble_ll_hci_send_adv_report(evtype, adva, adva_type, hdr->rxinfo.rssi,
   1be12:	f999 3004 	ldrsb.w	r3, [r9, #4]
   1be16:	f8cd 8004 	str.w	r8, [sp, #4]
   1be1a:	9400      	str	r4, [sp, #0]
   1be1c:	4632      	mov	r2, r6
   1be1e:	4651      	mov	r1, sl
   1be20:	4628      	mov	r0, r5
   1be22:	f7ff ff7d 	bl	1bd20 <ble_ll_hci_send_adv_report>
    if (!rc && scansm->scan_filt_dups) {
   1be26:	b910      	cbnz	r0, 1be2e <ble_ll_scan_send_adv_report+0x7a>
   1be28:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1be2a:	789b      	ldrb	r3, [r3, #2]
   1be2c:	b9eb      	cbnz	r3, 1be6a <ble_ll_scan_send_adv_report+0xb6>
}
   1be2e:	b005      	add	sp, #20
   1be30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (ble_ll_is_rpa(inita, inita_type)) {
   1be34:	4639      	mov	r1, r7
   1be36:	4618      	mov	r0, r3
   1be38:	f7f8 fc91 	bl	1475e <ble_ll_is_rpa>
   1be3c:	b938      	cbnz	r0, 1be4e <ble_ll_scan_send_adv_report+0x9a>
        adv_data_len = 0;
   1be3e:	2400      	movs	r4, #0
    uint8_t subev = BLE_HCI_LE_SUBEV_ADV_RPT;
   1be40:	f04f 0b02 	mov.w	fp, #2
   1be44:	e7d6      	b.n	1bdf4 <ble_ll_scan_send_adv_report+0x40>
            evtype = BLE_HCI_ADV_RPT_EVTYPE_NONCONN_IND;
   1be46:	2503      	movs	r5, #3
   1be48:	e7c9      	b.n	1bdde <ble_ll_scan_send_adv_report+0x2a>
            evtype = BLE_HCI_ADV_RPT_EVTYPE_SCAN_IND;
   1be4a:	2502      	movs	r5, #2
   1be4c:	e7c7      	b.n	1bdde <ble_ll_scan_send_adv_report+0x2a>
        adv_data_len = 0;
   1be4e:	2400      	movs	r4, #0
            subev = BLE_HCI_LE_SUBEV_DIRECT_ADV_RPT;
   1be50:	f04f 0b0b 	mov.w	fp, #11
   1be54:	e7ce      	b.n	1bdf4 <ble_ll_scan_send_adv_report+0x40>
        rc = ble_ll_hci_send_dir_adv_report(adva, adva_type, inita, inita_type,
   1be56:	f999 3004 	ldrsb.w	r3, [r9, #4]
   1be5a:	9300      	str	r3, [sp, #0]
   1be5c:	463b      	mov	r3, r7
   1be5e:	9a03      	ldr	r2, [sp, #12]
   1be60:	4631      	mov	r1, r6
   1be62:	4650      	mov	r0, sl
   1be64:	f7ff ff2c 	bl	1bcc0 <ble_ll_hci_send_dir_adv_report>
        goto done;
   1be68:	e7dd      	b.n	1be26 <ble_ll_scan_send_adv_report+0x72>
        ble_ll_scan_dup_update_legacy(adva_type, adva, subev, evtype);
   1be6a:	462b      	mov	r3, r5
   1be6c:	465a      	mov	r2, fp
   1be6e:	4651      	mov	r1, sl
   1be70:	4630      	mov	r0, r6
   1be72:	f7ff fc2d 	bl	1b6d0 <ble_ll_scan_dup_update_legacy>
}
   1be76:	e7da      	b.n	1be2e <ble_ll_scan_send_adv_report+0x7a>

0001be78 <ble_ll_scan_rx_pkt_in_on_legacy>:

static void
ble_ll_scan_rx_pkt_in_on_legacy(uint8_t pdu_type, struct os_mbuf *om,
                                struct ble_mbuf_hdr *hdr,
                                struct ble_ll_scan_addr_data *addrd)
{
   1be78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1be7c:	b084      	sub	sp, #16
    struct ble_ll_scan_sm *scansm = &g_ble_ll_scan_sm;
    uint8_t *rxbuf = om->om_data;
   1be7e:	680e      	ldr	r6, [r1, #0]
    bool send_hci_report;


    if (!BLE_MBUF_HDR_DEVMATCH(hdr) ||
   1be80:	8814      	ldrh	r4, [r2, #0]
   1be82:	f004 05c0 	and.w	r5, r4, #192	; 0xc0
   1be86:	2dc0      	cmp	r5, #192	; 0xc0
   1be88:	d002      	beq.n	1be90 <ble_ll_scan_rx_pkt_in_on_legacy+0x18>
    }

    if (BLE_MBUF_HDR_SCAN_RSP_RXD(hdr)) {
        ble_ll_scan_req_backoff(scansm, 1);
    }
}
   1be8a:	b004      	add	sp, #16
   1be8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        !BLE_MBUF_HDR_CRC_OK(hdr) ||
   1be90:	f414 4f00 	tst.w	r4, #32768	; 0x8000
   1be94:	d1f9      	bne.n	1be8a <ble_ll_scan_rx_pkt_in_on_legacy+0x12>
   1be96:	4698      	mov	r8, r3
   1be98:	4615      	mov	r5, r2
   1be9a:	460c      	mov	r4, r1
   1be9c:	4607      	mov	r7, r0
    ble_ll_scan_get_addr_data_from_legacy(pdu_type, rxbuf, addrd);
   1be9e:	461a      	mov	r2, r3
   1bea0:	4631      	mov	r1, r6
   1bea2:	f7ff fb4b 	bl	1b53c <ble_ll_scan_get_addr_data_from_legacy>
    ble_ll_scan_rx_pkt_in_restore_addr_data(hdr, addrd);
   1bea6:	4641      	mov	r1, r8
   1bea8:	4628      	mov	r0, r5
   1beaa:	f7ff fe61 	bl	1bb70 <ble_ll_scan_rx_pkt_in_restore_addr_data>
    send_hci_report = !scansm->scan_filt_dups ||
   1beae:	4b15      	ldr	r3, [pc, #84]	; (1bf04 <ble_ll_scan_rx_pkt_in_on_legacy+0x8c>)
   1beb0:	789b      	ldrb	r3, [r3, #2]
   1beb2:	b953      	cbnz	r3, 1beca <ble_ll_scan_rx_pkt_in_on_legacy+0x52>
   1beb4:	2301      	movs	r3, #1
    if (send_hci_report) {
   1beb6:	b9a3      	cbnz	r3, 1bee2 <ble_ll_scan_rx_pkt_in_on_legacy+0x6a>
    if (BLE_MBUF_HDR_SCAN_RSP_RXD(hdr)) {
   1beb8:	882b      	ldrh	r3, [r5, #0]
   1beba:	f013 0f08 	tst.w	r3, #8
   1bebe:	d0e4      	beq.n	1be8a <ble_ll_scan_rx_pkt_in_on_legacy+0x12>
        ble_ll_scan_req_backoff(scansm, 1);
   1bec0:	2101      	movs	r1, #1
   1bec2:	4810      	ldr	r0, [pc, #64]	; (1bf04 <ble_ll_scan_rx_pkt_in_on_legacy+0x8c>)
   1bec4:	f7ff fb66 	bl	1b594 <ble_ll_scan_req_backoff>
   1bec8:	e7df      	b.n	1be8a <ble_ll_scan_rx_pkt_in_on_legacy+0x12>
                      !ble_ll_scan_dup_check_legacy(addrd->adv_addr_type,
   1beca:	463a      	mov	r2, r7
   1becc:	f8d8 1014 	ldr.w	r1, [r8, #20]
   1bed0:	f898 0010 	ldrb.w	r0, [r8, #16]
   1bed4:	f7ff fe78 	bl	1bbc8 <ble_ll_scan_dup_check_legacy>
    send_hci_report = !scansm->scan_filt_dups ||
   1bed8:	b108      	cbz	r0, 1bede <ble_ll_scan_rx_pkt_in_on_legacy+0x66>
   1beda:	2300      	movs	r3, #0
   1bedc:	e7eb      	b.n	1beb6 <ble_ll_scan_rx_pkt_in_on_legacy+0x3e>
   1bede:	2301      	movs	r3, #1
   1bee0:	e7e9      	b.n	1beb6 <ble_ll_scan_rx_pkt_in_on_legacy+0x3e>
                                    addrd->adv_addr, addrd->adv_addr_type,
   1bee2:	f8d8 1014 	ldr.w	r1, [r8, #20]
                                    addrd->targeta, addrd->targeta_type,
   1bee6:	f8d8 300c 	ldr.w	r3, [r8, #12]
        ble_ll_scan_send_adv_report(pdu_type,
   1beea:	f898 2010 	ldrb.w	r2, [r8, #16]
   1beee:	4805      	ldr	r0, [pc, #20]	; (1bf04 <ble_ll_scan_rx_pkt_in_on_legacy+0x8c>)
   1bef0:	9003      	str	r0, [sp, #12]
   1bef2:	9502      	str	r5, [sp, #8]
   1bef4:	9401      	str	r4, [sp, #4]
   1bef6:	f898 0008 	ldrb.w	r0, [r8, #8]
   1befa:	9000      	str	r0, [sp, #0]
   1befc:	4638      	mov	r0, r7
   1befe:	f7ff ff59 	bl	1bdb4 <ble_ll_scan_send_adv_report>
   1bf02:	e7d9      	b.n	1beb8 <ble_ll_scan_rx_pkt_in_on_legacy+0x40>
   1bf04:	20001f10 	.word	0x20001f10

0001bf08 <ble_ll_scan_sm_start>:
{
   1bf08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bf0c:	4604      	mov	r4, r0
    if (!ble_ll_is_valid_own_addr_type(scansm->own_addr_type, g_random_addr)) {
   1bf0e:	4923      	ldr	r1, [pc, #140]	; (1bf9c <ble_ll_scan_sm_start+0x94>)
   1bf10:	7840      	ldrb	r0, [r0, #1]
   1bf12:	f7f8 fc93 	bl	1483c <ble_ll_is_valid_own_addr_type>
   1bf16:	2800      	cmp	r0, #0
   1bf18:	d03d      	beq.n	1bf96 <ble_ll_scan_sm_start+0x8e>
    BLE_LL_ASSERT(scansm->scanp);
   1bf1a:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
   1bf1c:	b38d      	cbz	r5, 1bf82 <ble_ll_scan_sm_start+0x7a>
    scanp_next = scansm->scanp_next;
   1bf1e:	6f26      	ldr	r6, [r4, #112]	; 0x70
    STATS_INC(ble_ll_stats, scan_starts);
   1bf20:	4a1f      	ldr	r2, [pc, #124]	; (1bfa0 <ble_ll_scan_sm_start+0x98>)
   1bf22:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
   1bf26:	3301      	adds	r3, #1
   1bf28:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    scansm->scan_enabled = 1;
   1bf2c:	2301      	movs	r3, #1
   1bf2e:	7023      	strb	r3, [r4, #0]
    scanp->scan_chan = BLE_PHY_ADV_CHAN_START;
   1bf30:	2325      	movs	r3, #37	; 0x25
   1bf32:	716b      	strb	r3, [r5, #5]
    if (scanp_next) {
   1bf34:	b106      	cbz	r6, 1bf38 <ble_ll_scan_sm_start+0x30>
        scanp_next->scan_chan = BLE_PHY_ADV_CHAN_START;
   1bf36:	7173      	strb	r3, [r6, #5]
    scansm->upper_limit = 1;
   1bf38:	2701      	movs	r7, #1
   1bf3a:	84a7      	strh	r7, [r4, #36]	; 0x24
    scansm->backoff_count = 1;
   1bf3c:	84e7      	strh	r7, [r4, #38]	; 0x26
    scansm->scan_rsp_pending = 0;
   1bf3e:	f04f 0800 	mov.w	r8, #0
   1bf42:	f884 8003 	strb.w	r8, [r4, #3]
    g_ble_ll_scan_num_rsp_advs = 0;
   1bf46:	4b17      	ldr	r3, [pc, #92]	; (1bfa4 <ble_ll_scan_sm_start+0x9c>)
   1bf48:	f883 8000 	strb.w	r8, [r3]
    os_mempool_clear(&g_scan_dup_pool);
   1bf4c:	4816      	ldr	r0, [pc, #88]	; (1bfa8 <ble_ll_scan_sm_start+0xa0>)
   1bf4e:	f7f1 fe23 	bl	db98 <os_mempool_clear>
    TAILQ_INIT(&g_scan_dup_list);
   1bf52:	4b16      	ldr	r3, [pc, #88]	; (1bfac <ble_ll_scan_sm_start+0xa4>)
   1bf54:	f8c3 8000 	str.w	r8, [r3]
   1bf58:	605b      	str	r3, [r3, #4]
    scanp->timing.start_time = ble_ll_rfmgmt_enable_now();
   1bf5a:	f7ff fa9b 	bl	1b494 <ble_ll_rfmgmt_enable_now>
   1bf5e:	4601      	mov	r1, r0
   1bf60:	6128      	str	r0, [r5, #16]
    ble_ll_rfmgmt_scan_changed(true, scanp->timing.start_time);
   1bf62:	4638      	mov	r0, r7
   1bf64:	f7ff fa4e 	bl	1b404 <ble_ll_rfmgmt_scan_changed>
    if (scanp_next) {
   1bf68:	b11e      	cbz	r6, 1bf72 <ble_ll_scan_sm_start+0x6a>
        scanp_next->timing.start_time = scanp->timing.start_time +
   1bf6a:	692b      	ldr	r3, [r5, #16]
                                        scanp->timing.window;
   1bf6c:	68ea      	ldr	r2, [r5, #12]
        scanp_next->timing.start_time = scanp->timing.start_time +
   1bf6e:	4413      	add	r3, r2
   1bf70:	6133      	str	r3, [r6, #16]
    os_cputime_timer_start(&scansm->scan_timer, scanp->timing.start_time);
   1bf72:	6929      	ldr	r1, [r5, #16]
   1bf74:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   1bf78:	f012 ff91 	bl	2ee9e <os_cputime_timer_start>
    return BLE_ERR_SUCCESS;
   1bf7c:	2000      	movs	r0, #0
}
   1bf7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    BLE_LL_ASSERT(scansm->scanp);
   1bf82:	f7f0 f931 	bl	c1e8 <hal_debugger_connected>
   1bf86:	b100      	cbz	r0, 1bf8a <ble_ll_scan_sm_start+0x82>
   1bf88:	be01      	bkpt	0x0001
   1bf8a:	2300      	movs	r3, #0
   1bf8c:	461a      	mov	r2, r3
   1bf8e:	4619      	mov	r1, r3
   1bf90:	4618      	mov	r0, r3
   1bf92:	f7f0 fddd 	bl	cb50 <__assert_func>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1bf96:	2012      	movs	r0, #18
   1bf98:	e7f1      	b.n	1bf7e <ble_ll_scan_sm_start+0x76>
   1bf9a:	bf00      	nop
   1bf9c:	200036cc 	.word	0x200036cc
   1bfa0:	200035c0 	.word	0x200035c0
   1bfa4:	20001ef8 	.word	0x20001ef8
   1bfa8:	20002020 	.word	0x20002020
   1bfac:	20001f98 	.word	0x20001f98

0001bfb0 <ble_ll_scan_common_init>:
    return g_ble_ll_scan_sm.scanp->scan_filt_policy & 1;
}

static void
ble_ll_scan_common_init(void)
{
   1bfb0:	b538      	push	{r3, r4, r5, lr}
    struct ble_ll_scan_params *scanp;
    int i;

    /* Clear state machine in case re-initialized */
    scansm = &g_ble_ll_scan_sm;
    memset(scansm, 0, sizeof(struct ble_ll_scan_sm));
   1bfb2:	4d1b      	ldr	r5, [pc, #108]	; (1c020 <ble_ll_scan_common_init+0x70>)
   1bfb4:	2288      	movs	r2, #136	; 0x88
   1bfb6:	2100      	movs	r1, #0
   1bfb8:	4628      	mov	r0, r5
   1bfba:	f7f2 fd19 	bl	e9f0 <memset>

    /* Clear scan parameters in case re-initialized */
    memset(g_ble_ll_scan_params, 0, sizeof(g_ble_ll_scan_params));
   1bfbe:	4b19      	ldr	r3, [pc, #100]	; (1c024 <ble_ll_scan_common_init+0x74>)
   1bfc0:	2400      	movs	r4, #0
   1bfc2:	601c      	str	r4, [r3, #0]
   1bfc4:	605c      	str	r4, [r3, #4]
   1bfc6:	609c      	str	r4, [r3, #8]
   1bfc8:	60dc      	str	r4, [r3, #12]
   1bfca:	611c      	str	r4, [r3, #16]
    ev->ev.ev_cb = (os_event_fn *)fn;
   1bfcc:	4b16      	ldr	r3, [pc, #88]	; (1c028 <ble_ll_scan_common_init+0x78>)
   1bfce:	632b      	str	r3, [r5, #48]	; 0x30
    ev->ev.ev_arg = arg;
   1bfd0:	636d      	str	r5, [r5, #52]	; 0x34

    /* Initialize scanning window end event */
    ble_npl_event_init(&scansm->scan_sched_ev, ble_ll_scan_event_proc, scansm);

    for (i = 0; i < BLE_LL_SCAN_PHY_NUMBER; i++) {
   1bfd2:	2c00      	cmp	r4, #0
   1bfd4:	dd13      	ble.n	1bffe <ble_ll_scan_common_init+0x4e>
                        ble_ll_scan_time_hci_to_ticks(BLE_HCI_SCAN_ITVL_DEF);
        scanp->timing.window =
                        ble_ll_scan_time_hci_to_ticks(BLE_HCI_SCAN_WINDOW_DEF);
    }

    scansm->scanp_phys[PHY_UNCODED].phy = BLE_PHY_1M;
   1bfd6:	4c12      	ldr	r4, [pc, #72]	; (1c020 <ble_ll_scan_common_init+0x70>)
   1bfd8:	2301      	movs	r3, #1
   1bfda:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    return os_time_get();
   1bfde:	f7f2 f9e7 	bl	e3b0 <os_time_get>
    scansm->scanp_phys[PHY_CODED].phy = BLE_PHY_CODED;
#endif

#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LL_PRIVACY)
    /* Make sure we'll generate new NRPA if necessary */
    scansm->scan_nrpa_timer = ble_npl_time_get();
   1bfe2:	60e0      	str	r0, [r4, #12]
#endif

    /* Initialize scanning timer */
    os_cputime_timer_init(&scansm->scan_timer, ble_ll_scan_timer_cb, scansm);
   1bfe4:	4622      	mov	r2, r4
   1bfe6:	4911      	ldr	r1, [pc, #68]	; (1c02c <ble_ll_scan_common_init+0x7c>)
   1bfe8:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   1bfec:	f012 ff39 	bl	2ee62 <os_cputime_timer_init>
    memset(ev, 0, sizeof(*ev));
   1bff0:	2300      	movs	r3, #0
   1bff2:	6563      	str	r3, [r4, #84]	; 0x54
   1bff4:	65e3      	str	r3, [r4, #92]	; 0x5c
   1bff6:	6623      	str	r3, [r4, #96]	; 0x60
    ev->ev.ev_cb = (os_event_fn *)fn;
   1bff8:	4b0d      	ldr	r3, [pc, #52]	; (1c030 <ble_ll_scan_common_init+0x80>)
   1bffa:	65a3      	str	r3, [r4, #88]	; 0x58
    os_cputime_timer_init(&scansm->period_timer, ble_ll_scan_period_timer_cb,
                                                                        scansm);
#endif

    ble_npl_event_init(&scansm->scan_interrupted_ev, ble_ll_scan_interrupted_event_cb, NULL);
}
   1bffc:	bd38      	pop	{r3, r4, r5, pc}
    return os_cputime_usecs_to_ticks(value * BLE_HCI_SCAN_ITVL);
   1bffe:	f242 7010 	movw	r0, #10000	; 0x2710
   1c002:	f012 ff59 	bl	2eeb8 <os_cputime_usecs_to_ticks>
        scanp->timing.interval =
   1c006:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1c00a:	4d06      	ldr	r5, [pc, #24]	; (1c024 <ble_ll_scan_common_init+0x74>)
   1c00c:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   1c010:	60a8      	str	r0, [r5, #8]
    return os_cputime_usecs_to_ticks(value * BLE_HCI_SCAN_ITVL);
   1c012:	f242 7010 	movw	r0, #10000	; 0x2710
   1c016:	f012 ff4f 	bl	2eeb8 <os_cputime_usecs_to_ticks>
        scanp->timing.window =
   1c01a:	60e8      	str	r0, [r5, #12]
    for (i = 0; i < BLE_LL_SCAN_PHY_NUMBER; i++) {
   1c01c:	3401      	adds	r4, #1
   1c01e:	e7d8      	b.n	1bfd2 <ble_ll_scan_common_init+0x22>
   1c020:	20001f10 	.word	0x20001f10
   1c024:	20001efc 	.word	0x20001efc
   1c028:	0001c035 	.word	0x0001c035
   1c02c:	0001ba4d 	.word	0x0001ba4d
   1c030:	0001c421 	.word	0x0001c421

0001c034 <ble_ll_scan_event_proc>:
{
   1c034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return ev->ev.ev_arg;
   1c036:	6884      	ldr	r4, [r0, #8]
    scanp = scansm->scanp;
   1c038:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
    OS_ENTER_CRITICAL(sr);
   1c03a:	f7f2 fa7b 	bl	e534 <os_arch_save_sr>
   1c03e:	4605      	mov	r5, r0
    if (!scansm->scan_enabled) {
   1c040:	7823      	ldrb	r3, [r4, #0]
   1c042:	b183      	cbz	r3, 1c066 <ble_ll_scan_event_proc+0x32>
    if (scansm->cur_aux_data || scansm->scan_rsp_pending) {
   1c044:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   1c046:	b90b      	cbnz	r3, 1c04c <ble_ll_scan_event_proc+0x18>
   1c048:	78e3      	ldrb	r3, [r4, #3]
   1c04a:	b1d3      	cbz	r3, 1c082 <ble_ll_scan_event_proc+0x4e>
        STATS_INC(ble_ll_stats, scan_timer_stopped);
   1c04c:	4a30      	ldr	r2, [pc, #192]	; (1c110 <ble_ll_scan_event_proc+0xdc>)
   1c04e:	f8d2 30d8 	ldr.w	r3, [r2, #216]	; 0xd8
   1c052:	3301      	adds	r3, #1
   1c054:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
        scansm->restart_timer_needed = 1;
   1c058:	2301      	movs	r3, #1
   1c05a:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
        OS_EXIT_CRITICAL(sr);
   1c05e:	4628      	mov	r0, r5
   1c060:	f7f2 fa6e 	bl	e540 <os_arch_restore_sr>
}
   1c064:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        os_cputime_timer_stop(&scansm->scan_timer);
   1c066:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   1c06a:	f012 ff1c 	bl	2eea6 <os_cputime_timer_stop>
        ble_ll_rfmgmt_scan_changed(false, 0);
   1c06e:	2100      	movs	r1, #0
   1c070:	4608      	mov	r0, r1
   1c072:	f7ff f9c7 	bl	1b404 <ble_ll_rfmgmt_scan_changed>
        ble_ll_rfmgmt_release();
   1c076:	f7ff f9f3 	bl	1b460 <ble_ll_rfmgmt_release>
        OS_EXIT_CRITICAL(sr);
   1c07a:	4628      	mov	r0, r5
   1c07c:	f7f2 fa60 	bl	e540 <os_arch_restore_sr>
        return;
   1c080:	e7f0      	b.n	1c064 <ble_ll_scan_event_proc+0x30>
    now = os_cputime_get32();
   1c082:	f012 ff14 	bl	2eeae <os_cputime_get32>
    inside_window = ble_ll_scan_is_inside_window(scanp, now);
   1c086:	4601      	mov	r1, r0
   1c088:	4630      	mov	r0, r6
   1c08a:	f7ff fa3f 	bl	1b50c <ble_ll_scan_is_inside_window>
   1c08e:	4607      	mov	r7, r0
    ble_ll_rfmgmt_scan_changed(true, scanp->timing.start_time);
   1c090:	6931      	ldr	r1, [r6, #16]
   1c092:	2001      	movs	r0, #1
   1c094:	f7ff f9b6 	bl	1b404 <ble_ll_rfmgmt_scan_changed>
    if (inside_window) {
   1c098:	b167      	cbz	r7, 1c0b4 <ble_ll_scan_event_proc+0x80>
        next_proc_time = scanp->timing.start_time + scanp->timing.window;
   1c09a:	6933      	ldr	r3, [r6, #16]
   1c09c:	68f6      	ldr	r6, [r6, #12]
   1c09e:	441e      	add	r6, r3
    switch (ble_ll_state_get()) {
   1c0a0:	f7f8 fd38 	bl	14b14 <ble_ll_state_get>
   1c0a4:	2806      	cmp	r0, #6
   1c0a6:	d824      	bhi.n	1c0f2 <ble_ll_scan_event_proc+0xbe>
   1c0a8:	e8df f000 	tbb	[pc, r0]
   1c0ac:	061b0c0b 	.word	0x061b0c0b
   1c0b0:	230c      	.short	0x230c
   1c0b2:	0c          	.byte	0x0c
   1c0b3:	00          	.byte	0x00
        next_proc_time = scanp->timing.start_time;
   1c0b4:	6936      	ldr	r6, [r6, #16]
   1c0b6:	e7f3      	b.n	1c0a0 <ble_ll_scan_event_proc+0x6c>
        ble_phy_disable();
   1c0b8:	f001 fece 	bl	1de58 <ble_phy_disable>
        if (!inside_window) {
   1c0bc:	b16f      	cbz	r7, 1c0da <ble_ll_scan_event_proc+0xa6>
        ble_ll_conn_reset_pending_aux_conn_rsp();
   1c0be:	f7fa feb3 	bl	16e28 <ble_ll_conn_reset_pending_aux_conn_rsp>
    if (start_scan) {
   1c0c2:	bb07      	cbnz	r7, 1c106 <ble_ll_scan_event_proc+0xd2>
        ble_ll_rfmgmt_release();
   1c0c4:	f7ff f9cc 	bl	1b460 <ble_ll_rfmgmt_release>
    OS_EXIT_CRITICAL(sr);
   1c0c8:	4628      	mov	r0, r5
   1c0ca:	f7f2 fa39 	bl	e540 <os_arch_restore_sr>
    os_cputime_timer_start(&scansm->scan_timer, next_proc_time);
   1c0ce:	4631      	mov	r1, r6
   1c0d0:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   1c0d4:	f012 fee3 	bl	2ee9e <os_cputime_timer_start>
   1c0d8:	e7c4      	b.n	1c064 <ble_ll_scan_event_proc+0x30>
            ble_ll_state_set(BLE_LL_STATE_STANDBY);
   1c0da:	2000      	movs	r0, #0
   1c0dc:	f7f8 fd14 	bl	14b08 <ble_ll_state_set>
   1c0e0:	e7ed      	b.n	1c0be <ble_ll_scan_event_proc+0x8a>
        ble_phy_disable();
   1c0e2:	f001 feb9 	bl	1de58 <ble_phy_disable>
        if (!inside_window) {
   1c0e6:	2f00      	cmp	r7, #0
   1c0e8:	d1eb      	bne.n	1c0c2 <ble_ll_scan_event_proc+0x8e>
            ble_ll_state_set(BLE_LL_STATE_STANDBY);
   1c0ea:	2000      	movs	r0, #0
   1c0ec:	f7f8 fd0c 	bl	14b08 <ble_ll_state_set>
   1c0f0:	e7e7      	b.n	1c0c2 <ble_ll_scan_event_proc+0x8e>
        BLE_LL_ASSERT(0);
   1c0f2:	f7f0 f879 	bl	c1e8 <hal_debugger_connected>
   1c0f6:	b100      	cbz	r0, 1c0fa <ble_ll_scan_event_proc+0xc6>
   1c0f8:	be01      	bkpt	0x0001
   1c0fa:	2300      	movs	r3, #0
   1c0fc:	461a      	mov	r2, r3
   1c0fe:	4619      	mov	r1, r3
   1c100:	4618      	mov	r0, r3
   1c102:	f7f0 fd25 	bl	cb50 <__assert_func>
        ble_ll_scan_start(scansm, NULL);
   1c106:	2100      	movs	r1, #0
   1c108:	4620      	mov	r0, r4
   1c10a:	f7ff fca5 	bl	1ba58 <ble_ll_scan_start>
   1c10e:	e7db      	b.n	1c0c8 <ble_ll_scan_event_proc+0x94>
   1c110:	200035c0 	.word	0x200035c0

0001c114 <ble_ll_scan_halt>:
{
   1c114:	b508      	push	{r3, lr}
    if (scansm->scan_rsp_pending) {
   1c116:	4b05      	ldr	r3, [pc, #20]	; (1c12c <ble_ll_scan_halt+0x18>)
   1c118:	78db      	ldrb	r3, [r3, #3]
   1c11a:	b903      	cbnz	r3, 1c11e <ble_ll_scan_halt+0xa>
}
   1c11c:	bd08      	pop	{r3, pc}
        scansm->scan_rsp_pending = 0;
   1c11e:	4803      	ldr	r0, [pc, #12]	; (1c12c <ble_ll_scan_halt+0x18>)
   1c120:	2100      	movs	r1, #0
   1c122:	70c1      	strb	r1, [r0, #3]
        ble_ll_scan_req_backoff(scansm, 0);
   1c124:	f7ff fa36 	bl	1b594 <ble_ll_scan_req_backoff>
}
   1c128:	e7f8      	b.n	1c11c <ble_ll_scan_halt+0x8>
   1c12a:	bf00      	nop
   1c12c:	20001f10 	.word	0x20001f10

0001c130 <ble_ll_scan_sm_stop>:
{
   1c130:	b570      	push	{r4, r5, r6, lr}
   1c132:	4605      	mov	r5, r0
    os_cputime_timer_stop(&scansm->scan_timer);
   1c134:	4c1f      	ldr	r4, [pc, #124]	; (1c1b4 <ble_ll_scan_sm_stop+0x84>)
   1c136:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   1c13a:	f012 feb4 	bl	2eea6 <os_cputime_timer_stop>
    OS_ENTER_CRITICAL(sr);
   1c13e:	f7f2 f9f9 	bl	e534 <os_arch_save_sr>
   1c142:	4606      	mov	r6, r0
    scansm->scan_enabled = 0;
   1c144:	2300      	movs	r3, #0
   1c146:	7023      	strb	r3, [r4, #0]
    scansm->restart_timer_needed = 0;
   1c148:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    if (scansm->scan_rsp_pending) {
   1c14c:	78e3      	ldrb	r3, [r4, #3]
   1c14e:	b9b3      	cbnz	r3, 1c17e <ble_ll_scan_sm_stop+0x4e>
    OS_EXIT_CRITICAL(sr);
   1c150:	4630      	mov	r0, r6
   1c152:	f7f2 f9f5 	bl	e540 <os_arch_restore_sr>
    STATS_INC(ble_ll_stats, scan_stops);
   1c156:	4a18      	ldr	r2, [pc, #96]	; (1c1b8 <ble_ll_scan_sm_stop+0x88>)
   1c158:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
   1c15c:	3301      	adds	r3, #1
   1c15e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if (chk_disable) {
   1c162:	b995      	cbnz	r5, 1c18a <ble_ll_scan_sm_stop+0x5a>
    OS_ENTER_CRITICAL(sr);
   1c164:	f7f2 f9e6 	bl	e534 <os_arch_save_sr>
   1c168:	4604      	mov	r4, r0
    ble_ll_rfmgmt_scan_changed(false, 0);
   1c16a:	2100      	movs	r1, #0
   1c16c:	4608      	mov	r0, r1
   1c16e:	f7ff f949 	bl	1b404 <ble_ll_rfmgmt_scan_changed>
    ble_ll_rfmgmt_release();
   1c172:	f7ff f975 	bl	1b460 <ble_ll_rfmgmt_release>
    OS_EXIT_CRITICAL(sr);
   1c176:	4620      	mov	r0, r4
   1c178:	f7f2 f9e2 	bl	e540 <os_arch_restore_sr>
}
   1c17c:	bd70      	pop	{r4, r5, r6, pc}
        scansm->scan_rsp_pending = 0;
   1c17e:	4620      	mov	r0, r4
   1c180:	2100      	movs	r1, #0
   1c182:	70e1      	strb	r1, [r4, #3]
        ble_ll_scan_req_backoff(scansm, 0);
   1c184:	f7ff fa06 	bl	1b594 <ble_ll_scan_req_backoff>
   1c188:	e7e2      	b.n	1c150 <ble_ll_scan_sm_stop+0x20>
        OS_ENTER_CRITICAL(sr);
   1c18a:	f7f2 f9d3 	bl	e534 <os_arch_save_sr>
   1c18e:	4604      	mov	r4, r0
        lls = ble_ll_state_get();
   1c190:	f7f8 fcc0 	bl	14b14 <ble_ll_state_get>
        if ((lls == BLE_LL_STATE_SCANNING) ||
   1c194:	2802      	cmp	r0, #2
   1c196:	d007      	beq.n	1c1a8 <ble_ll_scan_sm_stop+0x78>
   1c198:	2803      	cmp	r0, #3
   1c19a:	d003      	beq.n	1c1a4 <ble_ll_scan_sm_stop+0x74>
        OS_EXIT_CRITICAL(sr);
   1c19c:	4620      	mov	r0, r4
   1c19e:	f7f2 f9cf 	bl	e540 <os_arch_restore_sr>
   1c1a2:	e7df      	b.n	1c164 <ble_ll_scan_sm_stop+0x34>
                        (lls == BLE_LL_STATE_INITIATING && chk_disable == 1)) {
   1c1a4:	2d01      	cmp	r5, #1
   1c1a6:	d1f9      	bne.n	1c19c <ble_ll_scan_sm_stop+0x6c>
            ble_phy_disable();
   1c1a8:	f001 fe56 	bl	1de58 <ble_phy_disable>
            ble_ll_state_set(BLE_LL_STATE_STANDBY);
   1c1ac:	2000      	movs	r0, #0
   1c1ae:	f7f8 fcab 	bl	14b08 <ble_ll_state_set>
   1c1b2:	e7f3      	b.n	1c19c <ble_ll_scan_sm_stop+0x6c>
   1c1b4:	20001f10 	.word	0x20001f10
   1c1b8:	200035c0 	.word	0x200035c0

0001c1bc <ble_ll_scan_set_enable>:
    if ((filter_dups > 1) || (enable > 1)) {
   1c1bc:	2901      	cmp	r1, #1
   1c1be:	f200 8086 	bhi.w	1c2ce <ble_ll_scan_set_enable+0x112>
   1c1c2:	2801      	cmp	r0, #1
   1c1c4:	f200 8085 	bhi.w	1c2d2 <ble_ll_scan_set_enable+0x116>
{
   1c1c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (!enable) {
   1c1ca:	b948      	cbnz	r0, 1c1e0 <ble_ll_scan_set_enable+0x24>
        if (scansm->scan_enabled) {
   1c1cc:	4b43      	ldr	r3, [pc, #268]	; (1c2dc <ble_ll_scan_set_enable+0x120>)
   1c1ce:	781b      	ldrb	r3, [r3, #0]
   1c1d0:	b90b      	cbnz	r3, 1c1d6 <ble_ll_scan_set_enable+0x1a>
        return BLE_ERR_SUCCESS;
   1c1d2:	2000      	movs	r0, #0
}
   1c1d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            ble_ll_scan_sm_stop(1);
   1c1d6:	2001      	movs	r0, #1
   1c1d8:	f7ff ffaa 	bl	1c130 <ble_ll_scan_sm_stop>
        return BLE_ERR_SUCCESS;
   1c1dc:	2000      	movs	r0, #0
   1c1de:	e7f9      	b.n	1c1d4 <ble_ll_scan_set_enable+0x18>
    if (scansm->scan_enabled) {
   1c1e0:	4b3e      	ldr	r3, [pc, #248]	; (1c2dc <ble_ll_scan_set_enable+0x120>)
   1c1e2:	781b      	ldrb	r3, [r3, #0]
   1c1e4:	b9f3      	cbnz	r3, 1c224 <ble_ll_scan_set_enable+0x68>
    scansm->scan_filt_dups = filter_dups;
   1c1e6:	4a3d      	ldr	r2, [pc, #244]	; (1c2dc <ble_ll_scan_set_enable+0x120>)
   1c1e8:	7091      	strb	r1, [r2, #2]
    scansm->scanp = NULL;
   1c1ea:	2300      	movs	r3, #0
   1c1ec:	66d3      	str	r3, [r2, #108]	; 0x6c
    scansm->scanp_next = NULL;
   1c1ee:	6713      	str	r3, [r2, #112]	; 0x70
    for (i = 0; i < BLE_LL_SCAN_PHY_NUMBER; i++) {
   1c1f0:	2b00      	cmp	r3, #0
   1c1f2:	dd1e      	ble.n	1c232 <ble_ll_scan_set_enable+0x76>
    if (!scansm->scanp) {
   1c1f4:	4b39      	ldr	r3, [pc, #228]	; (1c2dc <ble_ll_scan_set_enable+0x120>)
   1c1f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   1c1f8:	2b00      	cmp	r3, #0
   1c1fa:	d04d      	beq.n	1c298 <ble_ll_scan_set_enable+0xdc>
    rc = ble_ll_scan_sm_start(scansm);
   1c1fc:	4837      	ldr	r0, [pc, #220]	; (1c2dc <ble_ll_scan_set_enable+0x120>)
   1c1fe:	f7ff fe83 	bl	1bf08 <ble_ll_scan_sm_start>
    return rc;
   1c202:	e7e7      	b.n	1c1d4 <ble_ll_scan_set_enable+0x18>
            if (scanp_phy->configured &&
   1c204:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   1c208:	0090      	lsls	r0, r2, #2
   1c20a:	4a34      	ldr	r2, [pc, #208]	; (1c2dc <ble_ll_scan_set_enable+0x120>)
   1c20c:	4402      	add	r2, r0
   1c20e:	f892 2077 	ldrb.w	r2, [r2, #119]	; 0x77
   1c212:	b12a      	cbz	r2, 1c220 <ble_ll_scan_set_enable+0x64>
                                scanp_phy->scan_type == BLE_SCAN_TYPE_INITIATE) {
   1c214:	4a31      	ldr	r2, [pc, #196]	; (1c2dc <ble_ll_scan_set_enable+0x120>)
   1c216:	4402      	add	r2, r0
   1c218:	f892 2078 	ldrb.w	r2, [r2, #120]	; 0x78
            if (scanp_phy->configured &&
   1c21c:	2a02      	cmp	r2, #2
   1c21e:	d05a      	beq.n	1c2d6 <ble_ll_scan_set_enable+0x11a>
        for (i = 0; i < BLE_LL_SCAN_PHY_NUMBER; i++) {
   1c220:	3301      	adds	r3, #1
   1c222:	e000      	b.n	1c226 <ble_ll_scan_set_enable+0x6a>
   1c224:	2300      	movs	r3, #0
   1c226:	2b00      	cmp	r3, #0
   1c228:	ddec      	ble.n	1c204 <ble_ll_scan_set_enable+0x48>
        scansm->scan_filt_dups = filter_dups;
   1c22a:	4b2c      	ldr	r3, [pc, #176]	; (1c2dc <ble_ll_scan_set_enable+0x120>)
   1c22c:	7099      	strb	r1, [r3, #2]
        return BLE_ERR_SUCCESS;
   1c22e:	2000      	movs	r0, #0
   1c230:	e7d0      	b.n	1c1d4 <ble_ll_scan_set_enable+0x18>
        scanp_phy = &scansm->scanp_phys[i];
   1c232:	009a      	lsls	r2, r3, #2
   1c234:	18d0      	adds	r0, r2, r3
   1c236:	0081      	lsls	r1, r0, #2
   1c238:	3170      	adds	r1, #112	; 0x70
   1c23a:	4828      	ldr	r0, [pc, #160]	; (1c2dc <ble_ll_scan_set_enable+0x120>)
   1c23c:	4401      	add	r1, r0
   1c23e:	1d0e      	adds	r6, r1, #4
        if (!scanp->configured) {
   1c240:	441a      	add	r2, r3
   1c242:	0091      	lsls	r1, r2, #2
   1c244:	4a26      	ldr	r2, [pc, #152]	; (1c2e0 <ble_ll_scan_set_enable+0x124>)
   1c246:	440a      	add	r2, r1
   1c248:	78d1      	ldrb	r1, [r2, #3]
   1c24a:	b1f1      	cbz	r1, 1c28a <ble_ll_scan_set_enable+0xce>
        scanp_phy->configured = scanp->configured;
   1c24c:	4684      	mov	ip, r0
   1c24e:	009a      	lsls	r2, r3, #2
   1c250:	18d0      	adds	r0, r2, r3
   1c252:	0084      	lsls	r4, r0, #2
   1c254:	4620      	mov	r0, r4
   1c256:	4464      	add	r4, ip
   1c258:	f884 1077 	strb.w	r1, [r4, #119]	; 0x77
        scanp_phy->scan_type = scanp->scan_type;
   1c25c:	4d20      	ldr	r5, [pc, #128]	; (1c2e0 <ble_ll_scan_set_enable+0x124>)
   1c25e:	4405      	add	r5, r0
   1c260:	792a      	ldrb	r2, [r5, #4]
   1c262:	f884 2078 	strb.w	r2, [r4, #120]	; 0x78
        scanp_phy->timing = scanp->timing;
   1c266:	f105 0208 	add.w	r2, r5, #8
   1c26a:	f104 077c 	add.w	r7, r4, #124	; 0x7c
   1c26e:	ca07      	ldmia	r2, {r0, r1, r2}
   1c270:	e887 0007 	stmia.w	r7, {r0, r1, r2}
        scanp_phy->scan_filt_policy = scanp->scan_filt_policy;
   1c274:	78aa      	ldrb	r2, [r5, #2]
   1c276:	f884 2076 	strb.w	r2, [r4, #118]	; 0x76
        scanp_phy->own_addr_type = scanp->own_addr_type;
   1c27a:	786a      	ldrb	r2, [r5, #1]
   1c27c:	f884 2075 	strb.w	r2, [r4, #117]	; 0x75
        if (!scansm->scanp) {
   1c280:	f8dc 106c 	ldr.w	r1, [ip, #108]	; 0x6c
   1c284:	b119      	cbz	r1, 1c28e <ble_ll_scan_set_enable+0xd2>
            scansm->scanp_next = scanp_phy;
   1c286:	4a15      	ldr	r2, [pc, #84]	; (1c2dc <ble_ll_scan_set_enable+0x120>)
   1c288:	6716      	str	r6, [r2, #112]	; 0x70
    for (i = 0; i < BLE_LL_SCAN_PHY_NUMBER; i++) {
   1c28a:	3301      	adds	r3, #1
   1c28c:	e7b0      	b.n	1c1f0 <ble_ll_scan_set_enable+0x34>
            scansm->scanp = scanp_phy;
   1c28e:	f8cc 606c 	str.w	r6, [ip, #108]	; 0x6c
            scansm->own_addr_type = scanp_phy->own_addr_type;
   1c292:	f88c 2001 	strb.w	r2, [ip, #1]
   1c296:	e7f8      	b.n	1c28a <ble_ll_scan_set_enable+0xce>
        scansm->scanp = &scansm->scanp_phys[PHY_UNCODED];
   1c298:	4c10      	ldr	r4, [pc, #64]	; (1c2dc <ble_ll_scan_set_enable+0x120>)
   1c29a:	f104 0374 	add.w	r3, r4, #116	; 0x74
   1c29e:	66e3      	str	r3, [r4, #108]	; 0x6c
        scansm->own_addr_type = BLE_ADDR_PUBLIC;
   1c2a0:	2500      	movs	r5, #0
   1c2a2:	7065      	strb	r5, [r4, #1]
        scanp_phy->configured = 1;
   1c2a4:	2301      	movs	r3, #1
   1c2a6:	f884 3077 	strb.w	r3, [r4, #119]	; 0x77
        scanp_phy->scan_type = BLE_SCAN_TYPE_PASSIVE;
   1c2aa:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
    return os_cputime_usecs_to_ticks(value * BLE_HCI_SCAN_ITVL);
   1c2ae:	f242 7010 	movw	r0, #10000	; 0x2710
   1c2b2:	f012 fe01 	bl	2eeb8 <os_cputime_usecs_to_ticks>
        scanp_phy->timing.interval =
   1c2b6:	67e0      	str	r0, [r4, #124]	; 0x7c
    return os_cputime_usecs_to_ticks(value * BLE_HCI_SCAN_ITVL);
   1c2b8:	f242 7010 	movw	r0, #10000	; 0x2710
   1c2bc:	f012 fdfc 	bl	2eeb8 <os_cputime_usecs_to_ticks>
        scanp_phy->timing.window =
   1c2c0:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
        scanp_phy->scan_filt_policy = BLE_HCI_SCAN_FILT_NO_WL;
   1c2c4:	f884 5076 	strb.w	r5, [r4, #118]	; 0x76
        scanp_phy->own_addr_type = BLE_ADDR_PUBLIC;
   1c2c8:	f884 5075 	strb.w	r5, [r4, #117]	; 0x75
   1c2cc:	e796      	b.n	1c1fc <ble_ll_scan_set_enable+0x40>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1c2ce:	2012      	movs	r0, #18
   1c2d0:	4770      	bx	lr
   1c2d2:	2012      	movs	r0, #18
}
   1c2d4:	4770      	bx	lr
                return BLE_ERR_CMD_DISALLOWED;
   1c2d6:	200c      	movs	r0, #12
   1c2d8:	e77c      	b.n	1c1d4 <ble_ll_scan_set_enable+0x18>
   1c2da:	bf00      	nop
   1c2dc:	20001f10 	.word	0x20001f10
   1c2e0:	20001efc 	.word	0x20001efc

0001c2e4 <ble_ll_scan_rx_isr_start>:
{
   1c2e4:	b510      	push	{r4, lr}
    scanp = scansm->scanp;
   1c2e6:	4b1a      	ldr	r3, [pc, #104]	; (1c350 <ble_ll_scan_rx_isr_start+0x6c>)
   1c2e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    switch (scanp->scan_type) {
   1c2ea:	791b      	ldrb	r3, [r3, #4]
   1c2ec:	2b01      	cmp	r3, #1
   1c2ee:	d12c      	bne.n	1c34a <ble_ll_scan_rx_isr_start+0x66>
        if ((pdu_type == BLE_ADV_PDU_TYPE_ADV_IND) ||
   1c2f0:	b118      	cbz	r0, 1c2fa <ble_ll_scan_rx_isr_start+0x16>
   1c2f2:	2806      	cmp	r0, #6
   1c2f4:	d01d      	beq.n	1c332 <ble_ll_scan_rx_isr_start+0x4e>
    rc = 0;
   1c2f6:	2400      	movs	r4, #0
   1c2f8:	e000      	b.n	1c2fc <ble_ll_scan_rx_isr_start+0x18>
            rc = 1;
   1c2fa:	2401      	movs	r4, #1
        if (scansm->cur_aux_data && !scansm->scan_rsp_pending ) {
   1c2fc:	4b14      	ldr	r3, [pc, #80]	; (1c350 <ble_ll_scan_rx_isr_start+0x6c>)
   1c2fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   1c300:	b143      	cbz	r3, 1c314 <ble_ll_scan_rx_isr_start+0x30>
   1c302:	4b13      	ldr	r3, [pc, #76]	; (1c350 <ble_ll_scan_rx_isr_start+0x6c>)
   1c304:	78db      	ldrb	r3, [r3, #3]
   1c306:	b92b      	cbnz	r3, 1c314 <ble_ll_scan_rx_isr_start+0x30>
            STATS_INC(ble_ll_stats, aux_received);
   1c308:	4a12      	ldr	r2, [pc, #72]	; (1c354 <ble_ll_scan_rx_isr_start+0x70>)
   1c30a:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
   1c30e:	3301      	adds	r3, #1
   1c310:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
        if (scansm->scan_rsp_pending) {
   1c314:	4b0e      	ldr	r3, [pc, #56]	; (1c350 <ble_ll_scan_rx_isr_start+0x6c>)
   1c316:	78db      	ldrb	r3, [r3, #3]
   1c318:	b1c3      	cbz	r3, 1c34c <ble_ll_scan_rx_isr_start+0x68>
            scansm->scan_rsp_pending = 0;
   1c31a:	4b0d      	ldr	r3, [pc, #52]	; (1c350 <ble_ll_scan_rx_isr_start+0x6c>)
   1c31c:	2200      	movs	r2, #0
   1c31e:	70da      	strb	r2, [r3, #3]
            if (pdu_type == BLE_ADV_PDU_TYPE_SCAN_RSP) {
   1c320:	2804      	cmp	r0, #4
   1c322:	d008      	beq.n	1c336 <ble_ll_scan_rx_isr_start+0x52>
            } else if (pdu_type == BLE_ADV_PDU_TYPE_AUX_SCAN_RSP) {
   1c324:	2807      	cmp	r0, #7
   1c326:	d00b      	beq.n	1c340 <ble_ll_scan_rx_isr_start+0x5c>
                ble_ll_scan_req_backoff(scansm, 0);
   1c328:	2100      	movs	r1, #0
   1c32a:	4809      	ldr	r0, [pc, #36]	; (1c350 <ble_ll_scan_rx_isr_start+0x6c>)
   1c32c:	f7ff f932 	bl	1b594 <ble_ll_scan_req_backoff>
   1c330:	e00c      	b.n	1c34c <ble_ll_scan_rx_isr_start+0x68>
            rc = 1;
   1c332:	2401      	movs	r4, #1
   1c334:	e7e2      	b.n	1c2fc <ble_ll_scan_rx_isr_start+0x18>
                *rxflags |= BLE_MBUF_HDR_F_SCAN_RSP_RXD;
   1c336:	880b      	ldrh	r3, [r1, #0]
   1c338:	f043 0308 	orr.w	r3, r3, #8
   1c33c:	800b      	strh	r3, [r1, #0]
   1c33e:	e005      	b.n	1c34c <ble_ll_scan_rx_isr_start+0x68>
                *rxflags |= BLE_MBUF_HDR_F_SCAN_RSP_RXD;
   1c340:	880b      	ldrh	r3, [r1, #0]
   1c342:	f043 0308 	orr.w	r3, r3, #8
   1c346:	800b      	strh	r3, [r1, #0]
   1c348:	e000      	b.n	1c34c <ble_ll_scan_rx_isr_start+0x68>
    rc = 0;
   1c34a:	2400      	movs	r4, #0
}
   1c34c:	4620      	mov	r0, r4
   1c34e:	bd10      	pop	{r4, pc}
   1c350:	20001f10 	.word	0x20001f10
   1c354:	200035c0 	.word	0x200035c0

0001c358 <ble_ll_scan_adv_decode_addr>:
    if (pdu_type != BLE_ADV_PDU_TYPE_ADV_EXT_IND &&
   1c358:	1fc2      	subs	r2, r0, #7
   1c35a:	b2d2      	uxtb	r2, r2
   1c35c:	2a01      	cmp	r2, #1
   1c35e:	d923      	bls.n	1c3a8 <ble_ll_scan_adv_decode_addr+0x50>
{
   1c360:	b410      	push	{r4}
        *addr_type = ble_ll_get_addr_type(rxbuf[0] & BLE_ADV_PDU_HDR_TXADD_MASK);
   1c362:	780a      	ldrb	r2, [r1, #0]
    if (txrxflag) {
   1c364:	f012 0f40 	tst.w	r2, #64	; 0x40
   1c368:	d00d      	beq.n	1c386 <ble_ll_scan_adv_decode_addr+0x2e>
        return BLE_HCI_ADV_OWN_ADDR_RANDOM;
   1c36a:	2401      	movs	r4, #1
   1c36c:	9a01      	ldr	r2, [sp, #4]
   1c36e:	7014      	strb	r4, [r2, #0]
        *addr = rxbuf + BLE_LL_PDU_HDR_LEN;
   1c370:	1c8a      	adds	r2, r1, #2
   1c372:	601a      	str	r2, [r3, #0]
        if (pdu_type != BLE_ADV_PDU_TYPE_ADV_DIRECT_IND) {
   1c374:	2801      	cmp	r0, #1
   1c376:	d008      	beq.n	1c38a <ble_ll_scan_adv_decode_addr+0x32>
            *inita = NULL;
   1c378:	2000      	movs	r0, #0
   1c37a:	9b02      	ldr	r3, [sp, #8]
   1c37c:	6018      	str	r0, [r3, #0]
            *inita_type = 0;
   1c37e:	9b03      	ldr	r3, [sp, #12]
   1c380:	7018      	strb	r0, [r3, #0]
}
   1c382:	bc10      	pop	{r4}
   1c384:	4770      	bx	lr
    return BLE_HCI_ADV_OWN_ADDR_PUBLIC;
   1c386:	2400      	movs	r4, #0
   1c388:	e7f0      	b.n	1c36c <ble_ll_scan_adv_decode_addr+0x14>
        *inita = rxbuf + BLE_LL_PDU_HDR_LEN + BLE_DEV_ADDR_LEN;
   1c38a:	f101 0308 	add.w	r3, r1, #8
   1c38e:	9a02      	ldr	r2, [sp, #8]
   1c390:	6013      	str	r3, [r2, #0]
    if (txrxflag) {
   1c392:	f991 3000 	ldrsb.w	r3, [r1]
   1c396:	2b00      	cmp	r3, #0
   1c398:	db04      	blt.n	1c3a4 <ble_ll_scan_adv_decode_addr+0x4c>
    return BLE_HCI_ADV_OWN_ADDR_PUBLIC;
   1c39a:	2300      	movs	r3, #0
        *inita_type = ble_ll_get_addr_type(rxbuf[0] & BLE_ADV_PDU_HDR_RXADD_MASK);
   1c39c:	9a03      	ldr	r2, [sp, #12]
   1c39e:	7013      	strb	r3, [r2, #0]
        return 0;
   1c3a0:	2000      	movs	r0, #0
   1c3a2:	e7ee      	b.n	1c382 <ble_ll_scan_adv_decode_addr+0x2a>
        return BLE_HCI_ADV_OWN_ADDR_RANDOM;
   1c3a4:	2301      	movs	r3, #1
   1c3a6:	e7f9      	b.n	1c39c <ble_ll_scan_adv_decode_addr+0x44>
    return -1;
   1c3a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1c3ac:	4770      	bx	lr
	...

0001c3b0 <ble_ll_scan_chk_resume>:
{
   1c3b0:	b538      	push	{r3, r4, r5, lr}
    if (scansm->scan_enabled) {
   1c3b2:	4b19      	ldr	r3, [pc, #100]	; (1c418 <ble_ll_scan_chk_resume+0x68>)
   1c3b4:	781b      	ldrb	r3, [r3, #0]
   1c3b6:	b903      	cbnz	r3, 1c3ba <ble_ll_scan_chk_resume+0xa>
}
   1c3b8:	bd38      	pop	{r3, r4, r5, pc}
        OS_ENTER_CRITICAL(sr);
   1c3ba:	f7f2 f8bb 	bl	e534 <os_arch_save_sr>
   1c3be:	4604      	mov	r4, r0
        if (scansm->restart_timer_needed) {
   1c3c0:	4b15      	ldr	r3, [pc, #84]	; (1c418 <ble_ll_scan_chk_resume+0x68>)
   1c3c2:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
   1c3c6:	b94b      	cbnz	r3, 1c3dc <ble_ll_scan_chk_resume+0x2c>
        now = os_cputime_get32();
   1c3c8:	f012 fd71 	bl	2eeae <os_cputime_get32>
   1c3cc:	4605      	mov	r5, r0
        if (ble_ll_state_get() == BLE_LL_STATE_STANDBY &&
   1c3ce:	f7f8 fba1 	bl	14b14 <ble_ll_state_get>
   1c3d2:	b1a0      	cbz	r0, 1c3fe <ble_ll_scan_chk_resume+0x4e>
        OS_EXIT_CRITICAL(sr);
   1c3d4:	4620      	mov	r0, r4
   1c3d6:	f7f2 f8b3 	bl	e540 <os_arch_restore_sr>
   1c3da:	e7ed      	b.n	1c3b8 <ble_ll_scan_chk_resume+0x8>
            scansm->restart_timer_needed = 0;
   1c3dc:	480e      	ldr	r0, [pc, #56]	; (1c418 <ble_ll_scan_chk_resume+0x68>)
   1c3de:	2300      	movs	r3, #0
   1c3e0:	f880 3064 	strb.w	r3, [r0, #100]	; 0x64
            ble_ll_event_send(&scansm->scan_sched_ev);
   1c3e4:	302c      	adds	r0, #44	; 0x2c
   1c3e6:	f7f8 fb9b 	bl	14b20 <ble_ll_event_send>
            STATS_INC(ble_ll_stats, scan_timer_restarted);
   1c3ea:	4a0c      	ldr	r2, [pc, #48]	; (1c41c <ble_ll_scan_chk_resume+0x6c>)
   1c3ec:	f8d2 30dc 	ldr.w	r3, [r2, #220]	; 0xdc
   1c3f0:	3301      	adds	r3, #1
   1c3f2:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
            OS_EXIT_CRITICAL(sr);
   1c3f6:	4620      	mov	r0, r4
   1c3f8:	f7f2 f8a2 	bl	e540 <os_arch_restore_sr>
            return;
   1c3fc:	e7dc      	b.n	1c3b8 <ble_ll_scan_chk_resume+0x8>
            ble_ll_scan_is_inside_window(scansm->scanp, now)) {
   1c3fe:	4629      	mov	r1, r5
   1c400:	4b05      	ldr	r3, [pc, #20]	; (1c418 <ble_ll_scan_chk_resume+0x68>)
   1c402:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
   1c404:	f7ff f882 	bl	1b50c <ble_ll_scan_is_inside_window>
        if (ble_ll_state_get() == BLE_LL_STATE_STANDBY &&
   1c408:	2800      	cmp	r0, #0
   1c40a:	d0e3      	beq.n	1c3d4 <ble_ll_scan_chk_resume+0x24>
            ble_ll_scan_start(scansm, NULL);
   1c40c:	2100      	movs	r1, #0
   1c40e:	4802      	ldr	r0, [pc, #8]	; (1c418 <ble_ll_scan_chk_resume+0x68>)
   1c410:	f7ff fb22 	bl	1ba58 <ble_ll_scan_start>
   1c414:	e7de      	b.n	1c3d4 <ble_ll_scan_chk_resume+0x24>
   1c416:	bf00      	nop
   1c418:	20001f10 	.word	0x20001f10
   1c41c:	200035c0 	.word	0x200035c0

0001c420 <ble_ll_scan_interrupted_event_cb>:
{
   1c420:	b508      	push	{r3, lr}
    if (!scansm->scan_enabled) {
   1c422:	4b07      	ldr	r3, [pc, #28]	; (1c440 <ble_ll_scan_interrupted_event_cb+0x20>)
   1c424:	781b      	ldrb	r3, [r3, #0]
   1c426:	b123      	cbz	r3, 1c432 <ble_ll_scan_interrupted_event_cb+0x12>
    if (scansm->scan_rsp_pending) {
   1c428:	4b05      	ldr	r3, [pc, #20]	; (1c440 <ble_ll_scan_interrupted_event_cb+0x20>)
   1c42a:	78db      	ldrb	r3, [r3, #3]
   1c42c:	b913      	cbnz	r3, 1c434 <ble_ll_scan_interrupted_event_cb+0x14>
    ble_ll_scan_chk_resume();
   1c42e:	f7ff ffbf 	bl	1c3b0 <ble_ll_scan_chk_resume>
}
   1c432:	bd08      	pop	{r3, pc}
        scansm->scan_rsp_pending = 0;
   1c434:	4802      	ldr	r0, [pc, #8]	; (1c440 <ble_ll_scan_interrupted_event_cb+0x20>)
   1c436:	2100      	movs	r1, #0
   1c438:	70c1      	strb	r1, [r0, #3]
        ble_ll_scan_req_backoff(scansm, 0);
   1c43a:	f7ff f8ab 	bl	1b594 <ble_ll_scan_req_backoff>
   1c43e:	e7f6      	b.n	1c42e <ble_ll_scan_interrupted_event_cb+0xe>
   1c440:	20001f10 	.word	0x20001f10

0001c444 <ble_ll_scan_interrupted>:
{
   1c444:	b508      	push	{r3, lr}
    ble_ll_event_send(&scansm->scan_interrupted_ev);
   1c446:	3054      	adds	r0, #84	; 0x54
   1c448:	f7f8 fb6a 	bl	14b20 <ble_ll_event_send>
}
   1c44c:	bd08      	pop	{r3, pc}
	...

0001c450 <ble_ll_scan_rx_isr_end>:
{
   1c450:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c452:	b089      	sub	sp, #36	; 0x24
    if (rxpdu == NULL) {
   1c454:	b188      	cbz	r0, 1c47a <ble_ll_scan_rx_isr_end+0x2a>
   1c456:	4605      	mov	r5, r0
   1c458:	f100 0718 	add.w	r7, r0, #24
    rxbuf = rxpdu->om_data;
   1c45c:	6806      	ldr	r6, [r0, #0]
    pdu_type = rxbuf[0] & BLE_ADV_PDU_HDR_TYPE_MASK;
   1c45e:	7834      	ldrb	r4, [r6, #0]
   1c460:	f004 040f 	and.w	r4, r4, #15
    if (!crcok) {
   1c464:	b349      	cbz	r1, 1c4ba <ble_ll_scan_rx_isr_end+0x6a>
    addrd.rl = NULL;
   1c466:	2300      	movs	r3, #0
   1c468:	9307      	str	r3, [sp, #28]
    switch (pdu_type) {
   1c46a:	2c06      	cmp	r4, #6
   1c46c:	d825      	bhi.n	1c4ba <ble_ll_scan_rx_isr_end+0x6a>
   1c46e:	e8df f004 	tbb	[pc, r4]
   1c472:	0909      	.short	0x0909
   1c474:	24092409 	.word	0x24092409
   1c478:	09          	.byte	0x09
   1c479:	00          	.byte	0x00
        ble_ll_scan_interrupted(scansm);
   1c47a:	4816      	ldr	r0, [pc, #88]	; (1c4d4 <ble_ll_scan_rx_isr_end+0x84>)
   1c47c:	f7ff ffe2 	bl	1c444 <ble_ll_scan_interrupted>
        return 0;
   1c480:	2000      	movs	r0, #0
   1c482:	e012      	b.n	1c4aa <ble_ll_scan_rx_isr_end+0x5a>
        rc = ble_ll_scan_rx_isr_on_legacy(pdu_type, rxbuf, hdr, &addrd);
   1c484:	ab01      	add	r3, sp, #4
   1c486:	463a      	mov	r2, r7
   1c488:	4631      	mov	r1, r6
   1c48a:	4620      	mov	r0, r4
   1c48c:	f7ff f9e6 	bl	1b85c <ble_ll_scan_rx_isr_on_legacy>
    if (rc == -1) {
   1c490:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   1c494:	d011      	beq.n	1c4ba <ble_ll_scan_rx_isr_end+0x6a>
    } else if (rc == 1) {
   1c496:	2801      	cmp	r0, #1
   1c498:	d109      	bne.n	1c4ae <ble_ll_scan_rx_isr_end+0x5e>
        if (ble_ll_scan_send_scan_req(pdu_type, rxbuf, hdr, &addrd)) {
   1c49a:	ab01      	add	r3, sp, #4
   1c49c:	463a      	mov	r2, r7
   1c49e:	4631      	mov	r1, r6
   1c4a0:	4620      	mov	r0, r4
   1c4a2:	f7ff fa95 	bl	1b9d0 <ble_ll_scan_send_scan_req>
   1c4a6:	b110      	cbz	r0, 1c4ae <ble_ll_scan_rx_isr_end+0x5e>
            return 0;
   1c4a8:	2000      	movs	r0, #0
}
   1c4aa:	b009      	add	sp, #36	; 0x24
   1c4ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ble_ll_state_set(BLE_LL_STATE_STANDBY);
   1c4ae:	2000      	movs	r0, #0
   1c4b0:	f7f8 fb2a 	bl	14b08 <ble_ll_state_set>
    return -1;
   1c4b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c4b8:	e7f7      	b.n	1c4aa <ble_ll_scan_rx_isr_end+0x5a>
    rxinfo->flags |= BLE_MBUF_HDR_F_IGNORED;
   1c4ba:	8b2b      	ldrh	r3, [r5, #24]
   1c4bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
   1c4c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
   1c4c4:	832b      	strh	r3, [r5, #24]
    ble_ll_state_set(BLE_LL_STATE_STANDBY);
   1c4c6:	2000      	movs	r0, #0
   1c4c8:	f7f8 fb1e 	bl	14b08 <ble_ll_state_set>
    return -1;
   1c4cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c4d0:	e7eb      	b.n	1c4aa <ble_ll_scan_rx_isr_end+0x5a>
   1c4d2:	bf00      	nop
   1c4d4:	20001f10 	.word	0x20001f10

0001c4d8 <ble_ll_scan_wfr_timer_exp>:
{
   1c4d8:	b510      	push	{r4, lr}
   1c4da:	b082      	sub	sp, #8
    if (scansm->scan_rsp_pending) {
   1c4dc:	4b1b      	ldr	r3, [pc, #108]	; (1c54c <ble_ll_scan_wfr_timer_exp+0x74>)
   1c4de:	78db      	ldrb	r3, [r3, #3]
   1c4e0:	bb03      	cbnz	r3, 1c524 <ble_ll_scan_wfr_timer_exp+0x4c>
    if (scansm->cur_aux_data) {
   1c4e2:	4b1a      	ldr	r3, [pc, #104]	; (1c54c <ble_ll_scan_wfr_timer_exp+0x74>)
   1c4e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   1c4e6:	b1cb      	cbz	r3, 1c51c <ble_ll_scan_wfr_timer_exp+0x44>
        ble_ll_scan_interrupted(scansm);
   1c4e8:	4c18      	ldr	r4, [pc, #96]	; (1c54c <ble_ll_scan_wfr_timer_exp+0x74>)
   1c4ea:	4620      	mov	r0, r4
   1c4ec:	f7ff ffaa 	bl	1c444 <ble_ll_scan_interrupted>
        ble_phy_disable();
   1c4f0:	f001 fcb2 	bl	1de58 <ble_phy_disable>
        now = os_cputime_get32();
   1c4f4:	f012 fcdb 	bl	2eeae <os_cputime_get32>
        if (!ble_ll_scan_is_inside_window(scansm->scanp, now)) {
   1c4f8:	4601      	mov	r1, r0
   1c4fa:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
   1c4fc:	f7ff f806 	bl	1b50c <ble_ll_scan_is_inside_window>
   1c500:	b1b0      	cbz	r0, 1c530 <ble_ll_scan_wfr_timer_exp+0x58>
        ble_ll_get_chan_to_scan(scansm, &chan, &phy);
   1c502:	466a      	mov	r2, sp
   1c504:	f10d 0107 	add.w	r1, sp, #7
   1c508:	4810      	ldr	r0, [pc, #64]	; (1c54c <ble_ll_scan_wfr_timer_exp+0x74>)
   1c50a:	f7fe ffdd 	bl	1b4c8 <ble_ll_get_chan_to_scan>
        rc = ble_phy_setchan(chan, BLE_ACCESS_ADDR_ADV, BLE_LL_CRCINIT_ADV);
   1c50e:	4a10      	ldr	r2, [pc, #64]	; (1c550 <ble_ll_scan_wfr_timer_exp+0x78>)
   1c510:	4910      	ldr	r1, [pc, #64]	; (1c554 <ble_ll_scan_wfr_timer_exp+0x7c>)
   1c512:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1c516:	f001 fc79 	bl	1de0c <ble_phy_setchan>
        BLE_LL_ASSERT(rc == 0);
   1c51a:	b960      	cbnz	r0, 1c536 <ble_ll_scan_wfr_timer_exp+0x5e>
    ble_phy_restart_rx();
   1c51c:	f001 fe98 	bl	1e250 <ble_phy_restart_rx>
}
   1c520:	b002      	add	sp, #8
   1c522:	bd10      	pop	{r4, pc}
        scansm->scan_rsp_pending = 0;
   1c524:	4809      	ldr	r0, [pc, #36]	; (1c54c <ble_ll_scan_wfr_timer_exp+0x74>)
   1c526:	2100      	movs	r1, #0
   1c528:	70c1      	strb	r1, [r0, #3]
        ble_ll_scan_req_backoff(scansm, 0);
   1c52a:	f7ff f833 	bl	1b594 <ble_ll_scan_req_backoff>
   1c52e:	e7d8      	b.n	1c4e2 <ble_ll_scan_wfr_timer_exp+0xa>
            ble_ll_state_set(BLE_LL_STATE_STANDBY);
   1c530:	f7f8 faea 	bl	14b08 <ble_ll_state_set>
   1c534:	e7f4      	b.n	1c520 <ble_ll_scan_wfr_timer_exp+0x48>
        BLE_LL_ASSERT(rc == 0);
   1c536:	f7ef fe57 	bl	c1e8 <hal_debugger_connected>
   1c53a:	b100      	cbz	r0, 1c53e <ble_ll_scan_wfr_timer_exp+0x66>
   1c53c:	be01      	bkpt	0x0001
   1c53e:	2300      	movs	r3, #0
   1c540:	461a      	mov	r2, r3
   1c542:	4619      	mov	r1, r3
   1c544:	4618      	mov	r0, r3
   1c546:	f7f0 fb03 	bl	cb50 <__assert_func>
   1c54a:	bf00      	nop
   1c54c:	20001f10 	.word	0x20001f10
   1c550:	00555555 	.word	0x00555555
   1c554:	8e89bed6 	.word	0x8e89bed6

0001c558 <ble_ll_scan_rx_pkt_in>:
{
   1c558:	b500      	push	{lr}
   1c55a:	b089      	sub	sp, #36	; 0x24
    ble_ll_scan_rx_pkt_in_on_legacy(ptype, om, hdr, &addrd);
   1c55c:	ab01      	add	r3, sp, #4
   1c55e:	f7ff fc8b 	bl	1be78 <ble_ll_scan_rx_pkt_in_on_legacy>
    ble_ll_scan_chk_resume();
   1c562:	f7ff ff25 	bl	1c3b0 <ble_ll_scan_chk_resume>
}
   1c566:	b009      	add	sp, #36	; 0x24
   1c568:	f85d fb04 	ldr.w	pc, [sp], #4

0001c56c <ble_ll_scan_set_scan_params>:
    if (len != sizeof(*cmd)) {
   1c56c:	2907      	cmp	r1, #7
   1c56e:	d135      	bne.n	1c5dc <ble_ll_scan_set_scan_params+0x70>
{
   1c570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (scansm->scan_enabled) {
   1c572:	4b23      	ldr	r3, [pc, #140]	; (1c600 <ble_ll_scan_set_scan_params+0x94>)
   1c574:	781b      	ldrb	r3, [r3, #0]
   1c576:	bb9b      	cbnz	r3, 1c5e0 <ble_ll_scan_set_scan_params+0x74>
    scan_itvl = le16toh(cmd->scan_itvl);
   1c578:	f8b0 2001 	ldrh.w	r2, [r0, #1]
    scan_window = le16toh(cmd->scan_window);
   1c57c:	f8b0 5003 	ldrh.w	r5, [r0, #3]
    if ((cmd->scan_type != BLE_HCI_SCAN_TYPE_PASSIVE) &&
   1c580:	7803      	ldrb	r3, [r0, #0]
   1c582:	2b01      	cmp	r3, #1
   1c584:	d82e      	bhi.n	1c5e4 <ble_ll_scan_set_scan_params+0x78>
    if ((scan_itvl < BLE_HCI_SCAN_ITVL_MIN) ||
   1c586:	1f13      	subs	r3, r2, #4
   1c588:	b29b      	uxth	r3, r3
   1c58a:	f643 71fc 	movw	r1, #16380	; 0x3ffc
   1c58e:	428b      	cmp	r3, r1
   1c590:	d82a      	bhi.n	1c5e8 <ble_ll_scan_set_scan_params+0x7c>
        (scan_itvl > BLE_HCI_SCAN_ITVL_MAX) ||
   1c592:	2d03      	cmp	r5, #3
   1c594:	d92a      	bls.n	1c5ec <ble_ll_scan_set_scan_params+0x80>
        (scan_window < BLE_HCI_SCAN_WINDOW_MIN) ||
   1c596:	f5b5 4f80 	cmp.w	r5, #16384	; 0x4000
   1c59a:	d829      	bhi.n	1c5f0 <ble_ll_scan_set_scan_params+0x84>
        (scan_window > BLE_HCI_SCAN_WINDOW_MAX) ||
   1c59c:	42aa      	cmp	r2, r5
   1c59e:	d329      	bcc.n	1c5f4 <ble_ll_scan_set_scan_params+0x88>
    if (cmd->own_addr_type > BLE_HCI_ADV_OWN_ADDR_MAX) {
   1c5a0:	7943      	ldrb	r3, [r0, #5]
   1c5a2:	2b03      	cmp	r3, #3
   1c5a4:	d828      	bhi.n	1c5f8 <ble_ll_scan_set_scan_params+0x8c>
    if (cmd->filter_policy > BLE_HCI_SCAN_FILT_MAX) {
   1c5a6:	7983      	ldrb	r3, [r0, #6]
   1c5a8:	2b03      	cmp	r3, #3
   1c5aa:	d827      	bhi.n	1c5fc <ble_ll_scan_set_scan_params+0x90>
   1c5ac:	4604      	mov	r4, r0
    scanp->configured = 1;
   1c5ae:	4e15      	ldr	r6, [pc, #84]	; (1c604 <ble_ll_scan_set_scan_params+0x98>)
   1c5b0:	2301      	movs	r3, #1
   1c5b2:	70f3      	strb	r3, [r6, #3]
    scanp->scan_type = cmd->scan_type;
   1c5b4:	7803      	ldrb	r3, [r0, #0]
   1c5b6:	7133      	strb	r3, [r6, #4]
    return os_cputime_usecs_to_ticks(value * BLE_HCI_SCAN_ITVL);
   1c5b8:	f240 2771 	movw	r7, #625	; 0x271
   1c5bc:	fb07 f002 	mul.w	r0, r7, r2
   1c5c0:	f012 fc7a 	bl	2eeb8 <os_cputime_usecs_to_ticks>
    scanp->timing.interval = ble_ll_scan_time_hci_to_ticks(scan_itvl);
   1c5c4:	60b0      	str	r0, [r6, #8]
    return os_cputime_usecs_to_ticks(value * BLE_HCI_SCAN_ITVL);
   1c5c6:	fb07 f005 	mul.w	r0, r7, r5
   1c5ca:	f012 fc75 	bl	2eeb8 <os_cputime_usecs_to_ticks>
    scanp->timing.window = ble_ll_scan_time_hci_to_ticks(scan_window);
   1c5ce:	60f0      	str	r0, [r6, #12]
    scanp->scan_filt_policy = cmd->filter_policy;
   1c5d0:	79a3      	ldrb	r3, [r4, #6]
   1c5d2:	70b3      	strb	r3, [r6, #2]
    scanp->own_addr_type = cmd->own_addr_type;
   1c5d4:	7963      	ldrb	r3, [r4, #5]
   1c5d6:	7073      	strb	r3, [r6, #1]
    return 0;
   1c5d8:	2000      	movs	r0, #0
   1c5da:	e002      	b.n	1c5e2 <ble_ll_scan_set_scan_params+0x76>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1c5dc:	2012      	movs	r0, #18
}
   1c5de:	4770      	bx	lr
        return BLE_ERR_CMD_DISALLOWED;
   1c5e0:	200c      	movs	r0, #12
}
   1c5e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1c5e4:	2012      	movs	r0, #18
   1c5e6:	e7fc      	b.n	1c5e2 <ble_ll_scan_set_scan_params+0x76>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1c5e8:	2012      	movs	r0, #18
   1c5ea:	e7fa      	b.n	1c5e2 <ble_ll_scan_set_scan_params+0x76>
   1c5ec:	2012      	movs	r0, #18
   1c5ee:	e7f8      	b.n	1c5e2 <ble_ll_scan_set_scan_params+0x76>
   1c5f0:	2012      	movs	r0, #18
   1c5f2:	e7f6      	b.n	1c5e2 <ble_ll_scan_set_scan_params+0x76>
   1c5f4:	2012      	movs	r0, #18
   1c5f6:	e7f4      	b.n	1c5e2 <ble_ll_scan_set_scan_params+0x76>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1c5f8:	2012      	movs	r0, #18
   1c5fa:	e7f2      	b.n	1c5e2 <ble_ll_scan_set_scan_params+0x76>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1c5fc:	2012      	movs	r0, #18
   1c5fe:	e7f0      	b.n	1c5e2 <ble_ll_scan_set_scan_params+0x76>
   1c600:	20001f10 	.word	0x20001f10
   1c604:	20001efc 	.word	0x20001efc

0001c608 <ble_ll_hci_scan_set_enable>:
    if (len != sizeof(*cmd)) {
   1c608:	2902      	cmp	r1, #2
   1c60a:	d001      	beq.n	1c610 <ble_ll_hci_scan_set_enable+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1c60c:	2012      	movs	r0, #18
}
   1c60e:	4770      	bx	lr
{
   1c610:	b500      	push	{lr}
   1c612:	b083      	sub	sp, #12
    return ble_ll_scan_set_enable(cmd->enable, cmd->filter_duplicates, 0, 0,
   1c614:	7841      	ldrb	r1, [r0, #1]
   1c616:	7800      	ldrb	r0, [r0, #0]
   1c618:	2200      	movs	r2, #0
   1c61a:	9200      	str	r2, [sp, #0]
   1c61c:	4613      	mov	r3, r2
   1c61e:	f7ff fdcd 	bl	1c1bc <ble_ll_scan_set_enable>
}
   1c622:	b003      	add	sp, #12
   1c624:	f85d fb04 	ldr.w	pc, [sp], #4

0001c628 <ble_ll_scan_can_chg_whitelist>:
    scanp = scansm->scanp;
   1c628:	4b06      	ldr	r3, [pc, #24]	; (1c644 <ble_ll_scan_can_chg_whitelist+0x1c>)
   1c62a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    if (scansm->scan_enabled && (scanp->scan_filt_policy & 1)) {
   1c62c:	781b      	ldrb	r3, [r3, #0]
   1c62e:	b12b      	cbz	r3, 1c63c <ble_ll_scan_can_chg_whitelist+0x14>
   1c630:	7893      	ldrb	r3, [r2, #2]
   1c632:	f013 0f01 	tst.w	r3, #1
   1c636:	d103      	bne.n	1c640 <ble_ll_scan_can_chg_whitelist+0x18>
        rc = 1;
   1c638:	2001      	movs	r0, #1
   1c63a:	4770      	bx	lr
   1c63c:	2001      	movs	r0, #1
   1c63e:	4770      	bx	lr
        rc = 0;
   1c640:	2000      	movs	r0, #0
}
   1c642:	4770      	bx	lr
   1c644:	20001f10 	.word	0x20001f10

0001c648 <ble_ll_scan_initiator_start>:
{
   1c648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c64a:	4605      	mov	r5, r0
   1c64c:	460f      	mov	r7, r1
    scansm->own_addr_type = hcc->own_addr_type;
   1c64e:	7b03      	ldrb	r3, [r0, #12]
   1c650:	4c12      	ldr	r4, [pc, #72]	; (1c69c <ble_ll_scan_initiator_start+0x54>)
   1c652:	7063      	strb	r3, [r4, #1]
    scansm->scanp = &scansm->scanp_phys[PHY_UNCODED];
   1c654:	f104 0374 	add.w	r3, r4, #116	; 0x74
   1c658:	66e3      	str	r3, [r4, #108]	; 0x6c
    scansm->scanp_next = NULL;
   1c65a:	2300      	movs	r3, #0
   1c65c:	6723      	str	r3, [r4, #112]	; 0x70
    scanp->scan_filt_policy = hcc->filter_policy;
   1c65e:	7903      	ldrb	r3, [r0, #4]
   1c660:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
    scanp->timing.interval = ble_ll_scan_time_hci_to_ticks(hcc->scan_itvl);
   1c664:	8800      	ldrh	r0, [r0, #0]
    return os_cputime_usecs_to_ticks(value * BLE_HCI_SCAN_ITVL);
   1c666:	f240 2671 	movw	r6, #625	; 0x271
   1c66a:	fb06 f000 	mul.w	r0, r6, r0
   1c66e:	f012 fc23 	bl	2eeb8 <os_cputime_usecs_to_ticks>
    scanp->timing.interval = ble_ll_scan_time_hci_to_ticks(hcc->scan_itvl);
   1c672:	67e0      	str	r0, [r4, #124]	; 0x7c
    scanp->timing.window = ble_ll_scan_time_hci_to_ticks(hcc->scan_window);
   1c674:	8868      	ldrh	r0, [r5, #2]
    return os_cputime_usecs_to_ticks(value * BLE_HCI_SCAN_ITVL);
   1c676:	fb06 f000 	mul.w	r0, r6, r0
   1c67a:	f012 fc1d 	bl	2eeb8 <os_cputime_usecs_to_ticks>
    scanp->timing.window = ble_ll_scan_time_hci_to_ticks(hcc->scan_window);
   1c67e:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    scanp->scan_type = BLE_SCAN_TYPE_INITIATE;
   1c682:	2302      	movs	r3, #2
   1c684:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    rc = ble_ll_scan_sm_start(scansm);
   1c688:	4620      	mov	r0, r4
   1c68a:	f7ff fc3d 	bl	1bf08 <ble_ll_scan_sm_start>
    if (sm == NULL) {
   1c68e:	b117      	cbz	r7, 1c696 <ble_ll_scan_initiator_start+0x4e>
    if (rc == BLE_ERR_SUCCESS) {
   1c690:	b110      	cbz	r0, 1c698 <ble_ll_scan_initiator_start+0x50>
        *sm = NULL;
   1c692:	2300      	movs	r3, #0
   1c694:	603b      	str	r3, [r7, #0]
}
   1c696:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        *sm = scansm;
   1c698:	603c      	str	r4, [r7, #0]
   1c69a:	e7fc      	b.n	1c696 <ble_ll_scan_initiator_start+0x4e>
   1c69c:	20001f10 	.word	0x20001f10

0001c6a0 <ble_ll_scan_enabled>:
}
   1c6a0:	4b01      	ldr	r3, [pc, #4]	; (1c6a8 <ble_ll_scan_enabled+0x8>)
   1c6a2:	7818      	ldrb	r0, [r3, #0]
   1c6a4:	4770      	bx	lr
   1c6a6:	bf00      	nop
   1c6a8:	20001f10 	.word	0x20001f10

0001c6ac <ble_ll_scan_get_peer_rpa>:
}
   1c6ac:	4800      	ldr	r0, [pc, #0]	; (1c6b0 <ble_ll_scan_get_peer_rpa+0x4>)
   1c6ae:	4770      	bx	lr
   1c6b0:	20001f16 	.word	0x20001f16

0001c6b4 <ble_ll_scan_get_local_rpa>:
}
   1c6b4:	4800      	ldr	r0, [pc, #0]	; (1c6b8 <ble_ll_scan_get_local_rpa+0x4>)
   1c6b6:	4770      	bx	lr
   1c6b8:	20001f27 	.word	0x20001f27

0001c6bc <ble_ll_scan_set_peer_rpa>:
    memcpy(scansm->scan_peer_rpa, rpa, BLE_DEV_ADDR_LEN);
   1c6bc:	4b03      	ldr	r3, [pc, #12]	; (1c6cc <ble_ll_scan_set_peer_rpa+0x10>)
   1c6be:	6802      	ldr	r2, [r0, #0]
   1c6c0:	f8c3 2006 	str.w	r2, [r3, #6]
   1c6c4:	8882      	ldrh	r2, [r0, #4]
   1c6c6:	815a      	strh	r2, [r3, #10]
}
   1c6c8:	4770      	bx	lr
   1c6ca:	bf00      	nop
   1c6cc:	20001f10 	.word	0x20001f10

0001c6d0 <ble_ll_scan_get_pdu_data>:
}
   1c6d0:	4800      	ldr	r0, [pc, #0]	; (1c6d4 <ble_ll_scan_get_pdu_data+0x4>)
   1c6d2:	4770      	bx	lr
   1c6d4:	20001f26 	.word	0x20001f26

0001c6d8 <ble_ll_scan_whitelist_enabled>:
    return g_ble_ll_scan_sm.scanp->scan_filt_policy & 1;
   1c6d8:	4b02      	ldr	r3, [pc, #8]	; (1c6e4 <ble_ll_scan_whitelist_enabled+0xc>)
   1c6da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   1c6dc:	7898      	ldrb	r0, [r3, #2]
}
   1c6de:	f000 0001 	and.w	r0, r0, #1
   1c6e2:	4770      	bx	lr
   1c6e4:	20001f10 	.word	0x20001f10

0001c6e8 <ble_ll_scan_reset>:
 *
 * @return int
 */
void
ble_ll_scan_reset(void)
{
   1c6e8:	b510      	push	{r4, lr}
    struct ble_ll_scan_sm *scansm;

    scansm = &g_ble_ll_scan_sm;

    /* If enabled, stop it. */
    if (scansm->scan_enabled) {
   1c6ea:	4b0c      	ldr	r3, [pc, #48]	; (1c71c <ble_ll_scan_reset+0x34>)
   1c6ec:	781b      	ldrb	r3, [r3, #0]
   1c6ee:	b983      	cbnz	r3, 1c712 <ble_ll_scan_reset+0x2a>
    os_cputime_timer_stop(&scansm->duration_timer);
    os_cputime_timer_stop(&scansm->period_timer);
#endif

    /* Reset duplicate advertisers and those from which we rxd a response */
    g_ble_ll_scan_num_rsp_advs = 0;
   1c6f0:	2400      	movs	r4, #0
   1c6f2:	4b0b      	ldr	r3, [pc, #44]	; (1c720 <ble_ll_scan_reset+0x38>)
   1c6f4:	701c      	strb	r4, [r3, #0]
    memset(&g_ble_ll_scan_rsp_advs[0], 0, sizeof(g_ble_ll_scan_rsp_advs));
   1c6f6:	2250      	movs	r2, #80	; 0x50
   1c6f8:	4621      	mov	r1, r4
   1c6fa:	480a      	ldr	r0, [pc, #40]	; (1c724 <ble_ll_scan_reset+0x3c>)
   1c6fc:	f7f2 f978 	bl	e9f0 <memset>

    os_mempool_clear(&g_scan_dup_pool);
   1c700:	4809      	ldr	r0, [pc, #36]	; (1c728 <ble_ll_scan_reset+0x40>)
   1c702:	f7f1 fa49 	bl	db98 <os_mempool_clear>
    TAILQ_INIT(&g_scan_dup_list);
   1c706:	4b09      	ldr	r3, [pc, #36]	; (1c72c <ble_ll_scan_reset+0x44>)
   1c708:	601c      	str	r4, [r3, #0]
   1c70a:	605b      	str	r3, [r3, #4]
    /* clear memory pool for AUX scan results */
    os_mempool_clear(&ext_scan_aux_pool);
#endif

    /* Call the common init function again */
    ble_ll_scan_common_init();
   1c70c:	f7ff fc50 	bl	1bfb0 <ble_ll_scan_common_init>
}
   1c710:	bd10      	pop	{r4, pc}
        ble_ll_scan_sm_stop(0);
   1c712:	2000      	movs	r0, #0
   1c714:	f7ff fd0c 	bl	1c130 <ble_ll_scan_sm_stop>
   1c718:	e7ea      	b.n	1c6f0 <ble_ll_scan_reset+0x8>
   1c71a:	bf00      	nop
   1c71c:	20001f10 	.word	0x20001f10
   1c720:	20001ef8 	.word	0x20001ef8
   1c724:	20003be0 	.word	0x20003be0
   1c728:	20002020 	.word	0x20002020
   1c72c:	20001f98 	.word	0x20001f98

0001c730 <ble_ll_scan_init>:
 * Initialize a scanner. Must be called before scanning can be started.
 * Expected to be called with a un-initialized scanning state machine.
 */
void
ble_ll_scan_init(void)
{
   1c730:	b500      	push	{lr}
   1c732:	b083      	sub	sp, #12
                          ext_scan_aux_mem,
                          "ble_ll_aux_scan_pool");
    BLE_LL_ASSERT(err == 0);
#endif

    err = os_mempool_init(&g_scan_dup_pool,
   1c734:	4b0d      	ldr	r3, [pc, #52]	; (1c76c <ble_ll_scan_init+0x3c>)
   1c736:	9300      	str	r3, [sp, #0]
   1c738:	4b0d      	ldr	r3, [pc, #52]	; (1c770 <ble_ll_scan_init+0x40>)
   1c73a:	2210      	movs	r2, #16
   1c73c:	2108      	movs	r1, #8
   1c73e:	480d      	ldr	r0, [pc, #52]	; (1c774 <ble_ll_scan_init+0x44>)
   1c740:	f7f1 fa20 	bl	db84 <os_mempool_init>
                          MYNEWT_VAL(BLE_LL_NUM_SCAN_DUP_ADVS),
                          sizeof(struct ble_ll_scan_dup_entry),
                          g_scan_dup_mem,
                          "ble_ll_scan_dup_pool");
    BLE_LL_ASSERT(err == 0);
   1c744:	b940      	cbnz	r0, 1c758 <ble_ll_scan_init+0x28>

    TAILQ_INIT(&g_scan_dup_list);
   1c746:	4b0c      	ldr	r3, [pc, #48]	; (1c778 <ble_ll_scan_init+0x48>)
   1c748:	2200      	movs	r2, #0
   1c74a:	601a      	str	r2, [r3, #0]
   1c74c:	605b      	str	r3, [r3, #4]

    ble_ll_scan_common_init();
   1c74e:	f7ff fc2f 	bl	1bfb0 <ble_ll_scan_common_init>
}
   1c752:	b003      	add	sp, #12
   1c754:	f85d fb04 	ldr.w	pc, [sp], #4
    BLE_LL_ASSERT(err == 0);
   1c758:	f7ef fd46 	bl	c1e8 <hal_debugger_connected>
   1c75c:	b100      	cbz	r0, 1c760 <ble_ll_scan_init+0x30>
   1c75e:	be01      	bkpt	0x0001
   1c760:	2300      	movs	r3, #0
   1c762:	461a      	mov	r2, r3
   1c764:	4619      	mov	r1, r3
   1c766:	4618      	mov	r0, r3
   1c768:	f7f0 f9f2 	bl	cb50 <__assert_func>
   1c76c:	00031de8 	.word	0x00031de8
   1c770:	20001fa0 	.word	0x20001fa0
   1c774:	20002020 	.word	0x20002020
   1c778:	20001f98 	.word	0x20001f98

0001c77c <ble_ll_sched_is_overlap>:
 * @return int 0: dont overlap 1:overlap
 */
static int
ble_ll_sched_is_overlap(struct ble_ll_sched_item *s1,
                        struct ble_ll_sched_item *s2)
{
   1c77c:	b410      	push	{r4}
    int rc;

    rc = 1;
    if ((int32_t)(s1->start_time - s2->start_time) < 0) {
   1c77e:	6843      	ldr	r3, [r0, #4]
   1c780:	684a      	ldr	r2, [r1, #4]
   1c782:	1a9c      	subs	r4, r3, r2
   1c784:	2c00      	cmp	r4, #0
   1c786:	db06      	blt.n	1c796 <ble_ll_sched_is_overlap+0x1a>
        if ((int32_t)(s1->end_time - s2->start_time) <= 0) {
            rc = 0;
        }
    } else {
        /* Check for overlap */
        if ((int32_t)(s1->start_time - s2->end_time) >= 0) {
   1c788:	688a      	ldr	r2, [r1, #8]
   1c78a:	1a9b      	subs	r3, r3, r2
   1c78c:	2b00      	cmp	r3, #0
   1c78e:	db08      	blt.n	1c7a2 <ble_ll_sched_is_overlap+0x26>
            rc = 0;
   1c790:	2000      	movs	r0, #0
        }
    }

    return rc;
}
   1c792:	bc10      	pop	{r4}
   1c794:	4770      	bx	lr
        if ((int32_t)(s1->end_time - s2->start_time) <= 0) {
   1c796:	6883      	ldr	r3, [r0, #8]
   1c798:	1a9a      	subs	r2, r3, r2
   1c79a:	2a00      	cmp	r2, #0
   1c79c:	dd03      	ble.n	1c7a6 <ble_ll_sched_is_overlap+0x2a>
    rc = 1;
   1c79e:	2001      	movs	r0, #1
   1c7a0:	e7f7      	b.n	1c792 <ble_ll_sched_is_overlap+0x16>
   1c7a2:	2001      	movs	r0, #1
   1c7a4:	e7f5      	b.n	1c792 <ble_ll_sched_is_overlap+0x16>
            rc = 0;
   1c7a6:	2000      	movs	r0, #0
   1c7a8:	e7f3      	b.n	1c792 <ble_ll_sched_is_overlap+0x16>
	...

0001c7ac <ble_ll_sched_insert_if_empty>:
static struct ble_ll_sched_item *
ble_ll_sched_insert_if_empty(struct ble_ll_sched_item *sch)
{
    struct ble_ll_sched_item *entry;

    entry = TAILQ_FIRST(&g_ble_ll_sched_q);
   1c7ac:	4b07      	ldr	r3, [pc, #28]	; (1c7cc <ble_ll_sched_insert_if_empty+0x20>)
   1c7ae:	681b      	ldr	r3, [r3, #0]
    if (!entry) {
   1c7b0:	b10b      	cbz	r3, 1c7b6 <ble_ll_sched_insert_if_empty+0xa>
        TAILQ_INSERT_HEAD(&g_ble_ll_sched_q, sch, link);
        sch->enqueued = 1;
    }
    return entry;
}
   1c7b2:	4618      	mov	r0, r3
   1c7b4:	4770      	bx	lr
        TAILQ_INSERT_HEAD(&g_ble_ll_sched_q, sch, link);
   1c7b6:	4601      	mov	r1, r0
   1c7b8:	f841 3f14 	str.w	r3, [r1, #20]!
   1c7bc:	4a03      	ldr	r2, [pc, #12]	; (1c7cc <ble_ll_sched_insert_if_empty+0x20>)
   1c7be:	6051      	str	r1, [r2, #4]
   1c7c0:	6010      	str	r0, [r2, #0]
   1c7c2:	6182      	str	r2, [r0, #24]
        sch->enqueued = 1;
   1c7c4:	2201      	movs	r2, #1
   1c7c6:	7042      	strb	r2, [r0, #1]
    return entry;
   1c7c8:	e7f3      	b.n	1c7b2 <ble_ll_sched_insert_if_empty+0x6>
   1c7ca:	bf00      	nop
   1c7cc:	20003c4c 	.word	0x20003c4c

0001c7d0 <ble_ll_sched_conn_overlap>:
{
   1c7d0:	b508      	push	{r3, lr}
    if (entry->sched_type == BLE_LL_SCHED_TYPE_CONN) {
   1c7d2:	7803      	ldrb	r3, [r0, #0]
   1c7d4:	2b03      	cmp	r3, #3
   1c7d6:	d113      	bne.n	1c800 <ble_ll_sched_conn_overlap+0x30>
        connsm = (struct ble_ll_conn_sm *)entry->cb_arg;
   1c7d8:	68c2      	ldr	r2, [r0, #12]
        entry->enqueued = 0;
   1c7da:	2300      	movs	r3, #0
   1c7dc:	7043      	strb	r3, [r0, #1]
        TAILQ_REMOVE(&g_ble_ll_sched_q, entry, link);
   1c7de:	6943      	ldr	r3, [r0, #20]
   1c7e0:	b153      	cbz	r3, 1c7f8 <ble_ll_sched_conn_overlap+0x28>
   1c7e2:	6981      	ldr	r1, [r0, #24]
   1c7e4:	6199      	str	r1, [r3, #24]
   1c7e6:	6983      	ldr	r3, [r0, #24]
   1c7e8:	6941      	ldr	r1, [r0, #20]
   1c7ea:	6019      	str	r1, [r3, #0]
        ble_ll_event_send(&connsm->conn_ev_end);
   1c7ec:	f102 009c 	add.w	r0, r2, #156	; 0x9c
   1c7f0:	f7f8 f996 	bl	14b20 <ble_ll_event_send>
        rc = 0;
   1c7f4:	2000      	movs	r0, #0
}
   1c7f6:	bd08      	pop	{r3, pc}
        TAILQ_REMOVE(&g_ble_ll_sched_q, entry, link);
   1c7f8:	6981      	ldr	r1, [r0, #24]
   1c7fa:	4b03      	ldr	r3, [pc, #12]	; (1c808 <ble_ll_sched_conn_overlap+0x38>)
   1c7fc:	6059      	str	r1, [r3, #4]
   1c7fe:	e7f2      	b.n	1c7e6 <ble_ll_sched_conn_overlap+0x16>
        rc = -1;
   1c800:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return rc;
   1c804:	e7f7      	b.n	1c7f6 <ble_ll_sched_conn_overlap+0x26>
   1c806:	bf00      	nop
   1c808:	20003c4c 	.word	0x20003c4c

0001c80c <ble_ll_sched_overlaps_current>:
{
   1c80c:	b510      	push	{r4, lr}
   1c80e:	4604      	mov	r4, r0
    if (ble_ll_state_get() == BLE_LL_STATE_CONNECTION) {
   1c810:	f7f8 f980 	bl	14b14 <ble_ll_state_get>
   1c814:	2804      	cmp	r0, #4
   1c816:	d001      	beq.n	1c81c <ble_ll_sched_overlaps_current+0x10>
    rc = 0;
   1c818:	2000      	movs	r0, #0
}
   1c81a:	bd10      	pop	{r4, pc}
        ce_end_time = ble_ll_conn_get_ce_end_time();
   1c81c:	f7fa f8e8 	bl	169f0 <ble_ll_conn_get_ce_end_time>
        if ((int32_t)(ce_end_time - sch->start_time) > 0) {
   1c820:	6863      	ldr	r3, [r4, #4]
   1c822:	1ac0      	subs	r0, r0, r3
   1c824:	2800      	cmp	r0, #0
   1c826:	dd01      	ble.n	1c82c <ble_ll_sched_overlaps_current+0x20>
            rc = 1;
   1c828:	2001      	movs	r0, #1
    return rc;
   1c82a:	e7f6      	b.n	1c81a <ble_ll_sched_overlaps_current+0xe>
    rc = 0;
   1c82c:	2000      	movs	r0, #0
   1c82e:	e7f4      	b.n	1c81a <ble_ll_sched_overlaps_current+0xe>

0001c830 <ble_ll_sched_execute_item>:
 *
 * @return int 0: schedule item is not over; otherwise schedule item is done.
 */
static int
ble_ll_sched_execute_item(struct ble_ll_sched_item *sch)
{
   1c830:	b538      	push	{r3, r4, r5, lr}
   1c832:	4604      	mov	r4, r0
    int rc;
    uint8_t lls;

    lls = ble_ll_state_get();
   1c834:	f7f8 f96e 	bl	14b14 <ble_ll_state_get>
   1c838:	4605      	mov	r5, r0

    ble_ll_trace_u32x3(BLE_LL_TRACE_ID_SCHED, lls, os_cputime_get32(),
   1c83a:	f012 fb38 	bl	2eeae <os_cputime_get32>
                       sch->start_time);

    if (lls == BLE_LL_STATE_STANDBY) {
   1c83e:	b1a5      	cbz	r5, 1c86a <ble_ll_sched_execute_item+0x3a>
     * BLE_LL_STATE_INITIATING
     * BLE_LL_STATE_STANDBY
     *
     * Let scanner to decide to disable phy or not.
     */
    if (sch->sched_type == BLE_LL_SCHED_TYPE_AUX_SCAN) {
   1c840:	7823      	ldrb	r3, [r4, #0]
   1c842:	2b04      	cmp	r3, #4
   1c844:	d103      	bne.n	1c84e <ble_ll_sched_execute_item+0x1e>
        if (lls == BLE_LL_STATE_INITIATING || lls == BLE_LL_STATE_SCANNING) {
   1c846:	1eab      	subs	r3, r5, #2
   1c848:	b2db      	uxtb	r3, r3
   1c84a:	2b01      	cmp	r3, #1
   1c84c:	d90d      	bls.n	1c86a <ble_ll_sched_execute_item+0x3a>
     * This is either an advertising event or connection event start. If
     * we are scanning or initiating just stop it.
     */

    /* We have to disable the PHY no matter what */
    ble_phy_disable();
   1c84e:	f001 fb03 	bl	1de58 <ble_phy_disable>

    if (lls == BLE_LL_STATE_SCANNING) {
   1c852:	2d02      	cmp	r5, #2
   1c854:	d00e      	beq.n	1c874 <ble_ll_sched_execute_item+0x44>
        ble_ll_state_set(BLE_LL_STATE_STANDBY);
        ble_ll_scan_halt();
    } else if (lls == BLE_LL_STATE_INITIATING) {
   1c856:	2d03      	cmp	r5, #3
   1c858:	d012      	beq.n	1c880 <ble_ll_sched_execute_item+0x50>
        ble_ll_state_set(BLE_LL_STATE_STANDBY);
        ble_ll_scan_halt();
        /* PHY is disabled - make sure we do not wait for AUX_CONNECT_RSP */
        ble_ll_conn_reset_pending_aux_conn_rsp();
    } else if (lls == BLE_LL_STATE_ADV) {
   1c85a:	2d01      	cmp	r5, #1
   1c85c:	d018      	beq.n	1c890 <ble_ll_sched_execute_item+0x60>
    } else if (lls == BLE_LL_STATE_SYNC) {
        STATS_INC(ble_ll_stats, sched_state_sync_errs);
        ble_ll_sync_halt();
#endif
    } else {
        STATS_INC(ble_ll_stats, sched_state_conn_errs);
   1c85e:	4a16      	ldr	r2, [pc, #88]	; (1c8b8 <ble_ll_sched_execute_item+0x88>)
   1c860:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
   1c862:	3301      	adds	r3, #1
   1c864:	67d3      	str	r3, [r2, #124]	; 0x7c
        ble_ll_conn_event_halt();
   1c866:	f7fa fd2f 	bl	172c8 <ble_ll_conn_event_halt>
    }

sched:
    BLE_LL_DEBUG_GPIO(SCHED_ITEM_CB, 1);
    BLE_LL_ASSERT(sch->sched_cb);
   1c86a:	6923      	ldr	r3, [r4, #16]
   1c86c:	b1cb      	cbz	r3, 1c8a2 <ble_ll_sched_execute_item+0x72>
    rc = sch->sched_cb(sch);
   1c86e:	4620      	mov	r0, r4
   1c870:	4798      	blx	r3
    BLE_LL_DEBUG_GPIO(SCHED_ITEM_CB, 0);
    return rc;
}
   1c872:	bd38      	pop	{r3, r4, r5, pc}
        ble_ll_state_set(BLE_LL_STATE_STANDBY);
   1c874:	2000      	movs	r0, #0
   1c876:	f7f8 f947 	bl	14b08 <ble_ll_state_set>
        ble_ll_scan_halt();
   1c87a:	f7ff fc4b 	bl	1c114 <ble_ll_scan_halt>
   1c87e:	e7f4      	b.n	1c86a <ble_ll_sched_execute_item+0x3a>
        ble_ll_state_set(BLE_LL_STATE_STANDBY);
   1c880:	2000      	movs	r0, #0
   1c882:	f7f8 f941 	bl	14b08 <ble_ll_state_set>
        ble_ll_scan_halt();
   1c886:	f7ff fc45 	bl	1c114 <ble_ll_scan_halt>
        ble_ll_conn_reset_pending_aux_conn_rsp();
   1c88a:	f7fa facd 	bl	16e28 <ble_ll_conn_reset_pending_aux_conn_rsp>
   1c88e:	e7ec      	b.n	1c86a <ble_ll_sched_execute_item+0x3a>
        STATS_INC(ble_ll_stats, sched_state_adv_errs);
   1c890:	4a09      	ldr	r2, [pc, #36]	; (1c8b8 <ble_ll_sched_execute_item+0x88>)
   1c892:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
   1c896:	3301      	adds	r3, #1
   1c898:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
        ble_ll_adv_halt();
   1c89c:	f7f9 f924 	bl	15ae8 <ble_ll_adv_halt>
   1c8a0:	e7e3      	b.n	1c86a <ble_ll_sched_execute_item+0x3a>
    BLE_LL_ASSERT(sch->sched_cb);
   1c8a2:	f7ef fca1 	bl	c1e8 <hal_debugger_connected>
   1c8a6:	b100      	cbz	r0, 1c8aa <ble_ll_sched_execute_item+0x7a>
   1c8a8:	be01      	bkpt	0x0001
   1c8aa:	2300      	movs	r3, #0
   1c8ac:	461a      	mov	r2, r3
   1c8ae:	4619      	mov	r1, r3
   1c8b0:	4618      	mov	r0, r3
   1c8b2:	f7f0 f94d 	bl	cb50 <__assert_func>
   1c8b6:	bf00      	nop
   1c8b8:	200035c0 	.word	0x200035c0

0001c8bc <ble_ll_sched_run>:
    struct ble_ll_sched_item *sch;

    BLE_LL_DEBUG_GPIO(SCHED_RUN, 1);

    /* Look through schedule queue */
    sch = TAILQ_FIRST(&g_ble_ll_sched_q);
   1c8bc:	4b0f      	ldr	r3, [pc, #60]	; (1c8fc <ble_ll_sched_run+0x40>)
   1c8be:	6818      	ldr	r0, [r3, #0]
    if (sch) {
   1c8c0:	b1d0      	cbz	r0, 1c8f8 <ble_ll_sched_run+0x3c>
{
   1c8c2:	b510      	push	{r4, lr}
            g_ble_ll_sched_max_early = dt;
        }
#endif

        /* Remove schedule item and execute the callback */
        TAILQ_REMOVE(&g_ble_ll_sched_q, sch, link);
   1c8c4:	6943      	ldr	r3, [r0, #20]
   1c8c6:	b19b      	cbz	r3, 1c8f0 <ble_ll_sched_run+0x34>
   1c8c8:	6982      	ldr	r2, [r0, #24]
   1c8ca:	619a      	str	r2, [r3, #24]
   1c8cc:	6983      	ldr	r3, [r0, #24]
   1c8ce:	6942      	ldr	r2, [r0, #20]
   1c8d0:	601a      	str	r2, [r3, #0]
        sch->enqueued = 0;
   1c8d2:	2300      	movs	r3, #0
   1c8d4:	7043      	strb	r3, [r0, #1]
        ble_ll_sched_execute_item(sch);
   1c8d6:	f7ff ffab 	bl	1c830 <ble_ll_sched_execute_item>

        /* Restart if there is an item on the schedule */
        sch = TAILQ_FIRST(&g_ble_ll_sched_q);
   1c8da:	4b08      	ldr	r3, [pc, #32]	; (1c8fc <ble_ll_sched_run+0x40>)
   1c8dc:	681c      	ldr	r4, [r3, #0]
        if (sch) {
   1c8de:	b11c      	cbz	r4, 1c8e8 <ble_ll_sched_run+0x2c>
            os_cputime_timer_start(&g_ble_ll_sched_timer, sch->start_time);
   1c8e0:	6861      	ldr	r1, [r4, #4]
   1c8e2:	4807      	ldr	r0, [pc, #28]	; (1c900 <ble_ll_sched_run+0x44>)
   1c8e4:	f012 fadb 	bl	2ee9e <os_cputime_timer_start>
        }
        ble_ll_rfmgmt_sched_changed(sch);
   1c8e8:	4620      	mov	r0, r4
   1c8ea:	f7fe fd9f 	bl	1b42c <ble_ll_rfmgmt_sched_changed>
    }

    BLE_LL_DEBUG_GPIO(SCHED_RUN, 0);
}
   1c8ee:	bd10      	pop	{r4, pc}
        TAILQ_REMOVE(&g_ble_ll_sched_q, sch, link);
   1c8f0:	6982      	ldr	r2, [r0, #24]
   1c8f2:	4b02      	ldr	r3, [pc, #8]	; (1c8fc <ble_ll_sched_run+0x40>)
   1c8f4:	605a      	str	r2, [r3, #4]
   1c8f6:	e7e9      	b.n	1c8cc <ble_ll_sched_run+0x10>
   1c8f8:	4770      	bx	lr
   1c8fa:	bf00      	nop
   1c8fc:	20003c4c 	.word	0x20003c4c
   1c900:	20003c34 	.word	0x20003c34

0001c904 <ble_ll_sched_conn_reschedule>:
{
   1c904:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c908:	4682      	mov	sl, r0
    sch = &connsm->conn_sch;
   1c90a:	f100 07dc 	add.w	r7, r0, #220	; 0xdc
    sch->start_time = connsm->anchor_point - g_ble_ll_sched_offset_ticks;
   1c90e:	6f43      	ldr	r3, [r0, #116]	; 0x74
   1c910:	4a62      	ldr	r2, [pc, #392]	; (1ca9c <ble_ll_sched_conn_reschedule+0x198>)
   1c912:	7812      	ldrb	r2, [r2, #0]
   1c914:	1a9b      	subs	r3, r3, r2
   1c916:	f8c0 30e0 	str.w	r3, [r0, #224]	; 0xe0
    if (connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) {
   1c91a:	79c3      	ldrb	r3, [r0, #7]
   1c91c:	2b02      	cmp	r3, #2
   1c91e:	d01f      	beq.n	1c960 <ble_ll_sched_conn_reschedule+0x5c>
        sch->remainder = connsm->anchor_point_usecs;
   1c920:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
   1c924:	f880 30de 	strb.w	r3, [r0, #222]	; 0xde
    sch->end_time = connsm->ce_end_time;
   1c928:	f8da 305c 	ldr.w	r3, [sl, #92]	; 0x5c
   1c92c:	f8ca 30e4 	str.w	r3, [sl, #228]	; 0xe4
    if ((int32_t)(sch->start_time - os_cputime_get32()) < 0) {
   1c930:	f8da 40e0 	ldr.w	r4, [sl, #224]	; 0xe0
   1c934:	f012 fabb 	bl	2eeae <os_cputime_get32>
   1c938:	1a20      	subs	r0, r4, r0
   1c93a:	2800      	cmp	r0, #0
   1c93c:	f2c0 80ab 	blt.w	1ca96 <ble_ll_sched_conn_reschedule+0x192>
    OS_ENTER_CRITICAL(sr);
   1c940:	f7f1 fdf8 	bl	e534 <os_arch_save_sr>
   1c944:	4681      	mov	r9, r0
    if (ble_ll_sched_overlaps_current(sch)) {
   1c946:	4638      	mov	r0, r7
   1c948:	f7ff ff60 	bl	1c80c <ble_ll_sched_overlaps_current>
   1c94c:	4680      	mov	r8, r0
   1c94e:	b9a8      	cbnz	r0, 1c97c <ble_ll_sched_conn_reschedule+0x78>
    os_cputime_timer_stop(&g_ble_ll_sched_timer);
   1c950:	4853      	ldr	r0, [pc, #332]	; (1caa0 <ble_ll_sched_conn_reschedule+0x19c>)
   1c952:	f012 faa8 	bl	2eea6 <os_cputime_timer_stop>
    TAILQ_FOREACH(entry, &g_ble_ll_sched_q, link) {
   1c956:	4b53      	ldr	r3, [pc, #332]	; (1caa4 <ble_ll_sched_conn_reschedule+0x1a0>)
   1c958:	681d      	ldr	r5, [r3, #0]
    end_overlap = NULL;
   1c95a:	2600      	movs	r6, #0
    start_overlap = NULL;
   1c95c:	4634      	mov	r4, r6
    TAILQ_FOREACH(entry, &g_ble_ll_sched_q, link) {
   1c95e:	e02b      	b.n	1c9b8 <ble_ll_sched_conn_reschedule+0xb4>
        sch->start_time -= (os_cputime_usecs_to_ticks(usecs) + 1);
   1c960:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
   1c964:	f012 faa8 	bl	2eeb8 <os_cputime_usecs_to_ticks>
   1c968:	3001      	adds	r0, #1
   1c96a:	f8da 30e0 	ldr.w	r3, [sl, #224]	; 0xe0
   1c96e:	1a1b      	subs	r3, r3, r0
   1c970:	f8ca 30e0 	str.w	r3, [sl, #224]	; 0xe0
        sch->remainder = 0;
   1c974:	2300      	movs	r3, #0
   1c976:	f88a 30de 	strb.w	r3, [sl, #222]	; 0xde
   1c97a:	e7d5      	b.n	1c928 <ble_ll_sched_conn_reschedule+0x24>
        OS_EXIT_CRITICAL(sr);
   1c97c:	4648      	mov	r0, r9
   1c97e:	f7f1 fddf 	bl	e540 <os_arch_restore_sr>
        return -1;
   1c982:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   1c986:	e074      	b.n	1ca72 <ble_ll_sched_conn_reschedule+0x16e>
                            !ble_ll_conn_is_lru((struct ble_ll_conn_sm *)sch->cb_arg,
   1c988:	68e9      	ldr	r1, [r5, #12]
   1c98a:	f8da 00e8 	ldr.w	r0, [sl, #232]	; 0xe8
   1c98e:	f7fa f825 	bl	169dc <ble_ll_conn_is_lru>
           if (entry->sched_type == BLE_LL_SCHED_TYPE_CONN &&
   1c992:	b9e0      	cbnz	r0, 1c9ce <ble_ll_sched_conn_reschedule+0xca>
                start_overlap = NULL;
   1c994:	2400      	movs	r4, #0
                rc = -1;
   1c996:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    if (!rc) {
   1c99a:	f1b8 0f00 	cmp.w	r8, #0
   1c99e:	d143      	bne.n	1ca28 <ble_ll_sched_conn_reschedule+0x124>
        if (!entry) {
   1c9a0:	b335      	cbz	r5, 1c9f0 <ble_ll_sched_conn_reschedule+0xec>
        sch->enqueued = 1;
   1c9a2:	2301      	movs	r3, #1
   1c9a4:	f88a 30dd 	strb.w	r3, [sl, #221]	; 0xdd
    while (entry) {
   1c9a8:	e03e      	b.n	1ca28 <ble_ll_sched_conn_reschedule+0x124>
            if ((int32_t)(sch->end_time - entry->start_time) <= 0) {
   1c9aa:	f8da 30e4 	ldr.w	r3, [sl, #228]	; 0xe4
   1c9ae:	6869      	ldr	r1, [r5, #4]
   1c9b0:	1a5b      	subs	r3, r3, r1
   1c9b2:	2b00      	cmp	r3, #0
   1c9b4:	dd0e      	ble.n	1c9d4 <ble_ll_sched_conn_reschedule+0xd0>
    TAILQ_FOREACH(entry, &g_ble_ll_sched_q, link) {
   1c9b6:	696d      	ldr	r5, [r5, #20]
   1c9b8:	2d00      	cmp	r5, #0
   1c9ba:	d0ee      	beq.n	1c99a <ble_ll_sched_conn_reschedule+0x96>
        if (ble_ll_sched_is_overlap(sch, entry)) {
   1c9bc:	4629      	mov	r1, r5
   1c9be:	4638      	mov	r0, r7
   1c9c0:	f7ff fedc 	bl	1c77c <ble_ll_sched_is_overlap>
   1c9c4:	2800      	cmp	r0, #0
   1c9c6:	d0f0      	beq.n	1c9aa <ble_ll_sched_conn_reschedule+0xa6>
           if (entry->sched_type == BLE_LL_SCHED_TYPE_CONN &&
   1c9c8:	782b      	ldrb	r3, [r5, #0]
   1c9ca:	2b03      	cmp	r3, #3
   1c9cc:	d0dc      	beq.n	1c988 <ble_ll_sched_conn_reschedule+0x84>
            if (start_overlap == NULL) {
   1c9ce:	b164      	cbz	r4, 1c9ea <ble_ll_sched_conn_reschedule+0xe6>
                end_overlap = entry;
   1c9d0:	462e      	mov	r6, r5
   1c9d2:	e7f0      	b.n	1c9b6 <ble_ll_sched_conn_reschedule+0xb2>
                TAILQ_INSERT_BEFORE(entry, sch, link);
   1c9d4:	69ab      	ldr	r3, [r5, #24]
   1c9d6:	f8ca 30f4 	str.w	r3, [sl, #244]	; 0xf4
   1c9da:	4653      	mov	r3, sl
   1c9dc:	f843 5ff0 	str.w	r5, [r3, #240]!
   1c9e0:	69a9      	ldr	r1, [r5, #24]
   1c9e2:	600f      	str	r7, [r1, #0]
   1c9e4:	61ab      	str	r3, [r5, #24]
                rc = 0;
   1c9e6:	4680      	mov	r8, r0
   1c9e8:	e7da      	b.n	1c9a0 <ble_ll_sched_conn_reschedule+0x9c>
                end_overlap = entry;
   1c9ea:	462e      	mov	r6, r5
                start_overlap = entry;
   1c9ec:	462c      	mov	r4, r5
   1c9ee:	e7e2      	b.n	1c9b6 <ble_ll_sched_conn_reschedule+0xb2>
            TAILQ_INSERT_TAIL(&g_ble_ll_sched_q, sch, link);
   1c9f0:	2300      	movs	r3, #0
   1c9f2:	f8ca 30f0 	str.w	r3, [sl, #240]	; 0xf0
   1c9f6:	4b2b      	ldr	r3, [pc, #172]	; (1caa4 <ble_ll_sched_conn_reschedule+0x1a0>)
   1c9f8:	685a      	ldr	r2, [r3, #4]
   1c9fa:	f8ca 20f4 	str.w	r2, [sl, #244]	; 0xf4
   1c9fe:	6017      	str	r7, [r2, #0]
   1ca00:	f10a 02f0 	add.w	r2, sl, #240	; 0xf0
   1ca04:	605a      	str	r2, [r3, #4]
   1ca06:	e7cc      	b.n	1c9a2 <ble_ll_sched_conn_reschedule+0x9e>
            tmp = (struct ble_ll_conn_sm *)entry->cb_arg;
   1ca08:	68e0      	ldr	r0, [r4, #12]
            ble_ll_event_send(&tmp->conn_ev_end);
   1ca0a:	309c      	adds	r0, #156	; 0x9c
   1ca0c:	f7f8 f888 	bl	14b20 <ble_ll_event_send>
        TAILQ_REMOVE(&g_ble_ll_sched_q, entry, link);
   1ca10:	6963      	ldr	r3, [r4, #20]
   1ca12:	b1f3      	cbz	r3, 1ca52 <ble_ll_sched_conn_reschedule+0x14e>
   1ca14:	69a2      	ldr	r2, [r4, #24]
   1ca16:	619a      	str	r2, [r3, #24]
   1ca18:	69a3      	ldr	r3, [r4, #24]
   1ca1a:	6962      	ldr	r2, [r4, #20]
   1ca1c:	601a      	str	r2, [r3, #0]
        entry->enqueued = 0;
   1ca1e:	2300      	movs	r3, #0
   1ca20:	7063      	strb	r3, [r4, #1]
        if (entry == end_overlap) {
   1ca22:	42a6      	cmp	r6, r4
   1ca24:	d019      	beq.n	1ca5a <ble_ll_sched_conn_reschedule+0x156>
        entry = start_overlap;
   1ca26:	462c      	mov	r4, r5
    while (entry) {
   1ca28:	b1bc      	cbz	r4, 1ca5a <ble_ll_sched_conn_reschedule+0x156>
        start_overlap = TAILQ_NEXT(entry,link);
   1ca2a:	6965      	ldr	r5, [r4, #20]
        switch (entry->sched_type) {
   1ca2c:	7823      	ldrb	r3, [r4, #0]
   1ca2e:	2b01      	cmp	r3, #1
   1ca30:	d00b      	beq.n	1ca4a <ble_ll_sched_conn_reschedule+0x146>
   1ca32:	2b03      	cmp	r3, #3
   1ca34:	d0e8      	beq.n	1ca08 <ble_ll_sched_conn_reschedule+0x104>
            BLE_LL_ASSERT(0);
   1ca36:	f7ef fbd7 	bl	c1e8 <hal_debugger_connected>
   1ca3a:	b100      	cbz	r0, 1ca3e <ble_ll_sched_conn_reschedule+0x13a>
   1ca3c:	be01      	bkpt	0x0001
   1ca3e:	2300      	movs	r3, #0
   1ca40:	461a      	mov	r2, r3
   1ca42:	4619      	mov	r1, r3
   1ca44:	4618      	mov	r0, r3
   1ca46:	f7f0 f883 	bl	cb50 <__assert_func>
            ble_ll_adv_event_rmvd_from_sched((struct ble_ll_adv_sm *)entry->cb_arg);
   1ca4a:	68e0      	ldr	r0, [r4, #12]
   1ca4c:	f7f9 f83e 	bl	15acc <ble_ll_adv_event_rmvd_from_sched>
            break;
   1ca50:	e7de      	b.n	1ca10 <ble_ll_sched_conn_reschedule+0x10c>
        TAILQ_REMOVE(&g_ble_ll_sched_q, entry, link);
   1ca52:	69a2      	ldr	r2, [r4, #24]
   1ca54:	4b13      	ldr	r3, [pc, #76]	; (1caa4 <ble_ll_sched_conn_reschedule+0x1a0>)
   1ca56:	605a      	str	r2, [r3, #4]
   1ca58:	e7de      	b.n	1ca18 <ble_ll_sched_conn_reschedule+0x114>
    entry = TAILQ_FIRST(&g_ble_ll_sched_q);
   1ca5a:	4b12      	ldr	r3, [pc, #72]	; (1caa4 <ble_ll_sched_conn_reschedule+0x1a0>)
   1ca5c:	681c      	ldr	r4, [r3, #0]
    if (entry == sch) {
   1ca5e:	42a7      	cmp	r7, r4
   1ca60:	d00a      	beq.n	1ca78 <ble_ll_sched_conn_reschedule+0x174>
    OS_EXIT_CRITICAL(sr);
   1ca62:	4648      	mov	r0, r9
   1ca64:	f7f1 fd6c 	bl	e540 <os_arch_restore_sr>
    BLE_LL_ASSERT(sch != NULL);
   1ca68:	b15c      	cbz	r4, 1ca82 <ble_ll_sched_conn_reschedule+0x17e>
    os_cputime_timer_start(&g_ble_ll_sched_timer, sch->start_time);
   1ca6a:	6861      	ldr	r1, [r4, #4]
   1ca6c:	480c      	ldr	r0, [pc, #48]	; (1caa0 <ble_ll_sched_conn_reschedule+0x19c>)
   1ca6e:	f012 fa16 	bl	2ee9e <os_cputime_timer_start>
}
   1ca72:	4640      	mov	r0, r8
   1ca74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        ble_ll_rfmgmt_sched_changed(sch);
   1ca78:	4638      	mov	r0, r7
   1ca7a:	f7fe fcd7 	bl	1b42c <ble_ll_rfmgmt_sched_changed>
    sch = &connsm->conn_sch;
   1ca7e:	463c      	mov	r4, r7
   1ca80:	e7ef      	b.n	1ca62 <ble_ll_sched_conn_reschedule+0x15e>
    BLE_LL_ASSERT(sch != NULL);
   1ca82:	f7ef fbb1 	bl	c1e8 <hal_debugger_connected>
   1ca86:	b100      	cbz	r0, 1ca8a <ble_ll_sched_conn_reschedule+0x186>
   1ca88:	be01      	bkpt	0x0001
   1ca8a:	2300      	movs	r3, #0
   1ca8c:	461a      	mov	r2, r3
   1ca8e:	4619      	mov	r1, r3
   1ca90:	4618      	mov	r0, r3
   1ca92:	f7f0 f85d 	bl	cb50 <__assert_func>
        return -1;
   1ca96:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   1ca9a:	e7ea      	b.n	1ca72 <ble_ll_sched_conn_reschedule+0x16e>
   1ca9c:	20003c30 	.word	0x20003c30
   1caa0:	20003c34 	.word	0x20003c34
   1caa4:	20003c4c 	.word	0x20003c4c

0001caa8 <ble_ll_sched_master_new>:
{
   1caa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1caac:	b083      	sub	sp, #12
   1caae:	4605      	mov	r5, r0
   1cab0:	460c      	mov	r4, r1
    sch = &connsm->conn_sch;
   1cab2:	f100 09dc 	add.w	r9, r0, #220	; 0xdc
    adv_rxend = os_cputime_get32();
   1cab6:	f012 f9fa 	bl	2eeae <os_cputime_get32>
    if (ble_hdr->rxinfo.channel >= BLE_PHY_NUM_DATA_CHANS) {
   1caba:	78a3      	ldrb	r3, [r4, #2]
   1cabc:	2b24      	cmp	r3, #36	; 0x24
   1cabe:	d915      	bls.n	1caec <ble_ll_sched_master_new+0x44>
        earliest_start = adv_rxend + 57;
   1cac0:	f100 0839 	add.w	r8, r0, #57	; 0x39
    earliest_end = earliest_start + dur;
   1cac4:	f108 06a4 	add.w	r6, r8, #164	; 0xa4
    itvl_t = connsm->conn_itvl_ticks;
   1cac8:	f8d5 b07c 	ldr.w	fp, [r5, #124]	; 0x7c
    OS_ENTER_CRITICAL(sr);
   1cacc:	f7f1 fd32 	bl	e534 <os_arch_save_sr>
   1cad0:	9001      	str	r0, [sp, #4]
    sch->start_time = earliest_start;
   1cad2:	f8c5 80e0 	str.w	r8, [r5, #224]	; 0xe0
    if (!ble_ll_sched_insert_if_empty(sch)) {
   1cad6:	4648      	mov	r0, r9
   1cad8:	f7ff fe68 	bl	1c7ac <ble_ll_sched_insert_if_empty>
   1cadc:	b308      	cbz	r0, 1cb22 <ble_ll_sched_master_new+0x7a>
        os_cputime_timer_stop(&g_ble_ll_sched_timer);
   1cade:	484a      	ldr	r0, [pc, #296]	; (1cc08 <ble_ll_sched_master_new+0x160>)
   1cae0:	f012 f9e1 	bl	2eea6 <os_cputime_timer_stop>
        TAILQ_FOREACH(entry, &g_ble_ll_sched_q, link) {
   1cae4:	4b49      	ldr	r3, [pc, #292]	; (1cc0c <ble_ll_sched_master_new+0x164>)
   1cae6:	681c      	ldr	r4, [r3, #0]
    earliest_start += MYNEWT_VAL(BLE_LL_CONN_INIT_MIN_WIN_OFFSET) *
   1cae8:	4647      	mov	r7, r8
        TAILQ_FOREACH(entry, &g_ble_ll_sched_q, link) {
   1caea:	e050      	b.n	1cb8e <ble_ll_sched_master_new+0xe6>
        if (ble_hdr->rxinfo.phy == BLE_PHY_1M) {
   1caec:	f994 3005 	ldrsb.w	r3, [r4, #5]
   1caf0:	2b01      	cmp	r3, #1
   1caf2:	d006      	beq.n	1cb02 <ble_ll_sched_master_new+0x5a>
        } else if (ble_hdr->rxinfo.phy == BLE_PHY_2M) {
   1caf4:	2b02      	cmp	r3, #2
   1caf6:	d007      	beq.n	1cb08 <ble_ll_sched_master_new+0x60>
        } else if (ble_hdr->rxinfo.phy == BLE_PHY_CODED) {
   1caf8:	2b03      	cmp	r3, #3
   1cafa:	d108      	bne.n	1cb0e <ble_ll_sched_master_new+0x66>
            earliest_start = adv_rxend + 223;
   1cafc:	f100 08df 	add.w	r8, r0, #223	; 0xdf
   1cb00:	e7e0      	b.n	1cac4 <ble_ll_sched_master_new+0x1c>
            earliest_start = adv_rxend + 98;
   1cb02:	f100 0862 	add.w	r8, r0, #98	; 0x62
   1cb06:	e7dd      	b.n	1cac4 <ble_ll_sched_master_new+0x1c>
            earliest_start = adv_rxend + 93;
   1cb08:	f100 085d 	add.w	r8, r0, #93	; 0x5d
   1cb0c:	e7da      	b.n	1cac4 <ble_ll_sched_master_new+0x1c>
            BLE_LL_ASSERT(0);
   1cb0e:	f7ef fb6b 	bl	c1e8 <hal_debugger_connected>
   1cb12:	b100      	cbz	r0, 1cb16 <ble_ll_sched_master_new+0x6e>
   1cb14:	be01      	bkpt	0x0001
   1cb16:	2300      	movs	r3, #0
   1cb18:	461a      	mov	r2, r3
   1cb1a:	4619      	mov	r1, r3
   1cb1c:	4618      	mov	r0, r3
   1cb1e:	f7f0 f817 	bl	cb50 <__assert_func>
        connsm->tx_win_off = MYNEWT_VAL(BLE_LL_CONN_INIT_MIN_WIN_OFFSET);
   1cb22:	f04f 0a00 	mov.w	sl, #0
   1cb26:	f8a5 a072 	strh.w	sl, [r5, #114]	; 0x72
    earliest_start += MYNEWT_VAL(BLE_LL_CONN_INIT_MIN_WIN_OFFSET) *
   1cb2a:	4647      	mov	r7, r8
    if (!rc) {
   1cb2c:	f1ba 0f00 	cmp.w	sl, #0
   1cb30:	d10b      	bne.n	1cb4a <ble_ll_sched_master_new+0xa2>
        sch->start_time = earliest_start;
   1cb32:	f8c5 70e0 	str.w	r7, [r5, #224]	; 0xe0
        sch->end_time = earliest_end;
   1cb36:	f8c5 60e4 	str.w	r6, [r5, #228]	; 0xe4
        connsm->anchor_point = earliest_start + g_ble_ll_sched_offset_ticks;
   1cb3a:	4b35      	ldr	r3, [pc, #212]	; (1cc10 <ble_ll_sched_master_new+0x168>)
   1cb3c:	781b      	ldrb	r3, [r3, #0]
   1cb3e:	441f      	add	r7, r3
   1cb40:	676f      	str	r7, [r5, #116]	; 0x74
        connsm->anchor_point_usecs = 0;
   1cb42:	2300      	movs	r3, #0
   1cb44:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
        connsm->ce_end_time = earliest_end;
   1cb48:	65ee      	str	r6, [r5, #92]	; 0x5c
    sch = TAILQ_FIRST(&g_ble_ll_sched_q);
   1cb4a:	4b30      	ldr	r3, [pc, #192]	; (1cc0c <ble_ll_sched_master_new+0x164>)
   1cb4c:	681c      	ldr	r4, [r3, #0]
    ble_ll_rfmgmt_sched_changed(sch);
   1cb4e:	4620      	mov	r0, r4
   1cb50:	f7fe fc6c 	bl	1b42c <ble_ll_rfmgmt_sched_changed>
    OS_EXIT_CRITICAL(sr);
   1cb54:	9801      	ldr	r0, [sp, #4]
   1cb56:	f7f1 fcf3 	bl	e540 <os_arch_restore_sr>
    os_cputime_timer_start(&g_ble_ll_sched_timer, sch->start_time);
   1cb5a:	6861      	ldr	r1, [r4, #4]
   1cb5c:	482a      	ldr	r0, [pc, #168]	; (1cc08 <ble_ll_sched_master_new+0x160>)
   1cb5e:	f012 f99e 	bl	2ee9e <os_cputime_timer_start>
}
   1cb62:	4650      	mov	r0, sl
   1cb64:	b003      	add	sp, #12
   1cb66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                if ((earliest_start - initial_start) <= itvl_t) {
   1cb6a:	eba7 0308 	sub.w	r3, r7, r8
   1cb6e:	455b      	cmp	r3, fp
   1cb70:	d834      	bhi.n	1cbdc <ble_ll_sched_master_new+0x134>
                    TAILQ_INSERT_BEFORE(entry, sch, link);
   1cb72:	69a3      	ldr	r3, [r4, #24]
   1cb74:	f8c5 30f4 	str.w	r3, [r5, #244]	; 0xf4
   1cb78:	462b      	mov	r3, r5
   1cb7a:	f843 4ff0 	str.w	r4, [r3, #240]!
   1cb7e:	69a2      	ldr	r2, [r4, #24]
   1cb80:	f8c2 9000 	str.w	r9, [r2]
   1cb84:	61a3      	str	r3, [r4, #24]
                    rc = 0;
   1cb86:	f04f 0a00 	mov.w	sl, #0
   1cb8a:	e015      	b.n	1cbb8 <ble_ll_sched_master_new+0x110>
        TAILQ_FOREACH(entry, &g_ble_ll_sched_q, link) {
   1cb8c:	6964      	ldr	r4, [r4, #20]
   1cb8e:	b18c      	cbz	r4, 1cbb4 <ble_ll_sched_master_new+0x10c>
            sch->start_time = earliest_start;
   1cb90:	f8c5 70e0 	str.w	r7, [r5, #224]	; 0xe0
            sch->end_time = earliest_end;
   1cb94:	f8c5 60e4 	str.w	r6, [r5, #228]	; 0xe4
            if ((int32_t)(sch->end_time - entry->start_time) <= 0) {
   1cb98:	6863      	ldr	r3, [r4, #4]
   1cb9a:	1af3      	subs	r3, r6, r3
   1cb9c:	2b00      	cmp	r3, #0
   1cb9e:	dde4      	ble.n	1cb6a <ble_ll_sched_master_new+0xc2>
            if (ble_ll_sched_is_overlap(sch, entry)) {
   1cba0:	4621      	mov	r1, r4
   1cba2:	4648      	mov	r0, r9
   1cba4:	f7ff fdea 	bl	1c77c <ble_ll_sched_is_overlap>
   1cba8:	2800      	cmp	r0, #0
   1cbaa:	d0ef      	beq.n	1cb8c <ble_ll_sched_master_new+0xe4>
                earliest_start = entry->end_time;
   1cbac:	68a7      	ldr	r7, [r4, #8]
                earliest_end = earliest_start + dur;
   1cbae:	f107 06a4 	add.w	r6, r7, #164	; 0xa4
   1cbb2:	e7eb      	b.n	1cb8c <ble_ll_sched_master_new+0xe4>
    rc = -1;
   1cbb4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
        if (!entry) {
   1cbb8:	b19c      	cbz	r4, 1cbe2 <ble_ll_sched_master_new+0x13a>
        if (!rc) {
   1cbba:	f1ba 0f00 	cmp.w	sl, #0
   1cbbe:	d1b5      	bne.n	1cb2c <ble_ll_sched_master_new+0x84>
            sch->enqueued = 1;
   1cbc0:	2301      	movs	r3, #1
   1cbc2:	f885 30dd 	strb.w	r3, [r5, #221]	; 0xdd
            dur = os_cputime_ticks_to_usecs(earliest_start - initial_start);
   1cbc6:	eba7 0008 	sub.w	r0, r7, r8
   1cbca:	f012 f97d 	bl	2eec8 <os_cputime_ticks_to_usecs>
            connsm->tx_win_off = dur / BLE_LL_CONN_TX_OFF_USECS;
   1cbce:	4b11      	ldr	r3, [pc, #68]	; (1cc14 <ble_ll_sched_master_new+0x16c>)
   1cbd0:	fba3 3000 	umull	r3, r0, r3, r0
   1cbd4:	0a80      	lsrs	r0, r0, #10
   1cbd6:	f8a5 0072 	strh.w	r0, [r5, #114]	; 0x72
   1cbda:	e7a7      	b.n	1cb2c <ble_ll_sched_master_new+0x84>
    rc = -1;
   1cbdc:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   1cbe0:	e7ea      	b.n	1cbb8 <ble_ll_sched_master_new+0x110>
            if ((earliest_start - initial_start) <= itvl_t) {
   1cbe2:	eba7 0308 	sub.w	r3, r7, r8
   1cbe6:	455b      	cmp	r3, fp
   1cbe8:	d8e7      	bhi.n	1cbba <ble_ll_sched_master_new+0x112>
                TAILQ_INSERT_TAIL(&g_ble_ll_sched_q, sch, link);
   1cbea:	2300      	movs	r3, #0
   1cbec:	f8c5 30f0 	str.w	r3, [r5, #240]	; 0xf0
   1cbf0:	4a06      	ldr	r2, [pc, #24]	; (1cc0c <ble_ll_sched_master_new+0x164>)
   1cbf2:	6851      	ldr	r1, [r2, #4]
   1cbf4:	f8c5 10f4 	str.w	r1, [r5, #244]	; 0xf4
   1cbf8:	f8c1 9000 	str.w	r9, [r1]
   1cbfc:	f105 01f0 	add.w	r1, r5, #240	; 0xf0
   1cc00:	6051      	str	r1, [r2, #4]
                rc = 0;
   1cc02:	469a      	mov	sl, r3
   1cc04:	e7dc      	b.n	1cbc0 <ble_ll_sched_master_new+0x118>
   1cc06:	bf00      	nop
   1cc08:	20003c34 	.word	0x20003c34
   1cc0c:	20003c4c 	.word	0x20003c4c
   1cc10:	20003c30 	.word	0x20003c30
   1cc14:	d1b71759 	.word	0xd1b71759

0001cc18 <ble_ll_sched_slave_new>:
{
   1cc18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1cc1c:	4605      	mov	r5, r0
    sch = &connsm->conn_sch;
   1cc1e:	f100 07dc 	add.w	r7, r0, #220	; 0xdc
    sch->start_time = connsm->anchor_point - g_ble_ll_sched_offset_ticks -
   1cc22:	6f44      	ldr	r4, [r0, #116]	; 0x74
   1cc24:	4b39      	ldr	r3, [pc, #228]	; (1cd0c <ble_ll_sched_slave_new+0xf4>)
   1cc26:	7818      	ldrb	r0, [r3, #0]
   1cc28:	1a24      	subs	r4, r4, r0
        os_cputime_usecs_to_ticks(connsm->slave_cur_window_widening) - 1;
   1cc2a:	f8d5 0088 	ldr.w	r0, [r5, #136]	; 0x88
   1cc2e:	f012 f943 	bl	2eeb8 <os_cputime_usecs_to_ticks>
    sch->start_time = connsm->anchor_point - g_ble_ll_sched_offset_ticks -
   1cc32:	1a20      	subs	r0, r4, r0
        os_cputime_usecs_to_ticks(connsm->slave_cur_window_widening) - 1;
   1cc34:	3801      	subs	r0, #1
    sch->start_time = connsm->anchor_point - g_ble_ll_sched_offset_ticks -
   1cc36:	f8c5 00e0 	str.w	r0, [r5, #224]	; 0xe0
    sch->end_time = connsm->ce_end_time;
   1cc3a:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   1cc3c:	f8c5 30e4 	str.w	r3, [r5, #228]	; 0xe4
    sch->remainder = 0;
   1cc40:	2300      	movs	r3, #0
   1cc42:	f885 30de 	strb.w	r3, [r5, #222]	; 0xde
    OS_ENTER_CRITICAL(sr);
   1cc46:	f7f1 fc75 	bl	e534 <os_arch_save_sr>
   1cc4a:	4681      	mov	r9, r0
    if (ble_ll_sched_overlaps_current(sch)) {
   1cc4c:	4638      	mov	r0, r7
   1cc4e:	f7ff fddd 	bl	1c80c <ble_ll_sched_overlaps_current>
   1cc52:	b950      	cbnz	r0, 1cc6a <ble_ll_sched_slave_new+0x52>
   1cc54:	4680      	mov	r8, r0
    entry = ble_ll_sched_insert_if_empty(sch);
   1cc56:	4638      	mov	r0, r7
   1cc58:	f7ff fda8 	bl	1c7ac <ble_ll_sched_insert_if_empty>
    if (!entry) {
   1cc5c:	4604      	mov	r4, r0
   1cc5e:	2800      	cmp	r0, #0
   1cc60:	d044      	beq.n	1ccec <ble_ll_sched_slave_new+0xd4>
        os_cputime_timer_stop(&g_ble_ll_sched_timer);
   1cc62:	482b      	ldr	r0, [pc, #172]	; (1cd10 <ble_ll_sched_slave_new+0xf8>)
   1cc64:	f012 f91f 	bl	2eea6 <os_cputime_timer_stop>
   1cc68:	e01c      	b.n	1cca4 <ble_ll_sched_slave_new+0x8c>
        OS_EXIT_CRITICAL(sr);
   1cc6a:	4648      	mov	r0, r9
   1cc6c:	f7f1 fc68 	bl	e540 <os_arch_restore_sr>
        return rc;
   1cc70:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   1cc74:	e043      	b.n	1ccfe <ble_ll_sched_slave_new+0xe6>
                TAILQ_INSERT_BEFORE(entry, sch, link);
   1cc76:	69a3      	ldr	r3, [r4, #24]
   1cc78:	f8c5 30f4 	str.w	r3, [r5, #244]	; 0xf4
   1cc7c:	462b      	mov	r3, r5
   1cc7e:	f843 4ff0 	str.w	r4, [r3, #240]!
   1cc82:	69a2      	ldr	r2, [r4, #24]
   1cc84:	6017      	str	r7, [r2, #0]
   1cc86:	61a3      	str	r3, [r4, #24]
            sch->enqueued = 1;
   1cc88:	2301      	movs	r3, #1
   1cc8a:	f885 30dd 	strb.w	r3, [r5, #221]	; 0xdd
   1cc8e:	4641      	mov	r1, r8
        next_sch = TAILQ_FIRST(&g_ble_ll_sched_q);
   1cc90:	4b20      	ldr	r3, [pc, #128]	; (1cd14 <ble_ll_sched_slave_new+0xfc>)
   1cc92:	681a      	ldr	r2, [r3, #0]
        if (next_sch == sch) {
   1cc94:	4297      	cmp	r7, r2
   1cc96:	d026      	beq.n	1cce6 <ble_ll_sched_slave_new+0xce>
    int first = 0;
   1cc98:	4643      	mov	r3, r8
            sch = next_sch;
   1cc9a:	4617      	mov	r7, r2
   1cc9c:	4688      	mov	r8, r1
   1cc9e:	e026      	b.n	1ccee <ble_ll_sched_slave_new+0xd6>
            entry = next_sch;
   1cca0:	4634      	mov	r4, r6
            if (!entry) {
   1cca2:	b1a6      	cbz	r6, 1ccce <ble_ll_sched_slave_new+0xb6>
            next_sch = entry->link.tqe_next;
   1cca4:	6966      	ldr	r6, [r4, #20]
            if ((int32_t)(sch->end_time - entry->start_time) <= 0) {
   1cca6:	f8d5 30e4 	ldr.w	r3, [r5, #228]	; 0xe4
   1ccaa:	6862      	ldr	r2, [r4, #4]
   1ccac:	1a9b      	subs	r3, r3, r2
   1ccae:	2b00      	cmp	r3, #0
   1ccb0:	dde1      	ble.n	1cc76 <ble_ll_sched_slave_new+0x5e>
            if (ble_ll_sched_is_overlap(sch, entry)) {
   1ccb2:	4621      	mov	r1, r4
   1ccb4:	4638      	mov	r0, r7
   1ccb6:	f7ff fd61 	bl	1c77c <ble_ll_sched_is_overlap>
   1ccba:	2800      	cmp	r0, #0
   1ccbc:	d0f0      	beq.n	1cca0 <ble_ll_sched_slave_new+0x88>
                if (ble_ll_sched_conn_overlap(entry)) {
   1ccbe:	4620      	mov	r0, r4
   1ccc0:	f7ff fd86 	bl	1c7d0 <ble_ll_sched_conn_overlap>
   1ccc4:	2800      	cmp	r0, #0
   1ccc6:	d0eb      	beq.n	1cca0 <ble_ll_sched_slave_new+0x88>
    rc = -1;
   1ccc8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1cccc:	e7e0      	b.n	1cc90 <ble_ll_sched_slave_new+0x78>
                TAILQ_INSERT_TAIL(&g_ble_ll_sched_q, sch, link);
   1ccce:	2300      	movs	r3, #0
   1ccd0:	f8c5 30f0 	str.w	r3, [r5, #240]	; 0xf0
   1ccd4:	4b0f      	ldr	r3, [pc, #60]	; (1cd14 <ble_ll_sched_slave_new+0xfc>)
   1ccd6:	685a      	ldr	r2, [r3, #4]
   1ccd8:	f8c5 20f4 	str.w	r2, [r5, #244]	; 0xf4
   1ccdc:	6017      	str	r7, [r2, #0]
   1ccde:	f105 02f0 	add.w	r2, r5, #240	; 0xf0
   1cce2:	605a      	str	r2, [r3, #4]
   1cce4:	e7d0      	b.n	1cc88 <ble_ll_sched_slave_new+0x70>
        if (next_sch == sch) {
   1cce6:	4688      	mov	r8, r1
            first = 1;
   1cce8:	2301      	movs	r3, #1
   1ccea:	e000      	b.n	1ccee <ble_ll_sched_slave_new+0xd6>
        first = 1;
   1ccec:	2301      	movs	r3, #1
    if (first) {
   1ccee:	b94b      	cbnz	r3, 1cd04 <ble_ll_sched_slave_new+0xec>
    OS_EXIT_CRITICAL(sr);
   1ccf0:	4648      	mov	r0, r9
   1ccf2:	f7f1 fc25 	bl	e540 <os_arch_restore_sr>
    os_cputime_timer_start(&g_ble_ll_sched_timer, sch->start_time);
   1ccf6:	6879      	ldr	r1, [r7, #4]
   1ccf8:	4805      	ldr	r0, [pc, #20]	; (1cd10 <ble_ll_sched_slave_new+0xf8>)
   1ccfa:	f012 f8d0 	bl	2ee9e <os_cputime_timer_start>
}
   1ccfe:	4640      	mov	r0, r8
   1cd00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ble_ll_rfmgmt_sched_changed(sch);
   1cd04:	4638      	mov	r0, r7
   1cd06:	f7fe fb91 	bl	1b42c <ble_ll_rfmgmt_sched_changed>
   1cd0a:	e7f1      	b.n	1ccf0 <ble_ll_sched_slave_new+0xd8>
   1cd0c:	20003c30 	.word	0x20003c30
   1cd10:	20003c34 	.word	0x20003c34
   1cd14:	20003c4c 	.word	0x20003c4c

0001cd18 <ble_ll_sched_adv_new>:
{
   1cd18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1cd1c:	4605      	mov	r5, r0
   1cd1e:	460f      	mov	r7, r1
   1cd20:	4691      	mov	r9, r2
    duration = sch->end_time - sch->start_time;
   1cd22:	6886      	ldr	r6, [r0, #8]
   1cd24:	6843      	ldr	r3, [r0, #4]
   1cd26:	1af6      	subs	r6, r6, r3
    OS_ENTER_CRITICAL(sr);
   1cd28:	f7f1 fc04 	bl	e534 <os_arch_save_sr>
   1cd2c:	4680      	mov	r8, r0
    entry = ble_ll_sched_insert_if_empty(sch);
   1cd2e:	4628      	mov	r0, r5
   1cd30:	f7ff fd3c 	bl	1c7ac <ble_ll_sched_insert_if_empty>
    if (!entry) {
   1cd34:	b128      	cbz	r0, 1cd42 <ble_ll_sched_adv_new+0x2a>
        os_cputime_timer_stop(&g_ble_ll_sched_timer);
   1cd36:	4829      	ldr	r0, [pc, #164]	; (1cddc <ble_ll_sched_adv_new+0xc4>)
   1cd38:	f012 f8b5 	bl	2eea6 <os_cputime_timer_stop>
        TAILQ_FOREACH(entry, &g_ble_ll_sched_q, link) {
   1cd3c:	4b28      	ldr	r3, [pc, #160]	; (1cde0 <ble_ll_sched_adv_new+0xc8>)
   1cd3e:	681c      	ldr	r4, [r3, #0]
   1cd40:	e022      	b.n	1cd88 <ble_ll_sched_adv_new+0x70>
        adv_start = sch->start_time;
   1cd42:	6869      	ldr	r1, [r5, #4]
   1cd44:	462c      	mov	r4, r5
   1cd46:	e00d      	b.n	1cd64 <ble_ll_sched_adv_new+0x4c>
                TAILQ_INSERT_BEFORE(entry, sch, link);
   1cd48:	69a3      	ldr	r3, [r4, #24]
   1cd4a:	61ab      	str	r3, [r5, #24]
   1cd4c:	616c      	str	r4, [r5, #20]
   1cd4e:	69a3      	ldr	r3, [r4, #24]
   1cd50:	601d      	str	r5, [r3, #0]
   1cd52:	f105 0314 	add.w	r3, r5, #20
   1cd56:	61a3      	str	r3, [r4, #24]
        if (!entry) {
   1cd58:	b344      	cbz	r4, 1cdac <ble_ll_sched_adv_new+0x94>
        adv_start = sch->start_time;
   1cd5a:	6869      	ldr	r1, [r5, #4]
        sch->enqueued = 1;
   1cd5c:	2301      	movs	r3, #1
   1cd5e:	706b      	strb	r3, [r5, #1]
        sch = TAILQ_FIRST(&g_ble_ll_sched_q);
   1cd60:	4b1f      	ldr	r3, [pc, #124]	; (1cde0 <ble_ll_sched_adv_new+0xc8>)
   1cd62:	681c      	ldr	r4, [r3, #0]
    if (cb) {
   1cd64:	b117      	cbz	r7, 1cd6c <ble_ll_sched_adv_new+0x54>
        cb((struct ble_ll_adv_sm *)orig->cb_arg, adv_start, arg);
   1cd66:	464a      	mov	r2, r9
   1cd68:	68e8      	ldr	r0, [r5, #12]
   1cd6a:	47b8      	blx	r7
    if (orig == sch) {
   1cd6c:	42ac      	cmp	r4, r5
   1cd6e:	d027      	beq.n	1cdc0 <ble_ll_sched_adv_new+0xa8>
    OS_EXIT_CRITICAL(sr);
   1cd70:	4640      	mov	r0, r8
   1cd72:	f7f1 fbe5 	bl	e540 <os_arch_restore_sr>
    BLE_LL_ASSERT(sch != NULL);
   1cd76:	b33c      	cbz	r4, 1cdc8 <ble_ll_sched_adv_new+0xb0>
    os_cputime_timer_start(&g_ble_ll_sched_timer, sch->start_time);
   1cd78:	6861      	ldr	r1, [r4, #4]
   1cd7a:	4818      	ldr	r0, [pc, #96]	; (1cddc <ble_ll_sched_adv_new+0xc4>)
   1cd7c:	f012 f88f 	bl	2ee9e <os_cputime_timer_start>
}
   1cd80:	2000      	movs	r0, #0
   1cd82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        TAILQ_FOREACH(entry, &g_ble_ll_sched_q, link) {
   1cd86:	6964      	ldr	r4, [r4, #20]
   1cd88:	2c00      	cmp	r4, #0
   1cd8a:	d0e5      	beq.n	1cd58 <ble_ll_sched_adv_new+0x40>
            if ((int32_t)(sch->end_time - entry->start_time) <= 0) {
   1cd8c:	68ab      	ldr	r3, [r5, #8]
   1cd8e:	6862      	ldr	r2, [r4, #4]
   1cd90:	1a9b      	subs	r3, r3, r2
   1cd92:	2b00      	cmp	r3, #0
   1cd94:	ddd8      	ble.n	1cd48 <ble_ll_sched_adv_new+0x30>
            if (ble_ll_sched_is_overlap(sch, entry)) {
   1cd96:	4621      	mov	r1, r4
   1cd98:	4628      	mov	r0, r5
   1cd9a:	f7ff fcef 	bl	1c77c <ble_ll_sched_is_overlap>
   1cd9e:	2800      	cmp	r0, #0
   1cda0:	d0f1      	beq.n	1cd86 <ble_ll_sched_adv_new+0x6e>
                sch->start_time = entry->end_time;
   1cda2:	68a3      	ldr	r3, [r4, #8]
   1cda4:	606b      	str	r3, [r5, #4]
                sch->end_time = sch->start_time + duration;
   1cda6:	4433      	add	r3, r6
   1cda8:	60ab      	str	r3, [r5, #8]
   1cdaa:	e7ec      	b.n	1cd86 <ble_ll_sched_adv_new+0x6e>
            TAILQ_INSERT_TAIL(&g_ble_ll_sched_q, sch, link);
   1cdac:	2300      	movs	r3, #0
   1cdae:	616b      	str	r3, [r5, #20]
   1cdb0:	4b0b      	ldr	r3, [pc, #44]	; (1cde0 <ble_ll_sched_adv_new+0xc8>)
   1cdb2:	685a      	ldr	r2, [r3, #4]
   1cdb4:	61aa      	str	r2, [r5, #24]
   1cdb6:	6015      	str	r5, [r2, #0]
   1cdb8:	f105 0214 	add.w	r2, r5, #20
   1cdbc:	605a      	str	r2, [r3, #4]
   1cdbe:	e7cc      	b.n	1cd5a <ble_ll_sched_adv_new+0x42>
        ble_ll_rfmgmt_sched_changed(sch);
   1cdc0:	4620      	mov	r0, r4
   1cdc2:	f7fe fb33 	bl	1b42c <ble_ll_rfmgmt_sched_changed>
   1cdc6:	e7d3      	b.n	1cd70 <ble_ll_sched_adv_new+0x58>
    BLE_LL_ASSERT(sch != NULL);
   1cdc8:	f7ef fa0e 	bl	c1e8 <hal_debugger_connected>
   1cdcc:	b100      	cbz	r0, 1cdd0 <ble_ll_sched_adv_new+0xb8>
   1cdce:	be01      	bkpt	0x0001
   1cdd0:	2300      	movs	r3, #0
   1cdd2:	461a      	mov	r2, r3
   1cdd4:	4619      	mov	r1, r3
   1cdd6:	4618      	mov	r0, r3
   1cdd8:	f7ef feba 	bl	cb50 <__assert_func>
   1cddc:	20003c34 	.word	0x20003c34
   1cde0:	20003c4c 	.word	0x20003c4c

0001cde4 <ble_ll_sched_adv_reschedule>:
{
   1cde4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cde8:	b083      	sub	sp, #12
   1cdea:	4604      	mov	r4, r0
   1cdec:	468b      	mov	fp, r1
   1cdee:	4692      	mov	sl, r2
    duration = sch->end_time - sch->start_time;
   1cdf0:	6883      	ldr	r3, [r0, #8]
   1cdf2:	6842      	ldr	r2, [r0, #4]
   1cdf4:	eba3 0802 	sub.w	r8, r3, r2
    sch->end_time += max_delay_ticks;
   1cdf8:	4453      	add	r3, sl
   1cdfa:	6083      	str	r3, [r0, #8]
    OS_ENTER_CRITICAL(sr);
   1cdfc:	f7f1 fb9a 	bl	e534 <os_arch_save_sr>
   1ce00:	9001      	str	r0, [sp, #4]
    entry = ble_ll_sched_insert_if_empty(sch);
   1ce02:	4620      	mov	r0, r4
   1ce04:	f7ff fcd2 	bl	1c7ac <ble_ll_sched_insert_if_empty>
    if (entry) {
   1ce08:	2800      	cmp	r0, #0
   1ce0a:	d059      	beq.n	1cec0 <ble_ll_sched_adv_reschedule+0xdc>
   1ce0c:	4606      	mov	r6, r0
        os_cputime_timer_stop(&g_ble_ll_sched_timer);
   1ce0e:	4850      	ldr	r0, [pc, #320]	; (1cf50 <ble_ll_sched_adv_reschedule+0x16c>)
   1ce10:	f012 f849 	bl	2eea6 <os_cputime_timer_stop>
    end_overlap = NULL;
   1ce14:	f04f 0900 	mov.w	r9, #0
    start_overlap = NULL;
   1ce18:	464d      	mov	r5, r9
   1ce1a:	e006      	b.n	1ce2a <ble_ll_sched_adv_reschedule+0x46>
                if ((int32_t)(sch->end_time - entry->start_time) <= 0) {
   1ce1c:	68a3      	ldr	r3, [r4, #8]
   1ce1e:	6872      	ldr	r2, [r6, #4]
   1ce20:	1a9b      	subs	r3, r3, r2
   1ce22:	2b00      	cmp	r3, #0
   1ce24:	dd0e      	ble.n	1ce44 <ble_ll_sched_adv_reschedule+0x60>
            entry = next_sch;
   1ce26:	463e      	mov	r6, r7
            if (entry == NULL) {
   1ce28:	b16f      	cbz	r7, 1ce46 <ble_ll_sched_adv_reschedule+0x62>
            next_sch = entry->link.tqe_next;
   1ce2a:	6977      	ldr	r7, [r6, #20]
            if (ble_ll_sched_is_overlap(sch, entry)) {
   1ce2c:	4631      	mov	r1, r6
   1ce2e:	4620      	mov	r0, r4
   1ce30:	f7ff fca4 	bl	1c77c <ble_ll_sched_is_overlap>
   1ce34:	2800      	cmp	r0, #0
   1ce36:	d0f1      	beq.n	1ce1c <ble_ll_sched_adv_reschedule+0x38>
                if (start_overlap == NULL) {
   1ce38:	b10d      	cbz	r5, 1ce3e <ble_ll_sched_adv_reschedule+0x5a>
                    end_overlap = entry;
   1ce3a:	46b1      	mov	r9, r6
   1ce3c:	e7f3      	b.n	1ce26 <ble_ll_sched_adv_reschedule+0x42>
                    end_overlap = entry;
   1ce3e:	46b1      	mov	r9, r6
                    start_overlap = entry;
   1ce40:	4635      	mov	r5, r6
   1ce42:	e7f0      	b.n	1ce26 <ble_ll_sched_adv_reschedule+0x42>
                    before = entry;
   1ce44:	4637      	mov	r7, r6
        if (start_overlap == NULL) {
   1ce46:	b1ed      	cbz	r5, 1ce84 <ble_ll_sched_adv_reschedule+0xa0>
            orig_start = sch->start_time;
   1ce48:	6866      	ldr	r6, [r4, #4]
            sch->end_time = sch->start_time + duration;
   1ce4a:	eb08 0306 	add.w	r3, r8, r6
   1ce4e:	60a3      	str	r3, [r4, #8]
                next_sch = entry->link.tqe_next;
   1ce50:	696b      	ldr	r3, [r5, #20]
                if ((int32_t)(sch->end_time - entry->start_time) <= 0) {
   1ce52:	68a2      	ldr	r2, [r4, #8]
   1ce54:	6869      	ldr	r1, [r5, #4]
   1ce56:	1a50      	subs	r0, r2, r1
   1ce58:	2800      	cmp	r0, #0
   1ce5a:	dd27      	ble.n	1ceac <ble_ll_sched_adv_reschedule+0xc8>
                    sch->start_time = entry->end_time;
   1ce5c:	68aa      	ldr	r2, [r5, #8]
   1ce5e:	6062      	str	r2, [r4, #4]
                    sch->end_time = sch->start_time + duration;
   1ce60:	eb02 0108 	add.w	r1, r2, r8
   1ce64:	60a1      	str	r1, [r4, #8]
                if (entry == end_overlap) {
   1ce66:	454d      	cmp	r5, r9
   1ce68:	d047      	beq.n	1cefa <ble_ll_sched_adv_reschedule+0x116>
                entry = next_sch;
   1ce6a:	461d      	mov	r5, r3
                BLE_LL_ASSERT(entry != NULL);
   1ce6c:	2b00      	cmp	r3, #0
   1ce6e:	d1ef      	bne.n	1ce50 <ble_ll_sched_adv_reschedule+0x6c>
   1ce70:	f7ef f9ba 	bl	c1e8 <hal_debugger_connected>
   1ce74:	b100      	cbz	r0, 1ce78 <ble_ll_sched_adv_reschedule+0x94>
   1ce76:	be01      	bkpt	0x0001
   1ce78:	2300      	movs	r3, #0
   1ce7a:	461a      	mov	r2, r3
   1ce7c:	4619      	mov	r1, r3
   1ce7e:	4618      	mov	r0, r3
   1ce80:	f7ef fe66 	bl	cb50 <__assert_func>
            if (before) {
   1ce84:	b147      	cbz	r7, 1ce98 <ble_ll_sched_adv_reschedule+0xb4>
                TAILQ_INSERT_BEFORE(before, sch, link);
   1ce86:	69bb      	ldr	r3, [r7, #24]
   1ce88:	61a3      	str	r3, [r4, #24]
   1ce8a:	6167      	str	r7, [r4, #20]
   1ce8c:	69bb      	ldr	r3, [r7, #24]
   1ce8e:	601c      	str	r4, [r3, #0]
   1ce90:	f104 0314 	add.w	r3, r4, #20
   1ce94:	61bb      	str	r3, [r7, #24]
   1ce96:	e013      	b.n	1cec0 <ble_ll_sched_adv_reschedule+0xdc>
                TAILQ_INSERT_TAIL(&g_ble_ll_sched_q, sch, link);
   1ce98:	2300      	movs	r3, #0
   1ce9a:	6163      	str	r3, [r4, #20]
   1ce9c:	4b2d      	ldr	r3, [pc, #180]	; (1cf54 <ble_ll_sched_adv_reschedule+0x170>)
   1ce9e:	685a      	ldr	r2, [r3, #4]
   1cea0:	61a2      	str	r2, [r4, #24]
   1cea2:	6014      	str	r4, [r2, #0]
   1cea4:	f104 0214 	add.w	r2, r4, #20
   1cea8:	605a      	str	r2, [r3, #4]
   1ceaa:	e009      	b.n	1cec0 <ble_ll_sched_adv_reschedule+0xdc>
                    rand_ticks = entry->start_time - sch->end_time;
   1ceac:	eba1 0a02 	sub.w	sl, r1, r2
                    TAILQ_INSERT_BEFORE(before, sch, link);
   1ceb0:	69ab      	ldr	r3, [r5, #24]
   1ceb2:	61a3      	str	r3, [r4, #24]
   1ceb4:	6165      	str	r5, [r4, #20]
   1ceb6:	69ab      	ldr	r3, [r5, #24]
   1ceb8:	601c      	str	r4, [r3, #0]
   1ceba:	f104 0314 	add.w	r3, r4, #20
   1cebe:	61ab      	str	r3, [r5, #24]
        sch->enqueued = 1;
   1cec0:	2301      	movs	r3, #1
   1cec2:	7063      	strb	r3, [r4, #1]
        if (rand_ticks) {
   1cec4:	f1ba 0f00 	cmp.w	sl, #0
   1cec8:	d130      	bne.n	1cf2c <ble_ll_sched_adv_reschedule+0x148>
        sch->end_time = sch->start_time + duration;
   1ceca:	6862      	ldr	r2, [r4, #4]
   1cecc:	eb02 0308 	add.w	r3, r2, r8
   1ced0:	60a3      	str	r3, [r4, #8]
        *start = sch->start_time;
   1ced2:	f8cb 2000 	str.w	r2, [fp]
        if (sch == TAILQ_FIRST(&g_ble_ll_sched_q)) {
   1ced6:	4b1f      	ldr	r3, [pc, #124]	; (1cf54 <ble_ll_sched_adv_reschedule+0x170>)
   1ced8:	681b      	ldr	r3, [r3, #0]
   1ceda:	42a3      	cmp	r3, r4
   1cedc:	d030      	beq.n	1cf40 <ble_ll_sched_adv_reschedule+0x15c>
   1cede:	2400      	movs	r4, #0
    OS_EXIT_CRITICAL(sr);
   1cee0:	9801      	ldr	r0, [sp, #4]
   1cee2:	f7f1 fb2d 	bl	e540 <os_arch_restore_sr>
    sch = TAILQ_FIRST(&g_ble_ll_sched_q);
   1cee6:	4b1b      	ldr	r3, [pc, #108]	; (1cf54 <ble_ll_sched_adv_reschedule+0x170>)
   1cee8:	681b      	ldr	r3, [r3, #0]
    os_cputime_timer_start(&g_ble_ll_sched_timer, sch->start_time);
   1ceea:	6859      	ldr	r1, [r3, #4]
   1ceec:	4818      	ldr	r0, [pc, #96]	; (1cf50 <ble_ll_sched_adv_reschedule+0x16c>)
   1ceee:	f011 ffd6 	bl	2ee9e <os_cputime_timer_start>
}
   1cef2:	4620      	mov	r0, r4
   1cef4:	b003      	add	sp, #12
   1cef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    rand_ticks = (orig_start + max_delay_ticks) - sch->start_time;
   1cefa:	4456      	add	r6, sl
   1cefc:	1ab2      	subs	r2, r6, r2
                    if (rand_ticks > max_delay_ticks) {
   1cefe:	4592      	cmp	sl, r2
   1cf00:	d323      	bcc.n	1cf4a <ble_ll_sched_adv_reschedule+0x166>
                        if (next_sch == NULL) {
   1cf02:	b14b      	cbz	r3, 1cf18 <ble_ll_sched_adv_reschedule+0x134>
                            TAILQ_INSERT_BEFORE(next_sch, sch, link);
   1cf04:	6999      	ldr	r1, [r3, #24]
   1cf06:	61a1      	str	r1, [r4, #24]
   1cf08:	6163      	str	r3, [r4, #20]
   1cf0a:	6999      	ldr	r1, [r3, #24]
   1cf0c:	600c      	str	r4, [r1, #0]
   1cf0e:	f104 0114 	add.w	r1, r4, #20
   1cf12:	6199      	str	r1, [r3, #24]
                    rand_ticks = (orig_start + max_delay_ticks) - sch->start_time;
   1cf14:	4692      	mov	sl, r2
   1cf16:	e7d3      	b.n	1cec0 <ble_ll_sched_adv_reschedule+0xdc>
                            TAILQ_INSERT_TAIL(&g_ble_ll_sched_q, sch, link);
   1cf18:	6163      	str	r3, [r4, #20]
   1cf1a:	4b0e      	ldr	r3, [pc, #56]	; (1cf54 <ble_ll_sched_adv_reschedule+0x170>)
   1cf1c:	6859      	ldr	r1, [r3, #4]
   1cf1e:	61a1      	str	r1, [r4, #24]
   1cf20:	600c      	str	r4, [r1, #0]
   1cf22:	f104 0114 	add.w	r1, r4, #20
   1cf26:	6059      	str	r1, [r3, #4]
                    rand_ticks = (orig_start + max_delay_ticks) - sch->start_time;
   1cf28:	4692      	mov	sl, r2
   1cf2a:	e7c9      	b.n	1cec0 <ble_ll_sched_adv_reschedule+0xdc>
   1cf2c:	f7f1 fd0c 	bl	e948 <lrand48>
            sch->start_time += rand() % rand_ticks;
   1cf30:	fbb0 f3fa 	udiv	r3, r0, sl
   1cf34:	fb0a 0a13 	mls	sl, sl, r3, r0
   1cf38:	6863      	ldr	r3, [r4, #4]
   1cf3a:	4453      	add	r3, sl
   1cf3c:	6063      	str	r3, [r4, #4]
   1cf3e:	e7c4      	b.n	1ceca <ble_ll_sched_adv_reschedule+0xe6>
            ble_ll_rfmgmt_sched_changed(sch);
   1cf40:	4620      	mov	r0, r4
   1cf42:	f7fe fa73 	bl	1b42c <ble_ll_rfmgmt_sched_changed>
   1cf46:	2400      	movs	r4, #0
   1cf48:	e7ca      	b.n	1cee0 <ble_ll_sched_adv_reschedule+0xfc>
                        rc = -1;
   1cf4a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1cf4e:	e7c7      	b.n	1cee0 <ble_ll_sched_adv_reschedule+0xfc>
   1cf50:	20003c34 	.word	0x20003c34
   1cf54:	20003c4c 	.word	0x20003c4c

0001cf58 <ble_ll_sched_adv_resched_pdu>:
{
   1cf58:	b570      	push	{r4, r5, r6, lr}
   1cf5a:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
   1cf5c:	f7f1 faea 	bl	e534 <os_arch_save_sr>
   1cf60:	4606      	mov	r6, r0
    lls = ble_ll_state_get();
   1cf62:	f7f7 fdd7 	bl	14b14 <ble_ll_state_get>
    if ((lls == BLE_LL_STATE_ADV) || (lls == BLE_LL_STATE_CONNECTION) ||
   1cf66:	2801      	cmp	r0, #1
   1cf68:	d027      	beq.n	1cfba <ble_ll_sched_adv_resched_pdu+0x62>
   1cf6a:	2804      	cmp	r0, #4
   1cf6c:	d025      	beq.n	1cfba <ble_ll_sched_adv_resched_pdu+0x62>
   1cf6e:	2806      	cmp	r0, #6
   1cf70:	d023      	beq.n	1cfba <ble_ll_sched_adv_resched_pdu+0x62>
    entry = ble_ll_sched_insert_if_empty(sch);
   1cf72:	4620      	mov	r0, r4
   1cf74:	f7ff fc1a 	bl	1c7ac <ble_ll_sched_insert_if_empty>
    if (entry) {
   1cf78:	4605      	mov	r5, r0
   1cf7a:	b188      	cbz	r0, 1cfa0 <ble_ll_sched_adv_resched_pdu+0x48>
        if (ble_ll_sched_is_overlap(sch, entry)) {
   1cf7c:	4601      	mov	r1, r0
   1cf7e:	4620      	mov	r0, r4
   1cf80:	f7ff fbfc 	bl	1c77c <ble_ll_sched_is_overlap>
   1cf84:	b9c8      	cbnz	r0, 1cfba <ble_ll_sched_adv_resched_pdu+0x62>
        os_cputime_timer_stop(&g_ble_ll_sched_timer);
   1cf86:	4810      	ldr	r0, [pc, #64]	; (1cfc8 <ble_ll_sched_adv_resched_pdu+0x70>)
   1cf88:	f011 ff8d 	bl	2eea6 <os_cputime_timer_stop>
        TAILQ_INSERT_BEFORE(entry, sch, link);
   1cf8c:	69ab      	ldr	r3, [r5, #24]
   1cf8e:	61a3      	str	r3, [r4, #24]
   1cf90:	6165      	str	r5, [r4, #20]
   1cf92:	69ab      	ldr	r3, [r5, #24]
   1cf94:	601c      	str	r4, [r3, #0]
   1cf96:	f104 0314 	add.w	r3, r4, #20
   1cf9a:	61ab      	str	r3, [r5, #24]
        sch->enqueued = 1;
   1cf9c:	2301      	movs	r3, #1
   1cf9e:	7063      	strb	r3, [r4, #1]
    ble_ll_rfmgmt_sched_changed(TAILQ_FIRST(&g_ble_ll_sched_q));
   1cfa0:	4b0a      	ldr	r3, [pc, #40]	; (1cfcc <ble_ll_sched_adv_resched_pdu+0x74>)
   1cfa2:	6818      	ldr	r0, [r3, #0]
   1cfa4:	f7fe fa42 	bl	1b42c <ble_ll_rfmgmt_sched_changed>
    OS_EXIT_CRITICAL(sr);
   1cfa8:	4630      	mov	r0, r6
   1cfaa:	f7f1 fac9 	bl	e540 <os_arch_restore_sr>
    os_cputime_timer_start(&g_ble_ll_sched_timer, sch->start_time);
   1cfae:	6861      	ldr	r1, [r4, #4]
   1cfb0:	4805      	ldr	r0, [pc, #20]	; (1cfc8 <ble_ll_sched_adv_resched_pdu+0x70>)
   1cfb2:	f011 ff74 	bl	2ee9e <os_cputime_timer_start>
    return 0;
   1cfb6:	2000      	movs	r0, #0
}
   1cfb8:	bd70      	pop	{r4, r5, r6, pc}
    OS_EXIT_CRITICAL(sr);
   1cfba:	4630      	mov	r0, r6
   1cfbc:	f7f1 fac0 	bl	e540 <os_arch_restore_sr>
    return -1;
   1cfc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1cfc4:	e7f8      	b.n	1cfb8 <ble_ll_sched_adv_resched_pdu+0x60>
   1cfc6:	bf00      	nop
   1cfc8:	20003c34 	.word	0x20003c34
   1cfcc:	20003c4c 	.word	0x20003c4c

0001cfd0 <ble_ll_sched_rmv_elem>:
{
   1cfd0:	b570      	push	{r4, r5, r6, lr}
    if (!sch) {
   1cfd2:	2800      	cmp	r0, #0
   1cfd4:	d030      	beq.n	1d038 <ble_ll_sched_rmv_elem+0x68>
   1cfd6:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
   1cfd8:	f7f1 faac 	bl	e534 <os_arch_save_sr>
   1cfdc:	4605      	mov	r5, r0
    if (sch->enqueued) {
   1cfde:	7863      	ldrb	r3, [r4, #1]
   1cfe0:	b323      	cbz	r3, 1d02c <ble_ll_sched_rmv_elem+0x5c>
        first = TAILQ_FIRST(&g_ble_ll_sched_q);
   1cfe2:	4b16      	ldr	r3, [pc, #88]	; (1d03c <ble_ll_sched_rmv_elem+0x6c>)
   1cfe4:	681e      	ldr	r6, [r3, #0]
        if (first == sch) {
   1cfe6:	42b4      	cmp	r4, r6
   1cfe8:	d00c      	beq.n	1d004 <ble_ll_sched_rmv_elem+0x34>
        TAILQ_REMOVE(&g_ble_ll_sched_q, sch, link);
   1cfea:	6963      	ldr	r3, [r4, #20]
   1cfec:	b173      	cbz	r3, 1d00c <ble_ll_sched_rmv_elem+0x3c>
   1cfee:	69a2      	ldr	r2, [r4, #24]
   1cff0:	619a      	str	r2, [r3, #24]
   1cff2:	69a3      	ldr	r3, [r4, #24]
   1cff4:	6962      	ldr	r2, [r4, #20]
   1cff6:	601a      	str	r2, [r3, #0]
        sch->enqueued = 0;
   1cff8:	2300      	movs	r3, #0
   1cffa:	7063      	strb	r3, [r4, #1]
        if (first == sch) {
   1cffc:	42b4      	cmp	r4, r6
   1cffe:	d009      	beq.n	1d014 <ble_ll_sched_rmv_elem+0x44>
        rc = 0;
   1d000:	2400      	movs	r4, #0
   1d002:	e014      	b.n	1d02e <ble_ll_sched_rmv_elem+0x5e>
            os_cputime_timer_stop(&g_ble_ll_sched_timer);
   1d004:	480e      	ldr	r0, [pc, #56]	; (1d040 <ble_ll_sched_rmv_elem+0x70>)
   1d006:	f011 ff4e 	bl	2eea6 <os_cputime_timer_stop>
   1d00a:	e7ee      	b.n	1cfea <ble_ll_sched_rmv_elem+0x1a>
        TAILQ_REMOVE(&g_ble_ll_sched_q, sch, link);
   1d00c:	69a2      	ldr	r2, [r4, #24]
   1d00e:	4b0b      	ldr	r3, [pc, #44]	; (1d03c <ble_ll_sched_rmv_elem+0x6c>)
   1d010:	605a      	str	r2, [r3, #4]
   1d012:	e7ee      	b.n	1cff2 <ble_ll_sched_rmv_elem+0x22>
            first = TAILQ_FIRST(&g_ble_ll_sched_q);
   1d014:	4b09      	ldr	r3, [pc, #36]	; (1d03c <ble_ll_sched_rmv_elem+0x6c>)
   1d016:	681c      	ldr	r4, [r3, #0]
            if (first) {
   1d018:	b11c      	cbz	r4, 1d022 <ble_ll_sched_rmv_elem+0x52>
                os_cputime_timer_start(&g_ble_ll_sched_timer, first->start_time);
   1d01a:	6861      	ldr	r1, [r4, #4]
   1d01c:	4808      	ldr	r0, [pc, #32]	; (1d040 <ble_ll_sched_rmv_elem+0x70>)
   1d01e:	f011 ff3e 	bl	2ee9e <os_cputime_timer_start>
            ble_ll_rfmgmt_sched_changed(first);
   1d022:	4620      	mov	r0, r4
   1d024:	f7fe fa02 	bl	1b42c <ble_ll_rfmgmt_sched_changed>
        rc = 0;
   1d028:	2400      	movs	r4, #0
   1d02a:	e000      	b.n	1d02e <ble_ll_sched_rmv_elem+0x5e>
    int rc = 1;
   1d02c:	2401      	movs	r4, #1
    OS_EXIT_CRITICAL(sr);
   1d02e:	4628      	mov	r0, r5
   1d030:	f7f1 fa86 	bl	e540 <os_arch_restore_sr>
}
   1d034:	4620      	mov	r0, r4
   1d036:	bd70      	pop	{r4, r5, r6, pc}
        return rc;
   1d038:	2401      	movs	r4, #1
   1d03a:	e7fb      	b.n	1d034 <ble_ll_sched_rmv_elem+0x64>
   1d03c:	20003c4c 	.word	0x20003c4c
   1d040:	20003c34 	.word	0x20003c34

0001d044 <ble_ll_sched_next_time>:
 *
 * @return int 0: No events are scheduled 1: there is an upcoming event
 */
int
ble_ll_sched_next_time(uint32_t *next_event_time)
{
   1d044:	b510      	push	{r4, lr}
   1d046:	4604      	mov	r4, r0
    int rc;
    os_sr_t sr;
    struct ble_ll_sched_item *first;

    rc = 0;
    OS_ENTER_CRITICAL(sr);
   1d048:	f7f1 fa74 	bl	e534 <os_arch_save_sr>
    first = TAILQ_FIRST(&g_ble_ll_sched_q);
   1d04c:	4b05      	ldr	r3, [pc, #20]	; (1d064 <ble_ll_sched_next_time+0x20>)
   1d04e:	681b      	ldr	r3, [r3, #0]
    if (first) {
   1d050:	b133      	cbz	r3, 1d060 <ble_ll_sched_next_time+0x1c>
        *next_event_time = first->start_time;
   1d052:	685b      	ldr	r3, [r3, #4]
   1d054:	6023      	str	r3, [r4, #0]
        rc = 1;
   1d056:	2401      	movs	r4, #1
    }
    OS_EXIT_CRITICAL(sr);
   1d058:	f7f1 fa72 	bl	e540 <os_arch_restore_sr>

    return rc;
}
   1d05c:	4620      	mov	r0, r4
   1d05e:	bd10      	pop	{r4, pc}
    rc = 0;
   1d060:	2400      	movs	r4, #0
   1d062:	e7f9      	b.n	1d058 <ble_ll_sched_next_time+0x14>
   1d064:	20003c4c 	.word	0x20003c4c

0001d068 <ble_ll_sched_stop>:
 *
 * Context: Link Layer task
 */
void
ble_ll_sched_stop(void)
{
   1d068:	b508      	push	{r3, lr}
    os_cputime_timer_stop(&g_ble_ll_sched_timer);
   1d06a:	4802      	ldr	r0, [pc, #8]	; (1d074 <ble_ll_sched_stop+0xc>)
   1d06c:	f011 ff1b 	bl	2eea6 <os_cputime_timer_stop>
}
   1d070:	bd08      	pop	{r3, pc}
   1d072:	bf00      	nop
   1d074:	20003c34 	.word	0x20003c34

0001d078 <ble_ll_sched_init>:
 *
 * @return int
 */
int
ble_ll_sched_init(void)
{
   1d078:	b508      	push	{r3, lr}
    /*
     * This is the offset from the start of the scheduled item until the actual
     * tx/rx should occur, in ticks. We also "round up" to the nearest tick.
     */
    g_ble_ll_sched_offset_ticks =
        (uint8_t) os_cputime_usecs_to_ticks(XCVR_TX_SCHED_DELAY_USECS + 30);
   1d07a:	20df      	movs	r0, #223	; 0xdf
   1d07c:	f011 ff1c 	bl	2eeb8 <os_cputime_usecs_to_ticks>
    g_ble_ll_sched_offset_ticks =
   1d080:	4b04      	ldr	r3, [pc, #16]	; (1d094 <ble_ll_sched_init+0x1c>)
   1d082:	7018      	strb	r0, [r3, #0]

    /* Initialize cputimer for the scheduler */
    os_cputime_timer_init(&g_ble_ll_sched_timer, ble_ll_sched_run, NULL);
   1d084:	2200      	movs	r2, #0
   1d086:	4904      	ldr	r1, [pc, #16]	; (1d098 <ble_ll_sched_init+0x20>)
   1d088:	4804      	ldr	r0, [pc, #16]	; (1d09c <ble_ll_sched_init+0x24>)
   1d08a:	f011 feea 	bl	2ee62 <os_cputime_timer_init>
    g_ble_ll_sched_data.sch_ticks_per_epoch = BLE_LL_SCHED_PERIODS *
        g_ble_ll_sched_data.sch_ticks_per_period;
#endif

    return 0;
}
   1d08e:	2000      	movs	r0, #0
   1d090:	bd08      	pop	{r3, pc}
   1d092:	bf00      	nop
   1d094:	20003c30 	.word	0x20003c30
   1d098:	0001c8bd 	.word	0x0001c8bd
   1d09c:	20003c34 	.word	0x20003c34

0001d0a0 <ble_ll_utils_calc_access_addr>:
    500, 250, 150, 100, 75, 50, 30, 20
};

uint32_t
ble_ll_utils_calc_access_addr(void)
{
   1d0a0:	b570      	push	{r4, r5, r6, lr}
   1d0a2:	f7f1 fc51 	bl	e948 <lrand48>

    /* Calculate a random access address */
    aa = 0;
    while (1) {
        /* Get two, 16-bit random numbers */
        aa_low = rand() & 0xFFFF;
   1d0a6:	b286      	uxth	r6, r0
   1d0a8:	f7f1 fc4e 	bl	e948 <lrand48>
        aa_high = rand() & 0xFFFF;
   1d0ac:	b283      	uxth	r3, r0

        /* All four bytes cannot be equal */
        if (aa_low == aa_high) {
   1d0ae:	429e      	cmp	r6, r3
   1d0b0:	d0f7      	beq.n	1d0a2 <ble_ll_utils_calc_access_addr+0x2>
   1d0b2:	4605      	mov	r5, r0
            continue;
        }

        /* Upper 6 bits must have 2 transitions */
        tmp = (int16_t)aa_high >> 10;
   1d0b4:	f340 2085 	sbfx	r0, r0, #10, #6
        if (__builtin_popcount(tmp ^ (tmp >> 1)) < 2) {
   1d0b8:	ea80 0060 	eor.w	r0, r0, r0, asr #1
   1d0bc:	f013 ffc2 	bl	31044 <__popcountsi2>
   1d0c0:	2801      	cmp	r0, #1
   1d0c2:	ddee      	ble.n	1d0a2 <ble_ll_utils_calc_access_addr+0x2>
            continue;
        }

        /* Cannot be access address or be 1 bit different */
        aa = aa_high;
        aa = (aa << 16) | aa_low;
   1d0c4:	ea46 4005 	orr.w	r0, r6, r5, lsl #16
        bits_diff = 0;
        temp = aa ^ BLE_ACCESS_ADDR_ADV;
   1d0c8:	4921      	ldr	r1, [pc, #132]	; (1d150 <ble_ll_utils_calc_access_addr+0xb0>)
   1d0ca:	4041      	eors	r1, r0
        bits_diff = 0;
   1d0cc:	2200      	movs	r2, #0
        for (mask = 0x00000001; mask != 0; mask <<= 1) {
   1d0ce:	2301      	movs	r3, #1
   1d0d0:	e000      	b.n	1d0d4 <ble_ll_utils_calc_access_addr+0x34>
   1d0d2:	005b      	lsls	r3, r3, #1
   1d0d4:	b12b      	cbz	r3, 1d0e2 <ble_ll_utils_calc_access_addr+0x42>
            if (mask & temp) {
   1d0d6:	420b      	tst	r3, r1
   1d0d8:	d0fb      	beq.n	1d0d2 <ble_ll_utils_calc_access_addr+0x32>
                ++bits_diff;
   1d0da:	3201      	adds	r2, #1
   1d0dc:	b2d2      	uxtb	r2, r2
                if (bits_diff > 1) {
   1d0de:	2a01      	cmp	r2, #1
   1d0e0:	d9f7      	bls.n	1d0d2 <ble_ll_utils_calc_access_addr+0x32>
                    break;
                }
            }
        }
        if (bits_diff <= 1) {
   1d0e2:	2a01      	cmp	r2, #1
   1d0e4:	d9dd      	bls.n	1d0a2 <ble_ll_utils_calc_access_addr+0x2>
        }

        /* Cannot have more than 24 transitions */
        transitions = 0;
        consecutive = 1;
        ones = 0;
   1d0e6:	2400      	movs	r4, #0
        transitions = 0;
   1d0e8:	4625      	mov	r5, r4
        consecutive = 1;
   1d0ea:	2201      	movs	r2, #1
        mask = 0x00000001;
   1d0ec:	4613      	mov	r3, r2
   1d0ee:	e00c      	b.n	1d10a <ble_ll_utils_calc_access_addr+0x6a>
            if (mask & aa) {
                if (prev_bit == 0) {
                    ++transitions;
                    consecutive = 1;
                } else {
                    ++consecutive;
   1d0f0:	3201      	adds	r2, #1
   1d0f2:	b2d2      	uxtb	r2, r2
                    ++transitions;
                    consecutive = 1;
                }
            }

            if (prev_bit) {
   1d0f4:	b109      	cbz	r1, 1d0fa <ble_ll_utils_calc_access_addr+0x5a>
                ones++;
   1d0f6:	3401      	adds	r4, #1
   1d0f8:	b2e4      	uxtb	r4, r4
            }

            /* 8 lsb should have at least three 1 */
            if (mask == 0x00000100 && ones < 3) {
   1d0fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   1d0fe:	d019      	beq.n	1d134 <ble_ll_utils_calc_access_addr+0x94>
                break;
            }

            /* 16 lsb should have no more than 11 transitions */
            if (mask == 0x00010000 && transitions > 11) {
   1d100:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   1d104:	d019      	beq.n	1d13a <ble_ll_utils_calc_access_addr+0x9a>
                break;
            }

            /* This is invalid! */
            if (consecutive > 6) {
   1d106:	2a06      	cmp	r2, #6
   1d108:	d81a      	bhi.n	1d140 <ble_ll_utils_calc_access_addr+0xa0>
        while (mask < 0x80000000) {
   1d10a:	2b00      	cmp	r3, #0
   1d10c:	db19      	blt.n	1d142 <ble_ll_utils_calc_access_addr+0xa2>
            prev_bit = aa & mask;
   1d10e:	ea03 0100 	and.w	r1, r3, r0
            mask <<= 1;
   1d112:	005b      	lsls	r3, r3, #1
            if (mask & aa) {
   1d114:	4218      	tst	r0, r3
   1d116:	d005      	beq.n	1d124 <ble_ll_utils_calc_access_addr+0x84>
                if (prev_bit == 0) {
   1d118:	2900      	cmp	r1, #0
   1d11a:	d1e9      	bne.n	1d0f0 <ble_ll_utils_calc_access_addr+0x50>
                    ++transitions;
   1d11c:	3501      	adds	r5, #1
   1d11e:	b2ed      	uxtb	r5, r5
                    consecutive = 1;
   1d120:	2201      	movs	r2, #1
   1d122:	e7e7      	b.n	1d0f4 <ble_ll_utils_calc_access_addr+0x54>
                if (prev_bit == 0) {
   1d124:	b911      	cbnz	r1, 1d12c <ble_ll_utils_calc_access_addr+0x8c>
                    ++consecutive;
   1d126:	3201      	adds	r2, #1
   1d128:	b2d2      	uxtb	r2, r2
   1d12a:	e7e3      	b.n	1d0f4 <ble_ll_utils_calc_access_addr+0x54>
                    ++transitions;
   1d12c:	3501      	adds	r5, #1
   1d12e:	b2ed      	uxtb	r5, r5
                    consecutive = 1;
   1d130:	2201      	movs	r2, #1
   1d132:	e7df      	b.n	1d0f4 <ble_ll_utils_calc_access_addr+0x54>
            if (mask == 0x00000100 && ones < 3) {
   1d134:	2c02      	cmp	r4, #2
   1d136:	d8e3      	bhi.n	1d100 <ble_ll_utils_calc_access_addr+0x60>
   1d138:	e003      	b.n	1d142 <ble_ll_utils_calc_access_addr+0xa2>
            if (mask == 0x00010000 && transitions > 11) {
   1d13a:	2d0b      	cmp	r5, #11
   1d13c:	d9e3      	bls.n	1d106 <ble_ll_utils_calc_access_addr+0x66>
   1d13e:	e000      	b.n	1d142 <ble_ll_utils_calc_access_addr+0xa2>
                /* Make sure we always detect invalid sequence below */
                mask = 0;
   1d140:	2300      	movs	r3, #0
                break;
            }
        }

        /* Invalid sequence found */
        if (mask != 0x80000000) {
   1d142:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   1d146:	d1ac      	bne.n	1d0a2 <ble_ll_utils_calc_access_addr+0x2>
            continue;
        }

        /* Cannot be more than 24 transitions */
        if (transitions > 24) {
   1d148:	2d18      	cmp	r5, #24
   1d14a:	d8aa      	bhi.n	1d0a2 <ble_ll_utils_calc_access_addr+0x2>

        /* We have a valid access address */
        break;
    }
    return aa;
}
   1d14c:	bd70      	pop	{r4, r5, r6, pc}
   1d14e:	bf00      	nop
   1d150:	8e89bed6 	.word	0x8e89bed6

0001d154 <ble_ll_utils_remapped_channel>:

uint8_t
ble_ll_utils_remapped_channel(uint8_t remap_index, const uint8_t *chanmap)
{
   1d154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     * we just calculate
     * Iterate through channel map to find this channel
     */
    chan = 0;
    cntr = 0;
    for (i = 0; i < BLE_LL_CHMAP_LEN; i++) {
   1d156:	2500      	movs	r5, #0
    chan = 0;
   1d158:	462e      	mov	r6, r5
    cntr = 0;
   1d15a:	462c      	mov	r4, r5
    for (i = 0; i < BLE_LL_CHMAP_LEN; i++) {
   1d15c:	e00e      	b.n	1d17c <ble_ll_utils_remapped_channel+0x28>
                    if (cntr == remap_index) {
                        return (chan + j);
                    }
                    ++cntr;
                }
                mask <<= 1;
   1d15e:	005b      	lsls	r3, r3, #1
   1d160:	b2db      	uxtb	r3, r3
            for (j = 0; j < 8; j++) {
   1d162:	3201      	adds	r2, #1
   1d164:	2a07      	cmp	r2, #7
   1d166:	dc06      	bgt.n	1d176 <ble_ll_utils_remapped_channel+0x22>
                if (usable_chans & mask) {
   1d168:	423b      	tst	r3, r7
   1d16a:	d0f8      	beq.n	1d15e <ble_ll_utils_remapped_channel+0xa>
                    if (cntr == remap_index) {
   1d16c:	4284      	cmp	r4, r0
   1d16e:	d017      	beq.n	1d1a0 <ble_ll_utils_remapped_channel+0x4c>
                    ++cntr;
   1d170:	3401      	adds	r4, #1
   1d172:	b2e4      	uxtb	r4, r4
   1d174:	e7f3      	b.n	1d15e <ble_ll_utils_remapped_channel+0xa>
            }
        }
        chan += 8;
   1d176:	3608      	adds	r6, #8
   1d178:	b2f6      	uxtb	r6, r6
    for (i = 0; i < BLE_LL_CHMAP_LEN; i++) {
   1d17a:	3501      	adds	r5, #1
   1d17c:	2d04      	cmp	r5, #4
   1d17e:	dc05      	bgt.n	1d18c <ble_ll_utils_remapped_channel+0x38>
        usable_chans = chanmap[i];
   1d180:	5d4f      	ldrb	r7, [r1, r5]
        if (usable_chans != 0) {
   1d182:	2f00      	cmp	r7, #0
   1d184:	d0f7      	beq.n	1d176 <ble_ll_utils_remapped_channel+0x22>
            for (j = 0; j < 8; j++) {
   1d186:	2200      	movs	r2, #0
            mask = 0x01;
   1d188:	2301      	movs	r3, #1
   1d18a:	e7eb      	b.n	1d164 <ble_ll_utils_remapped_channel+0x10>
    }

    /* we should never reach here */
    BLE_LL_ASSERT(0);
   1d18c:	f7ef f82c 	bl	c1e8 <hal_debugger_connected>
   1d190:	b100      	cbz	r0, 1d194 <ble_ll_utils_remapped_channel+0x40>
   1d192:	be01      	bkpt	0x0001
   1d194:	2300      	movs	r3, #0
   1d196:	461a      	mov	r2, r3
   1d198:	4619      	mov	r1, r3
   1d19a:	4618      	mov	r0, r3
   1d19c:	f7ef fcd8 	bl	cb50 <__assert_func>
                        return (chan + j);
   1d1a0:	4432      	add	r2, r6
   1d1a2:	b2d0      	uxtb	r0, r2
    return 0;
}
   1d1a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001d1a6 <ble_ll_utils_calc_num_used_chans>:

uint8_t
ble_ll_utils_calc_num_used_chans(const uint8_t *chmap)
{
   1d1a6:	b430      	push	{r4, r5}
    int j;
    uint8_t mask;
    uint8_t chanbyte;
    uint8_t used_channels;

    used_channels = 0;
   1d1a8:	2100      	movs	r1, #0
    for (i = 0; i < BLE_LL_CHMAP_LEN; ++i) {
   1d1aa:	460d      	mov	r5, r1
   1d1ac:	e00d      	b.n	1d1ca <ble_ll_utils_calc_num_used_chans+0x24>
                mask = 0x01;
                for (j = 0; j < 8; ++j) {
                    if (chanbyte & mask) {
                        ++used_channels;
                    }
                    mask <<= 1;
   1d1ae:	005b      	lsls	r3, r3, #1
   1d1b0:	b2db      	uxtb	r3, r3
                for (j = 0; j < 8; ++j) {
   1d1b2:	3201      	adds	r2, #1
   1d1b4:	2a07      	cmp	r2, #7
   1d1b6:	dc07      	bgt.n	1d1c8 <ble_ll_utils_calc_num_used_chans+0x22>
                    if (chanbyte & mask) {
   1d1b8:	4223      	tst	r3, r4
   1d1ba:	d0f8      	beq.n	1d1ae <ble_ll_utils_calc_num_used_chans+0x8>
                        ++used_channels;
   1d1bc:	3101      	adds	r1, #1
   1d1be:	b2c9      	uxtb	r1, r1
   1d1c0:	e7f5      	b.n	1d1ae <ble_ll_utils_calc_num_used_chans+0x8>
                mask = 0x01;
   1d1c2:	2301      	movs	r3, #1
                for (j = 0; j < 8; ++j) {
   1d1c4:	2200      	movs	r2, #0
   1d1c6:	e7f5      	b.n	1d1b4 <ble_ll_utils_calc_num_used_chans+0xe>
    for (i = 0; i < BLE_LL_CHMAP_LEN; ++i) {
   1d1c8:	3501      	adds	r5, #1
   1d1ca:	2d04      	cmp	r5, #4
   1d1cc:	dc07      	bgt.n	1d1de <ble_ll_utils_calc_num_used_chans+0x38>
        chanbyte = chmap[i];
   1d1ce:	5d44      	ldrb	r4, [r0, r5]
        if (chanbyte) {
   1d1d0:	2c00      	cmp	r4, #0
   1d1d2:	d0f9      	beq.n	1d1c8 <ble_ll_utils_calc_num_used_chans+0x22>
            if (chanbyte == 0xff) {
   1d1d4:	2cff      	cmp	r4, #255	; 0xff
   1d1d6:	d1f4      	bne.n	1d1c2 <ble_ll_utils_calc_num_used_chans+0x1c>
                used_channels += 8;
   1d1d8:	3108      	adds	r1, #8
   1d1da:	b2c9      	uxtb	r1, r1
   1d1dc:	e7f4      	b.n	1d1c8 <ble_ll_utils_calc_num_used_chans+0x22>
                }
            }
        }
    }
    return used_channels;
}
   1d1de:	4608      	mov	r0, r1
   1d1e0:	bc30      	pop	{r4, r5}
   1d1e2:	4770      	bx	lr

0001d1e4 <ble_ll_utils_calc_window_widening>:
    int32_t time_since_last_anchor;
    uint32_t delta_msec;

    window_widening = 0;

    time_since_last_anchor = (int32_t)(anchor_point - last_anchor_point);
   1d1e4:	1a40      	subs	r0, r0, r1
    if (time_since_last_anchor > 0) {
   1d1e6:	2800      	cmp	r0, #0
   1d1e8:	dd11      	ble.n	1d20e <ble_ll_utils_calc_window_widening+0x2a>
{
   1d1ea:	b510      	push	{r4, lr}
   1d1ec:	4614      	mov	r4, r2
        delta_msec = os_cputime_ticks_to_usecs(time_since_last_anchor) / 1000;
   1d1ee:	f011 fe6b 	bl	2eec8 <os_cputime_ticks_to_usecs>
   1d1f2:	4a08      	ldr	r2, [pc, #32]	; (1d214 <ble_ll_utils_calc_window_widening+0x30>)
   1d1f4:	fba2 3000 	umull	r3, r0, r2, r0
   1d1f8:	0983      	lsrs	r3, r0, #6
        total_sca_ppm = g_ble_sca_ppm_tbl[master_sca] +
   1d1fa:	4907      	ldr	r1, [pc, #28]	; (1d218 <ble_ll_utils_calc_window_widening+0x34>)
   1d1fc:	f831 0014 	ldrh.w	r0, [r1, r4, lsl #1]
   1d200:	303c      	adds	r0, #60	; 0x3c
                                          MYNEWT_VAL(BLE_LL_OUR_SCA);
        window_widening = (total_sca_ppm * delta_msec) / 1000;
   1d202:	fb00 f003 	mul.w	r0, r0, r3
   1d206:	fba2 3000 	umull	r3, r0, r2, r0
   1d20a:	0980      	lsrs	r0, r0, #6
    }

    return window_widening;
}
   1d20c:	bd10      	pop	{r4, pc}
    window_widening = 0;
   1d20e:	2000      	movs	r0, #0
}
   1d210:	4770      	bx	lr
   1d212:	bf00      	nop
   1d214:	10624dd3 	.word	0x10624dd3
   1d218:	00031e2c 	.word	0x00031e2c

0001d21c <ble_ll_whitelist_chg_allowed>:

struct ble_ll_whitelist_entry g_ble_ll_whitelist[BLE_LL_WHITELIST_SIZE];

static int
ble_ll_whitelist_chg_allowed(void)
{
   1d21c:	b508      	push	{r3, lr}
     *  -> scanning uses the whitelist and is enabled.
     *  -> initiating uses whitelist and a LE create connection command is in
     *     progress
     */
    rc = 1;
    if (!ble_ll_adv_can_chg_whitelist() || !ble_ll_scan_can_chg_whitelist()) {
   1d21e:	f7f8 fd9d 	bl	15d5c <ble_ll_adv_can_chg_whitelist>
   1d222:	4603      	mov	r3, r0
   1d224:	b908      	cbnz	r0, 1d22a <ble_ll_whitelist_chg_allowed+0xe>
        rc = 0;
    }
    return rc;
}
   1d226:	4618      	mov	r0, r3
   1d228:	bd08      	pop	{r3, pc}
    if (!ble_ll_adv_can_chg_whitelist() || !ble_ll_scan_can_chg_whitelist()) {
   1d22a:	f7ff f9fd 	bl	1c628 <ble_ll_scan_can_chg_whitelist>
   1d22e:	4603      	mov	r3, r0
   1d230:	2800      	cmp	r0, #0
   1d232:	d0f8      	beq.n	1d226 <ble_ll_whitelist_chg_allowed+0xa>
    rc = 1;
   1d234:	2301      	movs	r3, #1
    return rc;
   1d236:	e7f6      	b.n	1d226 <ble_ll_whitelist_chg_allowed+0xa>

0001d238 <ble_ll_whitelist_search>:
 * is the 'position' of the device in the whitelist (the index of the element
 * plus 1).
 */
static int
ble_ll_whitelist_search(const uint8_t *addr, uint8_t addr_type)
{
   1d238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d23a:	4607      	mov	r7, r0
   1d23c:	460e      	mov	r6, r1
    int i;
    struct ble_ll_whitelist_entry *wl;

    wl = &g_ble_ll_whitelist[0];
   1d23e:	4c0c      	ldr	r4, [pc, #48]	; (1d270 <ble_ll_whitelist_search+0x38>)
    for (i = 0; i < BLE_LL_WHITELIST_SIZE; ++i) {
   1d240:	2500      	movs	r5, #0
   1d242:	e001      	b.n	1d248 <ble_ll_whitelist_search+0x10>
        if ((wl->wl_valid) && (wl->wl_addr_type == addr_type) &&
            (!memcmp(&wl->wl_dev_addr[0], addr, BLE_DEV_ADDR_LEN))) {
            return i + 1;
        }
        ++wl;
   1d244:	3408      	adds	r4, #8
    for (i = 0; i < BLE_LL_WHITELIST_SIZE; ++i) {
   1d246:	3501      	adds	r5, #1
   1d248:	2d07      	cmp	r5, #7
   1d24a:	dc0e      	bgt.n	1d26a <ble_ll_whitelist_search+0x32>
        if ((wl->wl_valid) && (wl->wl_addr_type == addr_type) &&
   1d24c:	7823      	ldrb	r3, [r4, #0]
   1d24e:	2b00      	cmp	r3, #0
   1d250:	d0f8      	beq.n	1d244 <ble_ll_whitelist_search+0xc>
   1d252:	7863      	ldrb	r3, [r4, #1]
   1d254:	42b3      	cmp	r3, r6
   1d256:	d1f5      	bne.n	1d244 <ble_ll_whitelist_search+0xc>
            (!memcmp(&wl->wl_dev_addr[0], addr, BLE_DEV_ADDR_LEN))) {
   1d258:	2206      	movs	r2, #6
   1d25a:	4639      	mov	r1, r7
   1d25c:	1ca0      	adds	r0, r4, #2
   1d25e:	f7f1 fb7b 	bl	e958 <memcmp>
        if ((wl->wl_valid) && (wl->wl_addr_type == addr_type) &&
   1d262:	2800      	cmp	r0, #0
   1d264:	d1ee      	bne.n	1d244 <ble_ll_whitelist_search+0xc>
            return i + 1;
   1d266:	1c68      	adds	r0, r5, #1
   1d268:	e000      	b.n	1d26c <ble_ll_whitelist_search+0x34>
    }

    return 0;
   1d26a:	2000      	movs	r0, #0
}
   1d26c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d26e:	bf00      	nop
   1d270:	20003c54 	.word	0x20003c54

0001d274 <ble_ll_whitelist_clear>:
{
   1d274:	b508      	push	{r3, lr}
    if (!ble_ll_whitelist_chg_allowed()) {
   1d276:	f7ff ffd1 	bl	1d21c <ble_ll_whitelist_chg_allowed>
   1d27a:	b160      	cbz	r0, 1d296 <ble_ll_whitelist_clear+0x22>
    wl = &g_ble_ll_whitelist[0];
   1d27c:	4a07      	ldr	r2, [pc, #28]	; (1d29c <ble_ll_whitelist_clear+0x28>)
    for (i = 0; i < BLE_LL_WHITELIST_SIZE; ++i) {
   1d27e:	2300      	movs	r3, #0
   1d280:	e003      	b.n	1d28a <ble_ll_whitelist_clear+0x16>
        wl->wl_valid = 0;
   1d282:	2100      	movs	r1, #0
   1d284:	f802 1b08 	strb.w	r1, [r2], #8
    for (i = 0; i < BLE_LL_WHITELIST_SIZE; ++i) {
   1d288:	3301      	adds	r3, #1
   1d28a:	2b07      	cmp	r3, #7
   1d28c:	ddf9      	ble.n	1d282 <ble_ll_whitelist_clear+0xe>
    ble_hw_whitelist_clear();
   1d28e:	f000 f8c3 	bl	1d418 <ble_hw_whitelist_clear>
    return BLE_ERR_SUCCESS;
   1d292:	2000      	movs	r0, #0
}
   1d294:	bd08      	pop	{r3, pc}
        return BLE_ERR_CMD_DISALLOWED;
   1d296:	200c      	movs	r0, #12
   1d298:	e7fc      	b.n	1d294 <ble_ll_whitelist_clear+0x20>
   1d29a:	bf00      	nop
   1d29c:	20003c54 	.word	0x20003c54

0001d2a0 <ble_ll_whitelist_read_size>:
    rsp->size = BLE_LL_WHITELIST_SIZE;
   1d2a0:	2308      	movs	r3, #8
   1d2a2:	7003      	strb	r3, [r0, #0]
    *rsplen = sizeof(*rsp);
   1d2a4:	2301      	movs	r3, #1
   1d2a6:	700b      	strb	r3, [r1, #0]
}
   1d2a8:	2000      	movs	r0, #0
   1d2aa:	4770      	bx	lr

0001d2ac <ble_ll_whitelist_match>:
 *
 * @return int
 */
int
ble_ll_whitelist_match(uint8_t *addr, uint8_t addr_type, int is_ident)
{
   1d2ac:	b508      	push	{r3, lr}
    /*
     * XXX: This should be changed. This is HW specific: some HW may be able
     * to both resolve a private address and perform a whitelist check. The
     * current BLE hw cannot support this.
     */
    if (is_ident) {
   1d2ae:	b112      	cbz	r2, 1d2b6 <ble_ll_whitelist_match+0xa>
        rc = ble_ll_whitelist_search(addr, addr_type);
   1d2b0:	f7ff ffc2 	bl	1d238 <ble_ll_whitelist_search>
    }
#else
    rc = ble_ll_whitelist_search(addr, addr_type);
#endif
    return rc;
}
   1d2b4:	bd08      	pop	{r3, pc}
        rc = ble_hw_whitelist_match();
   1d2b6:	f000 f947 	bl	1d548 <ble_hw_whitelist_match>
    return rc;
   1d2ba:	e7fb      	b.n	1d2b4 <ble_ll_whitelist_match+0x8>

0001d2bc <ble_ll_whitelist_add>:
    const struct ble_hci_le_add_whte_list_cp *cmd = (const void *) cmdbuf;
    struct ble_ll_whitelist_entry *wl;
    int rc;
    int i;

    if (len != sizeof(*cmd)) {
   1d2bc:	2907      	cmp	r1, #7
   1d2be:	d001      	beq.n	1d2c4 <ble_ll_whitelist_add+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1d2c0:	2012      	movs	r0, #18
#endif
        }
    }

    return rc;
}
   1d2c2:	4770      	bx	lr
{
   1d2c4:	b538      	push	{r3, r4, r5, lr}
   1d2c6:	4604      	mov	r4, r0
    if (!ble_ll_whitelist_chg_allowed()) {
   1d2c8:	f7ff ffa8 	bl	1d21c <ble_ll_whitelist_chg_allowed>
   1d2cc:	b300      	cbz	r0, 1d310 <ble_ll_whitelist_add+0x54>
    if (!ble_ll_whitelist_search(cmd->addr, cmd->addr_type)) {
   1d2ce:	1c65      	adds	r5, r4, #1
   1d2d0:	7821      	ldrb	r1, [r4, #0]
   1d2d2:	4628      	mov	r0, r5
   1d2d4:	f7ff ffb0 	bl	1d238 <ble_ll_whitelist_search>
   1d2d8:	4603      	mov	r3, r0
   1d2da:	b938      	cbnz	r0, 1d2ec <ble_ll_whitelist_add+0x30>
        wl = &g_ble_ll_whitelist[0];
   1d2dc:	4a0e      	ldr	r2, [pc, #56]	; (1d318 <ble_ll_whitelist_add+0x5c>)
        for (i = 0; i < BLE_LL_WHITELIST_SIZE; ++i) {
   1d2de:	2b07      	cmp	r3, #7
   1d2e0:	dc0f      	bgt.n	1d302 <ble_ll_whitelist_add+0x46>
            if (wl->wl_valid == 0) {
   1d2e2:	7811      	ldrb	r1, [r2, #0]
   1d2e4:	b121      	cbz	r1, 1d2f0 <ble_ll_whitelist_add+0x34>
            ++wl;
   1d2e6:	3208      	adds	r2, #8
        for (i = 0; i < BLE_LL_WHITELIST_SIZE; ++i) {
   1d2e8:	3301      	adds	r3, #1
   1d2ea:	e7f8      	b.n	1d2de <ble_ll_whitelist_add+0x22>
    rc = BLE_ERR_SUCCESS;
   1d2ec:	2000      	movs	r0, #0
}
   1d2ee:	bd38      	pop	{r3, r4, r5, pc}
                memcpy(&wl->wl_dev_addr[0], cmd->addr, BLE_DEV_ADDR_LEN);
   1d2f0:	6829      	ldr	r1, [r5, #0]
   1d2f2:	f8c2 1002 	str.w	r1, [r2, #2]
   1d2f6:	88a9      	ldrh	r1, [r5, #4]
   1d2f8:	80d1      	strh	r1, [r2, #6]
                wl->wl_addr_type = cmd->addr_type;
   1d2fa:	7821      	ldrb	r1, [r4, #0]
   1d2fc:	7051      	strb	r1, [r2, #1]
                wl->wl_valid = 1;
   1d2fe:	2101      	movs	r1, #1
   1d300:	7011      	strb	r1, [r2, #0]
        if (i == BLE_LL_WHITELIST_SIZE) {
   1d302:	2b08      	cmp	r3, #8
   1d304:	d006      	beq.n	1d314 <ble_ll_whitelist_add+0x58>
            rc = ble_hw_whitelist_add(cmd->addr, cmd->addr_type);
   1d306:	7821      	ldrb	r1, [r4, #0]
   1d308:	4628      	mov	r0, r5
   1d30a:	f000 f891 	bl	1d430 <ble_hw_whitelist_add>
   1d30e:	e7ee      	b.n	1d2ee <ble_ll_whitelist_add+0x32>
        return BLE_ERR_CMD_DISALLOWED;
   1d310:	200c      	movs	r0, #12
   1d312:	e7ec      	b.n	1d2ee <ble_ll_whitelist_add+0x32>
            rc = BLE_ERR_MEM_CAPACITY;
   1d314:	2007      	movs	r0, #7
   1d316:	e7ea      	b.n	1d2ee <ble_ll_whitelist_add+0x32>
   1d318:	20003c54 	.word	0x20003c54

0001d31c <ble_ll_whitelist_rmv>:
ble_ll_whitelist_rmv(const uint8_t *cmdbuf, uint8_t len)
{
    const struct ble_hci_le_rmv_white_list_cp *cmd = (const void *) cmdbuf;
    int position;

    if (len != sizeof(*cmd)) {
   1d31c:	2907      	cmp	r1, #7
   1d31e:	d001      	beq.n	1d324 <ble_ll_whitelist_rmv+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1d320:	2012      	movs	r0, #18
#if (BLE_USES_HW_WHITELIST == 1)
    ble_hw_whitelist_rmv(cmd->addr, cmd->addr_type);
#endif

    return BLE_ERR_SUCCESS;
}
   1d322:	4770      	bx	lr
{
   1d324:	b538      	push	{r3, r4, r5, lr}
   1d326:	4604      	mov	r4, r0
    if (!ble_ll_whitelist_chg_allowed()) {
   1d328:	f7ff ff78 	bl	1d21c <ble_ll_whitelist_chg_allowed>
   1d32c:	b180      	cbz	r0, 1d350 <ble_ll_whitelist_rmv+0x34>
    position = ble_ll_whitelist_search(cmd->addr, cmd->addr_type);
   1d32e:	1c65      	adds	r5, r4, #1
   1d330:	7821      	ldrb	r1, [r4, #0]
   1d332:	4628      	mov	r0, r5
   1d334:	f7ff ff80 	bl	1d238 <ble_ll_whitelist_search>
    if (position) {
   1d338:	b120      	cbz	r0, 1d344 <ble_ll_whitelist_rmv+0x28>
        g_ble_ll_whitelist[position - 1].wl_valid = 0;
   1d33a:	1e43      	subs	r3, r0, #1
   1d33c:	4a05      	ldr	r2, [pc, #20]	; (1d354 <ble_ll_whitelist_rmv+0x38>)
   1d33e:	2100      	movs	r1, #0
   1d340:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
    ble_hw_whitelist_rmv(cmd->addr, cmd->addr_type);
   1d344:	7821      	ldrb	r1, [r4, #0]
   1d346:	4628      	mov	r0, r5
   1d348:	f000 f8a6 	bl	1d498 <ble_hw_whitelist_rmv>
    return BLE_ERR_SUCCESS;
   1d34c:	2000      	movs	r0, #0
}
   1d34e:	bd38      	pop	{r3, r4, r5, pc}
        return BLE_ERR_CMD_DISALLOWED;
   1d350:	200c      	movs	r0, #12
   1d352:	e7fc      	b.n	1d34e <ble_ll_whitelist_rmv+0x32>
   1d354:	20003c54 	.word	0x20003c54

0001d358 <ble_ll_whitelist_enable>:
 *
 * Note: This function has no effect if we are not using HW whitelisting
 */
void
ble_ll_whitelist_enable(void)
{
   1d358:	b508      	push	{r3, lr}
#if (BLE_USES_HW_WHITELIST == 1)
    ble_hw_whitelist_enable();
   1d35a:	f000 f8dd 	bl	1d518 <ble_hw_whitelist_enable>
#endif
}
   1d35e:	bd08      	pop	{r3, pc}

0001d360 <ble_ll_whitelist_disable>:
 *
 * Note: This function has no effect if we are not using HW whitelisting
 */
void
ble_ll_whitelist_disable(void)
{
   1d360:	b508      	push	{r3, lr}
#if (BLE_USES_HW_WHITELIST == 1)
    ble_hw_whitelist_disable();
   1d362:	f000 f8e7 	bl	1d534 <ble_hw_whitelist_disable>
#endif
}
   1d366:	bd08      	pop	{r3, pc}

0001d368 <do_works_mitm>:
void do_works_mitm(){
#ifdef BLE_LL_ENCRYPT_DEBUG

    console_print("==============/n/r/n/r/n/r/n/r/n/rYEEEEEEEEEEEEEEAH");
#endif
}
   1d368:	4770      	bx	lr
	...

0001d36c <ble_rng_isr>:
/**
 * Random number generator ISR.
 */
static void
ble_rng_isr(void)
{
   1d36c:	b508      	push	{r3, lr}
    uint8_t rnum;

    os_trace_isr_enter();

    /* No callback? Clear and disable interrupts */
    if (g_ble_rng_isr_cb == NULL) {
   1d36e:	4b0d      	ldr	r3, [pc, #52]	; (1d3a4 <ble_rng_isr+0x38>)
   1d370:	681b      	ldr	r3, [r3, #0]
   1d372:	b163      	cbz	r3, 1d38e <ble_rng_isr+0x22>
        os_trace_isr_exit();
        return;
    }

    /* If there is a value ready grab it */
    if (NRF_RNG->EVENTS_VALRDY) {
   1d374:	4a0c      	ldr	r2, [pc, #48]	; (1d3a8 <ble_rng_isr+0x3c>)
   1d376:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
   1d37a:	b13a      	cbz	r2, 1d38c <ble_rng_isr+0x20>
        NRF_RNG->EVENTS_VALRDY = 0;
   1d37c:	4a0a      	ldr	r2, [pc, #40]	; (1d3a8 <ble_rng_isr+0x3c>)
   1d37e:	2100      	movs	r1, #0
   1d380:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
        rnum = (uint8_t)NRF_RNG->VALUE;
   1d384:	f8d2 0508 	ldr.w	r0, [r2, #1288]	; 0x508
        (*g_ble_rng_isr_cb)(rnum);
   1d388:	b2c0      	uxtb	r0, r0
   1d38a:	4798      	blx	r3
    }

    os_trace_isr_exit();
}
   1d38c:	bd08      	pop	{r3, pc}
        NRF_RNG->INTENCLR = 1;
   1d38e:	4b06      	ldr	r3, [pc, #24]	; (1d3a8 <ble_rng_isr+0x3c>)
   1d390:	2201      	movs	r2, #1
   1d392:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        NRF_RNG->EVENTS_VALRDY = 0;
   1d396:	2200      	movs	r2, #0
   1d398:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        (void)NRF_RNG->SHORTS;
   1d39c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
   1d3a0:	e7f4      	b.n	1d38c <ble_rng_isr+0x20>
   1d3a2:	bf00      	nop
   1d3a4:	20003cd8 	.word	0x20003cd8
   1d3a8:	4000d000 	.word	0x4000d000

0001d3ac <ble_hw_get_public_addr>:
    if ((NRF_FICR->DEVICEADDRTYPE & 1) != 0) {
   1d3ac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1d3b0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
   1d3b4:	f013 0f01 	tst.w	r3, #1
   1d3b8:	d10d      	bne.n	1d3d6 <ble_hw_get_public_addr+0x2a>
    addr_low = NRF_FICR->DEVICEADDR[0];
   1d3ba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1d3be:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
    addr_high = NRF_FICR->DEVICEADDR[1];
   1d3c2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
    memcpy(addr->val, &addr_low, 4);
   1d3c6:	f8c0 2001 	str.w	r2, [r0, #1]
    memcpy(&addr->val[4], &addr_high, 2);
   1d3ca:	f8a0 3005 	strh.w	r3, [r0, #5]
    addr->type = BLE_ADDR_PUBLIC;
   1d3ce:	2300      	movs	r3, #0
   1d3d0:	7003      	strb	r3, [r0, #0]
    return 0;
   1d3d2:	4618      	mov	r0, r3
   1d3d4:	4770      	bx	lr
        return -1;
   1d3d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1d3da:	4770      	bx	lr

0001d3dc <ble_hw_get_static_addr>:
    if ((NRF_FICR->DEVICEADDRTYPE & 1) == 1) {
   1d3dc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1d3e0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
   1d3e4:	f013 0f01 	tst.w	r3, #1
   1d3e8:	d00f      	beq.n	1d40a <ble_hw_get_static_addr+0x2e>
        memcpy(addr->val, (void *)&NRF_FICR->DEVICEADDR[0], 4);
   1d3ea:	4b09      	ldr	r3, [pc, #36]	; (1d410 <ble_hw_get_static_addr+0x34>)
   1d3ec:	681b      	ldr	r3, [r3, #0]
   1d3ee:	f8c0 3001 	str.w	r3, [r0, #1]
        memcpy(&addr->val[4], (void *)&NRF_FICR->DEVICEADDR[1], 2);
   1d3f2:	4b08      	ldr	r3, [pc, #32]	; (1d414 <ble_hw_get_static_addr+0x38>)
   1d3f4:	881b      	ldrh	r3, [r3, #0]
   1d3f6:	f8a0 3005 	strh.w	r3, [r0, #5]
        addr->val[5] |= 0xc0;
   1d3fa:	7983      	ldrb	r3, [r0, #6]
   1d3fc:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1d400:	7183      	strb	r3, [r0, #6]
        addr->type = BLE_ADDR_RANDOM;
   1d402:	2301      	movs	r3, #1
   1d404:	7003      	strb	r3, [r0, #0]
        rc = 0;
   1d406:	2000      	movs	r0, #0
   1d408:	4770      	bx	lr
        rc = -1;
   1d40a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1d40e:	4770      	bx	lr
   1d410:	100000a4 	.word	0x100000a4
   1d414:	100000a8 	.word	0x100000a8

0001d418 <ble_hw_whitelist_clear>:
    NRF_RADIO->DACNF = 0;
   1d418:	2300      	movs	r3, #0
   1d41a:	4a03      	ldr	r2, [pc, #12]	; (1d428 <ble_hw_whitelist_clear+0x10>)
   1d41c:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
    g_ble_hw_whitelist_mask = 0;
   1d420:	4a02      	ldr	r2, [pc, #8]	; (1d42c <ble_hw_whitelist_clear+0x14>)
   1d422:	7013      	strb	r3, [r2, #0]
}
   1d424:	4770      	bx	lr
   1d426:	bf00      	nop
   1d428:	40001000 	.word	0x40001000
   1d42c:	2000203c 	.word	0x2000203c

0001d430 <ble_hw_whitelist_add>:
{
   1d430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    mask = 0x01;
   1d434:	2501      	movs	r5, #1
    for (i = 0; i < BLE_HW_WHITE_LIST_SIZE; ++i) {
   1d436:	2400      	movs	r4, #0
   1d438:	2c07      	cmp	r4, #7
   1d43a:	dc26      	bgt.n	1d48a <ble_hw_whitelist_add+0x5a>
        if ((mask & g_ble_hw_whitelist_mask) == 0) {
   1d43c:	4b14      	ldr	r3, [pc, #80]	; (1d490 <ble_hw_whitelist_add+0x60>)
   1d43e:	781b      	ldrb	r3, [r3, #0]
   1d440:	422b      	tst	r3, r5
   1d442:	d002      	beq.n	1d44a <ble_hw_whitelist_add+0x1a>
        mask <<= 1;
   1d444:	006d      	lsls	r5, r5, #1
    for (i = 0; i < BLE_HW_WHITE_LIST_SIZE; ++i) {
   1d446:	3401      	adds	r4, #1
   1d448:	e7f6      	b.n	1d438 <ble_hw_whitelist_add+0x8>
   1d44a:	460f      	mov	r7, r1
   1d44c:	4606      	mov	r6, r0
            NRF_RADIO->DAB[i] = get_le32(addr);
   1d44e:	f011 fc93 	bl	2ed78 <get_le32>
   1d452:	f8df 8040 	ldr.w	r8, [pc, #64]	; 1d494 <ble_hw_whitelist_add+0x64>
   1d456:	f504 73c0 	add.w	r3, r4, #384	; 0x180
   1d45a:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
            NRF_RADIO->DAP[i] = get_le16(addr + 4);
   1d45e:	1d30      	adds	r0, r6, #4
   1d460:	f011 fc85 	bl	2ed6e <get_le16>
   1d464:	f504 74c4 	add.w	r4, r4, #392	; 0x188
   1d468:	f848 0024 	str.w	r0, [r8, r4, lsl #2]
            if (addr_type == BLE_ADDR_RANDOM) {
   1d46c:	2f01      	cmp	r7, #1
   1d46e:	d005      	beq.n	1d47c <ble_hw_whitelist_add+0x4c>
            g_ble_hw_whitelist_mask |= mask;
   1d470:	4a07      	ldr	r2, [pc, #28]	; (1d490 <ble_hw_whitelist_add+0x60>)
   1d472:	7813      	ldrb	r3, [r2, #0]
   1d474:	431d      	orrs	r5, r3
   1d476:	7015      	strb	r5, [r2, #0]
            return BLE_ERR_SUCCESS;
   1d478:	2000      	movs	r0, #0
   1d47a:	e007      	b.n	1d48c <ble_hw_whitelist_add+0x5c>
                NRF_RADIO->DACNF |= (mask << 8);
   1d47c:	f8d8 3640 	ldr.w	r3, [r8, #1600]	; 0x640
   1d480:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
   1d484:	f8c8 3640 	str.w	r3, [r8, #1600]	; 0x640
   1d488:	e7f2      	b.n	1d470 <ble_hw_whitelist_add+0x40>
    return BLE_ERR_MEM_CAPACITY;
   1d48a:	2007      	movs	r0, #7
}
   1d48c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1d490:	2000203c 	.word	0x2000203c
   1d494:	40001000 	.word	0x40001000

0001d498 <ble_hw_whitelist_rmv>:
{
   1d498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d49a:	4606      	mov	r6, r0
   1d49c:	460d      	mov	r5, r1
    dab = get_le32(addr);
   1d49e:	f011 fc6b 	bl	2ed78 <get_le32>
   1d4a2:	4604      	mov	r4, r0
    dap = get_le16(addr + 4);
   1d4a4:	1d30      	adds	r0, r6, #4
   1d4a6:	f011 fc62 	bl	2ed6e <get_le16>
    txadd = NRF_RADIO->DACNF >> 8;
   1d4aa:	4b19      	ldr	r3, [pc, #100]	; (1d510 <ble_hw_whitelist_rmv+0x78>)
   1d4ac:	f8d3 7640 	ldr.w	r7, [r3, #1600]	; 0x640
   1d4b0:	0a3f      	lsrs	r7, r7, #8
    mask = 0x01;
   1d4b2:	2201      	movs	r2, #1
    for (i = 0; i < BLE_HW_WHITE_LIST_SIZE; ++i) {
   1d4b4:	2300      	movs	r3, #0
   1d4b6:	e002      	b.n	1d4be <ble_hw_whitelist_rmv+0x26>
                    if (cfg_addr != 0) {
   1d4b8:	b9d1      	cbnz	r1, 1d4f0 <ble_hw_whitelist_rmv+0x58>
        mask <<= 1;
   1d4ba:	0052      	lsls	r2, r2, #1
    for (i = 0; i < BLE_HW_WHITE_LIST_SIZE; ++i) {
   1d4bc:	3301      	adds	r3, #1
   1d4be:	2b07      	cmp	r3, #7
   1d4c0:	dc16      	bgt.n	1d4f0 <ble_hw_whitelist_rmv+0x58>
        if (mask & g_ble_hw_whitelist_mask) {
   1d4c2:	4914      	ldr	r1, [pc, #80]	; (1d514 <ble_hw_whitelist_rmv+0x7c>)
   1d4c4:	7809      	ldrb	r1, [r1, #0]
   1d4c6:	4211      	tst	r1, r2
   1d4c8:	d0f7      	beq.n	1d4ba <ble_hw_whitelist_rmv+0x22>
            if ((dab == NRF_RADIO->DAB[i]) && (dap == NRF_RADIO->DAP[i])) {
   1d4ca:	f503 71c0 	add.w	r1, r3, #384	; 0x180
   1d4ce:	4e10      	ldr	r6, [pc, #64]	; (1d510 <ble_hw_whitelist_rmv+0x78>)
   1d4d0:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
   1d4d4:	42a1      	cmp	r1, r4
   1d4d6:	d1f0      	bne.n	1d4ba <ble_hw_whitelist_rmv+0x22>
   1d4d8:	f503 71c4 	add.w	r1, r3, #392	; 0x188
   1d4dc:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
   1d4e0:	4288      	cmp	r0, r1
   1d4e2:	d1ea      	bne.n	1d4ba <ble_hw_whitelist_rmv+0x22>
                cfg_addr = txadd & mask;
   1d4e4:	b2d1      	uxtb	r1, r2
   1d4e6:	4039      	ands	r1, r7
                if (addr_type == BLE_ADDR_RANDOM) {
   1d4e8:	2d01      	cmp	r5, #1
   1d4ea:	d0e5      	beq.n	1d4b8 <ble_hw_whitelist_rmv+0x20>
                    if (cfg_addr == 0) {
   1d4ec:	2900      	cmp	r1, #0
   1d4ee:	d1e4      	bne.n	1d4ba <ble_hw_whitelist_rmv+0x22>
    if (i < BLE_HW_WHITE_LIST_SIZE) {
   1d4f0:	2b07      	cmp	r3, #7
   1d4f2:	dc0b      	bgt.n	1d50c <ble_hw_whitelist_rmv+0x74>
        g_ble_hw_whitelist_mask &= ~mask;
   1d4f4:	4907      	ldr	r1, [pc, #28]	; (1d514 <ble_hw_whitelist_rmv+0x7c>)
   1d4f6:	780b      	ldrb	r3, [r1, #0]
   1d4f8:	ea23 0302 	bic.w	r3, r3, r2
   1d4fc:	700b      	strb	r3, [r1, #0]
        NRF_RADIO->DACNF &= ~mask;
   1d4fe:	4904      	ldr	r1, [pc, #16]	; (1d510 <ble_hw_whitelist_rmv+0x78>)
   1d500:	f8d1 3640 	ldr.w	r3, [r1, #1600]	; 0x640
   1d504:	ea23 0202 	bic.w	r2, r3, r2
   1d508:	f8c1 2640 	str.w	r2, [r1, #1600]	; 0x640
}
   1d50c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d50e:	bf00      	nop
   1d510:	40001000 	.word	0x40001000
   1d514:	2000203c 	.word	0x2000203c

0001d518 <ble_hw_whitelist_enable>:
    NRF_RADIO->DACNF |= g_ble_hw_whitelist_mask;
   1d518:	4a04      	ldr	r2, [pc, #16]	; (1d52c <ble_hw_whitelist_enable+0x14>)
   1d51a:	f8d2 1640 	ldr.w	r1, [r2, #1600]	; 0x640
   1d51e:	4b04      	ldr	r3, [pc, #16]	; (1d530 <ble_hw_whitelist_enable+0x18>)
   1d520:	781b      	ldrb	r3, [r3, #0]
   1d522:	430b      	orrs	r3, r1
   1d524:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
}
   1d528:	4770      	bx	lr
   1d52a:	bf00      	nop
   1d52c:	40001000 	.word	0x40001000
   1d530:	2000203c 	.word	0x2000203c

0001d534 <ble_hw_whitelist_disable>:
    NRF_RADIO->DACNF &= 0x0000ff00;
   1d534:	4a03      	ldr	r2, [pc, #12]	; (1d544 <ble_hw_whitelist_disable+0x10>)
   1d536:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
   1d53a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   1d53e:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
}
   1d542:	4770      	bx	lr
   1d544:	40001000 	.word	0x40001000

0001d548 <ble_hw_whitelist_match>:
    return (int)NRF_RADIO->EVENTS_DEVMATCH;
   1d548:	4b01      	ldr	r3, [pc, #4]	; (1d550 <ble_hw_whitelist_match+0x8>)
   1d54a:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
   1d54e:	4770      	bx	lr
   1d550:	40001000 	.word	0x40001000

0001d554 <ble_hw_encrypt_block>:
    NRF_ECB->TASKS_STOPECB = 1;
   1d554:	4b0c      	ldr	r3, [pc, #48]	; (1d588 <ble_hw_encrypt_block+0x34>)
   1d556:	2201      	movs	r2, #1
   1d558:	605a      	str	r2, [r3, #4]
    NRF_ECB->EVENTS_ENDECB = 0;
   1d55a:	2100      	movs	r1, #0
   1d55c:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    NRF_ECB->EVENTS_ERRORECB = 0;
   1d560:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
    NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
   1d564:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    NRF_ECB->TASKS_STARTECB = 1;
   1d568:	601a      	str	r2, [r3, #0]
        end = NRF_ECB->EVENTS_ENDECB;
   1d56a:	4b07      	ldr	r3, [pc, #28]	; (1d588 <ble_hw_encrypt_block+0x34>)
   1d56c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
        err = NRF_ECB->EVENTS_ERRORECB;
   1d570:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
        if (end || err) {
   1d574:	b90a      	cbnz	r2, 1d57a <ble_hw_encrypt_block+0x26>
   1d576:	2b00      	cmp	r3, #0
   1d578:	d0f7      	beq.n	1d56a <ble_hw_encrypt_block+0x16>
            if (err) {
   1d57a:	b90b      	cbnz	r3, 1d580 <ble_hw_encrypt_block+0x2c>
    rc = 0;
   1d57c:	2000      	movs	r0, #0
   1d57e:	4770      	bx	lr
                rc = -1;
   1d580:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1d584:	4770      	bx	lr
   1d586:	bf00      	nop
   1d588:	4000e000 	.word	0x4000e000

0001d58c <ble_hw_rng_init>:
 */
int
ble_hw_rng_init(ble_rng_isr_cb_t cb, int bias)
{
    /* Set bias */
    if (bias) {
   1d58c:	b199      	cbz	r1, 1d5b6 <ble_hw_rng_init+0x2a>
        NRF_RNG->CONFIG = 1;
   1d58e:	4b0c      	ldr	r3, [pc, #48]	; (1d5c0 <ble_hw_rng_init+0x34>)
   1d590:	2201      	movs	r2, #1
   1d592:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    } else {
        NRF_RNG->CONFIG = 0;
    }

    /* If we were passed a function pointer we need to enable the interrupt */
    if (cb != NULL) {
   1d596:	b160      	cbz	r0, 1d5b2 <ble_hw_rng_init+0x26>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1d598:	4b0a      	ldr	r3, [pc, #40]	; (1d5c4 <ble_hw_rng_init+0x38>)
   1d59a:	22e0      	movs	r2, #224	; 0xe0
   1d59c:	f883 230d 	strb.w	r2, [r3, #781]	; 0x30d
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1d5a0:	4a09      	ldr	r2, [pc, #36]	; (1d5c8 <ble_hw_rng_init+0x3c>)
   1d5a2:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1d5a4:	4909      	ldr	r1, [pc, #36]	; (1d5cc <ble_hw_rng_init+0x40>)
   1d5a6:	6751      	str	r1, [r2, #116]	; 0x74
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1d5a8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   1d5ac:	601a      	str	r2, [r3, #0]
        NVIC_SetVector(RNG_IRQn, (uint32_t)ble_rng_isr);
#else
        ble_npl_hw_set_isr(RNG_IRQn, ble_rng_isr);
#endif
        NVIC_EnableIRQ(RNG_IRQn);
        g_ble_rng_isr_cb = cb;
   1d5ae:	4b08      	ldr	r3, [pc, #32]	; (1d5d0 <ble_hw_rng_init+0x44>)
   1d5b0:	6018      	str	r0, [r3, #0]
    }

    return 0;
}
   1d5b2:	2000      	movs	r0, #0
   1d5b4:	4770      	bx	lr
        NRF_RNG->CONFIG = 0;
   1d5b6:	4b02      	ldr	r3, [pc, #8]	; (1d5c0 <ble_hw_rng_init+0x34>)
   1d5b8:	2200      	movs	r2, #0
   1d5ba:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   1d5be:	e7ea      	b.n	1d596 <ble_hw_rng_init+0xa>
   1d5c0:	4000d000 	.word	0x4000d000
   1d5c4:	e000e100 	.word	0xe000e100
   1d5c8:	e000ed00 	.word	0xe000ed00
   1d5cc:	0001d36d 	.word	0x0001d36d
   1d5d0:	20003cd8 	.word	0x20003cd8

0001d5d4 <ble_hw_rng_start>:
 *
 * @return int
 */
int
ble_hw_rng_start(void)
{
   1d5d4:	b508      	push	{r3, lr}
    os_sr_t sr;

    /* No need for interrupt if there is no callback */
    OS_ENTER_CRITICAL(sr);
   1d5d6:	f7f0 ffad 	bl	e534 <os_arch_save_sr>
    NRF_RNG->EVENTS_VALRDY = 0;
   1d5da:	4b09      	ldr	r3, [pc, #36]	; (1d600 <ble_hw_rng_start+0x2c>)
   1d5dc:	2200      	movs	r2, #0
   1d5de:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    if (g_ble_rng_isr_cb) {
   1d5e2:	4b08      	ldr	r3, [pc, #32]	; (1d604 <ble_hw_rng_start+0x30>)
   1d5e4:	681b      	ldr	r3, [r3, #0]
   1d5e6:	b11b      	cbz	r3, 1d5f0 <ble_hw_rng_start+0x1c>
        NRF_RNG->INTENSET = 1;
   1d5e8:	4b05      	ldr	r3, [pc, #20]	; (1d600 <ble_hw_rng_start+0x2c>)
   1d5ea:	2201      	movs	r2, #1
   1d5ec:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    }
    NRF_RNG->TASKS_START = 1;
   1d5f0:	4b03      	ldr	r3, [pc, #12]	; (1d600 <ble_hw_rng_start+0x2c>)
   1d5f2:	2201      	movs	r2, #1
   1d5f4:	601a      	str	r2, [r3, #0]
    OS_EXIT_CRITICAL(sr);
   1d5f6:	f7f0 ffa3 	bl	e540 <os_arch_restore_sr>

    return 0;
}
   1d5fa:	2000      	movs	r0, #0
   1d5fc:	bd08      	pop	{r3, pc}
   1d5fe:	bf00      	nop
   1d600:	4000d000 	.word	0x4000d000
   1d604:	20003cd8 	.word	0x20003cd8

0001d608 <ble_hw_rng_stop>:
 *
 * @return int
 */
int
ble_hw_rng_stop(void)
{
   1d608:	b510      	push	{r4, lr}
    os_sr_t sr;

    /* No need for interrupt if there is no callback */
    OS_ENTER_CRITICAL(sr);
   1d60a:	f7f0 ff93 	bl	e534 <os_arch_save_sr>
    NRF_RNG->INTENCLR = 1;
   1d60e:	4b06      	ldr	r3, [pc, #24]	; (1d628 <ble_hw_rng_stop+0x20>)
   1d610:	2201      	movs	r2, #1
   1d612:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    NRF_RNG->TASKS_STOP = 1;
   1d616:	605a      	str	r2, [r3, #4]
    NRF_RNG->EVENTS_VALRDY = 0;
   1d618:	2400      	movs	r4, #0
   1d61a:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
    OS_EXIT_CRITICAL(sr);
   1d61e:	f7f0 ff8f 	bl	e540 <os_arch_restore_sr>

    return 0;
}
   1d622:	4620      	mov	r0, r4
   1d624:	bd10      	pop	{r4, pc}
   1d626:	bf00      	nop
   1d628:	4000d000 	.word	0x4000d000

0001d62c <ble_hw_resolv_list_clear>:
 * @return int
 */
void
ble_hw_resolv_list_clear(void)
{
    g_nrf_num_irks = 0;
   1d62c:	4b01      	ldr	r3, [pc, #4]	; (1d634 <ble_hw_resolv_list_clear+0x8>)
   1d62e:	2200      	movs	r2, #0
   1d630:	701a      	strb	r2, [r3, #0]
}
   1d632:	4770      	bx	lr
   1d634:	20003c94 	.word	0x20003c94

0001d638 <ble_hw_resolv_list_add>:
ble_hw_resolv_list_add(uint8_t *irk)
{
    uint32_t *nrf_entry;

    /* Find first ununsed device address match element */
    if (g_nrf_num_irks == NRF_IRK_LIST_ENTRIES) {
   1d638:	4b0b      	ldr	r3, [pc, #44]	; (1d668 <ble_hw_resolv_list_add+0x30>)
   1d63a:	781b      	ldrb	r3, [r3, #0]
   1d63c:	2b04      	cmp	r3, #4
   1d63e:	d011      	beq.n	1d664 <ble_hw_resolv_list_add+0x2c>
{
   1d640:	b4f0      	push	{r4, r5, r6, r7}
        return BLE_ERR_MEM_CAPACITY;
    }

    /* Copy into irk list */
    nrf_entry = &g_nrf_irk_list[4 * g_nrf_num_irks];
   1d642:	011c      	lsls	r4, r3, #4
   1d644:	4909      	ldr	r1, [pc, #36]	; (1d66c <ble_hw_resolv_list_add+0x34>)
   1d646:	1862      	adds	r2, r4, r1
    memcpy(nrf_entry, irk, 16);
   1d648:	6807      	ldr	r7, [r0, #0]
   1d64a:	6846      	ldr	r6, [r0, #4]
   1d64c:	6885      	ldr	r5, [r0, #8]
   1d64e:	68c0      	ldr	r0, [r0, #12]
   1d650:	5067      	str	r7, [r4, r1]
   1d652:	6056      	str	r6, [r2, #4]
   1d654:	6095      	str	r5, [r2, #8]
   1d656:	60d0      	str	r0, [r2, #12]

    /* Add to total */
    ++g_nrf_num_irks;
   1d658:	3301      	adds	r3, #1
   1d65a:	4a03      	ldr	r2, [pc, #12]	; (1d668 <ble_hw_resolv_list_add+0x30>)
   1d65c:	7013      	strb	r3, [r2, #0]
    return BLE_ERR_SUCCESS;
   1d65e:	2000      	movs	r0, #0
}
   1d660:	bcf0      	pop	{r4, r5, r6, r7}
   1d662:	4770      	bx	lr
        return BLE_ERR_MEM_CAPACITY;
   1d664:	2007      	movs	r0, #7
}
   1d666:	4770      	bx	lr
   1d668:	20003c94 	.word	0x20003c94
   1d66c:	20003c98 	.word	0x20003c98

0001d670 <ble_hw_resolv_list_rmv>:
void
ble_hw_resolv_list_rmv(int index)
{
    uint32_t *irk_entry;

    if (index < g_nrf_num_irks) {
   1d670:	4b0b      	ldr	r3, [pc, #44]	; (1d6a0 <ble_hw_resolv_list_rmv+0x30>)
   1d672:	781b      	ldrb	r3, [r3, #0]
   1d674:	4283      	cmp	r3, r0
   1d676:	dd12      	ble.n	1d69e <ble_hw_resolv_list_rmv+0x2e>
{
   1d678:	b510      	push	{r4, lr}
        --g_nrf_num_irks;
   1d67a:	3b01      	subs	r3, #1
   1d67c:	b2db      	uxtb	r3, r3
   1d67e:	4a08      	ldr	r2, [pc, #32]	; (1d6a0 <ble_hw_resolv_list_rmv+0x30>)
   1d680:	7013      	strb	r3, [r2, #0]
        irk_entry = &g_nrf_irk_list[index];
   1d682:	4c08      	ldr	r4, [pc, #32]	; (1d6a4 <ble_hw_resolv_list_rmv+0x34>)
   1d684:	eb04 0480 	add.w	r4, r4, r0, lsl #2
        if (g_nrf_num_irks > index) {
   1d688:	4283      	cmp	r3, r0
   1d68a:	dc00      	bgt.n	1d68e <ble_hw_resolv_list_rmv+0x1e>
            memmove(irk_entry, irk_entry + 4, 16 * (g_nrf_num_irks - index));
        }
    }
}
   1d68c:	bd10      	pop	{r4, pc}
            memmove(irk_entry, irk_entry + 4, 16 * (g_nrf_num_irks - index));
   1d68e:	1a1a      	subs	r2, r3, r0
   1d690:	0112      	lsls	r2, r2, #4
   1d692:	f104 0110 	add.w	r1, r4, #16
   1d696:	4620      	mov	r0, r4
   1d698:	f7f1 f98f 	bl	e9ba <memmove>
}
   1d69c:	e7f6      	b.n	1d68c <ble_hw_resolv_list_rmv+0x1c>
   1d69e:	4770      	bx	lr
   1d6a0:	20003c94 	.word	0x20003c94
   1d6a4:	20003c98 	.word	0x20003c98

0001d6a8 <ble_hw_resolv_list_size>:
 */
uint8_t
ble_hw_resolv_list_size(void)
{
    return BLE_HW_RESOLV_LIST_SIZE;
}
   1d6a8:	2010      	movs	r0, #16
   1d6aa:	4770      	bx	lr

0001d6ac <ble_hw_resolv_list_match>:
int
ble_hw_resolv_list_match(void)
{
    uint32_t index;

    if (NRF_AAR->EVENTS_END) {
   1d6ac:	4b08      	ldr	r3, [pc, #32]	; (1d6d0 <ble_hw_resolv_list_match+0x24>)
   1d6ae:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   1d6b2:	b13b      	cbz	r3, 1d6c4 <ble_hw_resolv_list_match+0x18>
        if (NRF_AAR->EVENTS_RESOLVED) {
   1d6b4:	4b06      	ldr	r3, [pc, #24]	; (1d6d0 <ble_hw_resolv_list_match+0x24>)
   1d6b6:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   1d6ba:	b133      	cbz	r3, 1d6ca <ble_hw_resolv_list_match+0x1e>
            index = NRF_AAR->STATUS;
   1d6bc:	4b04      	ldr	r3, [pc, #16]	; (1d6d0 <ble_hw_resolv_list_match+0x24>)
   1d6be:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
            return (int)index;
   1d6c2:	4770      	bx	lr
        }
    }

    return -1;
   1d6c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1d6c8:	4770      	bx	lr
   1d6ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1d6ce:	4770      	bx	lr
   1d6d0:	4000f000 	.word	0x4000f000

0001d6d4 <ble_phy_apply_errata_102_106_107>:
{
    /* [102] RADIO: PAYLOAD/END events delayed or not triggered after ADDRESS
     * [106] RADIO: Higher CRC error rates for some access addresses
     * [107] RADIO: Immediate address match for access addresses containing MSBs 0x00
     */
    *(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   1d6d4:	4a04      	ldr	r2, [pc, #16]	; (1d6e8 <ble_phy_apply_errata_102_106_107+0x14>)
   1d6d6:	6813      	ldr	r3, [r2, #0]
                         0xfffffffe) | 0x01000000;
   1d6d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   1d6dc:	f023 0301 	bic.w	r3, r3, #1
   1d6e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    *(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   1d6e4:	6013      	str	r3, [r2, #0]
}
   1d6e6:	4770      	bx	lr
   1d6e8:	40001774 	.word	0x40001774

0001d6ec <nrf_wait_disabled>:
static void
nrf_wait_disabled(void)
{
    uint32_t state;

    state = NRF_RADIO->STATE;
   1d6ec:	4b06      	ldr	r3, [pc, #24]	; (1d708 <nrf_wait_disabled+0x1c>)
   1d6ee:	f8d3 3550 	ldr.w	r3, [r3, #1360]	; 0x550
    if (state != RADIO_STATE_STATE_Disabled) {
   1d6f2:	b143      	cbz	r3, 1d706 <nrf_wait_disabled+0x1a>
        if ((state == RADIO_STATE_STATE_RxDisable) ||
   1d6f4:	2b04      	cmp	r3, #4
   1d6f6:	d001      	beq.n	1d6fc <nrf_wait_disabled+0x10>
   1d6f8:	2b0c      	cmp	r3, #12
   1d6fa:	d104      	bne.n	1d706 <nrf_wait_disabled+0x1a>
            (state == RADIO_STATE_STATE_TxDisable)) {
            /* This will end within a short time (6 usecs). Just poll */
            while (NRF_RADIO->STATE == state) {
   1d6fc:	4a02      	ldr	r2, [pc, #8]	; (1d708 <nrf_wait_disabled+0x1c>)
   1d6fe:	f8d2 2550 	ldr.w	r2, [r2, #1360]	; 0x550
   1d702:	429a      	cmp	r2, r3
   1d704:	d0fa      	beq.n	1d6fc <nrf_wait_disabled+0x10>
                /* If this fails, something is really wrong. Should last
                 * no more than 6 usecs */
            }
        }
    }
}
   1d706:	4770      	bx	lr
   1d708:	40001000 	.word	0x40001000

0001d70c <ble_phy_set_start_time>:
 *
 *
 */
static int
ble_phy_set_start_time(uint32_t cputime, uint8_t rem_usecs, bool tx)
{
   1d70c:	b430      	push	{r4, r5}
     * Radio ramp-up time is 40 usecs and TX delay is 3 or 5 usecs depending on
     * phy, thus we'll offset RTC by 2 full ticks (61 usecs) and then compensate
     * using TIMER0 with 1 usec precision.
     */

    cputime -= 2;
   1d70e:	1e84      	subs	r4, r0, #2
    rem_usecs += 61;
    if (tx) {
   1d710:	2a00      	cmp	r2, #0
   1d712:	d03d      	beq.n	1d790 <ble_phy_set_start_time+0x84>
        rem_usecs -= BLE_PHY_T_TXENFAST;
   1d714:	3115      	adds	r1, #21
   1d716:	b2c9      	uxtb	r1, r1
        rem_usecs -= g_ble_phy_t_txdelay[g_ble_phy_data.phy_cur_phy_mode];
   1d718:	4b23      	ldr	r3, [pc, #140]	; (1d7a8 <ble_phy_set_start_time+0x9c>)
   1d71a:	7a9b      	ldrb	r3, [r3, #10]
   1d71c:	4a23      	ldr	r2, [pc, #140]	; (1d7ac <ble_phy_set_start_time+0xa0>)
   1d71e:	5cd3      	ldrb	r3, [r2, r3]
   1d720:	1ac9      	subs	r1, r1, r3
   1d722:	b2c9      	uxtb	r1, r1
     * tick then we should better count one more low-power tick rather than
     * 30 high-power usecs. Also make sure we don't set TIMER0 CC to 0 as the
     * compare won't occur.
     */

    if (rem_usecs > 30) {
   1d724:	291e      	cmp	r1, #30
   1d726:	d902      	bls.n	1d72e <ble_phy_set_start_time+0x22>
        cputime++;
   1d728:	1e44      	subs	r4, r0, #1
        rem_usecs -= 30;
   1d72a:	391e      	subs	r1, #30
   1d72c:	b2c9      	uxtb	r1, r1
     *      counter.
     *
     * NOTE: since the counter can tick 1 while we do these calculations we
     * need to account for it.
     */
    next_cc = cputime & 0xffffff;
   1d72e:	f024 457f 	bic.w	r5, r4, #4278190080	; 0xff000000
    cur_cc = NRF_RTC0->CC[0];
   1d732:	4a1f      	ldr	r2, [pc, #124]	; (1d7b0 <ble_phy_set_start_time+0xa4>)
   1d734:	f8d2 3540 	ldr.w	r3, [r2, #1344]	; 0x540
    cntr = NRF_RTC0->COUNTER;
   1d738:	f8d2 2504 	ldr.w	r2, [r2, #1284]	; 0x504

    delta = (cur_cc - cntr) & 0xffffff;
   1d73c:	1a9b      	subs	r3, r3, r2
   1d73e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    if ((delta <= 3) && (delta != 0)) {
   1d742:	3b01      	subs	r3, #1
   1d744:	2b02      	cmp	r3, #2
   1d746:	d926      	bls.n	1d796 <ble_phy_set_start_time+0x8a>
        return -1;
    }
    delta = (next_cc - cntr) & 0xffffff;
   1d748:	1aaa      	subs	r2, r5, r2
   1d74a:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
    if ((delta & 0x800000) || (delta < 3)) {
   1d74e:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
   1d752:	d123      	bne.n	1d79c <ble_phy_set_start_time+0x90>
   1d754:	2b02      	cmp	r3, #2
   1d756:	d924      	bls.n	1d7a2 <ble_phy_set_start_time+0x96>
        return -1;
    }

    /* Clear and set TIMER0 to fire off at proper time */
    NRF_TIMER0->TASKS_CLEAR = 1;
   1d758:	4b16      	ldr	r3, [pc, #88]	; (1d7b4 <ble_phy_set_start_time+0xa8>)
   1d75a:	2201      	movs	r2, #1
   1d75c:	60da      	str	r2, [r3, #12]
    NRF_TIMER0->CC[0] = rem_usecs;
   1d75e:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    NRF_TIMER0->EVENTS_COMPARE[0] = 0;
   1d762:	2000      	movs	r0, #0
   1d764:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140

    /* Set RTC compare to start TIMER0 */
    NRF_RTC0->EVENTS_COMPARE[0] = 0;
   1d768:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
   1d76c:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
    NRF_RTC0->CC[0] = next_cc;
   1d770:	f8c3 5540 	str.w	r5, [r3, #1344]	; 0x540
    NRF_RTC0->EVTENSET = RTC_EVTENSET_COMPARE0_Msk;
   1d774:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1d778:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344

    /* Enable PPI */
    NRF_PPI->CHENSET = PPI_CHEN_CH31_Msk;
   1d77c:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
   1d780:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   1d784:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504

    /* Store the cputime at which we set the RTC */
    g_ble_phy_data.phy_start_cputime = cputime;
   1d788:	4b07      	ldr	r3, [pc, #28]	; (1d7a8 <ble_phy_set_start_time+0x9c>)
   1d78a:	631c      	str	r4, [r3, #48]	; 0x30

    return 0;
}
   1d78c:	bc30      	pop	{r4, r5}
   1d78e:	4770      	bx	lr
        rem_usecs -= BLE_PHY_T_RXENFAST;
   1d790:	3115      	adds	r1, #21
   1d792:	b2c9      	uxtb	r1, r1
   1d794:	e7c6      	b.n	1d724 <ble_phy_set_start_time+0x18>
        return -1;
   1d796:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1d79a:	e7f7      	b.n	1d78c <ble_phy_set_start_time+0x80>
        return -1;
   1d79c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1d7a0:	e7f4      	b.n	1d78c <ble_phy_set_start_time+0x80>
   1d7a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1d7a6:	e7f1      	b.n	1d78c <ble_phy_set_start_time+0x80>
   1d7a8:	20003cdc 	.word	0x20003cdc
   1d7ac:	00031e74 	.word	0x00031e74
   1d7b0:	4000b000 	.word	0x4000b000
   1d7b4:	40008000 	.word	0x40008000

0001d7b8 <ble_phy_get_ccm_datarate>:
    assert(0);
    return 0;
#else
    return CCM_MODE_DATARATE_1Mbit << CCM_MODE_DATARATE_Pos;
#endif
}
   1d7b8:	2000      	movs	r0, #0
   1d7ba:	4770      	bx	lr

0001d7bc <ble_phy_rx_xcvr_setup>:
/**
 * Setup transceiver for receive.
 */
static void
ble_phy_rx_xcvr_setup(void)
{
   1d7bc:	b510      	push	{r4, lr}

    dptr = (uint8_t *)&g_ble_phy_rx_buf[0];
    dptr += 3;

#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LE_ENCRYPTION)
    if (g_ble_phy_data.phy_encrypted) {
   1d7be:	4b35      	ldr	r3, [pc, #212]	; (1d894 <ble_phy_rx_xcvr_setup+0xd8>)
   1d7c0:	79db      	ldrb	r3, [r3, #7]
   1d7c2:	b383      	cbz	r3, 1d826 <ble_phy_rx_xcvr_setup+0x6a>
        NRF_RADIO->PACKETPTR = (uint32_t)&g_ble_phy_enc_buf[0];
   1d7c4:	4b34      	ldr	r3, [pc, #208]	; (1d898 <ble_phy_rx_xcvr_setup+0xdc>)
   1d7c6:	4a35      	ldr	r2, [pc, #212]	; (1d89c <ble_phy_rx_xcvr_setup+0xe0>)
   1d7c8:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
        NRF_CCM->INPTR = (uint32_t)&g_ble_phy_enc_buf[0];
   1d7cc:	4c34      	ldr	r4, [pc, #208]	; (1d8a0 <ble_phy_rx_xcvr_setup+0xe4>)
   1d7ce:	f8c4 350c 	str.w	r3, [r4, #1292]	; 0x50c
        NRF_CCM->OUTPTR = (uint32_t)dptr;
   1d7d2:	4b34      	ldr	r3, [pc, #208]	; (1d8a4 <ble_phy_rx_xcvr_setup+0xe8>)
   1d7d4:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
        NRF_CCM->SCRATCHPTR = (uint32_t)&g_nrf_encrypt_scratchpad[0];
   1d7d8:	4b33      	ldr	r3, [pc, #204]	; (1d8a8 <ble_phy_rx_xcvr_setup+0xec>)
   1d7da:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
        NRF_CCM->MODE = CCM_MODE_LENGTH_Msk | CCM_MODE_MODE_Decryption |
                                                    ble_phy_get_ccm_datarate();
   1d7de:	f7ff ffeb 	bl	1d7b8 <ble_phy_get_ccm_datarate>
        NRF_CCM->MODE = CCM_MODE_LENGTH_Msk | CCM_MODE_MODE_Decryption |
   1d7e2:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
   1d7e6:	f040 0001 	orr.w	r0, r0, #1
   1d7ea:	f8c4 0504 	str.w	r0, [r4, #1284]	; 0x504
        NRF_CCM->CNFPTR = (uint32_t)&g_nrf_ccm_data;
   1d7ee:	4b2f      	ldr	r3, [pc, #188]	; (1d8ac <ble_phy_rx_xcvr_setup+0xf0>)
   1d7f0:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
        NRF_CCM->SHORTS = 0;
   1d7f4:	2300      	movs	r3, #0
   1d7f6:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        NRF_CCM->EVENTS_ERROR = 0;
   1d7fa:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
        NRF_CCM->EVENTS_ENDCRYPT = 0;
   1d7fe:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
        NRF_CCM->TASKS_KSGEN = 1;
   1d802:	2301      	movs	r3, #1
   1d804:	6023      	str	r3, [r4, #0]
        NRF_PPI->CHENSET = PPI_CHEN_CH25_Msk;
   1d806:	4b2a      	ldr	r3, [pc, #168]	; (1d8b0 <ble_phy_rx_xcvr_setup+0xf4>)
   1d808:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   1d80c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
#else
    NRF_RADIO->PACKETPTR = (uint32_t)dptr;
#endif

#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LL_PRIVACY)
    if (g_ble_phy_data.phy_privacy) {
   1d810:	4b20      	ldr	r3, [pc, #128]	; (1d894 <ble_phy_rx_xcvr_setup+0xd8>)
   1d812:	7a1b      	ldrb	r3, [r3, #8]
   1d814:	b963      	cbnz	r3, 1d830 <ble_phy_rx_xcvr_setup+0x74>
        NRF_AAR->SCRATCHPTR = (uint32_t)&g_ble_phy_data.phy_aar_scratch;
        NRF_AAR->EVENTS_END = 0;
        NRF_AAR->EVENTS_RESOLVED = 0;
        NRF_AAR->EVENTS_NOTRESOLVED = 0;
    } else {
        if (g_ble_phy_data.phy_encrypted == 0) {
   1d816:	4b1f      	ldr	r3, [pc, #124]	; (1d894 <ble_phy_rx_xcvr_setup+0xd8>)
   1d818:	79db      	ldrb	r3, [r3, #7]
   1d81a:	b9d3      	cbnz	r3, 1d852 <ble_phy_rx_xcvr_setup+0x96>
            NRF_AAR->ENABLE = AAR_ENABLE_ENABLE_Disabled;
   1d81c:	4b20      	ldr	r3, [pc, #128]	; (1d8a0 <ble_phy_rx_xcvr_setup+0xe4>)
   1d81e:	2200      	movs	r2, #0
   1d820:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
   1d824:	e015      	b.n	1d852 <ble_phy_rx_xcvr_setup+0x96>
        NRF_RADIO->PACKETPTR = (uint32_t)dptr;
   1d826:	4a1f      	ldr	r2, [pc, #124]	; (1d8a4 <ble_phy_rx_xcvr_setup+0xe8>)
   1d828:	4b1c      	ldr	r3, [pc, #112]	; (1d89c <ble_phy_rx_xcvr_setup+0xe0>)
   1d82a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   1d82e:	e7ef      	b.n	1d810 <ble_phy_rx_xcvr_setup+0x54>
        NRF_AAR->ENABLE = AAR_ENABLE_ENABLE_Enabled;
   1d830:	4b1b      	ldr	r3, [pc, #108]	; (1d8a0 <ble_phy_rx_xcvr_setup+0xe4>)
   1d832:	2203      	movs	r2, #3
   1d834:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
        NRF_AAR->IRKPTR = (uint32_t)&g_nrf_irk_list[0];
   1d838:	4a1e      	ldr	r2, [pc, #120]	; (1d8b4 <ble_phy_rx_xcvr_setup+0xf8>)
   1d83a:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
        NRF_AAR->SCRATCHPTR = (uint32_t)&g_ble_phy_data.phy_aar_scratch;
   1d83e:	4a1e      	ldr	r2, [pc, #120]	; (1d8b8 <ble_phy_rx_xcvr_setup+0xfc>)
   1d840:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
        NRF_AAR->EVENTS_END = 0;
   1d844:	2200      	movs	r2, #0
   1d846:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        NRF_AAR->EVENTS_RESOLVED = 0;
   1d84a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
        NRF_AAR->EVENTS_NOTRESOLVED = 0;
   1d84e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
        }
    }
#endif

    /* Turn off trigger TXEN on output compare match and AAR on bcmatch */
    NRF_PPI->CHENCLR = PPI_CHEN_CH20_Msk | PPI_CHEN_CH23_Msk;
   1d852:	4b17      	ldr	r3, [pc, #92]	; (1d8b0 <ble_phy_rx_xcvr_setup+0xf4>)
   1d854:	f44f 0210 	mov.w	r2, #9437184	; 0x900000
   1d858:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508

    /* Reset the rx started flag. Used for the wait for response */
    g_ble_phy_data.phy_rx_started = 0;
   1d85c:	4b0d      	ldr	r3, [pc, #52]	; (1d894 <ble_phy_rx_xcvr_setup+0xd8>)
   1d85e:	2200      	movs	r2, #0
   1d860:	719a      	strb	r2, [r3, #6]
    g_ble_phy_data.phy_state = BLE_PHY_STATE_RX;
   1d862:	2101      	movs	r1, #1
   1d864:	70d9      	strb	r1, [r3, #3]
        g_ble_phy_data.phy_bcc_offset = 5;
    } else {
        g_ble_phy_data.phy_bcc_offset = 0;
    }
#else
    g_ble_phy_data.phy_bcc_offset = 0;
   1d866:	735a      	strb	r2, [r3, #13]
#endif

    /* I want to know when 1st byte received (after address) */
    NRF_RADIO->BCC = 8 + g_ble_phy_data.phy_bcc_offset; /* in bits */
   1d868:	4b0c      	ldr	r3, [pc, #48]	; (1d89c <ble_phy_rx_xcvr_setup+0xe0>)
   1d86a:	2108      	movs	r1, #8
   1d86c:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
    NRF_RADIO->EVENTS_ADDRESS = 0;
   1d870:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    NRF_RADIO->EVENTS_DEVMATCH = 0;
   1d874:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    NRF_RADIO->EVENTS_BCMATCH = 0;
   1d878:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    NRF_RADIO->EVENTS_RSSIEND = 0;
   1d87c:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    NRF_RADIO->EVENTS_CRCOK = 0;
   1d880:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
    NRF_RADIO->SHORTS = RADIO_SHORTS_END_DISABLE_Msk |
   1d884:	f240 1253 	movw	r2, #339	; 0x153
   1d888:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
                        RADIO_SHORTS_READY_START_Msk |
                        RADIO_SHORTS_ADDRESS_BCSTART_Msk |
                        RADIO_SHORTS_ADDRESS_RSSISTART_Msk |
                        RADIO_SHORTS_DISABLED_RSSISTOP_Msk;

    NRF_RADIO->INTENSET = RADIO_INTENSET_ADDRESS_Msk;
   1d88c:	2202      	movs	r2, #2
   1d88e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1d892:	bd10      	pop	{r4, pc}
   1d894:	20003cdc 	.word	0x20003cdc
   1d898:	20002040 	.word	0x20002040
   1d89c:	40001000 	.word	0x40001000
   1d8a0:	4000f000 	.word	0x4000f000
   1d8a4:	20002147 	.word	0x20002147
   1d8a8:	20003d10 	.word	0x20003d10
   1d8ac:	20003e5c 	.word	0x20003e5c
   1d8b0:	4001f000 	.word	0x4001f000
   1d8b4:	20003c98 	.word	0x20003c98
   1d8b8:	20003cec 	.word	0x20003cec

0001d8bc <ble_phy_set_access_addr>:
 *
 * @return int 0: success; PHY error code otherwise
 */
static int
ble_phy_set_access_addr(uint32_t access_addr)
{
   1d8bc:	b508      	push	{r3, lr}
    NRF_RADIO->BASE0 = (access_addr << 8);
   1d8be:	0203      	lsls	r3, r0, #8
   1d8c0:	4a08      	ldr	r2, [pc, #32]	; (1d8e4 <ble_phy_set_access_addr+0x28>)
   1d8c2:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
    NRF_RADIO->PREFIX0 = (NRF_RADIO->PREFIX0 & 0xFFFFFF00) | (access_addr >> 24);
   1d8c6:	f8d2 3524 	ldr.w	r3, [r2, #1316]	; 0x524
   1d8ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1d8ce:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
   1d8d2:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524

    g_ble_phy_data.phy_access_address = access_addr;
   1d8d6:	4b04      	ldr	r3, [pc, #16]	; (1d8e8 <ble_phy_set_access_addr+0x2c>)
   1d8d8:	6158      	str	r0, [r3, #20]

    ble_phy_apply_errata_102_106_107();
   1d8da:	f7ff fefb 	bl	1d6d4 <ble_phy_apply_errata_102_106_107>

    return 0;
}
   1d8de:	2000      	movs	r0, #0
   1d8e0:	bd08      	pop	{r3, pc}
   1d8e2:	bf00      	nop
   1d8e4:	40001000 	.word	0x40001000
   1d8e8:	20003cdc 	.word	0x20003cdc

0001d8ec <ble_phy_stop_usec_timer>:
 * Stop the timer used to count microseconds when using RTC for cputime
 */
static void
ble_phy_stop_usec_timer(void)
{
    NRF_TIMER0->TASKS_STOP = 1;
   1d8ec:	4b05      	ldr	r3, [pc, #20]	; (1d904 <ble_phy_stop_usec_timer+0x18>)
   1d8ee:	2201      	movs	r2, #1
   1d8f0:	605a      	str	r2, [r3, #4]
    NRF_TIMER0->TASKS_SHUTDOWN = 1;
   1d8f2:	611a      	str	r2, [r3, #16]
    NRF_RTC0->EVTENCLR = RTC_EVTENSET_COMPARE0_Msk;
   1d8f4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
   1d8f8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1d8fc:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
}
   1d900:	4770      	bx	lr
   1d902:	bf00      	nop
   1d904:	40008000 	.word	0x40008000

0001d908 <ble_phy_disable_irq_and_ppi>:
 * the phy.
 */
static void
ble_phy_disable_irq_and_ppi(void)
{
    NRF_RADIO->INTENCLR = NRF_RADIO_IRQ_MASK_ALL;
   1d908:	4b0a      	ldr	r3, [pc, #40]	; (1d934 <ble_phy_disable_irq_and_ppi+0x2c>)
   1d90a:	f243 42ff 	movw	r2, #13567	; 0x34ff
   1d90e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    NRF_RADIO->SHORTS = 0;
   1d912:	2200      	movs	r2, #0
   1d914:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    NRF_RADIO->TASKS_DISABLE = 1;
   1d918:	2101      	movs	r1, #1
   1d91a:	6119      	str	r1, [r3, #16]
    NRF_PPI->CHENCLR = PPI_CHEN_CH4_Msk | PPI_CHEN_CH5_Msk | PPI_CHEN_CH20_Msk |
   1d91c:	f503 33f0 	add.w	r3, r3, #122880	; 0x1e000
   1d920:	4905      	ldr	r1, [pc, #20]	; (1d938 <ble_phy_disable_irq_and_ppi+0x30>)
   1d922:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1d926:	4b05      	ldr	r3, [pc, #20]	; (1d93c <ble_phy_disable_irq_and_ppi+0x34>)
   1d928:	2102      	movs	r1, #2
   1d92a:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
          PPI_CHEN_CH21_Msk | PPI_CHEN_CH23_Msk |
          PPI_CHEN_CH25_Msk | PPI_CHEN_CH31_Msk;
    NVIC_ClearPendingIRQ(RADIO_IRQn);
    g_ble_phy_data.phy_state = BLE_PHY_STATE_IDLE;
   1d92e:	4b04      	ldr	r3, [pc, #16]	; (1d940 <ble_phy_disable_irq_and_ppi+0x38>)
   1d930:	70da      	strb	r2, [r3, #3]
}
   1d932:	4770      	bx	lr
   1d934:	40001000 	.word	0x40001000
   1d938:	82b00030 	.word	0x82b00030
   1d93c:	e000e100 	.word	0xe000e100
   1d940:	20003cdc 	.word	0x20003cdc

0001d944 <ble_phy_set_start_now>:
{
   1d944:	b538      	push	{r3, r4, r5, lr}
    OS_ENTER_CRITICAL(sr);
   1d946:	f7f0 fdf5 	bl	e534 <os_arch_save_sr>
   1d94a:	4605      	mov	r5, r0
    NRF_TIMER0->TASKS_CLEAR = 1;
   1d94c:	4b10      	ldr	r3, [pc, #64]	; (1d990 <ble_phy_set_start_now+0x4c>)
   1d94e:	2201      	movs	r2, #1
   1d950:	60da      	str	r2, [r3, #12]
    NRF_TIMER0->CC[0] = 1;
   1d952:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    NRF_TIMER0->EVENTS_COMPARE[0] = 0;
   1d956:	2400      	movs	r4, #0
   1d958:	f8c3 4140 	str.w	r4, [r3, #320]	; 0x140
    now = os_cputime_get32();
   1d95c:	f011 faa7 	bl	2eeae <os_cputime_get32>
    NRF_RTC0->EVENTS_COMPARE[0] = 0;
   1d960:	4b0c      	ldr	r3, [pc, #48]	; (1d994 <ble_phy_set_start_now+0x50>)
   1d962:	f8c3 4140 	str.w	r4, [r3, #320]	; 0x140
    NRF_RTC0->CC[0] = now + 3;
   1d966:	3003      	adds	r0, #3
   1d968:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    NRF_RTC0->EVTENSET = RTC_EVTENSET_COMPARE0_Msk;
   1d96c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1d970:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
    NRF_PPI->CHENSET = PPI_CHEN_CH31_Msk;
   1d974:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
   1d978:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   1d97c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    g_ble_phy_data.phy_start_cputime = now + 3;
   1d980:	4b05      	ldr	r3, [pc, #20]	; (1d998 <ble_phy_set_start_now+0x54>)
   1d982:	6318      	str	r0, [r3, #48]	; 0x30
    OS_EXIT_CRITICAL(sr);
   1d984:	4628      	mov	r0, r5
   1d986:	f7f0 fddb 	bl	e540 <os_arch_restore_sr>
}
   1d98a:	4620      	mov	r0, r4
   1d98c:	bd38      	pop	{r3, r4, r5, pc}
   1d98e:	bf00      	nop
   1d990:	40008000 	.word	0x40008000
   1d994:	4000b000 	.word	0x4000b000
   1d998:	20003cdc 	.word	0x20003cdc

0001d99c <ble_phy_get_cur_phy>:
}
   1d99c:	2001      	movs	r0, #1
   1d99e:	4770      	bx	lr

0001d9a0 <ble_phy_rxpdu_copy>:
{
   1d9a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    assert(((uint32_t)dptr & 3) == 0);
   1d9a2:	f010 0f03 	tst.w	r0, #3
   1d9a6:	d10a      	bne.n	1d9be <ble_phy_rxpdu_copy+0x1e>
   1d9a8:	460e      	mov	r6, r1
    block_len = rxpdu->om_omp->omp_databuf_len;
   1d9aa:	688b      	ldr	r3, [r1, #8]
   1d9ac:	f8b3 c000 	ldrh.w	ip, [r3]
    rem_len = OS_MBUF_PKTHDR(rxpdu)->omp_len;
   1d9b0:	8a0d      	ldrh	r5, [r1, #16]
    copy_len = block_len - rxpdu->om_pkthdr_len - 4;
   1d9b2:	794b      	ldrb	r3, [r1, #5]
   1d9b4:	ebac 0303 	sub.w	r3, ip, r3
   1d9b8:	3b04      	subs	r3, #4
    om = rxpdu;
   1d9ba:	460f      	mov	r7, r1
   1d9bc:	e00b      	b.n	1d9d6 <ble_phy_rxpdu_copy+0x36>
    assert(((uint32_t)dptr & 3) == 0);
   1d9be:	f7ee fc13 	bl	c1e8 <hal_debugger_connected>
   1d9c2:	b100      	cbz	r0, 1d9c6 <ble_phy_rxpdu_copy+0x26>
   1d9c4:	be01      	bkpt	0x0001
   1d9c6:	2300      	movs	r3, #0
   1d9c8:	461a      	mov	r2, r3
   1d9ca:	4619      	mov	r1, r3
   1d9cc:	4618      	mov	r0, r3
   1d9ce:	f7ef f8bf 	bl	cb50 <__assert_func>
        om = SLIST_NEXT(om, om_next);
   1d9d2:	68ff      	ldr	r7, [r7, #12]
        copy_len = block_len;
   1d9d4:	4663      	mov	r3, ip
        copy_len = min(copy_len, rem_len);
   1d9d6:	462a      	mov	r2, r5
   1d9d8:	429d      	cmp	r5, r3
   1d9da:	bf28      	it	cs
   1d9dc:	461a      	movcs	r2, r3
        copy_len &= ~3;
   1d9de:	f022 0203 	bic.w	r2, r2, #3
        dst = om->om_data;
   1d9e2:	6839      	ldr	r1, [r7, #0]
        om->om_len = copy_len;
   1d9e4:	80fa      	strh	r2, [r7, #6]
        rem_len -= copy_len;
   1d9e6:	1aad      	subs	r5, r5, r2
        block_rem_len -= copy_len;
   1d9e8:	eba3 0e02 	sub.w	lr, r3, r2
        __asm__ volatile (".syntax unified              \n"
   1d9ec:	4614      	mov	r4, r2
   1d9ee:	e001      	b.n	1d9f4 <ble_phy_rxpdu_copy+0x54>
   1d9f0:	5883      	ldr	r3, [r0, r2]
   1d9f2:	508b      	str	r3, [r1, r2]
   1d9f4:	3a04      	subs	r2, #4
   1d9f6:	d5fb      	bpl.n	1d9f0 <ble_phy_rxpdu_copy+0x50>
   1d9f8:	1900      	adds	r0, r0, r4
   1d9fa:	1909      	adds	r1, r1, r4
        if ((rem_len < 4) && (block_rem_len >= rem_len)) {
   1d9fc:	2d03      	cmp	r5, #3
   1d9fe:	d8e8      	bhi.n	1d9d2 <ble_phy_rxpdu_copy+0x32>
   1da00:	4575      	cmp	r5, lr
   1da02:	d8e6      	bhi.n	1d9d2 <ble_phy_rxpdu_copy+0x32>
    om->om_len += rem_len;
   1da04:	88fb      	ldrh	r3, [r7, #6]
   1da06:	442b      	add	r3, r5
   1da08:	80fb      	strh	r3, [r7, #6]
    __asm__ volatile (".syntax unified              \n"
   1da0a:	e001      	b.n	1da10 <ble_phy_rxpdu_copy+0x70>
   1da0c:	5d43      	ldrb	r3, [r0, r5]
   1da0e:	554b      	strb	r3, [r1, r5]
   1da10:	3d01      	subs	r5, #1
   1da12:	d5fb      	bpl.n	1da0c <ble_phy_rxpdu_copy+0x6c>
    memcpy(BLE_MBUF_HDR_PTR(rxpdu), &g_ble_phy_data.rxhdr,
   1da14:	4c03      	ldr	r4, [pc, #12]	; (1da24 <ble_phy_rxpdu_copy+0x84>)
   1da16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   1da18:	61b0      	str	r0, [r6, #24]
   1da1a:	61f1      	str	r1, [r6, #28]
   1da1c:	6232      	str	r2, [r6, #32]
   1da1e:	6273      	str	r3, [r6, #36]	; 0x24
}
   1da20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1da22:	bf00      	nop
   1da24:	20003cf4 	.word	0x20003cf4

0001da28 <ble_phy_wfr_enable>:
{
   1da28:	b410      	push	{r4}
    phy = g_ble_phy_data.phy_cur_phy_mode;
   1da2a:	4b1b      	ldr	r3, [pc, #108]	; (1da98 <ble_phy_wfr_enable+0x70>)
   1da2c:	7a9c      	ldrb	r4, [r3, #10]
    if (txrx == BLE_PHY_WFR_ENABLE_TXRX) {
   1da2e:	2801      	cmp	r0, #1
   1da30:	d029      	beq.n	1da86 <ble_phy_wfr_enable+0x5e>
        end_time = NRF_TIMER0->CC[0] + BLE_PHY_T_RXENFAST + wfr_usecs;
   1da32:	4b1a      	ldr	r3, [pc, #104]	; (1da9c <ble_phy_wfr_enable+0x74>)
   1da34:	f8d3 3540 	ldr.w	r3, [r3, #1344]	; 0x540
   1da38:	441a      	add	r2, r3
   1da3a:	3228      	adds	r2, #40	; 0x28
    end_time += ble_phy_mode_pdu_start_off(phy);
   1da3c:	3228      	adds	r2, #40	; 0x28
    end_time += g_ble_phy_t_rxaddrdelay[phy];
   1da3e:	4b18      	ldr	r3, [pc, #96]	; (1daa0 <ble_phy_wfr_enable+0x78>)
   1da40:	5d1b      	ldrb	r3, [r3, r4]
   1da42:	441a      	add	r2, r3
    NRF_TIMER0->CC[3] = end_time;
   1da44:	4b15      	ldr	r3, [pc, #84]	; (1da9c <ble_phy_wfr_enable+0x74>)
   1da46:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
    NRF_TIMER0->EVENTS_COMPARE[3] = 0;
   1da4a:	2200      	movs	r2, #0
   1da4c:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
    NRF_PPI->CHENSET = (PPI_CHEN_CH4_Msk | PPI_CHEN_CH5_Msk);
   1da50:	4a14      	ldr	r2, [pc, #80]	; (1daa4 <ble_phy_wfr_enable+0x7c>)
   1da52:	2130      	movs	r1, #48	; 0x30
   1da54:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
    NRF_RADIO->INTENSET = RADIO_INTENSET_DISABLED_Msk;
   1da58:	f5a2 32f0 	sub.w	r2, r2, #122880	; 0x1e000
   1da5c:	2110      	movs	r1, #16
   1da5e:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
    NRF_TIMER0->TASKS_CAPTURE[1] = 1;
   1da62:	2201      	movs	r2, #1
   1da64:	645a      	str	r2, [r3, #68]	; 0x44
    if (NRF_TIMER0->CC[1] > NRF_TIMER0->CC[3]) {
   1da66:	f8d3 2544 	ldr.w	r2, [r3, #1348]	; 0x544
   1da6a:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
   1da6e:	429a      	cmp	r2, r3
   1da70:	d907      	bls.n	1da82 <ble_phy_wfr_enable+0x5a>
        NRF_PPI->CHENCLR = PPI_CHEN_CH4_Msk | PPI_CHEN_CH5_Msk;
   1da72:	4b0c      	ldr	r3, [pc, #48]	; (1daa4 <ble_phy_wfr_enable+0x7c>)
   1da74:	2230      	movs	r2, #48	; 0x30
   1da76:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
        NRF_RADIO->TASKS_DISABLE = 1;
   1da7a:	f5a3 33f0 	sub.w	r3, r3, #122880	; 0x1e000
   1da7e:	2201      	movs	r2, #1
   1da80:	611a      	str	r2, [r3, #16]
}
   1da82:	bc10      	pop	{r4}
   1da84:	4770      	bx	lr
        end_time = NRF_TIMER0->CC[2] + BLE_LL_IFS;
   1da86:	4b05      	ldr	r3, [pc, #20]	; (1da9c <ble_phy_wfr_enable+0x74>)
   1da88:	f8d3 3548 	ldr.w	r3, [r3, #1352]	; 0x548
   1da8c:	3396      	adds	r3, #150	; 0x96
        end_time += g_ble_phy_t_txenddelay[tx_phy_mode];
   1da8e:	4a06      	ldr	r2, [pc, #24]	; (1daa8 <ble_phy_wfr_enable+0x80>)
   1da90:	5c52      	ldrb	r2, [r2, r1]
   1da92:	441a      	add	r2, r3
        end_time += 1;
   1da94:	3203      	adds	r2, #3
   1da96:	e7d1      	b.n	1da3c <ble_phy_wfr_enable+0x14>
   1da98:	20003cdc 	.word	0x20003cdc
   1da9c:	40008000 	.word	0x40008000
   1daa0:	00031e6c 	.word	0x00031e6c
   1daa4:	4001f000 	.word	0x4001f000
   1daa8:	00031e78 	.word	0x00031e78

0001daac <ble_phy_tx_end_isr>:
{
   1daac:	b510      	push	{r4, lr}
    tx_phy_mode = g_ble_phy_data.phy_cur_phy_mode;
   1daae:	4b30      	ldr	r3, [pc, #192]	; (1db70 <ble_phy_tx_end_isr+0xc4>)
   1dab0:	7a9c      	ldrb	r4, [r3, #10]
    was_encrypted = g_ble_phy_data.phy_encrypted;
   1dab2:	79d9      	ldrb	r1, [r3, #7]
    assert(g_ble_phy_data.phy_state == BLE_PHY_STATE_TX);
   1dab4:	78db      	ldrb	r3, [r3, #3]
   1dab6:	2b02      	cmp	r3, #2
   1dab8:	d12c      	bne.n	1db14 <ble_phy_tx_end_isr+0x68>
    NRF_RADIO->EVENTS_DISABLED = 0;
   1daba:	4b2e      	ldr	r3, [pc, #184]	; (1db74 <ble_phy_tx_end_isr+0xc8>)
   1dabc:	2200      	movs	r2, #0
   1dabe:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    NRF_RADIO->INTENCLR = RADIO_INTENCLR_DISABLED_Msk;
   1dac2:	2010      	movs	r0, #16
   1dac4:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    NRF_RADIO->EVENTS_END = 0;
   1dac8:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    wfr_time = NRF_RADIO->SHORTS;
   1dacc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    if (was_encrypted) {
   1dad0:	b159      	cbz	r1, 1daea <ble_phy_tx_end_isr+0x3e>
        if (NRF_CCM->EVENTS_ERROR) {
   1dad2:	4b29      	ldr	r3, [pc, #164]	; (1db78 <ble_phy_tx_end_isr+0xcc>)
   1dad4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
   1dad8:	b13b      	cbz	r3, 1daea <ble_phy_tx_end_isr+0x3e>
            STATS_INC(ble_phy_stats, tx_hw_err);
   1dada:	4a28      	ldr	r2, [pc, #160]	; (1db7c <ble_phy_tx_end_isr+0xd0>)
   1dadc:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
   1dade:	3301      	adds	r3, #1
   1dae0:	63d3      	str	r3, [r2, #60]	; 0x3c
            NRF_CCM->EVENTS_ERROR = 0;
   1dae2:	4b25      	ldr	r3, [pc, #148]	; (1db78 <ble_phy_tx_end_isr+0xcc>)
   1dae4:	2200      	movs	r2, #0
   1dae6:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    if (g_ble_phy_data.txend_cb) {
   1daea:	4b21      	ldr	r3, [pc, #132]	; (1db70 <ble_phy_tx_end_isr+0xc4>)
   1daec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1daee:	b113      	cbz	r3, 1daf6 <ble_phy_tx_end_isr+0x4a>
        g_ble_phy_data.txend_cb(g_ble_phy_data.txend_arg);
   1daf0:	4a1f      	ldr	r2, [pc, #124]	; (1db70 <ble_phy_tx_end_isr+0xc4>)
   1daf2:	6a90      	ldr	r0, [r2, #40]	; 0x28
   1daf4:	4798      	blx	r3
    transition = g_ble_phy_data.phy_transition;
   1daf6:	4b1e      	ldr	r3, [pc, #120]	; (1db70 <ble_phy_tx_end_isr+0xc4>)
   1daf8:	791b      	ldrb	r3, [r3, #4]
    if (transition == BLE_PHY_TRANSITION_TX_RX) {
   1dafa:	2b02      	cmp	r3, #2
   1dafc:	d014      	beq.n	1db28 <ble_phy_tx_end_isr+0x7c>
        NRF_TIMER0->TASKS_STOP = 1;
   1dafe:	4a20      	ldr	r2, [pc, #128]	; (1db80 <ble_phy_tx_end_isr+0xd4>)
   1db00:	2101      	movs	r1, #1
   1db02:	6051      	str	r1, [r2, #4]
        NRF_TIMER0->TASKS_SHUTDOWN = 1;
   1db04:	6111      	str	r1, [r2, #16]
        NRF_PPI->CHENCLR = PPI_CHEN_CH4_Msk | PPI_CHEN_CH5_Msk |
   1db06:	f502 32b8 	add.w	r2, r2, #94208	; 0x17000
   1db0a:	491e      	ldr	r1, [pc, #120]	; (1db84 <ble_phy_tx_end_isr+0xd8>)
   1db0c:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
        assert(transition == BLE_PHY_TRANSITION_NONE);
   1db10:	bb23      	cbnz	r3, 1db5c <ble_phy_tx_end_isr+0xb0>
}
   1db12:	bd10      	pop	{r4, pc}
    assert(g_ble_phy_data.phy_state == BLE_PHY_STATE_TX);
   1db14:	f7ee fb68 	bl	c1e8 <hal_debugger_connected>
   1db18:	b100      	cbz	r0, 1db1c <ble_phy_tx_end_isr+0x70>
   1db1a:	be01      	bkpt	0x0001
   1db1c:	2300      	movs	r3, #0
   1db1e:	461a      	mov	r2, r3
   1db20:	4619      	mov	r1, r3
   1db22:	4618      	mov	r0, r3
   1db24:	f7ef f814 	bl	cb50 <__assert_func>
        ble_phy_rx_xcvr_setup();
   1db28:	f7ff fe48 	bl	1d7bc <ble_phy_rx_xcvr_setup>
        ble_phy_wfr_enable(BLE_PHY_WFR_ENABLE_TXRX, tx_phy_mode, 0);
   1db2c:	2200      	movs	r2, #0
   1db2e:	4621      	mov	r1, r4
   1db30:	2001      	movs	r0, #1
   1db32:	f7ff ff79 	bl	1da28 <ble_phy_wfr_enable>
        rx_time = NRF_TIMER0->CC[2] + BLE_LL_IFS;
   1db36:	4a12      	ldr	r2, [pc, #72]	; (1db80 <ble_phy_tx_end_isr+0xd4>)
   1db38:	f8d2 1548 	ldr.w	r1, [r2, #1352]	; 0x548
   1db3c:	3196      	adds	r1, #150	; 0x96
        rx_time += g_ble_phy_t_txenddelay[tx_phy_mode];
   1db3e:	4b12      	ldr	r3, [pc, #72]	; (1db88 <ble_phy_tx_end_isr+0xdc>)
   1db40:	5d1b      	ldrb	r3, [r3, r4]
   1db42:	440b      	add	r3, r1
        rx_time -= 2;
   1db44:	3b2a      	subs	r3, #42	; 0x2a
        NRF_TIMER0->CC[0] = rx_time;
   1db46:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
        NRF_TIMER0->EVENTS_COMPARE[0] = 0;
   1db4a:	2300      	movs	r3, #0
   1db4c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
        NRF_PPI->CHENSET = PPI_CHEN_CH21_Msk;
   1db50:	4b0e      	ldr	r3, [pc, #56]	; (1db8c <ble_phy_tx_end_isr+0xe0>)
   1db52:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   1db56:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   1db5a:	e7da      	b.n	1db12 <ble_phy_tx_end_isr+0x66>
        assert(transition == BLE_PHY_TRANSITION_NONE);
   1db5c:	f7ee fb44 	bl	c1e8 <hal_debugger_connected>
   1db60:	b100      	cbz	r0, 1db64 <ble_phy_tx_end_isr+0xb8>
   1db62:	be01      	bkpt	0x0001
   1db64:	2300      	movs	r3, #0
   1db66:	461a      	mov	r2, r3
   1db68:	4619      	mov	r1, r3
   1db6a:	4618      	mov	r0, r3
   1db6c:	f7ee fff0 	bl	cb50 <__assert_func>
   1db70:	20003cdc 	.word	0x20003cdc
   1db74:	40001000 	.word	0x40001000
   1db78:	4000f000 	.word	0x4000f000
   1db7c:	20003e1c 	.word	0x20003e1c
   1db80:	40008000 	.word	0x40008000
   1db84:	80100030 	.word	0x80100030
   1db88:	00031e78 	.word	0x00031e78
   1db8c:	4001f000 	.word	0x4001f000

0001db90 <ble_phy_init>:
{
   1db90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1db94:	b082      	sub	sp, #8
    g_ble_phy_data.phy_cur_phy_mode = BLE_PHY_MODE_1M;
   1db96:	4f4b      	ldr	r7, [pc, #300]	; (1dcc4 <ble_phy_init+0x134>)
   1db98:	2601      	movs	r6, #1
   1db9a:	72be      	strb	r6, [r7, #10]
    g_ble_phy_data.phy_tx_phy_mode = BLE_PHY_MODE_1M;
   1db9c:	72fe      	strb	r6, [r7, #11]
    g_ble_phy_data.phy_rx_phy_mode = BLE_PHY_MODE_1M;
   1db9e:	733e      	strb	r6, [r7, #12]
    g_ble_phy_data.rx_pwr_compensation = 0;
   1dba0:	2400      	movs	r4, #0
   1dba2:	73bc      	strb	r4, [r7, #14]
    g_ble_phy_data.phy_chan = BLE_PHY_NUM_CHANS;
   1dba4:	2328      	movs	r3, #40	; 0x28
   1dba6:	70bb      	strb	r3, [r7, #2]
    NRF_RADIO->POWER = 0;
   1dba8:	4b47      	ldr	r3, [pc, #284]	; (1dcc8 <ble_phy_init+0x138>)
   1dbaa:	f8c3 4ffc 	str.w	r4, [r3, #4092]	; 0xffc
    NRF_RADIO->POWER = 1;
   1dbae:	f8c3 6ffc 	str.w	r6, [r3, #4092]	; 0xffc
    NRF_RADIO->INTENCLR = NRF_RADIO_IRQ_MASK_ALL;
   1dbb2:	f243 42ff 	movw	r2, #13567	; 0x34ff
   1dbb6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    NRF_RADIO->MODE = RADIO_MODE_MODE_Ble_1Mbit;
   1dbba:	f04f 0903 	mov.w	r9, #3
   1dbbe:	f8c3 9510 	str.w	r9, [r3, #1296]	; 0x510
    NRF_RADIO->PCNF0 = NRF_PCNF0;
   1dbc2:	4a42      	ldr	r2, [pc, #264]	; (1dccc <ble_phy_init+0x13c>)
   1dbc4:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    NRF_RADIO->PCNF1 = NRF_MAXLEN |
   1dbc8:	4a41      	ldr	r2, [pc, #260]	; (1dcd0 <ble_phy_init+0x140>)
   1dbca:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast << RADIO_MODECNF0_RU_Pos) &
   1dbce:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   1dbd2:	4332      	orrs	r2, r6
   1dbd4:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
    NRF_RADIO->TXADDRESS  = 0;
   1dbd8:	f8c3 452c 	str.w	r4, [r3, #1324]	; 0x52c
    NRF_RADIO->RXADDRESSES  = (1 << 0);
   1dbdc:	f8c3 6530 	str.w	r6, [r3, #1328]	; 0x530
    NRF_RADIO->CRCCNF = (RADIO_CRCCNF_SKIPADDR_Skip << RADIO_CRCCNF_SKIPADDR_Pos) | RADIO_CRCCNF_LEN_Three;
   1dbe0:	f240 1203 	movw	r2, #259	; 0x103
   1dbe4:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
    NRF_RADIO->CRCPOLY = 0x0000065B;
   1dbe8:	f240 625b 	movw	r2, #1627	; 0x65b
   1dbec:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    NRF_RADIO->TIFS = BLE_LL_IFS;
   1dbf0:	2296      	movs	r2, #150	; 0x96
   1dbf2:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
    NRF_PPI->CHENSET = PPI_CHEN_CH26_Msk | PPI_CHEN_CH27_Msk;
   1dbf6:	f8df 8100 	ldr.w	r8, [pc, #256]	; 1dcf8 <ble_phy_init+0x168>
   1dbfa:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
   1dbfe:	f8c8 3504 	str.w	r3, [r8, #1284]	; 0x504
    NRF_CCM->INTENCLR = 0xffffffff;
   1dc02:	4d34      	ldr	r5, [pc, #208]	; (1dcd4 <ble_phy_init+0x144>)
   1dc04:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   1dc08:	f8c5 a308 	str.w	sl, [r5, #776]	; 0x308
    NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   1dc0c:	f8c5 6200 	str.w	r6, [r5, #512]	; 0x200
    NRF_CCM->EVENTS_ERROR = 0;
   1dc10:	f8c5 4108 	str.w	r4, [r5, #264]	; 0x108
    memset(g_nrf_encrypt_scratchpad, 0, sizeof(g_nrf_encrypt_scratchpad));
   1dc14:	f44f 7286 	mov.w	r2, #268	; 0x10c
   1dc18:	4621      	mov	r1, r4
   1dc1a:	482f      	ldr	r0, [pc, #188]	; (1dcd8 <ble_phy_init+0x148>)
   1dc1c:	f7f0 fee8 	bl	e9f0 <memset>
    g_ble_phy_data.phy_aar_scratch = 0;
   1dc20:	613c      	str	r4, [r7, #16]
    NRF_AAR->IRKPTR = (uint32_t)&g_nrf_irk_list[0];
   1dc22:	4b2e      	ldr	r3, [pc, #184]	; (1dcdc <ble_phy_init+0x14c>)
   1dc24:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
    NRF_AAR->INTENCLR = 0xffffffff;
   1dc28:	f8c5 a308 	str.w	sl, [r5, #776]	; 0x308
    NRF_AAR->EVENTS_END = 0;
   1dc2c:	f8c5 4100 	str.w	r4, [r5, #256]	; 0x100
    NRF_AAR->EVENTS_RESOLVED = 0;
   1dc30:	f8c5 4104 	str.w	r4, [r5, #260]	; 0x104
    NRF_AAR->EVENTS_NOTRESOLVED = 0;
   1dc34:	f8c5 4108 	str.w	r4, [r5, #264]	; 0x108
    NRF_AAR->NIRK = 0;
   1dc38:	f8c5 4504 	str.w	r4, [r5, #1284]	; 0x504
    NRF_TIMER0->TASKS_STOP = 1;
   1dc3c:	4b28      	ldr	r3, [pc, #160]	; (1dce0 <ble_phy_init+0x150>)
   1dc3e:	605e      	str	r6, [r3, #4]
    NRF_TIMER0->TASKS_SHUTDOWN = 1;
   1dc40:	611e      	str	r6, [r3, #16]
    NRF_TIMER0->BITMODE = 3;    /* 32-bit timer */
   1dc42:	f8c3 9508 	str.w	r9, [r3, #1288]	; 0x508
    NRF_TIMER0->MODE = 0;       /* Timer mode */
   1dc46:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
    NRF_TIMER0->PRESCALER = 4;  /* gives us 1 MHz */
   1dc4a:	2204      	movs	r2, #4
   1dc4c:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    NRF_PPI->CH[4].EEP = (uint32_t)&(NRF_RADIO->EVENTS_ADDRESS);
   1dc50:	f5a3 43dd 	sub.w	r3, r3, #28288	; 0x6e80
   1dc54:	3b7c      	subs	r3, #124	; 0x7c
   1dc56:	f8c8 3530 	str.w	r3, [r8, #1328]	; 0x530
    NRF_PPI->CH[4].TEP = (uint32_t)&(NRF_TIMER0->TASKS_CAPTURE[3]);
   1dc5a:	f503 43de 	add.w	r3, r3, #28416	; 0x6f00
   1dc5e:	3348      	adds	r3, #72	; 0x48
   1dc60:	f8c8 3534 	str.w	r3, [r8, #1332]	; 0x534
    NRF_PPI->CH[5].EEP = (uint32_t)&(NRF_TIMER0->EVENTS_COMPARE[3]);
   1dc64:	f503 7380 	add.w	r3, r3, #256	; 0x100
   1dc68:	f8c8 3538 	str.w	r3, [r8, #1336]	; 0x538
    NRF_PPI->CH[5].TEP = (uint32_t)&(NRF_RADIO->TASKS_DISABLE);
   1dc6c:	f5a3 43e2 	sub.w	r3, r3, #28928	; 0x7100
   1dc70:	3b3c      	subs	r3, #60	; 0x3c
   1dc72:	f8c8 353c 	str.w	r3, [r8, #1340]	; 0x53c
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1dc76:	4b1b      	ldr	r3, [pc, #108]	; (1dce4 <ble_phy_init+0x154>)
   1dc78:	f883 4301 	strb.w	r4, [r3, #769]	; 0x301
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1dc7c:	4a1a      	ldr	r2, [pc, #104]	; (1dce8 <ble_phy_init+0x158>)
   1dc7e:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1dc80:	491a      	ldr	r1, [pc, #104]	; (1dcec <ble_phy_init+0x15c>)
   1dc82:	6451      	str	r1, [r2, #68]	; 0x44
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1dc84:	2202      	movs	r2, #2
   1dc86:	601a      	str	r2, [r3, #0]
    if (!g_ble_phy_data.phy_stats_initialized) {
   1dc88:	783b      	ldrb	r3, [r7, #0]
   1dc8a:	b11b      	cbz	r3, 1dc94 <ble_phy_init+0x104>
}
   1dc8c:	2000      	movs	r0, #0
   1dc8e:	b002      	add	sp, #8
   1dc90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        rc = stats_init_and_reg(STATS_HDR(ble_phy_stats),
   1dc94:	4b16      	ldr	r3, [pc, #88]	; (1dcf0 <ble_phy_init+0x160>)
   1dc96:	9301      	str	r3, [sp, #4]
   1dc98:	4623      	mov	r3, r4
   1dc9a:	9400      	str	r4, [sp, #0]
   1dc9c:	220d      	movs	r2, #13
   1dc9e:	2104      	movs	r1, #4
   1dca0:	4814      	ldr	r0, [pc, #80]	; (1dcf4 <ble_phy_init+0x164>)
   1dca2:	f7f4 fa9b 	bl	121dc <stats_init_and_reg>
        assert(rc == 0);
   1dca6:	b918      	cbnz	r0, 1dcb0 <ble_phy_init+0x120>
        g_ble_phy_data.phy_stats_initialized  = 1;
   1dca8:	4b06      	ldr	r3, [pc, #24]	; (1dcc4 <ble_phy_init+0x134>)
   1dcaa:	2201      	movs	r2, #1
   1dcac:	701a      	strb	r2, [r3, #0]
   1dcae:	e7ed      	b.n	1dc8c <ble_phy_init+0xfc>
        assert(rc == 0);
   1dcb0:	f7ee fa9a 	bl	c1e8 <hal_debugger_connected>
   1dcb4:	b100      	cbz	r0, 1dcb8 <ble_phy_init+0x128>
   1dcb6:	be01      	bkpt	0x0001
   1dcb8:	2300      	movs	r3, #0
   1dcba:	461a      	mov	r2, r3
   1dcbc:	4619      	mov	r1, r3
   1dcbe:	4618      	mov	r0, r3
   1dcc0:	f7ee ff46 	bl	cb50 <__assert_func>
   1dcc4:	20003cdc 	.word	0x20003cdc
   1dcc8:	40001000 	.word	0x40001000
   1dccc:	00100108 	.word	0x00100108
   1dcd0:	020300ff 	.word	0x020300ff
   1dcd4:	4000f000 	.word	0x4000f000
   1dcd8:	20003d10 	.word	0x20003d10
   1dcdc:	20003c98 	.word	0x20003c98
   1dce0:	40008000 	.word	0x40008000
   1dce4:	e000e100 	.word	0xe000e100
   1dce8:	e000ed00 	.word	0xe000ed00
   1dcec:	0001e0f9 	.word	0x0001e0f9
   1dcf0:	00031e3c 	.word	0x00031e3c
   1dcf4:	20003e1c 	.word	0x20003e1c
   1dcf8:	4001f000 	.word	0x4001f000

0001dcfc <ble_phy_encrypt_enable>:
{
   1dcfc:	b4f0      	push	{r4, r5, r6, r7}
    memcpy(g_nrf_ccm_data.key, key, 16);
   1dcfe:	4c10      	ldr	r4, [pc, #64]	; (1dd40 <ble_phy_encrypt_enable+0x44>)
   1dd00:	681f      	ldr	r7, [r3, #0]
   1dd02:	685e      	ldr	r6, [r3, #4]
   1dd04:	689d      	ldr	r5, [r3, #8]
   1dd06:	68db      	ldr	r3, [r3, #12]
   1dd08:	6027      	str	r7, [r4, #0]
   1dd0a:	6066      	str	r6, [r4, #4]
   1dd0c:	60a5      	str	r5, [r4, #8]
   1dd0e:	60e3      	str	r3, [r4, #12]
    g_nrf_ccm_data.pkt_counter = pkt_counter;
   1dd10:	6120      	str	r0, [r4, #16]
   1dd12:	6161      	str	r1, [r4, #20]
    memcpy(g_nrf_ccm_data.iv, iv, 8);
   1dd14:	6811      	ldr	r1, [r2, #0]
   1dd16:	6853      	ldr	r3, [r2, #4]
   1dd18:	f8c4 1019 	str.w	r1, [r4, #25]
   1dd1c:	f8c4 301d 	str.w	r3, [r4, #29]
    g_nrf_ccm_data.dir_bit = is_master;
   1dd20:	f89d 3010 	ldrb.w	r3, [sp, #16]
   1dd24:	7623      	strb	r3, [r4, #24]
    g_ble_phy_data.phy_encrypted = 1;
   1dd26:	4b07      	ldr	r3, [pc, #28]	; (1dd44 <ble_phy_encrypt_enable+0x48>)
   1dd28:	2201      	movs	r2, #1
   1dd2a:	71da      	strb	r2, [r3, #7]
    NRF_AAR->ENABLE = AAR_ENABLE_ENABLE_Disabled;
   1dd2c:	4b06      	ldr	r3, [pc, #24]	; (1dd48 <ble_phy_encrypt_enable+0x4c>)
   1dd2e:	2200      	movs	r2, #0
   1dd30:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1dd34:	2202      	movs	r2, #2
   1dd36:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
   1dd3a:	bcf0      	pop	{r4, r5, r6, r7}
   1dd3c:	4770      	bx	lr
   1dd3e:	bf00      	nop
   1dd40:	20003e5c 	.word	0x20003e5c
   1dd44:	20003cdc 	.word	0x20003cdc
   1dd48:	4000f000 	.word	0x4000f000

0001dd4c <ble_phy_encrypt_set_pkt_cntr>:
    g_nrf_ccm_data.pkt_counter = pkt_counter;
   1dd4c:	4b02      	ldr	r3, [pc, #8]	; (1dd58 <ble_phy_encrypt_set_pkt_cntr+0xc>)
   1dd4e:	6118      	str	r0, [r3, #16]
   1dd50:	6159      	str	r1, [r3, #20]
    g_nrf_ccm_data.dir_bit = dir;
   1dd52:	761a      	strb	r2, [r3, #24]
}
   1dd54:	4770      	bx	lr
   1dd56:	bf00      	nop
   1dd58:	20003e5c 	.word	0x20003e5c

0001dd5c <ble_phy_encrypt_disable>:
    NRF_PPI->CHENCLR = PPI_CHEN_CH25_Msk;
   1dd5c:	4b07      	ldr	r3, [pc, #28]	; (1dd7c <ble_phy_encrypt_disable+0x20>)
   1dd5e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   1dd62:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    NRF_CCM->TASKS_STOP = 1;
   1dd66:	4a06      	ldr	r2, [pc, #24]	; (1dd80 <ble_phy_encrypt_disable+0x24>)
   1dd68:	2301      	movs	r3, #1
   1dd6a:	6093      	str	r3, [r2, #8]
    NRF_CCM->EVENTS_ERROR = 0;
   1dd6c:	2300      	movs	r3, #0
   1dd6e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1dd72:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    g_ble_phy_data.phy_encrypted = 0;
   1dd76:	4a03      	ldr	r2, [pc, #12]	; (1dd84 <ble_phy_encrypt_disable+0x28>)
   1dd78:	71d3      	strb	r3, [r2, #7]
}
   1dd7a:	4770      	bx	lr
   1dd7c:	4001f000 	.word	0x4001f000
   1dd80:	4000f000 	.word	0x4000f000
   1dd84:	20003cdc 	.word	0x20003cdc

0001dd88 <ble_phy_set_txend_cb>:
    g_ble_phy_data.txend_cb = txend_cb;
   1dd88:	4b01      	ldr	r3, [pc, #4]	; (1dd90 <ble_phy_set_txend_cb+0x8>)
   1dd8a:	62d8      	str	r0, [r3, #44]	; 0x2c
    g_ble_phy_data.txend_arg = arg;
   1dd8c:	6299      	str	r1, [r3, #40]	; 0x28
}
   1dd8e:	4770      	bx	lr
   1dd90:	20003cdc 	.word	0x20003cdc

0001dd94 <ble_phy_txpower_round>:
    if (dbm >= (int8_t)RADIO_TXPOWER_TXPOWER_Pos4dBm) {
   1dd94:	2803      	cmp	r0, #3
   1dd96:	dc14      	bgt.n	1ddc2 <ble_phy_txpower_round+0x2e>
    if (dbm >= (int8_t)RADIO_TXPOWER_TXPOWER_Pos3dBm) {
   1dd98:	2802      	cmp	r0, #2
   1dd9a:	dc14      	bgt.n	1ddc6 <ble_phy_txpower_round+0x32>
    if (dbm >= (int8_t)RADIO_TXPOWER_TXPOWER_0dBm) {
   1dd9c:	2800      	cmp	r0, #0
   1dd9e:	db01      	blt.n	1dda4 <ble_phy_txpower_round+0x10>
        return (int8_t)RADIO_TXPOWER_TXPOWER_0dBm;
   1dda0:	2000      	movs	r0, #0
   1dda2:	4770      	bx	lr
    if (dbm >= (int8_t)RADIO_TXPOWER_TXPOWER_Neg4dBm) {
   1dda4:	f110 0f04 	cmn.w	r0, #4
   1dda8:	da0f      	bge.n	1ddca <ble_phy_txpower_round+0x36>
    if (dbm >= (int8_t)RADIO_TXPOWER_TXPOWER_Neg8dBm) {
   1ddaa:	f110 0f08 	cmn.w	r0, #8
   1ddae:	da0f      	bge.n	1ddd0 <ble_phy_txpower_round+0x3c>
    if (dbm >= (int8_t)RADIO_TXPOWER_TXPOWER_Neg12dBm) {
   1ddb0:	f110 0f0c 	cmn.w	r0, #12
   1ddb4:	da0f      	bge.n	1ddd6 <ble_phy_txpower_round+0x42>
    if (dbm >= (int8_t)RADIO_TXPOWER_TXPOWER_Neg20dBm) {
   1ddb6:	f110 0f14 	cmn.w	r0, #20
   1ddba:	db0f      	blt.n	1dddc <ble_phy_txpower_round+0x48>
        return (int8_t)RADIO_TXPOWER_TXPOWER_Neg20dBm;
   1ddbc:	f06f 0013 	mvn.w	r0, #19
   1ddc0:	4770      	bx	lr
        return (int8_t)RADIO_TXPOWER_TXPOWER_Pos4dBm;
   1ddc2:	2004      	movs	r0, #4
   1ddc4:	4770      	bx	lr
        return (int8_t)RADIO_TXPOWER_TXPOWER_Pos3dBm;
   1ddc6:	2003      	movs	r0, #3
   1ddc8:	4770      	bx	lr
        return (int8_t)RADIO_TXPOWER_TXPOWER_Neg4dBm;
   1ddca:	f06f 0003 	mvn.w	r0, #3
   1ddce:	4770      	bx	lr
        return (int8_t)RADIO_TXPOWER_TXPOWER_Neg8dBm;
   1ddd0:	f06f 0007 	mvn.w	r0, #7
   1ddd4:	4770      	bx	lr
        return (int8_t)RADIO_TXPOWER_TXPOWER_Neg12dBm;
   1ddd6:	f06f 000b 	mvn.w	r0, #11
   1ddda:	4770      	bx	lr
    return (int8_t)RADIO_TXPOWER_TXPOWER_Neg40dBm;
   1dddc:	f06f 0027 	mvn.w	r0, #39	; 0x27
}
   1dde0:	4770      	bx	lr
	...

0001dde4 <ble_phy_txpwr_set>:
{
   1dde4:	b508      	push	{r3, lr}
    dbm = ble_phy_txpower_round(dbm);
   1dde6:	f7ff ffd5 	bl	1dd94 <ble_phy_txpower_round>
    NRF_RADIO->TXPOWER = dbm;
   1ddea:	4b03      	ldr	r3, [pc, #12]	; (1ddf8 <ble_phy_txpwr_set+0x14>)
   1ddec:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    g_ble_phy_data.phy_txpwr_dbm = dbm;
   1ddf0:	4b02      	ldr	r3, [pc, #8]	; (1ddfc <ble_phy_txpwr_set+0x18>)
   1ddf2:	7058      	strb	r0, [r3, #1]
}
   1ddf4:	2000      	movs	r0, #0
   1ddf6:	bd08      	pop	{r3, pc}
   1ddf8:	40001000 	.word	0x40001000
   1ddfc:	20003cdc 	.word	0x20003cdc

0001de00 <ble_phy_set_rx_pwr_compensation>:
    g_ble_phy_data.rx_pwr_compensation = compensation;
   1de00:	4b01      	ldr	r3, [pc, #4]	; (1de08 <ble_phy_set_rx_pwr_compensation+0x8>)
   1de02:	7398      	strb	r0, [r3, #14]
}
   1de04:	4770      	bx	lr
   1de06:	bf00      	nop
   1de08:	20003cdc 	.word	0x20003cdc

0001de0c <ble_phy_setchan>:
{
   1de0c:	b538      	push	{r3, r4, r5, lr}
    assert(chan < BLE_PHY_NUM_CHANS);
   1de0e:	2827      	cmp	r0, #39	; 0x27
   1de10:	d811      	bhi.n	1de36 <ble_phy_setchan+0x2a>
   1de12:	4604      	mov	r4, r0
   1de14:	4615      	mov	r5, r2
    ble_phy_set_access_addr(access_addr);
   1de16:	4608      	mov	r0, r1
   1de18:	f7ff fd50 	bl	1d8bc <ble_phy_set_access_addr>
    NRF_RADIO->CRCINIT = crcinit;
   1de1c:	4b0b      	ldr	r3, [pc, #44]	; (1de4c <ble_phy_setchan+0x40>)
   1de1e:	f8c3 553c 	str.w	r5, [r3, #1340]	; 0x53c
    g_ble_phy_data.phy_chan = chan;
   1de22:	4a0b      	ldr	r2, [pc, #44]	; (1de50 <ble_phy_setchan+0x44>)
   1de24:	7094      	strb	r4, [r2, #2]
    NRF_RADIO->FREQUENCY = g_ble_phy_chan_freq[chan];
   1de26:	4a0b      	ldr	r2, [pc, #44]	; (1de54 <ble_phy_setchan+0x48>)
   1de28:	5d12      	ldrb	r2, [r2, r4]
   1de2a:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    NRF_RADIO->DATAWHITEIV = chan;
   1de2e:	f8c3 4554 	str.w	r4, [r3, #1364]	; 0x554
}
   1de32:	2000      	movs	r0, #0
   1de34:	bd38      	pop	{r3, r4, r5, pc}
    assert(chan < BLE_PHY_NUM_CHANS);
   1de36:	f7ee f9d7 	bl	c1e8 <hal_debugger_connected>
   1de3a:	b100      	cbz	r0, 1de3e <ble_phy_setchan+0x32>
   1de3c:	be01      	bkpt	0x0001
   1de3e:	2300      	movs	r3, #0
   1de40:	461a      	mov	r2, r3
   1de42:	4619      	mov	r1, r3
   1de44:	4618      	mov	r0, r3
   1de46:	f7ee fe83 	bl	cb50 <__assert_func>
   1de4a:	bf00      	nop
   1de4c:	40001000 	.word	0x40001000
   1de50:	20003cdc 	.word	0x20003cdc
   1de54:	00031e44 	.word	0x00031e44

0001de58 <ble_phy_disable>:
 * the usec timer (if used), disables interrupts, disables the RADIO, disables
 * PPI and sets state to idle.
 */
void
ble_phy_disable(void)
{
   1de58:	b508      	push	{r3, lr}
    ble_phy_trace_void(BLE_PHY_TRACE_ID_DISABLE);

    ble_phy_stop_usec_timer();
   1de5a:	f7ff fd47 	bl	1d8ec <ble_phy_stop_usec_timer>
    ble_phy_disable_irq_and_ppi();
   1de5e:	f7ff fd53 	bl	1d908 <ble_phy_disable_irq_and_ppi>
}
   1de62:	bd08      	pop	{r3, pc}

0001de64 <ble_phy_rx_start_isr>:
{
   1de64:	b538      	push	{r3, r4, r5, lr}
    NRF_RADIO->EVENTS_ADDRESS = 0;
   1de66:	4b46      	ldr	r3, [pc, #280]	; (1df80 <ble_phy_rx_start_isr+0x11c>)
   1de68:	2500      	movs	r5, #0
   1de6a:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
    NRF_RADIO->INTENCLR = RADIO_INTENCLR_DISABLED_Msk | RADIO_INTENCLR_ADDRESS_Msk;
   1de6e:	2212      	movs	r2, #18
   1de70:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    NRF_PPI->CHENCLR = PPI_CHEN_CH4_Msk | PPI_CHEN_CH5_Msk;
   1de74:	f503 33f0 	add.w	r3, r3, #122880	; 0x1e000
   1de78:	2230      	movs	r2, #48	; 0x30
   1de7a:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    ble_hdr->rxinfo.flags = ble_ll_state_get();
   1de7e:	f7f6 fe49 	bl	14b14 <ble_ll_state_get>
   1de82:	4c40      	ldr	r4, [pc, #256]	; (1df84 <ble_phy_rx_start_isr+0x120>)
   1de84:	8320      	strh	r0, [r4, #24]
    ble_hdr->rxinfo.channel = g_ble_phy_data.phy_chan;
   1de86:	78a3      	ldrb	r3, [r4, #2]
   1de88:	76a3      	strb	r3, [r4, #26]
    ble_hdr->rxinfo.handle = 0;
   1de8a:	76e5      	strb	r5, [r4, #27]
    ble_hdr->rxinfo.phy = ble_phy_get_cur_phy();
   1de8c:	f7ff fd86 	bl	1d99c <ble_phy_get_cur_phy>
   1de90:	7760      	strb	r0, [r4, #29]
    phy = g_ble_phy_data.phy_cur_phy_mode;
   1de92:	7aa2      	ldrb	r2, [r4, #10]
    ble_hdr->rxinfo.phy_mode = ble_phy_get_cur_rx_phy_mode();
   1de94:	77a2      	strb	r2, [r4, #30]
    ble_hdr->beg_cputime = g_ble_phy_data.phy_start_cputime;
   1de96:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1de98:	6223      	str	r3, [r4, #32]
    usecs = NRF_TIMER0->CC[1];
   1de9a:	493b      	ldr	r1, [pc, #236]	; (1df88 <ble_phy_rx_start_isr+0x124>)
   1de9c:	f8d1 0544 	ldr.w	r0, [r1, #1348]	; 0x544
                g_ble_phy_t_rxaddrdelay[ble_hdr->rxinfo.phy_mode];
   1dea0:	493a      	ldr	r1, [pc, #232]	; (1df8c <ble_phy_rx_start_isr+0x128>)
   1dea2:	5c8c      	ldrb	r4, [r1, r2]
    pdu_usecs = ble_phy_mode_pdu_start_off(ble_hdr->rxinfo.phy_mode) +
   1dea4:	3428      	adds	r4, #40	; 0x28
    if (usecs < pdu_usecs) {
   1dea6:	42a0      	cmp	r0, r4
   1dea8:	d203      	bcs.n	1deb2 <ble_phy_rx_start_isr+0x4e>
        g_ble_phy_data.phy_start_cputime--;
   1deaa:	3b01      	subs	r3, #1
   1deac:	4a35      	ldr	r2, [pc, #212]	; (1df84 <ble_phy_rx_start_isr+0x120>)
   1deae:	6313      	str	r3, [r2, #48]	; 0x30
        usecs += 30;
   1deb0:	301e      	adds	r0, #30
    usecs -= pdu_usecs;
   1deb2:	1b04      	subs	r4, r0, r4
    ticks = os_cputime_usecs_to_ticks(usecs);
   1deb4:	4620      	mov	r0, r4
   1deb6:	f010 ffff 	bl	2eeb8 <os_cputime_usecs_to_ticks>
   1deba:	4605      	mov	r5, r0
    usecs -= os_cputime_ticks_to_usecs(ticks);
   1debc:	f011 f804 	bl	2eec8 <os_cputime_ticks_to_usecs>
   1dec0:	1a20      	subs	r0, r4, r0
    if (usecs == 31) {
   1dec2:	281f      	cmp	r0, #31
   1dec4:	d015      	beq.n	1def2 <ble_phy_rx_start_isr+0x8e>
    ble_hdr->beg_cputime += ticks;
   1dec6:	4b2f      	ldr	r3, [pc, #188]	; (1df84 <ble_phy_rx_start_isr+0x120>)
   1dec8:	6a1a      	ldr	r2, [r3, #32]
   1deca:	442a      	add	r2, r5
   1decc:	621a      	str	r2, [r3, #32]
    ble_hdr->rem_usecs = usecs;
   1dece:	6258      	str	r0, [r3, #36]	; 0x24
        state = NRF_RADIO->STATE;
   1ded0:	4b2b      	ldr	r3, [pc, #172]	; (1df80 <ble_phy_rx_start_isr+0x11c>)
   1ded2:	f8d3 2550 	ldr.w	r2, [r3, #1360]	; 0x550
        if (NRF_RADIO->EVENTS_BCMATCH != 0) {
   1ded6:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
   1deda:	b96b      	cbnz	r3, 1def8 <ble_phy_rx_start_isr+0x94>
        if (state == RADIO_STATE_STATE_Disabled) {
   1dedc:	2a00      	cmp	r2, #0
   1dede:	d1f7      	bne.n	1ded0 <ble_phy_rx_start_isr+0x6c>
            NRF_RADIO->INTENCLR = NRF_RADIO_IRQ_MASK_ALL;
   1dee0:	4b27      	ldr	r3, [pc, #156]	; (1df80 <ble_phy_rx_start_isr+0x11c>)
   1dee2:	f243 42ff 	movw	r2, #13567	; 0x34ff
   1dee6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            NRF_RADIO->SHORTS = 0;
   1deea:	2000      	movs	r0, #0
   1deec:	f8c3 0200 	str.w	r0, [r3, #512]	; 0x200
            return false;
   1def0:	e03b      	b.n	1df6a <ble_phy_rx_start_isr+0x106>
        ++ticks;
   1def2:	3501      	adds	r5, #1
        usecs = 0;
   1def4:	2000      	movs	r0, #0
   1def6:	e7e6      	b.n	1dec6 <ble_phy_rx_start_isr+0x62>
    if (g_ble_phy_data.phy_privacy && (dptr[3] & 0x40)) {
   1def8:	4b22      	ldr	r3, [pc, #136]	; (1df84 <ble_phy_rx_start_isr+0x120>)
   1defa:	7a1b      	ldrb	r3, [r3, #8]
   1defc:	b303      	cbz	r3, 1df40 <ble_phy_rx_start_isr+0xdc>
   1defe:	4b24      	ldr	r3, [pc, #144]	; (1df90 <ble_phy_rx_start_isr+0x12c>)
   1df00:	78db      	ldrb	r3, [r3, #3]
   1df02:	f013 0f40 	tst.w	r3, #64	; 0x40
   1df06:	d01b      	beq.n	1df40 <ble_phy_rx_start_isr+0xdc>
        adva_offset = (dptr[3] & 0x0f) == 0x07 ? 2 : 0;
   1df08:	f003 030f 	and.w	r3, r3, #15
   1df0c:	2b07      	cmp	r3, #7
   1df0e:	d02d      	beq.n	1df6c <ble_phy_rx_start_isr+0x108>
   1df10:	2300      	movs	r3, #0
        NRF_AAR->ADDRPTR = (uint32_t)(dptr + 3 + adva_offset);
   1df12:	1cd9      	adds	r1, r3, #3
   1df14:	4a1e      	ldr	r2, [pc, #120]	; (1df90 <ble_phy_rx_start_isr+0x12c>)
   1df16:	440a      	add	r2, r1
   1df18:	491e      	ldr	r1, [pc, #120]	; (1df94 <ble_phy_rx_start_isr+0x130>)
   1df1a:	f8c1 2510 	str.w	r2, [r1, #1296]	; 0x510
        NRF_RADIO->EVENTS_BCMATCH = 0;
   1df1e:	f5a1 4160 	sub.w	r1, r1, #57344	; 0xe000
   1df22:	2200      	movs	r2, #0
   1df24:	f8c1 2128 	str.w	r2, [r1, #296]	; 0x128
        NRF_PPI->CHENSET = PPI_CHEN_CH23_Msk;
   1df28:	4a1b      	ldr	r2, [pc, #108]	; (1df98 <ble_phy_rx_start_isr+0x134>)
   1df2a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   1df2e:	f8c2 0504 	str.w	r0, [r2, #1284]	; 0x504
        NRF_RADIO->BCC = (BLE_LL_PDU_HDR_LEN + adva_offset + BLE_DEV_ADDR_LEN) * 8 +
   1df32:	3308      	adds	r3, #8
                         g_ble_phy_data.phy_bcc_offset;
   1df34:	4a13      	ldr	r2, [pc, #76]	; (1df84 <ble_phy_rx_start_isr+0x120>)
   1df36:	7b52      	ldrb	r2, [r2, #13]
        NRF_RADIO->BCC = (BLE_LL_PDU_HDR_LEN + adva_offset + BLE_DEV_ADDR_LEN) * 8 +
   1df38:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1df3c:	f8c1 3560 	str.w	r3, [r1, #1376]	; 0x560
    rc = ble_ll_rx_start(dptr + 3,
   1df40:	4b10      	ldr	r3, [pc, #64]	; (1df84 <ble_phy_rx_start_isr+0x120>)
   1df42:	f103 0218 	add.w	r2, r3, #24
   1df46:	7899      	ldrb	r1, [r3, #2]
   1df48:	4814      	ldr	r0, [pc, #80]	; (1df9c <ble_phy_rx_start_isr+0x138>)
   1df4a:	f7f6 fd1f 	bl	1498c <ble_ll_rx_start>
    if (rc >= 0) {
   1df4e:	2800      	cmp	r0, #0
   1df50:	db0e      	blt.n	1df70 <ble_phy_rx_start_isr+0x10c>
        g_ble_phy_data.phy_rx_started = 1;
   1df52:	4b0c      	ldr	r3, [pc, #48]	; (1df84 <ble_phy_rx_start_isr+0x120>)
   1df54:	2201      	movs	r2, #1
   1df56:	719a      	strb	r2, [r3, #6]
        NRF_RADIO->INTENSET = RADIO_INTENSET_END_Msk;
   1df58:	4b09      	ldr	r3, [pc, #36]	; (1df80 <ble_phy_rx_start_isr+0x11c>)
   1df5a:	2208      	movs	r2, #8
   1df5c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    STATS_INC(ble_phy_stats, rx_starts);
   1df60:	4a0f      	ldr	r2, [pc, #60]	; (1dfa0 <ble_phy_rx_start_isr+0x13c>)
   1df62:	6a13      	ldr	r3, [r2, #32]
   1df64:	3301      	adds	r3, #1
   1df66:	6213      	str	r3, [r2, #32]
    return true;
   1df68:	2001      	movs	r0, #1
}
   1df6a:	bd38      	pop	{r3, r4, r5, pc}
        adva_offset = (dptr[3] & 0x0f) == 0x07 ? 2 : 0;
   1df6c:	2302      	movs	r3, #2
   1df6e:	e7d0      	b.n	1df12 <ble_phy_rx_start_isr+0xae>
        ble_phy_disable();
   1df70:	f7ff ff72 	bl	1de58 <ble_phy_disable>
        STATS_INC(ble_phy_stats, rx_aborts);
   1df74:	4a0a      	ldr	r2, [pc, #40]	; (1dfa0 <ble_phy_rx_start_isr+0x13c>)
   1df76:	6a53      	ldr	r3, [r2, #36]	; 0x24
   1df78:	3301      	adds	r3, #1
   1df7a:	6253      	str	r3, [r2, #36]	; 0x24
   1df7c:	e7f0      	b.n	1df60 <ble_phy_rx_start_isr+0xfc>
   1df7e:	bf00      	nop
   1df80:	40001000 	.word	0x40001000
   1df84:	20003cdc 	.word	0x20003cdc
   1df88:	40008000 	.word	0x40008000
   1df8c:	00031e6c 	.word	0x00031e6c
   1df90:	20002144 	.word	0x20002144
   1df94:	4000f000 	.word	0x4000f000
   1df98:	4001f000 	.word	0x4001f000
   1df9c:	20002147 	.word	0x20002147
   1dfa0:	20003e1c 	.word	0x20003e1c

0001dfa4 <ble_phy_rx_end_isr>:
{
   1dfa4:	b510      	push	{r4, lr}
    NRF_RADIO->EVENTS_END = 0;
   1dfa6:	4b4a      	ldr	r3, [pc, #296]	; (1e0d0 <ble_phy_rx_end_isr+0x12c>)
   1dfa8:	2200      	movs	r2, #0
   1dfaa:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    NRF_RADIO->INTENCLR = RADIO_INTENCLR_END_Msk;
   1dfae:	2208      	movs	r2, #8
   1dfb0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    NRF_PPI->CHENCLR = PPI_CHEN_CH21_Msk;
   1dfb4:	4a47      	ldr	r2, [pc, #284]	; (1e0d4 <ble_phy_rx_end_isr+0x130>)
   1dfb6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
   1dfba:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
    assert(NRF_RADIO->EVENTS_RSSIEND != 0);
   1dfbe:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   1dfc2:	2b00      	cmp	r3, #0
   1dfc4:	d043      	beq.n	1e04e <ble_phy_rx_end_isr+0xaa>
                           g_ble_phy_data.rx_pwr_compensation;
   1dfc6:	4944      	ldr	r1, [pc, #272]	; (1e0d8 <ble_phy_rx_end_isr+0x134>)
   1dfc8:	7b8b      	ldrb	r3, [r1, #14]
    ble_hdr->rxinfo.rssi = (-1 * NRF_RADIO->RSSISAMPLE) +
   1dfca:	4a41      	ldr	r2, [pc, #260]	; (1e0d0 <ble_phy_rx_end_isr+0x12c>)
   1dfcc:	f8d2 0548 	ldr.w	r0, [r2, #1352]	; 0x548
   1dfd0:	1a1b      	subs	r3, r3, r0
   1dfd2:	770b      	strb	r3, [r1, #28]
    crcok = NRF_RADIO->EVENTS_CRCOK;
   1dfd4:	f8d2 3130 	ldr.w	r3, [r2, #304]	; 0x130
    if (!crcok) {
   1dfd8:	f013 0fff 	tst.w	r3, #255	; 0xff
   1dfdc:	d141      	bne.n	1e062 <ble_phy_rx_end_isr+0xbe>
        STATS_INC(ble_phy_stats, rx_crc_err);
   1dfde:	4a3f      	ldr	r2, [pc, #252]	; (1e0dc <ble_phy_rx_end_isr+0x138>)
   1dfe0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   1dfe2:	3301      	adds	r3, #1
   1dfe4:	62d3      	str	r3, [r2, #44]	; 0x2c
    tx_time = NRF_TIMER0->CC[2] + BLE_LL_IFS;
   1dfe6:	4a3e      	ldr	r2, [pc, #248]	; (1e0e0 <ble_phy_rx_end_isr+0x13c>)
   1dfe8:	f8d2 3548 	ldr.w	r3, [r2, #1352]	; 0x548
   1dfec:	3396      	adds	r3, #150	; 0x96
    tx_time -= g_ble_phy_t_rxenddelay[ble_hdr->rxinfo.phy_mode];
   1dfee:	493a      	ldr	r1, [pc, #232]	; (1e0d8 <ble_phy_rx_end_isr+0x134>)
   1dff0:	7f88      	ldrb	r0, [r1, #30]
   1dff2:	4c3c      	ldr	r4, [pc, #240]	; (1e0e4 <ble_phy_rx_end_isr+0x140>)
   1dff4:	5c20      	ldrb	r0, [r4, r0]
   1dff6:	1a1b      	subs	r3, r3, r0
    tx_time -= BLE_PHY_T_TXENFAST;
   1dff8:	3b28      	subs	r3, #40	; 0x28
    tx_time -= g_ble_phy_t_txdelay[g_ble_phy_data.phy_cur_phy_mode];
   1dffa:	7a89      	ldrb	r1, [r1, #10]
   1dffc:	483a      	ldr	r0, [pc, #232]	; (1e0e8 <ble_phy_rx_end_isr+0x144>)
   1dffe:	5c41      	ldrb	r1, [r0, r1]
   1e000:	1a5b      	subs	r3, r3, r1
    NRF_TIMER0->CC[0] = tx_time;
   1e002:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
    NRF_TIMER0->EVENTS_COMPARE[0] = 0;
   1e006:	2300      	movs	r3, #0
   1e008:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
    NRF_PPI->CHENSET = PPI_CHEN_CH20_Msk;
   1e00c:	4b31      	ldr	r3, [pc, #196]	; (1e0d4 <ble_phy_rx_end_isr+0x130>)
   1e00e:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
   1e012:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
    NRF_TIMER0->TASKS_CAPTURE[3] = 1;
   1e016:	2301      	movs	r3, #1
   1e018:	64d3      	str	r3, [r2, #76]	; 0x4c
    if (NRF_TIMER0->CC[3] > NRF_TIMER0->CC[0]) {
   1e01a:	f8d2 154c 	ldr.w	r1, [r2, #1356]	; 0x54c
   1e01e:	f8d2 3540 	ldr.w	r3, [r2, #1344]	; 0x540
   1e022:	4299      	cmp	r1, r3
   1e024:	d907      	bls.n	1e036 <ble_phy_rx_end_isr+0x92>
        NRF_PPI->CHENCLR = PPI_CHEN_CH20_Msk;
   1e026:	4b2b      	ldr	r3, [pc, #172]	; (1e0d4 <ble_phy_rx_end_isr+0x130>)
   1e028:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   1e02c:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
        g_ble_phy_data.phy_transition_late = 1;
   1e030:	4b29      	ldr	r3, [pc, #164]	; (1e0d8 <ble_phy_rx_end_isr+0x134>)
   1e032:	2201      	movs	r2, #1
   1e034:	715a      	strb	r2, [r3, #5]
    dptr[2] = dptr[1];
   1e036:	482d      	ldr	r0, [pc, #180]	; (1e0ec <ble_phy_rx_end_isr+0x148>)
   1e038:	7903      	ldrb	r3, [r0, #4]
   1e03a:	7143      	strb	r3, [r0, #5]
    dptr[1] = dptr[0];
   1e03c:	78c3      	ldrb	r3, [r0, #3]
   1e03e:	f800 3f04 	strb.w	r3, [r0, #4]!
    rc = ble_ll_rx_end(dptr + 1, ble_hdr);
   1e042:	492b      	ldr	r1, [pc, #172]	; (1e0f0 <ble_phy_rx_end_isr+0x14c>)
   1e044:	f7f6 fcce 	bl	149e4 <ble_ll_rx_end>
    if (rc < 0) {
   1e048:	2800      	cmp	r0, #0
   1e04a:	db3d      	blt.n	1e0c8 <ble_phy_rx_end_isr+0x124>
}
   1e04c:	bd10      	pop	{r4, pc}
    assert(NRF_RADIO->EVENTS_RSSIEND != 0);
   1e04e:	f7ee f8cb 	bl	c1e8 <hal_debugger_connected>
   1e052:	b100      	cbz	r0, 1e056 <ble_phy_rx_end_isr+0xb2>
   1e054:	be01      	bkpt	0x0001
   1e056:	2300      	movs	r3, #0
   1e058:	461a      	mov	r2, r3
   1e05a:	4619      	mov	r1, r3
   1e05c:	4618      	mov	r0, r3
   1e05e:	f7ee fd77 	bl	cb50 <__assert_func>
        STATS_INC(ble_phy_stats, rx_valid);
   1e062:	4a1e      	ldr	r2, [pc, #120]	; (1e0dc <ble_phy_rx_end_isr+0x138>)
   1e064:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1e066:	3301      	adds	r3, #1
   1e068:	6293      	str	r3, [r2, #40]	; 0x28
        ble_hdr->rxinfo.flags |= BLE_MBUF_HDR_F_CRC_OK;
   1e06a:	4a1b      	ldr	r2, [pc, #108]	; (1e0d8 <ble_phy_rx_end_isr+0x134>)
   1e06c:	8b13      	ldrh	r3, [r2, #24]
   1e06e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1e072:	8313      	strh	r3, [r2, #24]
        if (g_ble_phy_data.phy_encrypted) {
   1e074:	79d2      	ldrb	r2, [r2, #7]
   1e076:	2a00      	cmp	r2, #0
   1e078:	d0b5      	beq.n	1dfe6 <ble_phy_rx_end_isr+0x42>
            if ((dptr[1] != 0) && (NRF_CCM->MICSTATUS == 0)) {
   1e07a:	4a1c      	ldr	r2, [pc, #112]	; (1e0ec <ble_phy_rx_end_isr+0x148>)
   1e07c:	7912      	ldrb	r2, [r2, #4]
   1e07e:	b13a      	cbz	r2, 1e090 <ble_phy_rx_end_isr+0xec>
   1e080:	4a1c      	ldr	r2, [pc, #112]	; (1e0f4 <ble_phy_rx_end_isr+0x150>)
   1e082:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
   1e086:	b91a      	cbnz	r2, 1e090 <ble_phy_rx_end_isr+0xec>
                ble_hdr->rxinfo.flags |= BLE_MBUF_HDR_F_MIC_FAILURE;
   1e088:	f043 0320 	orr.w	r3, r3, #32
   1e08c:	4a12      	ldr	r2, [pc, #72]	; (1e0d8 <ble_phy_rx_end_isr+0x134>)
   1e08e:	8313      	strh	r3, [r2, #24]
            if (NRF_CCM->EVENTS_ERROR) {
   1e090:	4b18      	ldr	r3, [pc, #96]	; (1e0f4 <ble_phy_rx_end_isr+0x150>)
   1e092:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
   1e096:	b143      	cbz	r3, 1e0aa <ble_phy_rx_end_isr+0x106>
                STATS_INC(ble_phy_stats, rx_hw_err);
   1e098:	4a10      	ldr	r2, [pc, #64]	; (1e0dc <ble_phy_rx_end_isr+0x138>)
   1e09a:	6b93      	ldr	r3, [r2, #56]	; 0x38
   1e09c:	3301      	adds	r3, #1
   1e09e:	6393      	str	r3, [r2, #56]	; 0x38
                ble_hdr->rxinfo.flags &= ~BLE_MBUF_HDR_F_CRC_OK;
   1e0a0:	4a0d      	ldr	r2, [pc, #52]	; (1e0d8 <ble_phy_rx_end_isr+0x134>)
   1e0a2:	8b13      	ldrh	r3, [r2, #24]
   1e0a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   1e0a8:	8313      	strh	r3, [r2, #24]
            if (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   1e0aa:	4b12      	ldr	r3, [pc, #72]	; (1e0f4 <ble_phy_rx_end_isr+0x150>)
   1e0ac:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   1e0b0:	2b00      	cmp	r3, #0
   1e0b2:	d198      	bne.n	1dfe6 <ble_phy_rx_end_isr+0x42>
                STATS_INC(ble_phy_stats, rx_hw_err);
   1e0b4:	4a09      	ldr	r2, [pc, #36]	; (1e0dc <ble_phy_rx_end_isr+0x138>)
   1e0b6:	6b93      	ldr	r3, [r2, #56]	; 0x38
   1e0b8:	3301      	adds	r3, #1
   1e0ba:	6393      	str	r3, [r2, #56]	; 0x38
                ble_hdr->rxinfo.flags &= ~BLE_MBUF_HDR_F_CRC_OK;
   1e0bc:	4a06      	ldr	r2, [pc, #24]	; (1e0d8 <ble_phy_rx_end_isr+0x134>)
   1e0be:	8b13      	ldrh	r3, [r2, #24]
   1e0c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   1e0c4:	8313      	strh	r3, [r2, #24]
   1e0c6:	e78e      	b.n	1dfe6 <ble_phy_rx_end_isr+0x42>
        ble_phy_disable();
   1e0c8:	f7ff fec6 	bl	1de58 <ble_phy_disable>
}
   1e0cc:	e7be      	b.n	1e04c <ble_phy_rx_end_isr+0xa8>
   1e0ce:	bf00      	nop
   1e0d0:	40001000 	.word	0x40001000
   1e0d4:	4001f000 	.word	0x4001f000
   1e0d8:	20003cdc 	.word	0x20003cdc
   1e0dc:	20003e1c 	.word	0x20003e1c
   1e0e0:	40008000 	.word	0x40008000
   1e0e4:	00031e70 	.word	0x00031e70
   1e0e8:	00031e74 	.word	0x00031e74
   1e0ec:	20002144 	.word	0x20002144
   1e0f0:	20003cf4 	.word	0x20003cf4
   1e0f4:	4000f000 	.word	0x4000f000

0001e0f8 <ble_phy_isr>:
{
   1e0f8:	b510      	push	{r4, lr}
    irq_en = NRF_RADIO->INTENCLR;
   1e0fa:	4b22      	ldr	r3, [pc, #136]	; (1e184 <ble_phy_isr+0x8c>)
   1e0fc:	f8d3 4308 	ldr.w	r4, [r3, #776]	; 0x308
    if ((irq_en & RADIO_INTENCLR_ADDRESS_Msk) && NRF_RADIO->EVENTS_ADDRESS) {
   1e100:	f014 0f02 	tst.w	r4, #2
   1e104:	d002      	beq.n	1e10c <ble_phy_isr+0x14>
   1e106:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   1e10a:	b9fb      	cbnz	r3, 1e14c <ble_phy_isr+0x54>
    if ((irq_en & RADIO_INTENCLR_DISABLED_Msk) && NRF_RADIO->EVENTS_DISABLED) {
   1e10c:	f014 0f10 	tst.w	r4, #16
   1e110:	d00a      	beq.n	1e128 <ble_phy_isr+0x30>
   1e112:	4b1c      	ldr	r3, [pc, #112]	; (1e184 <ble_phy_isr+0x8c>)
   1e114:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   1e118:	b133      	cbz	r3, 1e128 <ble_phy_isr+0x30>
        if (g_ble_phy_data.phy_state == BLE_PHY_STATE_RX) {
   1e11a:	4b1b      	ldr	r3, [pc, #108]	; (1e188 <ble_phy_isr+0x90>)
   1e11c:	78db      	ldrb	r3, [r3, #3]
   1e11e:	2b01      	cmp	r3, #1
   1e120:	d01b      	beq.n	1e15a <ble_phy_isr+0x62>
        } else if (g_ble_phy_data.phy_state == BLE_PHY_STATE_IDLE) {
   1e122:	b30b      	cbz	r3, 1e168 <ble_phy_isr+0x70>
            ble_phy_tx_end_isr();
   1e124:	f7ff fcc2 	bl	1daac <ble_phy_tx_end_isr>
    if ((irq_en & RADIO_INTENCLR_END_Msk) && NRF_RADIO->EVENTS_END) {
   1e128:	f014 0f08 	tst.w	r4, #8
   1e12c:	d003      	beq.n	1e136 <ble_phy_isr+0x3e>
   1e12e:	4b15      	ldr	r3, [pc, #84]	; (1e184 <ble_phy_isr+0x8c>)
   1e130:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
   1e134:	bb13      	cbnz	r3, 1e17c <ble_phy_isr+0x84>
    g_ble_phy_data.phy_transition_late = 0;
   1e136:	4b14      	ldr	r3, [pc, #80]	; (1e188 <ble_phy_isr+0x90>)
   1e138:	2200      	movs	r2, #0
   1e13a:	715a      	strb	r2, [r3, #5]
    irq_en = NRF_RADIO->SHORTS;
   1e13c:	4b11      	ldr	r3, [pc, #68]	; (1e184 <ble_phy_isr+0x8c>)
   1e13e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    STATS_INC(ble_phy_stats, phy_isrs);
   1e142:	4a12      	ldr	r2, [pc, #72]	; (1e18c <ble_phy_isr+0x94>)
   1e144:	68d3      	ldr	r3, [r2, #12]
   1e146:	3301      	adds	r3, #1
   1e148:	60d3      	str	r3, [r2, #12]
}
   1e14a:	bd10      	pop	{r4, pc}
        if (ble_phy_rx_start_isr()) {
   1e14c:	f7ff fe8a 	bl	1de64 <ble_phy_rx_start_isr>
   1e150:	2800      	cmp	r0, #0
   1e152:	d0db      	beq.n	1e10c <ble_phy_isr+0x14>
            irq_en &= ~RADIO_INTENCLR_DISABLED_Msk;
   1e154:	f024 0410 	bic.w	r4, r4, #16
   1e158:	e7d8      	b.n	1e10c <ble_phy_isr+0x14>
            NRF_RADIO->EVENTS_DISABLED = 0;
   1e15a:	2000      	movs	r0, #0
   1e15c:	4b09      	ldr	r3, [pc, #36]	; (1e184 <ble_phy_isr+0x8c>)
   1e15e:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
            ble_ll_wfr_timer_exp(NULL);
   1e162:	f7f6 fbc7 	bl	148f4 <ble_ll_wfr_timer_exp>
   1e166:	e7df      	b.n	1e128 <ble_phy_isr+0x30>
            assert(0);
   1e168:	f7ee f83e 	bl	c1e8 <hal_debugger_connected>
   1e16c:	b100      	cbz	r0, 1e170 <ble_phy_isr+0x78>
   1e16e:	be01      	bkpt	0x0001
   1e170:	2300      	movs	r3, #0
   1e172:	461a      	mov	r2, r3
   1e174:	4619      	mov	r1, r3
   1e176:	4618      	mov	r0, r3
   1e178:	f7ee fcea 	bl	cb50 <__assert_func>
        ble_phy_rx_end_isr();
   1e17c:	f7ff ff12 	bl	1dfa4 <ble_phy_rx_end_isr>
   1e180:	e7d9      	b.n	1e136 <ble_phy_isr+0x3e>
   1e182:	bf00      	nop
   1e184:	40001000 	.word	0x40001000
   1e188:	20003cdc 	.word	0x20003cdc
   1e18c:	20003e1c 	.word	0x20003e1c

0001e190 <ble_phy_rx>:
{
   1e190:	b508      	push	{r3, lr}
    nrf_wait_disabled();
   1e192:	f7ff faab 	bl	1d6ec <nrf_wait_disabled>
    if ((NRF_RADIO->STATE != RADIO_STATE_STATE_Disabled) &&
   1e196:	4b18      	ldr	r3, [pc, #96]	; (1e1f8 <ble_phy_rx+0x68>)
   1e198:	f8d3 3550 	ldr.w	r3, [r3, #1360]	; 0x550
   1e19c:	b133      	cbz	r3, 1e1ac <ble_phy_rx+0x1c>
            ((NRF_RADIO->STATE & 0x07) != RADIO_STATE_STATE_RxIdle)) {
   1e19e:	4b16      	ldr	r3, [pc, #88]	; (1e1f8 <ble_phy_rx+0x68>)
   1e1a0:	f8d3 3550 	ldr.w	r3, [r3, #1360]	; 0x550
   1e1a4:	f003 0307 	and.w	r3, r3, #7
    if ((NRF_RADIO->STATE != RADIO_STATE_STATE_Disabled) &&
   1e1a8:	2b02      	cmp	r3, #2
   1e1aa:	d113      	bne.n	1e1d4 <ble_phy_rx+0x44>
    NRF_RADIO->INTENCLR = NRF_RADIO_IRQ_MASK_ALL;
   1e1ac:	4b12      	ldr	r3, [pc, #72]	; (1e1f8 <ble_phy_rx+0x68>)
   1e1ae:	f243 42ff 	movw	r2, #13567	; 0x34ff
   1e1b2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    NRF_RADIO->EVENTS_END = 0;
   1e1b6:	2200      	movs	r2, #0
   1e1b8:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    NRF_RADIO->EVENTS_DISABLED = 0;
   1e1bc:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    ble_phy_rx_xcvr_setup();
   1e1c0:	f7ff fafc 	bl	1d7bc <ble_phy_rx_xcvr_setup>
    assert(NRF_PPI->CHEN & PPI_CHEN_CH21_Msk);
   1e1c4:	4b0d      	ldr	r3, [pc, #52]	; (1e1fc <ble_phy_rx+0x6c>)
   1e1c6:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
   1e1ca:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
   1e1ce:	d009      	beq.n	1e1e4 <ble_phy_rx+0x54>
    return 0;
   1e1d0:	2000      	movs	r0, #0
}
   1e1d2:	bd08      	pop	{r3, pc}
        ble_phy_disable();
   1e1d4:	f7ff fe40 	bl	1de58 <ble_phy_disable>
        STATS_INC(ble_phy_stats, radio_state_errs);
   1e1d8:	4a09      	ldr	r2, [pc, #36]	; (1e200 <ble_phy_rx+0x70>)
   1e1da:	6b53      	ldr	r3, [r2, #52]	; 0x34
   1e1dc:	3301      	adds	r3, #1
   1e1de:	6353      	str	r3, [r2, #52]	; 0x34
        return BLE_PHY_ERR_RADIO_STATE;
   1e1e0:	2001      	movs	r0, #1
   1e1e2:	e7f6      	b.n	1e1d2 <ble_phy_rx+0x42>
    assert(NRF_PPI->CHEN & PPI_CHEN_CH21_Msk);
   1e1e4:	f7ee f800 	bl	c1e8 <hal_debugger_connected>
   1e1e8:	b100      	cbz	r0, 1e1ec <ble_phy_rx+0x5c>
   1e1ea:	be01      	bkpt	0x0001
   1e1ec:	2300      	movs	r3, #0
   1e1ee:	461a      	mov	r2, r3
   1e1f0:	4619      	mov	r1, r3
   1e1f2:	4618      	mov	r0, r3
   1e1f4:	f7ee fcac 	bl	cb50 <__assert_func>
   1e1f8:	40001000 	.word	0x40001000
   1e1fc:	4001f000 	.word	0x4001f000
   1e200:	20003e1c 	.word	0x20003e1c

0001e204 <ble_phy_rx_set_start_time>:
{
   1e204:	b510      	push	{r4, lr}
    NRF_PPI->CHENCLR = PPI_CHEN_CH20_Msk;
   1e206:	4b10      	ldr	r3, [pc, #64]	; (1e248 <ble_phy_rx_set_start_time+0x44>)
   1e208:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   1e20c:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    if (ble_phy_set_start_time(cputime, rem_usecs, false) != 0) {
   1e210:	2200      	movs	r2, #0
   1e212:	f7ff fa7b 	bl	1d70c <ble_phy_set_start_time>
   1e216:	b960      	cbnz	r0, 1e232 <ble_phy_rx_set_start_time+0x2e>
    bool late = false;
   1e218:	2400      	movs	r4, #0
    NRF_PPI->CHENSET = PPI_CHEN_CH21_Msk;
   1e21a:	4b0b      	ldr	r3, [pc, #44]	; (1e248 <ble_phy_rx_set_start_time+0x44>)
   1e21c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   1e220:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    rc = ble_phy_rx();
   1e224:	f7ff ffb4 	bl	1e190 <ble_phy_rx>
    if (!rc && late) {
   1e228:	4603      	mov	r3, r0
   1e22a:	b900      	cbnz	r0, 1e22e <ble_phy_rx_set_start_time+0x2a>
   1e22c:	b94c      	cbnz	r4, 1e242 <ble_phy_rx_set_start_time+0x3e>
}
   1e22e:	4618      	mov	r0, r3
   1e230:	bd10      	pop	{r4, pc}
        STATS_INC(ble_phy_stats, rx_late);
   1e232:	4a06      	ldr	r2, [pc, #24]	; (1e24c <ble_phy_rx_set_start_time+0x48>)
   1e234:	6b13      	ldr	r3, [r2, #48]	; 0x30
   1e236:	3301      	adds	r3, #1
   1e238:	6313      	str	r3, [r2, #48]	; 0x30
        ble_phy_set_start_now();
   1e23a:	f7ff fb83 	bl	1d944 <ble_phy_set_start_now>
        late = true;
   1e23e:	2401      	movs	r4, #1
   1e240:	e7eb      	b.n	1e21a <ble_phy_rx_set_start_time+0x16>
        rc = BLE_PHY_ERR_RX_LATE;
   1e242:	2306      	movs	r3, #6
    return rc;
   1e244:	e7f3      	b.n	1e22e <ble_phy_rx_set_start_time+0x2a>
   1e246:	bf00      	nop
   1e248:	4001f000 	.word	0x4001f000
   1e24c:	20003e1c 	.word	0x20003e1c

0001e250 <ble_phy_restart_rx>:
{
   1e250:	b508      	push	{r3, lr}
    ble_phy_stop_usec_timer();
   1e252:	f7ff fb4b 	bl	1d8ec <ble_phy_stop_usec_timer>
    ble_phy_disable_irq_and_ppi();
   1e256:	f7ff fb57 	bl	1d908 <ble_phy_disable_irq_and_ppi>
    ble_phy_set_start_now();
   1e25a:	f7ff fb73 	bl	1d944 <ble_phy_set_start_now>
    NRF_PPI->CHENSET = PPI_CHEN_CH21_Msk;
   1e25e:	4b04      	ldr	r3, [pc, #16]	; (1e270 <ble_phy_restart_rx+0x20>)
   1e260:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   1e264:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    ble_phy_rx();
   1e268:	f7ff ff92 	bl	1e190 <ble_phy_rx>
}
   1e26c:	bd08      	pop	{r3, pc}
   1e26e:	bf00      	nop
   1e270:	4001f000 	.word	0x4001f000

0001e274 <ble_phy_tx_set_start_time>:
{
   1e274:	b508      	push	{r3, lr}
    NRF_PPI->CHENCLR = PPI_CHEN_CH21_Msk;
   1e276:	4b0c      	ldr	r3, [pc, #48]	; (1e2a8 <ble_phy_tx_set_start_time+0x34>)
   1e278:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   1e27c:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    if (ble_phy_set_start_time(cputime, rem_usecs, true) != 0) {
   1e280:	2201      	movs	r2, #1
   1e282:	f7ff fa43 	bl	1d70c <ble_phy_set_start_time>
   1e286:	b938      	cbnz	r0, 1e298 <ble_phy_tx_set_start_time+0x24>
   1e288:	4603      	mov	r3, r0
        NRF_PPI->CHENSET = PPI_CHEN_CH20_Msk;
   1e28a:	4a07      	ldr	r2, [pc, #28]	; (1e2a8 <ble_phy_tx_set_start_time+0x34>)
   1e28c:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
   1e290:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
}
   1e294:	4618      	mov	r0, r3
   1e296:	bd08      	pop	{r3, pc}
        STATS_INC(ble_phy_stats, tx_late);
   1e298:	4a04      	ldr	r2, [pc, #16]	; (1e2ac <ble_phy_tx_set_start_time+0x38>)
   1e29a:	6993      	ldr	r3, [r2, #24]
   1e29c:	3301      	adds	r3, #1
   1e29e:	6193      	str	r3, [r2, #24]
        ble_phy_disable();
   1e2a0:	f7ff fdda 	bl	1de58 <ble_phy_disable>
        rc = BLE_PHY_ERR_TX_LATE;
   1e2a4:	2305      	movs	r3, #5
   1e2a6:	e7f5      	b.n	1e294 <ble_phy_tx_set_start_time+0x20>
   1e2a8:	4001f000 	.word	0x4001f000
   1e2ac:	20003e1c 	.word	0x20003e1c

0001e2b0 <ble_phy_tx>:
{
   1e2b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e2b4:	b082      	sub	sp, #8
    if (g_ble_phy_data.phy_transition_late) {
   1e2b6:	4b3c      	ldr	r3, [pc, #240]	; (1e3a8 <ble_phy_tx+0xf8>)
   1e2b8:	795b      	ldrb	r3, [r3, #5]
   1e2ba:	2b00      	cmp	r3, #0
   1e2bc:	d15d      	bne.n	1e37a <ble_phy_tx+0xca>
   1e2be:	4607      	mov	r7, r0
   1e2c0:	4688      	mov	r8, r1
   1e2c2:	4616      	mov	r6, r2
    nrf_wait_disabled();
   1e2c4:	f7ff fa12 	bl	1d6ec <nrf_wait_disabled>
    NRF_PPI->CHENCLR = PPI_CHEN_CH4_Msk | PPI_CHEN_CH5_Msk | PPI_CHEN_CH23_Msk |
   1e2c8:	4b38      	ldr	r3, [pc, #224]	; (1e3ac <ble_phy_tx+0xfc>)
   1e2ca:	4a39      	ldr	r2, [pc, #228]	; (1e3b0 <ble_phy_tx+0x100>)
   1e2cc:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    if (g_ble_phy_data.phy_encrypted) {
   1e2d0:	4b35      	ldr	r3, [pc, #212]	; (1e3a8 <ble_phy_tx+0xf8>)
   1e2d2:	79db      	ldrb	r3, [r3, #7]
   1e2d4:	2b00      	cmp	r3, #0
   1e2d6:	d058      	beq.n	1e38a <ble_phy_tx+0xda>
        NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   1e2d8:	4d36      	ldr	r5, [pc, #216]	; (1e3b4 <ble_phy_tx+0x104>)
   1e2da:	2301      	movs	r3, #1
   1e2dc:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
        NRF_CCM->INPTR = (uint32_t)dptr;
   1e2e0:	4c35      	ldr	r4, [pc, #212]	; (1e3b8 <ble_phy_tx+0x108>)
   1e2e2:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
        NRF_CCM->OUTPTR = (uint32_t)pktptr;
   1e2e6:	4b35      	ldr	r3, [pc, #212]	; (1e3bc <ble_phy_tx+0x10c>)
   1e2e8:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
        NRF_CCM->SCRATCHPTR = (uint32_t)&g_nrf_encrypt_scratchpad[0];
   1e2ec:	4b34      	ldr	r3, [pc, #208]	; (1e3c0 <ble_phy_tx+0x110>)
   1e2ee:	f8c5 3514 	str.w	r3, [r5, #1300]	; 0x514
        NRF_CCM->EVENTS_ERROR = 0;
   1e2f2:	2300      	movs	r3, #0
   1e2f4:	f8c5 3108 	str.w	r3, [r5, #264]	; 0x108
        NRF_CCM->MODE = CCM_MODE_LENGTH_Msk | ble_phy_get_ccm_datarate();
   1e2f8:	f7ff fa5e 	bl	1d7b8 <ble_phy_get_ccm_datarate>
   1e2fc:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
   1e300:	f8c5 0504 	str.w	r0, [r5, #1284]	; 0x504
        NRF_CCM->CNFPTR = (uint32_t)&g_nrf_ccm_data;
   1e304:	4b2f      	ldr	r3, [pc, #188]	; (1e3c4 <ble_phy_tx+0x114>)
   1e306:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
    payload_len = pducb(&dptr[3], pducb_arg, &hdr_byte);
   1e30a:	f10d 0207 	add.w	r2, sp, #7
   1e30e:	4641      	mov	r1, r8
   1e310:	1ce0      	adds	r0, r4, #3
   1e312:	47b8      	blx	r7
    dptr[0] = hdr_byte;
   1e314:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1e318:	7023      	strb	r3, [r4, #0]
    dptr[1] = payload_len;
   1e31a:	7060      	strb	r0, [r4, #1]
    dptr[2] = 0;
   1e31c:	2300      	movs	r3, #0
   1e31e:	70a3      	strb	r3, [r4, #2]
    if (g_ble_phy_data.phy_encrypted) {
   1e320:	4b21      	ldr	r3, [pc, #132]	; (1e3a8 <ble_phy_tx+0xf8>)
   1e322:	79db      	ldrb	r3, [r3, #7]
   1e324:	b113      	cbz	r3, 1e32c <ble_phy_tx+0x7c>
        NRF_CCM->TASKS_KSGEN = 1;
   1e326:	4b23      	ldr	r3, [pc, #140]	; (1e3b4 <ble_phy_tx+0x104>)
   1e328:	2201      	movs	r2, #1
   1e32a:	601a      	str	r2, [r3, #0]
    NRF_RADIO->PACKETPTR = (uint32_t)pktptr;
   1e32c:	4b26      	ldr	r3, [pc, #152]	; (1e3c8 <ble_phy_tx+0x118>)
   1e32e:	4a23      	ldr	r2, [pc, #140]	; (1e3bc <ble_phy_tx+0x10c>)
   1e330:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    NRF_RADIO->EVENTS_READY = 0;
   1e334:	2200      	movs	r2, #0
   1e336:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    NRF_RADIO->EVENTS_END = 0;
   1e33a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    NRF_RADIO->EVENTS_DISABLED = 0;
   1e33e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    NRF_RADIO->SHORTS = shortcuts;
   1e342:	2203      	movs	r2, #3
   1e344:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    NRF_RADIO->INTENSET = RADIO_INTENSET_DISABLED_Msk;
   1e348:	2210      	movs	r2, #16
   1e34a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    g_ble_phy_data.phy_transition = end_trans;
   1e34e:	4a16      	ldr	r2, [pc, #88]	; (1e3a8 <ble_phy_tx+0xf8>)
   1e350:	7116      	strb	r6, [r2, #4]
    g_ble_phy_data.phy_tx_pyld_len = payload_len;
   1e352:	7250      	strb	r0, [r2, #9]
    state = NRF_RADIO->STATE;
   1e354:	f8d3 3550 	ldr.w	r3, [r3, #1360]	; 0x550
    if (state != RADIO_STATE_STATE_Tx) {
   1e358:	2b0b      	cmp	r3, #11
   1e35a:	d01c      	beq.n	1e396 <ble_phy_tx+0xe6>
        g_ble_phy_data.phy_state = BLE_PHY_STATE_TX;
   1e35c:	4613      	mov	r3, r2
   1e35e:	2202      	movs	r2, #2
   1e360:	70da      	strb	r2, [r3, #3]
        STATS_INC(ble_phy_stats, tx_good);
   1e362:	4b1a      	ldr	r3, [pc, #104]	; (1e3cc <ble_phy_tx+0x11c>)
   1e364:	691a      	ldr	r2, [r3, #16]
   1e366:	3201      	adds	r2, #1
   1e368:	611a      	str	r2, [r3, #16]
        STATS_INCN(ble_phy_stats, tx_bytes, payload_len + BLE_LL_PDU_HDR_LEN);
   1e36a:	69da      	ldr	r2, [r3, #28]
   1e36c:	4410      	add	r0, r2
   1e36e:	3002      	adds	r0, #2
   1e370:	61d8      	str	r0, [r3, #28]
        rc = BLE_ERR_SUCCESS;
   1e372:	2000      	movs	r0, #0
}
   1e374:	b002      	add	sp, #8
   1e376:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ble_phy_disable();
   1e37a:	f7ff fd6d 	bl	1de58 <ble_phy_disable>
        STATS_INC(ble_phy_stats, tx_late);
   1e37e:	4a13      	ldr	r2, [pc, #76]	; (1e3cc <ble_phy_tx+0x11c>)
   1e380:	6993      	ldr	r3, [r2, #24]
   1e382:	3301      	adds	r3, #1
   1e384:	6193      	str	r3, [r2, #24]
        return BLE_PHY_ERR_TX_LATE;
   1e386:	2005      	movs	r0, #5
   1e388:	e7f4      	b.n	1e374 <ble_phy_tx+0xc4>
        NRF_AAR->IRKPTR = (uint32_t)&g_nrf_irk_list[0];
   1e38a:	4a11      	ldr	r2, [pc, #68]	; (1e3d0 <ble_phy_tx+0x120>)
   1e38c:	4b09      	ldr	r3, [pc, #36]	; (1e3b4 <ble_phy_tx+0x104>)
   1e38e:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
        dptr = (uint8_t *)&g_ble_phy_tx_buf[0];
   1e392:	4c0a      	ldr	r4, [pc, #40]	; (1e3bc <ble_phy_tx+0x10c>)
   1e394:	e7b9      	b.n	1e30a <ble_phy_tx+0x5a>
        ble_phy_disable();
   1e396:	f7ff fd5f 	bl	1de58 <ble_phy_disable>
        STATS_INC(ble_phy_stats, tx_late);
   1e39a:	4a0c      	ldr	r2, [pc, #48]	; (1e3cc <ble_phy_tx+0x11c>)
   1e39c:	6993      	ldr	r3, [r2, #24]
   1e39e:	3301      	adds	r3, #1
   1e3a0:	6193      	str	r3, [r2, #24]
        rc = BLE_PHY_ERR_RADIO_STATE;
   1e3a2:	2001      	movs	r0, #1
   1e3a4:	e7e6      	b.n	1e374 <ble_phy_tx+0xc4>
   1e3a6:	bf00      	nop
   1e3a8:	20003cdc 	.word	0x20003cdc
   1e3ac:	4001f000 	.word	0x4001f000
   1e3b0:	02800030 	.word	0x02800030
   1e3b4:	4000f000 	.word	0x4000f000
   1e3b8:	20002040 	.word	0x20002040
   1e3bc:	20002248 	.word	0x20002248
   1e3c0:	20003d10 	.word	0x20003d10
   1e3c4:	20003e5c 	.word	0x20003e5c
   1e3c8:	40001000 	.word	0x40001000
   1e3cc:	20003e1c 	.word	0x20003e1c
   1e3d0:	20003c98 	.word	0x20003c98

0001e3d4 <ble_phy_access_addr_get>:

/* Gets the current access address */
uint32_t ble_phy_access_addr_get(void)
{
    return g_ble_phy_data.phy_access_address;
}
   1e3d4:	4b01      	ldr	r3, [pc, #4]	; (1e3dc <ble_phy_access_addr_get+0x8>)
   1e3d6:	6958      	ldr	r0, [r3, #20]
   1e3d8:	4770      	bx	lr
   1e3da:	bf00      	nop
   1e3dc:	20003cdc 	.word	0x20003cdc

0001e3e0 <ble_phy_rx_started>:
 */
int
ble_phy_rx_started(void)
{
    return g_ble_phy_data.phy_rx_started;
}
   1e3e0:	4b01      	ldr	r3, [pc, #4]	; (1e3e8 <ble_phy_rx_started+0x8>)
   1e3e2:	7998      	ldrb	r0, [r3, #6]
   1e3e4:	4770      	bx	lr
   1e3e6:	bf00      	nop
   1e3e8:	20003cdc 	.word	0x20003cdc

0001e3ec <ble_phy_xcvr_state_get>:
 */
uint8_t
ble_phy_xcvr_state_get(void)
{
    uint32_t state;
    state = NRF_RADIO->STATE;
   1e3ec:	4b02      	ldr	r3, [pc, #8]	; (1e3f8 <ble_phy_xcvr_state_get+0xc>)
   1e3ee:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
    return (uint8_t)state;
}
   1e3f2:	b2c0      	uxtb	r0, r0
   1e3f4:	4770      	bx	lr
   1e3f6:	bf00      	nop
   1e3f8:	40001000 	.word	0x40001000

0001e3fc <ble_phy_max_data_pdu_pyld>:
 */
uint8_t
ble_phy_max_data_pdu_pyld(void)
{
    return BLE_LL_DATA_PDU_MAX_PYLD;
}
   1e3fc:	20fb      	movs	r0, #251	; 0xfb
   1e3fe:	4770      	bx	lr

0001e400 <ble_phy_resolv_list_enable>:

#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LL_PRIVACY)
void
ble_phy_resolv_list_enable(void)
{
    NRF_AAR->NIRK = (uint32_t)g_nrf_num_irks;
   1e400:	4b04      	ldr	r3, [pc, #16]	; (1e414 <ble_phy_resolv_list_enable+0x14>)
   1e402:	781a      	ldrb	r2, [r3, #0]
   1e404:	4b04      	ldr	r3, [pc, #16]	; (1e418 <ble_phy_resolv_list_enable+0x18>)
   1e406:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    g_ble_phy_data.phy_privacy = 1;
   1e40a:	4b04      	ldr	r3, [pc, #16]	; (1e41c <ble_phy_resolv_list_enable+0x1c>)
   1e40c:	2201      	movs	r2, #1
   1e40e:	721a      	strb	r2, [r3, #8]
}
   1e410:	4770      	bx	lr
   1e412:	bf00      	nop
   1e414:	20003c94 	.word	0x20003c94
   1e418:	4000f000 	.word	0x4000f000
   1e41c:	20003cdc 	.word	0x20003cdc

0001e420 <ble_phy_resolv_list_disable>:

void
ble_phy_resolv_list_disable(void)
{
    g_ble_phy_data.phy_privacy = 0;
   1e420:	4b01      	ldr	r3, [pc, #4]	; (1e428 <ble_phy_resolv_list_disable+0x8>)
   1e422:	2200      	movs	r2, #0
   1e424:	721a      	strb	r2, [r3, #8]
}
   1e426:	4770      	bx	lr
   1e428:	20003cdc 	.word	0x20003cdc

0001e42c <ble_phy_rfclk_enable>:
}
#endif

void
ble_phy_rfclk_enable(void)
{
   1e42c:	b508      	push	{r3, lr}
#if MYNEWT
    nrf52_clock_hfxo_request();
   1e42e:	f010 f92b 	bl	2e688 <nrf52_clock_hfxo_request>
#else
    NRF_CLOCK->TASKS_HFCLKSTART = 1;
#endif
}
   1e432:	bd08      	pop	{r3, pc}

0001e434 <ble_phy_rfclk_disable>:

void
ble_phy_rfclk_disable(void)
{
   1e434:	b508      	push	{r3, lr}
#if MYNEWT
    nrf52_clock_hfxo_release();
   1e436:	f010 f949 	bl	2e6cc <nrf52_clock_hfxo_release>
#else
    NRF_CLOCK->TASKS_HFCLKSTOP = 1;
#endif
}
   1e43a:	bd08      	pop	{r3, pc}

0001e43c <ble_att_rx_dispatch_entry_find>:
    STATS_NAME(ble_att_stats, write_cmd_tx)
STATS_NAME_END(ble_att_stats)

static const struct ble_att_rx_dispatch_entry *
ble_att_rx_dispatch_entry_find(uint8_t op)
{
   1e43c:	4601      	mov	r1, r0
    const struct ble_att_rx_dispatch_entry *entry;
    int i;

    for (i = 0; i < BLE_ATT_RX_DISPATCH_SZ; i++) {
   1e43e:	2300      	movs	r3, #0
   1e440:	2b1a      	cmp	r3, #26
   1e442:	d809      	bhi.n	1e458 <ble_att_rx_dispatch_entry_find+0x1c>
        entry = ble_att_rx_dispatch + i;
   1e444:	4a06      	ldr	r2, [pc, #24]	; (1e460 <ble_att_rx_dispatch_entry_find+0x24>)
   1e446:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
        if (entry->bde_op == op) {
   1e44a:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
   1e44e:	428a      	cmp	r2, r1
   1e450:	d005      	beq.n	1e45e <ble_att_rx_dispatch_entry_find+0x22>
            return entry;
        }

        if (entry->bde_op > op) {
   1e452:	d803      	bhi.n	1e45c <ble_att_rx_dispatch_entry_find+0x20>
    for (i = 0; i < BLE_ATT_RX_DISPATCH_SZ; i++) {
   1e454:	3301      	adds	r3, #1
   1e456:	e7f3      	b.n	1e440 <ble_att_rx_dispatch_entry_find+0x4>
            break;
        }
    }

    return NULL;
   1e458:	2000      	movs	r0, #0
   1e45a:	4770      	bx	lr
   1e45c:	2000      	movs	r0, #0
}
   1e45e:	4770      	bx	lr
   1e460:	00031e84 	.word	0x00031e84

0001e464 <ble_att_inc_rx_stat>:
}

static void
ble_att_inc_rx_stat(uint8_t att_op)
{
    switch (att_op) {
   1e464:	3801      	subs	r0, #1
   1e466:	2851      	cmp	r0, #81	; 0x51
   1e468:	f200 80f2 	bhi.w	1e650 <ble_att_inc_rx_stat+0x1ec>
   1e46c:	e8df f010 	tbh	[pc, r0, lsl #1]
   1e470:	00570052 	.word	0x00570052
   1e474:	0061005c 	.word	0x0061005c
   1e478:	006b0066 	.word	0x006b0066
   1e47c:	00750070 	.word	0x00750070
   1e480:	007f007a 	.word	0x007f007a
   1e484:	00890084 	.word	0x00890084
   1e488:	0093008e 	.word	0x0093008e
   1e48c:	009d0098 	.word	0x009d0098
   1e490:	00ab00a4 	.word	0x00ab00a4
   1e494:	00f000b2 	.word	0x00f000b2
   1e498:	00b900f0 	.word	0x00b900f0
   1e49c:	00c700c0 	.word	0x00c700c0
   1e4a0:	00f000ce 	.word	0x00f000ce
   1e4a4:	00f000d5 	.word	0x00f000d5
   1e4a8:	00e300dc 	.word	0x00e300dc
   1e4ac:	00f000f0 	.word	0x00f000f0
   1e4b0:	00f000f0 	.word	0x00f000f0
   1e4b4:	00f000f0 	.word	0x00f000f0
   1e4b8:	00f000f0 	.word	0x00f000f0
   1e4bc:	00f000f0 	.word	0x00f000f0
   1e4c0:	00f000f0 	.word	0x00f000f0
   1e4c4:	00f000f0 	.word	0x00f000f0
   1e4c8:	00f000f0 	.word	0x00f000f0
   1e4cc:	00f000f0 	.word	0x00f000f0
   1e4d0:	00f000f0 	.word	0x00f000f0
   1e4d4:	00f000f0 	.word	0x00f000f0
   1e4d8:	00f000f0 	.word	0x00f000f0
   1e4dc:	00f000f0 	.word	0x00f000f0
   1e4e0:	00f000f0 	.word	0x00f000f0
   1e4e4:	00f000f0 	.word	0x00f000f0
   1e4e8:	00f000f0 	.word	0x00f000f0
   1e4ec:	00f000f0 	.word	0x00f000f0
   1e4f0:	00f000f0 	.word	0x00f000f0
   1e4f4:	00f000f0 	.word	0x00f000f0
   1e4f8:	00f000f0 	.word	0x00f000f0
   1e4fc:	00f000f0 	.word	0x00f000f0
   1e500:	00f000f0 	.word	0x00f000f0
   1e504:	00f000f0 	.word	0x00f000f0
   1e508:	00f000f0 	.word	0x00f000f0
   1e50c:	00f000f0 	.word	0x00f000f0
   1e510:	00ea00f0 	.word	0x00ea00f0
    case BLE_ATT_OP_ERROR_RSP:
        STATS_INC(ble_att_stats, error_rsp_rx);
   1e514:	4a4f      	ldr	r2, [pc, #316]	; (1e654 <ble_att_inc_rx_stat+0x1f0>)
   1e516:	68d3      	ldr	r3, [r2, #12]
   1e518:	3301      	adds	r3, #1
   1e51a:	60d3      	str	r3, [r2, #12]
        break;
   1e51c:	4770      	bx	lr

    case BLE_ATT_OP_MTU_REQ:
        STATS_INC(ble_att_stats, mtu_req_rx);
   1e51e:	4a4d      	ldr	r2, [pc, #308]	; (1e654 <ble_att_inc_rx_stat+0x1f0>)
   1e520:	6953      	ldr	r3, [r2, #20]
   1e522:	3301      	adds	r3, #1
   1e524:	6153      	str	r3, [r2, #20]
        break;
   1e526:	4770      	bx	lr

    case BLE_ATT_OP_MTU_RSP:
        STATS_INC(ble_att_stats, mtu_rsp_rx);
   1e528:	4a4a      	ldr	r2, [pc, #296]	; (1e654 <ble_att_inc_rx_stat+0x1f0>)
   1e52a:	69d3      	ldr	r3, [r2, #28]
   1e52c:	3301      	adds	r3, #1
   1e52e:	61d3      	str	r3, [r2, #28]
        break;
   1e530:	4770      	bx	lr

    case BLE_ATT_OP_FIND_INFO_REQ:
        STATS_INC(ble_att_stats, find_info_req_rx);
   1e532:	4a48      	ldr	r2, [pc, #288]	; (1e654 <ble_att_inc_rx_stat+0x1f0>)
   1e534:	6a53      	ldr	r3, [r2, #36]	; 0x24
   1e536:	3301      	adds	r3, #1
   1e538:	6253      	str	r3, [r2, #36]	; 0x24
        break;
   1e53a:	4770      	bx	lr

    case BLE_ATT_OP_FIND_INFO_RSP:
        STATS_INC(ble_att_stats, find_info_rsp_rx);
   1e53c:	4a45      	ldr	r2, [pc, #276]	; (1e654 <ble_att_inc_rx_stat+0x1f0>)
   1e53e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   1e540:	3301      	adds	r3, #1
   1e542:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
   1e544:	4770      	bx	lr

    case BLE_ATT_OP_FIND_TYPE_VALUE_REQ:
        STATS_INC(ble_att_stats, find_type_value_req_rx);
   1e546:	4a43      	ldr	r2, [pc, #268]	; (1e654 <ble_att_inc_rx_stat+0x1f0>)
   1e548:	6b53      	ldr	r3, [r2, #52]	; 0x34
   1e54a:	3301      	adds	r3, #1
   1e54c:	6353      	str	r3, [r2, #52]	; 0x34
        break;
   1e54e:	4770      	bx	lr

    case BLE_ATT_OP_FIND_TYPE_VALUE_RSP:
        STATS_INC(ble_att_stats, find_type_value_rsp_rx);
   1e550:	4a40      	ldr	r2, [pc, #256]	; (1e654 <ble_att_inc_rx_stat+0x1f0>)
   1e552:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
   1e554:	3301      	adds	r3, #1
   1e556:	63d3      	str	r3, [r2, #60]	; 0x3c
        break;
   1e558:	4770      	bx	lr

    case BLE_ATT_OP_READ_TYPE_REQ:
        STATS_INC(ble_att_stats, read_type_req_rx);
   1e55a:	4a3e      	ldr	r2, [pc, #248]	; (1e654 <ble_att_inc_rx_stat+0x1f0>)
   1e55c:	6c53      	ldr	r3, [r2, #68]	; 0x44
   1e55e:	3301      	adds	r3, #1
   1e560:	6453      	str	r3, [r2, #68]	; 0x44
        break;
   1e562:	4770      	bx	lr

    case BLE_ATT_OP_READ_TYPE_RSP:
        STATS_INC(ble_att_stats, read_type_rsp_rx);
   1e564:	4a3b      	ldr	r2, [pc, #236]	; (1e654 <ble_att_inc_rx_stat+0x1f0>)
   1e566:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   1e568:	3301      	adds	r3, #1
   1e56a:	64d3      	str	r3, [r2, #76]	; 0x4c
        break;
   1e56c:	4770      	bx	lr

    case BLE_ATT_OP_READ_REQ:
        STATS_INC(ble_att_stats, read_req_rx);
   1e56e:	4a39      	ldr	r2, [pc, #228]	; (1e654 <ble_att_inc_rx_stat+0x1f0>)
   1e570:	6d53      	ldr	r3, [r2, #84]	; 0x54
   1e572:	3301      	adds	r3, #1
   1e574:	6553      	str	r3, [r2, #84]	; 0x54
        break;
   1e576:	4770      	bx	lr

    case BLE_ATT_OP_READ_RSP:
        STATS_INC(ble_att_stats, read_rsp_rx);
   1e578:	4a36      	ldr	r2, [pc, #216]	; (1e654 <ble_att_inc_rx_stat+0x1f0>)
   1e57a:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
   1e57c:	3301      	adds	r3, #1
   1e57e:	65d3      	str	r3, [r2, #92]	; 0x5c
        break;
   1e580:	4770      	bx	lr

    case BLE_ATT_OP_READ_BLOB_REQ:
        STATS_INC(ble_att_stats, read_blob_req_rx);
   1e582:	4a34      	ldr	r2, [pc, #208]	; (1e654 <ble_att_inc_rx_stat+0x1f0>)
   1e584:	6e53      	ldr	r3, [r2, #100]	; 0x64
   1e586:	3301      	adds	r3, #1
   1e588:	6653      	str	r3, [r2, #100]	; 0x64
        break;
   1e58a:	4770      	bx	lr

    case BLE_ATT_OP_READ_BLOB_RSP:
        STATS_INC(ble_att_stats, read_blob_rsp_rx);
   1e58c:	4a31      	ldr	r2, [pc, #196]	; (1e654 <ble_att_inc_rx_stat+0x1f0>)
   1e58e:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
   1e590:	3301      	adds	r3, #1
   1e592:	66d3      	str	r3, [r2, #108]	; 0x6c
        break;
   1e594:	4770      	bx	lr

    case BLE_ATT_OP_READ_MULT_REQ:
        STATS_INC(ble_att_stats, read_mult_req_rx);
   1e596:	4a2f      	ldr	r2, [pc, #188]	; (1e654 <ble_att_inc_rx_stat+0x1f0>)
   1e598:	6f53      	ldr	r3, [r2, #116]	; 0x74
   1e59a:	3301      	adds	r3, #1
   1e59c:	6753      	str	r3, [r2, #116]	; 0x74
        break;
   1e59e:	4770      	bx	lr

    case BLE_ATT_OP_READ_MULT_RSP:
        STATS_INC(ble_att_stats, read_mult_rsp_rx);
   1e5a0:	4a2c      	ldr	r2, [pc, #176]	; (1e654 <ble_att_inc_rx_stat+0x1f0>)
   1e5a2:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
   1e5a4:	3301      	adds	r3, #1
   1e5a6:	67d3      	str	r3, [r2, #124]	; 0x7c
        break;
   1e5a8:	4770      	bx	lr

    case BLE_ATT_OP_READ_GROUP_TYPE_REQ:
        STATS_INC(ble_att_stats, read_group_type_req_rx);
   1e5aa:	4a2a      	ldr	r2, [pc, #168]	; (1e654 <ble_att_inc_rx_stat+0x1f0>)
   1e5ac:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
   1e5b0:	3301      	adds	r3, #1
   1e5b2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
        break;
   1e5b6:	4770      	bx	lr

    case BLE_ATT_OP_READ_GROUP_TYPE_RSP:
        STATS_INC(ble_att_stats, read_group_type_rsp_rx);
   1e5b8:	4a26      	ldr	r2, [pc, #152]	; (1e654 <ble_att_inc_rx_stat+0x1f0>)
   1e5ba:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
   1e5be:	3301      	adds	r3, #1
   1e5c0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
        break;
   1e5c4:	4770      	bx	lr

    case BLE_ATT_OP_WRITE_REQ:
        STATS_INC(ble_att_stats, write_req_rx);
   1e5c6:	4a23      	ldr	r2, [pc, #140]	; (1e654 <ble_att_inc_rx_stat+0x1f0>)
   1e5c8:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
   1e5cc:	3301      	adds	r3, #1
   1e5ce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        break;
   1e5d2:	4770      	bx	lr

    case BLE_ATT_OP_WRITE_RSP:
        STATS_INC(ble_att_stats, write_rsp_rx);
   1e5d4:	4a1f      	ldr	r2, [pc, #124]	; (1e654 <ble_att_inc_rx_stat+0x1f0>)
   1e5d6:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
   1e5da:	3301      	adds	r3, #1
   1e5dc:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
        break;
   1e5e0:	4770      	bx	lr

    case BLE_ATT_OP_PREP_WRITE_REQ:
        STATS_INC(ble_att_stats, prep_write_req_rx);
   1e5e2:	4a1c      	ldr	r2, [pc, #112]	; (1e654 <ble_att_inc_rx_stat+0x1f0>)
   1e5e4:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
   1e5e8:	3301      	adds	r3, #1
   1e5ea:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
        break;
   1e5ee:	4770      	bx	lr

    case BLE_ATT_OP_PREP_WRITE_RSP:
        STATS_INC(ble_att_stats, prep_write_rsp_rx);
   1e5f0:	4a18      	ldr	r2, [pc, #96]	; (1e654 <ble_att_inc_rx_stat+0x1f0>)
   1e5f2:	f8d2 30ac 	ldr.w	r3, [r2, #172]	; 0xac
   1e5f6:	3301      	adds	r3, #1
   1e5f8:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
        break;
   1e5fc:	4770      	bx	lr

    case BLE_ATT_OP_EXEC_WRITE_REQ:
        STATS_INC(ble_att_stats, exec_write_req_rx);
   1e5fe:	4a15      	ldr	r2, [pc, #84]	; (1e654 <ble_att_inc_rx_stat+0x1f0>)
   1e600:	f8d2 30b4 	ldr.w	r3, [r2, #180]	; 0xb4
   1e604:	3301      	adds	r3, #1
   1e606:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
        break;
   1e60a:	4770      	bx	lr

    case BLE_ATT_OP_EXEC_WRITE_RSP:
        STATS_INC(ble_att_stats, exec_write_rsp_rx);
   1e60c:	4a11      	ldr	r2, [pc, #68]	; (1e654 <ble_att_inc_rx_stat+0x1f0>)
   1e60e:	f8d2 30bc 	ldr.w	r3, [r2, #188]	; 0xbc
   1e612:	3301      	adds	r3, #1
   1e614:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc
        break;
   1e618:	4770      	bx	lr

    case BLE_ATT_OP_NOTIFY_REQ:
        STATS_INC(ble_att_stats, notify_req_rx);
   1e61a:	4a0e      	ldr	r2, [pc, #56]	; (1e654 <ble_att_inc_rx_stat+0x1f0>)
   1e61c:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
   1e620:	3301      	adds	r3, #1
   1e622:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
        break;
   1e626:	4770      	bx	lr

    case BLE_ATT_OP_INDICATE_REQ:
        STATS_INC(ble_att_stats, indicate_req_rx);
   1e628:	4a0a      	ldr	r2, [pc, #40]	; (1e654 <ble_att_inc_rx_stat+0x1f0>)
   1e62a:	f8d2 30cc 	ldr.w	r3, [r2, #204]	; 0xcc
   1e62e:	3301      	adds	r3, #1
   1e630:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
        break;
   1e634:	4770      	bx	lr

    case BLE_ATT_OP_INDICATE_RSP:
        STATS_INC(ble_att_stats, indicate_rsp_rx);
   1e636:	4a07      	ldr	r2, [pc, #28]	; (1e654 <ble_att_inc_rx_stat+0x1f0>)
   1e638:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
   1e63c:	3301      	adds	r3, #1
   1e63e:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
        break;
   1e642:	4770      	bx	lr

    case BLE_ATT_OP_WRITE_CMD:
        STATS_INC(ble_att_stats, write_cmd_rx);
   1e644:	4a03      	ldr	r2, [pc, #12]	; (1e654 <ble_att_inc_rx_stat+0x1f0>)
   1e646:	f8d2 30dc 	ldr.w	r3, [r2, #220]	; 0xdc
   1e64a:	3301      	adds	r3, #1
   1e64c:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
        break;

    default:
        break;
    }
}
   1e650:	4770      	bx	lr
   1e652:	bf00      	nop
   1e654:	20003e80 	.word	0x20003e80

0001e658 <ble_att_rx_handle_unknown_request>:
static void
ble_att_rx_handle_unknown_request(uint8_t op, uint16_t conn_handle,
                                  struct os_mbuf **om)
{
    /* If this is command (bit6 is set to 1), do nothing */
    if (op & 0x40) {
   1e658:	f010 0f40 	tst.w	r0, #64	; 0x40
   1e65c:	d000      	beq.n	1e660 <ble_att_rx_handle_unknown_request+0x8>
   1e65e:	4770      	bx	lr
{
   1e660:	b570      	push	{r4, r5, r6, lr}
   1e662:	b082      	sub	sp, #8
   1e664:	4615      	mov	r5, r2
   1e666:	460e      	mov	r6, r1
   1e668:	4604      	mov	r4, r0
        return;
    }

    os_mbuf_adj(*om, OS_MBUF_PKTLEN(*om));
   1e66a:	6810      	ldr	r0, [r2, #0]
   1e66c:	8a01      	ldrh	r1, [r0, #16]
   1e66e:	f7ee ffaf 	bl	d5d0 <os_mbuf_adj>
    ble_att_svr_tx_error_rsp(conn_handle, *om, op, 0,
   1e672:	2306      	movs	r3, #6
   1e674:	9300      	str	r3, [sp, #0]
   1e676:	2300      	movs	r3, #0
   1e678:	4622      	mov	r2, r4
   1e67a:	6829      	ldr	r1, [r5, #0]
   1e67c:	4630      	mov	r0, r6
   1e67e:	f001 f99e 	bl	1f9be <ble_att_svr_tx_error_rsp>
                             BLE_ATT_ERR_REQ_NOT_SUPPORTED);

    *om = NULL;
   1e682:	2300      	movs	r3, #0
   1e684:	602b      	str	r3, [r5, #0]
}
   1e686:	b002      	add	sp, #8
   1e688:	bd70      	pop	{r4, r5, r6, pc}

0001e68a <ble_att_rx>:

static int
ble_att_rx(struct ble_l2cap_chan *chan)
{
   1e68a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e68e:	b082      	sub	sp, #8
   1e690:	4604      	mov	r4, r0
    uint8_t op;
    uint16_t conn_handle;
    struct os_mbuf **om;
    int rc;

    conn_handle = ble_l2cap_get_conn_handle(chan);
   1e692:	f007 fb94 	bl	25dbe <ble_l2cap_get_conn_handle>
    if (conn_handle == BLE_HS_CONN_HANDLE_NONE) {
   1e696:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1e69a:	4298      	cmp	r0, r3
   1e69c:	d02f      	beq.n	1e6fe <ble_att_rx+0x74>
   1e69e:	4605      	mov	r5, r0
        return BLE_HS_ENOTCONN;
    }

    om = &chan->rx_buf;
   1e6a0:	f104 0710 	add.w	r7, r4, #16
    BLE_HS_DBG_ASSERT(*om != NULL);

    rc = os_mbuf_copydata(*om, 0, 1, &op);
   1e6a4:	f10d 0307 	add.w	r3, sp, #7
   1e6a8:	2201      	movs	r2, #1
   1e6aa:	2100      	movs	r1, #0
   1e6ac:	6920      	ldr	r0, [r4, #16]
   1e6ae:	f7ee ff62 	bl	d576 <os_mbuf_copydata>
    if (rc != 0) {
   1e6b2:	bb48      	cbnz	r0, 1e708 <ble_att_rx+0x7e>
        return BLE_HS_EMSGSIZE;
    }

    entry = ble_att_rx_dispatch_entry_find(op);
   1e6b4:	f89d 6007 	ldrb.w	r6, [sp, #7]
   1e6b8:	4630      	mov	r0, r6
   1e6ba:	f7ff febf 	bl	1e43c <ble_att_rx_dispatch_entry_find>
    if (entry == NULL) {
   1e6be:	4680      	mov	r8, r0
   1e6c0:	b1b0      	cbz	r0, 1e6f0 <ble_att_rx+0x66>
        ble_att_rx_handle_unknown_request(op, conn_handle, om);
        return BLE_HS_ENOTSUP;
    }

    ble_att_inc_rx_stat(op);
   1e6c2:	4630      	mov	r0, r6
   1e6c4:	f7ff fece 	bl	1e464 <ble_att_inc_rx_stat>

    /* Strip L2CAP ATT header from the front of the mbuf. */
    os_mbuf_adj(*om, 1);
   1e6c8:	2101      	movs	r1, #1
   1e6ca:	6920      	ldr	r0, [r4, #16]
   1e6cc:	f7ee ff80 	bl	d5d0 <os_mbuf_adj>

    rc = entry->bde_fn(conn_handle, om);
   1e6d0:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1e6d4:	4639      	mov	r1, r7
   1e6d6:	4628      	mov	r0, r5
   1e6d8:	4798      	blx	r3
    if (rc != 0) {
   1e6da:	4604      	mov	r4, r0
   1e6dc:	b180      	cbz	r0, 1e700 <ble_att_rx+0x76>
        if (rc == BLE_HS_ENOTSUP) {
   1e6de:	2808      	cmp	r0, #8
   1e6e0:	d10e      	bne.n	1e700 <ble_att_rx+0x76>
            ble_att_rx_handle_unknown_request(op, conn_handle, om);
   1e6e2:	463a      	mov	r2, r7
   1e6e4:	4629      	mov	r1, r5
   1e6e6:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1e6ea:	f7ff ffb5 	bl	1e658 <ble_att_rx_handle_unknown_request>
   1e6ee:	e007      	b.n	1e700 <ble_att_rx+0x76>
        ble_att_rx_handle_unknown_request(op, conn_handle, om);
   1e6f0:	463a      	mov	r2, r7
   1e6f2:	4629      	mov	r1, r5
   1e6f4:	4630      	mov	r0, r6
   1e6f6:	f7ff ffaf 	bl	1e658 <ble_att_rx_handle_unknown_request>
        return BLE_HS_ENOTSUP;
   1e6fa:	2408      	movs	r4, #8
   1e6fc:	e000      	b.n	1e700 <ble_att_rx+0x76>
        return BLE_HS_ENOTCONN;
   1e6fe:	2407      	movs	r4, #7
        }
        return rc;
    }

    return 0;
}
   1e700:	4620      	mov	r0, r4
   1e702:	b002      	add	sp, #8
   1e704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return BLE_HS_EMSGSIZE;
   1e708:	2404      	movs	r4, #4
   1e70a:	e7f9      	b.n	1e700 <ble_att_rx+0x76>

0001e70c <ble_att_conn_chan_find>:
{
   1e70c:	b508      	push	{r3, lr}
    return ble_hs_misc_conn_chan_find(conn_handle, BLE_L2CAP_CID_ATT,
   1e70e:	4613      	mov	r3, r2
   1e710:	460a      	mov	r2, r1
   1e712:	2104      	movs	r1, #4
   1e714:	f006 ffca 	bl	256ac <ble_hs_misc_conn_chan_find>
}
   1e718:	bd08      	pop	{r3, pc}
	...

0001e71c <ble_att_inc_tx_stat>:
    switch (att_op) {
   1e71c:	3801      	subs	r0, #1
   1e71e:	2851      	cmp	r0, #81	; 0x51
   1e720:	f200 80f4 	bhi.w	1e90c <ble_att_inc_tx_stat+0x1f0>
   1e724:	e8df f010 	tbh	[pc, r0, lsl #1]
   1e728:	00570052 	.word	0x00570052
   1e72c:	0061005c 	.word	0x0061005c
   1e730:	006b0066 	.word	0x006b0066
   1e734:	00750070 	.word	0x00750070
   1e738:	007f007a 	.word	0x007f007a
   1e73c:	00890084 	.word	0x00890084
   1e740:	0093008e 	.word	0x0093008e
   1e744:	009f0098 	.word	0x009f0098
   1e748:	00ad00a6 	.word	0x00ad00a6
   1e74c:	00f200b4 	.word	0x00f200b4
   1e750:	00bb00f2 	.word	0x00bb00f2
   1e754:	00c900c2 	.word	0x00c900c2
   1e758:	00f200d0 	.word	0x00f200d0
   1e75c:	00f200d7 	.word	0x00f200d7
   1e760:	00e500de 	.word	0x00e500de
   1e764:	00f200f2 	.word	0x00f200f2
   1e768:	00f200f2 	.word	0x00f200f2
   1e76c:	00f200f2 	.word	0x00f200f2
   1e770:	00f200f2 	.word	0x00f200f2
   1e774:	00f200f2 	.word	0x00f200f2
   1e778:	00f200f2 	.word	0x00f200f2
   1e77c:	00f200f2 	.word	0x00f200f2
   1e780:	00f200f2 	.word	0x00f200f2
   1e784:	00f200f2 	.word	0x00f200f2
   1e788:	00f200f2 	.word	0x00f200f2
   1e78c:	00f200f2 	.word	0x00f200f2
   1e790:	00f200f2 	.word	0x00f200f2
   1e794:	00f200f2 	.word	0x00f200f2
   1e798:	00f200f2 	.word	0x00f200f2
   1e79c:	00f200f2 	.word	0x00f200f2
   1e7a0:	00f200f2 	.word	0x00f200f2
   1e7a4:	00f200f2 	.word	0x00f200f2
   1e7a8:	00f200f2 	.word	0x00f200f2
   1e7ac:	00f200f2 	.word	0x00f200f2
   1e7b0:	00f200f2 	.word	0x00f200f2
   1e7b4:	00f200f2 	.word	0x00f200f2
   1e7b8:	00f200f2 	.word	0x00f200f2
   1e7bc:	00f200f2 	.word	0x00f200f2
   1e7c0:	00f200f2 	.word	0x00f200f2
   1e7c4:	00f200f2 	.word	0x00f200f2
   1e7c8:	00ec00f2 	.word	0x00ec00f2
        STATS_INC(ble_att_stats, error_rsp_tx);
   1e7cc:	4a50      	ldr	r2, [pc, #320]	; (1e910 <ble_att_inc_tx_stat+0x1f4>)
   1e7ce:	6913      	ldr	r3, [r2, #16]
   1e7d0:	3301      	adds	r3, #1
   1e7d2:	6113      	str	r3, [r2, #16]
        break;
   1e7d4:	4770      	bx	lr
        STATS_INC(ble_att_stats, mtu_req_tx);
   1e7d6:	4a4e      	ldr	r2, [pc, #312]	; (1e910 <ble_att_inc_tx_stat+0x1f4>)
   1e7d8:	6993      	ldr	r3, [r2, #24]
   1e7da:	3301      	adds	r3, #1
   1e7dc:	6193      	str	r3, [r2, #24]
        break;
   1e7de:	4770      	bx	lr
        STATS_INC(ble_att_stats, mtu_rsp_tx);
   1e7e0:	4a4b      	ldr	r2, [pc, #300]	; (1e910 <ble_att_inc_tx_stat+0x1f4>)
   1e7e2:	6a13      	ldr	r3, [r2, #32]
   1e7e4:	3301      	adds	r3, #1
   1e7e6:	6213      	str	r3, [r2, #32]
        break;
   1e7e8:	4770      	bx	lr
        STATS_INC(ble_att_stats, find_info_req_tx);
   1e7ea:	4a49      	ldr	r2, [pc, #292]	; (1e910 <ble_att_inc_tx_stat+0x1f4>)
   1e7ec:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1e7ee:	3301      	adds	r3, #1
   1e7f0:	6293      	str	r3, [r2, #40]	; 0x28
        break;
   1e7f2:	4770      	bx	lr
        STATS_INC(ble_att_stats, find_info_rsp_tx);
   1e7f4:	4a46      	ldr	r2, [pc, #280]	; (1e910 <ble_att_inc_tx_stat+0x1f4>)
   1e7f6:	6b13      	ldr	r3, [r2, #48]	; 0x30
   1e7f8:	3301      	adds	r3, #1
   1e7fa:	6313      	str	r3, [r2, #48]	; 0x30
        break;
   1e7fc:	4770      	bx	lr
        STATS_INC(ble_att_stats, find_type_value_req_tx);
   1e7fe:	4a44      	ldr	r2, [pc, #272]	; (1e910 <ble_att_inc_tx_stat+0x1f4>)
   1e800:	6b93      	ldr	r3, [r2, #56]	; 0x38
   1e802:	3301      	adds	r3, #1
   1e804:	6393      	str	r3, [r2, #56]	; 0x38
        break;
   1e806:	4770      	bx	lr
        STATS_INC(ble_att_stats, find_type_value_rsp_tx);
   1e808:	4a41      	ldr	r2, [pc, #260]	; (1e910 <ble_att_inc_tx_stat+0x1f4>)
   1e80a:	6c13      	ldr	r3, [r2, #64]	; 0x40
   1e80c:	3301      	adds	r3, #1
   1e80e:	6413      	str	r3, [r2, #64]	; 0x40
        break;
   1e810:	4770      	bx	lr
        STATS_INC(ble_att_stats, read_type_req_tx);
   1e812:	4a3f      	ldr	r2, [pc, #252]	; (1e910 <ble_att_inc_tx_stat+0x1f4>)
   1e814:	6c93      	ldr	r3, [r2, #72]	; 0x48
   1e816:	3301      	adds	r3, #1
   1e818:	6493      	str	r3, [r2, #72]	; 0x48
        break;
   1e81a:	4770      	bx	lr
        STATS_INC(ble_att_stats, read_type_rsp_tx);
   1e81c:	4a3c      	ldr	r2, [pc, #240]	; (1e910 <ble_att_inc_tx_stat+0x1f4>)
   1e81e:	6d13      	ldr	r3, [r2, #80]	; 0x50
   1e820:	3301      	adds	r3, #1
   1e822:	6513      	str	r3, [r2, #80]	; 0x50
        break;
   1e824:	4770      	bx	lr
        STATS_INC(ble_att_stats, read_req_tx);
   1e826:	4a3a      	ldr	r2, [pc, #232]	; (1e910 <ble_att_inc_tx_stat+0x1f4>)
   1e828:	6d93      	ldr	r3, [r2, #88]	; 0x58
   1e82a:	3301      	adds	r3, #1
   1e82c:	6593      	str	r3, [r2, #88]	; 0x58
        break;
   1e82e:	4770      	bx	lr
        STATS_INC(ble_att_stats, read_rsp_tx);
   1e830:	4a37      	ldr	r2, [pc, #220]	; (1e910 <ble_att_inc_tx_stat+0x1f4>)
   1e832:	6e13      	ldr	r3, [r2, #96]	; 0x60
   1e834:	3301      	adds	r3, #1
   1e836:	6613      	str	r3, [r2, #96]	; 0x60
        break;
   1e838:	4770      	bx	lr
        STATS_INC(ble_att_stats, read_blob_req_tx);
   1e83a:	4a35      	ldr	r2, [pc, #212]	; (1e910 <ble_att_inc_tx_stat+0x1f4>)
   1e83c:	6e93      	ldr	r3, [r2, #104]	; 0x68
   1e83e:	3301      	adds	r3, #1
   1e840:	6693      	str	r3, [r2, #104]	; 0x68
        break;
   1e842:	4770      	bx	lr
        STATS_INC(ble_att_stats, read_blob_rsp_tx);
   1e844:	4a32      	ldr	r2, [pc, #200]	; (1e910 <ble_att_inc_tx_stat+0x1f4>)
   1e846:	6f13      	ldr	r3, [r2, #112]	; 0x70
   1e848:	3301      	adds	r3, #1
   1e84a:	6713      	str	r3, [r2, #112]	; 0x70
        break;
   1e84c:	4770      	bx	lr
        STATS_INC(ble_att_stats, read_mult_req_tx);
   1e84e:	4a30      	ldr	r2, [pc, #192]	; (1e910 <ble_att_inc_tx_stat+0x1f4>)
   1e850:	6f93      	ldr	r3, [r2, #120]	; 0x78
   1e852:	3301      	adds	r3, #1
   1e854:	6793      	str	r3, [r2, #120]	; 0x78
        break;
   1e856:	4770      	bx	lr
        STATS_INC(ble_att_stats, read_mult_rsp_tx);
   1e858:	4a2d      	ldr	r2, [pc, #180]	; (1e910 <ble_att_inc_tx_stat+0x1f4>)
   1e85a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
   1e85e:	3301      	adds	r3, #1
   1e860:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
        break;
   1e864:	4770      	bx	lr
        STATS_INC(ble_att_stats, read_group_type_req_tx);
   1e866:	4a2a      	ldr	r2, [pc, #168]	; (1e910 <ble_att_inc_tx_stat+0x1f4>)
   1e868:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
   1e86c:	3301      	adds	r3, #1
   1e86e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
        break;
   1e872:	4770      	bx	lr
        STATS_INC(ble_att_stats, read_group_type_rsp_tx);
   1e874:	4a26      	ldr	r2, [pc, #152]	; (1e910 <ble_att_inc_tx_stat+0x1f4>)
   1e876:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
   1e87a:	3301      	adds	r3, #1
   1e87c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        break;
   1e880:	4770      	bx	lr
        STATS_INC(ble_att_stats, write_req_tx);
   1e882:	4a23      	ldr	r2, [pc, #140]	; (1e910 <ble_att_inc_tx_stat+0x1f4>)
   1e884:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
   1e888:	3301      	adds	r3, #1
   1e88a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
        break;
   1e88e:	4770      	bx	lr
        STATS_INC(ble_att_stats, write_rsp_tx);
   1e890:	4a1f      	ldr	r2, [pc, #124]	; (1e910 <ble_att_inc_tx_stat+0x1f4>)
   1e892:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
   1e896:	3301      	adds	r3, #1
   1e898:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
        break;
   1e89c:	4770      	bx	lr
        STATS_INC(ble_att_stats, prep_write_req_tx);
   1e89e:	4a1c      	ldr	r2, [pc, #112]	; (1e910 <ble_att_inc_tx_stat+0x1f4>)
   1e8a0:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
   1e8a4:	3301      	adds	r3, #1
   1e8a6:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
        break;
   1e8aa:	4770      	bx	lr
        STATS_INC(ble_att_stats, prep_write_rsp_tx);
   1e8ac:	4a18      	ldr	r2, [pc, #96]	; (1e910 <ble_att_inc_tx_stat+0x1f4>)
   1e8ae:	f8d2 30b0 	ldr.w	r3, [r2, #176]	; 0xb0
   1e8b2:	3301      	adds	r3, #1
   1e8b4:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
        break;
   1e8b8:	4770      	bx	lr
        STATS_INC(ble_att_stats, exec_write_req_tx);
   1e8ba:	4a15      	ldr	r2, [pc, #84]	; (1e910 <ble_att_inc_tx_stat+0x1f4>)
   1e8bc:	f8d2 30b8 	ldr.w	r3, [r2, #184]	; 0xb8
   1e8c0:	3301      	adds	r3, #1
   1e8c2:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
        break;
   1e8c6:	4770      	bx	lr
        STATS_INC(ble_att_stats, exec_write_rsp_tx);
   1e8c8:	4a11      	ldr	r2, [pc, #68]	; (1e910 <ble_att_inc_tx_stat+0x1f4>)
   1e8ca:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
   1e8ce:	3301      	adds	r3, #1
   1e8d0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
        break;
   1e8d4:	4770      	bx	lr
        STATS_INC(ble_att_stats, notify_req_tx);
   1e8d6:	4a0e      	ldr	r2, [pc, #56]	; (1e910 <ble_att_inc_tx_stat+0x1f4>)
   1e8d8:	f8d2 30c8 	ldr.w	r3, [r2, #200]	; 0xc8
   1e8dc:	3301      	adds	r3, #1
   1e8de:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
        break;
   1e8e2:	4770      	bx	lr
        STATS_INC(ble_att_stats, indicate_req_tx);
   1e8e4:	4a0a      	ldr	r2, [pc, #40]	; (1e910 <ble_att_inc_tx_stat+0x1f4>)
   1e8e6:	f8d2 30d0 	ldr.w	r3, [r2, #208]	; 0xd0
   1e8ea:	3301      	adds	r3, #1
   1e8ec:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
        break;
   1e8f0:	4770      	bx	lr
        STATS_INC(ble_att_stats, indicate_rsp_tx);
   1e8f2:	4a07      	ldr	r2, [pc, #28]	; (1e910 <ble_att_inc_tx_stat+0x1f4>)
   1e8f4:	f8d2 30d8 	ldr.w	r3, [r2, #216]	; 0xd8
   1e8f8:	3301      	adds	r3, #1
   1e8fa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
        break;
   1e8fe:	4770      	bx	lr
        STATS_INC(ble_att_stats, write_cmd_tx);
   1e900:	4a03      	ldr	r2, [pc, #12]	; (1e910 <ble_att_inc_tx_stat+0x1f4>)
   1e902:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   1e906:	3301      	adds	r3, #1
   1e908:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
}
   1e90c:	4770      	bx	lr
   1e90e:	bf00      	nop
   1e910:	20003e80 	.word	0x20003e80

0001e914 <ble_att_set_peer_mtu>:
    if (peer_mtu < BLE_ATT_MTU_DFLT) {
   1e914:	2916      	cmp	r1, #22
   1e916:	d800      	bhi.n	1e91a <ble_att_set_peer_mtu+0x6>
        peer_mtu = BLE_ATT_MTU_DFLT;
   1e918:	2117      	movs	r1, #23
    chan->peer_mtu = peer_mtu;
   1e91a:	8181      	strh	r1, [r0, #12]
}
   1e91c:	4770      	bx	lr

0001e91e <ble_att_chan_mtu>:
{
   1e91e:	b510      	push	{r4, lr}
   1e920:	4604      	mov	r4, r0
    if (!(ble_l2cap_is_mtu_req_sent(chan)) ||
   1e922:	f007 fa19 	bl	25d58 <ble_l2cap_is_mtu_req_sent>
   1e926:	b130      	cbz	r0, 1e936 <ble_att_chan_mtu+0x18>
        chan->peer_mtu == 0) {
   1e928:	89a0      	ldrh	r0, [r4, #12]
    if (!(ble_l2cap_is_mtu_req_sent(chan)) ||
   1e92a:	b130      	cbz	r0, 1e93a <ble_att_chan_mtu+0x1c>
        mtu = min(chan->my_mtu, chan->peer_mtu);
   1e92c:	8963      	ldrh	r3, [r4, #10]
   1e92e:	4298      	cmp	r0, r3
   1e930:	bf28      	it	cs
   1e932:	4618      	movcs	r0, r3
}
   1e934:	bd10      	pop	{r4, pc}
        mtu = BLE_ATT_MTU_DFLT;
   1e936:	2017      	movs	r0, #23
   1e938:	e7fc      	b.n	1e934 <ble_att_chan_mtu+0x16>
   1e93a:	2017      	movs	r0, #23
   1e93c:	e7fa      	b.n	1e934 <ble_att_chan_mtu+0x16>

0001e93e <ble_att_truncate_to_mtu>:
{
   1e93e:	b510      	push	{r4, lr}
   1e940:	460c      	mov	r4, r1
    mtu = ble_att_chan_mtu(att_chan);
   1e942:	f7ff ffec 	bl	1e91e <ble_att_chan_mtu>
    extra_len = OS_MBUF_PKTLEN(txom) - mtu;
   1e946:	8a21      	ldrh	r1, [r4, #16]
   1e948:	1a09      	subs	r1, r1, r0
    if (extra_len > 0) {
   1e94a:	2900      	cmp	r1, #0
   1e94c:	dd03      	ble.n	1e956 <ble_att_truncate_to_mtu+0x18>
        os_mbuf_adj(txom, -extra_len);
   1e94e:	4249      	negs	r1, r1
   1e950:	4620      	mov	r0, r4
   1e952:	f7ee fe3d 	bl	d5d0 <os_mbuf_adj>
}
   1e956:	bd10      	pop	{r4, pc}

0001e958 <ble_att_mtu>:
{
   1e958:	b510      	push	{r4, lr}
   1e95a:	b082      	sub	sp, #8
   1e95c:	4604      	mov	r4, r0
    ble_hs_lock();
   1e95e:	f005 f88f 	bl	23a80 <ble_hs_lock>
    rc = ble_att_conn_chan_find(conn_handle, &conn, &chan);
   1e962:	aa01      	add	r2, sp, #4
   1e964:	4669      	mov	r1, sp
   1e966:	4620      	mov	r0, r4
   1e968:	f7ff fed0 	bl	1e70c <ble_att_conn_chan_find>
    if (rc == 0) {
   1e96c:	b128      	cbz	r0, 1e97a <ble_att_mtu+0x22>
        mtu = 0;
   1e96e:	2400      	movs	r4, #0
    ble_hs_unlock();
   1e970:	f005 f88a 	bl	23a88 <ble_hs_unlock>
}
   1e974:	4620      	mov	r0, r4
   1e976:	b002      	add	sp, #8
   1e978:	bd10      	pop	{r4, pc}
        mtu = ble_att_chan_mtu(chan);
   1e97a:	9801      	ldr	r0, [sp, #4]
   1e97c:	f7ff ffcf 	bl	1e91e <ble_att_chan_mtu>
   1e980:	4604      	mov	r4, r0
   1e982:	e7f5      	b.n	1e970 <ble_att_mtu+0x18>

0001e984 <ble_att_create_chan>:
    return 0;
}

struct ble_l2cap_chan *
ble_att_create_chan(uint16_t conn_handle)
{
   1e984:	b508      	push	{r3, lr}
    struct ble_l2cap_chan *chan;

    chan = ble_l2cap_chan_alloc(conn_handle);
   1e986:	f007 f9b9 	bl	25cfc <ble_l2cap_chan_alloc>
    if (chan == NULL) {
   1e98a:	4603      	mov	r3, r0
   1e98c:	b138      	cbz	r0, 1e99e <ble_att_create_chan+0x1a>
        return NULL;
    }

    chan->scid = BLE_L2CAP_CID_ATT;
   1e98e:	2204      	movs	r2, #4
   1e990:	8102      	strh	r2, [r0, #8]
    chan->dcid = BLE_L2CAP_CID_ATT;
   1e992:	80c2      	strh	r2, [r0, #6]
    chan->my_mtu = ble_att_preferred_mtu_val;
   1e994:	4a03      	ldr	r2, [pc, #12]	; (1e9a4 <ble_att_create_chan+0x20>)
   1e996:	8812      	ldrh	r2, [r2, #0]
   1e998:	8142      	strh	r2, [r0, #10]
    chan->rx_fn = ble_att_rx;
   1e99a:	4a03      	ldr	r2, [pc, #12]	; (1e9a8 <ble_att_create_chan+0x24>)
   1e99c:	6182      	str	r2, [r0, #24]

    return chan;
}
   1e99e:	4618      	mov	r0, r3
   1e9a0:	bd08      	pop	{r3, pc}
   1e9a2:	bf00      	nop
   1e9a4:	2000234c 	.word	0x2000234c
   1e9a8:	0001e68b 	.word	0x0001e68b

0001e9ac <ble_att_init>:

int
ble_att_init(void)
{
   1e9ac:	b500      	push	{lr}
   1e9ae:	b083      	sub	sp, #12
    int rc;

    ble_att_preferred_mtu_val = MYNEWT_VAL(BLE_ATT_PREFERRED_MTU);
   1e9b0:	4b0a      	ldr	r3, [pc, #40]	; (1e9dc <ble_att_init+0x30>)
   1e9b2:	f44f 7280 	mov.w	r2, #256	; 0x100
   1e9b6:	801a      	strh	r2, [r3, #0]

    rc = stats_init_and_reg(
   1e9b8:	4b09      	ldr	r3, [pc, #36]	; (1e9e0 <ble_att_init+0x34>)
   1e9ba:	9301      	str	r3, [sp, #4]
   1e9bc:	2300      	movs	r3, #0
   1e9be:	9300      	str	r3, [sp, #0]
   1e9c0:	2236      	movs	r2, #54	; 0x36
   1e9c2:	2104      	movs	r1, #4
   1e9c4:	4807      	ldr	r0, [pc, #28]	; (1e9e4 <ble_att_init+0x38>)
   1e9c6:	f7f3 fc09 	bl	121dc <stats_init_and_reg>
        STATS_HDR(ble_att_stats), STATS_SIZE_INIT_PARMS(ble_att_stats,
        STATS_SIZE_32), STATS_NAME_INIT_PARMS(ble_att_stats), "ble_att");
    if (rc != 0) {
   1e9ca:	4603      	mov	r3, r0
   1e9cc:	b918      	cbnz	r0, 1e9d6 <ble_att_init+0x2a>
        return BLE_HS_EOS;
    }

    return 0;
}
   1e9ce:	4618      	mov	r0, r3
   1e9d0:	b003      	add	sp, #12
   1e9d2:	f85d fb04 	ldr.w	pc, [sp], #4
        return BLE_HS_EOS;
   1e9d6:	230b      	movs	r3, #11
   1e9d8:	e7f9      	b.n	1e9ce <ble_att_init+0x22>
   1e9da:	bf00      	nop
   1e9dc:	2000234c 	.word	0x2000234c
   1e9e0:	00031e7c 	.word	0x00031e7c
   1e9e4:	20003e80 	.word	0x20003e80

0001e9e8 <ble_att_clt_rx_error>:
 * $error response                                                           *
 *****************************************************************************/

int
ble_att_clt_rx_error(uint16_t conn_handle, struct os_mbuf **rxom)
{
   1e9e8:	b570      	push	{r4, r5, r6, lr}
   1e9ea:	4606      	mov	r6, r0
   1e9ec:	460c      	mov	r4, r1
    struct ble_att_error_rsp *rsp;
    int rc;

    rc = ble_hs_mbuf_pullup_base(rxom, sizeof(*rsp));
   1e9ee:	2104      	movs	r1, #4
   1e9f0:	4620      	mov	r0, r4
   1e9f2:	f006 fe2e 	bl	25652 <ble_hs_mbuf_pullup_base>
    if (rc != 0) {
   1e9f6:	4605      	mov	r5, r0
   1e9f8:	b108      	cbz	r0, 1e9fe <ble_att_clt_rx_error+0x16>

    ble_gattc_rx_err(conn_handle, le16toh(rsp->baep_handle),
                     le16toh(rsp->baep_error_code));

    return 0;
}
   1e9fa:	4628      	mov	r0, r5
   1e9fc:	bd70      	pop	{r4, r5, r6, pc}
    rsp = (struct ble_att_error_rsp *)(*rxom)->om_data;
   1e9fe:	6823      	ldr	r3, [r4, #0]
   1ea00:	681b      	ldr	r3, [r3, #0]
    ble_gattc_rx_err(conn_handle, le16toh(rsp->baep_handle),
   1ea02:	78da      	ldrb	r2, [r3, #3]
   1ea04:	f8b3 1001 	ldrh.w	r1, [r3, #1]
   1ea08:	4630      	mov	r0, r6
   1ea0a:	f003 febe 	bl	2278a <ble_gattc_rx_err>
    return 0;
   1ea0e:	e7f4      	b.n	1e9fa <ble_att_clt_rx_error+0x12>

0001ea10 <ble_att_clt_rx_mtu>:
    return rc;
}

int
ble_att_clt_rx_mtu(uint16_t conn_handle, struct os_mbuf **rxom)
{
   1ea10:	b570      	push	{r4, r5, r6, lr}
   1ea12:	b082      	sub	sp, #8
   1ea14:	4605      	mov	r5, r0
   1ea16:	460e      	mov	r6, r1
    uint16_t mtu;
    int rc;

    mtu = 0;

    rc = ble_hs_mbuf_pullup_base(rxom, sizeof(*cmd));
   1ea18:	2102      	movs	r1, #2
   1ea1a:	4630      	mov	r0, r6
   1ea1c:	f006 fe19 	bl	25652 <ble_hs_mbuf_pullup_base>
    if (rc == 0) {
   1ea20:	b148      	cbz	r0, 1ea36 <ble_att_clt_rx_mtu+0x26>
   1ea22:	4604      	mov	r4, r0
    mtu = 0;
   1ea24:	2600      	movs	r6, #0
        if (rc == 0) {
            ble_gap_mtu_event(conn_handle, BLE_L2CAP_CID_ATT, mtu);
        }
    }

    ble_gattc_rx_mtu(conn_handle, rc, mtu);
   1ea26:	4632      	mov	r2, r6
   1ea28:	4621      	mov	r1, r4
   1ea2a:	4628      	mov	r0, r5
   1ea2c:	f003 fec3 	bl	227b6 <ble_gattc_rx_mtu>
    return rc;
}
   1ea30:	4620      	mov	r0, r4
   1ea32:	b002      	add	sp, #8
   1ea34:	bd70      	pop	{r4, r5, r6, pc}
        cmd = (struct ble_att_mtu_cmd *)(*rxom)->om_data;
   1ea36:	6833      	ldr	r3, [r6, #0]
   1ea38:	681e      	ldr	r6, [r3, #0]
        ble_hs_lock();
   1ea3a:	f005 f821 	bl	23a80 <ble_hs_lock>
        rc = ble_att_conn_chan_find(conn_handle, NULL, &chan);
   1ea3e:	aa01      	add	r2, sp, #4
   1ea40:	2100      	movs	r1, #0
   1ea42:	4628      	mov	r0, r5
   1ea44:	f7ff fe62 	bl	1e70c <ble_att_conn_chan_find>
        if (rc == 0) {
   1ea48:	4604      	mov	r4, r0
   1ea4a:	b150      	cbz	r0, 1ea62 <ble_att_clt_rx_mtu+0x52>
    mtu = 0;
   1ea4c:	2600      	movs	r6, #0
        ble_hs_unlock();
   1ea4e:	f005 f81b 	bl	23a88 <ble_hs_unlock>
        if (rc == 0) {
   1ea52:	2c00      	cmp	r4, #0
   1ea54:	d1e7      	bne.n	1ea26 <ble_att_clt_rx_mtu+0x16>
            ble_gap_mtu_event(conn_handle, BLE_L2CAP_CID_ATT, mtu);
   1ea56:	4632      	mov	r2, r6
   1ea58:	2104      	movs	r1, #4
   1ea5a:	4628      	mov	r0, r5
   1ea5c:	f002 fe6c 	bl	21738 <ble_gap_mtu_event>
   1ea60:	e7e1      	b.n	1ea26 <ble_att_clt_rx_mtu+0x16>
            ble_att_set_peer_mtu(chan, le16toh(cmd->bamc_mtu));
   1ea62:	8831      	ldrh	r1, [r6, #0]
   1ea64:	9801      	ldr	r0, [sp, #4]
   1ea66:	f7ff ff55 	bl	1e914 <ble_att_set_peer_mtu>
            mtu = ble_att_chan_mtu(chan);
   1ea6a:	9801      	ldr	r0, [sp, #4]
   1ea6c:	f7ff ff57 	bl	1e91e <ble_att_chan_mtu>
   1ea70:	4606      	mov	r6, r0
   1ea72:	e7ec      	b.n	1ea4e <ble_att_clt_rx_mtu+0x3e>

0001ea74 <ble_att_clt_tx_find_info>:

    req->bafq_start_handle = htole16(start_handle);
    req->bafq_end_handle = htole16(end_handle);

    return ble_att_tx(conn_handle, txom);
}
   1ea74:	2008      	movs	r0, #8
   1ea76:	4770      	bx	lr

0001ea78 <ble_att_clt_rx_find_info>:

done:
    /* Notify GATT that response processing is done. */
    ble_gattc_rx_find_info_complete(conn_handle, rc);
    return rc;
}
   1ea78:	2008      	movs	r0, #8
   1ea7a:	4770      	bx	lr

0001ea7c <ble_att_clt_tx_find_type_value>:
    req->bavq_end_handle = htole16(end_handle);
    req->bavq_attr_type = htole16(attribute_type);
    memcpy(req->bavq_value, attribute_value, value_len);

    return ble_att_tx(conn_handle, txom);
}
   1ea7c:	2008      	movs	r0, #8
   1ea7e:	4770      	bx	lr

0001ea80 <ble_att_clt_rx_find_type_value>:

    /* Notify GATT client that the full response has been parsed. */
    ble_gattc_rx_find_type_value_complete(conn_handle, rc);

    return 0;
}
   1ea80:	2008      	movs	r0, #8
   1ea82:	4770      	bx	lr

0001ea84 <ble_att_clt_tx_read_type>:
    req->batq_end_handle = htole16(end_handle);

    ble_uuid_flat(uuid, req->uuid);

    return ble_att_tx(conn_handle, txom);
}
   1ea84:	2008      	movs	r0, #8
   1ea86:	4770      	bx	lr

0001ea88 <ble_att_clt_rx_read_type>:
done:
    /* Notify GATT that the response is done being parsed. */
    ble_gattc_rx_read_type_complete(conn_handle, rc);
    return rc;

}
   1ea88:	2008      	movs	r0, #8
   1ea8a:	4770      	bx	lr

0001ea8c <ble_att_clt_tx_read>:
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   1ea8c:	2008      	movs	r0, #8
   1ea8e:	4770      	bx	lr

0001ea90 <ble_att_clt_rx_read>:
#endif

    /* Pass the Attribute Value field to GATT. */
    ble_gattc_rx_read_rsp(conn_handle, 0, rxom);
    return 0;
}
   1ea90:	2008      	movs	r0, #8
   1ea92:	4770      	bx	lr

0001ea94 <ble_att_clt_tx_read_blob>:
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   1ea94:	2008      	movs	r0, #8
   1ea96:	4770      	bx	lr

0001ea98 <ble_att_clt_rx_read_blob>:
#endif

    /* Pass the Attribute Value field to GATT. */
    ble_gattc_rx_read_blob_rsp(conn_handle, 0, rxom);
    return 0;
}
   1ea98:	2008      	movs	r0, #8
   1ea9a:	4770      	bx	lr

0001ea9c <ble_att_clt_rx_read_mult>:
#endif

    /* Pass the Attribute Value field to GATT. */
    ble_gattc_rx_read_mult_rsp(conn_handle, 0, rxom);
    return 0;
}
   1ea9c:	2008      	movs	r0, #8
   1ea9e:	4770      	bx	lr

0001eaa0 <ble_att_clt_tx_read_group_type>:
    req->bagq_start_handle = htole16(start_handle);
    req->bagq_end_handle = htole16(end_handle);
    ble_uuid_flat(uuid, req->uuid);

    return ble_att_tx(conn_handle, txom);
}
   1eaa0:	2008      	movs	r0, #8
   1eaa2:	4770      	bx	lr

0001eaa4 <ble_att_clt_rx_read_group_type>:

done:
    /* Notify GATT that the response is done being parsed. */
    ble_gattc_rx_read_group_type_complete(conn_handle, rc);
    return rc;
}
   1eaa4:	2008      	movs	r0, #8
   1eaa6:	4770      	bx	lr

0001eaa8 <ble_att_clt_rx_write>:
#endif

    /* No payload. */
    ble_gattc_rx_write_rsp(conn_handle);
    return 0;
}
   1eaa8:	2008      	movs	r0, #8
   1eaaa:	4770      	bx	lr

0001eaac <ble_att_clt_tx_prep_write>:
    return ble_att_tx(conn_handle, txom2);

err:
    os_mbuf_free_chain(txom);
    return rc;
}
   1eaac:	2008      	movs	r0, #8
   1eaae:	4770      	bx	lr

0001eab0 <ble_att_clt_rx_prep_write>:

done:
    /* Notify GATT client that the full response has been parsed. */
    ble_gattc_rx_prep_write_rsp(conn_handle, rc, handle, offset, rxom);
    return rc;
}
   1eab0:	2008      	movs	r0, #8
   1eab2:	4770      	bx	lr

0001eab4 <ble_att_clt_tx_exec_write>:
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   1eab4:	2008      	movs	r0, #8
   1eab6:	4770      	bx	lr

0001eab8 <ble_att_clt_rx_exec_write>:
    return BLE_HS_ENOTSUP;
#endif

    ble_gattc_rx_exec_write_rsp(conn_handle, 0);
    return 0;
}
   1eab8:	2008      	movs	r0, #8
   1eaba:	4770      	bx	lr

0001eabc <ble_att_clt_tx_notify>:
 *****************************************************************************/

int
ble_att_clt_tx_notify(uint16_t conn_handle, uint16_t handle,
                      struct os_mbuf *txom)
{
   1eabc:	b570      	push	{r4, r5, r6, lr}
   1eabe:	b082      	sub	sp, #8
   1eac0:	4615      	mov	r5, r2

    struct ble_att_notify_req *req;
    struct os_mbuf *txom2;
    int rc;

    if (handle == 0) {
   1eac2:	b1a1      	cbz	r1, 1eaee <ble_att_clt_tx_notify+0x32>
   1eac4:	4604      	mov	r4, r0
   1eac6:	460e      	mov	r6, r1
        rc = BLE_HS_EINVAL;
        goto err;
    }

    req = ble_att_cmd_get(BLE_ATT_OP_NOTIFY_REQ, sizeof(*req), &txom2);
   1eac8:	aa01      	add	r2, sp, #4
   1eaca:	2102      	movs	r1, #2
   1eacc:	201b      	movs	r0, #27
   1eace:	f000 f84d 	bl	1eb6c <ble_att_cmd_get>
    if (req == NULL) {
   1ead2:	b908      	cbnz	r0, 1ead8 <ble_att_clt_tx_notify+0x1c>
        rc = BLE_HS_ENOMEM;
   1ead4:	2406      	movs	r4, #6
   1ead6:	e00b      	b.n	1eaf0 <ble_att_clt_tx_notify+0x34>
        goto err;
    }

    req->banq_handle = htole16(handle);
   1ead8:	8006      	strh	r6, [r0, #0]
    os_mbuf_concat(txom2, txom);
   1eada:	4629      	mov	r1, r5
   1eadc:	9801      	ldr	r0, [sp, #4]
   1eade:	f7ee fead 	bl	d83c <os_mbuf_concat>

    return ble_att_tx(conn_handle, txom2);
   1eae2:	9901      	ldr	r1, [sp, #4]
   1eae4:	4620      	mov	r0, r4
   1eae6:	f000 f851 	bl	1eb8c <ble_att_tx>
   1eaea:	4604      	mov	r4, r0
   1eaec:	e003      	b.n	1eaf6 <ble_att_clt_tx_notify+0x3a>
        rc = BLE_HS_EINVAL;
   1eaee:	2403      	movs	r4, #3

err:
    os_mbuf_free_chain(txom);
   1eaf0:	4628      	mov	r0, r5
   1eaf2:	f7ee fc95 	bl	d420 <os_mbuf_free_chain>
    return rc;
}
   1eaf6:	4620      	mov	r0, r4
   1eaf8:	b002      	add	sp, #8
   1eafa:	bd70      	pop	{r4, r5, r6, pc}

0001eafc <ble_att_clt_tx_indicate>:
 *****************************************************************************/

int
ble_att_clt_tx_indicate(uint16_t conn_handle, uint16_t handle,
                        struct os_mbuf *txom)
{
   1eafc:	b570      	push	{r4, r5, r6, lr}
   1eafe:	b082      	sub	sp, #8
   1eb00:	4615      	mov	r5, r2

    struct ble_att_indicate_req *req;
    struct os_mbuf *txom2;
    int rc;

    if (handle == 0) {
   1eb02:	b1a1      	cbz	r1, 1eb2e <ble_att_clt_tx_indicate+0x32>
   1eb04:	4604      	mov	r4, r0
   1eb06:	460e      	mov	r6, r1
        rc = BLE_HS_EINVAL;
        goto err;
    }

    req = ble_att_cmd_get(BLE_ATT_OP_INDICATE_REQ, sizeof(*req), &txom2);
   1eb08:	aa01      	add	r2, sp, #4
   1eb0a:	2102      	movs	r1, #2
   1eb0c:	201d      	movs	r0, #29
   1eb0e:	f000 f82d 	bl	1eb6c <ble_att_cmd_get>
    if (req == NULL) {
   1eb12:	b908      	cbnz	r0, 1eb18 <ble_att_clt_tx_indicate+0x1c>
        rc = BLE_HS_ENOMEM;
   1eb14:	2406      	movs	r4, #6
   1eb16:	e00b      	b.n	1eb30 <ble_att_clt_tx_indicate+0x34>
        goto err;
    }

    req->baiq_handle = htole16(handle);
   1eb18:	8006      	strh	r6, [r0, #0]
    os_mbuf_concat(txom2, txom);
   1eb1a:	4629      	mov	r1, r5
   1eb1c:	9801      	ldr	r0, [sp, #4]
   1eb1e:	f7ee fe8d 	bl	d83c <os_mbuf_concat>

    return ble_att_tx(conn_handle, txom2);
   1eb22:	9901      	ldr	r1, [sp, #4]
   1eb24:	4620      	mov	r0, r4
   1eb26:	f000 f831 	bl	1eb8c <ble_att_tx>
   1eb2a:	4604      	mov	r4, r0
   1eb2c:	e003      	b.n	1eb36 <ble_att_clt_tx_indicate+0x3a>
        rc = BLE_HS_EINVAL;
   1eb2e:	2403      	movs	r4, #3

err:
    os_mbuf_free_chain(txom);
   1eb30:	4628      	mov	r0, r5
   1eb32:	f7ee fc75 	bl	d420 <os_mbuf_free_chain>
    return rc;
}
   1eb36:	4620      	mov	r0, r4
   1eb38:	b002      	add	sp, #8
   1eb3a:	bd70      	pop	{r4, r5, r6, pc}

0001eb3c <ble_att_clt_rx_indicate>:

int
ble_att_clt_rx_indicate(uint16_t conn_handle, struct os_mbuf **rxom)
{
   1eb3c:	b508      	push	{r3, lr}
#if !NIMBLE_BLE_ATT_CLT_INDICATE
    return BLE_HS_ENOTSUP;
#endif

    /* No payload. */
    ble_gattc_rx_indicate_rsp(conn_handle);
   1eb3e:	f003 fe4c 	bl	227da <ble_gattc_rx_indicate_rsp>
    return 0;
}
   1eb42:	2000      	movs	r0, #0
   1eb44:	bd08      	pop	{r3, pc}

0001eb46 <ble_att_cmd_prepare>:
#include "host/ble_uuid.h"
#include "ble_hs_priv.h"

void *
ble_att_cmd_prepare(uint8_t opcode, size_t len, struct os_mbuf *txom)
{
   1eb46:	b570      	push	{r4, r5, r6, lr}
   1eb48:	4606      	mov	r6, r0
   1eb4a:	4615      	mov	r5, r2
    struct ble_att_hdr *hdr;

    if (os_mbuf_extend(txom, sizeof(*hdr) + len) == NULL) {
   1eb4c:	3101      	adds	r1, #1
   1eb4e:	b289      	uxth	r1, r1
   1eb50:	4610      	mov	r0, r2
   1eb52:	f7ee fe95 	bl	d880 <os_mbuf_extend>
   1eb56:	b120      	cbz	r0, 1eb62 <ble_att_cmd_prepare+0x1c>
        return NULL;
    }

    hdr = (struct ble_att_hdr *)(txom)->om_data;

    hdr->opcode = opcode;
   1eb58:	682c      	ldr	r4, [r5, #0]
   1eb5a:	f804 6b01 	strb.w	r6, [r4], #1

    return hdr->data;
}
   1eb5e:	4620      	mov	r0, r4
   1eb60:	bd70      	pop	{r4, r5, r6, pc}
   1eb62:	4604      	mov	r4, r0
        os_mbuf_free_chain(txom);
   1eb64:	4628      	mov	r0, r5
   1eb66:	f7ee fc5b 	bl	d420 <os_mbuf_free_chain>
        return NULL;
   1eb6a:	e7f8      	b.n	1eb5e <ble_att_cmd_prepare+0x18>

0001eb6c <ble_att_cmd_get>:

void *
ble_att_cmd_get(uint8_t opcode, size_t len, struct os_mbuf **txom)
{
   1eb6c:	b570      	push	{r4, r5, r6, lr}
   1eb6e:	4605      	mov	r5, r0
   1eb70:	460e      	mov	r6, r1
   1eb72:	4614      	mov	r4, r2
    *txom = ble_hs_mbuf_l2cap_pkt();
   1eb74:	f006 fd4c 	bl	25610 <ble_hs_mbuf_l2cap_pkt>
   1eb78:	6020      	str	r0, [r4, #0]
    if (*txom == NULL) {
   1eb7a:	b128      	cbz	r0, 1eb88 <ble_att_cmd_get+0x1c>
        return NULL;
    }

    return ble_att_cmd_prepare(opcode, len, *txom);
   1eb7c:	4602      	mov	r2, r0
   1eb7e:	4631      	mov	r1, r6
   1eb80:	4628      	mov	r0, r5
   1eb82:	f7ff ffe0 	bl	1eb46 <ble_att_cmd_prepare>
}
   1eb86:	bd70      	pop	{r4, r5, r6, pc}
        return NULL;
   1eb88:	2000      	movs	r0, #0
   1eb8a:	e7fc      	b.n	1eb86 <ble_att_cmd_get+0x1a>

0001eb8c <ble_att_tx>:

int
ble_att_tx(uint16_t conn_handle, struct os_mbuf *txom)
{
   1eb8c:	b530      	push	{r4, r5, lr}
   1eb8e:	b083      	sub	sp, #12
   1eb90:	4605      	mov	r5, r0
   1eb92:	460c      	mov	r4, r1
    struct ble_l2cap_chan *chan;
    struct ble_hs_conn *conn;
    int rc;

    BLE_HS_DBG_ASSERT_EVAL(txom->om_len >= 1);
    ble_att_inc_tx_stat(txom->om_data[0]);
   1eb94:	680b      	ldr	r3, [r1, #0]
   1eb96:	7818      	ldrb	r0, [r3, #0]
   1eb98:	f7ff fdc0 	bl	1e71c <ble_att_inc_tx_stat>

    ble_hs_lock();
   1eb9c:	f004 ff70 	bl	23a80 <ble_hs_lock>

    ble_hs_misc_conn_chan_find_reqd(conn_handle, BLE_L2CAP_CID_ATT, &conn,
   1eba0:	ab01      	add	r3, sp, #4
   1eba2:	466a      	mov	r2, sp
   1eba4:	2104      	movs	r1, #4
   1eba6:	4628      	mov	r0, r5
   1eba8:	f006 fd98 	bl	256dc <ble_hs_misc_conn_chan_find_reqd>
                                    &chan);
    if (chan == NULL) {
   1ebac:	9801      	ldr	r0, [sp, #4]
   1ebae:	b168      	cbz	r0, 1ebcc <ble_att_tx+0x40>
        os_mbuf_free_chain(txom);
        rc = BLE_HS_ENOTCONN;
    } else {
        ble_att_truncate_to_mtu(chan, txom);
   1ebb0:	4621      	mov	r1, r4
   1ebb2:	f7ff fec4 	bl	1e93e <ble_att_truncate_to_mtu>
        rc = ble_l2cap_tx(conn, chan, txom);
   1ebb6:	4622      	mov	r2, r4
   1ebb8:	9901      	ldr	r1, [sp, #4]
   1ebba:	9800      	ldr	r0, [sp, #0]
   1ebbc:	f007 f991 	bl	25ee2 <ble_l2cap_tx>
   1ebc0:	4604      	mov	r4, r0
    }

    ble_hs_unlock();
   1ebc2:	f004 ff61 	bl	23a88 <ble_hs_unlock>

    return rc;
}
   1ebc6:	4620      	mov	r0, r4
   1ebc8:	b003      	add	sp, #12
   1ebca:	bd30      	pop	{r4, r5, pc}
        os_mbuf_free_chain(txom);
   1ebcc:	4620      	mov	r0, r4
   1ebce:	f7ee fc27 	bl	d420 <os_mbuf_free_chain>
        rc = BLE_HS_ENOTCONN;
   1ebd2:	2407      	movs	r4, #7
   1ebd4:	e7f5      	b.n	1ebc2 <ble_att_tx+0x36>
	...

0001ebd8 <ble_att_svr_next_id>:
static uint16_t
ble_att_svr_next_id(void)
{
    /* Rollover is fatal. */
    BLE_HS_DBG_ASSERT(ble_att_svr_id != UINT16_MAX);
    return ++ble_att_svr_id;
   1ebd8:	4b02      	ldr	r3, [pc, #8]	; (1ebe4 <ble_att_svr_next_id+0xc>)
   1ebda:	8818      	ldrh	r0, [r3, #0]
   1ebdc:	3001      	adds	r0, #1
   1ebde:	b280      	uxth	r0, r0
   1ebe0:	8018      	strh	r0, [r3, #0]
}
   1ebe2:	4770      	bx	lr
   1ebe4:	20002378 	.word	0x20002378

0001ebe8 <ble_att_svr_prep_find_prev>:
{
    struct ble_att_prep_entry *entry;
    struct ble_att_prep_entry *prev;

    prev = NULL;
    SLIST_FOREACH(entry, &basc->basc_prep_list, bape_next) {
   1ebe8:	6803      	ldr	r3, [r0, #0]
    prev = NULL;
   1ebea:	2000      	movs	r0, #0
    SLIST_FOREACH(entry, &basc->basc_prep_list, bape_next) {
   1ebec:	b16b      	cbz	r3, 1ec0a <ble_att_svr_prep_find_prev+0x22>
{
   1ebee:	b410      	push	{r4}
   1ebf0:	e002      	b.n	1ebf8 <ble_att_svr_prep_find_prev+0x10>

        if (entry->bape_handle == handle && entry->bape_offset > offset) {
            break;
        }

        prev = entry;
   1ebf2:	4618      	mov	r0, r3
    SLIST_FOREACH(entry, &basc->basc_prep_list, bape_next) {
   1ebf4:	681b      	ldr	r3, [r3, #0]
   1ebf6:	b133      	cbz	r3, 1ec06 <ble_att_svr_prep_find_prev+0x1e>
        if (entry->bape_handle > handle) {
   1ebf8:	889c      	ldrh	r4, [r3, #4]
   1ebfa:	428c      	cmp	r4, r1
   1ebfc:	d803      	bhi.n	1ec06 <ble_att_svr_prep_find_prev+0x1e>
        if (entry->bape_handle == handle && entry->bape_offset > offset) {
   1ebfe:	d1f8      	bne.n	1ebf2 <ble_att_svr_prep_find_prev+0xa>
   1ec00:	88dc      	ldrh	r4, [r3, #6]
   1ec02:	4294      	cmp	r4, r2
   1ec04:	d9f5      	bls.n	1ebf2 <ble_att_svr_prep_find_prev+0xa>
    }

    return prev;
}
   1ec06:	bc10      	pop	{r4}
   1ec08:	4770      	bx	lr
   1ec0a:	4770      	bx	lr

0001ec0c <ble_att_svr_prep_validate>:
    struct ble_att_prep_entry *entry;
    struct ble_att_prep_entry *prev;
    int cur_len;

    prev = NULL;
    SLIST_FOREACH(entry, prep_list, bape_next) {
   1ec0c:	6803      	ldr	r3, [r0, #0]
    prev = NULL;
   1ec0e:	2200      	movs	r2, #0
    SLIST_FOREACH(entry, prep_list, bape_next) {
   1ec10:	b343      	cbz	r3, 1ec64 <ble_att_svr_prep_validate+0x58>
{
   1ec12:	b410      	push	{r4}
   1ec14:	e00b      	b.n	1ec2e <ble_att_svr_prep_validate+0x22>
        if (prev == NULL || prev->bape_handle != entry->bape_handle) {
            /* Ensure attribute write starts at offset 0. */
            if (entry->bape_offset != 0) {
   1ec16:	88da      	ldrh	r2, [r3, #6]
   1ec18:	b9ca      	cbnz	r2, 1ec4e <ble_att_svr_prep_validate+0x42>
                *err_handle = entry->bape_handle;
                return BLE_ATT_ERR_INVALID_OFFSET;
            }
        }

        cur_len = entry->bape_offset + OS_MBUF_PKTLEN(entry->bape_value);
   1ec1a:	88da      	ldrh	r2, [r3, #6]
   1ec1c:	6898      	ldr	r0, [r3, #8]
   1ec1e:	8a00      	ldrh	r0, [r0, #16]
   1ec20:	4402      	add	r2, r0
        if (cur_len > BLE_ATT_ATTR_MAX_LEN) {
   1ec22:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   1ec26:	dc16      	bgt.n	1ec56 <ble_att_svr_prep_validate+0x4a>
            *err_handle = entry->bape_handle;
            return BLE_ATT_ERR_INVALID_ATTR_VALUE_LEN;
        }

        prev = entry;
   1ec28:	461a      	mov	r2, r3
    SLIST_FOREACH(entry, prep_list, bape_next) {
   1ec2a:	681b      	ldr	r3, [r3, #0]
   1ec2c:	b1bb      	cbz	r3, 1ec5e <ble_att_svr_prep_validate+0x52>
        if (prev == NULL || prev->bape_handle != entry->bape_handle) {
   1ec2e:	2a00      	cmp	r2, #0
   1ec30:	d0f1      	beq.n	1ec16 <ble_att_svr_prep_validate+0xa>
   1ec32:	8894      	ldrh	r4, [r2, #4]
   1ec34:	8898      	ldrh	r0, [r3, #4]
   1ec36:	4284      	cmp	r4, r0
   1ec38:	d1ed      	bne.n	1ec16 <ble_att_svr_prep_validate+0xa>
            if (prev->bape_offset + OS_MBUF_PKTLEN(prev->bape_value) !=
   1ec3a:	88d4      	ldrh	r4, [r2, #6]
   1ec3c:	6892      	ldr	r2, [r2, #8]
   1ec3e:	8a12      	ldrh	r2, [r2, #16]
   1ec40:	4422      	add	r2, r4
                entry->bape_offset) {
   1ec42:	88dc      	ldrh	r4, [r3, #6]
            if (prev->bape_offset + OS_MBUF_PKTLEN(prev->bape_value) !=
   1ec44:	42a2      	cmp	r2, r4
   1ec46:	d0e8      	beq.n	1ec1a <ble_att_svr_prep_validate+0xe>
                *err_handle = entry->bape_handle;
   1ec48:	8008      	strh	r0, [r1, #0]
                return BLE_ATT_ERR_INVALID_OFFSET;
   1ec4a:	2007      	movs	r0, #7
   1ec4c:	e008      	b.n	1ec60 <ble_att_svr_prep_validate+0x54>
                *err_handle = entry->bape_handle;
   1ec4e:	889b      	ldrh	r3, [r3, #4]
   1ec50:	800b      	strh	r3, [r1, #0]
                return BLE_ATT_ERR_INVALID_OFFSET;
   1ec52:	2007      	movs	r0, #7
   1ec54:	e004      	b.n	1ec60 <ble_att_svr_prep_validate+0x54>
            *err_handle = entry->bape_handle;
   1ec56:	889b      	ldrh	r3, [r3, #4]
   1ec58:	800b      	strh	r3, [r1, #0]
            return BLE_ATT_ERR_INVALID_ATTR_VALUE_LEN;
   1ec5a:	200d      	movs	r0, #13
   1ec5c:	e000      	b.n	1ec60 <ble_att_svr_prep_validate+0x54>
    }

    return 0;
   1ec5e:	2000      	movs	r0, #0
}
   1ec60:	bc10      	pop	{r4}
   1ec62:	4770      	bx	lr
    return 0;
   1ec64:	2000      	movs	r0, #0
}
   1ec66:	4770      	bx	lr

0001ec68 <ble_att_svr_entry_alloc>:
{
   1ec68:	b508      	push	{r3, lr}
    entry = os_memblock_get(&ble_att_svr_entry_pool);
   1ec6a:	4806      	ldr	r0, [pc, #24]	; (1ec84 <ble_att_svr_entry_alloc+0x1c>)
   1ec6c:	f7ee ffce 	bl	dc0c <os_memblock_get>
    if (entry != NULL) {
   1ec70:	4603      	mov	r3, r0
   1ec72:	b128      	cbz	r0, 1ec80 <ble_att_svr_entry_alloc+0x18>
        memset(entry, 0, sizeof *entry);
   1ec74:	2200      	movs	r2, #0
   1ec76:	6002      	str	r2, [r0, #0]
   1ec78:	6042      	str	r2, [r0, #4]
   1ec7a:	6082      	str	r2, [r0, #8]
   1ec7c:	60c2      	str	r2, [r0, #12]
   1ec7e:	6102      	str	r2, [r0, #16]
}
   1ec80:	4618      	mov	r0, r3
   1ec82:	bd08      	pop	{r3, pc}
   1ec84:	20002354 	.word	0x20002354

0001ec88 <ble_att_svr_get_sec_state>:
{
   1ec88:	b538      	push	{r3, r4, r5, lr}
   1ec8a:	4605      	mov	r5, r0
   1ec8c:	460c      	mov	r4, r1
    ble_hs_lock();
   1ec8e:	f004 fef7 	bl	23a80 <ble_hs_lock>
    conn = ble_hs_conn_find_assert(conn_handle);
   1ec92:	4628      	mov	r0, r5
   1ec94:	f005 fd5c 	bl	24750 <ble_hs_conn_find_assert>
    *out_sec_state = conn->bhc_sec_state;
   1ec98:	6d83      	ldr	r3, [r0, #88]	; 0x58
   1ec9a:	6023      	str	r3, [r4, #0]
    ble_hs_unlock();
   1ec9c:	f004 fef4 	bl	23a88 <ble_hs_unlock>
}
   1eca0:	bd38      	pop	{r3, r4, r5, pc}

0001eca2 <ble_att_svr_check_perms>:
{
   1eca2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1eca6:	b0a6      	sub	sp, #152	; 0x98
    if (is_read) {
   1eca8:	b371      	cbz	r1, 1ed08 <ble_att_svr_check_perms+0x66>
        if (!(entry->ha_flags & BLE_ATT_F_READ)) {
   1ecaa:	7a11      	ldrb	r1, [r2, #8]
   1ecac:	f011 0f01 	tst.w	r1, #1
   1ecb0:	d026      	beq.n	1ed00 <ble_att_svr_check_perms+0x5e>
        enc = entry->ha_flags & BLE_ATT_F_READ_ENC;
   1ecb2:	f001 0504 	and.w	r5, r1, #4
        authen = entry->ha_flags & BLE_ATT_F_READ_AUTHEN;
   1ecb6:	f001 0608 	and.w	r6, r1, #8
        author = entry->ha_flags & BLE_ATT_F_READ_AUTHOR;
   1ecba:	f001 0110 	and.w	r1, r1, #16
    if (!enc && !authen && !author) {
   1ecbe:	b90d      	cbnz	r5, 1ecc4 <ble_att_svr_check_perms+0x22>
   1ecc0:	b906      	cbnz	r6, 1ecc4 <ble_att_svr_check_perms+0x22>
   1ecc2:	b1c9      	cbz	r1, 1ecf8 <ble_att_svr_check_perms+0x56>
   1ecc4:	4698      	mov	r8, r3
   1ecc6:	4614      	mov	r4, r2
   1ecc8:	4607      	mov	r7, r0
    ble_att_svr_get_sec_state(conn_handle, &sec_state);
   1ecca:	a925      	add	r1, sp, #148	; 0x94
   1eccc:	f7ff ffdc 	bl	1ec88 <ble_att_svr_get_sec_state>
    if ((enc || authen) && !sec_state.encrypted) {
   1ecd0:	b905      	cbnz	r5, 1ecd4 <ble_att_svr_check_perms+0x32>
   1ecd2:	b126      	cbz	r6, 1ecde <ble_att_svr_check_perms+0x3c>
   1ecd4:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
   1ecd8:	f013 0f01 	tst.w	r3, #1
   1ecdc:	d023      	beq.n	1ed26 <ble_att_svr_check_perms+0x84>
    if (authen && !sec_state.authenticated) {
   1ecde:	b126      	cbz	r6, 1ecea <ble_att_svr_check_perms+0x48>
   1ece0:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
   1ece4:	f013 0f02 	tst.w	r3, #2
   1ece8:	d058      	beq.n	1ed9c <ble_att_svr_check_perms+0xfa>
    if (entry->ha_min_key_size > sec_state.key_size) {
   1ecea:	7a63      	ldrb	r3, [r4, #9]
   1ecec:	f89d 2094 	ldrb.w	r2, [sp, #148]	; 0x94
   1ecf0:	ebb3 0fd2 	cmp.w	r3, r2, lsr #3
   1ecf4:	d858      	bhi.n	1eda8 <ble_att_svr_check_perms+0x106>
    return 0;
   1ecf6:	2100      	movs	r1, #0
}
   1ecf8:	4608      	mov	r0, r1
   1ecfa:	b026      	add	sp, #152	; 0x98
   1ecfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            *out_att_err = BLE_ATT_ERR_READ_NOT_PERMITTED;
   1ed00:	2202      	movs	r2, #2
   1ed02:	701a      	strb	r2, [r3, #0]
            return BLE_HS_EREJECT;
   1ed04:	2110      	movs	r1, #16
   1ed06:	e7f7      	b.n	1ecf8 <ble_att_svr_check_perms+0x56>
        if (!(entry->ha_flags & BLE_ATT_F_WRITE)) {
   1ed08:	7a11      	ldrb	r1, [r2, #8]
   1ed0a:	f011 0f02 	tst.w	r1, #2
   1ed0e:	d006      	beq.n	1ed1e <ble_att_svr_check_perms+0x7c>
        enc = entry->ha_flags & BLE_ATT_F_WRITE_ENC;
   1ed10:	f001 0520 	and.w	r5, r1, #32
        authen = entry->ha_flags & BLE_ATT_F_WRITE_AUTHEN;
   1ed14:	f001 0640 	and.w	r6, r1, #64	; 0x40
        author = entry->ha_flags & BLE_ATT_F_WRITE_AUTHOR;
   1ed18:	f001 0180 	and.w	r1, r1, #128	; 0x80
   1ed1c:	e7cf      	b.n	1ecbe <ble_att_svr_check_perms+0x1c>
            *out_att_err = BLE_ATT_ERR_WRITE_NOT_PERMITTED;
   1ed1e:	2203      	movs	r2, #3
   1ed20:	701a      	strb	r2, [r3, #0]
            return BLE_HS_EREJECT;
   1ed22:	2110      	movs	r1, #16
   1ed24:	e7e8      	b.n	1ecf8 <ble_att_svr_check_perms+0x56>
        ble_hs_lock();
   1ed26:	f004 feab 	bl	23a80 <ble_hs_lock>
        conn = ble_hs_conn_find(conn_handle);
   1ed2a:	4638      	mov	r0, r7
   1ed2c:	f005 fcf8 	bl	24720 <ble_hs_conn_find>
        if (conn != NULL) {
   1ed30:	b1d8      	cbz	r0, 1ed6a <ble_att_svr_check_perms+0xc8>
            ble_hs_conn_addrs(conn, &addrs);
   1ed32:	a901      	add	r1, sp, #4
   1ed34:	f005 fd5a 	bl	247ec <ble_hs_conn_addrs>
            memset(&key_sec, 0, sizeof key_sec);
   1ed38:	2300      	movs	r3, #0
   1ed3a:	f8cd 3026 	str.w	r3, [sp, #38]	; 0x26
   1ed3e:	f8cd 302a 	str.w	r3, [sp, #42]	; 0x2a
   1ed42:	f8cd 302e 	str.w	r3, [sp, #46]	; 0x2e
   1ed46:	f8cd 3032 	str.w	r3, [sp, #50]	; 0x32
   1ed4a:	f8cd 3036 	str.w	r3, [sp, #54]	; 0x36
   1ed4e:	f8cd 303a 	str.w	r3, [sp, #58]	; 0x3a
   1ed52:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
            key_sec.peer_addr = addrs.peer_id_addr;
   1ed56:	ab26      	add	r3, sp, #152	; 0x98
   1ed58:	f853 0d8d 	ldr.w	r0, [r3, #-141]!
   1ed5c:	9008      	str	r0, [sp, #32]
   1ed5e:	889a      	ldrh	r2, [r3, #4]
   1ed60:	799b      	ldrb	r3, [r3, #6]
   1ed62:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
   1ed66:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
        ble_hs_unlock();
   1ed6a:	f004 fe8d 	bl	23a88 <ble_hs_unlock>
        rc = ble_store_read_peer_sec(&key_sec, &value_sec);
   1ed6e:	a910      	add	r1, sp, #64	; 0x40
   1ed70:	a808      	add	r0, sp, #32
   1ed72:	f009 fe2f 	bl	289d4 <ble_store_read_peer_sec>
        if (rc == 0 && value_sec.ltk_present) {
   1ed76:	b940      	cbnz	r0, 1ed8a <ble_att_svr_check_perms+0xe8>
   1ed78:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
   1ed7c:	f013 0f01 	tst.w	r3, #1
   1ed80:	d003      	beq.n	1ed8a <ble_att_svr_check_perms+0xe8>
            *out_att_err = BLE_ATT_ERR_INSUFFICIENT_ENC;
   1ed82:	230f      	movs	r3, #15
   1ed84:	f888 3000 	strb.w	r3, [r8]
   1ed88:	e002      	b.n	1ed90 <ble_att_svr_check_perms+0xee>
            *out_att_err = BLE_ATT_ERR_INSUFFICIENT_AUTHEN;
   1ed8a:	2305      	movs	r3, #5
   1ed8c:	f888 3000 	strb.w	r3, [r8]
        return BLE_HS_ATT_ERR(*out_att_err);
   1ed90:	f898 1000 	ldrb.w	r1, [r8]
   1ed94:	b171      	cbz	r1, 1edb4 <ble_att_svr_check_perms+0x112>
   1ed96:	f501 7180 	add.w	r1, r1, #256	; 0x100
   1ed9a:	e7ad      	b.n	1ecf8 <ble_att_svr_check_perms+0x56>
        *out_att_err = BLE_ATT_ERR_INSUFFICIENT_AUTHEN;
   1ed9c:	2305      	movs	r3, #5
   1ed9e:	f888 3000 	strb.w	r3, [r8]
        return BLE_HS_ATT_ERR(*out_att_err);
   1eda2:	f240 1105 	movw	r1, #261	; 0x105
   1eda6:	e7a7      	b.n	1ecf8 <ble_att_svr_check_perms+0x56>
        *out_att_err = BLE_ATT_ERR_INSUFFICIENT_KEY_SZ;
   1eda8:	230c      	movs	r3, #12
   1edaa:	f888 3000 	strb.w	r3, [r8]
        return BLE_HS_ATT_ERR(*out_att_err);
   1edae:	f44f 7186 	mov.w	r1, #268	; 0x10c
   1edb2:	e7a1      	b.n	1ecf8 <ble_att_svr_check_perms+0x56>
        return BLE_HS_ATT_ERR(*out_att_err);
   1edb4:	2100      	movs	r1, #0
   1edb6:	e79f      	b.n	1ecf8 <ble_att_svr_check_perms+0x56>

0001edb8 <ble_att_svr_read>:
{
   1edb8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1edba:	b087      	sub	sp, #28
   1edbc:	4605      	mov	r5, r0
   1edbe:	460c      	mov	r4, r1
   1edc0:	4616      	mov	r6, r2
   1edc2:	9303      	str	r3, [sp, #12]
    att_err = 0;    /* Silence gcc warning. */
   1edc4:	2300      	movs	r3, #0
   1edc6:	f88d 3017 	strb.w	r3, [sp, #23]
    if (conn_handle != BLE_HS_CONN_HANDLE_NONE) {
   1edca:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1edce:	4298      	cmp	r0, r3
   1edd0:	d117      	bne.n	1ee02 <ble_att_svr_read+0x4a>
    rc = entry->ha_cb(conn_handle, entry->ha_handle_id,
   1edd2:	68e7      	ldr	r7, [r4, #12]
   1edd4:	8961      	ldrh	r1, [r4, #10]
   1edd6:	6923      	ldr	r3, [r4, #16]
   1edd8:	9301      	str	r3, [sp, #4]
   1edda:	ab03      	add	r3, sp, #12
   1eddc:	9300      	str	r3, [sp, #0]
   1edde:	4633      	mov	r3, r6
   1ede0:	2201      	movs	r2, #1
   1ede2:	4628      	mov	r0, r5
   1ede4:	47b8      	blx	r7
    if (rc != 0) {
   1ede6:	4603      	mov	r3, r0
   1ede8:	b140      	cbz	r0, 1edfc <ble_att_svr_read+0x44>
        att_err = rc;
   1edea:	f88d 0017 	strb.w	r0, [sp, #23]
        rc = BLE_HS_EAPP;
   1edee:	2309      	movs	r3, #9
    if (out_att_err != NULL) {
   1edf0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1edf2:	b11a      	cbz	r2, 1edfc <ble_att_svr_read+0x44>
        *out_att_err = att_err;
   1edf4:	f89d 2017 	ldrb.w	r2, [sp, #23]
   1edf8:	990c      	ldr	r1, [sp, #48]	; 0x30
   1edfa:	700a      	strb	r2, [r1, #0]
}
   1edfc:	4618      	mov	r0, r3
   1edfe:	b007      	add	sp, #28
   1ee00:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rc = ble_att_svr_check_perms(conn_handle, 1, entry, &att_err);
   1ee02:	f10d 0317 	add.w	r3, sp, #23
   1ee06:	460a      	mov	r2, r1
   1ee08:	2101      	movs	r1, #1
   1ee0a:	f7ff ff4a 	bl	1eca2 <ble_att_svr_check_perms>
        if (rc != 0) {
   1ee0e:	4603      	mov	r3, r0
   1ee10:	2800      	cmp	r0, #0
   1ee12:	d1ed      	bne.n	1edf0 <ble_att_svr_read+0x38>
   1ee14:	e7dd      	b.n	1edd2 <ble_att_svr_read+0x1a>

0001ee16 <ble_att_svr_write>:
{
   1ee16:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1ee1a:	b085      	sub	sp, #20
   1ee1c:	4605      	mov	r5, r0
   1ee1e:	460c      	mov	r4, r1
   1ee20:	4691      	mov	r9, r2
   1ee22:	4698      	mov	r8, r3
   1ee24:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    uint8_t att_err = 0;
   1ee26:	2300      	movs	r3, #0
   1ee28:	f88d 300f 	strb.w	r3, [sp, #15]
    if (conn_handle != BLE_HS_CONN_HANDLE_NONE) {
   1ee2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1ee30:	4298      	cmp	r0, r3
   1ee32:	d113      	bne.n	1ee5c <ble_att_svr_write+0x46>
    rc = entry->ha_cb(conn_handle, entry->ha_handle_id,
   1ee34:	68e7      	ldr	r7, [r4, #12]
   1ee36:	8961      	ldrh	r1, [r4, #10]
   1ee38:	6923      	ldr	r3, [r4, #16]
   1ee3a:	9301      	str	r3, [sp, #4]
   1ee3c:	f8cd 8000 	str.w	r8, [sp]
   1ee40:	464b      	mov	r3, r9
   1ee42:	2202      	movs	r2, #2
   1ee44:	4628      	mov	r0, r5
   1ee46:	47b8      	blx	r7
    if (rc != 0) {
   1ee48:	4603      	mov	r3, r0
   1ee4a:	b988      	cbnz	r0, 1ee70 <ble_att_svr_write+0x5a>
    if (out_att_err != NULL) {
   1ee4c:	b116      	cbz	r6, 1ee54 <ble_att_svr_write+0x3e>
        *out_att_err = att_err;
   1ee4e:	f89d 200f 	ldrb.w	r2, [sp, #15]
   1ee52:	7032      	strb	r2, [r6, #0]
}
   1ee54:	4618      	mov	r0, r3
   1ee56:	b005      	add	sp, #20
   1ee58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        rc = ble_att_svr_check_perms(conn_handle, 0, entry, &att_err);
   1ee5c:	f10d 030f 	add.w	r3, sp, #15
   1ee60:	460a      	mov	r2, r1
   1ee62:	2100      	movs	r1, #0
   1ee64:	f7ff ff1d 	bl	1eca2 <ble_att_svr_check_perms>
        if (rc != 0) {
   1ee68:	4603      	mov	r3, r0
   1ee6a:	2800      	cmp	r0, #0
   1ee6c:	d1ee      	bne.n	1ee4c <ble_att_svr_write+0x36>
   1ee6e:	e7e1      	b.n	1ee34 <ble_att_svr_write+0x1e>
        att_err = rc;
   1ee70:	f88d 000f 	strb.w	r0, [sp, #15]
        rc = BLE_HS_EAPP;
   1ee74:	2309      	movs	r3, #9
        goto done;
   1ee76:	e7e9      	b.n	1ee4c <ble_att_svr_write+0x36>

0001ee78 <ble_att_svr_pullup_req_base>:
{
   1ee78:	b510      	push	{r4, lr}
   1ee7a:	4614      	mov	r4, r2
    rc = ble_hs_mbuf_pullup_base(om, base_len);
   1ee7c:	f006 fbe9 	bl	25652 <ble_hs_mbuf_pullup_base>
    if (rc == BLE_HS_ENOMEM) {
   1ee80:	2806      	cmp	r0, #6
   1ee82:	d003      	beq.n	1ee8c <ble_att_svr_pullup_req_base+0x14>
        att_err = 0;
   1ee84:	2300      	movs	r3, #0
    if (out_att_err != NULL) {
   1ee86:	b104      	cbz	r4, 1ee8a <ble_att_svr_pullup_req_base+0x12>
        *out_att_err = att_err;
   1ee88:	7023      	strb	r3, [r4, #0]
}
   1ee8a:	bd10      	pop	{r4, pc}
        att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   1ee8c:	2311      	movs	r3, #17
   1ee8e:	e7fa      	b.n	1ee86 <ble_att_svr_pullup_req_base+0xe>

0001ee90 <ble_att_svr_build_mtu_rsp>:
{
   1ee90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1ee94:	b083      	sub	sp, #12
   1ee96:	4605      	mov	r5, r0
   1ee98:	4688      	mov	r8, r1
   1ee9a:	4617      	mov	r7, r2
   1ee9c:	461e      	mov	r6, r3
    *att_err = 0; /* Silence unnecessary warning. */
   1ee9e:	2400      	movs	r4, #0
   1eea0:	701c      	strb	r4, [r3, #0]
    ble_hs_lock();
   1eea2:	f004 fded 	bl	23a80 <ble_hs_lock>
    rc = ble_att_conn_chan_find(conn_handle, NULL, &chan);
   1eea6:	aa01      	add	r2, sp, #4
   1eea8:	4621      	mov	r1, r4
   1eeaa:	4628      	mov	r0, r5
   1eeac:	f7ff fc2e 	bl	1e70c <ble_att_conn_chan_find>
    if (rc == 0) {
   1eeb0:	4605      	mov	r5, r0
   1eeb2:	b910      	cbnz	r0, 1eeba <ble_att_svr_build_mtu_rsp+0x2a>
        mtu = chan->my_mtu;
   1eeb4:	9b01      	ldr	r3, [sp, #4]
   1eeb6:	f8b3 900a 	ldrh.w	r9, [r3, #10]
    ble_hs_unlock();
   1eeba:	f004 fde5 	bl	23a88 <ble_hs_unlock>
    if (rc != 0) {
   1eebe:	b12d      	cbz	r5, 1eecc <ble_att_svr_build_mtu_rsp+0x3c>
    txom = NULL;
   1eec0:	2400      	movs	r4, #0
    *out_txom = txom;
   1eec2:	603c      	str	r4, [r7, #0]
}
   1eec4:	4628      	mov	r0, r5
   1eec6:	b003      	add	sp, #12
   1eec8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    txom = *rxom;
   1eecc:	f8d8 4000 	ldr.w	r4, [r8]
    *rxom = NULL;
   1eed0:	2300      	movs	r3, #0
   1eed2:	f8c8 3000 	str.w	r3, [r8]
    os_mbuf_adj(txom, OS_MBUF_PKTLEN(txom));
   1eed6:	8a21      	ldrh	r1, [r4, #16]
   1eed8:	4620      	mov	r0, r4
   1eeda:	f7ee fb79 	bl	d5d0 <os_mbuf_adj>
    cmd = ble_att_cmd_prepare(BLE_ATT_OP_MTU_RSP, sizeof(*cmd), txom);
   1eede:	4622      	mov	r2, r4
   1eee0:	2102      	movs	r1, #2
   1eee2:	2003      	movs	r0, #3
   1eee4:	f7ff fe2f 	bl	1eb46 <ble_att_cmd_prepare>
    if (cmd == NULL) {
   1eee8:	b110      	cbz	r0, 1eef0 <ble_att_svr_build_mtu_rsp+0x60>
    cmd->bamc_mtu = htole16(mtu);
   1eeea:	f8a0 9000 	strh.w	r9, [r0]
   1eeee:	e7e8      	b.n	1eec2 <ble_att_svr_build_mtu_rsp+0x32>
        *att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   1eef0:	2311      	movs	r3, #17
   1eef2:	7033      	strb	r3, [r6, #0]
        rc = BLE_HS_ENOMEM;
   1eef4:	2506      	movs	r5, #6
        goto done;
   1eef6:	e7e4      	b.n	1eec2 <ble_att_svr_build_mtu_rsp+0x32>

0001eef8 <ble_att_svr_pkt>:
{
   1eef8:	b570      	push	{r4, r5, r6, lr}
   1eefa:	4605      	mov	r5, r0
   1eefc:	460c      	mov	r4, r1
   1eefe:	4616      	mov	r6, r2
    *out_txom = ble_hs_mbuf_l2cap_pkt();
   1ef00:	f006 fb86 	bl	25610 <ble_hs_mbuf_l2cap_pkt>
   1ef04:	6020      	str	r0, [r4, #0]
    if (*out_txom != NULL) {
   1ef06:	b108      	cbz	r0, 1ef0c <ble_att_svr_pkt+0x14>
        return 0;
   1ef08:	2000      	movs	r0, #0
}
   1ef0a:	bd70      	pop	{r4, r5, r6, pc}
    *out_txom = *rxom;
   1ef0c:	682b      	ldr	r3, [r5, #0]
   1ef0e:	6023      	str	r3, [r4, #0]
    *rxom = NULL;
   1ef10:	2300      	movs	r3, #0
   1ef12:	602b      	str	r3, [r5, #0]
    *out_att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   1ef14:	2311      	movs	r3, #17
   1ef16:	7033      	strb	r3, [r6, #0]
    return BLE_HS_ENOMEM;
   1ef18:	2006      	movs	r0, #6
   1ef1a:	e7f6      	b.n	1ef0a <ble_att_svr_pkt+0x12>

0001ef1c <ble_att_svr_build_write_rsp>:
{
   1ef1c:	b570      	push	{r4, r5, r6, lr}
   1ef1e:	b082      	sub	sp, #8
   1ef20:	460d      	mov	r5, r1
   1ef22:	4616      	mov	r6, r2
    rc = ble_att_svr_pkt(rxom, &txom, att_err);
   1ef24:	a901      	add	r1, sp, #4
   1ef26:	f7ff ffe7 	bl	1eef8 <ble_att_svr_pkt>
    if (rc != 0) {
   1ef2a:	4604      	mov	r4, r0
   1ef2c:	b120      	cbz	r0, 1ef38 <ble_att_svr_build_write_rsp+0x1c>
    *out_txom = txom;
   1ef2e:	9b01      	ldr	r3, [sp, #4]
   1ef30:	602b      	str	r3, [r5, #0]
}
   1ef32:	4620      	mov	r0, r4
   1ef34:	b002      	add	sp, #8
   1ef36:	bd70      	pop	{r4, r5, r6, pc}
    if (ble_att_cmd_prepare(BLE_ATT_OP_WRITE_RSP, 0, txom) == NULL) {
   1ef38:	9a01      	ldr	r2, [sp, #4]
   1ef3a:	2100      	movs	r1, #0
   1ef3c:	2013      	movs	r0, #19
   1ef3e:	f7ff fe02 	bl	1eb46 <ble_att_cmd_prepare>
   1ef42:	2800      	cmp	r0, #0
   1ef44:	d1f3      	bne.n	1ef2e <ble_att_svr_build_write_rsp+0x12>
        *att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   1ef46:	2311      	movs	r3, #17
   1ef48:	7033      	strb	r3, [r6, #0]
        rc = BLE_HS_ENOMEM;
   1ef4a:	2406      	movs	r4, #6
        goto done;
   1ef4c:	e7ef      	b.n	1ef2e <ble_att_svr_build_write_rsp+0x12>

0001ef4e <ble_att_svr_build_indicate_rsp>:
 * @return                      0 on success; nonzero on failure.
 */
static int
ble_att_svr_build_indicate_rsp(struct os_mbuf **rxom,
                               struct os_mbuf **out_txom, uint8_t *out_att_err)
{
   1ef4e:	b570      	push	{r4, r5, r6, lr}
   1ef50:	b082      	sub	sp, #8
   1ef52:	460d      	mov	r5, r1
   1ef54:	4616      	mov	r6, r2

    /* Allocate a new buffer for the response.  An indicate response never
     * reuses the request buffer.  See the note at the top of this file for
     * details.
     */
    rc = ble_att_svr_pkt(rxom, &txom, out_att_err);
   1ef56:	a901      	add	r1, sp, #4
   1ef58:	f7ff ffce 	bl	1eef8 <ble_att_svr_pkt>
    if (rc != 0) {
   1ef5c:	4604      	mov	r4, r0
   1ef5e:	b120      	cbz	r0, 1ef6a <ble_att_svr_build_indicate_rsp+0x1c>
    }

    rc = 0;

done:
    *out_txom = txom;
   1ef60:	9b01      	ldr	r3, [sp, #4]
   1ef62:	602b      	str	r3, [r5, #0]
    return rc;
}
   1ef64:	4620      	mov	r0, r4
   1ef66:	b002      	add	sp, #8
   1ef68:	bd70      	pop	{r4, r5, r6, pc}
    if (ble_att_cmd_prepare(BLE_ATT_OP_INDICATE_RSP, 0, txom) == NULL) {
   1ef6a:	9a01      	ldr	r2, [sp, #4]
   1ef6c:	2100      	movs	r1, #0
   1ef6e:	201e      	movs	r0, #30
   1ef70:	f7ff fde9 	bl	1eb46 <ble_att_cmd_prepare>
   1ef74:	2800      	cmp	r0, #0
   1ef76:	d1f3      	bne.n	1ef60 <ble_att_svr_build_indicate_rsp+0x12>
        *out_att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   1ef78:	2311      	movs	r3, #17
   1ef7a:	7033      	strb	r3, [r6, #0]
        rc = BLE_HS_ENOMEM;
   1ef7c:	2406      	movs	r4, #6
        goto done;
   1ef7e:	e7ef      	b.n	1ef60 <ble_att_svr_build_indicate_rsp+0x12>

0001ef80 <ble_att_svr_fill_info>:
{
   1ef80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ef84:	4607      	mov	r7, r0
   1ef86:	460e      	mov	r6, r1
   1ef88:	4690      	mov	r8, r2
   1ef8a:	469a      	mov	sl, r3
   1ef8c:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    *format = 0;
   1ef90:	2500      	movs	r5, #0
   1ef92:	f889 5000 	strb.w	r5, [r9]
    STAILQ_FOREACH(ha, &ble_att_svr_list, ha_next) {
   1ef96:	4b25      	ldr	r3, [pc, #148]	; (1f02c <ble_att_svr_fill_info+0xac>)
   1ef98:	681c      	ldr	r4, [r3, #0]
   1ef9a:	e022      	b.n	1efe2 <ble_att_svr_fill_info+0x62>
                if (*format == 0) {
   1ef9c:	f899 3000 	ldrb.w	r3, [r9]
   1efa0:	b923      	cbnz	r3, 1efac <ble_att_svr_fill_info+0x2c>
                    *format = BLE_ATT_FIND_INFO_RSP_FORMAT_16BIT;
   1efa2:	2301      	movs	r3, #1
   1efa4:	f889 3000 	strb.w	r3, [r9]
                entry_sz = 4;
   1efa8:	2104      	movs	r1, #4
   1efaa:	e006      	b.n	1efba <ble_att_svr_fill_info+0x3a>
                } else if (*format != BLE_ATT_FIND_INFO_RSP_FORMAT_16BIT) {
   1efac:	2b01      	cmp	r3, #1
   1efae:	d132      	bne.n	1f016 <ble_att_svr_fill_info+0x96>
                entry_sz = 4;
   1efb0:	2104      	movs	r1, #4
   1efb2:	e002      	b.n	1efba <ble_att_svr_fill_info+0x3a>
                } else if (*format != BLE_ATT_FIND_INFO_RSP_FORMAT_128BIT) {
   1efb4:	2b02      	cmp	r3, #2
   1efb6:	d130      	bne.n	1f01a <ble_att_svr_fill_info+0x9a>
                entry_sz = 18;
   1efb8:	2112      	movs	r1, #18
            if (OS_MBUF_PKTLEN(om) + entry_sz > mtu) {
   1efba:	f8b8 3010 	ldrh.w	r3, [r8, #16]
   1efbe:	440b      	add	r3, r1
   1efc0:	4553      	cmp	r3, sl
   1efc2:	dc2c      	bgt.n	1f01e <ble_att_svr_fill_info+0x9e>
            buf = os_mbuf_extend(om, entry_sz);
   1efc4:	4640      	mov	r0, r8
   1efc6:	f7ee fc5b 	bl	d880 <os_mbuf_extend>
            if (buf == NULL) {
   1efca:	4683      	mov	fp, r0
   1efcc:	b348      	cbz	r0, 1f022 <ble_att_svr_fill_info+0xa2>
            put_le16(buf + 0, ha->ha_handle_id);
   1efce:	8961      	ldrh	r1, [r4, #10]
   1efd0:	f00f feac 	bl	2ed2c <put_le16>
            ble_uuid_flat(ha->ha_uuid, buf + 2);
   1efd4:	f10b 0102 	add.w	r1, fp, #2
   1efd8:	6860      	ldr	r0, [r4, #4]
   1efda:	f009 ff1f 	bl	28e1c <ble_uuid_flat>
            num_entries++;
   1efde:	3501      	adds	r5, #1
    STAILQ_FOREACH(ha, &ble_att_svr_list, ha_next) {
   1efe0:	6824      	ldr	r4, [r4, #0]
   1efe2:	b18c      	cbz	r4, 1f008 <ble_att_svr_fill_info+0x88>
        if (ha->ha_handle_id > end_handle) {
   1efe4:	8963      	ldrh	r3, [r4, #10]
   1efe6:	42b3      	cmp	r3, r6
   1efe8:	d813      	bhi.n	1f012 <ble_att_svr_fill_info+0x92>
        if (ha->ha_handle_id >= start_handle) {
   1efea:	42bb      	cmp	r3, r7
   1efec:	d3f8      	bcc.n	1efe0 <ble_att_svr_fill_info+0x60>
            if (ha->ha_uuid->type == BLE_UUID_TYPE_16) {
   1efee:	6863      	ldr	r3, [r4, #4]
   1eff0:	781b      	ldrb	r3, [r3, #0]
   1eff2:	2b10      	cmp	r3, #16
   1eff4:	d0d2      	beq.n	1ef9c <ble_att_svr_fill_info+0x1c>
                if (*format == 0) {
   1eff6:	f899 3000 	ldrb.w	r3, [r9]
   1effa:	2b00      	cmp	r3, #0
   1effc:	d1da      	bne.n	1efb4 <ble_att_svr_fill_info+0x34>
                    *format = BLE_ATT_FIND_INFO_RSP_FORMAT_128BIT;
   1effe:	2302      	movs	r3, #2
   1f000:	f889 3000 	strb.w	r3, [r9]
                entry_sz = 18;
   1f004:	2112      	movs	r1, #18
   1f006:	e7d8      	b.n	1efba <ble_att_svr_fill_info+0x3a>
    rc = 0;
   1f008:	2000      	movs	r0, #0
    if (rc == 0 && num_entries == 0) {
   1f00a:	b900      	cbnz	r0, 1f00e <ble_att_svr_fill_info+0x8e>
   1f00c:	b15d      	cbz	r5, 1f026 <ble_att_svr_fill_info+0xa6>
}
   1f00e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            rc = 0;
   1f012:	2000      	movs	r0, #0
   1f014:	e7f9      	b.n	1f00a <ble_att_svr_fill_info+0x8a>
                    rc = 0;
   1f016:	2000      	movs	r0, #0
   1f018:	e7f7      	b.n	1f00a <ble_att_svr_fill_info+0x8a>
                    rc = 0;
   1f01a:	2000      	movs	r0, #0
   1f01c:	e7f5      	b.n	1f00a <ble_att_svr_fill_info+0x8a>
                rc = 0;
   1f01e:	2000      	movs	r0, #0
   1f020:	e7f3      	b.n	1f00a <ble_att_svr_fill_info+0x8a>
                rc = BLE_HS_ENOMEM;
   1f022:	2006      	movs	r0, #6
   1f024:	e7f1      	b.n	1f00a <ble_att_svr_fill_info+0x8a>
        return BLE_HS_ENOENT;
   1f026:	2005      	movs	r0, #5
   1f028:	e7f1      	b.n	1f00e <ble_att_svr_fill_info+0x8e>
   1f02a:	bf00      	nop
   1f02c:	2000237c 	.word	0x2000237c

0001f030 <ble_att_svr_build_find_info_rsp>:
{
   1f030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f034:	b082      	sub	sp, #8
   1f036:	4680      	mov	r8, r0
   1f038:	460d      	mov	r5, r1
   1f03a:	4616      	mov	r6, r2
    txom = *rxom;
   1f03c:	681c      	ldr	r4, [r3, #0]
    *rxom = NULL;
   1f03e:	2200      	movs	r2, #0
   1f040:	601a      	str	r2, [r3, #0]
    os_mbuf_adj(txom, OS_MBUF_PKTLEN(txom));
   1f042:	8a21      	ldrh	r1, [r4, #16]
   1f044:	4620      	mov	r0, r4
   1f046:	f7ee fac3 	bl	d5d0 <os_mbuf_adj>
    rsp = ble_att_cmd_prepare(BLE_ATT_OP_FIND_INFO_RSP, sizeof(*rsp), txom);
   1f04a:	4622      	mov	r2, r4
   1f04c:	2101      	movs	r1, #1
   1f04e:	2005      	movs	r0, #5
   1f050:	f7ff fd79 	bl	1eb46 <ble_att_cmd_prepare>
    if (rsp == NULL) {
   1f054:	b190      	cbz	r0, 1f07c <ble_att_svr_build_find_info_rsp+0x4c>
   1f056:	4607      	mov	r7, r0
    mtu = ble_att_mtu(conn_handle);
   1f058:	4640      	mov	r0, r8
   1f05a:	f7ff fc7d 	bl	1e958 <ble_att_mtu>
    rc = ble_att_svr_fill_info(start_handle, end_handle, txom, mtu,
   1f05e:	9700      	str	r7, [sp, #0]
   1f060:	4603      	mov	r3, r0
   1f062:	4622      	mov	r2, r4
   1f064:	4631      	mov	r1, r6
   1f066:	4628      	mov	r0, r5
   1f068:	f7ff ff8a 	bl	1ef80 <ble_att_svr_fill_info>
    if (rc != 0) {
   1f06c:	4603      	mov	r3, r0
   1f06e:	b950      	cbnz	r0, 1f086 <ble_att_svr_build_find_info_rsp+0x56>
    *out_txom = txom;
   1f070:	9a08      	ldr	r2, [sp, #32]
   1f072:	6014      	str	r4, [r2, #0]
}
   1f074:	4618      	mov	r0, r3
   1f076:	b002      	add	sp, #8
   1f078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        *att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   1f07c:	2311      	movs	r3, #17
   1f07e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1f080:	7013      	strb	r3, [r2, #0]
        rc = BLE_HS_ENOMEM;
   1f082:	2306      	movs	r3, #6
        goto done;
   1f084:	e7f4      	b.n	1f070 <ble_att_svr_build_find_info_rsp+0x40>
        *att_err = BLE_ATT_ERR_ATTR_NOT_FOUND;
   1f086:	230a      	movs	r3, #10
   1f088:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1f08a:	7013      	strb	r3, [r2, #0]
        rc = BLE_HS_ENOENT;
   1f08c:	2305      	movs	r3, #5
        goto done;
   1f08e:	e7ef      	b.n	1f070 <ble_att_svr_build_find_info_rsp+0x40>

0001f090 <ble_att_svr_read_group_type_entry_write>:
{
   1f090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f092:	9d06      	ldr	r5, [sp, #24]
    if (service_uuid->type == BLE_UUID_TYPE_16) {
   1f094:	782c      	ldrb	r4, [r5, #0]
   1f096:	2c10      	cmp	r4, #16
   1f098:	d018      	beq.n	1f0cc <ble_att_svr_read_group_type_entry_write+0x3c>
        len = BLE_ATT_READ_GROUP_TYPE_ADATA_SZ_128;
   1f09a:	2614      	movs	r6, #20
    if (OS_MBUF_PKTLEN(om) + len > mtu) {
   1f09c:	8a04      	ldrh	r4, [r0, #16]
   1f09e:	4434      	add	r4, r6
   1f0a0:	428c      	cmp	r4, r1
   1f0a2:	dc15      	bgt.n	1f0d0 <ble_att_svr_read_group_type_entry_write+0x40>
   1f0a4:	461c      	mov	r4, r3
   1f0a6:	4617      	mov	r7, r2
    buf = os_mbuf_extend(om, len);
   1f0a8:	4631      	mov	r1, r6
   1f0aa:	f7ee fbe9 	bl	d880 <os_mbuf_extend>
    if (buf == NULL) {
   1f0ae:	4606      	mov	r6, r0
   1f0b0:	b180      	cbz	r0, 1f0d4 <ble_att_svr_read_group_type_entry_write+0x44>
    put_le16(buf + 0, start_group_handle);
   1f0b2:	4639      	mov	r1, r7
   1f0b4:	f00f fe3a 	bl	2ed2c <put_le16>
    put_le16(buf + 2, end_group_handle);
   1f0b8:	4621      	mov	r1, r4
   1f0ba:	1cb0      	adds	r0, r6, #2
   1f0bc:	f00f fe36 	bl	2ed2c <put_le16>
    ble_uuid_flat(service_uuid, buf + 4);
   1f0c0:	1d31      	adds	r1, r6, #4
   1f0c2:	4628      	mov	r0, r5
   1f0c4:	f009 feaa 	bl	28e1c <ble_uuid_flat>
    return 0;
   1f0c8:	2000      	movs	r0, #0
   1f0ca:	e002      	b.n	1f0d2 <ble_att_svr_read_group_type_entry_write+0x42>
        len = BLE_ATT_READ_GROUP_TYPE_ADATA_SZ_16;
   1f0cc:	2606      	movs	r6, #6
   1f0ce:	e7e5      	b.n	1f09c <ble_att_svr_read_group_type_entry_write+0xc>
        return BLE_HS_EMSGSIZE;
   1f0d0:	2004      	movs	r0, #4
}
   1f0d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return BLE_HS_ENOMEM;
   1f0d4:	2006      	movs	r0, #6
   1f0d6:	e7fc      	b.n	1f0d2 <ble_att_svr_read_group_type_entry_write+0x42>

0001f0d8 <ble_att_svr_is_valid_find_group_type>:
{
   1f0d8:	b508      	push	{r3, lr}
    uuid16 = ble_uuid_u16(uuid);
   1f0da:	f009 fe63 	bl	28da4 <ble_uuid_u16>
    return uuid16 == BLE_ATT_UUID_PRIMARY_SERVICE ||
   1f0de:	f5a0 5320 	sub.w	r3, r0, #10240	; 0x2800
   1f0e2:	b29b      	uxth	r3, r3
           uuid16 == BLE_ATT_UUID_SECONDARY_SERVICE ||
   1f0e4:	2b01      	cmp	r3, #1
   1f0e6:	d907      	bls.n	1f0f8 <ble_att_svr_is_valid_find_group_type+0x20>
   1f0e8:	f642 0303 	movw	r3, #10243	; 0x2803
   1f0ec:	4298      	cmp	r0, r3
   1f0ee:	d001      	beq.n	1f0f4 <ble_att_svr_is_valid_find_group_type+0x1c>
   1f0f0:	2000      	movs	r0, #0
}
   1f0f2:	bd08      	pop	{r3, pc}
           uuid16 == BLE_ATT_UUID_SECONDARY_SERVICE ||
   1f0f4:	2001      	movs	r0, #1
   1f0f6:	e7fc      	b.n	1f0f2 <ble_att_svr_is_valid_find_group_type+0x1a>
   1f0f8:	2001      	movs	r0, #1
   1f0fa:	e7fa      	b.n	1f0f2 <ble_att_svr_is_valid_find_group_type+0x1a>

0001f0fc <ble_att_svr_is_valid_group_end>:
    if (uuid_group->type != BLE_UUID_TYPE_16) {
   1f0fc:	7803      	ldrb	r3, [r0, #0]
   1f0fe:	2b10      	cmp	r3, #16
   1f100:	d001      	beq.n	1f106 <ble_att_svr_is_valid_group_end+0xa>
        return 1;
   1f102:	2001      	movs	r0, #1
   1f104:	4770      	bx	lr
    if (uuid->type != BLE_UUID_TYPE_16) {
   1f106:	780b      	ldrb	r3, [r1, #0]
   1f108:	2b10      	cmp	r3, #16
   1f10a:	d001      	beq.n	1f110 <ble_att_svr_is_valid_group_end+0x14>
        return 0;
   1f10c:	2000      	movs	r0, #0
}
   1f10e:	4770      	bx	lr
{
   1f110:	b510      	push	{r4, lr}
   1f112:	460c      	mov	r4, r1
    switch (ble_uuid_u16(uuid_group)) {
   1f114:	f009 fe46 	bl	28da4 <ble_uuid_u16>
   1f118:	f5b0 5f20 	cmp.w	r0, #10240	; 0x2800
   1f11c:	d316      	bcc.n	1f14c <ble_att_svr_is_valid_group_end+0x50>
   1f11e:	f642 0301 	movw	r3, #10241	; 0x2801
   1f122:	4298      	cmp	r0, r3
   1f124:	d907      	bls.n	1f136 <ble_att_svr_is_valid_group_end+0x3a>
   1f126:	f642 0303 	movw	r3, #10243	; 0x2803
   1f12a:	4298      	cmp	r0, r3
   1f12c:	d10e      	bne.n	1f14c <ble_att_svr_is_valid_group_end+0x50>
        return ble_att_svr_is_valid_find_group_type(uuid);
   1f12e:	4620      	mov	r0, r4
   1f130:	f7ff ffd2 	bl	1f0d8 <ble_att_svr_is_valid_find_group_type>
   1f134:	e009      	b.n	1f14a <ble_att_svr_is_valid_group_end+0x4e>
        uuid16 = ble_uuid_u16(uuid);
   1f136:	4620      	mov	r0, r4
   1f138:	f009 fe34 	bl	28da4 <ble_uuid_u16>
        return uuid16 == BLE_ATT_UUID_PRIMARY_SERVICE ||
   1f13c:	f5a0 5020 	sub.w	r0, r0, #10240	; 0x2800
   1f140:	b280      	uxth	r0, r0
   1f142:	2801      	cmp	r0, #1
   1f144:	bf8c      	ite	hi
   1f146:	2000      	movhi	r0, #0
   1f148:	2001      	movls	r0, #1
}
   1f14a:	bd10      	pop	{r4, pc}
        return 1;
   1f14c:	2001      	movs	r0, #1
   1f14e:	e7fc      	b.n	1f14a <ble_att_svr_is_valid_group_end+0x4e>

0001f150 <ble_att_svr_is_valid_read_group_type>:
{
   1f150:	b508      	push	{r3, lr}
    uuid16 = ble_uuid_u16(uuid);
   1f152:	f009 fe27 	bl	28da4 <ble_uuid_u16>
    return uuid16 == BLE_ATT_UUID_PRIMARY_SERVICE ||
   1f156:	f5a0 5020 	sub.w	r0, r0, #10240	; 0x2800
   1f15a:	b280      	uxth	r0, r0
}
   1f15c:	2801      	cmp	r0, #1
   1f15e:	bf8c      	ite	hi
   1f160:	2000      	movhi	r0, #0
   1f162:	2001      	movls	r0, #1
   1f164:	bd08      	pop	{r3, pc}

0001f166 <ble_att_svr_read_flat>:
{
   1f166:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f16a:	b082      	sub	sp, #8
   1f16c:	4605      	mov	r5, r0
   1f16e:	460e      	mov	r6, r1
   1f170:	4617      	mov	r7, r2
   1f172:	4698      	mov	r8, r3
    om = ble_hs_mbuf_l2cap_pkt();
   1f174:	f006 fa4c 	bl	25610 <ble_hs_mbuf_l2cap_pkt>
    if (om == NULL) {
   1f178:	4604      	mov	r4, r0
   1f17a:	b1d0      	cbz	r0, 1f1b2 <ble_att_svr_read_flat+0x4c>
    rc = ble_att_svr_read(conn_handle, entry, offset, om, out_att_err);
   1f17c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1f17e:	9300      	str	r3, [sp, #0]
   1f180:	4603      	mov	r3, r0
   1f182:	463a      	mov	r2, r7
   1f184:	4631      	mov	r1, r6
   1f186:	4628      	mov	r0, r5
   1f188:	f7ff fe16 	bl	1edb8 <ble_att_svr_read>
    if (rc != 0) {
   1f18c:	4605      	mov	r5, r0
   1f18e:	b988      	cbnz	r0, 1f1b4 <ble_att_svr_read_flat+0x4e>
    len = OS_MBUF_PKTLEN(om);
   1f190:	8a26      	ldrh	r6, [r4, #16]
    if (len > max_len) {
   1f192:	4546      	cmp	r6, r8
   1f194:	d808      	bhi.n	1f1a8 <ble_att_svr_read_flat+0x42>
    rc = os_mbuf_copydata(om, 0, len, dst);
   1f196:	9b08      	ldr	r3, [sp, #32]
   1f198:	4632      	mov	r2, r6
   1f19a:	2100      	movs	r1, #0
   1f19c:	4620      	mov	r0, r4
   1f19e:	f7ee f9ea 	bl	d576 <os_mbuf_copydata>
    *out_len = len;
   1f1a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1f1a4:	801e      	strh	r6, [r3, #0]
   1f1a6:	e005      	b.n	1f1b4 <ble_att_svr_read_flat+0x4e>
        *out_att_err = BLE_ATT_ERR_UNLIKELY;
   1f1a8:	230e      	movs	r3, #14
   1f1aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1f1ac:	7013      	strb	r3, [r2, #0]
        rc = BLE_HS_EMSGSIZE;
   1f1ae:	2504      	movs	r5, #4
        goto done;
   1f1b0:	e000      	b.n	1f1b4 <ble_att_svr_read_flat+0x4e>
        rc = BLE_HS_ENOMEM;
   1f1b2:	2506      	movs	r5, #6
    os_mbuf_free_chain(om);
   1f1b4:	4620      	mov	r0, r4
   1f1b6:	f7ee f933 	bl	d420 <os_mbuf_free_chain>
}
   1f1ba:	4628      	mov	r0, r5
   1f1bc:	b002      	add	sp, #8
   1f1be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001f1c2 <ble_att_svr_fill_type_value_entry>:
{
   1f1c2:	b530      	push	{r4, r5, lr}
   1f1c4:	b083      	sub	sp, #12
    rsp_sz = OS_MBUF_PKTHDR(om)->omp_len + 4;
   1f1c6:	8a04      	ldrh	r4, [r0, #16]
   1f1c8:	3404      	adds	r4, #4
    if (rsp_sz > mtu) {
   1f1ca:	429c      	cmp	r4, r3
   1f1cc:	dd02      	ble.n	1f1d4 <ble_att_svr_fill_type_value_entry+0x12>
        return 0;
   1f1ce:	2000      	movs	r0, #0
}
   1f1d0:	b003      	add	sp, #12
   1f1d2:	bd30      	pop	{r4, r5, pc}
   1f1d4:	4615      	mov	r5, r2
   1f1d6:	4604      	mov	r4, r0
    put_le16(&u16, first);
   1f1d8:	f10d 0006 	add.w	r0, sp, #6
   1f1dc:	f00f fda6 	bl	2ed2c <put_le16>
    rc = os_mbuf_append(om, &u16, 2);
   1f1e0:	2202      	movs	r2, #2
   1f1e2:	f10d 0106 	add.w	r1, sp, #6
   1f1e6:	4620      	mov	r0, r4
   1f1e8:	f7ee f936 	bl	d458 <os_mbuf_append>
    if (rc != 0) {
   1f1ec:	b968      	cbnz	r0, 1f20a <ble_att_svr_fill_type_value_entry+0x48>
    put_le16(&u16, last);
   1f1ee:	4629      	mov	r1, r5
   1f1f0:	f10d 0006 	add.w	r0, sp, #6
   1f1f4:	f00f fd9a 	bl	2ed2c <put_le16>
    rc = os_mbuf_append(om, &u16, 2);
   1f1f8:	2202      	movs	r2, #2
   1f1fa:	f10d 0106 	add.w	r1, sp, #6
   1f1fe:	4620      	mov	r0, r4
   1f200:	f7ee f92a 	bl	d458 <os_mbuf_append>
    if (rc != 0) {
   1f204:	b930      	cbnz	r0, 1f214 <ble_att_svr_fill_type_value_entry+0x52>
    return BLE_HS_EAGAIN;
   1f206:	2001      	movs	r0, #1
   1f208:	e7e2      	b.n	1f1d0 <ble_att_svr_fill_type_value_entry+0xe>
        *out_att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   1f20a:	2311      	movs	r3, #17
   1f20c:	9a06      	ldr	r2, [sp, #24]
   1f20e:	7013      	strb	r3, [r2, #0]
        return BLE_HS_ENOMEM;
   1f210:	2006      	movs	r0, #6
   1f212:	e7dd      	b.n	1f1d0 <ble_att_svr_fill_type_value_entry+0xe>
        *out_att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   1f214:	2311      	movs	r3, #17
   1f216:	9a06      	ldr	r2, [sp, #24]
   1f218:	7013      	strb	r3, [r2, #0]
        return BLE_HS_ENOMEM;
   1f21a:	2006      	movs	r0, #6
   1f21c:	e7d8      	b.n	1f1d0 <ble_att_svr_fill_type_value_entry+0xe>
	...

0001f220 <ble_att_svr_fill_type_value>:
{
   1f220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f224:	b08d      	sub	sp, #52	; 0x34
   1f226:	4683      	mov	fp, r0
   1f228:	460e      	mov	r6, r1
   1f22a:	4690      	mov	r8, r2
   1f22c:	9305      	str	r3, [sp, #20]
   1f22e:	f8bd a060 	ldrh.w	sl, [sp, #96]	; 0x60
   1f232:	f8dd 9064 	ldr.w	r9, [sp, #100]	; 0x64
    STAILQ_FOREACH(ha, &ble_att_svr_list, ha_next) {
   1f236:	4b33      	ldr	r3, [pc, #204]	; (1f304 <ble_att_svr_fill_type_value+0xe4>)
   1f238:	681c      	ldr	r4, [r3, #0]
    prev = 0;
   1f23a:	2700      	movs	r7, #0
    first = 0;
   1f23c:	463d      	mov	r5, r7
    STAILQ_FOREACH(ha, &ble_att_svr_list, ha_next) {
   1f23e:	e015      	b.n	1f26c <ble_att_svr_fill_type_value+0x4c>
            rc = ble_att_svr_fill_type_value_entry(txom, first, prev, mtu,
   1f240:	f8cd 9000 	str.w	r9, [sp]
   1f244:	4653      	mov	r3, sl
   1f246:	463a      	mov	r2, r7
   1f248:	4629      	mov	r1, r5
   1f24a:	9817      	ldr	r0, [sp, #92]	; 0x5c
   1f24c:	f7ff ffb9 	bl	1f1c2 <ble_att_svr_fill_type_value_entry>
   1f250:	4603      	mov	r3, r0
            if (rc != BLE_HS_EAGAIN) {
   1f252:	2801      	cmp	r0, #1
   1f254:	d13a      	bne.n	1f2cc <ble_att_svr_fill_type_value+0xac>
            if (ha->ha_handle_id > end_handle) {
   1f256:	8963      	ldrh	r3, [r4, #10]
   1f258:	4543      	cmp	r3, r8
   1f25a:	d833      	bhi.n	1f2c4 <ble_att_svr_fill_type_value+0xa4>
            prev = 0;
   1f25c:	2700      	movs	r7, #0
            first = 0;
   1f25e:	463d      	mov	r5, r7
        if (ble_uuid_cmp(ha->ha_uuid, &attr_type.u) == 0) {
   1f260:	a905      	add	r1, sp, #20
   1f262:	6860      	ldr	r0, [r4, #4]
   1f264:	f009 fd2a 	bl	28cbc <ble_uuid_cmp>
   1f268:	b188      	cbz	r0, 1f28e <ble_att_svr_fill_type_value+0x6e>
    STAILQ_FOREACH(ha, &ble_att_svr_list, ha_next) {
   1f26a:	6824      	ldr	r4, [r4, #0]
   1f26c:	b364      	cbz	r4, 1f2c8 <ble_att_svr_fill_type_value+0xa8>
        if (ha->ha_handle_id < start_handle) {
   1f26e:	8963      	ldrh	r3, [r4, #10]
   1f270:	42b3      	cmp	r3, r6
   1f272:	d3fa      	bcc.n	1f26a <ble_att_svr_fill_type_value+0x4a>
        if (!first && ha->ha_handle_id > end_handle) {
   1f274:	b90d      	cbnz	r5, 1f27a <ble_att_svr_fill_type_value+0x5a>
   1f276:	4543      	cmp	r3, r8
   1f278:	d826      	bhi.n	1f2c8 <ble_att_svr_fill_type_value+0xa8>
        if (first) {
   1f27a:	2d00      	cmp	r5, #0
   1f27c:	d0f0      	beq.n	1f260 <ble_att_svr_fill_type_value+0x40>
            if (!ble_att_svr_is_valid_group_end(&attr_type.u, ha->ha_uuid)) {
   1f27e:	6861      	ldr	r1, [r4, #4]
   1f280:	a805      	add	r0, sp, #20
   1f282:	f7ff ff3b 	bl	1f0fc <ble_att_svr_is_valid_group_end>
   1f286:	2800      	cmp	r0, #0
   1f288:	d1da      	bne.n	1f240 <ble_att_svr_fill_type_value+0x20>
                prev = ha->ha_handle_id;
   1f28a:	8967      	ldrh	r7, [r4, #10]
                continue;
   1f28c:	e7ed      	b.n	1f26a <ble_att_svr_fill_type_value+0x4a>
            rc = ble_att_svr_read_flat(conn_handle, ha, 0, sizeof buf, buf,
   1f28e:	f8cd 9008 	str.w	r9, [sp, #8]
   1f292:	f10d 031e 	add.w	r3, sp, #30
   1f296:	9301      	str	r3, [sp, #4]
   1f298:	ab08      	add	r3, sp, #32
   1f29a:	9300      	str	r3, [sp, #0]
   1f29c:	2310      	movs	r3, #16
   1f29e:	2200      	movs	r2, #0
   1f2a0:	4621      	mov	r1, r4
   1f2a2:	4658      	mov	r0, fp
   1f2a4:	f7ff ff5f 	bl	1f166 <ble_att_svr_read_flat>
            if (rc != 0) {
   1f2a8:	4603      	mov	r3, r0
   1f2aa:	b978      	cbnz	r0, 1f2cc <ble_att_svr_fill_type_value+0xac>
            rc = os_mbuf_cmpf(rxom, sizeof(struct ble_att_find_type_value_req),
   1f2ac:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   1f2b0:	aa08      	add	r2, sp, #32
   1f2b2:	2106      	movs	r1, #6
   1f2b4:	9816      	ldr	r0, [sp, #88]	; 0x58
   1f2b6:	f7ee f9dd 	bl	d674 <os_mbuf_cmpf>
            if (rc == 0) {
   1f2ba:	2800      	cmp	r0, #0
   1f2bc:	d1d5      	bne.n	1f26a <ble_att_svr_fill_type_value+0x4a>
                first = ha->ha_handle_id;
   1f2be:	8965      	ldrh	r5, [r4, #10]
                prev = ha->ha_handle_id;
   1f2c0:	462f      	mov	r7, r5
   1f2c2:	e7d2      	b.n	1f26a <ble_att_svr_fill_type_value+0x4a>
            prev = 0;
   1f2c4:	2700      	movs	r7, #0
            first = 0;
   1f2c6:	463d      	mov	r5, r7
    if (first) {
   1f2c8:	b94d      	cbnz	r5, 1f2de <ble_att_svr_fill_type_value+0xbe>
        rc = 0;
   1f2ca:	2300      	movs	r3, #0
    any_entries = OS_MBUF_PKTHDR(txom)->omp_len >
   1f2cc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1f2ce:	8a12      	ldrh	r2, [r2, #16]
    if (rc == 0 && !any_entries) {
   1f2d0:	b90b      	cbnz	r3, 1f2d6 <ble_att_svr_fill_type_value+0xb6>
   1f2d2:	2a01      	cmp	r2, #1
   1f2d4:	d910      	bls.n	1f2f8 <ble_att_svr_fill_type_value+0xd8>
}
   1f2d6:	4618      	mov	r0, r3
   1f2d8:	b00d      	add	sp, #52	; 0x34
   1f2da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rc = ble_att_svr_fill_type_value_entry(txom, first, prev, mtu,
   1f2de:	f8cd 9000 	str.w	r9, [sp]
   1f2e2:	4653      	mov	r3, sl
   1f2e4:	463a      	mov	r2, r7
   1f2e6:	4629      	mov	r1, r5
   1f2e8:	9817      	ldr	r0, [sp, #92]	; 0x5c
   1f2ea:	f7ff ff6a 	bl	1f1c2 <ble_att_svr_fill_type_value_entry>
   1f2ee:	4603      	mov	r3, r0
        if (rc == BLE_HS_EAGAIN) {
   1f2f0:	2801      	cmp	r0, #1
   1f2f2:	d1eb      	bne.n	1f2cc <ble_att_svr_fill_type_value+0xac>
            rc = 0;
   1f2f4:	2300      	movs	r3, #0
   1f2f6:	e7e9      	b.n	1f2cc <ble_att_svr_fill_type_value+0xac>
        *out_att_err = BLE_ATT_ERR_ATTR_NOT_FOUND;
   1f2f8:	230a      	movs	r3, #10
   1f2fa:	f889 3000 	strb.w	r3, [r9]
        return BLE_HS_ENOENT;
   1f2fe:	2305      	movs	r3, #5
   1f300:	e7e9      	b.n	1f2d6 <ble_att_svr_fill_type_value+0xb6>
   1f302:	bf00      	nop
   1f304:	2000237c 	.word	0x2000237c

0001f308 <ble_att_svr_build_find_type_value_rsp>:
{
   1f308:	b570      	push	{r4, r5, r6, lr}
   1f30a:	b088      	sub	sp, #32
   1f30c:	4604      	mov	r4, r0
   1f30e:	460d      	mov	r5, r1
   1f310:	4616      	mov	r6, r2
   1f312:	9305      	str	r3, [sp, #20]
    rc = ble_att_svr_pkt(rxom, &txom, out_att_err);
   1f314:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1f316:	a907      	add	r1, sp, #28
   1f318:	980c      	ldr	r0, [sp, #48]	; 0x30
   1f31a:	f7ff fded 	bl	1eef8 <ble_att_svr_pkt>
    if (rc != 0) {
   1f31e:	4603      	mov	r3, r0
   1f320:	b128      	cbz	r0, 1f32e <ble_att_svr_build_find_type_value_rsp+0x26>
    *out_txom = txom;
   1f322:	9907      	ldr	r1, [sp, #28]
   1f324:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1f326:	6011      	str	r1, [r2, #0]
}
   1f328:	4618      	mov	r0, r3
   1f32a:	b008      	add	sp, #32
   1f32c:	bd70      	pop	{r4, r5, r6, pc}
    buf = ble_att_cmd_prepare(BLE_ATT_OP_FIND_TYPE_VALUE_RSP, 0, txom);
   1f32e:	9a07      	ldr	r2, [sp, #28]
   1f330:	2100      	movs	r1, #0
   1f332:	2007      	movs	r0, #7
   1f334:	f7ff fc07 	bl	1eb46 <ble_att_cmd_prepare>
    if (buf == NULL) {
   1f338:	b190      	cbz	r0, 1f360 <ble_att_svr_build_find_type_value_rsp+0x58>
    mtu = ble_att_mtu(conn_handle);
   1f33a:	4620      	mov	r0, r4
   1f33c:	f7ff fb0c 	bl	1e958 <ble_att_mtu>
    rc = ble_att_svr_fill_type_value(conn_handle, start_handle, end_handle,
   1f340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1f342:	681b      	ldr	r3, [r3, #0]
   1f344:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1f346:	9203      	str	r2, [sp, #12]
   1f348:	9002      	str	r0, [sp, #8]
   1f34a:	9a07      	ldr	r2, [sp, #28]
   1f34c:	9201      	str	r2, [sp, #4]
   1f34e:	9300      	str	r3, [sp, #0]
   1f350:	9b05      	ldr	r3, [sp, #20]
   1f352:	4632      	mov	r2, r6
   1f354:	4629      	mov	r1, r5
   1f356:	4620      	mov	r0, r4
   1f358:	f7ff ff62 	bl	1f220 <ble_att_svr_fill_type_value>
   1f35c:	4603      	mov	r3, r0
   1f35e:	e7e0      	b.n	1f322 <ble_att_svr_build_find_type_value_rsp+0x1a>
        *out_att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   1f360:	2311      	movs	r3, #17
   1f362:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1f364:	7013      	strb	r3, [r2, #0]
        rc = BLE_HS_ENOMEM;
   1f366:	2306      	movs	r3, #6
        goto done;
   1f368:	e7db      	b.n	1f322 <ble_att_svr_build_find_type_value_rsp+0x1a>

0001f36a <ble_att_svr_service_uuid>:
{
   1f36a:	b510      	push	{r4, lr}
   1f36c:	b08a      	sub	sp, #40	; 0x28
   1f36e:	460c      	mov	r4, r1
    rc = ble_att_svr_read_flat(BLE_HS_CONN_HANDLE_NONE, entry, 0, sizeof(val), val,
   1f370:	9202      	str	r2, [sp, #8]
   1f372:	f10d 0316 	add.w	r3, sp, #22
   1f376:	9301      	str	r3, [sp, #4]
   1f378:	ab06      	add	r3, sp, #24
   1f37a:	9300      	str	r3, [sp, #0]
   1f37c:	2310      	movs	r3, #16
   1f37e:	2200      	movs	r2, #0
   1f380:	4601      	mov	r1, r0
   1f382:	f64f 70ff 	movw	r0, #65535	; 0xffff
   1f386:	f7ff feee 	bl	1f166 <ble_att_svr_read_flat>
    if (rc != 0) {
   1f38a:	4603      	mov	r3, r0
   1f38c:	b110      	cbz	r0, 1f394 <ble_att_svr_service_uuid+0x2a>
}
   1f38e:	4618      	mov	r0, r3
   1f390:	b00a      	add	sp, #40	; 0x28
   1f392:	bd10      	pop	{r4, pc}
    rc = ble_uuid_init_from_buf(uuid, val, attr_len);
   1f394:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   1f398:	a906      	add	r1, sp, #24
   1f39a:	4620      	mov	r0, r4
   1f39c:	f009 fc65 	bl	28c6a <ble_uuid_init_from_buf>
   1f3a0:	4603      	mov	r3, r0
    return rc;
   1f3a2:	e7f4      	b.n	1f38e <ble_att_svr_service_uuid+0x24>

0001f3a4 <ble_att_svr_build_read_group_type_rsp>:
{
   1f3a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f3a8:	b08b      	sub	sp, #44	; 0x2c
   1f3aa:	460e      	mov	r6, r1
   1f3ac:	4617      	mov	r7, r2
   1f3ae:	9302      	str	r3, [sp, #8]
   1f3b0:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
   1f3b4:	f8dd a058 	ldr.w	sl, [sp, #88]	; 0x58
    *att_err = 0;
   1f3b8:	f04f 0b00 	mov.w	fp, #0
   1f3bc:	f88a b000 	strb.w	fp, [sl]
    *err_handle = start_handle;
   1f3c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1f3c2:	8019      	strh	r1, [r3, #0]
    mtu = ble_att_mtu(conn_handle);
   1f3c4:	f7ff fac8 	bl	1e958 <ble_att_mtu>
   1f3c8:	9003      	str	r0, [sp, #12]
    txom = *rxom;
   1f3ca:	f8d9 8000 	ldr.w	r8, [r9]
    *rxom = NULL;
   1f3ce:	f8c9 b000 	str.w	fp, [r9]
    os_mbuf_adj(txom, OS_MBUF_PKTLEN(txom));
   1f3d2:	f8b8 1010 	ldrh.w	r1, [r8, #16]
   1f3d6:	4640      	mov	r0, r8
   1f3d8:	f7ee f8fa 	bl	d5d0 <os_mbuf_adj>
    rsp = ble_att_cmd_prepare(BLE_ATT_OP_READ_GROUP_TYPE_RSP, sizeof(*rsp),
   1f3dc:	4642      	mov	r2, r8
   1f3de:	2101      	movs	r1, #1
   1f3e0:	2011      	movs	r0, #17
   1f3e2:	f7ff fbb0 	bl	1eb46 <ble_att_cmd_prepare>
    if (rsp == NULL) {
   1f3e6:	b130      	cbz	r0, 1f3f6 <ble_att_svr_build_read_group_type_rsp+0x52>
   1f3e8:	4683      	mov	fp, r0
    rsp->bagp_length = 0;
   1f3ea:	2500      	movs	r5, #0
   1f3ec:	7005      	strb	r5, [r0, #0]
    STAILQ_FOREACH(entry, &ble_att_svr_list, ha_next) {
   1f3ee:	4b4d      	ldr	r3, [pc, #308]	; (1f524 <ble_att_svr_build_read_group_type_rsp+0x180>)
   1f3f0:	681c      	ldr	r4, [r3, #0]
    end_group_handle = 0;
   1f3f2:	46a9      	mov	r9, r5
    STAILQ_FOREACH(entry, &ble_att_svr_list, ha_next) {
   1f3f4:	e042      	b.n	1f47c <ble_att_svr_build_read_group_type_rsp+0xd8>
        *att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   1f3f6:	2311      	movs	r3, #17
   1f3f8:	f88a 3000 	strb.w	r3, [sl]
        rc = BLE_HS_ENOMEM;
   1f3fc:	2306      	movs	r3, #6
    end_group_handle = 0;
   1f3fe:	f04f 0900 	mov.w	r9, #0
        goto done;
   1f402:	e05c      	b.n	1f4be <ble_att_svr_build_read_group_type_rsp+0x11a>
            if (!ble_att_svr_is_valid_read_group_type(entry->ha_uuid)) {
   1f404:	6860      	ldr	r0, [r4, #4]
   1f406:	f7ff fea3 	bl	1f150 <ble_att_svr_is_valid_read_group_type>
   1f40a:	b910      	cbnz	r0, 1f412 <ble_att_svr_build_read_group_type_rsp+0x6e>
                end_group_handle = entry->ha_handle_id;
   1f40c:	f8b4 900a 	ldrh.w	r9, [r4, #10]
   1f410:	e03d      	b.n	1f48e <ble_att_svr_build_read_group_type_rsp+0xea>
                rc = ble_att_svr_read_group_type_entry_write(
   1f412:	ab05      	add	r3, sp, #20
   1f414:	9300      	str	r3, [sp, #0]
   1f416:	464b      	mov	r3, r9
   1f418:	462a      	mov	r2, r5
   1f41a:	9903      	ldr	r1, [sp, #12]
   1f41c:	4640      	mov	r0, r8
   1f41e:	f7ff fe37 	bl	1f090 <ble_att_svr_read_group_type_entry_write>
                if (rc != 0) {
   1f422:	4603      	mov	r3, r0
   1f424:	b918      	cbnz	r0, 1f42e <ble_att_svr_build_read_group_type_rsp+0x8a>
                end_group_handle = 0;
   1f426:	f04f 0900 	mov.w	r9, #0
                start_group_handle = 0;
   1f42a:	464d      	mov	r5, r9
   1f42c:	e031      	b.n	1f492 <ble_att_svr_build_read_group_type_rsp+0xee>
                    *err_handle = entry->ha_handle_id;
   1f42e:	8962      	ldrh	r2, [r4, #10]
   1f430:	9917      	ldr	r1, [sp, #92]	; 0x5c
   1f432:	800a      	strh	r2, [r1, #0]
                    if (rc == BLE_HS_ENOMEM) {
   1f434:	2806      	cmp	r0, #6
   1f436:	d003      	beq.n	1f440 <ble_att_svr_build_read_group_type_rsp+0x9c>
                end_group_handle = 0;
   1f438:	f04f 0900 	mov.w	r9, #0
                start_group_handle = 0;
   1f43c:	464d      	mov	r5, r9
   1f43e:	e03e      	b.n	1f4be <ble_att_svr_build_read_group_type_rsp+0x11a>
                        *att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   1f440:	2211      	movs	r2, #17
   1f442:	f88a 2000 	strb.w	r2, [sl]
                end_group_handle = 0;
   1f446:	f04f 0900 	mov.w	r9, #0
                start_group_handle = 0;
   1f44a:	464d      	mov	r5, r9
   1f44c:	e037      	b.n	1f4be <ble_att_svr_build_read_group_type_rsp+0x11a>
                    *err_handle = entry->ha_handle_id;
   1f44e:	8962      	ldrh	r2, [r4, #10]
   1f450:	9917      	ldr	r1, [sp, #92]	; 0x5c
   1f452:	800a      	strh	r2, [r1, #0]
                    goto done;
   1f454:	e033      	b.n	1f4be <ble_att_svr_build_read_group_type_rsp+0x11a>
                    if (service_uuid.u.type == BLE_UUID_TYPE_16) {
   1f456:	f89d 3014 	ldrb.w	r3, [sp, #20]
   1f45a:	2b10      	cmp	r3, #16
   1f45c:	d003      	beq.n	1f466 <ble_att_svr_build_read_group_type_rsp+0xc2>
                        rsp->bagp_length = BLE_ATT_READ_GROUP_TYPE_ADATA_SZ_128;
   1f45e:	2314      	movs	r3, #20
   1f460:	f88b 3000 	strb.w	r3, [fp]
   1f464:	e007      	b.n	1f476 <ble_att_svr_build_read_group_type_rsp+0xd2>
                        rsp->bagp_length = BLE_ATT_READ_GROUP_TYPE_ADATA_SZ_16;
   1f466:	2306      	movs	r3, #6
   1f468:	f88b 3000 	strb.w	r3, [fp]
   1f46c:	e003      	b.n	1f476 <ble_att_svr_build_read_group_type_rsp+0xd2>
                    if (service_uuid.u.type != BLE_UUID_TYPE_16) {
   1f46e:	f89d 2014 	ldrb.w	r2, [sp, #20]
   1f472:	2a10      	cmp	r2, #16
   1f474:	d123      	bne.n	1f4be <ble_att_svr_build_read_group_type_rsp+0x11a>
                start_group_handle = entry->ha_handle_id;
   1f476:	8965      	ldrh	r5, [r4, #10]
                end_group_handle = entry->ha_handle_id;
   1f478:	46a9      	mov	r9, r5
    STAILQ_FOREACH(entry, &ble_att_svr_list, ha_next) {
   1f47a:	6824      	ldr	r4, [r4, #0]
   1f47c:	2c00      	cmp	r4, #0
   1f47e:	d03a      	beq.n	1f4f6 <ble_att_svr_build_read_group_type_rsp+0x152>
        if (entry->ha_handle_id < start_handle) {
   1f480:	8963      	ldrh	r3, [r4, #10]
   1f482:	42b3      	cmp	r3, r6
   1f484:	d3f9      	bcc.n	1f47a <ble_att_svr_build_read_group_type_rsp+0xd6>
        if (entry->ha_handle_id > end_handle) {
   1f486:	42bb      	cmp	r3, r7
   1f488:	d837      	bhi.n	1f4fa <ble_att_svr_build_read_group_type_rsp+0x156>
        if (start_group_handle != 0) {
   1f48a:	2d00      	cmp	r5, #0
   1f48c:	d1ba      	bne.n	1f404 <ble_att_svr_build_read_group_type_rsp+0x60>
        if (start_group_handle == 0) {
   1f48e:	2d00      	cmp	r5, #0
   1f490:	d1f3      	bne.n	1f47a <ble_att_svr_build_read_group_type_rsp+0xd6>
            if (ble_uuid_cmp(entry->ha_uuid, group_uuid) == 0) {
   1f492:	9902      	ldr	r1, [sp, #8]
   1f494:	6860      	ldr	r0, [r4, #4]
   1f496:	f009 fc11 	bl	28cbc <ble_uuid_cmp>
   1f49a:	2800      	cmp	r0, #0
   1f49c:	d1ed      	bne.n	1f47a <ble_att_svr_build_read_group_type_rsp+0xd6>
                rc = ble_att_svr_service_uuid(entry, &service_uuid, att_err);
   1f49e:	4652      	mov	r2, sl
   1f4a0:	a905      	add	r1, sp, #20
   1f4a2:	4620      	mov	r0, r4
   1f4a4:	f7ff ff61 	bl	1f36a <ble_att_svr_service_uuid>
                if (rc != 0) {
   1f4a8:	4603      	mov	r3, r0
   1f4aa:	2800      	cmp	r0, #0
   1f4ac:	d1cf      	bne.n	1f44e <ble_att_svr_build_read_group_type_rsp+0xaa>
                switch (rsp->bagp_length) {
   1f4ae:	f89b 2000 	ldrb.w	r2, [fp]
   1f4b2:	2a06      	cmp	r2, #6
   1f4b4:	d0db      	beq.n	1f46e <ble_att_svr_build_read_group_type_rsp+0xca>
   1f4b6:	2a14      	cmp	r2, #20
   1f4b8:	d018      	beq.n	1f4ec <ble_att_svr_build_read_group_type_rsp+0x148>
   1f4ba:	2a00      	cmp	r2, #0
   1f4bc:	d0cb      	beq.n	1f456 <ble_att_svr_build_read_group_type_rsp+0xb2>
    if (rc == 0) {
   1f4be:	bb2b      	cbnz	r3, 1f50c <ble_att_svr_build_read_group_type_rsp+0x168>
        if (start_group_handle != 0) {
   1f4c0:	b15d      	cbz	r5, 1f4da <ble_att_svr_build_read_group_type_rsp+0x136>
            if (entry == NULL) {
   1f4c2:	b1e4      	cbz	r4, 1f4fe <ble_att_svr_build_read_group_type_rsp+0x15a>
            rc = ble_att_svr_read_group_type_entry_write(txom, mtu,
   1f4c4:	ab05      	add	r3, sp, #20
   1f4c6:	9300      	str	r3, [sp, #0]
   1f4c8:	464b      	mov	r3, r9
   1f4ca:	462a      	mov	r2, r5
   1f4cc:	9903      	ldr	r1, [sp, #12]
   1f4ce:	4640      	mov	r0, r8
   1f4d0:	f7ff fdde 	bl	1f090 <ble_att_svr_read_group_type_entry_write>
   1f4d4:	4603      	mov	r3, r0
            if (rc == BLE_HS_ENOMEM) {
   1f4d6:	2806      	cmp	r0, #6
   1f4d8:	d014      	beq.n	1f504 <ble_att_svr_build_read_group_type_rsp+0x160>
        if (OS_MBUF_PKTLEN(txom) <= BLE_ATT_READ_GROUP_TYPE_RSP_BASE_SZ) {
   1f4da:	f8b8 2010 	ldrh.w	r2, [r8, #16]
   1f4de:	2a02      	cmp	r2, #2
   1f4e0:	d814      	bhi.n	1f50c <ble_att_svr_build_read_group_type_rsp+0x168>
            *att_err = BLE_ATT_ERR_ATTR_NOT_FOUND;
   1f4e2:	230a      	movs	r3, #10
   1f4e4:	f88a 3000 	strb.w	r3, [sl]
            rc = BLE_HS_ENOENT;
   1f4e8:	2305      	movs	r3, #5
   1f4ea:	e010      	b.n	1f50e <ble_att_svr_build_read_group_type_rsp+0x16a>
                    if (service_uuid.u.type == BLE_UUID_TYPE_16) {
   1f4ec:	f89d 2014 	ldrb.w	r2, [sp, #20]
   1f4f0:	2a10      	cmp	r2, #16
   1f4f2:	d1c0      	bne.n	1f476 <ble_att_svr_build_read_group_type_rsp+0xd2>
   1f4f4:	e7e3      	b.n	1f4be <ble_att_svr_build_read_group_type_rsp+0x11a>
    rc = 0;
   1f4f6:	2300      	movs	r3, #0
   1f4f8:	e7e1      	b.n	1f4be <ble_att_svr_build_read_group_type_rsp+0x11a>
            rc = 0;
   1f4fa:	2300      	movs	r3, #0
   1f4fc:	e7df      	b.n	1f4be <ble_att_svr_build_read_group_type_rsp+0x11a>
                end_group_handle = 0xffff;
   1f4fe:	f64f 79ff 	movw	r9, #65535	; 0xffff
   1f502:	e7df      	b.n	1f4c4 <ble_att_svr_build_read_group_type_rsp+0x120>
                *att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   1f504:	2211      	movs	r2, #17
   1f506:	f88a 2000 	strb.w	r2, [sl]
   1f50a:	e7e6      	b.n	1f4da <ble_att_svr_build_read_group_type_rsp+0x136>
    if (rc == 0 || rc == BLE_HS_EMSGSIZE) {
   1f50c:	b10b      	cbz	r3, 1f512 <ble_att_svr_build_read_group_type_rsp+0x16e>
   1f50e:	2b04      	cmp	r3, #4
   1f510:	d006      	beq.n	1f520 <ble_att_svr_build_read_group_type_rsp+0x17c>
    *out_txom = txom;
   1f512:	9a15      	ldr	r2, [sp, #84]	; 0x54
   1f514:	f8c2 8000 	str.w	r8, [r2]
}
   1f518:	4618      	mov	r0, r3
   1f51a:	b00b      	add	sp, #44	; 0x2c
   1f51c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rc = 0;
   1f520:	2300      	movs	r3, #0
   1f522:	e7f6      	b.n	1f512 <ble_att_svr_build_read_group_type_rsp+0x16e>
   1f524:	2000237c 	.word	0x2000237c

0001f528 <ble_att_svr_prep_free>:
    if (entry != NULL) {
   1f528:	b148      	cbz	r0, 1f53e <ble_att_svr_prep_free+0x16>
{
   1f52a:	b510      	push	{r4, lr}
   1f52c:	4604      	mov	r4, r0
        os_mbuf_free_chain(entry->bape_value);
   1f52e:	6880      	ldr	r0, [r0, #8]
   1f530:	f7ed ff76 	bl	d420 <os_mbuf_free_chain>
        os_memblock_put(&ble_att_svr_prep_entry_pool, entry);
   1f534:	4621      	mov	r1, r4
   1f536:	4802      	ldr	r0, [pc, #8]	; (1f540 <ble_att_svr_prep_free+0x18>)
   1f538:	f7ee fb90 	bl	dc5c <os_memblock_put>
}
   1f53c:	bd10      	pop	{r4, pc}
   1f53e:	4770      	bx	lr
   1f540:	20002684 	.word	0x20002684

0001f544 <ble_att_svr_prep_alloc>:
{
   1f544:	b538      	push	{r3, r4, r5, lr}
   1f546:	4605      	mov	r5, r0
    entry = os_memblock_get(&ble_att_svr_prep_entry_pool);
   1f548:	480c      	ldr	r0, [pc, #48]	; (1f57c <ble_att_svr_prep_alloc+0x38>)
   1f54a:	f7ee fb5f 	bl	dc0c <os_memblock_get>
    if (entry == NULL) {
   1f54e:	4604      	mov	r4, r0
   1f550:	b148      	cbz	r0, 1f566 <ble_att_svr_prep_alloc+0x22>
    memset(entry, 0, sizeof *entry);
   1f552:	2300      	movs	r3, #0
   1f554:	6003      	str	r3, [r0, #0]
   1f556:	6043      	str	r3, [r0, #4]
   1f558:	6083      	str	r3, [r0, #8]
    entry->bape_value = ble_hs_mbuf_l2cap_pkt();
   1f55a:	f006 f859 	bl	25610 <ble_hs_mbuf_l2cap_pkt>
   1f55e:	60a0      	str	r0, [r4, #8]
    if (entry->bape_value == NULL) {
   1f560:	b120      	cbz	r0, 1f56c <ble_att_svr_prep_alloc+0x28>
}
   1f562:	4620      	mov	r0, r4
   1f564:	bd38      	pop	{r3, r4, r5, pc}
        *att_err = BLE_ATT_ERR_PREPARE_QUEUE_FULL;
   1f566:	2309      	movs	r3, #9
   1f568:	702b      	strb	r3, [r5, #0]
        return NULL;
   1f56a:	e7fa      	b.n	1f562 <ble_att_svr_prep_alloc+0x1e>
        ble_att_svr_prep_free(entry);
   1f56c:	4620      	mov	r0, r4
   1f56e:	f7ff ffdb 	bl	1f528 <ble_att_svr_prep_free>
        *att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   1f572:	2311      	movs	r3, #17
   1f574:	702b      	strb	r3, [r5, #0]
        return NULL;
   1f576:	2400      	movs	r4, #0
   1f578:	e7f3      	b.n	1f562 <ble_att_svr_prep_alloc+0x1e>
   1f57a:	bf00      	nop
   1f57c:	20002684 	.word	0x20002684

0001f580 <ble_att_svr_insert_prep_entry>:
{
   1f580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f584:	460e      	mov	r6, r1
   1f586:	4617      	mov	r7, r2
   1f588:	461d      	mov	r5, r3
    conn = ble_hs_conn_find_assert(conn_handle);
   1f58a:	f005 f8e1 	bl	24750 <ble_hs_conn_find_assert>
   1f58e:	4680      	mov	r8, r0
    prep_entry = ble_att_svr_prep_alloc(out_att_err);
   1f590:	9806      	ldr	r0, [sp, #24]
   1f592:	f7ff ffd7 	bl	1f544 <ble_att_svr_prep_alloc>
    if (prep_entry == NULL) {
   1f596:	b378      	cbz	r0, 1f5f8 <ble_att_svr_insert_prep_entry+0x78>
   1f598:	4604      	mov	r4, r0
    prep_entry->bape_handle = handle;
   1f59a:	8086      	strh	r6, [r0, #4]
    prep_entry->bape_offset = offset;
   1f59c:	80c7      	strh	r7, [r0, #6]
        OS_MBUF_PKTLEN(rxom) - sizeof(struct ble_att_prep_write_cmd));
   1f59e:	8a2b      	ldrh	r3, [r5, #16]
    rc = os_mbuf_appendfrom(
   1f5a0:	3b04      	subs	r3, #4
   1f5a2:	b29b      	uxth	r3, r3
   1f5a4:	2204      	movs	r2, #4
   1f5a6:	4629      	mov	r1, r5
   1f5a8:	6880      	ldr	r0, [r0, #8]
   1f5aa:	f7ed ffba 	bl	d522 <os_mbuf_appendfrom>
    if (rc != 0) {
   1f5ae:	4605      	mov	r5, r0
   1f5b0:	b9a8      	cbnz	r0, 1f5de <ble_att_svr_insert_prep_entry+0x5e>
    prep_prev = ble_att_svr_prep_find_prev(&conn->bhc_att_svr,
   1f5b2:	463a      	mov	r2, r7
   1f5b4:	4631      	mov	r1, r6
   1f5b6:	f108 0044 	add.w	r0, r8, #68	; 0x44
   1f5ba:	f7ff fb15 	bl	1ebe8 <ble_att_svr_prep_find_prev>
    if (prep_prev == NULL) {
   1f5be:	b1a8      	cbz	r0, 1f5ec <ble_att_svr_insert_prep_entry+0x6c>
        SLIST_INSERT_AFTER(prep_prev, prep_entry, bape_next);
   1f5c0:	6802      	ldr	r2, [r0, #0]
   1f5c2:	6022      	str	r2, [r4, #0]
   1f5c4:	6004      	str	r4, [r0, #0]
    return os_time_get();
   1f5c6:	f7ee fef3 	bl	e3b0 <os_time_get>
        ble_npl_time_get() + BLE_HS_ATT_SVR_QUEUED_WRITE_TMO;
   1f5ca:	f500 40ea 	add.w	r0, r0, #29952	; 0x7500
   1f5ce:	3030      	adds	r0, #48	; 0x30
    conn->bhc_att_svr.basc_prep_timeout_at =
   1f5d0:	f8c8 0048 	str.w	r0, [r8, #72]	; 0x48
    ble_hs_timer_resched();
   1f5d4:	f004 fb4c 	bl	23c70 <ble_hs_timer_resched>
}
   1f5d8:	4628      	mov	r0, r5
   1f5da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ble_att_svr_prep_free(prep_entry);
   1f5de:	4620      	mov	r0, r4
   1f5e0:	f7ff ffa2 	bl	1f528 <ble_att_svr_prep_free>
        *out_att_err = BLE_ATT_ERR_PREPARE_QUEUE_FULL;
   1f5e4:	2309      	movs	r3, #9
   1f5e6:	9a06      	ldr	r2, [sp, #24]
   1f5e8:	7013      	strb	r3, [r2, #0]
        return rc;
   1f5ea:	e7f5      	b.n	1f5d8 <ble_att_svr_insert_prep_entry+0x58>
        SLIST_INSERT_HEAD(&conn->bhc_att_svr.basc_prep_list, prep_entry,
   1f5ec:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
   1f5f0:	6023      	str	r3, [r4, #0]
   1f5f2:	f8c8 4044 	str.w	r4, [r8, #68]	; 0x44
   1f5f6:	e7e6      	b.n	1f5c6 <ble_att_svr_insert_prep_entry+0x46>
        return BLE_HS_ENOMEM;
   1f5f8:	2506      	movs	r5, #6
   1f5fa:	e7ed      	b.n	1f5d8 <ble_att_svr_insert_prep_entry+0x58>

0001f5fc <ble_att_svr_prep_extract>:
{
   1f5fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1f600:	4605      	mov	r5, r0
   1f602:	4689      	mov	r9, r1
   1f604:	4690      	mov	r8, r2
    first = SLIST_FIRST(prep_list);
   1f606:	6803      	ldr	r3, [r0, #0]
    attr_handle = first->bape_handle;
   1f608:	889f      	ldrh	r7, [r3, #4]
    om = NULL;
   1f60a:	2600      	movs	r6, #0
    while ((entry = SLIST_FIRST(prep_list)) != NULL) {
   1f60c:	e008      	b.n	1f620 <ble_att_svr_prep_extract+0x24>
            om = entry->bape_value;
   1f60e:	68a6      	ldr	r6, [r4, #8]
        entry->bape_value = NULL;
   1f610:	2300      	movs	r3, #0
   1f612:	60a3      	str	r3, [r4, #8]
        SLIST_REMOVE_HEAD(prep_list, bape_next);
   1f614:	682b      	ldr	r3, [r5, #0]
   1f616:	681b      	ldr	r3, [r3, #0]
   1f618:	602b      	str	r3, [r5, #0]
        ble_att_svr_prep_free(entry);
   1f61a:	4620      	mov	r0, r4
   1f61c:	f7ff ff84 	bl	1f528 <ble_att_svr_prep_free>
    while ((entry = SLIST_FIRST(prep_list)) != NULL) {
   1f620:	682c      	ldr	r4, [r5, #0]
   1f622:	b14c      	cbz	r4, 1f638 <ble_att_svr_prep_extract+0x3c>
        if (entry->bape_handle != attr_handle) {
   1f624:	88a3      	ldrh	r3, [r4, #4]
   1f626:	42bb      	cmp	r3, r7
   1f628:	d106      	bne.n	1f638 <ble_att_svr_prep_extract+0x3c>
        if (om == NULL) {
   1f62a:	2e00      	cmp	r6, #0
   1f62c:	d0ef      	beq.n	1f60e <ble_att_svr_prep_extract+0x12>
            os_mbuf_concat(om, entry->bape_value);
   1f62e:	68a1      	ldr	r1, [r4, #8]
   1f630:	4630      	mov	r0, r6
   1f632:	f7ee f903 	bl	d83c <os_mbuf_concat>
   1f636:	e7eb      	b.n	1f610 <ble_att_svr_prep_extract+0x14>
    *out_attr_handle = attr_handle;
   1f638:	f8a9 7000 	strh.w	r7, [r9]
    *out_om = om;
   1f63c:	f8c8 6000 	str.w	r6, [r8]
}
   1f640:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001f644 <ble_att_svr_free_start_mem>:
     */
}

static void
ble_att_svr_free_start_mem(void)
{
   1f644:	b510      	push	{r4, lr}
    free(ble_att_svr_entry_mem);
   1f646:	4c03      	ldr	r4, [pc, #12]	; (1f654 <ble_att_svr_free_start_mem+0x10>)
   1f648:	6820      	ldr	r0, [r4, #0]
   1f64a:	f00f fdb7 	bl	2f1bc <free>
    ble_att_svr_entry_mem = NULL;
   1f64e:	2300      	movs	r3, #0
   1f650:	6023      	str	r3, [r4, #0]
}
   1f652:	bd10      	pop	{r4, pc}
   1f654:	20002350 	.word	0x20002350

0001f658 <ble_att_svr_register>:
{
   1f658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f65c:	4680      	mov	r8, r0
   1f65e:	460f      	mov	r7, r1
   1f660:	4616      	mov	r6, r2
   1f662:	461d      	mov	r5, r3
    entry = ble_att_svr_entry_alloc();
   1f664:	f7ff fb00 	bl	1ec68 <ble_att_svr_entry_alloc>
    if (entry == NULL) {
   1f668:	b1b8      	cbz	r0, 1f69a <ble_att_svr_register+0x42>
   1f66a:	4604      	mov	r4, r0
    entry->ha_uuid = uuid;
   1f66c:	f8c0 8004 	str.w	r8, [r0, #4]
    entry->ha_flags = flags;
   1f670:	7207      	strb	r7, [r0, #8]
    entry->ha_min_key_size = min_key_size;
   1f672:	7246      	strb	r6, [r0, #9]
    entry->ha_handle_id = ble_att_svr_next_id();
   1f674:	f7ff fab0 	bl	1ebd8 <ble_att_svr_next_id>
   1f678:	8160      	strh	r0, [r4, #10]
    entry->ha_cb = cb;
   1f67a:	9b06      	ldr	r3, [sp, #24]
   1f67c:	60e3      	str	r3, [r4, #12]
    entry->ha_cb_arg = cb_arg;
   1f67e:	9b07      	ldr	r3, [sp, #28]
   1f680:	6123      	str	r3, [r4, #16]
    STAILQ_INSERT_TAIL(&ble_att_svr_list, entry, ha_next);
   1f682:	2300      	movs	r3, #0
   1f684:	6023      	str	r3, [r4, #0]
   1f686:	4b07      	ldr	r3, [pc, #28]	; (1f6a4 <ble_att_svr_register+0x4c>)
   1f688:	685a      	ldr	r2, [r3, #4]
   1f68a:	6014      	str	r4, [r2, #0]
   1f68c:	605c      	str	r4, [r3, #4]
    if (handle_id != NULL) {
   1f68e:	b135      	cbz	r5, 1f69e <ble_att_svr_register+0x46>
        *handle_id = entry->ha_handle_id;
   1f690:	8963      	ldrh	r3, [r4, #10]
   1f692:	802b      	strh	r3, [r5, #0]
    return 0;
   1f694:	2000      	movs	r0, #0
}
   1f696:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return BLE_HS_ENOMEM;
   1f69a:	2006      	movs	r0, #6
   1f69c:	e7fb      	b.n	1f696 <ble_att_svr_register+0x3e>
    return 0;
   1f69e:	2000      	movs	r0, #0
   1f6a0:	e7f9      	b.n	1f696 <ble_att_svr_register+0x3e>
   1f6a2:	bf00      	nop
   1f6a4:	2000237c 	.word	0x2000237c

0001f6a8 <ble_att_svr_prev_handle>:
}
   1f6a8:	4b01      	ldr	r3, [pc, #4]	; (1f6b0 <ble_att_svr_prev_handle+0x8>)
   1f6aa:	8818      	ldrh	r0, [r3, #0]
   1f6ac:	4770      	bx	lr
   1f6ae:	bf00      	nop
   1f6b0:	20002378 	.word	0x20002378

0001f6b4 <ble_att_svr_find_by_handle>:
    for (entry = STAILQ_FIRST(&ble_att_svr_list);
   1f6b4:	4b04      	ldr	r3, [pc, #16]	; (1f6c8 <ble_att_svr_find_by_handle+0x14>)
   1f6b6:	681b      	ldr	r3, [r3, #0]
   1f6b8:	b123      	cbz	r3, 1f6c4 <ble_att_svr_find_by_handle+0x10>
        if (entry->ha_handle_id == handle_id) {
   1f6ba:	895a      	ldrh	r2, [r3, #10]
   1f6bc:	4282      	cmp	r2, r0
   1f6be:	d001      	beq.n	1f6c4 <ble_att_svr_find_by_handle+0x10>
         entry = STAILQ_NEXT(entry, ha_next)) {
   1f6c0:	681b      	ldr	r3, [r3, #0]
   1f6c2:	e7f9      	b.n	1f6b8 <ble_att_svr_find_by_handle+0x4>
}
   1f6c4:	4618      	mov	r0, r3
   1f6c6:	4770      	bx	lr
   1f6c8:	2000237c 	.word	0x2000237c

0001f6cc <ble_att_svr_write_handle>:
{
   1f6cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f6ce:	b083      	sub	sp, #12
   1f6d0:	4605      	mov	r5, r0
   1f6d2:	4616      	mov	r6, r2
   1f6d4:	461f      	mov	r7, r3
   1f6d6:	9c08      	ldr	r4, [sp, #32]
    entry = ble_att_svr_find_by_handle(attr_handle);
   1f6d8:	4608      	mov	r0, r1
   1f6da:	f7ff ffeb 	bl	1f6b4 <ble_att_svr_find_by_handle>
    if (entry == NULL) {
   1f6de:	b140      	cbz	r0, 1f6f2 <ble_att_svr_write_handle+0x26>
   1f6e0:	4601      	mov	r1, r0
    rc = ble_att_svr_write(conn_handle, entry, offset, om, out_att_err);
   1f6e2:	9400      	str	r4, [sp, #0]
   1f6e4:	463b      	mov	r3, r7
   1f6e6:	4632      	mov	r2, r6
   1f6e8:	4628      	mov	r0, r5
   1f6ea:	f7ff fb94 	bl	1ee16 <ble_att_svr_write>
}
   1f6ee:	b003      	add	sp, #12
   1f6f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (out_att_err != NULL) {
   1f6f2:	b11c      	cbz	r4, 1f6fc <ble_att_svr_write_handle+0x30>
            *out_att_err = BLE_ATT_ERR_INVALID_HANDLE;
   1f6f4:	2301      	movs	r3, #1
   1f6f6:	7023      	strb	r3, [r4, #0]
        return BLE_HS_ENOENT;
   1f6f8:	2005      	movs	r0, #5
   1f6fa:	e7f8      	b.n	1f6ee <ble_att_svr_write_handle+0x22>
   1f6fc:	2005      	movs	r0, #5
   1f6fe:	e7f6      	b.n	1f6ee <ble_att_svr_write_handle+0x22>

0001f700 <ble_att_svr_prep_write>:
{
   1f700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f704:	b084      	sub	sp, #16
   1f706:	4606      	mov	r6, r0
   1f708:	460c      	mov	r4, r1
   1f70a:	4617      	mov	r7, r2
    *err_handle = 0; /* Silence unnecessary warning. */
   1f70c:	2300      	movs	r3, #0
   1f70e:	8013      	strh	r3, [r2, #0]
    rc = ble_att_svr_prep_validate(prep_list, err_handle);
   1f710:	4611      	mov	r1, r2
   1f712:	4620      	mov	r0, r4
   1f714:	f7ff fa7a 	bl	1ec0c <ble_att_svr_prep_validate>
    if (rc != 0) {
   1f718:	4680      	mov	r8, r0
   1f71a:	b9f8      	cbnz	r0, 1f75c <ble_att_svr_prep_write+0x5c>
    while (!SLIST_EMPTY(prep_list)) {
   1f71c:	6823      	ldr	r3, [r4, #0]
   1f71e:	b1eb      	cbz	r3, 1f75c <ble_att_svr_prep_write+0x5c>
        ble_att_svr_prep_extract(prep_list, &attr_handle, &om);
   1f720:	aa03      	add	r2, sp, #12
   1f722:	f10d 010a 	add.w	r1, sp, #10
   1f726:	4620      	mov	r0, r4
   1f728:	f7ff ff68 	bl	1f5fc <ble_att_svr_prep_extract>
        attr = ble_att_svr_find_by_handle(attr_handle);
   1f72c:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   1f730:	f7ff ffc0 	bl	1f6b4 <ble_att_svr_find_by_handle>
        rc = ble_att_svr_write(conn_handle, attr, 0, &om, &att_err);
   1f734:	f10d 0309 	add.w	r3, sp, #9
   1f738:	9300      	str	r3, [sp, #0]
   1f73a:	ab03      	add	r3, sp, #12
   1f73c:	2200      	movs	r2, #0
   1f73e:	4601      	mov	r1, r0
   1f740:	4630      	mov	r0, r6
   1f742:	f7ff fb68 	bl	1ee16 <ble_att_svr_write>
   1f746:	4605      	mov	r5, r0
        os_mbuf_free_chain(om);
   1f748:	9803      	ldr	r0, [sp, #12]
   1f74a:	f7ed fe69 	bl	d420 <os_mbuf_free_chain>
        if (rc != 0) {
   1f74e:	2d00      	cmp	r5, #0
   1f750:	d0e4      	beq.n	1f71c <ble_att_svr_prep_write+0x1c>
            *err_handle = attr_handle;
   1f752:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   1f756:	803b      	strh	r3, [r7, #0]
            return att_err;
   1f758:	f89d 8009 	ldrb.w	r8, [sp, #9]
}
   1f75c:	4640      	mov	r0, r8
   1f75e:	b004      	add	sp, #16
   1f760:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001f764 <ble_att_svr_find_by_uuid>:
{
   1f764:	b570      	push	{r4, r5, r6, lr}
   1f766:	460d      	mov	r5, r1
   1f768:	4616      	mov	r6, r2
    if (prev == NULL) {
   1f76a:	b160      	cbz	r0, 1f786 <ble_att_svr_find_by_uuid+0x22>
        entry = STAILQ_NEXT(prev, ha_next);
   1f76c:	6804      	ldr	r4, [r0, #0]
    for (;
   1f76e:	b174      	cbz	r4, 1f78e <ble_att_svr_find_by_uuid+0x2a>
         entry != NULL && entry->ha_handle_id <= end_handle;
   1f770:	8963      	ldrh	r3, [r4, #10]
   1f772:	42b3      	cmp	r3, r6
   1f774:	d80a      	bhi.n	1f78c <ble_att_svr_find_by_uuid+0x28>
        if (uuid == NULL || ble_uuid_cmp(entry->ha_uuid, uuid) == 0) {
   1f776:	b155      	cbz	r5, 1f78e <ble_att_svr_find_by_uuid+0x2a>
   1f778:	4629      	mov	r1, r5
   1f77a:	6860      	ldr	r0, [r4, #4]
   1f77c:	f009 fa9e 	bl	28cbc <ble_uuid_cmp>
   1f780:	b128      	cbz	r0, 1f78e <ble_att_svr_find_by_uuid+0x2a>
         entry = STAILQ_NEXT(entry, ha_next)) {
   1f782:	6824      	ldr	r4, [r4, #0]
   1f784:	e7f3      	b.n	1f76e <ble_att_svr_find_by_uuid+0xa>
        entry = STAILQ_FIRST(&ble_att_svr_list);
   1f786:	4b03      	ldr	r3, [pc, #12]	; (1f794 <ble_att_svr_find_by_uuid+0x30>)
   1f788:	681c      	ldr	r4, [r3, #0]
   1f78a:	e7f0      	b.n	1f76e <ble_att_svr_find_by_uuid+0xa>
    return NULL;
   1f78c:	2400      	movs	r4, #0
}
   1f78e:	4620      	mov	r0, r4
   1f790:	bd70      	pop	{r4, r5, r6, pc}
   1f792:	bf00      	nop
   1f794:	2000237c 	.word	0x2000237c

0001f798 <ble_att_svr_build_read_type_rsp>:
{
   1f798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f79c:	b08f      	sub	sp, #60	; 0x3c
   1f79e:	9006      	str	r0, [sp, #24]
   1f7a0:	460d      	mov	r5, r1
   1f7a2:	4617      	mov	r7, r2
   1f7a4:	9305      	str	r3, [sp, #20]
   1f7a6:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1f7a8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
    *att_err = 0;    /* Silence unnecessary warning. */
   1f7ac:	2200      	movs	r2, #0
   1f7ae:	f88a 2000 	strb.w	r2, [sl]
    *err_handle = start_handle;
   1f7b2:	991b      	ldr	r1, [sp, #108]	; 0x6c
   1f7b4:	800d      	strh	r5, [r1, #0]
    txom = *rxom;
   1f7b6:	681e      	ldr	r6, [r3, #0]
    *rxom = NULL;
   1f7b8:	601a      	str	r2, [r3, #0]
    os_mbuf_adj(txom, OS_MBUF_PKTLEN(txom));
   1f7ba:	8a31      	ldrh	r1, [r6, #16]
   1f7bc:	4630      	mov	r0, r6
   1f7be:	f7ed ff07 	bl	d5d0 <os_mbuf_adj>
    rsp = ble_att_cmd_prepare(BLE_ATT_OP_READ_TYPE_RSP, sizeof(*rsp), txom);
   1f7c2:	4632      	mov	r2, r6
   1f7c4:	2101      	movs	r1, #1
   1f7c6:	2009      	movs	r0, #9
   1f7c8:	f7ff f9bd 	bl	1eb46 <ble_att_cmd_prepare>
    if (rsp == NULL) {
   1f7cc:	9007      	str	r0, [sp, #28]
   1f7ce:	b140      	cbz	r0, 1f7e2 <ble_att_svr_build_read_type_rsp+0x4a>
    mtu = ble_att_mtu(conn_handle);
   1f7d0:	9806      	ldr	r0, [sp, #24]
   1f7d2:	f7ff f8c1 	bl	1e958 <ble_att_mtu>
   1f7d6:	4681      	mov	r9, r0
    prev_attr_len = 0;
   1f7d8:	f04f 0800 	mov.w	r8, #0
    entry_written = 0;
   1f7dc:	46c3      	mov	fp, r8
    entry = NULL;
   1f7de:	4644      	mov	r4, r8
   1f7e0:	e035      	b.n	1f84e <ble_att_svr_build_read_type_rsp+0xb6>
        *att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   1f7e2:	2311      	movs	r3, #17
   1f7e4:	f88a 3000 	strb.w	r3, [sl]
        *err_handle = 0;
   1f7e8:	f04f 0b00 	mov.w	fp, #0
   1f7ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1f7ee:	f8a3 b000 	strh.w	fp, [r3]
        rc = BLE_HS_ENOMEM;
   1f7f2:	2206      	movs	r2, #6
    prev_attr_len = 0;
   1f7f4:	46d8      	mov	r8, fp
    if (!entry_written) {
   1f7f6:	f1bb 0f00 	cmp.w	fp, #0
   1f7fa:	d15a      	bne.n	1f8b2 <ble_att_svr_build_read_type_rsp+0x11a>
        if (*att_err == 0) {
   1f7fc:	f89a 3000 	ldrb.w	r3, [sl]
   1f800:	b913      	cbnz	r3, 1f808 <ble_att_svr_build_read_type_rsp+0x70>
            *att_err = BLE_ATT_ERR_ATTR_NOT_FOUND;
   1f802:	230a      	movs	r3, #10
   1f804:	f88a 3000 	strb.w	r3, [sl]
        if (rc == 0) {
   1f808:	2a00      	cmp	r2, #0
   1f80a:	d15a      	bne.n	1f8c2 <ble_att_svr_build_read_type_rsp+0x12a>
            rc = BLE_HS_ENOENT;
   1f80c:	2205      	movs	r2, #5
   1f80e:	e058      	b.n	1f8c2 <ble_att_svr_build_read_type_rsp+0x12a>
                *err_handle = entry->ha_handle_id;
   1f810:	8963      	ldrh	r3, [r4, #10]
   1f812:	991b      	ldr	r1, [sp, #108]	; 0x6c
   1f814:	800b      	strh	r3, [r1, #0]
                goto done;
   1f816:	e7ee      	b.n	1f7f6 <ble_att_svr_build_read_type_rsp+0x5e>
            } else if (prev_attr_len != attr_len) {
   1f818:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
   1f81c:	4543      	cmp	r3, r8
   1f81e:	d1ea      	bne.n	1f7f6 <ble_att_svr_build_read_type_rsp+0x5e>
            txomlen = OS_MBUF_PKTHDR(txom)->omp_len + 2 + attr_len;
   1f820:	8a33      	ldrh	r3, [r6, #16]
   1f822:	3302      	adds	r3, #2
   1f824:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
   1f828:	440b      	add	r3, r1
            if (txomlen > mtu) {
   1f82a:	4599      	cmp	r9, r3
   1f82c:	dbe3      	blt.n	1f7f6 <ble_att_svr_build_read_type_rsp+0x5e>
            data = os_mbuf_extend(txom, 2 + attr_len);
   1f82e:	3102      	adds	r1, #2
   1f830:	b289      	uxth	r1, r1
   1f832:	4630      	mov	r0, r6
   1f834:	f7ee f824 	bl	d880 <os_mbuf_extend>
            if (data == NULL) {
   1f838:	b388      	cbz	r0, 1f89e <ble_att_svr_build_read_type_rsp+0x106>
            data->handle = htole16(entry->ha_handle_id);
   1f83a:	8962      	ldrh	r2, [r4, #10]
   1f83c:	f820 2b02 	strh.w	r2, [r0], #2
            memcpy(data->value, buf, attr_len);
   1f840:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
   1f844:	a908      	add	r1, sp, #32
   1f846:	f7ef f8ab 	bl	e9a0 <memcpy>
            entry_written = 1;
   1f84a:	f04f 0b01 	mov.w	fp, #1
        entry = ble_att_svr_find_by_uuid(entry, uuid, end_handle);
   1f84e:	463a      	mov	r2, r7
   1f850:	9905      	ldr	r1, [sp, #20]
   1f852:	4620      	mov	r0, r4
   1f854:	f7ff ff86 	bl	1f764 <ble_att_svr_find_by_uuid>
        if (entry == NULL) {
   1f858:	4604      	mov	r4, r0
   1f85a:	b340      	cbz	r0, 1f8ae <ble_att_svr_build_read_type_rsp+0x116>
        if (entry->ha_handle_id >= start_handle) {
   1f85c:	8943      	ldrh	r3, [r0, #10]
   1f85e:	42ab      	cmp	r3, r5
   1f860:	d3f5      	bcc.n	1f84e <ble_att_svr_build_read_type_rsp+0xb6>
            rc = ble_att_svr_read_flat(conn_handle, entry, 0, sizeof buf, buf,
   1f862:	f8cd a008 	str.w	sl, [sp, #8]
   1f866:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   1f86a:	9301      	str	r3, [sp, #4]
   1f86c:	ab08      	add	r3, sp, #32
   1f86e:	9300      	str	r3, [sp, #0]
   1f870:	2313      	movs	r3, #19
   1f872:	2200      	movs	r2, #0
   1f874:	4601      	mov	r1, r0
   1f876:	9806      	ldr	r0, [sp, #24]
   1f878:	f7ff fc75 	bl	1f166 <ble_att_svr_read_flat>
            if (rc != 0) {
   1f87c:	4602      	mov	r2, r0
   1f87e:	2800      	cmp	r0, #0
   1f880:	d1c6      	bne.n	1f810 <ble_att_svr_build_read_type_rsp+0x78>
            if (attr_len > mtu - 4) {
   1f882:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
   1f886:	f1a9 0304 	sub.w	r3, r9, #4
   1f88a:	4299      	cmp	r1, r3
   1f88c:	dd01      	ble.n	1f892 <ble_att_svr_build_read_type_rsp+0xfa>
                attr_len = mtu - 4;
   1f88e:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
            if (prev_attr_len == 0) {
   1f892:	f1b8 0f00 	cmp.w	r8, #0
   1f896:	d1bf      	bne.n	1f818 <ble_att_svr_build_read_type_rsp+0x80>
                prev_attr_len = attr_len;
   1f898:	f8bd 8036 	ldrh.w	r8, [sp, #54]	; 0x36
   1f89c:	e7c0      	b.n	1f820 <ble_att_svr_build_read_type_rsp+0x88>
                *att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   1f89e:	2311      	movs	r3, #17
   1f8a0:	f88a 3000 	strb.w	r3, [sl]
                *err_handle = entry->ha_handle_id;
   1f8a4:	8963      	ldrh	r3, [r4, #10]
   1f8a6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   1f8a8:	8013      	strh	r3, [r2, #0]
                rc = BLE_HS_ENOMEM;
   1f8aa:	2206      	movs	r2, #6
                goto done;
   1f8ac:	e7a3      	b.n	1f7f6 <ble_att_svr_build_read_type_rsp+0x5e>
            rc = BLE_HS_ENOENT;
   1f8ae:	2205      	movs	r2, #5
   1f8b0:	e7a1      	b.n	1f7f6 <ble_att_svr_build_read_type_rsp+0x5e>
        *att_err = 0;
   1f8b2:	2200      	movs	r2, #0
   1f8b4:	f88a 2000 	strb.w	r2, [sl]
        rsp->batp_length = htole16(sizeof(*data) + prev_attr_len);
   1f8b8:	f108 0802 	add.w	r8, r8, #2
   1f8bc:	9b07      	ldr	r3, [sp, #28]
   1f8be:	f883 8000 	strb.w	r8, [r3]
    *out_txom = txom;
   1f8c2:	9b19      	ldr	r3, [sp, #100]	; 0x64
   1f8c4:	601e      	str	r6, [r3, #0]
}
   1f8c6:	4610      	mov	r0, r2
   1f8c8:	b00f      	add	sp, #60	; 0x3c
   1f8ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001f8ce <ble_att_svr_ticks_until_tmo>:
    if (SLIST_EMPTY(&svr->basc_prep_list)) {
   1f8ce:	6803      	ldr	r3, [r0, #0]
   1f8d0:	b12b      	cbz	r3, 1f8de <ble_att_svr_ticks_until_tmo+0x10>
    time_diff = svr->basc_prep_timeout_at - now;
   1f8d2:	6840      	ldr	r0, [r0, #4]
    if (time_diff < 0) {
   1f8d4:	1a40      	subs	r0, r0, r1
   1f8d6:	d400      	bmi.n	1f8da <ble_att_svr_ticks_until_tmo+0xc>
}
   1f8d8:	4770      	bx	lr
        return 0;
   1f8da:	2000      	movs	r0, #0
   1f8dc:	4770      	bx	lr
        return BLE_HS_FOREVER;
   1f8de:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1f8e2:	e7f9      	b.n	1f8d8 <ble_att_svr_ticks_until_tmo+0xa>

0001f8e4 <ble_att_svr_read_handle>:
{
   1f8e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f8e6:	b083      	sub	sp, #12
   1f8e8:	4605      	mov	r5, r0
   1f8ea:	4616      	mov	r6, r2
   1f8ec:	461f      	mov	r7, r3
   1f8ee:	9c08      	ldr	r4, [sp, #32]
    entry = ble_att_svr_find_by_handle(attr_handle);
   1f8f0:	4608      	mov	r0, r1
   1f8f2:	f7ff fedf 	bl	1f6b4 <ble_att_svr_find_by_handle>
    if (entry == NULL) {
   1f8f6:	b140      	cbz	r0, 1f90a <ble_att_svr_read_handle+0x26>
   1f8f8:	4601      	mov	r1, r0
    rc = ble_att_svr_read(conn_handle, entry, offset, om, out_att_err);
   1f8fa:	9400      	str	r4, [sp, #0]
   1f8fc:	463b      	mov	r3, r7
   1f8fe:	4632      	mov	r2, r6
   1f900:	4628      	mov	r0, r5
   1f902:	f7ff fa59 	bl	1edb8 <ble_att_svr_read>
}
   1f906:	b003      	add	sp, #12
   1f908:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (out_att_err != NULL) {
   1f90a:	b11c      	cbz	r4, 1f914 <ble_att_svr_read_handle+0x30>
            *out_att_err = BLE_ATT_ERR_INVALID_HANDLE;
   1f90c:	2301      	movs	r3, #1
   1f90e:	7023      	strb	r3, [r4, #0]
        return BLE_HS_ENOENT;
   1f910:	2005      	movs	r0, #5
   1f912:	e7f8      	b.n	1f906 <ble_att_svr_read_handle+0x22>
   1f914:	2005      	movs	r0, #5
   1f916:	e7f6      	b.n	1f906 <ble_att_svr_read_handle+0x22>

0001f918 <ble_att_svr_build_read_mult_rsp>:
{
   1f918:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1f91c:	b084      	sub	sp, #16
   1f91e:	4607      	mov	r7, r0
   1f920:	460c      	mov	r4, r1
   1f922:	4691      	mov	r9, r2
   1f924:	461d      	mov	r5, r3
    mtu = ble_att_mtu(conn_handle);
   1f926:	f7ff f817 	bl	1e958 <ble_att_mtu>
   1f92a:	4606      	mov	r6, r0
    rc = ble_att_svr_pkt(rxom, &txom, att_err);
   1f92c:	462a      	mov	r2, r5
   1f92e:	a903      	add	r1, sp, #12
   1f930:	4620      	mov	r0, r4
   1f932:	f7ff fae1 	bl	1eef8 <ble_att_svr_pkt>
    if (rc != 0) {
   1f936:	4680      	mov	r8, r0
   1f938:	b148      	cbz	r0, 1f94e <ble_att_svr_build_read_mult_rsp+0x36>
        *err_handle = 0;
   1f93a:	2300      	movs	r3, #0
   1f93c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1f93e:	8013      	strh	r3, [r2, #0]
    *out_txom = txom;
   1f940:	9b03      	ldr	r3, [sp, #12]
   1f942:	f8c9 3000 	str.w	r3, [r9]
}
   1f946:	4640      	mov	r0, r8
   1f948:	b004      	add	sp, #16
   1f94a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (ble_att_cmd_prepare(BLE_ATT_OP_READ_MULT_RSP, 0, txom) == NULL) {
   1f94e:	9a03      	ldr	r2, [sp, #12]
   1f950:	2100      	movs	r1, #0
   1f952:	200f      	movs	r0, #15
   1f954:	f7ff f8f7 	bl	1eb46 <ble_att_cmd_prepare>
   1f958:	b320      	cbz	r0, 1f9a4 <ble_att_svr_build_read_mult_rsp+0x8c>
    while (OS_MBUF_PKTLEN(*rxom) >= 2 && OS_MBUF_PKTLEN(txom) < mtu) {
   1f95a:	6823      	ldr	r3, [r4, #0]
   1f95c:	8a1b      	ldrh	r3, [r3, #16]
   1f95e:	2b01      	cmp	r3, #1
   1f960:	d9ee      	bls.n	1f940 <ble_att_svr_build_read_mult_rsp+0x28>
   1f962:	9b03      	ldr	r3, [sp, #12]
   1f964:	8a1b      	ldrh	r3, [r3, #16]
   1f966:	42b3      	cmp	r3, r6
   1f968:	d2ea      	bcs.n	1f940 <ble_att_svr_build_read_mult_rsp+0x28>
        rc = ble_att_svr_pullup_req_base(rxom, 2, att_err);
   1f96a:	462a      	mov	r2, r5
   1f96c:	2102      	movs	r1, #2
   1f96e:	4620      	mov	r0, r4
   1f970:	f7ff fa82 	bl	1ee78 <ble_att_svr_pullup_req_base>
        if (rc != 0) {
   1f974:	b9f0      	cbnz	r0, 1f9b4 <ble_att_svr_build_read_mult_rsp+0x9c>
        handle = get_le16((*rxom)->om_data);
   1f976:	6823      	ldr	r3, [r4, #0]
   1f978:	6818      	ldr	r0, [r3, #0]
   1f97a:	f00f f9f8 	bl	2ed6e <get_le16>
   1f97e:	4682      	mov	sl, r0
        os_mbuf_adj(*rxom, 2);
   1f980:	2102      	movs	r1, #2
   1f982:	6820      	ldr	r0, [r4, #0]
   1f984:	f7ed fe24 	bl	d5d0 <os_mbuf_adj>
        rc = ble_att_svr_read_handle(conn_handle, handle, 0, txom, att_err);
   1f988:	9500      	str	r5, [sp, #0]
   1f98a:	9b03      	ldr	r3, [sp, #12]
   1f98c:	2200      	movs	r2, #0
   1f98e:	4651      	mov	r1, sl
   1f990:	4638      	mov	r0, r7
   1f992:	f7ff ffa7 	bl	1f8e4 <ble_att_svr_read_handle>
        if (rc != 0) {
   1f996:	2800      	cmp	r0, #0
   1f998:	d0df      	beq.n	1f95a <ble_att_svr_build_read_mult_rsp+0x42>
            *err_handle = handle;
   1f99a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1f99c:	f8a2 a000 	strh.w	sl, [r2]
        rc = ble_att_svr_read_handle(conn_handle, handle, 0, txom, att_err);
   1f9a0:	4680      	mov	r8, r0
            goto done;
   1f9a2:	e7cd      	b.n	1f940 <ble_att_svr_build_read_mult_rsp+0x28>
        *att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   1f9a4:	2311      	movs	r3, #17
   1f9a6:	702b      	strb	r3, [r5, #0]
        *err_handle = 0;
   1f9a8:	2300      	movs	r3, #0
   1f9aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1f9ac:	8013      	strh	r3, [r2, #0]
        rc = BLE_HS_ENOMEM;
   1f9ae:	f04f 0806 	mov.w	r8, #6
        goto done;
   1f9b2:	e7c5      	b.n	1f940 <ble_att_svr_build_read_mult_rsp+0x28>
            *err_handle = 0;
   1f9b4:	2200      	movs	r2, #0
   1f9b6:	990c      	ldr	r1, [sp, #48]	; 0x30
   1f9b8:	800a      	strh	r2, [r1, #0]
        rc = ble_att_svr_pullup_req_base(rxom, 2, att_err);
   1f9ba:	4680      	mov	r8, r0
            goto done;
   1f9bc:	e7c0      	b.n	1f940 <ble_att_svr_build_read_mult_rsp+0x28>

0001f9be <ble_att_svr_tx_error_rsp>:
{
   1f9be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f9c0:	4605      	mov	r5, r0
   1f9c2:	460c      	mov	r4, r1
   1f9c4:	4617      	mov	r7, r2
   1f9c6:	461e      	mov	r6, r3
    rsp = ble_att_cmd_prepare(BLE_ATT_OP_ERROR_RSP, sizeof(*rsp), txom);
   1f9c8:	460a      	mov	r2, r1
   1f9ca:	2104      	movs	r1, #4
   1f9cc:	2001      	movs	r0, #1
   1f9ce:	f7ff f8ba 	bl	1eb46 <ble_att_cmd_prepare>
    if (rsp == NULL) {
   1f9d2:	b150      	cbz	r0, 1f9ea <ble_att_svr_tx_error_rsp+0x2c>
    rsp->baep_req_op = req_op;
   1f9d4:	7007      	strb	r7, [r0, #0]
    rsp->baep_handle = htole16(handle);
   1f9d6:	f8a0 6001 	strh.w	r6, [r0, #1]
    rsp->baep_error_code = error_code;
   1f9da:	f89d 2018 	ldrb.w	r2, [sp, #24]
   1f9de:	70c2      	strb	r2, [r0, #3]
    return ble_att_tx(conn_handle, txom);
   1f9e0:	4621      	mov	r1, r4
   1f9e2:	4628      	mov	r0, r5
   1f9e4:	f7ff f8d2 	bl	1eb8c <ble_att_tx>
}
   1f9e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return BLE_HS_ENOMEM;
   1f9ea:	2006      	movs	r0, #6
   1f9ec:	e7fc      	b.n	1f9e8 <ble_att_svr_tx_error_rsp+0x2a>
	...

0001f9f0 <ble_att_svr_tx_rsp>:
{
   1f9f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1f9f4:	b085      	sub	sp, #20
   1f9f6:	4607      	mov	r7, r0
   1f9f8:	4614      	mov	r4, r2
   1f9fa:	4699      	mov	r9, r3
   1f9fc:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
    if (hs_status != 0 && err_status == 0) {
   1fa00:	4688      	mov	r8, r1
   1fa02:	b109      	cbz	r1, 1fa08 <ble_att_svr_tx_rsp+0x18>
   1fa04:	2e00      	cmp	r6, #0
   1fa06:	d03b      	beq.n	1fa80 <ble_att_svr_tx_rsp+0x90>
        ble_hs_lock();
   1fa08:	f004 f83a 	bl	23a80 <ble_hs_lock>
        rc = ble_att_conn_chan_find(conn_handle, &conn, &chan);
   1fa0c:	aa03      	add	r2, sp, #12
   1fa0e:	a902      	add	r1, sp, #8
   1fa10:	4638      	mov	r0, r7
   1fa12:	f7fe fe7b 	bl	1e70c <ble_att_conn_chan_find>
        if (rc != 0) {
   1fa16:	4605      	mov	r5, r0
   1fa18:	b918      	cbnz	r0, 1fa22 <ble_att_svr_tx_rsp+0x32>
            if (hs_status == 0) {
   1fa1a:	f1b8 0f00 	cmp.w	r8, #0
   1fa1e:	d017      	beq.n	1fa50 <ble_att_svr_tx_rsp+0x60>
   1fa20:	4645      	mov	r5, r8
        ble_hs_unlock();
   1fa22:	f004 f831 	bl	23a88 <ble_hs_unlock>
        if (hs_status != 0) {
   1fa26:	b365      	cbz	r5, 1fa82 <ble_att_svr_tx_rsp+0x92>
            STATS_INC(ble_att_stats, error_rsp_tx);
   1fa28:	4a19      	ldr	r2, [pc, #100]	; (1fa90 <ble_att_svr_tx_rsp+0xa0>)
   1fa2a:	6913      	ldr	r3, [r2, #16]
   1fa2c:	3301      	adds	r3, #1
   1fa2e:	6113      	str	r3, [r2, #16]
            if (om == NULL) {
   1fa30:	b314      	cbz	r4, 1fa78 <ble_att_svr_tx_rsp+0x88>
                os_mbuf_adj(om, OS_MBUF_PKTLEN(om));
   1fa32:	8a21      	ldrh	r1, [r4, #16]
   1fa34:	4620      	mov	r0, r4
   1fa36:	f7ed fdcb 	bl	d5d0 <os_mbuf_adj>
            if (om != NULL) {
   1fa3a:	b314      	cbz	r4, 1fa82 <ble_att_svr_tx_rsp+0x92>
                ble_att_svr_tx_error_rsp(conn_handle, om, att_op,
   1fa3c:	9600      	str	r6, [sp, #0]
   1fa3e:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
   1fa42:	464a      	mov	r2, r9
   1fa44:	4621      	mov	r1, r4
   1fa46:	4638      	mov	r0, r7
   1fa48:	f7ff ffb9 	bl	1f9be <ble_att_svr_tx_error_rsp>
                om = NULL;
   1fa4c:	2400      	movs	r4, #0
   1fa4e:	e018      	b.n	1fa82 <ble_att_svr_tx_rsp+0x92>
                ble_att_inc_tx_stat(om->om_data[0]);
   1fa50:	6823      	ldr	r3, [r4, #0]
   1fa52:	7818      	ldrb	r0, [r3, #0]
   1fa54:	f7fe fe62 	bl	1e71c <ble_att_inc_tx_stat>
                ble_att_truncate_to_mtu(chan, om);
   1fa58:	4621      	mov	r1, r4
   1fa5a:	9803      	ldr	r0, [sp, #12]
   1fa5c:	f7fe ff6f 	bl	1e93e <ble_att_truncate_to_mtu>
                hs_status = ble_l2cap_tx(conn, chan, om);
   1fa60:	4622      	mov	r2, r4
   1fa62:	9903      	ldr	r1, [sp, #12]
   1fa64:	9802      	ldr	r0, [sp, #8]
   1fa66:	f006 fa3c 	bl	25ee2 <ble_l2cap_tx>
                if (hs_status != 0) {
   1fa6a:	4605      	mov	r5, r0
   1fa6c:	b908      	cbnz	r0, 1fa72 <ble_att_svr_tx_rsp+0x82>
                om = NULL;
   1fa6e:	2400      	movs	r4, #0
   1fa70:	e7d7      	b.n	1fa22 <ble_att_svr_tx_rsp+0x32>
                    err_status = BLE_ATT_ERR_UNLIKELY;
   1fa72:	260e      	movs	r6, #14
                om = NULL;
   1fa74:	2400      	movs	r4, #0
   1fa76:	e7d4      	b.n	1fa22 <ble_att_svr_tx_rsp+0x32>
                om = ble_hs_mbuf_l2cap_pkt();
   1fa78:	f005 fdca 	bl	25610 <ble_hs_mbuf_l2cap_pkt>
   1fa7c:	4604      	mov	r4, r0
   1fa7e:	e7dc      	b.n	1fa3a <ble_att_svr_tx_rsp+0x4a>
   1fa80:	460d      	mov	r5, r1
    os_mbuf_free_chain(om);
   1fa82:	4620      	mov	r0, r4
   1fa84:	f7ed fccc 	bl	d420 <os_mbuf_free_chain>
}
   1fa88:	4628      	mov	r0, r5
   1fa8a:	b005      	add	sp, #20
   1fa8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1fa90:	20003e80 	.word	0x20003e80

0001fa94 <ble_att_svr_rx_mtu>:
{
   1fa94:	b570      	push	{r4, r5, r6, lr}
   1fa96:	b086      	sub	sp, #24
   1fa98:	4604      	mov	r4, r0
   1fa9a:	460d      	mov	r5, r1
    txom = NULL;
   1fa9c:	2300      	movs	r3, #0
   1fa9e:	9303      	str	r3, [sp, #12]
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*cmd), &att_err);
   1faa0:	f10d 020b 	add.w	r2, sp, #11
   1faa4:	2102      	movs	r1, #2
   1faa6:	4628      	mov	r0, r5
   1faa8:	f7ff f9e6 	bl	1ee78 <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   1faac:	b180      	cbz	r0, 1fad0 <ble_att_svr_rx_mtu+0x3c>
   1faae:	4601      	mov	r1, r0
    mtu = 0;
   1fab0:	2600      	movs	r6, #0
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom, BLE_ATT_OP_MTU_REQ,
   1fab2:	f89d 300b 	ldrb.w	r3, [sp, #11]
   1fab6:	2200      	movs	r2, #0
   1fab8:	9201      	str	r2, [sp, #4]
   1faba:	9300      	str	r3, [sp, #0]
   1fabc:	2302      	movs	r3, #2
   1fabe:	9a03      	ldr	r2, [sp, #12]
   1fac0:	4620      	mov	r0, r4
   1fac2:	f7ff ff95 	bl	1f9f0 <ble_att_svr_tx_rsp>
    if (rc == 0) {
   1fac6:	4605      	mov	r5, r0
   1fac8:	b170      	cbz	r0, 1fae8 <ble_att_svr_rx_mtu+0x54>
}
   1faca:	4628      	mov	r0, r5
   1facc:	b006      	add	sp, #24
   1face:	bd70      	pop	{r4, r5, r6, pc}
    cmd = (struct ble_att_mtu_cmd *)(*rxom)->om_data;
   1fad0:	682b      	ldr	r3, [r5, #0]
   1fad2:	681b      	ldr	r3, [r3, #0]
    mtu = le16toh(cmd->bamc_mtu);
   1fad4:	881e      	ldrh	r6, [r3, #0]
    rc = ble_att_svr_build_mtu_rsp(conn_handle, rxom, &txom, &att_err);
   1fad6:	f10d 030b 	add.w	r3, sp, #11
   1fada:	aa03      	add	r2, sp, #12
   1fadc:	4629      	mov	r1, r5
   1fade:	4620      	mov	r0, r4
   1fae0:	f7ff f9d6 	bl	1ee90 <ble_att_svr_build_mtu_rsp>
   1fae4:	4601      	mov	r1, r0
   1fae6:	e7e4      	b.n	1fab2 <ble_att_svr_rx_mtu+0x1e>
        ble_hs_lock();
   1fae8:	f003 ffca 	bl	23a80 <ble_hs_lock>
        rc = ble_att_conn_chan_find(conn_handle, &conn, &chan);
   1faec:	aa05      	add	r2, sp, #20
   1faee:	a904      	add	r1, sp, #16
   1faf0:	4620      	mov	r0, r4
   1faf2:	f7fe fe0b 	bl	1e70c <ble_att_conn_chan_find>
        if (rc == 0) {
   1faf6:	4605      	mov	r5, r0
   1faf8:	b148      	cbz	r0, 1fb0e <ble_att_svr_rx_mtu+0x7a>
        ble_hs_unlock();
   1fafa:	f003 ffc5 	bl	23a88 <ble_hs_unlock>
        if (rc == 0) {
   1fafe:	2d00      	cmp	r5, #0
   1fb00:	d1e3      	bne.n	1faca <ble_att_svr_rx_mtu+0x36>
            ble_gap_mtu_event(conn_handle, BLE_L2CAP_CID_ATT, mtu);
   1fb02:	4632      	mov	r2, r6
   1fb04:	2104      	movs	r1, #4
   1fb06:	4620      	mov	r0, r4
   1fb08:	f001 fe16 	bl	21738 <ble_gap_mtu_event>
    return rc;
   1fb0c:	e7dd      	b.n	1faca <ble_att_svr_rx_mtu+0x36>
            ble_att_set_peer_mtu(chan, mtu);
   1fb0e:	4631      	mov	r1, r6
   1fb10:	9805      	ldr	r0, [sp, #20]
   1fb12:	f7fe feff 	bl	1e914 <ble_att_set_peer_mtu>
            chan->flags |= BLE_L2CAP_CHAN_F_TXED_MTU;
   1fb16:	9805      	ldr	r0, [sp, #20]
   1fb18:	7b83      	ldrb	r3, [r0, #14]
   1fb1a:	f043 0301 	orr.w	r3, r3, #1
   1fb1e:	7383      	strb	r3, [r0, #14]
            mtu = ble_att_chan_mtu(chan);
   1fb20:	f7fe fefd 	bl	1e91e <ble_att_chan_mtu>
   1fb24:	4606      	mov	r6, r0
   1fb26:	e7e8      	b.n	1fafa <ble_att_svr_rx_mtu+0x66>

0001fb28 <ble_att_svr_rx_find_info>:
{
   1fb28:	b570      	push	{r4, r5, r6, lr}
   1fb2a:	b084      	sub	sp, #16
   1fb2c:	4606      	mov	r6, r0
   1fb2e:	460d      	mov	r5, r1
    txom = NULL;
   1fb30:	2300      	movs	r3, #0
   1fb32:	9303      	str	r3, [sp, #12]
    att_err = 0;
   1fb34:	aa04      	add	r2, sp, #16
   1fb36:	f802 3d05 	strb.w	r3, [r2, #-5]!
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*req), &att_err);
   1fb3a:	2104      	movs	r1, #4
   1fb3c:	4628      	mov	r0, r5
   1fb3e:	f7ff f99b 	bl	1ee78 <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   1fb42:	b9c8      	cbnz	r0, 1fb78 <ble_att_svr_rx_find_info+0x50>
    req = (struct ble_att_find_info_req *)(*rxom)->om_data;
   1fb44:	682b      	ldr	r3, [r5, #0]
   1fb46:	681b      	ldr	r3, [r3, #0]
    start_handle = le16toh(req->bafq_start_handle);
   1fb48:	881c      	ldrh	r4, [r3, #0]
    end_handle = le16toh(req->bafq_end_handle);
   1fb4a:	885a      	ldrh	r2, [r3, #2]
    if (start_handle > end_handle || start_handle == 0) {
   1fb4c:	4294      	cmp	r4, r2
   1fb4e:	d800      	bhi.n	1fb52 <ble_att_svr_rx_find_info+0x2a>
   1fb50:	b924      	cbnz	r4, 1fb5c <ble_att_svr_rx_find_info+0x34>
        att_err = BLE_ATT_ERR_INVALID_HANDLE;
   1fb52:	2301      	movs	r3, #1
   1fb54:	f88d 300b 	strb.w	r3, [sp, #11]
        rc = BLE_HS_EBADDATA;
   1fb58:	210a      	movs	r1, #10
        goto done;
   1fb5a:	e00f      	b.n	1fb7c <ble_att_svr_rx_find_info+0x54>
    rc = ble_att_svr_build_find_info_rsp(conn_handle,
   1fb5c:	f10d 030b 	add.w	r3, sp, #11
   1fb60:	9301      	str	r3, [sp, #4]
   1fb62:	ab03      	add	r3, sp, #12
   1fb64:	9300      	str	r3, [sp, #0]
   1fb66:	462b      	mov	r3, r5
   1fb68:	4621      	mov	r1, r4
   1fb6a:	4630      	mov	r0, r6
   1fb6c:	f7ff fa60 	bl	1f030 <ble_att_svr_build_find_info_rsp>
    if (rc != 0) {
   1fb70:	4601      	mov	r1, r0
   1fb72:	b918      	cbnz	r0, 1fb7c <ble_att_svr_rx_find_info+0x54>
    err_handle = 0;
   1fb74:	2400      	movs	r4, #0
   1fb76:	e001      	b.n	1fb7c <ble_att_svr_rx_find_info+0x54>
   1fb78:	4601      	mov	r1, r0
        err_handle = 0;
   1fb7a:	2400      	movs	r4, #0
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom, BLE_ATT_OP_FIND_INFO_REQ,
   1fb7c:	f89d 300b 	ldrb.w	r3, [sp, #11]
   1fb80:	9401      	str	r4, [sp, #4]
   1fb82:	9300      	str	r3, [sp, #0]
   1fb84:	2304      	movs	r3, #4
   1fb86:	9a03      	ldr	r2, [sp, #12]
   1fb88:	4630      	mov	r0, r6
   1fb8a:	f7ff ff31 	bl	1f9f0 <ble_att_svr_tx_rsp>
}
   1fb8e:	b004      	add	sp, #16
   1fb90:	bd70      	pop	{r4, r5, r6, pc}

0001fb92 <ble_att_svr_rx_find_type_value>:
{
   1fb92:	b570      	push	{r4, r5, r6, lr}
   1fb94:	b088      	sub	sp, #32
   1fb96:	4606      	mov	r6, r0
   1fb98:	460d      	mov	r5, r1
    txom = NULL;
   1fb9a:	2300      	movs	r3, #0
   1fb9c:	9306      	str	r3, [sp, #24]
    att_err = 0;
   1fb9e:	aa08      	add	r2, sp, #32
   1fba0:	f802 3d09 	strb.w	r3, [r2, #-9]!
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*req), &att_err);
   1fba4:	2106      	movs	r1, #6
   1fba6:	4628      	mov	r0, r5
   1fba8:	f7ff f966 	bl	1ee78 <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   1fbac:	bb00      	cbnz	r0, 1fbf0 <ble_att_svr_rx_find_type_value+0x5e>
    req = (struct ble_att_find_type_value_req *)(*rxom)->om_data;
   1fbae:	682b      	ldr	r3, [r5, #0]
   1fbb0:	681b      	ldr	r3, [r3, #0]
    start_handle = le16toh(req->bavq_start_handle);
   1fbb2:	881c      	ldrh	r4, [r3, #0]
    end_handle = le16toh(req->bavq_end_handle);
   1fbb4:	885a      	ldrh	r2, [r3, #2]
    attr_type = (ble_uuid16_t) BLE_UUID16_INIT(le16toh(req->bavq_attr_type));
   1fbb6:	889b      	ldrh	r3, [r3, #4]
   1fbb8:	2110      	movs	r1, #16
   1fbba:	f88d 101c 	strb.w	r1, [sp, #28]
   1fbbe:	f8ad 301e 	strh.w	r3, [sp, #30]
    if (start_handle > end_handle || start_handle == 0) {
   1fbc2:	4294      	cmp	r4, r2
   1fbc4:	d800      	bhi.n	1fbc8 <ble_att_svr_rx_find_type_value+0x36>
   1fbc6:	b924      	cbnz	r4, 1fbd2 <ble_att_svr_rx_find_type_value+0x40>
        att_err = BLE_ATT_ERR_INVALID_HANDLE;
   1fbc8:	2301      	movs	r3, #1
   1fbca:	f88d 3017 	strb.w	r3, [sp, #23]
        rc = BLE_HS_EBADDATA;
   1fbce:	210a      	movs	r1, #10
        goto done;
   1fbd0:	e010      	b.n	1fbf4 <ble_att_svr_rx_find_type_value+0x62>
    rc = ble_att_svr_build_find_type_value_rsp(conn_handle, start_handle,
   1fbd2:	f10d 0317 	add.w	r3, sp, #23
   1fbd6:	9302      	str	r3, [sp, #8]
   1fbd8:	ab06      	add	r3, sp, #24
   1fbda:	9301      	str	r3, [sp, #4]
   1fbdc:	9500      	str	r5, [sp, #0]
   1fbde:	9b07      	ldr	r3, [sp, #28]
   1fbe0:	4621      	mov	r1, r4
   1fbe2:	4630      	mov	r0, r6
   1fbe4:	f7ff fb90 	bl	1f308 <ble_att_svr_build_find_type_value_rsp>
    if (rc != 0) {
   1fbe8:	4601      	mov	r1, r0
   1fbea:	b918      	cbnz	r0, 1fbf4 <ble_att_svr_rx_find_type_value+0x62>
    err_handle = 0;
   1fbec:	2400      	movs	r4, #0
   1fbee:	e001      	b.n	1fbf4 <ble_att_svr_rx_find_type_value+0x62>
   1fbf0:	4601      	mov	r1, r0
   1fbf2:	2400      	movs	r4, #0
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom,
   1fbf4:	f89d 3017 	ldrb.w	r3, [sp, #23]
   1fbf8:	9401      	str	r4, [sp, #4]
   1fbfa:	9300      	str	r3, [sp, #0]
   1fbfc:	2306      	movs	r3, #6
   1fbfe:	9a06      	ldr	r2, [sp, #24]
   1fc00:	4630      	mov	r0, r6
   1fc02:	f7ff fef5 	bl	1f9f0 <ble_att_svr_tx_rsp>
}
   1fc06:	b008      	add	sp, #32
   1fc08:	bd70      	pop	{r4, r5, r6, pc}

0001fc0a <ble_att_svr_rx_read_type>:
{
   1fc0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fc0e:	b08c      	sub	sp, #48	; 0x30
   1fc10:	4606      	mov	r6, r0
   1fc12:	460d      	mov	r5, r1
    txom = NULL;
   1fc14:	2300      	movs	r3, #0
   1fc16:	930b      	str	r3, [sp, #44]	; 0x2c
    err_handle = 0;
   1fc18:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
    att_err = 0;
   1fc1c:	f88d 3013 	strb.w	r3, [sp, #19]
    pktlen = OS_MBUF_PKTLEN(*rxom);
   1fc20:	680b      	ldr	r3, [r1, #0]
   1fc22:	8a1c      	ldrh	r4, [r3, #16]
    if (pktlen != sizeof(*req) + 2 && pktlen != sizeof(*req) + 16) {
   1fc24:	2c06      	cmp	r4, #6
   1fc26:	d010      	beq.n	1fc4a <ble_att_svr_rx_read_type+0x40>
   1fc28:	2c14      	cmp	r4, #20
   1fc2a:	d00e      	beq.n	1fc4a <ble_att_svr_rx_read_type+0x40>
        rc = BLE_HS_EBADDATA;
   1fc2c:	210a      	movs	r1, #10
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom, BLE_ATT_OP_READ_TYPE_REQ,
   1fc2e:	f89d 3013 	ldrb.w	r3, [sp, #19]
   1fc32:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
   1fc36:	9201      	str	r2, [sp, #4]
   1fc38:	9300      	str	r3, [sp, #0]
   1fc3a:	2308      	movs	r3, #8
   1fc3c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1fc3e:	4630      	mov	r0, r6
   1fc40:	f7ff fed6 	bl	1f9f0 <ble_att_svr_tx_rsp>
}
   1fc44:	b00c      	add	sp, #48	; 0x30
   1fc46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    rc = ble_att_svr_pullup_req_base(rxom, pktlen, &att_err);
   1fc4a:	f10d 0213 	add.w	r2, sp, #19
   1fc4e:	4621      	mov	r1, r4
   1fc50:	4628      	mov	r0, r5
   1fc52:	f7ff f911 	bl	1ee78 <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   1fc56:	4601      	mov	r1, r0
   1fc58:	2800      	cmp	r0, #0
   1fc5a:	d1e8      	bne.n	1fc2e <ble_att_svr_rx_read_type+0x24>
    req = (struct ble_att_read_type_req *)(*rxom)->om_data;
   1fc5c:	6829      	ldr	r1, [r5, #0]
   1fc5e:	680b      	ldr	r3, [r1, #0]
    start_handle = le16toh(req->batq_start_handle);
   1fc60:	881a      	ldrh	r2, [r3, #0]
   1fc62:	b297      	uxth	r7, r2
    end_handle = le16toh(req->batq_end_handle);
   1fc64:	f8b3 8002 	ldrh.w	r8, [r3, #2]
    if (start_handle > end_handle || start_handle == 0) {
   1fc68:	4547      	cmp	r7, r8
   1fc6a:	d800      	bhi.n	1fc6e <ble_att_svr_rx_read_type+0x64>
   1fc6c:	b937      	cbnz	r7, 1fc7c <ble_att_svr_rx_read_type+0x72>
        att_err = BLE_ATT_ERR_INVALID_HANDLE;
   1fc6e:	2301      	movs	r3, #1
   1fc70:	f88d 3013 	strb.w	r3, [sp, #19]
        err_handle = start_handle;
   1fc74:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
        rc = BLE_HS_EBADDATA;
   1fc78:	210a      	movs	r1, #10
        goto done;
   1fc7a:	e7d8      	b.n	1fc2e <ble_att_svr_rx_read_type+0x24>
    rc = ble_uuid_init_from_att_mbuf(&uuid, *rxom, sizeof(*req),
   1fc7c:	1f23      	subs	r3, r4, #4
   1fc7e:	2204      	movs	r2, #4
   1fc80:	a805      	add	r0, sp, #20
   1fc82:	f009 f8b5 	bl	28df0 <ble_uuid_init_from_att_mbuf>
    if (rc != 0) {
   1fc86:	b118      	cbz	r0, 1fc90 <ble_att_svr_rx_read_type+0x86>
        att_err = BLE_ATT_ERR_INVALID_PDU;
   1fc88:	2104      	movs	r1, #4
   1fc8a:	f88d 1013 	strb.w	r1, [sp, #19]
        goto done;
   1fc8e:	e7ce      	b.n	1fc2e <ble_att_svr_rx_read_type+0x24>
    rc = ble_att_svr_build_read_type_rsp(conn_handle, start_handle, end_handle,
   1fc90:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
   1fc94:	9303      	str	r3, [sp, #12]
   1fc96:	f10d 0313 	add.w	r3, sp, #19
   1fc9a:	9302      	str	r3, [sp, #8]
   1fc9c:	ab0b      	add	r3, sp, #44	; 0x2c
   1fc9e:	9301      	str	r3, [sp, #4]
   1fca0:	9500      	str	r5, [sp, #0]
   1fca2:	ab05      	add	r3, sp, #20
   1fca4:	4642      	mov	r2, r8
   1fca6:	4639      	mov	r1, r7
   1fca8:	4630      	mov	r0, r6
   1fcaa:	f7ff fd75 	bl	1f798 <ble_att_svr_build_read_type_rsp>
   1fcae:	4601      	mov	r1, r0
   1fcb0:	e7bd      	b.n	1fc2e <ble_att_svr_rx_read_type+0x24>

0001fcb2 <ble_att_svr_rx_read>:
{
   1fcb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fcb6:	b084      	sub	sp, #16
   1fcb8:	4607      	mov	r7, r0
   1fcba:	460e      	mov	r6, r1
    att_err = 0;
   1fcbc:	aa04      	add	r2, sp, #16
   1fcbe:	2300      	movs	r3, #0
   1fcc0:	f802 3d01 	strb.w	r3, [r2, #-1]!
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*req), &att_err);
   1fcc4:	2102      	movs	r1, #2
   1fcc6:	4630      	mov	r0, r6
   1fcc8:	f7ff f8d6 	bl	1ee78 <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   1fccc:	b170      	cbz	r0, 1fcec <ble_att_svr_rx_read+0x3a>
   1fcce:	4601      	mov	r1, r0
    err_handle = 0;
   1fcd0:	2500      	movs	r5, #0
    txom = NULL;
   1fcd2:	462c      	mov	r4, r5
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom, BLE_ATT_OP_READ_REQ,
   1fcd4:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1fcd8:	9501      	str	r5, [sp, #4]
   1fcda:	9300      	str	r3, [sp, #0]
   1fcdc:	230a      	movs	r3, #10
   1fcde:	4622      	mov	r2, r4
   1fce0:	4638      	mov	r0, r7
   1fce2:	f7ff fe85 	bl	1f9f0 <ble_att_svr_tx_rsp>
}
   1fce6:	b004      	add	sp, #16
   1fce8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    req = (struct ble_att_read_req *)(*rxom)->om_data;
   1fcec:	6834      	ldr	r4, [r6, #0]
   1fcee:	6823      	ldr	r3, [r4, #0]
    err_handle = le16toh(req->barq_handle);
   1fcf0:	881d      	ldrh	r5, [r3, #0]
    *rxom = NULL;
   1fcf2:	f04f 0800 	mov.w	r8, #0
   1fcf6:	f8c6 8000 	str.w	r8, [r6]
    os_mbuf_adj(txom, OS_MBUF_PKTLEN(txom));
   1fcfa:	8a21      	ldrh	r1, [r4, #16]
   1fcfc:	4620      	mov	r0, r4
   1fcfe:	f7ed fc67 	bl	d5d0 <os_mbuf_adj>
    if (ble_att_cmd_prepare(BLE_ATT_OP_READ_RSP, 0, txom) == NULL) {
   1fd02:	4622      	mov	r2, r4
   1fd04:	4641      	mov	r1, r8
   1fd06:	200b      	movs	r0, #11
   1fd08:	f7fe ff1d 	bl	1eb46 <ble_att_cmd_prepare>
   1fd0c:	b150      	cbz	r0, 1fd24 <ble_att_svr_rx_read+0x72>
    rc = ble_att_svr_read_handle(conn_handle, err_handle, 0, txom, &att_err);
   1fd0e:	f10d 030f 	add.w	r3, sp, #15
   1fd12:	9300      	str	r3, [sp, #0]
   1fd14:	4623      	mov	r3, r4
   1fd16:	2200      	movs	r2, #0
   1fd18:	4629      	mov	r1, r5
   1fd1a:	4638      	mov	r0, r7
   1fd1c:	f7ff fde2 	bl	1f8e4 <ble_att_svr_read_handle>
   1fd20:	4601      	mov	r1, r0
done:
   1fd22:	e7d7      	b.n	1fcd4 <ble_att_svr_rx_read+0x22>
        att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   1fd24:	2311      	movs	r3, #17
   1fd26:	f88d 300f 	strb.w	r3, [sp, #15]
        rc = BLE_HS_ENOMEM;
   1fd2a:	2106      	movs	r1, #6
        goto done;
   1fd2c:	e7d2      	b.n	1fcd4 <ble_att_svr_rx_read+0x22>

0001fd2e <ble_att_svr_rx_read_blob>:
{
   1fd2e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1fd32:	b085      	sub	sp, #20
   1fd34:	4607      	mov	r7, r0
   1fd36:	460e      	mov	r6, r1
    att_err = 0;
   1fd38:	aa04      	add	r2, sp, #16
   1fd3a:	2300      	movs	r3, #0
   1fd3c:	f802 3d01 	strb.w	r3, [r2, #-1]!
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*req), &att_err);
   1fd40:	2104      	movs	r1, #4
   1fd42:	4630      	mov	r0, r6
   1fd44:	f7ff f898 	bl	1ee78 <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   1fd48:	b170      	cbz	r0, 1fd68 <ble_att_svr_rx_read_blob+0x3a>
   1fd4a:	4601      	mov	r1, r0
    err_handle = 0;
   1fd4c:	2500      	movs	r5, #0
    txom = NULL;
   1fd4e:	462c      	mov	r4, r5
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom, BLE_ATT_OP_READ_BLOB_REQ,
   1fd50:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1fd54:	9501      	str	r5, [sp, #4]
   1fd56:	9300      	str	r3, [sp, #0]
   1fd58:	230c      	movs	r3, #12
   1fd5a:	4622      	mov	r2, r4
   1fd5c:	4638      	mov	r0, r7
   1fd5e:	f7ff fe47 	bl	1f9f0 <ble_att_svr_tx_rsp>
}
   1fd62:	b005      	add	sp, #20
   1fd64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    req = (struct ble_att_read_blob_req *)(*rxom)->om_data;
   1fd68:	6834      	ldr	r4, [r6, #0]
   1fd6a:	6823      	ldr	r3, [r4, #0]
    err_handle = le16toh(req->babq_handle);
   1fd6c:	881d      	ldrh	r5, [r3, #0]
    offset = le16toh(req->babq_offset);
   1fd6e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
    *rxom = NULL;
   1fd72:	f04f 0800 	mov.w	r8, #0
   1fd76:	f8c6 8000 	str.w	r8, [r6]
    os_mbuf_adj(txom, OS_MBUF_PKTLEN(txom));
   1fd7a:	8a21      	ldrh	r1, [r4, #16]
   1fd7c:	4620      	mov	r0, r4
   1fd7e:	f7ed fc27 	bl	d5d0 <os_mbuf_adj>
    if (ble_att_cmd_prepare(BLE_ATT_OP_READ_BLOB_RSP, 0, txom) == NULL) {
   1fd82:	4622      	mov	r2, r4
   1fd84:	4641      	mov	r1, r8
   1fd86:	200d      	movs	r0, #13
   1fd88:	f7fe fedd 	bl	1eb46 <ble_att_cmd_prepare>
   1fd8c:	b150      	cbz	r0, 1fda4 <ble_att_svr_rx_read_blob+0x76>
    rc = ble_att_svr_read_handle(conn_handle, err_handle, offset,
   1fd8e:	f10d 030f 	add.w	r3, sp, #15
   1fd92:	9300      	str	r3, [sp, #0]
   1fd94:	4623      	mov	r3, r4
   1fd96:	464a      	mov	r2, r9
   1fd98:	4629      	mov	r1, r5
   1fd9a:	4638      	mov	r0, r7
   1fd9c:	f7ff fda2 	bl	1f8e4 <ble_att_svr_read_handle>
   1fda0:	4601      	mov	r1, r0
   1fda2:	e7d5      	b.n	1fd50 <ble_att_svr_rx_read_blob+0x22>
        att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   1fda4:	2311      	movs	r3, #17
   1fda6:	f88d 300f 	strb.w	r3, [sp, #15]
        rc = BLE_HS_ENOMEM;
   1fdaa:	2106      	movs	r1, #6
        goto done;
   1fdac:	e7d0      	b.n	1fd50 <ble_att_svr_rx_read_blob+0x22>

0001fdae <ble_att_svr_rx_read_mult>:
{
   1fdae:	b510      	push	{r4, lr}
   1fdb0:	b084      	sub	sp, #16
   1fdb2:	4604      	mov	r4, r0
    txom = NULL;
   1fdb4:	2200      	movs	r2, #0
   1fdb6:	9203      	str	r2, [sp, #12]
    err_handle = 0;
   1fdb8:	f8ad 200a 	strh.w	r2, [sp, #10]
    att_err = 0;
   1fdbc:	ab04      	add	r3, sp, #16
   1fdbe:	f803 2d07 	strb.w	r2, [r3, #-7]!
    rc = ble_att_svr_build_read_mult_rsp(conn_handle, rxom, &txom, &att_err,
   1fdc2:	f10d 020a 	add.w	r2, sp, #10
   1fdc6:	9200      	str	r2, [sp, #0]
   1fdc8:	aa03      	add	r2, sp, #12
   1fdca:	f7ff fda5 	bl	1f918 <ble_att_svr_build_read_mult_rsp>
    return ble_att_svr_tx_rsp(conn_handle, rc, txom, BLE_ATT_OP_READ_MULT_REQ,
   1fdce:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   1fdd2:	9301      	str	r3, [sp, #4]
   1fdd4:	f89d 3009 	ldrb.w	r3, [sp, #9]
   1fdd8:	9300      	str	r3, [sp, #0]
   1fdda:	230e      	movs	r3, #14
   1fddc:	9a03      	ldr	r2, [sp, #12]
   1fdde:	4601      	mov	r1, r0
   1fde0:	4620      	mov	r0, r4
   1fde2:	f7ff fe05 	bl	1f9f0 <ble_att_svr_tx_rsp>
}
   1fde6:	b004      	add	sp, #16
   1fde8:	bd10      	pop	{r4, pc}

0001fdea <ble_att_svr_rx_read_group_type>:
{
   1fdea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fdee:	b08c      	sub	sp, #48	; 0x30
   1fdf0:	4605      	mov	r5, r0
   1fdf2:	460c      	mov	r4, r1
    txom = NULL;
   1fdf4:	2300      	movs	r3, #0
   1fdf6:	930b      	str	r3, [sp, #44]	; 0x2c
    err_handle = 0;
   1fdf8:	f8ad 3016 	strh.w	r3, [sp, #22]
    att_err = 0;
   1fdfc:	f88d 3015 	strb.w	r3, [sp, #21]
    pktlen = OS_MBUF_PKTLEN(*rxom);
   1fe00:	680b      	ldr	r3, [r1, #0]
   1fe02:	8a19      	ldrh	r1, [r3, #16]
    if (pktlen != sizeof(*req) + 2 && pktlen != sizeof(*req) + 16) {
   1fe04:	2906      	cmp	r1, #6
   1fe06:	d010      	beq.n	1fe2a <ble_att_svr_rx_read_group_type+0x40>
   1fe08:	2914      	cmp	r1, #20
   1fe0a:	d00e      	beq.n	1fe2a <ble_att_svr_rx_read_group_type+0x40>
        rc = BLE_HS_EBADDATA;
   1fe0c:	210a      	movs	r1, #10
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom,
   1fe0e:	f89d 3015 	ldrb.w	r3, [sp, #21]
   1fe12:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   1fe16:	9201      	str	r2, [sp, #4]
   1fe18:	9300      	str	r3, [sp, #0]
   1fe1a:	2310      	movs	r3, #16
   1fe1c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1fe1e:	4628      	mov	r0, r5
   1fe20:	f7ff fde6 	bl	1f9f0 <ble_att_svr_tx_rsp>
}
   1fe24:	b00c      	add	sp, #48	; 0x30
   1fe26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    rc = ble_att_svr_pullup_req_base(rxom, pktlen, &att_err);
   1fe2a:	f10d 0215 	add.w	r2, sp, #21
   1fe2e:	4620      	mov	r0, r4
   1fe30:	f7ff f822 	bl	1ee78 <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   1fe34:	4601      	mov	r1, r0
   1fe36:	2800      	cmp	r0, #0
   1fe38:	d1e9      	bne.n	1fe0e <ble_att_svr_rx_read_group_type+0x24>
    req = (struct ble_att_read_group_type_req *)(*rxom)->om_data;
   1fe3a:	6821      	ldr	r1, [r4, #0]
   1fe3c:	680b      	ldr	r3, [r1, #0]
    start_handle = le16toh(req->bagq_start_handle);
   1fe3e:	881e      	ldrh	r6, [r3, #0]
   1fe40:	b2b7      	uxth	r7, r6
    end_handle = le16toh(req->bagq_end_handle);
   1fe42:	f8b3 8002 	ldrh.w	r8, [r3, #2]
    if (start_handle > end_handle || start_handle == 0) {
   1fe46:	4547      	cmp	r7, r8
   1fe48:	d800      	bhi.n	1fe4c <ble_att_svr_rx_read_group_type+0x62>
   1fe4a:	b937      	cbnz	r7, 1fe5a <ble_att_svr_rx_read_group_type+0x70>
        att_err = BLE_ATT_ERR_INVALID_HANDLE;
   1fe4c:	2301      	movs	r3, #1
   1fe4e:	f88d 3015 	strb.w	r3, [sp, #21]
        err_handle = start_handle;
   1fe52:	f8ad 6016 	strh.w	r6, [sp, #22]
        rc = BLE_HS_EBADDATA;
   1fe56:	210a      	movs	r1, #10
        goto done;
   1fe58:	e7d9      	b.n	1fe0e <ble_att_svr_rx_read_group_type+0x24>
    om_uuid_len = OS_MBUF_PKTHDR(*rxom)->omp_len - sizeof(*req);
   1fe5a:	8a0b      	ldrh	r3, [r1, #16]
    rc = ble_uuid_init_from_att_mbuf(&uuid, *rxom, sizeof(*req), om_uuid_len);
   1fe5c:	3b04      	subs	r3, #4
   1fe5e:	2204      	movs	r2, #4
   1fe60:	a806      	add	r0, sp, #24
   1fe62:	f008 ffc5 	bl	28df0 <ble_uuid_init_from_att_mbuf>
    if (rc != 0) {
   1fe66:	b130      	cbz	r0, 1fe76 <ble_att_svr_rx_read_group_type+0x8c>
        att_err = BLE_ATT_ERR_INVALID_PDU;
   1fe68:	2304      	movs	r3, #4
   1fe6a:	f88d 3015 	strb.w	r3, [sp, #21]
        err_handle = start_handle;
   1fe6e:	f8ad 6016 	strh.w	r6, [sp, #22]
        rc = BLE_HS_EBADDATA;
   1fe72:	210a      	movs	r1, #10
        goto done;
   1fe74:	e7cb      	b.n	1fe0e <ble_att_svr_rx_read_group_type+0x24>
    if (!ble_att_svr_is_valid_read_group_type(&uuid.u)) {
   1fe76:	a806      	add	r0, sp, #24
   1fe78:	f7ff f96a 	bl	1f150 <ble_att_svr_is_valid_read_group_type>
   1fe7c:	b928      	cbnz	r0, 1fe8a <ble_att_svr_rx_read_group_type+0xa0>
        att_err = BLE_ATT_ERR_UNSUPPORTED_GROUP;
   1fe7e:	2110      	movs	r1, #16
   1fe80:	f88d 1015 	strb.w	r1, [sp, #21]
        err_handle = start_handle;
   1fe84:	f8ad 6016 	strh.w	r6, [sp, #22]
        goto done;
   1fe88:	e7c1      	b.n	1fe0e <ble_att_svr_rx_read_group_type+0x24>
    rc = ble_att_svr_build_read_group_type_rsp(conn_handle, start_handle,
   1fe8a:	f10d 0316 	add.w	r3, sp, #22
   1fe8e:	9303      	str	r3, [sp, #12]
   1fe90:	f10d 0315 	add.w	r3, sp, #21
   1fe94:	9302      	str	r3, [sp, #8]
   1fe96:	ab0b      	add	r3, sp, #44	; 0x2c
   1fe98:	9301      	str	r3, [sp, #4]
   1fe9a:	9400      	str	r4, [sp, #0]
   1fe9c:	ab06      	add	r3, sp, #24
   1fe9e:	4642      	mov	r2, r8
   1fea0:	4639      	mov	r1, r7
   1fea2:	4628      	mov	r0, r5
   1fea4:	f7ff fa7e 	bl	1f3a4 <ble_att_svr_build_read_group_type_rsp>
   1fea8:	4601      	mov	r1, r0
   1feaa:	e7b0      	b.n	1fe0e <ble_att_svr_rx_read_group_type+0x24>

0001feac <ble_att_svr_rx_write>:
{
   1feac:	b570      	push	{r4, r5, r6, lr}
   1feae:	b084      	sub	sp, #16
   1feb0:	4605      	mov	r5, r0
   1feb2:	460c      	mov	r4, r1
    txom = NULL;
   1feb4:	2300      	movs	r3, #0
   1feb6:	9303      	str	r3, [sp, #12]
    att_err = 0;
   1feb8:	aa04      	add	r2, sp, #16
   1feba:	f802 3d05 	strb.w	r3, [r2, #-5]!
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*req), &att_err);
   1febe:	2102      	movs	r1, #2
   1fec0:	4620      	mov	r0, r4
   1fec2:	f7fe ffd9 	bl	1ee78 <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   1fec6:	b160      	cbz	r0, 1fee2 <ble_att_svr_rx_write+0x36>
   1fec8:	4601      	mov	r1, r0
    handle = 0;
   1feca:	2600      	movs	r6, #0
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom, BLE_ATT_OP_WRITE_REQ,
   1fecc:	f89d 300b 	ldrb.w	r3, [sp, #11]
   1fed0:	9601      	str	r6, [sp, #4]
   1fed2:	9300      	str	r3, [sp, #0]
   1fed4:	2312      	movs	r3, #18
   1fed6:	9a03      	ldr	r2, [sp, #12]
   1fed8:	4628      	mov	r0, r5
   1feda:	f7ff fd89 	bl	1f9f0 <ble_att_svr_tx_rsp>
}
   1fede:	b004      	add	sp, #16
   1fee0:	bd70      	pop	{r4, r5, r6, pc}
    req = (struct ble_att_write_req *)(*rxom)->om_data;
   1fee2:	6823      	ldr	r3, [r4, #0]
   1fee4:	681b      	ldr	r3, [r3, #0]
    handle = le16toh(req->bawq_handle);
   1fee6:	881e      	ldrh	r6, [r3, #0]
    rc = ble_att_svr_build_write_rsp(rxom, &txom, &att_err);
   1fee8:	f10d 020b 	add.w	r2, sp, #11
   1feec:	a903      	add	r1, sp, #12
   1feee:	4620      	mov	r0, r4
   1fef0:	f7ff f814 	bl	1ef1c <ble_att_svr_build_write_rsp>
    if (rc != 0) {
   1fef4:	4601      	mov	r1, r0
   1fef6:	2800      	cmp	r0, #0
   1fef8:	d1e8      	bne.n	1fecc <ble_att_svr_rx_write+0x20>
    os_mbuf_adj(*rxom, sizeof(*req));
   1fefa:	2102      	movs	r1, #2
   1fefc:	6820      	ldr	r0, [r4, #0]
   1fefe:	f7ed fb67 	bl	d5d0 <os_mbuf_adj>
    rc = ble_att_svr_write_handle(conn_handle, handle, 0, rxom, &att_err);
   1ff02:	f10d 030b 	add.w	r3, sp, #11
   1ff06:	9300      	str	r3, [sp, #0]
   1ff08:	4623      	mov	r3, r4
   1ff0a:	2200      	movs	r2, #0
   1ff0c:	4631      	mov	r1, r6
   1ff0e:	4628      	mov	r0, r5
   1ff10:	f7ff fbdc 	bl	1f6cc <ble_att_svr_write_handle>
   1ff14:	4601      	mov	r1, r0
   1ff16:	e7d9      	b.n	1fecc <ble_att_svr_rx_write+0x20>

0001ff18 <ble_att_svr_rx_write_no_rsp>:
{
   1ff18:	b570      	push	{r4, r5, r6, lr}
   1ff1a:	b084      	sub	sp, #16
   1ff1c:	4605      	mov	r5, r0
   1ff1e:	460c      	mov	r4, r1
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*req), &att_err);
   1ff20:	f10d 020f 	add.w	r2, sp, #15
   1ff24:	2102      	movs	r1, #2
   1ff26:	4620      	mov	r0, r4
   1ff28:	f7fe ffa6 	bl	1ee78 <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   1ff2c:	4603      	mov	r3, r0
   1ff2e:	b110      	cbz	r0, 1ff36 <ble_att_svr_rx_write_no_rsp+0x1e>
}
   1ff30:	4618      	mov	r0, r3
   1ff32:	b004      	add	sp, #16
   1ff34:	bd70      	pop	{r4, r5, r6, pc}
    req = (struct ble_att_write_req *)(*rxom)->om_data;
   1ff36:	6820      	ldr	r0, [r4, #0]
   1ff38:	6803      	ldr	r3, [r0, #0]
    handle = le16toh(req->bawq_handle);
   1ff3a:	881e      	ldrh	r6, [r3, #0]
    os_mbuf_adj(*rxom, sizeof(*req));
   1ff3c:	2102      	movs	r1, #2
   1ff3e:	f7ed fb47 	bl	d5d0 <os_mbuf_adj>
    return ble_att_svr_write_handle(conn_handle, handle, 0, rxom, &att_err);
   1ff42:	f10d 030f 	add.w	r3, sp, #15
   1ff46:	9300      	str	r3, [sp, #0]
   1ff48:	4623      	mov	r3, r4
   1ff4a:	2200      	movs	r2, #0
   1ff4c:	4631      	mov	r1, r6
   1ff4e:	4628      	mov	r0, r5
   1ff50:	f7ff fbbc 	bl	1f6cc <ble_att_svr_write_handle>
   1ff54:	4603      	mov	r3, r0
   1ff56:	e7eb      	b.n	1ff30 <ble_att_svr_rx_write_no_rsp+0x18>

0001ff58 <ble_att_svr_prep_clear>:
{
   1ff58:	b510      	push	{r4, lr}
   1ff5a:	4604      	mov	r4, r0
    while ((entry = SLIST_FIRST(prep_list)) != NULL) {
   1ff5c:	e003      	b.n	1ff66 <ble_att_svr_prep_clear+0xe>
        SLIST_REMOVE_HEAD(prep_list, bape_next);
   1ff5e:	6803      	ldr	r3, [r0, #0]
   1ff60:	6023      	str	r3, [r4, #0]
        ble_att_svr_prep_free(entry);
   1ff62:	f7ff fae1 	bl	1f528 <ble_att_svr_prep_free>
    while ((entry = SLIST_FIRST(prep_list)) != NULL) {
   1ff66:	6820      	ldr	r0, [r4, #0]
   1ff68:	2800      	cmp	r0, #0
   1ff6a:	d1f8      	bne.n	1ff5e <ble_att_svr_prep_clear+0x6>
}
   1ff6c:	bd10      	pop	{r4, pc}

0001ff6e <ble_att_svr_rx_prep_write>:
{
   1ff6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ff72:	b084      	sub	sp, #16
   1ff74:	4607      	mov	r7, r0
   1ff76:	460d      	mov	r5, r1
    att_err = 0;
   1ff78:	aa04      	add	r2, sp, #16
   1ff7a:	2300      	movs	r3, #0
   1ff7c:	f802 3d01 	strb.w	r3, [r2, #-1]!
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*req), &att_err);
   1ff80:	2104      	movs	r1, #4
   1ff82:	4628      	mov	r0, r5
   1ff84:	f7fe ff78 	bl	1ee78 <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   1ff88:	b178      	cbz	r0, 1ffaa <ble_att_svr_rx_prep_write+0x3c>
   1ff8a:	4606      	mov	r6, r0
    err_handle = 0;
   1ff8c:	2400      	movs	r4, #0
    txom = NULL;
   1ff8e:	46a0      	mov	r8, r4
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom, BLE_ATT_OP_PREP_WRITE_REQ,
   1ff90:	f89d 300f 	ldrb.w	r3, [sp, #15]
   1ff94:	9401      	str	r4, [sp, #4]
   1ff96:	9300      	str	r3, [sp, #0]
   1ff98:	2316      	movs	r3, #22
   1ff9a:	4642      	mov	r2, r8
   1ff9c:	4631      	mov	r1, r6
   1ff9e:	4638      	mov	r0, r7
   1ffa0:	f7ff fd26 	bl	1f9f0 <ble_att_svr_tx_rsp>
}
   1ffa4:	b004      	add	sp, #16
   1ffa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    req = (struct ble_att_prep_write_cmd *)(*rxom)->om_data;
   1ffaa:	682b      	ldr	r3, [r5, #0]
   1ffac:	f8d3 8000 	ldr.w	r8, [r3]
    err_handle = le16toh(req->bapc_handle);
   1ffb0:	f8b8 4000 	ldrh.w	r4, [r8]
    attr_entry = ble_att_svr_find_by_handle(le16toh(req->bapc_handle));
   1ffb4:	4620      	mov	r0, r4
   1ffb6:	f7ff fb7d 	bl	1f6b4 <ble_att_svr_find_by_handle>
    if (attr_entry == NULL) {
   1ffba:	4602      	mov	r2, r0
   1ffbc:	b150      	cbz	r0, 1ffd4 <ble_att_svr_rx_prep_write+0x66>
    rc = ble_att_svr_check_perms(conn_handle, 0, attr_entry, &att_err);
   1ffbe:	f10d 030f 	add.w	r3, sp, #15
   1ffc2:	2100      	movs	r1, #0
   1ffc4:	4638      	mov	r0, r7
   1ffc6:	f7fe fe6c 	bl	1eca2 <ble_att_svr_check_perms>
    if (rc != 0) {
   1ffca:	4606      	mov	r6, r0
   1ffcc:	b148      	cbz	r0, 1ffe2 <ble_att_svr_rx_prep_write+0x74>
    txom = NULL;
   1ffce:	f04f 0800 	mov.w	r8, #0
   1ffd2:	e7dd      	b.n	1ff90 <ble_att_svr_rx_prep_write+0x22>
        att_err = BLE_ATT_ERR_INVALID_HANDLE;
   1ffd4:	2301      	movs	r3, #1
   1ffd6:	f88d 300f 	strb.w	r3, [sp, #15]
        rc = BLE_HS_ENOENT;
   1ffda:	2605      	movs	r6, #5
    txom = NULL;
   1ffdc:	f04f 0800 	mov.w	r8, #0
        goto done;
   1ffe0:	e7d6      	b.n	1ff90 <ble_att_svr_rx_prep_write+0x22>
    ble_hs_lock();
   1ffe2:	f003 fd4d 	bl	23a80 <ble_hs_lock>
    rc = ble_att_svr_insert_prep_entry(conn_handle, le16toh(req->bapc_handle),
   1ffe6:	f8b8 1000 	ldrh.w	r1, [r8]
                                       le16toh(req->bapc_offset), *rxom,
   1ffea:	f8b8 2002 	ldrh.w	r2, [r8, #2]
    rc = ble_att_svr_insert_prep_entry(conn_handle, le16toh(req->bapc_handle),
   1ffee:	f10d 030f 	add.w	r3, sp, #15
   1fff2:	9300      	str	r3, [sp, #0]
   1fff4:	682b      	ldr	r3, [r5, #0]
   1fff6:	4638      	mov	r0, r7
   1fff8:	f7ff fac2 	bl	1f580 <ble_att_svr_insert_prep_entry>
   1fffc:	4606      	mov	r6, r0
    ble_hs_unlock();
   1fffe:	f003 fd43 	bl	23a88 <ble_hs_unlock>
    txom = *rxom;
   20002:	f8d5 8000 	ldr.w	r8, [r5]
    *rxom = NULL;
   20006:	2300      	movs	r3, #0
   20008:	602b      	str	r3, [r5, #0]
    if (rc != 0) {
   2000a:	2e00      	cmp	r6, #0
   2000c:	d1c0      	bne.n	1ff90 <ble_att_svr_rx_prep_write+0x22>
    os_mbuf_prepend(txom, 1);
   2000e:	2101      	movs	r1, #1
   20010:	4640      	mov	r0, r8
   20012:	f7ed fb6c 	bl	d6ee <os_mbuf_prepend>
    txom->om_data[0] = BLE_ATT_OP_PREP_WRITE_RSP;
   20016:	f8d8 3000 	ldr.w	r3, [r8]
   2001a:	2217      	movs	r2, #23
   2001c:	701a      	strb	r2, [r3, #0]
   2001e:	e7b7      	b.n	1ff90 <ble_att_svr_rx_prep_write+0x22>

00020020 <ble_att_svr_rx_exec_write>:
{
   20020:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   20024:	b085      	sub	sp, #20
   20026:	4607      	mov	r7, r0
   20028:	460e      	mov	r6, r1
    err_handle = 0;
   2002a:	2300      	movs	r3, #0
   2002c:	f8ad 300a 	strh.w	r3, [sp, #10]
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*req), &att_err);
   20030:	f10d 0209 	add.w	r2, sp, #9
   20034:	2101      	movs	r1, #1
   20036:	4630      	mov	r0, r6
   20038:	f7fe ff1e 	bl	1ee78 <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   2003c:	4605      	mov	r5, r0
   2003e:	b190      	cbz	r0, 20066 <ble_att_svr_rx_exec_write+0x46>
        flags = 0;
   20040:	f04f 0800 	mov.w	r8, #0
    txom = NULL;
   20044:	4644      	mov	r4, r8
    if (rc == 0) {
   20046:	b335      	cbz	r5, 20096 <ble_att_svr_rx_exec_write+0x76>
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom, BLE_ATT_OP_EXEC_WRITE_REQ,
   20048:	f89d 3009 	ldrb.w	r3, [sp, #9]
   2004c:	f8bd 200a 	ldrh.w	r2, [sp, #10]
   20050:	9201      	str	r2, [sp, #4]
   20052:	9300      	str	r3, [sp, #0]
   20054:	2318      	movs	r3, #24
   20056:	4622      	mov	r2, r4
   20058:	4629      	mov	r1, r5
   2005a:	4638      	mov	r0, r7
   2005c:	f7ff fcc8 	bl	1f9f0 <ble_att_svr_tx_rsp>
}
   20060:	b005      	add	sp, #20
   20062:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    req = (struct ble_att_exec_write_req *)(*rxom)->om_data;
   20066:	6834      	ldr	r4, [r6, #0]
   20068:	6823      	ldr	r3, [r4, #0]
    flags = req->baeq_flags;
   2006a:	f893 8000 	ldrb.w	r8, [r3]
    *rxom = NULL;
   2006e:	f04f 0900 	mov.w	r9, #0
   20072:	f8c6 9000 	str.w	r9, [r6]
    os_mbuf_adj(txom, OS_MBUF_PKTLEN(txom));
   20076:	8a21      	ldrh	r1, [r4, #16]
   20078:	4620      	mov	r0, r4
   2007a:	f7ed faa9 	bl	d5d0 <os_mbuf_adj>
    if (ble_att_cmd_prepare(BLE_ATT_OP_EXEC_WRITE_RSP, 0, txom) == NULL) {
   2007e:	4622      	mov	r2, r4
   20080:	4649      	mov	r1, r9
   20082:	2019      	movs	r0, #25
   20084:	f7fe fd5f 	bl	1eb46 <ble_att_cmd_prepare>
   20088:	2800      	cmp	r0, #0
   2008a:	d1dc      	bne.n	20046 <ble_att_svr_rx_exec_write+0x26>
        att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   2008c:	2311      	movs	r3, #17
   2008e:	f88d 3009 	strb.w	r3, [sp, #9]
        rc = BLE_HS_ENOMEM;
   20092:	2506      	movs	r5, #6
        goto done;
   20094:	e7d7      	b.n	20046 <ble_att_svr_rx_exec_write+0x26>
        ble_hs_lock();
   20096:	f003 fcf3 	bl	23a80 <ble_hs_lock>
        conn = ble_hs_conn_find_assert(conn_handle);
   2009a:	4638      	mov	r0, r7
   2009c:	f004 fb58 	bl	24750 <ble_hs_conn_find_assert>
        prep_list = conn->bhc_att_svr.basc_prep_list;
   200a0:	6c43      	ldr	r3, [r0, #68]	; 0x44
   200a2:	9303      	str	r3, [sp, #12]
        SLIST_INIT(&conn->bhc_att_svr.basc_prep_list);
   200a4:	2300      	movs	r3, #0
   200a6:	6443      	str	r3, [r0, #68]	; 0x44
        ble_hs_unlock();
   200a8:	f003 fcee 	bl	23a88 <ble_hs_unlock>
        if (flags) {
   200ac:	f1b8 0f00 	cmp.w	r8, #0
   200b0:	d103      	bne.n	200ba <ble_att_svr_rx_exec_write+0x9a>
        ble_att_svr_prep_clear(&prep_list);
   200b2:	a803      	add	r0, sp, #12
   200b4:	f7ff ff50 	bl	1ff58 <ble_att_svr_prep_clear>
   200b8:	e7c6      	b.n	20048 <ble_att_svr_rx_exec_write+0x28>
            att_err = ble_att_svr_prep_write(conn_handle, &prep_list,
   200ba:	f10d 020a 	add.w	r2, sp, #10
   200be:	a903      	add	r1, sp, #12
   200c0:	4638      	mov	r0, r7
   200c2:	f7ff fb1d 	bl	1f700 <ble_att_svr_prep_write>
   200c6:	b2c0      	uxtb	r0, r0
   200c8:	f88d 0009 	strb.w	r0, [sp, #9]
            if (att_err != 0) {
   200cc:	2800      	cmp	r0, #0
   200ce:	d0f0      	beq.n	200b2 <ble_att_svr_rx_exec_write+0x92>
                rc = BLE_HS_EAPP;
   200d0:	2509      	movs	r5, #9
   200d2:	e7ee      	b.n	200b2 <ble_att_svr_rx_exec_write+0x92>

000200d4 <ble_att_svr_rx_notify>:
{
   200d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   200d6:	4607      	mov	r7, r0
   200d8:	460c      	mov	r4, r1
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*req), NULL);
   200da:	2200      	movs	r2, #0
   200dc:	2102      	movs	r1, #2
   200de:	4620      	mov	r0, r4
   200e0:	f7fe feca 	bl	1ee78 <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   200e4:	b988      	cbnz	r0, 2010a <ble_att_svr_rx_notify+0x36>
   200e6:	4605      	mov	r5, r0
    req = (struct ble_att_notify_req *)(*rxom)->om_data;
   200e8:	6820      	ldr	r0, [r4, #0]
   200ea:	6803      	ldr	r3, [r0, #0]
    handle = le16toh(req->banq_handle);
   200ec:	881e      	ldrh	r6, [r3, #0]
    if (handle == 0) {
   200ee:	b176      	cbz	r6, 2010e <ble_att_svr_rx_notify+0x3a>
    os_mbuf_adj(*rxom, sizeof(*req));
   200f0:	2102      	movs	r1, #2
   200f2:	f7ed fa6d 	bl	d5d0 <os_mbuf_adj>
    ble_gap_notify_rx_event(conn_handle, handle, *rxom, 0);
   200f6:	2300      	movs	r3, #0
   200f8:	6822      	ldr	r2, [r4, #0]
   200fa:	4631      	mov	r1, r6
   200fc:	4638      	mov	r0, r7
   200fe:	f001 fa9d 	bl	2163c <ble_gap_notify_rx_event>
    *rxom = NULL;
   20102:	2300      	movs	r3, #0
   20104:	6023      	str	r3, [r4, #0]
}
   20106:	4628      	mov	r0, r5
   20108:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return BLE_HS_ENOMEM;
   2010a:	2506      	movs	r5, #6
   2010c:	e7fb      	b.n	20106 <ble_att_svr_rx_notify+0x32>
        return BLE_HS_EBADDATA;
   2010e:	250a      	movs	r5, #10
   20110:	e7f9      	b.n	20106 <ble_att_svr_rx_notify+0x32>

00020112 <ble_att_svr_rx_indicate>:
{
   20112:	b5f0      	push	{r4, r5, r6, r7, lr}
   20114:	b085      	sub	sp, #20
   20116:	4607      	mov	r7, r0
   20118:	460c      	mov	r4, r1
    txom = NULL;
   2011a:	2200      	movs	r2, #0
   2011c:	9203      	str	r2, [sp, #12]
    att_err = 0;
   2011e:	f88d 200b 	strb.w	r2, [sp, #11]
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*req), NULL);
   20122:	2102      	movs	r1, #2
   20124:	4620      	mov	r0, r4
   20126:	f7fe fea7 	bl	1ee78 <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   2012a:	b9d0      	cbnz	r0, 20162 <ble_att_svr_rx_indicate+0x50>
    req = (struct ble_att_indicate_req *)(*rxom)->om_data;
   2012c:	6823      	ldr	r3, [r4, #0]
   2012e:	681b      	ldr	r3, [r3, #0]
    handle = le16toh(req->baiq_handle);
   20130:	881d      	ldrh	r5, [r3, #0]
    if (handle == 0) {
   20132:	b90d      	cbnz	r5, 20138 <ble_att_svr_rx_indicate+0x26>
        rc = BLE_HS_EBADDATA;
   20134:	260a      	movs	r6, #10
   20136:	e016      	b.n	20166 <ble_att_svr_rx_indicate+0x54>
    rc = ble_att_svr_build_indicate_rsp(rxom, &txom, &att_err);
   20138:	f10d 020b 	add.w	r2, sp, #11
   2013c:	a903      	add	r1, sp, #12
   2013e:	4620      	mov	r0, r4
   20140:	f7fe ff05 	bl	1ef4e <ble_att_svr_build_indicate_rsp>
    if (rc != 0) {
   20144:	4606      	mov	r6, r0
   20146:	b970      	cbnz	r0, 20166 <ble_att_svr_rx_indicate+0x54>
    os_mbuf_adj(*rxom, sizeof(*req));
   20148:	2102      	movs	r1, #2
   2014a:	6820      	ldr	r0, [r4, #0]
   2014c:	f7ed fa40 	bl	d5d0 <os_mbuf_adj>
    ble_gap_notify_rx_event(conn_handle, handle, *rxom, 1);
   20150:	2301      	movs	r3, #1
   20152:	6822      	ldr	r2, [r4, #0]
   20154:	4629      	mov	r1, r5
   20156:	4638      	mov	r0, r7
   20158:	f001 fa70 	bl	2163c <ble_gap_notify_rx_event>
    *rxom = NULL;
   2015c:	2300      	movs	r3, #0
   2015e:	6023      	str	r3, [r4, #0]
   20160:	e001      	b.n	20166 <ble_att_svr_rx_indicate+0x54>
   20162:	4606      	mov	r6, r0
    handle = 0;
   20164:	2500      	movs	r5, #0
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom, BLE_ATT_OP_INDICATE_REQ,
   20166:	f89d 300b 	ldrb.w	r3, [sp, #11]
   2016a:	9501      	str	r5, [sp, #4]
   2016c:	9300      	str	r3, [sp, #0]
   2016e:	231d      	movs	r3, #29
   20170:	9a03      	ldr	r2, [sp, #12]
   20172:	4631      	mov	r1, r6
   20174:	4638      	mov	r0, r7
   20176:	f7ff fc3b 	bl	1f9f0 <ble_att_svr_tx_rsp>
}
   2017a:	b005      	add	sp, #20
   2017c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

00020180 <ble_att_svr_start>:

int
ble_att_svr_start(void)
{
   20180:	b510      	push	{r4, lr}
   20182:	b082      	sub	sp, #8
    int rc;

    ble_att_svr_free_start_mem();
   20184:	f7ff fa5e 	bl	1f644 <ble_att_svr_free_start_mem>

    if (ble_hs_max_attrs > 0) {
   20188:	4b0f      	ldr	r3, [pc, #60]	; (201c8 <ble_att_svr_start+0x48>)
   2018a:	881c      	ldrh	r4, [r3, #0]
   2018c:	b91c      	cbnz	r4, 20196 <ble_att_svr_start+0x16>
            rc = BLE_HS_EOS;
            goto err;
        }
    }

    return 0;
   2018e:	2400      	movs	r4, #0

err:
    ble_att_svr_free_start_mem();
    return rc;
}
   20190:	4620      	mov	r0, r4
   20192:	b002      	add	sp, #8
   20194:	bd10      	pop	{r4, pc}
        ble_att_svr_entry_mem = malloc(
   20196:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   2019a:	0098      	lsls	r0, r3, #2
   2019c:	f00e ffd8 	bl	2f150 <malloc>
   201a0:	4b0a      	ldr	r3, [pc, #40]	; (201cc <ble_att_svr_start+0x4c>)
   201a2:	6018      	str	r0, [r3, #0]
        if (ble_att_svr_entry_mem == NULL) {
   201a4:	b160      	cbz	r0, 201c0 <ble_att_svr_start+0x40>
        rc = os_mempool_init(&ble_att_svr_entry_pool, ble_hs_max_attrs,
   201a6:	4b0a      	ldr	r3, [pc, #40]	; (201d0 <ble_att_svr_start+0x50>)
   201a8:	9300      	str	r3, [sp, #0]
   201aa:	4603      	mov	r3, r0
   201ac:	2214      	movs	r2, #20
   201ae:	4621      	mov	r1, r4
   201b0:	4808      	ldr	r0, [pc, #32]	; (201d4 <ble_att_svr_start+0x54>)
   201b2:	f7ed fce7 	bl	db84 <os_mempool_init>
        if (rc != 0) {
   201b6:	b128      	cbz	r0, 201c4 <ble_att_svr_start+0x44>
            rc = BLE_HS_EOS;
   201b8:	240b      	movs	r4, #11
    ble_att_svr_free_start_mem();
   201ba:	f7ff fa43 	bl	1f644 <ble_att_svr_free_start_mem>
    return rc;
   201be:	e7e7      	b.n	20190 <ble_att_svr_start+0x10>
            rc = BLE_HS_ENOMEM;
   201c0:	2406      	movs	r4, #6
   201c2:	e7fa      	b.n	201ba <ble_att_svr_start+0x3a>
    return 0;
   201c4:	2400      	movs	r4, #0
   201c6:	e7e3      	b.n	20190 <ble_att_svr_start+0x10>
   201c8:	20004110 	.word	0x20004110
   201cc:	20002350 	.word	0x20002350
   201d0:	00031f78 	.word	0x00031f78
   201d4:	20002354 	.word	0x20002354

000201d8 <ble_att_svr_init>:

int
ble_att_svr_init(void)
{
   201d8:	b500      	push	{lr}
   201da:	b083      	sub	sp, #12
    int rc;

    if (MYNEWT_VAL(BLE_ATT_SVR_MAX_PREP_ENTRIES) > 0) {
        rc = os_mempool_init(&ble_att_svr_prep_entry_pool,
   201dc:	4b0a      	ldr	r3, [pc, #40]	; (20208 <ble_att_svr_init+0x30>)
   201de:	9300      	str	r3, [sp, #0]
   201e0:	4b0a      	ldr	r3, [pc, #40]	; (2020c <ble_att_svr_init+0x34>)
   201e2:	220c      	movs	r2, #12
   201e4:	2140      	movs	r1, #64	; 0x40
   201e6:	480a      	ldr	r0, [pc, #40]	; (20210 <ble_att_svr_init+0x38>)
   201e8:	f7ed fccc 	bl	db84 <os_mempool_init>
                             MYNEWT_VAL(BLE_ATT_SVR_MAX_PREP_ENTRIES),
                             sizeof (struct ble_att_prep_entry),
                             ble_att_svr_prep_entry_mem,
                             "ble_att_svr_prep_entry_pool");
        if (rc != 0) {
   201ec:	b950      	cbnz	r0, 20204 <ble_att_svr_init+0x2c>
            return BLE_HS_EOS;
        }
    }

    STAILQ_INIT(&ble_att_svr_list);
   201ee:	4b09      	ldr	r3, [pc, #36]	; (20214 <ble_att_svr_init+0x3c>)
   201f0:	6018      	str	r0, [r3, #0]
   201f2:	605b      	str	r3, [r3, #4]
    STAILQ_INIT(&ble_att_svr_hidden_list);
   201f4:	4b08      	ldr	r3, [pc, #32]	; (20218 <ble_att_svr_init+0x40>)
   201f6:	6018      	str	r0, [r3, #0]
   201f8:	605b      	str	r3, [r3, #4]

    ble_att_svr_id = 0;
   201fa:	4b08      	ldr	r3, [pc, #32]	; (2021c <ble_att_svr_init+0x44>)
   201fc:	8018      	strh	r0, [r3, #0]

    return 0;
}
   201fe:	b003      	add	sp, #12
   20200:	f85d fb04 	ldr.w	pc, [sp], #4
            return BLE_HS_EOS;
   20204:	200b      	movs	r0, #11
   20206:	e7fa      	b.n	201fe <ble_att_svr_init+0x26>
   20208:	00031f5c 	.word	0x00031f5c
   2020c:	20002384 	.word	0x20002384
   20210:	20002684 	.word	0x20002684
   20214:	2000237c 	.word	0x2000237c
   20218:	20002370 	.word	0x20002370
   2021c:	20002378 	.word	0x20002378

00020220 <ble_gap_call_event_cb>:
ble_gap_event_listener_call(struct ble_gap_event *event);

static int
ble_gap_call_event_cb(struct ble_gap_event *event,
                      ble_gap_event_fn *cb, void *cb_arg)
{
   20220:	b508      	push	{r3, lr}
    int rc;

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());

    if (cb != NULL) {
   20222:	b119      	cbz	r1, 2022c <ble_gap_call_event_cb+0xc>
   20224:	460b      	mov	r3, r1
   20226:	4611      	mov	r1, r2
        rc = cb(event, cb_arg);
   20228:	4798      	blx	r3
        }
        rc = 0;
    }

    return rc;
}
   2022a:	bd08      	pop	{r3, pc}
        if (event->type == BLE_GAP_EVENT_CONN_UPDATE_REQ) {
   2022c:	7803      	ldrb	r3, [r0, #0]
   2022e:	2b04      	cmp	r3, #4
   20230:	d001      	beq.n	20236 <ble_gap_call_event_cb+0x16>
        rc = 0;
   20232:	2000      	movs	r0, #0
    return rc;
   20234:	e7f9      	b.n	2022a <ble_gap_call_event_cb+0xa>
                *event->conn_update_req.peer_params;
   20236:	6842      	ldr	r2, [r0, #4]
            *event->conn_update_req.self_params =
   20238:	6883      	ldr	r3, [r0, #8]
   2023a:	6810      	ldr	r0, [r2, #0]
   2023c:	6851      	ldr	r1, [r2, #4]
   2023e:	6892      	ldr	r2, [r2, #8]
   20240:	6018      	str	r0, [r3, #0]
   20242:	6059      	str	r1, [r3, #4]
   20244:	609a      	str	r2, [r3, #8]
        rc = 0;
   20246:	2000      	movs	r0, #0
   20248:	e7ef      	b.n	2022a <ble_gap_call_event_cb+0xa>
	...

0002024c <ble_gap_is_preempted>:
{
    int i;

    BLE_HS_DBG_ASSERT(ble_hs_locked_by_cur_task());

    if (ble_gap_master.preempted_op != BLE_GAP_OP_NULL) {
   2024c:	4b09      	ldr	r3, [pc, #36]	; (20274 <ble_gap_is_preempted+0x28>)
   2024e:	7c1b      	ldrb	r3, [r3, #16]
   20250:	b963      	cbnz	r3, 2026c <ble_gap_is_preempted+0x20>
        return true;
    }

    for (i = 0; i < BLE_ADV_INSTANCES; i++) {
   20252:	2b00      	cmp	r3, #0
   20254:	dd01      	ble.n	2025a <ble_gap_is_preempted+0xe>
        if (ble_gap_slave[i].preempted) {
            return true;
        }
    }

    return false;
   20256:	2000      	movs	r0, #0
   20258:	4770      	bx	lr
        if (ble_gap_slave[i].preempted) {
   2025a:	4a06      	ldr	r2, [pc, #24]	; (20274 <ble_gap_is_preempted+0x28>)
   2025c:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   20260:	7d52      	ldrb	r2, [r2, #21]
   20262:	f012 0f04 	tst.w	r2, #4
   20266:	d103      	bne.n	20270 <ble_gap_is_preempted+0x24>
    for (i = 0; i < BLE_ADV_INSTANCES; i++) {
   20268:	3301      	adds	r3, #1
   2026a:	e7f2      	b.n	20252 <ble_gap_is_preempted+0x6>
        return true;
   2026c:	2001      	movs	r0, #1
   2026e:	4770      	bx	lr
            return true;
   20270:	2001      	movs	r0, #1
}
   20272:	4770      	bx	lr
   20274:	20000558 	.word	0x20000558

00020278 <ble_gap_has_client>:

#if NIMBLE_BLE_CONNECT
static bool
ble_gap_has_client(struct ble_gap_master_state *out_state)
{
    if (!out_state) {
   20278:	b120      	cbz	r0, 20284 <ble_gap_has_client+0xc>
        return 0;
    }

    return out_state->cb;
   2027a:	6880      	ldr	r0, [r0, #8]
   2027c:	3000      	adds	r0, #0
   2027e:	bf18      	it	ne
   20280:	2001      	movne	r0, #1
   20282:	4770      	bx	lr
        return 0;
   20284:	2000      	movs	r0, #0
}
   20286:	4770      	bx	lr

00020288 <ble_gap_update_to_l2cap>:
#if NIMBLE_BLE_CONNECT
static void
ble_gap_update_to_l2cap(const struct ble_gap_upd_params *params,
                        struct ble_l2cap_sig_update_params *l2cap_params)
{
    l2cap_params->itvl_min = params->itvl_min;
   20288:	8803      	ldrh	r3, [r0, #0]
   2028a:	800b      	strh	r3, [r1, #0]
    l2cap_params->itvl_max = params->itvl_max;
   2028c:	8843      	ldrh	r3, [r0, #2]
   2028e:	804b      	strh	r3, [r1, #2]
    l2cap_params->slave_latency = params->latency;
   20290:	8883      	ldrh	r3, [r0, #4]
   20292:	808b      	strh	r3, [r1, #4]
    l2cap_params->timeout_multiplier = params->supervision_timeout;
   20294:	88c3      	ldrh	r3, [r0, #6]
   20296:	80cb      	strh	r3, [r1, #6]
}
   20298:	4770      	bx	lr
	...

0002029c <ble_gap_adv_active_instance>:

static int
ble_gap_adv_active_instance(uint8_t instance)
{
    /* Assume read is atomic; mutex not necessary. */
    return ble_gap_slave[instance].op == BLE_GAP_OP_S_ADV;
   2029c:	4b04      	ldr	r3, [pc, #16]	; (202b0 <ble_gap_adv_active_instance+0x14>)
   2029e:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   202a2:	7d00      	ldrb	r0, [r0, #20]
}
   202a4:	2801      	cmp	r0, #1
   202a6:	bf14      	ite	ne
   202a8:	2000      	movne	r0, #0
   202aa:	2001      	moveq	r0, #1
   202ac:	4770      	bx	lr
   202ae:	bf00      	nop
   202b0:	20000558 	.word	0x20000558

000202b4 <ble_gap_accept_master_conn>:
static int
ble_gap_accept_master_conn(void)
{
    int rc;

    switch (ble_gap_master.op) {
   202b4:	4b05      	ldr	r3, [pc, #20]	; (202cc <ble_gap_accept_master_conn+0x18>)
   202b6:	781b      	ldrb	r3, [r3, #0]
   202b8:	2b02      	cmp	r3, #2
   202ba:	d105      	bne.n	202c8 <ble_gap_accept_master_conn+0x14>
        rc = BLE_HS_ENOENT;
        break;
    }

    if (rc == 0) {
        STATS_INC(ble_gap_stats, connect_mst);
   202bc:	4a04      	ldr	r2, [pc, #16]	; (202d0 <ble_gap_accept_master_conn+0x1c>)
   202be:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
   202c0:	3301      	adds	r3, #1
   202c2:	65d3      	str	r3, [r2, #92]	; 0x5c
        rc = 0;
   202c4:	2000      	movs	r0, #0
   202c6:	4770      	bx	lr
        rc = BLE_HS_ENOENT;
   202c8:	2005      	movs	r0, #5
    }

    return rc;
}
   202ca:	4770      	bx	lr
   202cc:	20000558 	.word	0x20000558
   202d0:	20003f64 	.word	0x20003f64

000202d4 <ble_gap_accept_slave_conn>:
static int
ble_gap_accept_slave_conn(uint8_t instance)
{
    int rc;

    if (instance >= BLE_ADV_INSTANCES) {
   202d4:	b988      	cbnz	r0, 202fa <ble_gap_accept_slave_conn+0x26>
{
   202d6:	b510      	push	{r4, lr}
   202d8:	4604      	mov	r4, r0
       rc = BLE_HS_ENOENT;
    } else if (!ble_gap_adv_active_instance(instance)) {
   202da:	f7ff ffdf 	bl	2029c <ble_gap_adv_active_instance>
   202de:	b170      	cbz	r0, 202fe <ble_gap_accept_slave_conn+0x2a>
        rc = BLE_HS_ENOENT;
    } else {
        if (ble_gap_slave[instance].connectable) {
   202e0:	4b09      	ldr	r3, [pc, #36]	; (20308 <ble_gap_accept_slave_conn+0x34>)
   202e2:	eb03 1404 	add.w	r4, r3, r4, lsl #4
   202e6:	7d63      	ldrb	r3, [r4, #21]
   202e8:	f013 0f08 	tst.w	r3, #8
   202ec:	d009      	beq.n	20302 <ble_gap_accept_slave_conn+0x2e>
            rc = BLE_HS_ENOENT;
        }
    }

    if (rc == 0) {
        STATS_INC(ble_gap_stats, connect_slv);
   202ee:	4a07      	ldr	r2, [pc, #28]	; (2030c <ble_gap_accept_slave_conn+0x38>)
   202f0:	6e13      	ldr	r3, [r2, #96]	; 0x60
   202f2:	3301      	adds	r3, #1
   202f4:	6613      	str	r3, [r2, #96]	; 0x60
            rc = 0;
   202f6:	2000      	movs	r0, #0
    }

    return rc;
}
   202f8:	bd10      	pop	{r4, pc}
       rc = BLE_HS_ENOENT;
   202fa:	2005      	movs	r0, #5
}
   202fc:	4770      	bx	lr
        rc = BLE_HS_ENOENT;
   202fe:	2005      	movs	r0, #5
   20300:	e7fa      	b.n	202f8 <ble_gap_accept_slave_conn+0x24>
            rc = BLE_HS_ENOENT;
   20302:	2005      	movs	r0, #5
    return rc;
   20304:	e7f8      	b.n	202f8 <ble_gap_accept_slave_conn+0x24>
   20306:	bf00      	nop
   20308:	20000558 	.word	0x20000558
   2030c:	20003f64 	.word	0x20003f64

00020310 <ble_gap_adv_type>:
 *****************************************************************************/
#if NIMBLE_BLE_ADVERTISE && !MYNEWT_VAL(BLE_EXT_ADV)
static int
ble_gap_adv_type(const struct ble_gap_adv_params *adv_params)
{
    switch (adv_params->conn_mode) {
   20310:	7803      	ldrb	r3, [r0, #0]
   20312:	b11b      	cbz	r3, 2031c <ble_gap_adv_type+0xc>
   20314:	2b01      	cmp	r3, #1
   20316:	d005      	beq.n	20324 <ble_gap_adv_type+0x14>
        } else {
            return BLE_HCI_ADV_TYPE_ADV_SCAN_IND;
        }

    case BLE_GAP_CONN_MODE_UND:
        return BLE_HCI_ADV_TYPE_ADV_IND;
   20318:	2000      	movs	r0, #0
   2031a:	4770      	bx	lr
        if (adv_params->disc_mode == BLE_GAP_DISC_MODE_NON) {
   2031c:	7843      	ldrb	r3, [r0, #1]
   2031e:	b93b      	cbnz	r3, 20330 <ble_gap_adv_type+0x20>
            return BLE_HCI_ADV_TYPE_ADV_NONCONN_IND;
   20320:	2003      	movs	r0, #3
   20322:	4770      	bx	lr

    case BLE_GAP_CONN_MODE_DIR:
        if (adv_params->high_duty_cycle) {
   20324:	7a03      	ldrb	r3, [r0, #8]
   20326:	f013 0f01 	tst.w	r3, #1
   2032a:	d003      	beq.n	20334 <ble_gap_adv_type+0x24>
            return BLE_HCI_ADV_TYPE_ADV_DIRECT_IND_HD;
   2032c:	2001      	movs	r0, #1
   2032e:	4770      	bx	lr
            return BLE_HCI_ADV_TYPE_ADV_SCAN_IND;
   20330:	2002      	movs	r0, #2
   20332:	4770      	bx	lr
        } else {
            return BLE_HCI_ADV_TYPE_ADV_DIRECT_IND_LD;
   20334:	2004      	movs	r0, #4

    default:
        BLE_HS_DBG_ASSERT(0);
        return BLE_HCI_ADV_TYPE_ADV_IND;
    }
}
   20336:	4770      	bx	lr

00020338 <ble_gap_adv_dflt_itvls>:

static void
ble_gap_adv_dflt_itvls(uint8_t conn_mode,
                       uint16_t *out_itvl_min, uint16_t *out_itvl_max)
{
    switch (conn_mode) {
   20338:	2801      	cmp	r0, #1
   2033a:	d011      	beq.n	20360 <ble_gap_adv_dflt_itvls+0x28>
   2033c:	b130      	cbz	r0, 2034c <ble_gap_adv_dflt_itvls+0x14>
   2033e:	2802      	cmp	r0, #2
   20340:	d009      	beq.n	20356 <ble_gap_adv_dflt_itvls+0x1e>
        *out_itvl_max = BLE_GAP_ADV_FAST_INTERVAL1_MAX;
        break;

    default:
        BLE_HS_DBG_ASSERT(0);
        *out_itvl_min = BLE_GAP_ADV_FAST_INTERVAL1_MIN;
   20342:	2330      	movs	r3, #48	; 0x30
   20344:	800b      	strh	r3, [r1, #0]
        *out_itvl_max = BLE_GAP_ADV_FAST_INTERVAL1_MAX;
   20346:	2360      	movs	r3, #96	; 0x60
   20348:	8013      	strh	r3, [r2, #0]
        break;
    }
}
   2034a:	4770      	bx	lr
        *out_itvl_min = BLE_GAP_ADV_FAST_INTERVAL2_MIN;
   2034c:	23a0      	movs	r3, #160	; 0xa0
   2034e:	800b      	strh	r3, [r1, #0]
        *out_itvl_max = BLE_GAP_ADV_FAST_INTERVAL2_MAX;
   20350:	23f0      	movs	r3, #240	; 0xf0
   20352:	8013      	strh	r3, [r2, #0]
        break;
   20354:	4770      	bx	lr
        *out_itvl_min = BLE_GAP_ADV_FAST_INTERVAL1_MIN;
   20356:	2330      	movs	r3, #48	; 0x30
   20358:	800b      	strh	r3, [r1, #0]
        *out_itvl_max = BLE_GAP_ADV_FAST_INTERVAL1_MAX;
   2035a:	2360      	movs	r3, #96	; 0x60
   2035c:	8013      	strh	r3, [r2, #0]
        break;
   2035e:	4770      	bx	lr
        *out_itvl_min = BLE_GAP_ADV_FAST_INTERVAL1_MIN;
   20360:	2330      	movs	r3, #48	; 0x30
   20362:	800b      	strh	r3, [r1, #0]
        *out_itvl_max = BLE_GAP_ADV_FAST_INTERVAL1_MAX;
   20364:	2360      	movs	r3, #96	; 0x60
   20366:	8013      	strh	r3, [r2, #0]
        break;
   20368:	4770      	bx	lr
	...

0002036c <ble_gap_update_entry_find>:
}

static struct ble_gap_update_entry *
ble_gap_update_entry_find(uint16_t conn_handle,
                          struct ble_gap_update_entry **out_prev)
{
   2036c:	b410      	push	{r4}
    struct ble_gap_update_entry *prev;

    BLE_HS_DBG_ASSERT(ble_hs_locked_by_cur_task());

    prev = NULL;
    SLIST_FOREACH(entry, &ble_gap_update_entries, next) {
   2036e:	4b07      	ldr	r3, [pc, #28]	; (2038c <ble_gap_update_entry_find+0x20>)
   20370:	681b      	ldr	r3, [r3, #0]
    prev = NULL;
   20372:	2400      	movs	r4, #0
    SLIST_FOREACH(entry, &ble_gap_update_entries, next) {
   20374:	b12b      	cbz	r3, 20382 <ble_gap_update_entry_find+0x16>
        if (entry->conn_handle == conn_handle) {
   20376:	8a9a      	ldrh	r2, [r3, #20]
   20378:	4282      	cmp	r2, r0
   2037a:	d002      	beq.n	20382 <ble_gap_update_entry_find+0x16>
            break;
        }

        prev = entry;
   2037c:	461c      	mov	r4, r3
    SLIST_FOREACH(entry, &ble_gap_update_entries, next) {
   2037e:	681b      	ldr	r3, [r3, #0]
   20380:	e7f8      	b.n	20374 <ble_gap_update_entry_find+0x8>
    }

    if (out_prev != NULL) {
   20382:	b101      	cbz	r1, 20386 <ble_gap_update_entry_find+0x1a>
        *out_prev = prev;
   20384:	600c      	str	r4, [r1, #0]
    }

    return entry;
}
   20386:	4618      	mov	r0, r3
   20388:	bc10      	pop	{r4}
   2038a:	4770      	bx	lr
   2038c:	200026a4 	.word	0x200026a4

00020390 <ble_gap_validate_conn_params>:
static bool
ble_gap_validate_conn_params(const struct ble_gap_upd_params *params)
{

    /* Requirements from Bluetooth spec. v4.2 [Vol 2, Part E], 7.8.18 */
    if (params->itvl_min > params->itvl_max) {
   20390:	8802      	ldrh	r2, [r0, #0]
   20392:	8843      	ldrh	r3, [r0, #2]
   20394:	429a      	cmp	r2, r3
   20396:	d816      	bhi.n	203c6 <ble_gap_validate_conn_params+0x36>
        return false;
    }

    if (params->itvl_min < 0x0006 || params->itvl_max > 0x0C80) {
   20398:	2a05      	cmp	r2, #5
   2039a:	d916      	bls.n	203ca <ble_gap_validate_conn_params+0x3a>
   2039c:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   203a0:	d815      	bhi.n	203ce <ble_gap_validate_conn_params+0x3e>
        return false;
    }

    if (params->latency > 0x01F3) {
   203a2:	8882      	ldrh	r2, [r0, #4]
   203a4:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
   203a8:	d213      	bcs.n	203d2 <ble_gap_validate_conn_params+0x42>
    /* According to specification mentioned above we should make sure that:
     * supervision_timeout_ms > (1 + latency) * 2 * max_interval_ms
     *    =>
     * supervision_timeout * 10 ms > (1 + latency) * 2 * itvl_max * 1.25ms
     */
    if (params->supervision_timeout <=
   203aa:	88c1      	ldrh	r1, [r0, #6]
                   (((1 + params->latency) * params->itvl_max) / 4)) {
   203ac:	fb02 3303 	mla	r3, r2, r3, r3
   203b0:	2b00      	cmp	r3, #0
   203b2:	db04      	blt.n	203be <ble_gap_validate_conn_params+0x2e>
    if (params->supervision_timeout <=
   203b4:	ebb1 0fa3 	cmp.w	r1, r3, asr #2
   203b8:	dd03      	ble.n	203c2 <ble_gap_validate_conn_params+0x32>
        return false;
    }

    return true;
   203ba:	2001      	movs	r0, #1
}
   203bc:	4770      	bx	lr
                   (((1 + params->latency) * params->itvl_max) / 4)) {
   203be:	3303      	adds	r3, #3
   203c0:	e7f8      	b.n	203b4 <ble_gap_validate_conn_params+0x24>
        return false;
   203c2:	2000      	movs	r0, #0
   203c4:	4770      	bx	lr
        return false;
   203c6:	2000      	movs	r0, #0
   203c8:	4770      	bx	lr
        return false;
   203ca:	2000      	movs	r0, #0
   203cc:	4770      	bx	lr
   203ce:	2000      	movs	r0, #0
   203d0:	4770      	bx	lr
        return false;
   203d2:	2000      	movs	r0, #0
   203d4:	4770      	bx	lr
	...

000203d8 <ble_gap_event_listener_call>:
    return rc;
}

static int
ble_gap_event_listener_call(struct ble_gap_event *event)
{
   203d8:	b538      	push	{r3, r4, r5, lr}
   203da:	4605      	mov	r5, r0
    struct ble_gap_event_listener *evl = NULL;

    SLIST_FOREACH(evl, &ble_gap_event_listener_list, link) {
   203dc:	4b05      	ldr	r3, [pc, #20]	; (203f4 <ble_gap_event_listener_call+0x1c>)
   203de:	681c      	ldr	r4, [r3, #0]
   203e0:	e004      	b.n	203ec <ble_gap_event_listener_call+0x14>
        evl->fn(event, evl->arg);
   203e2:	6823      	ldr	r3, [r4, #0]
   203e4:	6861      	ldr	r1, [r4, #4]
   203e6:	4628      	mov	r0, r5
   203e8:	4798      	blx	r3
    SLIST_FOREACH(evl, &ble_gap_event_listener_list, link) {
   203ea:	68a4      	ldr	r4, [r4, #8]
   203ec:	2c00      	cmp	r4, #0
   203ee:	d1f8      	bne.n	203e2 <ble_gap_event_listener_call+0xa>
    }

    return 0;
}
   203f0:	2000      	movs	r0, #0
   203f2:	bd38      	pop	{r3, r4, r5, pc}
   203f4:	200026a0 	.word	0x200026a0

000203f8 <ble_gap_extract_conn_cb>:
{
   203f8:	b570      	push	{r4, r5, r6, lr}
   203fa:	4604      	mov	r4, r0
   203fc:	460e      	mov	r6, r1
   203fe:	4615      	mov	r5, r2
    ble_hs_lock();
   20400:	f003 fb3e 	bl	23a80 <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
   20404:	4620      	mov	r0, r4
   20406:	f004 f98b 	bl	24720 <ble_hs_conn_find>
    if (conn != NULL) {
   2040a:	4604      	mov	r4, r0
   2040c:	b140      	cbz	r0, 20420 <ble_gap_extract_conn_cb+0x28>
        *out_cb = conn->bhc_cb;
   2040e:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   20410:	6033      	str	r3, [r6, #0]
        *out_cb_arg = conn->bhc_cb_arg;
   20412:	6e03      	ldr	r3, [r0, #96]	; 0x60
   20414:	602b      	str	r3, [r5, #0]
    ble_hs_unlock();
   20416:	f003 fb37 	bl	23a88 <ble_hs_unlock>
    if (conn == NULL) {
   2041a:	b12c      	cbz	r4, 20428 <ble_gap_extract_conn_cb+0x30>
        return 0;
   2041c:	2000      	movs	r0, #0
}
   2041e:	bd70      	pop	{r4, r5, r6, pc}
        *out_cb = NULL;
   20420:	2300      	movs	r3, #0
   20422:	6033      	str	r3, [r6, #0]
        *out_cb_arg = NULL;
   20424:	602b      	str	r3, [r5, #0]
   20426:	e7f6      	b.n	20416 <ble_gap_extract_conn_cb+0x1e>
        return BLE_HS_ENOTCONN;
   20428:	2007      	movs	r0, #7
   2042a:	e7f8      	b.n	2041e <ble_gap_extract_conn_cb+0x26>

0002042c <ble_gap_call_conn_event_cb>:
{
   2042c:	b510      	push	{r4, lr}
   2042e:	b082      	sub	sp, #8
   20430:	4604      	mov	r4, r0
   20432:	4608      	mov	r0, r1
    rc = ble_gap_extract_conn_cb(conn_handle, &cb, &cb_arg);
   20434:	466a      	mov	r2, sp
   20436:	a901      	add	r1, sp, #4
   20438:	f7ff ffde 	bl	203f8 <ble_gap_extract_conn_cb>
    if (rc != 0) {
   2043c:	4603      	mov	r3, r0
   2043e:	b110      	cbz	r0, 20446 <ble_gap_call_conn_event_cb+0x1a>
}
   20440:	4618      	mov	r0, r3
   20442:	b002      	add	sp, #8
   20444:	bd10      	pop	{r4, pc}
    rc = ble_gap_call_event_cb(event, cb, cb_arg);
   20446:	9a00      	ldr	r2, [sp, #0]
   20448:	9901      	ldr	r1, [sp, #4]
   2044a:	4620      	mov	r0, r4
   2044c:	f7ff fee8 	bl	20220 <ble_gap_call_event_cb>
   20450:	4603      	mov	r3, r0
   20452:	e7f5      	b.n	20440 <ble_gap_call_conn_event_cb+0x14>

00020454 <ble_gap_fill_conn_desc>:
{
   20454:	b570      	push	{r4, r5, r6, lr}
   20456:	b088      	sub	sp, #32
   20458:	4605      	mov	r5, r0
   2045a:	460c      	mov	r4, r1
    ble_hs_conn_addrs(conn, &addrs);
   2045c:	ae01      	add	r6, sp, #4
   2045e:	4631      	mov	r1, r6
   20460:	f004 f9c4 	bl	247ec <ble_hs_conn_addrs>
    desc->our_id_addr = addrs.our_id_addr;
   20464:	e896 0003 	ldmia.w	r6, {r0, r1}
   20468:	6060      	str	r0, [r4, #4]
   2046a:	f104 0308 	add.w	r3, r4, #8
   2046e:	f823 1b02 	strh.w	r1, [r3], #2
   20472:	0c09      	lsrs	r1, r1, #16
   20474:	7019      	strb	r1, [r3, #0]
    desc->peer_id_addr = addrs.peer_id_addr;
   20476:	ab08      	add	r3, sp, #32
   20478:	f853 1d15 	ldr.w	r1, [r3, #-21]!
   2047c:	f8c4 100b 	str.w	r1, [r4, #11]
   20480:	8899      	ldrh	r1, [r3, #4]
   20482:	799b      	ldrb	r3, [r3, #6]
   20484:	f8a4 100f 	strh.w	r1, [r4, #15]
   20488:	7463      	strb	r3, [r4, #17]
    desc->our_ota_addr = addrs.our_ota_addr;
   2048a:	ab08      	add	r3, sp, #32
   2048c:	f853 1d0e 	ldr.w	r1, [r3, #-14]!
   20490:	f8c4 1012 	str.w	r1, [r4, #18]
   20494:	8899      	ldrh	r1, [r3, #4]
   20496:	799b      	ldrb	r3, [r3, #6]
   20498:	82e1      	strh	r1, [r4, #22]
   2049a:	7623      	strb	r3, [r4, #24]
    desc->peer_ota_addr = addrs.peer_ota_addr;
   2049c:	ab08      	add	r3, sp, #32
   2049e:	f853 1d07 	ldr.w	r1, [r3, #-7]!
   204a2:	f8c4 1019 	str.w	r1, [r4, #25]
   204a6:	8899      	ldrh	r1, [r3, #4]
   204a8:	799b      	ldrb	r3, [r3, #6]
   204aa:	f8a4 101d 	strh.w	r1, [r4, #29]
   204ae:	77e3      	strb	r3, [r4, #31]
    desc->conn_handle = conn->bhc_handle;
   204b0:	88ab      	ldrh	r3, [r5, #4]
   204b2:	8423      	strh	r3, [r4, #32]
    desc->conn_itvl = conn->bhc_itvl;
   204b4:	8bab      	ldrh	r3, [r5, #28]
   204b6:	8463      	strh	r3, [r4, #34]	; 0x22
    desc->conn_latency = conn->bhc_latency;
   204b8:	8beb      	ldrh	r3, [r5, #30]
   204ba:	84a3      	strh	r3, [r4, #36]	; 0x24
    desc->supervision_timeout = conn->bhc_supervision_timeout;
   204bc:	8c2b      	ldrh	r3, [r5, #32]
   204be:	84e3      	strh	r3, [r4, #38]	; 0x26
    desc->master_clock_accuracy = conn->bhc_master_clock_accuracy;
   204c0:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
   204c4:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    desc->sec_state = conn->bhc_sec_state;
   204c8:	6dab      	ldr	r3, [r5, #88]	; 0x58
   204ca:	6023      	str	r3, [r4, #0]
    if (conn->bhc_flags & BLE_HS_CONN_F_MASTER) {
   204cc:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
   204d0:	f013 0f01 	tst.w	r3, #1
   204d4:	d104      	bne.n	204e0 <ble_gap_fill_conn_desc+0x8c>
        desc->role = BLE_GAP_ROLE_SLAVE;
   204d6:	2301      	movs	r3, #1
   204d8:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
   204dc:	b008      	add	sp, #32
   204de:	bd70      	pop	{r4, r5, r6, pc}
        desc->role = BLE_GAP_ROLE_MASTER;
   204e0:	2300      	movs	r3, #0
   204e2:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
   204e6:	e7f9      	b.n	204dc <ble_gap_fill_conn_desc+0x88>

000204e8 <ble_gap_conn_to_snapshot>:
{
   204e8:	b538      	push	{r3, r4, r5, lr}
   204ea:	4605      	mov	r5, r0
   204ec:	460c      	mov	r4, r1
    ble_gap_fill_conn_desc(conn, snap->desc);
   204ee:	6809      	ldr	r1, [r1, #0]
   204f0:	f7ff ffb0 	bl	20454 <ble_gap_fill_conn_desc>
    snap->cb = conn->bhc_cb;
   204f4:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   204f6:	6063      	str	r3, [r4, #4]
    snap->cb_arg = conn->bhc_cb_arg;
   204f8:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   204fa:	60a3      	str	r3, [r4, #8]
}
   204fc:	bd38      	pop	{r3, r4, r5, pc}

000204fe <ble_gap_find_snapshot>:
{
   204fe:	b538      	push	{r3, r4, r5, lr}
   20500:	4604      	mov	r4, r0
   20502:	460d      	mov	r5, r1
    ble_hs_lock();
   20504:	f003 fabc 	bl	23a80 <ble_hs_lock>
    conn = ble_hs_conn_find(handle);
   20508:	4620      	mov	r0, r4
   2050a:	f004 f909 	bl	24720 <ble_hs_conn_find>
    if (conn != NULL) {
   2050e:	4604      	mov	r4, r0
   20510:	b110      	cbz	r0, 20518 <ble_gap_find_snapshot+0x1a>
        ble_gap_conn_to_snapshot(conn, snap);
   20512:	4629      	mov	r1, r5
   20514:	f7ff ffe8 	bl	204e8 <ble_gap_conn_to_snapshot>
    ble_hs_unlock();
   20518:	f003 fab6 	bl	23a88 <ble_hs_unlock>
    if (conn == NULL) {
   2051c:	b10c      	cbz	r4, 20522 <ble_gap_find_snapshot+0x24>
        return 0;
   2051e:	2000      	movs	r0, #0
}
   20520:	bd38      	pop	{r3, r4, r5, pc}
        return BLE_HS_ENOTCONN;
   20522:	2007      	movs	r0, #7
   20524:	e7fc      	b.n	20520 <ble_gap_find_snapshot+0x22>

00020526 <ble_gap_rd_rem_sup_feat_tx>:
{
   20526:	b500      	push	{lr}
   20528:	b085      	sub	sp, #20
    cmd.conn_handle = htole16(handle);
   2052a:	a904      	add	r1, sp, #16
   2052c:	f821 0d04 	strh.w	r0, [r1, #-4]!
    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   20530:	2300      	movs	r3, #0
   20532:	9300      	str	r3, [sp, #0]
   20534:	2202      	movs	r2, #2
   20536:	f242 0016 	movw	r0, #8214	; 0x2016
   2053a:	f004 fb3b 	bl	24bb4 <ble_hs_hci_cmd_tx>
}
   2053e:	b005      	add	sp, #20
   20540:	f85d fb04 	ldr.w	pc, [sp], #4

00020544 <ble_gap_conn_cancel_tx>:
{
   20544:	b500      	push	{lr}
   20546:	b083      	sub	sp, #12
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   20548:	2100      	movs	r1, #0
   2054a:	9100      	str	r1, [sp, #0]
   2054c:	460b      	mov	r3, r1
   2054e:	460a      	mov	r2, r1
   20550:	f242 000e 	movw	r0, #8206	; 0x200e
   20554:	f004 fb2e 	bl	24bb4 <ble_hs_hci_cmd_tx>
}
   20558:	b003      	add	sp, #12
   2055a:	f85d fb04 	ldr.w	pc, [sp], #4

0002055e <ble_gap_adv_enable_tx>:
{
   2055e:	b500      	push	{lr}
   20560:	b085      	sub	sp, #20
    cmd.enable = !!enable;
   20562:	3000      	adds	r0, #0
   20564:	bf18      	it	ne
   20566:	2001      	movne	r0, #1
   20568:	a904      	add	r1, sp, #16
   2056a:	f801 0d04 	strb.w	r0, [r1, #-4]!
    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   2056e:	2300      	movs	r3, #0
   20570:	9300      	str	r3, [sp, #0]
   20572:	2201      	movs	r2, #1
   20574:	f242 000a 	movw	r0, #8202	; 0x200a
   20578:	f004 fb1c 	bl	24bb4 <ble_hs_hci_cmd_tx>
}
   2057c:	b005      	add	sp, #20
   2057e:	f85d fb04 	ldr.w	pc, [sp], #4

00020582 <ble_gap_adv_params_tx>:
{
   20582:	b570      	push	{r4, r5, r6, lr}
   20584:	b08a      	sub	sp, #40	; 0x28
   20586:	4606      	mov	r6, r0
   20588:	460c      	mov	r4, r1
   2058a:	4615      	mov	r5, r2
    const ble_addr_t *peer_any = BLE_ADDR_ANY;
   2058c:	2300      	movs	r3, #0
   2058e:	9308      	str	r3, [sp, #32]
   20590:	f8cd 3023 	str.w	r3, [sp, #35]	; 0x23
    if ((adv_params->itvl_min == 0) && (adv_params->itvl_max == 0)) {
   20594:	8853      	ldrh	r3, [r2, #2]
   20596:	b90b      	cbnz	r3, 2059c <ble_gap_adv_params_tx+0x1a>
   20598:	8892      	ldrh	r2, [r2, #4]
   2059a:	b33a      	cbz	r2, 205ec <ble_gap_adv_params_tx+0x6a>
        cmd.min_interval = htole16(adv_params->itvl_min);
   2059c:	f8ad 3010 	strh.w	r3, [sp, #16]
        cmd.max_interval = htole16(adv_params->itvl_max);
   205a0:	88ab      	ldrh	r3, [r5, #4]
   205a2:	f8ad 3012 	strh.w	r3, [sp, #18]
    cmd.type = ble_gap_adv_type(adv_params);
   205a6:	4628      	mov	r0, r5
   205a8:	f7ff feb2 	bl	20310 <ble_gap_adv_type>
   205ac:	f88d 0014 	strb.w	r0, [sp, #20]
    cmd.own_addr_type = own_addr_type;
   205b0:	f88d 6015 	strb.w	r6, [sp, #21]
    if (peer_addr == NULL) {
   205b4:	b34c      	cbz	r4, 2060a <ble_gap_adv_params_tx+0x88>
    cmd.peer_addr_type = peer_addr->type;
   205b6:	7823      	ldrb	r3, [r4, #0]
   205b8:	f88d 3016 	strb.w	r3, [sp, #22]
    memcpy(&cmd.peer_addr, peer_addr->val, sizeof(cmd.peer_addr));
   205bc:	f854 3f01 	ldr.w	r3, [r4, #1]!
   205c0:	f8cd 3017 	str.w	r3, [sp, #23]
   205c4:	88a3      	ldrh	r3, [r4, #4]
   205c6:	f8ad 301b 	strh.w	r3, [sp, #27]
    if (adv_params->channel_map == 0) {
   205ca:	79ab      	ldrb	r3, [r5, #6]
   205cc:	b1fb      	cbz	r3, 2060e <ble_gap_adv_params_tx+0x8c>
        cmd.chan_map = adv_params->channel_map;
   205ce:	f88d 301d 	strb.w	r3, [sp, #29]
    cmd.filter_policy = adv_params->filter_policy;
   205d2:	79eb      	ldrb	r3, [r5, #7]
   205d4:	f88d 301e 	strb.w	r3, [sp, #30]
    return ble_hs_hci_cmd_tx(opcode, &cmd, sizeof(cmd), NULL, 0);
   205d8:	2300      	movs	r3, #0
   205da:	9300      	str	r3, [sp, #0]
   205dc:	220f      	movs	r2, #15
   205de:	a904      	add	r1, sp, #16
   205e0:	f242 0006 	movw	r0, #8198	; 0x2006
   205e4:	f004 fae6 	bl	24bb4 <ble_hs_hci_cmd_tx>
}
   205e8:	b00a      	add	sp, #40	; 0x28
   205ea:	bd70      	pop	{r4, r5, r6, pc}
        ble_gap_adv_dflt_itvls(adv_params->conn_mode, &min, &max);
   205ec:	aa03      	add	r2, sp, #12
   205ee:	f10d 010e 	add.w	r1, sp, #14
   205f2:	7828      	ldrb	r0, [r5, #0]
   205f4:	f7ff fea0 	bl	20338 <ble_gap_adv_dflt_itvls>
        cmd.min_interval = htole16(min);
   205f8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   205fc:	f8ad 3010 	strh.w	r3, [sp, #16]
        cmd.max_interval = htole16(max);
   20600:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   20604:	f8ad 3012 	strh.w	r3, [sp, #18]
   20608:	e7cd      	b.n	205a6 <ble_gap_adv_params_tx+0x24>
        peer_addr = peer_any;
   2060a:	ac08      	add	r4, sp, #32
   2060c:	e7d3      	b.n	205b6 <ble_gap_adv_params_tx+0x34>
        cmd.chan_map = BLE_GAP_ADV_DFLT_CHANNEL_MAP;
   2060e:	2307      	movs	r3, #7
   20610:	f88d 301d 	strb.w	r3, [sp, #29]
   20614:	e7dd      	b.n	205d2 <ble_gap_adv_params_tx+0x50>

00020616 <ble_gap_tx_param_pos_reply>:
{
   20616:	b500      	push	{lr}
   20618:	b087      	sub	sp, #28
    cmd.conn_handle = htole16(conn_handle);
   2061a:	f8ad 0008 	strh.w	r0, [sp, #8]
    cmd.conn_itvl_min = htole16(params->itvl_min);
   2061e:	880b      	ldrh	r3, [r1, #0]
   20620:	f8ad 300a 	strh.w	r3, [sp, #10]
    cmd.conn_itvl_max = htole16(params->itvl_max);
   20624:	884b      	ldrh	r3, [r1, #2]
   20626:	f8ad 300c 	strh.w	r3, [sp, #12]
    cmd.conn_latency = htole16(params->latency);
   2062a:	888b      	ldrh	r3, [r1, #4]
   2062c:	f8ad 300e 	strh.w	r3, [sp, #14]
    cmd.supervision_timeout = htole16(params->supervision_timeout);
   20630:	88cb      	ldrh	r3, [r1, #6]
   20632:	f8ad 3010 	strh.w	r3, [sp, #16]
    cmd.min_ce = htole16(params->min_ce_len);
   20636:	890b      	ldrh	r3, [r1, #8]
   20638:	f8ad 3012 	strh.w	r3, [sp, #18]
    cmd.max_ce = htole16(params->max_ce_len);
   2063c:	894b      	ldrh	r3, [r1, #10]
   2063e:	f8ad 3014 	strh.w	r3, [sp, #20]
    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   20642:	2300      	movs	r3, #0
   20644:	9300      	str	r3, [sp, #0]
   20646:	220e      	movs	r2, #14
   20648:	a902      	add	r1, sp, #8
   2064a:	f242 0020 	movw	r0, #8224	; 0x2020
   2064e:	f004 fab1 	bl	24bb4 <ble_hs_hci_cmd_tx>
}
   20652:	b007      	add	sp, #28
   20654:	f85d fb04 	ldr.w	pc, [sp], #4

00020658 <ble_gap_tx_param_neg_reply>:
{
   20658:	b500      	push	{lr}
   2065a:	b085      	sub	sp, #20
    cmd.conn_handle = htole16(conn_handle);
   2065c:	f8ad 000c 	strh.w	r0, [sp, #12]
    cmd.reason = reject_reason;
   20660:	f88d 100e 	strb.w	r1, [sp, #14]
    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   20664:	2300      	movs	r3, #0
   20666:	9300      	str	r3, [sp, #0]
   20668:	2203      	movs	r2, #3
   2066a:	a903      	add	r1, sp, #12
   2066c:	f242 0021 	movw	r0, #8225	; 0x2021
   20670:	f004 faa0 	bl	24bb4 <ble_hs_hci_cmd_tx>
}
   20674:	b005      	add	sp, #20
   20676:	f85d fb04 	ldr.w	pc, [sp], #4

0002067a <ble_gap_update_tx>:
{
   2067a:	b500      	push	{lr}
   2067c:	b087      	sub	sp, #28
    cmd.conn_handle = htole16(conn_handle);
   2067e:	f8ad 0008 	strh.w	r0, [sp, #8]
    cmd.conn_itvl_min = htole16(params->itvl_min);
   20682:	880b      	ldrh	r3, [r1, #0]
   20684:	f8ad 300a 	strh.w	r3, [sp, #10]
    cmd.conn_itvl_max = htole16(params->itvl_max);
   20688:	884b      	ldrh	r3, [r1, #2]
   2068a:	f8ad 300c 	strh.w	r3, [sp, #12]
    cmd.conn_latency = htole16(params->latency);
   2068e:	888b      	ldrh	r3, [r1, #4]
   20690:	f8ad 300e 	strh.w	r3, [sp, #14]
    cmd.supervision_timeout = htole16(params->supervision_timeout);
   20694:	88cb      	ldrh	r3, [r1, #6]
   20696:	f8ad 3010 	strh.w	r3, [sp, #16]
    cmd.min_ce_len = htole16(params->min_ce_len);
   2069a:	890b      	ldrh	r3, [r1, #8]
   2069c:	f8ad 3012 	strh.w	r3, [sp, #18]
    cmd.max_ce_len = htole16(params->max_ce_len);
   206a0:	894b      	ldrh	r3, [r1, #10]
   206a2:	f8ad 3014 	strh.w	r3, [sp, #20]
    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   206a6:	2300      	movs	r3, #0
   206a8:	9300      	str	r3, [sp, #0]
   206aa:	220e      	movs	r2, #14
   206ac:	a902      	add	r1, sp, #8
   206ae:	f242 0013 	movw	r0, #8211	; 0x2013
   206b2:	f004 fa7f 	bl	24bb4 <ble_hs_hci_cmd_tx>
}
   206b6:	b007      	add	sp, #28
   206b8:	f85d fb04 	ldr.w	pc, [sp], #4

000206bc <ble_gap_update_entry_remove>:
{
   206bc:	b510      	push	{r4, lr}
   206be:	b082      	sub	sp, #8
    entry = ble_gap_update_entry_find(conn_handle, &prev);
   206c0:	a901      	add	r1, sp, #4
   206c2:	f7ff fe53 	bl	2036c <ble_gap_update_entry_find>
    if (entry != NULL) {
   206c6:	4604      	mov	r4, r0
   206c8:	b128      	cbz	r0, 206d6 <ble_gap_update_entry_remove+0x1a>
        if (prev == NULL) {
   206ca:	9b01      	ldr	r3, [sp, #4]
   206cc:	b133      	cbz	r3, 206dc <ble_gap_update_entry_remove+0x20>
            SLIST_NEXT(prev, next) = SLIST_NEXT(entry, next);
   206ce:	6802      	ldr	r2, [r0, #0]
   206d0:	601a      	str	r2, [r3, #0]
        ble_hs_timer_resched();
   206d2:	f003 facd 	bl	23c70 <ble_hs_timer_resched>
}
   206d6:	4620      	mov	r0, r4
   206d8:	b002      	add	sp, #8
   206da:	bd10      	pop	{r4, pc}
            SLIST_REMOVE_HEAD(&ble_gap_update_entries, next);
   206dc:	4b02      	ldr	r3, [pc, #8]	; (206e8 <ble_gap_update_entry_remove+0x2c>)
   206de:	681a      	ldr	r2, [r3, #0]
   206e0:	6812      	ldr	r2, [r2, #0]
   206e2:	601a      	str	r2, [r3, #0]
   206e4:	e7f5      	b.n	206d2 <ble_gap_update_entry_remove+0x16>
   206e6:	bf00      	nop
   206e8:	200026a4 	.word	0x200026a4

000206ec <ble_gap_master_reset_state>:
{
   206ec:	b508      	push	{r3, lr}
    ble_gap_master.op = BLE_GAP_OP_NULL;
   206ee:	4b07      	ldr	r3, [pc, #28]	; (2070c <ble_gap_master_reset_state+0x20>)
   206f0:	2200      	movs	r2, #0
   206f2:	701a      	strb	r2, [r3, #0]
    ble_gap_master.exp_set = 0;
   206f4:	7859      	ldrb	r1, [r3, #1]
   206f6:	f362 0100 	bfi	r1, r2, #0, #1
   206fa:	7059      	strb	r1, [r3, #1]
    ble_gap_master.conn.cancel = 0;
   206fc:	7c59      	ldrb	r1, [r3, #17]
   206fe:	f362 01c3 	bfi	r1, r2, #3, #1
   20702:	7459      	strb	r1, [r3, #17]
    ble_hs_timer_resched();
   20704:	f003 fab4 	bl	23c70 <ble_hs_timer_resched>
}
   20708:	bd08      	pop	{r3, pc}
   2070a:	bf00      	nop
   2070c:	20000558 	.word	0x20000558

00020710 <ble_gap_master_extract_state>:
{
   20710:	b570      	push	{r4, r5, r6, lr}
   20712:	4604      	mov	r4, r0
   20714:	460e      	mov	r6, r1
    ble_hs_lock();
   20716:	f003 f9b3 	bl	23a80 <ble_hs_lock>
    *out_state = ble_gap_master;
   2071a:	4d08      	ldr	r5, [pc, #32]	; (2073c <ble_gap_master_extract_state+0x2c>)
   2071c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   2071e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   20720:	682b      	ldr	r3, [r5, #0]
   20722:	6023      	str	r3, [r4, #0]
    if (reset_state) {
   20724:	b916      	cbnz	r6, 2072c <ble_gap_master_extract_state+0x1c>
    ble_hs_unlock();
   20726:	f003 f9af 	bl	23a88 <ble_hs_unlock>
}
   2072a:	bd70      	pop	{r4, r5, r6, pc}
        ble_gap_master_reset_state();
   2072c:	f7ff ffde 	bl	206ec <ble_gap_master_reset_state>
        ble_gap_master.preempted_op = BLE_GAP_OP_NULL;
   20730:	f1a5 0310 	sub.w	r3, r5, #16
   20734:	2200      	movs	r2, #0
   20736:	741a      	strb	r2, [r3, #16]
   20738:	e7f5      	b.n	20726 <ble_gap_master_extract_state+0x16>
   2073a:	bf00      	nop
   2073c:	20000558 	.word	0x20000558

00020740 <ble_gap_master_connect_failure>:
{
   20740:	b510      	push	{r4, lr}
   20742:	b092      	sub	sp, #72	; 0x48
   20744:	4604      	mov	r4, r0
    ble_gap_master_extract_state(&state, 1);
   20746:	2101      	movs	r1, #1
   20748:	a80d      	add	r0, sp, #52	; 0x34
   2074a:	f7ff ffe1 	bl	20710 <ble_gap_master_extract_state>
    if (ble_gap_has_client(&state)) {
   2074e:	a80d      	add	r0, sp, #52	; 0x34
   20750:	f7ff fd92 	bl	20278 <ble_gap_has_client>
   20754:	b910      	cbnz	r0, 2075c <ble_gap_master_connect_failure+0x1c>
        rc = 0;
   20756:	2000      	movs	r0, #0
}
   20758:	b012      	add	sp, #72	; 0x48
   2075a:	bd10      	pop	{r4, pc}
        memset(&event, 0, sizeof event);
   2075c:	2234      	movs	r2, #52	; 0x34
   2075e:	2100      	movs	r1, #0
   20760:	4668      	mov	r0, sp
   20762:	f7ee f945 	bl	e9f0 <memset>
        event.connect.status = status;
   20766:	9401      	str	r4, [sp, #4]
        rc = state.cb(&event, state.cb_arg);
   20768:	9910      	ldr	r1, [sp, #64]	; 0x40
   2076a:	4668      	mov	r0, sp
   2076c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2076e:	4798      	blx	r3
   20770:	e7f2      	b.n	20758 <ble_gap_master_connect_failure+0x18>
	...

00020774 <ble_gap_master_failed>:
{
   20774:	b508      	push	{r3, lr}
    switch (ble_gap_master.op) {
   20776:	4b06      	ldr	r3, [pc, #24]	; (20790 <ble_gap_master_failed+0x1c>)
   20778:	781b      	ldrb	r3, [r3, #0]
   2077a:	2b02      	cmp	r3, #2
   2077c:	d000      	beq.n	20780 <ble_gap_master_failed+0xc>
}
   2077e:	bd08      	pop	{r3, pc}
        STATS_INC(ble_gap_stats, initiate_fail);
   20780:	4a04      	ldr	r2, [pc, #16]	; (20794 <ble_gap_master_failed+0x20>)
   20782:	6c13      	ldr	r3, [r2, #64]	; 0x40
   20784:	3301      	adds	r3, #1
   20786:	6413      	str	r3, [r2, #64]	; 0x40
        ble_gap_master_connect_failure(status);
   20788:	f7ff ffda 	bl	20740 <ble_gap_master_connect_failure>
}
   2078c:	e7f7      	b.n	2077e <ble_gap_master_failed+0xa>
   2078e:	bf00      	nop
   20790:	20000558 	.word	0x20000558
   20794:	20003f64 	.word	0x20003f64

00020798 <ble_gap_master_connect_cancelled>:
{
   20798:	b510      	push	{r4, lr}
   2079a:	b092      	sub	sp, #72	; 0x48
    ble_gap_master_extract_state(&state, 1);
   2079c:	2101      	movs	r1, #1
   2079e:	a80d      	add	r0, sp, #52	; 0x34
   207a0:	f7ff ffb6 	bl	20710 <ble_gap_master_extract_state>
    if (state.cb != NULL) {
   207a4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   207a6:	b194      	cbz	r4, 207ce <ble_gap_master_connect_cancelled+0x36>
        memset(&event, 0, sizeof event);
   207a8:	2234      	movs	r2, #52	; 0x34
   207aa:	2100      	movs	r1, #0
   207ac:	4668      	mov	r0, sp
   207ae:	f7ee f91f 	bl	e9f0 <memset>
        event.connect.conn_handle = BLE_HS_CONN_HANDLE_NONE;
   207b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   207b6:	f8ad 3008 	strh.w	r3, [sp, #8]
        if (state.conn.cancel) {
   207ba:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
   207be:	f013 0f08 	tst.w	r3, #8
   207c2:	d006      	beq.n	207d2 <ble_gap_master_connect_cancelled+0x3a>
            event.connect.status = BLE_HS_EAPP;
   207c4:	2309      	movs	r3, #9
   207c6:	9301      	str	r3, [sp, #4]
        state.cb(&event, state.cb_arg);
   207c8:	9910      	ldr	r1, [sp, #64]	; 0x40
   207ca:	4668      	mov	r0, sp
   207cc:	47a0      	blx	r4
}
   207ce:	b012      	add	sp, #72	; 0x48
   207d0:	bd10      	pop	{r4, pc}
            event.connect.status = BLE_HS_ETIMEOUT;
   207d2:	230d      	movs	r3, #13
   207d4:	9301      	str	r3, [sp, #4]
   207d6:	e7f7      	b.n	207c8 <ble_gap_master_connect_cancelled+0x30>

000207d8 <ble_gap_slave_reset_state>:
{
   207d8:	b508      	push	{r3, lr}
    ble_gap_slave[instance].op = BLE_GAP_OP_NULL;
   207da:	4b06      	ldr	r3, [pc, #24]	; (207f4 <ble_gap_slave_reset_state+0x1c>)
   207dc:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   207e0:	2100      	movs	r1, #0
   207e2:	7501      	strb	r1, [r0, #20]
    ble_gap_slave[instance].exp_set = 0;
   207e4:	7d42      	ldrb	r2, [r0, #21]
   207e6:	f361 1204 	bfi	r2, r1, #4, #1
   207ea:	7542      	strb	r2, [r0, #21]
    ble_hs_timer_resched();
   207ec:	f003 fa40 	bl	23c70 <ble_hs_timer_resched>
}
   207f0:	bd08      	pop	{r3, pc}
   207f2:	bf00      	nop
   207f4:	20000558 	.word	0x20000558

000207f8 <ble_gap_slave_extract_cb>:
{
   207f8:	b570      	push	{r4, r5, r6, lr}
   207fa:	4604      	mov	r4, r0
   207fc:	460e      	mov	r6, r1
   207fe:	4615      	mov	r5, r2
    ble_hs_lock();
   20800:	f003 f93e 	bl	23a80 <ble_hs_lock>
    *out_cb = ble_gap_slave[instance].cb;
   20804:	4b06      	ldr	r3, [pc, #24]	; (20820 <ble_gap_slave_extract_cb+0x28>)
   20806:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   2080a:	69da      	ldr	r2, [r3, #28]
   2080c:	6032      	str	r2, [r6, #0]
    *out_cb_arg = ble_gap_slave[instance].cb_arg;
   2080e:	6a1b      	ldr	r3, [r3, #32]
   20810:	602b      	str	r3, [r5, #0]
    ble_gap_slave_reset_state(instance);
   20812:	4620      	mov	r0, r4
   20814:	f7ff ffe0 	bl	207d8 <ble_gap_slave_reset_state>
    ble_hs_unlock();
   20818:	f003 f936 	bl	23a88 <ble_hs_unlock>
}
   2081c:	bd70      	pop	{r4, r5, r6, pc}
   2081e:	bf00      	nop
   20820:	20000558 	.word	0x20000558

00020824 <ble_gap_adv_finished>:
{
   20824:	b530      	push	{r4, r5, lr}
   20826:	b091      	sub	sp, #68	; 0x44
   20828:	4604      	mov	r4, r0
   2082a:	460d      	mov	r5, r1
    memset(&event, 0, sizeof event);
   2082c:	2234      	movs	r2, #52	; 0x34
   2082e:	2100      	movs	r1, #0
   20830:	a803      	add	r0, sp, #12
   20832:	f7ee f8dd 	bl	e9f0 <memset>
    event.type = BLE_GAP_EVENT_ADV_COMPLETE;
   20836:	2309      	movs	r3, #9
   20838:	f88d 300c 	strb.w	r3, [sp, #12]
    event.adv_complete.reason = reason;
   2083c:	9504      	str	r5, [sp, #16]
    ble_gap_event_listener_call(&event);
   2083e:	a803      	add	r0, sp, #12
   20840:	f7ff fdca 	bl	203d8 <ble_gap_event_listener_call>
    ble_gap_slave_extract_cb(instance, &cb, &cb_arg);
   20844:	aa01      	add	r2, sp, #4
   20846:	a902      	add	r1, sp, #8
   20848:	4620      	mov	r0, r4
   2084a:	f7ff ffd5 	bl	207f8 <ble_gap_slave_extract_cb>
    if (cb != NULL) {
   2084e:	9b02      	ldr	r3, [sp, #8]
   20850:	b113      	cbz	r3, 20858 <ble_gap_adv_finished+0x34>
        cb(&event, cb_arg);
   20852:	9901      	ldr	r1, [sp, #4]
   20854:	a803      	add	r0, sp, #12
   20856:	4798      	blx	r3
}
   20858:	b011      	add	sp, #68	; 0x44
   2085a:	bd30      	pop	{r4, r5, pc}

0002085c <ble_gap_update_entry_free>:
    if (entry != NULL) {
   2085c:	b128      	cbz	r0, 2086a <ble_gap_update_entry_free+0xe>
{
   2085e:	b508      	push	{r3, lr}
   20860:	4601      	mov	r1, r0
        rc = os_memblock_put(&ble_gap_update_entry_pool, entry);
   20862:	4802      	ldr	r0, [pc, #8]	; (2086c <ble_gap_update_entry_free+0x10>)
   20864:	f7ed f9fa 	bl	dc5c <os_memblock_put>
}
   20868:	bd08      	pop	{r3, pc}
   2086a:	4770      	bx	lr
   2086c:	200026c0 	.word	0x200026c0

00020870 <ble_gap_master_ticks_until_exp>:
    if (ble_gap_master.op == BLE_GAP_OP_NULL || !ble_gap_master.exp_set) {
   20870:	4b0c      	ldr	r3, [pc, #48]	; (208a4 <ble_gap_master_ticks_until_exp+0x34>)
   20872:	781b      	ldrb	r3, [r3, #0]
   20874:	b16b      	cbz	r3, 20892 <ble_gap_master_ticks_until_exp+0x22>
   20876:	4b0b      	ldr	r3, [pc, #44]	; (208a4 <ble_gap_master_ticks_until_exp+0x34>)
   20878:	785b      	ldrb	r3, [r3, #1]
   2087a:	f013 0f01 	tst.w	r3, #1
   2087e:	d00b      	beq.n	20898 <ble_gap_master_ticks_until_exp+0x28>
{
   20880:	b510      	push	{r4, lr}
    ticks = ble_gap_master.exp_os_ticks - ble_npl_time_get();
   20882:	4b08      	ldr	r3, [pc, #32]	; (208a4 <ble_gap_master_ticks_until_exp+0x34>)
   20884:	685c      	ldr	r4, [r3, #4]
   20886:	f7ed fd93 	bl	e3b0 <os_time_get>
   2088a:	1a20      	subs	r0, r4, r0
    if (ticks > 0) {
   2088c:	2800      	cmp	r0, #0
   2088e:	dd06      	ble.n	2089e <ble_gap_master_ticks_until_exp+0x2e>
}
   20890:	bd10      	pop	{r4, pc}
        return BLE_HS_FOREVER;
   20892:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   20896:	4770      	bx	lr
   20898:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
}
   2089c:	4770      	bx	lr
    return 0;
   2089e:	2000      	movs	r0, #0
   208a0:	e7f6      	b.n	20890 <ble_gap_master_ticks_until_exp+0x20>
   208a2:	bf00      	nop
   208a4:	20000558 	.word	0x20000558

000208a8 <ble_gap_update_next_exp>:
{
   208a8:	b538      	push	{r3, r4, r5, lr}
   208aa:	4605      	mov	r5, r0
   208ac:	f7ed fd80 	bl	e3b0 <os_time_get>
    SLIST_FOREACH(entry, &ble_gap_update_entries, next) {
   208b0:	4b0b      	ldr	r3, [pc, #44]	; (208e0 <ble_gap_update_next_exp+0x38>)
   208b2:	681a      	ldr	r2, [r3, #0]
    best_ticks = BLE_HS_FOREVER;
   208b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    conn_handle = BLE_HS_CONN_HANDLE_NONE;
   208b8:	f64f 74ff 	movw	r4, #65535	; 0xffff
    SLIST_FOREACH(entry, &ble_gap_update_entries, next) {
   208bc:	e002      	b.n	208c4 <ble_gap_update_next_exp+0x1c>
            ticks = 0;
   208be:	2300      	movs	r3, #0
   208c0:	e005      	b.n	208ce <ble_gap_update_next_exp+0x26>
    SLIST_FOREACH(entry, &ble_gap_update_entries, next) {
   208c2:	6812      	ldr	r2, [r2, #0]
   208c4:	b142      	cbz	r2, 208d8 <ble_gap_update_next_exp+0x30>
        ticks = entry->exp_os_ticks - now;
   208c6:	6913      	ldr	r3, [r2, #16]
   208c8:	1a1b      	subs	r3, r3, r0
        if (ticks <= 0) {
   208ca:	2b00      	cmp	r3, #0
   208cc:	ddf7      	ble.n	208be <ble_gap_update_next_exp+0x16>
        if (ticks < best_ticks) {
   208ce:	4299      	cmp	r1, r3
   208d0:	ddf7      	ble.n	208c2 <ble_gap_update_next_exp+0x1a>
            conn_handle = entry->conn_handle;
   208d2:	8a94      	ldrh	r4, [r2, #20]
            best_ticks = ticks;
   208d4:	4619      	mov	r1, r3
   208d6:	e7f4      	b.n	208c2 <ble_gap_update_next_exp+0x1a>
    if (out_ticks_from_now != NULL) {
   208d8:	b105      	cbz	r5, 208dc <ble_gap_update_next_exp+0x34>
        *out_ticks_from_now = best_ticks;
   208da:	6029      	str	r1, [r5, #0]
}
   208dc:	4620      	mov	r0, r4
   208de:	bd38      	pop	{r3, r4, r5, pc}
   208e0:	200026a4 	.word	0x200026a4

000208e4 <ble_gap_slave_ticks_until_exp>:
    if (ble_gap_slave[0].op == BLE_GAP_OP_NULL || !ble_gap_slave[0].exp_set) {
   208e4:	4b0c      	ldr	r3, [pc, #48]	; (20918 <ble_gap_slave_ticks_until_exp+0x34>)
   208e6:	7d1b      	ldrb	r3, [r3, #20]
   208e8:	b16b      	cbz	r3, 20906 <ble_gap_slave_ticks_until_exp+0x22>
   208ea:	4b0b      	ldr	r3, [pc, #44]	; (20918 <ble_gap_slave_ticks_until_exp+0x34>)
   208ec:	7d5b      	ldrb	r3, [r3, #21]
   208ee:	f013 0f10 	tst.w	r3, #16
   208f2:	d00b      	beq.n	2090c <ble_gap_slave_ticks_until_exp+0x28>
{
   208f4:	b510      	push	{r4, lr}
    ticks = ble_gap_slave[0].exp_os_ticks - ble_npl_time_get();
   208f6:	4b08      	ldr	r3, [pc, #32]	; (20918 <ble_gap_slave_ticks_until_exp+0x34>)
   208f8:	699c      	ldr	r4, [r3, #24]
   208fa:	f7ed fd59 	bl	e3b0 <os_time_get>
   208fe:	1a20      	subs	r0, r4, r0
    if (ticks > 0) {
   20900:	2800      	cmp	r0, #0
   20902:	dd06      	ble.n	20912 <ble_gap_slave_ticks_until_exp+0x2e>
}
   20904:	bd10      	pop	{r4, pc}
        return BLE_HS_FOREVER;
   20906:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   2090a:	4770      	bx	lr
   2090c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
}
   20910:	4770      	bx	lr
    return 0;
   20912:	2000      	movs	r0, #0
   20914:	e7f6      	b.n	20904 <ble_gap_slave_ticks_until_exp+0x20>
   20916:	bf00      	nop
   20918:	20000558 	.word	0x20000558

0002091c <ble_gap_slave_timer>:
{
   2091c:	b508      	push	{r3, lr}
    ticks_until_exp = ble_gap_slave_ticks_until_exp();
   2091e:	f7ff ffe1 	bl	208e4 <ble_gap_slave_ticks_until_exp>
    if (ticks_until_exp != 0) {
   20922:	b100      	cbz	r0, 20926 <ble_gap_slave_timer+0xa>
}
   20924:	bd08      	pop	{r3, pc}
    rc = ble_gap_adv_enable_tx(0);
   20926:	2000      	movs	r0, #0
   20928:	f7ff fe19 	bl	2055e <ble_gap_adv_enable_tx>
    if (rc != 0) {
   2092c:	b108      	cbz	r0, 20932 <ble_gap_slave_timer+0x16>
        return 100;
   2092e:	2064      	movs	r0, #100	; 0x64
   20930:	e7f8      	b.n	20924 <ble_gap_slave_timer+0x8>
    ble_gap_slave_reset_state(0);
   20932:	f7ff ff51 	bl	207d8 <ble_gap_slave_reset_state>
    ble_gap_adv_finished(0, BLE_HS_ETIMEOUT, 0, 0);
   20936:	2300      	movs	r3, #0
   20938:	461a      	mov	r2, r3
   2093a:	210d      	movs	r1, #13
   2093c:	4618      	mov	r0, r3
   2093e:	f7ff ff71 	bl	20824 <ble_gap_adv_finished>
    return BLE_HS_FOREVER;
   20942:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   20946:	e7ed      	b.n	20924 <ble_gap_slave_timer+0x8>

00020948 <ble_gap_slave_set_timer>:
{
   20948:	b510      	push	{r4, lr}
   2094a:	4604      	mov	r4, r0
   2094c:	f7ed fd30 	bl	e3b0 <os_time_get>
    ble_gap_slave[0].exp_os_ticks = ble_npl_time_get() + ticks_from_now;
   20950:	4420      	add	r0, r4
   20952:	4b04      	ldr	r3, [pc, #16]	; (20964 <ble_gap_slave_set_timer+0x1c>)
   20954:	6198      	str	r0, [r3, #24]
    ble_gap_slave[0].exp_set = 1;
   20956:	7d5a      	ldrb	r2, [r3, #21]
   20958:	f042 0210 	orr.w	r2, r2, #16
   2095c:	755a      	strb	r2, [r3, #21]
    ble_hs_timer_resched();
   2095e:	f003 f987 	bl	23c70 <ble_hs_timer_resched>
}
   20962:	bd10      	pop	{r4, pc}
   20964:	20000558 	.word	0x20000558

00020968 <ble_gap_log_adv>:
{
   20968:	b5f0      	push	{r4, r5, r6, r7, lr}
   2096a:	b087      	sub	sp, #28
   2096c:	4606      	mov	r6, r0
   2096e:	460c      	mov	r4, r1
   20970:	4615      	mov	r5, r2
    BLE_HS_LOG(INFO, "disc_mode=%d", adv_params->disc_mode);
   20972:	7853      	ldrb	r3, [r2, #1]
   20974:	4a15      	ldr	r2, [pc, #84]	; (209cc <ble_gap_log_adv+0x64>)
   20976:	2101      	movs	r1, #1
   20978:	2004      	movs	r0, #4
   2097a:	f7f0 feb1 	bl	116e0 <modlog_printf>
    if (direct_addr) {
   2097e:	b1ac      	cbz	r4, 209ac <ble_gap_log_adv+0x44>
        BLE_HS_LOG(INFO, " direct_addr_type=%d direct_addr=",
   20980:	7823      	ldrb	r3, [r4, #0]
   20982:	4a13      	ldr	r2, [pc, #76]	; (209d0 <ble_gap_log_adv+0x68>)
   20984:	2101      	movs	r1, #1
   20986:	2004      	movs	r0, #4
   20988:	f7f0 feaa 	bl	116e0 <modlog_printf>
        BLE_HS_LOG_ADDR(INFO, direct_addr->val);
   2098c:	79a3      	ldrb	r3, [r4, #6]
   2098e:	7962      	ldrb	r2, [r4, #5]
   20990:	7921      	ldrb	r1, [r4, #4]
   20992:	78e0      	ldrb	r0, [r4, #3]
   20994:	78a7      	ldrb	r7, [r4, #2]
   20996:	7864      	ldrb	r4, [r4, #1]
   20998:	9404      	str	r4, [sp, #16]
   2099a:	9703      	str	r7, [sp, #12]
   2099c:	9002      	str	r0, [sp, #8]
   2099e:	9101      	str	r1, [sp, #4]
   209a0:	9200      	str	r2, [sp, #0]
   209a2:	4a0c      	ldr	r2, [pc, #48]	; (209d4 <ble_gap_log_adv+0x6c>)
   209a4:	2101      	movs	r1, #1
   209a6:	2004      	movs	r0, #4
   209a8:	f7f0 fe9a 	bl	116e0 <modlog_printf>
    BLE_HS_LOG(INFO, " adv_channel_map=%d own_addr_type=%d "
   209ac:	79ab      	ldrb	r3, [r5, #6]
   209ae:	79ea      	ldrb	r2, [r5, #7]
   209b0:	8869      	ldrh	r1, [r5, #2]
   209b2:	88a8      	ldrh	r0, [r5, #4]
   209b4:	9003      	str	r0, [sp, #12]
   209b6:	9102      	str	r1, [sp, #8]
   209b8:	9201      	str	r2, [sp, #4]
   209ba:	9600      	str	r6, [sp, #0]
   209bc:	4a06      	ldr	r2, [pc, #24]	; (209d8 <ble_gap_log_adv+0x70>)
   209be:	2101      	movs	r1, #1
   209c0:	2004      	movs	r0, #4
   209c2:	f7f0 fe8d 	bl	116e0 <modlog_printf>
}
   209c6:	b007      	add	sp, #28
   209c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   209ca:	bf00      	nop
   209cc:	00032028 	.word	0x00032028
   209d0:	00032038 	.word	0x00032038
   209d4:	0003161c 	.word	0x0003161c
   209d8:	0003205c 	.word	0x0003205c

000209dc <ble_gap_log_update>:
{
   209dc:	b570      	push	{r4, r5, r6, lr}
   209de:	b086      	sub	sp, #24
    BLE_HS_LOG(INFO, "connection parameter update; "
   209e0:	880b      	ldrh	r3, [r1, #0]
   209e2:	884a      	ldrh	r2, [r1, #2]
   209e4:	888c      	ldrh	r4, [r1, #4]
   209e6:	88cd      	ldrh	r5, [r1, #6]
   209e8:	890e      	ldrh	r6, [r1, #8]
   209ea:	8949      	ldrh	r1, [r1, #10]
   209ec:	9105      	str	r1, [sp, #20]
   209ee:	9604      	str	r6, [sp, #16]
   209f0:	9503      	str	r5, [sp, #12]
   209f2:	9402      	str	r4, [sp, #8]
   209f4:	9201      	str	r2, [sp, #4]
   209f6:	9300      	str	r3, [sp, #0]
   209f8:	4603      	mov	r3, r0
   209fa:	4a03      	ldr	r2, [pc, #12]	; (20a08 <ble_gap_log_update+0x2c>)
   209fc:	2101      	movs	r1, #1
   209fe:	2004      	movs	r0, #4
   20a00:	f7f0 fe6e 	bl	116e0 <modlog_printf>
}
   20a04:	b006      	add	sp, #24
   20a06:	bd70      	pop	{r4, r5, r6, pc}
   20a08:	000320b8 	.word	0x000320b8

00020a0c <ble_gap_master_timer>:
{
   20a0c:	b508      	push	{r3, lr}
    ticks_until_exp = ble_gap_master_ticks_until_exp();
   20a0e:	f7ff ff2f 	bl	20870 <ble_gap_master_ticks_until_exp>
    if (ticks_until_exp != 0) {
   20a12:	b9e0      	cbnz	r0, 20a4e <ble_gap_master_timer+0x42>
    switch (ble_gap_master.op) {
   20a14:	4b0f      	ldr	r3, [pc, #60]	; (20a54 <ble_gap_master_timer+0x48>)
   20a16:	781b      	ldrb	r3, [r3, #0]
   20a18:	2b01      	cmp	r3, #1
   20a1a:	d00c      	beq.n	20a36 <ble_gap_master_timer+0x2a>
   20a1c:	2b02      	cmp	r3, #2
   20a1e:	d114      	bne.n	20a4a <ble_gap_master_timer+0x3e>
        rc = ble_gap_conn_cancel_tx();
   20a20:	f7ff fd90 	bl	20544 <ble_gap_conn_cancel_tx>
        if (rc != 0) {
   20a24:	b9a0      	cbnz	r0, 20a50 <ble_gap_master_timer+0x44>
            ble_gap_master.exp_set = 0;
   20a26:	4b0b      	ldr	r3, [pc, #44]	; (20a54 <ble_gap_master_timer+0x48>)
   20a28:	785a      	ldrb	r2, [r3, #1]
   20a2a:	f36f 0200 	bfc	r2, #0, #1
   20a2e:	705a      	strb	r2, [r3, #1]
    return BLE_HS_FOREVER;
   20a30:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
        break;
   20a34:	e00b      	b.n	20a4e <ble_gap_master_timer+0x42>
        assert(0);
   20a36:	f7eb fbd7 	bl	c1e8 <hal_debugger_connected>
   20a3a:	b100      	cbz	r0, 20a3e <ble_gap_master_timer+0x32>
   20a3c:	be01      	bkpt	0x0001
   20a3e:	2300      	movs	r3, #0
   20a40:	461a      	mov	r2, r3
   20a42:	4619      	mov	r1, r3
   20a44:	4618      	mov	r0, r3
   20a46:	f7ec f883 	bl	cb50 <__assert_func>
    return BLE_HS_FOREVER;
   20a4a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
}
   20a4e:	bd08      	pop	{r3, pc}
            return ble_npl_time_ms_to_ticks32(BLE_GAP_CANCEL_RETRY_TIMEOUT_MS);
   20a50:	200c      	movs	r0, #12
   20a52:	e7fc      	b.n	20a4e <ble_gap_master_timer+0x42>
   20a54:	20000558 	.word	0x20000558

00020a58 <ble_gap_adv_validate>:
    if (adv_params == NULL) {
   20a58:	b37a      	cbz	r2, 20aba <ble_gap_adv_validate+0x62>
{
   20a5a:	b508      	push	{r3, lr}
   20a5c:	4613      	mov	r3, r2
    if (own_addr_type > BLE_HCI_ADV_OWN_ADDR_MAX) {
   20a5e:	2803      	cmp	r0, #3
   20a60:	d82d      	bhi.n	20abe <ble_gap_adv_validate+0x66>
    if (adv_params->disc_mode >= BLE_GAP_DISC_MODE_MAX) {
   20a62:	7852      	ldrb	r2, [r2, #1]
   20a64:	2a02      	cmp	r2, #2
   20a66:	d82c      	bhi.n	20ac2 <ble_gap_adv_validate+0x6a>
    if (ble_gap_slave[0].op != BLE_GAP_OP_NULL) {
   20a68:	4a1b      	ldr	r2, [pc, #108]	; (20ad8 <ble_gap_adv_validate+0x80>)
   20a6a:	7d12      	ldrb	r2, [r2, #20]
   20a6c:	bb5a      	cbnz	r2, 20ac6 <ble_gap_adv_validate+0x6e>
    switch (adv_params->conn_mode) {
   20a6e:	781a      	ldrb	r2, [r3, #0]
   20a70:	2a01      	cmp	r2, #1
   20a72:	d017      	beq.n	20aa4 <ble_gap_adv_validate+0x4c>
   20a74:	b11a      	cbz	r2, 20a7e <ble_gap_adv_validate+0x26>
   20a76:	2a02      	cmp	r2, #2
   20a78:	d009      	beq.n	20a8e <ble_gap_adv_validate+0x36>
        return BLE_HS_EINVAL;
   20a7a:	2003      	movs	r0, #3
   20a7c:	e020      	b.n	20ac0 <ble_gap_adv_validate+0x68>
        if (adv_params->high_duty_cycle) {
   20a7e:	7a1b      	ldrb	r3, [r3, #8]
   20a80:	f013 0f01 	tst.w	r3, #1
   20a84:	d101      	bne.n	20a8a <ble_gap_adv_validate+0x32>
    return 0;
   20a86:	2000      	movs	r0, #0
   20a88:	e01a      	b.n	20ac0 <ble_gap_adv_validate+0x68>
            return BLE_HS_EINVAL;
   20a8a:	2003      	movs	r0, #3
   20a8c:	e018      	b.n	20ac0 <ble_gap_adv_validate+0x68>
        if (adv_params->high_duty_cycle) {
   20a8e:	7a1b      	ldrb	r3, [r3, #8]
   20a90:	f013 0f01 	tst.w	r3, #1
   20a94:	d119      	bne.n	20aca <ble_gap_adv_validate+0x72>
        if (!ble_hs_conn_can_alloc()) {
   20a96:	f003 fd75 	bl	24584 <ble_hs_conn_can_alloc>
   20a9a:	b108      	cbz	r0, 20aa0 <ble_gap_adv_validate+0x48>
    return 0;
   20a9c:	2000      	movs	r0, #0
   20a9e:	e00f      	b.n	20ac0 <ble_gap_adv_validate+0x68>
            return BLE_HS_ENOMEM;
   20aa0:	2006      	movs	r0, #6
   20aa2:	e00d      	b.n	20ac0 <ble_gap_adv_validate+0x68>
        if (peer_addr == NULL) {
   20aa4:	b199      	cbz	r1, 20ace <ble_gap_adv_validate+0x76>
        if (peer_addr->type != BLE_ADDR_PUBLIC &&
   20aa6:	780b      	ldrb	r3, [r1, #0]
   20aa8:	2b03      	cmp	r3, #3
   20aaa:	d812      	bhi.n	20ad2 <ble_gap_adv_validate+0x7a>
        if (!ble_hs_conn_can_alloc()) {
   20aac:	f003 fd6a 	bl	24584 <ble_hs_conn_can_alloc>
   20ab0:	b108      	cbz	r0, 20ab6 <ble_gap_adv_validate+0x5e>
    return 0;
   20ab2:	2000      	movs	r0, #0
   20ab4:	e004      	b.n	20ac0 <ble_gap_adv_validate+0x68>
            return BLE_HS_ENOMEM;
   20ab6:	2006      	movs	r0, #6
   20ab8:	e002      	b.n	20ac0 <ble_gap_adv_validate+0x68>
        return BLE_HS_EINVAL;
   20aba:	2003      	movs	r0, #3
}
   20abc:	4770      	bx	lr
        return BLE_HS_EINVAL;
   20abe:	2003      	movs	r0, #3
}
   20ac0:	bd08      	pop	{r3, pc}
        return BLE_HS_EINVAL;
   20ac2:	2003      	movs	r0, #3
   20ac4:	e7fc      	b.n	20ac0 <ble_gap_adv_validate+0x68>
        return BLE_HS_EALREADY;
   20ac6:	2002      	movs	r0, #2
   20ac8:	e7fa      	b.n	20ac0 <ble_gap_adv_validate+0x68>
            return BLE_HS_EINVAL;
   20aca:	2003      	movs	r0, #3
   20acc:	e7f8      	b.n	20ac0 <ble_gap_adv_validate+0x68>
            return BLE_HS_EINVAL;
   20ace:	2003      	movs	r0, #3
   20ad0:	e7f6      	b.n	20ac0 <ble_gap_adv_validate+0x68>
            return BLE_HS_EINVAL;
   20ad2:	2003      	movs	r0, #3
   20ad4:	e7f4      	b.n	20ac0 <ble_gap_adv_validate+0x68>
   20ad6:	bf00      	nop
   20ad8:	20000558 	.word	0x20000558

00020adc <ble_gap_update_entry_alloc>:
{
   20adc:	b508      	push	{r3, lr}
    entry = os_memblock_get(&ble_gap_update_entry_pool);
   20ade:	4807      	ldr	r0, [pc, #28]	; (20afc <ble_gap_update_entry_alloc+0x20>)
   20ae0:	f7ed f894 	bl	dc0c <os_memblock_get>
    if (entry != NULL) {
   20ae4:	4603      	mov	r3, r0
   20ae6:	b130      	cbz	r0, 20af6 <ble_gap_update_entry_alloc+0x1a>
        memset(entry, 0, sizeof *entry);
   20ae8:	2200      	movs	r2, #0
   20aea:	6002      	str	r2, [r0, #0]
   20aec:	6042      	str	r2, [r0, #4]
   20aee:	6082      	str	r2, [r0, #8]
   20af0:	60c2      	str	r2, [r0, #12]
   20af2:	6102      	str	r2, [r0, #16]
   20af4:	6142      	str	r2, [r0, #20]
}
   20af6:	4618      	mov	r0, r3
   20af8:	bd08      	pop	{r3, pc}
   20afa:	bf00      	nop
   20afc:	200026c0 	.word	0x200026c0

00020b00 <ble_gap_conn_find>:
{
   20b00:	b538      	push	{r3, r4, r5, lr}
   20b02:	4604      	mov	r4, r0
   20b04:	460d      	mov	r5, r1
    ble_hs_lock();
   20b06:	f002 ffbb 	bl	23a80 <ble_hs_lock>
    conn = ble_hs_conn_find(handle);
   20b0a:	4620      	mov	r0, r4
   20b0c:	f003 fe08 	bl	24720 <ble_hs_conn_find>
    if (conn != NULL && out_desc != NULL) {
   20b10:	4604      	mov	r4, r0
   20b12:	b118      	cbz	r0, 20b1c <ble_gap_conn_find+0x1c>
   20b14:	b115      	cbz	r5, 20b1c <ble_gap_conn_find+0x1c>
        ble_gap_fill_conn_desc(conn, out_desc);
   20b16:	4629      	mov	r1, r5
   20b18:	f7ff fc9c 	bl	20454 <ble_gap_fill_conn_desc>
    ble_hs_unlock();
   20b1c:	f002 ffb4 	bl	23a88 <ble_hs_unlock>
    if (conn == NULL) {
   20b20:	b10c      	cbz	r4, 20b26 <ble_gap_conn_find+0x26>
        return 0;
   20b22:	2000      	movs	r0, #0
}
   20b24:	bd38      	pop	{r3, r4, r5, pc}
        return BLE_HS_ENOTCONN;
   20b26:	2007      	movs	r0, #7
   20b28:	e7fc      	b.n	20b24 <ble_gap_conn_find+0x24>
	...

00020b2c <ble_gap_master_in_progress>:
    return ble_gap_master.op != BLE_GAP_OP_NULL;
   20b2c:	4b02      	ldr	r3, [pc, #8]	; (20b38 <ble_gap_master_in_progress+0xc>)
   20b2e:	7818      	ldrb	r0, [r3, #0]
}
   20b30:	3000      	adds	r0, #0
   20b32:	bf18      	it	ne
   20b34:	2001      	movne	r0, #1
   20b36:	4770      	bx	lr
   20b38:	20000558 	.word	0x20000558

00020b3c <ble_gap_rx_adv_report>:
}
   20b3c:	4770      	bx	lr

00020b3e <ble_gap_rx_rd_rem_sup_feat_complete>:
{
   20b3e:	b538      	push	{r3, r4, r5, lr}
   20b40:	4604      	mov	r4, r0
    ble_hs_lock();
   20b42:	f002 ff9d 	bl	23a80 <ble_hs_lock>
    conn = ble_hs_conn_find(le16toh(ev->conn_handle));
   20b46:	8860      	ldrh	r0, [r4, #2]
   20b48:	f003 fdea 	bl	24720 <ble_hs_conn_find>
    if ((conn != NULL) && (ev->status == 0)) {
   20b4c:	b110      	cbz	r0, 20b54 <ble_gap_rx_rd_rem_sup_feat_complete+0x16>
   20b4e:	4605      	mov	r5, r0
   20b50:	7863      	ldrb	r3, [r4, #1]
   20b52:	b113      	cbz	r3, 20b5a <ble_gap_rx_rd_rem_sup_feat_complete+0x1c>
    ble_hs_unlock();
   20b54:	f002 ff98 	bl	23a88 <ble_hs_unlock>
}
   20b58:	bd38      	pop	{r3, r4, r5, pc}
        conn->supported_feat = get_le32(ev->features);
   20b5a:	1d20      	adds	r0, r4, #4
   20b5c:	f00e f90c 	bl	2ed78 <get_le32>
   20b60:	6268      	str	r0, [r5, #36]	; 0x24
   20b62:	e7f7      	b.n	20b54 <ble_gap_rx_rd_rem_sup_feat_complete+0x16>

00020b64 <ble_gap_rx_l2cap_update_req>:
{
   20b64:	b530      	push	{r4, r5, lr}
   20b66:	b08f      	sub	sp, #60	; 0x3c
   20b68:	4604      	mov	r4, r0
   20b6a:	460d      	mov	r5, r1
    memset(&event, 0, sizeof event);
   20b6c:	2234      	movs	r2, #52	; 0x34
   20b6e:	2100      	movs	r1, #0
   20b70:	a801      	add	r0, sp, #4
   20b72:	f7ed ff3d 	bl	e9f0 <memset>
    event.type = BLE_GAP_EVENT_L2CAP_UPDATE_REQ;
   20b76:	2305      	movs	r3, #5
   20b78:	f88d 3004 	strb.w	r3, [sp, #4]
    event.conn_update_req.conn_handle = conn_handle;
   20b7c:	f8ad 4010 	strh.w	r4, [sp, #16]
    event.conn_update_req.peer_params = params;
   20b80:	9502      	str	r5, [sp, #8]
    rc = ble_gap_call_conn_event_cb(&event, conn_handle);
   20b82:	4621      	mov	r1, r4
   20b84:	a801      	add	r0, sp, #4
   20b86:	f7ff fc51 	bl	2042c <ble_gap_call_conn_event_cb>
}
   20b8a:	b00f      	add	sp, #60	; 0x3c
   20b8c:	bd30      	pop	{r4, r5, pc}

00020b8e <ble_gap_rx_phy_update_complete>:
{
   20b8e:	b570      	push	{r4, r5, r6, lr}
   20b90:	b08e      	sub	sp, #56	; 0x38
   20b92:	4604      	mov	r4, r0
    uint16_t conn_handle = le16toh(ev->conn_handle);
   20b94:	8845      	ldrh	r5, [r0, #2]
   20b96:	b2ae      	uxth	r6, r5
    memset(&event, 0, sizeof event);
   20b98:	2234      	movs	r2, #52	; 0x34
   20b9a:	2100      	movs	r1, #0
   20b9c:	a801      	add	r0, sp, #4
   20b9e:	f7ed ff27 	bl	e9f0 <memset>
    event.type = BLE_GAP_EVENT_PHY_UPDATE_COMPLETE;
   20ba2:	2312      	movs	r3, #18
   20ba4:	f88d 3004 	strb.w	r3, [sp, #4]
    event.phy_updated.status = ev->status;
   20ba8:	7863      	ldrb	r3, [r4, #1]
   20baa:	9302      	str	r3, [sp, #8]
    event.phy_updated.conn_handle = conn_handle;
   20bac:	f8ad 500c 	strh.w	r5, [sp, #12]
    event.phy_updated.tx_phy = ev->tx_phy;
   20bb0:	7923      	ldrb	r3, [r4, #4]
   20bb2:	f88d 300e 	strb.w	r3, [sp, #14]
    event.phy_updated.rx_phy = ev->rx_phy;
   20bb6:	7963      	ldrb	r3, [r4, #5]
   20bb8:	f88d 300f 	strb.w	r3, [sp, #15]
    ble_gap_event_listener_call(&event);
   20bbc:	a801      	add	r0, sp, #4
   20bbe:	f7ff fc0b 	bl	203d8 <ble_gap_event_listener_call>
    ble_gap_call_conn_event_cb(&event, conn_handle);
   20bc2:	4631      	mov	r1, r6
   20bc4:	a801      	add	r0, sp, #4
   20bc6:	f7ff fc31 	bl	2042c <ble_gap_call_conn_event_cb>
}
   20bca:	b00e      	add	sp, #56	; 0x38
   20bcc:	bd70      	pop	{r4, r5, r6, pc}
	...

00020bd0 <ble_gap_adv_start>:
{
   20bd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20bd4:	b082      	sub	sp, #8
   20bd6:	4605      	mov	r5, r0
   20bd8:	4688      	mov	r8, r1
   20bda:	4617      	mov	r7, r2
   20bdc:	461e      	mov	r6, r3
    STATS_INC(ble_gap_stats, adv_start);
   20bde:	4a3e      	ldr	r2, [pc, #248]	; (20cd8 <ble_gap_adv_start+0x108>)
   20be0:	69d3      	ldr	r3, [r2, #28]
   20be2:	3301      	adds	r3, #1
   20be4:	61d3      	str	r3, [r2, #28]
    ble_hs_lock();
   20be6:	f002 ff4b 	bl	23a80 <ble_hs_lock>
    rc = ble_gap_adv_validate(own_addr_type, direct_addr, adv_params);
   20bea:	4632      	mov	r2, r6
   20bec:	4641      	mov	r1, r8
   20bee:	4628      	mov	r0, r5
   20bf0:	f7ff ff32 	bl	20a58 <ble_gap_adv_validate>
    if (rc != 0) {
   20bf4:	4604      	mov	r4, r0
   20bf6:	b9b0      	cbnz	r0, 20c26 <ble_gap_adv_start+0x56>
    if (duration_ms != BLE_HS_FOREVER) {
   20bf8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   20bfc:	429f      	cmp	r7, r3
   20bfe:	d005      	beq.n	20c0c <ble_gap_adv_start+0x3c>
}

static inline ble_npl_error_t
ble_npl_time_ms_to_ticks(uint32_t ms, ble_npl_time_t *out_ticks)
{
    return (ble_npl_error_t)os_time_ms_to_ticks(ms, out_ticks);
   20c00:	a901      	add	r1, sp, #4
   20c02:	4638      	mov	r0, r7
   20c04:	f7ed fc73 	bl	e4ee <os_time_ms_to_ticks>
        if (rc != 0) {
   20c08:	b2c0      	uxtb	r0, r0
   20c0a:	b9b8      	cbnz	r0, 20c3c <ble_gap_adv_start+0x6c>
    if (!ble_hs_is_enabled()) {
   20c0c:	f002 ff70 	bl	23af0 <ble_hs_is_enabled>
   20c10:	2800      	cmp	r0, #0
   20c12:	d05d      	beq.n	20cd0 <ble_gap_adv_start+0x100>
    if (ble_gap_is_preempted()) {
   20c14:	f7ff fb1a 	bl	2024c <ble_gap_is_preempted>
   20c18:	2800      	cmp	r0, #0
   20c1a:	d155      	bne.n	20cc8 <ble_gap_adv_start+0xf8>
    rc = ble_hs_id_use_addr(own_addr_type);
   20c1c:	4628      	mov	r0, r5
   20c1e:	f004 fc85 	bl	2552c <ble_hs_id_use_addr>
    if (rc != 0) {
   20c22:	4604      	mov	r4, r0
   20c24:	b170      	cbz	r0, 20c44 <ble_gap_adv_start+0x74>
    ble_hs_unlock();
   20c26:	f002 ff2f 	bl	23a88 <ble_hs_unlock>
    if (rc != 0) {
   20c2a:	b11c      	cbz	r4, 20c34 <ble_gap_adv_start+0x64>
        STATS_INC(ble_gap_stats, adv_start_fail);
   20c2c:	4a2a      	ldr	r2, [pc, #168]	; (20cd8 <ble_gap_adv_start+0x108>)
   20c2e:	6a13      	ldr	r3, [r2, #32]
   20c30:	3301      	adds	r3, #1
   20c32:	6213      	str	r3, [r2, #32]
}
   20c34:	4620      	mov	r0, r4
   20c36:	b002      	add	sp, #8
   20c38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ble_hs_unlock();
   20c3c:	f002 ff24 	bl	23a88 <ble_hs_unlock>
            rc = BLE_HS_EINVAL;
   20c40:	2403      	movs	r4, #3
   20c42:	e7f3      	b.n	20c2c <ble_gap_adv_start+0x5c>
    BLE_HS_LOG(INFO, "GAP procedure initiated: advertise; ");
   20c44:	4a25      	ldr	r2, [pc, #148]	; (20cdc <ble_gap_adv_start+0x10c>)
   20c46:	2101      	movs	r1, #1
   20c48:	2004      	movs	r0, #4
   20c4a:	f7f0 fd49 	bl	116e0 <modlog_printf>
    ble_gap_log_adv(own_addr_type, direct_addr, adv_params);
   20c4e:	4632      	mov	r2, r6
   20c50:	4641      	mov	r1, r8
   20c52:	4628      	mov	r0, r5
   20c54:	f7ff fe88 	bl	20968 <ble_gap_log_adv>
    BLE_HS_LOG(INFO, "\n");
   20c58:	4a21      	ldr	r2, [pc, #132]	; (20ce0 <ble_gap_adv_start+0x110>)
   20c5a:	2101      	movs	r1, #1
   20c5c:	2004      	movs	r0, #4
   20c5e:	f7f0 fd3f 	bl	116e0 <modlog_printf>
    ble_gap_slave[0].cb = cb;
   20c62:	4b20      	ldr	r3, [pc, #128]	; (20ce4 <ble_gap_adv_start+0x114>)
   20c64:	9a08      	ldr	r2, [sp, #32]
   20c66:	61da      	str	r2, [r3, #28]
    ble_gap_slave[0].cb_arg = cb_arg;
   20c68:	9a09      	ldr	r2, [sp, #36]	; 0x24
   20c6a:	621a      	str	r2, [r3, #32]
    ble_gap_slave[0].our_addr_type = own_addr_type;
   20c6c:	7d5a      	ldrb	r2, [r3, #21]
   20c6e:	f365 0201 	bfi	r2, r5, #0, #2
   20c72:	755a      	strb	r2, [r3, #21]
    if (adv_params->conn_mode != BLE_GAP_CONN_MODE_NON) {
   20c74:	7833      	ldrb	r3, [r6, #0]
   20c76:	b1eb      	cbz	r3, 20cb4 <ble_gap_adv_start+0xe4>
        ble_gap_slave[0].connectable = 1;
   20c78:	4a1a      	ldr	r2, [pc, #104]	; (20ce4 <ble_gap_adv_start+0x114>)
   20c7a:	7d53      	ldrb	r3, [r2, #21]
   20c7c:	f043 0308 	orr.w	r3, r3, #8
   20c80:	7553      	strb	r3, [r2, #21]
    rc = ble_gap_adv_params_tx(own_addr_type, direct_addr, adv_params);
   20c82:	4632      	mov	r2, r6
   20c84:	4641      	mov	r1, r8
   20c86:	4628      	mov	r0, r5
   20c88:	f7ff fc7b 	bl	20582 <ble_gap_adv_params_tx>
    if (rc != 0) {
   20c8c:	4604      	mov	r4, r0
   20c8e:	2800      	cmp	r0, #0
   20c90:	d1c9      	bne.n	20c26 <ble_gap_adv_start+0x56>
    ble_gap_slave[0].op = BLE_GAP_OP_S_ADV;
   20c92:	2001      	movs	r0, #1
   20c94:	4b13      	ldr	r3, [pc, #76]	; (20ce4 <ble_gap_adv_start+0x114>)
   20c96:	7518      	strb	r0, [r3, #20]
    rc = ble_gap_adv_enable_tx(1);
   20c98:	f7ff fc61 	bl	2055e <ble_gap_adv_enable_tx>
    if (rc != 0) {
   20c9c:	4604      	mov	r4, r0
   20c9e:	b978      	cbnz	r0, 20cc0 <ble_gap_adv_start+0xf0>
    if (duration_ms != BLE_HS_FOREVER) {
   20ca0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   20ca4:	429f      	cmp	r7, r3
   20ca6:	d002      	beq.n	20cae <ble_gap_adv_start+0xde>
        ble_gap_slave_set_timer(duration_ticks);
   20ca8:	9801      	ldr	r0, [sp, #4]
   20caa:	f7ff fe4d 	bl	20948 <ble_gap_slave_set_timer>
    ble_hs_unlock();
   20cae:	f002 feeb 	bl	23a88 <ble_hs_unlock>
   20cb2:	e7bf      	b.n	20c34 <ble_gap_adv_start+0x64>
        ble_gap_slave[0].connectable = 0;
   20cb4:	4b0b      	ldr	r3, [pc, #44]	; (20ce4 <ble_gap_adv_start+0x114>)
   20cb6:	7d5a      	ldrb	r2, [r3, #21]
   20cb8:	f36f 02c3 	bfc	r2, #3, #1
   20cbc:	755a      	strb	r2, [r3, #21]
   20cbe:	e7e0      	b.n	20c82 <ble_gap_adv_start+0xb2>
        ble_gap_slave_reset_state(0);
   20cc0:	2000      	movs	r0, #0
   20cc2:	f7ff fd89 	bl	207d8 <ble_gap_slave_reset_state>
        goto done;
   20cc6:	e7ae      	b.n	20c26 <ble_gap_adv_start+0x56>
    ble_hs_unlock();
   20cc8:	f002 fede 	bl	23a88 <ble_hs_unlock>
        rc = BLE_HS_EPREEMPTED;
   20ccc:	241d      	movs	r4, #29
   20cce:	e7ad      	b.n	20c2c <ble_gap_adv_start+0x5c>
    ble_hs_unlock();
   20cd0:	f002 feda 	bl	23a88 <ble_hs_unlock>
        rc = BLE_HS_EDISABLED;
   20cd4:	241e      	movs	r4, #30
   20cd6:	e7a9      	b.n	20c2c <ble_gap_adv_start+0x5c>
   20cd8:	20003f64 	.word	0x20003f64
   20cdc:	00031f90 	.word	0x00031f90
   20ce0:	000324e4 	.word	0x000324e4
   20ce4:	20000558 	.word	0x20000558

00020ce8 <ble_gap_adv_set_data>:
    STATS_INC(ble_gap_stats, adv_set_data);
   20ce8:	4a11      	ldr	r2, [pc, #68]	; (20d30 <ble_gap_adv_set_data+0x48>)
   20cea:	6a53      	ldr	r3, [r2, #36]	; 0x24
   20cec:	3301      	adds	r3, #1
   20cee:	6253      	str	r3, [r2, #36]	; 0x24
    if (((data == NULL) && (data_len != 0)) ||
   20cf0:	4603      	mov	r3, r0
   20cf2:	b1b0      	cbz	r0, 20d22 <ble_gap_adv_set_data+0x3a>
   20cf4:	291f      	cmp	r1, #31
   20cf6:	dc18      	bgt.n	20d2a <ble_gap_adv_set_data+0x42>
{
   20cf8:	b510      	push	{r4, lr}
   20cfa:	b08a      	sub	sp, #40	; 0x28
   20cfc:	460c      	mov	r4, r1
    memcpy(cmd.adv_data, data, data_len);
   20cfe:	460a      	mov	r2, r1
   20d00:	4619      	mov	r1, r3
   20d02:	f10d 0009 	add.w	r0, sp, #9
   20d06:	f7ed fe4b 	bl	e9a0 <memcpy>
    cmd.adv_data_len = data_len;
   20d0a:	f88d 4008 	strb.w	r4, [sp, #8]
    return ble_hs_hci_cmd_tx(opcode, &cmd, sizeof(cmd), NULL, 0);
   20d0e:	2300      	movs	r3, #0
   20d10:	9300      	str	r3, [sp, #0]
   20d12:	2220      	movs	r2, #32
   20d14:	a902      	add	r1, sp, #8
   20d16:	f242 0008 	movw	r0, #8200	; 0x2008
   20d1a:	f003 ff4b 	bl	24bb4 <ble_hs_hci_cmd_tx>
}
   20d1e:	b00a      	add	sp, #40	; 0x28
   20d20:	bd10      	pop	{r4, pc}
    if (((data == NULL) && (data_len != 0)) ||
   20d22:	2900      	cmp	r1, #0
   20d24:	d0e6      	beq.n	20cf4 <ble_gap_adv_set_data+0xc>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   20d26:	2012      	movs	r0, #18
   20d28:	4770      	bx	lr
   20d2a:	2012      	movs	r0, #18
}
   20d2c:	4770      	bx	lr
   20d2e:	bf00      	nop
   20d30:	20003f64 	.word	0x20003f64

00020d34 <ble_gap_adv_set_fields>:
{
   20d34:	b500      	push	{lr}
   20d36:	b08b      	sub	sp, #44	; 0x2c
    rc = ble_hs_adv_set_fields(adv_fields, buf, &buf_sz, sizeof buf);
   20d38:	231f      	movs	r3, #31
   20d3a:	f10d 0207 	add.w	r2, sp, #7
   20d3e:	a902      	add	r1, sp, #8
   20d40:	f003 fbdf 	bl	24502 <ble_hs_adv_set_fields>
    if (rc != 0) {
   20d44:	4603      	mov	r3, r0
   20d46:	b118      	cbz	r0, 20d50 <ble_gap_adv_set_fields+0x1c>
}
   20d48:	4618      	mov	r0, r3
   20d4a:	b00b      	add	sp, #44	; 0x2c
   20d4c:	f85d fb04 	ldr.w	pc, [sp], #4
    rc = ble_gap_adv_set_data(buf, buf_sz);
   20d50:	f89d 1007 	ldrb.w	r1, [sp, #7]
   20d54:	a802      	add	r0, sp, #8
   20d56:	f7ff ffc7 	bl	20ce8 <ble_gap_adv_set_data>
   20d5a:	4603      	mov	r3, r0
   20d5c:	e7f4      	b.n	20d48 <ble_gap_adv_set_fields+0x14>

00020d5e <ble_gap_adv_active>:
{
   20d5e:	b508      	push	{r3, lr}
    return ble_gap_adv_active_instance(0);
   20d60:	2000      	movs	r0, #0
   20d62:	f7ff fa9b 	bl	2029c <ble_gap_adv_active_instance>
}
   20d66:	bd08      	pop	{r3, pc}

00020d68 <ble_gap_rx_conn_complete>:
{
   20d68:	b5f0      	push	{r4, r5, r6, r7, lr}
   20d6a:	b091      	sub	sp, #68	; 0x44
    STATS_INC(ble_gap_stats, rx_conn_complete);
   20d6c:	4a6e      	ldr	r2, [pc, #440]	; (20f28 <ble_gap_rx_conn_complete+0x1c0>)
   20d6e:	6f53      	ldr	r3, [r2, #116]	; 0x74
   20d70:	3301      	adds	r3, #1
   20d72:	6753      	str	r3, [r2, #116]	; 0x74
    if (evt->status != BLE_ERR_SUCCESS) {
   20d74:	7803      	ldrb	r3, [r0, #0]
   20d76:	b39b      	cbz	r3, 20de0 <ble_gap_rx_conn_complete+0x78>
        switch (evt->status) {
   20d78:	2b02      	cmp	r3, #2
   20d7a:	d010      	beq.n	20d9e <ble_gap_rx_conn_complete+0x36>
   20d7c:	2b3c      	cmp	r3, #60	; 0x3c
   20d7e:	d120      	bne.n	20dc2 <ble_gap_rx_conn_complete+0x5a>
            if (ble_gap_adv_active()) {
   20d80:	f7ff ffed 	bl	20d5e <ble_gap_adv_active>
   20d84:	4605      	mov	r5, r0
   20d86:	b910      	cbnz	r0, 20d8e <ble_gap_rx_conn_complete+0x26>
}
   20d88:	4628      	mov	r0, r5
   20d8a:	b011      	add	sp, #68	; 0x44
   20d8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
                ble_gap_adv_finished(0, 0, 0, 0);
   20d8e:	2300      	movs	r3, #0
   20d90:	461a      	mov	r2, r3
   20d92:	4619      	mov	r1, r3
   20d94:	4618      	mov	r0, r3
   20d96:	f7ff fd45 	bl	20824 <ble_gap_adv_finished>
        return 0;
   20d9a:	2500      	movs	r5, #0
   20d9c:	e7f4      	b.n	20d88 <ble_gap_rx_conn_complete+0x20>
            if (ble_gap_master_in_progress()) {
   20d9e:	f7ff fec5 	bl	20b2c <ble_gap_master_in_progress>
   20da2:	4605      	mov	r5, r0
   20da4:	2800      	cmp	r0, #0
   20da6:	d0ef      	beq.n	20d88 <ble_gap_rx_conn_complete+0x20>
                if (ble_gap_master.preempted_op == BLE_GAP_OP_M_CONN) {
   20da8:	4b60      	ldr	r3, [pc, #384]	; (20f2c <ble_gap_rx_conn_complete+0x1c4>)
   20daa:	7c1b      	ldrb	r3, [r3, #16]
   20dac:	2b02      	cmp	r3, #2
   20dae:	d003      	beq.n	20db8 <ble_gap_rx_conn_complete+0x50>
                    ble_gap_master_connect_cancelled();
   20db0:	f7ff fcf2 	bl	20798 <ble_gap_master_connect_cancelled>
        return 0;
   20db4:	2500      	movs	r5, #0
   20db6:	e7e7      	b.n	20d88 <ble_gap_rx_conn_complete+0x20>
                    ble_gap_master_failed(BLE_HS_EPREEMPTED);
   20db8:	201d      	movs	r0, #29
   20dba:	f7ff fcdb 	bl	20774 <ble_gap_master_failed>
        return 0;
   20dbe:	2500      	movs	r5, #0
   20dc0:	e7e2      	b.n	20d88 <ble_gap_rx_conn_complete+0x20>
            BLE_HS_LOG(INFO, "controller reported invalid error code in conn"
   20dc2:	4a5b      	ldr	r2, [pc, #364]	; (20f30 <ble_gap_rx_conn_complete+0x1c8>)
   20dc4:	2101      	movs	r1, #1
   20dc6:	2004      	movs	r0, #4
   20dc8:	f7f0 fc8a 	bl	116e0 <modlog_printf>
            assert(0);
   20dcc:	f7eb fa0c 	bl	c1e8 <hal_debugger_connected>
   20dd0:	b100      	cbz	r0, 20dd4 <ble_gap_rx_conn_complete+0x6c>
   20dd2:	be01      	bkpt	0x0001
   20dd4:	2300      	movs	r3, #0
   20dd6:	461a      	mov	r2, r3
   20dd8:	4619      	mov	r1, r3
   20dda:	4618      	mov	r0, r3
   20ddc:	f7eb feb8 	bl	cb50 <__assert_func>
   20de0:	4604      	mov	r4, r0
   20de2:	460e      	mov	r6, r1
    if (ble_hs_atomic_conn_flags(evt->connection_handle, NULL) == 0) {
   20de4:	2100      	movs	r1, #0
   20de6:	8840      	ldrh	r0, [r0, #2]
   20de8:	f003 fba8 	bl	2453c <ble_hs_atomic_conn_flags>
   20dec:	4605      	mov	r5, r0
   20dee:	2800      	cmp	r0, #0
   20df0:	d0ca      	beq.n	20d88 <ble_gap_rx_conn_complete+0x20>
    switch (evt->role) {
   20df2:	7923      	ldrb	r3, [r4, #4]
   20df4:	2b00      	cmp	r3, #0
   20df6:	d062      	beq.n	20ebe <ble_gap_rx_conn_complete+0x156>
   20df8:	2b01      	cmp	r3, #1
   20dfa:	d066      	beq.n	20eca <ble_gap_rx_conn_complete+0x162>
    conn = ble_hs_conn_alloc(evt->connection_handle);
   20dfc:	8860      	ldrh	r0, [r4, #2]
   20dfe:	f003 fc3f 	bl	24680 <ble_hs_conn_alloc>
   20e02:	4605      	mov	r5, r0
    conn->bhc_itvl = evt->conn_itvl;
   20e04:	89a3      	ldrh	r3, [r4, #12]
   20e06:	8383      	strh	r3, [r0, #28]
    conn->bhc_latency = evt->conn_latency;
   20e08:	89e3      	ldrh	r3, [r4, #14]
   20e0a:	83c3      	strh	r3, [r0, #30]
    conn->bhc_supervision_timeout = evt->supervision_timeout;
   20e0c:	8a23      	ldrh	r3, [r4, #16]
   20e0e:	8403      	strh	r3, [r0, #32]
    conn->bhc_master_clock_accuracy = evt->master_clk_acc;
   20e10:	7ca3      	ldrb	r3, [r4, #18]
   20e12:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
    if (evt->role == BLE_HCI_LE_CONN_COMPLETE_ROLE_MASTER) {
   20e16:	7923      	ldrb	r3, [r4, #4]
   20e18:	2b00      	cmp	r3, #0
   20e1a:	d15d      	bne.n	20ed8 <ble_gap_rx_conn_complete+0x170>
        conn->bhc_cb = ble_gap_master.cb;
   20e1c:	4b43      	ldr	r3, [pc, #268]	; (20f2c <ble_gap_rx_conn_complete+0x1c4>)
   20e1e:	689a      	ldr	r2, [r3, #8]
   20e20:	65c2      	str	r2, [r0, #92]	; 0x5c
        conn->bhc_cb_arg = ble_gap_master.cb_arg;
   20e22:	68da      	ldr	r2, [r3, #12]
   20e24:	6602      	str	r2, [r0, #96]	; 0x60
        conn->bhc_flags |= BLE_HS_CONN_F_MASTER;
   20e26:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
   20e2a:	f042 0201 	orr.w	r2, r2, #1
   20e2e:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
        conn->bhc_our_addr_type = ble_gap_master.conn.our_addr_type;
   20e32:	7c5b      	ldrb	r3, [r3, #17]
   20e34:	f3c3 0341 	ubfx	r3, r3, #1, #2
   20e38:	7183      	strb	r3, [r0, #6]
        ble_gap_master_reset_state();
   20e3a:	f7ff fc57 	bl	206ec <ble_gap_master_reset_state>
    conn->bhc_peer_addr.type = evt->peer_addr_type;
   20e3e:	7966      	ldrb	r6, [r4, #5]
   20e40:	71ee      	strb	r6, [r5, #7]
    memcpy(conn->bhc_peer_addr.val, evt->peer_addr, 6);
   20e42:	4623      	mov	r3, r4
   20e44:	f853 2f06 	ldr.w	r2, [r3, #6]!
   20e48:	60aa      	str	r2, [r5, #8]
   20e4a:	889b      	ldrh	r3, [r3, #4]
   20e4c:	81ab      	strh	r3, [r5, #12]
    conn->bhc_our_rpa_addr.type = BLE_ADDR_RANDOM;
   20e4e:	2301      	movs	r3, #1
   20e50:	73ab      	strb	r3, [r5, #14]
    memcpy(conn->bhc_our_rpa_addr.val, evt->local_rpa, 6);
   20e52:	4623      	mov	r3, r4
   20e54:	f853 2f13 	ldr.w	r2, [r3, #19]!
   20e58:	f8c5 200f 	str.w	r2, [r5, #15]
   20e5c:	889b      	ldrh	r3, [r3, #4]
   20e5e:	f8a5 3013 	strh.w	r3, [r5, #19]
    if (memcmp(BLE_ADDR_ANY->val, evt->peer_rpa, 6) == 0) {
   20e62:	2300      	movs	r3, #0
   20e64:	930e      	str	r3, [sp, #56]	; 0x38
   20e66:	f8cd 303b 	str.w	r3, [sp, #59]	; 0x3b
   20e6a:	f104 0719 	add.w	r7, r4, #25
   20e6e:	2206      	movs	r2, #6
   20e70:	4639      	mov	r1, r7
   20e72:	f10d 0039 	add.w	r0, sp, #57	; 0x39
   20e76:	f7ed fd6f 	bl	e958 <memcmp>
   20e7a:	2800      	cmp	r0, #0
   20e7c:	d14b      	bne.n	20f16 <ble_gap_rx_conn_complete+0x1ae>
        if (BLE_ADDR_IS_RPA(&conn->bhc_peer_addr)) {
   20e7e:	2e01      	cmp	r6, #1
   20e80:	d039      	beq.n	20ef6 <ble_gap_rx_conn_complete+0x18e>
    ble_hs_lock();
   20e82:	f002 fdfd 	bl	23a80 <ble_hs_lock>
    memset(&event, 0, sizeof event);
   20e86:	2234      	movs	r2, #52	; 0x34
   20e88:	2100      	movs	r1, #0
   20e8a:	a801      	add	r0, sp, #4
   20e8c:	f7ed fdb0 	bl	e9f0 <memset>
    ble_hs_conn_insert(conn);
   20e90:	4628      	mov	r0, r5
   20e92:	f003 fc51 	bl	24738 <ble_hs_conn_insert>
    ble_hs_unlock();
   20e96:	f002 fdf7 	bl	23a88 <ble_hs_unlock>
    event.type = BLE_GAP_EVENT_CONNECT;
   20e9a:	2500      	movs	r5, #0
   20e9c:	f88d 5004 	strb.w	r5, [sp, #4]
    event.connect.conn_handle = evt->connection_handle;
   20ea0:	8863      	ldrh	r3, [r4, #2]
   20ea2:	f8ad 300c 	strh.w	r3, [sp, #12]
    event.connect.status = 0;
   20ea6:	9502      	str	r5, [sp, #8]
    ble_gap_event_listener_call(&event);
   20ea8:	a801      	add	r0, sp, #4
   20eaa:	f7ff fa95 	bl	203d8 <ble_gap_event_listener_call>
    ble_gap_call_conn_event_cb(&event, evt->connection_handle);
   20eae:	8861      	ldrh	r1, [r4, #2]
   20eb0:	a801      	add	r0, sp, #4
   20eb2:	f7ff fabb 	bl	2042c <ble_gap_call_conn_event_cb>
    ble_gap_rd_rem_sup_feat_tx(evt->connection_handle);
   20eb6:	8860      	ldrh	r0, [r4, #2]
   20eb8:	f7ff fb35 	bl	20526 <ble_gap_rd_rem_sup_feat_tx>
    return 0;
   20ebc:	e764      	b.n	20d88 <ble_gap_rx_conn_complete+0x20>
        rc = ble_gap_accept_master_conn();
   20ebe:	f7ff f9f9 	bl	202b4 <ble_gap_accept_master_conn>
        if (rc != 0) {
   20ec2:	4605      	mov	r5, r0
   20ec4:	2800      	cmp	r0, #0
   20ec6:	d099      	beq.n	20dfc <ble_gap_rx_conn_complete+0x94>
   20ec8:	e75e      	b.n	20d88 <ble_gap_rx_conn_complete+0x20>
        rc = ble_gap_accept_slave_conn(instance);
   20eca:	4630      	mov	r0, r6
   20ecc:	f7ff fa02 	bl	202d4 <ble_gap_accept_slave_conn>
        if (rc != 0) {
   20ed0:	4605      	mov	r5, r0
   20ed2:	2800      	cmp	r0, #0
   20ed4:	d092      	beq.n	20dfc <ble_gap_rx_conn_complete+0x94>
   20ed6:	e757      	b.n	20d88 <ble_gap_rx_conn_complete+0x20>
        conn->bhc_cb = ble_gap_slave[instance].cb;
   20ed8:	4b14      	ldr	r3, [pc, #80]	; (20f2c <ble_gap_rx_conn_complete+0x1c4>)
   20eda:	eb03 1306 	add.w	r3, r3, r6, lsl #4
   20ede:	69da      	ldr	r2, [r3, #28]
   20ee0:	65c2      	str	r2, [r0, #92]	; 0x5c
        conn->bhc_cb_arg = ble_gap_slave[instance].cb_arg;
   20ee2:	6a1a      	ldr	r2, [r3, #32]
   20ee4:	6602      	str	r2, [r0, #96]	; 0x60
        conn->bhc_our_addr_type = ble_gap_slave[instance].our_addr_type;
   20ee6:	7d5b      	ldrb	r3, [r3, #21]
   20ee8:	f3c3 0301 	ubfx	r3, r3, #0, #2
   20eec:	7183      	strb	r3, [r0, #6]
        ble_gap_slave_reset_state(instance);
   20eee:	4630      	mov	r0, r6
   20ef0:	f7ff fc72 	bl	207d8 <ble_gap_slave_reset_state>
   20ef4:	e7a3      	b.n	20e3e <ble_gap_rx_conn_complete+0xd6>
        if (BLE_ADDR_IS_RPA(&conn->bhc_peer_addr)) {
   20ef6:	7b6b      	ldrb	r3, [r5, #13]
   20ef8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   20efc:	2b40      	cmp	r3, #64	; 0x40
   20efe:	d1c0      	bne.n	20e82 <ble_gap_rx_conn_complete+0x11a>
            conn->bhc_peer_rpa_addr = conn->bhc_peer_addr;
   20f00:	462a      	mov	r2, r5
   20f02:	f852 1f07 	ldr.w	r1, [r2, #7]!
   20f06:	f8c5 1015 	str.w	r1, [r5, #21]
   20f0a:	8891      	ldrh	r1, [r2, #4]
   20f0c:	7992      	ldrb	r2, [r2, #6]
   20f0e:	f8a5 1019 	strh.w	r1, [r5, #25]
   20f12:	76ea      	strb	r2, [r5, #27]
   20f14:	e7b5      	b.n	20e82 <ble_gap_rx_conn_complete+0x11a>
        conn->bhc_peer_rpa_addr.type = BLE_ADDR_RANDOM;
   20f16:	2301      	movs	r3, #1
   20f18:	756b      	strb	r3, [r5, #21]
        memcpy(conn->bhc_peer_rpa_addr.val, evt->peer_rpa, 6);
   20f1a:	683b      	ldr	r3, [r7, #0]
   20f1c:	f8c5 3016 	str.w	r3, [r5, #22]
   20f20:	88bb      	ldrh	r3, [r7, #4]
   20f22:	836b      	strh	r3, [r5, #26]
   20f24:	e7ad      	b.n	20e82 <ble_gap_rx_conn_complete+0x11a>
   20f26:	bf00      	nop
   20f28:	20003f64 	.word	0x20003f64
   20f2c:	20000558 	.word	0x20000558
   20f30:	0003216c 	.word	0x0003216c

00020f34 <ble_gap_adv_stop_no_lock>:
{
   20f34:	b538      	push	{r3, r4, r5, lr}
    STATS_INC(ble_gap_stats, adv_stop);
   20f36:	4a0e      	ldr	r2, [pc, #56]	; (20f70 <ble_gap_adv_stop_no_lock+0x3c>)
   20f38:	6953      	ldr	r3, [r2, #20]
   20f3a:	3301      	adds	r3, #1
   20f3c:	6153      	str	r3, [r2, #20]
    active = ble_gap_adv_active();
   20f3e:	f7ff ff0e 	bl	20d5e <ble_gap_adv_active>
   20f42:	4605      	mov	r5, r0
    BLE_HS_LOG(INFO, "GAP procedure initiated: stop advertising.\n");
   20f44:	4a0b      	ldr	r2, [pc, #44]	; (20f74 <ble_gap_adv_stop_no_lock+0x40>)
   20f46:	2101      	movs	r1, #1
   20f48:	2004      	movs	r0, #4
   20f4a:	f7f0 fbc9 	bl	116e0 <modlog_printf>
    rc = ble_gap_adv_enable_tx(0);
   20f4e:	2000      	movs	r0, #0
   20f50:	f7ff fb05 	bl	2055e <ble_gap_adv_enable_tx>
    if (rc != 0) {
   20f54:	4604      	mov	r4, r0
   20f56:	b128      	cbz	r0, 20f64 <ble_gap_adv_stop_no_lock+0x30>
        STATS_INC(ble_gap_stats, adv_stop_fail);
   20f58:	4a05      	ldr	r2, [pc, #20]	; (20f70 <ble_gap_adv_stop_no_lock+0x3c>)
   20f5a:	6993      	ldr	r3, [r2, #24]
   20f5c:	3301      	adds	r3, #1
   20f5e:	6193      	str	r3, [r2, #24]
}
   20f60:	4620      	mov	r0, r4
   20f62:	bd38      	pop	{r3, r4, r5, pc}
    ble_gap_slave_reset_state(0);
   20f64:	f7ff fc38 	bl	207d8 <ble_gap_slave_reset_state>
    if (!active) {
   20f68:	2d00      	cmp	r5, #0
   20f6a:	d1f9      	bne.n	20f60 <ble_gap_adv_stop_no_lock+0x2c>
        rc = BLE_HS_EALREADY;
   20f6c:	2402      	movs	r4, #2
   20f6e:	e7f3      	b.n	20f58 <ble_gap_adv_stop_no_lock+0x24>
   20f70:	20003f64 	.word	0x20003f64
   20f74:	00031fb8 	.word	0x00031fb8

00020f78 <ble_gap_disc_active>:
    return ble_gap_master.op == BLE_GAP_OP_M_DISC;
   20f78:	4b03      	ldr	r3, [pc, #12]	; (20f88 <ble_gap_disc_active+0x10>)
   20f7a:	7818      	ldrb	r0, [r3, #0]
}
   20f7c:	2801      	cmp	r0, #1
   20f7e:	bf14      	ite	ne
   20f80:	2000      	movne	r0, #0
   20f82:	2001      	moveq	r0, #1
   20f84:	4770      	bx	lr
   20f86:	bf00      	nop
   20f88:	20000558 	.word	0x20000558

00020f8c <ble_gap_conn_active>:
    return ble_gap_master.op == BLE_GAP_OP_M_CONN;
   20f8c:	4b03      	ldr	r3, [pc, #12]	; (20f9c <ble_gap_conn_active+0x10>)
   20f8e:	7818      	ldrb	r0, [r3, #0]
}
   20f90:	2802      	cmp	r0, #2
   20f92:	bf14      	ite	ne
   20f94:	2000      	movne	r0, #0
   20f96:	2001      	moveq	r0, #1
   20f98:	4770      	bx	lr
   20f9a:	bf00      	nop
   20f9c:	20000558 	.word	0x20000558

00020fa0 <ble_gap_conn_cancel_no_lock>:
{
   20fa0:	b508      	push	{r3, lr}
    STATS_INC(ble_gap_stats, cancel);
   20fa2:	4a0f      	ldr	r2, [pc, #60]	; (20fe0 <ble_gap_conn_cancel_no_lock+0x40>)
   20fa4:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   20fa6:	3301      	adds	r3, #1
   20fa8:	64d3      	str	r3, [r2, #76]	; 0x4c
    if (!ble_gap_conn_active()) {
   20faa:	f7ff ffef 	bl	20f8c <ble_gap_conn_active>
   20fae:	b930      	cbnz	r0, 20fbe <ble_gap_conn_cancel_no_lock+0x1e>
        rc = BLE_HS_EALREADY;
   20fb0:	2102      	movs	r1, #2
        STATS_INC(ble_gap_stats, cancel_fail);
   20fb2:	4a0b      	ldr	r2, [pc, #44]	; (20fe0 <ble_gap_conn_cancel_no_lock+0x40>)
   20fb4:	6d13      	ldr	r3, [r2, #80]	; 0x50
   20fb6:	3301      	adds	r3, #1
   20fb8:	6513      	str	r3, [r2, #80]	; 0x50
}
   20fba:	4608      	mov	r0, r1
   20fbc:	bd08      	pop	{r3, pc}
    BLE_HS_LOG(INFO, "GAP procedure initiated: cancel connection\n");
   20fbe:	4a09      	ldr	r2, [pc, #36]	; (20fe4 <ble_gap_conn_cancel_no_lock+0x44>)
   20fc0:	2101      	movs	r1, #1
   20fc2:	2004      	movs	r0, #4
   20fc4:	f7f0 fb8c 	bl	116e0 <modlog_printf>
    rc = ble_gap_conn_cancel_tx();
   20fc8:	f7ff fabc 	bl	20544 <ble_gap_conn_cancel_tx>
    if (rc != 0) {
   20fcc:	4601      	mov	r1, r0
   20fce:	2800      	cmp	r0, #0
   20fd0:	d1ef      	bne.n	20fb2 <ble_gap_conn_cancel_no_lock+0x12>
    ble_gap_master.conn.cancel = 1;
   20fd2:	4a05      	ldr	r2, [pc, #20]	; (20fe8 <ble_gap_conn_cancel_no_lock+0x48>)
   20fd4:	7c53      	ldrb	r3, [r2, #17]
   20fd6:	f043 0308 	orr.w	r3, r3, #8
   20fda:	7453      	strb	r3, [r2, #17]
   20fdc:	e7ed      	b.n	20fba <ble_gap_conn_cancel_no_lock+0x1a>
   20fde:	bf00      	nop
   20fe0:	20003f64 	.word	0x20003f64
   20fe4:	00031fe4 	.word	0x00031fe4
   20fe8:	20000558 	.word	0x20000558

00020fec <ble_gap_terminate_with_conn>:
    if (conn->bhc_flags & BLE_HS_CONN_F_TERMINATING) {
   20fec:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   20ff0:	f013 0f02 	tst.w	r3, #2
   20ff4:	d122      	bne.n	2103c <ble_gap_terminate_with_conn+0x50>
{
   20ff6:	b530      	push	{r4, r5, lr}
   20ff8:	b085      	sub	sp, #20
   20ffa:	460d      	mov	r5, r1
   20ffc:	4604      	mov	r4, r0
    BLE_HS_LOG(INFO, "GAP procedure initiated: terminate connection; "
   20ffe:	8883      	ldrh	r3, [r0, #4]
   21000:	9100      	str	r1, [sp, #0]
   21002:	4a10      	ldr	r2, [pc, #64]	; (21044 <ble_gap_terminate_with_conn+0x58>)
   21004:	2101      	movs	r1, #1
   21006:	2004      	movs	r0, #4
   21008:	f7f0 fb6a 	bl	116e0 <modlog_printf>
    cmd.conn_handle = htole16(conn->bhc_handle);
   2100c:	88a3      	ldrh	r3, [r4, #4]
   2100e:	f8ad 300c 	strh.w	r3, [sp, #12]
    cmd.reason = hci_reason;
   21012:	f88d 500e 	strb.w	r5, [sp, #14]
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LINK_CTRL,
   21016:	2300      	movs	r3, #0
   21018:	9300      	str	r3, [sp, #0]
   2101a:	2203      	movs	r2, #3
   2101c:	a903      	add	r1, sp, #12
   2101e:	f240 4006 	movw	r0, #1030	; 0x406
   21022:	f003 fdc7 	bl	24bb4 <ble_hs_hci_cmd_tx>
    if (rc != 0) {
   21026:	4603      	mov	r3, r0
   21028:	b928      	cbnz	r0, 21036 <ble_gap_terminate_with_conn+0x4a>
    conn->bhc_flags |= BLE_HS_CONN_F_TERMINATING;
   2102a:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
   2102e:	f042 0202 	orr.w	r2, r2, #2
   21032:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
}
   21036:	4618      	mov	r0, r3
   21038:	b005      	add	sp, #20
   2103a:	bd30      	pop	{r4, r5, pc}
        return BLE_HS_EALREADY;
   2103c:	2302      	movs	r3, #2
}
   2103e:	4618      	mov	r0, r3
   21040:	4770      	bx	lr
   21042:	bf00      	nop
   21044:	000321b0 	.word	0x000321b0

00021048 <ble_gap_terminate>:
{
   21048:	b538      	push	{r3, r4, r5, lr}
   2104a:	4604      	mov	r4, r0
   2104c:	460d      	mov	r5, r1
    STATS_INC(ble_gap_stats, terminate);
   2104e:	4a0d      	ldr	r2, [pc, #52]	; (21084 <ble_gap_terminate+0x3c>)
   21050:	6c53      	ldr	r3, [r2, #68]	; 0x44
   21052:	3301      	adds	r3, #1
   21054:	6453      	str	r3, [r2, #68]	; 0x44
    ble_hs_lock();
   21056:	f002 fd13 	bl	23a80 <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
   2105a:	4620      	mov	r0, r4
   2105c:	f003 fb60 	bl	24720 <ble_hs_conn_find>
    if (conn == NULL) {
   21060:	b160      	cbz	r0, 2107c <ble_gap_terminate+0x34>
    rc = ble_gap_terminate_with_conn(conn, hci_reason);
   21062:	4629      	mov	r1, r5
   21064:	f7ff ffc2 	bl	20fec <ble_gap_terminate_with_conn>
   21068:	4604      	mov	r4, r0
    ble_hs_unlock();
   2106a:	f002 fd0d 	bl	23a88 <ble_hs_unlock>
    if (rc != 0) {
   2106e:	b11c      	cbz	r4, 21078 <ble_gap_terminate+0x30>
        STATS_INC(ble_gap_stats, terminate_fail);
   21070:	4a04      	ldr	r2, [pc, #16]	; (21084 <ble_gap_terminate+0x3c>)
   21072:	6c93      	ldr	r3, [r2, #72]	; 0x48
   21074:	3301      	adds	r3, #1
   21076:	6493      	str	r3, [r2, #72]	; 0x48
}
   21078:	4620      	mov	r0, r4
   2107a:	bd38      	pop	{r3, r4, r5, pc}
    ble_hs_unlock();
   2107c:	f002 fd04 	bl	23a88 <ble_hs_unlock>
        rc = BLE_HS_ENOTCONN;
   21080:	2407      	movs	r4, #7
   21082:	e7f5      	b.n	21070 <ble_gap_terminate+0x28>
   21084:	20003f64 	.word	0x20003f64

00021088 <ble_gap_update_notify>:
{
   21088:	b530      	push	{r4, r5, lr}
   2108a:	b08f      	sub	sp, #60	; 0x3c
   2108c:	4604      	mov	r4, r0
   2108e:	460d      	mov	r5, r1
    memset(&event, 0, sizeof event);
   21090:	2234      	movs	r2, #52	; 0x34
   21092:	2100      	movs	r1, #0
   21094:	a801      	add	r0, sp, #4
   21096:	f7ed fcab 	bl	e9f0 <memset>
    event.type = BLE_GAP_EVENT_CONN_UPDATE;
   2109a:	2303      	movs	r3, #3
   2109c:	f88d 3004 	strb.w	r3, [sp, #4]
    event.conn_update.conn_handle = conn_handle;
   210a0:	f8ad 400c 	strh.w	r4, [sp, #12]
    event.conn_update.status = status;
   210a4:	9502      	str	r5, [sp, #8]
    ble_gap_event_listener_call(&event);
   210a6:	a801      	add	r0, sp, #4
   210a8:	f7ff f996 	bl	203d8 <ble_gap_event_listener_call>
    ble_gap_call_conn_event_cb(&event, conn_handle);
   210ac:	4621      	mov	r1, r4
   210ae:	a801      	add	r0, sp, #4
   210b0:	f7ff f9bc 	bl	2042c <ble_gap_call_conn_event_cb>
    if (status == BLE_HS_ETIMEOUT) {
   210b4:	2d0d      	cmp	r5, #13
   210b6:	d001      	beq.n	210bc <ble_gap_update_notify+0x34>
}
   210b8:	b00f      	add	sp, #60	; 0x3c
   210ba:	bd30      	pop	{r4, r5, pc}
        ble_gap_terminate(conn_handle, BLE_ERR_REM_USER_CONN_TERM);
   210bc:	2113      	movs	r1, #19
   210be:	4620      	mov	r0, r4
   210c0:	f7ff ffc2 	bl	21048 <ble_gap_terminate>
}
   210c4:	e7f8      	b.n	210b8 <ble_gap_update_notify+0x30>
	...

000210c8 <ble_gap_conn_broken>:
{
   210c8:	b570      	push	{r4, r5, r6, lr}
   210ca:	b090      	sub	sp, #64	; 0x40
   210cc:	4604      	mov	r4, r0
   210ce:	460d      	mov	r5, r1
    memset(&event, 0, sizeof event);
   210d0:	2234      	movs	r2, #52	; 0x34
   210d2:	2100      	movs	r1, #0
   210d4:	4668      	mov	r0, sp
   210d6:	f7ed fc8b 	bl	e9f0 <memset>
    snap.desc = &event.disconnect.conn;
   210da:	a910      	add	r1, sp, #64	; 0x40
   210dc:	ab02      	add	r3, sp, #8
   210de:	f841 3d0c 	str.w	r3, [r1, #-12]!
    rc = ble_gap_find_snapshot(conn_handle, &snap);
   210e2:	4620      	mov	r0, r4
   210e4:	f7ff fa0b 	bl	204fe <ble_gap_find_snapshot>
    if (rc != 0) {
   210e8:	b108      	cbz	r0, 210ee <ble_gap_conn_broken+0x26>
}
   210ea:	b010      	add	sp, #64	; 0x40
   210ec:	bd70      	pop	{r4, r5, r6, pc}
    ble_hs_lock();
   210ee:	f002 fcc7 	bl	23a80 <ble_hs_lock>
    entry = ble_gap_update_entry_remove(conn_handle);
   210f2:	4620      	mov	r0, r4
   210f4:	f7ff fae2 	bl	206bc <ble_gap_update_entry_remove>
   210f8:	4606      	mov	r6, r0
    ble_hs_unlock();
   210fa:	f002 fcc5 	bl	23a88 <ble_hs_unlock>
    if (entry != NULL) {
   210fe:	b136      	cbz	r6, 2110e <ble_gap_conn_broken+0x46>
        ble_gap_update_notify(conn_handle, reason);
   21100:	4629      	mov	r1, r5
   21102:	4620      	mov	r0, r4
   21104:	f7ff ffc0 	bl	21088 <ble_gap_update_notify>
        ble_gap_update_entry_free(entry);
   21108:	4630      	mov	r0, r6
   2110a:	f7ff fba7 	bl	2085c <ble_gap_update_entry_free>
    ble_l2cap_sig_conn_broken(conn_handle, reason);
   2110e:	4629      	mov	r1, r5
   21110:	4620      	mov	r0, r4
   21112:	f005 f93d 	bl	26390 <ble_l2cap_sig_conn_broken>
    ble_sm_connection_broken(conn_handle);
   21116:	4620      	mov	r0, r4
   21118:	f006 fe95 	bl	27e46 <ble_sm_connection_broken>
    ble_gatts_connection_broken(conn_handle);
   2111c:	4620      	mov	r0, r4
   2111e:	f002 f949 	bl	233b4 <ble_gatts_connection_broken>
    ble_gattc_connection_broken(conn_handle);
   21122:	4620      	mov	r0, r4
   21124:	f001 fb66 	bl	227f4 <ble_gattc_connection_broken>
    ble_hs_flow_connection_broken(conn_handle);;
   21128:	4620      	mov	r0, r4
   2112a:	f003 fc25 	bl	24978 <ble_hs_flow_connection_broken>
    ble_hs_atomic_conn_delete(conn_handle);
   2112e:	4620      	mov	r0, r4
   21130:	f003 f9ef 	bl	24512 <ble_hs_atomic_conn_delete>
    event.type = BLE_GAP_EVENT_DISCONNECT;
   21134:	2301      	movs	r3, #1
   21136:	f88d 3000 	strb.w	r3, [sp]
    event.disconnect.reason = reason;
   2113a:	9501      	str	r5, [sp, #4]
    ble_gap_event_listener_call(&event);
   2113c:	4668      	mov	r0, sp
   2113e:	f7ff f94b 	bl	203d8 <ble_gap_event_listener_call>
    ble_gap_call_event_cb(&event, snap.cb, snap.cb_arg);
   21142:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   21144:	990e      	ldr	r1, [sp, #56]	; 0x38
   21146:	4668      	mov	r0, sp
   21148:	f7ff f86a 	bl	20220 <ble_gap_call_event_cb>
    STATS_INC(ble_gap_stats, disconnect);
   2114c:	4a02      	ldr	r2, [pc, #8]	; (21158 <ble_gap_conn_broken+0x90>)
   2114e:	6e53      	ldr	r3, [r2, #100]	; 0x64
   21150:	3301      	adds	r3, #1
   21152:	6653      	str	r3, [r2, #100]	; 0x64
   21154:	e7c9      	b.n	210ea <ble_gap_conn_broken+0x22>
   21156:	bf00      	nop
   21158:	20003f64 	.word	0x20003f64

0002115c <ble_gap_rx_disconn_complete>:
{
   2115c:	b570      	push	{r4, r5, r6, lr}
   2115e:	b08e      	sub	sp, #56	; 0x38
   21160:	4604      	mov	r4, r0
    uint16_t handle = le16toh(ev->conn_handle);
   21162:	f8b0 5001 	ldrh.w	r5, [r0, #1]
   21166:	b2ae      	uxth	r6, r5
    STATS_INC(ble_gap_stats, rx_disconnect);
   21168:	4a14      	ldr	r2, [pc, #80]	; (211bc <ble_gap_rx_disconn_complete+0x60>)
   2116a:	6e93      	ldr	r3, [r2, #104]	; 0x68
   2116c:	3301      	adds	r3, #1
   2116e:	6693      	str	r3, [r2, #104]	; 0x68
    if (ev->status == 0) {
   21170:	7803      	ldrb	r3, [r0, #0]
   21172:	b953      	cbnz	r3, 2118a <ble_gap_rx_disconn_complete+0x2e>
        ble_gap_conn_broken(handle, BLE_HS_HCI_ERR(ev->reason));
   21174:	78c1      	ldrb	r1, [r0, #3]
   21176:	b131      	cbz	r1, 21186 <ble_gap_rx_disconn_complete+0x2a>
   21178:	f501 7100 	add.w	r1, r1, #512	; 0x200
   2117c:	4630      	mov	r0, r6
   2117e:	f7ff ffa3 	bl	210c8 <ble_gap_conn_broken>
}
   21182:	b00e      	add	sp, #56	; 0x38
   21184:	bd70      	pop	{r4, r5, r6, pc}
        ble_gap_conn_broken(handle, BLE_HS_HCI_ERR(ev->reason));
   21186:	2100      	movs	r1, #0
   21188:	e7f8      	b.n	2117c <ble_gap_rx_disconn_complete+0x20>
        memset(&event, 0, sizeof event);
   2118a:	2234      	movs	r2, #52	; 0x34
   2118c:	2100      	movs	r1, #0
   2118e:	a801      	add	r0, sp, #4
   21190:	f7ed fc2e 	bl	e9f0 <memset>
        event.type = BLE_GAP_EVENT_TERM_FAILURE;
   21194:	2306      	movs	r3, #6
   21196:	f88d 3004 	strb.w	r3, [sp, #4]
        event.term_failure.conn_handle = handle;
   2119a:	f8ad 500c 	strh.w	r5, [sp, #12]
        event.term_failure.status = BLE_HS_HCI_ERR(ev->status);
   2119e:	7823      	ldrb	r3, [r4, #0]
   211a0:	b153      	cbz	r3, 211b8 <ble_gap_rx_disconn_complete+0x5c>
   211a2:	f503 7300 	add.w	r3, r3, #512	; 0x200
   211a6:	9302      	str	r3, [sp, #8]
        ble_gap_event_listener_call(&event);
   211a8:	a801      	add	r0, sp, #4
   211aa:	f7ff f915 	bl	203d8 <ble_gap_event_listener_call>
        ble_gap_call_conn_event_cb(&event, handle);
   211ae:	4631      	mov	r1, r6
   211b0:	a801      	add	r0, sp, #4
   211b2:	f7ff f93b 	bl	2042c <ble_gap_call_conn_event_cb>
}
   211b6:	e7e4      	b.n	21182 <ble_gap_rx_disconn_complete+0x26>
        event.term_failure.status = BLE_HS_HCI_ERR(ev->status);
   211b8:	2300      	movs	r3, #0
   211ba:	e7f4      	b.n	211a6 <ble_gap_rx_disconn_complete+0x4a>
   211bc:	20003f64 	.word	0x20003f64

000211c0 <ble_gap_rx_update_complete>:
{
   211c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   211c2:	b091      	sub	sp, #68	; 0x44
   211c4:	4604      	mov	r4, r0
    STATS_INC(ble_gap_stats, rx_update_complete);
   211c6:	4a2c      	ldr	r2, [pc, #176]	; (21278 <ble_gap_rx_update_complete+0xb8>)
   211c8:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
   211ca:	3301      	adds	r3, #1
   211cc:	66d3      	str	r3, [r2, #108]	; 0x6c
    memset(&event, 0, sizeof event);
   211ce:	2234      	movs	r2, #52	; 0x34
   211d0:	2100      	movs	r1, #0
   211d2:	a801      	add	r0, sp, #4
   211d4:	f7ed fc0c 	bl	e9f0 <memset>
    memset(&l2cap_params, 0, sizeof l2cap_params);
   211d8:	2300      	movs	r3, #0
   211da:	930e      	str	r3, [sp, #56]	; 0x38
   211dc:	930f      	str	r3, [sp, #60]	; 0x3c
    ble_hs_lock();
   211de:	f002 fc4f 	bl	23a80 <ble_hs_lock>
    conn_handle = le16toh(ev->conn_handle);
   211e2:	8865      	ldrh	r5, [r4, #2]
    conn = ble_hs_conn_find(conn_handle);
   211e4:	4628      	mov	r0, r5
   211e6:	f003 fa9b 	bl	24720 <ble_hs_conn_find>
    if (conn != NULL) {
   211ea:	b120      	cbz	r0, 211f6 <ble_gap_rx_update_complete+0x36>
   211ec:	4606      	mov	r6, r0
        switch (ev->status) {
   211ee:	7863      	ldrb	r3, [r4, #1]
   211f0:	b193      	cbz	r3, 21218 <ble_gap_rx_update_complete+0x58>
   211f2:	2b1a      	cmp	r3, #26
   211f4:	d017      	beq.n	21226 <ble_gap_rx_update_complete+0x66>
    if (l2cap_params.itvl_min == 0) {
   211f6:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   211fa:	b353      	cbz	r3, 21252 <ble_gap_rx_update_complete+0x92>
    ble_hs_unlock();
   211fc:	f002 fc44 	bl	23a88 <ble_hs_unlock>
    if (l2cap_params.itvl_min != 0) {
   21200:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   21204:	bb5b      	cbnz	r3, 2125e <ble_gap_rx_update_complete+0x9e>
        cb_status = BLE_HS_HCI_ERR(ev->status);
   21206:	7861      	ldrb	r1, [r4, #1]
   21208:	b399      	cbz	r1, 21272 <ble_gap_rx_update_complete+0xb2>
   2120a:	f501 7100 	add.w	r1, r1, #512	; 0x200
        ble_gap_update_notify(conn_handle, cb_status);
   2120e:	4628      	mov	r0, r5
   21210:	f7ff ff3a 	bl	21088 <ble_gap_update_notify>
}
   21214:	b011      	add	sp, #68	; 0x44
   21216:	bdf0      	pop	{r4, r5, r6, r7, pc}
            conn->bhc_itvl = le16toh(ev->conn_itvl);
   21218:	88a3      	ldrh	r3, [r4, #4]
   2121a:	8383      	strh	r3, [r0, #28]
            conn->bhc_latency = le16toh(ev->conn_latency);
   2121c:	88e3      	ldrh	r3, [r4, #6]
   2121e:	83c3      	strh	r3, [r0, #30]
            conn->bhc_supervision_timeout = le16toh(ev->supervision_timeout);
   21220:	8923      	ldrh	r3, [r4, #8]
   21222:	8403      	strh	r3, [r0, #32]
            break;
   21224:	e7e7      	b.n	211f6 <ble_gap_rx_update_complete+0x36>
            entry = ble_gap_update_entry_find(conn_handle, NULL);
   21226:	2100      	movs	r1, #0
   21228:	4628      	mov	r0, r5
   2122a:	f7ff f89f 	bl	2036c <ble_gap_update_entry_find>
            if (entry != NULL && !(conn->bhc_flags & BLE_HS_CONN_F_MASTER)) {
   2122e:	4607      	mov	r7, r0
   21230:	2800      	cmp	r0, #0
   21232:	d0e0      	beq.n	211f6 <ble_gap_rx_update_complete+0x36>
   21234:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
   21238:	f013 0f01 	tst.w	r3, #1
   2123c:	d1db      	bne.n	211f6 <ble_gap_rx_update_complete+0x36>
                ble_gap_update_to_l2cap(&entry->params, &l2cap_params);
   2123e:	a90e      	add	r1, sp, #56	; 0x38
   21240:	3004      	adds	r0, #4
   21242:	f7ff f821 	bl	20288 <ble_gap_update_to_l2cap>
    return os_time_get();
   21246:	f7ed f8b3 	bl	e3b0 <os_time_get>
                entry->exp_os_ticks = ble_npl_time_get() +
   2124a:	f500 50a0 	add.w	r0, r0, #5120	; 0x1400
   2124e:	6138      	str	r0, [r7, #16]
   21250:	e7d1      	b.n	211f6 <ble_gap_rx_update_complete+0x36>
        entry = ble_gap_update_entry_remove(conn_handle);
   21252:	4628      	mov	r0, r5
   21254:	f7ff fa32 	bl	206bc <ble_gap_update_entry_remove>
        ble_gap_update_entry_free(entry);
   21258:	f7ff fb00 	bl	2085c <ble_gap_update_entry_free>
   2125c:	e7ce      	b.n	211fc <ble_gap_rx_update_complete+0x3c>
        rc = ble_l2cap_sig_update(conn_handle, &l2cap_params,
   2125e:	2300      	movs	r3, #0
   21260:	4a06      	ldr	r2, [pc, #24]	; (2127c <ble_gap_rx_update_complete+0xbc>)
   21262:	a90e      	add	r1, sp, #56	; 0x38
   21264:	4628      	mov	r0, r5
   21266:	f005 f82d 	bl	262c4 <ble_l2cap_sig_update>
        if (rc == 0) {
   2126a:	4601      	mov	r1, r0
   2126c:	2800      	cmp	r0, #0
   2126e:	d1ce      	bne.n	2120e <ble_gap_rx_update_complete+0x4e>
   21270:	e7d0      	b.n	21214 <ble_gap_rx_update_complete+0x54>
        cb_status = BLE_HS_HCI_ERR(ev->status);
   21272:	2100      	movs	r1, #0
   21274:	e7cb      	b.n	2120e <ble_gap_rx_update_complete+0x4e>
   21276:	bf00      	nop
   21278:	20003f64 	.word	0x20003f64
   2127c:	00021281 	.word	0x00021281

00021280 <ble_gap_update_l2cap_cb>:
{
   21280:	b570      	push	{r4, r5, r6, lr}
   21282:	4605      	mov	r5, r0
   21284:	460e      	mov	r6, r1
    ble_hs_lock();
   21286:	f002 fbfb 	bl	23a80 <ble_hs_lock>
    entry = ble_gap_update_entry_remove(conn_handle);
   2128a:	4628      	mov	r0, r5
   2128c:	f7ff fa16 	bl	206bc <ble_gap_update_entry_remove>
   21290:	4604      	mov	r4, r0
    ble_hs_unlock();
   21292:	f002 fbf9 	bl	23a88 <ble_hs_unlock>
    if (entry != NULL) {
   21296:	b11c      	cbz	r4, 212a0 <ble_gap_update_l2cap_cb+0x20>
        ble_gap_update_entry_free(entry);
   21298:	4620      	mov	r0, r4
   2129a:	f7ff fadf 	bl	2085c <ble_gap_update_entry_free>
        if (status != 0) {
   2129e:	b906      	cbnz	r6, 212a2 <ble_gap_update_l2cap_cb+0x22>
}
   212a0:	bd70      	pop	{r4, r5, r6, pc}
            ble_gap_update_notify(conn_handle, status);
   212a2:	4631      	mov	r1, r6
   212a4:	4628      	mov	r0, r5
   212a6:	f7ff feef 	bl	21088 <ble_gap_update_notify>
}
   212aa:	e7f9      	b.n	212a0 <ble_gap_update_l2cap_cb+0x20>

000212ac <ble_gap_update_timer>:
{
   212ac:	b530      	push	{r4, r5, lr}
   212ae:	b083      	sub	sp, #12
   212b0:	e003      	b.n	212ba <ble_gap_update_timer+0xe>
        ble_hs_unlock();
   212b2:	f002 fbe9 	bl	23a88 <ble_hs_unlock>
            entry = NULL;
   212b6:	2400      	movs	r4, #0
    } while (entry != NULL);
   212b8:	b1bc      	cbz	r4, 212ea <ble_gap_update_timer+0x3e>
        ble_hs_lock();
   212ba:	f002 fbe1 	bl	23a80 <ble_hs_lock>
        conn_handle = ble_gap_update_next_exp(&ticks_until_exp);
   212be:	a801      	add	r0, sp, #4
   212c0:	f7ff faf2 	bl	208a8 <ble_gap_update_next_exp>
        if (ticks_until_exp == 0) {
   212c4:	9b01      	ldr	r3, [sp, #4]
   212c6:	2b00      	cmp	r3, #0
   212c8:	d1f3      	bne.n	212b2 <ble_gap_update_timer+0x6>
   212ca:	4605      	mov	r5, r0
            entry = ble_gap_update_entry_remove(conn_handle);
   212cc:	f7ff f9f6 	bl	206bc <ble_gap_update_entry_remove>
   212d0:	4604      	mov	r4, r0
        ble_hs_unlock();
   212d2:	f002 fbd9 	bl	23a88 <ble_hs_unlock>
        if (entry != NULL) {
   212d6:	2c00      	cmp	r4, #0
   212d8:	d0ee      	beq.n	212b8 <ble_gap_update_timer+0xc>
            ble_gap_update_notify(conn_handle, BLE_HS_ETIMEOUT);
   212da:	210d      	movs	r1, #13
   212dc:	4628      	mov	r0, r5
   212de:	f7ff fed3 	bl	21088 <ble_gap_update_notify>
            ble_gap_update_entry_free(entry);
   212e2:	4620      	mov	r0, r4
   212e4:	f7ff faba 	bl	2085c <ble_gap_update_entry_free>
   212e8:	e7e6      	b.n	212b8 <ble_gap_update_timer+0xc>
}
   212ea:	9801      	ldr	r0, [sp, #4]
   212ec:	b003      	add	sp, #12
   212ee:	bd30      	pop	{r4, r5, pc}

000212f0 <ble_gap_timer>:
{
   212f0:	b510      	push	{r4, lr}
    master_ticks = ble_gap_master_timer();
   212f2:	f7ff fb8b 	bl	20a0c <ble_gap_master_timer>
   212f6:	4604      	mov	r4, r0
    update_ticks = ble_gap_update_timer();
   212f8:	f7ff ffd8 	bl	212ac <ble_gap_update_timer>
    min_ticks = min(master_ticks, update_ticks);
   212fc:	4284      	cmp	r4, r0
   212fe:	bfa8      	it	ge
   21300:	4604      	movge	r4, r0
    min_ticks = min(min_ticks, ble_gap_slave_timer());
   21302:	f7ff fb0b 	bl	2091c <ble_gap_slave_timer>
   21306:	42a0      	cmp	r0, r4
   21308:	dd01      	ble.n	2130e <ble_gap_timer+0x1e>
}
   2130a:	4620      	mov	r0, r4
   2130c:	bd10      	pop	{r4, pc}
    min_ticks = min(min_ticks, ble_gap_slave_timer());
   2130e:	f7ff fb05 	bl	2091c <ble_gap_slave_timer>
   21312:	4604      	mov	r4, r0
    return min_ticks;
   21314:	e7f9      	b.n	2130a <ble_gap_timer+0x1a>
	...

00021318 <ble_gap_update_failed>:
{
   21318:	b570      	push	{r4, r5, r6, lr}
   2131a:	4604      	mov	r4, r0
   2131c:	460d      	mov	r5, r1
    STATS_INC(ble_gap_stats, update_fail);
   2131e:	4a0a      	ldr	r2, [pc, #40]	; (21348 <ble_gap_update_failed+0x30>)
   21320:	6d93      	ldr	r3, [r2, #88]	; 0x58
   21322:	3301      	adds	r3, #1
   21324:	6593      	str	r3, [r2, #88]	; 0x58
    ble_hs_lock();
   21326:	f002 fbab 	bl	23a80 <ble_hs_lock>
    entry = ble_gap_update_entry_remove(conn_handle);
   2132a:	4620      	mov	r0, r4
   2132c:	f7ff f9c6 	bl	206bc <ble_gap_update_entry_remove>
   21330:	4606      	mov	r6, r0
    ble_hs_unlock();
   21332:	f002 fba9 	bl	23a88 <ble_hs_unlock>
    ble_gap_update_entry_free(entry);
   21336:	4630      	mov	r0, r6
   21338:	f7ff fa90 	bl	2085c <ble_gap_update_entry_free>
    ble_gap_update_notify(conn_handle, status);
   2133c:	4629      	mov	r1, r5
   2133e:	4620      	mov	r0, r4
   21340:	f7ff fea2 	bl	21088 <ble_gap_update_notify>
}
   21344:	bd70      	pop	{r4, r5, r6, pc}
   21346:	bf00      	nop
   21348:	20003f64 	.word	0x20003f64

0002134c <ble_gap_rx_param_req>:
{
   2134c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21350:	b094      	sub	sp, #80	; 0x50
   21352:	4604      	mov	r4, r0
    memset(&event, 0, sizeof event);
   21354:	f04f 0834 	mov.w	r8, #52	; 0x34
   21358:	4642      	mov	r2, r8
   2135a:	2100      	movs	r1, #0
   2135c:	a801      	add	r0, sp, #4
   2135e:	f7ed fb47 	bl	e9f0 <memset>
    peer_params.itvl_min = le16toh(ev->min_interval);
   21362:	f8b4 3003 	ldrh.w	r3, [r4, #3]
   21366:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
    peer_params.itvl_max = le16toh(ev->max_interval);
   2136a:	f8b4 3005 	ldrh.w	r3, [r4, #5]
   2136e:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
    peer_params.latency = le16toh(ev->latency);
   21372:	f8b4 3007 	ldrh.w	r3, [r4, #7]
   21376:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
    peer_params.supervision_timeout = le16toh(ev->timeout);
   2137a:	f8b4 3009 	ldrh.w	r3, [r4, #9]
   2137e:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
    peer_params.min_ce_len = 0;
   21382:	2300      	movs	r3, #0
   21384:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
    peer_params.max_ce_len = 0;
   21388:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
    self_params = peer_params;
   2138c:	ae0e      	add	r6, sp, #56	; 0x38
   2138e:	ad11      	add	r5, sp, #68	; 0x44
   21390:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   21394:	e886 0007 	stmia.w	r6, {r0, r1, r2}
    conn_handle = le16toh(ev->conn_handle);
   21398:	f8b4 7001 	ldrh.w	r7, [r4, #1]
   2139c:	b2bc      	uxth	r4, r7
    memset(&event, 0, sizeof event);
   2139e:	4642      	mov	r2, r8
   213a0:	4619      	mov	r1, r3
   213a2:	a801      	add	r0, sp, #4
   213a4:	f7ed fb24 	bl	e9f0 <memset>
    event.type = BLE_GAP_EVENT_CONN_UPDATE_REQ;
   213a8:	2304      	movs	r3, #4
   213aa:	f88d 3004 	strb.w	r3, [sp, #4]
    event.conn_update_req.conn_handle = conn_handle;
   213ae:	f8ad 7010 	strh.w	r7, [sp, #16]
    event.conn_update_req.self_params = &self_params;
   213b2:	9603      	str	r6, [sp, #12]
    event.conn_update_req.peer_params = &peer_params;
   213b4:	9502      	str	r5, [sp, #8]
    rc = ble_gap_call_conn_event_cb(&event, conn_handle);
   213b6:	4621      	mov	r1, r4
   213b8:	eb0d 0003 	add.w	r0, sp, r3
   213bc:	f7ff f836 	bl	2042c <ble_gap_call_conn_event_cb>
    if (rc == 0) {
   213c0:	b948      	cbnz	r0, 213d6 <ble_gap_rx_param_req+0x8a>
        rc = ble_gap_tx_param_pos_reply(conn_handle, &self_params);
   213c2:	a90e      	add	r1, sp, #56	; 0x38
   213c4:	4620      	mov	r0, r4
   213c6:	f7ff f926 	bl	20616 <ble_gap_tx_param_pos_reply>
        if (rc != 0) {
   213ca:	4601      	mov	r1, r0
   213cc:	b138      	cbz	r0, 213de <ble_gap_rx_param_req+0x92>
            ble_gap_update_failed(conn_handle, rc);
   213ce:	4620      	mov	r0, r4
   213d0:	f7ff ffa2 	bl	21318 <ble_gap_update_failed>
   213d4:	e003      	b.n	213de <ble_gap_rx_param_req+0x92>
        ble_gap_tx_param_neg_reply(conn_handle, rc);
   213d6:	b2c1      	uxtb	r1, r0
   213d8:	4620      	mov	r0, r4
   213da:	f7ff f93d 	bl	20658 <ble_gap_tx_param_neg_reply>
}
   213de:	b014      	add	sp, #80	; 0x50
   213e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000213e4 <ble_gap_update_params>:
{
   213e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   213e8:	b082      	sub	sp, #8
   213ea:	4606      	mov	r6, r0
   213ec:	460d      	mov	r5, r1
    if (!ble_gap_validate_conn_params(params)) {
   213ee:	4608      	mov	r0, r1
   213f0:	f7fe ffce 	bl	20390 <ble_gap_validate_conn_params>
   213f4:	2800      	cmp	r0, #0
   213f6:	d076      	beq.n	214e6 <ble_gap_update_params+0x102>
    STATS_INC(ble_gap_stats, update);
   213f8:	4a3c      	ldr	r2, [pc, #240]	; (214ec <ble_gap_update_params+0x108>)
   213fa:	6d53      	ldr	r3, [r2, #84]	; 0x54
   213fc:	3301      	adds	r3, #1
   213fe:	6553      	str	r3, [r2, #84]	; 0x54
    memset(&l2cap_params, 0, sizeof l2cap_params);
   21400:	2300      	movs	r3, #0
   21402:	9300      	str	r3, [sp, #0]
   21404:	9301      	str	r3, [sp, #4]
    ble_hs_lock();
   21406:	f002 fb3b 	bl	23a80 <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
   2140a:	4630      	mov	r0, r6
   2140c:	f003 f988 	bl	24720 <ble_hs_conn_find>
    if (conn == NULL) {
   21410:	4604      	mov	r4, r0
   21412:	b3b8      	cbz	r0, 21484 <ble_gap_update_params+0xa0>
    dup = ble_gap_update_entry_find(conn_handle, NULL);
   21414:	2100      	movs	r1, #0
   21416:	4630      	mov	r0, r6
   21418:	f7fe ffa8 	bl	2036c <ble_gap_update_entry_find>
    if (dup != NULL) {
   2141c:	b118      	cbz	r0, 21426 <ble_gap_update_params+0x42>
        rc = BLE_HS_EALREADY;
   2141e:	2402      	movs	r4, #2
    l2cap_update = 0;
   21420:	2700      	movs	r7, #0
    entry = NULL;
   21422:	46b8      	mov	r8, r7
   21424:	e031      	b.n	2148a <ble_gap_update_params+0xa6>
    entry = ble_gap_update_entry_alloc();
   21426:	f7ff fb59 	bl	20adc <ble_gap_update_entry_alloc>
    if (entry == NULL) {
   2142a:	4680      	mov	r8, r0
   2142c:	2800      	cmp	r0, #0
   2142e:	d040      	beq.n	214b2 <ble_gap_update_params+0xce>
    entry->conn_handle = conn_handle;
   21430:	8286      	strh	r6, [r0, #20]
    entry->params = *params;
   21432:	1d03      	adds	r3, r0, #4
   21434:	6828      	ldr	r0, [r5, #0]
   21436:	6869      	ldr	r1, [r5, #4]
   21438:	68aa      	ldr	r2, [r5, #8]
   2143a:	c307      	stmia	r3!, {r0, r1, r2}
   2143c:	f7ec ffb8 	bl	e3b0 <os_time_get>
    entry->exp_os_ticks = ble_npl_time_get() +
   21440:	f500 50a0 	add.w	r0, r0, #5120	; 0x1400
   21444:	f8c8 0010 	str.w	r0, [r8, #16]
    BLE_HS_LOG(INFO, "GAP procedure initiated: ");
   21448:	4a29      	ldr	r2, [pc, #164]	; (214f0 <ble_gap_update_params+0x10c>)
   2144a:	2101      	movs	r1, #1
   2144c:	2004      	movs	r0, #4
   2144e:	f7f0 f947 	bl	116e0 <modlog_printf>
    ble_gap_log_update(conn_handle, params);
   21452:	4629      	mov	r1, r5
   21454:	4630      	mov	r0, r6
   21456:	f7ff fac1 	bl	209dc <ble_gap_log_update>
    BLE_HS_LOG(INFO, "\n");
   2145a:	4a26      	ldr	r2, [pc, #152]	; (214f4 <ble_gap_update_params+0x110>)
   2145c:	2101      	movs	r1, #1
   2145e:	2004      	movs	r0, #4
   21460:	f7f0 f93e 	bl	116e0 <modlog_printf>
    if ((conn->supported_feat & BLE_HS_HCI_LE_FEAT_CONN_PARAM_REQUEST) == 0 &&
   21464:	6a63      	ldr	r3, [r4, #36]	; 0x24
   21466:	f013 0f02 	tst.w	r3, #2
   2146a:	d104      	bne.n	21476 <ble_gap_update_params+0x92>
            !(conn->bhc_flags & BLE_HS_CONN_F_MASTER)) {
   2146c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    if ((conn->supported_feat & BLE_HS_HCI_LE_FEAT_CONN_PARAM_REQUEST) == 0 &&
   21470:	f013 0f01 	tst.w	r3, #1
   21474:	d020      	beq.n	214b8 <ble_gap_update_params+0xd4>
        rc = ble_gap_update_tx(conn_handle, params);
   21476:	4629      	mov	r1, r5
   21478:	4630      	mov	r0, r6
   2147a:	f7ff f8fe 	bl	2067a <ble_gap_update_tx>
   2147e:	4604      	mov	r4, r0
    l2cap_update = 0;
   21480:	2700      	movs	r7, #0
   21482:	e002      	b.n	2148a <ble_gap_update_params+0xa6>
        rc = BLE_HS_ENOTCONN;
   21484:	2407      	movs	r4, #7
    l2cap_update = 0;
   21486:	2700      	movs	r7, #0
    entry = NULL;
   21488:	46b8      	mov	r8, r7
    ble_hs_unlock();
   2148a:	f002 fafd 	bl	23a88 <ble_hs_unlock>
    if (!l2cap_update) {
   2148e:	b9b7      	cbnz	r7, 214be <ble_gap_update_params+0xda>
        ble_hs_timer_resched();
   21490:	f002 fbee 	bl	23c70 <ble_hs_timer_resched>
    ble_hs_lock();
   21494:	f002 faf4 	bl	23a80 <ble_hs_lock>
    if (rc == 0) {
   21498:	b9ec      	cbnz	r4, 214d6 <ble_gap_update_params+0xf2>
        SLIST_INSERT_HEAD(&ble_gap_update_entries, entry, next);
   2149a:	4b17      	ldr	r3, [pc, #92]	; (214f8 <ble_gap_update_params+0x114>)
   2149c:	681a      	ldr	r2, [r3, #0]
   2149e:	f8c8 2000 	str.w	r2, [r8]
   214a2:	f8c3 8000 	str.w	r8, [r3]
    ble_hs_unlock();
   214a6:	f002 faef 	bl	23a88 <ble_hs_unlock>
}
   214aa:	4620      	mov	r0, r4
   214ac:	b002      	add	sp, #8
   214ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = BLE_HS_ENOMEM;
   214b2:	2406      	movs	r4, #6
    l2cap_update = 0;
   214b4:	2700      	movs	r7, #0
   214b6:	e7e8      	b.n	2148a <ble_gap_update_params+0xa6>
        rc = 0;
   214b8:	2400      	movs	r4, #0
        l2cap_update = 1;
   214ba:	2701      	movs	r7, #1
   214bc:	e7e5      	b.n	2148a <ble_gap_update_params+0xa6>
        ble_gap_update_to_l2cap(params, &l2cap_params);
   214be:	4669      	mov	r1, sp
   214c0:	4628      	mov	r0, r5
   214c2:	f7fe fee1 	bl	20288 <ble_gap_update_to_l2cap>
        rc = ble_l2cap_sig_update(conn_handle, &l2cap_params,
   214c6:	2300      	movs	r3, #0
   214c8:	4a0c      	ldr	r2, [pc, #48]	; (214fc <ble_gap_update_params+0x118>)
   214ca:	4669      	mov	r1, sp
   214cc:	4630      	mov	r0, r6
   214ce:	f004 fef9 	bl	262c4 <ble_l2cap_sig_update>
   214d2:	4604      	mov	r4, r0
   214d4:	e7de      	b.n	21494 <ble_gap_update_params+0xb0>
        ble_gap_update_entry_free(entry);
   214d6:	4640      	mov	r0, r8
   214d8:	f7ff f9c0 	bl	2085c <ble_gap_update_entry_free>
        STATS_INC(ble_gap_stats, update_fail);
   214dc:	4a03      	ldr	r2, [pc, #12]	; (214ec <ble_gap_update_params+0x108>)
   214de:	6d93      	ldr	r3, [r2, #88]	; 0x58
   214e0:	3301      	adds	r3, #1
   214e2:	6593      	str	r3, [r2, #88]	; 0x58
   214e4:	e7df      	b.n	214a6 <ble_gap_update_params+0xc2>
        return BLE_HS_EINVAL;
   214e6:	2403      	movs	r4, #3
   214e8:	e7df      	b.n	214aa <ble_gap_update_params+0xc6>
   214ea:	bf00      	nop
   214ec:	20003f64 	.word	0x20003f64
   214f0:	00032200 	.word	0x00032200
   214f4:	000324e4 	.word	0x000324e4
   214f8:	200026a4 	.word	0x200026a4
   214fc:	00021281 	.word	0x00021281

00021500 <ble_gap_unpair>:
{
   21500:	b510      	push	{r4, lr}
   21502:	b082      	sub	sp, #8
   21504:	4604      	mov	r4, r0
    if (ble_addr_cmp(peer_addr, BLE_ADDR_ANY) == 0) {
   21506:	2300      	movs	r3, #0
   21508:	9300      	str	r3, [sp, #0]
   2150a:	f8cd 3003 	str.w	r3, [sp, #3]

static inline int ble_addr_cmp(const ble_addr_t *a, const ble_addr_t *b)
{
    int type_diff;

    type_diff = a->type - b->type;
   2150e:	7800      	ldrb	r0, [r0, #0]
    if (type_diff != 0) {
   21510:	b928      	cbnz	r0, 2151e <ble_gap_unpair+0x1e>
        return type_diff;
    }

    return memcmp(a->val, b->val, sizeof(a->val));
   21512:	2206      	movs	r2, #6
   21514:	f10d 0101 	add.w	r1, sp, #1
   21518:	1c60      	adds	r0, r4, #1
   2151a:	f7ed fa1d 	bl	e958 <memcmp>
   2151e:	b198      	cbz	r0, 21548 <ble_gap_unpair+0x48>
    ble_hs_lock();
   21520:	f002 faae 	bl	23a80 <ble_hs_lock>
    conn = ble_hs_conn_find_by_addr(peer_addr);
   21524:	4620      	mov	r0, r4
   21526:	f003 f917 	bl	24758 <ble_hs_conn_find_by_addr>
    if (conn != NULL) {
   2152a:	b110      	cbz	r0, 21532 <ble_gap_unpair+0x32>
        ble_gap_terminate_with_conn(conn, BLE_ERR_REM_USER_CONN_TERM);
   2152c:	2113      	movs	r1, #19
   2152e:	f7ff fd5d 	bl	20fec <ble_gap_terminate_with_conn>
    ble_hs_unlock();
   21532:	f002 faa9 	bl	23a88 <ble_hs_unlock>
    ble_hs_pvcy_remove_entry(peer_addr->type,
   21536:	1c61      	adds	r1, r4, #1
   21538:	7820      	ldrb	r0, [r4, #0]
   2153a:	f004 f968 	bl	2580e <ble_hs_pvcy_remove_entry>
    return ble_store_util_delete_peer(peer_addr);
   2153e:	4620      	mov	r0, r4
   21540:	f007 fb42 	bl	28bc8 <ble_store_util_delete_peer>
}
   21544:	b002      	add	sp, #8
   21546:	bd10      	pop	{r4, pc}
        return BLE_HS_EINVAL;
   21548:	2003      	movs	r0, #3
   2154a:	e7fb      	b.n	21544 <ble_gap_unpair+0x44>

0002154c <ble_gap_unpair_oldest_peer>:
{
   2154c:	b500      	push	{lr}
   2154e:	b085      	sub	sp, #20
    rc = ble_store_util_bonded_peers(
   21550:	2201      	movs	r2, #1
   21552:	a901      	add	r1, sp, #4
   21554:	a802      	add	r0, sp, #8
   21556:	f007 fb0f 	bl	28b78 <ble_store_util_bonded_peers>
    if (rc != 0) {
   2155a:	4603      	mov	r3, r0
   2155c:	b908      	cbnz	r0, 21562 <ble_gap_unpair_oldest_peer+0x16>
    if (num_peers == 0) {
   2155e:	9b01      	ldr	r3, [sp, #4]
   21560:	b91b      	cbnz	r3, 2156a <ble_gap_unpair_oldest_peer+0x1e>
}
   21562:	4618      	mov	r0, r3
   21564:	b005      	add	sp, #20
   21566:	f85d fb04 	ldr.w	pc, [sp], #4
    rc = ble_gap_unpair(&oldest_peer_id_addr);
   2156a:	a802      	add	r0, sp, #8
   2156c:	f7ff ffc8 	bl	21500 <ble_gap_unpair>
   21570:	4603      	mov	r3, r0
   21572:	e7f6      	b.n	21562 <ble_gap_unpair_oldest_peer+0x16>

00021574 <ble_gap_passkey_event>:
{
   21574:	b530      	push	{r4, r5, lr}
   21576:	b08f      	sub	sp, #60	; 0x3c
   21578:	4604      	mov	r4, r0
   2157a:	460d      	mov	r5, r1
    memset(&event, 0, sizeof event);
   2157c:	2234      	movs	r2, #52	; 0x34
   2157e:	2100      	movs	r1, #0
   21580:	a801      	add	r0, sp, #4
   21582:	f7ed fa35 	bl	e9f0 <memset>
    event.type = BLE_GAP_EVENT_PASSKEY_ACTION;
   21586:	230b      	movs	r3, #11
   21588:	f88d 3004 	strb.w	r3, [sp, #4]
    event.passkey.conn_handle = conn_handle;
   2158c:	f8ad 4010 	strh.w	r4, [sp, #16]
    event.passkey.params = *passkey_params;
   21590:	ab02      	add	r3, sp, #8
   21592:	e895 0003 	ldmia.w	r5, {r0, r1}
   21596:	e883 0003 	stmia.w	r3, {r0, r1}
    ble_gap_call_conn_event_cb(&event, conn_handle);
   2159a:	4621      	mov	r1, r4
   2159c:	a801      	add	r0, sp, #4
   2159e:	f7fe ff45 	bl	2042c <ble_gap_call_conn_event_cb>
}
   215a2:	b00f      	add	sp, #60	; 0x3c
   215a4:	bd30      	pop	{r4, r5, pc}

000215a6 <ble_gap_enc_event>:
{
   215a6:	b570      	push	{r4, r5, r6, lr}
   215a8:	b08e      	sub	sp, #56	; 0x38
   215aa:	4604      	mov	r4, r0
   215ac:	460d      	mov	r5, r1
   215ae:	4616      	mov	r6, r2
    memset(&event, 0, sizeof event);
   215b0:	2234      	movs	r2, #52	; 0x34
   215b2:	2100      	movs	r1, #0
   215b4:	a801      	add	r0, sp, #4
   215b6:	f7ed fa1b 	bl	e9f0 <memset>
    event.type = BLE_GAP_EVENT_ENC_CHANGE;
   215ba:	230a      	movs	r3, #10
   215bc:	f88d 3004 	strb.w	r3, [sp, #4]
    event.enc_change.conn_handle = conn_handle;
   215c0:	f8ad 400c 	strh.w	r4, [sp, #12]
    event.enc_change.status = status;
   215c4:	9502      	str	r5, [sp, #8]
    ble_gap_event_listener_call(&event);
   215c6:	a801      	add	r0, sp, #4
   215c8:	f7fe ff06 	bl	203d8 <ble_gap_event_listener_call>
    ble_gap_call_conn_event_cb(&event, conn_handle);
   215cc:	4621      	mov	r1, r4
   215ce:	a801      	add	r0, sp, #4
   215d0:	f7fe ff2c 	bl	2042c <ble_gap_call_conn_event_cb>
    if (status == 0) {
   215d4:	b91d      	cbnz	r5, 215de <ble_gap_enc_event+0x38>
        if (security_restored) {
   215d6:	b926      	cbnz	r6, 215e2 <ble_gap_enc_event+0x3c>
            ble_gatts_bonding_established(conn_handle);
   215d8:	4620      	mov	r0, r4
   215da:	f002 f897 	bl	2370c <ble_gatts_bonding_established>
}
   215de:	b00e      	add	sp, #56	; 0x38
   215e0:	bd70      	pop	{r4, r5, r6, pc}
            ble_gatts_bonding_restored(conn_handle);
   215e2:	4620      	mov	r0, r4
   215e4:	f002 f8d2 	bl	2378c <ble_gatts_bonding_restored>
   215e8:	e7f9      	b.n	215de <ble_gap_enc_event+0x38>

000215ea <ble_gap_identity_event>:
{
   215ea:	b510      	push	{r4, lr}
   215ec:	b08e      	sub	sp, #56	; 0x38
   215ee:	4604      	mov	r4, r0
    memset(&event, 0, sizeof event);
   215f0:	2234      	movs	r2, #52	; 0x34
   215f2:	2100      	movs	r1, #0
   215f4:	a801      	add	r0, sp, #4
   215f6:	f7ed f9fb 	bl	e9f0 <memset>
    event.type = BLE_GAP_EVENT_IDENTITY_RESOLVED;
   215fa:	2310      	movs	r3, #16
   215fc:	f88d 3004 	strb.w	r3, [sp, #4]
    event.identity_resolved.conn_handle = conn_handle;
   21600:	f8ad 4008 	strh.w	r4, [sp, #8]
    ble_gap_call_conn_event_cb(&event, conn_handle);
   21604:	4621      	mov	r1, r4
   21606:	a801      	add	r0, sp, #4
   21608:	f7fe ff10 	bl	2042c <ble_gap_call_conn_event_cb>
}
   2160c:	b00e      	add	sp, #56	; 0x38
   2160e:	bd10      	pop	{r4, pc}

00021610 <ble_gap_repeat_pairing_event>:
{
   21610:	b510      	push	{r4, lr}
   21612:	b08e      	sub	sp, #56	; 0x38
   21614:	4604      	mov	r4, r0
    memset(&event, 0, sizeof event);
   21616:	2234      	movs	r2, #52	; 0x34
   21618:	2100      	movs	r1, #0
   2161a:	a801      	add	r0, sp, #4
   2161c:	f7ed f9e8 	bl	e9f0 <memset>
    event.type = BLE_GAP_EVENT_REPEAT_PAIRING;
   21620:	2311      	movs	r3, #17
   21622:	f88d 3004 	strb.w	r3, [sp, #4]
    event.repeat_pairing = *rp;
   21626:	6820      	ldr	r0, [r4, #0]
   21628:	9002      	str	r0, [sp, #8]
   2162a:	88a3      	ldrh	r3, [r4, #4]
   2162c:	f8ad 300c 	strh.w	r3, [sp, #12]
    rc = ble_gap_call_conn_event_cb(&event, rp->conn_handle);
   21630:	8821      	ldrh	r1, [r4, #0]
   21632:	a801      	add	r0, sp, #4
   21634:	f7fe fefa 	bl	2042c <ble_gap_call_conn_event_cb>
}
   21638:	b00e      	add	sp, #56	; 0x38
   2163a:	bd10      	pop	{r4, pc}

0002163c <ble_gap_notify_rx_event>:
{
   2163c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2163e:	b08f      	sub	sp, #60	; 0x3c
   21640:	4604      	mov	r4, r0
   21642:	460f      	mov	r7, r1
   21644:	4616      	mov	r6, r2
   21646:	461d      	mov	r5, r3
    memset(&event, 0, sizeof event);
   21648:	2234      	movs	r2, #52	; 0x34
   2164a:	2100      	movs	r1, #0
   2164c:	a801      	add	r0, sp, #4
   2164e:	f7ed f9cf 	bl	e9f0 <memset>
    event.type = BLE_GAP_EVENT_NOTIFY_RX;
   21652:	230c      	movs	r3, #12
   21654:	f88d 3004 	strb.w	r3, [sp, #4]
    event.notify_rx.conn_handle = conn_handle;
   21658:	f8ad 400e 	strh.w	r4, [sp, #14]
    event.notify_rx.attr_handle = attr_handle;
   2165c:	f8ad 700c 	strh.w	r7, [sp, #12]
    event.notify_rx.om = om;
   21660:	9602      	str	r6, [sp, #8]
    event.notify_rx.indication = is_indication;
   21662:	f04f 0300 	mov.w	r3, #0
   21666:	f365 0300 	bfi	r3, r5, #0, #1
   2166a:	f88d 3010 	strb.w	r3, [sp, #16]
    ble_gap_event_listener_call(&event);
   2166e:	a801      	add	r0, sp, #4
   21670:	f7fe feb2 	bl	203d8 <ble_gap_event_listener_call>
    ble_gap_call_conn_event_cb(&event, conn_handle);
   21674:	4621      	mov	r1, r4
   21676:	a801      	add	r0, sp, #4
   21678:	f7fe fed8 	bl	2042c <ble_gap_call_conn_event_cb>
    os_mbuf_free_chain(event.notify_rx.om);
   2167c:	9802      	ldr	r0, [sp, #8]
   2167e:	f7eb fecf 	bl	d420 <os_mbuf_free_chain>
}
   21682:	b00f      	add	sp, #60	; 0x3c
   21684:	bdf0      	pop	{r4, r5, r6, r7, pc}

00021686 <ble_gap_notify_tx_event>:
{
   21686:	b5f0      	push	{r4, r5, r6, r7, lr}
   21688:	b08f      	sub	sp, #60	; 0x3c
   2168a:	4607      	mov	r7, r0
   2168c:	460c      	mov	r4, r1
   2168e:	4616      	mov	r6, r2
   21690:	461d      	mov	r5, r3
    memset(&event, 0, sizeof event);
   21692:	2234      	movs	r2, #52	; 0x34
   21694:	2100      	movs	r1, #0
   21696:	a801      	add	r0, sp, #4
   21698:	f7ed f9aa 	bl	e9f0 <memset>
    event.type = BLE_GAP_EVENT_NOTIFY_TX;
   2169c:	230d      	movs	r3, #13
   2169e:	f88d 3004 	strb.w	r3, [sp, #4]
    event.notify_tx.conn_handle = conn_handle;
   216a2:	f8ad 400c 	strh.w	r4, [sp, #12]
    event.notify_tx.status = status;
   216a6:	9702      	str	r7, [sp, #8]
    event.notify_tx.attr_handle = attr_handle;
   216a8:	f8ad 600e 	strh.w	r6, [sp, #14]
    event.notify_tx.indication = is_indication;
   216ac:	f04f 0300 	mov.w	r3, #0
   216b0:	f365 0300 	bfi	r3, r5, #0, #1
   216b4:	f88d 3010 	strb.w	r3, [sp, #16]
    ble_gap_event_listener_call(&event);
   216b8:	a801      	add	r0, sp, #4
   216ba:	f7fe fe8d 	bl	203d8 <ble_gap_event_listener_call>
    ble_gap_call_conn_event_cb(&event, conn_handle);
   216be:	4621      	mov	r1, r4
   216c0:	a801      	add	r0, sp, #4
   216c2:	f7fe feb3 	bl	2042c <ble_gap_call_conn_event_cb>
}
   216c6:	b00f      	add	sp, #60	; 0x3c
   216c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

000216ca <ble_gap_subscribe_event>:
{
   216ca:	b5f0      	push	{r4, r5, r6, r7, lr}
   216cc:	b08f      	sub	sp, #60	; 0x3c
   216ce:	4605      	mov	r5, r0
   216d0:	460f      	mov	r7, r1
   216d2:	4616      	mov	r6, r2
   216d4:	461c      	mov	r4, r3
    memset(&event, 0, sizeof event);
   216d6:	2234      	movs	r2, #52	; 0x34
   216d8:	2100      	movs	r1, #0
   216da:	a801      	add	r0, sp, #4
   216dc:	f7ed f988 	bl	e9f0 <memset>
    event.type = BLE_GAP_EVENT_SUBSCRIBE;
   216e0:	230e      	movs	r3, #14
   216e2:	f88d 3004 	strb.w	r3, [sp, #4]
    event.subscribe.conn_handle = conn_handle;
   216e6:	f8ad 5008 	strh.w	r5, [sp, #8]
    event.subscribe.attr_handle = attr_handle;
   216ea:	f8ad 700a 	strh.w	r7, [sp, #10]
    event.subscribe.reason = reason;
   216ee:	f88d 600c 	strb.w	r6, [sp, #12]
    event.subscribe.cur_notify = !!cur_notify;
   216f2:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
   216f6:	3200      	adds	r2, #0
   216f8:	bf18      	it	ne
   216fa:	2201      	movne	r2, #1
   216fc:	1c23      	adds	r3, r4, #0
   216fe:	bf18      	it	ne
   21700:	2301      	movne	r3, #1
   21702:	f362 0341 	bfi	r3, r2, #1, #1
    event.subscribe.prev_indicate = !!prev_indicate;
   21706:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
   2170a:	3200      	adds	r2, #0
   2170c:	bf18      	it	ne
   2170e:	2201      	movne	r2, #1
   21710:	f362 0382 	bfi	r3, r2, #2, #1
    event.subscribe.cur_indicate = !!cur_indicate;
   21714:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
   21718:	3200      	adds	r2, #0
   2171a:	bf18      	it	ne
   2171c:	2201      	movne	r2, #1
   2171e:	f362 03c3 	bfi	r3, r2, #3, #1
   21722:	f88d 300d 	strb.w	r3, [sp, #13]
    ble_gap_event_listener_call(&event);
   21726:	a801      	add	r0, sp, #4
   21728:	f7fe fe56 	bl	203d8 <ble_gap_event_listener_call>
    ble_gap_call_conn_event_cb(&event, conn_handle);
   2172c:	4629      	mov	r1, r5
   2172e:	a801      	add	r0, sp, #4
   21730:	f7fe fe7c 	bl	2042c <ble_gap_call_conn_event_cb>
}
   21734:	b00f      	add	sp, #60	; 0x3c
   21736:	bdf0      	pop	{r4, r5, r6, r7, pc}

00021738 <ble_gap_mtu_event>:
{
   21738:	b570      	push	{r4, r5, r6, lr}
   2173a:	b08e      	sub	sp, #56	; 0x38
   2173c:	4604      	mov	r4, r0
   2173e:	460e      	mov	r6, r1
   21740:	4615      	mov	r5, r2
    memset(&event, 0, sizeof event);
   21742:	2234      	movs	r2, #52	; 0x34
   21744:	2100      	movs	r1, #0
   21746:	a801      	add	r0, sp, #4
   21748:	f7ed f952 	bl	e9f0 <memset>
    event.type = BLE_GAP_EVENT_MTU;
   2174c:	230f      	movs	r3, #15
   2174e:	f88d 3004 	strb.w	r3, [sp, #4]
    event.mtu.conn_handle = conn_handle;
   21752:	f8ad 4008 	strh.w	r4, [sp, #8]
    event.mtu.channel_id = cid;
   21756:	f8ad 600a 	strh.w	r6, [sp, #10]
    event.mtu.value = mtu;
   2175a:	f8ad 500c 	strh.w	r5, [sp, #12]
    ble_gap_event_listener_call(&event);
   2175e:	a801      	add	r0, sp, #4
   21760:	f7fe fe3a 	bl	203d8 <ble_gap_event_listener_call>
    ble_gap_call_conn_event_cb(&event, conn_handle);
   21764:	4621      	mov	r1, r4
   21766:	a801      	add	r0, sp, #4
   21768:	f7fe fe60 	bl	2042c <ble_gap_call_conn_event_cb>
}
   2176c:	b00e      	add	sp, #56	; 0x38
   2176e:	bd70      	pop	{r4, r5, r6, pc}

00021770 <ble_gap_preempt_no_lock>:
{
   21770:	b508      	push	{r3, lr}
    rc = ble_gap_adv_stop_no_lock();
   21772:	f7ff fbdf 	bl	20f34 <ble_gap_adv_stop_no_lock>
    if (rc == 0) {
   21776:	b920      	cbnz	r0, 21782 <ble_gap_preempt_no_lock+0x12>
        ble_gap_slave[0].preempted = 1;
   21778:	4a05      	ldr	r2, [pc, #20]	; (21790 <ble_gap_preempt_no_lock+0x20>)
   2177a:	7d53      	ldrb	r3, [r2, #21]
   2177c:	f043 0304 	orr.w	r3, r3, #4
   21780:	7553      	strb	r3, [r2, #21]
    rc = ble_gap_conn_cancel_no_lock();
   21782:	f7ff fc0d 	bl	20fa0 <ble_gap_conn_cancel_no_lock>
    if (rc == 0) {
   21786:	b910      	cbnz	r0, 2178e <ble_gap_preempt_no_lock+0x1e>
        ble_gap_master.preempted_op = BLE_GAP_OP_M_CONN;
   21788:	4b01      	ldr	r3, [pc, #4]	; (21790 <ble_gap_preempt_no_lock+0x20>)
   2178a:	2202      	movs	r2, #2
   2178c:	741a      	strb	r2, [r3, #16]
}
   2178e:	bd08      	pop	{r3, pc}
   21790:	20000558 	.word	0x20000558

00021794 <ble_gap_preempt>:
{
   21794:	b508      	push	{r3, lr}
    ble_hs_lock();
   21796:	f002 f973 	bl	23a80 <ble_hs_lock>
    if (!ble_gap_is_preempted()) {
   2179a:	f7fe fd57 	bl	2024c <ble_gap_is_preempted>
   2179e:	b110      	cbz	r0, 217a6 <ble_gap_preempt+0x12>
    ble_hs_unlock();
   217a0:	f002 f972 	bl	23a88 <ble_hs_unlock>
}
   217a4:	bd08      	pop	{r3, pc}
        ble_gap_preempt_no_lock();
   217a6:	f7ff ffe3 	bl	21770 <ble_gap_preempt_no_lock>
   217aa:	e7f9      	b.n	217a0 <ble_gap_preempt+0xc>

000217ac <ble_gap_preempt_done>:
{
   217ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   217ae:	b08f      	sub	sp, #60	; 0x3c
    return (ble_npl_error_t)os_mutex_pend(&mu->mu, timeout);
   217b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   217b4:	482b      	ldr	r0, [pc, #172]	; (21864 <ble_gap_preempt_done+0xb8>)
   217b6:	f7ec fff3 	bl	e7a0 <os_mutex_pend>
    memset(slaves, 0, sizeof(slaves));
   217ba:	4b2b      	ldr	r3, [pc, #172]	; (21868 <ble_gap_preempt_done+0xbc>)
   217bc:	2400      	movs	r4, #0
   217be:	601c      	str	r4, [r3, #0]
   217c0:	605c      	str	r4, [r3, #4]
    ble_hs_lock();
   217c2:	f002 f95d 	bl	23a80 <ble_hs_lock>
    for (i = 0; i < BLE_ADV_INSTANCES; i++) {
   217c6:	4623      	mov	r3, r4
   217c8:	2b00      	cmp	r3, #0
   217ca:	dd14      	ble.n	217f6 <ble_gap_preempt_done+0x4a>
    if (ble_gap_master.preempted_op == BLE_GAP_OP_M_DISC) {
   217cc:	4b27      	ldr	r3, [pc, #156]	; (2186c <ble_gap_preempt_done+0xc0>)
   217ce:	7c1b      	ldrb	r3, [r3, #16]
   217d0:	2b01      	cmp	r3, #1
   217d2:	d028      	beq.n	21826 <ble_gap_preempt_done+0x7a>
    disc_preempted = 0;
   217d4:	2700      	movs	r7, #0
    ble_hs_unlock();
   217d6:	f002 f957 	bl	23a88 <ble_hs_unlock>
    event.type = BLE_GAP_EVENT_ADV_COMPLETE;
   217da:	2309      	movs	r3, #9
   217dc:	f88d 3004 	strb.w	r3, [sp, #4]
    event.adv_complete.reason = BLE_HS_EPREEMPTED;
   217e0:	231d      	movs	r3, #29
   217e2:	9302      	str	r3, [sp, #8]
    for (i = 0; i < BLE_ADV_INSTANCES; i++) {
   217e4:	2400      	movs	r4, #0
   217e6:	2c00      	cmp	r4, #0
   217e8:	dd24      	ble.n	21834 <ble_gap_preempt_done+0x88>
    return (ble_npl_error_t)os_mutex_release(&mu->mu);
   217ea:	481e      	ldr	r0, [pc, #120]	; (21864 <ble_gap_preempt_done+0xb8>)
   217ec:	f7ec ff78 	bl	e6e0 <os_mutex_release>
    if (disc_preempted) {
   217f0:	bb67      	cbnz	r7, 2184c <ble_gap_preempt_done+0xa0>
}
   217f2:	b00f      	add	sp, #60	; 0x3c
   217f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (ble_gap_slave[i].preempted) {
   217f6:	4a1d      	ldr	r2, [pc, #116]	; (2186c <ble_gap_preempt_done+0xc0>)
   217f8:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   217fc:	7d52      	ldrb	r2, [r2, #21]
   217fe:	f012 0f04 	tst.w	r2, #4
   21802:	d00e      	beq.n	21822 <ble_gap_preempt_done+0x76>
            ble_gap_slave[i].preempted = 0;
   21804:	4a19      	ldr	r2, [pc, #100]	; (2186c <ble_gap_preempt_done+0xc0>)
   21806:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   2180a:	7d50      	ldrb	r0, [r2, #21]
   2180c:	f36f 0082 	bfc	r0, #2, #1
   21810:	7550      	strb	r0, [r2, #21]
            slaves[i].cb = ble_gap_slave[i].cb;
   21812:	69d0      	ldr	r0, [r2, #28]
   21814:	4914      	ldr	r1, [pc, #80]	; (21868 <ble_gap_preempt_done+0xbc>)
   21816:	f841 0033 	str.w	r0, [r1, r3, lsl #3]
            slaves[i].arg = ble_gap_slave[i].cb_arg;
   2181a:	6a12      	ldr	r2, [r2, #32]
   2181c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   21820:	604a      	str	r2, [r1, #4]
    for (i = 0; i < BLE_ADV_INSTANCES; i++) {
   21822:	3301      	adds	r3, #1
   21824:	e7d0      	b.n	217c8 <ble_gap_preempt_done+0x1c>
        ble_gap_master.preempted_op = BLE_GAP_OP_NULL;
   21826:	4b11      	ldr	r3, [pc, #68]	; (2186c <ble_gap_preempt_done+0xc0>)
   21828:	2200      	movs	r2, #0
   2182a:	741a      	strb	r2, [r3, #16]
        master_cb = ble_gap_master.cb;
   2182c:	689d      	ldr	r5, [r3, #8]
        master_arg = ble_gap_master.cb_arg;
   2182e:	68de      	ldr	r6, [r3, #12]
        disc_preempted = 1;
   21830:	2701      	movs	r7, #1
   21832:	e7d0      	b.n	217d6 <ble_gap_preempt_done+0x2a>
        if (slaves[i].cb) {
   21834:	4b0c      	ldr	r3, [pc, #48]	; (21868 <ble_gap_preempt_done+0xbc>)
   21836:	f853 1034 	ldr.w	r1, [r3, r4, lsl #3]
   2183a:	b129      	cbz	r1, 21848 <ble_gap_preempt_done+0x9c>
            ble_gap_call_event_cb(&event, slaves[i].cb, slaves[i].arg);
   2183c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   21840:	685a      	ldr	r2, [r3, #4]
   21842:	a801      	add	r0, sp, #4
   21844:	f7fe fcec 	bl	20220 <ble_gap_call_event_cb>
    for (i = 0; i < BLE_ADV_INSTANCES; i++) {
   21848:	3401      	adds	r4, #1
   2184a:	e7cc      	b.n	217e6 <ble_gap_preempt_done+0x3a>
        event.type = BLE_GAP_EVENT_DISC_COMPLETE;
   2184c:	2308      	movs	r3, #8
   2184e:	f88d 3004 	strb.w	r3, [sp, #4]
        event.disc_complete.reason = BLE_HS_EPREEMPTED;
   21852:	231d      	movs	r3, #29
   21854:	9302      	str	r3, [sp, #8]
        ble_gap_call_event_cb(&event, master_cb, master_arg);
   21856:	4632      	mov	r2, r6
   21858:	4629      	mov	r1, r5
   2185a:	a801      	add	r0, sp, #4
   2185c:	f7fe fce0 	bl	20220 <ble_gap_call_event_cb>
}
   21860:	e7c7      	b.n	217f2 <ble_gap_preempt_done+0x46>
   21862:	bf00      	nop
   21864:	200026dc 	.word	0x200026dc
   21868:	200026e8 	.word	0x200026e8
   2186c:	20000558 	.word	0x20000558

00021870 <ble_gap_event_listener_unregister>:
    SLIST_FOREACH(evl, &ble_gap_event_listener_list, link) {
   21870:	4b0c      	ldr	r3, [pc, #48]	; (218a4 <ble_gap_event_listener_unregister+0x34>)
   21872:	681a      	ldr	r2, [r3, #0]
   21874:	4613      	mov	r3, r2
   21876:	b11b      	cbz	r3, 21880 <ble_gap_event_listener_unregister+0x10>
        if (evl == listener) {
   21878:	4283      	cmp	r3, r0
   2187a:	d001      	beq.n	21880 <ble_gap_event_listener_unregister+0x10>
    SLIST_FOREACH(evl, &ble_gap_event_listener_list, link) {
   2187c:	689b      	ldr	r3, [r3, #8]
   2187e:	e7fa      	b.n	21876 <ble_gap_event_listener_unregister+0x6>
    if (!evl) {
   21880:	b173      	cbz	r3, 218a0 <ble_gap_event_listener_unregister+0x30>
        SLIST_REMOVE(&ble_gap_event_listener_list, listener,
   21882:	4282      	cmp	r2, r0
   21884:	d105      	bne.n	21892 <ble_gap_event_listener_unregister+0x22>
   21886:	6892      	ldr	r2, [r2, #8]
   21888:	4b06      	ldr	r3, [pc, #24]	; (218a4 <ble_gap_event_listener_unregister+0x34>)
   2188a:	601a      	str	r2, [r3, #0]
        rc = 0;
   2188c:	2000      	movs	r0, #0
   2188e:	4770      	bx	lr
        SLIST_REMOVE(&ble_gap_event_listener_list, listener,
   21890:	461a      	mov	r2, r3
   21892:	6893      	ldr	r3, [r2, #8]
   21894:	4283      	cmp	r3, r0
   21896:	d1fb      	bne.n	21890 <ble_gap_event_listener_unregister+0x20>
   21898:	689b      	ldr	r3, [r3, #8]
   2189a:	6093      	str	r3, [r2, #8]
        rc = 0;
   2189c:	2000      	movs	r0, #0
   2189e:	4770      	bx	lr
        rc = BLE_HS_ENOENT;
   218a0:	2005      	movs	r0, #5
}
   218a2:	4770      	bx	lr
   218a4:	200026a0 	.word	0x200026a0

000218a8 <ble_gap_init>:
 * $init                                                                     *
 *****************************************************************************/

int
ble_gap_init(void)
{
   218a8:	b510      	push	{r4, lr}
   218aa:	b082      	sub	sp, #8
    int rc;

    memset(&ble_gap_master, 0, sizeof(ble_gap_master));
   218ac:	4b15      	ldr	r3, [pc, #84]	; (21904 <ble_gap_init+0x5c>)
   218ae:	2400      	movs	r4, #0
   218b0:	601c      	str	r4, [r3, #0]
   218b2:	605c      	str	r4, [r3, #4]
   218b4:	609c      	str	r4, [r3, #8]
   218b6:	60dc      	str	r4, [r3, #12]
   218b8:	611c      	str	r4, [r3, #16]
    memset(ble_gap_slave, 0, sizeof(ble_gap_slave));
   218ba:	615c      	str	r4, [r3, #20]
   218bc:	619c      	str	r4, [r3, #24]
   218be:	61dc      	str	r4, [r3, #28]
   218c0:	621c      	str	r4, [r3, #32]
    return (ble_npl_error_t)os_mutex_init(&mu->mu);
   218c2:	4811      	ldr	r0, [pc, #68]	; (21908 <ble_gap_init+0x60>)
   218c4:	f7ec ff02 	bl	e6cc <os_mutex_init>
    memset(&ble_gap_sync, 0, sizeof(ble_gap_sync));
#endif

    ble_npl_mutex_init(&preempt_done_mutex);

    SLIST_INIT(&ble_gap_update_entries);
   218c8:	4b10      	ldr	r3, [pc, #64]	; (2190c <ble_gap_init+0x64>)
   218ca:	601c      	str	r4, [r3, #0]
    SLIST_INIT(&ble_gap_event_listener_list);
   218cc:	4b10      	ldr	r3, [pc, #64]	; (21910 <ble_gap_init+0x68>)
   218ce:	601c      	str	r4, [r3, #0]

    rc = os_mempool_init(&ble_gap_update_entry_pool,
   218d0:	4b10      	ldr	r3, [pc, #64]	; (21914 <ble_gap_init+0x6c>)
   218d2:	9300      	str	r3, [sp, #0]
   218d4:	4b10      	ldr	r3, [pc, #64]	; (21918 <ble_gap_init+0x70>)
   218d6:	2218      	movs	r2, #24
   218d8:	2101      	movs	r1, #1
   218da:	4810      	ldr	r0, [pc, #64]	; (2191c <ble_gap_init+0x74>)
   218dc:	f7ec f952 	bl	db84 <os_mempool_init>
                         MYNEWT_VAL(BLE_GAP_MAX_PENDING_CONN_PARAM_UPDATE),
                         sizeof (struct ble_gap_update_entry),
                         ble_gap_update_entry_mem,
                         "ble_gap_update");
    switch (rc) {
   218e0:	b120      	cbz	r0, 218ec <ble_gap_init+0x44>
   218e2:	2801      	cmp	r0, #1
   218e4:	d10c      	bne.n	21900 <ble_gap_init+0x58>
    case 0:
        break;
    case OS_ENOMEM:
        rc = BLE_HS_ENOMEM;
   218e6:	2006      	movs	r0, #6

    return 0;

err:
    return rc;
}
   218e8:	b002      	add	sp, #8
   218ea:	bd10      	pop	{r4, pc}
    rc = stats_init_and_reg(
   218ec:	4b0c      	ldr	r3, [pc, #48]	; (21920 <ble_gap_init+0x78>)
   218ee:	9301      	str	r3, [sp, #4]
   218f0:	2300      	movs	r3, #0
   218f2:	9300      	str	r3, [sp, #0]
   218f4:	221f      	movs	r2, #31
   218f6:	2104      	movs	r1, #4
   218f8:	480a      	ldr	r0, [pc, #40]	; (21924 <ble_gap_init+0x7c>)
   218fa:	f7f0 fc6f 	bl	121dc <stats_init_and_reg>
err:
   218fe:	e7f3      	b.n	218e8 <ble_gap_init+0x40>
        rc = BLE_HS_EOS;
   21900:	200b      	movs	r0, #11
   21902:	e7f1      	b.n	218e8 <ble_gap_init+0x40>
   21904:	20000558 	.word	0x20000558
   21908:	200026dc 	.word	0x200026dc
   2190c:	200026a4 	.word	0x200026a4
   21910:	200026a0 	.word	0x200026a0
   21914:	00032010 	.word	0x00032010
   21918:	200026a8 	.word	0x200026a8
   2191c:	200026c0 	.word	0x200026c0
   21920:	00032020 	.word	0x00032020
   21924:	20003f64 	.word	0x20003f64

00021928 <ble_gattc_err_dispatch_get>:
static ble_gattc_err_fn *
ble_gattc_err_dispatch_get(uint8_t op)
{
    BLE_HS_DBG_ASSERT(op < BLE_GATT_OP_CNT);
    return ble_gattc_err_dispatch[op];
}
   21928:	4b01      	ldr	r3, [pc, #4]	; (21930 <ble_gattc_err_dispatch_get+0x8>)
   2192a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   2192e:	4770      	bx	lr
   21930:	00032254 	.word	0x00032254

00021934 <ble_gattc_resume_dispatch_get>:
static ble_gattc_resume_fn *
ble_gattc_resume_dispatch_get(uint8_t op)
{
    BLE_HS_DBG_ASSERT(op < BLE_GATT_OP_CNT);
    return ble_gattc_resume_dispatch[op];
}
   21934:	4b01      	ldr	r3, [pc, #4]	; (2193c <ble_gattc_resume_dispatch_get+0x8>)
   21936:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   2193a:	4770      	bx	lr
   2193c:	000322f8 	.word	0x000322f8

00021940 <ble_gattc_tmo_dispatch_get>:
static ble_gattc_tmo_fn *
ble_gattc_tmo_dispatch_get(uint8_t op)
{
    BLE_HS_DBG_ASSERT(op < BLE_GATT_OP_CNT);
    return ble_gattc_tmo_dispatch[op];
}
   21940:	4b01      	ldr	r3, [pc, #4]	; (21948 <ble_gattc_tmo_dispatch_get+0x8>)
   21942:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   21946:	4770      	bx	lr
   21948:	00032334 	.word	0x00032334

0002194c <ble_gattc_proc_matches_conn_op>:
{
    const struct ble_gattc_criteria_conn_op *criteria;

    criteria = arg;

    if (criteria->conn_handle != proc->conn_handle) {
   2194c:	880a      	ldrh	r2, [r1, #0]
   2194e:	8903      	ldrh	r3, [r0, #8]
   21950:	429a      	cmp	r2, r3
   21952:	d001      	beq.n	21958 <ble_gattc_proc_matches_conn_op+0xc>
        return 0;
   21954:	2000      	movs	r0, #0
   21956:	4770      	bx	lr
    }

    if (criteria->op != proc->op && criteria->op != BLE_GATT_OP_NONE) {
   21958:	788b      	ldrb	r3, [r1, #2]
   2195a:	7a82      	ldrb	r2, [r0, #10]
   2195c:	4293      	cmp	r3, r2
   2195e:	d005      	beq.n	2196c <ble_gattc_proc_matches_conn_op+0x20>
   21960:	2bff      	cmp	r3, #255	; 0xff
   21962:	d001      	beq.n	21968 <ble_gattc_proc_matches_conn_op+0x1c>
        return 0;
   21964:	2000      	movs	r0, #0
    }

    return 1;
}
   21966:	4770      	bx	lr
    return 1;
   21968:	2001      	movs	r0, #1
   2196a:	4770      	bx	lr
   2196c:	2001      	movs	r0, #1
   2196e:	4770      	bx	lr

00021970 <ble_gattc_proc_matches_expired>:
    struct ble_gattc_criteria_exp *criteria;
    int32_t time_diff;

    criteria = arg;

    time_diff = proc->exp_os_ticks - criteria->now;
   21970:	6843      	ldr	r3, [r0, #4]
   21972:	680a      	ldr	r2, [r1, #0]
   21974:	1a9b      	subs	r3, r3, r2

    if (time_diff <= 0) {
   21976:	2b00      	cmp	r3, #0
   21978:	dd05      	ble.n	21986 <ble_gattc_proc_matches_expired+0x16>
        /* Procedure is expired. */
        return 1;
    }

    /* Procedure isn't expired; determine if it is the next to expire. */
    if (time_diff < criteria->next_exp_in) {
   2197a:	684a      	ldr	r2, [r1, #4]
   2197c:	429a      	cmp	r2, r3
   2197e:	dd04      	ble.n	2198a <ble_gattc_proc_matches_expired+0x1a>
        criteria->next_exp_in = time_diff;
   21980:	604b      	str	r3, [r1, #4]
    }
    return 0;
   21982:	2000      	movs	r0, #0
   21984:	4770      	bx	lr
        return 1;
   21986:	2001      	movs	r0, #1
   21988:	4770      	bx	lr
    return 0;
   2198a:	2000      	movs	r0, #0
}
   2198c:	4770      	bx	lr

0002198e <ble_gattc_proc_matches_stalled>:
}

static int
ble_gattc_proc_matches_stalled(struct ble_gattc_proc *proc, void *unused)
{
    return proc->flags & BLE_GATTC_PROC_F_STALLED;
   2198e:	7ac0      	ldrb	r0, [r0, #11]
}
   21990:	f000 0001 	and.w	r0, r0, #1
   21994:	4770      	bx	lr

00021996 <ble_gattc_proc_timeout>:
    return diff;
}

static void
ble_gattc_proc_timeout(struct ble_gattc_proc *proc)
{
   21996:	b510      	push	{r4, lr}
   21998:	4604      	mov	r4, r0
    ble_gattc_tmo_fn *cb;

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    cb = ble_gattc_tmo_dispatch_get(proc->op);
   2199a:	7a80      	ldrb	r0, [r0, #10]
   2199c:	f7ff ffd0 	bl	21940 <ble_gattc_tmo_dispatch_get>
    if (cb != NULL) {
   219a0:	b110      	cbz	r0, 219a8 <ble_gattc_proc_timeout+0x12>
   219a2:	4603      	mov	r3, r0
        cb(proc);
   219a4:	4620      	mov	r0, r4
   219a6:	4798      	blx	r3
    }
}
   219a8:	bd10      	pop	{r4, pc}
	...

000219ac <ble_gattc_error>:
ble_gattc_error(int status, uint16_t att_handle)
{
    static struct ble_gatt_error error;

    /* For consistency, always indicate a handle of 0 on success. */
    if (status == 0 || status == BLE_HS_EDONE) {
   219ac:	4603      	mov	r3, r0
   219ae:	b118      	cbz	r0, 219b8 <ble_gattc_error+0xc>
   219b0:	280e      	cmp	r0, #14
   219b2:	d102      	bne.n	219ba <ble_gattc_error+0xe>
        att_handle = 0;
   219b4:	2100      	movs	r1, #0
   219b6:	e000      	b.n	219ba <ble_gattc_error+0xe>
   219b8:	2100      	movs	r1, #0
    }

    error.status = status;
   219ba:	4802      	ldr	r0, [pc, #8]	; (219c4 <ble_gattc_error+0x18>)
   219bc:	8003      	strh	r3, [r0, #0]
    error.att_handle = att_handle;
   219be:	8041      	strh	r1, [r0, #2]
    return &error;
}
   219c0:	4770      	bx	lr
   219c2:	bf00      	nop
   219c4:	200027f8 	.word	0x200027f8

000219c8 <ble_gattc_mtu_cb>:
 *                                  is no callback).
 */
static int
ble_gattc_mtu_cb(struct ble_gattc_proc *proc, int status, uint16_t att_handle,
                 uint16_t mtu)
{
   219c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    int rc;

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status != 0 && status != BLE_HS_EDONE) {
   219cc:	460c      	mov	r4, r1
   219ce:	b129      	cbz	r1, 219dc <ble_gattc_mtu_cb+0x14>
   219d0:	290e      	cmp	r1, #14
   219d2:	d003      	beq.n	219dc <ble_gattc_mtu_cb+0x14>
        STATS_INC(ble_gattc_stats, mtu_fail);
   219d4:	4d0b      	ldr	r5, [pc, #44]	; (21a04 <ble_gattc_mtu_cb+0x3c>)
   219d6:	6929      	ldr	r1, [r5, #16]
   219d8:	3101      	adds	r1, #1
   219da:	6129      	str	r1, [r5, #16]
    }

    if (proc->mtu.cb == NULL) {
   219dc:	68c7      	ldr	r7, [r0, #12]
   219de:	b17f      	cbz	r7, 21a00 <ble_gattc_mtu_cb+0x38>
   219e0:	4625      	mov	r5, r4
   219e2:	461e      	mov	r6, r3
   219e4:	4611      	mov	r1, r2
   219e6:	4604      	mov	r4, r0
        rc = 0;
    } else {
        rc = proc->mtu.cb(proc->conn_handle,
   219e8:	f8b0 8008 	ldrh.w	r8, [r0, #8]
                          ble_gattc_error(status, att_handle),
   219ec:	4628      	mov	r0, r5
   219ee:	f7ff ffdd 	bl	219ac <ble_gattc_error>
        rc = proc->mtu.cb(proc->conn_handle,
   219f2:	6923      	ldr	r3, [r4, #16]
   219f4:	4632      	mov	r2, r6
   219f6:	4601      	mov	r1, r0
   219f8:	4640      	mov	r0, r8
   219fa:	47b8      	blx	r7
                          mtu, proc->mtu.cb_arg);
    }

    return rc;
}
   219fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = 0;
   21a00:	2000      	movs	r0, #0
    return rc;
   21a02:	e7fb      	b.n	219fc <ble_gattc_mtu_cb+0x34>
   21a04:	20003fec 	.word	0x20003fec

00021a08 <ble_gattc_mtu_tmo>:

static void
ble_gattc_mtu_tmo(struct ble_gattc_proc *proc)
{
   21a08:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_mtu_cb(proc, BLE_HS_ETIMEOUT, 0, 0);
   21a0a:	2300      	movs	r3, #0
   21a0c:	461a      	mov	r2, r3
   21a0e:	210d      	movs	r1, #13
   21a10:	f7ff ffda 	bl	219c8 <ble_gattc_mtu_cb>
}
   21a14:	bd08      	pop	{r3, pc}

00021a16 <ble_gattc_mtu_err>:
/**
 * Handles an incoming ATT error response for the specified mtu-exchange proc.
 */
static void
ble_gattc_mtu_err(struct ble_gattc_proc *proc, int status, uint16_t att_handle)
{
   21a16:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);
    ble_gattc_mtu_cb(proc, status, att_handle, 0);
   21a18:	2300      	movs	r3, #0
   21a1a:	f7ff ffd5 	bl	219c8 <ble_gattc_mtu_cb>
}
   21a1e:	bd08      	pop	{r3, pc}

00021a20 <ble_gattc_disc_all_svcs_cb>:
 */
static int
ble_gattc_disc_all_svcs_cb(struct ble_gattc_proc *proc,
                           uint16_t status, uint16_t att_handle,
                           struct ble_gatt_svc *service)
{
   21a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    BLE_HS_DBG_ASSERT(service != NULL || status != 0);
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status != 0 && status != BLE_HS_EDONE) {
   21a24:	460c      	mov	r4, r1
   21a26:	b129      	cbz	r1, 21a34 <ble_gattc_disc_all_svcs_cb+0x14>
   21a28:	290e      	cmp	r1, #14
   21a2a:	d003      	beq.n	21a34 <ble_gattc_disc_all_svcs_cb+0x14>
        STATS_INC(ble_gattc_stats, disc_all_svcs_fail);
   21a2c:	4d0b      	ldr	r5, [pc, #44]	; (21a5c <ble_gattc_disc_all_svcs_cb+0x3c>)
   21a2e:	69a9      	ldr	r1, [r5, #24]
   21a30:	3101      	adds	r1, #1
   21a32:	61a9      	str	r1, [r5, #24]
    }

    if (proc->disc_all_svcs.cb == NULL) {
   21a34:	6907      	ldr	r7, [r0, #16]
   21a36:	b17f      	cbz	r7, 21a58 <ble_gattc_disc_all_svcs_cb+0x38>
   21a38:	4625      	mov	r5, r4
   21a3a:	461e      	mov	r6, r3
   21a3c:	4611      	mov	r1, r2
   21a3e:	4604      	mov	r4, r0
        rc = 0;
    } else {
        rc = proc->disc_all_svcs.cb(proc->conn_handle,
   21a40:	f8b0 8008 	ldrh.w	r8, [r0, #8]
                                    ble_gattc_error(status, att_handle),
   21a44:	4628      	mov	r0, r5
   21a46:	f7ff ffb1 	bl	219ac <ble_gattc_error>
        rc = proc->disc_all_svcs.cb(proc->conn_handle,
   21a4a:	6963      	ldr	r3, [r4, #20]
   21a4c:	4632      	mov	r2, r6
   21a4e:	4601      	mov	r1, r0
   21a50:	4640      	mov	r0, r8
   21a52:	47b8      	blx	r7
                                    service, proc->disc_all_svcs.cb_arg);
    }

    return rc;
}
   21a54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = 0;
   21a58:	2000      	movs	r0, #0
    return rc;
   21a5a:	e7fb      	b.n	21a54 <ble_gattc_disc_all_svcs_cb+0x34>
   21a5c:	20003fec 	.word	0x20003fec

00021a60 <ble_gattc_disc_all_svcs_tmo>:

static void
ble_gattc_disc_all_svcs_tmo(struct ble_gattc_proc *proc)
{
   21a60:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_disc_all_svcs_cb(proc, BLE_HS_ETIMEOUT, 0, 0);
   21a62:	2300      	movs	r3, #0
   21a64:	461a      	mov	r2, r3
   21a66:	210d      	movs	r1, #13
   21a68:	f7ff ffda 	bl	21a20 <ble_gattc_disc_all_svcs_cb>
}
   21a6c:	bd08      	pop	{r3, pc}

00021a6e <ble_gattc_disc_all_svcs_err>:
 * discover-all-services proc.
 */
static void
ble_gattc_disc_all_svcs_err(struct ble_gattc_proc *proc, int status,
                            uint16_t att_handle)
{
   21a6e:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status == BLE_HS_ATT_ERR(BLE_ATT_ERR_ATTR_NOT_FOUND)) {
   21a70:	f5b1 7f85 	cmp.w	r1, #266	; 0x10a
   21a74:	d004      	beq.n	21a80 <ble_gattc_disc_all_svcs_err+0x12>
        /* Discovery is complete. */
        status = BLE_HS_EDONE;
    }

    ble_gattc_disc_all_svcs_cb(proc, status, att_handle, NULL);
   21a76:	2300      	movs	r3, #0
   21a78:	b289      	uxth	r1, r1
   21a7a:	f7ff ffd1 	bl	21a20 <ble_gattc_disc_all_svcs_cb>
}
   21a7e:	bd08      	pop	{r3, pc}
        status = BLE_HS_EDONE;
   21a80:	210e      	movs	r1, #14
   21a82:	e7f8      	b.n	21a76 <ble_gattc_disc_all_svcs_err+0x8>

00021a84 <ble_gattc_disc_svc_uuid_cb>:
 */
static int
ble_gattc_disc_svc_uuid_cb(struct ble_gattc_proc *proc, int status,
                           uint16_t att_handle,
                           struct ble_gatt_svc *service)
{
   21a84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    BLE_HS_DBG_ASSERT(service != NULL || status != 0);
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status != 0 && status != BLE_HS_EDONE) {
   21a88:	460c      	mov	r4, r1
   21a8a:	b129      	cbz	r1, 21a98 <ble_gattc_disc_svc_uuid_cb+0x14>
   21a8c:	290e      	cmp	r1, #14
   21a8e:	d003      	beq.n	21a98 <ble_gattc_disc_svc_uuid_cb+0x14>
        STATS_INC(ble_gattc_stats, disc_svc_uuid_fail);
   21a90:	4d0b      	ldr	r5, [pc, #44]	; (21ac0 <ble_gattc_disc_svc_uuid_cb+0x3c>)
   21a92:	6a29      	ldr	r1, [r5, #32]
   21a94:	3101      	adds	r1, #1
   21a96:	6229      	str	r1, [r5, #32]
    }

    if (proc->disc_svc_uuid.cb == NULL) {
   21a98:	6a47      	ldr	r7, [r0, #36]	; 0x24
   21a9a:	b17f      	cbz	r7, 21abc <ble_gattc_disc_svc_uuid_cb+0x38>
   21a9c:	4625      	mov	r5, r4
   21a9e:	461e      	mov	r6, r3
   21aa0:	4611      	mov	r1, r2
   21aa2:	4604      	mov	r4, r0
        rc = 0;
    } else {
        rc = proc->disc_svc_uuid.cb(proc->conn_handle,
   21aa4:	f8b0 8008 	ldrh.w	r8, [r0, #8]
                                    ble_gattc_error(status, att_handle),
   21aa8:	4628      	mov	r0, r5
   21aaa:	f7ff ff7f 	bl	219ac <ble_gattc_error>
        rc = proc->disc_svc_uuid.cb(proc->conn_handle,
   21aae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   21ab0:	4632      	mov	r2, r6
   21ab2:	4601      	mov	r1, r0
   21ab4:	4640      	mov	r0, r8
   21ab6:	47b8      	blx	r7
                                    service, proc->disc_svc_uuid.cb_arg);
    }

    return rc;
}
   21ab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = 0;
   21abc:	2000      	movs	r0, #0
    return rc;
   21abe:	e7fb      	b.n	21ab8 <ble_gattc_disc_svc_uuid_cb+0x34>
   21ac0:	20003fec 	.word	0x20003fec

00021ac4 <ble_gattc_disc_svc_uuid_tmo>:

static void
ble_gattc_disc_svc_uuid_tmo(struct ble_gattc_proc *proc)
{
   21ac4:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_disc_svc_uuid_cb(proc, BLE_HS_ETIMEOUT, 0, 0);
   21ac6:	2300      	movs	r3, #0
   21ac8:	461a      	mov	r2, r3
   21aca:	210d      	movs	r1, #13
   21acc:	f7ff ffda 	bl	21a84 <ble_gattc_disc_svc_uuid_cb>
}
   21ad0:	bd08      	pop	{r3, pc}

00021ad2 <ble_gattc_disc_svc_uuid_err>:
 * discover-service-by-uuid proc.
 */
static void
ble_gattc_disc_svc_uuid_err(struct ble_gattc_proc *proc, int status,
                            uint16_t att_handle)
{
   21ad2:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status == BLE_HS_ATT_ERR(BLE_ATT_ERR_ATTR_NOT_FOUND)) {
   21ad4:	f5b1 7f85 	cmp.w	r1, #266	; 0x10a
   21ad8:	d003      	beq.n	21ae2 <ble_gattc_disc_svc_uuid_err+0x10>
        /* Discovery is complete. */
        status = BLE_HS_EDONE;
    }

    ble_gattc_disc_svc_uuid_cb(proc, status, att_handle, NULL);
   21ada:	2300      	movs	r3, #0
   21adc:	f7ff ffd2 	bl	21a84 <ble_gattc_disc_svc_uuid_cb>
}
   21ae0:	bd08      	pop	{r3, pc}
        status = BLE_HS_EDONE;
   21ae2:	210e      	movs	r1, #14
   21ae4:	e7f9      	b.n	21ada <ble_gattc_disc_svc_uuid_err+0x8>
	...

00021ae8 <ble_gattc_find_inc_svcs_cb>:
 */
static int
ble_gattc_find_inc_svcs_cb(struct ble_gattc_proc *proc, int status,
                           uint16_t att_handle,
                           struct ble_gatt_svc *service)
{
   21ae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    BLE_HS_DBG_ASSERT(service != NULL || status != 0);
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status != 0 && status != BLE_HS_EDONE) {
   21aec:	460c      	mov	r4, r1
   21aee:	b129      	cbz	r1, 21afc <ble_gattc_find_inc_svcs_cb+0x14>
   21af0:	290e      	cmp	r1, #14
   21af2:	d003      	beq.n	21afc <ble_gattc_find_inc_svcs_cb+0x14>
        STATS_INC(ble_gattc_stats, find_inc_svcs_fail);
   21af4:	4d0b      	ldr	r5, [pc, #44]	; (21b24 <ble_gattc_find_inc_svcs_cb+0x3c>)
   21af6:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   21af8:	3101      	adds	r1, #1
   21afa:	62a9      	str	r1, [r5, #40]	; 0x28
    }

    if (proc->find_inc_svcs.cb == NULL) {
   21afc:	6947      	ldr	r7, [r0, #20]
   21afe:	b17f      	cbz	r7, 21b20 <ble_gattc_find_inc_svcs_cb+0x38>
   21b00:	4625      	mov	r5, r4
   21b02:	461e      	mov	r6, r3
   21b04:	4611      	mov	r1, r2
   21b06:	4604      	mov	r4, r0
        rc = 0;
    } else {
        rc = proc->find_inc_svcs.cb(proc->conn_handle,
   21b08:	f8b0 8008 	ldrh.w	r8, [r0, #8]
                                    ble_gattc_error(status, att_handle),
   21b0c:	4628      	mov	r0, r5
   21b0e:	f7ff ff4d 	bl	219ac <ble_gattc_error>
        rc = proc->find_inc_svcs.cb(proc->conn_handle,
   21b12:	69a3      	ldr	r3, [r4, #24]
   21b14:	4632      	mov	r2, r6
   21b16:	4601      	mov	r1, r0
   21b18:	4640      	mov	r0, r8
   21b1a:	47b8      	blx	r7
                                    service, proc->find_inc_svcs.cb_arg);
    }

    return rc;
}
   21b1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = 0;
   21b20:	2000      	movs	r0, #0
    return rc;
   21b22:	e7fb      	b.n	21b1c <ble_gattc_find_inc_svcs_cb+0x34>
   21b24:	20003fec 	.word	0x20003fec

00021b28 <ble_gattc_find_inc_svcs_tmo>:

static void
ble_gattc_find_inc_svcs_tmo(struct ble_gattc_proc *proc)
{
   21b28:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_find_inc_svcs_cb(proc, BLE_HS_ETIMEOUT, 0, 0);
   21b2a:	2300      	movs	r3, #0
   21b2c:	461a      	mov	r2, r3
   21b2e:	210d      	movs	r1, #13
   21b30:	f7ff ffda 	bl	21ae8 <ble_gattc_find_inc_svcs_cb>
}
   21b34:	bd08      	pop	{r3, pc}

00021b36 <ble_gattc_find_inc_svcs_err>:
 * find-included-services proc.
 */
static void
ble_gattc_find_inc_svcs_err(struct ble_gattc_proc *proc, int status,
                            uint16_t att_handle)
{
   21b36:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (proc->find_inc_svcs.cur_start == 0 &&
   21b38:	8a03      	ldrh	r3, [r0, #16]
   21b3a:	b913      	cbnz	r3, 21b42 <ble_gattc_find_inc_svcs_err+0xc>
   21b3c:	f5b1 7f85 	cmp.w	r1, #266	; 0x10a
   21b40:	d003      	beq.n	21b4a <ble_gattc_find_inc_svcs_err+0x14>

        /* Discovery is complete. */
        status = BLE_HS_EDONE;
    }

    ble_gattc_find_inc_svcs_cb(proc, status, att_handle, NULL);
   21b42:	2300      	movs	r3, #0
   21b44:	f7ff ffd0 	bl	21ae8 <ble_gattc_find_inc_svcs_cb>
}
   21b48:	bd08      	pop	{r3, pc}
        status = BLE_HS_EDONE;
   21b4a:	210e      	movs	r1, #14
   21b4c:	e7f9      	b.n	21b42 <ble_gattc_find_inc_svcs_err+0xc>
	...

00021b50 <ble_gattc_disc_all_chrs_cb>:
 *                                  is no callback).
 */
static int
ble_gattc_disc_all_chrs_cb(struct ble_gattc_proc *proc, int status,
                           uint16_t att_handle, struct ble_gatt_chr *chr)
{
   21b50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    BLE_HS_DBG_ASSERT(chr != NULL || status != 0);
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status != 0 && status != BLE_HS_EDONE) {
   21b54:	460c      	mov	r4, r1
   21b56:	b129      	cbz	r1, 21b64 <ble_gattc_disc_all_chrs_cb+0x14>
   21b58:	290e      	cmp	r1, #14
   21b5a:	d003      	beq.n	21b64 <ble_gattc_disc_all_chrs_cb+0x14>
        STATS_INC(ble_gattc_stats, disc_all_chrs_fail);
   21b5c:	4d0b      	ldr	r5, [pc, #44]	; (21b8c <ble_gattc_disc_all_chrs_cb+0x3c>)
   21b5e:	6b29      	ldr	r1, [r5, #48]	; 0x30
   21b60:	3101      	adds	r1, #1
   21b62:	6329      	str	r1, [r5, #48]	; 0x30
    }

    if (proc->disc_all_chrs.cb == NULL) {
   21b64:	6907      	ldr	r7, [r0, #16]
   21b66:	b17f      	cbz	r7, 21b88 <ble_gattc_disc_all_chrs_cb+0x38>
   21b68:	4625      	mov	r5, r4
   21b6a:	461e      	mov	r6, r3
   21b6c:	4611      	mov	r1, r2
   21b6e:	4604      	mov	r4, r0
        rc = 0;
    } else {
        rc = proc->disc_all_chrs.cb(proc->conn_handle,
   21b70:	f8b0 8008 	ldrh.w	r8, [r0, #8]
                                    ble_gattc_error(status, att_handle), chr,
   21b74:	4628      	mov	r0, r5
   21b76:	f7ff ff19 	bl	219ac <ble_gattc_error>
        rc = proc->disc_all_chrs.cb(proc->conn_handle,
   21b7a:	6963      	ldr	r3, [r4, #20]
   21b7c:	4632      	mov	r2, r6
   21b7e:	4601      	mov	r1, r0
   21b80:	4640      	mov	r0, r8
   21b82:	47b8      	blx	r7
                                    proc->disc_all_chrs.cb_arg);
    }

    return rc;
}
   21b84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = 0;
   21b88:	2000      	movs	r0, #0
    return rc;
   21b8a:	e7fb      	b.n	21b84 <ble_gattc_disc_all_chrs_cb+0x34>
   21b8c:	20003fec 	.word	0x20003fec

00021b90 <ble_gattc_disc_all_chrs_tmo>:

static void
ble_gattc_disc_all_chrs_tmo(struct ble_gattc_proc *proc)
{
   21b90:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_disc_all_chrs_cb(proc, BLE_HS_ETIMEOUT, 0, NULL);
   21b92:	2300      	movs	r3, #0
   21b94:	461a      	mov	r2, r3
   21b96:	210d      	movs	r1, #13
   21b98:	f7ff ffda 	bl	21b50 <ble_gattc_disc_all_chrs_cb>
}
   21b9c:	bd08      	pop	{r3, pc}

00021b9e <ble_gattc_disc_all_chrs_err>:
 * discover-all-characteristics proc.
 */
static void
ble_gattc_disc_all_chrs_err(struct ble_gattc_proc *proc, int status,
                            uint16_t att_handle)
{
   21b9e:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status == BLE_HS_ATT_ERR(BLE_ATT_ERR_ATTR_NOT_FOUND)) {
   21ba0:	f5b1 7f85 	cmp.w	r1, #266	; 0x10a
   21ba4:	d003      	beq.n	21bae <ble_gattc_disc_all_chrs_err+0x10>
        /* Discovery is complete. */
        status = BLE_HS_EDONE;
    }

    ble_gattc_disc_all_chrs_cb(proc, status, att_handle, NULL);
   21ba6:	2300      	movs	r3, #0
   21ba8:	f7ff ffd2 	bl	21b50 <ble_gattc_disc_all_chrs_cb>
}
   21bac:	bd08      	pop	{r3, pc}
        status = BLE_HS_EDONE;
   21bae:	210e      	movs	r1, #14
   21bb0:	e7f9      	b.n	21ba6 <ble_gattc_disc_all_chrs_err+0x8>
	...

00021bb4 <ble_gattc_disc_chr_uuid_cb>:
 *                                  is no callback).
 */
static int
ble_gattc_disc_chr_uuid_cb(struct ble_gattc_proc *proc, int status,
                           uint16_t att_handle, struct ble_gatt_chr *chr)
{
   21bb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    BLE_HS_DBG_ASSERT(chr != NULL || status != 0);
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status != 0 && status != BLE_HS_EDONE) {
   21bb8:	460c      	mov	r4, r1
   21bba:	b129      	cbz	r1, 21bc8 <ble_gattc_disc_chr_uuid_cb+0x14>
   21bbc:	290e      	cmp	r1, #14
   21bbe:	d003      	beq.n	21bc8 <ble_gattc_disc_chr_uuid_cb+0x14>
        STATS_INC(ble_gattc_stats, disc_chrs_uuid_fail);
   21bc0:	4d0b      	ldr	r5, [pc, #44]	; (21bf0 <ble_gattc_disc_chr_uuid_cb+0x3c>)
   21bc2:	6ba9      	ldr	r1, [r5, #56]	; 0x38
   21bc4:	3101      	adds	r1, #1
   21bc6:	63a9      	str	r1, [r5, #56]	; 0x38
    }

    if (proc->disc_chr_uuid.cb == NULL) {
   21bc8:	6a47      	ldr	r7, [r0, #36]	; 0x24
   21bca:	b17f      	cbz	r7, 21bec <ble_gattc_disc_chr_uuid_cb+0x38>
   21bcc:	4625      	mov	r5, r4
   21bce:	461e      	mov	r6, r3
   21bd0:	4611      	mov	r1, r2
   21bd2:	4604      	mov	r4, r0
        rc = 0;
    } else {
        rc = proc->disc_chr_uuid.cb(proc->conn_handle,
   21bd4:	f8b0 8008 	ldrh.w	r8, [r0, #8]
                                    ble_gattc_error(status, att_handle), chr,
   21bd8:	4628      	mov	r0, r5
   21bda:	f7ff fee7 	bl	219ac <ble_gattc_error>
        rc = proc->disc_chr_uuid.cb(proc->conn_handle,
   21bde:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   21be0:	4632      	mov	r2, r6
   21be2:	4601      	mov	r1, r0
   21be4:	4640      	mov	r0, r8
   21be6:	47b8      	blx	r7
                                    proc->disc_chr_uuid.cb_arg);
    }

    return rc;
}
   21be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = 0;
   21bec:	2000      	movs	r0, #0
    return rc;
   21bee:	e7fb      	b.n	21be8 <ble_gattc_disc_chr_uuid_cb+0x34>
   21bf0:	20003fec 	.word	0x20003fec

00021bf4 <ble_gattc_disc_chr_uuid_tmo>:

static void
ble_gattc_disc_chr_uuid_tmo(struct ble_gattc_proc *proc)
{
   21bf4:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_disc_chr_uuid_cb(proc, BLE_HS_ETIMEOUT, 0, NULL);
   21bf6:	2300      	movs	r3, #0
   21bf8:	461a      	mov	r2, r3
   21bfa:	210d      	movs	r1, #13
   21bfc:	f7ff ffda 	bl	21bb4 <ble_gattc_disc_chr_uuid_cb>
}
   21c00:	bd08      	pop	{r3, pc}

00021c02 <ble_gattc_disc_chr_uuid_err>:
 * discover-characteristic-by-uuid proc.
 */
static void
ble_gattc_disc_chr_uuid_err(struct ble_gattc_proc *proc, int status,
                            uint16_t att_handle)
{
   21c02:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status == BLE_HS_ATT_ERR(BLE_ATT_ERR_ATTR_NOT_FOUND)) {
   21c04:	f5b1 7f85 	cmp.w	r1, #266	; 0x10a
   21c08:	d003      	beq.n	21c12 <ble_gattc_disc_chr_uuid_err+0x10>
        /* Discovery is complete. */
        status = BLE_HS_EDONE;
    }

    ble_gattc_disc_chr_uuid_cb(proc, status, att_handle, NULL);
   21c0a:	2300      	movs	r3, #0
   21c0c:	f7ff ffd2 	bl	21bb4 <ble_gattc_disc_chr_uuid_cb>
}
   21c10:	bd08      	pop	{r3, pc}
        status = BLE_HS_EDONE;
   21c12:	210e      	movs	r1, #14
   21c14:	e7f9      	b.n	21c0a <ble_gattc_disc_chr_uuid_err+0x8>
	...

00021c18 <ble_gattc_disc_all_dscs_cb>:
 *                                  is no callback).
 */
static int
ble_gattc_disc_all_dscs_cb(struct ble_gattc_proc *proc, int status,
                           uint16_t att_handle, struct ble_gatt_dsc *dsc)
{
   21c18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21c1c:	b082      	sub	sp, #8

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    BLE_HS_DBG_ASSERT(dsc != NULL || status != 0);
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status != 0 && status != BLE_HS_EDONE) {
   21c1e:	460c      	mov	r4, r1
   21c20:	b129      	cbz	r1, 21c2e <ble_gattc_disc_all_dscs_cb+0x16>
   21c22:	290e      	cmp	r1, #14
   21c24:	d003      	beq.n	21c2e <ble_gattc_disc_all_dscs_cb+0x16>
        STATS_INC(ble_gattc_stats, disc_all_dscs_fail);
   21c26:	4d0d      	ldr	r5, [pc, #52]	; (21c5c <ble_gattc_disc_all_dscs_cb+0x44>)
   21c28:	6c29      	ldr	r1, [r5, #64]	; 0x40
   21c2a:	3101      	adds	r1, #1
   21c2c:	6429      	str	r1, [r5, #64]	; 0x40
    }

    if (proc->disc_all_dscs.cb == NULL) {
   21c2e:	6946      	ldr	r6, [r0, #20]
   21c30:	b196      	cbz	r6, 21c58 <ble_gattc_disc_all_dscs_cb+0x40>
   21c32:	4625      	mov	r5, r4
   21c34:	461f      	mov	r7, r3
   21c36:	4611      	mov	r1, r2
   21c38:	4604      	mov	r4, r0
        rc = 0;
    } else {
        rc = proc->disc_all_dscs.cb(proc->conn_handle,
   21c3a:	f8b0 8008 	ldrh.w	r8, [r0, #8]
                                    ble_gattc_error(status, att_handle),
   21c3e:	4628      	mov	r0, r5
   21c40:	f7ff feb4 	bl	219ac <ble_gattc_error>
        rc = proc->disc_all_dscs.cb(proc->conn_handle,
   21c44:	89a2      	ldrh	r2, [r4, #12]
   21c46:	69a3      	ldr	r3, [r4, #24]
   21c48:	9300      	str	r3, [sp, #0]
   21c4a:	463b      	mov	r3, r7
   21c4c:	4601      	mov	r1, r0
   21c4e:	4640      	mov	r0, r8
   21c50:	47b0      	blx	r6
                                    proc->disc_all_dscs.chr_val_handle,
                                    dsc, proc->disc_all_dscs.cb_arg);
    }

    return rc;
}
   21c52:	b002      	add	sp, #8
   21c54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = 0;
   21c58:	2000      	movs	r0, #0
    return rc;
   21c5a:	e7fa      	b.n	21c52 <ble_gattc_disc_all_dscs_cb+0x3a>
   21c5c:	20003fec 	.word	0x20003fec

00021c60 <ble_gattc_disc_all_dscs_tmo>:

static void
ble_gattc_disc_all_dscs_tmo(struct ble_gattc_proc *proc)
{
   21c60:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_disc_all_dscs_cb(proc, BLE_HS_ETIMEOUT, 0, NULL);
   21c62:	2300      	movs	r3, #0
   21c64:	461a      	mov	r2, r3
   21c66:	210d      	movs	r1, #13
   21c68:	f7ff ffd6 	bl	21c18 <ble_gattc_disc_all_dscs_cb>
}
   21c6c:	bd08      	pop	{r3, pc}

00021c6e <ble_gattc_disc_all_dscs_err>:
 * discover-all-descriptors proc.
 */
static void
ble_gattc_disc_all_dscs_err(struct ble_gattc_proc *proc, int status,
                            uint16_t att_handle)
{
   21c6e:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status == BLE_HS_ATT_ERR(BLE_ATT_ERR_ATTR_NOT_FOUND)) {
   21c70:	f5b1 7f85 	cmp.w	r1, #266	; 0x10a
   21c74:	d003      	beq.n	21c7e <ble_gattc_disc_all_dscs_err+0x10>
        /* Discovery is complete. */
        status = BLE_HS_EDONE;
    }

    ble_gattc_disc_all_dscs_cb(proc, status, att_handle, NULL);
   21c76:	2300      	movs	r3, #0
   21c78:	f7ff ffce 	bl	21c18 <ble_gattc_disc_all_dscs_cb>
}
   21c7c:	bd08      	pop	{r3, pc}
        status = BLE_HS_EDONE;
   21c7e:	210e      	movs	r1, #14
   21c80:	e7f9      	b.n	21c76 <ble_gattc_disc_all_dscs_err+0x8>
	...

00021c84 <ble_gattc_read_cb>:
 *                                  is no callback).
 */
static int
ble_gattc_read_cb(struct ble_gattc_proc *proc, int status,
                  uint16_t att_handle, struct ble_gatt_attr *attr)
{
   21c84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    BLE_HS_DBG_ASSERT(attr != NULL || status != 0);
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status != 0 && status != BLE_HS_EDONE) {
   21c88:	460c      	mov	r4, r1
   21c8a:	b129      	cbz	r1, 21c98 <ble_gattc_read_cb+0x14>
   21c8c:	290e      	cmp	r1, #14
   21c8e:	d003      	beq.n	21c98 <ble_gattc_read_cb+0x14>
        STATS_INC(ble_gattc_stats, read_fail);
   21c90:	4d0b      	ldr	r5, [pc, #44]	; (21cc0 <ble_gattc_read_cb+0x3c>)
   21c92:	6ca9      	ldr	r1, [r5, #72]	; 0x48
   21c94:	3101      	adds	r1, #1
   21c96:	64a9      	str	r1, [r5, #72]	; 0x48
    }

    if (proc->read.cb == NULL) {
   21c98:	6907      	ldr	r7, [r0, #16]
   21c9a:	b17f      	cbz	r7, 21cbc <ble_gattc_read_cb+0x38>
   21c9c:	4625      	mov	r5, r4
   21c9e:	461e      	mov	r6, r3
   21ca0:	4611      	mov	r1, r2
   21ca2:	4604      	mov	r4, r0
        rc = 0;
    } else {
        rc = proc->read.cb(proc->conn_handle,
   21ca4:	f8b0 8008 	ldrh.w	r8, [r0, #8]
                           ble_gattc_error(status, att_handle), attr,
   21ca8:	4628      	mov	r0, r5
   21caa:	f7ff fe7f 	bl	219ac <ble_gattc_error>
        rc = proc->read.cb(proc->conn_handle,
   21cae:	6963      	ldr	r3, [r4, #20]
   21cb0:	4632      	mov	r2, r6
   21cb2:	4601      	mov	r1, r0
   21cb4:	4640      	mov	r0, r8
   21cb6:	47b8      	blx	r7
                           proc->read.cb_arg);
    }

    return rc;
}
   21cb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = 0;
   21cbc:	2000      	movs	r0, #0
    return rc;
   21cbe:	e7fb      	b.n	21cb8 <ble_gattc_read_cb+0x34>
   21cc0:	20003fec 	.word	0x20003fec

00021cc4 <ble_gattc_read_tmo>:

static void
ble_gattc_read_tmo(struct ble_gattc_proc *proc)
{
   21cc4:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_read_cb(proc, BLE_HS_ETIMEOUT, 0, NULL);
   21cc6:	2300      	movs	r3, #0
   21cc8:	461a      	mov	r2, r3
   21cca:	210d      	movs	r1, #13
   21ccc:	f7ff ffda 	bl	21c84 <ble_gattc_read_cb>
}
   21cd0:	bd08      	pop	{r3, pc}

00021cd2 <ble_gattc_read_err>:
 * read-characteristic-value proc.
 */
static void
ble_gattc_read_err(struct ble_gattc_proc *proc, int status,
                   uint16_t att_handle)
{
   21cd2:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);
    ble_gattc_read_cb(proc, status, att_handle, NULL);
   21cd4:	2300      	movs	r3, #0
   21cd6:	f7ff ffd5 	bl	21c84 <ble_gattc_read_cb>
}
   21cda:	bd08      	pop	{r3, pc}

00021cdc <ble_gattc_read_uuid_cb>:
 *                                  is no callback).
 */
static int
ble_gattc_read_uuid_cb(struct ble_gattc_proc *proc, int status,
                       uint16_t att_handle, struct ble_gatt_attr *attr)
{
   21cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    BLE_HS_DBG_ASSERT(attr != NULL || status != 0);
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status != 0 && status != BLE_HS_EDONE) {
   21ce0:	460c      	mov	r4, r1
   21ce2:	b129      	cbz	r1, 21cf0 <ble_gattc_read_uuid_cb+0x14>
   21ce4:	290e      	cmp	r1, #14
   21ce6:	d003      	beq.n	21cf0 <ble_gattc_read_uuid_cb+0x14>
        STATS_INC(ble_gattc_stats, read_uuid_fail);
   21ce8:	4d0b      	ldr	r5, [pc, #44]	; (21d18 <ble_gattc_read_uuid_cb+0x3c>)
   21cea:	6d29      	ldr	r1, [r5, #80]	; 0x50
   21cec:	3101      	adds	r1, #1
   21cee:	6529      	str	r1, [r5, #80]	; 0x50
    }

    if (proc->read_uuid.cb == NULL) {
   21cf0:	6a47      	ldr	r7, [r0, #36]	; 0x24
   21cf2:	b17f      	cbz	r7, 21d14 <ble_gattc_read_uuid_cb+0x38>
   21cf4:	4625      	mov	r5, r4
   21cf6:	461e      	mov	r6, r3
   21cf8:	4611      	mov	r1, r2
   21cfa:	4604      	mov	r4, r0
        rc = 0;
    } else {
        rc = proc->read_uuid.cb(proc->conn_handle,
   21cfc:	f8b0 8008 	ldrh.w	r8, [r0, #8]
                                ble_gattc_error(status, att_handle), attr,
   21d00:	4628      	mov	r0, r5
   21d02:	f7ff fe53 	bl	219ac <ble_gattc_error>
        rc = proc->read_uuid.cb(proc->conn_handle,
   21d06:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   21d08:	4632      	mov	r2, r6
   21d0a:	4601      	mov	r1, r0
   21d0c:	4640      	mov	r0, r8
   21d0e:	47b8      	blx	r7
                                proc->read_uuid.cb_arg);
    }

    return rc;
}
   21d10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = 0;
   21d14:	2000      	movs	r0, #0
    return rc;
   21d16:	e7fb      	b.n	21d10 <ble_gattc_read_uuid_cb+0x34>
   21d18:	20003fec 	.word	0x20003fec

00021d1c <ble_gattc_read_uuid_tmo>:

static void
ble_gattc_read_uuid_tmo(struct ble_gattc_proc *proc)
{
   21d1c:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_read_uuid_cb(proc, BLE_HS_ETIMEOUT, 0, NULL);
   21d1e:	2300      	movs	r3, #0
   21d20:	461a      	mov	r2, r3
   21d22:	210d      	movs	r1, #13
   21d24:	f7ff ffda 	bl	21cdc <ble_gattc_read_uuid_cb>
}
   21d28:	bd08      	pop	{r3, pc}

00021d2a <ble_gattc_read_uuid_err>:
 * read-using-characteristic-uuid proc.
 */
static void
ble_gattc_read_uuid_err(struct ble_gattc_proc *proc, int status,
                        uint16_t att_handle)
{
   21d2a:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_read_uuid_cb(proc, status, att_handle, NULL);
   21d2c:	2300      	movs	r3, #0
   21d2e:	f7ff ffd5 	bl	21cdc <ble_gattc_read_uuid_cb>
}
   21d32:	bd08      	pop	{r3, pc}

00021d34 <ble_gattc_read_long_cb>:
 *                                  is no callback).
 */
static int
ble_gattc_read_long_cb(struct ble_gattc_proc *proc, int status,
                       uint16_t att_handle, struct ble_gatt_attr *attr)
{
   21d34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    BLE_HS_DBG_ASSERT(attr != NULL || status != 0);
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status != 0 && status != BLE_HS_EDONE) {
   21d38:	460c      	mov	r4, r1
   21d3a:	b129      	cbz	r1, 21d48 <ble_gattc_read_long_cb+0x14>
   21d3c:	290e      	cmp	r1, #14
   21d3e:	d003      	beq.n	21d48 <ble_gattc_read_long_cb+0x14>
        STATS_INC(ble_gattc_stats, read_long_fail);
   21d40:	4d0b      	ldr	r5, [pc, #44]	; (21d70 <ble_gattc_read_long_cb+0x3c>)
   21d42:	6da9      	ldr	r1, [r5, #88]	; 0x58
   21d44:	3101      	adds	r1, #1
   21d46:	65a9      	str	r1, [r5, #88]	; 0x58
    }

    if (proc->read_long.cb == NULL) {
   21d48:	6907      	ldr	r7, [r0, #16]
   21d4a:	b17f      	cbz	r7, 21d6c <ble_gattc_read_long_cb+0x38>
   21d4c:	4625      	mov	r5, r4
   21d4e:	461e      	mov	r6, r3
   21d50:	4611      	mov	r1, r2
   21d52:	4604      	mov	r4, r0
        rc = 0;
    } else {
        rc = proc->read_long.cb(proc->conn_handle,
   21d54:	f8b0 8008 	ldrh.w	r8, [r0, #8]
                                ble_gattc_error(status, att_handle), attr,
   21d58:	4628      	mov	r0, r5
   21d5a:	f7ff fe27 	bl	219ac <ble_gattc_error>
        rc = proc->read_long.cb(proc->conn_handle,
   21d5e:	6963      	ldr	r3, [r4, #20]
   21d60:	4632      	mov	r2, r6
   21d62:	4601      	mov	r1, r0
   21d64:	4640      	mov	r0, r8
   21d66:	47b8      	blx	r7
                                proc->read_long.cb_arg);
    }

    return rc;
}
   21d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = 0;
   21d6c:	2000      	movs	r0, #0
    return rc;
   21d6e:	e7fb      	b.n	21d68 <ble_gattc_read_long_cb+0x34>
   21d70:	20003fec 	.word	0x20003fec

00021d74 <ble_gattc_read_long_tmo>:

static void
ble_gattc_read_long_tmo(struct ble_gattc_proc *proc)
{
   21d74:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_read_long_cb(proc, BLE_HS_ETIMEOUT, 0, NULL);
   21d76:	2300      	movs	r3, #0
   21d78:	461a      	mov	r2, r3
   21d7a:	210d      	movs	r1, #13
   21d7c:	f7ff ffda 	bl	21d34 <ble_gattc_read_long_cb>
}
   21d80:	bd08      	pop	{r3, pc}

00021d82 <ble_gattc_read_long_err>:
 * read-long-characteristic proc.
 */
static void
ble_gattc_read_long_err(struct ble_gattc_proc *proc, int status,
                        uint16_t att_handle)
{
   21d82:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);
    ble_gattc_read_long_cb(proc, status, att_handle, NULL);
   21d84:	2300      	movs	r3, #0
   21d86:	f7ff ffd5 	bl	21d34 <ble_gattc_read_long_cb>
}
   21d8a:	bd08      	pop	{r3, pc}

00021d8c <ble_gattc_read_mult_cb>:
 *                                  is no callback).
 */
static int
ble_gattc_read_mult_cb(struct ble_gattc_proc *proc, int status,
                       uint16_t att_handle, struct os_mbuf **om)
{
   21d8c:	b5f0      	push	{r4, r5, r6, r7, lr}
   21d8e:	b083      	sub	sp, #12
   21d90:	4605      	mov	r5, r0
   21d92:	461c      	mov	r4, r3

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    BLE_HS_DBG_ASSERT(om != NULL || status != 0);
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status != 0 && status != BLE_HS_EDONE) {
   21d94:	4608      	mov	r0, r1
   21d96:	b129      	cbz	r1, 21da4 <ble_gattc_read_mult_cb+0x18>
   21d98:	290e      	cmp	r1, #14
   21d9a:	d003      	beq.n	21da4 <ble_gattc_read_mult_cb+0x18>
        STATS_INC(ble_gattc_stats, read_mult_fail);
   21d9c:	490f      	ldr	r1, [pc, #60]	; (21ddc <ble_gattc_read_mult_cb+0x50>)
   21d9e:	6e0b      	ldr	r3, [r1, #96]	; 0x60
   21da0:	3301      	adds	r3, #1
   21da2:	660b      	str	r3, [r1, #96]	; 0x60
    }

    attr.handle = 0;
   21da4:	2300      	movs	r3, #0
   21da6:	f8ad 3000 	strh.w	r3, [sp]
    attr.offset = 0;
   21daa:	f8ad 3002 	strh.w	r3, [sp, #2]
    if (om == NULL) {
   21dae:	b18c      	cbz	r4, 21dd4 <ble_gattc_read_mult_cb+0x48>
        attr.om = NULL;
    } else {
        attr.om = *om;
   21db0:	6823      	ldr	r3, [r4, #0]
   21db2:	9301      	str	r3, [sp, #4]
    }

    if (proc->read_mult.cb == NULL) {
   21db4:	6a2e      	ldr	r6, [r5, #32]
   21db6:	b17e      	cbz	r6, 21dd8 <ble_gattc_read_mult_cb+0x4c>
        rc = 0;
    } else {
        rc = proc->read_mult.cb(proc->conn_handle,
   21db8:	892f      	ldrh	r7, [r5, #8]
                                ble_gattc_error(status, att_handle), &attr,
   21dba:	4611      	mov	r1, r2
   21dbc:	f7ff fdf6 	bl	219ac <ble_gattc_error>
        rc = proc->read_mult.cb(proc->conn_handle,
   21dc0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   21dc2:	466a      	mov	r2, sp
   21dc4:	4601      	mov	r1, r0
   21dc6:	4638      	mov	r0, r7
   21dc8:	47b0      	blx	r6
                                proc->read_mult.cb_arg);
    }

    /* Indicate to the caller whether the application consumed the mbuf. */
    if (om != NULL) {
   21dca:	b10c      	cbz	r4, 21dd0 <ble_gattc_read_mult_cb+0x44>
        *om = attr.om;
   21dcc:	9b01      	ldr	r3, [sp, #4]
   21dce:	6023      	str	r3, [r4, #0]
    }

    return rc;
}
   21dd0:	b003      	add	sp, #12
   21dd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        attr.om = NULL;
   21dd4:	9301      	str	r3, [sp, #4]
   21dd6:	e7ed      	b.n	21db4 <ble_gattc_read_mult_cb+0x28>
        rc = 0;
   21dd8:	2000      	movs	r0, #0
   21dda:	e7f6      	b.n	21dca <ble_gattc_read_mult_cb+0x3e>
   21ddc:	20003fec 	.word	0x20003fec

00021de0 <ble_gattc_read_mult_tmo>:

static void
ble_gattc_read_mult_tmo(struct ble_gattc_proc *proc)
{
   21de0:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_read_mult_cb(proc, BLE_HS_ETIMEOUT, 0, 0);
   21de2:	2300      	movs	r3, #0
   21de4:	461a      	mov	r2, r3
   21de6:	210d      	movs	r1, #13
   21de8:	f7ff ffd0 	bl	21d8c <ble_gattc_read_mult_cb>
}
   21dec:	bd08      	pop	{r3, pc}

00021dee <ble_gattc_read_mult_err>:
 * read-multiple-characteristics proc.
 */
static void
ble_gattc_read_mult_err(struct ble_gattc_proc *proc, int status,
                        uint16_t att_handle)
{
   21dee:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);
    ble_gattc_read_mult_cb(proc, status, att_handle, NULL);
   21df0:	2300      	movs	r3, #0
   21df2:	f7ff ffcb 	bl	21d8c <ble_gattc_read_mult_cb>
}
   21df6:	bd08      	pop	{r3, pc}

00021df8 <ble_gattc_write_long_cb>:
 *                                  is no callback).
 */
static int
ble_gattc_write_long_cb(struct ble_gattc_proc *proc, int status,
                        uint16_t att_handle)
{
   21df8:	b570      	push	{r4, r5, r6, lr}
    int rc;

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status != 0 && status != BLE_HS_EDONE) {
   21dfa:	460b      	mov	r3, r1
   21dfc:	b129      	cbz	r1, 21e0a <ble_gattc_write_long_cb+0x12>
   21dfe:	290e      	cmp	r1, #14
   21e00:	d003      	beq.n	21e0a <ble_gattc_write_long_cb+0x12>
        STATS_INC(ble_gattc_stats, write_long_fail);
   21e02:	4c0a      	ldr	r4, [pc, #40]	; (21e2c <ble_gattc_write_long_cb+0x34>)
   21e04:	6fa1      	ldr	r1, [r4, #120]	; 0x78
   21e06:	3101      	adds	r1, #1
   21e08:	67a1      	str	r1, [r4, #120]	; 0x78
    }

    if (proc->write_long.cb == NULL) {
   21e0a:	6985      	ldr	r5, [r0, #24]
   21e0c:	b165      	cbz	r5, 21e28 <ble_gattc_write_long_cb+0x30>
   21e0e:	4611      	mov	r1, r2
   21e10:	4604      	mov	r4, r0
        rc = 0;
    } else {
        rc = proc->write_long.cb(proc->conn_handle,
   21e12:	8906      	ldrh	r6, [r0, #8]
                                 ble_gattc_error(status, att_handle),
   21e14:	4618      	mov	r0, r3
   21e16:	f7ff fdc9 	bl	219ac <ble_gattc_error>
        rc = proc->write_long.cb(proc->conn_handle,
   21e1a:	69e3      	ldr	r3, [r4, #28]
   21e1c:	f104 020c 	add.w	r2, r4, #12
   21e20:	4601      	mov	r1, r0
   21e22:	4630      	mov	r0, r6
   21e24:	47a8      	blx	r5
                                 &proc->write_long.attr,
                                 proc->write_long.cb_arg);
    }

    return rc;
}
   21e26:	bd70      	pop	{r4, r5, r6, pc}
        rc = 0;
   21e28:	2000      	movs	r0, #0
    return rc;
   21e2a:	e7fc      	b.n	21e26 <ble_gattc_write_long_cb+0x2e>
   21e2c:	20003fec 	.word	0x20003fec

00021e30 <ble_gattc_write_long_tmo>:

static void
ble_gattc_write_long_tmo(struct ble_gattc_proc *proc)
{
   21e30:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_write_long_cb(proc, BLE_HS_ETIMEOUT, 0);
   21e32:	2200      	movs	r2, #0
   21e34:	210d      	movs	r1, #13
   21e36:	f7ff ffdf 	bl	21df8 <ble_gattc_write_long_cb>
}
   21e3a:	bd08      	pop	{r3, pc}

00021e3c <ble_gattc_write_reliable_cb>:
 *                                  is no callback).
 */
static int
ble_gattc_write_reliable_cb(struct ble_gattc_proc *proc, int status,
                            uint16_t att_handle)
{
   21e3c:	b570      	push	{r4, r5, r6, lr}
   21e3e:	b082      	sub	sp, #8
    int rc;

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status != 0 && status != BLE_HS_EDONE) {
   21e40:	460b      	mov	r3, r1
   21e42:	b139      	cbz	r1, 21e54 <ble_gattc_write_reliable_cb+0x18>
   21e44:	290e      	cmp	r1, #14
   21e46:	d005      	beq.n	21e54 <ble_gattc_write_reliable_cb+0x18>
        STATS_INC(ble_gattc_stats, write_reliable_fail);
   21e48:	4c0d      	ldr	r4, [pc, #52]	; (21e80 <ble_gattc_write_reliable_cb+0x44>)
   21e4a:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
   21e4e:	3101      	adds	r1, #1
   21e50:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
    }

    if (proc->write_reliable.cb == NULL) {
   21e54:	6b05      	ldr	r5, [r0, #48]	; 0x30
   21e56:	b185      	cbz	r5, 21e7a <ble_gattc_write_reliable_cb+0x3e>
   21e58:	4611      	mov	r1, r2
   21e5a:	4604      	mov	r4, r0
        rc = 0;
    } else {
        rc = proc->write_reliable.cb(proc->conn_handle,
   21e5c:	8906      	ldrh	r6, [r0, #8]
                                     ble_gattc_error(status, att_handle),
   21e5e:	4618      	mov	r0, r3
   21e60:	f7ff fda4 	bl	219ac <ble_gattc_error>
        rc = proc->write_reliable.cb(proc->conn_handle,
   21e64:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   21e68:	6b62      	ldr	r2, [r4, #52]	; 0x34
   21e6a:	9200      	str	r2, [sp, #0]
   21e6c:	f104 020c 	add.w	r2, r4, #12
   21e70:	4601      	mov	r1, r0
   21e72:	4630      	mov	r0, r6
   21e74:	47a8      	blx	r5
                                     proc->write_reliable.num_attrs,
                                     proc->write_reliable.cb_arg);
    }

    return rc;
}
   21e76:	b002      	add	sp, #8
   21e78:	bd70      	pop	{r4, r5, r6, pc}
        rc = 0;
   21e7a:	2000      	movs	r0, #0
    return rc;
   21e7c:	e7fb      	b.n	21e76 <ble_gattc_write_reliable_cb+0x3a>
   21e7e:	bf00      	nop
   21e80:	20003fec 	.word	0x20003fec

00021e84 <ble_gattc_write_reliable_tmo>:

static void
ble_gattc_write_reliable_tmo(struct ble_gattc_proc *proc)
{
   21e84:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_write_reliable_cb(proc, BLE_HS_ETIMEOUT, 0);
   21e86:	2200      	movs	r2, #0
   21e88:	210d      	movs	r1, #13
   21e8a:	f7ff ffd7 	bl	21e3c <ble_gattc_write_reliable_cb>
}
   21e8e:	bd08      	pop	{r3, pc}

00021e90 <ble_gattc_proc_set_resume_timer>:
{
   21e90:	b508      	push	{r3, lr}
    proc->flags |= BLE_GATTC_PROC_F_STALLED;
   21e92:	7ac3      	ldrb	r3, [r0, #11]
   21e94:	f043 0301 	orr.w	r3, r3, #1
   21e98:	72c3      	strb	r3, [r0, #11]
    if (ble_gattc_resume_at == 0) {
   21e9a:	4b07      	ldr	r3, [pc, #28]	; (21eb8 <ble_gattc_proc_set_resume_timer+0x28>)
   21e9c:	681b      	ldr	r3, [r3, #0]
   21e9e:	b103      	cbz	r3, 21ea2 <ble_gattc_proc_set_resume_timer+0x12>
}
   21ea0:	bd08      	pop	{r3, pc}
    return os_time_get();
   21ea2:	f7ec fa85 	bl	e3b0 <os_time_get>
        ble_gattc_resume_at = ble_npl_time_get() +
   21ea6:	3080      	adds	r0, #128	; 0x80
   21ea8:	4b03      	ldr	r3, [pc, #12]	; (21eb8 <ble_gattc_proc_set_resume_timer+0x28>)
   21eaa:	6018      	str	r0, [r3, #0]
        if (ble_gattc_resume_at == 0) {
   21eac:	2800      	cmp	r0, #0
   21eae:	d1f7      	bne.n	21ea0 <ble_gattc_proc_set_resume_timer+0x10>
            ble_gattc_resume_at++;
   21eb0:	3001      	adds	r0, #1
   21eb2:	6018      	str	r0, [r3, #0]
}
   21eb4:	e7f4      	b.n	21ea0 <ble_gattc_proc_set_resume_timer+0x10>
   21eb6:	bf00      	nop
   21eb8:	200027f4 	.word	0x200027f4

00021ebc <ble_gattc_process_resume_status>:
    switch (status) {
   21ebc:	2906      	cmp	r1, #6
   21ebe:	d001      	beq.n	21ec4 <ble_gattc_process_resume_status+0x8>
}
   21ec0:	4608      	mov	r0, r1
   21ec2:	4770      	bx	lr
{
   21ec4:	b508      	push	{r3, lr}
        ble_gattc_proc_set_resume_timer(proc);
   21ec6:	f7ff ffe3 	bl	21e90 <ble_gattc_proc_set_resume_timer>
        return 0;
   21eca:	2100      	movs	r1, #0
}
   21ecc:	4608      	mov	r0, r1
   21ece:	bd08      	pop	{r3, pc}

00021ed0 <ble_gattc_proc_set_exp_timer>:
{
   21ed0:	b510      	push	{r4, lr}
   21ed2:	4604      	mov	r4, r0
   21ed4:	f7ec fa6c 	bl	e3b0 <os_time_get>
    proc->exp_os_ticks = ble_npl_time_get() +
   21ed8:	f500 6070 	add.w	r0, r0, #3840	; 0xf00
   21edc:	6060      	str	r0, [r4, #4]
}
   21ede:	bd10      	pop	{r4, pc}

00021ee0 <ble_gattc_ticks_until_resume>:
{
   21ee0:	b508      	push	{r3, lr}
    if (ble_gattc_resume_at == 0) {
   21ee2:	4b07      	ldr	r3, [pc, #28]	; (21f00 <ble_gattc_ticks_until_resume+0x20>)
   21ee4:	681b      	ldr	r3, [r3, #0]
   21ee6:	b143      	cbz	r3, 21efa <ble_gattc_ticks_until_resume+0x1a>
   21ee8:	f7ec fa62 	bl	e3b0 <os_time_get>
    diff = ble_gattc_resume_at - now;
   21eec:	4b04      	ldr	r3, [pc, #16]	; (21f00 <ble_gattc_ticks_until_resume+0x20>)
   21eee:	681b      	ldr	r3, [r3, #0]
   21ef0:	1a18      	subs	r0, r3, r0
    if (diff <= 0) {
   21ef2:	2800      	cmp	r0, #0
   21ef4:	dc03      	bgt.n	21efe <ble_gattc_ticks_until_resume+0x1e>
        return 0;
   21ef6:	2000      	movs	r0, #0
   21ef8:	e001      	b.n	21efe <ble_gattc_ticks_until_resume+0x1e>
        return BLE_HS_FOREVER;
   21efa:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
}
   21efe:	bd08      	pop	{r3, pc}
   21f00:	200027f4 	.word	0x200027f4

00021f04 <ble_gattc_extract>:
{
   21f04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21f08:	4681      	mov	r9, r0
   21f0a:	4688      	mov	r8, r1
   21f0c:	4693      	mov	fp, r2
   21f0e:	461f      	mov	r7, r3
    STAILQ_INIT(dst_list);
   21f10:	2500      	movs	r5, #0
   21f12:	601d      	str	r5, [r3, #0]
   21f14:	605b      	str	r3, [r3, #4]
    ble_hs_lock();
   21f16:	f001 fdb3 	bl	23a80 <ble_hs_lock>
    proc = STAILQ_FIRST(&ble_gattc_procs);
   21f1a:	4b17      	ldr	r3, [pc, #92]	; (21f78 <ble_gattc_extract+0x74>)
   21f1c:	681c      	ldr	r4, [r3, #0]
    num_extracted = 0;
   21f1e:	46aa      	mov	sl, r5
    while (proc != NULL) {
   21f20:	e00c      	b.n	21f3c <ble_gattc_extract+0x38>
                STAILQ_REMOVE_HEAD(&ble_gattc_procs, next);
   21f22:	4a15      	ldr	r2, [pc, #84]	; (21f78 <ble_gattc_extract+0x74>)
   21f24:	6813      	ldr	r3, [r2, #0]
   21f26:	681b      	ldr	r3, [r3, #0]
   21f28:	6013      	str	r3, [r2, #0]
   21f2a:	b9ab      	cbnz	r3, 21f58 <ble_gattc_extract+0x54>
   21f2c:	4613      	mov	r3, r2
   21f2e:	605a      	str	r2, [r3, #4]
   21f30:	e012      	b.n	21f58 <ble_gattc_extract+0x54>
                STAILQ_REMOVE_AFTER(&ble_gattc_procs, prev, next);
   21f32:	4b11      	ldr	r3, [pc, #68]	; (21f78 <ble_gattc_extract+0x74>)
   21f34:	605d      	str	r5, [r3, #4]
   21f36:	e00f      	b.n	21f58 <ble_gattc_extract+0x54>
            prev = proc;
   21f38:	4625      	mov	r5, r4
   21f3a:	4634      	mov	r4, r6
    while (proc != NULL) {
   21f3c:	b1c4      	cbz	r4, 21f70 <ble_gattc_extract+0x6c>
        next = STAILQ_NEXT(proc, next);
   21f3e:	6826      	ldr	r6, [r4, #0]
        if (cb(proc, arg)) {
   21f40:	4641      	mov	r1, r8
   21f42:	4620      	mov	r0, r4
   21f44:	47c8      	blx	r9
   21f46:	2800      	cmp	r0, #0
   21f48:	d0f6      	beq.n	21f38 <ble_gattc_extract+0x34>
            if (prev == NULL) {
   21f4a:	2d00      	cmp	r5, #0
   21f4c:	d0e9      	beq.n	21f22 <ble_gattc_extract+0x1e>
                STAILQ_REMOVE_AFTER(&ble_gattc_procs, prev, next);
   21f4e:	682b      	ldr	r3, [r5, #0]
   21f50:	681b      	ldr	r3, [r3, #0]
   21f52:	602b      	str	r3, [r5, #0]
   21f54:	2b00      	cmp	r3, #0
   21f56:	d0ec      	beq.n	21f32 <ble_gattc_extract+0x2e>
            STAILQ_INSERT_TAIL(dst_list, proc, next);
   21f58:	2300      	movs	r3, #0
   21f5a:	6023      	str	r3, [r4, #0]
   21f5c:	687b      	ldr	r3, [r7, #4]
   21f5e:	601c      	str	r4, [r3, #0]
   21f60:	607c      	str	r4, [r7, #4]
            if (max_procs > 0) {
   21f62:	f1bb 0f00 	cmp.w	fp, #0
   21f66:	dde8      	ble.n	21f3a <ble_gattc_extract+0x36>
                num_extracted++;
   21f68:	f10a 0a01 	add.w	sl, sl, #1
                if (num_extracted >= max_procs) {
   21f6c:	45d3      	cmp	fp, sl
   21f6e:	dce4      	bgt.n	21f3a <ble_gattc_extract+0x36>
    ble_hs_unlock();
   21f70:	f001 fd8a 	bl	23a88 <ble_hs_unlock>
}
   21f74:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21f78:	200027ec 	.word	0x200027ec

00021f7c <ble_gattc_extract_expired>:
{
   21f7c:	b510      	push	{r4, lr}
   21f7e:	b082      	sub	sp, #8
   21f80:	4604      	mov	r4, r0
   21f82:	f7ec fa15 	bl	e3b0 <os_time_get>
    criteria.now = ble_npl_time_get();
   21f86:	9000      	str	r0, [sp, #0]
    criteria.next_exp_in = BLE_HS_FOREVER;
   21f88:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   21f8c:	9301      	str	r3, [sp, #4]
    STAILQ_INIT(dst_list);
   21f8e:	2200      	movs	r2, #0
   21f90:	6022      	str	r2, [r4, #0]
   21f92:	6064      	str	r4, [r4, #4]
    ble_gattc_extract(ble_gattc_proc_matches_expired, &criteria, 0, dst_list);
   21f94:	4623      	mov	r3, r4
   21f96:	4669      	mov	r1, sp
   21f98:	4802      	ldr	r0, [pc, #8]	; (21fa4 <ble_gattc_extract_expired+0x28>)
   21f9a:	f7ff ffb3 	bl	21f04 <ble_gattc_extract>
}
   21f9e:	9801      	ldr	r0, [sp, #4]
   21fa0:	b002      	add	sp, #8
   21fa2:	bd10      	pop	{r4, pc}
   21fa4:	00021971 	.word	0x00021971

00021fa8 <ble_gattc_extract_stalled>:
{
   21fa8:	b508      	push	{r3, lr}
    ble_gattc_extract(ble_gattc_proc_matches_stalled, NULL, 0, dst_list);
   21faa:	4603      	mov	r3, r0
   21fac:	2200      	movs	r2, #0
   21fae:	4611      	mov	r1, r2
   21fb0:	4801      	ldr	r0, [pc, #4]	; (21fb8 <ble_gattc_extract_stalled+0x10>)
   21fb2:	f7ff ffa7 	bl	21f04 <ble_gattc_extract>
}
   21fb6:	bd08      	pop	{r3, pc}
   21fb8:	0002198f 	.word	0x0002198f

00021fbc <ble_gattc_extract_by_conn_op>:
{
   21fbc:	b500      	push	{lr}
   21fbe:	b083      	sub	sp, #12
    criteria.conn_handle = conn_handle;
   21fc0:	f8ad 0004 	strh.w	r0, [sp, #4]
    criteria.op = op;
   21fc4:	f88d 1006 	strb.w	r1, [sp, #6]
    ble_gattc_extract(ble_gattc_proc_matches_conn_op, &criteria, max_procs, dst_list);
   21fc8:	a901      	add	r1, sp, #4
   21fca:	4803      	ldr	r0, [pc, #12]	; (21fd8 <ble_gattc_extract_by_conn_op+0x1c>)
   21fcc:	f7ff ff9a 	bl	21f04 <ble_gattc_extract>
}
   21fd0:	b003      	add	sp, #12
   21fd2:	f85d fb04 	ldr.w	pc, [sp], #4
   21fd6:	bf00      	nop
   21fd8:	0002194d 	.word	0x0002194d

00021fdc <ble_gattc_extract_first_by_conn_op>:
{
   21fdc:	b500      	push	{lr}
   21fde:	b083      	sub	sp, #12
    ble_gattc_extract_by_conn_op(conn_handle, op, 1, &dst_list);
   21fe0:	466b      	mov	r3, sp
   21fe2:	2201      	movs	r2, #1
   21fe4:	f7ff ffea 	bl	21fbc <ble_gattc_extract_by_conn_op>
}
   21fe8:	9800      	ldr	r0, [sp, #0]
   21fea:	b003      	add	sp, #12
   21fec:	f85d fb04 	ldr.w	pc, [sp], #4

00021ff0 <ble_gattc_proc_insert>:
{
   21ff0:	b510      	push	{r4, lr}
   21ff2:	4604      	mov	r4, r0
    ble_hs_lock();
   21ff4:	f001 fd44 	bl	23a80 <ble_hs_lock>
    STAILQ_INSERT_TAIL(&ble_gattc_procs, proc, next);
   21ff8:	2300      	movs	r3, #0
   21ffa:	6023      	str	r3, [r4, #0]
   21ffc:	4b03      	ldr	r3, [pc, #12]	; (2200c <ble_gattc_proc_insert+0x1c>)
   21ffe:	685a      	ldr	r2, [r3, #4]
   22000:	6014      	str	r4, [r2, #0]
   22002:	605c      	str	r4, [r3, #4]
    ble_hs_unlock();
   22004:	f001 fd40 	bl	23a88 <ble_hs_unlock>
}
   22008:	bd10      	pop	{r4, pc}
   2200a:	bf00      	nop
   2200c:	200027ec 	.word	0x200027ec

00022010 <ble_gattc_indicate_tmo>:
    ble_gatts_send_next_indicate(proc->conn_handle);
}

static void
ble_gattc_indicate_tmo(struct ble_gattc_proc *proc)
{
   22010:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gap_notify_tx_event(BLE_HS_ETIMEOUT, proc->conn_handle,
   22012:	2301      	movs	r3, #1
   22014:	8982      	ldrh	r2, [r0, #12]
   22016:	8901      	ldrh	r1, [r0, #8]
   22018:	200d      	movs	r0, #13
   2201a:	f7ff fb34 	bl	21686 <ble_gap_notify_tx_event>
                            proc->indicate.chr_val_handle, 1);
}
   2201e:	bd08      	pop	{r3, pc}

00022020 <ble_gattc_write_cb>:
{
   22020:	b570      	push	{r4, r5, r6, lr}
   22022:	b082      	sub	sp, #8
    if (status != 0 && status != BLE_HS_EDONE) {
   22024:	460b      	mov	r3, r1
   22026:	b129      	cbz	r1, 22034 <ble_gattc_write_cb+0x14>
   22028:	290e      	cmp	r1, #14
   2202a:	d003      	beq.n	22034 <ble_gattc_write_cb+0x14>
        STATS_INC(ble_gattc_stats, write_fail);
   2202c:	4c0e      	ldr	r4, [pc, #56]	; (22068 <ble_gattc_write_cb+0x48>)
   2202e:	6f21      	ldr	r1, [r4, #112]	; 0x70
   22030:	3101      	adds	r1, #1
   22032:	6721      	str	r1, [r4, #112]	; 0x70
    if (proc->write.cb == NULL) {
   22034:	6905      	ldr	r5, [r0, #16]
   22036:	b1a5      	cbz	r5, 22062 <ble_gattc_write_cb+0x42>
   22038:	4611      	mov	r1, r2
   2203a:	4604      	mov	r4, r0
        memset(&attr, 0, sizeof attr);
   2203c:	2200      	movs	r2, #0
   2203e:	f8cd 2002 	str.w	r2, [sp, #2]
   22042:	f8ad 2006 	strh.w	r2, [sp, #6]
        attr.handle = proc->write.att_handle;
   22046:	8982      	ldrh	r2, [r0, #12]
   22048:	f8ad 2000 	strh.w	r2, [sp]
        rc = proc->write.cb(proc->conn_handle,
   2204c:	8906      	ldrh	r6, [r0, #8]
                            ble_gattc_error(status, att_handle),
   2204e:	4618      	mov	r0, r3
   22050:	f7ff fcac 	bl	219ac <ble_gattc_error>
        rc = proc->write.cb(proc->conn_handle,
   22054:	6963      	ldr	r3, [r4, #20]
   22056:	466a      	mov	r2, sp
   22058:	4601      	mov	r1, r0
   2205a:	4630      	mov	r0, r6
   2205c:	47a8      	blx	r5
}
   2205e:	b002      	add	sp, #8
   22060:	bd70      	pop	{r4, r5, r6, pc}
        rc = 0;
   22062:	2000      	movs	r0, #0
    return rc;
   22064:	e7fb      	b.n	2205e <ble_gattc_write_cb+0x3e>
   22066:	bf00      	nop
   22068:	20003fec 	.word	0x20003fec

0002206c <ble_gattc_write_tmo>:
{
   2206c:	b508      	push	{r3, lr}
    ble_gattc_write_cb(proc, BLE_HS_ETIMEOUT, 0);
   2206e:	2200      	movs	r2, #0
   22070:	210d      	movs	r1, #13
   22072:	f7ff ffd5 	bl	22020 <ble_gattc_write_cb>
}
   22076:	bd08      	pop	{r3, pc}

00022078 <ble_gattc_write_err>:
{
   22078:	b508      	push	{r3, lr}
    ble_gattc_write_cb(proc, status, att_handle);
   2207a:	f7ff ffd1 	bl	22020 <ble_gattc_write_cb>
}
   2207e:	bd08      	pop	{r3, pc}

00022080 <ble_gattc_proc_free>:
    if (proc != NULL) {
   22080:	b1e8      	cbz	r0, 220be <ble_gattc_proc_free+0x3e>
{
   22082:	b538      	push	{r3, r4, r5, lr}
   22084:	4604      	mov	r4, r0
        switch (proc->op) {
   22086:	7a83      	ldrb	r3, [r0, #10]
   22088:	2b0c      	cmp	r3, #12
   2208a:	d006      	beq.n	2209a <ble_gattc_proc_free+0x1a>
   2208c:	2b0d      	cmp	r3, #13
   2208e:	d014      	beq.n	220ba <ble_gattc_proc_free+0x3a>
        rc = os_memblock_put(&ble_gattc_proc_pool, proc);
   22090:	4621      	mov	r1, r4
   22092:	480b      	ldr	r0, [pc, #44]	; (220c0 <ble_gattc_proc_free+0x40>)
   22094:	f7eb fde2 	bl	dc5c <os_memblock_put>
}
   22098:	bd38      	pop	{r3, r4, r5, pc}
            os_mbuf_free_chain(proc->write_long.attr.om);
   2209a:	6900      	ldr	r0, [r0, #16]
   2209c:	f7eb f9c0 	bl	d420 <os_mbuf_free_chain>
            break;
   220a0:	e7f6      	b.n	22090 <ble_gattc_proc_free+0x10>
                os_mbuf_free_chain(proc->write_reliable.attrs[i].om);
   220a2:	1c5d      	adds	r5, r3, #1
   220a4:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
   220a8:	6898      	ldr	r0, [r3, #8]
   220aa:	f7eb f9b9 	bl	d420 <os_mbuf_free_chain>
            for (i = 0; i < proc->write_reliable.num_attrs; i++) {
   220ae:	462b      	mov	r3, r5
   220b0:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
   220b4:	429a      	cmp	r2, r3
   220b6:	dcf4      	bgt.n	220a2 <ble_gattc_proc_free+0x22>
   220b8:	e7ea      	b.n	22090 <ble_gattc_proc_free+0x10>
   220ba:	2300      	movs	r3, #0
   220bc:	e7f8      	b.n	220b0 <ble_gattc_proc_free+0x30>
   220be:	4770      	bx	lr
   220c0:	200027d0 	.word	0x200027d0

000220c4 <ble_gattc_fail_procs>:
{
   220c4:	b530      	push	{r4, r5, lr}
   220c6:	b083      	sub	sp, #12
   220c8:	4615      	mov	r5, r2
    ble_gattc_extract_by_conn_op(conn_handle, op, 0, &temp_list);
   220ca:	466b      	mov	r3, sp
   220cc:	2200      	movs	r2, #0
   220ce:	f7ff ff75 	bl	21fbc <ble_gattc_extract_by_conn_op>
    while ((proc = STAILQ_FIRST(&temp_list)) != NULL) {
   220d2:	e002      	b.n	220da <ble_gattc_fail_procs+0x16>
        ble_gattc_proc_free(proc);
   220d4:	4620      	mov	r0, r4
   220d6:	f7ff ffd3 	bl	22080 <ble_gattc_proc_free>
    while ((proc = STAILQ_FIRST(&temp_list)) != NULL) {
   220da:	9c00      	ldr	r4, [sp, #0]
   220dc:	b17c      	cbz	r4, 220fe <ble_gattc_fail_procs+0x3a>
        err_cb = ble_gattc_err_dispatch_get(proc->op);
   220de:	7aa0      	ldrb	r0, [r4, #10]
   220e0:	f7ff fc22 	bl	21928 <ble_gattc_err_dispatch_get>
   220e4:	4603      	mov	r3, r0
        err_cb(proc, status, 0);
   220e6:	2200      	movs	r2, #0
   220e8:	4629      	mov	r1, r5
   220ea:	4620      	mov	r0, r4
   220ec:	4798      	blx	r3
        STAILQ_REMOVE_HEAD(&temp_list, next);
   220ee:	9b00      	ldr	r3, [sp, #0]
   220f0:	681b      	ldr	r3, [r3, #0]
   220f2:	9300      	str	r3, [sp, #0]
   220f4:	2b00      	cmp	r3, #0
   220f6:	d1ed      	bne.n	220d4 <ble_gattc_fail_procs+0x10>
   220f8:	f8cd d004 	str.w	sp, [sp, #4]
   220fc:	e7ea      	b.n	220d4 <ble_gattc_fail_procs+0x10>
}
   220fe:	b003      	add	sp, #12
   22100:	bd30      	pop	{r4, r5, pc}

00022102 <ble_gattc_write_reliable_err>:
{
   22102:	b510      	push	{r4, lr}
   22104:	4604      	mov	r4, r0
    ble_gattc_write_reliable_cb(proc, status, att_handle);
   22106:	f7ff fe99 	bl	21e3c <ble_gattc_write_reliable_cb>
    if (proc->write_reliable.cur_attr < proc->write_reliable.num_attrs) {
   2210a:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
   2210e:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   22112:	429a      	cmp	r2, r3
   22114:	d300      	bcc.n	22118 <ble_gattc_write_reliable_err+0x16>
}
   22116:	bd10      	pop	{r4, pc}
        ble_att_clt_tx_exec_write(proc->conn_handle,
   22118:	2100      	movs	r1, #0
   2211a:	8920      	ldrh	r0, [r4, #8]
   2211c:	f7fc fcca 	bl	1eab4 <ble_att_clt_tx_exec_write>
}
   22120:	e7f9      	b.n	22116 <ble_gattc_write_reliable_err+0x14>

00022122 <ble_gattc_write_long_err>:
{
   22122:	b570      	push	{r4, r5, r6, lr}
   22124:	4604      	mov	r4, r0
   22126:	460d      	mov	r5, r1
   22128:	4616      	mov	r6, r2
    if (proc->write_long.attr.offset > 0 &&
   2212a:	89c3      	ldrh	r3, [r0, #14]
   2212c:	b11b      	cbz	r3, 22136 <ble_gattc_write_long_err+0x14>
            OS_MBUF_PKTLEN(proc->write_long.attr.om)) {
   2212e:	6902      	ldr	r2, [r0, #16]
   22130:	8a12      	ldrh	r2, [r2, #16]
    if (proc->write_long.attr.offset > 0 &&
   22132:	4293      	cmp	r3, r2
   22134:	d305      	bcc.n	22142 <ble_gattc_write_long_err+0x20>
    ble_gattc_write_long_cb(proc, status, att_handle);
   22136:	4632      	mov	r2, r6
   22138:	4629      	mov	r1, r5
   2213a:	4620      	mov	r0, r4
   2213c:	f7ff fe5c 	bl	21df8 <ble_gattc_write_long_cb>
}
   22140:	bd70      	pop	{r4, r5, r6, pc}
        ble_att_clt_tx_exec_write(proc->conn_handle,
   22142:	2100      	movs	r1, #0
   22144:	8900      	ldrh	r0, [r0, #8]
   22146:	f7fc fcb5 	bl	1eab4 <ble_att_clt_tx_exec_write>
   2214a:	e7f4      	b.n	22136 <ble_gattc_write_long_err+0x14>

0002214c <ble_gattc_write_reliable_tx>:
{
   2214c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22150:	4604      	mov	r4, r0
    attr_idx = proc->write_reliable.cur_attr;
   22152:	f890 502d 	ldrb.w	r5, [r0, #45]	; 0x2d
    if (attr_idx >= proc->write_reliable.num_attrs) {
   22156:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
   2215a:	429d      	cmp	r5, r3
   2215c:	d225      	bcs.n	221aa <ble_gattc_write_reliable_tx+0x5e>
    attr = proc->write_reliable.attrs + attr_idx;
   2215e:	f100 080c 	add.w	r8, r0, #12
   22162:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
    max_sz = ble_att_mtu(proc->conn_handle) - BLE_ATT_PREP_WRITE_CMD_BASE_SZ;
   22166:	8900      	ldrh	r0, [r0, #8]
   22168:	f7fc fbf6 	bl	1e958 <ble_att_mtu>
   2216c:	3805      	subs	r0, #5
   2216e:	b280      	uxth	r0, r0
    if (max_sz <= 0) {
   22170:	b338      	cbz	r0, 221c2 <ble_gattc_write_reliable_tx+0x76>
        min(max_sz, OS_MBUF_PKTLEN(attr->om) - attr->offset);
   22172:	687b      	ldr	r3, [r7, #4]
   22174:	8a1b      	ldrh	r3, [r3, #16]
   22176:	887a      	ldrh	r2, [r7, #2]
   22178:	1a9b      	subs	r3, r3, r2
   2217a:	4298      	cmp	r0, r3
   2217c:	bfa8      	it	ge
   2217e:	4618      	movge	r0, r3
    proc->write_reliable.length =
   22180:	85e0      	strh	r0, [r4, #46]	; 0x2e
    om = ble_hs_mbuf_att_pkt();
   22182:	f003 fa4a 	bl	2561a <ble_hs_mbuf_att_pkt>
    if (om == NULL) {
   22186:	4606      	mov	r6, r0
   22188:	b1f0      	cbz	r0, 221c8 <ble_gattc_write_reliable_tx+0x7c>
    rc = os_mbuf_appendfrom(om, attr->om, attr->offset,
   2218a:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
   2218c:	887a      	ldrh	r2, [r7, #2]
   2218e:	6879      	ldr	r1, [r7, #4]
   22190:	f7eb f9c7 	bl	d522 <os_mbuf_appendfrom>
    if (rc != 0) {
   22194:	b9d0      	cbnz	r0, 221cc <ble_gattc_write_reliable_tx+0x80>
    rc = ble_att_clt_tx_prep_write(proc->conn_handle, attr->handle,
   22196:	4633      	mov	r3, r6
   22198:	887a      	ldrh	r2, [r7, #2]
   2219a:	f838 1035 	ldrh.w	r1, [r8, r5, lsl #3]
   2219e:	8920      	ldrh	r0, [r4, #8]
   221a0:	f7fc fc84 	bl	1eaac <ble_att_clt_tx_prep_write>
   221a4:	4604      	mov	r4, r0
    om = NULL;
   221a6:	2600      	movs	r6, #0
done:
   221a8:	e005      	b.n	221b6 <ble_gattc_write_reliable_tx+0x6a>
        rc = ble_att_clt_tx_exec_write(proc->conn_handle,
   221aa:	2101      	movs	r1, #1
   221ac:	8900      	ldrh	r0, [r0, #8]
   221ae:	f7fc fc81 	bl	1eab4 <ble_att_clt_tx_exec_write>
   221b2:	4604      	mov	r4, r0
    om = NULL;
   221b4:	2600      	movs	r6, #0
    os_mbuf_free_chain(om);
   221b6:	4630      	mov	r0, r6
   221b8:	f7eb f932 	bl	d420 <os_mbuf_free_chain>
}
   221bc:	4620      	mov	r0, r4
   221be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = BLE_HS_ENOTCONN;
   221c2:	2407      	movs	r4, #7
    om = NULL;
   221c4:	2600      	movs	r6, #0
   221c6:	e7f6      	b.n	221b6 <ble_gattc_write_reliable_tx+0x6a>
        rc = BLE_HS_ENOMEM;
   221c8:	2406      	movs	r4, #6
   221ca:	e7f4      	b.n	221b6 <ble_gattc_write_reliable_tx+0x6a>
        rc = BLE_HS_ENOMEM;
   221cc:	2406      	movs	r4, #6
   221ce:	e7f2      	b.n	221b6 <ble_gattc_write_reliable_tx+0x6a>

000221d0 <ble_gattc_write_reliable_resume>:
{
   221d0:	b538      	push	{r3, r4, r5, lr}
   221d2:	4605      	mov	r5, r0
    status = ble_gattc_write_reliable_tx(proc);
   221d4:	f7ff ffba 	bl	2214c <ble_gattc_write_reliable_tx>
    rc = ble_gattc_process_resume_status(proc, status);
   221d8:	4601      	mov	r1, r0
   221da:	4628      	mov	r0, r5
   221dc:	f7ff fe6e 	bl	21ebc <ble_gattc_process_resume_status>
    if (rc != 0) {
   221e0:	4604      	mov	r4, r0
   221e2:	b908      	cbnz	r0, 221e8 <ble_gattc_write_reliable_resume+0x18>
}
   221e4:	4620      	mov	r0, r4
   221e6:	bd38      	pop	{r3, r4, r5, pc}
        ble_gattc_write_reliable_cb(proc, rc, 0);
   221e8:	2200      	movs	r2, #0
   221ea:	4601      	mov	r1, r0
   221ec:	4628      	mov	r0, r5
   221ee:	f7ff fe25 	bl	21e3c <ble_gattc_write_reliable_cb>
        return rc;
   221f2:	e7f7      	b.n	221e4 <ble_gattc_write_reliable_resume+0x14>

000221f4 <ble_gattc_write_long_tx>:
{
   221f4:	b538      	push	{r3, r4, r5, lr}
   221f6:	4604      	mov	r4, r0
    max_sz = ble_att_mtu(proc->conn_handle) - BLE_ATT_PREP_WRITE_CMD_BASE_SZ;
   221f8:	8900      	ldrh	r0, [r0, #8]
   221fa:	f7fc fbad 	bl	1e958 <ble_att_mtu>
   221fe:	1f42      	subs	r2, r0, #5
    if (max_sz <= 0) {
   22200:	2a00      	cmp	r2, #0
   22202:	dd27      	ble.n	22254 <ble_gattc_write_long_tx+0x60>
    write_len = min(max_sz,
   22204:	6923      	ldr	r3, [r4, #16]
   22206:	8a1b      	ldrh	r3, [r3, #16]
   22208:	89e0      	ldrh	r0, [r4, #14]
   2220a:	1a18      	subs	r0, r3, r0
   2220c:	4290      	cmp	r0, r2
   2220e:	bfa8      	it	ge
   22210:	4610      	movge	r0, r2
    if (write_len <= 0) {
   22212:	2800      	cmp	r0, #0
   22214:	dd13      	ble.n	2223e <ble_gattc_write_long_tx+0x4a>
    proc->write_long.length = write_len;
   22216:	82a0      	strh	r0, [r4, #20]
    om = ble_hs_mbuf_att_pkt();
   22218:	f003 f9ff 	bl	2561a <ble_hs_mbuf_att_pkt>
    if (om == NULL) {
   2221c:	4605      	mov	r5, r0
   2221e:	b1e0      	cbz	r0, 2225a <ble_gattc_write_long_tx+0x66>
    rc = os_mbuf_appendfrom(om, proc->write_long.attr.om,
   22220:	8aa3      	ldrh	r3, [r4, #20]
   22222:	89e2      	ldrh	r2, [r4, #14]
   22224:	6921      	ldr	r1, [r4, #16]
   22226:	f7eb f97c 	bl	d522 <os_mbuf_appendfrom>
    if (rc != 0) {
   2222a:	b9c0      	cbnz	r0, 2225e <ble_gattc_write_long_tx+0x6a>
    rc = ble_att_clt_tx_prep_write(proc->conn_handle,
   2222c:	462b      	mov	r3, r5
   2222e:	89e2      	ldrh	r2, [r4, #14]
   22230:	89a1      	ldrh	r1, [r4, #12]
   22232:	8920      	ldrh	r0, [r4, #8]
   22234:	f7fc fc3a 	bl	1eaac <ble_att_clt_tx_prep_write>
   22238:	4604      	mov	r4, r0
    om = NULL;
   2223a:	2500      	movs	r5, #0
done:
   2223c:	e005      	b.n	2224a <ble_gattc_write_long_tx+0x56>
        rc = ble_att_clt_tx_exec_write(proc->conn_handle,
   2223e:	2101      	movs	r1, #1
   22240:	8920      	ldrh	r0, [r4, #8]
   22242:	f7fc fc37 	bl	1eab4 <ble_att_clt_tx_exec_write>
   22246:	4604      	mov	r4, r0
    om = NULL;
   22248:	2500      	movs	r5, #0
    os_mbuf_free_chain(om);
   2224a:	4628      	mov	r0, r5
   2224c:	f7eb f8e8 	bl	d420 <os_mbuf_free_chain>
}
   22250:	4620      	mov	r0, r4
   22252:	bd38      	pop	{r3, r4, r5, pc}
        rc = BLE_HS_ENOTCONN;
   22254:	2407      	movs	r4, #7
    om = NULL;
   22256:	2500      	movs	r5, #0
   22258:	e7f7      	b.n	2224a <ble_gattc_write_long_tx+0x56>
        rc = BLE_HS_ENOMEM;
   2225a:	2406      	movs	r4, #6
   2225c:	e7f5      	b.n	2224a <ble_gattc_write_long_tx+0x56>
        rc = BLE_HS_ENOMEM;
   2225e:	2406      	movs	r4, #6
   22260:	e7f3      	b.n	2224a <ble_gattc_write_long_tx+0x56>

00022262 <ble_gattc_write_long_resume>:
{
   22262:	b538      	push	{r3, r4, r5, lr}
   22264:	4605      	mov	r5, r0
    status = ble_gattc_write_long_tx(proc);
   22266:	f7ff ffc5 	bl	221f4 <ble_gattc_write_long_tx>
    rc = ble_gattc_process_resume_status(proc, status);
   2226a:	4601      	mov	r1, r0
   2226c:	4628      	mov	r0, r5
   2226e:	f7ff fe25 	bl	21ebc <ble_gattc_process_resume_status>
    if (rc != 0) {
   22272:	4604      	mov	r4, r0
   22274:	b908      	cbnz	r0, 2227a <ble_gattc_write_long_resume+0x18>
}
   22276:	4620      	mov	r0, r4
   22278:	bd38      	pop	{r3, r4, r5, pc}
        ble_gattc_write_long_cb(proc, rc, 0);
   2227a:	2200      	movs	r2, #0
   2227c:	4601      	mov	r1, r0
   2227e:	4628      	mov	r0, r5
   22280:	f7ff fdba 	bl	21df8 <ble_gattc_write_long_cb>
        return rc;
   22284:	e7f7      	b.n	22276 <ble_gattc_write_long_resume+0x14>

00022286 <ble_gattc_read_long_tx>:
{
   22286:	b508      	push	{r3, lr}
    if (proc->read_long.offset == 0) {
   22288:	89c2      	ldrh	r2, [r0, #14]
   2228a:	b922      	cbnz	r2, 22296 <ble_gattc_read_long_tx+0x10>
        rc = ble_att_clt_tx_read(proc->conn_handle, proc->read_long.handle);
   2228c:	8981      	ldrh	r1, [r0, #12]
   2228e:	8900      	ldrh	r0, [r0, #8]
   22290:	f7fc fbfc 	bl	1ea8c <ble_att_clt_tx_read>
}
   22294:	bd08      	pop	{r3, pc}
        rc = ble_att_clt_tx_read_blob(proc->conn_handle,
   22296:	8981      	ldrh	r1, [r0, #12]
   22298:	8900      	ldrh	r0, [r0, #8]
   2229a:	f7fc fbfb 	bl	1ea94 <ble_att_clt_tx_read_blob>
   2229e:	e7f9      	b.n	22294 <ble_gattc_read_long_tx+0xe>

000222a0 <ble_gattc_read_long_resume>:
{
   222a0:	b538      	push	{r3, r4, r5, lr}
   222a2:	4605      	mov	r5, r0
    status = ble_gattc_read_long_tx(proc);
   222a4:	f7ff ffef 	bl	22286 <ble_gattc_read_long_tx>
    rc = ble_gattc_process_resume_status(proc, status);
   222a8:	4601      	mov	r1, r0
   222aa:	4628      	mov	r0, r5
   222ac:	f7ff fe06 	bl	21ebc <ble_gattc_process_resume_status>
    if (rc != 0) {
   222b0:	4604      	mov	r4, r0
   222b2:	b908      	cbnz	r0, 222b8 <ble_gattc_read_long_resume+0x18>
}
   222b4:	4620      	mov	r0, r4
   222b6:	bd38      	pop	{r3, r4, r5, pc}
        ble_gattc_read_long_cb(proc, rc, 0, NULL);
   222b8:	2300      	movs	r3, #0
   222ba:	461a      	mov	r2, r3
   222bc:	4601      	mov	r1, r0
   222be:	4628      	mov	r0, r5
   222c0:	f7ff fd38 	bl	21d34 <ble_gattc_read_long_cb>
        return rc;
   222c4:	e7f6      	b.n	222b4 <ble_gattc_read_long_resume+0x14>

000222c6 <ble_gattc_disc_all_dscs_tx>:
{
   222c6:	b508      	push	{r3, lr}
                                  proc->disc_all_dscs.prev_handle + 1,
   222c8:	89c1      	ldrh	r1, [r0, #14]
    rc = ble_att_clt_tx_find_info(proc->conn_handle,
   222ca:	3101      	adds	r1, #1
   222cc:	8a02      	ldrh	r2, [r0, #16]
   222ce:	b289      	uxth	r1, r1
   222d0:	8900      	ldrh	r0, [r0, #8]
   222d2:	f7fc fbcf 	bl	1ea74 <ble_att_clt_tx_find_info>
}
   222d6:	bd08      	pop	{r3, pc}

000222d8 <ble_gattc_disc_all_dscs_resume>:
{
   222d8:	b538      	push	{r3, r4, r5, lr}
   222da:	4605      	mov	r5, r0
    status = ble_gattc_disc_all_dscs_tx(proc);
   222dc:	f7ff fff3 	bl	222c6 <ble_gattc_disc_all_dscs_tx>
    rc = ble_gattc_process_resume_status(proc, status);
   222e0:	4601      	mov	r1, r0
   222e2:	4628      	mov	r0, r5
   222e4:	f7ff fdea 	bl	21ebc <ble_gattc_process_resume_status>
    if (rc != 0) {
   222e8:	4604      	mov	r4, r0
   222ea:	b908      	cbnz	r0, 222f0 <ble_gattc_disc_all_dscs_resume+0x18>
}
   222ec:	4620      	mov	r0, r4
   222ee:	bd38      	pop	{r3, r4, r5, pc}
        ble_gattc_disc_all_dscs_cb(proc, rc, 0, NULL);
   222f0:	2300      	movs	r3, #0
   222f2:	461a      	mov	r2, r3
   222f4:	4601      	mov	r1, r0
   222f6:	4628      	mov	r0, r5
   222f8:	f7ff fc8e 	bl	21c18 <ble_gattc_disc_all_dscs_cb>
        return rc;
   222fc:	e7f6      	b.n	222ec <ble_gattc_disc_all_dscs_resume+0x14>
	...

00022300 <ble_gattc_disc_chr_uuid_tx>:
{
   22300:	b500      	push	{lr}
   22302:	b083      	sub	sp, #12
    ble_uuid16_t uuid = BLE_UUID16_INIT(BLE_ATT_UUID_CHARACTERISTIC);
   22304:	4b07      	ldr	r3, [pc, #28]	; (22324 <ble_gattc_disc_chr_uuid_tx+0x24>)
   22306:	681a      	ldr	r2, [r3, #0]
   22308:	ab02      	add	r3, sp, #8
   2230a:	f843 2d04 	str.w	r2, [r3, #-4]!
                                  proc->disc_chr_uuid.prev_handle + 1,
   2230e:	8c01      	ldrh	r1, [r0, #32]
    rc = ble_att_clt_tx_read_type(proc->conn_handle,
   22310:	3101      	adds	r1, #1
   22312:	8c42      	ldrh	r2, [r0, #34]	; 0x22
   22314:	b289      	uxth	r1, r1
   22316:	8900      	ldrh	r0, [r0, #8]
   22318:	f7fc fbb4 	bl	1ea84 <ble_att_clt_tx_read_type>
}
   2231c:	b003      	add	sp, #12
   2231e:	f85d fb04 	ldr.w	pc, [sp], #4
   22322:	bf00      	nop
   22324:	00032248 	.word	0x00032248

00022328 <ble_gattc_disc_chr_uuid_resume>:
{
   22328:	b538      	push	{r3, r4, r5, lr}
   2232a:	4605      	mov	r5, r0
    status = ble_gattc_disc_chr_uuid_tx(proc);
   2232c:	f7ff ffe8 	bl	22300 <ble_gattc_disc_chr_uuid_tx>
    rc = ble_gattc_process_resume_status(proc, status);
   22330:	4601      	mov	r1, r0
   22332:	4628      	mov	r0, r5
   22334:	f7ff fdc2 	bl	21ebc <ble_gattc_process_resume_status>
    if (rc != 0) {
   22338:	4604      	mov	r4, r0
   2233a:	b908      	cbnz	r0, 22340 <ble_gattc_disc_chr_uuid_resume+0x18>
}
   2233c:	4620      	mov	r0, r4
   2233e:	bd38      	pop	{r3, r4, r5, pc}
        ble_gattc_disc_chr_uuid_cb(proc, rc, 0, NULL);
   22340:	2300      	movs	r3, #0
   22342:	461a      	mov	r2, r3
   22344:	4601      	mov	r1, r0
   22346:	4628      	mov	r0, r5
   22348:	f7ff fc34 	bl	21bb4 <ble_gattc_disc_chr_uuid_cb>
        return rc;
   2234c:	e7f6      	b.n	2233c <ble_gattc_disc_chr_uuid_resume+0x14>
	...

00022350 <ble_gattc_disc_all_chrs_tx>:
{
   22350:	b500      	push	{lr}
   22352:	b083      	sub	sp, #12
    ble_uuid16_t uuid = BLE_UUID16_INIT(BLE_ATT_UUID_CHARACTERISTIC);
   22354:	4b07      	ldr	r3, [pc, #28]	; (22374 <ble_gattc_disc_all_chrs_tx+0x24>)
   22356:	681a      	ldr	r2, [r3, #0]
   22358:	ab02      	add	r3, sp, #8
   2235a:	f843 2d04 	str.w	r2, [r3, #-4]!
                                  proc->disc_all_chrs.prev_handle + 1,
   2235e:	8981      	ldrh	r1, [r0, #12]
    rc = ble_att_clt_tx_read_type(proc->conn_handle,
   22360:	3101      	adds	r1, #1
   22362:	89c2      	ldrh	r2, [r0, #14]
   22364:	b289      	uxth	r1, r1
   22366:	8900      	ldrh	r0, [r0, #8]
   22368:	f7fc fb8c 	bl	1ea84 <ble_att_clt_tx_read_type>
}
   2236c:	b003      	add	sp, #12
   2236e:	f85d fb04 	ldr.w	pc, [sp], #4
   22372:	bf00      	nop
   22374:	00032248 	.word	0x00032248

00022378 <ble_gattc_disc_all_chrs_resume>:
{
   22378:	b538      	push	{r3, r4, r5, lr}
   2237a:	4605      	mov	r5, r0
    status = ble_gattc_disc_all_chrs_tx(proc);
   2237c:	f7ff ffe8 	bl	22350 <ble_gattc_disc_all_chrs_tx>
    rc = ble_gattc_process_resume_status(proc, status);
   22380:	4601      	mov	r1, r0
   22382:	4628      	mov	r0, r5
   22384:	f7ff fd9a 	bl	21ebc <ble_gattc_process_resume_status>
    if (rc != 0) {
   22388:	4604      	mov	r4, r0
   2238a:	b908      	cbnz	r0, 22390 <ble_gattc_disc_all_chrs_resume+0x18>
}
   2238c:	4620      	mov	r0, r4
   2238e:	bd38      	pop	{r3, r4, r5, pc}
        ble_gattc_disc_all_chrs_cb(proc, rc, 0, NULL);
   22390:	2300      	movs	r3, #0
   22392:	461a      	mov	r2, r3
   22394:	4601      	mov	r1, r0
   22396:	4628      	mov	r0, r5
   22398:	f7ff fbda 	bl	21b50 <ble_gattc_disc_all_chrs_cb>
        return rc;
   2239c:	e7f6      	b.n	2238c <ble_gattc_disc_all_chrs_resume+0x14>
	...

000223a0 <ble_gattc_find_inc_svcs_tx>:
{
   223a0:	b500      	push	{lr}
   223a2:	b083      	sub	sp, #12
    ble_uuid16_t uuid = BLE_UUID16_INIT(BLE_ATT_UUID_INCLUDE);
   223a4:	4b09      	ldr	r3, [pc, #36]	; (223cc <ble_gattc_find_inc_svcs_tx+0x2c>)
   223a6:	685b      	ldr	r3, [r3, #4]
   223a8:	9301      	str	r3, [sp, #4]
    if (proc->find_inc_svcs.cur_start == 0) {
   223aa:	8a01      	ldrh	r1, [r0, #16]
   223ac:	b951      	cbnz	r1, 223c4 <ble_gattc_find_inc_svcs_tx+0x24>
                                      proc->find_inc_svcs.prev_handle + 1,
   223ae:	8981      	ldrh	r1, [r0, #12]
        rc = ble_att_clt_tx_read_type(proc->conn_handle,
   223b0:	3101      	adds	r1, #1
   223b2:	ab01      	add	r3, sp, #4
   223b4:	89c2      	ldrh	r2, [r0, #14]
   223b6:	b289      	uxth	r1, r1
   223b8:	8900      	ldrh	r0, [r0, #8]
   223ba:	f7fc fb63 	bl	1ea84 <ble_att_clt_tx_read_type>
}
   223be:	b003      	add	sp, #12
   223c0:	f85d fb04 	ldr.w	pc, [sp], #4
        rc = ble_att_clt_tx_read(proc->conn_handle,
   223c4:	8900      	ldrh	r0, [r0, #8]
   223c6:	f7fc fb61 	bl	1ea8c <ble_att_clt_tx_read>
   223ca:	e7f8      	b.n	223be <ble_gattc_find_inc_svcs_tx+0x1e>
   223cc:	00032248 	.word	0x00032248

000223d0 <ble_gattc_find_inc_svcs_resume>:
{
   223d0:	b538      	push	{r3, r4, r5, lr}
   223d2:	4605      	mov	r5, r0
    status = ble_gattc_find_inc_svcs_tx(proc);
   223d4:	f7ff ffe4 	bl	223a0 <ble_gattc_find_inc_svcs_tx>
    rc = ble_gattc_process_resume_status(proc, status);
   223d8:	4601      	mov	r1, r0
   223da:	4628      	mov	r0, r5
   223dc:	f7ff fd6e 	bl	21ebc <ble_gattc_process_resume_status>
    if (rc != 0) {
   223e0:	4604      	mov	r4, r0
   223e2:	b908      	cbnz	r0, 223e8 <ble_gattc_find_inc_svcs_resume+0x18>
}
   223e4:	4620      	mov	r0, r4
   223e6:	bd38      	pop	{r3, r4, r5, pc}
        ble_gattc_find_inc_svcs_cb(proc, rc, 0, NULL);
   223e8:	2300      	movs	r3, #0
   223ea:	461a      	mov	r2, r3
   223ec:	4601      	mov	r1, r0
   223ee:	4628      	mov	r0, r5
   223f0:	f7ff fb7a 	bl	21ae8 <ble_gattc_find_inc_svcs_cb>
        return rc;
   223f4:	e7f6      	b.n	223e4 <ble_gattc_find_inc_svcs_resume+0x14>

000223f6 <ble_gattc_disc_svc_uuid_tx>:
{
   223f6:	b5f0      	push	{r4, r5, r6, r7, lr}
   223f8:	b087      	sub	sp, #28
   223fa:	4604      	mov	r4, r0
    ble_uuid_flat(&proc->disc_svc_uuid.service_uuid.u, val);
   223fc:	f100 060c 	add.w	r6, r0, #12
   22400:	ad02      	add	r5, sp, #8
   22402:	4629      	mov	r1, r5
   22404:	4630      	mov	r0, r6
   22406:	f006 fd09 	bl	28e1c <ble_uuid_flat>
    rc = ble_att_clt_tx_find_type_value(proc->conn_handle,
   2240a:	8927      	ldrh	r7, [r4, #8]
                                        proc->disc_svc_uuid.prev_handle + 1,
   2240c:	8c24      	ldrh	r4, [r4, #32]
    rc = ble_att_clt_tx_find_type_value(proc->conn_handle,
   2240e:	3401      	adds	r4, #1
   22410:	b2a4      	uxth	r4, r4
   22412:	4630      	mov	r0, r6
   22414:	f006 fd2e 	bl	28e74 <ble_uuid_length>
   22418:	9001      	str	r0, [sp, #4]
   2241a:	9500      	str	r5, [sp, #0]
   2241c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   22420:	f64f 72ff 	movw	r2, #65535	; 0xffff
   22424:	4621      	mov	r1, r4
   22426:	4638      	mov	r0, r7
   22428:	f7fc fb28 	bl	1ea7c <ble_att_clt_tx_find_type_value>
}
   2242c:	b007      	add	sp, #28
   2242e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00022430 <ble_gattc_disc_svc_uuid_resume>:
{
   22430:	b538      	push	{r3, r4, r5, lr}
   22432:	4605      	mov	r5, r0
    status = ble_gattc_disc_svc_uuid_tx(proc);
   22434:	f7ff ffdf 	bl	223f6 <ble_gattc_disc_svc_uuid_tx>
    rc = ble_gattc_process_resume_status(proc, status);
   22438:	4601      	mov	r1, r0
   2243a:	4628      	mov	r0, r5
   2243c:	f7ff fd3e 	bl	21ebc <ble_gattc_process_resume_status>
    if (rc != 0) {
   22440:	4604      	mov	r4, r0
   22442:	b908      	cbnz	r0, 22448 <ble_gattc_disc_svc_uuid_resume+0x18>
}
   22444:	4620      	mov	r0, r4
   22446:	bd38      	pop	{r3, r4, r5, pc}
        ble_gattc_disc_svc_uuid_cb(proc, rc, 0, NULL);
   22448:	2300      	movs	r3, #0
   2244a:	461a      	mov	r2, r3
   2244c:	4601      	mov	r1, r0
   2244e:	4628      	mov	r0, r5
   22450:	f7ff fb18 	bl	21a84 <ble_gattc_disc_svc_uuid_cb>
        return rc;
   22454:	e7f6      	b.n	22444 <ble_gattc_disc_svc_uuid_resume+0x14>
	...

00022458 <ble_gattc_disc_all_svcs_tx>:
{
   22458:	b500      	push	{lr}
   2245a:	b083      	sub	sp, #12
    ble_uuid16_t uuid = BLE_UUID16_INIT(BLE_ATT_UUID_PRIMARY_SERVICE);
   2245c:	4b07      	ldr	r3, [pc, #28]	; (2247c <ble_gattc_disc_all_svcs_tx+0x24>)
   2245e:	689a      	ldr	r2, [r3, #8]
   22460:	ab02      	add	r3, sp, #8
   22462:	f843 2d04 	str.w	r2, [r3, #-4]!
                                        proc->disc_all_svcs.prev_handle + 1,
   22466:	8981      	ldrh	r1, [r0, #12]
    rc = ble_att_clt_tx_read_group_type(proc->conn_handle,
   22468:	3101      	adds	r1, #1
   2246a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   2246e:	b289      	uxth	r1, r1
   22470:	8900      	ldrh	r0, [r0, #8]
   22472:	f7fc fb15 	bl	1eaa0 <ble_att_clt_tx_read_group_type>
}
   22476:	b003      	add	sp, #12
   22478:	f85d fb04 	ldr.w	pc, [sp], #4
   2247c:	00032248 	.word	0x00032248

00022480 <ble_gattc_disc_all_svcs_resume>:
{
   22480:	b538      	push	{r3, r4, r5, lr}
   22482:	4605      	mov	r5, r0
    status = ble_gattc_disc_all_svcs_tx(proc);
   22484:	f7ff ffe8 	bl	22458 <ble_gattc_disc_all_svcs_tx>
    rc = ble_gattc_process_resume_status(proc, status);
   22488:	4601      	mov	r1, r0
   2248a:	4628      	mov	r0, r5
   2248c:	f7ff fd16 	bl	21ebc <ble_gattc_process_resume_status>
    if (rc != 0) {
   22490:	4604      	mov	r4, r0
   22492:	b908      	cbnz	r0, 22498 <ble_gattc_disc_all_svcs_resume+0x18>
}
   22494:	4620      	mov	r0, r4
   22496:	bd38      	pop	{r3, r4, r5, pc}
        ble_gattc_disc_all_svcs_cb(proc, rc, 0, NULL);
   22498:	2300      	movs	r3, #0
   2249a:	461a      	mov	r2, r3
   2249c:	b281      	uxth	r1, r0
   2249e:	4628      	mov	r0, r5
   224a0:	f7ff fabe 	bl	21a20 <ble_gattc_disc_all_svcs_cb>
        return rc;
   224a4:	e7f6      	b.n	22494 <ble_gattc_disc_all_svcs_resume+0x14>

000224a6 <ble_gattc_process_status>:
{
   224a6:	b510      	push	{r4, lr}
   224a8:	4604      	mov	r4, r0
    switch (status) {
   224aa:	b961      	cbnz	r1, 224c6 <ble_gattc_process_status+0x20>
        if (!(proc->flags & BLE_GATTC_PROC_F_STALLED)) {
   224ac:	7ac3      	ldrb	r3, [r0, #11]
   224ae:	f013 0f01 	tst.w	r3, #1
   224b2:	d005      	beq.n	224c0 <ble_gattc_process_status+0x1a>
        ble_gattc_proc_insert(proc);
   224b4:	4620      	mov	r0, r4
   224b6:	f7ff fd9b 	bl	21ff0 <ble_gattc_proc_insert>
        ble_hs_timer_resched();
   224ba:	f001 fbd9 	bl	23c70 <ble_hs_timer_resched>
}
   224be:	bd10      	pop	{r4, pc}
            ble_gattc_proc_set_exp_timer(proc);
   224c0:	f7ff fd06 	bl	21ed0 <ble_gattc_proc_set_exp_timer>
   224c4:	e7f6      	b.n	224b4 <ble_gattc_process_status+0xe>
        ble_gattc_proc_free(proc);
   224c6:	f7ff fddb 	bl	22080 <ble_gattc_proc_free>
}
   224ca:	e7f8      	b.n	224be <ble_gattc_process_status+0x18>

000224cc <ble_gattc_resume_procs>:
{
   224cc:	b510      	push	{r4, lr}
   224ce:	b082      	sub	sp, #8
    ble_gattc_resume_at = 0;
   224d0:	4b0d      	ldr	r3, [pc, #52]	; (22508 <ble_gattc_resume_procs+0x3c>)
   224d2:	2200      	movs	r2, #0
   224d4:	601a      	str	r2, [r3, #0]
    ble_gattc_extract_stalled(&stall_list);
   224d6:	4668      	mov	r0, sp
   224d8:	f7ff fd66 	bl	21fa8 <ble_gattc_extract_stalled>
    STAILQ_FOREACH(proc, &stall_list, next) {
   224dc:	9c00      	ldr	r4, [sp, #0]
   224de:	e00e      	b.n	224fe <ble_gattc_resume_procs+0x32>
        resume_cb = ble_gattc_resume_dispatch_get(proc->op);
   224e0:	7aa0      	ldrb	r0, [r4, #10]
   224e2:	f7ff fa27 	bl	21934 <ble_gattc_resume_dispatch_get>
   224e6:	4602      	mov	r2, r0
        proc->flags &= ~BLE_GATTC_PROC_F_STALLED;
   224e8:	7ae3      	ldrb	r3, [r4, #11]
   224ea:	f023 0301 	bic.w	r3, r3, #1
   224ee:	72e3      	strb	r3, [r4, #11]
        rc = resume_cb(proc);
   224f0:	4620      	mov	r0, r4
   224f2:	4790      	blx	r2
        ble_gattc_process_status(proc, rc);
   224f4:	4601      	mov	r1, r0
   224f6:	4620      	mov	r0, r4
   224f8:	f7ff ffd5 	bl	224a6 <ble_gattc_process_status>
    STAILQ_FOREACH(proc, &stall_list, next) {
   224fc:	6824      	ldr	r4, [r4, #0]
   224fe:	2c00      	cmp	r4, #0
   22500:	d1ee      	bne.n	224e0 <ble_gattc_resume_procs+0x14>
}
   22502:	b002      	add	sp, #8
   22504:	bd10      	pop	{r4, pc}
   22506:	bf00      	nop
   22508:	200027f4 	.word	0x200027f4

0002250c <ble_gattc_proc_alloc>:
{
   2250c:	b510      	push	{r4, lr}
    proc = os_memblock_get(&ble_gattc_proc_pool);
   2250e:	4805      	ldr	r0, [pc, #20]	; (22524 <ble_gattc_proc_alloc+0x18>)
   22510:	f7eb fb7c 	bl	dc0c <os_memblock_get>
    if (proc != NULL) {
   22514:	4604      	mov	r4, r0
   22516:	b118      	cbz	r0, 22520 <ble_gattc_proc_alloc+0x14>
        memset(proc, 0, sizeof *proc);
   22518:	2238      	movs	r2, #56	; 0x38
   2251a:	2100      	movs	r1, #0
   2251c:	f7ec fa68 	bl	e9f0 <memset>
}
   22520:	4620      	mov	r0, r4
   22522:	bd10      	pop	{r4, pc}
   22524:	200027d0 	.word	0x200027d0

00022528 <ble_gattc_log_proc_init>:
{
   22528:	b508      	push	{r3, lr}
    BLE_HS_LOG(INFO, "GATT procedure initiated: %s", name);
   2252a:	4603      	mov	r3, r0
   2252c:	4a02      	ldr	r2, [pc, #8]	; (22538 <ble_gattc_log_proc_init+0x10>)
   2252e:	2101      	movs	r1, #1
   22530:	2004      	movs	r0, #4
   22532:	f7ef f8d5 	bl	116e0 <modlog_printf>
}
   22536:	bd08      	pop	{r3, pc}
   22538:	000322d8 	.word	0x000322d8

0002253c <ble_gattc_log_notify>:
{
   2253c:	b510      	push	{r4, lr}
   2253e:	4604      	mov	r4, r0
    ble_gattc_log_proc_init("notify; ");
   22540:	4804      	ldr	r0, [pc, #16]	; (22554 <ble_gattc_log_notify+0x18>)
   22542:	f7ff fff1 	bl	22528 <ble_gattc_log_proc_init>
    BLE_HS_LOG(INFO, "att_handle=%d\n", att_handle);
   22546:	4623      	mov	r3, r4
   22548:	4a03      	ldr	r2, [pc, #12]	; (22558 <ble_gattc_log_notify+0x1c>)
   2254a:	2101      	movs	r1, #1
   2254c:	2004      	movs	r0, #4
   2254e:	f7ef f8c7 	bl	116e0 <modlog_printf>
}
   22552:	bd10      	pop	{r4, pc}
   22554:	000322bc 	.word	0x000322bc
   22558:	000322c8 	.word	0x000322c8

0002255c <ble_gattc_log_indicate>:
{
   2255c:	b510      	push	{r4, lr}
   2255e:	4604      	mov	r4, r0
    ble_gattc_log_proc_init("indicate; ");
   22560:	4804      	ldr	r0, [pc, #16]	; (22574 <ble_gattc_log_indicate+0x18>)
   22562:	f7ff ffe1 	bl	22528 <ble_gattc_log_proc_init>
    BLE_HS_LOG(INFO, "att_handle=%d\n", att_handle);
   22566:	4623      	mov	r3, r4
   22568:	4a03      	ldr	r2, [pc, #12]	; (22578 <ble_gattc_log_indicate+0x1c>)
   2256a:	2101      	movs	r1, #1
   2256c:	2004      	movs	r0, #4
   2256e:	f7ef f8b7 	bl	116e0 <modlog_printf>
}
   22572:	bd10      	pop	{r4, pc}
   22574:	000322b0 	.word	0x000322b0
   22578:	000322c8 	.word	0x000322c8

0002257c <ble_gattc_indicate_err>:
{
   2257c:	b538      	push	{r3, r4, r5, lr}
   2257e:	4604      	mov	r4, r0
   22580:	460d      	mov	r5, r1
    if (status != BLE_HS_ENOTCONN) {
   22582:	2907      	cmp	r1, #7
   22584:	d004      	beq.n	22590 <ble_gattc_indicate_err+0x14>
        rc = ble_gatts_rx_indicate_ack(proc->conn_handle,
   22586:	8981      	ldrh	r1, [r0, #12]
   22588:	8900      	ldrh	r0, [r0, #8]
   2258a:	f001 f849 	bl	23620 <ble_gatts_rx_indicate_ack>
        if (rc != 0) {
   2258e:	b940      	cbnz	r0, 225a2 <ble_gattc_indicate_err+0x26>
    ble_gap_notify_tx_event(status, proc->conn_handle,
   22590:	2301      	movs	r3, #1
   22592:	89a2      	ldrh	r2, [r4, #12]
   22594:	8921      	ldrh	r1, [r4, #8]
   22596:	4628      	mov	r0, r5
   22598:	f7ff f875 	bl	21686 <ble_gap_notify_tx_event>
    ble_gatts_send_next_indicate(proc->conn_handle);
   2259c:	8920      	ldrh	r0, [r4, #8]
   2259e:	f001 f813 	bl	235c8 <ble_gatts_send_next_indicate>
}
   225a2:	bd38      	pop	{r3, r4, r5, pc}

000225a4 <ble_gattc_indicate_rx_rsp>:
 * Handles an incoming handle-value-confirmation for the specified indication
 * proc.
 */
static void
ble_gattc_indicate_rx_rsp(struct ble_gattc_proc *proc)
{
   225a4:	b510      	push	{r4, lr}
   225a6:	4604      	mov	r4, r0
    int rc;

    ble_gattc_dbg_assert_proc_not_inserted(proc);

    rc = ble_gatts_rx_indicate_ack(proc->conn_handle,
   225a8:	8981      	ldrh	r1, [r0, #12]
   225aa:	8900      	ldrh	r0, [r0, #8]
   225ac:	f001 f838 	bl	23620 <ble_gatts_rx_indicate_ack>
                                   proc->indicate.chr_val_handle);
    if (rc != 0) {
   225b0:	b100      	cbz	r0, 225b4 <ble_gattc_indicate_rx_rsp+0x10>
    ble_gap_notify_tx_event(BLE_HS_EDONE, proc->conn_handle,
                            proc->indicate.chr_val_handle, 1);

    /* Send the next indication if one is pending. */
    ble_gatts_send_next_indicate(proc->conn_handle);
}
   225b2:	bd10      	pop	{r4, pc}
    ble_gap_notify_tx_event(BLE_HS_EDONE, proc->conn_handle,
   225b4:	2301      	movs	r3, #1
   225b6:	89a2      	ldrh	r2, [r4, #12]
   225b8:	8921      	ldrh	r1, [r4, #8]
   225ba:	200e      	movs	r0, #14
   225bc:	f7ff f863 	bl	21686 <ble_gap_notify_tx_event>
    ble_gatts_send_next_indicate(proc->conn_handle);
   225c0:	8920      	ldrh	r0, [r4, #8]
   225c2:	f001 f801 	bl	235c8 <ble_gatts_send_next_indicate>
   225c6:	e7f4      	b.n	225b2 <ble_gattc_indicate_rx_rsp+0xe>

000225c8 <ble_gattc_timer>:
{
   225c8:	b530      	push	{r4, r5, lr}
   225ca:	b083      	sub	sp, #12
    ticks_until_exp = ble_gattc_extract_expired(&exp_list);
   225cc:	4668      	mov	r0, sp
   225ce:	f7ff fcd5 	bl	21f7c <ble_gattc_extract_expired>
   225d2:	4605      	mov	r5, r0
    while ((proc = STAILQ_FIRST(&exp_list)) != NULL) {
   225d4:	e002      	b.n	225dc <ble_gattc_timer+0x14>
        ble_gattc_proc_free(proc);
   225d6:	4620      	mov	r0, r4
   225d8:	f7ff fd52 	bl	22080 <ble_gattc_proc_free>
    while ((proc = STAILQ_FIRST(&exp_list)) != NULL) {
   225dc:	9c00      	ldr	r4, [sp, #0]
   225de:	b1a4      	cbz	r4, 2260a <ble_gattc_timer+0x42>
        STATS_INC(ble_gattc_stats, proc_timeout);
   225e0:	4a12      	ldr	r2, [pc, #72]	; (2262c <ble_gattc_timer+0x64>)
   225e2:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
   225e6:	3301      	adds	r3, #1
   225e8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        ble_gattc_proc_timeout(proc);
   225ec:	4620      	mov	r0, r4
   225ee:	f7ff f9d2 	bl	21996 <ble_gattc_proc_timeout>
        ble_gap_terminate(proc->conn_handle, BLE_ERR_REM_USER_CONN_TERM);
   225f2:	2113      	movs	r1, #19
   225f4:	8920      	ldrh	r0, [r4, #8]
   225f6:	f7fe fd27 	bl	21048 <ble_gap_terminate>
        STAILQ_REMOVE_HEAD(&exp_list, next);
   225fa:	9b00      	ldr	r3, [sp, #0]
   225fc:	681b      	ldr	r3, [r3, #0]
   225fe:	9300      	str	r3, [sp, #0]
   22600:	2b00      	cmp	r3, #0
   22602:	d1e8      	bne.n	225d6 <ble_gattc_timer+0xe>
   22604:	f8cd d004 	str.w	sp, [sp, #4]
   22608:	e7e5      	b.n	225d6 <ble_gattc_timer+0xe>
    ticks_until_resume = ble_gattc_ticks_until_resume();
   2260a:	f7ff fc69 	bl	21ee0 <ble_gattc_ticks_until_resume>
    if (ticks_until_resume == 0) {
   2260e:	4603      	mov	r3, r0
   22610:	b128      	cbz	r0, 2261e <ble_gattc_timer+0x56>
}
   22612:	42ab      	cmp	r3, r5
   22614:	bfa8      	it	ge
   22616:	462b      	movge	r3, r5
   22618:	4618      	mov	r0, r3
   2261a:	b003      	add	sp, #12
   2261c:	bd30      	pop	{r4, r5, pc}
        ble_gattc_resume_procs();
   2261e:	f7ff ff55 	bl	224cc <ble_gattc_resume_procs>
        ticks_until_resume = ble_gattc_ticks_until_resume();
   22622:	f7ff fc5d 	bl	21ee0 <ble_gattc_ticks_until_resume>
   22626:	4603      	mov	r3, r0
   22628:	e7f3      	b.n	22612 <ble_gattc_timer+0x4a>
   2262a:	bf00      	nop
   2262c:	20003fec 	.word	0x20003fec

00022630 <ble_gattc_notify_custom>:
{
   22630:	b5f0      	push	{r4, r5, r6, r7, lr}
   22632:	b083      	sub	sp, #12
   22634:	4607      	mov	r7, r0
   22636:	460d      	mov	r5, r1
   22638:	4614      	mov	r4, r2
    STATS_INC(ble_gattc_stats, notify);
   2263a:	4a1c      	ldr	r2, [pc, #112]	; (226ac <ble_gattc_notify_custom+0x7c>)
   2263c:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
   22640:	3301      	adds	r3, #1
   22642:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    ble_gattc_log_notify(chr_val_handle);
   22646:	4608      	mov	r0, r1
   22648:	f7ff ff78 	bl	2253c <ble_gattc_log_notify>
    if (txom == NULL) {
   2264c:	b1cc      	cbz	r4, 22682 <ble_gattc_notify_custom+0x52>
    rc = ble_att_clt_tx_notify(conn_handle, chr_val_handle, txom);
   2264e:	4622      	mov	r2, r4
   22650:	4629      	mov	r1, r5
   22652:	4638      	mov	r0, r7
   22654:	f7fc fa32 	bl	1eabc <ble_att_clt_tx_notify>
    if (rc != 0) {
   22658:	4606      	mov	r6, r0
   2265a:	b320      	cbz	r0, 226a6 <ble_gattc_notify_custom+0x76>
    txom = NULL;
   2265c:	2400      	movs	r4, #0
        STATS_INC(ble_gattc_stats, notify_fail);
   2265e:	4a13      	ldr	r2, [pc, #76]	; (226ac <ble_gattc_notify_custom+0x7c>)
   22660:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
   22664:	3301      	adds	r3, #1
   22666:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    ble_gap_notify_tx_event(rc, conn_handle, chr_val_handle, 0);
   2266a:	2300      	movs	r3, #0
   2266c:	462a      	mov	r2, r5
   2266e:	4639      	mov	r1, r7
   22670:	4630      	mov	r0, r6
   22672:	f7ff f808 	bl	21686 <ble_gap_notify_tx_event>
    os_mbuf_free_chain(txom);
   22676:	4620      	mov	r0, r4
   22678:	f7ea fed2 	bl	d420 <os_mbuf_free_chain>
}
   2267c:	4630      	mov	r0, r6
   2267e:	b003      	add	sp, #12
   22680:	bdf0      	pop	{r4, r5, r6, r7, pc}
        txom = ble_hs_mbuf_att_pkt();
   22682:	f002 ffca 	bl	2561a <ble_hs_mbuf_att_pkt>
        if (txom == NULL) {
   22686:	4604      	mov	r4, r0
   22688:	b158      	cbz	r0, 226a2 <ble_gattc_notify_custom+0x72>
        rc = ble_att_svr_read_handle(BLE_HS_CONN_HANDLE_NONE,
   2268a:	2200      	movs	r2, #0
   2268c:	9200      	str	r2, [sp, #0]
   2268e:	4603      	mov	r3, r0
   22690:	4629      	mov	r1, r5
   22692:	f64f 70ff 	movw	r0, #65535	; 0xffff
   22696:	f7fd f925 	bl	1f8e4 <ble_att_svr_read_handle>
        if (rc != 0) {
   2269a:	2800      	cmp	r0, #0
   2269c:	d0d7      	beq.n	2264e <ble_gattc_notify_custom+0x1e>
            rc = BLE_HS_EAPP;
   2269e:	2609      	movs	r6, #9
   226a0:	e7dd      	b.n	2265e <ble_gattc_notify_custom+0x2e>
            rc = BLE_HS_ENOMEM;
   226a2:	2606      	movs	r6, #6
   226a4:	e7db      	b.n	2265e <ble_gattc_notify_custom+0x2e>
    txom = NULL;
   226a6:	2400      	movs	r4, #0
   226a8:	e7df      	b.n	2266a <ble_gattc_notify_custom+0x3a>
   226aa:	bf00      	nop
   226ac:	20003fec 	.word	0x20003fec

000226b0 <ble_gattc_notify>:
{
   226b0:	b508      	push	{r3, lr}
    rc = ble_gattc_notify_custom(conn_handle, chr_val_handle, NULL);
   226b2:	2200      	movs	r2, #0
   226b4:	f7ff ffbc 	bl	22630 <ble_gattc_notify_custom>
}
   226b8:	bd08      	pop	{r3, pc}

000226ba <ble_gatts_indicate_fail_notconn>:
 * Causes the indication in progress for the specified connection (if any) to
 * fail with a status code of BLE_HS_ENOTCONN;
 */
void
ble_gatts_indicate_fail_notconn(uint16_t conn_handle)
{
   226ba:	b508      	push	{r3, lr}
    ble_gattc_fail_procs(conn_handle, BLE_GATT_OP_INDICATE, BLE_HS_ENOTCONN);
   226bc:	2207      	movs	r2, #7
   226be:	210e      	movs	r1, #14
   226c0:	f7ff fd00 	bl	220c4 <ble_gattc_fail_procs>
}
   226c4:	bd08      	pop	{r3, pc}
	...

000226c8 <ble_gattc_indicate_custom>:

int
ble_gattc_indicate_custom(uint16_t conn_handle, uint16_t chr_val_handle,
                          struct os_mbuf *txom)
{
   226c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   226cc:	b082      	sub	sp, #8
   226ce:	4680      	mov	r8, r0
   226d0:	460d      	mov	r5, r1
   226d2:	4616      	mov	r6, r2

    struct ble_gattc_proc *proc;
    struct ble_hs_conn *conn;
    int rc;

    STATS_INC(ble_gattc_stats, indicate);
   226d4:	4a29      	ldr	r2, [pc, #164]	; (2277c <ble_gattc_indicate_custom+0xb4>)
   226d6:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
   226da:	3301      	adds	r3, #1
   226dc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

    proc = ble_gattc_proc_alloc();
   226e0:	f7ff ff14 	bl	2250c <ble_gattc_proc_alloc>
    if (proc == NULL) {
   226e4:	4607      	mov	r7, r0
   226e6:	b368      	cbz	r0, 22744 <ble_gattc_indicate_custom+0x7c>
        rc = BLE_HS_ENOMEM;
        goto done;
    }

    proc->op = BLE_GATT_OP_INDICATE;
   226e8:	230e      	movs	r3, #14
   226ea:	7283      	strb	r3, [r0, #10]
    proc->conn_handle = conn_handle;
   226ec:	f8a0 8008 	strh.w	r8, [r0, #8]
    proc->indicate.chr_val_handle = chr_val_handle;
   226f0:	8185      	strh	r5, [r0, #12]

    ble_gattc_log_indicate(chr_val_handle);
   226f2:	4628      	mov	r0, r5
   226f4:	f7ff ff32 	bl	2255c <ble_gattc_log_indicate>

    if (txom == NULL) {
   226f8:	b14e      	cbz	r6, 2270e <ble_gattc_indicate_custom+0x46>
            rc = BLE_HS_EAPP;
            goto done;
        }
    }

    rc = ble_att_clt_tx_indicate(conn_handle, chr_val_handle, txom);
   226fa:	4632      	mov	r2, r6
   226fc:	4629      	mov	r1, r5
   226fe:	4640      	mov	r0, r8
   22700:	f7fc f9fc 	bl	1eafc <ble_att_clt_tx_indicate>
    txom = NULL;
    if (rc != 0) {
   22704:	4604      	mov	r4, r0
   22706:	b190      	cbz	r0, 2272e <ble_gattc_indicate_custom+0x66>
        conn->bhc_gatt_svr.indicate_val_handle = chr_val_handle;
    }
    ble_hs_unlock();

done:
    if (rc != 0) {
   22708:	b3b4      	cbz	r4, 22778 <ble_gattc_indicate_custom+0xb0>
   2270a:	2600      	movs	r6, #0
   2270c:	e01b      	b.n	22746 <ble_gattc_indicate_custom+0x7e>
        txom = ble_hs_mbuf_att_pkt();
   2270e:	f002 ff84 	bl	2561a <ble_hs_mbuf_att_pkt>
        if (txom == NULL) {
   22712:	4606      	mov	r6, r0
   22714:	b370      	cbz	r0, 22774 <ble_gattc_indicate_custom+0xac>
        rc = ble_att_svr_read_handle(BLE_HS_CONN_HANDLE_NONE, chr_val_handle,
   22716:	2200      	movs	r2, #0
   22718:	9200      	str	r2, [sp, #0]
   2271a:	4603      	mov	r3, r0
   2271c:	4629      	mov	r1, r5
   2271e:	f64f 70ff 	movw	r0, #65535	; 0xffff
   22722:	f7fd f8df 	bl	1f8e4 <ble_att_svr_read_handle>
        if (rc != 0) {
   22726:	2800      	cmp	r0, #0
   22728:	d0e7      	beq.n	226fa <ble_gattc_indicate_custom+0x32>
            rc = BLE_HS_EAPP;
   2272a:	2409      	movs	r4, #9
   2272c:	e00b      	b.n	22746 <ble_gattc_indicate_custom+0x7e>
    ble_hs_lock();
   2272e:	f001 f9a7 	bl	23a80 <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
   22732:	4640      	mov	r0, r8
   22734:	f001 fff4 	bl	24720 <ble_hs_conn_find>
    if (conn != NULL) {
   22738:	b108      	cbz	r0, 2273e <ble_gattc_indicate_custom+0x76>
        conn->bhc_gatt_svr.indicate_val_handle = chr_val_handle;
   2273a:	f8a0 5054 	strh.w	r5, [r0, #84]	; 0x54
    ble_hs_unlock();
   2273e:	f001 f9a3 	bl	23a88 <ble_hs_unlock>
   22742:	e7e1      	b.n	22708 <ble_gattc_indicate_custom+0x40>
        rc = BLE_HS_ENOMEM;
   22744:	2406      	movs	r4, #6
        STATS_INC(ble_gattc_stats, indicate_fail);
   22746:	4a0d      	ldr	r2, [pc, #52]	; (2277c <ble_gattc_indicate_custom+0xb4>)
   22748:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
   2274c:	3301      	adds	r3, #1
   2274e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Tell the application that an indication transmission was attempted. */
    ble_gap_notify_tx_event(rc, conn_handle, chr_val_handle, 1);
   22752:	2301      	movs	r3, #1
   22754:	462a      	mov	r2, r5
   22756:	4641      	mov	r1, r8
   22758:	4620      	mov	r0, r4
   2275a:	f7fe ff94 	bl	21686 <ble_gap_notify_tx_event>

    ble_gattc_process_status(proc, rc);
   2275e:	4621      	mov	r1, r4
   22760:	4638      	mov	r0, r7
   22762:	f7ff fea0 	bl	224a6 <ble_gattc_process_status>
    os_mbuf_free_chain(txom);
   22766:	4630      	mov	r0, r6
   22768:	f7ea fe5a 	bl	d420 <os_mbuf_free_chain>
    return rc;
}
   2276c:	4620      	mov	r0, r4
   2276e:	b002      	add	sp, #8
   22770:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            rc = BLE_HS_ENOMEM;
   22774:	2406      	movs	r4, #6
   22776:	e7e6      	b.n	22746 <ble_gattc_indicate_custom+0x7e>
   22778:	2600      	movs	r6, #0
   2277a:	e7ea      	b.n	22752 <ble_gattc_indicate_custom+0x8a>
   2277c:	20003fec 	.word	0x20003fec

00022780 <ble_gattc_indicate>:

int
ble_gattc_indicate(uint16_t conn_handle, uint16_t chr_val_handle)
{
   22780:	b508      	push	{r3, lr}
    return ble_gattc_indicate_custom(conn_handle, chr_val_handle, NULL);
   22782:	2200      	movs	r2, #0
   22784:	f7ff ffa0 	bl	226c8 <ble_gattc_indicate_custom>
}
   22788:	bd08      	pop	{r3, pc}

0002278a <ble_gattc_rx_err>:
 * Dispatches an incoming ATT error-response to the appropriate active GATT
 * procedure.
 */
void
ble_gattc_rx_err(uint16_t conn_handle, uint16_t handle, uint16_t status)
{
   2278a:	b570      	push	{r4, r5, r6, lr}
   2278c:	460e      	mov	r6, r1
   2278e:	4615      	mov	r5, r2
    struct ble_gattc_proc *proc;
    ble_gattc_err_fn *err_cb;

    proc = ble_gattc_extract_first_by_conn_op(conn_handle, BLE_GATT_OP_NONE);
   22790:	21ff      	movs	r1, #255	; 0xff
   22792:	f7ff fc23 	bl	21fdc <ble_gattc_extract_first_by_conn_op>
    if (proc != NULL) {
   22796:	b168      	cbz	r0, 227b4 <ble_gattc_rx_err+0x2a>
   22798:	4604      	mov	r4, r0
        err_cb = ble_gattc_err_dispatch_get(proc->op);
   2279a:	7a80      	ldrb	r0, [r0, #10]
   2279c:	f7ff f8c4 	bl	21928 <ble_gattc_err_dispatch_get>
        if (err_cb != NULL) {
   227a0:	4603      	mov	r3, r0
   227a2:	b120      	cbz	r0, 227ae <ble_gattc_rx_err+0x24>
            err_cb(proc, BLE_HS_ERR_ATT_BASE + status, handle);
   227a4:	4632      	mov	r2, r6
   227a6:	f505 7180 	add.w	r1, r5, #256	; 0x100
   227aa:	4620      	mov	r0, r4
   227ac:	4798      	blx	r3
        }
        ble_gattc_proc_free(proc);
   227ae:	4620      	mov	r0, r4
   227b0:	f7ff fc66 	bl	22080 <ble_gattc_proc_free>
    }
}
   227b4:	bd70      	pop	{r4, r5, r6, pc}

000227b6 <ble_gattc_rx_mtu>:
 * Dispatches an incoming ATT exchange-mtu-response to the appropriate active
 * GATT procedure.
 */
void
ble_gattc_rx_mtu(uint16_t conn_handle, int status, uint16_t chan_mtu)
{
   227b6:	b570      	push	{r4, r5, r6, lr}
   227b8:	460d      	mov	r5, r1
   227ba:	4616      	mov	r6, r2
    struct ble_gattc_proc *proc;

    proc = ble_gattc_extract_first_by_conn_op(conn_handle, BLE_GATT_OP_MTU);
   227bc:	2100      	movs	r1, #0
   227be:	f7ff fc0d 	bl	21fdc <ble_gattc_extract_first_by_conn_op>
    if (proc != NULL) {
   227c2:	b148      	cbz	r0, 227d8 <ble_gattc_rx_mtu+0x22>
   227c4:	4604      	mov	r4, r0
        ble_gattc_mtu_cb(proc, status, 0, chan_mtu);
   227c6:	4633      	mov	r3, r6
   227c8:	2200      	movs	r2, #0
   227ca:	4629      	mov	r1, r5
   227cc:	f7ff f8fc 	bl	219c8 <ble_gattc_mtu_cb>
        ble_gattc_process_status(proc, BLE_HS_EDONE);
   227d0:	210e      	movs	r1, #14
   227d2:	4620      	mov	r0, r4
   227d4:	f7ff fe67 	bl	224a6 <ble_gattc_process_status>
    }
}
   227d8:	bd70      	pop	{r4, r5, r6, pc}

000227da <ble_gattc_rx_indicate_rsp>:
 * Dispatches an incoming ATT handle-value-confirmation to the appropriate
 * active GATT procedure.
 */
void
ble_gattc_rx_indicate_rsp(uint16_t conn_handle)
{
   227da:	b510      	push	{r4, lr}
    return;
#endif

    struct ble_gattc_proc *proc;

    proc = ble_gattc_extract_first_by_conn_op(conn_handle,
   227dc:	210e      	movs	r1, #14
   227de:	f7ff fbfd 	bl	21fdc <ble_gattc_extract_first_by_conn_op>
                                              BLE_GATT_OP_INDICATE);
    if (proc != NULL) {
   227e2:	b130      	cbz	r0, 227f2 <ble_gattc_rx_indicate_rsp+0x18>
   227e4:	4604      	mov	r4, r0
        ble_gattc_indicate_rx_rsp(proc);
   227e6:	f7ff fedd 	bl	225a4 <ble_gattc_indicate_rx_rsp>
        ble_gattc_process_status(proc, BLE_HS_EDONE);
   227ea:	210e      	movs	r1, #14
   227ec:	4620      	mov	r0, r4
   227ee:	f7ff fe5a 	bl	224a6 <ble_gattc_process_status>
    }
}
   227f2:	bd10      	pop	{r4, pc}

000227f4 <ble_gattc_connection_broken>:
 * @param conn_handle           The handle of the connection that was
 *                                  terminated.
 */
void
ble_gattc_connection_broken(uint16_t conn_handle)
{
   227f4:	b508      	push	{r3, lr}
    ble_gattc_fail_procs(conn_handle, BLE_GATT_OP_NONE, BLE_HS_ENOTCONN);
   227f6:	2207      	movs	r2, #7
   227f8:	21ff      	movs	r1, #255	; 0xff
   227fa:	f7ff fc63 	bl	220c4 <ble_gattc_fail_procs>
}
   227fe:	bd08      	pop	{r3, pc}

00022800 <ble_gattc_init>:
    return !STAILQ_EMPTY(&ble_gattc_procs);
}

int
ble_gattc_init(void)
{
   22800:	b500      	push	{lr}
   22802:	b083      	sub	sp, #12
    int rc;

    STAILQ_INIT(&ble_gattc_procs);
   22804:	4b0f      	ldr	r3, [pc, #60]	; (22844 <ble_gattc_init+0x44>)
   22806:	2200      	movs	r2, #0
   22808:	601a      	str	r2, [r3, #0]
   2280a:	605b      	str	r3, [r3, #4]

    if (MYNEWT_VAL(BLE_GATT_MAX_PROCS) > 0) {
        rc = os_mempool_init(&ble_gattc_proc_pool,
   2280c:	4b0e      	ldr	r3, [pc, #56]	; (22848 <ble_gattc_init+0x48>)
   2280e:	9300      	str	r3, [sp, #0]
   22810:	4b0e      	ldr	r3, [pc, #56]	; (2284c <ble_gattc_init+0x4c>)
   22812:	2238      	movs	r2, #56	; 0x38
   22814:	2104      	movs	r1, #4
   22816:	480e      	ldr	r0, [pc, #56]	; (22850 <ble_gattc_init+0x50>)
   22818:	f7eb f9b4 	bl	db84 <os_mempool_init>
   2281c:	4603      	mov	r3, r0
                             MYNEWT_VAL(BLE_GATT_MAX_PROCS),
                             sizeof (struct ble_gattc_proc),
                             ble_gattc_proc_mem,
                             "ble_gattc_proc_pool");
        if (rc != 0) {
   2281e:	b118      	cbz	r0, 22828 <ble_gattc_init+0x28>
    if (rc != 0) {
        return BLE_HS_EOS;
    }

    return 0;
}
   22820:	4618      	mov	r0, r3
   22822:	b003      	add	sp, #12
   22824:	f85d fb04 	ldr.w	pc, [sp], #4
    rc = stats_init_and_reg(
   22828:	4b0a      	ldr	r3, [pc, #40]	; (22854 <ble_gattc_init+0x54>)
   2282a:	9301      	str	r3, [sp, #4]
   2282c:	2300      	movs	r3, #0
   2282e:	9300      	str	r3, [sp, #0]
   22830:	2223      	movs	r2, #35	; 0x23
   22832:	2104      	movs	r1, #4
   22834:	4808      	ldr	r0, [pc, #32]	; (22858 <ble_gattc_init+0x58>)
   22836:	f7ef fcd1 	bl	121dc <stats_init_and_reg>
    if (rc != 0) {
   2283a:	4603      	mov	r3, r0
   2283c:	2800      	cmp	r0, #0
   2283e:	d0ef      	beq.n	22820 <ble_gattc_init+0x20>
        return BLE_HS_EOS;
   22840:	230b      	movs	r3, #11
   22842:	e7ed      	b.n	22820 <ble_gattc_init+0x20>
   22844:	200027ec 	.word	0x200027ec
   22848:	00032290 	.word	0x00032290
   2284c:	200026f0 	.word	0x200026f0
   22850:	200027d0 	.word	0x200027d0
   22854:	000322a4 	.word	0x000322a4
   22858:	20003fec 	.word	0x20003fec

0002285c <ble_gatts_chr_clt_cfg_allowed>:
ble_gatts_chr_clt_cfg_allowed(const struct ble_gatt_chr_def *chr)
{
    uint16_t flags;

    flags = 0;
    if (chr->flags & BLE_GATT_CHR_F_NOTIFY) {
   2285c:	8a03      	ldrh	r3, [r0, #16]
   2285e:	f013 0f10 	tst.w	r3, #16
   22862:	d106      	bne.n	22872 <ble_gatts_chr_clt_cfg_allowed+0x16>
    flags = 0;
   22864:	2000      	movs	r0, #0
        flags |= BLE_GATTS_CLT_CFG_F_NOTIFY;
    }
    if (chr->flags & BLE_GATT_CHR_F_INDICATE) {
   22866:	f013 0f20 	tst.w	r3, #32
   2286a:	d001      	beq.n	22870 <ble_gatts_chr_clt_cfg_allowed+0x14>
        flags |= BLE_GATTS_CLT_CFG_F_INDICATE;
   2286c:	f040 0002 	orr.w	r0, r0, #2
    }

    return flags;
}
   22870:	4770      	bx	lr
        flags |= BLE_GATTS_CLT_CFG_F_NOTIFY;
   22872:	2001      	movs	r0, #1
   22874:	e7f7      	b.n	22866 <ble_gatts_chr_clt_cfg_allowed+0xa>

00022876 <ble_gatts_att_flags_from_chr_flags>:
ble_gatts_att_flags_from_chr_flags(ble_gatt_chr_flags chr_flags)
{
    uint8_t att_flags;

    att_flags = 0;
    if (chr_flags & BLE_GATT_CHR_F_READ) {
   22876:	f010 0f02 	tst.w	r0, #2
   2287a:	d125      	bne.n	228c8 <ble_gatts_att_flags_from_chr_flags+0x52>
    att_flags = 0;
   2287c:	2300      	movs	r3, #0
        att_flags |= BLE_ATT_F_READ;
    }
    if (chr_flags & (BLE_GATT_CHR_F_WRITE_NO_RSP | BLE_GATT_CHR_F_WRITE)) {
   2287e:	f010 0f0c 	tst.w	r0, #12
   22882:	d001      	beq.n	22888 <ble_gatts_att_flags_from_chr_flags+0x12>
        att_flags |= BLE_ATT_F_WRITE;
   22884:	f043 0302 	orr.w	r3, r3, #2
    }
    if (chr_flags & BLE_GATT_CHR_F_READ_ENC) {
   22888:	f410 7f00 	tst.w	r0, #512	; 0x200
   2288c:	d001      	beq.n	22892 <ble_gatts_att_flags_from_chr_flags+0x1c>
        att_flags |= BLE_ATT_F_READ_ENC;
   2288e:	f043 0304 	orr.w	r3, r3, #4
    }
    if (chr_flags & BLE_GATT_CHR_F_READ_AUTHEN) {
   22892:	f410 6f80 	tst.w	r0, #1024	; 0x400
   22896:	d001      	beq.n	2289c <ble_gatts_att_flags_from_chr_flags+0x26>
        att_flags |= BLE_ATT_F_READ_AUTHEN;
   22898:	f043 0308 	orr.w	r3, r3, #8
    }
    if (chr_flags & BLE_GATT_CHR_F_READ_AUTHOR) {
   2289c:	f410 6f00 	tst.w	r0, #2048	; 0x800
   228a0:	d001      	beq.n	228a6 <ble_gatts_att_flags_from_chr_flags+0x30>
        att_flags |= BLE_ATT_F_READ_AUTHOR;
   228a2:	f043 0310 	orr.w	r3, r3, #16
    }
    if (chr_flags & BLE_GATT_CHR_F_WRITE_ENC) {
   228a6:	f410 5f80 	tst.w	r0, #4096	; 0x1000
   228aa:	d001      	beq.n	228b0 <ble_gatts_att_flags_from_chr_flags+0x3a>
        att_flags |= BLE_ATT_F_WRITE_ENC;
   228ac:	f043 0320 	orr.w	r3, r3, #32
    }
    if (chr_flags & BLE_GATT_CHR_F_WRITE_AUTHEN) {
   228b0:	f410 5f00 	tst.w	r0, #8192	; 0x2000
   228b4:	d001      	beq.n	228ba <ble_gatts_att_flags_from_chr_flags+0x44>
        att_flags |= BLE_ATT_F_WRITE_AUTHEN;
   228b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    }
    if (chr_flags & BLE_GATT_CHR_F_WRITE_AUTHOR) {
   228ba:	f410 4f80 	tst.w	r0, #16384	; 0x4000
   228be:	d001      	beq.n	228c4 <ble_gatts_att_flags_from_chr_flags+0x4e>
        att_flags |= BLE_ATT_F_WRITE_AUTHOR;
   228c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    }

    return att_flags;
}
   228c4:	4618      	mov	r0, r3
   228c6:	4770      	bx	lr
        att_flags |= BLE_ATT_F_READ;
   228c8:	2301      	movs	r3, #1
   228ca:	e7d8      	b.n	2287e <ble_gatts_att_flags_from_chr_flags+0x8>

000228cc <ble_gatts_chr_properties>:
{
    uint8_t properties;

    properties = 0;

    if (chr->flags & BLE_GATT_CHR_F_BROADCAST) {
   228cc:	8a03      	ldrh	r3, [r0, #16]
   228ce:	f013 0f01 	tst.w	r3, #1
   228d2:	d124      	bne.n	2291e <ble_gatts_chr_properties+0x52>
    properties = 0;
   228d4:	2000      	movs	r0, #0
        properties |= BLE_GATT_CHR_PROP_BROADCAST;
    }
    if (chr->flags & BLE_GATT_CHR_F_READ) {
   228d6:	f013 0f02 	tst.w	r3, #2
   228da:	d001      	beq.n	228e0 <ble_gatts_chr_properties+0x14>
        properties |= BLE_GATT_CHR_PROP_READ;
   228dc:	f040 0002 	orr.w	r0, r0, #2
    }
    if (chr->flags & BLE_GATT_CHR_F_WRITE_NO_RSP) {
   228e0:	f013 0f04 	tst.w	r3, #4
   228e4:	d001      	beq.n	228ea <ble_gatts_chr_properties+0x1e>
        properties |= BLE_GATT_CHR_PROP_WRITE_NO_RSP;
   228e6:	f040 0004 	orr.w	r0, r0, #4
    }
    if (chr->flags & BLE_GATT_CHR_F_WRITE) {
   228ea:	f013 0f08 	tst.w	r3, #8
   228ee:	d001      	beq.n	228f4 <ble_gatts_chr_properties+0x28>
        properties |= BLE_GATT_CHR_PROP_WRITE;
   228f0:	f040 0008 	orr.w	r0, r0, #8
    }
    if (chr->flags & BLE_GATT_CHR_F_NOTIFY) {
   228f4:	f013 0f10 	tst.w	r3, #16
   228f8:	d001      	beq.n	228fe <ble_gatts_chr_properties+0x32>
        properties |= BLE_GATT_CHR_PROP_NOTIFY;
   228fa:	f040 0010 	orr.w	r0, r0, #16
    }
    if (chr->flags & BLE_GATT_CHR_F_INDICATE) {
   228fe:	f013 0f20 	tst.w	r3, #32
   22902:	d001      	beq.n	22908 <ble_gatts_chr_properties+0x3c>
        properties |= BLE_GATT_CHR_PROP_INDICATE;
   22904:	f040 0020 	orr.w	r0, r0, #32
    }
    if (chr->flags & BLE_GATT_CHR_F_AUTH_SIGN_WRITE) {
   22908:	f013 0f40 	tst.w	r3, #64	; 0x40
   2290c:	d001      	beq.n	22912 <ble_gatts_chr_properties+0x46>
        properties |= BLE_GATT_CHR_PROP_AUTH_SIGN_WRITE;
   2290e:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    }
    if (chr->flags &
   22912:	f413 7fc0 	tst.w	r3, #384	; 0x180
   22916:	d001      	beq.n	2291c <ble_gatts_chr_properties+0x50>
        (BLE_GATT_CHR_F_RELIABLE_WRITE | BLE_GATT_CHR_F_AUX_WRITE)) {

        properties |= BLE_GATT_CHR_PROP_EXTENDED;
   22918:	f040 0080 	orr.w	r0, r0, #128	; 0x80
    }

    return properties;
}
   2291c:	4770      	bx	lr
        properties |= BLE_GATT_CHR_PROP_BROADCAST;
   2291e:	2001      	movs	r0, #1
   22920:	e7d9      	b.n	228d6 <ble_gatts_chr_properties+0xa>

00022922 <ble_gatts_chr_is_sane>:
}

static int
ble_gatts_chr_is_sane(const struct ble_gatt_chr_def *chr)
{
    if (chr->uuid == NULL) {
   22922:	6803      	ldr	r3, [r0, #0]
   22924:	b12b      	cbz	r3, 22932 <ble_gatts_chr_is_sane+0x10>
        return 0;
    }

    if (chr->access_cb == NULL) {
   22926:	6843      	ldr	r3, [r0, #4]
   22928:	b10b      	cbz	r3, 2292e <ble_gatts_chr_is_sane+0xc>
        return 0;
    }

    /* XXX: Check properties. */

    return 1;
   2292a:	2001      	movs	r0, #1
}
   2292c:	4770      	bx	lr
        return 0;
   2292e:	2000      	movs	r0, #0
   22930:	4770      	bx	lr
        return 0;
   22932:	2000      	movs	r0, #0
   22934:	4770      	bx	lr

00022936 <ble_gatts_chr_op>:

static uint8_t
ble_gatts_chr_op(uint8_t att_op)
{
    switch (att_op) {
   22936:	2802      	cmp	r0, #2
   22938:	d001      	beq.n	2293e <ble_gatts_chr_op+0x8>
    case BLE_ATT_ACCESS_OP_READ:
        return BLE_GATT_ACCESS_OP_READ_CHR;
   2293a:	2000      	movs	r0, #0
   2293c:	4770      	bx	lr

    case BLE_ATT_ACCESS_OP_WRITE:
        return BLE_GATT_ACCESS_OP_WRITE_CHR;
   2293e:	2001      	movs	r0, #1

    default:
        BLE_HS_DBG_ASSERT(0);
        return BLE_GATT_ACCESS_OP_READ_CHR;
    }
}
   22940:	4770      	bx	lr
	...

00022944 <ble_gatts_chr_inc_val_stat>:

static void
ble_gatts_chr_inc_val_stat(uint8_t gatt_op)
{
    switch (gatt_op) {
   22944:	b110      	cbz	r0, 2294c <ble_gatts_chr_inc_val_stat+0x8>
   22946:	2801      	cmp	r0, #1
   22948:	d005      	beq.n	22956 <ble_gatts_chr_inc_val_stat+0x12>
   2294a:	4770      	bx	lr
    case BLE_GATT_ACCESS_OP_READ_CHR:
        STATS_INC(ble_gatts_stats, chr_val_reads);
   2294c:	4a04      	ldr	r2, [pc, #16]	; (22960 <ble_gatts_chr_inc_val_stat+0x1c>)
   2294e:	6a53      	ldr	r3, [r2, #36]	; 0x24
   22950:	3301      	adds	r3, #1
   22952:	6253      	str	r3, [r2, #36]	; 0x24
        break;
   22954:	4770      	bx	lr

    case BLE_GATT_ACCESS_OP_WRITE_CHR:
        STATS_INC(ble_gatts_stats, chr_val_writes);
   22956:	4a02      	ldr	r2, [pc, #8]	; (22960 <ble_gatts_chr_inc_val_stat+0x1c>)
   22958:	6a93      	ldr	r3, [r2, #40]	; 0x28
   2295a:	3301      	adds	r3, #1
   2295c:	6293      	str	r3, [r2, #40]	; 0x28
        break;

    default:
        break;
    }
}
   2295e:	4770      	bx	lr
   22960:	20004084 	.word	0x20004084

00022964 <ble_gatts_find_svc_entry_idx>:
static int
ble_gatts_find_svc_entry_idx(const struct ble_gatt_svc_def *svc)
{
    int i;

    for (i = 0; i < ble_gatts_num_svc_entries; i++) {
   22964:	2300      	movs	r3, #0
   22966:	4a08      	ldr	r2, [pc, #32]	; (22988 <ble_gatts_find_svc_entry_idx+0x24>)
   22968:	8812      	ldrh	r2, [r2, #0]
   2296a:	429a      	cmp	r2, r3
   2296c:	dd07      	ble.n	2297e <ble_gatts_find_svc_entry_idx+0x1a>
        if (ble_gatts_svc_entries[i].svc == svc) {
   2296e:	4a07      	ldr	r2, [pc, #28]	; (2298c <ble_gatts_find_svc_entry_idx+0x28>)
   22970:	6812      	ldr	r2, [r2, #0]
   22972:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   22976:	4282      	cmp	r2, r0
   22978:	d003      	beq.n	22982 <ble_gatts_find_svc_entry_idx+0x1e>
    for (i = 0; i < ble_gatts_num_svc_entries; i++) {
   2297a:	3301      	adds	r3, #1
   2297c:	e7f3      	b.n	22966 <ble_gatts_find_svc_entry_idx+0x2>
            return i;
        }
    }

    return -1;
   2297e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
   22982:	4618      	mov	r0, r3
   22984:	4770      	bx	lr
   22986:	bf00      	nop
   22988:	20002828 	.word	0x20002828
   2298c:	20002830 	.word	0x20002830

00022990 <ble_gatts_svc_incs_satisfied>:

static int
ble_gatts_svc_incs_satisfied(const struct ble_gatt_svc_def *svc)
{
   22990:	b538      	push	{r3, r4, r5, lr}
    int idx;
    int i;

    if (svc->includes == NULL) {
   22992:	6885      	ldr	r5, [r0, #8]
   22994:	b195      	cbz	r5, 229bc <ble_gatts_svc_incs_satisfied+0x2c>
        /* No included services. */
        return 1;
    }

    for (i = 0; svc->includes[i] != NULL; i++) {
   22996:	2400      	movs	r4, #0
   22998:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   2299c:	b160      	cbz	r0, 229b8 <ble_gatts_svc_incs_satisfied+0x28>
        idx = ble_gatts_find_svc_entry_idx(svc->includes[i]);
   2299e:	f7ff ffe1 	bl	22964 <ble_gatts_find_svc_entry_idx>
        if (idx == -1 || ble_gatts_svc_entries[idx].handle == 0) {
   229a2:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   229a6:	d00b      	beq.n	229c0 <ble_gatts_svc_incs_satisfied+0x30>
   229a8:	4b07      	ldr	r3, [pc, #28]	; (229c8 <ble_gatts_svc_incs_satisfied+0x38>)
   229aa:	681b      	ldr	r3, [r3, #0]
   229ac:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   229b0:	8883      	ldrh	r3, [r0, #4]
   229b2:	b13b      	cbz	r3, 229c4 <ble_gatts_svc_incs_satisfied+0x34>
    for (i = 0; svc->includes[i] != NULL; i++) {
   229b4:	3401      	adds	r4, #1
   229b6:	e7ef      	b.n	22998 <ble_gatts_svc_incs_satisfied+0x8>
            return 0;
        }
    }

    return 1;
   229b8:	2001      	movs	r0, #1
   229ba:	e000      	b.n	229be <ble_gatts_svc_incs_satisfied+0x2e>
        return 1;
   229bc:	2001      	movs	r0, #1
}
   229be:	bd38      	pop	{r3, r4, r5, pc}
            return 0;
   229c0:	2000      	movs	r0, #0
   229c2:	e7fc      	b.n	229be <ble_gatts_svc_incs_satisfied+0x2e>
   229c4:	2000      	movs	r0, #0
   229c6:	e7fa      	b.n	229be <ble_gatts_svc_incs_satisfied+0x2e>
   229c8:	20002830 	.word	0x20002830

000229cc <ble_gatts_dsc_op>:
}

static uint8_t
ble_gatts_dsc_op(uint8_t att_op)
{
    switch (att_op) {
   229cc:	2802      	cmp	r0, #2
   229ce:	d001      	beq.n	229d4 <ble_gatts_dsc_op+0x8>
    case BLE_ATT_ACCESS_OP_READ:
        return BLE_GATT_ACCESS_OP_READ_DSC;
   229d0:	2002      	movs	r0, #2
   229d2:	4770      	bx	lr

    case BLE_ATT_ACCESS_OP_WRITE:
        return BLE_GATT_ACCESS_OP_WRITE_DSC;
   229d4:	2003      	movs	r0, #3

    default:
        BLE_HS_DBG_ASSERT(0);
        return BLE_GATT_ACCESS_OP_READ_DSC;
    }
}
   229d6:	4770      	bx	lr

000229d8 <ble_gatts_dsc_inc_stat>:

static void
ble_gatts_dsc_inc_stat(uint8_t gatt_op)
{
    switch (gatt_op) {
   229d8:	2802      	cmp	r0, #2
   229da:	d002      	beq.n	229e2 <ble_gatts_dsc_inc_stat+0xa>
   229dc:	2803      	cmp	r0, #3
   229de:	d005      	beq.n	229ec <ble_gatts_dsc_inc_stat+0x14>
   229e0:	4770      	bx	lr
    case BLE_GATT_ACCESS_OP_READ_DSC:
        STATS_INC(ble_gatts_stats, dsc_reads);
   229e2:	4a05      	ldr	r2, [pc, #20]	; (229f8 <ble_gatts_dsc_inc_stat+0x20>)
   229e4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   229e6:	3301      	adds	r3, #1
   229e8:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
   229ea:	4770      	bx	lr

    case BLE_GATT_ACCESS_OP_WRITE_DSC:
        STATS_INC(ble_gatts_stats, dsc_writes);
   229ec:	4a02      	ldr	r2, [pc, #8]	; (229f8 <ble_gatts_dsc_inc_stat+0x20>)
   229ee:	6b13      	ldr	r3, [r2, #48]	; 0x30
   229f0:	3301      	adds	r3, #1
   229f2:	6313      	str	r3, [r2, #48]	; 0x30
        break;

    default:
        break;
    }
}
   229f4:	4770      	bx	lr
   229f6:	bf00      	nop
   229f8:	20004084 	.word	0x20004084

000229fc <ble_gatts_dsc_is_sane>:
}

static int
ble_gatts_dsc_is_sane(const struct ble_gatt_dsc_def *dsc)
{
    if (dsc->uuid == NULL) {
   229fc:	6803      	ldr	r3, [r0, #0]
   229fe:	b12b      	cbz	r3, 22a0c <ble_gatts_dsc_is_sane+0x10>
        return 0;
    }

    if (dsc->access_cb == NULL) {
   22a00:	6883      	ldr	r3, [r0, #8]
   22a02:	b10b      	cbz	r3, 22a08 <ble_gatts_dsc_is_sane+0xc>
        return 0;
    }

    return 1;
   22a04:	2001      	movs	r0, #1
}
   22a06:	4770      	bx	lr
        return 0;
   22a08:	2000      	movs	r0, #0
   22a0a:	4770      	bx	lr
        return 0;
   22a0c:	2000      	movs	r0, #0
   22a0e:	4770      	bx	lr

00022a10 <ble_gatts_clt_cfg_find_idx>:
                           uint16_t chr_val_handle)
{
    struct ble_gatts_clt_cfg *cfg;
    int i;

    for (i = 0; i < ble_gatts_num_cfgable_chrs; i++) {
   22a10:	2300      	movs	r3, #0
   22a12:	4a07      	ldr	r2, [pc, #28]	; (22a30 <ble_gatts_clt_cfg_find_idx+0x20>)
   22a14:	6812      	ldr	r2, [r2, #0]
   22a16:	429a      	cmp	r2, r3
   22a18:	dd05      	ble.n	22a26 <ble_gatts_clt_cfg_find_idx+0x16>
        cfg = cfgs + i;
        if (cfg->chr_val_handle == chr_val_handle) {
   22a1a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
   22a1e:	428a      	cmp	r2, r1
   22a20:	d003      	beq.n	22a2a <ble_gatts_clt_cfg_find_idx+0x1a>
    for (i = 0; i < ble_gatts_num_cfgable_chrs; i++) {
   22a22:	3301      	adds	r3, #1
   22a24:	e7f5      	b.n	22a12 <ble_gatts_clt_cfg_find_idx+0x2>
            return i;
        }
    }

    return -1;
   22a26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
   22a2a:	4618      	mov	r0, r3
   22a2c:	4770      	bx	lr
   22a2e:	bf00      	nop
   22a30:	20002820 	.word	0x20002820

00022a34 <ble_gatts_clt_cfg_find>:

static struct ble_gatts_clt_cfg *
ble_gatts_clt_cfg_find(struct ble_gatts_clt_cfg *cfgs,
                       uint16_t chr_val_handle)
{
   22a34:	b510      	push	{r4, lr}
   22a36:	4604      	mov	r4, r0
    int idx;

    idx = ble_gatts_clt_cfg_find_idx(cfgs, chr_val_handle);
   22a38:	f7ff ffea 	bl	22a10 <ble_gatts_clt_cfg_find_idx>
    if (idx == -1) {
   22a3c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   22a40:	d002      	beq.n	22a48 <ble_gatts_clt_cfg_find+0x14>
        return NULL;
    } else {
        return cfgs + idx;
   22a42:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    }
}
   22a46:	bd10      	pop	{r4, pc}
        return NULL;
   22a48:	2000      	movs	r0, #0
   22a4a:	e7fc      	b.n	22a46 <ble_gatts_clt_cfg_find+0x12>

00022a4c <ble_gatts_svc_type_to_uuid>:
}

static int
ble_gatts_svc_type_to_uuid(uint8_t svc_type, const ble_uuid_t **uuid)
{
    switch (svc_type) {
   22a4c:	2801      	cmp	r0, #1
   22a4e:	d003      	beq.n	22a58 <ble_gatts_svc_type_to_uuid+0xc>
   22a50:	2802      	cmp	r0, #2
   22a52:	d005      	beq.n	22a60 <ble_gatts_svc_type_to_uuid+0x14>
    case BLE_GATT_SVC_TYPE_SECONDARY:
        *uuid = uuid_sec;
        return 0;

    default:
        return BLE_HS_EINVAL;
   22a54:	2003      	movs	r0, #3
    }
}
   22a56:	4770      	bx	lr
        *uuid = uuid_pri;
   22a58:	4b03      	ldr	r3, [pc, #12]	; (22a68 <ble_gatts_svc_type_to_uuid+0x1c>)
   22a5a:	600b      	str	r3, [r1, #0]
        return 0;
   22a5c:	2000      	movs	r0, #0
   22a5e:	4770      	bx	lr
        *uuid = uuid_sec;
   22a60:	4b02      	ldr	r3, [pc, #8]	; (22a6c <ble_gatts_svc_type_to_uuid+0x20>)
   22a62:	600b      	str	r3, [r1, #0]
        return 0;
   22a64:	2000      	movs	r0, #0
   22a66:	4770      	bx	lr
   22a68:	200002b4 	.word	0x200002b4
   22a6c:	200002b8 	.word	0x200002b8

00022a70 <ble_gatts_svc_is_sane>:

static int
ble_gatts_svc_is_sane(const struct ble_gatt_svc_def *svc)
{
    if (svc->type != BLE_GATT_SVC_TYPE_PRIMARY &&
   22a70:	7803      	ldrb	r3, [r0, #0]
   22a72:	3b01      	subs	r3, #1
   22a74:	b2db      	uxtb	r3, r3
   22a76:	2b01      	cmp	r3, #1
   22a78:	d901      	bls.n	22a7e <ble_gatts_svc_is_sane+0xe>
        svc->type != BLE_GATT_SVC_TYPE_SECONDARY) {

        return 0;
   22a7a:	2000      	movs	r0, #0
   22a7c:	4770      	bx	lr
    }

    if (svc->uuid == NULL) {
   22a7e:	6843      	ldr	r3, [r0, #4]
   22a80:	b10b      	cbz	r3, 22a86 <ble_gatts_svc_is_sane+0x16>
        return 0;
    }

    return 1;
   22a82:	2001      	movs	r0, #1
}
   22a84:	4770      	bx	lr
        return 0;
   22a86:	2000      	movs	r0, #0
   22a88:	4770      	bx	lr
	...

00022a8c <ble_gatts_clt_cfg_size>:
}

static int
ble_gatts_clt_cfg_size(void)
{
    return ble_gatts_num_cfgable_chrs * sizeof (struct ble_gatts_clt_cfg);
   22a8c:	4b01      	ldr	r3, [pc, #4]	; (22a94 <ble_gatts_clt_cfg_size+0x8>)
   22a8e:	6818      	ldr	r0, [r3, #0]
}
   22a90:	0080      	lsls	r0, r0, #2
   22a92:	4770      	bx	lr
   22a94:	20002820 	.word	0x20002820

00022a98 <ble_gatts_schedule_update>:
ble_gatts_schedule_update(struct ble_hs_conn *conn,
                          struct ble_gatts_clt_cfg *clt_cfg)
{
    uint8_t att_op;

    if (!(clt_cfg->flags & BLE_GATTS_CLT_CFG_F_MODIFIED)) {
   22a98:	788b      	ldrb	r3, [r1, #2]
   22a9a:	f013 0f80 	tst.w	r3, #128	; 0x80
   22a9e:	d101      	bne.n	22aa4 <ble_gatts_schedule_update+0xc>
        /* Characteristic not modified.  Nothing to send. */
        att_op = 0;
   22aa0:	2000      	movs	r0, #0
   22aa2:	4770      	bx	lr
    } else if (clt_cfg->flags & BLE_GATTS_CLT_CFG_F_NOTIFY) {
   22aa4:	f013 0f01 	tst.w	r3, #1
   22aa8:	d107      	bne.n	22aba <ble_gatts_schedule_update+0x22>
        /* Notifications always get sent immediately. */
        att_op = BLE_ATT_OP_NOTIFY_REQ;
    } else if (clt_cfg->flags & BLE_GATTS_CLT_CFG_F_INDICATE) {
   22aaa:	f013 0f02 	tst.w	r3, #2
   22aae:	d009      	beq.n	22ac4 <ble_gatts_schedule_update+0x2c>
        /* Only one outstanding indication per peer is allowed.  If we
         * are still awaiting an ack, mark this CCCD as updated so that
         * we know to send the indication upon receiving the expected ack.
         * If there isn't an outstanding indication, send this one now.
         */
        if (conn->bhc_gatt_svr.indicate_val_handle != 0) {
   22ab0:	f8b0 2054 	ldrh.w	r2, [r0, #84]	; 0x54
   22ab4:	b942      	cbnz	r2, 22ac8 <ble_gatts_schedule_update+0x30>
            att_op = 0;
        } else {
            att_op = BLE_ATT_OP_INDICATE_REQ;
   22ab6:	201d      	movs	r0, #29
   22ab8:	e000      	b.n	22abc <ble_gatts_schedule_update+0x24>
        att_op = BLE_ATT_OP_NOTIFY_REQ;
   22aba:	201b      	movs	r0, #27

    /* If we will be sending an update, clear the modified flag so that we
     * don't double-send.
     */
    if (att_op != 0) {
        clt_cfg->flags &= ~BLE_GATTS_CLT_CFG_F_MODIFIED;
   22abc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   22ac0:	708b      	strb	r3, [r1, #2]
   22ac2:	4770      	bx	lr
        att_op = 0;
   22ac4:	2000      	movs	r0, #0
   22ac6:	4770      	bx	lr
            att_op = 0;
   22ac8:	2000      	movs	r0, #0
    }

    return att_op;
}
   22aca:	4770      	bx	lr

00022acc <ble_gatts_count_resources>:
 *                                  invalid resource definition.
 */
static int
ble_gatts_count_resources(const struct ble_gatt_svc_def *svcs,
                          struct ble_gatt_resources *res)
{
   22acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   22ad0:	4681      	mov	r9, r0
   22ad2:	460c      	mov	r4, r1
    int s;
    int i;
    int c;
    int d;

    for (s = 0; svcs[s].type != BLE_GATT_SVC_TYPE_END; s++) {
   22ad4:	f04f 0a00 	mov.w	sl, #0
   22ad8:	ea4f 130a 	mov.w	r3, sl, lsl #4
   22adc:	eb09 0703 	add.w	r7, r9, r3
   22ae0:	f819 3003 	ldrb.w	r3, [r9, r3]
   22ae4:	2b00      	cmp	r3, #0
   22ae6:	d059      	beq.n	22b9c <ble_gatts_count_resources+0xd0>
        svc = svcs + s;

        if (!ble_gatts_svc_is_sane(svc)) {
   22ae8:	4638      	mov	r0, r7
   22aea:	f7ff ffc1 	bl	22a70 <ble_gatts_svc_is_sane>
   22aee:	2800      	cmp	r0, #0
   22af0:	d056      	beq.n	22ba0 <ble_gatts_count_resources+0xd4>

        /* Each service requires:
         *     o 1 service
         *     o 1 attribute
         */
        res->svcs++;
   22af2:	8823      	ldrh	r3, [r4, #0]
   22af4:	3301      	adds	r3, #1
   22af6:	8023      	strh	r3, [r4, #0]
        res->attrs++;
   22af8:	8963      	ldrh	r3, [r4, #10]
   22afa:	3301      	adds	r3, #1
   22afc:	8163      	strh	r3, [r4, #10]

        if (svc->includes != NULL) {
   22afe:	68bb      	ldr	r3, [r7, #8]
   22b00:	b163      	cbz	r3, 22b1c <ble_gatts_count_resources+0x50>
            for (i = 0; svc->includes[i] != NULL; i++) {
   22b02:	2200      	movs	r2, #0
   22b04:	68bb      	ldr	r3, [r7, #8]
   22b06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   22b0a:	b13b      	cbz	r3, 22b1c <ble_gatts_count_resources+0x50>
                /* Each include requires:
                 *     o 1 include
                 *     o 1 attribute
                 */
                res->incs++;
   22b0c:	8863      	ldrh	r3, [r4, #2]
   22b0e:	3301      	adds	r3, #1
   22b10:	8063      	strh	r3, [r4, #2]
                res->attrs++;
   22b12:	8963      	ldrh	r3, [r4, #10]
   22b14:	3301      	adds	r3, #1
   22b16:	8163      	strh	r3, [r4, #10]
            for (i = 0; svc->includes[i] != NULL; i++) {
   22b18:	3201      	adds	r2, #1
   22b1a:	e7f3      	b.n	22b04 <ble_gatts_count_resources+0x38>
            }
        }

        if (svc->characteristics != NULL) {
   22b1c:	68fb      	ldr	r3, [r7, #12]
   22b1e:	2b00      	cmp	r3, #0
   22b20:	d039      	beq.n	22b96 <ble_gatts_count_resources+0xca>
            for (c = 0; svc->characteristics[c].uuid != NULL; c++) {
   22b22:	f04f 0800 	mov.w	r8, #0
   22b26:	e001      	b.n	22b2c <ble_gatts_count_resources+0x60>
   22b28:	f108 0801 	add.w	r8, r8, #1
   22b2c:	68fa      	ldr	r2, [r7, #12]
   22b2e:	eb08 0148 	add.w	r1, r8, r8, lsl #1
   22b32:	00cb      	lsls	r3, r1, #3
   22b34:	18d6      	adds	r6, r2, r3
   22b36:	58d3      	ldr	r3, [r2, r3]
   22b38:	2b00      	cmp	r3, #0
   22b3a:	d02c      	beq.n	22b96 <ble_gatts_count_resources+0xca>
                chr = svc->characteristics + c;

                if (!ble_gatts_chr_is_sane(chr)) {
   22b3c:	4630      	mov	r0, r6
   22b3e:	f7ff fef0 	bl	22922 <ble_gatts_chr_is_sane>
   22b42:	2800      	cmp	r0, #0
   22b44:	d02e      	beq.n	22ba4 <ble_gatts_count_resources+0xd8>

                /* Each characteristic requires:
                 *     o 1 characteristic
                 *     o 2 attributes
                 */
                res->chrs++;
   22b46:	88a3      	ldrh	r3, [r4, #4]
   22b48:	3301      	adds	r3, #1
   22b4a:	80a3      	strh	r3, [r4, #4]
                res->attrs += 2;
   22b4c:	8963      	ldrh	r3, [r4, #10]
   22b4e:	3302      	adds	r3, #2
   22b50:	b29b      	uxth	r3, r3
   22b52:	8163      	strh	r3, [r4, #10]

                /* If the characteristic permits notifications or indications,
                 * it has a CCCD.
                 */
                if (chr->flags & BLE_GATT_CHR_F_NOTIFY ||
   22b54:	8a32      	ldrh	r2, [r6, #16]
   22b56:	f012 0f30 	tst.w	r2, #48	; 0x30
   22b5a:	d007      	beq.n	22b6c <ble_gatts_count_resources+0xa0>
                    /* Each CCCD requires:
                     *     o 1 descriptor
                     *     o 1 CCCD
                     *     o 1 attribute
                     */
                    res->dscs++;
   22b5c:	88e2      	ldrh	r2, [r4, #6]
   22b5e:	3201      	adds	r2, #1
   22b60:	80e2      	strh	r2, [r4, #6]
                    res->cccds++;
   22b62:	8922      	ldrh	r2, [r4, #8]
   22b64:	3201      	adds	r2, #1
   22b66:	8122      	strh	r2, [r4, #8]
                    res->attrs++;
   22b68:	3301      	adds	r3, #1
   22b6a:	8163      	strh	r3, [r4, #10]
                }

                if (chr->descriptors != NULL) {
   22b6c:	68f3      	ldr	r3, [r6, #12]
   22b6e:	2b00      	cmp	r3, #0
   22b70:	d0da      	beq.n	22b28 <ble_gatts_count_resources+0x5c>
                    for (d = 0; chr->descriptors[d].uuid != NULL; d++) {
   22b72:	2500      	movs	r5, #0
   22b74:	68f2      	ldr	r2, [r6, #12]
   22b76:	012b      	lsls	r3, r5, #4
   22b78:	18d0      	adds	r0, r2, r3
   22b7a:	58d3      	ldr	r3, [r2, r3]
   22b7c:	2b00      	cmp	r3, #0
   22b7e:	d0d3      	beq.n	22b28 <ble_gatts_count_resources+0x5c>
                        if (!ble_gatts_dsc_is_sane(chr->descriptors + d)) {
   22b80:	f7ff ff3c 	bl	229fc <ble_gatts_dsc_is_sane>
   22b84:	b180      	cbz	r0, 22ba8 <ble_gatts_count_resources+0xdc>

                        /* Each descriptor requires:
                         *     o 1 descriptor
                         *     o 1 attribute
                         */
                        res->dscs++;
   22b86:	88e3      	ldrh	r3, [r4, #6]
   22b88:	3301      	adds	r3, #1
   22b8a:	80e3      	strh	r3, [r4, #6]
                        res->attrs++;
   22b8c:	8963      	ldrh	r3, [r4, #10]
   22b8e:	3301      	adds	r3, #1
   22b90:	8163      	strh	r3, [r4, #10]
                    for (d = 0; chr->descriptors[d].uuid != NULL; d++) {
   22b92:	3501      	adds	r5, #1
   22b94:	e7ee      	b.n	22b74 <ble_gatts_count_resources+0xa8>
    for (s = 0; svcs[s].type != BLE_GATT_SVC_TYPE_END; s++) {
   22b96:	f10a 0a01 	add.w	sl, sl, #1
   22b9a:	e79d      	b.n	22ad8 <ble_gatts_count_resources+0xc>
                }
            }
        }
    }

    return 0;
   22b9c:	2000      	movs	r0, #0
   22b9e:	e004      	b.n	22baa <ble_gatts_count_resources+0xde>
            return BLE_HS_EINVAL;
   22ba0:	2003      	movs	r0, #3
   22ba2:	e002      	b.n	22baa <ble_gatts_count_resources+0xde>
                    return BLE_HS_EINVAL;
   22ba4:	2003      	movs	r0, #3
   22ba6:	e000      	b.n	22baa <ble_gatts_count_resources+0xde>
                            return BLE_HS_EINVAL;
   22ba8:	2003      	movs	r0, #3
}
   22baa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

00022bb0 <ble_gatts_clt_cfg_access_locked>:
{
   22bb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22bb4:	9e07      	ldr	r6, [sp, #28]
    out_cccd->chr_val_handle = 0;
   22bb6:	2300      	movs	r3, #0
   22bb8:	8133      	strh	r3, [r6, #8]
    chr_val_handle = attr_handle - 1;
   22bba:	1e4c      	subs	r4, r1, #1
   22bbc:	b2a4      	uxth	r4, r4
    if (chr_val_handle > attr_handle) {
   22bbe:	42a1      	cmp	r1, r4
   22bc0:	d365      	bcc.n	22c8e <ble_gatts_clt_cfg_access_locked+0xde>
   22bc2:	4615      	mov	r5, r2
   22bc4:	4607      	mov	r7, r0
    clt_cfg = ble_gatts_clt_cfg_find(conn->bhc_gatt_svr.clt_cfgs,
   22bc6:	4621      	mov	r1, r4
   22bc8:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   22bca:	f7ff ff33 	bl	22a34 <ble_gatts_clt_cfg_find>
    if (clt_cfg == NULL) {
   22bce:	4680      	mov	r8, r0
   22bd0:	2800      	cmp	r0, #0
   22bd2:	d060      	beq.n	22c96 <ble_gatts_clt_cfg_access_locked+0xe6>
    *out_prev_clt_cfg_flags = clt_cfg->flags;
   22bd4:	7882      	ldrb	r2, [r0, #2]
   22bd6:	9b08      	ldr	r3, [sp, #32]
   22bd8:	701a      	strb	r2, [r3, #0]
    *out_cur_clt_cfg_flags = clt_cfg->flags;
   22bda:	7883      	ldrb	r3, [r0, #2]
   22bdc:	9a09      	ldr	r2, [sp, #36]	; 0x24
   22bde:	7013      	strb	r3, [r2, #0]
    gatt_op = ble_gatts_dsc_op(att_op);
   22be0:	4628      	mov	r0, r5
   22be2:	f7ff fef3 	bl	229cc <ble_gatts_dsc_op>
   22be6:	4605      	mov	r5, r0
    ble_gatts_dsc_inc_stat(gatt_op);
   22be8:	f7ff fef6 	bl	229d8 <ble_gatts_dsc_inc_stat>
    switch (gatt_op) {
   22bec:	2d02      	cmp	r5, #2
   22bee:	d003      	beq.n	22bf8 <ble_gatts_clt_cfg_access_locked+0x48>
   22bf0:	2d03      	cmp	r5, #3
   22bf2:	d013      	beq.n	22c1c <ble_gatts_clt_cfg_access_locked+0x6c>
        return BLE_ATT_ERR_UNLIKELY;
   22bf4:	250e      	movs	r5, #14
   22bf6:	e04b      	b.n	22c90 <ble_gatts_clt_cfg_access_locked+0xe0>
        STATS_INC(ble_gatts_stats, dsc_reads);
   22bf8:	4a2a      	ldr	r2, [pc, #168]	; (22ca4 <ble_gatts_clt_cfg_access_locked+0xf4>)
   22bfa:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   22bfc:	3301      	adds	r3, #1
   22bfe:	62d3      	str	r3, [r2, #44]	; 0x2c
        buf = os_mbuf_extend(om, 2);
   22c00:	2102      	movs	r1, #2
   22c02:	9806      	ldr	r0, [sp, #24]
   22c04:	f7ea fe3c 	bl	d880 <os_mbuf_extend>
        if (buf == NULL) {
   22c08:	2800      	cmp	r0, #0
   22c0a:	d046      	beq.n	22c9a <ble_gatts_clt_cfg_access_locked+0xea>
        put_le16(buf, clt_cfg->flags & ~BLE_GATTS_CLT_CFG_F_RESERVED);
   22c0c:	f898 1002 	ldrb.w	r1, [r8, #2]
   22c10:	f001 0103 	and.w	r1, r1, #3
   22c14:	f00c f88a 	bl	2ed2c <put_le16>
    return 0;
   22c18:	2500      	movs	r5, #0
        break;
   22c1a:	e039      	b.n	22c90 <ble_gatts_clt_cfg_access_locked+0xe0>
        STATS_INC(ble_gatts_stats, dsc_writes);
   22c1c:	4a21      	ldr	r2, [pc, #132]	; (22ca4 <ble_gatts_clt_cfg_access_locked+0xf4>)
   22c1e:	6b13      	ldr	r3, [r2, #48]	; 0x30
   22c20:	3301      	adds	r3, #1
   22c22:	6313      	str	r3, [r2, #48]	; 0x30
        if (OS_MBUF_PKTLEN(om) != 2) {
   22c24:	9b06      	ldr	r3, [sp, #24]
   22c26:	8a1b      	ldrh	r3, [r3, #16]
   22c28:	2b02      	cmp	r3, #2
   22c2a:	d001      	beq.n	22c30 <ble_gatts_clt_cfg_access_locked+0x80>
            return BLE_ATT_ERR_INVALID_ATTR_VALUE_LEN;
   22c2c:	250d      	movs	r5, #13
   22c2e:	e02f      	b.n	22c90 <ble_gatts_clt_cfg_access_locked+0xe0>
        om = os_mbuf_pullup(om, 2);
   22c30:	2102      	movs	r1, #2
   22c32:	9806      	ldr	r0, [sp, #24]
   22c34:	f7ea fe55 	bl	d8e2 <os_mbuf_pullup>
        flags = get_le16(om->om_data);
   22c38:	6800      	ldr	r0, [r0, #0]
   22c3a:	f00c f898 	bl	2ed6e <get_le16>
        if ((flags & ~clt_cfg->allowed) != 0) {
   22c3e:	f898 5003 	ldrb.w	r5, [r8, #3]
   22c42:	ea30 0505 	bics.w	r5, r0, r5
   22c46:	d12a      	bne.n	22c9e <ble_gatts_clt_cfg_access_locked+0xee>
        if (clt_cfg->flags != flags) {
   22c48:	f898 3002 	ldrb.w	r3, [r8, #2]
   22c4c:	4283      	cmp	r3, r0
   22c4e:	d01f      	beq.n	22c90 <ble_gatts_clt_cfg_access_locked+0xe0>
            clt_cfg->flags = flags;
   22c50:	b2c0      	uxtb	r0, r0
   22c52:	f888 0002 	strb.w	r0, [r8, #2]
            *out_cur_clt_cfg_flags = flags;
   22c56:	9b09      	ldr	r3, [sp, #36]	; 0x24
   22c58:	7018      	strb	r0, [r3, #0]
            if (conn->bhc_sec_state.bonded) {
   22c5a:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
   22c5e:	f013 0f04 	tst.w	r3, #4
   22c62:	d015      	beq.n	22c90 <ble_gatts_clt_cfg_access_locked+0xe0>
                out_cccd->peer_addr = conn->bhc_peer_addr;
   22c64:	463b      	mov	r3, r7
   22c66:	f853 0f07 	ldr.w	r0, [r3, #7]!
   22c6a:	6030      	str	r0, [r6, #0]
   22c6c:	889a      	ldrh	r2, [r3, #4]
   22c6e:	799b      	ldrb	r3, [r3, #6]
   22c70:	80b2      	strh	r2, [r6, #4]
   22c72:	71b3      	strb	r3, [r6, #6]
                    ble_hs_misc_peer_addr_type_to_id(conn->bhc_peer_addr.type);
   22c74:	79f8      	ldrb	r0, [r7, #7]
   22c76:	f002 fd49 	bl	2570c <ble_hs_misc_peer_addr_type_to_id>
                out_cccd->peer_addr.type =
   22c7a:	7030      	strb	r0, [r6, #0]
                out_cccd->chr_val_handle = chr_val_handle;
   22c7c:	8134      	strh	r4, [r6, #8]
                out_cccd->flags = clt_cfg->flags;
   22c7e:	f898 3002 	ldrb.w	r3, [r8, #2]
   22c82:	8173      	strh	r3, [r6, #10]
                out_cccd->value_changed = 0;
   22c84:	7b33      	ldrb	r3, [r6, #12]
   22c86:	f36f 0300 	bfc	r3, #0, #1
   22c8a:	7333      	strb	r3, [r6, #12]
   22c8c:	e000      	b.n	22c90 <ble_gatts_clt_cfg_access_locked+0xe0>
        return BLE_ATT_ERR_UNLIKELY;
   22c8e:	250e      	movs	r5, #14
}
   22c90:	4628      	mov	r0, r5
   22c92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return BLE_ATT_ERR_UNLIKELY;
   22c96:	250e      	movs	r5, #14
   22c98:	e7fa      	b.n	22c90 <ble_gatts_clt_cfg_access_locked+0xe0>
            return BLE_ATT_ERR_INSUFFICIENT_RES;
   22c9a:	2511      	movs	r5, #17
   22c9c:	e7f8      	b.n	22c90 <ble_gatts_clt_cfg_access_locked+0xe0>
            return BLE_ATT_ERR_REQ_NOT_SUPPORTED;
   22c9e:	2506      	movs	r5, #6
   22ca0:	e7f6      	b.n	22c90 <ble_gatts_clt_cfg_access_locked+0xe0>
   22ca2:	bf00      	nop
   22ca4:	20004084 	.word	0x20004084

00022ca8 <ble_gatts_subscribe_event>:
{
   22ca8:	b530      	push	{r4, r5, lr}
   22caa:	b085      	sub	sp, #20
   22cac:	f89d 4020 	ldrb.w	r4, [sp, #32]
    if ((prev_flags ^ cur_flags) & ~BLE_GATTS_CLT_CFG_F_RESERVED) {
   22cb0:	ea83 0504 	eor.w	r5, r3, r4
   22cb4:	f035 05fc 	bics.w	r5, r5, #252	; 0xfc
   22cb8:	d101      	bne.n	22cbe <ble_gatts_subscribe_event+0x16>
}
   22cba:	b005      	add	sp, #20
   22cbc:	bd30      	pop	{r4, r5, pc}
        ble_gap_subscribe_event(conn_handle,
   22cbe:	f004 0502 	and.w	r5, r4, #2
   22cc2:	9502      	str	r5, [sp, #8]
   22cc4:	f003 0502 	and.w	r5, r3, #2
   22cc8:	9501      	str	r5, [sp, #4]
   22cca:	f004 0401 	and.w	r4, r4, #1
   22cce:	9400      	str	r4, [sp, #0]
   22cd0:	f003 0301 	and.w	r3, r3, #1
   22cd4:	f7fe fcf9 	bl	216ca <ble_gap_subscribe_event>
}
   22cd8:	e7ef      	b.n	22cba <ble_gatts_subscribe_event+0x12>

00022cda <ble_gatts_clt_cfg_access>:
{
   22cda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22cde:	b08c      	sub	sp, #48	; 0x30
   22ce0:	4606      	mov	r6, r0
   22ce2:	460d      	mov	r5, r1
   22ce4:	4617      	mov	r7, r2
   22ce6:	4698      	mov	r8, r3
    ble_hs_lock();
   22ce8:	f000 feca 	bl	23a80 <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
   22cec:	4630      	mov	r0, r6
   22cee:	f001 fd17 	bl	24720 <ble_hs_conn_find>
    if (conn == NULL) {
   22cf2:	b1b8      	cbz	r0, 22d24 <ble_gatts_clt_cfg_access+0x4a>
        rc = ble_gatts_clt_cfg_access_locked(conn, attr_handle, op, offset,
   22cf4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   22cf6:	681b      	ldr	r3, [r3, #0]
   22cf8:	f10d 0212 	add.w	r2, sp, #18
   22cfc:	9203      	str	r2, [sp, #12]
   22cfe:	f10d 0213 	add.w	r2, sp, #19
   22d02:	9202      	str	r2, [sp, #8]
   22d04:	aa08      	add	r2, sp, #32
   22d06:	9201      	str	r2, [sp, #4]
   22d08:	9300      	str	r3, [sp, #0]
   22d0a:	4643      	mov	r3, r8
   22d0c:	463a      	mov	r2, r7
   22d0e:	4629      	mov	r1, r5
   22d10:	f7ff ff4e 	bl	22bb0 <ble_gatts_clt_cfg_access_locked>
   22d14:	4604      	mov	r4, r0
    ble_hs_unlock();
   22d16:	f000 feb7 	bl	23a88 <ble_hs_unlock>
    if (rc != 0) {
   22d1a:	b13c      	cbz	r4, 22d2c <ble_gatts_clt_cfg_access+0x52>
}
   22d1c:	4620      	mov	r0, r4
   22d1e:	b00c      	add	sp, #48	; 0x30
   22d20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ble_hs_unlock();
   22d24:	f000 feb0 	bl	23a88 <ble_hs_unlock>
        rc = BLE_ATT_ERR_UNLIKELY;
   22d28:	240e      	movs	r4, #14
   22d2a:	e7f7      	b.n	22d1c <ble_gatts_clt_cfg_access+0x42>
    chr_val_handle = attr_handle - 1;
   22d2c:	1e69      	subs	r1, r5, #1
    ble_gatts_subscribe_event(conn_handle, chr_val_handle,
   22d2e:	f89d 3013 	ldrb.w	r3, [sp, #19]
   22d32:	f89d 2012 	ldrb.w	r2, [sp, #18]
   22d36:	9200      	str	r2, [sp, #0]
   22d38:	2201      	movs	r2, #1
   22d3a:	b289      	uxth	r1, r1
   22d3c:	4630      	mov	r0, r6
   22d3e:	f7ff ffb3 	bl	22ca8 <ble_gatts_subscribe_event>
    if (cccd_value.chr_val_handle != 0) {
   22d42:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   22d46:	2b00      	cmp	r3, #0
   22d48:	d0e8      	beq.n	22d1c <ble_gatts_clt_cfg_access+0x42>
        if (cccd_value.flags == 0) {
   22d4a:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
   22d4e:	b123      	cbz	r3, 22d5a <ble_gatts_clt_cfg_access+0x80>
            rc = ble_store_write_cccd(&cccd_value);
   22d50:	a808      	add	r0, sp, #32
   22d52:	f005 fe75 	bl	28a40 <ble_store_write_cccd>
   22d56:	4604      	mov	r4, r0
   22d58:	e7e0      	b.n	22d1c <ble_gatts_clt_cfg_access+0x42>
            ble_store_key_from_value_cccd(&cccd_key, &cccd_value);
   22d5a:	a908      	add	r1, sp, #32
   22d5c:	a805      	add	r0, sp, #20
   22d5e:	f005 fe7b 	bl	28a58 <ble_store_key_from_value_cccd>
            rc = ble_store_delete_cccd(&cccd_key);
   22d62:	a805      	add	r0, sp, #20
   22d64:	f005 fe72 	bl	28a4c <ble_store_delete_cccd>
   22d68:	4604      	mov	r4, r0
   22d6a:	e7d7      	b.n	22d1c <ble_gatts_clt_cfg_access+0x42>

00022d6c <ble_gatts_register_inc>:
{
   22d6c:	b500      	push	{lr}
   22d6e:	b085      	sub	sp, #20
    rc = ble_att_svr_register(uuid_inc, BLE_ATT_F_READ, 0, &handle,
   22d70:	9001      	str	r0, [sp, #4]
   22d72:	4b06      	ldr	r3, [pc, #24]	; (22d8c <ble_gatts_register_inc+0x20>)
   22d74:	9300      	str	r3, [sp, #0]
   22d76:	f10d 030e 	add.w	r3, sp, #14
   22d7a:	2200      	movs	r2, #0
   22d7c:	2101      	movs	r1, #1
   22d7e:	4804      	ldr	r0, [pc, #16]	; (22d90 <ble_gatts_register_inc+0x24>)
   22d80:	f7fc fc6a 	bl	1f658 <ble_att_svr_register>
}
   22d84:	b005      	add	sp, #20
   22d86:	f85d fb04 	ldr.w	pc, [sp], #4
   22d8a:	bf00      	nop
   22d8c:	00023101 	.word	0x00023101
   22d90:	200002bc 	.word	0x200002bc

00022d94 <ble_gatts_register_clt_cfg_dsc>:
{
   22d94:	b500      	push	{lr}
   22d96:	b083      	sub	sp, #12
    rc = ble_att_svr_register(uuid_ccc, BLE_ATT_F_READ | BLE_ATT_F_WRITE, 0,
   22d98:	2200      	movs	r2, #0
   22d9a:	9201      	str	r2, [sp, #4]
   22d9c:	4b08      	ldr	r3, [pc, #32]	; (22dc0 <ble_gatts_register_clt_cfg_dsc+0x2c>)
   22d9e:	9300      	str	r3, [sp, #0]
   22da0:	4603      	mov	r3, r0
   22da2:	2103      	movs	r1, #3
   22da4:	4807      	ldr	r0, [pc, #28]	; (22dc4 <ble_gatts_register_clt_cfg_dsc+0x30>)
   22da6:	f7fc fc57 	bl	1f658 <ble_att_svr_register>
    if (rc != 0) {
   22daa:	4602      	mov	r2, r0
   22dac:	b918      	cbnz	r0, 22db6 <ble_gatts_register_clt_cfg_dsc+0x22>
    STATS_INC(ble_gatts_stats, dscs);
   22dae:	4906      	ldr	r1, [pc, #24]	; (22dc8 <ble_gatts_register_clt_cfg_dsc+0x34>)
   22db0:	694b      	ldr	r3, [r1, #20]
   22db2:	3301      	adds	r3, #1
   22db4:	614b      	str	r3, [r1, #20]
}
   22db6:	4610      	mov	r0, r2
   22db8:	b003      	add	sp, #12
   22dba:	f85d fb04 	ldr.w	pc, [sp], #4
   22dbe:	bf00      	nop
   22dc0:	00022cdb 	.word	0x00022cdb
   22dc4:	200002c4 	.word	0x200002c4
   22dc8:	20004084 	.word	0x20004084

00022dcc <ble_gatts_register_dsc>:
{
   22dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
   22dce:	b089      	sub	sp, #36	; 0x24
   22dd0:	4607      	mov	r7, r0
   22dd2:	460e      	mov	r6, r1
   22dd4:	4614      	mov	r4, r2
    if (!ble_gatts_dsc_is_sane(dsc)) {
   22dd6:	4610      	mov	r0, r2
   22dd8:	f7ff fe10 	bl	229fc <ble_gatts_dsc_is_sane>
   22ddc:	b300      	cbz	r0, 22e20 <ble_gatts_register_dsc+0x54>
    rc = ble_att_svr_register(dsc->uuid, dsc->att_flags, dsc->min_key_size,
   22dde:	7921      	ldrb	r1, [r4, #4]
   22de0:	7962      	ldrb	r2, [r4, #5]
   22de2:	9401      	str	r4, [sp, #4]
   22de4:	4b10      	ldr	r3, [pc, #64]	; (22e28 <ble_gatts_register_dsc+0x5c>)
   22de6:	9300      	str	r3, [sp, #0]
   22de8:	f10d 030a 	add.w	r3, sp, #10
   22dec:	6820      	ldr	r0, [r4, #0]
   22dee:	f7fc fc33 	bl	1f658 <ble_att_svr_register>
    if (rc != 0) {
   22df2:	4605      	mov	r5, r0
   22df4:	b9a8      	cbnz	r0, 22e22 <ble_gatts_register_dsc+0x56>
    if (register_cb != NULL) {
   22df6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   22df8:	b16b      	cbz	r3, 22e16 <ble_gatts_register_dsc+0x4a>
        register_ctxt.op = BLE_GATT_REGISTER_OP_DSC;
   22dfa:	2303      	movs	r3, #3
   22dfc:	f88d 300c 	strb.w	r3, [sp, #12]
        register_ctxt.dsc.handle = dsc_handle;
   22e00:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   22e04:	f8ad 3010 	strh.w	r3, [sp, #16]
        register_ctxt.dsc.svc_def = svc;
   22e08:	9707      	str	r7, [sp, #28]
        register_ctxt.dsc.chr_def = chr;
   22e0a:	9606      	str	r6, [sp, #24]
        register_ctxt.dsc.dsc_def = dsc;
   22e0c:	9405      	str	r4, [sp, #20]
        register_cb(&register_ctxt, cb_arg);
   22e0e:	990f      	ldr	r1, [sp, #60]	; 0x3c
   22e10:	a803      	add	r0, sp, #12
   22e12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   22e14:	4798      	blx	r3
    STATS_INC(ble_gatts_stats, dscs);
   22e16:	4a05      	ldr	r2, [pc, #20]	; (22e2c <ble_gatts_register_dsc+0x60>)
   22e18:	6953      	ldr	r3, [r2, #20]
   22e1a:	3301      	adds	r3, #1
   22e1c:	6153      	str	r3, [r2, #20]
    return 0;
   22e1e:	e000      	b.n	22e22 <ble_gatts_register_dsc+0x56>
        return BLE_HS_EINVAL;
   22e20:	2503      	movs	r5, #3
}
   22e22:	4628      	mov	r0, r5
   22e24:	b009      	add	sp, #36	; 0x24
   22e26:	bdf0      	pop	{r4, r5, r6, r7, pc}
   22e28:	0002322f 	.word	0x0002322f
   22e2c:	20004084 	.word	0x20004084

00022e30 <ble_gatts_register_chr>:
{
   22e30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   22e34:	b08b      	sub	sp, #44	; 0x2c
   22e36:	4680      	mov	r8, r0
   22e38:	460c      	mov	r4, r1
   22e3a:	4617      	mov	r7, r2
   22e3c:	4699      	mov	r9, r3
    if (!ble_gatts_chr_is_sane(chr)) {
   22e3e:	4608      	mov	r0, r1
   22e40:	f7ff fd6f 	bl	22922 <ble_gatts_chr_is_sane>
   22e44:	2800      	cmp	r0, #0
   22e46:	d064      	beq.n	22f12 <ble_gatts_register_chr+0xe2>
    if (ble_gatts_chr_clt_cfg_allowed(chr) != 0) {
   22e48:	4620      	mov	r0, r4
   22e4a:	f7ff fd07 	bl	2285c <ble_gatts_chr_clt_cfg_allowed>
   22e4e:	b140      	cbz	r0, 22e62 <ble_gatts_register_chr+0x32>
        if (ble_gatts_num_cfgable_chrs > ble_hs_max_client_configs) {
   22e50:	4b33      	ldr	r3, [pc, #204]	; (22f20 <ble_gatts_register_chr+0xf0>)
   22e52:	881a      	ldrh	r2, [r3, #0]
   22e54:	4b33      	ldr	r3, [pc, #204]	; (22f24 <ble_gatts_register_chr+0xf4>)
   22e56:	681b      	ldr	r3, [r3, #0]
   22e58:	429a      	cmp	r2, r3
   22e5a:	db5c      	blt.n	22f16 <ble_gatts_register_chr+0xe6>
        ble_gatts_num_cfgable_chrs++;
   22e5c:	3301      	adds	r3, #1
   22e5e:	4a31      	ldr	r2, [pc, #196]	; (22f24 <ble_gatts_register_chr+0xf4>)
   22e60:	6013      	str	r3, [r2, #0]
    rc = ble_att_svr_register(uuid_chr, BLE_ATT_F_READ, 0, &def_handle,
   22e62:	9401      	str	r4, [sp, #4]
   22e64:	4b30      	ldr	r3, [pc, #192]	; (22f28 <ble_gatts_register_chr+0xf8>)
   22e66:	9300      	str	r3, [sp, #0]
   22e68:	f10d 0312 	add.w	r3, sp, #18
   22e6c:	2200      	movs	r2, #0
   22e6e:	2101      	movs	r1, #1
   22e70:	482e      	ldr	r0, [pc, #184]	; (22f2c <ble_gatts_register_chr+0xfc>)
   22e72:	f7fc fbf1 	bl	1f658 <ble_att_svr_register>
    if (rc != 0) {
   22e76:	4605      	mov	r5, r0
   22e78:	b118      	cbz	r0, 22e82 <ble_gatts_register_chr+0x52>
}
   22e7a:	4628      	mov	r0, r5
   22e7c:	b00b      	add	sp, #44	; 0x2c
   22e7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    att_flags = ble_gatts_att_flags_from_chr_flags(chr->flags);
   22e82:	8a20      	ldrh	r0, [r4, #16]
   22e84:	f7ff fcf7 	bl	22876 <ble_gatts_att_flags_from_chr_flags>
    rc = ble_att_svr_register(chr->uuid, att_flags, chr->min_key_size,
   22e88:	7ca2      	ldrb	r2, [r4, #18]
   22e8a:	9401      	str	r4, [sp, #4]
   22e8c:	4b28      	ldr	r3, [pc, #160]	; (22f30 <ble_gatts_register_chr+0x100>)
   22e8e:	9300      	str	r3, [sp, #0]
   22e90:	ab04      	add	r3, sp, #16
   22e92:	4601      	mov	r1, r0
   22e94:	6820      	ldr	r0, [r4, #0]
   22e96:	f7fc fbdf 	bl	1f658 <ble_att_svr_register>
    if (rc != 0) {
   22e9a:	4605      	mov	r5, r0
   22e9c:	2800      	cmp	r0, #0
   22e9e:	d1ec      	bne.n	22e7a <ble_gatts_register_chr+0x4a>
    if (chr->val_handle != NULL) {
   22ea0:	6963      	ldr	r3, [r4, #20]
   22ea2:	b113      	cbz	r3, 22eaa <ble_gatts_register_chr+0x7a>
        *chr->val_handle = val_handle;
   22ea4:	f8bd 2010 	ldrh.w	r2, [sp, #16]
   22ea8:	801a      	strh	r2, [r3, #0]
    if (register_cb != NULL) {
   22eaa:	b187      	cbz	r7, 22ece <ble_gatts_register_chr+0x9e>
        register_ctxt.op = BLE_GATT_REGISTER_OP_CHR;
   22eac:	2302      	movs	r3, #2
   22eae:	f88d 3014 	strb.w	r3, [sp, #20]
        register_ctxt.chr.def_handle = def_handle;
   22eb2:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   22eb6:	f8ad 3018 	strh.w	r3, [sp, #24]
        register_ctxt.chr.val_handle = val_handle;
   22eba:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   22ebe:	f8ad 301a 	strh.w	r3, [sp, #26]
        register_ctxt.chr.svc_def = svc;
   22ec2:	f8cd 8020 	str.w	r8, [sp, #32]
        register_ctxt.chr.chr_def = chr;
   22ec6:	9407      	str	r4, [sp, #28]
        register_cb(&register_ctxt, cb_arg);
   22ec8:	4649      	mov	r1, r9
   22eca:	a805      	add	r0, sp, #20
   22ecc:	47b8      	blx	r7
    if (ble_gatts_chr_clt_cfg_allowed(chr) != 0) {
   22ece:	4620      	mov	r0, r4
   22ed0:	f7ff fcc4 	bl	2285c <ble_gatts_chr_clt_cfg_allowed>
   22ed4:	b980      	cbnz	r0, 22ef8 <ble_gatts_register_chr+0xc8>
    if (chr->descriptors != NULL) {
   22ed6:	68e6      	ldr	r6, [r4, #12]
   22ed8:	b1b6      	cbz	r6, 22f08 <ble_gatts_register_chr+0xd8>
        for (dsc = chr->descriptors; dsc->uuid != NULL; dsc++) {
   22eda:	6833      	ldr	r3, [r6, #0]
   22edc:	b1a3      	cbz	r3, 22f08 <ble_gatts_register_chr+0xd8>
            rc = ble_gatts_register_dsc(svc, chr, dsc, def_handle, register_cb,
   22ede:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   22ee2:	f8cd 9004 	str.w	r9, [sp, #4]
   22ee6:	9700      	str	r7, [sp, #0]
   22ee8:	4632      	mov	r2, r6
   22eea:	4621      	mov	r1, r4
   22eec:	4640      	mov	r0, r8
   22eee:	f7ff ff6d 	bl	22dcc <ble_gatts_register_dsc>
            if (rc != 0) {
   22ef2:	b990      	cbnz	r0, 22f1a <ble_gatts_register_chr+0xea>
        for (dsc = chr->descriptors; dsc->uuid != NULL; dsc++) {
   22ef4:	3610      	adds	r6, #16
   22ef6:	e7f0      	b.n	22eda <ble_gatts_register_chr+0xaa>
        rc = ble_gatts_register_clt_cfg_dsc(&dsc_handle);
   22ef8:	f10d 000e 	add.w	r0, sp, #14
   22efc:	f7ff ff4a 	bl	22d94 <ble_gatts_register_clt_cfg_dsc>
        if (rc != 0) {
   22f00:	2800      	cmp	r0, #0
   22f02:	d0e8      	beq.n	22ed6 <ble_gatts_register_chr+0xa6>
            return rc;
   22f04:	4605      	mov	r5, r0
   22f06:	e7b8      	b.n	22e7a <ble_gatts_register_chr+0x4a>
    STATS_INC(ble_gatts_stats, chrs);
   22f08:	4a0a      	ldr	r2, [pc, #40]	; (22f34 <ble_gatts_register_chr+0x104>)
   22f0a:	6913      	ldr	r3, [r2, #16]
   22f0c:	3301      	adds	r3, #1
   22f0e:	6113      	str	r3, [r2, #16]
    return 0;
   22f10:	e7b3      	b.n	22e7a <ble_gatts_register_chr+0x4a>
        return BLE_HS_EINVAL;
   22f12:	2503      	movs	r5, #3
   22f14:	e7b1      	b.n	22e7a <ble_gatts_register_chr+0x4a>
            return BLE_HS_ENOMEM;
   22f16:	2506      	movs	r5, #6
   22f18:	e7af      	b.n	22e7a <ble_gatts_register_chr+0x4a>
                return rc;
   22f1a:	4605      	mov	r5, r0
   22f1c:	e7ad      	b.n	22e7a <ble_gatts_register_chr+0x4a>
   22f1e:	bf00      	nop
   22f20:	20004114 	.word	0x20004114
   22f24:	20002820 	.word	0x20002820
   22f28:	000230a5 	.word	0x000230a5
   22f2c:	200002c0 	.word	0x200002c0
   22f30:	000231f7 	.word	0x000231f7
   22f34:	20004084 	.word	0x20004084

00022f38 <ble_gatts_register_svc>:
{
   22f38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22f3c:	b088      	sub	sp, #32
   22f3e:	4604      	mov	r4, r0
   22f40:	460e      	mov	r6, r1
   22f42:	4617      	mov	r7, r2
   22f44:	4698      	mov	r8, r3
    if (!ble_gatts_svc_incs_satisfied(svc)) {
   22f46:	f7ff fd23 	bl	22990 <ble_gatts_svc_incs_satisfied>
   22f4a:	2800      	cmp	r0, #0
   22f4c:	d045      	beq.n	22fda <ble_gatts_register_svc+0xa2>
    if (!ble_gatts_svc_is_sane(svc)) {
   22f4e:	4620      	mov	r0, r4
   22f50:	f7ff fd8e 	bl	22a70 <ble_gatts_svc_is_sane>
   22f54:	2800      	cmp	r0, #0
   22f56:	d045      	beq.n	22fe4 <ble_gatts_register_svc+0xac>
    uuid = NULL;
   22f58:	2500      	movs	r5, #0
   22f5a:	a908      	add	r1, sp, #32
   22f5c:	f841 5d18 	str.w	r5, [r1, #-24]!
    rc = ble_gatts_svc_type_to_uuid(svc->type, &uuid);
   22f60:	7820      	ldrb	r0, [r4, #0]
   22f62:	f7ff fd73 	bl	22a4c <ble_gatts_svc_type_to_uuid>
    rc = ble_att_svr_register(uuid, BLE_ATT_F_READ, 0, out_handle,
   22f66:	9401      	str	r4, [sp, #4]
   22f68:	4b21      	ldr	r3, [pc, #132]	; (22ff0 <ble_gatts_register_svc+0xb8>)
   22f6a:	9300      	str	r3, [sp, #0]
   22f6c:	4633      	mov	r3, r6
   22f6e:	462a      	mov	r2, r5
   22f70:	2101      	movs	r1, #1
   22f72:	9802      	ldr	r0, [sp, #8]
   22f74:	f7fc fb70 	bl	1f658 <ble_att_svr_register>
    if (rc != 0) {
   22f78:	4605      	mov	r5, r0
   22f7a:	bb78      	cbnz	r0, 22fdc <ble_gatts_register_svc+0xa4>
    if (register_cb != NULL) {
   22f7c:	b14f      	cbz	r7, 22f92 <ble_gatts_register_svc+0x5a>
        register_ctxt.op = BLE_GATT_REGISTER_OP_SVC;
   22f7e:	2301      	movs	r3, #1
   22f80:	f88d 300c 	strb.w	r3, [sp, #12]
        register_ctxt.svc.handle = *out_handle;
   22f84:	8833      	ldrh	r3, [r6, #0]
   22f86:	f8ad 3010 	strh.w	r3, [sp, #16]
        register_ctxt.svc.svc_def = svc;
   22f8a:	9405      	str	r4, [sp, #20]
        register_cb(&register_ctxt, cb_arg);
   22f8c:	4641      	mov	r1, r8
   22f8e:	a803      	add	r0, sp, #12
   22f90:	47b8      	blx	r7
    if (svc->includes != NULL) {
   22f92:	68a3      	ldr	r3, [r4, #8]
   22f94:	b17b      	cbz	r3, 22fb6 <ble_gatts_register_svc+0x7e>
        for (i = 0; svc->includes[i] != NULL; i++) {
   22f96:	462e      	mov	r6, r5
   22f98:	68a3      	ldr	r3, [r4, #8]
   22f9a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
   22f9e:	b150      	cbz	r0, 22fb6 <ble_gatts_register_svc+0x7e>
            idx = ble_gatts_find_svc_entry_idx(svc->includes[i]);
   22fa0:	f7ff fce0 	bl	22964 <ble_gatts_find_svc_entry_idx>
            rc = ble_gatts_register_inc(ble_gatts_svc_entries + idx);
   22fa4:	4b13      	ldr	r3, [pc, #76]	; (22ff4 <ble_gatts_register_svc+0xbc>)
   22fa6:	681b      	ldr	r3, [r3, #0]
   22fa8:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   22fac:	f7ff fede 	bl	22d6c <ble_gatts_register_inc>
            if (rc != 0) {
   22fb0:	b9d0      	cbnz	r0, 22fe8 <ble_gatts_register_svc+0xb0>
        for (i = 0; svc->includes[i] != NULL; i++) {
   22fb2:	3601      	adds	r6, #1
   22fb4:	e7f0      	b.n	22f98 <ble_gatts_register_svc+0x60>
    if (svc->characteristics != NULL) {
   22fb6:	68e6      	ldr	r6, [r4, #12]
   22fb8:	b156      	cbz	r6, 22fd0 <ble_gatts_register_svc+0x98>
        for (chr = svc->characteristics; chr->uuid != NULL; chr++) {
   22fba:	6833      	ldr	r3, [r6, #0]
   22fbc:	b143      	cbz	r3, 22fd0 <ble_gatts_register_svc+0x98>
            rc = ble_gatts_register_chr(svc, chr, register_cb, cb_arg);
   22fbe:	4643      	mov	r3, r8
   22fc0:	463a      	mov	r2, r7
   22fc2:	4631      	mov	r1, r6
   22fc4:	4620      	mov	r0, r4
   22fc6:	f7ff ff33 	bl	22e30 <ble_gatts_register_chr>
            if (rc != 0) {
   22fca:	b978      	cbnz	r0, 22fec <ble_gatts_register_svc+0xb4>
        for (chr = svc->characteristics; chr->uuid != NULL; chr++) {
   22fcc:	3618      	adds	r6, #24
   22fce:	e7f4      	b.n	22fba <ble_gatts_register_svc+0x82>
    STATS_INC(ble_gatts_stats, svcs);
   22fd0:	4a09      	ldr	r2, [pc, #36]	; (22ff8 <ble_gatts_register_svc+0xc0>)
   22fd2:	68d3      	ldr	r3, [r2, #12]
   22fd4:	3301      	adds	r3, #1
   22fd6:	60d3      	str	r3, [r2, #12]
    return 0;
   22fd8:	e000      	b.n	22fdc <ble_gatts_register_svc+0xa4>
        return BLE_HS_EAGAIN;
   22fda:	2501      	movs	r5, #1
}
   22fdc:	4628      	mov	r0, r5
   22fde:	b008      	add	sp, #32
   22fe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return BLE_HS_EINVAL;
   22fe4:	2503      	movs	r5, #3
   22fe6:	e7f9      	b.n	22fdc <ble_gatts_register_svc+0xa4>
                return rc;
   22fe8:	4605      	mov	r5, r0
   22fea:	e7f7      	b.n	22fdc <ble_gatts_register_svc+0xa4>
                return rc;
   22fec:	4605      	mov	r5, r0
   22fee:	e7f5      	b.n	22fdc <ble_gatts_register_svc+0xa4>
   22ff0:	00023071 	.word	0x00023071
   22ff4:	20002830 	.word	0x20002830
   22ff8:	20004084 	.word	0x20004084

00022ffc <ble_gatts_register_round>:
{
   22ffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23000:	b082      	sub	sp, #8
   23002:	4606      	mov	r6, r0
   23004:	4688      	mov	r8, r1
   23006:	4617      	mov	r7, r2
    *out_num_registered = 0;
   23008:	2400      	movs	r4, #0
   2300a:	6004      	str	r4, [r0, #0]
    for (i = 0; i < ble_gatts_num_svc_entries; i++) {
   2300c:	e009      	b.n	23022 <ble_gatts_register_round+0x26>
                entry->handle = handle;
   2300e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   23012:	80ab      	strh	r3, [r5, #4]
                entry->end_group_handle = ble_att_svr_prev_handle();
   23014:	f7fc fb48 	bl	1f6a8 <ble_att_svr_prev_handle>
   23018:	80e8      	strh	r0, [r5, #6]
                (*out_num_registered)++;
   2301a:	6833      	ldr	r3, [r6, #0]
   2301c:	3301      	adds	r3, #1
   2301e:	6033      	str	r3, [r6, #0]
    for (i = 0; i < ble_gatts_num_svc_entries; i++) {
   23020:	3401      	adds	r4, #1
   23022:	4b11      	ldr	r3, [pc, #68]	; (23068 <ble_gatts_register_round+0x6c>)
   23024:	881b      	ldrh	r3, [r3, #0]
   23026:	42a3      	cmp	r3, r4
   23028:	dd17      	ble.n	2305a <ble_gatts_register_round+0x5e>
        entry = ble_gatts_svc_entries + i;
   2302a:	4b10      	ldr	r3, [pc, #64]	; (2306c <ble_gatts_register_round+0x70>)
   2302c:	6818      	ldr	r0, [r3, #0]
   2302e:	eb00 05c4 	add.w	r5, r0, r4, lsl #3
        if (entry->handle == 0) {
   23032:	88ab      	ldrh	r3, [r5, #4]
   23034:	2b00      	cmp	r3, #0
   23036:	d1f3      	bne.n	23020 <ble_gatts_register_round+0x24>
            rc = ble_gatts_register_svc(entry->svc, &handle, cb, cb_arg);
   23038:	463b      	mov	r3, r7
   2303a:	4642      	mov	r2, r8
   2303c:	f10d 0106 	add.w	r1, sp, #6
   23040:	f850 0034 	ldr.w	r0, [r0, r4, lsl #3]
   23044:	f7ff ff78 	bl	22f38 <ble_gatts_register_svc>
            switch (rc) {
   23048:	4603      	mov	r3, r0
   2304a:	2800      	cmp	r0, #0
   2304c:	d0df      	beq.n	2300e <ble_gatts_register_round+0x12>
   2304e:	2801      	cmp	r0, #1
   23050:	d0e6      	beq.n	23020 <ble_gatts_register_round+0x24>
}
   23052:	4618      	mov	r0, r3
   23054:	b002      	add	sp, #8
   23056:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (*out_num_registered == 0) {
   2305a:	6833      	ldr	r3, [r6, #0]
   2305c:	b10b      	cbz	r3, 23062 <ble_gatts_register_round+0x66>
    return 0;
   2305e:	2300      	movs	r3, #0
   23060:	e7f7      	b.n	23052 <ble_gatts_register_round+0x56>
        return BLE_HS_EINVAL;
   23062:	2303      	movs	r3, #3
   23064:	e7f5      	b.n	23052 <ble_gatts_register_round+0x56>
   23066:	bf00      	nop
   23068:	20002828 	.word	0x20002828
   2306c:	20002830 	.word	0x20002830

00023070 <ble_gatts_svc_access>:
{
   23070:	b538      	push	{r3, r4, r5, lr}
   23072:	9c05      	ldr	r4, [sp, #20]
    STATS_INC(ble_gatts_stats, svc_def_reads);
   23074:	4a0a      	ldr	r2, [pc, #40]	; (230a0 <ble_gatts_svc_access+0x30>)
   23076:	6993      	ldr	r3, [r2, #24]
   23078:	3301      	adds	r3, #1
   2307a:	6193      	str	r3, [r2, #24]
    buf = os_mbuf_extend(*om, ble_uuid_length(svc->uuid));
   2307c:	9b04      	ldr	r3, [sp, #16]
   2307e:	681d      	ldr	r5, [r3, #0]
   23080:	6860      	ldr	r0, [r4, #4]
   23082:	f005 fef7 	bl	28e74 <ble_uuid_length>
   23086:	b281      	uxth	r1, r0
   23088:	4628      	mov	r0, r5
   2308a:	f7ea fbf9 	bl	d880 <os_mbuf_extend>
    if (buf == NULL) {
   2308e:	b128      	cbz	r0, 2309c <ble_gatts_svc_access+0x2c>
   23090:	4601      	mov	r1, r0
    ble_uuid_flat(svc->uuid, buf);
   23092:	6860      	ldr	r0, [r4, #4]
   23094:	f005 fec2 	bl	28e1c <ble_uuid_flat>
    return 0;
   23098:	2000      	movs	r0, #0
}
   2309a:	bd38      	pop	{r3, r4, r5, pc}
        return BLE_ATT_ERR_INSUFFICIENT_RES;
   2309c:	2011      	movs	r0, #17
   2309e:	e7fc      	b.n	2309a <ble_gatts_svc_access+0x2a>
   230a0:	20004084 	.word	0x20004084

000230a4 <ble_gatts_chr_def_access>:
{
   230a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   230a6:	460d      	mov	r5, r1
   230a8:	9f06      	ldr	r7, [sp, #24]
   230aa:	9e07      	ldr	r6, [sp, #28]
    STATS_INC(ble_gatts_stats, chr_def_reads);
   230ac:	4a13      	ldr	r2, [pc, #76]	; (230fc <ble_gatts_chr_def_access+0x58>)
   230ae:	6a13      	ldr	r3, [r2, #32]
   230b0:	3301      	adds	r3, #1
   230b2:	6213      	str	r3, [r2, #32]
    buf = os_mbuf_extend(*om, 3);
   230b4:	2103      	movs	r1, #3
   230b6:	6838      	ldr	r0, [r7, #0]
   230b8:	f7ea fbe2 	bl	d880 <os_mbuf_extend>
    if (buf == NULL) {
   230bc:	b1c8      	cbz	r0, 230f2 <ble_gatts_chr_def_access+0x4e>
   230be:	4604      	mov	r4, r0
    buf[0] = ble_gatts_chr_properties(chr);
   230c0:	4630      	mov	r0, r6
   230c2:	f7ff fc03 	bl	228cc <ble_gatts_chr_properties>
   230c6:	f804 0b01 	strb.w	r0, [r4], #1
    put_le16(buf + 1, attr_handle + 1);
   230ca:	1c69      	adds	r1, r5, #1
   230cc:	b289      	uxth	r1, r1
   230ce:	4620      	mov	r0, r4
   230d0:	f00b fe2c 	bl	2ed2c <put_le16>
    buf = os_mbuf_extend(*om, ble_uuid_length(chr->uuid));
   230d4:	683c      	ldr	r4, [r7, #0]
   230d6:	6830      	ldr	r0, [r6, #0]
   230d8:	f005 fecc 	bl	28e74 <ble_uuid_length>
   230dc:	b281      	uxth	r1, r0
   230de:	4620      	mov	r0, r4
   230e0:	f7ea fbce 	bl	d880 <os_mbuf_extend>
    if (buf == NULL) {
   230e4:	4601      	mov	r1, r0
   230e6:	b130      	cbz	r0, 230f6 <ble_gatts_chr_def_access+0x52>
    ble_uuid_flat(chr->uuid, buf);
   230e8:	6830      	ldr	r0, [r6, #0]
   230ea:	f005 fe97 	bl	28e1c <ble_uuid_flat>
    return 0;
   230ee:	2000      	movs	r0, #0
}
   230f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return BLE_ATT_ERR_INSUFFICIENT_RES;
   230f2:	2011      	movs	r0, #17
   230f4:	e7fc      	b.n	230f0 <ble_gatts_chr_def_access+0x4c>
        return BLE_ATT_ERR_INSUFFICIENT_RES;
   230f6:	2011      	movs	r0, #17
   230f8:	e7fa      	b.n	230f0 <ble_gatts_chr_def_access+0x4c>
   230fa:	bf00      	nop
   230fc:	20004084 	.word	0x20004084

00023100 <ble_gatts_inc_access>:
{
   23100:	b570      	push	{r4, r5, r6, lr}
   23102:	9e04      	ldr	r6, [sp, #16]
   23104:	9c05      	ldr	r4, [sp, #20]
    STATS_INC(ble_gatts_stats, svc_inc_reads);
   23106:	4a13      	ldr	r2, [pc, #76]	; (23154 <ble_gatts_inc_access+0x54>)
   23108:	69d3      	ldr	r3, [r2, #28]
   2310a:	3301      	adds	r3, #1
   2310c:	61d3      	str	r3, [r2, #28]
    buf = os_mbuf_extend(*om, 4);
   2310e:	2104      	movs	r1, #4
   23110:	6830      	ldr	r0, [r6, #0]
   23112:	f7ea fbb5 	bl	d880 <os_mbuf_extend>
    if (buf == NULL) {
   23116:	b1c8      	cbz	r0, 2314c <ble_gatts_inc_access+0x4c>
   23118:	4605      	mov	r5, r0
    put_le16(buf + 0, entry->handle);
   2311a:	88a1      	ldrh	r1, [r4, #4]
   2311c:	f00b fe06 	bl	2ed2c <put_le16>
    put_le16(buf + 2, entry->end_group_handle);
   23120:	88e1      	ldrh	r1, [r4, #6]
   23122:	1ca8      	adds	r0, r5, #2
   23124:	f00b fe02 	bl	2ed2c <put_le16>
    uuid16 = ble_uuid_u16(entry->svc->uuid);
   23128:	6823      	ldr	r3, [r4, #0]
   2312a:	6858      	ldr	r0, [r3, #4]
   2312c:	f005 fe3a 	bl	28da4 <ble_uuid_u16>
    if (uuid16 != 0) {
   23130:	4604      	mov	r4, r0
   23132:	b908      	cbnz	r0, 23138 <ble_gatts_inc_access+0x38>
    return 0;
   23134:	2000      	movs	r0, #0
}
   23136:	bd70      	pop	{r4, r5, r6, pc}
        buf = os_mbuf_extend(*om, 2);
   23138:	2102      	movs	r1, #2
   2313a:	6830      	ldr	r0, [r6, #0]
   2313c:	f7ea fba0 	bl	d880 <os_mbuf_extend>
        if (buf == NULL) {
   23140:	b130      	cbz	r0, 23150 <ble_gatts_inc_access+0x50>
        put_le16(buf, uuid16);
   23142:	4621      	mov	r1, r4
   23144:	f00b fdf2 	bl	2ed2c <put_le16>
    return 0;
   23148:	2000      	movs	r0, #0
   2314a:	e7f4      	b.n	23136 <ble_gatts_inc_access+0x36>
        return BLE_ATT_ERR_INSUFFICIENT_RES;
   2314c:	2011      	movs	r0, #17
   2314e:	e7f2      	b.n	23136 <ble_gatts_inc_access+0x36>
            return BLE_ATT_ERR_INSUFFICIENT_RES;
   23150:	2011      	movs	r0, #17
   23152:	e7f0      	b.n	23136 <ble_gatts_inc_access+0x36>
   23154:	20004084 	.word	0x20004084

00023158 <ble_gatts_val_access>:
{
   23158:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2315c:	4606      	mov	r6, r0
   2315e:	4688      	mov	r8, r1
   23160:	4617      	mov	r7, r2
   23162:	461c      	mov	r4, r3
   23164:	9d08      	ldr	r5, [sp, #32]
    switch (gatt_ctxt->op) {
   23166:	781b      	ldrb	r3, [r3, #0]
   23168:	2b03      	cmp	r3, #3
   2316a:	d840      	bhi.n	231ee <ble_gatts_val_access+0x96>
   2316c:	e8df f003 	tbb	[pc, r3]
   23170:	33023302 	.word	0x33023302
        if (offset == 0) {
   23174:	b9f7      	cbnz	r7, 231b4 <ble_gatts_val_access+0x5c>
            gatt_ctxt->om = *om;
   23176:	682b      	ldr	r3, [r5, #0]
   23178:	6063      	str	r3, [r4, #4]
            new_om = 0;
   2317a:	f04f 0900 	mov.w	r9, #0
        initial_len = OS_MBUF_PKTLEN(gatt_ctxt->om);
   2317e:	6863      	ldr	r3, [r4, #4]
   23180:	f8b3 a010 	ldrh.w	sl, [r3, #16]
        rc = access_cb(conn_handle, attr_handle, gatt_ctxt, cb_arg);
   23184:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   23186:	4622      	mov	r2, r4
   23188:	4641      	mov	r1, r8
   2318a:	4630      	mov	r0, r6
   2318c:	9e09      	ldr	r6, [sp, #36]	; 0x24
   2318e:	47b0      	blx	r6
        if (rc == 0) {
   23190:	4606      	mov	r6, r0
   23192:	b940      	cbnz	r0, 231a6 <ble_gatts_val_access+0x4e>
            attr_len = OS_MBUF_PKTLEN(gatt_ctxt->om) - initial_len - offset;
   23194:	6861      	ldr	r1, [r4, #4]
   23196:	8a0b      	ldrh	r3, [r1, #16]
   23198:	eba3 030a 	sub.w	r3, r3, sl
            if (attr_len >= 0) {
   2319c:	1bdb      	subs	r3, r3, r7
   2319e:	d418      	bmi.n	231d2 <ble_gatts_val_access+0x7a>
                if (new_om) {
   231a0:	f1b9 0f00 	cmp.w	r9, #0
   231a4:	d10f      	bne.n	231c6 <ble_gatts_val_access+0x6e>
        if (new_om) {
   231a6:	f1b9 0f00 	cmp.w	r9, #0
   231aa:	d01d      	beq.n	231e8 <ble_gatts_val_access+0x90>
            os_mbuf_free_chain(gatt_ctxt->om);
   231ac:	6860      	ldr	r0, [r4, #4]
   231ae:	f7ea f937 	bl	d420 <os_mbuf_free_chain>
   231b2:	e019      	b.n	231e8 <ble_gatts_val_access+0x90>
            gatt_ctxt->om = os_msys_get_pkthdr(0, 0);
   231b4:	2100      	movs	r1, #0
   231b6:	4608      	mov	r0, r1
   231b8:	f7ea fdf3 	bl	dda2 <os_msys_get_pkthdr>
   231bc:	6060      	str	r0, [r4, #4]
            if (gatt_ctxt->om == NULL) {
   231be:	b1c0      	cbz	r0, 231f2 <ble_gatts_val_access+0x9a>
            new_om = 1;
   231c0:	f04f 0901 	mov.w	r9, #1
   231c4:	e7db      	b.n	2317e <ble_gatts_val_access+0x26>
                    os_mbuf_appendfrom(*om, gatt_ctxt->om, offset, attr_len);
   231c6:	b29b      	uxth	r3, r3
   231c8:	463a      	mov	r2, r7
   231ca:	6828      	ldr	r0, [r5, #0]
   231cc:	f7ea f9a9 	bl	d522 <os_mbuf_appendfrom>
   231d0:	e7e9      	b.n	231a6 <ble_gatts_val_access+0x4e>
                rc = BLE_ATT_ERR_INVALID_OFFSET;
   231d2:	2607      	movs	r6, #7
   231d4:	e7e7      	b.n	231a6 <ble_gatts_val_access+0x4e>
        gatt_ctxt->om = *om;
   231d6:	682b      	ldr	r3, [r5, #0]
   231d8:	6063      	str	r3, [r4, #4]
        rc = access_cb(conn_handle, attr_handle, gatt_ctxt, cb_arg);
   231da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   231dc:	4622      	mov	r2, r4
   231de:	9e09      	ldr	r6, [sp, #36]	; 0x24
   231e0:	47b0      	blx	r6
   231e2:	4606      	mov	r6, r0
        *om = gatt_ctxt->om;
   231e4:	6863      	ldr	r3, [r4, #4]
   231e6:	602b      	str	r3, [r5, #0]
}
   231e8:	4630      	mov	r0, r6
   231ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return BLE_ATT_ERR_UNLIKELY;
   231ee:	260e      	movs	r6, #14
   231f0:	e7fa      	b.n	231e8 <ble_gatts_val_access+0x90>
                return BLE_ATT_ERR_INSUFFICIENT_RES;
   231f2:	2611      	movs	r6, #17
   231f4:	e7f8      	b.n	231e8 <ble_gatts_val_access+0x90>

000231f6 <ble_gatts_chr_val_access>:
{
   231f6:	b5f0      	push	{r4, r5, r6, r7, lr}
   231f8:	b089      	sub	sp, #36	; 0x24
   231fa:	4605      	mov	r5, r0
   231fc:	460e      	mov	r6, r1
   231fe:	461f      	mov	r7, r3
   23200:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    gatt_ctxt.op = ble_gatts_chr_op(att_op);
   23202:	4610      	mov	r0, r2
   23204:	f7ff fb97 	bl	22936 <ble_gatts_chr_op>
   23208:	f88d 0014 	strb.w	r0, [sp, #20]
    gatt_ctxt.chr = chr_def;
   2320c:	9407      	str	r4, [sp, #28]
    ble_gatts_chr_inc_val_stat(gatt_ctxt.op);
   2320e:	f7ff fb99 	bl	22944 <ble_gatts_chr_inc_val_stat>
    rc = ble_gatts_val_access(conn_handle, attr_handle, offset, &gatt_ctxt, om,
   23212:	6863      	ldr	r3, [r4, #4]
   23214:	68a2      	ldr	r2, [r4, #8]
   23216:	9202      	str	r2, [sp, #8]
   23218:	9301      	str	r3, [sp, #4]
   2321a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2321c:	9300      	str	r3, [sp, #0]
   2321e:	ab05      	add	r3, sp, #20
   23220:	463a      	mov	r2, r7
   23222:	4631      	mov	r1, r6
   23224:	4628      	mov	r0, r5
   23226:	f7ff ff97 	bl	23158 <ble_gatts_val_access>
}
   2322a:	b009      	add	sp, #36	; 0x24
   2322c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002322e <ble_gatts_dsc_access>:
{
   2322e:	b5f0      	push	{r4, r5, r6, r7, lr}
   23230:	b089      	sub	sp, #36	; 0x24
   23232:	4605      	mov	r5, r0
   23234:	460e      	mov	r6, r1
   23236:	461f      	mov	r7, r3
   23238:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    gatt_ctxt.op = ble_gatts_dsc_op(att_op);
   2323a:	4610      	mov	r0, r2
   2323c:	f7ff fbc6 	bl	229cc <ble_gatts_dsc_op>
   23240:	f88d 0014 	strb.w	r0, [sp, #20]
    gatt_ctxt.dsc = dsc_def;
   23244:	9407      	str	r4, [sp, #28]
    ble_gatts_dsc_inc_stat(gatt_ctxt.op);
   23246:	f7ff fbc7 	bl	229d8 <ble_gatts_dsc_inc_stat>
    rc = ble_gatts_val_access(conn_handle, attr_handle, offset, &gatt_ctxt, om,
   2324a:	68a3      	ldr	r3, [r4, #8]
   2324c:	68e2      	ldr	r2, [r4, #12]
   2324e:	9202      	str	r2, [sp, #8]
   23250:	9301      	str	r3, [sp, #4]
   23252:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   23254:	9300      	str	r3, [sp, #0]
   23256:	ab05      	add	r3, sp, #20
   23258:	463a      	mov	r2, r7
   2325a:	4631      	mov	r1, r6
   2325c:	4628      	mov	r0, r5
   2325e:	f7ff ff7b 	bl	23158 <ble_gatts_val_access>
}
   23262:	b009      	add	sp, #36	; 0x24
   23264:	bdf0      	pop	{r4, r5, r6, r7, pc}

00023266 <ble_gatts_mutable>:
{
   23266:	b508      	push	{r3, lr}
    if (ble_gap_adv_active() ||
   23268:	f7fd fd79 	bl	20d5e <ble_gap_adv_active>
   2326c:	b108      	cbz	r0, 23272 <ble_gatts_mutable+0xc>
        return false;
   2326e:	2000      	movs	r0, #0
}
   23270:	bd08      	pop	{r3, pc}
        ble_gap_disc_active() ||
   23272:	f7fd fe81 	bl	20f78 <ble_gap_disc_active>
    if (ble_gap_adv_active() ||
   23276:	b108      	cbz	r0, 2327c <ble_gatts_mutable+0x16>
        return false;
   23278:	2000      	movs	r0, #0
   2327a:	e7f9      	b.n	23270 <ble_gatts_mutable+0xa>
        ble_gap_conn_active()) {
   2327c:	f7fd fe86 	bl	20f8c <ble_gap_conn_active>
        ble_gap_disc_active() ||
   23280:	b108      	cbz	r0, 23286 <ble_gatts_mutable+0x20>
        return false;
   23282:	2000      	movs	r0, #0
   23284:	e7f4      	b.n	23270 <ble_gatts_mutable+0xa>
    if (ble_hs_conn_first() != NULL) {
   23286:	f001 faab 	bl	247e0 <ble_hs_conn_first>
   2328a:	b108      	cbz	r0, 23290 <ble_gatts_mutable+0x2a>
        return false;
   2328c:	2000      	movs	r0, #0
   2328e:	e7ef      	b.n	23270 <ble_gatts_mutable+0xa>
    return true;
   23290:	2001      	movs	r0, #1
   23292:	e7ed      	b.n	23270 <ble_gatts_mutable+0xa>

00023294 <ble_gatts_free_mem>:
{
   23294:	b538      	push	{r3, r4, r5, lr}
    free(ble_gatts_clt_cfg_mem);
   23296:	4c06      	ldr	r4, [pc, #24]	; (232b0 <ble_gatts_free_mem+0x1c>)
   23298:	6820      	ldr	r0, [r4, #0]
   2329a:	f00b ff8f 	bl	2f1bc <free>
    ble_gatts_clt_cfg_mem = NULL;
   2329e:	2500      	movs	r5, #0
   232a0:	6025      	str	r5, [r4, #0]
    free(ble_gatts_svc_entries);
   232a2:	4c04      	ldr	r4, [pc, #16]	; (232b4 <ble_gatts_free_mem+0x20>)
   232a4:	6820      	ldr	r0, [r4, #0]
   232a6:	f00b ff89 	bl	2f1bc <free>
    ble_gatts_svc_entries = NULL;
   232aa:	6025      	str	r5, [r4, #0]
}
   232ac:	bd38      	pop	{r3, r4, r5, pc}
   232ae:	bf00      	nop
   232b0:	200027fc 	.word	0x200027fc
   232b4:	20002830 	.word	0x20002830

000232b8 <ble_gatts_free_svc_defs>:
{
   232b8:	b510      	push	{r4, lr}
    free(ble_gatts_svc_defs);
   232ba:	4c04      	ldr	r4, [pc, #16]	; (232cc <ble_gatts_free_svc_defs+0x14>)
   232bc:	6820      	ldr	r0, [r4, #0]
   232be:	f00b ff7d 	bl	2f1bc <free>
    ble_gatts_svc_defs = NULL;
   232c2:	2300      	movs	r3, #0
   232c4:	6023      	str	r3, [r4, #0]
    ble_gatts_num_svc_defs = 0;
   232c6:	4a02      	ldr	r2, [pc, #8]	; (232d0 <ble_gatts_free_svc_defs+0x18>)
   232c8:	6013      	str	r3, [r2, #0]
}
   232ca:	bd10      	pop	{r4, pc}
   232cc:	2000282c 	.word	0x2000282c
   232d0:	20002824 	.word	0x20002824

000232d4 <ble_gatts_tx_notifications_one_chr>:
{
   232d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   232d8:	4680      	mov	r8, r0
    clt_cfg_idx = ble_gatts_clt_cfg_find_idx(ble_gatts_clt_cfgs,
   232da:	4601      	mov	r1, r0
   232dc:	4b17      	ldr	r3, [pc, #92]	; (2333c <ble_gatts_tx_notifications_one_chr+0x68>)
   232de:	6818      	ldr	r0, [r3, #0]
   232e0:	f7ff fb96 	bl	22a10 <ble_gatts_clt_cfg_find_idx>
    if (clt_cfg_idx == -1) {
   232e4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   232e8:	d026      	beq.n	23338 <ble_gatts_tx_notifications_one_chr+0x64>
   232ea:	4681      	mov	r9, r0
    for (i = 0; ; i++) {
   232ec:	2500      	movs	r5, #0
   232ee:	e008      	b.n	23302 <ble_gatts_tx_notifications_one_chr+0x2e>
            att_op = 0;
   232f0:	2600      	movs	r6, #0
            conn_handle = BLE_HS_CONN_HANDLE_NONE;
   232f2:	f64f 77ff 	movw	r7, #65535	; 0xffff
   232f6:	e013      	b.n	23320 <ble_gatts_tx_notifications_one_chr+0x4c>
            ble_gattc_notify(conn_handle, chr_val_handle);
   232f8:	4641      	mov	r1, r8
   232fa:	4638      	mov	r0, r7
   232fc:	f7ff f9d8 	bl	226b0 <ble_gattc_notify>
    for (i = 0; ; i++) {
   23300:	3501      	adds	r5, #1
        ble_hs_lock();
   23302:	f000 fbbd 	bl	23a80 <ble_hs_lock>
        conn = ble_hs_conn_find_by_idx(i);
   23306:	4628      	mov	r0, r5
   23308:	f001 fa54 	bl	247b4 <ble_hs_conn_find_by_idx>
        if (conn != NULL) {
   2330c:	4604      	mov	r4, r0
   2330e:	2800      	cmp	r0, #0
   23310:	d0ee      	beq.n	232f0 <ble_gatts_tx_notifications_one_chr+0x1c>
            clt_cfg = conn->bhc_gatt_svr.clt_cfgs + clt_cfg_idx;
   23312:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
            att_op = ble_gatts_schedule_update(conn, clt_cfg);
   23314:	eb01 0189 	add.w	r1, r1, r9, lsl #2
   23318:	f7ff fbbe 	bl	22a98 <ble_gatts_schedule_update>
   2331c:	4606      	mov	r6, r0
            conn_handle = conn->bhc_handle;
   2331e:	88a7      	ldrh	r7, [r4, #4]
        ble_hs_unlock();
   23320:	f000 fbb2 	bl	23a88 <ble_hs_unlock>
        if (conn == NULL) {
   23324:	b144      	cbz	r4, 23338 <ble_gatts_tx_notifications_one_chr+0x64>
        switch (att_op) {
   23326:	2e1b      	cmp	r6, #27
   23328:	d0e6      	beq.n	232f8 <ble_gatts_tx_notifications_one_chr+0x24>
   2332a:	2e1d      	cmp	r6, #29
   2332c:	d1e8      	bne.n	23300 <ble_gatts_tx_notifications_one_chr+0x2c>
            ble_gattc_indicate(conn_handle, chr_val_handle);
   2332e:	4641      	mov	r1, r8
   23330:	4638      	mov	r0, r7
   23332:	f7ff fa25 	bl	22780 <ble_gattc_indicate>
            break;
   23336:	e7e3      	b.n	23300 <ble_gatts_tx_notifications_one_chr+0x2c>
}
   23338:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2333c:	2000281c 	.word	0x2000281c

00023340 <ble_gatts_register_svcs>:
{
   23340:	b5f0      	push	{r4, r5, r6, r7, lr}
   23342:	b083      	sub	sp, #12
    for (i = 0; svcs[i].type != BLE_GATT_SVC_TYPE_END; i++) {
   23344:	2400      	movs	r4, #0
   23346:	0123      	lsls	r3, r4, #4
   23348:	18c7      	adds	r7, r0, r3
   2334a:	5cc3      	ldrb	r3, [r0, r3]
   2334c:	b19b      	cbz	r3, 23376 <ble_gatts_register_svcs+0x36>
        idx = ble_gatts_num_svc_entries + i;
   2334e:	4b16      	ldr	r3, [pc, #88]	; (233a8 <ble_gatts_register_svcs+0x68>)
   23350:	881b      	ldrh	r3, [r3, #0]
   23352:	4423      	add	r3, r4
        if (idx >= ble_hs_max_services) {
   23354:	4d15      	ldr	r5, [pc, #84]	; (233ac <ble_gatts_register_svcs+0x6c>)
   23356:	882d      	ldrh	r5, [r5, #0]
   23358:	429d      	cmp	r5, r3
   2335a:	dd21      	ble.n	233a0 <ble_gatts_register_svcs+0x60>
        ble_gatts_svc_entries[idx].svc = svcs + i;
   2335c:	4d14      	ldr	r5, [pc, #80]	; (233b0 <ble_gatts_register_svcs+0x70>)
   2335e:	682e      	ldr	r6, [r5, #0]
   23360:	eb06 05c3 	add.w	r5, r6, r3, lsl #3
   23364:	f846 7033 	str.w	r7, [r6, r3, lsl #3]
        ble_gatts_svc_entries[idx].handle = 0;
   23368:	2300      	movs	r3, #0
   2336a:	80ab      	strh	r3, [r5, #4]
        ble_gatts_svc_entries[idx].end_group_handle = 0xffff;
   2336c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   23370:	80eb      	strh	r3, [r5, #6]
    for (i = 0; svcs[i].type != BLE_GATT_SVC_TYPE_END; i++) {
   23372:	3401      	adds	r4, #1
   23374:	e7e7      	b.n	23346 <ble_gatts_register_svcs+0x6>
   23376:	4617      	mov	r7, r2
   23378:	460e      	mov	r6, r1
    ble_gatts_num_svc_entries += num_svcs;
   2337a:	4a0b      	ldr	r2, [pc, #44]	; (233a8 <ble_gatts_register_svcs+0x68>)
   2337c:	8813      	ldrh	r3, [r2, #0]
   2337e:	4423      	add	r3, r4
   23380:	8013      	strh	r3, [r2, #0]
    total_registered = 0;
   23382:	2500      	movs	r5, #0
    while (total_registered < num_svcs) {
   23384:	42a5      	cmp	r5, r4
   23386:	da09      	bge.n	2339c <ble_gatts_register_svcs+0x5c>
        rc = ble_gatts_register_round(&cur_registered, cb, cb_arg);
   23388:	463a      	mov	r2, r7
   2338a:	4631      	mov	r1, r6
   2338c:	a801      	add	r0, sp, #4
   2338e:	f7ff fe35 	bl	22ffc <ble_gatts_register_round>
        if (rc != 0) {
   23392:	4603      	mov	r3, r0
   23394:	b928      	cbnz	r0, 233a2 <ble_gatts_register_svcs+0x62>
        total_registered += cur_registered;
   23396:	9b01      	ldr	r3, [sp, #4]
   23398:	441d      	add	r5, r3
   2339a:	e7f3      	b.n	23384 <ble_gatts_register_svcs+0x44>
    return 0;
   2339c:	2300      	movs	r3, #0
   2339e:	e000      	b.n	233a2 <ble_gatts_register_svcs+0x62>
            return BLE_HS_ENOMEM;
   233a0:	2306      	movs	r3, #6
}
   233a2:	4618      	mov	r0, r3
   233a4:	b003      	add	sp, #12
   233a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   233a8:	20002828 	.word	0x20002828
   233ac:	2000410e 	.word	0x2000410e
   233b0:	20002830 	.word	0x20002830

000233b4 <ble_gatts_connection_broken>:
{
   233b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   233b6:	b083      	sub	sp, #12
   233b8:	4606      	mov	r6, r0
    ble_hs_lock();
   233ba:	f000 fb61 	bl	23a80 <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
   233be:	4630      	mov	r0, r6
   233c0:	f001 f9ae 	bl	24720 <ble_hs_conn_find>
    if (conn != NULL) {
   233c4:	4604      	mov	r4, r0
   233c6:	b120      	cbz	r0, 233d2 <ble_gatts_connection_broken+0x1e>
        clt_cfgs = conn->bhc_gatt_svr.clt_cfgs;
   233c8:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
        num_clt_cfgs = conn->bhc_gatt_svr.num_clt_cfgs;
   233ca:	6d07      	ldr	r7, [r0, #80]	; 0x50
        conn->bhc_gatt_svr.clt_cfgs = NULL;
   233cc:	2300      	movs	r3, #0
   233ce:	64c3      	str	r3, [r0, #76]	; 0x4c
        conn->bhc_gatt_svr.num_clt_cfgs = 0;
   233d0:	6503      	str	r3, [r0, #80]	; 0x50
    ble_hs_unlock();
   233d2:	f000 fb59 	bl	23a88 <ble_hs_unlock>
    if (conn == NULL) {
   233d6:	b1bc      	cbz	r4, 23408 <ble_gatts_connection_broken+0x54>
    ble_gatts_indicate_fail_notconn(conn_handle);
   233d8:	4630      	mov	r0, r6
   233da:	f7ff f96e 	bl	226ba <ble_gatts_indicate_fail_notconn>
    if (clt_cfgs != NULL) {
   233de:	b19d      	cbz	r5, 23408 <ble_gatts_connection_broken+0x54>
        for (i = 0; i < num_clt_cfgs; i++) {
   233e0:	2400      	movs	r4, #0
   233e2:	e00b      	b.n	233fc <ble_gatts_connection_broken+0x48>
            ble_gatts_subscribe_event(conn_handle, clt_cfgs[i].chr_val_handle,
   233e4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   233e8:	789b      	ldrb	r3, [r3, #2]
   233ea:	f835 1024 	ldrh.w	r1, [r5, r4, lsl #2]
   233ee:	2200      	movs	r2, #0
   233f0:	9200      	str	r2, [sp, #0]
   233f2:	2202      	movs	r2, #2
   233f4:	4630      	mov	r0, r6
   233f6:	f7ff fc57 	bl	22ca8 <ble_gatts_subscribe_event>
        for (i = 0; i < num_clt_cfgs; i++) {
   233fa:	3401      	adds	r4, #1
   233fc:	42a7      	cmp	r7, r4
   233fe:	dcf1      	bgt.n	233e4 <ble_gatts_connection_broken+0x30>
        rc = os_memblock_put(&ble_gatts_clt_cfg_pool, clt_cfgs);
   23400:	4629      	mov	r1, r5
   23402:	4802      	ldr	r0, [pc, #8]	; (2340c <ble_gatts_connection_broken+0x58>)
   23404:	f7ea fc2a 	bl	dc5c <os_memblock_put>
}
   23408:	b003      	add	sp, #12
   2340a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2340c:	20002800 	.word	0x20002800

00023410 <ble_gatts_start>:
{
   23410:	b570      	push	{r4, r5, r6, lr}
   23412:	b084      	sub	sp, #16
    ble_uuid16_t uuid = BLE_UUID16_INIT(BLE_ATT_UUID_CHARACTERISTIC);
   23414:	4b43      	ldr	r3, [pc, #268]	; (23524 <ble_gatts_start+0x114>)
   23416:	681b      	ldr	r3, [r3, #0]
   23418:	9303      	str	r3, [sp, #12]
    ble_hs_lock();
   2341a:	f000 fb31 	bl	23a80 <ble_hs_lock>
    if (!ble_gatts_mutable()) {
   2341e:	f7ff ff22 	bl	23266 <ble_gatts_mutable>
   23422:	2800      	cmp	r0, #0
   23424:	d071      	beq.n	2350a <ble_gatts_start+0xfa>
    ble_gatts_free_mem();
   23426:	f7ff ff35 	bl	23294 <ble_gatts_free_mem>
    rc = ble_att_svr_start();
   2342a:	f7fc fea9 	bl	20180 <ble_att_svr_start>
    if (rc != 0) {
   2342e:	4604      	mov	r4, r0
   23430:	2800      	cmp	r0, #0
   23432:	d168      	bne.n	23506 <ble_gatts_start+0xf6>
    if (ble_hs_max_client_configs > 0) {
   23434:	4b3c      	ldr	r3, [pc, #240]	; (23528 <ble_gatts_start+0x118>)
   23436:	8818      	ldrh	r0, [r3, #0]
   23438:	b9b0      	cbnz	r0, 23468 <ble_gatts_start+0x58>
    if (ble_hs_max_services > 0) {
   2343a:	4b3c      	ldr	r3, [pc, #240]	; (2352c <ble_gatts_start+0x11c>)
   2343c:	8818      	ldrh	r0, [r3, #0]
   2343e:	b9e0      	cbnz	r0, 2347a <ble_gatts_start+0x6a>
    ble_gatts_num_svc_entries = 0;
   23440:	4b3b      	ldr	r3, [pc, #236]	; (23530 <ble_gatts_start+0x120>)
   23442:	2200      	movs	r2, #0
   23444:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < ble_gatts_num_svc_defs; i++) {
   23446:	4b3b      	ldr	r3, [pc, #236]	; (23534 <ble_gatts_start+0x124>)
   23448:	681b      	ldr	r3, [r3, #0]
   2344a:	42a3      	cmp	r3, r4
   2344c:	dd1e      	ble.n	2348c <ble_gatts_start+0x7c>
        rc = ble_gatts_register_svcs(ble_gatts_svc_defs[i],
   2344e:	4b3a      	ldr	r3, [pc, #232]	; (23538 <ble_gatts_start+0x128>)
   23450:	6818      	ldr	r0, [r3, #0]
   23452:	4b3a      	ldr	r3, [pc, #232]	; (2353c <ble_gatts_start+0x12c>)
   23454:	685a      	ldr	r2, [r3, #4]
   23456:	6819      	ldr	r1, [r3, #0]
   23458:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
   2345c:	f7ff ff70 	bl	23340 <ble_gatts_register_svcs>
        if (rc != 0) {
   23460:	2800      	cmp	r0, #0
   23462:	d14f      	bne.n	23504 <ble_gatts_start+0xf4>
    for (i = 0; i < ble_gatts_num_svc_defs; i++) {
   23464:	3401      	adds	r4, #1
   23466:	e7ee      	b.n	23446 <ble_gatts_start+0x36>
        ble_gatts_clt_cfg_mem = malloc(
   23468:	0080      	lsls	r0, r0, #2
   2346a:	f00b fe71 	bl	2f150 <malloc>
   2346e:	4b34      	ldr	r3, [pc, #208]	; (23540 <ble_gatts_start+0x130>)
   23470:	6018      	str	r0, [r3, #0]
        if (ble_gatts_clt_cfg_mem == NULL) {
   23472:	2800      	cmp	r0, #0
   23474:	d1e1      	bne.n	2343a <ble_gatts_start+0x2a>
            rc = BLE_HS_ENOMEM;
   23476:	2406      	movs	r4, #6
   23478:	e048      	b.n	2350c <ble_gatts_start+0xfc>
            malloc(ble_hs_max_services * sizeof *ble_gatts_svc_entries);
   2347a:	00c0      	lsls	r0, r0, #3
   2347c:	f00b fe68 	bl	2f150 <malloc>
        ble_gatts_svc_entries =
   23480:	4b30      	ldr	r3, [pc, #192]	; (23544 <ble_gatts_start+0x134>)
   23482:	6018      	str	r0, [r3, #0]
        if (ble_gatts_svc_entries == NULL) {
   23484:	2800      	cmp	r0, #0
   23486:	d1db      	bne.n	23440 <ble_gatts_start+0x30>
            rc = BLE_HS_ENOMEM;
   23488:	2406      	movs	r4, #6
   2348a:	e03f      	b.n	2350c <ble_gatts_start+0xfc>
    ble_gatts_free_svc_defs();
   2348c:	f7ff ff14 	bl	232b8 <ble_gatts_free_svc_defs>
    if (ble_gatts_num_cfgable_chrs == 0) {
   23490:	4b2d      	ldr	r3, [pc, #180]	; (23548 <ble_gatts_start+0x138>)
   23492:	681c      	ldr	r4, [r3, #0]
   23494:	2c00      	cmp	r4, #0
   23496:	d03d      	beq.n	23514 <ble_gatts_start+0x104>
    num_elems = ble_hs_max_client_configs / ble_gatts_num_cfgable_chrs;
   23498:	4b23      	ldr	r3, [pc, #140]	; (23528 <ble_gatts_start+0x118>)
   2349a:	881b      	ldrh	r3, [r3, #0]
   2349c:	fb93 f4f4 	sdiv	r4, r3, r4
                         ble_gatts_clt_cfg_size(), ble_gatts_clt_cfg_mem,
   234a0:	f7ff faf4 	bl	22a8c <ble_gatts_clt_cfg_size>
    rc = os_mempool_init(&ble_gatts_clt_cfg_pool, num_elems,
   234a4:	4b26      	ldr	r3, [pc, #152]	; (23540 <ble_gatts_start+0x130>)
   234a6:	681b      	ldr	r3, [r3, #0]
   234a8:	4a28      	ldr	r2, [pc, #160]	; (2354c <ble_gatts_start+0x13c>)
   234aa:	9200      	str	r2, [sp, #0]
   234ac:	4602      	mov	r2, r0
   234ae:	b2a1      	uxth	r1, r4
   234b0:	4827      	ldr	r0, [pc, #156]	; (23550 <ble_gatts_start+0x140>)
   234b2:	f7ea fb67 	bl	db84 <os_mempool_init>
   234b6:	4606      	mov	r6, r0
   234b8:	4604      	mov	r4, r0
    if (rc != 0) {
   234ba:	b108      	cbz	r0, 234c0 <ble_gatts_start+0xb0>
        rc = BLE_HS_EOS;
   234bc:	240b      	movs	r4, #11
   234be:	e025      	b.n	2350c <ble_gatts_start+0xfc>
    ble_gatts_clt_cfgs = os_memblock_get(&ble_gatts_clt_cfg_pool);
   234c0:	4823      	ldr	r0, [pc, #140]	; (23550 <ble_gatts_start+0x140>)
   234c2:	f7ea fba3 	bl	dc0c <os_memblock_get>
   234c6:	4b23      	ldr	r3, [pc, #140]	; (23554 <ble_gatts_start+0x144>)
   234c8:	6018      	str	r0, [r3, #0]
    if (ble_gatts_clt_cfgs == NULL) {
   234ca:	b340      	cbz	r0, 2351e <ble_gatts_start+0x10e>
    ha = NULL;
   234cc:	2500      	movs	r5, #0
    while ((ha = ble_att_svr_find_by_uuid(ha, &uuid.u, 0xffff)) != NULL) {
   234ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
   234d2:	a903      	add	r1, sp, #12
   234d4:	4628      	mov	r0, r5
   234d6:	f7fc f945 	bl	1f764 <ble_att_svr_find_by_uuid>
   234da:	4605      	mov	r5, r0
   234dc:	b198      	cbz	r0, 23506 <ble_gatts_start+0xf6>
        allowed_flags = ble_gatts_chr_clt_cfg_allowed(chr);
   234de:	6928      	ldr	r0, [r5, #16]
   234e0:	f7ff f9bc 	bl	2285c <ble_gatts_chr_clt_cfg_allowed>
        if (allowed_flags != 0) {
   234e4:	4601      	mov	r1, r0
   234e6:	2800      	cmp	r0, #0
   234e8:	d0f1      	beq.n	234ce <ble_gatts_start+0xbe>
            ble_gatts_clt_cfgs[idx].chr_val_handle = ha->ha_handle_id + 1;
   234ea:	896b      	ldrh	r3, [r5, #10]
   234ec:	4a19      	ldr	r2, [pc, #100]	; (23554 <ble_gatts_start+0x144>)
   234ee:	6810      	ldr	r0, [r2, #0]
   234f0:	eb00 0286 	add.w	r2, r0, r6, lsl #2
   234f4:	3301      	adds	r3, #1
   234f6:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
            ble_gatts_clt_cfgs[idx].allowed = allowed_flags;
   234fa:	70d1      	strb	r1, [r2, #3]
            ble_gatts_clt_cfgs[idx].flags = 0;
   234fc:	2300      	movs	r3, #0
   234fe:	7093      	strb	r3, [r2, #2]
            idx++;
   23500:	3601      	adds	r6, #1
   23502:	e7e4      	b.n	234ce <ble_gatts_start+0xbe>
        rc = ble_gatts_register_svcs(ble_gatts_svc_defs[i],
   23504:	4604      	mov	r4, r0
    if (rc != 0) {
   23506:	b90c      	cbnz	r4, 2350c <ble_gatts_start+0xfc>
   23508:	e004      	b.n	23514 <ble_gatts_start+0x104>
        rc = BLE_HS_EBUSY;
   2350a:	240f      	movs	r4, #15
        ble_gatts_free_mem();
   2350c:	f7ff fec2 	bl	23294 <ble_gatts_free_mem>
        ble_gatts_free_svc_defs();
   23510:	f7ff fed2 	bl	232b8 <ble_gatts_free_svc_defs>
    ble_hs_unlock();
   23514:	f000 fab8 	bl	23a88 <ble_hs_unlock>
}
   23518:	4620      	mov	r0, r4
   2351a:	b004      	add	sp, #16
   2351c:	bd70      	pop	{r4, r5, r6, pc}
        rc = BLE_HS_ENOMEM;
   2351e:	2406      	movs	r4, #6
   23520:	e7f4      	b.n	2350c <ble_gatts_start+0xfc>
   23522:	bf00      	nop
   23524:	00032370 	.word	0x00032370
   23528:	20004114 	.word	0x20004114
   2352c:	2000410e 	.word	0x2000410e
   23530:	20002828 	.word	0x20002828
   23534:	20002824 	.word	0x20002824
   23538:	2000282c 	.word	0x2000282c
   2353c:	200002c8 	.word	0x200002c8
   23540:	200027fc 	.word	0x200027fc
   23544:	20002830 	.word	0x20002830
   23548:	20002820 	.word	0x20002820
   2354c:	00032380 	.word	0x00032380
   23550:	20002800 	.word	0x20002800
   23554:	2000281c 	.word	0x2000281c

00023558 <ble_gatts_conn_can_alloc>:
    return ble_gatts_num_cfgable_chrs == 0 ||
   23558:	4b05      	ldr	r3, [pc, #20]	; (23570 <ble_gatts_conn_can_alloc+0x18>)
   2355a:	681b      	ldr	r3, [r3, #0]
   2355c:	b133      	cbz	r3, 2356c <ble_gatts_conn_can_alloc+0x14>
           ble_gatts_clt_cfg_pool.mp_num_free > 0;
   2355e:	4b05      	ldr	r3, [pc, #20]	; (23574 <ble_gatts_conn_can_alloc+0x1c>)
   23560:	88db      	ldrh	r3, [r3, #6]
    return ble_gatts_num_cfgable_chrs == 0 ||
   23562:	b90b      	cbnz	r3, 23568 <ble_gatts_conn_can_alloc+0x10>
   23564:	2000      	movs	r0, #0
}
   23566:	4770      	bx	lr
    return ble_gatts_num_cfgable_chrs == 0 ||
   23568:	2001      	movs	r0, #1
   2356a:	4770      	bx	lr
   2356c:	2001      	movs	r0, #1
   2356e:	4770      	bx	lr
   23570:	20002820 	.word	0x20002820
   23574:	20002800 	.word	0x20002800

00023578 <ble_gatts_conn_init>:
    if (ble_gatts_num_cfgable_chrs > 0) {
   23578:	4b10      	ldr	r3, [pc, #64]	; (235bc <ble_gatts_conn_init+0x44>)
   2357a:	681b      	ldr	r3, [r3, #0]
   2357c:	2b00      	cmp	r3, #0
   2357e:	dc04      	bgt.n	2358a <ble_gatts_conn_init+0x12>
        gatts_conn->clt_cfgs = NULL;
   23580:	2300      	movs	r3, #0
   23582:	6003      	str	r3, [r0, #0]
        gatts_conn->num_clt_cfgs = 0;
   23584:	6043      	str	r3, [r0, #4]
    return 0;
   23586:	4618      	mov	r0, r3
}
   23588:	4770      	bx	lr
{
   2358a:	b570      	push	{r4, r5, r6, lr}
   2358c:	4604      	mov	r4, r0
        gatts_conn->clt_cfgs = os_memblock_get(&ble_gatts_clt_cfg_pool);
   2358e:	480c      	ldr	r0, [pc, #48]	; (235c0 <ble_gatts_conn_init+0x48>)
   23590:	f7ea fb3c 	bl	dc0c <os_memblock_get>
   23594:	4605      	mov	r5, r0
   23596:	6020      	str	r0, [r4, #0]
        if (gatts_conn->clt_cfgs == NULL) {
   23598:	b168      	cbz	r0, 235b6 <ble_gatts_conn_init+0x3e>
        memcpy(gatts_conn->clt_cfgs, ble_gatts_clt_cfgs,
   2359a:	4b0a      	ldr	r3, [pc, #40]	; (235c4 <ble_gatts_conn_init+0x4c>)
   2359c:	681e      	ldr	r6, [r3, #0]
               ble_gatts_clt_cfg_size());
   2359e:	f7ff fa75 	bl	22a8c <ble_gatts_clt_cfg_size>
        memcpy(gatts_conn->clt_cfgs, ble_gatts_clt_cfgs,
   235a2:	4602      	mov	r2, r0
   235a4:	4631      	mov	r1, r6
   235a6:	4628      	mov	r0, r5
   235a8:	f7eb f9fa 	bl	e9a0 <memcpy>
        gatts_conn->num_clt_cfgs = ble_gatts_num_cfgable_chrs;
   235ac:	4b03      	ldr	r3, [pc, #12]	; (235bc <ble_gatts_conn_init+0x44>)
   235ae:	681b      	ldr	r3, [r3, #0]
   235b0:	6063      	str	r3, [r4, #4]
    return 0;
   235b2:	2000      	movs	r0, #0
}
   235b4:	bd70      	pop	{r4, r5, r6, pc}
            return BLE_HS_ENOMEM;
   235b6:	2006      	movs	r0, #6
   235b8:	e7fc      	b.n	235b4 <ble_gatts_conn_init+0x3c>
   235ba:	bf00      	nop
   235bc:	20002820 	.word	0x20002820
   235c0:	20002800 	.word	0x20002800
   235c4:	2000281c 	.word	0x2000281c

000235c8 <ble_gatts_send_next_indicate>:
{
   235c8:	b570      	push	{r4, r5, r6, lr}
   235ca:	4605      	mov	r5, r0
    ble_hs_lock();
   235cc:	f000 fa58 	bl	23a80 <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
   235d0:	4628      	mov	r0, r5
   235d2:	f001 f8a5 	bl	24720 <ble_hs_conn_find>
    if (conn != NULL) {
   235d6:	4604      	mov	r4, r0
   235d8:	b160      	cbz	r0, 235f4 <ble_gatts_send_next_indicate+0x2c>
        for (i = 0; i < conn->bhc_gatt_svr.num_clt_cfgs; i++) {
   235da:	2200      	movs	r2, #0
   235dc:	6d23      	ldr	r3, [r4, #80]	; 0x50
   235de:	4293      	cmp	r3, r2
   235e0:	dd0f      	ble.n	23602 <ble_gatts_send_next_indicate+0x3a>
            clt_cfg = conn->bhc_gatt_svr.clt_cfgs + i;
   235e2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   235e4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
            if (clt_cfg->flags & BLE_GATTS_CLT_CFG_F_MODIFIED) {
   235e8:	7899      	ldrb	r1, [r3, #2]
   235ea:	f011 0f80 	tst.w	r1, #128	; 0x80
   235ee:	d103      	bne.n	235f8 <ble_gatts_send_next_indicate+0x30>
        for (i = 0; i < conn->bhc_gatt_svr.num_clt_cfgs; i++) {
   235f0:	3201      	adds	r2, #1
   235f2:	e7f3      	b.n	235dc <ble_gatts_send_next_indicate+0x14>
    chr_val_handle = 0;
   235f4:	2600      	movs	r6, #0
   235f6:	e005      	b.n	23604 <ble_gatts_send_next_indicate+0x3c>
                chr_val_handle = clt_cfg->chr_val_handle;
   235f8:	881e      	ldrh	r6, [r3, #0]
                clt_cfg->flags &= ~BLE_GATTS_CLT_CFG_F_MODIFIED;
   235fa:	f001 017f 	and.w	r1, r1, #127	; 0x7f
   235fe:	7099      	strb	r1, [r3, #2]
                break;
   23600:	e000      	b.n	23604 <ble_gatts_send_next_indicate+0x3c>
    chr_val_handle = 0;
   23602:	2600      	movs	r6, #0
    ble_hs_unlock();
   23604:	f000 fa40 	bl	23a88 <ble_hs_unlock>
    if (conn == NULL) {
   23608:	b12c      	cbz	r4, 23616 <ble_gatts_send_next_indicate+0x4e>
    if (chr_val_handle == 0) {
   2360a:	b136      	cbz	r6, 2361a <ble_gatts_send_next_indicate+0x52>
    rc = ble_gattc_indicate(conn_handle, chr_val_handle);
   2360c:	4631      	mov	r1, r6
   2360e:	4628      	mov	r0, r5
   23610:	f7ff f8b6 	bl	22780 <ble_gattc_indicate>
}
   23614:	bd70      	pop	{r4, r5, r6, pc}
        return BLE_HS_ENOTCONN;
   23616:	2007      	movs	r0, #7
   23618:	e7fc      	b.n	23614 <ble_gatts_send_next_indicate+0x4c>
        return BLE_HS_ENOENT;
   2361a:	2005      	movs	r0, #5
   2361c:	e7fa      	b.n	23614 <ble_gatts_send_next_indicate+0x4c>
	...

00023620 <ble_gatts_rx_indicate_ack>:
{
   23620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23624:	b084      	sub	sp, #16
   23626:	4680      	mov	r8, r0
   23628:	460e      	mov	r6, r1
    clt_cfg_idx = ble_gatts_clt_cfg_find_idx(ble_gatts_clt_cfgs,
   2362a:	4b2d      	ldr	r3, [pc, #180]	; (236e0 <ble_gatts_rx_indicate_ack+0xc0>)
   2362c:	681c      	ldr	r4, [r3, #0]
   2362e:	4620      	mov	r0, r4
   23630:	f7ff f9ee 	bl	22a10 <ble_gatts_clt_cfg_find_idx>
    if (clt_cfg_idx == -1) {
   23634:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   23638:	d04b      	beq.n	236d2 <ble_gatts_rx_indicate_ack+0xb2>
    clt_cfg = ble_gatts_clt_cfgs + clt_cfg_idx;
   2363a:	0085      	lsls	r5, r0, #2
   2363c:	442c      	add	r4, r5
    if (!(clt_cfg->allowed & BLE_GATTS_CLT_CFG_F_INDICATE)) {
   2363e:	78e3      	ldrb	r3, [r4, #3]
   23640:	f013 0f02 	tst.w	r3, #2
   23644:	d047      	beq.n	236d6 <ble_gatts_rx_indicate_ack+0xb6>
    ble_hs_lock();
   23646:	f000 fa1b 	bl	23a80 <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
   2364a:	4640      	mov	r0, r8
   2364c:	f001 f868 	bl	24720 <ble_hs_conn_find>
   23650:	4603      	mov	r3, r0
    if (conn->bhc_gatt_svr.indicate_val_handle == chr_val_handle) {
   23652:	f8b0 2054 	ldrh.w	r2, [r0, #84]	; 0x54
   23656:	42b2      	cmp	r2, r6
   23658:	d006      	beq.n	23668 <ble_gatts_rx_indicate_ack+0x48>
        rc = BLE_HS_ENOENT;
   2365a:	2405      	movs	r4, #5
    ble_hs_unlock();
   2365c:	f000 fa14 	bl	23a88 <ble_hs_unlock>
    if (rc != 0) {
   23660:	bbd4      	cbnz	r4, 236d8 <ble_gatts_rx_indicate_ack+0xb8>
    if (persist) {
   23662:	bb97      	cbnz	r7, 236ca <ble_gatts_rx_indicate_ack+0xaa>
    return 0;
   23664:	463c      	mov	r4, r7
   23666:	e037      	b.n	236d8 <ble_gatts_rx_indicate_ack+0xb8>
        conn->bhc_gatt_svr.indicate_val_handle = 0;
   23668:	2200      	movs	r2, #0
   2366a:	f8a0 2054 	strh.w	r2, [r0, #84]	; 0x54
        clt_cfg = conn->bhc_gatt_svr.clt_cfgs + clt_cfg_idx;
   2366e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   23670:	4405      	add	r5, r0
        persist = conn->bhc_sec_state.bonded &&
   23672:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
   23676:	f012 0f04 	tst.w	r2, #4
   2367a:	d023      	beq.n	236c4 <ble_gatts_rx_indicate_ack+0xa4>
                  !(clt_cfg->flags & BLE_GATTS_CLT_CFG_F_MODIFIED);
   2367c:	f995 2002 	ldrsb.w	r2, [r5, #2]
        persist = conn->bhc_sec_state.bonded &&
   23680:	2a00      	cmp	r2, #0
   23682:	da02      	bge.n	2368a <ble_gatts_rx_indicate_ack+0x6a>
        rc = 0;
   23684:	2400      	movs	r4, #0
   23686:	4627      	mov	r7, r4
   23688:	e7e8      	b.n	2365c <ble_gatts_rx_indicate_ack+0x3c>
            cccd_value.peer_addr = conn->bhc_peer_addr;
   2368a:	461a      	mov	r2, r3
   2368c:	f852 0f07 	ldr.w	r0, [r2, #7]!
   23690:	9000      	str	r0, [sp, #0]
   23692:	8891      	ldrh	r1, [r2, #4]
   23694:	7992      	ldrb	r2, [r2, #6]
   23696:	f8ad 1004 	strh.w	r1, [sp, #4]
   2369a:	f88d 2006 	strb.w	r2, [sp, #6]
                ble_hs_misc_peer_addr_type_to_id(conn->bhc_peer_addr.type);
   2369e:	79d8      	ldrb	r0, [r3, #7]
   236a0:	f002 f834 	bl	2570c <ble_hs_misc_peer_addr_type_to_id>
            cccd_value.peer_addr.type =
   236a4:	f88d 0000 	strb.w	r0, [sp]
            cccd_value.chr_val_handle = chr_val_handle;
   236a8:	f8ad 6008 	strh.w	r6, [sp, #8]
            cccd_value.flags = clt_cfg->flags;
   236ac:	78ab      	ldrb	r3, [r5, #2]
   236ae:	f8ad 300a 	strh.w	r3, [sp, #10]
            cccd_value.value_changed = 0;
   236b2:	f89d 300c 	ldrb.w	r3, [sp, #12]
   236b6:	f36f 0300 	bfc	r3, #0, #1
   236ba:	f88d 300c 	strb.w	r3, [sp, #12]
        rc = 0;
   236be:	2400      	movs	r4, #0
        persist = conn->bhc_sec_state.bonded &&
   236c0:	2701      	movs	r7, #1
   236c2:	e7cb      	b.n	2365c <ble_gatts_rx_indicate_ack+0x3c>
        rc = 0;
   236c4:	2400      	movs	r4, #0
   236c6:	4627      	mov	r7, r4
   236c8:	e7c8      	b.n	2365c <ble_gatts_rx_indicate_ack+0x3c>
        rc = ble_store_write_cccd(&cccd_value);
   236ca:	4668      	mov	r0, sp
   236cc:	f005 f9b8 	bl	28a40 <ble_store_write_cccd>
   236d0:	e002      	b.n	236d8 <ble_gatts_rx_indicate_ack+0xb8>
        return BLE_HS_ENOENT;
   236d2:	2405      	movs	r4, #5
   236d4:	e000      	b.n	236d8 <ble_gatts_rx_indicate_ack+0xb8>
        return BLE_HS_ENOENT;
   236d6:	2405      	movs	r4, #5
}
   236d8:	4620      	mov	r0, r4
   236da:	b004      	add	sp, #16
   236dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   236e0:	2000281c 	.word	0x2000281c

000236e4 <ble_gatts_tx_notifications>:
{
   236e4:	b510      	push	{r4, lr}
    for (i = 0; i < ble_gatts_num_cfgable_chrs; i++) {
   236e6:	2400      	movs	r4, #0
   236e8:	e006      	b.n	236f8 <ble_gatts_tx_notifications+0x14>
        chr_val_handle = ble_gatts_clt_cfgs[i].chr_val_handle;
   236ea:	4b06      	ldr	r3, [pc, #24]	; (23704 <ble_gatts_tx_notifications+0x20>)
   236ec:	681b      	ldr	r3, [r3, #0]
        ble_gatts_tx_notifications_one_chr(chr_val_handle);
   236ee:	f833 0024 	ldrh.w	r0, [r3, r4, lsl #2]
   236f2:	f7ff fdef 	bl	232d4 <ble_gatts_tx_notifications_one_chr>
    for (i = 0; i < ble_gatts_num_cfgable_chrs; i++) {
   236f6:	3401      	adds	r4, #1
   236f8:	4b03      	ldr	r3, [pc, #12]	; (23708 <ble_gatts_tx_notifications+0x24>)
   236fa:	681b      	ldr	r3, [r3, #0]
   236fc:	42a3      	cmp	r3, r4
   236fe:	dcf4      	bgt.n	236ea <ble_gatts_tx_notifications+0x6>
}
   23700:	bd10      	pop	{r4, pc}
   23702:	bf00      	nop
   23704:	2000281c 	.word	0x2000281c
   23708:	20002820 	.word	0x20002820

0002370c <ble_gatts_bonding_established>:
{
   2370c:	b570      	push	{r4, r5, r6, lr}
   2370e:	b084      	sub	sp, #16
   23710:	4606      	mov	r6, r0
    ble_hs_lock();
   23712:	f000 f9b5 	bl	23a80 <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
   23716:	4630      	mov	r0, r6
   23718:	f001 f802 	bl	24720 <ble_hs_conn_find>
   2371c:	4605      	mov	r5, r0
    cccd_value.peer_addr = conn->bhc_peer_addr;
   2371e:	4603      	mov	r3, r0
   23720:	f853 0f07 	ldr.w	r0, [r3, #7]!
   23724:	9000      	str	r0, [sp, #0]
   23726:	889a      	ldrh	r2, [r3, #4]
   23728:	799b      	ldrb	r3, [r3, #6]
   2372a:	f8ad 2004 	strh.w	r2, [sp, #4]
   2372e:	f88d 3006 	strb.w	r3, [sp, #6]
        ble_hs_misc_peer_addr_type_to_id(conn->bhc_peer_addr.type);
   23732:	79e8      	ldrb	r0, [r5, #7]
   23734:	f001 ffea 	bl	2570c <ble_hs_misc_peer_addr_type_to_id>
    cccd_value.peer_addr.type =
   23738:	f88d 0000 	strb.w	r0, [sp]
    for (i = 0; i < gatt_srv->num_clt_cfgs; ++i) {
   2373c:	2400      	movs	r4, #0
   2373e:	e000      	b.n	23742 <ble_gatts_bonding_established+0x36>
   23740:	3401      	adds	r4, #1
   23742:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   23744:	42a3      	cmp	r3, r4
   23746:	dd1d      	ble.n	23784 <ble_gatts_bonding_established+0x78>
        clt_cfg = &gatt_srv->clt_cfgs[i];
   23748:	6cea      	ldr	r2, [r5, #76]	; 0x4c
   2374a:	eb02 0384 	add.w	r3, r2, r4, lsl #2
        if (clt_cfg->flags != 0) {
   2374e:	7899      	ldrb	r1, [r3, #2]
   23750:	2900      	cmp	r1, #0
   23752:	d0f5      	beq.n	23740 <ble_gatts_bonding_established+0x34>
            cccd_value.chr_val_handle = clt_cfg->chr_val_handle;
   23754:	f832 2024 	ldrh.w	r2, [r2, r4, lsl #2]
   23758:	f8ad 2008 	strh.w	r2, [sp, #8]
            cccd_value.flags = clt_cfg->flags;
   2375c:	789b      	ldrb	r3, [r3, #2]
   2375e:	f8ad 300a 	strh.w	r3, [sp, #10]
            cccd_value.value_changed = 0;
   23762:	f89d 300c 	ldrb.w	r3, [sp, #12]
   23766:	f36f 0300 	bfc	r3, #0, #1
   2376a:	f88d 300c 	strb.w	r3, [sp, #12]
            ble_hs_unlock();
   2376e:	f000 f98b 	bl	23a88 <ble_hs_unlock>
            ble_store_write_cccd(&cccd_value);
   23772:	4668      	mov	r0, sp
   23774:	f005 f964 	bl	28a40 <ble_store_write_cccd>
            ble_hs_lock();
   23778:	f000 f982 	bl	23a80 <ble_hs_lock>
            conn = ble_hs_conn_find(conn_handle);
   2377c:	4630      	mov	r0, r6
   2377e:	f000 ffcf 	bl	24720 <ble_hs_conn_find>
   23782:	e7dd      	b.n	23740 <ble_gatts_bonding_established+0x34>
    ble_hs_unlock();
   23784:	f000 f980 	bl	23a88 <ble_hs_unlock>
}
   23788:	b004      	add	sp, #16
   2378a:	bd70      	pop	{r4, r5, r6, pc}

0002378c <ble_gatts_bonding_restored>:
{
   2378c:	b530      	push	{r4, r5, lr}
   2378e:	b08b      	sub	sp, #44	; 0x2c
   23790:	4604      	mov	r4, r0
    ble_hs_lock();
   23792:	f000 f975 	bl	23a80 <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
   23796:	4620      	mov	r0, r4
   23798:	f000 ffc2 	bl	24720 <ble_hs_conn_find>
   2379c:	4602      	mov	r2, r0
    cccd_key.peer_addr = conn->bhc_peer_addr;
   2379e:	4603      	mov	r3, r0
   237a0:	f853 0f07 	ldr.w	r0, [r3, #7]!
   237a4:	9003      	str	r0, [sp, #12]
   237a6:	8899      	ldrh	r1, [r3, #4]
   237a8:	799b      	ldrb	r3, [r3, #6]
   237aa:	f8ad 1010 	strh.w	r1, [sp, #16]
   237ae:	f88d 3012 	strb.w	r3, [sp, #18]
        ble_hs_misc_peer_addr_type_to_id(conn->bhc_peer_addr.type);
   237b2:	79d0      	ldrb	r0, [r2, #7]
   237b4:	f001 ffaa 	bl	2570c <ble_hs_misc_peer_addr_type_to_id>
    cccd_key.peer_addr.type =
   237b8:	f88d 000c 	strb.w	r0, [sp, #12]
    cccd_key.chr_val_handle = 0;
   237bc:	2300      	movs	r3, #0
   237be:	f8ad 3014 	strh.w	r3, [sp, #20]
    cccd_key.idx = 0;
   237c2:	f88d 3016 	strb.w	r3, [sp, #22]
    ble_hs_unlock();
   237c6:	f000 f95f 	bl	23a88 <ble_hs_unlock>
   237ca:	e014      	b.n	237f6 <ble_gatts_bonding_restored+0x6a>
                clt_cfg->flags |= BLE_GATTS_CLT_CFG_F_MODIFIED;
   237cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
   237d0:	7083      	strb	r3, [r0, #2]
                att_op = ble_gatts_schedule_update(conn, clt_cfg);
   237d2:	4628      	mov	r0, r5
   237d4:	f7ff f960 	bl	22a98 <ble_gatts_schedule_update>
   237d8:	4605      	mov	r5, r0
   237da:	e028      	b.n	2382e <ble_gatts_bonding_restored+0xa2>
        att_op = 0;
   237dc:	2500      	movs	r5, #0
   237de:	e026      	b.n	2382e <ble_gatts_bonding_restored+0xa2>
            rc = ble_gattc_notify(conn_handle, cccd_value.chr_val_handle);
   237e0:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   237e4:	4620      	mov	r0, r4
   237e6:	f7fe ff63 	bl	226b0 <ble_gattc_notify>
            if (rc == 0) {
   237ea:	b3b0      	cbz	r0, 2385a <ble_gatts_bonding_restored+0xce>
        cccd_key.idx++;
   237ec:	f89d 3016 	ldrb.w	r3, [sp, #22]
   237f0:	3301      	adds	r3, #1
   237f2:	f88d 3016 	strb.w	r3, [sp, #22]
        rc = ble_store_read_cccd(&cccd_key, &cccd_value);
   237f6:	a906      	add	r1, sp, #24
   237f8:	a803      	add	r0, sp, #12
   237fa:	f005 f91a 	bl	28a32 <ble_store_read_cccd>
        if (rc != 0) {
   237fe:	bbb0      	cbnz	r0, 2386e <ble_gatts_bonding_restored+0xe2>
        ble_hs_lock();
   23800:	f000 f93e 	bl	23a80 <ble_hs_lock>
        conn = ble_hs_conn_find(conn_handle);
   23804:	4620      	mov	r0, r4
   23806:	f000 ff8b 	bl	24720 <ble_hs_conn_find>
   2380a:	4605      	mov	r5, r0
        clt_cfg = ble_gatts_clt_cfg_find(conn->bhc_gatt_svr.clt_cfgs,
   2380c:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   23810:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   23812:	f7ff f90f 	bl	22a34 <ble_gatts_clt_cfg_find>
        if (clt_cfg != NULL) {
   23816:	4601      	mov	r1, r0
   23818:	2800      	cmp	r0, #0
   2381a:	d0df      	beq.n	237dc <ble_gatts_bonding_restored+0x50>
            clt_cfg->flags = cccd_value.flags;
   2381c:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   23820:	7083      	strb	r3, [r0, #2]
            if (cccd_value.value_changed) {
   23822:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
   23826:	f012 0f01 	tst.w	r2, #1
   2382a:	d1cf      	bne.n	237cc <ble_gatts_bonding_restored+0x40>
        att_op = 0;
   2382c:	2500      	movs	r5, #0
        ble_hs_unlock();
   2382e:	f000 f92b 	bl	23a88 <ble_hs_unlock>
        ble_gatts_subscribe_event(conn_handle, cccd_value.chr_val_handle,
   23832:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   23836:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   2383a:	9300      	str	r3, [sp, #0]
   2383c:	2300      	movs	r3, #0
   2383e:	2203      	movs	r2, #3
   23840:	4620      	mov	r0, r4
   23842:	f7ff fa31 	bl	22ca8 <ble_gatts_subscribe_event>
        switch (att_op) {
   23846:	2d1b      	cmp	r5, #27
   23848:	d0ca      	beq.n	237e0 <ble_gatts_bonding_restored+0x54>
   2384a:	2d1d      	cmp	r5, #29
   2384c:	d1ce      	bne.n	237ec <ble_gatts_bonding_restored+0x60>
            ble_gattc_indicate(conn_handle, cccd_value.chr_val_handle);
   2384e:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   23852:	4620      	mov	r0, r4
   23854:	f7fe ff94 	bl	22780 <ble_gattc_indicate>
            break;
   23858:	e7c8      	b.n	237ec <ble_gatts_bonding_restored+0x60>
                cccd_value.value_changed = 0;
   2385a:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   2385e:	f36f 0300 	bfc	r3, #0, #1
   23862:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
                ble_store_write_cccd(&cccd_value);
   23866:	a806      	add	r0, sp, #24
   23868:	f005 f8ea 	bl	28a40 <ble_store_write_cccd>
   2386c:	e7be      	b.n	237ec <ble_gatts_bonding_restored+0x60>
}
   2386e:	b00b      	add	sp, #44	; 0x2c
   23870:	bd30      	pop	{r4, r5, pc}
	...

00023874 <ble_gatts_add_svcs>:
{
   23874:	b570      	push	{r4, r5, r6, lr}
   23876:	4606      	mov	r6, r0
    ble_hs_lock();
   23878:	f000 f902 	bl	23a80 <ble_hs_lock>
    if (!ble_gatts_mutable()) {
   2387c:	f7ff fcf3 	bl	23266 <ble_gatts_mutable>
   23880:	b180      	cbz	r0, 238a4 <ble_gatts_add_svcs+0x30>
                (ble_gatts_num_svc_defs + 1) * sizeof *ble_gatts_svc_defs);
   23882:	4b0c      	ldr	r3, [pc, #48]	; (238b4 <ble_gatts_add_svcs+0x40>)
   23884:	681d      	ldr	r5, [r3, #0]
   23886:	1c6c      	adds	r4, r5, #1
    p = realloc(ble_gatts_svc_defs,
   23888:	00a1      	lsls	r1, r4, #2
   2388a:	4b0b      	ldr	r3, [pc, #44]	; (238b8 <ble_gatts_add_svcs+0x44>)
   2388c:	6818      	ldr	r0, [r3, #0]
   2388e:	f00b fcb5 	bl	2f1fc <realloc>
    if (p == NULL) {
   23892:	b160      	cbz	r0, 238ae <ble_gatts_add_svcs+0x3a>
    ble_gatts_svc_defs = p;
   23894:	4a08      	ldr	r2, [pc, #32]	; (238b8 <ble_gatts_add_svcs+0x44>)
   23896:	6010      	str	r0, [r2, #0]
    ble_gatts_svc_defs[ble_gatts_num_svc_defs] = svcs;
   23898:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
    ble_gatts_num_svc_defs++;
   2389c:	4b05      	ldr	r3, [pc, #20]	; (238b4 <ble_gatts_add_svcs+0x40>)
   2389e:	601c      	str	r4, [r3, #0]
    rc = 0;
   238a0:	2400      	movs	r4, #0
   238a2:	e000      	b.n	238a6 <ble_gatts_add_svcs+0x32>
        rc = BLE_HS_EBUSY;
   238a4:	240f      	movs	r4, #15
    ble_hs_unlock();
   238a6:	f000 f8ef 	bl	23a88 <ble_hs_unlock>
}
   238aa:	4620      	mov	r0, r4
   238ac:	bd70      	pop	{r4, r5, r6, pc}
        rc = BLE_HS_ENOMEM;
   238ae:	2406      	movs	r4, #6
   238b0:	e7f9      	b.n	238a6 <ble_gatts_add_svcs+0x32>
   238b2:	bf00      	nop
   238b4:	20002824 	.word	0x20002824
   238b8:	2000282c 	.word	0x2000282c

000238bc <ble_gatts_count_cfg>:
int
ble_gatts_count_cfg(const struct ble_gatt_svc_def *defs)
{
   238bc:	b500      	push	{lr}
   238be:	b085      	sub	sp, #20
    struct ble_gatt_resources res = { 0 };
   238c0:	2300      	movs	r3, #0
   238c2:	9301      	str	r3, [sp, #4]
   238c4:	9302      	str	r3, [sp, #8]
   238c6:	9303      	str	r3, [sp, #12]
    int rc;

    rc = ble_gatts_count_resources(defs, &res);
   238c8:	a901      	add	r1, sp, #4
   238ca:	f7ff f8ff 	bl	22acc <ble_gatts_count_resources>
    if (rc != 0) {
   238ce:	4602      	mov	r2, r0
   238d0:	b990      	cbnz	r0, 238f8 <ble_gatts_count_cfg+0x3c>
        return rc;
    }

    ble_hs_max_services += res.svcs;
   238d2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   238d6:	490a      	ldr	r1, [pc, #40]	; (23900 <ble_gatts_count_cfg+0x44>)
   238d8:	8808      	ldrh	r0, [r1, #0]
   238da:	4403      	add	r3, r0
   238dc:	800b      	strh	r3, [r1, #0]
    ble_hs_max_attrs += res.attrs;
   238de:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   238e2:	4908      	ldr	r1, [pc, #32]	; (23904 <ble_gatts_count_cfg+0x48>)
   238e4:	8808      	ldrh	r0, [r1, #0]
   238e6:	4403      	add	r3, r0
   238e8:	800b      	strh	r3, [r1, #0]

    /* Reserve an extra CCCD for the cache. */
    ble_hs_max_client_configs +=
        res.cccds * (MYNEWT_VAL(BLE_MAX_CONNECTIONS) + 1);
   238ea:	f8bd 000c 	ldrh.w	r0, [sp, #12]
    ble_hs_max_client_configs +=
   238ee:	4906      	ldr	r1, [pc, #24]	; (23908 <ble_gatts_count_cfg+0x4c>)
   238f0:	880b      	ldrh	r3, [r1, #0]
   238f2:	eb03 0340 	add.w	r3, r3, r0, lsl #1
   238f6:	800b      	strh	r3, [r1, #0]

    return 0;
}
   238f8:	4610      	mov	r0, r2
   238fa:	b005      	add	sp, #20
   238fc:	f85d fb04 	ldr.w	pc, [sp], #4
   23900:	2000410e 	.word	0x2000410e
   23904:	20004110 	.word	0x20004110
   23908:	20004114 	.word	0x20004114

0002390c <ble_gatts_init>:
    return rc;
}

int
ble_gatts_init(void)
{
   2390c:	b500      	push	{lr}
   2390e:	b083      	sub	sp, #12
    int rc;

    ble_gatts_num_cfgable_chrs = 0;
   23910:	2300      	movs	r3, #0
   23912:	4a0a      	ldr	r2, [pc, #40]	; (2393c <ble_gatts_init+0x30>)
   23914:	6013      	str	r3, [r2, #0]
    ble_gatts_clt_cfgs = NULL;
   23916:	4a0a      	ldr	r2, [pc, #40]	; (23940 <ble_gatts_init+0x34>)
   23918:	6013      	str	r3, [r2, #0]

    rc = stats_init_and_reg(
   2391a:	4a0a      	ldr	r2, [pc, #40]	; (23944 <ble_gatts_init+0x38>)
   2391c:	9201      	str	r2, [sp, #4]
   2391e:	9300      	str	r3, [sp, #0]
   23920:	220a      	movs	r2, #10
   23922:	2104      	movs	r1, #4
   23924:	4808      	ldr	r0, [pc, #32]	; (23948 <ble_gatts_init+0x3c>)
   23926:	f7ee fc59 	bl	121dc <stats_init_and_reg>
        STATS_HDR(ble_gatts_stats), STATS_SIZE_INIT_PARMS(ble_gatts_stats,
        STATS_SIZE_32), STATS_NAME_INIT_PARMS(ble_gatts_stats), "ble_gatts");
    if (rc != 0) {
   2392a:	4603      	mov	r3, r0
   2392c:	b918      	cbnz	r0, 23936 <ble_gatts_init+0x2a>
        return BLE_HS_EOS;
    }

    return 0;

}
   2392e:	4618      	mov	r0, r3
   23930:	b003      	add	sp, #12
   23932:	f85d fb04 	ldr.w	pc, [sp], #4
        return BLE_HS_EOS;
   23936:	230b      	movs	r3, #11
   23938:	e7f9      	b.n	2392e <ble_gatts_init+0x22>
   2393a:	bf00      	nop
   2393c:	20002820 	.word	0x20002820
   23940:	2000281c 	.word	0x2000281c
   23944:	00032374 	.word	0x00032374
   23948:	20004084 	.word	0x20004084

0002394c <ble_hs_wakeup_tx_conn>:
    }
}

static int
ble_hs_wakeup_tx_conn(struct ble_hs_conn *conn)
{
   2394c:	b510      	push	{r4, lr}
   2394e:	b082      	sub	sp, #8
   23950:	4604      	mov	r4, r0
    struct os_mbuf_pkthdr *omp;
    struct os_mbuf *om;
    int rc;

    while ((omp = STAILQ_FIRST(&conn->bhc_tx_q)) != NULL) {
   23952:	e008      	b.n	23966 <ble_hs_wakeup_tx_conn+0x1a>
        STAILQ_REMOVE_HEAD(&conn->bhc_tx_q, omp_next);

        om = OS_MBUF_PKTHDR_TO_MBUF(omp);
   23954:	3b10      	subs	r3, #16
   23956:	a902      	add	r1, sp, #8
   23958:	f841 3d04 	str.w	r3, [r1, #-4]!
        rc = ble_hs_hci_acl_tx_now(conn, &om);
   2395c:	4620      	mov	r0, r4
   2395e:	f001 f97f 	bl	24c60 <ble_hs_hci_acl_tx_now>
        if (rc == BLE_HS_EAGAIN) {
   23962:	2801      	cmp	r0, #1
   23964:	d009      	beq.n	2397a <ble_hs_wakeup_tx_conn+0x2e>
    while ((omp = STAILQ_FIRST(&conn->bhc_tx_q)) != NULL) {
   23966:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   23968:	b193      	cbz	r3, 23990 <ble_hs_wakeup_tx_conn+0x44>
        STAILQ_REMOVE_HEAD(&conn->bhc_tx_q, omp_next);
   2396a:	685a      	ldr	r2, [r3, #4]
   2396c:	63e2      	str	r2, [r4, #60]	; 0x3c
   2396e:	2a00      	cmp	r2, #0
   23970:	d1f0      	bne.n	23954 <ble_hs_wakeup_tx_conn+0x8>
   23972:	f104 023c 	add.w	r2, r4, #60	; 0x3c
   23976:	6422      	str	r2, [r4, #64]	; 0x40
   23978:	e7ec      	b.n	23954 <ble_hs_wakeup_tx_conn+0x8>
            /* Controller is at capacity.  This packet will be the first to
             * get transmitted next time around.
             */
            STAILQ_INSERT_HEAD(&conn->bhc_tx_q, OS_MBUF_PKTHDR(om), omp_next);
   2397a:	9b01      	ldr	r3, [sp, #4]
   2397c:	f103 0110 	add.w	r1, r3, #16
   23980:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   23982:	615a      	str	r2, [r3, #20]
   23984:	b10a      	cbz	r2, 2398a <ble_hs_wakeup_tx_conn+0x3e>
   23986:	63e1      	str	r1, [r4, #60]	; 0x3c
            return BLE_HS_EAGAIN;
   23988:	e003      	b.n	23992 <ble_hs_wakeup_tx_conn+0x46>
            STAILQ_INSERT_HEAD(&conn->bhc_tx_q, OS_MBUF_PKTHDR(om), omp_next);
   2398a:	3314      	adds	r3, #20
   2398c:	6423      	str	r3, [r4, #64]	; 0x40
   2398e:	e7fa      	b.n	23986 <ble_hs_wakeup_tx_conn+0x3a>
        }
    }

    return 0;
   23990:	2000      	movs	r0, #0
}
   23992:	b002      	add	sp, #8
   23994:	bd10      	pop	{r4, pc}
	...

00023998 <ble_hs_event_rx_hci_ev>:
#endif
}

static void
ble_hs_event_rx_hci_ev(struct ble_npl_event *ev)
{
   23998:	b510      	push	{r4, lr}
   2399a:	4601      	mov	r1, r0
    return ev->ev.ev_arg;
   2399c:	6884      	ldr	r4, [r0, #8]
    const struct ble_hci_ev *hci_ev;
    int rc;

    hci_ev = ble_npl_event_get_arg(ev);

    rc = os_memblock_put(&ble_hs_hci_ev_pool, ev);
   2399e:	4803      	ldr	r0, [pc, #12]	; (239ac <ble_hs_event_rx_hci_ev+0x14>)
   239a0:	f7ea f95c 	bl	dc5c <os_memblock_put>
#if BLE_MONITOR
    ble_monitor_send(BLE_MONITOR_OPCODE_EVENT_PKT, hci_ev,
                     hci_ev->length + sizeof(*hci_ev));
#endif

    ble_hs_hci_evt_process(hci_ev);
   239a4:	4620      	mov	r0, r4
   239a6:	f001 fc2f 	bl	25208 <ble_hs_hci_evt_process>
}
   239aa:	bd10      	pop	{r4, pc}
   239ac:	200040f0 	.word	0x200040f0

000239b0 <ble_hs_clear_rx_queue>:
{
   239b0:	b508      	push	{r3, lr}
    while ((om = ble_mqueue_get(&ble_hs_rx_q)) != NULL) {
   239b2:	e002      	b.n	239ba <ble_hs_clear_rx_queue+0xa>
        os_mbuf_free_chain(om);
   239b4:	4618      	mov	r0, r3
   239b6:	f7e9 fd33 	bl	d420 <os_mbuf_free_chain>
    while ((om = ble_mqueue_get(&ble_hs_rx_q)) != NULL) {
   239ba:	4803      	ldr	r0, [pc, #12]	; (239c8 <ble_hs_clear_rx_queue+0x18>)
   239bc:	f001 fec2 	bl	25744 <ble_mqueue_get>
   239c0:	4603      	mov	r3, r0
   239c2:	2800      	cmp	r0, #0
   239c4:	d1f6      	bne.n	239b4 <ble_hs_clear_rx_queue+0x4>
}
   239c6:	bd08      	pop	{r3, pc}
   239c8:	2000292c 	.word	0x2000292c

000239cc <ble_hs_rx_data>:
 *
 * @return                      0 on success; nonzero on failure.
 */
static int
ble_hs_rx_data(struct os_mbuf *om, void *arg)
{
   239cc:	b510      	push	{r4, lr}
   239ce:	4604      	mov	r4, r0
    int rc;

    /* If flow control is enabled, mark this packet with its corresponding
     * connection handle.
     */
    ble_hs_flow_fill_acl_usrhdr(om);
   239d0:	f000 ffd3 	bl	2497a <ble_hs_flow_fill_acl_usrhdr>

    rc = ble_mqueue_put(&ble_hs_rx_q, ble_hs_evq, om);
   239d4:	4622      	mov	r2, r4
   239d6:	4b07      	ldr	r3, [pc, #28]	; (239f4 <ble_hs_rx_data+0x28>)
   239d8:	6819      	ldr	r1, [r3, #0]
   239da:	4807      	ldr	r0, [pc, #28]	; (239f8 <ble_hs_rx_data+0x2c>)
   239dc:	f001 fec5 	bl	2576a <ble_mqueue_put>
    if (rc != 0) {
   239e0:	4603      	mov	r3, r0
   239e2:	b908      	cbnz	r0, 239e8 <ble_hs_rx_data+0x1c>
        os_mbuf_free_chain(om);
        return BLE_HS_EOS;
    }

    return 0;
}
   239e4:	4618      	mov	r0, r3
   239e6:	bd10      	pop	{r4, pc}
        os_mbuf_free_chain(om);
   239e8:	4620      	mov	r0, r4
   239ea:	f7e9 fd19 	bl	d420 <os_mbuf_free_chain>
        return BLE_HS_EOS;
   239ee:	230b      	movs	r3, #11
   239f0:	e7f8      	b.n	239e4 <ble_hs_rx_data+0x18>
   239f2:	bf00      	nop
   239f4:	20002874 	.word	0x20002874
   239f8:	2000292c 	.word	0x2000292c

000239fc <ble_hs_event_tx_notify>:
{
   239fc:	b508      	push	{r3, lr}
    ble_gatts_tx_notifications();
   239fe:	f7ff fe71 	bl	236e4 <ble_gatts_tx_notifications>
}
   23a02:	bd08      	pop	{r3, pc}

00023a04 <ble_hs_evq_get>:
}
   23a04:	4b01      	ldr	r3, [pc, #4]	; (23a0c <ble_hs_evq_get+0x8>)
   23a06:	6818      	ldr	r0, [r3, #0]
   23a08:	4770      	bx	lr
   23a0a:	bf00      	nop
   23a0c:	20002874 	.word	0x20002874

00023a10 <ble_hs_sched_start_stage2>:
{
   23a10:	b508      	push	{r3, lr}
    ble_npl_eventq_put((struct ble_npl_eventq *)ble_hs_evq_get(),
   23a12:	f7ff fff7 	bl	23a04 <ble_hs_evq_get>
    os_eventq_put(&evq->evq, &ev->ev);
   23a16:	4902      	ldr	r1, [pc, #8]	; (23a20 <ble_hs_sched_start_stage2+0x10>)
   23a18:	f7e9 fbc9 	bl	d1ae <os_eventq_put>
}
   23a1c:	bd08      	pop	{r3, pc}
   23a1e:	bf00      	nop
   23a20:	20002854 	.word	0x20002854

00023a24 <ble_hs_event_start_stage1>:
{
   23a24:	b508      	push	{r3, lr}
    ble_hs_sched_start_stage2();
   23a26:	f7ff fff3 	bl	23a10 <ble_hs_sched_start_stage2>
}
   23a2a:	bd08      	pop	{r3, pc}

00023a2c <ble_hs_evq_set>:
    ble_hs_evq = evq;
   23a2c:	4b01      	ldr	r3, [pc, #4]	; (23a34 <ble_hs_evq_set+0x8>)
   23a2e:	6018      	str	r0, [r3, #0]
}
   23a30:	4770      	bx	lr
   23a32:	bf00      	nop
   23a34:	20002874 	.word	0x20002874

00023a38 <ble_hs_is_parent_task>:
{
   23a38:	b508      	push	{r3, lr}
    return os_started();
   23a3a:	f7e9 f949 	bl	ccd0 <os_started>
    return !ble_npl_os_started() ||
   23a3e:	b908      	cbnz	r0, 23a44 <ble_hs_is_parent_task+0xc>
   23a40:	2001      	movs	r0, #1
}
   23a42:	bd08      	pop	{r3, pc}
    return os_sched_get_current_task();
   23a44:	f7ea faa0 	bl	df88 <os_sched_get_current_task>
           ble_npl_get_current_task_id() == ble_hs_parent_task;
   23a48:	4b03      	ldr	r3, [pc, #12]	; (23a58 <ble_hs_is_parent_task+0x20>)
   23a4a:	681b      	ldr	r3, [r3, #0]
    return !ble_npl_os_started() ||
   23a4c:	4283      	cmp	r3, r0
   23a4e:	d001      	beq.n	23a54 <ble_hs_is_parent_task+0x1c>
   23a50:	2000      	movs	r0, #0
   23a52:	e7f6      	b.n	23a42 <ble_hs_is_parent_task+0xa>
   23a54:	2001      	movs	r0, #1
   23a56:	e7f4      	b.n	23a42 <ble_hs_is_parent_task+0xa>
   23a58:	20002924 	.word	0x20002924

00023a5c <ble_hs_lock_nested>:
{
   23a5c:	b508      	push	{r3, lr}
    return (ble_npl_error_t)os_mutex_pend(&mu->mu, timeout);
   23a5e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   23a62:	4802      	ldr	r0, [pc, #8]	; (23a6c <ble_hs_lock_nested+0x10>)
   23a64:	f7ea fe9c 	bl	e7a0 <os_mutex_pend>
}
   23a68:	bd08      	pop	{r3, pc}
   23a6a:	bf00      	nop
   23a6c:	20002918 	.word	0x20002918

00023a70 <ble_hs_unlock_nested>:
{
   23a70:	b508      	push	{r3, lr}
    return (ble_npl_error_t)os_mutex_release(&mu->mu);
   23a72:	4802      	ldr	r0, [pc, #8]	; (23a7c <ble_hs_unlock_nested+0xc>)
   23a74:	f7ea fe34 	bl	e6e0 <os_mutex_release>
}
   23a78:	bd08      	pop	{r3, pc}
   23a7a:	bf00      	nop
   23a7c:	20002918 	.word	0x20002918

00023a80 <ble_hs_lock>:
{
   23a80:	b508      	push	{r3, lr}
    ble_hs_lock_nested();
   23a82:	f7ff ffeb 	bl	23a5c <ble_hs_lock_nested>
}
   23a86:	bd08      	pop	{r3, pc}

00023a88 <ble_hs_unlock>:
{
   23a88:	b508      	push	{r3, lr}
    ble_hs_unlock_nested();
   23a8a:	f7ff fff1 	bl	23a70 <ble_hs_unlock_nested>
}
   23a8e:	bd08      	pop	{r3, pc}

00023a90 <ble_hs_process_rx_data_queue>:
{
   23a90:	b508      	push	{r3, lr}
    while ((om = ble_mqueue_get(&ble_hs_rx_q)) != NULL) {
   23a92:	e002      	b.n	23a9a <ble_hs_process_rx_data_queue+0xa>
        ble_hs_hci_evt_acl_process(om);
   23a94:	4618      	mov	r0, r3
   23a96:	f001 fbd5 	bl	25244 <ble_hs_hci_evt_acl_process>
    while ((om = ble_mqueue_get(&ble_hs_rx_q)) != NULL) {
   23a9a:	4803      	ldr	r0, [pc, #12]	; (23aa8 <ble_hs_process_rx_data_queue+0x18>)
   23a9c:	f001 fe52 	bl	25744 <ble_mqueue_get>
   23aa0:	4603      	mov	r3, r0
   23aa2:	2800      	cmp	r0, #0
   23aa4:	d1f6      	bne.n	23a94 <ble_hs_process_rx_data_queue+0x4>
}
   23aa6:	bd08      	pop	{r3, pc}
   23aa8:	2000292c 	.word	0x2000292c

00023aac <ble_hs_event_rx_data>:
{
   23aac:	b508      	push	{r3, lr}
    ble_hs_process_rx_data_queue();
   23aae:	f7ff ffef 	bl	23a90 <ble_hs_process_rx_data_queue>
}
   23ab2:	bd08      	pop	{r3, pc}

00023ab4 <ble_hs_wakeup_tx>:
{
   23ab4:	b510      	push	{r4, lr}
    ble_hs_lock();
   23ab6:	f7ff ffe3 	bl	23a80 <ble_hs_lock>
    for (conn = ble_hs_conn_first();
   23aba:	f000 fe91 	bl	247e0 <ble_hs_conn_first>
   23abe:	b148      	cbz	r0, 23ad4 <ble_hs_wakeup_tx+0x20>
        if (conn->bhc_flags & BLE_HS_CONN_F_TX_FRAG) {
   23ac0:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   23ac4:	f013 0f04 	tst.w	r3, #4
   23ac8:	d101      	bne.n	23ace <ble_hs_wakeup_tx+0x1a>
         conn = SLIST_NEXT(conn, bhc_next)) {
   23aca:	6800      	ldr	r0, [r0, #0]
   23acc:	e7f7      	b.n	23abe <ble_hs_wakeup_tx+0xa>
            rc = ble_hs_wakeup_tx_conn(conn);
   23ace:	f7ff ff3d 	bl	2394c <ble_hs_wakeup_tx_conn>
            if (rc != 0) {
   23ad2:	b948      	cbnz	r0, 23ae8 <ble_hs_wakeup_tx+0x34>
    for (conn = ble_hs_conn_first();
   23ad4:	f000 fe84 	bl	247e0 <ble_hs_conn_first>
   23ad8:	4604      	mov	r4, r0
   23ada:	b12c      	cbz	r4, 23ae8 <ble_hs_wakeup_tx+0x34>
        rc = ble_hs_wakeup_tx_conn(conn);
   23adc:	4620      	mov	r0, r4
   23ade:	f7ff ff35 	bl	2394c <ble_hs_wakeup_tx_conn>
        if (rc != 0) {
   23ae2:	b908      	cbnz	r0, 23ae8 <ble_hs_wakeup_tx+0x34>
         conn = SLIST_NEXT(conn, bhc_next)) {
   23ae4:	6824      	ldr	r4, [r4, #0]
   23ae6:	e7f8      	b.n	23ada <ble_hs_wakeup_tx+0x26>
    ble_hs_unlock();
   23ae8:	f7ff ffce 	bl	23a88 <ble_hs_unlock>
}
   23aec:	bd10      	pop	{r4, pc}
	...

00023af0 <ble_hs_is_enabled>:
    return ble_hs_enabled_state == BLE_HS_ENABLED_STATE_ON;
   23af0:	4b03      	ldr	r3, [pc, #12]	; (23b00 <ble_hs_is_enabled+0x10>)
   23af2:	7818      	ldrb	r0, [r3, #0]
}
   23af4:	2802      	cmp	r0, #2
   23af6:	bf14      	ite	ne
   23af8:	2000      	movne	r0, #0
   23afa:	2001      	moveq	r0, #1
   23afc:	4770      	bx	lr
   23afe:	bf00      	nop
   23b00:	20004112 	.word	0x20004112

00023b04 <ble_hs_timer_reset>:
{
   23b04:	b510      	push	{r4, lr}
   23b06:	4604      	mov	r4, r0
    if (!ble_hs_is_enabled()) {
   23b08:	f7ff fff2 	bl	23af0 <ble_hs_is_enabled>
   23b0c:	b120      	cbz	r0, 23b18 <ble_hs_timer_reset+0x14>
    return (ble_npl_error_t)os_callout_reset(&co->co, ticks);
   23b0e:	4621      	mov	r1, r4
   23b10:	4803      	ldr	r0, [pc, #12]	; (23b20 <ble_hs_timer_reset+0x1c>)
   23b12:	f7e9 f9f1 	bl	cef8 <os_callout_reset>
}
   23b16:	bd10      	pop	{r4, pc}
    os_callout_stop(&co->co);
   23b18:	4801      	ldr	r0, [pc, #4]	; (23b20 <ble_hs_timer_reset+0x1c>)
   23b1a:	f7e9 f9cf 	bl	cebc <os_callout_stop>
   23b1e:	e7fa      	b.n	23b16 <ble_hs_timer_reset+0x12>
   23b20:	20002944 	.word	0x20002944

00023b24 <ble_hs_timer_sched>:
    if (ticks_from_now == BLE_HS_FOREVER) {
   23b24:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   23b28:	4298      	cmp	r0, r3
   23b2a:	d010      	beq.n	23b4e <ble_hs_timer_sched+0x2a>
{
   23b2c:	b510      	push	{r4, lr}
   23b2e:	4604      	mov	r4, r0
    return os_time_get();
   23b30:	f7ea fc3e 	bl	e3b0 <os_time_get>
    abs_time = ble_npl_time_get() + ticks_from_now;
   23b34:	4420      	add	r0, r4
   23b36:	4b06      	ldr	r3, [pc, #24]	; (23b50 <ble_hs_timer_sched+0x2c>)
   23b38:	69db      	ldr	r3, [r3, #28]
    if (!ble_npl_callout_is_active(&ble_hs_timer) ||
   23b3a:	b123      	cbz	r3, 23b46 <ble_hs_timer_sched+0x22>
    return co->co.c_ticks;
   23b3c:	4b04      	ldr	r3, [pc, #16]	; (23b50 <ble_hs_timer_sched+0x2c>)
   23b3e:	695b      	ldr	r3, [r3, #20]
            ((ble_npl_stime_t)(abs_time -
   23b40:	1ac0      	subs	r0, r0, r3
    if (!ble_npl_callout_is_active(&ble_hs_timer) ||
   23b42:	2800      	cmp	r0, #0
   23b44:	da02      	bge.n	23b4c <ble_hs_timer_sched+0x28>
        ble_hs_timer_reset(ticks_from_now);
   23b46:	4620      	mov	r0, r4
   23b48:	f7ff ffdc 	bl	23b04 <ble_hs_timer_reset>
}
   23b4c:	bd10      	pop	{r4, pc}
   23b4e:	4770      	bx	lr
   23b50:	20002944 	.word	0x20002944

00023b54 <ble_hs_sync>:
{
   23b54:	b510      	push	{r4, lr}
    ble_hs_sync_state = BLE_HS_SYNC_STATE_BRINGUP;
   23b56:	4b14      	ldr	r3, [pc, #80]	; (23ba8 <ble_hs_sync+0x54>)
   23b58:	2201      	movs	r2, #1
   23b5a:	701a      	strb	r2, [r3, #0]
    rc = ble_hs_startup_go();
   23b5c:	f002 f847 	bl	25bee <ble_hs_startup_go>
    if (rc == 0) {
   23b60:	4604      	mov	r4, r0
   23b62:	b940      	cbnz	r0, 23b76 <ble_hs_sync+0x22>
        ble_hs_sync_state = BLE_HS_SYNC_STATE_GOOD;
   23b64:	4b10      	ldr	r3, [pc, #64]	; (23ba8 <ble_hs_sync+0x54>)
   23b66:	2202      	movs	r2, #2
   23b68:	701a      	strb	r2, [r3, #0]
    ble_hs_timer_sched(retry_tmo_ticks);
   23b6a:	200c      	movs	r0, #12
   23b6c:	f7ff ffda 	bl	23b24 <ble_hs_timer_sched>
    if (rc == 0) {
   23b70:	b12c      	cbz	r4, 23b7e <ble_hs_sync+0x2a>
}
   23b72:	4620      	mov	r0, r4
   23b74:	bd10      	pop	{r4, pc}
        ble_hs_sync_state = BLE_HS_SYNC_STATE_BAD;
   23b76:	4b0c      	ldr	r3, [pc, #48]	; (23ba8 <ble_hs_sync+0x54>)
   23b78:	2200      	movs	r2, #0
   23b7a:	701a      	strb	r2, [r3, #0]
   23b7c:	e7f5      	b.n	23b6a <ble_hs_sync+0x16>
        rc = ble_hs_misc_restore_irks();
   23b7e:	f001 fdcd 	bl	2571c <ble_hs_misc_restore_irks>
        if (rc != 0) {
   23b82:	4604      	mov	r4, r0
   23b84:	b940      	cbnz	r0, 23b98 <ble_hs_sync+0x44>
        if (ble_hs_cfg.sync_cb != NULL) {
   23b86:	4b09      	ldr	r3, [pc, #36]	; (23bac <ble_hs_sync+0x58>)
   23b88:	691b      	ldr	r3, [r3, #16]
   23b8a:	b103      	cbz	r3, 23b8e <ble_hs_sync+0x3a>
            ble_hs_cfg.sync_cb();
   23b8c:	4798      	blx	r3
        STATS_INC(ble_hs_stats, sync);
   23b8e:	4a08      	ldr	r2, [pc, #32]	; (23bb0 <ble_hs_sync+0x5c>)
   23b90:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   23b92:	3301      	adds	r3, #1
   23b94:	62d3      	str	r3, [r2, #44]	; 0x2c
    return rc;
   23b96:	e7ec      	b.n	23b72 <ble_hs_sync+0x1e>
            BLE_HS_LOG(INFO, "Failed to restore IRKs from store; status=%d\n",
   23b98:	4603      	mov	r3, r0
   23b9a:	4a06      	ldr	r2, [pc, #24]	; (23bb4 <ble_hs_sync+0x60>)
   23b9c:	2101      	movs	r1, #1
   23b9e:	2004      	movs	r0, #4
   23ba0:	f7ed fd9e 	bl	116e0 <modlog_printf>
   23ba4:	e7ef      	b.n	23b86 <ble_hs_sync+0x32>
   23ba6:	bf00      	nop
   23ba8:	2000410c 	.word	0x2000410c
   23bac:	200002c8 	.word	0x200002c8
   23bb0:	200040b8 	.word	0x200040b8
   23bb4:	000323b4 	.word	0x000323b4

00023bb8 <ble_hs_reset>:
{
   23bb8:	b508      	push	{r3, lr}
    STATS_INC(ble_hs_stats, reset);
   23bba:	4a12      	ldr	r2, [pc, #72]	; (23c04 <ble_hs_reset+0x4c>)
   23bbc:	6a93      	ldr	r3, [r2, #40]	; 0x28
   23bbe:	3301      	adds	r3, #1
   23bc0:	6293      	str	r3, [r2, #40]	; 0x28
    ble_hs_sync_state = 0;
   23bc2:	4b11      	ldr	r3, [pc, #68]	; (23c08 <ble_hs_reset+0x50>)
   23bc4:	2200      	movs	r2, #0
   23bc6:	701a      	strb	r2, [r3, #0]
    (void)ble_hci_trans_reset();
   23bc8:	f006 fbba 	bl	2a340 <ble_hci_trans_reset>
    ble_hs_clear_rx_queue();
   23bcc:	f7ff fef0 	bl	239b0 <ble_hs_clear_rx_queue>
        conn_handle = ble_hs_atomic_first_conn_handle();
   23bd0:	f000 fcca 	bl	24568 <ble_hs_atomic_first_conn_handle>
        if (conn_handle == BLE_HS_CONN_HANDLE_NONE) {
   23bd4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   23bd8:	4298      	cmp	r0, r3
   23bda:	d004      	beq.n	23be6 <ble_hs_reset+0x2e>
        ble_gap_conn_broken(conn_handle, ble_hs_reset_reason);
   23bdc:	4b0b      	ldr	r3, [pc, #44]	; (23c0c <ble_hs_reset+0x54>)
   23bde:	6819      	ldr	r1, [r3, #0]
   23be0:	f7fd fa72 	bl	210c8 <ble_gap_conn_broken>
        conn_handle = ble_hs_atomic_first_conn_handle();
   23be4:	e7f4      	b.n	23bd0 <ble_hs_reset+0x18>
    ble_hs_id_reset();
   23be6:	f001 fcd5 	bl	25594 <ble_hs_id_reset>
    if (ble_hs_cfg.reset_cb != NULL && ble_hs_reset_reason != 0) {
   23bea:	4b09      	ldr	r3, [pc, #36]	; (23c10 <ble_hs_reset+0x58>)
   23bec:	68db      	ldr	r3, [r3, #12]
   23bee:	b11b      	cbz	r3, 23bf8 <ble_hs_reset+0x40>
   23bf0:	4a06      	ldr	r2, [pc, #24]	; (23c0c <ble_hs_reset+0x54>)
   23bf2:	6810      	ldr	r0, [r2, #0]
   23bf4:	b100      	cbz	r0, 23bf8 <ble_hs_reset+0x40>
        ble_hs_cfg.reset_cb(ble_hs_reset_reason);
   23bf6:	4798      	blx	r3
    ble_hs_reset_reason = 0;
   23bf8:	4b04      	ldr	r3, [pc, #16]	; (23c0c <ble_hs_reset+0x54>)
   23bfa:	2200      	movs	r2, #0
   23bfc:	601a      	str	r2, [r3, #0]
    rc = ble_hs_sync();
   23bfe:	f7ff ffa9 	bl	23b54 <ble_hs_sync>
}
   23c02:	bd08      	pop	{r3, pc}
   23c04:	200040b8 	.word	0x200040b8
   23c08:	2000410c 	.word	0x2000410c
   23c0c:	20002928 	.word	0x20002928
   23c10:	200002c8 	.word	0x200002c8

00023c14 <ble_hs_event_reset>:
{
   23c14:	b508      	push	{r3, lr}
    ble_hs_reset();
   23c16:	f7ff ffcf 	bl	23bb8 <ble_hs_reset>
}
   23c1a:	bd08      	pop	{r3, pc}

00023c1c <ble_hs_timer_exp>:
{
   23c1c:	b508      	push	{r3, lr}
    switch (ble_hs_sync_state) {
   23c1e:	4b13      	ldr	r3, [pc, #76]	; (23c6c <ble_hs_timer_exp+0x50>)
   23c20:	781b      	ldrb	r3, [r3, #0]
   23c22:	b1b3      	cbz	r3, 23c52 <ble_hs_timer_exp+0x36>
   23c24:	2b02      	cmp	r3, #2
   23c26:	d117      	bne.n	23c58 <ble_hs_timer_exp+0x3c>
        ticks_until_next = ble_gattc_timer();
   23c28:	f7fe fcce 	bl	225c8 <ble_gattc_timer>
        ble_hs_timer_sched(ticks_until_next);
   23c2c:	f7ff ff7a 	bl	23b24 <ble_hs_timer_sched>
        ticks_until_next = ble_gap_timer();
   23c30:	f7fd fb5e 	bl	212f0 <ble_gap_timer>
        ble_hs_timer_sched(ticks_until_next);
   23c34:	f7ff ff76 	bl	23b24 <ble_hs_timer_sched>
        ticks_until_next = ble_l2cap_sig_timer();
   23c38:	f002 fbc6 	bl	263c8 <ble_l2cap_sig_timer>
        ble_hs_timer_sched(ticks_until_next);
   23c3c:	f7ff ff72 	bl	23b24 <ble_hs_timer_sched>
        ticks_until_next = ble_sm_timer();
   23c40:	f003 ffd9 	bl	27bf6 <ble_sm_timer>
        ble_hs_timer_sched(ticks_until_next);
   23c44:	f7ff ff6e 	bl	23b24 <ble_hs_timer_sched>
        ticks_until_next = ble_hs_conn_timer();
   23c48:	f000 fe3a 	bl	248c0 <ble_hs_conn_timer>
        ble_hs_timer_sched(ticks_until_next);
   23c4c:	f7ff ff6a 	bl	23b24 <ble_hs_timer_sched>
}
   23c50:	bd08      	pop	{r3, pc}
        ble_hs_reset();
   23c52:	f7ff ffb1 	bl	23bb8 <ble_hs_reset>
        break;
   23c56:	e7fb      	b.n	23c50 <ble_hs_timer_exp+0x34>
        assert(0);
   23c58:	f7e8 fac6 	bl	c1e8 <hal_debugger_connected>
   23c5c:	b100      	cbz	r0, 23c60 <ble_hs_timer_exp+0x44>
   23c5e:	be01      	bkpt	0x0001
   23c60:	2300      	movs	r3, #0
   23c62:	461a      	mov	r2, r3
   23c64:	4619      	mov	r1, r3
   23c66:	4618      	mov	r0, r3
   23c68:	f7e8 ff72 	bl	cb50 <__assert_func>
   23c6c:	2000410c 	.word	0x2000410c

00023c70 <ble_hs_timer_resched>:
{
   23c70:	b508      	push	{r3, lr}
    ble_hs_timer_reset(0);
   23c72:	2000      	movs	r0, #0
   23c74:	f7ff ff46 	bl	23b04 <ble_hs_timer_reset>
}
   23c78:	bd08      	pop	{r3, pc}
	...

00023c7c <ble_hs_enqueue_hci_event>:
{
   23c7c:	b510      	push	{r4, lr}
   23c7e:	4604      	mov	r4, r0
    ev = os_memblock_get(&ble_hs_hci_ev_pool);
   23c80:	480a      	ldr	r0, [pc, #40]	; (23cac <ble_hs_enqueue_hci_event+0x30>)
   23c82:	f7e9 ffc3 	bl	dc0c <os_memblock_get>
    if (ev == NULL) {
   23c86:	b160      	cbz	r0, 23ca2 <ble_hs_enqueue_hci_event+0x26>
   23c88:	4601      	mov	r1, r0
    memset(ev, 0, sizeof(*ev));
   23c8a:	2300      	movs	r3, #0
   23c8c:	6003      	str	r3, [r0, #0]
   23c8e:	60c3      	str	r3, [r0, #12]
    ev->ev.ev_queued = 0;
   23c90:	7003      	strb	r3, [r0, #0]
    ev->ev.ev_cb = (os_event_fn *)fn;
   23c92:	4b07      	ldr	r3, [pc, #28]	; (23cb0 <ble_hs_enqueue_hci_event+0x34>)
   23c94:	6043      	str	r3, [r0, #4]
    ev->ev.ev_arg = arg;
   23c96:	6084      	str	r4, [r0, #8]
    os_eventq_put(&evq->evq, &ev->ev);
   23c98:	4b06      	ldr	r3, [pc, #24]	; (23cb4 <ble_hs_enqueue_hci_event+0x38>)
   23c9a:	6818      	ldr	r0, [r3, #0]
   23c9c:	f7e9 fa87 	bl	d1ae <os_eventq_put>
}
   23ca0:	bd10      	pop	{r4, pc}
        ble_hci_trans_buf_free(hci_evt);
   23ca2:	4620      	mov	r0, r4
   23ca4:	f006 fafa 	bl	2a29c <ble_hci_trans_buf_free>
   23ca8:	e7fa      	b.n	23ca0 <ble_hs_enqueue_hci_event+0x24>
   23caa:	bf00      	nop
   23cac:	200040f0 	.word	0x200040f0
   23cb0:	00023999 	.word	0x00023999
   23cb4:	20002874 	.word	0x20002874

00023cb8 <ble_hs_sched_reset>:
{
   23cb8:	b508      	push	{r3, lr}
    ble_hs_reset_reason = reason;
   23cba:	4b04      	ldr	r3, [pc, #16]	; (23ccc <ble_hs_sched_reset+0x14>)
   23cbc:	6018      	str	r0, [r3, #0]
   23cbe:	4904      	ldr	r1, [pc, #16]	; (23cd0 <ble_hs_sched_reset+0x18>)
   23cc0:	4b04      	ldr	r3, [pc, #16]	; (23cd4 <ble_hs_sched_reset+0x1c>)
   23cc2:	6818      	ldr	r0, [r3, #0]
   23cc4:	f7e9 fa73 	bl	d1ae <os_eventq_put>
}
   23cc8:	bd08      	pop	{r3, pc}
   23cca:	bf00      	nop
   23ccc:	20002928 	.word	0x20002928
   23cd0:	20002834 	.word	0x20002834
   23cd4:	20002874 	.word	0x20002874

00023cd8 <ble_hs_hw_error>:
{
   23cd8:	b508      	push	{r3, lr}
    ble_hs_sched_reset(BLE_HS_HW_ERR(hw_code));
   23cda:	f500 60c0 	add.w	r0, r0, #1536	; 0x600
   23cde:	f7ff ffeb 	bl	23cb8 <ble_hs_sched_reset>
}
   23ce2:	bd08      	pop	{r3, pc}

00023ce4 <ble_hs_start>:
{
   23ce4:	b510      	push	{r4, lr}
    ble_hs_lock();
   23ce6:	f7ff fecb 	bl	23a80 <ble_hs_lock>
    switch (ble_hs_enabled_state) {
   23cea:	4b19      	ldr	r3, [pc, #100]	; (23d50 <ble_hs_start+0x6c>)
   23cec:	781b      	ldrb	r3, [r3, #0]
   23cee:	2b01      	cmp	r3, #1
   23cf0:	d029      	beq.n	23d46 <ble_hs_start+0x62>
   23cf2:	b133      	cbz	r3, 23d02 <ble_hs_start+0x1e>
   23cf4:	2b02      	cmp	r3, #2
   23cf6:	d11c      	bne.n	23d32 <ble_hs_start+0x4e>
    ble_hs_unlock();
   23cf8:	f7ff fec6 	bl	23a88 <ble_hs_unlock>
        rc = BLE_HS_EALREADY;
   23cfc:	2402      	movs	r4, #2
}
   23cfe:	4620      	mov	r0, r4
   23d00:	bd10      	pop	{r4, pc}
        ble_hs_enabled_state = BLE_HS_ENABLED_STATE_ON;
   23d02:	4b13      	ldr	r3, [pc, #76]	; (23d50 <ble_hs_start+0x6c>)
   23d04:	2202      	movs	r2, #2
   23d06:	701a      	strb	r2, [r3, #0]
    ble_hs_unlock();
   23d08:	f7ff febe 	bl	23a88 <ble_hs_unlock>
    return os_sched_get_current_task();
   23d0c:	f7ea f93c 	bl	df88 <os_sched_get_current_task>
    ble_hs_parent_task = ble_npl_get_current_task_id();
   23d10:	4b10      	ldr	r3, [pc, #64]	; (23d54 <ble_hs_start+0x70>)
   23d12:	6018      	str	r0, [r3, #0]
    os_callout_init(&co->co, &evq->evq, (os_event_fn *)ev_cb, ev_arg);
   23d14:	2300      	movs	r3, #0
   23d16:	4a10      	ldr	r2, [pc, #64]	; (23d58 <ble_hs_start+0x74>)
   23d18:	4910      	ldr	r1, [pc, #64]	; (23d5c <ble_hs_start+0x78>)
   23d1a:	6809      	ldr	r1, [r1, #0]
   23d1c:	4810      	ldr	r0, [pc, #64]	; (23d60 <ble_hs_start+0x7c>)
   23d1e:	f7e9 f8bf 	bl	cea0 <os_callout_init>
    rc = ble_gatts_start();
   23d22:	f7ff fb75 	bl	23410 <ble_gatts_start>
    if (rc != 0) {
   23d26:	4604      	mov	r4, r0
   23d28:	2800      	cmp	r0, #0
   23d2a:	d1e8      	bne.n	23cfe <ble_hs_start+0x1a>
    ble_hs_sync();
   23d2c:	f7ff ff12 	bl	23b54 <ble_hs_sync>
    return 0;
   23d30:	e7e5      	b.n	23cfe <ble_hs_start+0x1a>
        assert(0);
   23d32:	f7e8 fa59 	bl	c1e8 <hal_debugger_connected>
   23d36:	b100      	cbz	r0, 23d3a <ble_hs_start+0x56>
   23d38:	be01      	bkpt	0x0001
   23d3a:	2300      	movs	r3, #0
   23d3c:	461a      	mov	r2, r3
   23d3e:	4619      	mov	r1, r3
   23d40:	4618      	mov	r0, r3
   23d42:	f7e8 ff05 	bl	cb50 <__assert_func>
    ble_hs_unlock();
   23d46:	f7ff fe9f 	bl	23a88 <ble_hs_unlock>
        rc = BLE_HS_EBUSY;
   23d4a:	240f      	movs	r4, #15
   23d4c:	e7d7      	b.n	23cfe <ble_hs_start+0x1a>
   23d4e:	bf00      	nop
   23d50:	20004112 	.word	0x20004112
   23d54:	20002924 	.word	0x20002924
   23d58:	00023c1d 	.word	0x00023c1d
   23d5c:	20002874 	.word	0x20002874
   23d60:	20002944 	.word	0x20002944

00023d64 <ble_hs_event_start_stage2>:
{
   23d64:	b508      	push	{r3, lr}
    rc = ble_hs_start();
   23d66:	f7ff ffbd 	bl	23ce4 <ble_hs_start>
    assert(rc == 0);
   23d6a:	b900      	cbnz	r0, 23d6e <ble_hs_event_start_stage2+0xa>
}
   23d6c:	bd08      	pop	{r3, pc}
    assert(rc == 0);
   23d6e:	f7e8 fa3b 	bl	c1e8 <hal_debugger_connected>
   23d72:	b100      	cbz	r0, 23d76 <ble_hs_event_start_stage2+0x12>
   23d74:	be01      	bkpt	0x0001
   23d76:	2300      	movs	r3, #0
   23d78:	461a      	mov	r2, r3
   23d7a:	4619      	mov	r1, r3
   23d7c:	4618      	mov	r0, r3
   23d7e:	f7e8 fee7 	bl	cb50 <__assert_func>

00023d82 <ble_hs_tx_data>:
 *
 * @return                      0 on success; nonzero on failure.
 */
int
ble_hs_tx_data(struct os_mbuf *om)
{
   23d82:	b508      	push	{r3, lr}
#if BLE_MONITOR
    ble_monitor_send_om(BLE_MONITOR_OPCODE_ACL_TX_PKT, om);
#endif

    return ble_hci_trans_hs_acl_tx(om);
   23d84:	f006 fa30 	bl	2a1e8 <ble_hci_trans_hs_acl_tx>
}
   23d88:	bd08      	pop	{r3, pc}
	...

00023d8c <ble_hs_init>:

void
ble_hs_init(void)
{
   23d8c:	b510      	push	{r4, lr}
   23d8e:	b082      	sub	sp, #8
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   23d90:	4b80      	ldr	r3, [pc, #512]	; (23f94 <ble_hs_init+0x208>)
   23d92:	781b      	ldrb	r3, [r3, #0]
   23d94:	2b00      	cmp	r3, #0
   23d96:	d070      	beq.n	23e7a <ble_hs_init+0xee>

    /* Create memory pool of OS events */
    rc = os_mempool_init(&ble_hs_hci_ev_pool, BLE_HS_HCI_EVT_COUNT,
   23d98:	4b7f      	ldr	r3, [pc, #508]	; (23f98 <ble_hs_init+0x20c>)
   23d9a:	9300      	str	r3, [sp, #0]
   23d9c:	4b7f      	ldr	r3, [pc, #508]	; (23f9c <ble_hs_init+0x210>)
   23d9e:	2210      	movs	r2, #16
   23da0:	210a      	movs	r1, #10
   23da2:	487f      	ldr	r0, [pc, #508]	; (23fa0 <ble_hs_init+0x214>)
   23da4:	f7e9 feee 	bl	db84 <os_mempool_init>
                         sizeof (struct ble_npl_event), ble_hs_hci_os_event_buf,
                         "ble_hs_hci_ev_pool");
    SYSINIT_PANIC_ASSERT(rc == 0);
   23da8:	2800      	cmp	r0, #0
   23daa:	d170      	bne.n	23e8e <ble_hs_init+0x102>

    /* These get initialized here to allow unit tests to run without a zeroed
     * bss.
     */
    ble_hs_reset_reason = 0;
   23dac:	2300      	movs	r3, #0
   23dae:	4a7d      	ldr	r2, [pc, #500]	; (23fa4 <ble_hs_init+0x218>)
   23db0:	6013      	str	r3, [r2, #0]
    ble_hs_enabled_state = BLE_HS_ENABLED_STATE_OFF;
   23db2:	4a7d      	ldr	r2, [pc, #500]	; (23fa8 <ble_hs_init+0x21c>)
   23db4:	7013      	strb	r3, [r2, #0]
    memset(ev, 0, sizeof(*ev));
   23db6:	4a7d      	ldr	r2, [pc, #500]	; (23fac <ble_hs_init+0x220>)
   23db8:	6013      	str	r3, [r2, #0]
   23dba:	6093      	str	r3, [r2, #8]
   23dbc:	60d3      	str	r3, [r2, #12]
    ev->ev.ev_cb = (os_event_fn *)fn;
   23dbe:	497c      	ldr	r1, [pc, #496]	; (23fb0 <ble_hs_init+0x224>)
   23dc0:	6051      	str	r1, [r2, #4]
    memset(ev, 0, sizeof(*ev));
   23dc2:	4a7c      	ldr	r2, [pc, #496]	; (23fb4 <ble_hs_init+0x228>)
   23dc4:	6013      	str	r3, [r2, #0]
   23dc6:	6093      	str	r3, [r2, #8]
   23dc8:	60d3      	str	r3, [r2, #12]
    ev->ev.ev_cb = (os_event_fn *)fn;
   23dca:	497b      	ldr	r1, [pc, #492]	; (23fb8 <ble_hs_init+0x22c>)
   23dcc:	6051      	str	r1, [r2, #4]
    memset(ev, 0, sizeof(*ev));
   23dce:	4a7b      	ldr	r2, [pc, #492]	; (23fbc <ble_hs_init+0x230>)
   23dd0:	6013      	str	r3, [r2, #0]
   23dd2:	6093      	str	r3, [r2, #8]
   23dd4:	60d3      	str	r3, [r2, #12]
    ev->ev.ev_cb = (os_event_fn *)fn;
   23dd6:	497a      	ldr	r1, [pc, #488]	; (23fc0 <ble_hs_init+0x234>)
   23dd8:	6051      	str	r1, [r2, #4]
    memset(ev, 0, sizeof(*ev));
   23dda:	4a7a      	ldr	r2, [pc, #488]	; (23fc4 <ble_hs_init+0x238>)
   23ddc:	6013      	str	r3, [r2, #0]
   23dde:	6093      	str	r3, [r2, #8]
   23de0:	60d3      	str	r3, [r2, #12]
    ev->ev.ev_cb = (os_event_fn *)fn;
   23de2:	4b79      	ldr	r3, [pc, #484]	; (23fc8 <ble_hs_init+0x23c>)
   23de4:	6053      	str	r3, [r2, #4]
    ble_npl_event_init(&ble_hs_ev_start_stage1, ble_hs_event_start_stage1,
                       NULL);
    ble_npl_event_init(&ble_hs_ev_start_stage2, ble_hs_event_start_stage2,
                       NULL);

    ble_hs_hci_init();
   23de6:	f000 ffb1 	bl	24d4c <ble_hs_hci_init>

    rc = ble_hs_conn_init();
   23dea:	f000 fdab 	bl	24944 <ble_hs_conn_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   23dee:	2800      	cmp	r0, #0
   23df0:	d15a      	bne.n	23ea8 <ble_hs_init+0x11c>
#if MYNEWT_VAL(BLE_PERIODIC_ADV)
    rc = ble_hs_periodic_sync_init();
    SYSINIT_PANIC_ASSERT(rc == 0);
#endif

    rc = ble_l2cap_init();
   23df2:	f002 f895 	bl	25f20 <ble_l2cap_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   23df6:	2800      	cmp	r0, #0
   23df8:	d163      	bne.n	23ec2 <ble_hs_init+0x136>

    rc = ble_att_init();
   23dfa:	f7fa fdd7 	bl	1e9ac <ble_att_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   23dfe:	2800      	cmp	r0, #0
   23e00:	d16c      	bne.n	23edc <ble_hs_init+0x150>

    rc = ble_att_svr_init();
   23e02:	f7fc f9e9 	bl	201d8 <ble_att_svr_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   23e06:	2800      	cmp	r0, #0
   23e08:	d175      	bne.n	23ef6 <ble_hs_init+0x16a>

    rc = ble_gap_init();
   23e0a:	f7fd fd4d 	bl	218a8 <ble_gap_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   23e0e:	2800      	cmp	r0, #0
   23e10:	d17e      	bne.n	23f10 <ble_hs_init+0x184>

    rc = ble_gattc_init();
   23e12:	f7fe fcf5 	bl	22800 <ble_gattc_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   23e16:	2800      	cmp	r0, #0
   23e18:	f040 8087 	bne.w	23f2a <ble_hs_init+0x19e>

    rc = ble_gatts_init();
   23e1c:	f7ff fd76 	bl	2390c <ble_gatts_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   23e20:	2800      	cmp	r0, #0
   23e22:	f040 808f 	bne.w	23f44 <ble_hs_init+0x1b8>

    ble_hs_stop_init();
   23e26:	f001 ff41 	bl	25cac <ble_hs_stop_init>

    ble_mqueue_init(&ble_hs_rx_q, ble_hs_event_rx_data, NULL);
   23e2a:	2200      	movs	r2, #0
   23e2c:	4967      	ldr	r1, [pc, #412]	; (23fcc <ble_hs_init+0x240>)
   23e2e:	4868      	ldr	r0, [pc, #416]	; (23fd0 <ble_hs_init+0x244>)
   23e30:	f001 fc7e 	bl	25730 <ble_mqueue_init>

    rc = stats_init_and_reg(
   23e34:	4b67      	ldr	r3, [pc, #412]	; (23fd4 <ble_hs_init+0x248>)
   23e36:	9301      	str	r3, [sp, #4]
   23e38:	2300      	movs	r3, #0
   23e3a:	9300      	str	r3, [sp, #0]
   23e3c:	220b      	movs	r2, #11
   23e3e:	2104      	movs	r1, #4
   23e40:	4865      	ldr	r0, [pc, #404]	; (23fd8 <ble_hs_init+0x24c>)
   23e42:	f7ee f9cb 	bl	121dc <stats_init_and_reg>
        STATS_HDR(ble_hs_stats), STATS_SIZE_INIT_PARMS(ble_hs_stats,
        STATS_SIZE_32), STATS_NAME_INIT_PARMS(ble_hs_stats), "ble_hs");
    SYSINIT_PANIC_ASSERT(rc == 0);
   23e46:	2800      	cmp	r0, #0
   23e48:	f040 8089 	bne.w	23f5e <ble_hs_init+0x1d2>
    return (ble_npl_error_t)os_mutex_init(&mu->mu);
   23e4c:	4863      	ldr	r0, [pc, #396]	; (23fdc <ble_hs_init+0x250>)
   23e4e:	f7ea fc3d 	bl	e6cc <os_mutex_init>

    rc = ble_npl_mutex_init(&ble_hs_mutex);
    SYSINIT_PANIC_ASSERT(rc == 0);
   23e52:	2800      	cmp	r0, #0
   23e54:	f040 8090 	bne.w	23f78 <ble_hs_init+0x1ec>
#if MYNEWT_VAL(BLE_HS_DEBUG)
    ble_hs_dbg_mutex_locked = 0;
#endif

#ifdef MYNEWT
    ble_hs_evq_set((struct ble_npl_eventq *)os_eventq_dflt_get());
   23e58:	f7e9 fa60 	bl	d31c <os_eventq_dflt_get>
   23e5c:	f7ff fde6 	bl	23a2c <ble_hs_evq_set>
#else
    ble_hs_evq_set(nimble_port_get_dflt_eventq());
#endif

    /* Configure the HCI transport to communicate with a host. */
    ble_hci_trans_cfg_hs(ble_hs_hci_rx_evt, NULL, ble_hs_rx_data, NULL);
   23e60:	2300      	movs	r3, #0
   23e62:	4a5f      	ldr	r2, [pc, #380]	; (23fe0 <ble_hs_init+0x254>)
   23e64:	4619      	mov	r1, r3
   23e66:	485f      	ldr	r0, [pc, #380]	; (23fe4 <ble_hs_init+0x258>)
   23e68:	f006 f96a 	bl	2a140 <ble_hci_trans_cfg_hs>
     * queue ensures the event won't run until the end of main().  This allows
     * the application to configure this package in the meantime.
     */
#if MYNEWT_VAL(BLE_HS_AUTO_START)
#ifdef MYNEWT
    ble_npl_eventq_put((struct ble_npl_eventq *)os_eventq_dflt_get(),
   23e6c:	f7e9 fa56 	bl	d31c <os_eventq_dflt_get>
    os_eventq_put(&evq->evq, &ev->ev);
   23e70:	4952      	ldr	r1, [pc, #328]	; (23fbc <ble_hs_init+0x230>)
   23e72:	f7e9 f99c 	bl	d1ae <os_eventq_put>
#endif

#if BLE_MONITOR
    ble_monitor_new_index(0, (uint8_t[6]){ }, "nimble0");
#endif
}
   23e76:	b002      	add	sp, #8
   23e78:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   23e7a:	f7e8 f9b5 	bl	c1e8 <hal_debugger_connected>
   23e7e:	b100      	cbz	r0, 23e82 <ble_hs_init+0xf6>
   23e80:	be01      	bkpt	0x0001
   23e82:	2300      	movs	r3, #0
   23e84:	461a      	mov	r2, r3
   23e86:	4619      	mov	r1, r3
   23e88:	4618      	mov	r0, r3
   23e8a:	f7e8 fe61 	bl	cb50 <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
   23e8e:	f7e8 f9ab 	bl	c1e8 <hal_debugger_connected>
   23e92:	b100      	cbz	r0, 23e96 <ble_hs_init+0x10a>
   23e94:	be01      	bkpt	0x0001
   23e96:	2000      	movs	r0, #0
   23e98:	9000      	str	r0, [sp, #0]
   23e9a:	4b53      	ldr	r3, [pc, #332]	; (23fe8 <ble_hs_init+0x25c>)
   23e9c:	681c      	ldr	r4, [r3, #0]
   23e9e:	4603      	mov	r3, r0
   23ea0:	4602      	mov	r2, r0
   23ea2:	4601      	mov	r1, r0
   23ea4:	47a0      	blx	r4
   23ea6:	e781      	b.n	23dac <ble_hs_init+0x20>
    SYSINIT_PANIC_ASSERT(rc == 0);
   23ea8:	f7e8 f99e 	bl	c1e8 <hal_debugger_connected>
   23eac:	b100      	cbz	r0, 23eb0 <ble_hs_init+0x124>
   23eae:	be01      	bkpt	0x0001
   23eb0:	2000      	movs	r0, #0
   23eb2:	9000      	str	r0, [sp, #0]
   23eb4:	4b4c      	ldr	r3, [pc, #304]	; (23fe8 <ble_hs_init+0x25c>)
   23eb6:	681c      	ldr	r4, [r3, #0]
   23eb8:	4603      	mov	r3, r0
   23eba:	4602      	mov	r2, r0
   23ebc:	4601      	mov	r1, r0
   23ebe:	47a0      	blx	r4
   23ec0:	e797      	b.n	23df2 <ble_hs_init+0x66>
    SYSINIT_PANIC_ASSERT(rc == 0);
   23ec2:	f7e8 f991 	bl	c1e8 <hal_debugger_connected>
   23ec6:	b100      	cbz	r0, 23eca <ble_hs_init+0x13e>
   23ec8:	be01      	bkpt	0x0001
   23eca:	2000      	movs	r0, #0
   23ecc:	9000      	str	r0, [sp, #0]
   23ece:	4b46      	ldr	r3, [pc, #280]	; (23fe8 <ble_hs_init+0x25c>)
   23ed0:	681c      	ldr	r4, [r3, #0]
   23ed2:	4603      	mov	r3, r0
   23ed4:	4602      	mov	r2, r0
   23ed6:	4601      	mov	r1, r0
   23ed8:	47a0      	blx	r4
   23eda:	e78e      	b.n	23dfa <ble_hs_init+0x6e>
    SYSINIT_PANIC_ASSERT(rc == 0);
   23edc:	f7e8 f984 	bl	c1e8 <hal_debugger_connected>
   23ee0:	b100      	cbz	r0, 23ee4 <ble_hs_init+0x158>
   23ee2:	be01      	bkpt	0x0001
   23ee4:	2000      	movs	r0, #0
   23ee6:	9000      	str	r0, [sp, #0]
   23ee8:	4b3f      	ldr	r3, [pc, #252]	; (23fe8 <ble_hs_init+0x25c>)
   23eea:	681c      	ldr	r4, [r3, #0]
   23eec:	4603      	mov	r3, r0
   23eee:	4602      	mov	r2, r0
   23ef0:	4601      	mov	r1, r0
   23ef2:	47a0      	blx	r4
   23ef4:	e785      	b.n	23e02 <ble_hs_init+0x76>
    SYSINIT_PANIC_ASSERT(rc == 0);
   23ef6:	f7e8 f977 	bl	c1e8 <hal_debugger_connected>
   23efa:	b100      	cbz	r0, 23efe <ble_hs_init+0x172>
   23efc:	be01      	bkpt	0x0001
   23efe:	2000      	movs	r0, #0
   23f00:	9000      	str	r0, [sp, #0]
   23f02:	4b39      	ldr	r3, [pc, #228]	; (23fe8 <ble_hs_init+0x25c>)
   23f04:	681c      	ldr	r4, [r3, #0]
   23f06:	4603      	mov	r3, r0
   23f08:	4602      	mov	r2, r0
   23f0a:	4601      	mov	r1, r0
   23f0c:	47a0      	blx	r4
   23f0e:	e77c      	b.n	23e0a <ble_hs_init+0x7e>
    SYSINIT_PANIC_ASSERT(rc == 0);
   23f10:	f7e8 f96a 	bl	c1e8 <hal_debugger_connected>
   23f14:	b100      	cbz	r0, 23f18 <ble_hs_init+0x18c>
   23f16:	be01      	bkpt	0x0001
   23f18:	2000      	movs	r0, #0
   23f1a:	9000      	str	r0, [sp, #0]
   23f1c:	4b32      	ldr	r3, [pc, #200]	; (23fe8 <ble_hs_init+0x25c>)
   23f1e:	681c      	ldr	r4, [r3, #0]
   23f20:	4603      	mov	r3, r0
   23f22:	4602      	mov	r2, r0
   23f24:	4601      	mov	r1, r0
   23f26:	47a0      	blx	r4
   23f28:	e773      	b.n	23e12 <ble_hs_init+0x86>
    SYSINIT_PANIC_ASSERT(rc == 0);
   23f2a:	f7e8 f95d 	bl	c1e8 <hal_debugger_connected>
   23f2e:	b100      	cbz	r0, 23f32 <ble_hs_init+0x1a6>
   23f30:	be01      	bkpt	0x0001
   23f32:	2000      	movs	r0, #0
   23f34:	9000      	str	r0, [sp, #0]
   23f36:	4b2c      	ldr	r3, [pc, #176]	; (23fe8 <ble_hs_init+0x25c>)
   23f38:	681c      	ldr	r4, [r3, #0]
   23f3a:	4603      	mov	r3, r0
   23f3c:	4602      	mov	r2, r0
   23f3e:	4601      	mov	r1, r0
   23f40:	47a0      	blx	r4
   23f42:	e76b      	b.n	23e1c <ble_hs_init+0x90>
    SYSINIT_PANIC_ASSERT(rc == 0);
   23f44:	f7e8 f950 	bl	c1e8 <hal_debugger_connected>
   23f48:	b100      	cbz	r0, 23f4c <ble_hs_init+0x1c0>
   23f4a:	be01      	bkpt	0x0001
   23f4c:	2000      	movs	r0, #0
   23f4e:	9000      	str	r0, [sp, #0]
   23f50:	4b25      	ldr	r3, [pc, #148]	; (23fe8 <ble_hs_init+0x25c>)
   23f52:	681c      	ldr	r4, [r3, #0]
   23f54:	4603      	mov	r3, r0
   23f56:	4602      	mov	r2, r0
   23f58:	4601      	mov	r1, r0
   23f5a:	47a0      	blx	r4
   23f5c:	e763      	b.n	23e26 <ble_hs_init+0x9a>
    SYSINIT_PANIC_ASSERT(rc == 0);
   23f5e:	f7e8 f943 	bl	c1e8 <hal_debugger_connected>
   23f62:	b100      	cbz	r0, 23f66 <ble_hs_init+0x1da>
   23f64:	be01      	bkpt	0x0001
   23f66:	2000      	movs	r0, #0
   23f68:	9000      	str	r0, [sp, #0]
   23f6a:	4b1f      	ldr	r3, [pc, #124]	; (23fe8 <ble_hs_init+0x25c>)
   23f6c:	681c      	ldr	r4, [r3, #0]
   23f6e:	4603      	mov	r3, r0
   23f70:	4602      	mov	r2, r0
   23f72:	4601      	mov	r1, r0
   23f74:	47a0      	blx	r4
   23f76:	e769      	b.n	23e4c <ble_hs_init+0xc0>
    SYSINIT_PANIC_ASSERT(rc == 0);
   23f78:	f7e8 f936 	bl	c1e8 <hal_debugger_connected>
   23f7c:	b100      	cbz	r0, 23f80 <ble_hs_init+0x1f4>
   23f7e:	be01      	bkpt	0x0001
   23f80:	2000      	movs	r0, #0
   23f82:	9000      	str	r0, [sp, #0]
   23f84:	4b18      	ldr	r3, [pc, #96]	; (23fe8 <ble_hs_init+0x25c>)
   23f86:	681c      	ldr	r4, [r3, #0]
   23f88:	4603      	mov	r3, r0
   23f8a:	4602      	mov	r2, r0
   23f8c:	4601      	mov	r1, r0
   23f8e:	47a0      	blx	r4
   23f90:	e762      	b.n	23e58 <ble_hs_init+0xcc>
   23f92:	bf00      	nop
   23f94:	20003584 	.word	0x20003584
   23f98:	00032398 	.word	0x00032398
   23f9c:	20002878 	.word	0x20002878
   23fa0:	200040f0 	.word	0x200040f0
   23fa4:	20002928 	.word	0x20002928
   23fa8:	20004112 	.word	0x20004112
   23fac:	20002864 	.word	0x20002864
   23fb0:	000239fd 	.word	0x000239fd
   23fb4:	20002834 	.word	0x20002834
   23fb8:	00023c15 	.word	0x00023c15
   23fbc:	20002844 	.word	0x20002844
   23fc0:	00023a25 	.word	0x00023a25
   23fc4:	20002854 	.word	0x20002854
   23fc8:	00023d65 	.word	0x00023d65
   23fcc:	00023aad 	.word	0x00023aad
   23fd0:	2000292c 	.word	0x2000292c
   23fd4:	000323ac 	.word	0x000323ac
   23fd8:	200040b8 	.word	0x200040b8
   23fdc:	20002918 	.word	0x20002918
   23fe0:	000239cd 	.word	0x000239cd
   23fe4:	00024c31 	.word	0x00024c31
   23fe8:	20000298 	.word	0x20000298

00023fec <ble_hs_adv_set_hdr>:
static ble_uuid128_t ble_hs_adv_uuids128[BLE_HS_ADV_MAX_FIELD_SZ / 16];

static int
ble_hs_adv_set_hdr(uint8_t type, uint8_t data_len, uint8_t max_len,
                   uint8_t *dst, uint8_t *dst_len, struct os_mbuf *om)
{
   23fec:	b530      	push	{r4, r5, lr}
   23fee:	b083      	sub	sp, #12
   23ff0:	9d06      	ldr	r5, [sp, #24]
   23ff2:	9c07      	ldr	r4, [sp, #28]
   23ff4:	f88d 0007 	strb.w	r0, [sp, #7]
   23ff8:	f88d 1006 	strb.w	r1, [sp, #6]
    int rc;

    if (om ) {
   23ffc:	b1ac      	cbz	r4, 2402a <ble_hs_adv_set_hdr+0x3e>
        data_len++;
   23ffe:	b2cb      	uxtb	r3, r1
   24000:	3301      	adds	r3, #1
   24002:	a902      	add	r1, sp, #8
   24004:	f801 3d02 	strb.w	r3, [r1, #-2]!
        rc = os_mbuf_append(om, &data_len, sizeof(data_len));
   24008:	2201      	movs	r2, #1
   2400a:	4620      	mov	r0, r4
   2400c:	f7e9 fa24 	bl	d458 <os_mbuf_append>
        if (rc) {
   24010:	4603      	mov	r3, r0
   24012:	b110      	cbz	r0, 2401a <ble_hs_adv_set_hdr+0x2e>
    dst[*dst_len + 1] = type;

    *dst_len += 2;

    return 0;
}
   24014:	4618      	mov	r0, r3
   24016:	b003      	add	sp, #12
   24018:	bd30      	pop	{r4, r5, pc}
        return os_mbuf_append(om, &type, sizeof(type));
   2401a:	2201      	movs	r2, #1
   2401c:	f10d 0107 	add.w	r1, sp, #7
   24020:	4620      	mov	r0, r4
   24022:	f7e9 fa19 	bl	d458 <os_mbuf_append>
   24026:	4603      	mov	r3, r0
   24028:	e7f4      	b.n	24014 <ble_hs_adv_set_hdr+0x28>
    if (*dst_len + 2 + data_len > max_len) {
   2402a:	782c      	ldrb	r4, [r5, #0]
   2402c:	1ca0      	adds	r0, r4, #2
   2402e:	f89d 1006 	ldrb.w	r1, [sp, #6]
   24032:	4408      	add	r0, r1
   24034:	4290      	cmp	r0, r2
   24036:	dc0b      	bgt.n	24050 <ble_hs_adv_set_hdr+0x64>
    dst[*dst_len] = data_len + 1;
   24038:	3101      	adds	r1, #1
   2403a:	5519      	strb	r1, [r3, r4]
    dst[*dst_len + 1] = type;
   2403c:	782a      	ldrb	r2, [r5, #0]
   2403e:	3201      	adds	r2, #1
   24040:	f89d 1007 	ldrb.w	r1, [sp, #7]
   24044:	5499      	strb	r1, [r3, r2]
    *dst_len += 2;
   24046:	782b      	ldrb	r3, [r5, #0]
   24048:	3302      	adds	r3, #2
   2404a:	702b      	strb	r3, [r5, #0]
    return 0;
   2404c:	2300      	movs	r3, #0
   2404e:	e7e1      	b.n	24014 <ble_hs_adv_set_hdr+0x28>
        return BLE_HS_EMSGSIZE;
   24050:	2304      	movs	r3, #4
   24052:	e7df      	b.n	24014 <ble_hs_adv_set_hdr+0x28>

00024054 <ble_hs_adv_set_flat_mbuf>:

static int
ble_hs_adv_set_flat_mbuf(uint8_t type, int data_len, const void *data,
                         uint8_t *dst, uint8_t *dst_len, uint8_t max_len,
                         struct os_mbuf *om)
{
   24054:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   24058:	b082      	sub	sp, #8
   2405a:	460f      	mov	r7, r1
   2405c:	4691      	mov	r9, r2
   2405e:	469a      	mov	sl, r3
   24060:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   24062:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    int rc;

    BLE_HS_DBG_ASSERT(data_len > 0);

    rc = ble_hs_adv_set_hdr(type, data_len, max_len, dst, dst_len, om);
   24064:	b2ce      	uxtb	r6, r1
   24066:	9401      	str	r4, [sp, #4]
   24068:	9500      	str	r5, [sp, #0]
   2406a:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
   2406e:	4631      	mov	r1, r6
   24070:	f7ff ffbc 	bl	23fec <ble_hs_adv_set_hdr>
    if (rc != 0) {
   24074:	4680      	mov	r8, r0
   24076:	b930      	cbnz	r0, 24086 <ble_hs_adv_set_flat_mbuf+0x32>
        return rc;
    }

    if (om) {
   24078:	b14c      	cbz	r4, 2408e <ble_hs_adv_set_flat_mbuf+0x3a>
        return os_mbuf_append(om, data, data_len);
   2407a:	b2ba      	uxth	r2, r7
   2407c:	4649      	mov	r1, r9
   2407e:	4620      	mov	r0, r4
   24080:	f7e9 f9ea 	bl	d458 <os_mbuf_append>
   24084:	4680      	mov	r8, r0

    memcpy(dst + *dst_len, data, data_len);
    *dst_len += data_len;

    return 0;
}
   24086:	4640      	mov	r0, r8
   24088:	b002      	add	sp, #8
   2408a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    memcpy(dst + *dst_len, data, data_len);
   2408e:	7828      	ldrb	r0, [r5, #0]
   24090:	463a      	mov	r2, r7
   24092:	4649      	mov	r1, r9
   24094:	4450      	add	r0, sl
   24096:	f7ea fc83 	bl	e9a0 <memcpy>
    *dst_len += data_len;
   2409a:	782b      	ldrb	r3, [r5, #0]
   2409c:	441e      	add	r6, r3
   2409e:	702e      	strb	r6, [r5, #0]
    return 0;
   240a0:	e7f1      	b.n	24086 <ble_hs_adv_set_flat_mbuf+0x32>

000240a2 <ble_hs_adv_set_array_uuid16>:
static int
ble_hs_adv_set_array_uuid16(uint8_t type, uint8_t num_elems,
                            const ble_uuid16_t *elems, uint8_t *dst,
                            uint8_t *dst_len, uint8_t max_len,
                            struct os_mbuf *om)
{
   240a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   240a6:	b082      	sub	sp, #8
   240a8:	460e      	mov	r6, r1
   240aa:	4690      	mov	r8, r2
   240ac:	469a      	mov	sl, r3
   240ae:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   240b0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    int rc;
    int i;

    rc = ble_hs_adv_set_hdr(type, num_elems * 2, max_len, dst,
   240b2:	0049      	lsls	r1, r1, #1
   240b4:	9501      	str	r5, [sp, #4]
   240b6:	9700      	str	r7, [sp, #0]
   240b8:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
   240bc:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
   240c0:	f7ff ff94 	bl	23fec <ble_hs_adv_set_hdr>
                            dst_len, om);
    if (rc != 0) {
   240c4:	4681      	mov	r9, r0
   240c6:	b9b8      	cbnz	r0, 240f8 <ble_hs_adv_set_array_uuid16+0x56>
        return rc;
    }

    for (i = 0; i < num_elems; i++) {
   240c8:	4604      	mov	r4, r0
   240ca:	e009      	b.n	240e0 <ble_hs_adv_set_array_uuid16+0x3e>
            rc = ble_uuid_to_mbuf(&elems[i].u, om);
            if (rc) {
                return rc;
            }
        } else {
            ble_uuid_flat(&elems[i].u, dst + *dst_len);
   240cc:	7839      	ldrb	r1, [r7, #0]
   240ce:	4451      	add	r1, sl
   240d0:	eb08 0084 	add.w	r0, r8, r4, lsl #2
   240d4:	f004 fea2 	bl	28e1c <ble_uuid_flat>
            *dst_len += 2;
   240d8:	783b      	ldrb	r3, [r7, #0]
   240da:	3302      	adds	r3, #2
   240dc:	703b      	strb	r3, [r7, #0]
    for (i = 0; i < num_elems; i++) {
   240de:	3401      	adds	r4, #1
   240e0:	42a6      	cmp	r6, r4
   240e2:	dd09      	ble.n	240f8 <ble_hs_adv_set_array_uuid16+0x56>
        if (om) {
   240e4:	2d00      	cmp	r5, #0
   240e6:	d0f1      	beq.n	240cc <ble_hs_adv_set_array_uuid16+0x2a>
            rc = ble_uuid_to_mbuf(&elems[i].u, om);
   240e8:	4629      	mov	r1, r5
   240ea:	eb08 0084 	add.w	r0, r8, r4, lsl #2
   240ee:	f004 fec4 	bl	28e7a <ble_uuid_to_mbuf>
            if (rc) {
   240f2:	2800      	cmp	r0, #0
   240f4:	d0f3      	beq.n	240de <ble_hs_adv_set_array_uuid16+0x3c>
                return rc;
   240f6:	4681      	mov	r9, r0
        }
    }

    return 0;
}
   240f8:	4648      	mov	r0, r9
   240fa:	b002      	add	sp, #8
   240fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00024100 <ble_hs_adv_set_array_uuid128>:
static int
ble_hs_adv_set_array_uuid128(uint8_t type, uint8_t num_elems,
                             const ble_uuid128_t *elems, uint8_t *dst,
                             uint8_t *dst_len, uint8_t max_len,
                             struct os_mbuf *om)
{
   24100:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   24104:	b082      	sub	sp, #8
   24106:	460e      	mov	r6, r1
   24108:	4690      	mov	r8, r2
   2410a:	469a      	mov	sl, r3
   2410c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   2410e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    int rc;
    int i;

    rc = ble_hs_adv_set_hdr(type, num_elems * 16, max_len, dst,
   24110:	0109      	lsls	r1, r1, #4
   24112:	9501      	str	r5, [sp, #4]
   24114:	9700      	str	r7, [sp, #0]
   24116:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
   2411a:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
   2411e:	f7ff ff65 	bl	23fec <ble_hs_adv_set_hdr>
                            dst_len, om);
    if (rc != 0) {
   24122:	4681      	mov	r9, r0
   24124:	b9c8      	cbnz	r0, 2415a <ble_hs_adv_set_array_uuid128+0x5a>
        return rc;
    }

    for (i = 0; i < num_elems; i++) {
   24126:	4604      	mov	r4, r0
   24128:	e00a      	b.n	24140 <ble_hs_adv_set_array_uuid128+0x40>
            rc = ble_uuid_to_mbuf(&elems[i].u, om);
            if (rc) {
                return rc;
            }
        } else {
            ble_uuid_flat(&elems[i].u, dst + *dst_len);
   2412a:	eb04 1004 	add.w	r0, r4, r4, lsl #4
   2412e:	7839      	ldrb	r1, [r7, #0]
   24130:	4451      	add	r1, sl
   24132:	4440      	add	r0, r8
   24134:	f004 fe72 	bl	28e1c <ble_uuid_flat>
            *dst_len += 16;
   24138:	783b      	ldrb	r3, [r7, #0]
   2413a:	3310      	adds	r3, #16
   2413c:	703b      	strb	r3, [r7, #0]
    for (i = 0; i < num_elems; i++) {
   2413e:	3401      	adds	r4, #1
   24140:	42a6      	cmp	r6, r4
   24142:	dd0a      	ble.n	2415a <ble_hs_adv_set_array_uuid128+0x5a>
        if (om) {
   24144:	2d00      	cmp	r5, #0
   24146:	d0f0      	beq.n	2412a <ble_hs_adv_set_array_uuid128+0x2a>
            rc = ble_uuid_to_mbuf(&elems[i].u, om);
   24148:	eb04 1004 	add.w	r0, r4, r4, lsl #4
   2414c:	4629      	mov	r1, r5
   2414e:	4440      	add	r0, r8
   24150:	f004 fe93 	bl	28e7a <ble_uuid_to_mbuf>
            if (rc) {
   24154:	2800      	cmp	r0, #0
   24156:	d0f2      	beq.n	2413e <ble_hs_adv_set_array_uuid128+0x3e>
                return rc;
   24158:	4681      	mov	r9, r0
        }
    }

    return 0;
}
   2415a:	4648      	mov	r0, r9
   2415c:	b002      	add	sp, #8
   2415e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00024162 <ble_hs_adv_set_array_uuid32>:
{
   24162:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   24166:	b084      	sub	sp, #16
   24168:	460e      	mov	r6, r1
   2416a:	4690      	mov	r8, r2
   2416c:	469a      	mov	sl, r3
   2416e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   24170:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    rc = ble_hs_adv_set_hdr(type, num_elems * 4, max_len, dst,
   24172:	0089      	lsls	r1, r1, #2
   24174:	9501      	str	r5, [sp, #4]
   24176:	9700      	str	r7, [sp, #0]
   24178:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
   2417c:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
   24180:	f7ff ff34 	bl	23fec <ble_hs_adv_set_hdr>
    if (rc != 0) {
   24184:	4681      	mov	r9, r0
   24186:	b9e8      	cbnz	r0, 241c4 <ble_hs_adv_set_array_uuid32+0x62>
    for (i = 0; i < num_elems; i++) {
   24188:	4604      	mov	r4, r0
   2418a:	e00a      	b.n	241a2 <ble_hs_adv_set_array_uuid32+0x40>
            put_le32(dst + *dst_len, elems[i].value);
   2418c:	7838      	ldrb	r0, [r7, #0]
   2418e:	eb08 03c4 	add.w	r3, r8, r4, lsl #3
   24192:	6859      	ldr	r1, [r3, #4]
   24194:	4450      	add	r0, sl
   24196:	f00a fdcd 	bl	2ed34 <put_le32>
            *dst_len += 4;
   2419a:	783b      	ldrb	r3, [r7, #0]
   2419c:	3304      	adds	r3, #4
   2419e:	703b      	strb	r3, [r7, #0]
    for (i = 0; i < num_elems; i++) {
   241a0:	3401      	adds	r4, #1
   241a2:	42a6      	cmp	r6, r4
   241a4:	dd0e      	ble.n	241c4 <ble_hs_adv_set_array_uuid32+0x62>
        if (om) {
   241a6:	2d00      	cmp	r5, #0
   241a8:	d0f0      	beq.n	2418c <ble_hs_adv_set_array_uuid32+0x2a>
            uuid_le = htole32(elems[i].value);
   241aa:	eb08 03c4 	add.w	r3, r8, r4, lsl #3
   241ae:	685b      	ldr	r3, [r3, #4]
   241b0:	a904      	add	r1, sp, #16
   241b2:	f841 3d04 	str.w	r3, [r1, #-4]!
            rc = os_mbuf_append(om, &uuid_le, sizeof(uuid_le));
   241b6:	2204      	movs	r2, #4
   241b8:	4628      	mov	r0, r5
   241ba:	f7e9 f94d 	bl	d458 <os_mbuf_append>
            if (rc) {
   241be:	2800      	cmp	r0, #0
   241c0:	d0ee      	beq.n	241a0 <ble_hs_adv_set_array_uuid32+0x3e>
                return rc;
   241c2:	4681      	mov	r9, r0
}
   241c4:	4648      	mov	r0, r9
   241c6:	b004      	add	sp, #16
   241c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000241cc <ble_hs_adv_set_array16>:

static int
ble_hs_adv_set_array16(uint8_t type, uint8_t num_elems, const uint16_t *elems,
                       uint8_t *dst, uint8_t *dst_len, uint8_t max_len,
                       struct os_mbuf *om)
{
   241cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   241d0:	b084      	sub	sp, #16
   241d2:	460e      	mov	r6, r1
   241d4:	4690      	mov	r8, r2
   241d6:	469a      	mov	sl, r3
   241d8:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   241da:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    uint16_t tmp;
    int rc;
    int i;

    rc = ble_hs_adv_set_hdr(type, num_elems * sizeof *elems, max_len, dst,
   241dc:	0049      	lsls	r1, r1, #1
   241de:	9501      	str	r5, [sp, #4]
   241e0:	9700      	str	r7, [sp, #0]
   241e2:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
   241e6:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
   241ea:	f7ff feff 	bl	23fec <ble_hs_adv_set_hdr>
                            dst_len, om);
    if (rc != 0) {
   241ee:	4681      	mov	r9, r0
   241f0:	b9d8      	cbnz	r0, 2422a <ble_hs_adv_set_array16+0x5e>
        return rc;
    }

    for (i = 0; i < num_elems; i++) {
   241f2:	4604      	mov	r4, r0
   241f4:	e009      	b.n	2420a <ble_hs_adv_set_array16+0x3e>
            rc = os_mbuf_append(om, &tmp, sizeof(tmp));
            if (rc) {
                return rc;
            }
        } else {
            put_le16(dst + *dst_len, elems[i]);
   241f6:	7838      	ldrb	r0, [r7, #0]
   241f8:	f838 1014 	ldrh.w	r1, [r8, r4, lsl #1]
   241fc:	4450      	add	r0, sl
   241fe:	f00a fd95 	bl	2ed2c <put_le16>
            *dst_len += sizeof elems[i];
   24202:	783b      	ldrb	r3, [r7, #0]
   24204:	3302      	adds	r3, #2
   24206:	703b      	strb	r3, [r7, #0]
    for (i = 0; i < num_elems; i++) {
   24208:	3401      	adds	r4, #1
   2420a:	42a6      	cmp	r6, r4
   2420c:	dd0d      	ble.n	2422a <ble_hs_adv_set_array16+0x5e>
        if (om) {
   2420e:	2d00      	cmp	r5, #0
   24210:	d0f1      	beq.n	241f6 <ble_hs_adv_set_array16+0x2a>
            tmp = htole16(elems[i]);
   24212:	f838 3014 	ldrh.w	r3, [r8, r4, lsl #1]
   24216:	a904      	add	r1, sp, #16
   24218:	f821 3d02 	strh.w	r3, [r1, #-2]!
            rc = os_mbuf_append(om, &tmp, sizeof(tmp));
   2421c:	2202      	movs	r2, #2
   2421e:	4628      	mov	r0, r5
   24220:	f7e9 f91a 	bl	d458 <os_mbuf_append>
            if (rc) {
   24224:	2800      	cmp	r0, #0
   24226:	d0ef      	beq.n	24208 <ble_hs_adv_set_array16+0x3c>
                return rc;
   24228:	4681      	mov	r9, r0
        }
    }

    return 0;
}
   2422a:	4648      	mov	r0, r9
   2422c:	b004      	add	sp, #16
   2422e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00024232 <adv_set_fields>:

static int
adv_set_fields(const struct ble_hs_adv_fields *adv_fields,
                      uint8_t *dst, uint8_t *dst_len, uint8_t max_len,
                      struct os_mbuf *om)
{
   24232:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24236:	b086      	sub	sp, #24
   24238:	4604      	mov	r4, r0
   2423a:	460d      	mov	r5, r1
   2423c:	4690      	mov	r8, r2
   2423e:	461e      	mov	r6, r3
   24240:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    uint8_t type;
    int8_t tx_pwr_lvl;
    uint8_t dst_len_local;
    int rc;

    dst_len_local = 0;
   24242:	2300      	movs	r3, #0
   24244:	f88d 3016 	strb.w	r3, [sp, #22]
     * 2. Explicitly specify the value (flags != 0).
     *
     * Note: The CSS prohibits advertising a flags value of 0, so this method
     * of specifying option 1 vs. 2 is sound.
     */
    if (adv_fields->flags != 0) {
   24248:	7803      	ldrb	r3, [r0, #0]
   2424a:	2b00      	cmp	r3, #0
   2424c:	f040 80be 	bne.w	243cc <adv_set_fields+0x19a>
            return rc;
        }
    }

    /*** 0x02,0x03 - 16-bit service class UUIDs. */
    if (adv_fields->uuids16 != NULL && adv_fields->num_uuids16) {
   24250:	6862      	ldr	r2, [r4, #4]
   24252:	b19a      	cbz	r2, 2427c <adv_set_fields+0x4a>
   24254:	7a21      	ldrb	r1, [r4, #8]
   24256:	b189      	cbz	r1, 2427c <adv_set_fields+0x4a>
        if (adv_fields->uuids16_is_complete) {
   24258:	7a63      	ldrb	r3, [r4, #9]
   2425a:	f013 0f01 	tst.w	r3, #1
   2425e:	f000 80c8 	beq.w	243f2 <adv_set_fields+0x1c0>
            type = BLE_HS_ADV_TYPE_COMP_UUIDS16;
   24262:	2003      	movs	r0, #3
        } else {
            type = BLE_HS_ADV_TYPE_INCOMP_UUIDS16;
        }

        rc = ble_hs_adv_set_array_uuid16(type, adv_fields->num_uuids16,
   24264:	9702      	str	r7, [sp, #8]
   24266:	9601      	str	r6, [sp, #4]
   24268:	f10d 0316 	add.w	r3, sp, #22
   2426c:	9300      	str	r3, [sp, #0]
   2426e:	462b      	mov	r3, r5
   24270:	f7ff ff17 	bl	240a2 <ble_hs_adv_set_array_uuid16>
                                         adv_fields->uuids16, dst, &dst_len_local,
                                         max_len, om);
        if (rc != 0) {
   24274:	4603      	mov	r3, r0
   24276:	2800      	cmp	r0, #0
   24278:	f040 80b7 	bne.w	243ea <adv_set_fields+0x1b8>
            return rc;
        }
    }

    /*** 0x04,0x05 - 32-bit service class UUIDs. */
    if (adv_fields->uuids32 != NULL && adv_fields->num_uuids32) {
   2427c:	68e2      	ldr	r2, [r4, #12]
   2427e:	b19a      	cbz	r2, 242a8 <adv_set_fields+0x76>
   24280:	7c21      	ldrb	r1, [r4, #16]
   24282:	b189      	cbz	r1, 242a8 <adv_set_fields+0x76>
        if (adv_fields->uuids32_is_complete) {
   24284:	7c63      	ldrb	r3, [r4, #17]
   24286:	f013 0f01 	tst.w	r3, #1
   2428a:	f000 80b4 	beq.w	243f6 <adv_set_fields+0x1c4>
            type = BLE_HS_ADV_TYPE_COMP_UUIDS32;
   2428e:	2005      	movs	r0, #5
        } else {
            type = BLE_HS_ADV_TYPE_INCOMP_UUIDS32;
        }

        rc = ble_hs_adv_set_array_uuid32(type, adv_fields->num_uuids32,
   24290:	9702      	str	r7, [sp, #8]
   24292:	9601      	str	r6, [sp, #4]
   24294:	f10d 0316 	add.w	r3, sp, #22
   24298:	9300      	str	r3, [sp, #0]
   2429a:	462b      	mov	r3, r5
   2429c:	f7ff ff61 	bl	24162 <ble_hs_adv_set_array_uuid32>
                                         adv_fields->uuids32, dst, &dst_len_local,
                                         max_len, om);
        if (rc != 0) {
   242a0:	4603      	mov	r3, r0
   242a2:	2800      	cmp	r0, #0
   242a4:	f040 80a1 	bne.w	243ea <adv_set_fields+0x1b8>
            return rc;
        }
    }

    /*** 0x06,0x07 - 128-bit service class UUIDs. */
    if (adv_fields->uuids128 != NULL && adv_fields->num_uuids128 > 0) {
   242a8:	6962      	ldr	r2, [r4, #20]
   242aa:	b19a      	cbz	r2, 242d4 <adv_set_fields+0xa2>
   242ac:	7e21      	ldrb	r1, [r4, #24]
   242ae:	b189      	cbz	r1, 242d4 <adv_set_fields+0xa2>
        if (adv_fields->uuids128_is_complete) {
   242b0:	7e63      	ldrb	r3, [r4, #25]
   242b2:	f013 0f01 	tst.w	r3, #1
   242b6:	f000 80a0 	beq.w	243fa <adv_set_fields+0x1c8>
            type = BLE_HS_ADV_TYPE_COMP_UUIDS128;
   242ba:	2007      	movs	r0, #7
        } else {
            type = BLE_HS_ADV_TYPE_INCOMP_UUIDS128;
        }

        rc = ble_hs_adv_set_array_uuid128(type, adv_fields->num_uuids128,
   242bc:	9702      	str	r7, [sp, #8]
   242be:	9601      	str	r6, [sp, #4]
   242c0:	f10d 0316 	add.w	r3, sp, #22
   242c4:	9300      	str	r3, [sp, #0]
   242c6:	462b      	mov	r3, r5
   242c8:	f7ff ff1a 	bl	24100 <ble_hs_adv_set_array_uuid128>
                                          adv_fields->uuids128, dst, &dst_len_local,
                                          max_len, om);
        if (rc != 0) {
   242cc:	4603      	mov	r3, r0
   242ce:	2800      	cmp	r0, #0
   242d0:	f040 808b 	bne.w	243ea <adv_set_fields+0x1b8>
            return rc;
        }
    }

    /*** 0x08,0x09 - Local name. */
    if (adv_fields->name != NULL && adv_fields->name_len > 0) {
   242d4:	69e2      	ldr	r2, [r4, #28]
   242d6:	b1a2      	cbz	r2, 24302 <adv_set_fields+0xd0>
   242d8:	f894 1020 	ldrb.w	r1, [r4, #32]
   242dc:	b189      	cbz	r1, 24302 <adv_set_fields+0xd0>
        if (adv_fields->name_is_complete) {
   242de:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   242e2:	f013 0f01 	tst.w	r3, #1
   242e6:	f000 808a 	beq.w	243fe <adv_set_fields+0x1cc>
            type = BLE_HS_ADV_TYPE_COMP_NAME;
   242ea:	2009      	movs	r0, #9
        } else {
            type = BLE_HS_ADV_TYPE_INCOMP_NAME;
        }

        rc = ble_hs_adv_set_flat_mbuf(type, adv_fields->name_len,
   242ec:	9702      	str	r7, [sp, #8]
   242ee:	9601      	str	r6, [sp, #4]
   242f0:	f10d 0316 	add.w	r3, sp, #22
   242f4:	9300      	str	r3, [sp, #0]
   242f6:	462b      	mov	r3, r5
   242f8:	f7ff feac 	bl	24054 <ble_hs_adv_set_flat_mbuf>
                                      adv_fields->name, dst, &dst_len_local, max_len,
                                      om);
        if (rc != 0) {
   242fc:	4603      	mov	r3, r0
   242fe:	2800      	cmp	r0, #0
   24300:	d173      	bne.n	243ea <adv_set_fields+0x1b8>
            return rc;
        }
    }

    /*** 0x0a - Tx power level. */
    if (adv_fields->tx_pwr_lvl_is_present) {
   24302:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   24306:	f013 0f01 	tst.w	r3, #1
   2430a:	d015      	beq.n	24338 <adv_set_fields+0x106>
        /* Read the power level from the controller if requested; otherwise use
         * the explicitly specified value.
         */
        if (adv_fields->tx_pwr_lvl == BLE_HS_ADV_TX_PWR_LVL_AUTO) {
   2430c:	f994 3022 	ldrsb.w	r3, [r4, #34]	; 0x22
   24310:	f113 0f80 	cmn.w	r3, #128	; 0x80
   24314:	d075      	beq.n	24402 <adv_set_fields+0x1d0>
            rc = ble_hs_hci_util_read_adv_tx_pwr(&tx_pwr_lvl);
            if (rc != 0) {
                return rc;
            }
        } else {
            tx_pwr_lvl = adv_fields->tx_pwr_lvl;
   24316:	f88d 3017 	strb.w	r3, [sp, #23]
        }

        rc = ble_hs_adv_set_flat_mbuf(BLE_HS_ADV_TYPE_TX_PWR_LVL, 1,
   2431a:	9702      	str	r7, [sp, #8]
   2431c:	9601      	str	r6, [sp, #4]
   2431e:	f10d 0316 	add.w	r3, sp, #22
   24322:	9300      	str	r3, [sp, #0]
   24324:	462b      	mov	r3, r5
   24326:	f10d 0217 	add.w	r2, sp, #23
   2432a:	2101      	movs	r1, #1
   2432c:	200a      	movs	r0, #10
   2432e:	f7ff fe91 	bl	24054 <ble_hs_adv_set_flat_mbuf>
                                      &tx_pwr_lvl, dst, &dst_len_local, max_len, om);
        if (rc != 0) {
   24332:	4603      	mov	r3, r0
   24334:	2800      	cmp	r0, #0
   24336:	d158      	bne.n	243ea <adv_set_fields+0x1b8>
            return rc;
        }
    }

    /*** 0x12 - Slave connection interval range. */
    if (adv_fields->slave_itvl_range != NULL) {
   24338:	6a62      	ldr	r2, [r4, #36]	; 0x24
   2433a:	b162      	cbz	r2, 24356 <adv_set_fields+0x124>
        rc = ble_hs_adv_set_flat_mbuf(BLE_HS_ADV_TYPE_SLAVE_ITVL_RANGE,
   2433c:	9702      	str	r7, [sp, #8]
   2433e:	9601      	str	r6, [sp, #4]
   24340:	f10d 0316 	add.w	r3, sp, #22
   24344:	9300      	str	r3, [sp, #0]
   24346:	462b      	mov	r3, r5
   24348:	2104      	movs	r1, #4
   2434a:	2012      	movs	r0, #18
   2434c:	f7ff fe82 	bl	24054 <ble_hs_adv_set_flat_mbuf>
                                      BLE_HS_ADV_SLAVE_ITVL_RANGE_LEN,
                                      adv_fields->slave_itvl_range, dst,
                                      &dst_len_local, max_len, om);
        if (rc != 0) {
   24350:	4603      	mov	r3, r0
   24352:	2800      	cmp	r0, #0
   24354:	d149      	bne.n	243ea <adv_set_fields+0x1b8>
            return rc;
        }
    }

    /*** 0x16 - Service data - 16-bit UUID. */
    if (adv_fields->svc_data_uuid16 != NULL && adv_fields->svc_data_uuid16_len) {
   24356:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   24358:	b11a      	cbz	r2, 24362 <adv_set_fields+0x130>
   2435a:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
   2435e:	2900      	cmp	r1, #0
   24360:	d157      	bne.n	24412 <adv_set_fields+0x1e0>
            return rc;
        }
    }

    /*** 0x17 - Public target address. */
    if (adv_fields->public_tgt_addr != NULL &&
   24362:	6b22      	ldr	r2, [r4, #48]	; 0x30
   24364:	b11a      	cbz	r2, 2436e <adv_set_fields+0x13c>
        adv_fields->num_public_tgt_addrs != 0) {
   24366:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    if (adv_fields->public_tgt_addr != NULL &&
   2436a:	2b00      	cmp	r3, #0
   2436c:	d15e      	bne.n	2442c <adv_set_fields+0x1fa>
            return rc;
        }
    }

    /*** 0x19 - Appearance. */
    if (adv_fields->appearance_is_present) {
   2436e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   24372:	f013 0f01 	tst.w	r3, #1
   24376:	d169      	bne.n	2444c <adv_set_fields+0x21a>
            return rc;
        }
    }

    /*** 0x1a - Advertising interval. */
    if (adv_fields->adv_itvl_is_present) {
   24378:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   2437c:	f013 0f01 	tst.w	r3, #1
   24380:	d174      	bne.n	2446c <adv_set_fields+0x23a>
            return rc;
        }
    }

    /*** 0x20 - Service data - 32-bit UUID. */
    if (adv_fields->svc_data_uuid32 != NULL && adv_fields->svc_data_uuid32_len) {
   24382:	6c22      	ldr	r2, [r4, #64]	; 0x40
   24384:	b11a      	cbz	r2, 2438e <adv_set_fields+0x15c>
   24386:	f894 1044 	ldrb.w	r1, [r4, #68]	; 0x44
   2438a:	2900      	cmp	r1, #0
   2438c:	d17f      	bne.n	2448e <adv_set_fields+0x25c>
            return rc;
        }
    }

    /*** 0x21 - Service data - 128-bit UUID. */
    if (adv_fields->svc_data_uuid128 != NULL && adv_fields->svc_data_uuid128_len) {
   2438e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   24390:	b122      	cbz	r2, 2439c <adv_set_fields+0x16a>
   24392:	f894 104c 	ldrb.w	r1, [r4, #76]	; 0x4c
   24396:	2900      	cmp	r1, #0
   24398:	f040 8087 	bne.w	244aa <adv_set_fields+0x278>
            return rc;
        }
    }

    /*** 0x24 - URI. */
    if (adv_fields->uri != NULL && adv_fields->uri_len) {
   2439c:	6d22      	ldr	r2, [r4, #80]	; 0x50
   2439e:	b122      	cbz	r2, 243aa <adv_set_fields+0x178>
   243a0:	f894 1054 	ldrb.w	r1, [r4, #84]	; 0x54
   243a4:	2900      	cmp	r1, #0
   243a6:	f040 808e 	bne.w	244c6 <adv_set_fields+0x294>
            return rc;
        }
    }

    /*** 0xff - Manufacturer specific data. */
    if ((adv_fields->mfg_data != NULL) && (adv_fields->mfg_data_len >= 2)) {
   243aa:	6da2      	ldr	r2, [r4, #88]	; 0x58
   243ac:	b122      	cbz	r2, 243b8 <adv_set_fields+0x186>
   243ae:	f894 105c 	ldrb.w	r1, [r4, #92]	; 0x5c
   243b2:	2901      	cmp	r1, #1
   243b4:	f200 8095 	bhi.w	244e2 <adv_set_fields+0x2b0>
        if (rc != 0) {
            return rc;
        }
    }

    if (dst_len) {
   243b8:	f1b8 0f00 	cmp.w	r8, #0
   243bc:	f000 809f 	beq.w	244fe <adv_set_fields+0x2cc>
        *dst_len = dst_len_local;
   243c0:	f89d 3016 	ldrb.w	r3, [sp, #22]
   243c4:	f888 3000 	strb.w	r3, [r8]
    }

    return 0;
   243c8:	2300      	movs	r3, #0
   243ca:	e00e      	b.n	243ea <adv_set_fields+0x1b8>
        rc = ble_hs_adv_set_flat_mbuf(BLE_HS_ADV_TYPE_FLAGS, 1,
   243cc:	9702      	str	r7, [sp, #8]
   243ce:	9601      	str	r6, [sp, #4]
   243d0:	f10d 0316 	add.w	r3, sp, #22
   243d4:	9300      	str	r3, [sp, #0]
   243d6:	460b      	mov	r3, r1
   243d8:	4602      	mov	r2, r0
   243da:	2101      	movs	r1, #1
   243dc:	4608      	mov	r0, r1
   243de:	f7ff fe39 	bl	24054 <ble_hs_adv_set_flat_mbuf>
        if (rc != 0) {
   243e2:	4603      	mov	r3, r0
   243e4:	2800      	cmp	r0, #0
   243e6:	f43f af33 	beq.w	24250 <adv_set_fields+0x1e>
}
   243ea:	4618      	mov	r0, r3
   243ec:	b006      	add	sp, #24
   243ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            type = BLE_HS_ADV_TYPE_INCOMP_UUIDS16;
   243f2:	2002      	movs	r0, #2
   243f4:	e736      	b.n	24264 <adv_set_fields+0x32>
            type = BLE_HS_ADV_TYPE_INCOMP_UUIDS32;
   243f6:	2004      	movs	r0, #4
   243f8:	e74a      	b.n	24290 <adv_set_fields+0x5e>
            type = BLE_HS_ADV_TYPE_INCOMP_UUIDS128;
   243fa:	2006      	movs	r0, #6
   243fc:	e75e      	b.n	242bc <adv_set_fields+0x8a>
            type = BLE_HS_ADV_TYPE_INCOMP_NAME;
   243fe:	2008      	movs	r0, #8
   24400:	e774      	b.n	242ec <adv_set_fields+0xba>
            rc = ble_hs_hci_util_read_adv_tx_pwr(&tx_pwr_lvl);
   24402:	f10d 0017 	add.w	r0, sp, #23
   24406:	f000 ff75 	bl	252f4 <ble_hs_hci_util_read_adv_tx_pwr>
            if (rc != 0) {
   2440a:	4603      	mov	r3, r0
   2440c:	2800      	cmp	r0, #0
   2440e:	d084      	beq.n	2431a <adv_set_fields+0xe8>
   24410:	e7eb      	b.n	243ea <adv_set_fields+0x1b8>
        rc = ble_hs_adv_set_flat_mbuf(BLE_HS_ADV_TYPE_SVC_DATA_UUID16,
   24412:	9702      	str	r7, [sp, #8]
   24414:	9601      	str	r6, [sp, #4]
   24416:	f10d 0316 	add.w	r3, sp, #22
   2441a:	9300      	str	r3, [sp, #0]
   2441c:	462b      	mov	r3, r5
   2441e:	2016      	movs	r0, #22
   24420:	f7ff fe18 	bl	24054 <ble_hs_adv_set_flat_mbuf>
        if (rc != 0) {
   24424:	4603      	mov	r3, r0
   24426:	2800      	cmp	r0, #0
   24428:	d09b      	beq.n	24362 <adv_set_fields+0x130>
   2442a:	e7de      	b.n	243ea <adv_set_fields+0x1b8>
        rc = ble_hs_adv_set_flat_mbuf(BLE_HS_ADV_TYPE_PUBLIC_TGT_ADDR,
   2442c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   24430:	0059      	lsls	r1, r3, #1
   24432:	9702      	str	r7, [sp, #8]
   24434:	9601      	str	r6, [sp, #4]
   24436:	f10d 0316 	add.w	r3, sp, #22
   2443a:	9300      	str	r3, [sp, #0]
   2443c:	462b      	mov	r3, r5
   2443e:	2017      	movs	r0, #23
   24440:	f7ff fe08 	bl	24054 <ble_hs_adv_set_flat_mbuf>
        if (rc != 0) {
   24444:	4603      	mov	r3, r0
   24446:	2800      	cmp	r0, #0
   24448:	d091      	beq.n	2436e <adv_set_fields+0x13c>
   2444a:	e7ce      	b.n	243ea <adv_set_fields+0x1b8>
        rc = ble_hs_adv_set_flat_mbuf(BLE_HS_ADV_TYPE_APPEARANCE,
   2444c:	9702      	str	r7, [sp, #8]
   2444e:	9601      	str	r6, [sp, #4]
   24450:	f10d 0316 	add.w	r3, sp, #22
   24454:	9300      	str	r3, [sp, #0]
   24456:	462b      	mov	r3, r5
   24458:	f104 0236 	add.w	r2, r4, #54	; 0x36
   2445c:	2102      	movs	r1, #2
   2445e:	2019      	movs	r0, #25
   24460:	f7ff fdf8 	bl	24054 <ble_hs_adv_set_flat_mbuf>
        if (rc != 0) {
   24464:	4603      	mov	r3, r0
   24466:	2800      	cmp	r0, #0
   24468:	d086      	beq.n	24378 <adv_set_fields+0x146>
   2446a:	e7be      	b.n	243ea <adv_set_fields+0x1b8>
        rc = ble_hs_adv_set_array16(BLE_HS_ADV_TYPE_ADV_ITVL, 1,
   2446c:	9702      	str	r7, [sp, #8]
   2446e:	9601      	str	r6, [sp, #4]
   24470:	f10d 0316 	add.w	r3, sp, #22
   24474:	9300      	str	r3, [sp, #0]
   24476:	462b      	mov	r3, r5
   24478:	f104 023a 	add.w	r2, r4, #58	; 0x3a
   2447c:	2101      	movs	r1, #1
   2447e:	201a      	movs	r0, #26
   24480:	f7ff fea4 	bl	241cc <ble_hs_adv_set_array16>
        if (rc != 0) {
   24484:	4603      	mov	r3, r0
   24486:	2800      	cmp	r0, #0
   24488:	f43f af7b 	beq.w	24382 <adv_set_fields+0x150>
   2448c:	e7ad      	b.n	243ea <adv_set_fields+0x1b8>
        rc = ble_hs_adv_set_flat_mbuf(BLE_HS_ADV_TYPE_SVC_DATA_UUID32,
   2448e:	9702      	str	r7, [sp, #8]
   24490:	9601      	str	r6, [sp, #4]
   24492:	f10d 0316 	add.w	r3, sp, #22
   24496:	9300      	str	r3, [sp, #0]
   24498:	462b      	mov	r3, r5
   2449a:	2020      	movs	r0, #32
   2449c:	f7ff fdda 	bl	24054 <ble_hs_adv_set_flat_mbuf>
        if (rc != 0) {
   244a0:	4603      	mov	r3, r0
   244a2:	2800      	cmp	r0, #0
   244a4:	f43f af73 	beq.w	2438e <adv_set_fields+0x15c>
   244a8:	e79f      	b.n	243ea <adv_set_fields+0x1b8>
        rc = ble_hs_adv_set_flat_mbuf(BLE_HS_ADV_TYPE_SVC_DATA_UUID128,
   244aa:	9702      	str	r7, [sp, #8]
   244ac:	9601      	str	r6, [sp, #4]
   244ae:	f10d 0316 	add.w	r3, sp, #22
   244b2:	9300      	str	r3, [sp, #0]
   244b4:	462b      	mov	r3, r5
   244b6:	2021      	movs	r0, #33	; 0x21
   244b8:	f7ff fdcc 	bl	24054 <ble_hs_adv_set_flat_mbuf>
        if (rc != 0) {
   244bc:	4603      	mov	r3, r0
   244be:	2800      	cmp	r0, #0
   244c0:	f43f af6c 	beq.w	2439c <adv_set_fields+0x16a>
   244c4:	e791      	b.n	243ea <adv_set_fields+0x1b8>
        rc = ble_hs_adv_set_flat_mbuf(BLE_HS_ADV_TYPE_URI, adv_fields->uri_len,
   244c6:	9702      	str	r7, [sp, #8]
   244c8:	9601      	str	r6, [sp, #4]
   244ca:	f10d 0316 	add.w	r3, sp, #22
   244ce:	9300      	str	r3, [sp, #0]
   244d0:	462b      	mov	r3, r5
   244d2:	2024      	movs	r0, #36	; 0x24
   244d4:	f7ff fdbe 	bl	24054 <ble_hs_adv_set_flat_mbuf>
        if (rc != 0) {
   244d8:	4603      	mov	r3, r0
   244da:	2800      	cmp	r0, #0
   244dc:	f43f af65 	beq.w	243aa <adv_set_fields+0x178>
   244e0:	e783      	b.n	243ea <adv_set_fields+0x1b8>
        rc = ble_hs_adv_set_flat_mbuf(BLE_HS_ADV_TYPE_MFG_DATA,
   244e2:	9702      	str	r7, [sp, #8]
   244e4:	9601      	str	r6, [sp, #4]
   244e6:	f10d 0316 	add.w	r3, sp, #22
   244ea:	9300      	str	r3, [sp, #0]
   244ec:	462b      	mov	r3, r5
   244ee:	20ff      	movs	r0, #255	; 0xff
   244f0:	f7ff fdb0 	bl	24054 <ble_hs_adv_set_flat_mbuf>
        if (rc != 0) {
   244f4:	4603      	mov	r3, r0
   244f6:	2800      	cmp	r0, #0
   244f8:	f43f af5e 	beq.w	243b8 <adv_set_fields+0x186>
   244fc:	e775      	b.n	243ea <adv_set_fields+0x1b8>
    return 0;
   244fe:	2300      	movs	r3, #0
   24500:	e773      	b.n	243ea <adv_set_fields+0x1b8>

00024502 <ble_hs_adv_set_fields>:
 * @return                      0 on success; nonzero on failure.
 */
int
ble_hs_adv_set_fields(const struct ble_hs_adv_fields *adv_fields,
                      uint8_t *dst, uint8_t *dst_len, uint8_t max_len)
{
   24502:	b510      	push	{r4, lr}
   24504:	b082      	sub	sp, #8
#if !NIMBLE_BLE_ADVERTISE
    return BLE_HS_ENOTSUP;
#endif

    return adv_set_fields(adv_fields, dst, dst_len, max_len, NULL);
   24506:	2400      	movs	r4, #0
   24508:	9400      	str	r4, [sp, #0]
   2450a:	f7ff fe92 	bl	24232 <adv_set_fields>
}
   2450e:	b002      	add	sp, #8
   24510:	bd10      	pop	{r4, pc}

00024512 <ble_hs_atomic_conn_delete>:

#include "ble_hs_priv.h"

int
ble_hs_atomic_conn_delete(uint16_t conn_handle)
{
   24512:	b510      	push	{r4, lr}
   24514:	4604      	mov	r4, r0
    struct ble_hs_conn *conn;

    ble_hs_lock();
   24516:	f7ff fab3 	bl	23a80 <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
   2451a:	4620      	mov	r0, r4
   2451c:	f000 f900 	bl	24720 <ble_hs_conn_find>
    if (conn != NULL) {
   24520:	4604      	mov	r4, r0
   24522:	b120      	cbz	r0, 2452e <ble_hs_atomic_conn_delete+0x1c>
        ble_hs_conn_remove(conn);
   24524:	f000 f8ec 	bl	24700 <ble_hs_conn_remove>
#if MYNEWT_VAL(BLE_PERIODIC_ADV_SYNC_TRANSFER)
        if (conn->psync) {
            ble_hs_periodic_sync_free(conn->psync);
        }
#endif
        ble_hs_conn_free(conn);
   24528:	4620      	mov	r0, r4
   2452a:	f000 f87f 	bl	2462c <ble_hs_conn_free>

    }
    ble_hs_unlock();
   2452e:	f7ff faab 	bl	23a88 <ble_hs_unlock>

    return conn != NULL ? 0 : BLE_HS_ENOTCONN;
   24532:	b10c      	cbz	r4, 24538 <ble_hs_atomic_conn_delete+0x26>
   24534:	2000      	movs	r0, #0
}
   24536:	bd10      	pop	{r4, pc}
    return conn != NULL ? 0 : BLE_HS_ENOTCONN;
   24538:	2007      	movs	r0, #7
   2453a:	e7fc      	b.n	24536 <ble_hs_atomic_conn_delete+0x24>

0002453c <ble_hs_atomic_conn_flags>:
    ble_hs_unlock();
}

int
ble_hs_atomic_conn_flags(uint16_t conn_handle, ble_hs_conn_flags_t *out_flags)
{
   2453c:	b538      	push	{r3, r4, r5, lr}
   2453e:	4605      	mov	r5, r0
   24540:	460c      	mov	r4, r1
    struct ble_hs_conn *conn;
    int rc;

    ble_hs_lock();
   24542:	f7ff fa9d 	bl	23a80 <ble_hs_lock>

    conn = ble_hs_conn_find(conn_handle);
   24546:	4628      	mov	r0, r5
   24548:	f000 f8ea 	bl	24720 <ble_hs_conn_find>
    if (conn == NULL) {
   2454c:	b140      	cbz	r0, 24560 <ble_hs_atomic_conn_flags+0x24>
        rc = BLE_HS_ENOTCONN;
    } else {
        rc = 0;
        if (out_flags != NULL) {
   2454e:	b14c      	cbz	r4, 24564 <ble_hs_atomic_conn_flags+0x28>
            *out_flags = conn->bhc_flags;
   24550:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   24554:	7023      	strb	r3, [r4, #0]
        rc = 0;
   24556:	2400      	movs	r4, #0
        }
    }

    ble_hs_unlock();
   24558:	f7ff fa96 	bl	23a88 <ble_hs_unlock>

    return rc;
}
   2455c:	4620      	mov	r0, r4
   2455e:	bd38      	pop	{r3, r4, r5, pc}
        rc = BLE_HS_ENOTCONN;
   24560:	2407      	movs	r4, #7
   24562:	e7f9      	b.n	24558 <ble_hs_atomic_conn_flags+0x1c>
        rc = 0;
   24564:	2400      	movs	r4, #0
   24566:	e7f7      	b.n	24558 <ble_hs_atomic_conn_flags+0x1c>

00024568 <ble_hs_atomic_first_conn_handle>:
    return rc;
}

uint16_t
ble_hs_atomic_first_conn_handle(void)
{
   24568:	b510      	push	{r4, lr}
    const struct ble_hs_conn *conn;
    uint16_t conn_handle;

    ble_hs_lock();
   2456a:	f7ff fa89 	bl	23a80 <ble_hs_lock>

    conn = ble_hs_conn_first();
   2456e:	f000 f937 	bl	247e0 <ble_hs_conn_first>
    if (conn != NULL) {
   24572:	b120      	cbz	r0, 2457e <ble_hs_atomic_first_conn_handle+0x16>
        conn_handle = conn->bhc_handle;
   24574:	8884      	ldrh	r4, [r0, #4]
    } else {
        conn_handle = BLE_HS_CONN_HANDLE_NONE;
    }

    ble_hs_unlock();
   24576:	f7ff fa87 	bl	23a88 <ble_hs_unlock>

    return conn_handle;
}
   2457a:	4620      	mov	r0, r4
   2457c:	bd10      	pop	{r4, pc}
        conn_handle = BLE_HS_CONN_HANDLE_NONE;
   2457e:	f64f 74ff 	movw	r4, #65535	; 0xffff
   24582:	e7f8      	b.n	24576 <ble_hs_atomic_first_conn_handle+0xe>

00024584 <ble_hs_conn_can_alloc>:

static const uint8_t ble_hs_conn_null_addr[6];

int
ble_hs_conn_can_alloc(void)
{
   24584:	b508      	push	{r3, lr}
#if !NIMBLE_BLE_CONNECT
    return 0;
#endif

    return ble_hs_conn_pool.mp_num_free >= 1 &&
   24586:	4b09      	ldr	r3, [pc, #36]	; (245ac <ble_hs_conn_can_alloc+0x28>)
   24588:	88db      	ldrh	r3, [r3, #6]
           ble_l2cap_chan_pool.mp_num_free >= BLE_HS_CONN_MIN_CHANS &&
   2458a:	b15b      	cbz	r3, 245a4 <ble_hs_conn_can_alloc+0x20>
   2458c:	4b08      	ldr	r3, [pc, #32]	; (245b0 <ble_hs_conn_can_alloc+0x2c>)
   2458e:	88db      	ldrh	r3, [r3, #6]
    return ble_hs_conn_pool.mp_num_free >= 1 &&
   24590:	2b02      	cmp	r3, #2
   24592:	d801      	bhi.n	24598 <ble_hs_conn_can_alloc+0x14>
           ble_l2cap_chan_pool.mp_num_free >= BLE_HS_CONN_MIN_CHANS &&
   24594:	2300      	movs	r3, #0
   24596:	e006      	b.n	245a6 <ble_hs_conn_can_alloc+0x22>
           ble_gatts_conn_can_alloc();
   24598:	f7fe ffde 	bl	23558 <ble_gatts_conn_can_alloc>
           ble_l2cap_chan_pool.mp_num_free >= BLE_HS_CONN_MIN_CHANS &&
   2459c:	4603      	mov	r3, r0
   2459e:	b110      	cbz	r0, 245a6 <ble_hs_conn_can_alloc+0x22>
   245a0:	2301      	movs	r3, #1
   245a2:	e000      	b.n	245a6 <ble_hs_conn_can_alloc+0x22>
   245a4:	2300      	movs	r3, #0
}
   245a6:	4618      	mov	r0, r3
   245a8:	bd08      	pop	{r3, pc}
   245aa:	bf00      	nop
   245ac:	200029d0 	.word	0x200029d0
   245b0:	20004120 	.word	0x20004120

000245b4 <ble_hs_conn_chan_find_by_scid>:
    return NULL;
#endif

    struct ble_l2cap_chan *chan;

    SLIST_FOREACH(chan, &conn->bhc_channels, next) {
   245b4:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   245b6:	b128      	cbz	r0, 245c4 <ble_hs_conn_chan_find_by_scid+0x10>
        if (chan->scid == cid) {
   245b8:	8903      	ldrh	r3, [r0, #8]
   245ba:	428b      	cmp	r3, r1
   245bc:	d004      	beq.n	245c8 <ble_hs_conn_chan_find_by_scid+0x14>
            return chan;
        }
        if (chan->scid > cid) {
   245be:	d802      	bhi.n	245c6 <ble_hs_conn_chan_find_by_scid+0x12>
    SLIST_FOREACH(chan, &conn->bhc_channels, next) {
   245c0:	6800      	ldr	r0, [r0, #0]
   245c2:	e7f8      	b.n	245b6 <ble_hs_conn_chan_find_by_scid+0x2>
   245c4:	4770      	bx	lr
            return NULL;
   245c6:	2000      	movs	r0, #0
        }
    }

    return NULL;
}
   245c8:	4770      	bx	lr

000245ca <ble_hs_conn_chan_insert>:
    return false;
}

int
ble_hs_conn_chan_insert(struct ble_hs_conn *conn, struct ble_l2cap_chan *chan)
{
   245ca:	b470      	push	{r4, r5, r6}

    struct ble_l2cap_chan *prev;
    struct ble_l2cap_chan *cur;

    prev = NULL;
    SLIST_FOREACH(cur, &conn->bhc_channels, next) {
   245cc:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
   245ce:	4633      	mov	r3, r6
    prev = NULL;
   245d0:	2500      	movs	r5, #0
    SLIST_FOREACH(cur, &conn->bhc_channels, next) {
   245d2:	b13b      	cbz	r3, 245e4 <ble_hs_conn_chan_insert+0x1a>
        if (cur->scid == chan->scid) {
   245d4:	891c      	ldrh	r4, [r3, #8]
   245d6:	890a      	ldrh	r2, [r1, #8]
   245d8:	4294      	cmp	r4, r2
   245da:	d00e      	beq.n	245fa <ble_hs_conn_chan_insert+0x30>
            return BLE_HS_EALREADY;
        }
        if (cur->scid > chan->scid) {
   245dc:	d802      	bhi.n	245e4 <ble_hs_conn_chan_insert+0x1a>
            break;
        }

        prev = cur;
   245de:	461d      	mov	r5, r3
    SLIST_FOREACH(cur, &conn->bhc_channels, next) {
   245e0:	681b      	ldr	r3, [r3, #0]
   245e2:	e7f6      	b.n	245d2 <ble_hs_conn_chan_insert+0x8>
    }

    if (prev == NULL) {
   245e4:	b12d      	cbz	r5, 245f2 <ble_hs_conn_chan_insert+0x28>
        SLIST_INSERT_HEAD(&conn->bhc_channels, chan, next);
    } else {
        SLIST_INSERT_AFTER(prev, chan, next);
   245e6:	682b      	ldr	r3, [r5, #0]
   245e8:	600b      	str	r3, [r1, #0]
   245ea:	6029      	str	r1, [r5, #0]
    }

    return 0;
   245ec:	2000      	movs	r0, #0
}
   245ee:	bc70      	pop	{r4, r5, r6}
   245f0:	4770      	bx	lr
        SLIST_INSERT_HEAD(&conn->bhc_channels, chan, next);
   245f2:	600e      	str	r6, [r1, #0]
   245f4:	62c1      	str	r1, [r0, #44]	; 0x2c
    return 0;
   245f6:	2000      	movs	r0, #0
   245f8:	e7f9      	b.n	245ee <ble_hs_conn_chan_insert+0x24>
            return BLE_HS_EALREADY;
   245fa:	2002      	movs	r0, #2
   245fc:	e7f7      	b.n	245ee <ble_hs_conn_chan_insert+0x24>

000245fe <ble_hs_conn_delete_chan>:
    return NULL;
}

void
ble_hs_conn_delete_chan(struct ble_hs_conn *conn, struct ble_l2cap_chan *chan)
{
   245fe:	b508      	push	{r3, lr}
    if (conn->bhc_rx_chan == chan) {
   24600:	6b03      	ldr	r3, [r0, #48]	; 0x30
   24602:	428b      	cmp	r3, r1
   24604:	d005      	beq.n	24612 <ble_hs_conn_delete_chan+0x14>
        conn->bhc_rx_chan = NULL;
    }

    SLIST_REMOVE(&conn->bhc_channels, chan, ble_l2cap_chan, next);
   24606:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   24608:	428a      	cmp	r2, r1
   2460a:	d106      	bne.n	2461a <ble_hs_conn_delete_chan+0x1c>
   2460c:	6813      	ldr	r3, [r2, #0]
   2460e:	62c3      	str	r3, [r0, #44]	; 0x2c
   24610:	e008      	b.n	24624 <ble_hs_conn_delete_chan+0x26>
        conn->bhc_rx_chan = NULL;
   24612:	2300      	movs	r3, #0
   24614:	6303      	str	r3, [r0, #48]	; 0x30
   24616:	e7f6      	b.n	24606 <ble_hs_conn_delete_chan+0x8>
    SLIST_REMOVE(&conn->bhc_channels, chan, ble_l2cap_chan, next);
   24618:	461a      	mov	r2, r3
   2461a:	6813      	ldr	r3, [r2, #0]
   2461c:	428b      	cmp	r3, r1
   2461e:	d1fb      	bne.n	24618 <ble_hs_conn_delete_chan+0x1a>
   24620:	681b      	ldr	r3, [r3, #0]
   24622:	6013      	str	r3, [r2, #0]
    ble_l2cap_chan_free(conn, chan);
   24624:	f001 fb84 	bl	25d30 <ble_l2cap_chan_free>
}
   24628:	bd08      	pop	{r3, pc}
	...

0002462c <ble_hs_conn_free>:

    struct ble_l2cap_chan *chan;
    struct os_mbuf_pkthdr *omp;
    int rc;

    if (conn == NULL) {
   2462c:	b310      	cbz	r0, 24674 <ble_hs_conn_free+0x48>
{
   2462e:	b510      	push	{r4, lr}
   24630:	4604      	mov	r4, r0
        return;
    }

    ble_att_svr_prep_clear(&conn->bhc_att_svr.basc_prep_list);
   24632:	3044      	adds	r0, #68	; 0x44
   24634:	f7fb fc90 	bl	1ff58 <ble_att_svr_prep_clear>

    while ((chan = SLIST_FIRST(&conn->bhc_channels)) != NULL) {
   24638:	e002      	b.n	24640 <ble_hs_conn_free+0x14>
        ble_hs_conn_delete_chan(conn, chan);
   2463a:	4620      	mov	r0, r4
   2463c:	f7ff ffdf 	bl	245fe <ble_hs_conn_delete_chan>
    while ((chan = SLIST_FIRST(&conn->bhc_channels)) != NULL) {
   24640:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   24642:	2900      	cmp	r1, #0
   24644:	d1f9      	bne.n	2463a <ble_hs_conn_free+0xe>
   24646:	e002      	b.n	2464e <ble_hs_conn_free+0x22>
    }

    while ((omp = STAILQ_FIRST(&conn->bhc_tx_q)) != NULL) {
        STAILQ_REMOVE_HEAD(&conn->bhc_tx_q, omp_next);
        os_mbuf_free_chain(OS_MBUF_PKTHDR_TO_MBUF(omp));
   24648:	3810      	subs	r0, #16
   2464a:	f7e8 fee9 	bl	d420 <os_mbuf_free_chain>
    while ((omp = STAILQ_FIRST(&conn->bhc_tx_q)) != NULL) {
   2464e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   24650:	b138      	cbz	r0, 24662 <ble_hs_conn_free+0x36>
        STAILQ_REMOVE_HEAD(&conn->bhc_tx_q, omp_next);
   24652:	6843      	ldr	r3, [r0, #4]
   24654:	63e3      	str	r3, [r4, #60]	; 0x3c
   24656:	2b00      	cmp	r3, #0
   24658:	d1f6      	bne.n	24648 <ble_hs_conn_free+0x1c>
   2465a:	f104 033c 	add.w	r3, r4, #60	; 0x3c
   2465e:	6423      	str	r3, [r4, #64]	; 0x40
   24660:	e7f2      	b.n	24648 <ble_hs_conn_free+0x1c>
    }

#if MYNEWT_VAL(BLE_HS_DEBUG)
    memset(conn, 0xff, sizeof *conn);
#endif
    rc = os_memblock_put(&ble_hs_conn_pool, conn);
   24662:	4621      	mov	r1, r4
   24664:	4804      	ldr	r0, [pc, #16]	; (24678 <ble_hs_conn_free+0x4c>)
   24666:	f7e9 faf9 	bl	dc5c <os_memblock_put>
    BLE_HS_DBG_ASSERT_EVAL(rc == 0);

    STATS_INC(ble_hs_stats, conn_delete);
   2466a:	4a04      	ldr	r2, [pc, #16]	; (2467c <ble_hs_conn_free+0x50>)
   2466c:	6913      	ldr	r3, [r2, #16]
   2466e:	3301      	adds	r3, #1
   24670:	6113      	str	r3, [r2, #16]
}
   24672:	bd10      	pop	{r4, pc}
   24674:	4770      	bx	lr
   24676:	bf00      	nop
   24678:	200029d0 	.word	0x200029d0
   2467c:	200040b8 	.word	0x200040b8

00024680 <ble_hs_conn_alloc>:
{
   24680:	b538      	push	{r3, r4, r5, lr}
   24682:	4605      	mov	r5, r0
    conn = os_memblock_get(&ble_hs_conn_pool);
   24684:	481c      	ldr	r0, [pc, #112]	; (246f8 <ble_hs_conn_alloc+0x78>)
   24686:	f7e9 fac1 	bl	dc0c <os_memblock_get>
    if (conn == NULL) {
   2468a:	4604      	mov	r4, r0
   2468c:	b370      	cbz	r0, 246ec <ble_hs_conn_alloc+0x6c>
    memset(conn, 0, sizeof *conn);
   2468e:	2264      	movs	r2, #100	; 0x64
   24690:	2100      	movs	r1, #0
   24692:	f7ea f9ad 	bl	e9f0 <memset>
    conn->bhc_handle = conn_handle;
   24696:	80a5      	strh	r5, [r4, #4]
    chan = ble_att_create_chan(conn_handle);
   24698:	4628      	mov	r0, r5
   2469a:	f7fa f973 	bl	1e984 <ble_att_create_chan>
    if (chan == NULL) {
   2469e:	4601      	mov	r1, r0
   246a0:	b320      	cbz	r0, 246ec <ble_hs_conn_alloc+0x6c>
    rc = ble_hs_conn_chan_insert(conn, chan);
   246a2:	4620      	mov	r0, r4
   246a4:	f7ff ff91 	bl	245ca <ble_hs_conn_chan_insert>
    if (rc != 0) {
   246a8:	bb00      	cbnz	r0, 246ec <ble_hs_conn_alloc+0x6c>
    chan = ble_l2cap_sig_create_chan(conn_handle);
   246aa:	4628      	mov	r0, r5
   246ac:	f001 fe60 	bl	26370 <ble_l2cap_sig_create_chan>
    if (chan == NULL) {
   246b0:	4601      	mov	r1, r0
   246b2:	b1d8      	cbz	r0, 246ec <ble_hs_conn_alloc+0x6c>
    rc = ble_hs_conn_chan_insert(conn, chan);
   246b4:	4620      	mov	r0, r4
   246b6:	f7ff ff88 	bl	245ca <ble_hs_conn_chan_insert>
    if (rc != 0) {
   246ba:	b9b8      	cbnz	r0, 246ec <ble_hs_conn_alloc+0x6c>
    chan = ble_sm_create_chan(conn_handle);
   246bc:	4628      	mov	r0, r5
   246be:	f003 fbf5 	bl	27eac <ble_sm_create_chan>
    if (chan == NULL) {
   246c2:	4601      	mov	r1, r0
   246c4:	b190      	cbz	r0, 246ec <ble_hs_conn_alloc+0x6c>
    rc = ble_hs_conn_chan_insert(conn, chan);
   246c6:	4620      	mov	r0, r4
   246c8:	f7ff ff7f 	bl	245ca <ble_hs_conn_chan_insert>
    if (rc != 0) {
   246cc:	b970      	cbnz	r0, 246ec <ble_hs_conn_alloc+0x6c>
    rc = ble_gatts_conn_init(&conn->bhc_gatt_svr);
   246ce:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   246d2:	f7fe ff51 	bl	23578 <ble_gatts_conn_init>
    if (rc != 0) {
   246d6:	b948      	cbnz	r0, 246ec <ble_hs_conn_alloc+0x6c>
    STAILQ_INIT(&conn->bhc_tx_q);
   246d8:	4623      	mov	r3, r4
   246da:	2200      	movs	r2, #0
   246dc:	f843 2f3c 	str.w	r2, [r3, #60]!
   246e0:	6423      	str	r3, [r4, #64]	; 0x40
    STATS_INC(ble_hs_stats, conn_create);
   246e2:	4a06      	ldr	r2, [pc, #24]	; (246fc <ble_hs_conn_alloc+0x7c>)
   246e4:	68d3      	ldr	r3, [r2, #12]
   246e6:	3301      	adds	r3, #1
   246e8:	60d3      	str	r3, [r2, #12]
    return conn;
   246ea:	e003      	b.n	246f4 <ble_hs_conn_alloc+0x74>
    ble_hs_conn_free(conn);
   246ec:	4620      	mov	r0, r4
   246ee:	f7ff ff9d 	bl	2462c <ble_hs_conn_free>
    return NULL;
   246f2:	2400      	movs	r4, #0
}
   246f4:	4620      	mov	r0, r4
   246f6:	bd38      	pop	{r3, r4, r5, pc}
   246f8:	200029d0 	.word	0x200029d0
   246fc:	200040b8 	.word	0x200040b8

00024700 <ble_hs_conn_remove>:
    return;
#endif

    BLE_HS_DBG_ASSERT(ble_hs_locked_by_cur_task());

    SLIST_REMOVE(&ble_hs_conns, conn, ble_hs_conn, bhc_next);
   24700:	4b06      	ldr	r3, [pc, #24]	; (2471c <ble_hs_conn_remove+0x1c>)
   24702:	681a      	ldr	r2, [r3, #0]
   24704:	4282      	cmp	r2, r0
   24706:	d103      	bne.n	24710 <ble_hs_conn_remove+0x10>
   24708:	6812      	ldr	r2, [r2, #0]
   2470a:	601a      	str	r2, [r3, #0]
   2470c:	4770      	bx	lr
   2470e:	461a      	mov	r2, r3
   24710:	6813      	ldr	r3, [r2, #0]
   24712:	4283      	cmp	r3, r0
   24714:	d1fb      	bne.n	2470e <ble_hs_conn_remove+0xe>
   24716:	681b      	ldr	r3, [r3, #0]
   24718:	6013      	str	r3, [r2, #0]
}
   2471a:	4770      	bx	lr
   2471c:	200029ec 	.word	0x200029ec

00024720 <ble_hs_conn_find>:

    struct ble_hs_conn *conn;

    BLE_HS_DBG_ASSERT(ble_hs_locked_by_cur_task());

    SLIST_FOREACH(conn, &ble_hs_conns, bhc_next) {
   24720:	4b04      	ldr	r3, [pc, #16]	; (24734 <ble_hs_conn_find+0x14>)
   24722:	681b      	ldr	r3, [r3, #0]
   24724:	b123      	cbz	r3, 24730 <ble_hs_conn_find+0x10>
        if (conn->bhc_handle == conn_handle) {
   24726:	889a      	ldrh	r2, [r3, #4]
   24728:	4282      	cmp	r2, r0
   2472a:	d001      	beq.n	24730 <ble_hs_conn_find+0x10>
    SLIST_FOREACH(conn, &ble_hs_conns, bhc_next) {
   2472c:	681b      	ldr	r3, [r3, #0]
   2472e:	e7f9      	b.n	24724 <ble_hs_conn_find+0x4>
            return conn;
        }
    }

    return NULL;
}
   24730:	4618      	mov	r0, r3
   24732:	4770      	bx	lr
   24734:	200029ec 	.word	0x200029ec

00024738 <ble_hs_conn_insert>:
{
   24738:	b510      	push	{r4, lr}
   2473a:	4604      	mov	r4, r0
    BLE_HS_DBG_ASSERT_EVAL(ble_hs_conn_find(conn->bhc_handle) == NULL);
   2473c:	8880      	ldrh	r0, [r0, #4]
   2473e:	f7ff ffef 	bl	24720 <ble_hs_conn_find>
    SLIST_INSERT_HEAD(&ble_hs_conns, conn, bhc_next);
   24742:	4b02      	ldr	r3, [pc, #8]	; (2474c <ble_hs_conn_insert+0x14>)
   24744:	681a      	ldr	r2, [r3, #0]
   24746:	6022      	str	r2, [r4, #0]
   24748:	601c      	str	r4, [r3, #0]
}
   2474a:	bd10      	pop	{r4, pc}
   2474c:	200029ec 	.word	0x200029ec

00024750 <ble_hs_conn_find_assert>:

struct ble_hs_conn *
ble_hs_conn_find_assert(uint16_t conn_handle)
{
   24750:	b508      	push	{r3, lr}
    struct ble_hs_conn *conn;

    conn = ble_hs_conn_find(conn_handle);
   24752:	f7ff ffe5 	bl	24720 <ble_hs_conn_find>
    BLE_HS_DBG_ASSERT(conn != NULL);

    return conn;
}
   24756:	bd08      	pop	{r3, pc}

00024758 <ble_hs_conn_find_by_addr>:

struct ble_hs_conn *
ble_hs_conn_find_by_addr(const ble_addr_t *addr)
{
   24758:	b538      	push	{r3, r4, r5, lr}

    struct ble_hs_conn *conn;

    BLE_HS_DBG_ASSERT(ble_hs_locked_by_cur_task());

    if (!addr) {
   2475a:	b330      	cbz	r0, 247aa <ble_hs_conn_find_by_addr+0x52>
   2475c:	4605      	mov	r5, r0
        return NULL;
    }

    SLIST_FOREACH(conn, &ble_hs_conns, bhc_next) {
   2475e:	4b14      	ldr	r3, [pc, #80]	; (247b0 <ble_hs_conn_find_by_addr+0x58>)
   24760:	681c      	ldr	r4, [r3, #0]
   24762:	e013      	b.n	2478c <ble_hs_conn_find_by_addr+0x34>
        if (BLE_ADDR_IS_RPA(addr)) {
   24764:	79aa      	ldrb	r2, [r5, #6]
   24766:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   2476a:	2a40      	cmp	r2, #64	; 0x40
   2476c:	d113      	bne.n	24796 <ble_hs_conn_find_by_addr+0x3e>
    type_diff = a->type - b->type;
   2476e:	7d60      	ldrb	r0, [r4, #21]
    if (type_diff != 0) {
   24770:	1ac0      	subs	r0, r0, r3
   24772:	d105      	bne.n	24780 <ble_hs_conn_find_by_addr+0x28>
    return memcmp(a->val, b->val, sizeof(a->val));
   24774:	2206      	movs	r2, #6
   24776:	1c69      	adds	r1, r5, #1
   24778:	f104 0016 	add.w	r0, r4, #22
   2477c:	f7ea f8ec 	bl	e958 <memcmp>
            if (ble_addr_cmp(&conn->bhc_peer_rpa_addr, addr) == 0) {
   24780:	b918      	cbnz	r0, 2478a <ble_hs_conn_find_by_addr+0x32>
            }
        }
    }

    return NULL;
}
   24782:	4620      	mov	r0, r4
   24784:	bd38      	pop	{r3, r4, r5, pc}
            if (ble_addr_cmp(&conn->bhc_peer_addr, addr) == 0) {
   24786:	2800      	cmp	r0, #0
   24788:	d0fb      	beq.n	24782 <ble_hs_conn_find_by_addr+0x2a>
    SLIST_FOREACH(conn, &ble_hs_conns, bhc_next) {
   2478a:	6824      	ldr	r4, [r4, #0]
   2478c:	2c00      	cmp	r4, #0
   2478e:	d0f8      	beq.n	24782 <ble_hs_conn_find_by_addr+0x2a>
        if (BLE_ADDR_IS_RPA(addr)) {
   24790:	782b      	ldrb	r3, [r5, #0]
   24792:	2b01      	cmp	r3, #1
   24794:	d0e6      	beq.n	24764 <ble_hs_conn_find_by_addr+0xc>
    type_diff = a->type - b->type;
   24796:	79e0      	ldrb	r0, [r4, #7]
    if (type_diff != 0) {
   24798:	1ac0      	subs	r0, r0, r3
   2479a:	d1f4      	bne.n	24786 <ble_hs_conn_find_by_addr+0x2e>
    return memcmp(a->val, b->val, sizeof(a->val));
   2479c:	2206      	movs	r2, #6
   2479e:	1c69      	adds	r1, r5, #1
   247a0:	f104 0008 	add.w	r0, r4, #8
   247a4:	f7ea f8d8 	bl	e958 <memcmp>
   247a8:	e7ed      	b.n	24786 <ble_hs_conn_find_by_addr+0x2e>
        return NULL;
   247aa:	2400      	movs	r4, #0
   247ac:	e7e9      	b.n	24782 <ble_hs_conn_find_by_addr+0x2a>
   247ae:	bf00      	nop
   247b0:	200029ec 	.word	0x200029ec

000247b4 <ble_hs_conn_find_by_idx>:
    int i;

    BLE_HS_DBG_ASSERT(ble_hs_locked_by_cur_task());

    i = 0;
    SLIST_FOREACH(conn, &ble_hs_conns, bhc_next) {
   247b4:	4b05      	ldr	r3, [pc, #20]	; (247cc <ble_hs_conn_find_by_idx+0x18>)
   247b6:	681b      	ldr	r3, [r3, #0]
    i = 0;
   247b8:	2200      	movs	r2, #0
    SLIST_FOREACH(conn, &ble_hs_conns, bhc_next) {
   247ba:	b123      	cbz	r3, 247c6 <ble_hs_conn_find_by_idx+0x12>
        if (i == idx) {
   247bc:	4282      	cmp	r2, r0
   247be:	d002      	beq.n	247c6 <ble_hs_conn_find_by_idx+0x12>
            return conn;
        }

        i++;
   247c0:	3201      	adds	r2, #1
    SLIST_FOREACH(conn, &ble_hs_conns, bhc_next) {
   247c2:	681b      	ldr	r3, [r3, #0]
   247c4:	e7f9      	b.n	247ba <ble_hs_conn_find_by_idx+0x6>
    }

    return NULL;
}
   247c6:	4618      	mov	r0, r3
   247c8:	4770      	bx	lr
   247ca:	bf00      	nop
   247cc:	200029ec 	.word	0x200029ec

000247d0 <ble_hs_conn_exists>:

int
ble_hs_conn_exists(uint16_t conn_handle)
{
   247d0:	b508      	push	{r3, lr}
#if !NIMBLE_BLE_CONNECT
    return 0;
#endif
    return ble_hs_conn_find(conn_handle) != NULL;
   247d2:	f7ff ffa5 	bl	24720 <ble_hs_conn_find>
}
   247d6:	3000      	adds	r0, #0
   247d8:	bf18      	it	ne
   247da:	2001      	movne	r0, #1
   247dc:	bd08      	pop	{r3, pc}
	...

000247e0 <ble_hs_conn_first>:
    return NULL;
#endif

    BLE_HS_DBG_ASSERT(ble_hs_locked_by_cur_task());
    return SLIST_FIRST(&ble_hs_conns);
}
   247e0:	4b01      	ldr	r3, [pc, #4]	; (247e8 <ble_hs_conn_first+0x8>)
   247e2:	6818      	ldr	r0, [r3, #0]
   247e4:	4770      	bx	lr
   247e6:	bf00      	nop
   247e8:	200029ec 	.word	0x200029ec

000247ec <ble_hs_conn_addrs>:

void
ble_hs_conn_addrs(const struct ble_hs_conn *conn,
                  struct ble_hs_conn_addrs *addrs)
{
   247ec:	b570      	push	{r4, r5, r6, lr}
   247ee:	b082      	sub	sp, #8
   247f0:	4605      	mov	r5, r0
   247f2:	460c      	mov	r4, r1
    const uint8_t *our_id_addr_val;
    int rc;

    /* Determine our address information. */
    addrs->our_id_addr.type =
        ble_hs_misc_own_addr_type_to_id(conn->bhc_our_addr_type);
   247f4:	7980      	ldrb	r0, [r0, #6]
   247f6:	f000 ff81 	bl	256fc <ble_hs_misc_own_addr_type_to_id>
    addrs->our_id_addr.type =
   247fa:	7020      	strb	r0, [r4, #0]
    } else {
        rc = ble_hs_id_addr(addrs->our_id_addr.type, &our_id_addr_val, NULL);
        assert(rc == 0);
    }
#else
    rc = ble_hs_id_addr(addrs->our_id_addr.type, &our_id_addr_val, NULL);
   247fc:	2200      	movs	r2, #0
   247fe:	a901      	add	r1, sp, #4
   24800:	f000 fe32 	bl	25468 <ble_hs_id_addr>
    assert(rc == 0);
   24804:	bb70      	cbnz	r0, 24864 <ble_hs_conn_addrs+0x78>
#endif

    memcpy(addrs->our_id_addr.val, our_id_addr_val, 6);
   24806:	9b01      	ldr	r3, [sp, #4]
   24808:	681a      	ldr	r2, [r3, #0]
   2480a:	f8c4 2001 	str.w	r2, [r4, #1]
   2480e:	889b      	ldrh	r3, [r3, #4]
   24810:	f8a4 3005 	strh.w	r3, [r4, #5]

    if (memcmp(conn->bhc_our_rpa_addr.val, ble_hs_conn_null_addr, 6) == 0) {
   24814:	2206      	movs	r2, #6
   24816:	4929      	ldr	r1, [pc, #164]	; (248bc <ble_hs_conn_addrs+0xd0>)
   24818:	f105 000f 	add.w	r0, r5, #15
   2481c:	f7ea f89c 	bl	e958 <memcmp>
   24820:	bb50      	cbnz	r0, 24878 <ble_hs_conn_addrs+0x8c>
        addrs->our_ota_addr = addrs->our_id_addr;
   24822:	6822      	ldr	r2, [r4, #0]
   24824:	f8c4 200e 	str.w	r2, [r4, #14]
   24828:	88a1      	ldrh	r1, [r4, #4]
   2482a:	79a2      	ldrb	r2, [r4, #6]
   2482c:	8261      	strh	r1, [r4, #18]
   2482e:	7522      	strb	r2, [r4, #20]
    } else {
        addrs->our_ota_addr = conn->bhc_our_rpa_addr;
    }

    /* Determine peer address information. */
    addrs->peer_id_addr = conn->bhc_peer_addr;
   24830:	462b      	mov	r3, r5
   24832:	f853 1f07 	ldr.w	r1, [r3, #7]!
   24836:	f8c4 1007 	str.w	r1, [r4, #7]
   2483a:	8898      	ldrh	r0, [r3, #4]
   2483c:	7999      	ldrb	r1, [r3, #6]
   2483e:	f8a4 000b 	strh.w	r0, [r4, #11]
   24842:	7361      	strb	r1, [r4, #13]
    addrs->peer_ota_addr = conn->bhc_peer_addr;
   24844:	f104 0215 	add.w	r2, r4, #21
   24848:	6819      	ldr	r1, [r3, #0]
   2484a:	f8c4 1015 	str.w	r1, [r4, #21]
   2484e:	8898      	ldrh	r0, [r3, #4]
   24850:	7999      	ldrb	r1, [r3, #6]
   24852:	8090      	strh	r0, [r2, #4]
   24854:	7191      	strb	r1, [r2, #6]
    switch (conn->bhc_peer_addr.type) {
   24856:	79eb      	ldrb	r3, [r5, #7]
   24858:	2b02      	cmp	r3, #2
   2485a:	d017      	beq.n	2488c <ble_hs_conn_addrs+0xa0>
   2485c:	2b03      	cmp	r3, #3
   2485e:	d021      	beq.n	248a4 <ble_hs_conn_addrs+0xb8>

    default:
        BLE_HS_DBG_ASSERT(0);
        break;
    }
}
   24860:	b002      	add	sp, #8
   24862:	bd70      	pop	{r4, r5, r6, pc}
    assert(rc == 0);
   24864:	f7e7 fcc0 	bl	c1e8 <hal_debugger_connected>
   24868:	b100      	cbz	r0, 2486c <ble_hs_conn_addrs+0x80>
   2486a:	be01      	bkpt	0x0001
   2486c:	2300      	movs	r3, #0
   2486e:	461a      	mov	r2, r3
   24870:	4619      	mov	r1, r3
   24872:	4618      	mov	r0, r3
   24874:	f7e8 f96c 	bl	cb50 <__assert_func>
        addrs->our_ota_addr = conn->bhc_our_rpa_addr;
   24878:	462a      	mov	r2, r5
   2487a:	f852 1f0e 	ldr.w	r1, [r2, #14]!
   2487e:	f8c4 100e 	str.w	r1, [r4, #14]
   24882:	8891      	ldrh	r1, [r2, #4]
   24884:	7992      	ldrb	r2, [r2, #6]
   24886:	8261      	strh	r1, [r4, #18]
   24888:	7522      	strb	r2, [r4, #20]
   2488a:	e7d1      	b.n	24830 <ble_hs_conn_addrs+0x44>
        addrs->peer_id_addr.type = BLE_ADDR_PUBLIC;
   2488c:	2300      	movs	r3, #0
   2488e:	71e3      	strb	r3, [r4, #7]
        addrs->peer_ota_addr = conn->bhc_peer_rpa_addr;
   24890:	f855 2f15 	ldr.w	r2, [r5, #21]!
   24894:	f8c4 2015 	str.w	r2, [r4, #21]
   24898:	88a9      	ldrh	r1, [r5, #4]
   2489a:	79aa      	ldrb	r2, [r5, #6]
   2489c:	f8a4 1019 	strh.w	r1, [r4, #25]
   248a0:	76e2      	strb	r2, [r4, #27]
        break;
   248a2:	e7dd      	b.n	24860 <ble_hs_conn_addrs+0x74>
        addrs->peer_id_addr.type = BLE_ADDR_RANDOM;
   248a4:	2301      	movs	r3, #1
   248a6:	71e3      	strb	r3, [r4, #7]
        addrs->peer_ota_addr = conn->bhc_peer_rpa_addr;
   248a8:	f855 2f15 	ldr.w	r2, [r5, #21]!
   248ac:	f8c4 2015 	str.w	r2, [r4, #21]
   248b0:	88a9      	ldrh	r1, [r5, #4]
   248b2:	79aa      	ldrb	r2, [r5, #6]
   248b4:	f8a4 1019 	strh.w	r1, [r4, #25]
   248b8:	76e2      	strb	r2, [r4, #27]
}
   248ba:	e7d1      	b.n	24860 <ble_hs_conn_addrs+0x74>
   248bc:	200029c8 	.word	0x200029c8

000248c0 <ble_hs_conn_timer>:

int32_t
ble_hs_conn_timer(void)
{
   248c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return os_time_get();
   248c2:	f7e9 fd75 	bl	e3b0 <os_time_get>
   248c6:	4607      	mov	r7, r0

    conn_handle = BLE_HS_CONN_HANDLE_NONE;
    next_exp_in = BLE_HS_FOREVER;
    now = ble_npl_time_get();

    ble_hs_lock();
   248c8:	f7ff f8da 	bl	23a80 <ble_hs_lock>
     * 1. Determine if any connections need to be terminated due to timeout.
     *    If so, break out of the loop and terminate the connection.  This
     *    function will need to be executed again.
     * 2. Otherwise, determine when the next timeout will occur.
     */
    SLIST_FOREACH(conn, &ble_hs_conns, bhc_next) {
   248cc:	4b1c      	ldr	r3, [pc, #112]	; (24940 <ble_hs_conn_timer+0x80>)
   248ce:	681c      	ldr	r4, [r3, #0]
    next_exp_in = BLE_HS_FOREVER;
   248d0:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
    SLIST_FOREACH(conn, &ble_hs_conns, bhc_next) {
   248d4:	e00d      	b.n	248f2 <ble_hs_conn_timer+0x32>
                if (time_diff <= 0) {
                    /* ACL reassembly has timed out.  Remember the connection
                     * handle so it can be terminated after the mutex is
                     * unlocked.
                     */
                    conn_handle = conn->bhc_handle;
   248d6:	88a4      	ldrh	r4, [r4, #4]
                    break;
   248d8:	e021      	b.n	2491e <ble_hs_conn_timer+0x5e>
   248da:	4635      	mov	r5, r6
#if BLE_HS_ATT_SVR_QUEUED_WRITE_TMO
            /* Check each connection's rx queued write timer.  If too much
             * time passes after a prep write is received, the queue is
             * cleared.
             */
            time_diff = ble_att_svr_ticks_until_tmo(&conn->bhc_att_svr, now);
   248dc:	4639      	mov	r1, r7
   248de:	f104 0044 	add.w	r0, r4, #68	; 0x44
   248e2:	f7fa fff4 	bl	1f8ce <ble_att_svr_ticks_until_tmo>
            if (time_diff <= 0) {
   248e6:	1e06      	subs	r6, r0, #0
   248e8:	dd14      	ble.n	24914 <ble_hs_conn_timer+0x54>
                conn_handle = conn->bhc_handle;
                break;
            }

            /* Determine if this connection is the soonest to time out. */
            if (time_diff < next_exp_in) {
   248ea:	42b5      	cmp	r5, r6
   248ec:	dc00      	bgt.n	248f0 <ble_hs_conn_timer+0x30>
   248ee:	462e      	mov	r6, r5
    SLIST_FOREACH(conn, &ble_hs_conns, bhc_next) {
   248f0:	6824      	ldr	r4, [r4, #0]
   248f2:	b194      	cbz	r4, 2491a <ble_hs_conn_timer+0x5a>
        if (!(conn->bhc_flags & BLE_HS_CONN_F_TERMINATING)) {
   248f4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   248f8:	f013 0f02 	tst.w	r3, #2
   248fc:	d1f8      	bne.n	248f0 <ble_hs_conn_timer+0x30>
            if (conn->bhc_rx_chan != NULL) {
   248fe:	6b23      	ldr	r3, [r4, #48]	; 0x30
   24900:	2b00      	cmp	r3, #0
   24902:	d0ea      	beq.n	248da <ble_hs_conn_timer+0x1a>
                time_diff = conn->bhc_rx_timeout - now;
   24904:	6b65      	ldr	r5, [r4, #52]	; 0x34
   24906:	1bed      	subs	r5, r5, r7
                if (time_diff <= 0) {
   24908:	2d00      	cmp	r5, #0
   2490a:	dde4      	ble.n	248d6 <ble_hs_conn_timer+0x16>
                if (time_diff < next_exp_in) {
   2490c:	42ae      	cmp	r6, r5
   2490e:	dce5      	bgt.n	248dc <ble_hs_conn_timer+0x1c>
   24910:	4635      	mov	r5, r6
   24912:	e7e3      	b.n	248dc <ble_hs_conn_timer+0x1c>
                conn_handle = conn->bhc_handle;
   24914:	88a4      	ldrh	r4, [r4, #4]
                break;
   24916:	462e      	mov	r6, r5
   24918:	e001      	b.n	2491e <ble_hs_conn_timer+0x5e>
    conn_handle = BLE_HS_CONN_HANDLE_NONE;
   2491a:	f64f 74ff 	movw	r4, #65535	; 0xffff
            }
#endif
        }
    }

    ble_hs_unlock();
   2491e:	f7ff f8b3 	bl	23a88 <ble_hs_unlock>
    /* If a connection has timed out, terminate it.  We need to recursively
     * call this function again to determine when the next timeout is.  This
     * is a tail-recursive call, so it should be optimized to execute in the
     * same stack frame.
     */
    if (conn_handle != BLE_HS_CONN_HANDLE_NONE) {
   24922:	f64f 73ff 	movw	r3, #65535	; 0xffff
   24926:	429c      	cmp	r4, r3
   24928:	d101      	bne.n	2492e <ble_hs_conn_timer+0x6e>
        ble_gap_terminate(conn_handle, BLE_ERR_REM_USER_CONN_TERM);
        return ble_hs_conn_timer();
    }

    return next_exp_in;
}
   2492a:	4630      	mov	r0, r6
   2492c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ble_gap_terminate(conn_handle, BLE_ERR_REM_USER_CONN_TERM);
   2492e:	2113      	movs	r1, #19
   24930:	4620      	mov	r0, r4
   24932:	f7fc fb89 	bl	21048 <ble_gap_terminate>
        return ble_hs_conn_timer();
   24936:	f7ff ffc3 	bl	248c0 <ble_hs_conn_timer>
   2493a:	4606      	mov	r6, r0
   2493c:	e7f5      	b.n	2492a <ble_hs_conn_timer+0x6a>
   2493e:	bf00      	nop
   24940:	200029ec 	.word	0x200029ec

00024944 <ble_hs_conn_init>:

int
ble_hs_conn_init(void)
{
   24944:	b500      	push	{lr}
   24946:	b083      	sub	sp, #12
    int rc;

    rc = os_mempool_init(&ble_hs_conn_pool, MYNEWT_VAL(BLE_MAX_CONNECTIONS),
   24948:	4b07      	ldr	r3, [pc, #28]	; (24968 <ble_hs_conn_init+0x24>)
   2494a:	9300      	str	r3, [sp, #0]
   2494c:	4b07      	ldr	r3, [pc, #28]	; (2496c <ble_hs_conn_init+0x28>)
   2494e:	2264      	movs	r2, #100	; 0x64
   24950:	2101      	movs	r1, #1
   24952:	4807      	ldr	r0, [pc, #28]	; (24970 <ble_hs_conn_init+0x2c>)
   24954:	f7e9 f916 	bl	db84 <os_mempool_init>
                         sizeof (struct ble_hs_conn),
                         ble_hs_conn_elem_mem, "ble_hs_conn_pool");
    if (rc != 0) {
   24958:	b920      	cbnz	r0, 24964 <ble_hs_conn_init+0x20>
        return BLE_HS_EOS;
    }

    SLIST_INIT(&ble_hs_conns);
   2495a:	4b06      	ldr	r3, [pc, #24]	; (24974 <ble_hs_conn_init+0x30>)
   2495c:	6018      	str	r0, [r3, #0]

    return 0;
}
   2495e:	b003      	add	sp, #12
   24960:	f85d fb04 	ldr.w	pc, [sp], #4
        return BLE_HS_EOS;
   24964:	200b      	movs	r0, #11
   24966:	e7fa      	b.n	2495e <ble_hs_conn_init+0x1a>
   24968:	000323e4 	.word	0x000323e4
   2496c:	20002964 	.word	0x20002964
   24970:	200029d0 	.word	0x200029d0
   24974:	200029ec 	.word	0x200029ec

00024978 <ble_hs_flow_connection_broken>:
    MYNEWT_VAL(BLE_HS_FLOW_CTRL_TX_ON_DISCONNECT)
    ble_hs_lock();
    ble_hs_flow_tx_num_comp_pkts();
    ble_hs_unlock();
#endif
}
   24978:	4770      	bx	lr

0002497a <ble_hs_flow_fill_acl_usrhdr>:
    conn_handle = OS_MBUF_USRHDR(om);

    hdr = (void *)om->om_data;
    *conn_handle = BLE_HCI_DATA_HANDLE(hdr->hdh_handle_pb_bc);
#endif
}
   2497a:	4770      	bx	lr

0002497c <ble_hs_flow_startup>:
    ble_npl_callout_init(&ble_hs_flow_timer, ble_hs_evq_get(),
                         ble_hs_flow_event_cb, NULL);
#endif

    return 0;
}
   2497c:	2000      	movs	r0, #0
   2497e:	4770      	bx	lr

00024980 <ble_hs_hci_rx_cmd_complete>:
{
    const struct ble_hci_ev_command_complete *ev = data;
    const struct ble_hci_ev_command_complete_nop *nop = data;
    uint16_t opcode;

    if (len < sizeof(*ev)) {
   24980:	2903      	cmp	r1, #3
   24982:	d809      	bhi.n	24998 <ble_hs_hci_rx_cmd_complete+0x18>
        if (len < sizeof(*nop)) {
   24984:	2902      	cmp	r1, #2
   24986:	d91c      	bls.n	249c2 <ble_hs_hci_rx_cmd_complete+0x42>
            return BLE_HS_ECONTROLLER;
        }

        /* nop is special as it doesn't have status and response */

        opcode = le16toh(nop->opcode);
   24988:	f8b0 3001 	ldrh.w	r3, [r0, #1]
        if (opcode != BLE_HCI_OPCODE_NOP) {
   2498c:	b9db      	cbnz	r3, 249c6 <ble_hs_hci_rx_cmd_complete+0x46>
            return BLE_HS_ECONTROLLER;
        }

        /* TODO Process num_pkts field. */

        out_ack->bha_status = 0;
   2498e:	2100      	movs	r1, #0
   24990:	6011      	str	r1, [r2, #0]
        out_ack->bha_params = NULL;
   24992:	6051      	str	r1, [r2, #4]
        out_ack->bha_params_len = 0;
   24994:	6091      	str	r1, [r2, #8]
        return 0;
   24996:	e00c      	b.n	249b2 <ble_hs_hci_rx_cmd_complete+0x32>
    }

    opcode = le16toh(ev->opcode);
   24998:	f8b0 3001 	ldrh.w	r3, [r0, #1]

    /* TODO Process num_pkts field. */

    out_ack->bha_opcode = opcode;
   2499c:	8193      	strh	r3, [r2, #12]

    out_ack->bha_status = BLE_HS_HCI_ERR(ev->status);
   2499e:	78c3      	ldrb	r3, [r0, #3]
   249a0:	b14b      	cbz	r3, 249b6 <ble_hs_hci_rx_cmd_complete+0x36>
   249a2:	f503 7300 	add.w	r3, r3, #512	; 0x200
   249a6:	6013      	str	r3, [r2, #0]
    out_ack->bha_params_len = len - sizeof(*ev);
   249a8:	3904      	subs	r1, #4
   249aa:	6091      	str	r1, [r2, #8]
    if (out_ack->bha_params_len) {
   249ac:	b929      	cbnz	r1, 249ba <ble_hs_hci_rx_cmd_complete+0x3a>
        out_ack->bha_params = ev->return_params;
    } else {
        out_ack->bha_params = NULL;
   249ae:	2300      	movs	r3, #0
   249b0:	6053      	str	r3, [r2, #4]
    }

    return 0;
}
   249b2:	4608      	mov	r0, r1
   249b4:	4770      	bx	lr
    out_ack->bha_status = BLE_HS_HCI_ERR(ev->status);
   249b6:	2300      	movs	r3, #0
   249b8:	e7f5      	b.n	249a6 <ble_hs_hci_rx_cmd_complete+0x26>
        out_ack->bha_params = ev->return_params;
   249ba:	3004      	adds	r0, #4
   249bc:	6050      	str	r0, [r2, #4]
    return 0;
   249be:	2100      	movs	r1, #0
   249c0:	e7f7      	b.n	249b2 <ble_hs_hci_rx_cmd_complete+0x32>
            return BLE_HS_ECONTROLLER;
   249c2:	210c      	movs	r1, #12
   249c4:	e7f5      	b.n	249b2 <ble_hs_hci_rx_cmd_complete+0x32>
            return BLE_HS_ECONTROLLER;
   249c6:	210c      	movs	r1, #12
   249c8:	e7f3      	b.n	249b2 <ble_hs_hci_rx_cmd_complete+0x32>

000249ca <ble_hs_hci_rx_cmd_status>:
ble_hs_hci_rx_cmd_status(const void *data, int len,
                         struct ble_hs_hci_ack *out_ack)
{
    const struct ble_hci_ev_command_status *ev = data;

    if (len != sizeof(*ev)) {
   249ca:	2904      	cmp	r1, #4
   249cc:	d10d      	bne.n	249ea <ble_hs_hci_rx_cmd_status+0x20>
        return BLE_HS_ECONTROLLER;
    }

    /* XXX: Process num_pkts field. */

    out_ack->bha_opcode = le16toh(ev->opcode);
   249ce:	8843      	ldrh	r3, [r0, #2]
   249d0:	8193      	strh	r3, [r2, #12]
    out_ack->bha_params = NULL;
   249d2:	2300      	movs	r3, #0
   249d4:	6053      	str	r3, [r2, #4]
    out_ack->bha_params_len = 0;
   249d6:	6093      	str	r3, [r2, #8]
    out_ack->bha_status = BLE_HS_HCI_ERR(ev->status);
   249d8:	7803      	ldrb	r3, [r0, #0]
   249da:	b123      	cbz	r3, 249e6 <ble_hs_hci_rx_cmd_status+0x1c>
   249dc:	f503 7300 	add.w	r3, r3, #512	; 0x200
   249e0:	6013      	str	r3, [r2, #0]

    return 0;
   249e2:	2000      	movs	r0, #0
   249e4:	4770      	bx	lr
    out_ack->bha_status = BLE_HS_HCI_ERR(ev->status);
   249e6:	2300      	movs	r3, #0
   249e8:	e7fa      	b.n	249e0 <ble_hs_hci_rx_cmd_status+0x16>
        return BLE_HS_ECONTROLLER;
   249ea:	200c      	movs	r0, #12
}
   249ec:	4770      	bx	lr
	...

000249f0 <ble_hs_hci_max_acl_payload_sz>:
     * The LE_Read_Buffer_Size command is used to read the maximum size of the
     * data portion of HCI LE ACL Data Packets sent from the Host to the
     * Controller.
     */
    return ble_hs_hci_buf_sz;
}
   249f0:	4b01      	ldr	r3, [pc, #4]	; (249f8 <ble_hs_hci_max_acl_payload_sz+0x8>)
   249f2:	8818      	ldrh	r0, [r3, #0]
   249f4:	4770      	bx	lr
   249f6:	bf00      	nop
   249f8:	200029f4 	.word	0x200029f4

000249fc <ble_hs_hci_lock>:
{
   249fc:	b508      	push	{r3, lr}
    return (ble_npl_error_t)os_mutex_pend(&mu->mu, timeout);
   249fe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   24a02:	4802      	ldr	r0, [pc, #8]	; (24a0c <ble_hs_hci_lock+0x10>)
   24a04:	f7e9 fecc 	bl	e7a0 <os_mutex_pend>
}
   24a08:	bd08      	pop	{r3, pc}
   24a0a:	bf00      	nop
   24a0c:	20002b3c 	.word	0x20002b3c

00024a10 <ble_hs_hci_wait_for_ack>:
{
   24a10:	b508      	push	{r3, lr}
    return (ble_npl_error_t)os_sem_pend(&sem->sem, timeout);
   24a12:	f44f 7180 	mov.w	r1, #256	; 0x100
   24a16:	4808      	ldr	r0, [pc, #32]	; (24a38 <ble_hs_hci_wait_for_ack+0x28>)
   24a18:	f00a fabc 	bl	2ef94 <os_sem_pend>
    rc = ble_npl_sem_pend(&ble_hs_hci_sem,
   24a1c:	4603      	mov	r3, r0
    switch (rc) {
   24a1e:	b130      	cbz	r0, 24a2e <ble_hs_hci_wait_for_ack+0x1e>
   24a20:	2806      	cmp	r0, #6
   24a22:	d106      	bne.n	24a32 <ble_hs_hci_wait_for_ack+0x22>
        STATS_INC(ble_hs_stats, hci_timeout);
   24a24:	4a05      	ldr	r2, [pc, #20]	; (24a3c <ble_hs_hci_wait_for_ack+0x2c>)
   24a26:	6a53      	ldr	r3, [r2, #36]	; 0x24
   24a28:	3301      	adds	r3, #1
   24a2a:	6253      	str	r3, [r2, #36]	; 0x24
        rc = BLE_HS_ETIMEOUT_HCI;
   24a2c:	2313      	movs	r3, #19
}
   24a2e:	4618      	mov	r0, r3
   24a30:	bd08      	pop	{r3, pc}
        rc = BLE_HS_EOS;
   24a32:	230b      	movs	r3, #11
    return rc;
   24a34:	e7fb      	b.n	24a2e <ble_hs_hci_wait_for_ack+0x1e>
   24a36:	bf00      	nop
   24a38:	20002b48 	.word	0x20002b48
   24a3c:	200040b8 	.word	0x200040b8

00024a40 <ble_hs_hci_process_ack>:
{
   24a40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24a44:	4607      	mov	r7, r0
   24a46:	460e      	mov	r6, r1
   24a48:	4690      	mov	r8, r2
   24a4a:	461c      	mov	r4, r3
    STATS_INC(ble_hs_stats, hci_event);
   24a4c:	4a1e      	ldr	r2, [pc, #120]	; (24ac8 <ble_hs_hci_process_ack+0x88>)
   24a4e:	6993      	ldr	r3, [r2, #24]
   24a50:	3301      	adds	r3, #1
   24a52:	6193      	str	r3, [r2, #24]
    memset(out_ack, 0, sizeof *out_ack);
   24a54:	2300      	movs	r3, #0
   24a56:	6023      	str	r3, [r4, #0]
   24a58:	6063      	str	r3, [r4, #4]
   24a5a:	60a3      	str	r3, [r4, #8]
   24a5c:	60e3      	str	r3, [r4, #12]
    switch (ble_hs_hci_ack->opcode) {
   24a5e:	4b1b      	ldr	r3, [pc, #108]	; (24acc <ble_hs_hci_process_ack+0x8c>)
   24a60:	6818      	ldr	r0, [r3, #0]
   24a62:	7803      	ldrb	r3, [r0, #0]
   24a64:	2b0e      	cmp	r3, #14
   24a66:	d00a      	beq.n	24a7e <ble_hs_hci_process_ack+0x3e>
   24a68:	2b0f      	cmp	r3, #15
   24a6a:	d01e      	beq.n	24aaa <ble_hs_hci_process_ack+0x6a>
        rc = BLE_HS_EUNKNOWN;
   24a6c:	2511      	movs	r5, #17
    if (rc != 0) {
   24a6e:	b11d      	cbz	r5, 24a78 <ble_hs_hci_process_ack+0x38>
        STATS_INC(ble_hs_stats, hci_invalid_ack);
   24a70:	4a15      	ldr	r2, [pc, #84]	; (24ac8 <ble_hs_hci_process_ack+0x88>)
   24a72:	69d3      	ldr	r3, [r2, #28]
   24a74:	3301      	adds	r3, #1
   24a76:	61d3      	str	r3, [r2, #28]
}
   24a78:	4628      	mov	r0, r5
   24a7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = ble_hs_hci_rx_cmd_complete(ble_hs_hci_ack->data,
   24a7e:	4622      	mov	r2, r4
   24a80:	7841      	ldrb	r1, [r0, #1]
   24a82:	3002      	adds	r0, #2
   24a84:	f7ff ff7c 	bl	24980 <ble_hs_hci_rx_cmd_complete>
   24a88:	4605      	mov	r5, r0
    if (rc == 0) {
   24a8a:	2d00      	cmp	r5, #0
   24a8c:	d1ef      	bne.n	24a6e <ble_hs_hci_process_ack+0x2e>
        if (params_buf == NULL || out_ack->bha_params == NULL) {
   24a8e:	b19e      	cbz	r6, 24ab8 <ble_hs_hci_process_ack+0x78>
   24a90:	6861      	ldr	r1, [r4, #4]
   24a92:	b189      	cbz	r1, 24ab8 <ble_hs_hci_process_ack+0x78>
            if (out_ack->bha_params_len > params_buf_len) {
   24a94:	68a3      	ldr	r3, [r4, #8]
   24a96:	4543      	cmp	r3, r8
   24a98:	dd02      	ble.n	24aa0 <ble_hs_hci_process_ack+0x60>
                out_ack->bha_params_len = params_buf_len;
   24a9a:	f8c4 8008 	str.w	r8, [r4, #8]
                rc = BLE_HS_ECONTROLLER;
   24a9e:	250c      	movs	r5, #12
            memcpy(params_buf, out_ack->bha_params, out_ack->bha_params_len);
   24aa0:	68a2      	ldr	r2, [r4, #8]
   24aa2:	4630      	mov	r0, r6
   24aa4:	f7e9 ff7c 	bl	e9a0 <memcpy>
   24aa8:	e008      	b.n	24abc <ble_hs_hci_process_ack+0x7c>
        rc = ble_hs_hci_rx_cmd_status(ble_hs_hci_ack->data,
   24aaa:	4622      	mov	r2, r4
   24aac:	7841      	ldrb	r1, [r0, #1]
   24aae:	3002      	adds	r0, #2
   24ab0:	f7ff ff8b 	bl	249ca <ble_hs_hci_rx_cmd_status>
   24ab4:	4605      	mov	r5, r0
        break;
   24ab6:	e7e8      	b.n	24a8a <ble_hs_hci_process_ack+0x4a>
            out_ack->bha_params_len = 0;
   24ab8:	2300      	movs	r3, #0
   24aba:	60a3      	str	r3, [r4, #8]
        out_ack->bha_params = params_buf;
   24abc:	6066      	str	r6, [r4, #4]
        if (out_ack->bha_opcode != expected_opcode) {
   24abe:	89a3      	ldrh	r3, [r4, #12]
   24ac0:	42bb      	cmp	r3, r7
   24ac2:	d0d4      	beq.n	24a6e <ble_hs_hci_process_ack+0x2e>
            rc = BLE_HS_ECONTROLLER;
   24ac4:	250c      	movs	r5, #12
   24ac6:	e7d3      	b.n	24a70 <ble_hs_hci_process_ack+0x30>
   24ac8:	200040b8 	.word	0x200040b8
   24acc:	200029f0 	.word	0x200029f0

00024ad0 <ble_hs_hci_unlock>:
{
   24ad0:	b508      	push	{r3, lr}
    return (ble_npl_error_t)os_mutex_release(&mu->mu);
   24ad2:	4802      	ldr	r0, [pc, #8]	; (24adc <ble_hs_hci_unlock+0xc>)
   24ad4:	f7e9 fe04 	bl	e6e0 <os_mutex_release>
}
   24ad8:	bd08      	pop	{r3, pc}
   24ada:	bf00      	nop
   24adc:	20002b3c 	.word	0x20002b3c

00024ae0 <ble_hs_hci_rx_ack>:
{
   24ae0:	b508      	push	{r3, lr}
/**
 * Get current semaphore's count
 */
static inline uint16_t os_sem_get_count(struct os_sem *sem)
{
    return sem->sem_tokens;
   24ae2:	4b06      	ldr	r3, [pc, #24]	; (24afc <ble_hs_hci_rx_ack+0x1c>)
   24ae4:	88db      	ldrh	r3, [r3, #6]
    if (ble_npl_sem_get_count(&ble_hs_hci_sem) > 0) {
   24ae6:	b92b      	cbnz	r3, 24af4 <ble_hs_hci_rx_ack+0x14>
    ble_hs_hci_ack = (struct ble_hci_ev *) ack_ev;
   24ae8:	4b05      	ldr	r3, [pc, #20]	; (24b00 <ble_hs_hci_rx_ack+0x20>)
   24aea:	6018      	str	r0, [r3, #0]
    return (ble_npl_error_t)os_sem_release(&sem->sem);
   24aec:	4803      	ldr	r0, [pc, #12]	; (24afc <ble_hs_hci_rx_ack+0x1c>)
   24aee:	f00a fa1f 	bl	2ef30 <os_sem_release>
}
   24af2:	bd08      	pop	{r3, pc}
        ble_hci_trans_buf_free(ack_ev);
   24af4:	f005 fbd2 	bl	2a29c <ble_hci_trans_buf_free>
        return;
   24af8:	e7fb      	b.n	24af2 <ble_hs_hci_rx_ack+0x12>
   24afa:	bf00      	nop
   24afc:	20002b48 	.word	0x20002b48
   24b00:	200029f0 	.word	0x200029f0

00024b04 <ble_hs_hci_frag_alloc>:
/**
 * Allocates an mbuf to contain an outgoing ACL data fragment.
 */
static struct os_mbuf *
ble_hs_hci_frag_alloc(uint16_t frag_size, void *arg)
{
   24b04:	b508      	push	{r3, lr}
    struct os_mbuf *om;

    /* Prefer the dedicated one-element fragment pool. */
    om = os_mbuf_get_pkthdr(&ble_hs_hci_frag_mbuf_pool, 0);
   24b06:	2100      	movs	r1, #0
   24b08:	4806      	ldr	r0, [pc, #24]	; (24b24 <ble_hs_hci_frag_alloc+0x20>)
   24b0a:	f7e8 fc64 	bl	d3d6 <os_mbuf_get_pkthdr>
    if (om != NULL) {
   24b0e:	b128      	cbz	r0, 24b1c <ble_hs_hci_frag_alloc+0x18>
   24b10:	4603      	mov	r3, r0
        om->om_data += BLE_HCI_DATA_HDR_SZ;
   24b12:	6802      	ldr	r2, [r0, #0]
   24b14:	3204      	adds	r2, #4
   24b16:	6002      	str	r2, [r0, #0]
    if (om != NULL) {
        return om;
    }

    return NULL;
}
   24b18:	4618      	mov	r0, r3
   24b1a:	bd08      	pop	{r3, pc}
    om = ble_hs_mbuf_acl_pkt();
   24b1c:	f000 fd73 	bl	25606 <ble_hs_mbuf_acl_pkt>
   24b20:	4603      	mov	r3, r0
   24b22:	e7f9      	b.n	24b18 <ble_hs_hci_frag_alloc+0x14>
   24b24:	20002b14 	.word	0x20002b14

00024b28 <ble_hs_hci_acl_hdr_prepend>:
}

static struct os_mbuf *
ble_hs_hci_acl_hdr_prepend(struct os_mbuf *om, uint16_t handle,
                           uint8_t pb_flag)
{
   24b28:	b510      	push	{r4, lr}
   24b2a:	b082      	sub	sp, #8
   24b2c:	4604      	mov	r4, r0
   24b2e:	4608      	mov	r0, r1
   24b30:	4611      	mov	r1, r2
    struct hci_data_hdr hci_hdr;
    struct os_mbuf *om2;

    hci_hdr.hdh_handle_pb_bc =
        ble_hs_hci_util_handle_pb_bc_join(handle, pb_flag, 0);
   24b32:	2200      	movs	r2, #0
   24b34:	f000 fbd6 	bl	252e4 <ble_hs_hci_util_handle_pb_bc_join>
    hci_hdr.hdh_handle_pb_bc =
   24b38:	f8ad 0004 	strh.w	r0, [sp, #4]
    put_le16(&hci_hdr.hdh_len, OS_MBUF_PKTHDR(om)->omp_len);
   24b3c:	8a21      	ldrh	r1, [r4, #16]
   24b3e:	f10d 0006 	add.w	r0, sp, #6
   24b42:	f00a f8f3 	bl	2ed2c <put_le16>

    om2 = os_mbuf_prepend(om, sizeof hci_hdr);
   24b46:	2104      	movs	r1, #4
   24b48:	4620      	mov	r0, r4
   24b4a:	f7e8 fdd0 	bl	d6ee <os_mbuf_prepend>
    if (om2 == NULL) {
   24b4e:	4604      	mov	r4, r0
   24b50:	b158      	cbz	r0, 24b6a <ble_hs_hci_acl_hdr_prepend+0x42>
        return NULL;
    }

    om = om2;
    om = os_mbuf_pullup(om, sizeof hci_hdr);
   24b52:	2104      	movs	r1, #4
   24b54:	f7e8 fec5 	bl	d8e2 <os_mbuf_pullup>
    if (om == NULL) {
   24b58:	4604      	mov	r4, r0
   24b5a:	b130      	cbz	r0, 24b6a <ble_hs_hci_acl_hdr_prepend+0x42>
        return NULL;
    }

    memcpy(om->om_data, &hci_hdr, sizeof hci_hdr);
   24b5c:	6803      	ldr	r3, [r0, #0]
   24b5e:	9a01      	ldr	r2, [sp, #4]
   24b60:	601a      	str	r2, [r3, #0]

#if !BLE_MONITOR
    BLE_HS_LOG(DEBUG, "host tx hci data; handle=%d length=%d\n", handle,
   24b62:	f10d 0006 	add.w	r0, sp, #6
   24b66:	f00a f902 	bl	2ed6e <get_le16>
               get_le16(&hci_hdr.hdh_len));
#endif

    return om;
}
   24b6a:	4620      	mov	r0, r4
   24b6c:	b002      	add	sp, #8
   24b6e:	bd10      	pop	{r4, pc}

00024b70 <ble_hs_hci_set_buf_sz>:
    if (pktlen == 0 || max_pkts == 0) {
   24b70:	b130      	cbz	r0, 24b80 <ble_hs_hci_set_buf_sz+0x10>
   24b72:	b139      	cbz	r1, 24b84 <ble_hs_hci_set_buf_sz+0x14>
    ble_hs_hci_buf_sz = pktlen;
   24b74:	4a04      	ldr	r2, [pc, #16]	; (24b88 <ble_hs_hci_set_buf_sz+0x18>)
   24b76:	8010      	strh	r0, [r2, #0]
    ble_hs_hci_avail_pkts = max_pkts;
   24b78:	4b04      	ldr	r3, [pc, #16]	; (24b8c <ble_hs_hci_set_buf_sz+0x1c>)
   24b7a:	8019      	strh	r1, [r3, #0]
    return 0;
   24b7c:	2000      	movs	r0, #0
   24b7e:	4770      	bx	lr
        return BLE_HS_EINVAL;
   24b80:	2003      	movs	r0, #3
   24b82:	4770      	bx	lr
   24b84:	2003      	movs	r0, #3
}
   24b86:	4770      	bx	lr
   24b88:	200029f4 	.word	0x200029f4
   24b8c:	20004116 	.word	0x20004116

00024b90 <ble_hs_hci_add_avail_pkts>:
{
   24b90:	b508      	push	{r3, lr}
    if (ble_hs_hci_avail_pkts + delta > UINT16_MAX) {
   24b92:	4b07      	ldr	r3, [pc, #28]	; (24bb0 <ble_hs_hci_add_avail_pkts+0x20>)
   24b94:	881b      	ldrh	r3, [r3, #0]
   24b96:	181a      	adds	r2, r3, r0
   24b98:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
   24b9c:	da03      	bge.n	24ba6 <ble_hs_hci_add_avail_pkts+0x16>
        ble_hs_hci_avail_pkts += delta;
   24b9e:	4403      	add	r3, r0
   24ba0:	4a03      	ldr	r2, [pc, #12]	; (24bb0 <ble_hs_hci_add_avail_pkts+0x20>)
   24ba2:	8013      	strh	r3, [r2, #0]
}
   24ba4:	bd08      	pop	{r3, pc}
        ble_hs_sched_reset(BLE_HS_ECONTROLLER);
   24ba6:	200c      	movs	r0, #12
   24ba8:	f7ff f886 	bl	23cb8 <ble_hs_sched_reset>
   24bac:	e7fa      	b.n	24ba4 <ble_hs_hci_add_avail_pkts+0x14>
   24bae:	bf00      	nop
   24bb0:	20004116 	.word	0x20004116

00024bb4 <ble_hs_hci_cmd_tx>:
{
   24bb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24bb8:	b084      	sub	sp, #16
   24bba:	4605      	mov	r5, r0
   24bbc:	460c      	mov	r4, r1
   24bbe:	4616      	mov	r6, r2
   24bc0:	4698      	mov	r8, r3
   24bc2:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
    ble_hs_hci_lock();
   24bc6:	f7ff ff19 	bl	249fc <ble_hs_hci_lock>
    rc = ble_hs_hci_cmd_send_buf(opcode, cmd, cmd_len);
   24bca:	4632      	mov	r2, r6
   24bcc:	4621      	mov	r1, r4
   24bce:	4628      	mov	r0, r5
   24bd0:	f000 f90a 	bl	24de8 <ble_hs_hci_cmd_send_buf>
    if (rc != 0) {
   24bd4:	4604      	mov	r4, r0
   24bd6:	b168      	cbz	r0, 24bf4 <ble_hs_hci_cmd_tx+0x40>
    if (ble_hs_hci_ack != NULL) {
   24bd8:	4b14      	ldr	r3, [pc, #80]	; (24c2c <ble_hs_hci_cmd_tx+0x78>)
   24bda:	6818      	ldr	r0, [r3, #0]
   24bdc:	b120      	cbz	r0, 24be8 <ble_hs_hci_cmd_tx+0x34>
        ble_hci_trans_buf_free((uint8_t *) ble_hs_hci_ack);
   24bde:	f005 fb5d 	bl	2a29c <ble_hci_trans_buf_free>
        ble_hs_hci_ack = NULL;
   24be2:	4b12      	ldr	r3, [pc, #72]	; (24c2c <ble_hs_hci_cmd_tx+0x78>)
   24be4:	2200      	movs	r2, #0
   24be6:	601a      	str	r2, [r3, #0]
    ble_hs_hci_unlock();
   24be8:	f7ff ff72 	bl	24ad0 <ble_hs_hci_unlock>
}
   24bec:	4620      	mov	r0, r4
   24bee:	b004      	add	sp, #16
   24bf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    rc = ble_hs_hci_wait_for_ack();
   24bf4:	f7ff ff0c 	bl	24a10 <ble_hs_hci_wait_for_ack>
    if (rc != 0) {
   24bf8:	4604      	mov	r4, r0
   24bfa:	b110      	cbz	r0, 24c02 <ble_hs_hci_cmd_tx+0x4e>
        ble_hs_sched_reset(rc);
   24bfc:	f7ff f85c 	bl	23cb8 <ble_hs_sched_reset>
        goto done;
   24c00:	e7ea      	b.n	24bd8 <ble_hs_hci_cmd_tx+0x24>
    rc = ble_hs_hci_process_ack(opcode, rsp, rsp_len, &ack);
   24c02:	466b      	mov	r3, sp
   24c04:	463a      	mov	r2, r7
   24c06:	4641      	mov	r1, r8
   24c08:	4628      	mov	r0, r5
   24c0a:	f7ff ff19 	bl	24a40 <ble_hs_hci_process_ack>
    if (rc != 0) {
   24c0e:	4604      	mov	r4, r0
   24c10:	b948      	cbnz	r0, 24c26 <ble_hs_hci_cmd_tx+0x72>
    rc = ack.bha_status;
   24c12:	9c00      	ldr	r4, [sp, #0]
    if (!rc && (ack.bha_params_len != rsp_len)) {
   24c14:	2c00      	cmp	r4, #0
   24c16:	d1df      	bne.n	24bd8 <ble_hs_hci_cmd_tx+0x24>
   24c18:	9b02      	ldr	r3, [sp, #8]
   24c1a:	42bb      	cmp	r3, r7
   24c1c:	d0dc      	beq.n	24bd8 <ble_hs_hci_cmd_tx+0x24>
        ble_hs_sched_reset(rc);
   24c1e:	4620      	mov	r0, r4
   24c20:	f7ff f84a 	bl	23cb8 <ble_hs_sched_reset>
        goto done;
   24c24:	e7d8      	b.n	24bd8 <ble_hs_hci_cmd_tx+0x24>
        ble_hs_sched_reset(rc);
   24c26:	f7ff f847 	bl	23cb8 <ble_hs_sched_reset>
        goto done;
   24c2a:	e7d5      	b.n	24bd8 <ble_hs_hci_cmd_tx+0x24>
   24c2c:	200029f0 	.word	0x200029f0

00024c30 <ble_hs_hci_rx_evt>:
{
   24c30:	b508      	push	{r3, lr}
    switch (ev->opcode) {
   24c32:	7803      	ldrb	r3, [r0, #0]
   24c34:	2b0e      	cmp	r3, #14
   24c36:	d006      	beq.n	24c46 <ble_hs_hci_rx_evt+0x16>
   24c38:	2b0f      	cmp	r3, #15
   24c3a:	d10a      	bne.n	24c52 <ble_hs_hci_rx_evt+0x22>
        enqueue = (cmd_status->opcode == BLE_HCI_OPCODE_NOP);
   24c3c:	8883      	ldrh	r3, [r0, #4]
   24c3e:	fab3 f383 	clz	r3, r3
   24c42:	095b      	lsrs	r3, r3, #5
        break;
   24c44:	e004      	b.n	24c50 <ble_hs_hci_rx_evt+0x20>
        enqueue = (cmd_complete->opcode == BLE_HCI_OPCODE_NOP);
   24c46:	f8b0 3003 	ldrh.w	r3, [r0, #3]
   24c4a:	fab3 f383 	clz	r3, r3
   24c4e:	095b      	lsrs	r3, r3, #5
    if (enqueue) {
   24c50:	b11b      	cbz	r3, 24c5a <ble_hs_hci_rx_evt+0x2a>
        ble_hs_enqueue_hci_event(hci_ev);
   24c52:	f7ff f813 	bl	23c7c <ble_hs_enqueue_hci_event>
}
   24c56:	2000      	movs	r0, #0
   24c58:	bd08      	pop	{r3, pc}
        ble_hs_hci_rx_ack(hci_ev);
   24c5a:	f7ff ff41 	bl	24ae0 <ble_hs_hci_rx_ack>
   24c5e:	e7fa      	b.n	24c56 <ble_hs_hci_rx_evt+0x26>

00024c60 <ble_hs_hci_acl_tx_now>:

int
ble_hs_hci_acl_tx_now(struct ble_hs_conn *conn, struct os_mbuf **om)
{
   24c60:	b570      	push	{r4, r5, r6, lr}
   24c62:	b082      	sub	sp, #8
   24c64:	4604      	mov	r4, r0
   24c66:	460d      	mov	r5, r1
    uint8_t pb;
    int rc;

    BLE_HS_DBG_ASSERT(ble_hs_locked_by_cur_task());

    txom = *om;
   24c68:	680b      	ldr	r3, [r1, #0]
   24c6a:	9301      	str	r3, [sp, #4]
    *om = NULL;
   24c6c:	2300      	movs	r3, #0
   24c6e:	600b      	str	r3, [r1, #0]

    if (!(conn->bhc_flags & BLE_HS_CONN_F_TX_FRAG)) {
   24c70:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   24c74:	f013 0f04 	tst.w	r3, #4
   24c78:	d02e      	beq.n	24cd8 <ble_hs_hci_acl_tx_now+0x78>
         * After sending the first fragment, pb gets set appropriately for all
         * subsequent fragments in this packet.
         */
        pb = BLE_HCI_PB_FIRST_NON_FLUSH;
    } else {
        pb = BLE_HCI_PB_MIDDLE;
   24c7a:	2601      	movs	r6, #1
    }

    /* Send fragments until the entire packet has been sent. */
    while (txom != NULL && ble_hs_hci_avail_pkts > 0) {
   24c7c:	9b01      	ldr	r3, [sp, #4]
   24c7e:	b36b      	cbz	r3, 24cdc <ble_hs_hci_acl_tx_now+0x7c>
   24c80:	4a23      	ldr	r2, [pc, #140]	; (24d10 <ble_hs_hci_acl_tx_now+0xb0>)
   24c82:	8812      	ldrh	r2, [r2, #0]
   24c84:	b352      	cbz	r2, 24cdc <ble_hs_hci_acl_tx_now+0x7c>
        frag = mem_split_frag(&txom, ble_hs_hci_max_acl_payload_sz(),
   24c86:	f7ff feb3 	bl	249f0 <ble_hs_hci_max_acl_payload_sz>
   24c8a:	2300      	movs	r3, #0
   24c8c:	4a21      	ldr	r2, [pc, #132]	; (24d14 <ble_hs_hci_acl_tx_now+0xb4>)
   24c8e:	4601      	mov	r1, r0
   24c90:	a801      	add	r0, sp, #4
   24c92:	f7ed fadd 	bl	12250 <mem_split_frag>
                              ble_hs_hci_frag_alloc, NULL);
        if (frag == NULL) {
   24c96:	b1d8      	cbz	r0, 24cd0 <ble_hs_hci_acl_tx_now+0x70>
            *om = txom;
            return BLE_HS_EAGAIN;
        }

        frag = ble_hs_hci_acl_hdr_prepend(frag, conn->bhc_handle, pb);
   24c98:	4632      	mov	r2, r6
   24c9a:	88a1      	ldrh	r1, [r4, #4]
   24c9c:	f7ff ff44 	bl	24b28 <ble_hs_hci_acl_hdr_prepend>
        if (frag == NULL) {
   24ca0:	4606      	mov	r6, r0
   24ca2:	b338      	cbz	r0, 24cf4 <ble_hs_hci_acl_tx_now+0x94>
            goto err;
        }

#if !BLE_MONITOR
        BLE_HS_LOG(DEBUG, "ble_hs_hci_acl_tx(): ");
        ble_hs_log_mbuf(frag);
   24ca4:	f000 fc82 	bl	255ac <ble_hs_log_mbuf>
        BLE_HS_LOG(DEBUG, "\n");
#endif

        rc = ble_hs_tx_data(frag);
   24ca8:	4630      	mov	r0, r6
   24caa:	f7ff f86a 	bl	23d82 <ble_hs_tx_data>
        if (rc != 0) {
   24cae:	4606      	mov	r6, r0
   24cb0:	bb08      	cbnz	r0, 24cf6 <ble_hs_hci_acl_tx_now+0x96>
        }

        /* If any fragments remain, they should be marked as 'middle'
         * fragments.
         */
        conn->bhc_flags |= BLE_HS_CONN_F_TX_FRAG;
   24cb2:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   24cb6:	f043 0304 	orr.w	r3, r3, #4
   24cba:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
        pb = BLE_HCI_PB_MIDDLE;

        /* Account for the controller buf that will hold the txed fragment. */
        conn->bhc_outstanding_pkts++;
   24cbe:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   24cc0:	3301      	adds	r3, #1
   24cc2:	8723      	strh	r3, [r4, #56]	; 0x38
        ble_hs_hci_avail_pkts--;
   24cc4:	4a12      	ldr	r2, [pc, #72]	; (24d10 <ble_hs_hci_acl_tx_now+0xb0>)
   24cc6:	8813      	ldrh	r3, [r2, #0]
   24cc8:	3b01      	subs	r3, #1
   24cca:	8013      	strh	r3, [r2, #0]
        pb = BLE_HCI_PB_MIDDLE;
   24ccc:	2601      	movs	r6, #1
   24cce:	e7d5      	b.n	24c7c <ble_hs_hci_acl_tx_now+0x1c>
            *om = txom;
   24cd0:	9b01      	ldr	r3, [sp, #4]
   24cd2:	602b      	str	r3, [r5, #0]
            return BLE_HS_EAGAIN;
   24cd4:	2601      	movs	r6, #1
   24cd6:	e017      	b.n	24d08 <ble_hs_hci_acl_tx_now+0xa8>
        pb = BLE_HCI_PB_FIRST_NON_FLUSH;
   24cd8:	2600      	movs	r6, #0
   24cda:	e7cf      	b.n	24c7c <ble_hs_hci_acl_tx_now+0x1c>
    }

    if (txom != NULL) {
   24cdc:	b113      	cbz	r3, 24ce4 <ble_hs_hci_acl_tx_now+0x84>
        /* The controller couldn't accommodate some or all of the packet. */
        *om = txom;
   24cde:	602b      	str	r3, [r5, #0]
        return BLE_HS_EAGAIN;
   24ce0:	2601      	movs	r6, #1
   24ce2:	e011      	b.n	24d08 <ble_hs_hci_acl_tx_now+0xa8>
    }

    /* The entire packet was transmitted. */
    conn->bhc_flags &= ~BLE_HS_CONN_F_TX_FRAG;
   24ce4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   24ce8:	f023 0304 	bic.w	r3, r3, #4
   24cec:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28

    return 0;
   24cf0:	2600      	movs	r6, #0
   24cf2:	e009      	b.n	24d08 <ble_hs_hci_acl_tx_now+0xa8>
            rc = BLE_HS_ENOMEM;
   24cf4:	2606      	movs	r6, #6

err:
    BLE_HS_DBG_ASSERT(rc != 0);

    conn->bhc_flags &= ~BLE_HS_CONN_F_TX_FRAG;
   24cf6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   24cfa:	f023 0304 	bic.w	r3, r3, #4
   24cfe:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    os_mbuf_free_chain(txom);
   24d02:	9801      	ldr	r0, [sp, #4]
   24d04:	f7e8 fb8c 	bl	d420 <os_mbuf_free_chain>
    return rc;
}
   24d08:	4630      	mov	r0, r6
   24d0a:	b002      	add	sp, #8
   24d0c:	bd70      	pop	{r4, r5, r6, pc}
   24d0e:	bf00      	nop
   24d10:	20004116 	.word	0x20004116
   24d14:	00024b05 	.word	0x00024b05

00024d18 <ble_hs_hci_acl_tx>:
 *                                  error.
 *
 */
int
ble_hs_hci_acl_tx(struct ble_hs_conn *conn, struct os_mbuf **om)
{
   24d18:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(ble_hs_locked_by_cur_task());

    /* If this conn is already backed up, don't even try to send. */
    if (STAILQ_FIRST(&conn->bhc_tx_q) != NULL) {
   24d1a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   24d1c:	b10b      	cbz	r3, 24d22 <ble_hs_hci_acl_tx+0xa>
        return BLE_HS_EAGAIN;
   24d1e:	2001      	movs	r0, #1
    }

    return ble_hs_hci_acl_tx_now(conn, om);
}
   24d20:	bd08      	pop	{r3, pc}
    return ble_hs_hci_acl_tx_now(conn, om);
   24d22:	f7ff ff9d 	bl	24c60 <ble_hs_hci_acl_tx_now>
   24d26:	e7fb      	b.n	24d20 <ble_hs_hci_acl_tx+0x8>

00024d28 <ble_hs_hci_set_le_supported_feat>:

void
ble_hs_hci_set_le_supported_feat(uint32_t feat)
{
    ble_hs_hci_sup_feat = feat;
   24d28:	4b01      	ldr	r3, [pc, #4]	; (24d30 <ble_hs_hci_set_le_supported_feat+0x8>)
   24d2a:	6018      	str	r0, [r3, #0]
}
   24d2c:	4770      	bx	lr
   24d2e:	bf00      	nop
   24d30:	20002b50 	.word	0x20002b50

00024d34 <ble_hs_hci_set_hci_version>:
}

void
ble_hs_hci_set_hci_version(uint8_t hci_version)
{
    ble_hs_hci_version = hci_version;
   24d34:	4b01      	ldr	r3, [pc, #4]	; (24d3c <ble_hs_hci_set_hci_version+0x8>)
   24d36:	7018      	strb	r0, [r3, #0]
}
   24d38:	4770      	bx	lr
   24d3a:	bf00      	nop
   24d3c:	20002b54 	.word	0x20002b54

00024d40 <ble_hs_hci_get_hci_version>:

uint8_t
ble_hs_hci_get_hci_version(void)
{
    return ble_hs_hci_version;
}
   24d40:	4b01      	ldr	r3, [pc, #4]	; (24d48 <ble_hs_hci_get_hci_version+0x8>)
   24d42:	7818      	ldrb	r0, [r3, #0]
   24d44:	4770      	bx	lr
   24d46:	bf00      	nop
   24d48:	20002b54 	.word	0x20002b54

00024d4c <ble_hs_hci_init>:

void
ble_hs_hci_init(void)
{
   24d4c:	b500      	push	{lr}
   24d4e:	b083      	sub	sp, #12
    return (ble_npl_error_t)os_sem_init(&sem->sem, tokens);
   24d50:	2100      	movs	r1, #0
   24d52:	480a      	ldr	r0, [pc, #40]	; (24d7c <ble_hs_hci_init+0x30>)
   24d54:	f00a f8e4 	bl	2ef20 <os_sem_init>
    return (ble_npl_error_t)os_mutex_init(&mu->mu);
   24d58:	4809      	ldr	r0, [pc, #36]	; (24d80 <ble_hs_hci_init+0x34>)
   24d5a:	f7e9 fcb7 	bl	e6cc <os_mutex_init>
    BLE_HS_DBG_ASSERT_EVAL(rc == 0);

    rc = ble_npl_mutex_init(&ble_hs_hci_mutex);
    BLE_HS_DBG_ASSERT_EVAL(rc == 0);

    rc = mem_init_mbuf_pool(ble_hs_hci_frag_data,
   24d5e:	4b09      	ldr	r3, [pc, #36]	; (24d84 <ble_hs_hci_init+0x38>)
   24d60:	9301      	str	r3, [sp, #4]
   24d62:	f44f 738e 	mov.w	r3, #284	; 0x11c
   24d66:	9300      	str	r3, [sp, #0]
   24d68:	2301      	movs	r3, #1
   24d6a:	4a07      	ldr	r2, [pc, #28]	; (24d88 <ble_hs_hci_init+0x3c>)
   24d6c:	4907      	ldr	r1, [pc, #28]	; (24d8c <ble_hs_hci_init+0x40>)
   24d6e:	4808      	ldr	r0, [pc, #32]	; (24d90 <ble_hs_hci_init+0x44>)
   24d70:	f7ed fa56 	bl	12220 <mem_init_mbuf_pool>
                            &ble_hs_hci_frag_mbuf_pool,
                            1,
                            BLE_HS_HCI_FRAG_MEMBLOCK_SIZE,
                            "ble_hs_hci_frag");
    BLE_HS_DBG_ASSERT_EVAL(rc == 0);
}
   24d74:	b003      	add	sp, #12
   24d76:	f85d fb04 	ldr.w	pc, [sp], #4
   24d7a:	bf00      	nop
   24d7c:	20002b48 	.word	0x20002b48
   24d80:	20002b3c 	.word	0x20002b3c
   24d84:	000323f8 	.word	0x000323f8
   24d88:	20002b14 	.word	0x20002b14
   24d8c:	20002b20 	.word	0x20002b20
   24d90:	200029f8 	.word	0x200029f8

00024d94 <ble_hs_hci_cmd_transport>:
#include "ble_hs_priv.h"
#include "ble_monitor_priv.h"

static int
ble_hs_hci_cmd_transport(struct ble_hci_cmd *cmd)
{
   24d94:	b508      	push	{r3, lr}
#if BLE_MONITOR
    ble_monitor_send(BLE_MONITOR_OPCODE_COMMAND_PKT, cmd,
                     cmd->length + sizeof(*cmd));
#endif

    rc = ble_hci_trans_hs_cmd_tx((uint8_t *) cmd);
   24d96:	f005 f9fb 	bl	2a190 <ble_hci_trans_hs_cmd_tx>
    switch (rc) {
   24d9a:	4603      	mov	r3, r0
   24d9c:	b110      	cbz	r0, 24da4 <ble_hs_hci_cmd_transport+0x10>
   24d9e:	2807      	cmp	r0, #7
   24da0:	d002      	beq.n	24da8 <ble_hs_hci_cmd_transport+0x14>

    case BLE_ERR_MEM_CAPACITY:
        return BLE_HS_ENOMEM_EVT;

    default:
        return BLE_HS_EUNKNOWN;
   24da2:	2311      	movs	r3, #17
    }
}
   24da4:	4618      	mov	r0, r3
   24da6:	bd08      	pop	{r3, pc}
        return BLE_HS_ENOMEM_EVT;
   24da8:	2314      	movs	r3, #20
   24daa:	e7fb      	b.n	24da4 <ble_hs_hci_cmd_transport+0x10>

00024dac <ble_hs_hci_cmd_send>:

static int
ble_hs_hci_cmd_send(uint16_t opcode, uint8_t len, const void *cmddata)
{
   24dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24dae:	4606      	mov	r6, r0
   24db0:	460d      	mov	r5, r1
   24db2:	4617      	mov	r7, r2
    struct ble_hci_cmd *cmd;
    int rc;

    cmd = (void *) ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_CMD);
   24db4:	2003      	movs	r0, #3
   24db6:	f005 fa43 	bl	2a240 <ble_hci_trans_buf_alloc>
   24dba:	4604      	mov	r4, r0
    BLE_HS_DBG_ASSERT(cmd != NULL);

    cmd->opcode = htole16(opcode);
   24dbc:	8006      	strh	r6, [r0, #0]
    cmd->length = len;
   24dbe:	7085      	strb	r5, [r0, #2]
    if (len != 0) {
   24dc0:	b955      	cbnz	r5, 24dd8 <ble_hs_hci_cmd_send+0x2c>
        memcpy(cmd->data, cmddata, len);
    }

    rc = ble_hs_hci_cmd_transport(cmd);
   24dc2:	4620      	mov	r0, r4
   24dc4:	f7ff ffe6 	bl	24d94 <ble_hs_hci_cmd_transport>

    if (rc == 0) {
   24dc8:	4602      	mov	r2, r0
   24dca:	b918      	cbnz	r0, 24dd4 <ble_hs_hci_cmd_send+0x28>
        STATS_INC(ble_hs_stats, hci_cmd);
   24dcc:	4905      	ldr	r1, [pc, #20]	; (24de4 <ble_hs_hci_cmd_send+0x38>)
   24dce:	694b      	ldr	r3, [r1, #20]
   24dd0:	3301      	adds	r3, #1
   24dd2:	614b      	str	r3, [r1, #20]
    } else {
        BLE_HS_LOG(DEBUG, "ble_hs_hci_cmd_send failure; rc=%d\n", rc);
    }

    return rc;
}
   24dd4:	4610      	mov	r0, r2
   24dd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        memcpy(cmd->data, cmddata, len);
   24dd8:	462a      	mov	r2, r5
   24dda:	4639      	mov	r1, r7
   24ddc:	3003      	adds	r0, #3
   24dde:	f7e9 fddf 	bl	e9a0 <memcpy>
   24de2:	e7ee      	b.n	24dc2 <ble_hs_hci_cmd_send+0x16>
   24de4:	200040b8 	.word	0x200040b8

00024de8 <ble_hs_hci_cmd_send_buf>:

int
ble_hs_hci_cmd_send_buf(uint16_t opcode, const void *buf, uint8_t buf_len)
{
   24de8:	b570      	push	{r4, r5, r6, lr}
   24dea:	4604      	mov	r4, r0
   24dec:	460e      	mov	r6, r1
   24dee:	4615      	mov	r5, r2
    switch (ble_hs_sync_state) {
   24df0:	4b0a      	ldr	r3, [pc, #40]	; (24e1c <ble_hs_hci_cmd_send_buf+0x34>)
   24df2:	781b      	ldrb	r3, [r3, #0]
   24df4:	2b01      	cmp	r3, #1
   24df6:	d006      	beq.n	24e06 <ble_hs_hci_cmd_send_buf+0x1e>
   24df8:	b11b      	cbz	r3, 24e02 <ble_hs_hci_cmd_send_buf+0x1a>
   24dfa:	2b02      	cmp	r3, #2
   24dfc:	d006      	beq.n	24e0c <ble_hs_hci_cmd_send_buf+0x24>
    case BLE_HS_SYNC_STATE_GOOD:
        break;

    default:
        BLE_HS_DBG_ASSERT(0);
        return BLE_HS_EUNKNOWN;
   24dfe:	2011      	movs	r0, #17
   24e00:	e009      	b.n	24e16 <ble_hs_hci_cmd_send_buf+0x2e>
        return BLE_HS_ENOTSYNCED;
   24e02:	2016      	movs	r0, #22
   24e04:	e007      	b.n	24e16 <ble_hs_hci_cmd_send_buf+0x2e>
        if (!ble_hs_is_parent_task()) {
   24e06:	f7fe fe17 	bl	23a38 <ble_hs_is_parent_task>
   24e0a:	b128      	cbz	r0, 24e18 <ble_hs_hci_cmd_send_buf+0x30>
    }

    return ble_hs_hci_cmd_send(opcode, buf_len, buf);
   24e0c:	4632      	mov	r2, r6
   24e0e:	4629      	mov	r1, r5
   24e10:	4620      	mov	r0, r4
   24e12:	f7ff ffcb 	bl	24dac <ble_hs_hci_cmd_send>
}
   24e16:	bd70      	pop	{r4, r5, r6, pc}
            return BLE_HS_ENOTSYNCED;
   24e18:	2016      	movs	r0, #22
   24e1a:	e7fc      	b.n	24e16 <ble_hs_hci_cmd_send_buf+0x2e>
   24e1c:	2000410c 	.word	0x2000410c

00024e20 <ble_hs_hci_evt_dispatch_find>:
ble_hs_hci_evt_dispatch_find(uint8_t event_code)
{
    const struct ble_hs_hci_evt_dispatch_entry *entry;
    int i;

    for (i = 0; i < BLE_HS_HCI_EVT_DISPATCH_SZ; i++) {
   24e20:	2300      	movs	r3, #0
   24e22:	2b05      	cmp	r3, #5
   24e24:	d808      	bhi.n	24e38 <ble_hs_hci_evt_dispatch_find+0x18>
        entry = ble_hs_hci_evt_dispatch + i;
   24e26:	4a06      	ldr	r2, [pc, #24]	; (24e40 <ble_hs_hci_evt_dispatch_find+0x20>)
   24e28:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
        if (entry->event_code == event_code) {
   24e2c:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
   24e30:	4282      	cmp	r2, r0
   24e32:	d002      	beq.n	24e3a <ble_hs_hci_evt_dispatch_find+0x1a>
    for (i = 0; i < BLE_HS_HCI_EVT_DISPATCH_SZ; i++) {
   24e34:	3301      	adds	r3, #1
   24e36:	e7f4      	b.n	24e22 <ble_hs_hci_evt_dispatch_find+0x2>
            return entry;
        }
    }

    return NULL;
   24e38:	2100      	movs	r1, #0
}
   24e3a:	4608      	mov	r0, r1
   24e3c:	4770      	bx	lr
   24e3e:	bf00      	nop
   24e40:	00032408 	.word	0x00032408

00024e44 <ble_hs_hci_evt_le_dispatch_find>:

static ble_hs_hci_evt_le_fn *
ble_hs_hci_evt_le_dispatch_find(uint8_t event_code)
{
    if (event_code >= BLE_HS_HCI_EVT_LE_DISPATCH_SZ) {
   24e44:	2818      	cmp	r0, #24
   24e46:	d803      	bhi.n	24e50 <ble_hs_hci_evt_le_dispatch_find+0xc>
        return NULL;
    }

    return ble_hs_hci_evt_le_dispatch[event_code];
   24e48:	4b02      	ldr	r3, [pc, #8]	; (24e54 <ble_hs_hci_evt_le_dispatch_find+0x10>)
   24e4a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   24e4e:	4770      	bx	lr
        return NULL;
   24e50:	2000      	movs	r0, #0
}
   24e52:	4770      	bx	lr
   24e54:	00032438 	.word	0x00032438

00024e58 <ble_hs_hci_evt_le_meta>:
ble_hs_hci_evt_le_meta(uint8_t event_code, const void *data, unsigned int len)
{
    const struct ble_hci_ev_le_meta *ev = data;
    ble_hs_hci_evt_le_fn *fn;

    if (len < sizeof(*ev)) {
   24e58:	b16a      	cbz	r2, 24e76 <ble_hs_hci_evt_le_meta+0x1e>
{
   24e5a:	b570      	push	{r4, r5, r6, lr}
   24e5c:	4615      	mov	r5, r2
   24e5e:	460c      	mov	r4, r1
        return BLE_HS_ECONTROLLER;
    }

    fn = ble_hs_hci_evt_le_dispatch_find(ev->subevent);
   24e60:	780e      	ldrb	r6, [r1, #0]
   24e62:	4630      	mov	r0, r6
   24e64:	f7ff ffee 	bl	24e44 <ble_hs_hci_evt_le_dispatch_find>
    if (fn) {
   24e68:	4603      	mov	r3, r0
   24e6a:	b130      	cbz	r0, 24e7a <ble_hs_hci_evt_le_meta+0x22>
        return fn(ev->subevent, data, len);
   24e6c:	462a      	mov	r2, r5
   24e6e:	4621      	mov	r1, r4
   24e70:	4630      	mov	r0, r6
   24e72:	4798      	blx	r3
    }

    return 0;
}
   24e74:	bd70      	pop	{r4, r5, r6, pc}
        return BLE_HS_ECONTROLLER;
   24e76:	200c      	movs	r0, #12
}
   24e78:	4770      	bx	lr
    return 0;
   24e7a:	2000      	movs	r0, #0
   24e7c:	e7fa      	b.n	24e74 <ble_hs_hci_evt_le_meta+0x1c>

00024e7e <ble_hs_hci_evt_le_adv_rpt_first_pass>:
{
    const struct ble_hci_ev_le_subev_adv_rpt *ev = data;
    const struct adv_report *rpt;
    int i;

    if (len < sizeof(*ev)) {
   24e7e:	2901      	cmp	r1, #1
   24e80:	d91a      	bls.n	24eb8 <ble_hs_hci_evt_le_adv_rpt_first_pass+0x3a>
{
   24e82:	b410      	push	{r4}
        return BLE_HS_ECONTROLLER;
    }

    len -= sizeof(*ev);
   24e84:	3902      	subs	r1, #2
    data += sizeof(*ev);
   24e86:	1c84      	adds	r4, r0, #2

    if (ev->num_reports < BLE_HCI_LE_ADV_RPT_NUM_RPTS_MIN ||
   24e88:	7840      	ldrb	r0, [r0, #1]
   24e8a:	1e43      	subs	r3, r0, #1
   24e8c:	b2db      	uxtb	r3, r3
   24e8e:	2b18      	cmp	r3, #24
   24e90:	d814      	bhi.n	24ebc <ble_hs_hci_evt_le_adv_rpt_first_pass+0x3e>
        ev->num_reports > BLE_HCI_LE_ADV_RPT_NUM_RPTS_MAX) {
        return BLE_HS_EBADDATA;
    }

    for (i = 0; i < ev->num_reports; i++) {
   24e92:	2200      	movs	r2, #0
   24e94:	4290      	cmp	r0, r2
   24e96:	dd0a      	ble.n	24eae <ble_hs_hci_evt_le_adv_rpt_first_pass+0x30>
        /* extra byte for RSSI after adv data */
        if (len < sizeof(*rpt) + 1) {
   24e98:	2909      	cmp	r1, #9
   24e9a:	d912      	bls.n	24ec2 <ble_hs_hci_evt_le_adv_rpt_first_pass+0x44>
            return BLE_HS_ECONTROLLER;
        }

        rpt = data;

        len -= sizeof(*rpt) + 1;
   24e9c:	390a      	subs	r1, #10
        data += sizeof(rpt) + 1;

        if (rpt->data_len > len) {
   24e9e:	7a23      	ldrb	r3, [r4, #8]
   24ea0:	428b      	cmp	r3, r1
   24ea2:	d810      	bhi.n	24ec6 <ble_hs_hci_evt_le_adv_rpt_first_pass+0x48>
            return BLE_HS_ECONTROLLER;
        }

        len -= rpt->data_len;
   24ea4:	1ac9      	subs	r1, r1, r3
        data += rpt->data_len;
   24ea6:	3305      	adds	r3, #5
   24ea8:	441c      	add	r4, r3
    for (i = 0; i < ev->num_reports; i++) {
   24eaa:	3201      	adds	r2, #1
   24eac:	e7f2      	b.n	24e94 <ble_hs_hci_evt_le_adv_rpt_first_pass+0x16>
    }

    /* Make sure length was correct */
    if (len) {
   24eae:	b909      	cbnz	r1, 24eb4 <ble_hs_hci_evt_le_adv_rpt_first_pass+0x36>
        return BLE_HS_ECONTROLLER;
    }

    return 0;
   24eb0:	2000      	movs	r0, #0
   24eb2:	e004      	b.n	24ebe <ble_hs_hci_evt_le_adv_rpt_first_pass+0x40>
        return BLE_HS_ECONTROLLER;
   24eb4:	200c      	movs	r0, #12
   24eb6:	e002      	b.n	24ebe <ble_hs_hci_evt_le_adv_rpt_first_pass+0x40>
        return BLE_HS_ECONTROLLER;
   24eb8:	200c      	movs	r0, #12
}
   24eba:	4770      	bx	lr
        return BLE_HS_EBADDATA;
   24ebc:	200a      	movs	r0, #10
}
   24ebe:	bc10      	pop	{r4}
   24ec0:	4770      	bx	lr
            return BLE_HS_ECONTROLLER;
   24ec2:	200c      	movs	r0, #12
   24ec4:	e7fb      	b.n	24ebe <ble_hs_hci_evt_le_adv_rpt_first_pass+0x40>
            return BLE_HS_ECONTROLLER;
   24ec6:	200c      	movs	r0, #12
   24ec8:	e7f9      	b.n	24ebe <ble_hs_hci_evt_le_adv_rpt_first_pass+0x40>

00024eca <ble_hs_hci_evt_le_ext_adv_rpt>:

        report = (const void *) &report->data[report->data_len];
    }
#endif
    return 0;
}
   24eca:	2000      	movs	r0, #0
   24ecc:	4770      	bx	lr

00024ece <ble_hs_hci_evt_le_periodic_adv_sync_estab>:

    ble_gap_rx_peroidic_adv_sync_estab(ev);
#endif

    return 0;
}
   24ece:	2000      	movs	r0, #0
   24ed0:	4770      	bx	lr

00024ed2 <ble_hs_hci_evt_le_periodic_adv_rpt>:

    ble_gap_rx_periodic_adv_rpt(ev);
#endif

return 0;
}
   24ed2:	2000      	movs	r0, #0
   24ed4:	4770      	bx	lr

00024ed6 <ble_hs_hci_evt_le_periodic_adv_sync_lost>:

    ble_gap_rx_periodic_adv_sync_lost(ev);

#endif
    return 0;
}
   24ed6:	2000      	movs	r0, #0
   24ed8:	4770      	bx	lr

00024eda <ble_hs_hci_evt_le_periodic_adv_sync_transfer>:

    ble_gap_rx_periodic_adv_sync_transfer(ev);

#endif
    return 0;
}
   24eda:	2000      	movs	r0, #0
   24edc:	4770      	bx	lr

00024ede <ble_hs_hci_evt_le_scan_timeout>:
    }

    ble_gap_rx_le_scan_timeout();
#endif
    return 0;
}
   24ede:	2000      	movs	r0, #0
   24ee0:	4770      	bx	lr

00024ee2 <ble_hs_hci_evt_le_adv_set_terminated>:
    }
    ble_gap_rx_adv_set_terminated(ev);
#endif

    return 0;
}
   24ee2:	2000      	movs	r0, #0
   24ee4:	4770      	bx	lr

00024ee6 <ble_hs_hci_evt_le_scan_req_rcvd>:

    ble_gap_rx_scan_req_rcvd(ev);
#endif

    return 0;
}
   24ee6:	2000      	movs	r0, #0
   24ee8:	4770      	bx	lr

00024eea <ble_hs_hci_evt_hw_error>:
    if (len != sizeof(*ev)) {
   24eea:	2a01      	cmp	r2, #1
   24eec:	d001      	beq.n	24ef2 <ble_hs_hci_evt_hw_error+0x8>
        return BLE_HS_ECONTROLLER;
   24eee:	200c      	movs	r0, #12
}
   24ef0:	4770      	bx	lr
{
   24ef2:	b508      	push	{r3, lr}
    ble_hs_hw_error(ev->hw_code);
   24ef4:	7808      	ldrb	r0, [r1, #0]
   24ef6:	f7fe feef 	bl	23cd8 <ble_hs_hw_error>
    return 0;
   24efa:	2000      	movs	r0, #0
}
   24efc:	bd08      	pop	{r3, pc}

00024efe <ble_hs_hci_evt_enc_key_refresh>:
    if (len != sizeof(*ev)) {
   24efe:	2a03      	cmp	r2, #3
   24f00:	d001      	beq.n	24f06 <ble_hs_hci_evt_enc_key_refresh+0x8>
        return BLE_HS_ECONTROLLER;
   24f02:	200c      	movs	r0, #12
}
   24f04:	4770      	bx	lr
{
   24f06:	b508      	push	{r3, lr}
   24f08:	4608      	mov	r0, r1
    ble_sm_enc_key_refresh_rx(ev);
   24f0a:	f002 fd5d 	bl	279c8 <ble_sm_enc_key_refresh_rx>
    return 0;
   24f0e:	2000      	movs	r0, #0
}
   24f10:	bd08      	pop	{r3, pc}

00024f12 <ble_hs_hci_evt_encrypt_change>:
    if (len != sizeof (*ev)) {
   24f12:	2a04      	cmp	r2, #4
   24f14:	d001      	beq.n	24f1a <ble_hs_hci_evt_encrypt_change+0x8>
        return BLE_HS_ECONTROLLER;
   24f16:	200c      	movs	r0, #12
}
   24f18:	4770      	bx	lr
{
   24f1a:	b508      	push	{r3, lr}
   24f1c:	4608      	mov	r0, r1
    ble_sm_enc_change_rx(ev);
   24f1e:	f002 fd49 	bl	279b4 <ble_sm_enc_change_rx>
    return 0;
   24f22:	2000      	movs	r0, #0
}
   24f24:	bd08      	pop	{r3, pc}

00024f26 <ble_hs_hci_evt_disconn_complete>:
    if (len != sizeof(*ev)) {
   24f26:	2a04      	cmp	r2, #4
   24f28:	d001      	beq.n	24f2e <ble_hs_hci_evt_disconn_complete+0x8>
        return BLE_HS_ECONTROLLER;
   24f2a:	200c      	movs	r0, #12
}
   24f2c:	4770      	bx	lr
{
   24f2e:	b510      	push	{r4, lr}
   24f30:	460c      	mov	r4, r1
    ble_hs_lock();
   24f32:	f7fe fda5 	bl	23a80 <ble_hs_lock>
    conn = ble_hs_conn_find(le16toh(ev->conn_handle));
   24f36:	f8b4 0001 	ldrh.w	r0, [r4, #1]
   24f3a:	f7ff fbf1 	bl	24720 <ble_hs_conn_find>
    if (conn != NULL) {
   24f3e:	b110      	cbz	r0, 24f46 <ble_hs_hci_evt_disconn_complete+0x20>
        ble_hs_hci_add_avail_pkts(conn->bhc_outstanding_pkts);
   24f40:	8f00      	ldrh	r0, [r0, #56]	; 0x38
   24f42:	f7ff fe25 	bl	24b90 <ble_hs_hci_add_avail_pkts>
    ble_hs_unlock();
   24f46:	f7fe fd9f 	bl	23a88 <ble_hs_unlock>
    ble_gap_rx_disconn_complete(ev);
   24f4a:	4620      	mov	r0, r4
   24f4c:	f7fc f906 	bl	2115c <ble_gap_rx_disconn_complete>
    ble_hs_wakeup_tx();
   24f50:	f7fe fdb0 	bl	23ab4 <ble_hs_wakeup_tx>
    return 0;
   24f54:	2000      	movs	r0, #0
}
   24f56:	bd10      	pop	{r4, pc}

00024f58 <ble_hs_hci_evt_num_completed_pkts>:
    if (len != sizeof(*ev) + (ev->count * sizeof(ev->completed[0]))) {
   24f58:	780b      	ldrb	r3, [r1, #0]
   24f5a:	009b      	lsls	r3, r3, #2
   24f5c:	3301      	adds	r3, #1
   24f5e:	4293      	cmp	r3, r2
   24f60:	d129      	bne.n	24fb6 <ble_hs_hci_evt_num_completed_pkts+0x5e>
{
   24f62:	b570      	push	{r4, r5, r6, lr}
   24f64:	460d      	mov	r5, r1
    for (i = 0; i < ev->count; i++) {
   24f66:	2400      	movs	r4, #0
   24f68:	e007      	b.n	24f7a <ble_hs_hci_evt_num_completed_pkts+0x22>
                    conn->bhc_outstanding_pkts -= num_pkts;
   24f6a:	1b9b      	subs	r3, r3, r6
   24f6c:	8703      	strh	r3, [r0, #56]	; 0x38
                ble_hs_hci_add_avail_pkts(num_pkts);
   24f6e:	4630      	mov	r0, r6
   24f70:	f7ff fe0e 	bl	24b90 <ble_hs_hci_add_avail_pkts>
            ble_hs_unlock();
   24f74:	f7fe fd88 	bl	23a88 <ble_hs_unlock>
    for (i = 0; i < ev->count; i++) {
   24f78:	3401      	adds	r4, #1
   24f7a:	782b      	ldrb	r3, [r5, #0]
   24f7c:	42a3      	cmp	r3, r4
   24f7e:	dd16      	ble.n	24fae <ble_hs_hci_evt_num_completed_pkts+0x56>
        num_pkts = le16toh(ev->completed[i].packets);
   24f80:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   24f84:	f8b3 6003 	ldrh.w	r6, [r3, #3]
        if (num_pkts > 0) {
   24f88:	2e00      	cmp	r6, #0
   24f8a:	d0f5      	beq.n	24f78 <ble_hs_hci_evt_num_completed_pkts+0x20>
            ble_hs_lock();
   24f8c:	f7fe fd78 	bl	23a80 <ble_hs_lock>
            conn = ble_hs_conn_find(le16toh(ev->completed[i].handle));
   24f90:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   24f94:	f8b3 0001 	ldrh.w	r0, [r3, #1]
   24f98:	f7ff fbc2 	bl	24720 <ble_hs_conn_find>
            if (conn != NULL) {
   24f9c:	2800      	cmp	r0, #0
   24f9e:	d0e9      	beq.n	24f74 <ble_hs_hci_evt_num_completed_pkts+0x1c>
                if (conn->bhc_outstanding_pkts < num_pkts) {
   24fa0:	8f03      	ldrh	r3, [r0, #56]	; 0x38
   24fa2:	42b3      	cmp	r3, r6
   24fa4:	d2e1      	bcs.n	24f6a <ble_hs_hci_evt_num_completed_pkts+0x12>
                    ble_hs_sched_reset(BLE_HS_ECONTROLLER);
   24fa6:	200c      	movs	r0, #12
   24fa8:	f7fe fe86 	bl	23cb8 <ble_hs_sched_reset>
   24fac:	e7df      	b.n	24f6e <ble_hs_hci_evt_num_completed_pkts+0x16>
    ble_hs_wakeup_tx();
   24fae:	f7fe fd81 	bl	23ab4 <ble_hs_wakeup_tx>
    return 0;
   24fb2:	2000      	movs	r0, #0
}
   24fb4:	bd70      	pop	{r4, r5, r6, pc}
        return BLE_HS_ECONTROLLER;
   24fb6:	200c      	movs	r0, #12
}
   24fb8:	4770      	bx	lr

00024fba <ble_hs_hci_evt_le_phy_update_complete>:
ble_hs_hci_evt_le_phy_update_complete(uint8_t subevent, const void *data,
                                      unsigned int len)
{
    const struct ble_hci_ev_le_subev_phy_update_complete *ev = data;

    if (len != sizeof(*ev)) {
   24fba:	2a06      	cmp	r2, #6
   24fbc:	d001      	beq.n	24fc2 <ble_hs_hci_evt_le_phy_update_complete+0x8>
        return BLE_HS_ECONTROLLER;
   24fbe:	200c      	movs	r0, #12
    }

    ble_gap_rx_phy_update_complete(ev);

    return 0;
}
   24fc0:	4770      	bx	lr
{
   24fc2:	b508      	push	{r3, lr}
   24fc4:	4608      	mov	r0, r1
    ble_gap_rx_phy_update_complete(ev);
   24fc6:	f7fb fde2 	bl	20b8e <ble_gap_rx_phy_update_complete>
    return 0;
   24fca:	2000      	movs	r0, #0
}
   24fcc:	bd08      	pop	{r3, pc}

00024fce <ble_hs_hci_evt_le_dir_adv_rpt>:
{
   24fce:	b530      	push	{r4, r5, lr}
   24fd0:	b087      	sub	sp, #28
    struct ble_gap_disc_desc desc = {0};
   24fd2:	2300      	movs	r3, #0
   24fd4:	9300      	str	r3, [sp, #0]
   24fd6:	9301      	str	r3, [sp, #4]
   24fd8:	9302      	str	r3, [sp, #8]
   24fda:	9303      	str	r3, [sp, #12]
   24fdc:	9304      	str	r3, [sp, #16]
   24fde:	9305      	str	r3, [sp, #20]
    if (len < sizeof(*ev) || len != ev->num_reports * sizeof(ev->reports[0])) {
   24fe0:	2a01      	cmp	r2, #1
   24fe2:	d92f      	bls.n	25044 <ble_hs_hci_evt_le_dir_adv_rpt+0x76>
   24fe4:	784b      	ldrb	r3, [r1, #1]
   24fe6:	ebb2 1f03 	cmp.w	r2, r3, lsl #4
   24fea:	d12d      	bne.n	25048 <ble_hs_hci_evt_le_dir_adv_rpt+0x7a>
   24fec:	460d      	mov	r5, r1
    for (i = 0; i < ev->num_reports; i++) {
   24fee:	2400      	movs	r4, #0
   24ff0:	e022      	b.n	25038 <ble_hs_hci_evt_le_dir_adv_rpt+0x6a>
        desc.event_type = ev->reports[i].type;
   24ff2:	eb05 1304 	add.w	r3, r5, r4, lsl #4
   24ff6:	789a      	ldrb	r2, [r3, #2]
   24ff8:	f88d 2000 	strb.w	r2, [sp]
        desc.addr.type = ev->reports[i].addr_type;
   24ffc:	78da      	ldrb	r2, [r3, #3]
   24ffe:	f88d 2002 	strb.w	r2, [sp, #2]
        memcpy(desc.addr.val, ev->reports[i].addr, BLE_DEV_ADDR_LEN);
   25002:	461a      	mov	r2, r3
   25004:	f852 1f04 	ldr.w	r1, [r2, #4]!
   25008:	f8cd 1003 	str.w	r1, [sp, #3]
   2500c:	8892      	ldrh	r2, [r2, #4]
   2500e:	f8ad 2007 	strh.w	r2, [sp, #7]
        desc.direct_addr.type = ev->reports[i].dir_addr_type;
   25012:	7a9a      	ldrb	r2, [r3, #10]
   25014:	f88d 2010 	strb.w	r2, [sp, #16]
        memcpy(desc.direct_addr.val, ev->reports[i].dir_addr, BLE_DEV_ADDR_LEN);
   25018:	461a      	mov	r2, r3
   2501a:	f852 1f0b 	ldr.w	r1, [r2, #11]!
   2501e:	f8cd 1011 	str.w	r1, [sp, #17]
   25022:	8892      	ldrh	r2, [r2, #4]
   25024:	f8ad 2015 	strh.w	r2, [sp, #21]
        desc.rssi = ev->reports[i].rssi;
   25028:	f993 3011 	ldrsb.w	r3, [r3, #17]
   2502c:	f88d 3009 	strb.w	r3, [sp, #9]
        ble_gap_rx_adv_report(&desc);
   25030:	4668      	mov	r0, sp
   25032:	f7fb fd83 	bl	20b3c <ble_gap_rx_adv_report>
    for (i = 0; i < ev->num_reports; i++) {
   25036:	3401      	adds	r4, #1
   25038:	786b      	ldrb	r3, [r5, #1]
   2503a:	42a3      	cmp	r3, r4
   2503c:	dcd9      	bgt.n	24ff2 <ble_hs_hci_evt_le_dir_adv_rpt+0x24>
    return 0;
   2503e:	2000      	movs	r0, #0
}
   25040:	b007      	add	sp, #28
   25042:	bd30      	pop	{r4, r5, pc}
        return BLE_HS_ECONTROLLER;
   25044:	200c      	movs	r0, #12
   25046:	e7fb      	b.n	25040 <ble_hs_hci_evt_le_dir_adv_rpt+0x72>
   25048:	200c      	movs	r0, #12
   2504a:	e7f9      	b.n	25040 <ble_hs_hci_evt_le_dir_adv_rpt+0x72>

0002504c <ble_hs_hci_evt_le_adv_rpt>:
{
   2504c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2504e:	b087      	sub	sp, #28
   25050:	460e      	mov	r6, r1
    struct ble_gap_disc_desc desc = {0};
   25052:	2300      	movs	r3, #0
   25054:	9300      	str	r3, [sp, #0]
   25056:	9301      	str	r3, [sp, #4]
   25058:	9302      	str	r3, [sp, #8]
   2505a:	9303      	str	r3, [sp, #12]
   2505c:	9304      	str	r3, [sp, #16]
   2505e:	9305      	str	r3, [sp, #20]
    rc = ble_hs_hci_evt_le_adv_rpt_first_pass(data, len);
   25060:	4611      	mov	r1, r2
   25062:	4630      	mov	r0, r6
   25064:	f7ff ff0b 	bl	24e7e <ble_hs_hci_evt_le_adv_rpt_first_pass>
    if (rc != 0) {
   25068:	4607      	mov	r7, r0
   2506a:	bb58      	cbnz	r0, 250c4 <ble_hs_hci_evt_le_adv_rpt+0x78>
    data += sizeof(*ev);
   2506c:	1cb3      	adds	r3, r6, #2
    desc.direct_addr = *BLE_ADDR_ANY;
   2506e:	2200      	movs	r2, #0
   25070:	9204      	str	r2, [sp, #16]
   25072:	f8cd 2013 	str.w	r2, [sp, #19]
    for (i = 0; i < ev->num_reports; i++) {
   25076:	4605      	mov	r5, r0
   25078:	e021      	b.n	250be <ble_hs_hci_evt_le_adv_rpt+0x72>
        data += sizeof(rpt) + rpt->data_len + 1;
   2507a:	7a1c      	ldrb	r4, [r3, #8]
   2507c:	3405      	adds	r4, #5
   2507e:	441c      	add	r4, r3
        desc.event_type = rpt->type;
   25080:	781a      	ldrb	r2, [r3, #0]
   25082:	f88d 2000 	strb.w	r2, [sp]
        desc.addr.type = rpt->addr_type;
   25086:	785a      	ldrb	r2, [r3, #1]
   25088:	f88d 2002 	strb.w	r2, [sp, #2]
        memcpy(desc.addr.val, rpt->addr, BLE_DEV_ADDR_LEN);
   2508c:	461a      	mov	r2, r3
   2508e:	f852 1f02 	ldr.w	r1, [r2, #2]!
   25092:	f8cd 1003 	str.w	r1, [sp, #3]
   25096:	8892      	ldrh	r2, [r2, #4]
   25098:	f8ad 2007 	strh.w	r2, [sp, #7]
        desc.length_data = rpt->data_len;
   2509c:	7a1a      	ldrb	r2, [r3, #8]
   2509e:	f88d 2001 	strb.w	r2, [sp, #1]
        desc.data = rpt->data;
   250a2:	f103 0209 	add.w	r2, r3, #9
   250a6:	9203      	str	r2, [sp, #12]
        desc.rssi = rpt->data[rpt->data_len];
   250a8:	7a1a      	ldrb	r2, [r3, #8]
   250aa:	4413      	add	r3, r2
   250ac:	f993 3009 	ldrsb.w	r3, [r3, #9]
   250b0:	f88d 3009 	strb.w	r3, [sp, #9]
        ble_gap_rx_adv_report(&desc);
   250b4:	4668      	mov	r0, sp
   250b6:	f7fb fd41 	bl	20b3c <ble_gap_rx_adv_report>
    for (i = 0; i < ev->num_reports; i++) {
   250ba:	3501      	adds	r5, #1
        data += sizeof(rpt) + rpt->data_len + 1;
   250bc:	4623      	mov	r3, r4
    for (i = 0; i < ev->num_reports; i++) {
   250be:	7872      	ldrb	r2, [r6, #1]
   250c0:	42aa      	cmp	r2, r5
   250c2:	dcda      	bgt.n	2507a <ble_hs_hci_evt_le_adv_rpt+0x2e>
}
   250c4:	4638      	mov	r0, r7
   250c6:	b007      	add	sp, #28
   250c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

000250ca <ble_hs_hci_evt_le_enh_conn_complete>:
    if (len != sizeof(*ev)) {
   250ca:	2a1f      	cmp	r2, #31
   250cc:	d001      	beq.n	250d2 <ble_hs_hci_evt_le_enh_conn_complete+0x8>
        return BLE_HS_ECONTROLLER;
   250ce:	200c      	movs	r0, #12
}
   250d0:	4770      	bx	lr
{
   250d2:	b510      	push	{r4, lr}
   250d4:	b088      	sub	sp, #32
   250d6:	460c      	mov	r4, r1
    memset(&evt, 0, sizeof(evt));
   250d8:	2220      	movs	r2, #32
   250da:	2100      	movs	r1, #0
   250dc:	4668      	mov	r0, sp
   250de:	f7e9 fc87 	bl	e9f0 <memset>
    evt.status = ev->status;
   250e2:	7863      	ldrb	r3, [r4, #1]
   250e4:	f88d 3000 	strb.w	r3, [sp]
    if (evt.status == BLE_ERR_SUCCESS) {
   250e8:	bb63      	cbnz	r3, 25144 <ble_hs_hci_evt_le_enh_conn_complete+0x7a>
        evt.connection_handle = le16toh(ev->conn_handle);
   250ea:	8863      	ldrh	r3, [r4, #2]
   250ec:	f8ad 3002 	strh.w	r3, [sp, #2]
        evt.role = ev->role;
   250f0:	7923      	ldrb	r3, [r4, #4]
   250f2:	f88d 3004 	strb.w	r3, [sp, #4]
        evt.peer_addr_type = ev->peer_addr_type;
   250f6:	7963      	ldrb	r3, [r4, #5]
   250f8:	f88d 3005 	strb.w	r3, [sp, #5]
        memcpy(evt.peer_addr, ev->peer_addr, BLE_DEV_ADDR_LEN);
   250fc:	4623      	mov	r3, r4
   250fe:	f853 2f06 	ldr.w	r2, [r3, #6]!
   25102:	f8cd 2006 	str.w	r2, [sp, #6]
   25106:	889b      	ldrh	r3, [r3, #4]
   25108:	f8ad 300a 	strh.w	r3, [sp, #10]
        memcpy(evt.local_rpa, ev->local_rpa, BLE_DEV_ADDR_LEN);
   2510c:	4623      	mov	r3, r4
   2510e:	f853 2f0c 	ldr.w	r2, [r3, #12]!
   25112:	f8cd 2013 	str.w	r2, [sp, #19]
   25116:	889b      	ldrh	r3, [r3, #4]
   25118:	f8ad 3017 	strh.w	r3, [sp, #23]
        memcpy(evt.peer_rpa,ev->peer_rpa, BLE_DEV_ADDR_LEN);
   2511c:	4623      	mov	r3, r4
   2511e:	f853 2f12 	ldr.w	r2, [r3, #18]!
   25122:	f8cd 2019 	str.w	r2, [sp, #25]
   25126:	889b      	ldrh	r3, [r3, #4]
   25128:	f8ad 301d 	strh.w	r3, [sp, #29]
        evt.conn_itvl = le16toh(ev->conn_itvl);
   2512c:	8b23      	ldrh	r3, [r4, #24]
   2512e:	f8ad 300c 	strh.w	r3, [sp, #12]
        evt.conn_latency = le16toh(ev->conn_latency);
   25132:	8b63      	ldrh	r3, [r4, #26]
   25134:	f8ad 300e 	strh.w	r3, [sp, #14]
        evt.supervision_timeout = le16toh(ev->supervision_timeout);
   25138:	8ba3      	ldrh	r3, [r4, #28]
   2513a:	f8ad 3010 	strh.w	r3, [sp, #16]
        evt.master_clk_acc = ev->mca;
   2513e:	7fa3      	ldrb	r3, [r4, #30]
   25140:	f88d 3012 	strb.w	r3, [sp, #18]
    return ble_gap_rx_conn_complete(&evt, 0);
   25144:	2100      	movs	r1, #0
   25146:	4668      	mov	r0, sp
   25148:	f7fb fe0e 	bl	20d68 <ble_gap_rx_conn_complete>
}
   2514c:	b008      	add	sp, #32
   2514e:	bd10      	pop	{r4, pc}

00025150 <ble_hs_hci_evt_le_conn_complete>:
    if (len != sizeof(*ev)) {
   25150:	2a13      	cmp	r2, #19
   25152:	d001      	beq.n	25158 <ble_hs_hci_evt_le_conn_complete+0x8>
        return BLE_HS_ECONTROLLER;
   25154:	200c      	movs	r0, #12
}
   25156:	4770      	bx	lr
{
   25158:	b510      	push	{r4, lr}
   2515a:	b088      	sub	sp, #32
   2515c:	460c      	mov	r4, r1
    memset(&evt, 0, sizeof(evt));
   2515e:	2220      	movs	r2, #32
   25160:	2100      	movs	r1, #0
   25162:	4668      	mov	r0, sp
   25164:	f7e9 fc44 	bl	e9f0 <memset>
    evt.status = ev->status;
   25168:	7863      	ldrb	r3, [r4, #1]
   2516a:	f88d 3000 	strb.w	r3, [sp]
    if (evt.status == BLE_ERR_SUCCESS) {
   2516e:	b9e3      	cbnz	r3, 251aa <ble_hs_hci_evt_le_conn_complete+0x5a>
        evt.connection_handle = le16toh(ev->conn_handle);
   25170:	8863      	ldrh	r3, [r4, #2]
   25172:	f8ad 3002 	strh.w	r3, [sp, #2]
        evt.role = ev->role;
   25176:	7923      	ldrb	r3, [r4, #4]
   25178:	f88d 3004 	strb.w	r3, [sp, #4]
        evt.peer_addr_type = ev->peer_addr_type;
   2517c:	7963      	ldrb	r3, [r4, #5]
   2517e:	f88d 3005 	strb.w	r3, [sp, #5]
        memcpy(evt.peer_addr, ev->peer_addr, BLE_DEV_ADDR_LEN);
   25182:	4623      	mov	r3, r4
   25184:	f853 2f06 	ldr.w	r2, [r3, #6]!
   25188:	f8cd 2006 	str.w	r2, [sp, #6]
   2518c:	889b      	ldrh	r3, [r3, #4]
   2518e:	f8ad 300a 	strh.w	r3, [sp, #10]
        evt.conn_itvl = le16toh(ev->conn_itvl);
   25192:	89a3      	ldrh	r3, [r4, #12]
   25194:	f8ad 300c 	strh.w	r3, [sp, #12]
        evt.conn_latency = le16toh(ev->conn_latency);
   25198:	89e3      	ldrh	r3, [r4, #14]
   2519a:	f8ad 300e 	strh.w	r3, [sp, #14]
        evt.supervision_timeout = le16toh(ev->supervision_timeout);
   2519e:	8a23      	ldrh	r3, [r4, #16]
   251a0:	f8ad 3010 	strh.w	r3, [sp, #16]
        evt.master_clk_acc = ev->mca;
   251a4:	7ca3      	ldrb	r3, [r4, #18]
   251a6:	f88d 3012 	strb.w	r3, [sp, #18]
    return ble_gap_rx_conn_complete(&evt, 0);
   251aa:	2100      	movs	r1, #0
   251ac:	4668      	mov	r0, sp
   251ae:	f7fb fddb 	bl	20d68 <ble_gap_rx_conn_complete>
}
   251b2:	b008      	add	sp, #32
   251b4:	bd10      	pop	{r4, pc}

000251b6 <ble_hs_hci_evt_le_conn_parm_req>:
    if (len != sizeof(*ev)) {
   251b6:	2a0b      	cmp	r2, #11
   251b8:	d001      	beq.n	251be <ble_hs_hci_evt_le_conn_parm_req+0x8>
        return BLE_HS_ECONTROLLER;
   251ba:	200c      	movs	r0, #12
}
   251bc:	4770      	bx	lr
{
   251be:	b508      	push	{r3, lr}
   251c0:	4608      	mov	r0, r1
    ble_gap_rx_param_req(ev);
   251c2:	f7fc f8c3 	bl	2134c <ble_gap_rx_param_req>
    return 0;
   251c6:	2000      	movs	r0, #0
}
   251c8:	bd08      	pop	{r3, pc}

000251ca <ble_hs_hci_evt_le_lt_key_req>:
    if (len != sizeof(*ev)) {
   251ca:	2a0d      	cmp	r2, #13
   251cc:	d001      	beq.n	251d2 <ble_hs_hci_evt_le_lt_key_req+0x8>
        return BLE_HS_ECONTROLLER;
   251ce:	200c      	movs	r0, #12
}
   251d0:	4770      	bx	lr
{
   251d2:	b508      	push	{r3, lr}
   251d4:	4608      	mov	r0, r1
    ble_sm_ltk_req_rx(ev);
   251d6:	f002 fbff 	bl	279d8 <ble_sm_ltk_req_rx>
    return 0;
   251da:	2000      	movs	r0, #0
}
   251dc:	bd08      	pop	{r3, pc}

000251de <ble_hs_hci_evt_le_rd_rem_used_feat_complete>:
    if (len != sizeof(*ev)) {
   251de:	2a0c      	cmp	r2, #12
   251e0:	d001      	beq.n	251e6 <ble_hs_hci_evt_le_rd_rem_used_feat_complete+0x8>
        return BLE_HS_ECONTROLLER;
   251e2:	200c      	movs	r0, #12
}
   251e4:	4770      	bx	lr
{
   251e6:	b508      	push	{r3, lr}
   251e8:	4608      	mov	r0, r1
    ble_gap_rx_rd_rem_sup_feat_complete(ev);
   251ea:	f7fb fca8 	bl	20b3e <ble_gap_rx_rd_rem_sup_feat_complete>
    return 0;
   251ee:	2000      	movs	r0, #0
}
   251f0:	bd08      	pop	{r3, pc}

000251f2 <ble_hs_hci_evt_le_conn_upd_complete>:
    if (len != sizeof(*ev)) {
   251f2:	2a0a      	cmp	r2, #10
   251f4:	d001      	beq.n	251fa <ble_hs_hci_evt_le_conn_upd_complete+0x8>
        return BLE_HS_ECONTROLLER;
   251f6:	200c      	movs	r0, #12
}
   251f8:	4770      	bx	lr
{
   251fa:	b508      	push	{r3, lr}
   251fc:	4608      	mov	r0, r1
    ble_gap_rx_update_complete(ev);
   251fe:	f7fb ffdf 	bl	211c0 <ble_gap_rx_update_complete>
    return 0;
   25202:	2000      	movs	r0, #0
}
   25204:	bd08      	pop	{r3, pc}
	...

00025208 <ble_hs_hci_evt_process>:

int
ble_hs_hci_evt_process(const struct ble_hci_ev *ev)
{
   25208:	b538      	push	{r3, r4, r5, lr}
   2520a:	4604      	mov	r4, r0
    const struct ble_hs_hci_evt_dispatch_entry *entry;
    int rc;

    /* Count events received */
    STATS_INC(ble_hs_stats, hci_event);
   2520c:	4a0c      	ldr	r2, [pc, #48]	; (25240 <ble_hs_hci_evt_process+0x38>)
   2520e:	6993      	ldr	r3, [r2, #24]
   25210:	3301      	adds	r3, #1
   25212:	6193      	str	r3, [r2, #24]


    entry = ble_hs_hci_evt_dispatch_find(ev->opcode);
   25214:	7805      	ldrb	r5, [r0, #0]
   25216:	4628      	mov	r0, r5
   25218:	f7ff fe02 	bl	24e20 <ble_hs_hci_evt_dispatch_find>
    if (entry == NULL) {
   2521c:	b150      	cbz	r0, 25234 <ble_hs_hci_evt_process+0x2c>
        STATS_INC(ble_hs_stats, hci_unknown_event);
        rc = BLE_HS_ENOTSUP;
    } else {
        rc = entry->cb(ev->opcode, ev->data, ev->length);
   2521e:	6843      	ldr	r3, [r0, #4]
   25220:	7862      	ldrb	r2, [r4, #1]
   25222:	1ca1      	adds	r1, r4, #2
   25224:	4628      	mov	r0, r5
   25226:	4798      	blx	r3
   25228:	4605      	mov	r5, r0
    }

    ble_hci_trans_buf_free((uint8_t *) ev);
   2522a:	4620      	mov	r0, r4
   2522c:	f005 f836 	bl	2a29c <ble_hci_trans_buf_free>

    return rc;
}
   25230:	4628      	mov	r0, r5
   25232:	bd38      	pop	{r3, r4, r5, pc}
        STATS_INC(ble_hs_stats, hci_unknown_event);
   25234:	4a02      	ldr	r2, [pc, #8]	; (25240 <ble_hs_hci_evt_process+0x38>)
   25236:	6a13      	ldr	r3, [r2, #32]
   25238:	3301      	adds	r3, #1
   2523a:	6213      	str	r3, [r2, #32]
        rc = BLE_HS_ENOTSUP;
   2523c:	2508      	movs	r5, #8
   2523e:	e7f4      	b.n	2522a <ble_hs_hci_evt_process+0x22>
   25240:	200040b8 	.word	0x200040b8

00025244 <ble_hs_hci_evt_acl_process>:
 *
 * @return                      0 on success; nonzero on failure.
 */
int
ble_hs_hci_evt_acl_process(struct os_mbuf *om)
{
   25244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25248:	b086      	sub	sp, #24
   2524a:	4604      	mov	r4, r0
    ble_l2cap_rx_fn *rx_cb;
    uint16_t conn_handle;
    int reject_cid;
    int rc;

    rc = ble_hs_hci_util_data_hdr_strip(om, &hci_hdr);
   2524c:	a905      	add	r1, sp, #20
   2524e:	f000 f8a5 	bl	2539c <ble_hs_hci_util_data_hdr_strip>
    if (rc != 0) {
   25252:	4605      	mov	r5, r0
   25254:	b940      	cbnz	r0, 25268 <ble_hs_hci_evt_acl_process+0x24>
    BLE_HS_LOG(DEBUG, "ble_hs_hci_evt_acl_process(): conn_handle=%u pb=%x "
                      "len=%u data=",
               BLE_HCI_DATA_HANDLE(hci_hdr.hdh_handle_pb_bc),
               BLE_HCI_DATA_PB(hci_hdr.hdh_handle_pb_bc),
               hci_hdr.hdh_len);
    ble_hs_log_mbuf(om);
   25256:	4620      	mov	r0, r4
   25258:	f000 f9a8 	bl	255ac <ble_hs_log_mbuf>
    BLE_HS_LOG(DEBUG, "\n");
#endif
#endif

    if (hci_hdr.hdh_len != OS_MBUF_PKTHDR(om)->omp_len) {
   2525c:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   25260:	8a23      	ldrh	r3, [r4, #16]
   25262:	429a      	cmp	r2, r3
   25264:	d007      	beq.n	25276 <ble_hs_hci_evt_acl_process+0x32>
        rc = BLE_HS_EBADDATA;
   25266:	250a      	movs	r5, #10
    }

    return 0;

err:
    os_mbuf_free_chain(om);
   25268:	4620      	mov	r0, r4
   2526a:	f7e8 f8d9 	bl	d420 <os_mbuf_free_chain>
    return rc;
}
   2526e:	4628      	mov	r0, r5
   25270:	b006      	add	sp, #24
   25272:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    conn_handle = BLE_HCI_DATA_HANDLE(hci_hdr.hdh_handle_pb_bc);
   25276:	f8bd 6014 	ldrh.w	r6, [sp, #20]
   2527a:	f3c6 060b 	ubfx	r6, r6, #0, #12
    ble_hs_lock();
   2527e:	f7fe fbff 	bl	23a80 <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
   25282:	4630      	mov	r0, r6
   25284:	f7ff fa4c 	bl	24720 <ble_hs_conn_find>
    if (conn == NULL) {
   25288:	4680      	mov	r8, r0
   2528a:	b198      	cbz	r0, 252b4 <ble_hs_hci_evt_acl_process+0x70>
        rc = ble_l2cap_rx(conn, &hci_hdr, om, &rx_cb, &reject_cid);
   2528c:	ab03      	add	r3, sp, #12
   2528e:	9300      	str	r3, [sp, #0]
   25290:	ab04      	add	r3, sp, #16
   25292:	4622      	mov	r2, r4
   25294:	a905      	add	r1, sp, #20
   25296:	f000 fdc8 	bl	25e2a <ble_l2cap_rx>
   2529a:	4607      	mov	r7, r0
        om = NULL;
   2529c:	2400      	movs	r4, #0
    ble_hs_unlock();
   2529e:	f7fe fbf3 	bl	23a88 <ble_hs_unlock>
    switch (rc) {
   252a2:	b167      	cbz	r7, 252be <ble_hs_hci_evt_acl_process+0x7a>
   252a4:	2f01      	cmp	r7, #1
   252a6:	d0e2      	beq.n	2526e <ble_hs_hci_evt_acl_process+0x2a>
        if (reject_cid != -1) {
   252a8:	9b03      	ldr	r3, [sp, #12]
   252aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   252ae:	d111      	bne.n	252d4 <ble_hs_hci_evt_acl_process+0x90>
   252b0:	463d      	mov	r5, r7
   252b2:	e7d9      	b.n	25268 <ble_hs_hci_evt_acl_process+0x24>
        reject_cid = -1;
   252b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   252b8:	9303      	str	r3, [sp, #12]
        rc = BLE_HS_ENOTCONN;
   252ba:	2707      	movs	r7, #7
   252bc:	e7ef      	b.n	2529e <ble_hs_hci_evt_acl_process+0x5a>
        rc = rx_cb(conn->bhc_rx_chan);
   252be:	f8d8 0030 	ldr.w	r0, [r8, #48]	; 0x30
   252c2:	9b04      	ldr	r3, [sp, #16]
   252c4:	4798      	blx	r3
        ble_l2cap_remove_rx(conn, conn->bhc_rx_chan);
   252c6:	f8d8 1030 	ldr.w	r1, [r8, #48]	; 0x30
   252ca:	4640      	mov	r0, r8
   252cc:	f000 fd7d 	bl	25dca <ble_l2cap_remove_rx>
    return 0;
   252d0:	463d      	mov	r5, r7
        break;
   252d2:	e7cc      	b.n	2526e <ble_hs_hci_evt_acl_process+0x2a>
            ble_l2cap_sig_reject_invalid_cid_tx(conn_handle, 0, 0, reject_cid);
   252d4:	b29b      	uxth	r3, r3
   252d6:	2200      	movs	r2, #0
   252d8:	4611      	mov	r1, r2
   252da:	4630      	mov	r0, r6
   252dc:	f001 f912 	bl	26504 <ble_l2cap_sig_reject_invalid_cid_tx>
   252e0:	463d      	mov	r5, r7
   252e2:	e7c1      	b.n	25268 <ble_hs_hci_evt_acl_process+0x24>

000252e4 <ble_hs_hci_util_handle_pb_bc_join>:
{
    BLE_HS_DBG_ASSERT(handle <= 0x0fff);
    BLE_HS_DBG_ASSERT(pb <= 0x03);
    BLE_HS_DBG_ASSERT(bc <= 0x03);

    return (handle  << 0)   |
   252e4:	ea40 3001 	orr.w	r0, r0, r1, lsl #12
   252e8:	b200      	sxth	r0, r0
           (pb      << 12)  |
   252ea:	ea40 3082 	orr.w	r0, r0, r2, lsl #14
           (bc      << 14);
}
   252ee:	b280      	uxth	r0, r0
   252f0:	4770      	bx	lr
	...

000252f4 <ble_hs_hci_util_read_adv_tx_pwr>:

int
ble_hs_hci_util_read_adv_tx_pwr(int8_t *out_tx_pwr)
{
   252f4:	b530      	push	{r4, r5, lr}
   252f6:	b085      	sub	sp, #20
   252f8:	4605      	mov	r5, r0
    struct ble_hci_le_rd_adv_chan_txpwr_rp rsp;
    int rc;

    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   252fa:	2301      	movs	r3, #1
   252fc:	9300      	str	r3, [sp, #0]
   252fe:	ab03      	add	r3, sp, #12
   25300:	2200      	movs	r2, #0
   25302:	4611      	mov	r1, r2
   25304:	f242 0007 	movw	r0, #8199	; 0x2007
   25308:	f7ff fc54 	bl	24bb4 <ble_hs_hci_cmd_tx>
                                      BLE_HCI_OCF_LE_RD_ADV_CHAN_TXPWR),
                           NULL, 0, &rsp, sizeof(rsp));
    if (rc != 0) {
   2530c:	4604      	mov	r4, r0
   2530e:	b930      	cbnz	r0, 2531e <ble_hs_hci_util_read_adv_tx_pwr+0x2a>
        return rc;
    }

    *out_tx_pwr = rsp.power_level;
   25310:	f99d 300c 	ldrsb.w	r3, [sp, #12]
   25314:	702b      	strb	r3, [r5, #0]

    if (*out_tx_pwr < BLE_HCI_ADV_CHAN_TXPWR_MIN ||
   25316:	3314      	adds	r3, #20
   25318:	b2db      	uxtb	r3, r3
   2531a:	2b1e      	cmp	r3, #30
   2531c:	d802      	bhi.n	25324 <ble_hs_hci_util_read_adv_tx_pwr+0x30>
        *out_tx_pwr > BLE_HCI_ADV_CHAN_TXPWR_MAX) {
        BLE_HS_LOG(WARN, "advertiser txpwr out of range\n");
    }

    return 0;
}
   2531e:	4620      	mov	r0, r4
   25320:	b005      	add	sp, #20
   25322:	bd30      	pop	{r4, r5, pc}
        BLE_HS_LOG(WARN, "advertiser txpwr out of range\n");
   25324:	4a02      	ldr	r2, [pc, #8]	; (25330 <ble_hs_hci_util_read_adv_tx_pwr+0x3c>)
   25326:	2102      	movs	r1, #2
   25328:	2004      	movs	r0, #4
   2532a:	f7ec f9d9 	bl	116e0 <modlog_printf>
   2532e:	e7f6      	b.n	2531e <ble_hs_hci_util_read_adv_tx_pwr+0x2a>
   25330:	0003249c 	.word	0x0003249c

00025334 <ble_hs_hci_util_rand>:

int
ble_hs_hci_util_rand(void *dst, int len)
{
   25334:	b570      	push	{r4, r5, r6, lr}
   25336:	b084      	sub	sp, #16
   25338:	4606      	mov	r6, r0
   2533a:	460c      	mov	r4, r1
    uint8_t *u8ptr;
    int chunk_sz;
    int rc;

    u8ptr = dst;
    while (len > 0) {
   2533c:	2c00      	cmp	r4, #0
   2533e:	dd16      	ble.n	2536e <ble_hs_hci_util_rand+0x3a>
        rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE, BLE_HCI_OCF_LE_RAND),
   25340:	2308      	movs	r3, #8
   25342:	9300      	str	r3, [sp, #0]
   25344:	446b      	add	r3, sp
   25346:	2200      	movs	r2, #0
   25348:	4611      	mov	r1, r2
   2534a:	f242 0018 	movw	r0, #8216	; 0x2018
   2534e:	f7ff fc31 	bl	24bb4 <ble_hs_hci_cmd_tx>
                               NULL, 0, &rsp, sizeof(rsp));
        if (rc != 0) {
   25352:	4603      	mov	r3, r0
   25354:	b960      	cbnz	r0, 25370 <ble_hs_hci_util_rand+0x3c>
            return rc;
        }

        chunk_sz = min(len, sizeof(rsp));
   25356:	4625      	mov	r5, r4
   25358:	2c08      	cmp	r4, #8
   2535a:	bf28      	it	cs
   2535c:	2508      	movcs	r5, #8
        memcpy(u8ptr, &rsp.random_number, chunk_sz);
   2535e:	462a      	mov	r2, r5
   25360:	a902      	add	r1, sp, #8
   25362:	4630      	mov	r0, r6
   25364:	f7e9 fb1c 	bl	e9a0 <memcpy>

        len -= chunk_sz;
   25368:	1b64      	subs	r4, r4, r5
        u8ptr += chunk_sz;
   2536a:	442e      	add	r6, r5
   2536c:	e7e6      	b.n	2533c <ble_hs_hci_util_rand+0x8>
    }

    return 0;
   2536e:	2300      	movs	r3, #0
}
   25370:	4618      	mov	r0, r3
   25372:	b004      	add	sp, #16
   25374:	bd70      	pop	{r4, r5, r6, pc}

00025376 <ble_hs_hci_util_set_random_addr>:
    return 0;
}

int
ble_hs_hci_util_set_random_addr(const uint8_t *addr)
{
   25376:	b500      	push	{lr}
   25378:	b085      	sub	sp, #20
   2537a:	4603      	mov	r3, r0
    struct ble_hci_le_set_rand_addr_cp cmd;

    memcpy(cmd.addr, addr, BLE_DEV_ADDR_LEN);
   2537c:	6800      	ldr	r0, [r0, #0]
   2537e:	9002      	str	r0, [sp, #8]
   25380:	889b      	ldrh	r3, [r3, #4]
   25382:	f8ad 300c 	strh.w	r3, [sp, #12]

    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   25386:	2300      	movs	r3, #0
   25388:	9300      	str	r3, [sp, #0]
   2538a:	2206      	movs	r2, #6
   2538c:	a902      	add	r1, sp, #8
   2538e:	f242 0005 	movw	r0, #8197	; 0x2005
   25392:	f7ff fc0f 	bl	24bb4 <ble_hs_hci_cmd_tx>
                                        BLE_HCI_OCF_LE_SET_RAND_ADDR),
                             &cmd, sizeof(cmd), NULL, 0);
}
   25396:	b005      	add	sp, #20
   25398:	f85d fb04 	ldr.w	pc, [sp], #4

0002539c <ble_hs_hci_util_data_hdr_strip>:
}

int
ble_hs_hci_util_data_hdr_strip(struct os_mbuf *om,
                               struct hci_data_hdr *out_hdr)
{
   2539c:	b570      	push	{r4, r5, r6, lr}
   2539e:	4606      	mov	r6, r0
   253a0:	460c      	mov	r4, r1
    int rc;

    rc = os_mbuf_copydata(om, 0, BLE_HCI_DATA_HDR_SZ, out_hdr);
   253a2:	460b      	mov	r3, r1
   253a4:	2204      	movs	r2, #4
   253a6:	2100      	movs	r1, #0
   253a8:	f7e8 f8e5 	bl	d576 <os_mbuf_copydata>
    if (rc != 0) {
   253ac:	b980      	cbnz	r0, 253d0 <ble_hs_hci_util_data_hdr_strip+0x34>
   253ae:	4605      	mov	r5, r0
        return BLE_HS_ECONTROLLER;
    }

    /* Strip HCI ACL data header from the front of the packet. */
    os_mbuf_adj(om, BLE_HCI_DATA_HDR_SZ);
   253b0:	2104      	movs	r1, #4
   253b2:	4630      	mov	r0, r6
   253b4:	f7e8 f90c 	bl	d5d0 <os_mbuf_adj>

    out_hdr->hdh_handle_pb_bc = get_le16(&out_hdr->hdh_handle_pb_bc);
   253b8:	4620      	mov	r0, r4
   253ba:	f009 fcd8 	bl	2ed6e <get_le16>
   253be:	4623      	mov	r3, r4
   253c0:	f823 0b02 	strh.w	r0, [r3], #2
    out_hdr->hdh_len = get_le16(&out_hdr->hdh_len);
   253c4:	4618      	mov	r0, r3
   253c6:	f009 fcd2 	bl	2ed6e <get_le16>
   253ca:	8060      	strh	r0, [r4, #2]

    return 0;
}
   253cc:	4628      	mov	r0, r5
   253ce:	bd70      	pop	{r4, r5, r6, pc}
        return BLE_HS_ECONTROLLER;
   253d0:	250c      	movs	r5, #12
   253d2:	e7fb      	b.n	253cc <ble_hs_hci_util_data_hdr_strip+0x30>

000253d4 <ble_hs_id_set_pub>:
static uint8_t ble_hs_id_pub[6];
static uint8_t ble_hs_id_rnd[6];

void
ble_hs_id_set_pub(const uint8_t *pub_addr)
{
   253d4:	b510      	push	{r4, lr}
   253d6:	4604      	mov	r4, r0
    ble_hs_lock();
   253d8:	f7fe fb52 	bl	23a80 <ble_hs_lock>
    memcpy(ble_hs_id_pub, pub_addr, 6);
   253dc:	4b03      	ldr	r3, [pc, #12]	; (253ec <ble_hs_id_set_pub+0x18>)
   253de:	6820      	ldr	r0, [r4, #0]
   253e0:	6018      	str	r0, [r3, #0]
   253e2:	88a2      	ldrh	r2, [r4, #4]
   253e4:	809a      	strh	r2, [r3, #4]
    ble_hs_unlock();
   253e6:	f7fe fb4f 	bl	23a88 <ble_hs_unlock>
}
   253ea:	bd10      	pop	{r4, pc}
   253ec:	20002b58 	.word	0x20002b58

000253f0 <ble_hs_id_set_rnd>:
    return 0;
}

int
ble_hs_id_set_rnd(const uint8_t *rnd_addr)
{
   253f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   253f2:	4605      	mov	r5, r0
    uint8_t addr_type_byte;
    int rc;
    int ones;

    ble_hs_lock();
   253f4:	f7fe fb44 	bl	23a80 <ble_hs_lock>

    /* Make sure random part of rnd_addr is not all ones or zeros. Reference:
     * Core v5.0, Vol 6, Part B, section 1.3.2.1 */
    addr_type_byte = rnd_addr[5] & 0xc0;
   253f8:	796f      	ldrb	r7, [r5, #5]
   253fa:	f007 06c0 	and.w	r6, r7, #192	; 0xc0

    /* count bits set to 1 in random part of address */
    ones = __builtin_popcount(rnd_addr[0]);
   253fe:	7828      	ldrb	r0, [r5, #0]
   25400:	f00b fe20 	bl	31044 <__popcountsi2>
   25404:	4604      	mov	r4, r0
    ones += __builtin_popcount(rnd_addr[1]);
   25406:	7868      	ldrb	r0, [r5, #1]
   25408:	f00b fe1c 	bl	31044 <__popcountsi2>
   2540c:	4404      	add	r4, r0
    ones += __builtin_popcount(rnd_addr[2]);
   2540e:	78a8      	ldrb	r0, [r5, #2]
   25410:	f00b fe18 	bl	31044 <__popcountsi2>
   25414:	4404      	add	r4, r0
    ones += __builtin_popcount(rnd_addr[3]);
   25416:	78e8      	ldrb	r0, [r5, #3]
   25418:	f00b fe14 	bl	31044 <__popcountsi2>
   2541c:	4404      	add	r4, r0
    ones += __builtin_popcount(rnd_addr[4]);
   2541e:	7928      	ldrb	r0, [r5, #4]
   25420:	f00b fe10 	bl	31044 <__popcountsi2>
   25424:	4404      	add	r4, r0
    ones += __builtin_popcount(rnd_addr[5] & 0x3f);
   25426:	f007 003f 	and.w	r0, r7, #63	; 0x3f
   2542a:	f00b fe0b 	bl	31044 <__popcountsi2>
   2542e:	4420      	add	r0, r4

    if ((addr_type_byte != 0x00 && addr_type_byte != 0xc0) ||
   25430:	b10e      	cbz	r6, 25436 <ble_hs_id_set_rnd+0x46>
   25432:	2ec0      	cmp	r6, #192	; 0xc0
   25434:	d10d      	bne.n	25452 <ble_hs_id_set_rnd+0x62>
   25436:	b170      	cbz	r0, 25456 <ble_hs_id_set_rnd+0x66>
            (ones == 0 || ones == 46)) {
   25438:	282e      	cmp	r0, #46	; 0x2e
   2543a:	d011      	beq.n	25460 <ble_hs_id_set_rnd+0x70>
        rc = BLE_HS_EINVAL;
        goto done;
    }

    rc = ble_hs_hci_util_set_random_addr(rnd_addr);
   2543c:	4628      	mov	r0, r5
   2543e:	f7ff ff9a 	bl	25376 <ble_hs_hci_util_set_random_addr>
    if (rc != 0) {
   25442:	4604      	mov	r4, r0
   25444:	b940      	cbnz	r0, 25458 <ble_hs_id_set_rnd+0x68>
        goto done;
    }

    memcpy(ble_hs_id_rnd, rnd_addr, 6);
   25446:	4b07      	ldr	r3, [pc, #28]	; (25464 <ble_hs_id_set_rnd+0x74>)
   25448:	6828      	ldr	r0, [r5, #0]
   2544a:	6018      	str	r0, [r3, #0]
   2544c:	88aa      	ldrh	r2, [r5, #4]
   2544e:	809a      	strh	r2, [r3, #4]
   25450:	e002      	b.n	25458 <ble_hs_id_set_rnd+0x68>
        rc = BLE_HS_EINVAL;
   25452:	2403      	movs	r4, #3
   25454:	e000      	b.n	25458 <ble_hs_id_set_rnd+0x68>
   25456:	2403      	movs	r4, #3

done:
    ble_hs_unlock();
   25458:	f7fe fb16 	bl	23a88 <ble_hs_unlock>
    return rc;
}
   2545c:	4620      	mov	r0, r4
   2545e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rc = BLE_HS_EINVAL;
   25460:	2403      	movs	r4, #3
   25462:	e7f9      	b.n	25458 <ble_hs_id_set_rnd+0x68>
   25464:	20002b60 	.word	0x20002b60

00025468 <ble_hs_id_addr>:
 *                              Other BLE host core code on error.
 */
int
ble_hs_id_addr(uint8_t id_addr_type, const uint8_t **out_id_addr,
               int *out_is_nrpa)
{
   25468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    const uint8_t *id_addr;
    int nrpa;

    BLE_HS_DBG_ASSERT(ble_hs_locked_by_cur_task());

    switch (id_addr_type) {
   2546a:	b1b0      	cbz	r0, 2549a <ble_hs_id_addr+0x32>
   2546c:	2801      	cmp	r0, #1
   2546e:	d117      	bne.n	254a0 <ble_hs_id_addr+0x38>
        nrpa = 0;
        break;

    case BLE_ADDR_RANDOM:
        id_addr = ble_hs_id_rnd;
        nrpa = (ble_hs_id_rnd[5] & 0xc0) == 0;
   25470:	4e0e      	ldr	r6, [pc, #56]	; (254ac <ble_hs_id_addr+0x44>)
   25472:	7973      	ldrb	r3, [r6, #5]
   25474:	f013 0fc0 	tst.w	r3, #192	; 0xc0
   25478:	bf0c      	ite	eq
   2547a:	2701      	moveq	r7, #1
   2547c:	2700      	movne	r7, #0
   2547e:	4614      	mov	r4, r2
   25480:	460d      	mov	r5, r1

    default:
        return BLE_HS_EINVAL;
    }

    if (memcmp(id_addr, ble_hs_misc_null_addr, 6) == 0) {
   25482:	2206      	movs	r2, #6
   25484:	490a      	ldr	r1, [pc, #40]	; (254b0 <ble_hs_id_addr+0x48>)
   25486:	4630      	mov	r0, r6
   25488:	f7e9 fa66 	bl	e958 <memcmp>
   2548c:	b150      	cbz	r0, 254a4 <ble_hs_id_addr+0x3c>
        return BLE_HS_ENOADDR;
    }

    if (out_id_addr != NULL) {
   2548e:	b105      	cbz	r5, 25492 <ble_hs_id_addr+0x2a>
        *out_id_addr = id_addr;
   25490:	602e      	str	r6, [r5, #0]
    }
    if (out_is_nrpa != NULL) {
   25492:	b14c      	cbz	r4, 254a8 <ble_hs_id_addr+0x40>
        *out_is_nrpa = nrpa;
   25494:	6027      	str	r7, [r4, #0]
    }

    return 0;
   25496:	2000      	movs	r0, #0
}
   25498:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        nrpa = 0;
   2549a:	2700      	movs	r7, #0
        id_addr = ble_hs_id_pub;
   2549c:	4e05      	ldr	r6, [pc, #20]	; (254b4 <ble_hs_id_addr+0x4c>)
   2549e:	e7ee      	b.n	2547e <ble_hs_id_addr+0x16>
        return BLE_HS_EINVAL;
   254a0:	2003      	movs	r0, #3
   254a2:	e7f9      	b.n	25498 <ble_hs_id_addr+0x30>
        return BLE_HS_ENOADDR;
   254a4:	2015      	movs	r0, #21
   254a6:	e7f7      	b.n	25498 <ble_hs_id_addr+0x30>
    return 0;
   254a8:	2000      	movs	r0, #0
   254aa:	e7f5      	b.n	25498 <ble_hs_id_addr+0x30>
   254ac:	20002b60 	.word	0x20002b60
   254b0:	20004118 	.word	0x20004118
   254b4:	20002b58 	.word	0x20002b58

000254b8 <ble_hs_id_addr_type_usable>:
    return rc;
}

static int
ble_hs_id_addr_type_usable(uint8_t own_addr_type)
{
   254b8:	b500      	push	{lr}
   254ba:	b083      	sub	sp, #12
    uint8_t id_addr_type;
    int nrpa;
    int rc;

    switch (own_addr_type) {
   254bc:	2803      	cmp	r0, #3
   254be:	d81a      	bhi.n	254f6 <ble_hs_id_addr_type_usable+0x3e>
   254c0:	e8df f000 	tbb	[pc, r0]
   254c4:	0b0b0202 	.word	0x0b0b0202
    case BLE_OWN_ADDR_PUBLIC:
    case BLE_OWN_ADDR_RANDOM:
        rc = ble_hs_id_addr(own_addr_type, NULL, NULL);
   254c8:	2200      	movs	r2, #0
   254ca:	4611      	mov	r1, r2
   254cc:	f7ff ffcc 	bl	25468 <ble_hs_id_addr>
   254d0:	4603      	mov	r3, r0
    default:
        return BLE_HS_EINVAL;
    }

    return 0;
}
   254d2:	4618      	mov	r0, r3
   254d4:	b003      	add	sp, #12
   254d6:	f85d fb04 	ldr.w	pc, [sp], #4
        id_addr_type = ble_hs_misc_own_addr_type_to_id(own_addr_type);
   254da:	f000 f90f 	bl	256fc <ble_hs_misc_own_addr_type_to_id>
        rc = ble_hs_id_addr(id_addr_type, NULL, &nrpa);
   254de:	aa01      	add	r2, sp, #4
   254e0:	2100      	movs	r1, #0
   254e2:	f7ff ffc1 	bl	25468 <ble_hs_id_addr>
        if (rc != 0) {
   254e6:	4603      	mov	r3, r0
   254e8:	2800      	cmp	r0, #0
   254ea:	d1f2      	bne.n	254d2 <ble_hs_id_addr_type_usable+0x1a>
        if (nrpa) {
   254ec:	9b01      	ldr	r3, [sp, #4]
   254ee:	2b00      	cmp	r3, #0
   254f0:	d0ef      	beq.n	254d2 <ble_hs_id_addr_type_usable+0x1a>
            return BLE_HS_ENOADDR;
   254f2:	2315      	movs	r3, #21
   254f4:	e7ed      	b.n	254d2 <ble_hs_id_addr_type_usable+0x1a>
        return BLE_HS_EINVAL;
   254f6:	2303      	movs	r3, #3
   254f8:	e7eb      	b.n	254d2 <ble_hs_id_addr_type_usable+0x1a>

000254fa <ble_hs_id_copy_addr>:
{
   254fa:	b570      	push	{r4, r5, r6, lr}
   254fc:	b082      	sub	sp, #8
   254fe:	4605      	mov	r5, r0
   25500:	460c      	mov	r4, r1
   25502:	4616      	mov	r6, r2
    ble_hs_lock();
   25504:	f7fe fabc 	bl	23a80 <ble_hs_lock>
    rc = ble_hs_id_addr(id_addr_type, &addr, out_is_nrpa);
   25508:	4632      	mov	r2, r6
   2550a:	a901      	add	r1, sp, #4
   2550c:	4628      	mov	r0, r5
   2550e:	f7ff ffab 	bl	25468 <ble_hs_id_addr>
    if (rc == 0 && out_id_addr != NULL) {
   25512:	4605      	mov	r5, r0
   25514:	b928      	cbnz	r0, 25522 <ble_hs_id_copy_addr+0x28>
   25516:	b124      	cbz	r4, 25522 <ble_hs_id_copy_addr+0x28>
        memcpy(out_id_addr, addr, 6);
   25518:	9b01      	ldr	r3, [sp, #4]
   2551a:	681a      	ldr	r2, [r3, #0]
   2551c:	6022      	str	r2, [r4, #0]
   2551e:	889b      	ldrh	r3, [r3, #4]
   25520:	80a3      	strh	r3, [r4, #4]
    ble_hs_unlock();
   25522:	f7fe fab1 	bl	23a88 <ble_hs_unlock>
}
   25526:	4628      	mov	r0, r5
   25528:	b002      	add	sp, #8
   2552a:	bd70      	pop	{r4, r5, r6, pc}

0002552c <ble_hs_id_use_addr>:

int
ble_hs_id_use_addr(uint8_t own_addr_type)
{
   2552c:	b510      	push	{r4, lr}
   2552e:	4604      	mov	r4, r0
    int rc;

    rc = ble_hs_id_addr_type_usable(own_addr_type);
   25530:	f7ff ffc2 	bl	254b8 <ble_hs_id_addr_type_usable>
    if (rc != 0) {
   25534:	4603      	mov	r3, r0
   25536:	b918      	cbnz	r0, 25540 <ble_hs_id_use_addr+0x14>
        return rc;
    }

    /* If privacy is being used, make sure RPA rotation is in effect. */
    if (own_addr_type == BLE_OWN_ADDR_RPA_PUBLIC_DEFAULT ||
   25538:	3c02      	subs	r4, #2
   2553a:	b2e4      	uxtb	r4, r4
   2553c:	2c01      	cmp	r4, #1
   2553e:	d901      	bls.n	25544 <ble_hs_id_use_addr+0x18>
            return rc;
        }
    }

    return 0;
}
   25540:	4618      	mov	r0, r3
   25542:	bd10      	pop	{r4, pc}
        rc = ble_hs_pvcy_ensure_started();
   25544:	f000 f97c 	bl	25840 <ble_hs_pvcy_ensure_started>
   25548:	4603      	mov	r3, r0
   2554a:	e7f9      	b.n	25540 <ble_hs_id_use_addr+0x14>

0002554c <ble_hs_id_infer_auto>:

int
ble_hs_id_infer_auto(int privacy, uint8_t *out_addr_type)
{
   2554c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25550:	4604      	mov	r4, r0
   25552:	4688      	mov	r8, r1
    uint8_t addr_type;
    int num_addr_types;
    int rc;
    int i;

    ble_hs_lock();
   25554:	f7fe fa94 	bl	23a80 <ble_hs_lock>

    if (privacy) {
   25558:	b16c      	cbz	r4, 25576 <ble_hs_id_infer_auto+0x2a>
        addr_types = priv_addr_types;
   2555a:	4f0c      	ldr	r7, [pc, #48]	; (2558c <ble_hs_id_infer_auto+0x40>)
    } else {
        addr_types = pub_addr_types;
        num_addr_types = sizeof pub_addr_types / sizeof pub_addr_types[0];
    }

    for (i = 0; i < num_addr_types; i++) {
   2555c:	2400      	movs	r4, #0
   2555e:	2c01      	cmp	r4, #1
   25560:	dc0e      	bgt.n	25580 <ble_hs_id_infer_auto+0x34>
        addr_type = addr_types[i];
   25562:	5d3e      	ldrb	r6, [r7, r4]

        rc = ble_hs_id_addr_type_usable(addr_type);
   25564:	4630      	mov	r0, r6
   25566:	f7ff ffa7 	bl	254b8 <ble_hs_id_addr_type_usable>
        switch (rc) {
   2556a:	4605      	mov	r5, r0
   2556c:	b128      	cbz	r0, 2557a <ble_hs_id_infer_auto+0x2e>
   2556e:	2815      	cmp	r0, #21
   25570:	d107      	bne.n	25582 <ble_hs_id_infer_auto+0x36>
    for (i = 0; i < num_addr_types; i++) {
   25572:	3401      	adds	r4, #1
   25574:	e7f3      	b.n	2555e <ble_hs_id_infer_auto+0x12>
        addr_types = pub_addr_types;
   25576:	4f06      	ldr	r7, [pc, #24]	; (25590 <ble_hs_id_infer_auto+0x44>)
   25578:	e7f0      	b.n	2555c <ble_hs_id_infer_auto+0x10>
        case 0:
            *out_addr_type = addr_type;
   2557a:	f888 6000 	strb.w	r6, [r8]
            goto done;
   2557e:	e000      	b.n	25582 <ble_hs_id_infer_auto+0x36>
        default:
            goto done;
        }
    }

    rc = BLE_HS_ENOADDR;
   25580:	2515      	movs	r5, #21

done:
    ble_hs_unlock();
   25582:	f7fe fa81 	bl	23a88 <ble_hs_unlock>
    return rc;
}
   25586:	4628      	mov	r0, r5
   25588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2558c:	000324bc 	.word	0x000324bc
   25590:	000324c0 	.word	0x000324c0

00025594 <ble_hs_id_reset>:
 * when the controller loses its random address (e.g., on a stack reset).
 */
void
ble_hs_id_reset(void)
{
    memset(ble_hs_id_pub, 0, sizeof ble_hs_id_pub);
   25594:	4a03      	ldr	r2, [pc, #12]	; (255a4 <ble_hs_id_reset+0x10>)
   25596:	2300      	movs	r3, #0
   25598:	6013      	str	r3, [r2, #0]
   2559a:	8093      	strh	r3, [r2, #4]
    memset(ble_hs_id_rnd, 0, sizeof ble_hs_id_pub);
   2559c:	4a02      	ldr	r2, [pc, #8]	; (255a8 <ble_hs_id_reset+0x14>)
   2559e:	6013      	str	r3, [r2, #0]
   255a0:	8093      	strh	r3, [r2, #4]
}
   255a2:	4770      	bx	lr
   255a4:	20002b58 	.word	0x20002b58
   255a8:	20002b60 	.word	0x20002b60

000255ac <ble_hs_log_mbuf>:

struct log ble_hs_log;

void
ble_hs_log_mbuf(const struct os_mbuf *om)
{
   255ac:	b530      	push	{r4, r5, lr}
   255ae:	b083      	sub	sp, #12
   255b0:	4605      	mov	r5, r0
    uint8_t u8;
    int i;

    for (i = 0; i < OS_MBUF_PKTLEN(om); i++) {
   255b2:	2400      	movs	r4, #0
   255b4:	e007      	b.n	255c6 <ble_hs_log_mbuf+0x1a>
        os_mbuf_copydata(om, i, 1, &u8);
   255b6:	f10d 0307 	add.w	r3, sp, #7
   255ba:	2201      	movs	r2, #1
   255bc:	4621      	mov	r1, r4
   255be:	4628      	mov	r0, r5
   255c0:	f7e7 ffd9 	bl	d576 <os_mbuf_copydata>
    for (i = 0; i < OS_MBUF_PKTLEN(om); i++) {
   255c4:	3401      	adds	r4, #1
   255c6:	8a2b      	ldrh	r3, [r5, #16]
   255c8:	42a3      	cmp	r3, r4
   255ca:	dcf4      	bgt.n	255b6 <ble_hs_log_mbuf+0xa>
        BLE_HS_LOG(DEBUG, "0x%02x ", u8);
    }
}
   255cc:	b003      	add	sp, #12
   255ce:	bd30      	pop	{r4, r5, pc}

000255d0 <ble_hs_log_flat_buf>:
{
    const uint8_t *u8ptr;
    int i;

    u8ptr = data;
    for (i = 0; i < len; i++) {
   255d0:	2300      	movs	r3, #0
   255d2:	e000      	b.n	255d6 <ble_hs_log_flat_buf+0x6>
   255d4:	3301      	adds	r3, #1
   255d6:	428b      	cmp	r3, r1
   255d8:	dbfc      	blt.n	255d4 <ble_hs_log_flat_buf+0x4>
        BLE_HS_LOG(DEBUG, "0x%02x ", u8ptr[i]);
    }
}
   255da:	4770      	bx	lr

000255dc <ble_hs_mbuf_gen_pkt>:
/**
 * Allocates an mbuf for use by the nimble host.
 */
static struct os_mbuf *
ble_hs_mbuf_gen_pkt(uint16_t leading_space)
{
   255dc:	b510      	push	{r4, lr}
   255de:	4604      	mov	r4, r0
    struct os_mbuf *om;
    int rc;

    om = os_msys_get_pkthdr(0, 0);
   255e0:	2100      	movs	r1, #0
   255e2:	4608      	mov	r0, r1
   255e4:	f7e8 fbdd 	bl	dda2 <os_msys_get_pkthdr>
    if (om == NULL) {
   255e8:	4603      	mov	r3, r0
   255ea:	b130      	cbz	r0, 255fa <ble_hs_mbuf_gen_pkt+0x1e>
        return NULL;
    }

    if (om->om_omp->omp_databuf_len < leading_space) {
   255ec:	6882      	ldr	r2, [r0, #8]
   255ee:	8812      	ldrh	r2, [r2, #0]
   255f0:	42a2      	cmp	r2, r4
   255f2:	d304      	bcc.n	255fe <ble_hs_mbuf_gen_pkt+0x22>
        rc = os_mbuf_free_chain(om);
        BLE_HS_DBG_ASSERT_EVAL(rc == 0);
        return NULL;
    }

    om->om_data += leading_space;
   255f4:	6800      	ldr	r0, [r0, #0]
   255f6:	4420      	add	r0, r4
   255f8:	6018      	str	r0, [r3, #0]

    return om;
}
   255fa:	4618      	mov	r0, r3
   255fc:	bd10      	pop	{r4, pc}
        rc = os_mbuf_free_chain(om);
   255fe:	f7e7 ff0f 	bl	d420 <os_mbuf_free_chain>
        return NULL;
   25602:	2300      	movs	r3, #0
   25604:	e7f9      	b.n	255fa <ble_hs_mbuf_gen_pkt+0x1e>

00025606 <ble_hs_mbuf_acl_pkt>:
 * @return                  An empty mbuf on success; null on memory
 *                              exhaustion.
 */
struct os_mbuf *
ble_hs_mbuf_acl_pkt(void)
{
   25606:	b508      	push	{r3, lr}
    return ble_hs_mbuf_gen_pkt(BLE_HCI_DATA_HDR_SZ);
   25608:	2004      	movs	r0, #4
   2560a:	f7ff ffe7 	bl	255dc <ble_hs_mbuf_gen_pkt>
}
   2560e:	bd08      	pop	{r3, pc}

00025610 <ble_hs_mbuf_l2cap_pkt>:
 * @return                  An empty mbuf on success; null on memory
 *                              exhaustion.
 */
struct os_mbuf *
ble_hs_mbuf_l2cap_pkt(void)
{
   25610:	b508      	push	{r3, lr}
    return ble_hs_mbuf_gen_pkt(BLE_HCI_DATA_HDR_SZ + BLE_L2CAP_HDR_SZ);
   25612:	2008      	movs	r0, #8
   25614:	f7ff ffe2 	bl	255dc <ble_hs_mbuf_gen_pkt>
}
   25618:	bd08      	pop	{r3, pc}

0002561a <ble_hs_mbuf_att_pkt>:

struct os_mbuf *
ble_hs_mbuf_att_pkt(void)
{
   2561a:	b508      	push	{r3, lr}
    /* Prepare write request and response are the larget ATT commands which
     * contain attribute data.
     */
     return ble_hs_mbuf_gen_pkt(BLE_HCI_DATA_HDR_SZ +
   2561c:	200d      	movs	r0, #13
   2561e:	f7ff ffdd 	bl	255dc <ble_hs_mbuf_gen_pkt>
                                BLE_L2CAP_HDR_SZ +
                                BLE_ATT_PREP_WRITE_CMD_BASE_SZ);
}
   25622:	bd08      	pop	{r3, pc}

00025624 <ble_hs_mbuf_to_flat>:
}

int
ble_hs_mbuf_to_flat(const struct os_mbuf *om, void *flat, uint16_t max_len,
                    uint16_t *out_copy_len)
{
   25624:	b570      	push	{r4, r5, r6, lr}
   25626:	4615      	mov	r5, r2
   25628:	461e      	mov	r6, r3
    uint16_t copy_len;
    int rc;

    if (OS_MBUF_PKTLEN(om) <= max_len) {
   2562a:	8a04      	ldrh	r4, [r0, #16]
   2562c:	4294      	cmp	r4, r2
   2562e:	d900      	bls.n	25632 <ble_hs_mbuf_to_flat+0xe>
        copy_len = OS_MBUF_PKTLEN(om);
    } else {
        copy_len = max_len;
   25630:	4614      	mov	r4, r2
    }

    rc = os_mbuf_copydata(om, 0, copy_len, flat);
   25632:	460b      	mov	r3, r1
   25634:	4622      	mov	r2, r4
   25636:	2100      	movs	r1, #0
   25638:	f7e7 ff9d 	bl	d576 <os_mbuf_copydata>
    if (rc != 0) {
   2563c:	4603      	mov	r3, r0
   2563e:	b930      	cbnz	r0, 2564e <ble_hs_mbuf_to_flat+0x2a>
        return BLE_HS_EUNKNOWN;
    }

    if (copy_len > max_len) {
   25640:	42ac      	cmp	r4, r5
   25642:	d900      	bls.n	25646 <ble_hs_mbuf_to_flat+0x22>
        rc = BLE_HS_EMSGSIZE;
   25644:	2304      	movs	r3, #4
    } else {
        rc = 0;
    }

    if (out_copy_len != NULL) {
   25646:	b106      	cbz	r6, 2564a <ble_hs_mbuf_to_flat+0x26>
        *out_copy_len = copy_len;
   25648:	8034      	strh	r4, [r6, #0]
    }
    return rc;
}
   2564a:	4618      	mov	r0, r3
   2564c:	bd70      	pop	{r4, r5, r6, pc}
        return BLE_HS_EUNKNOWN;
   2564e:	2311      	movs	r3, #17
   25650:	e7fb      	b.n	2564a <ble_hs_mbuf_to_flat+0x26>

00025652 <ble_hs_mbuf_pullup_base>:

int
ble_hs_mbuf_pullup_base(struct os_mbuf **om, int base_len)
{
    if (OS_MBUF_PKTLEN(*om) < base_len) {
   25652:	6803      	ldr	r3, [r0, #0]
   25654:	8a1a      	ldrh	r2, [r3, #16]
   25656:	428a      	cmp	r2, r1
   25658:	db0b      	blt.n	25672 <ble_hs_mbuf_pullup_base+0x20>
{
   2565a:	b510      	push	{r4, lr}
   2565c:	4604      	mov	r4, r0
        return BLE_HS_EBADDATA;
    }

    *om = os_mbuf_pullup(*om, base_len);
   2565e:	b289      	uxth	r1, r1
   25660:	4618      	mov	r0, r3
   25662:	f7e8 f93e 	bl	d8e2 <os_mbuf_pullup>
   25666:	6020      	str	r0, [r4, #0]
    if (*om == NULL) {
   25668:	b108      	cbz	r0, 2566e <ble_hs_mbuf_pullup_base+0x1c>
        return BLE_HS_ENOMEM;
    }

    return 0;
   2566a:	2000      	movs	r0, #0
}
   2566c:	bd10      	pop	{r4, pc}
        return BLE_HS_ENOMEM;
   2566e:	2006      	movs	r0, #6
   25670:	e7fc      	b.n	2566c <ble_hs_mbuf_pullup_base+0x1a>
        return BLE_HS_EBADDATA;
   25672:	200a      	movs	r0, #10
}
   25674:	4770      	bx	lr
	...

00025678 <ble_hs_misc_restore_one_irk>:
}

static int
ble_hs_misc_restore_one_irk(int obj_type, union ble_store_value *val,
                            void *cookie)
{
   25678:	b508      	push	{r3, lr}
    int rc;

    BLE_HS_DBG_ASSERT(obj_type == BLE_STORE_OBJ_TYPE_PEER_SEC);

    sec = &val->sec;
    if (sec->irk_present) {
   2567a:	f891 3039 	ldrb.w	r3, [r1, #57]	; 0x39
   2567e:	f013 0f01 	tst.w	r3, #1
   25682:	d101      	bne.n	25688 <ble_hs_misc_restore_one_irk+0x10>
            BLE_HS_LOG(ERROR, "failed to configure restored IRK\n");
        }
    }

    return 0;
}
   25684:	2000      	movs	r0, #0
   25686:	bd08      	pop	{r3, pc}
   25688:	4608      	mov	r0, r1
        rc = ble_hs_pvcy_add_entry(sec->peer_addr.val, sec->peer_addr.type,
   2568a:	460a      	mov	r2, r1
   2568c:	f812 1b29 	ldrb.w	r1, [r2], #41
   25690:	3001      	adds	r0, #1
   25692:	f000 f955 	bl	25940 <ble_hs_pvcy_add_entry>
        if (rc != 0) {
   25696:	2800      	cmp	r0, #0
   25698:	d0f4      	beq.n	25684 <ble_hs_misc_restore_one_irk+0xc>
            BLE_HS_LOG(ERROR, "failed to configure restored IRK\n");
   2569a:	4a03      	ldr	r2, [pc, #12]	; (256a8 <ble_hs_misc_restore_one_irk+0x30>)
   2569c:	2103      	movs	r1, #3
   2569e:	2004      	movs	r0, #4
   256a0:	f7ec f81e 	bl	116e0 <modlog_printf>
   256a4:	e7ee      	b.n	25684 <ble_hs_misc_restore_one_irk+0xc>
   256a6:	bf00      	nop
   256a8:	000324c4 	.word	0x000324c4

000256ac <ble_hs_misc_conn_chan_find>:
{
   256ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   256ae:	460f      	mov	r7, r1
   256b0:	4615      	mov	r5, r2
   256b2:	461c      	mov	r4, r3
    conn = ble_hs_conn_find(conn_handle);
   256b4:	f7ff f834 	bl	24720 <ble_hs_conn_find>
    if (conn == NULL) {
   256b8:	4606      	mov	r6, r0
   256ba:	b160      	cbz	r0, 256d6 <ble_hs_misc_conn_chan_find+0x2a>
        chan = ble_hs_conn_chan_find_by_scid(conn, cid);
   256bc:	4639      	mov	r1, r7
   256be:	f7fe ff79 	bl	245b4 <ble_hs_conn_chan_find_by_scid>
        if (chan == NULL) {
   256c2:	4603      	mov	r3, r0
   256c4:	b128      	cbz	r0, 256d2 <ble_hs_misc_conn_chan_find+0x26>
            rc = 0;
   256c6:	2000      	movs	r0, #0
    if (out_conn != NULL) {
   256c8:	b105      	cbz	r5, 256cc <ble_hs_misc_conn_chan_find+0x20>
        *out_conn = conn;
   256ca:	602e      	str	r6, [r5, #0]
    if (out_chan != NULL) {
   256cc:	b104      	cbz	r4, 256d0 <ble_hs_misc_conn_chan_find+0x24>
        *out_chan = chan;
   256ce:	6023      	str	r3, [r4, #0]
}
   256d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            rc = BLE_HS_ENOTCONN;
   256d2:	2007      	movs	r0, #7
   256d4:	e7f8      	b.n	256c8 <ble_hs_misc_conn_chan_find+0x1c>
        rc = BLE_HS_ENOTCONN;
   256d6:	2007      	movs	r0, #7
        chan = NULL;
   256d8:	2300      	movs	r3, #0
   256da:	e7f5      	b.n	256c8 <ble_hs_misc_conn_chan_find+0x1c>

000256dc <ble_hs_misc_conn_chan_find_reqd>:
{
   256dc:	b530      	push	{r4, r5, lr}
   256de:	b083      	sub	sp, #12
   256e0:	4615      	mov	r5, r2
   256e2:	461c      	mov	r4, r3
    rc = ble_hs_misc_conn_chan_find(conn_handle, cid, &conn, &chan);
   256e4:	ab01      	add	r3, sp, #4
   256e6:	466a      	mov	r2, sp
   256e8:	f7ff ffe0 	bl	256ac <ble_hs_misc_conn_chan_find>
    if (out_conn != NULL) {
   256ec:	b10d      	cbz	r5, 256f2 <ble_hs_misc_conn_chan_find_reqd+0x16>
        *out_conn = conn;
   256ee:	9b00      	ldr	r3, [sp, #0]
   256f0:	602b      	str	r3, [r5, #0]
    if (out_chan != NULL) {
   256f2:	b10c      	cbz	r4, 256f8 <ble_hs_misc_conn_chan_find_reqd+0x1c>
        *out_chan = chan;
   256f4:	9b01      	ldr	r3, [sp, #4]
   256f6:	6023      	str	r3, [r4, #0]
}
   256f8:	b003      	add	sp, #12
   256fa:	bd30      	pop	{r4, r5, pc}

000256fc <ble_hs_misc_own_addr_type_to_id>:
    switch (own_addr_type) {
   256fc:	2801      	cmp	r0, #1
   256fe:	d003      	beq.n	25708 <ble_hs_misc_own_addr_type_to_id+0xc>
   25700:	2803      	cmp	r0, #3
   25702:	d001      	beq.n	25708 <ble_hs_misc_own_addr_type_to_id+0xc>
         return BLE_ADDR_PUBLIC;
   25704:	2000      	movs	r0, #0
   25706:	4770      	bx	lr
         return BLE_ADDR_RANDOM;
   25708:	2001      	movs	r0, #1
}
   2570a:	4770      	bx	lr

0002570c <ble_hs_misc_peer_addr_type_to_id>:
    switch (peer_addr_type) {
   2570c:	2801      	cmp	r0, #1
   2570e:	d003      	beq.n	25718 <ble_hs_misc_peer_addr_type_to_id+0xc>
   25710:	2803      	cmp	r0, #3
   25712:	d001      	beq.n	25718 <ble_hs_misc_peer_addr_type_to_id+0xc>
            return BLE_ADDR_PUBLIC;
   25714:	2000      	movs	r0, #0
   25716:	4770      	bx	lr
            return BLE_ADDR_RANDOM;
   25718:	2001      	movs	r0, #1
}
   2571a:	4770      	bx	lr

0002571c <ble_hs_misc_restore_irks>:

int
ble_hs_misc_restore_irks(void)
{
   2571c:	b508      	push	{r3, lr}
    int rc;

    rc = ble_store_iterate(BLE_STORE_OBJ_TYPE_PEER_SEC,
   2571e:	2200      	movs	r2, #0
   25720:	4902      	ldr	r1, [pc, #8]	; (2572c <ble_hs_misc_restore_irks+0x10>)
   25722:	2002      	movs	r0, #2
   25724:	f003 f9bb 	bl	28a9e <ble_store_iterate>
                           ble_hs_misc_restore_one_irk,
                           NULL);
    return rc;
}
   25728:	bd08      	pop	{r3, pc}
   2572a:	bf00      	nop
   2572c:	00025679 	.word	0x00025679

00025730 <ble_mqueue_init>:

#include "ble_hs_priv.h"

int
ble_mqueue_init(struct ble_mqueue *mq, ble_npl_event_fn *ev_fn, void *ev_arg)
{
   25730:	4603      	mov	r3, r0
    STAILQ_INIT(&mq->head);
   25732:	2000      	movs	r0, #0
   25734:	6018      	str	r0, [r3, #0]
   25736:	605b      	str	r3, [r3, #4]
    memset(ev, 0, sizeof(*ev));
   25738:	6098      	str	r0, [r3, #8]
   2573a:	6158      	str	r0, [r3, #20]
    ev->ev.ev_queued = 0;
   2573c:	7218      	strb	r0, [r3, #8]
    ev->ev.ev_cb = (os_event_fn *)fn;
   2573e:	60d9      	str	r1, [r3, #12]
    ev->ev.ev_arg = arg;
   25740:	611a      	str	r2, [r3, #16]

    ble_npl_event_init(&mq->ev, ev_fn, ev_arg);

    return (0);
}
   25742:	4770      	bx	lr

00025744 <ble_mqueue_get>:

struct os_mbuf *
ble_mqueue_get(struct ble_mqueue *mq)
{
   25744:	b538      	push	{r3, r4, r5, lr}
   25746:	4605      	mov	r5, r0
    struct os_mbuf_pkthdr *mp;
    struct os_mbuf *om;
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
   25748:	f7e8 fef4 	bl	e534 <os_arch_save_sr>
    mp = STAILQ_FIRST(&mq->head);
   2574c:	682c      	ldr	r4, [r5, #0]
    if (mp) {
   2574e:	b114      	cbz	r4, 25756 <ble_mqueue_get+0x12>
        STAILQ_REMOVE_HEAD(&mq->head, omp_next);
   25750:	6863      	ldr	r3, [r4, #4]
   25752:	602b      	str	r3, [r5, #0]
   25754:	b12b      	cbz	r3, 25762 <ble_mqueue_get+0x1e>
    }
    OS_EXIT_CRITICAL(sr);
   25756:	f7e8 fef3 	bl	e540 <os_arch_restore_sr>

    if (mp) {
   2575a:	b124      	cbz	r4, 25766 <ble_mqueue_get+0x22>
        om = OS_MBUF_PKTHDR_TO_MBUF(mp);
   2575c:	f1a4 0010 	sub.w	r0, r4, #16
    } else {
        om = NULL;
    }

    return (om);
}
   25760:	bd38      	pop	{r3, r4, r5, pc}
        STAILQ_REMOVE_HEAD(&mq->head, omp_next);
   25762:	606d      	str	r5, [r5, #4]
   25764:	e7f7      	b.n	25756 <ble_mqueue_get+0x12>
        om = NULL;
   25766:	2000      	movs	r0, #0
    return (om);
   25768:	e7fa      	b.n	25760 <ble_mqueue_get+0x1c>

0002576a <ble_mqueue_put>:

int
ble_mqueue_put(struct ble_mqueue *mq, struct ble_npl_eventq *evq, struct os_mbuf *om)
{
   2576a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    struct os_mbuf_pkthdr *mp;
    os_sr_t sr;
    int rc;

    /* Can only place the head of a chained mbuf on the queue. */
    if (!OS_MBUF_IS_PKTHDR(om)) {
   2576c:	7953      	ldrb	r3, [r2, #5]
   2576e:	2b07      	cmp	r3, #7
   25770:	d916      	bls.n	257a0 <ble_mqueue_put+0x36>
   25772:	4614      	mov	r4, r2
   25774:	460e      	mov	r6, r1
   25776:	4605      	mov	r5, r0
        rc = OS_EINVAL;
        goto err;
    }

    mp = OS_MBUF_PKTHDR(om);
   25778:	f102 0710 	add.w	r7, r2, #16

    OS_ENTER_CRITICAL(sr);
   2577c:	f7e8 feda 	bl	e534 <os_arch_save_sr>
    STAILQ_INSERT_TAIL(&mq->head, mp, omp_next);
   25780:	2300      	movs	r3, #0
   25782:	f844 3f14 	str.w	r3, [r4, #20]!
   25786:	686b      	ldr	r3, [r5, #4]
   25788:	601f      	str	r7, [r3, #0]
   2578a:	606c      	str	r4, [r5, #4]
    OS_EXIT_CRITICAL(sr);
   2578c:	f7e8 fed8 	bl	e540 <os_arch_restore_sr>

    /* Only post an event to the queue if its specified */
    if (evq) {
   25790:	b146      	cbz	r6, 257a4 <ble_mqueue_put+0x3a>
    os_eventq_put(&evq->evq, &ev->ev);
   25792:	f105 0108 	add.w	r1, r5, #8
   25796:	4630      	mov	r0, r6
   25798:	f7e7 fd09 	bl	d1ae <os_eventq_put>
        ble_npl_eventq_put(evq, &mq->ev);
    }

    return (0);
   2579c:	2000      	movs	r0, #0
   2579e:	e000      	b.n	257a2 <ble_mqueue_put+0x38>
err:
    return (rc);
   257a0:	2002      	movs	r0, #2
}
   257a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return (0);
   257a4:	2000      	movs	r0, #0
   257a6:	e7fc      	b.n	257a2 <ble_mqueue_put+0x38>

000257a8 <ble_hs_pvcy_set_addr_timeout>:
static int
ble_hs_pvcy_set_addr_timeout(uint16_t timeout)
{
    struct ble_hci_le_set_rpa_tmo_cp cmd;

    if (timeout == 0 || timeout > 0xA1B8) {
   257a8:	1e43      	subs	r3, r0, #1
   257aa:	b29b      	uxth	r3, r3
   257ac:	f24a 12b7 	movw	r2, #41399	; 0xa1b7
   257b0:	4293      	cmp	r3, r2
   257b2:	d80e      	bhi.n	257d2 <ble_hs_pvcy_set_addr_timeout+0x2a>
{
   257b4:	b500      	push	{lr}
   257b6:	b085      	sub	sp, #20
        return BLE_ERR_INV_HCI_CMD_PARMS;
    }

    cmd.rpa_timeout = htole16(timeout);
   257b8:	a904      	add	r1, sp, #16
   257ba:	f821 0d04 	strh.w	r0, [r1, #-4]!

    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   257be:	2300      	movs	r3, #0
   257c0:	9300      	str	r3, [sp, #0]
   257c2:	2202      	movs	r2, #2
   257c4:	f242 002e 	movw	r0, #8238	; 0x202e
   257c8:	f7ff f9f4 	bl	24bb4 <ble_hs_hci_cmd_tx>
                                        BLE_HCI_OCF_LE_SET_RPA_TMO),
                             &cmd, sizeof(cmd), NULL, 0);
}
   257cc:	b005      	add	sp, #20
   257ce:	f85d fb04 	ldr.w	pc, [sp], #4
        return BLE_ERR_INV_HCI_CMD_PARMS;
   257d2:	2012      	movs	r0, #18
}
   257d4:	4770      	bx	lr

000257d6 <ble_hs_pvcy_clear_entries>:
                             &cmd, sizeof(cmd), NULL, 0);
}

static int
ble_hs_pvcy_clear_entries(void)
{
   257d6:	b500      	push	{lr}
   257d8:	b083      	sub	sp, #12
    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   257da:	2100      	movs	r1, #0
   257dc:	9100      	str	r1, [sp, #0]
   257de:	460b      	mov	r3, r1
   257e0:	460a      	mov	r2, r1
   257e2:	f242 0029 	movw	r0, #8233	; 0x2029
   257e6:	f7ff f9e5 	bl	24bb4 <ble_hs_hci_cmd_tx>
                                        BLE_HCI_OCF_LE_CLR_RESOLV_LIST),
                             NULL, 0, NULL, 0);
}
   257ea:	b003      	add	sp, #12
   257ec:	f85d fb04 	ldr.w	pc, [sp], #4

000257f0 <ble_hs_pvcy_set_resolve_enabled>:
{
   257f0:	b500      	push	{lr}
   257f2:	b085      	sub	sp, #20
    cmd.enable = enable;
   257f4:	a904      	add	r1, sp, #16
   257f6:	f801 0d04 	strb.w	r0, [r1, #-4]!
    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   257fa:	2300      	movs	r3, #0
   257fc:	9300      	str	r3, [sp, #0]
   257fe:	2201      	movs	r2, #1
   25800:	f242 002d 	movw	r0, #8237	; 0x202d
   25804:	f7ff f9d6 	bl	24bb4 <ble_hs_hci_cmd_tx>
}
   25808:	b005      	add	sp, #20
   2580a:	f85d fb04 	ldr.w	pc, [sp], #4

0002580e <ble_hs_pvcy_remove_entry>:
{
   2580e:	b500      	push	{lr}
   25810:	b085      	sub	sp, #20
    if (addr_type > BLE_ADDR_RANDOM) {
   25812:	2801      	cmp	r0, #1
   25814:	d901      	bls.n	2581a <ble_hs_pvcy_remove_entry+0xc>
        addr_type = addr_type % 2;
   25816:	f000 0001 	and.w	r0, r0, #1
    cmd.peer_addr_type = addr_type;
   2581a:	f88d 0008 	strb.w	r0, [sp, #8]
    memcpy(cmd.peer_id_addr, addr, BLE_DEV_ADDR_LEN);
   2581e:	680b      	ldr	r3, [r1, #0]
   25820:	f8cd 3009 	str.w	r3, [sp, #9]
   25824:	888b      	ldrh	r3, [r1, #4]
   25826:	f8ad 300d 	strh.w	r3, [sp, #13]
    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   2582a:	2300      	movs	r3, #0
   2582c:	9300      	str	r3, [sp, #0]
   2582e:	2207      	movs	r2, #7
   25830:	a902      	add	r1, sp, #8
   25832:	f242 0028 	movw	r0, #8232	; 0x2028
   25836:	f7ff f9bd 	bl	24bb4 <ble_hs_hci_cmd_tx>
}
   2583a:	b005      	add	sp, #20
   2583c:	f85d fb04 	ldr.w	pc, [sp], #4

00025840 <ble_hs_pvcy_ensure_started>:
    return rc;
}

int
ble_hs_pvcy_ensure_started(void)
{
   25840:	b508      	push	{r3, lr}
    int rc;

    if (ble_hs_pvcy_started) {
   25842:	4b08      	ldr	r3, [pc, #32]	; (25864 <ble_hs_pvcy_ensure_started+0x24>)
   25844:	781b      	ldrb	r3, [r3, #0]
   25846:	b113      	cbz	r3, 2584e <ble_hs_pvcy_ensure_started+0xe>
        return 0;
   25848:	2300      	movs	r3, #0
    }

    ble_hs_pvcy_started = 1;

    return 0;
}
   2584a:	4618      	mov	r0, r3
   2584c:	bd08      	pop	{r3, pc}
    rc = ble_hs_pvcy_set_addr_timeout(MYNEWT_VAL(BLE_RPA_TIMEOUT));
   2584e:	f44f 7096 	mov.w	r0, #300	; 0x12c
   25852:	f7ff ffa9 	bl	257a8 <ble_hs_pvcy_set_addr_timeout>
    if (rc != 0) {
   25856:	4603      	mov	r3, r0
   25858:	2800      	cmp	r0, #0
   2585a:	d1f6      	bne.n	2584a <ble_hs_pvcy_ensure_started+0xa>
    ble_hs_pvcy_started = 1;
   2585c:	4a01      	ldr	r2, [pc, #4]	; (25864 <ble_hs_pvcy_ensure_started+0x24>)
   2585e:	2101      	movs	r1, #1
   25860:	7011      	strb	r1, [r2, #0]
    return 0;
   25862:	e7f2      	b.n	2584a <ble_hs_pvcy_ensure_started+0xa>
   25864:	20002b78 	.word	0x20002b78

00025868 <ble_hs_pvcy_our_irk>:
int
ble_hs_pvcy_our_irk(const uint8_t **out_irk)
{
    /* XXX: Return error if privacy not supported. */

    *out_irk = ble_hs_pvcy_irk;
   25868:	4b01      	ldr	r3, [pc, #4]	; (25870 <ble_hs_pvcy_our_irk+0x8>)
   2586a:	6003      	str	r3, [r0, #0]
    return 0;
}
   2586c:	2000      	movs	r0, #0
   2586e:	4770      	bx	lr
   25870:	20002b68 	.word	0x20002b68

00025874 <ble_hs_pvcy_set_mode>:
int
ble_hs_pvcy_set_mode(const ble_addr_t *addr, uint8_t priv_mode)
{
    struct ble_hci_le_set_privacy_mode_cp cmd;

    if (addr->type > BLE_ADDR_RANDOM) {
   25874:	7803      	ldrb	r3, [r0, #0]
   25876:	2b01      	cmp	r3, #1
   25878:	d901      	bls.n	2587e <ble_hs_pvcy_set_mode+0xa>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   2587a:	2012      	movs	r0, #18
    memcpy(cmd.peer_id_addr, addr->val, BLE_DEV_ADDR_LEN);

    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
                                        BLE_HCI_OCF_LE_SET_PRIVACY_MODE),
                             &cmd, sizeof(cmd), NULL, 0);
}
   2587c:	4770      	bx	lr
{
   2587e:	b500      	push	{lr}
   25880:	b085      	sub	sp, #20
    cmd.mode = priv_mode;
   25882:	f88d 100f 	strb.w	r1, [sp, #15]
    cmd.peer_id_addr_type = addr->type;
   25886:	7803      	ldrb	r3, [r0, #0]
   25888:	f88d 3008 	strb.w	r3, [sp, #8]
    memcpy(cmd.peer_id_addr, addr->val, BLE_DEV_ADDR_LEN);
   2588c:	f850 3f01 	ldr.w	r3, [r0, #1]!
   25890:	f8cd 3009 	str.w	r3, [sp, #9]
   25894:	8883      	ldrh	r3, [r0, #4]
   25896:	f8ad 300d 	strh.w	r3, [sp, #13]
    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   2589a:	2300      	movs	r3, #0
   2589c:	9300      	str	r3, [sp, #0]
   2589e:	2208      	movs	r2, #8
   258a0:	eb0d 0102 	add.w	r1, sp, r2
   258a4:	f242 004e 	movw	r0, #8270	; 0x204e
   258a8:	f7ff f984 	bl	24bb4 <ble_hs_hci_cmd_tx>
}
   258ac:	b005      	add	sp, #20
   258ae:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000258b4 <ble_hs_pvcy_add_entry_hci>:
    if (addr_type > BLE_ADDR_RANDOM) {
   258b4:	2901      	cmp	r1, #1
   258b6:	d902      	bls.n	258be <ble_hs_pvcy_add_entry_hci+0xa>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   258b8:	2312      	movs	r3, #18
}
   258ba:	4618      	mov	r0, r3
   258bc:	4770      	bx	lr
{
   258be:	b5f0      	push	{r4, r5, r6, r7, lr}
   258c0:	b08f      	sub	sp, #60	; 0x3c
   258c2:	4614      	mov	r4, r2
   258c4:	460e      	mov	r6, r1
   258c6:	4607      	mov	r7, r0
    cmd.peer_addr_type = addr_type;
   258c8:	f88d 1010 	strb.w	r1, [sp, #16]
    memcpy(cmd.peer_id_addr, addr, 6);
   258cc:	6803      	ldr	r3, [r0, #0]
   258ce:	f8cd 3011 	str.w	r3, [sp, #17]
   258d2:	8883      	ldrh	r3, [r0, #4]
   258d4:	f8ad 3015 	strh.w	r3, [sp, #21]
    memcpy(cmd.local_irk, ble_hs_pvcy_irk, 16);
   258d8:	4d18      	ldr	r5, [pc, #96]	; (2593c <ble_hs_pvcy_add_entry_hci+0x88>)
   258da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   258dc:	f8cd 0027 	str.w	r0, [sp, #39]	; 0x27
   258e0:	f8cd 102b 	str.w	r1, [sp, #43]	; 0x2b
   258e4:	f8cd 202f 	str.w	r2, [sp, #47]	; 0x2f
   258e8:	f8cd 3033 	str.w	r3, [sp, #51]	; 0x33
    memcpy(cmd.peer_irk, irk, 16);
   258ec:	6820      	ldr	r0, [r4, #0]
   258ee:	6861      	ldr	r1, [r4, #4]
   258f0:	68a2      	ldr	r2, [r4, #8]
   258f2:	68e3      	ldr	r3, [r4, #12]
   258f4:	f8cd 0017 	str.w	r0, [sp, #23]
   258f8:	f8cd 101b 	str.w	r1, [sp, #27]
   258fc:	f8cd 201f 	str.w	r2, [sp, #31]
   25900:	f8cd 3023 	str.w	r3, [sp, #35]	; 0x23
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   25904:	2300      	movs	r3, #0
   25906:	9300      	str	r3, [sp, #0]
   25908:	2227      	movs	r2, #39	; 0x27
   2590a:	a904      	add	r1, sp, #16
   2590c:	f242 0027 	movw	r0, #8231	; 0x2027
   25910:	f7ff f950 	bl	24bb4 <ble_hs_hci_cmd_tx>
    if (rc != 0) {
   25914:	4603      	mov	r3, r0
   25916:	b110      	cbz	r0, 2591e <ble_hs_pvcy_add_entry_hci+0x6a>
}
   25918:	4618      	mov	r0, r3
   2591a:	b00f      	add	sp, #60	; 0x3c
   2591c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    peer_addr.type = addr_type;
   2591e:	f88d 6008 	strb.w	r6, [sp, #8]
    memcpy(peer_addr.val, addr, sizeof peer_addr.val);
   25922:	683b      	ldr	r3, [r7, #0]
   25924:	f8cd 3009 	str.w	r3, [sp, #9]
   25928:	88bb      	ldrh	r3, [r7, #4]
   2592a:	f8ad 300d 	strh.w	r3, [sp, #13]
    rc = ble_hs_pvcy_set_mode(&peer_addr, BLE_GAP_PRIVATE_MODE_DEVICE);
   2592e:	2101      	movs	r1, #1
   25930:	a802      	add	r0, sp, #8
   25932:	f7ff ff9f 	bl	25874 <ble_hs_pvcy_set_mode>
   25936:	4603      	mov	r3, r0
   25938:	e7ee      	b.n	25918 <ble_hs_pvcy_add_entry_hci+0x64>
   2593a:	bf00      	nop
   2593c:	20002b68 	.word	0x20002b68

00025940 <ble_hs_pvcy_add_entry>:
{
   25940:	b570      	push	{r4, r5, r6, lr}
   25942:	4604      	mov	r4, r0
   25944:	460d      	mov	r5, r1
   25946:	4616      	mov	r6, r2
    STATS_INC(ble_hs_stats, pvcy_add_entry);
   25948:	4a0a      	ldr	r2, [pc, #40]	; (25974 <ble_hs_pvcy_add_entry+0x34>)
   2594a:	6b13      	ldr	r3, [r2, #48]	; 0x30
   2594c:	3301      	adds	r3, #1
   2594e:	6313      	str	r3, [r2, #48]	; 0x30
    ble_gap_preempt();
   25950:	f7fb ff20 	bl	21794 <ble_gap_preempt>
    rc = ble_hs_pvcy_add_entry_hci(addr, addr_type, irk);
   25954:	4632      	mov	r2, r6
   25956:	4629      	mov	r1, r5
   25958:	4620      	mov	r0, r4
   2595a:	f7ff ffab 	bl	258b4 <ble_hs_pvcy_add_entry_hci>
   2595e:	4604      	mov	r4, r0
    ble_gap_preempt_done();
   25960:	f7fb ff24 	bl	217ac <ble_gap_preempt_done>
    if (rc != 0) {
   25964:	b11c      	cbz	r4, 2596e <ble_hs_pvcy_add_entry+0x2e>
        STATS_INC(ble_hs_stats, pvcy_add_entry_fail);
   25966:	4a03      	ldr	r2, [pc, #12]	; (25974 <ble_hs_pvcy_add_entry+0x34>)
   25968:	6b53      	ldr	r3, [r2, #52]	; 0x34
   2596a:	3301      	adds	r3, #1
   2596c:	6353      	str	r3, [r2, #52]	; 0x34
}
   2596e:	4620      	mov	r0, r4
   25970:	bd70      	pop	{r4, r5, r6, pc}
   25972:	bf00      	nop
   25974:	200040b8 	.word	0x200040b8

00025978 <ble_hs_pvcy_set_our_irk>:
{
   25978:	b510      	push	{r4, lr}
   2597a:	b086      	sub	sp, #24
    if (irk != NULL) {
   2597c:	b180      	cbz	r0, 259a0 <ble_hs_pvcy_set_our_irk+0x28>
   2597e:	4603      	mov	r3, r0
        memcpy(new_irk, irk, 16);
   25980:	466c      	mov	r4, sp
   25982:	6800      	ldr	r0, [r0, #0]
   25984:	6859      	ldr	r1, [r3, #4]
   25986:	689a      	ldr	r2, [r3, #8]
   25988:	68db      	ldr	r3, [r3, #12]
   2598a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    if (memcmp(ble_hs_pvcy_irk, new_irk, 16) != 0) {
   2598c:	2210      	movs	r2, #16
   2598e:	4669      	mov	r1, sp
   25990:	4818      	ldr	r0, [pc, #96]	; (259f4 <ble_hs_pvcy_set_our_irk+0x7c>)
   25992:	f7e8 ffe1 	bl	e958 <memcmp>
   25996:	4603      	mov	r3, r0
   25998:	b940      	cbnz	r0, 259ac <ble_hs_pvcy_set_our_irk+0x34>
}
   2599a:	4618      	mov	r0, r3
   2599c:	b006      	add	sp, #24
   2599e:	bd10      	pop	{r4, pc}
        memcpy(new_irk, ble_hs_pvcy_default_irk, 16);
   259a0:	4b15      	ldr	r3, [pc, #84]	; (259f8 <ble_hs_pvcy_set_our_irk+0x80>)
   259a2:	466c      	mov	r4, sp
   259a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   259a6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   259aa:	e7ef      	b.n	2598c <ble_hs_pvcy_set_our_irk+0x14>
        memcpy(ble_hs_pvcy_irk, new_irk, 16);
   259ac:	4c11      	ldr	r4, [pc, #68]	; (259f4 <ble_hs_pvcy_set_our_irk+0x7c>)
   259ae:	466b      	mov	r3, sp
   259b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   259b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        rc = ble_hs_pvcy_set_resolve_enabled(0);
   259b6:	2000      	movs	r0, #0
   259b8:	f7ff ff1a 	bl	257f0 <ble_hs_pvcy_set_resolve_enabled>
        if (rc != 0) {
   259bc:	4603      	mov	r3, r0
   259be:	2800      	cmp	r0, #0
   259c0:	d1eb      	bne.n	2599a <ble_hs_pvcy_set_our_irk+0x22>
        rc = ble_hs_pvcy_clear_entries();
   259c2:	f7ff ff08 	bl	257d6 <ble_hs_pvcy_clear_entries>
        if (rc != 0) {
   259c6:	4603      	mov	r3, r0
   259c8:	2800      	cmp	r0, #0
   259ca:	d1e6      	bne.n	2599a <ble_hs_pvcy_set_our_irk+0x22>
        rc = ble_hs_pvcy_set_resolve_enabled(1);
   259cc:	2001      	movs	r0, #1
   259ce:	f7ff ff0f 	bl	257f0 <ble_hs_pvcy_set_resolve_enabled>
        if (rc != 0) {
   259d2:	4603      	mov	r3, r0
   259d4:	2800      	cmp	r0, #0
   259d6:	d1e0      	bne.n	2599a <ble_hs_pvcy_set_our_irk+0x22>
        memset(tmp_addr, 0, 6);
   259d8:	2100      	movs	r1, #0
   259da:	9104      	str	r1, [sp, #16]
   259dc:	f8ad 1014 	strh.w	r1, [sp, #20]
        memset(new_irk, 0, 16);
   259e0:	9100      	str	r1, [sp, #0]
   259e2:	9101      	str	r1, [sp, #4]
   259e4:	9102      	str	r1, [sp, #8]
   259e6:	9103      	str	r1, [sp, #12]
        rc = ble_hs_pvcy_add_entry(tmp_addr, 0, new_irk);
   259e8:	466a      	mov	r2, sp
   259ea:	a804      	add	r0, sp, #16
   259ec:	f7ff ffa8 	bl	25940 <ble_hs_pvcy_add_entry>
   259f0:	4603      	mov	r3, r0
   259f2:	e7d2      	b.n	2599a <ble_hs_pvcy_set_our_irk+0x22>
   259f4:	20002b68 	.word	0x20002b68
   259f8:	000324e8 	.word	0x000324e8

000259fc <ble_hs_startup_reset_tx>:
    return 0;
}

static int
ble_hs_startup_reset_tx(void)
{
   259fc:	b500      	push	{lr}
   259fe:	b083      	sub	sp, #12
    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_CTLR_BASEBAND,
   25a00:	2100      	movs	r1, #0
   25a02:	9100      	str	r1, [sp, #0]
   25a04:	460b      	mov	r3, r1
   25a06:	460a      	mov	r2, r1
   25a08:	f640 4003 	movw	r0, #3075	; 0xc03
   25a0c:	f7ff f8d2 	bl	24bb4 <ble_hs_hci_cmd_tx>
                                        BLE_HCI_OCF_CB_RESET),
                             NULL, 0, NULL, 0);
}
   25a10:	b003      	add	sp, #12
   25a12:	f85d fb04 	ldr.w	pc, [sp], #4

00025a16 <ble_hs_startup_le_read_buf_sz_tx>:
{
   25a16:	b530      	push	{r4, r5, lr}
   25a18:	b085      	sub	sp, #20
   25a1a:	4605      	mov	r5, r0
   25a1c:	460c      	mov	r4, r1
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   25a1e:	2303      	movs	r3, #3
   25a20:	9300      	str	r3, [sp, #0]
   25a22:	ab03      	add	r3, sp, #12
   25a24:	2200      	movs	r2, #0
   25a26:	4611      	mov	r1, r2
   25a28:	f242 0002 	movw	r0, #8194	; 0x2002
   25a2c:	f7ff f8c2 	bl	24bb4 <ble_hs_hci_cmd_tx>
    if (rc != 0) {
   25a30:	4603      	mov	r3, r0
   25a32:	b928      	cbnz	r0, 25a40 <ble_hs_startup_le_read_buf_sz_tx+0x2a>
    *out_pktlen = le16toh(rsp.data_len);
   25a34:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   25a38:	802a      	strh	r2, [r5, #0]
    *out_max_pkts = rsp.data_packets;
   25a3a:	f89d 200e 	ldrb.w	r2, [sp, #14]
   25a3e:	7022      	strb	r2, [r4, #0]
}
   25a40:	4618      	mov	r0, r3
   25a42:	b005      	add	sp, #20
   25a44:	bd30      	pop	{r4, r5, pc}

00025a46 <ble_hs_startup_read_buf_sz_tx>:
{
   25a46:	b530      	push	{r4, r5, lr}
   25a48:	b085      	sub	sp, #20
   25a4a:	4605      	mov	r5, r0
   25a4c:	460c      	mov	r4, r1
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_INFO_PARAMS,
   25a4e:	2307      	movs	r3, #7
   25a50:	9300      	str	r3, [sp, #0]
   25a52:	ab02      	add	r3, sp, #8
   25a54:	2200      	movs	r2, #0
   25a56:	4611      	mov	r1, r2
   25a58:	f241 0005 	movw	r0, #4101	; 0x1005
   25a5c:	f7ff f8aa 	bl	24bb4 <ble_hs_hci_cmd_tx>
    if (rc != 0) {
   25a60:	4603      	mov	r3, r0
   25a62:	b928      	cbnz	r0, 25a70 <ble_hs_startup_read_buf_sz_tx+0x2a>
    *out_pktlen = le16toh(rsp.acl_data_len);
   25a64:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   25a68:	802a      	strh	r2, [r5, #0]
    *out_max_pkts = le16toh(rsp.acl_num);
   25a6a:	f8bd 200b 	ldrh.w	r2, [sp, #11]
   25a6e:	8022      	strh	r2, [r4, #0]
}
   25a70:	4618      	mov	r0, r3
   25a72:	b005      	add	sp, #20
   25a74:	bd30      	pop	{r4, r5, pc}

00025a76 <ble_hs_startup_read_local_ver_tx>:
{
   25a76:	b510      	push	{r4, lr}
   25a78:	b084      	sub	sp, #16
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_INFO_PARAMS,
   25a7a:	2308      	movs	r3, #8
   25a7c:	9300      	str	r3, [sp, #0]
   25a7e:	446b      	add	r3, sp
   25a80:	2200      	movs	r2, #0
   25a82:	4611      	mov	r1, r2
   25a84:	f241 0001 	movw	r0, #4097	; 0x1001
   25a88:	f7ff f894 	bl	24bb4 <ble_hs_hci_cmd_tx>
    if (rc != 0) {
   25a8c:	4604      	mov	r4, r0
   25a8e:	b110      	cbz	r0, 25a96 <ble_hs_startup_read_local_ver_tx+0x20>
}
   25a90:	4620      	mov	r0, r4
   25a92:	b004      	add	sp, #16
   25a94:	bd10      	pop	{r4, pc}
    ble_hs_hci_set_hci_version(rsp.hci_ver);
   25a96:	f89d 0008 	ldrb.w	r0, [sp, #8]
   25a9a:	f7ff f94b 	bl	24d34 <ble_hs_hci_set_hci_version>
    return 0;
   25a9e:	e7f7      	b.n	25a90 <ble_hs_startup_read_local_ver_tx+0x1a>

00025aa0 <ble_hs_startup_set_evmask_tx>:
{
   25aa0:	b510      	push	{r4, lr}
   25aa2:	b086      	sub	sp, #24
    version = ble_hs_hci_get_hci_version();
   25aa4:	f7ff f94c 	bl	24d40 <ble_hs_hci_get_hci_version>
   25aa8:	4604      	mov	r4, r0
    cmd.event_mask = htole64(0x2000800002008090);
   25aaa:	a906      	add	r1, sp, #24
   25aac:	a310      	add	r3, pc, #64	; (adr r3, 25af0 <ble_hs_startup_set_evmask_tx+0x50>)
   25aae:	e9d3 2300 	ldrd	r2, r3, [r3]
   25ab2:	e961 2302 	strd	r2, r3, [r1, #-8]!
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_CTLR_BASEBAND,
   25ab6:	2300      	movs	r3, #0
   25ab8:	9300      	str	r3, [sp, #0]
   25aba:	2208      	movs	r2, #8
   25abc:	f640 4001 	movw	r0, #3073	; 0xc01
   25ac0:	f7ff f878 	bl	24bb4 <ble_hs_hci_cmd_tx>
    if (rc != 0) {
   25ac4:	4603      	mov	r3, r0
   25ac6:	b908      	cbnz	r0, 25acc <ble_hs_startup_set_evmask_tx+0x2c>
    if (version >= BLE_HCI_VER_BCS_4_1) {
   25ac8:	2c06      	cmp	r4, #6
   25aca:	d802      	bhi.n	25ad2 <ble_hs_startup_set_evmask_tx+0x32>
}
   25acc:	4618      	mov	r0, r3
   25ace:	b006      	add	sp, #24
   25ad0:	bd10      	pop	{r4, pc}
        cmd2.event_mask2 = htole64(0x0000000000800000);
   25ad2:	a906      	add	r1, sp, #24
   25ad4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   25ad8:	2300      	movs	r3, #0
   25ada:	e961 2304 	strd	r2, r3, [r1, #-16]!
        rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_CTLR_BASEBAND,
   25ade:	2300      	movs	r3, #0
   25ae0:	9300      	str	r3, [sp, #0]
   25ae2:	2208      	movs	r2, #8
   25ae4:	f640 4063 	movw	r0, #3171	; 0xc63
   25ae8:	f7ff f864 	bl	24bb4 <ble_hs_hci_cmd_tx>
   25aec:	4603      	mov	r3, r0
   25aee:	e7ed      	b.n	25acc <ble_hs_startup_set_evmask_tx+0x2c>
   25af0:	02008090 	.word	0x02008090
   25af4:	20008000 	.word	0x20008000

00025af8 <ble_hs_startup_le_set_evmask_tx>:
{
   25af8:	b500      	push	{lr}
   25afa:	b085      	sub	sp, #20
    version = ble_hs_hci_get_hci_version();
   25afc:	f7ff f920 	bl	24d40 <ble_hs_hci_get_hci_version>
    if (version >= BLE_HCI_VER_BCS_4_1) {
   25b00:	2806      	cmp	r0, #6
   25b02:	d818      	bhi.n	25b36 <ble_hs_startup_le_set_evmask_tx+0x3e>
    mask = 0x000000000000001f;
   25b04:	221f      	movs	r2, #31
   25b06:	2300      	movs	r3, #0
    if (version >= BLE_HCI_VER_BCS_4_2) {
   25b08:	2807      	cmp	r0, #7
   25b0a:	d901      	bls.n	25b10 <ble_hs_startup_le_set_evmask_tx+0x18>
        mask |= 0x0000000000000640;
   25b0c:	f442 62c8 	orr.w	r2, r2, #1600	; 0x640
    if (version >= BLE_HCI_VER_BCS_5_0) {
   25b10:	2808      	cmp	r0, #8
   25b12:	d903      	bls.n	25b1c <ble_hs_startup_le_set_evmask_tx+0x24>
        mask |= 0x00000000000ff800;
   25b14:	4809      	ldr	r0, [pc, #36]	; (25b3c <ble_hs_startup_le_set_evmask_tx+0x44>)
   25b16:	2100      	movs	r1, #0
   25b18:	4302      	orrs	r2, r0
   25b1a:	430b      	orrs	r3, r1
    cmd.event_mask = htole64(mask);
   25b1c:	a904      	add	r1, sp, #16
   25b1e:	e961 2302 	strd	r2, r3, [r1, #-8]!
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   25b22:	2300      	movs	r3, #0
   25b24:	9300      	str	r3, [sp, #0]
   25b26:	2208      	movs	r2, #8
   25b28:	f242 0001 	movw	r0, #8193	; 0x2001
   25b2c:	f7ff f842 	bl	24bb4 <ble_hs_hci_cmd_tx>
}
   25b30:	b005      	add	sp, #20
   25b32:	f85d fb04 	ldr.w	pc, [sp], #4
        mask |= 0x0000000000000020;
   25b36:	223f      	movs	r2, #63	; 0x3f
   25b38:	2300      	movs	r3, #0
   25b3a:	e7e5      	b.n	25b08 <ble_hs_startup_le_set_evmask_tx+0x10>
   25b3c:	000ff800 	.word	0x000ff800

00025b40 <ble_hs_startup_read_buf_sz>:
{
   25b40:	b500      	push	{lr}
   25b42:	b083      	sub	sp, #12
    uint16_t le_pktlen = 0;
   25b44:	2300      	movs	r3, #0
   25b46:	f8ad 3006 	strh.w	r3, [sp, #6]
    uint16_t max_pkts = 0;
   25b4a:	f8ad 3004 	strh.w	r3, [sp, #4]
    uint16_t pktlen = 0;
   25b4e:	f8ad 3002 	strh.w	r3, [sp, #2]
    uint8_t le_max_pkts = 0;
   25b52:	a902      	add	r1, sp, #8
   25b54:	f801 3d07 	strb.w	r3, [r1, #-7]!
    rc = ble_hs_startup_le_read_buf_sz_tx(&le_pktlen, &le_max_pkts);
   25b58:	f10d 0006 	add.w	r0, sp, #6
   25b5c:	f7ff ff5b 	bl	25a16 <ble_hs_startup_le_read_buf_sz_tx>
    if (rc != 0) {
   25b60:	4603      	mov	r3, r0
   25b62:	b978      	cbnz	r0, 25b84 <ble_hs_startup_read_buf_sz+0x44>
    if (le_pktlen != 0) {
   25b64:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   25b68:	b183      	cbz	r3, 25b8c <ble_hs_startup_read_buf_sz+0x4c>
        pktlen = le_pktlen;
   25b6a:	f8ad 3002 	strh.w	r3, [sp, #2]
        max_pkts = le_max_pkts;
   25b6e:	f89d 3001 	ldrb.w	r3, [sp, #1]
   25b72:	f8ad 3004 	strh.w	r3, [sp, #4]
    rc = ble_hs_hci_set_buf_sz(pktlen, max_pkts);
   25b76:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   25b7a:	f8bd 0002 	ldrh.w	r0, [sp, #2]
   25b7e:	f7fe fff7 	bl	24b70 <ble_hs_hci_set_buf_sz>
   25b82:	4603      	mov	r3, r0
}
   25b84:	4618      	mov	r0, r3
   25b86:	b003      	add	sp, #12
   25b88:	f85d fb04 	ldr.w	pc, [sp], #4
        rc = ble_hs_startup_read_buf_sz_tx(&pktlen, &max_pkts);
   25b8c:	a901      	add	r1, sp, #4
   25b8e:	f10d 0002 	add.w	r0, sp, #2
   25b92:	f7ff ff58 	bl	25a46 <ble_hs_startup_read_buf_sz_tx>
        if (rc != 0) {
   25b96:	4603      	mov	r3, r0
   25b98:	2800      	cmp	r0, #0
   25b9a:	d0ec      	beq.n	25b76 <ble_hs_startup_read_buf_sz+0x36>
   25b9c:	e7f2      	b.n	25b84 <ble_hs_startup_read_buf_sz+0x44>

00025b9e <ble_hs_startup_le_read_sup_f_tx>:
{
   25b9e:	b510      	push	{r4, lr}
   25ba0:	b084      	sub	sp, #16
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   25ba2:	2308      	movs	r3, #8
   25ba4:	9300      	str	r3, [sp, #0]
   25ba6:	446b      	add	r3, sp
   25ba8:	2200      	movs	r2, #0
   25baa:	4611      	mov	r1, r2
   25bac:	f242 0003 	movw	r0, #8195	; 0x2003
   25bb0:	f7ff f800 	bl	24bb4 <ble_hs_hci_cmd_tx>
    if (rc != 0) {
   25bb4:	4604      	mov	r4, r0
   25bb6:	b110      	cbz	r0, 25bbe <ble_hs_startup_le_read_sup_f_tx+0x20>
}
   25bb8:	4620      	mov	r0, r4
   25bba:	b004      	add	sp, #16
   25bbc:	bd10      	pop	{r4, pc}
    ble_hs_hci_set_le_supported_feat(le64toh(rsp.features));
   25bbe:	9802      	ldr	r0, [sp, #8]
   25bc0:	f7ff f8b2 	bl	24d28 <ble_hs_hci_set_le_supported_feat>
    return 0;
   25bc4:	e7f8      	b.n	25bb8 <ble_hs_startup_le_read_sup_f_tx+0x1a>

00025bc6 <ble_hs_startup_read_bd_addr>:
{
   25bc6:	b510      	push	{r4, lr}
   25bc8:	b084      	sub	sp, #16
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_INFO_PARAMS,
   25bca:	2306      	movs	r3, #6
   25bcc:	9300      	str	r3, [sp, #0]
   25bce:	ab02      	add	r3, sp, #8
   25bd0:	2200      	movs	r2, #0
   25bd2:	4611      	mov	r1, r2
   25bd4:	f241 0009 	movw	r0, #4105	; 0x1009
   25bd8:	f7fe ffec 	bl	24bb4 <ble_hs_hci_cmd_tx>
    if (rc != 0) {
   25bdc:	4604      	mov	r4, r0
   25bde:	b110      	cbz	r0, 25be6 <ble_hs_startup_read_bd_addr+0x20>
}
   25be0:	4620      	mov	r0, r4
   25be2:	b004      	add	sp, #16
   25be4:	bd10      	pop	{r4, pc}
    ble_hs_id_set_pub(rsp.addr);
   25be6:	a802      	add	r0, sp, #8
   25be8:	f7ff fbf4 	bl	253d4 <ble_hs_id_set_pub>
    return 0;
   25bec:	e7f8      	b.n	25be0 <ble_hs_startup_read_bd_addr+0x1a>

00025bee <ble_hs_startup_go>:

int
ble_hs_startup_go(void)
{
   25bee:	b510      	push	{r4, lr}
    int rc;

    rc = ble_hs_startup_reset_tx();
   25bf0:	f7ff ff04 	bl	259fc <ble_hs_startup_reset_tx>
    if (rc != 0) {
   25bf4:	4604      	mov	r4, r0
   25bf6:	b108      	cbz	r0, 25bfc <ble_hs_startup_go+0xe>

    /* If flow control is enabled, configure the controller to use it. */
    ble_hs_flow_startup();

    return 0;
}
   25bf8:	4620      	mov	r0, r4
   25bfa:	bd10      	pop	{r4, pc}
    rc = ble_hs_startup_read_local_ver_tx();
   25bfc:	f7ff ff3b 	bl	25a76 <ble_hs_startup_read_local_ver_tx>
    if (rc != 0) {
   25c00:	4604      	mov	r4, r0
   25c02:	2800      	cmp	r0, #0
   25c04:	d1f8      	bne.n	25bf8 <ble_hs_startup_go+0xa>
    rc = ble_hs_startup_set_evmask_tx();
   25c06:	f7ff ff4b 	bl	25aa0 <ble_hs_startup_set_evmask_tx>
    if (rc != 0) {
   25c0a:	4604      	mov	r4, r0
   25c0c:	2800      	cmp	r0, #0
   25c0e:	d1f3      	bne.n	25bf8 <ble_hs_startup_go+0xa>
    rc = ble_hs_startup_le_set_evmask_tx();
   25c10:	f7ff ff72 	bl	25af8 <ble_hs_startup_le_set_evmask_tx>
    if (rc != 0) {
   25c14:	4604      	mov	r4, r0
   25c16:	2800      	cmp	r0, #0
   25c18:	d1ee      	bne.n	25bf8 <ble_hs_startup_go+0xa>
    rc = ble_hs_startup_read_buf_sz();
   25c1a:	f7ff ff91 	bl	25b40 <ble_hs_startup_read_buf_sz>
    if (rc != 0) {
   25c1e:	4604      	mov	r4, r0
   25c20:	2800      	cmp	r0, #0
   25c22:	d1e9      	bne.n	25bf8 <ble_hs_startup_go+0xa>
    rc = ble_hs_startup_le_read_sup_f_tx();
   25c24:	f7ff ffbb 	bl	25b9e <ble_hs_startup_le_read_sup_f_tx>
    if (rc != 0) {
   25c28:	4604      	mov	r4, r0
   25c2a:	2800      	cmp	r0, #0
   25c2c:	d1e4      	bne.n	25bf8 <ble_hs_startup_go+0xa>
    rc = ble_hs_startup_read_bd_addr();
   25c2e:	f7ff ffca 	bl	25bc6 <ble_hs_startup_read_bd_addr>
    if (rc != 0) {
   25c32:	4604      	mov	r4, r0
   25c34:	2800      	cmp	r0, #0
   25c36:	d1df      	bne.n	25bf8 <ble_hs_startup_go+0xa>
    ble_hs_pvcy_set_our_irk(NULL);
   25c38:	f7ff fe9e 	bl	25978 <ble_hs_pvcy_set_our_irk>
    ble_hs_flow_startup();
   25c3c:	f7fe fe9e 	bl	2497c <ble_hs_flow_startup>
    return 0;
   25c40:	e7da      	b.n	25bf8 <ble_hs_startup_go+0xa>
	...

00025c44 <ble_hs_stop_done>:
/**
 * Called when a stop procedure has completed.
 */
static void
ble_hs_stop_done(int status)
{
   25c44:	b538      	push	{r3, r4, r5, lr}
   25c46:	4605      	mov	r5, r0
    os_callout_stop(&co->co);
   25c48:	480c      	ldr	r0, [pc, #48]	; (25c7c <ble_hs_stop_done+0x38>)
   25c4a:	f7e7 f937 	bl	cebc <os_callout_stop>
    struct ble_hs_stop_listener_slist slist;
    struct ble_hs_stop_listener *listener;

    ble_npl_callout_stop(&ble_hs_stop_terminate_tmo);

    ble_hs_lock();
   25c4e:	f7fd ff17 	bl	23a80 <ble_hs_lock>

    ble_gap_event_listener_unregister(&ble_hs_stop_gap_listener);
   25c52:	480b      	ldr	r0, [pc, #44]	; (25c80 <ble_hs_stop_done+0x3c>)
   25c54:	f7fb fe0c 	bl	21870 <ble_gap_event_listener_unregister>

    slist = ble_hs_stop_listeners;
   25c58:	4a0a      	ldr	r2, [pc, #40]	; (25c84 <ble_hs_stop_done+0x40>)
   25c5a:	6814      	ldr	r4, [r2, #0]
    SLIST_INIT(&ble_hs_stop_listeners);
   25c5c:	2300      	movs	r3, #0
   25c5e:	6013      	str	r3, [r2, #0]

    ble_hs_enabled_state = BLE_HS_ENABLED_STATE_OFF;
   25c60:	4a09      	ldr	r2, [pc, #36]	; (25c88 <ble_hs_stop_done+0x44>)
   25c62:	7013      	strb	r3, [r2, #0]

    ble_hs_unlock();
   25c64:	f7fd ff10 	bl	23a88 <ble_hs_unlock>

    SLIST_FOREACH(listener, &slist, link) {
   25c68:	e004      	b.n	25c74 <ble_hs_stop_done+0x30>
        listener->fn(status, listener->arg);
   25c6a:	6823      	ldr	r3, [r4, #0]
   25c6c:	6861      	ldr	r1, [r4, #4]
   25c6e:	4628      	mov	r0, r5
   25c70:	4798      	blx	r3
    SLIST_FOREACH(listener, &slist, link) {
   25c72:	68a4      	ldr	r4, [r4, #8]
   25c74:	2c00      	cmp	r4, #0
   25c76:	d1f8      	bne.n	25c6a <ble_hs_stop_done+0x26>
    }
}
   25c78:	bd38      	pop	{r3, r4, r5, pc}
   25c7a:	bf00      	nop
   25c7c:	20002b8c 	.word	0x20002b8c
   25c80:	20002b7c 	.word	0x20002b7c
   25c84:	20002b88 	.word	0x20002b88
   25c88:	20004112 	.word	0x20004112

00025c8c <ble_hs_stop_terminate_timeout_cb>:
 * This is called when host graceful disconnect timeout fires. That means some devices
 * are out of range and disconnection completed did no happen yet.
 */
static void
ble_hs_stop_terminate_timeout_cb(struct ble_npl_event *ev)
{
   25c8c:	b508      	push	{r3, lr}
    BLE_HS_LOG(ERROR, "ble_hs_stop_terminate_timeout_cb,"
   25c8e:	4b05      	ldr	r3, [pc, #20]	; (25ca4 <ble_hs_stop_terminate_timeout_cb+0x18>)
   25c90:	781b      	ldrb	r3, [r3, #0]
   25c92:	4a05      	ldr	r2, [pc, #20]	; (25ca8 <ble_hs_stop_terminate_timeout_cb+0x1c>)
   25c94:	2103      	movs	r1, #3
   25c96:	2004      	movs	r0, #4
   25c98:	f7eb fd22 	bl	116e0 <modlog_printf>
                      "%d connection(s) still up \n", ble_hs_stop_conn_cnt);

    /* TODO: Shall we send error here? */
    ble_hs_stop_done(0);
   25c9c:	2000      	movs	r0, #0
   25c9e:	f7ff ffd1 	bl	25c44 <ble_hs_stop_done>
}
   25ca2:	bd08      	pop	{r3, pc}
   25ca4:	20002b79 	.word	0x20002b79
   25ca8:	000324f8 	.word	0x000324f8

00025cac <ble_hs_stop_init>:
    return 0;
}

void
ble_hs_stop_init(void)
{
   25cac:	b508      	push	{r3, lr}
    return (struct ble_npl_eventq *) os_eventq_dflt_get();
   25cae:	f7e7 fb35 	bl	d31c <os_eventq_dflt_get>
    os_callout_init(&co->co, &evq->evq, (os_event_fn *)ev_cb, ev_arg);
   25cb2:	2300      	movs	r3, #0
   25cb4:	4a02      	ldr	r2, [pc, #8]	; (25cc0 <ble_hs_stop_init+0x14>)
   25cb6:	4601      	mov	r1, r0
   25cb8:	4802      	ldr	r0, [pc, #8]	; (25cc4 <ble_hs_stop_init+0x18>)
   25cba:	f7e7 f8f1 	bl	cea0 <os_callout_init>
                         ble_hs_stop_terminate_timeout_cb, NULL);
#else
    ble_npl_callout_init(&ble_hs_stop_terminate_tmo, nimble_port_get_dflt_eventq(),
                         ble_hs_stop_terminate_timeout_cb, NULL);
#endif
}
   25cbe:	bd08      	pop	{r3, pc}
   25cc0:	00025c8d 	.word	0x00025c8d
   25cc4:	20002b8c 	.word	0x20002b8c

00025cc8 <ble_l2cap_get_mtu>:
    return rc;
}

static uint16_t
ble_l2cap_get_mtu(struct ble_l2cap_chan *chan)
{
   25cc8:	b508      	push	{r3, lr}
    if (chan->scid == BLE_L2CAP_CID_ATT) {
   25cca:	8903      	ldrh	r3, [r0, #8]
   25ccc:	2b04      	cmp	r3, #4
   25cce:	d001      	beq.n	25cd4 <ble_l2cap_get_mtu+0xc>
         * done
         */
        return ble_att_chan_mtu(chan);
    }

    return chan->my_mtu;
   25cd0:	8940      	ldrh	r0, [r0, #10]
}
   25cd2:	bd08      	pop	{r3, pc}
        return ble_att_chan_mtu(chan);
   25cd4:	f7f8 fe23 	bl	1e91e <ble_att_chan_mtu>
   25cd8:	e7fb      	b.n	25cd2 <ble_l2cap_get_mtu+0xa>

00025cda <ble_l2cap_append_rx>:
{
   25cda:	b508      	push	{r3, lr}
    m = os_mbuf_pack_chains(chan->rx_buf, frag);
   25cdc:	6900      	ldr	r0, [r0, #16]
   25cde:	f7e7 febd 	bl	da5c <os_mbuf_pack_chains>
    assert(m);
   25ce2:	b100      	cbz	r0, 25ce6 <ble_l2cap_append_rx+0xc>
}
   25ce4:	bd08      	pop	{r3, pc}
    assert(m);
   25ce6:	f7e6 fa7f 	bl	c1e8 <hal_debugger_connected>
   25cea:	b100      	cbz	r0, 25cee <ble_l2cap_append_rx+0x14>
   25cec:	be01      	bkpt	0x0001
   25cee:	2300      	movs	r3, #0
   25cf0:	461a      	mov	r2, r3
   25cf2:	4619      	mov	r1, r3
   25cf4:	4618      	mov	r0, r3
   25cf6:	f7e6 ff2b 	bl	cb50 <__assert_func>
	...

00025cfc <ble_l2cap_chan_alloc>:
{
   25cfc:	b510      	push	{r4, lr}
   25cfe:	4604      	mov	r4, r0
    chan = os_memblock_get(&ble_l2cap_chan_pool);
   25d00:	4809      	ldr	r0, [pc, #36]	; (25d28 <ble_l2cap_chan_alloc+0x2c>)
   25d02:	f7e7 ff83 	bl	dc0c <os_memblock_get>
    if (chan == NULL) {
   25d06:	4603      	mov	r3, r0
   25d08:	b160      	cbz	r0, 25d24 <ble_l2cap_chan_alloc+0x28>
    memset(chan, 0, sizeof *chan);
   25d0a:	2200      	movs	r2, #0
   25d0c:	6002      	str	r2, [r0, #0]
   25d0e:	6042      	str	r2, [r0, #4]
   25d10:	6082      	str	r2, [r0, #8]
   25d12:	60c2      	str	r2, [r0, #12]
   25d14:	6102      	str	r2, [r0, #16]
   25d16:	6142      	str	r2, [r0, #20]
   25d18:	6182      	str	r2, [r0, #24]
    chan->conn_handle = conn_handle;
   25d1a:	8084      	strh	r4, [r0, #4]
    STATS_INC(ble_l2cap_stats, chan_create);
   25d1c:	4903      	ldr	r1, [pc, #12]	; (25d2c <ble_l2cap_chan_alloc+0x30>)
   25d1e:	68ca      	ldr	r2, [r1, #12]
   25d20:	3201      	adds	r2, #1
   25d22:	60ca      	str	r2, [r1, #12]
}
   25d24:	4618      	mov	r0, r3
   25d26:	bd10      	pop	{r4, pc}
   25d28:	20004120 	.word	0x20004120
   25d2c:	2000413c 	.word	0x2000413c

00025d30 <ble_l2cap_chan_free>:
    if (chan == NULL) {
   25d30:	b169      	cbz	r1, 25d4e <ble_l2cap_chan_free+0x1e>
{
   25d32:	b510      	push	{r4, lr}
   25d34:	460c      	mov	r4, r1
    os_mbuf_free_chain(chan->rx_buf);
   25d36:	6908      	ldr	r0, [r1, #16]
   25d38:	f7e7 fb72 	bl	d420 <os_mbuf_free_chain>
    rc = os_memblock_put(&ble_l2cap_chan_pool, chan);
   25d3c:	4621      	mov	r1, r4
   25d3e:	4804      	ldr	r0, [pc, #16]	; (25d50 <ble_l2cap_chan_free+0x20>)
   25d40:	f7e7 ff8c 	bl	dc5c <os_memblock_put>
    STATS_INC(ble_l2cap_stats, chan_delete);
   25d44:	4a03      	ldr	r2, [pc, #12]	; (25d54 <ble_l2cap_chan_free+0x24>)
   25d46:	6913      	ldr	r3, [r2, #16]
   25d48:	3301      	adds	r3, #1
   25d4a:	6113      	str	r3, [r2, #16]
}
   25d4c:	bd10      	pop	{r4, pc}
   25d4e:	4770      	bx	lr
   25d50:	20004120 	.word	0x20004120
   25d54:	2000413c 	.word	0x2000413c

00025d58 <ble_l2cap_is_mtu_req_sent>:
    return (chan->flags & BLE_L2CAP_CHAN_F_TXED_MTU);
   25d58:	7b80      	ldrb	r0, [r0, #14]
}
   25d5a:	f000 0001 	and.w	r0, r0, #1
   25d5e:	4770      	bx	lr

00025d60 <ble_l2cap_parse_hdr>:
{
   25d60:	b538      	push	{r3, r4, r5, lr}
   25d62:	4614      	mov	r4, r2
    rc = os_mbuf_copydata(om, off, sizeof *l2cap_hdr, l2cap_hdr);
   25d64:	4613      	mov	r3, r2
   25d66:	2204      	movs	r2, #4
   25d68:	f7e7 fc05 	bl	d576 <os_mbuf_copydata>
    if (rc != 0) {
   25d6c:	b960      	cbnz	r0, 25d88 <ble_l2cap_parse_hdr+0x28>
   25d6e:	4605      	mov	r5, r0
    l2cap_hdr->len = get_le16(&l2cap_hdr->len);
   25d70:	4620      	mov	r0, r4
   25d72:	f008 fffc 	bl	2ed6e <get_le16>
   25d76:	4623      	mov	r3, r4
   25d78:	f823 0b02 	strh.w	r0, [r3], #2
    l2cap_hdr->cid = get_le16(&l2cap_hdr->cid);
   25d7c:	4618      	mov	r0, r3
   25d7e:	f008 fff6 	bl	2ed6e <get_le16>
   25d82:	8060      	strh	r0, [r4, #2]
}
   25d84:	4628      	mov	r0, r5
   25d86:	bd38      	pop	{r3, r4, r5, pc}
        return BLE_HS_EMSGSIZE;
   25d88:	2504      	movs	r5, #4
   25d8a:	e7fb      	b.n	25d84 <ble_l2cap_parse_hdr+0x24>

00025d8c <ble_l2cap_prepend_hdr>:
{
   25d8c:	b530      	push	{r4, r5, lr}
   25d8e:	b083      	sub	sp, #12
   25d90:	4604      	mov	r4, r0
   25d92:	460d      	mov	r5, r1
    put_le16(&hdr.len, len);
   25d94:	4611      	mov	r1, r2
   25d96:	a801      	add	r0, sp, #4
   25d98:	f008 ffc8 	bl	2ed2c <put_le16>
    put_le16(&hdr.cid, cid);
   25d9c:	4629      	mov	r1, r5
   25d9e:	f10d 0006 	add.w	r0, sp, #6
   25da2:	f008 ffc3 	bl	2ed2c <put_le16>
    om = os_mbuf_prepend_pullup(om, sizeof hdr);
   25da6:	2104      	movs	r1, #4
   25da8:	4620      	mov	r0, r4
   25daa:	f7e7 fe1f 	bl	d9ec <os_mbuf_prepend_pullup>
    if (om == NULL) {
   25dae:	4603      	mov	r3, r0
   25db0:	b110      	cbz	r0, 25db8 <ble_l2cap_prepend_hdr+0x2c>
    memcpy(om->om_data, &hdr, sizeof hdr);
   25db2:	6802      	ldr	r2, [r0, #0]
   25db4:	9901      	ldr	r1, [sp, #4]
   25db6:	6011      	str	r1, [r2, #0]
}
   25db8:	4618      	mov	r0, r3
   25dba:	b003      	add	sp, #12
   25dbc:	bd30      	pop	{r4, r5, pc}

00025dbe <ble_l2cap_get_conn_handle>:
    if (!chan) {
   25dbe:	b108      	cbz	r0, 25dc4 <ble_l2cap_get_conn_handle+0x6>
    return chan->conn_handle;
   25dc0:	8880      	ldrh	r0, [r0, #4]
   25dc2:	4770      	bx	lr
        return BLE_HS_CONN_HANDLE_NONE;
   25dc4:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
   25dc8:	4770      	bx	lr

00025dca <ble_l2cap_remove_rx>:
{
   25dca:	b538      	push	{r3, r4, r5, lr}
   25dcc:	460c      	mov	r4, r1
    conn->bhc_rx_chan = NULL;
   25dce:	2500      	movs	r5, #0
   25dd0:	6305      	str	r5, [r0, #48]	; 0x30
    os_mbuf_free_chain(chan->rx_buf);
   25dd2:	6908      	ldr	r0, [r1, #16]
   25dd4:	f7e7 fb24 	bl	d420 <os_mbuf_free_chain>
    chan->rx_buf = NULL;
   25dd8:	6125      	str	r5, [r4, #16]
    chan->rx_len = 0;
   25dda:	82a5      	strh	r5, [r4, #20]
}
   25ddc:	bd38      	pop	{r3, r4, r5, pc}

00025dde <ble_l2cap_rx_payload>:
{
   25dde:	b570      	push	{r4, r5, r6, lr}
   25de0:	4605      	mov	r5, r0
   25de2:	460c      	mov	r4, r1
   25de4:	461e      	mov	r6, r3
    if (chan->rx_buf == NULL) {
   25de6:	690b      	ldr	r3, [r1, #16]
   25de8:	b16b      	cbz	r3, 25e06 <ble_l2cap_rx_payload+0x28>
        ble_l2cap_append_rx(chan, om);
   25dea:	4611      	mov	r1, r2
   25dec:	4620      	mov	r0, r4
   25dee:	f7ff ff74 	bl	25cda <ble_l2cap_append_rx>
    len_diff = OS_MBUF_PKTLEN(chan->rx_buf) - chan->rx_len;
   25df2:	6923      	ldr	r3, [r4, #16]
   25df4:	8a18      	ldrh	r0, [r3, #16]
   25df6:	8aa3      	ldrh	r3, [r4, #20]
   25df8:	1ac0      	subs	r0, r0, r3
    if (len_diff > 0) {
   25dfa:	2800      	cmp	r0, #0
   25dfc:	dc05      	bgt.n	25e0a <ble_l2cap_rx_payload+0x2c>
    } else if (len_diff == 0) {
   25dfe:	b950      	cbnz	r0, 25e16 <ble_l2cap_rx_payload+0x38>
        *out_rx_cb = chan->rx_fn;
   25e00:	69a3      	ldr	r3, [r4, #24]
   25e02:	6033      	str	r3, [r6, #0]
}
   25e04:	bd70      	pop	{r4, r5, r6, pc}
        chan->rx_buf = om;
   25e06:	610a      	str	r2, [r1, #16]
   25e08:	e7f3      	b.n	25df2 <ble_l2cap_rx_payload+0x14>
        ble_l2cap_remove_rx(conn, chan);
   25e0a:	4621      	mov	r1, r4
   25e0c:	4628      	mov	r0, r5
   25e0e:	f7ff ffdc 	bl	25dca <ble_l2cap_remove_rx>
        rc = BLE_HS_EBADDATA;
   25e12:	200a      	movs	r0, #10
   25e14:	e7f6      	b.n	25e04 <ble_l2cap_rx_payload+0x26>
    return os_time_get();
   25e16:	f7e8 facb 	bl	e3b0 <os_time_get>
            ble_npl_time_get() + MYNEWT_VAL(BLE_L2CAP_RX_FRAG_TIMEOUT);
   25e1a:	f500 40ea 	add.w	r0, r0, #29952	; 0x7500
   25e1e:	3030      	adds	r0, #48	; 0x30
        conn->bhc_rx_timeout =
   25e20:	6368      	str	r0, [r5, #52]	; 0x34
        ble_hs_timer_resched();
   25e22:	f7fd ff25 	bl	23c70 <ble_hs_timer_resched>
        rc = BLE_HS_EAGAIN;
   25e26:	2001      	movs	r0, #1
    return rc;
   25e28:	e7ec      	b.n	25e04 <ble_l2cap_rx_payload+0x26>

00025e2a <ble_l2cap_rx>:
ble_l2cap_rx(struct ble_hs_conn *conn,
             struct hci_data_hdr *hci_hdr,
             struct os_mbuf *om,
             ble_l2cap_rx_fn **out_rx_cb,
             int *out_reject_cid)
{
   25e2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25e2e:	b082      	sub	sp, #8
   25e30:	4607      	mov	r7, r0
   25e32:	4614      	mov	r4, r2
   25e34:	4698      	mov	r8, r3
   25e36:	9d08      	ldr	r5, [sp, #32]
    struct ble_l2cap_chan *chan;
    struct ble_l2cap_hdr l2cap_hdr;
    uint8_t pb;
    int rc;

    *out_reject_cid = -1;
   25e38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   25e3c:	602b      	str	r3, [r5, #0]

    pb = BLE_HCI_DATA_PB(hci_hdr->hdh_handle_pb_bc);
   25e3e:	880b      	ldrh	r3, [r1, #0]
   25e40:	f3c3 3301 	ubfx	r3, r3, #12, #2
    switch (pb) {
   25e44:	2b01      	cmp	r3, #1
   25e46:	d02e      	beq.n	25ea6 <ble_l2cap_rx+0x7c>
   25e48:	2b02      	cmp	r3, #2
   25e4a:	d13a      	bne.n	25ec2 <ble_l2cap_rx+0x98>
    case BLE_HCI_PB_FIRST_FLUSH:
        /* First fragment. */
        rc = ble_l2cap_parse_hdr(om, 0, &l2cap_hdr);
   25e4c:	aa01      	add	r2, sp, #4
   25e4e:	2100      	movs	r1, #0
   25e50:	4620      	mov	r0, r4
   25e52:	f7ff ff85 	bl	25d60 <ble_l2cap_parse_hdr>
        if (rc != 0) {
   25e56:	4606      	mov	r6, r0
   25e58:	bba0      	cbnz	r0, 25ec4 <ble_l2cap_rx+0x9a>
            goto err;
        }

        /* Strip L2CAP header from the front of the mbuf. */
        os_mbuf_adj(om, BLE_L2CAP_HDR_SZ);
   25e5a:	2104      	movs	r1, #4
   25e5c:	4620      	mov	r0, r4
   25e5e:	f7e7 fbb7 	bl	d5d0 <os_mbuf_adj>

        chan = ble_hs_conn_chan_find_by_scid(conn, l2cap_hdr.cid);
   25e62:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   25e66:	4638      	mov	r0, r7
   25e68:	f7fe fba4 	bl	245b4 <ble_hs_conn_chan_find_by_scid>
        if (chan == NULL) {
   25e6c:	4606      	mov	r6, r0
   25e6e:	b188      	cbz	r0, 25e94 <ble_l2cap_rx+0x6a>
                *out_reject_cid = l2cap_hdr.cid;
            }
            goto err;
        }

        if (chan->rx_buf != NULL) {
   25e70:	6903      	ldr	r3, [r0, #16]
   25e72:	b11b      	cbz	r3, 25e7c <ble_l2cap_rx+0x52>
            /* Previous data packet never completed.  Discard old packet. */
            ble_l2cap_remove_rx(conn, chan);
   25e74:	4601      	mov	r1, r0
   25e76:	4638      	mov	r0, r7
   25e78:	f7ff ffa7 	bl	25dca <ble_l2cap_remove_rx>
        }

        if (l2cap_hdr.len > ble_l2cap_get_mtu(chan)) {
   25e7c:	f8bd 5004 	ldrh.w	r5, [sp, #4]
   25e80:	4630      	mov	r0, r6
   25e82:	f7ff ff21 	bl	25cc8 <ble_l2cap_get_mtu>
   25e86:	4285      	cmp	r5, r0
   25e88:	d825      	bhi.n	25ed6 <ble_l2cap_rx+0xac>
            rc = BLE_HS_EBADDATA;
            goto err;
        }

        /* Remember channel and length of L2CAP data for reassembly. */
        conn->bhc_rx_chan = chan;
   25e8a:	633e      	str	r6, [r7, #48]	; 0x30
        chan->rx_len = l2cap_hdr.len;
   25e8c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   25e90:	82b3      	strh	r3, [r6, #20]
        break;
   25e92:	e00c      	b.n	25eae <ble_l2cap_rx+0x84>
            if (l2cap_hdr.cid != BLE_L2CAP_CID_BLACK_HOLE) {
   25e94:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   25e98:	f64f 72ff 	movw	r2, #65535	; 0xffff
   25e9c:	4293      	cmp	r3, r2
   25e9e:	d018      	beq.n	25ed2 <ble_l2cap_rx+0xa8>
                *out_reject_cid = l2cap_hdr.cid;
   25ea0:	602b      	str	r3, [r5, #0]
            rc = BLE_HS_ENOENT;
   25ea2:	2605      	movs	r6, #5
   25ea4:	e00e      	b.n	25ec4 <ble_l2cap_rx+0x9a>

    case BLE_HCI_PB_MIDDLE:
        chan = conn->bhc_rx_chan;
   25ea6:	6b06      	ldr	r6, [r0, #48]	; 0x30
        if (chan == NULL || chan->rx_buf == NULL) {
   25ea8:	b1be      	cbz	r6, 25eda <ble_l2cap_rx+0xb0>
   25eaa:	6933      	ldr	r3, [r6, #16]
   25eac:	b1bb      	cbz	r3, 25ede <ble_l2cap_rx+0xb4>
    default:
        rc = BLE_HS_EBADDATA;
        goto err;
    }

    rc = ble_l2cap_rx_payload(conn, chan, om, out_rx_cb);
   25eae:	4643      	mov	r3, r8
   25eb0:	4622      	mov	r2, r4
   25eb2:	4631      	mov	r1, r6
   25eb4:	4638      	mov	r0, r7
   25eb6:	f7ff ff92 	bl	25dde <ble_l2cap_rx_payload>
    om = NULL;
    if (rc != 0) {
   25eba:	4606      	mov	r6, r0
   25ebc:	b128      	cbz	r0, 25eca <ble_l2cap_rx+0xa0>
    om = NULL;
   25ebe:	2400      	movs	r4, #0
        goto err;
    }

    return 0;

err:
   25ec0:	e000      	b.n	25ec4 <ble_l2cap_rx+0x9a>
        rc = BLE_HS_EBADDATA;
   25ec2:	260a      	movs	r6, #10
    os_mbuf_free_chain(om);
   25ec4:	4620      	mov	r0, r4
   25ec6:	f7e7 faab 	bl	d420 <os_mbuf_free_chain>
    return rc;
}
   25eca:	4630      	mov	r0, r6
   25ecc:	b002      	add	sp, #8
   25ece:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            rc = BLE_HS_ENOENT;
   25ed2:	2605      	movs	r6, #5
   25ed4:	e7f6      	b.n	25ec4 <ble_l2cap_rx+0x9a>
            rc = BLE_HS_EBADDATA;
   25ed6:	260a      	movs	r6, #10
   25ed8:	e7f4      	b.n	25ec4 <ble_l2cap_rx+0x9a>
            rc = BLE_HS_EBADDATA;
   25eda:	260a      	movs	r6, #10
   25edc:	e7f2      	b.n	25ec4 <ble_l2cap_rx+0x9a>
   25ede:	260a      	movs	r6, #10
   25ee0:	e7f0      	b.n	25ec4 <ble_l2cap_rx+0x9a>

00025ee2 <ble_l2cap_tx>:
 * @return                      0 on success; nonzero on error.
 */
int
ble_l2cap_tx(struct ble_hs_conn *conn, struct ble_l2cap_chan *chan,
             struct os_mbuf *txom)
{
   25ee2:	b510      	push	{r4, lr}
   25ee4:	b082      	sub	sp, #8
   25ee6:	4604      	mov	r4, r0
   25ee8:	9201      	str	r2, [sp, #4]
    int rc;

    txom = ble_l2cap_prepend_hdr(txom, chan->dcid, OS_MBUF_PKTLEN(txom));
   25eea:	4610      	mov	r0, r2
   25eec:	8a12      	ldrh	r2, [r2, #16]
   25eee:	88c9      	ldrh	r1, [r1, #6]
   25ef0:	f7ff ff4c 	bl	25d8c <ble_l2cap_prepend_hdr>
   25ef4:	9001      	str	r0, [sp, #4]
    if (txom == NULL) {
   25ef6:	b188      	cbz	r0, 25f1c <ble_l2cap_tx+0x3a>
        return BLE_HS_ENOMEM;
    }

    rc = ble_hs_hci_acl_tx(conn, &txom);
   25ef8:	a901      	add	r1, sp, #4
   25efa:	4620      	mov	r0, r4
   25efc:	f7fe ff0c 	bl	24d18 <ble_hs_hci_acl_tx>
    switch (rc) {
   25f00:	2801      	cmp	r0, #1
   25f02:	d001      	beq.n	25f08 <ble_l2cap_tx+0x26>

    default:
        /* Error. */
        return rc;
    }
}
   25f04:	b002      	add	sp, #8
   25f06:	bd10      	pop	{r4, pc}
        STAILQ_INSERT_TAIL(&conn->bhc_tx_q, OS_MBUF_PKTHDR(txom), omp_next);
   25f08:	9b01      	ldr	r3, [sp, #4]
   25f0a:	2000      	movs	r0, #0
   25f0c:	6158      	str	r0, [r3, #20]
   25f0e:	6c22      	ldr	r2, [r4, #64]	; 0x40
   25f10:	3310      	adds	r3, #16
   25f12:	6013      	str	r3, [r2, #0]
   25f14:	9b01      	ldr	r3, [sp, #4]
   25f16:	3314      	adds	r3, #20
   25f18:	6423      	str	r3, [r4, #64]	; 0x40
        return 0;
   25f1a:	e7f3      	b.n	25f04 <ble_l2cap_tx+0x22>
        return BLE_HS_ENOMEM;
   25f1c:	2006      	movs	r0, #6
   25f1e:	e7f1      	b.n	25f04 <ble_l2cap_tx+0x22>

00025f20 <ble_l2cap_init>:

int
ble_l2cap_init(void)
{
   25f20:	b500      	push	{lr}
   25f22:	b083      	sub	sp, #12
    int rc;

    rc = os_mempool_init(&ble_l2cap_chan_pool,
   25f24:	4b11      	ldr	r3, [pc, #68]	; (25f6c <ble_l2cap_init+0x4c>)
   25f26:	9300      	str	r3, [sp, #0]
   25f28:	4b11      	ldr	r3, [pc, #68]	; (25f70 <ble_l2cap_init+0x50>)
   25f2a:	221c      	movs	r2, #28
   25f2c:	2103      	movs	r1, #3
   25f2e:	4811      	ldr	r0, [pc, #68]	; (25f74 <ble_l2cap_init+0x54>)
   25f30:	f7e7 fe28 	bl	db84 <os_mempool_init>
                         MYNEWT_VAL(BLE_L2CAP_MAX_CHANS) +
                         MYNEWT_VAL(BLE_L2CAP_COC_MAX_NUM),
                         sizeof (struct ble_l2cap_chan),
                         ble_l2cap_chan_mem, "ble_l2cap_chan_pool");
    if (rc != 0) {
   25f34:	b9a0      	cbnz	r0, 25f60 <ble_l2cap_init+0x40>
        return BLE_HS_EOS;
    }

    rc = ble_l2cap_sig_init();
   25f36:	f000 fa6b 	bl	26410 <ble_l2cap_sig_init>
    if (rc != 0) {
   25f3a:	4603      	mov	r3, r0
   25f3c:	b988      	cbnz	r0, 25f62 <ble_l2cap_init+0x42>
    rc = ble_l2cap_coc_init();
    if (rc != 0) {
        return rc;
    }

    rc = ble_sm_init();
   25f3e:	f001 ff95 	bl	27e6c <ble_sm_init>
    if (rc != 0) {
   25f42:	4603      	mov	r3, r0
   25f44:	b968      	cbnz	r0, 25f62 <ble_l2cap_init+0x42>
        return rc;
    }

    rc = stats_init_and_reg(
   25f46:	4b0c      	ldr	r3, [pc, #48]	; (25f78 <ble_l2cap_init+0x58>)
   25f48:	9301      	str	r3, [sp, #4]
   25f4a:	2300      	movs	r3, #0
   25f4c:	9300      	str	r3, [sp, #0]
   25f4e:	220a      	movs	r2, #10
   25f50:	2104      	movs	r1, #4
   25f52:	480a      	ldr	r0, [pc, #40]	; (25f7c <ble_l2cap_init+0x5c>)
   25f54:	f7ec f942 	bl	121dc <stats_init_and_reg>
        STATS_HDR(ble_l2cap_stats), STATS_SIZE_INIT_PARMS(ble_l2cap_stats,
        STATS_SIZE_32), STATS_NAME_INIT_PARMS(ble_l2cap_stats), "ble_l2cap");
    if (rc != 0) {
   25f58:	4603      	mov	r3, r0
   25f5a:	b110      	cbz	r0, 25f62 <ble_l2cap_init+0x42>
        return BLE_HS_EOS;
   25f5c:	230b      	movs	r3, #11
   25f5e:	e000      	b.n	25f62 <ble_l2cap_init+0x42>
        return BLE_HS_EOS;
   25f60:	230b      	movs	r3, #11
    }

    return 0;
}
   25f62:	4618      	mov	r0, r3
   25f64:	b003      	add	sp, #12
   25f66:	f85d fb04 	ldr.w	pc, [sp], #4
   25f6a:	bf00      	nop
   25f6c:	00032538 	.word	0x00032538
   25f70:	20002bac 	.word	0x20002bac
   25f74:	20004120 	.word	0x20004120
   25f78:	0003254c 	.word	0x0003254c
   25f7c:	2000413c 	.word	0x2000413c

00025f80 <ble_l2cap_sig_next_id>:
 *****************************************************************************/

static uint8_t
ble_l2cap_sig_next_id(void)
{
    ble_l2cap_sig_cur_id++;
   25f80:	4a05      	ldr	r2, [pc, #20]	; (25f98 <ble_l2cap_sig_next_id+0x18>)
   25f82:	7813      	ldrb	r3, [r2, #0]
   25f84:	3301      	adds	r3, #1
   25f86:	b2db      	uxtb	r3, r3
   25f88:	7013      	strb	r3, [r2, #0]
    if (ble_l2cap_sig_cur_id == 0) {
   25f8a:	b913      	cbnz	r3, 25f92 <ble_l2cap_sig_next_id+0x12>
        /* An ID of 0 is illegal. */
        ble_l2cap_sig_cur_id = 1;
   25f8c:	4613      	mov	r3, r2
   25f8e:	2201      	movs	r2, #1
   25f90:	701a      	strb	r2, [r3, #0]
    }

    return ble_l2cap_sig_cur_id;
}
   25f92:	4b01      	ldr	r3, [pc, #4]	; (25f98 <ble_l2cap_sig_next_id+0x18>)
   25f94:	7818      	ldrb	r0, [r3, #0]
   25f96:	4770      	bx	lr
   25f98:	20002c00 	.word	0x20002c00

00025f9c <ble_l2cap_sig_dispatch_get>:

static ble_l2cap_sig_rx_fn *
ble_l2cap_sig_dispatch_get(uint8_t op)
{
    if (op >= BLE_L2CAP_SIG_OP_MAX) {
   25f9c:	281a      	cmp	r0, #26
   25f9e:	d803      	bhi.n	25fa8 <ble_l2cap_sig_dispatch_get+0xc>
        return NULL;
    }

    return ble_l2cap_sig_dispatch[op];
   25fa0:	4b02      	ldr	r3, [pc, #8]	; (25fac <ble_l2cap_sig_dispatch_get+0x10>)
   25fa2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   25fa6:	4770      	bx	lr
        return NULL;
   25fa8:	2000      	movs	r0, #0
}
   25faa:	4770      	bx	lr
   25fac:	00032558 	.word	0x00032558

00025fb0 <ble_l2cap_sig_proc_matches>:
 * @return                      1 if the proc matches; 0 otherwise.
 */
static int
ble_l2cap_sig_proc_matches(struct ble_l2cap_sig_proc *proc,
                           uint16_t conn_handle, uint8_t op, uint8_t id)
{
   25fb0:	b410      	push	{r4}
    if (conn_handle != proc->conn_handle) {
   25fb2:	8904      	ldrh	r4, [r0, #8]
   25fb4:	428c      	cmp	r4, r1
   25fb6:	d002      	beq.n	25fbe <ble_l2cap_sig_proc_matches+0xe>
        return 0;
   25fb8:	2000      	movs	r0, #0
    if (id != 0 && id != proc->id) {
        return 0;
    }

    return 1;
}
   25fba:	bc10      	pop	{r4}
   25fbc:	4770      	bx	lr
    if (op != proc->op) {
   25fbe:	7a81      	ldrb	r1, [r0, #10]
   25fc0:	4291      	cmp	r1, r2
   25fc2:	d001      	beq.n	25fc8 <ble_l2cap_sig_proc_matches+0x18>
        return 0;
   25fc4:	2000      	movs	r0, #0
   25fc6:	e7f8      	b.n	25fba <ble_l2cap_sig_proc_matches+0xa>
    if (id != 0 && id != proc->id) {
   25fc8:	b133      	cbz	r3, 25fd8 <ble_l2cap_sig_proc_matches+0x28>
   25fca:	7ac2      	ldrb	r2, [r0, #11]
   25fcc:	429a      	cmp	r2, r3
   25fce:	d001      	beq.n	25fd4 <ble_l2cap_sig_proc_matches+0x24>
        return 0;
   25fd0:	2000      	movs	r0, #0
   25fd2:	e7f2      	b.n	25fba <ble_l2cap_sig_proc_matches+0xa>
    return 1;
   25fd4:	2001      	movs	r0, #1
   25fd6:	e7f0      	b.n	25fba <ble_l2cap_sig_proc_matches+0xa>
   25fd8:	2001      	movs	r0, #1
   25fda:	e7ee      	b.n	25fba <ble_l2cap_sig_proc_matches+0xa>

00025fdc <ble_l2cap_sig_rx_noop>:
ble_l2cap_sig_rx_noop(uint16_t conn_handle,
                      struct ble_l2cap_sig_hdr *hdr,
                      struct os_mbuf **om)
{
    return BLE_HS_ENOTSUP;
}
   25fdc:	2008      	movs	r0, #8
   25fde:	4770      	bx	lr

00025fe0 <ble_l2cap_sig_update_call_cb>:
 * $update                                                                   *
 *****************************************************************************/

static void
ble_l2cap_sig_update_call_cb(struct ble_l2cap_sig_proc *proc, int status)
{
   25fe0:	b510      	push	{r4, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());

    if (status != 0) {
   25fe2:	460b      	mov	r3, r1
   25fe4:	b119      	cbz	r1, 25fee <ble_l2cap_sig_update_call_cb+0xe>
        STATS_INC(ble_l2cap_stats, update_fail);
   25fe6:	4905      	ldr	r1, [pc, #20]	; (25ffc <ble_l2cap_sig_update_call_cb+0x1c>)
   25fe8:	69ca      	ldr	r2, [r1, #28]
   25fea:	3201      	adds	r2, #1
   25fec:	61ca      	str	r2, [r1, #28]
    }

    if (proc->update.cb != NULL) {
   25fee:	68c4      	ldr	r4, [r0, #12]
   25ff0:	b11c      	cbz	r4, 25ffa <ble_l2cap_sig_update_call_cb+0x1a>
   25ff2:	4619      	mov	r1, r3
        proc->update.cb(proc->conn_handle, status, proc->update.cb_arg);
   25ff4:	6902      	ldr	r2, [r0, #16]
   25ff6:	8900      	ldrh	r0, [r0, #8]
   25ff8:	47a0      	blx	r4
    }
}
   25ffa:	bd10      	pop	{r4, pc}
   25ffc:	2000413c 	.word	0x2000413c

00026000 <ble_l2cap_sig_proc_insert>:
{
   26000:	b510      	push	{r4, lr}
   26002:	4604      	mov	r4, r0
    ble_hs_lock();
   26004:	f7fd fd3c 	bl	23a80 <ble_hs_lock>
    STAILQ_INSERT_HEAD(&ble_l2cap_sig_procs, proc, next);
   26008:	4b05      	ldr	r3, [pc, #20]	; (26020 <ble_l2cap_sig_proc_insert+0x20>)
   2600a:	681b      	ldr	r3, [r3, #0]
   2600c:	6023      	str	r3, [r4, #0]
   2600e:	b123      	cbz	r3, 2601a <ble_l2cap_sig_proc_insert+0x1a>
   26010:	4b03      	ldr	r3, [pc, #12]	; (26020 <ble_l2cap_sig_proc_insert+0x20>)
   26012:	601c      	str	r4, [r3, #0]
    ble_hs_unlock();
   26014:	f7fd fd38 	bl	23a88 <ble_hs_unlock>
}
   26018:	bd10      	pop	{r4, pc}
    STAILQ_INSERT_HEAD(&ble_l2cap_sig_procs, proc, next);
   2601a:	4b01      	ldr	r3, [pc, #4]	; (26020 <ble_l2cap_sig_proc_insert+0x20>)
   2601c:	605c      	str	r4, [r3, #4]
   2601e:	e7f7      	b.n	26010 <ble_l2cap_sig_proc_insert+0x10>
   26020:	20002c34 	.word	0x20002c34

00026024 <ble_l2cap_sig_proc_extract>:
{
   26024:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   26028:	4680      	mov	r8, r0
   2602a:	460f      	mov	r7, r1
   2602c:	4616      	mov	r6, r2
    ble_hs_lock();
   2602e:	f7fd fd27 	bl	23a80 <ble_hs_lock>
    STAILQ_FOREACH(proc, &ble_l2cap_sig_procs, next) {
   26032:	4b13      	ldr	r3, [pc, #76]	; (26080 <ble_l2cap_sig_proc_extract+0x5c>)
   26034:	f8d3 9000 	ldr.w	r9, [r3]
   26038:	464c      	mov	r4, r9
    prev = NULL;
   2603a:	2500      	movs	r5, #0
    STAILQ_FOREACH(proc, &ble_l2cap_sig_procs, next) {
   2603c:	b174      	cbz	r4, 2605c <ble_l2cap_sig_proc_extract+0x38>
        if (ble_l2cap_sig_proc_matches(proc, conn_handle, op, identifier)) {
   2603e:	4633      	mov	r3, r6
   26040:	463a      	mov	r2, r7
   26042:	4641      	mov	r1, r8
   26044:	4620      	mov	r0, r4
   26046:	f7ff ffb3 	bl	25fb0 <ble_l2cap_sig_proc_matches>
   2604a:	b910      	cbnz	r0, 26052 <ble_l2cap_sig_proc_extract+0x2e>
        prev = proc;
   2604c:	4625      	mov	r5, r4
    STAILQ_FOREACH(proc, &ble_l2cap_sig_procs, next) {
   2604e:	6824      	ldr	r4, [r4, #0]
   26050:	e7f4      	b.n	2603c <ble_l2cap_sig_proc_extract+0x18>
            if (prev == NULL) {
   26052:	b145      	cbz	r5, 26066 <ble_l2cap_sig_proc_extract+0x42>
                STAILQ_REMOVE_AFTER(&ble_l2cap_sig_procs, prev, next);
   26054:	682b      	ldr	r3, [r5, #0]
   26056:	681b      	ldr	r3, [r3, #0]
   26058:	602b      	str	r3, [r5, #0]
   2605a:	b16b      	cbz	r3, 26078 <ble_l2cap_sig_proc_extract+0x54>
    ble_hs_unlock();
   2605c:	f7fd fd14 	bl	23a88 <ble_hs_unlock>
}
   26060:	4620      	mov	r0, r4
   26062:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                STAILQ_REMOVE_HEAD(&ble_l2cap_sig_procs, next);
   26066:	f8d9 3000 	ldr.w	r3, [r9]
   2606a:	4a05      	ldr	r2, [pc, #20]	; (26080 <ble_l2cap_sig_proc_extract+0x5c>)
   2606c:	6013      	str	r3, [r2, #0]
   2606e:	2b00      	cmp	r3, #0
   26070:	d1f4      	bne.n	2605c <ble_l2cap_sig_proc_extract+0x38>
   26072:	4613      	mov	r3, r2
   26074:	605a      	str	r2, [r3, #4]
   26076:	e7f1      	b.n	2605c <ble_l2cap_sig_proc_extract+0x38>
                STAILQ_REMOVE_AFTER(&ble_l2cap_sig_procs, prev, next);
   26078:	4b01      	ldr	r3, [pc, #4]	; (26080 <ble_l2cap_sig_proc_extract+0x5c>)
   2607a:	605d      	str	r5, [r3, #4]
   2607c:	e7ee      	b.n	2605c <ble_l2cap_sig_proc_extract+0x38>
   2607e:	bf00      	nop
   26080:	20002c34 	.word	0x20002c34

00026084 <ble_l2cap_sig_proc_alloc>:
{
   26084:	b508      	push	{r3, lr}
    proc = os_memblock_get(&ble_l2cap_sig_proc_pool);
   26086:	4806      	ldr	r0, [pc, #24]	; (260a0 <ble_l2cap_sig_proc_alloc+0x1c>)
   26088:	f7e7 fdc0 	bl	dc0c <os_memblock_get>
    if (proc != NULL) {
   2608c:	4603      	mov	r3, r0
   2608e:	b128      	cbz	r0, 2609c <ble_l2cap_sig_proc_alloc+0x18>
        memset(proc, 0, sizeof *proc);
   26090:	2200      	movs	r2, #0
   26092:	6002      	str	r2, [r0, #0]
   26094:	6042      	str	r2, [r0, #4]
   26096:	6082      	str	r2, [r0, #8]
   26098:	60c2      	str	r2, [r0, #12]
   2609a:	6102      	str	r2, [r0, #16]
}
   2609c:	4618      	mov	r0, r3
   2609e:	bd08      	pop	{r3, pc}
   260a0:	20002c18 	.word	0x20002c18

000260a4 <ble_l2cap_sig_proc_set_timer>:
{
   260a4:	b510      	push	{r4, lr}
   260a6:	4604      	mov	r4, r0
   260a8:	f7e8 f982 	bl	e3b0 <os_time_get>
    proc->exp_os_ticks = ble_npl_time_get() +
   260ac:	f500 6070 	add.w	r0, r0, #3840	; 0xf00
   260b0:	6060      	str	r0, [r4, #4]
    ble_hs_timer_resched();
   260b2:	f7fd fddd 	bl	23c70 <ble_hs_timer_resched>
}
   260b6:	bd10      	pop	{r4, pc}

000260b8 <ble_l2cap_sig_extract_expired>:
 * @return                      The number of ticks until the next expiration
 *                                  occurs.
 */
static int32_t
ble_l2cap_sig_extract_expired(struct ble_l2cap_sig_proc_list *dst_list)
{
   260b8:	b570      	push	{r4, r5, r6, lr}
   260ba:	4604      	mov	r4, r0
   260bc:	f7e8 f978 	bl	e3b0 <os_time_get>
   260c0:	4606      	mov	r6, r0
    ble_npl_time_t now;
    ble_npl_stime_t next_exp_in;
    ble_npl_stime_t time_diff;

    now = ble_npl_time_get();
    STAILQ_INIT(dst_list);
   260c2:	2300      	movs	r3, #0
   260c4:	6023      	str	r3, [r4, #0]
   260c6:	6064      	str	r4, [r4, #4]

    /* Assume each event is either expired or has infinite duration. */
    next_exp_in = BLE_HS_FOREVER;

    ble_hs_lock();
   260c8:	f7fd fcda 	bl	23a80 <ble_hs_lock>

    prev = NULL;
    proc = STAILQ_FIRST(&ble_l2cap_sig_procs);
   260cc:	4b10      	ldr	r3, [pc, #64]	; (26110 <ble_l2cap_sig_extract_expired+0x58>)
   260ce:	681b      	ldr	r3, [r3, #0]
    next_exp_in = BLE_HS_FOREVER;
   260d0:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
    while (proc != NULL) {
   260d4:	e00a      	b.n	260ec <ble_l2cap_sig_extract_expired+0x34>

        time_diff = proc->exp_os_ticks - now;
        if (time_diff <= 0) {
            /* Procedure has expired; move it to the destination list. */
            if (prev == NULL) {
                STAILQ_REMOVE_HEAD(&ble_l2cap_sig_procs, next);
   260d6:	480e      	ldr	r0, [pc, #56]	; (26110 <ble_l2cap_sig_extract_expired+0x58>)
   260d8:	6802      	ldr	r2, [r0, #0]
   260da:	6812      	ldr	r2, [r2, #0]
   260dc:	6002      	str	r2, [r0, #0]
   260de:	b17a      	cbz	r2, 26100 <ble_l2cap_sig_extract_expired+0x48>
            } else {
                STAILQ_REMOVE_AFTER(&ble_l2cap_sig_procs, prev, next);
            }
            STAILQ_INSERT_TAIL(dst_list, proc, next);
   260e0:	2200      	movs	r2, #0
   260e2:	601a      	str	r2, [r3, #0]
   260e4:	6862      	ldr	r2, [r4, #4]
   260e6:	6013      	str	r3, [r2, #0]
   260e8:	6063      	str	r3, [r4, #4]
        } else {
            if (time_diff < next_exp_in) {
                next_exp_in = time_diff;
   260ea:	460b      	mov	r3, r1
    while (proc != NULL) {
   260ec:	b15b      	cbz	r3, 26106 <ble_l2cap_sig_extract_expired+0x4e>
        next = STAILQ_NEXT(proc, next);
   260ee:	6819      	ldr	r1, [r3, #0]
        time_diff = proc->exp_os_ticks - now;
   260f0:	685a      	ldr	r2, [r3, #4]
   260f2:	1b92      	subs	r2, r2, r6
        if (time_diff <= 0) {
   260f4:	2a00      	cmp	r2, #0
   260f6:	ddee      	ble.n	260d6 <ble_l2cap_sig_extract_expired+0x1e>
            if (time_diff < next_exp_in) {
   260f8:	4295      	cmp	r5, r2
   260fa:	ddf6      	ble.n	260ea <ble_l2cap_sig_extract_expired+0x32>
                next_exp_in = time_diff;
   260fc:	4615      	mov	r5, r2
   260fe:	e7f4      	b.n	260ea <ble_l2cap_sig_extract_expired+0x32>
                STAILQ_REMOVE_HEAD(&ble_l2cap_sig_procs, next);
   26100:	4602      	mov	r2, r0
   26102:	6050      	str	r0, [r2, #4]
   26104:	e7ec      	b.n	260e0 <ble_l2cap_sig_extract_expired+0x28>
        }

        proc = next;
    }

    ble_hs_unlock();
   26106:	f7fd fcbf 	bl	23a88 <ble_hs_unlock>

    return next_exp_in;
}
   2610a:	4628      	mov	r0, r5
   2610c:	bd70      	pop	{r4, r5, r6, pc}
   2610e:	bf00      	nop
   26110:	20002c34 	.word	0x20002c34

00026114 <ble_l2cap_sig_proc_free>:
    if (proc != NULL) {
   26114:	b128      	cbz	r0, 26122 <ble_l2cap_sig_proc_free+0xe>
{
   26116:	b508      	push	{r3, lr}
   26118:	4601      	mov	r1, r0
        rc = os_memblock_put(&ble_l2cap_sig_proc_pool, proc);
   2611a:	4802      	ldr	r0, [pc, #8]	; (26124 <ble_l2cap_sig_proc_free+0x10>)
   2611c:	f7e7 fd9e 	bl	dc5c <os_memblock_put>
}
   26120:	bd08      	pop	{r3, pc}
   26122:	4770      	bx	lr
   26124:	20002c18 	.word	0x20002c18

00026128 <ble_l2cap_sig_process_status>:
{
   26128:	b510      	push	{r4, lr}
   2612a:	4604      	mov	r4, r0
    if (status == 0) {
   2612c:	b111      	cbz	r1, 26134 <ble_l2cap_sig_process_status+0xc>
        ble_l2cap_sig_proc_free(proc);
   2612e:	f7ff fff1 	bl	26114 <ble_l2cap_sig_proc_free>
}
   26132:	bd10      	pop	{r4, pc}
        ble_l2cap_sig_proc_set_timer(proc);
   26134:	f7ff ffb6 	bl	260a4 <ble_l2cap_sig_proc_set_timer>
        ble_l2cap_sig_proc_insert(proc);
   26138:	4620      	mov	r0, r4
   2613a:	f7ff ff61 	bl	26000 <ble_l2cap_sig_proc_insert>
   2613e:	e7f8      	b.n	26132 <ble_l2cap_sig_process_status+0xa>

00026140 <ble_l2cap_sig_rx_reject>:
{
   26140:	b508      	push	{r3, lr}
    proc = ble_l2cap_sig_proc_extract(conn_handle,
   26142:	784a      	ldrb	r2, [r1, #1]
   26144:	2101      	movs	r1, #1
   26146:	f7ff ff6d 	bl	26024 <ble_l2cap_sig_proc_extract>
   if (!proc) {
   2614a:	b108      	cbz	r0, 26150 <ble_l2cap_sig_rx_reject+0x10>
   ble_l2cap_sig_proc_free(proc);
   2614c:	f7ff ffe2 	bl	26114 <ble_l2cap_sig_proc_free>
}
   26150:	2000      	movs	r0, #0
   26152:	bd08      	pop	{r3, pc}

00026154 <ble_l2cap_sig_update_rsp_rx>:
{
   26154:	b570      	push	{r4, r5, r6, lr}
   26156:	4616      	mov	r6, r2
    proc = ble_l2cap_sig_proc_extract(conn_handle,
   26158:	784a      	ldrb	r2, [r1, #1]
   2615a:	2100      	movs	r1, #0
   2615c:	f7ff ff62 	bl	26024 <ble_l2cap_sig_proc_extract>
    if (proc == NULL) {
   26160:	b1d8      	cbz	r0, 2619a <ble_l2cap_sig_update_rsp_rx+0x46>
   26162:	4605      	mov	r5, r0
    rc = ble_hs_mbuf_pullup_base(om, BLE_L2CAP_SIG_UPDATE_RSP_SZ);
   26164:	2102      	movs	r1, #2
   26166:	4630      	mov	r0, r6
   26168:	f7ff fa73 	bl	25652 <ble_hs_mbuf_pullup_base>
    if (rc != 0) {
   2616c:	4604      	mov	r4, r0
   2616e:	b948      	cbnz	r0, 26184 <ble_l2cap_sig_update_rsp_rx+0x30>
    rsp = (struct ble_l2cap_sig_update_rsp *)(*om)->om_data;
   26170:	6833      	ldr	r3, [r6, #0]
   26172:	681b      	ldr	r3, [r3, #0]
    switch (le16toh(rsp->result)) {
   26174:	881b      	ldrh	r3, [r3, #0]
   26176:	b11b      	cbz	r3, 26180 <ble_l2cap_sig_update_rsp_rx+0x2c>
   26178:	2b01      	cmp	r3, #1
   2617a:	d00c      	beq.n	26196 <ble_l2cap_sig_update_rsp_rx+0x42>
        cb_status = BLE_HS_EBADDATA;
   2617c:	210a      	movs	r1, #10
        break;
   2617e:	e002      	b.n	26186 <ble_l2cap_sig_update_rsp_rx+0x32>
        cb_status = 0;
   26180:	4601      	mov	r1, r0
   26182:	e000      	b.n	26186 <ble_l2cap_sig_update_rsp_rx+0x32>
        cb_status = rc;
   26184:	4601      	mov	r1, r0
    ble_l2cap_sig_update_call_cb(proc, cb_status);
   26186:	4628      	mov	r0, r5
   26188:	f7ff ff2a 	bl	25fe0 <ble_l2cap_sig_update_call_cb>
    ble_l2cap_sig_proc_free(proc);
   2618c:	4628      	mov	r0, r5
   2618e:	f7ff ffc1 	bl	26114 <ble_l2cap_sig_proc_free>
}
   26192:	4620      	mov	r0, r4
   26194:	bd70      	pop	{r4, r5, r6, pc}
        cb_status = BLE_HS_EREJECT;
   26196:	2110      	movs	r1, #16
   26198:	e7f5      	b.n	26186 <ble_l2cap_sig_update_rsp_rx+0x32>
        return 0;
   2619a:	2400      	movs	r4, #0
   2619c:	e7f9      	b.n	26192 <ble_l2cap_sig_update_rsp_rx+0x3e>
	...

000261a0 <ble_l2cap_sig_rx>:
{
   261a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   261a2:	b085      	sub	sp, #20
   261a4:	4604      	mov	r4, r0
    conn_handle = chan->conn_handle;
   261a6:	8887      	ldrh	r7, [r0, #4]
    om = &chan->rx_buf;
   261a8:	f100 0610 	add.w	r6, r0, #16
    STATS_INC(ble_l2cap_stats, sig_rx);
   261ac:	4a1c      	ldr	r2, [pc, #112]	; (26220 <ble_l2cap_sig_rx+0x80>)
   261ae:	6a93      	ldr	r3, [r2, #40]	; 0x28
   261b0:	3301      	adds	r3, #1
   261b2:	6293      	str	r3, [r2, #40]	; 0x28
    ble_hs_log_mbuf(*om);
   261b4:	6900      	ldr	r0, [r0, #16]
   261b6:	f7ff f9f9 	bl	255ac <ble_hs_log_mbuf>
    rc = ble_hs_mbuf_pullup_base(om, BLE_L2CAP_SIG_HDR_SZ);
   261ba:	2104      	movs	r1, #4
   261bc:	4630      	mov	r0, r6
   261be:	f7ff fa48 	bl	25652 <ble_hs_mbuf_pullup_base>
    if (rc != 0) {
   261c2:	4605      	mov	r5, r0
   261c4:	b110      	cbz	r0, 261cc <ble_l2cap_sig_rx+0x2c>
}
   261c6:	4628      	mov	r0, r5
   261c8:	b005      	add	sp, #20
   261ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ble_l2cap_sig_hdr_parse((*om)->om_data, (*om)->om_len, &hdr);
   261cc:	6923      	ldr	r3, [r4, #16]
   261ce:	aa03      	add	r2, sp, #12
   261d0:	88d9      	ldrh	r1, [r3, #6]
   261d2:	6818      	ldr	r0, [r3, #0]
   261d4:	f000 f94d 	bl	26472 <ble_l2cap_sig_hdr_parse>
    os_mbuf_adj(*om, BLE_L2CAP_SIG_HDR_SZ);
   261d8:	2104      	movs	r1, #4
   261da:	6920      	ldr	r0, [r4, #16]
   261dc:	f7e7 f9f8 	bl	d5d0 <os_mbuf_adj>
    if (OS_MBUF_PKTLEN(*om) != hdr.length) {
   261e0:	6923      	ldr	r3, [r4, #16]
   261e2:	8a1a      	ldrh	r2, [r3, #16]
   261e4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   261e8:	429a      	cmp	r2, r3
   261ea:	d117      	bne.n	2621c <ble_l2cap_sig_rx+0x7c>
    rx_cb = ble_l2cap_sig_dispatch_get(hdr.op);
   261ec:	f89d 000c 	ldrb.w	r0, [sp, #12]
   261f0:	f7ff fed4 	bl	25f9c <ble_l2cap_sig_dispatch_get>
    if (rx_cb == NULL) {
   261f4:	4603      	mov	r3, r0
   261f6:	b178      	cbz	r0, 26218 <ble_l2cap_sig_rx+0x78>
        rc = rx_cb(conn_handle, &hdr, om);
   261f8:	4632      	mov	r2, r6
   261fa:	a903      	add	r1, sp, #12
   261fc:	4638      	mov	r0, r7
   261fe:	4798      	blx	r3
    if (rc) {
   26200:	4605      	mov	r5, r0
   26202:	2800      	cmp	r0, #0
   26204:	d0df      	beq.n	261c6 <ble_l2cap_sig_rx+0x26>
        ble_l2cap_sig_reject_tx(conn_handle, hdr.identifier,
   26206:	f89d 100d 	ldrb.w	r1, [sp, #13]
   2620a:	2200      	movs	r2, #0
   2620c:	9200      	str	r2, [sp, #0]
   2620e:	4613      	mov	r3, r2
   26210:	4638      	mov	r0, r7
   26212:	f000 f955 	bl	264c0 <ble_l2cap_sig_reject_tx>
   26216:	e7d6      	b.n	261c6 <ble_l2cap_sig_rx+0x26>
        rc = BLE_HS_EREJECT;
   26218:	2510      	movs	r5, #16
   2621a:	e7f4      	b.n	26206 <ble_l2cap_sig_rx+0x66>
        return BLE_HS_EBADDATA;
   2621c:	250a      	movs	r5, #10
   2621e:	e7d2      	b.n	261c6 <ble_l2cap_sig_rx+0x26>
   26220:	2000413c 	.word	0x2000413c

00026224 <ble_l2cap_sig_update_req_rx>:
{
   26224:	b5f0      	push	{r4, r5, r6, r7, lr}
   26226:	b087      	sub	sp, #28
   26228:	4606      	mov	r6, r0
   2622a:	460f      	mov	r7, r1
   2622c:	4615      	mov	r5, r2
    rc = ble_hs_mbuf_pullup_base(om, BLE_L2CAP_SIG_UPDATE_REQ_SZ);
   2622e:	2108      	movs	r1, #8
   26230:	4610      	mov	r0, r2
   26232:	f7ff fa0e 	bl	25652 <ble_hs_mbuf_pullup_base>
    if (rc != 0) {
   26236:	4604      	mov	r4, r0
   26238:	b110      	cbz	r0, 26240 <ble_l2cap_sig_update_req_rx+0x1c>
}
   2623a:	4620      	mov	r0, r4
   2623c:	b007      	add	sp, #28
   2623e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    rc = ble_hs_atomic_conn_flags(conn_handle, &conn_flags);
   26240:	f10d 0107 	add.w	r1, sp, #7
   26244:	4630      	mov	r0, r6
   26246:	f7fe f979 	bl	2453c <ble_hs_atomic_conn_flags>
    if (rc != 0) {
   2624a:	4604      	mov	r4, r0
   2624c:	2800      	cmp	r0, #0
   2624e:	d1f4      	bne.n	2623a <ble_l2cap_sig_update_req_rx+0x16>
    sig_err = !(conn_flags & BLE_HS_CONN_F_MASTER);
   26250:	f89d 3007 	ldrb.w	r3, [sp, #7]
    if (sig_err) {
   26254:	f013 0f01 	tst.w	r3, #1
   26258:	d032      	beq.n	262c0 <ble_l2cap_sig_update_req_rx+0x9c>
    req = (struct ble_l2cap_sig_update_req *)(*om)->om_data;
   2625a:	682b      	ldr	r3, [r5, #0]
   2625c:	681b      	ldr	r3, [r3, #0]
    params.itvl_min = le16toh(req->itvl_min);
   2625e:	881a      	ldrh	r2, [r3, #0]
   26260:	f8ad 2008 	strh.w	r2, [sp, #8]
    params.itvl_max = le16toh(req->itvl_max);
   26264:	885a      	ldrh	r2, [r3, #2]
   26266:	f8ad 200a 	strh.w	r2, [sp, #10]
    params.latency = le16toh(req->slave_latency);
   2626a:	889a      	ldrh	r2, [r3, #4]
   2626c:	f8ad 200c 	strh.w	r2, [sp, #12]
    params.supervision_timeout = le16toh(req->timeout_multiplier);
   26270:	88db      	ldrh	r3, [r3, #6]
   26272:	f8ad 300e 	strh.w	r3, [sp, #14]
    params.min_ce_len = BLE_GAP_INITIAL_CONN_MIN_CE_LEN;
   26276:	2310      	movs	r3, #16
   26278:	f8ad 3010 	strh.w	r3, [sp, #16]
    params.max_ce_len = BLE_GAP_INITIAL_CONN_MAX_CE_LEN;
   2627c:	f44f 7340 	mov.w	r3, #768	; 0x300
   26280:	f8ad 3012 	strh.w	r3, [sp, #18]
    rc = ble_gap_rx_l2cap_update_req(conn_handle, &params);
   26284:	a902      	add	r1, sp, #8
   26286:	4630      	mov	r0, r6
   26288:	f7fa fc6c 	bl	20b64 <ble_gap_rx_l2cap_update_req>
    if (rc == 0) {
   2628c:	4603      	mov	r3, r0
   2628e:	b178      	cbz	r0, 262b0 <ble_l2cap_sig_update_req_rx+0x8c>
    if (rc == 0) {
   26290:	b9a3      	cbnz	r3, 262bc <ble_l2cap_sig_update_req_rx+0x98>
        l2cap_result = BLE_L2CAP_SIG_UPDATE_RSP_RESULT_ACCEPT;
   26292:	2500      	movs	r5, #0
    rsp = ble_l2cap_sig_cmd_get(BLE_L2CAP_SIG_OP_UPDATE_RSP, hdr->identifier,
   26294:	ab05      	add	r3, sp, #20
   26296:	2202      	movs	r2, #2
   26298:	7879      	ldrb	r1, [r7, #1]
   2629a:	2013      	movs	r0, #19
   2629c:	f000 f8f0 	bl	26480 <ble_l2cap_sig_cmd_get>
    if (!rsp) {
   262a0:	2800      	cmp	r0, #0
   262a2:	d0ca      	beq.n	2623a <ble_l2cap_sig_update_req_rx+0x16>
    rsp->result = htole16(l2cap_result);
   262a4:	8005      	strh	r5, [r0, #0]
    ble_l2cap_sig_tx(conn_handle, txom);
   262a6:	9905      	ldr	r1, [sp, #20]
   262a8:	4630      	mov	r0, r6
   262aa:	f000 f8cb 	bl	26444 <ble_l2cap_sig_tx>
    return 0;
   262ae:	e7c4      	b.n	2623a <ble_l2cap_sig_update_req_rx+0x16>
        rc = ble_gap_update_params(conn_handle, &params);
   262b0:	a902      	add	r1, sp, #8
   262b2:	4630      	mov	r0, r6
   262b4:	f7fb f896 	bl	213e4 <ble_gap_update_params>
   262b8:	4603      	mov	r3, r0
   262ba:	e7e9      	b.n	26290 <ble_l2cap_sig_update_req_rx+0x6c>
        l2cap_result = BLE_L2CAP_SIG_UPDATE_RSP_RESULT_REJECT;
   262bc:	2501      	movs	r5, #1
   262be:	e7e9      	b.n	26294 <ble_l2cap_sig_update_req_rx+0x70>
        return BLE_HS_EREJECT;
   262c0:	2410      	movs	r4, #16
   262c2:	e7ba      	b.n	2623a <ble_l2cap_sig_update_req_rx+0x16>

000262c4 <ble_l2cap_sig_update>:
{
   262c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   262c8:	b084      	sub	sp, #16
   262ca:	4605      	mov	r5, r0
   262cc:	460e      	mov	r6, r1
   262ce:	4690      	mov	r8, r2
   262d0:	461f      	mov	r7, r3
    STATS_INC(ble_l2cap_stats, update_init);
   262d2:	4a26      	ldr	r2, [pc, #152]	; (2636c <ble_l2cap_sig_update+0xa8>)
   262d4:	6953      	ldr	r3, [r2, #20]
   262d6:	3301      	adds	r3, #1
   262d8:	6153      	str	r3, [r2, #20]
    ble_hs_lock();
   262da:	f7fd fbd1 	bl	23a80 <ble_hs_lock>
    ble_hs_misc_conn_chan_find_reqd(conn_handle, BLE_L2CAP_CID_SIG,
   262de:	ab02      	add	r3, sp, #8
   262e0:	aa01      	add	r2, sp, #4
   262e2:	2105      	movs	r1, #5
   262e4:	4628      	mov	r0, r5
   262e6:	f7ff f9f9 	bl	256dc <ble_hs_misc_conn_chan_find_reqd>
    master = conn->bhc_flags & BLE_HS_CONN_F_MASTER;
   262ea:	9b01      	ldr	r3, [sp, #4]
   262ec:	f893 4028 	ldrb.w	r4, [r3, #40]	; 0x28
    ble_hs_unlock();
   262f0:	f7fd fbca 	bl	23a88 <ble_hs_unlock>
    if (master) {
   262f4:	f014 0f01 	tst.w	r4, #1
   262f8:	d12d      	bne.n	26356 <ble_l2cap_sig_update+0x92>
    proc = ble_l2cap_sig_proc_alloc();
   262fa:	f7ff fec3 	bl	26084 <ble_l2cap_sig_proc_alloc>
    if (proc == NULL) {
   262fe:	4604      	mov	r4, r0
   26300:	b1e8      	cbz	r0, 2633e <ble_l2cap_sig_update+0x7a>
    proc->op = BLE_L2CAP_SIG_PROC_OP_UPDATE;
   26302:	2300      	movs	r3, #0
   26304:	7283      	strb	r3, [r0, #10]
    proc->id = ble_l2cap_sig_next_id();
   26306:	f7ff fe3b 	bl	25f80 <ble_l2cap_sig_next_id>
   2630a:	4601      	mov	r1, r0
   2630c:	72e0      	strb	r0, [r4, #11]
    proc->conn_handle = conn_handle;
   2630e:	8125      	strh	r5, [r4, #8]
    proc->update.cb = cb;
   26310:	f8c4 800c 	str.w	r8, [r4, #12]
    proc->update.cb_arg = cb_arg;
   26314:	6127      	str	r7, [r4, #16]
    req = ble_l2cap_sig_cmd_get(BLE_L2CAP_SIG_OP_UPDATE_REQ, proc->id,
   26316:	ab03      	add	r3, sp, #12
   26318:	2208      	movs	r2, #8
   2631a:	2012      	movs	r0, #18
   2631c:	f000 f8b0 	bl	26480 <ble_l2cap_sig_cmd_get>
    if (!req) {
   26320:	b198      	cbz	r0, 2634a <ble_l2cap_sig_update+0x86>
    req->itvl_min = htole16(params->itvl_min);
   26322:	8832      	ldrh	r2, [r6, #0]
   26324:	8002      	strh	r2, [r0, #0]
    req->itvl_max = htole16(params->itvl_max);
   26326:	8872      	ldrh	r2, [r6, #2]
   26328:	8042      	strh	r2, [r0, #2]
    req->slave_latency = htole16(params->slave_latency);
   2632a:	88b2      	ldrh	r2, [r6, #4]
   2632c:	8082      	strh	r2, [r0, #4]
    req->timeout_multiplier = htole16(params->timeout_multiplier);
   2632e:	88f2      	ldrh	r2, [r6, #6]
   26330:	80c2      	strh	r2, [r0, #6]
    rc = ble_l2cap_sig_tx(conn_handle, txom);
   26332:	9903      	ldr	r1, [sp, #12]
   26334:	4628      	mov	r0, r5
   26336:	f000 f885 	bl	26444 <ble_l2cap_sig_tx>
   2633a:	4605      	mov	r5, r0
   2633c:	e00d      	b.n	2635a <ble_l2cap_sig_update+0x96>
        STATS_INC(ble_l2cap_stats, update_fail);
   2633e:	4a0b      	ldr	r2, [pc, #44]	; (2636c <ble_l2cap_sig_update+0xa8>)
   26340:	69d3      	ldr	r3, [r2, #28]
   26342:	3301      	adds	r3, #1
   26344:	61d3      	str	r3, [r2, #28]
        rc = BLE_HS_ENOMEM;
   26346:	2506      	movs	r5, #6
        goto done;
   26348:	e007      	b.n	2635a <ble_l2cap_sig_update+0x96>
        STATS_INC(ble_l2cap_stats, update_fail);
   2634a:	4a08      	ldr	r2, [pc, #32]	; (2636c <ble_l2cap_sig_update+0xa8>)
   2634c:	69d3      	ldr	r3, [r2, #28]
   2634e:	3301      	adds	r3, #1
   26350:	61d3      	str	r3, [r2, #28]
        rc = BLE_HS_ENOMEM;
   26352:	2506      	movs	r5, #6
        goto done;
   26354:	e001      	b.n	2635a <ble_l2cap_sig_update+0x96>
        rc = BLE_HS_EINVAL;
   26356:	2503      	movs	r5, #3
    proc = NULL;
   26358:	2400      	movs	r4, #0
    ble_l2cap_sig_process_status(proc, rc);
   2635a:	4629      	mov	r1, r5
   2635c:	4620      	mov	r0, r4
   2635e:	f7ff fee3 	bl	26128 <ble_l2cap_sig_process_status>
}
   26362:	4628      	mov	r0, r5
   26364:	b004      	add	sp, #16
   26366:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2636a:	bf00      	nop
   2636c:	2000413c 	.word	0x2000413c

00026370 <ble_l2cap_sig_create_chan>:
{
   26370:	b508      	push	{r3, lr}
    chan = ble_l2cap_chan_alloc(conn_handle);
   26372:	f7ff fcc3 	bl	25cfc <ble_l2cap_chan_alloc>
    if (chan == NULL) {
   26376:	4603      	mov	r3, r0
   26378:	b130      	cbz	r0, 26388 <ble_l2cap_sig_create_chan+0x18>
    chan->scid = BLE_L2CAP_CID_SIG;
   2637a:	2205      	movs	r2, #5
   2637c:	8102      	strh	r2, [r0, #8]
    chan->dcid = BLE_L2CAP_CID_SIG;
   2637e:	80c2      	strh	r2, [r0, #6]
    chan->my_mtu = BLE_L2CAP_SIG_MTU;
   26380:	2264      	movs	r2, #100	; 0x64
   26382:	8142      	strh	r2, [r0, #10]
    chan->rx_fn = ble_l2cap_sig_rx;
   26384:	4a01      	ldr	r2, [pc, #4]	; (2638c <ble_l2cap_sig_create_chan+0x1c>)
   26386:	6182      	str	r2, [r0, #24]
}
   26388:	4618      	mov	r0, r3
   2638a:	bd08      	pop	{r3, pc}
   2638c:	000261a1 	.word	0x000261a1

00026390 <ble_l2cap_sig_conn_broken>:

void
ble_l2cap_sig_conn_broken(uint16_t conn_handle, int reason)
{
   26390:	b538      	push	{r3, r4, r5, lr}
   26392:	460d      	mov	r5, r1
    struct ble_l2cap_sig_proc *proc;

    /* Report a failure for each timed out procedure. */
    while ((proc = STAILQ_FIRST(&ble_l2cap_sig_procs)) != NULL) {
   26394:	e007      	b.n	263a6 <ble_l2cap_sig_conn_broken+0x16>
            break;
#endif
#endif
            }

            STAILQ_REMOVE_HEAD(&ble_l2cap_sig_procs, next);
   26396:	4a0b      	ldr	r2, [pc, #44]	; (263c4 <ble_l2cap_sig_conn_broken+0x34>)
   26398:	6813      	ldr	r3, [r2, #0]
   2639a:	681b      	ldr	r3, [r3, #0]
   2639c:	6013      	str	r3, [r2, #0]
   2639e:	b16b      	cbz	r3, 263bc <ble_l2cap_sig_conn_broken+0x2c>
            ble_l2cap_sig_proc_free(proc);
   263a0:	4620      	mov	r0, r4
   263a2:	f7ff feb7 	bl	26114 <ble_l2cap_sig_proc_free>
    while ((proc = STAILQ_FIRST(&ble_l2cap_sig_procs)) != NULL) {
   263a6:	4b07      	ldr	r3, [pc, #28]	; (263c4 <ble_l2cap_sig_conn_broken+0x34>)
   263a8:	681c      	ldr	r4, [r3, #0]
   263aa:	b154      	cbz	r4, 263c2 <ble_l2cap_sig_conn_broken+0x32>
        switch(proc->op) {
   263ac:	7aa3      	ldrb	r3, [r4, #10]
   263ae:	2b00      	cmp	r3, #0
   263b0:	d1f1      	bne.n	26396 <ble_l2cap_sig_conn_broken+0x6>
                ble_l2cap_sig_update_call_cb(proc, reason);
   263b2:	4629      	mov	r1, r5
   263b4:	4620      	mov	r0, r4
   263b6:	f7ff fe13 	bl	25fe0 <ble_l2cap_sig_update_call_cb>
                break;
   263ba:	e7ec      	b.n	26396 <ble_l2cap_sig_conn_broken+0x6>
            STAILQ_REMOVE_HEAD(&ble_l2cap_sig_procs, next);
   263bc:	4613      	mov	r3, r2
   263be:	605a      	str	r2, [r3, #4]
   263c0:	e7ee      	b.n	263a0 <ble_l2cap_sig_conn_broken+0x10>
    }

}
   263c2:	bd38      	pop	{r3, r4, r5, pc}
   263c4:	20002c34 	.word	0x20002c34

000263c8 <ble_l2cap_sig_timer>:
 * @return                      The number of ticks until this function should
 *                                  be called again.
 */
int32_t
ble_l2cap_sig_timer(void)
{
   263c8:	b530      	push	{r4, r5, lr}
   263ca:	b083      	sub	sp, #12

    /* Remove timed-out procedures from the main list and insert them into a
     * temporary list.  This function also calculates the number of ticks until
     * the next expiration will occur.
     */
    ticks_until_exp = ble_l2cap_sig_extract_expired(&temp_list);
   263cc:	4668      	mov	r0, sp
   263ce:	f7ff fe73 	bl	260b8 <ble_l2cap_sig_extract_expired>
   263d2:	4605      	mov	r5, r0

    /* Report a failure for each timed out procedure. */
    while ((proc = STAILQ_FIRST(&temp_list)) != NULL) {
   263d4:	e006      	b.n	263e4 <ble_l2cap_sig_timer+0x1c>
                ble_l2cap_sig_coc_disconnect_cb(proc, BLE_HS_ETIMEOUT);
            break;
#endif
        }

        STAILQ_REMOVE_HEAD(&temp_list, next);
   263d6:	9b00      	ldr	r3, [sp, #0]
   263d8:	681b      	ldr	r3, [r3, #0]
   263da:	9300      	str	r3, [sp, #0]
   263dc:	b183      	cbz	r3, 26400 <ble_l2cap_sig_timer+0x38>
        ble_l2cap_sig_proc_free(proc);
   263de:	4620      	mov	r0, r4
   263e0:	f7ff fe98 	bl	26114 <ble_l2cap_sig_proc_free>
    while ((proc = STAILQ_FIRST(&temp_list)) != NULL) {
   263e4:	9c00      	ldr	r4, [sp, #0]
   263e6:	b174      	cbz	r4, 26406 <ble_l2cap_sig_timer+0x3e>
        STATS_INC(ble_l2cap_stats, proc_timeout);
   263e8:	4a08      	ldr	r2, [pc, #32]	; (2640c <ble_l2cap_sig_timer+0x44>)
   263ea:	6a13      	ldr	r3, [r2, #32]
   263ec:	3301      	adds	r3, #1
   263ee:	6213      	str	r3, [r2, #32]
        switch(proc->op) {
   263f0:	7aa3      	ldrb	r3, [r4, #10]
   263f2:	2b00      	cmp	r3, #0
   263f4:	d1ef      	bne.n	263d6 <ble_l2cap_sig_timer+0xe>
                ble_l2cap_sig_update_call_cb(proc, BLE_HS_ETIMEOUT);
   263f6:	210d      	movs	r1, #13
   263f8:	4620      	mov	r0, r4
   263fa:	f7ff fdf1 	bl	25fe0 <ble_l2cap_sig_update_call_cb>
                break;
   263fe:	e7ea      	b.n	263d6 <ble_l2cap_sig_timer+0xe>
        STAILQ_REMOVE_HEAD(&temp_list, next);
   26400:	f8cd d004 	str.w	sp, [sp, #4]
   26404:	e7eb      	b.n	263de <ble_l2cap_sig_timer+0x16>
    }

    return ticks_until_exp;
}
   26406:	4628      	mov	r0, r5
   26408:	b003      	add	sp, #12
   2640a:	bd30      	pop	{r4, r5, pc}
   2640c:	2000413c 	.word	0x2000413c

00026410 <ble_l2cap_sig_init>:

int
ble_l2cap_sig_init(void)
{
   26410:	b500      	push	{lr}
   26412:	b083      	sub	sp, #12
    int rc;

    STAILQ_INIT(&ble_l2cap_sig_procs);
   26414:	4b07      	ldr	r3, [pc, #28]	; (26434 <ble_l2cap_sig_init+0x24>)
   26416:	2200      	movs	r2, #0
   26418:	601a      	str	r2, [r3, #0]
   2641a:	605b      	str	r3, [r3, #4]

    rc = os_mempool_init(&ble_l2cap_sig_proc_pool,
   2641c:	4b06      	ldr	r3, [pc, #24]	; (26438 <ble_l2cap_sig_init+0x28>)
   2641e:	9300      	str	r3, [sp, #0]
   26420:	4b06      	ldr	r3, [pc, #24]	; (2643c <ble_l2cap_sig_init+0x2c>)
   26422:	2214      	movs	r2, #20
   26424:	2101      	movs	r1, #1
   26426:	4806      	ldr	r0, [pc, #24]	; (26440 <ble_l2cap_sig_init+0x30>)
   26428:	f7e7 fbac 	bl	db84 <os_mempool_init>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   2642c:	b003      	add	sp, #12
   2642e:	f85d fb04 	ldr.w	pc, [sp], #4
   26432:	bf00      	nop
   26434:	20002c34 	.word	0x20002c34
   26438:	000325c4 	.word	0x000325c4
   2643c:	20002c04 	.word	0x20002c04
   26440:	20002c18 	.word	0x20002c18

00026444 <ble_l2cap_sig_tx>:
#include <string.h>
#include "ble_hs_priv.h"

int
ble_l2cap_sig_tx(uint16_t conn_handle, struct os_mbuf *txom)
{
   26444:	b530      	push	{r4, r5, lr}
   26446:	b083      	sub	sp, #12
   26448:	4605      	mov	r5, r0
   2644a:	460c      	mov	r4, r1
    struct ble_l2cap_chan *chan;
    struct ble_hs_conn *conn;
    int rc;

    ble_hs_lock();
   2644c:	f7fd fb18 	bl	23a80 <ble_hs_lock>
    ble_hs_misc_conn_chan_find_reqd(conn_handle, BLE_L2CAP_CID_SIG,
   26450:	ab01      	add	r3, sp, #4
   26452:	466a      	mov	r2, sp
   26454:	2105      	movs	r1, #5
   26456:	4628      	mov	r0, r5
   26458:	f7ff f940 	bl	256dc <ble_hs_misc_conn_chan_find_reqd>
                                    &conn, &chan);
    rc = ble_l2cap_tx(conn, chan, txom);
   2645c:	4622      	mov	r2, r4
   2645e:	9901      	ldr	r1, [sp, #4]
   26460:	9800      	ldr	r0, [sp, #0]
   26462:	f7ff fd3e 	bl	25ee2 <ble_l2cap_tx>
   26466:	4604      	mov	r4, r0
    ble_hs_unlock();
   26468:	f7fd fb0e 	bl	23a88 <ble_hs_unlock>

    return rc;
}
   2646c:	4620      	mov	r0, r4
   2646e:	b003      	add	sp, #12
   26470:	bd30      	pop	{r4, r5, pc}

00026472 <ble_l2cap_sig_hdr_parse>:
{
    struct ble_l2cap_sig_hdr *src = payload;

    BLE_HS_DBG_ASSERT(len >= BLE_L2CAP_SIG_HDR_SZ);

    dst->op = src->op;
   26472:	7803      	ldrb	r3, [r0, #0]
   26474:	7013      	strb	r3, [r2, #0]
    dst->identifier = src->identifier;
   26476:	7843      	ldrb	r3, [r0, #1]
   26478:	7053      	strb	r3, [r2, #1]
    dst->length = le16toh(src->length);
   2647a:	8843      	ldrh	r3, [r0, #2]
   2647c:	8053      	strh	r3, [r2, #2]
}
   2647e:	4770      	bx	lr

00026480 <ble_l2cap_sig_cmd_get>:
}

void *
ble_l2cap_sig_cmd_get(uint8_t opcode, uint8_t id, uint16_t len,
                      struct os_mbuf **txom)
{
   26480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26484:	4680      	mov	r8, r0
   26486:	460f      	mov	r7, r1
   26488:	4616      	mov	r6, r2
   2648a:	461d      	mov	r5, r3
    struct ble_l2cap_sig_hdr *hdr;

    *txom = ble_hs_mbuf_l2cap_pkt();
   2648c:	f7ff f8c0 	bl	25610 <ble_hs_mbuf_l2cap_pkt>
   26490:	6028      	str	r0, [r5, #0]
    if (*txom == NULL) {
   26492:	b198      	cbz	r0, 264bc <ble_l2cap_sig_cmd_get+0x3c>
        return NULL;
    }

    if (os_mbuf_extend(*txom, sizeof(*hdr) + len) == NULL) {
   26494:	1d31      	adds	r1, r6, #4
   26496:	b289      	uxth	r1, r1
   26498:	f7e7 f9f2 	bl	d880 <os_mbuf_extend>
   2649c:	4604      	mov	r4, r0
   2649e:	b148      	cbz	r0, 264b4 <ble_l2cap_sig_cmd_get+0x34>
        os_mbuf_free_chain(*txom);
        return NULL;
    }

    hdr = (struct ble_l2cap_sig_hdr *)(*txom)->om_data;
   264a0:	682b      	ldr	r3, [r5, #0]
   264a2:	681c      	ldr	r4, [r3, #0]

    hdr->op = opcode;
   264a4:	f884 8000 	strb.w	r8, [r4]
    hdr->identifier = id;
   264a8:	7067      	strb	r7, [r4, #1]
    hdr->length = htole16(len);
   264aa:	8066      	strh	r6, [r4, #2]

    return hdr->data;
   264ac:	3404      	adds	r4, #4
}
   264ae:	4620      	mov	r0, r4
   264b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        os_mbuf_free_chain(*txom);
   264b4:	6828      	ldr	r0, [r5, #0]
   264b6:	f7e6 ffb3 	bl	d420 <os_mbuf_free_chain>
        return NULL;
   264ba:	e7f8      	b.n	264ae <ble_l2cap_sig_cmd_get+0x2e>
        return NULL;
   264bc:	2400      	movs	r4, #0
   264be:	e7f6      	b.n	264ae <ble_l2cap_sig_cmd_get+0x2e>

000264c0 <ble_l2cap_sig_reject_tx>:
{
   264c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   264c2:	b083      	sub	sp, #12
   264c4:	4605      	mov	r5, r0
   264c6:	4617      	mov	r7, r2
   264c8:	461e      	mov	r6, r3
   264ca:	9c08      	ldr	r4, [sp, #32]
    cmd = ble_l2cap_sig_cmd_get(BLE_L2CAP_SIG_OP_REJECT, id,
   264cc:	1ca2      	adds	r2, r4, #2
   264ce:	ab01      	add	r3, sp, #4
   264d0:	b292      	uxth	r2, r2
   264d2:	2001      	movs	r0, #1
   264d4:	f7ff ffd4 	bl	26480 <ble_l2cap_sig_cmd_get>
    if (!cmd) {
   264d8:	b178      	cbz	r0, 264fa <ble_l2cap_sig_reject_tx+0x3a>
    cmd->reason = htole16(reason);
   264da:	f820 7b02 	strh.w	r7, [r0], #2
    memcpy(cmd->data, data, data_len);
   264de:	4622      	mov	r2, r4
   264e0:	4631      	mov	r1, r6
   264e2:	f7e8 fa5d 	bl	e9a0 <memcpy>
    STATS_INC(ble_l2cap_stats, sig_rx);
   264e6:	4a06      	ldr	r2, [pc, #24]	; (26500 <ble_l2cap_sig_reject_tx+0x40>)
   264e8:	6a93      	ldr	r3, [r2, #40]	; 0x28
   264ea:	3301      	adds	r3, #1
   264ec:	6293      	str	r3, [r2, #40]	; 0x28
    return ble_l2cap_sig_tx(conn_handle, txom);
   264ee:	9901      	ldr	r1, [sp, #4]
   264f0:	4628      	mov	r0, r5
   264f2:	f7ff ffa7 	bl	26444 <ble_l2cap_sig_tx>
}
   264f6:	b003      	add	sp, #12
   264f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return BLE_HS_ENOMEM;
   264fa:	2006      	movs	r0, #6
   264fc:	e7fb      	b.n	264f6 <ble_l2cap_sig_reject_tx+0x36>
   264fe:	bf00      	nop
   26500:	2000413c 	.word	0x2000413c

00026504 <ble_l2cap_sig_reject_invalid_cid_tx>:
{
   26504:	b500      	push	{lr}
   26506:	b085      	sub	sp, #20
    } data = {
   26508:	f8ad 300c 	strh.w	r3, [sp, #12]
   2650c:	f8ad 200e 	strh.w	r2, [sp, #14]
    return ble_l2cap_sig_reject_tx(conn_handle, id,
   26510:	2304      	movs	r3, #4
   26512:	9300      	str	r3, [sp, #0]
   26514:	ab03      	add	r3, sp, #12
   26516:	2202      	movs	r2, #2
   26518:	f7ff ffd2 	bl	264c0 <ble_l2cap_sig_reject_tx>
}
   2651c:	b005      	add	sp, #20
   2651e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00026524 <ble_sm_dispatch_get>:
}

static ble_sm_rx_fn *
ble_sm_dispatch_get(uint8_t op)
{
    if (op >= sizeof ble_sm_dispatch / sizeof ble_sm_dispatch[0]) {
   26524:	280e      	cmp	r0, #14
   26526:	d803      	bhi.n	26530 <ble_sm_dispatch_get+0xc>
        return NULL;
    }

    return ble_sm_dispatch[op];
   26528:	4b02      	ldr	r3, [pc, #8]	; (26534 <ble_sm_dispatch_get+0x10>)
   2652a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   2652e:	4770      	bx	lr
        return NULL;
   26530:	2000      	movs	r0, #0
}
   26532:	4770      	bx	lr
   26534:	000325dc 	.word	0x000325dc

00026538 <ble_sm_proc_remove>:

static void
ble_sm_proc_remove(struct ble_sm_proc *proc,
                         struct ble_sm_proc *prev)
{
    if (prev == NULL) {
   26538:	b121      	cbz	r1, 26544 <ble_sm_proc_remove+0xc>
        BLE_HS_DBG_ASSERT(STAILQ_FIRST(&ble_sm_procs) == proc);
        STAILQ_REMOVE_HEAD(&ble_sm_procs, next);
    } else {
        BLE_HS_DBG_ASSERT(STAILQ_NEXT(prev, next) == proc);
        STAILQ_REMOVE_AFTER(&ble_sm_procs, prev, next);
   2653a:	680a      	ldr	r2, [r1, #0]
   2653c:	6812      	ldr	r2, [r2, #0]
   2653e:	600a      	str	r2, [r1, #0]
   26540:	b14a      	cbz	r2, 26556 <ble_sm_proc_remove+0x1e>
    }

    ble_sm_dbg_assert_no_cycles();
}
   26542:	4770      	bx	lr
        STAILQ_REMOVE_HEAD(&ble_sm_procs, next);
   26544:	4a05      	ldr	r2, [pc, #20]	; (2655c <ble_sm_proc_remove+0x24>)
   26546:	6813      	ldr	r3, [r2, #0]
   26548:	681b      	ldr	r3, [r3, #0]
   2654a:	6013      	str	r3, [r2, #0]
   2654c:	2b00      	cmp	r3, #0
   2654e:	d1f8      	bne.n	26542 <ble_sm_proc_remove+0xa>
   26550:	4613      	mov	r3, r2
   26552:	605a      	str	r2, [r3, #4]
   26554:	4770      	bx	lr
        STAILQ_REMOVE_AFTER(&ble_sm_procs, prev, next);
   26556:	4a01      	ldr	r2, [pc, #4]	; (2655c <ble_sm_proc_remove+0x24>)
   26558:	6051      	str	r1, [r2, #4]
}
   2655a:	e7f2      	b.n	26542 <ble_sm_proc_remove+0xa>
   2655c:	20002dd8 	.word	0x20002dd8

00026560 <ble_sm_proc_matches>:
}

static int
ble_sm_proc_matches(struct ble_sm_proc *proc, uint16_t conn_handle,
                    uint8_t state, int is_initiator)
{
   26560:	b410      	push	{r4}
    int proc_is_initiator;

    if (conn_handle != proc->conn_handle) {
   26562:	8944      	ldrh	r4, [r0, #10]
   26564:	428c      	cmp	r4, r1
   26566:	d002      	beq.n	2656e <ble_sm_proc_matches+0xe>
        return 0;
   26568:	2000      	movs	r0, #0
    if (is_initiator != -1 && is_initiator != proc_is_initiator) {
        return 0;
    }

    return 1;
}
   2656a:	bc10      	pop	{r4}
   2656c:	4770      	bx	lr
    if (state != BLE_SM_PROC_STATE_NONE && state != proc->state) {
   2656e:	2aff      	cmp	r2, #255	; 0xff
   26570:	d004      	beq.n	2657c <ble_sm_proc_matches+0x1c>
   26572:	7b41      	ldrb	r1, [r0, #13]
   26574:	4291      	cmp	r1, r2
   26576:	d001      	beq.n	2657c <ble_sm_proc_matches+0x1c>
        return 0;
   26578:	2000      	movs	r0, #0
   2657a:	e7f6      	b.n	2656a <ble_sm_proc_matches+0xa>
    proc_is_initiator = !!(proc->flags & BLE_SM_PROC_F_INITIATOR);
   2657c:	7a02      	ldrb	r2, [r0, #8]
   2657e:	f002 0201 	and.w	r2, r2, #1
    if (is_initiator != -1 && is_initiator != proc_is_initiator) {
   26582:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   26586:	d005      	beq.n	26594 <ble_sm_proc_matches+0x34>
   26588:	429a      	cmp	r2, r3
   2658a:	d001      	beq.n	26590 <ble_sm_proc_matches+0x30>
        return 0;
   2658c:	2000      	movs	r0, #0
   2658e:	e7ec      	b.n	2656a <ble_sm_proc_matches+0xa>
    return 1;
   26590:	2001      	movs	r0, #1
   26592:	e7ea      	b.n	2656a <ble_sm_proc_matches+0xa>
   26594:	2001      	movs	r0, #1
   26596:	e7e8      	b.n	2656a <ble_sm_proc_matches+0xa>

00026598 <ble_sm_insert>:
    STAILQ_FOREACH(cur, &ble_sm_procs, next) {
        BLE_HS_DBG_ASSERT(cur != proc);
    }
#endif

    STAILQ_INSERT_HEAD(&ble_sm_procs, proc, next);
   26598:	4b04      	ldr	r3, [pc, #16]	; (265ac <ble_sm_insert+0x14>)
   2659a:	681b      	ldr	r3, [r3, #0]
   2659c:	6003      	str	r3, [r0, #0]
   2659e:	b113      	cbz	r3, 265a6 <ble_sm_insert+0xe>
   265a0:	4b02      	ldr	r3, [pc, #8]	; (265ac <ble_sm_insert+0x14>)
   265a2:	6018      	str	r0, [r3, #0]
}
   265a4:	4770      	bx	lr
    STAILQ_INSERT_HEAD(&ble_sm_procs, proc, next);
   265a6:	4b01      	ldr	r3, [pc, #4]	; (265ac <ble_sm_insert+0x14>)
   265a8:	6058      	str	r0, [r3, #4]
   265aa:	e7f9      	b.n	265a0 <ble_sm_insert+0x8>
   265ac:	20002dd8 	.word	0x20002dd8

000265b0 <ble_sm_rx_noop>:

static void
ble_sm_rx_noop(uint16_t conn_handle, struct os_mbuf **om,
               struct ble_sm_result *res)
{
    res->app_status = BLE_HS_SM_US_ERR(BLE_SM_ERR_CMD_NOT_SUPP);
   265b0:	f240 4307 	movw	r3, #1031	; 0x407
   265b4:	6013      	str	r3, [r2, #0]
    res->sm_err = BLE_SM_ERR_CMD_NOT_SUPP;
   265b6:	2307      	movs	r3, #7
   265b8:	7113      	strb	r3, [r2, #4]
}
   265ba:	4770      	bx	lr

000265bc <ble_sm_build_authreq>:

static uint8_t
ble_sm_build_authreq(void)
{
    return ble_hs_cfg.sm_bonding << 0  |
   265bc:	4b08      	ldr	r3, [pc, #32]	; (265e0 <ble_sm_build_authreq+0x24>)
   265be:	7a5b      	ldrb	r3, [r3, #9]
   265c0:	f3c3 0040 	ubfx	r0, r3, #1, #1
           ble_hs_cfg.sm_mitm << 2     |
   265c4:	f3c3 0280 	ubfx	r2, r3, #2, #1
    return ble_hs_cfg.sm_bonding << 0  |
   265c8:	ea40 0082 	orr.w	r0, r0, r2, lsl #2
           ble_hs_cfg.sm_sc << 3       |
   265cc:	f3c3 02c0 	ubfx	r2, r3, #3, #1
           ble_hs_cfg.sm_mitm << 2     |
   265d0:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
           ble_hs_cfg.sm_keypress << 4;
   265d4:	f3c3 1300 	ubfx	r3, r3, #4, #1
}
   265d8:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
   265dc:	4770      	bx	lr
   265de:	bf00      	nop
   265e0:	200002c8 	.word	0x200002c8

000265e4 <ble_sm_key_dist>:
{
    struct ble_sm_pair_cmd *pair_rsp;

    pair_rsp = (struct ble_sm_pair_cmd *) &proc->pair_rsp[1];

    *out_init_key_dist = pair_rsp->init_key_dist;
   265e4:	7f03      	ldrb	r3, [r0, #28]
   265e6:	700b      	strb	r3, [r1, #0]
    *out_resp_key_dist = pair_rsp->resp_key_dist;
   265e8:	7f43      	ldrb	r3, [r0, #29]
   265ea:	7013      	strb	r3, [r2, #0]

    /* Encryption info and master ID are only sent in legacy pairing. */
    if (proc->flags & BLE_SM_PROC_F_SC) {
   265ec:	7a03      	ldrb	r3, [r0, #8]
   265ee:	f013 0f10 	tst.w	r3, #16
   265f2:	d007      	beq.n	26604 <ble_sm_key_dist+0x20>
        *out_init_key_dist &= ~BLE_SM_PAIR_KEY_DIST_ENC;
   265f4:	780b      	ldrb	r3, [r1, #0]
   265f6:	f023 0301 	bic.w	r3, r3, #1
   265fa:	700b      	strb	r3, [r1, #0]
        *out_resp_key_dist &= ~BLE_SM_PAIR_KEY_DIST_ENC;
   265fc:	7813      	ldrb	r3, [r2, #0]
   265fe:	f023 0301 	bic.w	r3, r3, #1
   26602:	7013      	strb	r3, [r2, #0]
    }
}
   26604:	4770      	bx	lr

00026606 <ble_sm_state_after_pair>:
 *****************************************************************************/

static uint8_t
ble_sm_state_after_pair(struct ble_sm_proc *proc)
{
    if (proc->flags & BLE_SM_PROC_F_SC) {
   26606:	7a03      	ldrb	r3, [r0, #8]
   26608:	f013 0f10 	tst.w	r3, #16
   2660c:	d101      	bne.n	26612 <ble_sm_state_after_pair+0xc>
        return BLE_SM_PROC_STATE_PUBLIC_KEY;
    } else {
        return BLE_SM_PROC_STATE_CONFIRM;
   2660e:	2001      	movs	r0, #1
    }
}
   26610:	4770      	bx	lr
        return BLE_SM_PROC_STATE_PUBLIC_KEY;
   26612:	2009      	movs	r0, #9
   26614:	4770      	bx	lr
	...

00026618 <ble_sm_pair_base_fill>:
    BLE_HS_DBG_ASSERT_EVAL(rc == 0);
}

static void
ble_sm_pair_base_fill(struct ble_sm_pair_cmd *cmd)
{
   26618:	b510      	push	{r4, lr}
   2661a:	4604      	mov	r4, r0
    cmd->io_cap = ble_hs_cfg.sm_io_cap;
   2661c:	4b06      	ldr	r3, [pc, #24]	; (26638 <ble_sm_pair_base_fill+0x20>)
   2661e:	7a1a      	ldrb	r2, [r3, #8]
   26620:	7002      	strb	r2, [r0, #0]
    cmd->oob_data_flag = ble_hs_cfg.sm_oob_data_flag;
   26622:	7a5b      	ldrb	r3, [r3, #9]
   26624:	f3c3 0300 	ubfx	r3, r3, #0, #1
   26628:	7043      	strb	r3, [r0, #1]
    cmd->authreq = ble_sm_build_authreq();
   2662a:	f7ff ffc7 	bl	265bc <ble_sm_build_authreq>
   2662e:	70a0      	strb	r0, [r4, #2]
    // MEL: modify proposed key size
    // cmd->max_enc_key_size = BLE_SM_PAIR_KEY_SZ_MAX;
    cmd->max_enc_key_size = 15;
   26630:	230f      	movs	r3, #15
   26632:	70e3      	strb	r3, [r4, #3]
}
   26634:	bd10      	pop	{r4, pc}
   26636:	bf00      	nop
   26638:	200002c8 	.word	0x200002c8

0002663c <ble_sm_pair_req_fill>:

static void
ble_sm_pair_req_fill(struct ble_sm_proc *proc)
{
   2663c:	b510      	push	{r4, lr}
   2663e:	4604      	mov	r4, r0
    struct ble_sm_pair_cmd *req;

    req = (void *)(proc->pair_req + 1);

    proc->pair_req[0] = BLE_SM_OP_PAIR_REQ;
   26640:	2301      	movs	r3, #1
   26642:	7403      	strb	r3, [r0, #16]
    ble_sm_pair_base_fill(req);
   26644:	3011      	adds	r0, #17
   26646:	f7ff ffe7 	bl	26618 <ble_sm_pair_base_fill>
    req->init_key_dist = ble_hs_cfg.sm_our_key_dist;
   2664a:	4b03      	ldr	r3, [pc, #12]	; (26658 <ble_sm_pair_req_fill+0x1c>)
   2664c:	7a9a      	ldrb	r2, [r3, #10]
   2664e:	7562      	strb	r2, [r4, #21]
    req->resp_key_dist = ble_hs_cfg.sm_their_key_dist;
   26650:	7adb      	ldrb	r3, [r3, #11]
   26652:	75a3      	strb	r3, [r4, #22]
}
   26654:	bd10      	pop	{r4, pc}
   26656:	bf00      	nop
   26658:	200002c8 	.word	0x200002c8

0002665c <ble_sm_pair_rsp_fill>:

static void
ble_sm_pair_rsp_fill(struct ble_sm_proc *proc)
{
   2665c:	b510      	push	{r4, lr}
   2665e:	4604      	mov	r4, r0
    struct ble_sm_pair_cmd *rsp;

    req = (void *)(proc->pair_req + 1);
    rsp = (void *)(proc->pair_rsp + 1);

    proc->pair_rsp[0] = BLE_SM_OP_PAIR_RSP;
   26660:	2302      	movs	r3, #2
   26662:	75c3      	strb	r3, [r0, #23]
    ble_sm_pair_base_fill(rsp);
   26664:	3018      	adds	r0, #24
   26666:	f7ff ffd7 	bl	26618 <ble_sm_pair_base_fill>

    /* The response's key distribution flags field is the intersection of
     * the peer's preferences and our capabilities.
     */
    rsp->init_key_dist = req->init_key_dist &
   2666a:	7d63      	ldrb	r3, [r4, #21]
                         ble_hs_cfg.sm_their_key_dist;
   2666c:	4a04      	ldr	r2, [pc, #16]	; (26680 <ble_sm_pair_rsp_fill+0x24>)
   2666e:	7ad1      	ldrb	r1, [r2, #11]
    rsp->init_key_dist = req->init_key_dist &
   26670:	400b      	ands	r3, r1
   26672:	7723      	strb	r3, [r4, #28]
    rsp->resp_key_dist = req->resp_key_dist &
   26674:	7da3      	ldrb	r3, [r4, #22]
                         ble_hs_cfg.sm_our_key_dist;
   26676:	7a92      	ldrb	r2, [r2, #10]
    rsp->resp_key_dist = req->resp_key_dist &
   26678:	4013      	ands	r3, r2
   2667a:	7763      	strb	r3, [r4, #29]
}
   2667c:	bd10      	pop	{r4, pc}
   2667e:	bf00      	nop
   26680:	200002c8 	.word	0x200002c8

00026684 <ble_sm_verify_auth_requirements>:
{
    /* For now we check only SC only mode. I.e.: when remote indicates
     * to not support SC pairing, let us make sure legacy pairing is supported
     * on our side. If not, we can fail right away.
     */
    if (!(authreq & BLE_SM_PAIR_AUTHREQ_SC)) {
   26684:	f010 0f08 	tst.w	r0, #8
   26688:	d001      	beq.n	2668e <ble_sm_verify_auth_requirements+0xa>
        if (MYNEWT_VAL(BLE_SM_LEGACY) == 0) {
            return false;
        }
    }
    return true;
   2668a:	2001      	movs	r0, #1
}
   2668c:	4770      	bx	lr
            return false;
   2668e:	2000      	movs	r0, #0
   26690:	4770      	bx	lr

00026692 <ble_sm_gen_ediv>:
{
   26692:	b508      	push	{r3, lr}
    rc = ble_hs_hci_util_rand(&master_id->ediv, sizeof master_id->ediv);
   26694:	2102      	movs	r1, #2
   26696:	f7fe fe4d 	bl	25334 <ble_hs_hci_util_rand>
}
   2669a:	bd08      	pop	{r3, pc}

0002669c <ble_sm_gen_master_id_rand>:
{
   2669c:	b508      	push	{r3, lr}
    rc = ble_hs_hci_util_rand(&master_id->rand_val, sizeof master_id->rand_val);
   2669e:	2108      	movs	r1, #8
   266a0:	3002      	adds	r0, #2
   266a2:	f7fe fe47 	bl	25334 <ble_hs_hci_util_rand>
}
   266a6:	bd08      	pop	{r3, pc}

000266a8 <ble_sm_gen_csrk>:
{
   266a8:	b508      	push	{r3, lr}
   266aa:	4608      	mov	r0, r1
    rc = ble_hs_hci_util_rand(csrk, 16);
   266ac:	2110      	movs	r1, #16
   266ae:	f7fe fe41 	bl	25334 <ble_hs_hci_util_rand>
}
   266b2:	bd08      	pop	{r3, pc}

000266b4 <ble_sm_io_action>:
{
   266b4:	b508      	push	{r3, lr}
    if (proc->flags & BLE_SM_PROC_F_SC) {
   266b6:	7a03      	ldrb	r3, [r0, #8]
   266b8:	f013 0f10 	tst.w	r3, #16
   266bc:	d002      	beq.n	266c4 <ble_sm_io_action+0x10>
        return ble_sm_sc_io_action(proc, action);
   266be:	f001 fce1 	bl	28084 <ble_sm_sc_io_action>
}
   266c2:	bd08      	pop	{r3, pc}
        return ble_sm_lgcy_io_action(proc, action);
   266c4:	2008      	movs	r0, #8
   266c6:	e7fc      	b.n	266c2 <ble_sm_io_action+0xe>

000266c8 <ble_sm_pair_cfg>:
{
   266c8:	b510      	push	{r4, lr}
   266ca:	b082      	sub	sp, #8
   266cc:	4604      	mov	r4, r0
    if (pair_req->authreq & BLE_SM_PAIR_AUTHREQ_SC &&
   266ce:	7cc3      	ldrb	r3, [r0, #19]
   266d0:	f013 0f08 	tst.w	r3, #8
   266d4:	d007      	beq.n	266e6 <ble_sm_pair_cfg+0x1e>
        pair_rsp->authreq & BLE_SM_PAIR_AUTHREQ_SC) {
   266d6:	7e83      	ldrb	r3, [r0, #26]
    if (pair_req->authreq & BLE_SM_PAIR_AUTHREQ_SC &&
   266d8:	f013 0f08 	tst.w	r3, #8
   266dc:	d003      	beq.n	266e6 <ble_sm_pair_cfg+0x1e>
        proc->flags |= BLE_SM_PROC_F_SC;
   266de:	7a03      	ldrb	r3, [r0, #8]
   266e0:	f043 0310 	orr.w	r3, r3, #16
   266e4:	7203      	strb	r3, [r0, #8]
    ble_sm_key_dist(proc, &init_key_dist, &resp_key_dist);
   266e6:	f10d 0206 	add.w	r2, sp, #6
   266ea:	f10d 0107 	add.w	r1, sp, #7
   266ee:	4620      	mov	r0, r4
   266f0:	f7ff ff78 	bl	265e4 <ble_sm_key_dist>
    if (proc->flags & BLE_SM_PROC_F_INITIATOR) {
   266f4:	7a22      	ldrb	r2, [r4, #8]
   266f6:	f012 0f01 	tst.w	r2, #1
   266fa:	d03b      	beq.n	26774 <ble_sm_pair_cfg+0xac>
        rx_key_dist = resp_key_dist;
   266fc:	f89d 3006 	ldrb.w	r3, [sp, #6]
    if (pair_req->authreq & BLE_SM_PAIR_AUTHREQ_BOND &&
   26700:	7ce1      	ldrb	r1, [r4, #19]
   26702:	f011 0f01 	tst.w	r1, #1
   26706:	d006      	beq.n	26716 <ble_sm_pair_cfg+0x4e>
        pair_rsp->authreq & BLE_SM_PAIR_AUTHREQ_BOND) {
   26708:	7ea1      	ldrb	r1, [r4, #26]
    if (pair_req->authreq & BLE_SM_PAIR_AUTHREQ_BOND &&
   2670a:	f011 0f01 	tst.w	r1, #1
   2670e:	d002      	beq.n	26716 <ble_sm_pair_cfg+0x4e>
        proc->flags |= BLE_SM_PROC_F_BONDING;
   26710:	f042 0220 	orr.w	r2, r2, #32
   26714:	7222      	strb	r2, [r4, #8]
    if (!(proc->flags & BLE_SM_PROC_F_SC) &&
   26716:	7a22      	ldrb	r2, [r4, #8]
   26718:	f012 0f10 	tst.w	r2, #16
   2671c:	d108      	bne.n	26730 <ble_sm_pair_cfg+0x68>
        (init_key_dist == 0 && resp_key_dist == 0)) {
   2671e:	f89d 1007 	ldrb.w	r1, [sp, #7]
    if (!(proc->flags & BLE_SM_PROC_F_SC) &&
   26722:	b929      	cbnz	r1, 26730 <ble_sm_pair_cfg+0x68>
        (init_key_dist == 0 && resp_key_dist == 0)) {
   26724:	f89d 1006 	ldrb.w	r1, [sp, #6]
   26728:	b911      	cbnz	r1, 26730 <ble_sm_pair_cfg+0x68>
        proc->flags &= ~BLE_SM_PROC_F_BONDING;
   2672a:	f022 0220 	bic.w	r2, r2, #32
   2672e:	7222      	strb	r2, [r4, #8]
    proc->rx_key_flags = 0;
   26730:	2200      	movs	r2, #0
   26732:	73a2      	strb	r2, [r4, #14]
    if (rx_key_dist & BLE_SM_PAIR_KEY_DIST_ENC) {
   26734:	f013 0f01 	tst.w	r3, #1
   26738:	d001      	beq.n	2673e <ble_sm_pair_cfg+0x76>
        proc->rx_key_flags |= BLE_SM_KE_F_ENC_INFO |
   2673a:	2203      	movs	r2, #3
   2673c:	73a2      	strb	r2, [r4, #14]
    if (rx_key_dist & BLE_SM_PAIR_KEY_DIST_ID) {
   2673e:	f013 0f02 	tst.w	r3, #2
   26742:	d003      	beq.n	2674c <ble_sm_pair_cfg+0x84>
        proc->rx_key_flags |= BLE_SM_KE_F_ID_INFO |
   26744:	7ba2      	ldrb	r2, [r4, #14]
   26746:	f042 020c 	orr.w	r2, r2, #12
   2674a:	73a2      	strb	r2, [r4, #14]
    if (rx_key_dist & BLE_SM_PAIR_KEY_DIST_SIGN) {
   2674c:	f013 0f04 	tst.w	r3, #4
   26750:	d003      	beq.n	2675a <ble_sm_pair_cfg+0x92>
        proc->rx_key_flags |= BLE_SM_KE_F_SIGN_INFO;
   26752:	7ba3      	ldrb	r3, [r4, #14]
   26754:	f043 0310 	orr.w	r3, r3, #16
   26758:	73a3      	strb	r3, [r4, #14]
    proc->key_size = min(pair_req->max_enc_key_size,
   2675a:	7ee3      	ldrb	r3, [r4, #27]
   2675c:	7d22      	ldrb	r2, [r4, #20]
   2675e:	4293      	cmp	r3, r2
   26760:	bf28      	it	cs
   26762:	4613      	movcs	r3, r2
   26764:	73e3      	strb	r3, [r4, #15]
    rc = ble_sm_io_action(proc, &ioact);
   26766:	f10d 0105 	add.w	r1, sp, #5
   2676a:	4620      	mov	r0, r4
   2676c:	f7ff ffa2 	bl	266b4 <ble_sm_io_action>
}
   26770:	b002      	add	sp, #8
   26772:	bd10      	pop	{r4, pc}
        rx_key_dist = init_key_dist;
   26774:	f89d 3007 	ldrb.w	r3, [sp, #7]
   26778:	e7c2      	b.n	26700 <ble_sm_pair_cfg+0x38>

0002677a <ble_sm_gen_ltk>:
{
   2677a:	b570      	push	{r4, r5, r6, lr}
   2677c:	4605      	mov	r5, r0
   2677e:	460c      	mov	r4, r1
    rc = ble_hs_hci_util_rand(ltk, proc->key_size);
   26780:	7bc1      	ldrb	r1, [r0, #15]
   26782:	4620      	mov	r0, r4
   26784:	f7fe fdd6 	bl	25334 <ble_hs_hci_util_rand>
    if (rc != 0) {
   26788:	4606      	mov	r6, r0
   2678a:	b108      	cbz	r0, 26790 <ble_sm_gen_ltk+0x16>
}
   2678c:	4630      	mov	r0, r6
   2678e:	bd70      	pop	{r4, r5, r6, pc}
    memset(ltk + proc->key_size, 0, sizeof proc->ltk - proc->key_size);
   26790:	7be8      	ldrb	r0, [r5, #15]
   26792:	f1c0 0210 	rsb	r2, r0, #16
   26796:	2100      	movs	r1, #0
   26798:	4420      	add	r0, r4
   2679a:	f7e8 f929 	bl	e9f0 <memset>
    return 0;
   2679e:	e7f5      	b.n	2678c <ble_sm_gen_ltk+0x12>

000267a0 <ble_sm_exec>:
{
   267a0:	b570      	push	{r4, r5, r6, lr}
   267a2:	4605      	mov	r5, r0
   267a4:	460c      	mov	r4, r1
   267a6:	4616      	mov	r6, r2
    memset(res, 0, sizeof *res);
   267a8:	2300      	movs	r3, #0
   267aa:	600b      	str	r3, [r1, #0]
   267ac:	604b      	str	r3, [r1, #4]
   267ae:	608b      	str	r3, [r1, #8]
   267b0:	60cb      	str	r3, [r1, #12]
   267b2:	610b      	str	r3, [r1, #16]
   267b4:	614b      	str	r3, [r1, #20]
    if (!ble_hs_conn_exists(proc->conn_handle)) {
   267b6:	8940      	ldrh	r0, [r0, #10]
   267b8:	f7fe f80a 	bl	247d0 <ble_hs_conn_exists>
   267bc:	b140      	cbz	r0, 267d0 <ble_sm_exec+0x30>
        cb = ble_sm_state_dispatch[proc->state];
   267be:	7b6a      	ldrb	r2, [r5, #13]
   267c0:	4b05      	ldr	r3, [pc, #20]	; (267d8 <ble_sm_exec+0x38>)
   267c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
        cb(proc, res, arg);
   267c6:	4632      	mov	r2, r6
   267c8:	4621      	mov	r1, r4
   267ca:	4628      	mov	r0, r5
   267cc:	4798      	blx	r3
}
   267ce:	bd70      	pop	{r4, r5, r6, pc}
        res->app_status = BLE_HS_ENOTCONN;
   267d0:	2307      	movs	r3, #7
   267d2:	6023      	str	r3, [r4, #0]
   267d4:	e7fb      	b.n	267ce <ble_sm_exec+0x2e>
   267d6:	bf00      	nop
   267d8:	00032654 	.word	0x00032654

000267dc <ble_sm_sec_req_exec>:
 *****************************************************************************/

static void
ble_sm_sec_req_exec(struct ble_sm_proc *proc, struct ble_sm_result *res,
                    void *arg)
{
   267dc:	b570      	push	{r4, r5, r6, lr}
   267de:	b082      	sub	sp, #8
   267e0:	4605      	mov	r5, r0
   267e2:	460c      	mov	r4, r1
    struct ble_sm_sec_req *cmd;
    struct os_mbuf *txom;
    int rc;

    cmd = ble_sm_cmd_get(BLE_SM_OP_SEC_REQ, sizeof(*cmd), &txom);
   267e4:	aa01      	add	r2, sp, #4
   267e6:	2101      	movs	r1, #1
   267e8:	200b      	movs	r0, #11
   267ea:	f001 fb6f 	bl	27ecc <ble_sm_cmd_get>
    if (!cmd) {
   267ee:	b150      	cbz	r0, 26806 <ble_sm_sec_req_exec+0x2a>
   267f0:	4606      	mov	r6, r0
        res->app_status = BLE_HS_ENOMEM;
        return;
    }

    cmd->authreq = ble_sm_build_authreq();
   267f2:	f7ff fee3 	bl	265bc <ble_sm_build_authreq>
   267f6:	7030      	strb	r0, [r6, #0]
    rc = ble_sm_tx(proc->conn_handle, txom);
   267f8:	9901      	ldr	r1, [sp, #4]
   267fa:	8968      	ldrh	r0, [r5, #10]
   267fc:	f001 fb80 	bl	27f00 <ble_sm_tx>
    if (rc != 0) {
   26800:	b118      	cbz	r0, 2680a <ble_sm_sec_req_exec+0x2e>
        res->app_status = rc;
   26802:	6020      	str	r0, [r4, #0]
        return;
   26804:	e001      	b.n	2680a <ble_sm_sec_req_exec+0x2e>
        res->app_status = BLE_HS_ENOMEM;
   26806:	2306      	movs	r3, #6
   26808:	6023      	str	r3, [r4, #0]
    }
}
   2680a:	b002      	add	sp, #8
   2680c:	bd70      	pop	{r4, r5, r6, pc}

0002680e <ble_sm_fill_store_value>:
{
   2680e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26812:	4606      	mov	r6, r0
   26814:	4688      	mov	r8, r1
   26816:	4617      	mov	r7, r2
   26818:	461d      	mov	r5, r3
   2681a:	9c06      	ldr	r4, [sp, #24]
    memset(value_sec, 0, sizeof *value_sec);
   2681c:	2250      	movs	r2, #80	; 0x50
   2681e:	2100      	movs	r1, #0
   26820:	4620      	mov	r0, r4
   26822:	f7e8 f8e5 	bl	e9f0 <memset>
    value_sec->peer_addr = *peer_addr;
   26826:	6830      	ldr	r0, [r6, #0]
   26828:	6020      	str	r0, [r4, #0]
   2682a:	88b2      	ldrh	r2, [r6, #4]
   2682c:	79b3      	ldrb	r3, [r6, #6]
   2682e:	80a2      	strh	r2, [r4, #4]
   26830:	71a3      	strb	r3, [r4, #6]
    if (keys->ediv_rand_valid && keys->ltk_valid) {
   26832:	782b      	ldrb	r3, [r5, #0]
   26834:	f003 0303 	and.w	r3, r3, #3
   26838:	2b03      	cmp	r3, #3
   2683a:	d009      	beq.n	26850 <ble_sm_fill_store_value+0x42>
    if (keys->irk_valid) {
   2683c:	782b      	ldrb	r3, [r5, #0]
   2683e:	f013 0f04 	tst.w	r3, #4
   26842:	d12e      	bne.n	268a2 <ble_sm_fill_store_value+0x94>
    if (keys->csrk_valid) {
   26844:	782b      	ldrb	r3, [r5, #0]
   26846:	f013 0f08 	tst.w	r3, #8
   2684a:	d13f      	bne.n	268cc <ble_sm_fill_store_value+0xbe>
}
   2684c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        value_sec->key_size = keys->key_size;
   26850:	7c6b      	ldrb	r3, [r5, #17]
   26852:	71e3      	strb	r3, [r4, #7]
        value_sec->ediv = keys->ediv;
   26854:	886b      	ldrh	r3, [r5, #2]
   26856:	8123      	strh	r3, [r4, #8]
        value_sec->rand_num = keys->rand_val;
   26858:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
   2685c:	e9c4 2304 	strd	r2, r3, [r4, #16]
        memcpy(value_sec->ltk, keys->ltk, sizeof value_sec->ltk);
   26860:	462b      	mov	r3, r5
   26862:	f853 6f12 	ldr.w	r6, [r3, #18]!
   26866:	6858      	ldr	r0, [r3, #4]
   26868:	6899      	ldr	r1, [r3, #8]
   2686a:	68db      	ldr	r3, [r3, #12]
   2686c:	61a6      	str	r6, [r4, #24]
   2686e:	61e0      	str	r0, [r4, #28]
   26870:	6221      	str	r1, [r4, #32]
   26872:	6263      	str	r3, [r4, #36]	; 0x24
        value_sec->ltk_present = 1;
   26874:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   26878:	f043 0301 	orr.w	r3, r3, #1
   2687c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
        value_sec->authenticated = !!authenticated;
   26880:	f118 0800 	adds.w	r8, r8, #0
   26884:	bf18      	it	ne
   26886:	f04f 0801 	movne.w	r8, #1
   2688a:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
   2688e:	f368 0341 	bfi	r3, r8, #1, #1
        value_sec->sc = !!sc;
   26892:	3700      	adds	r7, #0
   26894:	bf18      	it	ne
   26896:	2701      	movne	r7, #1
   26898:	f367 0382 	bfi	r3, r7, #2, #1
   2689c:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
   268a0:	e7cc      	b.n	2683c <ble_sm_fill_store_value+0x2e>
        memcpy(value_sec->irk, keys->irk, sizeof value_sec->irk);
   268a2:	462b      	mov	r3, r5
   268a4:	f853 6f22 	ldr.w	r6, [r3, #34]!
   268a8:	6858      	ldr	r0, [r3, #4]
   268aa:	6899      	ldr	r1, [r3, #8]
   268ac:	68db      	ldr	r3, [r3, #12]
   268ae:	f8c4 6029 	str.w	r6, [r4, #41]	; 0x29
   268b2:	f8c4 002d 	str.w	r0, [r4, #45]	; 0x2d
   268b6:	f8c4 1031 	str.w	r1, [r4, #49]	; 0x31
   268ba:	f8c4 3035 	str.w	r3, [r4, #53]	; 0x35
        value_sec->irk_present = 1;
   268be:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
   268c2:	f043 0301 	orr.w	r3, r3, #1
   268c6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
   268ca:	e7bb      	b.n	26844 <ble_sm_fill_store_value+0x36>
        memcpy(value_sec->csrk, keys->csrk, sizeof value_sec->csrk);
   268cc:	f855 6f32 	ldr.w	r6, [r5, #50]!
   268d0:	6868      	ldr	r0, [r5, #4]
   268d2:	68a9      	ldr	r1, [r5, #8]
   268d4:	68ea      	ldr	r2, [r5, #12]
   268d6:	f8c4 603a 	str.w	r6, [r4, #58]	; 0x3a
   268da:	f8c4 003e 	str.w	r0, [r4, #62]	; 0x3e
   268de:	f8c4 1042 	str.w	r1, [r4, #66]	; 0x42
   268e2:	f8c4 2046 	str.w	r2, [r4, #70]	; 0x46
        value_sec->csrk_present = 1;
   268e6:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
   268ea:	f043 0301 	orr.w	r3, r3, #1
   268ee:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
}
   268f2:	e7ab      	b.n	2684c <ble_sm_fill_store_value+0x3e>

000268f4 <ble_sm_update_sec_state>:
{
   268f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   268f6:	460f      	mov	r7, r1
   268f8:	4616      	mov	r6, r2
   268fa:	461d      	mov	r5, r3
   268fc:	9c06      	ldr	r4, [sp, #24]
    conn = ble_hs_conn_find(conn_handle);
   268fe:	f7fd ff0f 	bl	24720 <ble_hs_conn_find>
    if (conn != NULL) {
   26902:	b1d0      	cbz	r0, 2693a <ble_sm_update_sec_state+0x46>
   26904:	4603      	mov	r3, r0
        conn->bhc_sec_state.encrypted = encrypted;
   26906:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
   2690a:	f367 0200 	bfi	r2, r7, #0, #1
   2690e:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
        if (authenticated) {
   26912:	b126      	cbz	r6, 2691e <ble_sm_update_sec_state+0x2a>
            conn->bhc_sec_state.authenticated = 1;
   26914:	b2d2      	uxtb	r2, r2
   26916:	f042 0202 	orr.w	r2, r2, #2
   2691a:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
        if (bonded) {
   2691e:	b12d      	cbz	r5, 2692c <ble_sm_update_sec_state+0x38>
            conn->bhc_sec_state.bonded = 1;
   26920:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
   26924:	f042 0204 	orr.w	r2, r2, #4
   26928:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
        if (key_size) {
   2692c:	b12c      	cbz	r4, 2693a <ble_sm_update_sec_state+0x46>
            conn->bhc_sec_state.key_size = key_size;
   2692e:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
   26932:	f364 02c7 	bfi	r2, r4, #3, #5
   26936:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
}
   2693a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002693c <ble_sm_key_exch_success>:
 * $key exchange                                                             *
 *****************************************************************************/

static void
ble_sm_key_exch_success(struct ble_sm_proc *proc, struct ble_sm_result *res)
{
   2693c:	b530      	push	{r4, r5, lr}
   2693e:	b083      	sub	sp, #12
   26940:	4604      	mov	r4, r0
   26942:	460d      	mov	r5, r1
    /* The procedure is now complete.  Update connection bonded state and
     * terminate procedure.
     */
    ble_sm_update_sec_state(proc->conn_handle, 1,
                            !!(proc->flags & BLE_SM_PROC_F_AUTHENTICATED),
   26944:	7a02      	ldrb	r2, [r0, #8]
                            !!(proc->flags & BLE_SM_PROC_F_BONDING),
                            proc->key_size);
   26946:	7bc3      	ldrb	r3, [r0, #15]
    ble_sm_update_sec_state(proc->conn_handle, 1,
   26948:	8940      	ldrh	r0, [r0, #10]
   2694a:	9300      	str	r3, [sp, #0]
   2694c:	f3c2 1340 	ubfx	r3, r2, #5, #1
   26950:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   26954:	2101      	movs	r1, #1
   26956:	f7ff ffcd 	bl	268f4 <ble_sm_update_sec_state>
    proc->state = BLE_SM_PROC_STATE_NONE;
   2695a:	23ff      	movs	r3, #255	; 0xff
   2695c:	7363      	strb	r3, [r4, #13]

    res->app_status = 0;
   2695e:	2300      	movs	r3, #0
   26960:	602b      	str	r3, [r5, #0]
    res->enc_cb = 1;
   26962:	7d2b      	ldrb	r3, [r5, #20]
   26964:	f043 0302 	orr.w	r3, r3, #2
   26968:	752b      	strb	r3, [r5, #20]
}
   2696a:	b003      	add	sp, #12
   2696c:	bd30      	pop	{r4, r5, pc}

0002696e <ble_sm_key_exch_exec>:

static void
ble_sm_key_exch_exec(struct ble_sm_proc *proc, struct ble_sm_result *res,
                     void *arg)
{
   2696e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26972:	b08a      	sub	sp, #40	; 0x28
   26974:	4604      	mov	r4, r0
   26976:	460d      	mov	r5, r1
    uint8_t our_key_dist;
    struct os_mbuf *txom;
    const uint8_t *irk;
    int rc;

    ble_sm_key_dist(proc, &init_key_dist, &resp_key_dist);
   26978:	f10d 020a 	add.w	r2, sp, #10
   2697c:	f10d 010b 	add.w	r1, sp, #11
   26980:	f7ff fe30 	bl	265e4 <ble_sm_key_dist>
    if (proc->flags & BLE_SM_PROC_F_INITIATOR) {
   26984:	7a23      	ldrb	r3, [r4, #8]
   26986:	f013 0f01 	tst.w	r3, #1
   2698a:	d018      	beq.n	269be <ble_sm_key_exch_exec+0x50>
        our_key_dist = init_key_dist;
   2698c:	f89d 600b 	ldrb.w	r6, [sp, #11]
    } else {
        our_key_dist = resp_key_dist;
    }

    if (our_key_dist & BLE_SM_PAIR_KEY_DIST_ENC) {
   26990:	f016 0f01 	tst.w	r6, #1
   26994:	d116      	bne.n	269c4 <ble_sm_key_exch_exec+0x56>
        if (rc != 0) {
            goto err;
        }
    }

    if (our_key_dist & BLE_SM_PAIR_KEY_DIST_ID) {
   26996:	f016 0f02 	tst.w	r6, #2
   2699a:	d179      	bne.n	26a90 <ble_sm_key_exch_exec+0x122>
        if (rc != 0) {
            goto err;
        }
    }

    if (our_key_dist & BLE_SM_PAIR_KEY_DIST_SIGN) {
   2699c:	f016 0f04 	tst.w	r6, #4
   269a0:	f040 80e3 	bne.w	26b6a <ble_sm_key_exch_exec+0x1fc>
        if (rc != 0) {
            goto err;
        }
    }

    if (proc->flags & BLE_SM_PROC_F_INITIATOR || proc->rx_key_flags == 0) {
   269a4:	7a23      	ldrb	r3, [r4, #8]
   269a6:	f013 0f01 	tst.w	r3, #1
   269aa:	d103      	bne.n	269b4 <ble_sm_key_exch_exec+0x46>
   269ac:	7ba3      	ldrb	r3, [r4, #14]
   269ae:	2b00      	cmp	r3, #0
   269b0:	f040 810f 	bne.w	26bd2 <ble_sm_key_exch_exec+0x264>
        /* The procedure is now complete. */
        ble_sm_key_exch_success(proc, res);
   269b4:	4629      	mov	r1, r5
   269b6:	4620      	mov	r0, r4
   269b8:	f7ff ffc0 	bl	2693c <ble_sm_key_exch_success>
   269bc:	e109      	b.n	26bd2 <ble_sm_key_exch_exec+0x264>
        our_key_dist = resp_key_dist;
   269be:	f89d 600a 	ldrb.w	r6, [sp, #10]
   269c2:	e7e5      	b.n	26990 <ble_sm_key_exch_exec+0x22>
        enc_info = ble_sm_cmd_get(BLE_SM_OP_ENC_INFO, sizeof(*enc_info), &txom);
   269c4:	aa01      	add	r2, sp, #4
   269c6:	2110      	movs	r1, #16
   269c8:	2006      	movs	r0, #6
   269ca:	f001 fa7f 	bl	27ecc <ble_sm_cmd_get>
        if (!enc_info) {
   269ce:	4601      	mov	r1, r0
   269d0:	2800      	cmp	r0, #0
   269d2:	f000 80f6 	beq.w	26bc2 <ble_sm_key_exch_exec+0x254>
        rc = ble_sm_gen_ltk(proc, enc_info->ltk);
   269d6:	4680      	mov	r8, r0
   269d8:	4620      	mov	r0, r4
   269da:	f7ff fece 	bl	2677a <ble_sm_gen_ltk>
        if (rc != 0) {
   269de:	4607      	mov	r7, r0
   269e0:	b118      	cbz	r0, 269ea <ble_sm_key_exch_exec+0x7c>
            os_mbuf_free_chain(txom);
   269e2:	9801      	ldr	r0, [sp, #4]
   269e4:	f7e6 fd1c 	bl	d420 <os_mbuf_free_chain>
            goto err;
   269e8:	e0ec      	b.n	26bc4 <ble_sm_key_exch_exec+0x256>
        memcpy(proc->our_keys.ltk, enc_info->ltk, 16);
   269ea:	f8d8 7000 	ldr.w	r7, [r8]
   269ee:	f8d8 0004 	ldr.w	r0, [r8, #4]
   269f2:	f8d8 1008 	ldr.w	r1, [r8, #8]
   269f6:	f8d8 200c 	ldr.w	r2, [r8, #12]
   269fa:	f8c4 7082 	str.w	r7, [r4, #130]	; 0x82
   269fe:	f8c4 0086 	str.w	r0, [r4, #134]	; 0x86
   26a02:	f8c4 108a 	str.w	r1, [r4, #138]	; 0x8a
   26a06:	f8c4 208e 	str.w	r2, [r4, #142]	; 0x8e
        proc->our_keys.key_size = proc->key_size;
   26a0a:	7be3      	ldrb	r3, [r4, #15]
   26a0c:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        proc->our_keys.ltk_valid = 1;
   26a10:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
   26a14:	f043 0301 	orr.w	r3, r3, #1
   26a18:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
        rc = ble_sm_tx(proc->conn_handle, txom);
   26a1c:	9901      	ldr	r1, [sp, #4]
   26a1e:	8960      	ldrh	r0, [r4, #10]
   26a20:	f001 fa6e 	bl	27f00 <ble_sm_tx>
        if (rc != 0) {
   26a24:	4607      	mov	r7, r0
   26a26:	2800      	cmp	r0, #0
   26a28:	f040 80cc 	bne.w	26bc4 <ble_sm_key_exch_exec+0x256>
        master_id = ble_sm_cmd_get(BLE_SM_OP_MASTER_ID, sizeof(*master_id),
   26a2c:	aa01      	add	r2, sp, #4
   26a2e:	210a      	movs	r1, #10
   26a30:	2007      	movs	r0, #7
   26a32:	f001 fa4b 	bl	27ecc <ble_sm_cmd_get>
        if (!master_id) {
   26a36:	4680      	mov	r8, r0
   26a38:	2800      	cmp	r0, #0
   26a3a:	f000 80cd 	beq.w	26bd8 <ble_sm_key_exch_exec+0x26a>
        rc = ble_sm_gen_ediv(master_id);
   26a3e:	f7ff fe28 	bl	26692 <ble_sm_gen_ediv>
        if (rc != 0) {
   26a42:	4607      	mov	r7, r0
   26a44:	b118      	cbz	r0, 26a4e <ble_sm_key_exch_exec+0xe0>
            os_mbuf_free_chain(txom);
   26a46:	9801      	ldr	r0, [sp, #4]
   26a48:	f7e6 fcea 	bl	d420 <os_mbuf_free_chain>
            goto err;
   26a4c:	e0ba      	b.n	26bc4 <ble_sm_key_exch_exec+0x256>
        rc = ble_sm_gen_master_id_rand(master_id);
   26a4e:	4640      	mov	r0, r8
   26a50:	f7ff fe24 	bl	2669c <ble_sm_gen_master_id_rand>
        if (rc != 0) {
   26a54:	4607      	mov	r7, r0
   26a56:	b118      	cbz	r0, 26a60 <ble_sm_key_exch_exec+0xf2>
            os_mbuf_free_chain(txom);
   26a58:	9801      	ldr	r0, [sp, #4]
   26a5a:	f7e6 fce1 	bl	d420 <os_mbuf_free_chain>
            goto err;
   26a5e:	e0b1      	b.n	26bc4 <ble_sm_key_exch_exec+0x256>
        proc->our_keys.ediv_rand_valid = 1;
   26a60:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
   26a64:	f043 0302 	orr.w	r3, r3, #2
   26a68:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
        proc->our_keys.rand_val = master_id->rand_val;
   26a6c:	f8d8 2002 	ldr.w	r2, [r8, #2]
   26a70:	f8d8 3006 	ldr.w	r3, [r8, #6]
   26a74:	67a2      	str	r2, [r4, #120]	; 0x78
   26a76:	67e3      	str	r3, [r4, #124]	; 0x7c
        proc->our_keys.ediv = master_id->ediv;
   26a78:	f8b8 3000 	ldrh.w	r3, [r8]
   26a7c:	f8a4 3072 	strh.w	r3, [r4, #114]	; 0x72
        rc = ble_sm_tx(proc->conn_handle, txom);
   26a80:	9901      	ldr	r1, [sp, #4]
   26a82:	8960      	ldrh	r0, [r4, #10]
   26a84:	f001 fa3c 	bl	27f00 <ble_sm_tx>
        if (rc != 0) {
   26a88:	4607      	mov	r7, r0
   26a8a:	2800      	cmp	r0, #0
   26a8c:	d083      	beq.n	26996 <ble_sm_key_exch_exec+0x28>
    }

    return;

err:
   26a8e:	e099      	b.n	26bc4 <ble_sm_key_exch_exec+0x256>
        id_info = ble_sm_cmd_get(BLE_SM_OP_IDENTITY_INFO, sizeof(*id_info),
   26a90:	aa01      	add	r2, sp, #4
   26a92:	2110      	movs	r1, #16
   26a94:	2008      	movs	r0, #8
   26a96:	f001 fa19 	bl	27ecc <ble_sm_cmd_get>
        if (!id_info) {
   26a9a:	4680      	mov	r8, r0
   26a9c:	2800      	cmp	r0, #0
   26a9e:	f000 809d 	beq.w	26bdc <ble_sm_key_exch_exec+0x26e>
        rc = ble_hs_pvcy_our_irk(&irk);
   26aa2:	4668      	mov	r0, sp
   26aa4:	f7fe fee0 	bl	25868 <ble_hs_pvcy_our_irk>
        if (rc != 0) {
   26aa8:	4607      	mov	r7, r0
   26aaa:	b118      	cbz	r0, 26ab4 <ble_sm_key_exch_exec+0x146>
            os_mbuf_free_chain(txom);
   26aac:	9801      	ldr	r0, [sp, #4]
   26aae:	f7e6 fcb7 	bl	d420 <os_mbuf_free_chain>
            goto err;
   26ab2:	e087      	b.n	26bc4 <ble_sm_key_exch_exec+0x256>
        memcpy(id_info->irk, irk, 16);
   26ab4:	9b00      	ldr	r3, [sp, #0]
   26ab6:	6818      	ldr	r0, [r3, #0]
   26ab8:	6859      	ldr	r1, [r3, #4]
   26aba:	689a      	ldr	r2, [r3, #8]
   26abc:	68db      	ldr	r3, [r3, #12]
   26abe:	f8c8 0000 	str.w	r0, [r8]
   26ac2:	f8c8 1004 	str.w	r1, [r8, #4]
   26ac6:	f8c8 2008 	str.w	r2, [r8, #8]
   26aca:	f8c8 300c 	str.w	r3, [r8, #12]
        proc->our_keys.irk_valid = 1;
   26ace:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
   26ad2:	f043 0304 	orr.w	r3, r3, #4
   26ad6:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
        rc = ble_sm_tx(proc->conn_handle, txom);
   26ada:	9901      	ldr	r1, [sp, #4]
   26adc:	8960      	ldrh	r0, [r4, #10]
   26ade:	f001 fa0f 	bl	27f00 <ble_sm_tx>
        if (rc != 0) {
   26ae2:	4607      	mov	r7, r0
   26ae4:	2800      	cmp	r0, #0
   26ae6:	d16d      	bne.n	26bc4 <ble_sm_key_exch_exec+0x256>
        addr_info = ble_sm_cmd_get(BLE_SM_OP_IDENTITY_ADDR_INFO,
   26ae8:	aa01      	add	r2, sp, #4
   26aea:	2107      	movs	r1, #7
   26aec:	2009      	movs	r0, #9
   26aee:	f001 f9ed 	bl	27ecc <ble_sm_cmd_get>
        if (!addr_info) {
   26af2:	4607      	mov	r7, r0
   26af4:	2800      	cmp	r0, #0
   26af6:	d073      	beq.n	26be0 <ble_sm_key_exch_exec+0x272>
        conn = ble_hs_conn_find_assert(proc->conn_handle);
   26af8:	8960      	ldrh	r0, [r4, #10]
   26afa:	f7fd fe29 	bl	24750 <ble_hs_conn_find_assert>
        ble_hs_conn_addrs(conn, &addrs);
   26afe:	a903      	add	r1, sp, #12
   26b00:	f7fd fe74 	bl	247ec <ble_hs_conn_addrs>
        addr_info->addr_type = addrs.our_id_addr.type;
   26b04:	f89d 200c 	ldrb.w	r2, [sp, #12]
   26b08:	463b      	mov	r3, r7
   26b0a:	f803 2b01 	strb.w	r2, [r3], #1
        memcpy(addr_info->bd_addr, addrs.our_id_addr.val, 6);
   26b0e:	aa0a      	add	r2, sp, #40	; 0x28
   26b10:	f852 1d1b 	ldr.w	r1, [r2, #-27]!
   26b14:	f8c7 1001 	str.w	r1, [r7, #1]
   26b18:	8892      	ldrh	r2, [r2, #4]
   26b1a:	809a      	strh	r2, [r3, #4]
        proc->our_keys.addr_valid = 1;
   26b1c:	f894 2070 	ldrb.w	r2, [r4, #112]	; 0x70
   26b20:	f042 0210 	orr.w	r2, r2, #16
   26b24:	f884 2070 	strb.w	r2, [r4, #112]	; 0x70
        memcpy(proc->our_keys.irk, irk, 16);
   26b28:	9900      	ldr	r1, [sp, #0]
   26b2a:	f8d1 e000 	ldr.w	lr, [r1]
   26b2e:	f8d1 c004 	ldr.w	ip, [r1, #4]
   26b32:	6888      	ldr	r0, [r1, #8]
   26b34:	68c9      	ldr	r1, [r1, #12]
   26b36:	f8c4 e092 	str.w	lr, [r4, #146]	; 0x92
   26b3a:	f8c4 c096 	str.w	ip, [r4, #150]	; 0x96
   26b3e:	f8c4 009a 	str.w	r0, [r4, #154]	; 0x9a
   26b42:	f8c4 109e 	str.w	r1, [r4, #158]	; 0x9e
        proc->our_keys.addr_type = addr_info->addr_type;
   26b46:	783a      	ldrb	r2, [r7, #0]
   26b48:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
        memcpy(proc->our_keys.addr, addr_info->bd_addr, 6);
   26b4c:	681a      	ldr	r2, [r3, #0]
   26b4e:	f8c4 20b2 	str.w	r2, [r4, #178]	; 0xb2
   26b52:	889b      	ldrh	r3, [r3, #4]
   26b54:	f8a4 30b6 	strh.w	r3, [r4, #182]	; 0xb6
        rc = ble_sm_tx(proc->conn_handle, txom);
   26b58:	9901      	ldr	r1, [sp, #4]
   26b5a:	8960      	ldrh	r0, [r4, #10]
   26b5c:	f001 f9d0 	bl	27f00 <ble_sm_tx>
        if (rc != 0) {
   26b60:	4607      	mov	r7, r0
   26b62:	2800      	cmp	r0, #0
   26b64:	f43f af1a 	beq.w	2699c <ble_sm_key_exch_exec+0x2e>
err:
   26b68:	e02c      	b.n	26bc4 <ble_sm_key_exch_exec+0x256>
        sign_info = ble_sm_cmd_get(BLE_SM_OP_SIGN_INFO, sizeof(*sign_info),
   26b6a:	aa01      	add	r2, sp, #4
   26b6c:	2110      	movs	r1, #16
   26b6e:	200a      	movs	r0, #10
   26b70:	f001 f9ac 	bl	27ecc <ble_sm_cmd_get>
        if (!sign_info) {
   26b74:	4601      	mov	r1, r0
   26b76:	b3a8      	cbz	r0, 26be4 <ble_sm_key_exch_exec+0x276>
        rc = ble_sm_gen_csrk(proc, sign_info->sig_key);
   26b78:	4606      	mov	r6, r0
   26b7a:	4620      	mov	r0, r4
   26b7c:	f7ff fd94 	bl	266a8 <ble_sm_gen_csrk>
        if (rc != 0) {
   26b80:	4607      	mov	r7, r0
   26b82:	b118      	cbz	r0, 26b8c <ble_sm_key_exch_exec+0x21e>
            os_mbuf_free_chain(txom);
   26b84:	9801      	ldr	r0, [sp, #4]
   26b86:	f7e6 fc4b 	bl	d420 <os_mbuf_free_chain>
            goto err;
   26b8a:	e01b      	b.n	26bc4 <ble_sm_key_exch_exec+0x256>
        proc->our_keys.csrk_valid = 1;
   26b8c:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
   26b90:	f043 0308 	orr.w	r3, r3, #8
   26b94:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
        memcpy(proc->our_keys.csrk, sign_info->sig_key, 16);
   26b98:	6837      	ldr	r7, [r6, #0]
   26b9a:	6870      	ldr	r0, [r6, #4]
   26b9c:	68b1      	ldr	r1, [r6, #8]
   26b9e:	68f2      	ldr	r2, [r6, #12]
   26ba0:	f8c4 70a2 	str.w	r7, [r4, #162]	; 0xa2
   26ba4:	f8c4 00a6 	str.w	r0, [r4, #166]	; 0xa6
   26ba8:	f8c4 10aa 	str.w	r1, [r4, #170]	; 0xaa
   26bac:	f8c4 20ae 	str.w	r2, [r4, #174]	; 0xae
        rc = ble_sm_tx(proc->conn_handle, txom);
   26bb0:	9901      	ldr	r1, [sp, #4]
   26bb2:	8960      	ldrh	r0, [r4, #10]
   26bb4:	f001 f9a4 	bl	27f00 <ble_sm_tx>
        if (rc != 0) {
   26bb8:	4607      	mov	r7, r0
   26bba:	2800      	cmp	r0, #0
   26bbc:	f43f aef2 	beq.w	269a4 <ble_sm_key_exch_exec+0x36>
err:
   26bc0:	e000      	b.n	26bc4 <ble_sm_key_exch_exec+0x256>
            rc = BLE_HS_ENOMEM;
   26bc2:	2706      	movs	r7, #6
    res->app_status = rc;
   26bc4:	602f      	str	r7, [r5, #0]
    res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   26bc6:	2308      	movs	r3, #8
   26bc8:	712b      	strb	r3, [r5, #4]
    res->enc_cb = 1;
   26bca:	7d2b      	ldrb	r3, [r5, #20]
   26bcc:	f043 0302 	orr.w	r3, r3, #2
   26bd0:	752b      	strb	r3, [r5, #20]
}
   26bd2:	b00a      	add	sp, #40	; 0x28
   26bd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            rc = BLE_HS_ENOMEM;
   26bd8:	2706      	movs	r7, #6
   26bda:	e7f3      	b.n	26bc4 <ble_sm_key_exch_exec+0x256>
            rc = BLE_HS_ENOMEM;
   26bdc:	2706      	movs	r7, #6
   26bde:	e7f1      	b.n	26bc4 <ble_sm_key_exch_exec+0x256>
            rc = BLE_HS_ENOMEM;
   26be0:	2706      	movs	r7, #6
   26be2:	e7ef      	b.n	26bc4 <ble_sm_key_exch_exec+0x256>
            rc = BLE_HS_ENOMEM;
   26be4:	2706      	movs	r7, #6
   26be6:	e7ed      	b.n	26bc4 <ble_sm_key_exch_exec+0x256>

00026be8 <ble_sm_key_rxed>:

static void
ble_sm_key_rxed(struct ble_sm_proc *proc, struct ble_sm_result *res)
{
   26be8:	b508      	push	{r3, lr}
    BLE_HS_LOG(DEBUG, "rx_key_flags=0x%02x\n", proc->rx_key_flags);

    if (proc->rx_key_flags == 0) {
   26bea:	7b83      	ldrb	r3, [r0, #14]
   26bec:	b93b      	cbnz	r3, 26bfe <ble_sm_key_rxed+0x16>
        /* The peer is done sending keys.  If we are the initiator, we need to
         * send ours.  If we are the responder, the procedure is complete.
         */
        if (proc->flags & BLE_SM_PROC_F_INITIATOR) {
   26bee:	7a03      	ldrb	r3, [r0, #8]
   26bf0:	f013 0f01 	tst.w	r3, #1
   26bf4:	d004      	beq.n	26c00 <ble_sm_key_rxed+0x18>
            res->execute = 1;
   26bf6:	7d0b      	ldrb	r3, [r1, #20]
   26bf8:	f043 0301 	orr.w	r3, r3, #1
   26bfc:	750b      	strb	r3, [r1, #20]
        } else {
            ble_sm_key_exch_success(proc, res);
        }
    }
}
   26bfe:	bd08      	pop	{r3, pc}
            ble_sm_key_exch_success(proc, res);
   26c00:	f7ff fe9c 	bl	2693c <ble_sm_key_exch_success>
}
   26c04:	e7fb      	b.n	26bfe <ble_sm_key_rxed+0x16>

00026c06 <ble_sm_start_encrypt_tx>:
{
   26c06:	b510      	push	{r4, lr}
   26c08:	b08a      	sub	sp, #40	; 0x28
    cmd.conn_handle = htole16(params->connection_handle);
   26c0a:	8803      	ldrh	r3, [r0, #0]
   26c0c:	f8ad 300c 	strh.w	r3, [sp, #12]
    cmd.div = htole16(params->encrypted_diversifier);
   26c10:	8843      	ldrh	r3, [r0, #2]
   26c12:	f8ad 3016 	strh.w	r3, [sp, #22]
    cmd.rand = htole64(params->random_number);
   26c16:	6882      	ldr	r2, [r0, #8]
   26c18:	68c3      	ldr	r3, [r0, #12]
   26c1a:	f8cd 200e 	str.w	r2, [sp, #14]
   26c1e:	f8cd 3012 	str.w	r3, [sp, #18]
    memcpy(cmd.ltk, params->long_term_key, sizeof(cmd.ltk));
   26c22:	ac06      	add	r4, sp, #24
   26c24:	4603      	mov	r3, r0
   26c26:	f853 0f10 	ldr.w	r0, [r3, #16]!
   26c2a:	6859      	ldr	r1, [r3, #4]
   26c2c:	689a      	ldr	r2, [r3, #8]
   26c2e:	68db      	ldr	r3, [r3, #12]
   26c30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   26c32:	2300      	movs	r3, #0
   26c34:	9300      	str	r3, [sp, #0]
   26c36:	221c      	movs	r2, #28
   26c38:	a903      	add	r1, sp, #12
   26c3a:	f242 0019 	movw	r0, #8217	; 0x2019
   26c3e:	f7fd ffb9 	bl	24bb4 <ble_hs_hci_cmd_tx>
}
   26c42:	b00a      	add	sp, #40	; 0x28
   26c44:	bd10      	pop	{r4, pc}

00026c46 <ble_sm_enc_restore_exec>:
{
   26c46:	b510      	push	{r4, lr}
   26c48:	460c      	mov	r4, r1
    res->app_status = ble_sm_start_encrypt_tx(cmd);
   26c4a:	4610      	mov	r0, r2
   26c4c:	f7ff ffdb 	bl	26c06 <ble_sm_start_encrypt_tx>
   26c50:	6020      	str	r0, [r4, #0]
}
   26c52:	bd10      	pop	{r4, pc}

00026c54 <ble_sm_enc_start_exec>:
{
   26c54:	b530      	push	{r4, r5, lr}
   26c56:	b089      	sub	sp, #36	; 0x24
   26c58:	460d      	mov	r5, r1
    cmd.connection_handle = proc->conn_handle;
   26c5a:	8943      	ldrh	r3, [r0, #10]
   26c5c:	f8ad 3000 	strh.w	r3, [sp]
    cmd.encrypted_diversifier = 0;
   26c60:	2300      	movs	r3, #0
   26c62:	f8ad 3002 	strh.w	r3, [sp, #2]
    cmd.random_number = 0;
   26c66:	2200      	movs	r2, #0
   26c68:	2300      	movs	r3, #0
   26c6a:	e9cd 2302 	strd	r2, r3, [sp, #8]
    memcpy(cmd.long_term_key, proc->ltk, sizeof cmd.long_term_key);
   26c6e:	ac04      	add	r4, sp, #16
   26c70:	4603      	mov	r3, r0
   26c72:	f853 0f5e 	ldr.w	r0, [r3, #94]!
   26c76:	6859      	ldr	r1, [r3, #4]
   26c78:	689a      	ldr	r2, [r3, #8]
   26c7a:	68db      	ldr	r3, [r3, #12]
   26c7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    rc = ble_sm_start_encrypt_tx(&cmd);
   26c7e:	4668      	mov	r0, sp
   26c80:	f7ff ffc1 	bl	26c06 <ble_sm_start_encrypt_tx>
    if (rc != 0) {
   26c84:	b130      	cbz	r0, 26c94 <ble_sm_enc_start_exec+0x40>
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   26c86:	2208      	movs	r2, #8
   26c88:	712a      	strb	r2, [r5, #4]
        res->app_status = rc;
   26c8a:	6028      	str	r0, [r5, #0]
        res->enc_cb = 1;
   26c8c:	7d2b      	ldrb	r3, [r5, #20]
   26c8e:	f043 0302 	orr.w	r3, r3, #2
   26c92:	752b      	strb	r3, [r5, #20]
}
   26c94:	b009      	add	sp, #36	; 0x24
   26c96:	bd30      	pop	{r4, r5, pc}

00026c98 <ble_sm_ltk_req_reply_tx>:
{
   26c98:	b530      	push	{r4, r5, lr}
   26c9a:	b089      	sub	sp, #36	; 0x24
   26c9c:	4604      	mov	r4, r0
    cmd.conn_handle = htole16(conn_handle);
   26c9e:	f8ad 000c 	strh.w	r0, [sp, #12]
    memcpy(cmd.ltk, ltk, 16);
   26ca2:	680d      	ldr	r5, [r1, #0]
   26ca4:	6848      	ldr	r0, [r1, #4]
   26ca6:	688a      	ldr	r2, [r1, #8]
   26ca8:	68cb      	ldr	r3, [r1, #12]
   26caa:	f8cd 500e 	str.w	r5, [sp, #14]
   26cae:	f8cd 0012 	str.w	r0, [sp, #18]
   26cb2:	f8cd 2016 	str.w	r2, [sp, #22]
   26cb6:	f8cd 301a 	str.w	r3, [sp, #26]
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   26cba:	2302      	movs	r3, #2
   26cbc:	9300      	str	r3, [sp, #0]
   26cbe:	ab02      	add	r3, sp, #8
   26cc0:	2212      	movs	r2, #18
   26cc2:	a903      	add	r1, sp, #12
   26cc4:	f242 001a 	movw	r0, #8218	; 0x201a
   26cc8:	f7fd ff74 	bl	24bb4 <ble_hs_hci_cmd_tx>
    if (rc != 0) {
   26ccc:	4603      	mov	r3, r0
   26cce:	b918      	cbnz	r0, 26cd8 <ble_sm_ltk_req_reply_tx+0x40>
    if (le16toh(rsp.conn_handle) != conn_handle) {
   26cd0:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   26cd4:	42a2      	cmp	r2, r4
   26cd6:	d102      	bne.n	26cde <ble_sm_ltk_req_reply_tx+0x46>
}
   26cd8:	4618      	mov	r0, r3
   26cda:	b009      	add	sp, #36	; 0x24
   26cdc:	bd30      	pop	{r4, r5, pc}
        return BLE_HS_ECONTROLLER;
   26cde:	230c      	movs	r3, #12
   26ce0:	e7fa      	b.n	26cd8 <ble_sm_ltk_req_reply_tx+0x40>

00026ce2 <ble_sm_ltk_start_exec>:
{
   26ce2:	b538      	push	{r3, r4, r5, lr}
   26ce4:	4604      	mov	r4, r0
   26ce6:	460d      	mov	r5, r1
    res->app_status = ble_sm_ltk_req_reply_tx(proc->conn_handle, proc->ltk);
   26ce8:	f100 015e 	add.w	r1, r0, #94	; 0x5e
   26cec:	8940      	ldrh	r0, [r0, #10]
   26cee:	f7ff ffd3 	bl	26c98 <ble_sm_ltk_req_reply_tx>
   26cf2:	6028      	str	r0, [r5, #0]
    if (res->app_status == 0) {
   26cf4:	b120      	cbz	r0, 26d00 <ble_sm_ltk_start_exec+0x1e>
        res->enc_cb = 1;
   26cf6:	7d2b      	ldrb	r3, [r5, #20]
   26cf8:	f043 0302 	orr.w	r3, r3, #2
   26cfc:	752b      	strb	r3, [r5, #20]
}
   26cfe:	bd38      	pop	{r3, r4, r5, pc}
        proc->state = BLE_SM_PROC_STATE_ENC_START;
   26d00:	2305      	movs	r3, #5
   26d02:	7363      	strb	r3, [r4, #13]
   26d04:	e7fb      	b.n	26cfe <ble_sm_ltk_start_exec+0x1c>

00026d06 <ble_sm_ltk_req_neg_reply_tx>:
{
   26d06:	b510      	push	{r4, lr}
   26d08:	b084      	sub	sp, #16
   26d0a:	4604      	mov	r4, r0
    cmd.conn_handle = htole16(conn_handle);
   26d0c:	f8ad 000c 	strh.w	r0, [sp, #12]
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   26d10:	2202      	movs	r2, #2
   26d12:	9200      	str	r2, [sp, #0]
   26d14:	ab02      	add	r3, sp, #8
   26d16:	a903      	add	r1, sp, #12
   26d18:	f242 001b 	movw	r0, #8219	; 0x201b
   26d1c:	f7fd ff4a 	bl	24bb4 <ble_hs_hci_cmd_tx>
    if (rc != 0) {
   26d20:	4603      	mov	r3, r0
   26d22:	b918      	cbnz	r0, 26d2c <ble_sm_ltk_req_neg_reply_tx+0x26>
    if (le16toh(rsp.conn_handle) != conn_handle) {
   26d24:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   26d28:	42a2      	cmp	r2, r4
   26d2a:	d102      	bne.n	26d32 <ble_sm_ltk_req_neg_reply_tx+0x2c>
}
   26d2c:	4618      	mov	r0, r3
   26d2e:	b004      	add	sp, #16
   26d30:	bd10      	pop	{r4, pc}
        return BLE_HS_ECONTROLLER;
   26d32:	230c      	movs	r3, #12
   26d34:	e7fa      	b.n	26d2c <ble_sm_ltk_req_neg_reply_tx+0x26>

00026d36 <ble_sm_ltk_restore_exec>:
{
   26d36:	b570      	push	{r4, r5, r6, lr}
   26d38:	4605      	mov	r5, r0
   26d3a:	460c      	mov	r4, r1
    if (value_sec != NULL) {
   26d3c:	b1e2      	cbz	r2, 26d78 <ble_sm_ltk_restore_exec+0x42>
   26d3e:	4616      	mov	r6, r2
        res->app_status = ble_sm_ltk_req_reply_tx(
   26d40:	f102 0118 	add.w	r1, r2, #24
   26d44:	8940      	ldrh	r0, [r0, #10]
   26d46:	f7ff ffa7 	bl	26c98 <ble_sm_ltk_req_reply_tx>
   26d4a:	6020      	str	r0, [r4, #0]
        if (res->app_status == 0) {
   26d4c:	b958      	cbnz	r0, 26d66 <ble_sm_ltk_restore_exec+0x30>
            proc->key_size = value_sec->key_size;
   26d4e:	79f3      	ldrb	r3, [r6, #7]
   26d50:	73eb      	strb	r3, [r5, #15]
            if (value_sec->authenticated) {
   26d52:	f896 304a 	ldrb.w	r3, [r6, #74]	; 0x4a
   26d56:	f013 0f02 	tst.w	r3, #2
   26d5a:	d008      	beq.n	26d6e <ble_sm_ltk_restore_exec+0x38>
                proc->flags |= BLE_SM_PROC_F_AUTHENTICATED;
   26d5c:	7a2b      	ldrb	r3, [r5, #8]
   26d5e:	f043 0308 	orr.w	r3, r3, #8
   26d62:	722b      	strb	r3, [r5, #8]
   26d64:	e003      	b.n	26d6e <ble_sm_ltk_restore_exec+0x38>
            res->enc_cb = 1;
   26d66:	7d23      	ldrb	r3, [r4, #20]
   26d68:	f043 0302 	orr.w	r3, r3, #2
   26d6c:	7523      	strb	r3, [r4, #20]
    if (res->app_status == 0) {
   26d6e:	6823      	ldr	r3, [r4, #0]
   26d70:	b90b      	cbnz	r3, 26d76 <ble_sm_ltk_restore_exec+0x40>
        proc->state = BLE_SM_PROC_STATE_ENC_RESTORE;
   26d72:	2306      	movs	r3, #6
   26d74:	736b      	strb	r3, [r5, #13]
}
   26d76:	bd70      	pop	{r4, r5, r6, pc}
        ble_sm_ltk_req_neg_reply_tx(proc->conn_handle);
   26d78:	8940      	ldrh	r0, [r0, #10]
   26d7a:	f7ff ffc4 	bl	26d06 <ble_sm_ltk_req_neg_reply_tx>
        res->app_status = BLE_HS_ENOENT;
   26d7e:	2305      	movs	r3, #5
   26d80:	6023      	str	r3, [r4, #0]
   26d82:	e7f4      	b.n	26d6e <ble_sm_ltk_restore_exec+0x38>

00026d84 <ble_sm_random_exec>:
{
   26d84:	b508      	push	{r3, lr}
    if (proc->flags & BLE_SM_PROC_F_SC) {
   26d86:	7a03      	ldrb	r3, [r0, #8]
   26d88:	f013 0f10 	tst.w	r3, #16
   26d8c:	d100      	bne.n	26d90 <ble_sm_random_exec+0xc>
}
   26d8e:	bd08      	pop	{r3, pc}
        ble_sm_sc_random_exec(proc, res);
   26d90:	f001 fad4 	bl	2833c <ble_sm_sc_random_exec>
}
   26d94:	e7fb      	b.n	26d8e <ble_sm_random_exec+0xa>

00026d96 <ble_sm_confirm_exec>:
{
   26d96:	b508      	push	{r3, lr}
    if (!(proc->flags & BLE_SM_PROC_F_SC)) {
   26d98:	7a03      	ldrb	r3, [r0, #8]
   26d9a:	f013 0f10 	tst.w	r3, #16
   26d9e:	d100      	bne.n	26da2 <ble_sm_confirm_exec+0xc>
}
   26da0:	bd08      	pop	{r3, pc}
        ble_sm_sc_confirm_exec(proc, res);
   26da2:	f001 fa7b 	bl	2829c <ble_sm_sc_confirm_exec>
}
   26da6:	e7fb      	b.n	26da0 <ble_sm_confirm_exec+0xa>

00026da8 <ble_sm_proc_set_timer>:
{
   26da8:	b510      	push	{r4, lr}
   26daa:	4604      	mov	r4, r0
   26dac:	f7e7 fb00 	bl	e3b0 <os_time_get>
    proc->exp_os_ticks = ble_npl_time_get() +
   26db0:	f500 6070 	add.w	r0, r0, #3840	; 0xf00
   26db4:	6060      	str	r0, [r4, #4]
    ble_hs_timer_resched();
   26db6:	f7fc ff5b 	bl	23c70 <ble_hs_timer_resched>
}
   26dba:	bd10      	pop	{r4, pc}

00026dbc <ble_sm_extract_expired>:
{
   26dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26dbe:	4605      	mov	r5, r0
   26dc0:	f7e7 faf6 	bl	e3b0 <os_time_get>
   26dc4:	4607      	mov	r7, r0
    STAILQ_INIT(dst_list);
   26dc6:	2400      	movs	r4, #0
   26dc8:	602c      	str	r4, [r5, #0]
   26dca:	606d      	str	r5, [r5, #4]
    ble_hs_lock();
   26dcc:	f7fc fe58 	bl	23a80 <ble_hs_lock>
    proc = STAILQ_FIRST(&ble_sm_procs);
   26dd0:	4b15      	ldr	r3, [pc, #84]	; (26e28 <ble_sm_extract_expired+0x6c>)
   26dd2:	681b      	ldr	r3, [r3, #0]
    next_exp_in = BLE_HS_FOREVER;
   26dd4:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
    while (proc != NULL) {
   26dd8:	e00a      	b.n	26df0 <ble_sm_extract_expired+0x34>
            if (prev == NULL) {
   26dda:	b19c      	cbz	r4, 26e04 <ble_sm_extract_expired+0x48>
                STAILQ_REMOVE_AFTER(&ble_sm_procs, prev, next);
   26ddc:	6822      	ldr	r2, [r4, #0]
   26dde:	6812      	ldr	r2, [r2, #0]
   26de0:	6022      	str	r2, [r4, #0]
   26de2:	b1c2      	cbz	r2, 26e16 <ble_sm_extract_expired+0x5a>
            STAILQ_INSERT_HEAD(dst_list, proc, next);
   26de4:	682a      	ldr	r2, [r5, #0]
   26de6:	601a      	str	r2, [r3, #0]
   26de8:	b1c2      	cbz	r2, 26e1c <ble_sm_extract_expired+0x60>
   26dea:	602b      	str	r3, [r5, #0]
                next_exp_in = time_diff;
   26dec:	461c      	mov	r4, r3
   26dee:	4603      	mov	r3, r0
    while (proc != NULL) {
   26df0:	b1b3      	cbz	r3, 26e20 <ble_sm_extract_expired+0x64>
        next = STAILQ_NEXT(proc, next);
   26df2:	6818      	ldr	r0, [r3, #0]
        time_diff = proc->exp_os_ticks - now;
   26df4:	685a      	ldr	r2, [r3, #4]
   26df6:	1bd2      	subs	r2, r2, r7
        if (time_diff <= 0) {
   26df8:	2a00      	cmp	r2, #0
   26dfa:	ddee      	ble.n	26dda <ble_sm_extract_expired+0x1e>
            if (time_diff < next_exp_in) {
   26dfc:	4296      	cmp	r6, r2
   26dfe:	ddf5      	ble.n	26dec <ble_sm_extract_expired+0x30>
                next_exp_in = time_diff;
   26e00:	4616      	mov	r6, r2
   26e02:	e7f3      	b.n	26dec <ble_sm_extract_expired+0x30>
                STAILQ_REMOVE_HEAD(&ble_sm_procs, next);
   26e04:	4908      	ldr	r1, [pc, #32]	; (26e28 <ble_sm_extract_expired+0x6c>)
   26e06:	680a      	ldr	r2, [r1, #0]
   26e08:	6812      	ldr	r2, [r2, #0]
   26e0a:	600a      	str	r2, [r1, #0]
   26e0c:	2a00      	cmp	r2, #0
   26e0e:	d1e9      	bne.n	26de4 <ble_sm_extract_expired+0x28>
   26e10:	460a      	mov	r2, r1
   26e12:	6051      	str	r1, [r2, #4]
   26e14:	e7e6      	b.n	26de4 <ble_sm_extract_expired+0x28>
                STAILQ_REMOVE_AFTER(&ble_sm_procs, prev, next);
   26e16:	4a04      	ldr	r2, [pc, #16]	; (26e28 <ble_sm_extract_expired+0x6c>)
   26e18:	6054      	str	r4, [r2, #4]
   26e1a:	e7e3      	b.n	26de4 <ble_sm_extract_expired+0x28>
            STAILQ_INSERT_HEAD(dst_list, proc, next);
   26e1c:	606b      	str	r3, [r5, #4]
   26e1e:	e7e4      	b.n	26dea <ble_sm_extract_expired+0x2e>
    ble_hs_unlock();
   26e20:	f7fc fe32 	bl	23a88 <ble_hs_unlock>
}
   26e24:	4630      	mov	r0, r6
   26e26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   26e28:	20002dd8 	.word	0x20002dd8

00026e2c <ble_sm_pair_fail_tx>:
{
   26e2c:	b530      	push	{r4, r5, lr}
   26e2e:	b083      	sub	sp, #12
   26e30:	4604      	mov	r4, r0
   26e32:	460d      	mov	r5, r1
    cmd = ble_sm_cmd_get(BLE_SM_OP_PAIR_FAIL, sizeof(*cmd), &txom);
   26e34:	aa01      	add	r2, sp, #4
   26e36:	2101      	movs	r1, #1
   26e38:	2005      	movs	r0, #5
   26e3a:	f001 f847 	bl	27ecc <ble_sm_cmd_get>
    if (cmd) {
   26e3e:	b130      	cbz	r0, 26e4e <ble_sm_pair_fail_tx+0x22>
        cmd->reason = reason;
   26e40:	7005      	strb	r5, [r0, #0]
        rc = ble_sm_tx(conn_handle, txom);
   26e42:	9901      	ldr	r1, [sp, #4]
   26e44:	4620      	mov	r0, r4
   26e46:	f001 f85b 	bl	27f00 <ble_sm_tx>
        if (rc) {
   26e4a:	4603      	mov	r3, r0
   26e4c:	b908      	cbnz	r0, 26e52 <ble_sm_pair_fail_tx+0x26>
}
   26e4e:	b003      	add	sp, #12
   26e50:	bd30      	pop	{r4, r5, pc}
            BLE_HS_LOG(ERROR, "ble_sm_pair_fail_tx failed, rc = %d\n", rc);
   26e52:	4a03      	ldr	r2, [pc, #12]	; (26e60 <ble_sm_pair_fail_tx+0x34>)
   26e54:	2103      	movs	r1, #3
   26e56:	2004      	movs	r0, #4
   26e58:	f7ea fc42 	bl	116e0 <modlog_printf>
}
   26e5c:	e7f7      	b.n	26e4e <ble_sm_pair_fail_tx+0x22>
   26e5e:	bf00      	nop
   26e60:	0003262c 	.word	0x0003262c

00026e64 <ble_sm_persist_keys>:
{
   26e64:	b5f0      	push	{r4, r5, r6, r7, lr}
   26e66:	b09b      	sub	sp, #108	; 0x6c
   26e68:	4604      	mov	r4, r0
    ble_hs_lock();
   26e6a:	f7fc fe09 	bl	23a80 <ble_hs_lock>
    conn = ble_hs_conn_find(proc->conn_handle);
   26e6e:	8960      	ldrh	r0, [r4, #10]
   26e70:	f7fd fc56 	bl	24720 <ble_hs_conn_find>
   26e74:	4605      	mov	r5, r0
    if (proc->peer_keys.addr_valid) {
   26e76:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
   26e7a:	f013 0f10 	tst.w	r3, #16
   26e7e:	d052      	beq.n	26f26 <ble_sm_persist_keys+0xc2>
        peer_addr.type = proc->peer_keys.addr_type;
   26e80:	f894 60c8 	ldrb.w	r6, [r4, #200]	; 0xc8
   26e84:	f88d 6008 	strb.w	r6, [sp, #8]
        memcpy(peer_addr.val, proc->peer_keys.addr, sizeof peer_addr.val);
   26e88:	4623      	mov	r3, r4
   26e8a:	f853 2ffa 	ldr.w	r2, [r3, #250]!
   26e8e:	f8cd 2009 	str.w	r2, [sp, #9]
   26e92:	889b      	ldrh	r3, [r3, #4]
   26e94:	f8ad 300d 	strh.w	r3, [sp, #13]
        conn->bhc_peer_addr = peer_addr;
   26e98:	9802      	ldr	r0, [sp, #8]
   26e9a:	f8c5 0007 	str.w	r0, [r5, #7]
   26e9e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   26ea2:	f89d 200e 	ldrb.w	r2, [sp, #14]
   26ea6:	f8a5 100b 	strh.w	r1, [r5, #11]
   26eaa:	736a      	strb	r2, [r5, #13]
        if (memcmp(BLE_ADDR_ANY->val, &conn->bhc_peer_rpa_addr.val, 6) != 0) {
   26eac:	2300      	movs	r3, #0
   26eae:	9318      	str	r3, [sp, #96]	; 0x60
   26eb0:	f8cd 3063 	str.w	r3, [sp, #99]	; 0x63
   26eb4:	2206      	movs	r2, #6
   26eb6:	f105 0116 	add.w	r1, r5, #22
   26eba:	f10d 0061 	add.w	r0, sp, #97	; 0x61
   26ebe:	f7e7 fd4b 	bl	e958 <memcmp>
   26ec2:	b128      	cbz	r0, 26ed0 <ble_sm_persist_keys+0x6c>
            switch (peer_addr.type) {
   26ec4:	2e03      	cmp	r6, #3
   26ec6:	d808      	bhi.n	26eda <ble_sm_persist_keys+0x76>
   26ec8:	e8df f006 	tbb	[pc, r6]
   26ecc:	2a052a05 	.word	0x2a052a05
    ble_hs_unlock();
   26ed0:	f7fc fdda 	bl	23a88 <ble_hs_unlock>
   26ed4:	e006      	b.n	26ee4 <ble_sm_persist_keys+0x80>
                conn->bhc_peer_addr.type = BLE_ADDR_PUBLIC_ID;
   26ed6:	2302      	movs	r3, #2
   26ed8:	71eb      	strb	r3, [r5, #7]
    ble_hs_unlock();
   26eda:	f7fc fdd5 	bl	23a88 <ble_hs_unlock>
        ble_gap_identity_event(proc->conn_handle);
   26ede:	8960      	ldrh	r0, [r4, #10]
   26ee0:	f7fa fb83 	bl	215ea <ble_gap_identity_event>
    authenticated = proc->flags & BLE_SM_PROC_F_AUTHENTICATED;
   26ee4:	7a25      	ldrb	r5, [r4, #8]
   26ee6:	f005 0708 	and.w	r7, r5, #8
    sc = proc->flags & BLE_SM_PROC_F_SC;
   26eea:	f005 0510 	and.w	r5, r5, #16
    ble_sm_fill_store_value(&peer_addr, authenticated, sc, &proc->our_keys,
   26eee:	ae04      	add	r6, sp, #16
   26ef0:	9600      	str	r6, [sp, #0]
   26ef2:	f104 0370 	add.w	r3, r4, #112	; 0x70
   26ef6:	462a      	mov	r2, r5
   26ef8:	4639      	mov	r1, r7
   26efa:	a802      	add	r0, sp, #8
   26efc:	f7ff fc87 	bl	2680e <ble_sm_fill_store_value>
    ble_store_write_our_sec(&value_sec);
   26f00:	4630      	mov	r0, r6
   26f02:	f001 fd61 	bl	289c8 <ble_store_write_our_sec>
    ble_sm_fill_store_value(&peer_addr, authenticated, sc, &proc->peer_keys,
   26f06:	9600      	str	r6, [sp, #0]
   26f08:	f104 03b8 	add.w	r3, r4, #184	; 0xb8
   26f0c:	462a      	mov	r2, r5
   26f0e:	4639      	mov	r1, r7
   26f10:	a802      	add	r0, sp, #8
   26f12:	f7ff fc7c 	bl	2680e <ble_sm_fill_store_value>
    ble_store_write_peer_sec(&value_sec);
   26f16:	4630      	mov	r0, r6
   26f18:	f001 fd63 	bl	289e2 <ble_store_write_peer_sec>
}
   26f1c:	b01b      	add	sp, #108	; 0x6c
   26f1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
                conn->bhc_peer_addr.type = BLE_ADDR_RANDOM_ID;
   26f20:	2303      	movs	r3, #3
   26f22:	71eb      	strb	r3, [r5, #7]
                break;
   26f24:	e7d9      	b.n	26eda <ble_sm_persist_keys+0x76>
        peer_addr = conn->bhc_peer_addr;
   26f26:	4603      	mov	r3, r0
   26f28:	f853 0f07 	ldr.w	r0, [r3, #7]!
   26f2c:	9002      	str	r0, [sp, #8]
   26f2e:	889a      	ldrh	r2, [r3, #4]
   26f30:	799b      	ldrb	r3, [r3, #6]
   26f32:	f8ad 200c 	strh.w	r2, [sp, #12]
   26f36:	f88d 300e 	strb.w	r3, [sp, #14]
            ble_hs_misc_peer_addr_type_to_id(conn->bhc_peer_addr.type);
   26f3a:	79e8      	ldrb	r0, [r5, #7]
   26f3c:	f7fe fbe6 	bl	2570c <ble_hs_misc_peer_addr_type_to_id>
        peer_addr.type =
   26f40:	f88d 0008 	strb.w	r0, [sp, #8]
    ble_hs_unlock();
   26f44:	f7fc fda0 	bl	23a88 <ble_hs_unlock>
   26f48:	e7cc      	b.n	26ee4 <ble_sm_persist_keys+0x80>
	...

00026f4c <ble_sm_proc_free>:
    if (proc != NULL) {
   26f4c:	b128      	cbz	r0, 26f5a <ble_sm_proc_free+0xe>
{
   26f4e:	b508      	push	{r3, lr}
   26f50:	4601      	mov	r1, r0
        rc = os_memblock_put(&ble_sm_proc_pool, proc);
   26f52:	4802      	ldr	r0, [pc, #8]	; (26f5c <ble_sm_proc_free+0x10>)
   26f54:	f7e6 fe82 	bl	dc5c <os_memblock_put>
}
   26f58:	bd08      	pop	{r3, pc}
   26f5a:	4770      	bx	lr
   26f5c:	20002dbc 	.word	0x20002dbc

00026f60 <ble_sm_proc_alloc>:
{
   26f60:	b510      	push	{r4, lr}
    proc = os_memblock_get(&ble_sm_proc_pool);
   26f62:	4806      	ldr	r0, [pc, #24]	; (26f7c <ble_sm_proc_alloc+0x1c>)
   26f64:	f7e6 fe52 	bl	dc0c <os_memblock_get>
    if (proc != NULL) {
   26f68:	4604      	mov	r4, r0
   26f6a:	b120      	cbz	r0, 26f76 <ble_sm_proc_alloc+0x16>
        memset(proc, 0, sizeof *proc);
   26f6c:	f44f 72c0 	mov.w	r2, #384	; 0x180
   26f70:	2100      	movs	r1, #0
   26f72:	f7e7 fd3d 	bl	e9f0 <memset>
}
   26f76:	4620      	mov	r0, r4
   26f78:	bd10      	pop	{r4, pc}
   26f7a:	bf00      	nop
   26f7c:	20002dbc 	.word	0x20002dbc

00026f80 <ble_sm_retrieve_ltk>:
{
   26f80:	b5f0      	push	{r4, r5, r6, r7, lr}
   26f82:	b089      	sub	sp, #36	; 0x24
   26f84:	4605      	mov	r5, r0
   26f86:	4616      	mov	r6, r2
   26f88:	461f      	mov	r7, r3
   26f8a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    memset(&key_sec, 0, sizeof key_sec);
   26f8c:	2220      	movs	r2, #32
   26f8e:	2100      	movs	r1, #0
   26f90:	4668      	mov	r0, sp
   26f92:	f7e7 fd2d 	bl	e9f0 <memset>
    key_sec.peer_addr.type = peer_addr_type;
   26f96:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   26f9a:	f88d 3000 	strb.w	r3, [sp]
    memcpy(key_sec.peer_addr.val, peer_addr, 6);
   26f9e:	6823      	ldr	r3, [r4, #0]
   26fa0:	f8cd 3001 	str.w	r3, [sp, #1]
   26fa4:	88a3      	ldrh	r3, [r4, #4]
   26fa6:	f8ad 3005 	strh.w	r3, [sp, #5]
    key_sec.ediv = ediv;
   26faa:	f8ad 5008 	strh.w	r5, [sp, #8]
    key_sec.rand_num = rand;
   26fae:	e9cd 6704 	strd	r6, r7, [sp, #16]
    key_sec.ediv_rand_present = 1;
   26fb2:	2301      	movs	r3, #1
   26fb4:	f88d 3018 	strb.w	r3, [sp, #24]
    rc = ble_store_read_our_sec(&key_sec, value_sec);
   26fb8:	9910      	ldr	r1, [sp, #64]	; 0x40
   26fba:	4668      	mov	r0, sp
   26fbc:	f001 fcfd 	bl	289ba <ble_store_read_our_sec>
}
   26fc0:	b009      	add	sp, #36	; 0x24
   26fc2:	bdf0      	pop	{r4, r5, r6, r7, pc}

00026fc4 <ble_sm_fail_rx>:
 *****************************************************************************/

static void
ble_sm_fail_rx(uint16_t conn_handle, struct os_mbuf **om,
               struct ble_sm_result *res)
{
   26fc4:	b538      	push	{r3, r4, r5, lr}
   26fc6:	460d      	mov	r5, r1
   26fc8:	4614      	mov	r4, r2
    struct ble_sm_pair_fail *cmd;

    res->enc_cb = 1;
   26fca:	7d13      	ldrb	r3, [r2, #20]
   26fcc:	f043 0302 	orr.w	r3, r3, #2
   26fd0:	7513      	strb	r3, [r2, #20]

    res->app_status = ble_hs_mbuf_pullup_base(om, sizeof(*cmd));
   26fd2:	2101      	movs	r1, #1
   26fd4:	4628      	mov	r0, r5
   26fd6:	f7fe fb3c 	bl	25652 <ble_hs_mbuf_pullup_base>
   26fda:	6020      	str	r0, [r4, #0]
    if (res->app_status == 0) {
   26fdc:	b930      	cbnz	r0, 26fec <ble_sm_fail_rx+0x28>
        cmd = (struct ble_sm_pair_fail *)(*om)->om_data;
   26fde:	682b      	ldr	r3, [r5, #0]
   26fe0:	681b      	ldr	r3, [r3, #0]

        res->app_status = BLE_HS_SM_PEER_ERR(cmd->reason);
   26fe2:	781b      	ldrb	r3, [r3, #0]
   26fe4:	b10b      	cbz	r3, 26fea <ble_sm_fail_rx+0x26>
   26fe6:	f503 60a0 	add.w	r0, r3, #1280	; 0x500
   26fea:	6020      	str	r0, [r4, #0]
    }
}
   26fec:	bd38      	pop	{r3, r4, r5, pc}

00026fee <ble_sm_read_bond>:
{
   26fee:	b510      	push	{r4, lr}
   26ff0:	b094      	sub	sp, #80	; 0x50
   26ff2:	460c      	mov	r4, r1
    rc = ble_gap_conn_find(conn_handle, &desc);
   26ff4:	a901      	add	r1, sp, #4
   26ff6:	f7f9 fd83 	bl	20b00 <ble_gap_conn_find>
    if (rc != 0) {
   26ffa:	4603      	mov	r3, r0
   26ffc:	b110      	cbz	r0, 27004 <ble_sm_read_bond+0x16>
}
   26ffe:	4618      	mov	r0, r3
   27000:	b014      	add	sp, #80	; 0x50
   27002:	bd10      	pop	{r4, pc}
    memset(&key_sec, 0, sizeof key_sec);
   27004:	2300      	movs	r3, #0
   27006:	f8cd 3036 	str.w	r3, [sp, #54]	; 0x36
   2700a:	f8cd 303a 	str.w	r3, [sp, #58]	; 0x3a
   2700e:	f8cd 303e 	str.w	r3, [sp, #62]	; 0x3e
   27012:	f8cd 3042 	str.w	r3, [sp, #66]	; 0x42
   27016:	f8cd 3046 	str.w	r3, [sp, #70]	; 0x46
   2701a:	f8cd 304a 	str.w	r3, [sp, #74]	; 0x4a
   2701e:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
    key_sec.peer_addr = desc.peer_id_addr;
   27022:	ab14      	add	r3, sp, #80	; 0x50
   27024:	f853 0d41 	ldr.w	r0, [r3, #-65]!
   27028:	900c      	str	r0, [sp, #48]	; 0x30
   2702a:	889a      	ldrh	r2, [r3, #4]
   2702c:	799b      	ldrb	r3, [r3, #6]
   2702e:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
   27032:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
    rc = ble_store_read_peer_sec(&key_sec, out_bond);
   27036:	4621      	mov	r1, r4
   27038:	a80c      	add	r0, sp, #48	; 0x30
   2703a:	f001 fccb 	bl	289d4 <ble_store_read_peer_sec>
   2703e:	4603      	mov	r3, r0
    return rc;
   27040:	e7dd      	b.n	26ffe <ble_sm_read_bond+0x10>

00027042 <ble_sm_chk_repeat_pairing>:
{
   27042:	b570      	push	{r4, r5, r6, lr}
   27044:	b096      	sub	sp, #88	; 0x58
   27046:	4604      	mov	r4, r0
   27048:	460d      	mov	r5, r1
   2704a:	4616      	mov	r6, r2
        rc = ble_sm_read_bond(conn_handle, &bond);
   2704c:	4669      	mov	r1, sp
   2704e:	4620      	mov	r0, r4
   27050:	f7ff ffcd 	bl	26fee <ble_sm_read_bond>
        switch (rc) {
   27054:	4603      	mov	r3, r0
   27056:	b128      	cbz	r0, 27064 <ble_sm_chk_repeat_pairing+0x22>
   27058:	2805      	cmp	r0, #5
   2705a:	d100      	bne.n	2705e <ble_sm_chk_repeat_pairing+0x1c>
            return 0;
   2705c:	2300      	movs	r3, #0
}
   2705e:	4618      	mov	r0, r3
   27060:	b016      	add	sp, #88	; 0x58
   27062:	bd70      	pop	{r4, r5, r6, pc}
        rp.conn_handle = conn_handle;
   27064:	f8ad 4050 	strh.w	r4, [sp, #80]	; 0x50
        rp.cur_key_size = bond.key_size;
   27068:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2706c:	f88d 3052 	strb.w	r3, [sp, #82]	; 0x52
        rp.cur_authenticated = bond.authenticated;
   27070:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
   27074:	f3c2 0140 	ubfx	r1, r2, #1, #1
   27078:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
   2707c:	f361 0300 	bfi	r3, r1, #0, #1
        rp.cur_sc = bond.sc;
   27080:	f3c2 0280 	ubfx	r2, r2, #2, #1
   27084:	f362 0341 	bfi	r3, r2, #1, #1
   27088:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
        rp.new_key_size = key_size;
   2708c:	f88d 6054 	strb.w	r6, [sp, #84]	; 0x54
        rp.new_authenticated = !!(proc_flags & BLE_SM_PROC_F_AUTHENTICATED);
   27090:	f3c5 02c0 	ubfx	r2, r5, #3, #1
   27094:	f89d 3055 	ldrb.w	r3, [sp, #85]	; 0x55
   27098:	f362 0300 	bfi	r3, r2, #0, #1
        rp.new_sc = !!(proc_flags & BLE_SM_PROC_F_SC);
   2709c:	f3c5 1200 	ubfx	r2, r5, #4, #1
   270a0:	f362 0341 	bfi	r3, r2, #1, #1
        rp.new_bonding = !!(proc_flags & BLE_SM_PROC_F_BONDING);
   270a4:	f3c5 1240 	ubfx	r2, r5, #5, #1
   270a8:	f362 0382 	bfi	r3, r2, #2, #1
   270ac:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
        rc = ble_gap_repeat_pairing_event(&rp);
   270b0:	a814      	add	r0, sp, #80	; 0x50
   270b2:	f7fa faad 	bl	21610 <ble_gap_repeat_pairing_event>
    } while (rc == BLE_GAP_REPEAT_PAIRING_RETRY);
   270b6:	2801      	cmp	r0, #1
   270b8:	d0c8      	beq.n	2704c <ble_sm_chk_repeat_pairing+0xa>
    return BLE_HS_EALREADY;
   270ba:	2302      	movs	r3, #2
   270bc:	e7cf      	b.n	2705e <ble_sm_chk_repeat_pairing+0x1c>
	...

000270c0 <ble_sm_num_procs>:
    STAILQ_FOREACH(proc, &ble_sm_procs, next) {
   270c0:	4b04      	ldr	r3, [pc, #16]	; (270d4 <ble_sm_num_procs+0x14>)
   270c2:	681b      	ldr	r3, [r3, #0]
    cnt = 0;
   270c4:	2000      	movs	r0, #0
    STAILQ_FOREACH(proc, &ble_sm_procs, next) {
   270c6:	e001      	b.n	270cc <ble_sm_num_procs+0xc>
        cnt++;
   270c8:	3001      	adds	r0, #1
    STAILQ_FOREACH(proc, &ble_sm_procs, next) {
   270ca:	681b      	ldr	r3, [r3, #0]
   270cc:	2b00      	cmp	r3, #0
   270ce:	d1fb      	bne.n	270c8 <ble_sm_num_procs+0x8>
}
   270d0:	4770      	bx	lr
   270d2:	bf00      	nop
   270d4:	20002dd8 	.word	0x20002dd8

000270d8 <ble_sm_chk_store_overflow_by_type>:
{
   270d8:	b570      	push	{r4, r5, r6, lr}
   270da:	b082      	sub	sp, #8
   270dc:	4605      	mov	r5, r0
   270de:	460e      	mov	r6, r1
    rc = ble_store_util_count(obj_type, &count);
   270e0:	a901      	add	r1, sp, #4
   270e2:	f001 fda5 	bl	28c30 <ble_store_util_count>
    if (rc != 0) {
   270e6:	4604      	mov	r4, r0
   270e8:	b110      	cbz	r0, 270f0 <ble_sm_chk_store_overflow_by_type+0x18>
}
   270ea:	4620      	mov	r0, r4
   270ec:	b002      	add	sp, #8
   270ee:	bd70      	pop	{r4, r5, r6, pc}
    ble_hs_lock();
   270f0:	f7fc fcc6 	bl	23a80 <ble_hs_lock>
    count += ble_sm_num_procs();
   270f4:	f7ff ffe4 	bl	270c0 <ble_sm_num_procs>
   270f8:	9b01      	ldr	r3, [sp, #4]
   270fa:	4418      	add	r0, r3
   270fc:	9001      	str	r0, [sp, #4]
    ble_hs_unlock();
   270fe:	f7fc fcc3 	bl	23a88 <ble_hs_unlock>
    if (count < MYNEWT_VAL(BLE_STORE_MAX_BONDS)) {
   27102:	9b01      	ldr	r3, [sp, #4]
   27104:	2b02      	cmp	r3, #2
   27106:	ddf0      	ble.n	270ea <ble_sm_chk_store_overflow_by_type+0x12>
    rc = ble_store_full_event(obj_type, conn_handle);
   27108:	4631      	mov	r1, r6
   2710a:	4628      	mov	r0, r5
   2710c:	f001 fc48 	bl	289a0 <ble_store_full_event>
   27110:	4604      	mov	r4, r0
   27112:	e7ea      	b.n	270ea <ble_sm_chk_store_overflow_by_type+0x12>

00027114 <ble_sm_chk_store_overflow>:
{
   27114:	b510      	push	{r4, lr}
   27116:	4604      	mov	r4, r0
    rc = ble_sm_chk_store_overflow_by_type(BLE_STORE_OBJ_TYPE_PEER_SEC,
   27118:	4601      	mov	r1, r0
   2711a:	2002      	movs	r0, #2
   2711c:	f7ff ffdc 	bl	270d8 <ble_sm_chk_store_overflow_by_type>
    if (rc != 0) {
   27120:	4603      	mov	r3, r0
   27122:	b108      	cbz	r0, 27128 <ble_sm_chk_store_overflow+0x14>
}
   27124:	4618      	mov	r0, r3
   27126:	bd10      	pop	{r4, pc}
    rc = ble_sm_chk_store_overflow_by_type(BLE_STORE_OBJ_TYPE_OUR_SEC,
   27128:	4621      	mov	r1, r4
   2712a:	2001      	movs	r0, #1
   2712c:	f7ff ffd4 	bl	270d8 <ble_sm_chk_store_overflow_by_type>
   27130:	4603      	mov	r3, r0
   27132:	e7f7      	b.n	27124 <ble_sm_chk_store_overflow+0x10>

00027134 <ble_sm_gen_pair_rand>:
{
   27134:	b508      	push	{r3, lr}
    rc = ble_hs_hci_util_rand(pair_rand, 16);
   27136:	2110      	movs	r1, #16
   27138:	f7fe f8fc 	bl	25334 <ble_hs_hci_util_rand>
}
   2713c:	bd08      	pop	{r3, pc}

0002713e <ble_sm_ia_ra>:
{
   2713e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27142:	b088      	sub	sp, #32
   27144:	4606      	mov	r6, r0
   27146:	4688      	mov	r8, r1
   27148:	4615      	mov	r5, r2
   2714a:	461f      	mov	r7, r3
   2714c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    conn = ble_hs_conn_find_assert(proc->conn_handle);
   2714e:	8940      	ldrh	r0, [r0, #10]
   27150:	f7fd fafe 	bl	24750 <ble_hs_conn_find_assert>
    ble_hs_conn_addrs(conn, &addrs);
   27154:	a901      	add	r1, sp, #4
   27156:	f7fd fb49 	bl	247ec <ble_hs_conn_addrs>
    if (proc->flags & BLE_SM_PROC_F_INITIATOR) {
   2715a:	7a33      	ldrb	r3, [r6, #8]
   2715c:	f013 0f01 	tst.w	r3, #1
   27160:	d115      	bne.n	2718e <ble_sm_ia_ra+0x50>
        *out_iat = addrs.peer_ota_addr.type;
   27162:	f89d 3019 	ldrb.w	r3, [sp, #25]
   27166:	f888 3000 	strb.w	r3, [r8]
        memcpy(out_ia, addrs.peer_ota_addr.val, 6);
   2716a:	ab08      	add	r3, sp, #32
   2716c:	f853 2d06 	ldr.w	r2, [r3, #-6]!
   27170:	602a      	str	r2, [r5, #0]
   27172:	889b      	ldrh	r3, [r3, #4]
   27174:	80ab      	strh	r3, [r5, #4]
        *out_rat = addrs.our_ota_addr.type;
   27176:	f89d 3012 	ldrb.w	r3, [sp, #18]
   2717a:	703b      	strb	r3, [r7, #0]
        memcpy(out_ra, addrs.our_ota_addr.val, 6);
   2717c:	ab08      	add	r3, sp, #32
   2717e:	f853 2d0d 	ldr.w	r2, [r3, #-13]!
   27182:	6022      	str	r2, [r4, #0]
   27184:	889b      	ldrh	r3, [r3, #4]
   27186:	80a3      	strh	r3, [r4, #4]
}
   27188:	b008      	add	sp, #32
   2718a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        *out_iat = addrs.our_ota_addr.type;
   2718e:	f89d 3012 	ldrb.w	r3, [sp, #18]
   27192:	f888 3000 	strb.w	r3, [r8]
        memcpy(out_ia, addrs.our_ota_addr.val, 6);
   27196:	ab08      	add	r3, sp, #32
   27198:	f853 2d0d 	ldr.w	r2, [r3, #-13]!
   2719c:	602a      	str	r2, [r5, #0]
   2719e:	889b      	ldrh	r3, [r3, #4]
   271a0:	80ab      	strh	r3, [r5, #4]
        *out_rat = addrs.peer_ota_addr.type;
   271a2:	f89d 3019 	ldrb.w	r3, [sp, #25]
   271a6:	703b      	strb	r3, [r7, #0]
        memcpy(out_ra, addrs.peer_ota_addr.val, 6);
   271a8:	ab08      	add	r3, sp, #32
   271aa:	f853 2d06 	ldr.w	r2, [r3, #-6]!
   271ae:	6022      	str	r2, [r4, #0]
   271b0:	889b      	ldrh	r3, [r3, #4]
   271b2:	80a3      	strh	r3, [r4, #4]
   271b4:	e7e8      	b.n	27188 <ble_sm_ia_ra+0x4a>
	...

000271b8 <ble_sm_proc_find>:
{
   271b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   271bc:	4607      	mov	r7, r0
   271be:	460e      	mov	r6, r1
   271c0:	4615      	mov	r5, r2
   271c2:	4699      	mov	r9, r3
    STAILQ_FOREACH(proc, &ble_sm_procs, next) {
   271c4:	4b0b      	ldr	r3, [pc, #44]	; (271f4 <ble_sm_proc_find+0x3c>)
   271c6:	681c      	ldr	r4, [r3, #0]
    prev = NULL;
   271c8:	f04f 0800 	mov.w	r8, #0
    STAILQ_FOREACH(proc, &ble_sm_procs, next) {
   271cc:	b174      	cbz	r4, 271ec <ble_sm_proc_find+0x34>
        if (ble_sm_proc_matches(proc, conn_handle, state, is_initiator)) {
   271ce:	462b      	mov	r3, r5
   271d0:	4632      	mov	r2, r6
   271d2:	4639      	mov	r1, r7
   271d4:	4620      	mov	r0, r4
   271d6:	f7ff f9c3 	bl	26560 <ble_sm_proc_matches>
   271da:	b910      	cbnz	r0, 271e2 <ble_sm_proc_find+0x2a>
        prev = proc;
   271dc:	46a0      	mov	r8, r4
    STAILQ_FOREACH(proc, &ble_sm_procs, next) {
   271de:	6824      	ldr	r4, [r4, #0]
   271e0:	e7f4      	b.n	271cc <ble_sm_proc_find+0x14>
            if (out_prev != NULL) {
   271e2:	f1b9 0f00 	cmp.w	r9, #0
   271e6:	d001      	beq.n	271ec <ble_sm_proc_find+0x34>
                *out_prev = prev;
   271e8:	f8c9 8000 	str.w	r8, [r9]
}
   271ec:	4620      	mov	r0, r4
   271ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   271f2:	bf00      	nop
   271f4:	20002dd8 	.word	0x20002dd8

000271f8 <ble_sm_sign_info_rx>:
{
   271f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   271fa:	4606      	mov	r6, r0
   271fc:	460d      	mov	r5, r1
   271fe:	4614      	mov	r4, r2
    res->app_status = ble_hs_mbuf_pullup_base(om, sizeof(*cmd));
   27200:	2110      	movs	r1, #16
   27202:	4628      	mov	r0, r5
   27204:	f7fe fa25 	bl	25652 <ble_hs_mbuf_pullup_base>
   27208:	6020      	str	r0, [r4, #0]
    if (res->app_status != 0) {
   2720a:	b130      	cbz	r0, 2721a <ble_sm_sign_info_rx+0x22>
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   2720c:	2308      	movs	r3, #8
   2720e:	7123      	strb	r3, [r4, #4]
        res->enc_cb = 1;
   27210:	7d23      	ldrb	r3, [r4, #20]
   27212:	f043 0302 	orr.w	r3, r3, #2
   27216:	7523      	strb	r3, [r4, #20]
}
   27218:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cmd = (struct ble_sm_sign_info *)(*om)->om_data;
   2721a:	682b      	ldr	r3, [r5, #0]
   2721c:	681d      	ldr	r5, [r3, #0]
    ble_hs_lock();
   2721e:	f7fc fc2f 	bl	23a80 <ble_hs_lock>
    proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_KEY_EXCH, -1, NULL);
   27222:	2300      	movs	r3, #0
   27224:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   27228:	2107      	movs	r1, #7
   2722a:	4630      	mov	r0, r6
   2722c:	f7ff ffc4 	bl	271b8 <ble_sm_proc_find>
    if (proc == NULL) {
   27230:	4603      	mov	r3, r0
   27232:	b1e0      	cbz	r0, 2726e <ble_sm_sign_info_rx+0x76>
        proc->rx_key_flags &= ~BLE_SM_KE_F_SIGN_INFO;
   27234:	7b82      	ldrb	r2, [r0, #14]
   27236:	f022 0210 	bic.w	r2, r2, #16
   2723a:	7382      	strb	r2, [r0, #14]
        memcpy(proc->peer_keys.csrk, cmd->sig_key, 16);
   2723c:	682f      	ldr	r7, [r5, #0]
   2723e:	686e      	ldr	r6, [r5, #4]
   27240:	68a8      	ldr	r0, [r5, #8]
   27242:	68e9      	ldr	r1, [r5, #12]
   27244:	f8c3 70ea 	str.w	r7, [r3, #234]	; 0xea
   27248:	f8c3 60ee 	str.w	r6, [r3, #238]	; 0xee
   2724c:	f8c3 00f2 	str.w	r0, [r3, #242]	; 0xf2
   27250:	f8c3 10f6 	str.w	r1, [r3, #246]	; 0xf6
        proc->peer_keys.csrk_valid = 1;
   27254:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
   27258:	f042 0208 	orr.w	r2, r2, #8
   2725c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
        ble_sm_key_rxed(proc, res);
   27260:	4621      	mov	r1, r4
   27262:	4618      	mov	r0, r3
   27264:	f7ff fcc0 	bl	26be8 <ble_sm_key_rxed>
    ble_hs_unlock();
   27268:	f7fc fc0e 	bl	23a88 <ble_hs_unlock>
   2726c:	e7d4      	b.n	27218 <ble_sm_sign_info_rx+0x20>
        res->app_status = BLE_HS_ENOENT;
   2726e:	2305      	movs	r3, #5
   27270:	6023      	str	r3, [r4, #0]
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   27272:	2308      	movs	r3, #8
   27274:	7123      	strb	r3, [r4, #4]
   27276:	e7f7      	b.n	27268 <ble_sm_sign_info_rx+0x70>

00027278 <ble_sm_id_addr_info_rx>:
{
   27278:	b570      	push	{r4, r5, r6, lr}
   2727a:	4606      	mov	r6, r0
   2727c:	460d      	mov	r5, r1
   2727e:	4614      	mov	r4, r2
    res->app_status = ble_hs_mbuf_pullup_base(om, sizeof(*cmd));
   27280:	2107      	movs	r1, #7
   27282:	4628      	mov	r0, r5
   27284:	f7fe f9e5 	bl	25652 <ble_hs_mbuf_pullup_base>
   27288:	6020      	str	r0, [r4, #0]
    if (res->app_status != 0) {
   2728a:	b130      	cbz	r0, 2729a <ble_sm_id_addr_info_rx+0x22>
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   2728c:	2308      	movs	r3, #8
   2728e:	7123      	strb	r3, [r4, #4]
        res->enc_cb = 1;
   27290:	7d23      	ldrb	r3, [r4, #20]
   27292:	f043 0302 	orr.w	r3, r3, #2
   27296:	7523      	strb	r3, [r4, #20]
}
   27298:	bd70      	pop	{r4, r5, r6, pc}
    cmd = (struct ble_sm_id_addr_info *)(*om)->om_data;
   2729a:	682b      	ldr	r3, [r5, #0]
   2729c:	681d      	ldr	r5, [r3, #0]
    ble_hs_lock();
   2729e:	f7fc fbef 	bl	23a80 <ble_hs_lock>
    proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_KEY_EXCH, -1, NULL);
   272a2:	2300      	movs	r3, #0
   272a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   272a8:	2107      	movs	r1, #7
   272aa:	4630      	mov	r0, r6
   272ac:	f7ff ff84 	bl	271b8 <ble_sm_proc_find>
    if (proc == NULL) {
   272b0:	b1d0      	cbz	r0, 272e8 <ble_sm_id_addr_info_rx+0x70>
        proc->rx_key_flags &= ~BLE_SM_KE_F_ADDR_INFO;
   272b2:	7b82      	ldrb	r2, [r0, #14]
   272b4:	f022 0208 	bic.w	r2, r2, #8
   272b8:	7382      	strb	r2, [r0, #14]
        proc->peer_keys.addr_valid = 1;
   272ba:	f890 20b8 	ldrb.w	r2, [r0, #184]	; 0xb8
   272be:	f042 0210 	orr.w	r2, r2, #16
   272c2:	f880 20b8 	strb.w	r2, [r0, #184]	; 0xb8
        proc->peer_keys.addr_type = cmd->addr_type;
   272c6:	782a      	ldrb	r2, [r5, #0]
   272c8:	f880 20c8 	strb.w	r2, [r0, #200]	; 0xc8
        memcpy(proc->peer_keys.addr, cmd->bd_addr, 6);
   272cc:	462a      	mov	r2, r5
   272ce:	f852 1f01 	ldr.w	r1, [r2, #1]!
   272d2:	f8c0 10fa 	str.w	r1, [r0, #250]	; 0xfa
   272d6:	8892      	ldrh	r2, [r2, #4]
   272d8:	f8a0 20fe 	strh.w	r2, [r0, #254]	; 0xfe
        ble_sm_key_rxed(proc, res);
   272dc:	4621      	mov	r1, r4
   272de:	f7ff fc83 	bl	26be8 <ble_sm_key_rxed>
    ble_hs_unlock();
   272e2:	f7fc fbd1 	bl	23a88 <ble_hs_unlock>
   272e6:	e7d7      	b.n	27298 <ble_sm_id_addr_info_rx+0x20>
        res->app_status = BLE_HS_ENOENT;
   272e8:	2305      	movs	r3, #5
   272ea:	6023      	str	r3, [r4, #0]
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   272ec:	2308      	movs	r3, #8
   272ee:	7123      	strb	r3, [r4, #4]
   272f0:	e7f7      	b.n	272e2 <ble_sm_id_addr_info_rx+0x6a>

000272f2 <ble_sm_id_info_rx>:
{
   272f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   272f4:	4606      	mov	r6, r0
   272f6:	460d      	mov	r5, r1
   272f8:	4614      	mov	r4, r2
    res->app_status = ble_hs_mbuf_pullup_base(om, sizeof(*cmd));
   272fa:	2110      	movs	r1, #16
   272fc:	4628      	mov	r0, r5
   272fe:	f7fe f9a8 	bl	25652 <ble_hs_mbuf_pullup_base>
   27302:	6020      	str	r0, [r4, #0]
    if (res->app_status != 0) {
   27304:	b130      	cbz	r0, 27314 <ble_sm_id_info_rx+0x22>
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   27306:	2308      	movs	r3, #8
   27308:	7123      	strb	r3, [r4, #4]
        res->enc_cb = 1;
   2730a:	7d23      	ldrb	r3, [r4, #20]
   2730c:	f043 0302 	orr.w	r3, r3, #2
   27310:	7523      	strb	r3, [r4, #20]
}
   27312:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cmd = (struct ble_sm_id_info *)(*om)->om_data;
   27314:	682b      	ldr	r3, [r5, #0]
   27316:	681d      	ldr	r5, [r3, #0]
    ble_hs_lock();
   27318:	f7fc fbb2 	bl	23a80 <ble_hs_lock>
    proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_KEY_EXCH, -1, NULL);
   2731c:	2300      	movs	r3, #0
   2731e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   27322:	2107      	movs	r1, #7
   27324:	4630      	mov	r0, r6
   27326:	f7ff ff47 	bl	271b8 <ble_sm_proc_find>
    if (proc == NULL) {
   2732a:	4603      	mov	r3, r0
   2732c:	b1e0      	cbz	r0, 27368 <ble_sm_id_info_rx+0x76>
        proc->rx_key_flags &= ~BLE_SM_KE_F_ID_INFO;
   2732e:	7b82      	ldrb	r2, [r0, #14]
   27330:	f022 0204 	bic.w	r2, r2, #4
   27334:	7382      	strb	r2, [r0, #14]
        memcpy(proc->peer_keys.irk, cmd->irk, 16);
   27336:	682f      	ldr	r7, [r5, #0]
   27338:	686e      	ldr	r6, [r5, #4]
   2733a:	68a8      	ldr	r0, [r5, #8]
   2733c:	68e9      	ldr	r1, [r5, #12]
   2733e:	f8c3 70da 	str.w	r7, [r3, #218]	; 0xda
   27342:	f8c3 60de 	str.w	r6, [r3, #222]	; 0xde
   27346:	f8c3 00e2 	str.w	r0, [r3, #226]	; 0xe2
   2734a:	f8c3 10e6 	str.w	r1, [r3, #230]	; 0xe6
        proc->peer_keys.irk_valid = 1;
   2734e:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
   27352:	f042 0204 	orr.w	r2, r2, #4
   27356:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
        ble_sm_key_rxed(proc, res);
   2735a:	4621      	mov	r1, r4
   2735c:	4618      	mov	r0, r3
   2735e:	f7ff fc43 	bl	26be8 <ble_sm_key_rxed>
    ble_hs_unlock();
   27362:	f7fc fb91 	bl	23a88 <ble_hs_unlock>
   27366:	e7d4      	b.n	27312 <ble_sm_id_info_rx+0x20>
        res->app_status = BLE_HS_ENOENT;
   27368:	2305      	movs	r3, #5
   2736a:	6023      	str	r3, [r4, #0]
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   2736c:	2308      	movs	r3, #8
   2736e:	7123      	strb	r3, [r4, #4]
   27370:	e7f7      	b.n	27362 <ble_sm_id_info_rx+0x70>

00027372 <ble_sm_master_id_rx>:
{
   27372:	b570      	push	{r4, r5, r6, lr}
   27374:	4606      	mov	r6, r0
   27376:	460d      	mov	r5, r1
   27378:	4614      	mov	r4, r2
    res->app_status = ble_hs_mbuf_pullup_base(om, sizeof(*cmd));
   2737a:	210a      	movs	r1, #10
   2737c:	4628      	mov	r0, r5
   2737e:	f7fe f968 	bl	25652 <ble_hs_mbuf_pullup_base>
   27382:	6020      	str	r0, [r4, #0]
    if (res->app_status != 0) {
   27384:	b130      	cbz	r0, 27394 <ble_sm_master_id_rx+0x22>
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   27386:	2308      	movs	r3, #8
   27388:	7123      	strb	r3, [r4, #4]
        res->enc_cb = 1;
   2738a:	7d23      	ldrb	r3, [r4, #20]
   2738c:	f043 0302 	orr.w	r3, r3, #2
   27390:	7523      	strb	r3, [r4, #20]
}
   27392:	bd70      	pop	{r4, r5, r6, pc}
    cmd = (struct ble_sm_master_id *)(*om)->om_data;
   27394:	682b      	ldr	r3, [r5, #0]
   27396:	681d      	ldr	r5, [r3, #0]
    ble_hs_lock();
   27398:	f7fc fb72 	bl	23a80 <ble_hs_lock>
    proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_KEY_EXCH, -1, NULL);
   2739c:	2300      	movs	r3, #0
   2739e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   273a2:	2107      	movs	r1, #7
   273a4:	4630      	mov	r0, r6
   273a6:	f7ff ff07 	bl	271b8 <ble_sm_proc_find>
    if (proc == NULL) {
   273aa:	b1d0      	cbz	r0, 273e2 <ble_sm_master_id_rx+0x70>
        proc->rx_key_flags &= ~BLE_SM_KE_F_MASTER_ID;
   273ac:	7b82      	ldrb	r2, [r0, #14]
   273ae:	f022 0202 	bic.w	r2, r2, #2
   273b2:	7382      	strb	r2, [r0, #14]
        proc->peer_keys.ediv_rand_valid = 1;
   273b4:	f890 20b8 	ldrb.w	r2, [r0, #184]	; 0xb8
   273b8:	f042 0202 	orr.w	r2, r2, #2
   273bc:	f880 20b8 	strb.w	r2, [r0, #184]	; 0xb8
        proc->peer_keys.ediv = le16toh(cmd->ediv);
   273c0:	882a      	ldrh	r2, [r5, #0]
   273c2:	f8a0 20ba 	strh.w	r2, [r0, #186]	; 0xba
        proc->peer_keys.rand_val = le64toh(cmd->rand_val);
   273c6:	f8d5 1002 	ldr.w	r1, [r5, #2]
   273ca:	f8d5 2006 	ldr.w	r2, [r5, #6]
   273ce:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
   273d2:	f8c0 20c4 	str.w	r2, [r0, #196]	; 0xc4
        ble_sm_key_rxed(proc, res);
   273d6:	4621      	mov	r1, r4
   273d8:	f7ff fc06 	bl	26be8 <ble_sm_key_rxed>
    ble_hs_unlock();
   273dc:	f7fc fb54 	bl	23a88 <ble_hs_unlock>
   273e0:	e7d7      	b.n	27392 <ble_sm_master_id_rx+0x20>
        res->app_status = BLE_HS_ENOENT;
   273e2:	2305      	movs	r3, #5
   273e4:	6023      	str	r3, [r4, #0]
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   273e6:	2308      	movs	r3, #8
   273e8:	7123      	strb	r3, [r4, #4]
   273ea:	e7f7      	b.n	273dc <ble_sm_master_id_rx+0x6a>

000273ec <ble_sm_enc_info_rx>:
{
   273ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   273ee:	4606      	mov	r6, r0
   273f0:	460d      	mov	r5, r1
   273f2:	4614      	mov	r4, r2
    res->app_status = ble_hs_mbuf_pullup_base(om, sizeof(*cmd));
   273f4:	2110      	movs	r1, #16
   273f6:	4628      	mov	r0, r5
   273f8:	f7fe f92b 	bl	25652 <ble_hs_mbuf_pullup_base>
   273fc:	6020      	str	r0, [r4, #0]
    if (res->app_status != 0) {
   273fe:	b130      	cbz	r0, 2740e <ble_sm_enc_info_rx+0x22>
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   27400:	2308      	movs	r3, #8
   27402:	7123      	strb	r3, [r4, #4]
        res->enc_cb = 1;
   27404:	7d23      	ldrb	r3, [r4, #20]
   27406:	f043 0302 	orr.w	r3, r3, #2
   2740a:	7523      	strb	r3, [r4, #20]
}
   2740c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cmd = (struct ble_sm_enc_info *)(*om)->om_data;
   2740e:	682b      	ldr	r3, [r5, #0]
   27410:	681d      	ldr	r5, [r3, #0]
    ble_hs_lock();
   27412:	f7fc fb35 	bl	23a80 <ble_hs_lock>
    proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_KEY_EXCH, -1, NULL);
   27416:	2300      	movs	r3, #0
   27418:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2741c:	2107      	movs	r1, #7
   2741e:	4630      	mov	r0, r6
   27420:	f7ff feca 	bl	271b8 <ble_sm_proc_find>
    if (proc == NULL) {
   27424:	4603      	mov	r3, r0
   27426:	b1f8      	cbz	r0, 27468 <ble_sm_enc_info_rx+0x7c>
        proc->rx_key_flags &= ~BLE_SM_KE_F_ENC_INFO;
   27428:	7b82      	ldrb	r2, [r0, #14]
   2742a:	f022 0201 	bic.w	r2, r2, #1
   2742e:	7382      	strb	r2, [r0, #14]
        proc->peer_keys.ltk_valid = 1;
   27430:	f890 20b8 	ldrb.w	r2, [r0, #184]	; 0xb8
   27434:	f042 0201 	orr.w	r2, r2, #1
   27438:	f880 20b8 	strb.w	r2, [r0, #184]	; 0xb8
        memcpy(proc->peer_keys.ltk, cmd->ltk, 16);
   2743c:	682f      	ldr	r7, [r5, #0]
   2743e:	686e      	ldr	r6, [r5, #4]
   27440:	68a8      	ldr	r0, [r5, #8]
   27442:	68e9      	ldr	r1, [r5, #12]
   27444:	f8c3 70ca 	str.w	r7, [r3, #202]	; 0xca
   27448:	f8c3 60ce 	str.w	r6, [r3, #206]	; 0xce
   2744c:	f8c3 00d2 	str.w	r0, [r3, #210]	; 0xd2
   27450:	f8c3 10d6 	str.w	r1, [r3, #214]	; 0xd6
        proc->peer_keys.key_size = proc->key_size;
   27454:	7bda      	ldrb	r2, [r3, #15]
   27456:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
        ble_sm_key_rxed(proc, res);
   2745a:	4621      	mov	r1, r4
   2745c:	4618      	mov	r0, r3
   2745e:	f7ff fbc3 	bl	26be8 <ble_sm_key_rxed>
    ble_hs_unlock();
   27462:	f7fc fb11 	bl	23a88 <ble_hs_unlock>
   27466:	e7d1      	b.n	2740c <ble_sm_enc_info_rx+0x20>
        res->app_status = BLE_HS_ENOENT;
   27468:	2305      	movs	r3, #5
   2746a:	6023      	str	r3, [r4, #0]
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   2746c:	2308      	movs	r3, #8
   2746e:	7123      	strb	r3, [r4, #4]
   27470:	e7f7      	b.n	27462 <ble_sm_enc_info_rx+0x76>

00027472 <ble_sm_pair_req_rx>:
{
   27472:	b5f0      	push	{r4, r5, r6, r7, lr}
   27474:	b083      	sub	sp, #12
   27476:	4606      	mov	r6, r0
   27478:	460d      	mov	r5, r1
   2747a:	4614      	mov	r4, r2
    res->app_status = ble_hs_mbuf_pullup_base(om, sizeof(*req));
   2747c:	2106      	movs	r1, #6
   2747e:	4628      	mov	r0, r5
   27480:	f7fe f8e7 	bl	25652 <ble_hs_mbuf_pullup_base>
   27484:	6020      	str	r0, [r4, #0]
    if (res->app_status != 0) {
   27486:	b108      	cbz	r0, 2748c <ble_sm_pair_req_rx+0x1a>
}
   27488:	b003      	add	sp, #12
   2748a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    req = (struct ble_sm_pair_cmd *)(*om)->om_data;
   2748c:	682b      	ldr	r3, [r5, #0]
   2748e:	681f      	ldr	r7, [r3, #0]
    ble_hs_lock();
   27490:	f7fc faf6 	bl	23a80 <ble_hs_lock>
    proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_NONE, -1, &prev);
   27494:	ab01      	add	r3, sp, #4
   27496:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2749a:	21ff      	movs	r1, #255	; 0xff
   2749c:	4630      	mov	r0, r6
   2749e:	f7ff fe8b 	bl	271b8 <ble_sm_proc_find>
    if (proc != NULL) {
   274a2:	4605      	mov	r5, r0
   274a4:	b180      	cbz	r0, 274c8 <ble_sm_pair_req_rx+0x56>
        if (proc->state != BLE_SM_PROC_STATE_SEC_REQ) {
   274a6:	7b43      	ldrb	r3, [r0, #13]
   274a8:	2b08      	cmp	r3, #8
   274aa:	d007      	beq.n	274bc <ble_sm_pair_req_rx+0x4a>
            res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   274ac:	2308      	movs	r3, #8
   274ae:	7123      	strb	r3, [r4, #4]
            res->app_status = BLE_HS_SM_US_ERR(BLE_SM_ERR_UNSPECIFIED);
   274b0:	f44f 6381 	mov.w	r3, #1032	; 0x408
   274b4:	6023      	str	r3, [r4, #0]
            ble_hs_unlock();
   274b6:	f7fc fae7 	bl	23a88 <ble_hs_unlock>
            return;
   274ba:	e7e5      	b.n	27488 <ble_sm_pair_req_rx+0x16>
        ble_sm_proc_remove(proc, prev);
   274bc:	9901      	ldr	r1, [sp, #4]
   274be:	f7ff f83b 	bl	26538 <ble_sm_proc_remove>
        ble_sm_proc_free(proc);
   274c2:	4628      	mov	r0, r5
   274c4:	f7ff fd42 	bl	26f4c <ble_sm_proc_free>
    ble_hs_unlock();
   274c8:	f7fc fade 	bl	23a88 <ble_hs_unlock>
    rc = ble_sm_chk_store_overflow(conn_handle);
   274cc:	4630      	mov	r0, r6
   274ce:	f7ff fe21 	bl	27114 <ble_sm_chk_store_overflow>
    if (rc != 0) {
   274d2:	b118      	cbz	r0, 274dc <ble_sm_pair_req_rx+0x6a>
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   274d4:	2208      	movs	r2, #8
   274d6:	7122      	strb	r2, [r4, #4]
        res->app_status = rc;
   274d8:	6020      	str	r0, [r4, #0]
        return;
   274da:	e7d5      	b.n	27488 <ble_sm_pair_req_rx+0x16>
    ble_hs_lock();
   274dc:	f7fc fad0 	bl	23a80 <ble_hs_lock>
    proc = ble_sm_proc_alloc();
   274e0:	f7ff fd3e 	bl	26f60 <ble_sm_proc_alloc>
    if (proc != NULL) {
   274e4:	4605      	mov	r5, r0
   274e6:	2800      	cmp	r0, #0
   274e8:	d04a      	beq.n	27580 <ble_sm_pair_req_rx+0x10e>
        proc->conn_handle = conn_handle;
   274ea:	8146      	strh	r6, [r0, #10]
        proc->state = BLE_SM_PROC_STATE_PAIR;
   274ec:	2300      	movs	r3, #0
   274ee:	7343      	strb	r3, [r0, #13]
        ble_sm_insert(proc);
   274f0:	f7ff f852 	bl	26598 <ble_sm_insert>
        proc->pair_req[0] = BLE_SM_OP_PAIR_REQ;
   274f4:	2301      	movs	r3, #1
   274f6:	742b      	strb	r3, [r5, #16]
        memcpy(proc->pair_req + 1, req, sizeof(*req));
   274f8:	683b      	ldr	r3, [r7, #0]
   274fa:	f8c5 3011 	str.w	r3, [r5, #17]
   274fe:	88bb      	ldrh	r3, [r7, #4]
   27500:	f8a5 3015 	strh.w	r3, [r5, #21]
        conn = ble_hs_conn_find_assert(proc->conn_handle);
   27504:	8968      	ldrh	r0, [r5, #10]
   27506:	f7fd f923 	bl	24750 <ble_hs_conn_find_assert>
        if (conn->bhc_flags & BLE_HS_CONN_F_MASTER) {
   2750a:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   2750e:	f013 0f01 	tst.w	r3, #1
   27512:	d007      	beq.n	27524 <ble_sm_pair_req_rx+0xb2>
            res->sm_err = BLE_SM_ERR_CMD_NOT_SUPP;
   27514:	2307      	movs	r3, #7
   27516:	7123      	strb	r3, [r4, #4]
            res->app_status = BLE_HS_SM_US_ERR(BLE_SM_ERR_CMD_NOT_SUPP);
   27518:	f240 4307 	movw	r3, #1031	; 0x407
   2751c:	6023      	str	r3, [r4, #0]
    key_size = 0;
   2751e:	2500      	movs	r5, #0
    proc_flags = 0;
   27520:	462f      	mov	r7, r5
   27522:	e02f      	b.n	27584 <ble_sm_pair_req_rx+0x112>
        } else if (req->max_enc_key_size < BLE_SM_PAIR_KEY_SZ_MIN) {
   27524:	78fb      	ldrb	r3, [r7, #3]
   27526:	2b06      	cmp	r3, #6
   27528:	d807      	bhi.n	2753a <ble_sm_pair_req_rx+0xc8>
            res->sm_err = BLE_SM_ERR_ENC_KEY_SZ;
   2752a:	2306      	movs	r3, #6
   2752c:	7123      	strb	r3, [r4, #4]
            res->app_status = BLE_HS_SM_US_ERR(BLE_SM_ERR_ENC_KEY_SZ);
   2752e:	f240 4306 	movw	r3, #1030	; 0x406
   27532:	6023      	str	r3, [r4, #0]
    key_size = 0;
   27534:	2500      	movs	r5, #0
    proc_flags = 0;
   27536:	462f      	mov	r7, r5
   27538:	e024      	b.n	27584 <ble_sm_pair_req_rx+0x112>
        } else if (req->max_enc_key_size > BLE_SM_PAIR_KEY_SZ_MAX) {
   2753a:	2b10      	cmp	r3, #16
   2753c:	d907      	bls.n	2754e <ble_sm_pair_req_rx+0xdc>
            res->sm_err = BLE_SM_ERR_INVAL;
   2753e:	230a      	movs	r3, #10
   27540:	7123      	strb	r3, [r4, #4]
            res->app_status = BLE_HS_SM_US_ERR(BLE_SM_ERR_INVAL);
   27542:	f240 430a 	movw	r3, #1034	; 0x40a
   27546:	6023      	str	r3, [r4, #0]
    key_size = 0;
   27548:	2500      	movs	r5, #0
    proc_flags = 0;
   2754a:	462f      	mov	r7, r5
   2754c:	e01a      	b.n	27584 <ble_sm_pair_req_rx+0x112>
        } else if (!ble_sm_verify_auth_requirements(req->authreq)) {
   2754e:	78b8      	ldrb	r0, [r7, #2]
   27550:	f7ff f898 	bl	26684 <ble_sm_verify_auth_requirements>
   27554:	b938      	cbnz	r0, 27566 <ble_sm_pair_req_rx+0xf4>
            res->sm_err = BLE_SM_ERR_AUTHREQ;
   27556:	2303      	movs	r3, #3
   27558:	7123      	strb	r3, [r4, #4]
            res->app_status = BLE_HS_SM_US_ERR(BLE_SM_ERR_AUTHREQ);
   2755a:	f240 4303 	movw	r3, #1027	; 0x403
   2755e:	6023      	str	r3, [r4, #0]
    key_size = 0;
   27560:	2500      	movs	r5, #0
    proc_flags = 0;
   27562:	462f      	mov	r7, r5
   27564:	e00e      	b.n	27584 <ble_sm_pair_req_rx+0x112>
            ble_sm_pair_rsp_fill(proc);
   27566:	4628      	mov	r0, r5
   27568:	f7ff f878 	bl	2665c <ble_sm_pair_rsp_fill>
            ble_sm_pair_cfg(proc);
   2756c:	4628      	mov	r0, r5
   2756e:	f7ff f8ab 	bl	266c8 <ble_sm_pair_cfg>
            proc_flags = proc->flags;
   27572:	7a2f      	ldrb	r7, [r5, #8]
            key_size = proc->key_size;
   27574:	7bed      	ldrb	r5, [r5, #15]
            res->execute = 1;
   27576:	7d23      	ldrb	r3, [r4, #20]
   27578:	f043 0301 	orr.w	r3, r3, #1
   2757c:	7523      	strb	r3, [r4, #20]
   2757e:	e001      	b.n	27584 <ble_sm_pair_req_rx+0x112>
    key_size = 0;
   27580:	2500      	movs	r5, #0
    proc_flags = 0;
   27582:	462f      	mov	r7, r5
    ble_hs_unlock();
   27584:	f7fc fa80 	bl	23a88 <ble_hs_unlock>
    if (res->app_status == 0) {
   27588:	6823      	ldr	r3, [r4, #0]
   2758a:	2b00      	cmp	r3, #0
   2758c:	f47f af7c 	bne.w	27488 <ble_sm_pair_req_rx+0x16>
        rc = ble_sm_chk_repeat_pairing(conn_handle, proc_flags, key_size);
   27590:	462a      	mov	r2, r5
   27592:	4639      	mov	r1, r7
   27594:	4630      	mov	r0, r6
   27596:	f7ff fd54 	bl	27042 <ble_sm_chk_repeat_pairing>
        if (rc != 0) {
   2759a:	2800      	cmp	r0, #0
   2759c:	f43f af74 	beq.w	27488 <ble_sm_pair_req_rx+0x16>
            res->app_status = rc;
   275a0:	6020      	str	r0, [r4, #0]
            res->execute = 0;
   275a2:	7d23      	ldrb	r3, [r4, #20]
   275a4:	f36f 0300 	bfc	r3, #0, #1
   275a8:	7523      	strb	r3, [r4, #20]
   275aa:	e76d      	b.n	27488 <ble_sm_pair_req_rx+0x16>

000275ac <ble_sm_ioact_state>:
    switch (action) {
   275ac:	3801      	subs	r0, #1
   275ae:	2804      	cmp	r0, #4
   275b0:	d804      	bhi.n	275bc <ble_sm_ioact_state+0x10>
   275b2:	e8df f000 	tbb	[pc, r0]
   275b6:	0707      	.short	0x0707
   275b8:	0907      	.short	0x0907
   275ba:	05          	.byte	0x05
   275bb:	00          	.byte	0x00
        return BLE_SM_PROC_STATE_NONE;
   275bc:	20ff      	movs	r0, #255	; 0xff
   275be:	4770      	bx	lr
        return BLE_SM_PROC_STATE_RANDOM;
   275c0:	2002      	movs	r0, #2
   275c2:	4770      	bx	lr
        return BLE_SM_PROC_STATE_CONFIRM;
   275c4:	2001      	movs	r0, #1
   275c6:	4770      	bx	lr
        return BLE_SM_PROC_STATE_DHKEY_CHECK;
   275c8:	200a      	movs	r0, #10
}
   275ca:	4770      	bx	lr

000275cc <ble_sm_proc_can_advance>:
{
   275cc:	b510      	push	{r4, lr}
   275ce:	b082      	sub	sp, #8
   275d0:	4604      	mov	r4, r0
    rc = ble_sm_io_action(proc, &ioact);
   275d2:	f10d 0107 	add.w	r1, sp, #7
   275d6:	f7ff f86d 	bl	266b4 <ble_sm_io_action>
    if (ble_sm_ioact_state(ioact) != proc->state) {
   275da:	f89d 0007 	ldrb.w	r0, [sp, #7]
   275de:	f7ff ffe5 	bl	275ac <ble_sm_ioact_state>
   275e2:	7b63      	ldrb	r3, [r4, #13]
   275e4:	4298      	cmp	r0, r3
   275e6:	d002      	beq.n	275ee <ble_sm_proc_can_advance+0x22>
        return 1;
   275e8:	2001      	movs	r0, #1
}
   275ea:	b002      	add	sp, #8
   275ec:	bd10      	pop	{r4, pc}
    if (proc->flags & BLE_SM_PROC_F_IO_INJECTED &&
   275ee:	7a23      	ldrb	r3, [r4, #8]
   275f0:	f003 0306 	and.w	r3, r3, #6
   275f4:	2b06      	cmp	r3, #6
   275f6:	d001      	beq.n	275fc <ble_sm_proc_can_advance+0x30>
    return 0;
   275f8:	2000      	movs	r0, #0
   275fa:	e7f6      	b.n	275ea <ble_sm_proc_can_advance+0x1e>
        return 1;
   275fc:	2001      	movs	r0, #1
   275fe:	e7f4      	b.n	275ea <ble_sm_proc_can_advance+0x1e>

00027600 <ble_sm_confirm_rx>:
{
   27600:	b5f0      	push	{r4, r5, r6, r7, lr}
   27602:	b083      	sub	sp, #12
   27604:	4606      	mov	r6, r0
   27606:	460d      	mov	r5, r1
   27608:	4614      	mov	r4, r2
    res->app_status = ble_hs_mbuf_pullup_base(om, sizeof(*cmd));
   2760a:	2110      	movs	r1, #16
   2760c:	4628      	mov	r0, r5
   2760e:	f7fe f820 	bl	25652 <ble_hs_mbuf_pullup_base>
   27612:	6020      	str	r0, [r4, #0]
    if (res->app_status != 0) {
   27614:	b138      	cbz	r0, 27626 <ble_sm_confirm_rx+0x26>
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   27616:	2308      	movs	r3, #8
   27618:	7123      	strb	r3, [r4, #4]
        res->enc_cb = 1;
   2761a:	7d23      	ldrb	r3, [r4, #20]
   2761c:	f043 0302 	orr.w	r3, r3, #2
   27620:	7523      	strb	r3, [r4, #20]
}
   27622:	b003      	add	sp, #12
   27624:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cmd = (struct ble_sm_pair_confirm *)(*om)->om_data;
   27626:	682b      	ldr	r3, [r5, #0]
   27628:	681f      	ldr	r7, [r3, #0]
    ble_hs_lock();
   2762a:	f7fc fa29 	bl	23a80 <ble_hs_lock>
    proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_CONFIRM, -1, NULL);
   2762e:	2300      	movs	r3, #0
   27630:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   27634:	2101      	movs	r1, #1
   27636:	4630      	mov	r0, r6
   27638:	f7ff fdbe 	bl	271b8 <ble_sm_proc_find>
    if (proc == NULL) {
   2763c:	4605      	mov	r5, r0
   2763e:	b1b0      	cbz	r0, 2766e <ble_sm_confirm_rx+0x6e>
        memcpy(proc->confirm_peer, cmd->value, 16);
   27640:	683e      	ldr	r6, [r7, #0]
   27642:	6878      	ldr	r0, [r7, #4]
   27644:	68b9      	ldr	r1, [r7, #8]
   27646:	68fa      	ldr	r2, [r7, #12]
   27648:	f8c5 602e 	str.w	r6, [r5, #46]	; 0x2e
   2764c:	f8c5 0032 	str.w	r0, [r5, #50]	; 0x32
   27650:	f8c5 1036 	str.w	r1, [r5, #54]	; 0x36
   27654:	f8c5 203a 	str.w	r2, [r5, #58]	; 0x3a
        if (proc->flags & BLE_SM_PROC_F_INITIATOR) {
   27658:	7a2b      	ldrb	r3, [r5, #8]
   2765a:	f013 0f01 	tst.w	r3, #1
   2765e:	d00b      	beq.n	27678 <ble_sm_confirm_rx+0x78>
            proc->state = BLE_SM_PROC_STATE_RANDOM;
   27660:	2302      	movs	r3, #2
   27662:	736b      	strb	r3, [r5, #13]
            res->execute = 1;
   27664:	7d23      	ldrb	r3, [r4, #20]
   27666:	f043 0301 	orr.w	r3, r3, #1
   2766a:	7523      	strb	r3, [r4, #20]
   2766c:	e001      	b.n	27672 <ble_sm_confirm_rx+0x72>
        res->app_status = BLE_HS_ENOENT;
   2766e:	2305      	movs	r3, #5
   27670:	6023      	str	r3, [r4, #0]
    ble_hs_unlock();
   27672:	f7fc fa09 	bl	23a88 <ble_hs_unlock>
   27676:	e7d4      	b.n	27622 <ble_sm_confirm_rx+0x22>
            rc = ble_sm_io_action(proc, &ioact);
   27678:	f10d 0107 	add.w	r1, sp, #7
   2767c:	4628      	mov	r0, r5
   2767e:	f7ff f819 	bl	266b4 <ble_sm_io_action>
            if (ble_sm_ioact_state(ioact) == proc->state) {
   27682:	f89d 0007 	ldrb.w	r0, [sp, #7]
   27686:	f7ff ff91 	bl	275ac <ble_sm_ioact_state>
   2768a:	7b6b      	ldrb	r3, [r5, #13]
   2768c:	4298      	cmp	r0, r3
   2768e:	d009      	beq.n	276a4 <ble_sm_confirm_rx+0xa4>
            if (ble_sm_proc_can_advance(proc)) {
   27690:	4628      	mov	r0, r5
   27692:	f7ff ff9b 	bl	275cc <ble_sm_proc_can_advance>
   27696:	2800      	cmp	r0, #0
   27698:	d0eb      	beq.n	27672 <ble_sm_confirm_rx+0x72>
                res->execute = 1;
   2769a:	7d23      	ldrb	r3, [r4, #20]
   2769c:	f043 0301 	orr.w	r3, r3, #1
   276a0:	7523      	strb	r3, [r4, #20]
   276a2:	e7e6      	b.n	27672 <ble_sm_confirm_rx+0x72>
                proc->flags |= BLE_SM_PROC_F_ADVANCE_ON_IO;
   276a4:	7a2b      	ldrb	r3, [r5, #8]
   276a6:	f043 0304 	orr.w	r3, r3, #4
   276aa:	722b      	strb	r3, [r5, #8]
   276ac:	e7f0      	b.n	27690 <ble_sm_confirm_rx+0x90>

000276ae <ble_sm_pair_rsp_rx>:
{
   276ae:	b5f0      	push	{r4, r5, r6, r7, lr}
   276b0:	b083      	sub	sp, #12
   276b2:	4606      	mov	r6, r0
   276b4:	460d      	mov	r5, r1
   276b6:	4614      	mov	r4, r2
    res->app_status = ble_hs_mbuf_pullup_base(om, sizeof(*rsp));
   276b8:	2106      	movs	r1, #6
   276ba:	4628      	mov	r0, r5
   276bc:	f7fd ffc9 	bl	25652 <ble_hs_mbuf_pullup_base>
   276c0:	6020      	str	r0, [r4, #0]
    if (res->app_status != 0) {
   276c2:	b128      	cbz	r0, 276d0 <ble_sm_pair_rsp_rx+0x22>
        res->enc_cb = 1;
   276c4:	7d23      	ldrb	r3, [r4, #20]
   276c6:	f043 0302 	orr.w	r3, r3, #2
   276ca:	7523      	strb	r3, [r4, #20]
}
   276cc:	b003      	add	sp, #12
   276ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    rsp = (struct ble_sm_pair_cmd *)(*om)->om_data;
   276d0:	682b      	ldr	r3, [r5, #0]
   276d2:	681f      	ldr	r7, [r3, #0]
    ble_hs_lock();
   276d4:	f7fc f9d4 	bl	23a80 <ble_hs_lock>
    proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_PAIR, 1, NULL);
   276d8:	2300      	movs	r3, #0
   276da:	2201      	movs	r2, #1
   276dc:	4619      	mov	r1, r3
   276de:	4630      	mov	r0, r6
   276e0:	f7ff fd6a 	bl	271b8 <ble_sm_proc_find>
    if (proc != NULL) {
   276e4:	4605      	mov	r5, r0
   276e6:	b168      	cbz	r0, 27704 <ble_sm_pair_rsp_rx+0x56>
        proc->pair_rsp[0] = BLE_SM_OP_PAIR_RSP;
   276e8:	2302      	movs	r3, #2
   276ea:	75c3      	strb	r3, [r0, #23]
        memcpy(proc->pair_rsp + 1, rsp, sizeof(*rsp));
   276ec:	683b      	ldr	r3, [r7, #0]
   276ee:	6183      	str	r3, [r0, #24]
   276f0:	88bb      	ldrh	r3, [r7, #4]
   276f2:	8383      	strh	r3, [r0, #28]
        if (rsp->max_enc_key_size < BLE_SM_PAIR_KEY_SZ_MIN) {
   276f4:	78fb      	ldrb	r3, [r7, #3]
   276f6:	2b06      	cmp	r3, #6
   276f8:	d807      	bhi.n	2770a <ble_sm_pair_rsp_rx+0x5c>
            res->sm_err = BLE_SM_ERR_ENC_KEY_SZ;
   276fa:	2306      	movs	r3, #6
   276fc:	7123      	strb	r3, [r4, #4]
            res->app_status = BLE_HS_SM_US_ERR(BLE_SM_ERR_ENC_KEY_SZ);
   276fe:	f240 4306 	movw	r3, #1030	; 0x406
   27702:	6023      	str	r3, [r4, #0]
    ble_hs_unlock();
   27704:	f7fc f9c0 	bl	23a88 <ble_hs_unlock>
   27708:	e7e0      	b.n	276cc <ble_sm_pair_rsp_rx+0x1e>
        } else if (rsp->max_enc_key_size > BLE_SM_PAIR_KEY_SZ_MAX) {
   2770a:	2b10      	cmp	r3, #16
   2770c:	d905      	bls.n	2771a <ble_sm_pair_rsp_rx+0x6c>
            res->sm_err = BLE_SM_ERR_INVAL;
   2770e:	230a      	movs	r3, #10
   27710:	7123      	strb	r3, [r4, #4]
            res->app_status = BLE_HS_SM_US_ERR(BLE_SM_ERR_INVAL);
   27712:	f240 430a 	movw	r3, #1034	; 0x40a
   27716:	6023      	str	r3, [r4, #0]
   27718:	e7f4      	b.n	27704 <ble_sm_pair_rsp_rx+0x56>
            ble_sm_pair_cfg(proc);
   2771a:	f7fe ffd5 	bl	266c8 <ble_sm_pair_cfg>
            rc = ble_sm_io_action(proc, &ioact);
   2771e:	f10d 0107 	add.w	r1, sp, #7
   27722:	4628      	mov	r0, r5
   27724:	f7fe ffc6 	bl	266b4 <ble_sm_io_action>
            if (rc != 0) {
   27728:	b148      	cbz	r0, 2773e <ble_sm_pair_rsp_rx+0x90>
                res->sm_err = BLE_SM_ERR_AUTHREQ;
   2772a:	2303      	movs	r3, #3
   2772c:	7123      	strb	r3, [r4, #4]
                res->app_status = BLE_HS_SM_US_ERR(BLE_SM_ERR_AUTHREQ);
   2772e:	f240 4303 	movw	r3, #1027	; 0x403
   27732:	6023      	str	r3, [r4, #0]
                res->enc_cb = 1;
   27734:	7d23      	ldrb	r3, [r4, #20]
   27736:	f043 0302 	orr.w	r3, r3, #2
   2773a:	7523      	strb	r3, [r4, #20]
   2773c:	e7e2      	b.n	27704 <ble_sm_pair_rsp_rx+0x56>
                proc->state = ble_sm_state_after_pair(proc);
   2773e:	4628      	mov	r0, r5
   27740:	f7fe ff61 	bl	26606 <ble_sm_state_after_pair>
   27744:	4606      	mov	r6, r0
   27746:	7368      	strb	r0, [r5, #13]
                if (ble_sm_ioact_state(ioact) == proc->state) {
   27748:	f89d 7007 	ldrb.w	r7, [sp, #7]
   2774c:	4638      	mov	r0, r7
   2774e:	f7ff ff2d 	bl	275ac <ble_sm_ioact_state>
   27752:	42b0      	cmp	r0, r6
   27754:	d009      	beq.n	2776a <ble_sm_pair_rsp_rx+0xbc>
                if (ble_sm_proc_can_advance(proc)) {
   27756:	4628      	mov	r0, r5
   27758:	f7ff ff38 	bl	275cc <ble_sm_proc_can_advance>
   2775c:	2800      	cmp	r0, #0
   2775e:	d0d1      	beq.n	27704 <ble_sm_pair_rsp_rx+0x56>
                    res->execute = 1;
   27760:	7d23      	ldrb	r3, [r4, #20]
   27762:	f043 0301 	orr.w	r3, r3, #1
   27766:	7523      	strb	r3, [r4, #20]
   27768:	e7cc      	b.n	27704 <ble_sm_pair_rsp_rx+0x56>
                    res->passkey_params.action = ioact;
   2776a:	7227      	strb	r7, [r4, #8]
   2776c:	e7f3      	b.n	27756 <ble_sm_pair_rsp_rx+0xa8>

0002776e <ble_sm_process_result>:
{
   2776e:	b5f0      	push	{r4, r5, r6, r7, lr}
   27770:	b083      	sub	sp, #12
   27772:	4607      	mov	r7, r0
   27774:	460c      	mov	r4, r1
    rm = 0;
   27776:	2600      	movs	r6, #0
   27778:	e02c      	b.n	277d4 <ble_sm_process_result+0x66>
                ble_sm_exec(proc, res, res->state_arg);
   2777a:	6922      	ldr	r2, [r4, #16]
   2777c:	4621      	mov	r1, r4
   2777e:	f7ff f80f 	bl	267a0 <ble_sm_exec>
   27782:	e036      	b.n	277f2 <ble_sm_process_result+0x84>
                rm = 1;
   27784:	2601      	movs	r6, #1
   27786:	e03c      	b.n	27802 <ble_sm_process_result+0x94>
                ble_sm_proc_set_timer(proc);
   27788:	4628      	mov	r0, r5
   2778a:	f7ff fb0d 	bl	26da8 <ble_sm_proc_set_timer>
   2778e:	e03c      	b.n	2780a <ble_sm_process_result+0x9c>
            ble_sm_pair_fail_tx(conn_handle, res->sm_err);
   27790:	4638      	mov	r0, r7
   27792:	f7ff fb4b 	bl	26e2c <ble_sm_pair_fail_tx>
   27796:	e03b      	b.n	27810 <ble_sm_process_result+0xa2>
            ble_gap_enc_event(conn_handle, res->app_status, res->restore);
   27798:	f3c3 02c0 	ubfx	r2, r3, #3, #1
   2779c:	6821      	ldr	r1, [r4, #0]
   2779e:	4638      	mov	r0, r7
   277a0:	f7f9 ff01 	bl	215a6 <ble_gap_enc_event>
   277a4:	e03b      	b.n	2781e <ble_sm_process_result+0xb0>
            ble_gap_passkey_event(conn_handle, &res->passkey_params);
   277a6:	f104 0108 	add.w	r1, r4, #8
   277aa:	4638      	mov	r0, r7
   277ac:	f7f9 fee2 	bl	21574 <ble_gap_passkey_event>
   277b0:	e03a      	b.n	27828 <ble_sm_process_result+0xba>
        if (rm) {
   277b2:	2e00      	cmp	r6, #0
   277b4:	d145      	bne.n	27842 <ble_sm_process_result+0xd4>
        if (!res->execute) {
   277b6:	7d23      	ldrb	r3, [r4, #20]
   277b8:	f013 0f01 	tst.w	r3, #1
   277bc:	d044      	beq.n	27848 <ble_sm_process_result+0xda>
        memset(res, 0, sizeof *res);
   277be:	2300      	movs	r3, #0
   277c0:	6023      	str	r3, [r4, #0]
   277c2:	6063      	str	r3, [r4, #4]
   277c4:	60a3      	str	r3, [r4, #8]
   277c6:	60e3      	str	r3, [r4, #12]
   277c8:	6123      	str	r3, [r4, #16]
   277ca:	6163      	str	r3, [r4, #20]
        res->execute = 1;
   277cc:	7d23      	ldrb	r3, [r4, #20]
   277ce:	f043 0301 	orr.w	r3, r3, #1
   277d2:	7523      	strb	r3, [r4, #20]
        ble_hs_lock();
   277d4:	f7fc f954 	bl	23a80 <ble_hs_lock>
        proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_NONE, -1,
   277d8:	ab01      	add	r3, sp, #4
   277da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   277de:	21ff      	movs	r1, #255	; 0xff
   277e0:	4638      	mov	r0, r7
   277e2:	f7ff fce9 	bl	271b8 <ble_sm_proc_find>
        if (proc != NULL) {
   277e6:	4605      	mov	r5, r0
   277e8:	b178      	cbz	r0, 2780a <ble_sm_process_result+0x9c>
            if (res->execute) {
   277ea:	7d23      	ldrb	r3, [r4, #20]
   277ec:	f013 0f01 	tst.w	r3, #1
   277f0:	d1c3      	bne.n	2777a <ble_sm_process_result+0xc>
            if (res->app_status != 0) {
   277f2:	6823      	ldr	r3, [r4, #0]
   277f4:	b103      	cbz	r3, 277f8 <ble_sm_process_result+0x8a>
                rm = 1;
   277f6:	2601      	movs	r6, #1
            if (proc->state == BLE_SM_PROC_STATE_NONE) {
   277f8:	7b6b      	ldrb	r3, [r5, #13]
   277fa:	2bff      	cmp	r3, #255	; 0xff
   277fc:	d0c2      	beq.n	27784 <ble_sm_process_result+0x16>
            if (rm) {
   277fe:	2e00      	cmp	r6, #0
   27800:	d0c2      	beq.n	27788 <ble_sm_process_result+0x1a>
                ble_sm_proc_remove(proc, prev);
   27802:	9901      	ldr	r1, [sp, #4]
   27804:	4628      	mov	r0, r5
   27806:	f7fe fe97 	bl	26538 <ble_sm_proc_remove>
        if (res->sm_err != 0) {
   2780a:	7921      	ldrb	r1, [r4, #4]
   2780c:	2900      	cmp	r1, #0
   2780e:	d1bf      	bne.n	27790 <ble_sm_process_result+0x22>
        ble_hs_unlock();
   27810:	f7fc f93a 	bl	23a88 <ble_hs_unlock>
        if (proc == NULL) {
   27814:	b1c5      	cbz	r5, 27848 <ble_sm_process_result+0xda>
        if (res->enc_cb) {
   27816:	7d23      	ldrb	r3, [r4, #20]
   27818:	f013 0f02 	tst.w	r3, #2
   2781c:	d1bc      	bne.n	27798 <ble_sm_process_result+0x2a>
        if (res->app_status == 0 &&
   2781e:	6823      	ldr	r3, [r4, #0]
   27820:	b913      	cbnz	r3, 27828 <ble_sm_process_result+0xba>
            res->passkey_params.action != BLE_SM_IOACT_NONE) {
   27822:	7a23      	ldrb	r3, [r4, #8]
        if (res->app_status == 0 &&
   27824:	2b00      	cmp	r3, #0
   27826:	d1be      	bne.n	277a6 <ble_sm_process_result+0x38>
        if (res->app_status == 0    &&
   27828:	6823      	ldr	r3, [r4, #0]
   2782a:	2b00      	cmp	r3, #0
   2782c:	d1c1      	bne.n	277b2 <ble_sm_process_result+0x44>
   2782e:	2e00      	cmp	r6, #0
   27830:	d0bf      	beq.n	277b2 <ble_sm_process_result+0x44>
            proc->flags & BLE_SM_PROC_F_BONDING) {
   27832:	7a2b      	ldrb	r3, [r5, #8]
            rm                      &&
   27834:	f013 0f20 	tst.w	r3, #32
   27838:	d0bb      	beq.n	277b2 <ble_sm_process_result+0x44>
            ble_sm_persist_keys(proc);
   2783a:	4628      	mov	r0, r5
   2783c:	f7ff fb12 	bl	26e64 <ble_sm_persist_keys>
   27840:	e7b7      	b.n	277b2 <ble_sm_process_result+0x44>
            ble_sm_proc_free(proc);
   27842:	4628      	mov	r0, r5
   27844:	f7ff fb82 	bl	26f4c <ble_sm_proc_free>
}
   27848:	b003      	add	sp, #12
   2784a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002784c <ble_sm_enc_event_rx>:
{
   2784c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2784e:	b089      	sub	sp, #36	; 0x24
   27850:	4606      	mov	r6, r0
   27852:	460d      	mov	r5, r1
   27854:	4617      	mov	r7, r2
    memset(&res, 0, sizeof res);
   27856:	2400      	movs	r4, #0
   27858:	9402      	str	r4, [sp, #8]
   2785a:	9403      	str	r4, [sp, #12]
   2785c:	9404      	str	r4, [sp, #16]
   2785e:	9405      	str	r4, [sp, #20]
   27860:	9406      	str	r4, [sp, #24]
   27862:	9407      	str	r4, [sp, #28]
    ble_hs_lock();
   27864:	f7fc f90c 	bl	23a80 <ble_hs_lock>
    proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_NONE, -1, NULL);
   27868:	4623      	mov	r3, r4
   2786a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2786e:	21ff      	movs	r1, #255	; 0xff
   27870:	4630      	mov	r0, r6
   27872:	f7ff fca1 	bl	271b8 <ble_sm_proc_find>
    if (proc != NULL) {
   27876:	4604      	mov	r4, r0
   27878:	2800      	cmp	r0, #0
   2787a:	d03a      	beq.n	278f2 <ble_sm_enc_event_rx+0xa6>
        switch (proc->state) {
   2787c:	7b43      	ldrb	r3, [r0, #13]
   2787e:	2b05      	cmp	r3, #5
   27880:	d00a      	beq.n	27898 <ble_sm_enc_event_rx+0x4c>
   27882:	2b06      	cmp	r3, #6
   27884:	d023      	beq.n	278ce <ble_sm_enc_event_rx+0x82>
            proc->state = BLE_SM_PROC_STATE_NONE;
   27886:	23ff      	movs	r3, #255	; 0xff
   27888:	7343      	strb	r3, [r0, #13]
            res.sm_err = BLE_SM_ERR_UNSPECIFIED;
   2788a:	2308      	movs	r3, #8
   2788c:	f88d 300c 	strb.w	r3, [sp, #12]
    key_size = 0;
   27890:	2100      	movs	r1, #0
    bonded = 0;
   27892:	460b      	mov	r3, r1
    authenticated = 0;
   27894:	460a      	mov	r2, r1
            break;
   27896:	e02f      	b.n	278f8 <ble_sm_enc_event_rx+0xac>
            if (evt_status == 0) {
   27898:	b9ad      	cbnz	r5, 278c6 <ble_sm_enc_event_rx+0x7a>
                proc->state = BLE_SM_PROC_STATE_KEY_EXCH;
   2789a:	2307      	movs	r3, #7
   2789c:	7343      	strb	r3, [r0, #13]
                if (!(proc->flags & BLE_SM_PROC_F_INITIATOR) ||
   2789e:	7a03      	ldrb	r3, [r0, #8]
   278a0:	f013 0f01 	tst.w	r3, #1
   278a4:	d001      	beq.n	278aa <ble_sm_enc_event_rx+0x5e>
                    proc->rx_key_flags == 0) {
   278a6:	7b83      	ldrb	r3, [r0, #14]
                if (!(proc->flags & BLE_SM_PROC_F_INITIATOR) ||
   278a8:	b92b      	cbnz	r3, 278b6 <ble_sm_enc_event_rx+0x6a>
                    res.execute = 1;
   278aa:	f89d 301c 	ldrb.w	r3, [sp, #28]
   278ae:	f043 0301 	orr.w	r3, r3, #1
   278b2:	f88d 301c 	strb.w	r3, [sp, #28]
                key_size = proc->key_size;
   278b6:	7be1      	ldrb	r1, [r4, #15]
            if (proc->flags & BLE_SM_PROC_F_AUTHENTICATED) {
   278b8:	7a23      	ldrb	r3, [r4, #8]
   278ba:	f013 0f08 	tst.w	r3, #8
   278be:	d132      	bne.n	27926 <ble_sm_enc_event_rx+0xda>
    bonded = 0;
   278c0:	2300      	movs	r3, #0
    authenticated = 0;
   278c2:	461a      	mov	r2, r3
   278c4:	e018      	b.n	278f8 <ble_sm_enc_event_rx+0xac>
                proc->state = BLE_SM_PROC_STATE_NONE;
   278c6:	23ff      	movs	r3, #255	; 0xff
   278c8:	7343      	strb	r3, [r0, #13]
    key_size = 0;
   278ca:	2100      	movs	r1, #0
   278cc:	e7f4      	b.n	278b8 <ble_sm_enc_event_rx+0x6c>
            proc->state = BLE_SM_PROC_STATE_NONE;
   278ce:	23ff      	movs	r3, #255	; 0xff
   278d0:	7343      	strb	r3, [r0, #13]
            if (proc->flags & BLE_SM_PROC_F_AUTHENTICATED) {
   278d2:	7a03      	ldrb	r3, [r0, #8]
   278d4:	f013 0f08 	tst.w	r3, #8
   278d8:	d109      	bne.n	278ee <ble_sm_enc_event_rx+0xa2>
    authenticated = 0;
   278da:	2200      	movs	r2, #0
            res.restore = 1;
   278dc:	f89d 301c 	ldrb.w	r3, [sp, #28]
   278e0:	f043 0308 	orr.w	r3, r3, #8
   278e4:	f88d 301c 	strb.w	r3, [sp, #28]
            key_size = proc->key_size;
   278e8:	7be1      	ldrb	r1, [r4, #15]
            bonded = 1;
   278ea:	2301      	movs	r3, #1
            break;
   278ec:	e004      	b.n	278f8 <ble_sm_enc_event_rx+0xac>
                authenticated = 1;
   278ee:	2201      	movs	r2, #1
   278f0:	e7f4      	b.n	278dc <ble_sm_enc_event_rx+0x90>
    key_size = 0;
   278f2:	2100      	movs	r1, #0
    bonded = 0;
   278f4:	460b      	mov	r3, r1
    authenticated = 0;
   278f6:	460a      	mov	r2, r1
    if (evt_status == 0) {
   278f8:	b1c5      	cbz	r5, 2792c <ble_sm_enc_event_rx+0xe0>
    if (proc == NULL || proc->state == BLE_SM_PROC_STATE_NONE) {
   278fa:	b114      	cbz	r4, 27902 <ble_sm_enc_event_rx+0xb6>
   278fc:	7b63      	ldrb	r3, [r4, #13]
   278fe:	2bff      	cmp	r3, #255	; 0xff
   27900:	d109      	bne.n	27916 <ble_sm_enc_event_rx+0xca>
        res.enc_cb = 1;
   27902:	f89d 301c 	ldrb.w	r3, [sp, #28]
   27906:	f043 0302 	orr.w	r3, r3, #2
   2790a:	f88d 301c 	strb.w	r3, [sp, #28]
        res.app_status = BLE_HS_HCI_ERR(evt_status);
   2790e:	b19d      	cbz	r5, 27938 <ble_sm_enc_event_rx+0xec>
   27910:	f505 7500 	add.w	r5, r5, #512	; 0x200
   27914:	9502      	str	r5, [sp, #8]
    ble_hs_unlock();
   27916:	f7fc f8b7 	bl	23a88 <ble_hs_unlock>
    ble_sm_process_result(conn_handle, &res);
   2791a:	a902      	add	r1, sp, #8
   2791c:	4630      	mov	r0, r6
   2791e:	f7ff ff26 	bl	2776e <ble_sm_process_result>
}
   27922:	b009      	add	sp, #36	; 0x24
   27924:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bonded = 0;
   27926:	2300      	movs	r3, #0
                authenticated = 1;
   27928:	2201      	movs	r2, #1
   2792a:	e7e5      	b.n	278f8 <ble_sm_enc_event_rx+0xac>
        ble_sm_update_sec_state(conn_handle, encrypted, authenticated, bonded,
   2792c:	9100      	str	r1, [sp, #0]
   2792e:	4639      	mov	r1, r7
   27930:	4630      	mov	r0, r6
   27932:	f7fe ffdf 	bl	268f4 <ble_sm_update_sec_state>
   27936:	e7e0      	b.n	278fa <ble_sm_enc_event_rx+0xae>
        res.app_status = BLE_HS_HCI_ERR(evt_status);
   27938:	2500      	movs	r5, #0
   2793a:	e7eb      	b.n	27914 <ble_sm_enc_event_rx+0xc8>

0002793c <ble_sm_rx>:
    return res.app_status;
}

static int
ble_sm_rx(struct ble_l2cap_chan *chan)
{
   2793c:	b570      	push	{r4, r5, r6, lr}
   2793e:	b088      	sub	sp, #32
   27940:	4604      	mov	r4, r0
    uint8_t op;
    uint16_t conn_handle;
    struct os_mbuf **om;
    int rc;

    STATS_INC(ble_l2cap_stats, sm_rx);
   27942:	4a1b      	ldr	r2, [pc, #108]	; (279b0 <ble_sm_rx+0x74>)
   27944:	6b13      	ldr	r3, [r2, #48]	; 0x30
   27946:	3301      	adds	r3, #1
   27948:	6313      	str	r3, [r2, #48]	; 0x30

    conn_handle = ble_l2cap_get_conn_handle(chan);
   2794a:	f7fe fa38 	bl	25dbe <ble_l2cap_get_conn_handle>
    if (conn_handle == BLE_HS_CONN_HANDLE_NONE) {
   2794e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   27952:	4298      	cmp	r0, r3
   27954:	d025      	beq.n	279a2 <ble_sm_rx+0x66>
   27956:	4605      	mov	r5, r0
        return BLE_HS_ENOTCONN;
    }

    om = &chan->rx_buf;
   27958:	f104 0610 	add.w	r6, r4, #16
    BLE_HS_DBG_ASSERT(*om != NULL);

    rc = os_mbuf_copydata(*om, 0, 1, &op);
   2795c:	f10d 0307 	add.w	r3, sp, #7
   27960:	2201      	movs	r2, #1
   27962:	2100      	movs	r1, #0
   27964:	6920      	ldr	r0, [r4, #16]
   27966:	f7e5 fe06 	bl	d576 <os_mbuf_copydata>
    if (rc != 0) {
   2796a:	b9e0      	cbnz	r0, 279a6 <ble_sm_rx+0x6a>
        return BLE_HS_EBADDATA;
    }

    /* Strip L2CAP SM header from the front of the mbuf. */
    os_mbuf_adj(*om, 1);
   2796c:	2101      	movs	r1, #1
   2796e:	6920      	ldr	r0, [r4, #16]
   27970:	f7e5 fe2e 	bl	d5d0 <os_mbuf_adj>

    rx_cb = ble_sm_dispatch_get(op);
   27974:	f89d 0007 	ldrb.w	r0, [sp, #7]
   27978:	f7fe fdd4 	bl	26524 <ble_sm_dispatch_get>
    if (rx_cb != NULL) {
   2797c:	4604      	mov	r4, r0
   2797e:	b1a8      	cbz	r0, 279ac <ble_sm_rx+0x70>
        memset(&res, 0, sizeof res);
   27980:	2300      	movs	r3, #0
   27982:	9302      	str	r3, [sp, #8]
   27984:	9303      	str	r3, [sp, #12]
   27986:	9304      	str	r3, [sp, #16]
   27988:	9305      	str	r3, [sp, #20]
   2798a:	9306      	str	r3, [sp, #24]
   2798c:	9307      	str	r3, [sp, #28]

        rx_cb(conn_handle, om, &res);
   2798e:	aa02      	add	r2, sp, #8
   27990:	4631      	mov	r1, r6
   27992:	4628      	mov	r0, r5
   27994:	47a0      	blx	r4
        ble_sm_process_result(conn_handle, &res);
   27996:	a902      	add	r1, sp, #8
   27998:	4628      	mov	r0, r5
   2799a:	f7ff fee8 	bl	2776e <ble_sm_process_result>
        rc = res.app_status;
   2799e:	9802      	ldr	r0, [sp, #8]
   279a0:	e002      	b.n	279a8 <ble_sm_rx+0x6c>
        return BLE_HS_ENOTCONN;
   279a2:	2007      	movs	r0, #7
   279a4:	e000      	b.n	279a8 <ble_sm_rx+0x6c>
        return BLE_HS_EBADDATA;
   279a6:	200a      	movs	r0, #10
    } else {
        rc = BLE_HS_ENOTSUP;
    }

    return rc;
}
   279a8:	b008      	add	sp, #32
   279aa:	bd70      	pop	{r4, r5, r6, pc}
        rc = BLE_HS_ENOTSUP;
   279ac:	2008      	movs	r0, #8
   279ae:	e7fb      	b.n	279a8 <ble_sm_rx+0x6c>
   279b0:	2000413c 	.word	0x2000413c

000279b4 <ble_sm_enc_change_rx>:
{
   279b4:	b508      	push	{r3, lr}
                        ev->enabled & 0x01);
   279b6:	78c2      	ldrb	r2, [r0, #3]
    ble_sm_enc_event_rx(le16toh(ev->connection_handle), ev->status,
   279b8:	f002 0201 	and.w	r2, r2, #1
   279bc:	7801      	ldrb	r1, [r0, #0]
   279be:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   279c2:	f7ff ff43 	bl	2784c <ble_sm_enc_event_rx>
}
   279c6:	bd08      	pop	{r3, pc}

000279c8 <ble_sm_enc_key_refresh_rx>:
{
   279c8:	b508      	push	{r3, lr}
    ble_sm_enc_event_rx(le16toh(ev->conn_handle), ev->status, 1);
   279ca:	2201      	movs	r2, #1
   279cc:	7801      	ldrb	r1, [r0, #0]
   279ce:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   279d2:	f7ff ff3b 	bl	2784c <ble_sm_enc_event_rx>
}
   279d6:	bd08      	pop	{r3, pc}

000279d8 <ble_sm_ltk_req_rx>:
{
   279d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   279da:	b0a9      	sub	sp, #164	; 0xa4
   279dc:	4606      	mov	r6, r0
    uint16_t conn_handle = le16toh(ev->conn_handle);
   279de:	f8b0 7001 	ldrh.w	r7, [r0, #1]
   279e2:	b2bd      	uxth	r5, r7
    memset(&res, 0, sizeof res);
   279e4:	2400      	movs	r4, #0
   279e6:	9407      	str	r4, [sp, #28]
   279e8:	9408      	str	r4, [sp, #32]
   279ea:	9409      	str	r4, [sp, #36]	; 0x24
   279ec:	940a      	str	r4, [sp, #40]	; 0x28
   279ee:	940b      	str	r4, [sp, #44]	; 0x2c
   279f0:	940c      	str	r4, [sp, #48]	; 0x30
    ble_hs_lock();
   279f2:	f7fc f845 	bl	23a80 <ble_hs_lock>
    proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_NONE, 0, NULL);
   279f6:	4623      	mov	r3, r4
   279f8:	4622      	mov	r2, r4
   279fa:	21ff      	movs	r1, #255	; 0xff
   279fc:	4628      	mov	r0, r5
   279fe:	f7ff fbdb 	bl	271b8 <ble_sm_proc_find>
    if (proc == NULL) {
   27a02:	b168      	cbz	r0, 27a20 <ble_sm_ltk_req_rx+0x48>
   27a04:	4604      	mov	r4, r0
    } else if (proc->state == BLE_SM_PROC_STATE_SEC_REQ) {
   27a06:	7b43      	ldrb	r3, [r0, #13]
   27a08:	2b08      	cmp	r3, #8
   27a0a:	d01c      	beq.n	27a46 <ble_sm_ltk_req_rx+0x6e>
    } else if (proc->state == BLE_SM_PROC_STATE_LTK_START) {
   27a0c:	2b03      	cmp	r3, #3
   27a0e:	d13c      	bne.n	27a8a <ble_sm_ltk_req_rx+0xb2>
        res.execute = 1;
   27a10:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   27a14:	f043 0301 	orr.w	r3, r3, #1
   27a18:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
        restore = 0;
   27a1c:	2700      	movs	r7, #0
   27a1e:	e027      	b.n	27a70 <ble_sm_ltk_req_rx+0x98>
        proc = ble_sm_proc_alloc();
   27a20:	f7ff fa9e 	bl	26f60 <ble_sm_proc_alloc>
        if (proc == NULL) {
   27a24:	4604      	mov	r4, r0
   27a26:	b158      	cbz	r0, 27a40 <ble_sm_ltk_req_rx+0x68>
            proc->conn_handle = conn_handle;
   27a28:	8147      	strh	r7, [r0, #10]
            proc->state = BLE_SM_PROC_STATE_LTK_RESTORE;
   27a2a:	2304      	movs	r3, #4
   27a2c:	7343      	strb	r3, [r0, #13]
            ble_sm_insert(proc);
   27a2e:	f7fe fdb3 	bl	26598 <ble_sm_insert>
            res.execute = 1;
   27a32:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   27a36:	f043 0301 	orr.w	r3, r3, #1
   27a3a:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
   27a3e:	e00a      	b.n	27a56 <ble_sm_ltk_req_rx+0x7e>
            res.app_status = BLE_HS_ENOMEM;
   27a40:	2306      	movs	r3, #6
   27a42:	9307      	str	r3, [sp, #28]
   27a44:	e007      	b.n	27a56 <ble_sm_ltk_req_rx+0x7e>
        proc->state = BLE_SM_PROC_STATE_LTK_RESTORE;
   27a46:	2304      	movs	r3, #4
   27a48:	7343      	strb	r3, [r0, #13]
        res.execute = 1;
   27a4a:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   27a4e:	f043 0301 	orr.w	r3, r3, #1
   27a52:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
        conn = ble_hs_conn_find_assert(conn_handle);
   27a56:	4628      	mov	r0, r5
   27a58:	f7fc fe7a 	bl	24750 <ble_hs_conn_find_assert>
        ble_hs_conn_addrs(conn, &addrs);
   27a5c:	a90d      	add	r1, sp, #52	; 0x34
   27a5e:	f7fc fec5 	bl	247ec <ble_hs_conn_addrs>
        memcpy(peer_id_addr, addrs.peer_id_addr.val, 6);
   27a62:	ab0f      	add	r3, sp, #60	; 0x3c
   27a64:	e893 0003 	ldmia.w	r3, {r0, r1}
   27a68:	9005      	str	r0, [sp, #20]
   27a6a:	f8ad 1018 	strh.w	r1, [sp, #24]
   27a6e:	2701      	movs	r7, #1
    ble_hs_unlock();
   27a70:	f7fc f80a 	bl	23a88 <ble_hs_unlock>
    if (proc == NULL) {
   27a74:	b17c      	cbz	r4, 27a96 <ble_sm_ltk_req_rx+0xbe>
    if (res.app_status == 0) {
   27a76:	9b07      	ldr	r3, [sp, #28]
   27a78:	b903      	cbnz	r3, 27a7c <ble_sm_ltk_req_rx+0xa4>
        if (restore) {
   27a7a:	b977      	cbnz	r7, 27a9a <ble_sm_ltk_req_rx+0xc2>
    ble_sm_process_result(conn_handle, &res);
   27a7c:	a907      	add	r1, sp, #28
   27a7e:	4628      	mov	r0, r5
   27a80:	f7ff fe75 	bl	2776e <ble_sm_process_result>
    return 0;
   27a84:	2000      	movs	r0, #0
}
   27a86:	b029      	add	sp, #164	; 0xa4
   27a88:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ble_sm_ltk_req_neg_reply_tx(conn_handle);
   27a8a:	4628      	mov	r0, r5
   27a8c:	f7ff f93b 	bl	26d06 <ble_sm_ltk_req_neg_reply_tx>
        restore = 0;
   27a90:	2700      	movs	r7, #0
        proc = NULL;
   27a92:	463c      	mov	r4, r7
   27a94:	e7ec      	b.n	27a70 <ble_sm_ltk_req_rx+0x98>
        return res.app_status;
   27a96:	9807      	ldr	r0, [sp, #28]
   27a98:	e7f5      	b.n	27a86 <ble_sm_ltk_req_rx+0xae>
            store_rc = ble_sm_retrieve_ltk(le16toh(ev->div), le64toh(ev->rand),
   27a9a:	f8b6 000b 	ldrh.w	r0, [r6, #11]
   27a9e:	f8d6 2003 	ldr.w	r2, [r6, #3]
   27aa2:	f8d6 3007 	ldr.w	r3, [r6, #7]
   27aa6:	f89d 103b 	ldrb.w	r1, [sp, #59]	; 0x3b
   27aaa:	ac14      	add	r4, sp, #80	; 0x50
   27aac:	9402      	str	r4, [sp, #8]
   27aae:	ac05      	add	r4, sp, #20
   27ab0:	9401      	str	r4, [sp, #4]
   27ab2:	9100      	str	r1, [sp, #0]
   27ab4:	f7ff fa64 	bl	26f80 <ble_sm_retrieve_ltk>
            if (store_rc == 0) {
   27ab8:	b910      	cbnz	r0, 27ac0 <ble_sm_ltk_req_rx+0xe8>
                res.state_arg = &value_sec;
   27aba:	ab14      	add	r3, sp, #80	; 0x50
   27abc:	930b      	str	r3, [sp, #44]	; 0x2c
   27abe:	e7dd      	b.n	27a7c <ble_sm_ltk_req_rx+0xa4>
                res.state_arg = NULL;
   27ac0:	2300      	movs	r3, #0
   27ac2:	930b      	str	r3, [sp, #44]	; 0x2c
   27ac4:	e7da      	b.n	27a7c <ble_sm_ltk_req_rx+0xa4>

00027ac6 <ble_sm_our_pair_rand>:
    if (proc->flags & BLE_SM_PROC_F_INITIATOR) {
   27ac6:	7a03      	ldrb	r3, [r0, #8]
   27ac8:	f013 0f01 	tst.w	r3, #1
   27acc:	d101      	bne.n	27ad2 <ble_sm_our_pair_rand+0xc>
        return proc->rands;
   27ace:	304e      	adds	r0, #78	; 0x4e
}
   27ad0:	4770      	bx	lr
        return proc->randm;
   27ad2:	303e      	adds	r0, #62	; 0x3e
   27ad4:	4770      	bx	lr

00027ad6 <ble_sm_pair_exec>:
{
   27ad6:	b5f0      	push	{r4, r5, r6, r7, lr}
   27ad8:	b083      	sub	sp, #12
   27ada:	4605      	mov	r5, r0
   27adc:	460e      	mov	r6, r1
    is_req = proc->flags & BLE_SM_PROC_F_INITIATOR;
   27ade:	7a03      	ldrb	r3, [r0, #8]
    cmd = ble_sm_cmd_get(is_req ? BLE_SM_OP_PAIR_REQ : BLE_SM_OP_PAIR_RSP,
   27ae0:	f013 0401 	ands.w	r4, r3, #1
   27ae4:	d01d      	beq.n	27b22 <ble_sm_pair_exec+0x4c>
   27ae6:	2001      	movs	r0, #1
   27ae8:	aa01      	add	r2, sp, #4
   27aea:	2106      	movs	r1, #6
   27aec:	f000 f9ee 	bl	27ecc <ble_sm_cmd_get>
    if (cmd == NULL) {
   27af0:	4607      	mov	r7, r0
   27af2:	2800      	cmp	r0, #0
   27af4:	d03f      	beq.n	27b76 <ble_sm_pair_exec+0xa0>
    if (is_req) {
   27af6:	b1b4      	cbz	r4, 27b26 <ble_sm_pair_exec+0x50>
        ble_sm_pair_req_fill(proc);
   27af8:	4628      	mov	r0, r5
   27afa:	f7fe fd9f 	bl	2663c <ble_sm_pair_req_fill>
        memcpy(cmd, proc->pair_req + 1, sizeof(*cmd));
   27afe:	462b      	mov	r3, r5
   27b00:	f853 2f11 	ldr.w	r2, [r3, #17]!
   27b04:	603a      	str	r2, [r7, #0]
   27b06:	889b      	ldrh	r3, [r3, #4]
   27b08:	80bb      	strh	r3, [r7, #4]
    rc = ble_sm_tx(proc->conn_handle, txom);
   27b0a:	9901      	ldr	r1, [sp, #4]
   27b0c:	8968      	ldrh	r0, [r5, #10]
   27b0e:	f000 f9f7 	bl	27f00 <ble_sm_tx>
    if (rc != 0) {
   27b12:	4603      	mov	r3, r0
   27b14:	b300      	cbz	r0, 27b58 <ble_sm_pair_exec+0x82>
    res->app_status = rc;
   27b16:	6033      	str	r3, [r6, #0]
    if (!is_req) {
   27b18:	b90c      	cbnz	r4, 27b1e <ble_sm_pair_exec+0x48>
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   27b1a:	2308      	movs	r3, #8
   27b1c:	7133      	strb	r3, [r6, #4]
}
   27b1e:	b003      	add	sp, #12
   27b20:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cmd = ble_sm_cmd_get(is_req ? BLE_SM_OP_PAIR_REQ : BLE_SM_OP_PAIR_RSP,
   27b22:	2002      	movs	r0, #2
   27b24:	e7e0      	b.n	27ae8 <ble_sm_pair_exec+0x12>
        memcpy(cmd, proc->pair_rsp + 1, sizeof(*cmd));
   27b26:	462b      	mov	r3, r5
   27b28:	f853 2f18 	ldr.w	r2, [r3, #24]!
   27b2c:	6002      	str	r2, [r0, #0]
   27b2e:	889b      	ldrh	r3, [r3, #4]
   27b30:	8083      	strh	r3, [r0, #4]
        proc->state = ble_sm_state_after_pair(proc);
   27b32:	4628      	mov	r0, r5
   27b34:	f7fe fd67 	bl	26606 <ble_sm_state_after_pair>
   27b38:	7368      	strb	r0, [r5, #13]
        rc = ble_sm_io_action(proc, &ioact);
   27b3a:	f10d 0103 	add.w	r1, sp, #3
   27b3e:	4628      	mov	r0, r5
   27b40:	f7fe fdb8 	bl	266b4 <ble_sm_io_action>
        if (ble_sm_ioact_state(ioact) == proc->state) {
   27b44:	f89d 7003 	ldrb.w	r7, [sp, #3]
   27b48:	4638      	mov	r0, r7
   27b4a:	f7ff fd2f 	bl	275ac <ble_sm_ioact_state>
   27b4e:	7b6b      	ldrb	r3, [r5, #13]
   27b50:	4298      	cmp	r0, r3
   27b52:	d1da      	bne.n	27b0a <ble_sm_pair_exec+0x34>
            res->passkey_params.action = ioact;
   27b54:	7237      	strb	r7, [r6, #8]
   27b56:	e7d8      	b.n	27b0a <ble_sm_pair_exec+0x34>
    res->app_status = ble_sm_gen_pair_rand(ble_sm_our_pair_rand(proc));
   27b58:	4628      	mov	r0, r5
   27b5a:	f7ff ffb4 	bl	27ac6 <ble_sm_our_pair_rand>
   27b5e:	f7ff fae9 	bl	27134 <ble_sm_gen_pair_rand>
   27b62:	6030      	str	r0, [r6, #0]
    if (res->app_status != 0) {
   27b64:	2800      	cmp	r0, #0
   27b66:	d0da      	beq.n	27b1e <ble_sm_pair_exec+0x48>
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   27b68:	2308      	movs	r3, #8
   27b6a:	7133      	strb	r3, [r6, #4]
        res->enc_cb = 1;
   27b6c:	7d33      	ldrb	r3, [r6, #20]
   27b6e:	f043 0302 	orr.w	r3, r3, #2
   27b72:	7533      	strb	r3, [r6, #20]
        return;
   27b74:	e7d3      	b.n	27b1e <ble_sm_pair_exec+0x48>
        rc = BLE_HS_ENOMEM;
   27b76:	2306      	movs	r3, #6
   27b78:	e7cd      	b.n	27b16 <ble_sm_pair_exec+0x40>

00027b7a <ble_sm_peer_pair_rand>:
    if (proc->flags & BLE_SM_PROC_F_INITIATOR) {
   27b7a:	7a03      	ldrb	r3, [r0, #8]
   27b7c:	f013 0f01 	tst.w	r3, #1
   27b80:	d101      	bne.n	27b86 <ble_sm_peer_pair_rand+0xc>
        return proc->randm;
   27b82:	303e      	adds	r0, #62	; 0x3e
}
   27b84:	4770      	bx	lr
        return proc->rands;
   27b86:	304e      	adds	r0, #78	; 0x4e
   27b88:	4770      	bx	lr

00027b8a <ble_sm_random_rx>:
{
   27b8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27b8c:	4606      	mov	r6, r0
   27b8e:	460d      	mov	r5, r1
   27b90:	4614      	mov	r4, r2
    res->app_status = ble_hs_mbuf_pullup_base(om, sizeof(*cmd));
   27b92:	2110      	movs	r1, #16
   27b94:	4628      	mov	r0, r5
   27b96:	f7fd fd5c 	bl	25652 <ble_hs_mbuf_pullup_base>
   27b9a:	6020      	str	r0, [r4, #0]
    if (res->app_status != 0) {
   27b9c:	b130      	cbz	r0, 27bac <ble_sm_random_rx+0x22>
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   27b9e:	2308      	movs	r3, #8
   27ba0:	7123      	strb	r3, [r4, #4]
        res->enc_cb = 1;
   27ba2:	7d23      	ldrb	r3, [r4, #20]
   27ba4:	f043 0302 	orr.w	r3, r3, #2
   27ba8:	7523      	strb	r3, [r4, #20]
}
   27baa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cmd = (struct ble_sm_pair_random *)(*om)->om_data;
   27bac:	682b      	ldr	r3, [r5, #0]
   27bae:	681d      	ldr	r5, [r3, #0]
    ble_hs_lock();
   27bb0:	f7fb ff66 	bl	23a80 <ble_hs_lock>
    proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_RANDOM, -1, NULL);
   27bb4:	2300      	movs	r3, #0
   27bb6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   27bba:	2102      	movs	r1, #2
   27bbc:	4630      	mov	r0, r6
   27bbe:	f7ff fafb 	bl	271b8 <ble_sm_proc_find>
    if (proc == NULL) {
   27bc2:	4606      	mov	r6, r0
   27bc4:	b190      	cbz	r0, 27bec <ble_sm_random_rx+0x62>
        memcpy(ble_sm_peer_pair_rand(proc), cmd->value, 16);
   27bc6:	f7ff ffd8 	bl	27b7a <ble_sm_peer_pair_rand>
   27bca:	682f      	ldr	r7, [r5, #0]
   27bcc:	6869      	ldr	r1, [r5, #4]
   27bce:	68aa      	ldr	r2, [r5, #8]
   27bd0:	68eb      	ldr	r3, [r5, #12]
   27bd2:	6007      	str	r7, [r0, #0]
   27bd4:	6041      	str	r1, [r0, #4]
   27bd6:	6082      	str	r2, [r0, #8]
   27bd8:	60c3      	str	r3, [r0, #12]
        if (proc->flags & BLE_SM_PROC_F_SC) {
   27bda:	7a33      	ldrb	r3, [r6, #8]
   27bdc:	f013 0f10 	tst.w	r3, #16
   27be0:	d006      	beq.n	27bf0 <ble_sm_random_rx+0x66>
            ble_sm_sc_random_rx(proc, res);
   27be2:	4621      	mov	r1, r4
   27be4:	4630      	mov	r0, r6
   27be6:	f000 fbfd 	bl	283e4 <ble_sm_sc_random_rx>
   27bea:	e001      	b.n	27bf0 <ble_sm_random_rx+0x66>
        res->app_status = BLE_HS_ENOENT;
   27bec:	2305      	movs	r3, #5
   27bee:	6023      	str	r3, [r4, #0]
    ble_hs_unlock();
   27bf0:	f7fb ff4a 	bl	23a88 <ble_hs_unlock>
   27bf4:	e7d9      	b.n	27baa <ble_sm_random_rx+0x20>

00027bf6 <ble_sm_timer>:
{
   27bf6:	b530      	push	{r4, r5, lr}
   27bf8:	b083      	sub	sp, #12
    ticks_until_exp = ble_sm_extract_expired(&exp_list);
   27bfa:	4668      	mov	r0, sp
   27bfc:	f7ff f8de 	bl	26dbc <ble_sm_extract_expired>
   27c00:	4605      	mov	r5, r0
    while ((proc = STAILQ_FIRST(&exp_list)) != NULL) {
   27c02:	e002      	b.n	27c0a <ble_sm_timer+0x14>
        ble_sm_proc_free(proc);
   27c04:	4620      	mov	r0, r4
   27c06:	f7ff f9a1 	bl	26f4c <ble_sm_proc_free>
    while ((proc = STAILQ_FIRST(&exp_list)) != NULL) {
   27c0a:	9c00      	ldr	r4, [sp, #0]
   27c0c:	b164      	cbz	r4, 27c28 <ble_sm_timer+0x32>
        ble_gap_enc_event(proc->conn_handle, BLE_HS_ETIMEOUT, 0);
   27c0e:	2200      	movs	r2, #0
   27c10:	210d      	movs	r1, #13
   27c12:	8960      	ldrh	r0, [r4, #10]
   27c14:	f7f9 fcc7 	bl	215a6 <ble_gap_enc_event>
        STAILQ_REMOVE_HEAD(&exp_list, next);
   27c18:	9b00      	ldr	r3, [sp, #0]
   27c1a:	681b      	ldr	r3, [r3, #0]
   27c1c:	9300      	str	r3, [sp, #0]
   27c1e:	2b00      	cmp	r3, #0
   27c20:	d1f0      	bne.n	27c04 <ble_sm_timer+0xe>
   27c22:	f8cd d004 	str.w	sp, [sp, #4]
   27c26:	e7ed      	b.n	27c04 <ble_sm_timer+0xe>
}
   27c28:	4628      	mov	r0, r5
   27c2a:	b003      	add	sp, #12
   27c2c:	bd30      	pop	{r4, r5, pc}

00027c2e <ble_sm_pair_initiate>:
{
   27c2e:	b530      	push	{r4, r5, lr}
   27c30:	b087      	sub	sp, #28
   27c32:	4605      	mov	r5, r0
    memset(&res, 0, sizeof(res));
   27c34:	2400      	movs	r4, #0
   27c36:	9400      	str	r4, [sp, #0]
   27c38:	9401      	str	r4, [sp, #4]
   27c3a:	9402      	str	r4, [sp, #8]
   27c3c:	9403      	str	r4, [sp, #12]
   27c3e:	9404      	str	r4, [sp, #16]
   27c40:	9405      	str	r4, [sp, #20]
    ble_hs_lock();
   27c42:	f7fb ff1d 	bl	23a80 <ble_hs_lock>
    proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_NONE, -1, NULL);
   27c46:	4623      	mov	r3, r4
   27c48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   27c4c:	21ff      	movs	r1, #255	; 0xff
   27c4e:	4628      	mov	r0, r5
   27c50:	f7ff fab2 	bl	271b8 <ble_sm_proc_find>
   27c54:	4604      	mov	r4, r0
    ble_hs_unlock();
   27c56:	f7fb ff17 	bl	23a88 <ble_hs_unlock>
    if (proc != NULL) {
   27c5a:	b11c      	cbz	r4, 27c64 <ble_sm_pair_initiate+0x36>
        return BLE_HS_EALREADY;
   27c5c:	2302      	movs	r3, #2
}
   27c5e:	4618      	mov	r0, r3
   27c60:	b007      	add	sp, #28
   27c62:	bd30      	pop	{r4, r5, pc}
    rc = ble_sm_chk_store_overflow(conn_handle);
   27c64:	4628      	mov	r0, r5
   27c66:	f7ff fa55 	bl	27114 <ble_sm_chk_store_overflow>
    if (rc != 0) {
   27c6a:	4603      	mov	r3, r0
   27c6c:	2800      	cmp	r0, #0
   27c6e:	d1f6      	bne.n	27c5e <ble_sm_pair_initiate+0x30>
    proc = ble_sm_proc_alloc();
   27c70:	f7ff f976 	bl	26f60 <ble_sm_proc_alloc>
    if (proc == NULL) {
   27c74:	4604      	mov	r4, r0
   27c76:	b1d0      	cbz	r0, 27cae <ble_sm_pair_initiate+0x80>
        proc->conn_handle = conn_handle;
   27c78:	8145      	strh	r5, [r0, #10]
        proc->state = BLE_SM_PROC_STATE_PAIR;
   27c7a:	2300      	movs	r3, #0
   27c7c:	7343      	strb	r3, [r0, #13]
        proc->flags |= BLE_SM_PROC_F_INITIATOR;
   27c7e:	7a03      	ldrb	r3, [r0, #8]
   27c80:	f043 0301 	orr.w	r3, r3, #1
   27c84:	7203      	strb	r3, [r0, #8]
        ble_hs_lock();
   27c86:	f7fb fefb 	bl	23a80 <ble_hs_lock>
        ble_sm_insert(proc);
   27c8a:	4620      	mov	r0, r4
   27c8c:	f7fe fc84 	bl	26598 <ble_sm_insert>
        ble_hs_unlock();
   27c90:	f7fb fefa 	bl	23a88 <ble_hs_unlock>
        res.execute = 1;
   27c94:	f89d 3014 	ldrb.w	r3, [sp, #20]
   27c98:	f043 0301 	orr.w	r3, r3, #1
   27c9c:	f88d 3014 	strb.w	r3, [sp, #20]
    if (proc != NULL) {
   27ca0:	b11c      	cbz	r4, 27caa <ble_sm_pair_initiate+0x7c>
        ble_sm_process_result(conn_handle, &res);
   27ca2:	4669      	mov	r1, sp
   27ca4:	4628      	mov	r0, r5
   27ca6:	f7ff fd62 	bl	2776e <ble_sm_process_result>
    return res.app_status;
   27caa:	9b00      	ldr	r3, [sp, #0]
   27cac:	e7d7      	b.n	27c5e <ble_sm_pair_initiate+0x30>
        res.app_status = BLE_HS_ENOMEM;
   27cae:	2306      	movs	r3, #6
   27cb0:	9300      	str	r3, [sp, #0]
   27cb2:	e7f5      	b.n	27ca0 <ble_sm_pair_initiate+0x72>

00027cb4 <ble_sm_enc_initiate>:
{
   27cb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27cb8:	b08e      	sub	sp, #56	; 0x38
   27cba:	4605      	mov	r5, r0
   27cbc:	4688      	mov	r8, r1
   27cbe:	4616      	mov	r6, r2
   27cc0:	461f      	mov	r7, r3
    memset(&res, 0, sizeof res);
   27cc2:	2400      	movs	r4, #0
   27cc4:	9408      	str	r4, [sp, #32]
   27cc6:	9409      	str	r4, [sp, #36]	; 0x24
   27cc8:	940a      	str	r4, [sp, #40]	; 0x28
   27cca:	940b      	str	r4, [sp, #44]	; 0x2c
   27ccc:	940c      	str	r4, [sp, #48]	; 0x30
   27cce:	940d      	str	r4, [sp, #52]	; 0x34
    ble_hs_lock();
   27cd0:	f7fb fed6 	bl	23a80 <ble_hs_lock>
    proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_NONE, -1, NULL);
   27cd4:	4623      	mov	r3, r4
   27cd6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   27cda:	21ff      	movs	r1, #255	; 0xff
   27cdc:	4628      	mov	r0, r5
   27cde:	f7ff fa6b 	bl	271b8 <ble_sm_proc_find>
    if (proc != NULL) {
   27ce2:	b158      	cbz	r0, 27cfc <ble_sm_enc_initiate+0x48>
        res.app_status = BLE_HS_EALREADY;
   27ce4:	2302      	movs	r3, #2
   27ce6:	9308      	str	r3, [sp, #32]
    ble_hs_unlock();
   27ce8:	f7fb fece 	bl	23a88 <ble_hs_unlock>
    ble_sm_process_result(conn_handle, &res);
   27cec:	a908      	add	r1, sp, #32
   27cee:	4628      	mov	r0, r5
   27cf0:	f7ff fd3d 	bl	2776e <ble_sm_process_result>
}
   27cf4:	9808      	ldr	r0, [sp, #32]
   27cf6:	b00e      	add	sp, #56	; 0x38
   27cf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        proc = ble_sm_proc_alloc();
   27cfc:	f7ff f930 	bl	26f60 <ble_sm_proc_alloc>
        if (proc == NULL) {
   27d00:	4603      	mov	r3, r0
   27d02:	b338      	cbz	r0, 27d54 <ble_sm_enc_initiate+0xa0>
            proc->conn_handle = conn_handle;
   27d04:	8145      	strh	r5, [r0, #10]
            proc->key_size = key_size;
   27d06:	f880 800f 	strb.w	r8, [r0, #15]
            proc->state = BLE_SM_PROC_STATE_ENC_RESTORE;
   27d0a:	2206      	movs	r2, #6
   27d0c:	7342      	strb	r2, [r0, #13]
            proc->flags |= BLE_SM_PROC_F_INITIATOR;
   27d0e:	7a02      	ldrb	r2, [r0, #8]
   27d10:	f042 0201 	orr.w	r2, r2, #1
   27d14:	7202      	strb	r2, [r0, #8]
            if (auth) {
   27d16:	9916      	ldr	r1, [sp, #88]	; 0x58
   27d18:	b111      	cbz	r1, 27d20 <ble_sm_enc_initiate+0x6c>
                proc->flags |= BLE_SM_PROC_F_AUTHENTICATED;
   27d1a:	f042 0208 	orr.w	r2, r2, #8
   27d1e:	7202      	strb	r2, [r0, #8]
            ble_sm_insert(proc);
   27d20:	4618      	mov	r0, r3
   27d22:	f7fe fc39 	bl	26598 <ble_sm_insert>
            cmd.connection_handle = conn_handle;
   27d26:	f8ad 5000 	strh.w	r5, [sp]
            cmd.encrypted_diversifier = ediv;
   27d2a:	f8ad 7002 	strh.w	r7, [sp, #2]
            cmd.random_number = rand_val;
   27d2e:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   27d32:	e9cd 2302 	strd	r2, r3, [sp, #8]
            memcpy(cmd.long_term_key, ltk, sizeof cmd.long_term_key);
   27d36:	ac04      	add	r4, sp, #16
   27d38:	6830      	ldr	r0, [r6, #0]
   27d3a:	6871      	ldr	r1, [r6, #4]
   27d3c:	68b2      	ldr	r2, [r6, #8]
   27d3e:	68f3      	ldr	r3, [r6, #12]
   27d40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            res.execute = 1;
   27d42:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
   27d46:	f043 0301 	orr.w	r3, r3, #1
   27d4a:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
            res.state_arg = &cmd;
   27d4e:	f8cd d030 	str.w	sp, [sp, #48]	; 0x30
   27d52:	e7c9      	b.n	27ce8 <ble_sm_enc_initiate+0x34>
            res.app_status = BLE_HS_ENOMEM;
   27d54:	2306      	movs	r3, #6
   27d56:	9308      	str	r3, [sp, #32]
   27d58:	e7c6      	b.n	27ce8 <ble_sm_enc_initiate+0x34>

00027d5a <ble_sm_sec_req_rx>:
{
   27d5a:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
   27d5e:	b0a8      	sub	sp, #160	; 0xa0
   27d60:	4606      	mov	r6, r0
   27d62:	460d      	mov	r5, r1
   27d64:	4614      	mov	r4, r2
    res->app_status = ble_hs_mbuf_pullup_base(om, sizeof(*cmd));
   27d66:	2101      	movs	r1, #1
   27d68:	4628      	mov	r0, r5
   27d6a:	f7fd fc72 	bl	25652 <ble_hs_mbuf_pullup_base>
   27d6e:	6020      	str	r0, [r4, #0]
    if (res->app_status != 0) {
   27d70:	b110      	cbz	r0, 27d78 <ble_sm_sec_req_rx+0x1e>
}
   27d72:	b028      	add	sp, #160	; 0xa0
   27d74:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
    cmd = (struct ble_sm_sec_req *)(*om)->om_data;
   27d78:	682b      	ldr	r3, [r5, #0]
   27d7a:	681d      	ldr	r5, [r3, #0]
    ble_hs_lock();
   27d7c:	f7fb fe80 	bl	23a80 <ble_hs_lock>
    conn = ble_hs_conn_find_assert(conn_handle);
   27d80:	4630      	mov	r0, r6
   27d82:	f7fc fce5 	bl	24750 <ble_hs_conn_find_assert>
    if (!(conn->bhc_flags & BLE_HS_CONN_F_MASTER)) {
   27d86:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   27d8a:	f013 0f01 	tst.w	r3, #1
   27d8e:	d132      	bne.n	27df6 <ble_sm_sec_req_rx+0x9c>
        res->app_status = BLE_HS_SM_US_ERR(BLE_SM_ERR_CMD_NOT_SUPP);
   27d90:	f240 4307 	movw	r3, #1031	; 0x407
   27d94:	6023      	str	r3, [r4, #0]
        res->sm_err = BLE_SM_ERR_CMD_NOT_SUPP;
   27d96:	2307      	movs	r3, #7
   27d98:	7123      	strb	r3, [r4, #4]
    ble_hs_unlock();
   27d9a:	f7fb fe75 	bl	23a88 <ble_hs_unlock>
    if (res->app_status == 0) {
   27d9e:	6823      	ldr	r3, [r4, #0]
   27da0:	2b00      	cmp	r3, #0
   27da2:	d1e6      	bne.n	27d72 <ble_sm_sec_req_rx+0x18>
        if (cmd->authreq & BLE_SM_PAIR_AUTHREQ_BOND) {
   27da4:	782b      	ldrb	r3, [r5, #0]
   27da6:	f013 0f01 	tst.w	r3, #1
   27daa:	d141      	bne.n	27e30 <ble_sm_sec_req_rx+0xd6>
            res->app_status = BLE_HS_ENOENT;
   27dac:	2305      	movs	r3, #5
   27dae:	6023      	str	r3, [r4, #0]
        if (res->app_status == 0) {
   27db0:	6823      	ldr	r3, [r4, #0]
   27db2:	b953      	cbnz	r3, 27dca <ble_sm_sec_req_rx+0x70>
            authreq_mitm = cmd->authreq & BLE_SM_PAIR_AUTHREQ_MITM;
   27db4:	782b      	ldrb	r3, [r5, #0]
            if (authreq_mitm && !value_sec.authenticated) {
   27db6:	f013 0f04 	tst.w	r3, #4
   27dba:	d006      	beq.n	27dca <ble_sm_sec_req_rx+0x70>
   27dbc:	f89d 309a 	ldrb.w	r3, [sp, #154]	; 0x9a
   27dc0:	f013 0f02 	tst.w	r3, #2
   27dc4:	d101      	bne.n	27dca <ble_sm_sec_req_rx+0x70>
                res->app_status = BLE_HS_EREJECT;
   27dc6:	2310      	movs	r3, #16
   27dc8:	6023      	str	r3, [r4, #0]
        if (res->app_status == 0) {
   27dca:	6823      	ldr	r3, [r4, #0]
   27dcc:	2b00      	cmp	r3, #0
   27dce:	d135      	bne.n	27e3c <ble_sm_sec_req_rx+0xe2>
                                                  value_sec.authenticated);
   27dd0:	f89d 209a 	ldrb.w	r2, [sp, #154]	; 0x9a
   27dd4:	f3c2 0240 	ubfx	r2, r2, #1, #1
            res->app_status = ble_sm_enc_initiate(conn_handle,
   27dd8:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
   27ddc:	f89d 1057 	ldrb.w	r1, [sp, #87]	; 0x57
   27de0:	9202      	str	r2, [sp, #8]
   27de2:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
   27de6:	e9cd 8900 	strd	r8, r9, [sp]
   27dea:	aa1a      	add	r2, sp, #104	; 0x68
   27dec:	4630      	mov	r0, r6
   27dee:	f7ff ff61 	bl	27cb4 <ble_sm_enc_initiate>
   27df2:	6020      	str	r0, [r4, #0]
   27df4:	e7bd      	b.n	27d72 <ble_sm_sec_req_rx+0x18>
        ble_hs_conn_addrs(conn, &addrs);
   27df6:	a905      	add	r1, sp, #20
   27df8:	f7fc fcf8 	bl	247ec <ble_hs_conn_addrs>
        memset(&key_sec, 0, sizeof key_sec);
   27dfc:	2300      	movs	r3, #0
   27dfe:	f8cd 3036 	str.w	r3, [sp, #54]	; 0x36
   27e02:	f8cd 303a 	str.w	r3, [sp, #58]	; 0x3a
   27e06:	f8cd 303e 	str.w	r3, [sp, #62]	; 0x3e
   27e0a:	f8cd 3042 	str.w	r3, [sp, #66]	; 0x42
   27e0e:	f8cd 3046 	str.w	r3, [sp, #70]	; 0x46
   27e12:	f8cd 304a 	str.w	r3, [sp, #74]	; 0x4a
   27e16:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
        key_sec.peer_addr = addrs.peer_id_addr;
   27e1a:	ab28      	add	r3, sp, #160	; 0xa0
   27e1c:	f853 0d85 	ldr.w	r0, [r3, #-133]!
   27e20:	900c      	str	r0, [sp, #48]	; 0x30
   27e22:	889a      	ldrh	r2, [r3, #4]
   27e24:	799b      	ldrb	r3, [r3, #6]
   27e26:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
   27e2a:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
   27e2e:	e7b4      	b.n	27d9a <ble_sm_sec_req_rx+0x40>
            res->app_status = ble_store_read_peer_sec(&key_sec, &value_sec);
   27e30:	a914      	add	r1, sp, #80	; 0x50
   27e32:	a80c      	add	r0, sp, #48	; 0x30
   27e34:	f000 fdce 	bl	289d4 <ble_store_read_peer_sec>
   27e38:	6020      	str	r0, [r4, #0]
   27e3a:	e7b9      	b.n	27db0 <ble_sm_sec_req_rx+0x56>
            res->app_status = ble_sm_pair_initiate(conn_handle);
   27e3c:	4630      	mov	r0, r6
   27e3e:	f7ff fef6 	bl	27c2e <ble_sm_pair_initiate>
   27e42:	6020      	str	r0, [r4, #0]
   27e44:	e795      	b.n	27d72 <ble_sm_sec_req_rx+0x18>

00027e46 <ble_sm_connection_broken>:
    return res.app_status;
}

void
ble_sm_connection_broken(uint16_t conn_handle)
{
   27e46:	b500      	push	{lr}
   27e48:	b087      	sub	sp, #28
    struct ble_sm_result res;

    memset(&res, 0, sizeof res);
   27e4a:	2300      	movs	r3, #0
   27e4c:	9301      	str	r3, [sp, #4]
   27e4e:	9302      	str	r3, [sp, #8]
   27e50:	9303      	str	r3, [sp, #12]
   27e52:	9304      	str	r3, [sp, #16]
   27e54:	9305      	str	r3, [sp, #20]
    res.app_status = BLE_HS_ENOTCONN;
   27e56:	2307      	movs	r3, #7
   27e58:	9300      	str	r3, [sp, #0]
    res.enc_cb = 1;
   27e5a:	2302      	movs	r3, #2
   27e5c:	f88d 3014 	strb.w	r3, [sp, #20]

    ble_sm_process_result(conn_handle, &res);
   27e60:	4669      	mov	r1, sp
   27e62:	f7ff fc84 	bl	2776e <ble_sm_process_result>
}
   27e66:	b007      	add	sp, #28
   27e68:	f85d fb04 	ldr.w	pc, [sp], #4

00027e6c <ble_sm_init>:

int
ble_sm_init(void)
{
   27e6c:	b510      	push	{r4, lr}
   27e6e:	b082      	sub	sp, #8
    int rc;

    STAILQ_INIT(&ble_sm_procs);
   27e70:	4b0a      	ldr	r3, [pc, #40]	; (27e9c <ble_sm_init+0x30>)
   27e72:	2200      	movs	r2, #0
   27e74:	601a      	str	r2, [r3, #0]
   27e76:	605b      	str	r3, [r3, #4]

    rc = os_mempool_init(&ble_sm_proc_pool,
   27e78:	4b09      	ldr	r3, [pc, #36]	; (27ea0 <ble_sm_init+0x34>)
   27e7a:	9300      	str	r3, [sp, #0]
   27e7c:	4b09      	ldr	r3, [pc, #36]	; (27ea4 <ble_sm_init+0x38>)
   27e7e:	f44f 72c0 	mov.w	r2, #384	; 0x180
   27e82:	2101      	movs	r1, #1
   27e84:	4808      	ldr	r0, [pc, #32]	; (27ea8 <ble_sm_init+0x3c>)
   27e86:	f7e5 fe7d 	bl	db84 <os_mempool_init>
                         MYNEWT_VAL(BLE_SM_MAX_PROCS),
                         sizeof (struct ble_sm_proc),
                         ble_sm_proc_mem,
                         "ble_sm_proc_pool");
    if (rc != 0) {
   27e8a:	4604      	mov	r4, r0
   27e8c:	b110      	cbz	r0, 27e94 <ble_sm_init+0x28>
    }

    ble_sm_sc_init();

    return 0;
}
   27e8e:	4620      	mov	r0, r4
   27e90:	b002      	add	sp, #8
   27e92:	bd10      	pop	{r4, pc}
    ble_sm_sc_init();
   27e94:	f000 fd14 	bl	288c0 <ble_sm_sc_init>
    return 0;
   27e98:	e7f9      	b.n	27e8e <ble_sm_init+0x22>
   27e9a:	bf00      	nop
   27e9c:	20002dd8 	.word	0x20002dd8
   27ea0:	00032618 	.word	0x00032618
   27ea4:	20002c3c 	.word	0x20002c3c
   27ea8:	20002dbc 	.word	0x20002dbc

00027eac <ble_sm_create_chan>:
}
#endif

struct ble_l2cap_chan *
ble_sm_create_chan(uint16_t conn_handle)
{
   27eac:	b508      	push	{r3, lr}
    struct ble_l2cap_chan *chan;

    chan = ble_l2cap_chan_alloc(conn_handle);
   27eae:	f7fd ff25 	bl	25cfc <ble_l2cap_chan_alloc>
    if (chan == NULL) {
   27eb2:	4603      	mov	r3, r0
   27eb4:	b130      	cbz	r0, 27ec4 <ble_sm_create_chan+0x18>
        return NULL;
    }

    chan->scid = BLE_L2CAP_CID_SM;
   27eb6:	2206      	movs	r2, #6
   27eb8:	8102      	strh	r2, [r0, #8]
    chan->dcid = BLE_L2CAP_CID_SM;
   27eba:	80c2      	strh	r2, [r0, #6]
    chan->my_mtu = BLE_SM_MTU;
   27ebc:	2241      	movs	r2, #65	; 0x41
   27ebe:	8142      	strh	r2, [r0, #10]
    chan->rx_fn = ble_sm_rx;
   27ec0:	4a01      	ldr	r2, [pc, #4]	; (27ec8 <ble_sm_create_chan+0x1c>)
   27ec2:	6182      	str	r2, [r0, #24]

    return chan;
}
   27ec4:	4618      	mov	r0, r3
   27ec6:	bd08      	pop	{r3, pc}
   27ec8:	0002793d 	.word	0x0002793d

00027ecc <ble_sm_cmd_get>:
#include "host/ble_sm.h"
#include "ble_hs_priv.h"

void *
ble_sm_cmd_get(uint8_t opcode, size_t len, struct os_mbuf **txom)
{
   27ecc:	b570      	push	{r4, r5, r6, lr}
   27ece:	4606      	mov	r6, r0
   27ed0:	460c      	mov	r4, r1
   27ed2:	4615      	mov	r5, r2
    struct ble_sm_hdr *hdr;

    *txom = ble_hs_mbuf_l2cap_pkt();
   27ed4:	f7fd fb9c 	bl	25610 <ble_hs_mbuf_l2cap_pkt>
   27ed8:	6028      	str	r0, [r5, #0]
    if (*txom == NULL) {
   27eda:	b178      	cbz	r0, 27efc <ble_sm_cmd_get+0x30>
        return NULL;
    }

    if (os_mbuf_extend(*txom, sizeof(*hdr) + len) == NULL) {
   27edc:	1c61      	adds	r1, r4, #1
   27ede:	b289      	uxth	r1, r1
   27ee0:	f7e5 fcce 	bl	d880 <os_mbuf_extend>
   27ee4:	4604      	mov	r4, r0
   27ee6:	b128      	cbz	r0, 27ef4 <ble_sm_cmd_get+0x28>
        os_mbuf_free_chain(*txom);
        return NULL;
    }

    hdr = (struct ble_sm_hdr *)(*txom)->om_data;
   27ee8:	682b      	ldr	r3, [r5, #0]

    hdr->opcode = opcode;
   27eea:	681c      	ldr	r4, [r3, #0]
   27eec:	f804 6b01 	strb.w	r6, [r4], #1

    return hdr->data;
}
   27ef0:	4620      	mov	r0, r4
   27ef2:	bd70      	pop	{r4, r5, r6, pc}
        os_mbuf_free_chain(*txom);
   27ef4:	6828      	ldr	r0, [r5, #0]
   27ef6:	f7e5 fa93 	bl	d420 <os_mbuf_free_chain>
        return NULL;
   27efa:	e7f9      	b.n	27ef0 <ble_sm_cmd_get+0x24>
        return NULL;
   27efc:	2400      	movs	r4, #0
   27efe:	e7f7      	b.n	27ef0 <ble_sm_cmd_get+0x24>

00027f00 <ble_sm_tx>:

/* this function consumes tx os_mbuf */
int
ble_sm_tx(uint16_t conn_handle, struct os_mbuf *txom)
{
   27f00:	b510      	push	{r4, lr}
   27f02:	b082      	sub	sp, #8
   27f04:	460c      	mov	r4, r1
    struct ble_l2cap_chan *chan;
    struct ble_hs_conn *conn;

    BLE_HS_DBG_ASSERT(ble_hs_locked_by_cur_task());

    STATS_INC(ble_l2cap_stats, sm_tx);
   27f06:	4a08      	ldr	r2, [pc, #32]	; (27f28 <ble_sm_tx+0x28>)
   27f08:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   27f0a:	3301      	adds	r3, #1
   27f0c:	62d3      	str	r3, [r2, #44]	; 0x2c

    ble_hs_misc_conn_chan_find_reqd(conn_handle, BLE_L2CAP_CID_SM,
   27f0e:	ab01      	add	r3, sp, #4
   27f10:	466a      	mov	r2, sp
   27f12:	2106      	movs	r1, #6
   27f14:	f7fd fbe2 	bl	256dc <ble_hs_misc_conn_chan_find_reqd>
                                    &conn, &chan);
    return ble_l2cap_tx(conn, chan, txom);
   27f18:	4622      	mov	r2, r4
   27f1a:	9901      	ldr	r1, [sp, #4]
   27f1c:	9800      	ldr	r0, [sp, #0]
   27f1e:	f7fd ffe0 	bl	25ee2 <ble_l2cap_tx>
}
   27f22:	b002      	add	sp, #8
   27f24:	bd10      	pop	{r4, pc}
   27f26:	bf00      	nop
   27f28:	2000413c 	.word	0x2000413c

00027f2c <ble_sm_sc_initiator_txes_confirm>:
static int
ble_sm_sc_initiator_txes_confirm(struct ble_sm_proc *proc)
{
    BLE_HS_DBG_ASSERT(proc->flags & BLE_SM_PROC_F_SC);

    return proc->pair_alg != BLE_SM_PAIR_ALG_JW &&
   27f2c:	7b03      	ldrb	r3, [r0, #12]
   27f2e:	b12b      	cbz	r3, 27f3c <ble_sm_sc_initiator_txes_confirm+0x10>
   27f30:	2b03      	cmp	r3, #3
   27f32:	d001      	beq.n	27f38 <ble_sm_sc_initiator_txes_confirm+0xc>
   27f34:	2001      	movs	r0, #1
           proc->pair_alg != BLE_SM_PAIR_ALG_NUMCMP;
}
   27f36:	4770      	bx	lr
    return proc->pair_alg != BLE_SM_PAIR_ALG_JW &&
   27f38:	2000      	movs	r0, #0
   27f3a:	4770      	bx	lr
   27f3c:	2000      	movs	r0, #0
   27f3e:	4770      	bx	lr

00027f40 <ble_sm_sc_responder_verifies_random>:
static int
ble_sm_sc_responder_verifies_random(struct ble_sm_proc *proc)
{
    BLE_HS_DBG_ASSERT(proc->flags & BLE_SM_PROC_F_SC);

    return proc->pair_alg != BLE_SM_PAIR_ALG_JW &&
   27f40:	7b03      	ldrb	r3, [r0, #12]
   27f42:	b12b      	cbz	r3, 27f50 <ble_sm_sc_responder_verifies_random+0x10>
   27f44:	2b03      	cmp	r3, #3
   27f46:	d001      	beq.n	27f4c <ble_sm_sc_responder_verifies_random+0xc>
   27f48:	2001      	movs	r0, #1
           proc->pair_alg != BLE_SM_PAIR_ALG_NUMCMP;
}
   27f4a:	4770      	bx	lr
    return proc->pair_alg != BLE_SM_PAIR_ALG_JW &&
   27f4c:	2000      	movs	r0, #0
   27f4e:	4770      	bx	lr
   27f50:	2000      	movs	r0, #0
   27f52:	4770      	bx	lr

00027f54 <ble_sm_sc_gen_ri>:
ble_sm_sc_gen_ri(struct ble_sm_proc *proc)
{
    int byte;
    int bit;

    switch (proc->pair_alg) {
   27f54:	7b03      	ldrb	r3, [r0, #12]
   27f56:	2b03      	cmp	r3, #3
   27f58:	d81d      	bhi.n	27f96 <ble_sm_sc_gen_ri+0x42>
   27f5a:	e8df f003 	tbb	[pc, r3]
   27f5e:	0702      	.short	0x0702
   27f60:	0202      	.short	0x0202
    case BLE_SM_PAIR_ALG_JW:
    case BLE_SM_PAIR_ALG_NUMCMP:
    case BLE_SM_PAIR_ALG_OOB:
        proc->ri = 0;
   27f62:	2300      	movs	r3, #0
   27f64:	f880 3101 	strb.w	r3, [r0, #257]	; 0x101
        return 0;
   27f68:	4618      	mov	r0, r3
   27f6a:	4770      	bx	lr

    case BLE_SM_PAIR_ALG_PASSKEY:
        BLE_HS_DBG_ASSERT(proc->passkey_bits_exchanged <
                          BLE_SM_SC_PASSKEY_BITS);

        byte = proc->passkey_bits_exchanged / 8;
   27f6c:	f890 3100 	ldrb.w	r3, [r0, #256]	; 0x100
        bit = proc->passkey_bits_exchanged % 8;
   27f70:	f003 0107 	and.w	r1, r3, #7
        proc->ri = 0x80 | !!(proc->tk[byte] & (1 << bit));
   27f74:	eb00 02d3 	add.w	r2, r0, r3, lsr #3
   27f78:	7f92      	ldrb	r2, [r2, #30]
   27f7a:	410a      	asrs	r2, r1
   27f7c:	f012 0f01 	tst.w	r2, #1
   27f80:	d007      	beq.n	27f92 <ble_sm_sc_gen_ri+0x3e>
   27f82:	2281      	movs	r2, #129	; 0x81
   27f84:	f880 2101 	strb.w	r2, [r0, #257]	; 0x101

        proc->passkey_bits_exchanged++;
   27f88:	3301      	adds	r3, #1
   27f8a:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100

        return 0;
   27f8e:	2000      	movs	r0, #0
   27f90:	4770      	bx	lr
        proc->ri = 0x80 | !!(proc->tk[byte] & (1 << bit));
   27f92:	2280      	movs	r2, #128	; 0x80
   27f94:	e7f6      	b.n	27f84 <ble_sm_sc_gen_ri+0x30>

    default:
        BLE_HS_DBG_ASSERT(0);
        return BLE_HS_EUNKNOWN;
   27f96:	2011      	movs	r0, #17
    }
}
   27f98:	4770      	bx	lr

00027f9a <ble_sm_sc_random_advance>:
 * Advances the supplied procedure object to the next state after it has
 * completed the random state.
 */
static int
ble_sm_sc_random_advance(struct ble_sm_proc *proc)
{
   27f9a:	b508      	push	{r3, lr}
    int rc;

    if (proc->pair_alg != BLE_SM_PAIR_ALG_PASSKEY ||
   27f9c:	7b03      	ldrb	r3, [r0, #12]
   27f9e:	2b01      	cmp	r3, #1
   27fa0:	d003      	beq.n	27faa <ble_sm_sc_random_advance+0x10>
        proc->passkey_bits_exchanged >= BLE_SM_SC_PASSKEY_BITS) {

        proc->state = BLE_SM_PROC_STATE_DHKEY_CHECK;
   27fa2:	230a      	movs	r3, #10
   27fa4:	7343      	strb	r3, [r0, #13]
        if (rc != 0) {
            return rc;
        }
    }

    return 0;
   27fa6:	2000      	movs	r0, #0
}
   27fa8:	bd08      	pop	{r3, pc}
        proc->passkey_bits_exchanged >= BLE_SM_SC_PASSKEY_BITS) {
   27faa:	f890 3100 	ldrb.w	r3, [r0, #256]	; 0x100
    if (proc->pair_alg != BLE_SM_PAIR_ALG_PASSKEY ||
   27fae:	2b13      	cmp	r3, #19
   27fb0:	d8f7      	bhi.n	27fa2 <ble_sm_sc_random_advance+0x8>
        proc->state = BLE_SM_PROC_STATE_CONFIRM;
   27fb2:	2301      	movs	r3, #1
   27fb4:	7343      	strb	r3, [r0, #13]
        rc = ble_sm_gen_pair_rand(ble_sm_our_pair_rand(proc));
   27fb6:	f7ff fd86 	bl	27ac6 <ble_sm_our_pair_rand>
   27fba:	f7ff f8bb 	bl	27134 <ble_sm_gen_pair_rand>
   27fbe:	e7f3      	b.n	27fa8 <ble_sm_sc_random_advance+0xe>

00027fc0 <ble_sm_sc_gen_numcmp>:
{
   27fc0:	b510      	push	{r4, lr}
   27fc2:	b082      	sub	sp, #8
   27fc4:	4602      	mov	r2, r0
   27fc6:	460c      	mov	r4, r1
    if (proc->flags & BLE_SM_PROC_F_INITIATOR) {
   27fc8:	7a03      	ldrb	r3, [r0, #8]
   27fca:	f013 0f01 	tst.w	r3, #1
   27fce:	d014      	beq.n	27ffa <ble_sm_sc_gen_numcmp+0x3a>
        pkb = proc->pub_key_peer.x;
   27fd0:	f500 7181 	add.w	r1, r0, #258	; 0x102
        pka = ble_sm_sc_pub_key;
   27fd4:	480b      	ldr	r0, [pc, #44]	; (28004 <ble_sm_sc_gen_numcmp+0x44>)
    res->app_status = ble_sm_alg_g2(pka, pkb, proc->randm, proc->rands,
   27fd6:	f104 030c 	add.w	r3, r4, #12
   27fda:	9300      	str	r3, [sp, #0]
   27fdc:	f102 034e 	add.w	r3, r2, #78	; 0x4e
   27fe0:	323e      	adds	r2, #62	; 0x3e
   27fe2:	f001 f8ed 	bl	291c0 <ble_sm_alg_g2>
   27fe6:	6020      	str	r0, [r4, #0]
    if (res->app_status != 0) {
   27fe8:	b128      	cbz	r0, 27ff6 <ble_sm_sc_gen_numcmp+0x36>
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   27fea:	2308      	movs	r3, #8
   27fec:	7123      	strb	r3, [r4, #4]
        res->enc_cb = 1;
   27fee:	7d23      	ldrb	r3, [r4, #20]
   27ff0:	f043 0302 	orr.w	r3, r3, #2
   27ff4:	7523      	strb	r3, [r4, #20]
}
   27ff6:	b002      	add	sp, #8
   27ff8:	bd10      	pop	{r4, pc}
        pka = proc->pub_key_peer.x;
   27ffa:	f500 7081 	add.w	r0, r0, #258	; 0x102
        pkb = ble_sm_sc_pub_key;
   27ffe:	4901      	ldr	r1, [pc, #4]	; (28004 <ble_sm_sc_gen_numcmp+0x44>)
   28000:	e7e9      	b.n	27fd6 <ble_sm_sc_gen_numcmp+0x16>
   28002:	bf00      	nop
   28004:	20002e04 	.word	0x20002e04

00028008 <ble_sm_gen_pub_priv>:
{
   28008:	b508      	push	{r3, lr}
    rc = ble_sm_alg_gen_key_pair(pub, priv);
   2800a:	f001 f963 	bl	292d4 <ble_sm_alg_gen_key_pair>
}
   2800e:	bd08      	pop	{r3, pc}

00028010 <ble_sm_sc_ensure_keys_generated>:
{
   28010:	b508      	push	{r3, lr}
    if (!ble_sm_sc_keys_generated) {
   28012:	4b0b      	ldr	r3, [pc, #44]	; (28040 <ble_sm_sc_ensure_keys_generated+0x30>)
   28014:	781b      	ldrb	r3, [r3, #0]
   28016:	b943      	cbnz	r3, 2802a <ble_sm_sc_ensure_keys_generated+0x1a>
        rc = ble_sm_gen_pub_priv(ble_sm_sc_pub_key, ble_sm_sc_priv_key);
   28018:	490a      	ldr	r1, [pc, #40]	; (28044 <ble_sm_sc_ensure_keys_generated+0x34>)
   2801a:	480b      	ldr	r0, [pc, #44]	; (28048 <ble_sm_sc_ensure_keys_generated+0x38>)
   2801c:	f7ff fff4 	bl	28008 <ble_sm_gen_pub_priv>
        if (rc != 0) {
   28020:	4603      	mov	r3, r0
   28022:	b958      	cbnz	r0, 2803c <ble_sm_sc_ensure_keys_generated+0x2c>
        ble_sm_sc_keys_generated = 1;
   28024:	4b06      	ldr	r3, [pc, #24]	; (28040 <ble_sm_sc_ensure_keys_generated+0x30>)
   28026:	2201      	movs	r2, #1
   28028:	701a      	strb	r2, [r3, #0]
    ble_hs_log_flat_buf(&ble_sm_sc_pub_key, 64);
   2802a:	2140      	movs	r1, #64	; 0x40
   2802c:	4806      	ldr	r0, [pc, #24]	; (28048 <ble_sm_sc_ensure_keys_generated+0x38>)
   2802e:	f7fd facf 	bl	255d0 <ble_hs_log_flat_buf>
    ble_hs_log_flat_buf(&ble_sm_sc_priv_key, 32);
   28032:	2120      	movs	r1, #32
   28034:	4803      	ldr	r0, [pc, #12]	; (28044 <ble_sm_sc_ensure_keys_generated+0x34>)
   28036:	f7fd facb 	bl	255d0 <ble_hs_log_flat_buf>
    return 0;
   2803a:	2300      	movs	r3, #0
}
   2803c:	4618      	mov	r0, r3
   2803e:	bd08      	pop	{r3, pc}
   28040:	20002de0 	.word	0x20002de0
   28044:	20002de4 	.word	0x20002de4
   28048:	20002e04 	.word	0x20002e04

0002804c <ble_sm_sc_dhkey_addrs>:
}

static void
ble_sm_sc_dhkey_addrs(struct ble_sm_proc *proc, ble_addr_t *our_addr,
                      ble_addr_t *peer_addr)
{
   2804c:	b530      	push	{r4, r5, lr}
   2804e:	b089      	sub	sp, #36	; 0x24
   28050:	460d      	mov	r5, r1
   28052:	4614      	mov	r4, r2
    struct ble_hs_conn_addrs addrs;
    struct ble_hs_conn *conn;

    conn = ble_hs_conn_find_assert(proc->conn_handle);
   28054:	8940      	ldrh	r0, [r0, #10]
   28056:	f7fc fb7b 	bl	24750 <ble_hs_conn_find_assert>

    ble_hs_conn_addrs(conn, &addrs);
   2805a:	a901      	add	r1, sp, #4
   2805c:	f7fc fbc6 	bl	247ec <ble_hs_conn_addrs>

    *our_addr = addrs.our_ota_addr;
   28060:	ab08      	add	r3, sp, #32
   28062:	f853 2d0e 	ldr.w	r2, [r3, #-14]!
   28066:	602a      	str	r2, [r5, #0]
   28068:	889a      	ldrh	r2, [r3, #4]
   2806a:	799b      	ldrb	r3, [r3, #6]
   2806c:	80aa      	strh	r2, [r5, #4]
   2806e:	71ab      	strb	r3, [r5, #6]
    *peer_addr = addrs.peer_ota_addr;
   28070:	ab08      	add	r3, sp, #32
   28072:	f853 2d07 	ldr.w	r2, [r3, #-7]!
   28076:	6022      	str	r2, [r4, #0]
   28078:	889a      	ldrh	r2, [r3, #4]
   2807a:	799b      	ldrb	r3, [r3, #6]
   2807c:	80a2      	strh	r2, [r4, #4]
   2807e:	71a3      	strb	r3, [r4, #6]
}
   28080:	b009      	add	sp, #36	; 0x24
   28082:	bd30      	pop	{r4, r5, pc}

00028084 <ble_sm_sc_io_action>:
{
   28084:	b410      	push	{r4}
    if (pair_req->oob_data_flag == BLE_SM_PAIR_OOB_YES ||
   28086:	7c83      	ldrb	r3, [r0, #18]
   28088:	2b01      	cmp	r3, #1
   2808a:	d00d      	beq.n	280a8 <ble_sm_sc_io_action+0x24>
        pair_rsp->oob_data_flag == BLE_SM_PAIR_OOB_YES) {
   2808c:	7e43      	ldrb	r3, [r0, #25]
    if (pair_req->oob_data_flag == BLE_SM_PAIR_OOB_YES ||
   2808e:	2b01      	cmp	r3, #1
   28090:	d00a      	beq.n	280a8 <ble_sm_sc_io_action+0x24>
    } else if (!(pair_req->authreq & BLE_SM_PAIR_AUTHREQ_MITM) &&
   28092:	7cc3      	ldrb	r3, [r0, #19]
   28094:	f013 0f04 	tst.w	r3, #4
   28098:	d110      	bne.n	280bc <ble_sm_sc_io_action+0x38>
               !(pair_rsp->authreq & BLE_SM_PAIR_AUTHREQ_MITM)) {
   2809a:	7e83      	ldrb	r3, [r0, #26]
    } else if (!(pair_req->authreq & BLE_SM_PAIR_AUTHREQ_MITM) &&
   2809c:	f013 0f04 	tst.w	r3, #4
   280a0:	d10c      	bne.n	280bc <ble_sm_sc_io_action+0x38>
        *action = BLE_SM_IOACT_NONE;
   280a2:	2300      	movs	r3, #0
   280a4:	700b      	strb	r3, [r1, #0]
   280a6:	e001      	b.n	280ac <ble_sm_sc_io_action+0x28>
        *action = BLE_SM_IOACT_OOB_SC;
   280a8:	2305      	movs	r3, #5
   280aa:	700b      	strb	r3, [r1, #0]
    switch (*action) {
   280ac:	780b      	ldrb	r3, [r1, #0]
   280ae:	2b05      	cmp	r3, #5
   280b0:	d83c      	bhi.n	2812c <ble_sm_sc_io_action+0xa8>
   280b2:	e8df f003 	tbb	[pc, r3]
   280b6:	3b1e      	.short	0x3b1e
   280b8:	23332b2b 	.word	0x23332b2b
    } else if (pair_req->io_cap >= BLE_SM_IO_CAP_RESERVED ||
   280bc:	7c43      	ldrb	r3, [r0, #17]
   280be:	2b04      	cmp	r3, #4
   280c0:	d802      	bhi.n	280c8 <ble_sm_sc_io_action+0x44>
               pair_rsp->io_cap >= BLE_SM_IO_CAP_RESERVED) {
   280c2:	7e02      	ldrb	r2, [r0, #24]
    } else if (pair_req->io_cap >= BLE_SM_IO_CAP_RESERVED ||
   280c4:	2a04      	cmp	r2, #4
   280c6:	d902      	bls.n	280ce <ble_sm_sc_io_action+0x4a>
        *action = BLE_SM_IOACT_NONE;
   280c8:	2300      	movs	r3, #0
   280ca:	700b      	strb	r3, [r1, #0]
   280cc:	e7ee      	b.n	280ac <ble_sm_sc_io_action+0x28>
    } else if (proc->flags & BLE_SM_PROC_F_INITIATOR) {
   280ce:	7a04      	ldrb	r4, [r0, #8]
   280d0:	f014 0f01 	tst.w	r4, #1
   280d4:	d006      	beq.n	280e4 <ble_sm_sc_io_action+0x60>
        *action = ble_sm_sc_init_ioa[pair_rsp->io_cap][pair_req->io_cap];
   280d6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   280da:	4c15      	ldr	r4, [pc, #84]	; (28130 <ble_sm_sc_io_action+0xac>)
   280dc:	4422      	add	r2, r4
   280de:	5cd3      	ldrb	r3, [r2, r3]
   280e0:	700b      	strb	r3, [r1, #0]
   280e2:	e7e3      	b.n	280ac <ble_sm_sc_io_action+0x28>
        *action = ble_sm_sc_resp_ioa[pair_rsp->io_cap][pair_req->io_cap];
   280e4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   280e8:	4c12      	ldr	r4, [pc, #72]	; (28134 <ble_sm_sc_io_action+0xb0>)
   280ea:	4422      	add	r2, r4
   280ec:	5cd3      	ldrb	r3, [r2, r3]
   280ee:	700b      	strb	r3, [r1, #0]
   280f0:	e7dc      	b.n	280ac <ble_sm_sc_io_action+0x28>
        proc->pair_alg = BLE_SM_PAIR_ALG_JW;
   280f2:	2300      	movs	r3, #0
   280f4:	7303      	strb	r3, [r0, #12]
    return 0;
   280f6:	4618      	mov	r0, r3
}
   280f8:	bc10      	pop	{r4}
   280fa:	4770      	bx	lr
        proc->pair_alg = BLE_SM_PAIR_ALG_OOB;
   280fc:	2302      	movs	r3, #2
   280fe:	7303      	strb	r3, [r0, #12]
        proc->flags |= BLE_SM_PROC_F_AUTHENTICATED;
   28100:	7a03      	ldrb	r3, [r0, #8]
   28102:	f043 0308 	orr.w	r3, r3, #8
   28106:	7203      	strb	r3, [r0, #8]
    return 0;
   28108:	2000      	movs	r0, #0
        break;
   2810a:	e7f5      	b.n	280f8 <ble_sm_sc_io_action+0x74>
        proc->pair_alg = BLE_SM_PAIR_ALG_PASSKEY;
   2810c:	2301      	movs	r3, #1
   2810e:	7303      	strb	r3, [r0, #12]
        proc->flags |= BLE_SM_PROC_F_AUTHENTICATED;
   28110:	7a03      	ldrb	r3, [r0, #8]
   28112:	f043 0308 	orr.w	r3, r3, #8
   28116:	7203      	strb	r3, [r0, #8]
    return 0;
   28118:	2000      	movs	r0, #0
        break;
   2811a:	e7ed      	b.n	280f8 <ble_sm_sc_io_action+0x74>
        proc->pair_alg = BLE_SM_PAIR_ALG_NUMCMP;
   2811c:	2303      	movs	r3, #3
   2811e:	7303      	strb	r3, [r0, #12]
        proc->flags |= BLE_SM_PROC_F_AUTHENTICATED;
   28120:	7a03      	ldrb	r3, [r0, #8]
   28122:	f043 0308 	orr.w	r3, r3, #8
   28126:	7203      	strb	r3, [r0, #8]
    return 0;
   28128:	2000      	movs	r0, #0
        break;
   2812a:	e7e5      	b.n	280f8 <ble_sm_sc_io_action+0x74>
        return BLE_HS_EINVAL;
   2812c:	2003      	movs	r0, #3
   2812e:	e7e3      	b.n	280f8 <ble_sm_sc_io_action+0x74>
   28130:	00032680 	.word	0x00032680
   28134:	0003269c 	.word	0x0003269c

00028138 <ble_sm_dhkey_check_process>:

static void
ble_sm_dhkey_check_process(struct ble_sm_proc *proc,
                           struct ble_sm_dhkey_check *cmd,
                           struct ble_sm_result *res)
{
   28138:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2813c:	b090      	sub	sp, #64	; 0x40
   2813e:	4604      	mov	r4, r0
   28140:	4689      	mov	r9, r1
   28142:	4615      	mov	r5, r2
    ble_addr_t peer_addr;
    uint8_t *iocap;
    uint8_t ioact;
    int rc;

    if (proc->flags & BLE_SM_PROC_F_INITIATOR) {
   28144:	7a03      	ldrb	r3, [r0, #8]
   28146:	f013 0f01 	tst.w	r3, #1
   2814a:	d055      	beq.n	281f8 <ble_sm_dhkey_check_process+0xc0>
        struct ble_sm_pair_cmd *pair_rsp;

        pair_rsp  = (struct ble_sm_pair_cmd *) &proc->pair_rsp[1];
        iocap = &pair_rsp->io_cap;
   2814c:	f100 0a18 	add.w	sl, r0, #24

        if (proc->pair_alg == BLE_SM_PAIR_ALG_OOB) {
   28150:	7b03      	ldrb	r3, [r0, #12]
   28152:	2b02      	cmp	r3, #2
   28154:	d035      	beq.n	281c2 <ble_sm_dhkey_check_process+0x8a>
                memset(proc->tk, 0, 16);
            }
        }
    }

    ble_sm_sc_dhkey_addrs(proc, &our_addr, &peer_addr);
   28156:	aa08      	add	r2, sp, #32
   28158:	a90a      	add	r1, sp, #40	; 0x28
   2815a:	4620      	mov	r0, r4
   2815c:	f7ff ff76 	bl	2804c <ble_sm_sc_dhkey_addrs>
    BLE_HS_LOG(DEBUG, "tk=");
    ble_hs_log_flat_buf(proc->tk, 16);
   28160:	f104 061e 	add.w	r6, r4, #30
   28164:	2110      	movs	r1, #16
   28166:	4630      	mov	r0, r6
   28168:	f7fd fa32 	bl	255d0 <ble_hs_log_flat_buf>
    BLE_HS_LOG(DEBUG, "\n");

    res->app_status = ble_sm_alg_f6(proc->mackey,
   2816c:	f504 77a1 	add.w	r7, r4, #322	; 0x142
                                    ble_sm_peer_pair_rand(proc),
   28170:	4620      	mov	r0, r4
   28172:	f7ff fd02 	bl	27b7a <ble_sm_peer_pair_rand>
   28176:	4680      	mov	r8, r0
                                    ble_sm_our_pair_rand(proc),
   28178:	4620      	mov	r0, r4
   2817a:	f7ff fca4 	bl	27ac6 <ble_sm_our_pair_rand>
    res->app_status = ble_sm_alg_f6(proc->mackey,
   2817e:	ab0c      	add	r3, sp, #48	; 0x30
   28180:	9305      	str	r3, [sp, #20]
   28182:	f10d 0329 	add.w	r3, sp, #41	; 0x29
   28186:	9304      	str	r3, [sp, #16]
   28188:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   2818c:	9303      	str	r3, [sp, #12]
   2818e:	f10d 0321 	add.w	r3, sp, #33	; 0x21
   28192:	9302      	str	r3, [sp, #8]
   28194:	f89d 3020 	ldrb.w	r3, [sp, #32]
   28198:	9301      	str	r3, [sp, #4]
   2819a:	f8cd a000 	str.w	sl, [sp]
   2819e:	4633      	mov	r3, r6
   281a0:	4602      	mov	r2, r0
   281a2:	4641      	mov	r1, r8
   281a4:	4638      	mov	r0, r7
   281a6:	f000 ff73 	bl	29090 <ble_sm_alg_f6>
   281aa:	6028      	str	r0, [r5, #0]
                                    proc->tk, iocap,
                                    peer_addr.type, peer_addr.val,
                                    our_addr.type, our_addr.val,
                                    exp_value);
    if (res->app_status != 0) {
   281ac:	2800      	cmp	r0, #0
   281ae:	d043      	beq.n	28238 <ble_sm_dhkey_check_process+0x100>
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   281b0:	2308      	movs	r3, #8
   281b2:	712b      	strb	r3, [r5, #4]
        res->enc_cb = 1;
   281b4:	7d2b      	ldrb	r3, [r5, #20]
   281b6:	f043 0302 	orr.w	r3, r3, #2
   281ba:	752b      	strb	r3, [r5, #20]
            proc->state = BLE_SM_PROC_STATE_ENC_START;
        }

        res->execute = 1;
    }
}
   281bc:	b010      	add	sp, #64	; 0x40
   281be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            if (pair_rsp->oob_data_flag) {
   281c2:	7e43      	ldrb	r3, [r0, #25]
   281c4:	b173      	cbz	r3, 281e4 <ble_sm_dhkey_check_process+0xac>
                memcpy(proc->tk, proc->oob_data_local->r, 16);
   281c6:	f8d0 2174 	ldr.w	r2, [r0, #372]	; 0x174
   281ca:	6816      	ldr	r6, [r2, #0]
   281cc:	6850      	ldr	r0, [r2, #4]
   281ce:	6891      	ldr	r1, [r2, #8]
   281d0:	68d2      	ldr	r2, [r2, #12]
   281d2:	f8c4 601e 	str.w	r6, [r4, #30]
   281d6:	f8c4 0022 	str.w	r0, [r4, #34]	; 0x22
   281da:	f8c4 1026 	str.w	r1, [r4, #38]	; 0x26
   281de:	f8c4 202a 	str.w	r2, [r4, #42]	; 0x2a
   281e2:	e7b8      	b.n	28156 <ble_sm_dhkey_check_process+0x1e>
                memset(proc->tk, 0, 16);
   281e4:	2200      	movs	r2, #0
   281e6:	f8c0 201e 	str.w	r2, [r0, #30]
   281ea:	f8c0 2022 	str.w	r2, [r0, #34]	; 0x22
   281ee:	f8c0 2026 	str.w	r2, [r0, #38]	; 0x26
   281f2:	f8c0 202a 	str.w	r2, [r0, #42]	; 0x2a
   281f6:	e7ae      	b.n	28156 <ble_sm_dhkey_check_process+0x1e>
        iocap = &pair_req->io_cap;
   281f8:	f100 0a11 	add.w	sl, r0, #17
        if (proc->pair_alg == BLE_SM_PAIR_ALG_OOB) {
   281fc:	7b03      	ldrb	r3, [r0, #12]
   281fe:	2b02      	cmp	r3, #2
   28200:	d1a9      	bne.n	28156 <ble_sm_dhkey_check_process+0x1e>
            if (pair_req->oob_data_flag) {
   28202:	7c83      	ldrb	r3, [r0, #18]
   28204:	b173      	cbz	r3, 28224 <ble_sm_dhkey_check_process+0xec>
                memcpy(proc->tk, proc->oob_data_local->r, 16);
   28206:	f8d0 2174 	ldr.w	r2, [r0, #372]	; 0x174
   2820a:	6816      	ldr	r6, [r2, #0]
   2820c:	6850      	ldr	r0, [r2, #4]
   2820e:	6891      	ldr	r1, [r2, #8]
   28210:	68d2      	ldr	r2, [r2, #12]
   28212:	f8c4 601e 	str.w	r6, [r4, #30]
   28216:	f8c4 0022 	str.w	r0, [r4, #34]	; 0x22
   2821a:	f8c4 1026 	str.w	r1, [r4, #38]	; 0x26
   2821e:	f8c4 202a 	str.w	r2, [r4, #42]	; 0x2a
   28222:	e798      	b.n	28156 <ble_sm_dhkey_check_process+0x1e>
                memset(proc->tk, 0, 16);
   28224:	2200      	movs	r2, #0
   28226:	f8c0 201e 	str.w	r2, [r0, #30]
   2822a:	f8c0 2022 	str.w	r2, [r0, #34]	; 0x22
   2822e:	f8c0 2026 	str.w	r2, [r0, #38]	; 0x26
   28232:	f8c0 202a 	str.w	r2, [r0, #42]	; 0x2a
   28236:	e78e      	b.n	28156 <ble_sm_dhkey_check_process+0x1e>
    if (memcmp(cmd->value, exp_value, 16) != 0) {
   28238:	2210      	movs	r2, #16
   2823a:	a90c      	add	r1, sp, #48	; 0x30
   2823c:	4648      	mov	r0, r9
   2823e:	f7e6 fb8b 	bl	e958 <memcmp>
   28242:	b148      	cbz	r0, 28258 <ble_sm_dhkey_check_process+0x120>
        res->sm_err = BLE_SM_ERR_DHKEY;
   28244:	230b      	movs	r3, #11
   28246:	712b      	strb	r3, [r5, #4]
        res->app_status = BLE_HS_SM_US_ERR(BLE_SM_ERR_DHKEY);
   28248:	f240 430b 	movw	r3, #1035	; 0x40b
   2824c:	602b      	str	r3, [r5, #0]
        res->enc_cb = 1;
   2824e:	7d2b      	ldrb	r3, [r5, #20]
   28250:	f043 0302 	orr.w	r3, r3, #2
   28254:	752b      	strb	r3, [r5, #20]
        return;
   28256:	e7b1      	b.n	281bc <ble_sm_dhkey_check_process+0x84>
    rc = ble_sm_sc_io_action(proc, &ioact);
   28258:	f10d 011f 	add.w	r1, sp, #31
   2825c:	4620      	mov	r0, r4
   2825e:	f7ff ff11 	bl	28084 <ble_sm_sc_io_action>
    if (ble_sm_ioact_state(ioact) == proc->state) {
   28262:	f89d 001f 	ldrb.w	r0, [sp, #31]
   28266:	f7ff f9a1 	bl	275ac <ble_sm_ioact_state>
   2826a:	7b63      	ldrb	r3, [r4, #13]
   2826c:	4298      	cmp	r0, r3
   2826e:	d00f      	beq.n	28290 <ble_sm_dhkey_check_process+0x158>
    if (ble_sm_proc_can_advance(proc)) {
   28270:	4620      	mov	r0, r4
   28272:	f7ff f9ab 	bl	275cc <ble_sm_proc_can_advance>
   28276:	2800      	cmp	r0, #0
   28278:	d0a0      	beq.n	281bc <ble_sm_dhkey_check_process+0x84>
        if (proc->flags & BLE_SM_PROC_F_INITIATOR) {
   2827a:	7a23      	ldrb	r3, [r4, #8]
   2827c:	f013 0f01 	tst.w	r3, #1
   28280:	d001      	beq.n	28286 <ble_sm_dhkey_check_process+0x14e>
            proc->state = BLE_SM_PROC_STATE_ENC_START;
   28282:	2305      	movs	r3, #5
   28284:	7363      	strb	r3, [r4, #13]
        res->execute = 1;
   28286:	7d2b      	ldrb	r3, [r5, #20]
   28288:	f043 0301 	orr.w	r3, r3, #1
   2828c:	752b      	strb	r3, [r5, #20]
   2828e:	e795      	b.n	281bc <ble_sm_dhkey_check_process+0x84>
        proc->flags |= BLE_SM_PROC_F_ADVANCE_ON_IO;
   28290:	7a23      	ldrb	r3, [r4, #8]
   28292:	f043 0304 	orr.w	r3, r3, #4
   28296:	7223      	strb	r3, [r4, #8]
   28298:	e7ea      	b.n	28270 <ble_sm_dhkey_check_process+0x138>
	...

0002829c <ble_sm_sc_confirm_exec>:
{
   2829c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2829e:	b085      	sub	sp, #20
   282a0:	4605      	mov	r5, r0
   282a2:	460c      	mov	r4, r1
    rc = ble_sm_sc_gen_ri(proc);
   282a4:	f7ff fe56 	bl	27f54 <ble_sm_sc_gen_ri>
    if (rc != 0) {
   282a8:	b140      	cbz	r0, 282bc <ble_sm_sc_confirm_exec+0x20>
        res->app_status = rc;
   282aa:	6020      	str	r0, [r4, #0]
        res->enc_cb = 1;
   282ac:	7d23      	ldrb	r3, [r4, #20]
   282ae:	f043 0302 	orr.w	r3, r3, #2
   282b2:	7523      	strb	r3, [r4, #20]
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   282b4:	2308      	movs	r3, #8
   282b6:	7123      	strb	r3, [r4, #4]
}
   282b8:	b005      	add	sp, #20
   282ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cmd = ble_sm_cmd_get(BLE_SM_OP_PAIR_CONFIRM, sizeof(*cmd), &txom);
   282bc:	aa03      	add	r2, sp, #12
   282be:	2110      	movs	r1, #16
   282c0:	2003      	movs	r0, #3
   282c2:	f7ff fe03 	bl	27ecc <ble_sm_cmd_get>
    if (cmd == NULL) {
   282c6:	4607      	mov	r7, r0
   282c8:	b1c8      	cbz	r0, 282fe <ble_sm_sc_confirm_exec+0x62>
    rc = ble_sm_alg_f4(ble_sm_sc_pub_key, proc->pub_key_peer.x,
   282ca:	f505 7681 	add.w	r6, r5, #258	; 0x102
                       ble_sm_our_pair_rand(proc), proc->ri, cmd->value);
   282ce:	4628      	mov	r0, r5
   282d0:	f7ff fbf9 	bl	27ac6 <ble_sm_our_pair_rand>
    rc = ble_sm_alg_f4(ble_sm_sc_pub_key, proc->pub_key_peer.x,
   282d4:	f895 3101 	ldrb.w	r3, [r5, #257]	; 0x101
   282d8:	9700      	str	r7, [sp, #0]
   282da:	4602      	mov	r2, r0
   282dc:	4631      	mov	r1, r6
   282de:	4816      	ldr	r0, [pc, #88]	; (28338 <ble_sm_sc_confirm_exec+0x9c>)
   282e0:	f000 fe0a 	bl	28ef8 <ble_sm_alg_f4>
    if (rc != 0) {
   282e4:	4606      	mov	r6, r0
   282e6:	b198      	cbz	r0, 28310 <ble_sm_sc_confirm_exec+0x74>
        os_mbuf_free_chain(txom);
   282e8:	9803      	ldr	r0, [sp, #12]
   282ea:	f7e5 f899 	bl	d420 <os_mbuf_free_chain>
        res->app_status = rc;
   282ee:	6026      	str	r6, [r4, #0]
        res->enc_cb = 1;
   282f0:	7d23      	ldrb	r3, [r4, #20]
   282f2:	f043 0302 	orr.w	r3, r3, #2
   282f6:	7523      	strb	r3, [r4, #20]
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   282f8:	2308      	movs	r3, #8
   282fa:	7123      	strb	r3, [r4, #4]
        return;
   282fc:	e7dc      	b.n	282b8 <ble_sm_sc_confirm_exec+0x1c>
        res->app_status = rc;
   282fe:	2306      	movs	r3, #6
   28300:	6023      	str	r3, [r4, #0]
        res->enc_cb = 1;
   28302:	7d23      	ldrb	r3, [r4, #20]
   28304:	f043 0302 	orr.w	r3, r3, #2
   28308:	7523      	strb	r3, [r4, #20]
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   2830a:	2308      	movs	r3, #8
   2830c:	7123      	strb	r3, [r4, #4]
        return;
   2830e:	e7d3      	b.n	282b8 <ble_sm_sc_confirm_exec+0x1c>
    rc = ble_sm_tx(proc->conn_handle, txom);
   28310:	9903      	ldr	r1, [sp, #12]
   28312:	8968      	ldrh	r0, [r5, #10]
   28314:	f7ff fdf4 	bl	27f00 <ble_sm_tx>
    if (rc != 0) {
   28318:	b138      	cbz	r0, 2832a <ble_sm_sc_confirm_exec+0x8e>
        res->app_status = rc;
   2831a:	6020      	str	r0, [r4, #0]
        res->enc_cb = 1;
   2831c:	7d23      	ldrb	r3, [r4, #20]
   2831e:	f043 0302 	orr.w	r3, r3, #2
   28322:	7523      	strb	r3, [r4, #20]
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   28324:	2308      	movs	r3, #8
   28326:	7123      	strb	r3, [r4, #4]
        return;
   28328:	e7c6      	b.n	282b8 <ble_sm_sc_confirm_exec+0x1c>
    if (!(proc->flags & BLE_SM_PROC_F_INITIATOR)) {
   2832a:	7a2b      	ldrb	r3, [r5, #8]
   2832c:	f013 0f01 	tst.w	r3, #1
   28330:	d1c2      	bne.n	282b8 <ble_sm_sc_confirm_exec+0x1c>
        proc->state = BLE_SM_PROC_STATE_RANDOM;
   28332:	2302      	movs	r3, #2
   28334:	736b      	strb	r3, [r5, #13]
   28336:	e7bf      	b.n	282b8 <ble_sm_sc_confirm_exec+0x1c>
   28338:	20002e04 	.word	0x20002e04

0002833c <ble_sm_sc_random_exec>:
{
   2833c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2833e:	b083      	sub	sp, #12
   28340:	4606      	mov	r6, r0
   28342:	460c      	mov	r4, r1
    cmd = ble_sm_cmd_get(BLE_SM_OP_PAIR_RANDOM, sizeof(*cmd), &txom);
   28344:	aa01      	add	r2, sp, #4
   28346:	2110      	movs	r1, #16
   28348:	2004      	movs	r0, #4
   2834a:	f7ff fdbf 	bl	27ecc <ble_sm_cmd_get>
    if (cmd == NULL) {
   2834e:	b1c0      	cbz	r0, 28382 <ble_sm_sc_random_exec+0x46>
   28350:	4605      	mov	r5, r0
    memcpy(cmd->value, ble_sm_our_pair_rand(proc), 16);
   28352:	4630      	mov	r0, r6
   28354:	f7ff fbb7 	bl	27ac6 <ble_sm_our_pair_rand>
   28358:	6807      	ldr	r7, [r0, #0]
   2835a:	6841      	ldr	r1, [r0, #4]
   2835c:	6882      	ldr	r2, [r0, #8]
   2835e:	68c3      	ldr	r3, [r0, #12]
   28360:	602f      	str	r7, [r5, #0]
   28362:	6069      	str	r1, [r5, #4]
   28364:	60aa      	str	r2, [r5, #8]
   28366:	60eb      	str	r3, [r5, #12]
    rc = ble_sm_tx(proc->conn_handle, txom);
   28368:	9901      	ldr	r1, [sp, #4]
   2836a:	8970      	ldrh	r0, [r6, #10]
   2836c:	f7ff fdc8 	bl	27f00 <ble_sm_tx>
    if (rc != 0) {
   28370:	b178      	cbz	r0, 28392 <ble_sm_sc_random_exec+0x56>
        res->app_status = rc;
   28372:	6020      	str	r0, [r4, #0]
        res->enc_cb = 1;
   28374:	7d23      	ldrb	r3, [r4, #20]
   28376:	f043 0302 	orr.w	r3, r3, #2
   2837a:	7523      	strb	r3, [r4, #20]
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   2837c:	2308      	movs	r3, #8
   2837e:	7123      	strb	r3, [r4, #4]
        return;
   28380:	e005      	b.n	2838e <ble_sm_sc_random_exec+0x52>
        res->enc_cb = 1;
   28382:	7d23      	ldrb	r3, [r4, #20]
   28384:	f043 0302 	orr.w	r3, r3, #2
   28388:	7523      	strb	r3, [r4, #20]
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   2838a:	2308      	movs	r3, #8
   2838c:	7123      	strb	r3, [r4, #4]
}
   2838e:	b003      	add	sp, #12
   28390:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (!(proc->flags & BLE_SM_PROC_F_INITIATOR)) {
   28392:	7a33      	ldrb	r3, [r6, #8]
   28394:	f013 0f01 	tst.w	r3, #1
   28398:	d1f9      	bne.n	2838e <ble_sm_sc_random_exec+0x52>
        rc = ble_sm_sc_random_advance(proc);
   2839a:	4630      	mov	r0, r6
   2839c:	f7ff fdfd 	bl	27f9a <ble_sm_sc_random_advance>
        if (rc != 0) {
   283a0:	b138      	cbz	r0, 283b2 <ble_sm_sc_random_exec+0x76>
            res->app_status = rc;
   283a2:	6020      	str	r0, [r4, #0]
            res->enc_cb = 1;
   283a4:	7d23      	ldrb	r3, [r4, #20]
   283a6:	f043 0302 	orr.w	r3, r3, #2
   283aa:	7523      	strb	r3, [r4, #20]
            res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   283ac:	2308      	movs	r3, #8
   283ae:	7123      	strb	r3, [r4, #4]
            return;
   283b0:	e7ed      	b.n	2838e <ble_sm_sc_random_exec+0x52>
        rc = ble_sm_sc_io_action(proc, &ioact);
   283b2:	f10d 0103 	add.w	r1, sp, #3
   283b6:	4630      	mov	r0, r6
   283b8:	f7ff fe64 	bl	28084 <ble_sm_sc_io_action>
        if (ble_sm_ioact_state(ioact) == proc->state &&
   283bc:	f89d 0003 	ldrb.w	r0, [sp, #3]
   283c0:	f7ff f8f4 	bl	275ac <ble_sm_ioact_state>
   283c4:	7b73      	ldrb	r3, [r6, #13]
   283c6:	4298      	cmp	r0, r3
   283c8:	d1e1      	bne.n	2838e <ble_sm_sc_random_exec+0x52>
            !(proc->flags & BLE_SM_PROC_F_IO_INJECTED)) {
   283ca:	7a33      	ldrb	r3, [r6, #8]
        if (ble_sm_ioact_state(ioact) == proc->state &&
   283cc:	f013 0f02 	tst.w	r3, #2
   283d0:	d1dd      	bne.n	2838e <ble_sm_sc_random_exec+0x52>
            res->passkey_params.action = ioact;
   283d2:	f89d 3003 	ldrb.w	r3, [sp, #3]
   283d6:	7223      	strb	r3, [r4, #8]
            ble_sm_sc_gen_numcmp(proc, res);
   283d8:	4621      	mov	r1, r4
   283da:	4630      	mov	r0, r6
   283dc:	f7ff fdf0 	bl	27fc0 <ble_sm_sc_gen_numcmp>
   283e0:	e7d5      	b.n	2838e <ble_sm_sc_random_exec+0x52>
	...

000283e4 <ble_sm_sc_random_rx>:
{
   283e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   283e8:	b090      	sub	sp, #64	; 0x40
   283ea:	4604      	mov	r4, r0
   283ec:	460d      	mov	r5, r1
    if (proc->pair_alg != BLE_SM_PAIR_ALG_OOB && (
   283ee:	7b03      	ldrb	r3, [r0, #12]
   283f0:	2b02      	cmp	r3, #2
   283f2:	d033      	beq.n	2845c <ble_sm_sc_random_rx+0x78>
        proc->flags & BLE_SM_PROC_F_INITIATOR ||
   283f4:	7a03      	ldrb	r3, [r0, #8]
    if (proc->pair_alg != BLE_SM_PAIR_ALG_OOB && (
   283f6:	f013 0f01 	tst.w	r3, #1
   283fa:	d102      	bne.n	28402 <ble_sm_sc_random_rx+0x1e>
        ble_sm_sc_responder_verifies_random(proc))) {
   283fc:	f7ff fda0 	bl	27f40 <ble_sm_sc_responder_verifies_random>
        proc->flags & BLE_SM_PROC_F_INITIATOR ||
   28400:	b360      	cbz	r0, 2845c <ble_sm_sc_random_rx+0x78>
        ble_hs_log_flat_buf(proc->tk, 16);
   28402:	2110      	movs	r1, #16
   28404:	f104 001e 	add.w	r0, r4, #30
   28408:	f7fd f8e2 	bl	255d0 <ble_hs_log_flat_buf>
        rc = ble_sm_alg_f4(proc->pub_key_peer.x, ble_sm_sc_pub_key,
   2840c:	f504 7681 	add.w	r6, r4, #258	; 0x102
                           ble_sm_peer_pair_rand(proc), proc->ri,
   28410:	4620      	mov	r0, r4
   28412:	f7ff fbb2 	bl	27b7a <ble_sm_peer_pair_rand>
        rc = ble_sm_alg_f4(proc->pub_key_peer.x, ble_sm_sc_pub_key,
   28416:	f894 3101 	ldrb.w	r3, [r4, #257]	; 0x101
   2841a:	aa0c      	add	r2, sp, #48	; 0x30
   2841c:	9200      	str	r2, [sp, #0]
   2841e:	4602      	mov	r2, r0
   28420:	495d      	ldr	r1, [pc, #372]	; (28598 <ble_sm_sc_random_rx+0x1b4>)
   28422:	4630      	mov	r0, r6
   28424:	f000 fd68 	bl	28ef8 <ble_sm_alg_f4>
        if (rc != 0) {
   28428:	b138      	cbz	r0, 2843a <ble_sm_sc_random_rx+0x56>
            res->app_status = rc;
   2842a:	6028      	str	r0, [r5, #0]
            res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   2842c:	2308      	movs	r3, #8
   2842e:	712b      	strb	r3, [r5, #4]
            res->enc_cb = 1;
   28430:	7d2b      	ldrb	r3, [r5, #20]
   28432:	f043 0302 	orr.w	r3, r3, #2
   28436:	752b      	strb	r3, [r5, #20]
            return;
   28438:	e03a      	b.n	284b0 <ble_sm_sc_random_rx+0xcc>
        if (memcmp(proc->confirm_peer, confirm_val, 16) != 0) {
   2843a:	2210      	movs	r2, #16
   2843c:	a90c      	add	r1, sp, #48	; 0x30
   2843e:	f104 002e 	add.w	r0, r4, #46	; 0x2e
   28442:	f7e6 fa89 	bl	e958 <memcmp>
   28446:	b148      	cbz	r0, 2845c <ble_sm_sc_random_rx+0x78>
            res->app_status = BLE_HS_SM_US_ERR(BLE_SM_ERR_CONFIRM_MISMATCH);
   28448:	f240 4304 	movw	r3, #1028	; 0x404
   2844c:	602b      	str	r3, [r5, #0]
            res->sm_err = BLE_SM_ERR_CONFIRM_MISMATCH;
   2844e:	2304      	movs	r3, #4
   28450:	712b      	strb	r3, [r5, #4]
            res->enc_cb = 1;
   28452:	7d2b      	ldrb	r3, [r5, #20]
   28454:	f043 0302 	orr.w	r3, r3, #2
   28458:	752b      	strb	r3, [r5, #20]
            return;
   2845a:	e029      	b.n	284b0 <ble_sm_sc_random_rx+0xcc>
    ble_sm_ia_ra(proc, &iat, ia, &rat, ra);
   2845c:	f10d 0828 	add.w	r8, sp, #40	; 0x28
   28460:	af08      	add	r7, sp, #32
   28462:	9700      	str	r7, [sp, #0]
   28464:	f10d 031d 	add.w	r3, sp, #29
   28468:	4642      	mov	r2, r8
   2846a:	f10d 011e 	add.w	r1, sp, #30
   2846e:	4620      	mov	r0, r4
   28470:	f7fe fe65 	bl	2713e <ble_sm_ia_ra>
    rc = ble_sm_alg_f5(proc->dhkey, proc->randm, proc->rands,
   28474:	f89d 301e 	ldrb.w	r3, [sp, #30]
   28478:	f89d 201d 	ldrb.w	r2, [sp, #29]
                       iat, ia, rat, ra, proc->mackey, proc->ltk);
   2847c:	f504 71a1 	add.w	r1, r4, #322	; 0x142
   28480:	f104 065e 	add.w	r6, r4, #94	; 0x5e
    rc = ble_sm_alg_f5(proc->dhkey, proc->randm, proc->rands,
   28484:	9604      	str	r6, [sp, #16]
   28486:	9103      	str	r1, [sp, #12]
   28488:	9702      	str	r7, [sp, #8]
   2848a:	9201      	str	r2, [sp, #4]
   2848c:	f8cd 8000 	str.w	r8, [sp]
   28490:	f104 024e 	add.w	r2, r4, #78	; 0x4e
   28494:	f104 013e 	add.w	r1, r4, #62	; 0x3e
   28498:	f504 70a9 	add.w	r0, r4, #338	; 0x152
   2849c:	f000 fd64 	bl	28f68 <ble_sm_alg_f5>
    if (rc != 0) {
   284a0:	b148      	cbz	r0, 284b6 <ble_sm_sc_random_rx+0xd2>
        res->app_status = rc;
   284a2:	6028      	str	r0, [r5, #0]
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   284a4:	2308      	movs	r3, #8
   284a6:	712b      	strb	r3, [r5, #4]
        res->enc_cb = 1;
   284a8:	7d2b      	ldrb	r3, [r5, #20]
   284aa:	f043 0302 	orr.w	r3, r3, #2
   284ae:	752b      	strb	r3, [r5, #20]
}
   284b0:	b010      	add	sp, #64	; 0x40
   284b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    memset(proc->ltk + proc->key_size, 0, sizeof proc->ltk - proc->key_size);
   284b6:	7be0      	ldrb	r0, [r4, #15]
   284b8:	f1c0 0210 	rsb	r2, r0, #16
   284bc:	2100      	movs	r1, #0
   284be:	4430      	add	r0, r6
   284c0:	f7e6 fa96 	bl	e9f0 <memset>
    memcpy(proc->our_keys.ltk, proc->ltk, sizeof proc->our_keys.ltk);
   284c4:	6837      	ldr	r7, [r6, #0]
   284c6:	6870      	ldr	r0, [r6, #4]
   284c8:	68b1      	ldr	r1, [r6, #8]
   284ca:	68f2      	ldr	r2, [r6, #12]
   284cc:	f8c4 7082 	str.w	r7, [r4, #130]	; 0x82
   284d0:	f8c4 0086 	str.w	r0, [r4, #134]	; 0x86
   284d4:	f8c4 108a 	str.w	r1, [r4, #138]	; 0x8a
   284d8:	f8c4 208e 	str.w	r2, [r4, #142]	; 0x8e
    proc->our_keys.ltk_valid = 1;
   284dc:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
    proc->our_keys.ediv = 0;
   284e0:	2700      	movs	r7, #0
   284e2:	f8a4 7072 	strh.w	r7, [r4, #114]	; 0x72
    proc->our_keys.rand_val = 0;
   284e6:	2000      	movs	r0, #0
   284e8:	2100      	movs	r1, #0
   284ea:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
    proc->our_keys.ediv_rand_valid = 1;
   284ee:	f043 0303 	orr.w	r3, r3, #3
   284f2:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
    proc->our_keys.key_size = proc->key_size;
   284f6:	7be2      	ldrb	r2, [r4, #15]
   284f8:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    memcpy(proc->peer_keys.ltk, proc->ltk, sizeof proc->peer_keys.ltk);
   284fc:	f8d6 8000 	ldr.w	r8, [r6]
   28500:	f8d6 e004 	ldr.w	lr, [r6, #4]
   28504:	f8d6 c008 	ldr.w	ip, [r6, #8]
   28508:	68f6      	ldr	r6, [r6, #12]
   2850a:	f8c4 80ca 	str.w	r8, [r4, #202]	; 0xca
   2850e:	f8c4 e0ce 	str.w	lr, [r4, #206]	; 0xce
   28512:	f8c4 c0d2 	str.w	ip, [r4, #210]	; 0xd2
   28516:	f8c4 60d6 	str.w	r6, [r4, #214]	; 0xd6
    proc->peer_keys.ltk_valid = 1;
   2851a:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
    proc->peer_keys.ediv = 0;
   2851e:	f8a4 70ba 	strh.w	r7, [r4, #186]	; 0xba
    proc->peer_keys.rand_val = 0;
   28522:	e9c4 0130 	strd	r0, r1, [r4, #192]	; 0xc0
    proc->peer_keys.ediv_rand_valid = 1;
   28526:	f043 0303 	orr.w	r3, r3, #3
   2852a:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
    proc->peer_keys.key_size = proc->key_size;
   2852e:	f884 20c9 	strb.w	r2, [r4, #201]	; 0xc9
    if (proc->flags & BLE_SM_PROC_F_INITIATOR) {
   28532:	7a23      	ldrb	r3, [r4, #8]
   28534:	f013 0f01 	tst.w	r3, #1
   28538:	d107      	bne.n	2854a <ble_sm_sc_random_rx+0x166>
        if (proc->pair_alg == BLE_SM_PAIR_ALG_OOB &&
   2853a:	7b22      	ldrb	r2, [r4, #12]
   2853c:	2a02      	cmp	r2, #2
   2853e:	d024      	beq.n	2858a <ble_sm_sc_random_rx+0x1a6>
            res->execute = 1;
   28540:	7d2b      	ldrb	r3, [r5, #20]
   28542:	f043 0301 	orr.w	r3, r3, #1
   28546:	752b      	strb	r3, [r5, #20]
   28548:	e7b2      	b.n	284b0 <ble_sm_sc_random_rx+0xcc>
        ble_sm_sc_random_advance(proc);
   2854a:	4620      	mov	r0, r4
   2854c:	f7ff fd25 	bl	27f9a <ble_sm_sc_random_advance>
        rc = ble_sm_sc_io_action(proc, &ioact);
   28550:	f10d 011f 	add.w	r1, sp, #31
   28554:	4620      	mov	r0, r4
   28556:	f7ff fd95 	bl	28084 <ble_sm_sc_io_action>
        if (ble_sm_ioact_state(ioact) == proc->state &&
   2855a:	f89d 001f 	ldrb.w	r0, [sp, #31]
   2855e:	f7ff f825 	bl	275ac <ble_sm_ioact_state>
   28562:	7b63      	ldrb	r3, [r4, #13]
   28564:	4298      	cmp	r0, r3
   28566:	d004      	beq.n	28572 <ble_sm_sc_random_rx+0x18e>
            res->execute = 1;
   28568:	7d2b      	ldrb	r3, [r5, #20]
   2856a:	f043 0301 	orr.w	r3, r3, #1
   2856e:	752b      	strb	r3, [r5, #20]
   28570:	e79e      	b.n	284b0 <ble_sm_sc_random_rx+0xcc>
            !(proc->flags & BLE_SM_PROC_F_IO_INJECTED)) {
   28572:	7a23      	ldrb	r3, [r4, #8]
        if (ble_sm_ioact_state(ioact) == proc->state &&
   28574:	f013 0f02 	tst.w	r3, #2
   28578:	d1f6      	bne.n	28568 <ble_sm_sc_random_rx+0x184>
            res->passkey_params.action = ioact;
   2857a:	f89d 301f 	ldrb.w	r3, [sp, #31]
   2857e:	722b      	strb	r3, [r5, #8]
            ble_sm_sc_gen_numcmp(proc, res);
   28580:	4629      	mov	r1, r5
   28582:	4620      	mov	r0, r4
   28584:	f7ff fd1c 	bl	27fc0 <ble_sm_sc_gen_numcmp>
   28588:	e792      	b.n	284b0 <ble_sm_sc_random_rx+0xcc>
        if (proc->pair_alg == BLE_SM_PAIR_ALG_OOB &&
   2858a:	f013 0f02 	tst.w	r3, #2
   2858e:	d1d7      	bne.n	28540 <ble_sm_sc_random_rx+0x15c>
            proc->flags |= BLE_SM_PROC_F_ADVANCE_ON_IO;
   28590:	f043 0304 	orr.w	r3, r3, #4
   28594:	7223      	strb	r3, [r4, #8]
   28596:	e78b      	b.n	284b0 <ble_sm_sc_random_rx+0xcc>
   28598:	20002e04 	.word	0x20002e04

0002859c <ble_sm_sc_public_key_exec>:
{
   2859c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2859e:	b083      	sub	sp, #12
   285a0:	4607      	mov	r7, r0
   285a2:	460c      	mov	r4, r1
    res->app_status = ble_sm_sc_ensure_keys_generated();
   285a4:	f7ff fd34 	bl	28010 <ble_sm_sc_ensure_keys_generated>
   285a8:	6020      	str	r0, [r4, #0]
    if (res->app_status != 0) {
   285aa:	b138      	cbz	r0, 285bc <ble_sm_sc_public_key_exec+0x20>
        res->enc_cb = 1;
   285ac:	7d23      	ldrb	r3, [r4, #20]
   285ae:	f043 0302 	orr.w	r3, r3, #2
   285b2:	7523      	strb	r3, [r4, #20]
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   285b4:	2308      	movs	r3, #8
   285b6:	7123      	strb	r3, [r4, #4]
}
   285b8:	b003      	add	sp, #12
   285ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cmd = ble_sm_cmd_get(BLE_SM_OP_PAIR_PUBLIC_KEY, sizeof(*cmd), &txom);
   285bc:	aa01      	add	r2, sp, #4
   285be:	2140      	movs	r1, #64	; 0x40
   285c0:	200c      	movs	r0, #12
   285c2:	f7ff fc83 	bl	27ecc <ble_sm_cmd_get>
    if (!cmd) {
   285c6:	4606      	mov	r6, r0
   285c8:	b308      	cbz	r0, 2860e <ble_sm_sc_public_key_exec+0x72>
    memcpy(cmd->x, ble_sm_sc_pub_key + 0, 32);
   285ca:	4d2a      	ldr	r5, [pc, #168]	; (28674 <ble_sm_sc_public_key_exec+0xd8>)
   285cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   285ce:	6030      	str	r0, [r6, #0]
   285d0:	6071      	str	r1, [r6, #4]
   285d2:	60b2      	str	r2, [r6, #8]
   285d4:	60f3      	str	r3, [r6, #12]
   285d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   285d8:	6130      	str	r0, [r6, #16]
   285da:	6171      	str	r1, [r6, #20]
   285dc:	61b2      	str	r2, [r6, #24]
   285de:	61f3      	str	r3, [r6, #28]
    memcpy(cmd->y, ble_sm_sc_pub_key + 32, 32);
   285e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   285e2:	6230      	str	r0, [r6, #32]
   285e4:	6271      	str	r1, [r6, #36]	; 0x24
   285e6:	62b2      	str	r2, [r6, #40]	; 0x28
   285e8:	62f3      	str	r3, [r6, #44]	; 0x2c
   285ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   285ec:	6330      	str	r0, [r6, #48]	; 0x30
   285ee:	6371      	str	r1, [r6, #52]	; 0x34
   285f0:	63b2      	str	r2, [r6, #56]	; 0x38
   285f2:	63f3      	str	r3, [r6, #60]	; 0x3c
    res->app_status = ble_sm_tx(proc->conn_handle, txom);
   285f4:	9901      	ldr	r1, [sp, #4]
   285f6:	8978      	ldrh	r0, [r7, #10]
   285f8:	f7ff fc82 	bl	27f00 <ble_sm_tx>
   285fc:	6020      	str	r0, [r4, #0]
    if (res->app_status != 0) {
   285fe:	b178      	cbz	r0, 28620 <ble_sm_sc_public_key_exec+0x84>
        res->enc_cb = 1;
   28600:	7d23      	ldrb	r3, [r4, #20]
   28602:	f043 0302 	orr.w	r3, r3, #2
   28606:	7523      	strb	r3, [r4, #20]
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   28608:	2308      	movs	r3, #8
   2860a:	7123      	strb	r3, [r4, #4]
        return;
   2860c:	e7d4      	b.n	285b8 <ble_sm_sc_public_key_exec+0x1c>
        res->app_status = BLE_HS_ENOMEM;
   2860e:	2306      	movs	r3, #6
   28610:	6023      	str	r3, [r4, #0]
        res->enc_cb = 1;
   28612:	7d23      	ldrb	r3, [r4, #20]
   28614:	f043 0302 	orr.w	r3, r3, #2
   28618:	7523      	strb	r3, [r4, #20]
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   2861a:	2308      	movs	r3, #8
   2861c:	7123      	strb	r3, [r4, #4]
        return;
   2861e:	e7cb      	b.n	285b8 <ble_sm_sc_public_key_exec+0x1c>
    if (!(proc->flags & BLE_SM_PROC_F_INITIATOR)) {
   28620:	7a3b      	ldrb	r3, [r7, #8]
   28622:	f013 0f01 	tst.w	r3, #1
   28626:	d1c7      	bne.n	285b8 <ble_sm_sc_public_key_exec+0x1c>
        if (proc->pair_alg == BLE_SM_PAIR_ALG_OOB) {
   28628:	7b3b      	ldrb	r3, [r7, #12]
   2862a:	2b02      	cmp	r3, #2
   2862c:	d01c      	beq.n	28668 <ble_sm_sc_public_key_exec+0xcc>
            proc->state = BLE_SM_PROC_STATE_CONFIRM;
   2862e:	2301      	movs	r3, #1
   28630:	737b      	strb	r3, [r7, #13]
        rc = ble_sm_sc_io_action(proc, &ioact);
   28632:	f10d 0103 	add.w	r1, sp, #3
   28636:	4638      	mov	r0, r7
   28638:	f7ff fd24 	bl	28084 <ble_sm_sc_io_action>
        if (ble_sm_ioact_state(ioact) == proc->state) {
   2863c:	f89d 0003 	ldrb.w	r0, [sp, #3]
   28640:	f7fe ffb4 	bl	275ac <ble_sm_ioact_state>
   28644:	7b7b      	ldrb	r3, [r7, #13]
   28646:	4298      	cmp	r0, r3
   28648:	d010      	beq.n	2866c <ble_sm_sc_public_key_exec+0xd0>
        if (ble_sm_proc_can_advance(proc) &&
   2864a:	4638      	mov	r0, r7
   2864c:	f7fe ffbe 	bl	275cc <ble_sm_proc_can_advance>
   28650:	2800      	cmp	r0, #0
   28652:	d0b1      	beq.n	285b8 <ble_sm_sc_public_key_exec+0x1c>
            !ble_sm_sc_initiator_txes_confirm(proc)) {
   28654:	4638      	mov	r0, r7
   28656:	f7ff fc69 	bl	27f2c <ble_sm_sc_initiator_txes_confirm>
        if (ble_sm_proc_can_advance(proc) &&
   2865a:	2800      	cmp	r0, #0
   2865c:	d1ac      	bne.n	285b8 <ble_sm_sc_public_key_exec+0x1c>
            res->execute = 1;
   2865e:	7d23      	ldrb	r3, [r4, #20]
   28660:	f043 0301 	orr.w	r3, r3, #1
   28664:	7523      	strb	r3, [r4, #20]
   28666:	e7a7      	b.n	285b8 <ble_sm_sc_public_key_exec+0x1c>
            proc->state = BLE_SM_PROC_STATE_RANDOM;
   28668:	737b      	strb	r3, [r7, #13]
   2866a:	e7e2      	b.n	28632 <ble_sm_sc_public_key_exec+0x96>
            res->passkey_params.action = ioact;
   2866c:	f89d 3003 	ldrb.w	r3, [sp, #3]
   28670:	7223      	strb	r3, [r4, #8]
   28672:	e7ea      	b.n	2864a <ble_sm_sc_public_key_exec+0xae>
   28674:	20002e04 	.word	0x20002e04

00028678 <ble_sm_sc_public_key_rx>:
{
   28678:	b5f0      	push	{r4, r5, r6, r7, lr}
   2867a:	b083      	sub	sp, #12
   2867c:	4606      	mov	r6, r0
   2867e:	460d      	mov	r5, r1
   28680:	4614      	mov	r4, r2
    res->app_status = ble_hs_mbuf_pullup_base(om, sizeof(*cmd));
   28682:	2140      	movs	r1, #64	; 0x40
   28684:	4628      	mov	r0, r5
   28686:	f7fc ffe4 	bl	25652 <ble_hs_mbuf_pullup_base>
   2868a:	6020      	str	r0, [r4, #0]
    if (res->app_status != 0) {
   2868c:	b128      	cbz	r0, 2869a <ble_sm_sc_public_key_rx+0x22>
        res->enc_cb = 1;
   2868e:	7d23      	ldrb	r3, [r4, #20]
   28690:	f043 0302 	orr.w	r3, r3, #2
   28694:	7523      	strb	r3, [r4, #20]
}
   28696:	b003      	add	sp, #12
   28698:	bdf0      	pop	{r4, r5, r6, r7, pc}
    res->app_status = ble_sm_sc_ensure_keys_generated();
   2869a:	f7ff fcb9 	bl	28010 <ble_sm_sc_ensure_keys_generated>
   2869e:	6020      	str	r0, [r4, #0]
    if (res->app_status != 0) {
   286a0:	b130      	cbz	r0, 286b0 <ble_sm_sc_public_key_rx+0x38>
        res->enc_cb = 1;
   286a2:	7d23      	ldrb	r3, [r4, #20]
   286a4:	f043 0302 	orr.w	r3, r3, #2
   286a8:	7523      	strb	r3, [r4, #20]
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   286aa:	2308      	movs	r3, #8
   286ac:	7123      	strb	r3, [r4, #4]
        return;
   286ae:	e7f2      	b.n	28696 <ble_sm_sc_public_key_rx+0x1e>
    cmd = (struct ble_sm_public_key *)(*om)->om_data;
   286b0:	682b      	ldr	r3, [r5, #0]
   286b2:	681d      	ldr	r5, [r3, #0]
    ble_hs_lock();
   286b4:	f7fb f9e4 	bl	23a80 <ble_hs_lock>
    proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_PUBLIC_KEY, -1,
   286b8:	2300      	movs	r3, #0
   286ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   286be:	2109      	movs	r1, #9
   286c0:	4630      	mov	r0, r6
   286c2:	f7fe fd79 	bl	271b8 <ble_sm_proc_find>
    if (proc == NULL) {
   286c6:	4606      	mov	r6, r0
   286c8:	b328      	cbz	r0, 28716 <ble_sm_sc_public_key_rx+0x9e>
        memcpy(&proc->pub_key_peer, cmd, sizeof(*cmd));
   286ca:	462b      	mov	r3, r5
   286cc:	f500 7281 	add.w	r2, r0, #258	; 0x102
   286d0:	3540      	adds	r5, #64	; 0x40
   286d2:	f8d3 c000 	ldr.w	ip, [r3]
   286d6:	685f      	ldr	r7, [r3, #4]
   286d8:	6898      	ldr	r0, [r3, #8]
   286da:	68d9      	ldr	r1, [r3, #12]
   286dc:	f8c2 c000 	str.w	ip, [r2]
   286e0:	6057      	str	r7, [r2, #4]
   286e2:	6090      	str	r0, [r2, #8]
   286e4:	60d1      	str	r1, [r2, #12]
   286e6:	3310      	adds	r3, #16
   286e8:	3210      	adds	r2, #16
   286ea:	42ab      	cmp	r3, r5
   286ec:	d1f1      	bne.n	286d2 <ble_sm_sc_public_key_rx+0x5a>
        rc = ble_sm_alg_gen_dhkey(proc->pub_key_peer.x,
   286ee:	f506 73a9 	add.w	r3, r6, #338	; 0x152
   286f2:	4a24      	ldr	r2, [pc, #144]	; (28784 <ble_sm_sc_public_key_rx+0x10c>)
   286f4:	f506 7191 	add.w	r1, r6, #290	; 0x122
   286f8:	f506 7081 	add.w	r0, r6, #258	; 0x102
   286fc:	f000 fdba 	bl	29274 <ble_sm_alg_gen_dhkey>
        if (rc != 0) {
   28700:	b180      	cbz	r0, 28724 <ble_sm_sc_public_key_rx+0xac>
            res->app_status = BLE_HS_SM_US_ERR(BLE_SM_ERR_DHKEY);
   28702:	f240 430b 	movw	r3, #1035	; 0x40b
   28706:	6023      	str	r3, [r4, #0]
            res->sm_err = BLE_SM_ERR_DHKEY;
   28708:	230b      	movs	r3, #11
   2870a:	7123      	strb	r3, [r4, #4]
            res->enc_cb = 1;
   2870c:	7d23      	ldrb	r3, [r4, #20]
   2870e:	f043 0302 	orr.w	r3, r3, #2
   28712:	7523      	strb	r3, [r4, #20]
   28714:	e003      	b.n	2871e <ble_sm_sc_public_key_rx+0xa6>
        res->app_status = BLE_HS_ENOENT;
   28716:	2305      	movs	r3, #5
   28718:	6023      	str	r3, [r4, #0]
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   2871a:	2308      	movs	r3, #8
   2871c:	7123      	strb	r3, [r4, #4]
    ble_hs_unlock();
   2871e:	f7fb f9b3 	bl	23a88 <ble_hs_unlock>
   28722:	e7b8      	b.n	28696 <ble_sm_sc_public_key_rx+0x1e>
            if (proc->flags & BLE_SM_PROC_F_INITIATOR) {
   28724:	7a33      	ldrb	r3, [r6, #8]
   28726:	f013 0f01 	tst.w	r3, #1
   2872a:	d025      	beq.n	28778 <ble_sm_sc_public_key_rx+0x100>
                if (proc->pair_alg == BLE_SM_PAIR_ALG_OOB) {
   2872c:	7b33      	ldrb	r3, [r6, #12]
   2872e:	2b02      	cmp	r3, #2
   28730:	d01c      	beq.n	2876c <ble_sm_sc_public_key_rx+0xf4>
                    proc->state = BLE_SM_PROC_STATE_CONFIRM;
   28732:	2301      	movs	r3, #1
   28734:	7373      	strb	r3, [r6, #13]
                rc = ble_sm_sc_io_action(proc, &ioact);
   28736:	f10d 0107 	add.w	r1, sp, #7
   2873a:	4630      	mov	r0, r6
   2873c:	f7ff fca2 	bl	28084 <ble_sm_sc_io_action>
                if (ble_sm_ioact_state(ioact) == proc->state) {
   28740:	f89d 0007 	ldrb.w	r0, [sp, #7]
   28744:	f7fe ff32 	bl	275ac <ble_sm_ioact_state>
   28748:	7b73      	ldrb	r3, [r6, #13]
   2874a:	4298      	cmp	r0, r3
   2874c:	d010      	beq.n	28770 <ble_sm_sc_public_key_rx+0xf8>
                if (ble_sm_proc_can_advance(proc) &&
   2874e:	4630      	mov	r0, r6
   28750:	f7fe ff3c 	bl	275cc <ble_sm_proc_can_advance>
   28754:	2800      	cmp	r0, #0
   28756:	d0e2      	beq.n	2871e <ble_sm_sc_public_key_rx+0xa6>
                    ble_sm_sc_initiator_txes_confirm(proc)) {
   28758:	4630      	mov	r0, r6
   2875a:	f7ff fbe7 	bl	27f2c <ble_sm_sc_initiator_txes_confirm>
                if (ble_sm_proc_can_advance(proc) &&
   2875e:	2800      	cmp	r0, #0
   28760:	d0dd      	beq.n	2871e <ble_sm_sc_public_key_rx+0xa6>
                    res->execute = 1;
   28762:	7d23      	ldrb	r3, [r4, #20]
   28764:	f043 0301 	orr.w	r3, r3, #1
   28768:	7523      	strb	r3, [r4, #20]
   2876a:	e7d8      	b.n	2871e <ble_sm_sc_public_key_rx+0xa6>
                    proc->state = BLE_SM_PROC_STATE_RANDOM;
   2876c:	7373      	strb	r3, [r6, #13]
   2876e:	e7e2      	b.n	28736 <ble_sm_sc_public_key_rx+0xbe>
                    res->passkey_params.action = ioact;
   28770:	f89d 3007 	ldrb.w	r3, [sp, #7]
   28774:	7223      	strb	r3, [r4, #8]
   28776:	e7ea      	b.n	2874e <ble_sm_sc_public_key_rx+0xd6>
                res->execute = 1;
   28778:	7d23      	ldrb	r3, [r4, #20]
   2877a:	f043 0301 	orr.w	r3, r3, #1
   2877e:	7523      	strb	r3, [r4, #20]
   28780:	e7cd      	b.n	2871e <ble_sm_sc_public_key_rx+0xa6>
   28782:	bf00      	nop
   28784:	20002de4 	.word	0x20002de4

00028788 <ble_sm_sc_dhkey_check_exec>:
{
   28788:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2878c:	b08d      	sub	sp, #52	; 0x34
   2878e:	4604      	mov	r4, r0
   28790:	460d      	mov	r5, r1
    if (proc->flags & BLE_SM_PROC_F_INITIATOR) {
   28792:	7a03      	ldrb	r3, [r0, #8]
   28794:	f013 0f01 	tst.w	r3, #1
   28798:	d036      	beq.n	28808 <ble_sm_sc_dhkey_check_exec+0x80>
        iocap = &pair_req->io_cap;
   2879a:	f100 0711 	add.w	r7, r0, #17
    if (proc->pair_alg == BLE_SM_PAIR_ALG_OOB) {
   2879e:	7b23      	ldrb	r3, [r4, #12]
   287a0:	2b02      	cmp	r3, #2
   287a2:	d034      	beq.n	2880e <ble_sm_sc_dhkey_check_exec+0x86>
    ble_sm_sc_dhkey_addrs(proc, &our_addr, &peer_addr);
   287a4:	aa08      	add	r2, sp, #32
   287a6:	a90a      	add	r1, sp, #40	; 0x28
   287a8:	4620      	mov	r0, r4
   287aa:	f7ff fc4f 	bl	2804c <ble_sm_sc_dhkey_addrs>
    cmd = ble_sm_cmd_get(BLE_SM_OP_PAIR_DHKEY_CHECK, sizeof(*cmd), &txom);
   287ae:	aa07      	add	r2, sp, #28
   287b0:	2110      	movs	r1, #16
   287b2:	200d      	movs	r0, #13
   287b4:	f7ff fb8a 	bl	27ecc <ble_sm_cmd_get>
    if (!cmd) {
   287b8:	4680      	mov	r8, r0
   287ba:	2800      	cmp	r0, #0
   287bc:	d04e      	beq.n	2885c <ble_sm_sc_dhkey_check_exec+0xd4>
    rc = ble_sm_alg_f6(proc->mackey, ble_sm_our_pair_rand(proc),
   287be:	f504 76a1 	add.w	r6, r4, #322	; 0x142
   287c2:	4620      	mov	r0, r4
   287c4:	f7ff f97f 	bl	27ac6 <ble_sm_our_pair_rand>
   287c8:	4681      	mov	r9, r0
                       ble_sm_peer_pair_rand(proc), proc->tk, iocap,
   287ca:	4620      	mov	r0, r4
   287cc:	f7ff f9d5 	bl	27b7a <ble_sm_peer_pair_rand>
    rc = ble_sm_alg_f6(proc->mackey, ble_sm_our_pair_rand(proc),
   287d0:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   287d4:	f89d 2020 	ldrb.w	r2, [sp, #32]
   287d8:	f8cd 8014 	str.w	r8, [sp, #20]
   287dc:	f10d 0121 	add.w	r1, sp, #33	; 0x21
   287e0:	9104      	str	r1, [sp, #16]
   287e2:	9203      	str	r2, [sp, #12]
   287e4:	f10d 0229 	add.w	r2, sp, #41	; 0x29
   287e8:	9202      	str	r2, [sp, #8]
   287ea:	9301      	str	r3, [sp, #4]
   287ec:	9700      	str	r7, [sp, #0]
   287ee:	f104 031e 	add.w	r3, r4, #30
   287f2:	4602      	mov	r2, r0
   287f4:	4649      	mov	r1, r9
   287f6:	4630      	mov	r0, r6
   287f8:	f000 fc4a 	bl	29090 <ble_sm_alg_f6>
    if (rc != 0) {
   287fc:	4606      	mov	r6, r0
   287fe:	b300      	cbz	r0, 28842 <ble_sm_sc_dhkey_check_exec+0xba>
        os_mbuf_free_chain(txom);
   28800:	9807      	ldr	r0, [sp, #28]
   28802:	f7e4 fe0d 	bl	d420 <os_mbuf_free_chain>
        goto err;
   28806:	e02a      	b.n	2885e <ble_sm_sc_dhkey_check_exec+0xd6>
        iocap = &pair_rsp->io_cap;
   28808:	f100 0718 	add.w	r7, r0, #24
   2880c:	e7c7      	b.n	2879e <ble_sm_sc_dhkey_check_exec+0x16>
        if (proc->oob_data_remote) {
   2880e:	f8d4 3178 	ldr.w	r3, [r4, #376]	; 0x178
   28812:	b163      	cbz	r3, 2882e <ble_sm_sc_dhkey_check_exec+0xa6>
            memcpy(proc->tk, proc->oob_data_remote->r, 16);
   28814:	f104 021e 	add.w	r2, r4, #30
   28818:	f8d3 c000 	ldr.w	ip, [r3]
   2881c:	685e      	ldr	r6, [r3, #4]
   2881e:	6898      	ldr	r0, [r3, #8]
   28820:	68d9      	ldr	r1, [r3, #12]
   28822:	f8c4 c01e 	str.w	ip, [r4, #30]
   28826:	6056      	str	r6, [r2, #4]
   28828:	6090      	str	r0, [r2, #8]
   2882a:	60d1      	str	r1, [r2, #12]
   2882c:	e7ba      	b.n	287a4 <ble_sm_sc_dhkey_check_exec+0x1c>
            memset(proc->tk, 0, 16);
   2882e:	2200      	movs	r2, #0
   28830:	f8c4 201e 	str.w	r2, [r4, #30]
   28834:	f8c4 2022 	str.w	r2, [r4, #34]	; 0x22
   28838:	f8c4 2026 	str.w	r2, [r4, #38]	; 0x26
   2883c:	f8c4 202a 	str.w	r2, [r4, #42]	; 0x2a
   28840:	e7b0      	b.n	287a4 <ble_sm_sc_dhkey_check_exec+0x1c>
    rc = ble_sm_tx(proc->conn_handle, txom);
   28842:	9907      	ldr	r1, [sp, #28]
   28844:	8960      	ldrh	r0, [r4, #10]
   28846:	f7ff fb5b 	bl	27f00 <ble_sm_tx>
    if (rc != 0) {
   2884a:	4606      	mov	r6, r0
   2884c:	b938      	cbnz	r0, 2885e <ble_sm_sc_dhkey_check_exec+0xd6>
    if (!(proc->flags & BLE_SM_PROC_F_INITIATOR)) {
   2884e:	7a23      	ldrb	r3, [r4, #8]
   28850:	f013 0f01 	tst.w	r3, #1
   28854:	d10a      	bne.n	2886c <ble_sm_sc_dhkey_check_exec+0xe4>
        proc->state = BLE_SM_PROC_STATE_LTK_START;
   28856:	2303      	movs	r3, #3
   28858:	7363      	strb	r3, [r4, #13]
   2885a:	e007      	b.n	2886c <ble_sm_sc_dhkey_check_exec+0xe4>
        rc = BLE_HS_ENOMEM;
   2885c:	2606      	movs	r6, #6
    res->app_status = rc;
   2885e:	602e      	str	r6, [r5, #0]
    res->enc_cb = 1;
   28860:	7d2b      	ldrb	r3, [r5, #20]
   28862:	f043 0302 	orr.w	r3, r3, #2
   28866:	752b      	strb	r3, [r5, #20]
    res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   28868:	2308      	movs	r3, #8
   2886a:	712b      	strb	r3, [r5, #4]
}
   2886c:	b00d      	add	sp, #52	; 0x34
   2886e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00028872 <ble_sm_sc_dhkey_check_rx>:

void
ble_sm_sc_dhkey_check_rx(uint16_t conn_handle, struct os_mbuf **om,
                         struct ble_sm_result *res)
{
   28872:	b570      	push	{r4, r5, r6, lr}
   28874:	4606      	mov	r6, r0
   28876:	460d      	mov	r5, r1
   28878:	4614      	mov	r4, r2
    struct ble_sm_dhkey_check *cmd;
    struct ble_sm_proc *proc;

    res->app_status = ble_hs_mbuf_pullup_base(om, sizeof(*cmd));
   2887a:	2110      	movs	r1, #16
   2887c:	4628      	mov	r0, r5
   2887e:	f7fc fee8 	bl	25652 <ble_hs_mbuf_pullup_base>
   28882:	6020      	str	r0, [r4, #0]
    if (res->app_status != 0) {
   28884:	b130      	cbz	r0, 28894 <ble_sm_sc_dhkey_check_rx+0x22>
        res->enc_cb = 1;
   28886:	7d23      	ldrb	r3, [r4, #20]
   28888:	f043 0302 	orr.w	r3, r3, #2
   2888c:	7523      	strb	r3, [r4, #20]
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   2888e:	2308      	movs	r3, #8
   28890:	7123      	strb	r3, [r4, #4]
        res->app_status = BLE_HS_ENOENT;
    } else {
        ble_sm_dhkey_check_process(proc, cmd, res);
    }
    ble_hs_unlock();
}
   28892:	bd70      	pop	{r4, r5, r6, pc}
    cmd = (struct ble_sm_dhkey_check *)(*om)->om_data;
   28894:	682b      	ldr	r3, [r5, #0]
   28896:	681d      	ldr	r5, [r3, #0]
    ble_hs_lock();
   28898:	f7fb f8f2 	bl	23a80 <ble_hs_lock>
    proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_DHKEY_CHECK, -1,
   2889c:	2300      	movs	r3, #0
   2889e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   288a2:	210a      	movs	r1, #10
   288a4:	4630      	mov	r0, r6
   288a6:	f7fe fc87 	bl	271b8 <ble_sm_proc_find>
    if (proc == NULL) {
   288aa:	b130      	cbz	r0, 288ba <ble_sm_sc_dhkey_check_rx+0x48>
        ble_sm_dhkey_check_process(proc, cmd, res);
   288ac:	4622      	mov	r2, r4
   288ae:	4629      	mov	r1, r5
   288b0:	f7ff fc42 	bl	28138 <ble_sm_dhkey_check_process>
    ble_hs_unlock();
   288b4:	f7fb f8e8 	bl	23a88 <ble_hs_unlock>
   288b8:	e7eb      	b.n	28892 <ble_sm_sc_dhkey_check_rx+0x20>
        res->app_status = BLE_HS_ENOENT;
   288ba:	2305      	movs	r3, #5
   288bc:	6023      	str	r3, [r4, #0]
   288be:	e7f9      	b.n	288b4 <ble_sm_sc_dhkey_check_rx+0x42>

000288c0 <ble_sm_sc_init>:
    return 0;
}

void
ble_sm_sc_init(void)
{
   288c0:	b508      	push	{r3, lr}
    ble_sm_alg_ecc_init();
   288c2:	f000 fd31 	bl	29328 <ble_sm_alg_ecc_init>
    ble_sm_sc_keys_generated = 0;
   288c6:	4b02      	ldr	r3, [pc, #8]	; (288d0 <ble_sm_sc_init+0x10>)
   288c8:	2200      	movs	r2, #0
   288ca:	701a      	strb	r2, [r3, #0]
}
   288cc:	bd08      	pop	{r3, pc}
   288ce:	bf00      	nop
   288d0:	20002de0 	.word	0x20002de0

000288d4 <ble_store_status>:
    return rc;
}

static int
ble_store_status(struct ble_store_status_event *event)
{
   288d4:	b508      	push	{r3, lr}
    int rc;

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());

    if (ble_hs_cfg.store_status_cb == NULL) {
   288d6:	4b04      	ldr	r3, [pc, #16]	; (288e8 <ble_store_status+0x14>)
   288d8:	6a1b      	ldr	r3, [r3, #32]
   288da:	b11b      	cbz	r3, 288e4 <ble_store_status+0x10>
        rc = BLE_HS_ENOTSUP;
    } else {
        rc = ble_hs_cfg.store_status_cb(event, ble_hs_cfg.store_status_arg);
   288dc:	4a02      	ldr	r2, [pc, #8]	; (288e8 <ble_store_status+0x14>)
   288de:	6a51      	ldr	r1, [r2, #36]	; 0x24
   288e0:	4798      	blx	r3
    }

    return rc;
}
   288e2:	bd08      	pop	{r3, pc}
        rc = BLE_HS_ENOTSUP;
   288e4:	2008      	movs	r0, #8
    return rc;
   288e6:	e7fc      	b.n	288e2 <ble_store_status+0xe>
   288e8:	200002c8 	.word	0x200002c8

000288ec <ble_store_read>:
{
   288ec:	b570      	push	{r4, r5, r6, lr}
   288ee:	4604      	mov	r4, r0
   288f0:	460d      	mov	r5, r1
   288f2:	4616      	mov	r6, r2
    ble_hs_lock();
   288f4:	f7fb f8c4 	bl	23a80 <ble_hs_lock>
    if (ble_hs_cfg.store_read_cb == NULL) {
   288f8:	4b06      	ldr	r3, [pc, #24]	; (28914 <ble_store_read+0x28>)
   288fa:	695b      	ldr	r3, [r3, #20]
   288fc:	b143      	cbz	r3, 28910 <ble_store_read+0x24>
        rc = ble_hs_cfg.store_read_cb(obj_type, key, val);
   288fe:	4632      	mov	r2, r6
   28900:	4629      	mov	r1, r5
   28902:	4620      	mov	r0, r4
   28904:	4798      	blx	r3
   28906:	4604      	mov	r4, r0
    ble_hs_unlock();
   28908:	f7fb f8be 	bl	23a88 <ble_hs_unlock>
}
   2890c:	4620      	mov	r0, r4
   2890e:	bd70      	pop	{r4, r5, r6, pc}
        rc = BLE_HS_ENOTSUP;
   28910:	2408      	movs	r4, #8
   28912:	e7f9      	b.n	28908 <ble_store_read+0x1c>
   28914:	200002c8 	.word	0x200002c8

00028918 <ble_store_delete>:
{
   28918:	b538      	push	{r3, r4, r5, lr}
   2891a:	4604      	mov	r4, r0
   2891c:	460d      	mov	r5, r1
    ble_hs_lock();
   2891e:	f7fb f8af 	bl	23a80 <ble_hs_lock>
    if (ble_hs_cfg.store_delete_cb == NULL) {
   28922:	4b06      	ldr	r3, [pc, #24]	; (2893c <ble_store_delete+0x24>)
   28924:	69db      	ldr	r3, [r3, #28]
   28926:	b13b      	cbz	r3, 28938 <ble_store_delete+0x20>
        rc = ble_hs_cfg.store_delete_cb(obj_type, key);
   28928:	4629      	mov	r1, r5
   2892a:	4620      	mov	r0, r4
   2892c:	4798      	blx	r3
   2892e:	4604      	mov	r4, r0
    ble_hs_unlock();
   28930:	f7fb f8aa 	bl	23a88 <ble_hs_unlock>
}
   28934:	4620      	mov	r0, r4
   28936:	bd38      	pop	{r3, r4, r5, pc}
        rc = BLE_HS_ENOTSUP;
   28938:	2408      	movs	r4, #8
   2893a:	e7f9      	b.n	28930 <ble_store_delete+0x18>
   2893c:	200002c8 	.word	0x200002c8

00028940 <ble_store_overflow_event>:

int
ble_store_overflow_event(int obj_type, const union ble_store_value *value)
{
   28940:	b500      	push	{lr}
   28942:	b085      	sub	sp, #20
    struct ble_store_status_event event;

    event.event_code = BLE_STORE_EVENT_OVERFLOW;
   28944:	2301      	movs	r3, #1
   28946:	9301      	str	r3, [sp, #4]
    event.overflow.obj_type = obj_type;
   28948:	9002      	str	r0, [sp, #8]
    event.overflow.value = value;
   2894a:	9103      	str	r1, [sp, #12]

    return ble_store_status(&event);
   2894c:	a801      	add	r0, sp, #4
   2894e:	f7ff ffc1 	bl	288d4 <ble_store_status>
}
   28952:	b005      	add	sp, #20
   28954:	f85d fb04 	ldr.w	pc, [sp], #4

00028958 <ble_store_write>:
{
   28958:	b570      	push	{r4, r5, r6, lr}
   2895a:	4606      	mov	r6, r0
   2895c:	460d      	mov	r5, r1
    if (ble_hs_cfg.store_write_cb == NULL) {
   2895e:	4b0d      	ldr	r3, [pc, #52]	; (28994 <ble_store_write+0x3c>)
   28960:	699b      	ldr	r3, [r3, #24]
   28962:	b1ab      	cbz	r3, 28990 <ble_store_write+0x38>
        ble_hs_lock();
   28964:	f7fb f88c 	bl	23a80 <ble_hs_lock>
        rc = ble_hs_cfg.store_write_cb(obj_type, val);
   28968:	4b0a      	ldr	r3, [pc, #40]	; (28994 <ble_store_write+0x3c>)
   2896a:	699b      	ldr	r3, [r3, #24]
   2896c:	4629      	mov	r1, r5
   2896e:	4630      	mov	r0, r6
   28970:	4798      	blx	r3
   28972:	4604      	mov	r4, r0
        ble_hs_unlock();
   28974:	f7fb f888 	bl	23a88 <ble_hs_unlock>
        switch (rc) {
   28978:	2c1b      	cmp	r4, #27
   2897a:	d001      	beq.n	28980 <ble_store_write+0x28>
}
   2897c:	4620      	mov	r0, r4
   2897e:	bd70      	pop	{r4, r5, r6, pc}
            rc = ble_store_overflow_event(obj_type, val);
   28980:	4629      	mov	r1, r5
   28982:	4630      	mov	r0, r6
   28984:	f7ff ffdc 	bl	28940 <ble_store_overflow_event>
            if (rc != 0) {
   28988:	4604      	mov	r4, r0
   2898a:	2800      	cmp	r0, #0
   2898c:	d0ea      	beq.n	28964 <ble_store_write+0xc>
   2898e:	e7f5      	b.n	2897c <ble_store_write+0x24>
        return BLE_HS_ENOTSUP;
   28990:	2408      	movs	r4, #8
   28992:	e7f3      	b.n	2897c <ble_store_write+0x24>
   28994:	200002c8 	.word	0x200002c8

00028998 <ble_store_persist_sec>:
}

static int
ble_store_persist_sec(int obj_type,
                      const struct ble_store_value_sec *value_sec)
{
   28998:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(value_sec->ltk_present ||
                      value_sec->irk_present ||
                      value_sec->csrk_present);

    store_value = (void *)value_sec;
    rc = ble_store_write(obj_type, store_value);
   2899a:	f7ff ffdd 	bl	28958 <ble_store_write>
    return rc;
}
   2899e:	bd08      	pop	{r3, pc}

000289a0 <ble_store_full_event>:
{
   289a0:	b500      	push	{lr}
   289a2:	b085      	sub	sp, #20
    event.event_code = BLE_STORE_EVENT_FULL;
   289a4:	2302      	movs	r3, #2
   289a6:	9301      	str	r3, [sp, #4]
    event.full.obj_type = obj_type;
   289a8:	9002      	str	r0, [sp, #8]
    event.full.conn_handle = conn_handle;
   289aa:	f8ad 100c 	strh.w	r1, [sp, #12]
    return ble_store_status(&event);
   289ae:	a801      	add	r0, sp, #4
   289b0:	f7ff ff90 	bl	288d4 <ble_store_status>
}
   289b4:	b005      	add	sp, #20
   289b6:	f85d fb04 	ldr.w	pc, [sp], #4

000289ba <ble_store_read_our_sec>:
{
   289ba:	b508      	push	{r3, lr}
    rc = ble_store_read(BLE_STORE_OBJ_TYPE_OUR_SEC, store_key, store_value);
   289bc:	460a      	mov	r2, r1
   289be:	4601      	mov	r1, r0
   289c0:	2001      	movs	r0, #1
   289c2:	f7ff ff93 	bl	288ec <ble_store_read>
}
   289c6:	bd08      	pop	{r3, pc}

000289c8 <ble_store_write_our_sec>:

int
ble_store_write_our_sec(const struct ble_store_value_sec *value_sec)
{
   289c8:	b508      	push	{r3, lr}
    int rc;

    rc = ble_store_persist_sec(BLE_STORE_OBJ_TYPE_OUR_SEC, value_sec);
   289ca:	4601      	mov	r1, r0
   289cc:	2001      	movs	r0, #1
   289ce:	f7ff ffe3 	bl	28998 <ble_store_persist_sec>
    return rc;
}
   289d2:	bd08      	pop	{r3, pc}

000289d4 <ble_store_read_peer_sec>:
}

int
ble_store_read_peer_sec(const struct ble_store_key_sec *key_sec,
                        struct ble_store_value_sec *value_sec)
{
   289d4:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(key_sec->peer_addr.type == BLE_ADDR_PUBLIC ||
                      key_sec->peer_addr.type == BLE_ADDR_RANDOM);

    store_key = (void *)key_sec;
    store_value = (void *)value_sec;
    rc = ble_store_read(BLE_STORE_OBJ_TYPE_PEER_SEC, store_key, store_value);
   289d6:	460a      	mov	r2, r1
   289d8:	4601      	mov	r1, r0
   289da:	2002      	movs	r0, #2
   289dc:	f7ff ff86 	bl	288ec <ble_store_read>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   289e0:	bd08      	pop	{r3, pc}

000289e2 <ble_store_write_peer_sec>:

int
ble_store_write_peer_sec(const struct ble_store_value_sec *value_sec)
{
   289e2:	b570      	push	{r4, r5, r6, lr}
   289e4:	b082      	sub	sp, #8
   289e6:	4604      	mov	r4, r0
    int rc;

    rc = ble_store_persist_sec(BLE_STORE_OBJ_TYPE_PEER_SEC, value_sec);
   289e8:	4601      	mov	r1, r0
   289ea:	2002      	movs	r0, #2
   289ec:	f7ff ffd4 	bl	28998 <ble_store_persist_sec>
    if (rc != 0) {
   289f0:	4605      	mov	r5, r0
   289f2:	b9d8      	cbnz	r0, 28a2c <ble_store_write_peer_sec+0x4a>
        return rc;
    }

    if (ble_addr_cmp(&value_sec->peer_addr, BLE_ADDR_ANY) &&
   289f4:	2300      	movs	r3, #0
   289f6:	9300      	str	r3, [sp, #0]
   289f8:	f8cd 3003 	str.w	r3, [sp, #3]
    type_diff = a->type - b->type;
   289fc:	7826      	ldrb	r6, [r4, #0]
   289fe:	4630      	mov	r0, r6
    if (type_diff != 0) {
   28a00:	b92e      	cbnz	r6, 28a0e <ble_store_write_peer_sec+0x2c>
    return memcmp(a->val, b->val, sizeof(a->val));
   28a02:	2206      	movs	r2, #6
   28a04:	f10d 0101 	add.w	r1, sp, #1
   28a08:	1c60      	adds	r0, r4, #1
   28a0a:	f7e5 ffa5 	bl	e958 <memcmp>
   28a0e:	b160      	cbz	r0, 28a2a <ble_store_write_peer_sec+0x48>
   28a10:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
   28a14:	f013 0f01 	tst.w	r3, #1
   28a18:	d008      	beq.n	28a2c <ble_store_write_peer_sec+0x4a>
        value_sec->irk_present) {

        /* Write the peer IRK to the controller keycache
         * There is not much to do here if it fails */
        rc = ble_hs_pvcy_add_entry(value_sec->peer_addr.val,
   28a1a:	f104 0229 	add.w	r2, r4, #41	; 0x29
   28a1e:	4631      	mov	r1, r6
   28a20:	1c60      	adds	r0, r4, #1
   28a22:	f7fc ff8d 	bl	25940 <ble_hs_pvcy_add_entry>
   28a26:	4605      	mov	r5, r0
   28a28:	e000      	b.n	28a2c <ble_store_write_peer_sec+0x4a>
        if (rc != 0) {
            return rc;
        }
    }

    return 0;
   28a2a:	4605      	mov	r5, r0
}
   28a2c:	4628      	mov	r0, r5
   28a2e:	b002      	add	sp, #8
   28a30:	bd70      	pop	{r4, r5, r6, pc}

00028a32 <ble_store_read_cccd>:

int
ble_store_read_cccd(const struct ble_store_key_cccd *key,
                    struct ble_store_value_cccd *out_value)
{
   28a32:	b508      	push	{r3, lr}
    union ble_store_key *store_key;
    int rc;

    store_key = (void *)key;
    store_value = (void *)out_value;
    rc = ble_store_read(BLE_STORE_OBJ_TYPE_CCCD, store_key, store_value);
   28a34:	460a      	mov	r2, r1
   28a36:	4601      	mov	r1, r0
   28a38:	2003      	movs	r0, #3
   28a3a:	f7ff ff57 	bl	288ec <ble_store_read>
    return rc;
}
   28a3e:	bd08      	pop	{r3, pc}

00028a40 <ble_store_write_cccd>:

int
ble_store_write_cccd(const struct ble_store_value_cccd *value)
{
   28a40:	b508      	push	{r3, lr}
    union ble_store_value *store_value;
    int rc;

    store_value = (void *)value;
    rc = ble_store_write(BLE_STORE_OBJ_TYPE_CCCD, store_value);
   28a42:	4601      	mov	r1, r0
   28a44:	2003      	movs	r0, #3
   28a46:	f7ff ff87 	bl	28958 <ble_store_write>
    return rc;
}
   28a4a:	bd08      	pop	{r3, pc}

00028a4c <ble_store_delete_cccd>:

int
ble_store_delete_cccd(const struct ble_store_key_cccd *key)
{
   28a4c:	b508      	push	{r3, lr}
    union ble_store_key *store_key;
    int rc;

    store_key = (void *)key;
    rc = ble_store_delete(BLE_STORE_OBJ_TYPE_CCCD, store_key);
   28a4e:	4601      	mov	r1, r0
   28a50:	2003      	movs	r0, #3
   28a52:	f7ff ff61 	bl	28918 <ble_store_delete>
    return rc;
}
   28a56:	bd08      	pop	{r3, pc}

00028a58 <ble_store_key_from_value_cccd>:

void
ble_store_key_from_value_cccd(struct ble_store_key_cccd *out_key,
                              const struct ble_store_value_cccd *value)
{
   28a58:	b410      	push	{r4}
   28a5a:	4603      	mov	r3, r0
    out_key->peer_addr = value->peer_addr;
   28a5c:	6808      	ldr	r0, [r1, #0]
   28a5e:	6018      	str	r0, [r3, #0]
   28a60:	8888      	ldrh	r0, [r1, #4]
   28a62:	798a      	ldrb	r2, [r1, #6]
   28a64:	8098      	strh	r0, [r3, #4]
   28a66:	719a      	strb	r2, [r3, #6]
    out_key->chr_val_handle = value->chr_val_handle;
   28a68:	890a      	ldrh	r2, [r1, #8]
   28a6a:	811a      	strh	r2, [r3, #8]
    out_key->idx = 0;
   28a6c:	2200      	movs	r2, #0
   28a6e:	729a      	strb	r2, [r3, #10]
}
   28a70:	bc10      	pop	{r4}
   28a72:	4770      	bx	lr

00028a74 <ble_store_key_from_value_sec>:

void
ble_store_key_from_value_sec(struct ble_store_key_sec *out_key,
                             const struct ble_store_value_sec *value)
{
   28a74:	4603      	mov	r3, r0
   28a76:	460a      	mov	r2, r1
    out_key->peer_addr = value->peer_addr;
   28a78:	e9d1 0100 	ldrd	r0, r1, [r1]
   28a7c:	6018      	str	r0, [r3, #0]
   28a7e:	8099      	strh	r1, [r3, #4]
   28a80:	0c09      	lsrs	r1, r1, #16
   28a82:	7199      	strb	r1, [r3, #6]

    out_key->ediv = value->ediv;
   28a84:	8911      	ldrh	r1, [r2, #8]
   28a86:	8119      	strh	r1, [r3, #8]
    out_key->rand_num = value->rand_num;
   28a88:	e9d2 0104 	ldrd	r0, r1, [r2, #16]
   28a8c:	e9c3 0104 	strd	r0, r1, [r3, #16]
    out_key->ediv_rand_present = 1;
   28a90:	7e1a      	ldrb	r2, [r3, #24]
   28a92:	f042 0201 	orr.w	r2, r2, #1
   28a96:	761a      	strb	r2, [r3, #24]
    out_key->idx = 0;
   28a98:	2200      	movs	r2, #0
   28a9a:	765a      	strb	r2, [r3, #25]
}
   28a9c:	4770      	bx	lr

00028a9e <ble_store_iterate>:

int
ble_store_iterate(int obj_type,
                  ble_store_iterator_fn *callback,
                  void *cookie)
{
   28a9e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   28aa2:	b09d      	sub	sp, #116	; 0x74
   28aa4:	4604      	mov	r4, r0
   28aa6:	4688      	mov	r8, r1
   28aa8:	4691      	mov	r9, r2
    int idx = 0;
    uint8_t *pidx;
    int rc;

    /* a magic value to retrieve anything */
    memset(&key, 0, sizeof(key));
   28aaa:	2220      	movs	r2, #32
   28aac:	2100      	movs	r1, #0
   28aae:	a814      	add	r0, sp, #80	; 0x50
   28ab0:	f7e5 ff9e 	bl	e9f0 <memset>
    switch(obj_type) {
   28ab4:	2c01      	cmp	r4, #1
   28ab6:	db27      	blt.n	28b08 <ble_store_iterate+0x6a>
   28ab8:	2c02      	cmp	r4, #2
   28aba:	dd08      	ble.n	28ace <ble_store_iterate+0x30>
   28abc:	2c03      	cmp	r4, #3
   28abe:	d123      	bne.n	28b08 <ble_store_iterate+0x6a>
        case BLE_STORE_OBJ_TYPE_OUR_SEC:
            key.sec.peer_addr = *BLE_ADDR_ANY;
            pidx = &key.sec.idx;
            break;
        case BLE_STORE_OBJ_TYPE_CCCD:
            key.cccd.peer_addr = *BLE_ADDR_ANY;
   28ac0:	2300      	movs	r3, #0
   28ac2:	9314      	str	r3, [sp, #80]	; 0x50
   28ac4:	f8cd 3053 	str.w	r3, [sp, #83]	; 0x53
            pidx = &key.cccd.idx;
   28ac8:	f10d 075a 	add.w	r7, sp, #90	; 0x5a
            break;
   28acc:	e005      	b.n	28ada <ble_store_iterate+0x3c>
            key.sec.peer_addr = *BLE_ADDR_ANY;
   28ace:	2300      	movs	r3, #0
   28ad0:	9314      	str	r3, [sp, #80]	; 0x50
   28ad2:	f8cd 3053 	str.w	r3, [sp, #83]	; 0x53
            pidx = &key.sec.idx;
   28ad6:	f10d 0769 	add.w	r7, sp, #105	; 0x69
            pidx = &key.cccd.idx;
   28ada:	2600      	movs	r6, #0
            BLE_HS_DBG_ASSERT(0);
            return BLE_HS_EINVAL;
    }

    while (1) {
        *pidx = idx;
   28adc:	703e      	strb	r6, [r7, #0]
        rc = ble_store_read(obj_type, &key, &value);
   28ade:	466a      	mov	r2, sp
   28ae0:	a914      	add	r1, sp, #80	; 0x50
   28ae2:	4620      	mov	r0, r4
   28ae4:	f7ff ff02 	bl	288ec <ble_store_read>
        switch (rc) {
   28ae8:	4605      	mov	r5, r0
   28aea:	b118      	cbz	r0, 28af4 <ble_store_iterate+0x56>
   28aec:	2805      	cmp	r0, #5
   28aee:	d10c      	bne.n	28b0a <ble_store_iterate+0x6c>
            }
            break;

        case BLE_HS_ENOENT:
            /* No more entries. */
            return 0;
   28af0:	2500      	movs	r5, #0
   28af2:	e00a      	b.n	28b0a <ble_store_iterate+0x6c>
            if (callback != NULL) {
   28af4:	f1b8 0f00 	cmp.w	r8, #0
   28af8:	d004      	beq.n	28b04 <ble_store_iterate+0x66>
                rc = callback(obj_type, &value, cookie);
   28afa:	464a      	mov	r2, r9
   28afc:	4669      	mov	r1, sp
   28afe:	4620      	mov	r0, r4
   28b00:	47c0      	blx	r8
                if (rc != 0) {
   28b02:	b910      	cbnz	r0, 28b0a <ble_store_iterate+0x6c>
        default:
            /* Read error. */
            return rc;
        }

        idx++;
   28b04:	3601      	adds	r6, #1
        *pidx = idx;
   28b06:	e7e9      	b.n	28adc <ble_store_iterate+0x3e>
            return BLE_HS_EINVAL;
   28b08:	2503      	movs	r5, #3
    }
}
   28b0a:	4628      	mov	r0, r5
   28b0c:	b01d      	add	sp, #116	; 0x74
   28b0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00028b12 <ble_store_util_iter_count>:
                          void *arg)
{
    int *count;

    count = arg;
    (*count)++;
   28b12:	6813      	ldr	r3, [r2, #0]
   28b14:	3301      	adds	r3, #1
   28b16:	6013      	str	r3, [r2, #0]

    return 0;
}
   28b18:	2000      	movs	r0, #0
   28b1a:	4770      	bx	lr

00028b1c <ble_store_util_iter_unique_peer>:
{
   28b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28b1e:	460e      	mov	r6, r1
   28b20:	4615      	mov	r5, r2
    for (i = 0; i < set->num_peers; i++) {
   28b22:	2400      	movs	r4, #0
   28b24:	e001      	b.n	28b2a <ble_store_util_iter_unique_peer+0xe>
        if (ble_addr_cmp(set->peer_id_addrs + i, &val->sec.peer_addr) == 0) {
   28b26:	b310      	cbz	r0, 28b6e <ble_store_util_iter_unique_peer+0x52>
    for (i = 0; i < set->num_peers; i++) {
   28b28:	3401      	adds	r4, #1
   28b2a:	686b      	ldr	r3, [r5, #4]
   28b2c:	42a3      	cmp	r3, r4
   28b2e:	dd0d      	ble.n	28b4c <ble_store_util_iter_unique_peer+0x30>
        if (ble_addr_cmp(set->peer_id_addrs + i, &val->sec.peer_addr) == 0) {
   28b30:	682a      	ldr	r2, [r5, #0]
   28b32:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   28b36:	18d7      	adds	r7, r2, r3
    type_diff = a->type - b->type;
   28b38:	5cd3      	ldrb	r3, [r2, r3]
   28b3a:	7830      	ldrb	r0, [r6, #0]
    if (type_diff != 0) {
   28b3c:	1a18      	subs	r0, r3, r0
   28b3e:	d1f2      	bne.n	28b26 <ble_store_util_iter_unique_peer+0xa>
    return memcmp(a->val, b->val, sizeof(a->val));
   28b40:	2206      	movs	r2, #6
   28b42:	1c71      	adds	r1, r6, #1
   28b44:	1c78      	adds	r0, r7, #1
   28b46:	f7e5 ff07 	bl	e958 <memcmp>
   28b4a:	e7ec      	b.n	28b26 <ble_store_util_iter_unique_peer+0xa>
    if (set->num_peers >= set->max_peers) {
   28b4c:	68aa      	ldr	r2, [r5, #8]
   28b4e:	4293      	cmp	r3, r2
   28b50:	da0e      	bge.n	28b70 <ble_store_util_iter_unique_peer+0x54>
    set->peer_id_addrs[set->num_peers] = val->sec.peer_addr;
   28b52:	6829      	ldr	r1, [r5, #0]
   28b54:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   28b58:	18ca      	adds	r2, r1, r3
   28b5a:	6830      	ldr	r0, [r6, #0]
   28b5c:	50c8      	str	r0, [r1, r3]
   28b5e:	88b1      	ldrh	r1, [r6, #4]
   28b60:	79b3      	ldrb	r3, [r6, #6]
   28b62:	8091      	strh	r1, [r2, #4]
   28b64:	7193      	strb	r3, [r2, #6]
    set->num_peers++;
   28b66:	686b      	ldr	r3, [r5, #4]
   28b68:	3301      	adds	r3, #1
   28b6a:	606b      	str	r3, [r5, #4]
    return 0;
   28b6c:	2000      	movs	r0, #0
}
   28b6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        set->status = BLE_HS_ENOMEM;
   28b70:	2306      	movs	r3, #6
   28b72:	60eb      	str	r3, [r5, #12]
        return 1;
   28b74:	2001      	movs	r0, #1
   28b76:	e7fa      	b.n	28b6e <ble_store_util_iter_unique_peer+0x52>

00028b78 <ble_store_util_bonded_peers>:
{
   28b78:	b510      	push	{r4, lr}
   28b7a:	b084      	sub	sp, #16
   28b7c:	460c      	mov	r4, r1
    struct ble_store_util_peer_set set = {
   28b7e:	9000      	str	r0, [sp, #0]
   28b80:	2300      	movs	r3, #0
   28b82:	9301      	str	r3, [sp, #4]
   28b84:	9202      	str	r2, [sp, #8]
   28b86:	9303      	str	r3, [sp, #12]
    rc = ble_store_iterate(BLE_STORE_OBJ_TYPE_OUR_SEC,
   28b88:	466a      	mov	r2, sp
   28b8a:	4906      	ldr	r1, [pc, #24]	; (28ba4 <ble_store_util_bonded_peers+0x2c>)
   28b8c:	2001      	movs	r0, #1
   28b8e:	f7ff ff86 	bl	28a9e <ble_store_iterate>
    if (rc != 0) {
   28b92:	4603      	mov	r3, r0
   28b94:	b918      	cbnz	r0, 28b9e <ble_store_util_bonded_peers+0x26>
    if (set.status != 0) {
   28b96:	9b03      	ldr	r3, [sp, #12]
   28b98:	b90b      	cbnz	r3, 28b9e <ble_store_util_bonded_peers+0x26>
    *out_num_peers = set.num_peers;
   28b9a:	9a01      	ldr	r2, [sp, #4]
   28b9c:	6022      	str	r2, [r4, #0]
}
   28b9e:	4618      	mov	r0, r3
   28ba0:	b004      	add	sp, #16
   28ba2:	bd10      	pop	{r4, pc}
   28ba4:	00028b1d 	.word	0x00028b1d

00028ba8 <ble_store_util_delete_all>:
{
   28ba8:	b538      	push	{r3, r4, r5, lr}
   28baa:	4605      	mov	r5, r0
   28bac:	460c      	mov	r4, r1
        rc = ble_store_delete(type, key);
   28bae:	4621      	mov	r1, r4
   28bb0:	4628      	mov	r0, r5
   28bb2:	f7ff feb1 	bl	28918 <ble_store_delete>
    } while (rc == 0);
   28bb6:	4603      	mov	r3, r0
   28bb8:	2800      	cmp	r0, #0
   28bba:	d0f8      	beq.n	28bae <ble_store_util_delete_all+0x6>
    if (rc != BLE_HS_ENOENT) {
   28bbc:	2805      	cmp	r0, #5
   28bbe:	d001      	beq.n	28bc4 <ble_store_util_delete_all+0x1c>
}
   28bc0:	4618      	mov	r0, r3
   28bc2:	bd38      	pop	{r3, r4, r5, pc}
    return 0;
   28bc4:	2300      	movs	r3, #0
   28bc6:	e7fb      	b.n	28bc0 <ble_store_util_delete_all+0x18>

00028bc8 <ble_store_util_delete_peer>:
{
   28bc8:	b510      	push	{r4, lr}
   28bca:	b088      	sub	sp, #32
   28bcc:	4604      	mov	r4, r0
    memset(&key, 0, sizeof key);
   28bce:	2220      	movs	r2, #32
   28bd0:	2100      	movs	r1, #0
   28bd2:	4668      	mov	r0, sp
   28bd4:	f7e5 ff0c 	bl	e9f0 <memset>
    key.sec.peer_addr = *peer_id_addr;
   28bd8:	6820      	ldr	r0, [r4, #0]
   28bda:	9000      	str	r0, [sp, #0]
   28bdc:	88a2      	ldrh	r2, [r4, #4]
   28bde:	79a3      	ldrb	r3, [r4, #6]
   28be0:	f8ad 2004 	strh.w	r2, [sp, #4]
   28be4:	f88d 3006 	strb.w	r3, [sp, #6]
    rc = ble_store_util_delete_all(BLE_STORE_OBJ_TYPE_OUR_SEC, &key);
   28be8:	4669      	mov	r1, sp
   28bea:	2001      	movs	r0, #1
   28bec:	f7ff ffdc 	bl	28ba8 <ble_store_util_delete_all>
    if (rc != 0) {
   28bf0:	4603      	mov	r3, r0
   28bf2:	b110      	cbz	r0, 28bfa <ble_store_util_delete_peer+0x32>
}
   28bf4:	4618      	mov	r0, r3
   28bf6:	b008      	add	sp, #32
   28bf8:	bd10      	pop	{r4, pc}
    rc = ble_store_util_delete_all(BLE_STORE_OBJ_TYPE_PEER_SEC, &key);
   28bfa:	4669      	mov	r1, sp
   28bfc:	2002      	movs	r0, #2
   28bfe:	f7ff ffd3 	bl	28ba8 <ble_store_util_delete_all>
    if (rc != 0) {
   28c02:	4603      	mov	r3, r0
   28c04:	2800      	cmp	r0, #0
   28c06:	d1f5      	bne.n	28bf4 <ble_store_util_delete_peer+0x2c>
    memset(&key, 0, sizeof key);
   28c08:	2220      	movs	r2, #32
   28c0a:	2100      	movs	r1, #0
   28c0c:	4668      	mov	r0, sp
   28c0e:	f7e5 feef 	bl	e9f0 <memset>
    key.cccd.peer_addr = *peer_id_addr;
   28c12:	6820      	ldr	r0, [r4, #0]
   28c14:	9000      	str	r0, [sp, #0]
   28c16:	88a2      	ldrh	r2, [r4, #4]
   28c18:	79a3      	ldrb	r3, [r4, #6]
   28c1a:	f8ad 2004 	strh.w	r2, [sp, #4]
   28c1e:	f88d 3006 	strb.w	r3, [sp, #6]
    rc = ble_store_util_delete_all(BLE_STORE_OBJ_TYPE_CCCD, &key);
   28c22:	4669      	mov	r1, sp
   28c24:	2003      	movs	r0, #3
   28c26:	f7ff ffbf 	bl	28ba8 <ble_store_util_delete_all>
   28c2a:	4603      	mov	r3, r0
   28c2c:	e7e2      	b.n	28bf4 <ble_store_util_delete_peer+0x2c>
	...

00028c30 <ble_store_util_count>:

int
ble_store_util_count(int type, int *out_count)
{
   28c30:	b508      	push	{r3, lr}
   28c32:	460a      	mov	r2, r1
    int rc;

    *out_count = 0;
   28c34:	2300      	movs	r3, #0
   28c36:	600b      	str	r3, [r1, #0]
    rc = ble_store_iterate(type,
   28c38:	4901      	ldr	r1, [pc, #4]	; (28c40 <ble_store_util_count+0x10>)
   28c3a:	f7ff ff30 	bl	28a9e <ble_store_iterate>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   28c3e:	bd08      	pop	{r3, pc}
   28c40:	00028b13 	.word	0x00028b13

00028c44 <ble_store_util_status_rr>:
 * uninteresting peers could cause important bonds to be deleted.  This is
 * useful for demonstrations and sample apps.
 */
int
ble_store_util_status_rr(struct ble_store_status_event *event, void *arg)
{
   28c44:	b508      	push	{r3, lr}
    switch (event->event_code) {
   28c46:	6803      	ldr	r3, [r0, #0]
   28c48:	2b01      	cmp	r3, #1
   28c4a:	d003      	beq.n	28c54 <ble_store_util_status_rr+0x10>
   28c4c:	2b02      	cmp	r3, #2
   28c4e:	d108      	bne.n	28c62 <ble_store_util_status_rr+0x1e>

    case BLE_STORE_EVENT_FULL:
        /* Just proceed with the operation.  If it results in an overflow,
         * we'll delete a record when the overflow occurs.
         */
        return 0;
   28c50:	2000      	movs	r0, #0

    default:
        return BLE_HS_EUNKNOWN;
    }
}
   28c52:	bd08      	pop	{r3, pc}
        switch (event->overflow.obj_type) {
   28c54:	6843      	ldr	r3, [r0, #4]
   28c56:	3b01      	subs	r3, #1
   28c58:	2b02      	cmp	r3, #2
   28c5a:	d804      	bhi.n	28c66 <ble_store_util_status_rr+0x22>
                return ble_gap_unpair_oldest_peer();
   28c5c:	f7f8 fc76 	bl	2154c <ble_gap_unpair_oldest_peer>
   28c60:	e7f7      	b.n	28c52 <ble_store_util_status_rr+0xe>
        return BLE_HS_EUNKNOWN;
   28c62:	2011      	movs	r0, #17
   28c64:	e7f5      	b.n	28c52 <ble_store_util_status_rr+0xe>
                return BLE_HS_EUNKNOWN;
   28c66:	2011      	movs	r0, #17
   28c68:	e7f3      	b.n	28c52 <ble_store_util_status_rr+0xe>

00028c6a <ble_uuid_init_from_buf>:
#define VERIFY_UUID(uuid)
#endif

int
ble_uuid_init_from_buf(ble_uuid_any_t *uuid, const void *buf, size_t len)
{
   28c6a:	b570      	push	{r4, r5, r6, lr}
   28c6c:	4604      	mov	r4, r0
    switch (len) {
   28c6e:	2a04      	cmp	r2, #4
   28c70:	d00d      	beq.n	28c8e <ble_uuid_init_from_buf+0x24>
   28c72:	2a10      	cmp	r2, #16
   28c74:	d013      	beq.n	28c9e <ble_uuid_init_from_buf+0x34>
   28c76:	2a02      	cmp	r2, #2
   28c78:	d001      	beq.n	28c7e <ble_uuid_init_from_buf+0x14>
        uuid->u.type = BLE_UUID_TYPE_128;
        memcpy(uuid->u128.value, buf, 16);
        return 0;
    }

    return BLE_HS_EINVAL;
   28c7a:	2003      	movs	r0, #3
   28c7c:	e006      	b.n	28c8c <ble_uuid_init_from_buf+0x22>
        uuid->u.type = BLE_UUID_TYPE_16;
   28c7e:	2310      	movs	r3, #16
   28c80:	7003      	strb	r3, [r0, #0]
        uuid->u16.value = get_le16(buf);
   28c82:	4608      	mov	r0, r1
   28c84:	f006 f873 	bl	2ed6e <get_le16>
   28c88:	8060      	strh	r0, [r4, #2]
        return 0;
   28c8a:	2000      	movs	r0, #0
}
   28c8c:	bd70      	pop	{r4, r5, r6, pc}
        uuid->u.type = BLE_UUID_TYPE_32;
   28c8e:	2320      	movs	r3, #32
   28c90:	7003      	strb	r3, [r0, #0]
        uuid->u32.value = get_le32(buf);
   28c92:	4608      	mov	r0, r1
   28c94:	f006 f870 	bl	2ed78 <get_le32>
   28c98:	6060      	str	r0, [r4, #4]
        return 0;
   28c9a:	2000      	movs	r0, #0
   28c9c:	e7f6      	b.n	28c8c <ble_uuid_init_from_buf+0x22>
        uuid->u.type = BLE_UUID_TYPE_128;
   28c9e:	4603      	mov	r3, r0
   28ca0:	2280      	movs	r2, #128	; 0x80
   28ca2:	f803 2b01 	strb.w	r2, [r3], #1
        memcpy(uuid->u128.value, buf, 16);
   28ca6:	680e      	ldr	r6, [r1, #0]
   28ca8:	684d      	ldr	r5, [r1, #4]
   28caa:	6888      	ldr	r0, [r1, #8]
   28cac:	68ca      	ldr	r2, [r1, #12]
   28cae:	f8c4 6001 	str.w	r6, [r4, #1]
   28cb2:	605d      	str	r5, [r3, #4]
   28cb4:	6098      	str	r0, [r3, #8]
   28cb6:	60da      	str	r2, [r3, #12]
        return 0;
   28cb8:	2000      	movs	r0, #0
   28cba:	e7e7      	b.n	28c8c <ble_uuid_init_from_buf+0x22>

00028cbc <ble_uuid_cmp>:

int
ble_uuid_cmp(const ble_uuid_t *uuid1, const ble_uuid_t *uuid2)
{
   28cbc:	b508      	push	{r3, lr}
    VERIFY_UUID(uuid1);
    VERIFY_UUID(uuid2);

    if (uuid1->type != uuid2->type) {
   28cbe:	7803      	ldrb	r3, [r0, #0]
   28cc0:	780a      	ldrb	r2, [r1, #0]
   28cc2:	4293      	cmp	r3, r2
   28cc4:	d001      	beq.n	28cca <ble_uuid_cmp+0xe>
      return uuid1->type - uuid2->type;
   28cc6:	1a98      	subs	r0, r3, r2
    }

    BLE_HS_DBG_ASSERT(0);

    return -1;
}
   28cc8:	bd08      	pop	{r3, pc}
    switch (uuid1->type) {
   28cca:	2b20      	cmp	r3, #32
   28ccc:	d00a      	beq.n	28ce4 <ble_uuid_cmp+0x28>
   28cce:	2b80      	cmp	r3, #128	; 0x80
   28cd0:	d00c      	beq.n	28cec <ble_uuid_cmp+0x30>
   28cd2:	2b10      	cmp	r3, #16
   28cd4:	d002      	beq.n	28cdc <ble_uuid_cmp+0x20>
    return -1;
   28cd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   28cda:	e7f5      	b.n	28cc8 <ble_uuid_cmp+0xc>
        return (int) BLE_UUID16(uuid1)->value - (int) BLE_UUID16(uuid2)->value;
   28cdc:	8840      	ldrh	r0, [r0, #2]
   28cde:	884b      	ldrh	r3, [r1, #2]
   28ce0:	1ac0      	subs	r0, r0, r3
   28ce2:	e7f1      	b.n	28cc8 <ble_uuid_cmp+0xc>
        return (int) BLE_UUID32(uuid1)->value - (int) BLE_UUID32(uuid2)->value;
   28ce4:	6840      	ldr	r0, [r0, #4]
   28ce6:	684b      	ldr	r3, [r1, #4]
   28ce8:	1ac0      	subs	r0, r0, r3
   28cea:	e7ed      	b.n	28cc8 <ble_uuid_cmp+0xc>
        return memcmp(BLE_UUID128(uuid1)->value, BLE_UUID128(uuid2)->value, 16);
   28cec:	2210      	movs	r2, #16
   28cee:	3101      	adds	r1, #1
   28cf0:	3001      	adds	r0, #1
   28cf2:	f7e5 fe31 	bl	e958 <memcmp>
   28cf6:	e7e7      	b.n	28cc8 <ble_uuid_cmp+0xc>

00028cf8 <ble_uuid_to_str>:
    }
}

char *
ble_uuid_to_str(const ble_uuid_t *uuid, char *dst)
{
   28cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28cfc:	b091      	sub	sp, #68	; 0x44
   28cfe:	460c      	mov	r4, r1
    const uint8_t *u8p;

    switch (uuid->type) {
   28d00:	7803      	ldrb	r3, [r0, #0]
   28d02:	2b20      	cmp	r3, #32
   28d04:	d00f      	beq.n	28d26 <ble_uuid_to_str+0x2e>
   28d06:	2b80      	cmp	r3, #128	; 0x80
   28d08:	d013      	beq.n	28d32 <ble_uuid_to_str+0x3a>
   28d0a:	2b10      	cmp	r3, #16
   28d0c:	d002      	beq.n	28d14 <ble_uuid_to_str+0x1c>
                u8p[11], u8p[10],  u8p[9],  u8p[8],
                 u8p[7],  u8p[6],  u8p[5],  u8p[4],
                 u8p[3],  u8p[2],  u8p[1],  u8p[0]);
        break;
    default:
        dst[0] = '\0';
   28d0e:	2300      	movs	r3, #0
   28d10:	700b      	strb	r3, [r1, #0]
        break;
   28d12:	e004      	b.n	28d1e <ble_uuid_to_str+0x26>
        sprintf(dst, "0x%04" PRIx16, BLE_UUID16(uuid)->value);
   28d14:	8842      	ldrh	r2, [r0, #2]
   28d16:	4920      	ldr	r1, [pc, #128]	; (28d98 <ble_uuid_to_str+0xa0>)
   28d18:	4620      	mov	r0, r4
   28d1a:	f006 fa9f 	bl	2f25c <sprintf>
    }

    return dst;
}
   28d1e:	4620      	mov	r0, r4
   28d20:	b011      	add	sp, #68	; 0x44
   28d22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        sprintf(dst, "0x%08" PRIx32, BLE_UUID32(uuid)->value);
   28d26:	6842      	ldr	r2, [r0, #4]
   28d28:	491c      	ldr	r1, [pc, #112]	; (28d9c <ble_uuid_to_str+0xa4>)
   28d2a:	4620      	mov	r0, r4
   28d2c:	f006 fa96 	bl	2f25c <sprintf>
        break;
   28d30:	e7f5      	b.n	28d1e <ble_uuid_to_str+0x26>
                u8p[15], u8p[14], u8p[13], u8p[12],
   28d32:	7c03      	ldrb	r3, [r0, #16]
   28d34:	930e      	str	r3, [sp, #56]	; 0x38
   28d36:	7bc1      	ldrb	r1, [r0, #15]
   28d38:	910f      	str	r1, [sp, #60]	; 0x3c
   28d3a:	7b85      	ldrb	r5, [r0, #14]
   28d3c:	9500      	str	r5, [sp, #0]
   28d3e:	7b43      	ldrb	r3, [r0, #13]
                u8p[11], u8p[10],  u8p[9],  u8p[8],
   28d40:	7b02      	ldrb	r2, [r0, #12]
   28d42:	7ac1      	ldrb	r1, [r0, #11]
   28d44:	7a85      	ldrb	r5, [r0, #10]
   28d46:	7a46      	ldrb	r6, [r0, #9]
                 u8p[7],  u8p[6],  u8p[5],  u8p[4],
   28d48:	7a07      	ldrb	r7, [r0, #8]
   28d4a:	f890 c007 	ldrb.w	ip, [r0, #7]
   28d4e:	f890 e006 	ldrb.w	lr, [r0, #6]
   28d52:	f890 8005 	ldrb.w	r8, [r0, #5]
                 u8p[3],  u8p[2],  u8p[1],  u8p[0]);
   28d56:	f890 9004 	ldrb.w	r9, [r0, #4]
   28d5a:	f890 a003 	ldrb.w	sl, [r0, #3]
   28d5e:	f890 b002 	ldrb.w	fp, [r0, #2]
   28d62:	7840      	ldrb	r0, [r0, #1]
        sprintf(dst, "%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-"
   28d64:	900d      	str	r0, [sp, #52]	; 0x34
   28d66:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
   28d6a:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
   28d6e:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   28d72:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
   28d76:	f8cd e020 	str.w	lr, [sp, #32]
   28d7a:	f8cd c01c 	str.w	ip, [sp, #28]
   28d7e:	9706      	str	r7, [sp, #24]
   28d80:	9605      	str	r6, [sp, #20]
   28d82:	9504      	str	r5, [sp, #16]
   28d84:	9103      	str	r1, [sp, #12]
   28d86:	9202      	str	r2, [sp, #8]
   28d88:	9301      	str	r3, [sp, #4]
   28d8a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   28d8c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   28d8e:	4904      	ldr	r1, [pc, #16]	; (28da0 <ble_uuid_to_str+0xa8>)
   28d90:	4620      	mov	r0, r4
   28d92:	f006 fa63 	bl	2f25c <sprintf>
        break;
   28d96:	e7c2      	b.n	28d1e <ble_uuid_to_str+0x26>
   28d98:	000326c8 	.word	0x000326c8
   28d9c:	000326d0 	.word	0x000326d0
   28da0:	000326d8 	.word	0x000326d8

00028da4 <ble_uuid_u16>:
uint16_t
ble_uuid_u16(const ble_uuid_t *uuid)
{
    VERIFY_UUID(uuid);

    return uuid->type == BLE_UUID_TYPE_16 ? BLE_UUID16(uuid)->value : 0;
   28da4:	7803      	ldrb	r3, [r0, #0]
   28da6:	2b10      	cmp	r3, #16
   28da8:	d001      	beq.n	28dae <ble_uuid_u16+0xa>
   28daa:	2000      	movs	r0, #0
}
   28dac:	4770      	bx	lr
    return uuid->type == BLE_UUID_TYPE_16 ? BLE_UUID16(uuid)->value : 0;
   28dae:	8840      	ldrh	r0, [r0, #2]
   28db0:	4770      	bx	lr

00028db2 <ble_uuid_init_from_att_buf>:
    return rc;
}

int
ble_uuid_init_from_att_buf(ble_uuid_any_t *uuid, const void *buf, size_t len)
{
   28db2:	b570      	push	{r4, r5, r6, lr}
    int rc = 0;

    if (len == 2) {
   28db4:	2a02      	cmp	r2, #2
   28db6:	d003      	beq.n	28dc0 <ble_uuid_init_from_att_buf+0xe>
        uuid->u.type = BLE_UUID_TYPE_16;
        uuid->u16.value = get_le16(buf);
    } else if (len == 16) {
   28db8:	2a10      	cmp	r2, #16
   28dba:	d00a      	beq.n	28dd2 <ble_uuid_init_from_att_buf+0x20>
        uuid->u.type = BLE_UUID_TYPE_128;
        memcpy(uuid->u128.value, buf, 16);
    } else {
        rc = BLE_HS_EINVAL;
   28dbc:	2003      	movs	r0, #3
    }

    return rc;
}
   28dbe:	bd70      	pop	{r4, r5, r6, pc}
   28dc0:	4604      	mov	r4, r0
        uuid->u.type = BLE_UUID_TYPE_16;
   28dc2:	2310      	movs	r3, #16
   28dc4:	7003      	strb	r3, [r0, #0]
        uuid->u16.value = get_le16(buf);
   28dc6:	4608      	mov	r0, r1
   28dc8:	f005 ffd1 	bl	2ed6e <get_le16>
   28dcc:	8060      	strh	r0, [r4, #2]
    int rc = 0;
   28dce:	2000      	movs	r0, #0
   28dd0:	e7f5      	b.n	28dbe <ble_uuid_init_from_att_buf+0xc>
        uuid->u.type = BLE_UUID_TYPE_128;
   28dd2:	4603      	mov	r3, r0
   28dd4:	2280      	movs	r2, #128	; 0x80
   28dd6:	f803 2b01 	strb.w	r2, [r3], #1
        memcpy(uuid->u128.value, buf, 16);
   28dda:	680e      	ldr	r6, [r1, #0]
   28ddc:	684d      	ldr	r5, [r1, #4]
   28dde:	688c      	ldr	r4, [r1, #8]
   28de0:	68ca      	ldr	r2, [r1, #12]
   28de2:	f8c0 6001 	str.w	r6, [r0, #1]
   28de6:	605d      	str	r5, [r3, #4]
   28de8:	609c      	str	r4, [r3, #8]
   28dea:	60da      	str	r2, [r3, #12]
    int rc = 0;
   28dec:	2000      	movs	r0, #0
   28dee:	e7e6      	b.n	28dbe <ble_uuid_init_from_att_buf+0xc>

00028df0 <ble_uuid_init_from_att_mbuf>:
{
   28df0:	b530      	push	{r4, r5, lr}
   28df2:	b085      	sub	sp, #20
   28df4:	4605      	mov	r5, r0
   28df6:	4608      	mov	r0, r1
   28df8:	4611      	mov	r1, r2
   28dfa:	461c      	mov	r4, r3
    rc = os_mbuf_copydata(om, off, len, val);
   28dfc:	466b      	mov	r3, sp
   28dfe:	4622      	mov	r2, r4
   28e00:	f7e4 fbb9 	bl	d576 <os_mbuf_copydata>
    if (rc != 0) {
   28e04:	4603      	mov	r3, r0
   28e06:	b110      	cbz	r0, 28e0e <ble_uuid_init_from_att_mbuf+0x1e>
}
   28e08:	4618      	mov	r0, r3
   28e0a:	b005      	add	sp, #20
   28e0c:	bd30      	pop	{r4, r5, pc}
    rc = ble_uuid_init_from_att_buf(uuid, val, len);
   28e0e:	4622      	mov	r2, r4
   28e10:	4669      	mov	r1, sp
   28e12:	4628      	mov	r0, r5
   28e14:	f7ff ffcd 	bl	28db2 <ble_uuid_init_from_att_buf>
   28e18:	4603      	mov	r3, r0
    return rc;
   28e1a:	e7f5      	b.n	28e08 <ble_uuid_init_from_att_mbuf+0x18>

00028e1c <ble_uuid_flat>:
    return 0;
}

int
ble_uuid_flat(const ble_uuid_t *uuid, void *dst)
{
   28e1c:	b570      	push	{r4, r5, r6, lr}
   28e1e:	4605      	mov	r5, r0
   28e20:	460c      	mov	r4, r1
    VERIFY_UUID(uuid);

    switch (uuid->type) {
   28e22:	7803      	ldrb	r3, [r0, #0]
   28e24:	2b20      	cmp	r3, #32
   28e26:	d00b      	beq.n	28e40 <ble_uuid_flat+0x24>
   28e28:	2b80      	cmp	r3, #128	; 0x80
   28e2a:	d016      	beq.n	28e5a <ble_uuid_flat+0x3e>
   28e2c:	2b10      	cmp	r3, #16
   28e2e:	d001      	beq.n	28e34 <ble_uuid_flat+0x18>
        break;
    case BLE_UUID_TYPE_128:
        memcpy(dst, BLE_UUID128(uuid)->value, 16);
        break;
    default:
        return BLE_HS_EINVAL;
   28e30:	2003      	movs	r0, #3
   28e32:	e004      	b.n	28e3e <ble_uuid_flat+0x22>
        put_le16(dst, BLE_UUID16(uuid)->value);
   28e34:	8841      	ldrh	r1, [r0, #2]
   28e36:	4620      	mov	r0, r4
   28e38:	f005 ff78 	bl	2ed2c <put_le16>
    }

    return 0;
   28e3c:	2000      	movs	r0, #0
}
   28e3e:	bd70      	pop	{r4, r5, r6, pc}
        memcpy(dst, ble_uuid_base, 16);
   28e40:	4e0b      	ldr	r6, [pc, #44]	; (28e70 <ble_uuid_flat+0x54>)
   28e42:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   28e44:	6020      	str	r0, [r4, #0]
   28e46:	6061      	str	r1, [r4, #4]
   28e48:	60a2      	str	r2, [r4, #8]
   28e4a:	4620      	mov	r0, r4
   28e4c:	f840 3f0c 	str.w	r3, [r0, #12]!
        put_le32(dst + 12, BLE_UUID32(uuid)->value);
   28e50:	6869      	ldr	r1, [r5, #4]
   28e52:	f005 ff6f 	bl	2ed34 <put_le32>
    return 0;
   28e56:	2000      	movs	r0, #0
        break;
   28e58:	e7f1      	b.n	28e3e <ble_uuid_flat+0x22>
        memcpy(dst, BLE_UUID128(uuid)->value, 16);
   28e5a:	f855 0f01 	ldr.w	r0, [r5, #1]!
   28e5e:	6869      	ldr	r1, [r5, #4]
   28e60:	68aa      	ldr	r2, [r5, #8]
   28e62:	68eb      	ldr	r3, [r5, #12]
   28e64:	6020      	str	r0, [r4, #0]
   28e66:	6061      	str	r1, [r4, #4]
   28e68:	60a2      	str	r2, [r4, #8]
   28e6a:	60e3      	str	r3, [r4, #12]
    return 0;
   28e6c:	2000      	movs	r0, #0
        break;
   28e6e:	e7e6      	b.n	28e3e <ble_uuid_flat+0x22>
   28e70:	000326b8 	.word	0x000326b8

00028e74 <ble_uuid_length>:
int
ble_uuid_length(const ble_uuid_t *uuid)
{
    VERIFY_UUID(uuid);

    return uuid->type >> 3;
   28e74:	7800      	ldrb	r0, [r0, #0]
}
   28e76:	08c0      	lsrs	r0, r0, #3
   28e78:	4770      	bx	lr

00028e7a <ble_uuid_to_mbuf>:
{
   28e7a:	b538      	push	{r3, r4, r5, lr}
   28e7c:	4605      	mov	r5, r0
   28e7e:	460c      	mov	r4, r1
    len = ble_uuid_length(uuid);
   28e80:	f7ff fff8 	bl	28e74 <ble_uuid_length>
    buf = os_mbuf_extend(om, len);
   28e84:	b281      	uxth	r1, r0
   28e86:	4620      	mov	r0, r4
   28e88:	f7e4 fcfa 	bl	d880 <os_mbuf_extend>
    if (buf == NULL) {
   28e8c:	b128      	cbz	r0, 28e9a <ble_uuid_to_mbuf+0x20>
   28e8e:	4601      	mov	r1, r0
    ble_uuid_flat(uuid, buf);
   28e90:	4628      	mov	r0, r5
   28e92:	f7ff ffc3 	bl	28e1c <ble_uuid_flat>
    return 0;
   28e96:	2000      	movs	r0, #0
}
   28e98:	bd38      	pop	{r3, r4, r5, pc}
        return BLE_HS_ENOMEM;
   28e9a:	2006      	movs	r0, #6
   28e9c:	e7fc      	b.n	28e98 <ble_uuid_to_mbuf+0x1e>

00028e9e <ble_sm_alg_log_buf>:

#if MYNEWT_VAL(BLE_SM_SC)

static void
ble_sm_alg_log_buf(const char *name, const uint8_t *buf, int len)
{
   28e9e:	b508      	push	{r3, lr}
   28ea0:	4608      	mov	r0, r1
    BLE_HS_LOG(DEBUG, "    %s=", name);
    ble_hs_log_flat_buf(buf, len);
   28ea2:	4611      	mov	r1, r2
   28ea4:	f7fc fb94 	bl	255d0 <ble_hs_log_flat_buf>
    BLE_HS_LOG(DEBUG, "\n");
}
   28ea8:	bd08      	pop	{r3, pc}

00028eaa <ble_sm_alg_aes_cmac>:
 * @param out                   Output; message authentication code.
 */
static int
ble_sm_alg_aes_cmac(const uint8_t *key, const uint8_t *in, size_t len,
                    uint8_t *out)
{
   28eaa:	b570      	push	{r4, r5, r6, lr}
   28eac:	b0c2      	sub	sp, #264	; 0x108
   28eae:	460c      	mov	r4, r1
   28eb0:	4615      	mov	r5, r2
   28eb2:	461e      	mov	r6, r3
    struct tc_aes_key_sched_struct sched;
    struct tc_cmac_struct state;

    if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   28eb4:	aa16      	add	r2, sp, #88	; 0x58
   28eb6:	4601      	mov	r1, r0
   28eb8:	4668      	mov	r0, sp
   28eba:	f002 f894 	bl	2afe6 <tc_cmac_setup>
   28ebe:	b170      	cbz	r0, 28ede <ble_sm_alg_aes_cmac+0x34>
        return BLE_HS_EUNKNOWN;
    }

    if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
   28ec0:	462a      	mov	r2, r5
   28ec2:	4621      	mov	r1, r4
   28ec4:	4668      	mov	r0, sp
   28ec6:	f002 f8bb 	bl	2b040 <tc_cmac_update>
   28eca:	b158      	cbz	r0, 28ee4 <ble_sm_alg_aes_cmac+0x3a>
        return BLE_HS_EUNKNOWN;
    }

    if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
   28ecc:	4669      	mov	r1, sp
   28ece:	4630      	mov	r0, r6
   28ed0:	f002 f920 	bl	2b114 <tc_cmac_final>
   28ed4:	b108      	cbz	r0, 28eda <ble_sm_alg_aes_cmac+0x30>
        return BLE_HS_EUNKNOWN;
    }

    return 0;
   28ed6:	2000      	movs	r0, #0
   28ed8:	e002      	b.n	28ee0 <ble_sm_alg_aes_cmac+0x36>
        return BLE_HS_EUNKNOWN;
   28eda:	2011      	movs	r0, #17
   28edc:	e000      	b.n	28ee0 <ble_sm_alg_aes_cmac+0x36>
        return BLE_HS_EUNKNOWN;
   28ede:	2011      	movs	r0, #17
}
   28ee0:	b042      	add	sp, #264	; 0x108
   28ee2:	bd70      	pop	{r4, r5, r6, pc}
        return BLE_HS_EUNKNOWN;
   28ee4:	2011      	movs	r0, #17
   28ee6:	e7fb      	b.n	28ee0 <ble_sm_alg_aes_cmac+0x36>

00028ee8 <ble_sm_alg_rand>:
}

/* used by uECC to get random data */
static int
ble_sm_alg_rand(uint8_t *dst, unsigned int size)
{
   28ee8:	b508      	push	{r3, lr}
        num = trng_read(g_trng, dst, size);
        dst += num;
        size -= num;
    }
#else
    if (ble_hs_hci_util_rand(dst, size)) {
   28eea:	f7fc fa23 	bl	25334 <ble_hs_hci_util_rand>
   28eee:	b908      	cbnz	r0, 28ef4 <ble_sm_alg_rand+0xc>
        return 0;
    }
#endif

    return 1;
   28ef0:	2001      	movs	r0, #1
}
   28ef2:	bd08      	pop	{r3, pc}
        return 0;
   28ef4:	2000      	movs	r0, #0
   28ef6:	e7fc      	b.n	28ef2 <ble_sm_alg_rand+0xa>

00028ef8 <ble_sm_alg_f4>:
{
   28ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
   28efa:	b097      	sub	sp, #92	; 0x5c
   28efc:	4607      	mov	r7, r0
   28efe:	460d      	mov	r5, r1
   28f00:	4614      	mov	r4, r2
   28f02:	461e      	mov	r6, r3
    ble_hs_log_flat_buf(u, 32);
   28f04:	2120      	movs	r1, #32
   28f06:	f7fc fb63 	bl	255d0 <ble_hs_log_flat_buf>
    ble_hs_log_flat_buf(v, 32);
   28f0a:	2120      	movs	r1, #32
   28f0c:	4628      	mov	r0, r5
   28f0e:	f7fc fb5f 	bl	255d0 <ble_hs_log_flat_buf>
    ble_hs_log_flat_buf(x, 16);
   28f12:	2110      	movs	r1, #16
   28f14:	4620      	mov	r0, r4
   28f16:	f7fc fb5b 	bl	255d0 <ble_hs_log_flat_buf>
    swap_buf(m, u, 32);
   28f1a:	2220      	movs	r2, #32
   28f1c:	4639      	mov	r1, r7
   28f1e:	a801      	add	r0, sp, #4
   28f20:	f005 ff8b 	bl	2ee3a <swap_buf>
    swap_buf(m + 32, v, 32);
   28f24:	2220      	movs	r2, #32
   28f26:	4629      	mov	r1, r5
   28f28:	a809      	add	r0, sp, #36	; 0x24
   28f2a:	f005 ff86 	bl	2ee3a <swap_buf>
    m[64] = z;
   28f2e:	f88d 6044 	strb.w	r6, [sp, #68]	; 0x44
    swap_buf(xs, x, 16);
   28f32:	2210      	movs	r2, #16
   28f34:	4621      	mov	r1, r4
   28f36:	a812      	add	r0, sp, #72	; 0x48
   28f38:	f005 ff7f 	bl	2ee3a <swap_buf>
    rc = ble_sm_alg_aes_cmac(xs, m, sizeof(m), out_enc_data);
   28f3c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   28f3e:	2241      	movs	r2, #65	; 0x41
   28f40:	a901      	add	r1, sp, #4
   28f42:	a812      	add	r0, sp, #72	; 0x48
   28f44:	f7ff ffb1 	bl	28eaa <ble_sm_alg_aes_cmac>
    if (rc != 0) {
   28f48:	b958      	cbnz	r0, 28f62 <ble_sm_alg_f4+0x6a>
   28f4a:	4604      	mov	r4, r0
    swap_in_place(out_enc_data, 16);
   28f4c:	2110      	movs	r1, #16
   28f4e:	981c      	ldr	r0, [sp, #112]	; 0x70
   28f50:	f005 ff63 	bl	2ee1a <swap_in_place>
    ble_hs_log_flat_buf(out_enc_data, 16);
   28f54:	2110      	movs	r1, #16
   28f56:	981c      	ldr	r0, [sp, #112]	; 0x70
   28f58:	f7fc fb3a 	bl	255d0 <ble_hs_log_flat_buf>
}
   28f5c:	4620      	mov	r0, r4
   28f5e:	b017      	add	sp, #92	; 0x5c
   28f60:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return BLE_HS_EUNKNOWN;
   28f62:	2411      	movs	r4, #17
   28f64:	e7fa      	b.n	28f5c <ble_sm_alg_f4+0x64>
	...

00028f68 <ble_sm_alg_f5>:
{
   28f68:	b5f0      	push	{r4, r5, r6, r7, lr}
   28f6a:	b09b      	sub	sp, #108	; 0x6c
   28f6c:	4604      	mov	r4, r0
   28f6e:	460e      	mov	r6, r1
   28f70:	4615      	mov	r5, r2
   28f72:	461f      	mov	r7, r3
    uint8_t m[53] = {
   28f74:	2235      	movs	r2, #53	; 0x35
   28f76:	2100      	movs	r1, #0
   28f78:	a80c      	add	r0, sp, #48	; 0x30
   28f7a:	f7e5 fd39 	bl	e9f0 <memset>
   28f7e:	2362      	movs	r3, #98	; 0x62
   28f80:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
   28f84:	2374      	movs	r3, #116	; 0x74
   28f86:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
   28f8a:	236c      	movs	r3, #108	; 0x6c
   28f8c:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   28f90:	2365      	movs	r3, #101	; 0x65
   28f92:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
   28f96:	2301      	movs	r3, #1
   28f98:	f88d 3063 	strb.w	r3, [sp, #99]	; 0x63
    ble_sm_alg_log_buf("w", w, 32);
   28f9c:	2220      	movs	r2, #32
   28f9e:	4621      	mov	r1, r4
   28fa0:	4834      	ldr	r0, [pc, #208]	; (29074 <ble_sm_alg_f5+0x10c>)
   28fa2:	f7ff ff7c 	bl	28e9e <ble_sm_alg_log_buf>
    ble_sm_alg_log_buf("n1", n1, 16);
   28fa6:	2210      	movs	r2, #16
   28fa8:	4631      	mov	r1, r6
   28faa:	4833      	ldr	r0, [pc, #204]	; (29078 <ble_sm_alg_f5+0x110>)
   28fac:	f7ff ff77 	bl	28e9e <ble_sm_alg_log_buf>
    ble_sm_alg_log_buf("n2", n2, 16);
   28fb0:	2210      	movs	r2, #16
   28fb2:	4629      	mov	r1, r5
   28fb4:	4831      	ldr	r0, [pc, #196]	; (2907c <ble_sm_alg_f5+0x114>)
   28fb6:	f7ff ff72 	bl	28e9e <ble_sm_alg_log_buf>
    swap_buf(ws, w, 32);
   28fba:	2220      	movs	r2, #32
   28fbc:	4621      	mov	r1, r4
   28fbe:	a804      	add	r0, sp, #16
   28fc0:	f005 ff3b 	bl	2ee3a <swap_buf>
    rc = ble_sm_alg_aes_cmac(salt, ws, 32, t);
   28fc4:	466b      	mov	r3, sp
   28fc6:	2220      	movs	r2, #32
   28fc8:	a904      	add	r1, sp, #16
   28fca:	482d      	ldr	r0, [pc, #180]	; (29080 <ble_sm_alg_f5+0x118>)
   28fcc:	f7ff ff6d 	bl	28eaa <ble_sm_alg_aes_cmac>
    if (rc != 0) {
   28fd0:	2800      	cmp	r0, #0
   28fd2:	d147      	bne.n	29064 <ble_sm_alg_f5+0xfc>
    ble_sm_alg_log_buf("t", t, 16);
   28fd4:	2210      	movs	r2, #16
   28fd6:	4669      	mov	r1, sp
   28fd8:	482a      	ldr	r0, [pc, #168]	; (29084 <ble_sm_alg_f5+0x11c>)
   28fda:	f7ff ff60 	bl	28e9e <ble_sm_alg_log_buf>
    swap_buf(m + 5, n1, 16);
   28fde:	2210      	movs	r2, #16
   28fe0:	4631      	mov	r1, r6
   28fe2:	f10d 0035 	add.w	r0, sp, #53	; 0x35
   28fe6:	f005 ff28 	bl	2ee3a <swap_buf>
    swap_buf(m + 21, n2, 16);
   28fea:	2210      	movs	r2, #16
   28fec:	4629      	mov	r1, r5
   28fee:	f10d 0045 	add.w	r0, sp, #69	; 0x45
   28ff2:	f005 ff22 	bl	2ee3a <swap_buf>
    m[37] = a1t;
   28ff6:	f88d 7055 	strb.w	r7, [sp, #85]	; 0x55
    swap_buf(m + 38, a1, 6);
   28ffa:	2206      	movs	r2, #6
   28ffc:	9920      	ldr	r1, [sp, #128]	; 0x80
   28ffe:	f10d 0056 	add.w	r0, sp, #86	; 0x56
   29002:	f005 ff1a 	bl	2ee3a <swap_buf>
    m[44] = a2t;
   29006:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
   2900a:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
    swap_buf(m + 45, a2, 6);
   2900e:	2206      	movs	r2, #6
   29010:	9922      	ldr	r1, [sp, #136]	; 0x88
   29012:	f10d 005d 	add.w	r0, sp, #93	; 0x5d
   29016:	f005 ff10 	bl	2ee3a <swap_buf>
    rc = ble_sm_alg_aes_cmac(t, m, sizeof(m), mackey);
   2901a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   2901c:	2235      	movs	r2, #53	; 0x35
   2901e:	a90c      	add	r1, sp, #48	; 0x30
   29020:	4668      	mov	r0, sp
   29022:	f7ff ff42 	bl	28eaa <ble_sm_alg_aes_cmac>
    if (rc != 0) {
   29026:	bb08      	cbnz	r0, 2906c <ble_sm_alg_f5+0x104>
    ble_sm_alg_log_buf("mackey", mackey, 16);
   29028:	2210      	movs	r2, #16
   2902a:	9923      	ldr	r1, [sp, #140]	; 0x8c
   2902c:	4816      	ldr	r0, [pc, #88]	; (29088 <ble_sm_alg_f5+0x120>)
   2902e:	f7ff ff36 	bl	28e9e <ble_sm_alg_log_buf>
    swap_in_place(mackey, 16);
   29032:	2110      	movs	r1, #16
   29034:	9823      	ldr	r0, [sp, #140]	; 0x8c
   29036:	f005 fef0 	bl	2ee1a <swap_in_place>
    m[0] = 0x01;
   2903a:	a91a      	add	r1, sp, #104	; 0x68
   2903c:	2301      	movs	r3, #1
   2903e:	f801 3d38 	strb.w	r3, [r1, #-56]!
    rc = ble_sm_alg_aes_cmac(t, m, sizeof(m), ltk);
   29042:	9b24      	ldr	r3, [sp, #144]	; 0x90
   29044:	2235      	movs	r2, #53	; 0x35
   29046:	4668      	mov	r0, sp
   29048:	f7ff ff2f 	bl	28eaa <ble_sm_alg_aes_cmac>
    if (rc != 0) {
   2904c:	4604      	mov	r4, r0
   2904e:	b978      	cbnz	r0, 29070 <ble_sm_alg_f5+0x108>
    ble_sm_alg_log_buf("ltk", ltk, 16);
   29050:	2210      	movs	r2, #16
   29052:	9924      	ldr	r1, [sp, #144]	; 0x90
   29054:	480d      	ldr	r0, [pc, #52]	; (2908c <ble_sm_alg_f5+0x124>)
   29056:	f7ff ff22 	bl	28e9e <ble_sm_alg_log_buf>
    swap_in_place(ltk, 16);
   2905a:	2110      	movs	r1, #16
   2905c:	9824      	ldr	r0, [sp, #144]	; 0x90
   2905e:	f005 fedc 	bl	2ee1a <swap_in_place>
    return 0;
   29062:	e000      	b.n	29066 <ble_sm_alg_f5+0xfe>
        return BLE_HS_EUNKNOWN;
   29064:	2411      	movs	r4, #17
}
   29066:	4620      	mov	r0, r4
   29068:	b01b      	add	sp, #108	; 0x6c
   2906a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return BLE_HS_EUNKNOWN;
   2906c:	2411      	movs	r4, #17
   2906e:	e7fa      	b.n	29066 <ble_sm_alg_f5+0xfe>
        return BLE_HS_EUNKNOWN;
   29070:	2411      	movs	r4, #17
   29072:	e7f8      	b.n	29066 <ble_sm_alg_f5+0xfe>
   29074:	00032740 	.word	0x00032740
   29078:	00032744 	.word	0x00032744
   2907c:	00032748 	.word	0x00032748
   29080:	0003282c 	.word	0x0003282c
   29084:	00031750 	.word	0x00031750
   29088:	0003274c 	.word	0x0003274c
   2908c:	00032754 	.word	0x00032754

00029090 <ble_sm_alg_f6>:
{
   29090:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   29094:	b097      	sub	sp, #92	; 0x5c
   29096:	4606      	mov	r6, r0
   29098:	4689      	mov	r9, r1
   2909a:	4690      	mov	r8, r2
   2909c:	461f      	mov	r7, r3
   2909e:	9d20      	ldr	r5, [sp, #128]	; 0x80
   290a0:	9c22      	ldr	r4, [sp, #136]	; 0x88
    ble_sm_alg_log_buf("w", w, 16);
   290a2:	2210      	movs	r2, #16
   290a4:	4601      	mov	r1, r0
   290a6:	483c      	ldr	r0, [pc, #240]	; (29198 <ble_sm_alg_f6+0x108>)
   290a8:	f7ff fef9 	bl	28e9e <ble_sm_alg_log_buf>
    ble_sm_alg_log_buf("n1", n1, 16);
   290ac:	2210      	movs	r2, #16
   290ae:	4649      	mov	r1, r9
   290b0:	483a      	ldr	r0, [pc, #232]	; (2919c <ble_sm_alg_f6+0x10c>)
   290b2:	f7ff fef4 	bl	28e9e <ble_sm_alg_log_buf>
    ble_sm_alg_log_buf("n2", n2, 16);
   290b6:	2210      	movs	r2, #16
   290b8:	4641      	mov	r1, r8
   290ba:	4839      	ldr	r0, [pc, #228]	; (291a0 <ble_sm_alg_f6+0x110>)
   290bc:	f7ff feef 	bl	28e9e <ble_sm_alg_log_buf>
    ble_sm_alg_log_buf("r", r, 16);
   290c0:	2210      	movs	r2, #16
   290c2:	4639      	mov	r1, r7
   290c4:	4837      	ldr	r0, [pc, #220]	; (291a4 <ble_sm_alg_f6+0x114>)
   290c6:	f7ff feea 	bl	28e9e <ble_sm_alg_log_buf>
    ble_sm_alg_log_buf("iocap", iocap, 3);
   290ca:	2203      	movs	r2, #3
   290cc:	991e      	ldr	r1, [sp, #120]	; 0x78
   290ce:	4836      	ldr	r0, [pc, #216]	; (291a8 <ble_sm_alg_f6+0x118>)
   290d0:	f7ff fee5 	bl	28e9e <ble_sm_alg_log_buf>
    ble_sm_alg_log_buf("a1t", &a1t, 1);
   290d4:	2201      	movs	r2, #1
   290d6:	a91f      	add	r1, sp, #124	; 0x7c
   290d8:	4834      	ldr	r0, [pc, #208]	; (291ac <ble_sm_alg_f6+0x11c>)
   290da:	f7ff fee0 	bl	28e9e <ble_sm_alg_log_buf>
    ble_sm_alg_log_buf("a1", a1, 6);
   290de:	2206      	movs	r2, #6
   290e0:	4629      	mov	r1, r5
   290e2:	4833      	ldr	r0, [pc, #204]	; (291b0 <ble_sm_alg_f6+0x120>)
   290e4:	f7ff fedb 	bl	28e9e <ble_sm_alg_log_buf>
    ble_sm_alg_log_buf("a2t", &a2t, 1);
   290e8:	2201      	movs	r2, #1
   290ea:	a921      	add	r1, sp, #132	; 0x84
   290ec:	4831      	ldr	r0, [pc, #196]	; (291b4 <ble_sm_alg_f6+0x124>)
   290ee:	f7ff fed6 	bl	28e9e <ble_sm_alg_log_buf>
    ble_sm_alg_log_buf("a2", a2, 6);
   290f2:	2206      	movs	r2, #6
   290f4:	4621      	mov	r1, r4
   290f6:	4830      	ldr	r0, [pc, #192]	; (291b8 <ble_sm_alg_f6+0x128>)
   290f8:	f7ff fed1 	bl	28e9e <ble_sm_alg_log_buf>
    swap_buf(m, n1, 16);
   290fc:	2210      	movs	r2, #16
   290fe:	4649      	mov	r1, r9
   29100:	a801      	add	r0, sp, #4
   29102:	f005 fe9a 	bl	2ee3a <swap_buf>
    swap_buf(m + 16, n2, 16);
   29106:	2210      	movs	r2, #16
   29108:	4641      	mov	r1, r8
   2910a:	a805      	add	r0, sp, #20
   2910c:	f005 fe95 	bl	2ee3a <swap_buf>
    swap_buf(m + 32, r, 16);
   29110:	2210      	movs	r2, #16
   29112:	4639      	mov	r1, r7
   29114:	a809      	add	r0, sp, #36	; 0x24
   29116:	f005 fe90 	bl	2ee3a <swap_buf>
    swap_buf(m + 48, iocap, 3);
   2911a:	2203      	movs	r2, #3
   2911c:	991e      	ldr	r1, [sp, #120]	; 0x78
   2911e:	a80d      	add	r0, sp, #52	; 0x34
   29120:	f005 fe8b 	bl	2ee3a <swap_buf>
    m[51] = a1t;
   29124:	f89d 307c 	ldrb.w	r3, [sp, #124]	; 0x7c
   29128:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    memcpy(m + 52, a1, 6);
   2912c:	6828      	ldr	r0, [r5, #0]
   2912e:	900e      	str	r0, [sp, #56]	; 0x38
   29130:	88ab      	ldrh	r3, [r5, #4]
   29132:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
    swap_buf(m + 52, a1, 6);
   29136:	2206      	movs	r2, #6
   29138:	4629      	mov	r1, r5
   2913a:	a80e      	add	r0, sp, #56	; 0x38
   2913c:	f005 fe7d 	bl	2ee3a <swap_buf>
    m[58] = a2t;
   29140:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
   29144:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
    memcpy(m + 59, a2, 6);
   29148:	6823      	ldr	r3, [r4, #0]
   2914a:	f8cd 303f 	str.w	r3, [sp, #63]	; 0x3f
   2914e:	88a3      	ldrh	r3, [r4, #4]
   29150:	f8ad 3043 	strh.w	r3, [sp, #67]	; 0x43
    swap_buf(m + 59, a2, 6);
   29154:	2206      	movs	r2, #6
   29156:	4621      	mov	r1, r4
   29158:	f10d 003f 	add.w	r0, sp, #63	; 0x3f
   2915c:	f005 fe6d 	bl	2ee3a <swap_buf>
    swap_buf(ws, w, 16);
   29160:	2210      	movs	r2, #16
   29162:	4631      	mov	r1, r6
   29164:	a812      	add	r0, sp, #72	; 0x48
   29166:	f005 fe68 	bl	2ee3a <swap_buf>
    rc = ble_sm_alg_aes_cmac(ws, m, sizeof(m), check);
   2916a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   2916c:	2241      	movs	r2, #65	; 0x41
   2916e:	a901      	add	r1, sp, #4
   29170:	a812      	add	r0, sp, #72	; 0x48
   29172:	f7ff fe9a 	bl	28eaa <ble_sm_alg_aes_cmac>
    if (rc != 0) {
   29176:	b968      	cbnz	r0, 29194 <ble_sm_alg_f6+0x104>
   29178:	4604      	mov	r4, r0
    ble_sm_alg_log_buf("res", check, 16);
   2917a:	2210      	movs	r2, #16
   2917c:	9923      	ldr	r1, [sp, #140]	; 0x8c
   2917e:	480f      	ldr	r0, [pc, #60]	; (291bc <ble_sm_alg_f6+0x12c>)
   29180:	f7ff fe8d 	bl	28e9e <ble_sm_alg_log_buf>
    swap_in_place(check, 16);
   29184:	2110      	movs	r1, #16
   29186:	9823      	ldr	r0, [sp, #140]	; 0x8c
   29188:	f005 fe47 	bl	2ee1a <swap_in_place>
}
   2918c:	4620      	mov	r0, r4
   2918e:	b017      	add	sp, #92	; 0x5c
   29190:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return BLE_HS_EUNKNOWN;
   29194:	2411      	movs	r4, #17
   29196:	e7f9      	b.n	2918c <ble_sm_alg_f6+0xfc>
   29198:	00032740 	.word	0x00032740
   2919c:	00032744 	.word	0x00032744
   291a0:	00032748 	.word	0x00032748
   291a4:	00031ccc 	.word	0x00031ccc
   291a8:	00032758 	.word	0x00032758
   291ac:	00032760 	.word	0x00032760
   291b0:	00032764 	.word	0x00032764
   291b4:	00032768 	.word	0x00032768
   291b8:	0003276c 	.word	0x0003276c
   291bc:	00032770 	.word	0x00032770

000291c0 <ble_sm_alg_g2>:
{
   291c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   291c2:	b099      	sub	sp, #100	; 0x64
   291c4:	4607      	mov	r7, r0
   291c6:	460e      	mov	r6, r1
   291c8:	4614      	mov	r4, r2
   291ca:	461d      	mov	r5, r3
    ble_sm_alg_log_buf("u", u, 32);
   291cc:	2220      	movs	r2, #32
   291ce:	4601      	mov	r1, r0
   291d0:	4821      	ldr	r0, [pc, #132]	; (29258 <ble_sm_alg_g2+0x98>)
   291d2:	f7ff fe64 	bl	28e9e <ble_sm_alg_log_buf>
    ble_sm_alg_log_buf("v", v, 32);
   291d6:	2220      	movs	r2, #32
   291d8:	4631      	mov	r1, r6
   291da:	4820      	ldr	r0, [pc, #128]	; (2925c <ble_sm_alg_g2+0x9c>)
   291dc:	f7ff fe5f 	bl	28e9e <ble_sm_alg_log_buf>
    ble_sm_alg_log_buf("x", x, 16);
   291e0:	2210      	movs	r2, #16
   291e2:	4621      	mov	r1, r4
   291e4:	481e      	ldr	r0, [pc, #120]	; (29260 <ble_sm_alg_g2+0xa0>)
   291e6:	f7ff fe5a 	bl	28e9e <ble_sm_alg_log_buf>
    ble_sm_alg_log_buf("y", y, 16);
   291ea:	2210      	movs	r2, #16
   291ec:	4629      	mov	r1, r5
   291ee:	481d      	ldr	r0, [pc, #116]	; (29264 <ble_sm_alg_g2+0xa4>)
   291f0:	f7ff fe55 	bl	28e9e <ble_sm_alg_log_buf>
    swap_buf(m, u, 32);
   291f4:	2220      	movs	r2, #32
   291f6:	4639      	mov	r1, r7
   291f8:	a804      	add	r0, sp, #16
   291fa:	f005 fe1e 	bl	2ee3a <swap_buf>
    swap_buf(m + 32, v, 32);
   291fe:	2220      	movs	r2, #32
   29200:	4631      	mov	r1, r6
   29202:	a80c      	add	r0, sp, #48	; 0x30
   29204:	f005 fe19 	bl	2ee3a <swap_buf>
    swap_buf(m + 64, y, 16);
   29208:	2210      	movs	r2, #16
   2920a:	4629      	mov	r1, r5
   2920c:	a814      	add	r0, sp, #80	; 0x50
   2920e:	f005 fe14 	bl	2ee3a <swap_buf>
    swap_buf(xs, x, 16);
   29212:	2210      	movs	r2, #16
   29214:	4621      	mov	r1, r4
   29216:	4668      	mov	r0, sp
   29218:	f005 fe0f 	bl	2ee3a <swap_buf>
    rc = ble_sm_alg_aes_cmac(xs, m, sizeof(m), xs);
   2921c:	466b      	mov	r3, sp
   2921e:	2250      	movs	r2, #80	; 0x50
   29220:	a904      	add	r1, sp, #16
   29222:	4668      	mov	r0, sp
   29224:	f7ff fe41 	bl	28eaa <ble_sm_alg_aes_cmac>
    if (rc != 0) {
   29228:	b9a0      	cbnz	r0, 29254 <ble_sm_alg_g2+0x94>
   2922a:	4604      	mov	r4, r0
    ble_sm_alg_log_buf("res", xs, 16);
   2922c:	2210      	movs	r2, #16
   2922e:	4669      	mov	r1, sp
   29230:	480d      	ldr	r0, [pc, #52]	; (29268 <ble_sm_alg_g2+0xa8>)
   29232:	f7ff fe34 	bl	28e9e <ble_sm_alg_log_buf>
    *passkey = get_be32(xs + 12) % 1000000;
   29236:	a803      	add	r0, sp, #12
   29238:	f005 fde4 	bl	2ee04 <get_be32>
   2923c:	4b0b      	ldr	r3, [pc, #44]	; (2926c <ble_sm_alg_g2+0xac>)
   2923e:	fba3 2300 	umull	r2, r3, r3, r0
   29242:	0c9b      	lsrs	r3, r3, #18
   29244:	4a0a      	ldr	r2, [pc, #40]	; (29270 <ble_sm_alg_g2+0xb0>)
   29246:	fb02 0313 	mls	r3, r2, r3, r0
   2924a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   2924c:	6013      	str	r3, [r2, #0]
}
   2924e:	4620      	mov	r0, r4
   29250:	b019      	add	sp, #100	; 0x64
   29252:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return BLE_HS_EUNKNOWN;
   29254:	2411      	movs	r4, #17
   29256:	e7fa      	b.n	2924e <ble_sm_alg_g2+0x8e>
   29258:	00031d9c 	.word	0x00031d9c
   2925c:	00032774 	.word	0x00032774
   29260:	00031ac0 	.word	0x00031ac0
   29264:	00032778 	.word	0x00032778
   29268:	00032770 	.word	0x00032770
   2926c:	431bde83 	.word	0x431bde83
   29270:	000f4240 	.word	0x000f4240

00029274 <ble_sm_alg_gen_dhkey>:
{
   29274:	b570      	push	{r4, r5, r6, lr}
   29276:	b0a0      	sub	sp, #128	; 0x80
   29278:	460d      	mov	r5, r1
   2927a:	4614      	mov	r4, r2
   2927c:	461e      	mov	r6, r3
    swap_buf(pk, peer_pub_key_x, 32);
   2927e:	2220      	movs	r2, #32
   29280:	4601      	mov	r1, r0
   29282:	eb0d 0002 	add.w	r0, sp, r2
   29286:	f005 fdd8 	bl	2ee3a <swap_buf>
    swap_buf(&pk[32], peer_pub_key_y, 32);
   2928a:	2220      	movs	r2, #32
   2928c:	4629      	mov	r1, r5
   2928e:	a810      	add	r0, sp, #64	; 0x40
   29290:	f005 fdd3 	bl	2ee3a <swap_buf>
    swap_buf(priv, our_priv_key, 32);
   29294:	2220      	movs	r2, #32
   29296:	4621      	mov	r1, r4
   29298:	4668      	mov	r0, sp
   2929a:	f005 fdce 	bl	2ee3a <swap_buf>
    if (uECC_valid_public_key(pk, &curve_secp256r1) < 0) {
   2929e:	490c      	ldr	r1, [pc, #48]	; (292d0 <ble_sm_alg_gen_dhkey+0x5c>)
   292a0:	a808      	add	r0, sp, #32
   292a2:	f002 feef 	bl	2c084 <uECC_valid_public_key>
   292a6:	2800      	cmp	r0, #0
   292a8:	db0e      	blt.n	292c8 <ble_sm_alg_gen_dhkey+0x54>
    rc = uECC_shared_secret(pk, priv, dh, &curve_secp256r1);
   292aa:	4b09      	ldr	r3, [pc, #36]	; (292d0 <ble_sm_alg_gen_dhkey+0x5c>)
   292ac:	aa18      	add	r2, sp, #96	; 0x60
   292ae:	4669      	mov	r1, sp
   292b0:	a808      	add	r0, sp, #32
   292b2:	f002 ff57 	bl	2c164 <uECC_shared_secret>
    if (rc == TC_CRYPTO_FAIL) {
   292b6:	b148      	cbz	r0, 292cc <ble_sm_alg_gen_dhkey+0x58>
    swap_buf(out_dhkey, dh, 32);
   292b8:	2220      	movs	r2, #32
   292ba:	a918      	add	r1, sp, #96	; 0x60
   292bc:	4630      	mov	r0, r6
   292be:	f005 fdbc 	bl	2ee3a <swap_buf>
    return 0;
   292c2:	2000      	movs	r0, #0
}
   292c4:	b020      	add	sp, #128	; 0x80
   292c6:	bd70      	pop	{r4, r5, r6, pc}
        return BLE_HS_EUNKNOWN;
   292c8:	2011      	movs	r0, #17
   292ca:	e7fb      	b.n	292c4 <ble_sm_alg_gen_dhkey+0x50>
        return BLE_HS_EUNKNOWN;
   292cc:	2011      	movs	r0, #17
   292ce:	e7f9      	b.n	292c4 <ble_sm_alg_gen_dhkey+0x50>
   292d0:	0003277c 	.word	0x0003277c

000292d4 <ble_sm_alg_gen_key_pair>:
{
   292d4:	b530      	push	{r4, r5, lr}
   292d6:	b091      	sub	sp, #68	; 0x44
   292d8:	4605      	mov	r5, r0
   292da:	460c      	mov	r4, r1
        if (uECC_make_key(pk, priv, &curve_secp256r1) != TC_CRYPTO_SUCCESS) {
   292dc:	4a10      	ldr	r2, [pc, #64]	; (29320 <ble_sm_alg_gen_key_pair+0x4c>)
   292de:	4621      	mov	r1, r4
   292e0:	4668      	mov	r0, sp
   292e2:	f002 fef3 	bl	2c0cc <uECC_make_key>
   292e6:	2801      	cmp	r0, #1
   292e8:	d117      	bne.n	2931a <ble_sm_alg_gen_key_pair+0x46>
    } while (memcmp(priv, ble_sm_alg_dbg_priv_key, 32) == 0);
   292ea:	2220      	movs	r2, #32
   292ec:	490d      	ldr	r1, [pc, #52]	; (29324 <ble_sm_alg_gen_key_pair+0x50>)
   292ee:	4620      	mov	r0, r4
   292f0:	f7e5 fb32 	bl	e958 <memcmp>
   292f4:	2800      	cmp	r0, #0
   292f6:	d0f1      	beq.n	292dc <ble_sm_alg_gen_key_pair+0x8>
    swap_buf(pub, pk, 32);
   292f8:	2220      	movs	r2, #32
   292fa:	4669      	mov	r1, sp
   292fc:	4628      	mov	r0, r5
   292fe:	f005 fd9c 	bl	2ee3a <swap_buf>
    swap_buf(&pub[32], &pk[32], 32);
   29302:	2220      	movs	r2, #32
   29304:	eb0d 0102 	add.w	r1, sp, r2
   29308:	18a8      	adds	r0, r5, r2
   2930a:	f005 fd96 	bl	2ee3a <swap_buf>
    swap_in_place(priv, 32);
   2930e:	2120      	movs	r1, #32
   29310:	4620      	mov	r0, r4
   29312:	f005 fd82 	bl	2ee1a <swap_in_place>
    return 0;
   29316:	2000      	movs	r0, #0
   29318:	e000      	b.n	2931c <ble_sm_alg_gen_key_pair+0x48>
            return BLE_HS_EUNKNOWN;
   2931a:	2011      	movs	r0, #17
}
   2931c:	b011      	add	sp, #68	; 0x44
   2931e:	bd30      	pop	{r4, r5, pc}
   29320:	0003277c 	.word	0x0003277c
   29324:	00032720 	.word	0x00032720

00029328 <ble_sm_alg_ecc_init>:

void
ble_sm_alg_ecc_init(void)
{
   29328:	b508      	push	{r3, lr}
    uECC_set_rng(ble_sm_alg_rand);
   2932a:	4802      	ldr	r0, [pc, #8]	; (29334 <ble_sm_alg_ecc_init+0xc>)
   2932c:	f001 ffc8 	bl	2b2c0 <uECC_set_rng>
}
   29330:	bd08      	pop	{r3, pc}
   29332:	bf00      	nop
   29334:	00028ee9 	.word	0x00028ee9

00029338 <ble_svc_ans_new_alert_notify>:
 *
 * @return 0 on success, non-zero error code otherwise.
 */
static int
ble_svc_ans_new_alert_notify(uint8_t cat_id, const char * info_str)
{
   29338:	b570      	push	{r4, r5, r6, lr}
    int info_str_len;

    /* Clear notification to remove old infomation that may persist */
    memset(&ble_svc_ans_new_alert_val, '\0',
   2933a:	4a19      	ldr	r2, [pc, #100]	; (293a0 <ble_svc_ans_new_alert_notify+0x68>)
   2933c:	2300      	movs	r3, #0
   2933e:	f8c2 3002 	str.w	r3, [r2, #2]
   29342:	f8c2 3006 	str.w	r3, [r2, #6]
   29346:	f8c2 300a 	str.w	r3, [r2, #10]
   2934a:	f8c2 300e 	str.w	r3, [r2, #14]
   2934e:	8253      	strh	r3, [r2, #18]
           BLE_SVC_ANS_NEW_ALERT_MAX_LEN);

    /* Set ID and count values */
    ble_svc_ans_new_alert_val[0] = cat_id;
   29350:	7010      	strb	r0, [r2, #0]
    ble_svc_ans_new_alert_val[1] = ble_svc_ans_new_alert_cnt[cat_id];
   29352:	4b14      	ldr	r3, [pc, #80]	; (293a4 <ble_svc_ans_new_alert_notify+0x6c>)
   29354:	5c1b      	ldrb	r3, [r3, r0]
   29356:	7053      	strb	r3, [r2, #1]

    if (info_str) {
   29358:	b151      	cbz	r1, 29370 <ble_svc_ans_new_alert_notify+0x38>
   2935a:	460c      	mov	r4, r1
        info_str_len = strlen(info_str);
   2935c:	4608      	mov	r0, r1
   2935e:	f7e5 fbbd 	bl	eadc <strlen>
        if (info_str_len > BLE_SVC_ANS_INFO_STR_MAX_LEN) {
   29362:	2812      	cmp	r0, #18
   29364:	dc0b      	bgt.n	2937e <ble_svc_ans_new_alert_notify+0x46>
            /* If info_str is longer than the max string length only
             * write up to the maximum length */
            memcpy(&ble_svc_ans_new_alert_val[2], info_str,
                   BLE_SVC_ANS_INFO_STR_MAX_LEN);
        } else {
            memcpy(&ble_svc_ans_new_alert_val[2], info_str, info_str_len);
   29366:	4602      	mov	r2, r0
   29368:	4621      	mov	r1, r4
   2936a:	480f      	ldr	r0, [pc, #60]	; (293a8 <ble_svc_ans_new_alert_notify+0x70>)
   2936c:	f7e5 fb18 	bl	e9a0 <memcpy>
        }
    }
    return ble_gattc_notify(ble_svc_ans_conn_handle,
   29370:	4b0e      	ldr	r3, [pc, #56]	; (293ac <ble_svc_ans_new_alert_notify+0x74>)
   29372:	8819      	ldrh	r1, [r3, #0]
   29374:	4b0e      	ldr	r3, [pc, #56]	; (293b0 <ble_svc_ans_new_alert_notify+0x78>)
   29376:	8818      	ldrh	r0, [r3, #0]
   29378:	f7f9 f99a 	bl	226b0 <ble_gattc_notify>
                            ble_svc_ans_new_alert_val_handle);
}
   2937c:	bd70      	pop	{r4, r5, r6, pc}
            memcpy(&ble_svc_ans_new_alert_val[2], info_str,
   2937e:	4a08      	ldr	r2, [pc, #32]	; (293a0 <ble_svc_ans_new_alert_notify+0x68>)
   29380:	1c93      	adds	r3, r2, #2
   29382:	6826      	ldr	r6, [r4, #0]
   29384:	6865      	ldr	r5, [r4, #4]
   29386:	68a0      	ldr	r0, [r4, #8]
   29388:	68e1      	ldr	r1, [r4, #12]
   2938a:	f8c2 6002 	str.w	r6, [r2, #2]
   2938e:	f8c2 5006 	str.w	r5, [r2, #6]
   29392:	f8c2 000a 	str.w	r0, [r2, #10]
   29396:	f8c2 100e 	str.w	r1, [r2, #14]
   2939a:	8a22      	ldrh	r2, [r4, #16]
   2939c:	821a      	strh	r2, [r3, #16]
   2939e:	e7e7      	b.n	29370 <ble_svc_ans_new_alert_notify+0x38>
   293a0:	20002e54 	.word	0x20002e54
   293a4:	20002e4c 	.word	0x20002e4c
   293a8:	20002e56 	.word	0x20002e56
   293ac:	20002e68 	.word	0x20002e68
   293b0:	20002e46 	.word	0x20002e46

000293b4 <ble_svc_ans_unr_alert_notify>:
 *
 * @return 0 on success, non-zer0 error code otherwise.
 */
static int
ble_svc_ans_unr_alert_notify(uint8_t cat_id)
{
   293b4:	b508      	push	{r3, lr}
    ble_svc_ans_unr_alert_stat[0] = cat_id;
   293b6:	4b06      	ldr	r3, [pc, #24]	; (293d0 <ble_svc_ans_unr_alert_notify+0x1c>)
   293b8:	7018      	strb	r0, [r3, #0]
    ble_svc_ans_unr_alert_stat[1] = ble_svc_ans_unr_alert_cnt[cat_id];
   293ba:	4a06      	ldr	r2, [pc, #24]	; (293d4 <ble_svc_ans_unr_alert_notify+0x20>)
   293bc:	5c12      	ldrb	r2, [r2, r0]
   293be:	705a      	strb	r2, [r3, #1]
    return ble_gattc_notify(ble_svc_ans_conn_handle,
   293c0:	4b05      	ldr	r3, [pc, #20]	; (293d8 <ble_svc_ans_unr_alert_notify+0x24>)
   293c2:	8819      	ldrh	r1, [r3, #0]
   293c4:	4b05      	ldr	r3, [pc, #20]	; (293dc <ble_svc_ans_unr_alert_notify+0x28>)
   293c6:	8818      	ldrh	r0, [r3, #0]
   293c8:	f7f9 f972 	bl	226b0 <ble_gattc_notify>
                            ble_svc_ans_unr_alert_val_handle);
}
   293cc:	bd08      	pop	{r3, pc}
   293ce:	bf00      	nop
   293d0:	20002e78 	.word	0x20002e78
   293d4:	20002e70 	.word	0x20002e70
   293d8:	20002e7a 	.word	0x20002e7a
   293dc:	20002e46 	.word	0x20002e46

000293e0 <ble_svc_ans_chr_write>:
 */
static int
ble_svc_ans_chr_write(struct os_mbuf *om, uint16_t min_len,
                      uint16_t max_len, void *dst,
                      uint16_t *len)
{
   293e0:	b510      	push	{r4, lr}
    uint16_t om_len;
    int rc;

    om_len = OS_MBUF_PKTLEN(om);
   293e2:	8a04      	ldrh	r4, [r0, #16]
    if (om_len < min_len || om_len > max_len) {
   293e4:	428c      	cmp	r4, r1
   293e6:	d309      	bcc.n	293fc <ble_svc_ans_chr_write+0x1c>
   293e8:	4294      	cmp	r4, r2
   293ea:	d809      	bhi.n	29400 <ble_svc_ans_chr_write+0x20>
   293ec:	4619      	mov	r1, r3
        return BLE_ATT_ERR_INVALID_ATTR_VALUE_LEN;
    }

    rc = ble_hs_mbuf_to_flat(om, dst, max_len, len);
   293ee:	9b02      	ldr	r3, [sp, #8]
   293f0:	f7fc f918 	bl	25624 <ble_hs_mbuf_to_flat>
    if (rc != 0) {
   293f4:	4603      	mov	r3, r0
   293f6:	b120      	cbz	r0, 29402 <ble_svc_ans_chr_write+0x22>
        return BLE_ATT_ERR_UNLIKELY;
   293f8:	230e      	movs	r3, #14
   293fa:	e002      	b.n	29402 <ble_svc_ans_chr_write+0x22>
        return BLE_ATT_ERR_INVALID_ATTR_VALUE_LEN;
   293fc:	230d      	movs	r3, #13
   293fe:	e000      	b.n	29402 <ble_svc_ans_chr_write+0x22>
   29400:	230d      	movs	r3, #13
    }

    return 0;
}
   29402:	4618      	mov	r0, r3
   29404:	bd10      	pop	{r4, pc}
	...

00029408 <ble_svc_ans_access>:
{
   29408:	b530      	push	{r4, r5, lr}
   2940a:	b083      	sub	sp, #12
   2940c:	4614      	mov	r4, r2
    uuid16 = ble_uuid_u16(ctxt->chr->uuid);
   2940e:	6893      	ldr	r3, [r2, #8]
   29410:	6818      	ldr	r0, [r3, #0]
   29412:	f7ff fcc7 	bl	28da4 <ble_uuid_u16>
    assert(uuid16 != 0);
   29416:	b150      	cbz	r0, 2942e <ble_svc_ans_access+0x26>
    switch (uuid16) {
   29418:	f5a0 5029 	sub.w	r0, r0, #10816	; 0x2a40
   2941c:	3804      	subs	r0, #4
   2941e:	2804      	cmp	r0, #4
   29420:	f200 80db 	bhi.w	295da <ble_svc_ans_access+0x1d2>
   29424:	e8df f000 	tbb	[pc, r0]
   29428:	0d255d74 	.word	0x0d255d74
   2942c:	47          	.byte	0x47
   2942d:	00          	.byte	0x00
    assert(uuid16 != 0);
   2942e:	f7e2 fedb 	bl	c1e8 <hal_debugger_connected>
   29432:	b100      	cbz	r0, 29436 <ble_svc_ans_access+0x2e>
   29434:	be01      	bkpt	0x0001
   29436:	2300      	movs	r3, #0
   29438:	461a      	mov	r2, r3
   2943a:	4619      	mov	r1, r3
   2943c:	4618      	mov	r0, r3
   2943e:	f7e3 fb87 	bl	cb50 <__assert_func>
        assert(ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR);
   29442:	7823      	ldrb	r3, [r4, #0]
   29444:	b94b      	cbnz	r3, 2945a <ble_svc_ans_access+0x52>
        rc = os_mbuf_append(ctxt->om, &ble_svc_ans_new_alert_cat,
   29446:	2201      	movs	r2, #1
   29448:	496b      	ldr	r1, [pc, #428]	; (295f8 <ble_svc_ans_access+0x1f0>)
   2944a:	6860      	ldr	r0, [r4, #4]
   2944c:	f7e4 f804 	bl	d458 <os_mbuf_append>
        return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   29450:	4604      	mov	r4, r0
   29452:	b960      	cbnz	r0, 2946e <ble_svc_ans_access+0x66>
}
   29454:	4620      	mov	r0, r4
   29456:	b003      	add	sp, #12
   29458:	bd30      	pop	{r4, r5, pc}
        assert(ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR);
   2945a:	f7e2 fec5 	bl	c1e8 <hal_debugger_connected>
   2945e:	b100      	cbz	r0, 29462 <ble_svc_ans_access+0x5a>
   29460:	be01      	bkpt	0x0001
   29462:	2300      	movs	r3, #0
   29464:	461a      	mov	r2, r3
   29466:	4619      	mov	r1, r3
   29468:	4618      	mov	r0, r3
   2946a:	f7e3 fb71 	bl	cb50 <__assert_func>
        return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   2946e:	2411      	movs	r4, #17
   29470:	e7f0      	b.n	29454 <ble_svc_ans_access+0x4c>
        if (ctxt->op == BLE_GATT_ACCESS_OP_WRITE_CHR) {
   29472:	7823      	ldrb	r3, [r4, #0]
   29474:	2b01      	cmp	r3, #1
   29476:	d00a      	beq.n	2948e <ble_svc_ans_access+0x86>
        } else if (ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR) {
   29478:	b99b      	cbnz	r3, 294a2 <ble_svc_ans_access+0x9a>
            rc = os_mbuf_append(ctxt->om, &ble_svc_ans_new_alert_val,
   2947a:	2214      	movs	r2, #20
   2947c:	495f      	ldr	r1, [pc, #380]	; (295fc <ble_svc_ans_access+0x1f4>)
   2947e:	6860      	ldr	r0, [r4, #4]
   29480:	f7e3 ffea 	bl	d458 <os_mbuf_append>
            return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   29484:	4604      	mov	r4, r0
   29486:	2800      	cmp	r0, #0
   29488:	d0e4      	beq.n	29454 <ble_svc_ans_access+0x4c>
   2948a:	2411      	movs	r4, #17
   2948c:	e7e2      	b.n	29454 <ble_svc_ans_access+0x4c>
            rc = ble_svc_ans_chr_write(ctxt->om, 0,
   2948e:	6860      	ldr	r0, [r4, #4]
   29490:	4b5b      	ldr	r3, [pc, #364]	; (29600 <ble_svc_ans_access+0x1f8>)
   29492:	9300      	str	r3, [sp, #0]
   29494:	4b59      	ldr	r3, [pc, #356]	; (295fc <ble_svc_ans_access+0x1f4>)
   29496:	2214      	movs	r2, #20
   29498:	2100      	movs	r1, #0
   2949a:	f7ff ffa1 	bl	293e0 <ble_svc_ans_chr_write>
   2949e:	4604      	mov	r4, r0
            return rc;
   294a0:	e7d8      	b.n	29454 <ble_svc_ans_access+0x4c>
        assert(0);
   294a2:	f7e2 fea1 	bl	c1e8 <hal_debugger_connected>
   294a6:	b100      	cbz	r0, 294aa <ble_svc_ans_access+0xa2>
   294a8:	be01      	bkpt	0x0001
   294aa:	2300      	movs	r3, #0
   294ac:	461a      	mov	r2, r3
   294ae:	4619      	mov	r1, r3
   294b0:	4618      	mov	r0, r3
   294b2:	f7e3 fb4d 	bl	cb50 <__assert_func>
        assert(ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR);
   294b6:	7823      	ldrb	r3, [r4, #0]
   294b8:	b94b      	cbnz	r3, 294ce <ble_svc_ans_access+0xc6>
        rc = os_mbuf_append(ctxt->om, &ble_svc_ans_unr_alert_cat,
   294ba:	2201      	movs	r2, #1
   294bc:	4951      	ldr	r1, [pc, #324]	; (29604 <ble_svc_ans_access+0x1fc>)
   294be:	6860      	ldr	r0, [r4, #4]
   294c0:	f7e3 ffca 	bl	d458 <os_mbuf_append>
        return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   294c4:	4604      	mov	r4, r0
   294c6:	2800      	cmp	r0, #0
   294c8:	d0c4      	beq.n	29454 <ble_svc_ans_access+0x4c>
   294ca:	2411      	movs	r4, #17
   294cc:	e7c2      	b.n	29454 <ble_svc_ans_access+0x4c>
        assert(ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR);
   294ce:	f7e2 fe8b 	bl	c1e8 <hal_debugger_connected>
   294d2:	b100      	cbz	r0, 294d6 <ble_svc_ans_access+0xce>
   294d4:	be01      	bkpt	0x0001
   294d6:	2300      	movs	r3, #0
   294d8:	461a      	mov	r2, r3
   294da:	4619      	mov	r1, r3
   294dc:	4618      	mov	r0, r3
   294de:	f7e3 fb37 	bl	cb50 <__assert_func>
        if (ctxt->op == BLE_GATT_ACCESS_OP_WRITE_CHR) {
   294e2:	7823      	ldrb	r3, [r4, #0]
   294e4:	2b01      	cmp	r3, #1
   294e6:	d009      	beq.n	294fc <ble_svc_ans_access+0xf4>
            rc = os_mbuf_append(ctxt->om, &ble_svc_ans_unr_alert_stat,
   294e8:	2202      	movs	r2, #2
   294ea:	4947      	ldr	r1, [pc, #284]	; (29608 <ble_svc_ans_access+0x200>)
   294ec:	6860      	ldr	r0, [r4, #4]
   294ee:	f7e3 ffb3 	bl	d458 <os_mbuf_append>
            return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   294f2:	4604      	mov	r4, r0
   294f4:	2800      	cmp	r0, #0
   294f6:	d0ad      	beq.n	29454 <ble_svc_ans_access+0x4c>
   294f8:	2411      	movs	r4, #17
   294fa:	e7ab      	b.n	29454 <ble_svc_ans_access+0x4c>
            rc = ble_svc_ans_chr_write(ctxt->om,
   294fc:	6860      	ldr	r0, [r4, #4]
   294fe:	2300      	movs	r3, #0
   29500:	9300      	str	r3, [sp, #0]
   29502:	4b41      	ldr	r3, [pc, #260]	; (29608 <ble_svc_ans_access+0x200>)
   29504:	2202      	movs	r2, #2
   29506:	4611      	mov	r1, r2
   29508:	f7ff ff6a 	bl	293e0 <ble_svc_ans_chr_write>
   2950c:	4604      	mov	r4, r0
            return rc;
   2950e:	e7a1      	b.n	29454 <ble_svc_ans_access+0x4c>
        if (ctxt->op == BLE_GATT_ACCESS_OP_WRITE_CHR) {
   29510:	7823      	ldrb	r3, [r4, #0]
   29512:	2b01      	cmp	r3, #1
   29514:	d001      	beq.n	2951a <ble_svc_ans_access+0x112>
        return rc;
   29516:	240e      	movs	r4, #14
   29518:	e79c      	b.n	29454 <ble_svc_ans_access+0x4c>
            rc = ble_svc_ans_chr_write(ctxt->om,
   2951a:	6860      	ldr	r0, [r4, #4]
   2951c:	2300      	movs	r3, #0
   2951e:	9300      	str	r3, [sp, #0]
   29520:	4b3a      	ldr	r3, [pc, #232]	; (2960c <ble_svc_ans_access+0x204>)
   29522:	2202      	movs	r2, #2
   29524:	4611      	mov	r1, r2
   29526:	f7ff ff5b 	bl	293e0 <ble_svc_ans_chr_write>
            if (rc != 0) {
   2952a:	4604      	mov	r4, r0
   2952c:	2800      	cmp	r0, #0
   2952e:	d191      	bne.n	29454 <ble_svc_ans_access+0x4c>
            cmd_id = ble_svc_ans_alert_not_ctrl_pt[0];
   29530:	4b36      	ldr	r3, [pc, #216]	; (2960c <ble_svc_ans_access+0x204>)
   29532:	781a      	ldrb	r2, [r3, #0]
            cat_id = ble_svc_ans_alert_not_ctrl_pt[1];
   29534:	7858      	ldrb	r0, [r3, #1]
            if (cat_id < BLE_SVC_ANS_CAT_NUM) {
   29536:	2807      	cmp	r0, #7
   29538:	d809      	bhi.n	2954e <ble_svc_ans_access+0x146>
                cat_bit_mask = (1 << cat_id);
   2953a:	2301      	movs	r3, #1
   2953c:	4083      	lsls	r3, r0
   2953e:	b2db      	uxtb	r3, r3
            switch (cmd_id) {
   29540:	2a05      	cmp	r2, #5
   29542:	d856      	bhi.n	295f2 <ble_svc_ans_access+0x1ea>
   29544:	e8df f002 	tbb	[pc, r2]
   29548:	17110c07 	.word	0x17110c07
   2954c:	341d      	.short	0x341d
            } else if (cat_id == 0xff) {
   2954e:	28ff      	cmp	r0, #255	; 0xff
   29550:	d14d      	bne.n	295ee <ble_svc_ans_access+0x1e6>
                cat_bit_mask = cat_id;
   29552:	4603      	mov	r3, r0
   29554:	e7f4      	b.n	29540 <ble_svc_ans_access+0x138>
                ble_svc_ans_new_alert_cat |= cat_bit_mask;
   29556:	4a28      	ldr	r2, [pc, #160]	; (295f8 <ble_svc_ans_access+0x1f0>)
   29558:	7811      	ldrb	r1, [r2, #0]
   2955a:	430b      	orrs	r3, r1
   2955c:	7013      	strb	r3, [r2, #0]
                break;
   2955e:	e779      	b.n	29454 <ble_svc_ans_access+0x4c>
                ble_svc_ans_unr_alert_cat |= cat_bit_mask;
   29560:	4a28      	ldr	r2, [pc, #160]	; (29604 <ble_svc_ans_access+0x1fc>)
   29562:	7811      	ldrb	r1, [r2, #0]
   29564:	430b      	orrs	r3, r1
   29566:	7013      	strb	r3, [r2, #0]
                break;
   29568:	e774      	b.n	29454 <ble_svc_ans_access+0x4c>
                ble_svc_ans_new_alert_cat &= ~cat_bit_mask;
   2956a:	4923      	ldr	r1, [pc, #140]	; (295f8 <ble_svc_ans_access+0x1f0>)
   2956c:	780a      	ldrb	r2, [r1, #0]
   2956e:	ea22 0303 	bic.w	r3, r2, r3
   29572:	700b      	strb	r3, [r1, #0]
                break;
   29574:	e76e      	b.n	29454 <ble_svc_ans_access+0x4c>
                ble_svc_ans_unr_alert_cat &= ~cat_bit_mask;
   29576:	4923      	ldr	r1, [pc, #140]	; (29604 <ble_svc_ans_access+0x1fc>)
   29578:	780a      	ldrb	r2, [r1, #0]
   2957a:	ea22 0303 	bic.w	r3, r2, r3
   2957e:	700b      	strb	r3, [r1, #0]
                break;
   29580:	e768      	b.n	29454 <ble_svc_ans_access+0x4c>
                if (cat_id == 0xff) {
   29582:	28ff      	cmp	r0, #255	; 0xff
   29584:	d110      	bne.n	295a8 <ble_svc_ans_access+0x1a0>
                    for (i = BLE_SVC_ANS_CAT_NUM - 1; i > 0; --i) {
   29586:	2507      	movs	r5, #7
   29588:	e000      	b.n	2958c <ble_svc_ans_access+0x184>
   2958a:	3d01      	subs	r5, #1
   2958c:	2d00      	cmp	r5, #0
   2958e:	f77f af61 	ble.w	29454 <ble_svc_ans_access+0x4c>
                        if ((ble_svc_ans_new_alert_cat >> i) & 0x01) {
   29592:	4b19      	ldr	r3, [pc, #100]	; (295f8 <ble_svc_ans_access+0x1f0>)
   29594:	781b      	ldrb	r3, [r3, #0]
   29596:	412b      	asrs	r3, r5
   29598:	f013 0f01 	tst.w	r3, #1
   2959c:	d0f5      	beq.n	2958a <ble_svc_ans_access+0x182>
                            ble_svc_ans_new_alert_notify(i, NULL);
   2959e:	2100      	movs	r1, #0
   295a0:	b2e8      	uxtb	r0, r5
   295a2:	f7ff fec9 	bl	29338 <ble_svc_ans_new_alert_notify>
   295a6:	e7f0      	b.n	2958a <ble_svc_ans_access+0x182>
                    ble_svc_ans_new_alert_notify(cat_id, NULL);
   295a8:	2100      	movs	r1, #0
   295aa:	f7ff fec5 	bl	29338 <ble_svc_ans_new_alert_notify>
   295ae:	e751      	b.n	29454 <ble_svc_ans_access+0x4c>
                if (cat_id == 0xff) {
   295b0:	28ff      	cmp	r0, #255	; 0xff
   295b2:	d10f      	bne.n	295d4 <ble_svc_ans_access+0x1cc>
                    for (i = BLE_SVC_ANS_CAT_NUM - 1; i > 0; --i) {
   295b4:	2507      	movs	r5, #7
   295b6:	e000      	b.n	295ba <ble_svc_ans_access+0x1b2>
   295b8:	3d01      	subs	r5, #1
   295ba:	2d00      	cmp	r5, #0
   295bc:	f77f af4a 	ble.w	29454 <ble_svc_ans_access+0x4c>
                        if ((ble_svc_ans_unr_alert_cat >> i) & 0x01) {
   295c0:	4b10      	ldr	r3, [pc, #64]	; (29604 <ble_svc_ans_access+0x1fc>)
   295c2:	781b      	ldrb	r3, [r3, #0]
   295c4:	412b      	asrs	r3, r5
   295c6:	f013 0f01 	tst.w	r3, #1
   295ca:	d0f5      	beq.n	295b8 <ble_svc_ans_access+0x1b0>
                            ble_svc_ans_unr_alert_notify(i);
   295cc:	b2e8      	uxtb	r0, r5
   295ce:	f7ff fef1 	bl	293b4 <ble_svc_ans_unr_alert_notify>
   295d2:	e7f1      	b.n	295b8 <ble_svc_ans_access+0x1b0>
                    ble_svc_ans_unr_alert_notify(cat_id);
   295d4:	f7ff feee 	bl	293b4 <ble_svc_ans_unr_alert_notify>
   295d8:	e73c      	b.n	29454 <ble_svc_ans_access+0x4c>
        assert(0);
   295da:	f7e2 fe05 	bl	c1e8 <hal_debugger_connected>
   295de:	b100      	cbz	r0, 295e2 <ble_svc_ans_access+0x1da>
   295e0:	be01      	bkpt	0x0001
   295e2:	2300      	movs	r3, #0
   295e4:	461a      	mov	r2, r3
   295e6:	4619      	mov	r1, r3
   295e8:	4618      	mov	r0, r3
   295ea:	f7e3 fab1 	bl	cb50 <__assert_func>
                return BLE_ATT_ERR_UNLIKELY;
   295ee:	240e      	movs	r4, #14
   295f0:	e730      	b.n	29454 <ble_svc_ans_access+0x4c>
                return BLE_SVC_ANS_ERR_CMD_NOT_SUPPORTED;
   295f2:	24a0      	movs	r4, #160	; 0xa0
   295f4:	e72e      	b.n	29454 <ble_svc_ans_access+0x4c>
   295f6:	bf00      	nop
   295f8:	20002e48 	.word	0x20002e48
   295fc:	20002e54 	.word	0x20002e54
   29600:	20002e6a 	.word	0x20002e6a
   29604:	20002e6c 	.word	0x20002e6c
   29608:	20002e78 	.word	0x20002e78
   2960c:	20002e44 	.word	0x20002e44

00029610 <ble_svc_ans_init>:
 * XXX: We should technically be able to change the new alert and
 *      unread alert catagories when we have no active connections.
 */
void
ble_svc_ans_init(void)
{
   29610:	b510      	push	{r4, lr}
   29612:	b082      	sub	sp, #8
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   29614:	4b1a      	ldr	r3, [pc, #104]	; (29680 <ble_svc_ans_init+0x70>)
   29616:	781b      	ldrb	r3, [r3, #0]
   29618:	b173      	cbz	r3, 29638 <ble_svc_ans_init+0x28>

    rc = ble_gatts_count_cfg(ble_svc_ans_defs);
   2961a:	481a      	ldr	r0, [pc, #104]	; (29684 <ble_svc_ans_init+0x74>)
   2961c:	f7fa f94e 	bl	238bc <ble_gatts_count_cfg>
    SYSINIT_PANIC_ASSERT(rc == 0);
   29620:	b9a0      	cbnz	r0, 2964c <ble_svc_ans_init+0x3c>

    rc = ble_gatts_add_svcs(ble_svc_ans_defs);
   29622:	4818      	ldr	r0, [pc, #96]	; (29684 <ble_svc_ans_init+0x74>)
   29624:	f7fa f926 	bl	23874 <ble_gatts_add_svcs>
    SYSINIT_PANIC_ASSERT(rc == 0);
   29628:	b9e8      	cbnz	r0, 29666 <ble_svc_ans_init+0x56>

    ble_svc_ans_new_alert_cat = MYNEWT_VAL(BLE_SVC_ANS_NEW_ALERT_CAT);
   2962a:	2300      	movs	r3, #0
   2962c:	4a16      	ldr	r2, [pc, #88]	; (29688 <ble_svc_ans_init+0x78>)
   2962e:	7013      	strb	r3, [r2, #0]
    ble_svc_ans_unr_alert_cat = MYNEWT_VAL(BLE_SVC_ANS_UNR_ALERT_CAT);
   29630:	4a16      	ldr	r2, [pc, #88]	; (2968c <ble_svc_ans_init+0x7c>)
   29632:	7013      	strb	r3, [r2, #0]
}
   29634:	b002      	add	sp, #8
   29636:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   29638:	f7e2 fdd6 	bl	c1e8 <hal_debugger_connected>
   2963c:	b100      	cbz	r0, 29640 <ble_svc_ans_init+0x30>
   2963e:	be01      	bkpt	0x0001
   29640:	2300      	movs	r3, #0
   29642:	461a      	mov	r2, r3
   29644:	4619      	mov	r1, r3
   29646:	4618      	mov	r0, r3
   29648:	f7e3 fa82 	bl	cb50 <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
   2964c:	f7e2 fdcc 	bl	c1e8 <hal_debugger_connected>
   29650:	b100      	cbz	r0, 29654 <ble_svc_ans_init+0x44>
   29652:	be01      	bkpt	0x0001
   29654:	2000      	movs	r0, #0
   29656:	9000      	str	r0, [sp, #0]
   29658:	4b0d      	ldr	r3, [pc, #52]	; (29690 <ble_svc_ans_init+0x80>)
   2965a:	681c      	ldr	r4, [r3, #0]
   2965c:	4603      	mov	r3, r0
   2965e:	4602      	mov	r2, r0
   29660:	4601      	mov	r1, r0
   29662:	47a0      	blx	r4
   29664:	e7dd      	b.n	29622 <ble_svc_ans_init+0x12>
    SYSINIT_PANIC_ASSERT(rc == 0);
   29666:	f7e2 fdbf 	bl	c1e8 <hal_debugger_connected>
   2966a:	b100      	cbz	r0, 2966e <ble_svc_ans_init+0x5e>
   2966c:	be01      	bkpt	0x0001
   2966e:	2000      	movs	r0, #0
   29670:	9000      	str	r0, [sp, #0]
   29672:	4b07      	ldr	r3, [pc, #28]	; (29690 <ble_svc_ans_init+0x80>)
   29674:	681c      	ldr	r4, [r3, #0]
   29676:	4603      	mov	r3, r0
   29678:	4602      	mov	r2, r0
   2967a:	4601      	mov	r1, r0
   2967c:	47a0      	blx	r4
   2967e:	e7d4      	b.n	2962a <ble_svc_ans_init+0x1a>
   29680:	20003584 	.word	0x20003584
   29684:	0003283c 	.word	0x0003283c
   29688:	20002e48 	.word	0x20002e48
   2968c:	20002e6c 	.word	0x20002e6c
   29690:	20000298 	.word	0x20000298

00029694 <ble_svc_dis_access>:
    (MYNEWT_VAL(BLE_SVC_DIS_MANUFACTURER_NAME_READ_PERM) >= 0) || \
    (MYNEWT_VAL(BLE_SVC_DIS_SYSTEM_ID_READ_PERM) >= 0)
static int
ble_svc_dis_access(uint16_t conn_handle, uint16_t attr_handle,
                   struct ble_gatt_access_ctxt *ctxt, void *arg)
{
   29694:	b538      	push	{r3, r4, r5, lr}
   29696:	4615      	mov	r5, r2
    uint16_t uuid    = ble_uuid_u16(ctxt->chr->uuid);
   29698:	6893      	ldr	r3, [r2, #8]
   2969a:	6818      	ldr	r0, [r3, #0]
   2969c:	f7ff fb82 	bl	28da4 <ble_uuid_u16>
    const char *info = NULL;

    switch(uuid) {
   296a0:	f642 2324 	movw	r3, #10788	; 0x2a24
   296a4:	4298      	cmp	r0, r3
   296a6:	d008      	beq.n	296ba <ble_svc_dis_access+0x26>
   296a8:	f642 2326 	movw	r3, #10790	; 0x2a26
   296ac:	4298      	cmp	r0, r3
   296ae:	d114      	bne.n	296da <ble_svc_dis_access+0x46>
#endif
        break;
#endif
#if (MYNEWT_VAL(BLE_SVC_DIS_FIRMWARE_REVISION_READ_PERM) >= 0)
    case BLE_SVC_DIS_CHR_UUID16_FIRMWARE_REVISION:
        info = ble_svc_dis_data.firmware_revision;
   296b0:	4b10      	ldr	r3, [pc, #64]	; (296f4 <ble_svc_dis_access+0x60>)
   296b2:	689c      	ldr	r4, [r3, #8]
#ifdef MYNEWT_VAL_BLE_SVC_DIS_FIRMWARE_REVISION_DEFAULT
        if (info == NULL) {
   296b4:	b91c      	cbnz	r4, 296be <ble_svc_dis_access+0x2a>
    if (info != NULL) {
       int rc = os_mbuf_append(ctxt->om, info, strlen(info));
       return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
    }

    return 0;
   296b6:	2300      	movs	r3, #0
   296b8:	e01a      	b.n	296f0 <ble_svc_dis_access+0x5c>
        info = ble_svc_dis_data.model_number;
   296ba:	4b0e      	ldr	r3, [pc, #56]	; (296f4 <ble_svc_dis_access+0x60>)
   296bc:	681c      	ldr	r4, [r3, #0]
    if (info != NULL) {
   296be:	b1b4      	cbz	r4, 296ee <ble_svc_dis_access+0x5a>
       int rc = os_mbuf_append(ctxt->om, info, strlen(info));
   296c0:	686d      	ldr	r5, [r5, #4]
   296c2:	4620      	mov	r0, r4
   296c4:	f7e5 fa0a 	bl	eadc <strlen>
   296c8:	b282      	uxth	r2, r0
   296ca:	4621      	mov	r1, r4
   296cc:	4628      	mov	r0, r5
   296ce:	f7e3 fec3 	bl	d458 <os_mbuf_append>
       return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   296d2:	4603      	mov	r3, r0
   296d4:	b160      	cbz	r0, 296f0 <ble_svc_dis_access+0x5c>
   296d6:	2311      	movs	r3, #17
   296d8:	e00a      	b.n	296f0 <ble_svc_dis_access+0x5c>
        assert(0);
   296da:	f7e2 fd85 	bl	c1e8 <hal_debugger_connected>
   296de:	b100      	cbz	r0, 296e2 <ble_svc_dis_access+0x4e>
   296e0:	be01      	bkpt	0x0001
   296e2:	2300      	movs	r3, #0
   296e4:	461a      	mov	r2, r3
   296e6:	4619      	mov	r1, r3
   296e8:	4618      	mov	r0, r3
   296ea:	f7e3 fa31 	bl	cb50 <__assert_func>
    return 0;
   296ee:	2300      	movs	r3, #0
}
   296f0:	4618      	mov	r0, r3
   296f2:	bd38      	pop	{r3, r4, r5, pc}
   296f4:	200003ec 	.word	0x200003ec

000296f8 <ble_svc_dis_firmware_revision_set>:
}

int
ble_svc_dis_firmware_revision_set(const char *value)
{
    ble_svc_dis_data.firmware_revision = value;
   296f8:	4b01      	ldr	r3, [pc, #4]	; (29700 <ble_svc_dis_firmware_revision_set+0x8>)
   296fa:	6098      	str	r0, [r3, #8]
    return 0;
}
   296fc:	2000      	movs	r0, #0
   296fe:	4770      	bx	lr
   29700:	200003ec 	.word	0x200003ec

00029704 <ble_svc_dis_init>:
/**
 * Initialize the DIS package.
 */
void
ble_svc_dis_init(void)
{
   29704:	b510      	push	{r4, lr}
   29706:	b082      	sub	sp, #8
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   29708:	4b18      	ldr	r3, [pc, #96]	; (2976c <ble_svc_dis_init+0x68>)
   2970a:	781b      	ldrb	r3, [r3, #0]
   2970c:	b14b      	cbz	r3, 29722 <ble_svc_dis_init+0x1e>

    rc = ble_gatts_count_cfg(ble_svc_dis_defs);
   2970e:	4818      	ldr	r0, [pc, #96]	; (29770 <ble_svc_dis_init+0x6c>)
   29710:	f7fa f8d4 	bl	238bc <ble_gatts_count_cfg>
    SYSINIT_PANIC_ASSERT(rc == 0);
   29714:	b978      	cbnz	r0, 29736 <ble_svc_dis_init+0x32>

    rc = ble_gatts_add_svcs(ble_svc_dis_defs);
   29716:	4816      	ldr	r0, [pc, #88]	; (29770 <ble_svc_dis_init+0x6c>)
   29718:	f7fa f8ac 	bl	23874 <ble_gatts_add_svcs>
    SYSINIT_PANIC_ASSERT(rc == 0);
   2971c:	b9c0      	cbnz	r0, 29750 <ble_svc_dis_init+0x4c>
}
   2971e:	b002      	add	sp, #8
   29720:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   29722:	f7e2 fd61 	bl	c1e8 <hal_debugger_connected>
   29726:	b100      	cbz	r0, 2972a <ble_svc_dis_init+0x26>
   29728:	be01      	bkpt	0x0001
   2972a:	2300      	movs	r3, #0
   2972c:	461a      	mov	r2, r3
   2972e:	4619      	mov	r1, r3
   29730:	4618      	mov	r0, r3
   29732:	f7e3 fa0d 	bl	cb50 <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
   29736:	f7e2 fd57 	bl	c1e8 <hal_debugger_connected>
   2973a:	b100      	cbz	r0, 2973e <ble_svc_dis_init+0x3a>
   2973c:	be01      	bkpt	0x0001
   2973e:	2000      	movs	r0, #0
   29740:	9000      	str	r0, [sp, #0]
   29742:	4b0c      	ldr	r3, [pc, #48]	; (29774 <ble_svc_dis_init+0x70>)
   29744:	681c      	ldr	r4, [r3, #0]
   29746:	4603      	mov	r3, r0
   29748:	4602      	mov	r2, r0
   2974a:	4601      	mov	r1, r0
   2974c:	47a0      	blx	r4
   2974e:	e7e2      	b.n	29716 <ble_svc_dis_init+0x12>
    SYSINIT_PANIC_ASSERT(rc == 0);
   29750:	f7e2 fd4a 	bl	c1e8 <hal_debugger_connected>
   29754:	b100      	cbz	r0, 29758 <ble_svc_dis_init+0x54>
   29756:	be01      	bkpt	0x0001
   29758:	2000      	movs	r0, #0
   2975a:	9000      	str	r0, [sp, #0]
   2975c:	4b05      	ldr	r3, [pc, #20]	; (29774 <ble_svc_dis_init+0x70>)
   2975e:	681c      	ldr	r4, [r3, #0]
   29760:	4603      	mov	r3, r0
   29762:	4602      	mov	r2, r0
   29764:	4601      	mov	r1, r0
   29766:	47a0      	blx	r4
}
   29768:	e7d9      	b.n	2971e <ble_svc_dis_init+0x1a>
   2976a:	bf00      	nop
   2976c:	20003584 	.word	0x20003584
   29770:	0003285c 	.word	0x0003285c
   29774:	20000298 	.word	0x20000298

00029778 <ble_svc_gap_device_name_write_access>:
    return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
}

static int
ble_svc_gap_device_name_write_access(struct ble_gatt_access_ctxt *ctxt)
{
   29778:	b508      	push	{r3, lr}
#if MYNEWT_VAL(BLE_SVC_GAP_DEVICE_NAME_WRITE_PERM) < 0
    assert(0);
   2977a:	f7e2 fd35 	bl	c1e8 <hal_debugger_connected>
   2977e:	b100      	cbz	r0, 29782 <ble_svc_gap_device_name_write_access+0xa>
   29780:	be01      	bkpt	0x0001
   29782:	2300      	movs	r3, #0
   29784:	461a      	mov	r2, r3
   29786:	4619      	mov	r1, r3
   29788:	4618      	mov	r0, r3
   2978a:	f7e3 f9e1 	bl	cb50 <__assert_func>

0002978e <ble_svc_gap_appearance_write_access>:
    return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
}

static int
ble_svc_gap_appearance_write_access(struct ble_gatt_access_ctxt *ctxt)
{
   2978e:	b508      	push	{r3, lr}
#if MYNEWT_VAL(BLE_SVC_GAP_APPEARANCE_WRITE_PERM) < 0
    assert(0);
   29790:	f7e2 fd2a 	bl	c1e8 <hal_debugger_connected>
   29794:	b100      	cbz	r0, 29798 <ble_svc_gap_appearance_write_access+0xa>
   29796:	be01      	bkpt	0x0001
   29798:	2300      	movs	r3, #0
   2979a:	461a      	mov	r2, r3
   2979c:	4619      	mov	r1, r3
   2979e:	4618      	mov	r0, r3
   297a0:	f7e3 f9d6 	bl	cb50 <__assert_func>

000297a4 <ble_svc_gap_device_name_read_access>:
{
   297a4:	b538      	push	{r3, r4, r5, lr}
    rc = os_mbuf_append(ctxt->om, ble_svc_gap_name, strlen(ble_svc_gap_name));
   297a6:	6845      	ldr	r5, [r0, #4]
   297a8:	4c07      	ldr	r4, [pc, #28]	; (297c8 <ble_svc_gap_device_name_read_access+0x24>)
   297aa:	4620      	mov	r0, r4
   297ac:	f7e5 f996 	bl	eadc <strlen>
   297b0:	b282      	uxth	r2, r0
   297b2:	4621      	mov	r1, r4
   297b4:	4628      	mov	r0, r5
   297b6:	f7e3 fe4f 	bl	d458 <os_mbuf_append>
    return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   297ba:	4603      	mov	r3, r0
   297bc:	b908      	cbnz	r0, 297c2 <ble_svc_gap_device_name_read_access+0x1e>
}
   297be:	4618      	mov	r0, r3
   297c0:	bd38      	pop	{r3, r4, r5, pc}
    return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   297c2:	2311      	movs	r3, #17
   297c4:	e7fb      	b.n	297be <ble_svc_gap_device_name_read_access+0x1a>
   297c6:	bf00      	nop
   297c8:	2000045c 	.word	0x2000045c

000297cc <ble_svc_gap_appearance_read_access>:
{
   297cc:	b500      	push	{lr}
   297ce:	b083      	sub	sp, #12
    uint16_t appearance = htole16(ble_svc_gap_appearance);
   297d0:	4b08      	ldr	r3, [pc, #32]	; (297f4 <ble_svc_gap_appearance_read_access+0x28>)
   297d2:	881b      	ldrh	r3, [r3, #0]
   297d4:	a902      	add	r1, sp, #8
   297d6:	f821 3d02 	strh.w	r3, [r1, #-2]!
    rc = os_mbuf_append(ctxt->om, &appearance, sizeof(appearance));
   297da:	2202      	movs	r2, #2
   297dc:	6840      	ldr	r0, [r0, #4]
   297de:	f7e3 fe3b 	bl	d458 <os_mbuf_append>
    return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   297e2:	4603      	mov	r3, r0
   297e4:	b918      	cbnz	r0, 297ee <ble_svc_gap_appearance_read_access+0x22>
}
   297e6:	4618      	mov	r0, r3
   297e8:	b003      	add	sp, #12
   297ea:	f85d fb04 	ldr.w	pc, [sp], #4
    return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   297ee:	2311      	movs	r3, #17
   297f0:	e7f9      	b.n	297e6 <ble_svc_gap_appearance_read_access+0x1a>
   297f2:	bf00      	nop
   297f4:	20002e7c 	.word	0x20002e7c

000297f8 <ble_svc_gap_access>:
}

static int
ble_svc_gap_access(uint16_t conn_handle, uint16_t attr_handle,
                   struct ble_gatt_access_ctxt *ctxt, void *arg)
{
   297f8:	b510      	push	{r4, lr}
   297fa:	4614      	mov	r4, r2
        htole16(MYNEWT_VAL(BLE_SVC_GAP_PPCP_SUPERVISION_TMO))
    };
#endif
    int rc;

    uuid16 = ble_uuid_u16(ctxt->chr->uuid);
   297fc:	6893      	ldr	r3, [r2, #8]
   297fe:	6818      	ldr	r0, [r3, #0]
   29800:	f7ff fad0 	bl	28da4 <ble_uuid_u16>
    assert(uuid16 != 0);
   29804:	b1a0      	cbz	r0, 29830 <ble_svc_gap_access+0x38>

    switch (uuid16) {
   29806:	f5b0 5f28 	cmp.w	r0, #10752	; 0x2a00
   2980a:	d01b      	beq.n	29844 <ble_svc_gap_access+0x4c>
   2980c:	f642 2201 	movw	r2, #10753	; 0x2a01
   29810:	4290      	cmp	r0, r2
   29812:	d133      	bne.n	2987c <ble_svc_gap_access+0x84>
            rc = BLE_ATT_ERR_UNLIKELY;
        }
        return rc;

    case BLE_SVC_GAP_CHR_UUID16_APPEARANCE:
        if (ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR) {
   29814:	7823      	ldrb	r3, [r4, #0]
   29816:	b353      	cbz	r3, 2986e <ble_svc_gap_access+0x76>
            rc = ble_svc_gap_appearance_read_access(ctxt);
        } else if (ctxt->op == BLE_GATT_ACCESS_OP_WRITE_CHR) {
   29818:	2b01      	cmp	r3, #1
   2981a:	d02c      	beq.n	29876 <ble_svc_gap_access+0x7e>
            rc = ble_svc_gap_appearance_write_access(ctxt);
        } else {
            assert(0);
   2981c:	f7e2 fce4 	bl	c1e8 <hal_debugger_connected>
   29820:	b100      	cbz	r0, 29824 <ble_svc_gap_access+0x2c>
   29822:	be01      	bkpt	0x0001
   29824:	2300      	movs	r3, #0
   29826:	461a      	mov	r2, r3
   29828:	4619      	mov	r1, r3
   2982a:	4618      	mov	r0, r3
   2982c:	f7e3 f990 	bl	cb50 <__assert_func>
    assert(uuid16 != 0);
   29830:	f7e2 fcda 	bl	c1e8 <hal_debugger_connected>
   29834:	b100      	cbz	r0, 29838 <ble_svc_gap_access+0x40>
   29836:	be01      	bkpt	0x0001
   29838:	2300      	movs	r3, #0
   2983a:	461a      	mov	r2, r3
   2983c:	4619      	mov	r1, r3
   2983e:	4618      	mov	r0, r3
   29840:	f7e3 f986 	bl	cb50 <__assert_func>
        if (ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR) {
   29844:	7823      	ldrb	r3, [r4, #0]
   29846:	b15b      	cbz	r3, 29860 <ble_svc_gap_access+0x68>
        } else if (ctxt->op == BLE_GATT_ACCESS_OP_WRITE_CHR) {
   29848:	2b01      	cmp	r3, #1
   2984a:	d00d      	beq.n	29868 <ble_svc_gap_access+0x70>
            assert(0);
   2984c:	f7e2 fccc 	bl	c1e8 <hal_debugger_connected>
   29850:	b100      	cbz	r0, 29854 <ble_svc_gap_access+0x5c>
   29852:	be01      	bkpt	0x0001
   29854:	2300      	movs	r3, #0
   29856:	461a      	mov	r2, r3
   29858:	4619      	mov	r1, r3
   2985a:	4618      	mov	r0, r3
   2985c:	f7e3 f978 	bl	cb50 <__assert_func>
            rc = ble_svc_gap_device_name_read_access(ctxt);
   29860:	4620      	mov	r0, r4
   29862:	f7ff ff9f 	bl	297a4 <ble_svc_gap_device_name_read_access>

    default:
        assert(0);
        return BLE_ATT_ERR_UNLIKELY;
    }
}
   29866:	bd10      	pop	{r4, pc}
            rc = ble_svc_gap_device_name_write_access(ctxt);
   29868:	4620      	mov	r0, r4
   2986a:	f7ff ff85 	bl	29778 <ble_svc_gap_device_name_write_access>
            rc = ble_svc_gap_appearance_read_access(ctxt);
   2986e:	4620      	mov	r0, r4
   29870:	f7ff ffac 	bl	297cc <ble_svc_gap_appearance_read_access>
        return rc;
   29874:	e7f7      	b.n	29866 <ble_svc_gap_access+0x6e>
            rc = ble_svc_gap_appearance_write_access(ctxt);
   29876:	4620      	mov	r0, r4
   29878:	f7ff ff89 	bl	2978e <ble_svc_gap_appearance_write_access>
        assert(0);
   2987c:	f7e2 fcb4 	bl	c1e8 <hal_debugger_connected>
   29880:	b100      	cbz	r0, 29884 <ble_svc_gap_access+0x8c>
   29882:	be01      	bkpt	0x0001
   29884:	2300      	movs	r3, #0
   29886:	461a      	mov	r2, r3
   29888:	4619      	mov	r1, r3
   2988a:	4618      	mov	r0, r3
   2988c:	f7e3 f960 	bl	cb50 <__assert_func>

00029890 <ble_svc_gap_init>:
    ble_svc_gap_chr_changed_cb_fn = cb;
}

void
ble_svc_gap_init(void)
{
   29890:	b510      	push	{r4, lr}
   29892:	b082      	sub	sp, #8
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   29894:	4b18      	ldr	r3, [pc, #96]	; (298f8 <ble_svc_gap_init+0x68>)
   29896:	781b      	ldrb	r3, [r3, #0]
   29898:	b14b      	cbz	r3, 298ae <ble_svc_gap_init+0x1e>

    rc = ble_gatts_count_cfg(ble_svc_gap_defs);
   2989a:	4818      	ldr	r0, [pc, #96]	; (298fc <ble_svc_gap_init+0x6c>)
   2989c:	f7fa f80e 	bl	238bc <ble_gatts_count_cfg>
    SYSINIT_PANIC_ASSERT(rc == 0);
   298a0:	b978      	cbnz	r0, 298c2 <ble_svc_gap_init+0x32>

    rc = ble_gatts_add_svcs(ble_svc_gap_defs);
   298a2:	4816      	ldr	r0, [pc, #88]	; (298fc <ble_svc_gap_init+0x6c>)
   298a4:	f7f9 ffe6 	bl	23874 <ble_gatts_add_svcs>
    SYSINIT_PANIC_ASSERT(rc == 0);
   298a8:	b9c0      	cbnz	r0, 298dc <ble_svc_gap_init+0x4c>
}
   298aa:	b002      	add	sp, #8
   298ac:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   298ae:	f7e2 fc9b 	bl	c1e8 <hal_debugger_connected>
   298b2:	b100      	cbz	r0, 298b6 <ble_svc_gap_init+0x26>
   298b4:	be01      	bkpt	0x0001
   298b6:	2300      	movs	r3, #0
   298b8:	461a      	mov	r2, r3
   298ba:	4619      	mov	r1, r3
   298bc:	4618      	mov	r0, r3
   298be:	f7e3 f947 	bl	cb50 <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
   298c2:	f7e2 fc91 	bl	c1e8 <hal_debugger_connected>
   298c6:	b100      	cbz	r0, 298ca <ble_svc_gap_init+0x3a>
   298c8:	be01      	bkpt	0x0001
   298ca:	2000      	movs	r0, #0
   298cc:	9000      	str	r0, [sp, #0]
   298ce:	4b0c      	ldr	r3, [pc, #48]	; (29900 <ble_svc_gap_init+0x70>)
   298d0:	681c      	ldr	r4, [r3, #0]
   298d2:	4603      	mov	r3, r0
   298d4:	4602      	mov	r2, r0
   298d6:	4601      	mov	r1, r0
   298d8:	47a0      	blx	r4
   298da:	e7e2      	b.n	298a2 <ble_svc_gap_init+0x12>
    SYSINIT_PANIC_ASSERT(rc == 0);
   298dc:	f7e2 fc84 	bl	c1e8 <hal_debugger_connected>
   298e0:	b100      	cbz	r0, 298e4 <ble_svc_gap_init+0x54>
   298e2:	be01      	bkpt	0x0001
   298e4:	2000      	movs	r0, #0
   298e6:	9000      	str	r0, [sp, #0]
   298e8:	4b05      	ldr	r3, [pc, #20]	; (29900 <ble_svc_gap_init+0x70>)
   298ea:	681c      	ldr	r4, [r3, #0]
   298ec:	4603      	mov	r3, r0
   298ee:	4602      	mov	r2, r0
   298f0:	4601      	mov	r1, r0
   298f2:	47a0      	blx	r4
}
   298f4:	e7d9      	b.n	298aa <ble_svc_gap_init+0x1a>
   298f6:	bf00      	nop
   298f8:	20003584 	.word	0x20003584
   298fc:	00032894 	.word	0x00032894
   29900:	20000298 	.word	0x20000298

00029904 <ble_svc_gatt_access>:
};

static int
ble_svc_gatt_access(uint16_t conn_handle, uint16_t attr_handle,
                    struct ble_gatt_access_ctxt *ctxt, void *arg)
{
   29904:	b510      	push	{r4, lr}
     * access callback gets called by the stack when it needs to read the
     * characteristic value to populate the outgoing indication command.
     * Therefore, this callback should only get called during an attempt to
     * read the characteristic.
     */
    assert(ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR);
   29906:	7813      	ldrb	r3, [r2, #0]
   29908:	b9a3      	cbnz	r3, 29934 <ble_svc_gatt_access+0x30>
    assert(ctxt->chr == &ble_svc_gatt_defs[0].characteristics[0]);
   2990a:	6891      	ldr	r1, [r2, #8]
   2990c:	4b14      	ldr	r3, [pc, #80]	; (29960 <ble_svc_gatt_access+0x5c>)
   2990e:	4299      	cmp	r1, r3
   29910:	d11a      	bne.n	29948 <ble_svc_gatt_access+0x44>

    u8p = os_mbuf_extend(ctxt->om, 4);
   29912:	2104      	movs	r1, #4
   29914:	6850      	ldr	r0, [r2, #4]
   29916:	f7e3 ffb3 	bl	d880 <os_mbuf_extend>
    if (u8p == NULL) {
   2991a:	4604      	mov	r4, r0
   2991c:	b1f0      	cbz	r0, 2995c <ble_svc_gatt_access+0x58>
        return BLE_HS_ENOMEM;
    }

    put_le16(u8p + 0, ble_svc_gatt_start_handle);
   2991e:	4b11      	ldr	r3, [pc, #68]	; (29964 <ble_svc_gatt_access+0x60>)
   29920:	8819      	ldrh	r1, [r3, #0]
   29922:	f005 fa03 	bl	2ed2c <put_le16>
    put_le16(u8p + 2, ble_svc_gatt_end_handle);
   29926:	4b10      	ldr	r3, [pc, #64]	; (29968 <ble_svc_gatt_access+0x64>)
   29928:	8819      	ldrh	r1, [r3, #0]
   2992a:	1ca0      	adds	r0, r4, #2
   2992c:	f005 f9fe 	bl	2ed2c <put_le16>

    return 0;
   29930:	2000      	movs	r0, #0
}
   29932:	bd10      	pop	{r4, pc}
    assert(ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR);
   29934:	f7e2 fc58 	bl	c1e8 <hal_debugger_connected>
   29938:	b100      	cbz	r0, 2993c <ble_svc_gatt_access+0x38>
   2993a:	be01      	bkpt	0x0001
   2993c:	2300      	movs	r3, #0
   2993e:	461a      	mov	r2, r3
   29940:	4619      	mov	r1, r3
   29942:	4618      	mov	r0, r3
   29944:	f7e3 f904 	bl	cb50 <__assert_func>
    assert(ctxt->chr == &ble_svc_gatt_defs[0].characteristics[0]);
   29948:	f7e2 fc4e 	bl	c1e8 <hal_debugger_connected>
   2994c:	b100      	cbz	r0, 29950 <ble_svc_gatt_access+0x4c>
   2994e:	be01      	bkpt	0x0001
   29950:	2300      	movs	r3, #0
   29952:	461a      	mov	r2, r3
   29954:	4619      	mov	r1, r3
   29956:	4618      	mov	r0, r3
   29958:	f7e3 f8fa 	bl	cb50 <__assert_func>
        return BLE_HS_ENOMEM;
   2995c:	2006      	movs	r0, #6
   2995e:	e7e8      	b.n	29932 <ble_svc_gatt_access+0x2e>
   29960:	20000484 	.word	0x20000484
   29964:	20002e82 	.word	0x20002e82
   29968:	20002e80 	.word	0x20002e80

0002996c <ble_svc_gatt_init>:
    ble_gatts_chr_updated(ble_svc_gatt_changed_val_handle);
}

void
ble_svc_gatt_init(void)
{
   2996c:	b510      	push	{r4, lr}
   2996e:	b082      	sub	sp, #8
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   29970:	4b18      	ldr	r3, [pc, #96]	; (299d4 <ble_svc_gatt_init+0x68>)
   29972:	781b      	ldrb	r3, [r3, #0]
   29974:	b14b      	cbz	r3, 2998a <ble_svc_gatt_init+0x1e>

    rc = ble_gatts_count_cfg(ble_svc_gatt_defs);
   29976:	4818      	ldr	r0, [pc, #96]	; (299d8 <ble_svc_gatt_init+0x6c>)
   29978:	f7f9 ffa0 	bl	238bc <ble_gatts_count_cfg>
    SYSINIT_PANIC_ASSERT(rc == 0);
   2997c:	b978      	cbnz	r0, 2999e <ble_svc_gatt_init+0x32>

    rc = ble_gatts_add_svcs(ble_svc_gatt_defs);
   2997e:	4816      	ldr	r0, [pc, #88]	; (299d8 <ble_svc_gatt_init+0x6c>)
   29980:	f7f9 ff78 	bl	23874 <ble_gatts_add_svcs>
    SYSINIT_PANIC_ASSERT(rc == 0);
   29984:	b9c0      	cbnz	r0, 299b8 <ble_svc_gatt_init+0x4c>
}
   29986:	b002      	add	sp, #8
   29988:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   2998a:	f7e2 fc2d 	bl	c1e8 <hal_debugger_connected>
   2998e:	b100      	cbz	r0, 29992 <ble_svc_gatt_init+0x26>
   29990:	be01      	bkpt	0x0001
   29992:	2300      	movs	r3, #0
   29994:	461a      	mov	r2, r3
   29996:	4619      	mov	r1, r3
   29998:	4618      	mov	r0, r3
   2999a:	f7e3 f8d9 	bl	cb50 <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
   2999e:	f7e2 fc23 	bl	c1e8 <hal_debugger_connected>
   299a2:	b100      	cbz	r0, 299a6 <ble_svc_gatt_init+0x3a>
   299a4:	be01      	bkpt	0x0001
   299a6:	2000      	movs	r0, #0
   299a8:	9000      	str	r0, [sp, #0]
   299aa:	4b0c      	ldr	r3, [pc, #48]	; (299dc <ble_svc_gatt_init+0x70>)
   299ac:	681c      	ldr	r4, [r3, #0]
   299ae:	4603      	mov	r3, r0
   299b0:	4602      	mov	r2, r0
   299b2:	4601      	mov	r1, r0
   299b4:	47a0      	blx	r4
   299b6:	e7e2      	b.n	2997e <ble_svc_gatt_init+0x12>
    SYSINIT_PANIC_ASSERT(rc == 0);
   299b8:	f7e2 fc16 	bl	c1e8 <hal_debugger_connected>
   299bc:	b100      	cbz	r0, 299c0 <ble_svc_gatt_init+0x54>
   299be:	be01      	bkpt	0x0001
   299c0:	2000      	movs	r0, #0
   299c2:	9000      	str	r0, [sp, #0]
   299c4:	4b05      	ldr	r3, [pc, #20]	; (299dc <ble_svc_gatt_init+0x70>)
   299c6:	681c      	ldr	r4, [r3, #0]
   299c8:	4603      	mov	r3, r0
   299ca:	4602      	mov	r2, r0
   299cc:	4601      	mov	r1, r0
   299ce:	47a0      	blx	r4
}
   299d0:	e7d9      	b.n	29986 <ble_svc_gatt_init+0x1a>
   299d2:	bf00      	nop
   299d4:	20003584 	.word	0x20003584
   299d8:	000328b4 	.word	0x000328b4
   299dc:	20000298 	.word	0x20000298

000299e0 <ble_store_config_find_sec>:

static int
ble_store_config_find_sec(const struct ble_store_key_sec *key_sec,
                          const struct ble_store_value_sec *value_secs,
                          int num_value_secs)
{
   299e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   299e4:	b083      	sub	sp, #12
   299e6:	4605      	mov	r5, r0
   299e8:	4688      	mov	r8, r1
   299ea:	4692      	mov	sl, r2
    int skipped;
    int i;

    skipped = 0;

    for (i = 0; i < num_value_secs; i++) {
   299ec:	2400      	movs	r4, #0
    skipped = 0;
   299ee:	46a3      	mov	fp, r4
    for (i = 0; i < num_value_secs; i++) {
   299f0:	e004      	b.n	299fc <ble_store_config_find_sec+0x1c>
        return type_diff;
   299f2:	4638      	mov	r0, r7
   299f4:	e016      	b.n	29a24 <ble_store_config_find_sec+0x44>
                continue;
            }
        }

        if (key_sec->idx > skipped) {
            skipped++;
   299f6:	f10b 0b01 	add.w	fp, fp, #1
    for (i = 0; i < num_value_secs; i++) {
   299fa:	3401      	adds	r4, #1
   299fc:	4554      	cmp	r4, sl
   299fe:	da36      	bge.n	29a6e <ble_store_config_find_sec+0x8e>
        cur = value_secs + i;
   29a00:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   29a04:	011e      	lsls	r6, r3, #4
   29a06:	eb08 0906 	add.w	r9, r8, r6
        if (ble_addr_cmp(&key_sec->peer_addr, BLE_ADDR_ANY)) {
   29a0a:	2300      	movs	r3, #0
   29a0c:	9300      	str	r3, [sp, #0]
   29a0e:	f8cd 3003 	str.w	r3, [sp, #3]
    type_diff = a->type - b->type;
   29a12:	782f      	ldrb	r7, [r5, #0]
    if (type_diff != 0) {
   29a14:	2f00      	cmp	r7, #0
   29a16:	d1ec      	bne.n	299f2 <ble_store_config_find_sec+0x12>
    return memcmp(a->val, b->val, sizeof(a->val));
   29a18:	2206      	movs	r2, #6
   29a1a:	f10d 0101 	add.w	r1, sp, #1
   29a1e:	1c68      	adds	r0, r5, #1
   29a20:	f7e4 ff9a 	bl	e958 <memcmp>
   29a24:	b158      	cbz	r0, 29a3e <ble_store_config_find_sec+0x5e>
    type_diff = a->type - b->type;
   29a26:	f818 0006 	ldrb.w	r0, [r8, r6]
    if (type_diff != 0) {
   29a2a:	1bc0      	subs	r0, r0, r7
   29a2c:	d105      	bne.n	29a3a <ble_store_config_find_sec+0x5a>
    return memcmp(a->val, b->val, sizeof(a->val));
   29a2e:	2206      	movs	r2, #6
   29a30:	1c69      	adds	r1, r5, #1
   29a32:	f109 0001 	add.w	r0, r9, #1
   29a36:	f7e4 ff8f 	bl	e958 <memcmp>
            if (ble_addr_cmp(&cur->peer_addr, &key_sec->peer_addr)) {
   29a3a:	2800      	cmp	r0, #0
   29a3c:	d1dd      	bne.n	299fa <ble_store_config_find_sec+0x1a>
        if (key_sec->ediv_rand_present) {
   29a3e:	7e2b      	ldrb	r3, [r5, #24]
   29a40:	f013 0f01 	tst.w	r3, #1
   29a44:	d00c      	beq.n	29a60 <ble_store_config_find_sec+0x80>
            if (cur->ediv != key_sec->ediv) {
   29a46:	f8b9 2008 	ldrh.w	r2, [r9, #8]
   29a4a:	892b      	ldrh	r3, [r5, #8]
   29a4c:	429a      	cmp	r2, r3
   29a4e:	d1d4      	bne.n	299fa <ble_store_config_find_sec+0x1a>
            if (cur->rand_num != key_sec->rand_num) {
   29a50:	e9d9 0104 	ldrd	r0, r1, [r9, #16]
   29a54:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
   29a58:	4299      	cmp	r1, r3
   29a5a:	bf08      	it	eq
   29a5c:	4290      	cmpeq	r0, r2
   29a5e:	d1cc      	bne.n	299fa <ble_store_config_find_sec+0x1a>
        if (key_sec->idx > skipped) {
   29a60:	7e6b      	ldrb	r3, [r5, #25]
   29a62:	455b      	cmp	r3, fp
   29a64:	dcc7      	bgt.n	299f6 <ble_store_config_find_sec+0x16>

        return i;
    }

    return -1;
}
   29a66:	4620      	mov	r0, r4
   29a68:	b003      	add	sp, #12
   29a6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return -1;
   29a6e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   29a72:	e7f8      	b.n	29a66 <ble_store_config_find_sec+0x86>

00029a74 <ble_store_config_read_peer_sec>:
}

static int
ble_store_config_read_peer_sec(const struct ble_store_key_sec *key_sec,
                               struct ble_store_value_sec *value_sec)
{
   29a74:	b510      	push	{r4, lr}
   29a76:	460c      	mov	r4, r1
    int idx;

    idx = ble_store_config_find_sec(key_sec, ble_store_config_peer_secs,
   29a78:	4b0a      	ldr	r3, [pc, #40]	; (29aa4 <ble_store_config_read_peer_sec+0x30>)
   29a7a:	681a      	ldr	r2, [r3, #0]
   29a7c:	490a      	ldr	r1, [pc, #40]	; (29aa8 <ble_store_config_read_peer_sec+0x34>)
   29a7e:	f7ff ffaf 	bl	299e0 <ble_store_config_find_sec>
                             ble_store_config_num_peer_secs);
    if (idx == -1) {
   29a82:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   29a86:	d00a      	beq.n	29a9e <ble_store_config_read_peer_sec+0x2a>
        return BLE_HS_ENOENT;
    }

    *value_sec = ble_store_config_peer_secs[idx];
   29a88:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   29a8c:	0103      	lsls	r3, r0, #4
   29a8e:	2250      	movs	r2, #80	; 0x50
   29a90:	4905      	ldr	r1, [pc, #20]	; (29aa8 <ble_store_config_read_peer_sec+0x34>)
   29a92:	4419      	add	r1, r3
   29a94:	4620      	mov	r0, r4
   29a96:	f7e4 ff83 	bl	e9a0 <memcpy>
    return 0;
   29a9a:	2000      	movs	r0, #0
}
   29a9c:	bd10      	pop	{r4, pc}
        return BLE_HS_ENOENT;
   29a9e:	2005      	movs	r0, #5
   29aa0:	e7fc      	b.n	29a9c <ble_store_config_read_peer_sec+0x28>
   29aa2:	bf00      	nop
   29aa4:	20004260 	.word	0x20004260
   29aa8:	20004170 	.word	0x20004170

00029aac <ble_store_config_read_our_sec>:
{
   29aac:	b510      	push	{r4, lr}
   29aae:	460c      	mov	r4, r1
    idx = ble_store_config_find_sec(key_sec, ble_store_config_our_secs,
   29ab0:	4b0a      	ldr	r3, [pc, #40]	; (29adc <ble_store_config_read_our_sec+0x30>)
   29ab2:	681a      	ldr	r2, [r3, #0]
   29ab4:	490a      	ldr	r1, [pc, #40]	; (29ae0 <ble_store_config_read_our_sec+0x34>)
   29ab6:	f7ff ff93 	bl	299e0 <ble_store_config_find_sec>
    if (idx == -1) {
   29aba:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   29abe:	d00a      	beq.n	29ad6 <ble_store_config_read_our_sec+0x2a>
    *value_sec = ble_store_config_our_secs[idx];
   29ac0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   29ac4:	0103      	lsls	r3, r0, #4
   29ac6:	2250      	movs	r2, #80	; 0x50
   29ac8:	4905      	ldr	r1, [pc, #20]	; (29ae0 <ble_store_config_read_our_sec+0x34>)
   29aca:	4419      	add	r1, r3
   29acc:	4620      	mov	r0, r4
   29ace:	f7e4 ff67 	bl	e9a0 <memcpy>
    return 0;
   29ad2:	2000      	movs	r0, #0
}
   29ad4:	bd10      	pop	{r4, pc}
        return BLE_HS_ENOENT;
   29ad6:	2005      	movs	r0, #5
   29ad8:	e7fc      	b.n	29ad4 <ble_store_config_read_our_sec+0x28>
   29ada:	bf00      	nop
   29adc:	200042e4 	.word	0x200042e4
   29ae0:	200042f0 	.word	0x200042f0

00029ae4 <ble_store_config_find_cccd>:
 * $cccd                                                                     *
 *****************************************************************************/

static int
ble_store_config_find_cccd(const struct ble_store_key_cccd *key)
{
   29ae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   29ae8:	b082      	sub	sp, #8
   29aea:	4605      	mov	r5, r0
    struct ble_store_value_cccd *cccd;
    int skipped;
    int i;

    skipped = 0;
    for (i = 0; i < ble_store_config_num_cccds; i++) {
   29aec:	2400      	movs	r4, #0
    skipped = 0;
   29aee:	46a0      	mov	r8, r4
    for (i = 0; i < ble_store_config_num_cccds; i++) {
   29af0:	e004      	b.n	29afc <ble_store_config_find_cccd+0x18>
        return type_diff;
   29af2:	4630      	mov	r0, r6
   29af4:	e019      	b.n	29b2a <ble_store_config_find_cccd+0x46>
                continue;
            }
        }

        if (key->idx > skipped) {
            skipped++;
   29af6:	f108 0801 	add.w	r8, r8, #1
    for (i = 0; i < ble_store_config_num_cccds; i++) {
   29afa:	3401      	adds	r4, #1
   29afc:	4b18      	ldr	r3, [pc, #96]	; (29b60 <ble_store_config_find_cccd+0x7c>)
   29afe:	681b      	ldr	r3, [r3, #0]
   29b00:	42a3      	cmp	r3, r4
   29b02:	dd2a      	ble.n	29b5a <ble_store_config_find_cccd+0x76>
        cccd = ble_store_config_cccds + i;
   29b04:	ea4f 1a04 	mov.w	sl, r4, lsl #4
   29b08:	f8df 9058 	ldr.w	r9, [pc, #88]	; 29b64 <ble_store_config_find_cccd+0x80>
   29b0c:	eb0a 0709 	add.w	r7, sl, r9
        if (ble_addr_cmp(&key->peer_addr, BLE_ADDR_ANY)) {
   29b10:	2300      	movs	r3, #0
   29b12:	9300      	str	r3, [sp, #0]
   29b14:	f8cd 3003 	str.w	r3, [sp, #3]
    type_diff = a->type - b->type;
   29b18:	782e      	ldrb	r6, [r5, #0]
    if (type_diff != 0) {
   29b1a:	2e00      	cmp	r6, #0
   29b1c:	d1e9      	bne.n	29af2 <ble_store_config_find_cccd+0xe>
    return memcmp(a->val, b->val, sizeof(a->val));
   29b1e:	2206      	movs	r2, #6
   29b20:	f10d 0101 	add.w	r1, sp, #1
   29b24:	1c68      	adds	r0, r5, #1
   29b26:	f7e4 ff17 	bl	e958 <memcmp>
   29b2a:	b150      	cbz	r0, 29b42 <ble_store_config_find_cccd+0x5e>
    type_diff = a->type - b->type;
   29b2c:	f81a 0009 	ldrb.w	r0, [sl, r9]
    if (type_diff != 0) {
   29b30:	1b80      	subs	r0, r0, r6
   29b32:	d104      	bne.n	29b3e <ble_store_config_find_cccd+0x5a>
    return memcmp(a->val, b->val, sizeof(a->val));
   29b34:	2206      	movs	r2, #6
   29b36:	1c69      	adds	r1, r5, #1
   29b38:	1c78      	adds	r0, r7, #1
   29b3a:	f7e4 ff0d 	bl	e958 <memcmp>
            if (ble_addr_cmp(&cccd->peer_addr, &key->peer_addr)) {
   29b3e:	2800      	cmp	r0, #0
   29b40:	d1db      	bne.n	29afa <ble_store_config_find_cccd+0x16>
        if (key->chr_val_handle != 0) {
   29b42:	892b      	ldrh	r3, [r5, #8]
   29b44:	b113      	cbz	r3, 29b4c <ble_store_config_find_cccd+0x68>
            if (cccd->chr_val_handle != key->chr_val_handle) {
   29b46:	893a      	ldrh	r2, [r7, #8]
   29b48:	4293      	cmp	r3, r2
   29b4a:	d1d6      	bne.n	29afa <ble_store_config_find_cccd+0x16>
        if (key->idx > skipped) {
   29b4c:	7aab      	ldrb	r3, [r5, #10]
   29b4e:	4543      	cmp	r3, r8
   29b50:	dcd1      	bgt.n	29af6 <ble_store_config_find_cccd+0x12>

        return i;
    }

    return -1;
}
   29b52:	4620      	mov	r0, r4
   29b54:	b002      	add	sp, #8
   29b56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return -1;
   29b5a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   29b5e:	e7f8      	b.n	29b52 <ble_store_config_find_cccd+0x6e>
   29b60:	200042e8 	.word	0x200042e8
   29b64:	20004264 	.word	0x20004264

00029b68 <ble_store_config_read_cccd>:
}

static int
ble_store_config_read_cccd(const struct ble_store_key_cccd *key_cccd,
                           struct ble_store_value_cccd *value_cccd)
{
   29b68:	b510      	push	{r4, lr}
   29b6a:	460c      	mov	r4, r1
    int idx;

    idx = ble_store_config_find_cccd(key_cccd);
   29b6c:	f7ff ffba 	bl	29ae4 <ble_store_config_find_cccd>
    if (idx == -1) {
   29b70:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   29b74:	d007      	beq.n	29b86 <ble_store_config_read_cccd+0x1e>
        return BLE_HS_ENOENT;
    }

    *value_cccd = ble_store_config_cccds[idx];
   29b76:	4b05      	ldr	r3, [pc, #20]	; (29b8c <ble_store_config_read_cccd+0x24>)
   29b78:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   29b7c:	c80f      	ldmia	r0, {r0, r1, r2, r3}
   29b7e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return 0;
   29b82:	2000      	movs	r0, #0
}
   29b84:	bd10      	pop	{r4, pc}
        return BLE_HS_ENOENT;
   29b86:	2005      	movs	r0, #5
   29b88:	e7fc      	b.n	29b84 <ble_store_config_read_cccd+0x1c>
   29b8a:	bf00      	nop
   29b8c:	20004264 	.word	0x20004264

00029b90 <ble_store_config_print_key_sec>:
{
   29b90:	b510      	push	{r4, lr}
   29b92:	b082      	sub	sp, #8
   29b94:	4604      	mov	r4, r0
    if (ble_addr_cmp(&key_sec->peer_addr, BLE_ADDR_ANY)) {
   29b96:	2300      	movs	r3, #0
   29b98:	9300      	str	r3, [sp, #0]
   29b9a:	f8cd 3003 	str.w	r3, [sp, #3]
    type_diff = a->type - b->type;
   29b9e:	7800      	ldrb	r0, [r0, #0]
    if (type_diff != 0) {
   29ba0:	b928      	cbnz	r0, 29bae <ble_store_config_print_key_sec+0x1e>
    return memcmp(a->val, b->val, sizeof(a->val));
   29ba2:	2206      	movs	r2, #6
   29ba4:	f10d 0101 	add.w	r1, sp, #1
   29ba8:	1c60      	adds	r0, r4, #1
   29baa:	f7e4 fed5 	bl	e958 <memcmp>
   29bae:	b908      	cbnz	r0, 29bb4 <ble_store_config_print_key_sec+0x24>
}
   29bb0:	b002      	add	sp, #8
   29bb2:	bd10      	pop	{r4, pc}
        ble_hs_log_flat_buf(key_sec->peer_addr.val, 6);
   29bb4:	2106      	movs	r1, #6
   29bb6:	1c60      	adds	r0, r4, #1
   29bb8:	f7fb fd0a 	bl	255d0 <ble_hs_log_flat_buf>
}
   29bbc:	e7f8      	b.n	29bb0 <ble_store_config_print_key_sec+0x20>

00029bbe <ble_store_config_read>:
 * @return                      0 if a key was found; else BLE_HS_ENOENT.
 */
int
ble_store_config_read(int obj_type, const union ble_store_key *key,
                      union ble_store_value *value)
{
   29bbe:	b538      	push	{r3, r4, r5, lr}
   29bc0:	460c      	mov	r4, r1
   29bc2:	4615      	mov	r5, r2
    int rc;

    switch (obj_type) {
   29bc4:	2802      	cmp	r0, #2
   29bc6:	d005      	beq.n	29bd4 <ble_store_config_read+0x16>
   29bc8:	2803      	cmp	r0, #3
   29bca:	d013      	beq.n	29bf4 <ble_store_config_read+0x36>
   29bcc:	2801      	cmp	r0, #1
   29bce:	d009      	beq.n	29be4 <ble_store_config_read+0x26>
    case BLE_STORE_OBJ_TYPE_CCCD:
        rc = ble_store_config_read_cccd(&key->cccd, &value->cccd);
        return rc;

    default:
        return BLE_HS_ENOTSUP;
   29bd0:	2008      	movs	r0, #8
   29bd2:	e006      	b.n	29be2 <ble_store_config_read+0x24>
        ble_store_config_print_key_sec(&key->sec);
   29bd4:	4608      	mov	r0, r1
   29bd6:	f7ff ffdb 	bl	29b90 <ble_store_config_print_key_sec>
        rc = ble_store_config_read_peer_sec(&key->sec, &value->sec);
   29bda:	4629      	mov	r1, r5
   29bdc:	4620      	mov	r0, r4
   29bde:	f7ff ff49 	bl	29a74 <ble_store_config_read_peer_sec>
    }
}
   29be2:	bd38      	pop	{r3, r4, r5, pc}
        ble_store_config_print_key_sec(&key->sec);
   29be4:	4608      	mov	r0, r1
   29be6:	f7ff ffd3 	bl	29b90 <ble_store_config_print_key_sec>
        rc = ble_store_config_read_our_sec(&key->sec, &value->sec);
   29bea:	4629      	mov	r1, r5
   29bec:	4620      	mov	r0, r4
   29bee:	f7ff ff5d 	bl	29aac <ble_store_config_read_our_sec>
        return rc;
   29bf2:	e7f6      	b.n	29be2 <ble_store_config_read+0x24>
        rc = ble_store_config_read_cccd(&key->cccd, &value->cccd);
   29bf4:	4611      	mov	r1, r2
   29bf6:	4620      	mov	r0, r4
   29bf8:	f7ff ffb6 	bl	29b68 <ble_store_config_read_cccd>
        return rc;
   29bfc:	e7f1      	b.n	29be2 <ble_store_config_read+0x24>

00029bfe <ble_store_config_print_value_sec>:
{
   29bfe:	b510      	push	{r4, lr}
   29c00:	4604      	mov	r4, r0
    if (sec->ltk_present) {
   29c02:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   29c06:	f013 0f01 	tst.w	r3, #1
   29c0a:	d10a      	bne.n	29c22 <ble_store_config_print_value_sec+0x24>
    if (sec->irk_present) {
   29c0c:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
   29c10:	f013 0f01 	tst.w	r3, #1
   29c14:	d10a      	bne.n	29c2c <ble_store_config_print_value_sec+0x2e>
    if (sec->csrk_present) {
   29c16:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
   29c1a:	f013 0f01 	tst.w	r3, #1
   29c1e:	d10b      	bne.n	29c38 <ble_store_config_print_value_sec+0x3a>
}
   29c20:	bd10      	pop	{r4, pc}
        ble_hs_log_flat_buf(sec->ltk, 16);
   29c22:	2110      	movs	r1, #16
   29c24:	3018      	adds	r0, #24
   29c26:	f7fb fcd3 	bl	255d0 <ble_hs_log_flat_buf>
   29c2a:	e7ef      	b.n	29c0c <ble_store_config_print_value_sec+0xe>
        ble_hs_log_flat_buf(sec->irk, 16);
   29c2c:	2110      	movs	r1, #16
   29c2e:	f104 0029 	add.w	r0, r4, #41	; 0x29
   29c32:	f7fb fccd 	bl	255d0 <ble_hs_log_flat_buf>
   29c36:	e7ee      	b.n	29c16 <ble_store_config_print_value_sec+0x18>
        ble_hs_log_flat_buf(sec->csrk, 16);
   29c38:	2110      	movs	r1, #16
   29c3a:	f104 003a 	add.w	r0, r4, #58	; 0x3a
   29c3e:	f7fb fcc7 	bl	255d0 <ble_hs_log_flat_buf>
}
   29c42:	e7ed      	b.n	29c20 <ble_store_config_print_value_sec+0x22>

00029c44 <ble_store_config_write_peer_sec>:
{
   29c44:	b530      	push	{r4, r5, lr}
   29c46:	b089      	sub	sp, #36	; 0x24
   29c48:	4605      	mov	r5, r0
    ble_store_config_print_value_sec(value_sec);
   29c4a:	f7ff ffd8 	bl	29bfe <ble_store_config_print_value_sec>
    ble_store_key_from_value_sec(&key_sec, value_sec);
   29c4e:	4629      	mov	r1, r5
   29c50:	4668      	mov	r0, sp
   29c52:	f7fe ff0f 	bl	28a74 <ble_store_key_from_value_sec>
    idx = ble_store_config_find_sec(&key_sec, ble_store_config_peer_secs,
   29c56:	4b0f      	ldr	r3, [pc, #60]	; (29c94 <ble_store_config_write_peer_sec+0x50>)
   29c58:	681c      	ldr	r4, [r3, #0]
   29c5a:	4622      	mov	r2, r4
   29c5c:	490e      	ldr	r1, [pc, #56]	; (29c98 <ble_store_config_write_peer_sec+0x54>)
   29c5e:	4668      	mov	r0, sp
   29c60:	f7ff febe 	bl	299e0 <ble_store_config_find_sec>
    if (idx == -1) {
   29c64:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   29c68:	d105      	bne.n	29c76 <ble_store_config_write_peer_sec+0x32>
        if (ble_store_config_num_peer_secs >= MYNEWT_VAL(BLE_STORE_MAX_BONDS)) {
   29c6a:	2c02      	cmp	r4, #2
   29c6c:	dc10      	bgt.n	29c90 <ble_store_config_write_peer_sec+0x4c>
        ble_store_config_num_peer_secs++;
   29c6e:	1c62      	adds	r2, r4, #1
   29c70:	4b08      	ldr	r3, [pc, #32]	; (29c94 <ble_store_config_write_peer_sec+0x50>)
   29c72:	601a      	str	r2, [r3, #0]
        idx = ble_store_config_num_peer_secs;
   29c74:	4620      	mov	r0, r4
    ble_store_config_peer_secs[idx] = *value_sec;
   29c76:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   29c7a:	0103      	lsls	r3, r0, #4
   29c7c:	2250      	movs	r2, #80	; 0x50
   29c7e:	4629      	mov	r1, r5
   29c80:	4805      	ldr	r0, [pc, #20]	; (29c98 <ble_store_config_write_peer_sec+0x54>)
   29c82:	4418      	add	r0, r3
   29c84:	f7e4 fe8c 	bl	e9a0 <memcpy>
    rc = ble_store_config_persist_peer_secs();
   29c88:	f000 f9da 	bl	2a040 <ble_store_config_persist_peer_secs>
}
   29c8c:	b009      	add	sp, #36	; 0x24
   29c8e:	bd30      	pop	{r4, r5, pc}
            return BLE_HS_ESTORE_CAP;
   29c90:	201b      	movs	r0, #27
   29c92:	e7fb      	b.n	29c8c <ble_store_config_write_peer_sec+0x48>
   29c94:	20004260 	.word	0x20004260
   29c98:	20004170 	.word	0x20004170

00029c9c <ble_store_config_write_our_sec>:
{
   29c9c:	b530      	push	{r4, r5, lr}
   29c9e:	b089      	sub	sp, #36	; 0x24
   29ca0:	4605      	mov	r5, r0
    ble_store_config_print_value_sec(value_sec);
   29ca2:	f7ff ffac 	bl	29bfe <ble_store_config_print_value_sec>
    ble_store_key_from_value_sec(&key_sec, value_sec);
   29ca6:	4629      	mov	r1, r5
   29ca8:	4668      	mov	r0, sp
   29caa:	f7fe fee3 	bl	28a74 <ble_store_key_from_value_sec>
    idx = ble_store_config_find_sec(&key_sec, ble_store_config_our_secs,
   29cae:	4b0f      	ldr	r3, [pc, #60]	; (29cec <ble_store_config_write_our_sec+0x50>)
   29cb0:	681c      	ldr	r4, [r3, #0]
   29cb2:	4622      	mov	r2, r4
   29cb4:	490e      	ldr	r1, [pc, #56]	; (29cf0 <ble_store_config_write_our_sec+0x54>)
   29cb6:	4668      	mov	r0, sp
   29cb8:	f7ff fe92 	bl	299e0 <ble_store_config_find_sec>
    if (idx == -1) {
   29cbc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   29cc0:	d105      	bne.n	29cce <ble_store_config_write_our_sec+0x32>
        if (ble_store_config_num_our_secs >= MYNEWT_VAL(BLE_STORE_MAX_BONDS)) {
   29cc2:	2c02      	cmp	r4, #2
   29cc4:	dc10      	bgt.n	29ce8 <ble_store_config_write_our_sec+0x4c>
        ble_store_config_num_our_secs++;
   29cc6:	1c62      	adds	r2, r4, #1
   29cc8:	4b08      	ldr	r3, [pc, #32]	; (29cec <ble_store_config_write_our_sec+0x50>)
   29cca:	601a      	str	r2, [r3, #0]
        idx = ble_store_config_num_our_secs;
   29ccc:	4620      	mov	r0, r4
    ble_store_config_our_secs[idx] = *value_sec;
   29cce:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   29cd2:	0103      	lsls	r3, r0, #4
   29cd4:	2250      	movs	r2, #80	; 0x50
   29cd6:	4629      	mov	r1, r5
   29cd8:	4805      	ldr	r0, [pc, #20]	; (29cf0 <ble_store_config_write_our_sec+0x54>)
   29cda:	4418      	add	r0, r3
   29cdc:	f7e4 fe60 	bl	e9a0 <memcpy>
    rc = ble_store_config_persist_our_secs();
   29ce0:	f000 f9a0 	bl	2a024 <ble_store_config_persist_our_secs>
}
   29ce4:	b009      	add	sp, #36	; 0x24
   29ce6:	bd30      	pop	{r4, r5, pc}
            return BLE_HS_ESTORE_CAP;
   29ce8:	201b      	movs	r0, #27
   29cea:	e7fb      	b.n	29ce4 <ble_store_config_write_our_sec+0x48>
   29cec:	200042e4 	.word	0x200042e4
   29cf0:	200042f0 	.word	0x200042f0

00029cf4 <ble_store_config_write_cccd>:
{
   29cf4:	b530      	push	{r4, r5, lr}
   29cf6:	b085      	sub	sp, #20
   29cf8:	4605      	mov	r5, r0
    ble_store_key_from_value_cccd(&key_cccd, value_cccd);
   29cfa:	4601      	mov	r1, r0
   29cfc:	a801      	add	r0, sp, #4
   29cfe:	f7fe feab 	bl	28a58 <ble_store_key_from_value_cccd>
    idx = ble_store_config_find_cccd(&key_cccd);
   29d02:	a801      	add	r0, sp, #4
   29d04:	f7ff feee 	bl	29ae4 <ble_store_config_find_cccd>
    if (idx == -1) {
   29d08:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   29d0c:	d106      	bne.n	29d1c <ble_store_config_write_cccd+0x28>
        if (ble_store_config_num_cccds >= MYNEWT_VAL(BLE_STORE_MAX_CCCDS)) {
   29d0e:	4b0a      	ldr	r3, [pc, #40]	; (29d38 <ble_store_config_write_cccd+0x44>)
   29d10:	6818      	ldr	r0, [r3, #0]
   29d12:	2807      	cmp	r0, #7
   29d14:	dc0d      	bgt.n	29d32 <ble_store_config_write_cccd+0x3e>
        ble_store_config_num_cccds++;
   29d16:	1c43      	adds	r3, r0, #1
   29d18:	4a07      	ldr	r2, [pc, #28]	; (29d38 <ble_store_config_write_cccd+0x44>)
   29d1a:	6013      	str	r3, [r2, #0]
    ble_store_config_cccds[idx] = *value_cccd;
   29d1c:	4c07      	ldr	r4, [pc, #28]	; (29d3c <ble_store_config_write_cccd+0x48>)
   29d1e:	eb04 1400 	add.w	r4, r4, r0, lsl #4
   29d22:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   29d26:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    rc = ble_store_config_persist_cccds();
   29d2a:	f000 f997 	bl	2a05c <ble_store_config_persist_cccds>
}
   29d2e:	b005      	add	sp, #20
   29d30:	bd30      	pop	{r4, r5, pc}
            return BLE_HS_ESTORE_CAP;
   29d32:	201b      	movs	r0, #27
   29d34:	e7fb      	b.n	29d2e <ble_store_config_write_cccd+0x3a>
   29d36:	bf00      	nop
   29d38:	200042e8 	.word	0x200042e8
   29d3c:	20004264 	.word	0x20004264

00029d40 <ble_store_config_write>:
 * @return                      0 on success;
 *                              BLE_HS_ESTORE_CAP if the database is full.
 */
int
ble_store_config_write(int obj_type, const union ble_store_value *val)
{
   29d40:	b508      	push	{r3, lr}
    int rc;

    switch (obj_type) {
   29d42:	2802      	cmp	r0, #2
   29d44:	d005      	beq.n	29d52 <ble_store_config_write+0x12>
   29d46:	2803      	cmp	r0, #3
   29d48:	d00b      	beq.n	29d62 <ble_store_config_write+0x22>
   29d4a:	2801      	cmp	r0, #1
   29d4c:	d005      	beq.n	29d5a <ble_store_config_write+0x1a>
    case BLE_STORE_OBJ_TYPE_CCCD:
        rc = ble_store_config_write_cccd(&val->cccd);
        return rc;

    default:
        return BLE_HS_ENOTSUP;
   29d4e:	2008      	movs	r0, #8
   29d50:	e002      	b.n	29d58 <ble_store_config_write+0x18>
        rc = ble_store_config_write_peer_sec(&val->sec);
   29d52:	4608      	mov	r0, r1
   29d54:	f7ff ff76 	bl	29c44 <ble_store_config_write_peer_sec>
    }
}
   29d58:	bd08      	pop	{r3, pc}
        rc = ble_store_config_write_our_sec(&val->sec);
   29d5a:	4608      	mov	r0, r1
   29d5c:	f7ff ff9e 	bl	29c9c <ble_store_config_write_our_sec>
        return rc;
   29d60:	e7fa      	b.n	29d58 <ble_store_config_write+0x18>
        rc = ble_store_config_write_cccd(&val->cccd);
   29d62:	4608      	mov	r0, r1
   29d64:	f7ff ffc6 	bl	29cf4 <ble_store_config_write_cccd>
        return rc;
   29d68:	e7f6      	b.n	29d58 <ble_store_config_write+0x18>

00029d6a <ble_store_config_delete_obj>:
{
   29d6a:	b510      	push	{r4, lr}
    (*num_values)--;
   29d6c:	681c      	ldr	r4, [r3, #0]
   29d6e:	3c01      	subs	r4, #1
   29d70:	601c      	str	r4, [r3, #0]
    if (idx < *num_values) {
   29d72:	4294      	cmp	r4, r2
   29d74:	dc01      	bgt.n	29d7a <ble_store_config_delete_obj+0x10>
}
   29d76:	2000      	movs	r0, #0
   29d78:	bd10      	pop	{r4, pc}
        dst += idx * value_size;
   29d7a:	fb01 0002 	mla	r0, r1, r2, r0
        move_count = *num_values - idx;
   29d7e:	1aa2      	subs	r2, r4, r2
        memmove(dst, src, move_count * value_size);
   29d80:	fb02 f201 	mul.w	r2, r2, r1
   29d84:	4401      	add	r1, r0
   29d86:	f7e4 fe18 	bl	e9ba <memmove>
   29d8a:	e7f4      	b.n	29d76 <ble_store_config_delete_obj+0xc>

00029d8c <ble_store_config_delete_sec>:
{
   29d8c:	b538      	push	{r3, r4, r5, lr}
   29d8e:	460d      	mov	r5, r1
   29d90:	4614      	mov	r4, r2
    idx = ble_store_config_find_sec(key_sec, value_secs, *num_value_secs);
   29d92:	6812      	ldr	r2, [r2, #0]
   29d94:	f7ff fe24 	bl	299e0 <ble_store_config_find_sec>
    if (idx == -1) {
   29d98:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   29d9c:	d006      	beq.n	29dac <ble_store_config_delete_sec+0x20>
    rc = ble_store_config_delete_obj(value_secs, sizeof *value_secs, idx,
   29d9e:	4623      	mov	r3, r4
   29da0:	4602      	mov	r2, r0
   29da2:	2150      	movs	r1, #80	; 0x50
   29da4:	4628      	mov	r0, r5
   29da6:	f7ff ffe0 	bl	29d6a <ble_store_config_delete_obj>
}
   29daa:	bd38      	pop	{r3, r4, r5, pc}
        return BLE_HS_ENOENT;
   29dac:	2005      	movs	r0, #5
   29dae:	e7fc      	b.n	29daa <ble_store_config_delete_sec+0x1e>

00029db0 <ble_store_config_delete_peer_sec>:
{
   29db0:	b508      	push	{r3, lr}
    rc = ble_store_config_delete_sec(key_sec, ble_store_config_peer_secs,
   29db2:	4a06      	ldr	r2, [pc, #24]	; (29dcc <ble_store_config_delete_peer_sec+0x1c>)
   29db4:	4906      	ldr	r1, [pc, #24]	; (29dd0 <ble_store_config_delete_peer_sec+0x20>)
   29db6:	f7ff ffe9 	bl	29d8c <ble_store_config_delete_sec>
    if (rc != 0) {
   29dba:	4603      	mov	r3, r0
   29dbc:	b108      	cbz	r0, 29dc2 <ble_store_config_delete_peer_sec+0x12>
}
   29dbe:	4618      	mov	r0, r3
   29dc0:	bd08      	pop	{r3, pc}
    rc = ble_store_config_persist_peer_secs();
   29dc2:	f000 f93d 	bl	2a040 <ble_store_config_persist_peer_secs>
   29dc6:	4603      	mov	r3, r0
   29dc8:	e7f9      	b.n	29dbe <ble_store_config_delete_peer_sec+0xe>
   29dca:	bf00      	nop
   29dcc:	20004260 	.word	0x20004260
   29dd0:	20004170 	.word	0x20004170

00029dd4 <ble_store_config_delete_our_sec>:
{
   29dd4:	b508      	push	{r3, lr}
    rc = ble_store_config_delete_sec(key_sec, ble_store_config_our_secs,
   29dd6:	4a06      	ldr	r2, [pc, #24]	; (29df0 <ble_store_config_delete_our_sec+0x1c>)
   29dd8:	4906      	ldr	r1, [pc, #24]	; (29df4 <ble_store_config_delete_our_sec+0x20>)
   29dda:	f7ff ffd7 	bl	29d8c <ble_store_config_delete_sec>
    if (rc != 0) {
   29dde:	4603      	mov	r3, r0
   29de0:	b108      	cbz	r0, 29de6 <ble_store_config_delete_our_sec+0x12>
}
   29de2:	4618      	mov	r0, r3
   29de4:	bd08      	pop	{r3, pc}
    rc = ble_store_config_persist_our_secs();
   29de6:	f000 f91d 	bl	2a024 <ble_store_config_persist_our_secs>
   29dea:	4603      	mov	r3, r0
   29dec:	e7f9      	b.n	29de2 <ble_store_config_delete_our_sec+0xe>
   29dee:	bf00      	nop
   29df0:	200042e4 	.word	0x200042e4
   29df4:	200042f0 	.word	0x200042f0

00029df8 <ble_store_config_delete_cccd>:
{
   29df8:	b508      	push	{r3, lr}
    idx = ble_store_config_find_cccd(key_cccd);
   29dfa:	f7ff fe73 	bl	29ae4 <ble_store_config_find_cccd>
    if (idx == -1) {
   29dfe:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   29e02:	d00d      	beq.n	29e20 <ble_store_config_delete_cccd+0x28>
    rc = ble_store_config_delete_obj(ble_store_config_cccds,
   29e04:	4b07      	ldr	r3, [pc, #28]	; (29e24 <ble_store_config_delete_cccd+0x2c>)
   29e06:	4602      	mov	r2, r0
   29e08:	2110      	movs	r1, #16
   29e0a:	4807      	ldr	r0, [pc, #28]	; (29e28 <ble_store_config_delete_cccd+0x30>)
   29e0c:	f7ff ffad 	bl	29d6a <ble_store_config_delete_obj>
    if (rc != 0) {
   29e10:	4603      	mov	r3, r0
   29e12:	b108      	cbz	r0, 29e18 <ble_store_config_delete_cccd+0x20>
}
   29e14:	4618      	mov	r0, r3
   29e16:	bd08      	pop	{r3, pc}
    rc = ble_store_config_persist_cccds();
   29e18:	f000 f920 	bl	2a05c <ble_store_config_persist_cccds>
   29e1c:	4603      	mov	r3, r0
   29e1e:	e7f9      	b.n	29e14 <ble_store_config_delete_cccd+0x1c>
        return BLE_HS_ENOENT;
   29e20:	2305      	movs	r3, #5
   29e22:	e7f7      	b.n	29e14 <ble_store_config_delete_cccd+0x1c>
   29e24:	200042e8 	.word	0x200042e8
   29e28:	20004264 	.word	0x20004264

00029e2c <ble_store_config_delete>:

int
ble_store_config_delete(int obj_type, const union ble_store_key *key)
{
   29e2c:	b508      	push	{r3, lr}
    int rc;

    switch (obj_type) {
   29e2e:	2802      	cmp	r0, #2
   29e30:	d005      	beq.n	29e3e <ble_store_config_delete+0x12>
   29e32:	2803      	cmp	r0, #3
   29e34:	d00b      	beq.n	29e4e <ble_store_config_delete+0x22>
   29e36:	2801      	cmp	r0, #1
   29e38:	d005      	beq.n	29e46 <ble_store_config_delete+0x1a>
    case BLE_STORE_OBJ_TYPE_CCCD:
        rc = ble_store_config_delete_cccd(&key->cccd);
        return rc;

    default:
        return BLE_HS_ENOTSUP;
   29e3a:	2008      	movs	r0, #8
   29e3c:	e002      	b.n	29e44 <ble_store_config_delete+0x18>
        rc = ble_store_config_delete_peer_sec(&key->sec);
   29e3e:	4608      	mov	r0, r1
   29e40:	f7ff ffb6 	bl	29db0 <ble_store_config_delete_peer_sec>
    }
}
   29e44:	bd08      	pop	{r3, pc}
        rc = ble_store_config_delete_our_sec(&key->sec);
   29e46:	4608      	mov	r0, r1
   29e48:	f7ff ffc4 	bl	29dd4 <ble_store_config_delete_our_sec>
        return rc;
   29e4c:	e7fa      	b.n	29e44 <ble_store_config_delete+0x18>
        rc = ble_store_config_delete_cccd(&key->cccd);
   29e4e:	4608      	mov	r0, r1
   29e50:	f7ff ffd2 	bl	29df8 <ble_store_config_delete_cccd>
        return rc;
   29e54:	e7f6      	b.n	29e44 <ble_store_config_delete+0x18>
	...

00029e58 <ble_store_config_init>:

void
ble_store_config_init(void)
{
   29e58:	b508      	push	{r3, lr}
    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   29e5a:	4b0f      	ldr	r3, [pc, #60]	; (29e98 <ble_store_config_init+0x40>)
   29e5c:	781b      	ldrb	r3, [r3, #0]
   29e5e:	b183      	cbz	r3, 29e82 <ble_store_config_init+0x2a>

    ble_hs_cfg.store_read_cb = ble_store_config_read;
   29e60:	4b0e      	ldr	r3, [pc, #56]	; (29e9c <ble_store_config_init+0x44>)
   29e62:	4a0f      	ldr	r2, [pc, #60]	; (29ea0 <ble_store_config_init+0x48>)
   29e64:	615a      	str	r2, [r3, #20]
    ble_hs_cfg.store_write_cb = ble_store_config_write;
   29e66:	4a0f      	ldr	r2, [pc, #60]	; (29ea4 <ble_store_config_init+0x4c>)
   29e68:	619a      	str	r2, [r3, #24]
    ble_hs_cfg.store_delete_cb = ble_store_config_delete;
   29e6a:	4a0f      	ldr	r2, [pc, #60]	; (29ea8 <ble_store_config_init+0x50>)
   29e6c:	61da      	str	r2, [r3, #28]

    /* Re-initialize BSS values in case of unit tests. */
    ble_store_config_num_our_secs = 0;
   29e6e:	2300      	movs	r3, #0
   29e70:	4a0e      	ldr	r2, [pc, #56]	; (29eac <ble_store_config_init+0x54>)
   29e72:	6013      	str	r3, [r2, #0]
    ble_store_config_num_peer_secs = 0;
   29e74:	4a0e      	ldr	r2, [pc, #56]	; (29eb0 <ble_store_config_init+0x58>)
   29e76:	6013      	str	r3, [r2, #0]
    ble_store_config_num_cccds = 0;
   29e78:	4a0e      	ldr	r2, [pc, #56]	; (29eb4 <ble_store_config_init+0x5c>)
   29e7a:	6013      	str	r3, [r2, #0]

    ble_store_config_conf_init();
   29e7c:	f000 f90c 	bl	2a098 <ble_store_config_conf_init>
}
   29e80:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   29e82:	f7e2 f9b1 	bl	c1e8 <hal_debugger_connected>
   29e86:	b100      	cbz	r0, 29e8a <ble_store_config_init+0x32>
   29e88:	be01      	bkpt	0x0001
   29e8a:	2300      	movs	r3, #0
   29e8c:	461a      	mov	r2, r3
   29e8e:	4619      	mov	r1, r3
   29e90:	4618      	mov	r0, r3
   29e92:	f7e2 fe5d 	bl	cb50 <__assert_func>
   29e96:	bf00      	nop
   29e98:	20003584 	.word	0x20003584
   29e9c:	200002c8 	.word	0x200002c8
   29ea0:	00029bbf 	.word	0x00029bbf
   29ea4:	00029d41 	.word	0x00029d41
   29ea8:	00029e2d 	.word	0x00029e2d
   29eac:	200042e4 	.word	0x200042e4
   29eb0:	20004260 	.word	0x20004260
   29eb4:	200042e8 	.word	0x200042e8

00029eb8 <ble_store_config_serialize_arr>:
    (MYNEWT_VAL(BLE_STORE_MAX_CCCDS) * BLE_STORE_CONFIG_CCCD_ENCODE_SZ + 1)

static void
ble_store_config_serialize_arr(const void *arr, int obj_sz, int num_objs,
                               char *out_buf, int buf_sz)
{
   29eb8:	b510      	push	{r4, lr}
   29eba:	461c      	mov	r4, r3
    int arr_size;

    arr_size = obj_sz * num_objs;
   29ebc:	fb02 f101 	mul.w	r1, r2, r1
    assert(arr_size <= buf_sz);
   29ec0:	9b02      	ldr	r3, [sp, #8]
   29ec2:	4299      	cmp	r1, r3
   29ec4:	dc04      	bgt.n	29ed0 <ble_store_config_serialize_arr+0x18>

    base64_encode(arr, arr_size, out_buf, 1);
   29ec6:	2301      	movs	r3, #1
   29ec8:	4622      	mov	r2, r4
   29eca:	f002 f9f9 	bl	2c2c0 <base64_encode>
}
   29ece:	bd10      	pop	{r4, pc}
    assert(arr_size <= buf_sz);
   29ed0:	f7e2 f98a 	bl	c1e8 <hal_debugger_connected>
   29ed4:	b100      	cbz	r0, 29ed8 <ble_store_config_serialize_arr+0x20>
   29ed6:	be01      	bkpt	0x0001
   29ed8:	2300      	movs	r3, #0
   29eda:	461a      	mov	r2, r3
   29edc:	4619      	mov	r1, r3
   29ede:	4618      	mov	r0, r3
   29ee0:	f7e2 fe36 	bl	cb50 <__assert_func>

00029ee4 <ble_store_config_persist_sec_set>:

static int
ble_store_config_persist_sec_set(const char *setting_name,
                                 const struct ble_store_value_sec *secs,
                                 int num_secs)
{
   29ee4:	b510      	push	{r4, lr}
   29ee6:	b0d4      	sub	sp, #336	; 0x150
   29ee8:	4604      	mov	r4, r0
   29eea:	4608      	mov	r0, r1
    char buf[BLE_STORE_CONFIG_SEC_SET_ENCODE_SZ];
    int rc;

    ble_store_config_serialize_arr(secs, sizeof *secs, num_secs,
   29eec:	f240 1345 	movw	r3, #325	; 0x145
   29ef0:	9300      	str	r3, [sp, #0]
   29ef2:	ab02      	add	r3, sp, #8
   29ef4:	2150      	movs	r1, #80	; 0x50
   29ef6:	f7ff ffdf 	bl	29eb8 <ble_store_config_serialize_arr>
                                   buf, sizeof buf);
    rc = conf_save_one(setting_name, buf);
   29efa:	a902      	add	r1, sp, #8
   29efc:	4620      	mov	r0, r4
   29efe:	f7e5 f951 	bl	f1a4 <conf_save_one>
    if (rc != 0) {
   29f02:	4603      	mov	r3, r0
   29f04:	b910      	cbnz	r0, 29f0c <ble_store_config_persist_sec_set+0x28>
        return BLE_HS_ESTORE_FAIL;
    }

    return 0;
}
   29f06:	4618      	mov	r0, r3
   29f08:	b054      	add	sp, #336	; 0x150
   29f0a:	bd10      	pop	{r4, pc}
        return BLE_HS_ESTORE_FAIL;
   29f0c:	231c      	movs	r3, #28
   29f0e:	e7fa      	b.n	29f06 <ble_store_config_persist_sec_set+0x22>

00029f10 <ble_store_config_conf_export>:
{
   29f10:	b530      	push	{r4, r5, lr}
   29f12:	b0d5      	sub	sp, #340	; 0x154
   29f14:	4604      	mov	r4, r0
    ble_store_config_serialize_arr(ble_store_config_our_secs,
   29f16:	4b13      	ldr	r3, [pc, #76]	; (29f64 <ble_store_config_conf_export+0x54>)
   29f18:	681a      	ldr	r2, [r3, #0]
   29f1a:	f240 1545 	movw	r5, #325	; 0x145
   29f1e:	9500      	str	r5, [sp, #0]
   29f20:	ab02      	add	r3, sp, #8
   29f22:	2150      	movs	r1, #80	; 0x50
   29f24:	4810      	ldr	r0, [pc, #64]	; (29f68 <ble_store_config_conf_export+0x58>)
   29f26:	f7ff ffc7 	bl	29eb8 <ble_store_config_serialize_arr>
    func("ble_hs/our_sec", buf.sec);
   29f2a:	a902      	add	r1, sp, #8
   29f2c:	480f      	ldr	r0, [pc, #60]	; (29f6c <ble_store_config_conf_export+0x5c>)
   29f2e:	47a0      	blx	r4
    ble_store_config_serialize_arr(ble_store_config_peer_secs,
   29f30:	4b0f      	ldr	r3, [pc, #60]	; (29f70 <ble_store_config_conf_export+0x60>)
   29f32:	681a      	ldr	r2, [r3, #0]
   29f34:	9500      	str	r5, [sp, #0]
   29f36:	ab02      	add	r3, sp, #8
   29f38:	2150      	movs	r1, #80	; 0x50
   29f3a:	480e      	ldr	r0, [pc, #56]	; (29f74 <ble_store_config_conf_export+0x64>)
   29f3c:	f7ff ffbc 	bl	29eb8 <ble_store_config_serialize_arr>
    func("ble_hs/peer_sec", buf.sec);
   29f40:	a902      	add	r1, sp, #8
   29f42:	480d      	ldr	r0, [pc, #52]	; (29f78 <ble_store_config_conf_export+0x68>)
   29f44:	47a0      	blx	r4
    ble_store_config_serialize_arr(ble_store_config_cccds,
   29f46:	4b0d      	ldr	r3, [pc, #52]	; (29f7c <ble_store_config_conf_export+0x6c>)
   29f48:	681a      	ldr	r2, [r3, #0]
   29f4a:	23c1      	movs	r3, #193	; 0xc1
   29f4c:	9300      	str	r3, [sp, #0]
   29f4e:	ab02      	add	r3, sp, #8
   29f50:	2110      	movs	r1, #16
   29f52:	480b      	ldr	r0, [pc, #44]	; (29f80 <ble_store_config_conf_export+0x70>)
   29f54:	f7ff ffb0 	bl	29eb8 <ble_store_config_serialize_arr>
    func("ble_hs/cccd", buf.cccd);
   29f58:	a902      	add	r1, sp, #8
   29f5a:	480a      	ldr	r0, [pc, #40]	; (29f84 <ble_store_config_conf_export+0x74>)
   29f5c:	47a0      	blx	r4
}
   29f5e:	2000      	movs	r0, #0
   29f60:	b055      	add	sp, #340	; 0x154
   29f62:	bd30      	pop	{r4, r5, pc}
   29f64:	200042e4 	.word	0x200042e4
   29f68:	200042f0 	.word	0x200042f0
   29f6c:	000328d4 	.word	0x000328d4
   29f70:	20004260 	.word	0x20004260
   29f74:	20004170 	.word	0x20004170
   29f78:	000328e4 	.word	0x000328e4
   29f7c:	200042e8 	.word	0x200042e8
   29f80:	20004264 	.word	0x20004264
   29f84:	000328f4 	.word	0x000328f4

00029f88 <ble_store_config_deserialize_arr>:
{
   29f88:	b538      	push	{r3, r4, r5, lr}
   29f8a:	4615      	mov	r5, r2
   29f8c:	461c      	mov	r4, r3
    len = base64_decode(enc, out_arr);
   29f8e:	f002 f9dd 	bl	2c34c <base64_decode>
    if (len < 0) {
   29f92:	2800      	cmp	r0, #0
   29f94:	db04      	blt.n	29fa0 <ble_store_config_deserialize_arr+0x18>
    *out_num_objs = len / obj_sz;
   29f96:	fb90 f0f5 	sdiv	r0, r0, r5
   29f9a:	6020      	str	r0, [r4, #0]
    return 0;
   29f9c:	2000      	movs	r0, #0
}
   29f9e:	bd38      	pop	{r3, r4, r5, pc}
        return OS_EINVAL;
   29fa0:	2002      	movs	r0, #2
   29fa2:	e7fc      	b.n	29f9e <ble_store_config_deserialize_arr+0x16>

00029fa4 <ble_store_config_conf_set>:
    if (argc == 1) {
   29fa4:	2801      	cmp	r0, #1
   29fa6:	d126      	bne.n	29ff6 <ble_store_config_conf_set+0x52>
{
   29fa8:	b538      	push	{r3, r4, r5, lr}
   29faa:	4614      	mov	r4, r2
        if (strcmp(argv[0], "our_sec") == 0) {
   29fac:	680d      	ldr	r5, [r1, #0]
   29fae:	4914      	ldr	r1, [pc, #80]	; (2a000 <ble_store_config_conf_set+0x5c>)
   29fb0:	4628      	mov	r0, r5
   29fb2:	f7e4 fd43 	bl	ea3c <strcmp>
   29fb6:	b180      	cbz	r0, 29fda <ble_store_config_conf_set+0x36>
        } else if (strcmp(argv[0], "peer_sec") == 0) {
   29fb8:	4912      	ldr	r1, [pc, #72]	; (2a004 <ble_store_config_conf_set+0x60>)
   29fba:	4628      	mov	r0, r5
   29fbc:	f7e4 fd3e 	bl	ea3c <strcmp>
   29fc0:	b190      	cbz	r0, 29fe8 <ble_store_config_conf_set+0x44>
        } else if (strcmp(argv[0], "cccd") == 0) {
   29fc2:	4911      	ldr	r1, [pc, #68]	; (2a008 <ble_store_config_conf_set+0x64>)
   29fc4:	4628      	mov	r0, r5
   29fc6:	f7e4 fd39 	bl	ea3c <strcmp>
   29fca:	b9b0      	cbnz	r0, 29ffa <ble_store_config_conf_set+0x56>
            rc = ble_store_config_deserialize_arr(
   29fcc:	4b0f      	ldr	r3, [pc, #60]	; (2a00c <ble_store_config_conf_set+0x68>)
   29fce:	2210      	movs	r2, #16
   29fd0:	490f      	ldr	r1, [pc, #60]	; (2a010 <ble_store_config_conf_set+0x6c>)
   29fd2:	4620      	mov	r0, r4
   29fd4:	f7ff ffd8 	bl	29f88 <ble_store_config_deserialize_arr>
            return rc;
   29fd8:	e005      	b.n	29fe6 <ble_store_config_conf_set+0x42>
            rc = ble_store_config_deserialize_arr(
   29fda:	4b0e      	ldr	r3, [pc, #56]	; (2a014 <ble_store_config_conf_set+0x70>)
   29fdc:	2250      	movs	r2, #80	; 0x50
   29fde:	490e      	ldr	r1, [pc, #56]	; (2a018 <ble_store_config_conf_set+0x74>)
   29fe0:	4620      	mov	r0, r4
   29fe2:	f7ff ffd1 	bl	29f88 <ble_store_config_deserialize_arr>
}
   29fe6:	bd38      	pop	{r3, r4, r5, pc}
            rc = ble_store_config_deserialize_arr(
   29fe8:	4b0c      	ldr	r3, [pc, #48]	; (2a01c <ble_store_config_conf_set+0x78>)
   29fea:	2250      	movs	r2, #80	; 0x50
   29fec:	490c      	ldr	r1, [pc, #48]	; (2a020 <ble_store_config_conf_set+0x7c>)
   29fee:	4620      	mov	r0, r4
   29ff0:	f7ff ffca 	bl	29f88 <ble_store_config_deserialize_arr>
            return rc;
   29ff4:	e7f7      	b.n	29fe6 <ble_store_config_conf_set+0x42>
    return OS_ENOENT;
   29ff6:	200a      	movs	r0, #10
}
   29ff8:	4770      	bx	lr
    return OS_ENOENT;
   29ffa:	200a      	movs	r0, #10
   29ffc:	e7f3      	b.n	29fe6 <ble_store_config_conf_set+0x42>
   29ffe:	bf00      	nop
   2a000:	00032900 	.word	0x00032900
   2a004:	00032908 	.word	0x00032908
   2a008:	00032914 	.word	0x00032914
   2a00c:	200042e8 	.word	0x200042e8
   2a010:	20004264 	.word	0x20004264
   2a014:	200042e4 	.word	0x200042e4
   2a018:	200042f0 	.word	0x200042f0
   2a01c:	20004260 	.word	0x20004260
   2a020:	20004170 	.word	0x20004170

0002a024 <ble_store_config_persist_our_secs>:

int
ble_store_config_persist_our_secs(void)
{
   2a024:	b508      	push	{r3, lr}
    int rc;

    rc = ble_store_config_persist_sec_set("ble_hs/our_sec",
   2a026:	4b03      	ldr	r3, [pc, #12]	; (2a034 <ble_store_config_persist_our_secs+0x10>)
   2a028:	681a      	ldr	r2, [r3, #0]
   2a02a:	4903      	ldr	r1, [pc, #12]	; (2a038 <ble_store_config_persist_our_secs+0x14>)
   2a02c:	4803      	ldr	r0, [pc, #12]	; (2a03c <ble_store_config_persist_our_secs+0x18>)
   2a02e:	f7ff ff59 	bl	29ee4 <ble_store_config_persist_sec_set>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   2a032:	bd08      	pop	{r3, pc}
   2a034:	200042e4 	.word	0x200042e4
   2a038:	200042f0 	.word	0x200042f0
   2a03c:	000328d4 	.word	0x000328d4

0002a040 <ble_store_config_persist_peer_secs>:

int
ble_store_config_persist_peer_secs(void)
{
   2a040:	b508      	push	{r3, lr}
    int rc;

    rc = ble_store_config_persist_sec_set("ble_hs/peer_sec",
   2a042:	4b03      	ldr	r3, [pc, #12]	; (2a050 <ble_store_config_persist_peer_secs+0x10>)
   2a044:	681a      	ldr	r2, [r3, #0]
   2a046:	4903      	ldr	r1, [pc, #12]	; (2a054 <ble_store_config_persist_peer_secs+0x14>)
   2a048:	4803      	ldr	r0, [pc, #12]	; (2a058 <ble_store_config_persist_peer_secs+0x18>)
   2a04a:	f7ff ff4b 	bl	29ee4 <ble_store_config_persist_sec_set>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   2a04e:	bd08      	pop	{r3, pc}
   2a050:	20004260 	.word	0x20004260
   2a054:	20004170 	.word	0x20004170
   2a058:	000328e4 	.word	0x000328e4

0002a05c <ble_store_config_persist_cccds>:

int
ble_store_config_persist_cccds(void)
{
   2a05c:	b500      	push	{lr}
   2a05e:	b0b5      	sub	sp, #212	; 0xd4
    char buf[BLE_STORE_CONFIG_CCCD_SET_ENCODE_SZ];
    int rc;

    ble_store_config_serialize_arr(ble_store_config_cccds,
   2a060:	4b0a      	ldr	r3, [pc, #40]	; (2a08c <ble_store_config_persist_cccds+0x30>)
   2a062:	681a      	ldr	r2, [r3, #0]
   2a064:	23c1      	movs	r3, #193	; 0xc1
   2a066:	9300      	str	r3, [sp, #0]
   2a068:	ab03      	add	r3, sp, #12
   2a06a:	2110      	movs	r1, #16
   2a06c:	4808      	ldr	r0, [pc, #32]	; (2a090 <ble_store_config_persist_cccds+0x34>)
   2a06e:	f7ff ff23 	bl	29eb8 <ble_store_config_serialize_arr>
                                   sizeof *ble_store_config_cccds,
                                   ble_store_config_num_cccds,
                                   buf,
                                   sizeof buf);
    rc = conf_save_one("ble_hs/cccd", buf);
   2a072:	a903      	add	r1, sp, #12
   2a074:	4807      	ldr	r0, [pc, #28]	; (2a094 <ble_store_config_persist_cccds+0x38>)
   2a076:	f7e5 f895 	bl	f1a4 <conf_save_one>
    if (rc != 0) {
   2a07a:	4603      	mov	r3, r0
   2a07c:	b918      	cbnz	r0, 2a086 <ble_store_config_persist_cccds+0x2a>
        return BLE_HS_ESTORE_FAIL;
    }

    return 0;
}
   2a07e:	4618      	mov	r0, r3
   2a080:	b035      	add	sp, #212	; 0xd4
   2a082:	f85d fb04 	ldr.w	pc, [sp], #4
        return BLE_HS_ESTORE_FAIL;
   2a086:	231c      	movs	r3, #28
   2a088:	e7f9      	b.n	2a07e <ble_store_config_persist_cccds+0x22>
   2a08a:	bf00      	nop
   2a08c:	200042e8 	.word	0x200042e8
   2a090:	20004264 	.word	0x20004264
   2a094:	000328f4 	.word	0x000328f4

0002a098 <ble_store_config_conf_init>:

void
ble_store_config_conf_init(void)
{
   2a098:	b510      	push	{r4, lr}
   2a09a:	b082      	sub	sp, #8
    int rc;

    rc = conf_register(&ble_store_config_conf_handler);
   2a09c:	4809      	ldr	r0, [pc, #36]	; (2a0c4 <ble_store_config_conf_init+0x2c>)
   2a09e:	f7e5 f96f 	bl	f380 <conf_register>
    SYSINIT_PANIC_ASSERT_MSG(rc == 0,
   2a0a2:	b908      	cbnz	r0, 2a0a8 <ble_store_config_conf_init+0x10>
                             "Failed to register ble_store_config conf");
}
   2a0a4:	b002      	add	sp, #8
   2a0a6:	bd10      	pop	{r4, pc}
    SYSINIT_PANIC_ASSERT_MSG(rc == 0,
   2a0a8:	f7e2 f89e 	bl	c1e8 <hal_debugger_connected>
   2a0ac:	b100      	cbz	r0, 2a0b0 <ble_store_config_conf_init+0x18>
   2a0ae:	be01      	bkpt	0x0001
   2a0b0:	2000      	movs	r0, #0
   2a0b2:	9000      	str	r0, [sp, #0]
   2a0b4:	4b04      	ldr	r3, [pc, #16]	; (2a0c8 <ble_store_config_conf_init+0x30>)
   2a0b6:	681c      	ldr	r4, [r3, #0]
   2a0b8:	4603      	mov	r3, r0
   2a0ba:	4602      	mov	r2, r0
   2a0bc:	4601      	mov	r1, r0
   2a0be:	47a0      	blx	r4
}
   2a0c0:	e7f0      	b.n	2a0a4 <ble_store_config_conf_init+0xc>
   2a0c2:	bf00      	nop
   2a0c4:	200004b4 	.word	0x200004b4
   2a0c8:	20000298 	.word	0x20000298

0002a0cc <ble_hs_util_load_rand_addr>:
#include "controller/ble_hw.h"
#endif

static int
ble_hs_util_load_rand_addr(ble_addr_t *addr)
{
   2a0cc:	b508      	push	{r3, lr}
     * automically restore a random address.
     */
#if MYNEWT_VAL(BLE_CONTROLLER)
    int rc;

    rc = ble_hw_get_static_addr(addr);
   2a0ce:	f7f3 f985 	bl	1d3dc <ble_hw_get_static_addr>
    if (rc == 0) {
   2a0d2:	4603      	mov	r3, r0
   2a0d4:	b908      	cbnz	r0, 2a0da <ble_hs_util_load_rand_addr+0xe>
        return 0;
    }
#endif

    return BLE_HS_ENOADDR;
}
   2a0d6:	4618      	mov	r0, r3
   2a0d8:	bd08      	pop	{r3, pc}
    return BLE_HS_ENOADDR;
   2a0da:	2315      	movs	r3, #21
   2a0dc:	e7fb      	b.n	2a0d6 <ble_hs_util_load_rand_addr+0xa>

0002a0de <ble_hs_util_ensure_rand_addr>:

static int
ble_hs_util_ensure_rand_addr(void)
{
   2a0de:	b500      	push	{lr}
   2a0e0:	b083      	sub	sp, #12
    ble_addr_t addr;
    int rc;

    /* If we already have a random address, then we are done. */
    rc = ble_hs_id_copy_addr(BLE_ADDR_RANDOM, NULL, NULL);
   2a0e2:	2200      	movs	r2, #0
   2a0e4:	4611      	mov	r1, r2
   2a0e6:	2001      	movs	r0, #1
   2a0e8:	f7fb fa07 	bl	254fa <ble_hs_id_copy_addr>
    if (rc == 0) {
   2a0ec:	4603      	mov	r3, r0
   2a0ee:	b918      	cbnz	r0, 2a0f8 <ble_hs_util_ensure_rand_addr+0x1a>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   2a0f0:	4618      	mov	r0, r3
   2a0f2:	b003      	add	sp, #12
   2a0f4:	f85d fb04 	ldr.w	pc, [sp], #4
    rc = ble_hs_util_load_rand_addr(&addr);
   2a0f8:	4668      	mov	r0, sp
   2a0fa:	f7ff ffe7 	bl	2a0cc <ble_hs_util_load_rand_addr>
    if (rc != 0) {
   2a0fe:	4603      	mov	r3, r0
   2a100:	2800      	cmp	r0, #0
   2a102:	d1f5      	bne.n	2a0f0 <ble_hs_util_ensure_rand_addr+0x12>
    rc = ble_hs_id_set_rnd(addr.val);
   2a104:	f10d 0001 	add.w	r0, sp, #1
   2a108:	f7fb f972 	bl	253f0 <ble_hs_id_set_rnd>
   2a10c:	4603      	mov	r3, r0
   2a10e:	e7ef      	b.n	2a0f0 <ble_hs_util_ensure_rand_addr+0x12>

0002a110 <ble_hs_util_ensure_addr>:

int
ble_hs_util_ensure_addr(int prefer_random)
{
   2a110:	b508      	push	{r3, lr}
    int rc;

    if (prefer_random) {
   2a112:	b150      	cbz	r0, 2a12a <ble_hs_util_ensure_addr+0x1a>
        /* Try to load a random address. */
        rc = ble_hs_util_ensure_rand_addr();
   2a114:	f7ff ffe3 	bl	2a0de <ble_hs_util_ensure_rand_addr>
        if (rc == BLE_HS_ENOADDR) {
   2a118:	2815      	cmp	r0, #21
   2a11a:	d000      	beq.n	2a11e <ble_hs_util_ensure_addr+0xe>
            rc = ble_hs_util_ensure_rand_addr();
        }
    }

    return rc;
}
   2a11c:	bd08      	pop	{r3, pc}
            rc = ble_hs_id_copy_addr(BLE_ADDR_PUBLIC, NULL, NULL);
   2a11e:	2200      	movs	r2, #0
   2a120:	4611      	mov	r1, r2
   2a122:	4610      	mov	r0, r2
   2a124:	f7fb f9e9 	bl	254fa <ble_hs_id_copy_addr>
   2a128:	e7f8      	b.n	2a11c <ble_hs_util_ensure_addr+0xc>
        rc = ble_hs_id_copy_addr(BLE_ADDR_PUBLIC, NULL, NULL);
   2a12a:	2200      	movs	r2, #0
   2a12c:	4611      	mov	r1, r2
   2a12e:	4610      	mov	r0, r2
   2a130:	f7fb f9e3 	bl	254fa <ble_hs_id_copy_addr>
        if (rc == BLE_HS_ENOADDR) {
   2a134:	2815      	cmp	r0, #21
   2a136:	d1f1      	bne.n	2a11c <ble_hs_util_ensure_addr+0xc>
            rc = ble_hs_util_ensure_rand_addr();
   2a138:	f7ff ffd1 	bl	2a0de <ble_hs_util_ensure_rand_addr>
    return rc;
   2a13c:	e7ee      	b.n	2a11c <ble_hs_util_ensure_addr+0xc>
	...

0002a140 <ble_hci_trans_cfg_hs>:
void
ble_hci_trans_cfg_hs(ble_hci_trans_rx_cmd_fn *cmd_cb,
                     void *cmd_arg,
                     ble_hci_trans_rx_acl_fn *acl_cb,
                     void *acl_arg)
{
   2a140:	b410      	push	{r4}
    ble_hci_ram_rx_cmd_hs_cb = cmd_cb;
   2a142:	4c05      	ldr	r4, [pc, #20]	; (2a158 <ble_hci_trans_cfg_hs+0x18>)
   2a144:	6020      	str	r0, [r4, #0]
    ble_hci_ram_rx_cmd_hs_arg = cmd_arg;
   2a146:	4805      	ldr	r0, [pc, #20]	; (2a15c <ble_hci_trans_cfg_hs+0x1c>)
   2a148:	6001      	str	r1, [r0, #0]
    ble_hci_ram_rx_acl_hs_cb = acl_cb;
   2a14a:	4905      	ldr	r1, [pc, #20]	; (2a160 <ble_hci_trans_cfg_hs+0x20>)
   2a14c:	600a      	str	r2, [r1, #0]
    ble_hci_ram_rx_acl_hs_arg = acl_arg;
   2a14e:	4a05      	ldr	r2, [pc, #20]	; (2a164 <ble_hci_trans_cfg_hs+0x24>)
   2a150:	6013      	str	r3, [r2, #0]
}
   2a152:	bc10      	pop	{r4}
   2a154:	4770      	bx	lr
   2a156:	bf00      	nop
   2a158:	200032c0 	.word	0x200032c0
   2a15c:	200032bc 	.word	0x200032bc
   2a160:	200032b0 	.word	0x200032b0
   2a164:	200032ac 	.word	0x200032ac

0002a168 <ble_hci_trans_cfg_ll>:
void
ble_hci_trans_cfg_ll(ble_hci_trans_rx_cmd_fn *cmd_cb,
                     void *cmd_arg,
                     ble_hci_trans_rx_acl_fn *acl_cb,
                     void *acl_arg)
{
   2a168:	b410      	push	{r4}
    ble_hci_ram_rx_cmd_ll_cb = cmd_cb;
   2a16a:	4c05      	ldr	r4, [pc, #20]	; (2a180 <ble_hci_trans_cfg_ll+0x18>)
   2a16c:	6020      	str	r0, [r4, #0]
    ble_hci_ram_rx_cmd_ll_arg = cmd_arg;
   2a16e:	4805      	ldr	r0, [pc, #20]	; (2a184 <ble_hci_trans_cfg_ll+0x1c>)
   2a170:	6001      	str	r1, [r0, #0]
    ble_hci_ram_rx_acl_ll_cb = acl_cb;
   2a172:	4905      	ldr	r1, [pc, #20]	; (2a188 <ble_hci_trans_cfg_ll+0x20>)
   2a174:	600a      	str	r2, [r1, #0]
    ble_hci_ram_rx_acl_ll_arg = acl_arg;
   2a176:	4a05      	ldr	r2, [pc, #20]	; (2a18c <ble_hci_trans_cfg_ll+0x24>)
   2a178:	6013      	str	r3, [r2, #0]
}
   2a17a:	bc10      	pop	{r4}
   2a17c:	4770      	bx	lr
   2a17e:	bf00      	nop
   2a180:	200032c8 	.word	0x200032c8
   2a184:	200032c4 	.word	0x200032c4
   2a188:	200032b8 	.word	0x200032b8
   2a18c:	200032b4 	.word	0x200032b4

0002a190 <ble_hci_trans_hs_cmd_tx>:

int
ble_hci_trans_hs_cmd_tx(uint8_t *cmd)
{
   2a190:	b508      	push	{r3, lr}
    int rc;

    assert(ble_hci_ram_rx_cmd_ll_cb != NULL);
   2a192:	4b08      	ldr	r3, [pc, #32]	; (2a1b4 <ble_hci_trans_hs_cmd_tx+0x24>)
   2a194:	681b      	ldr	r3, [r3, #0]
   2a196:	b11b      	cbz	r3, 2a1a0 <ble_hci_trans_hs_cmd_tx+0x10>

    rc = ble_hci_ram_rx_cmd_ll_cb(cmd, ble_hci_ram_rx_cmd_ll_arg);
   2a198:	4a07      	ldr	r2, [pc, #28]	; (2a1b8 <ble_hci_trans_hs_cmd_tx+0x28>)
   2a19a:	6811      	ldr	r1, [r2, #0]
   2a19c:	4798      	blx	r3
    return rc;
}
   2a19e:	bd08      	pop	{r3, pc}
    assert(ble_hci_ram_rx_cmd_ll_cb != NULL);
   2a1a0:	f7e2 f822 	bl	c1e8 <hal_debugger_connected>
   2a1a4:	b100      	cbz	r0, 2a1a8 <ble_hci_trans_hs_cmd_tx+0x18>
   2a1a6:	be01      	bkpt	0x0001
   2a1a8:	2300      	movs	r3, #0
   2a1aa:	461a      	mov	r2, r3
   2a1ac:	4619      	mov	r1, r3
   2a1ae:	4618      	mov	r0, r3
   2a1b0:	f7e2 fcce 	bl	cb50 <__assert_func>
   2a1b4:	200032c8 	.word	0x200032c8
   2a1b8:	200032c4 	.word	0x200032c4

0002a1bc <ble_hci_trans_ll_evt_tx>:

int
ble_hci_trans_ll_evt_tx(uint8_t *hci_ev)
{
   2a1bc:	b508      	push	{r3, lr}
    int rc;

    assert(ble_hci_ram_rx_cmd_hs_cb != NULL);
   2a1be:	4b08      	ldr	r3, [pc, #32]	; (2a1e0 <ble_hci_trans_ll_evt_tx+0x24>)
   2a1c0:	681b      	ldr	r3, [r3, #0]
   2a1c2:	b11b      	cbz	r3, 2a1cc <ble_hci_trans_ll_evt_tx+0x10>

    rc = ble_hci_ram_rx_cmd_hs_cb(hci_ev, ble_hci_ram_rx_cmd_hs_arg);
   2a1c4:	4a07      	ldr	r2, [pc, #28]	; (2a1e4 <ble_hci_trans_ll_evt_tx+0x28>)
   2a1c6:	6811      	ldr	r1, [r2, #0]
   2a1c8:	4798      	blx	r3
    return rc;
}
   2a1ca:	bd08      	pop	{r3, pc}
    assert(ble_hci_ram_rx_cmd_hs_cb != NULL);
   2a1cc:	f7e2 f80c 	bl	c1e8 <hal_debugger_connected>
   2a1d0:	b100      	cbz	r0, 2a1d4 <ble_hci_trans_ll_evt_tx+0x18>
   2a1d2:	be01      	bkpt	0x0001
   2a1d4:	2300      	movs	r3, #0
   2a1d6:	461a      	mov	r2, r3
   2a1d8:	4619      	mov	r1, r3
   2a1da:	4618      	mov	r0, r3
   2a1dc:	f7e2 fcb8 	bl	cb50 <__assert_func>
   2a1e0:	200032c0 	.word	0x200032c0
   2a1e4:	200032bc 	.word	0x200032bc

0002a1e8 <ble_hci_trans_hs_acl_tx>:

int
ble_hci_trans_hs_acl_tx(struct os_mbuf *om)
{
   2a1e8:	b508      	push	{r3, lr}
    int rc;

    assert(ble_hci_ram_rx_acl_ll_cb != NULL);
   2a1ea:	4b08      	ldr	r3, [pc, #32]	; (2a20c <ble_hci_trans_hs_acl_tx+0x24>)
   2a1ec:	681b      	ldr	r3, [r3, #0]
   2a1ee:	b11b      	cbz	r3, 2a1f8 <ble_hci_trans_hs_acl_tx+0x10>

    rc = ble_hci_ram_rx_acl_ll_cb(om, ble_hci_ram_rx_acl_ll_arg);
   2a1f0:	4a07      	ldr	r2, [pc, #28]	; (2a210 <ble_hci_trans_hs_acl_tx+0x28>)
   2a1f2:	6811      	ldr	r1, [r2, #0]
   2a1f4:	4798      	blx	r3
    return rc;
}
   2a1f6:	bd08      	pop	{r3, pc}
    assert(ble_hci_ram_rx_acl_ll_cb != NULL);
   2a1f8:	f7e1 fff6 	bl	c1e8 <hal_debugger_connected>
   2a1fc:	b100      	cbz	r0, 2a200 <ble_hci_trans_hs_acl_tx+0x18>
   2a1fe:	be01      	bkpt	0x0001
   2a200:	2300      	movs	r3, #0
   2a202:	461a      	mov	r2, r3
   2a204:	4619      	mov	r1, r3
   2a206:	4618      	mov	r0, r3
   2a208:	f7e2 fca2 	bl	cb50 <__assert_func>
   2a20c:	200032b8 	.word	0x200032b8
   2a210:	200032b4 	.word	0x200032b4

0002a214 <ble_hci_trans_ll_acl_tx>:

int
ble_hci_trans_ll_acl_tx(struct os_mbuf *om)
{
   2a214:	b508      	push	{r3, lr}
    int rc;

    assert(ble_hci_ram_rx_acl_hs_cb != NULL);
   2a216:	4b08      	ldr	r3, [pc, #32]	; (2a238 <ble_hci_trans_ll_acl_tx+0x24>)
   2a218:	681b      	ldr	r3, [r3, #0]
   2a21a:	b11b      	cbz	r3, 2a224 <ble_hci_trans_ll_acl_tx+0x10>

    rc = ble_hci_ram_rx_acl_hs_cb(om, ble_hci_ram_rx_acl_hs_arg);
   2a21c:	4a07      	ldr	r2, [pc, #28]	; (2a23c <ble_hci_trans_ll_acl_tx+0x28>)
   2a21e:	6811      	ldr	r1, [r2, #0]
   2a220:	4798      	blx	r3
    return rc;
}
   2a222:	bd08      	pop	{r3, pc}
    assert(ble_hci_ram_rx_acl_hs_cb != NULL);
   2a224:	f7e1 ffe0 	bl	c1e8 <hal_debugger_connected>
   2a228:	b100      	cbz	r0, 2a22c <ble_hci_trans_ll_acl_tx+0x18>
   2a22a:	be01      	bkpt	0x0001
   2a22c:	2300      	movs	r3, #0
   2a22e:	461a      	mov	r2, r3
   2a230:	4619      	mov	r1, r3
   2a232:	4618      	mov	r0, r3
   2a234:	f7e2 fc8c 	bl	cb50 <__assert_func>
   2a238:	200032b0 	.word	0x200032b0
   2a23c:	200032ac 	.word	0x200032ac

0002a240 <ble_hci_trans_buf_alloc>:

uint8_t *
ble_hci_trans_buf_alloc(int type)
{
   2a240:	b508      	push	{r3, lr}
    uint8_t *buf;

    switch (type) {
   2a242:	2802      	cmp	r0, #2
   2a244:	d013      	beq.n	2a26e <ble_hci_trans_buf_alloc+0x2e>
   2a246:	2803      	cmp	r0, #3
   2a248:	d00b      	beq.n	2a262 <ble_hci_trans_buf_alloc+0x22>
   2a24a:	2801      	cmp	r0, #1
   2a24c:	d01a      	beq.n	2a284 <ble_hci_trans_buf_alloc+0x44>
    case BLE_HCI_TRANS_BUF_EVT_LO:
        buf = os_memblock_get(&ble_hci_ram_evt_lo_pool);
        break;

    default:
        assert(0);
   2a24e:	f7e1 ffcb 	bl	c1e8 <hal_debugger_connected>
   2a252:	b100      	cbz	r0, 2a256 <ble_hci_trans_buf_alloc+0x16>
   2a254:	be01      	bkpt	0x0001
   2a256:	2300      	movs	r3, #0
   2a258:	461a      	mov	r2, r3
   2a25a:	4619      	mov	r1, r3
   2a25c:	4618      	mov	r0, r3
   2a25e:	f7e2 fc77 	bl	cb50 <__assert_func>
        buf = os_memblock_get(&ble_hci_ram_cmd_pool);
   2a262:	480b      	ldr	r0, [pc, #44]	; (2a290 <ble_hci_trans_buf_alloc+0x50>)
   2a264:	f7e3 fcd2 	bl	dc0c <os_memblock_get>
   2a268:	4603      	mov	r3, r0
        buf = NULL;
    }

    return buf;
}
   2a26a:	4618      	mov	r0, r3
   2a26c:	bd08      	pop	{r3, pc}
        buf = os_memblock_get(&ble_hci_ram_evt_hi_pool);
   2a26e:	4809      	ldr	r0, [pc, #36]	; (2a294 <ble_hci_trans_buf_alloc+0x54>)
   2a270:	f7e3 fccc 	bl	dc0c <os_memblock_get>
        if (buf == NULL) {
   2a274:	4603      	mov	r3, r0
   2a276:	2800      	cmp	r0, #0
   2a278:	d1f7      	bne.n	2a26a <ble_hci_trans_buf_alloc+0x2a>
            buf = ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_LO);
   2a27a:	2001      	movs	r0, #1
   2a27c:	f7ff ffe0 	bl	2a240 <ble_hci_trans_buf_alloc>
   2a280:	4603      	mov	r3, r0
   2a282:	e7f2      	b.n	2a26a <ble_hci_trans_buf_alloc+0x2a>
        buf = os_memblock_get(&ble_hci_ram_evt_lo_pool);
   2a284:	4804      	ldr	r0, [pc, #16]	; (2a298 <ble_hci_trans_buf_alloc+0x58>)
   2a286:	f7e3 fcc1 	bl	dc0c <os_memblock_get>
   2a28a:	4603      	mov	r3, r0
        break;
   2a28c:	e7ed      	b.n	2a26a <ble_hci_trans_buf_alloc+0x2a>
   2a28e:	bf00      	nop
   2a290:	20002f88 	.word	0x20002f88
   2a294:	20003034 	.word	0x20003034
   2a298:	20003290 	.word	0x20003290

0002a29c <ble_hci_trans_buf_free>:

void
ble_hci_trans_buf_free(uint8_t *buf)
{
   2a29c:	b510      	push	{r4, lr}
   2a29e:	4604      	mov	r4, r0
    * response to the command. This was done to insure that the controller
    * could always send back one of these events when a command was received.
    * Thus, we check to see which pool the buffer came from so we can free
    * it to the appropriate pool
    */
    if (os_memblock_from(&ble_hci_ram_evt_hi_pool, buf)) {
   2a2a0:	4601      	mov	r1, r0
   2a2a2:	4824      	ldr	r0, [pc, #144]	; (2a334 <ble_hci_trans_buf_free+0x98>)
   2a2a4:	f7e3 fc93 	bl	dbce <os_memblock_from>
   2a2a8:	b178      	cbz	r0, 2a2ca <ble_hci_trans_buf_free+0x2e>
        rc = os_memblock_put(&ble_hci_ram_evt_hi_pool, buf);
   2a2aa:	4621      	mov	r1, r4
   2a2ac:	4821      	ldr	r0, [pc, #132]	; (2a334 <ble_hci_trans_buf_free+0x98>)
   2a2ae:	f7e3 fcd5 	bl	dc5c <os_memblock_put>
        assert(rc == 0);
   2a2b2:	b900      	cbnz	r0, 2a2b6 <ble_hci_trans_buf_free+0x1a>
    } else {
        assert(os_memblock_from(&ble_hci_ram_cmd_pool, buf));
        rc = os_memblock_put(&ble_hci_ram_cmd_pool, buf);
        assert(rc == 0);
    }
}
   2a2b4:	bd10      	pop	{r4, pc}
        assert(rc == 0);
   2a2b6:	f7e1 ff97 	bl	c1e8 <hal_debugger_connected>
   2a2ba:	b100      	cbz	r0, 2a2be <ble_hci_trans_buf_free+0x22>
   2a2bc:	be01      	bkpt	0x0001
   2a2be:	2300      	movs	r3, #0
   2a2c0:	461a      	mov	r2, r3
   2a2c2:	4619      	mov	r1, r3
   2a2c4:	4618      	mov	r0, r3
   2a2c6:	f7e2 fc43 	bl	cb50 <__assert_func>
    } else if (os_memblock_from(&ble_hci_ram_evt_lo_pool, buf)) {
   2a2ca:	4621      	mov	r1, r4
   2a2cc:	481a      	ldr	r0, [pc, #104]	; (2a338 <ble_hci_trans_buf_free+0x9c>)
   2a2ce:	f7e3 fc7e 	bl	dbce <os_memblock_from>
   2a2d2:	b178      	cbz	r0, 2a2f4 <ble_hci_trans_buf_free+0x58>
        rc = os_memblock_put(&ble_hci_ram_evt_lo_pool, buf);
   2a2d4:	4621      	mov	r1, r4
   2a2d6:	4818      	ldr	r0, [pc, #96]	; (2a338 <ble_hci_trans_buf_free+0x9c>)
   2a2d8:	f7e3 fcc0 	bl	dc5c <os_memblock_put>
        assert(rc == 0);
   2a2dc:	2800      	cmp	r0, #0
   2a2de:	d0e9      	beq.n	2a2b4 <ble_hci_trans_buf_free+0x18>
   2a2e0:	f7e1 ff82 	bl	c1e8 <hal_debugger_connected>
   2a2e4:	b100      	cbz	r0, 2a2e8 <ble_hci_trans_buf_free+0x4c>
   2a2e6:	be01      	bkpt	0x0001
   2a2e8:	2300      	movs	r3, #0
   2a2ea:	461a      	mov	r2, r3
   2a2ec:	4619      	mov	r1, r3
   2a2ee:	4618      	mov	r0, r3
   2a2f0:	f7e2 fc2e 	bl	cb50 <__assert_func>
        assert(os_memblock_from(&ble_hci_ram_cmd_pool, buf));
   2a2f4:	4621      	mov	r1, r4
   2a2f6:	4811      	ldr	r0, [pc, #68]	; (2a33c <ble_hci_trans_buf_free+0xa0>)
   2a2f8:	f7e3 fc69 	bl	dbce <os_memblock_from>
   2a2fc:	b178      	cbz	r0, 2a31e <ble_hci_trans_buf_free+0x82>
        rc = os_memblock_put(&ble_hci_ram_cmd_pool, buf);
   2a2fe:	4621      	mov	r1, r4
   2a300:	480e      	ldr	r0, [pc, #56]	; (2a33c <ble_hci_trans_buf_free+0xa0>)
   2a302:	f7e3 fcab 	bl	dc5c <os_memblock_put>
        assert(rc == 0);
   2a306:	2800      	cmp	r0, #0
   2a308:	d0d4      	beq.n	2a2b4 <ble_hci_trans_buf_free+0x18>
   2a30a:	f7e1 ff6d 	bl	c1e8 <hal_debugger_connected>
   2a30e:	b100      	cbz	r0, 2a312 <ble_hci_trans_buf_free+0x76>
   2a310:	be01      	bkpt	0x0001
   2a312:	2300      	movs	r3, #0
   2a314:	461a      	mov	r2, r3
   2a316:	4619      	mov	r1, r3
   2a318:	4618      	mov	r0, r3
   2a31a:	f7e2 fc19 	bl	cb50 <__assert_func>
        assert(os_memblock_from(&ble_hci_ram_cmd_pool, buf));
   2a31e:	f7e1 ff63 	bl	c1e8 <hal_debugger_connected>
   2a322:	b100      	cbz	r0, 2a326 <ble_hci_trans_buf_free+0x8a>
   2a324:	be01      	bkpt	0x0001
   2a326:	2300      	movs	r3, #0
   2a328:	461a      	mov	r2, r3
   2a32a:	4619      	mov	r1, r3
   2a32c:	4618      	mov	r0, r3
   2a32e:	f7e2 fc0f 	bl	cb50 <__assert_func>
   2a332:	bf00      	nop
   2a334:	20003034 	.word	0x20003034
   2a338:	20003290 	.word	0x20003290
   2a33c:	20002f88 	.word	0x20002f88

0002a340 <ble_hci_trans_reset>:
{
    /* No work to do.  All allocated buffers are owned by the host or
     * controller, and they will get freed by their owners.
     */
    return 0;
}
   2a340:	2000      	movs	r0, #0
   2a342:	4770      	bx	lr

0002a344 <ble_hci_ram_init>:

void
ble_hci_ram_init(void)
{
   2a344:	b510      	push	{r4, lr}
   2a346:	b082      	sub	sp, #8
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   2a348:	4b28      	ldr	r3, [pc, #160]	; (2a3ec <ble_hci_ram_init+0xa8>)
   2a34a:	781b      	ldrb	r3, [r3, #0]
   2a34c:	b1eb      	cbz	r3, 2a38a <ble_hci_ram_init+0x46>
     * Create memory pool of HCI command buffers. NOTE: we currently dont
     * allow this to be configured. The controller will only allow one
     * outstanding command. We decided to keep this a pool in case we allow
     * allow the controller to handle more than one outstanding command.
     */
    rc = os_mempool_init(&ble_hci_ram_cmd_pool,
   2a34e:	4b28      	ldr	r3, [pc, #160]	; (2a3f0 <ble_hci_ram_init+0xac>)
   2a350:	9300      	str	r3, [sp, #0]
   2a352:	4b28      	ldr	r3, [pc, #160]	; (2a3f4 <ble_hci_ram_init+0xb0>)
   2a354:	f44f 7282 	mov.w	r2, #260	; 0x104
   2a358:	2101      	movs	r1, #1
   2a35a:	4827      	ldr	r0, [pc, #156]	; (2a3f8 <ble_hci_ram_init+0xb4>)
   2a35c:	f7e3 fc12 	bl	db84 <os_mempool_init>
                         1,
                         BLE_HCI_TRANS_CMD_SZ,
                         ble_hci_ram_cmd_buf,
                         "ble_hci_ram_cmd_pool");
    SYSINIT_PANIC_ASSERT(rc == 0);
   2a360:	b9e8      	cbnz	r0, 2a39e <ble_hci_ram_init+0x5a>

    rc = os_mempool_init(&ble_hci_ram_evt_hi_pool,
   2a362:	4b26      	ldr	r3, [pc, #152]	; (2a3fc <ble_hci_ram_init+0xb8>)
   2a364:	9300      	str	r3, [sp, #0]
   2a366:	4b26      	ldr	r3, [pc, #152]	; (2a400 <ble_hci_ram_init+0xbc>)
   2a368:	2246      	movs	r2, #70	; 0x46
   2a36a:	2102      	movs	r1, #2
   2a36c:	4825      	ldr	r0, [pc, #148]	; (2a404 <ble_hci_ram_init+0xc0>)
   2a36e:	f7e3 fc09 	bl	db84 <os_mempool_init>
                         MYNEWT_VAL(BLE_HCI_EVT_HI_BUF_COUNT),
                         MYNEWT_VAL(BLE_HCI_EVT_BUF_SIZE),
                         ble_hci_ram_evt_hi_buf,
                         "ble_hci_ram_evt_hi_pool");
    SYSINIT_PANIC_ASSERT(rc == 0);
   2a372:	bb08      	cbnz	r0, 2a3b8 <ble_hci_ram_init+0x74>

    rc = os_mempool_init(&ble_hci_ram_evt_lo_pool,
   2a374:	4b24      	ldr	r3, [pc, #144]	; (2a408 <ble_hci_ram_init+0xc4>)
   2a376:	9300      	str	r3, [sp, #0]
   2a378:	4b24      	ldr	r3, [pc, #144]	; (2a40c <ble_hci_ram_init+0xc8>)
   2a37a:	2246      	movs	r2, #70	; 0x46
   2a37c:	2108      	movs	r1, #8
   2a37e:	4824      	ldr	r0, [pc, #144]	; (2a410 <ble_hci_ram_init+0xcc>)
   2a380:	f7e3 fc00 	bl	db84 <os_mempool_init>
                         MYNEWT_VAL(BLE_HCI_EVT_LO_BUF_COUNT),
                         MYNEWT_VAL(BLE_HCI_EVT_BUF_SIZE),
                         ble_hci_ram_evt_lo_buf,
                         "ble_hci_ram_evt_lo_pool");
    SYSINIT_PANIC_ASSERT(rc == 0);
   2a384:	bb28      	cbnz	r0, 2a3d2 <ble_hci_ram_init+0x8e>
}
   2a386:	b002      	add	sp, #8
   2a388:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   2a38a:	f7e1 ff2d 	bl	c1e8 <hal_debugger_connected>
   2a38e:	b100      	cbz	r0, 2a392 <ble_hci_ram_init+0x4e>
   2a390:	be01      	bkpt	0x0001
   2a392:	2300      	movs	r3, #0
   2a394:	461a      	mov	r2, r3
   2a396:	4619      	mov	r1, r3
   2a398:	4618      	mov	r0, r3
   2a39a:	f7e2 fbd9 	bl	cb50 <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
   2a39e:	f7e1 ff23 	bl	c1e8 <hal_debugger_connected>
   2a3a2:	b100      	cbz	r0, 2a3a6 <ble_hci_ram_init+0x62>
   2a3a4:	be01      	bkpt	0x0001
   2a3a6:	2000      	movs	r0, #0
   2a3a8:	9000      	str	r0, [sp, #0]
   2a3aa:	4b1a      	ldr	r3, [pc, #104]	; (2a414 <ble_hci_ram_init+0xd0>)
   2a3ac:	681c      	ldr	r4, [r3, #0]
   2a3ae:	4603      	mov	r3, r0
   2a3b0:	4602      	mov	r2, r0
   2a3b2:	4601      	mov	r1, r0
   2a3b4:	47a0      	blx	r4
   2a3b6:	e7d4      	b.n	2a362 <ble_hci_ram_init+0x1e>
    SYSINIT_PANIC_ASSERT(rc == 0);
   2a3b8:	f7e1 ff16 	bl	c1e8 <hal_debugger_connected>
   2a3bc:	b100      	cbz	r0, 2a3c0 <ble_hci_ram_init+0x7c>
   2a3be:	be01      	bkpt	0x0001
   2a3c0:	2000      	movs	r0, #0
   2a3c2:	9000      	str	r0, [sp, #0]
   2a3c4:	4b13      	ldr	r3, [pc, #76]	; (2a414 <ble_hci_ram_init+0xd0>)
   2a3c6:	681c      	ldr	r4, [r3, #0]
   2a3c8:	4603      	mov	r3, r0
   2a3ca:	4602      	mov	r2, r0
   2a3cc:	4601      	mov	r1, r0
   2a3ce:	47a0      	blx	r4
   2a3d0:	e7d0      	b.n	2a374 <ble_hci_ram_init+0x30>
    SYSINIT_PANIC_ASSERT(rc == 0);
   2a3d2:	f7e1 ff09 	bl	c1e8 <hal_debugger_connected>
   2a3d6:	b100      	cbz	r0, 2a3da <ble_hci_ram_init+0x96>
   2a3d8:	be01      	bkpt	0x0001
   2a3da:	2000      	movs	r0, #0
   2a3dc:	9000      	str	r0, [sp, #0]
   2a3de:	4b0d      	ldr	r3, [pc, #52]	; (2a414 <ble_hci_ram_init+0xd0>)
   2a3e0:	681c      	ldr	r4, [r3, #0]
   2a3e2:	4603      	mov	r3, r0
   2a3e4:	4602      	mov	r2, r0
   2a3e6:	4601      	mov	r1, r0
   2a3e8:	47a0      	blx	r4
}
   2a3ea:	e7cc      	b.n	2a386 <ble_hci_ram_init+0x42>
   2a3ec:	20003584 	.word	0x20003584
   2a3f0:	0003291c 	.word	0x0003291c
   2a3f4:	20002e84 	.word	0x20002e84
   2a3f8:	20002f88 	.word	0x20002f88
   2a3fc:	00032934 	.word	0x00032934
   2a400:	20002fa4 	.word	0x20002fa4
   2a404:	20003034 	.word	0x20003034
   2a408:	0003294c 	.word	0x0003294c
   2a40c:	20003050 	.word	0x20003050
   2a410:	20003290 	.word	0x20003290
   2a414:	20000298 	.word	0x20000298

0002a418 <boot_flag_decode>:
}

static int
boot_flag_decode(uint8_t flag)
{
    if (flag != BOOT_FLAG_SET) {
   2a418:	2801      	cmp	r0, #1
   2a41a:	d101      	bne.n	2a420 <boot_flag_decode+0x8>
        return BOOT_FLAG_BAD;
    }
    return BOOT_FLAG_SET;
   2a41c:	2001      	movs	r0, #1
}
   2a41e:	4770      	bx	lr
        return BOOT_FLAG_BAD;
   2a420:	2002      	movs	r0, #2
   2a422:	4770      	bx	lr

0002a424 <boot_magic_decode>:
{
   2a424:	b508      	push	{r3, lr}
    if (memcmp(magic, boot_img_magic, BOOT_MAGIC_SZ) == 0) {
   2a426:	2210      	movs	r2, #16
   2a428:	4903      	ldr	r1, [pc, #12]	; (2a438 <boot_magic_decode+0x14>)
   2a42a:	f7e4 fa95 	bl	e958 <memcmp>
   2a42e:	b908      	cbnz	r0, 2a434 <boot_magic_decode+0x10>
        return BOOT_MAGIC_GOOD;
   2a430:	2001      	movs	r0, #1
}
   2a432:	bd08      	pop	{r3, pc}
    return BOOT_MAGIC_BAD;
   2a434:	2002      	movs	r0, #2
   2a436:	e7fc      	b.n	2a432 <boot_magic_decode+0xe>
   2a438:	00032964 	.word	0x00032964

0002a43c <boot_write_trailer>:
 * @returns 0 on success, != 0 on error.
 */
static int
boot_write_trailer(const struct flash_area *fap, uint32_t off,
        const uint8_t *inbuf, uint8_t inlen)
{
   2a43c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2a440:	b083      	sub	sp, #12
   2a442:	4606      	mov	r6, r0
   2a444:	460f      	mov	r7, r1
   2a446:	4690      	mov	r8, r2
   2a448:	461c      	mov	r4, r3
    uint8_t buf[BOOT_MAX_ALIGN];
    uint8_t align;
    uint8_t erased_val;
    int rc;

    align = flash_area_align(fap);
   2a44a:	f7e6 fb64 	bl	10b16 <flash_area_align>
    if (inlen > BOOT_MAX_ALIGN || align > BOOT_MAX_ALIGN) {
   2a44e:	2c08      	cmp	r4, #8
   2a450:	d823      	bhi.n	2a49a <boot_write_trailer+0x5e>
   2a452:	4605      	mov	r5, r0
   2a454:	2808      	cmp	r0, #8
   2a456:	d823      	bhi.n	2a4a0 <boot_write_trailer+0x64>
        return -1;
    }
    erased_val = flash_area_erased_val(fap);
   2a458:	4630      	mov	r0, r6
   2a45a:	f7e6 fb61 	bl	10b20 <flash_area_erased_val>
   2a45e:	4681      	mov	r9, r0
    if (align < inlen) {
   2a460:	42a5      	cmp	r5, r4
   2a462:	d200      	bcs.n	2a466 <boot_write_trailer+0x2a>
        align = inlen;
   2a464:	4625      	mov	r5, r4
    }
    memcpy(buf, inbuf, inlen);
   2a466:	4622      	mov	r2, r4
   2a468:	4641      	mov	r1, r8
   2a46a:	4668      	mov	r0, sp
   2a46c:	f7e4 fa98 	bl	e9a0 <memcpy>
    memset(&buf[inlen], erased_val, align - inlen);
   2a470:	1b2a      	subs	r2, r5, r4
   2a472:	fa5f f189 	uxtb.w	r1, r9
   2a476:	eb0d 0004 	add.w	r0, sp, r4
   2a47a:	f7e4 fab9 	bl	e9f0 <memset>

    rc = flash_area_write(fap, off, buf, align);
   2a47e:	462b      	mov	r3, r5
   2a480:	466a      	mov	r2, sp
   2a482:	4639      	mov	r1, r7
   2a484:	4630      	mov	r0, r6
   2a486:	f7e6 fb20 	bl	10aca <flash_area_write>
    if (rc != 0) {
   2a48a:	4603      	mov	r3, r0
   2a48c:	b918      	cbnz	r0, 2a496 <boot_write_trailer+0x5a>
        return BOOT_EFLASH;
    }

    return 0;
}
   2a48e:	4618      	mov	r0, r3
   2a490:	b003      	add	sp, #12
   2a492:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return BOOT_EFLASH;
   2a496:	2301      	movs	r3, #1
   2a498:	e7f9      	b.n	2a48e <boot_write_trailer+0x52>
        return -1;
   2a49a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2a49e:	e7f6      	b.n	2a48e <boot_write_trailer+0x52>
   2a4a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2a4a4:	e7f3      	b.n	2a48e <boot_write_trailer+0x52>

0002a4a6 <boot_write_trailer_flag>:

static int
boot_write_trailer_flag(const struct flash_area *fap, uint32_t off,
        uint8_t flag_val)
{
   2a4a6:	b510      	push	{r4, lr}
   2a4a8:	b082      	sub	sp, #8
    const uint8_t buf[1] = { flag_val };
   2a4aa:	ac02      	add	r4, sp, #8
   2a4ac:	f804 2d04 	strb.w	r2, [r4, #-4]!
    return boot_write_trailer(fap, off, buf, 1);
   2a4b0:	2301      	movs	r3, #1
   2a4b2:	4622      	mov	r2, r4
   2a4b4:	f7ff ffc2 	bl	2a43c <boot_write_trailer>
}
   2a4b8:	b002      	add	sp, #8
   2a4ba:	bd10      	pop	{r4, pc}

0002a4bc <boot_magic_compatible_check>:
    switch (tbl_val) {
   2a4bc:	2804      	cmp	r0, #4
   2a4be:	d00b      	beq.n	2a4d8 <boot_magic_compatible_check+0x1c>
   2a4c0:	2805      	cmp	r0, #5
   2a4c2:	d104      	bne.n	2a4ce <boot_magic_compatible_check+0x12>
        return val != BOOT_MAGIC_GOOD;
   2a4c4:	f111 30ff 	adds.w	r0, r1, #4294967295	; 0xffffffff
   2a4c8:	bf18      	it	ne
   2a4ca:	2001      	movne	r0, #1
   2a4cc:	4770      	bx	lr
        return tbl_val == val;
   2a4ce:	4288      	cmp	r0, r1
   2a4d0:	bf14      	ite	ne
   2a4d2:	2000      	movne	r0, #0
   2a4d4:	2001      	moveq	r0, #1
   2a4d6:	4770      	bx	lr
        return 1;
   2a4d8:	2001      	movs	r0, #1
}
   2a4da:	4770      	bx	lr

0002a4dc <boot_swap_info_off>:
    return fap->fa_size - BOOT_MAGIC_SZ;
   2a4dc:	6880      	ldr	r0, [r0, #8]
}
   2a4de:	3828      	subs	r0, #40	; 0x28
   2a4e0:	4770      	bx	lr

0002a4e2 <boot_read_swap_state>:
{
   2a4e2:	b530      	push	{r4, r5, lr}
   2a4e4:	b087      	sub	sp, #28
   2a4e6:	4604      	mov	r4, r0
   2a4e8:	460d      	mov	r5, r1
    return fap->fa_size - BOOT_MAGIC_SZ;
   2a4ea:	6881      	ldr	r1, [r0, #8]
    rc = flash_area_read_is_empty(fap, off, magic, BOOT_MAGIC_SZ);
   2a4ec:	2310      	movs	r3, #16
   2a4ee:	aa02      	add	r2, sp, #8
   2a4f0:	3910      	subs	r1, #16
   2a4f2:	f7e6 fb2d 	bl	10b50 <flash_area_read_is_empty>
    if (rc < 0) {
   2a4f6:	2800      	cmp	r0, #0
   2a4f8:	db4a      	blt.n	2a590 <boot_read_swap_state+0xae>
    if (rc == 1) {
   2a4fa:	2801      	cmp	r0, #1
   2a4fc:	d03e      	beq.n	2a57c <boot_read_swap_state+0x9a>
        state->magic = boot_magic_decode(magic);
   2a4fe:	a802      	add	r0, sp, #8
   2a500:	f7ff ff90 	bl	2a424 <boot_magic_decode>
   2a504:	7028      	strb	r0, [r5, #0]
    off = boot_swap_info_off(fap);
   2a506:	4620      	mov	r0, r4
   2a508:	f7ff ffe8 	bl	2a4dc <boot_swap_info_off>
    rc = flash_area_read_is_empty(fap, off, &swap_info, sizeof swap_info);
   2a50c:	2301      	movs	r3, #1
   2a50e:	f10d 0207 	add.w	r2, sp, #7
   2a512:	4601      	mov	r1, r0
   2a514:	4620      	mov	r0, r4
   2a516:	f7e6 fb1b 	bl	10b50 <flash_area_read_is_empty>
    if (rc < 0) {
   2a51a:	2800      	cmp	r0, #0
   2a51c:	db3b      	blt.n	2a596 <boot_read_swap_state+0xb4>
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
   2a51e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2a522:	f003 020f 	and.w	r2, r3, #15
   2a526:	706a      	strb	r2, [r5, #1]
    state->image_num = BOOT_GET_IMAGE_NUM(swap_info);
   2a528:	091b      	lsrs	r3, r3, #4
   2a52a:	712b      	strb	r3, [r5, #4]
    if (rc == 1 || state->swap_type > BOOT_SWAP_TYPE_REVERT) {
   2a52c:	2801      	cmp	r0, #1
   2a52e:	d001      	beq.n	2a534 <boot_read_swap_state+0x52>
   2a530:	2a04      	cmp	r2, #4
   2a532:	d903      	bls.n	2a53c <boot_read_swap_state+0x5a>
        state->swap_type = BOOT_SWAP_TYPE_NONE;
   2a534:	2301      	movs	r3, #1
   2a536:	706b      	strb	r3, [r5, #1]
        state->image_num = 0;
   2a538:	2300      	movs	r3, #0
   2a53a:	712b      	strb	r3, [r5, #4]
    return fap->fa_size - BOOT_MAGIC_SZ;
   2a53c:	68a1      	ldr	r1, [r4, #8]
    rc = flash_area_read_is_empty(fap, off, &state->copy_done,
   2a53e:	2301      	movs	r3, #1
   2a540:	1caa      	adds	r2, r5, #2
   2a542:	3920      	subs	r1, #32
   2a544:	4620      	mov	r0, r4
   2a546:	f7e6 fb03 	bl	10b50 <flash_area_read_is_empty>
    if (rc < 0) {
   2a54a:	2800      	cmp	r0, #0
   2a54c:	db25      	blt.n	2a59a <boot_read_swap_state+0xb8>
    if (rc == 1) {
   2a54e:	2801      	cmp	r0, #1
   2a550:	d017      	beq.n	2a582 <boot_read_swap_state+0xa0>
        state->copy_done = boot_flag_decode(state->copy_done);
   2a552:	78a8      	ldrb	r0, [r5, #2]
   2a554:	f7ff ff60 	bl	2a418 <boot_flag_decode>
   2a558:	70a8      	strb	r0, [r5, #2]
    return fap->fa_size - BOOT_MAGIC_SZ;
   2a55a:	68a1      	ldr	r1, [r4, #8]
    rc = flash_area_read_is_empty(fap, off, &state->image_ok,
   2a55c:	2301      	movs	r3, #1
   2a55e:	1cea      	adds	r2, r5, #3
   2a560:	3918      	subs	r1, #24
   2a562:	4620      	mov	r0, r4
   2a564:	f7e6 faf4 	bl	10b50 <flash_area_read_is_empty>
    if (rc < 0) {
   2a568:	2800      	cmp	r0, #0
   2a56a:	db18      	blt.n	2a59e <boot_read_swap_state+0xbc>
    if (rc == 1) {
   2a56c:	2801      	cmp	r0, #1
   2a56e:	d00b      	beq.n	2a588 <boot_read_swap_state+0xa6>
        state->image_ok = boot_flag_decode(state->image_ok);
   2a570:	78e8      	ldrb	r0, [r5, #3]
   2a572:	f7ff ff51 	bl	2a418 <boot_flag_decode>
   2a576:	70e8      	strb	r0, [r5, #3]
    return 0;
   2a578:	2000      	movs	r0, #0
   2a57a:	e00a      	b.n	2a592 <boot_read_swap_state+0xb0>
        state->magic = BOOT_MAGIC_UNSET;
   2a57c:	2303      	movs	r3, #3
   2a57e:	702b      	strb	r3, [r5, #0]
   2a580:	e7c1      	b.n	2a506 <boot_read_swap_state+0x24>
        state->copy_done = BOOT_FLAG_UNSET;
   2a582:	2303      	movs	r3, #3
   2a584:	70ab      	strb	r3, [r5, #2]
   2a586:	e7e8      	b.n	2a55a <boot_read_swap_state+0x78>
        state->image_ok = BOOT_FLAG_UNSET;
   2a588:	2303      	movs	r3, #3
   2a58a:	70eb      	strb	r3, [r5, #3]
    return 0;
   2a58c:	2000      	movs	r0, #0
   2a58e:	e000      	b.n	2a592 <boot_read_swap_state+0xb0>
        return BOOT_EFLASH;
   2a590:	2001      	movs	r0, #1
}
   2a592:	b007      	add	sp, #28
   2a594:	bd30      	pop	{r4, r5, pc}
        return BOOT_EFLASH;
   2a596:	2001      	movs	r0, #1
   2a598:	e7fb      	b.n	2a592 <boot_read_swap_state+0xb0>
        return BOOT_EFLASH;
   2a59a:	2001      	movs	r0, #1
   2a59c:	e7f9      	b.n	2a592 <boot_read_swap_state+0xb0>
        return BOOT_EFLASH;
   2a59e:	2001      	movs	r0, #1
   2a5a0:	e7f7      	b.n	2a592 <boot_read_swap_state+0xb0>

0002a5a2 <boot_read_swap_state_by_id>:
{
   2a5a2:	b510      	push	{r4, lr}
   2a5a4:	b082      	sub	sp, #8
   2a5a6:	460c      	mov	r4, r1
    rc = flash_area_open(flash_area_id, &fap);
   2a5a8:	a901      	add	r1, sp, #4
   2a5aa:	b2c0      	uxtb	r0, r0
   2a5ac:	f7e6 fa22 	bl	109f4 <flash_area_open>
    if (rc != 0) {
   2a5b0:	b110      	cbz	r0, 2a5b8 <boot_read_swap_state_by_id+0x16>
        return BOOT_EFLASH;
   2a5b2:	2001      	movs	r0, #1
}
   2a5b4:	b002      	add	sp, #8
   2a5b6:	bd10      	pop	{r4, pc}
    rc = boot_read_swap_state(fap, state);
   2a5b8:	4621      	mov	r1, r4
   2a5ba:	9801      	ldr	r0, [sp, #4]
   2a5bc:	f7ff ff91 	bl	2a4e2 <boot_read_swap_state>
    return rc;
   2a5c0:	e7f8      	b.n	2a5b4 <boot_read_swap_state_by_id+0x12>
	...

0002a5c4 <boot_write_magic>:
{
   2a5c4:	b508      	push	{r3, lr}
    return fap->fa_size - BOOT_MAGIC_SZ;
   2a5c6:	6881      	ldr	r1, [r0, #8]
    rc = flash_area_write(fap, off, boot_img_magic, BOOT_MAGIC_SZ);
   2a5c8:	2310      	movs	r3, #16
   2a5ca:	4a05      	ldr	r2, [pc, #20]	; (2a5e0 <boot_write_magic+0x1c>)
   2a5cc:	3910      	subs	r1, #16
   2a5ce:	f7e6 fa7c 	bl	10aca <flash_area_write>
    if (rc != 0) {
   2a5d2:	4603      	mov	r3, r0
   2a5d4:	b908      	cbnz	r0, 2a5da <boot_write_magic+0x16>
}
   2a5d6:	4618      	mov	r0, r3
   2a5d8:	bd08      	pop	{r3, pc}
        return BOOT_EFLASH;
   2a5da:	2301      	movs	r3, #1
   2a5dc:	e7fb      	b.n	2a5d6 <boot_write_magic+0x12>
   2a5de:	bf00      	nop
   2a5e0:	00032964 	.word	0x00032964

0002a5e4 <boot_write_image_ok>:
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
}

int
boot_write_image_ok(const struct flash_area *fap)
{
   2a5e4:	b508      	push	{r3, lr}
    return fap->fa_size - BOOT_MAGIC_SZ;
   2a5e6:	6881      	ldr	r1, [r0, #8]

    off = boot_image_ok_off(fap);
    BOOT_LOG_DBG("writing image_ok; fa_id=%d off=0x%lx (0x%lx)",
                 fap->fa_id, (unsigned long)off,
                 (unsigned long)(fap->fa_off + off));
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
   2a5e8:	2201      	movs	r2, #1
   2a5ea:	3918      	subs	r1, #24
   2a5ec:	f7ff ff5b 	bl	2a4a6 <boot_write_trailer_flag>
}
   2a5f0:	bd08      	pop	{r3, pc}

0002a5f2 <boot_write_swap_info>:
 * resume in case of an unexpected reset.
 */
int
boot_write_swap_info(const struct flash_area *fap, uint8_t swap_type,
                     uint8_t image_num)
{
   2a5f2:	b530      	push	{r4, r5, lr}
   2a5f4:	b083      	sub	sp, #12
    uint32_t off;
    uint8_t swap_info;

    BOOT_SET_SWAP_INFO(swap_info, image_num, swap_type);
   2a5f6:	2a0e      	cmp	r2, #14
   2a5f8:	d811      	bhi.n	2a61e <boot_write_swap_info+0x2c>
   2a5fa:	4605      	mov	r5, r0
   2a5fc:	290e      	cmp	r1, #14
   2a5fe:	d818      	bhi.n	2a632 <boot_write_swap_info+0x40>
   2a600:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
   2a604:	ac02      	add	r4, sp, #8
   2a606:	f804 1d01 	strb.w	r1, [r4, #-1]!
    off = boot_swap_info_off(fap);
   2a60a:	f7ff ff67 	bl	2a4dc <boot_swap_info_off>
    BOOT_LOG_DBG("writing swap_info; fa_id=%d off=0x%lx (0x%lx), swap_type=0x%x"
                 " image_num=0x%x",
                 fap->fa_id, (unsigned long)off,
                 (unsigned long)(fap->fa_off + off), swap_type, image_num);
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
   2a60e:	2301      	movs	r3, #1
   2a610:	4622      	mov	r2, r4
   2a612:	4601      	mov	r1, r0
   2a614:	4628      	mov	r0, r5
   2a616:	f7ff ff11 	bl	2a43c <boot_write_trailer>
}
   2a61a:	b003      	add	sp, #12
   2a61c:	bd30      	pop	{r4, r5, pc}
    BOOT_SET_SWAP_INFO(swap_info, image_num, swap_type);
   2a61e:	f7e1 fde3 	bl	c1e8 <hal_debugger_connected>
   2a622:	b100      	cbz	r0, 2a626 <boot_write_swap_info+0x34>
   2a624:	be01      	bkpt	0x0001
   2a626:	2300      	movs	r3, #0
   2a628:	461a      	mov	r2, r3
   2a62a:	4619      	mov	r1, r3
   2a62c:	4618      	mov	r0, r3
   2a62e:	f7e2 fa8f 	bl	cb50 <__assert_func>
   2a632:	f7e1 fdd9 	bl	c1e8 <hal_debugger_connected>
   2a636:	b100      	cbz	r0, 2a63a <boot_write_swap_info+0x48>
   2a638:	be01      	bkpt	0x0001
   2a63a:	2300      	movs	r3, #0
   2a63c:	461a      	mov	r2, r3
   2a63e:	4619      	mov	r1, r3
   2a640:	4618      	mov	r0, r3
   2a642:	f7e2 fa85 	bl	cb50 <__assert_func>
	...

0002a648 <boot_swap_type_multi>:
}
#endif

int
boot_swap_type_multi(int image_index)
{
   2a648:	b530      	push	{r4, r5, lr}
   2a64a:	b085      	sub	sp, #20
    struct boot_swap_state primary_slot;
    struct boot_swap_state secondary_slot;
    int rc;
    size_t i;

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
   2a64c:	a902      	add	r1, sp, #8
   2a64e:	2001      	movs	r0, #1
   2a650:	f7ff ffa7 	bl	2a5a2 <boot_read_swap_state_by_id>
                                    &primary_slot);
    if (rc) {
   2a654:	2800      	cmp	r0, #0
   2a656:	d13c      	bne.n	2a6d2 <boot_swap_type_multi+0x8a>
        return BOOT_SWAP_TYPE_PANIC;
    }

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
   2a658:	4669      	mov	r1, sp
   2a65a:	2002      	movs	r0, #2
   2a65c:	f7ff ffa1 	bl	2a5a2 <boot_read_swap_state_by_id>
                                    &secondary_slot);
    if (rc) {
   2a660:	2800      	cmp	r0, #0
   2a662:	d139      	bne.n	2a6d8 <boot_swap_type_multi+0x90>
        return BOOT_SWAP_TYPE_PANIC;
    }

    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
   2a664:	2400      	movs	r4, #0
   2a666:	e007      	b.n	2a678 <boot_swap_type_multi+0x30>
                                        secondary_slot.magic) &&
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
                table->image_ok_primary_slot == primary_slot.image_ok) &&
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
   2a668:	792b      	ldrb	r3, [r5, #4]
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
   2a66a:	2b04      	cmp	r3, #4
   2a66c:	d028      	beq.n	2a6c0 <boot_swap_type_multi+0x78>
                table->copy_done_primary_slot == primary_slot.copy_done)) {
   2a66e:	f89d 200a 	ldrb.w	r2, [sp, #10]
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
   2a672:	4293      	cmp	r3, r2
   2a674:	d024      	beq.n	2a6c0 <boot_swap_type_multi+0x78>
    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
   2a676:	3401      	adds	r4, #1
   2a678:	2c02      	cmp	r4, #2
   2a67a:	d828      	bhi.n	2a6ce <boot_swap_type_multi+0x86>
        table = boot_swap_tables + i;
   2a67c:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   2a680:	0053      	lsls	r3, r2, #1
   2a682:	4a16      	ldr	r2, [pc, #88]	; (2a6dc <boot_swap_type_multi+0x94>)
   2a684:	18d5      	adds	r5, r2, r3
        if (boot_magic_compatible_check(table->magic_primary_slot,
   2a686:	f89d 1008 	ldrb.w	r1, [sp, #8]
   2a68a:	5cd0      	ldrb	r0, [r2, r3]
   2a68c:	f7ff ff16 	bl	2a4bc <boot_magic_compatible_check>
   2a690:	2800      	cmp	r0, #0
   2a692:	d0f0      	beq.n	2a676 <boot_swap_type_multi+0x2e>
            boot_magic_compatible_check(table->magic_secondary_slot,
   2a694:	f89d 1000 	ldrb.w	r1, [sp]
   2a698:	7868      	ldrb	r0, [r5, #1]
   2a69a:	f7ff ff0f 	bl	2a4bc <boot_magic_compatible_check>
                                        primary_slot.magic) &&
   2a69e:	2800      	cmp	r0, #0
   2a6a0:	d0e9      	beq.n	2a676 <boot_swap_type_multi+0x2e>
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
   2a6a2:	78ab      	ldrb	r3, [r5, #2]
                                        secondary_slot.magic) &&
   2a6a4:	2b04      	cmp	r3, #4
   2a6a6:	d003      	beq.n	2a6b0 <boot_swap_type_multi+0x68>
                table->image_ok_primary_slot == primary_slot.image_ok) &&
   2a6a8:	f89d 200b 	ldrb.w	r2, [sp, #11]
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
   2a6ac:	4293      	cmp	r3, r2
   2a6ae:	d1e2      	bne.n	2a676 <boot_swap_type_multi+0x2e>
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
   2a6b0:	78eb      	ldrb	r3, [r5, #3]
                table->image_ok_primary_slot == primary_slot.image_ok) &&
   2a6b2:	2b04      	cmp	r3, #4
   2a6b4:	d0d8      	beq.n	2a668 <boot_swap_type_multi+0x20>
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
   2a6b6:	f89d 2003 	ldrb.w	r2, [sp, #3]
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
   2a6ba:	4293      	cmp	r3, r2
   2a6bc:	d1db      	bne.n	2a676 <boot_swap_type_multi+0x2e>
   2a6be:	e7d3      	b.n	2a668 <boot_swap_type_multi+0x20>
            BOOT_LOG_INF("Swap type: %s",
   2a6c0:	7968      	ldrb	r0, [r5, #5]
                         table->swap_type == BOOT_SWAP_TYPE_TEST   ? "test"   :
                         table->swap_type == BOOT_SWAP_TYPE_PERM   ? "perm"   :
                         table->swap_type == BOOT_SWAP_TYPE_REVERT ? "revert" :
                         "BUG; can't happen");
            if (table->swap_type != BOOT_SWAP_TYPE_TEST &&
                    table->swap_type != BOOT_SWAP_TYPE_PERM &&
   2a6c2:	1e83      	subs	r3, r0, #2
   2a6c4:	b2db      	uxtb	r3, r3
            if (table->swap_type != BOOT_SWAP_TYPE_TEST &&
   2a6c6:	2b02      	cmp	r3, #2
   2a6c8:	d904      	bls.n	2a6d4 <boot_swap_type_multi+0x8c>
                    table->swap_type != BOOT_SWAP_TYPE_REVERT) {
                return BOOT_SWAP_TYPE_PANIC;
   2a6ca:	20ff      	movs	r0, #255	; 0xff
   2a6cc:	e002      	b.n	2a6d4 <boot_swap_type_multi+0x8c>
            return table->swap_type;
        }
    }

    BOOT_LOG_INF("Swap type: none");
    return BOOT_SWAP_TYPE_NONE;
   2a6ce:	2001      	movs	r0, #1
   2a6d0:	e000      	b.n	2a6d4 <boot_swap_type_multi+0x8c>
        return BOOT_SWAP_TYPE_PANIC;
   2a6d2:	20ff      	movs	r0, #255	; 0xff
}
   2a6d4:	b005      	add	sp, #20
   2a6d6:	bd30      	pop	{r4, r5, pc}
        return BOOT_SWAP_TYPE_PANIC;
   2a6d8:	20ff      	movs	r0, #255	; 0xff
   2a6da:	e7fb      	b.n	2a6d4 <boot_swap_type_multi+0x8c>
   2a6dc:	00032974 	.word	0x00032974

0002a6e0 <boot_swap_type>:
 * This function is not used by the bootloader itself, but its required API
 * by external tooling like mcumgr.
 */
int
boot_swap_type(void)
{
   2a6e0:	b508      	push	{r3, lr}
    return boot_swap_type_multi(0);
   2a6e2:	2000      	movs	r0, #0
   2a6e4:	f7ff ffb0 	bl	2a648 <boot_swap_type_multi>
}
   2a6e8:	bd08      	pop	{r3, pc}

0002a6ea <boot_set_pending>:
 *
 * @return                  0 on success; nonzero on failure.
 */
int
boot_set_pending(int permanent)
{
   2a6ea:	b510      	push	{r4, lr}
   2a6ec:	b084      	sub	sp, #16
   2a6ee:	4604      	mov	r4, r0
    const struct flash_area *fap;
    struct boot_swap_state state_secondary_slot;
    uint8_t swap_type;
    int rc;

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(0),
   2a6f0:	a901      	add	r1, sp, #4
   2a6f2:	2002      	movs	r0, #2
   2a6f4:	f7ff ff55 	bl	2a5a2 <boot_read_swap_state_by_id>
                                    &state_secondary_slot);
    if (rc != 0) {
   2a6f8:	4603      	mov	r3, r0
   2a6fa:	bba8      	cbnz	r0, 2a768 <boot_set_pending+0x7e>
        return rc;
    }

    switch (state_secondary_slot.magic) {
   2a6fc:	f89d 2004 	ldrb.w	r2, [sp, #4]
   2a700:	2a02      	cmp	r2, #2
   2a702:	d02b      	beq.n	2a75c <boot_set_pending+0x72>
   2a704:	2a03      	cmp	r2, #3
   2a706:	d00b      	beq.n	2a720 <boot_set_pending+0x36>
   2a708:	2a01      	cmp	r2, #1
   2a70a:	d02d      	beq.n	2a768 <boot_set_pending+0x7e>
        flash_area_erase(fap, 0, fap->fa_size);
        flash_area_close(fap);
        return BOOT_EBADIMAGE;

    default:
        assert(0);
   2a70c:	f7e1 fd6c 	bl	c1e8 <hal_debugger_connected>
   2a710:	b100      	cbz	r0, 2a714 <boot_set_pending+0x2a>
   2a712:	be01      	bkpt	0x0001
   2a714:	2300      	movs	r3, #0
   2a716:	461a      	mov	r2, r3
   2a718:	4619      	mov	r1, r3
   2a71a:	4618      	mov	r0, r3
   2a71c:	f7e2 fa18 	bl	cb50 <__assert_func>
        rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY(0), &fap);
   2a720:	a903      	add	r1, sp, #12
   2a722:	2002      	movs	r0, #2
   2a724:	f7e6 f966 	bl	109f4 <flash_area_open>
        if (rc != 0) {
   2a728:	b148      	cbz	r0, 2a73e <boot_set_pending+0x54>
            rc = BOOT_EFLASH;
   2a72a:	2301      	movs	r3, #1
        if (rc == 0) {
   2a72c:	b9e3      	cbnz	r3, 2a768 <boot_set_pending+0x7e>
            if (permanent) {
   2a72e:	b99c      	cbnz	r4, 2a758 <boot_set_pending+0x6e>
                swap_type = BOOT_SWAP_TYPE_TEST;
   2a730:	2102      	movs	r1, #2
            rc = boot_write_swap_info(fap, swap_type, 0);
   2a732:	2200      	movs	r2, #0
   2a734:	9803      	ldr	r0, [sp, #12]
   2a736:	f7ff ff5c 	bl	2a5f2 <boot_write_swap_info>
   2a73a:	4603      	mov	r3, r0
   2a73c:	e014      	b.n	2a768 <boot_set_pending+0x7e>
            rc = boot_write_magic(fap);
   2a73e:	9803      	ldr	r0, [sp, #12]
   2a740:	f7ff ff40 	bl	2a5c4 <boot_write_magic>
        if (rc == 0 && permanent) {
   2a744:	4603      	mov	r3, r0
   2a746:	2800      	cmp	r0, #0
   2a748:	d1f0      	bne.n	2a72c <boot_set_pending+0x42>
   2a74a:	2c00      	cmp	r4, #0
   2a74c:	d0ee      	beq.n	2a72c <boot_set_pending+0x42>
            rc = boot_write_image_ok(fap);
   2a74e:	9803      	ldr	r0, [sp, #12]
   2a750:	f7ff ff48 	bl	2a5e4 <boot_write_image_ok>
   2a754:	4603      	mov	r3, r0
   2a756:	e7e9      	b.n	2a72c <boot_set_pending+0x42>
                swap_type = BOOT_SWAP_TYPE_PERM;
   2a758:	2103      	movs	r1, #3
   2a75a:	e7ea      	b.n	2a732 <boot_set_pending+0x48>
        rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY(0), &fap);
   2a75c:	a903      	add	r1, sp, #12
   2a75e:	2002      	movs	r0, #2
   2a760:	f7e6 f948 	bl	109f4 <flash_area_open>
        if (rc != 0) {
   2a764:	b118      	cbz	r0, 2a76e <boot_set_pending+0x84>
            return BOOT_EFLASH;
   2a766:	2301      	movs	r3, #1
        return BOOT_EBADIMAGE;
    }
}
   2a768:	4618      	mov	r0, r3
   2a76a:	b004      	add	sp, #16
   2a76c:	bd10      	pop	{r4, pc}
        flash_area_erase(fap, 0, fap->fa_size);
   2a76e:	9803      	ldr	r0, [sp, #12]
   2a770:	6882      	ldr	r2, [r0, #8]
   2a772:	2100      	movs	r1, #0
   2a774:	f7e6 f9bc 	bl	10af0 <flash_area_erase>
        return BOOT_EBADIMAGE;
   2a778:	2303      	movs	r3, #3
   2a77a:	e7f5      	b.n	2a768 <boot_set_pending+0x7e>

0002a77c <boot_set_confirmed>:
 *
 * @return                  0 on success; nonzero on failure.
 */
int
boot_set_confirmed(void)
{
   2a77c:	b500      	push	{lr}
   2a77e:	b085      	sub	sp, #20
    const struct flash_area *fap;
    struct boot_swap_state state_primary_slot;
    int rc;

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(0),
   2a780:	a901      	add	r1, sp, #4
   2a782:	2001      	movs	r0, #1
   2a784:	f7ff ff0d 	bl	2a5a2 <boot_read_swap_state_by_id>
                                    &state_primary_slot);
    if (rc != 0) {
   2a788:	4603      	mov	r3, r0
   2a78a:	b9c8      	cbnz	r0, 2a7c0 <boot_set_confirmed+0x44>
        return rc;
    }

    switch (state_primary_slot.magic) {
   2a78c:	f89d 2004 	ldrb.w	r2, [sp, #4]
   2a790:	2a02      	cmp	r2, #2
   2a792:	d014      	beq.n	2a7be <boot_set_confirmed+0x42>
   2a794:	2a03      	cmp	r2, #3
   2a796:	d013      	beq.n	2a7c0 <boot_set_confirmed+0x44>
    case BOOT_MAGIC_BAD:
        /* Unexpected state. */
        return BOOT_EBADVECT;
    }

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(0), &fap);
   2a798:	a903      	add	r1, sp, #12
   2a79a:	2001      	movs	r0, #1
   2a79c:	f7e6 f92a 	bl	109f4 <flash_area_open>
    if (rc) {
   2a7a0:	4603      	mov	r3, r0
   2a7a2:	b988      	cbnz	r0, 2a7c8 <boot_set_confirmed+0x4c>
        rc = BOOT_EFLASH;
        goto done;
    }

    if (state_primary_slot.copy_done == BOOT_FLAG_UNSET) {
   2a7a4:	f89d 2006 	ldrb.w	r2, [sp, #6]
   2a7a8:	2a03      	cmp	r2, #3
   2a7aa:	d00f      	beq.n	2a7cc <boot_set_confirmed+0x50>
        /* Swap never completed.  This is unexpected. */
        rc = BOOT_EBADVECT;
        goto done;
    }

    if (state_primary_slot.image_ok != BOOT_FLAG_UNSET) {
   2a7ac:	f89d 2007 	ldrb.w	r2, [sp, #7]
   2a7b0:	2a03      	cmp	r2, #3
   2a7b2:	d105      	bne.n	2a7c0 <boot_set_confirmed+0x44>
        /* Already confirmed. */
        goto done;
    }

    rc = boot_write_image_ok(fap);
   2a7b4:	9803      	ldr	r0, [sp, #12]
   2a7b6:	f7ff ff15 	bl	2a5e4 <boot_write_image_ok>
   2a7ba:	4603      	mov	r3, r0
   2a7bc:	e000      	b.n	2a7c0 <boot_set_confirmed+0x44>
        return BOOT_EBADVECT;
   2a7be:	2304      	movs	r3, #4

done:
    flash_area_close(fap);
    return rc;
}
   2a7c0:	4618      	mov	r0, r3
   2a7c2:	b005      	add	sp, #20
   2a7c4:	f85d fb04 	ldr.w	pc, [sp], #4
        rc = BOOT_EFLASH;
   2a7c8:	2301      	movs	r3, #1
   2a7ca:	e7f9      	b.n	2a7c0 <boot_set_confirmed+0x44>
        rc = BOOT_EBADVECT;
   2a7cc:	2304      	movs	r3, #4
   2a7ce:	e7f7      	b.n	2a7c0 <boot_set_confirmed+0x44>

0002a7d0 <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
   2a7d0:	b4f0      	push	{r4, r5, r6, r7}
   2a7d2:	b08c      	sub	sp, #48	; 0x30
   2a7d4:	4604      	mov	r4, r0
   2a7d6:	460f      	mov	r7, r1
	const unsigned int rconst[11] = {
   2a7d8:	ad01      	add	r5, sp, #4
   2a7da:	4e2a      	ldr	r6, [pc, #168]	; (2a884 <tc_aes128_set_encrypt_key+0xb4>)
   2a7dc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   2a7de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   2a7e0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   2a7e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   2a7e4:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   2a7e8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
   2a7ec:	2c00      	cmp	r4, #0
   2a7ee:	d044      	beq.n	2a87a <tc_aes128_set_encrypt_key+0xaa>
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
   2a7f0:	2f00      	cmp	r7, #0
   2a7f2:	d044      	beq.n	2a87e <tc_aes128_set_encrypt_key+0xae>
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
   2a7f4:	2300      	movs	r3, #0
   2a7f6:	e00f      	b.n	2a818 <tc_aes128_set_encrypt_key+0x48>
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   2a7f8:	f817 0023 	ldrb.w	r0, [r7, r3, lsl #2]
   2a7fc:	eb07 0183 	add.w	r1, r7, r3, lsl #2
   2a800:	784a      	ldrb	r2, [r1, #1]
   2a802:	0412      	lsls	r2, r2, #16
   2a804:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   2a808:	7888      	ldrb	r0, [r1, #2]
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   2a80a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   2a80e:	78c9      	ldrb	r1, [r1, #3]
   2a810:	430a      	orrs	r2, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   2a812:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
	for (i = 0; i < Nk; ++i) {
   2a816:	3301      	adds	r3, #1
   2a818:	2b03      	cmp	r3, #3
   2a81a:	d9ed      	bls.n	2a7f8 <tc_aes128_set_encrypt_key+0x28>
   2a81c:	e006      	b.n	2a82c <tc_aes128_set_encrypt_key+0x5c>
	for (; i < (Nb * (Nr + 1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
		}
		s->words[i] = s->words[i-Nk] ^ t;
   2a81e:	1f19      	subs	r1, r3, #4
   2a820:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
   2a824:	404a      	eors	r2, r1
   2a826:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
	for (; i < (Nb * (Nr + 1)); ++i) {
   2a82a:	3301      	adds	r3, #1
   2a82c:	2b2b      	cmp	r3, #43	; 0x2b
   2a82e:	d820      	bhi.n	2a872 <tc_aes128_set_encrypt_key+0xa2>
		t = s->words[i-1];
   2a830:	1e5a      	subs	r2, r3, #1
   2a832:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
		if ((i % Nk) == 0) {
   2a836:	f013 0f03 	tst.w	r3, #3
   2a83a:	d1f0      	bne.n	2a81e <tc_aes128_set_encrypt_key+0x4e>
	return (((a) >> 24)|((a) << 8));
   2a83c:	ea4f 6232 	mov.w	r2, r2, ror #24
			t = subword(rotword(t)) ^ rconst[i/Nk];
   2a840:	0e11      	lsrs	r1, r2, #24
   2a842:	4811      	ldr	r0, [pc, #68]	; (2a888 <tc_aes128_set_encrypt_key+0xb8>)
   2a844:	5c45      	ldrb	r5, [r0, r1]
   2a846:	f3c2 4107 	ubfx	r1, r2, #16, #8
   2a84a:	5c41      	ldrb	r1, [r0, r1]
   2a84c:	0409      	lsls	r1, r1, #16
   2a84e:	ea41 6105 	orr.w	r1, r1, r5, lsl #24
   2a852:	f3c2 2507 	ubfx	r5, r2, #8, #8
   2a856:	5d45      	ldrb	r5, [r0, r5]
   2a858:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
   2a85c:	b2d2      	uxtb	r2, r2
   2a85e:	5c82      	ldrb	r2, [r0, r2]
   2a860:	4311      	orrs	r1, r2
   2a862:	f023 0203 	bic.w	r2, r3, #3
   2a866:	a80c      	add	r0, sp, #48	; 0x30
   2a868:	4402      	add	r2, r0
   2a86a:	f852 2c2c 	ldr.w	r2, [r2, #-44]
   2a86e:	404a      	eors	r2, r1
   2a870:	e7d5      	b.n	2a81e <tc_aes128_set_encrypt_key+0x4e>
	}

	return TC_CRYPTO_SUCCESS;
   2a872:	2001      	movs	r0, #1
}
   2a874:	b00c      	add	sp, #48	; 0x30
   2a876:	bcf0      	pop	{r4, r5, r6, r7}
   2a878:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   2a87a:	2000      	movs	r0, #0
   2a87c:	e7fa      	b.n	2a874 <tc_aes128_set_encrypt_key+0xa4>
		return TC_CRYPTO_FAIL;
   2a87e:	2000      	movs	r0, #0
   2a880:	e7f8      	b.n	2a874 <tc_aes128_set_encrypt_key+0xa4>
   2a882:	bf00      	nop
   2a884:	000329d0 	.word	0x000329d0
   2a888:	000329fc 	.word	0x000329fc

0002a88c <tc_aes_encrypt>:
int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   2a88c:	2800      	cmp	r0, #0
   2a88e:	f000 8367 	beq.w	2af60 <tc_aes_encrypt+0x6d4>
{
   2a892:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a896:	b088      	sub	sp, #32
   2a898:	4680      	mov	r8, r0
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   2a89a:	2900      	cmp	r1, #0
   2a89c:	f000 8362 	beq.w	2af64 <tc_aes_encrypt+0x6d8>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   2a8a0:	2a00      	cmp	r2, #0
   2a8a2:	f000 8361 	beq.w	2af68 <tc_aes_encrypt+0x6dc>
   2a8a6:	4617      	mov	r7, r2
   2a8a8:	460a      	mov	r2, r1
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   2a8aa:	2310      	movs	r3, #16
   2a8ac:	4619      	mov	r1, r3
   2a8ae:	eb0d 0003 	add.w	r0, sp, r3
   2a8b2:	f001 fcb5 	bl	2c220 <_copy>
	add_round_key(state, s->words);
   2a8b6:	463e      	mov	r6, r7
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   2a8b8:	683b      	ldr	r3, [r7, #0]
   2a8ba:	f89d 2010 	ldrb.w	r2, [sp, #16]
   2a8be:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   2a8c2:	f88d 2010 	strb.w	r2, [sp, #16]
   2a8c6:	f3c3 4207 	ubfx	r2, r3, #16, #8
   2a8ca:	f89d 1011 	ldrb.w	r1, [sp, #17]
   2a8ce:	404a      	eors	r2, r1
   2a8d0:	f88d 2011 	strb.w	r2, [sp, #17]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   2a8d4:	f3c3 2207 	ubfx	r2, r3, #8, #8
   2a8d8:	f89d 1012 	ldrb.w	r1, [sp, #18]
   2a8dc:	404a      	eors	r2, r1
   2a8de:	f88d 2012 	strb.w	r2, [sp, #18]
   2a8e2:	b2db      	uxtb	r3, r3
   2a8e4:	f89d 2013 	ldrb.w	r2, [sp, #19]
   2a8e8:	4053      	eors	r3, r2
   2a8ea:	f88d 3013 	strb.w	r3, [sp, #19]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   2a8ee:	687b      	ldr	r3, [r7, #4]
   2a8f0:	f89d 2014 	ldrb.w	r2, [sp, #20]
   2a8f4:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   2a8f8:	f88d 2014 	strb.w	r2, [sp, #20]
   2a8fc:	f3c3 4207 	ubfx	r2, r3, #16, #8
   2a900:	f89d 1015 	ldrb.w	r1, [sp, #21]
   2a904:	404a      	eors	r2, r1
   2a906:	f88d 2015 	strb.w	r2, [sp, #21]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   2a90a:	f3c3 2207 	ubfx	r2, r3, #8, #8
   2a90e:	f89d 1016 	ldrb.w	r1, [sp, #22]
   2a912:	404a      	eors	r2, r1
   2a914:	f88d 2016 	strb.w	r2, [sp, #22]
   2a918:	b2db      	uxtb	r3, r3
   2a91a:	f89d 2017 	ldrb.w	r2, [sp, #23]
   2a91e:	4053      	eors	r3, r2
   2a920:	f88d 3017 	strb.w	r3, [sp, #23]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   2a924:	68bb      	ldr	r3, [r7, #8]
   2a926:	f89d 2018 	ldrb.w	r2, [sp, #24]
   2a92a:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   2a92e:	f88d 2018 	strb.w	r2, [sp, #24]
   2a932:	f3c3 4207 	ubfx	r2, r3, #16, #8
   2a936:	f89d 1019 	ldrb.w	r1, [sp, #25]
   2a93a:	404a      	eors	r2, r1
   2a93c:	f88d 2019 	strb.w	r2, [sp, #25]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   2a940:	f3c3 2207 	ubfx	r2, r3, #8, #8
   2a944:	f89d 101a 	ldrb.w	r1, [sp, #26]
   2a948:	404a      	eors	r2, r1
   2a94a:	f88d 201a 	strb.w	r2, [sp, #26]
   2a94e:	b2db      	uxtb	r3, r3
   2a950:	f89d 201b 	ldrb.w	r2, [sp, #27]
   2a954:	4053      	eors	r3, r2
   2a956:	f88d 301b 	strb.w	r3, [sp, #27]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   2a95a:	68fb      	ldr	r3, [r7, #12]
   2a95c:	f89d 201c 	ldrb.w	r2, [sp, #28]
   2a960:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   2a964:	f88d 201c 	strb.w	r2, [sp, #28]
   2a968:	f3c3 4207 	ubfx	r2, r3, #16, #8
   2a96c:	f89d 101d 	ldrb.w	r1, [sp, #29]
   2a970:	404a      	eors	r2, r1
   2a972:	f88d 201d 	strb.w	r2, [sp, #29]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   2a976:	f3c3 2207 	ubfx	r2, r3, #8, #8
   2a97a:	f89d 101e 	ldrb.w	r1, [sp, #30]
   2a97e:	404a      	eors	r2, r1
   2a980:	f88d 201e 	strb.w	r2, [sp, #30]
   2a984:	b2db      	uxtb	r3, r3
   2a986:	f89d 201f 	ldrb.w	r2, [sp, #31]
   2a98a:	4053      	eors	r3, r2
   2a98c:	f88d 301f 	strb.w	r3, [sp, #31]

	for (i = 0; i < (Nr - 1); ++i) {
   2a990:	2500      	movs	r5, #0
   2a992:	e210      	b.n	2adb6 <tc_aes_encrypt+0x52a>
		s[i] = sbox[s[i]];
   2a994:	a904      	add	r1, sp, #16
   2a996:	5ccc      	ldrb	r4, [r1, r3]
   2a998:	4a02      	ldr	r2, [pc, #8]	; (2a9a4 <tc_aes_encrypt+0x118>)
   2a99a:	5d14      	ldrb	r4, [r2, r4]
   2a99c:	54cc      	strb	r4, [r1, r3]
	for (i = 0; i < (Nb * Nk); ++i) {
   2a99e:	3301      	adds	r3, #1
   2a9a0:	e002      	b.n	2a9a8 <tc_aes_encrypt+0x11c>
   2a9a2:	bf00      	nop
   2a9a4:	000329fc 	.word	0x000329fc
   2a9a8:	2b0f      	cmp	r3, #15
   2a9aa:	d9f3      	bls.n	2a994 <tc_aes_encrypt+0x108>
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   2a9ac:	f89d 3010 	ldrb.w	r3, [sp, #16]
   2a9b0:	f88d 3000 	strb.w	r3, [sp]
   2a9b4:	f89d 3015 	ldrb.w	r3, [sp, #21]
   2a9b8:	f88d 3001 	strb.w	r3, [sp, #1]
   2a9bc:	f89d 301a 	ldrb.w	r3, [sp, #26]
   2a9c0:	f88d 3002 	strb.w	r3, [sp, #2]
   2a9c4:	f89d 301f 	ldrb.w	r3, [sp, #31]
   2a9c8:	f88d 3003 	strb.w	r3, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   2a9cc:	f89d 3014 	ldrb.w	r3, [sp, #20]
   2a9d0:	f88d 3004 	strb.w	r3, [sp, #4]
   2a9d4:	f89d 3019 	ldrb.w	r3, [sp, #25]
   2a9d8:	f88d 3005 	strb.w	r3, [sp, #5]
   2a9dc:	f89d 301e 	ldrb.w	r3, [sp, #30]
   2a9e0:	f88d 3006 	strb.w	r3, [sp, #6]
   2a9e4:	f89d 3013 	ldrb.w	r3, [sp, #19]
   2a9e8:	f88d 3007 	strb.w	r3, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   2a9ec:	f89d 3018 	ldrb.w	r3, [sp, #24]
   2a9f0:	f88d 3008 	strb.w	r3, [sp, #8]
   2a9f4:	f89d 301d 	ldrb.w	r3, [sp, #29]
   2a9f8:	f88d 3009 	strb.w	r3, [sp, #9]
   2a9fc:	f89d 3012 	ldrb.w	r3, [sp, #18]
   2aa00:	f88d 300a 	strb.w	r3, [sp, #10]
   2aa04:	f89d 3017 	ldrb.w	r3, [sp, #23]
   2aa08:	f88d 300b 	strb.w	r3, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   2aa0c:	f89d 301c 	ldrb.w	r3, [sp, #28]
   2aa10:	f88d 300c 	strb.w	r3, [sp, #12]
   2aa14:	f89d 3011 	ldrb.w	r3, [sp, #17]
   2aa18:	f88d 300d 	strb.w	r3, [sp, #13]
   2aa1c:	f89d 3016 	ldrb.w	r3, [sp, #22]
   2aa20:	f88d 300e 	strb.w	r3, [sp, #14]
   2aa24:	f89d 301b 	ldrb.w	r3, [sp, #27]
   2aa28:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   2aa2c:	2310      	movs	r3, #16
   2aa2e:	466a      	mov	r2, sp
   2aa30:	4619      	mov	r1, r3
   2aa32:	eb0d 0003 	add.w	r0, sp, r3
   2aa36:	f001 fbf3 	bl	2c220 <_copy>
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   2aa3a:	f89d 0010 	ldrb.w	r0, [sp, #16]
   2aa3e:	f001 fbff 	bl	2c240 <_double_byte>
   2aa42:	4604      	mov	r4, r0
   2aa44:	f89d 0011 	ldrb.w	r0, [sp, #17]
   2aa48:	f001 fbfa 	bl	2c240 <_double_byte>
   2aa4c:	f89d 1011 	ldrb.w	r1, [sp, #17]
   2aa50:	f89d 2012 	ldrb.w	r2, [sp, #18]
   2aa54:	f89d 3013 	ldrb.w	r3, [sp, #19]
   2aa58:	4048      	eors	r0, r1
   2aa5a:	4044      	eors	r4, r0
   2aa5c:	4062      	eors	r2, r4
   2aa5e:	4053      	eors	r3, r2
   2aa60:	f88d 3000 	strb.w	r3, [sp]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   2aa64:	f89d 4010 	ldrb.w	r4, [sp, #16]
   2aa68:	4608      	mov	r0, r1
   2aa6a:	f001 fbe9 	bl	2c240 <_double_byte>
   2aa6e:	4044      	eors	r4, r0
   2aa70:	b2e4      	uxtb	r4, r4
   2aa72:	f89d 0012 	ldrb.w	r0, [sp, #18]
   2aa76:	f001 fbe3 	bl	2c240 <_double_byte>
   2aa7a:	f89d 2012 	ldrb.w	r2, [sp, #18]
   2aa7e:	f89d 3013 	ldrb.w	r3, [sp, #19]
   2aa82:	4050      	eors	r0, r2
   2aa84:	4044      	eors	r4, r0
   2aa86:	405c      	eors	r4, r3
   2aa88:	f88d 4001 	strb.w	r4, [sp, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   2aa8c:	f89d 4010 	ldrb.w	r4, [sp, #16]
   2aa90:	f89d 0011 	ldrb.w	r0, [sp, #17]
   2aa94:	4044      	eors	r4, r0
   2aa96:	4610      	mov	r0, r2
   2aa98:	f001 fbd2 	bl	2c240 <_double_byte>
   2aa9c:	4044      	eors	r4, r0
   2aa9e:	b2e4      	uxtb	r4, r4
   2aaa0:	f89d 0013 	ldrb.w	r0, [sp, #19]
   2aaa4:	f001 fbcc 	bl	2c240 <_double_byte>
   2aaa8:	f89d 3013 	ldrb.w	r3, [sp, #19]
   2aaac:	4058      	eors	r0, r3
   2aaae:	4044      	eors	r4, r0
   2aab0:	f88d 4002 	strb.w	r4, [sp, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   2aab4:	f89d 0010 	ldrb.w	r0, [sp, #16]
   2aab8:	f001 fbc2 	bl	2c240 <_double_byte>
   2aabc:	f89d 2010 	ldrb.w	r2, [sp, #16]
   2aac0:	f89d 3011 	ldrb.w	r3, [sp, #17]
   2aac4:	f89d 4012 	ldrb.w	r4, [sp, #18]
   2aac8:	4050      	eors	r0, r2
   2aaca:	4043      	eors	r3, r0
   2aacc:	405c      	eors	r4, r3
   2aace:	b2e4      	uxtb	r4, r4
   2aad0:	f89d 0013 	ldrb.w	r0, [sp, #19]
   2aad4:	f001 fbb4 	bl	2c240 <_double_byte>
   2aad8:	4060      	eors	r0, r4
   2aada:	f88d 0003 	strb.w	r0, [sp, #3]
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   2aade:	f89d 0014 	ldrb.w	r0, [sp, #20]
   2aae2:	f001 fbad 	bl	2c240 <_double_byte>
   2aae6:	4604      	mov	r4, r0
   2aae8:	f89d 0015 	ldrb.w	r0, [sp, #21]
   2aaec:	f001 fba8 	bl	2c240 <_double_byte>
   2aaf0:	f89d 1015 	ldrb.w	r1, [sp, #21]
   2aaf4:	f89d 2016 	ldrb.w	r2, [sp, #22]
   2aaf8:	f89d 3017 	ldrb.w	r3, [sp, #23]
   2aafc:	4048      	eors	r0, r1
   2aafe:	4044      	eors	r4, r0
   2ab00:	4062      	eors	r2, r4
   2ab02:	4053      	eors	r3, r2
   2ab04:	f88d 3004 	strb.w	r3, [sp, #4]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   2ab08:	f89d 4014 	ldrb.w	r4, [sp, #20]
   2ab0c:	4608      	mov	r0, r1
   2ab0e:	f001 fb97 	bl	2c240 <_double_byte>
   2ab12:	4044      	eors	r4, r0
   2ab14:	b2e4      	uxtb	r4, r4
   2ab16:	f89d 0016 	ldrb.w	r0, [sp, #22]
   2ab1a:	f001 fb91 	bl	2c240 <_double_byte>
   2ab1e:	f89d 2016 	ldrb.w	r2, [sp, #22]
   2ab22:	f89d 3017 	ldrb.w	r3, [sp, #23]
   2ab26:	4050      	eors	r0, r2
   2ab28:	4044      	eors	r4, r0
   2ab2a:	405c      	eors	r4, r3
   2ab2c:	f88d 4005 	strb.w	r4, [sp, #5]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   2ab30:	f89d 4014 	ldrb.w	r4, [sp, #20]
   2ab34:	f89d 0015 	ldrb.w	r0, [sp, #21]
   2ab38:	4044      	eors	r4, r0
   2ab3a:	4610      	mov	r0, r2
   2ab3c:	f001 fb80 	bl	2c240 <_double_byte>
   2ab40:	4044      	eors	r4, r0
   2ab42:	b2e4      	uxtb	r4, r4
   2ab44:	f89d 0017 	ldrb.w	r0, [sp, #23]
   2ab48:	f001 fb7a 	bl	2c240 <_double_byte>
   2ab4c:	f89d 3017 	ldrb.w	r3, [sp, #23]
   2ab50:	4058      	eors	r0, r3
   2ab52:	4044      	eors	r4, r0
   2ab54:	f88d 4006 	strb.w	r4, [sp, #6]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   2ab58:	f89d 0014 	ldrb.w	r0, [sp, #20]
   2ab5c:	f001 fb70 	bl	2c240 <_double_byte>
   2ab60:	f89d 2014 	ldrb.w	r2, [sp, #20]
   2ab64:	f89d 3015 	ldrb.w	r3, [sp, #21]
   2ab68:	f89d 4016 	ldrb.w	r4, [sp, #22]
   2ab6c:	4050      	eors	r0, r2
   2ab6e:	4043      	eors	r3, r0
   2ab70:	405c      	eors	r4, r3
   2ab72:	b2e4      	uxtb	r4, r4
   2ab74:	f89d 0017 	ldrb.w	r0, [sp, #23]
   2ab78:	f001 fb62 	bl	2c240 <_double_byte>
   2ab7c:	4060      	eors	r0, r4
   2ab7e:	f88d 0007 	strb.w	r0, [sp, #7]
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   2ab82:	f89d 0018 	ldrb.w	r0, [sp, #24]
   2ab86:	f001 fb5b 	bl	2c240 <_double_byte>
   2ab8a:	4604      	mov	r4, r0
   2ab8c:	f89d 0019 	ldrb.w	r0, [sp, #25]
   2ab90:	f001 fb56 	bl	2c240 <_double_byte>
   2ab94:	f89d 1019 	ldrb.w	r1, [sp, #25]
   2ab98:	f89d 201a 	ldrb.w	r2, [sp, #26]
   2ab9c:	f89d 301b 	ldrb.w	r3, [sp, #27]
   2aba0:	4048      	eors	r0, r1
   2aba2:	4044      	eors	r4, r0
   2aba4:	4062      	eors	r2, r4
   2aba6:	4053      	eors	r3, r2
   2aba8:	f88d 3008 	strb.w	r3, [sp, #8]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   2abac:	f89d 4018 	ldrb.w	r4, [sp, #24]
   2abb0:	4608      	mov	r0, r1
   2abb2:	f001 fb45 	bl	2c240 <_double_byte>
   2abb6:	4044      	eors	r4, r0
   2abb8:	b2e4      	uxtb	r4, r4
   2abba:	f89d 001a 	ldrb.w	r0, [sp, #26]
   2abbe:	f001 fb3f 	bl	2c240 <_double_byte>
   2abc2:	f89d 201a 	ldrb.w	r2, [sp, #26]
   2abc6:	f89d 301b 	ldrb.w	r3, [sp, #27]
   2abca:	4050      	eors	r0, r2
   2abcc:	4044      	eors	r4, r0
   2abce:	405c      	eors	r4, r3
   2abd0:	f88d 4009 	strb.w	r4, [sp, #9]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   2abd4:	f89d 4018 	ldrb.w	r4, [sp, #24]
   2abd8:	f89d 0019 	ldrb.w	r0, [sp, #25]
   2abdc:	4044      	eors	r4, r0
   2abde:	4610      	mov	r0, r2
   2abe0:	f001 fb2e 	bl	2c240 <_double_byte>
   2abe4:	4044      	eors	r4, r0
   2abe6:	b2e4      	uxtb	r4, r4
   2abe8:	f89d 001b 	ldrb.w	r0, [sp, #27]
   2abec:	f001 fb28 	bl	2c240 <_double_byte>
   2abf0:	f89d 301b 	ldrb.w	r3, [sp, #27]
   2abf4:	4058      	eors	r0, r3
   2abf6:	4044      	eors	r4, r0
   2abf8:	f88d 400a 	strb.w	r4, [sp, #10]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   2abfc:	f89d 0018 	ldrb.w	r0, [sp, #24]
   2ac00:	f001 fb1e 	bl	2c240 <_double_byte>
   2ac04:	f89d 2018 	ldrb.w	r2, [sp, #24]
   2ac08:	f89d 3019 	ldrb.w	r3, [sp, #25]
   2ac0c:	f89d 401a 	ldrb.w	r4, [sp, #26]
   2ac10:	4050      	eors	r0, r2
   2ac12:	4043      	eors	r3, r0
   2ac14:	405c      	eors	r4, r3
   2ac16:	b2e4      	uxtb	r4, r4
   2ac18:	f89d 001b 	ldrb.w	r0, [sp, #27]
   2ac1c:	f001 fb10 	bl	2c240 <_double_byte>
   2ac20:	4060      	eors	r0, r4
   2ac22:	f88d 000b 	strb.w	r0, [sp, #11]
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   2ac26:	f89d 001c 	ldrb.w	r0, [sp, #28]
   2ac2a:	f001 fb09 	bl	2c240 <_double_byte>
   2ac2e:	4604      	mov	r4, r0
   2ac30:	f89d 001d 	ldrb.w	r0, [sp, #29]
   2ac34:	f001 fb04 	bl	2c240 <_double_byte>
   2ac38:	f89d 101d 	ldrb.w	r1, [sp, #29]
   2ac3c:	f89d 201e 	ldrb.w	r2, [sp, #30]
   2ac40:	f89d 301f 	ldrb.w	r3, [sp, #31]
   2ac44:	4048      	eors	r0, r1
   2ac46:	4044      	eors	r4, r0
   2ac48:	4062      	eors	r2, r4
   2ac4a:	4053      	eors	r3, r2
   2ac4c:	f88d 300c 	strb.w	r3, [sp, #12]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   2ac50:	f89d 401c 	ldrb.w	r4, [sp, #28]
   2ac54:	4608      	mov	r0, r1
   2ac56:	f001 faf3 	bl	2c240 <_double_byte>
   2ac5a:	4044      	eors	r4, r0
   2ac5c:	b2e4      	uxtb	r4, r4
   2ac5e:	f89d 001e 	ldrb.w	r0, [sp, #30]
   2ac62:	f001 faed 	bl	2c240 <_double_byte>
   2ac66:	f89d 201e 	ldrb.w	r2, [sp, #30]
   2ac6a:	f89d 301f 	ldrb.w	r3, [sp, #31]
   2ac6e:	4050      	eors	r0, r2
   2ac70:	4044      	eors	r4, r0
   2ac72:	405c      	eors	r4, r3
   2ac74:	f88d 400d 	strb.w	r4, [sp, #13]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   2ac78:	f89d 401c 	ldrb.w	r4, [sp, #28]
   2ac7c:	f89d 001d 	ldrb.w	r0, [sp, #29]
   2ac80:	4044      	eors	r4, r0
   2ac82:	4610      	mov	r0, r2
   2ac84:	f001 fadc 	bl	2c240 <_double_byte>
   2ac88:	4044      	eors	r4, r0
   2ac8a:	b2e4      	uxtb	r4, r4
   2ac8c:	f89d 001f 	ldrb.w	r0, [sp, #31]
   2ac90:	f001 fad6 	bl	2c240 <_double_byte>
   2ac94:	f89d 301f 	ldrb.w	r3, [sp, #31]
   2ac98:	4058      	eors	r0, r3
   2ac9a:	4044      	eors	r4, r0
   2ac9c:	f88d 400e 	strb.w	r4, [sp, #14]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   2aca0:	f89d 001c 	ldrb.w	r0, [sp, #28]
   2aca4:	f001 facc 	bl	2c240 <_double_byte>
   2aca8:	f89d 201c 	ldrb.w	r2, [sp, #28]
   2acac:	f89d 301d 	ldrb.w	r3, [sp, #29]
   2acb0:	f89d 401e 	ldrb.w	r4, [sp, #30]
   2acb4:	4050      	eors	r0, r2
   2acb6:	4043      	eors	r3, r0
   2acb8:	405c      	eors	r4, r3
   2acba:	b2e4      	uxtb	r4, r4
   2acbc:	f89d 001f 	ldrb.w	r0, [sp, #31]
   2acc0:	f001 fabe 	bl	2c240 <_double_byte>
   2acc4:	4060      	eors	r0, r4
   2acc6:	f88d 000f 	strb.w	r0, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   2acca:	2310      	movs	r3, #16
   2accc:	466a      	mov	r2, sp
   2acce:	4619      	mov	r1, r3
   2acd0:	eb0d 0003 	add.w	r0, sp, r3
   2acd4:	f001 faa4 	bl	2c220 <_copy>
		sub_bytes(state);
		shift_rows(state);
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   2acd8:	3501      	adds	r5, #1
   2acda:	012b      	lsls	r3, r5, #4
   2acdc:	18f2      	adds	r2, r6, r3
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   2acde:	58f3      	ldr	r3, [r6, r3]
   2ace0:	f89d 1010 	ldrb.w	r1, [sp, #16]
   2ace4:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
   2ace8:	f88d 1010 	strb.w	r1, [sp, #16]
   2acec:	f3c3 4107 	ubfx	r1, r3, #16, #8
   2acf0:	f89d 0011 	ldrb.w	r0, [sp, #17]
   2acf4:	4041      	eors	r1, r0
   2acf6:	f88d 1011 	strb.w	r1, [sp, #17]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   2acfa:	f3c3 2107 	ubfx	r1, r3, #8, #8
   2acfe:	f89d 0012 	ldrb.w	r0, [sp, #18]
   2ad02:	4041      	eors	r1, r0
   2ad04:	f88d 1012 	strb.w	r1, [sp, #18]
   2ad08:	b2db      	uxtb	r3, r3
   2ad0a:	f89d 1013 	ldrb.w	r1, [sp, #19]
   2ad0e:	404b      	eors	r3, r1
   2ad10:	f88d 3013 	strb.w	r3, [sp, #19]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   2ad14:	6853      	ldr	r3, [r2, #4]
   2ad16:	f89d 1014 	ldrb.w	r1, [sp, #20]
   2ad1a:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
   2ad1e:	f88d 1014 	strb.w	r1, [sp, #20]
   2ad22:	f3c3 4107 	ubfx	r1, r3, #16, #8
   2ad26:	f89d 0015 	ldrb.w	r0, [sp, #21]
   2ad2a:	4041      	eors	r1, r0
   2ad2c:	f88d 1015 	strb.w	r1, [sp, #21]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   2ad30:	f3c3 2107 	ubfx	r1, r3, #8, #8
   2ad34:	f89d 0016 	ldrb.w	r0, [sp, #22]
   2ad38:	4041      	eors	r1, r0
   2ad3a:	f88d 1016 	strb.w	r1, [sp, #22]
   2ad3e:	b2db      	uxtb	r3, r3
   2ad40:	f89d 1017 	ldrb.w	r1, [sp, #23]
   2ad44:	404b      	eors	r3, r1
   2ad46:	f88d 3017 	strb.w	r3, [sp, #23]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   2ad4a:	6893      	ldr	r3, [r2, #8]
   2ad4c:	f89d 1018 	ldrb.w	r1, [sp, #24]
   2ad50:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
   2ad54:	f88d 1018 	strb.w	r1, [sp, #24]
   2ad58:	f3c3 4107 	ubfx	r1, r3, #16, #8
   2ad5c:	f89d 0019 	ldrb.w	r0, [sp, #25]
   2ad60:	4041      	eors	r1, r0
   2ad62:	f88d 1019 	strb.w	r1, [sp, #25]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   2ad66:	f3c3 2107 	ubfx	r1, r3, #8, #8
   2ad6a:	f89d 001a 	ldrb.w	r0, [sp, #26]
   2ad6e:	4041      	eors	r1, r0
   2ad70:	f88d 101a 	strb.w	r1, [sp, #26]
   2ad74:	b2db      	uxtb	r3, r3
   2ad76:	f89d 101b 	ldrb.w	r1, [sp, #27]
   2ad7a:	404b      	eors	r3, r1
   2ad7c:	f88d 301b 	strb.w	r3, [sp, #27]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   2ad80:	68d3      	ldr	r3, [r2, #12]
   2ad82:	f89d 201c 	ldrb.w	r2, [sp, #28]
   2ad86:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   2ad8a:	f88d 201c 	strb.w	r2, [sp, #28]
   2ad8e:	f3c3 4207 	ubfx	r2, r3, #16, #8
   2ad92:	f89d 101d 	ldrb.w	r1, [sp, #29]
   2ad96:	404a      	eors	r2, r1
   2ad98:	f88d 201d 	strb.w	r2, [sp, #29]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   2ad9c:	f3c3 2207 	ubfx	r2, r3, #8, #8
   2ada0:	f89d 101e 	ldrb.w	r1, [sp, #30]
   2ada4:	404a      	eors	r2, r1
   2ada6:	f88d 201e 	strb.w	r2, [sp, #30]
   2adaa:	b2db      	uxtb	r3, r3
   2adac:	f89d 201f 	ldrb.w	r2, [sp, #31]
   2adb0:	4053      	eors	r3, r2
   2adb2:	f88d 301f 	strb.w	r3, [sp, #31]
	for (i = 0; i < (Nr - 1); ++i) {
   2adb6:	2d08      	cmp	r5, #8
   2adb8:	d801      	bhi.n	2adbe <tc_aes_encrypt+0x532>
	for (i = 0; i < (Nb * Nk); ++i) {
   2adba:	2300      	movs	r3, #0
   2adbc:	e5f4      	b.n	2a9a8 <tc_aes_encrypt+0x11c>
   2adbe:	2300      	movs	r3, #0
   2adc0:	e005      	b.n	2adce <tc_aes_encrypt+0x542>
		s[i] = sbox[s[i]];
   2adc2:	aa04      	add	r2, sp, #16
   2adc4:	5cd1      	ldrb	r1, [r2, r3]
   2adc6:	4869      	ldr	r0, [pc, #420]	; (2af6c <tc_aes_encrypt+0x6e0>)
   2adc8:	5c41      	ldrb	r1, [r0, r1]
   2adca:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < (Nb * Nk); ++i) {
   2adcc:	3301      	adds	r3, #1
   2adce:	2b0f      	cmp	r3, #15
   2add0:	d9f7      	bls.n	2adc2 <tc_aes_encrypt+0x536>
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   2add2:	f89d 3010 	ldrb.w	r3, [sp, #16]
   2add6:	f88d 3000 	strb.w	r3, [sp]
   2adda:	f89d 3015 	ldrb.w	r3, [sp, #21]
   2adde:	f88d 3001 	strb.w	r3, [sp, #1]
   2ade2:	f89d 301a 	ldrb.w	r3, [sp, #26]
   2ade6:	f88d 3002 	strb.w	r3, [sp, #2]
   2adea:	f89d 301f 	ldrb.w	r3, [sp, #31]
   2adee:	f88d 3003 	strb.w	r3, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   2adf2:	f89d 3014 	ldrb.w	r3, [sp, #20]
   2adf6:	f88d 3004 	strb.w	r3, [sp, #4]
   2adfa:	f89d 3019 	ldrb.w	r3, [sp, #25]
   2adfe:	f88d 3005 	strb.w	r3, [sp, #5]
   2ae02:	f89d 301e 	ldrb.w	r3, [sp, #30]
   2ae06:	f88d 3006 	strb.w	r3, [sp, #6]
   2ae0a:	f89d 3013 	ldrb.w	r3, [sp, #19]
   2ae0e:	f88d 3007 	strb.w	r3, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   2ae12:	f89d 3018 	ldrb.w	r3, [sp, #24]
   2ae16:	f88d 3008 	strb.w	r3, [sp, #8]
   2ae1a:	f89d 301d 	ldrb.w	r3, [sp, #29]
   2ae1e:	f88d 3009 	strb.w	r3, [sp, #9]
   2ae22:	f89d 3012 	ldrb.w	r3, [sp, #18]
   2ae26:	f88d 300a 	strb.w	r3, [sp, #10]
   2ae2a:	f89d 3017 	ldrb.w	r3, [sp, #23]
   2ae2e:	f88d 300b 	strb.w	r3, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   2ae32:	f89d 301c 	ldrb.w	r3, [sp, #28]
   2ae36:	f88d 300c 	strb.w	r3, [sp, #12]
   2ae3a:	f89d 3011 	ldrb.w	r3, [sp, #17]
   2ae3e:	f88d 300d 	strb.w	r3, [sp, #13]
   2ae42:	f89d 3016 	ldrb.w	r3, [sp, #22]
   2ae46:	f88d 300e 	strb.w	r3, [sp, #14]
   2ae4a:	f89d 301b 	ldrb.w	r3, [sp, #27]
   2ae4e:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   2ae52:	2310      	movs	r3, #16
   2ae54:	466a      	mov	r2, sp
   2ae56:	4619      	mov	r1, r3
   2ae58:	eb0d 0003 	add.w	r0, sp, r3
   2ae5c:	f001 f9e0 	bl	2c220 <_copy>
	}

	sub_bytes(state);
	shift_rows(state);
	add_round_key(state, s->words + Nb*(i+1));
   2ae60:	1c6b      	adds	r3, r5, #1
   2ae62:	011b      	lsls	r3, r3, #4
   2ae64:	18fa      	adds	r2, r7, r3
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   2ae66:	58fb      	ldr	r3, [r7, r3]
   2ae68:	f89d 1010 	ldrb.w	r1, [sp, #16]
   2ae6c:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
   2ae70:	f88d 1010 	strb.w	r1, [sp, #16]
   2ae74:	f3c3 4107 	ubfx	r1, r3, #16, #8
   2ae78:	f89d 0011 	ldrb.w	r0, [sp, #17]
   2ae7c:	4041      	eors	r1, r0
   2ae7e:	f88d 1011 	strb.w	r1, [sp, #17]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   2ae82:	f3c3 2107 	ubfx	r1, r3, #8, #8
   2ae86:	f89d 0012 	ldrb.w	r0, [sp, #18]
   2ae8a:	4041      	eors	r1, r0
   2ae8c:	f88d 1012 	strb.w	r1, [sp, #18]
   2ae90:	b2db      	uxtb	r3, r3
   2ae92:	f89d 1013 	ldrb.w	r1, [sp, #19]
   2ae96:	404b      	eors	r3, r1
   2ae98:	f88d 3013 	strb.w	r3, [sp, #19]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   2ae9c:	6853      	ldr	r3, [r2, #4]
   2ae9e:	f89d 1014 	ldrb.w	r1, [sp, #20]
   2aea2:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
   2aea6:	f88d 1014 	strb.w	r1, [sp, #20]
   2aeaa:	f3c3 4107 	ubfx	r1, r3, #16, #8
   2aeae:	f89d 0015 	ldrb.w	r0, [sp, #21]
   2aeb2:	4041      	eors	r1, r0
   2aeb4:	f88d 1015 	strb.w	r1, [sp, #21]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   2aeb8:	f3c3 2107 	ubfx	r1, r3, #8, #8
   2aebc:	f89d 0016 	ldrb.w	r0, [sp, #22]
   2aec0:	4041      	eors	r1, r0
   2aec2:	f88d 1016 	strb.w	r1, [sp, #22]
   2aec6:	b2db      	uxtb	r3, r3
   2aec8:	f89d 1017 	ldrb.w	r1, [sp, #23]
   2aecc:	404b      	eors	r3, r1
   2aece:	f88d 3017 	strb.w	r3, [sp, #23]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   2aed2:	6893      	ldr	r3, [r2, #8]
   2aed4:	f89d 1018 	ldrb.w	r1, [sp, #24]
   2aed8:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
   2aedc:	f88d 1018 	strb.w	r1, [sp, #24]
   2aee0:	f3c3 4107 	ubfx	r1, r3, #16, #8
   2aee4:	f89d 0019 	ldrb.w	r0, [sp, #25]
   2aee8:	4041      	eors	r1, r0
   2aeea:	f88d 1019 	strb.w	r1, [sp, #25]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   2aeee:	f3c3 2107 	ubfx	r1, r3, #8, #8
   2aef2:	f89d 001a 	ldrb.w	r0, [sp, #26]
   2aef6:	4041      	eors	r1, r0
   2aef8:	f88d 101a 	strb.w	r1, [sp, #26]
   2aefc:	b2db      	uxtb	r3, r3
   2aefe:	f89d 101b 	ldrb.w	r1, [sp, #27]
   2af02:	404b      	eors	r3, r1
   2af04:	f88d 301b 	strb.w	r3, [sp, #27]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   2af08:	68d3      	ldr	r3, [r2, #12]
   2af0a:	f89d 201c 	ldrb.w	r2, [sp, #28]
   2af0e:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   2af12:	f88d 201c 	strb.w	r2, [sp, #28]
   2af16:	f3c3 4207 	ubfx	r2, r3, #16, #8
   2af1a:	f89d 101d 	ldrb.w	r1, [sp, #29]
   2af1e:	404a      	eors	r2, r1
   2af20:	f88d 201d 	strb.w	r2, [sp, #29]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   2af24:	f3c3 2207 	ubfx	r2, r3, #8, #8
   2af28:	f89d 101e 	ldrb.w	r1, [sp, #30]
   2af2c:	404a      	eors	r2, r1
   2af2e:	f88d 201e 	strb.w	r2, [sp, #30]
   2af32:	b2db      	uxtb	r3, r3
   2af34:	f89d 201f 	ldrb.w	r2, [sp, #31]
   2af38:	4053      	eors	r3, r2
   2af3a:	f88d 301f 	strb.w	r3, [sp, #31]

	(void)_copy(out, sizeof(state), state, sizeof(state));
   2af3e:	2310      	movs	r3, #16
   2af40:	eb0d 0203 	add.w	r2, sp, r3
   2af44:	4619      	mov	r1, r3
   2af46:	4640      	mov	r0, r8
   2af48:	f001 f96a 	bl	2c220 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   2af4c:	2210      	movs	r2, #16
   2af4e:	2100      	movs	r1, #0
   2af50:	eb0d 0002 	add.w	r0, sp, r2
   2af54:	f001 f970 	bl	2c238 <_set>

	return TC_CRYPTO_SUCCESS;
   2af58:	2001      	movs	r0, #1
}
   2af5a:	b008      	add	sp, #32
   2af5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TC_CRYPTO_FAIL;
   2af60:	2000      	movs	r0, #0
}
   2af62:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   2af64:	2000      	movs	r0, #0
   2af66:	e7f8      	b.n	2af5a <tc_aes_encrypt+0x6ce>
		return TC_CRYPTO_FAIL;
   2af68:	2000      	movs	r0, #0
   2af6a:	e7f6      	b.n	2af5a <tc_aes_encrypt+0x6ce>
   2af6c:	000329fc 	.word	0x000329fc

0002af70 <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   2af70:	b430      	push	{r4, r5}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);
   2af72:	f101 020f 	add.w	r2, r1, #15

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   2af76:	f991 3000 	ldrsb.w	r3, [r1]
   2af7a:	2b00      	cmp	r3, #0
   2af7c:	db0d      	blt.n	2af9a <gf_double+0x2a>
   2af7e:	2300      	movs	r3, #0

	out += (TC_AES_BLOCK_SIZE - 1);
   2af80:	300f      	adds	r0, #15
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   2af82:	7814      	ldrb	r4, [r2, #0]
   2af84:	1e45      	subs	r5, r0, #1
   2af86:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
   2af8a:	7003      	strb	r3, [r0, #0]
		if (x == in) {
   2af8c:	428a      	cmp	r2, r1
   2af8e:	d006      	beq.n	2af9e <gf_double+0x2e>
			break;
		}
		carry = *x-- >> 7;
   2af90:	7813      	ldrb	r3, [r2, #0]
   2af92:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   2af94:	4628      	mov	r0, r5
		carry = *x-- >> 7;
   2af96:	3a01      	subs	r2, #1
		*out-- = (*x << 1) ^ carry;
   2af98:	e7f3      	b.n	2af82 <gf_double+0x12>
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   2af9a:	2387      	movs	r3, #135	; 0x87
   2af9c:	e7f0      	b.n	2af80 <gf_double+0x10>
	}
}
   2af9e:	bc30      	pop	{r4, r5}
   2afa0:	4770      	bx	lr

0002afa2 <tc_cmac_erase>:
	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
	if (s == (TCCmacState_t) 0) {
   2afa2:	b130      	cbz	r0, 2afb2 <tc_cmac_erase+0x10>
{
   2afa4:	b508      	push	{r3, lr}
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   2afa6:	2258      	movs	r2, #88	; 0x58
   2afa8:	2100      	movs	r1, #0
   2afaa:	f001 f945 	bl	2c238 <_set>

	return TC_CRYPTO_SUCCESS;
   2afae:	2001      	movs	r0, #1
}
   2afb0:	bd08      	pop	{r3, pc}
		return TC_CRYPTO_FAIL;
   2afb2:	2000      	movs	r0, #0
}
   2afb4:	4770      	bx	lr

0002afb6 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   2afb6:	b1a0      	cbz	r0, 2afe2 <tc_cmac_init+0x2c>
{
   2afb8:	b510      	push	{r4, lr}
   2afba:	4604      	mov	r4, r0
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   2afbc:	2210      	movs	r2, #16
   2afbe:	2100      	movs	r1, #0
   2afc0:	f001 f93a 	bl	2c238 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   2afc4:	2210      	movs	r2, #16
   2afc6:	2100      	movs	r1, #0
   2afc8:	f104 0030 	add.w	r0, r4, #48	; 0x30
   2afcc:	f001 f934 	bl	2c238 <_set>
	s->leftover_offset = 0;
   2afd0:	2300      	movs	r3, #0
   2afd2:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   2afd4:	2200      	movs	r2, #0
   2afd6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   2afda:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50

	return TC_CRYPTO_SUCCESS;
   2afde:	2001      	movs	r0, #1
}
   2afe0:	bd10      	pop	{r4, pc}
		return TC_CRYPTO_FAIL;
   2afe2:	2000      	movs	r0, #0
}
   2afe4:	4770      	bx	lr

0002afe6 <tc_cmac_setup>:
	if (s == (TCCmacState_t) 0 ||
   2afe6:	b338      	cbz	r0, 2b038 <tc_cmac_setup+0x52>
{
   2afe8:	b570      	push	{r4, r5, r6, lr}
   2afea:	4604      	mov	r4, r0
	if (s == (TCCmacState_t) 0 ||
   2afec:	b331      	cbz	r1, 2b03c <tc_cmac_setup+0x56>
   2afee:	4616      	mov	r6, r2
   2aff0:	460d      	mov	r5, r1
	_set(s, 0, sizeof(*s));
   2aff2:	2258      	movs	r2, #88	; 0x58
   2aff4:	2100      	movs	r1, #0
   2aff6:	f001 f91f 	bl	2c238 <_set>
	s->sched = sched;
   2affa:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   2affc:	4629      	mov	r1, r5
   2affe:	4630      	mov	r0, r6
   2b000:	f7ff fbe6 	bl	2a7d0 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   2b004:	2210      	movs	r2, #16
   2b006:	2100      	movs	r1, #0
   2b008:	4620      	mov	r0, r4
   2b00a:	f001 f915 	bl	2c238 <_set>
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   2b00e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2b010:	4621      	mov	r1, r4
   2b012:	4620      	mov	r0, r4
   2b014:	f7ff fc3a 	bl	2a88c <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   2b018:	f104 0510 	add.w	r5, r4, #16
   2b01c:	4621      	mov	r1, r4
   2b01e:	4628      	mov	r0, r5
   2b020:	f7ff ffa6 	bl	2af70 <gf_double>
	gf_double (s->K2, s->K1);
   2b024:	4629      	mov	r1, r5
   2b026:	f104 0020 	add.w	r0, r4, #32
   2b02a:	f7ff ffa1 	bl	2af70 <gf_double>
	tc_cmac_init(s);
   2b02e:	4620      	mov	r0, r4
   2b030:	f7ff ffc1 	bl	2afb6 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   2b034:	2001      	movs	r0, #1
}
   2b036:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   2b038:	2000      	movs	r0, #0
}
   2b03a:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   2b03c:	2000      	movs	r0, #0
   2b03e:	e7fa      	b.n	2b036 <tc_cmac_setup+0x50>

0002b040 <tc_cmac_update>:
int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   2b040:	2800      	cmp	r0, #0
   2b042:	d05f      	beq.n	2b104 <tc_cmac_update+0xc4>
{
   2b044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b046:	460d      	mov	r5, r1
   2b048:	4616      	mov	r6, r2
   2b04a:	4604      	mov	r4, r0
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   2b04c:	2a00      	cmp	r2, #0
   2b04e:	d05b      	beq.n	2b108 <tc_cmac_update+0xc8>
		return  TC_CRYPTO_SUCCESS;
	}
	if (data == (const uint8_t *) 0) {
   2b050:	2900      	cmp	r1, #0
   2b052:	d05b      	beq.n	2b10c <tc_cmac_update+0xcc>
		return TC_CRYPTO_FAIL;
	}

	if (s->countdown == 0) {
   2b054:	e9d0 0114 	ldrd	r0, r1, [r0, #80]	; 0x50
   2b058:	ea50 0301 	orrs.w	r3, r0, r1
   2b05c:	d058      	beq.n	2b110 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	s->countdown--;
   2b05e:	f110 32ff 	adds.w	r2, r0, #4294967295	; 0xffffffff
   2b062:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
   2b066:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50

	if (s->leftover_offset > 0) {
   2b06a:	6c60      	ldr	r0, [r4, #68]	; 0x44
   2b06c:	2800      	cmp	r0, #0
   2b06e:	d038      	beq.n	2b0e2 <tc_cmac_update+0xa2>
		/* last data added to s didn't end on a TC_AES_BLOCK_SIZE byte boundary */
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   2b070:	f1c0 0710 	rsb	r7, r0, #16

		if (data_length < remaining_space) {
   2b074:	42be      	cmp	r6, r7
   2b076:	d314      	bcc.n	2b0a2 <tc_cmac_update+0x62>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
			s->leftover_offset += data_length;
			return TC_CRYPTO_SUCCESS;
		}
		/* leftover block is now full; encrypt it first */
		_copy(&s->leftover[s->leftover_offset],
   2b078:	3030      	adds	r0, #48	; 0x30
   2b07a:	463b      	mov	r3, r7
   2b07c:	462a      	mov	r2, r5
   2b07e:	4639      	mov	r1, r7
   2b080:	4420      	add	r0, r4
   2b082:	f001 f8cd 	bl	2c220 <_copy>
		      remaining_space,
		      data,
		      remaining_space);
		data_length -= remaining_space;
   2b086:	1bf6      	subs	r6, r6, r7
		data += remaining_space;
   2b088:	443d      	add	r5, r7
		s->leftover_offset = 0;
   2b08a:	2300      	movs	r3, #0
   2b08c:	6463      	str	r3, [r4, #68]	; 0x44

		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2b08e:	2b0f      	cmp	r3, #15
   2b090:	d813      	bhi.n	2b0ba <tc_cmac_update+0x7a>
			s->iv[i] ^= s->leftover[i];
   2b092:	18e2      	adds	r2, r4, r3
   2b094:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
   2b098:	5ce1      	ldrb	r1, [r4, r3]
   2b09a:	404a      	eors	r2, r1
   2b09c:	54e2      	strb	r2, [r4, r3]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2b09e:	3301      	adds	r3, #1
   2b0a0:	e7f5      	b.n	2b08e <tc_cmac_update+0x4e>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   2b0a2:	3030      	adds	r0, #48	; 0x30
   2b0a4:	4633      	mov	r3, r6
   2b0a6:	462a      	mov	r2, r5
   2b0a8:	4631      	mov	r1, r6
   2b0aa:	4420      	add	r0, r4
   2b0ac:	f001 f8b8 	bl	2c220 <_copy>
			s->leftover_offset += data_length;
   2b0b0:	6c63      	ldr	r3, [r4, #68]	; 0x44
   2b0b2:	4433      	add	r3, r6
   2b0b4:	6463      	str	r3, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   2b0b6:	2001      	movs	r0, #1
   2b0b8:	e027      	b.n	2b10a <tc_cmac_update+0xca>
		}
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   2b0ba:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2b0bc:	4621      	mov	r1, r4
   2b0be:	4620      	mov	r0, r4
   2b0c0:	f7ff fbe4 	bl	2a88c <tc_aes_encrypt>
   2b0c4:	e00d      	b.n	2b0e2 <tc_cmac_update+0xa2>
	}

	/* CBC encrypt each (except the last) of the data blocks */
	while (data_length > TC_AES_BLOCK_SIZE) {
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
			s->iv[i] ^= data[i];
   2b0c6:	5cea      	ldrb	r2, [r5, r3]
   2b0c8:	5ce1      	ldrb	r1, [r4, r3]
   2b0ca:	404a      	eors	r2, r1
   2b0cc:	54e2      	strb	r2, [r4, r3]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2b0ce:	3301      	adds	r3, #1
   2b0d0:	2b0f      	cmp	r3, #15
   2b0d2:	d9f8      	bls.n	2b0c6 <tc_cmac_update+0x86>
		}
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   2b0d4:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2b0d6:	4621      	mov	r1, r4
   2b0d8:	4620      	mov	r0, r4
   2b0da:	f7ff fbd7 	bl	2a88c <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   2b0de:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   2b0e0:	3e10      	subs	r6, #16
	while (data_length > TC_AES_BLOCK_SIZE) {
   2b0e2:	2e10      	cmp	r6, #16
   2b0e4:	d901      	bls.n	2b0ea <tc_cmac_update+0xaa>
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2b0e6:	2300      	movs	r3, #0
   2b0e8:	e7f2      	b.n	2b0d0 <tc_cmac_update+0x90>
	}

	if (data_length > 0) {
   2b0ea:	b90e      	cbnz	r6, 2b0f0 <tc_cmac_update+0xb0>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   2b0ec:	2001      	movs	r0, #1
   2b0ee:	e00c      	b.n	2b10a <tc_cmac_update+0xca>
		_copy(s->leftover, data_length, data, data_length);
   2b0f0:	4633      	mov	r3, r6
   2b0f2:	462a      	mov	r2, r5
   2b0f4:	4631      	mov	r1, r6
   2b0f6:	f104 0030 	add.w	r0, r4, #48	; 0x30
   2b0fa:	f001 f891 	bl	2c220 <_copy>
		s->leftover_offset = data_length;
   2b0fe:	6466      	str	r6, [r4, #68]	; 0x44
	return TC_CRYPTO_SUCCESS;
   2b100:	2001      	movs	r0, #1
   2b102:	e002      	b.n	2b10a <tc_cmac_update+0xca>
		return TC_CRYPTO_FAIL;
   2b104:	2000      	movs	r0, #0
}
   2b106:	4770      	bx	lr
		return  TC_CRYPTO_SUCCESS;
   2b108:	2001      	movs	r0, #1
}
   2b10a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   2b10c:	2000      	movs	r0, #0
   2b10e:	e7fc      	b.n	2b10a <tc_cmac_update+0xca>
		return TC_CRYPTO_FAIL;
   2b110:	2000      	movs	r0, #0
   2b112:	e7fa      	b.n	2b10a <tc_cmac_update+0xca>

0002b114 <tc_cmac_final>:
{
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   2b114:	b370      	cbz	r0, 2b174 <tc_cmac_final+0x60>
{
   2b116:	b570      	push	{r4, r5, r6, lr}
   2b118:	4606      	mov	r6, r0
	if (tag == (uint8_t *) 0 ||
   2b11a:	b369      	cbz	r1, 2b178 <tc_cmac_final+0x64>
   2b11c:	460d      	mov	r5, r1
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   2b11e:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   2b120:	2a10      	cmp	r2, #16
   2b122:	d102      	bne.n	2b12a <tc_cmac_final+0x16>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   2b124:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2b126:	2300      	movs	r3, #0
   2b128:	e018      	b.n	2b15c <tc_cmac_final+0x48>
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   2b12a:	f102 0030 	add.w	r0, r2, #48	; 0x30
   2b12e:	f1c2 0210 	rsb	r2, r2, #16
   2b132:	2100      	movs	r1, #0
   2b134:	4428      	add	r0, r5
   2b136:	f001 f87f 	bl	2c238 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   2b13a:	6c6b      	ldr	r3, [r5, #68]	; 0x44
   2b13c:	442b      	add	r3, r5
   2b13e:	2280      	movs	r2, #128	; 0x80
   2b140:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   2b144:	f105 0120 	add.w	r1, r5, #32
   2b148:	e7ed      	b.n	2b126 <tc_cmac_final+0x12>
		s->iv[i] ^= s->leftover[i] ^ k[i];
   2b14a:	18ea      	adds	r2, r5, r3
   2b14c:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
   2b150:	5ccc      	ldrb	r4, [r1, r3]
   2b152:	4054      	eors	r4, r2
   2b154:	5cea      	ldrb	r2, [r5, r3]
   2b156:	4062      	eors	r2, r4
   2b158:	54ea      	strb	r2, [r5, r3]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2b15a:	3301      	adds	r3, #1
   2b15c:	2b0f      	cmp	r3, #15
   2b15e:	d9f4      	bls.n	2b14a <tc_cmac_final+0x36>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   2b160:	6caa      	ldr	r2, [r5, #72]	; 0x48
   2b162:	4629      	mov	r1, r5
   2b164:	4630      	mov	r0, r6
   2b166:	f7ff fb91 	bl	2a88c <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   2b16a:	4628      	mov	r0, r5
   2b16c:	f7ff ff19 	bl	2afa2 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   2b170:	2001      	movs	r0, #1
}
   2b172:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   2b174:	2000      	movs	r0, #0
}
   2b176:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   2b178:	2000      	movs	r0, #0
   2b17a:	e7fa      	b.n	2b172 <tc_cmac_final+0x5e>

0002b17c <vli_numDigits>:
{

	wordcount_t i;
	/* Search from the end until we find a non-zero digit. We do it in reverse
	 * because we expect that most digits will be nonzero. */
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   2b17c:	3901      	subs	r1, #1
   2b17e:	b249      	sxtb	r1, r1
   2b180:	e001      	b.n	2b186 <vli_numDigits+0xa>
   2b182:	3901      	subs	r1, #1
   2b184:	b249      	sxtb	r1, r1
   2b186:	2900      	cmp	r1, #0
   2b188:	db03      	blt.n	2b192 <vli_numDigits+0x16>
   2b18a:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
   2b18e:	2b00      	cmp	r3, #0
   2b190:	d0f7      	beq.n	2b182 <vli_numDigits+0x6>
	}

	return (i + 1);
   2b192:	3101      	adds	r1, #1
}
   2b194:	b248      	sxtb	r0, r1
   2b196:	4770      	bx	lr

0002b198 <uECC_vli_rshift1>:
	return (!equal - 2 * neg);
}

/* Computes vli = vli >> 1. */
static void uECC_vli_rshift1(uECC_word_t *vli, wordcount_t num_words)
{
   2b198:	b410      	push	{r4}
	uECC_word_t *end = vli;
	uECC_word_t carry = 0;

	vli += num_words;
   2b19a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	uECC_word_t carry = 0;
   2b19e:	2300      	movs	r3, #0
	while (vli-- > end) {
   2b1a0:	e007      	b.n	2b1b2 <uECC_vli_rshift1+0x1a>
		uECC_word_t temp = *vli;
   2b1a2:	f851 2c04 	ldr.w	r2, [r1, #-4]
		*vli = (temp >> 1) | carry;
   2b1a6:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
   2b1aa:	f841 3c04 	str.w	r3, [r1, #-4]
		carry = temp << (uECC_WORD_BITS - 1);
   2b1ae:	07d3      	lsls	r3, r2, #31
	while (vli-- > end) {
   2b1b0:	4621      	mov	r1, r4
   2b1b2:	1f0c      	subs	r4, r1, #4
   2b1b4:	4281      	cmp	r1, r0
   2b1b6:	d8f4      	bhi.n	2b1a2 <uECC_vli_rshift1+0xa>
	}
}
   2b1b8:	bc10      	pop	{r4}
   2b1ba:	4770      	bx	lr

0002b1bc <muladd>:

static void muladd(uECC_word_t a, uECC_word_t b, uECC_word_t *r0,
		   uECC_word_t *r1, uECC_word_t *r2)
{
   2b1bc:	e92d 08f0 	stmdb	sp!, {r4, r5, r6, r7, fp}
   2b1c0:	9f05      	ldr	r7, [sp, #20]

	uECC_dword_t p = (uECC_dword_t)a * b;
   2b1c2:	fba0 0101 	umull	r0, r1, r0, r1
	uECC_dword_t r01 = ((uECC_dword_t)(*r1) << uECC_WORD_BITS) | *r0;
   2b1c6:	f04f 0b00 	mov.w	fp, #0
   2b1ca:	f8d3 c000 	ldr.w	ip, [r3]
   2b1ce:	6816      	ldr	r6, [r2, #0]
   2b1d0:	ea4b 0406 	orr.w	r4, fp, r6
	r01 += p;
   2b1d4:	eb14 0b00 	adds.w	fp, r4, r0
   2b1d8:	eb4c 0c01 	adc.w	ip, ip, r1
	*r2 += (r01 < p);
   2b1dc:	458c      	cmp	ip, r1
   2b1de:	bf08      	it	eq
   2b1e0:	4583      	cmpeq	fp, r0
   2b1e2:	bf34      	ite	cc
   2b1e4:	2001      	movcc	r0, #1
   2b1e6:	2000      	movcs	r0, #0
   2b1e8:	6839      	ldr	r1, [r7, #0]
   2b1ea:	4401      	add	r1, r0
   2b1ec:	6039      	str	r1, [r7, #0]
	*r1 = r01 >> uECC_WORD_BITS;
   2b1ee:	f8c3 c000 	str.w	ip, [r3]
	*r0 = (uECC_word_t)r01;
   2b1f2:	f8c2 b000 	str.w	fp, [r2]

}
   2b1f6:	e8bd 08f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp}
   2b1fa:	4770      	bx	lr

0002b1fc <uECC_vli_mult>:

/* Computes result = left * right. Result must be 2 * num_words long. */
static void uECC_vli_mult(uECC_word_t *result, const uECC_word_t *left,
			  const uECC_word_t *right, wordcount_t num_words)
{
   2b1fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b200:	b087      	sub	sp, #28
   2b202:	4682      	mov	sl, r0
   2b204:	460e      	mov	r6, r1
   2b206:	4617      	mov	r7, r2
   2b208:	461d      	mov	r5, r3

	uECC_word_t r0 = 0;
   2b20a:	2300      	movs	r3, #0
   2b20c:	9305      	str	r3, [sp, #20]
	uECC_word_t r1 = 0;
   2b20e:	9304      	str	r3, [sp, #16]
	uECC_word_t r2 = 0;
   2b210:	9303      	str	r3, [sp, #12]
	wordcount_t i, k;

	/* Compute each digit of result in sequence, maintaining the carries. */
	for (k = 0; k < num_words; ++k) {
   2b212:	4698      	mov	r8, r3
   2b214:	e01c      	b.n	2b250 <uECC_vli_mult+0x54>

		for (i = 0; i <= k; ++i) {
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   2b216:	eba8 0304 	sub.w	r3, r8, r4
   2b21a:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
   2b21e:	ab03      	add	r3, sp, #12
   2b220:	9300      	str	r3, [sp, #0]
   2b222:	ab04      	add	r3, sp, #16
   2b224:	aa05      	add	r2, sp, #20
   2b226:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
   2b22a:	f7ff ffc7 	bl	2b1bc <muladd>
		for (i = 0; i <= k; ++i) {
   2b22e:	3401      	adds	r4, #1
   2b230:	b264      	sxtb	r4, r4
   2b232:	4544      	cmp	r4, r8
   2b234:	ddef      	ble.n	2b216 <uECC_vli_mult+0x1a>
		}

		result[k] = r0;
   2b236:	9b05      	ldr	r3, [sp, #20]
   2b238:	f84a 3028 	str.w	r3, [sl, r8, lsl #2]
		r0 = r1;
   2b23c:	9b04      	ldr	r3, [sp, #16]
   2b23e:	9305      	str	r3, [sp, #20]
		r1 = r2;
   2b240:	9b03      	ldr	r3, [sp, #12]
   2b242:	9304      	str	r3, [sp, #16]
		r2 = 0;
   2b244:	2300      	movs	r3, #0
   2b246:	9303      	str	r3, [sp, #12]
	for (k = 0; k < num_words; ++k) {
   2b248:	f108 0801 	add.w	r8, r8, #1
   2b24c:	fa4f f888 	sxtb.w	r8, r8
   2b250:	45a8      	cmp	r8, r5
   2b252:	da01      	bge.n	2b258 <uECC_vli_mult+0x5c>
		for (i = 0; i <= k; ++i) {
   2b254:	2400      	movs	r4, #0
   2b256:	e7ec      	b.n	2b232 <uECC_vli_mult+0x36>
	}

	for (k = num_words; k < num_words * 2 - 1; ++k) {
   2b258:	46a9      	mov	r9, r5
   2b25a:	e01c      	b.n	2b296 <uECC_vli_mult+0x9a>

		for (i = (k + 1) - num_words; i < num_words; ++i) {
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   2b25c:	eba8 0304 	sub.w	r3, r8, r4
   2b260:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
   2b264:	ab03      	add	r3, sp, #12
   2b266:	9300      	str	r3, [sp, #0]
   2b268:	ab04      	add	r3, sp, #16
   2b26a:	aa05      	add	r2, sp, #20
   2b26c:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
   2b270:	f7ff ffa4 	bl	2b1bc <muladd>
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   2b274:	3401      	adds	r4, #1
   2b276:	b264      	sxtb	r4, r4
   2b278:	42ac      	cmp	r4, r5
   2b27a:	dbef      	blt.n	2b25c <uECC_vli_mult+0x60>
		}
		result[k] = r0;
   2b27c:	9b05      	ldr	r3, [sp, #20]
   2b27e:	f84a 3029 	str.w	r3, [sl, r9, lsl #2]
		r0 = r1;
   2b282:	9b04      	ldr	r3, [sp, #16]
   2b284:	9305      	str	r3, [sp, #20]
		r1 = r2;
   2b286:	9b03      	ldr	r3, [sp, #12]
   2b288:	9304      	str	r3, [sp, #16]
		r2 = 0;
   2b28a:	2300      	movs	r3, #0
   2b28c:	9303      	str	r3, [sp, #12]
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   2b28e:	f10b 0901 	add.w	r9, fp, #1
   2b292:	fa4f f989 	sxtb.w	r9, r9
   2b296:	46c8      	mov	r8, r9
   2b298:	006b      	lsls	r3, r5, #1
   2b29a:	3b01      	subs	r3, #1
   2b29c:	4599      	cmp	r9, r3
   2b29e:	da06      	bge.n	2b2ae <uECC_vli_mult+0xb2>
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   2b2a0:	fa5f fb89 	uxtb.w	fp, r9
   2b2a4:	ebab 0405 	sub.w	r4, fp, r5
   2b2a8:	3401      	adds	r4, #1
   2b2aa:	b264      	sxtb	r4, r4
   2b2ac:	e7e4      	b.n	2b278 <uECC_vli_mult+0x7c>
	}
	result[num_words * 2 - 1] = r0;
   2b2ae:	00ea      	lsls	r2, r5, #3
   2b2b0:	3a04      	subs	r2, #4
   2b2b2:	9b05      	ldr	r3, [sp, #20]
   2b2b4:	f84a 3002 	str.w	r3, [sl, r2]
}
   2b2b8:	b007      	add	sp, #28
   2b2ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0002b2c0 <uECC_set_rng>:
	g_rng_function = rng_function;
   2b2c0:	4b01      	ldr	r3, [pc, #4]	; (2b2c8 <uECC_set_rng+0x8>)
   2b2c2:	6018      	str	r0, [r3, #0]
}
   2b2c4:	4770      	bx	lr
   2b2c6:	bf00      	nop
   2b2c8:	200032cc 	.word	0x200032cc

0002b2cc <uECC_get_rng>:
}
   2b2cc:	4b01      	ldr	r3, [pc, #4]	; (2b2d4 <uECC_get_rng+0x8>)
   2b2ce:	6818      	ldr	r0, [r3, #0]
   2b2d0:	4770      	bx	lr
   2b2d2:	bf00      	nop
   2b2d4:	200032cc 	.word	0x200032cc

0002b2d8 <uECC_vli_clear>:
	for (i = 0; i < num_words; ++i) {
   2b2d8:	2300      	movs	r3, #0
   2b2da:	e004      	b.n	2b2e6 <uECC_vli_clear+0xe>
		 vli[i] = 0;
   2b2dc:	2200      	movs	r2, #0
   2b2de:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   2b2e2:	3301      	adds	r3, #1
   2b2e4:	b25b      	sxtb	r3, r3
   2b2e6:	428b      	cmp	r3, r1
   2b2e8:	dbf8      	blt.n	2b2dc <uECC_vli_clear+0x4>
}
   2b2ea:	4770      	bx	lr

0002b2ec <uECC_vli_isZero>:
	for (i = 0; i < num_words; ++i) {
   2b2ec:	2300      	movs	r3, #0
	uECC_word_t bits = 0;
   2b2ee:	461a      	mov	r2, r3
	for (i = 0; i < num_words; ++i) {
   2b2f0:	428b      	cmp	r3, r1
   2b2f2:	da0c      	bge.n	2b30e <uECC_vli_isZero+0x22>
{
   2b2f4:	b410      	push	{r4}
		bits |= vli[i];
   2b2f6:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   2b2fa:	4322      	orrs	r2, r4
	for (i = 0; i < num_words; ++i) {
   2b2fc:	3301      	adds	r3, #1
   2b2fe:	b25b      	sxtb	r3, r3
   2b300:	428b      	cmp	r3, r1
   2b302:	dbf8      	blt.n	2b2f6 <uECC_vli_isZero+0xa>
}
   2b304:	fab2 f082 	clz	r0, r2
   2b308:	0940      	lsrs	r0, r0, #5
   2b30a:	bc10      	pop	{r4}
   2b30c:	4770      	bx	lr
   2b30e:	fab3 f083 	clz	r0, r3
   2b312:	0940      	lsrs	r0, r0, #5
   2b314:	4770      	bx	lr

0002b316 <uECC_vli_testBit>:
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   2b316:	114b      	asrs	r3, r1, #5
   2b318:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   2b31c:	f001 011f 	and.w	r1, r1, #31
   2b320:	2301      	movs	r3, #1
   2b322:	fa03 f101 	lsl.w	r1, r3, r1
}
   2b326:	4008      	ands	r0, r1
   2b328:	4770      	bx	lr

0002b32a <uECC_vli_numBits>:
{
   2b32a:	b510      	push	{r4, lr}
   2b32c:	4604      	mov	r4, r0
	wordcount_t num_digits = vli_numDigits(vli, max_words);
   2b32e:	f7ff ff25 	bl	2b17c <vli_numDigits>
	if (num_digits == 0) {
   2b332:	b190      	cbz	r0, 2b35a <uECC_vli_numBits+0x30>
   2b334:	4602      	mov	r2, r0
	digit = vli[num_digits - 1];
   2b336:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   2b33a:	3b01      	subs	r3, #1
   2b33c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
	for (i = 0; digit; ++i) {
   2b340:	2100      	movs	r1, #0
   2b342:	e001      	b.n	2b348 <uECC_vli_numBits+0x1e>
		digit >>= 1;
   2b344:	085b      	lsrs	r3, r3, #1
	for (i = 0; digit; ++i) {
   2b346:	3101      	adds	r1, #1
   2b348:	2b00      	cmp	r3, #0
   2b34a:	d1fb      	bne.n	2b344 <uECC_vli_numBits+0x1a>
	return (((bitcount_t)(num_digits - 1) << uECC_WORD_BITS_SHIFT) + i);
   2b34c:	1e50      	subs	r0, r2, #1
   2b34e:	b280      	uxth	r0, r0
   2b350:	0140      	lsls	r0, r0, #5
   2b352:	b280      	uxth	r0, r0
   2b354:	4408      	add	r0, r1
   2b356:	b200      	sxth	r0, r0
}
   2b358:	bd10      	pop	{r4, pc}
		return 0;
   2b35a:	2000      	movs	r0, #0
   2b35c:	e7fc      	b.n	2b358 <uECC_vli_numBits+0x2e>

0002b35e <uECC_vli_set>:
	for (i = 0; i < num_words; ++i) {
   2b35e:	2300      	movs	r3, #0
   2b360:	4293      	cmp	r3, r2
   2b362:	da0a      	bge.n	2b37a <uECC_vli_set+0x1c>
{
   2b364:	b410      	push	{r4}
		dest[i] = src[i];
   2b366:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
   2b36a:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   2b36e:	3301      	adds	r3, #1
   2b370:	b25b      	sxtb	r3, r3
   2b372:	4293      	cmp	r3, r2
   2b374:	dbf7      	blt.n	2b366 <uECC_vli_set+0x8>
}
   2b376:	bc10      	pop	{r4}
   2b378:	4770      	bx	lr
   2b37a:	4770      	bx	lr

0002b37c <uECC_vli_cmp_unsafe>:
	for (i = num_words - 1; i >= 0; --i) {
   2b37c:	3a01      	subs	r2, #1
   2b37e:	b252      	sxtb	r2, r2
   2b380:	2a00      	cmp	r2, #0
   2b382:	db13      	blt.n	2b3ac <uECC_vli_cmp_unsafe+0x30>
{
   2b384:	b410      	push	{r4}
		if (left[i] > right[i]) {
   2b386:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
   2b38a:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
   2b38e:	429c      	cmp	r4, r3
   2b390:	d807      	bhi.n	2b3a2 <uECC_vli_cmp_unsafe+0x26>
		} else if (left[i] < right[i]) {
   2b392:	d308      	bcc.n	2b3a6 <uECC_vli_cmp_unsafe+0x2a>
	for (i = num_words - 1; i >= 0; --i) {
   2b394:	3a01      	subs	r2, #1
   2b396:	b252      	sxtb	r2, r2
   2b398:	2a00      	cmp	r2, #0
   2b39a:	daf4      	bge.n	2b386 <uECC_vli_cmp_unsafe+0xa>
	return 0;
   2b39c:	2000      	movs	r0, #0
}
   2b39e:	bc10      	pop	{r4}
   2b3a0:	4770      	bx	lr
			return 1;
   2b3a2:	2001      	movs	r0, #1
   2b3a4:	e7fb      	b.n	2b39e <uECC_vli_cmp_unsafe+0x22>
			return -1;
   2b3a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2b3aa:	e7f8      	b.n	2b39e <uECC_vli_cmp_unsafe+0x22>
	return 0;
   2b3ac:	2000      	movs	r0, #0
}
   2b3ae:	4770      	bx	lr

0002b3b0 <uECC_vli_equal>:
{
   2b3b0:	b430      	push	{r4, r5}
	for (i = num_words - 1; i >= 0; --i) {
   2b3b2:	3a01      	subs	r2, #1
   2b3b4:	b252      	sxtb	r2, r2
	uECC_word_t diff = 0;
   2b3b6:	2400      	movs	r4, #0
	for (i = num_words - 1; i >= 0; --i) {
   2b3b8:	e007      	b.n	2b3ca <uECC_vli_equal+0x1a>
		diff |= (left[i] ^ right[i]);
   2b3ba:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
   2b3be:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
   2b3c2:	406b      	eors	r3, r5
   2b3c4:	431c      	orrs	r4, r3
	for (i = num_words - 1; i >= 0; --i) {
   2b3c6:	3a01      	subs	r2, #1
   2b3c8:	b252      	sxtb	r2, r2
   2b3ca:	2a00      	cmp	r2, #0
   2b3cc:	daf5      	bge.n	2b3ba <uECC_vli_equal+0xa>
}
   2b3ce:	1c20      	adds	r0, r4, #0
   2b3d0:	bf18      	it	ne
   2b3d2:	2001      	movne	r0, #1
   2b3d4:	bc30      	pop	{r4, r5}
   2b3d6:	4770      	bx	lr

0002b3d8 <cond_set>:
	return (p_true*(cond)) | (p_false*(!cond));
   2b3d8:	fb02 f000 	mul.w	r0, r2, r0
   2b3dc:	2a00      	cmp	r2, #0
   2b3de:	bf0c      	ite	eq
   2b3e0:	460a      	moveq	r2, r1
   2b3e2:	2200      	movne	r2, #0
}
   2b3e4:	4310      	orrs	r0, r2
   2b3e6:	4770      	bx	lr

0002b3e8 <uECC_vli_add>:
{
   2b3e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2b3ec:	4681      	mov	r9, r0
   2b3ee:	4688      	mov	r8, r1
   2b3f0:	4617      	mov	r7, r2
   2b3f2:	461e      	mov	r6, r3
	for (i = 0; i < num_words; ++i) {
   2b3f4:	2400      	movs	r4, #0
	uECC_word_t carry = 0;
   2b3f6:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   2b3f8:	e013      	b.n	2b422 <uECC_vli_add+0x3a>
		uECC_word_t sum = left[i] + right[i] + carry;
   2b3fa:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
   2b3fe:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
   2b402:	441d      	add	r5, r3
   2b404:	4405      	add	r5, r0
		uECC_word_t val = (sum < left[i]);
   2b406:	42ab      	cmp	r3, r5
		carry = cond_set(val, carry, (sum != left[i]));
   2b408:	bf14      	ite	ne
   2b40a:	2201      	movne	r2, #1
   2b40c:	2200      	moveq	r2, #0
   2b40e:	4601      	mov	r1, r0
   2b410:	bf8c      	ite	hi
   2b412:	2001      	movhi	r0, #1
   2b414:	2000      	movls	r0, #0
   2b416:	f7ff ffdf 	bl	2b3d8 <cond_set>
		result[i] = sum;
   2b41a:	f849 5024 	str.w	r5, [r9, r4, lsl #2]
	for (i = 0; i < num_words; ++i) {
   2b41e:	3401      	adds	r4, #1
   2b420:	b264      	sxtb	r4, r4
   2b422:	42b4      	cmp	r4, r6
   2b424:	dbe9      	blt.n	2b3fa <uECC_vli_add+0x12>
}
   2b426:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002b42a <vli_modInv_update>:
#define EVEN(vli) (!(vli[0] & 1))

static void vli_modInv_update(uECC_word_t *uv,
			      const uECC_word_t *mod,
			      wordcount_t num_words)
{
   2b42a:	b570      	push	{r4, r5, r6, lr}
   2b42c:	4606      	mov	r6, r0
   2b42e:	4614      	mov	r4, r2

	uECC_word_t carry = 0;

	if (!EVEN(uv)) {
   2b430:	6800      	ldr	r0, [r0, #0]
   2b432:	f010 0501 	ands.w	r5, r0, #1
   2b436:	d10e      	bne.n	2b456 <vli_modInv_update+0x2c>
		carry = uECC_vli_add(uv, uv, mod, num_words);
	}
	uECC_vli_rshift1(uv, num_words);
   2b438:	4621      	mov	r1, r4
   2b43a:	4630      	mov	r0, r6
   2b43c:	f7ff feac 	bl	2b198 <uECC_vli_rshift1>
	if (carry) {
   2b440:	b145      	cbz	r5, 2b454 <vli_modInv_update+0x2a>
		uv[num_words - 1] |= HIGH_BIT_SET;
   2b442:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   2b446:	3c01      	subs	r4, #1
   2b448:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
   2b44c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   2b450:	f846 3024 	str.w	r3, [r6, r4, lsl #2]
	}
}
   2b454:	bd70      	pop	{r4, r5, r6, pc}
		carry = uECC_vli_add(uv, uv, mod, num_words);
   2b456:	4613      	mov	r3, r2
   2b458:	460a      	mov	r2, r1
   2b45a:	4631      	mov	r1, r6
   2b45c:	4630      	mov	r0, r6
   2b45e:	f7ff ffc3 	bl	2b3e8 <uECC_vli_add>
   2b462:	4605      	mov	r5, r0
   2b464:	e7e8      	b.n	2b438 <vli_modInv_update+0xe>

0002b466 <uECC_vli_sub>:
{
   2b466:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2b46a:	4681      	mov	r9, r0
   2b46c:	4688      	mov	r8, r1
   2b46e:	4617      	mov	r7, r2
   2b470:	461e      	mov	r6, r3
	for (i = 0; i < num_words; ++i) {
   2b472:	2400      	movs	r4, #0
	uECC_word_t borrow = 0;
   2b474:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   2b476:	e013      	b.n	2b4a0 <uECC_vli_sub+0x3a>
		uECC_word_t diff = left[i] - right[i] - borrow;
   2b478:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
   2b47c:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
   2b480:	1b5d      	subs	r5, r3, r5
   2b482:	1a2d      	subs	r5, r5, r0
		uECC_word_t val = (diff > left[i]);
   2b484:	42ab      	cmp	r3, r5
		borrow = cond_set(val, borrow, (diff != left[i]));
   2b486:	bf14      	ite	ne
   2b488:	2201      	movne	r2, #1
   2b48a:	2200      	moveq	r2, #0
   2b48c:	4601      	mov	r1, r0
   2b48e:	bf34      	ite	cc
   2b490:	2001      	movcc	r0, #1
   2b492:	2000      	movcs	r0, #0
   2b494:	f7ff ffa0 	bl	2b3d8 <cond_set>
		result[i] = diff;
   2b498:	f849 5024 	str.w	r5, [r9, r4, lsl #2]
	for (i = 0; i < num_words; ++i) {
   2b49c:	3401      	adds	r4, #1
   2b49e:	b264      	sxtb	r4, r4
   2b4a0:	42b4      	cmp	r4, r6
   2b4a2:	dbe9      	blt.n	2b478 <uECC_vli_sub+0x12>
}
   2b4a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002b4a8 <vli_mmod_fast_secp256r1>:
{
	return &curve_secp256r1;
}

void vli_mmod_fast_secp256r1(unsigned int *result, unsigned int*product)
{
   2b4a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   2b4aa:	b089      	sub	sp, #36	; 0x24
   2b4ac:	4606      	mov	r6, r0
   2b4ae:	460c      	mov	r4, r1
	unsigned int tmp[NUM_ECC_WORDS];
	int carry;

	/* t */
	uECC_vli_set(result, product, NUM_ECC_WORDS);
   2b4b0:	2208      	movs	r2, #8
   2b4b2:	f7ff ff54 	bl	2b35e <uECC_vli_set>

	/* s1 */
	tmp[0] = tmp[1] = tmp[2] = 0;
   2b4b6:	2700      	movs	r7, #0
   2b4b8:	9702      	str	r7, [sp, #8]
   2b4ba:	9701      	str	r7, [sp, #4]
   2b4bc:	9700      	str	r7, [sp, #0]
	tmp[3] = product[11];
   2b4be:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2b4c0:	9303      	str	r3, [sp, #12]
	tmp[4] = product[12];
   2b4c2:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2b4c4:	9304      	str	r3, [sp, #16]
	tmp[5] = product[13];
   2b4c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2b4c8:	9305      	str	r3, [sp, #20]
	tmp[6] = product[14];
   2b4ca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   2b4cc:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
   2b4ce:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   2b4d0:	9307      	str	r3, [sp, #28]
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   2b4d2:	2308      	movs	r3, #8
   2b4d4:	466a      	mov	r2, sp
   2b4d6:	4669      	mov	r1, sp
   2b4d8:	4668      	mov	r0, sp
   2b4da:	f7ff ff85 	bl	2b3e8 <uECC_vli_add>
   2b4de:	4605      	mov	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   2b4e0:	2308      	movs	r3, #8
   2b4e2:	466a      	mov	r2, sp
   2b4e4:	4631      	mov	r1, r6
   2b4e6:	4630      	mov	r0, r6
   2b4e8:	f7ff ff7e 	bl	2b3e8 <uECC_vli_add>
   2b4ec:	4405      	add	r5, r0

	/* s2 */
	tmp[3] = product[12];
   2b4ee:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2b4f0:	9303      	str	r3, [sp, #12]
	tmp[4] = product[13];
   2b4f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2b4f4:	9304      	str	r3, [sp, #16]
	tmp[5] = product[14];
   2b4f6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   2b4f8:	9305      	str	r3, [sp, #20]
	tmp[6] = product[15];
   2b4fa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   2b4fc:	9306      	str	r3, [sp, #24]
	tmp[7] = 0;
   2b4fe:	9707      	str	r7, [sp, #28]
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   2b500:	2308      	movs	r3, #8
   2b502:	466a      	mov	r2, sp
   2b504:	4669      	mov	r1, sp
   2b506:	4668      	mov	r0, sp
   2b508:	f7ff ff6e 	bl	2b3e8 <uECC_vli_add>
   2b50c:	4405      	add	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   2b50e:	2308      	movs	r3, #8
   2b510:	466a      	mov	r2, sp
   2b512:	4631      	mov	r1, r6
   2b514:	4630      	mov	r0, r6
   2b516:	f7ff ff67 	bl	2b3e8 <uECC_vli_add>
   2b51a:	4405      	add	r5, r0

	/* s3 */
	tmp[0] = product[8];
   2b51c:	6a23      	ldr	r3, [r4, #32]
   2b51e:	9300      	str	r3, [sp, #0]
	tmp[1] = product[9];
   2b520:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2b522:	9301      	str	r3, [sp, #4]
	tmp[2] = product[10];
   2b524:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2b526:	9302      	str	r3, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
   2b528:	9705      	str	r7, [sp, #20]
   2b52a:	9704      	str	r7, [sp, #16]
   2b52c:	9703      	str	r7, [sp, #12]
	tmp[6] = product[14];
   2b52e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   2b530:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
   2b532:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   2b534:	9307      	str	r3, [sp, #28]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   2b536:	2308      	movs	r3, #8
   2b538:	466a      	mov	r2, sp
   2b53a:	4631      	mov	r1, r6
   2b53c:	4630      	mov	r0, r6
   2b53e:	f7ff ff53 	bl	2b3e8 <uECC_vli_add>
   2b542:	4405      	add	r5, r0

	/* s4 */
	tmp[0] = product[9];
   2b544:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2b546:	9300      	str	r3, [sp, #0]
	tmp[1] = product[10];
   2b548:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2b54a:	9301      	str	r3, [sp, #4]
	tmp[2] = product[11];
   2b54c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2b54e:	9302      	str	r3, [sp, #8]
	tmp[3] = product[13];
   2b550:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2b552:	9303      	str	r3, [sp, #12]
	tmp[4] = product[14];
   2b554:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   2b556:	9204      	str	r2, [sp, #16]
	tmp[5] = product[15];
   2b558:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   2b55a:	9205      	str	r2, [sp, #20]
	tmp[6] = product[13];
   2b55c:	9306      	str	r3, [sp, #24]
	tmp[7] = product[8];
   2b55e:	6a23      	ldr	r3, [r4, #32]
   2b560:	9307      	str	r3, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   2b562:	2308      	movs	r3, #8
   2b564:	466a      	mov	r2, sp
   2b566:	4631      	mov	r1, r6
   2b568:	4630      	mov	r0, r6
   2b56a:	f7ff ff3d 	bl	2b3e8 <uECC_vli_add>
   2b56e:	4405      	add	r5, r0

	/* d1 */
	tmp[0] = product[11];
   2b570:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2b572:	9300      	str	r3, [sp, #0]
	tmp[1] = product[12];
   2b574:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2b576:	9301      	str	r3, [sp, #4]
	tmp[2] = product[13];
   2b578:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2b57a:	9302      	str	r3, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
   2b57c:	9705      	str	r7, [sp, #20]
   2b57e:	9704      	str	r7, [sp, #16]
   2b580:	9703      	str	r7, [sp, #12]
	tmp[6] = product[8];
   2b582:	6a23      	ldr	r3, [r4, #32]
   2b584:	9306      	str	r3, [sp, #24]
	tmp[7] = product[10];
   2b586:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2b588:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   2b58a:	2308      	movs	r3, #8
   2b58c:	466a      	mov	r2, sp
   2b58e:	4631      	mov	r1, r6
   2b590:	4630      	mov	r0, r6
   2b592:	f7ff ff68 	bl	2b466 <uECC_vli_sub>
   2b596:	1a2d      	subs	r5, r5, r0

	/* d2 */
	tmp[0] = product[12];
   2b598:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2b59a:	9300      	str	r3, [sp, #0]
	tmp[1] = product[13];
   2b59c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2b59e:	9301      	str	r3, [sp, #4]
	tmp[2] = product[14];
   2b5a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   2b5a2:	9302      	str	r3, [sp, #8]
	tmp[3] = product[15];
   2b5a4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   2b5a6:	9303      	str	r3, [sp, #12]
	tmp[4] = tmp[5] = 0;
   2b5a8:	9705      	str	r7, [sp, #20]
   2b5aa:	9704      	str	r7, [sp, #16]
	tmp[6] = product[9];
   2b5ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2b5ae:	9306      	str	r3, [sp, #24]
	tmp[7] = product[11];
   2b5b0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2b5b2:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   2b5b4:	2308      	movs	r3, #8
   2b5b6:	466a      	mov	r2, sp
   2b5b8:	4631      	mov	r1, r6
   2b5ba:	4630      	mov	r0, r6
   2b5bc:	f7ff ff53 	bl	2b466 <uECC_vli_sub>
   2b5c0:	1a2d      	subs	r5, r5, r0

	/* d3 */
	tmp[0] = product[13];
   2b5c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2b5c4:	9300      	str	r3, [sp, #0]
	tmp[1] = product[14];
   2b5c6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   2b5c8:	9301      	str	r3, [sp, #4]
	tmp[2] = product[15];
   2b5ca:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   2b5cc:	9302      	str	r3, [sp, #8]
	tmp[3] = product[8];
   2b5ce:	6a23      	ldr	r3, [r4, #32]
   2b5d0:	9303      	str	r3, [sp, #12]
	tmp[4] = product[9];
   2b5d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2b5d4:	9304      	str	r3, [sp, #16]
	tmp[5] = product[10];
   2b5d6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2b5d8:	9305      	str	r3, [sp, #20]
	tmp[6] = 0;
   2b5da:	9706      	str	r7, [sp, #24]
	tmp[7] = product[12];
   2b5dc:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2b5de:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   2b5e0:	2308      	movs	r3, #8
   2b5e2:	466a      	mov	r2, sp
   2b5e4:	4631      	mov	r1, r6
   2b5e6:	4630      	mov	r0, r6
   2b5e8:	f7ff ff3d 	bl	2b466 <uECC_vli_sub>
   2b5ec:	1a2d      	subs	r5, r5, r0

	/* d4 */
	tmp[0] = product[14];
   2b5ee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   2b5f0:	9300      	str	r3, [sp, #0]
	tmp[1] = product[15];
   2b5f2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   2b5f4:	9301      	str	r3, [sp, #4]
	tmp[2] = 0;
   2b5f6:	9702      	str	r7, [sp, #8]
	tmp[3] = product[9];
   2b5f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2b5fa:	9303      	str	r3, [sp, #12]
	tmp[4] = product[10];
   2b5fc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2b5fe:	9304      	str	r3, [sp, #16]
	tmp[5] = product[11];
   2b600:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2b602:	9305      	str	r3, [sp, #20]
	tmp[6] = 0;
   2b604:	9706      	str	r7, [sp, #24]
	tmp[7] = product[13];
   2b606:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2b608:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   2b60a:	2308      	movs	r3, #8
   2b60c:	466a      	mov	r2, sp
   2b60e:	4631      	mov	r1, r6
   2b610:	4630      	mov	r0, r6
   2b612:	f7ff ff28 	bl	2b466 <uECC_vli_sub>

	if (carry < 0) {
   2b616:	1a2d      	subs	r5, r5, r0
   2b618:	d50f      	bpl.n	2b63a <vli_mmod_fast_secp256r1+0x192>
		do {
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
   2b61a:	2308      	movs	r3, #8
   2b61c:	4a0c      	ldr	r2, [pc, #48]	; (2b650 <vli_mmod_fast_secp256r1+0x1a8>)
   2b61e:	4631      	mov	r1, r6
   2b620:	4630      	mov	r0, r6
   2b622:	f7ff fee1 	bl	2b3e8 <uECC_vli_add>
		}
		while (carry < 0);
   2b626:	182d      	adds	r5, r5, r0
   2b628:	d4f7      	bmi.n	2b61a <vli_mmod_fast_secp256r1+0x172>
   2b62a:	e00f      	b.n	2b64c <vli_mmod_fast_secp256r1+0x1a4>
	} else  {
		while (carry || 
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
			carry -= uECC_vli_sub(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
   2b62c:	2308      	movs	r3, #8
   2b62e:	4a08      	ldr	r2, [pc, #32]	; (2b650 <vli_mmod_fast_secp256r1+0x1a8>)
   2b630:	4631      	mov	r1, r6
   2b632:	4630      	mov	r0, r6
   2b634:	f7ff ff17 	bl	2b466 <uECC_vli_sub>
   2b638:	1a2d      	subs	r5, r5, r0
		while (carry || 
   2b63a:	2d00      	cmp	r5, #0
   2b63c:	d1f6      	bne.n	2b62c <vli_mmod_fast_secp256r1+0x184>
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
   2b63e:	2208      	movs	r2, #8
   2b640:	4631      	mov	r1, r6
   2b642:	4803      	ldr	r0, [pc, #12]	; (2b650 <vli_mmod_fast_secp256r1+0x1a8>)
   2b644:	f7ff fe9a 	bl	2b37c <uECC_vli_cmp_unsafe>
		while (carry || 
   2b648:	2801      	cmp	r0, #1
   2b64a:	d1ef      	bne.n	2b62c <vli_mmod_fast_secp256r1+0x184>
		}
	}
}
   2b64c:	b009      	add	sp, #36	; 0x24
   2b64e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2b650:	00032b00 	.word	0x00032b00

0002b654 <uECC_vli_modAdd>:
{
   2b654:	b570      	push	{r4, r5, r6, lr}
   2b656:	4605      	mov	r5, r0
   2b658:	461e      	mov	r6, r3
   2b65a:	f99d 4010 	ldrsb.w	r4, [sp, #16]
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   2b65e:	4623      	mov	r3, r4
   2b660:	f7ff fec2 	bl	2b3e8 <uECC_vli_add>
	if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
   2b664:	b930      	cbnz	r0, 2b674 <uECC_vli_modAdd+0x20>
   2b666:	4622      	mov	r2, r4
   2b668:	4629      	mov	r1, r5
   2b66a:	4630      	mov	r0, r6
   2b66c:	f7ff fe86 	bl	2b37c <uECC_vli_cmp_unsafe>
   2b670:	2801      	cmp	r0, #1
   2b672:	d005      	beq.n	2b680 <uECC_vli_modAdd+0x2c>
		uECC_vli_sub(result, result, mod, num_words);
   2b674:	4623      	mov	r3, r4
   2b676:	4632      	mov	r2, r6
   2b678:	4629      	mov	r1, r5
   2b67a:	4628      	mov	r0, r5
   2b67c:	f7ff fef3 	bl	2b466 <uECC_vli_sub>
}
   2b680:	bd70      	pop	{r4, r5, r6, pc}

0002b682 <uECC_vli_modSub>:
{
   2b682:	b570      	push	{r4, r5, r6, lr}
   2b684:	4605      	mov	r5, r0
   2b686:	461e      	mov	r6, r3
   2b688:	f99d 4010 	ldrsb.w	r4, [sp, #16]
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   2b68c:	4623      	mov	r3, r4
   2b68e:	f7ff feea 	bl	2b466 <uECC_vli_sub>
	if (l_borrow) {
   2b692:	b900      	cbnz	r0, 2b696 <uECC_vli_modSub+0x14>
}
   2b694:	bd70      	pop	{r4, r5, r6, pc}
		uECC_vli_add(result, result, mod, num_words);
   2b696:	4623      	mov	r3, r4
   2b698:	4632      	mov	r2, r6
   2b69a:	4629      	mov	r1, r5
   2b69c:	4628      	mov	r0, r5
   2b69e:	f7ff fea3 	bl	2b3e8 <uECC_vli_add>
}
   2b6a2:	e7f7      	b.n	2b694 <uECC_vli_modSub+0x12>

0002b6a4 <uECC_vli_mmod>:
{
   2b6a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2b6a8:	b0a2      	sub	sp, #136	; 0x88
   2b6aa:	4682      	mov	sl, r0
   2b6ac:	4691      	mov	r9, r2
   2b6ae:	461c      	mov	r4, r3
	uECC_word_t *v[2] = {tmp, product};
   2b6b0:	ab02      	add	r3, sp, #8
   2b6b2:	9300      	str	r3, [sp, #0]
   2b6b4:	9101      	str	r1, [sp, #4]
	bitcount_t shift = (num_words * 2 * uECC_WORD_BITS) -
   2b6b6:	01a6      	lsls	r6, r4, #6
   2b6b8:	b2b6      	uxth	r6, r6
			   uECC_vli_numBits(mod, num_words);
   2b6ba:	4621      	mov	r1, r4
   2b6bc:	4610      	mov	r0, r2
   2b6be:	f7ff fe34 	bl	2b32a <uECC_vli_numBits>
   2b6c2:	b280      	uxth	r0, r0
	bitcount_t shift = (num_words * 2 * uECC_WORD_BITS) -
   2b6c4:	1a36      	subs	r6, r6, r0
   2b6c6:	b236      	sxth	r6, r6
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   2b6c8:	46b0      	mov	r8, r6
   2b6ca:	2e00      	cmp	r6, #0
   2b6cc:	db11      	blt.n	2b6f2 <uECC_vli_mmod+0x4e>
   2b6ce:	f348 1847 	sbfx	r8, r8, #5, #8
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   2b6d2:	4273      	negs	r3, r6
   2b6d4:	f006 051f 	and.w	r5, r6, #31
   2b6d8:	f003 031f 	and.w	r3, r3, #31
   2b6dc:	bf58      	it	pl
   2b6de:	425d      	negpl	r5, r3
	uECC_vli_clear(mod_multiple, word_shift);
   2b6e0:	4641      	mov	r1, r8
   2b6e2:	a812      	add	r0, sp, #72	; 0x48
   2b6e4:	f7ff fdf8 	bl	2b2d8 <uECC_vli_clear>
	if (bit_shift > 0) {
   2b6e8:	2d00      	cmp	r5, #0
   2b6ea:	dd1a      	ble.n	2b722 <uECC_vli_mmod+0x7e>
	uECC_word_t carry = 0;
   2b6ec:	2200      	movs	r2, #0
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   2b6ee:	4613      	mov	r3, r2
   2b6f0:	e013      	b.n	2b71a <uECC_vli_mmod+0x76>
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   2b6f2:	f106 081f 	add.w	r8, r6, #31
   2b6f6:	e7ea      	b.n	2b6ce <uECC_vli_mmod+0x2a>
			mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
   2b6f8:	f859 7023 	ldr.w	r7, [r9, r3, lsl #2]
   2b6fc:	fa07 f005 	lsl.w	r0, r7, r5
   2b700:	eb08 0103 	add.w	r1, r8, r3
   2b704:	4302      	orrs	r2, r0
   2b706:	a822      	add	r0, sp, #136	; 0x88
   2b708:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   2b70c:	f841 2c40 	str.w	r2, [r1, #-64]
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   2b710:	f1c5 0220 	rsb	r2, r5, #32
   2b714:	fa27 f202 	lsr.w	r2, r7, r2
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   2b718:	3301      	adds	r3, #1
   2b71a:	429c      	cmp	r4, r3
   2b71c:	d8ec      	bhi.n	2b6f8 <uECC_vli_mmod+0x54>
		uECC_word_t borrow = 0;
   2b71e:	2501      	movs	r5, #1
   2b720:	e04a      	b.n	2b7b8 <uECC_vli_mmod+0x114>
		uECC_vli_set(mod_multiple + word_shift, mod, num_words);
   2b722:	4622      	mov	r2, r4
   2b724:	4649      	mov	r1, r9
   2b726:	ab12      	add	r3, sp, #72	; 0x48
   2b728:	eb03 0088 	add.w	r0, r3, r8, lsl #2
   2b72c:	f7ff fe17 	bl	2b35e <uECC_vli_set>
   2b730:	e7f5      	b.n	2b71e <uECC_vli_mmod+0x7a>
			v[1 - index][i] = diff;
   2b732:	f1c5 0101 	rsb	r1, r5, #1
   2b736:	af22      	add	r7, sp, #136	; 0x88
   2b738:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   2b73c:	f851 1c88 	ldr.w	r1, [r1, #-136]
   2b740:	f841 200c 	str.w	r2, [r1, ip]
		for (i = 0; i < num_words * 2; ++i) {
   2b744:	3301      	adds	r3, #1
   2b746:	b25b      	sxtb	r3, r3
   2b748:	ebb3 0f44 	cmp.w	r3, r4, lsl #1
   2b74c:	da16      	bge.n	2b77c <uECC_vli_mmod+0xd8>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   2b74e:	aa22      	add	r2, sp, #136	; 0x88
   2b750:	eb02 0285 	add.w	r2, r2, r5, lsl #2
   2b754:	f852 2c88 	ldr.w	r2, [r2, #-136]
   2b758:	ea4f 0c83 	mov.w	ip, r3, lsl #2
   2b75c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   2b760:	aa22      	add	r2, sp, #136	; 0x88
   2b762:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   2b766:	f852 2c40 	ldr.w	r2, [r2, #-64]
   2b76a:	1a8a      	subs	r2, r1, r2
   2b76c:	1a12      	subs	r2, r2, r0
			if (diff != v[index][i]) {
   2b76e:	4291      	cmp	r1, r2
   2b770:	d0df      	beq.n	2b732 <uECC_vli_mmod+0x8e>
				borrow = (diff > v[index][i]);
   2b772:	4291      	cmp	r1, r2
   2b774:	bf2c      	ite	cs
   2b776:	2000      	movcs	r0, #0
   2b778:	2001      	movcc	r0, #1
   2b77a:	e7da      	b.n	2b732 <uECC_vli_mmod+0x8e>
		index = !(index ^ borrow);
   2b77c:	4285      	cmp	r5, r0
   2b77e:	bf14      	ite	ne
   2b780:	2500      	movne	r5, #0
   2b782:	2501      	moveq	r5, #1
		uECC_vli_rshift1(mod_multiple, num_words);
   2b784:	4621      	mov	r1, r4
   2b786:	a812      	add	r0, sp, #72	; 0x48
   2b788:	f7ff fd06 	bl	2b198 <uECC_vli_rshift1>
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   2b78c:	1e63      	subs	r3, r4, #1
   2b78e:	aa22      	add	r2, sp, #136	; 0x88
   2b790:	eb02 0884 	add.w	r8, r2, r4, lsl #2
   2b794:	f858 1c40 	ldr.w	r1, [r8, #-64]
   2b798:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   2b79c:	f853 2c40 	ldr.w	r2, [r3, #-64]
   2b7a0:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
   2b7a4:	f843 2c40 	str.w	r2, [r3, #-64]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   2b7a8:	4621      	mov	r1, r4
   2b7aa:	ab12      	add	r3, sp, #72	; 0x48
   2b7ac:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   2b7b0:	f7ff fcf2 	bl	2b198 <uECC_vli_rshift1>
	for (index = 1; shift >= 0; --shift) {
   2b7b4:	3e01      	subs	r6, #1
   2b7b6:	b236      	sxth	r6, r6
   2b7b8:	2e00      	cmp	r6, #0
   2b7ba:	db02      	blt.n	2b7c2 <uECC_vli_mmod+0x11e>
		for (i = 0; i < num_words * 2; ++i) {
   2b7bc:	2300      	movs	r3, #0
		uECC_word_t borrow = 0;
   2b7be:	4618      	mov	r0, r3
   2b7c0:	e7c2      	b.n	2b748 <uECC_vli_mmod+0xa4>
	uECC_vli_set(result, v[index], num_words);
   2b7c2:	ab22      	add	r3, sp, #136	; 0x88
   2b7c4:	eb03 0585 	add.w	r5, r3, r5, lsl #2
   2b7c8:	4622      	mov	r2, r4
   2b7ca:	f855 1c88 	ldr.w	r1, [r5, #-136]
   2b7ce:	4650      	mov	r0, sl
   2b7d0:	f7ff fdc5 	bl	2b35e <uECC_vli_set>
}
   2b7d4:	b022      	add	sp, #136	; 0x88
   2b7d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002b7da <uECC_vli_modMult_fast>:
{
   2b7da:	b530      	push	{r4, r5, lr}
   2b7dc:	b091      	sub	sp, #68	; 0x44
   2b7de:	4605      	mov	r5, r0
   2b7e0:	461c      	mov	r4, r3
	uECC_vli_mult(product, left, right, curve->num_words);
   2b7e2:	f993 3000 	ldrsb.w	r3, [r3]
   2b7e6:	4668      	mov	r0, sp
   2b7e8:	f7ff fd08 	bl	2b1fc <uECC_vli_mult>
	curve->mmod_fast(result, product);
   2b7ec:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   2b7f0:	4669      	mov	r1, sp
   2b7f2:	4628      	mov	r0, r5
   2b7f4:	4798      	blx	r3
}
   2b7f6:	b011      	add	sp, #68	; 0x44
   2b7f8:	bd30      	pop	{r4, r5, pc}

0002b7fa <uECC_vli_modSquare_fast>:
{
   2b7fa:	b508      	push	{r3, lr}
	uECC_vli_modMult_fast(result, left, left, curve);
   2b7fc:	4613      	mov	r3, r2
   2b7fe:	460a      	mov	r2, r1
   2b800:	f7ff ffeb 	bl	2b7da <uECC_vli_modMult_fast>
}
   2b804:	bd08      	pop	{r3, pc}

0002b806 <double_jacobian_default>:
{
   2b806:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2b80a:	b092      	sub	sp, #72	; 0x48
   2b80c:	4605      	mov	r5, r0
   2b80e:	4689      	mov	r9, r1
   2b810:	4614      	mov	r4, r2
   2b812:	461f      	mov	r7, r3
	wordcount_t num_words = curve->num_words;
   2b814:	f993 6000 	ldrsb.w	r6, [r3]
	if (uECC_vli_isZero(Z1, num_words)) {
   2b818:	4631      	mov	r1, r6
   2b81a:	4610      	mov	r0, r2
   2b81c:	f7ff fd66 	bl	2b2ec <uECC_vli_isZero>
   2b820:	b110      	cbz	r0, 2b828 <double_jacobian_default+0x22>
}
   2b822:	b012      	add	sp, #72	; 0x48
   2b824:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uECC_vli_modSquare_fast(t4, Y1, curve);   /* t4 = y1^2 */
   2b828:	463a      	mov	r2, r7
   2b82a:	4649      	mov	r1, r9
   2b82c:	a80a      	add	r0, sp, #40	; 0x28
   2b82e:	f7ff ffe4 	bl	2b7fa <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(t5, X1, t4, curve); /* t5 = x1*y1^2 = A */
   2b832:	463b      	mov	r3, r7
   2b834:	aa0a      	add	r2, sp, #40	; 0x28
   2b836:	4629      	mov	r1, r5
   2b838:	a802      	add	r0, sp, #8
   2b83a:	f7ff ffce 	bl	2b7da <uECC_vli_modMult_fast>
	uECC_vli_modSquare_fast(t4, t4, curve);   /* t4 = y1^4 */
   2b83e:	463a      	mov	r2, r7
   2b840:	a90a      	add	r1, sp, #40	; 0x28
   2b842:	4608      	mov	r0, r1
   2b844:	f7ff ffd9 	bl	2b7fa <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(Y1, Y1, Z1, curve); /* t2 = y1*z1 = z3 */
   2b848:	463b      	mov	r3, r7
   2b84a:	4622      	mov	r2, r4
   2b84c:	4649      	mov	r1, r9
   2b84e:	4648      	mov	r0, r9
   2b850:	f7ff ffc3 	bl	2b7da <uECC_vli_modMult_fast>
	uECC_vli_modSquare_fast(Z1, Z1, curve);   /* t3 = z1^2 */
   2b854:	463a      	mov	r2, r7
   2b856:	4621      	mov	r1, r4
   2b858:	4620      	mov	r0, r4
   2b85a:	f7ff ffce 	bl	2b7fa <uECC_vli_modSquare_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   2b85e:	f107 0804 	add.w	r8, r7, #4
   2b862:	9600      	str	r6, [sp, #0]
   2b864:	4643      	mov	r3, r8
   2b866:	4622      	mov	r2, r4
   2b868:	4629      	mov	r1, r5
   2b86a:	4628      	mov	r0, r5
   2b86c:	f7ff fef2 	bl	2b654 <uECC_vli_modAdd>
	uECC_vli_modAdd(Z1, Z1, Z1, curve->p, num_words); /* t3 = 2*z1^2 */
   2b870:	9600      	str	r6, [sp, #0]
   2b872:	4643      	mov	r3, r8
   2b874:	4622      	mov	r2, r4
   2b876:	4621      	mov	r1, r4
   2b878:	4620      	mov	r0, r4
   2b87a:	f7ff feeb 	bl	2b654 <uECC_vli_modAdd>
	uECC_vli_modSub(Z1, X1, Z1, curve->p, num_words); /* t3 = x1 - z1^2 */
   2b87e:	9600      	str	r6, [sp, #0]
   2b880:	4643      	mov	r3, r8
   2b882:	4622      	mov	r2, r4
   2b884:	4629      	mov	r1, r5
   2b886:	4620      	mov	r0, r4
   2b888:	f7ff fefb 	bl	2b682 <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, Z1, curve); /* t1 = x1^2 - z1^4 */
   2b88c:	463b      	mov	r3, r7
   2b88e:	4622      	mov	r2, r4
   2b890:	4629      	mov	r1, r5
   2b892:	4628      	mov	r0, r5
   2b894:	f7ff ffa1 	bl	2b7da <uECC_vli_modMult_fast>
	uECC_vli_modAdd(Z1, X1, X1, curve->p, num_words); /* t3 = 2*(x1^2 - z1^4) */
   2b898:	9600      	str	r6, [sp, #0]
   2b89a:	4643      	mov	r3, r8
   2b89c:	462a      	mov	r2, r5
   2b89e:	4629      	mov	r1, r5
   2b8a0:	4620      	mov	r0, r4
   2b8a2:	f7ff fed7 	bl	2b654 <uECC_vli_modAdd>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = 3*(x1^2 - z1^4) */
   2b8a6:	9600      	str	r6, [sp, #0]
   2b8a8:	4643      	mov	r3, r8
   2b8aa:	4622      	mov	r2, r4
   2b8ac:	4629      	mov	r1, r5
   2b8ae:	4628      	mov	r0, r5
   2b8b0:	f7ff fed0 	bl	2b654 <uECC_vli_modAdd>
	if (uECC_vli_testBit(X1, 0)) {
   2b8b4:	2100      	movs	r1, #0
   2b8b6:	4628      	mov	r0, r5
   2b8b8:	f7ff fd2d 	bl	2b316 <uECC_vli_testBit>
   2b8bc:	2800      	cmp	r0, #0
   2b8be:	d04a      	beq.n	2b956 <double_jacobian_default+0x150>
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   2b8c0:	4633      	mov	r3, r6
   2b8c2:	4642      	mov	r2, r8
   2b8c4:	4629      	mov	r1, r5
   2b8c6:	4628      	mov	r0, r5
   2b8c8:	f7ff fd8e 	bl	2b3e8 <uECC_vli_add>
   2b8cc:	4682      	mov	sl, r0
		uECC_vli_rshift1(X1, num_words);
   2b8ce:	4631      	mov	r1, r6
   2b8d0:	4628      	mov	r0, r5
   2b8d2:	f7ff fc61 	bl	2b198 <uECC_vli_rshift1>
		X1[num_words - 1] |= l_carry << (uECC_WORD_BITS - 1);
   2b8d6:	f106 4380 	add.w	r3, r6, #1073741824	; 0x40000000
   2b8da:	3b01      	subs	r3, #1
   2b8dc:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
   2b8e0:	ea42 72ca 	orr.w	r2, r2, sl, lsl #31
   2b8e4:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
	uECC_vli_modSquare_fast(Z1, X1, curve); /* t3 = B^2 */
   2b8e8:	463a      	mov	r2, r7
   2b8ea:	4629      	mov	r1, r5
   2b8ec:	4620      	mov	r0, r4
   2b8ee:	f7ff ff84 	bl	2b7fa <uECC_vli_modSquare_fast>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - A */
   2b8f2:	9600      	str	r6, [sp, #0]
   2b8f4:	4643      	mov	r3, r8
   2b8f6:	aa02      	add	r2, sp, #8
   2b8f8:	4621      	mov	r1, r4
   2b8fa:	4620      	mov	r0, r4
   2b8fc:	f7ff fec1 	bl	2b682 <uECC_vli_modSub>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - 2A = x3 */
   2b900:	9600      	str	r6, [sp, #0]
   2b902:	4643      	mov	r3, r8
   2b904:	aa02      	add	r2, sp, #8
   2b906:	4621      	mov	r1, r4
   2b908:	4620      	mov	r0, r4
   2b90a:	f7ff feba 	bl	2b682 <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, Z1, curve->p, num_words); /* t5 = A - x3 */
   2b90e:	9600      	str	r6, [sp, #0]
   2b910:	4643      	mov	r3, r8
   2b912:	4622      	mov	r2, r4
   2b914:	a902      	add	r1, sp, #8
   2b916:	4608      	mov	r0, r1
   2b918:	f7ff feb3 	bl	2b682 <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = B * (A - x3) */
   2b91c:	463b      	mov	r3, r7
   2b91e:	aa02      	add	r2, sp, #8
   2b920:	4629      	mov	r1, r5
   2b922:	4628      	mov	r0, r5
   2b924:	f7ff ff59 	bl	2b7da <uECC_vli_modMult_fast>
	uECC_vli_modSub(t4, X1, t4, curve->p, num_words);
   2b928:	9600      	str	r6, [sp, #0]
   2b92a:	4643      	mov	r3, r8
   2b92c:	aa0a      	add	r2, sp, #40	; 0x28
   2b92e:	4629      	mov	r1, r5
   2b930:	4610      	mov	r0, r2
   2b932:	f7ff fea6 	bl	2b682 <uECC_vli_modSub>
	uECC_vli_set(X1, Z1, num_words);
   2b936:	4632      	mov	r2, r6
   2b938:	4621      	mov	r1, r4
   2b93a:	4628      	mov	r0, r5
   2b93c:	f7ff fd0f 	bl	2b35e <uECC_vli_set>
	uECC_vli_set(Z1, Y1, num_words);
   2b940:	4632      	mov	r2, r6
   2b942:	4649      	mov	r1, r9
   2b944:	4620      	mov	r0, r4
   2b946:	f7ff fd0a 	bl	2b35e <uECC_vli_set>
	uECC_vli_set(Y1, t4, num_words);
   2b94a:	4632      	mov	r2, r6
   2b94c:	a90a      	add	r1, sp, #40	; 0x28
   2b94e:	4648      	mov	r0, r9
   2b950:	f7ff fd05 	bl	2b35e <uECC_vli_set>
   2b954:	e765      	b.n	2b822 <double_jacobian_default+0x1c>
		uECC_vli_rshift1(X1, num_words);
   2b956:	4631      	mov	r1, r6
   2b958:	4628      	mov	r0, r5
   2b95a:	f7ff fc1d 	bl	2b198 <uECC_vli_rshift1>
   2b95e:	e7c3      	b.n	2b8e8 <double_jacobian_default+0xe2>

0002b960 <x_side_default>:
{
   2b960:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2b964:	b08b      	sub	sp, #44	; 0x2c
   2b966:	4604      	mov	r4, r0
   2b968:	4689      	mov	r9, r1
   2b96a:	4616      	mov	r6, r2
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   2b96c:	2300      	movs	r3, #0
   2b96e:	9303      	str	r3, [sp, #12]
   2b970:	9304      	str	r3, [sp, #16]
   2b972:	9305      	str	r3, [sp, #20]
   2b974:	9306      	str	r3, [sp, #24]
   2b976:	9307      	str	r3, [sp, #28]
   2b978:	9308      	str	r3, [sp, #32]
   2b97a:	9309      	str	r3, [sp, #36]	; 0x24
   2b97c:	af0a      	add	r7, sp, #40	; 0x28
   2b97e:	2303      	movs	r3, #3
   2b980:	f847 3d20 	str.w	r3, [r7, #-32]!
	wordcount_t num_words = curve->num_words;
   2b984:	4615      	mov	r5, r2
   2b986:	f915 8b04 	ldrsb.w	r8, [r5], #4
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   2b98a:	f7ff ff36 	bl	2b7fa <uECC_vli_modSquare_fast>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   2b98e:	f8cd 8000 	str.w	r8, [sp]
   2b992:	462b      	mov	r3, r5
   2b994:	463a      	mov	r2, r7
   2b996:	4621      	mov	r1, r4
   2b998:	4620      	mov	r0, r4
   2b99a:	f7ff fe72 	bl	2b682 <uECC_vli_modSub>
	uECC_vli_modMult_fast(result, result, x, curve); /* r = x^3 - 3x */
   2b99e:	4633      	mov	r3, r6
   2b9a0:	464a      	mov	r2, r9
   2b9a2:	4621      	mov	r1, r4
   2b9a4:	4620      	mov	r0, r4
   2b9a6:	f7ff ff18 	bl	2b7da <uECC_vli_modMult_fast>
	uECC_vli_modAdd(result, result, curve->b, curve->p, num_words);
   2b9aa:	f8cd 8000 	str.w	r8, [sp]
   2b9ae:	462b      	mov	r3, r5
   2b9b0:	f106 0284 	add.w	r2, r6, #132	; 0x84
   2b9b4:	4621      	mov	r1, r4
   2b9b6:	4620      	mov	r0, r4
   2b9b8:	f7ff fe4c 	bl	2b654 <uECC_vli_modAdd>
}
   2b9bc:	b00b      	add	sp, #44	; 0x2c
   2b9be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0002b9c2 <XYcZ_addC>:
   or P => P - Q, Q => P + Q
 */
static void XYcZ_addC(uECC_word_t * X1, uECC_word_t * Y1,
		      uECC_word_t * X2, uECC_word_t * Y2,
		      uECC_Curve curve)
{
   2b9c2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2b9c6:	b09b      	sub	sp, #108	; 0x6c
   2b9c8:	4607      	mov	r7, r0
   2b9ca:	4689      	mov	r9, r1
   2b9cc:	4616      	mov	r6, r2
   2b9ce:	4698      	mov	r8, r3
	/* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
	uECC_word_t t5[NUM_ECC_WORDS];
	uECC_word_t t6[NUM_ECC_WORDS];
	uECC_word_t t7[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   2b9d0:	9c22      	ldr	r4, [sp, #136]	; 0x88
   2b9d2:	f914 5b04 	ldrsb.w	r5, [r4], #4

	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   2b9d6:	9500      	str	r5, [sp, #0]
   2b9d8:	4623      	mov	r3, r4
   2b9da:	4602      	mov	r2, r0
   2b9dc:	4631      	mov	r1, r6
   2b9de:	a812      	add	r0, sp, #72	; 0x48
   2b9e0:	f7ff fe4f 	bl	2b682 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   2b9e4:	9a22      	ldr	r2, [sp, #136]	; 0x88
   2b9e6:	a912      	add	r1, sp, #72	; 0x48
   2b9e8:	4608      	mov	r0, r1
   2b9ea:	f7ff ff06 	bl	2b7fa <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   2b9ee:	9b22      	ldr	r3, [sp, #136]	; 0x88
   2b9f0:	aa12      	add	r2, sp, #72	; 0x48
   2b9f2:	4639      	mov	r1, r7
   2b9f4:	4638      	mov	r0, r7
   2b9f6:	f7ff fef0 	bl	2b7da <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   2b9fa:	9b22      	ldr	r3, [sp, #136]	; 0x88
   2b9fc:	aa12      	add	r2, sp, #72	; 0x48
   2b9fe:	4631      	mov	r1, r6
   2ba00:	4630      	mov	r0, r6
   2ba02:	f7ff feea 	bl	2b7da <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t5, Y2, Y1, curve->p, num_words); /* t5 = y2 + y1 */
   2ba06:	9500      	str	r5, [sp, #0]
   2ba08:	4623      	mov	r3, r4
   2ba0a:	464a      	mov	r2, r9
   2ba0c:	4641      	mov	r1, r8
   2ba0e:	a812      	add	r0, sp, #72	; 0x48
   2ba10:	f7ff fe20 	bl	2b654 <uECC_vli_modAdd>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   2ba14:	9500      	str	r5, [sp, #0]
   2ba16:	4623      	mov	r3, r4
   2ba18:	464a      	mov	r2, r9
   2ba1a:	4641      	mov	r1, r8
   2ba1c:	4640      	mov	r0, r8
   2ba1e:	f7ff fe30 	bl	2b682 <uECC_vli_modSub>

	uECC_vli_modSub(t6, X2, X1, curve->p, num_words); /* t6 = C - B */
   2ba22:	9500      	str	r5, [sp, #0]
   2ba24:	4623      	mov	r3, r4
   2ba26:	463a      	mov	r2, r7
   2ba28:	4631      	mov	r1, r6
   2ba2a:	a80a      	add	r0, sp, #40	; 0x28
   2ba2c:	f7ff fe29 	bl	2b682 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, t6, curve); /* t2 = y1 * (C - B) = E */
   2ba30:	9b22      	ldr	r3, [sp, #136]	; 0x88
   2ba32:	aa0a      	add	r2, sp, #40	; 0x28
   2ba34:	4649      	mov	r1, r9
   2ba36:	4648      	mov	r0, r9
   2ba38:	f7ff fecf 	bl	2b7da <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t6, X1, X2, curve->p, num_words); /* t6 = B + C */
   2ba3c:	9500      	str	r5, [sp, #0]
   2ba3e:	4623      	mov	r3, r4
   2ba40:	4632      	mov	r2, r6
   2ba42:	4639      	mov	r1, r7
   2ba44:	a80a      	add	r0, sp, #40	; 0x28
   2ba46:	f7ff fe05 	bl	2b654 <uECC_vli_modAdd>
	uECC_vli_modSquare_fast(X2, Y2, curve); /* t3 = (y2 - y1)^2 = D */
   2ba4a:	9a22      	ldr	r2, [sp, #136]	; 0x88
   2ba4c:	4641      	mov	r1, r8
   2ba4e:	4630      	mov	r0, r6
   2ba50:	f7ff fed3 	bl	2b7fa <uECC_vli_modSquare_fast>
	uECC_vli_modSub(X2, X2, t6, curve->p, num_words); /* t3 = D - (B + C) = x3 */
   2ba54:	9500      	str	r5, [sp, #0]
   2ba56:	4623      	mov	r3, r4
   2ba58:	aa0a      	add	r2, sp, #40	; 0x28
   2ba5a:	4631      	mov	r1, r6
   2ba5c:	4630      	mov	r0, r6
   2ba5e:	f7ff fe10 	bl	2b682 <uECC_vli_modSub>

	uECC_vli_modSub(t7, X1, X2, curve->p, num_words); /* t7 = B - x3 */
   2ba62:	9500      	str	r5, [sp, #0]
   2ba64:	4623      	mov	r3, r4
   2ba66:	4632      	mov	r2, r6
   2ba68:	4639      	mov	r1, r7
   2ba6a:	a802      	add	r0, sp, #8
   2ba6c:	f7ff fe09 	bl	2b682 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, t7, curve); /* t4 = (y2 - y1)*(B - x3) */
   2ba70:	9b22      	ldr	r3, [sp, #136]	; 0x88
   2ba72:	aa02      	add	r2, sp, #8
   2ba74:	4641      	mov	r1, r8
   2ba76:	4640      	mov	r0, r8
   2ba78:	f7ff feaf 	bl	2b7da <uECC_vli_modMult_fast>
	/* t4 = (y2 - y1)*(B - x3) - E = y3: */
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words);
   2ba7c:	9500      	str	r5, [sp, #0]
   2ba7e:	4623      	mov	r3, r4
   2ba80:	464a      	mov	r2, r9
   2ba82:	4641      	mov	r1, r8
   2ba84:	4640      	mov	r0, r8
   2ba86:	f7ff fdfc 	bl	2b682 <uECC_vli_modSub>

	uECC_vli_modSquare_fast(t7, t5, curve); /* t7 = (y2 + y1)^2 = F */
   2ba8a:	9a22      	ldr	r2, [sp, #136]	; 0x88
   2ba8c:	a912      	add	r1, sp, #72	; 0x48
   2ba8e:	a802      	add	r0, sp, #8
   2ba90:	f7ff feb3 	bl	2b7fa <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t7, t7, t6, curve->p, num_words); /* t7 = F - (B + C) = x3' */
   2ba94:	9500      	str	r5, [sp, #0]
   2ba96:	4623      	mov	r3, r4
   2ba98:	aa0a      	add	r2, sp, #40	; 0x28
   2ba9a:	a902      	add	r1, sp, #8
   2ba9c:	4608      	mov	r0, r1
   2ba9e:	f7ff fdf0 	bl	2b682 <uECC_vli_modSub>
	uECC_vli_modSub(t6, t7, X1, curve->p, num_words); /* t6 = x3' - B */
   2baa2:	9500      	str	r5, [sp, #0]
   2baa4:	4623      	mov	r3, r4
   2baa6:	463a      	mov	r2, r7
   2baa8:	a902      	add	r1, sp, #8
   2baaa:	a80a      	add	r0, sp, #40	; 0x28
   2baac:	f7ff fde9 	bl	2b682 <uECC_vli_modSub>
	uECC_vli_modMult_fast(t6, t6, t5, curve); /* t6 = (y2+y1)*(x3' - B) */
   2bab0:	9b22      	ldr	r3, [sp, #136]	; 0x88
   2bab2:	aa12      	add	r2, sp, #72	; 0x48
   2bab4:	a90a      	add	r1, sp, #40	; 0x28
   2bab6:	4608      	mov	r0, r1
   2bab8:	f7ff fe8f 	bl	2b7da <uECC_vli_modMult_fast>
	/* t2 = (y2+y1)*(x3' - B) - E = y3': */
	uECC_vli_modSub(Y1, t6, Y1, curve->p, num_words);
   2babc:	9500      	str	r5, [sp, #0]
   2babe:	4623      	mov	r3, r4
   2bac0:	464a      	mov	r2, r9
   2bac2:	a90a      	add	r1, sp, #40	; 0x28
   2bac4:	4648      	mov	r0, r9
   2bac6:	f7ff fddc 	bl	2b682 <uECC_vli_modSub>

	uECC_vli_set(X1, t7, num_words);
   2baca:	462a      	mov	r2, r5
   2bacc:	a902      	add	r1, sp, #8
   2bace:	4638      	mov	r0, r7
   2bad0:	f7ff fc45 	bl	2b35e <uECC_vli_set>
}
   2bad4:	b01b      	add	sp, #108	; 0x6c
   2bad6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0002bada <uECC_vli_modInv>:
{
   2bada:	b5f0      	push	{r4, r5, r6, r7, lr}
   2badc:	b0a1      	sub	sp, #132	; 0x84
   2bade:	4607      	mov	r7, r0
   2bae0:	460e      	mov	r6, r1
   2bae2:	4615      	mov	r5, r2
   2bae4:	461c      	mov	r4, r3
	if (uECC_vli_isZero(input, num_words)) {
   2bae6:	4619      	mov	r1, r3
   2bae8:	4630      	mov	r0, r6
   2baea:	f7ff fbff 	bl	2b2ec <uECC_vli_isZero>
   2baee:	b9a0      	cbnz	r0, 2bb1a <uECC_vli_modInv+0x40>
	uECC_vli_set(a, input, num_words);
   2baf0:	4622      	mov	r2, r4
   2baf2:	4631      	mov	r1, r6
   2baf4:	a818      	add	r0, sp, #96	; 0x60
   2baf6:	f7ff fc32 	bl	2b35e <uECC_vli_set>
	uECC_vli_set(b, mod, num_words);
   2bafa:	4622      	mov	r2, r4
   2bafc:	4629      	mov	r1, r5
   2bafe:	a810      	add	r0, sp, #64	; 0x40
   2bb00:	f7ff fc2d 	bl	2b35e <uECC_vli_set>
	uECC_vli_clear(u, num_words);
   2bb04:	4621      	mov	r1, r4
   2bb06:	a808      	add	r0, sp, #32
   2bb08:	f7ff fbe6 	bl	2b2d8 <uECC_vli_clear>
	u[0] = 1;
   2bb0c:	2301      	movs	r3, #1
   2bb0e:	9308      	str	r3, [sp, #32]
	uECC_vli_clear(v, num_words);
   2bb10:	4621      	mov	r1, r4
   2bb12:	4668      	mov	r0, sp
   2bb14:	f7ff fbe0 	bl	2b2d8 <uECC_vli_clear>
	while ((cmpResult = uECC_vli_cmp_unsafe(a, b, num_words)) != 0) {
   2bb18:	e00d      	b.n	2bb36 <uECC_vli_modInv+0x5c>
		uECC_vli_clear(result, num_words);
   2bb1a:	4621      	mov	r1, r4
   2bb1c:	4638      	mov	r0, r7
   2bb1e:	f7ff fbdb 	bl	2b2d8 <uECC_vli_clear>
   2bb22:	e071      	b.n	2bc08 <uECC_vli_modInv+0x12e>
			uECC_vli_rshift1(a, num_words);
   2bb24:	4621      	mov	r1, r4
   2bb26:	a818      	add	r0, sp, #96	; 0x60
   2bb28:	f7ff fb36 	bl	2b198 <uECC_vli_rshift1>
      			vli_modInv_update(u, mod, num_words);
   2bb2c:	4622      	mov	r2, r4
   2bb2e:	4629      	mov	r1, r5
   2bb30:	a808      	add	r0, sp, #32
   2bb32:	f7ff fc7a 	bl	2b42a <vli_modInv_update>
	while ((cmpResult = uECC_vli_cmp_unsafe(a, b, num_words)) != 0) {
   2bb36:	4622      	mov	r2, r4
   2bb38:	a910      	add	r1, sp, #64	; 0x40
   2bb3a:	a818      	add	r0, sp, #96	; 0x60
   2bb3c:	f7ff fc1e 	bl	2b37c <uECC_vli_cmp_unsafe>
   2bb40:	4602      	mov	r2, r0
   2bb42:	2800      	cmp	r0, #0
   2bb44:	d05b      	beq.n	2bbfe <uECC_vli_modInv+0x124>
		if (EVEN(a)) {
   2bb46:	9b18      	ldr	r3, [sp, #96]	; 0x60
   2bb48:	f013 0f01 	tst.w	r3, #1
   2bb4c:	d0ea      	beq.n	2bb24 <uECC_vli_modInv+0x4a>
    		} else if (EVEN(b)) {
   2bb4e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2bb50:	f013 0f01 	tst.w	r3, #1
   2bb54:	d01e      	beq.n	2bb94 <uECC_vli_modInv+0xba>
		} else if (cmpResult > 0) {
   2bb56:	2a00      	cmp	r2, #0
   2bb58:	dd2d      	ble.n	2bbb6 <uECC_vli_modInv+0xdc>
			uECC_vli_sub(a, a, b, num_words);
   2bb5a:	4623      	mov	r3, r4
   2bb5c:	aa10      	add	r2, sp, #64	; 0x40
   2bb5e:	a918      	add	r1, sp, #96	; 0x60
   2bb60:	4608      	mov	r0, r1
   2bb62:	f7ff fc80 	bl	2b466 <uECC_vli_sub>
			uECC_vli_rshift1(a, num_words);
   2bb66:	4621      	mov	r1, r4
   2bb68:	a818      	add	r0, sp, #96	; 0x60
   2bb6a:	f7ff fb15 	bl	2b198 <uECC_vli_rshift1>
			if (uECC_vli_cmp_unsafe(u, v, num_words) < 0) {
   2bb6e:	4622      	mov	r2, r4
   2bb70:	4669      	mov	r1, sp
   2bb72:	a808      	add	r0, sp, #32
   2bb74:	f7ff fc02 	bl	2b37c <uECC_vli_cmp_unsafe>
   2bb78:	2800      	cmp	r0, #0
   2bb7a:	db15      	blt.n	2bba8 <uECC_vli_modInv+0xce>
      			uECC_vli_sub(u, u, v, num_words);
   2bb7c:	4623      	mov	r3, r4
   2bb7e:	466a      	mov	r2, sp
   2bb80:	a908      	add	r1, sp, #32
   2bb82:	4608      	mov	r0, r1
   2bb84:	f7ff fc6f 	bl	2b466 <uECC_vli_sub>
      			vli_modInv_update(u, mod, num_words);
   2bb88:	4622      	mov	r2, r4
   2bb8a:	4629      	mov	r1, r5
   2bb8c:	a808      	add	r0, sp, #32
   2bb8e:	f7ff fc4c 	bl	2b42a <vli_modInv_update>
   2bb92:	e7d0      	b.n	2bb36 <uECC_vli_modInv+0x5c>
			uECC_vli_rshift1(b, num_words);
   2bb94:	4621      	mov	r1, r4
   2bb96:	a810      	add	r0, sp, #64	; 0x40
   2bb98:	f7ff fafe 	bl	2b198 <uECC_vli_rshift1>
			vli_modInv_update(v, mod, num_words);
   2bb9c:	4622      	mov	r2, r4
   2bb9e:	4629      	mov	r1, r5
   2bba0:	4668      	mov	r0, sp
   2bba2:	f7ff fc42 	bl	2b42a <vli_modInv_update>
   2bba6:	e7c6      	b.n	2bb36 <uECC_vli_modInv+0x5c>
        			uECC_vli_add(u, u, mod, num_words);
   2bba8:	4623      	mov	r3, r4
   2bbaa:	462a      	mov	r2, r5
   2bbac:	a908      	add	r1, sp, #32
   2bbae:	4608      	mov	r0, r1
   2bbb0:	f7ff fc1a 	bl	2b3e8 <uECC_vli_add>
   2bbb4:	e7e2      	b.n	2bb7c <uECC_vli_modInv+0xa2>
      			uECC_vli_sub(b, b, a, num_words);
   2bbb6:	4623      	mov	r3, r4
   2bbb8:	aa18      	add	r2, sp, #96	; 0x60
   2bbba:	a910      	add	r1, sp, #64	; 0x40
   2bbbc:	4608      	mov	r0, r1
   2bbbe:	f7ff fc52 	bl	2b466 <uECC_vli_sub>
      			uECC_vli_rshift1(b, num_words);
   2bbc2:	4621      	mov	r1, r4
   2bbc4:	a810      	add	r0, sp, #64	; 0x40
   2bbc6:	f7ff fae7 	bl	2b198 <uECC_vli_rshift1>
      			if (uECC_vli_cmp_unsafe(v, u, num_words) < 0) {
   2bbca:	4622      	mov	r2, r4
   2bbcc:	a908      	add	r1, sp, #32
   2bbce:	4668      	mov	r0, sp
   2bbd0:	f7ff fbd4 	bl	2b37c <uECC_vli_cmp_unsafe>
   2bbd4:	2800      	cmp	r0, #0
   2bbd6:	db0b      	blt.n	2bbf0 <uECC_vli_modInv+0x116>
      			uECC_vli_sub(v, v, u, num_words);
   2bbd8:	4623      	mov	r3, r4
   2bbda:	aa08      	add	r2, sp, #32
   2bbdc:	4669      	mov	r1, sp
   2bbde:	4668      	mov	r0, sp
   2bbe0:	f7ff fc41 	bl	2b466 <uECC_vli_sub>
      			vli_modInv_update(v, mod, num_words);
   2bbe4:	4622      	mov	r2, r4
   2bbe6:	4629      	mov	r1, r5
   2bbe8:	4668      	mov	r0, sp
   2bbea:	f7ff fc1e 	bl	2b42a <vli_modInv_update>
   2bbee:	e7a2      	b.n	2bb36 <uECC_vli_modInv+0x5c>
        			uECC_vli_add(v, v, mod, num_words);
   2bbf0:	4623      	mov	r3, r4
   2bbf2:	462a      	mov	r2, r5
   2bbf4:	4669      	mov	r1, sp
   2bbf6:	4668      	mov	r0, sp
   2bbf8:	f7ff fbf6 	bl	2b3e8 <uECC_vli_add>
   2bbfc:	e7ec      	b.n	2bbd8 <uECC_vli_modInv+0xfe>
  	uECC_vli_set(result, u, num_words);
   2bbfe:	4622      	mov	r2, r4
   2bc00:	a908      	add	r1, sp, #32
   2bc02:	4638      	mov	r0, r7
   2bc04:	f7ff fbab 	bl	2b35e <uECC_vli_set>
}
   2bc08:	b021      	add	sp, #132	; 0x84
   2bc0a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002bc0c <EccPoint_isZero>:
{
   2bc0c:	b508      	push	{r3, lr}
	return uECC_vli_isZero(point, curve->num_words * 2);
   2bc0e:	7809      	ldrb	r1, [r1, #0]
   2bc10:	0049      	lsls	r1, r1, #1
   2bc12:	b249      	sxtb	r1, r1
   2bc14:	f7ff fb6a 	bl	2b2ec <uECC_vli_isZero>
}
   2bc18:	bd08      	pop	{r3, pc}

0002bc1a <apply_z>:
{
   2bc1a:	b5f0      	push	{r4, r5, r6, r7, lr}
   2bc1c:	b089      	sub	sp, #36	; 0x24
   2bc1e:	4607      	mov	r7, r0
   2bc20:	460d      	mov	r5, r1
   2bc22:	4616      	mov	r6, r2
   2bc24:	461c      	mov	r4, r3
	uECC_vli_modSquare_fast(t1, Z, curve);    /* z^2 */
   2bc26:	461a      	mov	r2, r3
   2bc28:	4631      	mov	r1, r6
   2bc2a:	4668      	mov	r0, sp
   2bc2c:	f7ff fde5 	bl	2b7fa <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t1, curve); /* x1 * z^2 */
   2bc30:	4623      	mov	r3, r4
   2bc32:	466a      	mov	r2, sp
   2bc34:	4639      	mov	r1, r7
   2bc36:	4638      	mov	r0, r7
   2bc38:	f7ff fdcf 	bl	2b7da <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(t1, t1, Z, curve);  /* z^3 */
   2bc3c:	4623      	mov	r3, r4
   2bc3e:	4632      	mov	r2, r6
   2bc40:	4669      	mov	r1, sp
   2bc42:	4668      	mov	r0, sp
   2bc44:	f7ff fdc9 	bl	2b7da <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(Y1, Y1, t1, curve); /* y1 * z^3 */
   2bc48:	4623      	mov	r3, r4
   2bc4a:	466a      	mov	r2, sp
   2bc4c:	4629      	mov	r1, r5
   2bc4e:	4628      	mov	r0, r5
   2bc50:	f7ff fdc3 	bl	2b7da <uECC_vli_modMult_fast>
}
   2bc54:	b009      	add	sp, #36	; 0x24
   2bc56:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002bc58 <XYcZ_initial_double>:
{
   2bc58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2bc5c:	b089      	sub	sp, #36	; 0x24
   2bc5e:	4605      	mov	r5, r0
   2bc60:	460e      	mov	r6, r1
   2bc62:	4690      	mov	r8, r2
   2bc64:	4699      	mov	r9, r3
   2bc66:	9910      	ldr	r1, [sp, #64]	; 0x40
   2bc68:	9c11      	ldr	r4, [sp, #68]	; 0x44
	wordcount_t num_words = curve->num_words;
   2bc6a:	f994 7000 	ldrsb.w	r7, [r4]
	if (initial_Z) {
   2bc6e:	b319      	cbz	r1, 2bcb8 <XYcZ_initial_double+0x60>
		uECC_vli_set(z, initial_Z, num_words);
   2bc70:	463a      	mov	r2, r7
   2bc72:	4668      	mov	r0, sp
   2bc74:	f7ff fb73 	bl	2b35e <uECC_vli_set>
	uECC_vli_set(X2, X1, num_words);
   2bc78:	463a      	mov	r2, r7
   2bc7a:	4629      	mov	r1, r5
   2bc7c:	4640      	mov	r0, r8
   2bc7e:	f7ff fb6e 	bl	2b35e <uECC_vli_set>
	uECC_vli_set(Y2, Y1, num_words);
   2bc82:	463a      	mov	r2, r7
   2bc84:	4631      	mov	r1, r6
   2bc86:	4648      	mov	r0, r9
   2bc88:	f7ff fb69 	bl	2b35e <uECC_vli_set>
	apply_z(X1, Y1, z, curve);
   2bc8c:	4623      	mov	r3, r4
   2bc8e:	466a      	mov	r2, sp
   2bc90:	4631      	mov	r1, r6
   2bc92:	4628      	mov	r0, r5
   2bc94:	f7ff ffc1 	bl	2bc1a <apply_z>
	curve->double_jacobian(X1, Y1, z, curve);
   2bc98:	f8d4 70a4 	ldr.w	r7, [r4, #164]	; 0xa4
   2bc9c:	4623      	mov	r3, r4
   2bc9e:	466a      	mov	r2, sp
   2bca0:	4631      	mov	r1, r6
   2bca2:	4628      	mov	r0, r5
   2bca4:	47b8      	blx	r7
	apply_z(X2, Y2, z, curve);
   2bca6:	4623      	mov	r3, r4
   2bca8:	466a      	mov	r2, sp
   2bcaa:	4649      	mov	r1, r9
   2bcac:	4640      	mov	r0, r8
   2bcae:	f7ff ffb4 	bl	2bc1a <apply_z>
}
   2bcb2:	b009      	add	sp, #36	; 0x24
   2bcb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		uECC_vli_clear(z, num_words);
   2bcb8:	4639      	mov	r1, r7
   2bcba:	4668      	mov	r0, sp
   2bcbc:	f7ff fb0c 	bl	2b2d8 <uECC_vli_clear>
		z[0] = 1;
   2bcc0:	2301      	movs	r3, #1
   2bcc2:	9300      	str	r3, [sp, #0]
   2bcc4:	e7d8      	b.n	2bc78 <XYcZ_initial_double+0x20>

0002bcc6 <XYcZ_add>:
{
   2bcc6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2bcca:	b08b      	sub	sp, #44	; 0x2c
   2bccc:	4680      	mov	r8, r0
   2bcce:	4689      	mov	r9, r1
   2bcd0:	4614      	mov	r4, r2
   2bcd2:	461f      	mov	r7, r3
	wordcount_t num_words = curve->num_words;
   2bcd4:	9d12      	ldr	r5, [sp, #72]	; 0x48
   2bcd6:	f915 6b04 	ldrsb.w	r6, [r5], #4
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   2bcda:	9600      	str	r6, [sp, #0]
   2bcdc:	462b      	mov	r3, r5
   2bcde:	4602      	mov	r2, r0
   2bce0:	4621      	mov	r1, r4
   2bce2:	a802      	add	r0, sp, #8
   2bce4:	f7ff fccd 	bl	2b682 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   2bce8:	9a12      	ldr	r2, [sp, #72]	; 0x48
   2bcea:	a902      	add	r1, sp, #8
   2bcec:	4608      	mov	r0, r1
   2bcee:	f7ff fd84 	bl	2b7fa <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   2bcf2:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2bcf4:	aa02      	add	r2, sp, #8
   2bcf6:	4641      	mov	r1, r8
   2bcf8:	4640      	mov	r0, r8
   2bcfa:	f7ff fd6e 	bl	2b7da <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   2bcfe:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2bd00:	aa02      	add	r2, sp, #8
   2bd02:	4621      	mov	r1, r4
   2bd04:	4620      	mov	r0, r4
   2bd06:	f7ff fd68 	bl	2b7da <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   2bd0a:	9600      	str	r6, [sp, #0]
   2bd0c:	462b      	mov	r3, r5
   2bd0e:	464a      	mov	r2, r9
   2bd10:	4639      	mov	r1, r7
   2bd12:	4638      	mov	r0, r7
   2bd14:	f7ff fcb5 	bl	2b682 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, Y2, curve); /* t5 = (y2 - y1)^2 = D */
   2bd18:	9a12      	ldr	r2, [sp, #72]	; 0x48
   2bd1a:	4639      	mov	r1, r7
   2bd1c:	a802      	add	r0, sp, #8
   2bd1e:	f7ff fd6c 	bl	2b7fa <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t5, t5, X1, curve->p, num_words); /* t5 = D - B */
   2bd22:	9600      	str	r6, [sp, #0]
   2bd24:	462b      	mov	r3, r5
   2bd26:	4642      	mov	r2, r8
   2bd28:	a902      	add	r1, sp, #8
   2bd2a:	4608      	mov	r0, r1
   2bd2c:	f7ff fca9 	bl	2b682 <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, X2, curve->p, num_words); /* t5 = D - B - C = x3 */
   2bd30:	9600      	str	r6, [sp, #0]
   2bd32:	462b      	mov	r3, r5
   2bd34:	4622      	mov	r2, r4
   2bd36:	a902      	add	r1, sp, #8
   2bd38:	4608      	mov	r0, r1
   2bd3a:	f7ff fca2 	bl	2b682 <uECC_vli_modSub>
	uECC_vli_modSub(X2, X2, X1, curve->p, num_words); /* t3 = C - B */
   2bd3e:	9600      	str	r6, [sp, #0]
   2bd40:	462b      	mov	r3, r5
   2bd42:	4642      	mov	r2, r8
   2bd44:	4621      	mov	r1, r4
   2bd46:	4620      	mov	r0, r4
   2bd48:	f7ff fc9b 	bl	2b682 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, X2, curve); /* t2 = y1*(C - B) */
   2bd4c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2bd4e:	4622      	mov	r2, r4
   2bd50:	4649      	mov	r1, r9
   2bd52:	4648      	mov	r0, r9
   2bd54:	f7ff fd41 	bl	2b7da <uECC_vli_modMult_fast>
	uECC_vli_modSub(X2, X1, t5, curve->p, num_words); /* t3 = B - x3 */
   2bd58:	9600      	str	r6, [sp, #0]
   2bd5a:	462b      	mov	r3, r5
   2bd5c:	aa02      	add	r2, sp, #8
   2bd5e:	4641      	mov	r1, r8
   2bd60:	4620      	mov	r0, r4
   2bd62:	f7ff fc8e 	bl	2b682 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, X2, curve); /* t4 = (y2 - y1)*(B - x3) */
   2bd66:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2bd68:	4622      	mov	r2, r4
   2bd6a:	4639      	mov	r1, r7
   2bd6c:	4638      	mov	r0, r7
   2bd6e:	f7ff fd34 	bl	2b7da <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y3 */
   2bd72:	9600      	str	r6, [sp, #0]
   2bd74:	462b      	mov	r3, r5
   2bd76:	464a      	mov	r2, r9
   2bd78:	4639      	mov	r1, r7
   2bd7a:	4638      	mov	r0, r7
   2bd7c:	f7ff fc81 	bl	2b682 <uECC_vli_modSub>
	uECC_vli_set(X2, t5, num_words);
   2bd80:	4632      	mov	r2, r6
   2bd82:	a902      	add	r1, sp, #8
   2bd84:	4620      	mov	r0, r4
   2bd86:	f7ff faea 	bl	2b35e <uECC_vli_set>
}
   2bd8a:	b00b      	add	sp, #44	; 0x2c
   2bd8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0002bd90 <EccPoint_mult>:

void EccPoint_mult(uECC_word_t * result, const uECC_word_t * point,
		   const uECC_word_t * scalar,
		   const uECC_word_t * initial_Z,
		   bitcount_t num_bits, uECC_Curve curve) 
{
   2bd90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2bd94:	b0af      	sub	sp, #188	; 0xbc
   2bd96:	9004      	str	r0, [sp, #16]
   2bd98:	460d      	mov	r5, r1
   2bd9a:	9105      	str	r1, [sp, #20]
   2bd9c:	9202      	str	r2, [sp, #8]
   2bd9e:	461c      	mov	r4, r3
   2bda0:	f8dd 80e4 	ldr.w	r8, [sp, #228]	; 0xe4
	uECC_word_t Rx[2][NUM_ECC_WORDS];
	uECC_word_t Ry[2][NUM_ECC_WORDS];
	uECC_word_t z[NUM_ECC_WORDS];
	bitcount_t i;
	uECC_word_t nb;
	wordcount_t num_words = curve->num_words;
   2bda4:	f998 a000 	ldrsb.w	sl, [r8]

	uECC_vli_set(Rx[1], point, num_words);
   2bda8:	4652      	mov	r2, sl
   2bdaa:	a826      	add	r0, sp, #152	; 0x98
   2bdac:	f7ff fad7 	bl	2b35e <uECC_vli_set>
  	uECC_vli_set(Ry[1], point + num_words, num_words);
   2bdb0:	ea4f 0b8a 	mov.w	fp, sl, lsl #2
   2bdb4:	462b      	mov	r3, r5
   2bdb6:	445b      	add	r3, fp
   2bdb8:	9303      	str	r3, [sp, #12]
   2bdba:	4652      	mov	r2, sl
   2bdbc:	4619      	mov	r1, r3
   2bdbe:	a816      	add	r0, sp, #88	; 0x58
   2bdc0:	f7ff facd 	bl	2b35e <uECC_vli_set>

	XYcZ_initial_double(Rx[1], Ry[1], Rx[0], Ry[0], initial_Z, curve);
   2bdc4:	f8cd 8004 	str.w	r8, [sp, #4]
   2bdc8:	9400      	str	r4, [sp, #0]
   2bdca:	ab0e      	add	r3, sp, #56	; 0x38
   2bdcc:	aa1e      	add	r2, sp, #120	; 0x78
   2bdce:	a916      	add	r1, sp, #88	; 0x58
   2bdd0:	a826      	add	r0, sp, #152	; 0x98
   2bdd2:	f7ff ff41 	bl	2bc58 <XYcZ_initial_double>

	for (i = num_bits - 2; i > 0; --i) {
   2bdd6:	f9bd 60e0 	ldrsh.w	r6, [sp, #224]	; 0xe0
   2bdda:	3e02      	subs	r6, #2
   2bddc:	b236      	sxth	r6, r6
   2bdde:	4647      	mov	r7, r8
   2bde0:	e024      	b.n	2be2c <EccPoint_mult+0x9c>
		nb = !uECC_vli_testBit(scalar, i);
   2bde2:	4631      	mov	r1, r6
   2bde4:	9802      	ldr	r0, [sp, #8]
   2bde6:	f7ff fa96 	bl	2b316 <uECC_vli_testBit>
   2bdea:	fab0 f080 	clz	r0, r0
   2bdee:	0940      	lsrs	r0, r0, #5
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   2bdf0:	f1c0 0401 	rsb	r4, r0, #1
   2bdf4:	0164      	lsls	r4, r4, #5
   2bdf6:	ab1e      	add	r3, sp, #120	; 0x78
   2bdf8:	191d      	adds	r5, r3, r4
   2bdfa:	ab0e      	add	r3, sp, #56	; 0x38
   2bdfc:	441c      	add	r4, r3
   2bdfe:	0140      	lsls	r0, r0, #5
   2be00:	ab1e      	add	r3, sp, #120	; 0x78
   2be02:	eb03 0800 	add.w	r8, r3, r0
   2be06:	ab0e      	add	r3, sp, #56	; 0x38
   2be08:	eb03 0900 	add.w	r9, r3, r0
   2be0c:	9700      	str	r7, [sp, #0]
   2be0e:	464b      	mov	r3, r9
   2be10:	4642      	mov	r2, r8
   2be12:	4621      	mov	r1, r4
   2be14:	4628      	mov	r0, r5
   2be16:	f7ff fdd4 	bl	2b9c2 <XYcZ_addC>
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   2be1a:	9700      	str	r7, [sp, #0]
   2be1c:	4623      	mov	r3, r4
   2be1e:	462a      	mov	r2, r5
   2be20:	4649      	mov	r1, r9
   2be22:	4640      	mov	r0, r8
   2be24:	f7ff ff4f 	bl	2bcc6 <XYcZ_add>
	for (i = num_bits - 2; i > 0; --i) {
   2be28:	3e01      	subs	r6, #1
   2be2a:	b236      	sxth	r6, r6
   2be2c:	2e00      	cmp	r6, #0
   2be2e:	dcd8      	bgt.n	2bde2 <EccPoint_mult+0x52>
   2be30:	46b8      	mov	r8, r7
	}

	nb = !uECC_vli_testBit(scalar, 0);
   2be32:	2100      	movs	r1, #0
   2be34:	9802      	ldr	r0, [sp, #8]
   2be36:	f7ff fa6e 	bl	2b316 <uECC_vli_testBit>
   2be3a:	fab0 f080 	clz	r0, r0
   2be3e:	0940      	lsrs	r0, r0, #5
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   2be40:	f1c0 0501 	rsb	r5, r0, #1
   2be44:	016d      	lsls	r5, r5, #5
   2be46:	ab1e      	add	r3, sp, #120	; 0x78
   2be48:	195e      	adds	r6, r3, r5
   2be4a:	ab0e      	add	r3, sp, #56	; 0x38
   2be4c:	441d      	add	r5, r3
   2be4e:	0140      	lsls	r0, r0, #5
   2be50:	ab1e      	add	r3, sp, #120	; 0x78
   2be52:	181f      	adds	r7, r3, r0
   2be54:	ab0e      	add	r3, sp, #56	; 0x38
   2be56:	181c      	adds	r4, r3, r0
   2be58:	f8cd 8000 	str.w	r8, [sp]
   2be5c:	4623      	mov	r3, r4
   2be5e:	463a      	mov	r2, r7
   2be60:	4629      	mov	r1, r5
   2be62:	4630      	mov	r0, r6
   2be64:	f7ff fdad 	bl	2b9c2 <XYcZ_addC>

	/* Find final 1/Z value. */
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   2be68:	f108 0904 	add.w	r9, r8, #4
   2be6c:	f8cd a000 	str.w	sl, [sp]
   2be70:	464b      	mov	r3, r9
   2be72:	aa1e      	add	r2, sp, #120	; 0x78
   2be74:	a926      	add	r1, sp, #152	; 0x98
   2be76:	a806      	add	r0, sp, #24
   2be78:	f7ff fc03 	bl	2b682 <uECC_vli_modSub>
	uECC_vli_modMult_fast(z, z, Ry[1 - nb], curve); /* Yb * (X1 - X0) */
   2be7c:	4643      	mov	r3, r8
   2be7e:	462a      	mov	r2, r5
   2be80:	a906      	add	r1, sp, #24
   2be82:	4608      	mov	r0, r1
   2be84:	f7ff fca9 	bl	2b7da <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(z, z, point, curve); /* xP * Yb * (X1 - X0) */
   2be88:	4643      	mov	r3, r8
   2be8a:	9a05      	ldr	r2, [sp, #20]
   2be8c:	a906      	add	r1, sp, #24
   2be8e:	4608      	mov	r0, r1
   2be90:	f7ff fca3 	bl	2b7da <uECC_vli_modMult_fast>
	uECC_vli_modInv(z, z, curve->p, num_words); /* 1 / (xP * Yb * (X1 - X0))*/
   2be94:	4653      	mov	r3, sl
   2be96:	464a      	mov	r2, r9
   2be98:	a906      	add	r1, sp, #24
   2be9a:	4608      	mov	r0, r1
   2be9c:	f7ff fe1d 	bl	2bada <uECC_vli_modInv>
	/* yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, point + num_words, curve);
   2bea0:	4643      	mov	r3, r8
   2bea2:	9a03      	ldr	r2, [sp, #12]
   2bea4:	a906      	add	r1, sp, #24
   2bea6:	4608      	mov	r0, r1
   2bea8:	f7ff fc97 	bl	2b7da <uECC_vli_modMult_fast>
	/* Xb * yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, Rx[1 - nb], curve);
   2beac:	4643      	mov	r3, r8
   2beae:	4632      	mov	r2, r6
   2beb0:	a906      	add	r1, sp, #24
   2beb2:	4608      	mov	r0, r1
   2beb4:	f7ff fc91 	bl	2b7da <uECC_vli_modMult_fast>
	/* End 1/Z calculation */

	XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   2beb8:	f8cd 8000 	str.w	r8, [sp]
   2bebc:	462b      	mov	r3, r5
   2bebe:	4632      	mov	r2, r6
   2bec0:	4621      	mov	r1, r4
   2bec2:	4638      	mov	r0, r7
   2bec4:	f7ff feff 	bl	2bcc6 <XYcZ_add>
	apply_z(Rx[0], Ry[0], z, curve);
   2bec8:	4643      	mov	r3, r8
   2beca:	aa06      	add	r2, sp, #24
   2becc:	a90e      	add	r1, sp, #56	; 0x38
   2bece:	a81e      	add	r0, sp, #120	; 0x78
   2bed0:	f7ff fea3 	bl	2bc1a <apply_z>

	uECC_vli_set(result, Rx[0], num_words);
   2bed4:	4652      	mov	r2, sl
   2bed6:	a91e      	add	r1, sp, #120	; 0x78
   2bed8:	9c04      	ldr	r4, [sp, #16]
   2beda:	4620      	mov	r0, r4
   2bedc:	f7ff fa3f 	bl	2b35e <uECC_vli_set>
	uECC_vli_set(result + num_words, Ry[0], num_words);
   2bee0:	4652      	mov	r2, sl
   2bee2:	a90e      	add	r1, sp, #56	; 0x38
   2bee4:	4623      	mov	r3, r4
   2bee6:	445b      	add	r3, fp
   2bee8:	4618      	mov	r0, r3
   2beea:	f7ff fa38 	bl	2b35e <uECC_vli_set>
}
   2beee:	b02f      	add	sp, #188	; 0xbc
   2bef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002bef4 <regularize_k>:

uECC_word_t regularize_k(const uECC_word_t * const k, uECC_word_t *k0,
			 uECC_word_t *k1, uECC_Curve curve)
{
   2bef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2bef8:	460f      	mov	r7, r1
   2befa:	4690      	mov	r8, r2

	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   2befc:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
   2bf00:	f116 041f 	adds.w	r4, r6, #31
   2bf04:	d414      	bmi.n	2bf30 <regularize_k+0x3c>
   2bf06:	f344 1447 	sbfx	r4, r4, #5, #8

	bitcount_t num_n_bits = curve->num_n_bits;

	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   2bf0a:	f103 0524 	add.w	r5, r3, #36	; 0x24
   2bf0e:	4623      	mov	r3, r4
   2bf10:	462a      	mov	r2, r5
   2bf12:	4601      	mov	r1, r0
   2bf14:	4638      	mov	r0, r7
   2bf16:	f7ff fa67 	bl	2b3e8 <uECC_vli_add>
   2bf1a:	b968      	cbnz	r0, 2bf38 <regularize_k+0x44>
   2bf1c:	ebb6 1f44 	cmp.w	r6, r4, lsl #5
   2bf20:	da14      	bge.n	2bf4c <regularize_k+0x58>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
			     uECC_vli_testBit(k0, num_n_bits));
   2bf22:	4631      	mov	r1, r6
   2bf24:	4638      	mov	r0, r7
   2bf26:	f7ff f9f6 	bl	2b316 <uECC_vli_testBit>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
   2bf2a:	b118      	cbz	r0, 2bf34 <regularize_k+0x40>
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   2bf2c:	2601      	movs	r6, #1
   2bf2e:	e004      	b.n	2bf3a <regularize_k+0x46>
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   2bf30:	341f      	adds	r4, #31
   2bf32:	e7e8      	b.n	2bf06 <regularize_k+0x12>
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   2bf34:	2600      	movs	r6, #0
   2bf36:	e000      	b.n	2bf3a <regularize_k+0x46>
   2bf38:	2601      	movs	r6, #1

	uECC_vli_add(k1, k0, curve->n, num_n_words);
   2bf3a:	4623      	mov	r3, r4
   2bf3c:	462a      	mov	r2, r5
   2bf3e:	4639      	mov	r1, r7
   2bf40:	4640      	mov	r0, r8
   2bf42:	f7ff fa51 	bl	2b3e8 <uECC_vli_add>

	return carry;
}
   2bf46:	4630      	mov	r0, r6
   2bf48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   2bf4c:	2600      	movs	r6, #0
   2bf4e:	e7f4      	b.n	2bf3a <regularize_k+0x46>

0002bf50 <EccPoint_compute_public_key>:

uECC_word_t EccPoint_compute_public_key(uECC_word_t *result,
					uECC_word_t *private_key,
					uECC_Curve curve)
{
   2bf50:	b530      	push	{r4, r5, lr}
   2bf52:	b095      	sub	sp, #84	; 0x54
   2bf54:	4605      	mov	r5, r0
   2bf56:	4608      	mov	r0, r1
   2bf58:	4614      	mov	r4, r2

	uECC_word_t tmp1[NUM_ECC_WORDS];
 	uECC_word_t tmp2[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {tmp1, tmp2};
   2bf5a:	a90c      	add	r1, sp, #48	; 0x30
   2bf5c:	9102      	str	r1, [sp, #8]
   2bf5e:	aa04      	add	r2, sp, #16
   2bf60:	9203      	str	r2, [sp, #12]
	uECC_word_t carry;

	/* Regularize the bitcount for the private key so that attackers cannot
	 * use a side channel attack to learn the number of leading zeros. */
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   2bf62:	4623      	mov	r3, r4
   2bf64:	f7ff ffc6 	bl	2bef4 <regularize_k>

	EccPoint_mult(result, curve->G, p2[!carry], 0, curve->num_n_bits + 1, curve);
   2bf68:	fab0 f080 	clz	r0, r0
   2bf6c:	0940      	lsrs	r0, r0, #5
   2bf6e:	ab14      	add	r3, sp, #80	; 0x50
   2bf70:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   2bf74:	f850 2c48 	ldr.w	r2, [r0, #-72]
   2bf78:	8863      	ldrh	r3, [r4, #2]
   2bf7a:	3301      	adds	r3, #1
   2bf7c:	9401      	str	r4, [sp, #4]
   2bf7e:	b21b      	sxth	r3, r3
   2bf80:	9300      	str	r3, [sp, #0]
   2bf82:	2300      	movs	r3, #0
   2bf84:	f104 0144 	add.w	r1, r4, #68	; 0x44
   2bf88:	4628      	mov	r0, r5
   2bf8a:	f7ff ff01 	bl	2bd90 <EccPoint_mult>

	if (EccPoint_isZero(result, curve)) {
   2bf8e:	4621      	mov	r1, r4
   2bf90:	4628      	mov	r0, r5
   2bf92:	f7ff fe3b 	bl	2bc0c <EccPoint_isZero>
   2bf96:	b910      	cbnz	r0, 2bf9e <EccPoint_compute_public_key+0x4e>
		return 0;
	}
	return 1;
   2bf98:	2001      	movs	r0, #1
}
   2bf9a:	b015      	add	sp, #84	; 0x54
   2bf9c:	bd30      	pop	{r4, r5, pc}
		return 0;
   2bf9e:	2000      	movs	r0, #0
   2bfa0:	e7fb      	b.n	2bf9a <EccPoint_compute_public_key+0x4a>

0002bfa2 <uECC_vli_nativeToBytes>:

/* Converts an integer in uECC native format to big-endian bytes. */
void uECC_vli_nativeToBytes(uint8_t *bytes, int num_bytes,
			    const unsigned int *native)
{
   2bfa2:	b430      	push	{r4, r5}
	wordcount_t i;
	for (i = 0; i < num_bytes; ++i) {
   2bfa4:	2400      	movs	r4, #0
   2bfa6:	e00c      	b.n	2bfc2 <uECC_vli_nativeToBytes+0x20>
		unsigned b = num_bytes - 1 - i;
   2bfa8:	1e4b      	subs	r3, r1, #1
   2bfaa:	1b1b      	subs	r3, r3, r4
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
   2bfac:	f023 0503 	bic.w	r5, r3, #3
   2bfb0:	5955      	ldr	r5, [r2, r5]
   2bfb2:	f003 0303 	and.w	r3, r3, #3
   2bfb6:	00db      	lsls	r3, r3, #3
   2bfb8:	fa25 f303 	lsr.w	r3, r5, r3
   2bfbc:	5503      	strb	r3, [r0, r4]
	for (i = 0; i < num_bytes; ++i) {
   2bfbe:	3401      	adds	r4, #1
   2bfc0:	b264      	sxtb	r4, r4
   2bfc2:	428c      	cmp	r4, r1
   2bfc4:	dbf0      	blt.n	2bfa8 <uECC_vli_nativeToBytes+0x6>
	}
}
   2bfc6:	bc30      	pop	{r4, r5}
   2bfc8:	4770      	bx	lr

0002bfca <uECC_vli_bytesToNative>:

/* Converts big-endian bytes to an integer in uECC native format. */
void uECC_vli_bytesToNative(unsigned int *native, const uint8_t *bytes,
			    int num_bytes)
{
   2bfca:	b570      	push	{r4, r5, r6, lr}
   2bfcc:	4605      	mov	r5, r0
   2bfce:	460e      	mov	r6, r1
   2bfd0:	4614      	mov	r4, r2
	wordcount_t i;
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   2bfd2:	1cd1      	adds	r1, r2, #3
   2bfd4:	d406      	bmi.n	2bfe4 <uECC_vli_bytesToNative+0x1a>
   2bfd6:	f341 0187 	sbfx	r1, r1, #2, #8
   2bfda:	4628      	mov	r0, r5
   2bfdc:	f7ff f97c 	bl	2b2d8 <uECC_vli_clear>
	for (i = 0; i < num_bytes; ++i) {
   2bfe0:	2200      	movs	r2, #0
   2bfe2:	e010      	b.n	2c006 <uECC_vli_bytesToNative+0x3c>
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   2bfe4:	3103      	adds	r1, #3
   2bfe6:	e7f6      	b.n	2bfd6 <uECC_vli_bytesToNative+0xc>
		unsigned b = num_bytes - 1 - i;
   2bfe8:	1e63      	subs	r3, r4, #1
   2bfea:	1a9b      	subs	r3, r3, r2
		native[b / uECC_WORD_SIZE] |=
   2bfec:	f023 0003 	bic.w	r0, r3, #3
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
   2bff0:	5cb1      	ldrb	r1, [r6, r2]
   2bff2:	f003 0303 	and.w	r3, r3, #3
   2bff6:	00db      	lsls	r3, r3, #3
   2bff8:	fa01 f303 	lsl.w	r3, r1, r3
		native[b / uECC_WORD_SIZE] |=
   2bffc:	5829      	ldr	r1, [r5, r0]
   2bffe:	4319      	orrs	r1, r3
   2c000:	5029      	str	r1, [r5, r0]
	for (i = 0; i < num_bytes; ++i) {
   2c002:	3201      	adds	r2, #1
   2c004:	b252      	sxtb	r2, r2
   2c006:	42a2      	cmp	r2, r4
   2c008:	dbee      	blt.n	2bfe8 <uECC_vli_bytesToNative+0x1e>
  	}
}
   2c00a:	bd70      	pop	{r4, r5, r6, pc}

0002c00c <uECC_valid_point>:
	return 0;
}


int uECC_valid_point(const uECC_word_t *point, uECC_Curve curve)
{
   2c00c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2c010:	b090      	sub	sp, #64	; 0x40
   2c012:	4606      	mov	r6, r0
   2c014:	460c      	mov	r4, r1
	uECC_word_t tmp1[NUM_ECC_WORDS];
	uECC_word_t tmp2[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   2c016:	f991 5000 	ldrsb.w	r5, [r1]

	/* The point at infinity is invalid. */
	if (EccPoint_isZero(point, curve)) {
   2c01a:	f7ff fdf7 	bl	2bc0c <EccPoint_isZero>
   2c01e:	bb40      	cbnz	r0, 2c072 <uECC_valid_point+0x66>
		return -1;
	}

	/* x and y must be smaller than p. */
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   2c020:	1d27      	adds	r7, r4, #4
   2c022:	462a      	mov	r2, r5
   2c024:	4631      	mov	r1, r6
   2c026:	4638      	mov	r0, r7
   2c028:	f7ff f9a8 	bl	2b37c <uECC_vli_cmp_unsafe>
   2c02c:	2801      	cmp	r0, #1
   2c02e:	d123      	bne.n	2c078 <uECC_valid_point+0x6c>
		uECC_vli_cmp_unsafe(curve->p, point + num_words, num_words) != 1) {
   2c030:	eb06 0885 	add.w	r8, r6, r5, lsl #2
   2c034:	462a      	mov	r2, r5
   2c036:	4641      	mov	r1, r8
   2c038:	4638      	mov	r0, r7
   2c03a:	f7ff f99f 	bl	2b37c <uECC_vli_cmp_unsafe>
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   2c03e:	2801      	cmp	r0, #1
   2c040:	d11d      	bne.n	2c07e <uECC_valid_point+0x72>
		return -2;
	}

	uECC_vli_modSquare_fast(tmp1, point + num_words, curve);
   2c042:	4622      	mov	r2, r4
   2c044:	4641      	mov	r1, r8
   2c046:	a808      	add	r0, sp, #32
   2c048:	f7ff fbd7 	bl	2b7fa <uECC_vli_modSquare_fast>
	curve->x_side(tmp2, point, curve); /* tmp2 = x^3 + ax + b */
   2c04c:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   2c050:	4622      	mov	r2, r4
   2c052:	4631      	mov	r1, r6
   2c054:	4668      	mov	r0, sp
   2c056:	4798      	blx	r3

	/* Make sure that y^2 == x^3 + ax + b */
	if (uECC_vli_equal(tmp1, tmp2, num_words) != 0)
   2c058:	462a      	mov	r2, r5
   2c05a:	4669      	mov	r1, sp
   2c05c:	a808      	add	r0, sp, #32
   2c05e:	f7ff f9a7 	bl	2b3b0 <uECC_vli_equal>
   2c062:	b918      	cbnz	r0, 2c06c <uECC_valid_point+0x60>
		return -3;

	return 0;
   2c064:	2000      	movs	r0, #0
}
   2c066:	b010      	add	sp, #64	; 0x40
   2c068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -3;
   2c06c:	f06f 0002 	mvn.w	r0, #2
   2c070:	e7f9      	b.n	2c066 <uECC_valid_point+0x5a>
		return -1;
   2c072:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2c076:	e7f6      	b.n	2c066 <uECC_valid_point+0x5a>
		return -2;
   2c078:	f06f 0001 	mvn.w	r0, #1
   2c07c:	e7f3      	b.n	2c066 <uECC_valid_point+0x5a>
   2c07e:	f06f 0001 	mvn.w	r0, #1
   2c082:	e7f0      	b.n	2c066 <uECC_valid_point+0x5a>

0002c084 <uECC_valid_public_key>:

int uECC_valid_public_key(const uint8_t *public_key, uECC_Curve curve)
{
   2c084:	b530      	push	{r4, r5, lr}
   2c086:	b091      	sub	sp, #68	; 0x44
   2c088:	4605      	mov	r5, r0
   2c08a:	460c      	mov	r4, r1

	uECC_word_t _public[NUM_ECC_WORDS * 2];

	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   2c08c:	f991 2001 	ldrsb.w	r2, [r1, #1]
   2c090:	4601      	mov	r1, r0
   2c092:	4668      	mov	r0, sp
   2c094:	f7ff ff99 	bl	2bfca <uECC_vli_bytesToNative>
	uECC_vli_bytesToNative(
	_public + curve->num_words,
   2c098:	f994 0000 	ldrsb.w	r0, [r4]
	public_key + curve->num_bytes,
   2c09c:	f994 1001 	ldrsb.w	r1, [r4, #1]
	uECC_vli_bytesToNative(
   2c0a0:	460a      	mov	r2, r1
   2c0a2:	4429      	add	r1, r5
   2c0a4:	eb0d 0080 	add.w	r0, sp, r0, lsl #2
   2c0a8:	f7ff ff8f 	bl	2bfca <uECC_vli_bytesToNative>
	curve->num_bytes);

	if (uECC_vli_cmp_unsafe(_public, curve->G, NUM_ECC_WORDS * 2) == 0) {
   2c0ac:	2210      	movs	r2, #16
   2c0ae:	f104 0144 	add.w	r1, r4, #68	; 0x44
   2c0b2:	4668      	mov	r0, sp
   2c0b4:	f7ff f962 	bl	2b37c <uECC_vli_cmp_unsafe>
   2c0b8:	b128      	cbz	r0, 2c0c6 <uECC_valid_public_key+0x42>
		return -4;
	}

	return uECC_valid_point(_public, curve);
   2c0ba:	4621      	mov	r1, r4
   2c0bc:	4668      	mov	r0, sp
   2c0be:	f7ff ffa5 	bl	2c00c <uECC_valid_point>
}
   2c0c2:	b011      	add	sp, #68	; 0x44
   2c0c4:	bd30      	pop	{r4, r5, pc}
		return -4;
   2c0c6:	f06f 0003 	mvn.w	r0, #3
   2c0ca:	e7fa      	b.n	2c0c2 <uECC_valid_public_key+0x3e>

0002c0cc <uECC_make_key>:
	}
	return 0;
}

int uECC_make_key(uint8_t *public_key, uint8_t *private_key, uECC_Curve curve)
{
   2c0cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   2c0ce:	b0a9      	sub	sp, #164	; 0xa4
   2c0d0:	4606      	mov	r6, r0
   2c0d2:	460f      	mov	r7, r1
   2c0d4:	4614      	mov	r4, r2
	uECC_word_t _random[NUM_ECC_WORDS * 2];
	uECC_word_t _private[NUM_ECC_WORDS];
	uECC_word_t _public[NUM_ECC_WORDS * 2];
	uECC_word_t tries;

	for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
   2c0d6:	2500      	movs	r5, #0
   2c0d8:	e00c      	b.n	2c0f4 <uECC_make_key+0x28>
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
        		return 0;
		}

		/* computing modular reduction of _random (see FIPS 186.4 B.4.1): */
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   2c0da:	f343 1347 	sbfx	r3, r3, #5, #8
   2c0de:	a918      	add	r1, sp, #96	; 0x60
   2c0e0:	a810      	add	r0, sp, #64	; 0x40
   2c0e2:	f7ff fadf 	bl	2b6a4 <uECC_vli_mmod>

		/* Computing public-key from private: */
		if (EccPoint_compute_public_key(_public, _private, curve)) {
   2c0e6:	4622      	mov	r2, r4
   2c0e8:	a910      	add	r1, sp, #64	; 0x40
   2c0ea:	4668      	mov	r0, sp
   2c0ec:	f7ff ff30 	bl	2bf50 <EccPoint_compute_public_key>
   2c0f0:	b998      	cbnz	r0, 2c11a <uECC_make_key+0x4e>
	for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
   2c0f2:	3501      	adds	r5, #1
   2c0f4:	2d3f      	cmp	r5, #63	; 0x3f
   2c0f6:	d82f      	bhi.n	2c158 <uECC_make_key+0x8c>
		uECC_RNG_Function rng_function = uECC_get_rng();
   2c0f8:	f7ff f8e8 	bl	2b2cc <uECC_get_rng>
		if (!rng_function ||
   2c0fc:	4603      	mov	r3, r0
   2c0fe:	b368      	cbz	r0, 2c15c <uECC_make_key+0x90>
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
   2c100:	2140      	movs	r1, #64	; 0x40
   2c102:	a818      	add	r0, sp, #96	; 0x60
   2c104:	4798      	blx	r3
		if (!rng_function ||
   2c106:	4603      	mov	r3, r0
   2c108:	b348      	cbz	r0, 2c15e <uECC_make_key+0x92>
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   2c10a:	f104 0224 	add.w	r2, r4, #36	; 0x24
   2c10e:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
   2c112:	331f      	adds	r3, #31
   2c114:	d5e1      	bpl.n	2c0da <uECC_make_key+0xe>
   2c116:	331f      	adds	r3, #31
   2c118:	e7df      	b.n	2c0da <uECC_make_key+0xe>

			/* Converting buffers to correct bit order: */
			uECC_vli_nativeToBytes(private_key,
					       BITS_TO_BYTES(curve->num_n_bits),
   2c11a:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
   2c11e:	3307      	adds	r3, #7
			uECC_vli_nativeToBytes(private_key,
   2c120:	4619      	mov	r1, r3
   2c122:	2b00      	cmp	r3, #0
   2c124:	db16      	blt.n	2c154 <uECC_make_key+0x88>
   2c126:	aa10      	add	r2, sp, #64	; 0x40
   2c128:	10c9      	asrs	r1, r1, #3
   2c12a:	4638      	mov	r0, r7
   2c12c:	f7ff ff39 	bl	2bfa2 <uECC_vli_nativeToBytes>
					       _private);
			uECC_vli_nativeToBytes(public_key,
   2c130:	466a      	mov	r2, sp
   2c132:	f994 1001 	ldrsb.w	r1, [r4, #1]
   2c136:	4630      	mov	r0, r6
   2c138:	f7ff ff33 	bl	2bfa2 <uECC_vli_nativeToBytes>
					       curve->num_bytes,
					       _public);
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   2c13c:	f994 0001 	ldrsb.w	r0, [r4, #1]
 					       curve->num_bytes,
					       _public + curve->num_words);
   2c140:	f994 2000 	ldrsb.w	r2, [r4]
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   2c144:	eb0d 0282 	add.w	r2, sp, r2, lsl #2
   2c148:	4601      	mov	r1, r0
   2c14a:	4430      	add	r0, r6
   2c14c:	f7ff ff29 	bl	2bfa2 <uECC_vli_nativeToBytes>

			/* erasing temporary buffer that stored secret: */
			memset(_private, 0, NUM_ECC_BYTES);

      			return 1;
   2c150:	2301      	movs	r3, #1
   2c152:	e004      	b.n	2c15e <uECC_make_key+0x92>
			uECC_vli_nativeToBytes(private_key,
   2c154:	1dd9      	adds	r1, r3, #7
   2c156:	e7e6      	b.n	2c126 <uECC_make_key+0x5a>
    		}
  	}
	return 0;
   2c158:	2300      	movs	r3, #0
   2c15a:	e000      	b.n	2c15e <uECC_make_key+0x92>
        		return 0;
   2c15c:	2300      	movs	r3, #0
}
   2c15e:	4618      	mov	r0, r3
   2c160:	b029      	add	sp, #164	; 0xa4
   2c162:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002c164 <uECC_shared_secret>:

int uECC_shared_secret(const uint8_t *public_key, const uint8_t *private_key,
		       uint8_t *secret, uECC_Curve curve)
{
   2c164:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2c168:	b0a5      	sub	sp, #148	; 0x94
   2c16a:	4607      	mov	r7, r0
   2c16c:	4690      	mov	r8, r2
   2c16e:	461c      	mov	r4, r3

	uECC_word_t _public[NUM_ECC_WORDS * 2];
	uECC_word_t _private[NUM_ECC_WORDS];

	uECC_word_t tmp[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {_private, tmp};
   2c170:	ab0c      	add	r3, sp, #48	; 0x30
   2c172:	9302      	str	r3, [sp, #8]
   2c174:	ab04      	add	r3, sp, #16
   2c176:	9303      	str	r3, [sp, #12]
	uECC_word_t *initial_Z = 0;
	uECC_word_t carry;
	wordcount_t num_words = curve->num_words;
   2c178:	f994 9000 	ldrsb.w	r9, [r4]
	wordcount_t num_bytes = curve->num_bytes;
   2c17c:	f994 6001 	ldrsb.w	r6, [r4, #1]
	int r;

	/* Converting buffers to correct bit order: */
	uECC_vli_bytesToNative(_private,
      			       private_key,
			       BITS_TO_BYTES(curve->num_n_bits));
   2c180:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
	uECC_vli_bytesToNative(_private,
   2c184:	3207      	adds	r2, #7
   2c186:	d449      	bmi.n	2c21c <uECC_shared_secret+0xb8>
   2c188:	ad0c      	add	r5, sp, #48	; 0x30
   2c18a:	10d2      	asrs	r2, r2, #3
   2c18c:	4628      	mov	r0, r5
   2c18e:	f7ff ff1c 	bl	2bfca <uECC_vli_bytesToNative>
	uECC_vli_bytesToNative(_public,
   2c192:	4632      	mov	r2, r6
   2c194:	4639      	mov	r1, r7
   2c196:	a814      	add	r0, sp, #80	; 0x50
   2c198:	f7ff ff17 	bl	2bfca <uECC_vli_bytesToNative>
      			       public_key,
			       num_bytes);
	uECC_vli_bytesToNative(_public + num_words,
   2c19c:	4632      	mov	r2, r6
   2c19e:	19b9      	adds	r1, r7, r6
   2c1a0:	ab14      	add	r3, sp, #80	; 0x50
   2c1a2:	eb03 0089 	add.w	r0, r3, r9, lsl #2
   2c1a6:	f7ff ff10 	bl	2bfca <uECC_vli_bytesToNative>
			       public_key + num_bytes,
			       num_bytes);

	/* Regularize the bitcount for the private key so that attackers cannot use a
	 * side channel attack to learn the number of leading zeros. */
	carry = regularize_k(_private, _private, tmp, curve);
   2c1aa:	af04      	add	r7, sp, #16
   2c1ac:	4623      	mov	r3, r4
   2c1ae:	463a      	mov	r2, r7
   2c1b0:	4629      	mov	r1, r5
   2c1b2:	4628      	mov	r0, r5
   2c1b4:	f7ff fe9e 	bl	2bef4 <regularize_k>
			goto clear_and_out;
    		}
    		initial_Z = p2[carry];
  	}

	EccPoint_mult(_public, _public, p2[!carry], initial_Z, curve->num_n_bits + 1,
   2c1b8:	fab0 f080 	clz	r0, r0
   2c1bc:	0940      	lsrs	r0, r0, #5
   2c1be:	ab24      	add	r3, sp, #144	; 0x90
   2c1c0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   2c1c4:	f850 2c88 	ldr.w	r2, [r0, #-136]
   2c1c8:	8863      	ldrh	r3, [r4, #2]
   2c1ca:	3301      	adds	r3, #1
   2c1cc:	9401      	str	r4, [sp, #4]
   2c1ce:	b21b      	sxth	r3, r3
   2c1d0:	9300      	str	r3, [sp, #0]
   2c1d2:	2300      	movs	r3, #0
   2c1d4:	a914      	add	r1, sp, #80	; 0x50
   2c1d6:	4608      	mov	r0, r1
   2c1d8:	f7ff fdda 	bl	2bd90 <EccPoint_mult>
		      curve);

	uECC_vli_nativeToBytes(secret, num_bytes, _public);
   2c1dc:	aa14      	add	r2, sp, #80	; 0x50
   2c1de:	4631      	mov	r1, r6
   2c1e0:	4640      	mov	r0, r8
   2c1e2:	f7ff fede 	bl	2bfa2 <uECC_vli_nativeToBytes>
	r = !EccPoint_isZero(_public, curve);
   2c1e6:	4621      	mov	r1, r4
   2c1e8:	a814      	add	r0, sp, #80	; 0x50
   2c1ea:	f7ff fd0f 	bl	2bc0c <EccPoint_isZero>
   2c1ee:	fab0 f680 	clz	r6, r0
   2c1f2:	0976      	lsrs	r6, r6, #5

clear_and_out:
	/* erasing temporary buffer used to store secret: */
	memset(p2, 0, sizeof(p2));
   2c1f4:	ab02      	add	r3, sp, #8
   2c1f6:	2400      	movs	r4, #0
   2c1f8:	9402      	str	r4, [sp, #8]
   2c1fa:	9403      	str	r4, [sp, #12]
	__asm__ __volatile__("" :: "g"(p2) : "memory");
	memset(tmp, 0, sizeof(tmp));
   2c1fc:	f04f 0820 	mov.w	r8, #32
   2c200:	4642      	mov	r2, r8
   2c202:	4621      	mov	r1, r4
   2c204:	4638      	mov	r0, r7
   2c206:	f7e2 fbf3 	bl	e9f0 <memset>
	__asm__ __volatile__("" :: "g"(tmp) : "memory");
	memset(_private, 0, sizeof(_private));
   2c20a:	4642      	mov	r2, r8
   2c20c:	4621      	mov	r1, r4
   2c20e:	4628      	mov	r0, r5
   2c210:	f7e2 fbee 	bl	e9f0 <memset>
	__asm__ __volatile__("" :: "g"(_private) : "memory");

	return r;
}
   2c214:	4630      	mov	r0, r6
   2c216:	b025      	add	sp, #148	; 0x94
   2c218:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uECC_vli_bytesToNative(_private,
   2c21c:	3207      	adds	r2, #7
   2c21e:	e7b3      	b.n	2c188 <uECC_shared_secret+0x24>

0002c220 <_copy>:
#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
	if (from_len <= to_len) {
   2c220:	428b      	cmp	r3, r1
   2c222:	d901      	bls.n	2c228 <_copy+0x8>
		(void)memcpy(to, from, from_len);
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
   2c224:	2000      	movs	r0, #0
	}
}
   2c226:	4770      	bx	lr
{
   2c228:	b510      	push	{r4, lr}
   2c22a:	461c      	mov	r4, r3
   2c22c:	4611      	mov	r1, r2
		(void)memcpy(to, from, from_len);
   2c22e:	461a      	mov	r2, r3
   2c230:	f7e2 fbb6 	bl	e9a0 <memcpy>
		return from_len;
   2c234:	4620      	mov	r0, r4
}
   2c236:	bd10      	pop	{r4, pc}

0002c238 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
   2c238:	b508      	push	{r3, lr}
	(void)memset(to, val, len);
   2c23a:	f7e2 fbd9 	bl	e9f0 <memset>
}
   2c23e:	bd08      	pop	{r3, pc}

0002c240 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   2c240:	09c3      	lsrs	r3, r0, #7
   2c242:	005a      	lsls	r2, r3, #1
   2c244:	4413      	add	r3, r2
   2c246:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   2c24a:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   2c24e:	b2c0      	uxtb	r0, r0
   2c250:	4770      	bx	lr
	...

0002c254 <pos>:

static int
pos(char c)
{
    const char *p;
    for (p = base64_chars; *p; p++)
   2c254:	4b06      	ldr	r3, [pc, #24]	; (2c270 <pos+0x1c>)
   2c256:	781a      	ldrb	r2, [r3, #0]
   2c258:	b132      	cbz	r2, 2c268 <pos+0x14>
        if (*p == c)
   2c25a:	4282      	cmp	r2, r0
   2c25c:	d001      	beq.n	2c262 <pos+0xe>
    for (p = base64_chars; *p; p++)
   2c25e:	3301      	adds	r3, #1
   2c260:	e7f9      	b.n	2c256 <pos+0x2>
            return p - base64_chars;
   2c262:	4803      	ldr	r0, [pc, #12]	; (2c270 <pos+0x1c>)
   2c264:	1a18      	subs	r0, r3, r0
   2c266:	4770      	bx	lr
    return -1;
   2c268:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   2c26c:	4770      	bx	lr
   2c26e:	bf00      	nop
   2c270:	00032bac 	.word	0x00032bac

0002c274 <token_decode>:

#define DECODE_ERROR -1

static unsigned int
token_decode(const char *token)
{
   2c274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2c276:	4607      	mov	r7, r0
    int i;
    unsigned int val = 0;
    int marker = 0;
    if (strlen(token) < 4)
   2c278:	f7e2 fc30 	bl	eadc <strlen>
   2c27c:	2803      	cmp	r0, #3
   2c27e:	d916      	bls.n	2c2ae <token_decode+0x3a>
    int marker = 0;
   2c280:	2600      	movs	r6, #0
    unsigned int val = 0;
   2c282:	4634      	mov	r4, r6
        return DECODE_ERROR;
    for (i = 0; i < 4; i++) {
   2c284:	4635      	mov	r5, r6
   2c286:	e001      	b.n	2c28c <token_decode+0x18>
        val *= 64;
        if (token[i] == '=')
            marker++;
   2c288:	3601      	adds	r6, #1
    for (i = 0; i < 4; i++) {
   2c28a:	3501      	adds	r5, #1
   2c28c:	2d03      	cmp	r5, #3
   2c28e:	dc09      	bgt.n	2c2a4 <token_decode+0x30>
        val *= 64;
   2c290:	01a4      	lsls	r4, r4, #6
        if (token[i] == '=')
   2c292:	5d78      	ldrb	r0, [r7, r5]
   2c294:	283d      	cmp	r0, #61	; 0x3d
   2c296:	d0f7      	beq.n	2c288 <token_decode+0x14>
        else if (marker > 0)
   2c298:	2e00      	cmp	r6, #0
   2c29a:	dc0b      	bgt.n	2c2b4 <token_decode+0x40>
            return DECODE_ERROR;
        else
            val += pos(token[i]);
   2c29c:	f7ff ffda 	bl	2c254 <pos>
   2c2a0:	4404      	add	r4, r0
   2c2a2:	e7f2      	b.n	2c28a <token_decode+0x16>
    }
    if (marker > 2)
   2c2a4:	2e02      	cmp	r6, #2
   2c2a6:	dc08      	bgt.n	2c2ba <token_decode+0x46>
        return DECODE_ERROR;
    return (marker << 24) | val;
   2c2a8:	ea44 6006 	orr.w	r0, r4, r6, lsl #24
}
   2c2ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return DECODE_ERROR;
   2c2ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2c2b2:	e7fb      	b.n	2c2ac <token_decode+0x38>
            return DECODE_ERROR;
   2c2b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2c2b8:	e7f8      	b.n	2c2ac <token_decode+0x38>
        return DECODE_ERROR;
   2c2ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2c2be:	e7f5      	b.n	2c2ac <token_decode+0x38>

0002c2c0 <base64_encode>:
{
   2c2c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2c2c2:	4616      	mov	r6, r2
    p = s;
   2c2c4:	4615      	mov	r5, r2
    last = NULL;
   2c2c6:	2400      	movs	r4, #0
    i = 0;
   2c2c8:	4622      	mov	r2, r4
    while (i < size) {
   2c2ca:	e019      	b.n	2c300 <base64_encode+0x40>
        i++;
   2c2cc:	3203      	adds	r2, #3
        p[0] = base64_chars[(c & 0x00fc0000) >> 18];
   2c2ce:	f3c4 4c85 	ubfx	ip, r4, #18, #6
   2c2d2:	4f1d      	ldr	r7, [pc, #116]	; (2c348 <base64_encode+0x88>)
   2c2d4:	f817 c00c 	ldrb.w	ip, [r7, ip]
   2c2d8:	f885 c000 	strb.w	ip, [r5]
        p[1] = base64_chars[(c & 0x0003f000) >> 12];
   2c2dc:	f3c4 3c05 	ubfx	ip, r4, #12, #6
   2c2e0:	f817 c00c 	ldrb.w	ip, [r7, ip]
   2c2e4:	f885 c001 	strb.w	ip, [r5, #1]
        p[2] = base64_chars[(c & 0x00000fc0) >> 6];
   2c2e8:	f3c4 1c85 	ubfx	ip, r4, #6, #6
   2c2ec:	f817 c00c 	ldrb.w	ip, [r7, ip]
   2c2f0:	f885 c002 	strb.w	ip, [r5, #2]
        p[3] = base64_chars[(c & 0x0000003f) >> 0];
   2c2f4:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   2c2f8:	5d3c      	ldrb	r4, [r7, r4]
   2c2fa:	70ec      	strb	r4, [r5, #3]
        last = p;
   2c2fc:	462c      	mov	r4, r5
        p += 4;
   2c2fe:	3504      	adds	r5, #4
    while (i < size) {
   2c300:	428a      	cmp	r2, r1
   2c302:	da0d      	bge.n	2c320 <base64_encode+0x60>
        c = q[i++];
   2c304:	1c57      	adds	r7, r2, #1
   2c306:	5c84      	ldrb	r4, [r0, r2]
        c *= 256;
   2c308:	0224      	lsls	r4, r4, #8
        if (i < size)
   2c30a:	42b9      	cmp	r1, r7
   2c30c:	dd01      	ble.n	2c312 <base64_encode+0x52>
            c += q[i];
   2c30e:	5dc7      	ldrb	r7, [r0, r7]
   2c310:	443c      	add	r4, r7
        i++;
   2c312:	1c97      	adds	r7, r2, #2
        c *= 256;
   2c314:	0224      	lsls	r4, r4, #8
        if (i < size)
   2c316:	42b9      	cmp	r1, r7
   2c318:	ddd8      	ble.n	2c2cc <base64_encode+0xc>
            c += q[i];
   2c31a:	5dc7      	ldrb	r7, [r0, r7]
   2c31c:	443c      	add	r4, r7
   2c31e:	e7d5      	b.n	2c2cc <base64_encode+0xc>
    if (last) {
   2c320:	b134      	cbz	r4, 2c330 <base64_encode+0x70>
        diff = i - size;
   2c322:	1a52      	subs	r2, r2, r1
        if (diff > 0) {
   2c324:	2a00      	cmp	r2, #0
   2c326:	dd03      	ble.n	2c330 <base64_encode+0x70>
            if (should_pad) {
   2c328:	b933      	cbnz	r3, 2c338 <base64_encode+0x78>
                p = last + (4 - diff);
   2c32a:	f1c2 0204 	rsb	r2, r2, #4
   2c32e:	18a5      	adds	r5, r4, r2
    *p = 0;
   2c330:	2300      	movs	r3, #0
   2c332:	702b      	strb	r3, [r5, #0]
}
   2c334:	1ba8      	subs	r0, r5, r6
   2c336:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                memset(last + (4 - diff), '=', diff);
   2c338:	f1c2 0004 	rsb	r0, r2, #4
   2c33c:	213d      	movs	r1, #61	; 0x3d
   2c33e:	4420      	add	r0, r4
   2c340:	f7e2 fb56 	bl	e9f0 <memset>
   2c344:	e7f4      	b.n	2c330 <base64_encode+0x70>
   2c346:	bf00      	nop
   2c348:	00032bac 	.word	0x00032bac

0002c34c <base64_decode>:

int
base64_decode(const char *str, void *data)
{
   2c34c:	b570      	push	{r4, r5, r6, lr}
   2c34e:	4604      	mov	r4, r0
   2c350:	460e      	mov	r6, r1
    const char *p;
    unsigned char *q;

    q = data;
   2c352:	460d      	mov	r5, r1
    for (p = str; *p && (*p == '=' || strchr(base64_chars, *p)); p += 4) {
   2c354:	e005      	b.n	2c362 <base64_decode+0x16>
        if (val == DECODE_ERROR) {
            return -1;
        }
        *q++ = (val >> 16) & 0xff;
        if (marker < 2) {
            *q++ = (val >> 8) & 0xff;
   2c356:	0a03      	lsrs	r3, r0, #8
   2c358:	1caa      	adds	r2, r5, #2
   2c35a:	706b      	strb	r3, [r5, #1]
   2c35c:	e015      	b.n	2c38a <base64_decode+0x3e>
    for (p = str; *p && (*p == '=' || strchr(base64_chars, *p)); p += 4) {
   2c35e:	3404      	adds	r4, #4
   2c360:	4615      	mov	r5, r2
   2c362:	7821      	ldrb	r1, [r4, #0]
   2c364:	b1b1      	cbz	r1, 2c394 <base64_decode+0x48>
   2c366:	293d      	cmp	r1, #61	; 0x3d
   2c368:	d003      	beq.n	2c372 <base64_decode+0x26>
   2c36a:	480d      	ldr	r0, [pc, #52]	; (2c3a0 <base64_decode+0x54>)
   2c36c:	f002 ff86 	bl	2f27c <strchr>
   2c370:	b180      	cbz	r0, 2c394 <base64_decode+0x48>
        unsigned int val = token_decode(p);
   2c372:	4620      	mov	r0, r4
   2c374:	f7ff ff7e 	bl	2c274 <token_decode>
        unsigned int marker = (val >> 24) & 0xff;
   2c378:	0e01      	lsrs	r1, r0, #24
        if (val == DECODE_ERROR) {
   2c37a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   2c37e:	d00b      	beq.n	2c398 <base64_decode+0x4c>
        *q++ = (val >> 16) & 0xff;
   2c380:	0c03      	lsrs	r3, r0, #16
   2c382:	1c6a      	adds	r2, r5, #1
   2c384:	702b      	strb	r3, [r5, #0]
        if (marker < 2) {
   2c386:	2901      	cmp	r1, #1
   2c388:	d9e5      	bls.n	2c356 <base64_decode+0xa>
        }
        if (marker < 1) {
   2c38a:	2900      	cmp	r1, #0
   2c38c:	d1e7      	bne.n	2c35e <base64_decode+0x12>
            *q++ = val & 0xff;
   2c38e:	7010      	strb	r0, [r2, #0]
   2c390:	3201      	adds	r2, #1
   2c392:	e7e4      	b.n	2c35e <base64_decode+0x12>
        }
    }
    return q - (unsigned char *) data;
   2c394:	1ba8      	subs	r0, r5, r6
}
   2c396:	bd70      	pop	{r4, r5, r6, pc}
            return -1;
   2c398:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2c39c:	e7fb      	b.n	2c396 <base64_decode+0x4a>
   2c39e:	bf00      	nop
   2c3a0:	00032bac 	.word	0x00032bac

0002c3a4 <cbuf_buf_reader_get8>:

static uint8_t
cbuf_buf_reader_get8(struct cbor_decoder_reader *d, int offset)
{
    struct cbor_buf_reader *cb = (struct cbor_buf_reader *) d;
    return cb->buffer[offset];
   2c3a4:	69c3      	ldr	r3, [r0, #28]
}
   2c3a6:	5c58      	ldrb	r0, [r3, r1]
   2c3a8:	4770      	bx	lr

0002c3aa <cbor_buf_reader_cpy>:
}

static uintptr_t
cbor_buf_reader_cpy(struct cbor_decoder_reader *d, char *dst, int src_offset,
                    size_t len)
{
   2c3aa:	b510      	push	{r4, lr}
   2c3ac:	460c      	mov	r4, r1
    struct cbor_buf_reader *cb = (struct cbor_buf_reader *) d;
    return (uintptr_t) memcpy(dst, cb->buffer + src_offset, len);
   2c3ae:	69c1      	ldr	r1, [r0, #28]
   2c3b0:	4411      	add	r1, r2
   2c3b2:	461a      	mov	r2, r3
   2c3b4:	4620      	mov	r0, r4
   2c3b6:	f7e2 faf3 	bl	e9a0 <memcpy>
}
   2c3ba:	bd10      	pop	{r4, pc}

0002c3bc <cbor_buf_reader_cmp>:
{
   2c3bc:	b510      	push	{r4, lr}
   2c3be:	460c      	mov	r4, r1
    return memcmp(dst, cb->buffer + src_offset, len) == 0;
   2c3c0:	69c1      	ldr	r1, [r0, #28]
   2c3c2:	4411      	add	r1, r2
   2c3c4:	461a      	mov	r2, r3
   2c3c6:	4620      	mov	r0, r4
   2c3c8:	f7e2 fac6 	bl	e958 <memcmp>
}
   2c3cc:	fab0 f080 	clz	r0, r0
   2c3d0:	0940      	lsrs	r0, r0, #5
   2c3d2:	bd10      	pop	{r4, pc}

0002c3d4 <cbuf_buf_reader_get64>:
{
   2c3d4:	b082      	sub	sp, #8
    return get64(cb->buffer + offset);
   2c3d6:	69c3      	ldr	r3, [r0, #28]
   2c3d8:	4419      	add	r1, r3
}

static inline uint64_t get64(const uint8_t *ptr)
{
    uint64_t result;
    memcpy(&result, ptr, sizeof(result));
   2c3da:	466b      	mov	r3, sp
   2c3dc:	6808      	ldr	r0, [r1, #0]
   2c3de:	6849      	ldr	r1, [r1, #4]
   2c3e0:	c303      	stmia	r3!, {r0, r1}
}
   2c3e2:	ba08      	rev	r0, r1
   2c3e4:	9900      	ldr	r1, [sp, #0]
   2c3e6:	ba09      	rev	r1, r1
   2c3e8:	b002      	add	sp, #8
   2c3ea:	4770      	bx	lr

0002c3ec <cbuf_buf_reader_get32>:
    val = get32(cb->buffer + offset);
   2c3ec:	69c3      	ldr	r3, [r0, #28]
    memcpy(&result, ptr, sizeof(result));
   2c3ee:	5858      	ldr	r0, [r3, r1]
}
   2c3f0:	ba00      	rev	r0, r0
   2c3f2:	4770      	bx	lr

0002c3f4 <cbuf_buf_reader_get16>:
    return get16(cb->buffer + offset);
   2c3f4:	69c3      	ldr	r3, [r0, #28]
    memcpy(&result, ptr, sizeof(result));
   2c3f6:	5a58      	ldrh	r0, [r3, r1]
    return cbor_ntohs(result);
   2c3f8:	ba40      	rev16	r0, r0
}
   2c3fa:	b280      	uxth	r0, r0
   2c3fc:	4770      	bx	lr
	...

0002c400 <cbor_buf_reader_init>:

void
cbor_buf_reader_init(struct cbor_buf_reader *cb, const uint8_t *buffer,
                     size_t data)
{
    cb->buffer = buffer;
   2c400:	61c1      	str	r1, [r0, #28]
    cb->r.get8 = &cbuf_buf_reader_get8;
   2c402:	4b07      	ldr	r3, [pc, #28]	; (2c420 <cbor_buf_reader_init+0x20>)
   2c404:	6003      	str	r3, [r0, #0]
    cb->r.get16 = &cbuf_buf_reader_get16;
   2c406:	4b07      	ldr	r3, [pc, #28]	; (2c424 <cbor_buf_reader_init+0x24>)
   2c408:	6043      	str	r3, [r0, #4]
    cb->r.get32 = &cbuf_buf_reader_get32;
   2c40a:	4b07      	ldr	r3, [pc, #28]	; (2c428 <cbor_buf_reader_init+0x28>)
   2c40c:	6083      	str	r3, [r0, #8]
    cb->r.get64 = &cbuf_buf_reader_get64;
   2c40e:	4b07      	ldr	r3, [pc, #28]	; (2c42c <cbor_buf_reader_init+0x2c>)
   2c410:	60c3      	str	r3, [r0, #12]
    cb->r.cmp = &cbor_buf_reader_cmp;
   2c412:	4b07      	ldr	r3, [pc, #28]	; (2c430 <cbor_buf_reader_init+0x30>)
   2c414:	6103      	str	r3, [r0, #16]
    cb->r.cpy = &cbor_buf_reader_cpy;
   2c416:	4b07      	ldr	r3, [pc, #28]	; (2c434 <cbor_buf_reader_init+0x34>)
   2c418:	6143      	str	r3, [r0, #20]
    cb->r.message_size = data;
   2c41a:	6182      	str	r2, [r0, #24]
}
   2c41c:	4770      	bx	lr
   2c41e:	bf00      	nop
   2c420:	0002c3a5 	.word	0x0002c3a5
   2c424:	0002c3f5 	.word	0x0002c3f5
   2c428:	0002c3ed 	.word	0x0002c3ed
   2c42c:	0002c3d5 	.word	0x0002c3d5
   2c430:	0002c3bd 	.word	0x0002c3bd
   2c434:	0002c3ab 	.word	0x0002c3ab

0002c438 <cbor_buf_writer>:
    return (remaining < 0);
}

int
cbor_buf_writer(struct cbor_encoder_writer *arg, const char *data, int len)
{
   2c438:	b538      	push	{r3, r4, r5, lr}
   2c43a:	4604      	mov	r4, r0
    ptrdiff_t remaining = (ptrdiff_t)cb->end;
   2c43c:	68c3      	ldr	r3, [r0, #12]
    remaining -= (ptrdiff_t)cb->ptr;
   2c43e:	6880      	ldr	r0, [r0, #8]
   2c440:	1a1b      	subs	r3, r3, r0
    remaining -= (ptrdiff_t)len;
   2c442:	1a9b      	subs	r3, r3, r2
    struct cbor_buf_writer *cb = (struct cbor_buf_writer *) arg;

    if (would_overflow(cb, len)) {
   2c444:	2b00      	cmp	r3, #0
   2c446:	db0a      	blt.n	2c45e <cbor_buf_writer+0x26>
   2c448:	4615      	mov	r5, r2
        return CborErrorOutOfMemory;
    }

    memcpy(cb->ptr, data, len);
   2c44a:	f7e2 faa9 	bl	e9a0 <memcpy>
    cb->ptr += len;
   2c44e:	68a3      	ldr	r3, [r4, #8]
   2c450:	442b      	add	r3, r5
   2c452:	60a3      	str	r3, [r4, #8]
    cb->enc.bytes_written += len;
   2c454:	6862      	ldr	r2, [r4, #4]
   2c456:	442a      	add	r2, r5
   2c458:	6062      	str	r2, [r4, #4]
    return CborNoError;
   2c45a:	2000      	movs	r0, #0
}
   2c45c:	bd38      	pop	{r3, r4, r5, pc}
        return CborErrorOutOfMemory;
   2c45e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
   2c462:	e7fb      	b.n	2c45c <cbor_buf_writer+0x24>

0002c464 <cbor_buf_writer_init>:

void
cbor_buf_writer_init(struct cbor_buf_writer *cb, uint8_t *buffer, size_t size)
{
    cb->ptr = buffer;
   2c464:	6081      	str	r1, [r0, #8]
    cb->end = buffer + size;
   2c466:	440a      	add	r2, r1
   2c468:	60c2      	str	r2, [r0, #12]
    cb->enc.bytes_written = 0;
   2c46a:	2300      	movs	r3, #0
   2c46c:	6043      	str	r3, [r0, #4]
    cb->enc.write = cbor_buf_writer;
   2c46e:	4b01      	ldr	r3, [pc, #4]	; (2c474 <cbor_buf_writer_init+0x10>)
   2c470:	6003      	str	r3, [r0, #0]
}
   2c472:	4770      	bx	lr
   2c474:	0002c439 	.word	0x0002c439

0002c478 <cbor_buf_writer_buffer_size>:

size_t
cbor_buf_writer_buffer_size(struct cbor_buf_writer *cb, const uint8_t *buffer)
{
    return (size_t)(cb->ptr - buffer);
   2c478:	6880      	ldr	r0, [r0, #8]
}
   2c47a:	1a40      	subs	r0, r0, r1
   2c47c:	4770      	bx	lr

0002c47e <cbor_mbuf_reader_cpy>:
}

static uintptr_t
cbor_mbuf_reader_cpy(struct cbor_decoder_reader *d, char *dst, int offset,
                     size_t len)
{
   2c47e:	b538      	push	{r3, r4, r5, lr}
   2c480:	461d      	mov	r5, r3
    int rc;
    struct cbor_mbuf_reader *cb = (struct cbor_mbuf_reader *) d;

    rc = os_mbuf_copydata(cb->m, offset + cb->init_off, len, dst);
   2c482:	69c3      	ldr	r3, [r0, #28]
   2c484:	189c      	adds	r4, r3, r2
   2c486:	460b      	mov	r3, r1
   2c488:	462a      	mov	r2, r5
   2c48a:	4621      	mov	r1, r4
   2c48c:	6a00      	ldr	r0, [r0, #32]
   2c48e:	f7e1 f872 	bl	d576 <os_mbuf_copydata>
    if (rc == 0) {
   2c492:	b108      	cbz	r0, 2c498 <cbor_mbuf_reader_cpy+0x1a>
        return true;
    }
    return false;
   2c494:	2000      	movs	r0, #0
}
   2c496:	bd38      	pop	{r3, r4, r5, pc}
        return true;
   2c498:	2001      	movs	r0, #1
   2c49a:	e7fc      	b.n	2c496 <cbor_mbuf_reader_cpy+0x18>

0002c49c <cbor_mbuf_reader_get8>:
{
   2c49c:	b510      	push	{r4, lr}
   2c49e:	b082      	sub	sp, #8
    os_mbuf_copydata(cb->m, offset + cb->init_off, sizeof(val), &val);
   2c4a0:	69c4      	ldr	r4, [r0, #28]
   2c4a2:	f10d 0307 	add.w	r3, sp, #7
   2c4a6:	2201      	movs	r2, #1
   2c4a8:	4421      	add	r1, r4
   2c4aa:	6a00      	ldr	r0, [r0, #32]
   2c4ac:	f7e1 f863 	bl	d576 <os_mbuf_copydata>
}
   2c4b0:	f89d 0007 	ldrb.w	r0, [sp, #7]
   2c4b4:	b002      	add	sp, #8
   2c4b6:	bd10      	pop	{r4, pc}

0002c4b8 <cbor_mbuf_reader_cmp>:
{
   2c4b8:	b510      	push	{r4, lr}
    return os_mbuf_cmpf(cb->m, offset + cb->init_off, buf, len) == 0;
   2c4ba:	69c4      	ldr	r4, [r0, #28]
   2c4bc:	4414      	add	r4, r2
   2c4be:	460a      	mov	r2, r1
   2c4c0:	4621      	mov	r1, r4
   2c4c2:	6a00      	ldr	r0, [r0, #32]
   2c4c4:	f7e1 f8d6 	bl	d674 <os_mbuf_cmpf>
}
   2c4c8:	fab0 f080 	clz	r0, r0
   2c4cc:	0940      	lsrs	r0, r0, #5
   2c4ce:	bd10      	pop	{r4, pc}

0002c4d0 <cbor_mbuf_reader_get64>:
{
   2c4d0:	b510      	push	{r4, lr}
   2c4d2:	b082      	sub	sp, #8
    os_mbuf_copydata(cb->m, offset + cb->init_off, sizeof(val), &val);
   2c4d4:	69c4      	ldr	r4, [r0, #28]
   2c4d6:	466b      	mov	r3, sp
   2c4d8:	2208      	movs	r2, #8
   2c4da:	4421      	add	r1, r4
   2c4dc:	6a00      	ldr	r0, [r0, #32]
   2c4de:	f7e1 f84a 	bl	d576 <os_mbuf_copydata>
}
   2c4e2:	9801      	ldr	r0, [sp, #4]
   2c4e4:	ba00      	rev	r0, r0
   2c4e6:	9900      	ldr	r1, [sp, #0]
   2c4e8:	ba09      	rev	r1, r1
   2c4ea:	b002      	add	sp, #8
   2c4ec:	bd10      	pop	{r4, pc}

0002c4ee <cbor_mbuf_reader_get32>:
{
   2c4ee:	b510      	push	{r4, lr}
   2c4f0:	b082      	sub	sp, #8
    os_mbuf_copydata(cb->m, offset + cb->init_off, sizeof(val), &val);
   2c4f2:	69c4      	ldr	r4, [r0, #28]
   2c4f4:	ab01      	add	r3, sp, #4
   2c4f6:	2204      	movs	r2, #4
   2c4f8:	4421      	add	r1, r4
   2c4fa:	6a00      	ldr	r0, [r0, #32]
   2c4fc:	f7e1 f83b 	bl	d576 <os_mbuf_copydata>
}
   2c500:	9801      	ldr	r0, [sp, #4]
   2c502:	ba00      	rev	r0, r0
   2c504:	b002      	add	sp, #8
   2c506:	bd10      	pop	{r4, pc}

0002c508 <cbor_mbuf_reader_get16>:
{
   2c508:	b510      	push	{r4, lr}
   2c50a:	b082      	sub	sp, #8
    os_mbuf_copydata(cb->m, offset + cb->init_off, sizeof(val), &val);
   2c50c:	69c4      	ldr	r4, [r0, #28]
   2c50e:	f10d 0306 	add.w	r3, sp, #6
   2c512:	2202      	movs	r2, #2
   2c514:	4421      	add	r1, r4
   2c516:	6a00      	ldr	r0, [r0, #32]
   2c518:	f7e1 f82d 	bl	d576 <os_mbuf_copydata>
    return cbor_ntohs(val);
   2c51c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   2c520:	ba40      	rev16	r0, r0
}
   2c522:	b280      	uxth	r0, r0
   2c524:	b002      	add	sp, #8
   2c526:	bd10      	pop	{r4, pc}

0002c528 <cbor_mbuf_reader_init>:

void
cbor_mbuf_reader_init(struct cbor_mbuf_reader *cb, struct os_mbuf *m,
                      int initial_offset)
{
   2c528:	b508      	push	{r3, lr}
    struct os_mbuf_pkthdr *hdr;

    cb->r.get8 = &cbor_mbuf_reader_get8;
   2c52a:	4b0f      	ldr	r3, [pc, #60]	; (2c568 <cbor_mbuf_reader_init+0x40>)
   2c52c:	6003      	str	r3, [r0, #0]
    cb->r.get16 = &cbor_mbuf_reader_get16;
   2c52e:	4b0f      	ldr	r3, [pc, #60]	; (2c56c <cbor_mbuf_reader_init+0x44>)
   2c530:	6043      	str	r3, [r0, #4]
    cb->r.get32 = &cbor_mbuf_reader_get32;
   2c532:	4b0f      	ldr	r3, [pc, #60]	; (2c570 <cbor_mbuf_reader_init+0x48>)
   2c534:	6083      	str	r3, [r0, #8]
    cb->r.get64 = &cbor_mbuf_reader_get64;
   2c536:	4b0f      	ldr	r3, [pc, #60]	; (2c574 <cbor_mbuf_reader_init+0x4c>)
   2c538:	60c3      	str	r3, [r0, #12]
    cb->r.cmp = &cbor_mbuf_reader_cmp;
   2c53a:	4b0f      	ldr	r3, [pc, #60]	; (2c578 <cbor_mbuf_reader_init+0x50>)
   2c53c:	6103      	str	r3, [r0, #16]
    cb->r.cpy = &cbor_mbuf_reader_cpy;
   2c53e:	4b0f      	ldr	r3, [pc, #60]	; (2c57c <cbor_mbuf_reader_init+0x54>)
   2c540:	6143      	str	r3, [r0, #20]

    assert(OS_MBUF_IS_PKTHDR(m));
   2c542:	794b      	ldrb	r3, [r1, #5]
   2c544:	2b07      	cmp	r3, #7
   2c546:	d905      	bls.n	2c554 <cbor_mbuf_reader_init+0x2c>
    hdr = OS_MBUF_PKTHDR(m);
    cb->m = m;
   2c548:	6201      	str	r1, [r0, #32]
    cb->init_off = initial_offset;
   2c54a:	61c2      	str	r2, [r0, #28]
    cb->r.message_size = hdr->omp_len - initial_offset;
   2c54c:	8a0b      	ldrh	r3, [r1, #16]
   2c54e:	1a9a      	subs	r2, r3, r2
   2c550:	6182      	str	r2, [r0, #24]
}
   2c552:	bd08      	pop	{r3, pc}
    assert(OS_MBUF_IS_PKTHDR(m));
   2c554:	f7df fe48 	bl	c1e8 <hal_debugger_connected>
   2c558:	b100      	cbz	r0, 2c55c <cbor_mbuf_reader_init+0x34>
   2c55a:	be01      	bkpt	0x0001
   2c55c:	2300      	movs	r3, #0
   2c55e:	461a      	mov	r2, r3
   2c560:	4619      	mov	r1, r3
   2c562:	4618      	mov	r0, r3
   2c564:	f7e0 faf4 	bl	cb50 <__assert_func>
   2c568:	0002c49d 	.word	0x0002c49d
   2c56c:	0002c509 	.word	0x0002c509
   2c570:	0002c4ef 	.word	0x0002c4ef
   2c574:	0002c4d1 	.word	0x0002c4d1
   2c578:	0002c4b9 	.word	0x0002c4b9
   2c57c:	0002c47f 	.word	0x0002c47f

0002c580 <cbor_mbuf_writer>:
#include <tinycbor/cbor.h>
#include <tinycbor/cbor_mbuf_writer.h>

int
cbor_mbuf_writer(struct cbor_encoder_writer *arg, const char *data, int len)
{
   2c580:	b538      	push	{r3, r4, r5, lr}
   2c582:	4604      	mov	r4, r0
   2c584:	4615      	mov	r5, r2
    int rc;
    struct cbor_mbuf_writer *cb = (struct cbor_mbuf_writer *) arg;

    rc = os_mbuf_append(cb->m, data, len);
   2c586:	b292      	uxth	r2, r2
   2c588:	6880      	ldr	r0, [r0, #8]
   2c58a:	f7e0 ff65 	bl	d458 <os_mbuf_append>
    if (rc) {
   2c58e:	b928      	cbnz	r0, 2c59c <cbor_mbuf_writer+0x1c>
   2c590:	4603      	mov	r3, r0
        return CborErrorOutOfMemory;
    }
    cb->enc.bytes_written += len;
   2c592:	6862      	ldr	r2, [r4, #4]
   2c594:	442a      	add	r2, r5
   2c596:	6062      	str	r2, [r4, #4]
    return CborNoError;
}
   2c598:	4618      	mov	r0, r3
   2c59a:	bd38      	pop	{r3, r4, r5, pc}
        return CborErrorOutOfMemory;
   2c59c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
   2c5a0:	e7fa      	b.n	2c598 <cbor_mbuf_writer+0x18>
	...

0002c5a4 <cbor_mbuf_writer_init>:


void
cbor_mbuf_writer_init(struct cbor_mbuf_writer *cb, struct os_mbuf *m)
{
    cb->m = m;
   2c5a4:	6081      	str	r1, [r0, #8]
    cb->enc.bytes_written = 0;
   2c5a6:	2300      	movs	r3, #0
   2c5a8:	6043      	str	r3, [r0, #4]
    cb->enc.write = &cbor_mbuf_writer;
   2c5aa:	4b01      	ldr	r3, [pc, #4]	; (2c5b0 <cbor_mbuf_writer_init+0xc>)
   2c5ac:	6003      	str	r3, [r0, #0]
}
   2c5ae:	4770      	bx	lr
   2c5b0:	0002c581 	.word	0x0002c581

0002c5b4 <create_container>:

#ifdef __GNUC__
__attribute__((noinline))
#endif
static CborError create_container(CborEncoder *encoder, CborEncoder *container, size_t length, uint8_t shiftedMajorType)
{
   2c5b4:	b530      	push	{r4, r5, lr}
   2c5b6:	b085      	sub	sp, #20
   2c5b8:	460c      	mov	r4, r1
    CborError err;
    container->writer = encoder->writer;
   2c5ba:	6801      	ldr	r1, [r0, #0]
   2c5bc:	6021      	str	r1, [r4, #0]
    ++encoder->added;
   2c5be:	6881      	ldr	r1, [r0, #8]
   2c5c0:	3101      	adds	r1, #1
   2c5c2:	6081      	str	r1, [r0, #8]
    container->added = 0;
   2c5c4:	2100      	movs	r1, #0
   2c5c6:	60a1      	str	r1, [r4, #8]

    cbor_static_assert(((MapType << MajorTypeShift) & CborIteratorFlag_ContainerIsMap) == CborIteratorFlag_ContainerIsMap);
    cbor_static_assert(((ArrayType << MajorTypeShift) & CborIteratorFlag_ContainerIsMap) == 0);
    container->flags = shiftedMajorType & CborIteratorFlag_ContainerIsMap;
   2c5c8:	f003 0120 	and.w	r1, r3, #32
   2c5cc:	60e1      	str	r1, [r4, #12]

    if (length == CborIndefiniteLength) {
   2c5ce:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   2c5d2:	d10d      	bne.n	2c5f0 <create_container+0x3c>
        container->flags |= CborIteratorFlag_UnknownLength;
   2c5d4:	f041 0104 	orr.w	r1, r1, #4
   2c5d8:	60e1      	str	r1, [r4, #12]
        err = append_byte_to_buffer(container, shiftedMajorType + IndefiniteLength);
   2c5da:	331f      	adds	r3, #31
   2c5dc:	a904      	add	r1, sp, #16
   2c5de:	f801 3d10 	strb.w	r3, [r1, #-16]!
    return encoder->writer->write(encoder->writer, data, len);
   2c5e2:	6820      	ldr	r0, [r4, #0]
   2c5e4:	6803      	ldr	r3, [r0, #0]
   2c5e6:	2201      	movs	r2, #1
   2c5e8:	4798      	blx	r3
    }
    if (err && !isOomError(err))
        return err;

    return CborNoError;
}
   2c5ea:	2000      	movs	r0, #0
   2c5ec:	b005      	add	sp, #20
   2c5ee:	bd30      	pop	{r4, r5, pc}
        err = encode_number_no_update(container, length, shiftedMajorType);
   2c5f0:	4610      	mov	r0, r2
   2c5f2:	2100      	movs	r1, #0
    v = cbor_htonll(v);
   2c5f4:	ba12      	rev	r2, r2
   2c5f6:	2500      	movs	r5, #0
    memcpy(where, &v, sizeof(v));
   2c5f8:	9502      	str	r5, [sp, #8]
   2c5fa:	9203      	str	r2, [sp, #12]
    if (ui < Value8Bit) {
   2c5fc:	2900      	cmp	r1, #0
   2c5fe:	bf08      	it	eq
   2c600:	2818      	cmpeq	r0, #24
   2c602:	d31a      	bcc.n	2c63a <create_container+0x86>
        if (ui > 0xffU)
   2c604:	2900      	cmp	r1, #0
   2c606:	bf08      	it	eq
   2c608:	f5b0 7f80 	cmpeq.w	r0, #256	; 0x100
   2c60c:	d21b      	bcs.n	2c646 <create_container+0x92>
        unsigned more = 0;
   2c60e:	2500      	movs	r5, #0
        if (ui > 0xffffU)
   2c610:	2900      	cmp	r1, #0
   2c612:	bf08      	it	eq
   2c614:	f5b0 3f80 	cmpeq.w	r0, #65536	; 0x10000
   2c618:	d300      	bcc.n	2c61c <create_container+0x68>
            ++more;
   2c61a:	3501      	adds	r5, #1
        bufstart -= (size_t)1 << more;
   2c61c:	2101      	movs	r1, #1
   2c61e:	fa01 f205 	lsl.w	r2, r1, r5
   2c622:	f10d 010f 	add.w	r1, sp, #15
   2c626:	1a89      	subs	r1, r1, r2
        *bufstart = shiftedMajorType + Value8Bit + more;
   2c628:	442b      	add	r3, r5
   2c62a:	3318      	adds	r3, #24
   2c62c:	700b      	strb	r3, [r1, #0]
    return encoder->writer->write(encoder->writer, data, len);
   2c62e:	6820      	ldr	r0, [r4, #0]
   2c630:	6803      	ldr	r3, [r0, #0]
   2c632:	aa04      	add	r2, sp, #16
   2c634:	1a52      	subs	r2, r2, r1
   2c636:	4798      	blx	r3
   2c638:	e7d7      	b.n	2c5ea <create_container+0x36>
        *bufstart += shiftedMajorType;
   2c63a:	eb03 6212 	add.w	r2, r3, r2, lsr #24
   2c63e:	a904      	add	r1, sp, #16
   2c640:	f801 2d01 	strb.w	r2, [r1, #-1]!
   2c644:	e7f3      	b.n	2c62e <create_container+0x7a>
            ++more;
   2c646:	2501      	movs	r5, #1
   2c648:	e7e2      	b.n	2c610 <create_container+0x5c>

0002c64a <encode_string>:
{
   2c64a:	b5f0      	push	{r4, r5, r6, r7, lr}
   2c64c:	b085      	sub	sp, #20
   2c64e:	4604      	mov	r4, r0
   2c650:	460d      	mov	r5, r1
   2c652:	461e      	mov	r6, r3
    CborError err = encode_number(encoder, length, shiftedMajorType);
   2c654:	2100      	movs	r1, #0
    ++encoder->added;
   2c656:	68a3      	ldr	r3, [r4, #8]
   2c658:	3301      	adds	r3, #1
   2c65a:	60a3      	str	r3, [r4, #8]
    v = cbor_htonll(v);
   2c65c:	ba2b      	rev	r3, r5
   2c65e:	2700      	movs	r7, #0
    memcpy(where, &v, sizeof(v));
   2c660:	9702      	str	r7, [sp, #8]
   2c662:	9303      	str	r3, [sp, #12]
    if (ui < Value8Bit) {
   2c664:	2900      	cmp	r1, #0
   2c666:	bf08      	it	eq
   2c668:	2d18      	cmpeq	r5, #24
   2c66a:	d321      	bcc.n	2c6b0 <encode_string+0x66>
   2c66c:	4628      	mov	r0, r5
        if (ui > 0xffU)
   2c66e:	2900      	cmp	r1, #0
   2c670:	bf08      	it	eq
   2c672:	f5b5 7f80 	cmpeq.w	r5, #256	; 0x100
   2c676:	d221      	bcs.n	2c6bc <encode_string+0x72>
        unsigned more = 0;
   2c678:	2300      	movs	r3, #0
        if (ui > 0xffffU)
   2c67a:	2900      	cmp	r1, #0
   2c67c:	bf08      	it	eq
   2c67e:	f5b0 3f80 	cmpeq.w	r0, #65536	; 0x10000
   2c682:	d300      	bcc.n	2c686 <encode_string+0x3c>
            ++more;
   2c684:	3301      	adds	r3, #1
        bufstart -= (size_t)1 << more;
   2c686:	2101      	movs	r1, #1
   2c688:	fa01 f003 	lsl.w	r0, r1, r3
   2c68c:	f10d 010f 	add.w	r1, sp, #15
   2c690:	1a09      	subs	r1, r1, r0
        *bufstart = shiftedMajorType + Value8Bit + more;
   2c692:	441a      	add	r2, r3
   2c694:	3218      	adds	r2, #24
   2c696:	700a      	strb	r2, [r1, #0]
    return encoder->writer->write(encoder->writer, data, len);
   2c698:	6820      	ldr	r0, [r4, #0]
   2c69a:	6803      	ldr	r3, [r0, #0]
   2c69c:	aa04      	add	r2, sp, #16
   2c69e:	1a52      	subs	r2, r2, r1
   2c6a0:	4798      	blx	r3
   2c6a2:	6820      	ldr	r0, [r4, #0]
   2c6a4:	6803      	ldr	r3, [r0, #0]
   2c6a6:	462a      	mov	r2, r5
   2c6a8:	4631      	mov	r1, r6
   2c6aa:	4798      	blx	r3
}
   2c6ac:	b005      	add	sp, #20
   2c6ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *bufstart += shiftedMajorType;
   2c6b0:	eb02 6213 	add.w	r2, r2, r3, lsr #24
   2c6b4:	a904      	add	r1, sp, #16
   2c6b6:	f801 2d01 	strb.w	r2, [r1, #-1]!
   2c6ba:	e7ed      	b.n	2c698 <encode_string+0x4e>
            ++more;
   2c6bc:	2301      	movs	r3, #1
   2c6be:	e7dc      	b.n	2c67a <encode_string+0x30>

0002c6c0 <cbor_encoder_init>:
    encoder->writer = writer;
   2c6c0:	6001      	str	r1, [r0, #0]
    encoder->added = 0;
   2c6c2:	2300      	movs	r3, #0
   2c6c4:	6083      	str	r3, [r0, #8]
    encoder->flags = flags;
   2c6c6:	60c2      	str	r2, [r0, #12]
}
   2c6c8:	4770      	bx	lr

0002c6ca <cbor_encode_uint>:
{
   2c6ca:	b510      	push	{r4, lr}
   2c6cc:	b084      	sub	sp, #16
    ++encoder->added;
   2c6ce:	6881      	ldr	r1, [r0, #8]
   2c6d0:	3101      	adds	r1, #1
   2c6d2:	6081      	str	r1, [r0, #8]
    v = cbor_htonll(v);
   2c6d4:	ba11      	rev	r1, r2
   2c6d6:	ba1c      	rev	r4, r3
    memcpy(where, &v, sizeof(v));
   2c6d8:	9402      	str	r4, [sp, #8]
   2c6da:	9103      	str	r1, [sp, #12]
    if (ui < Value8Bit) {
   2c6dc:	2b00      	cmp	r3, #0
   2c6de:	bf08      	it	eq
   2c6e0:	2a18      	cmpeq	r2, #24
   2c6e2:	d31f      	bcc.n	2c724 <cbor_encode_uint+0x5a>
        if (ui > 0xffU)
   2c6e4:	2b00      	cmp	r3, #0
   2c6e6:	bf08      	it	eq
   2c6e8:	f5b2 7f80 	cmpeq.w	r2, #256	; 0x100
   2c6ec:	d220      	bcs.n	2c730 <cbor_encode_uint+0x66>
        unsigned more = 0;
   2c6ee:	2400      	movs	r4, #0
        if (ui > 0xffffU)
   2c6f0:	2b00      	cmp	r3, #0
   2c6f2:	bf08      	it	eq
   2c6f4:	f5b2 3f80 	cmpeq.w	r2, #65536	; 0x10000
   2c6f8:	d300      	bcc.n	2c6fc <cbor_encode_uint+0x32>
            ++more;
   2c6fa:	3401      	adds	r4, #1
        if (ui > 0xffffffffU)
   2c6fc:	2b01      	cmp	r3, #1
   2c6fe:	bf08      	it	eq
   2c700:	2a00      	cmpeq	r2, #0
   2c702:	d300      	bcc.n	2c706 <cbor_encode_uint+0x3c>
            ++more;
   2c704:	3401      	adds	r4, #1
        bufstart -= (size_t)1 << more;
   2c706:	2101      	movs	r1, #1
   2c708:	fa01 f304 	lsl.w	r3, r1, r4
   2c70c:	f10d 010f 	add.w	r1, sp, #15
   2c710:	1ac9      	subs	r1, r1, r3
        *bufstart = shiftedMajorType + Value8Bit + more;
   2c712:	3418      	adds	r4, #24
   2c714:	700c      	strb	r4, [r1, #0]
    return encoder->writer->write(encoder->writer, data, len);
   2c716:	6800      	ldr	r0, [r0, #0]
   2c718:	6803      	ldr	r3, [r0, #0]
   2c71a:	aa04      	add	r2, sp, #16
   2c71c:	1a52      	subs	r2, r2, r1
   2c71e:	4798      	blx	r3
}
   2c720:	b004      	add	sp, #16
   2c722:	bd10      	pop	{r4, pc}
        *bufstart += shiftedMajorType;
   2c724:	f3c1 6307 	ubfx	r3, r1, #24, #8
   2c728:	a904      	add	r1, sp, #16
   2c72a:	f801 3d01 	strb.w	r3, [r1, #-1]!
   2c72e:	e7f2      	b.n	2c716 <cbor_encode_uint+0x4c>
            ++more;
   2c730:	2401      	movs	r4, #1
   2c732:	e7dd      	b.n	2c6f0 <cbor_encode_uint+0x26>

0002c734 <cbor_encode_int>:
{
   2c734:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
   2c738:	b084      	sub	sp, #16
   2c73a:	461f      	mov	r7, r3
    uint64_t ui = value >> 63;              /* extend sign to whole length */
   2c73c:	17db      	asrs	r3, r3, #31
   2c73e:	461c      	mov	r4, r3
    uint8_t majorType = ui & 0x20;          /* extract major type */
   2c740:	b2db      	uxtb	r3, r3
   2c742:	f003 0320 	and.w	r3, r3, #32
    ui ^= value;                            /* complement negatives */
   2c746:	ea84 0b02 	eor.w	fp, r4, r2
   2c74a:	ea84 0c07 	eor.w	ip, r4, r7
    ++encoder->added;
   2c74e:	6882      	ldr	r2, [r0, #8]
   2c750:	3201      	adds	r2, #1
   2c752:	6082      	str	r2, [r0, #8]
    v = cbor_htonll(v);
   2c754:	fa9b f28b 	rev.w	r2, fp
   2c758:	fa9c f18c 	rev.w	r1, ip
    memcpy(where, &v, sizeof(v));
   2c75c:	9102      	str	r1, [sp, #8]
   2c75e:	9203      	str	r2, [sp, #12]
    if (ui < Value8Bit) {
   2c760:	f1bc 0f00 	cmp.w	ip, #0
   2c764:	bf08      	it	eq
   2c766:	f1bb 0f18 	cmpeq.w	fp, #24
   2c76a:	d325      	bcc.n	2c7b8 <cbor_encode_int+0x84>
        if (ui > 0xffU)
   2c76c:	f1bc 0f00 	cmp.w	ip, #0
   2c770:	bf08      	it	eq
   2c772:	f5bb 7f80 	cmpeq.w	fp, #256	; 0x100
   2c776:	d225      	bcs.n	2c7c4 <cbor_encode_int+0x90>
        unsigned more = 0;
   2c778:	2200      	movs	r2, #0
        if (ui > 0xffffU)
   2c77a:	f1bc 0f00 	cmp.w	ip, #0
   2c77e:	bf08      	it	eq
   2c780:	f5bb 3f80 	cmpeq.w	fp, #65536	; 0x10000
   2c784:	d300      	bcc.n	2c788 <cbor_encode_int+0x54>
            ++more;
   2c786:	3201      	adds	r2, #1
        if (ui > 0xffffffffU)
   2c788:	f1bc 0f01 	cmp.w	ip, #1
   2c78c:	bf08      	it	eq
   2c78e:	f1bb 0f00 	cmpeq.w	fp, #0
   2c792:	d300      	bcc.n	2c796 <cbor_encode_int+0x62>
            ++more;
   2c794:	3201      	adds	r2, #1
        bufstart -= (size_t)1 << more;
   2c796:	2101      	movs	r1, #1
   2c798:	fa01 f402 	lsl.w	r4, r1, r2
   2c79c:	f10d 010f 	add.w	r1, sp, #15
   2c7a0:	1b09      	subs	r1, r1, r4
        *bufstart = shiftedMajorType + Value8Bit + more;
   2c7a2:	4413      	add	r3, r2
   2c7a4:	3318      	adds	r3, #24
   2c7a6:	700b      	strb	r3, [r1, #0]
    return encoder->writer->write(encoder->writer, data, len);
   2c7a8:	6800      	ldr	r0, [r0, #0]
   2c7aa:	6803      	ldr	r3, [r0, #0]
   2c7ac:	aa04      	add	r2, sp, #16
   2c7ae:	1a52      	subs	r2, r2, r1
   2c7b0:	4798      	blx	r3
}
   2c7b2:	b004      	add	sp, #16
   2c7b4:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
        *bufstart += shiftedMajorType;
   2c7b8:	eb03 6312 	add.w	r3, r3, r2, lsr #24
   2c7bc:	a904      	add	r1, sp, #16
   2c7be:	f801 3d01 	strb.w	r3, [r1, #-1]!
   2c7c2:	e7f1      	b.n	2c7a8 <cbor_encode_int+0x74>
            ++more;
   2c7c4:	2201      	movs	r2, #1
   2c7c6:	e7d8      	b.n	2c77a <cbor_encode_int+0x46>

0002c7c8 <cbor_encode_simple_value>:
    if (value >= HalfPrecisionFloat && value <= Break)
   2c7c8:	f1a1 0319 	sub.w	r3, r1, #25
   2c7cc:	b2db      	uxtb	r3, r3
   2c7ce:	2b06      	cmp	r3, #6
   2c7d0:	d926      	bls.n	2c820 <cbor_encode_simple_value+0x58>
{
   2c7d2:	b510      	push	{r4, lr}
   2c7d4:	b084      	sub	sp, #16
    return encode_number(encoder, value, SimpleTypesType << MajorTypeShift);
   2c7d6:	b2ca      	uxtb	r2, r1
   2c7d8:	2300      	movs	r3, #0
    ++encoder->added;
   2c7da:	6881      	ldr	r1, [r0, #8]
   2c7dc:	3101      	adds	r1, #1
   2c7de:	6081      	str	r1, [r0, #8]
    v = cbor_htonll(v);
   2c7e0:	ba11      	rev	r1, r2
   2c7e2:	2400      	movs	r4, #0
    memcpy(where, &v, sizeof(v));
   2c7e4:	9402      	str	r4, [sp, #8]
   2c7e6:	9103      	str	r1, [sp, #12]
    if (ui < Value8Bit) {
   2c7e8:	2b00      	cmp	r3, #0
   2c7ea:	bf08      	it	eq
   2c7ec:	2a18      	cmpeq	r2, #24
   2c7ee:	d309      	bcc.n	2c804 <cbor_encode_simple_value+0x3c>
        unsigned more = 0;
   2c7f0:	2300      	movs	r3, #0
        bufstart -= (size_t)1 << more;
   2c7f2:	2101      	movs	r1, #1
   2c7f4:	fa01 f203 	lsl.w	r2, r1, r3
   2c7f8:	f10d 010f 	add.w	r1, sp, #15
   2c7fc:	1a89      	subs	r1, r1, r2
        *bufstart = shiftedMajorType + Value8Bit + more;
   2c7fe:	3b08      	subs	r3, #8
   2c800:	700b      	strb	r3, [r1, #0]
   2c802:	e006      	b.n	2c812 <cbor_encode_simple_value+0x4a>
        *bufstart += shiftedMajorType;
   2c804:	f3c1 6107 	ubfx	r1, r1, #24, #8
   2c808:	f1a1 0320 	sub.w	r3, r1, #32
   2c80c:	a904      	add	r1, sp, #16
   2c80e:	f801 3d01 	strb.w	r3, [r1, #-1]!
    return encoder->writer->write(encoder->writer, data, len);
   2c812:	6800      	ldr	r0, [r0, #0]
   2c814:	6803      	ldr	r3, [r0, #0]
   2c816:	aa04      	add	r2, sp, #16
   2c818:	1a52      	subs	r2, r2, r1
   2c81a:	4798      	blx	r3
}
   2c81c:	b004      	add	sp, #16
   2c81e:	bd10      	pop	{r4, pc}
        return CborErrorIllegalSimpleType;
   2c820:	f44f 7083 	mov.w	r0, #262	; 0x106
}
   2c824:	4770      	bx	lr

0002c826 <cbor_encode_byte_string>:
{
   2c826:	b510      	push	{r4, lr}
   2c828:	4614      	mov	r4, r2
    return encode_string(encoder, length, ByteStringType << MajorTypeShift, string);
   2c82a:	460b      	mov	r3, r1
   2c82c:	2240      	movs	r2, #64	; 0x40
   2c82e:	4621      	mov	r1, r4
   2c830:	f7ff ff0b 	bl	2c64a <encode_string>
}
   2c834:	bd10      	pop	{r4, pc}

0002c836 <cbor_encode_text_string>:
{
   2c836:	b510      	push	{r4, lr}
   2c838:	4614      	mov	r4, r2
    return encode_string(encoder, length, TextStringType << MajorTypeShift, string);
   2c83a:	460b      	mov	r3, r1
   2c83c:	2260      	movs	r2, #96	; 0x60
   2c83e:	4621      	mov	r1, r4
   2c840:	f7ff ff03 	bl	2c64a <encode_string>
}
   2c844:	bd10      	pop	{r4, pc}

0002c846 <cbor_encoder_create_array>:
 * length instead.
 *
 * \sa cbor_encoder_create_map
 */
CborError cbor_encoder_create_array(CborEncoder *encoder, CborEncoder *arrayEncoder, size_t length)
{
   2c846:	b508      	push	{r3, lr}
    return create_container(encoder, arrayEncoder, length, ArrayType << MajorTypeShift);
   2c848:	2380      	movs	r3, #128	; 0x80
   2c84a:	f7ff feb3 	bl	2c5b4 <create_container>
}
   2c84e:	bd08      	pop	{r3, pc}

0002c850 <cbor_encoder_create_map>:
 * value, this function returns error CborErrorDataTooLarge.
 *
 * \sa cbor_encoder_create_array
 */
CborError cbor_encoder_create_map(CborEncoder *encoder, CborEncoder *mapEncoder, size_t length)
{
   2c850:	b510      	push	{r4, lr}
    if (length != CborIndefiniteLength && length > SIZE_MAX / 2)
   2c852:	f102 4400 	add.w	r4, r2, #2147483648	; 0x80000000
   2c856:	4b05      	ldr	r3, [pc, #20]	; (2c86c <cbor_encoder_create_map+0x1c>)
   2c858:	429c      	cmp	r4, r3
   2c85a:	d903      	bls.n	2c864 <cbor_encoder_create_map+0x14>
        return CborErrorDataTooLarge;
    return create_container(encoder, mapEncoder, length, MapType << MajorTypeShift);
   2c85c:	23a0      	movs	r3, #160	; 0xa0
   2c85e:	f7ff fea9 	bl	2c5b4 <create_container>
}
   2c862:	bd10      	pop	{r4, pc}
        return CborErrorDataTooLarge;
   2c864:	f44f 6080 	mov.w	r0, #1024	; 0x400
   2c868:	e7fb      	b.n	2c862 <cbor_encoder_create_map+0x12>
   2c86a:	bf00      	nop
   2c86c:	7ffffffe 	.word	0x7ffffffe

0002c870 <cbor_encoder_create_indef_byte_string>:
 * \a stringEncoder parameters.
 *
 * \sa cbor_encoder_create_array
 */
CborError cbor_encoder_create_indef_byte_string(CborEncoder *encoder, CborEncoder *stringEncoder)
{
   2c870:	b508      	push	{r3, lr}
    return create_container(encoder, stringEncoder, CborIndefiniteLength, ByteStringType << MajorTypeShift);
   2c872:	2340      	movs	r3, #64	; 0x40
   2c874:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2c878:	f7ff fe9c 	bl	2c5b4 <create_container>
}
   2c87c:	bd08      	pop	{r3, pc}

0002c87e <cbor_encoder_close_container>:
 *
 * \sa cbor_encoder_create_array(), cbor_encoder_create_map()
 */
CborError cbor_encoder_close_container(CborEncoder *encoder, const CborEncoder *containerEncoder)
{
    encoder->writer = containerEncoder->writer;
   2c87e:	680b      	ldr	r3, [r1, #0]
   2c880:	6003      	str	r3, [r0, #0]

    if (containerEncoder->flags & CborIteratorFlag_UnknownLength)
   2c882:	68cb      	ldr	r3, [r1, #12]
   2c884:	f013 0f04 	tst.w	r3, #4
   2c888:	d00c      	beq.n	2c8a4 <cbor_encoder_close_container+0x26>
{
   2c88a:	b500      	push	{lr}
   2c88c:	b083      	sub	sp, #12
   2c88e:	a902      	add	r1, sp, #8
   2c890:	23ff      	movs	r3, #255	; 0xff
   2c892:	f801 3d01 	strb.w	r3, [r1, #-1]!
    return encoder->writer->write(encoder->writer, data, len);
   2c896:	6800      	ldr	r0, [r0, #0]
   2c898:	6803      	ldr	r3, [r0, #0]
   2c89a:	2201      	movs	r2, #1
   2c89c:	4798      	blx	r3
        return append_byte_to_buffer(encoder, BreakByte);
    return CborNoError;
}
   2c89e:	b003      	add	sp, #12
   2c8a0:	f85d fb04 	ldr.w	pc, [sp], #4
    return CborNoError;
   2c8a4:	2000      	movs	r0, #0
}
   2c8a6:	4770      	bx	lr

0002c8a8 <is_fixed_type>:
    return CborNoError;
}

static bool is_fixed_type(uint8_t type)
{
    return type != CborTextStringType && type != CborByteStringType && type != CborArrayType &&
   2c8a8:	2860      	cmp	r0, #96	; 0x60
   2c8aa:	d009      	beq.n	2c8c0 <is_fixed_type+0x18>
   2c8ac:	2840      	cmp	r0, #64	; 0x40
   2c8ae:	d009      	beq.n	2c8c4 <is_fixed_type+0x1c>
   2c8b0:	2880      	cmp	r0, #128	; 0x80
   2c8b2:	d009      	beq.n	2c8c8 <is_fixed_type+0x20>
   2c8b4:	28a0      	cmp	r0, #160	; 0xa0
   2c8b6:	d001      	beq.n	2c8bc <is_fixed_type+0x14>
   2c8b8:	2001      	movs	r0, #1
           type != CborMapType;
}
   2c8ba:	4770      	bx	lr
    return type != CborTextStringType && type != CborByteStringType && type != CborArrayType &&
   2c8bc:	2000      	movs	r0, #0
   2c8be:	4770      	bx	lr
   2c8c0:	2000      	movs	r0, #0
   2c8c2:	4770      	bx	lr
   2c8c4:	2000      	movs	r0, #0
   2c8c6:	4770      	bx	lr
   2c8c8:	2000      	movs	r0, #0
   2c8ca:	4770      	bx	lr

0002c8cc <iterate_noop>:
    (void)d;
    (void)dst;
    (void)src_offset;
    (void)len;
    return true;
}
   2c8cc:	2001      	movs	r0, #1
   2c8ce:	4770      	bx	lr

0002c8d0 <preparse_value>:
{
   2c8d0:	b570      	push	{r4, r5, r6, lr}
    const CborParser *parser = it->parser;
   2c8d2:	6806      	ldr	r6, [r0, #0]
    it->type = CborInvalidType;
   2c8d4:	23ff      	movs	r3, #255	; 0xff
   2c8d6:	7383      	strb	r3, [r0, #14]
    if (it->offset == parser->end)
   2c8d8:	6841      	ldr	r1, [r0, #4]
   2c8da:	6873      	ldr	r3, [r6, #4]
   2c8dc:	4299      	cmp	r1, r3
   2c8de:	f000 808f 	beq.w	2ca00 <preparse_value+0x130>
   2c8e2:	4604      	mov	r4, r0
    uint8_t descriptor = parser->d->get8(parser->d, it->offset);
   2c8e4:	6830      	ldr	r0, [r6, #0]
   2c8e6:	6803      	ldr	r3, [r0, #0]
   2c8e8:	4798      	blx	r3
    uint8_t type = descriptor & MajorTypeMask;
   2c8ea:	f000 05e0 	and.w	r5, r0, #224	; 0xe0
    it->type = type;
   2c8ee:	73a5      	strb	r5, [r4, #14]
    it->flags = 0;
   2c8f0:	2300      	movs	r3, #0
   2c8f2:	73e3      	strb	r3, [r4, #15]
    it->extra = (descriptor &= SmallValueMask);
   2c8f4:	f000 001f 	and.w	r0, r0, #31
   2c8f8:	81a0      	strh	r0, [r4, #12]
    if (descriptor > Value64Bit) {
   2c8fa:	281b      	cmp	r0, #27
   2c8fc:	d91d      	bls.n	2c93a <preparse_value+0x6a>
        if (unlikely(descriptor != IndefiniteLength))
   2c8fe:	281f      	cmp	r0, #31
   2c900:	d10b      	bne.n	2c91a <preparse_value+0x4a>
        if (likely(!is_fixed_type(type))) {
   2c902:	4628      	mov	r0, r5
   2c904:	f7ff ffd0 	bl	2c8a8 <is_fixed_type>
   2c908:	f080 0001 	eor.w	r0, r0, #1
   2c90c:	f010 0fff 	tst.w	r0, #255	; 0xff
   2c910:	d00b      	beq.n	2c92a <preparse_value+0x5a>
            it->flags |= CborIteratorFlag_UnknownLength;
   2c912:	2304      	movs	r3, #4
   2c914:	73e3      	strb	r3, [r4, #15]
            return CborNoError;
   2c916:	2000      	movs	r0, #0
}
   2c918:	bd70      	pop	{r4, r5, r6, pc}
            return type == CborSimpleType ? CborErrorUnknownType : CborErrorIllegalNumber;
   2c91a:	2de0      	cmp	r5, #224	; 0xe0
   2c91c:	d002      	beq.n	2c924 <preparse_value+0x54>
   2c91e:	f240 1005 	movw	r0, #261	; 0x105
   2c922:	e7f9      	b.n	2c918 <preparse_value+0x48>
   2c924:	f240 1003 	movw	r0, #259	; 0x103
   2c928:	e7f6      	b.n	2c918 <preparse_value+0x48>
        return type == CborSimpleType ? CborErrorUnexpectedBreak : CborErrorIllegalNumber;
   2c92a:	2de0      	cmp	r5, #224	; 0xe0
   2c92c:	d002      	beq.n	2c934 <preparse_value+0x64>
   2c92e:	f240 1005 	movw	r0, #261	; 0x105
   2c932:	e7f1      	b.n	2c918 <preparse_value+0x48>
   2c934:	f44f 7081 	mov.w	r0, #258	; 0x102
   2c938:	e7ee      	b.n	2c918 <preparse_value+0x48>
    size_t bytesNeeded = descriptor < Value8Bit ? 0 : (1 << (descriptor - Value8Bit));
   2c93a:	2817      	cmp	r0, #23
   2c93c:	d919      	bls.n	2c972 <preparse_value+0xa2>
   2c93e:	f1a0 0218 	sub.w	r2, r0, #24
   2c942:	2301      	movs	r3, #1
   2c944:	4093      	lsls	r3, r2
    if (bytesNeeded + 1 > (size_t)(parser->end - it->offset))
   2c946:	3301      	adds	r3, #1
   2c948:	6872      	ldr	r2, [r6, #4]
   2c94a:	6861      	ldr	r1, [r4, #4]
   2c94c:	1a52      	subs	r2, r2, r1
   2c94e:	4293      	cmp	r3, r2
   2c950:	d859      	bhi.n	2ca06 <preparse_value+0x136>
    uint8_t majortype = type >> MajorTypeShift;
   2c952:	096d      	lsrs	r5, r5, #5
    if (majortype == NegativeIntegerType) {
   2c954:	2d01      	cmp	r5, #1
   2c956:	d00e      	beq.n	2c976 <preparse_value+0xa6>
    } else if (majortype == SimpleTypesType) {
   2c958:	2d07      	cmp	r5, #7
   2c95a:	d011      	beq.n	2c980 <preparse_value+0xb0>
    if (descriptor < Value8Bit)
   2c95c:	2817      	cmp	r0, #23
   2c95e:	d957      	bls.n	2ca10 <preparse_value+0x140>
    if (descriptor == Value8Bit)
   2c960:	2818      	cmp	r0, #24
   2c962:	d13e      	bne.n	2c9e2 <preparse_value+0x112>
        it->extra = parser->d->get8(parser->d, it->offset + 1);
   2c964:	6830      	ldr	r0, [r6, #0]
   2c966:	6803      	ldr	r3, [r0, #0]
   2c968:	3101      	adds	r1, #1
   2c96a:	4798      	blx	r3
   2c96c:	81a0      	strh	r0, [r4, #12]
    return CborNoError;
   2c96e:	2000      	movs	r0, #0
   2c970:	e7d2      	b.n	2c918 <preparse_value+0x48>
    size_t bytesNeeded = descriptor < Value8Bit ? 0 : (1 << (descriptor - Value8Bit));
   2c972:	2300      	movs	r3, #0
   2c974:	e7e7      	b.n	2c946 <preparse_value+0x76>
        it->flags |= CborIteratorFlag_NegativeInteger;
   2c976:	2302      	movs	r3, #2
   2c978:	73e3      	strb	r3, [r4, #15]
        it->type = CborIntegerType;
   2c97a:	2300      	movs	r3, #0
   2c97c:	73a3      	strb	r3, [r4, #14]
   2c97e:	e7ed      	b.n	2c95c <preparse_value+0x8c>
        switch (descriptor) {
   2c980:	3814      	subs	r0, #20
   2c982:	280b      	cmp	r0, #11
   2c984:	d842      	bhi.n	2ca0c <preparse_value+0x13c>
   2c986:	e8df f000 	tbb	[pc, r0]
   2c98a:	0d06      	.short	0x0d06
   2c98c:	0d130d0d 	.word	0x0d130d0d
   2c990:	22220b0b 	.word	0x22220b0b
   2c994:	2222      	.short	0x2222
            it->extra = false;
   2c996:	2000      	movs	r0, #0
   2c998:	81a0      	strh	r0, [r4, #12]
            it->type = CborBooleanType;
   2c99a:	23f5      	movs	r3, #245	; 0xf5
   2c99c:	73a3      	strb	r3, [r4, #14]
            break;
   2c99e:	e7bb      	b.n	2c918 <preparse_value+0x48>
            it->flags |= CborIteratorFlag_IntegerValueTooLarge;
   2c9a0:	2301      	movs	r3, #1
   2c9a2:	73e3      	strb	r3, [r4, #15]
            it->type = parser->d->get8(parser->d, it->offset);
   2c9a4:	6830      	ldr	r0, [r6, #0]
   2c9a6:	6803      	ldr	r3, [r0, #0]
   2c9a8:	4798      	blx	r3
   2c9aa:	73a0      	strb	r0, [r4, #14]
        return CborNoError;
   2c9ac:	2000      	movs	r0, #0
            break;
   2c9ae:	e7b3      	b.n	2c918 <preparse_value+0x48>
            it->extra = parser->d->get8(parser->d, it->offset + 1);
   2c9b0:	6830      	ldr	r0, [r6, #0]
   2c9b2:	6803      	ldr	r3, [r0, #0]
   2c9b4:	3101      	adds	r1, #1
   2c9b6:	4798      	blx	r3
   2c9b8:	b280      	uxth	r0, r0
   2c9ba:	81a0      	strh	r0, [r4, #12]
            if (unlikely(it->extra < 32)) {
   2c9bc:	281f      	cmp	r0, #31
   2c9be:	d901      	bls.n	2c9c4 <preparse_value+0xf4>
        return CborNoError;
   2c9c0:	2000      	movs	r0, #0
   2c9c2:	e7a9      	b.n	2c918 <preparse_value+0x48>
                it->type = CborInvalidType;
   2c9c4:	23ff      	movs	r3, #255	; 0xff
   2c9c6:	73a3      	strb	r3, [r4, #14]
                return CborErrorIllegalSimpleType;
   2c9c8:	f44f 7083 	mov.w	r0, #262	; 0x106
   2c9cc:	e7a4      	b.n	2c918 <preparse_value+0x48>
            assert(false);  /* these conditions can't be reached */
   2c9ce:	f7df fc0b 	bl	c1e8 <hal_debugger_connected>
   2c9d2:	b100      	cbz	r0, 2c9d6 <preparse_value+0x106>
   2c9d4:	be01      	bkpt	0x0001
   2c9d6:	2300      	movs	r3, #0
   2c9d8:	461a      	mov	r2, r3
   2c9da:	4619      	mov	r1, r3
   2c9dc:	4618      	mov	r0, r3
   2c9de:	f7e0 f8b7 	bl	cb50 <__assert_func>
    else if (descriptor == Value16Bit)
   2c9e2:	2819      	cmp	r0, #25
   2c9e4:	d106      	bne.n	2c9f4 <preparse_value+0x124>
        it->extra = parser->d->get16(parser->d, it->offset + 1);
   2c9e6:	6830      	ldr	r0, [r6, #0]
   2c9e8:	6843      	ldr	r3, [r0, #4]
   2c9ea:	3101      	adds	r1, #1
   2c9ec:	4798      	blx	r3
   2c9ee:	81a0      	strh	r0, [r4, #12]
    return CborNoError;
   2c9f0:	2000      	movs	r0, #0
   2c9f2:	e791      	b.n	2c918 <preparse_value+0x48>
        it->flags |= CborIteratorFlag_IntegerValueTooLarge;     /* Value32Bit or Value64Bit */
   2c9f4:	7be3      	ldrb	r3, [r4, #15]
   2c9f6:	f043 0301 	orr.w	r3, r3, #1
   2c9fa:	73e3      	strb	r3, [r4, #15]
    return CborNoError;
   2c9fc:	2000      	movs	r0, #0
   2c9fe:	e78b      	b.n	2c918 <preparse_value+0x48>
        return CborErrorUnexpectedEOF;
   2ca00:	f240 1001 	movw	r0, #257	; 0x101
   2ca04:	e788      	b.n	2c918 <preparse_value+0x48>
        return CborErrorUnexpectedEOF;
   2ca06:	f240 1001 	movw	r0, #257	; 0x101
   2ca0a:	e785      	b.n	2c918 <preparse_value+0x48>
        return CborNoError;
   2ca0c:	2000      	movs	r0, #0
   2ca0e:	e783      	b.n	2c918 <preparse_value+0x48>
        return CborNoError;
   2ca10:	2000      	movs	r0, #0
   2ca12:	e781      	b.n	2c918 <preparse_value+0x48>

0002ca14 <preparse_next_value>:
{
   2ca14:	b510      	push	{r4, lr}
   2ca16:	4604      	mov	r4, r0
    if (it->remaining != UINT32_MAX) {
   2ca18:	6883      	ldr	r3, [r0, #8]
   2ca1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   2ca1e:	d00d      	beq.n	2ca3c <preparse_next_value+0x28>
        if (it->type != CborTagType && !--it->remaining) {
   2ca20:	7b82      	ldrb	r2, [r0, #14]
   2ca22:	2ac0      	cmp	r2, #192	; 0xc0
   2ca24:	d002      	beq.n	2ca2c <preparse_next_value+0x18>
   2ca26:	3b01      	subs	r3, #1
   2ca28:	6083      	str	r3, [r0, #8]
   2ca2a:	b11b      	cbz	r3, 2ca34 <preparse_next_value+0x20>
    return preparse_value(it);
   2ca2c:	4620      	mov	r0, r4
   2ca2e:	f7ff ff4f 	bl	2c8d0 <preparse_value>
}
   2ca32:	bd10      	pop	{r4, pc}
            it->type = CborInvalidType;
   2ca34:	23ff      	movs	r3, #255	; 0xff
   2ca36:	7383      	strb	r3, [r0, #14]
            return CborNoError;
   2ca38:	2000      	movs	r0, #0
   2ca3a:	e7fa      	b.n	2ca32 <preparse_next_value+0x1e>
    } else if (it->remaining == UINT32_MAX && it->offset != it->parser->end &&
   2ca3c:	6841      	ldr	r1, [r0, #4]
   2ca3e:	6803      	ldr	r3, [r0, #0]
   2ca40:	685a      	ldr	r2, [r3, #4]
   2ca42:	4291      	cmp	r1, r2
   2ca44:	d0f2      	beq.n	2ca2c <preparse_next_value+0x18>
        it->parser->d->get8(it->parser->d, it->offset) == (uint8_t)BreakByte) {
   2ca46:	6818      	ldr	r0, [r3, #0]
   2ca48:	6803      	ldr	r3, [r0, #0]
   2ca4a:	4798      	blx	r3
    } else if (it->remaining == UINT32_MAX && it->offset != it->parser->end &&
   2ca4c:	28ff      	cmp	r0, #255	; 0xff
   2ca4e:	d1ed      	bne.n	2ca2c <preparse_next_value+0x18>
        ++it->offset;
   2ca50:	6863      	ldr	r3, [r4, #4]
   2ca52:	3301      	adds	r3, #1
   2ca54:	6063      	str	r3, [r4, #4]
        it->type = CborInvalidType;
   2ca56:	23ff      	movs	r3, #255	; 0xff
   2ca58:	73a3      	strb	r3, [r4, #14]
        it->remaining = 0;
   2ca5a:	2000      	movs	r0, #0
   2ca5c:	60a0      	str	r0, [r4, #8]
        return CborNoError;
   2ca5e:	e7e8      	b.n	2ca32 <preparse_next_value+0x1e>

0002ca60 <extract_length>:
{
   2ca60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2ca62:	4606      	mov	r6, r0
   2ca64:	460c      	mov	r4, r1
   2ca66:	4615      	mov	r5, r2
    return cbor_ntohll(result);
}

static inline CborError extract_number(const CborParser *p, int *offset, uint64_t *len)
{
    uint8_t additional_information = p->d->get8(p->d, *offset) & SmallValueMask;
   2ca68:	6800      	ldr	r0, [r0, #0]
   2ca6a:	6803      	ldr	r3, [r0, #0]
   2ca6c:	6809      	ldr	r1, [r1, #0]
   2ca6e:	4798      	blx	r3
   2ca70:	f000 001f 	and.w	r0, r0, #31
    ++*offset;
   2ca74:	6823      	ldr	r3, [r4, #0]
   2ca76:	3301      	adds	r3, #1
   2ca78:	6023      	str	r3, [r4, #0]
    *len = 1;
    if (additional_information < Value8Bit) {
   2ca7a:	2817      	cmp	r0, #23
   2ca7c:	d915      	bls.n	2caaa <extract_length+0x4a>
        *len = additional_information;
        return CborNoError;
    }
    if (unlikely(additional_information > Value64Bit))
   2ca7e:	281b      	cmp	r0, #27
   2ca80:	d836      	bhi.n	2caf0 <extract_length+0x90>
        return CborErrorIllegalNumber;

    size_t bytesNeeded = (size_t)(1 << (additional_information - Value8Bit));
   2ca82:	3818      	subs	r0, #24
   2ca84:	2701      	movs	r7, #1
   2ca86:	4087      	lsls	r7, r0
    if (unlikely(bytesNeeded > (size_t)(p->end - *offset))) {
   2ca88:	6873      	ldr	r3, [r6, #4]
   2ca8a:	6821      	ldr	r1, [r4, #0]
   2ca8c:	1a5b      	subs	r3, r3, r1
   2ca8e:	429f      	cmp	r7, r3
   2ca90:	d833      	bhi.n	2cafa <extract_length+0x9a>
        return CborErrorUnexpectedEOF;
    } else if (bytesNeeded == 1) {
   2ca92:	2f01      	cmp	r7, #1
   2ca94:	d116      	bne.n	2cac4 <extract_length+0x64>
        *len = p->d->get8(p->d, *offset);
   2ca96:	6830      	ldr	r0, [r6, #0]
   2ca98:	6803      	ldr	r3, [r0, #0]
   2ca9a:	4798      	blx	r3
   2ca9c:	b2c2      	uxtb	r2, r0
   2ca9e:	2300      	movs	r3, #0
    } else if (bytesNeeded == 4) {
        *len =  p->d->get32(p->d, *offset);
    } else {
        *len =  p->d->get64(p->d, *offset);
    }
    *offset += bytesNeeded;
   2caa0:	6820      	ldr	r0, [r4, #0]
   2caa2:	4438      	add	r0, r7
   2caa4:	6020      	str	r0, [r4, #0]
    return CborNoError;
   2caa6:	2000      	movs	r0, #0
   2caa8:	e002      	b.n	2cab0 <extract_length+0x50>
        *len = additional_information;
   2caaa:	b2c2      	uxtb	r2, r0
   2caac:	2300      	movs	r3, #0
        return CborNoError;
   2caae:	2000      	movs	r0, #0
    if (err) {
   2cab0:	bb40      	cbnz	r0, 2cb04 <extract_length+0xa4>
    *len = v;
   2cab2:	602a      	str	r2, [r5, #0]
    if (v != *len)
   2cab4:	2500      	movs	r5, #0
   2cab6:	429d      	cmp	r5, r3
   2cab8:	bf08      	it	eq
   2caba:	4292      	cmpeq	r2, r2
   2cabc:	d024      	beq.n	2cb08 <extract_length+0xa8>
        return CborErrorDataTooLarge;
   2cabe:	f44f 6080 	mov.w	r0, #1024	; 0x400
   2cac2:	e021      	b.n	2cb08 <extract_length+0xa8>
    } else if (bytesNeeded == 2) {
   2cac4:	2f02      	cmp	r7, #2
   2cac6:	d105      	bne.n	2cad4 <extract_length+0x74>
        *len =  p->d->get16(p->d, *offset);
   2cac8:	6830      	ldr	r0, [r6, #0]
   2caca:	6843      	ldr	r3, [r0, #4]
   2cacc:	4798      	blx	r3
   2cace:	b282      	uxth	r2, r0
   2cad0:	2300      	movs	r3, #0
   2cad2:	e7e5      	b.n	2caa0 <extract_length+0x40>
    } else if (bytesNeeded == 4) {
   2cad4:	2f04      	cmp	r7, #4
   2cad6:	d005      	beq.n	2cae4 <extract_length+0x84>
        *len =  p->d->get64(p->d, *offset);
   2cad8:	6830      	ldr	r0, [r6, #0]
   2cada:	68c3      	ldr	r3, [r0, #12]
   2cadc:	4798      	blx	r3
   2cade:	4602      	mov	r2, r0
   2cae0:	460b      	mov	r3, r1
   2cae2:	e7dd      	b.n	2caa0 <extract_length+0x40>
        *len =  p->d->get32(p->d, *offset);
   2cae4:	6830      	ldr	r0, [r6, #0]
   2cae6:	6883      	ldr	r3, [r0, #8]
   2cae8:	4798      	blx	r3
   2caea:	4602      	mov	r2, r0
   2caec:	2300      	movs	r3, #0
   2caee:	e7d7      	b.n	2caa0 <extract_length+0x40>
    *len = 1;
   2caf0:	2201      	movs	r2, #1
   2caf2:	2300      	movs	r3, #0
        return CborErrorIllegalNumber;
   2caf4:	f240 1005 	movw	r0, #261	; 0x105
   2caf8:	e7da      	b.n	2cab0 <extract_length+0x50>
    *len = 1;
   2cafa:	2201      	movs	r2, #1
   2cafc:	2300      	movs	r3, #0
        return CborErrorUnexpectedEOF;
   2cafe:	f240 1001 	movw	r0, #257	; 0x101
   2cb02:	e7d5      	b.n	2cab0 <extract_length+0x50>
        *len = 0;
   2cb04:	2300      	movs	r3, #0
   2cb06:	602b      	str	r3, [r5, #0]
}
   2cb08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002cb0a <iterate_string_chunks>:

static CborError iterate_string_chunks(const CborValue *value, char *buffer, size_t *buflen,
                                       bool *result, CborValue *next, IterateFunction func)
{
   2cb0a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2cb0e:	b085      	sub	sp, #20
   2cb10:	4604      	mov	r4, r0
   2cb12:	4688      	mov	r8, r1
   2cb14:	4691      	mov	r9, r2
   2cb16:	461e      	mov	r6, r3
{ return value->type == CborByteStringType; }
   2cb18:	7b83      	ldrb	r3, [r0, #14]
    assert(cbor_value_is_byte_string(value) || cbor_value_is_text_string(value));
   2cb1a:	2b40      	cmp	r3, #64	; 0x40
   2cb1c:	d001      	beq.n	2cb22 <iterate_string_chunks+0x18>
   2cb1e:	2b60      	cmp	r3, #96	; 0x60
   2cb20:	d10c      	bne.n	2cb3c <iterate_string_chunks+0x32>

    size_t total;
    CborError err;
    int offset = value->offset;
   2cb22:	6863      	ldr	r3, [r4, #4]
   2cb24:	9302      	str	r3, [sp, #8]
{ return (value->flags & CborIteratorFlag_UnknownLength) == 0; }
   2cb26:	7be2      	ldrb	r2, [r4, #15]
    if (cbor_value_is_length_known(value)) {
   2cb28:	f012 0f04 	tst.w	r2, #4
   2cb2c:	d010      	beq.n	2cb50 <iterate_string_chunks+0x46>
        else
            *result = false;
        offset += total;
    } else {
        /* chunked */
        ++offset;
   2cb2e:	3301      	adds	r3, #1
   2cb30:	9302      	str	r3, [sp, #8]
        total = 0;
   2cb32:	2300      	movs	r3, #0
   2cb34:	9303      	str	r3, [sp, #12]
        *result = true;
   2cb36:	2301      	movs	r3, #1
   2cb38:	7033      	strb	r3, [r6, #0]
   2cb3a:	e059      	b.n	2cbf0 <iterate_string_chunks+0xe6>
    assert(cbor_value_is_byte_string(value) || cbor_value_is_text_string(value));
   2cb3c:	f7df fb54 	bl	c1e8 <hal_debugger_connected>
   2cb40:	b100      	cbz	r0, 2cb44 <iterate_string_chunks+0x3a>
   2cb42:	be01      	bkpt	0x0001
   2cb44:	2300      	movs	r3, #0
   2cb46:	461a      	mov	r2, r3
   2cb48:	4619      	mov	r1, r3
   2cb4a:	4618      	mov	r0, r3
   2cb4c:	f7e0 f800 	bl	cb50 <__assert_func>
        err = extract_length(value->parser, &offset, &total);
   2cb50:	aa03      	add	r2, sp, #12
   2cb52:	a902      	add	r1, sp, #8
   2cb54:	6820      	ldr	r0, [r4, #0]
   2cb56:	f7ff ff83 	bl	2ca60 <extract_length>
        if (err)
   2cb5a:	4603      	mov	r3, r0
   2cb5c:	2800      	cmp	r0, #0
   2cb5e:	f040 8084 	bne.w	2cc6a <iterate_string_chunks+0x160>
        if (total > (size_t)(value->parser->end - offset))
   2cb62:	6820      	ldr	r0, [r4, #0]
   2cb64:	6843      	ldr	r3, [r0, #4]
   2cb66:	9a02      	ldr	r2, [sp, #8]
   2cb68:	1a99      	subs	r1, r3, r2
   2cb6a:	9b03      	ldr	r3, [sp, #12]
   2cb6c:	4299      	cmp	r1, r3
   2cb6e:	f0c0 8083 	bcc.w	2cc78 <iterate_string_chunks+0x16e>
        if (total <= *buflen)
   2cb72:	f8d9 1000 	ldr.w	r1, [r9]
   2cb76:	428b      	cmp	r3, r1
   2cb78:	d82a      	bhi.n	2cbd0 <iterate_string_chunks+0xc6>
            *result = !!func(value->parser->d, buffer, offset, total);
   2cb7a:	4641      	mov	r1, r8
   2cb7c:	6800      	ldr	r0, [r0, #0]
   2cb7e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   2cb80:	47a8      	blx	r5
   2cb82:	3000      	adds	r0, #0
   2cb84:	bf18      	it	ne
   2cb86:	2001      	movne	r0, #1
   2cb88:	7030      	strb	r0, [r6, #0]
        offset += total;
   2cb8a:	9b02      	ldr	r3, [sp, #8]
   2cb8c:	9a03      	ldr	r2, [sp, #12]
   2cb8e:	4413      	add	r3, r2
   2cb90:	9302      	str	r3, [sp, #8]
            total = newTotal;
        }
    }

    /* is there enough room for the ending NUL byte? */
    if (*result && *buflen > total) {
   2cb92:	7833      	ldrb	r3, [r6, #0]
   2cb94:	b153      	cbz	r3, 2cbac <iterate_string_chunks+0xa2>
   2cb96:	f8d9 2000 	ldr.w	r2, [r9]
   2cb9a:	9b03      	ldr	r3, [sp, #12]
   2cb9c:	429a      	cmp	r2, r3
   2cb9e:	d905      	bls.n	2cbac <iterate_string_chunks+0xa2>
        /* we are just trying to write a NULL byte here,, but this is hard
         * because this is called by function pointer with an abstract
         * reader.  Since this is the output buffer, we can assume that if
         * we have a valid buffer its ok to write a NULL here  */
        if(buffer) {
   2cba0:	f1b8 0f00 	cmp.w	r8, #0
   2cba4:	d002      	beq.n	2cbac <iterate_string_chunks+0xa2>
            *(buffer + total) = '\0';
   2cba6:	2200      	movs	r2, #0
   2cba8:	f808 2003 	strb.w	r2, [r8, r3]
        }
    }
    *buflen = total;
   2cbac:	9b03      	ldr	r3, [sp, #12]
   2cbae:	f8c9 3000 	str.w	r3, [r9]

    if (next) {
   2cbb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2cbb4:	2b00      	cmp	r3, #0
   2cbb6:	d062      	beq.n	2cc7e <iterate_string_chunks+0x174>
        *next = *value;
   2cbb8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   2cbbc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   2cbbe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        next->offset = offset;
   2cbc2:	9b02      	ldr	r3, [sp, #8]
   2cbc4:	6063      	str	r3, [r4, #4]
        return preparse_next_value(next);
   2cbc6:	4620      	mov	r0, r4
   2cbc8:	f7ff ff24 	bl	2ca14 <preparse_next_value>
   2cbcc:	4603      	mov	r3, r0
   2cbce:	e04c      	b.n	2cc6a <iterate_string_chunks+0x160>
            *result = false;
   2cbd0:	2300      	movs	r3, #0
   2cbd2:	7033      	strb	r3, [r6, #0]
   2cbd4:	e7d9      	b.n	2cb8a <iterate_string_chunks+0x80>
                ++offset;
   2cbd6:	9b02      	ldr	r3, [sp, #8]
   2cbd8:	3301      	adds	r3, #1
   2cbda:	9302      	str	r3, [sp, #8]
   2cbdc:	e7d9      	b.n	2cb92 <iterate_string_chunks+0x88>
#endif

static inline bool add_check_overflow(size_t v1, size_t v2, size_t *r)
{
#if ((defined(__GNUC__) && (__GNUC__ >= 5)) && !defined(__INTEL_COMPILER)) || __has_builtin(__builtin_add_overflow)
    return __builtin_add_overflow(v1, v2, r);
   2cbde:	2201      	movs	r2, #1
   2cbe0:	e021      	b.n	2cc26 <iterate_string_chunks+0x11c>
                *result = false;
   2cbe2:	2300      	movs	r3, #0
   2cbe4:	7033      	strb	r3, [r6, #0]
            offset += chunkLen;
   2cbe6:	9b02      	ldr	r3, [sp, #8]
   2cbe8:	9a01      	ldr	r2, [sp, #4]
   2cbea:	4413      	add	r3, r2
   2cbec:	9302      	str	r3, [sp, #8]
            total = newTotal;
   2cbee:	9503      	str	r5, [sp, #12]
            if (offset == value->parser->end)
   2cbf0:	6823      	ldr	r3, [r4, #0]
   2cbf2:	685a      	ldr	r2, [r3, #4]
   2cbf4:	9902      	ldr	r1, [sp, #8]
   2cbf6:	428a      	cmp	r2, r1
   2cbf8:	d02f      	beq.n	2cc5a <iterate_string_chunks+0x150>
            val = value->parser->d->get8(value->parser->d, offset);
   2cbfa:	6818      	ldr	r0, [r3, #0]
   2cbfc:	6803      	ldr	r3, [r0, #0]
   2cbfe:	4798      	blx	r3
            if (val == (uint8_t)BreakByte) {
   2cc00:	28ff      	cmp	r0, #255	; 0xff
   2cc02:	d0e8      	beq.n	2cbd6 <iterate_string_chunks+0xcc>
            if ((val & MajorTypeMask) != value->type)
   2cc04:	f020 001f 	bic.w	r0, r0, #31
   2cc08:	7ba3      	ldrb	r3, [r4, #14]
   2cc0a:	4298      	cmp	r0, r3
   2cc0c:	d128      	bne.n	2cc60 <iterate_string_chunks+0x156>
            err = extract_length(value->parser, &offset, &chunkLen);
   2cc0e:	aa01      	add	r2, sp, #4
   2cc10:	a902      	add	r1, sp, #8
   2cc12:	6820      	ldr	r0, [r4, #0]
   2cc14:	f7ff ff24 	bl	2ca60 <extract_length>
            if (err)
   2cc18:	4603      	mov	r3, r0
   2cc1a:	bb30      	cbnz	r0, 2cc6a <iterate_string_chunks+0x160>
            if (unlikely(add_check_overflow(total, chunkLen, &newTotal)))
   2cc1c:	9903      	ldr	r1, [sp, #12]
   2cc1e:	9b01      	ldr	r3, [sp, #4]
   2cc20:	2200      	movs	r2, #0
   2cc22:	18cd      	adds	r5, r1, r3
   2cc24:	d2db      	bcs.n	2cbde <iterate_string_chunks+0xd4>
   2cc26:	b9f2      	cbnz	r2, 2cc66 <iterate_string_chunks+0x15c>
            if (chunkLen > (size_t)(value->parser->end - offset))
   2cc28:	f8d4 c000 	ldr.w	ip, [r4]
   2cc2c:	f8dc 0004 	ldr.w	r0, [ip, #4]
   2cc30:	9a02      	ldr	r2, [sp, #8]
   2cc32:	1a80      	subs	r0, r0, r2
   2cc34:	4283      	cmp	r3, r0
   2cc36:	d81c      	bhi.n	2cc72 <iterate_string_chunks+0x168>
            if (*result && *buflen >= newTotal)
   2cc38:	7830      	ldrb	r0, [r6, #0]
   2cc3a:	2800      	cmp	r0, #0
   2cc3c:	d0d1      	beq.n	2cbe2 <iterate_string_chunks+0xd8>
   2cc3e:	f8d9 0000 	ldr.w	r0, [r9]
   2cc42:	42a8      	cmp	r0, r5
   2cc44:	d3cd      	bcc.n	2cbe2 <iterate_string_chunks+0xd8>
                *result = !!func(value->parser->d, buffer + total, offset, chunkLen);
   2cc46:	4441      	add	r1, r8
   2cc48:	f8dc 0000 	ldr.w	r0, [ip]
   2cc4c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   2cc4e:	47b8      	blx	r7
   2cc50:	3000      	adds	r0, #0
   2cc52:	bf18      	it	ne
   2cc54:	2001      	movne	r0, #1
   2cc56:	7030      	strb	r0, [r6, #0]
   2cc58:	e7c5      	b.n	2cbe6 <iterate_string_chunks+0xdc>
                return CborErrorUnexpectedEOF;
   2cc5a:	f240 1301 	movw	r3, #257	; 0x101
   2cc5e:	e004      	b.n	2cc6a <iterate_string_chunks+0x160>
                return CborErrorIllegalType;
   2cc60:	f44f 7382 	mov.w	r3, #260	; 0x104
   2cc64:	e001      	b.n	2cc6a <iterate_string_chunks+0x160>
                return CborErrorDataTooLarge;
   2cc66:	f44f 6380 	mov.w	r3, #1024	; 0x400
    }
    return CborNoError;
}
   2cc6a:	4618      	mov	r0, r3
   2cc6c:	b005      	add	sp, #20
   2cc6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                return CborErrorUnexpectedEOF;
   2cc72:	f240 1301 	movw	r3, #257	; 0x101
   2cc76:	e7f8      	b.n	2cc6a <iterate_string_chunks+0x160>
            return CborErrorUnexpectedEOF;
   2cc78:	f240 1301 	movw	r3, #257	; 0x101
   2cc7c:	e7f5      	b.n	2cc6a <iterate_string_chunks+0x160>
    return CborNoError;
   2cc7e:	2300      	movs	r3, #0
   2cc80:	e7f3      	b.n	2cc6a <iterate_string_chunks+0x160>

0002cc82 <advance_internal>:
{
   2cc82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2cc84:	4604      	mov	r4, r0
    CborError err = extract_number(it->parser, &it->offset,  &length);
   2cc86:	6806      	ldr	r6, [r0, #0]
    uint8_t additional_information = p->d->get8(p->d, *offset) & SmallValueMask;
   2cc88:	6830      	ldr	r0, [r6, #0]
   2cc8a:	6803      	ldr	r3, [r0, #0]
   2cc8c:	6861      	ldr	r1, [r4, #4]
   2cc8e:	4798      	blx	r3
   2cc90:	f000 001f 	and.w	r0, r0, #31
    ++*offset;
   2cc94:	6863      	ldr	r3, [r4, #4]
   2cc96:	3301      	adds	r3, #1
   2cc98:	6063      	str	r3, [r4, #4]
    if (additional_information < Value8Bit) {
   2cc9a:	2817      	cmp	r0, #23
   2cc9c:	d915      	bls.n	2ccca <advance_internal+0x48>
    if (unlikely(additional_information > Value64Bit))
   2cc9e:	281b      	cmp	r0, #27
   2cca0:	d83f      	bhi.n	2cd22 <advance_internal+0xa0>
    size_t bytesNeeded = (size_t)(1 << (additional_information - Value8Bit));
   2cca2:	3818      	subs	r0, #24
   2cca4:	2501      	movs	r5, #1
   2cca6:	4085      	lsls	r5, r0
    if (unlikely(bytesNeeded > (size_t)(p->end - *offset))) {
   2cca8:	6873      	ldr	r3, [r6, #4]
   2ccaa:	6861      	ldr	r1, [r4, #4]
   2ccac:	1a5b      	subs	r3, r3, r1
   2ccae:	429d      	cmp	r5, r3
   2ccb0:	d83c      	bhi.n	2cd2c <advance_internal+0xaa>
    } else if (bytesNeeded == 1) {
   2ccb2:	2d01      	cmp	r5, #1
   2ccb4:	d122      	bne.n	2ccfc <advance_internal+0x7a>
        *len = p->d->get8(p->d, *offset);
   2ccb6:	6830      	ldr	r0, [r6, #0]
   2ccb8:	6803      	ldr	r3, [r0, #0]
   2ccba:	4798      	blx	r3
   2ccbc:	b2c0      	uxtb	r0, r0
   2ccbe:	2100      	movs	r1, #0
    *offset += bytesNeeded;
   2ccc0:	6863      	ldr	r3, [r4, #4]
   2ccc2:	441d      	add	r5, r3
   2ccc4:	6065      	str	r5, [r4, #4]
    return CborNoError;
   2ccc6:	2300      	movs	r3, #0
   2ccc8:	e002      	b.n	2ccd0 <advance_internal+0x4e>
        *len = additional_information;
   2ccca:	b2c0      	uxtb	r0, r0
   2cccc:	2100      	movs	r1, #0
        return CborNoError;
   2ccce:	2300      	movs	r3, #0
    assert(err == CborNoError);
   2ccd0:	bb8b      	cbnz	r3, 2cd36 <advance_internal+0xb4>
    if (it->type == CborByteStringType || it->type == CborTextStringType) {
   2ccd2:	7ba3      	ldrb	r3, [r4, #14]
   2ccd4:	2b40      	cmp	r3, #64	; 0x40
   2ccd6:	d001      	beq.n	2ccdc <advance_internal+0x5a>
   2ccd8:	2b60      	cmp	r3, #96	; 0x60
   2ccda:	d10b      	bne.n	2ccf4 <advance_internal+0x72>
        assert(length == (size_t)length);
   2ccdc:	2700      	movs	r7, #0
   2ccde:	428f      	cmp	r7, r1
   2cce0:	bf08      	it	eq
   2cce2:	4280      	cmpeq	r0, r0
   2cce4:	d131      	bne.n	2cd4a <advance_internal+0xc8>
        assert((it->flags & CborIteratorFlag_UnknownLength) == 0);
   2cce6:	7be3      	ldrb	r3, [r4, #15]
   2cce8:	f013 0f04 	tst.w	r3, #4
   2ccec:	d137      	bne.n	2cd5e <advance_internal+0xdc>
        it->offset += length;
   2ccee:	6863      	ldr	r3, [r4, #4]
   2ccf0:	4403      	add	r3, r0
   2ccf2:	6063      	str	r3, [r4, #4]
    return preparse_next_value(it);
   2ccf4:	4620      	mov	r0, r4
   2ccf6:	f7ff fe8d 	bl	2ca14 <preparse_next_value>
}
   2ccfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if (bytesNeeded == 2) {
   2ccfc:	2d02      	cmp	r5, #2
   2ccfe:	d105      	bne.n	2cd0c <advance_internal+0x8a>
        *len =  p->d->get16(p->d, *offset);
   2cd00:	6830      	ldr	r0, [r6, #0]
   2cd02:	6843      	ldr	r3, [r0, #4]
   2cd04:	4798      	blx	r3
   2cd06:	b280      	uxth	r0, r0
   2cd08:	2100      	movs	r1, #0
   2cd0a:	e7d9      	b.n	2ccc0 <advance_internal+0x3e>
    } else if (bytesNeeded == 4) {
   2cd0c:	2d04      	cmp	r5, #4
   2cd0e:	d003      	beq.n	2cd18 <advance_internal+0x96>
        *len =  p->d->get64(p->d, *offset);
   2cd10:	6830      	ldr	r0, [r6, #0]
   2cd12:	68c3      	ldr	r3, [r0, #12]
   2cd14:	4798      	blx	r3
   2cd16:	e7d3      	b.n	2ccc0 <advance_internal+0x3e>
        *len =  p->d->get32(p->d, *offset);
   2cd18:	6830      	ldr	r0, [r6, #0]
   2cd1a:	6883      	ldr	r3, [r0, #8]
   2cd1c:	4798      	blx	r3
   2cd1e:	2100      	movs	r1, #0
   2cd20:	e7ce      	b.n	2ccc0 <advance_internal+0x3e>
    *len = 1;
   2cd22:	2001      	movs	r0, #1
   2cd24:	2100      	movs	r1, #0
        return CborErrorIllegalNumber;
   2cd26:	f240 1305 	movw	r3, #261	; 0x105
   2cd2a:	e7d1      	b.n	2ccd0 <advance_internal+0x4e>
    *len = 1;
   2cd2c:	2001      	movs	r0, #1
   2cd2e:	2100      	movs	r1, #0
        return CborErrorUnexpectedEOF;
   2cd30:	f240 1301 	movw	r3, #257	; 0x101
   2cd34:	e7cc      	b.n	2ccd0 <advance_internal+0x4e>
    assert(err == CborNoError);
   2cd36:	f7df fa57 	bl	c1e8 <hal_debugger_connected>
   2cd3a:	b100      	cbz	r0, 2cd3e <advance_internal+0xbc>
   2cd3c:	be01      	bkpt	0x0001
   2cd3e:	2300      	movs	r3, #0
   2cd40:	461a      	mov	r2, r3
   2cd42:	4619      	mov	r1, r3
   2cd44:	4618      	mov	r0, r3
   2cd46:	f7df ff03 	bl	cb50 <__assert_func>
        assert(length == (size_t)length);
   2cd4a:	f7df fa4d 	bl	c1e8 <hal_debugger_connected>
   2cd4e:	b100      	cbz	r0, 2cd52 <advance_internal+0xd0>
   2cd50:	be01      	bkpt	0x0001
   2cd52:	2300      	movs	r3, #0
   2cd54:	461a      	mov	r2, r3
   2cd56:	4619      	mov	r1, r3
   2cd58:	4618      	mov	r0, r3
   2cd5a:	f7df fef9 	bl	cb50 <__assert_func>
        assert((it->flags & CborIteratorFlag_UnknownLength) == 0);
   2cd5e:	f7df fa43 	bl	c1e8 <hal_debugger_connected>
   2cd62:	b100      	cbz	r0, 2cd66 <advance_internal+0xe4>
   2cd64:	be01      	bkpt	0x0001
   2cd66:	2300      	movs	r3, #0
   2cd68:	461a      	mov	r2, r3
   2cd6a:	4619      	mov	r1, r3
   2cd6c:	4618      	mov	r0, r3
   2cd6e:	f7df feef 	bl	cb50 <__assert_func>

0002cd72 <_cbor_value_decode_int64_internal>:
{
   2cd72:	b510      	push	{r4, lr}
   2cd74:	4604      	mov	r4, r0
    uint8_t val = value->parser->d->get8(value->parser->d, value->offset);
   2cd76:	6803      	ldr	r3, [r0, #0]
   2cd78:	6818      	ldr	r0, [r3, #0]
   2cd7a:	6803      	ldr	r3, [r0, #0]
   2cd7c:	6861      	ldr	r1, [r4, #4]
   2cd7e:	4798      	blx	r3
    assert(value->flags & CborIteratorFlag_IntegerValueTooLarge ||
   2cd80:	7be3      	ldrb	r3, [r4, #15]
   2cd82:	f013 0f01 	tst.w	r3, #1
   2cd86:	d104      	bne.n	2cd92 <_cbor_value_decode_int64_internal+0x20>
   2cd88:	7ba3      	ldrb	r3, [r4, #14]
   2cd8a:	2bfa      	cmp	r3, #250	; 0xfa
   2cd8c:	d001      	beq.n	2cd92 <_cbor_value_decode_int64_internal+0x20>
   2cd8e:	2bfb      	cmp	r3, #251	; 0xfb
   2cd90:	d110      	bne.n	2cdb4 <_cbor_value_decode_int64_internal+0x42>
   2cd92:	f000 031f 	and.w	r3, r0, #31
    assert((val & SmallValueMask) == Value32Bit || (val & SmallValueMask) == Value64Bit);
   2cd96:	f1a3 021a 	sub.w	r2, r3, #26
   2cd9a:	2a01      	cmp	r2, #1
   2cd9c:	d814      	bhi.n	2cdc8 <_cbor_value_decode_int64_internal+0x56>
    if ((val & 1) == (Value32Bit & 1))
   2cd9e:	f010 0f01 	tst.w	r0, #1
   2cda2:	d11b      	bne.n	2cddc <_cbor_value_decode_int64_internal+0x6a>
        return value->parser->d->get32(value->parser->d, value->offset + 1);
   2cda4:	6823      	ldr	r3, [r4, #0]
   2cda6:	6818      	ldr	r0, [r3, #0]
   2cda8:	6883      	ldr	r3, [r0, #8]
   2cdaa:	6861      	ldr	r1, [r4, #4]
   2cdac:	3101      	adds	r1, #1
   2cdae:	4798      	blx	r3
   2cdb0:	2100      	movs	r1, #0
}
   2cdb2:	bd10      	pop	{r4, pc}
    assert(value->flags & CborIteratorFlag_IntegerValueTooLarge ||
   2cdb4:	f7df fa18 	bl	c1e8 <hal_debugger_connected>
   2cdb8:	b100      	cbz	r0, 2cdbc <_cbor_value_decode_int64_internal+0x4a>
   2cdba:	be01      	bkpt	0x0001
   2cdbc:	2300      	movs	r3, #0
   2cdbe:	461a      	mov	r2, r3
   2cdc0:	4619      	mov	r1, r3
   2cdc2:	4618      	mov	r0, r3
   2cdc4:	f7df fec4 	bl	cb50 <__assert_func>
    assert((val & SmallValueMask) == Value32Bit || (val & SmallValueMask) == Value64Bit);
   2cdc8:	f7df fa0e 	bl	c1e8 <hal_debugger_connected>
   2cdcc:	b100      	cbz	r0, 2cdd0 <_cbor_value_decode_int64_internal+0x5e>
   2cdce:	be01      	bkpt	0x0001
   2cdd0:	2300      	movs	r3, #0
   2cdd2:	461a      	mov	r2, r3
   2cdd4:	4619      	mov	r1, r3
   2cdd6:	4618      	mov	r0, r3
   2cdd8:	f7df feba 	bl	cb50 <__assert_func>
    assert((val & SmallValueMask) == Value64Bit);
   2cddc:	2b1b      	cmp	r3, #27
   2cdde:	d106      	bne.n	2cdee <_cbor_value_decode_int64_internal+0x7c>
        return value->parser->d->get64(value->parser->d, value->offset + 1);
   2cde0:	6823      	ldr	r3, [r4, #0]
   2cde2:	6818      	ldr	r0, [r3, #0]
   2cde4:	68c3      	ldr	r3, [r0, #12]
   2cde6:	6861      	ldr	r1, [r4, #4]
   2cde8:	3101      	adds	r1, #1
   2cdea:	4798      	blx	r3
   2cdec:	e7e1      	b.n	2cdb2 <_cbor_value_decode_int64_internal+0x40>
    assert((val & SmallValueMask) == Value64Bit);
   2cdee:	f7df f9fb 	bl	c1e8 <hal_debugger_connected>
   2cdf2:	b100      	cbz	r0, 2cdf6 <_cbor_value_decode_int64_internal+0x84>
   2cdf4:	be01      	bkpt	0x0001
   2cdf6:	2300      	movs	r3, #0
   2cdf8:	461a      	mov	r2, r3
   2cdfa:	4619      	mov	r1, r3
   2cdfc:	4618      	mov	r0, r3
   2cdfe:	f7df fea7 	bl	cb50 <__assert_func>

0002ce02 <cbor_parser_init>:
{
   2ce02:	b510      	push	{r4, lr}
    memset(parser, 0, sizeof(*parser));
   2ce04:	2400      	movs	r4, #0
   2ce06:	6054      	str	r4, [r2, #4]
   2ce08:	6094      	str	r4, [r2, #8]
    parser->d = d;
   2ce0a:	6010      	str	r0, [r2, #0]
    parser->end = d->message_size;
   2ce0c:	6980      	ldr	r0, [r0, #24]
   2ce0e:	6050      	str	r0, [r2, #4]
    parser->flags = flags;
   2ce10:	6091      	str	r1, [r2, #8]
    it->parser = parser;
   2ce12:	601a      	str	r2, [r3, #0]
    it->offset = 0;
   2ce14:	605c      	str	r4, [r3, #4]
    it->remaining = 1;/* there's one type altogether, usually an array or map */
   2ce16:	2201      	movs	r2, #1
   2ce18:	609a      	str	r2, [r3, #8]
    return preparse_value(it);
   2ce1a:	4618      	mov	r0, r3
   2ce1c:	f7ff fd58 	bl	2c8d0 <preparse_value>
}
   2ce20:	bd10      	pop	{r4, pc}

0002ce22 <cbor_value_advance_fixed>:
{
   2ce22:	b510      	push	{r4, lr}
   2ce24:	4604      	mov	r4, r0
    assert(it->type != CborInvalidType);
   2ce26:	7b80      	ldrb	r0, [r0, #14]
   2ce28:	28ff      	cmp	r0, #255	; 0xff
   2ce2a:	d008      	beq.n	2ce3e <cbor_value_advance_fixed+0x1c>
    assert(is_fixed_type(it->type));
   2ce2c:	f7ff fd3c 	bl	2c8a8 <is_fixed_type>
   2ce30:	b178      	cbz	r0, 2ce52 <cbor_value_advance_fixed+0x30>
    if (!it->remaining)
   2ce32:	68a3      	ldr	r3, [r4, #8]
   2ce34:	b1bb      	cbz	r3, 2ce66 <cbor_value_advance_fixed+0x44>
    return advance_internal(it);
   2ce36:	4620      	mov	r0, r4
   2ce38:	f7ff ff23 	bl	2cc82 <advance_internal>
}
   2ce3c:	bd10      	pop	{r4, pc}
    assert(it->type != CborInvalidType);
   2ce3e:	f7df f9d3 	bl	c1e8 <hal_debugger_connected>
   2ce42:	b100      	cbz	r0, 2ce46 <cbor_value_advance_fixed+0x24>
   2ce44:	be01      	bkpt	0x0001
   2ce46:	2300      	movs	r3, #0
   2ce48:	461a      	mov	r2, r3
   2ce4a:	4619      	mov	r1, r3
   2ce4c:	4618      	mov	r0, r3
   2ce4e:	f7df fe7f 	bl	cb50 <__assert_func>
    assert(is_fixed_type(it->type));
   2ce52:	f7df f9c9 	bl	c1e8 <hal_debugger_connected>
   2ce56:	b100      	cbz	r0, 2ce5a <cbor_value_advance_fixed+0x38>
   2ce58:	be01      	bkpt	0x0001
   2ce5a:	2300      	movs	r3, #0
   2ce5c:	461a      	mov	r2, r3
   2ce5e:	4619      	mov	r1, r3
   2ce60:	4618      	mov	r0, r3
   2ce62:	f7df fe75 	bl	cb50 <__assert_func>
        return CborErrorAdvancePastEOF;
   2ce66:	2003      	movs	r0, #3
   2ce68:	e7e8      	b.n	2ce3c <cbor_value_advance_fixed+0x1a>

0002ce6a <cbor_value_enter_container>:
{
   2ce6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2ce6c:	4605      	mov	r5, r0
   2ce6e:	460c      	mov	r4, r1
{ return it->type == CborArrayType || it->type == CborMapType; }
   2ce70:	7b83      	ldrb	r3, [r0, #14]
   2ce72:	2b80      	cmp	r3, #128	; 0x80
   2ce74:	d021      	beq.n	2ceba <cbor_value_enter_container+0x50>
   2ce76:	2ba0      	cmp	r3, #160	; 0xa0
   2ce78:	d01d      	beq.n	2ceb6 <cbor_value_enter_container+0x4c>
   2ce7a:	2300      	movs	r3, #0
    assert(cbor_value_is_container(it));
   2ce7c:	b1fb      	cbz	r3, 2cebe <cbor_value_enter_container+0x54>
    *recursed = *it;
   2ce7e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   2ce82:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (it->flags & CborIteratorFlag_UnknownLength) {
   2ce86:	7beb      	ldrb	r3, [r5, #15]
   2ce88:	f013 0f04 	tst.w	r3, #4
   2ce8c:	d021      	beq.n	2ced2 <cbor_value_enter_container+0x68>
        recursed->remaining = UINT32_MAX;
   2ce8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2ce92:	60a3      	str	r3, [r4, #8]
        ++recursed->offset;
   2ce94:	460b      	mov	r3, r1
   2ce96:	3301      	adds	r3, #1
   2ce98:	6063      	str	r3, [r4, #4]
        err = preparse_value(recursed);
   2ce9a:	4620      	mov	r0, r4
   2ce9c:	f7ff fd18 	bl	2c8d0 <preparse_value>
        if (err != CborErrorUnexpectedBreak)
   2cea0:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   2cea4:	d145      	bne.n	2cf32 <cbor_value_enter_container+0xc8>
        ++recursed->offset;
   2cea6:	6863      	ldr	r3, [r4, #4]
   2cea8:	3301      	adds	r3, #1
   2ceaa:	6063      	str	r3, [r4, #4]
    recursed->type = CborInvalidType;
   2ceac:	23ff      	movs	r3, #255	; 0xff
   2ceae:	73a3      	strb	r3, [r4, #14]
    recursed->remaining = 0;
   2ceb0:	2000      	movs	r0, #0
   2ceb2:	60a0      	str	r0, [r4, #8]
    return CborNoError;
   2ceb4:	e03d      	b.n	2cf32 <cbor_value_enter_container+0xc8>
   2ceb6:	2301      	movs	r3, #1
   2ceb8:	e7e0      	b.n	2ce7c <cbor_value_enter_container+0x12>
   2ceba:	2301      	movs	r3, #1
   2cebc:	e7de      	b.n	2ce7c <cbor_value_enter_container+0x12>
    assert(cbor_value_is_container(it));
   2cebe:	f7df f993 	bl	c1e8 <hal_debugger_connected>
   2cec2:	b100      	cbz	r0, 2cec6 <cbor_value_enter_container+0x5c>
   2cec4:	be01      	bkpt	0x0001
   2cec6:	2300      	movs	r3, #0
   2cec8:	461a      	mov	r2, r3
   2ceca:	4619      	mov	r1, r3
   2cecc:	4618      	mov	r0, r3
   2cece:	f7df fe3f 	bl	cb50 <__assert_func>
        err = extract_number(recursed->parser, &recursed->offset, &len);
   2ced2:	6826      	ldr	r6, [r4, #0]
    uint8_t additional_information = p->d->get8(p->d, *offset) & SmallValueMask;
   2ced4:	6830      	ldr	r0, [r6, #0]
   2ced6:	6803      	ldr	r3, [r0, #0]
   2ced8:	6861      	ldr	r1, [r4, #4]
   2ceda:	4798      	blx	r3
   2cedc:	f000 001f 	and.w	r0, r0, #31
    ++*offset;
   2cee0:	6863      	ldr	r3, [r4, #4]
   2cee2:	3301      	adds	r3, #1
   2cee4:	6063      	str	r3, [r4, #4]
    if (additional_information < Value8Bit) {
   2cee6:	2817      	cmp	r0, #23
   2cee8:	d915      	bls.n	2cf16 <cbor_value_enter_container+0xac>
    if (unlikely(additional_information > Value64Bit))
   2ceea:	281b      	cmp	r0, #27
   2ceec:	d835      	bhi.n	2cf5a <cbor_value_enter_container+0xf0>
    size_t bytesNeeded = (size_t)(1 << (additional_information - Value8Bit));
   2ceee:	3818      	subs	r0, #24
   2cef0:	2701      	movs	r7, #1
   2cef2:	4087      	lsls	r7, r0
    if (unlikely(bytesNeeded > (size_t)(p->end - *offset))) {
   2cef4:	6873      	ldr	r3, [r6, #4]
   2cef6:	6861      	ldr	r1, [r4, #4]
   2cef8:	1a5b      	subs	r3, r3, r1
   2cefa:	429f      	cmp	r7, r3
   2cefc:	d832      	bhi.n	2cf64 <cbor_value_enter_container+0xfa>
    } else if (bytesNeeded == 1) {
   2cefe:	2f01      	cmp	r7, #1
   2cf00:	d118      	bne.n	2cf34 <cbor_value_enter_container+0xca>
        *len = p->d->get8(p->d, *offset);
   2cf02:	6830      	ldr	r0, [r6, #0]
   2cf04:	6803      	ldr	r3, [r0, #0]
   2cf06:	4798      	blx	r3
   2cf08:	b2c0      	uxtb	r0, r0
   2cf0a:	2100      	movs	r1, #0
    *offset += bytesNeeded;
   2cf0c:	6863      	ldr	r3, [r4, #4]
   2cf0e:	441f      	add	r7, r3
   2cf10:	6067      	str	r7, [r4, #4]
    return CborNoError;
   2cf12:	2300      	movs	r3, #0
   2cf14:	e002      	b.n	2cf1c <cbor_value_enter_container+0xb2>
        *len = additional_information;
   2cf16:	b2c0      	uxtb	r0, r0
   2cf18:	2100      	movs	r1, #0
        return CborNoError;
   2cf1a:	2300      	movs	r3, #0
        assert(err == CborNoError);
   2cf1c:	bb3b      	cbnz	r3, 2cf6e <cbor_value_enter_container+0x104>
        recursed->remaining = (uint32_t)len;
   2cf1e:	60a0      	str	r0, [r4, #8]
        if (recursed->remaining != len || len == UINT32_MAX) {
   2cf20:	2300      	movs	r3, #0
   2cf22:	428b      	cmp	r3, r1
   2cf24:	bf08      	it	eq
   2cf26:	4280      	cmpeq	r0, r0
   2cf28:	d02b      	beq.n	2cf82 <cbor_value_enter_container+0x118>
            recursed->offset = it->offset;
   2cf2a:	686b      	ldr	r3, [r5, #4]
   2cf2c:	6063      	str	r3, [r4, #4]
            return CborErrorDataTooLarge;
   2cf2e:	f44f 6080 	mov.w	r0, #1024	; 0x400
}
   2cf32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if (bytesNeeded == 2) {
   2cf34:	2f02      	cmp	r7, #2
   2cf36:	d105      	bne.n	2cf44 <cbor_value_enter_container+0xda>
        *len =  p->d->get16(p->d, *offset);
   2cf38:	6830      	ldr	r0, [r6, #0]
   2cf3a:	6843      	ldr	r3, [r0, #4]
   2cf3c:	4798      	blx	r3
   2cf3e:	b280      	uxth	r0, r0
   2cf40:	2100      	movs	r1, #0
   2cf42:	e7e3      	b.n	2cf0c <cbor_value_enter_container+0xa2>
    } else if (bytesNeeded == 4) {
   2cf44:	2f04      	cmp	r7, #4
   2cf46:	d003      	beq.n	2cf50 <cbor_value_enter_container+0xe6>
        *len =  p->d->get64(p->d, *offset);
   2cf48:	6830      	ldr	r0, [r6, #0]
   2cf4a:	68c3      	ldr	r3, [r0, #12]
   2cf4c:	4798      	blx	r3
   2cf4e:	e7dd      	b.n	2cf0c <cbor_value_enter_container+0xa2>
        *len =  p->d->get32(p->d, *offset);
   2cf50:	6830      	ldr	r0, [r6, #0]
   2cf52:	6883      	ldr	r3, [r0, #8]
   2cf54:	4798      	blx	r3
   2cf56:	2100      	movs	r1, #0
   2cf58:	e7d8      	b.n	2cf0c <cbor_value_enter_container+0xa2>
    *len = 1;
   2cf5a:	2001      	movs	r0, #1
   2cf5c:	2100      	movs	r1, #0
        return CborErrorIllegalNumber;
   2cf5e:	f240 1305 	movw	r3, #261	; 0x105
   2cf62:	e7db      	b.n	2cf1c <cbor_value_enter_container+0xb2>
    *len = 1;
   2cf64:	2001      	movs	r0, #1
   2cf66:	2100      	movs	r1, #0
        return CborErrorUnexpectedEOF;
   2cf68:	f240 1301 	movw	r3, #257	; 0x101
   2cf6c:	e7d6      	b.n	2cf1c <cbor_value_enter_container+0xb2>
        assert(err == CborNoError);
   2cf6e:	f7df f93b 	bl	c1e8 <hal_debugger_connected>
   2cf72:	b100      	cbz	r0, 2cf76 <cbor_value_enter_container+0x10c>
   2cf74:	be01      	bkpt	0x0001
   2cf76:	2300      	movs	r3, #0
   2cf78:	461a      	mov	r2, r3
   2cf7a:	4619      	mov	r1, r3
   2cf7c:	4618      	mov	r0, r3
   2cf7e:	f7df fde7 	bl	cb50 <__assert_func>
        if (recursed->remaining != len || len == UINT32_MAX) {
   2cf82:	2900      	cmp	r1, #0
   2cf84:	bf08      	it	eq
   2cf86:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
   2cf8a:	d0ce      	beq.n	2cf2a <cbor_value_enter_container+0xc0>
        if (recursed->type == CborMapType) {
   2cf8c:	7ba3      	ldrb	r3, [r4, #14]
   2cf8e:	2ba0      	cmp	r3, #160	; 0xa0
   2cf90:	d006      	beq.n	2cfa0 <cbor_value_enter_container+0x136>
        if (len != 0)
   2cf92:	ea50 0301 	orrs.w	r3, r0, r1
   2cf96:	d089      	beq.n	2ceac <cbor_value_enter_container+0x42>
            return preparse_value(recursed);
   2cf98:	4620      	mov	r0, r4
   2cf9a:	f7ff fc99 	bl	2c8d0 <preparse_value>
   2cf9e:	e7c8      	b.n	2cf32 <cbor_value_enter_container+0xc8>
            if (recursed->remaining > UINT32_MAX / 2) {
   2cfa0:	2800      	cmp	r0, #0
   2cfa2:	db02      	blt.n	2cfaa <cbor_value_enter_container+0x140>
            recursed->remaining *= 2;
   2cfa4:	0046      	lsls	r6, r0, #1
   2cfa6:	60a6      	str	r6, [r4, #8]
   2cfa8:	e7f3      	b.n	2cf92 <cbor_value_enter_container+0x128>
                recursed->offset = it->offset;
   2cfaa:	686b      	ldr	r3, [r5, #4]
   2cfac:	6063      	str	r3, [r4, #4]
                return CborErrorDataTooLarge;
   2cfae:	f44f 6080 	mov.w	r0, #1024	; 0x400
   2cfb2:	e7be      	b.n	2cf32 <cbor_value_enter_container+0xc8>

0002cfb4 <cbor_value_leave_container>:
{
   2cfb4:	b508      	push	{r3, lr}
   2cfb6:	7b83      	ldrb	r3, [r0, #14]
   2cfb8:	2b80      	cmp	r3, #128	; 0x80
   2cfba:	d00d      	beq.n	2cfd8 <cbor_value_leave_container+0x24>
   2cfbc:	2ba0      	cmp	r3, #160	; 0xa0
   2cfbe:	d009      	beq.n	2cfd4 <cbor_value_leave_container+0x20>
   2cfc0:	2300      	movs	r3, #0
    assert(cbor_value_is_container(it));
   2cfc2:	b15b      	cbz	r3, 2cfdc <cbor_value_leave_container+0x28>
    assert(recursed->type == CborInvalidType);
   2cfc4:	7b8b      	ldrb	r3, [r1, #14]
   2cfc6:	2bff      	cmp	r3, #255	; 0xff
   2cfc8:	d112      	bne.n	2cff0 <cbor_value_leave_container+0x3c>
    it->offset = recursed->offset;
   2cfca:	684b      	ldr	r3, [r1, #4]
   2cfcc:	6043      	str	r3, [r0, #4]
    return preparse_next_value(it);
   2cfce:	f7ff fd21 	bl	2ca14 <preparse_next_value>
}
   2cfd2:	bd08      	pop	{r3, pc}
   2cfd4:	2301      	movs	r3, #1
   2cfd6:	e7f4      	b.n	2cfc2 <cbor_value_leave_container+0xe>
   2cfd8:	2301      	movs	r3, #1
   2cfda:	e7f2      	b.n	2cfc2 <cbor_value_leave_container+0xe>
    assert(cbor_value_is_container(it));
   2cfdc:	f7df f904 	bl	c1e8 <hal_debugger_connected>
   2cfe0:	b100      	cbz	r0, 2cfe4 <cbor_value_leave_container+0x30>
   2cfe2:	be01      	bkpt	0x0001
   2cfe4:	2300      	movs	r3, #0
   2cfe6:	461a      	mov	r2, r3
   2cfe8:	4619      	mov	r1, r3
   2cfea:	4618      	mov	r0, r3
   2cfec:	f7df fdb0 	bl	cb50 <__assert_func>
    assert(recursed->type == CborInvalidType);
   2cff0:	f7df f8fa 	bl	c1e8 <hal_debugger_connected>
   2cff4:	b100      	cbz	r0, 2cff8 <cbor_value_leave_container+0x44>
   2cff6:	be01      	bkpt	0x0001
   2cff8:	2300      	movs	r3, #0
   2cffa:	461a      	mov	r2, r3
   2cffc:	4619      	mov	r1, r3
   2cffe:	4618      	mov	r0, r3
   2d000:	f7df fda6 	bl	cb50 <__assert_func>

0002d004 <_cbor_value_copy_string>:
 * \sa cbor_value_dup_text_string(), cbor_value_copy_text_string(), cbor_value_get_string_length(), cbor_value_calculate_string_length()
 */

CborError _cbor_value_copy_string(const CborValue *value, void *buffer,
                                 size_t *buflen, CborValue *next)
{
   2d004:	b510      	push	{r4, lr}
   2d006:	b084      	sub	sp, #16
    bool copied_all;
    CborError err = iterate_string_chunks(value, (char*)buffer, buflen, &copied_all, next,
   2d008:	460c      	mov	r4, r1
   2d00a:	b189      	cbz	r1, 2d030 <_cbor_value_copy_string+0x2c>
                                          buffer ? (IterateFunction) value->parser->d->cpy : iterate_noop);
   2d00c:	6801      	ldr	r1, [r0, #0]
   2d00e:	6809      	ldr	r1, [r1, #0]
    CborError err = iterate_string_chunks(value, (char*)buffer, buflen, &copied_all, next,
   2d010:	6949      	ldr	r1, [r1, #20]
   2d012:	9101      	str	r1, [sp, #4]
   2d014:	9300      	str	r3, [sp, #0]
   2d016:	f10d 030f 	add.w	r3, sp, #15
   2d01a:	4621      	mov	r1, r4
   2d01c:	f7ff fd75 	bl	2cb0a <iterate_string_chunks>
    return err ? err :
   2d020:	4603      	mov	r3, r0
   2d022:	b910      	cbnz	r0, 2d02a <_cbor_value_copy_string+0x26>
                 copied_all ? CborNoError : CborErrorOutOfMemory;
   2d024:	f89d 200f 	ldrb.w	r2, [sp, #15]
    return err ? err :
   2d028:	b122      	cbz	r2, 2d034 <_cbor_value_copy_string+0x30>
}
   2d02a:	4618      	mov	r0, r3
   2d02c:	b004      	add	sp, #16
   2d02e:	bd10      	pop	{r4, pc}
    CborError err = iterate_string_chunks(value, (char*)buffer, buflen, &copied_all, next,
   2d030:	4902      	ldr	r1, [pc, #8]	; (2d03c <_cbor_value_copy_string+0x38>)
   2d032:	e7ee      	b.n	2d012 <_cbor_value_copy_string+0xe>
    return err ? err :
   2d034:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
   2d038:	e7f7      	b.n	2d02a <_cbor_value_copy_string+0x26>
   2d03a:	bf00      	nop
   2d03c:	0002c8cd 	.word	0x0002c8cd

0002d040 <advance_recursive>:
{
   2d040:	b570      	push	{r4, r5, r6, lr}
   2d042:	b086      	sub	sp, #24
   2d044:	4605      	mov	r5, r0
   2d046:	460e      	mov	r6, r1
    if (is_fixed_type(it->type))
   2d048:	7b84      	ldrb	r4, [r0, #14]
   2d04a:	4620      	mov	r0, r4
   2d04c:	f7ff fc2c 	bl	2c8a8 <is_fixed_type>
   2d050:	b9c0      	cbnz	r0, 2d084 <advance_recursive+0x44>
   2d052:	2c80      	cmp	r4, #128	; 0x80
   2d054:	d01f      	beq.n	2d096 <advance_recursive+0x56>
   2d056:	2ca0      	cmp	r4, #160	; 0xa0
   2d058:	d01b      	beq.n	2d092 <advance_recursive+0x52>
   2d05a:	2300      	movs	r3, #0
    if (!cbor_value_is_container(it)) {
   2d05c:	b1eb      	cbz	r3, 2d09a <advance_recursive+0x5a>
    if (nestingLevel == CBOR_PARSER_MAX_RECURSIONS)
   2d05e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   2d062:	d02c      	beq.n	2d0be <advance_recursive+0x7e>
    err = cbor_value_enter_container(it, &recursed);
   2d064:	a902      	add	r1, sp, #8
   2d066:	4628      	mov	r0, r5
   2d068:	f7ff feff 	bl	2ce6a <cbor_value_enter_container>
    if (err)
   2d06c:	4603      	mov	r3, r0
   2d06e:	b968      	cbnz	r0, 2d08c <advance_recursive+0x4c>
{ return it->remaining == 0; }
   2d070:	9b04      	ldr	r3, [sp, #16]
    while (!cbor_value_at_end(&recursed)) {
   2d072:	b1f3      	cbz	r3, 2d0b2 <advance_recursive+0x72>
        err = advance_recursive(&recursed, nestingLevel + 1);
   2d074:	1c71      	adds	r1, r6, #1
   2d076:	a802      	add	r0, sp, #8
   2d078:	f7ff ffe2 	bl	2d040 <advance_recursive>
        if (err)
   2d07c:	4603      	mov	r3, r0
   2d07e:	2800      	cmp	r0, #0
   2d080:	d0f6      	beq.n	2d070 <advance_recursive+0x30>
   2d082:	e003      	b.n	2d08c <advance_recursive+0x4c>
        return advance_internal(it);
   2d084:	4628      	mov	r0, r5
   2d086:	f7ff fdfc 	bl	2cc82 <advance_internal>
   2d08a:	4603      	mov	r3, r0
}
   2d08c:	4618      	mov	r0, r3
   2d08e:	b006      	add	sp, #24
   2d090:	bd70      	pop	{r4, r5, r6, pc}
{ return it->type == CborArrayType || it->type == CborMapType; }
   2d092:	2301      	movs	r3, #1
   2d094:	e7e2      	b.n	2d05c <advance_recursive+0x1c>
   2d096:	2301      	movs	r3, #1
   2d098:	e7e0      	b.n	2d05c <advance_recursive+0x1c>
        size_t len = SIZE_MAX;
   2d09a:	aa06      	add	r2, sp, #24
   2d09c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2d0a0:	f842 3d14 	str.w	r3, [r2, #-20]!
        return _cbor_value_copy_string(it, NULL, &len, it);
   2d0a4:	462b      	mov	r3, r5
   2d0a6:	2100      	movs	r1, #0
   2d0a8:	4628      	mov	r0, r5
   2d0aa:	f7ff ffab 	bl	2d004 <_cbor_value_copy_string>
   2d0ae:	4603      	mov	r3, r0
   2d0b0:	e7ec      	b.n	2d08c <advance_recursive+0x4c>
    return cbor_value_leave_container(it, &recursed);
   2d0b2:	a902      	add	r1, sp, #8
   2d0b4:	4628      	mov	r0, r5
   2d0b6:	f7ff ff7d 	bl	2cfb4 <cbor_value_leave_container>
   2d0ba:	4603      	mov	r3, r0
   2d0bc:	e7e6      	b.n	2d08c <advance_recursive+0x4c>
        return CborErrorNestingTooDeep;
   2d0be:	f240 4301 	movw	r3, #1025	; 0x401
   2d0c2:	e7e3      	b.n	2d08c <advance_recursive+0x4c>

0002d0c4 <cbor_value_advance>:
{
   2d0c4:	b508      	push	{r3, lr}
    assert(it->type != CborInvalidType);
   2d0c6:	7b83      	ldrb	r3, [r0, #14]
   2d0c8:	2bff      	cmp	r3, #255	; 0xff
   2d0ca:	d005      	beq.n	2d0d8 <cbor_value_advance+0x14>
    if (!it->remaining)
   2d0cc:	6883      	ldr	r3, [r0, #8]
   2d0ce:	b16b      	cbz	r3, 2d0ec <cbor_value_advance+0x28>
    return advance_recursive(it, 0);
   2d0d0:	2100      	movs	r1, #0
   2d0d2:	f7ff ffb5 	bl	2d040 <advance_recursive>
}
   2d0d6:	bd08      	pop	{r3, pc}
    assert(it->type != CborInvalidType);
   2d0d8:	f7df f886 	bl	c1e8 <hal_debugger_connected>
   2d0dc:	b100      	cbz	r0, 2d0e0 <cbor_value_advance+0x1c>
   2d0de:	be01      	bkpt	0x0001
   2d0e0:	2300      	movs	r3, #0
   2d0e2:	461a      	mov	r2, r3
   2d0e4:	4619      	mov	r1, r3
   2d0e6:	4618      	mov	r0, r3
   2d0e8:	f7df fd32 	bl	cb50 <__assert_func>
        return CborErrorAdvancePastEOF;
   2d0ec:	2003      	movs	r0, #3
   2d0ee:	e7f2      	b.n	2d0d6 <cbor_value_advance+0x12>

0002d0f0 <cbor_value_calculate_string_length>:
{
   2d0f0:	b508      	push	{r3, lr}
   2d0f2:	460a      	mov	r2, r1
    *len = SIZE_MAX;
   2d0f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2d0f8:	600b      	str	r3, [r1, #0]
    return _cbor_value_copy_string(value, NULL, len, NULL);
   2d0fa:	2300      	movs	r3, #0
   2d0fc:	4619      	mov	r1, r3
   2d0fe:	f7ff ff81 	bl	2d004 <_cbor_value_copy_string>
}
   2d102:	bd08      	pop	{r3, pc}

0002d104 <hexDump>:
 *      by a colon (":"), enclosed in curly braces ("{" and "}").
 *      If the map length is indeterminate, an underscore ("_") appears immediately after the opening brace.
 */

static int hexDump(FILE *out, const uint8_t *buffer, size_t n)
{
   2d104:	b570      	push	{r4, r5, r6, lr}
   2d106:	4606      	mov	r6, r0
    while (n--) {
   2d108:	1e54      	subs	r4, r2, #1
   2d10a:	b152      	cbz	r2, 2d122 <hexDump+0x1e>
        int r = fprintf(out, "%02" PRIx8, *buffer++);
   2d10c:	1c4d      	adds	r5, r1, #1
   2d10e:	780a      	ldrb	r2, [r1, #0]
   2d110:	4905      	ldr	r1, [pc, #20]	; (2d128 <hexDump+0x24>)
   2d112:	4630      	mov	r0, r6
   2d114:	f002 fbac 	bl	2f870 <fprintf>
    while (n--) {
   2d118:	4622      	mov	r2, r4
        if (r < 0)
   2d11a:	2800      	cmp	r0, #0
   2d11c:	db02      	blt.n	2d124 <hexDump+0x20>
        int r = fprintf(out, "%02" PRIx8, *buffer++);
   2d11e:	4629      	mov	r1, r5
   2d120:	e7f2      	b.n	2d108 <hexDump+0x4>
            return r;
    }
    return 0;   /* should be n * 2, but we don't have the original n anymore */
   2d122:	2000      	movs	r0, #0
}
   2d124:	bd70      	pop	{r4, r5, r6, pc}
   2d126:	bf00      	nop
   2d128:	00032718 	.word	0x00032718

0002d12c <utf8EscapedDump>:

/* This function decodes buffer as UTF-8 and prints as escaped UTF-16.
 * On UTF-8 decoding error, it returns CborErrorInvalidUtf8TextString */
static int utf8EscapedDump(FILE *out, const char *buffer, size_t n)
{
   2d12c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2d12e:	4606      	mov	r6, r0
   2d130:	460c      	mov	r4, r1
    uint32_t uc;
    while (n--) {
   2d132:	e07b      	b.n	2d22c <utf8EscapedDump+0x100>
        uc = (uint8_t)*buffer++;
        if (uc < 0x80) {
            /* single-byte UTF-8 */
            if (uc < 0x7f && uc >= 0x20 && uc != '\\' && uc != '"') {
                if (fprintf(out, "%c", (char)uc) < 0)
   2d134:	4966      	ldr	r1, [pc, #408]	; (2d2d0 <utf8EscapedDump+0x1a4>)
   2d136:	4630      	mov	r0, r6
   2d138:	f002 fb9a 	bl	2f870 <fprintf>
   2d13c:	2800      	cmp	r0, #0
   2d13e:	f2c0 80a5 	blt.w	2d28c <utf8EscapedDump+0x160>
        uc = (uint8_t)*buffer++;
   2d142:	463c      	mov	r4, r7
   2d144:	e071      	b.n	2d22a <utf8EscapedDump+0xfe>
                continue;
            }

            /* print as an escape sequence */
            char escaped = (char)uc;
            switch (uc) {
   2d146:	2a22      	cmp	r2, #34	; 0x22
   2d148:	d007      	beq.n	2d15a <utf8EscapedDump+0x2e>
   2d14a:	2a5c      	cmp	r2, #92	; 0x5c
   2d14c:	d005      	beq.n	2d15a <utf8EscapedDump+0x2e>
   2d14e:	2a0d      	cmp	r2, #13
   2d150:	f040 8086 	bne.w	2d260 <utf8EscapedDump+0x134>
                break;
            case '\n':
                escaped = 'n';
                break;
            case '\r':
                escaped = 'r';
   2d154:	2272      	movs	r2, #114	; 0x72
                break;
   2d156:	e000      	b.n	2d15a <utf8EscapedDump+0x2e>
                escaped = 'f';
   2d158:	2266      	movs	r2, #102	; 0x66
                escaped = 't';
                break;
            default:
                goto print_utf16;
            }
            if (fprintf(out, "\\%c", escaped) < 0)
   2d15a:	495e      	ldr	r1, [pc, #376]	; (2d2d4 <utf8EscapedDump+0x1a8>)
   2d15c:	4630      	mov	r0, r6
   2d15e:	f002 fb87 	bl	2f870 <fprintf>
   2d162:	2800      	cmp	r0, #0
   2d164:	f2c0 8094 	blt.w	2d290 <utf8EscapedDump+0x164>
        uc = (uint8_t)*buffer++;
   2d168:	463c      	mov	r4, r7
   2d16a:	e05e      	b.n	2d22a <utf8EscapedDump+0xfe>
                escaped = 'n';
   2d16c:	226e      	movs	r2, #110	; 0x6e
                break;
   2d16e:	e7f4      	b.n	2d15a <utf8EscapedDump+0x2e>
                escaped = 't';
   2d170:	2274      	movs	r2, #116	; 0x74
                break;
   2d172:	e7f2      	b.n	2d15a <utf8EscapedDump+0x2e>
                escaped = 'b';
   2d174:	2262      	movs	r2, #98	; 0x62
   2d176:	e7f0      	b.n	2d15a <utf8EscapedDump+0x2e>
        }

        /* multi-byte UTF-8, decode it */
        unsigned charsNeeded;
        uint32_t min_uc;
        if (unlikely(uc <= 0xC1))
   2d178:	2ac1      	cmp	r2, #193	; 0xc1
   2d17a:	f240 808b 	bls.w	2d294 <utf8EscapedDump+0x168>
            return CborErrorInvalidUtf8TextString;
        if (uc < 0xE0) {
   2d17e:	2adf      	cmp	r2, #223	; 0xdf
   2d180:	d82f      	bhi.n	2d1e2 <utf8EscapedDump+0xb6>
            /* two-byte UTF-8 */
            charsNeeded = 2;
            min_uc = 0x80;
            uc &= 0x1f;
   2d182:	f002 021f 	and.w	r2, r2, #31
            min_uc = 0x80;
   2d186:	2780      	movs	r7, #128	; 0x80
            charsNeeded = 2;
   2d188:	2302      	movs	r3, #2
            uc &= 0x07;
        } else {
            return CborErrorInvalidUtf8TextString;
        }

        if (n < charsNeeded - 1)
   2d18a:	1e59      	subs	r1, r3, #1
   2d18c:	42a9      	cmp	r1, r5
   2d18e:	f200 8087 	bhi.w	2d2a0 <utf8EscapedDump+0x174>
            return CborErrorInvalidUtf8TextString;

        /* first continuation character */
        uint8_t b = (uint8_t)*buffer++;
   2d192:	f104 0c02 	add.w	ip, r4, #2
   2d196:	7861      	ldrb	r1, [r4, #1]
        if ((b & 0xc0) != 0x80)
   2d198:	f001 00c0 	and.w	r0, r1, #192	; 0xc0
   2d19c:	2880      	cmp	r0, #128	; 0x80
   2d19e:	f040 8082 	bne.w	2d2a6 <utf8EscapedDump+0x17a>
            return CborErrorInvalidUtf8TextString;
        uc <<= 6;
        uc |= b & 0x3f;
   2d1a2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   2d1a6:	ea41 1182 	orr.w	r1, r1, r2, lsl #6

        if (charsNeeded > 2) {
   2d1aa:	2b02      	cmp	r3, #2
   2d1ac:	d929      	bls.n	2d202 <utf8EscapedDump+0xd6>
            /* second continuation character */
            b = (uint8_t)*buffer++;
   2d1ae:	f104 0c03 	add.w	ip, r4, #3
   2d1b2:	78a2      	ldrb	r2, [r4, #2]
            if ((b & 0xc0) != 0x80)
   2d1b4:	f002 00c0 	and.w	r0, r2, #192	; 0xc0
   2d1b8:	2880      	cmp	r0, #128	; 0x80
   2d1ba:	d177      	bne.n	2d2ac <utf8EscapedDump+0x180>
                return CborErrorInvalidUtf8TextString;
            uc <<= 6;
            uc |= b & 0x3f;
   2d1bc:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   2d1c0:	ea42 1181 	orr.w	r1, r2, r1, lsl #6

            if (charsNeeded > 3) {
   2d1c4:	2b03      	cmp	r3, #3
   2d1c6:	d94d      	bls.n	2d264 <utf8EscapedDump+0x138>
                /* third continuation character */
                b = (uint8_t)*buffer++;
   2d1c8:	f104 0c04 	add.w	ip, r4, #4
   2d1cc:	78e2      	ldrb	r2, [r4, #3]
                if ((b & 0xc0) != 0x80)
   2d1ce:	f002 00c0 	and.w	r0, r2, #192	; 0xc0
   2d1d2:	2880      	cmp	r0, #128	; 0x80
   2d1d4:	d16d      	bne.n	2d2b2 <utf8EscapedDump+0x186>
                    return CborErrorInvalidUtf8TextString;
                uc <<= 6;
                uc |= b & 0x3f;
   2d1d6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   2d1da:	ea42 1181 	orr.w	r1, r2, r1, lsl #6
                b = (uint8_t)*buffer++;
   2d1de:	4664      	mov	r4, ip
   2d1e0:	e010      	b.n	2d204 <utf8EscapedDump+0xd8>
        } else if (uc < 0xF0) {
   2d1e2:	2aef      	cmp	r2, #239	; 0xef
   2d1e4:	d805      	bhi.n	2d1f2 <utf8EscapedDump+0xc6>
            uc &= 0x0f;
   2d1e6:	f002 020f 	and.w	r2, r2, #15
            min_uc = 0x800;
   2d1ea:	f44f 6700 	mov.w	r7, #2048	; 0x800
            charsNeeded = 3;
   2d1ee:	2303      	movs	r3, #3
   2d1f0:	e7cb      	b.n	2d18a <utf8EscapedDump+0x5e>
        } else if (uc < 0xF5) {
   2d1f2:	2af4      	cmp	r2, #244	; 0xf4
   2d1f4:	d851      	bhi.n	2d29a <utf8EscapedDump+0x16e>
            uc &= 0x07;
   2d1f6:	f002 0207 	and.w	r2, r2, #7
            min_uc = 0x10000;
   2d1fa:	f44f 3780 	mov.w	r7, #65536	; 0x10000
            charsNeeded = 4;
   2d1fe:	2304      	movs	r3, #4
   2d200:	e7c3      	b.n	2d18a <utf8EscapedDump+0x5e>
        uint8_t b = (uint8_t)*buffer++;
   2d202:	4664      	mov	r4, ip
            }
        }

        /* overlong sequence? surrogate pair? out or range? */
        if (uc < min_uc || uc - 0xd800U < 2048U || uc > 0x10ffff)
   2d204:	42b9      	cmp	r1, r7
   2d206:	d357      	bcc.n	2d2b8 <utf8EscapedDump+0x18c>
   2d208:	f5a1 4258 	sub.w	r2, r1, #55296	; 0xd800
   2d20c:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
   2d210:	d355      	bcc.n	2d2be <utf8EscapedDump+0x192>
   2d212:	f5b1 1f88 	cmp.w	r1, #1114112	; 0x110000
   2d216:	d255      	bcs.n	2d2c4 <utf8EscapedDump+0x198>
            return CborErrorInvalidUtf8TextString;

        /* now print the sequence */
        if (charsNeeded > 3) {
   2d218:	2b03      	cmp	r3, #3
   2d21a:	d825      	bhi.n	2d268 <utf8EscapedDump+0x13c>
                        (uc % 0x0400) + 0xdc00) < 0)
                return CborErrorIO;
        } else {
print_utf16:
            /* no surrogate pair needed */
            if (fprintf(out, "\\u%04" PRIX32, uc) < 0)
   2d21c:	460a      	mov	r2, r1
   2d21e:	492e      	ldr	r1, [pc, #184]	; (2d2d8 <utf8EscapedDump+0x1ac>)
   2d220:	4630      	mov	r0, r6
   2d222:	f002 fb25 	bl	2f870 <fprintf>
   2d226:	2800      	cmp	r0, #0
   2d228:	db4f      	blt.n	2d2ca <utf8EscapedDump+0x19e>
        uc = (uint8_t)*buffer++;
   2d22a:	462a      	mov	r2, r5
    while (n--) {
   2d22c:	1e55      	subs	r5, r2, #1
   2d22e:	b35a      	cbz	r2, 2d288 <utf8EscapedDump+0x15c>
        uc = (uint8_t)*buffer++;
   2d230:	1c67      	adds	r7, r4, #1
   2d232:	7822      	ldrb	r2, [r4, #0]
   2d234:	4611      	mov	r1, r2
        if (uc < 0x80) {
   2d236:	2a7f      	cmp	r2, #127	; 0x7f
   2d238:	d89e      	bhi.n	2d178 <utf8EscapedDump+0x4c>
            if (uc < 0x7f && uc >= 0x20 && uc != '\\' && uc != '"') {
   2d23a:	f1a2 0320 	sub.w	r3, r2, #32
   2d23e:	2b5e      	cmp	r3, #94	; 0x5e
   2d240:	d804      	bhi.n	2d24c <utf8EscapedDump+0x120>
   2d242:	2a5c      	cmp	r2, #92	; 0x5c
   2d244:	d002      	beq.n	2d24c <utf8EscapedDump+0x120>
   2d246:	2a22      	cmp	r2, #34	; 0x22
   2d248:	f47f af74 	bne.w	2d134 <utf8EscapedDump+0x8>
            switch (uc) {
   2d24c:	2a0c      	cmp	r2, #12
   2d24e:	d083      	beq.n	2d158 <utf8EscapedDump+0x2c>
   2d250:	f63f af79 	bhi.w	2d146 <utf8EscapedDump+0x1a>
   2d254:	2a09      	cmp	r2, #9
   2d256:	d08b      	beq.n	2d170 <utf8EscapedDump+0x44>
   2d258:	2a0a      	cmp	r2, #10
   2d25a:	d087      	beq.n	2d16c <utf8EscapedDump+0x40>
   2d25c:	2a08      	cmp	r2, #8
   2d25e:	d089      	beq.n	2d174 <utf8EscapedDump+0x48>
        uc = (uint8_t)*buffer++;
   2d260:	463c      	mov	r4, r7
   2d262:	e7db      	b.n	2d21c <utf8EscapedDump+0xf0>
            b = (uint8_t)*buffer++;
   2d264:	4664      	mov	r4, ip
   2d266:	e7cd      	b.n	2d204 <utf8EscapedDump+0xd8>
                        (uc % 0x0400) + 0xdc00) < 0)
   2d268:	f3c1 0309 	ubfx	r3, r1, #0, #10
            if (fprintf(out, "\\u%04" PRIX32 "\\u%04" PRIX32,
   2d26c:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
   2d270:	f24d 72c0 	movw	r2, #55232	; 0xd7c0
   2d274:	eb02 2291 	add.w	r2, r2, r1, lsr #10
   2d278:	4918      	ldr	r1, [pc, #96]	; (2d2dc <utf8EscapedDump+0x1b0>)
   2d27a:	4630      	mov	r0, r6
   2d27c:	f002 faf8 	bl	2f870 <fprintf>
   2d280:	2800      	cmp	r0, #0
   2d282:	dad2      	bge.n	2d22a <utf8EscapedDump+0xfe>
                return CborErrorIO;
   2d284:	2004      	movs	r0, #4
   2d286:	e004      	b.n	2d292 <utf8EscapedDump+0x166>
                return CborErrorIO;
        }
    }
    return CborNoError;
   2d288:	2000      	movs	r0, #0
   2d28a:	e002      	b.n	2d292 <utf8EscapedDump+0x166>
                    return CborErrorIO;
   2d28c:	2004      	movs	r0, #4
   2d28e:	e000      	b.n	2d292 <utf8EscapedDump+0x166>
                return CborErrorIO;
   2d290:	2004      	movs	r0, #4
}
   2d292:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return CborErrorInvalidUtf8TextString;
   2d294:	f44f 7001 	mov.w	r0, #516	; 0x204
   2d298:	e7fb      	b.n	2d292 <utf8EscapedDump+0x166>
            return CborErrorInvalidUtf8TextString;
   2d29a:	f44f 7001 	mov.w	r0, #516	; 0x204
   2d29e:	e7f8      	b.n	2d292 <utf8EscapedDump+0x166>
            return CborErrorInvalidUtf8TextString;
   2d2a0:	f44f 7001 	mov.w	r0, #516	; 0x204
   2d2a4:	e7f5      	b.n	2d292 <utf8EscapedDump+0x166>
            return CborErrorInvalidUtf8TextString;
   2d2a6:	f44f 7001 	mov.w	r0, #516	; 0x204
   2d2aa:	e7f2      	b.n	2d292 <utf8EscapedDump+0x166>
                return CborErrorInvalidUtf8TextString;
   2d2ac:	f44f 7001 	mov.w	r0, #516	; 0x204
   2d2b0:	e7ef      	b.n	2d292 <utf8EscapedDump+0x166>
                    return CborErrorInvalidUtf8TextString;
   2d2b2:	f44f 7001 	mov.w	r0, #516	; 0x204
   2d2b6:	e7ec      	b.n	2d292 <utf8EscapedDump+0x166>
            return CborErrorInvalidUtf8TextString;
   2d2b8:	f44f 7001 	mov.w	r0, #516	; 0x204
   2d2bc:	e7e9      	b.n	2d292 <utf8EscapedDump+0x166>
   2d2be:	f44f 7001 	mov.w	r0, #516	; 0x204
   2d2c2:	e7e6      	b.n	2d292 <utf8EscapedDump+0x166>
   2d2c4:	f44f 7001 	mov.w	r0, #516	; 0x204
   2d2c8:	e7e3      	b.n	2d292 <utf8EscapedDump+0x166>
                return CborErrorIO;
   2d2ca:	2004      	movs	r0, #4
   2d2cc:	e7e1      	b.n	2d292 <utf8EscapedDump+0x166>
   2d2ce:	bf00      	nop
   2d2d0:	00032bfc 	.word	0x00032bfc
   2d2d4:	00032c00 	.word	0x00032c00
   2d2d8:	00032c14 	.word	0x00032c14
   2d2dc:	00032c04 	.word	0x00032c04

0002d2e0 <value_to_pretty>:
    }
    return CborNoError;
}

static CborError value_to_pretty(FILE *out, CborValue *it)
{
   2d2e0:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
   2d2e4:	b086      	sub	sp, #24
   2d2e6:	4607      	mov	r7, r0
   2d2e8:	460d      	mov	r5, r1
{ return (CborType)value->type; }
   2d2ea:	7b8c      	ldrb	r4, [r1, #14]
    CborError err;
    CborType type = cbor_value_get_type(it);
    switch (type) {
   2d2ec:	2ca0      	cmp	r4, #160	; 0xa0
   2d2ee:	d05e      	beq.n	2d3ae <value_to_pretty+0xce>
   2d2f0:	d91c      	bls.n	2d32c <value_to_pretty+0x4c>
   2d2f2:	2cf5      	cmp	r4, #245	; 0xf5
   2d2f4:	f000 81a0 	beq.w	2d638 <value_to_pretty+0x358>
   2d2f8:	d874      	bhi.n	2d3e4 <value_to_pretty+0x104>
   2d2fa:	2cc0      	cmp	r4, #192	; 0xc0
   2d2fc:	f000 8132 	beq.w	2d564 <value_to_pretty+0x284>
   2d300:	2ce0      	cmp	r4, #224	; 0xe0
   2d302:	f040 81b3 	bne.w	2d66c <value_to_pretty+0x38c>
{ return value->type == CborSimpleType; }
   2d306:	7b8b      	ldrb	r3, [r1, #14]
    assert(cbor_value_is_simple_type(value));
   2d308:	2be0      	cmp	r3, #224	; 0xe0
   2d30a:	f040 8164 	bne.w	2d5d6 <value_to_pretty+0x2f6>
    }

    case CborSimpleType: {
        uint8_t simple_type;
        cbor_value_get_simple_type(it, &simple_type);  /* can't fail */
        if (fprintf(out, "simple(%" PRIu8 ")", simple_type) < 0)
   2d30e:	7b0a      	ldrb	r2, [r1, #12]
   2d310:	49b6      	ldr	r1, [pc, #728]	; (2d5ec <value_to_pretty+0x30c>)
   2d312:	f002 faad 	bl	2f870 <fprintf>
   2d316:	2800      	cmp	r0, #0
   2d318:	f2c0 81b3 	blt.w	2d682 <value_to_pretty+0x3a2>
        if (fprintf(out, "invalid") < 0)
            return CborErrorIO;
        return CborErrorUnknownType;
    }

    err = cbor_value_advance_fixed(it);
   2d31c:	4628      	mov	r0, r5
   2d31e:	f7ff fd80 	bl	2ce22 <cbor_value_advance_fixed>
   2d322:	4606      	mov	r6, r0
    return err;
}
   2d324:	4630      	mov	r0, r6
   2d326:	b006      	add	sp, #24
   2d328:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
    switch (type) {
   2d32c:	2c40      	cmp	r4, #64	; 0x40
   2d32e:	f000 80c1 	beq.w	2d4b4 <value_to_pretty+0x1d4>
   2d332:	d922      	bls.n	2d37a <value_to_pretty+0x9a>
   2d334:	2c60      	cmp	r4, #96	; 0x60
   2d336:	d137      	bne.n	2d3a8 <value_to_pretty+0xc8>
        size_t n = 0;
   2d338:	2300      	movs	r3, #0
   2d33a:	9301      	str	r3, [sp, #4]
{ return value->type == CborTextStringType; }
   2d33c:	7b8b      	ldrb	r3, [r1, #14]
    assert(cbor_value_is_text_string(value));
   2d33e:	2b60      	cmp	r3, #96	; 0x60
   2d340:	f040 80f3 	bne.w	2d52a <value_to_pretty+0x24a>
    return _cbor_value_dup_string(value, (void **)buffer, buflen, next);
   2d344:	460b      	mov	r3, r1
   2d346:	aa01      	add	r2, sp, #4
   2d348:	a902      	add	r1, sp, #8
   2d34a:	4628      	mov	r0, r5
   2d34c:	f000 f9da 	bl	2d704 <_cbor_value_dup_string>
        if (err)
   2d350:	4606      	mov	r6, r0
   2d352:	2800      	cmp	r0, #0
   2d354:	d1e6      	bne.n	2d324 <value_to_pretty+0x44>
        bool failed = fprintf(out, "\"") < 0
   2d356:	49a6      	ldr	r1, [pc, #664]	; (2d5f0 <value_to_pretty+0x310>)
   2d358:	4638      	mov	r0, r7
   2d35a:	f002 fa89 	bl	2f870 <fprintf>
                      || fprintf(out, "\"") < 0;
   2d35e:	2800      	cmp	r0, #0
   2d360:	f280 80ed 	bge.w	2d53e <value_to_pretty+0x25e>
   2d364:	2301      	movs	r3, #1
        bool failed = fprintf(out, "\"") < 0
   2d366:	461c      	mov	r4, r3
        free(buffer);
   2d368:	9802      	ldr	r0, [sp, #8]
   2d36a:	f001 ff27 	bl	2f1bc <free>
        return err != CborNoError ? err :
   2d36e:	2e00      	cmp	r6, #0
   2d370:	d1d8      	bne.n	2d324 <value_to_pretty+0x44>
   2d372:	2c00      	cmp	r4, #0
   2d374:	d0d6      	beq.n	2d324 <value_to_pretty+0x44>
   2d376:	2604      	movs	r6, #4
   2d378:	e7d4      	b.n	2d324 <value_to_pretty+0x44>
    switch (type) {
   2d37a:	2c00      	cmp	r4, #0
   2d37c:	f040 8176 	bne.w	2d66c <value_to_pretty+0x38c>
{ return value->type == CborIntegerType; }
   2d380:	7b8b      	ldrb	r3, [r1, #14]
    assert(cbor_value_is_integer(value));
   2d382:	2b00      	cmp	r3, #0
   2d384:	d160      	bne.n	2d448 <value_to_pretty+0x168>
    return value->flags & CborIteratorFlag_IntegerValueTooLarge ?
   2d386:	7bcb      	ldrb	r3, [r1, #15]
                _cbor_value_decode_int64_internal(value) : value->extra;
   2d388:	f013 0f01 	tst.w	r3, #1
   2d38c:	d166      	bne.n	2d45c <value_to_pretty+0x17c>
   2d38e:	f8b1 b00c 	ldrh.w	fp, [r1, #12]
   2d392:	f04f 0c00 	mov.w	ip, #0
{ return value->type == CborIntegerType; }
   2d396:	7ba9      	ldrb	r1, [r5, #14]
{ return cbor_value_is_integer(value) && (value->flags & CborIteratorFlag_NegativeInteger) == 0; }
   2d398:	2900      	cmp	r1, #0
   2d39a:	d165      	bne.n	2d468 <value_to_pretty+0x188>
   2d39c:	7be9      	ldrb	r1, [r5, #15]
   2d39e:	f011 0f02 	tst.w	r1, #2
   2d3a2:	d073      	beq.n	2d48c <value_to_pretty+0x1ac>
   2d3a4:	2100      	movs	r1, #0
   2d3a6:	e060      	b.n	2d46a <value_to_pretty+0x18a>
   2d3a8:	2c80      	cmp	r4, #128	; 0x80
   2d3aa:	f040 815f 	bne.w	2d66c <value_to_pretty+0x38c>
        if (fprintf(out, type == CborArrayType ? "[" : "{") < 0)
   2d3ae:	2c80      	cmp	r4, #128	; 0x80
   2d3b0:	d025      	beq.n	2d3fe <value_to_pretty+0x11e>
   2d3b2:	4990      	ldr	r1, [pc, #576]	; (2d5f4 <value_to_pretty+0x314>)
   2d3b4:	4638      	mov	r0, r7
   2d3b6:	f002 fa5b 	bl	2f870 <fprintf>
   2d3ba:	2800      	cmp	r0, #0
   2d3bc:	db40      	blt.n	2d440 <value_to_pretty+0x160>
{ return (value->flags & CborIteratorFlag_UnknownLength) == 0; }
   2d3be:	7beb      	ldrb	r3, [r5, #15]
        if (!cbor_value_is_length_known(it)) {
   2d3c0:	f013 0f04 	tst.w	r3, #4
   2d3c4:	d005      	beq.n	2d3d2 <value_to_pretty+0xf2>
            if (fprintf(out, "_ ") < 0)
   2d3c6:	498c      	ldr	r1, [pc, #560]	; (2d5f8 <value_to_pretty+0x318>)
   2d3c8:	4638      	mov	r0, r7
   2d3ca:	f002 fa51 	bl	2f870 <fprintf>
   2d3ce:	2800      	cmp	r0, #0
   2d3d0:	db38      	blt.n	2d444 <value_to_pretty+0x164>
        err = cbor_value_enter_container(it, &recursed);
   2d3d2:	a902      	add	r1, sp, #8
   2d3d4:	4628      	mov	r0, r5
   2d3d6:	f7ff fd48 	bl	2ce6a <cbor_value_enter_container>
        if (err) {
   2d3da:	4606      	mov	r6, r0
   2d3dc:	b188      	cbz	r0, 2d402 <value_to_pretty+0x122>
            it->offset = recursed.offset;
   2d3de:	9b03      	ldr	r3, [sp, #12]
   2d3e0:	606b      	str	r3, [r5, #4]
            return err;       /* parse error */
   2d3e2:	e79f      	b.n	2d324 <value_to_pretty+0x44>
    switch (type) {
   2d3e4:	2cf6      	cmp	r4, #246	; 0xf6
   2d3e6:	f000 811f 	beq.w	2d628 <value_to_pretty+0x348>
   2d3ea:	2cf7      	cmp	r4, #247	; 0xf7
   2d3ec:	f040 813e 	bne.w	2d66c <value_to_pretty+0x38c>
        if (fprintf(out, "undefined") < 0)
   2d3f0:	4982      	ldr	r1, [pc, #520]	; (2d5fc <value_to_pretty+0x31c>)
   2d3f2:	f002 fa3d 	bl	2f870 <fprintf>
   2d3f6:	2800      	cmp	r0, #0
   2d3f8:	da90      	bge.n	2d31c <value_to_pretty+0x3c>
            return CborErrorIO;
   2d3fa:	2604      	movs	r6, #4
   2d3fc:	e792      	b.n	2d324 <value_to_pretty+0x44>
        if (fprintf(out, type == CborArrayType ? "[" : "{") < 0)
   2d3fe:	4980      	ldr	r1, [pc, #512]	; (2d600 <value_to_pretty+0x320>)
   2d400:	e7d8      	b.n	2d3b4 <value_to_pretty+0xd4>
        err = container_to_pretty(out, &recursed, type);
   2d402:	4622      	mov	r2, r4
   2d404:	a902      	add	r1, sp, #8
   2d406:	4638      	mov	r0, r7
   2d408:	f000 f946 	bl	2d698 <container_to_pretty>
        if (err) {
   2d40c:	4606      	mov	r6, r0
   2d40e:	b110      	cbz	r0, 2d416 <value_to_pretty+0x136>
            it->offset = recursed.offset;
   2d410:	9b03      	ldr	r3, [sp, #12]
   2d412:	606b      	str	r3, [r5, #4]
            return err;       /* parse error */
   2d414:	e786      	b.n	2d324 <value_to_pretty+0x44>
        err = cbor_value_leave_container(it, &recursed);
   2d416:	a902      	add	r1, sp, #8
   2d418:	4628      	mov	r0, r5
   2d41a:	f7ff fdcb 	bl	2cfb4 <cbor_value_leave_container>
        if (err)
   2d41e:	4606      	mov	r6, r0
   2d420:	2800      	cmp	r0, #0
   2d422:	f47f af7f 	bne.w	2d324 <value_to_pretty+0x44>
        if (fprintf(out, type == CborArrayType ? "]" : "}") < 0)
   2d426:	2c80      	cmp	r4, #128	; 0x80
   2d428:	d008      	beq.n	2d43c <value_to_pretty+0x15c>
   2d42a:	4976      	ldr	r1, [pc, #472]	; (2d604 <value_to_pretty+0x324>)
   2d42c:	4638      	mov	r0, r7
   2d42e:	f002 fa1f 	bl	2f870 <fprintf>
   2d432:	2800      	cmp	r0, #0
   2d434:	f6bf af76 	bge.w	2d324 <value_to_pretty+0x44>
            return CborErrorIO;
   2d438:	2604      	movs	r6, #4
   2d43a:	e773      	b.n	2d324 <value_to_pretty+0x44>
        if (fprintf(out, type == CborArrayType ? "]" : "}") < 0)
   2d43c:	4972      	ldr	r1, [pc, #456]	; (2d608 <value_to_pretty+0x328>)
   2d43e:	e7f5      	b.n	2d42c <value_to_pretty+0x14c>
            return CborErrorIO;
   2d440:	2604      	movs	r6, #4
   2d442:	e76f      	b.n	2d324 <value_to_pretty+0x44>
                return CborErrorIO;
   2d444:	2604      	movs	r6, #4
   2d446:	e76d      	b.n	2d324 <value_to_pretty+0x44>
    assert(cbor_value_is_integer(value));
   2d448:	f7de fece 	bl	c1e8 <hal_debugger_connected>
   2d44c:	b100      	cbz	r0, 2d450 <value_to_pretty+0x170>
   2d44e:	be01      	bkpt	0x0001
   2d450:	2300      	movs	r3, #0
   2d452:	461a      	mov	r2, r3
   2d454:	4619      	mov	r1, r3
   2d456:	4618      	mov	r0, r3
   2d458:	f7df fb7a 	bl	cb50 <__assert_func>
                _cbor_value_decode_int64_internal(value) : value->extra;
   2d45c:	4608      	mov	r0, r1
   2d45e:	f7ff fc88 	bl	2cd72 <_cbor_value_decode_int64_internal>
   2d462:	4683      	mov	fp, r0
   2d464:	468c      	mov	ip, r1
   2d466:	e796      	b.n	2d396 <value_to_pretty+0xb6>
{ return cbor_value_is_integer(value) && (value->flags & CborIteratorFlag_NegativeInteger) == 0; }
   2d468:	2100      	movs	r1, #0
        if (cbor_value_is_unsigned_integer(it)) {
   2d46a:	b989      	cbnz	r1, 2d490 <value_to_pretty+0x1b0>
            if (++val) {                /* unsigned overflow may happen */
   2d46c:	f11b 0201 	adds.w	r2, fp, #1
   2d470:	f14c 0300 	adc.w	r3, ip, #0
   2d474:	ea52 0103 	orrs.w	r1, r2, r3
   2d478:	d014      	beq.n	2d4a4 <value_to_pretty+0x1c4>
                if (fprintf(out, "-%" PRIu64, val) < 0)
   2d47a:	4964      	ldr	r1, [pc, #400]	; (2d60c <value_to_pretty+0x32c>)
   2d47c:	4638      	mov	r0, r7
   2d47e:	f002 f9f7 	bl	2f870 <fprintf>
   2d482:	2800      	cmp	r0, #0
   2d484:	f6bf af4a 	bge.w	2d31c <value_to_pretty+0x3c>
        if (fprintf(out, val ? "true" : "false") < 0)
   2d488:	2604      	movs	r6, #4
   2d48a:	e74b      	b.n	2d324 <value_to_pretty+0x44>
   2d48c:	2101      	movs	r1, #1
   2d48e:	e7ec      	b.n	2d46a <value_to_pretty+0x18a>
            if (fprintf(out, "%" PRIu64, val) < 0)
   2d490:	465a      	mov	r2, fp
   2d492:	4663      	mov	r3, ip
   2d494:	495e      	ldr	r1, [pc, #376]	; (2d610 <value_to_pretty+0x330>)
   2d496:	4638      	mov	r0, r7
   2d498:	f002 f9ea 	bl	2f870 <fprintf>
   2d49c:	2800      	cmp	r0, #0
   2d49e:	f6bf af3d 	bge.w	2d31c <value_to_pretty+0x3c>
   2d4a2:	e7f1      	b.n	2d488 <value_to_pretty+0x1a8>
                if (fprintf(out, "-18446744073709551616") < 0)
   2d4a4:	495b      	ldr	r1, [pc, #364]	; (2d614 <value_to_pretty+0x334>)
   2d4a6:	4638      	mov	r0, r7
   2d4a8:	f002 f9e2 	bl	2f870 <fprintf>
   2d4ac:	2800      	cmp	r0, #0
   2d4ae:	f6bf af35 	bge.w	2d31c <value_to_pretty+0x3c>
   2d4b2:	e7e9      	b.n	2d488 <value_to_pretty+0x1a8>
        size_t n = 0;
   2d4b4:	2300      	movs	r3, #0
   2d4b6:	9301      	str	r3, [sp, #4]
{ return value->type == CborByteStringType; }
   2d4b8:	7b8b      	ldrb	r3, [r1, #14]
    assert(cbor_value_is_byte_string(value));
   2d4ba:	2b40      	cmp	r3, #64	; 0x40
   2d4bc:	d118      	bne.n	2d4f0 <value_to_pretty+0x210>
    return _cbor_value_dup_string(value, (void **)buffer, buflen, next);
   2d4be:	460b      	mov	r3, r1
   2d4c0:	aa01      	add	r2, sp, #4
   2d4c2:	a902      	add	r1, sp, #8
   2d4c4:	4628      	mov	r0, r5
   2d4c6:	f000 f91d 	bl	2d704 <_cbor_value_dup_string>
        if (err)
   2d4ca:	4606      	mov	r6, r0
   2d4cc:	2800      	cmp	r0, #0
   2d4ce:	f47f af29 	bne.w	2d324 <value_to_pretty+0x44>
        bool failed = fprintf(out, "h'") < 0 || hexDump(out, buffer, n) < 0 || fprintf(out, "'") < 0;
   2d4d2:	4951      	ldr	r1, [pc, #324]	; (2d618 <value_to_pretty+0x338>)
   2d4d4:	4638      	mov	r0, r7
   2d4d6:	f002 f9cb 	bl	2f870 <fprintf>
   2d4da:	2800      	cmp	r0, #0
   2d4dc:	da12      	bge.n	2d504 <value_to_pretty+0x224>
   2d4de:	2401      	movs	r4, #1
        free(buffer);
   2d4e0:	9802      	ldr	r0, [sp, #8]
   2d4e2:	f001 fe6b 	bl	2f1bc <free>
        return failed ? CborErrorIO : CborNoError;
   2d4e6:	2c00      	cmp	r4, #0
   2d4e8:	f43f af1c 	beq.w	2d324 <value_to_pretty+0x44>
   2d4ec:	2604      	movs	r6, #4
   2d4ee:	e719      	b.n	2d324 <value_to_pretty+0x44>
    assert(cbor_value_is_byte_string(value));
   2d4f0:	f7de fe7a 	bl	c1e8 <hal_debugger_connected>
   2d4f4:	b100      	cbz	r0, 2d4f8 <value_to_pretty+0x218>
   2d4f6:	be01      	bkpt	0x0001
   2d4f8:	2300      	movs	r3, #0
   2d4fa:	461a      	mov	r2, r3
   2d4fc:	4619      	mov	r1, r3
   2d4fe:	4618      	mov	r0, r3
   2d500:	f7df fb26 	bl	cb50 <__assert_func>
        bool failed = fprintf(out, "h'") < 0 || hexDump(out, buffer, n) < 0 || fprintf(out, "'") < 0;
   2d504:	9a01      	ldr	r2, [sp, #4]
   2d506:	9902      	ldr	r1, [sp, #8]
   2d508:	4638      	mov	r0, r7
   2d50a:	f7ff fdfb 	bl	2d104 <hexDump>
   2d50e:	2800      	cmp	r0, #0
   2d510:	da01      	bge.n	2d516 <value_to_pretty+0x236>
   2d512:	2401      	movs	r4, #1
   2d514:	e7e4      	b.n	2d4e0 <value_to_pretty+0x200>
   2d516:	4941      	ldr	r1, [pc, #260]	; (2d61c <value_to_pretty+0x33c>)
   2d518:	4638      	mov	r0, r7
   2d51a:	f002 f9a9 	bl	2f870 <fprintf>
   2d51e:	2800      	cmp	r0, #0
   2d520:	db01      	blt.n	2d526 <value_to_pretty+0x246>
   2d522:	2400      	movs	r4, #0
   2d524:	e7dc      	b.n	2d4e0 <value_to_pretty+0x200>
   2d526:	2401      	movs	r4, #1
   2d528:	e7da      	b.n	2d4e0 <value_to_pretty+0x200>
    assert(cbor_value_is_text_string(value));
   2d52a:	f7de fe5d 	bl	c1e8 <hal_debugger_connected>
   2d52e:	b100      	cbz	r0, 2d532 <value_to_pretty+0x252>
   2d530:	be01      	bkpt	0x0001
   2d532:	2300      	movs	r3, #0
   2d534:	461a      	mov	r2, r3
   2d536:	4619      	mov	r1, r3
   2d538:	4618      	mov	r0, r3
   2d53a:	f7df fb09 	bl	cb50 <__assert_func>
                      || (err = utf8EscapedDump(out, buffer, n)) != CborNoError
   2d53e:	9a01      	ldr	r2, [sp, #4]
   2d540:	9902      	ldr	r1, [sp, #8]
   2d542:	4638      	mov	r0, r7
   2d544:	f7ff fdf2 	bl	2d12c <utf8EscapedDump>
   2d548:	4606      	mov	r6, r0
   2d54a:	b108      	cbz	r0, 2d550 <value_to_pretty+0x270>
                      || fprintf(out, "\"") < 0;
   2d54c:	2301      	movs	r3, #1
   2d54e:	e70a      	b.n	2d366 <value_to_pretty+0x86>
   2d550:	4927      	ldr	r1, [pc, #156]	; (2d5f0 <value_to_pretty+0x310>)
   2d552:	4638      	mov	r0, r7
   2d554:	f002 f98c 	bl	2f870 <fprintf>
   2d558:	2800      	cmp	r0, #0
   2d55a:	db01      	blt.n	2d560 <value_to_pretty+0x280>
   2d55c:	2300      	movs	r3, #0
   2d55e:	e702      	b.n	2d366 <value_to_pretty+0x86>
   2d560:	2301      	movs	r3, #1
   2d562:	e700      	b.n	2d366 <value_to_pretty+0x86>
{ return value->type == CborTagType; }
   2d564:	7b8b      	ldrb	r3, [r1, #14]
    assert(cbor_value_is_tag(value));
   2d566:	2bc0      	cmp	r3, #192	; 0xc0
   2d568:	d123      	bne.n	2d5b2 <value_to_pretty+0x2d2>
    return value->flags & CborIteratorFlag_IntegerValueTooLarge ?
   2d56a:	7bcb      	ldrb	r3, [r1, #15]
                _cbor_value_decode_int64_internal(value) : value->extra;
   2d56c:	f013 0f01 	tst.w	r3, #1
   2d570:	d129      	bne.n	2d5c6 <value_to_pretty+0x2e6>
   2d572:	898a      	ldrh	r2, [r1, #12]
   2d574:	2300      	movs	r3, #0
        if (fprintf(out, "%" PRIu64 "(", tag) < 0)
   2d576:	492a      	ldr	r1, [pc, #168]	; (2d620 <value_to_pretty+0x340>)
   2d578:	4638      	mov	r0, r7
   2d57a:	f002 f979 	bl	2f870 <fprintf>
   2d57e:	2800      	cmp	r0, #0
   2d580:	db27      	blt.n	2d5d2 <value_to_pretty+0x2f2>
        err = cbor_value_advance_fixed(it);
   2d582:	4628      	mov	r0, r5
   2d584:	f7ff fc4d 	bl	2ce22 <cbor_value_advance_fixed>
        if (err)
   2d588:	4606      	mov	r6, r0
   2d58a:	2800      	cmp	r0, #0
   2d58c:	f47f aeca 	bne.w	2d324 <value_to_pretty+0x44>
        err = value_to_pretty(out, it);
   2d590:	4629      	mov	r1, r5
   2d592:	4638      	mov	r0, r7
   2d594:	f7ff fea4 	bl	2d2e0 <value_to_pretty>
        if (err)
   2d598:	4606      	mov	r6, r0
   2d59a:	2800      	cmp	r0, #0
   2d59c:	f47f aec2 	bne.w	2d324 <value_to_pretty+0x44>
        if (fprintf(out, ")") < 0)
   2d5a0:	4920      	ldr	r1, [pc, #128]	; (2d624 <value_to_pretty+0x344>)
   2d5a2:	4638      	mov	r0, r7
   2d5a4:	f002 f964 	bl	2f870 <fprintf>
   2d5a8:	2800      	cmp	r0, #0
   2d5aa:	f6bf aebb 	bge.w	2d324 <value_to_pretty+0x44>
            return CborErrorIO;
   2d5ae:	2604      	movs	r6, #4
   2d5b0:	e6b8      	b.n	2d324 <value_to_pretty+0x44>
    assert(cbor_value_is_tag(value));
   2d5b2:	f7de fe19 	bl	c1e8 <hal_debugger_connected>
   2d5b6:	b100      	cbz	r0, 2d5ba <value_to_pretty+0x2da>
   2d5b8:	be01      	bkpt	0x0001
   2d5ba:	2300      	movs	r3, #0
   2d5bc:	461a      	mov	r2, r3
   2d5be:	4619      	mov	r1, r3
   2d5c0:	4618      	mov	r0, r3
   2d5c2:	f7df fac5 	bl	cb50 <__assert_func>
                _cbor_value_decode_int64_internal(value) : value->extra;
   2d5c6:	4608      	mov	r0, r1
   2d5c8:	f7ff fbd3 	bl	2cd72 <_cbor_value_decode_int64_internal>
   2d5cc:	4602      	mov	r2, r0
   2d5ce:	460b      	mov	r3, r1
   2d5d0:	e7d1      	b.n	2d576 <value_to_pretty+0x296>
            return CborErrorIO;
   2d5d2:	2604      	movs	r6, #4
   2d5d4:	e6a6      	b.n	2d324 <value_to_pretty+0x44>
    assert(cbor_value_is_simple_type(value));
   2d5d6:	f7de fe07 	bl	c1e8 <hal_debugger_connected>
   2d5da:	b100      	cbz	r0, 2d5de <value_to_pretty+0x2fe>
   2d5dc:	be01      	bkpt	0x0001
   2d5de:	2300      	movs	r3, #0
   2d5e0:	461a      	mov	r2, r3
   2d5e2:	4619      	mov	r1, r3
   2d5e4:	4618      	mov	r0, r3
   2d5e6:	f7df fab3 	bl	cb50 <__assert_func>
   2d5ea:	bf00      	nop
   2d5ec:	00032c74 	.word	0x00032c74
   2d5f0:	00032c64 	.word	0x00032c64
   2d5f4:	00032c20 	.word	0x00032c20
   2d5f8:	00032c38 	.word	0x00032c38
   2d5fc:	00032c88 	.word	0x00032c88
   2d600:	00032c1c 	.word	0x00032c1c
   2d604:	00032c24 	.word	0x00032c24
   2d608:	00031ac4 	.word	0x00031ac4
   2d60c:	00032c3c 	.word	0x00032c3c
   2d610:	000319ac 	.word	0x000319ac
   2d614:	00032c44 	.word	0x00032c44
   2d618:	00032c5c 	.word	0x00032c5c
   2d61c:	00032c60 	.word	0x00032c60
   2d620:	00032c68 	.word	0x00032c68
   2d624:	00032c70 	.word	0x00032c70
        if (fprintf(out, "null") < 0)
   2d628:	4917      	ldr	r1, [pc, #92]	; (2d688 <value_to_pretty+0x3a8>)
   2d62a:	f002 f921 	bl	2f870 <fprintf>
   2d62e:	2800      	cmp	r0, #0
   2d630:	f6bf ae74 	bge.w	2d31c <value_to_pretty+0x3c>
            return CborErrorIO;
   2d634:	2604      	movs	r6, #4
   2d636:	e675      	b.n	2d324 <value_to_pretty+0x44>
{ return value->type == CborBooleanType; }
   2d638:	7b8b      	ldrb	r3, [r1, #14]
    assert(cbor_value_is_boolean(value));
   2d63a:	2bf5      	cmp	r3, #245	; 0xf5
   2d63c:	d10a      	bne.n	2d654 <value_to_pretty+0x374>
    *result = !!value->extra;
   2d63e:	898b      	ldrh	r3, [r1, #12]
        if (fprintf(out, val ? "true" : "false") < 0)
   2d640:	b193      	cbz	r3, 2d668 <value_to_pretty+0x388>
   2d642:	4912      	ldr	r1, [pc, #72]	; (2d68c <value_to_pretty+0x3ac>)
   2d644:	4638      	mov	r0, r7
   2d646:	f002 f913 	bl	2f870 <fprintf>
   2d64a:	2800      	cmp	r0, #0
   2d64c:	f6bf ae66 	bge.w	2d31c <value_to_pretty+0x3c>
            return CborErrorIO;
   2d650:	2604      	movs	r6, #4
   2d652:	e667      	b.n	2d324 <value_to_pretty+0x44>
    assert(cbor_value_is_boolean(value));
   2d654:	f7de fdc8 	bl	c1e8 <hal_debugger_connected>
   2d658:	b100      	cbz	r0, 2d65c <value_to_pretty+0x37c>
   2d65a:	be01      	bkpt	0x0001
   2d65c:	2300      	movs	r3, #0
   2d65e:	461a      	mov	r2, r3
   2d660:	4619      	mov	r1, r3
   2d662:	4618      	mov	r0, r3
   2d664:	f7df fa74 	bl	cb50 <__assert_func>
        if (fprintf(out, val ? "true" : "false") < 0)
   2d668:	4909      	ldr	r1, [pc, #36]	; (2d690 <value_to_pretty+0x3b0>)
   2d66a:	e7eb      	b.n	2d644 <value_to_pretty+0x364>
        if (fprintf(out, "invalid") < 0)
   2d66c:	4909      	ldr	r1, [pc, #36]	; (2d694 <value_to_pretty+0x3b4>)
   2d66e:	4638      	mov	r0, r7
   2d670:	f002 f8fe 	bl	2f870 <fprintf>
   2d674:	2800      	cmp	r0, #0
   2d676:	db02      	blt.n	2d67e <value_to_pretty+0x39e>
        return CborErrorUnknownType;
   2d678:	f240 1603 	movw	r6, #259	; 0x103
   2d67c:	e652      	b.n	2d324 <value_to_pretty+0x44>
            return CborErrorIO;
   2d67e:	2604      	movs	r6, #4
   2d680:	e650      	b.n	2d324 <value_to_pretty+0x44>
            return CborErrorIO;
   2d682:	2604      	movs	r6, #4
   2d684:	e64e      	b.n	2d324 <value_to_pretty+0x44>
   2d686:	bf00      	nop
   2d688:	00032c80 	.word	0x00032c80
   2d68c:	00032c28 	.word	0x00032c28
   2d690:	00032c30 	.word	0x00032c30
   2d694:	00032c94 	.word	0x00032c94

0002d698 <container_to_pretty>:
{
   2d698:	b570      	push	{r4, r5, r6, lr}
   2d69a:	4604      	mov	r4, r0
   2d69c:	460d      	mov	r5, r1
   2d69e:	4616      	mov	r6, r2
    const char *comma = "";
   2d6a0:	4a12      	ldr	r2, [pc, #72]	; (2d6ec <container_to_pretty+0x54>)
    while (!cbor_value_at_end(it)) {
   2d6a2:	e000      	b.n	2d6a6 <container_to_pretty+0xe>
   2d6a4:	4a12      	ldr	r2, [pc, #72]	; (2d6f0 <container_to_pretty+0x58>)
{ return it->remaining == 0; }
   2d6a6:	68ab      	ldr	r3, [r5, #8]
   2d6a8:	b1e3      	cbz	r3, 2d6e4 <container_to_pretty+0x4c>
        if (fprintf(out, "%s", comma) < 0)
   2d6aa:	4912      	ldr	r1, [pc, #72]	; (2d6f4 <container_to_pretty+0x5c>)
   2d6ac:	4620      	mov	r0, r4
   2d6ae:	f002 f8df 	bl	2f870 <fprintf>
   2d6b2:	2800      	cmp	r0, #0
   2d6b4:	db15      	blt.n	2d6e2 <container_to_pretty+0x4a>
        CborError err = value_to_pretty(out, it);
   2d6b6:	4629      	mov	r1, r5
   2d6b8:	4620      	mov	r0, r4
   2d6ba:	f7ff fe11 	bl	2d2e0 <value_to_pretty>
        if (err)
   2d6be:	4603      	mov	r3, r0
   2d6c0:	b980      	cbnz	r0, 2d6e4 <container_to_pretty+0x4c>
        if (containerType == CborArrayType)
   2d6c2:	2e80      	cmp	r6, #128	; 0x80
   2d6c4:	d0ee      	beq.n	2d6a4 <container_to_pretty+0xc>
        if (fprintf(out, ": ") < 0)
   2d6c6:	490c      	ldr	r1, [pc, #48]	; (2d6f8 <container_to_pretty+0x60>)
   2d6c8:	4620      	mov	r0, r4
   2d6ca:	f002 f8d1 	bl	2f870 <fprintf>
   2d6ce:	2800      	cmp	r0, #0
   2d6d0:	db0a      	blt.n	2d6e8 <container_to_pretty+0x50>
        err = value_to_pretty(out, it);
   2d6d2:	4629      	mov	r1, r5
   2d6d4:	4620      	mov	r0, r4
   2d6d6:	f7ff fe03 	bl	2d2e0 <value_to_pretty>
        if (err)
   2d6da:	4603      	mov	r3, r0
   2d6dc:	2800      	cmp	r0, #0
   2d6de:	d0e1      	beq.n	2d6a4 <container_to_pretty+0xc>
   2d6e0:	e000      	b.n	2d6e4 <container_to_pretty+0x4c>
            return CborErrorIO;
   2d6e2:	2304      	movs	r3, #4
}
   2d6e4:	4618      	mov	r0, r3
   2d6e6:	bd70      	pop	{r4, r5, r6, pc}
            return CborErrorIO;
   2d6e8:	2304      	movs	r3, #4
   2d6ea:	e7fb      	b.n	2d6e4 <container_to_pretty+0x4c>
   2d6ec:	00032534 	.word	0x00032534
   2d6f0:	00032bf8 	.word	0x00032bf8
   2d6f4:	00032bf0 	.word	0x00032bf0
   2d6f8:	00032bf4 	.word	0x00032bf4

0002d6fc <cbor_value_to_pretty_advance>:
 * done by appending a comma to the output stream.
 *
 * \sa cbor_value_to_pretty(), cbor_value_to_json_advance()
 */
CborError cbor_value_to_pretty_advance(FILE *out, CborValue *value)
{
   2d6fc:	b508      	push	{r3, lr}
    return value_to_pretty(out, value);
   2d6fe:	f7ff fdef 	bl	2d2e0 <value_to_pretty>
}
   2d702:	bd08      	pop	{r3, pc}

0002d704 <_cbor_value_dup_string>:
 * malloc'ed block.
 *
 * \sa cbor_value_copy_byte_string(), cbor_value_dup_text_string()
 */
CborError _cbor_value_dup_string(const CborValue *value, void **buffer, size_t *buflen, CborValue *next)
{
   2d704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    assert(buffer);
   2d708:	b181      	cbz	r1, 2d72c <_cbor_value_dup_string+0x28>
   2d70a:	4606      	mov	r6, r0
   2d70c:	4614      	mov	r4, r2
   2d70e:	4698      	mov	r8, r3
   2d710:	460f      	mov	r7, r1
    assert(buflen);
   2d712:	b1aa      	cbz	r2, 2d740 <_cbor_value_dup_string+0x3c>
    *buflen = SIZE_MAX;
   2d714:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2d718:	6013      	str	r3, [r2, #0]
    CborError err = _cbor_value_copy_string(value, NULL, buflen, NULL);
   2d71a:	2300      	movs	r3, #0
   2d71c:	4619      	mov	r1, r3
   2d71e:	f7ff fc71 	bl	2d004 <_cbor_value_copy_string>
    if (err)
   2d722:	4605      	mov	r5, r0
   2d724:	b1b0      	cbz	r0, 2d754 <_cbor_value_dup_string+0x50>
    if (err) {
        free(*buffer);
        return err;
    }
    return CborNoError;
}
   2d726:	4628      	mov	r0, r5
   2d728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert(buffer);
   2d72c:	f7de fd5c 	bl	c1e8 <hal_debugger_connected>
   2d730:	b100      	cbz	r0, 2d734 <_cbor_value_dup_string+0x30>
   2d732:	be01      	bkpt	0x0001
   2d734:	2300      	movs	r3, #0
   2d736:	461a      	mov	r2, r3
   2d738:	4619      	mov	r1, r3
   2d73a:	4618      	mov	r0, r3
   2d73c:	f7df fa08 	bl	cb50 <__assert_func>
    assert(buflen);
   2d740:	f7de fd52 	bl	c1e8 <hal_debugger_connected>
   2d744:	b100      	cbz	r0, 2d748 <_cbor_value_dup_string+0x44>
   2d746:	be01      	bkpt	0x0001
   2d748:	2300      	movs	r3, #0
   2d74a:	461a      	mov	r2, r3
   2d74c:	4619      	mov	r1, r3
   2d74e:	4618      	mov	r0, r3
   2d750:	f7df f9fe 	bl	cb50 <__assert_func>
    ++*buflen;
   2d754:	6820      	ldr	r0, [r4, #0]
   2d756:	3001      	adds	r0, #1
   2d758:	6020      	str	r0, [r4, #0]
    *buffer = malloc(*buflen);
   2d75a:	f001 fcf9 	bl	2f150 <malloc>
   2d75e:	6038      	str	r0, [r7, #0]
    if (!*buffer) {
   2d760:	b160      	cbz	r0, 2d77c <_cbor_value_dup_string+0x78>
    err = _cbor_value_copy_string(value, *buffer, buflen, next);
   2d762:	4643      	mov	r3, r8
   2d764:	4622      	mov	r2, r4
   2d766:	4601      	mov	r1, r0
   2d768:	4630      	mov	r0, r6
   2d76a:	f7ff fc4b 	bl	2d004 <_cbor_value_copy_string>
    if (err) {
   2d76e:	4605      	mov	r5, r0
   2d770:	2800      	cmp	r0, #0
   2d772:	d0d8      	beq.n	2d726 <_cbor_value_dup_string+0x22>
        free(*buffer);
   2d774:	6838      	ldr	r0, [r7, #0]
   2d776:	f001 fd21 	bl	2f1bc <free>
        return err;
   2d77a:	e7d4      	b.n	2d726 <_cbor_value_dup_string+0x22>
        return CborErrorOutOfMemory;
   2d77c:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
   2d780:	e7d1      	b.n	2d726 <_cbor_value_dup_string+0x22>

0002d782 <fcb_free_sector_cnt>:
    return rc;
}

int
fcb_free_sector_cnt(struct fcb *fcb)
{
   2d782:	b538      	push	{r3, r4, r5, lr}
   2d784:	4604      	mov	r4, r0
    int i;
    struct flash_area *fa;

    fa = fcb->f_active.fe_area;
   2d786:	69c1      	ldr	r1, [r0, #28]
    for (i = 0; i < fcb->f_sector_cnt; i++) {
   2d788:	2500      	movs	r5, #0
   2d78a:	7963      	ldrb	r3, [r4, #5]
   2d78c:	42ab      	cmp	r3, r5
   2d78e:	dd08      	ble.n	2d7a2 <fcb_free_sector_cnt+0x20>
        fa = fcb_getnext_area(fcb, fa);
   2d790:	4620      	mov	r0, r4
   2d792:	f000 face 	bl	2dd32 <fcb_getnext_area>
   2d796:	4601      	mov	r1, r0
        if (fa == fcb->f_oldest) {
   2d798:	69a3      	ldr	r3, [r4, #24]
   2d79a:	4283      	cmp	r3, r0
   2d79c:	d001      	beq.n	2d7a2 <fcb_free_sector_cnt+0x20>
    for (i = 0; i < fcb->f_sector_cnt; i++) {
   2d79e:	3501      	adds	r5, #1
   2d7a0:	e7f3      	b.n	2d78a <fcb_free_sector_cnt+0x8>
            break;
        }
    }
    return i;
}
   2d7a2:	4628      	mov	r0, r5
   2d7a4:	bd38      	pop	{r3, r4, r5, pc}

0002d7a6 <fcb_is_empty>:

int
fcb_is_empty(struct fcb *fcb)
{
    return (fcb->f_active.fe_area == fcb->f_oldest &&
   2d7a6:	69c2      	ldr	r2, [r0, #28]
   2d7a8:	6983      	ldr	r3, [r0, #24]
   2d7aa:	429a      	cmp	r2, r3
   2d7ac:	d001      	beq.n	2d7b2 <fcb_is_empty+0xc>
   2d7ae:	2000      	movs	r0, #0
   2d7b0:	4770      	bx	lr
      fcb->f_active.fe_elem_off == sizeof(struct fcb_disk_area));
   2d7b2:	6a03      	ldr	r3, [r0, #32]
    return (fcb->f_active.fe_area == fcb->f_oldest &&
   2d7b4:	2b08      	cmp	r3, #8
   2d7b6:	d001      	beq.n	2d7bc <fcb_is_empty+0x16>
   2d7b8:	2000      	movs	r0, #0
   2d7ba:	4770      	bx	lr
   2d7bc:	2001      	movs	r0, #1
}
   2d7be:	4770      	bx	lr

0002d7c0 <fcb_put_len>:
 * 1 byte for lengths < 128 bytes, and 2 bytes for < 16384.
 */
int
fcb_put_len(uint8_t *buf, uint16_t len)
{
    if (len < 0x80) {
   2d7c0:	297f      	cmp	r1, #127	; 0x7f
   2d7c2:	d90a      	bls.n	2d7da <fcb_put_len+0x1a>
        buf[0] = len;
        return 1;
    } else if (len < FCB_MAX_LEN) {
   2d7c4:	f647 73fe 	movw	r3, #32766	; 0x7ffe
   2d7c8:	4299      	cmp	r1, r3
   2d7ca:	d809      	bhi.n	2d7e0 <fcb_put_len+0x20>
        buf[0] = (len & 0x7f) | 0x80;
   2d7cc:	f061 037f 	orn	r3, r1, #127	; 0x7f
   2d7d0:	7003      	strb	r3, [r0, #0]
        buf[1] = len >> 7;
   2d7d2:	09c9      	lsrs	r1, r1, #7
   2d7d4:	7041      	strb	r1, [r0, #1]
        return 2;
   2d7d6:	2002      	movs	r0, #2
   2d7d8:	4770      	bx	lr
        buf[0] = len;
   2d7da:	7001      	strb	r1, [r0, #0]
        return 1;
   2d7dc:	2001      	movs	r0, #1
   2d7de:	4770      	bx	lr
    } else {
        return FCB_ERR_ARGS;
   2d7e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }
}
   2d7e4:	4770      	bx	lr

0002d7e6 <fcb_get_len>:
int
fcb_get_len(uint8_t *buf, uint16_t *len)
{
    int rc;

    if (buf[0] & 0x80) {
   2d7e6:	7803      	ldrb	r3, [r0, #0]
   2d7e8:	f013 0f80 	tst.w	r3, #128	; 0x80
   2d7ec:	d102      	bne.n	2d7f4 <fcb_get_len+0xe>
        *len = (buf[0] & 0x7f) | (buf[1] << 7);
        rc = 2;
    } else {
        *len = buf[0];
   2d7ee:	800b      	strh	r3, [r1, #0]
        rc = 1;
   2d7f0:	2001      	movs	r0, #1
    }
    return rc;
}
   2d7f2:	4770      	bx	lr
        *len = (buf[0] & 0x7f) | (buf[1] << 7);
   2d7f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   2d7f8:	7842      	ldrb	r2, [r0, #1]
   2d7fa:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
   2d7fe:	800b      	strh	r3, [r1, #0]
        rc = 2;
   2d800:	2002      	movs	r0, #2
   2d802:	4770      	bx	lr

0002d804 <fcb_sector_hdr_init>:
/**
 * Initialize erased sector for use.
 */
int
fcb_sector_hdr_init(struct fcb *fcb, struct flash_area *fap, uint16_t id)
{
   2d804:	b500      	push	{lr}
   2d806:	b083      	sub	sp, #12
   2d808:	4603      	mov	r3, r0
   2d80a:	4608      	mov	r0, r1
    struct fcb_disk_area fda;
    int rc;

    fda.fd_magic = fcb->f_magic;
   2d80c:	6819      	ldr	r1, [r3, #0]
   2d80e:	9100      	str	r1, [sp, #0]
    fda.fd_ver = fcb->f_version;
   2d810:	791b      	ldrb	r3, [r3, #4]
   2d812:	f88d 3004 	strb.w	r3, [sp, #4]
    fda._pad = 0xff;
   2d816:	23ff      	movs	r3, #255	; 0xff
   2d818:	f88d 3005 	strb.w	r3, [sp, #5]
    fda.fd_id = id;
   2d81c:	f8ad 2006 	strh.w	r2, [sp, #6]

    rc = flash_area_write(fap, 0, &fda, sizeof(fda));
   2d820:	2308      	movs	r3, #8
   2d822:	466a      	mov	r2, sp
   2d824:	2100      	movs	r1, #0
   2d826:	f7e3 f950 	bl	10aca <flash_area_write>
    if (rc) {
   2d82a:	4603      	mov	r3, r0
   2d82c:	b918      	cbnz	r0, 2d836 <fcb_sector_hdr_init+0x32>
        return FCB_ERR_FLASH;
    }
    return 0;
}
   2d82e:	4618      	mov	r0, r3
   2d830:	b003      	add	sp, #12
   2d832:	f85d fb04 	ldr.w	pc, [sp], #4
        return FCB_ERR_FLASH;
   2d836:	f06f 0301 	mvn.w	r3, #1
   2d83a:	e7f8      	b.n	2d82e <fcb_sector_hdr_init+0x2a>

0002d83c <fcb_sector_hdr_read>:
 * Returns 1 if sector has data.
 */
int
fcb_sector_hdr_read(struct fcb *fcb, struct flash_area *fap,
  struct fcb_disk_area *fdap)
{
   2d83c:	b530      	push	{r4, r5, lr}
   2d83e:	b083      	sub	sp, #12
   2d840:	4605      	mov	r5, r0
   2d842:	4608      	mov	r0, r1
    struct fcb_disk_area fda;
    int rc;

    if (!fdap) {
   2d844:	4614      	mov	r4, r2
   2d846:	b19a      	cbz	r2, 2d870 <fcb_sector_hdr_read+0x34>
        fdap = &fda;
    }
    rc = flash_area_read_is_empty(fap, 0, fdap, sizeof(*fdap));
   2d848:	2308      	movs	r3, #8
   2d84a:	4622      	mov	r2, r4
   2d84c:	2100      	movs	r1, #0
   2d84e:	f7e3 f97f 	bl	10b50 <flash_area_read_is_empty>
    if (rc < 0) {
   2d852:	2800      	cmp	r0, #0
   2d854:	db11      	blt.n	2d87a <fcb_sector_hdr_read+0x3e>
        return FCB_ERR_FLASH;
    } else if (rc == 1) {
   2d856:	2801      	cmp	r0, #1
   2d858:	d012      	beq.n	2d880 <fcb_sector_hdr_read+0x44>
        return 0;
    }
    if (fdap->fd_magic != fcb->f_magic) {
   2d85a:	6822      	ldr	r2, [r4, #0]
   2d85c:	682b      	ldr	r3, [r5, #0]
   2d85e:	429a      	cmp	r2, r3
   2d860:	d110      	bne.n	2d884 <fcb_sector_hdr_read+0x48>
        return FCB_ERR_MAGIC;
    }
    if (fdap->fd_ver != fcb->f_version) {
   2d862:	7922      	ldrb	r2, [r4, #4]
   2d864:	792b      	ldrb	r3, [r5, #4]
   2d866:	429a      	cmp	r2, r3
   2d868:	d104      	bne.n	2d874 <fcb_sector_hdr_read+0x38>
        return FCB_ERR_VERSION;
    }
    return 1;
   2d86a:	2001      	movs	r0, #1
}
   2d86c:	b003      	add	sp, #12
   2d86e:	bd30      	pop	{r4, r5, pc}
        fdap = &fda;
   2d870:	466c      	mov	r4, sp
   2d872:	e7e9      	b.n	2d848 <fcb_sector_hdr_read+0xc>
        return FCB_ERR_VERSION;
   2d874:	f06f 0007 	mvn.w	r0, #7
   2d878:	e7f8      	b.n	2d86c <fcb_sector_hdr_read+0x30>
        return FCB_ERR_FLASH;
   2d87a:	f06f 0001 	mvn.w	r0, #1
   2d87e:	e7f5      	b.n	2d86c <fcb_sector_hdr_read+0x30>
        return 0;
   2d880:	2000      	movs	r0, #0
   2d882:	e7f3      	b.n	2d86c <fcb_sector_hdr_read+0x30>
        return FCB_ERR_MAGIC;
   2d884:	f06f 0006 	mvn.w	r0, #6
   2d888:	e7f0      	b.n	2d86c <fcb_sector_hdr_read+0x30>

0002d88a <fcb_init>:
{
   2d88a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d88e:	b085      	sub	sp, #20
    if (!fcb->f_sectors || fcb->f_sector_cnt - fcb->f_scratch_cnt < 1) {
   2d890:	6883      	ldr	r3, [r0, #8]
   2d892:	2b00      	cmp	r3, #0
   2d894:	f000 8087 	beq.w	2d9a6 <fcb_init+0x11c>
   2d898:	7943      	ldrb	r3, [r0, #5]
   2d89a:	7982      	ldrb	r2, [r0, #6]
   2d89c:	1a9b      	subs	r3, r3, r2
   2d89e:	2b00      	cmp	r3, #0
   2d8a0:	f340 8084 	ble.w	2d9ac <fcb_init+0x122>
   2d8a4:	4605      	mov	r5, r0
    struct flash_area *oldest_fap = NULL, *newest_fap = NULL;
   2d8a6:	f04f 0b00 	mov.w	fp, #0
   2d8aa:	f8cd b004 	str.w	fp, [sp, #4]
    int oldest = -1, newest = -1;
   2d8ae:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   2d8b2:	46d1      	mov	r9, sl
    int max_align = 1;
   2d8b4:	f04f 0801 	mov.w	r8, #1
    for (i = 0; i < fcb->f_sector_cnt; i++) {
   2d8b8:	465e      	mov	r6, fp
   2d8ba:	e00a      	b.n	2d8d2 <fcb_init+0x48>
            max_align = flash_area_align(fap);
   2d8bc:	4620      	mov	r0, r4
   2d8be:	f7e3 f92a 	bl	10b16 <flash_area_align>
   2d8c2:	4680      	mov	r8, r0
   2d8c4:	e012      	b.n	2d8ec <fcb_init+0x62>
            oldest = newest = fda.fd_id;
   2d8c6:	f8bd 900e 	ldrh.w	r9, [sp, #14]
            oldest_fap = newest_fap = fap;
   2d8ca:	46a3      	mov	fp, r4
   2d8cc:	9401      	str	r4, [sp, #4]
            oldest = newest = fda.fd_id;
   2d8ce:	46ca      	mov	sl, r9
    for (i = 0; i < fcb->f_sector_cnt; i++) {
   2d8d0:	3601      	adds	r6, #1
   2d8d2:	796b      	ldrb	r3, [r5, #5]
   2d8d4:	42b3      	cmp	r3, r6
   2d8d6:	dd28      	ble.n	2d92a <fcb_init+0xa0>
        fap = &fcb->f_sectors[i];
   2d8d8:	68ac      	ldr	r4, [r5, #8]
   2d8da:	eb06 0246 	add.w	r2, r6, r6, lsl #1
   2d8de:	0093      	lsls	r3, r2, #2
   2d8e0:	441c      	add	r4, r3
        align = flash_area_align(fap);
   2d8e2:	4620      	mov	r0, r4
   2d8e4:	f7e3 f917 	bl	10b16 <flash_area_align>
        if (align > max_align) {
   2d8e8:	4580      	cmp	r8, r0
   2d8ea:	dbe7      	blt.n	2d8bc <fcb_init+0x32>
        rc = fcb_sector_hdr_read(fcb, fap, &fda);
   2d8ec:	aa02      	add	r2, sp, #8
   2d8ee:	4621      	mov	r1, r4
   2d8f0:	4628      	mov	r0, r5
   2d8f2:	f7ff ffa3 	bl	2d83c <fcb_sector_hdr_read>
        if (rc < 0) {
   2d8f6:	1e07      	subs	r7, r0, #0
   2d8f8:	db3a      	blt.n	2d970 <fcb_init+0xe6>
        if (rc == 0) {
   2d8fa:	2f00      	cmp	r7, #0
   2d8fc:	d0e8      	beq.n	2d8d0 <fcb_init+0x46>
        if (oldest < 0) {
   2d8fe:	f1b9 0f00 	cmp.w	r9, #0
   2d902:	dbe0      	blt.n	2d8c6 <fcb_init+0x3c>
        if (FCB_ID_GT(fda.fd_id, newest)) {
   2d904:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   2d908:	b211      	sxth	r1, r2
   2d90a:	fa0f f38a 	sxth.w	r3, sl
   2d90e:	1acb      	subs	r3, r1, r3
   2d910:	2b00      	cmp	r3, #0
   2d912:	dd02      	ble.n	2d91a <fcb_init+0x90>
            newest = fda.fd_id;
   2d914:	4692      	mov	sl, r2
            newest_fap = fap;
   2d916:	46a3      	mov	fp, r4
   2d918:	e7da      	b.n	2d8d0 <fcb_init+0x46>
        } else if (FCB_ID_GT(oldest, fda.fd_id)) {
   2d91a:	fa0f f389 	sxth.w	r3, r9
   2d91e:	1a59      	subs	r1, r3, r1
   2d920:	2900      	cmp	r1, #0
   2d922:	ddd5      	ble.n	2d8d0 <fcb_init+0x46>
            oldest = fda.fd_id;
   2d924:	4691      	mov	r9, r2
            oldest_fap = fap;
   2d926:	9401      	str	r4, [sp, #4]
   2d928:	e7d2      	b.n	2d8d0 <fcb_init+0x46>
    if (oldest < 0) {
   2d92a:	f1b9 0f00 	cmp.w	r9, #0
   2d92e:	db23      	blt.n	2d978 <fcb_init+0xee>
    fcb->f_align = max_align;
   2d930:	fa5f f888 	uxtb.w	r8, r8
   2d934:	f885 802e 	strb.w	r8, [r5, #46]	; 0x2e
    fcb->f_oldest = oldest_fap;
   2d938:	9b01      	ldr	r3, [sp, #4]
   2d93a:	61ab      	str	r3, [r5, #24]
    fcb->f_active.fe_area = newest_fap;
   2d93c:	f8c5 b01c 	str.w	fp, [r5, #28]
    fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   2d940:	2308      	movs	r3, #8
   2d942:	622b      	str	r3, [r5, #32]
    fcb->f_active_id = newest;
   2d944:	f8a5 a02c 	strh.w	sl, [r5, #44]	; 0x2c
    assert((fcb->f_align & (fcb->f_align - 1)) == 0);
   2d948:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
   2d94c:	ea18 0707 	ands.w	r7, r8, r7
   2d950:	d11f      	bne.n	2d992 <fcb_init+0x108>
        rc = fcb_getnext_in_area(fcb, &fcb->f_active);
   2d952:	f105 011c 	add.w	r1, r5, #28
   2d956:	4628      	mov	r0, r5
   2d958:	f000 f9c4 	bl	2dce4 <fcb_getnext_in_area>
        if (rc == FCB_ERR_NOVAR) {
   2d95c:	f110 0f03 	cmn.w	r0, #3
   2d960:	d002      	beq.n	2d968 <fcb_init+0xde>
        if (rc != 0) {
   2d962:	2800      	cmp	r0, #0
   2d964:	d0f5      	beq.n	2d952 <fcb_init+0xc8>
        rc = fcb_getnext_in_area(fcb, &fcb->f_active);
   2d966:	4607      	mov	r7, r0
    os_mutex_init(&fcb->f_mtx);
   2d968:	f105 000c 	add.w	r0, r5, #12
   2d96c:	f7e0 feae 	bl	e6cc <os_mutex_init>
}
   2d970:	4638      	mov	r0, r7
   2d972:	b005      	add	sp, #20
   2d974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        oldest_fap = newest_fap = &fcb->f_sectors[0];
   2d978:	68ab      	ldr	r3, [r5, #8]
   2d97a:	9301      	str	r3, [sp, #4]
        rc = fcb_sector_hdr_init(fcb, oldest_fap, 0);
   2d97c:	2200      	movs	r2, #0
   2d97e:	469b      	mov	fp, r3
   2d980:	4619      	mov	r1, r3
   2d982:	4628      	mov	r0, r5
   2d984:	f7ff ff3e 	bl	2d804 <fcb_sector_hdr_init>
        if (rc) {
   2d988:	4682      	mov	sl, r0
   2d98a:	2800      	cmp	r0, #0
   2d98c:	d0d0      	beq.n	2d930 <fcb_init+0xa6>
            return rc;
   2d98e:	4607      	mov	r7, r0
   2d990:	e7ee      	b.n	2d970 <fcb_init+0xe6>
    assert((fcb->f_align & (fcb->f_align - 1)) == 0);
   2d992:	f7de fc29 	bl	c1e8 <hal_debugger_connected>
   2d996:	b100      	cbz	r0, 2d99a <fcb_init+0x110>
   2d998:	be01      	bkpt	0x0001
   2d99a:	2300      	movs	r3, #0
   2d99c:	461a      	mov	r2, r3
   2d99e:	4619      	mov	r1, r3
   2d9a0:	4618      	mov	r0, r3
   2d9a2:	f7df f8d5 	bl	cb50 <__assert_func>
        return FCB_ERR_ARGS;
   2d9a6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   2d9aa:	e7e1      	b.n	2d970 <fcb_init+0xe6>
   2d9ac:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   2d9b0:	e7de      	b.n	2d970 <fcb_init+0xe6>

0002d9b2 <fcb_offset_last_n>:
 * @return 0 on there are any fcbs aviable; FCB_ERR_NOVAR otherwise
 */
int
fcb_offset_last_n(struct fcb *fcb, uint8_t entries,
        struct fcb_entry *last_n_entry)
{
   2d9b2:	b5f0      	push	{r4, r5, r6, r7, lr}
   2d9b4:	b085      	sub	sp, #20
   2d9b6:	4606      	mov	r6, r0
   2d9b8:	4615      	mov	r5, r2
    struct fcb_entry loc;
    int i;

    /* assure a minimum amount of entries */
    if (!entries) {
   2d9ba:	460f      	mov	r7, r1
   2d9bc:	b901      	cbnz	r1, 2d9c0 <fcb_offset_last_n+0xe>
        entries = 1;
   2d9be:	2701      	movs	r7, #1
    }

    i = 0;
    memset(&loc, 0, sizeof(loc));
   2d9c0:	2400      	movs	r4, #0
   2d9c2:	9400      	str	r4, [sp, #0]
   2d9c4:	9401      	str	r4, [sp, #4]
   2d9c6:	9402      	str	r4, [sp, #8]
   2d9c8:	9403      	str	r4, [sp, #12]
    while (!fcb_getnext(fcb, &loc)) {
   2d9ca:	e003      	b.n	2d9d4 <fcb_offset_last_n+0x22>
        if (i == 0) {
            /* Start from the beginning of fcb entries */
            *last_n_entry = loc;
        } else if (i > (entries - 1)) {
   2d9cc:	1e7b      	subs	r3, r7, #1
   2d9ce:	42a3      	cmp	r3, r4
   2d9d0:	db0d      	blt.n	2d9ee <fcb_offset_last_n+0x3c>
            /* Update last_n_entry after n entries and keep updating */
            fcb_getnext(fcb, last_n_entry);
        }
        i++;
   2d9d2:	3401      	adds	r4, #1
    while (!fcb_getnext(fcb, &loc)) {
   2d9d4:	4669      	mov	r1, sp
   2d9d6:	4630      	mov	r0, r6
   2d9d8:	f000 f9fa 	bl	2ddd0 <fcb_getnext>
   2d9dc:	b960      	cbnz	r0, 2d9f8 <fcb_offset_last_n+0x46>
        if (i == 0) {
   2d9de:	2c00      	cmp	r4, #0
   2d9e0:	d1f4      	bne.n	2d9cc <fcb_offset_last_n+0x1a>
            *last_n_entry = loc;
   2d9e2:	ab04      	add	r3, sp, #16
   2d9e4:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
   2d9e8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
   2d9ec:	e7f1      	b.n	2d9d2 <fcb_offset_last_n+0x20>
            fcb_getnext(fcb, last_n_entry);
   2d9ee:	4629      	mov	r1, r5
   2d9f0:	4630      	mov	r0, r6
   2d9f2:	f000 f9ed 	bl	2ddd0 <fcb_getnext>
   2d9f6:	e7ec      	b.n	2d9d2 <fcb_offset_last_n+0x20>
    }

    return (i == 0) ? FCB_ERR_NOVAR : 0;
   2d9f8:	b114      	cbz	r4, 2da00 <fcb_offset_last_n+0x4e>
   2d9fa:	2000      	movs	r0, #0
}
   2d9fc:	b005      	add	sp, #20
   2d9fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (i == 0) ? FCB_ERR_NOVAR : 0;
   2da00:	f06f 0002 	mvn.w	r0, #2
   2da04:	e7fa      	b.n	2d9fc <fcb_offset_last_n+0x4a>

0002da06 <fcb_clear>:
 * @param fcb
 * @return 0 on success; non-zero on failure
 */
int
fcb_clear(struct fcb *fcb)
{
   2da06:	b538      	push	{r3, r4, r5, lr}
   2da08:	4604      	mov	r4, r0
    int rc;

    rc = 0;
   2da0a:	2500      	movs	r5, #0
    while (!fcb_is_empty(fcb)) {
   2da0c:	4620      	mov	r0, r4
   2da0e:	f7ff feca 	bl	2d7a6 <fcb_is_empty>
   2da12:	b928      	cbnz	r0, 2da20 <fcb_clear+0x1a>
        rc = fcb_rotate(fcb);
   2da14:	4620      	mov	r0, r4
   2da16:	f000 f9f5 	bl	2de04 <fcb_rotate>
        if (rc) {
   2da1a:	4605      	mov	r5, r0
   2da1c:	2800      	cmp	r0, #0
   2da1e:	d0f5      	beq.n	2da0c <fcb_clear+0x6>
            break;
        }
    }
    return rc;
}
   2da20:	4628      	mov	r0, r5
   2da22:	bd38      	pop	{r3, r4, r5, pc}

0002da24 <fcb_new_area>:
#include "fcb/fcb.h"
#include "fcb_priv.h"

static struct flash_area *
fcb_new_area(struct fcb *fcb, int cnt)
{
   2da24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2da26:	4605      	mov	r5, r0
   2da28:	460f      	mov	r7, r1
    struct flash_area *rfa;
    int i;

    rfa = NULL;
    i = 0;
    fa = fcb->f_active.fe_area;
   2da2a:	69c1      	ldr	r1, [r0, #28]
    i = 0;
   2da2c:	2400      	movs	r4, #0
    rfa = NULL;
   2da2e:	4626      	mov	r6, r4
   2da30:	e006      	b.n	2da40 <fcb_new_area+0x1c>
    do {
        fa = fcb_getnext_area(fcb, fa);
        if (!rfa) {
            rfa = fa;
        }
        if (fa == fcb->f_oldest) {
   2da32:	69ab      	ldr	r3, [r5, #24]
   2da34:	428b      	cmp	r3, r1
   2da36:	d00b      	beq.n	2da50 <fcb_new_area+0x2c>
            return NULL;
        }
    } while (i++ < cnt);
   2da38:	1c63      	adds	r3, r4, #1
   2da3a:	42bc      	cmp	r4, r7
   2da3c:	da09      	bge.n	2da52 <fcb_new_area+0x2e>
   2da3e:	461c      	mov	r4, r3
        fa = fcb_getnext_area(fcb, fa);
   2da40:	4628      	mov	r0, r5
   2da42:	f000 f976 	bl	2dd32 <fcb_getnext_area>
   2da46:	4601      	mov	r1, r0
        if (!rfa) {
   2da48:	2e00      	cmp	r6, #0
   2da4a:	d1f2      	bne.n	2da32 <fcb_new_area+0xe>
            rfa = fa;
   2da4c:	4606      	mov	r6, r0
   2da4e:	e7f0      	b.n	2da32 <fcb_new_area+0xe>
            return NULL;
   2da50:	2600      	movs	r6, #0
    return rfa;
}
   2da52:	4630      	mov	r0, r6
   2da54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002da56 <fcb_append_to_scratch>:
/*
 * Take one of the scratch blocks into use, if at all possible.
 */
int
fcb_append_to_scratch(struct fcb *fcb)
{
   2da56:	b538      	push	{r3, r4, r5, lr}
   2da58:	4604      	mov	r4, r0
    struct flash_area *fa;
    int rc;

    fa = fcb_new_area(fcb, 0);
   2da5a:	2100      	movs	r1, #0
   2da5c:	f7ff ffe2 	bl	2da24 <fcb_new_area>
    if (!fa) {
   2da60:	b188      	cbz	r0, 2da86 <fcb_append_to_scratch+0x30>
   2da62:	4605      	mov	r5, r0
        return FCB_ERR_NOSPACE;
    }
    rc = fcb_sector_hdr_init(fcb, fa, fcb->f_active_id + 1);
   2da64:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
   2da66:	3201      	adds	r2, #1
   2da68:	b292      	uxth	r2, r2
   2da6a:	4601      	mov	r1, r0
   2da6c:	4620      	mov	r0, r4
   2da6e:	f7ff fec9 	bl	2d804 <fcb_sector_hdr_init>
    if (rc) {
   2da72:	4602      	mov	r2, r0
   2da74:	b928      	cbnz	r0, 2da82 <fcb_append_to_scratch+0x2c>
        return rc;
    }
    fcb->f_active.fe_area = fa;
   2da76:	61e5      	str	r5, [r4, #28]
    fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   2da78:	2308      	movs	r3, #8
   2da7a:	6223      	str	r3, [r4, #32]
    fcb->f_active_id++;
   2da7c:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
   2da7e:	3301      	adds	r3, #1
   2da80:	85a3      	strh	r3, [r4, #44]	; 0x2c
    return FCB_OK;
}
   2da82:	4610      	mov	r0, r2
   2da84:	bd38      	pop	{r3, r4, r5, pc}
        return FCB_ERR_NOSPACE;
   2da86:	f06f 0203 	mvn.w	r2, #3
   2da8a:	e7fa      	b.n	2da82 <fcb_append_to_scratch+0x2c>

0002da8c <fcb_append>:

int
fcb_append(struct fcb *fcb, uint16_t len, struct fcb_entry *append_loc)
{
   2da8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2da90:	b082      	sub	sp, #8
   2da92:	4605      	mov	r5, r0
   2da94:	460c      	mov	r4, r1
   2da96:	4617      	mov	r7, r2
    struct flash_area *fa;
    uint8_t tmp_str[2];
    int cnt;
    int rc;

    cnt = fcb_put_len(tmp_str, len);
   2da98:	a801      	add	r0, sp, #4
   2da9a:	f7ff fe91 	bl	2d7c0 <fcb_put_len>
    if (cnt < 0) {
   2da9e:	1e06      	subs	r6, r0, #0
   2daa0:	db58      	blt.n	2db54 <fcb_append+0xc8>
int fcb_get_len(uint8_t *buf, uint16_t *len);

static inline int
fcb_len_in_flash(struct fcb *fcb, uint16_t len)
{
    if (fcb->f_align <= 1) {
   2daa2:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   2daa6:	2b01      	cmp	r3, #1
   2daa8:	d933      	bls.n	2db12 <fcb_append+0x86>
        return len;
    }
    return (len + (fcb->f_align - 1)) & ~(fcb->f_align - 1);
   2daaa:	1e5a      	subs	r2, r3, #1
   2daac:	fa12 f686 	uxtah	r6, r2, r6
   2dab0:	425a      	negs	r2, r3
   2dab2:	4016      	ands	r6, r2
    if (fcb->f_align <= 1) {
   2dab4:	2b01      	cmp	r3, #1
   2dab6:	d903      	bls.n	2dac0 <fcb_append+0x34>
    return (len + (fcb->f_align - 1)) & ~(fcb->f_align - 1);
   2dab8:	1e5a      	subs	r2, r3, #1
   2daba:	4414      	add	r4, r2
   2dabc:	425a      	negs	r2, r3
   2dabe:	4014      	ands	r4, r2
        return cnt;
    }
    cnt = fcb_len_in_flash(fcb, cnt);
    len = fcb_len_in_flash(fcb, len) + fcb_len_in_flash(fcb, FCB_CRC_SZ);
   2dac0:	b2a2      	uxth	r2, r4
    if (fcb->f_align <= 1) {
   2dac2:	2b01      	cmp	r3, #1
   2dac4:	d927      	bls.n	2db16 <fcb_append+0x8a>
    return (len + (fcb->f_align - 1)) & ~(fcb->f_align - 1);
   2dac6:	425c      	negs	r4, r3
   2dac8:	401c      	ands	r4, r3
   2daca:	4414      	add	r4, r2
   2dacc:	b2a4      	uxth	r4, r4

    rc = os_mutex_pend(&fcb->f_mtx, OS_WAIT_FOREVER);
   2dace:	f105 080c 	add.w	r8, r5, #12
   2dad2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2dad6:	4640      	mov	r0, r8
   2dad8:	f7e0 fe62 	bl	e7a0 <os_mutex_pend>
    if (rc && rc != OS_NOT_STARTED) {
   2dadc:	b108      	cbz	r0, 2dae2 <fcb_append+0x56>
   2dade:	2809      	cmp	r0, #9
   2dae0:	d14f      	bne.n	2db82 <fcb_append+0xf6>
        return FCB_ERR_ARGS;
    }
    active = &fcb->f_active;
    if (active->fe_elem_off + len + cnt > active->fe_area->fa_size) {
   2dae2:	6a2b      	ldr	r3, [r5, #32]
   2dae4:	4423      	add	r3, r4
   2dae6:	46b1      	mov	r9, r6
   2dae8:	441e      	add	r6, r3
   2daea:	69eb      	ldr	r3, [r5, #28]
   2daec:	689b      	ldr	r3, [r3, #8]
   2daee:	429e      	cmp	r6, r3
   2daf0:	d923      	bls.n	2db3a <fcb_append+0xae>
        fa = fcb_new_area(fcb, fcb->f_scratch_cnt);
   2daf2:	79a9      	ldrb	r1, [r5, #6]
   2daf4:	4628      	mov	r0, r5
   2daf6:	f7ff ff95 	bl	2da24 <fcb_new_area>
        if (!fa || (fa->fa_size <
   2dafa:	4682      	mov	sl, r0
   2dafc:	2800      	cmp	r0, #0
   2dafe:	d03d      	beq.n	2db7c <fcb_append+0xf0>
   2db00:	6882      	ldr	r2, [r0, #8]
            sizeof(struct fcb_disk_area) + len + cnt)) {
   2db02:	eb04 0309 	add.w	r3, r4, r9
   2db06:	3308      	adds	r3, #8
        if (!fa || (fa->fa_size <
   2db08:	429a      	cmp	r2, r3
   2db0a:	d206      	bcs.n	2db1a <fcb_append+0x8e>
            rc = FCB_ERR_NOSPACE;
   2db0c:	f06f 0603 	mvn.w	r6, #3
   2db10:	e01d      	b.n	2db4e <fcb_append+0xc2>
   2db12:	b2b6      	uxth	r6, r6
   2db14:	e7ce      	b.n	2dab4 <fcb_append+0x28>
        return len;
   2db16:	2401      	movs	r4, #1
   2db18:	e7d7      	b.n	2daca <fcb_append+0x3e>
            goto err;
        }
        rc = fcb_sector_hdr_init(fcb, fa, fcb->f_active_id + 1);
   2db1a:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
   2db1c:	3201      	adds	r2, #1
   2db1e:	b292      	uxth	r2, r2
   2db20:	4601      	mov	r1, r0
   2db22:	4628      	mov	r0, r5
   2db24:	f7ff fe6e 	bl	2d804 <fcb_sector_hdr_init>
        if (rc) {
   2db28:	4606      	mov	r6, r0
   2db2a:	b980      	cbnz	r0, 2db4e <fcb_append+0xc2>
            goto err;
        }
        fcb->f_active.fe_area = fa;
   2db2c:	f8c5 a01c 	str.w	sl, [r5, #28]
        fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   2db30:	2308      	movs	r3, #8
   2db32:	622b      	str	r3, [r5, #32]
        fcb->f_active_id++;
   2db34:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
   2db36:	3301      	adds	r3, #1
   2db38:	85ab      	strh	r3, [r5, #44]	; 0x2c
    }

    rc = flash_area_write(active->fe_area, active->fe_elem_off, tmp_str, cnt);
   2db3a:	464b      	mov	r3, r9
   2db3c:	aa01      	add	r2, sp, #4
   2db3e:	6a29      	ldr	r1, [r5, #32]
   2db40:	69e8      	ldr	r0, [r5, #28]
   2db42:	f7e2 ffc2 	bl	10aca <flash_area_write>
    if (rc) {
   2db46:	4606      	mov	r6, r0
   2db48:	b140      	cbz	r0, 2db5c <fcb_append+0xd0>
        rc = FCB_ERR_FLASH;
   2db4a:	f06f 0601 	mvn.w	r6, #1

    os_mutex_release(&fcb->f_mtx);

    return FCB_OK;
err:
    os_mutex_release(&fcb->f_mtx);
   2db4e:	4640      	mov	r0, r8
   2db50:	f7e0 fdc6 	bl	e6e0 <os_mutex_release>
    return rc;
}
   2db54:	4630      	mov	r0, r6
   2db56:	b002      	add	sp, #8
   2db58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    append_loc->fe_area = active->fe_area;
   2db5c:	69eb      	ldr	r3, [r5, #28]
   2db5e:	603b      	str	r3, [r7, #0]
    append_loc->fe_elem_off = active->fe_elem_off;
   2db60:	6a2b      	ldr	r3, [r5, #32]
   2db62:	607b      	str	r3, [r7, #4]
    append_loc->fe_data_off = active->fe_elem_off + cnt;
   2db64:	6a2b      	ldr	r3, [r5, #32]
   2db66:	444b      	add	r3, r9
   2db68:	60bb      	str	r3, [r7, #8]
    active->fe_elem_off = append_loc->fe_data_off + len;
   2db6a:	4423      	add	r3, r4
   2db6c:	622b      	str	r3, [r5, #32]
    active->fe_data_off = append_loc->fe_data_off;
   2db6e:	68bb      	ldr	r3, [r7, #8]
   2db70:	626b      	str	r3, [r5, #36]	; 0x24
    active->fe_data_len = len;
   2db72:	852c      	strh	r4, [r5, #40]	; 0x28
    os_mutex_release(&fcb->f_mtx);
   2db74:	4640      	mov	r0, r8
   2db76:	f7e0 fdb3 	bl	e6e0 <os_mutex_release>
    return FCB_OK;
   2db7a:	e7eb      	b.n	2db54 <fcb_append+0xc8>
            rc = FCB_ERR_NOSPACE;
   2db7c:	f06f 0603 	mvn.w	r6, #3
   2db80:	e7e5      	b.n	2db4e <fcb_append+0xc2>
        return FCB_ERR_ARGS;
   2db82:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   2db86:	e7e5      	b.n	2db54 <fcb_append+0xc8>

0002db88 <fcb_append_finish>:

int
fcb_append_finish(struct fcb *fcb, struct fcb_entry *loc)
{
   2db88:	b530      	push	{r4, r5, lr}
   2db8a:	b083      	sub	sp, #12
   2db8c:	4605      	mov	r5, r0
   2db8e:	460c      	mov	r4, r1
    int rc;
    uint8_t crc8;
    uint32_t off;

    rc = fcb_elem_crc8(fcb, loc, &crc8);
   2db90:	f10d 0207 	add.w	r2, sp, #7
   2db94:	f000 f81b 	bl	2dbce <fcb_elem_crc8>
    if (rc) {
   2db98:	4603      	mov	r3, r0
   2db9a:	b990      	cbnz	r0, 2dbc2 <fcb_append_finish+0x3a>
        return rc;
    }
    off = loc->fe_data_off + fcb_len_in_flash(fcb, loc->fe_data_len);
   2db9c:	68a0      	ldr	r0, [r4, #8]
   2db9e:	89a1      	ldrh	r1, [r4, #12]
    if (fcb->f_align <= 1) {
   2dba0:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   2dba4:	2b01      	cmp	r3, #1
   2dba6:	d903      	bls.n	2dbb0 <fcb_append_finish+0x28>
    return (len + (fcb->f_align - 1)) & ~(fcb->f_align - 1);
   2dba8:	1e5a      	subs	r2, r3, #1
   2dbaa:	4411      	add	r1, r2
   2dbac:	425b      	negs	r3, r3
   2dbae:	4019      	ands	r1, r3

    rc = flash_area_write(loc->fe_area, off, &crc8, sizeof(crc8));
   2dbb0:	2301      	movs	r3, #1
   2dbb2:	f10d 0207 	add.w	r2, sp, #7
   2dbb6:	4401      	add	r1, r0
   2dbb8:	6820      	ldr	r0, [r4, #0]
   2dbba:	f7e2 ff86 	bl	10aca <flash_area_write>
    if (rc) {
   2dbbe:	4603      	mov	r3, r0
   2dbc0:	b910      	cbnz	r0, 2dbc8 <fcb_append_finish+0x40>
        return FCB_ERR_FLASH;
    }
    return 0;
}
   2dbc2:	4618      	mov	r0, r3
   2dbc4:	b003      	add	sp, #12
   2dbc6:	bd30      	pop	{r4, r5, pc}
        return FCB_ERR_FLASH;
   2dbc8:	f06f 0301 	mvn.w	r3, #1
   2dbcc:	e7f9      	b.n	2dbc2 <fcb_append_finish+0x3a>

0002dbce <fcb_elem_crc8>:
 * Given offset in flash area, fill in rest of the fcb_entry, and crc8 over
 * the data.
 */
int
fcb_elem_crc8(struct fcb *fcb, struct fcb_entry *loc, uint8_t *c8p)
{
   2dbce:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2dbd2:	b08b      	sub	sp, #44	; 0x2c
   2dbd4:	460f      	mov	r7, r1
    uint16_t len;
    uint32_t off;
    uint32_t end;
    int rc;

    if (loc->fe_elem_off + 2 > loc->fe_area->fa_size) {
   2dbd6:	6849      	ldr	r1, [r1, #4]
   2dbd8:	1c8d      	adds	r5, r1, #2
   2dbda:	683c      	ldr	r4, [r7, #0]
   2dbdc:	68a3      	ldr	r3, [r4, #8]
   2dbde:	429d      	cmp	r5, r3
   2dbe0:	d848      	bhi.n	2dc74 <fcb_elem_crc8+0xa6>
   2dbe2:	4691      	mov	r9, r2
   2dbe4:	4605      	mov	r5, r0
        return FCB_ERR_NOVAR;
    }
    rc = flash_area_read_is_empty(loc->fe_area, loc->fe_elem_off, tmp_str, 2);
   2dbe6:	2302      	movs	r3, #2
   2dbe8:	aa02      	add	r2, sp, #8
   2dbea:	4620      	mov	r0, r4
   2dbec:	f7e2 ffb0 	bl	10b50 <flash_area_read_is_empty>
    if (rc < 0) {
   2dbf0:	2800      	cmp	r0, #0
   2dbf2:	db42      	blt.n	2dc7a <fcb_elem_crc8+0xac>
        return FCB_ERR_FLASH;
    } else if (rc == 1) {
   2dbf4:	2801      	cmp	r0, #1
   2dbf6:	d043      	beq.n	2dc80 <fcb_elem_crc8+0xb2>
        return FCB_ERR_NOVAR;
    }

    cnt = fcb_get_len(tmp_str, &len);
   2dbf8:	f10d 0106 	add.w	r1, sp, #6
   2dbfc:	a802      	add	r0, sp, #8
   2dbfe:	f7ff fdf2 	bl	2d7e6 <fcb_get_len>
   2dc02:	4604      	mov	r4, r0
    loc->fe_data_off = loc->fe_elem_off + fcb_len_in_flash(fcb, cnt);
   2dc04:	6879      	ldr	r1, [r7, #4]
    if (fcb->f_align <= 1) {
   2dc06:	f895 202e 	ldrb.w	r2, [r5, #46]	; 0x2e
   2dc0a:	2a01      	cmp	r2, #1
   2dc0c:	d915      	bls.n	2dc3a <fcb_elem_crc8+0x6c>
    return (len + (fcb->f_align - 1)) & ~(fcb->f_align - 1);
   2dc0e:	1e53      	subs	r3, r2, #1
   2dc10:	fa13 f380 	uxtah	r3, r3, r0
   2dc14:	4252      	negs	r2, r2
   2dc16:	4013      	ands	r3, r2
   2dc18:	440b      	add	r3, r1
   2dc1a:	60bb      	str	r3, [r7, #8]
    loc->fe_data_len = len;
   2dc1c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   2dc20:	81bb      	strh	r3, [r7, #12]

    crc8 = crc8_init();
   2dc22:	f002 fa08 	bl	30036 <crc8_init>
    crc8 = crc8_calc(crc8, tmp_str, cnt);
   2dc26:	4622      	mov	r2, r4
   2dc28:	a902      	add	r1, sp, #8
   2dc2a:	f002 fa07 	bl	3003c <crc8_calc>
   2dc2e:	4680      	mov	r8, r0

    off = loc->fe_data_off;
   2dc30:	68bd      	ldr	r5, [r7, #8]
    end = loc->fe_data_off + len;
   2dc32:	f8bd 6006 	ldrh.w	r6, [sp, #6]
   2dc36:	442e      	add	r6, r5
    for (; off < end; off += blk_sz) {
   2dc38:	e00f      	b.n	2dc5a <fcb_elem_crc8+0x8c>
   2dc3a:	b283      	uxth	r3, r0
   2dc3c:	e7ec      	b.n	2dc18 <fcb_elem_crc8+0x4a>
        blk_sz = end - off;
        if (blk_sz > sizeof(tmp_str)) {
            blk_sz = sizeof(tmp_str);
        }

        rc = flash_area_read(loc->fe_area, off, tmp_str, blk_sz);
   2dc3e:	4623      	mov	r3, r4
   2dc40:	aa02      	add	r2, sp, #8
   2dc42:	4629      	mov	r1, r5
   2dc44:	6838      	ldr	r0, [r7, #0]
   2dc46:	f7e2 ff2d 	bl	10aa4 <flash_area_read>
        if (rc) {
   2dc4a:	b9e0      	cbnz	r0, 2dc86 <fcb_elem_crc8+0xb8>
            return FCB_ERR_FLASH;
        }
        crc8 = crc8_calc(crc8, tmp_str, blk_sz);
   2dc4c:	4622      	mov	r2, r4
   2dc4e:	a902      	add	r1, sp, #8
   2dc50:	4640      	mov	r0, r8
   2dc52:	f002 f9f3 	bl	3003c <crc8_calc>
   2dc56:	4680      	mov	r8, r0
    for (; off < end; off += blk_sz) {
   2dc58:	4425      	add	r5, r4
   2dc5a:	42b5      	cmp	r5, r6
   2dc5c:	d204      	bcs.n	2dc68 <fcb_elem_crc8+0x9a>
        blk_sz = end - off;
   2dc5e:	1b74      	subs	r4, r6, r5
        if (blk_sz > sizeof(tmp_str)) {
   2dc60:	2c20      	cmp	r4, #32
   2dc62:	d9ec      	bls.n	2dc3e <fcb_elem_crc8+0x70>
            blk_sz = sizeof(tmp_str);
   2dc64:	2420      	movs	r4, #32
   2dc66:	e7ea      	b.n	2dc3e <fcb_elem_crc8+0x70>
    }
    *c8p = crc8;
   2dc68:	f889 8000 	strb.w	r8, [r9]

    return 0;
   2dc6c:	2000      	movs	r0, #0
}
   2dc6e:	b00b      	add	sp, #44	; 0x2c
   2dc70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return FCB_ERR_NOVAR;
   2dc74:	f06f 0002 	mvn.w	r0, #2
   2dc78:	e7f9      	b.n	2dc6e <fcb_elem_crc8+0xa0>
        return FCB_ERR_FLASH;
   2dc7a:	f06f 0001 	mvn.w	r0, #1
   2dc7e:	e7f6      	b.n	2dc6e <fcb_elem_crc8+0xa0>
        return FCB_ERR_NOVAR;
   2dc80:	f06f 0002 	mvn.w	r0, #2
   2dc84:	e7f3      	b.n	2dc6e <fcb_elem_crc8+0xa0>
            return FCB_ERR_FLASH;
   2dc86:	f06f 0001 	mvn.w	r0, #1
   2dc8a:	e7f0      	b.n	2dc6e <fcb_elem_crc8+0xa0>

0002dc8c <fcb_elem_info>:

int
fcb_elem_info(struct fcb *fcb, struct fcb_entry *loc)
{
   2dc8c:	b530      	push	{r4, r5, lr}
   2dc8e:	b083      	sub	sp, #12
   2dc90:	4605      	mov	r5, r0
   2dc92:	460c      	mov	r4, r1
    int rc;
    uint8_t crc8;
    uint8_t fl_crc8;
    uint32_t off;

    rc = fcb_elem_crc8(fcb, loc, &crc8);
   2dc94:	f10d 0207 	add.w	r2, sp, #7
   2dc98:	f7ff ff99 	bl	2dbce <fcb_elem_crc8>
    if (rc) {
   2dc9c:	4603      	mov	r3, r0
   2dc9e:	b9c0      	cbnz	r0, 2dcd2 <fcb_elem_info+0x46>
        return rc;
    }
    off = loc->fe_data_off + fcb_len_in_flash(fcb, loc->fe_data_len);
   2dca0:	68a0      	ldr	r0, [r4, #8]
   2dca2:	89a1      	ldrh	r1, [r4, #12]
    if (fcb->f_align <= 1) {
   2dca4:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   2dca8:	2b01      	cmp	r3, #1
   2dcaa:	d903      	bls.n	2dcb4 <fcb_elem_info+0x28>
    return (len + (fcb->f_align - 1)) & ~(fcb->f_align - 1);
   2dcac:	1e5a      	subs	r2, r3, #1
   2dcae:	4411      	add	r1, r2
   2dcb0:	425b      	negs	r3, r3
   2dcb2:	4019      	ands	r1, r3

    rc = flash_area_read(loc->fe_area, off, &fl_crc8, sizeof(fl_crc8));
   2dcb4:	2301      	movs	r3, #1
   2dcb6:	f10d 0206 	add.w	r2, sp, #6
   2dcba:	4401      	add	r1, r0
   2dcbc:	6820      	ldr	r0, [r4, #0]
   2dcbe:	f7e2 fef1 	bl	10aa4 <flash_area_read>
    if (rc) {
   2dcc2:	4603      	mov	r3, r0
   2dcc4:	b958      	cbnz	r0, 2dcde <fcb_elem_info+0x52>
        return FCB_ERR_FLASH;
    }

    if (fl_crc8 != crc8) {
   2dcc6:	f89d 1006 	ldrb.w	r1, [sp, #6]
   2dcca:	f89d 2007 	ldrb.w	r2, [sp, #7]
   2dcce:	4291      	cmp	r1, r2
   2dcd0:	d102      	bne.n	2dcd8 <fcb_elem_info+0x4c>
        return FCB_ERR_CRC;
    }
    return 0;
}
   2dcd2:	4618      	mov	r0, r3
   2dcd4:	b003      	add	sp, #12
   2dcd6:	bd30      	pop	{r4, r5, pc}
        return FCB_ERR_CRC;
   2dcd8:	f06f 0305 	mvn.w	r3, #5
   2dcdc:	e7f9      	b.n	2dcd2 <fcb_elem_info+0x46>
        return FCB_ERR_FLASH;
   2dcde:	f06f 0301 	mvn.w	r3, #1
   2dce2:	e7f6      	b.n	2dcd2 <fcb_elem_info+0x46>

0002dce4 <fcb_getnext_in_area>:
#include "fcb/fcb.h"
#include "fcb_priv.h"

int
fcb_getnext_in_area(struct fcb *fcb, struct fcb_entry *loc)
{
   2dce4:	b538      	push	{r3, r4, r5, lr}
   2dce6:	4605      	mov	r5, r0
   2dce8:	460c      	mov	r4, r1
    int rc;

    rc = fcb_elem_info(fcb, loc);
   2dcea:	f7ff ffcf 	bl	2dc8c <fcb_elem_info>
    if (rc == 0 || rc == FCB_ERR_CRC) {
   2dcee:	b180      	cbz	r0, 2dd12 <fcb_getnext_in_area+0x2e>
   2dcf0:	4603      	mov	r3, r0
   2dcf2:	f110 0f06 	cmn.w	r0, #6
   2dcf6:	d00c      	beq.n	2dd12 <fcb_getnext_in_area+0x2e>
                break;
            }
        } while (rc == FCB_ERR_CRC);
    }
    return rc;
}
   2dcf8:	4618      	mov	r0, r3
   2dcfa:	bd38      	pop	{r3, r4, r5, pc}
        return len;
   2dcfc:	2301      	movs	r3, #1
              fcb_len_in_flash(fcb, loc->fe_data_len) +
   2dcfe:	4413      	add	r3, r2
            loc->fe_elem_off = loc->fe_data_off +
   2dd00:	6063      	str	r3, [r4, #4]
            rc = fcb_elem_info(fcb, loc);
   2dd02:	4621      	mov	r1, r4
   2dd04:	4628      	mov	r0, r5
   2dd06:	f7ff ffc1 	bl	2dc8c <fcb_elem_info>
   2dd0a:	4603      	mov	r3, r0
            if (rc != FCB_ERR_CRC) {
   2dd0c:	f110 0f06 	cmn.w	r0, #6
   2dd10:	d1f2      	bne.n	2dcf8 <fcb_getnext_in_area+0x14>
            loc->fe_elem_off = loc->fe_data_off +
   2dd12:	68a1      	ldr	r1, [r4, #8]
              fcb_len_in_flash(fcb, loc->fe_data_len) +
   2dd14:	89a2      	ldrh	r2, [r4, #12]
    if (fcb->f_align <= 1) {
   2dd16:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   2dd1a:	2b01      	cmp	r3, #1
   2dd1c:	d903      	bls.n	2dd26 <fcb_getnext_in_area+0x42>
    return (len + (fcb->f_align - 1)) & ~(fcb->f_align - 1);
   2dd1e:	1e58      	subs	r0, r3, #1
   2dd20:	4402      	add	r2, r0
   2dd22:	4258      	negs	r0, r3
   2dd24:	4002      	ands	r2, r0
            loc->fe_elem_off = loc->fe_data_off +
   2dd26:	440a      	add	r2, r1
    if (fcb->f_align <= 1) {
   2dd28:	2b01      	cmp	r3, #1
   2dd2a:	d9e7      	bls.n	2dcfc <fcb_getnext_in_area+0x18>
    return (len + (fcb->f_align - 1)) & ~(fcb->f_align - 1);
   2dd2c:	4259      	negs	r1, r3
   2dd2e:	400b      	ands	r3, r1
   2dd30:	e7e5      	b.n	2dcfe <fcb_getnext_in_area+0x1a>

0002dd32 <fcb_getnext_area>:

struct flash_area *
fcb_getnext_area(struct fcb *fcb, struct flash_area *fap)
{
   2dd32:	4603      	mov	r3, r0
    fap++;
   2dd34:	310c      	adds	r1, #12
    if (fap >= &fcb->f_sectors[fcb->f_sector_cnt]) {
   2dd36:	6880      	ldr	r0, [r0, #8]
   2dd38:	795b      	ldrb	r3, [r3, #5]
   2dd3a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   2dd3e:	009a      	lsls	r2, r3, #2
   2dd40:	4402      	add	r2, r0
   2dd42:	428a      	cmp	r2, r1
   2dd44:	d800      	bhi.n	2dd48 <fcb_getnext_area+0x16>
        fap = &fcb->f_sectors[0];
    }
    return fap;
}
   2dd46:	4770      	bx	lr
    fap++;
   2dd48:	4608      	mov	r0, r1
    return fap;
   2dd4a:	e7fc      	b.n	2dd46 <fcb_getnext_area+0x14>

0002dd4c <fcb_getnext_nolock>:

int
fcb_getnext_nolock(struct fcb *fcb, struct fcb_entry *loc)
{
   2dd4c:	b538      	push	{r3, r4, r5, lr}
   2dd4e:	4605      	mov	r5, r0
   2dd50:	460c      	mov	r4, r1
    int rc;

    if (loc->fe_area == NULL) {
   2dd52:	680b      	ldr	r3, [r1, #0]
   2dd54:	b303      	cbz	r3, 2dd98 <fcb_getnext_nolock+0x4c>
        /*
         * Find the first one we have in flash.
         */
        loc->fe_area = fcb->f_oldest;
    }
    if (loc->fe_elem_off == 0) {
   2dd56:	6863      	ldr	r3, [r4, #4]
   2dd58:	bb0b      	cbnz	r3, 2dd9e <fcb_getnext_nolock+0x52>
        /*
         * If offset is zero, we serve the first entry from the area.
         */
        loc->fe_elem_off = sizeof(struct fcb_disk_area);
   2dd5a:	2308      	movs	r3, #8
   2dd5c:	6063      	str	r3, [r4, #4]
        rc = fcb_elem_info(fcb, loc);
   2dd5e:	4621      	mov	r1, r4
   2dd60:	4628      	mov	r0, r5
   2dd62:	f7ff ff93 	bl	2dc8c <fcb_elem_info>
   2dd66:	4603      	mov	r3, r0
    } else {
        rc = fcb_getnext_in_area(fcb, loc);
    }
    switch (rc) {
   2dd68:	f113 0f06 	cmn.w	r3, #6
   2dd6c:	d01d      	beq.n	2ddaa <fcb_getnext_nolock+0x5e>
   2dd6e:	b353      	cbz	r3, 2ddc6 <fcb_getnext_nolock+0x7a>
        if (rc != FCB_ERR_CRC) {
            /*
             * Moving to next sector.
             */
next_sector:
            if (loc->fe_area == fcb->f_active.fe_area) {
   2dd70:	6821      	ldr	r1, [r4, #0]
   2dd72:	69eb      	ldr	r3, [r5, #28]
   2dd74:	4299      	cmp	r1, r3
   2dd76:	d028      	beq.n	2ddca <fcb_getnext_nolock+0x7e>
                return FCB_ERR_NOVAR;
            }
            loc->fe_area = fcb_getnext_area(fcb, loc->fe_area);
   2dd78:	4628      	mov	r0, r5
   2dd7a:	f7ff ffda 	bl	2dd32 <fcb_getnext_area>
   2dd7e:	6020      	str	r0, [r4, #0]
            loc->fe_elem_off = sizeof(struct fcb_disk_area);
   2dd80:	2308      	movs	r3, #8
   2dd82:	6063      	str	r3, [r4, #4]
            rc = fcb_elem_info(fcb, loc);
   2dd84:	4621      	mov	r1, r4
   2dd86:	4628      	mov	r0, r5
   2dd88:	f7ff ff80 	bl	2dc8c <fcb_elem_info>
   2dd8c:	4603      	mov	r3, r0
            switch (rc) {
   2dd8e:	f110 0f06 	cmn.w	r0, #6
   2dd92:	d00a      	beq.n	2ddaa <fcb_getnext_nolock+0x5e>
   2dd94:	b1b8      	cbz	r0, 2ddc6 <fcb_getnext_nolock+0x7a>
   2dd96:	e7eb      	b.n	2dd70 <fcb_getnext_nolock+0x24>
        loc->fe_area = fcb->f_oldest;
   2dd98:	6983      	ldr	r3, [r0, #24]
   2dd9a:	600b      	str	r3, [r1, #0]
   2dd9c:	e7db      	b.n	2dd56 <fcb_getnext_nolock+0xa>
        rc = fcb_getnext_in_area(fcb, loc);
   2dd9e:	4621      	mov	r1, r4
   2dda0:	4628      	mov	r0, r5
   2dda2:	f7ff ff9f 	bl	2dce4 <fcb_getnext_in_area>
   2dda6:	4603      	mov	r3, r0
   2dda8:	e7de      	b.n	2dd68 <fcb_getnext_nolock+0x1c>
    while (rc == FCB_ERR_CRC) {
   2ddaa:	f113 0f06 	cmn.w	r3, #6
   2ddae:	d109      	bne.n	2ddc4 <fcb_getnext_nolock+0x78>
        rc = fcb_getnext_in_area(fcb, loc);
   2ddb0:	4621      	mov	r1, r4
   2ddb2:	4628      	mov	r0, r5
   2ddb4:	f7ff ff96 	bl	2dce4 <fcb_getnext_in_area>
        if (rc == 0) {
   2ddb8:	4603      	mov	r3, r0
   2ddba:	b120      	cbz	r0, 2ddc6 <fcb_getnext_nolock+0x7a>
        if (rc != FCB_ERR_CRC) {
   2ddbc:	f110 0f06 	cmn.w	r0, #6
   2ddc0:	d0f3      	beq.n	2ddaa <fcb_getnext_nolock+0x5e>
next_sector:
   2ddc2:	e7d5      	b.n	2dd70 <fcb_getnext_nolock+0x24>
                goto next_sector;
            }
        }
    }

    return 0;
   2ddc4:	2300      	movs	r3, #0
}
   2ddc6:	4618      	mov	r0, r3
   2ddc8:	bd38      	pop	{r3, r4, r5, pc}
                return FCB_ERR_NOVAR;
   2ddca:	f06f 0302 	mvn.w	r3, #2
   2ddce:	e7fa      	b.n	2ddc6 <fcb_getnext_nolock+0x7a>

0002ddd0 <fcb_getnext>:

int
fcb_getnext(struct fcb *fcb, struct fcb_entry *loc)
{
   2ddd0:	b570      	push	{r4, r5, r6, lr}
   2ddd2:	4605      	mov	r5, r0
   2ddd4:	460e      	mov	r6, r1
    int rc;

    rc = os_mutex_pend(&fcb->f_mtx, OS_WAIT_FOREVER);
   2ddd6:	f100 040c 	add.w	r4, r0, #12
   2ddda:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2ddde:	4620      	mov	r0, r4
   2dde0:	f7e0 fcde 	bl	e7a0 <os_mutex_pend>
    if (rc && rc != OS_NOT_STARTED) {
   2dde4:	b108      	cbz	r0, 2ddea <fcb_getnext+0x1a>
   2dde6:	2809      	cmp	r0, #9
   2dde8:	d109      	bne.n	2ddfe <fcb_getnext+0x2e>
        return FCB_ERR_ARGS;
    }
    rc = fcb_getnext_nolock(fcb, loc);
   2ddea:	4631      	mov	r1, r6
   2ddec:	4628      	mov	r0, r5
   2ddee:	f7ff ffad 	bl	2dd4c <fcb_getnext_nolock>
   2ddf2:	4605      	mov	r5, r0
    os_mutex_release(&fcb->f_mtx);
   2ddf4:	4620      	mov	r0, r4
   2ddf6:	f7e0 fc73 	bl	e6e0 <os_mutex_release>

    return rc;
}
   2ddfa:	4628      	mov	r0, r5
   2ddfc:	bd70      	pop	{r4, r5, r6, pc}
        return FCB_ERR_ARGS;
   2ddfe:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2de02:	e7fa      	b.n	2ddfa <fcb_getnext+0x2a>

0002de04 <fcb_rotate>:
#include "fcb/fcb.h"
#include "fcb_priv.h"

int
fcb_rotate(struct fcb *fcb)
{
   2de04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2de06:	4604      	mov	r4, r0
    struct flash_area *fap;
    int rc = 0;

    rc = os_mutex_pend(&fcb->f_mtx, OS_WAIT_FOREVER);
   2de08:	f100 050c 	add.w	r5, r0, #12
   2de0c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2de10:	4628      	mov	r0, r5
   2de12:	f7e0 fcc5 	bl	e7a0 <os_mutex_pend>
    if (rc && rc != OS_NOT_STARTED) {
   2de16:	b108      	cbz	r0, 2de1c <fcb_rotate+0x18>
   2de18:	2809      	cmp	r0, #9
   2de1a:	d12b      	bne.n	2de74 <fcb_rotate+0x70>
        return FCB_ERR_ARGS;
    }

    rc = flash_area_erase(fcb->f_oldest, 0, fcb->f_oldest->fa_size);
   2de1c:	69a0      	ldr	r0, [r4, #24]
   2de1e:	6882      	ldr	r2, [r0, #8]
   2de20:	2100      	movs	r1, #0
   2de22:	f7e2 fe65 	bl	10af0 <flash_area_erase>
    if (rc) {
   2de26:	4606      	mov	r6, r0
   2de28:	b9e8      	cbnz	r0, 2de66 <fcb_rotate+0x62>
        rc = FCB_ERR_FLASH;
        goto out;
    }
    if (fcb->f_oldest == fcb->f_active.fe_area) {
   2de2a:	69a1      	ldr	r1, [r4, #24]
   2de2c:	69e3      	ldr	r3, [r4, #28]
   2de2e:	4299      	cmp	r1, r3
   2de30:	d005      	beq.n	2de3e <fcb_rotate+0x3a>
        }
        fcb->f_active.fe_area = fap;
        fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
        fcb->f_active_id++;
    }
    fcb->f_oldest = fcb_getnext_area(fcb, fcb->f_oldest);
   2de32:	69a1      	ldr	r1, [r4, #24]
   2de34:	4620      	mov	r0, r4
   2de36:	f7ff ff7c 	bl	2dd32 <fcb_getnext_area>
   2de3a:	61a0      	str	r0, [r4, #24]
   2de3c:	e015      	b.n	2de6a <fcb_rotate+0x66>
        fap = fcb_getnext_area(fcb, fcb->f_oldest);
   2de3e:	4620      	mov	r0, r4
   2de40:	f7ff ff77 	bl	2dd32 <fcb_getnext_area>
   2de44:	4607      	mov	r7, r0
        rc = fcb_sector_hdr_init(fcb, fap, fcb->f_active_id + 1);
   2de46:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
   2de48:	3201      	adds	r2, #1
   2de4a:	b292      	uxth	r2, r2
   2de4c:	4601      	mov	r1, r0
   2de4e:	4620      	mov	r0, r4
   2de50:	f7ff fcd8 	bl	2d804 <fcb_sector_hdr_init>
        if (rc) {
   2de54:	4606      	mov	r6, r0
   2de56:	b940      	cbnz	r0, 2de6a <fcb_rotate+0x66>
        fcb->f_active.fe_area = fap;
   2de58:	61e7      	str	r7, [r4, #28]
        fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   2de5a:	2308      	movs	r3, #8
   2de5c:	6223      	str	r3, [r4, #32]
        fcb->f_active_id++;
   2de5e:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
   2de60:	3301      	adds	r3, #1
   2de62:	85a3      	strh	r3, [r4, #44]	; 0x2c
   2de64:	e7e5      	b.n	2de32 <fcb_rotate+0x2e>
        rc = FCB_ERR_FLASH;
   2de66:	f06f 0601 	mvn.w	r6, #1
out:
    os_mutex_release(&fcb->f_mtx);
   2de6a:	4628      	mov	r0, r5
   2de6c:	f7e0 fc38 	bl	e6e0 <os_mutex_release>
    return rc;
}
   2de70:	4630      	mov	r0, r6
   2de72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return FCB_ERR_ARGS;
   2de74:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   2de78:	e7fa      	b.n	2de70 <fcb_rotate+0x6c>

0002de7a <fcb_walk>:
 * Call 'cb' for every element in flash circular buffer. If fap is specified,
 * only elements with that flash_area are reported.
 */
int
fcb_walk(struct fcb *fcb, struct flash_area *fap, fcb_walk_cb cb, void *cb_arg)
{
   2de7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2de7e:	b084      	sub	sp, #16
   2de80:	4606      	mov	r6, r0
   2de82:	460d      	mov	r5, r1
   2de84:	4617      	mov	r7, r2
   2de86:	4698      	mov	r8, r3
    struct fcb_entry loc;
    int rc;

    loc.fe_area = fap;
   2de88:	9100      	str	r1, [sp, #0]
    loc.fe_elem_off = 0;
   2de8a:	2300      	movs	r3, #0
   2de8c:	9301      	str	r3, [sp, #4]

    rc = os_mutex_pend(&fcb->f_mtx, OS_WAIT_FOREVER);
   2de8e:	f100 040c 	add.w	r4, r0, #12
   2de92:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2de96:	4620      	mov	r0, r4
   2de98:	f7e0 fc82 	bl	e7a0 <os_mutex_pend>
    if (rc && rc != OS_NOT_STARTED) {
   2de9c:	b170      	cbz	r0, 2debc <fcb_walk+0x42>
   2de9e:	2809      	cmp	r0, #9
   2dea0:	d00c      	beq.n	2debc <fcb_walk+0x42>
        return FCB_ERR_ARGS;
   2dea2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2dea6:	e01e      	b.n	2dee6 <fcb_walk+0x6c>
    while ((rc = fcb_getnext_nolock(fcb, &loc)) != FCB_ERR_NOVAR) {
        os_mutex_release(&fcb->f_mtx);
        if (fap && loc.fe_area != fap) {
            return 0;
        }
        rc = cb(&loc, cb_arg);
   2dea8:	4641      	mov	r1, r8
   2deaa:	4668      	mov	r0, sp
   2deac:	47b8      	blx	r7
        if (rc) {
   2deae:	4603      	mov	r3, r0
   2deb0:	b9c8      	cbnz	r0, 2dee6 <fcb_walk+0x6c>
            return rc;
        }
        os_mutex_pend(&fcb->f_mtx, OS_WAIT_FOREVER);
   2deb2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2deb6:	4620      	mov	r0, r4
   2deb8:	f7e0 fc72 	bl	e7a0 <os_mutex_pend>
    while ((rc = fcb_getnext_nolock(fcb, &loc)) != FCB_ERR_NOVAR) {
   2debc:	4669      	mov	r1, sp
   2debe:	4630      	mov	r0, r6
   2dec0:	f7ff ff44 	bl	2dd4c <fcb_getnext_nolock>
   2dec4:	f110 0f03 	cmn.w	r0, #3
   2dec8:	d009      	beq.n	2dede <fcb_walk+0x64>
        os_mutex_release(&fcb->f_mtx);
   2deca:	4620      	mov	r0, r4
   2decc:	f7e0 fc08 	bl	e6e0 <os_mutex_release>
        if (fap && loc.fe_area != fap) {
   2ded0:	2d00      	cmp	r5, #0
   2ded2:	d0e9      	beq.n	2dea8 <fcb_walk+0x2e>
   2ded4:	9b00      	ldr	r3, [sp, #0]
   2ded6:	42ab      	cmp	r3, r5
   2ded8:	d0e6      	beq.n	2dea8 <fcb_walk+0x2e>
            return 0;
   2deda:	2300      	movs	r3, #0
   2dedc:	e003      	b.n	2dee6 <fcb_walk+0x6c>
    }
    os_mutex_release(&fcb->f_mtx);
   2dede:	4620      	mov	r0, r4
   2dee0:	f7e0 fbfe 	bl	e6e0 <os_mutex_release>
    return 0;
   2dee4:	2300      	movs	r3, #0
}
   2dee6:	4618      	mov	r0, r3
   2dee8:	b004      	add	sp, #16
   2deea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0002def0 <hal_bsp_flash_dev>:
hal_bsp_flash_dev(uint8_t id)
{
    /*
     * Internal flash mapped to id 0.
     */
    if (id == 0) {
   2def0:	b908      	cbnz	r0, 2def6 <hal_bsp_flash_dev+0x6>
        return &nrf52k_flash_dev;
   2def2:	4802      	ldr	r0, [pc, #8]	; (2defc <hal_bsp_flash_dev+0xc>)
   2def4:	4770      	bx	lr
#if MYNEWT_VAL(QSPI_ENABLE)
    if (id == 1) {
        return &nrf52k_qspi_dev;
    }
#endif
    return NULL;
   2def6:	2000      	movs	r0, #0
}
   2def8:	4770      	bx	lr
   2defa:	bf00      	nop
   2defc:	00032c9c 	.word	0x00032c9c

0002df00 <hal_bsp_init>:
    return cfg_pri;
}

void
hal_bsp_init(void)
{
   2df00:	b508      	push	{r3, lr}
    /* Make sure system clocks have started */
    hal_system_clock_start();
   2df02:	f7de f98f 	bl	c224 <hal_system_clock_start>

    /* Create all available nRF52840 peripherals */
    nrf52_periph_create();
   2df06:	f000 fc5f 	bl	2e7c8 <nrf52_periph_create>
}
   2df0a:	bd08      	pop	{r3, pc}

0002df0c <hal_flash_check_addr>:
}

static int
hal_flash_check_addr(const struct hal_flash *hf, uint32_t addr)
{
    if (addr < hf->hf_base_addr || addr > hf->hf_base_addr + hf->hf_size) {
   2df0c:	6843      	ldr	r3, [r0, #4]
   2df0e:	428b      	cmp	r3, r1
   2df10:	d808      	bhi.n	2df24 <hal_flash_check_addr+0x18>
   2df12:	6882      	ldr	r2, [r0, #8]
   2df14:	4413      	add	r3, r2
   2df16:	428b      	cmp	r3, r1
   2df18:	d301      	bcc.n	2df1e <hal_flash_check_addr+0x12>
        return SYS_EINVAL;
    }
    return 0;
   2df1a:	2000      	movs	r0, #0
}
   2df1c:	4770      	bx	lr
        return SYS_EINVAL;
   2df1e:	f06f 0001 	mvn.w	r0, #1
   2df22:	4770      	bx	lr
   2df24:	f06f 0001 	mvn.w	r0, #1
   2df28:	4770      	bx	lr

0002df2a <hal_flash_init>:
{
   2df2a:	b538      	push	{r3, r4, r5, lr}
    int rc = 0;
   2df2c:	2500      	movs	r5, #0
    for (i = 0; ; i++) {
   2df2e:	462c      	mov	r4, r5
   2df30:	e001      	b.n	2df36 <hal_flash_init+0xc>
   2df32:	3401      	adds	r4, #1
   2df34:	b2e4      	uxtb	r4, r4
        hf = hal_bsp_flash_dev(i);
   2df36:	4620      	mov	r0, r4
   2df38:	f7ff ffda 	bl	2def0 <hal_bsp_flash_dev>
        if (!hf) {
   2df3c:	b138      	cbz	r0, 2df4e <hal_flash_init+0x24>
        if (hf->hf_itf->hff_init(hf)) {
   2df3e:	6802      	ldr	r2, [r0, #0]
   2df40:	6952      	ldr	r2, [r2, #20]
   2df42:	4790      	blx	r2
   2df44:	2800      	cmp	r0, #0
   2df46:	d0f4      	beq.n	2df32 <hal_flash_init+0x8>
            rc = SYS_EIO;
   2df48:	f06f 0504 	mvn.w	r5, #4
   2df4c:	e7f1      	b.n	2df32 <hal_flash_init+0x8>
}
   2df4e:	4628      	mov	r0, r5
   2df50:	bd38      	pop	{r3, r4, r5, pc}

0002df52 <hal_flash_align>:
{
   2df52:	b508      	push	{r3, lr}
    hf = hal_bsp_flash_dev(flash_id);
   2df54:	f7ff ffcc 	bl	2def0 <hal_bsp_flash_dev>
    if (!hf) {
   2df58:	b108      	cbz	r0, 2df5e <hal_flash_align+0xc>
    return hf->hf_align;
   2df5a:	7c00      	ldrb	r0, [r0, #16]
}
   2df5c:	bd08      	pop	{r3, pc}
        return 1;
   2df5e:	2001      	movs	r0, #1
   2df60:	e7fc      	b.n	2df5c <hal_flash_align+0xa>

0002df62 <hal_flash_erased_val>:
{
   2df62:	b508      	push	{r3, lr}
    hf = hal_bsp_flash_dev(flash_id);
   2df64:	f7ff ffc4 	bl	2def0 <hal_bsp_flash_dev>
    if (!hf) {
   2df68:	b108      	cbz	r0, 2df6e <hal_flash_erased_val+0xc>
    return hf->hf_erased_val;
   2df6a:	7d00      	ldrb	r0, [r0, #20]
}
   2df6c:	bd08      	pop	{r3, pc}
        return 1;
   2df6e:	2001      	movs	r0, #1
   2df70:	e7fc      	b.n	2df6c <hal_flash_erased_val+0xa>

0002df72 <hal_flash_read>:

int
hal_flash_read(uint8_t id, uint32_t address, void *dst, uint32_t num_bytes)
{
   2df72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2df76:	460d      	mov	r5, r1
   2df78:	4690      	mov	r8, r2
   2df7a:	461e      	mov	r6, r3
    const struct hal_flash *hf;
    int rc;

    hf = hal_bsp_flash_dev(id);
   2df7c:	f7ff ffb8 	bl	2def0 <hal_bsp_flash_dev>
    if (!hf) {
   2df80:	b1c0      	cbz	r0, 2dfb4 <hal_flash_read+0x42>
   2df82:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
   2df84:	4629      	mov	r1, r5
   2df86:	f7ff ffc1 	bl	2df0c <hal_flash_check_addr>
   2df8a:	b9b0      	cbnz	r0, 2dfba <hal_flash_read+0x48>
      hal_flash_check_addr(hf, address + num_bytes)) {
   2df8c:	19a9      	adds	r1, r5, r6
   2df8e:	4620      	mov	r0, r4
   2df90:	f7ff ffbc 	bl	2df0c <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
   2df94:	b9a0      	cbnz	r0, 2dfc0 <hal_flash_read+0x4e>
        return SYS_EINVAL;
    }

    rc = hf->hf_itf->hff_read(hf, address, dst, num_bytes);
   2df96:	6823      	ldr	r3, [r4, #0]
   2df98:	681f      	ldr	r7, [r3, #0]
   2df9a:	4633      	mov	r3, r6
   2df9c:	4642      	mov	r2, r8
   2df9e:	4629      	mov	r1, r5
   2dfa0:	4620      	mov	r0, r4
   2dfa2:	47b8      	blx	r7
    if (rc != 0) {
   2dfa4:	4603      	mov	r3, r0
   2dfa6:	b910      	cbnz	r0, 2dfae <hal_flash_read+0x3c>
        return SYS_EIO;
    }

    return 0;
}
   2dfa8:	4618      	mov	r0, r3
   2dfaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SYS_EIO;
   2dfae:	f06f 0304 	mvn.w	r3, #4
   2dfb2:	e7f9      	b.n	2dfa8 <hal_flash_read+0x36>
        return SYS_EINVAL;
   2dfb4:	f06f 0301 	mvn.w	r3, #1
   2dfb8:	e7f6      	b.n	2dfa8 <hal_flash_read+0x36>
        return SYS_EINVAL;
   2dfba:	f06f 0301 	mvn.w	r3, #1
   2dfbe:	e7f3      	b.n	2dfa8 <hal_flash_read+0x36>
   2dfc0:	f06f 0301 	mvn.w	r3, #1
   2dfc4:	e7f0      	b.n	2dfa8 <hal_flash_read+0x36>
	...

0002dfc8 <hal_flash_write>:
#endif

int
hal_flash_write(uint8_t id, uint32_t address, const void *src,
  uint32_t num_bytes)
{
   2dfc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2dfcc:	4605      	mov	r5, r0
   2dfce:	460e      	mov	r6, r1
   2dfd0:	4690      	mov	r8, r2
   2dfd2:	461f      	mov	r7, r3
    const struct hal_flash *hf;
    int rc;

    hf = hal_bsp_flash_dev(id);
   2dfd4:	f7ff ff8c 	bl	2def0 <hal_bsp_flash_dev>
    if (!hf) {
   2dfd8:	b310      	cbz	r0, 2e020 <hal_flash_write+0x58>
   2dfda:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
   2dfdc:	4631      	mov	r1, r6
   2dfde:	f7ff ff95 	bl	2df0c <hal_flash_check_addr>
   2dfe2:	bb00      	cbnz	r0, 2e026 <hal_flash_write+0x5e>
      hal_flash_check_addr(hf, address + num_bytes)) {
   2dfe4:	19f1      	adds	r1, r6, r7
   2dfe6:	4620      	mov	r0, r4
   2dfe8:	f7ff ff90 	bl	2df0c <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
   2dfec:	b9f0      	cbnz	r0, 2e02c <hal_flash_write+0x64>
        return SYS_EINVAL;
    }

    if (protected_flash[id / 8] & (1 << (id & 7))) {
   2dfee:	08eb      	lsrs	r3, r5, #3
   2dff0:	4a11      	ldr	r2, [pc, #68]	; (2e038 <hal_flash_write+0x70>)
   2dff2:	5cd3      	ldrb	r3, [r2, r3]
   2dff4:	f005 0507 	and.w	r5, r5, #7
   2dff8:	fa43 f505 	asr.w	r5, r3, r5
   2dffc:	f015 0f01 	tst.w	r5, #1
   2e000:	d117      	bne.n	2e032 <hal_flash_write+0x6a>
        return SYS_EACCES;
    }

    rc = hf->hf_itf->hff_write(hf, address, src, num_bytes);
   2e002:	6823      	ldr	r3, [r4, #0]
   2e004:	685d      	ldr	r5, [r3, #4]
   2e006:	463b      	mov	r3, r7
   2e008:	4642      	mov	r2, r8
   2e00a:	4631      	mov	r1, r6
   2e00c:	4620      	mov	r0, r4
   2e00e:	47a8      	blx	r5
    if (rc != 0) {
   2e010:	4603      	mov	r3, r0
   2e012:	b910      	cbnz	r0, 2e01a <hal_flash_write+0x52>
#if MYNEWT_VAL(HAL_FLASH_VERIFY_WRITES)
    assert(hal_flash_cmp(hf, address, src, num_bytes) == 0);
#endif

    return 0;
}
   2e014:	4618      	mov	r0, r3
   2e016:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SYS_EIO;
   2e01a:	f06f 0304 	mvn.w	r3, #4
   2e01e:	e7f9      	b.n	2e014 <hal_flash_write+0x4c>
        return SYS_EINVAL;
   2e020:	f06f 0301 	mvn.w	r3, #1
   2e024:	e7f6      	b.n	2e014 <hal_flash_write+0x4c>
        return SYS_EINVAL;
   2e026:	f06f 0301 	mvn.w	r3, #1
   2e02a:	e7f3      	b.n	2e014 <hal_flash_write+0x4c>
   2e02c:	f06f 0301 	mvn.w	r3, #1
   2e030:	e7f0      	b.n	2e014 <hal_flash_write+0x4c>
        return SYS_EACCES;
   2e032:	f06f 0306 	mvn.w	r3, #6
   2e036:	e7ed      	b.n	2e014 <hal_flash_write+0x4c>
   2e038:	200032d0 	.word	0x200032d0

0002e03c <hal_flash_erase>:
    return 0;
}

int
hal_flash_erase(uint8_t id, uint32_t address, uint32_t num_bytes)
{
   2e03c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2e040:	b083      	sub	sp, #12
   2e042:	4605      	mov	r5, r0
   2e044:	460e      	mov	r6, r1
   2e046:	4690      	mov	r8, r2
    uint32_t end;
    uint32_t end_area;
    int i;
    int rc;

    hf = hal_bsp_flash_dev(id);
   2e048:	f7ff ff52 	bl	2def0 <hal_bsp_flash_dev>
    if (!hf) {
   2e04c:	2800      	cmp	r0, #0
   2e04e:	d050      	beq.n	2e0f2 <hal_flash_erase+0xb6>
   2e050:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
   2e052:	4631      	mov	r1, r6
   2e054:	f7ff ff5a 	bl	2df0c <hal_flash_check_addr>
   2e058:	2800      	cmp	r0, #0
   2e05a:	d14d      	bne.n	2e0f8 <hal_flash_erase+0xbc>
      hal_flash_check_addr(hf, address + num_bytes)) {
   2e05c:	eb06 0708 	add.w	r7, r6, r8
   2e060:	4639      	mov	r1, r7
   2e062:	4620      	mov	r0, r4
   2e064:	f7ff ff52 	bl	2df0c <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
   2e068:	2800      	cmp	r0, #0
   2e06a:	d148      	bne.n	2e0fe <hal_flash_erase+0xc2>
        return SYS_EINVAL;
    }

    if (protected_flash[id / 8] & (1 << (id & 7))) {
   2e06c:	08eb      	lsrs	r3, r5, #3
   2e06e:	4a28      	ldr	r2, [pc, #160]	; (2e110 <hal_flash_erase+0xd4>)
   2e070:	5cd3      	ldrb	r3, [r2, r3]
   2e072:	f005 0507 	and.w	r5, r5, #7
   2e076:	fa43 f505 	asr.w	r5, r3, r5
   2e07a:	f015 0501 	ands.w	r5, r5, #1
   2e07e:	d141      	bne.n	2e104 <hal_flash_erase+0xc8>
        return SYS_EACCES;
    }

    end = address + num_bytes;
    if (end <= address) {
   2e080:	42b7      	cmp	r7, r6
   2e082:	d942      	bls.n	2e10a <hal_flash_erase+0xce>
         * Check for wrap-around.
         */
        return SYS_EINVAL;
    }

    if (hf->hf_itf->hff_erase) {
   2e084:	6823      	ldr	r3, [r4, #0]
   2e086:	699b      	ldr	r3, [r3, #24]
   2e088:	2b00      	cmp	r3, #0
   2e08a:	d030      	beq.n	2e0ee <hal_flash_erase+0xb2>
        hf->hf_itf->hff_erase(hf, address, num_bytes);
   2e08c:	4642      	mov	r2, r8
   2e08e:	4631      	mov	r1, r6
   2e090:	4620      	mov	r0, r4
   2e092:	4798      	blx	r3
#endif
            }
        }
    }
    return 0;
}
   2e094:	4628      	mov	r0, r5
   2e096:	b003      	add	sp, #12
   2e098:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            assert(rc == 0);
   2e09c:	f7de f8a4 	bl	c1e8 <hal_debugger_connected>
   2e0a0:	b100      	cbz	r0, 2e0a4 <hal_flash_erase+0x68>
   2e0a2:	be01      	bkpt	0x0001
   2e0a4:	2300      	movs	r3, #0
   2e0a6:	461a      	mov	r2, r3
   2e0a8:	4619      	mov	r1, r3
   2e0aa:	4618      	mov	r0, r3
   2e0ac:	f7de fd50 	bl	cb50 <__assert_func>
        for (i = 0; i < hf->hf_sector_cnt; i++) {
   2e0b0:	f108 0801 	add.w	r8, r8, #1
   2e0b4:	68e3      	ldr	r3, [r4, #12]
   2e0b6:	4543      	cmp	r3, r8
   2e0b8:	ddec      	ble.n	2e094 <hal_flash_erase+0x58>
            rc = hf->hf_itf->hff_sector_info(hf, i, &start, &size);
   2e0ba:	6823      	ldr	r3, [r4, #0]
   2e0bc:	f8d3 900c 	ldr.w	r9, [r3, #12]
   2e0c0:	466b      	mov	r3, sp
   2e0c2:	aa01      	add	r2, sp, #4
   2e0c4:	4641      	mov	r1, r8
   2e0c6:	4620      	mov	r0, r4
   2e0c8:	47c8      	blx	r9
            assert(rc == 0);
   2e0ca:	2800      	cmp	r0, #0
   2e0cc:	d1e6      	bne.n	2e09c <hal_flash_erase+0x60>
            end_area = start + size;
   2e0ce:	9901      	ldr	r1, [sp, #4]
   2e0d0:	9b00      	ldr	r3, [sp, #0]
   2e0d2:	440b      	add	r3, r1
            if (address < end_area && end > start) {
   2e0d4:	429e      	cmp	r6, r3
   2e0d6:	d2eb      	bcs.n	2e0b0 <hal_flash_erase+0x74>
   2e0d8:	428f      	cmp	r7, r1
   2e0da:	d9e9      	bls.n	2e0b0 <hal_flash_erase+0x74>
                if (hf->hf_itf->hff_erase_sector(hf, start)) {
   2e0dc:	6823      	ldr	r3, [r4, #0]
   2e0de:	689b      	ldr	r3, [r3, #8]
   2e0e0:	4620      	mov	r0, r4
   2e0e2:	4798      	blx	r3
   2e0e4:	2800      	cmp	r0, #0
   2e0e6:	d0e3      	beq.n	2e0b0 <hal_flash_erase+0x74>
                    return SYS_EIO;
   2e0e8:	f06f 0504 	mvn.w	r5, #4
   2e0ec:	e7d2      	b.n	2e094 <hal_flash_erase+0x58>
        for (i = 0; i < hf->hf_sector_cnt; i++) {
   2e0ee:	46a8      	mov	r8, r5
   2e0f0:	e7e0      	b.n	2e0b4 <hal_flash_erase+0x78>
        return SYS_EINVAL;
   2e0f2:	f06f 0501 	mvn.w	r5, #1
   2e0f6:	e7cd      	b.n	2e094 <hal_flash_erase+0x58>
        return SYS_EINVAL;
   2e0f8:	f06f 0501 	mvn.w	r5, #1
   2e0fc:	e7ca      	b.n	2e094 <hal_flash_erase+0x58>
   2e0fe:	f06f 0501 	mvn.w	r5, #1
   2e102:	e7c7      	b.n	2e094 <hal_flash_erase+0x58>
        return SYS_EACCES;
   2e104:	f06f 0506 	mvn.w	r5, #6
   2e108:	e7c4      	b.n	2e094 <hal_flash_erase+0x58>
        return SYS_EINVAL;
   2e10a:	f06f 0501 	mvn.w	r5, #1
   2e10e:	e7c1      	b.n	2e094 <hal_flash_erase+0x58>
   2e110:	200032d0 	.word	0x200032d0

0002e114 <hal_flash_is_erased>:

int
hal_flash_is_erased(const struct hal_flash *hf, uint32_t address, void *dst,
        uint32_t num_bytes)
{
   2e114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2e116:	4604      	mov	r4, r0
   2e118:	4616      	mov	r6, r2
   2e11a:	461d      	mov	r5, r3
    uint8_t *buf;
    int rc;

    buf = dst;

    rc = hf->hf_itf->hff_read(hf, address, dst, num_bytes);
   2e11c:	6807      	ldr	r7, [r0, #0]
   2e11e:	683f      	ldr	r7, [r7, #0]
   2e120:	47b8      	blx	r7
    if (rc != 0) {
   2e122:	b960      	cbnz	r0, 2e13e <hal_flash_is_erased+0x2a>
   2e124:	4607      	mov	r7, r0
        return SYS_EIO;
    }

    for (i = 0; i < num_bytes; i++) {
   2e126:	2300      	movs	r3, #0
   2e128:	42ab      	cmp	r3, r5
   2e12a:	d205      	bcs.n	2e138 <hal_flash_is_erased+0x24>
        if (buf[i] != hf->hf_erased_val) {
   2e12c:	5cf1      	ldrb	r1, [r6, r3]
   2e12e:	7d22      	ldrb	r2, [r4, #20]
   2e130:	4291      	cmp	r1, r2
   2e132:	d102      	bne.n	2e13a <hal_flash_is_erased+0x26>
    for (i = 0; i < num_bytes; i++) {
   2e134:	3301      	adds	r3, #1
   2e136:	e7f7      	b.n	2e128 <hal_flash_is_erased+0x14>
            return 0;
        }
    }
    return 1;
   2e138:	2701      	movs	r7, #1
}
   2e13a:	4638      	mov	r0, r7
   2e13c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return SYS_EIO;
   2e13e:	f06f 0704 	mvn.w	r7, #4
   2e142:	e7fa      	b.n	2e13a <hal_flash_is_erased+0x26>

0002e144 <hal_flash_isempty>:

int
hal_flash_isempty(uint8_t id, uint32_t address, void *dst, uint32_t num_bytes)
{
   2e144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2e148:	460d      	mov	r5, r1
   2e14a:	4690      	mov	r8, r2
   2e14c:	461e      	mov	r6, r3
    const struct hal_flash *hf;
    int rc;

    hf = hal_bsp_flash_dev(id);
   2e14e:	f7ff fecf 	bl	2def0 <hal_bsp_flash_dev>
    if (!hf) {
   2e152:	b1f8      	cbz	r0, 2e194 <hal_flash_isempty+0x50>
   2e154:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
   2e156:	4629      	mov	r1, r5
   2e158:	f7ff fed8 	bl	2df0c <hal_flash_check_addr>
   2e15c:	b9e8      	cbnz	r0, 2e19a <hal_flash_isempty+0x56>
      hal_flash_check_addr(hf, address + num_bytes)) {
   2e15e:	19a9      	adds	r1, r5, r6
   2e160:	4620      	mov	r0, r4
   2e162:	f7ff fed3 	bl	2df0c <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
   2e166:	b9d8      	cbnz	r0, 2e1a0 <hal_flash_isempty+0x5c>
        return SYS_EINVAL;
    }
    if (hf->hf_itf->hff_is_empty) {
   2e168:	6823      	ldr	r3, [r4, #0]
   2e16a:	691f      	ldr	r7, [r3, #16]
   2e16c:	b15f      	cbz	r7, 2e186 <hal_flash_isempty+0x42>
        rc = hf->hf_itf->hff_is_empty(hf, address, dst, num_bytes);
   2e16e:	4633      	mov	r3, r6
   2e170:	4642      	mov	r2, r8
   2e172:	4629      	mov	r1, r5
   2e174:	4620      	mov	r0, r4
   2e176:	47b8      	blx	r7
        if (rc < 0) {
   2e178:	2800      	cmp	r0, #0
   2e17a:	db01      	blt.n	2e180 <hal_flash_isempty+0x3c>
            return rc;
        }
    } else {
        return hal_flash_is_erased(hf, address, dst, num_bytes);
    }
}
   2e17c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return SYS_EIO;
   2e180:	f06f 0004 	mvn.w	r0, #4
   2e184:	e7fa      	b.n	2e17c <hal_flash_isempty+0x38>
        return hal_flash_is_erased(hf, address, dst, num_bytes);
   2e186:	4633      	mov	r3, r6
   2e188:	4642      	mov	r2, r8
   2e18a:	4629      	mov	r1, r5
   2e18c:	4620      	mov	r0, r4
   2e18e:	f7ff ffc1 	bl	2e114 <hal_flash_is_erased>
   2e192:	e7f3      	b.n	2e17c <hal_flash_isempty+0x38>
        return SYS_EINVAL;
   2e194:	f06f 0001 	mvn.w	r0, #1
   2e198:	e7f0      	b.n	2e17c <hal_flash_isempty+0x38>
        return SYS_EINVAL;
   2e19a:	f06f 0001 	mvn.w	r0, #1
   2e19e:	e7ed      	b.n	2e17c <hal_flash_isempty+0x38>
   2e1a0:	f06f 0001 	mvn.w	r0, #1
   2e1a4:	e7ea      	b.n	2e17c <hal_flash_isempty+0x38>

0002e1a6 <hal_flash_isempty_no_buf>:

int
hal_flash_isempty_no_buf(uint8_t id, uint32_t address, uint32_t num_bytes)
{
   2e1a6:	b5f0      	push	{r4, r5, r6, r7, lr}
   2e1a8:	b085      	sub	sp, #20
   2e1aa:	4607      	mov	r7, r0
   2e1ac:	460e      	mov	r6, r1
   2e1ae:	4615      	mov	r5, r2
    uint32_t blksz;
    uint32_t rem;
    uint32_t off;
    int empty;

    for (off = 0; off < num_bytes; off += sizeof buf) {
   2e1b0:	2400      	movs	r4, #0
   2e1b2:	e007      	b.n	2e1c4 <hal_flash_isempty_no_buf+0x1e>
        blksz = sizeof buf;
        if (blksz > rem) {
            blksz = rem;
        }

        empty = hal_flash_isempty(id, address + off, buf, blksz);
   2e1b4:	466a      	mov	r2, sp
   2e1b6:	19a1      	adds	r1, r4, r6
   2e1b8:	4638      	mov	r0, r7
   2e1ba:	f7ff ffc3 	bl	2e144 <hal_flash_isempty>
        if (empty != 1) {
   2e1be:	2801      	cmp	r0, #1
   2e1c0:	d108      	bne.n	2e1d4 <hal_flash_isempty_no_buf+0x2e>
    for (off = 0; off < num_bytes; off += sizeof buf) {
   2e1c2:	3410      	adds	r4, #16
   2e1c4:	42ac      	cmp	r4, r5
   2e1c6:	d204      	bcs.n	2e1d2 <hal_flash_isempty_no_buf+0x2c>
        rem = num_bytes - off;
   2e1c8:	1b2b      	subs	r3, r5, r4
        if (blksz > rem) {
   2e1ca:	2b0f      	cmp	r3, #15
   2e1cc:	d9f2      	bls.n	2e1b4 <hal_flash_isempty_no_buf+0xe>
        blksz = sizeof buf;
   2e1ce:	2310      	movs	r3, #16
   2e1d0:	e7f0      	b.n	2e1b4 <hal_flash_isempty_no_buf+0xe>
            return empty;
        }
    }

    return 1;
   2e1d2:	2001      	movs	r0, #1
}
   2e1d4:	b005      	add	sp, #20
   2e1d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002e1d8 <nrf52k_flash_wait_ready>:
static int
nrf52k_flash_wait_ready(void)
{
    int i;

    for (i = 0; i < 100000; i++) {
   2e1d8:	2300      	movs	r3, #0
   2e1da:	4a07      	ldr	r2, [pc, #28]	; (2e1f8 <nrf52k_flash_wait_ready+0x20>)
   2e1dc:	4293      	cmp	r3, r2
   2e1de:	dc06      	bgt.n	2e1ee <nrf52k_flash_wait_ready+0x16>
        if (NRF_NVMC->READY == NVMC_READY_READY_Ready) {
   2e1e0:	4a06      	ldr	r2, [pc, #24]	; (2e1fc <nrf52k_flash_wait_ready+0x24>)
   2e1e2:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
   2e1e6:	2a01      	cmp	r2, #1
   2e1e8:	d004      	beq.n	2e1f4 <nrf52k_flash_wait_ready+0x1c>
    for (i = 0; i < 100000; i++) {
   2e1ea:	3301      	adds	r3, #1
   2e1ec:	e7f5      	b.n	2e1da <nrf52k_flash_wait_ready+0x2>
            return 0;
        }
    }
    return -1;
   2e1ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2e1f2:	4770      	bx	lr
            return 0;
   2e1f4:	2000      	movs	r0, #0
}
   2e1f6:	4770      	bx	lr
   2e1f8:	0001869f 	.word	0x0001869f
   2e1fc:	4001e000 	.word	0x4001e000

0002e200 <nrf52k_flash_erase_sector>:
    return rc;
}

static int
nrf52k_flash_erase_sector(const struct hal_flash *dev, uint32_t sector_address)
{
   2e200:	b538      	push	{r3, r4, r5, lr}
   2e202:	460d      	mov	r5, r1
    int sr;
    int rc = -1;

    if (nrf52k_flash_wait_ready()) {
   2e204:	f7ff ffe8 	bl	2e1d8 <nrf52k_flash_wait_ready>
   2e208:	b9f0      	cbnz	r0, 2e248 <nrf52k_flash_erase_sector+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   2e20a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   2e20e:	b672      	cpsid	i
        return -1;
    }
    __HAL_DISABLE_INTERRUPTS(sr);
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Een; /* Enable erase OP */
   2e210:	4b0f      	ldr	r3, [pc, #60]	; (2e250 <nrf52k_flash_erase_sector+0x50>)
   2e212:	2202      	movs	r2, #2
   2e214:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    if (nrf52k_flash_wait_ready()) {
   2e218:	f7ff ffde 	bl	2e1d8 <nrf52k_flash_wait_ready>
   2e21c:	b148      	cbz	r0, 2e232 <nrf52k_flash_erase_sector+0x32>
    int rc = -1;
   2e21e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    if (nrf52k_flash_wait_ready()) {
        goto out;
    }
    rc = 0;
out:
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren; /* Disable erase OP */
   2e222:	4a0b      	ldr	r2, [pc, #44]	; (2e250 <nrf52k_flash_erase_sector+0x50>)
   2e224:	2100      	movs	r1, #0
   2e226:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
    __HAL_ENABLE_INTERRUPTS(sr);
   2e22a:	b904      	cbnz	r4, 2e22e <nrf52k_flash_erase_sector+0x2e>
  __ASM volatile ("cpsie i" : : : "memory");
   2e22c:	b662      	cpsie	i
    return rc;
}
   2e22e:	4618      	mov	r0, r3
   2e230:	bd38      	pop	{r3, r4, r5, pc}
    NRF_NVMC->ERASEPAGE = sector_address;
   2e232:	4b07      	ldr	r3, [pc, #28]	; (2e250 <nrf52k_flash_erase_sector+0x50>)
   2e234:	f8c3 5508 	str.w	r5, [r3, #1288]	; 0x508
    if (nrf52k_flash_wait_ready()) {
   2e238:	f7ff ffce 	bl	2e1d8 <nrf52k_flash_wait_ready>
   2e23c:	4603      	mov	r3, r0
   2e23e:	2800      	cmp	r0, #0
   2e240:	d0ef      	beq.n	2e222 <nrf52k_flash_erase_sector+0x22>
    int rc = -1;
   2e242:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2e246:	e7ec      	b.n	2e222 <nrf52k_flash_erase_sector+0x22>
        return -1;
   2e248:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2e24c:	e7ef      	b.n	2e22e <nrf52k_flash_erase_sector+0x2e>
   2e24e:	bf00      	nop
   2e250:	4001e000 	.word	0x4001e000

0002e254 <nrf52k_flash_init>:

static int
nrf52k_flash_init(const struct hal_flash *dev)
{
    return 0;
}
   2e254:	2000      	movs	r0, #0
   2e256:	4770      	bx	lr

0002e258 <nrf52k_flash_sector_info>:
    assert(idx < nrf52k_flash_dev.hf_sector_cnt);
   2e258:	29ff      	cmp	r1, #255	; 0xff
   2e25a:	dc06      	bgt.n	2e26a <nrf52k_flash_sector_info+0x12>
    *address = idx * NRF52K_FLASH_SECTOR_SZ;
   2e25c:	0309      	lsls	r1, r1, #12
   2e25e:	6011      	str	r1, [r2, #0]
    *sz = NRF52K_FLASH_SECTOR_SZ;
   2e260:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   2e264:	601a      	str	r2, [r3, #0]
}
   2e266:	2000      	movs	r0, #0
   2e268:	4770      	bx	lr
{
   2e26a:	b508      	push	{r3, lr}
    assert(idx < nrf52k_flash_dev.hf_sector_cnt);
   2e26c:	f7dd ffbc 	bl	c1e8 <hal_debugger_connected>
   2e270:	b100      	cbz	r0, 2e274 <nrf52k_flash_sector_info+0x1c>
   2e272:	be01      	bkpt	0x0001
   2e274:	2300      	movs	r3, #0
   2e276:	461a      	mov	r2, r3
   2e278:	4619      	mov	r1, r3
   2e27a:	4618      	mov	r0, r3
   2e27c:	f7de fc68 	bl	cb50 <__assert_func>

0002e280 <nrf52k_flash_write>:
{
   2e280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2e284:	b082      	sub	sp, #8
   2e286:	460d      	mov	r5, r1
   2e288:	4616      	mov	r6, r2
   2e28a:	461c      	mov	r4, r3
    if (nrf52k_flash_wait_ready()) {
   2e28c:	f7ff ffa4 	bl	2e1d8 <nrf52k_flash_wait_ready>
   2e290:	2800      	cmp	r0, #0
   2e292:	d158      	bne.n	2e346 <nrf52k_flash_write+0xc6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   2e294:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   2e298:	b672      	cpsid	i
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen; /* Enable erase OP */
   2e29a:	4b2c      	ldr	r3, [pc, #176]	; (2e34c <nrf52k_flash_write+0xcc>)
   2e29c:	2201      	movs	r2, #1
   2e29e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    if (tmp) {
   2e2a2:	f015 0803 	ands.w	r8, r5, #3
   2e2a6:	d10b      	bne.n	2e2c0 <nrf52k_flash_write+0x40>
    while (num_bytes >= sizeof(uint32_t)) {
   2e2a8:	2c03      	cmp	r4, #3
   2e2aa:	d925      	bls.n	2e2f8 <nrf52k_flash_write+0x78>
        if (nrf52k_flash_wait_ready()) {
   2e2ac:	f7ff ff94 	bl	2e1d8 <nrf52k_flash_wait_ready>
   2e2b0:	2800      	cmp	r0, #0
   2e2b2:	d139      	bne.n	2e328 <nrf52k_flash_write+0xa8>
        *(uint32_t *)address = *(uint32_t *)src;
   2e2b4:	f856 3b04 	ldr.w	r3, [r6], #4
   2e2b8:	f845 3b04 	str.w	r3, [r5], #4
        num_bytes -= sizeof(uint32_t);
   2e2bc:	3c04      	subs	r4, #4
   2e2be:	e7f3      	b.n	2e2a8 <nrf52k_flash_write+0x28>
        if (nrf52k_flash_wait_ready()) {
   2e2c0:	f7ff ff8a 	bl	2e1d8 <nrf52k_flash_wait_ready>
   2e2c4:	bb68      	cbnz	r0, 2e322 <nrf52k_flash_write+0xa2>
        val = *(uint32_t *)(address & ~0x3);
   2e2c6:	f025 0a03 	bic.w	sl, r5, #3
   2e2ca:	f8da 3000 	ldr.w	r3, [sl]
   2e2ce:	9301      	str	r3, [sp, #4]
        cnt = 4 - tmp;
   2e2d0:	f1c8 0904 	rsb	r9, r8, #4
        if (cnt > num_bytes) {
   2e2d4:	45a1      	cmp	r9, r4
   2e2d6:	d900      	bls.n	2e2da <nrf52k_flash_write+0x5a>
            cnt = num_bytes;
   2e2d8:	46a1      	mov	r9, r4
        memcpy((uint8_t *)&val + tmp, src, cnt);
   2e2da:	464a      	mov	r2, r9
   2e2dc:	4631      	mov	r1, r6
   2e2de:	ab01      	add	r3, sp, #4
   2e2e0:	eb03 0008 	add.w	r0, r3, r8
   2e2e4:	f7e0 fb5c 	bl	e9a0 <memcpy>
        *(uint32_t *)(address & ~0x3) = val;
   2e2e8:	9b01      	ldr	r3, [sp, #4]
   2e2ea:	f8ca 3000 	str.w	r3, [sl]
        address += cnt;
   2e2ee:	444d      	add	r5, r9
        num_bytes -= cnt;
   2e2f0:	eba4 0409 	sub.w	r4, r4, r9
        src += cnt;
   2e2f4:	444e      	add	r6, r9
   2e2f6:	e7d7      	b.n	2e2a8 <nrf52k_flash_write+0x28>
    if (num_bytes) {
   2e2f8:	b164      	cbz	r4, 2e314 <nrf52k_flash_write+0x94>
        val = *(uint32_t *)address;
   2e2fa:	682b      	ldr	r3, [r5, #0]
   2e2fc:	a802      	add	r0, sp, #8
   2e2fe:	f840 3d04 	str.w	r3, [r0, #-4]!
        memcpy(&val, src, num_bytes);
   2e302:	4622      	mov	r2, r4
   2e304:	4631      	mov	r1, r6
   2e306:	f7e0 fb4b 	bl	e9a0 <memcpy>
        if (nrf52k_flash_wait_ready()) {
   2e30a:	f7ff ff65 	bl	2e1d8 <nrf52k_flash_wait_ready>
   2e30e:	b9b8      	cbnz	r0, 2e340 <nrf52k_flash_write+0xc0>
        *(uint32_t *)address = val;
   2e310:	9b01      	ldr	r3, [sp, #4]
   2e312:	602b      	str	r3, [r5, #0]
    if (nrf52k_flash_wait_ready()) {
   2e314:	f7ff ff60 	bl	2e1d8 <nrf52k_flash_wait_ready>
   2e318:	4603      	mov	r3, r0
   2e31a:	b138      	cbz	r0, 2e32c <nrf52k_flash_write+0xac>
        rc = -1;
   2e31c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2e320:	e004      	b.n	2e32c <nrf52k_flash_write+0xac>
    int rc = -1;
   2e322:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2e326:	e001      	b.n	2e32c <nrf52k_flash_write+0xac>
   2e328:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren;
   2e32c:	4a07      	ldr	r2, [pc, #28]	; (2e34c <nrf52k_flash_write+0xcc>)
   2e32e:	2100      	movs	r1, #0
   2e330:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
    __HAL_ENABLE_INTERRUPTS(sr);
   2e334:	b907      	cbnz	r7, 2e338 <nrf52k_flash_write+0xb8>
  __ASM volatile ("cpsie i" : : : "memory");
   2e336:	b662      	cpsie	i
}
   2e338:	4618      	mov	r0, r3
   2e33a:	b002      	add	sp, #8
   2e33c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    int rc = -1;
   2e340:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2e344:	e7f2      	b.n	2e32c <nrf52k_flash_write+0xac>
        return -1;
   2e346:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2e34a:	e7f5      	b.n	2e338 <nrf52k_flash_write+0xb8>
   2e34c:	4001e000 	.word	0x4001e000

0002e350 <nrf52k_flash_read>:
{
   2e350:	b508      	push	{r3, lr}
   2e352:	4610      	mov	r0, r2
    memcpy(dst, (void *)address, num_bytes);
   2e354:	461a      	mov	r2, r3
   2e356:	f7e0 fb23 	bl	e9a0 <memcpy>
}
   2e35a:	2000      	movs	r0, #0
   2e35c:	bd08      	pop	{r3, pc}
	...

0002e360 <nrf52_timer_handler>:
    }
}

static void
nrf52_timer_handler(void)
{
   2e360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int ticks;
    os_sr_t sr;
    uint32_t counter;

    os_trace_isr_enter();
    OS_ENTER_CRITICAL(sr);
   2e362:	f7e0 f8e7 	bl	e534 <os_arch_save_sr>
    return OS_TICK_TIMER->COUNTER;
   2e366:	4b39      	ldr	r3, [pc, #228]	; (2e44c <nrf52_timer_handler+0xec>)
   2e368:	f8d3 5504 	ldr.w	r5, [r3, #1284]	; 0x504

    /* Calculate elapsed ticks and advance OS time. */

    counter = nrf52_os_tick_counter();
    delta = sub24(counter, g_hal_os_tick.lastocmp);
   2e36c:	4b38      	ldr	r3, [pc, #224]	; (2e450 <nrf52_timer_handler+0xf0>)
   2e36e:	689b      	ldr	r3, [r3, #8]
    assert(x <= 0xffffff);
   2e370:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
   2e374:	d229      	bcs.n	2e3ca <nrf52_timer_handler+0x6a>
   2e376:	4606      	mov	r6, r0
    assert(y <= 0xffffff);
   2e378:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   2e37c:	d22f      	bcs.n	2e3de <nrf52_timer_handler+0x7e>
    result = x - y;
   2e37e:	1aed      	subs	r5, r5, r3
    if (result & 0x800000) {
   2e380:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
   2e384:	d135      	bne.n	2e3f2 <nrf52_timer_handler+0x92>
        return (result & 0x007fffff);
   2e386:	f3c5 0516 	ubfx	r5, r5, #0, #23
    ticks = delta / g_hal_os_tick.ticks_per_ostick;
   2e38a:	4f31      	ldr	r7, [pc, #196]	; (2e450 <nrf52_timer_handler+0xf0>)
   2e38c:	683c      	ldr	r4, [r7, #0]
   2e38e:	fb95 f5f4 	sdiv	r5, r5, r4
    os_time_advance(ticks);
   2e392:	4628      	mov	r0, r5
   2e394:	f7e0 f812 	bl	e3bc <os_time_advance>

    /* Clear timer interrupt */
    OS_TICK_TIMER->EVENTS_COMPARE[OS_TICK_CMPREG] = 0;
   2e398:	4b2c      	ldr	r3, [pc, #176]	; (2e44c <nrf52_timer_handler+0xec>)
   2e39a:	2200      	movs	r2, #0
   2e39c:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

    /* Update the time associated with the most recent tick */
    g_hal_os_tick.lastocmp = (g_hal_os_tick.lastocmp +
   2e3a0:	68bb      	ldr	r3, [r7, #8]
        (ticks * g_hal_os_tick.ticks_per_ostick)) & 0xffffff;
   2e3a2:	683c      	ldr	r4, [r7, #0]
    g_hal_os_tick.lastocmp = (g_hal_os_tick.lastocmp +
   2e3a4:	fb05 3304 	mla	r3, r5, r4, r3
        (ticks * g_hal_os_tick.ticks_per_ostick)) & 0xffffff;
   2e3a8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    g_hal_os_tick.lastocmp = (g_hal_os_tick.lastocmp +
   2e3ac:	60bb      	str	r3, [r7, #8]

    /* Update the output compare to interrupt at the next tick */
    nrf52_os_tick_set_ocmp(g_hal_os_tick.lastocmp + g_hal_os_tick.ticks_per_ostick);
   2e3ae:	441c      	add	r4, r3
    OS_ASSERT_CRITICAL();
   2e3b0:	f7e0 f8c9 	bl	e546 <os_arch_in_critical>
   2e3b4:	bba8      	cbnz	r0, 2e422 <nrf52_timer_handler+0xc2>
   2e3b6:	f7dd ff17 	bl	c1e8 <hal_debugger_connected>
   2e3ba:	b100      	cbz	r0, 2e3be <nrf52_timer_handler+0x5e>
   2e3bc:	be01      	bkpt	0x0001
   2e3be:	2300      	movs	r3, #0
   2e3c0:	461a      	mov	r2, r3
   2e3c2:	4619      	mov	r1, r3
   2e3c4:	4618      	mov	r0, r3
   2e3c6:	f7de fbc3 	bl	cb50 <__assert_func>
    assert(x <= 0xffffff);
   2e3ca:	f7dd ff0d 	bl	c1e8 <hal_debugger_connected>
   2e3ce:	b100      	cbz	r0, 2e3d2 <nrf52_timer_handler+0x72>
   2e3d0:	be01      	bkpt	0x0001
   2e3d2:	2300      	movs	r3, #0
   2e3d4:	461a      	mov	r2, r3
   2e3d6:	4619      	mov	r1, r3
   2e3d8:	4618      	mov	r0, r3
   2e3da:	f7de fbb9 	bl	cb50 <__assert_func>
    assert(y <= 0xffffff);
   2e3de:	f7dd ff03 	bl	c1e8 <hal_debugger_connected>
   2e3e2:	b100      	cbz	r0, 2e3e6 <nrf52_timer_handler+0x86>
   2e3e4:	be01      	bkpt	0x0001
   2e3e6:	2300      	movs	r3, #0
   2e3e8:	461a      	mov	r2, r3
   2e3ea:	4619      	mov	r1, r3
   2e3ec:	4618      	mov	r0, r3
   2e3ee:	f7de fbaf 	bl	cb50 <__assert_func>
        return (result | 0xff800000);
   2e3f2:	ea6f 2545 	mvn.w	r5, r5, lsl #9
   2e3f6:	ea6f 2555 	mvn.w	r5, r5, lsr #9
   2e3fa:	e7c6      	b.n	2e38a <nrf52_timer_handler+0x2a>
    assert(y <= 0xffffff);
   2e3fc:	f7dd fef4 	bl	c1e8 <hal_debugger_connected>
   2e400:	b100      	cbz	r0, 2e404 <nrf52_timer_handler+0xa4>
   2e402:	be01      	bkpt	0x0001
   2e404:	2300      	movs	r3, #0
   2e406:	461a      	mov	r2, r3
   2e408:	4619      	mov	r1, r3
   2e40a:	4618      	mov	r0, r3
   2e40c:	f7de fba0 	bl	cb50 <__assert_func>
        return (result | 0xff800000);
   2e410:	ea6f 2242 	mvn.w	r2, r2, lsl #9
   2e414:	ea6f 2252 	mvn.w	r2, r2, lsr #9
        if (delta > 2) {
   2e418:	2a02      	cmp	r2, #2
   2e41a:	dc13      	bgt.n	2e444 <nrf52_timer_handler+0xe4>
        ocmp += g_hal_os_tick.ticks_per_ostick;
   2e41c:	4a0c      	ldr	r2, [pc, #48]	; (2e450 <nrf52_timer_handler+0xf0>)
   2e41e:	6814      	ldr	r4, [r2, #0]
   2e420:	441c      	add	r4, r3
        ocmp &= 0xffffff;
   2e422:	f024 437f 	bic.w	r3, r4, #4278190080	; 0xff000000
        OS_TICK_TIMER->CC[OS_TICK_CMPREG] = ocmp;
   2e426:	4a09      	ldr	r2, [pc, #36]	; (2e44c <nrf52_timer_handler+0xec>)
   2e428:	f8c2 354c 	str.w	r3, [r2, #1356]	; 0x54c
    return OS_TICK_TIMER->COUNTER;
   2e42c:	f8d2 2504 	ldr.w	r2, [r2, #1284]	; 0x504
    assert(y <= 0xffffff);
   2e430:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
   2e434:	d2e2      	bcs.n	2e3fc <nrf52_timer_handler+0x9c>
    result = x - y;
   2e436:	1a9a      	subs	r2, r3, r2
    if (result & 0x800000) {
   2e438:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
   2e43c:	d1e8      	bne.n	2e410 <nrf52_timer_handler+0xb0>
        return (result & 0x007fffff);
   2e43e:	f3c2 0216 	ubfx	r2, r2, #0, #23
   2e442:	e7e9      	b.n	2e418 <nrf52_timer_handler+0xb8>

    OS_EXIT_CRITICAL(sr);
   2e444:	4630      	mov	r0, r6
   2e446:	f7e0 f87b 	bl	e540 <os_arch_restore_sr>
    os_trace_isr_exit();
}
   2e44a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2e44c:	40011000 	.word	0x40011000
   2e450:	200043e4 	.word	0x200043e4

0002e454 <os_tick_idle>:

void
os_tick_idle(os_time_t ticks)
{
   2e454:	b538      	push	{r3, r4, r5, lr}
   2e456:	4605      	mov	r5, r0
    uint32_t ocmp;

    OS_ASSERT_CRITICAL();
   2e458:	f7e0 f875 	bl	e546 <os_arch_in_critical>
   2e45c:	b1c0      	cbz	r0, 2e490 <os_tick_idle+0x3c>

    if (ticks > 0) {
   2e45e:	2d00      	cmp	r5, #0
   2e460:	d044      	beq.n	2e4ec <os_tick_idle+0x98>
        /*
         * Enter tickless regime during long idle durations.
         */
        if (ticks > g_hal_os_tick.max_idle_ticks) {
   2e462:	4b26      	ldr	r3, [pc, #152]	; (2e4fc <os_tick_idle+0xa8>)
   2e464:	685b      	ldr	r3, [r3, #4]
   2e466:	42ab      	cmp	r3, r5
   2e468:	d200      	bcs.n	2e46c <os_tick_idle+0x18>
            ticks = g_hal_os_tick.max_idle_ticks;
   2e46a:	461d      	mov	r5, r3
        }
        ocmp = g_hal_os_tick.lastocmp + (ticks*g_hal_os_tick.ticks_per_ostick);
   2e46c:	4b23      	ldr	r3, [pc, #140]	; (2e4fc <os_tick_idle+0xa8>)
   2e46e:	689c      	ldr	r4, [r3, #8]
   2e470:	681a      	ldr	r2, [r3, #0]
   2e472:	fb05 4402 	mla	r4, r5, r2, r4
    OS_ASSERT_CRITICAL();
   2e476:	f7e0 f866 	bl	e546 <os_arch_in_critical>
   2e47a:	bb30      	cbnz	r0, 2e4ca <os_tick_idle+0x76>
   2e47c:	f7dd feb4 	bl	c1e8 <hal_debugger_connected>
   2e480:	b100      	cbz	r0, 2e484 <os_tick_idle+0x30>
   2e482:	be01      	bkpt	0x0001
   2e484:	2300      	movs	r3, #0
   2e486:	461a      	mov	r2, r3
   2e488:	4619      	mov	r1, r3
   2e48a:	4618      	mov	r0, r3
   2e48c:	f7de fb60 	bl	cb50 <__assert_func>
    OS_ASSERT_CRITICAL();
   2e490:	f7dd feaa 	bl	c1e8 <hal_debugger_connected>
   2e494:	b100      	cbz	r0, 2e498 <os_tick_idle+0x44>
   2e496:	be01      	bkpt	0x0001
   2e498:	2300      	movs	r3, #0
   2e49a:	461a      	mov	r2, r3
   2e49c:	4619      	mov	r1, r3
   2e49e:	4618      	mov	r0, r3
   2e4a0:	f7de fb56 	bl	cb50 <__assert_func>
    assert(y <= 0xffffff);
   2e4a4:	f7dd fea0 	bl	c1e8 <hal_debugger_connected>
   2e4a8:	b100      	cbz	r0, 2e4ac <os_tick_idle+0x58>
   2e4aa:	be01      	bkpt	0x0001
   2e4ac:	2300      	movs	r3, #0
   2e4ae:	461a      	mov	r2, r3
   2e4b0:	4619      	mov	r1, r3
   2e4b2:	4618      	mov	r0, r3
   2e4b4:	f7de fb4c 	bl	cb50 <__assert_func>
        return (result | 0xff800000);
   2e4b8:	ea6f 2343 	mvn.w	r3, r3, lsl #9
   2e4bc:	ea6f 2353 	mvn.w	r3, r3, lsr #9
        if (delta > 2) {
   2e4c0:	2b02      	cmp	r3, #2
   2e4c2:	dc13      	bgt.n	2e4ec <os_tick_idle+0x98>
        ocmp += g_hal_os_tick.ticks_per_ostick;
   2e4c4:	4b0d      	ldr	r3, [pc, #52]	; (2e4fc <os_tick_idle+0xa8>)
   2e4c6:	681c      	ldr	r4, [r3, #0]
   2e4c8:	4414      	add	r4, r2
        ocmp &= 0xffffff;
   2e4ca:	f024 427f 	bic.w	r2, r4, #4278190080	; 0xff000000
        OS_TICK_TIMER->CC[OS_TICK_CMPREG] = ocmp;
   2e4ce:	4b0c      	ldr	r3, [pc, #48]	; (2e500 <os_tick_idle+0xac>)
   2e4d0:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
    return OS_TICK_TIMER->COUNTER;
   2e4d4:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
    assert(y <= 0xffffff);
   2e4d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   2e4dc:	d2e2      	bcs.n	2e4a4 <os_tick_idle+0x50>
    result = x - y;
   2e4de:	1ad3      	subs	r3, r2, r3
    if (result & 0x800000) {
   2e4e0:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   2e4e4:	d1e8      	bne.n	2e4b8 <os_tick_idle+0x64>
        return (result & 0x007fffff);
   2e4e6:	f3c3 0316 	ubfx	r3, r3, #0, #23
   2e4ea:	e7e9      	b.n	2e4c0 <os_tick_idle+0x6c>
  __ASM volatile ("dsb 0xF":::"memory");
   2e4ec:	f3bf 8f4f 	dsb	sy
        nrf52_os_tick_set_ocmp(ocmp);
    }

    __DSB();
    __WFI();
   2e4f0:	bf30      	wfi

    if (ticks > 0) {
   2e4f2:	b905      	cbnz	r5, 2e4f6 <os_tick_idle+0xa2>
         * Update OS time before anything else when coming out of
         * the tickless regime.
         */
        nrf52_timer_handler();
    }
}
   2e4f4:	bd38      	pop	{r3, r4, r5, pc}
        nrf52_timer_handler();
   2e4f6:	f7ff ff33 	bl	2e360 <nrf52_timer_handler>
}
   2e4fa:	e7fb      	b.n	2e4f4 <os_tick_idle+0xa0>
   2e4fc:	200043e4 	.word	0x200043e4
   2e500:	40011000 	.word	0x40011000

0002e504 <os_tick_init>:

void
os_tick_init(uint32_t os_ticks_per_sec, int prio)
{
   2e504:	b570      	push	{r4, r5, r6, lr}
    uint32_t sr;

    assert(RTC_FREQ % os_ticks_per_sec == 0);
   2e506:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   2e50a:	fbb3 f3f0 	udiv	r3, r3, r0
   2e50e:	fb00 f303 	mul.w	r3, r0, r3
   2e512:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   2e516:	d136      	bne.n	2e586 <os_tick_init+0x82>
   2e518:	460c      	mov	r4, r1

    g_hal_os_tick.lastocmp = 0;
   2e51a:	4d20      	ldr	r5, [pc, #128]	; (2e59c <os_tick_init+0x98>)
   2e51c:	2600      	movs	r6, #0
   2e51e:	60ae      	str	r6, [r5, #8]
    g_hal_os_tick.ticks_per_ostick = RTC_FREQ / os_ticks_per_sec;
   2e520:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   2e524:	fbb3 f0f0 	udiv	r0, r3, r0
   2e528:	6028      	str	r0, [r5, #0]
    /*
     * The maximum number of OS ticks allowed to elapse during idle is
     * limited to 1/4th the number of timer ticks before the 24-bit counter
     * rolls over.
     */
    g_hal_os_tick.max_idle_ticks = (1UL << 22) / g_hal_os_tick.ticks_per_ostick;
   2e52a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   2e52e:	fbb3 f0f0 	udiv	r0, r3, r0
   2e532:	6068      	str	r0, [r5, #4]

    /* disable interrupts */
    OS_ENTER_CRITICAL(sr);
   2e534:	f7df fffe 	bl	e534 <os_arch_save_sr>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2e538:	0164      	lsls	r4, r4, #5
   2e53a:	b2e4      	uxtb	r4, r4
   2e53c:	4b18      	ldr	r3, [pc, #96]	; (2e5a0 <os_tick_init+0x9c>)
   2e53e:	f883 4311 	strb.w	r4, [r3, #785]	; 0x311
  uint32_t vectors = (uint32_t )SCB->VTOR;
   2e542:	4a18      	ldr	r2, [pc, #96]	; (2e5a4 <os_tick_init+0xa0>)
   2e544:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   2e546:	4918      	ldr	r1, [pc, #96]	; (2e5a8 <os_tick_init+0xa4>)
   2e548:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2e54c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   2e550:	601a      	str	r2, [r3, #0]

    /*
     * Program the OS_TICK_TIMER to operate at 32KHz and trigger an output
     * compare interrupt at a rate of 'os_ticks_per_sec'.
     */
    OS_TICK_TIMER->TASKS_STOP = 1;
   2e552:	f103 43c0 	add.w	r3, r3, #1610612736	; 0x60000000
   2e556:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
   2e55a:	2201      	movs	r2, #1
   2e55c:	605a      	str	r2, [r3, #4]
    OS_TICK_TIMER->TASKS_CLEAR = 1;
   2e55e:	609a      	str	r2, [r3, #8]

    OS_TICK_TIMER->EVTENCLR = 0xffffffff;
   2e560:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2e564:	f8c3 1348 	str.w	r1, [r3, #840]	; 0x348
    OS_TICK_TIMER->INTENCLR = 0xffffffff;
   2e568:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    OS_TICK_TIMER->INTENSET = RTC_COMPARE_INT_MASK(OS_TICK_CMPREG);
   2e56c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   2e570:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

    OS_TICK_TIMER->EVENTS_COMPARE[OS_TICK_CMPREG] = 0;
   2e574:	f8c3 614c 	str.w	r6, [r3, #332]	; 0x14c
    OS_TICK_TIMER->CC[OS_TICK_CMPREG] = g_hal_os_tick.ticks_per_ostick;
   2e578:	6829      	ldr	r1, [r5, #0]
   2e57a:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c

    OS_TICK_TIMER->TASKS_START = 1;
   2e57e:	601a      	str	r2, [r3, #0]

    OS_EXIT_CRITICAL(sr);
   2e580:	f7df ffde 	bl	e540 <os_arch_restore_sr>
}
   2e584:	bd70      	pop	{r4, r5, r6, pc}
    assert(RTC_FREQ % os_ticks_per_sec == 0);
   2e586:	f7dd fe2f 	bl	c1e8 <hal_debugger_connected>
   2e58a:	b100      	cbz	r0, 2e58e <os_tick_init+0x8a>
   2e58c:	be01      	bkpt	0x0001
   2e58e:	2300      	movs	r3, #0
   2e590:	461a      	mov	r2, r3
   2e592:	4619      	mov	r1, r3
   2e594:	4618      	mov	r0, r3
   2e596:	f7de fadb 	bl	cb50 <__assert_func>
   2e59a:	bf00      	nop
   2e59c:	200043e4 	.word	0x200043e4
   2e5a0:	e000e100 	.word	0xe000e100
   2e5a4:	e000ed00 	.word	0xe000ed00
   2e5a8:	0002e361 	.word	0x0002e361

0002e5ac <nrf52_hal_wdt_default_handler>:
#include "mcu/cmsis_nvic.h"
#include "nrf.h"

static void
nrf52_hal_wdt_default_handler(void)
{
   2e5ac:	b508      	push	{r3, lr}
    assert(0);
   2e5ae:	f7dd fe1b 	bl	c1e8 <hal_debugger_connected>
   2e5b2:	b100      	cbz	r0, 2e5b6 <nrf52_hal_wdt_default_handler+0xa>
   2e5b4:	be01      	bkpt	0x0001
   2e5b6:	2300      	movs	r3, #0
   2e5b8:	461a      	mov	r2, r3
   2e5ba:	4619      	mov	r1, r3
   2e5bc:	4618      	mov	r0, r3
   2e5be:	f7de fac7 	bl	cb50 <__assert_func>
	...

0002e5c4 <nrf52_wdt_irq_handler>:
}

/**@brief WDT interrupt handler. */
static void
nrf52_wdt_irq_handler(void)
{
   2e5c4:	b508      	push	{r3, lr}
    os_trace_isr_enter();
    if (NRF_WDT->INTENSET & WDT_INTENSET_TIMEOUT_Msk) {
   2e5c6:	4b06      	ldr	r3, [pc, #24]	; (2e5e0 <nrf52_wdt_irq_handler+0x1c>)
   2e5c8:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
   2e5cc:	f013 0f01 	tst.w	r3, #1
   2e5d0:	d100      	bne.n	2e5d4 <nrf52_wdt_irq_handler+0x10>
        NRF_WDT->EVENTS_TIMEOUT = 0;
        nrf52_hal_wdt_default_handler();
    }
    os_trace_isr_exit();
}
   2e5d2:	bd08      	pop	{r3, pc}
        NRF_WDT->EVENTS_TIMEOUT = 0;
   2e5d4:	4b02      	ldr	r3, [pc, #8]	; (2e5e0 <nrf52_wdt_irq_handler+0x1c>)
   2e5d6:	2200      	movs	r2, #0
   2e5d8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        nrf52_hal_wdt_default_handler();
   2e5dc:	f7ff ffe6 	bl	2e5ac <nrf52_hal_wdt_default_handler>
   2e5e0:	40010000 	.word	0x40010000

0002e5e4 <hal_watchdog_init>:

int
hal_watchdog_init(uint32_t expire_msecs)
{
   2e5e4:	b508      	push	{r3, lr}
    NRF_WDT->CONFIG = WDT_CONFIG_SLEEP_Msk;
   2e5e6:	4b19      	ldr	r3, [pc, #100]	; (2e64c <hal_watchdog_init+0x68>)
   2e5e8:	2201      	movs	r2, #1
   2e5ea:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c

    if (expire_msecs >= 44739243) {
   2e5ee:	4b18      	ldr	r3, [pc, #96]	; (2e650 <hal_watchdog_init+0x6c>)
   2e5f0:	4298      	cmp	r0, r3
   2e5f2:	d821      	bhi.n	2e638 <hal_watchdog_init+0x54>
        /* maximum allowed time is near 12.5 hours! */
        assert(0);
    } else {
        NRF_WDT->CRV = (expire_msecs * 32) + ((expire_msecs * 96) / 125);
   2e5f4:	eb00 0240 	add.w	r2, r0, r0, lsl #1
   2e5f8:	0153      	lsls	r3, r2, #5
   2e5fa:	4a16      	ldr	r2, [pc, #88]	; (2e654 <hal_watchdog_init+0x70>)
   2e5fc:	fba2 2303 	umull	r2, r3, r2, r3
   2e600:	08db      	lsrs	r3, r3, #3
   2e602:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   2e606:	4b11      	ldr	r3, [pc, #68]	; (2e64c <hal_watchdog_init+0x68>)
   2e608:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
  uint32_t vectors = (uint32_t )SCB->VTOR;
   2e60c:	4a12      	ldr	r2, [pc, #72]	; (2e658 <hal_watchdog_init+0x74>)
   2e60e:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   2e610:	4912      	ldr	r1, [pc, #72]	; (2e65c <hal_watchdog_init+0x78>)
   2e612:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2e616:	4a12      	ldr	r2, [pc, #72]	; (2e660 <hal_watchdog_init+0x7c>)
   2e618:	21e0      	movs	r1, #224	; 0xe0
   2e61a:	f882 1310 	strb.w	r1, [r2, #784]	; 0x310
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2e61e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   2e622:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2e626:	6011      	str	r1, [r2, #0]

    NVIC_SetVector(WDT_IRQn, (uint32_t) nrf52_wdt_irq_handler);
    NVIC_SetPriority(WDT_IRQn, (1 << __NVIC_PRIO_BITS) - 1);
    NVIC_ClearPendingIRQ(WDT_IRQn);
    NVIC_EnableIRQ(WDT_IRQn);
    NRF_WDT->RREN |= 0x1;
   2e628:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
   2e62c:	f042 0201 	orr.w	r2, r2, #1
   2e630:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508

    return (0);
}
   2e634:	2000      	movs	r0, #0
   2e636:	bd08      	pop	{r3, pc}
        assert(0);
   2e638:	f7dd fdd6 	bl	c1e8 <hal_debugger_connected>
   2e63c:	b100      	cbz	r0, 2e640 <hal_watchdog_init+0x5c>
   2e63e:	be01      	bkpt	0x0001
   2e640:	2300      	movs	r3, #0
   2e642:	461a      	mov	r2, r3
   2e644:	4619      	mov	r1, r3
   2e646:	4618      	mov	r0, r3
   2e648:	f7de fa82 	bl	cb50 <__assert_func>
   2e64c:	40010000 	.word	0x40010000
   2e650:	02aaaaaa 	.word	0x02aaaaaa
   2e654:	10624dd3 	.word	0x10624dd3
   2e658:	e000ed00 	.word	0xe000ed00
   2e65c:	0002e5c5 	.word	0x0002e5c5
   2e660:	e000e100 	.word	0xe000e100

0002e664 <hal_watchdog_enable>:

void
hal_watchdog_enable(void)
{
    NRF_WDT->INTENSET = WDT_INTENSET_TIMEOUT_Msk;
   2e664:	4b02      	ldr	r3, [pc, #8]	; (2e670 <hal_watchdog_enable+0xc>)
   2e666:	2201      	movs	r2, #1
   2e668:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    NRF_WDT->TASKS_START = 1;
   2e66c:	601a      	str	r2, [r3, #0]
}
   2e66e:	4770      	bx	lr
   2e670:	40010000 	.word	0x40010000

0002e674 <hal_watchdog_tickle>:

void
hal_watchdog_tickle(void)
{
    NRF_WDT->RR[0] = WDT_RR_RR_Reload;
   2e674:	4b02      	ldr	r3, [pc, #8]	; (2e680 <hal_watchdog_tickle+0xc>)
   2e676:	4a03      	ldr	r2, [pc, #12]	; (2e684 <hal_watchdog_tickle+0x10>)
   2e678:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
}
   2e67c:	4770      	bx	lr
   2e67e:	bf00      	nop
   2e680:	40010000 	.word	0x40010000
   2e684:	6e524635 	.word	0x6e524635

0002e688 <nrf52_clock_hfxo_request>:
 *
 * @return int 0: hfxo was already on. 1: hfxo was turned on.
 */
int
nrf52_clock_hfxo_request(void)
{
   2e688:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   2e68a:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   2e68e:	b672      	cpsid	i
    int started;
    uint32_t ctx;

    started = 0;
    __HAL_DISABLE_INTERRUPTS(ctx);
    assert(nrf52_clock_hfxo_refcnt < 0xff);
   2e690:	4b0d      	ldr	r3, [pc, #52]	; (2e6c8 <nrf52_clock_hfxo_request+0x40>)
   2e692:	781b      	ldrb	r3, [r3, #0]
   2e694:	2bff      	cmp	r3, #255	; 0xff
   2e696:	d00b      	beq.n	2e6b0 <nrf52_clock_hfxo_request+0x28>
    if (nrf52_clock_hfxo_refcnt == 0) {
   2e698:	b9a3      	cbnz	r3, 2e6c4 <nrf52_clock_hfxo_request+0x3c>
        NRF_CLOCK->TASKS_HFCLKSTART = 1;
   2e69a:	2001      	movs	r0, #1
   2e69c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2e6a0:	6018      	str	r0, [r3, #0]
        started = 1;
    }
    ++nrf52_clock_hfxo_refcnt;
   2e6a2:	4a09      	ldr	r2, [pc, #36]	; (2e6c8 <nrf52_clock_hfxo_request+0x40>)
   2e6a4:	7813      	ldrb	r3, [r2, #0]
   2e6a6:	3301      	adds	r3, #1
   2e6a8:	7013      	strb	r3, [r2, #0]
    __HAL_ENABLE_INTERRUPTS(ctx);
   2e6aa:	b901      	cbnz	r1, 2e6ae <nrf52_clock_hfxo_request+0x26>
  __ASM volatile ("cpsie i" : : : "memory");
   2e6ac:	b662      	cpsie	i

    return started;
}
   2e6ae:	bd08      	pop	{r3, pc}
    assert(nrf52_clock_hfxo_refcnt < 0xff);
   2e6b0:	f7dd fd9a 	bl	c1e8 <hal_debugger_connected>
   2e6b4:	b100      	cbz	r0, 2e6b8 <nrf52_clock_hfxo_request+0x30>
   2e6b6:	be01      	bkpt	0x0001
   2e6b8:	2300      	movs	r3, #0
   2e6ba:	461a      	mov	r2, r3
   2e6bc:	4619      	mov	r1, r3
   2e6be:	4618      	mov	r0, r3
   2e6c0:	f7de fa46 	bl	cb50 <__assert_func>
    started = 0;
   2e6c4:	2000      	movs	r0, #0
   2e6c6:	e7ec      	b.n	2e6a2 <nrf52_clock_hfxo_request+0x1a>
   2e6c8:	200032d1 	.word	0x200032d1

0002e6cc <nrf52_clock_hfxo_release>:
 * @return int 0: HFXO not stopped by this call (others using it) 1: HFXO
 *         stopped.
 */
int
nrf52_clock_hfxo_release(void)
{
   2e6cc:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   2e6ce:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   2e6d2:	b672      	cpsid	i
    int stopped;
    uint32_t ctx;

    stopped = 0;
    __HAL_DISABLE_INTERRUPTS(ctx);
    assert(nrf52_clock_hfxo_refcnt != 0);
   2e6d4:	4b0d      	ldr	r3, [pc, #52]	; (2e70c <nrf52_clock_hfxo_release+0x40>)
   2e6d6:	781b      	ldrb	r3, [r3, #0]
   2e6d8:	b15b      	cbz	r3, 2e6f2 <nrf52_clock_hfxo_release+0x26>
    --nrf52_clock_hfxo_refcnt;
   2e6da:	3b01      	subs	r3, #1
   2e6dc:	b2db      	uxtb	r3, r3
   2e6de:	490b      	ldr	r1, [pc, #44]	; (2e70c <nrf52_clock_hfxo_release+0x40>)
   2e6e0:	700b      	strb	r3, [r1, #0]
    if (nrf52_clock_hfxo_refcnt == 0) {
   2e6e2:	b983      	cbnz	r3, 2e706 <nrf52_clock_hfxo_release+0x3a>
        NRF_CLOCK->TASKS_HFCLKSTOP = 1;
   2e6e4:	2001      	movs	r0, #1
   2e6e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2e6ea:	6058      	str	r0, [r3, #4]
        stopped = 1;
    }
    __HAL_ENABLE_INTERRUPTS(ctx);
   2e6ec:	b902      	cbnz	r2, 2e6f0 <nrf52_clock_hfxo_release+0x24>
  __ASM volatile ("cpsie i" : : : "memory");
   2e6ee:	b662      	cpsie	i

    return stopped;
}
   2e6f0:	bd08      	pop	{r3, pc}
    assert(nrf52_clock_hfxo_refcnt != 0);
   2e6f2:	f7dd fd79 	bl	c1e8 <hal_debugger_connected>
   2e6f6:	b100      	cbz	r0, 2e6fa <nrf52_clock_hfxo_release+0x2e>
   2e6f8:	be01      	bkpt	0x0001
   2e6fa:	2300      	movs	r3, #0
   2e6fc:	461a      	mov	r2, r3
   2e6fe:	4619      	mov	r1, r3
   2e700:	4618      	mov	r0, r3
   2e702:	f7de fa25 	bl	cb50 <__assert_func>
    stopped = 0;
   2e706:	2000      	movs	r0, #0
   2e708:	e7f0      	b.n	2e6ec <nrf52_clock_hfxo_release+0x20>
   2e70a:	bf00      	nop
   2e70c:	200032d1 	.word	0x200032d1

0002e710 <hal_bsp_hw_id>:
 * These values are generated at random.
 * DEVICEID[0-1] and DEVICEADDR[0-1].
 */
int
hal_bsp_hw_id(uint8_t *id, int max_len)
{
   2e710:	b570      	push	{r4, r5, r6, lr}
   2e712:	4606      	mov	r6, r0
   2e714:	460c      	mov	r4, r1
    int len, cnt;

    cnt = min(sizeof(NRF_FICR->DEVICEID), max_len);
   2e716:	460d      	mov	r5, r1
   2e718:	2908      	cmp	r1, #8
   2e71a:	bf28      	it	cs
   2e71c:	2508      	movcs	r5, #8
    memcpy(id, (void *)NRF_FICR->DEVICEID, cnt);
   2e71e:	462a      	mov	r2, r5
   2e720:	4906      	ldr	r1, [pc, #24]	; (2e73c <hal_bsp_hw_id+0x2c>)
   2e722:	f7e0 f93d 	bl	e9a0 <memcpy>
    len = cnt;

    cnt = min(sizeof(NRF_FICR->DEVICEADDR), max_len - len);
   2e726:	1b64      	subs	r4, r4, r5
   2e728:	2c08      	cmp	r4, #8
   2e72a:	bf28      	it	cs
   2e72c:	2408      	movcs	r4, #8
    memcpy(id + len, (void *)NRF_FICR->DEVICEADDR, cnt);
   2e72e:	4622      	mov	r2, r4
   2e730:	4903      	ldr	r1, [pc, #12]	; (2e740 <hal_bsp_hw_id+0x30>)
   2e732:	1970      	adds	r0, r6, r5
   2e734:	f7e0 f934 	bl	e9a0 <memcpy>

    return len + cnt;
}
   2e738:	1928      	adds	r0, r5, r4
   2e73a:	bd70      	pop	{r4, r5, r6, pc}
   2e73c:	10000060 	.word	0x10000060
   2e740:	100000a4 	.word	0x100000a4

0002e744 <nrf52_periph_create_timers>:
#endif
#endif

static void
nrf52_periph_create_timers(void)
{
   2e744:	b508      	push	{r3, lr}
#if MYNEWT_VAL(TIMER_4)
    rc = hal_timer_init(4, NULL);
    assert(rc == 0);
#endif
#if MYNEWT_VAL(TIMER_5)
    rc = hal_timer_init(5, NULL);
   2e746:	2100      	movs	r1, #0
   2e748:	2005      	movs	r0, #5
   2e74a:	f000 f95b 	bl	2ea04 <hal_timer_init>
    assert(rc == 0);
   2e74e:	b928      	cbnz	r0, 2e75c <nrf52_periph_create_timers+0x18>
#endif

#if MYNEWT_VAL(OS_CPUTIME_TIMER_NUM) >= 0
    rc = os_cputime_init(MYNEWT_VAL(OS_CPUTIME_FREQ));
   2e750:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   2e754:	f000 fb7f 	bl	2ee56 <os_cputime_init>
    assert(rc == 0);
   2e758:	b950      	cbnz	r0, 2e770 <nrf52_periph_create_timers+0x2c>
#endif
}
   2e75a:	bd08      	pop	{r3, pc}
    assert(rc == 0);
   2e75c:	f7dd fd44 	bl	c1e8 <hal_debugger_connected>
   2e760:	b100      	cbz	r0, 2e764 <nrf52_periph_create_timers+0x20>
   2e762:	be01      	bkpt	0x0001
   2e764:	2300      	movs	r3, #0
   2e766:	461a      	mov	r2, r3
   2e768:	4619      	mov	r1, r3
   2e76a:	4618      	mov	r0, r3
   2e76c:	f7de f9f0 	bl	cb50 <__assert_func>
    assert(rc == 0);
   2e770:	f7dd fd3a 	bl	c1e8 <hal_debugger_connected>
   2e774:	b100      	cbz	r0, 2e778 <nrf52_periph_create_timers+0x34>
   2e776:	be01      	bkpt	0x0001
   2e778:	2300      	movs	r3, #0
   2e77a:	461a      	mov	r2, r3
   2e77c:	4619      	mov	r1, r3
   2e77e:	4618      	mov	r0, r3
   2e780:	f7de f9e6 	bl	cb50 <__assert_func>

0002e784 <nrf52_periph_create_uart>:
#endif
}

static void
nrf52_periph_create_uart(void)
{
   2e784:	b500      	push	{lr}
   2e786:	b083      	sub	sp, #12
    int rc;

    (void)rc;

#if MYNEWT_VAL(UART_0)
    rc = os_dev_create(&os_bsp_uart0.ud_dev, "uart0",
   2e788:	4b0b      	ldr	r3, [pc, #44]	; (2e7b8 <nrf52_periph_create_uart+0x34>)
   2e78a:	9301      	str	r3, [sp, #4]
   2e78c:	4b0b      	ldr	r3, [pc, #44]	; (2e7bc <nrf52_periph_create_uart+0x38>)
   2e78e:	9300      	str	r3, [sp, #0]
   2e790:	2300      	movs	r3, #0
   2e792:	2201      	movs	r2, #1
   2e794:	490a      	ldr	r1, [pc, #40]	; (2e7c0 <nrf52_periph_create_uart+0x3c>)
   2e796:	480b      	ldr	r0, [pc, #44]	; (2e7c4 <nrf52_periph_create_uart+0x40>)
   2e798:	f7de fc8c 	bl	d0b4 <os_dev_create>
                       OS_DEV_INIT_PRIMARY, 0, uart_hal_init,
                       (void *)&os_bsp_uart0_cfg);
    assert(rc == 0);
   2e79c:	b910      	cbnz	r0, 2e7a4 <nrf52_periph_create_uart+0x20>
    rc = os_dev_create(&os_bsp_uart1.ud_dev, "uart1",
                       OS_DEV_INIT_PRIMARY, 1, uart_hal_init,
                       (void *)&os_bsp_uart1_cfg);
    assert(rc == 0);
#endif
}
   2e79e:	b003      	add	sp, #12
   2e7a0:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
   2e7a4:	f7dd fd20 	bl	c1e8 <hal_debugger_connected>
   2e7a8:	b100      	cbz	r0, 2e7ac <nrf52_periph_create_uart+0x28>
   2e7aa:	be01      	bkpt	0x0001
   2e7ac:	2300      	movs	r3, #0
   2e7ae:	461a      	mov	r2, r3
   2e7b0:	4619      	mov	r1, r3
   2e7b2:	4618      	mov	r0, r3
   2e7b4:	f7de f9cc 	bl	cb50 <__assert_func>
   2e7b8:	00032cd0 	.word	0x00032cd0
   2e7bc:	00030b11 	.word	0x00030b11
   2e7c0:	000319d0 	.word	0x000319d0
   2e7c4:	200032d4 	.word	0x200032d4

0002e7c8 <nrf52_periph_create>:
#endif
}

void
nrf52_periph_create(void)
{
   2e7c8:	b508      	push	{r3, lr}
    nrf52_periph_create_timers();
   2e7ca:	f7ff ffbb 	bl	2e744 <nrf52_periph_create_timers>
    nrf52_periph_create_adc();
    nrf52_periph_create_pwm();
    nrf52_periph_create_trng();
    nrf52_periph_create_crypto();
    nrf52_periph_create_uart();
   2e7ce:	f7ff ffd9 	bl	2e784 <nrf52_periph_create_uart>
    nrf52_periph_create_i2c();
    nrf52_periph_create_spi();
}
   2e7d2:	bd08      	pop	{r3, pc}

0002e7d4 <nrf_read_timer_cntr>:
nrf_read_timer_cntr(NRF_TIMER_Type *hwtimer)
{
    uint32_t tcntr;

    /* Force a capture of the timer into 'cntr' capture channel; read it */
    hwtimer->TASKS_CAPTURE[NRF_TIMER_CC_READ] = 1;
   2e7d4:	2301      	movs	r3, #1
   2e7d6:	6483      	str	r3, [r0, #72]	; 0x48
    tcntr = hwtimer->CC[NRF_TIMER_CC_READ];
   2e7d8:	f8d0 0548 	ldr.w	r0, [r0, #1352]	; 0x548

    return tcntr;
}
   2e7dc:	4770      	bx	lr
	...

0002e7e0 <nrf_timer_set_ocmp>:
 *
 * @param timer Pointer to timer.
 */
static void
nrf_timer_set_ocmp(struct nrf52_hal_timer *bsptimer, uint32_t expiry)
{
   2e7e0:	b538      	push	{r3, r4, r5, lr}
    uint32_t temp;
    uint32_t cntr;
    NRF_TIMER_Type *hwtimer;
    NRF_RTC_Type *rtctimer;

    if (bsptimer->tmr_rtc) {
   2e7e2:	7883      	ldrb	r3, [r0, #2]
   2e7e4:	2b00      	cmp	r3, #0
   2e7e6:	d050      	beq.n	2e88a <nrf_timer_set_ocmp+0xaa>
        rtctimer = (NRF_RTC_Type *)bsptimer->tmr_reg;
   2e7e8:	6902      	ldr	r2, [r0, #16]
        rtctimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
   2e7ea:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   2e7ee:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
        temp = bsptimer->tmr_cntr;
   2e7f2:	6843      	ldr	r3, [r0, #4]
        cntr = rtctimer->COUNTER;
   2e7f4:	f8d2 4504 	ldr.w	r4, [r2, #1284]	; 0x504
        if (rtctimer->EVENTS_OVRFLW) {
   2e7f8:	f8d2 5104 	ldr.w	r5, [r2, #260]	; 0x104
   2e7fc:	b11d      	cbz	r5, 2e806 <nrf_timer_set_ocmp+0x26>
            temp += (1UL << 24);
   2e7fe:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
            cntr = rtctimer->COUNTER;
   2e802:	f8d2 4504 	ldr.w	r4, [r2, #1284]	; 0x504
        }
        temp |= cntr;
   2e806:	4323      	orrs	r3, r4
        delta_t = (int32_t)(expiry - temp);
   2e808:	1acb      	subs	r3, r1, r3
         * to be handled differently. TICK event is used to have interrupt on
         * each subsequent tick so we won't miss any and in case we detected
         * mentioned extra tick during calculations, interrupt is triggered
         * immediately. Delta 0 or less means we should always fire immediately.
         */
        if (delta_t < 1) {
   2e80a:	2b00      	cmp	r3, #0
   2e80c:	dd17      	ble.n	2e83e <nrf_timer_set_ocmp+0x5e>
            rtctimer->INTENCLR = RTC_INTENCLR_TICK_Msk;
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
        } else if (delta_t < 3) {
   2e80e:	2b02      	cmp	r3, #2
   2e810:	dc27      	bgt.n	2e862 <nrf_timer_set_ocmp+0x82>
            rtctimer->INTENSET = RTC_INTENSET_TICK_Msk;
   2e812:	2301      	movs	r3, #1
   2e814:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
            if (rtctimer->COUNTER != cntr) {
   2e818:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
   2e81c:	42a3      	cmp	r3, r4
   2e81e:	d02e      	beq.n	2e87e <nrf_timer_set_ocmp+0x9e>
                NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
   2e820:	7842      	ldrb	r2, [r0, #1]
   2e822:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   2e824:	2b00      	cmp	r3, #0
   2e826:	db2a      	blt.n	2e87e <nrf_timer_set_ocmp+0x9e>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2e828:	f002 021f 	and.w	r2, r2, #31
   2e82c:	095b      	lsrs	r3, r3, #5
   2e82e:	2101      	movs	r1, #1
   2e830:	fa01 f202 	lsl.w	r2, r1, r2
   2e834:	3340      	adds	r3, #64	; 0x40
   2e836:	4926      	ldr	r1, [pc, #152]	; (2e8d0 <nrf_timer_set_ocmp+0xf0>)
   2e838:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   2e83c:	e01f      	b.n	2e87e <nrf_timer_set_ocmp+0x9e>
            rtctimer->INTENCLR = RTC_INTENCLR_TICK_Msk;
   2e83e:	2301      	movs	r3, #1
   2e840:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
   2e844:	7842      	ldrb	r2, [r0, #1]
   2e846:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   2e848:	2b00      	cmp	r3, #0
   2e84a:	db18      	blt.n	2e87e <nrf_timer_set_ocmp+0x9e>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2e84c:	f002 021f 	and.w	r2, r2, #31
   2e850:	095b      	lsrs	r3, r3, #5
   2e852:	2101      	movs	r1, #1
   2e854:	fa01 f202 	lsl.w	r2, r1, r2
   2e858:	3340      	adds	r3, #64	; 0x40
   2e85a:	491d      	ldr	r1, [pc, #116]	; (2e8d0 <nrf_timer_set_ocmp+0xf0>)
   2e85c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   2e860:	e00d      	b.n	2e87e <nrf_timer_set_ocmp+0x9e>
            }
        } else {
            rtctimer->INTENCLR = RTC_INTENCLR_TICK_Msk;
   2e862:	2001      	movs	r0, #1
   2e864:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308

            if (delta_t < (1UL << 24)) {
   2e868:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   2e86c:	d208      	bcs.n	2e880 <nrf_timer_set_ocmp+0xa0>
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = expiry & 0x00ffffff;
   2e86e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   2e872:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
            } else {
                /* CC too far ahead. Just make sure we set compare far ahead */
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = cntr + (1UL << 23);
            }
            rtctimer->INTENSET = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
   2e876:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   2e87a:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
        /* Force interrupt to occur as we may have missed it */
        if ((int32_t)(nrf_read_timer_cntr(hwtimer) - expiry) >= 0) {
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
        }
    }
}
   2e87e:	bd38      	pop	{r3, r4, r5, pc}
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = cntr + (1UL << 23);
   2e880:	f504 0400 	add.w	r4, r4, #8388608	; 0x800000
   2e884:	f8c2 4548 	str.w	r4, [r2, #1352]	; 0x548
   2e888:	e7f5      	b.n	2e876 <nrf_timer_set_ocmp+0x96>
   2e88a:	460d      	mov	r5, r1
   2e88c:	4604      	mov	r4, r0
        hwtimer = bsptimer->tmr_reg;
   2e88e:	6900      	ldr	r0, [r0, #16]
        hwtimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
   2e890:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   2e894:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
        hwtimer->CC[NRF_TIMER_CC_INT] = expiry;
   2e898:	f8c0 154c 	str.w	r1, [r0, #1356]	; 0x54c
        hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT] = 0;
   2e89c:	2200      	movs	r2, #0
   2e89e:	f8c0 214c 	str.w	r2, [r0, #332]	; 0x14c
        hwtimer->INTENSET = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
   2e8a2:	f8c0 3304 	str.w	r3, [r0, #772]	; 0x304
        if ((int32_t)(nrf_read_timer_cntr(hwtimer) - expiry) >= 0) {
   2e8a6:	f7ff ff95 	bl	2e7d4 <nrf_read_timer_cntr>
   2e8aa:	1b40      	subs	r0, r0, r5
   2e8ac:	2800      	cmp	r0, #0
   2e8ae:	dbe6      	blt.n	2e87e <nrf_timer_set_ocmp+0x9e>
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
   2e8b0:	7862      	ldrb	r2, [r4, #1]
   2e8b2:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   2e8b4:	2b00      	cmp	r3, #0
   2e8b6:	dbe2      	blt.n	2e87e <nrf_timer_set_ocmp+0x9e>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2e8b8:	f002 021f 	and.w	r2, r2, #31
   2e8bc:	095b      	lsrs	r3, r3, #5
   2e8be:	2101      	movs	r1, #1
   2e8c0:	fa01 f202 	lsl.w	r2, r1, r2
   2e8c4:	3340      	adds	r3, #64	; 0x40
   2e8c6:	4902      	ldr	r1, [pc, #8]	; (2e8d0 <nrf_timer_set_ocmp+0xf0>)
   2e8c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   2e8cc:	e7d7      	b.n	2e87e <nrf_timer_set_ocmp+0x9e>
   2e8ce:	bf00      	nop
   2e8d0:	e000e100 	.word	0xe000e100

0002e8d4 <nrf_timer_disable_ocmp>:

/* Disable output compare used for timer */
static void
nrf_timer_disable_ocmp(NRF_TIMER_Type *hwtimer)
{
    hwtimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
   2e8d4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   2e8d8:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
}
   2e8dc:	4770      	bx	lr

0002e8de <nrf_rtc_disable_ocmp>:

static void
nrf_rtc_disable_ocmp(NRF_RTC_Type *rtctimer)
{
    rtctimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
   2e8de:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   2e8e2:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
    rtctimer->INTENCLR = RTC_INTENCLR_TICK_Msk;
   2e8e6:	2301      	movs	r3, #1
   2e8e8:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
}
   2e8ec:	4770      	bx	lr
	...

0002e8f0 <hal_timer_read_bsptimer>:

static uint32_t
hal_timer_read_bsptimer(struct nrf52_hal_timer *bsptimer)
{
   2e8f0:	b430      	push	{r4, r5}
    uint32_t low32;
    uint32_t ctx;
    uint32_t tcntr;
    NRF_RTC_Type *rtctimer;

    rtctimer = (NRF_RTC_Type *)bsptimer->tmr_reg;
   2e8f2:	6902      	ldr	r2, [r0, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   2e8f4:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   2e8f8:	b672      	cpsid	i
    __HAL_DISABLE_INTERRUPTS(ctx);
    tcntr = bsptimer->tmr_cntr;
   2e8fa:	6841      	ldr	r1, [r0, #4]
    low32 = rtctimer->COUNTER;
   2e8fc:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
    if (rtctimer->EVENTS_OVRFLW) {
   2e900:	f8d2 5104 	ldr.w	r5, [r2, #260]	; 0x104
   2e904:	b1ad      	cbz	r5, 2e932 <hal_timer_read_bsptimer+0x42>
        tcntr += (1UL << 24);
   2e906:	f101 7180 	add.w	r1, r1, #16777216	; 0x1000000
        bsptimer->tmr_cntr = tcntr;
   2e90a:	6041      	str	r1, [r0, #4]
        low32 = rtctimer->COUNTER;
   2e90c:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
        rtctimer->EVENTS_OVRFLW = 0;
   2e910:	2500      	movs	r5, #0
   2e912:	f8c2 5104 	str.w	r5, [r2, #260]	; 0x104
        NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
   2e916:	7840      	ldrb	r0, [r0, #1]
   2e918:	b242      	sxtb	r2, r0
  if ((int32_t)(IRQn) >= 0)
   2e91a:	42aa      	cmp	r2, r5
   2e91c:	db09      	blt.n	2e932 <hal_timer_read_bsptimer+0x42>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2e91e:	f000 001f 	and.w	r0, r0, #31
   2e922:	0952      	lsrs	r2, r2, #5
   2e924:	2501      	movs	r5, #1
   2e926:	fa05 f000 	lsl.w	r0, r5, r0
   2e92a:	3240      	adds	r2, #64	; 0x40
   2e92c:	4d04      	ldr	r5, [pc, #16]	; (2e940 <hal_timer_read_bsptimer+0x50>)
   2e92e:	f845 0022 	str.w	r0, [r5, r2, lsl #2]
    }
    tcntr |= low32;
   2e932:	ea43 0001 	orr.w	r0, r3, r1
    __HAL_ENABLE_INTERRUPTS(ctx);
   2e936:	b904      	cbnz	r4, 2e93a <hal_timer_read_bsptimer+0x4a>
  __ASM volatile ("cpsie i" : : : "memory");
   2e938:	b662      	cpsie	i

    return tcntr;
}
   2e93a:	bc30      	pop	{r4, r5}
   2e93c:	4770      	bx	lr
   2e93e:	bf00      	nop
   2e940:	e000e100 	.word	0xe000e100

0002e944 <hal_timer_chk_queue>:
 *
 * @param bsptimer
 */
static void
hal_timer_chk_queue(struct nrf52_hal_timer *bsptimer)
{
   2e944:	b570      	push	{r4, r5, r6, lr}
   2e946:	4605      	mov	r5, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   2e948:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   2e94c:	b672      	cpsid	i
   2e94e:	e012      	b.n	2e976 <hal_timer_chk_queue+0x32>
    __HAL_DISABLE_INTERRUPTS(ctx);
    while ((timer = TAILQ_FIRST(&bsptimer->hal_timer_q)) != NULL) {
        if (bsptimer->tmr_rtc) {
            tcntr = hal_timer_read_bsptimer(bsptimer);
        } else {
            tcntr = nrf_read_timer_cntr(bsptimer->tmr_reg);
   2e950:	6928      	ldr	r0, [r5, #16]
   2e952:	f7ff ff3f 	bl	2e7d4 <nrf_read_timer_cntr>
        }
        if ((int32_t)(tcntr - timer->expiry) >= 0) {
   2e956:	68e3      	ldr	r3, [r4, #12]
   2e958:	1ac0      	subs	r0, r0, r3
   2e95a:	2800      	cmp	r0, #0
   2e95c:	db17      	blt.n	2e98e <hal_timer_chk_queue+0x4a>
            TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
   2e95e:	6923      	ldr	r3, [r4, #16]
   2e960:	b193      	cbz	r3, 2e988 <hal_timer_chk_queue+0x44>
   2e962:	6962      	ldr	r2, [r4, #20]
   2e964:	615a      	str	r2, [r3, #20]
   2e966:	6963      	ldr	r3, [r4, #20]
   2e968:	6922      	ldr	r2, [r4, #16]
   2e96a:	601a      	str	r2, [r3, #0]
            timer->link.tqe_prev = NULL;
   2e96c:	2300      	movs	r3, #0
   2e96e:	6163      	str	r3, [r4, #20]
            timer->cb_func(timer->cb_arg);
   2e970:	6863      	ldr	r3, [r4, #4]
   2e972:	68a0      	ldr	r0, [r4, #8]
   2e974:	4798      	blx	r3
    while ((timer = TAILQ_FIRST(&bsptimer->hal_timer_q)) != NULL) {
   2e976:	696c      	ldr	r4, [r5, #20]
   2e978:	b14c      	cbz	r4, 2e98e <hal_timer_chk_queue+0x4a>
        if (bsptimer->tmr_rtc) {
   2e97a:	78ab      	ldrb	r3, [r5, #2]
   2e97c:	2b00      	cmp	r3, #0
   2e97e:	d0e7      	beq.n	2e950 <hal_timer_chk_queue+0xc>
            tcntr = hal_timer_read_bsptimer(bsptimer);
   2e980:	4628      	mov	r0, r5
   2e982:	f7ff ffb5 	bl	2e8f0 <hal_timer_read_bsptimer>
   2e986:	e7e6      	b.n	2e956 <hal_timer_chk_queue+0x12>
            TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
   2e988:	6963      	ldr	r3, [r4, #20]
   2e98a:	61ab      	str	r3, [r5, #24]
   2e98c:	e7eb      	b.n	2e966 <hal_timer_chk_queue+0x22>
            break;
        }
    }

    /* Any timers left on queue? If so, we need to set OCMP */
    timer = TAILQ_FIRST(&bsptimer->hal_timer_q);
   2e98e:	696b      	ldr	r3, [r5, #20]
    if (timer) {
   2e990:	b133      	cbz	r3, 2e9a0 <hal_timer_chk_queue+0x5c>
        nrf_timer_set_ocmp(bsptimer, timer->expiry);
   2e992:	68d9      	ldr	r1, [r3, #12]
   2e994:	4628      	mov	r0, r5
   2e996:	f7ff ff23 	bl	2e7e0 <nrf_timer_set_ocmp>
            nrf_rtc_disable_ocmp((NRF_RTC_Type *)bsptimer->tmr_reg);
        } else {
            nrf_timer_disable_ocmp(bsptimer->tmr_reg);
        }
    }
    __HAL_ENABLE_INTERRUPTS(ctx);
   2e99a:	b906      	cbnz	r6, 2e99e <hal_timer_chk_queue+0x5a>
  __ASM volatile ("cpsie i" : : : "memory");
   2e99c:	b662      	cpsie	i
}
   2e99e:	bd70      	pop	{r4, r5, r6, pc}
        if (bsptimer->tmr_rtc) {
   2e9a0:	78ab      	ldrb	r3, [r5, #2]
   2e9a2:	b11b      	cbz	r3, 2e9ac <hal_timer_chk_queue+0x68>
            nrf_rtc_disable_ocmp((NRF_RTC_Type *)bsptimer->tmr_reg);
   2e9a4:	6928      	ldr	r0, [r5, #16]
   2e9a6:	f7ff ff9a 	bl	2e8de <nrf_rtc_disable_ocmp>
   2e9aa:	e7f6      	b.n	2e99a <hal_timer_chk_queue+0x56>
            nrf_timer_disable_ocmp(bsptimer->tmr_reg);
   2e9ac:	6928      	ldr	r0, [r5, #16]
   2e9ae:	f7ff ff91 	bl	2e8d4 <nrf_timer_disable_ocmp>
   2e9b2:	e7f2      	b.n	2e99a <hal_timer_chk_queue+0x56>

0002e9b4 <hal_rtc_timer_irq_handler>:
#endif

#if MYNEWT_VAL(TIMER_5)
static void
hal_rtc_timer_irq_handler(struct nrf52_hal_timer *bsptimer)
{
   2e9b4:	b510      	push	{r4, lr}
    NRF_RTC_Type *rtctimer;

    os_trace_isr_enter();

    /* Check interrupt source. If set, clear them */
    rtctimer = (NRF_RTC_Type *)bsptimer->tmr_reg;
   2e9b6:	6904      	ldr	r4, [r0, #16]
    compare = rtctimer->EVENTS_COMPARE[NRF_RTC_TIMER_CC_INT];
   2e9b8:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    if (compare) {
   2e9bc:	b113      	cbz	r3, 2e9c4 <hal_rtc_timer_irq_handler+0x10>
       rtctimer->EVENTS_COMPARE[NRF_RTC_TIMER_CC_INT] = 0;
   2e9be:	2300      	movs	r3, #0
   2e9c0:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    }

    tick = rtctimer->EVENTS_TICK;
   2e9c4:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    if (tick) {
   2e9c8:	b113      	cbz	r3, 2e9d0 <hal_rtc_timer_irq_handler+0x1c>
        rtctimer->EVENTS_TICK = 0;
   2e9ca:	2300      	movs	r3, #0
   2e9cc:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    }

    overflow = rtctimer->EVENTS_OVRFLW;
   2e9d0:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    if (overflow) {
   2e9d4:	b133      	cbz	r3, 2e9e4 <hal_rtc_timer_irq_handler+0x30>
        rtctimer->EVENTS_OVRFLW = 0;
   2e9d6:	2300      	movs	r3, #0
   2e9d8:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
        bsptimer->tmr_cntr += (1UL << 24);
   2e9dc:	6843      	ldr	r3, [r0, #4]
   2e9de:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
   2e9e2:	6043      	str	r3, [r0, #4]
    }

    /* Count # of timer isrs */
    ++bsptimer->timer_isrs;
   2e9e4:	6883      	ldr	r3, [r0, #8]
   2e9e6:	3301      	adds	r3, #1
   2e9e8:	6083      	str	r3, [r0, #8]
     * counter is already passed the output compare value), we use the NVIC
     * to set a pending interrupt. This means that there will be no compare
     * flag set, so all we do is check to see if the compare interrupt is
     * enabled.
     */
    hal_timer_chk_queue(bsptimer);
   2e9ea:	f7ff ffab 	bl	2e944 <hal_timer_chk_queue>

    /* Recommended by nordic to make sure interrupts are cleared */
    compare = rtctimer->EVENTS_COMPARE[NRF_RTC_TIMER_CC_INT];
   2e9ee:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148

    os_trace_isr_exit();
}
   2e9f2:	bd10      	pop	{r4, pc}

0002e9f4 <nrf52_timer5_irq_handler>:
#endif

#if MYNEWT_VAL(TIMER_5)
void
nrf52_timer5_irq_handler(void)
{
   2e9f4:	b508      	push	{r3, lr}
    hal_rtc_timer_irq_handler(&nrf52_hal_timer5);
   2e9f6:	4802      	ldr	r0, [pc, #8]	; (2ea00 <nrf52_timer5_irq_handler+0xc>)
   2e9f8:	f7ff ffdc 	bl	2e9b4 <hal_rtc_timer_irq_handler>
}
   2e9fc:	bd08      	pop	{r3, pc}
   2e9fe:	bf00      	nop
   2ea00:	200043f0 	.word	0x200043f0

0002ea04 <hal_timer_init>:
    uint8_t irq_num;
    struct nrf52_hal_timer *bsptimer;
    void *hwtimer;
    hal_timer_irq_handler_t irq_isr;

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   2ea04:	2805      	cmp	r0, #5
   2ea06:	dc20      	bgt.n	2ea4a <hal_timer_init+0x46>
   2ea08:	4b14      	ldr	r3, [pc, #80]	; (2ea5c <hal_timer_init+0x58>)
   2ea0a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   2ea0e:	b1f3      	cbz	r3, 2ea4e <hal_timer_init+0x4a>

    /* If timer is enabled do not allow init */
    if (bsptimer->tmr_enabled) {
   2ea10:	781a      	ldrb	r2, [r3, #0]
   2ea12:	b9f2      	cbnz	r2, 2ea52 <hal_timer_init+0x4e>
        rc = EINVAL;
        goto err;
    }

    switch (timer_num) {
   2ea14:	2805      	cmp	r0, #5
   2ea16:	d11e      	bne.n	2ea56 <hal_timer_init+0x52>
#if MYNEWT_VAL(TIMER_5)
    case 5:
        irq_num = RTC0_IRQn;
        hwtimer = NRF_RTC0;
        irq_isr = nrf52_timer5_irq_handler;
        bsptimer->tmr_rtc = 1;
   2ea18:	2201      	movs	r2, #1
   2ea1a:	709a      	strb	r2, [r3, #2]
    if (hwtimer == NULL) {
        rc = EINVAL;
        goto err;
    }

    bsptimer->tmr_reg = hwtimer;
   2ea1c:	4a10      	ldr	r2, [pc, #64]	; (2ea60 <hal_timer_init+0x5c>)
   2ea1e:	611a      	str	r2, [r3, #16]
    bsptimer->tmr_irq_num = irq_num;
   2ea20:	220b      	movs	r2, #11
   2ea22:	705a      	strb	r2, [r3, #1]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2ea24:	4b0f      	ldr	r3, [pc, #60]	; (2ea64 <hal_timer_init+0x60>)
   2ea26:	f44f 6200 	mov.w	r2, #2048	; 0x800
   2ea2a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
   2ea2e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   2ea32:	f3bf 8f6f 	isb	sy
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2ea36:	22e0      	movs	r2, #224	; 0xe0
   2ea38:	f883 230b 	strb.w	r2, [r3, #779]	; 0x30b
  uint32_t vectors = (uint32_t )SCB->VTOR;
   2ea3c:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
   2ea40:	689b      	ldr	r3, [r3, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   2ea42:	4a09      	ldr	r2, [pc, #36]	; (2ea68 <hal_timer_init+0x64>)
   2ea44:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Disable IRQ, set priority and set vector in table */
    NVIC_DisableIRQ(irq_num);
    NVIC_SetPriority(irq_num, (1 << __NVIC_PRIO_BITS) - 1);
    NVIC_SetVector(irq_num, (uint32_t)irq_isr);

    return 0;
   2ea46:	2000      	movs	r0, #0
   2ea48:	4770      	bx	lr

err:
    return rc;
   2ea4a:	2016      	movs	r0, #22
   2ea4c:	4770      	bx	lr
   2ea4e:	2016      	movs	r0, #22
   2ea50:	4770      	bx	lr
   2ea52:	2016      	movs	r0, #22
   2ea54:	4770      	bx	lr
   2ea56:	2016      	movs	r0, #22
}
   2ea58:	4770      	bx	lr
   2ea5a:	bf00      	nop
   2ea5c:	00032cd4 	.word	0x00032cd4
   2ea60:	4000b000 	.word	0x4000b000
   2ea64:	e000e100 	.word	0xe000e100
   2ea68:	0002e9f5 	.word	0x0002e9f5

0002ea6c <hal_timer_config>:
    NRF_TIMER_Type *hwtimer;
#if MYNEWT_VAL(TIMER_5)
    NRF_RTC_Type *rtctimer;
#endif

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   2ea6c:	2805      	cmp	r0, #5
   2ea6e:	f300 8097 	bgt.w	2eba0 <hal_timer_config+0x134>
{
   2ea72:	b430      	push	{r4, r5}
    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   2ea74:	4b56      	ldr	r3, [pc, #344]	; (2ebd0 <hal_timer_config+0x164>)
   2ea76:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   2ea7a:	2c00      	cmp	r4, #0
   2ea7c:	f000 8092 	beq.w	2eba4 <hal_timer_config+0x138>

#if MYNEWT_VAL(TIMER_5)
    if (timer_num == 5) {
   2ea80:	2805      	cmp	r0, #5
   2ea82:	d01d      	beq.n	2eac0 <hal_timer_config+0x54>
        return 0;
    }
#endif

    /* Set timer to desired frequency */
    div = NRF52_MAX_TIMER_FREQ / freq_hz;
   2ea84:	4b53      	ldr	r3, [pc, #332]	; (2ebd4 <hal_timer_config+0x168>)
   2ea86:	fbb3 f1f1 	udiv	r1, r3, r1
    /*
     * Largest prescaler is 2^9 and must make sure frequency not too high.
     * If hwtimer is NULL it means that the timer was not initialized prior
     * to call.
     */
    if (bsptimer->tmr_enabled || (div == 0) || (div > 512) ||
   2ea8a:	7823      	ldrb	r3, [r4, #0]
   2ea8c:	2b00      	cmp	r3, #0
   2ea8e:	f040 8093 	bne.w	2ebb8 <hal_timer_config+0x14c>
   2ea92:	2900      	cmp	r1, #0
   2ea94:	f000 8093 	beq.w	2ebbe <hal_timer_config+0x152>
   2ea98:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   2ea9c:	f200 8091 	bhi.w	2ebc2 <hal_timer_config+0x156>
        (bsptimer->tmr_reg == NULL)) {
   2eaa0:	6922      	ldr	r2, [r4, #16]
    if (bsptimer->tmr_enabled || (div == 0) || (div > 512) ||
   2eaa2:	2a00      	cmp	r2, #0
   2eaa4:	f000 808f 	beq.w	2ebc6 <hal_timer_config+0x15a>
        rc = EINVAL;
        goto err;
    }

    if (div == 1) {
   2eaa8:	2901      	cmp	r1, #1
   2eaaa:	d03f      	beq.n	2eb2c <hal_timer_config+0xc0>
        prescaler = 0;
    } else {
        /* Find closest prescaler */
        for (prescaler = 1; prescaler < 10; ++prescaler) {
   2eaac:	2301      	movs	r3, #1
   2eaae:	2b09      	cmp	r3, #9
   2eab0:	d83c      	bhi.n	2eb2c <hal_timer_config+0xc0>
            if (div <= (1 << prescaler)) {
   2eab2:	2201      	movs	r2, #1
   2eab4:	409a      	lsls	r2, r3
   2eab6:	428a      	cmp	r2, r1
   2eab8:	d22e      	bcs.n	2eb18 <hal_timer_config+0xac>
        for (prescaler = 1; prescaler < 10; ++prescaler) {
   2eaba:	3301      	adds	r3, #1
   2eabc:	b2db      	uxtb	r3, r3
   2eabe:	e7f6      	b.n	2eaae <hal_timer_config+0x42>
        if (bsptimer->tmr_enabled || (freq_hz != 32768) ||
   2eac0:	7823      	ldrb	r3, [r4, #0]
   2eac2:	2b00      	cmp	r3, #0
   2eac4:	d170      	bne.n	2eba8 <hal_timer_config+0x13c>
   2eac6:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
   2eaca:	d16f      	bne.n	2ebac <hal_timer_config+0x140>
            (bsptimer->tmr_reg == NULL)) {
   2eacc:	6923      	ldr	r3, [r4, #16]
        if (bsptimer->tmr_enabled || (freq_hz != 32768) ||
   2eace:	2b00      	cmp	r3, #0
   2ead0:	d06e      	beq.n	2ebb0 <hal_timer_config+0x144>
        bsptimer->tmr_freq = freq_hz;
   2ead2:	60e1      	str	r1, [r4, #12]
        bsptimer->tmr_enabled = 1;
   2ead4:	2201      	movs	r2, #1
   2ead6:	7022      	strb	r2, [r4, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   2ead8:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   2eadc:	b672      	cpsid	i
        rtctimer = (NRF_RTC_Type *)bsptimer->tmr_reg;
   2eade:	6923      	ldr	r3, [r4, #16]
        rtctimer->TASKS_STOP = 1;
   2eae0:	605a      	str	r2, [r3, #4]
        rtctimer->TASKS_CLEAR = 1;
   2eae2:	609a      	str	r2, [r3, #8]
        rtctimer->PRESCALER = 0;
   2eae4:	2100      	movs	r1, #0
   2eae6:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
        rtctimer->EVENTS_OVRFLW = 0;
   2eaea:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
        rtctimer->INTENSET = RTC_INTENSET_OVRFLW_Msk;
   2eaee:	2102      	movs	r1, #2
   2eaf0:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
        rtctimer->TASKS_START = 1;
   2eaf4:	601a      	str	r2, [r3, #0]
        NVIC_EnableIRQ(bsptimer->tmr_irq_num);
   2eaf6:	7862      	ldrb	r2, [r4, #1]
   2eaf8:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   2eafa:	2b00      	cmp	r3, #0
   2eafc:	db08      	blt.n	2eb10 <hal_timer_config+0xa4>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2eafe:	f002 021f 	and.w	r2, r2, #31
   2eb02:	095b      	lsrs	r3, r3, #5
   2eb04:	2101      	movs	r1, #1
   2eb06:	fa01 f202 	lsl.w	r2, r1, r2
   2eb0a:	4933      	ldr	r1, [pc, #204]	; (2ebd8 <hal_timer_config+0x16c>)
   2eb0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        __HAL_ENABLE_INTERRUPTS(ctx);
   2eb10:	2800      	cmp	r0, #0
   2eb12:	d14f      	bne.n	2ebb4 <hal_timer_config+0x148>
  __ASM volatile ("cpsie i" : : : "memory");
   2eb14:	b662      	cpsie	i
   2eb16:	e050      	b.n	2ebba <hal_timer_config+0x14e>
                min_delta = div - (1 << (prescaler - 1));
   2eb18:	1e58      	subs	r0, r3, #1
   2eb1a:	2501      	movs	r5, #1
   2eb1c:	fa05 f000 	lsl.w	r0, r5, r0
   2eb20:	1a08      	subs	r0, r1, r0
                max_delta = (1 << prescaler) - div;
   2eb22:	1a51      	subs	r1, r2, r1
                if (min_delta < max_delta) {
   2eb24:	4288      	cmp	r0, r1
   2eb26:	d201      	bcs.n	2eb2c <hal_timer_config+0xc0>
                    prescaler -= 1;
   2eb28:	3b01      	subs	r3, #1
   2eb2a:	b2db      	uxtb	r3, r3
            }
        }
    }

    /* Now set the actual frequency */
    bsptimer->tmr_freq = NRF52_MAX_TIMER_FREQ / (1 << prescaler);
   2eb2c:	4a29      	ldr	r2, [pc, #164]	; (2ebd4 <hal_timer_config+0x168>)
   2eb2e:	411a      	asrs	r2, r3
   2eb30:	60e2      	str	r2, [r4, #12]
    bsptimer->tmr_enabled = 1;
   2eb32:	2201      	movs	r2, #1
   2eb34:	7022      	strb	r2, [r4, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   2eb36:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   2eb3a:	b672      	cpsid	i

    /* disable interrupts */
    __HAL_DISABLE_INTERRUPTS(ctx);

    /* Make sure HFXO is started */
    if ((NRF_CLOCK->HFCLKSTAT &
   2eb3c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   2eb40:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
   2eb44:	f002 1201 	and.w	r2, r2, #65537	; 0x10001
   2eb48:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
   2eb4c:	d00c      	beq.n	2eb68 <hal_timer_config+0xfc>
         (CLOCK_HFCLKSTAT_SRC_Msk | CLOCK_HFCLKSTAT_STATE_Msk)) !=
        (CLOCK_HFCLKSTAT_SRC_Msk | CLOCK_HFCLKSTAT_STATE_Msk)) {
        NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
   2eb4e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   2eb52:	2100      	movs	r1, #0
   2eb54:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
        NRF_CLOCK->TASKS_HFCLKSTART = 1;
   2eb58:	2101      	movs	r1, #1
   2eb5a:	6011      	str	r1, [r2, #0]
        while (1) {
            if ((NRF_CLOCK->EVENTS_HFCLKSTARTED) != 0) {
   2eb5c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   2eb60:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
   2eb64:	2a00      	cmp	r2, #0
   2eb66:	d0f9      	beq.n	2eb5c <hal_timer_config+0xf0>
                break;
            }
        }
    }
    hwtimer = bsptimer->tmr_reg;
   2eb68:	6922      	ldr	r2, [r4, #16]

    /* Stop the timer first */
    hwtimer->TASKS_STOP = 1;
   2eb6a:	2101      	movs	r1, #1
   2eb6c:	6051      	str	r1, [r2, #4]
    hwtimer->TASKS_CLEAR = 1;
   2eb6e:	60d1      	str	r1, [r2, #12]

    /* Put the timer in timer mode using 32 bits. */
    hwtimer->MODE = TIMER_MODE_MODE_Timer;
   2eb70:	2500      	movs	r5, #0
   2eb72:	f8c2 5504 	str.w	r5, [r2, #1284]	; 0x504
    hwtimer->BITMODE = TIMER_BITMODE_BITMODE_32Bit;
   2eb76:	2503      	movs	r5, #3
   2eb78:	f8c2 5508 	str.w	r5, [r2, #1288]	; 0x508

    /* Set the pre-scalar */
    hwtimer->PRESCALER = prescaler;
   2eb7c:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510

    /* Start the timer */
    hwtimer->TASKS_START = 1;
   2eb80:	6011      	str	r1, [r2, #0]

    NVIC_EnableIRQ(bsptimer->tmr_irq_num);
   2eb82:	7862      	ldrb	r2, [r4, #1]
   2eb84:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   2eb86:	2b00      	cmp	r3, #0
   2eb88:	db07      	blt.n	2eb9a <hal_timer_config+0x12e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2eb8a:	f002 021f 	and.w	r2, r2, #31
   2eb8e:	095b      	lsrs	r3, r3, #5
   2eb90:	fa01 f202 	lsl.w	r2, r1, r2
   2eb94:	4910      	ldr	r1, [pc, #64]	; (2ebd8 <hal_timer_config+0x16c>)
   2eb96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    __HAL_ENABLE_INTERRUPTS(ctx);
   2eb9a:	b9b0      	cbnz	r0, 2ebca <hal_timer_config+0x15e>
  __ASM volatile ("cpsie i" : : : "memory");
   2eb9c:	b662      	cpsie	i
   2eb9e:	e00c      	b.n	2ebba <hal_timer_config+0x14e>

    return 0;

err:
    return rc;
   2eba0:	2016      	movs	r0, #22
}
   2eba2:	4770      	bx	lr
    return rc;
   2eba4:	2016      	movs	r0, #22
   2eba6:	e008      	b.n	2ebba <hal_timer_config+0x14e>
   2eba8:	2016      	movs	r0, #22
   2ebaa:	e006      	b.n	2ebba <hal_timer_config+0x14e>
   2ebac:	2016      	movs	r0, #22
   2ebae:	e004      	b.n	2ebba <hal_timer_config+0x14e>
   2ebb0:	2016      	movs	r0, #22
   2ebb2:	e002      	b.n	2ebba <hal_timer_config+0x14e>
        return 0;
   2ebb4:	2000      	movs	r0, #0
   2ebb6:	e000      	b.n	2ebba <hal_timer_config+0x14e>
    return rc;
   2ebb8:	2016      	movs	r0, #22
}
   2ebba:	bc30      	pop	{r4, r5}
   2ebbc:	4770      	bx	lr
    return rc;
   2ebbe:	2016      	movs	r0, #22
   2ebc0:	e7fb      	b.n	2ebba <hal_timer_config+0x14e>
   2ebc2:	2016      	movs	r0, #22
   2ebc4:	e7f9      	b.n	2ebba <hal_timer_config+0x14e>
   2ebc6:	2016      	movs	r0, #22
   2ebc8:	e7f7      	b.n	2ebba <hal_timer_config+0x14e>
    return 0;
   2ebca:	2000      	movs	r0, #0
   2ebcc:	e7f5      	b.n	2ebba <hal_timer_config+0x14e>
   2ebce:	bf00      	nop
   2ebd0:	00032cd4 	.word	0x00032cd4
   2ebd4:	00f42400 	.word	0x00f42400
   2ebd8:	e000e100 	.word	0xe000e100

0002ebdc <hal_timer_read>:
 *
 * @return uint32_t The timer counter register.
 */
uint32_t
hal_timer_read(int timer_num)
{
   2ebdc:	b508      	push	{r3, lr}
    int rc;
    uint32_t tcntr;
    struct nrf52_hal_timer *bsptimer;

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   2ebde:	2805      	cmp	r0, #5
   2ebe0:	dc0c      	bgt.n	2ebfc <hal_timer_read+0x20>
   2ebe2:	4b0b      	ldr	r3, [pc, #44]	; (2ec10 <hal_timer_read+0x34>)
   2ebe4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   2ebe8:	b140      	cbz	r0, 2ebfc <hal_timer_read+0x20>
    if (bsptimer->tmr_rtc) {
   2ebea:	7883      	ldrb	r3, [r0, #2]
   2ebec:	b91b      	cbnz	r3, 2ebf6 <hal_timer_read+0x1a>
        tcntr = hal_timer_read_bsptimer(bsptimer);
    } else {
        tcntr = nrf_read_timer_cntr(bsptimer->tmr_reg);
   2ebee:	6900      	ldr	r0, [r0, #16]
   2ebf0:	f7ff fdf0 	bl	2e7d4 <nrf_read_timer_cntr>
    /* Assert here since there is no invalid return code */
err:
    assert(0);
    rc = 0;
    return rc;
}
   2ebf4:	bd08      	pop	{r3, pc}
        tcntr = hal_timer_read_bsptimer(bsptimer);
   2ebf6:	f7ff fe7b 	bl	2e8f0 <hal_timer_read_bsptimer>
   2ebfa:	e7fb      	b.n	2ebf4 <hal_timer_read+0x18>
    assert(0);
   2ebfc:	f7dd faf4 	bl	c1e8 <hal_debugger_connected>
   2ec00:	b100      	cbz	r0, 2ec04 <hal_timer_read+0x28>
   2ec02:	be01      	bkpt	0x0001
   2ec04:	2300      	movs	r3, #0
   2ec06:	461a      	mov	r2, r3
   2ec08:	4619      	mov	r1, r3
   2ec0a:	4618      	mov	r0, r3
   2ec0c:	f7dd ffa0 	bl	cb50 <__assert_func>
   2ec10:	00032cd4 	.word	0x00032cd4

0002ec14 <hal_timer_set_cb>:
                 void *arg)
{
    int rc;
    struct nrf52_hal_timer *bsptimer;

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   2ec14:	2805      	cmp	r0, #5
   2ec16:	dc0b      	bgt.n	2ec30 <hal_timer_set_cb+0x1c>
{
   2ec18:	b410      	push	{r4}
    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   2ec1a:	4c07      	ldr	r4, [pc, #28]	; (2ec38 <hal_timer_set_cb+0x24>)
   2ec1c:	f854 4020 	ldr.w	r4, [r4, r0, lsl #2]
   2ec20:	b144      	cbz	r4, 2ec34 <hal_timer_set_cb+0x20>

    timer->cb_func = cb_func;
   2ec22:	604a      	str	r2, [r1, #4]
    timer->cb_arg = arg;
   2ec24:	608b      	str	r3, [r1, #8]
    timer->link.tqe_prev = NULL;
   2ec26:	2000      	movs	r0, #0
   2ec28:	6148      	str	r0, [r1, #20]
    timer->bsp_timer = bsptimer;
   2ec2a:	600c      	str	r4, [r1, #0]

    rc = 0;

err:
    return rc;
}
   2ec2c:	bc10      	pop	{r4}
   2ec2e:	4770      	bx	lr
    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   2ec30:	2016      	movs	r0, #22
}
   2ec32:	4770      	bx	lr
    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   2ec34:	2016      	movs	r0, #22
    return rc;
   2ec36:	e7f9      	b.n	2ec2c <hal_timer_set_cb+0x18>
   2ec38:	00032cd4 	.word	0x00032cd4

0002ec3c <hal_timer_start_at>:
{
    uint32_t ctx;
    struct hal_timer *entry;
    struct nrf52_hal_timer *bsptimer;

    if ((timer == NULL) || (timer->link.tqe_prev != NULL) ||
   2ec3c:	2800      	cmp	r0, #0
   2ec3e:	d03d      	beq.n	2ecbc <hal_timer_start_at+0x80>
{
   2ec40:	b538      	push	{r3, r4, r5, lr}
   2ec42:	4604      	mov	r4, r0
    if ((timer == NULL) || (timer->link.tqe_prev != NULL) ||
   2ec44:	6943      	ldr	r3, [r0, #20]
   2ec46:	b10b      	cbz	r3, 2ec4c <hal_timer_start_at+0x10>
        (timer->cb_func == NULL)) {
        return EINVAL;
   2ec48:	2016      	movs	r0, #22
    }

    __HAL_ENABLE_INTERRUPTS(ctx);

    return 0;
}
   2ec4a:	bd38      	pop	{r3, r4, r5, pc}
        (timer->cb_func == NULL)) {
   2ec4c:	6843      	ldr	r3, [r0, #4]
    if ((timer == NULL) || (timer->link.tqe_prev != NULL) ||
   2ec4e:	2b00      	cmp	r3, #0
   2ec50:	d036      	beq.n	2ecc0 <hal_timer_start_at+0x84>
    bsptimer = (struct nrf52_hal_timer *)timer->bsp_timer;
   2ec52:	6800      	ldr	r0, [r0, #0]
    timer->expiry = tick;
   2ec54:	60e1      	str	r1, [r4, #12]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   2ec56:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   2ec5a:	b672      	cpsid	i
    if (TAILQ_EMPTY(&bsptimer->hal_timer_q)) {
   2ec5c:	6943      	ldr	r3, [r0, #20]
   2ec5e:	b13b      	cbz	r3, 2ec70 <hal_timer_start_at+0x34>
        TAILQ_FOREACH(entry, &bsptimer->hal_timer_q, link) {
   2ec60:	b1bb      	cbz	r3, 2ec92 <hal_timer_start_at+0x56>
            if ((int32_t)(timer->expiry - entry->expiry) < 0) {
   2ec62:	68e2      	ldr	r2, [r4, #12]
   2ec64:	68d9      	ldr	r1, [r3, #12]
   2ec66:	1a52      	subs	r2, r2, r1
   2ec68:	2a00      	cmp	r2, #0
   2ec6a:	db0a      	blt.n	2ec82 <hal_timer_start_at+0x46>
        TAILQ_FOREACH(entry, &bsptimer->hal_timer_q, link) {
   2ec6c:	691b      	ldr	r3, [r3, #16]
   2ec6e:	e7f7      	b.n	2ec60 <hal_timer_start_at+0x24>
        TAILQ_INSERT_HEAD(&bsptimer->hal_timer_q, timer, link);
   2ec70:	4622      	mov	r2, r4
   2ec72:	f842 3f10 	str.w	r3, [r2, #16]!
   2ec76:	6182      	str	r2, [r0, #24]
   2ec78:	4603      	mov	r3, r0
   2ec7a:	f843 4f14 	str.w	r4, [r3, #20]!
   2ec7e:	6163      	str	r3, [r4, #20]
   2ec80:	e008      	b.n	2ec94 <hal_timer_start_at+0x58>
                TAILQ_INSERT_BEFORE(entry, timer, link);
   2ec82:	695a      	ldr	r2, [r3, #20]
   2ec84:	6162      	str	r2, [r4, #20]
   2ec86:	6123      	str	r3, [r4, #16]
   2ec88:	695a      	ldr	r2, [r3, #20]
   2ec8a:	6014      	str	r4, [r2, #0]
   2ec8c:	f104 0210 	add.w	r2, r4, #16
   2ec90:	615a      	str	r2, [r3, #20]
        if (!entry) {
   2ec92:	b133      	cbz	r3, 2eca2 <hal_timer_start_at+0x66>
    if (timer == TAILQ_FIRST(&bsptimer->hal_timer_q)) {
   2ec94:	6943      	ldr	r3, [r0, #20]
   2ec96:	42a3      	cmp	r3, r4
   2ec98:	d00c      	beq.n	2ecb4 <hal_timer_start_at+0x78>
    __HAL_ENABLE_INTERRUPTS(ctx);
   2ec9a:	b99d      	cbnz	r5, 2ecc4 <hal_timer_start_at+0x88>
  __ASM volatile ("cpsie i" : : : "memory");
   2ec9c:	b662      	cpsie	i
    return 0;
   2ec9e:	2000      	movs	r0, #0
   2eca0:	e7d3      	b.n	2ec4a <hal_timer_start_at+0xe>
            TAILQ_INSERT_TAIL(&bsptimer->hal_timer_q, timer, link);
   2eca2:	6123      	str	r3, [r4, #16]
   2eca4:	6983      	ldr	r3, [r0, #24]
   2eca6:	6163      	str	r3, [r4, #20]
   2eca8:	6983      	ldr	r3, [r0, #24]
   2ecaa:	601c      	str	r4, [r3, #0]
   2ecac:	f104 0310 	add.w	r3, r4, #16
   2ecb0:	6183      	str	r3, [r0, #24]
   2ecb2:	e7ef      	b.n	2ec94 <hal_timer_start_at+0x58>
        nrf_timer_set_ocmp(bsptimer, timer->expiry);
   2ecb4:	68e1      	ldr	r1, [r4, #12]
   2ecb6:	f7ff fd93 	bl	2e7e0 <nrf_timer_set_ocmp>
   2ecba:	e7ee      	b.n	2ec9a <hal_timer_start_at+0x5e>
        return EINVAL;
   2ecbc:	2016      	movs	r0, #22
}
   2ecbe:	4770      	bx	lr
        return EINVAL;
   2ecc0:	2016      	movs	r0, #22
   2ecc2:	e7c2      	b.n	2ec4a <hal_timer_start_at+0xe>
    return 0;
   2ecc4:	2000      	movs	r0, #0
   2ecc6:	e7c0      	b.n	2ec4a <hal_timer_start_at+0xe>

0002ecc8 <hal_timer_stop>:
    uint32_t ctx;
    int reset_ocmp;
    struct hal_timer *entry;
    struct nrf52_hal_timer *bsptimer;

    if (timer == NULL) {
   2ecc8:	b360      	cbz	r0, 2ed24 <hal_timer_stop+0x5c>
{
   2ecca:	b570      	push	{r4, r5, r6, lr}
   2eccc:	4603      	mov	r3, r0
        return EINVAL;
    }

   bsptimer = (struct nrf52_hal_timer *)timer->bsp_timer;
   2ecce:	6801      	ldr	r1, [r0, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   2ecd0:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   2ecd4:	b672      	cpsid	i

    __HAL_DISABLE_INTERRUPTS(ctx);

    if (timer->link.tqe_prev != NULL) {
   2ecd6:	6942      	ldr	r2, [r0, #20]
   2ecd8:	b18a      	cbz	r2, 2ecfe <hal_timer_stop+0x36>
        reset_ocmp = 0;
        if (timer == TAILQ_FIRST(&bsptimer->hal_timer_q)) {
   2ecda:	6948      	ldr	r0, [r1, #20]
   2ecdc:	4298      	cmp	r0, r3
   2ecde:	d012      	beq.n	2ed06 <hal_timer_stop+0x3e>
        reset_ocmp = 0;
   2ece0:	2500      	movs	r5, #0
            /* If first on queue, we will need to reset OCMP */
            entry = TAILQ_NEXT(timer, link);
            reset_ocmp = 1;
        }
        TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
   2ece2:	6918      	ldr	r0, [r3, #16]
   2ece4:	b190      	cbz	r0, 2ed0c <hal_timer_stop+0x44>
   2ece6:	6142      	str	r2, [r0, #20]
   2ece8:	695a      	ldr	r2, [r3, #20]
   2ecea:	6918      	ldr	r0, [r3, #16]
   2ecec:	6010      	str	r0, [r2, #0]
        timer->link.tqe_prev = NULL;
   2ecee:	2200      	movs	r2, #0
   2ecf0:	615a      	str	r2, [r3, #20]
        if (reset_ocmp) {
   2ecf2:	b125      	cbz	r5, 2ecfe <hal_timer_stop+0x36>
            if (entry) {
   2ecf4:	b166      	cbz	r6, 2ed10 <hal_timer_stop+0x48>
                nrf_timer_set_ocmp((struct nrf52_hal_timer *)entry->bsp_timer,
   2ecf6:	68f1      	ldr	r1, [r6, #12]
   2ecf8:	6830      	ldr	r0, [r6, #0]
   2ecfa:	f7ff fd71 	bl	2e7e0 <nrf_timer_set_ocmp>
                }
            }
        }
    }

    __HAL_ENABLE_INTERRUPTS(ctx);
   2ecfe:	b99c      	cbnz	r4, 2ed28 <hal_timer_stop+0x60>
  __ASM volatile ("cpsie i" : : : "memory");
   2ed00:	b662      	cpsie	i

    return 0;
   2ed02:	2000      	movs	r0, #0
}
   2ed04:	bd70      	pop	{r4, r5, r6, pc}
            entry = TAILQ_NEXT(timer, link);
   2ed06:	691e      	ldr	r6, [r3, #16]
            reset_ocmp = 1;
   2ed08:	2501      	movs	r5, #1
   2ed0a:	e7ea      	b.n	2ece2 <hal_timer_stop+0x1a>
        TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
   2ed0c:	618a      	str	r2, [r1, #24]
   2ed0e:	e7eb      	b.n	2ece8 <hal_timer_stop+0x20>
                if (bsptimer->tmr_rtc) {
   2ed10:	788b      	ldrb	r3, [r1, #2]
   2ed12:	b11b      	cbz	r3, 2ed1c <hal_timer_stop+0x54>
                    nrf_rtc_disable_ocmp((NRF_RTC_Type *)bsptimer->tmr_reg);
   2ed14:	6908      	ldr	r0, [r1, #16]
   2ed16:	f7ff fde2 	bl	2e8de <nrf_rtc_disable_ocmp>
   2ed1a:	e7f0      	b.n	2ecfe <hal_timer_stop+0x36>
                    nrf_timer_disable_ocmp(bsptimer->tmr_reg);
   2ed1c:	6908      	ldr	r0, [r1, #16]
   2ed1e:	f7ff fdd9 	bl	2e8d4 <nrf_timer_disable_ocmp>
   2ed22:	e7ec      	b.n	2ecfe <hal_timer_stop+0x36>
        return EINVAL;
   2ed24:	2016      	movs	r0, #22
}
   2ed26:	4770      	bx	lr
    return 0;
   2ed28:	2000      	movs	r0, #0
   2ed2a:	e7eb      	b.n	2ed04 <hal_timer_stop+0x3c>

0002ed2c <put_le16>:
put_le16(void *buf, uint16_t x)
{
    uint8_t *u8ptr;

    u8ptr = buf;
    u8ptr[0] = (uint8_t)x;
   2ed2c:	7001      	strb	r1, [r0, #0]
    u8ptr[1] = (uint8_t)(x >> 8);
   2ed2e:	0a09      	lsrs	r1, r1, #8
   2ed30:	7041      	strb	r1, [r0, #1]
}
   2ed32:	4770      	bx	lr

0002ed34 <put_le32>:
put_le32(void *buf, uint32_t x)
{
    uint8_t *u8ptr;

    u8ptr = buf;
    u8ptr[0] = (uint8_t)x;
   2ed34:	7001      	strb	r1, [r0, #0]
    u8ptr[1] = (uint8_t)(x >> 8);
   2ed36:	f3c1 2307 	ubfx	r3, r1, #8, #8
   2ed3a:	7043      	strb	r3, [r0, #1]
    u8ptr[2] = (uint8_t)(x >> 16);
   2ed3c:	f3c1 4307 	ubfx	r3, r1, #16, #8
   2ed40:	7083      	strb	r3, [r0, #2]
    u8ptr[3] = (uint8_t)(x >> 24);
   2ed42:	0e09      	lsrs	r1, r1, #24
   2ed44:	70c1      	strb	r1, [r0, #3]
}
   2ed46:	4770      	bx	lr

0002ed48 <put_le64>:
put_le64(void *buf, uint64_t x)
{
    uint8_t *u8ptr;

    u8ptr = buf;
    u8ptr[0] = (uint8_t)x;
   2ed48:	7002      	strb	r2, [r0, #0]
    u8ptr[1] = (uint8_t)(x >> 8);
   2ed4a:	f3c2 2107 	ubfx	r1, r2, #8, #8
   2ed4e:	7041      	strb	r1, [r0, #1]
    u8ptr[2] = (uint8_t)(x >> 16);
   2ed50:	f3c2 4107 	ubfx	r1, r2, #16, #8
   2ed54:	7081      	strb	r1, [r0, #2]
    u8ptr[3] = (uint8_t)(x >> 24);
   2ed56:	0e12      	lsrs	r2, r2, #24
   2ed58:	70c2      	strb	r2, [r0, #3]
    u8ptr[4] = (uint8_t)(x >> 32);
   2ed5a:	7103      	strb	r3, [r0, #4]
    u8ptr[5] = (uint8_t)(x >> 40);
   2ed5c:	f3c3 2207 	ubfx	r2, r3, #8, #8
   2ed60:	7142      	strb	r2, [r0, #5]
    u8ptr[6] = (uint8_t)(x >> 48);
   2ed62:	f3c3 4207 	ubfx	r2, r3, #16, #8
   2ed66:	7182      	strb	r2, [r0, #6]
    u8ptr[7] = (uint8_t)(x >> 56);
   2ed68:	0e1b      	lsrs	r3, r3, #24
   2ed6a:	71c3      	strb	r3, [r0, #7]
}
   2ed6c:	4770      	bx	lr

0002ed6e <get_le16>:
{
    const uint8_t *u8ptr;
    uint16_t x;

    u8ptr = buf;
    x = u8ptr[0];
   2ed6e:	7803      	ldrb	r3, [r0, #0]
    x |= (uint16_t)u8ptr[1] << 8;
   2ed70:	7840      	ldrb	r0, [r0, #1]

    return x;
}
   2ed72:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   2ed76:	4770      	bx	lr

0002ed78 <get_le32>:
{
    const uint8_t *u8ptr;
    uint32_t x;

    u8ptr = buf;
    x = u8ptr[0];
   2ed78:	7803      	ldrb	r3, [r0, #0]
    x |= (uint32_t)u8ptr[1] << 8;
   2ed7a:	7842      	ldrb	r2, [r0, #1]
   2ed7c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    x |= (uint32_t)u8ptr[2] << 16;
   2ed80:	7882      	ldrb	r2, [r0, #2]
   2ed82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    x |= (uint32_t)u8ptr[3] << 24;
   2ed86:	78c0      	ldrb	r0, [r0, #3]

    return x;
}
   2ed88:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
   2ed8c:	4770      	bx	lr

0002ed8e <get_le64>:

uint64_t
get_le64(const void *buf)
{
   2ed8e:	e92d 0bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp}
    const uint8_t *u8ptr;
    uint64_t x;

    u8ptr = buf;
    x = u8ptr[0];
   2ed92:	7804      	ldrb	r4, [r0, #0]
   2ed94:	2500      	movs	r5, #0
    x |= (uint64_t)u8ptr[1] << 8;
   2ed96:	7846      	ldrb	r6, [r0, #1]
   2ed98:	2300      	movs	r3, #0
   2ed9a:	0232      	lsls	r2, r6, #8
   2ed9c:	ea44 0802 	orr.w	r8, r4, r2
   2eda0:	ea45 0903 	orr.w	r9, r5, r3
    x |= (uint64_t)u8ptr[2] << 16;
   2eda4:	7886      	ldrb	r6, [r0, #2]
   2eda6:	2300      	movs	r3, #0
   2eda8:	0432      	lsls	r2, r6, #16
   2edaa:	ea48 0402 	orr.w	r4, r8, r2
   2edae:	ea49 0503 	orr.w	r5, r9, r3
    x |= (uint64_t)u8ptr[3] << 24;
   2edb2:	78c6      	ldrb	r6, [r0, #3]
   2edb4:	ea4f 2916 	mov.w	r9, r6, lsr #8
   2edb8:	ea4f 6806 	mov.w	r8, r6, lsl #24
   2edbc:	ea48 0204 	orr.w	r2, r8, r4
   2edc0:	ea49 0305 	orr.w	r3, r9, r5
    x |= (uint64_t)u8ptr[4] << 32;
   2edc4:	2400      	movs	r4, #0
   2edc6:	7905      	ldrb	r5, [r0, #4]
   2edc8:	ea42 0b04 	orr.w	fp, r2, r4
   2edcc:	ea43 0c05 	orr.w	ip, r3, r5
    x |= (uint64_t)u8ptr[5] << 40;
   2edd0:	f890 8005 	ldrb.w	r8, [r0, #5]
   2edd4:	ea4f 2708 	mov.w	r7, r8, lsl #8
   2edd8:	ea4b 0204 	orr.w	r2, fp, r4
   2eddc:	ea4c 0307 	orr.w	r3, ip, r7
    x |= (uint64_t)u8ptr[6] << 48;
   2ede0:	f890 8006 	ldrb.w	r8, [r0, #6]
   2ede4:	ea4f 4c08 	mov.w	ip, r8, lsl #16
   2ede8:	ea44 0602 	orr.w	r6, r4, r2
   2edec:	ea4c 0703 	orr.w	r7, ip, r3
    x |= (uint64_t)u8ptr[7] << 56;
   2edf0:	79c2      	ldrb	r2, [r0, #7]
   2edf2:	ea4f 6902 	mov.w	r9, r2, lsl #24

    return x;
}
   2edf6:	ea44 0006 	orr.w	r0, r4, r6
   2edfa:	ea49 0107 	orr.w	r1, r9, r7
   2edfe:	e8bd 0bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp}
   2ee02:	4770      	bx	lr

0002ee04 <get_be32>:
{
    const uint8_t *u8ptr;
    uint32_t x;

    u8ptr = buf;
    x = (uint32_t)u8ptr[0] << 24;
   2ee04:	7802      	ldrb	r2, [r0, #0]
    x |= (uint32_t)u8ptr[1] << 16;
   2ee06:	7843      	ldrb	r3, [r0, #1]
   2ee08:	041b      	lsls	r3, r3, #16
   2ee0a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    x |= (uint32_t)u8ptr[2] << 8;
   2ee0e:	7882      	ldrb	r2, [r0, #2]
   2ee10:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    x |= u8ptr[3];
   2ee14:	78c0      	ldrb	r0, [r0, #3]

    return x;
}
   2ee16:	4318      	orrs	r0, r3
   2ee18:	4770      	bx	lr

0002ee1a <swap_in_place>:
    int i;
    int j;

    u8ptr = buf;

    for (i = 0, j = len - 1; i < j; i++, j--) {
   2ee1a:	3901      	subs	r1, #1
   2ee1c:	2300      	movs	r3, #0
   2ee1e:	428b      	cmp	r3, r1
   2ee20:	da0a      	bge.n	2ee38 <swap_in_place+0x1e>
{
   2ee22:	b410      	push	{r4}
        tmp = u8ptr[i];
   2ee24:	5cc2      	ldrb	r2, [r0, r3]

        u8ptr[i] = u8ptr[j];
   2ee26:	5c44      	ldrb	r4, [r0, r1]
   2ee28:	54c4      	strb	r4, [r0, r3]
        u8ptr[j] = tmp;
   2ee2a:	5442      	strb	r2, [r0, r1]
    for (i = 0, j = len - 1; i < j; i++, j--) {
   2ee2c:	3301      	adds	r3, #1
   2ee2e:	3901      	subs	r1, #1
   2ee30:	428b      	cmp	r3, r1
   2ee32:	dbf7      	blt.n	2ee24 <swap_in_place+0xa>
    }
}
   2ee34:	bc10      	pop	{r4}
   2ee36:	4770      	bx	lr
   2ee38:	4770      	bx	lr

0002ee3a <swap_buf>:
void
swap_buf(uint8_t *dst, const uint8_t *src, int len)
{
    int i;

    for (i = 0; i < len; i++) {
   2ee3a:	2300      	movs	r3, #0
   2ee3c:	4293      	cmp	r3, r2
   2ee3e:	da09      	bge.n	2ee54 <swap_buf+0x1a>
{
   2ee40:	b430      	push	{r4, r5}
        dst[len - 1 - i] = src[i];
   2ee42:	1e54      	subs	r4, r2, #1
   2ee44:	1ae4      	subs	r4, r4, r3
   2ee46:	5ccd      	ldrb	r5, [r1, r3]
   2ee48:	5505      	strb	r5, [r0, r4]
    for (i = 0; i < len; i++) {
   2ee4a:	3301      	adds	r3, #1
   2ee4c:	4293      	cmp	r3, r2
   2ee4e:	dbf8      	blt.n	2ee42 <swap_buf+0x8>
    }
}
   2ee50:	bc30      	pop	{r4, r5}
   2ee52:	4770      	bx	lr
   2ee54:	4770      	bx	lr

0002ee56 <os_cputime_init>:
struct os_cputime_data g_os_cputime;
#endif

int
os_cputime_init(uint32_t clock_freq)
{
   2ee56:	b508      	push	{r3, lr}

    /* Set the ticks per microsecond. */
#if defined(OS_CPUTIME_FREQ_HIGH)
    g_os_cputime.ticks_per_usec = clock_freq / 1000000U;
#endif
    rc = hal_timer_config(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM), clock_freq);
   2ee58:	4601      	mov	r1, r0
   2ee5a:	2005      	movs	r0, #5
   2ee5c:	f7ff fe06 	bl	2ea6c <hal_timer_config>
    return rc;
}
   2ee60:	bd08      	pop	{r3, pc}

0002ee62 <os_cputime_timer_init>:
    os_cputime_delay_ticks(ticks);
}

void
os_cputime_timer_init(struct hal_timer *timer, hal_timer_cb fp, void *arg)
{
   2ee62:	b510      	push	{r4, lr}
    assert(timer != NULL);
   2ee64:	b138      	cbz	r0, 2ee76 <os_cputime_timer_init+0x14>
    assert(fp != NULL);
   2ee66:	b181      	cbz	r1, 2ee8a <os_cputime_timer_init+0x28>

    hal_timer_set_cb(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM), timer, fp, arg);
   2ee68:	4613      	mov	r3, r2
   2ee6a:	460a      	mov	r2, r1
   2ee6c:	4601      	mov	r1, r0
   2ee6e:	2005      	movs	r0, #5
   2ee70:	f7ff fed0 	bl	2ec14 <hal_timer_set_cb>
}
   2ee74:	bd10      	pop	{r4, pc}
    assert(timer != NULL);
   2ee76:	f7dd f9b7 	bl	c1e8 <hal_debugger_connected>
   2ee7a:	b100      	cbz	r0, 2ee7e <os_cputime_timer_init+0x1c>
   2ee7c:	be01      	bkpt	0x0001
   2ee7e:	2300      	movs	r3, #0
   2ee80:	461a      	mov	r2, r3
   2ee82:	4619      	mov	r1, r3
   2ee84:	4618      	mov	r0, r3
   2ee86:	f7dd fe63 	bl	cb50 <__assert_func>
    assert(fp != NULL);
   2ee8a:	f7dd f9ad 	bl	c1e8 <hal_debugger_connected>
   2ee8e:	b100      	cbz	r0, 2ee92 <os_cputime_timer_init+0x30>
   2ee90:	be01      	bkpt	0x0001
   2ee92:	2300      	movs	r3, #0
   2ee94:	461a      	mov	r2, r3
   2ee96:	4619      	mov	r1, r3
   2ee98:	4618      	mov	r0, r3
   2ee9a:	f7dd fe59 	bl	cb50 <__assert_func>

0002ee9e <os_cputime_timer_start>:

int
os_cputime_timer_start(struct hal_timer *timer, uint32_t cputime)
{
   2ee9e:	b508      	push	{r3, lr}
    int rc;

    rc = hal_timer_start_at(timer, cputime);
   2eea0:	f7ff fecc 	bl	2ec3c <hal_timer_start_at>
    return rc;
}
   2eea4:	bd08      	pop	{r3, pc}

0002eea6 <os_cputime_timer_stop>:
    return rc;
}

void
os_cputime_timer_stop(struct hal_timer *timer)
{
   2eea6:	b508      	push	{r3, lr}
    hal_timer_stop(timer);
   2eea8:	f7ff ff0e 	bl	2ecc8 <hal_timer_stop>
}
   2eeac:	bd08      	pop	{r3, pc}

0002eeae <os_cputime_get32>:

uint32_t
os_cputime_get32(void)
{
   2eeae:	b508      	push	{r3, lr}
    uint32_t cpu_time;

    cpu_time = hal_timer_read(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM));
   2eeb0:	2005      	movs	r0, #5
   2eeb2:	f7ff fe93 	bl	2ebdc <hal_timer_read>
    return cpu_time;
}
   2eeb6:	bd08      	pop	{r3, pc}

0002eeb8 <os_cputime_usecs_to_ticks>:
    /*
     * Faster calculation but could be off 1 full tick since we do not
     * add residual back. Adding back the residual is commented out below, but
     * shown.
     */
    ticks = (1ULL << 32) * MYNEWT_VAL(OS_CPUTIME_FREQ) / 1000000 * usecs;
   2eeb8:	4b02      	ldr	r3, [pc, #8]	; (2eec4 <os_cputime_usecs_to_ticks+0xc>)
   2eeba:	fba0 0103 	umull	r0, r1, r0, r3

    /* Residual for 32768 Hz. */
    //ticks += ((uint64_t)usecs * (1526122139+1)) >> 32;

    return ticks >> 32;
}
   2eebe:	4608      	mov	r0, r1
   2eec0:	4770      	bx	lr
   2eec2:	bf00      	nop
   2eec4:	08637bd0 	.word	0x08637bd0

0002eec8 <os_cputime_ticks_to_usecs>:
    uint32_t usecs;
    uint32_t shift;

    shift = __builtin_popcount(MYNEWT_VAL(OS_CPUTIME_FREQ) - 1) - 6;

    usecs = ((ticks >> shift) * 15625) +
   2eec8:	0a41      	lsrs	r1, r0, #9
   2eeca:	f643 5209 	movw	r2, #15625	; 0x3d09
            (((ticks & ~(~0U << shift)) * 15625) >> shift);
   2eece:	f3c0 0308 	ubfx	r3, r0, #0, #9
   2eed2:	fb02 f303 	mul.w	r3, r2, r3
   2eed6:	0a5b      	lsrs	r3, r3, #9
    return usecs;
}
   2eed8:	fb02 3001 	mla	r0, r2, r1, r3
   2eedc:	4770      	bx	lr

0002eede <os_error_to_sys>:
#include "os/os_error.h"

int
os_error_to_sys(os_error_t os_error)
{
    switch (os_error) {
   2eede:	280b      	cmp	r0, #11
   2eee0:	d818      	bhi.n	2ef14 <os_error_to_sys+0x36>
   2eee2:	e8df f000 	tbb	[pc, r0]
   2eee6:	1a06      	.short	0x1a06
   2eee8:	17170b08 	.word	0x17170b08
   2eeec:	1717170e 	.word	0x1717170e
   2eef0:	1411      	.short	0x1411
        case OS_OK:             return SYS_EOK;
   2eef2:	2000      	movs	r0, #0
   2eef4:	4770      	bx	lr
        case OS_ENOMEM:         return SYS_ENOMEM; 
        case OS_EINVAL:         return SYS_EINVAL; 
   2eef6:	f06f 0001 	mvn.w	r0, #1
   2eefa:	4770      	bx	lr
        case OS_INVALID_PARM:   return SYS_EINVAL; 
   2eefc:	f06f 0001 	mvn.w	r0, #1
   2ef00:	4770      	bx	lr
        case OS_TIMEOUT:        return SYS_ETIMEOUT; 
   2ef02:	f06f 0002 	mvn.w	r0, #2
   2ef06:	4770      	bx	lr
        case OS_ENOENT:         return SYS_ENOENT; 
   2ef08:	f06f 0003 	mvn.w	r0, #3
   2ef0c:	4770      	bx	lr
        case OS_EBUSY:          return SYS_EBUSY; 
   2ef0e:	f06f 0007 	mvn.w	r0, #7
   2ef12:	4770      	bx	lr
        default:                return SYS_EUNKNOWN;
   2ef14:	f06f 000c 	mvn.w	r0, #12
   2ef18:	4770      	bx	lr
        case OS_ENOMEM:         return SYS_ENOMEM; 
   2ef1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }
}
   2ef1e:	4770      	bx	lr

0002ef20 <os_sem_init>:
{
    os_error_t ret;

    os_trace_api_u32x2(OS_TRACE_ID_SEM_INIT, (uint32_t)sem, (uint32_t)tokens);

    if (!sem) {
   2ef20:	4603      	mov	r3, r0
   2ef22:	b118      	cbz	r0, 2ef2c <os_sem_init+0xc>
        ret = OS_INVALID_PARM;
        goto done;
    }

    sem->sem_tokens = tokens;
   2ef24:	80c1      	strh	r1, [r0, #6]
    SLIST_FIRST(&sem->sem_head) = NULL;
   2ef26:	2000      	movs	r0, #0
   2ef28:	6018      	str	r0, [r3, #0]
   2ef2a:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   2ef2c:	2003      	movs	r0, #3
    ret = OS_OK;

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_INIT, (uint32_t)ret);
    return ret;
}
   2ef2e:	4770      	bx	lr

0002ef30 <os_sem_release>:

os_error_t
os_sem_release(struct os_sem *sem)
{
   2ef30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32(OS_TRACE_ID_SEM_RELEASE, (uint32_t)sem);

    /* OS must be started to release semaphores */
    if (!g_os_started) {
   2ef32:	4b17      	ldr	r3, [pc, #92]	; (2ef90 <os_sem_release+0x60>)
   2ef34:	681b      	ldr	r3, [r3, #0]
   2ef36:	b33b      	cbz	r3, 2ef88 <os_sem_release+0x58>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid semaphore */
    if (!sem) {
   2ef38:	b340      	cbz	r0, 2ef8c <os_sem_release+0x5c>
   2ef3a:	4604      	mov	r4, r0
        goto done;
    }

    /* Get current task */
    resched = 0;
    current = os_sched_get_current_task();
   2ef3c:	f7df f824 	bl	df88 <os_sched_get_current_task>
   2ef40:	4607      	mov	r7, r0

    OS_ENTER_CRITICAL(sr);
   2ef42:	f7df faf7 	bl	e534 <os_arch_save_sr>
   2ef46:	4606      	mov	r6, r0

    /* Check if tasks are waiting for the semaphore */
    rdy = SLIST_FIRST(&sem->sem_head);
   2ef48:	6825      	ldr	r5, [r4, #0]
    if (rdy) {
   2ef4a:	b165      	cbz	r5, 2ef66 <os_sem_release+0x36>
        /* Clear flag that we are waiting on the semaphore; wake up task */
        rdy->t_flags &= ~OS_TASK_FLAG_SEM_WAIT;
   2ef4c:	7b6b      	ldrb	r3, [r5, #13]
   2ef4e:	f023 0302 	bic.w	r3, r3, #2
   2ef52:	736b      	strb	r3, [r5, #13]
        os_sched_wakeup(rdy);
   2ef54:	4628      	mov	r0, r5
   2ef56:	f7df f86b 	bl	e030 <os_sched_wakeup>

        /* Schedule if waiting task higher priority */
        if (current->t_prio > rdy->t_prio) {
   2ef5a:	7afa      	ldrb	r2, [r7, #11]
   2ef5c:	7aeb      	ldrb	r3, [r5, #11]
   2ef5e:	429a      	cmp	r2, r3
   2ef60:	d80b      	bhi.n	2ef7a <os_sem_release+0x4a>
    resched = 0;
   2ef62:	2400      	movs	r4, #0
   2ef64:	e003      	b.n	2ef6e <os_sem_release+0x3e>
            resched = 1;
        }
    } else {
        /* Add to the number of tokens */
        sem->sem_tokens++;
   2ef66:	88e3      	ldrh	r3, [r4, #6]
   2ef68:	3301      	adds	r3, #1
   2ef6a:	80e3      	strh	r3, [r4, #6]
    resched = 0;
   2ef6c:	2400      	movs	r4, #0
    }

    OS_EXIT_CRITICAL(sr);
   2ef6e:	4630      	mov	r0, r6
   2ef70:	f7df fae6 	bl	e540 <os_arch_restore_sr>

    /* Re-schedule if needed */
    if (resched) {
   2ef74:	b91c      	cbnz	r4, 2ef7e <os_sem_release+0x4e>
        os_sched(rdy);
    }

    ret = OS_OK;
   2ef76:	2000      	movs	r0, #0

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_RELEASE, (uint32_t)ret);
    return ret;
}
   2ef78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            resched = 1;
   2ef7a:	2401      	movs	r4, #1
   2ef7c:	e7f7      	b.n	2ef6e <os_sem_release+0x3e>
        os_sched(rdy);
   2ef7e:	4628      	mov	r0, r5
   2ef80:	f7df f8e2 	bl	e148 <os_sched>
    ret = OS_OK;
   2ef84:	2000      	movs	r0, #0
   2ef86:	e7f7      	b.n	2ef78 <os_sem_release+0x48>
        ret = OS_NOT_STARTED;
   2ef88:	2009      	movs	r0, #9
   2ef8a:	e7f5      	b.n	2ef78 <os_sem_release+0x48>
        ret = OS_INVALID_PARM;
   2ef8c:	2003      	movs	r0, #3
   2ef8e:	e7f3      	b.n	2ef78 <os_sem_release+0x48>
   2ef90:	2000339c 	.word	0x2000339c

0002ef94 <os_sem_pend>:

os_error_t
os_sem_pend(struct os_sem *sem, os_time_t timeout)
{
   2ef94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32x2(OS_TRACE_ID_SEM_PEND, (uint32_t)sem, (uint32_t)timeout);

    /* Check if OS is started */
    if (!g_os_started) {
   2ef96:	4b2c      	ldr	r3, [pc, #176]	; (2f048 <os_sem_pend+0xb4>)
   2ef98:	681b      	ldr	r3, [r3, #0]
   2ef9a:	2b00      	cmp	r3, #0
   2ef9c:	d04f      	beq.n	2f03e <os_sem_pend+0xaa>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid semaphore */
    if (!sem) {
   2ef9e:	2800      	cmp	r0, #0
   2efa0:	d04f      	beq.n	2f042 <os_sem_pend+0xae>
   2efa2:	460d      	mov	r5, r1
   2efa4:	4604      	mov	r4, r0
        goto done;
    }

    /* Assume we dont have to put task to sleep; get current task */
    sched = 0;
    current = os_sched_get_current_task();
   2efa6:	f7de ffef 	bl	df88 <os_sched_get_current_task>
   2efaa:	4606      	mov	r6, r0

    OS_ENTER_CRITICAL(sr);
   2efac:	f7df fac2 	bl	e534 <os_arch_save_sr>
   2efb0:	4607      	mov	r7, r0

    /*
     * If there is a token available, take it. If no token, either return
     * with error if timeout was 0 or put this task to sleep.
     */
    if (sem->sem_tokens != 0) {
   2efb2:	88e3      	ldrh	r3, [r4, #6]
   2efb4:	b14b      	cbz	r3, 2efca <os_sem_pend+0x36>
        sem->sem_tokens--;
   2efb6:	3b01      	subs	r3, #1
   2efb8:	80e3      	strh	r3, [r4, #6]
        ret = OS_OK;
   2efba:	2400      	movs	r4, #0
    sched = 0;
   2efbc:	4625      	mov	r5, r4
        /* We will put this task to sleep */
        sched = 1;
        os_sched_sleep(current, timeout);
    }

    OS_EXIT_CRITICAL(sr);
   2efbe:	4638      	mov	r0, r7
   2efc0:	f7df fabe 	bl	e540 <os_arch_restore_sr>

    if (sched) {
   2efc4:	bb45      	cbnz	r5, 2f018 <os_sem_pend+0x84>
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_PEND, (uint32_t)ret);
    return ret;
}
   2efc6:	4620      	mov	r0, r4
   2efc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if (timeout == 0) {
   2efca:	b315      	cbz	r5, 2f012 <os_sem_pend+0x7e>
        current->t_obj = sem;
   2efcc:	61f4      	str	r4, [r6, #28]
        current->t_flags |= OS_TASK_FLAG_SEM_WAIT;
   2efce:	7b73      	ldrb	r3, [r6, #13]
   2efd0:	f043 0302 	orr.w	r3, r3, #2
   2efd4:	7373      	strb	r3, [r6, #13]
        if (!SLIST_EMPTY(&sem->sem_head)) {
   2efd6:	f8d4 c000 	ldr.w	ip, [r4]
   2efda:	f1bc 0f00 	cmp.w	ip, #0
   2efde:	d00e      	beq.n	2effe <os_sem_pend+0x6a>
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
   2efe0:	4663      	mov	r3, ip
        last = NULL;
   2efe2:	2000      	movs	r0, #0
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
   2efe4:	b133      	cbz	r3, 2eff4 <os_sem_pend+0x60>
                if (current->t_prio < entry->t_prio) {
   2efe6:	7af1      	ldrb	r1, [r6, #11]
   2efe8:	7ada      	ldrb	r2, [r3, #11]
   2efea:	4291      	cmp	r1, r2
   2efec:	d302      	bcc.n	2eff4 <os_sem_pend+0x60>
                last = entry;
   2efee:	4618      	mov	r0, r3
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
   2eff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2eff2:	e7f7      	b.n	2efe4 <os_sem_pend+0x50>
        if (last) {
   2eff4:	b118      	cbz	r0, 2effe <os_sem_pend+0x6a>
            SLIST_INSERT_AFTER(last, current, t_obj_list);
   2eff6:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   2eff8:	64f3      	str	r3, [r6, #76]	; 0x4c
   2effa:	64c6      	str	r6, [r0, #76]	; 0x4c
   2effc:	e002      	b.n	2f004 <os_sem_pend+0x70>
            SLIST_INSERT_HEAD(&sem->sem_head, current, t_obj_list);
   2effe:	f8c6 c04c 	str.w	ip, [r6, #76]	; 0x4c
   2f002:	6026      	str	r6, [r4, #0]
        os_sched_sleep(current, timeout);
   2f004:	4629      	mov	r1, r5
   2f006:	4630      	mov	r0, r6
   2f008:	f7de ffca 	bl	dfa0 <os_sched_sleep>
        ret = OS_OK;
   2f00c:	2400      	movs	r4, #0
        sched = 1;
   2f00e:	2501      	movs	r5, #1
   2f010:	e7d5      	b.n	2efbe <os_sem_pend+0x2a>
        ret = OS_TIMEOUT;
   2f012:	2406      	movs	r4, #6
    sched = 0;
   2f014:	2500      	movs	r5, #0
   2f016:	e7d2      	b.n	2efbe <os_sem_pend+0x2a>
        os_sched(NULL);
   2f018:	2000      	movs	r0, #0
   2f01a:	f7df f895 	bl	e148 <os_sched>
        if (current->t_flags & OS_TASK_FLAG_SEM_WAIT) {
   2f01e:	7b73      	ldrb	r3, [r6, #13]
   2f020:	f013 0f02 	tst.w	r3, #2
   2f024:	d101      	bne.n	2f02a <os_sem_pend+0x96>
            ret = OS_OK;
   2f026:	2400      	movs	r4, #0
   2f028:	e7cd      	b.n	2efc6 <os_sem_pend+0x32>
            OS_ENTER_CRITICAL(sr);
   2f02a:	f7df fa83 	bl	e534 <os_arch_save_sr>
            current->t_flags &= ~OS_TASK_FLAG_SEM_WAIT;
   2f02e:	7b73      	ldrb	r3, [r6, #13]
   2f030:	f023 0302 	bic.w	r3, r3, #2
   2f034:	7373      	strb	r3, [r6, #13]
            OS_EXIT_CRITICAL(sr);
   2f036:	f7df fa83 	bl	e540 <os_arch_restore_sr>
            ret = OS_TIMEOUT;
   2f03a:	2406      	movs	r4, #6
   2f03c:	e7c3      	b.n	2efc6 <os_sem_pend+0x32>
        ret = OS_NOT_STARTED;
   2f03e:	2409      	movs	r4, #9
   2f040:	e7c1      	b.n	2efc6 <os_sem_pend+0x32>
        ret = OS_INVALID_PARM;
   2f042:	2403      	movs	r4, #3
   2f044:	e7bf      	b.n	2efc6 <os_sem_pend+0x32>
   2f046:	bf00      	nop
   2f048:	2000339c 	.word	0x2000339c

0002f04c <malloc_lock_nop>:
    },
    &__malloc_head,
    &__malloc_head
};

static bool malloc_lock_nop() {return true;}
   2f04c:	2001      	movs	r0, #1
   2f04e:	4770      	bx	lr

0002f050 <malloc_unlock_nop>:
static void malloc_unlock_nop() {}
   2f050:	4770      	bx	lr

0002f052 <__malloc_from_block>:
static void *__malloc_from_block(struct free_arena_header *fp, size_t size)
{
    size_t fsize;
    struct free_arena_header *nfp, *na, *fpn, *fpp;

    fsize = fp->a.size;
   2f052:	6842      	ldr	r2, [r0, #4]

    /* We need the 2* to account for the larger requirements of a
       free block */
    if (fsize >= size + 2 * sizeof(struct arena_header)) {
   2f054:	f101 0320 	add.w	r3, r1, #32
   2f058:	4293      	cmp	r3, r2
   2f05a:	d907      	bls.n	2f06c <__malloc_from_block+0x1a>
        nfp->next_free = fpn = fp->next_free;
        nfp->prev_free = fpp = fp->prev_free;
        fpn->prev_free = nfp;
        fpp->next_free = nfp;
    } else {
        fp->a.type = ARENA_TYPE_USED; /* Allocate the whole block */
   2f05c:	2300      	movs	r3, #0
   2f05e:	6003      	str	r3, [r0, #0]
    ap = ah->prev_free;
   2f060:	6942      	ldr	r2, [r0, #20]
    an = ah->next_free;
   2f062:	6903      	ldr	r3, [r0, #16]
    ap->next_free = an;
   2f064:	6113      	str	r3, [r2, #16]
    an->prev_free = ap;
   2f066:	615a      	str	r2, [r3, #20]
        remove_from_free_chain(fp);
    }

    return (void *)(&fp->a + 1);
}
   2f068:	3010      	adds	r0, #16
   2f06a:	4770      	bx	lr
{
   2f06c:	b430      	push	{r4, r5}
        nfp = (struct free_arena_header *)((char *)fp + size);
   2f06e:	1843      	adds	r3, r0, r1
        na = fp->a.next;
   2f070:	6884      	ldr	r4, [r0, #8]
        nfp->a.type = ARENA_TYPE_FREE;
   2f072:	2501      	movs	r5, #1
   2f074:	5045      	str	r5, [r0, r1]
        nfp->a.size = fsize - size;
   2f076:	1a52      	subs	r2, r2, r1
   2f078:	605a      	str	r2, [r3, #4]
        fp->a.type = ARENA_TYPE_USED;
   2f07a:	2200      	movs	r2, #0
   2f07c:	6002      	str	r2, [r0, #0]
        fp->a.size = size;
   2f07e:	6041      	str	r1, [r0, #4]
        nfp->a.prev = fp;
   2f080:	60d8      	str	r0, [r3, #12]
        nfp->a.next = na;
   2f082:	609c      	str	r4, [r3, #8]
        na->a.prev = nfp;
   2f084:	60e3      	str	r3, [r4, #12]
        fp->a.next = nfp;
   2f086:	6083      	str	r3, [r0, #8]
        nfp->next_free = fpn = fp->next_free;
   2f088:	6901      	ldr	r1, [r0, #16]
   2f08a:	6119      	str	r1, [r3, #16]
        nfp->prev_free = fpp = fp->prev_free;
   2f08c:	6942      	ldr	r2, [r0, #20]
   2f08e:	615a      	str	r2, [r3, #20]
        fpn->prev_free = nfp;
   2f090:	614b      	str	r3, [r1, #20]
        fpp->next_free = nfp;
   2f092:	6113      	str	r3, [r2, #16]
}
   2f094:	3010      	adds	r0, #16
   2f096:	bc30      	pop	{r4, r5}
   2f098:	4770      	bx	lr
	...

0002f09c <__free_block>:

static struct free_arena_header *__free_block(struct free_arena_header *ah)
{
   2f09c:	b410      	push	{r4}
   2f09e:	4603      	mov	r3, r0
    struct free_arena_header *pah, *nah;

    pah = ah->a.prev;
   2f0a0:	68c0      	ldr	r0, [r0, #12]
    nah = ah->a.next;
   2f0a2:	6899      	ldr	r1, [r3, #8]
    if (pah->a.type == ARENA_TYPE_FREE &&
   2f0a4:	6802      	ldr	r2, [r0, #0]
   2f0a6:	2a01      	cmp	r2, #1
   2f0a8:	d00e      	beq.n	2f0c8 <__free_block+0x2c>

        ah = pah;
        pah = ah->a.prev;
    } else {
        /* Need to add this block to the free chain */
        ah->a.type = ARENA_TYPE_FREE;
   2f0aa:	2201      	movs	r2, #1
   2f0ac:	601a      	str	r2, [r3, #0]

        ah->next_free = __malloc_head.next_free;
   2f0ae:	4a13      	ldr	r2, [pc, #76]	; (2f0fc <__free_block+0x60>)
   2f0b0:	6910      	ldr	r0, [r2, #16]
   2f0b2:	6118      	str	r0, [r3, #16]
        ah->prev_free = &__malloc_head;
   2f0b4:	615a      	str	r2, [r3, #20]
        __malloc_head.next_free = ah;
   2f0b6:	6113      	str	r3, [r2, #16]
        ah->next_free->prev_free = ah;
   2f0b8:	691a      	ldr	r2, [r3, #16]
   2f0ba:	6153      	str	r3, [r2, #20]
   2f0bc:	4618      	mov	r0, r3
    }

    /* In either of the previous cases, we might be able to merge
       with the subsequent block... */
    if (nah->a.type == ARENA_TYPE_FREE &&
   2f0be:	680b      	ldr	r3, [r1, #0]
   2f0c0:	2b01      	cmp	r3, #1
   2f0c2:	d00b      	beq.n	2f0dc <__free_block+0x40>
        remove_from_chains(nah);
    }

    /* Return the block that contains the called block */
    return ah;
}
   2f0c4:	bc10      	pop	{r4}
   2f0c6:	4770      	bx	lr
        (char *)pah + pah->a.size == (char *)ah) {
   2f0c8:	6842      	ldr	r2, [r0, #4]
   2f0ca:	1884      	adds	r4, r0, r2
    if (pah->a.type == ARENA_TYPE_FREE &&
   2f0cc:	429c      	cmp	r4, r3
   2f0ce:	d1ec      	bne.n	2f0aa <__free_block+0xe>
        pah->a.size += ah->a.size;
   2f0d0:	685b      	ldr	r3, [r3, #4]
   2f0d2:	441a      	add	r2, r3
   2f0d4:	6042      	str	r2, [r0, #4]
        pah->a.next = nah;
   2f0d6:	6081      	str	r1, [r0, #8]
        nah->a.prev = pah;
   2f0d8:	60c8      	str	r0, [r1, #12]
        pah = ah->a.prev;
   2f0da:	e7f0      	b.n	2f0be <__free_block+0x22>
        (char *)ah + ah->a.size == (char *)nah) {
   2f0dc:	6843      	ldr	r3, [r0, #4]
   2f0de:	18c2      	adds	r2, r0, r3
    if (nah->a.type == ARENA_TYPE_FREE &&
   2f0e0:	428a      	cmp	r2, r1
   2f0e2:	d1ef      	bne.n	2f0c4 <__free_block+0x28>
        ah->a.size += nah->a.size;
   2f0e4:	684a      	ldr	r2, [r1, #4]
   2f0e6:	4413      	add	r3, r2
   2f0e8:	6043      	str	r3, [r0, #4]
    ap = ah->prev_free;
   2f0ea:	694a      	ldr	r2, [r1, #20]
    an = ah->next_free;
   2f0ec:	690b      	ldr	r3, [r1, #16]
    ap->next_free = an;
   2f0ee:	6113      	str	r3, [r2, #16]
    an->prev_free = ap;
   2f0f0:	615a      	str	r2, [r3, #20]
    ap = ah->a.prev;
   2f0f2:	68ca      	ldr	r2, [r1, #12]
    an = ah->a.next;
   2f0f4:	688b      	ldr	r3, [r1, #8]
    ap->a.next = an;
   2f0f6:	6093      	str	r3, [r2, #8]
    an->a.prev = ap;
   2f0f8:	60da      	str	r2, [r3, #12]
    return ah;
   2f0fa:	e7e3      	b.n	2f0c4 <__free_block+0x28>
   2f0fc:	200004d4 	.word	0x200004d4

0002f100 <add_malloc_block>:
void add_malloc_block(void *buf, size_t size)
{
    struct free_arena_header *fp = buf;
    struct free_arena_header *pah;

    if (size < sizeof(struct free_arena_header))
   2f100:	2917      	cmp	r1, #23
   2f102:	d91e      	bls.n	2f142 <add_malloc_block+0x42>
{
   2f104:	b510      	push	{r4, lr}
   2f106:	4604      	mov	r4, r0
        return; // Too small.

    /* Insert the block into the management chains.  We need to set
       up the size and the main block list pointer, the rest of
       the work is logically identical to free(). */
    fp->a.type = ARENA_TYPE_FREE;
   2f108:	2301      	movs	r3, #1
   2f10a:	6003      	str	r3, [r0, #0]
    fp->a.size = size;
   2f10c:	6041      	str	r1, [r0, #4]

    if (!malloc_lock())
   2f10e:	4b0d      	ldr	r3, [pc, #52]	; (2f144 <add_malloc_block+0x44>)
   2f110:	681b      	ldr	r3, [r3, #0]
   2f112:	4798      	blx	r3
   2f114:	b1a0      	cbz	r0, 2f140 <add_malloc_block+0x40>

    /* We need to insert this into the main block list in the proper
       place -- this list is required to be sorted.  Since we most likely
       get memory assignments in ascending order, search backwards for
       the proper place. */
    for (pah = __malloc_head.a.prev; pah->a.type != ARENA_TYPE_HEAD;
   2f116:	4b0c      	ldr	r3, [pc, #48]	; (2f148 <add_malloc_block+0x48>)
   2f118:	68db      	ldr	r3, [r3, #12]
   2f11a:	681a      	ldr	r2, [r3, #0]
   2f11c:	2a02      	cmp	r2, #2
   2f11e:	d003      	beq.n	2f128 <add_malloc_block+0x28>
         pah = pah->a.prev) {
        if (pah < fp)
   2f120:	42a3      	cmp	r3, r4
   2f122:	d301      	bcc.n	2f128 <add_malloc_block+0x28>
         pah = pah->a.prev) {
   2f124:	68db      	ldr	r3, [r3, #12]
   2f126:	e7f8      	b.n	2f11a <add_malloc_block+0x1a>
            break;
    }

    /* Now pah points to the node that should be the predecessor of
       the new node */
    fp->a.next = pah->a.next;
   2f128:	689a      	ldr	r2, [r3, #8]
   2f12a:	60a2      	str	r2, [r4, #8]
    fp->a.prev = pah;
   2f12c:	60e3      	str	r3, [r4, #12]
    pah->a.next = fp;
   2f12e:	609c      	str	r4, [r3, #8]
    fp->a.next->a.prev = fp;
   2f130:	68a3      	ldr	r3, [r4, #8]
   2f132:	60dc      	str	r4, [r3, #12]

    /* Insert into the free chain and coalesce with adjacent blocks */
    fp = __free_block(fp);
   2f134:	4620      	mov	r0, r4
   2f136:	f7ff ffb1 	bl	2f09c <__free_block>

    malloc_unlock();
   2f13a:	4b04      	ldr	r3, [pc, #16]	; (2f14c <add_malloc_block+0x4c>)
   2f13c:	681b      	ldr	r3, [r3, #0]
   2f13e:	4798      	blx	r3
}
   2f140:	bd10      	pop	{r4, pc}
   2f142:	4770      	bx	lr
   2f144:	200004ec 	.word	0x200004ec
   2f148:	200004d4 	.word	0x200004d4
   2f14c:	200004f0 	.word	0x200004f0

0002f150 <malloc>:
{
   2f150:	b538      	push	{r3, r4, r5, lr}
    if (size == 0 || size > (SIZE_MAX - sizeof(struct arena_header))) {
   2f152:	1e43      	subs	r3, r0, #1
   2f154:	f113 0f12 	cmn.w	r3, #18
   2f158:	d826      	bhi.n	2f1a8 <malloc+0x58>
    size = (size + 2 * sizeof(struct arena_header) - 1) & ARENA_SIZE_MASK;
   2f15a:	f100 041f 	add.w	r4, r0, #31
   2f15e:	f024 040f 	bic.w	r4, r4, #15
    if (!malloc_lock())
   2f162:	4b13      	ldr	r3, [pc, #76]	; (2f1b0 <malloc+0x60>)
   2f164:	681b      	ldr	r3, [r3, #0]
   2f166:	4798      	blx	r3
   2f168:	b300      	cbz	r0, 2f1ac <malloc+0x5c>
    void *result = NULL;
   2f16a:	2500      	movs	r5, #0
   2f16c:	e00d      	b.n	2f18a <malloc+0x3a>
            result = __malloc_from_block(fp, size);
   2f16e:	4621      	mov	r1, r4
   2f170:	f7ff ff6f 	bl	2f052 <__malloc_from_block>
   2f174:	4605      	mov	r5, r0
    if (result == NULL) {
   2f176:	b995      	cbnz	r5, 2f19e <malloc+0x4e>
        more_mem = _sbrk(size);
   2f178:	4620      	mov	r0, r4
   2f17a:	f7dd f811 	bl	c1a0 <_sbrk>
        if (more_mem != (void *)-1) {
   2f17e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   2f182:	d00c      	beq.n	2f19e <malloc+0x4e>
            add_malloc_block(more_mem, size);
   2f184:	4621      	mov	r1, r4
   2f186:	f7ff ffbb 	bl	2f100 <add_malloc_block>
    for (fp = __malloc_head.next_free; fp->a.type != ARENA_TYPE_HEAD;
   2f18a:	4b0a      	ldr	r3, [pc, #40]	; (2f1b4 <malloc+0x64>)
   2f18c:	6918      	ldr	r0, [r3, #16]
   2f18e:	6803      	ldr	r3, [r0, #0]
   2f190:	2b02      	cmp	r3, #2
   2f192:	d0f0      	beq.n	2f176 <malloc+0x26>
        if (fp->a.size >= size) {
   2f194:	6843      	ldr	r3, [r0, #4]
   2f196:	42a3      	cmp	r3, r4
   2f198:	d2e9      	bcs.n	2f16e <malloc+0x1e>
         fp = fp->next_free) {
   2f19a:	6900      	ldr	r0, [r0, #16]
   2f19c:	e7f7      	b.n	2f18e <malloc+0x3e>
    malloc_unlock();
   2f19e:	4b06      	ldr	r3, [pc, #24]	; (2f1b8 <malloc+0x68>)
   2f1a0:	681b      	ldr	r3, [r3, #0]
   2f1a2:	4798      	blx	r3
}
   2f1a4:	4628      	mov	r0, r5
   2f1a6:	bd38      	pop	{r3, r4, r5, pc}
        return NULL;
   2f1a8:	2500      	movs	r5, #0
   2f1aa:	e7fb      	b.n	2f1a4 <malloc+0x54>
        return NULL;
   2f1ac:	2500      	movs	r5, #0
   2f1ae:	e7f9      	b.n	2f1a4 <malloc+0x54>
   2f1b0:	200004ec 	.word	0x200004ec
   2f1b4:	200004d4 	.word	0x200004d4
   2f1b8:	200004f0 	.word	0x200004f0

0002f1bc <free>:

void free(void *ptr)
{
    struct free_arena_header *ah;

    if (!ptr)
   2f1bc:	b170      	cbz	r0, 2f1dc <free+0x20>
{
   2f1be:	b510      	push	{r4, lr}
        return;

    ah = (struct free_arena_header *)
   2f1c0:	f1a0 0410 	sub.w	r4, r0, #16

#ifdef DEBUG_MALLOC
    assert(ah->a.type == ARENA_TYPE_USED);
#endif

    if (!malloc_lock())
   2f1c4:	4b06      	ldr	r3, [pc, #24]	; (2f1e0 <free+0x24>)
   2f1c6:	681b      	ldr	r3, [r3, #0]
   2f1c8:	4798      	blx	r3
   2f1ca:	b900      	cbnz	r0, 2f1ce <free+0x12>
        return;

    /* Merge into adjacent free blocks */
    ah = __free_block(ah);
    malloc_unlock();
}
   2f1cc:	bd10      	pop	{r4, pc}
    ah = __free_block(ah);
   2f1ce:	4620      	mov	r0, r4
   2f1d0:	f7ff ff64 	bl	2f09c <__free_block>
    malloc_unlock();
   2f1d4:	4b03      	ldr	r3, [pc, #12]	; (2f1e4 <free+0x28>)
   2f1d6:	681b      	ldr	r3, [r3, #0]
   2f1d8:	4798      	blx	r3
   2f1da:	e7f7      	b.n	2f1cc <free+0x10>
   2f1dc:	4770      	bx	lr
   2f1de:	bf00      	nop
   2f1e0:	200004ec 	.word	0x200004ec
   2f1e4:	200004f0 	.word	0x200004f0

0002f1e8 <stdin_read>:

static size_t
stdin_read(FILE *fp, char *bp, size_t n)
{
    return 0;
}
   2f1e8:	2000      	movs	r0, #0
   2f1ea:	4770      	bx	lr

0002f1ec <stdout_write>:

static size_t
stdout_write(FILE *fp, const char *bp, size_t n)
{
   2f1ec:	b510      	push	{r4, lr}
   2f1ee:	4608      	mov	r0, r1
   2f1f0:	4614      	mov	r4, r2
    console_write(bp, n);
   2f1f2:	4611      	mov	r1, r2
   2f1f4:	f7e1 f870 	bl	102d8 <console_write>
    return n;
}
   2f1f8:	4620      	mov	r0, r4
   2f1fa:	bd10      	pop	{r4, pc}

0002f1fc <realloc>:
#include "malloc.h"

/* FIXME: This is cheesy, it should be fixed later */

void *realloc(void *ptr, size_t size)
{
   2f1fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct free_arena_header *ah;
	void *newptr;
	size_t oldsize;

	if (!ptr)
   2f1fe:	b300      	cbz	r0, 2f242 <realloc+0x46>
   2f200:	4606      	mov	r6, r0
		return malloc(size);

	if (size == 0 || size > (SIZE_MAX - sizeof(struct arena_header))) {
   2f202:	1e4b      	subs	r3, r1, #1
   2f204:	f113 0f12 	cmn.w	r3, #18
   2f208:	d820      	bhi.n	2f24c <realloc+0x50>
		free(ptr);
		return NULL;
	}

	/* Add the obligatory arena header, and round up */
	size = (size + 2 * sizeof(struct arena_header) - 1) & ARENA_SIZE_MASK;
   2f20a:	311f      	adds	r1, #31
   2f20c:	f021 040f 	bic.w	r4, r1, #15

	ah = (struct free_arena_header *)
	    ((struct arena_header *)ptr - 1);

	if (ah->a.size >= size && size >= (ah->a.size >> 2)) {
   2f210:	f850 5c0c 	ldr.w	r5, [r0, #-12]
   2f214:	42a5      	cmp	r5, r4
   2f216:	d302      	bcc.n	2f21e <realloc+0x22>
   2f218:	ebb4 0f95 	cmp.w	r4, r5, lsr #2
   2f21c:	d21a      	bcs.n	2f254 <realloc+0x58>
	} else {
		/* Make me a new block.  This is kind of bogus; we should
		   be checking the following block to see if we can do an
		   in-place adjustment... fix that later. */

		oldsize = ah->a.size - sizeof(struct arena_header);
   2f21e:	3d10      	subs	r5, #16

		newptr = malloc(size);
   2f220:	4620      	mov	r0, r4
   2f222:	f7ff ff95 	bl	2f150 <malloc>
                if (newptr) {
   2f226:	4607      	mov	r7, r0
   2f228:	b1b0      	cbz	r0, 2f258 <realloc+0x5c>
                    memcpy(newptr, ptr, (size < oldsize) ? size : oldsize);
   2f22a:	4622      	mov	r2, r4
   2f22c:	42ac      	cmp	r4, r5
   2f22e:	bf28      	it	cs
   2f230:	462a      	movcs	r2, r5
   2f232:	4631      	mov	r1, r6
   2f234:	f7df fbb4 	bl	e9a0 <memcpy>
                    free(ptr);
   2f238:	4630      	mov	r0, r6
   2f23a:	f7ff ffbf 	bl	2f1bc <free>
                } else {
                    newptr = ptr;
                }
		return newptr;
	}
}
   2f23e:	4638      	mov	r0, r7
   2f240:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return malloc(size);
   2f242:	4608      	mov	r0, r1
   2f244:	f7ff ff84 	bl	2f150 <malloc>
   2f248:	4607      	mov	r7, r0
   2f24a:	e7f8      	b.n	2f23e <realloc+0x42>
		free(ptr);
   2f24c:	f7ff ffb6 	bl	2f1bc <free>
		return NULL;
   2f250:	2700      	movs	r7, #0
   2f252:	e7f4      	b.n	2f23e <realloc+0x42>
		return ptr;
   2f254:	4607      	mov	r7, r0
   2f256:	e7f2      	b.n	2f23e <realloc+0x42>
                    newptr = ptr;
   2f258:	4637      	mov	r7, r6
   2f25a:	e7f0      	b.n	2f23e <realloc+0x42>

0002f25c <sprintf>:
#include <stdio.h>
#include <unistd.h>
#include <stdint.h>

int sprintf(char *buffer, const char *format, ...)
{
   2f25c:	b40e      	push	{r1, r2, r3}
   2f25e:	b500      	push	{lr}
   2f260:	b082      	sub	sp, #8
   2f262:	ab03      	add	r3, sp, #12
   2f264:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list ap;
	int rv;

	va_start(ap, format);
   2f268:	9301      	str	r3, [sp, #4]
	rv = vsnprintf(buffer, SIZE_MAX/2, format, ap);
   2f26a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   2f26e:	f000 fb1f 	bl	2f8b0 <vsnprintf>
	va_end(ap);

	return rv;
}
   2f272:	b002      	add	sp, #8
   2f274:	f85d eb04 	ldr.w	lr, [sp], #4
   2f278:	b003      	add	sp, #12
   2f27a:	4770      	bx	lr

0002f27c <strchr>:

#include <string.h>

char *strchr(const char *s, int c)
{
	while (*s != (char)c) {
   2f27c:	7803      	ldrb	r3, [r0, #0]
   2f27e:	b2ca      	uxtb	r2, r1
   2f280:	4293      	cmp	r3, r2
   2f282:	d002      	beq.n	2f28a <strchr+0xe>
		if (!*s)
   2f284:	b113      	cbz	r3, 2f28c <strchr+0x10>
			return NULL;
		s++;
   2f286:	3001      	adds	r0, #1
   2f288:	e7f8      	b.n	2f27c <strchr>
   2f28a:	4770      	bx	lr
			return NULL;
   2f28c:	2000      	movs	r0, #0
	}

	return (char *)s;
}
   2f28e:	4770      	bx	lr

0002f290 <strcpy>:

#include <string.h>

char *strcpy(char *dst, const char *src)
{
	char *q = dst;
   2f290:	4603      	mov	r3, r0
	const char *p = src;
	char ch;

	do {
		*q++ = ch = *p++;
   2f292:	780a      	ldrb	r2, [r1, #0]
   2f294:	701a      	strb	r2, [r3, #0]
   2f296:	3301      	adds	r3, #1
   2f298:	3101      	adds	r1, #1
	} while (ch);
   2f29a:	2a00      	cmp	r2, #0
   2f29c:	d1f9      	bne.n	2f292 <strcpy+0x2>

	return dst;
}
   2f29e:	4770      	bx	lr

0002f2a0 <strncpy>:
 */

#include <string.h>

char *strncpy(char *dst, const char *src, size_t n)
{
   2f2a0:	b570      	push	{r4, r5, r6, lr}
   2f2a2:	4606      	mov	r6, r0
	char *q = dst;
	const char *p = src;
	char ch;

	while (n) {
   2f2a4:	b14a      	cbz	r2, 2f2ba <strncpy+0x1a>
		n--;
   2f2a6:	3a01      	subs	r2, #1
		*q++ = ch = *p++;
   2f2a8:	1c4d      	adds	r5, r1, #1
   2f2aa:	780b      	ldrb	r3, [r1, #0]
   2f2ac:	1c44      	adds	r4, r0, #1
   2f2ae:	7003      	strb	r3, [r0, #0]
		if (!ch)
   2f2b0:	b113      	cbz	r3, 2f2b8 <strncpy+0x18>
		*q++ = ch = *p++;
   2f2b2:	4629      	mov	r1, r5
   2f2b4:	4620      	mov	r0, r4
   2f2b6:	e7f5      	b.n	2f2a4 <strncpy+0x4>
   2f2b8:	4620      	mov	r0, r4
			break;
	}

	/* The specs say strncpy() fills the entire buffer with NUL.  Sigh. */
	memset(q, 0, n);
   2f2ba:	2100      	movs	r1, #0
   2f2bc:	f7df fb98 	bl	e9f0 <memset>

	return dst;
}
   2f2c0:	4630      	mov	r0, r6
   2f2c2:	bd70      	pop	{r4, r5, r6, pc}

0002f2c4 <strsep>:
 */

#include <string.h>

char *strsep(char **stringp, const char *delim)
{
   2f2c4:	b538      	push	{r3, r4, r5, lr}
	char *s = *stringp;
   2f2c6:	6805      	ldr	r5, [r0, #0]
	char *e;

	if (!s)
   2f2c8:	b145      	cbz	r5, 2f2dc <strsep+0x18>
   2f2ca:	4604      	mov	r4, r0
		return NULL;

	e = strpbrk(s, delim);
   2f2cc:	4628      	mov	r0, r5
   2f2ce:	f000 fbd6 	bl	2fa7e <strpbrk>
	if (e)
   2f2d2:	b128      	cbz	r0, 2f2e0 <strsep+0x1c>
		*e++ = '\0';
   2f2d4:	1c42      	adds	r2, r0, #1
   2f2d6:	2100      	movs	r1, #0
   2f2d8:	7001      	strb	r1, [r0, #0]

	*stringp = e;
   2f2da:	6022      	str	r2, [r4, #0]
	return s;
}
   2f2dc:	4628      	mov	r0, r5
   2f2de:	bd38      	pop	{r3, r4, r5, pc}
	e = strpbrk(s, delim);
   2f2e0:	4602      	mov	r2, r0
   2f2e2:	e7fa      	b.n	2f2da <strsep+0x16>

0002f2e4 <strtok_r>:
#include <string.h>

char *strtok_r(char *s, const char *delim, char **holder)
{
   2f2e4:	b538      	push	{r3, r4, r5, lr}
   2f2e6:	460d      	mov	r5, r1
   2f2e8:	4614      	mov	r4, r2
	if (s)
   2f2ea:	b100      	cbz	r0, 2f2ee <strtok_r+0xa>
		*holder = s;
   2f2ec:	6020      	str	r0, [r4, #0]

	do {
		s = strsep(holder, delim);
   2f2ee:	4629      	mov	r1, r5
   2f2f0:	4620      	mov	r0, r4
   2f2f2:	f7ff ffe7 	bl	2f2c4 <strsep>
	} while (s && !*s);
   2f2f6:	4603      	mov	r3, r0
   2f2f8:	b110      	cbz	r0, 2f300 <strtok_r+0x1c>
   2f2fa:	7802      	ldrb	r2, [r0, #0]
   2f2fc:	2a00      	cmp	r2, #0
   2f2fe:	d0f6      	beq.n	2f2ee <strtok_r+0xa>

	return s;
}
   2f300:	4618      	mov	r0, r3
   2f302:	bd38      	pop	{r3, r4, r5, pc}

0002f304 <strtoll>:
#include <stddef.h>
#include <stdlib.h>
#include <inttypes.h>

TYPE NAME(const char *nptr, char **endptr, int base)
{
   2f304:	b508      	push	{r3, lr}
	return (TYPE) strntoumax(nptr, endptr, base, ~(size_t) 0);
   2f306:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2f30a:	f000 fb2b 	bl	2f964 <strntoumax>
}
   2f30e:	bd08      	pop	{r3, pc}

0002f310 <strtoull>:
{
   2f310:	b508      	push	{r3, lr}
	return (TYPE) strntoumax(nptr, endptr, base, ~(size_t) 0);
   2f312:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2f316:	f000 fb25 	bl	2f964 <strntoumax>
}
   2f31a:	bd08      	pop	{r3, pc}

0002f31c <ui2a>:
    char base;  /**<  number base (e.g.: 8, 10, 16) */
    char *bf;           /**<  Buffer to output */
};

static void ui2a(unsigned long long int num, struct param *p)
{
   2f31c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2f320:	b082      	sub	sp, #8
   2f322:	e9cd 0100 	strd	r0, r1, [sp]
   2f326:	4691      	mov	r9, r2
    int n = 0;
    unsigned long long int d = 1;
    char *bf = p->bf;
   2f328:	f8d2 8004 	ldr.w	r8, [r2, #4]
    unsigned long long int d = 1;
   2f32c:	2401      	movs	r4, #1
   2f32e:	2500      	movs	r5, #0
    while (num / d >= p->base)
   2f330:	e004      	b.n	2f33c <ui2a+0x20>
        d *= p->base;
   2f332:	fb06 f305 	mul.w	r3, r6, r5
   2f336:	fba4 4506 	umull	r4, r5, r4, r6
   2f33a:	441d      	add	r5, r3
    while (num / d >= p->base)
   2f33c:	4622      	mov	r2, r4
   2f33e:	462b      	mov	r3, r5
   2f340:	e9dd 0100 	ldrd	r0, r1, [sp]
   2f344:	f001 fe66 	bl	31014 <__aeabi_uldivmod>
   2f348:	f899 6003 	ldrb.w	r6, [r9, #3]
   2f34c:	2700      	movs	r7, #0
   2f34e:	42b9      	cmp	r1, r7
   2f350:	bf08      	it	eq
   2f352:	42b0      	cmpeq	r0, r6
   2f354:	d2ed      	bcs.n	2f332 <ui2a+0x16>
    int n = 0;
   2f356:	f04f 0a00 	mov.w	sl, #0
   2f35a:	e007      	b.n	2f36c <ui2a+0x50>
    while (d != 0) {
        unsigned long long  dgt = num / d;
        num %= d;
        d /= p->base;
        if (n || dgt > 0 || d == 0) {
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
   2f35c:	2330      	movs	r3, #48	; 0x30
   2f35e:	441e      	add	r6, r3
   2f360:	f888 6000 	strb.w	r6, [r8]
            ++n;
   2f364:	f10a 0a01 	add.w	sl, sl, #1
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
   2f368:	f108 0801 	add.w	r8, r8, #1
    while (d != 0) {
   2f36c:	ea54 0305 	orrs.w	r3, r4, r5
   2f370:	d02e      	beq.n	2f3d0 <ui2a+0xb4>
        unsigned long long  dgt = num / d;
   2f372:	4622      	mov	r2, r4
   2f374:	462b      	mov	r3, r5
   2f376:	e9dd 0100 	ldrd	r0, r1, [sp]
   2f37a:	f001 fe4b 	bl	31014 <__aeabi_uldivmod>
   2f37e:	4606      	mov	r6, r0
   2f380:	460f      	mov	r7, r1
        num %= d;
   2f382:	4622      	mov	r2, r4
   2f384:	462b      	mov	r3, r5
   2f386:	e9dd 0100 	ldrd	r0, r1, [sp]
   2f38a:	f001 fe43 	bl	31014 <__aeabi_uldivmod>
   2f38e:	e9cd 2300 	strd	r2, r3, [sp]
        d /= p->base;
   2f392:	f899 2003 	ldrb.w	r2, [r9, #3]
   2f396:	2300      	movs	r3, #0
   2f398:	4620      	mov	r0, r4
   2f39a:	4629      	mov	r1, r5
   2f39c:	f001 fe3a 	bl	31014 <__aeabi_uldivmod>
   2f3a0:	4604      	mov	r4, r0
   2f3a2:	460d      	mov	r5, r1
        if (n || dgt > 0 || d == 0) {
   2f3a4:	f1ba 0f00 	cmp.w	sl, #0
   2f3a8:	d105      	bne.n	2f3b6 <ui2a+0x9a>
   2f3aa:	ea56 0307 	orrs.w	r3, r6, r7
   2f3ae:	d102      	bne.n	2f3b6 <ui2a+0x9a>
   2f3b0:	ea54 0305 	orrs.w	r3, r4, r5
   2f3b4:	d1da      	bne.n	2f36c <ui2a+0x50>
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
   2f3b6:	2f00      	cmp	r7, #0
   2f3b8:	bf08      	it	eq
   2f3ba:	2e0a      	cmpeq	r6, #10
   2f3bc:	d3ce      	bcc.n	2f35c <ui2a+0x40>
   2f3be:	f899 3002 	ldrb.w	r3, [r9, #2]
   2f3c2:	f013 0f04 	tst.w	r3, #4
   2f3c6:	d001      	beq.n	2f3cc <ui2a+0xb0>
   2f3c8:	2337      	movs	r3, #55	; 0x37
   2f3ca:	e7c8      	b.n	2f35e <ui2a+0x42>
   2f3cc:	2357      	movs	r3, #87	; 0x57
   2f3ce:	e7c6      	b.n	2f35e <ui2a+0x42>
        }
    }
    *bf = 0;
   2f3d0:	2300      	movs	r3, #0
   2f3d2:	f888 3000 	strb.w	r3, [r8]
}
   2f3d6:	b002      	add	sp, #8
   2f3d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002f3dc <i2a>:

static void i2a(long long int num, struct param *p)
{
   2f3dc:	b508      	push	{r3, lr}
    if (num < 0) {
   2f3de:	2800      	cmp	r0, #0
   2f3e0:	f171 0300 	sbcs.w	r3, r1, #0
   2f3e4:	db02      	blt.n	2f3ec <i2a+0x10>
        num = -num;
        p->sign = 1;
    }
    ui2a(num, p);
   2f3e6:	f7ff ff99 	bl	2f31c <ui2a>
}
   2f3ea:	bd08      	pop	{r3, pc}
        num = -num;
   2f3ec:	4240      	negs	r0, r0
   2f3ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
        p->sign = 1;
   2f3f2:	7893      	ldrb	r3, [r2, #2]
   2f3f4:	f043 0301 	orr.w	r3, r3, #1
   2f3f8:	7093      	strb	r3, [r2, #2]
   2f3fa:	e7f4      	b.n	2f3e6 <i2a+0xa>

0002f3fc <a2d>:

static int a2d(char ch)
{
    if (ch >= '0' && ch <= '9')
   2f3fc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   2f400:	b2db      	uxtb	r3, r3
   2f402:	2b09      	cmp	r3, #9
   2f404:	d90b      	bls.n	2f41e <a2d+0x22>
        return ch - '0';
    else if (ch >= 'a' && ch <= 'f')
   2f406:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   2f40a:	b2db      	uxtb	r3, r3
   2f40c:	2b05      	cmp	r3, #5
   2f40e:	d908      	bls.n	2f422 <a2d+0x26>
        return ch - 'a' + 10;
    else if (ch >= 'A' && ch <= 'F')
   2f410:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   2f414:	b2db      	uxtb	r3, r3
   2f416:	2b05      	cmp	r3, #5
   2f418:	d805      	bhi.n	2f426 <a2d+0x2a>
        return ch - 'A' + 10;
   2f41a:	3837      	subs	r0, #55	; 0x37
   2f41c:	4770      	bx	lr
        return ch - '0';
   2f41e:	3830      	subs	r0, #48	; 0x30
   2f420:	4770      	bx	lr
        return ch - 'a' + 10;
   2f422:	3857      	subs	r0, #87	; 0x57
   2f424:	4770      	bx	lr
    else
        return -1;
   2f426:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   2f42a:	4770      	bx	lr

0002f42c <a2i>:

static char a2i(char ch, const char **src, int base, unsigned char *nump)
{
   2f42c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2f430:	4605      	mov	r5, r0
   2f432:	4688      	mov	r8, r1
   2f434:	4617      	mov	r7, r2
   2f436:	4699      	mov	r9, r3
    const char *p = *src;
   2f438:	680c      	ldr	r4, [r1, #0]
    int num = 0;
   2f43a:	2600      	movs	r6, #0
    int digit;
    while ((digit = a2d(ch)) >= 0) {
   2f43c:	4628      	mov	r0, r5
   2f43e:	f7ff ffdd 	bl	2f3fc <a2d>
   2f442:	2800      	cmp	r0, #0
   2f444:	db06      	blt.n	2f454 <a2i+0x28>
        if (digit > base)
   2f446:	42b8      	cmp	r0, r7
   2f448:	dc04      	bgt.n	2f454 <a2i+0x28>
            break;
        num = num * base + digit;
   2f44a:	fb07 0606 	mla	r6, r7, r6, r0
        ch = *p++;
   2f44e:	7825      	ldrb	r5, [r4, #0]
   2f450:	3401      	adds	r4, #1
   2f452:	e7f3      	b.n	2f43c <a2i+0x10>
    }
    *src = p;
   2f454:	f8c8 4000 	str.w	r4, [r8]
    *nump = num;
   2f458:	f889 6000 	strb.w	r6, [r9]
    return ch;
}
   2f45c:	4628      	mov	r0, r5
   2f45e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002f462 <putf>:

static int putf(FILE *putp, char c)
{
   2f462:	b500      	push	{lr}
   2f464:	b083      	sub	sp, #12
	return fwrite(s, 1, strlen(s), stdout) + fwrite("\n", 1, 1, stdout);
}

__extern_inline int fputc(int c, FILE *f)
{
	unsigned char ch = c;
   2f466:	f88d 1007 	strb.w	r1, [sp, #7]
    if (stream->vmt->write == NULL) return 0;
   2f46a:	6803      	ldr	r3, [r0, #0]
   2f46c:	681b      	ldr	r3, [r3, #0]
   2f46e:	b14b      	cbz	r3, 2f484 <putf+0x22>
    return stream->vmt->write(stream, (char*)buf, size*nmemb) / size;
   2f470:	2201      	movs	r2, #1
   2f472:	f10d 0107 	add.w	r1, sp, #7
   2f476:	4798      	blx	r3
	return fwrite(&ch, 1, 1, f) == 1 ? ch : EOF;
   2f478:	2801      	cmp	r0, #1
   2f47a:	d005      	beq.n	2f488 <putf+0x26>
    if (fputc(c, putp) == EOF)
        return 0;
   2f47c:	2000      	movs	r0, #0
    else
        return 1;
}
   2f47e:	b003      	add	sp, #12
   2f480:	f85d fb04 	ldr.w	pc, [sp], #4
        return 0;
   2f484:	2000      	movs	r0, #0
   2f486:	e7fa      	b.n	2f47e <putf+0x1c>
        return 1;
   2f488:	2001      	movs	r0, #1
   2f48a:	e7f8      	b.n	2f47e <putf+0x1c>

0002f48c <putchw>:

static unsigned putchw(FILE *putp, struct param *p)
{
   2f48c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2f490:	4606      	mov	r6, r0
   2f492:	460f      	mov	r7, r1
    unsigned written = 0;
    char ch;
    int n = p->width;
   2f494:	780c      	ldrb	r4, [r1, #0]
    char *bf = p->bf;
   2f496:	684b      	ldr	r3, [r1, #4]

    /* Number of filling characters */
    while (*bf++ && n > 0)
   2f498:	e001      	b.n	2f49e <putchw+0x12>
        n--;
   2f49a:	3c01      	subs	r4, #1
    while (*bf++ && n > 0)
   2f49c:	4613      	mov	r3, r2
   2f49e:	1c5a      	adds	r2, r3, #1
   2f4a0:	781b      	ldrb	r3, [r3, #0]
   2f4a2:	b10b      	cbz	r3, 2f4a8 <putchw+0x1c>
   2f4a4:	2c00      	cmp	r4, #0
   2f4a6:	dcf8      	bgt.n	2f49a <putchw+0xe>
    if (p->sign)
   2f4a8:	78bb      	ldrb	r3, [r7, #2]
   2f4aa:	f013 0f01 	tst.w	r3, #1
   2f4ae:	d000      	beq.n	2f4b2 <putchw+0x26>
        n--;
   2f4b0:	3c01      	subs	r4, #1
    if (p->alt && p->base == 16)
   2f4b2:	887b      	ldrh	r3, [r7, #2]
   2f4b4:	f023 03fd 	bic.w	r3, r3, #253	; 0xfd
   2f4b8:	b29b      	uxth	r3, r3
   2f4ba:	f241 0202 	movw	r2, #4098	; 0x1002
   2f4be:	4293      	cmp	r3, r2
   2f4c0:	d01c      	beq.n	2f4fc <putchw+0x70>
        n -= 2;
    else if (p->alt && p->base == 8)
   2f4c2:	f640 0202 	movw	r2, #2050	; 0x802
   2f4c6:	4293      	cmp	r3, r2
   2f4c8:	d01a      	beq.n	2f500 <putchw+0x74>
        n--;

    /* Unless left-aligned, fill with space, before alternate or sign */
    if (!p->lz && !p->left) {
   2f4ca:	683b      	ldr	r3, [r7, #0]
   2f4cc:	4d35      	ldr	r5, [pc, #212]	; (2f5a4 <putchw+0x118>)
   2f4ce:	401d      	ands	r5, r3
   2f4d0:	b1f5      	cbz	r5, 2f510 <putchw+0x84>
    unsigned written = 0;
   2f4d2:	2500      	movs	r5, #0
        while (n-- > 0)
            written += putf(putp, ' ');
    }

    /* print sign */
    if (p->sign)
   2f4d4:	78bb      	ldrb	r3, [r7, #2]
   2f4d6:	f013 0f01 	tst.w	r3, #1
   2f4da:	d11f      	bne.n	2f51c <putchw+0x90>
        written += putf(putp, '-');

    /* Alternate */
    if (p->alt && p->base == 16) {
   2f4dc:	887b      	ldrh	r3, [r7, #2]
   2f4de:	f023 03fd 	bic.w	r3, r3, #253	; 0xfd
   2f4e2:	b29b      	uxth	r3, r3
   2f4e4:	f241 0202 	movw	r2, #4098	; 0x1002
   2f4e8:	4293      	cmp	r3, r2
   2f4ea:	d01d      	beq.n	2f528 <putchw+0x9c>
        written += putf(putp, '0');
        written += putf(putp, (p->uc ? 'X' : 'x'));
    } else if (p->alt && p->base == 8) {
   2f4ec:	f640 0202 	movw	r2, #2050	; 0x802
   2f4f0:	4293      	cmp	r3, r2
   2f4f2:	d02a      	beq.n	2f54a <putchw+0xbe>
        written += putf(putp, '0');
    }

    /* Fill with zeros, after alternate or sign */
    if (p->lz) {
   2f4f4:	787b      	ldrb	r3, [r7, #1]
   2f4f6:	bba3      	cbnz	r3, 2f562 <putchw+0xd6>
        while (n-- > 0)
            written += putf(putp, '0');
    }

    /* Put actual buffer */
    bf = p->bf;
   2f4f8:	687b      	ldr	r3, [r7, #4]
    while ((ch = *bf++))
   2f4fa:	e03d      	b.n	2f578 <putchw+0xec>
        n -= 2;
   2f4fc:	3c02      	subs	r4, #2
   2f4fe:	e7e4      	b.n	2f4ca <putchw+0x3e>
        n--;
   2f500:	3c01      	subs	r4, #1
   2f502:	e7e2      	b.n	2f4ca <putchw+0x3e>
            written += putf(putp, ' ');
   2f504:	2120      	movs	r1, #32
   2f506:	4630      	mov	r0, r6
   2f508:	f7ff ffab 	bl	2f462 <putf>
   2f50c:	4405      	add	r5, r0
        while (n-- > 0)
   2f50e:	4644      	mov	r4, r8
   2f510:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
   2f514:	2c00      	cmp	r4, #0
   2f516:	dcf5      	bgt.n	2f504 <putchw+0x78>
   2f518:	4644      	mov	r4, r8
   2f51a:	e7db      	b.n	2f4d4 <putchw+0x48>
        written += putf(putp, '-');
   2f51c:	212d      	movs	r1, #45	; 0x2d
   2f51e:	4630      	mov	r0, r6
   2f520:	f7ff ff9f 	bl	2f462 <putf>
   2f524:	4405      	add	r5, r0
   2f526:	e7d9      	b.n	2f4dc <putchw+0x50>
        written += putf(putp, '0');
   2f528:	2130      	movs	r1, #48	; 0x30
   2f52a:	4630      	mov	r0, r6
   2f52c:	f7ff ff99 	bl	2f462 <putf>
   2f530:	4405      	add	r5, r0
        written += putf(putp, (p->uc ? 'X' : 'x'));
   2f532:	78bb      	ldrb	r3, [r7, #2]
   2f534:	f013 0f04 	tst.w	r3, #4
   2f538:	d005      	beq.n	2f546 <putchw+0xba>
   2f53a:	2158      	movs	r1, #88	; 0x58
   2f53c:	4630      	mov	r0, r6
   2f53e:	f7ff ff90 	bl	2f462 <putf>
   2f542:	4405      	add	r5, r0
   2f544:	e7d6      	b.n	2f4f4 <putchw+0x68>
   2f546:	2178      	movs	r1, #120	; 0x78
   2f548:	e7f8      	b.n	2f53c <putchw+0xb0>
        written += putf(putp, '0');
   2f54a:	2130      	movs	r1, #48	; 0x30
   2f54c:	4630      	mov	r0, r6
   2f54e:	f7ff ff88 	bl	2f462 <putf>
   2f552:	4405      	add	r5, r0
   2f554:	e7ce      	b.n	2f4f4 <putchw+0x68>
            written += putf(putp, '0');
   2f556:	2130      	movs	r1, #48	; 0x30
   2f558:	4630      	mov	r0, r6
   2f55a:	f7ff ff82 	bl	2f462 <putf>
   2f55e:	4405      	add	r5, r0
        while (n-- > 0)
   2f560:	4644      	mov	r4, r8
   2f562:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
   2f566:	2c00      	cmp	r4, #0
   2f568:	dcf5      	bgt.n	2f556 <putchw+0xca>
   2f56a:	4644      	mov	r4, r8
   2f56c:	e7c4      	b.n	2f4f8 <putchw+0x6c>
        written += putf(putp, ch);
   2f56e:	4630      	mov	r0, r6
   2f570:	f7ff ff77 	bl	2f462 <putf>
   2f574:	4405      	add	r5, r0
    while ((ch = *bf++))
   2f576:	4643      	mov	r3, r8
   2f578:	f103 0801 	add.w	r8, r3, #1
   2f57c:	7819      	ldrb	r1, [r3, #0]
   2f57e:	2900      	cmp	r1, #0
   2f580:	d1f5      	bne.n	2f56e <putchw+0xe2>

    /* If left-aligned, pad the end with spaces. */
    if (p->left) {
   2f582:	78bb      	ldrb	r3, [r7, #2]
   2f584:	f013 0f08 	tst.w	r3, #8
   2f588:	d106      	bne.n	2f598 <putchw+0x10c>
   2f58a:	e008      	b.n	2f59e <putchw+0x112>
        while (n-- > 0)
            written += putf(putp, ' ');
   2f58c:	2120      	movs	r1, #32
   2f58e:	4630      	mov	r0, r6
   2f590:	f7ff ff67 	bl	2f462 <putf>
   2f594:	4405      	add	r5, r0
        while (n-- > 0)
   2f596:	463c      	mov	r4, r7
   2f598:	1e67      	subs	r7, r4, #1
   2f59a:	2c00      	cmp	r4, #0
   2f59c:	dcf6      	bgt.n	2f58c <putchw+0x100>
    }
    
    return written;
}
   2f59e:	4628      	mov	r0, r5
   2f5a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2f5a4:	0008ff00 	.word	0x0008ff00

0002f5a8 <intarg>:
static unsigned long long
intarg(int lng, int sign, va_list *va)
{
    unsigned long long val;

    switch (lng) {
   2f5a8:	b160      	cbz	r0, 2f5c4 <intarg+0x1c>
   2f5aa:	2801      	cmp	r0, #1
   2f5ac:	d017      	beq.n	2f5de <intarg+0x36>
        }
        break;

    case 2:
    default:
        if (sign) {
   2f5ae:	bb19      	cbnz	r1, 2f5f8 <intarg+0x50>
            val = va_arg(*va, long long);
        } else {
            val = va_arg(*va, unsigned long long);
   2f5b0:	6813      	ldr	r3, [r2, #0]
   2f5b2:	3307      	adds	r3, #7
   2f5b4:	f023 0307 	bic.w	r3, r3, #7
   2f5b8:	f103 0108 	add.w	r1, r3, #8
   2f5bc:	6011      	str	r1, [r2, #0]
   2f5be:	e9d3 0100 	ldrd	r0, r1, [r3]
        }
        break;
    }

    return val;
}
   2f5c2:	4770      	bx	lr
        if (sign) {
   2f5c4:	b129      	cbz	r1, 2f5d2 <intarg+0x2a>
            val = va_arg(*va, int);
   2f5c6:	6813      	ldr	r3, [r2, #0]
   2f5c8:	1d19      	adds	r1, r3, #4
   2f5ca:	6011      	str	r1, [r2, #0]
   2f5cc:	6818      	ldr	r0, [r3, #0]
   2f5ce:	17c1      	asrs	r1, r0, #31
   2f5d0:	4770      	bx	lr
            val = va_arg(*va, unsigned int);
   2f5d2:	6813      	ldr	r3, [r2, #0]
   2f5d4:	1d19      	adds	r1, r3, #4
   2f5d6:	6011      	str	r1, [r2, #0]
   2f5d8:	6818      	ldr	r0, [r3, #0]
   2f5da:	2100      	movs	r1, #0
   2f5dc:	4770      	bx	lr
        if (sign) {
   2f5de:	b129      	cbz	r1, 2f5ec <intarg+0x44>
            val = va_arg(*va, long);
   2f5e0:	6813      	ldr	r3, [r2, #0]
   2f5e2:	1d19      	adds	r1, r3, #4
   2f5e4:	6011      	str	r1, [r2, #0]
   2f5e6:	6818      	ldr	r0, [r3, #0]
   2f5e8:	17c1      	asrs	r1, r0, #31
   2f5ea:	4770      	bx	lr
            val = va_arg(*va, unsigned long);
   2f5ec:	6813      	ldr	r3, [r2, #0]
   2f5ee:	1d19      	adds	r1, r3, #4
   2f5f0:	6011      	str	r1, [r2, #0]
   2f5f2:	6818      	ldr	r0, [r3, #0]
   2f5f4:	2100      	movs	r1, #0
   2f5f6:	4770      	bx	lr
            val = va_arg(*va, long long);
   2f5f8:	6813      	ldr	r3, [r2, #0]
   2f5fa:	3307      	adds	r3, #7
   2f5fc:	f023 0307 	bic.w	r3, r3, #7
   2f600:	f103 0108 	add.w	r1, r3, #8
   2f604:	6011      	str	r1, [r2, #0]
   2f606:	e9d3 0100 	ldrd	r0, r1, [r3]
   2f60a:	4770      	bx	lr

0002f60c <tfp_format>:

size_t tfp_format(FILE *putp, const char *fmt, va_list va)
{
   2f60c:	b570      	push	{r4, r5, r6, lr}
   2f60e:	b08a      	sub	sp, #40	; 0x28
   2f610:	4605      	mov	r5, r0
   2f612:	9101      	str	r1, [sp, #4]
   2f614:	9200      	str	r2, [sp, #0]
    double d;
    int n;
#endif
    int i;

    p.bf = bf;
   2f616:	ab02      	add	r3, sp, #8
   2f618:	9309      	str	r3, [sp, #36]	; 0x24
    size_t written = 0;
   2f61a:	2400      	movs	r4, #0

    while ((ch = *(fmt++))) {
   2f61c:	9b01      	ldr	r3, [sp, #4]
   2f61e:	1c5a      	adds	r2, r3, #1
   2f620:	9201      	str	r2, [sp, #4]
   2f622:	7819      	ldrb	r1, [r3, #0]
   2f624:	2900      	cmp	r1, #0
   2f626:	f000 811c 	beq.w	2f862 <tfp_format+0x256>
        if (ch != '%') {
   2f62a:	2925      	cmp	r1, #37	; 0x25
   2f62c:	d004      	beq.n	2f638 <tfp_format+0x2c>
            written += putf(putp, ch);
   2f62e:	4628      	mov	r0, r5
   2f630:	f7ff ff17 	bl	2f462 <putf>
   2f634:	4404      	add	r4, r0
   2f636:	e7f1      	b.n	2f61c <tfp_format+0x10>
        } else {
            /* Init parameter struct */
            p.lz = 0;
   2f638:	2200      	movs	r2, #0
   2f63a:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
            p.alt = 0;
   2f63e:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
            p.width = 0;
   2f642:	f88d 2020 	strb.w	r2, [sp, #32]
            p.sign = 0;
            p.left = 0;
            p.uc = 0;
   2f646:	f003 03f4 	and.w	r3, r3, #244	; 0xf4
   2f64a:	f362 0382 	bfi	r3, r2, #2, #1
   2f64e:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
            lng = 0;

            /* Flags */
            while ((ch = *(fmt++))) {
   2f652:	9b01      	ldr	r3, [sp, #4]
   2f654:	1c5a      	adds	r2, r3, #1
   2f656:	9201      	str	r2, [sp, #4]
   2f658:	7818      	ldrb	r0, [r3, #0]
   2f65a:	b128      	cbz	r0, 2f668 <tfp_format+0x5c>
                switch (ch) {
   2f65c:	282d      	cmp	r0, #45	; 0x2d
   2f65e:	d04e      	beq.n	2f6fe <tfp_format+0xf2>
   2f660:	2830      	cmp	r0, #48	; 0x30
   2f662:	d03c      	beq.n	2f6de <tfp_format+0xd2>
   2f664:	2823      	cmp	r0, #35	; 0x23
   2f666:	d043      	beq.n	2f6f0 <tfp_format+0xe4>
                }
                break;
            }

            /* Width */
            if (ch == '*') {
   2f668:	282a      	cmp	r0, #42	; 0x2a
   2f66a:	d052      	beq.n	2f712 <tfp_format+0x106>
                    p.width = UCHAR_MAX;
                } else if (i > 0) {
                    p.width = i;
                }
                ch = *(fmt++);
            } else if (ch >= '0' && ch <= '9') {
   2f66c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   2f670:	b2db      	uxtb	r3, r3
   2f672:	2b09      	cmp	r3, #9
   2f674:	d961      	bls.n	2f73a <tfp_format+0x12e>
                ch = a2i(ch, &fmt, 10, &(p.width));
            }
            if (ch == 'l') {
   2f676:	286c      	cmp	r0, #108	; 0x6c
   2f678:	d065      	beq.n	2f746 <tfp_format+0x13a>
            lng = 0;
   2f67a:	2600      	movs	r6, #0
                    ch = *(fmt++);
                    lng = 2;
                }
            }

            if (ch == 'z') {
   2f67c:	287a      	cmp	r0, #122	; 0x7a
   2f67e:	d06f      	beq.n	2f760 <tfp_format+0x154>
                ch = *(fmt++);
            }

            switch (ch) {
   2f680:	2869      	cmp	r0, #105	; 0x69
   2f682:	f000 808e 	beq.w	2f7a2 <tfp_format+0x196>
   2f686:	d970      	bls.n	2f76a <tfp_format+0x15e>
   2f688:	2873      	cmp	r0, #115	; 0x73
   2f68a:	f000 80dd 	beq.w	2f848 <tfp_format+0x23c>
   2f68e:	f200 8099 	bhi.w	2f7c4 <tfp_format+0x1b8>
   2f692:	286f      	cmp	r0, #111	; 0x6f
   2f694:	f000 80c7 	beq.w	2f826 <tfp_format+0x21a>
   2f698:	2870      	cmp	r0, #112	; 0x70
   2f69a:	d1bf      	bne.n	2f61c <tfp_format+0x10>
                p.base = 8;
                ui2a(intarg(lng, 0, &va), &p);
                written += putchw(putp, &p);
                break;
            case 'p':
                v = va_arg(va, void *);
   2f69c:	9b00      	ldr	r3, [sp, #0]
   2f69e:	1d1a      	adds	r2, r3, #4
   2f6a0:	9200      	str	r2, [sp, #0]
   2f6a2:	6818      	ldr	r0, [r3, #0]
                p.base = 16;
   2f6a4:	2310      	movs	r3, #16
   2f6a6:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a((uintptr_t)v, &p);
   2f6aa:	aa08      	add	r2, sp, #32
   2f6ac:	2100      	movs	r1, #0
   2f6ae:	f7ff fe35 	bl	2f31c <ui2a>
                p.width = 2 * sizeof(void*);
   2f6b2:	2308      	movs	r3, #8
   2f6b4:	f88d 3020 	strb.w	r3, [sp, #32]
                p.lz = 1;
   2f6b8:	2301      	movs	r3, #1
   2f6ba:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                written += putf(putp, '0');
   2f6be:	2130      	movs	r1, #48	; 0x30
   2f6c0:	4628      	mov	r0, r5
   2f6c2:	f7ff fece 	bl	2f462 <putf>
   2f6c6:	4404      	add	r4, r0
                written += putf(putp, 'x');
   2f6c8:	2178      	movs	r1, #120	; 0x78
   2f6ca:	4628      	mov	r0, r5
   2f6cc:	f7ff fec9 	bl	2f462 <putf>
   2f6d0:	4404      	add	r4, r0
                written += putchw(putp, &p);
   2f6d2:	a908      	add	r1, sp, #32
   2f6d4:	4628      	mov	r0, r5
   2f6d6:	f7ff fed9 	bl	2f48c <putchw>
   2f6da:	4404      	add	r4, r0
                break;
   2f6dc:	e79e      	b.n	2f61c <tfp_format+0x10>
                    if (!p.left) {
   2f6de:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   2f6e2:	f013 0f08 	tst.w	r3, #8
   2f6e6:	d1b4      	bne.n	2f652 <tfp_format+0x46>
                        p.lz = 1;
   2f6e8:	2301      	movs	r3, #1
   2f6ea:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                    continue;
   2f6ee:	e7b0      	b.n	2f652 <tfp_format+0x46>
                    p.alt = 1;
   2f6f0:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   2f6f4:	f043 0302 	orr.w	r3, r3, #2
   2f6f8:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                    continue;
   2f6fc:	e7a9      	b.n	2f652 <tfp_format+0x46>
                    p.left = 1;
   2f6fe:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   2f702:	f043 0308 	orr.w	r3, r3, #8
   2f706:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                    p.lz = 0;
   2f70a:	2300      	movs	r3, #0
   2f70c:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                    continue;
   2f710:	e79f      	b.n	2f652 <tfp_format+0x46>
                i = intarg(0, 1, &va);
   2f712:	466a      	mov	r2, sp
   2f714:	2101      	movs	r1, #1
   2f716:	2000      	movs	r0, #0
   2f718:	f7ff ff46 	bl	2f5a8 <intarg>
                if (i > UCHAR_MAX) {
   2f71c:	28ff      	cmp	r0, #255	; 0xff
   2f71e:	dd07      	ble.n	2f730 <tfp_format+0x124>
                    p.width = UCHAR_MAX;
   2f720:	23ff      	movs	r3, #255	; 0xff
   2f722:	f88d 3020 	strb.w	r3, [sp, #32]
                ch = *(fmt++);
   2f726:	9b01      	ldr	r3, [sp, #4]
   2f728:	1c5a      	adds	r2, r3, #1
   2f72a:	9201      	str	r2, [sp, #4]
   2f72c:	7818      	ldrb	r0, [r3, #0]
   2f72e:	e7a2      	b.n	2f676 <tfp_format+0x6a>
                } else if (i > 0) {
   2f730:	2800      	cmp	r0, #0
   2f732:	ddf8      	ble.n	2f726 <tfp_format+0x11a>
                    p.width = i;
   2f734:	f88d 0020 	strb.w	r0, [sp, #32]
   2f738:	e7f5      	b.n	2f726 <tfp_format+0x11a>
                ch = a2i(ch, &fmt, 10, &(p.width));
   2f73a:	ab08      	add	r3, sp, #32
   2f73c:	220a      	movs	r2, #10
   2f73e:	a901      	add	r1, sp, #4
   2f740:	f7ff fe74 	bl	2f42c <a2i>
   2f744:	e797      	b.n	2f676 <tfp_format+0x6a>
                ch = *(fmt++);
   2f746:	9b01      	ldr	r3, [sp, #4]
   2f748:	1c5a      	adds	r2, r3, #1
   2f74a:	9201      	str	r2, [sp, #4]
   2f74c:	7818      	ldrb	r0, [r3, #0]
                if (ch == 'l') {
   2f74e:	286c      	cmp	r0, #108	; 0x6c
   2f750:	d001      	beq.n	2f756 <tfp_format+0x14a>
                lng = 1;
   2f752:	2601      	movs	r6, #1
   2f754:	e792      	b.n	2f67c <tfp_format+0x70>
                    ch = *(fmt++);
   2f756:	1c9a      	adds	r2, r3, #2
   2f758:	9201      	str	r2, [sp, #4]
   2f75a:	7858      	ldrb	r0, [r3, #1]
                    lng = 2;
   2f75c:	2602      	movs	r6, #2
   2f75e:	e78d      	b.n	2f67c <tfp_format+0x70>
                ch = *(fmt++);
   2f760:	9b01      	ldr	r3, [sp, #4]
   2f762:	1c5a      	adds	r2, r3, #1
   2f764:	9201      	str	r2, [sp, #4]
   2f766:	7818      	ldrb	r0, [r3, #0]
   2f768:	e78a      	b.n	2f680 <tfp_format+0x74>
            switch (ch) {
   2f76a:	2858      	cmp	r0, #88	; 0x58
   2f76c:	d040      	beq.n	2f7f0 <tfp_format+0x1e4>
   2f76e:	d80a      	bhi.n	2f786 <tfp_format+0x17a>
   2f770:	2800      	cmp	r0, #0
   2f772:	d076      	beq.n	2f862 <tfp_format+0x256>
   2f774:	2825      	cmp	r0, #37	; 0x25
   2f776:	f47f af51 	bne.w	2f61c <tfp_format+0x10>
                /* Output the decimal part. */
                written += putchw(putp, &p);
                break;
#endif
            case '%':
                written += putf(putp, ch);
   2f77a:	4601      	mov	r1, r0
   2f77c:	4628      	mov	r0, r5
   2f77e:	f7ff fe70 	bl	2f462 <putf>
   2f782:	4404      	add	r4, r0
                break;
   2f784:	e74a      	b.n	2f61c <tfp_format+0x10>
            switch (ch) {
   2f786:	2863      	cmp	r0, #99	; 0x63
   2f788:	d108      	bne.n	2f79c <tfp_format+0x190>
                written += putf(putp, (char)(va_arg(va, int)));
   2f78a:	9b00      	ldr	r3, [sp, #0]
   2f78c:	1d1a      	adds	r2, r3, #4
   2f78e:	9200      	str	r2, [sp, #0]
   2f790:	7819      	ldrb	r1, [r3, #0]
   2f792:	4628      	mov	r0, r5
   2f794:	f7ff fe65 	bl	2f462 <putf>
   2f798:	4404      	add	r4, r0
                break;
   2f79a:	e73f      	b.n	2f61c <tfp_format+0x10>
            switch (ch) {
   2f79c:	2864      	cmp	r0, #100	; 0x64
   2f79e:	f47f af3d 	bne.w	2f61c <tfp_format+0x10>
                p.base = 10;
   2f7a2:	230a      	movs	r3, #10
   2f7a4:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                i2a(intarg(lng, 1, &va), &p);
   2f7a8:	466a      	mov	r2, sp
   2f7aa:	2101      	movs	r1, #1
   2f7ac:	4630      	mov	r0, r6
   2f7ae:	f7ff fefb 	bl	2f5a8 <intarg>
   2f7b2:	aa08      	add	r2, sp, #32
   2f7b4:	f7ff fe12 	bl	2f3dc <i2a>
                written += putchw(putp, &p);
   2f7b8:	a908      	add	r1, sp, #32
   2f7ba:	4628      	mov	r0, r5
   2f7bc:	f7ff fe66 	bl	2f48c <putchw>
   2f7c0:	4404      	add	r4, r0
                break;
   2f7c2:	e72b      	b.n	2f61c <tfp_format+0x10>
            switch (ch) {
   2f7c4:	2875      	cmp	r0, #117	; 0x75
   2f7c6:	d110      	bne.n	2f7ea <tfp_format+0x1de>
                p.base = 10;
   2f7c8:	230a      	movs	r3, #10
   2f7ca:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a(intarg(lng, 0, &va), &p);
   2f7ce:	466a      	mov	r2, sp
   2f7d0:	2100      	movs	r1, #0
   2f7d2:	4630      	mov	r0, r6
   2f7d4:	f7ff fee8 	bl	2f5a8 <intarg>
   2f7d8:	aa08      	add	r2, sp, #32
   2f7da:	f7ff fd9f 	bl	2f31c <ui2a>
                written += putchw(putp, &p);
   2f7de:	a908      	add	r1, sp, #32
   2f7e0:	4628      	mov	r0, r5
   2f7e2:	f7ff fe53 	bl	2f48c <putchw>
   2f7e6:	4404      	add	r4, r0
                break;
   2f7e8:	e718      	b.n	2f61c <tfp_format+0x10>
            switch (ch) {
   2f7ea:	2878      	cmp	r0, #120	; 0x78
   2f7ec:	f47f af16 	bne.w	2f61c <tfp_format+0x10>
                p.base = 16;
   2f7f0:	2310      	movs	r3, #16
   2f7f2:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                p.uc = (ch == 'X');
   2f7f6:	2858      	cmp	r0, #88	; 0x58
   2f7f8:	bf14      	ite	ne
   2f7fa:	2300      	movne	r3, #0
   2f7fc:	2301      	moveq	r3, #1
   2f7fe:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
   2f802:	f363 0282 	bfi	r2, r3, #2, #1
   2f806:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
                ui2a(intarg(lng, 0, &va), &p);
   2f80a:	466a      	mov	r2, sp
   2f80c:	2100      	movs	r1, #0
   2f80e:	4630      	mov	r0, r6
   2f810:	f7ff feca 	bl	2f5a8 <intarg>
   2f814:	aa08      	add	r2, sp, #32
   2f816:	f7ff fd81 	bl	2f31c <ui2a>
                written += putchw(putp, &p);
   2f81a:	a908      	add	r1, sp, #32
   2f81c:	4628      	mov	r0, r5
   2f81e:	f7ff fe35 	bl	2f48c <putchw>
   2f822:	4404      	add	r4, r0
                break;
   2f824:	e6fa      	b.n	2f61c <tfp_format+0x10>
                p.base = 8;
   2f826:	2308      	movs	r3, #8
   2f828:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a(intarg(lng, 0, &va), &p);
   2f82c:	466a      	mov	r2, sp
   2f82e:	2100      	movs	r1, #0
   2f830:	4630      	mov	r0, r6
   2f832:	f7ff feb9 	bl	2f5a8 <intarg>
   2f836:	aa08      	add	r2, sp, #32
   2f838:	f7ff fd70 	bl	2f31c <ui2a>
                written += putchw(putp, &p);
   2f83c:	a908      	add	r1, sp, #32
   2f83e:	4628      	mov	r0, r5
   2f840:	f7ff fe24 	bl	2f48c <putchw>
   2f844:	4404      	add	r4, r0
                break;
   2f846:	e6e9      	b.n	2f61c <tfp_format+0x10>
                p.bf = va_arg(va, char *);
   2f848:	9b00      	ldr	r3, [sp, #0]
   2f84a:	1d1a      	adds	r2, r3, #4
   2f84c:	9200      	str	r2, [sp, #0]
   2f84e:	681b      	ldr	r3, [r3, #0]
   2f850:	9309      	str	r3, [sp, #36]	; 0x24
                written += putchw(putp, &p);
   2f852:	a908      	add	r1, sp, #32
   2f854:	4628      	mov	r0, r5
   2f856:	f7ff fe19 	bl	2f48c <putchw>
   2f85a:	4404      	add	r4, r0
                p.bf = bf;
   2f85c:	ab02      	add	r3, sp, #8
   2f85e:	9309      	str	r3, [sp, #36]	; 0x24
                break;
   2f860:	e6dc      	b.n	2f61c <tfp_format+0x10>
        }
    }
 abort:;
 
 return written;
}
   2f862:	4620      	mov	r0, r4
   2f864:	b00a      	add	sp, #40	; 0x28
   2f866:	bd70      	pop	{r4, r5, r6, pc}

0002f868 <vfprintf>:

int vfprintf(FILE *f, const char *fmt, va_list va)
{
   2f868:	b508      	push	{r3, lr}
    return tfp_format(f, fmt, va);
   2f86a:	f7ff fecf 	bl	2f60c <tfp_format>
}
   2f86e:	bd08      	pop	{r3, pc}

0002f870 <fprintf>:

int fprintf(FILE *f, const char *fmt, ...)
{
   2f870:	b40e      	push	{r1, r2, r3}
   2f872:	b500      	push	{lr}
   2f874:	b082      	sub	sp, #8
   2f876:	aa03      	add	r2, sp, #12
   2f878:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list va;
    va_start(va, fmt);
   2f87c:	9201      	str	r2, [sp, #4]
    int rv = vfprintf(f, fmt, va);
   2f87e:	f7ff fff3 	bl	2f868 <vfprintf>
    va_end(va);
    return rv;
}
   2f882:	b002      	add	sp, #8
   2f884:	f85d eb04 	ldr.w	lr, [sp], #4
   2f888:	b003      	add	sp, #12
   2f88a:	4770      	bx	lr

0002f88c <printf>:

int printf(const char *fmt, ...)
{
   2f88c:	b40f      	push	{r0, r1, r2, r3}
   2f88e:	b500      	push	{lr}
   2f890:	b083      	sub	sp, #12
   2f892:	aa04      	add	r2, sp, #16
   2f894:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list va;
    va_start(va, fmt);
   2f898:	9201      	str	r2, [sp, #4]
    int rv = vfprintf(stdout, fmt, va);
   2f89a:	4b04      	ldr	r3, [pc, #16]	; (2f8ac <printf+0x20>)
   2f89c:	6818      	ldr	r0, [r3, #0]
   2f89e:	f7ff ffe3 	bl	2f868 <vfprintf>
    va_end(va);
    return rv;
}
   2f8a2:	b003      	add	sp, #12
   2f8a4:	f85d eb04 	ldr.w	lr, [sp], #4
   2f8a8:	b004      	add	sp, #16
   2f8aa:	4770      	bx	lr
   2f8ac:	00032cec 	.word	0x00032cec

0002f8b0 <vsnprintf>:

int vsnprintf(char *str, size_t size, const char *fmt, va_list va)
{
   2f8b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   2f8b2:	b085      	sub	sp, #20
   2f8b4:	4605      	mov	r5, r0
   2f8b6:	460c      	mov	r4, r1
   2f8b8:	4616      	mov	r6, r2
   2f8ba:	461f      	mov	r7, r3
    struct MemFile state;
    FILE *f = fmemopen_w(&state, str, size);
   2f8bc:	460a      	mov	r2, r1
   2f8be:	4601      	mov	r1, r0
   2f8c0:	4668      	mov	r0, sp
   2f8c2:	f000 f843 	bl	2f94c <fmemopen_w>
    tfp_format(f, fmt, va);
   2f8c6:	463a      	mov	r2, r7
   2f8c8:	4631      	mov	r1, r6
   2f8ca:	f7ff fe9f 	bl	2f60c <tfp_format>
    if (size > 0) {
   2f8ce:	b12c      	cbz	r4, 2f8dc <vsnprintf+0x2c>
        if (state.bytes_written < size) {
   2f8d0:	9b02      	ldr	r3, [sp, #8]
   2f8d2:	42a3      	cmp	r3, r4
   2f8d4:	d305      	bcc.n	2f8e2 <vsnprintf+0x32>
            *(state.buffer) = '\0';
        } else {
            str[size - 1] = '\0';
   2f8d6:	3c01      	subs	r4, #1
   2f8d8:	2300      	movs	r3, #0
   2f8da:	552b      	strb	r3, [r5, r4]
        }
    }
    return state.bytes_written;
}
   2f8dc:	9802      	ldr	r0, [sp, #8]
   2f8de:	b005      	add	sp, #20
   2f8e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
            *(state.buffer) = '\0';
   2f8e2:	9b01      	ldr	r3, [sp, #4]
   2f8e4:	2200      	movs	r2, #0
   2f8e6:	701a      	strb	r2, [r3, #0]
   2f8e8:	e7f8      	b.n	2f8dc <vsnprintf+0x2c>

0002f8ea <snprintf>:

int snprintf(char *str, size_t size, const char *fmt, ...)
{
   2f8ea:	b40c      	push	{r2, r3}
   2f8ec:	b500      	push	{lr}
   2f8ee:	b083      	sub	sp, #12
   2f8f0:	ab04      	add	r3, sp, #16
   2f8f2:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list va;
    va_start(va, fmt);
   2f8f6:	9301      	str	r3, [sp, #4]
    int rv = vsnprintf(str, size, fmt, va);
   2f8f8:	f7ff ffda 	bl	2f8b0 <vsnprintf>
    va_end(va);
    return rv;
}
   2f8fc:	b003      	add	sp, #12
   2f8fe:	f85d eb04 	ldr.w	lr, [sp], #4
   2f902:	b002      	add	sp, #8
   2f904:	4770      	bx	lr
	...

0002f908 <vprintf>:

#include <stdio.h>
#include <stdarg.h>

int vprintf(const char *format, va_list ap)
{
   2f908:	b508      	push	{r3, lr}
	return vfprintf(stdout, format, ap);
   2f90a:	460a      	mov	r2, r1
   2f90c:	4601      	mov	r1, r0
   2f90e:	4b02      	ldr	r3, [pc, #8]	; (2f918 <vprintf+0x10>)
   2f910:	6818      	ldr	r0, [r3, #0]
   2f912:	f7ff ffa9 	bl	2f868 <vfprintf>
}
   2f916:	bd08      	pop	{r3, pc}
   2f918:	00032cec 	.word	0x00032cec

0002f91c <memfile_write>:
#include <stdio.h>

size_t memfile_write(FILE *instance, const char *bp, size_t n)
{
   2f91c:	b430      	push	{r4, r5}
    struct MemFile *f = (struct MemFile*)instance;
    size_t i = 0;
   2f91e:	2500      	movs	r5, #0
    
    while (n--)
   2f920:	e000      	b.n	2f924 <memfile_write+0x8>
    {
        f->bytes_written++;
        if (f->bytes_written <= f->size)
        {
            *f->buffer++ = *bp++;
   2f922:	4622      	mov	r2, r4
    while (n--)
   2f924:	1e54      	subs	r4, r2, #1
   2f926:	b16a      	cbz	r2, 2f944 <memfile_write+0x28>
        f->bytes_written++;
   2f928:	6883      	ldr	r3, [r0, #8]
   2f92a:	3301      	adds	r3, #1
   2f92c:	6083      	str	r3, [r0, #8]
        if (f->bytes_written <= f->size)
   2f92e:	68c2      	ldr	r2, [r0, #12]
   2f930:	4293      	cmp	r3, r2
   2f932:	d8f6      	bhi.n	2f922 <memfile_write+0x6>
            *f->buffer++ = *bp++;
   2f934:	6843      	ldr	r3, [r0, #4]
   2f936:	1c5a      	adds	r2, r3, #1
   2f938:	6042      	str	r2, [r0, #4]
   2f93a:	780a      	ldrb	r2, [r1, #0]
   2f93c:	701a      	strb	r2, [r3, #0]
            i++;
   2f93e:	3501      	adds	r5, #1
            *f->buffer++ = *bp++;
   2f940:	3101      	adds	r1, #1
   2f942:	e7ee      	b.n	2f922 <memfile_write+0x6>
        }
    }
    
    return i;
}
   2f944:	4628      	mov	r0, r5
   2f946:	bc30      	pop	{r4, r5}
   2f948:	4770      	bx	lr
	...

0002f94c <fmemopen_w>:
    &memfile_write,
    NULL
};

FILE *fmemopen_w(struct MemFile* storage, char *buffer, size_t size)
{
   2f94c:	b410      	push	{r4}
    storage->file.vmt = &MemFile_methods;
   2f94e:	4c04      	ldr	r4, [pc, #16]	; (2f960 <fmemopen_w+0x14>)
   2f950:	6004      	str	r4, [r0, #0]
    storage->buffer = buffer;
   2f952:	6041      	str	r1, [r0, #4]
    storage->bytes_written = 0;
   2f954:	2100      	movs	r1, #0
   2f956:	6081      	str	r1, [r0, #8]
    storage->size = size;
   2f958:	60c2      	str	r2, [r0, #12]
    return (FILE*)storage;
}
   2f95a:	bc10      	pop	{r4}
   2f95c:	4770      	bx	lr
   2f95e:	bf00      	nop
   2f960:	00032cf0 	.word	0x00032cf0

0002f964 <strntoumax>:
		return -1;
	}
}

uintmax_t strntoumax(const char *nptr, char **endptr, int base, size_t n)
{
   2f964:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2f968:	4605      	mov	r5, r0
   2f96a:	468c      	mov	ip, r1
	int minus = 0;
	uintmax_t v = 0;
	int d;

	while (n && isspace((unsigned char)*nptr)) {
   2f96c:	e001      	b.n	2f972 <strntoumax+0xe>
		nptr++;
   2f96e:	3501      	adds	r5, #1
		n--;
   2f970:	3b01      	subs	r3, #1
	while (n && isspace((unsigned char)*nptr)) {
   2f972:	b143      	cbz	r3, 2f986 <strntoumax+0x22>
   2f974:	7828      	ldrb	r0, [r5, #0]
	return __c == ' ' || __c == '\n' || __c == '\t' || __c == '\r';
   2f976:	2820      	cmp	r0, #32
   2f978:	d0f9      	beq.n	2f96e <strntoumax+0xa>
   2f97a:	280a      	cmp	r0, #10
   2f97c:	d0f7      	beq.n	2f96e <strntoumax+0xa>
   2f97e:	2809      	cmp	r0, #9
   2f980:	d0f5      	beq.n	2f96e <strntoumax+0xa>
   2f982:	280d      	cmp	r0, #13
   2f984:	d0f3      	beq.n	2f96e <strntoumax+0xa>
	}

	/* Single optional + or - */
	if (n) {
   2f986:	b1a3      	cbz	r3, 2f9b2 <strntoumax+0x4e>
		char c = *nptr;
   2f988:	f895 e000 	ldrb.w	lr, [r5]
		if (c == '-' || c == '+') {
   2f98c:	f1be 0f2d 	cmp.w	lr, #45	; 0x2d
   2f990:	d005      	beq.n	2f99e <strntoumax+0x3a>
   2f992:	f1be 0f2b 	cmp.w	lr, #43	; 0x2b
   2f996:	d002      	beq.n	2f99e <strntoumax+0x3a>
	int minus = 0;
   2f998:	f04f 0e00 	mov.w	lr, #0
   2f99c:	e00b      	b.n	2f9b6 <strntoumax+0x52>
			minus = (c == '-');
   2f99e:	f1be 0f2d 	cmp.w	lr, #45	; 0x2d
   2f9a2:	bf14      	ite	ne
   2f9a4:	f04f 0e00 	movne.w	lr, #0
   2f9a8:	f04f 0e01 	moveq.w	lr, #1
			nptr++;
   2f9ac:	3501      	adds	r5, #1
			n--;
   2f9ae:	3b01      	subs	r3, #1
   2f9b0:	e001      	b.n	2f9b6 <strntoumax+0x52>
	int minus = 0;
   2f9b2:	f04f 0e00 	mov.w	lr, #0
		}
	}

	if (base == 0) {
   2f9b6:	b9ba      	cbnz	r2, 2f9e8 <strntoumax+0x84>
		if (n >= 2 && nptr[0] == '0' &&
   2f9b8:	2b01      	cmp	r3, #1
   2f9ba:	d902      	bls.n	2f9c2 <strntoumax+0x5e>
   2f9bc:	782a      	ldrb	r2, [r5, #0]
   2f9be:	2a30      	cmp	r2, #48	; 0x30
   2f9c0:	d005      	beq.n	2f9ce <strntoumax+0x6a>
		    (nptr[1] == 'x' || nptr[1] == 'X')) {
			n -= 2;
			nptr += 2;
			base = 16;
		} else if (n >= 1 && nptr[0] == '0') {
   2f9c2:	b32b      	cbz	r3, 2fa10 <strntoumax+0xac>
   2f9c4:	782a      	ldrb	r2, [r5, #0]
   2f9c6:	2a30      	cmp	r2, #48	; 0x30
   2f9c8:	d00a      	beq.n	2f9e0 <strntoumax+0x7c>
			n--;
			nptr++;
			base = 8;
		} else {
			base = 10;
   2f9ca:	220a      	movs	r2, #10
   2f9cc:	e00e      	b.n	2f9ec <strntoumax+0x88>
		    (nptr[1] == 'x' || nptr[1] == 'X')) {
   2f9ce:	786a      	ldrb	r2, [r5, #1]
		if (n >= 2 && nptr[0] == '0' &&
   2f9d0:	2a78      	cmp	r2, #120	; 0x78
   2f9d2:	d001      	beq.n	2f9d8 <strntoumax+0x74>
		    (nptr[1] == 'x' || nptr[1] == 'X')) {
   2f9d4:	2a58      	cmp	r2, #88	; 0x58
   2f9d6:	d1f4      	bne.n	2f9c2 <strntoumax+0x5e>
			n -= 2;
   2f9d8:	3b02      	subs	r3, #2
			nptr += 2;
   2f9da:	3502      	adds	r5, #2
			base = 16;
   2f9dc:	2210      	movs	r2, #16
   2f9de:	e005      	b.n	2f9ec <strntoumax+0x88>
			n--;
   2f9e0:	3b01      	subs	r3, #1
			nptr++;
   2f9e2:	3501      	adds	r5, #1
			base = 8;
   2f9e4:	2208      	movs	r2, #8
   2f9e6:	e001      	b.n	2f9ec <strntoumax+0x88>
		}
	} else if (base == 16) {
   2f9e8:	2a10      	cmp	r2, #16
   2f9ea:	d004      	beq.n	2f9f6 <strntoumax+0x92>
			base = 10;
   2f9ec:	f04f 0800 	mov.w	r8, #0
   2f9f0:	f04f 0900 	mov.w	r9, #0
   2f9f4:	e025      	b.n	2fa42 <strntoumax+0xde>
		if (n >= 2 && nptr[0] == '0' &&
   2f9f6:	2b01      	cmp	r3, #1
   2f9f8:	d9f8      	bls.n	2f9ec <strntoumax+0x88>
   2f9fa:	7829      	ldrb	r1, [r5, #0]
   2f9fc:	2930      	cmp	r1, #48	; 0x30
   2f9fe:	d1f5      	bne.n	2f9ec <strntoumax+0x88>
		    (nptr[1] == 'x' || nptr[1] == 'X')) {
   2fa00:	7869      	ldrb	r1, [r5, #1]
		if (n >= 2 && nptr[0] == '0' &&
   2fa02:	2978      	cmp	r1, #120	; 0x78
   2fa04:	d001      	beq.n	2fa0a <strntoumax+0xa6>
		    (nptr[1] == 'x' || nptr[1] == 'X')) {
   2fa06:	2958      	cmp	r1, #88	; 0x58
   2fa08:	d1f0      	bne.n	2f9ec <strntoumax+0x88>
			n -= 2;
   2fa0a:	3b02      	subs	r3, #2
			nptr += 2;
   2fa0c:	3502      	adds	r5, #2
   2fa0e:	e7ed      	b.n	2f9ec <strntoumax+0x88>
			base = 10;
   2fa10:	220a      	movs	r2, #10
   2fa12:	e7eb      	b.n	2f9ec <strntoumax+0x88>
	} else if (ch >= 'A' && ch <= 'Z') {
   2fa14:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
   2fa18:	2e19      	cmp	r6, #25
   2fa1a:	d81a      	bhi.n	2fa52 <strntoumax+0xee>
		return ch - 'A' + 10;
   2fa1c:	3c37      	subs	r4, #55	; 0x37
		}
	}

	while (n && (d = digitval(*nptr)) >= 0 && d < base) {
   2fa1e:	2c00      	cmp	r4, #0
   2fa20:	db1d      	blt.n	2fa5e <strntoumax+0xfa>
   2fa22:	42a2      	cmp	r2, r4
   2fa24:	dd1b      	ble.n	2fa5e <strntoumax+0xfa>
		v = v * base + d;
   2fa26:	fb02 f109 	mul.w	r1, r2, r9
   2fa2a:	17d7      	asrs	r7, r2, #31
   2fa2c:	fb08 1607 	mla	r6, r8, r7, r1
   2fa30:	fba2 0108 	umull	r0, r1, r2, r8
   2fa34:	4431      	add	r1, r6
   2fa36:	eb10 0804 	adds.w	r8, r0, r4
   2fa3a:	eb41 79e4 	adc.w	r9, r1, r4, asr #31
		n--;
   2fa3e:	3b01      	subs	r3, #1
		nptr++;
   2fa40:	3501      	adds	r5, #1
	while (n && (d = digitval(*nptr)) >= 0 && d < base) {
   2fa42:	b163      	cbz	r3, 2fa5e <strntoumax+0xfa>
   2fa44:	782c      	ldrb	r4, [r5, #0]
	if (ch >= '0' && ch <= '9') {
   2fa46:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
   2fa4a:	2e09      	cmp	r6, #9
   2fa4c:	d8e2      	bhi.n	2fa14 <strntoumax+0xb0>
		return ch - '0';
   2fa4e:	4634      	mov	r4, r6
   2fa50:	e7e5      	b.n	2fa1e <strntoumax+0xba>
	} else if (ch >= 'a' && ch <= 'z') {
   2fa52:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
   2fa56:	2e19      	cmp	r6, #25
   2fa58:	d801      	bhi.n	2fa5e <strntoumax+0xfa>
		return ch - 'a' + 10;
   2fa5a:	3c57      	subs	r4, #87	; 0x57
   2fa5c:	e7df      	b.n	2fa1e <strntoumax+0xba>
	}

	if (endptr)
   2fa5e:	f1bc 0f00 	cmp.w	ip, #0
   2fa62:	d001      	beq.n	2fa68 <strntoumax+0x104>
		*endptr = (char *)nptr;
   2fa64:	f8cc 5000 	str.w	r5, [ip]

	return minus ? -v : v;
   2fa68:	f1be 0f00 	cmp.w	lr, #0
   2fa6c:	d003      	beq.n	2fa76 <strntoumax+0x112>
   2fa6e:	f1d8 0800 	rsbs	r8, r8, #0
   2fa72:	eb69 0949 	sbc.w	r9, r9, r9, lsl #1
}
   2fa76:	4640      	mov	r0, r8
   2fa78:	4649      	mov	r1, r9
   2fa7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0002fa7e <strpbrk>:
#include <string.h>

char *strpbrk(const char *s1, const char *s2)
{
  const char *c = s2;
  if (!*s1)
   2fa7e:	7803      	ldrb	r3, [r0, #0]
   2fa80:	b193      	cbz	r3, 2faa8 <strpbrk+0x2a>
{
   2fa82:	b410      	push	{r4}
  const char *c = s2;
   2fa84:	460a      	mov	r2, r1
   2fa86:	e001      	b.n	2fa8c <strpbrk+0xe>
      for (c = s2; *c; c++)
	{
	  if (*s1 == *c)
	    break;
	}
      if (*c)
   2fa88:	b953      	cbnz	r3, 2faa0 <strpbrk+0x22>
	break;
      s1++;
   2fa8a:	3001      	adds	r0, #1
  while (*s1)
   2fa8c:	7804      	ldrb	r4, [r0, #0]
   2fa8e:	b13c      	cbz	r4, 2faa0 <strpbrk+0x22>
      for (c = s2; *c; c++)
   2fa90:	460a      	mov	r2, r1
   2fa92:	7813      	ldrb	r3, [r2, #0]
   2fa94:	2b00      	cmp	r3, #0
   2fa96:	d0f7      	beq.n	2fa88 <strpbrk+0xa>
	  if (*s1 == *c)
   2fa98:	42a3      	cmp	r3, r4
   2fa9a:	d0f5      	beq.n	2fa88 <strpbrk+0xa>
      for (c = s2; *c; c++)
   2fa9c:	3201      	adds	r2, #1
   2fa9e:	e7f8      	b.n	2fa92 <strpbrk+0x14>
    }

  if (*c == '\0')
   2faa0:	7813      	ldrb	r3, [r2, #0]
   2faa2:	b11b      	cbz	r3, 2faac <strpbrk+0x2e>
    s1 = NULL;

  return (char *) s1;
}
   2faa4:	bc10      	pop	{r4}
   2faa6:	4770      	bx	lr
    return (char *) NULL;
   2faa8:	2000      	movs	r0, #0
}
   2faaa:	4770      	bx	lr
    s1 = NULL;
   2faac:	2000      	movs	r0, #0
   2faae:	e7f9      	b.n	2faa4 <strpbrk+0x26>

0002fab0 <log_fcb_registered>:
    /* Initialize watermark to designated unknown value*/
    fl->fl_watermark_off = 0xffffffff;
#endif
#endif
    return 0;
}
   2fab0:	2000      	movs	r0, #0
   2fab2:	4770      	bx	lr

0002fab4 <log_fcb_flush>:
{
   2fab4:	b508      	push	{r3, lr}
    return fcb_clear(fcb);
   2fab6:	6880      	ldr	r0, [r0, #8]
   2fab8:	f7fd ffa5 	bl	2da06 <fcb_clear>
}
   2fabc:	bd08      	pop	{r3, pc}

0002fabe <log_fcb_find_gte>:
{
   2fabe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2fac2:	b087      	sub	sp, #28
   2fac4:	4607      	mov	r7, r0
   2fac6:	4688      	mov	r8, r1
   2fac8:	4614      	mov	r4, r2
    fcb_log = log->l_arg;
   2faca:	6886      	ldr	r6, [r0, #8]
    memset(out_entry, 0, sizeof *out_entry);
   2facc:	2300      	movs	r3, #0
   2face:	6013      	str	r3, [r2, #0]
   2fad0:	6053      	str	r3, [r2, #4]
   2fad2:	6093      	str	r3, [r2, #8]
   2fad4:	60d3      	str	r3, [r2, #12]
    rc = fcb_getnext(fcb, out_entry);
   2fad6:	4611      	mov	r1, r2
   2fad8:	4630      	mov	r0, r6
   2fada:	f7fe f979 	bl	2ddd0 <fcb_getnext>
    if (rc == FCB_ERR_NOVAR) {
   2fade:	f110 0f03 	cmn.w	r0, #3
   2fae2:	d033      	beq.n	2fb4c <log_fcb_find_gte+0x8e>
   2fae4:	46b1      	mov	r9, r6
   2fae6:	4605      	mov	r5, r0
    } else if (rc != 0) {
   2fae8:	bb98      	cbnz	r0, 2fb52 <log_fcb_find_gte+0x94>
    if (log_offset->lo_ts < 0) {
   2faea:	e9d8 2300 	ldrd	r2, r3, [r8]
   2faee:	2a00      	cmp	r2, #0
   2faf0:	f173 0300 	sbcs.w	r3, r3, #0
   2faf4:	db21      	blt.n	2fb3a <log_fcb_find_gte+0x7c>
    rc = log_read_hdr(log, &fcb->f_active, &hdr);
   2faf6:	aa01      	add	r2, sp, #4
   2faf8:	f106 011c 	add.w	r1, r6, #28
   2fafc:	4638      	mov	r0, r7
   2fafe:	f7e1 fb7f 	bl	11200 <log_read_hdr>
    if (rc != 0) {
   2fb02:	4605      	mov	r5, r0
   2fb04:	b9f0      	cbnz	r0, 2fb44 <log_fcb_find_gte+0x86>
    if (log_offset->lo_index > hdr.ue_index) {
   2fb06:	f8d8 2008 	ldr.w	r2, [r8, #8]
   2fb0a:	9b03      	ldr	r3, [sp, #12]
   2fb0c:	429a      	cmp	r2, r3
   2fb0e:	d823      	bhi.n	2fb58 <log_fcb_find_gte+0x9a>
        rc = log_read_hdr(log, out_entry, &hdr);
   2fb10:	aa01      	add	r2, sp, #4
   2fb12:	4621      	mov	r1, r4
   2fb14:	4638      	mov	r0, r7
   2fb16:	f7e1 fb73 	bl	11200 <log_read_hdr>
        if (rc != 0) {
   2fb1a:	4605      	mov	r5, r0
   2fb1c:	b990      	cbnz	r0, 2fb44 <log_fcb_find_gte+0x86>
        if (hdr.ue_index >= log_offset->lo_index) {
   2fb1e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   2fb22:	9a03      	ldr	r2, [sp, #12]
   2fb24:	429a      	cmp	r2, r3
   2fb26:	d20d      	bcs.n	2fb44 <log_fcb_find_gte+0x86>
    } while (fcb_getnext(fcb, out_entry) == 0);
   2fb28:	4621      	mov	r1, r4
   2fb2a:	4648      	mov	r0, r9
   2fb2c:	f7fe f950 	bl	2ddd0 <fcb_getnext>
   2fb30:	2800      	cmp	r0, #0
   2fb32:	d0ed      	beq.n	2fb10 <log_fcb_find_gte+0x52>
    return SYS_ENOENT;
   2fb34:	f06f 0503 	mvn.w	r5, #3
   2fb38:	e004      	b.n	2fb44 <log_fcb_find_gte+0x86>
        *out_entry = fcb->f_active;
   2fb3a:	361c      	adds	r6, #28
   2fb3c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   2fb40:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
   2fb44:	4628      	mov	r0, r5
   2fb46:	b007      	add	sp, #28
   2fb48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return SYS_ENOENT;
   2fb4c:	f06f 0503 	mvn.w	r5, #3
   2fb50:	e7f8      	b.n	2fb44 <log_fcb_find_gte+0x86>
        return SYS_EUNKNOWN;
   2fb52:	f06f 050c 	mvn.w	r5, #12
   2fb56:	e7f5      	b.n	2fb44 <log_fcb_find_gte+0x86>
        return SYS_ENOENT;
   2fb58:	f06f 0503 	mvn.w	r5, #3
   2fb5c:	e7f2      	b.n	2fb44 <log_fcb_find_gte+0x86>

0002fb5e <log_fcb_walk_impl>:
{
   2fb5e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2fb62:	b085      	sub	sp, #20
   2fb64:	4604      	mov	r4, r0
   2fb66:	460d      	mov	r5, r1
   2fb68:	4690      	mov	r8, r2
   2fb6a:	461e      	mov	r6, r3
    fcb_log = log->l_arg;
   2fb6c:	f8d0 9008 	ldr.w	r9, [r0, #8]
    rc = log_fcb_find_gte(log, log_offset, &loc);
   2fb70:	466a      	mov	r2, sp
   2fb72:	4641      	mov	r1, r8
   2fb74:	f7ff ffa3 	bl	2fabe <log_fcb_find_gte>
    switch (rc) {
   2fb78:	f110 0f04 	cmn.w	r0, #4
   2fb7c:	d005      	beq.n	2fb8a <log_fcb_walk_impl+0x2c>
   2fb7e:	4607      	mov	r7, r0
   2fb80:	b128      	cbz	r0, 2fb8e <log_fcb_walk_impl+0x30>
}
   2fb82:	4638      	mov	r0, r7
   2fb84:	b005      	add	sp, #20
   2fb86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return 0;
   2fb8a:	2700      	movs	r7, #0
   2fb8c:	e7f9      	b.n	2fb82 <log_fcb_walk_impl+0x24>
    fap = loc.fe_area;
   2fb8e:	f8dd b000 	ldr.w	fp, [sp]
   2fb92:	e00c      	b.n	2fbae <log_fcb_walk_impl+0x50>
        rc = walk_func(log, log_offset, &loc, loc.fe_data_len);
   2fb94:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   2fb98:	466a      	mov	r2, sp
   2fb9a:	4641      	mov	r1, r8
   2fb9c:	4620      	mov	r0, r4
   2fb9e:	47a8      	blx	r5
        if (rc != 0) {
   2fba0:	4682      	mov	sl, r0
   2fba2:	b950      	cbnz	r0, 2fbba <log_fcb_walk_impl+0x5c>
    } while (fcb_getnext(fcb, &loc) == 0);
   2fba4:	4669      	mov	r1, sp
   2fba6:	4648      	mov	r0, r9
   2fba8:	f7fe f912 	bl	2ddd0 <fcb_getnext>
   2fbac:	b948      	cbnz	r0, 2fbc2 <log_fcb_walk_impl+0x64>
        if (area) {
   2fbae:	2e00      	cmp	r6, #0
   2fbb0:	d0f0      	beq.n	2fb94 <log_fcb_walk_impl+0x36>
            if (fap != loc.fe_area) {
   2fbb2:	9b00      	ldr	r3, [sp, #0]
   2fbb4:	455b      	cmp	r3, fp
   2fbb6:	d0ed      	beq.n	2fb94 <log_fcb_walk_impl+0x36>
   2fbb8:	e7e3      	b.n	2fb82 <log_fcb_walk_impl+0x24>
            if (rc < 0) {
   2fbba:	2800      	cmp	r0, #0
   2fbbc:	dae1      	bge.n	2fb82 <log_fcb_walk_impl+0x24>
                return rc;
   2fbbe:	4607      	mov	r7, r0
   2fbc0:	e7df      	b.n	2fb82 <log_fcb_walk_impl+0x24>
    return 0;
   2fbc2:	4657      	mov	r7, sl
   2fbc4:	e7dd      	b.n	2fb82 <log_fcb_walk_impl+0x24>

0002fbc6 <log_fcb_walk_area>:
{
   2fbc6:	b508      	push	{r3, lr}
    return log_fcb_walk_impl(log, walk_func, log_offset, true);
   2fbc8:	2301      	movs	r3, #1
   2fbca:	f7ff ffc8 	bl	2fb5e <log_fcb_walk_impl>
}
   2fbce:	bd08      	pop	{r3, pc}

0002fbd0 <log_fcb_walk>:
{
   2fbd0:	b508      	push	{r3, lr}
    return log_fcb_walk_impl(log, walk_func, log_offset, false);
   2fbd2:	2300      	movs	r3, #0
   2fbd4:	f7ff ffc3 	bl	2fb5e <log_fcb_walk_impl>
}
   2fbd8:	bd08      	pop	{r3, pc}

0002fbda <log_fcb_write_mbuf>:
{
   2fbda:	b538      	push	{r3, r4, r5, lr}
   2fbdc:	4605      	mov	r5, r0
   2fbde:	460c      	mov	r4, r1
    while (om) {
   2fbe0:	b164      	cbz	r4, 2fbfc <log_fcb_write_mbuf+0x22>
        rc = flash_area_write(loc->fe_area, loc->fe_data_off, om->om_data,
   2fbe2:	88e3      	ldrh	r3, [r4, #6]
   2fbe4:	6822      	ldr	r2, [r4, #0]
   2fbe6:	68a9      	ldr	r1, [r5, #8]
   2fbe8:	6828      	ldr	r0, [r5, #0]
   2fbea:	f7e0 ff6e 	bl	10aca <flash_area_write>
        if (rc != 0) {
   2fbee:	b938      	cbnz	r0, 2fc00 <log_fcb_write_mbuf+0x26>
        loc->fe_data_off += om->om_len;
   2fbf0:	88e2      	ldrh	r2, [r4, #6]
   2fbf2:	68ab      	ldr	r3, [r5, #8]
   2fbf4:	4413      	add	r3, r2
   2fbf6:	60ab      	str	r3, [r5, #8]
        om = SLIST_NEXT(om, om_next);
   2fbf8:	68e4      	ldr	r4, [r4, #12]
   2fbfa:	e7f1      	b.n	2fbe0 <log_fcb_write_mbuf+0x6>
    return 0;
   2fbfc:	2000      	movs	r0, #0
}
   2fbfe:	bd38      	pop	{r3, r4, r5, pc}
            return SYS_EIO;
   2fc00:	f06f 0004 	mvn.w	r0, #4
   2fc04:	e7fb      	b.n	2fbfe <log_fcb_write_mbuf+0x24>

0002fc06 <log_fcb_hdr_body_bytes>:
{
   2fc06:	b508      	push	{r3, lr}
    assert((align & (align - 1)) == 0);
   2fc08:	1e42      	subs	r2, r0, #1
   2fc0a:	4002      	ands	r2, r0
   2fc0c:	d106      	bne.n	2fc1c <log_fcb_hdr_body_bytes+0x16>
    mod = hdr_len & (align - 1);
   2fc0e:	1e43      	subs	r3, r0, #1
   2fc10:	b25b      	sxtb	r3, r3
    if (mod == 0) {
   2fc12:	400b      	ands	r3, r1
   2fc14:	d000      	beq.n	2fc18 <log_fcb_hdr_body_bytes+0x12>
    return align - mod;
   2fc16:	1ac2      	subs	r2, r0, r3
}
   2fc18:	4610      	mov	r0, r2
   2fc1a:	bd08      	pop	{r3, pc}
    assert((align & (align - 1)) == 0);
   2fc1c:	f7dc fae4 	bl	c1e8 <hal_debugger_connected>
   2fc20:	b100      	cbz	r0, 2fc24 <log_fcb_hdr_body_bytes+0x1e>
   2fc22:	be01      	bkpt	0x0001
   2fc24:	2300      	movs	r3, #0
   2fc26:	461a      	mov	r2, r3
   2fc28:	4619      	mov	r1, r3
   2fc2a:	4618      	mov	r0, r3
   2fc2c:	f7dc ff90 	bl	cb50 <__assert_func>

0002fc30 <log_fcb_read>:
{
   2fc30:	b538      	push	{r3, r4, r5, lr}
   2fc32:	460d      	mov	r5, r1
   2fc34:	4619      	mov	r1, r3
   2fc36:	f8bd 4010 	ldrh.w	r4, [sp, #16]
    if (offset + len > loc->fe_data_len) {
   2fc3a:	4423      	add	r3, r4
   2fc3c:	89a8      	ldrh	r0, [r5, #12]
   2fc3e:	4283      	cmp	r3, r0
   2fc40:	dd01      	ble.n	2fc46 <log_fcb_read+0x16>
        len = loc->fe_data_len - offset;
   2fc42:	1a40      	subs	r0, r0, r1
   2fc44:	b284      	uxth	r4, r0
    rc = flash_area_read(loc->fe_area, loc->fe_data_off + offset, buf, len);
   2fc46:	68a8      	ldr	r0, [r5, #8]
   2fc48:	4623      	mov	r3, r4
   2fc4a:	4401      	add	r1, r0
   2fc4c:	6828      	ldr	r0, [r5, #0]
   2fc4e:	f7e0 ff29 	bl	10aa4 <flash_area_read>
    if (rc == 0) {
   2fc52:	b908      	cbnz	r0, 2fc58 <log_fcb_read+0x28>
        return len;
   2fc54:	4620      	mov	r0, r4
}
   2fc56:	bd38      	pop	{r3, r4, r5, pc}
        return 0;
   2fc58:	2000      	movs	r0, #0
   2fc5a:	e7fc      	b.n	2fc56 <log_fcb_read+0x26>

0002fc5c <log_fcb_copy_entry>:
 * @return 0 on success; non-zero on error
 */
static int
log_fcb_copy_entry(struct log *log, struct fcb_entry *entry,
                   struct fcb *dst_fcb)
{
   2fc5c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2fc5e:	b0cd      	sub	sp, #308	; 0x134
   2fc60:	4604      	mov	r4, r0
   2fc62:	460d      	mov	r5, r1
   2fc64:	4616      	mov	r6, r2
    uint16_t hdr_len;
    int dlen;
    int rc;
    struct fcb *fcb_tmp;

    rc = log_fcb_read(log, entry, &ueh, 0, LOG_BASE_ENTRY_HDR_SIZE);
   2fc66:	230f      	movs	r3, #15
   2fc68:	9300      	str	r3, [sp, #0]
   2fc6a:	2300      	movs	r3, #0
   2fc6c:	aa47      	add	r2, sp, #284	; 0x11c
   2fc6e:	f7ff ffdf 	bl	2fc30 <log_fcb_read>

    if (rc != LOG_BASE_ENTRY_HDR_SIZE) {
   2fc72:	280f      	cmp	r0, #15
   2fc74:	d001      	beq.n	2fc7a <log_fcb_copy_entry+0x1e>
        goto err;
    }

err:
    return (rc);
}
   2fc76:	b04d      	add	sp, #308	; 0x134
   2fc78:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdr_len = log_hdr_len(&ueh);
   2fc7a:	a847      	add	r0, sp, #284	; 0x11c
   2fc7c:	f7e1 f9e4 	bl	11048 <log_hdr_len>
    dlen = min(entry->fe_data_len, MYNEWT_VAL(LOG_FCB_COPY_MAX_ENTRY_LEN) +
   2fc80:	f500 7780 	add.w	r7, r0, #256	; 0x100
   2fc84:	89a8      	ldrh	r0, [r5, #12]
   2fc86:	4287      	cmp	r7, r0
   2fc88:	bfa8      	it	ge
   2fc8a:	4607      	movge	r7, r0
    rc = log_fcb_read(log, entry, data, 0, dlen);
   2fc8c:	b2bb      	uxth	r3, r7
   2fc8e:	9300      	str	r3, [sp, #0]
   2fc90:	2300      	movs	r3, #0
   2fc92:	aa02      	add	r2, sp, #8
   2fc94:	4629      	mov	r1, r5
   2fc96:	4620      	mov	r0, r4
   2fc98:	f7ff ffca 	bl	2fc30 <log_fcb_read>
    if (rc < 0) {
   2fc9c:	2800      	cmp	r0, #0
   2fc9e:	dbea      	blt.n	2fc76 <log_fcb_copy_entry+0x1a>
    fcb_tmp = &((struct fcb_log *)log->l_arg)->fl_fcb;
   2fca0:	68a5      	ldr	r5, [r4, #8]
    log->l_arg = dst_fcb;
   2fca2:	60a6      	str	r6, [r4, #8]
    rc = log_fcb_append(log, data, dlen);
   2fca4:	463a      	mov	r2, r7
   2fca6:	a902      	add	r1, sp, #8
   2fca8:	4620      	mov	r0, r4
   2fcaa:	f000 f986 	bl	2ffba <log_fcb_append>
    log->l_arg = fcb_tmp;
   2fcae:	60a5      	str	r5, [r4, #8]
    return (rc);
   2fcb0:	e7e1      	b.n	2fc76 <log_fcb_copy_entry+0x1a>

0002fcb2 <log_fcb_copy>:
 * @return 0 on success; non-zero on error
 */
static int
log_fcb_copy(struct log *log, struct fcb *src_fcb, struct fcb *dst_fcb,
             uint32_t offset)
{
   2fcb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2fcb6:	b084      	sub	sp, #16
   2fcb8:	4680      	mov	r8, r0
   2fcba:	460d      	mov	r5, r1
   2fcbc:	4617      	mov	r7, r2
   2fcbe:	461e      	mov	r6, r3
    struct fcb_entry entry;
    int rc;

    rc = 0;
    memset(&entry, 0, sizeof(entry));
   2fcc0:	2400      	movs	r4, #0
   2fcc2:	9400      	str	r4, [sp, #0]
   2fcc4:	9401      	str	r4, [sp, #4]
   2fcc6:	9402      	str	r4, [sp, #8]
   2fcc8:	9403      	str	r4, [sp, #12]
    while (!fcb_getnext(src_fcb, &entry)) {
   2fcca:	4669      	mov	r1, sp
   2fccc:	4628      	mov	r0, r5
   2fcce:	f7fe f87f 	bl	2ddd0 <fcb_getnext>
   2fcd2:	b950      	cbnz	r0, 2fcea <log_fcb_copy+0x38>
        if (entry.fe_elem_off < offset) {
   2fcd4:	9b01      	ldr	r3, [sp, #4]
   2fcd6:	42b3      	cmp	r3, r6
   2fcd8:	d3f7      	bcc.n	2fcca <log_fcb_copy+0x18>
            continue;
        }
        rc = log_fcb_copy_entry(log, &entry, dst_fcb);
   2fcda:	463a      	mov	r2, r7
   2fcdc:	4669      	mov	r1, sp
   2fcde:	4640      	mov	r0, r8
   2fce0:	f7ff ffbc 	bl	2fc5c <log_fcb_copy_entry>
        if (rc) {
   2fce4:	4604      	mov	r4, r0
   2fce6:	2800      	cmp	r0, #0
   2fce8:	d0ef      	beq.n	2fcca <log_fcb_copy+0x18>
            break;
        }
    }

    return (rc);
}
   2fcea:	4620      	mov	r0, r4
   2fcec:	b004      	add	sp, #16
   2fcee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0002fcf4 <log_fcb_rtr_erase>:
    struct fcb_entry entry;
    int rc;
    struct flash_area sector;

    rc = 0;
    if (!log) {
   2fcf4:	2800      	cmp	r0, #0
   2fcf6:	d04b      	beq.n	2fd90 <log_fcb_rtr_erase+0x9c>
{
   2fcf8:	b530      	push	{r4, r5, lr}
   2fcfa:	b095      	sub	sp, #84	; 0x54
   2fcfc:	4604      	mov	r4, r0
        rc = -1;
        goto err;
    }

    fcb_log = log->l_arg;
   2fcfe:	6885      	ldr	r5, [r0, #8]
    fcb = &fcb_log->fl_fcb;

    memset(&fcb_scratch, 0, sizeof(fcb_scratch));
   2fd00:	2230      	movs	r2, #48	; 0x30
   2fd02:	2100      	movs	r1, #0
   2fd04:	a808      	add	r0, sp, #32
   2fd06:	f7de fe73 	bl	e9f0 <memset>

    if (flash_area_open(FLASH_AREA_IMAGE_SCRATCH, &ptr)) {
   2fd0a:	a907      	add	r1, sp, #28
   2fd0c:	2003      	movs	r0, #3
   2fd0e:	f7e0 fe71 	bl	109f4 <flash_area_open>
   2fd12:	b118      	cbz	r0, 2fd1c <log_fcb_rtr_erase+0x28>
    rc = 0;
   2fd14:	2300      	movs	r3, #0
    /* Copy back from scratch */
    rc = log_fcb_copy(log, &fcb_scratch, fcb, 0);

err:
    return (rc);
}
   2fd16:	4618      	mov	r0, r3
   2fd18:	b015      	add	sp, #84	; 0x54
   2fd1a:	bd30      	pop	{r4, r5, pc}
    sector = *ptr;
   2fd1c:	9a07      	ldr	r2, [sp, #28]
   2fd1e:	466b      	mov	r3, sp
   2fd20:	ca07      	ldmia	r2, {r0, r1, r2}
   2fd22:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    fcb_scratch.f_sectors = &sector;
   2fd26:	930a      	str	r3, [sp, #40]	; 0x28
    fcb_scratch.f_sector_cnt = 1;
   2fd28:	2201      	movs	r2, #1
   2fd2a:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
    fcb_scratch.f_magic = 0x7EADBADF;
   2fd2e:	4a1a      	ldr	r2, [pc, #104]	; (2fd98 <log_fcb_rtr_erase+0xa4>)
   2fd30:	9208      	str	r2, [sp, #32]
    fcb_scratch.f_version = g_log_info.li_version;
   2fd32:	4a1a      	ldr	r2, [pc, #104]	; (2fd9c <log_fcb_rtr_erase+0xa8>)
   2fd34:	7912      	ldrb	r2, [r2, #4]
   2fd36:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
    flash_area_erase(&sector, 0, sector.fa_size);
   2fd3a:	9a02      	ldr	r2, [sp, #8]
   2fd3c:	2100      	movs	r1, #0
   2fd3e:	4618      	mov	r0, r3
   2fd40:	f7e0 fed6 	bl	10af0 <flash_area_erase>
    rc = fcb_init(&fcb_scratch);
   2fd44:	a808      	add	r0, sp, #32
   2fd46:	f7fd fda0 	bl	2d88a <fcb_init>
    if (rc) {
   2fd4a:	4603      	mov	r3, r0
   2fd4c:	2800      	cmp	r0, #0
   2fd4e:	d1e2      	bne.n	2fd16 <log_fcb_rtr_erase+0x22>
    rc = fcb_offset_last_n(fcb, fcb_log->fl_entries, &entry);
   2fd50:	aa03      	add	r2, sp, #12
   2fd52:	f895 1030 	ldrb.w	r1, [r5, #48]	; 0x30
   2fd56:	4628      	mov	r0, r5
   2fd58:	f7fd fe2b 	bl	2d9b2 <fcb_offset_last_n>
    if (rc) {
   2fd5c:	4603      	mov	r3, r0
   2fd5e:	2800      	cmp	r0, #0
   2fd60:	d1d9      	bne.n	2fd16 <log_fcb_rtr_erase+0x22>
    rc = log_fcb_copy(log, fcb, &fcb_scratch, entry.fe_elem_off);
   2fd62:	9b04      	ldr	r3, [sp, #16]
   2fd64:	aa08      	add	r2, sp, #32
   2fd66:	4629      	mov	r1, r5
   2fd68:	4620      	mov	r0, r4
   2fd6a:	f7ff ffa2 	bl	2fcb2 <log_fcb_copy>
    if (rc) {
   2fd6e:	4603      	mov	r3, r0
   2fd70:	2800      	cmp	r0, #0
   2fd72:	d1d0      	bne.n	2fd16 <log_fcb_rtr_erase+0x22>
    rc = log_fcb_flush(log);
   2fd74:	4620      	mov	r0, r4
   2fd76:	f7ff fe9d 	bl	2fab4 <log_fcb_flush>
    if (rc) {
   2fd7a:	4603      	mov	r3, r0
   2fd7c:	2800      	cmp	r0, #0
   2fd7e:	d1ca      	bne.n	2fd16 <log_fcb_rtr_erase+0x22>
    rc = log_fcb_copy(log, &fcb_scratch, fcb, 0);
   2fd80:	2300      	movs	r3, #0
   2fd82:	462a      	mov	r2, r5
   2fd84:	a908      	add	r1, sp, #32
   2fd86:	4620      	mov	r0, r4
   2fd88:	f7ff ff93 	bl	2fcb2 <log_fcb_copy>
   2fd8c:	4603      	mov	r3, r0
   2fd8e:	e7c2      	b.n	2fd16 <log_fcb_rtr_erase+0x22>
        rc = -1;
   2fd90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
   2fd94:	4618      	mov	r0, r3
   2fd96:	4770      	bx	lr
   2fd98:	7eadbadf 	.word	0x7eadbadf
   2fd9c:	2000354c 	.word	0x2000354c

0002fda0 <log_fcb_start_append>:
{
   2fda0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2fda4:	4605      	mov	r5, r0
   2fda6:	4688      	mov	r8, r1
   2fda8:	4617      	mov	r7, r2
    fcb_log = (struct fcb_log *)log->l_arg;
   2fdaa:	6886      	ldr	r6, [r0, #8]
    fcb = &fcb_log->fl_fcb;
   2fdac:	4634      	mov	r4, r6
   2fdae:	e00d      	b.n	2fdcc <log_fcb_start_append+0x2c>
            rc = log_fcb_rtr_erase(log);
   2fdb0:	4628      	mov	r0, r5
   2fdb2:	f7ff ff9f 	bl	2fcf4 <log_fcb_rtr_erase>
            if (rc) {
   2fdb6:	4603      	mov	r3, r0
   2fdb8:	b140      	cbz	r0, 2fdcc <log_fcb_start_append+0x2c>
}
   2fdba:	4618      	mov	r0, r3
   2fdbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = fcb_rotate(fcb);
   2fdc0:	4620      	mov	r0, r4
   2fdc2:	f7fe f81f 	bl	2de04 <fcb_rotate>
        if (rc) {
   2fdc6:	4603      	mov	r3, r0
   2fdc8:	2800      	cmp	r0, #0
   2fdca:	d1f6      	bne.n	2fdba <log_fcb_start_append+0x1a>
        rc = fcb_append(fcb, len, loc);
   2fdcc:	463a      	mov	r2, r7
   2fdce:	fa1f f188 	uxth.w	r1, r8
   2fdd2:	4620      	mov	r0, r4
   2fdd4:	f7fd fe5a 	bl	2da8c <fcb_append>
        if (rc == 0) {
   2fdd8:	4603      	mov	r3, r0
   2fdda:	2800      	cmp	r0, #0
   2fddc:	d0ed      	beq.n	2fdba <log_fcb_start_append+0x1a>
        if (rc != FCB_ERR_NOSPACE) {
   2fdde:	f110 0f04 	cmn.w	r0, #4
   2fde2:	d1ea      	bne.n	2fdba <log_fcb_start_append+0x1a>
        if (fcb_log->fl_entries) {
   2fde4:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
   2fde8:	2b00      	cmp	r3, #0
   2fdea:	d1e1      	bne.n	2fdb0 <log_fcb_start_append+0x10>
        if (log->l_rotate_notify_cb != NULL) {
   2fdec:	696b      	ldr	r3, [r5, #20]
   2fdee:	2b00      	cmp	r3, #0
   2fdf0:	d0e6      	beq.n	2fdc0 <log_fcb_start_append+0x20>
            fcb_append_to_scratch(fcb);
   2fdf2:	4620      	mov	r0, r4
   2fdf4:	f7fd fe2f 	bl	2da56 <fcb_append_to_scratch>
            log->l_rotate_notify_cb(log);
   2fdf8:	696b      	ldr	r3, [r5, #20]
   2fdfa:	4628      	mov	r0, r5
   2fdfc:	4798      	blx	r3
   2fdfe:	e7df      	b.n	2fdc0 <log_fcb_start_append+0x20>

0002fe00 <log_fcb_append_mbuf_body>:
{
   2fe00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2fe04:	b084      	sub	sp, #16
    fcb_log = (struct fcb_log *)log->l_arg;
   2fe06:	6887      	ldr	r7, [r0, #8]
    if (fcb->f_align != 1) {
   2fe08:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
   2fe0c:	2b01      	cmp	r3, #1
   2fe0e:	d13e      	bne.n	2fe8e <log_fcb_append_mbuf_body+0x8e>
   2fe10:	4616      	mov	r6, r2
   2fe12:	460d      	mov	r5, r1
   2fe14:	4604      	mov	r4, r0
    len = log_hdr_len(hdr) + os_mbuf_len(om);
   2fe16:	4608      	mov	r0, r1
   2fe18:	f7e1 f916 	bl	11048 <log_hdr_len>
   2fe1c:	4680      	mov	r8, r0
   2fe1e:	4630      	mov	r0, r6
   2fe20:	f7dd fb10 	bl	d444 <os_mbuf_len>
    rc = log_fcb_start_append(log, len, &loc);
   2fe24:	466a      	mov	r2, sp
   2fe26:	eb08 0100 	add.w	r1, r8, r0
   2fe2a:	4620      	mov	r0, r4
   2fe2c:	f7ff ffb8 	bl	2fda0 <log_fcb_start_append>
    if (rc != 0) {
   2fe30:	4603      	mov	r3, r0
   2fe32:	b118      	cbz	r0, 2fe3c <log_fcb_append_mbuf_body+0x3c>
}
   2fe34:	4618      	mov	r0, r3
   2fe36:	b004      	add	sp, #16
   2fe38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    rc = flash_area_write(loc.fe_area, loc.fe_data_off, hdr,
   2fe3c:	230f      	movs	r3, #15
   2fe3e:	462a      	mov	r2, r5
   2fe40:	9902      	ldr	r1, [sp, #8]
   2fe42:	9800      	ldr	r0, [sp, #0]
   2fe44:	f7e0 fe41 	bl	10aca <flash_area_write>
    if (rc != 0) {
   2fe48:	4603      	mov	r3, r0
   2fe4a:	2800      	cmp	r0, #0
   2fe4c:	d1f2      	bne.n	2fe34 <log_fcb_append_mbuf_body+0x34>
    loc.fe_data_off += LOG_BASE_ENTRY_HDR_SIZE;
   2fe4e:	9902      	ldr	r1, [sp, #8]
   2fe50:	310f      	adds	r1, #15
   2fe52:	9102      	str	r1, [sp, #8]
    if (hdr->ue_flags & LOG_FLAGS_IMG_HASH) {
   2fe54:	7bab      	ldrb	r3, [r5, #14]
   2fe56:	f013 0f10 	tst.w	r3, #16
   2fe5a:	d00b      	beq.n	2fe74 <log_fcb_append_mbuf_body+0x74>
        rc = flash_area_write(loc.fe_area, loc.fe_data_off, hdr->ue_imghash,
   2fe5c:	2304      	movs	r3, #4
   2fe5e:	f105 020f 	add.w	r2, r5, #15
   2fe62:	9800      	ldr	r0, [sp, #0]
   2fe64:	f7e0 fe31 	bl	10aca <flash_area_write>
        if (rc != 0) {
   2fe68:	4603      	mov	r3, r0
   2fe6a:	2800      	cmp	r0, #0
   2fe6c:	d1e2      	bne.n	2fe34 <log_fcb_append_mbuf_body+0x34>
        loc.fe_data_off += LOG_IMG_HASHLEN;
   2fe6e:	9b02      	ldr	r3, [sp, #8]
   2fe70:	3304      	adds	r3, #4
   2fe72:	9302      	str	r3, [sp, #8]
    rc = log_fcb_write_mbuf(&loc, om);
   2fe74:	4631      	mov	r1, r6
   2fe76:	4668      	mov	r0, sp
   2fe78:	f7ff feaf 	bl	2fbda <log_fcb_write_mbuf>
    if (rc != 0) {
   2fe7c:	4603      	mov	r3, r0
   2fe7e:	2800      	cmp	r0, #0
   2fe80:	d1d8      	bne.n	2fe34 <log_fcb_append_mbuf_body+0x34>
    rc = fcb_append_finish(fcb, &loc);
   2fe82:	4669      	mov	r1, sp
   2fe84:	4638      	mov	r0, r7
   2fe86:	f7fd fe7f 	bl	2db88 <fcb_append_finish>
   2fe8a:	4603      	mov	r3, r0
   2fe8c:	e7d2      	b.n	2fe34 <log_fcb_append_mbuf_body+0x34>
        return SYS_ENOTSUP;
   2fe8e:	f06f 030b 	mvn.w	r3, #11
   2fe92:	e7cf      	b.n	2fe34 <log_fcb_append_mbuf_body+0x34>

0002fe94 <log_fcb_append_mbuf>:
{
   2fe94:	b570      	push	{r4, r5, r6, lr}
   2fe96:	b086      	sub	sp, #24
   2fe98:	4606      	mov	r6, r0
   2fe9a:	460c      	mov	r4, r1
    mlen = os_mbuf_len(om);
   2fe9c:	4608      	mov	r0, r1
   2fe9e:	f7dd fad1 	bl	d444 <os_mbuf_len>
    if (mlen < LOG_BASE_ENTRY_HDR_SIZE) {
   2fea2:	280e      	cmp	r0, #14
   2fea4:	d928      	bls.n	2fef8 <log_fcb_append_mbuf+0x64>
    om = os_mbuf_pullup(om, LOG_BASE_ENTRY_HDR_SIZE);
   2fea6:	210f      	movs	r1, #15
   2fea8:	4620      	mov	r0, r4
   2feaa:	f7dd fd1a 	bl	d8e2 <os_mbuf_pullup>
   2feae:	4604      	mov	r4, r0
    hdr_len = log_hdr_len((struct log_entry_hdr *)om->om_data);
   2feb0:	6800      	ldr	r0, [r0, #0]
   2feb2:	f7e1 f8c9 	bl	11048 <log_hdr_len>
   2feb6:	4605      	mov	r5, r0
    om = os_mbuf_pullup(om, hdr_len);
   2feb8:	4601      	mov	r1, r0
   2feba:	4620      	mov	r0, r4
   2febc:	f7dd fd11 	bl	d8e2 <os_mbuf_pullup>
   2fec0:	4604      	mov	r4, r0
    memcpy(&hdr, om->om_data, hdr_len);
   2fec2:	462a      	mov	r2, r5
   2fec4:	6801      	ldr	r1, [r0, #0]
   2fec6:	a801      	add	r0, sp, #4
   2fec8:	f7de fd6a 	bl	e9a0 <memcpy>
    os_mbuf_adj(om, hdr_len);
   2fecc:	4629      	mov	r1, r5
   2fece:	4620      	mov	r0, r4
   2fed0:	f7dd fb7e 	bl	d5d0 <os_mbuf_adj>
    rc = log_fcb_append_mbuf_body(log, &hdr, om);
   2fed4:	4622      	mov	r2, r4
   2fed6:	a901      	add	r1, sp, #4
   2fed8:	4630      	mov	r0, r6
   2feda:	f7ff ff91 	bl	2fe00 <log_fcb_append_mbuf_body>
   2fede:	4606      	mov	r6, r0
    os_mbuf_prepend(om, hdr_len);
   2fee0:	4629      	mov	r1, r5
   2fee2:	4620      	mov	r0, r4
   2fee4:	f7dd fc03 	bl	d6ee <os_mbuf_prepend>
    memcpy(om->om_data, &hdr, hdr_len);
   2fee8:	462a      	mov	r2, r5
   2feea:	a901      	add	r1, sp, #4
   2feec:	6820      	ldr	r0, [r4, #0]
   2feee:	f7de fd57 	bl	e9a0 <memcpy>
}
   2fef2:	4630      	mov	r0, r6
   2fef4:	b006      	add	sp, #24
   2fef6:	bd70      	pop	{r4, r5, r6, pc}
        return SYS_ENOMEM;
   2fef8:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   2fefc:	e7f9      	b.n	2fef2 <log_fcb_append_mbuf+0x5e>

0002fefe <log_fcb_append_body>:
{
   2fefe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2ff02:	b08c      	sub	sp, #48	; 0x30
    fcb_log = (struct fcb_log *)log->l_arg;
   2ff04:	f8d0 8008 	ldr.w	r8, [r0, #8]
    if (fcb->f_align > LOG_FCB_MAX_ALIGN) {
   2ff08:	f898 602e 	ldrb.w	r6, [r8, #46]	; 0x2e
   2ff0c:	2e08      	cmp	r6, #8
   2ff0e:	d851      	bhi.n	2ffb4 <log_fcb_append_body+0xb6>
   2ff10:	461d      	mov	r5, r3
   2ff12:	4617      	mov	r7, r2
   2ff14:	460c      	mov	r4, r1
   2ff16:	4606      	mov	r6, r0
    hdr_len = log_hdr_len(hdr);
   2ff18:	4608      	mov	r0, r1
   2ff1a:	f7e1 f895 	bl	11048 <log_hdr_len>
   2ff1e:	4682      	mov	sl, r0
    rc = log_fcb_start_append(log, hdr_len + body_len, &loc);
   2ff20:	eb00 0905 	add.w	r9, r0, r5
   2ff24:	aa01      	add	r2, sp, #4
   2ff26:	4649      	mov	r1, r9
   2ff28:	4630      	mov	r0, r6
   2ff2a:	f7ff ff39 	bl	2fda0 <log_fcb_start_append>
    if (rc != 0) {
   2ff2e:	4603      	mov	r3, r0
   2ff30:	b118      	cbz	r0, 2ff3a <log_fcb_append_body+0x3c>
}
   2ff32:	4618      	mov	r0, r3
   2ff34:	b00c      	add	sp, #48	; 0x30
   2ff36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hdr_alignment = log_fcb_hdr_body_bytes(fcb->f_align, hdr_len);
   2ff3a:	fa5f f18a 	uxtb.w	r1, sl
   2ff3e:	f898 002e 	ldrb.w	r0, [r8, #46]	; 0x2e
   2ff42:	f7ff fe60 	bl	2fc06 <log_fcb_hdr_body_bytes>
   2ff46:	4606      	mov	r6, r0
    if (hdr_alignment > body_len) {
   2ff48:	4285      	cmp	r5, r0
   2ff4a:	db01      	blt.n	2ff50 <log_fcb_append_body+0x52>
        chunk_sz = hdr_len + hdr_alignment;
   2ff4c:	eb0a 0900 	add.w	r9, sl, r0
    memcpy(buf, hdr, LOG_BASE_ENTRY_HDR_SIZE);
   2ff50:	ab05      	add	r3, sp, #20
   2ff52:	6820      	ldr	r0, [r4, #0]
   2ff54:	6861      	ldr	r1, [r4, #4]
   2ff56:	68a2      	ldr	r2, [r4, #8]
   2ff58:	c307      	stmia	r3!, {r0, r1, r2}
   2ff5a:	89a1      	ldrh	r1, [r4, #12]
   2ff5c:	7ba2      	ldrb	r2, [r4, #14]
   2ff5e:	8019      	strh	r1, [r3, #0]
   2ff60:	709a      	strb	r2, [r3, #2]
    if (hdr->ue_flags & LOG_FLAGS_IMG_HASH) {
   2ff62:	f012 0f10 	tst.w	r2, #16
   2ff66:	d003      	beq.n	2ff70 <log_fcb_append_body+0x72>
        memcpy(buf + LOG_BASE_ENTRY_HDR_SIZE, hdr->ue_imghash, LOG_IMG_HASHLEN);
   2ff68:	f8d4 300f 	ldr.w	r3, [r4, #15]
   2ff6c:	f8cd 3023 	str.w	r3, [sp, #35]	; 0x23
    memcpy(buf + hdr_len, u8p, hdr_alignment);
   2ff70:	4632      	mov	r2, r6
   2ff72:	4639      	mov	r1, r7
   2ff74:	ab05      	add	r3, sp, #20
   2ff76:	eb03 000a 	add.w	r0, r3, sl
   2ff7a:	f7de fd11 	bl	e9a0 <memcpy>
    rc = flash_area_write(loc.fe_area, loc.fe_data_off, buf, chunk_sz);
   2ff7e:	464b      	mov	r3, r9
   2ff80:	aa05      	add	r2, sp, #20
   2ff82:	9903      	ldr	r1, [sp, #12]
   2ff84:	9801      	ldr	r0, [sp, #4]
   2ff86:	f7e0 fda0 	bl	10aca <flash_area_write>
    if (rc != 0) {
   2ff8a:	4603      	mov	r3, r0
   2ff8c:	2800      	cmp	r0, #0
   2ff8e:	d1d0      	bne.n	2ff32 <log_fcb_append_body+0x34>
    u8p += hdr_alignment;
   2ff90:	19ba      	adds	r2, r7, r6
    body_len -= hdr_alignment;
   2ff92:	1bab      	subs	r3, r5, r6
    if (body_len > 0) {
   2ff94:	2b00      	cmp	r3, #0
   2ff96:	dd07      	ble.n	2ffa8 <log_fcb_append_body+0xaa>
        rc = flash_area_write(loc.fe_area, loc.fe_data_off + chunk_sz, u8p,
   2ff98:	9903      	ldr	r1, [sp, #12]
   2ff9a:	4449      	add	r1, r9
   2ff9c:	9801      	ldr	r0, [sp, #4]
   2ff9e:	f7e0 fd94 	bl	10aca <flash_area_write>
        if (rc != 0) {
   2ffa2:	4603      	mov	r3, r0
   2ffa4:	2800      	cmp	r0, #0
   2ffa6:	d1c4      	bne.n	2ff32 <log_fcb_append_body+0x34>
    rc = fcb_append_finish(fcb, &loc);
   2ffa8:	a901      	add	r1, sp, #4
   2ffaa:	4640      	mov	r0, r8
   2ffac:	f7fd fdec 	bl	2db88 <fcb_append_finish>
   2ffb0:	4603      	mov	r3, r0
   2ffb2:	e7be      	b.n	2ff32 <log_fcb_append_body+0x34>
        return SYS_ENOTSUP;
   2ffb4:	f06f 030b 	mvn.w	r3, #11
   2ffb8:	e7bb      	b.n	2ff32 <log_fcb_append_body+0x34>

0002ffba <log_fcb_append>:
{
   2ffba:	b570      	push	{r4, r5, r6, lr}
   2ffbc:	4605      	mov	r5, r0
   2ffbe:	460c      	mov	r4, r1
   2ffc0:	4616      	mov	r6, r2
    hdr_len = log_hdr_len(buf);
   2ffc2:	4608      	mov	r0, r1
   2ffc4:	f7e1 f840 	bl	11048 <log_hdr_len>
    return log_fcb_append_body(log, buf, (uint8_t *)buf + hdr_len,
   2ffc8:	1a33      	subs	r3, r6, r0
   2ffca:	1822      	adds	r2, r4, r0
   2ffcc:	4621      	mov	r1, r4
   2ffce:	4628      	mov	r0, r5
   2ffd0:	f7ff ff95 	bl	2fefe <log_fcb_append_body>
}
   2ffd4:	bd70      	pop	{r4, r5, r6, pc}

0002ffd6 <log_fcb_read_mbuf>:
{
   2ffd6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2ffda:	b0a1      	sub	sp, #132	; 0x84
   2ffdc:	460f      	mov	r7, r1
   2ffde:	4690      	mov	r8, r2
   2ffe0:	461e      	mov	r6, r3
   2ffe2:	f8bd 90a0 	ldrh.w	r9, [sp, #160]	; 0xa0
    if (offset + len > loc->fe_data_len) {
   2ffe6:	eb03 0209 	add.w	r2, r3, r9
   2ffea:	898b      	ldrh	r3, [r1, #12]
   2ffec:	429a      	cmp	r2, r3
   2ffee:	dd03      	ble.n	2fff8 <log_fcb_read_mbuf+0x22>
        len = loc->fe_data_len - offset;
   2fff0:	eba3 0906 	sub.w	r9, r3, r6
   2fff4:	fa1f f989 	uxth.w	r9, r9
    rem_len = len;
   2fff8:	464d      	mov	r5, r9
    while (rem_len > 0) {
   2fffa:	b1bd      	cbz	r5, 3002c <log_fcb_read_mbuf+0x56>
        read_len = min(rem_len, sizeof(data));
   2fffc:	462c      	mov	r4, r5
   2fffe:	2d80      	cmp	r5, #128	; 0x80
   30000:	bf28      	it	cs
   30002:	2480      	movcs	r4, #128	; 0x80
   30004:	b2a4      	uxth	r4, r4
        rc = flash_area_read(loc->fe_area, loc->fe_data_off + offset, data,
   30006:	68b9      	ldr	r1, [r7, #8]
   30008:	4623      	mov	r3, r4
   3000a:	466a      	mov	r2, sp
   3000c:	4431      	add	r1, r6
   3000e:	6838      	ldr	r0, [r7, #0]
   30010:	f7e0 fd48 	bl	10aa4 <flash_area_read>
        if (rc) {
   30014:	b950      	cbnz	r0, 3002c <log_fcb_read_mbuf+0x56>
        rc = os_mbuf_append(om, data, read_len);
   30016:	4622      	mov	r2, r4
   30018:	4669      	mov	r1, sp
   3001a:	4640      	mov	r0, r8
   3001c:	f7dd fa1c 	bl	d458 <os_mbuf_append>
        if (rc) {
   30020:	b920      	cbnz	r0, 3002c <log_fcb_read_mbuf+0x56>
        rem_len -= read_len;
   30022:	1b2d      	subs	r5, r5, r4
   30024:	b2ad      	uxth	r5, r5
        offset += read_len;
   30026:	4434      	add	r4, r6
   30028:	b2a6      	uxth	r6, r4
   3002a:	e7e6      	b.n	2fffa <log_fcb_read_mbuf+0x24>
}
   3002c:	eba9 0005 	sub.w	r0, r9, r5
   30030:	b021      	add	sp, #132	; 0x84
   30032:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00030036 <crc8_init>:

uint8_t
crc8_init(void)
{
    return 0xff;
}
   30036:	20ff      	movs	r0, #255	; 0xff
   30038:	4770      	bx	lr
	...

0003003c <crc8_calc>:

uint8_t
crc8_calc(uint8_t val, void *buf, int cnt)
{
   3003c:	b430      	push	{r4, r5}
	int i;
	uint8_t *p = buf;

	for (i = 0; i < cnt; i++) {
   3003e:	2400      	movs	r4, #0
   30040:	e00d      	b.n	3005e <crc8_calc+0x22>
		val ^= p[i];
   30042:	5d0b      	ldrb	r3, [r1, r4]
   30044:	4043      	eors	r3, r0
		val = (val << 4) ^ crc8_small_table[val >> 4];
   30046:	0918      	lsrs	r0, r3, #4
   30048:	4d07      	ldr	r5, [pc, #28]	; (30068 <crc8_calc+0x2c>)
   3004a:	5628      	ldrsb	r0, [r5, r0]
   3004c:	ea80 1003 	eor.w	r0, r0, r3, lsl #4
   30050:	b2c0      	uxtb	r0, r0
		val = (val << 4) ^ crc8_small_table[val >> 4];
   30052:	0903      	lsrs	r3, r0, #4
   30054:	56eb      	ldrsb	r3, [r5, r3]
   30056:	ea83 1000 	eor.w	r0, r3, r0, lsl #4
   3005a:	b2c0      	uxtb	r0, r0
	for (i = 0; i < cnt; i++) {
   3005c:	3401      	adds	r4, #1
   3005e:	4294      	cmp	r4, r2
   30060:	dbef      	blt.n	30042 <crc8_calc+0x6>
	}
	return val;
}
   30062:	bc30      	pop	{r4, r5}
   30064:	4770      	bx	lr
   30066:	bf00      	nop
   30068:	00032d24 	.word	0x00032d24

0003006c <cbor_cnt_writer>:
};

static inline int
cbor_cnt_writer(struct cbor_encoder_writer *arg, const char *data, int len) {
    struct CborCntWriter *cb = (struct CborCntWriter *) arg;
    cb->enc.bytes_written += len;
   3006c:	6843      	ldr	r3, [r0, #4]
   3006e:	441a      	add	r2, r3
   30070:	6042      	str	r2, [r0, #4]
    return CborNoError;
}
   30072:	2000      	movs	r0, #0
   30074:	4770      	bx	lr
	...

00030078 <log_mgmt_logs_list>:
/**
 * Command handler: log list
 */
static int
log_mgmt_logs_list(struct mgmt_ctxt *ctxt)
{
   30078:	b5f0      	push	{r4, r5, r6, r7, lr}
   3007a:	b087      	sub	sp, #28
   3007c:	4607      	mov	r7, r0
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   3007e:	2202      	movs	r2, #2
   30080:	4921      	ldr	r1, [pc, #132]	; (30108 <log_mgmt_logs_list+0x90>)
   30082:	f7fc fbd8 	bl	2c836 <cbor_encode_text_string>
   30086:	4606      	mov	r6, r0
    int log_idx;
    int rc;

    err = 0;
    err |= cbor_encode_text_stringz(&ctxt->encoder, "rc");
    err |= cbor_encode_int(&ctxt->encoder, LOG_MGMT_ERR_EOK);
   30088:	2200      	movs	r2, #0
   3008a:	2300      	movs	r3, #0
   3008c:	4638      	mov	r0, r7
   3008e:	f7fc fb51 	bl	2c734 <cbor_encode_int>
   30092:	4306      	orrs	r6, r0
   30094:	2208      	movs	r2, #8
   30096:	491d      	ldr	r1, [pc, #116]	; (3010c <log_mgmt_logs_list+0x94>)
   30098:	4638      	mov	r0, r7
   3009a:	f7fc fbcc 	bl	2c836 <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&ctxt->encoder, "log_list");
   3009e:	4306      	orrs	r6, r0
    err |= cbor_encoder_create_array(&ctxt->encoder, &log_list,
   300a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   300a4:	4669      	mov	r1, sp
   300a6:	4638      	mov	r0, r7
   300a8:	f7fc fbcd 	bl	2c846 <cbor_encoder_create_array>
   300ac:	4306      	orrs	r6, r0
                                     CborIndefiniteLength);

    for (log_idx = 0; ; log_idx++) {
   300ae:	2500      	movs	r5, #0
   300b0:	e011      	b.n	300d6 <log_mgmt_logs_list+0x5e>
        rc = log_mgmt_impl_get_log(log_idx, &log);
        if (rc == LOG_MGMT_ERR_ENOENT) {
            break;
        }
        if (rc != 0) {
            cbor_encoder_close_container(&ctxt->encoder, &log_list);
   300b2:	4669      	mov	r1, sp
   300b4:	4638      	mov	r0, r7
   300b6:	f7fc fbe2 	bl	2c87e <cbor_encoder_close_container>
    if (err != 0) {
        return LOG_MGMT_ERR_ENOMEM;
    }

    return 0;
}
   300ba:	4620      	mov	r0, r4
   300bc:	b007      	add	sp, #28
   300be:	bdf0      	pop	{r4, r5, r6, r7, pc}
            err |= cbor_encode_text_stringz(&log_list, log.name);
   300c0:	9c04      	ldr	r4, [sp, #16]
   300c2:	4620      	mov	r0, r4
   300c4:	f7de fd0a 	bl	eadc <strlen>
   300c8:	4602      	mov	r2, r0
   300ca:	4621      	mov	r1, r4
   300cc:	4668      	mov	r0, sp
   300ce:	f7fc fbb2 	bl	2c836 <cbor_encode_text_string>
   300d2:	4306      	orrs	r6, r0
    for (log_idx = 0; ; log_idx++) {
   300d4:	3501      	adds	r5, #1
        rc = log_mgmt_impl_get_log(log_idx, &log);
   300d6:	a904      	add	r1, sp, #16
   300d8:	4628      	mov	r0, r5
   300da:	f7e3 fc69 	bl	139b0 <log_mgmt_impl_get_log>
   300de:	4604      	mov	r4, r0
        if (rc == LOG_MGMT_ERR_ENOENT) {
   300e0:	2805      	cmp	r0, #5
   300e2:	d005      	beq.n	300f0 <log_mgmt_logs_list+0x78>
        if (rc != 0) {
   300e4:	2800      	cmp	r0, #0
   300e6:	d1e4      	bne.n	300b2 <log_mgmt_logs_list+0x3a>
        if (log.type != LOG_MGMT_TYPE_STREAM) {
   300e8:	9b05      	ldr	r3, [sp, #20]
   300ea:	2b00      	cmp	r3, #0
   300ec:	d0f2      	beq.n	300d4 <log_mgmt_logs_list+0x5c>
   300ee:	e7e7      	b.n	300c0 <log_mgmt_logs_list+0x48>
    err |= cbor_encoder_close_container(&ctxt->encoder, &log_list);
   300f0:	4669      	mov	r1, sp
   300f2:	4638      	mov	r0, r7
   300f4:	f7fc fbc3 	bl	2c87e <cbor_encoder_close_container>
    if (err != 0) {
   300f8:	ea56 0300 	orrs.w	r3, r6, r0
   300fc:	d101      	bne.n	30102 <log_mgmt_logs_list+0x8a>
    return 0;
   300fe:	2400      	movs	r4, #0
   30100:	e7db      	b.n	300ba <log_mgmt_logs_list+0x42>
        return LOG_MGMT_ERR_ENOMEM;
   30102:	2402      	movs	r4, #2
   30104:	e7d9      	b.n	300ba <log_mgmt_logs_list+0x42>
   30106:	bf00      	nop
   30108:	000318e4 	.word	0x000318e4
   3010c:	00032dac 	.word	0x00032dac

00030110 <log_mgmt_level_list>:
/**
 * Command handler: log level_list
 */
static int
log_mgmt_level_list(struct mgmt_ctxt *ctxt)
{
   30110:	b5f0      	push	{r4, r5, r6, r7, lr}
   30112:	b087      	sub	sp, #28
   30114:	4607      	mov	r7, r0
   30116:	2202      	movs	r2, #2
   30118:	4923      	ldr	r1, [pc, #140]	; (301a8 <log_mgmt_level_list+0x98>)
   3011a:	f7fc fb8c 	bl	2c836 <cbor_encode_text_string>
   3011e:	4606      	mov	r6, r0
    int level;
    int rc;

    err = 0;
    err |= cbor_encode_text_stringz(&ctxt->encoder, "rc");
    err |= cbor_encode_int(&ctxt->encoder, LOG_MGMT_ERR_EOK);
   30120:	2200      	movs	r2, #0
   30122:	2300      	movs	r3, #0
   30124:	4638      	mov	r0, r7
   30126:	f7fc fb05 	bl	2c734 <cbor_encode_int>
   3012a:	4306      	orrs	r6, r0
   3012c:	2209      	movs	r2, #9
   3012e:	491f      	ldr	r1, [pc, #124]	; (301ac <log_mgmt_level_list+0x9c>)
   30130:	4638      	mov	r0, r7
   30132:	f7fc fb80 	bl	2c836 <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&ctxt->encoder, "level_map");
   30136:	4306      	orrs	r6, r0
    err |= cbor_encoder_create_map(&ctxt->encoder, &level_map,
   30138:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3013c:	a901      	add	r1, sp, #4
   3013e:	4638      	mov	r0, r7
   30140:	f7fc fb86 	bl	2c850 <cbor_encoder_create_map>
   30144:	4306      	orrs	r6, r0
                                   CborIndefiniteLength);

    for (level = 0; ; level++) {
   30146:	2400      	movs	r4, #0
   30148:	e007      	b.n	3015a <log_mgmt_level_list+0x4a>
        rc = log_mgmt_impl_get_level(level, &level_name);
        if (rc == LOG_MGMT_ERR_ENOENT) {
            break;
        }
        if (rc != 0) {
            cbor_encoder_close_container(&ctxt->encoder, &level_map);
   3014a:	a901      	add	r1, sp, #4
   3014c:	4638      	mov	r0, r7
   3014e:	f7fc fb96 	bl	2c87e <cbor_encoder_close_container>
    if (err != 0) {
        return LOG_MGMT_ERR_ENOMEM;
    }

    return 0;
}
   30152:	4628      	mov	r0, r5
   30154:	b007      	add	sp, #28
   30156:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (level = 0; ; level++) {
   30158:	3401      	adds	r4, #1
        rc = log_mgmt_impl_get_level(level, &level_name);
   3015a:	a905      	add	r1, sp, #20
   3015c:	4620      	mov	r0, r4
   3015e:	f7e3 fc49 	bl	139f4 <log_mgmt_impl_get_level>
   30162:	4605      	mov	r5, r0
        if (rc == LOG_MGMT_ERR_ENOENT) {
   30164:	2805      	cmp	r0, #5
   30166:	d014      	beq.n	30192 <log_mgmt_level_list+0x82>
        if (rc != 0) {
   30168:	2800      	cmp	r0, #0
   3016a:	d1ee      	bne.n	3014a <log_mgmt_level_list+0x3a>
        if (level_name != NULL) {
   3016c:	9d05      	ldr	r5, [sp, #20]
   3016e:	2d00      	cmp	r5, #0
   30170:	d0f2      	beq.n	30158 <log_mgmt_level_list+0x48>
   30172:	4628      	mov	r0, r5
   30174:	f7de fcb2 	bl	eadc <strlen>
   30178:	4602      	mov	r2, r0
   3017a:	4629      	mov	r1, r5
   3017c:	a801      	add	r0, sp, #4
   3017e:	f7fc fb5a 	bl	2c836 <cbor_encode_text_string>
            err |= cbor_encode_text_stringz(&level_map, level_name);
   30182:	4306      	orrs	r6, r0
            err |= cbor_encode_uint(&level_map, level);
   30184:	4622      	mov	r2, r4
   30186:	17e3      	asrs	r3, r4, #31
   30188:	a801      	add	r0, sp, #4
   3018a:	f7fc fa9e 	bl	2c6ca <cbor_encode_uint>
   3018e:	4306      	orrs	r6, r0
   30190:	e7e2      	b.n	30158 <log_mgmt_level_list+0x48>
    err |= cbor_encoder_close_container(&ctxt->encoder, &level_map);
   30192:	a901      	add	r1, sp, #4
   30194:	4638      	mov	r0, r7
   30196:	f7fc fb72 	bl	2c87e <cbor_encoder_close_container>
    if (err != 0) {
   3019a:	ea56 0300 	orrs.w	r3, r6, r0
   3019e:	d101      	bne.n	301a4 <log_mgmt_level_list+0x94>
    return 0;
   301a0:	2500      	movs	r5, #0
   301a2:	e7d6      	b.n	30152 <log_mgmt_level_list+0x42>
        return LOG_MGMT_ERR_ENOMEM;
   301a4:	2502      	movs	r5, #2
   301a6:	e7d4      	b.n	30152 <log_mgmt_level_list+0x42>
   301a8:	000318e4 	.word	0x000318e4
   301ac:	00032da0 	.word	0x00032da0

000301b0 <log_mgmt_module_list>:
{
   301b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   301b2:	b087      	sub	sp, #28
   301b4:	4607      	mov	r7, r0
   301b6:	2202      	movs	r2, #2
   301b8:	4923      	ldr	r1, [pc, #140]	; (30248 <log_mgmt_module_list+0x98>)
   301ba:	f7fc fb3c 	bl	2c836 <cbor_encode_text_string>
   301be:	4606      	mov	r6, r0
    err |= cbor_encode_int(&ctxt->encoder, LOG_MGMT_ERR_EOK);
   301c0:	2200      	movs	r2, #0
   301c2:	2300      	movs	r3, #0
   301c4:	4638      	mov	r0, r7
   301c6:	f7fc fab5 	bl	2c734 <cbor_encode_int>
   301ca:	4306      	orrs	r6, r0
   301cc:	220a      	movs	r2, #10
   301ce:	491f      	ldr	r1, [pc, #124]	; (3024c <log_mgmt_module_list+0x9c>)
   301d0:	4638      	mov	r0, r7
   301d2:	f7fc fb30 	bl	2c836 <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&ctxt->encoder, "module_map");
   301d6:	4306      	orrs	r6, r0
    err |= cbor_encoder_create_map(&ctxt->encoder, &modules,
   301d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   301dc:	a901      	add	r1, sp, #4
   301de:	4638      	mov	r0, r7
   301e0:	f7fc fb36 	bl	2c850 <cbor_encoder_create_map>
   301e4:	4306      	orrs	r6, r0
    for (module = 0; ; module++) {
   301e6:	2400      	movs	r4, #0
   301e8:	e007      	b.n	301fa <log_mgmt_module_list+0x4a>
            cbor_encoder_close_container(&ctxt->encoder, &modules);
   301ea:	a901      	add	r1, sp, #4
   301ec:	4638      	mov	r0, r7
   301ee:	f7fc fb46 	bl	2c87e <cbor_encoder_close_container>
}
   301f2:	4628      	mov	r0, r5
   301f4:	b007      	add	sp, #28
   301f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (module = 0; ; module++) {
   301f8:	3401      	adds	r4, #1
        rc = log_mgmt_impl_get_module(module, &module_name);
   301fa:	a905      	add	r1, sp, #20
   301fc:	4620      	mov	r0, r4
   301fe:	f7e3 fbee 	bl	139de <log_mgmt_impl_get_module>
   30202:	4605      	mov	r5, r0
        if (rc == LOG_MGMT_ERR_ENOENT) {
   30204:	2805      	cmp	r0, #5
   30206:	d014      	beq.n	30232 <log_mgmt_module_list+0x82>
        if (rc != 0) {
   30208:	2800      	cmp	r0, #0
   3020a:	d1ee      	bne.n	301ea <log_mgmt_module_list+0x3a>
        if (module_name != NULL) {
   3020c:	9d05      	ldr	r5, [sp, #20]
   3020e:	2d00      	cmp	r5, #0
   30210:	d0f2      	beq.n	301f8 <log_mgmt_module_list+0x48>
   30212:	4628      	mov	r0, r5
   30214:	f7de fc62 	bl	eadc <strlen>
   30218:	4602      	mov	r2, r0
   3021a:	4629      	mov	r1, r5
   3021c:	a801      	add	r0, sp, #4
   3021e:	f7fc fb0a 	bl	2c836 <cbor_encode_text_string>
            err |= cbor_encode_text_stringz(&modules, module_name);
   30222:	4306      	orrs	r6, r0
            err |= cbor_encode_uint(&modules, module);
   30224:	4622      	mov	r2, r4
   30226:	17e3      	asrs	r3, r4, #31
   30228:	a801      	add	r0, sp, #4
   3022a:	f7fc fa4e 	bl	2c6ca <cbor_encode_uint>
   3022e:	4306      	orrs	r6, r0
   30230:	e7e2      	b.n	301f8 <log_mgmt_module_list+0x48>
    err |= cbor_encoder_close_container(&ctxt->encoder, &modules);
   30232:	a901      	add	r1, sp, #4
   30234:	4638      	mov	r0, r7
   30236:	f7fc fb22 	bl	2c87e <cbor_encoder_close_container>
    if (err != 0) {
   3023a:	ea56 0300 	orrs.w	r3, r6, r0
   3023e:	d101      	bne.n	30244 <log_mgmt_module_list+0x94>
    return 0;
   30240:	2500      	movs	r5, #0
   30242:	e7d6      	b.n	301f2 <log_mgmt_module_list+0x42>
        return LOG_MGMT_ERR_ENOMEM;
   30244:	2502      	movs	r5, #2
   30246:	e7d4      	b.n	301f2 <log_mgmt_module_list+0x42>
   30248:	000318e4 	.word	0x000318e4
   3024c:	00032db8 	.word	0x00032db8

00030250 <log_mgmt_clear>:
/**
 * Command handler: log clear
 */
static int
log_mgmt_clear(struct mgmt_ctxt *ctxt)
{
   30250:	b570      	push	{r4, r5, r6, lr}
   30252:	b0aa      	sub	sp, #168	; 0xa8
   30254:	4606      	mov	r6, r0
    struct log_mgmt_log log;
    char name[LOG_MGMT_NAME_LEN] = {0};
   30256:	ad18      	add	r5, sp, #96	; 0x60
   30258:	2440      	movs	r4, #64	; 0x40
   3025a:	4622      	mov	r2, r4
   3025c:	2100      	movs	r1, #0
   3025e:	4628      	mov	r0, r5
   30260:	f7de fbc6 	bl	e9f0 <memset>
    int name_len;
    int log_idx;
    int rc;

    const struct cbor_attr_t attr[] = {
   30264:	225c      	movs	r2, #92	; 0x5c
   30266:	2100      	movs	r1, #0
   30268:	a801      	add	r0, sp, #4
   3026a:	f7de fbc1 	bl	e9f0 <memset>
   3026e:	4b1b      	ldr	r3, [pc, #108]	; (302dc <log_mgmt_clear+0x8c>)
   30270:	9300      	str	r3, [sp, #0]
   30272:	2304      	movs	r3, #4
   30274:	f88d 3004 	strb.w	r3, [sp, #4]
   30278:	9502      	str	r5, [sp, #8]
   3027a:	940a      	str	r4, [sp, #40]	; 0x28
            .attribute = NULL
        },
    };

    name[0] = '\0';
    rc = cbor_read_object(&ctxt->it, attr);
   3027c:	4669      	mov	r1, sp
   3027e:	f106 001c 	add.w	r0, r6, #28
   30282:	f7e2 fc90 	bl	12ba6 <cbor_read_object>
    if (rc != 0) {
   30286:	b9f8      	cbnz	r0, 302c8 <log_mgmt_clear+0x78>
   30288:	4606      	mov	r6, r0
        return LOG_MGMT_ERR_EINVAL;
    }
    name_len = strlen(name);
   3028a:	a818      	add	r0, sp, #96	; 0x60
   3028c:	f7de fc26 	bl	eadc <strlen>
   30290:	4605      	mov	r5, r0

    for (log_idx = 0; ; log_idx++) {
   30292:	4634      	mov	r4, r6
   30294:	e005      	b.n	302a2 <log_mgmt_clear+0x52>
            return rc;
        }

        if (log.type != LOG_MGMT_TYPE_STREAM) {
            if (name_len == 0 || strcmp(log.name, name) == 0) {
                rc = log_mgmt_impl_clear(log.name);
   30296:	9828      	ldr	r0, [sp, #160]	; 0xa0
   30298:	f7e3 fc12 	bl	13ac0 <log_mgmt_impl_clear>
                if (rc != 0) {
   3029c:	b9d0      	cbnz	r0, 302d4 <log_mgmt_clear+0x84>
                    return rc;
                }

                if (name_len != 0) {
   3029e:	b9dd      	cbnz	r5, 302d8 <log_mgmt_clear+0x88>
    for (log_idx = 0; ; log_idx++) {
   302a0:	3401      	adds	r4, #1
        rc = log_mgmt_impl_get_log(log_idx, &log);
   302a2:	a928      	add	r1, sp, #160	; 0xa0
   302a4:	4620      	mov	r0, r4
   302a6:	f7e3 fb83 	bl	139b0 <log_mgmt_impl_get_log>
        if (rc == LOG_MGMT_ERR_ENOENT) {
   302aa:	2805      	cmp	r0, #5
   302ac:	d00d      	beq.n	302ca <log_mgmt_clear+0x7a>
        if (rc != 0) {
   302ae:	b978      	cbnz	r0, 302d0 <log_mgmt_clear+0x80>
        if (log.type != LOG_MGMT_TYPE_STREAM) {
   302b0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   302b2:	2b00      	cmp	r3, #0
   302b4:	d0f4      	beq.n	302a0 <log_mgmt_clear+0x50>
            if (name_len == 0 || strcmp(log.name, name) == 0) {
   302b6:	2d00      	cmp	r5, #0
   302b8:	d0ed      	beq.n	30296 <log_mgmt_clear+0x46>
   302ba:	a918      	add	r1, sp, #96	; 0x60
   302bc:	9828      	ldr	r0, [sp, #160]	; 0xa0
   302be:	f7de fbbd 	bl	ea3c <strcmp>
   302c2:	2800      	cmp	r0, #0
   302c4:	d1ec      	bne.n	302a0 <log_mgmt_clear+0x50>
   302c6:	e7e6      	b.n	30296 <log_mgmt_clear+0x46>
        return LOG_MGMT_ERR_EINVAL;
   302c8:	2603      	movs	r6, #3
    if (name_len != 0) {
        return LOG_MGMT_ERR_ENOENT;
    }

    return 0;
}
   302ca:	4630      	mov	r0, r6
   302cc:	b02a      	add	sp, #168	; 0xa8
   302ce:	bd70      	pop	{r4, r5, r6, pc}
            return rc;
   302d0:	4606      	mov	r6, r0
   302d2:	e7fa      	b.n	302ca <log_mgmt_clear+0x7a>
                    return rc;
   302d4:	4606      	mov	r6, r0
   302d6:	e7f8      	b.n	302ca <log_mgmt_clear+0x7a>
                    return 0;
   302d8:	4606      	mov	r6, r0
   302da:	e7f6      	b.n	302ca <log_mgmt_clear+0x7a>
   302dc:	00032d68 	.word	0x00032d68

000302e0 <log_encode_entries>:
{
   302e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   302e4:	b09a      	sub	sp, #104	; 0x68
   302e6:	4680      	mov	r8, r0
   302e8:	460d      	mov	r5, r1
   302ea:	4616      	mov	r6, r2
   302ec:	461f      	mov	r7, r3

static inline void
cbor_cnt_writer_init(struct CborCntWriter *cb) {
    cb->enc.bytes_written = 0;
   302ee:	2200      	movs	r2, #0
   302f0:	9219      	str	r2, [sp, #100]	; 0x64
    cb->enc.write = &cbor_cnt_writer;
   302f2:	a91a      	add	r1, sp, #104	; 0x68
   302f4:	4b29      	ldr	r3, [pc, #164]	; (3039c <log_encode_entries+0xbc>)
   302f6:	f841 3d08 	str.w	r3, [r1, #-8]!
    cbor_encoder_init(&cnt_encoder, &cnt_writer.enc, 0);
   302fa:	a804      	add	r0, sp, #16
   302fc:	f7fc f9e0 	bl	2c6c0 <cbor_encoder_init>
   30300:	2207      	movs	r2, #7
   30302:	4927      	ldr	r1, [pc, #156]	; (303a0 <log_encode_entries+0xc0>)
   30304:	a804      	add	r0, sp, #16
   30306:	f7fc fa96 	bl	2c836 <cbor_encode_text_string>
   3030a:	4604      	mov	r4, r0
    err |= cbor_encoder_create_array(&cnt_encoder, &entries,
   3030c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   30310:	4669      	mov	r1, sp
   30312:	a804      	add	r0, sp, #16
   30314:	f7fc fa97 	bl	2c846 <cbor_encoder_create_array>
   30318:	4304      	orrs	r4, r0
    err |= cbor_encoder_close_container(&cnt_encoder, &entries);
   3031a:	4669      	mov	r1, sp
   3031c:	a804      	add	r0, sp, #16
   3031e:	f7fc faae 	bl	2c87e <cbor_encoder_close_container>
   30322:	4304      	orrs	r4, r0
{   return encoder->writer->bytes_written; }
   30324:	682b      	ldr	r3, [r5, #0]
   30326:	685a      	ldr	r2, [r3, #4]
   30328:	9b04      	ldr	r3, [sp, #16]
   3032a:	685b      	ldr	r3, [r3, #4]
    rsp_len = cbor_encode_bytes_written(enc) +
   3032c:	4413      	add	r3, r2
    if (rsp_len > LOG_MGMT_MAX_RSP_LEN) {
   3032e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   30332:	dd04      	ble.n	3033e <log_encode_entries+0x5e>
        rc = LOG_MGMT_ERR_EUNKNOWN;
   30334:	2601      	movs	r6, #1
}
   30336:	4630      	mov	r0, r6
   30338:	b01a      	add	sp, #104	; 0x68
   3033a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   3033e:	2207      	movs	r2, #7
   30340:	4917      	ldr	r1, [pc, #92]	; (303a0 <log_encode_entries+0xc0>)
   30342:	4628      	mov	r0, r5
   30344:	f7fc fa77 	bl	2c836 <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(enc, "entries");
   30348:	4304      	orrs	r4, r0
    err |= cbor_encoder_create_array(enc, &entries, CborIndefiniteLength);
   3034a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3034e:	4669      	mov	r1, sp
   30350:	4628      	mov	r0, r5
   30352:	f7fc fa78 	bl	2c846 <cbor_encoder_create_array>
   30356:	4304      	orrs	r4, r0
    filter = (struct log_mgmt_filter) {
   30358:	e9cd 6714 	strd	r6, r7, [sp, #80]	; 0x50
   3035c:	9b20      	ldr	r3, [sp, #128]	; 0x80
   3035e:	9316      	str	r3, [sp, #88]	; 0x58
{   return encoder->writer->bytes_written; }
   30360:	682b      	ldr	r3, [r5, #0]
   30362:	685e      	ldr	r6, [r3, #4]
    ctxt = (struct log_walk_ctxt) {
   30364:	2230      	movs	r2, #48	; 0x30
   30366:	2100      	movs	r1, #0
   30368:	a808      	add	r0, sp, #32
   3036a:	f7de fb41 	bl	e9f0 <memset>
   3036e:	9609      	str	r6, [sp, #36]	; 0x24
   30370:	f8cd d028 	str.w	sp, [sp, #40]	; 0x28
    rc = log_mgmt_impl_foreach_entry(log->name, &filter,
   30374:	ab08      	add	r3, sp, #32
   30376:	4a0b      	ldr	r2, [pc, #44]	; (303a4 <log_encode_entries+0xc4>)
   30378:	a914      	add	r1, sp, #80	; 0x50
   3037a:	f8d8 0000 	ldr.w	r0, [r8]
   3037e:	f7e3 fb71 	bl	13a64 <log_mgmt_impl_foreach_entry>
    if (rc < 0) {
   30382:	1e06      	subs	r6, r0, #0
   30384:	db08      	blt.n	30398 <log_encode_entries+0xb8>
    err |= cbor_encoder_close_container(enc, &entries);
   30386:	4669      	mov	r1, sp
   30388:	4628      	mov	r0, r5
   3038a:	f7fc fa78 	bl	2c87e <cbor_encoder_close_container>
    if (err != 0) {
   3038e:	ea54 0300 	orrs.w	r3, r4, r0
   30392:	d0d0      	beq.n	30336 <log_encode_entries+0x56>
        return LOG_MGMT_ERR_ENOMEM;
   30394:	2602      	movs	r6, #2
   30396:	e7ce      	b.n	30336 <log_encode_entries+0x56>
        rc = -1 * rc;
   30398:	4276      	negs	r6, r6
   3039a:	e7f4      	b.n	30386 <log_encode_entries+0xa6>
   3039c:	0003006d 	.word	0x0003006d
   303a0:	00032d3c 	.word	0x00032d3c
   303a4:	00030785 	.word	0x00030785

000303a8 <log_encode>:
{
   303a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   303ac:	b087      	sub	sp, #28
   303ae:	4605      	mov	r5, r0
   303b0:	4688      	mov	r8, r1
   303b2:	4616      	mov	r6, r2
   303b4:	461f      	mov	r7, r3
    err |= cbor_encoder_create_map(ctxt, &logs, CborIndefiniteLength);
   303b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   303ba:	a902      	add	r1, sp, #8
   303bc:	4640      	mov	r0, r8
   303be:	f7fc fa47 	bl	2c850 <cbor_encoder_create_map>
   303c2:	4604      	mov	r4, r0
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   303c4:	2204      	movs	r2, #4
   303c6:	491b      	ldr	r1, [pc, #108]	; (30434 <log_encode+0x8c>)
   303c8:	a802      	add	r0, sp, #8
   303ca:	f7fc fa34 	bl	2c836 <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&logs, "name");
   303ce:	4304      	orrs	r4, r0
    err |= cbor_encode_text_stringz(&logs, log->name);
   303d0:	f8d5 9000 	ldr.w	r9, [r5]
   303d4:	4648      	mov	r0, r9
   303d6:	f7de fb81 	bl	eadc <strlen>
   303da:	4602      	mov	r2, r0
   303dc:	4649      	mov	r1, r9
   303de:	a802      	add	r0, sp, #8
   303e0:	f7fc fa29 	bl	2c836 <cbor_encode_text_string>
   303e4:	4304      	orrs	r4, r0
   303e6:	2204      	movs	r2, #4
   303e8:	4913      	ldr	r1, [pc, #76]	; (30438 <log_encode+0x90>)
   303ea:	a802      	add	r0, sp, #8
   303ec:	f7fc fa23 	bl	2c836 <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&logs, "type");
   303f0:	4304      	orrs	r4, r0
    err |= cbor_encode_uint(&logs, log->type);
   303f2:	686a      	ldr	r2, [r5, #4]
   303f4:	17d3      	asrs	r3, r2, #31
   303f6:	a802      	add	r0, sp, #8
   303f8:	f7fc f967 	bl	2c6ca <cbor_encode_uint>
   303fc:	4304      	orrs	r4, r0
    rc = log_encode_entries(log, &logs, timestamp, index);
   303fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   30400:	9300      	str	r3, [sp, #0]
   30402:	4632      	mov	r2, r6
   30404:	463b      	mov	r3, r7
   30406:	a902      	add	r1, sp, #8
   30408:	4628      	mov	r0, r5
   3040a:	f7ff ff69 	bl	302e0 <log_encode_entries>
    if (rc != 0) {
   3040e:	4605      	mov	r5, r0
   30410:	b940      	cbnz	r0, 30424 <log_encode+0x7c>
    err |= cbor_encoder_close_container(ctxt, &logs);
   30412:	a902      	add	r1, sp, #8
   30414:	4640      	mov	r0, r8
   30416:	f7fc fa32 	bl	2c87e <cbor_encoder_close_container>
    if (err != 0) {
   3041a:	ea54 0300 	orrs.w	r3, r4, r0
   3041e:	d005      	beq.n	3042c <log_encode+0x84>
        return LOG_MGMT_ERR_ENOMEM;
   30420:	2502      	movs	r5, #2
   30422:	e003      	b.n	3042c <log_encode+0x84>
        cbor_encoder_close_container(ctxt, &logs);
   30424:	a902      	add	r1, sp, #8
   30426:	4640      	mov	r0, r8
   30428:	f7fc fa29 	bl	2c87e <cbor_encoder_close_container>
}
   3042c:	4628      	mov	r0, r5
   3042e:	b007      	add	sp, #28
   30430:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   30434:	00032d6c 	.word	0x00032d6c
   30438:	00032d34 	.word	0x00032d34

0003043c <log_mgmt_show>:
{
   3043c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   30440:	b0ce      	sub	sp, #312	; 0x138
   30442:	4606      	mov	r6, r0
    const struct cbor_attr_t attr[] = {
   30444:	22bc      	movs	r2, #188	; 0xbc
   30446:	2100      	movs	r1, #0
   30448:	a803      	add	r0, sp, #12
   3044a:	f7de fad1 	bl	e9f0 <memset>
   3044e:	4b4a      	ldr	r3, [pc, #296]	; (30578 <log_mgmt_show+0x13c>)
   30450:	9302      	str	r3, [sp, #8]
   30452:	2304      	movs	r3, #4
   30454:	f88d 300c 	strb.w	r3, [sp, #12]
   30458:	ab3e      	add	r3, sp, #248	; 0xf8
   3045a:	9304      	str	r3, [sp, #16]
   3045c:	2340      	movs	r3, #64	; 0x40
   3045e:	930c      	str	r3, [sp, #48]	; 0x30
   30460:	4b46      	ldr	r3, [pc, #280]	; (3057c <log_mgmt_show+0x140>)
   30462:	930e      	str	r3, [sp, #56]	; 0x38
   30464:	2301      	movs	r3, #1
   30466:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
   3046a:	ab32      	add	r3, sp, #200	; 0xc8
   3046c:	9310      	str	r3, [sp, #64]	; 0x40
   3046e:	4b44      	ldr	r3, [pc, #272]	; (30580 <log_mgmt_show+0x144>)
   30470:	931a      	str	r3, [sp, #104]	; 0x68
   30472:	2302      	movs	r3, #2
   30474:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
   30478:	ab36      	add	r3, sp, #216	; 0xd8
   3047a:	931c      	str	r3, [sp, #112]	; 0x70
    name[0] = '\0';
   3047c:	2300      	movs	r3, #0
   3047e:	f88d 30f8 	strb.w	r3, [sp, #248]	; 0xf8
    rc = cbor_read_object(&ctxt->it, attr);
   30482:	a902      	add	r1, sp, #8
   30484:	f106 001c 	add.w	r0, r6, #28
   30488:	f7e2 fb8d 	bl	12ba6 <cbor_read_object>
    if (rc != 0) {
   3048c:	2800      	cmp	r0, #0
   3048e:	d16e      	bne.n	3056e <log_mgmt_show+0x132>
    name_len = strlen(name);
   30490:	a83e      	add	r0, sp, #248	; 0xf8
   30492:	f7de fb23 	bl	eadc <strlen>
   30496:	4682      	mov	sl, r0
   30498:	4681      	mov	r9, r0
    rc = log_mgmt_impl_get_next_idx(&next_idx);
   3049a:	a835      	add	r0, sp, #212	; 0xd4
   3049c:	f7e3 fada 	bl	13a54 <log_mgmt_impl_get_next_idx>
    if (rc != 0) {
   304a0:	4607      	mov	r7, r0
   304a2:	b108      	cbz	r0, 304a8 <log_mgmt_show+0x6c>
        return LOG_MGMT_ERR_EUNKNOWN;
   304a4:	2701      	movs	r7, #1
   304a6:	e063      	b.n	30570 <log_mgmt_show+0x134>
   304a8:	220a      	movs	r2, #10
   304aa:	4936      	ldr	r1, [pc, #216]	; (30584 <log_mgmt_show+0x148>)
   304ac:	4630      	mov	r0, r6
   304ae:	f7fc f9c2 	bl	2c836 <cbor_encode_text_string>
   304b2:	4680      	mov	r8, r0
    err |= cbor_encode_uint(&ctxt->encoder, next_idx);
   304b4:	9a35      	ldr	r2, [sp, #212]	; 0xd4
   304b6:	2300      	movs	r3, #0
   304b8:	4630      	mov	r0, r6
   304ba:	f7fc f906 	bl	2c6ca <cbor_encode_uint>
   304be:	ea40 0808 	orr.w	r8, r0, r8
   304c2:	2204      	movs	r2, #4
   304c4:	4930      	ldr	r1, [pc, #192]	; (30588 <log_mgmt_show+0x14c>)
   304c6:	4630      	mov	r0, r6
   304c8:	f7fc f9b5 	bl	2c836 <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&ctxt->encoder, "logs");
   304cc:	ea48 0800 	orr.w	r8, r8, r0
    err |= cbor_encoder_create_array(&ctxt->encoder, &logs,
   304d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   304d4:	a938      	add	r1, sp, #224	; 0xe0
   304d6:	4630      	mov	r0, r6
   304d8:	f7fc f9b5 	bl	2c846 <cbor_encoder_create_array>
   304dc:	ea48 0800 	orr.w	r8, r8, r0
    for (log_idx = 0; ; log_idx++) {
   304e0:	463d      	mov	r5, r7
   304e2:	e02e      	b.n	30542 <log_mgmt_show+0x106>
            if (name_len != 0) {
   304e4:	f1ba 0f00 	cmp.w	sl, #0
   304e8:	d116      	bne.n	30518 <log_mgmt_show+0xdc>
    err |= cbor_encoder_close_container(&ctxt->encoder, &logs);
   304ea:	a938      	add	r1, sp, #224	; 0xe0
   304ec:	4630      	mov	r0, r6
   304ee:	f7fc f9c6 	bl	2c87e <cbor_encoder_close_container>
   304f2:	ea48 0800 	orr.w	r8, r8, r0
   304f6:	2202      	movs	r2, #2
   304f8:	4924      	ldr	r1, [pc, #144]	; (3058c <log_mgmt_show+0x150>)
   304fa:	4630      	mov	r0, r6
   304fc:	f7fc f99b 	bl	2c836 <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&ctxt->encoder, "rc");
   30500:	ea48 0800 	orr.w	r8, r8, r0
    err |= cbor_encode_int(&ctxt->encoder, rc);
   30504:	4622      	mov	r2, r4
   30506:	17e3      	asrs	r3, r4, #31
   30508:	4630      	mov	r0, r6
   3050a:	f7fc f913 	bl	2c734 <cbor_encode_int>
    if (err != 0) {
   3050e:	ea58 0300 	orrs.w	r3, r8, r0
   30512:	d02d      	beq.n	30570 <log_mgmt_show+0x134>
        return LOG_MGMT_ERR_ENOMEM;
   30514:	2702      	movs	r7, #2
   30516:	e02b      	b.n	30570 <log_mgmt_show+0x134>
                cbor_encoder_close_container(&ctxt->encoder, &logs);
   30518:	a938      	add	r1, sp, #224	; 0xe0
   3051a:	4630      	mov	r0, r6
   3051c:	f7fc f9af 	bl	2c87e <cbor_encoder_close_container>
                return LOG_MGMT_ERR_ENOENT;
   30520:	4627      	mov	r7, r4
   30522:	e025      	b.n	30570 <log_mgmt_show+0x134>
                rc = log_encode(&log, &logs, timestamp, index);
   30524:	9b36      	ldr	r3, [sp, #216]	; 0xd8
   30526:	9300      	str	r3, [sp, #0]
   30528:	e9dd 2332 	ldrd	r2, r3, [sp, #200]	; 0xc8
   3052c:	a938      	add	r1, sp, #224	; 0xe0
   3052e:	a83c      	add	r0, sp, #240	; 0xf0
   30530:	f7ff ff3a 	bl	303a8 <log_encode>
                if (rc) {
   30534:	4604      	mov	r4, r0
   30536:	2800      	cmp	r0, #0
   30538:	d1d7      	bne.n	304ea <log_mgmt_show+0xae>
                if (name_len > 0) {
   3053a:	f1b9 0f00 	cmp.w	r9, #0
   3053e:	dcd4      	bgt.n	304ea <log_mgmt_show+0xae>
    for (log_idx = 0; ; log_idx++) {
   30540:	3501      	adds	r5, #1
        rc = log_mgmt_impl_get_log(log_idx, &log);
   30542:	a93c      	add	r1, sp, #240	; 0xf0
   30544:	4628      	mov	r0, r5
   30546:	f7e3 fa33 	bl	139b0 <log_mgmt_impl_get_log>
   3054a:	4604      	mov	r4, r0
        if (rc == LOG_MGMT_ERR_ENOENT) {
   3054c:	2805      	cmp	r0, #5
   3054e:	d0c9      	beq.n	304e4 <log_mgmt_show+0xa8>
        } else if (rc != 0) {
   30550:	2800      	cmp	r0, #0
   30552:	d1ca      	bne.n	304ea <log_mgmt_show+0xae>
        if (log.type != LOG_MGMT_TYPE_STREAM) {
   30554:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
   30556:	2b00      	cmp	r3, #0
   30558:	d0f2      	beq.n	30540 <log_mgmt_show+0x104>
            if (name_len == 0 || strcmp(name, log.name) == 0) {
   3055a:	f1b9 0f00 	cmp.w	r9, #0
   3055e:	d0e1      	beq.n	30524 <log_mgmt_show+0xe8>
   30560:	993c      	ldr	r1, [sp, #240]	; 0xf0
   30562:	a83e      	add	r0, sp, #248	; 0xf8
   30564:	f7de fa6a 	bl	ea3c <strcmp>
   30568:	2800      	cmp	r0, #0
   3056a:	d1e9      	bne.n	30540 <log_mgmt_show+0x104>
   3056c:	e7da      	b.n	30524 <log_mgmt_show+0xe8>
        return LOG_MGMT_ERR_EINVAL;
   3056e:	2703      	movs	r7, #3
}
   30570:	4638      	mov	r0, r7
   30572:	b04e      	add	sp, #312	; 0x138
   30574:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   30578:	00032d68 	.word	0x00032d68
   3057c:	00032dc4 	.word	0x00032dc4
   30580:	00032dc8 	.word	0x00032dc8
   30584:	00032dd0 	.word	0x00032dd0
   30588:	00032ddc 	.word	0x00032ddc
   3058c:	000318e4 	.word	0x000318e4

00030590 <log_mgmt_encode_entry>:
{
   30590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30594:	b083      	sub	sp, #12
   30596:	4682      	mov	sl, r0
   30598:	460f      	mov	r7, r1
   3059a:	4693      	mov	fp, r2
   3059c:	4698      	mov	r8, r3
{   return encoder->writer->bytes_written; }
   3059e:	6803      	ldr	r3, [r0, #0]
   305a0:	685b      	ldr	r3, [r3, #4]
   305a2:	9301      	str	r3, [sp, #4]
    if (entry->offset == 0) {
   305a4:	69cb      	ldr	r3, [r1, #28]
   305a6:	2b00      	cmp	r3, #0
   305a8:	f040 80ac 	bne.w	30704 <log_mgmt_encode_entry+0x174>
        err |= cbor_encoder_create_map(enc, &lmec->mapenc, CborIndefiniteLength);
   305ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   305b0:	4641      	mov	r1, r8
   305b2:	f7fc f94d 	bl	2c850 <cbor_encoder_create_map>
   305b6:	4606      	mov	r6, r0
        switch (entry->type) {
   305b8:	7dbb      	ldrb	r3, [r7, #22]
   305ba:	f003 030f 	and.w	r3, r3, #15
   305be:	2b01      	cmp	r3, #1
   305c0:	d005      	beq.n	305ce <log_mgmt_encode_entry+0x3e>
   305c2:	2b00      	cmp	r3, #0
   305c4:	d064      	beq.n	30690 <log_mgmt_encode_entry+0x100>
   305c6:	2b02      	cmp	r3, #2
   305c8:	d055      	beq.n	30676 <log_mgmt_encode_entry+0xe6>
            return LOG_MGMT_ERR_ECORRUPT;
   305ca:	2007      	movs	r0, #7
   305cc:	e0b4      	b.n	30738 <log_mgmt_encode_entry+0x1a8>
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   305ce:	2204      	movs	r2, #4
   305d0:	4962      	ldr	r1, [pc, #392]	; (3075c <log_mgmt_encode_entry+0x1cc>)
   305d2:	4640      	mov	r0, r8
   305d4:	f7fc f92f 	bl	2c836 <cbor_encode_text_string>
            err |= cbor_encode_text_stringz(&lmec->mapenc, "type");
   305d8:	4306      	orrs	r6, r0
   305da:	2204      	movs	r2, #4
   305dc:	4960      	ldr	r1, [pc, #384]	; (30760 <log_mgmt_encode_entry+0x1d0>)
   305de:	4640      	mov	r0, r8
   305e0:	f7fc f929 	bl	2c836 <cbor_encode_text_string>
            err |= cbor_encode_text_stringz(&lmec->mapenc, "cbor");
   305e4:	4306      	orrs	r6, r0
   305e6:	2202      	movs	r2, #2
   305e8:	495e      	ldr	r1, [pc, #376]	; (30764 <log_mgmt_encode_entry+0x1d4>)
   305ea:	4640      	mov	r0, r8
   305ec:	f7fc f923 	bl	2c836 <cbor_encode_text_string>
        err |= cbor_encode_text_stringz(&lmec->mapenc, "ts");
   305f0:	4306      	orrs	r6, r0
        err |= cbor_encode_int(&lmec->mapenc, entry->ts);
   305f2:	e9d7 2300 	ldrd	r2, r3, [r7]
   305f6:	4640      	mov	r0, r8
   305f8:	f7fc f89c 	bl	2c734 <cbor_encode_int>
   305fc:	4306      	orrs	r6, r0
   305fe:	2205      	movs	r2, #5
   30600:	4959      	ldr	r1, [pc, #356]	; (30768 <log_mgmt_encode_entry+0x1d8>)
   30602:	4640      	mov	r0, r8
   30604:	f7fc f917 	bl	2c836 <cbor_encode_text_string>
        err |= cbor_encode_text_stringz(&lmec->mapenc, "level");
   30608:	4306      	orrs	r6, r0
        err |= cbor_encode_uint(&lmec->mapenc, entry->level);
   3060a:	7d7a      	ldrb	r2, [r7, #21]
   3060c:	2300      	movs	r3, #0
   3060e:	4640      	mov	r0, r8
   30610:	f7fc f85b 	bl	2c6ca <cbor_encode_uint>
   30614:	4306      	orrs	r6, r0
   30616:	2205      	movs	r2, #5
   30618:	4954      	ldr	r1, [pc, #336]	; (3076c <log_mgmt_encode_entry+0x1dc>)
   3061a:	4640      	mov	r0, r8
   3061c:	f7fc f90b 	bl	2c836 <cbor_encode_text_string>
        err |= cbor_encode_text_stringz(&lmec->mapenc, "index");
   30620:	4306      	orrs	r6, r0
        err |= cbor_encode_uint(&lmec->mapenc, entry->index);
   30622:	68ba      	ldr	r2, [r7, #8]
   30624:	2300      	movs	r3, #0
   30626:	4640      	mov	r0, r8
   30628:	f7fc f84f 	bl	2c6ca <cbor_encode_uint>
   3062c:	4306      	orrs	r6, r0
   3062e:	2206      	movs	r2, #6
   30630:	494f      	ldr	r1, [pc, #316]	; (30770 <log_mgmt_encode_entry+0x1e0>)
   30632:	4640      	mov	r0, r8
   30634:	f7fc f8ff 	bl	2c836 <cbor_encode_text_string>
        err |= cbor_encode_text_stringz(&lmec->mapenc, "module");
   30638:	4306      	orrs	r6, r0
        err |= cbor_encode_uint(&lmec->mapenc, entry->module);
   3063a:	7d3a      	ldrb	r2, [r7, #20]
   3063c:	2300      	movs	r3, #0
   3063e:	4640      	mov	r0, r8
   30640:	f7fc f843 	bl	2c6ca <cbor_encode_uint>
   30644:	4306      	orrs	r6, r0
        if (entry->flags & LOG_MGMT_FLAGS_IMG_HASH) {
   30646:	7dbb      	ldrb	r3, [r7, #22]
   30648:	f013 0f10 	tst.w	r3, #16
   3064c:	d12d      	bne.n	306aa <log_mgmt_encode_entry+0x11a>
   3064e:	2203      	movs	r2, #3
   30650:	4948      	ldr	r1, [pc, #288]	; (30774 <log_mgmt_encode_entry+0x1e4>)
   30652:	4640      	mov	r0, r8
   30654:	f7fc f8ef 	bl	2c836 <cbor_encode_text_string>
        err |= cbor_encode_text_stringz(&lmec->mapenc, "msg");
   30658:	4306      	orrs	r6, r0
        err |= cbor_encoder_create_indef_byte_string(&lmec->mapenc, &lmec->msgenc);
   3065a:	f108 0310 	add.w	r3, r8, #16
   3065e:	9300      	str	r3, [sp, #0]
   30660:	4619      	mov	r1, r3
   30662:	4640      	mov	r0, r8
   30664:	f7fc f904 	bl	2c870 <cbor_encoder_create_indef_byte_string>
   30668:	4306      	orrs	r6, r0
        if (out_len != NULL) {
   3066a:	f1bb 0f00 	cmp.w	fp, #0
   3066e:	d041      	beq.n	306f4 <log_mgmt_encode_entry+0x164>
    bytes_encoded = 0;
   30670:	2500      	movs	r5, #0
            for (off = 0; off < entry->len; off += entry->chunklen) {
   30672:	462b      	mov	r3, r5
   30674:	e030      	b.n	306d8 <log_mgmt_encode_entry+0x148>
   30676:	2204      	movs	r2, #4
   30678:	4938      	ldr	r1, [pc, #224]	; (3075c <log_mgmt_encode_entry+0x1cc>)
   3067a:	4640      	mov	r0, r8
   3067c:	f7fc f8db 	bl	2c836 <cbor_encode_text_string>
            err |= cbor_encode_text_stringz(&lmec->mapenc, "type");
   30680:	4306      	orrs	r6, r0
   30682:	2203      	movs	r2, #3
   30684:	493c      	ldr	r1, [pc, #240]	; (30778 <log_mgmt_encode_entry+0x1e8>)
   30686:	4640      	mov	r0, r8
   30688:	f7fc f8d5 	bl	2c836 <cbor_encode_text_string>
            err |= cbor_encode_text_stringz(&lmec->mapenc, "bin");
   3068c:	4306      	orrs	r6, r0
            break;
   3068e:	e7aa      	b.n	305e6 <log_mgmt_encode_entry+0x56>
   30690:	2204      	movs	r2, #4
   30692:	4932      	ldr	r1, [pc, #200]	; (3075c <log_mgmt_encode_entry+0x1cc>)
   30694:	4640      	mov	r0, r8
   30696:	f7fc f8ce 	bl	2c836 <cbor_encode_text_string>
            err |= cbor_encode_text_stringz(&lmec->mapenc, "type");
   3069a:	4306      	orrs	r6, r0
   3069c:	2203      	movs	r2, #3
   3069e:	4937      	ldr	r1, [pc, #220]	; (3077c <log_mgmt_encode_entry+0x1ec>)
   306a0:	4640      	mov	r0, r8
   306a2:	f7fc f8c8 	bl	2c836 <cbor_encode_text_string>
            err |= cbor_encode_text_stringz(&lmec->mapenc, "str");
   306a6:	4306      	orrs	r6, r0
            break;
   306a8:	e79d      	b.n	305e6 <log_mgmt_encode_entry+0x56>
   306aa:	2207      	movs	r2, #7
   306ac:	4934      	ldr	r1, [pc, #208]	; (30780 <log_mgmt_encode_entry+0x1f0>)
   306ae:	4640      	mov	r0, r8
   306b0:	f7fc f8c1 	bl	2c836 <cbor_encode_text_string>
            err |= cbor_encode_text_stringz(&lmec->mapenc, "imghash");
   306b4:	4306      	orrs	r6, r0
            err |= cbor_encode_byte_string(&lmec->mapenc, entry->imghash,
   306b6:	2204      	movs	r2, #4
   306b8:	69b9      	ldr	r1, [r7, #24]
   306ba:	4640      	mov	r0, r8
   306bc:	f7fc f8b3 	bl	2c826 <cbor_encode_byte_string>
   306c0:	4306      	orrs	r6, r0
   306c2:	e7c4      	b.n	3064e <log_mgmt_encode_entry+0xbe>
                err |= cbor_encode_byte_string(&lmec->msgenc, entry->data, chunklen);
   306c4:	4622      	mov	r2, r4
   306c6:	68f9      	ldr	r1, [r7, #12]
   306c8:	9800      	ldr	r0, [sp, #0]
   306ca:	f7fc f8ac 	bl	2c826 <cbor_encode_byte_string>
   306ce:	4306      	orrs	r6, r0
                bytes_encoded += chunklen;
   306d0:	4425      	add	r5, r4
   306d2:	b2ad      	uxth	r5, r5
            for (off = 0; off < entry->len; off += entry->chunklen) {
   306d4:	6a3b      	ldr	r3, [r7, #32]
   306d6:	444b      	add	r3, r9
   306d8:	693a      	ldr	r2, [r7, #16]
   306da:	4699      	mov	r9, r3
   306dc:	429a      	cmp	r2, r3
   306de:	d919      	bls.n	30714 <log_mgmt_encode_entry+0x184>
                chunklen = entry->chunklen;
   306e0:	6a39      	ldr	r1, [r7, #32]
   306e2:	b28c      	uxth	r4, r1
                if (entry->chunklen > entry->len - off) {
   306e4:	1ad0      	subs	r0, r2, r3
   306e6:	4281      	cmp	r1, r0
   306e8:	d9ec      	bls.n	306c4 <log_mgmt_encode_entry+0x134>
                    chunklen = entry->len - off;
   306ea:	b294      	uxth	r4, r2
   306ec:	b29b      	uxth	r3, r3
   306ee:	1ae3      	subs	r3, r4, r3
   306f0:	b29c      	uxth	r4, r3
   306f2:	e7e7      	b.n	306c4 <log_mgmt_encode_entry+0x134>
            err |= cbor_encode_byte_string(&lmec->msgenc, entry->data, entry->chunklen);
   306f4:	6a3a      	ldr	r2, [r7, #32]
   306f6:	68f9      	ldr	r1, [r7, #12]
   306f8:	9800      	ldr	r0, [sp, #0]
   306fa:	f7fc f894 	bl	2c826 <cbor_encode_byte_string>
   306fe:	4306      	orrs	r6, r0
            bytes_encoded = entry->chunklen;
   30700:	8c3d      	ldrh	r5, [r7, #32]
   30702:	e007      	b.n	30714 <log_mgmt_encode_entry+0x184>
        err |= cbor_encode_byte_string(&lmec->msgenc, entry->data, entry->chunklen);
   30704:	6a0a      	ldr	r2, [r1, #32]
   30706:	68c9      	ldr	r1, [r1, #12]
   30708:	f108 0010 	add.w	r0, r8, #16
   3070c:	f7fc f88b 	bl	2c826 <cbor_encode_byte_string>
   30710:	4606      	mov	r6, r0
        bytes_encoded = entry->chunklen;
   30712:	8c3d      	ldrh	r5, [r7, #32]
   if (entry->offset + bytes_encoded >= entry->len) {
   30714:	69fc      	ldr	r4, [r7, #28]
   30716:	4425      	add	r5, r4
   30718:	693b      	ldr	r3, [r7, #16]
   3071a:	429d      	cmp	r5, r3
   3071c:	d20f      	bcs.n	3073e <log_mgmt_encode_entry+0x1ae>
   if (out_len) {
   3071e:	f1bb 0f00 	cmp.w	fp, #0
   30722:	d007      	beq.n	30734 <log_mgmt_encode_entry+0x1a4>
{   return encoder->writer->bytes_written; }
   30724:	f8da 3000 	ldr.w	r3, [sl]
   30728:	685a      	ldr	r2, [r3, #4]
       *out_len = cbor_encode_bytes_written(enc) - len;
   3072a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   3072e:	1ad3      	subs	r3, r2, r3
   30730:	f8cb 3000 	str.w	r3, [fp]
   if (err != 0) {
   30734:	b97e      	cbnz	r6, 30756 <log_mgmt_encode_entry+0x1c6>
   return LOG_MGMT_ERR_EOK;
   30736:	2000      	movs	r0, #0
}
   30738:	b003      	add	sp, #12
   3073a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
       err |= cbor_encoder_close_container(&lmec->mapenc, &lmec->msgenc);
   3073e:	f108 0110 	add.w	r1, r8, #16
   30742:	4640      	mov	r0, r8
   30744:	f7fc f89b 	bl	2c87e <cbor_encoder_close_container>
   30748:	4306      	orrs	r6, r0
       err |= cbor_encoder_close_container(enc, &lmec->mapenc);
   3074a:	4641      	mov	r1, r8
   3074c:	4650      	mov	r0, sl
   3074e:	f7fc f896 	bl	2c87e <cbor_encoder_close_container>
   30752:	4306      	orrs	r6, r0
   30754:	e7e3      	b.n	3071e <log_mgmt_encode_entry+0x18e>
       return LOG_MGMT_ERR_ENOMEM;
   30756:	2002      	movs	r0, #2
   30758:	e7ee      	b.n	30738 <log_mgmt_encode_entry+0x1a8>
   3075a:	bf00      	nop
   3075c:	00032d34 	.word	0x00032d34
   30760:	00032d74 	.word	0x00032d74
   30764:	00032dc4 	.word	0x00032dc4
   30768:	00032d84 	.word	0x00032d84
   3076c:	00032dc8 	.word	0x00032dc8
   30770:	00032d8c 	.word	0x00032d8c
   30774:	00032d9c 	.word	0x00032d9c
   30778:	00032d7c 	.word	0x00032d7c
   3077c:	00032d80 	.word	0x00032d80
   30780:	00032d94 	.word	0x00032d94

00030784 <log_mgmt_cb_encode>:
{
   30784:	b570      	push	{r4, r5, r6, lr}
   30786:	b088      	sub	sp, #32
   30788:	4605      	mov	r5, r0
   3078a:	460c      	mov	r4, r1
    lmec = &ctxt->lmec;
   3078c:	f101 0610 	add.w	r6, r1, #16
    if (entry->offset == 0) {
   30790:	69c3      	ldr	r3, [r0, #28]
   30792:	bb53      	cbnz	r3, 307ea <log_mgmt_cb_encode+0x66>
    cb->enc.bytes_written = 0;
   30794:	2200      	movs	r2, #0
   30796:	9207      	str	r2, [sp, #28]
    cb->enc.write = &cbor_cnt_writer;
   30798:	a908      	add	r1, sp, #32
   3079a:	4b1c      	ldr	r3, [pc, #112]	; (3080c <log_mgmt_cb_encode+0x88>)
   3079c:	f841 3d08 	str.w	r3, [r1, #-8]!
        cbor_encoder_init(&cnt_encoder, &cnt_writer.enc, 0);
   307a0:	a802      	add	r0, sp, #8
   307a2:	f7fb ff8d 	bl	2c6c0 <cbor_encoder_init>
        rc = log_mgmt_encode_entry(&cnt_encoder, entry, &entry_len, lmec);
   307a6:	4633      	mov	r3, r6
   307a8:	aa01      	add	r2, sp, #4
   307aa:	4629      	mov	r1, r5
   307ac:	a802      	add	r0, sp, #8
   307ae:	f7ff feef 	bl	30590 <log_mgmt_encode_entry>
        if (rc != 0) {
   307b2:	4603      	mov	r3, r0
   307b4:	bb30      	cbnz	r0, 30804 <log_mgmt_cb_encode+0x80>
        if (ctxt->rsp_len + entry_len + 1 > LOG_MGMT_MAX_RSP_LEN) {
   307b6:	6862      	ldr	r2, [r4, #4]
   307b8:	9b01      	ldr	r3, [sp, #4]
   307ba:	441a      	add	r2, r3
   307bc:	1c51      	adds	r1, r2, #1
   307be:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   307c2:	d911      	bls.n	307e8 <log_mgmt_cb_encode+0x64>
            if (ctxt->counter == 0) {
   307c4:	68e2      	ldr	r2, [r4, #12]
   307c6:	b112      	cbz	r2, 307ce <log_mgmt_cb_encode+0x4a>
            return -1 * LOG_MGMT_ERR_EUNKNOWN;
   307c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   307cc:	e01a      	b.n	30804 <log_mgmt_cb_encode+0x80>
                entry->type = LOG_ETYPE_STRING;
   307ce:	7daa      	ldrb	r2, [r5, #22]
   307d0:	f36f 0203 	bfc	r2, #0, #4
   307d4:	75aa      	strb	r2, [r5, #22]
                snprintf((char *)entry->data, LOG_MGMT_MAX_RSP_LEN,
   307d6:	4a0e      	ldr	r2, [pc, #56]	; (30810 <log_mgmt_cb_encode+0x8c>)
   307d8:	f44f 7100 	mov.w	r1, #512	; 0x200
   307dc:	68e8      	ldr	r0, [r5, #12]
   307de:	f7ff f884 	bl	2f8ea <snprintf>
            return -1 * LOG_MGMT_ERR_EUNKNOWN;
   307e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   307e6:	e00d      	b.n	30804 <log_mgmt_cb_encode+0x80>
        ctxt->rsp_len += entry_len;
   307e8:	6062      	str	r2, [r4, #4]
    rc = log_mgmt_encode_entry(ctxt->enc, entry, NULL, lmec);
   307ea:	4633      	mov	r3, r6
   307ec:	2200      	movs	r2, #0
   307ee:	4629      	mov	r1, r5
   307f0:	68a0      	ldr	r0, [r4, #8]
   307f2:	f7ff fecd 	bl	30590 <log_mgmt_encode_entry>
    if (rc != 0) {
   307f6:	4603      	mov	r3, r0
   307f8:	b920      	cbnz	r0, 30804 <log_mgmt_cb_encode+0x80>
    ctxt->counter++;
   307fa:	68e2      	ldr	r2, [r4, #12]
   307fc:	3201      	adds	r2, #1
   307fe:	60e2      	str	r2, [r4, #12]
    ctxt->last_enc_index = entry->index;
   30800:	68aa      	ldr	r2, [r5, #8]
   30802:	6022      	str	r2, [r4, #0]
}
   30804:	4618      	mov	r0, r3
   30806:	b008      	add	sp, #32
   30808:	bd70      	pop	{r4, r5, r6, pc}
   3080a:	bf00      	nop
   3080c:	0003006d 	.word	0x0003006d
   30810:	00032d44 	.word	0x00032d44

00030814 <log_mgmt_register_group>:

void
log_mgmt_register_group(void)
{
   30814:	b508      	push	{r3, lr}
    mgmt_register_group(&log_mgmt_group);
   30816:	4802      	ldr	r0, [pc, #8]	; (30820 <log_mgmt_register_group+0xc>)
   30818:	f7e3 fbc6 	bl	13fa8 <mgmt_register_group>
}
   3081c:	bd08      	pop	{r3, pc}
   3081e:	bf00      	nop
   30820:	20000500 	.word	0x20000500

00030824 <stat_mgmt_list>:
/**
 * Command handler: stat list
 */
static int
stat_mgmt_list(struct mgmt_ctxt *ctxt)
{
   30824:	b5f0      	push	{r4, r5, r6, r7, lr}
   30826:	b087      	sub	sp, #28
   30828:	4607      	mov	r7, r0
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   3082a:	2202      	movs	r2, #2
   3082c:	491e      	ldr	r1, [pc, #120]	; (308a8 <stat_mgmt_list+0x84>)
   3082e:	f7fc f802 	bl	2c836 <cbor_encode_text_string>
   30832:	4606      	mov	r6, r0
    int rc;
    int i;

    err = CborNoError;
    err |= cbor_encode_text_stringz(&ctxt->encoder, "rc");
    err |= cbor_encode_int(&ctxt->encoder, MGMT_ERR_EOK);
   30834:	2200      	movs	r2, #0
   30836:	2300      	movs	r3, #0
   30838:	4638      	mov	r0, r7
   3083a:	f7fb ff7b 	bl	2c734 <cbor_encode_int>
   3083e:	4306      	orrs	r6, r0
   30840:	2209      	movs	r2, #9
   30842:	491a      	ldr	r1, [pc, #104]	; (308ac <stat_mgmt_list+0x88>)
   30844:	4638      	mov	r0, r7
   30846:	f7fb fff6 	bl	2c836 <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&ctxt->encoder, "stat_list");
   3084a:	4306      	orrs	r6, r0
    err |= cbor_encoder_create_array(&ctxt->encoder, &arr_enc,
   3084c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   30850:	a901      	add	r1, sp, #4
   30852:	4638      	mov	r0, r7
   30854:	f7fb fff7 	bl	2c846 <cbor_encoder_create_array>
   30858:	4306      	orrs	r6, r0
                                     CborIndefiniteLength);

    /* Iterate the list of stat groups, encoding each group's name in the CBOR
     * array.
     */
    for (i = 0; ; i++) {
   3085a:	2500      	movs	r5, #0
        rc = stat_mgmt_impl_get_group(i, &group_name);
   3085c:	a905      	add	r1, sp, #20
   3085e:	4628      	mov	r0, r5
   30860:	f7e3 fb06 	bl	13e70 <stat_mgmt_impl_get_group>
   30864:	4604      	mov	r4, r0
        if (rc == MGMT_ERR_ENOENT) {
   30866:	2805      	cmp	r0, #5
   30868:	d013      	beq.n	30892 <stat_mgmt_list+0x6e>
            /* No more stat groups. */
            break;
        } else if (rc != 0) {
   3086a:	b958      	cbnz	r0, 30884 <stat_mgmt_list+0x60>
            /* Error. */
            cbor_encoder_close_container(&ctxt->encoder, &arr_enc);
            return rc;
        }

        err |= cbor_encode_text_stringz(&ctxt->encoder, group_name);
   3086c:	9c05      	ldr	r4, [sp, #20]
   3086e:	4620      	mov	r0, r4
   30870:	f7de f934 	bl	eadc <strlen>
   30874:	4602      	mov	r2, r0
   30876:	4621      	mov	r1, r4
   30878:	4638      	mov	r0, r7
   3087a:	f7fb ffdc 	bl	2c836 <cbor_encode_text_string>
   3087e:	4306      	orrs	r6, r0
    for (i = 0; ; i++) {
   30880:	3501      	adds	r5, #1
        rc = stat_mgmt_impl_get_group(i, &group_name);
   30882:	e7eb      	b.n	3085c <stat_mgmt_list+0x38>
            cbor_encoder_close_container(&ctxt->encoder, &arr_enc);
   30884:	a901      	add	r1, sp, #4
   30886:	4638      	mov	r0, r7
   30888:	f7fb fff9 	bl	2c87e <cbor_encoder_close_container>

    if (err != 0) {
        return MGMT_ERR_ENOMEM;
    }
    return 0;
}
   3088c:	4620      	mov	r0, r4
   3088e:	b007      	add	sp, #28
   30890:	bdf0      	pop	{r4, r5, r6, r7, pc}
    err |= cbor_encoder_close_container(&ctxt->encoder, &arr_enc);
   30892:	a901      	add	r1, sp, #4
   30894:	4638      	mov	r0, r7
   30896:	f7fb fff2 	bl	2c87e <cbor_encoder_close_container>
    if (err != 0) {
   3089a:	ea56 0300 	orrs.w	r3, r6, r0
   3089e:	d101      	bne.n	308a4 <stat_mgmt_list+0x80>
    return 0;
   308a0:	2400      	movs	r4, #0
   308a2:	e7f3      	b.n	3088c <stat_mgmt_list+0x68>
        return MGMT_ERR_ENOMEM;
   308a4:	2402      	movs	r4, #2
   308a6:	e7f1      	b.n	3088c <stat_mgmt_list+0x68>
   308a8:	000318e4 	.word	0x000318e4
   308ac:	00032de4 	.word	0x00032de4

000308b0 <stat_mgmt_show>:
{
   308b0:	b570      	push	{r4, r5, r6, lr}
   308b2:	b0a4      	sub	sp, #144	; 0x90
   308b4:	4605      	mov	r5, r0
    struct cbor_attr_t attrs[] = {
   308b6:	225c      	movs	r2, #92	; 0x5c
   308b8:	2100      	movs	r1, #0
   308ba:	a801      	add	r0, sp, #4
   308bc:	f7de f898 	bl	e9f0 <memset>
   308c0:	4b25      	ldr	r3, [pc, #148]	; (30958 <stat_mgmt_show+0xa8>)
   308c2:	9300      	str	r3, [sp, #0]
   308c4:	2304      	movs	r3, #4
   308c6:	f88d 3004 	strb.w	r3, [sp, #4]
   308ca:	ab1c      	add	r3, sp, #112	; 0x70
   308cc:	9302      	str	r3, [sp, #8]
   308ce:	2320      	movs	r3, #32
   308d0:	930a      	str	r3, [sp, #40]	; 0x28
    err = cbor_read_object(&ctxt->it, attrs);
   308d2:	4669      	mov	r1, sp
   308d4:	f105 001c 	add.w	r0, r5, #28
   308d8:	f7e2 f965 	bl	12ba6 <cbor_read_object>
    if (err != 0) {
   308dc:	2800      	cmp	r0, #0
   308de:	d137      	bne.n	30950 <stat_mgmt_show+0xa0>
   308e0:	4604      	mov	r4, r0
   308e2:	2202      	movs	r2, #2
   308e4:	491d      	ldr	r1, [pc, #116]	; (3095c <stat_mgmt_show+0xac>)
   308e6:	4628      	mov	r0, r5
   308e8:	f7fb ffa5 	bl	2c836 <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&ctxt->encoder, "rc");
   308ec:	4304      	orrs	r4, r0
    err |= cbor_encode_int(&ctxt->encoder, MGMT_ERR_EOK);
   308ee:	2200      	movs	r2, #0
   308f0:	2300      	movs	r3, #0
   308f2:	4628      	mov	r0, r5
   308f4:	f7fb ff1e 	bl	2c734 <cbor_encode_int>
   308f8:	4304      	orrs	r4, r0
   308fa:	2204      	movs	r2, #4
   308fc:	4916      	ldr	r1, [pc, #88]	; (30958 <stat_mgmt_show+0xa8>)
   308fe:	4628      	mov	r0, r5
   30900:	f7fb ff99 	bl	2c836 <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&ctxt->encoder, "name");
   30904:	4304      	orrs	r4, r0
   30906:	a81c      	add	r0, sp, #112	; 0x70
   30908:	f7de f8e8 	bl	eadc <strlen>
   3090c:	4602      	mov	r2, r0
   3090e:	a91c      	add	r1, sp, #112	; 0x70
   30910:	4628      	mov	r0, r5
   30912:	f7fb ff90 	bl	2c836 <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&ctxt->encoder, stat_name);
   30916:	4304      	orrs	r4, r0
   30918:	2206      	movs	r2, #6
   3091a:	4911      	ldr	r1, [pc, #68]	; (30960 <stat_mgmt_show+0xb0>)
   3091c:	4628      	mov	r0, r5
   3091e:	f7fb ff8a 	bl	2c836 <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&ctxt->encoder, "fields");
   30922:	4304      	orrs	r4, r0
    err |= cbor_encoder_create_map(&ctxt->encoder, &map_enc,
   30924:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   30928:	a918      	add	r1, sp, #96	; 0x60
   3092a:	4628      	mov	r0, r5
   3092c:	f7fb ff90 	bl	2c850 <cbor_encoder_create_map>
   30930:	4304      	orrs	r4, r0
    rc = stat_mgmt_impl_foreach_entry(stat_name, stat_mgmt_cb_encode,
   30932:	aa18      	add	r2, sp, #96	; 0x60
   30934:	490b      	ldr	r1, [pc, #44]	; (30964 <stat_mgmt_show+0xb4>)
   30936:	a81c      	add	r0, sp, #112	; 0x70
   30938:	f7e3 faac 	bl	13e94 <stat_mgmt_impl_foreach_entry>
   3093c:	4606      	mov	r6, r0
    err |= cbor_encoder_close_container(&ctxt->encoder, &map_enc);
   3093e:	a918      	add	r1, sp, #96	; 0x60
   30940:	4628      	mov	r0, r5
   30942:	f7fb ff9c 	bl	2c87e <cbor_encoder_close_container>
    if (err != 0) {
   30946:	ea54 0300 	orrs.w	r3, r4, r0
   3094a:	d002      	beq.n	30952 <stat_mgmt_show+0xa2>
        rc = MGMT_ERR_ENOMEM;
   3094c:	2602      	movs	r6, #2
   3094e:	e000      	b.n	30952 <stat_mgmt_show+0xa2>
        return MGMT_ERR_EINVAL;
   30950:	2603      	movs	r6, #3
}
   30952:	4630      	mov	r0, r6
   30954:	b024      	add	sp, #144	; 0x90
   30956:	bd70      	pop	{r4, r5, r6, pc}
   30958:	00032d6c 	.word	0x00032d6c
   3095c:	000318e4 	.word	0x000318e4
   30960:	00032df0 	.word	0x00032df0
   30964:	00030969 	.word	0x00030969

00030968 <stat_mgmt_cb_encode>:
{
   30968:	b570      	push	{r4, r5, r6, lr}
   3096a:	4605      	mov	r5, r0
   3096c:	460c      	mov	r4, r1
    err |= cbor_encode_text_stringz(enc, entry->name);
   3096e:	6806      	ldr	r6, [r0, #0]
   30970:	4630      	mov	r0, r6
   30972:	f7de f8b3 	bl	eadc <strlen>
   30976:	4602      	mov	r2, r0
   30978:	4631      	mov	r1, r6
   3097a:	4620      	mov	r0, r4
   3097c:	f7fb ff5b 	bl	2c836 <cbor_encode_text_string>
   30980:	4606      	mov	r6, r0
    err |= cbor_encode_uint(enc, entry->value);
   30982:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
   30986:	4620      	mov	r0, r4
   30988:	f7fb fe9f 	bl	2c6ca <cbor_encode_uint>
    if (err != 0) {
   3098c:	ea50 0306 	orrs.w	r3, r0, r6
   30990:	d101      	bne.n	30996 <stat_mgmt_cb_encode+0x2e>
    return 0;
   30992:	2000      	movs	r0, #0
}
   30994:	bd70      	pop	{r4, r5, r6, pc}
        return MGMT_ERR_ENOMEM;
   30996:	2002      	movs	r0, #2
   30998:	e7fc      	b.n	30994 <stat_mgmt_cb_encode+0x2c>
	...

0003099c <stat_mgmt_register_group>:

void
stat_mgmt_register_group(void)
{
   3099c:	b508      	push	{r3, lr}
    mgmt_register_group(&stat_mgmt_group);
   3099e:	4802      	ldr	r0, [pc, #8]	; (309a8 <stat_mgmt_register_group+0xc>)
   309a0:	f7e3 fb02 	bl	13fa8 <mgmt_register_group>
}
   309a4:	bd08      	pop	{r3, pc}
   309a6:	bf00      	nop
   309a8:	2000053c 	.word	0x2000053c

000309ac <uart_hal_blocking_tx>:
    hal_uart_start_rx(uart_hal_dev_get_id(dev));
}

static void
uart_hal_blocking_tx(struct uart_dev *dev, uint8_t byte)
{
   309ac:	b508      	push	{r3, lr}
    assert(dev->ud_priv);
   309ae:	6b80      	ldr	r0, [r0, #56]	; 0x38
   309b0:	b118      	cbz	r0, 309ba <uart_hal_blocking_tx+0xe>

    hal_uart_blocking_tx(uart_hal_dev_get_id(dev), byte);
   309b2:	3801      	subs	r0, #1
   309b4:	f000 fa2a 	bl	30e0c <hal_uart_blocking_tx>
}
   309b8:	bd08      	pop	{r3, pc}
    assert(dev->ud_priv);
   309ba:	f7db fc15 	bl	c1e8 <hal_debugger_connected>
   309be:	b100      	cbz	r0, 309c2 <uart_hal_blocking_tx+0x16>
   309c0:	be01      	bkpt	0x0001
   309c2:	2300      	movs	r3, #0
   309c4:	461a      	mov	r2, r3
   309c6:	4619      	mov	r1, r3
   309c8:	4618      	mov	r0, r3
   309ca:	f7dc f8c1 	bl	cb50 <__assert_func>

000309ce <uart_hal_start_rx>:
{
   309ce:	b508      	push	{r3, lr}
    assert(dev->ud_priv);
   309d0:	6b80      	ldr	r0, [r0, #56]	; 0x38
   309d2:	b118      	cbz	r0, 309dc <uart_hal_start_rx+0xe>
    hal_uart_start_rx(uart_hal_dev_get_id(dev));
   309d4:	3801      	subs	r0, #1
   309d6:	f000 f9f3 	bl	30dc0 <hal_uart_start_rx>
}
   309da:	bd08      	pop	{r3, pc}
    assert(dev->ud_priv);
   309dc:	f7db fc04 	bl	c1e8 <hal_debugger_connected>
   309e0:	b100      	cbz	r0, 309e4 <uart_hal_start_rx+0x16>
   309e2:	be01      	bkpt	0x0001
   309e4:	2300      	movs	r3, #0
   309e6:	461a      	mov	r2, r3
   309e8:	4619      	mov	r1, r3
   309ea:	4618      	mov	r0, r3
   309ec:	f7dc f8b0 	bl	cb50 <__assert_func>

000309f0 <uart_hal_start_tx>:
{
   309f0:	b508      	push	{r3, lr}
    assert(dev->ud_priv);
   309f2:	6b80      	ldr	r0, [r0, #56]	; 0x38
   309f4:	b118      	cbz	r0, 309fe <uart_hal_start_tx+0xe>
    hal_uart_start_tx(uart_hal_dev_get_id(dev));
   309f6:	3801      	subs	r0, #1
   309f8:	f000 f9b2 	bl	30d60 <hal_uart_start_tx>
}
   309fc:	bd08      	pop	{r3, pc}
    assert(dev->ud_priv);
   309fe:	f7db fbf3 	bl	c1e8 <hal_debugger_connected>
   30a02:	b100      	cbz	r0, 30a06 <uart_hal_start_tx+0x16>
   30a04:	be01      	bkpt	0x0001
   30a06:	2300      	movs	r3, #0
   30a08:	461a      	mov	r2, r3
   30a0a:	4619      	mov	r1, r3
   30a0c:	4618      	mov	r0, r3
   30a0e:	f7dc f89f 	bl	cb50 <__assert_func>

00030a12 <uart_hal_resume>:
    return OS_OK;
}

static int
uart_hal_resume(struct os_dev *odev)
{
   30a12:	b530      	push	{r4, r5, lr}
   30a14:	b083      	sub	sp, #12
    return (intptr_t)(dev->ud_priv) - 1;
   30a16:	6b84      	ldr	r4, [r0, #56]	; 0x38
    struct uart_dev *dev = (struct uart_dev *)odev;
    struct uart_conf_port *ucp = &dev->ud_conf_port;
    int rc;

    rc = hal_uart_config(uart_hal_dev_get_id(dev), ucp->uc_speed,
   30a18:	6b01      	ldr	r1, [r0, #48]	; 0x30
   30a1a:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
   30a1e:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
                         ucp->uc_databits, ucp->uc_stopbits,
                         (enum hal_uart_parity)ucp->uc_parity,
   30a22:	f890 5036 	ldrb.w	r5, [r0, #54]	; 0x36
                         (enum hal_uart_flow_ctl)ucp->uc_flow_ctl);
   30a26:	f890 0037 	ldrb.w	r0, [r0, #55]	; 0x37
    rc = hal_uart_config(uart_hal_dev_get_id(dev), ucp->uc_speed,
   30a2a:	9001      	str	r0, [sp, #4]
   30a2c:	9500      	str	r5, [sp, #0]
   30a2e:	1e60      	subs	r0, r4, #1
   30a30:	f000 fa4c 	bl	30ecc <hal_uart_config>
    if (rc) {
   30a34:	4603      	mov	r3, r0
   30a36:	b910      	cbnz	r0, 30a3e <uart_hal_resume+0x2c>
        return OS_EINVAL;
    }

    return OS_OK;
}
   30a38:	4618      	mov	r0, r3
   30a3a:	b003      	add	sp, #12
   30a3c:	bd30      	pop	{r4, r5, pc}
        return OS_EINVAL;
   30a3e:	2302      	movs	r3, #2
   30a40:	e7fa      	b.n	30a38 <uart_hal_resume+0x26>

00030a42 <uart_hal_suspend>:
{
   30a42:	b570      	push	{r4, r5, r6, lr}
   30a44:	4606      	mov	r6, r0
   30a46:	460c      	mov	r4, r1
   30a48:	4615      	mov	r5, r2
    if (OS_TIME_TICK_GT(suspend_at, os_time_get()) || !force) {
   30a4a:	f7dd fcb1 	bl	e3b0 <os_time_get>
   30a4e:	1a20      	subs	r0, r4, r0
   30a50:	2800      	cmp	r0, #0
   30a52:	dc08      	bgt.n	30a66 <uart_hal_suspend+0x24>
   30a54:	b155      	cbz	r5, 30a6c <uart_hal_suspend+0x2a>
    return (intptr_t)(dev->ud_priv) - 1;
   30a56:	6bb0      	ldr	r0, [r6, #56]	; 0x38
    rc = hal_uart_close(uart_hal_dev_get_id(dev));
   30a58:	3801      	subs	r0, #1
   30a5a:	f000 fab7 	bl	30fcc <hal_uart_close>
    if (rc) {
   30a5e:	4603      	mov	r3, r0
   30a60:	b110      	cbz	r0, 30a68 <uart_hal_suspend+0x26>
        return OS_EINVAL;
   30a62:	2302      	movs	r3, #2
   30a64:	e000      	b.n	30a68 <uart_hal_suspend+0x26>
        return OS_EINVAL;
   30a66:	2302      	movs	r3, #2
}
   30a68:	4618      	mov	r0, r3
   30a6a:	bd70      	pop	{r4, r5, r6, pc}
        return OS_EINVAL;
   30a6c:	2302      	movs	r3, #2
   30a6e:	e7fb      	b.n	30a68 <uart_hal_suspend+0x26>

00030a70 <uart_hal_close>:
{
   30a70:	b508      	push	{r3, lr}
    return (intptr_t)(dev->ud_priv) - 1;
   30a72:	6b80      	ldr	r0, [r0, #56]	; 0x38
    rc = hal_uart_close(uart_hal_dev_get_id(dev));
   30a74:	3801      	subs	r0, #1
   30a76:	f000 faa9 	bl	30fcc <hal_uart_close>
    if (rc) {
   30a7a:	4603      	mov	r3, r0
   30a7c:	b908      	cbnz	r0, 30a82 <uart_hal_close+0x12>
}
   30a7e:	4618      	mov	r0, r3
   30a80:	bd08      	pop	{r3, pc}
        return OS_EINVAL;
   30a82:	2302      	movs	r3, #2
   30a84:	e7fb      	b.n	30a7e <uart_hal_close+0xe>

00030a86 <uart_hal_open>:
{
   30a86:	b530      	push	{r4, r5, lr}
   30a88:	b083      	sub	sp, #12
   30a8a:	4605      	mov	r5, r0
    assert(dev->ud_priv);
   30a8c:	6b80      	ldr	r0, [r0, #56]	; 0x38
   30a8e:	2800      	cmp	r0, #0
   30a90:	d02c      	beq.n	30aec <uart_hal_open+0x66>
   30a92:	4614      	mov	r4, r2
    if (!uc) {
   30a94:	2a00      	cmp	r2, #0
   30a96:	d033      	beq.n	30b00 <uart_hal_open+0x7a>
    if (odev->od_flags & OS_DEV_F_STATUS_OPEN) {
   30a98:	7eeb      	ldrb	r3, [r5, #27]
   30a9a:	f013 0f02 	tst.w	r3, #2
   30a9e:	d131      	bne.n	30b04 <uart_hal_open+0x7e>
    dev->ud_conf_port.uc_databits = uc->uc_databits;
   30aa0:	7913      	ldrb	r3, [r2, #4]
   30aa2:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
    dev->ud_conf_port.uc_flow_ctl = uc->uc_flow_ctl;
   30aa6:	79d3      	ldrb	r3, [r2, #7]
   30aa8:	f885 3037 	strb.w	r3, [r5, #55]	; 0x37
    dev->ud_conf_port.uc_parity = uc->uc_parity;
   30aac:	7993      	ldrb	r3, [r2, #6]
   30aae:	f885 3036 	strb.w	r3, [r5, #54]	; 0x36
    dev->ud_conf_port.uc_speed = uc->uc_speed;
   30ab2:	6813      	ldr	r3, [r2, #0]
   30ab4:	632b      	str	r3, [r5, #48]	; 0x30
    dev->ud_conf_port.uc_stopbits = uc->uc_stopbits;
   30ab6:	7953      	ldrb	r3, [r2, #5]
   30ab8:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
    rc = hal_uart_init_cbs(uart_hal_dev_get_id(dev), uc->uc_tx_char, uc->uc_tx_done,
   30abc:	6953      	ldr	r3, [r2, #20]
   30abe:	9300      	str	r3, [sp, #0]
   30ac0:	68d3      	ldr	r3, [r2, #12]
   30ac2:	6912      	ldr	r2, [r2, #16]
   30ac4:	68a1      	ldr	r1, [r4, #8]
   30ac6:	3801      	subs	r0, #1
   30ac8:	f000 f92c 	bl	30d24 <hal_uart_init_cbs>
    if (rc) {
   30acc:	b9f0      	cbnz	r0, 30b0c <uart_hal_open+0x86>
    return (intptr_t)(dev->ud_priv) - 1;
   30ace:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    rc = hal_uart_config(uart_hal_dev_get_id(dev), uc->uc_speed, uc->uc_databits,
   30ad0:	6821      	ldr	r1, [r4, #0]
   30ad2:	7922      	ldrb	r2, [r4, #4]
   30ad4:	7963      	ldrb	r3, [r4, #5]
      uc->uc_stopbits, (enum hal_uart_parity)uc->uc_parity, (enum hal_uart_flow_ctl)uc->uc_flow_ctl);
   30ad6:	79a5      	ldrb	r5, [r4, #6]
   30ad8:	79e4      	ldrb	r4, [r4, #7]
    rc = hal_uart_config(uart_hal_dev_get_id(dev), uc->uc_speed, uc->uc_databits,
   30ada:	9401      	str	r4, [sp, #4]
   30adc:	9500      	str	r5, [sp, #0]
   30ade:	3801      	subs	r0, #1
   30ae0:	f000 f9f4 	bl	30ecc <hal_uart_config>
    if (rc) {
   30ae4:	4603      	mov	r3, r0
   30ae6:	b170      	cbz	r0, 30b06 <uart_hal_open+0x80>
        return OS_EINVAL;
   30ae8:	2302      	movs	r3, #2
   30aea:	e00c      	b.n	30b06 <uart_hal_open+0x80>
    assert(dev->ud_priv);
   30aec:	f7db fb7c 	bl	c1e8 <hal_debugger_connected>
   30af0:	b100      	cbz	r0, 30af4 <uart_hal_open+0x6e>
   30af2:	be01      	bkpt	0x0001
   30af4:	2300      	movs	r3, #0
   30af6:	461a      	mov	r2, r3
   30af8:	4619      	mov	r1, r3
   30afa:	4618      	mov	r0, r3
   30afc:	f7dc f828 	bl	cb50 <__assert_func>
        return OS_EINVAL;
   30b00:	2302      	movs	r3, #2
   30b02:	e000      	b.n	30b06 <uart_hal_open+0x80>
        return OS_EBUSY;
   30b04:	230b      	movs	r3, #11
}
   30b06:	4618      	mov	r0, r3
   30b08:	b003      	add	sp, #12
   30b0a:	bd30      	pop	{r4, r5, pc}
        return OS_EINVAL;
   30b0c:	2302      	movs	r3, #2
   30b0e:	e7fa      	b.n	30b06 <uart_hal_open+0x80>

00030b10 <uart_hal_init>:
/*
 * Arg points to BSP specific UART configuration.
 */
int
uart_hal_init(struct os_dev *odev, void *arg)
{
   30b10:	b570      	push	{r4, r5, r6, lr}
   30b12:	4604      	mov	r4, r0
   30b14:	460e      	mov	r6, r1
    struct uart_dev *dev;
    char ch;

    dev = (struct uart_dev *)odev;

    ch = odev->od_name[strlen(odev->od_name) - 1];
   30b16:	69c5      	ldr	r5, [r0, #28]
   30b18:	4628      	mov	r0, r5
   30b1a:	f7dd ffdf 	bl	eadc <strlen>
   30b1e:	3801      	subs	r0, #1
   30b20:	5c28      	ldrb	r0, [r5, r0]
    if (!isdigit((int) ch)) {
   30b22:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   30b26:	2b09      	cmp	r3, #9
   30b28:	d816      	bhi.n	30b58 <uart_hal_init+0x48>
    dev->ud_priv = (void *)((intptr_t)(id + 1));
   30b2a:	f1a0 032f 	sub.w	r3, r0, #47	; 0x2f
   30b2e:	63a3      	str	r3, [r4, #56]	; 0x38
        return OS_EINVAL;
    }
    uart_hal_dev_set_id(dev, ch - '0');

    OS_DEV_SETHANDLERS(odev, uart_hal_open, uart_hal_close);
   30b30:	4b0a      	ldr	r3, [pc, #40]	; (30b5c <uart_hal_init+0x4c>)
   30b32:	6023      	str	r3, [r4, #0]
   30b34:	4b0a      	ldr	r3, [pc, #40]	; (30b60 <uart_hal_init+0x50>)
   30b36:	60e3      	str	r3, [r4, #12]
    odev->od_handlers.od_suspend = uart_hal_suspend;
   30b38:	4b0a      	ldr	r3, [pc, #40]	; (30b64 <uart_hal_init+0x54>)
   30b3a:	6063      	str	r3, [r4, #4]
    odev->od_handlers.od_resume = uart_hal_resume;
   30b3c:	4b0a      	ldr	r3, [pc, #40]	; (30b68 <uart_hal_init+0x58>)
   30b3e:	60a3      	str	r3, [r4, #8]

    dev->ud_funcs.uf_start_tx = uart_hal_start_tx;
   30b40:	4b0a      	ldr	r3, [pc, #40]	; (30b6c <uart_hal_init+0x5c>)
   30b42:	6263      	str	r3, [r4, #36]	; 0x24
    dev->ud_funcs.uf_start_rx = uart_hal_start_rx;
   30b44:	4b0a      	ldr	r3, [pc, #40]	; (30b70 <uart_hal_init+0x60>)
   30b46:	62a3      	str	r3, [r4, #40]	; 0x28
    dev->ud_funcs.uf_blocking_tx = uart_hal_blocking_tx;
   30b48:	4b0a      	ldr	r3, [pc, #40]	; (30b74 <uart_hal_init+0x64>)
   30b4a:	62e3      	str	r3, [r4, #44]	; 0x2c

    hal_uart_init(uart_hal_dev_get_id(dev), arg);
   30b4c:	4631      	mov	r1, r6
   30b4e:	3830      	subs	r0, #48	; 0x30
   30b50:	f000 f98e 	bl	30e70 <hal_uart_init>

    return OS_OK;
   30b54:	2000      	movs	r0, #0
}
   30b56:	bd70      	pop	{r4, r5, r6, pc}
        return OS_EINVAL;
   30b58:	2002      	movs	r0, #2
   30b5a:	e7fc      	b.n	30b56 <uart_hal_init+0x46>
   30b5c:	00030a87 	.word	0x00030a87
   30b60:	00030a71 	.word	0x00030a71
   30b64:	00030a43 	.word	0x00030a43
   30b68:	00030a13 	.word	0x00030a13
   30b6c:	000309f1 	.word	0x000309f1
   30b70:	000309cf 	.word	0x000309cf
   30b74:	000309ad 	.word	0x000309ad

00030b78 <hal_uart_tx_fill_buf>:
    return 0;
}

static int
hal_uart_tx_fill_buf(struct hal_uart *u)
{
   30b78:	b538      	push	{r3, r4, r5, lr}
   30b7a:	4605      	mov	r5, r0
    int data;
    int i;

    for (i = 0; i < sizeof(u->u_tx_buf); i++) {
   30b7c:	2400      	movs	r4, #0
   30b7e:	2c07      	cmp	r4, #7
   30b80:	d808      	bhi.n	30b94 <hal_uart_tx_fill_buf+0x1c>
        data = u->u_tx_func(u->u_func_arg);
   30b82:	692b      	ldr	r3, [r5, #16]
   30b84:	69a8      	ldr	r0, [r5, #24]
   30b86:	4798      	blx	r3
        if (data < 0) {
   30b88:	2800      	cmp	r0, #0
   30b8a:	db03      	blt.n	30b94 <hal_uart_tx_fill_buf+0x1c>
            break;
        }
        u->u_tx_buf[i] = data;
   30b8c:	192b      	adds	r3, r5, r4
   30b8e:	7098      	strb	r0, [r3, #2]
    for (i = 0; i < sizeof(u->u_tx_buf); i++) {
   30b90:	3401      	adds	r4, #1
   30b92:	e7f4      	b.n	30b7e <hal_uart_tx_fill_buf+0x6>
    }
    return i;
}
   30b94:	4620      	mov	r0, r4
   30b96:	bd38      	pop	{r3, r4, r5, pc}

00030b98 <uart_irq_handler>:
    nrf_uart->TASKS_STOPTX = 1;
}

static void
uart_irq_handler(NRF_UARTE_Type *nrf_uart, struct hal_uart *u)
{
   30b98:	b538      	push	{r3, r4, r5, lr}
   30b9a:	4604      	mov	r4, r0
   30b9c:	460d      	mov	r5, r1
    int rc;

    os_trace_isr_enter();

    if (nrf_uart->EVENTS_ENDTX) {
   30b9e:	f8d0 3120 	ldr.w	r3, [r0, #288]	; 0x120
   30ba2:	b973      	cbnz	r3, 30bc2 <uart_irq_handler+0x2a>
            nrf_uart->INTENCLR = UARTE_INT_ENDTX;
            nrf_uart->TASKS_STOPTX = 1;
            u->u_tx_started = 0;
        }
    }
    if (nrf_uart->EVENTS_ENDRX) {
   30ba4:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   30ba8:	b153      	cbz	r3, 30bc0 <uart_irq_handler+0x28>
        nrf_uart->EVENTS_ENDRX = 0;
   30baa:	2300      	movs	r3, #0
   30bac:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
        rc = u->u_rx_func(u->u_func_arg, u->u_rx_buf);
   30bb0:	68eb      	ldr	r3, [r5, #12]
   30bb2:	7869      	ldrb	r1, [r5, #1]
   30bb4:	69a8      	ldr	r0, [r5, #24]
   30bb6:	4798      	blx	r3
        if (rc < 0) {
   30bb8:	2800      	cmp	r0, #0
   30bba:	db21      	blt.n	30c00 <uart_irq_handler+0x68>
            u->u_rx_stall = 1;
        } else {
            nrf_uart->TASKS_STARTRX = 1;
   30bbc:	2301      	movs	r3, #1
   30bbe:	6023      	str	r3, [r4, #0]
        }
    }
    os_trace_isr_exit();
}
   30bc0:	bd38      	pop	{r3, r4, r5, pc}
        nrf_uart->EVENTS_ENDTX = 0;
   30bc2:	2300      	movs	r3, #0
   30bc4:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
        rc = hal_uart_tx_fill_buf(u);
   30bc8:	4608      	mov	r0, r1
   30bca:	f7ff ffd5 	bl	30b78 <hal_uart_tx_fill_buf>
        if (rc > 0) {
   30bce:	2800      	cmp	r0, #0
   30bd0:	dd07      	ble.n	30be2 <uart_irq_handler+0x4a>
            nrf_uart->TXD.PTR = (uint32_t)&u->u_tx_buf;
   30bd2:	1cab      	adds	r3, r5, #2
   30bd4:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
            nrf_uart->TXD.MAXCNT = rc;
   30bd8:	f8c4 0548 	str.w	r0, [r4, #1352]	; 0x548
            nrf_uart->TASKS_STARTTX = 1;
   30bdc:	2301      	movs	r3, #1
   30bde:	60a3      	str	r3, [r4, #8]
   30be0:	e7e0      	b.n	30ba4 <uart_irq_handler+0xc>
            if (u->u_tx_done) {
   30be2:	696b      	ldr	r3, [r5, #20]
   30be4:	b10b      	cbz	r3, 30bea <uart_irq_handler+0x52>
                u->u_tx_done(u->u_func_arg);
   30be6:	69a8      	ldr	r0, [r5, #24]
   30be8:	4798      	blx	r3
            nrf_uart->INTENCLR = UARTE_INT_ENDTX;
   30bea:	f44f 7380 	mov.w	r3, #256	; 0x100
   30bee:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
            nrf_uart->TASKS_STOPTX = 1;
   30bf2:	2301      	movs	r3, #1
   30bf4:	60e3      	str	r3, [r4, #12]
            u->u_tx_started = 0;
   30bf6:	782b      	ldrb	r3, [r5, #0]
   30bf8:	f36f 0382 	bfc	r3, #2, #1
   30bfc:	702b      	strb	r3, [r5, #0]
   30bfe:	e7d1      	b.n	30ba4 <uart_irq_handler+0xc>
            u->u_rx_stall = 1;
   30c00:	782b      	ldrb	r3, [r5, #0]
   30c02:	f043 0302 	orr.w	r3, r3, #2
   30c06:	702b      	strb	r3, [r5, #0]
   30c08:	e7da      	b.n	30bc0 <uart_irq_handler+0x28>
	...

00030c0c <uart0_irq_handler>:

static void
uart0_irq_handler(void)
{
   30c0c:	b508      	push	{r3, lr}
    uart_irq_handler(NRF_UARTE0, &uart0);
   30c0e:	4902      	ldr	r1, [pc, #8]	; (30c18 <uart0_irq_handler+0xc>)
   30c10:	4802      	ldr	r0, [pc, #8]	; (30c1c <uart0_irq_handler+0x10>)
   30c12:	f7ff ffc1 	bl	30b98 <uart_irq_handler>
}
   30c16:	bd08      	pop	{r3, pc}
   30c18:	20003310 	.word	0x20003310
   30c1c:	40002000 	.word	0x40002000

00030c20 <uart1_irq_handler>:

#if defined(NRF52840_XXAA)
static void
uart1_irq_handler(void)
{
   30c20:	b508      	push	{r3, lr}
    uart_irq_handler(NRF_UARTE1, &uart1);
   30c22:	4902      	ldr	r1, [pc, #8]	; (30c2c <uart1_irq_handler+0xc>)
   30c24:	4802      	ldr	r0, [pc, #8]	; (30c30 <uart1_irq_handler+0x10>)
   30c26:	f7ff ffb7 	bl	30b98 <uart_irq_handler>
}
   30c2a:	bd08      	pop	{r3, pc}
   30c2c:	2000332c 	.word	0x2000332c
   30c30:	40028000 	.word	0x40028000

00030c34 <hal_uart_baudrate>:
#endif

static uint32_t
hal_uart_baudrate(int baudrate)
{
    switch (baudrate) {
   30c34:	f64d 23c0 	movw	r3, #56000	; 0xdac0
   30c38:	4298      	cmp	r0, r3
   30c3a:	d04f      	beq.n	30cdc <hal_uart_baudrate+0xa8>
   30c3c:	dc20      	bgt.n	30c80 <hal_uart_baudrate+0x4c>
   30c3e:	f5b0 5f16 	cmp.w	r0, #9600	; 0x2580
   30c42:	d045      	beq.n	30cd0 <hal_uart_baudrate+0x9c>
   30c44:	dd0c      	ble.n	30c60 <hal_uart_baudrate+0x2c>
   30c46:	f5b0 4f96 	cmp.w	r0, #19200	; 0x4b00
   30c4a:	d043      	beq.n	30cd4 <hal_uart_baudrate+0xa0>
   30c4c:	dd13      	ble.n	30c76 <hal_uart_baudrate+0x42>
   30c4e:	f5b0 4fe1 	cmp.w	r0, #28800	; 0x7080
   30c52:	d041      	beq.n	30cd8 <hal_uart_baudrate+0xa4>
   30c54:	f5b0 4f16 	cmp.w	r0, #38400	; 0x9600
   30c58:	d10b      	bne.n	30c72 <hal_uart_baudrate+0x3e>
    case 19200:
        return UARTE_BAUDRATE_BAUDRATE_Baud19200;
    case 28800:
        return UARTE_BAUDRATE_BAUDRATE_Baud28800;
    case 38400:
        return UARTE_BAUDRATE_BAUDRATE_Baud38400;
   30c5a:	f44f 001d 	mov.w	r0, #10289152	; 0x9d0000
   30c5e:	4770      	bx	lr
    switch (baudrate) {
   30c60:	f5b0 6f16 	cmp.w	r0, #2400	; 0x960
   30c64:	d04b      	beq.n	30cfe <hal_uart_baudrate+0xca>
   30c66:	f5b0 5f96 	cmp.w	r0, #4800	; 0x12c0
   30c6a:	d02f      	beq.n	30ccc <hal_uart_baudrate+0x98>
   30c6c:	f5b0 6f96 	cmp.w	r0, #1200	; 0x4b0
   30c70:	d029      	beq.n	30cc6 <hal_uart_baudrate+0x92>
    case 921600:
        return UARTE_BAUDRATE_BAUDRATE_Baud921600;
    case 1000000:
        return UARTE_BAUDRATE_BAUDRATE_Baud1M;
    default:
        return 0;
   30c72:	2000      	movs	r0, #0
   30c74:	4770      	bx	lr
    switch (baudrate) {
   30c76:	f5b0 5f61 	cmp.w	r0, #14400	; 0x3840
   30c7a:	d1fa      	bne.n	30c72 <hal_uart_baudrate+0x3e>
        return UARTE_BAUDRATE_BAUDRATE_Baud14400;
   30c7c:	4821      	ldr	r0, [pc, #132]	; (30d04 <hal_uart_baudrate+0xd0>)
   30c7e:	4770      	bx	lr
    switch (baudrate) {
   30c80:	f5b0 3f61 	cmp.w	r0, #230400	; 0x38400
   30c84:	d032      	beq.n	30cec <hal_uart_baudrate+0xb8>
   30c86:	dd0c      	ble.n	30ca2 <hal_uart_baudrate+0x6e>
   30c88:	f5b0 2fe1 	cmp.w	r0, #460800	; 0x70800
   30c8c:	d031      	beq.n	30cf2 <hal_uart_baudrate+0xbe>
   30c8e:	dd14      	ble.n	30cba <hal_uart_baudrate+0x86>
   30c90:	f5b0 2f61 	cmp.w	r0, #921600	; 0xe1000
   30c94:	d030      	beq.n	30cf8 <hal_uart_baudrate+0xc4>
   30c96:	4b1c      	ldr	r3, [pc, #112]	; (30d08 <hal_uart_baudrate+0xd4>)
   30c98:	4298      	cmp	r0, r3
   30c9a:	d1ea      	bne.n	30c72 <hal_uart_baudrate+0x3e>
        return UARTE_BAUDRATE_BAUDRATE_Baud1M;
   30c9c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   30ca0:	4770      	bx	lr
    switch (baudrate) {
   30ca2:	f5b0 3f96 	cmp.w	r0, #76800	; 0x12c00
   30ca6:	d01c      	beq.n	30ce2 <hal_uart_baudrate+0xae>
   30ca8:	f5b0 3fe1 	cmp.w	r0, #115200	; 0x1c200
   30cac:	d01b      	beq.n	30ce6 <hal_uart_baudrate+0xb2>
   30cae:	f5b0 4f61 	cmp.w	r0, #57600	; 0xe100
   30cb2:	d1de      	bne.n	30c72 <hal_uart_baudrate+0x3e>
        return UARTE_BAUDRATE_BAUDRATE_Baud57600;
   30cb4:	f44f 006b 	mov.w	r0, #15400960	; 0xeb0000
   30cb8:	4770      	bx	lr
    switch (baudrate) {
   30cba:	4b14      	ldr	r3, [pc, #80]	; (30d0c <hal_uart_baudrate+0xd8>)
   30cbc:	4298      	cmp	r0, r3
   30cbe:	d1d8      	bne.n	30c72 <hal_uart_baudrate+0x3e>
        return UARTE_BAUDRATE_BAUDRATE_Baud250000;
   30cc0:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
   30cc4:	4770      	bx	lr
        return UARTE_BAUDRATE_BAUDRATE_Baud1200;
   30cc6:	f44f 209e 	mov.w	r0, #323584	; 0x4f000
   30cca:	4770      	bx	lr
        return UARTE_BAUDRATE_BAUDRATE_Baud4800;
   30ccc:	4810      	ldr	r0, [pc, #64]	; (30d10 <hal_uart_baudrate+0xdc>)
   30cce:	4770      	bx	lr
        return UARTE_BAUDRATE_BAUDRATE_Baud9600;
   30cd0:	4810      	ldr	r0, [pc, #64]	; (30d14 <hal_uart_baudrate+0xe0>)
   30cd2:	4770      	bx	lr
        return UARTE_BAUDRATE_BAUDRATE_Baud19200;
   30cd4:	4810      	ldr	r0, [pc, #64]	; (30d18 <hal_uart_baudrate+0xe4>)
   30cd6:	4770      	bx	lr
        return UARTE_BAUDRATE_BAUDRATE_Baud28800;
   30cd8:	4810      	ldr	r0, [pc, #64]	; (30d1c <hal_uart_baudrate+0xe8>)
   30cda:	4770      	bx	lr
        return UARTE_BAUDRATE_BAUDRATE_Baud56000;
   30cdc:	f44f 0065 	mov.w	r0, #15007744	; 0xe50000
   30ce0:	4770      	bx	lr
        return UARTE_BAUDRATE_BAUDRATE_Baud76800;
   30ce2:	480f      	ldr	r0, [pc, #60]	; (30d20 <hal_uart_baudrate+0xec>)
   30ce4:	4770      	bx	lr
        return UARTE_BAUDRATE_BAUDRATE_Baud115200;
   30ce6:	f04f 70eb 	mov.w	r0, #30801920	; 0x1d60000
   30cea:	4770      	bx	lr
        return UARTE_BAUDRATE_BAUDRATE_Baud230400;
   30cec:	f04f 706c 	mov.w	r0, #61865984	; 0x3b00000
   30cf0:	4770      	bx	lr
        return UARTE_BAUDRATE_BAUDRATE_Baud460800;
   30cf2:	f04f 60e8 	mov.w	r0, #121634816	; 0x7400000
   30cf6:	4770      	bx	lr
        return UARTE_BAUDRATE_BAUDRATE_Baud921600;
   30cf8:	f04f 6070 	mov.w	r0, #251658240	; 0xf000000
   30cfc:	4770      	bx	lr
        return UARTE_BAUDRATE_BAUDRATE_Baud2400;
   30cfe:	f44f 201d 	mov.w	r0, #643072	; 0x9d000
    }
}
   30d02:	4770      	bx	lr
   30d04:	003af000 	.word	0x003af000
   30d08:	000f4240 	.word	0x000f4240
   30d0c:	0003d090 	.word	0x0003d090
   30d10:	0013b000 	.word	0x0013b000
   30d14:	00275000 	.word	0x00275000
   30d18:	004ea000 	.word	0x004ea000
   30d1c:	0075c000 	.word	0x0075c000
   30d20:	013a9000 	.word	0x013a9000

00030d24 <hal_uart_init_cbs>:
{
   30d24:	b410      	push	{r4}
    if (port == 0) {
   30d26:	b118      	cbz	r0, 30d30 <hal_uart_init_cbs+0xc>
    } else if (port == 1) {
   30d28:	2801      	cmp	r0, #1
   30d2a:	d10e      	bne.n	30d4a <hal_uart_init_cbs+0x26>
        u = &uart1;
   30d2c:	480a      	ldr	r0, [pc, #40]	; (30d58 <hal_uart_init_cbs+0x34>)
   30d2e:	e000      	b.n	30d32 <hal_uart_init_cbs+0xe>
        u = &uart0;
   30d30:	480a      	ldr	r0, [pc, #40]	; (30d5c <hal_uart_init_cbs+0x38>)
    if (u->u_open) {
   30d32:	7804      	ldrb	r4, [r0, #0]
   30d34:	f014 0f01 	tst.w	r4, #1
   30d38:	d10a      	bne.n	30d50 <hal_uart_init_cbs+0x2c>
    u->u_rx_func = rx_func;
   30d3a:	60c3      	str	r3, [r0, #12]
    u->u_tx_func = tx_func;
   30d3c:	6101      	str	r1, [r0, #16]
    u->u_tx_done = tx_done;
   30d3e:	6142      	str	r2, [r0, #20]
    u->u_func_arg = arg;
   30d40:	9b01      	ldr	r3, [sp, #4]
   30d42:	6183      	str	r3, [r0, #24]
    return 0;
   30d44:	2000      	movs	r0, #0
}
   30d46:	bc10      	pop	{r4}
   30d48:	4770      	bx	lr
        return -1;
   30d4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   30d4e:	e7fa      	b.n	30d46 <hal_uart_init_cbs+0x22>
        return -1;
   30d50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   30d54:	e7f7      	b.n	30d46 <hal_uart_init_cbs+0x22>
   30d56:	bf00      	nop
   30d58:	2000332c 	.word	0x2000332c
   30d5c:	20003310 	.word	0x20003310

00030d60 <hal_uart_start_tx>:
{
   30d60:	b570      	push	{r4, r5, r6, lr}
    if (port == 0) {
   30d62:	b120      	cbz	r0, 30d6e <hal_uart_start_tx+0xe>
    } else if (port == 1) {
   30d64:	2801      	cmp	r0, #1
   30d66:	d10d      	bne.n	30d84 <hal_uart_start_tx+0x24>
        u = &uart1;
   30d68:	4c11      	ldr	r4, [pc, #68]	; (30db0 <hal_uart_start_tx+0x50>)
        nrf_uart = NRF_UARTE1;
   30d6a:	4e12      	ldr	r6, [pc, #72]	; (30db4 <hal_uart_start_tx+0x54>)
   30d6c:	e001      	b.n	30d72 <hal_uart_start_tx+0x12>
        u = &uart0;
   30d6e:	4c12      	ldr	r4, [pc, #72]	; (30db8 <hal_uart_start_tx+0x58>)
        nrf_uart = NRF_UARTE0;
   30d70:	4e12      	ldr	r6, [pc, #72]	; (30dbc <hal_uart_start_tx+0x5c>)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   30d72:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   30d76:	b672      	cpsid	i
    if (u->u_tx_started == 0) {
   30d78:	7823      	ldrb	r3, [r4, #0]
   30d7a:	f013 0f04 	tst.w	r3, #4
   30d7e:	d002      	beq.n	30d86 <hal_uart_start_tx+0x26>
    __HAL_ENABLE_INTERRUPTS(sr);
   30d80:	b905      	cbnz	r5, 30d84 <hal_uart_start_tx+0x24>
  __ASM volatile ("cpsie i" : : : "memory");
   30d82:	b662      	cpsie	i
}
   30d84:	bd70      	pop	{r4, r5, r6, pc}
        rc = hal_uart_tx_fill_buf(u);
   30d86:	4620      	mov	r0, r4
   30d88:	f7ff fef6 	bl	30b78 <hal_uart_tx_fill_buf>
        if (rc > 0) {
   30d8c:	2800      	cmp	r0, #0
   30d8e:	ddf7      	ble.n	30d80 <hal_uart_start_tx+0x20>
            nrf_uart->INTENSET = UARTE_INT_ENDTX;
   30d90:	f44f 7380 	mov.w	r3, #256	; 0x100
   30d94:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304
            nrf_uart->TXD.PTR = (uint32_t)&u->u_tx_buf;
   30d98:	1ca3      	adds	r3, r4, #2
   30d9a:	f8c6 3544 	str.w	r3, [r6, #1348]	; 0x544
            nrf_uart->TXD.MAXCNT = rc;
   30d9e:	f8c6 0548 	str.w	r0, [r6, #1352]	; 0x548
            nrf_uart->TASKS_STARTTX = 1;
   30da2:	2301      	movs	r3, #1
   30da4:	60b3      	str	r3, [r6, #8]
            u->u_tx_started = 1;
   30da6:	7823      	ldrb	r3, [r4, #0]
   30da8:	f043 0304 	orr.w	r3, r3, #4
   30dac:	7023      	strb	r3, [r4, #0]
   30dae:	e7e7      	b.n	30d80 <hal_uart_start_tx+0x20>
   30db0:	2000332c 	.word	0x2000332c
   30db4:	40028000 	.word	0x40028000
   30db8:	20003310 	.word	0x20003310
   30dbc:	40002000 	.word	0x40002000

00030dc0 <hal_uart_start_rx>:
{
   30dc0:	b570      	push	{r4, r5, r6, lr}
    if (port == 0) {
   30dc2:	b120      	cbz	r0, 30dce <hal_uart_start_rx+0xe>
    } else if (port == 1) {
   30dc4:	2801      	cmp	r0, #1
   30dc6:	d118      	bne.n	30dfa <hal_uart_start_rx+0x3a>
        u = &uart1;
   30dc8:	4c0c      	ldr	r4, [pc, #48]	; (30dfc <hal_uart_start_rx+0x3c>)
        nrf_uart = NRF_UARTE1;
   30dca:	4e0d      	ldr	r6, [pc, #52]	; (30e00 <hal_uart_start_rx+0x40>)
   30dcc:	e001      	b.n	30dd2 <hal_uart_start_rx+0x12>
        u = &uart0;
   30dce:	4c0d      	ldr	r4, [pc, #52]	; (30e04 <hal_uart_start_rx+0x44>)
        nrf_uart = NRF_UARTE0;
   30dd0:	4e0d      	ldr	r6, [pc, #52]	; (30e08 <hal_uart_start_rx+0x48>)
    if (u->u_rx_stall) {
   30dd2:	7823      	ldrb	r3, [r4, #0]
   30dd4:	f013 0f02 	tst.w	r3, #2
   30dd8:	d00f      	beq.n	30dfa <hal_uart_start_rx+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   30dda:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   30dde:	b672      	cpsid	i
        rc = u->u_rx_func(u->u_func_arg, u->u_rx_buf);
   30de0:	68e3      	ldr	r3, [r4, #12]
   30de2:	7861      	ldrb	r1, [r4, #1]
   30de4:	69a0      	ldr	r0, [r4, #24]
   30de6:	4798      	blx	r3
        if (rc == 0) {
   30de8:	b928      	cbnz	r0, 30df6 <hal_uart_start_rx+0x36>
            u->u_rx_stall = 0;
   30dea:	7823      	ldrb	r3, [r4, #0]
   30dec:	f36f 0341 	bfc	r3, #1, #1
   30df0:	7023      	strb	r3, [r4, #0]
            nrf_uart->TASKS_STARTRX = 1;
   30df2:	2301      	movs	r3, #1
   30df4:	6033      	str	r3, [r6, #0]
        __HAL_ENABLE_INTERRUPTS(sr);
   30df6:	b905      	cbnz	r5, 30dfa <hal_uart_start_rx+0x3a>
  __ASM volatile ("cpsie i" : : : "memory");
   30df8:	b662      	cpsie	i
}
   30dfa:	bd70      	pop	{r4, r5, r6, pc}
   30dfc:	2000332c 	.word	0x2000332c
   30e00:	40028000 	.word	0x40028000
   30e04:	20003310 	.word	0x20003310
   30e08:	40002000 	.word	0x40002000

00030e0c <hal_uart_blocking_tx>:
{
   30e0c:	b082      	sub	sp, #8
   30e0e:	f88d 1007 	strb.w	r1, [sp, #7]
    if (port == 0) {
   30e12:	b120      	cbz	r0, 30e1e <hal_uart_blocking_tx+0x12>
    } else if (port == 1) {
   30e14:	2801      	cmp	r0, #1
   30e16:	d120      	bne.n	30e5a <hal_uart_blocking_tx+0x4e>
        nrf_uart = NRF_UARTE1;
   30e18:	4b11      	ldr	r3, [pc, #68]	; (30e60 <hal_uart_blocking_tx+0x54>)
        u = &uart1;
   30e1a:	4a12      	ldr	r2, [pc, #72]	; (30e64 <hal_uart_blocking_tx+0x58>)
   30e1c:	e001      	b.n	30e22 <hal_uart_blocking_tx+0x16>
        nrf_uart = NRF_UARTE0;
   30e1e:	4b12      	ldr	r3, [pc, #72]	; (30e68 <hal_uart_blocking_tx+0x5c>)
        u = &uart0;
   30e20:	4a12      	ldr	r2, [pc, #72]	; (30e6c <hal_uart_blocking_tx+0x60>)
    if (!u->u_open) {
   30e22:	7812      	ldrb	r2, [r2, #0]
   30e24:	f012 0f01 	tst.w	r2, #1
   30e28:	d017      	beq.n	30e5a <hal_uart_blocking_tx+0x4e>
    if (u->u_tx_started) {
   30e2a:	f012 0f04 	tst.w	r2, #4
   30e2e:	d003      	beq.n	30e38 <hal_uart_blocking_tx+0x2c>
        while (nrf_uart->EVENTS_ENDTX == 0) {
   30e30:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
   30e34:	2a00      	cmp	r2, #0
   30e36:	d0fb      	beq.n	30e30 <hal_uart_blocking_tx+0x24>
    nrf_uart->EVENTS_ENDTX = 0;
   30e38:	2200      	movs	r2, #0
   30e3a:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    nrf_uart->TXD.PTR = (uint32_t)&data;
   30e3e:	f10d 0207 	add.w	r2, sp, #7
   30e42:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
    nrf_uart->TXD.MAXCNT = 1;
   30e46:	2201      	movs	r2, #1
   30e48:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    nrf_uart->TASKS_STARTTX = 1;
   30e4c:	609a      	str	r2, [r3, #8]
    while (nrf_uart->EVENTS_ENDTX == 0) {
   30e4e:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
   30e52:	2a00      	cmp	r2, #0
   30e54:	d0fb      	beq.n	30e4e <hal_uart_blocking_tx+0x42>
    nrf_uart->TASKS_STOPTX = 1;
   30e56:	2201      	movs	r2, #1
   30e58:	60da      	str	r2, [r3, #12]
}
   30e5a:	b002      	add	sp, #8
   30e5c:	4770      	bx	lr
   30e5e:	bf00      	nop
   30e60:	40028000 	.word	0x40028000
   30e64:	2000332c 	.word	0x2000332c
   30e68:	40002000 	.word	0x40002000
   30e6c:	20003310 	.word	0x20003310

00030e70 <hal_uart_init>:
{
    struct nrf52_uart_cfg *cfg;
    NRF_UARTE_Type *nrf_uart;

#if defined(NRF52840_XXAA)
    if (port == 0) {
   30e70:	b9b0      	cbnz	r0, 30ea0 <hal_uart_init+0x30>
  uint32_t vectors = (uint32_t )SCB->VTOR;
   30e72:	4b11      	ldr	r3, [pc, #68]	; (30eb8 <hal_uart_init+0x48>)
   30e74:	689b      	ldr	r3, [r3, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   30e76:	4a11      	ldr	r2, [pc, #68]	; (30ebc <hal_uart_init+0x4c>)
   30e78:	649a      	str	r2, [r3, #72]	; 0x48
        nrf_uart = NRF_UARTE0;
   30e7a:	4b11      	ldr	r3, [pc, #68]	; (30ec0 <hal_uart_init+0x50>)
    NVIC_SetVector(UARTE0_UART0_IRQn, (uint32_t)uart0_irq_handler);
#endif

    cfg = (struct nrf52_uart_cfg *)arg;

    nrf_uart->PSEL.TXD = cfg->suc_pin_tx;
   30e7c:	f991 2000 	ldrsb.w	r2, [r1]
   30e80:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
    nrf_uart->PSEL.RXD = cfg->suc_pin_rx;
   30e84:	f991 2001 	ldrsb.w	r2, [r1, #1]
   30e88:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    nrf_uart->PSEL.RTS = cfg->suc_pin_rts;
   30e8c:	f991 2002 	ldrsb.w	r2, [r1, #2]
   30e90:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    nrf_uart->PSEL.CTS = cfg->suc_pin_cts;
   30e94:	f991 2003 	ldrsb.w	r2, [r1, #3]
   30e98:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510

    return 0;
   30e9c:	2000      	movs	r0, #0
   30e9e:	4770      	bx	lr
    } else if (port == 1) {
   30ea0:	2801      	cmp	r0, #1
   30ea2:	d106      	bne.n	30eb2 <hal_uart_init+0x42>
  uint32_t vectors = (uint32_t )SCB->VTOR;
   30ea4:	4b04      	ldr	r3, [pc, #16]	; (30eb8 <hal_uart_init+0x48>)
   30ea6:	689b      	ldr	r3, [r3, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   30ea8:	4a06      	ldr	r2, [pc, #24]	; (30ec4 <hal_uart_init+0x54>)
   30eaa:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
        nrf_uart = NRF_UARTE1;
   30eae:	4b06      	ldr	r3, [pc, #24]	; (30ec8 <hal_uart_init+0x58>)
   30eb0:	e7e4      	b.n	30e7c <hal_uart_init+0xc>
        return -1;
   30eb2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   30eb6:	4770      	bx	lr
   30eb8:	e000ed00 	.word	0xe000ed00
   30ebc:	00030c0d 	.word	0x00030c0d
   30ec0:	40002000 	.word	0x40002000
   30ec4:	00030c21 	.word	0x00030c21
   30ec8:	40028000 	.word	0x40028000

00030ecc <hal_uart_config>:

int
hal_uart_config(int port, int32_t baudrate, uint8_t databits, uint8_t stopbits,
  enum hal_uart_parity parity, enum hal_uart_flow_ctl flow_ctl)
{
   30ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   30ece:	f89d 7018 	ldrb.w	r7, [sp, #24]
    uint32_t baud_reg;
    NRF_UARTE_Type *nrf_uart;
    IRQn_Type irqnum;

#if defined(NRF52840_XXAA)
    if (port == 0) {
   30ed2:	b128      	cbz	r0, 30ee0 <hal_uart_config+0x14>
        nrf_uart = NRF_UARTE0;
        irqnum = UARTE0_UART0_IRQn;
        u = &uart0;
    } else if (port == 1) {
   30ed4:	2801      	cmp	r0, #1
   30ed6:	d15c      	bne.n	30f92 <hal_uart_config+0xc6>
        nrf_uart = NRF_UARTE1;
        irqnum = UARTE1_IRQn;
   30ed8:	2628      	movs	r6, #40	; 0x28
        nrf_uart = NRF_UARTE1;
   30eda:	4c37      	ldr	r4, [pc, #220]	; (30fb8 <hal_uart_config+0xec>)
        u = &uart1;
   30edc:	4d37      	ldr	r5, [pc, #220]	; (30fbc <hal_uart_config+0xf0>)
   30ede:	e002      	b.n	30ee6 <hal_uart_config+0x1a>
        irqnum = UARTE0_UART0_IRQn;
   30ee0:	2602      	movs	r6, #2
        nrf_uart = NRF_UARTE0;
   30ee2:	4c37      	ldr	r4, [pc, #220]	; (30fc0 <hal_uart_config+0xf4>)
        u = &uart0;
   30ee4:	4d37      	ldr	r5, [pc, #220]	; (30fc4 <hal_uart_config+0xf8>)
    nrf_uart = NRF_UARTE0;
    irqnum = UARTE0_UART0_IRQn;
    u = &uart0;
#endif

    if (u->u_open) {
   30ee6:	7828      	ldrb	r0, [r5, #0]
   30ee8:	f010 0f01 	tst.w	r0, #1
   30eec:	d154      	bne.n	30f98 <hal_uart_config+0xcc>
     * pin config
     * UART config
     * nvic config
     * enable uart
     */
    if (databits != 8) {
   30eee:	2a08      	cmp	r2, #8
   30ef0:	d155      	bne.n	30f9e <hal_uart_config+0xd2>
        return -1;
    }
    if (stopbits != 1) {
   30ef2:	2b01      	cmp	r3, #1
   30ef4:	d156      	bne.n	30fa4 <hal_uart_config+0xd8>
        return -1;
    }

    switch (parity) {
   30ef6:	2f01      	cmp	r7, #1
   30ef8:	d057      	beq.n	30faa <hal_uart_config+0xde>
   30efa:	2f02      	cmp	r7, #2
   30efc:	d03d      	beq.n	30f7a <hal_uart_config+0xae>
    uint32_t cfg_reg = 0;
   30efe:	2700      	movs	r7, #0
   30f00:	4608      	mov	r0, r1
    case HAL_UART_PARITY_EVEN:
        cfg_reg |= UARTE_CONFIG_PARITY;
        break;
    }

    switch (flow_ctl) {
   30f02:	f89d 301c 	ldrb.w	r3, [sp, #28]
   30f06:	2b01      	cmp	r3, #1
   30f08:	d10b      	bne.n	30f22 <hal_uart_config+0x56>
    case HAL_UART_FLOW_CTL_NONE:
        break;
    case HAL_UART_FLOW_CTL_RTS_CTS:
        cfg_reg |= UARTE_CONFIG_HWFC;
   30f0a:	f047 0701 	orr.w	r7, r7, #1
        if (nrf_uart->PSEL.RTS == 0xffffffff ||
   30f0e:	f8d4 3508 	ldr.w	r3, [r4, #1288]	; 0x508
   30f12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   30f16:	d032      	beq.n	30f7e <hal_uart_config+0xb2>
          nrf_uart->PSEL.CTS == 0xffffffff) {
   30f18:	f8d4 3510 	ldr.w	r3, [r4, #1296]	; 0x510
        if (nrf_uart->PSEL.RTS == 0xffffffff ||
   30f1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   30f20:	d02d      	beq.n	30f7e <hal_uart_config+0xb2>
            assert(0);
            return -1;
        }
        break;
    }
    baud_reg = hal_uart_baudrate(baudrate);
   30f22:	f7ff fe87 	bl	30c34 <hal_uart_baudrate>
    if (baud_reg == 0) {
   30f26:	4603      	mov	r3, r0
   30f28:	2800      	cmp	r0, #0
   30f2a:	d041      	beq.n	30fb0 <hal_uart_config+0xe4>
        return -1;
    }
    nrf_uart->ENABLE = 0;
   30f2c:	2000      	movs	r0, #0
   30f2e:	f8c4 0500 	str.w	r0, [r4, #1280]	; 0x500
    nrf_uart->INTENCLR = 0xffffffff;
   30f32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   30f36:	f8c4 2308 	str.w	r2, [r4, #776]	; 0x308
    nrf_uart->BAUDRATE = baud_reg;
   30f3a:	f8c4 3524 	str.w	r3, [r4, #1316]	; 0x524
    nrf_uart->CONFIG = cfg_reg;
   30f3e:	f8c4 756c 	str.w	r7, [r4, #1388]	; 0x56c
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   30f42:	f006 020a 	and.w	r2, r6, #10
   30f46:	0976      	lsrs	r6, r6, #5
   30f48:	2301      	movs	r3, #1
   30f4a:	fa03 f202 	lsl.w	r2, r3, r2
   30f4e:	491e      	ldr	r1, [pc, #120]	; (30fc8 <hal_uart_config+0xfc>)
   30f50:	f841 2026 	str.w	r2, [r1, r6, lsl #2]

    NVIC_EnableIRQ(irqnum);

    nrf_uart->ENABLE = UARTE_ENABLE;
   30f54:	2208      	movs	r2, #8
   30f56:	f8c4 2500 	str.w	r2, [r4, #1280]	; 0x500

    nrf_uart->INTENSET = UARTE_INT_ENDRX;
   30f5a:	2210      	movs	r2, #16
   30f5c:	f8c4 2304 	str.w	r2, [r4, #772]	; 0x304
    nrf_uart->RXD.PTR = (uint32_t)&u->u_rx_buf;
   30f60:	18ea      	adds	r2, r5, r3
   30f62:	f8c4 2534 	str.w	r2, [r4, #1332]	; 0x534
    nrf_uart->RXD.MAXCNT = sizeof(u->u_rx_buf);
   30f66:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    nrf_uart->TASKS_STARTRX = 1;
   30f6a:	6023      	str	r3, [r4, #0]

    u->u_rx_stall = 0;
   30f6c:	782b      	ldrb	r3, [r5, #0]
    u->u_tx_started = 0;
    u->u_open = 1;
   30f6e:	f003 03f9 	and.w	r3, r3, #249	; 0xf9
   30f72:	f043 0301 	orr.w	r3, r3, #1
   30f76:	702b      	strb	r3, [r5, #0]

    return 0;
}
   30f78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        cfg_reg |= UARTE_CONFIG_PARITY;
   30f7a:	270e      	movs	r7, #14
   30f7c:	e7c0      	b.n	30f00 <hal_uart_config+0x34>
            assert(0);
   30f7e:	f7db f933 	bl	c1e8 <hal_debugger_connected>
   30f82:	b100      	cbz	r0, 30f86 <hal_uart_config+0xba>
   30f84:	be01      	bkpt	0x0001
   30f86:	2300      	movs	r3, #0
   30f88:	461a      	mov	r2, r3
   30f8a:	4619      	mov	r1, r3
   30f8c:	4618      	mov	r0, r3
   30f8e:	f7db fddf 	bl	cb50 <__assert_func>
        return -1;
   30f92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   30f96:	e7ef      	b.n	30f78 <hal_uart_config+0xac>
        return -1;
   30f98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   30f9c:	e7ec      	b.n	30f78 <hal_uart_config+0xac>
        return -1;
   30f9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   30fa2:	e7e9      	b.n	30f78 <hal_uart_config+0xac>
        return -1;
   30fa4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   30fa8:	e7e6      	b.n	30f78 <hal_uart_config+0xac>
        return -1;
   30faa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   30fae:	e7e3      	b.n	30f78 <hal_uart_config+0xac>
        return -1;
   30fb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   30fb4:	e7e0      	b.n	30f78 <hal_uart_config+0xac>
   30fb6:	bf00      	nop
   30fb8:	40028000 	.word	0x40028000
   30fbc:	2000332c 	.word	0x2000332c
   30fc0:	40002000 	.word	0x40002000
   30fc4:	20003310 	.word	0x20003310
   30fc8:	e000e100 	.word	0xe000e100

00030fcc <hal_uart_close>:
{
    volatile struct hal_uart *u;
    NRF_UARTE_Type *nrf_uart;

#if defined(NRF52840_XXAA)
    if (port == 0) {
   30fcc:	b120      	cbz	r0, 30fd8 <hal_uart_close+0xc>
        nrf_uart = NRF_UARTE0;
        u = &uart0;
    } else if (port == 1) {
   30fce:	2801      	cmp	r0, #1
   30fd0:	d114      	bne.n	30ffc <hal_uart_close+0x30>
        nrf_uart = NRF_UARTE1;
   30fd2:	490c      	ldr	r1, [pc, #48]	; (31004 <hal_uart_close+0x38>)
        u = &uart1;
   30fd4:	4a0c      	ldr	r2, [pc, #48]	; (31008 <hal_uart_close+0x3c>)
   30fd6:	e001      	b.n	30fdc <hal_uart_close+0x10>
        nrf_uart = NRF_UARTE0;
   30fd8:	490c      	ldr	r1, [pc, #48]	; (3100c <hal_uart_close+0x40>)
        u = &uart0;
   30fda:	4a0d      	ldr	r2, [pc, #52]	; (31010 <hal_uart_close+0x44>)
    }
    nrf_uart = NRF_UARTE0;
    u = &uart0;
#endif

    u->u_open = 0;
   30fdc:	7813      	ldrb	r3, [r2, #0]
   30fde:	f36f 0300 	bfc	r3, #0, #1
   30fe2:	7013      	strb	r3, [r2, #0]
    while (u->u_tx_started) {
   30fe4:	7813      	ldrb	r3, [r2, #0]
   30fe6:	f013 0f04 	tst.w	r3, #4
   30fea:	d1fb      	bne.n	30fe4 <hal_uart_close+0x18>
        /* Wait here until the dma is finished */
    }
    nrf_uart->ENABLE = 0;
   30fec:	2000      	movs	r0, #0
   30fee:	f8c1 0500 	str.w	r0, [r1, #1280]	; 0x500
    nrf_uart->INTENCLR = 0xffffffff;
   30ff2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   30ff6:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    return 0;
   30ffa:	4770      	bx	lr
        return -1;
   30ffc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   31000:	4770      	bx	lr
   31002:	bf00      	nop
   31004:	40028000 	.word	0x40028000
   31008:	2000332c 	.word	0x2000332c
   3100c:	40002000 	.word	0x40002000
   31010:	20003310 	.word	0x20003310

00031014 <__aeabi_uldivmod>:
   31014:	b953      	cbnz	r3, 3102c <__aeabi_uldivmod+0x18>
   31016:	b94a      	cbnz	r2, 3102c <__aeabi_uldivmod+0x18>
   31018:	2900      	cmp	r1, #0
   3101a:	bf08      	it	eq
   3101c:	2800      	cmpeq	r0, #0
   3101e:	bf1c      	itt	ne
   31020:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   31024:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   31028:	f000 b986 	b.w	31338 <__aeabi_idiv0>
   3102c:	f1ad 0c08 	sub.w	ip, sp, #8
   31030:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   31034:	f000 f81a 	bl	3106c <__udivmoddi4>
   31038:	f8dd e004 	ldr.w	lr, [sp, #4]
   3103c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   31040:	b004      	add	sp, #16
   31042:	4770      	bx	lr

00031044 <__popcountsi2>:
   31044:	0843      	lsrs	r3, r0, #1
   31046:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
   3104a:	1ac0      	subs	r0, r0, r3
   3104c:	0883      	lsrs	r3, r0, #2
   3104e:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
   31052:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
   31056:	4418      	add	r0, r3
   31058:	eb00 1010 	add.w	r0, r0, r0, lsr #4
   3105c:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
   31060:	eb00 2000 	add.w	r0, r0, r0, lsl #8
   31064:	eb00 4000 	add.w	r0, r0, r0, lsl #16
   31068:	0e00      	lsrs	r0, r0, #24
   3106a:	4770      	bx	lr

0003106c <__udivmoddi4>:
   3106c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   31070:	9e08      	ldr	r6, [sp, #32]
   31072:	4604      	mov	r4, r0
   31074:	4688      	mov	r8, r1
   31076:	2b00      	cmp	r3, #0
   31078:	d14b      	bne.n	31112 <__udivmoddi4+0xa6>
   3107a:	428a      	cmp	r2, r1
   3107c:	4615      	mov	r5, r2
   3107e:	d967      	bls.n	31150 <__udivmoddi4+0xe4>
   31080:	fab2 f282 	clz	r2, r2
   31084:	b14a      	cbz	r2, 3109a <__udivmoddi4+0x2e>
   31086:	f1c2 0720 	rsb	r7, r2, #32
   3108a:	fa01 f302 	lsl.w	r3, r1, r2
   3108e:	fa20 f707 	lsr.w	r7, r0, r7
   31092:	4095      	lsls	r5, r2
   31094:	ea47 0803 	orr.w	r8, r7, r3
   31098:	4094      	lsls	r4, r2
   3109a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   3109e:	0c23      	lsrs	r3, r4, #16
   310a0:	fbb8 f7fe 	udiv	r7, r8, lr
   310a4:	fa1f fc85 	uxth.w	ip, r5
   310a8:	fb0e 8817 	mls	r8, lr, r7, r8
   310ac:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   310b0:	fb07 f10c 	mul.w	r1, r7, ip
   310b4:	4299      	cmp	r1, r3
   310b6:	d909      	bls.n	310cc <__udivmoddi4+0x60>
   310b8:	18eb      	adds	r3, r5, r3
   310ba:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
   310be:	f080 811b 	bcs.w	312f8 <__udivmoddi4+0x28c>
   310c2:	4299      	cmp	r1, r3
   310c4:	f240 8118 	bls.w	312f8 <__udivmoddi4+0x28c>
   310c8:	3f02      	subs	r7, #2
   310ca:	442b      	add	r3, r5
   310cc:	1a5b      	subs	r3, r3, r1
   310ce:	b2a4      	uxth	r4, r4
   310d0:	fbb3 f0fe 	udiv	r0, r3, lr
   310d4:	fb0e 3310 	mls	r3, lr, r0, r3
   310d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   310dc:	fb00 fc0c 	mul.w	ip, r0, ip
   310e0:	45a4      	cmp	ip, r4
   310e2:	d909      	bls.n	310f8 <__udivmoddi4+0x8c>
   310e4:	192c      	adds	r4, r5, r4
   310e6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   310ea:	f080 8107 	bcs.w	312fc <__udivmoddi4+0x290>
   310ee:	45a4      	cmp	ip, r4
   310f0:	f240 8104 	bls.w	312fc <__udivmoddi4+0x290>
   310f4:	3802      	subs	r0, #2
   310f6:	442c      	add	r4, r5
   310f8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
   310fc:	eba4 040c 	sub.w	r4, r4, ip
   31100:	2700      	movs	r7, #0
   31102:	b11e      	cbz	r6, 3110c <__udivmoddi4+0xa0>
   31104:	40d4      	lsrs	r4, r2
   31106:	2300      	movs	r3, #0
   31108:	e9c6 4300 	strd	r4, r3, [r6]
   3110c:	4639      	mov	r1, r7
   3110e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   31112:	428b      	cmp	r3, r1
   31114:	d909      	bls.n	3112a <__udivmoddi4+0xbe>
   31116:	2e00      	cmp	r6, #0
   31118:	f000 80eb 	beq.w	312f2 <__udivmoddi4+0x286>
   3111c:	2700      	movs	r7, #0
   3111e:	e9c6 0100 	strd	r0, r1, [r6]
   31122:	4638      	mov	r0, r7
   31124:	4639      	mov	r1, r7
   31126:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3112a:	fab3 f783 	clz	r7, r3
   3112e:	2f00      	cmp	r7, #0
   31130:	d147      	bne.n	311c2 <__udivmoddi4+0x156>
   31132:	428b      	cmp	r3, r1
   31134:	d302      	bcc.n	3113c <__udivmoddi4+0xd0>
   31136:	4282      	cmp	r2, r0
   31138:	f200 80fa 	bhi.w	31330 <__udivmoddi4+0x2c4>
   3113c:	1a84      	subs	r4, r0, r2
   3113e:	eb61 0303 	sbc.w	r3, r1, r3
   31142:	2001      	movs	r0, #1
   31144:	4698      	mov	r8, r3
   31146:	2e00      	cmp	r6, #0
   31148:	d0e0      	beq.n	3110c <__udivmoddi4+0xa0>
   3114a:	e9c6 4800 	strd	r4, r8, [r6]
   3114e:	e7dd      	b.n	3110c <__udivmoddi4+0xa0>
   31150:	b902      	cbnz	r2, 31154 <__udivmoddi4+0xe8>
   31152:	deff      	udf	#255	; 0xff
   31154:	fab2 f282 	clz	r2, r2
   31158:	2a00      	cmp	r2, #0
   3115a:	f040 808f 	bne.w	3127c <__udivmoddi4+0x210>
   3115e:	1b49      	subs	r1, r1, r5
   31160:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   31164:	fa1f f885 	uxth.w	r8, r5
   31168:	2701      	movs	r7, #1
   3116a:	fbb1 fcfe 	udiv	ip, r1, lr
   3116e:	0c23      	lsrs	r3, r4, #16
   31170:	fb0e 111c 	mls	r1, lr, ip, r1
   31174:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   31178:	fb08 f10c 	mul.w	r1, r8, ip
   3117c:	4299      	cmp	r1, r3
   3117e:	d907      	bls.n	31190 <__udivmoddi4+0x124>
   31180:	18eb      	adds	r3, r5, r3
   31182:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
   31186:	d202      	bcs.n	3118e <__udivmoddi4+0x122>
   31188:	4299      	cmp	r1, r3
   3118a:	f200 80cd 	bhi.w	31328 <__udivmoddi4+0x2bc>
   3118e:	4684      	mov	ip, r0
   31190:	1a59      	subs	r1, r3, r1
   31192:	b2a3      	uxth	r3, r4
   31194:	fbb1 f0fe 	udiv	r0, r1, lr
   31198:	fb0e 1410 	mls	r4, lr, r0, r1
   3119c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
   311a0:	fb08 f800 	mul.w	r8, r8, r0
   311a4:	45a0      	cmp	r8, r4
   311a6:	d907      	bls.n	311b8 <__udivmoddi4+0x14c>
   311a8:	192c      	adds	r4, r5, r4
   311aa:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   311ae:	d202      	bcs.n	311b6 <__udivmoddi4+0x14a>
   311b0:	45a0      	cmp	r8, r4
   311b2:	f200 80b6 	bhi.w	31322 <__udivmoddi4+0x2b6>
   311b6:	4618      	mov	r0, r3
   311b8:	eba4 0408 	sub.w	r4, r4, r8
   311bc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   311c0:	e79f      	b.n	31102 <__udivmoddi4+0x96>
   311c2:	f1c7 0c20 	rsb	ip, r7, #32
   311c6:	40bb      	lsls	r3, r7
   311c8:	fa22 fe0c 	lsr.w	lr, r2, ip
   311cc:	ea4e 0e03 	orr.w	lr, lr, r3
   311d0:	fa01 f407 	lsl.w	r4, r1, r7
   311d4:	fa20 f50c 	lsr.w	r5, r0, ip
   311d8:	fa21 f30c 	lsr.w	r3, r1, ip
   311dc:	ea4f 481e 	mov.w	r8, lr, lsr #16
   311e0:	4325      	orrs	r5, r4
   311e2:	fbb3 f9f8 	udiv	r9, r3, r8
   311e6:	0c2c      	lsrs	r4, r5, #16
   311e8:	fb08 3319 	mls	r3, r8, r9, r3
   311ec:	fa1f fa8e 	uxth.w	sl, lr
   311f0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
   311f4:	fb09 f40a 	mul.w	r4, r9, sl
   311f8:	429c      	cmp	r4, r3
   311fa:	fa02 f207 	lsl.w	r2, r2, r7
   311fe:	fa00 f107 	lsl.w	r1, r0, r7
   31202:	d90b      	bls.n	3121c <__udivmoddi4+0x1b0>
   31204:	eb1e 0303 	adds.w	r3, lr, r3
   31208:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
   3120c:	f080 8087 	bcs.w	3131e <__udivmoddi4+0x2b2>
   31210:	429c      	cmp	r4, r3
   31212:	f240 8084 	bls.w	3131e <__udivmoddi4+0x2b2>
   31216:	f1a9 0902 	sub.w	r9, r9, #2
   3121a:	4473      	add	r3, lr
   3121c:	1b1b      	subs	r3, r3, r4
   3121e:	b2ad      	uxth	r5, r5
   31220:	fbb3 f0f8 	udiv	r0, r3, r8
   31224:	fb08 3310 	mls	r3, r8, r0, r3
   31228:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
   3122c:	fb00 fa0a 	mul.w	sl, r0, sl
   31230:	45a2      	cmp	sl, r4
   31232:	d908      	bls.n	31246 <__udivmoddi4+0x1da>
   31234:	eb1e 0404 	adds.w	r4, lr, r4
   31238:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   3123c:	d26b      	bcs.n	31316 <__udivmoddi4+0x2aa>
   3123e:	45a2      	cmp	sl, r4
   31240:	d969      	bls.n	31316 <__udivmoddi4+0x2aa>
   31242:	3802      	subs	r0, #2
   31244:	4474      	add	r4, lr
   31246:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   3124a:	fba0 8902 	umull	r8, r9, r0, r2
   3124e:	eba4 040a 	sub.w	r4, r4, sl
   31252:	454c      	cmp	r4, r9
   31254:	46c2      	mov	sl, r8
   31256:	464b      	mov	r3, r9
   31258:	d354      	bcc.n	31304 <__udivmoddi4+0x298>
   3125a:	d051      	beq.n	31300 <__udivmoddi4+0x294>
   3125c:	2e00      	cmp	r6, #0
   3125e:	d069      	beq.n	31334 <__udivmoddi4+0x2c8>
   31260:	ebb1 050a 	subs.w	r5, r1, sl
   31264:	eb64 0403 	sbc.w	r4, r4, r3
   31268:	fa04 fc0c 	lsl.w	ip, r4, ip
   3126c:	40fd      	lsrs	r5, r7
   3126e:	40fc      	lsrs	r4, r7
   31270:	ea4c 0505 	orr.w	r5, ip, r5
   31274:	e9c6 5400 	strd	r5, r4, [r6]
   31278:	2700      	movs	r7, #0
   3127a:	e747      	b.n	3110c <__udivmoddi4+0xa0>
   3127c:	f1c2 0320 	rsb	r3, r2, #32
   31280:	fa20 f703 	lsr.w	r7, r0, r3
   31284:	4095      	lsls	r5, r2
   31286:	fa01 f002 	lsl.w	r0, r1, r2
   3128a:	fa21 f303 	lsr.w	r3, r1, r3
   3128e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   31292:	4338      	orrs	r0, r7
   31294:	0c01      	lsrs	r1, r0, #16
   31296:	fbb3 f7fe 	udiv	r7, r3, lr
   3129a:	fa1f f885 	uxth.w	r8, r5
   3129e:	fb0e 3317 	mls	r3, lr, r7, r3
   312a2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   312a6:	fb07 f308 	mul.w	r3, r7, r8
   312aa:	428b      	cmp	r3, r1
   312ac:	fa04 f402 	lsl.w	r4, r4, r2
   312b0:	d907      	bls.n	312c2 <__udivmoddi4+0x256>
   312b2:	1869      	adds	r1, r5, r1
   312b4:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
   312b8:	d22f      	bcs.n	3131a <__udivmoddi4+0x2ae>
   312ba:	428b      	cmp	r3, r1
   312bc:	d92d      	bls.n	3131a <__udivmoddi4+0x2ae>
   312be:	3f02      	subs	r7, #2
   312c0:	4429      	add	r1, r5
   312c2:	1acb      	subs	r3, r1, r3
   312c4:	b281      	uxth	r1, r0
   312c6:	fbb3 f0fe 	udiv	r0, r3, lr
   312ca:	fb0e 3310 	mls	r3, lr, r0, r3
   312ce:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   312d2:	fb00 f308 	mul.w	r3, r0, r8
   312d6:	428b      	cmp	r3, r1
   312d8:	d907      	bls.n	312ea <__udivmoddi4+0x27e>
   312da:	1869      	adds	r1, r5, r1
   312dc:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
   312e0:	d217      	bcs.n	31312 <__udivmoddi4+0x2a6>
   312e2:	428b      	cmp	r3, r1
   312e4:	d915      	bls.n	31312 <__udivmoddi4+0x2a6>
   312e6:	3802      	subs	r0, #2
   312e8:	4429      	add	r1, r5
   312ea:	1ac9      	subs	r1, r1, r3
   312ec:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
   312f0:	e73b      	b.n	3116a <__udivmoddi4+0xfe>
   312f2:	4637      	mov	r7, r6
   312f4:	4630      	mov	r0, r6
   312f6:	e709      	b.n	3110c <__udivmoddi4+0xa0>
   312f8:	4607      	mov	r7, r0
   312fa:	e6e7      	b.n	310cc <__udivmoddi4+0x60>
   312fc:	4618      	mov	r0, r3
   312fe:	e6fb      	b.n	310f8 <__udivmoddi4+0x8c>
   31300:	4541      	cmp	r1, r8
   31302:	d2ab      	bcs.n	3125c <__udivmoddi4+0x1f0>
   31304:	ebb8 0a02 	subs.w	sl, r8, r2
   31308:	eb69 020e 	sbc.w	r2, r9, lr
   3130c:	3801      	subs	r0, #1
   3130e:	4613      	mov	r3, r2
   31310:	e7a4      	b.n	3125c <__udivmoddi4+0x1f0>
   31312:	4660      	mov	r0, ip
   31314:	e7e9      	b.n	312ea <__udivmoddi4+0x27e>
   31316:	4618      	mov	r0, r3
   31318:	e795      	b.n	31246 <__udivmoddi4+0x1da>
   3131a:	4667      	mov	r7, ip
   3131c:	e7d1      	b.n	312c2 <__udivmoddi4+0x256>
   3131e:	4681      	mov	r9, r0
   31320:	e77c      	b.n	3121c <__udivmoddi4+0x1b0>
   31322:	3802      	subs	r0, #2
   31324:	442c      	add	r4, r5
   31326:	e747      	b.n	311b8 <__udivmoddi4+0x14c>
   31328:	f1ac 0c02 	sub.w	ip, ip, #2
   3132c:	442b      	add	r3, r5
   3132e:	e72f      	b.n	31190 <__udivmoddi4+0x124>
   31330:	4638      	mov	r0, r7
   31332:	e708      	b.n	31146 <__udivmoddi4+0xda>
   31334:	4637      	mov	r7, r6
   31336:	e6e9      	b.n	3110c <__udivmoddi4+0xa0>

00031338 <__aeabi_idiv0>:
   31338:	4770      	bx	lr
   3133a:	bf00      	nop
   3133c:	18110010 	.word	0x18110010
   31340:	6f727265 	.word	0x6f727265
   31344:	65642072 	.word	0x65642072
   31348:	6d726574 	.word	0x6d726574
   3134c:	6e696e69 	.word	0x6e696e69
   31350:	64612067 	.word	0x64612067
   31354:	73657264 	.word	0x73657264
   31358:	79742073 	.word	0x79742073
   3135c:	203b6570 	.word	0x203b6570
   31360:	253d6372 	.word	0x253d6372
   31364:	00000a64 	.word	0x00000a64
   31368:	656e594d 	.word	0x656e594d
   3136c:	65547477 	.word	0x65547477
   31370:	00007473 	.word	0x00007473
   31374:	6f727265 	.word	0x6f727265
   31378:	65732072 	.word	0x65732072
   3137c:	6e697474 	.word	0x6e697474
   31380:	64612067 	.word	0x64612067
   31384:	74726576 	.word	0x74726576
   31388:	6d657369 	.word	0x6d657369
   3138c:	20746e65 	.word	0x20746e65
   31390:	61746164 	.word	0x61746164
   31394:	6372203b 	.word	0x6372203b
   31398:	0a64253d 	.word	0x0a64253d
   3139c:	00000000 	.word	0x00000000
   313a0:	6f727265 	.word	0x6f727265
   313a4:	6e652072 	.word	0x6e652072
   313a8:	696c6261 	.word	0x696c6261
   313ac:	6120676e 	.word	0x6120676e
   313b0:	72657664 	.word	0x72657664
   313b4:	65736974 	.word	0x65736974
   313b8:	746e656d 	.word	0x746e656d
   313bc:	6372203b 	.word	0x6372203b
   313c0:	0a64253d 	.word	0x0a64253d
   313c4:	00000000 	.word	0x00000000
   313c8:	61747365 	.word	0x61747365
   313cc:	73696c62 	.word	0x73696c62
   313d0:	00646568 	.word	0x00646568
   313d4:	6c696166 	.word	0x6c696166
   313d8:	00006465 	.word	0x00006465
   313dc:	6e6e6f63 	.word	0x6e6e6f63
   313e0:	69746365 	.word	0x69746365
   313e4:	25206e6f 	.word	0x25206e6f
   313e8:	73203b73 	.word	0x73203b73
   313ec:	75746174 	.word	0x75746174
   313f0:	64253d73 	.word	0x64253d73
   313f4:	00000020 	.word	0x00000020
   313f8:	63736964 	.word	0x63736964
   313fc:	656e6e6f 	.word	0x656e6e6f
   31400:	203b7463 	.word	0x203b7463
   31404:	73616572 	.word	0x73616572
   31408:	253d6e6f 	.word	0x253d6e6f
   3140c:	00002064 	.word	0x00002064
   31410:	6e6e6f63 	.word	0x6e6e6f63
   31414:	69746365 	.word	0x69746365
   31418:	75206e6f 	.word	0x75206e6f
   3141c:	74616470 	.word	0x74616470
   31420:	203b6465 	.word	0x203b6465
   31424:	74617473 	.word	0x74617473
   31428:	253d7375 	.word	0x253d7375
   3142c:	00002064 	.word	0x00002064
   31430:	65766461 	.word	0x65766461
   31434:	73697472 	.word	0x73697472
   31438:	6f632065 	.word	0x6f632065
   3143c:	656c706d 	.word	0x656c706d
   31440:	203b6574 	.word	0x203b6574
   31444:	73616572 	.word	0x73616572
   31448:	253d6e6f 	.word	0x253d6e6f
   3144c:	00000064 	.word	0x00000064
   31450:	72636e65 	.word	0x72636e65
   31454:	69747079 	.word	0x69747079
   31458:	63206e6f 	.word	0x63206e6f
   3145c:	676e6168 	.word	0x676e6168
   31460:	76652065 	.word	0x76652065
   31464:	3b746e65 	.word	0x3b746e65
   31468:	61747320 	.word	0x61747320
   3146c:	3d737574 	.word	0x3d737574
   31470:	00206425 	.word	0x00206425
   31474:	73627573 	.word	0x73627573
   31478:	62697263 	.word	0x62697263
   3147c:	76652065 	.word	0x76652065
   31480:	3b746e65 	.word	0x3b746e65
   31484:	6e6f6320 	.word	0x6e6f6320
   31488:	61685f6e 	.word	0x61685f6e
   3148c:	656c646e 	.word	0x656c646e
   31490:	2064253d 	.word	0x2064253d
   31494:	72747461 	.word	0x72747461
   31498:	6e61685f 	.word	0x6e61685f
   3149c:	3d656c64 	.word	0x3d656c64
   314a0:	72206425 	.word	0x72206425
   314a4:	6f736165 	.word	0x6f736165
   314a8:	64253d6e 	.word	0x64253d6e
   314ac:	65727020 	.word	0x65727020
   314b0:	253d6e76 	.word	0x253d6e76
   314b4:	75632064 	.word	0x75632064
   314b8:	253d6e72 	.word	0x253d6e72
   314bc:	72702064 	.word	0x72702064
   314c0:	3d697665 	.word	0x3d697665
   314c4:	63206425 	.word	0x63206425
   314c8:	3d697275 	.word	0x3d697275
   314cc:	000a6425 	.word	0x000a6425
   314d0:	2075746d 	.word	0x2075746d
   314d4:	61647075 	.word	0x61647075
   314d8:	65206574 	.word	0x65206574
   314dc:	746e6576 	.word	0x746e6576
   314e0:	6f63203b 	.word	0x6f63203b
   314e4:	685f6e6e 	.word	0x685f6e6e
   314e8:	6c646e61 	.word	0x6c646e61
   314ec:	64253d65 	.word	0x64253d65
   314f0:	64696320 	.word	0x64696320
   314f4:	2064253d 	.word	0x2064253d
   314f8:	3d75746d 	.word	0x3d75746d
   314fc:	000a6425 	.word	0x000a6425
   31500:	65736552 	.word	0x65736552
   31504:	6e697474 	.word	0x6e697474
   31508:	74732067 	.word	0x74732067
   3150c:	3b657461 	.word	0x3b657461
   31510:	61657220 	.word	0x61657220
   31514:	3d6e6f73 	.word	0x3d6e6f73
   31518:	000a6425 	.word	0x000a6425
   3151c:	646e6168 	.word	0x646e6168
   31520:	253d656c 	.word	0x253d656c
   31524:	756f2064 	.word	0x756f2064
   31528:	746f5f72 	.word	0x746f5f72
   3152c:	64615f61 	.word	0x64615f61
   31530:	745f7264 	.word	0x745f7264
   31534:	3d657079 	.word	0x3d657079
   31538:	6f206425 	.word	0x6f206425
   3153c:	6f5f7275 	.word	0x6f5f7275
   31540:	615f6174 	.word	0x615f6174
   31544:	3d726464 	.word	0x3d726464
   31548:	00000000 	.word	0x00000000
   3154c:	72756f20 	.word	0x72756f20
   31550:	5f64695f 	.word	0x5f64695f
   31554:	72646461 	.word	0x72646461
   31558:	7079745f 	.word	0x7079745f
   3155c:	64253d65 	.word	0x64253d65
   31560:	72756f20 	.word	0x72756f20
   31564:	5f64695f 	.word	0x5f64695f
   31568:	72646461 	.word	0x72646461
   3156c:	0000003d 	.word	0x0000003d
   31570:	65657020 	.word	0x65657020
   31574:	746f5f72 	.word	0x746f5f72
   31578:	64615f61 	.word	0x64615f61
   3157c:	745f7264 	.word	0x745f7264
   31580:	3d657079 	.word	0x3d657079
   31584:	70206425 	.word	0x70206425
   31588:	5f726565 	.word	0x5f726565
   3158c:	5f61746f 	.word	0x5f61746f
   31590:	72646461 	.word	0x72646461
   31594:	0000003d 	.word	0x0000003d
   31598:	65657020 	.word	0x65657020
   3159c:	64695f72 	.word	0x64695f72
   315a0:	6464615f 	.word	0x6464615f
   315a4:	79745f72 	.word	0x79745f72
   315a8:	253d6570 	.word	0x253d6570
   315ac:	65702064 	.word	0x65702064
   315b0:	695f7265 	.word	0x695f7265
   315b4:	64615f64 	.word	0x64615f64
   315b8:	003d7264 	.word	0x003d7264
   315bc:	6e6f6320 	.word	0x6e6f6320
   315c0:	74695f6e 	.word	0x74695f6e
   315c4:	253d6c76 	.word	0x253d6c76
   315c8:	6f632064 	.word	0x6f632064
   315cc:	6c5f6e6e 	.word	0x6c5f6e6e
   315d0:	6e657461 	.word	0x6e657461
   315d4:	253d7963 	.word	0x253d7963
   315d8:	75732064 	.word	0x75732064
   315dc:	76726570 	.word	0x76726570
   315e0:	6f697369 	.word	0x6f697369
   315e4:	69745f6e 	.word	0x69745f6e
   315e8:	756f656d 	.word	0x756f656d
   315ec:	64253d74 	.word	0x64253d74
   315f0:	636e6520 	.word	0x636e6520
   315f4:	74707972 	.word	0x74707972
   315f8:	253d6465 	.word	0x253d6465
   315fc:	75612064 	.word	0x75612064
   31600:	6e656874 	.word	0x6e656874
   31604:	61636974 	.word	0x61636974
   31608:	3d646574 	.word	0x3d646574
   3160c:	62206425 	.word	0x62206425
   31610:	65646e6f 	.word	0x65646e6f
   31614:	64253d64 	.word	0x64253d64
   31618:	0000000a 	.word	0x0000000a
   3161c:	78323025 	.word	0x78323025
   31620:	3230253a 	.word	0x3230253a
   31624:	30253a78 	.word	0x30253a78
   31628:	253a7832 	.word	0x253a7832
   3162c:	3a783230 	.word	0x3a783230
   31630:	78323025 	.word	0x78323025
   31634:	3230253a 	.word	0x3230253a
   31638:	00000078 	.word	0x00000078

0003163c <gatt_svr_chr_sec_test_rand_uuid>:
   3163c:	c96df680 16007107 7e45e1b0 3a659e89     ..m..q....E~..e:
   3164c:	0000005c                                \...

00031650 <gatt_svr_chr_sec_test_static_uuid>:
   31650:	c96df780 16007107 7e45e1b0 3a659e89     ..m..q....E~..e:
   31660:	0000005c 69676572 72657473 73206465     \...registered s
   31670:	69767265 25206563 69772073 68206874     ervice %s with h
   31680:	6c646e61 64253d65 0000000a 69676572     andle=%d....regi
   31690:	72657473 20676e69 72616863 65746361     stering characte
   316a0:	74736972 25206369 69772073 64206874     ristic %s with d
   316b0:	685f6665 6c646e61 64253d65 6c617620     ef_handle=%d val
   316c0:	6e61685f 3d656c64 000a6425 69676572     _handle=%d..regi
   316d0:	72657473 20676e69 63736564 74706972     stering descript
   316e0:	2520726f 69772073 68206874 6c646e61     or %s with handl
   316f0:	64253d65 0000000a                       e=%d....

000316f8 <gatt_svr_svc_sec_test_uuid>:
   316f8:	a2712d80 c858b459 43999912 462f1295     .-q.Y.X....C../F
   31708:	00000059                                Y...

0003170c <gatt_svr_svcs>:
   3170c:	00000001 000316f8 00000000 20000110     ............... 
	...

0003172c <__compound_literal.0>:
   3172c:	00031754 2000059b 00000000 00000002     T...... ........
	...
   3174c:	696c7073 00000074 74617473 00007375     split...status..
   3175c:	65737341 40207472 25783020 00000a78     Assert @ 0x%x...
   3176c:	65737341 40207472 25783020 202d2078     Assert @ 0x%x - 
   3177c:	253a7325 00000a64 61686e55 656c646e     %s:%d...Unhandle
   3178c:	6e692064 72726574 20747075 646c2528     d interrupt (%ld
   3179c:	65202c29 70656378 6e6f6974 20707320     ), exception sp 
   317ac:	30257830 0a786c38 00000000 3a307220     0x%08lx..... r0:
   317bc:	30257830 20786c38 3a317220 30257830     0x%08lx  r1:0x%0
   317cc:	20786c38 3a327220 30257830 20786c38     8lx  r2:0x%08lx 
   317dc:	3a337220 30257830 0a786c38 00000000      r3:0x%08lx.....
   317ec:	3a347220 30257830 20786c38 3a357220      r4:0x%08lx  r5:
   317fc:	30257830 20786c38 3a367220 30257830     0x%08lx  r6:0x%0
   3180c:	20786c38 3a377220 30257830 0a786c38     8lx  r7:0x%08lx.
   3181c:	00000000 3a387220 30257830 20786c38     .... r8:0x%08lx 
   3182c:	3a397220 30257830 20786c38 3a303172      r9:0x%08lx r10:
   3183c:	30257830 20786c38 3a313172 30257830     0x%08lx r11:0x%0
   3184c:	0a786c38 00000000 3a323172 30257830     8lx.....r12:0x%0
   3185c:	20786c38 3a726c20 30257830 20786c38     8lx  lr:0x%08lx 
   3186c:	3a637020 30257830 20786c38 3a727370      pc:0x%08lx psr:
   3187c:	30257830 0a786c38 00000000 52534349     0x%08lx.....ICSR
   3188c:	2578303a 786c3830 53464820 78303a52     :0x%08lx HFSR:0x
   3189c:	6c383025 46432078 303a5253 38302578     %08lx CFSR:0x%08
   318ac:	000a786c 52414642 2578303a 786c3830     lx..BFAR:0x%08lx
   318bc:	464d4d20 303a5241 38302578 000a786c      MMFAR:0x%08lx..
   318cc:	6e69616d 00000000 656c6469 00000000     main....idle....
   318dc:	7379736d 0000315f 00006372              msys_1..rc..

000318e8 <imgr_mgmt_handlers>:
	...
   3191c:	0000eb4d 252e7525 75252e75 756c252e     M...%u.%u.%u.%lu
   3192c:	00000000 252e7525 75252e75 00000000     ....%u.%u.%u....

0003193c <g_smp_cbor_cfg>:
   3193c:	0000ec83 0000ec7b 0000ec6b 0000ec3f     ....{...k...?...
   3194c:	0000ec2d 0000ec1d 0000ec11              -...........

00031958 <gatt_svr_chr_smp>:
   31958:	997c4880 9e261174 ce4e01ae 2e7828fb     .H|.t.&...N..(x.
   31968:	000000da                                ....

0003196c <gatt_svr_svc_smp>:
   3196c:	60aa8480 8b8a5274 b74cd386 53dc1d1d     ...`tR....L....S
   3197c:	0000008d                                ....

00031980 <gatt_svr_svcs>:
   31980:	00000001 0003196c 00000000 200001a0     ....l.......... 
	...
   319a0:	0000002f 646c6c25 00000000 756c6c25     /...%lld....%llu
   319b0:	00000000                                ....

000319b4 <conf_mgmt_handlers>:
   319b4:	0000fb61 0000faa5 006c6176 65766173     a.......val.save
   319c4:	00000000 6c363025 00002075 74726175     ....%06lu ..uart
   319d4:	00000030 682f6469 00646977 622f6469     0...id/hwid.id/b
   319e4:	00007073 612f6469 00007070 6d2f6469     sp..id/app..id/m
   319f4:	61686766 00006873 732f6469 61697265     fghash..id/seria
   31a04:	0000006c 64697768 00000000 00707362     l...hwid....bsp.
   31a14:	00707061 69726573 00006c61 6867666d     app.serial..mfgh
   31a24:	00687361 00006469 70656c62 00687072     ash.id..bleprph.
   31a34:	64726f6e 705f6369 30316163 00363530     nordic_pca10056.
   31a44:	41464544 00544c55 424d494e 485f454c     DEFAULT.NIMBLE_H
   31a54:	0054534f 4f424552 0000544f              OST.REBOOT..

00031a60 <log_console_handler>:
   31a60:	00000000 00011327 00000000 00011405     ....'...........
   31a70:	000113c5 00000000 00000000 0001132b     ............+...
   31a80:	00000000 0001132f 00000000 736e6f63     ..../.......cons
   31a90:	00656c6f 3d73745b 756c6c25 202c7375     ole.[ts=%lluus, 
   31aa0:	3d646f6d 6c207525 6c657665 2075253d     mod=%u level=%u 
   31ab0:	00000000 303d6869 25782578 25782578     ....ih=0x%x%x%x%
   31ac0:	00000078 0000005d 6c646f6d 6d5f676f     x...]...modlog_m
   31ad0:	69707061 705f676e 006c6f6f 00000031     apping_pool.1...
   31ae0:	6f626572 6c5f746f 0000676f 45534552     reboot_log..RESE
   31af0:	49505f54 0000004e 44524148 00000000     T_PIN...HARD....
   31b00:	474f4457 00000000 54464f53 00000000     WDOG....SOFT....
   31b10:	574f5242 54554f4e 00000000 55514552     BROWNOUT....REQU
   31b20:	45545345 00000044 54535953 4f5f4d45     ESTED...SYSTEM_O
   31b30:	495f4646 0000544e 4e4b4e55 004e574f     FF_INT..UNKNOWN.
   31b40:	00554644 006e7372 00746e63 00676d69     DFU.rsn.cnt.img.
   31b50:	252e7525 75252e75 0075252e 68736168     %u.%u.%u.%u.hash
   31b60:	00000000 00656964 253a7325 00000064     ....die.%s:%d...
   31b70:	00006370 67616c66 00000073 69746361     pc..flags...acti
   31b80:	00006576 00207325 746f6f62 656c6261     ve..%s .bootable
   31b90:	00000000 666e6f63 656d7269 00000064     ....confirmed...
   31ba0:	646e6570 00676e69 6f626572 722f746f     pending.reboot/r
   31bb0:	6f6f6265 6e635f74 00000074 6f626572     eboot_cnt...rebo
   31bc0:	772f746f 74746972 00006e65 6f626572     ot/written..rebo
   31bd0:	635f746f 0000746e 74697277 006e6574     ot_cnt..written.
   31be0:	6f626572 0000746f 74617473 00000000     reboot..stat....
   31bf0:	00642573 7465733c 0000003e              s%d.<set>...

00031bfc <img_mgmt_handlers>:
   31bfc:	000131b5 0001334d 00000000 00012e45     .1..M3......E...
	...
   31c28:	00012bf1 61746164 00000000 006e656c     .+..data....len.
   31c38:	00616873 72677075 00656461 0066666f     sha.upgrade.off.
   31c48:	67616d69 00007365 746f6c73 00000000     images..slot....
   31c58:	73726576 006e6f69 6d726570 6e656e61     version.permanen
   31c68:	00000074 696c7073 61745374 00737574     t...splitStatus.
   31c78:	666e6f63 006d7269 666e6f63 00000000     confirm.conf....
   31c88:	646e6570 00000000 6f647075 0000656e     pend....updone..
   31c98:	74737075 00747261 4f464e49 00000000     upstart.INFO....
   31ca8:	55424544 00000047 4e524157 00000000     DEBUG...WARN....
   31cb8:	4f525245 00000052 54495243 4c414349     ERROR...CRITICAL
   31cc8:	00000000 00000072                       ....r...

00031cd0 <os_mgmt_group_handlers>:
   31cd0:	00013cc1 00013cc1 00000000 00000000     .<...<..........
   31ce0:	00013c55 00000000 00000000 00000000     U<..............
	...
   31cfc:	00013b05 6f697270 00000000 00646974     .;..prio....tid.
   31d0c:	74617473 00000065 756b7473 00006573     state...stkuse..
   31d1c:	736b7473 00007a69 63777363 0000746e     stksiz..cswcnt..
   31d2c:	746e7572 00656d69 7473616c 6568635f     runtime.last_che
   31d3c:	6e696b63 00000000 7478656e 6568635f     ckin....next_che
   31d4c:	6e696b63 00000000 6b736174 00000073     ckin....tasks...
   31d5c:	5f656c62 00006c6c                       ble_ll..

00031d64 <g_ble_ll_pdu_header_tx_time>:
   31d64:	005001ce 02d0002c 5f656c62 635f6c6c     ..P.,...ble_ll_c
   31d74:	006e6e6f 636c6143 74616c75 20676e69     onn.Calculating 
   31d84:	73736553 206e6f69 2079654b 20726f66     Session Key for 
   31d94:	646e6168 253d656c 00000075 4b544c0a     handle=%u....LTK
   31da4:	0000003a 444b530a 0000003a 7365530a     :....SKD:....Ses
   31db4:	6e6f6973 79654b20 0000003a 3a56490a     sion Key:....IV:
   31dc4:	00000000                                ....

00031dc8 <g_ble_ll_ctrl_pkt_lengths>:
   31dc8:	1601070b 0100000c 00000808 17080105     ................
   31dd8:	00000217 02020808 00010204 00010122     ............"...
   31de8:	5f656c62 735f6c6c 5f6e6163 5f707564     ble_ll_scan_dup_
   31df8:	6c6f6f70 00000000                       pool....

00031e00 <g_ble_ll_supp_cmds>:
   31e00:	00000020 00004000 00000000 22280000      ....@........("
	...
   31e18:	fffff700 0000000f 0ff9f000 07800000     ................
   31e28:	00000000                                ....

00031e2c <g_ble_sca_ppm_tbl>:
   31e2c:	00fa01f4 00640096 0032004b 0014001e     ......d.K.2.....
   31e3c:	5f656c62 00796870                       ble_phy.

00031e44 <g_ble_phy_chan_freq>:
   31e44:	0a080604 12100e0c 1c181614 2422201e     ............. "$
   31e54:	2c2a2826 3432302e 3c3a3836 4442403e     &(*,.02468:<>@BD
   31e64:	4c4a4846 501a024e                       FHJLN..P

00031e6c <g_ble_phy_t_rxaddrdelay>:
   31e6c:	11020611                                ....

00031e70 <g_ble_phy_t_rxenddelay>:
   31e70:	1b020616                                ....

00031e74 <g_ble_phy_t_txdelay>:
   31e74:	05030405                                ....

00031e78 <g_ble_phy_t_txenddelay>:
   31e78:	09030403 5f656c62 00747461              ....ble_att.

00031e84 <ble_att_rx_dispatch>:
   31e84:	00000001 0001e9e9 00000002 0001fa95     ................
   31e94:	00000003 0001ea11 00000004 0001fb29     ............)...
   31ea4:	00000005 0001ea79 00000006 0001fb93     ....y...........
   31eb4:	00000007 0001ea81 00000008 0001fc0b     ................
   31ec4:	00000009 0001ea89 0000000a 0001fcb3     ................
   31ed4:	0000000b 0001ea91 0000000c 0001fd2f     ............/...
   31ee4:	0000000d 0001ea99 0000000e 0001fdaf     ................
   31ef4:	0000000f 0001ea9d 00000010 0001fdeb     ................
   31f04:	00000011 0001eaa5 00000012 0001fead     ................
   31f14:	00000013 0001eaa9 00000016 0001ff6f     ............o...
   31f24:	00000017 0001eab1 00000018 00020021     ............!...
   31f34:	00000019 0001eab9 0000001b 000200d5     ................
   31f44:	0000001d 00020113 0000001e 0001eb3d     ............=...
   31f54:	00000052 0001ff19 5f656c62 5f747461     R.......ble_att_
   31f64:	5f727673 70657270 746e655f 705f7972     svr_prep_entry_p
   31f74:	006c6f6f 5f656c62 5f747461 5f727673     ool.ble_att_svr_
   31f84:	72746e65 6f705f79 00006c6f 20504147     entry_pool..GAP 
   31f94:	636f7270 72756465 6e692065 61697469     procedure initia
   31fa4:	3a646574 76646120 69747265 203b6573     ted: advertise; 
   31fb4:	00000000 20504147 636f7270 72756465     ....GAP procedur
   31fc4:	6e692065 61697469 3a646574 6f747320     e initiated: sto
   31fd4:	64612070 74726576 6e697369 000a2e67     p advertising...
   31fe4:	20504147 636f7270 72756465 6e692065     GAP procedure in
   31ff4:	61697469 3a646574 6e616320 206c6563     itiated: cancel 
   32004:	6e6e6f63 69746365 000a6e6f 5f656c62     connection..ble_
   32014:	5f706167 61647075 00006574 5f656c62     gap_update..ble_
   32024:	00706167 63736964 646f6d5f 64253d65     gap.disc_mode=%d
   32034:	00000000 72696420 5f746365 72646461     .... direct_addr
   32044:	7079745f 64253d65 72696420 5f746365     _type=%d direct_
   32054:	72646461 0000003d 76646120 6168635f     addr=... adv_cha
   32064:	6c656e6e 70616d5f 2064253d 5f6e776f     nnel_map=%d own_
   32074:	72646461 7079745f 64253d65 76646120     addr_type=%d adv
   32084:	6c69665f 5f726574 696c6f70 253d7963     _filter_policy=%
   32094:	64612064 74695f76 6d5f6c76 253d6e69     d adv_itvl_min=%
   320a4:	64612064 74695f76 6d5f6c76 253d7861     d adv_itvl_max=%
   320b4:	00000064 6e6e6f63 69746365 70206e6f     d...connection p
   320c4:	6d617261 72657465 64707520 3b657461     arameter update;
   320d4:	6e6f6320 61685f6e 656c646e 2064253d      conn_handle=%d 
   320e4:	6c767469 6e696d5f 2064253d 6c767469     itvl_min=%d itvl
   320f4:	78616d5f 2064253d 6574616c 3d79636e     _max=%d latency=
   32104:	73206425 72657075 69736976 745f6e6f     %d supervision_t
   32114:	6f656d69 253d7475 696d2064 65635f6e     imeout=%d min_ce
   32124:	6e656c5f 2064253d 5f78616d 6c5f6563     _len=%d max_ce_l
   32134:	253d6e65 00000064 6e756f63 64253d74     en=%d...count=%d
   32144:	00000020 72746e65 64252d79 64617b3d      ...entry-%d={ad
   32154:	745f7264 3d657079 61206425 3d726464     dr_type=%d addr=
   32164:	00000000 0000207d 746e6f63 6c6c6f72     ....} ..controll
   32174:	72207265 726f7065 20646574 61766e69     er reported inva
   32184:	2064696c 6f727265 6f632072 69206564     lid error code i
   32194:	6f63206e 6f636e6e 656c706d 65206574     n conncomplete e
   321a4:	746e6576 7525203a 00000000 20504147     vent: %u....GAP 
   321b4:	636f7270 72756465 6e692065 61697469     procedure initia
   321c4:	3a646574 72657420 616e696d 63206574     ted: terminate c
   321d4:	656e6e6f 6f697463 63203b6e 5f6e6e6f     onnection; conn_
   321e4:	646e6168 253d656c 63682064 65725f69     handle=%d hci_re
   321f4:	6e6f7361 0a64253d 00000000 20504147     ason=%d.....GAP 
   32204:	636f7270 72756465 6e692065 61697469     procedure initia
   32214:	3a646574 00000020 20504147 636f7270     ted: ...GAP proc
   32224:	72756465 6e692065 61697469 3a646574     edure initiated:
   32234:	74657320 69687720 696c6574 203b7473      set whitelist; 
   32244:	00000000 28030010 28020010 28000010     .......(...(...(

00032254 <ble_gattc_err_dispatch>:
   32254:	00021a17 00021a6f 00021ad3 00021b37     ....o.......7...
   32264:	00021b9f 00021c03 00021c6f 00021cd3     ........o.......
   32274:	00021d2b 00021d83 00021def 00022079     +...........y ..
   32284:	00022123 00022103 0002257d 5f656c62     #!...!..}%..ble_
   32294:	74746167 72705f63 705f636f 006c6f6f     gattc_proc_pool.
   322a4:	5f656c62 74746167 00000063 69646e69     ble_gattc...indi
   322b4:	65746163 0000203b 69746f6e 203b7966     cate; ..notify; 
   322c4:	00000000 5f747461 646e6168 253d656c     ....att_handle=%
   322d4:	00000a64 54544147 6f727020 75646563     d...GATT procedu
   322e4:	69206572 6974696e 64657461 7325203a     re initiated: %s
   322f4:	00000000                                ....

000322f8 <ble_gattc_resume_dispatch>:
   322f8:	00000000 00022481 00022431 000223d1     .....$..1$...#..
   32308:	00022379 00022329 000222d9 00000000     y#..)#..."......
   32318:	00000000 000222a1 00000000 00000000     ....."..........
   32328:	00022263 000221d1 00000000              c"...!......

00032334 <ble_gattc_tmo_dispatch>:
   32334:	00021a09 00021a61 00021ac5 00021b29     ....a.......)...
   32344:	00021b91 00021bf5 00021c61 00021cc5     ........a.......
   32354:	00021d1d 00021d75 00021de1 0002206d     ....u.......m ..
   32364:	00021e31 00021e85 00022011 28030010     1........ .....(
   32374:	5f656c62 74746167 00000073 5f656c62     ble_gatts...ble_
   32384:	74746167 6c635f73 66635f74 6f705f67     gatts_clt_cfg_po
   32394:	00006c6f 5f656c62 685f7368 655f6963     ol..ble_hs_hci_e
   323a4:	6f705f76 00006c6f 5f656c62 00007368     v_pool..ble_hs..
   323b4:	6c696146 74206465 6572206f 726f7473     Failed to restor
   323c4:	52492065 6620734b 206d6f72 726f7473     e IRKs from stor
   323d4:	73203b65 75746174 64253d73 0000000a     e; status=%d....
   323e4:	5f656c62 635f7368 5f6e6e6f 6c6f6f70     ble_hs_conn_pool
   323f4:	00000000 5f656c62 685f7368 665f6963     ....ble_hs_hci_f
   32404:	00676172                                rag.

00032408 <ble_hs_hci_evt_dispatch>:
   32408:	0000003e 00024e59 00000013 00024f59     >...YN......YO..
   32418:	00000005 00024f27 00000008 00024f13     ....'O.......O..
   32428:	00000030 00024eff 00000010 00024eeb     0....N.......N..

00032438 <ble_hs_hci_evt_le_dispatch>:
   32438:	00000000 00025151 0002504d 000251f3     ....QQ..MP...Q..
   32448:	000251df 000251cb 000251b7 00000000     .Q...Q...Q......
	...
   32460:	000250cb 00024fcf 00024fbb 00024ecb     .P...O...O...N..
   32470:	00024ecf 00024ed3 00024ed7 00024edf     .N...N...N...N..
   32480:	00024ee3 00024ee7 00000000 00000000     .N...N..........
	...
   32498:	00024edb 65766461 73697472 74207265     .N..advertiser t
   324a8:	72777078 74756f20 20666f20 676e6172     xpwr out of rang
   324b8:	00000a65                                e...

000324bc <priv_addr_types.12031>:
   324bc:	00000203                                ....

000324c0 <pub_addr_types.12030>:
   324c0:	00000001 6c696166 74206465 6f63206f     ....failed to co
   324d0:	6769666e 20657275 74736572 6465726f     nfigure restored
   324e0:	4b524920 0000000a                        IRK....

000324e8 <ble_hs_pvcy_default_irk>:
   324e8:	16e28def 0d43ec4f 34dd5bbf b81e53c0     ....O.C..[.4.S..
   324f8:	5f656c62 735f7368 5f706f74 6d726574     ble_hs_stop_term
   32508:	74616e69 69745f65 756f656d 62635f74     inate_timeout_cb
   32518:	2064252c 6e6e6f63 69746365 73286e6f     ,%d connection(s
   32528:	74732029 206c6c69 0a207075 00000000     ) still up .....
   32538:	5f656c62 6163326c 68635f70 705f6e61     ble_l2cap_chan_p
   32548:	006c6f6f 5f656c62 6163326c 00000070     ool.ble_l2cap...

00032558 <ble_l2cap_sig_dispatch>:
   32558:	00000000 00026141 00000000 00025fdd     ....Aa......._..
   32568:	00000000 00025fdd 00025fdd 00025fdd     ....._..._..._..
   32578:	00000000 00025fdd 00000000 00025fdd     ....._......._..
   32588:	00000000 00025fdd 00000000 00025fdd     ....._......._..
   32598:	00000000 00025fdd 00026225 00026155     ....._..%b..Ua..
   325a8:	00025fdd 00025fdd 00025fdd 00025fdd     ._..._..._..._..
   325b8:	00025fdd 00025fdd 00025fdd 5f656c62     ._..._..._..ble_
   325c8:	6163326c 69735f70 72705f67 705f636f     l2cap_sig_proc_p
   325d8:	006c6f6f                                ool.

000325dc <ble_sm_dispatch>:
   325dc:	00000000 00027473 000276af 00027601     ....st...v...v..
   325ec:	00027b8b 00026fc5 000273ed 00027373     .{...o...s..ss..
   325fc:	000272f3 00027279 000271f9 00027d5b     .r..yr...q..[}..
   3260c:	00028679 00028873 000265b1 5f656c62     y...s....e..ble_
   3261c:	705f6d73 5f636f72 6c6f6f70 00000000     sm_proc_pool....
   3262c:	5f656c62 705f6d73 5f726961 6c696166     ble_sm_pair_fail
   3263c:	2078745f 6c696166 202c6465 3d206372     _tx failed, rc =
   3264c:	0a642520 00000000                        %d.....

00032654 <ble_sm_state_dispatch>:
   32654:	00027ad7 00026d97 00026d85 00026ce3     .z...m...m...l..
   32664:	00026d37 00026c55 00026c47 0002696f     7m..Ul..Gl..oi..
   32674:	000267dd 0002859d 00028789              .g..........

00032680 <ble_sm_sc_init_ioa>:
   32680:	00020000 02040002 03030400 00030002     ................
   32690:	00000000 00020403 00000004              ............

0003269c <ble_sm_sc_resp_ioa>:
   3269c:	00030000 03040003 02020400 00020002     ................
   326ac:	00000000 00030402 00000004              ............

000326b8 <ble_uuid_base>:
   326b8:	5f9b34fb 80000080 00001000 00000000     .4._............
   326c8:	30257830 00007834 30257830 00786c38     0x%04x..0x%08lx.
   326d8:	78323025 78323025 78323025 78323025     %02x%02x%02x%02x
   326e8:	3230252d 32302578 30252d78 30257832     -%02x%02x-%02x%0
   326f8:	252d7832 25783230 2d783230 78323025     2x-%02x%02x-%02x
   32708:	78323025 78323025 78323025 78323025     %02x%02x%02x%02x
   32718:	78323025 00000000                       %02x....

00032720 <ble_sm_alg_dbg_priv_key>:
   32720:	d4f6493f 385fc5a3 e3b3c974 503f10d2     ?I...._8t.....?P
   32730:	7b60ff4a 99b740eb a6b89958 bd1a3ccd     J.`{.@..X....<..
   32740:	00000077 0000316e 0000326e 6b63616d     w...n1..n2..mack
   32750:	00007965 006b746c 61636f69 00000070     ey..ltk.iocap...
   32760:	00743161 00003161 00743261 00003261     a1t.a1..a2t.a2..
   32770:	00736572 00000076 00000079              res.v...y...

0003277c <curve_secp256r1>:
   3277c:	01002008 ffffffff ffffffff ffffffff     . ..............
	...
   32798:	00000001 ffffffff fc632551 f3b9cac2     ........Q%c.....
   327a8:	a7179e84 bce6faad ffffffff ffffffff     ................
   327b8:	00000000 ffffffff d898c296 f4a13945     ............E9..
   327c8:	2deb33a0 77037d81 63a440f2 f8bce6e5     .3.-.}.w.@.c....
   327d8:	e12c4247 6b17d1f2 37bf51f5 cbb64068     GB,....k.Q.7h@..
   327e8:	6b315ece 2bce3357 7c0f9e16 8ee7eb4a     .^1kW3.+...|J...
   327f8:	fe1a7f9b 4fe342e2 27d2604b 3bce3c3e     .....B.OK`.'><.;
   32808:	cc53b0f6 651d06b0 769886bc b3ebbd55     ..S....e...vU...
   32818:	aa3a93e7 5ac635d8 0002b807 0002b961     ..:..5.Z....a...
   32828:	0002b4a9                                ....

0003282c <salt.12283>:
   3282c:	9183886c 38a5f5aa db0b3760 be83605a     l......8`7..Z`..

0003283c <ble_svc_ans_defs>:
   3283c:	00000001 200002f0 00000000 20000308     ....... ....... 
	...

0003285c <ble_svc_dis_defs>:
   3285c:	00000001 20000398 00000000 200003a4     ....... ....... 
	...
   3287c:	63617041 4d206568 77656e79 694e2074     Apache Mynewt Ni
   3288c:	454c426d 00000000                       mBLE....

00032894 <ble_svc_gap_defs>:
   32894:	00000001 20000408 00000000 20000414     ....... ....... 
	...

000328b4 <ble_svc_gatt_defs>:
   328b4:	00000001 2000047c 00000000 20000484     ....|.. ....... 
	...
   328d4:	5f656c62 6f2f7368 735f7275 00006365     ble_hs/our_sec..
   328e4:	5f656c62 702f7368 5f726565 00636573     ble_hs/peer_sec.
   328f4:	5f656c62 632f7368 00646363 5f72756f     ble_hs/cccd.our_
   32904:	00636573 72656570 6365735f 00000000     sec.peer_sec....
   32914:	64636363 00000000 5f656c62 5f696368     cccd....ble_hci_
   32924:	5f6d6172 5f646d63 6c6f6f70 00000000     ram_cmd_pool....
   32934:	5f656c62 5f696368 5f6d6172 5f747665     ble_hci_ram_evt_
   32944:	705f6968 006c6f6f 5f656c62 5f696368     hi_pool.ble_hci_
   32954:	5f6d6172 5f747665 705f6f6c 006c6f6f     ram_evt_lo_pool.

00032964 <boot_img_magic>:
   32964:	f395c277 7fefd260 0f505235 8079b62c     w...`...5RP.,.y.

00032974 <boot_swap_tables>:
   32974:	03040104 01040204 03040104 04030301     ................
   32984:	00000401                                ....

00032988 <sysflash_map_dflt>:
	...
   32990:	00008000 00000001 0000c000 00076000     .............`..
   329a0:	00000002 00082000 00076000 00000003     ..... ...`......
   329b0:	000f8000 00004000 00000010 00008000     .....@..........
   329c0:	00004000 00000011 000fc000 00004000     .@...........@..
   329d0:	00000000 01000000 02000000 04000000     ................
   329e0:	08000000 10000000 20000000 40000000     ........... ...@
   329f0:	80000000 1b000000 36000000              ...........6

000329fc <sbox>:
   329fc:	7b777c63 c56f6bf2 2b670130 76abd7fe     c|w{.ko.0.g+...v
   32a0c:	7dc982ca f04759fa afa2d4ad c072a49c     ...}.YG.......r.
   32a1c:	2693fdb7 ccf73f36 f1e5a534 1531d871     ...&6?..4...q.1.
   32a2c:	c323c704 9a059618 e2801207 75b227eb     ..#..........'.u
   32a3c:	1a2c8309 a05a6e1b b3d63b52 842fe329     ..,..nZ.R;..)./.
   32a4c:	ed00d153 5bb1fc20 39becb6a cf584c4a     S... ..[j..9JLX.
   32a5c:	fbaaefd0 85334d43 7f02f945 a89f3c50     ....CM3.E...P<..
   32a6c:	8f40a351 f5389d92 21dab6bc d2f3ff10     Q.@...8....!....
   32a7c:	ec130ccd 1744975f 3d7ea7c4 73195d64     ...._.D...~=d].s
   32a8c:	dc4f8160 88902a22 14b8ee46 db0b5ede     `.O."*..F....^..
   32a9c:	0a3a32e0 5c240649 62acd3c2 79e49591     .2:.I.$\...b...y
   32aac:	6d37c8e7 a94ed58d eaf4566c 08ae7a65     ..7m..N.lV..ez..
   32abc:	2e2578ba c6b4a61c 1f74dde8 8a8bbd4b     .x%.......t.K...
   32acc:	66b53e70 0ef60348 b9573561 9e1dc186     p>.fH...a5W.....
   32adc:	1198f8e1 948ed969 e9871e9b df2855ce     ....i........U(.
   32aec:	0d89a18c 6842e6bf 0f2d9941 16bb54b0     ......BhA.-..T..

00032afc <curve_secp256r1>:
   32afc:	01002008 ffffffff ffffffff ffffffff     . ..............
	...
   32b18:	00000001 ffffffff fc632551 f3b9cac2     ........Q%c.....
   32b28:	a7179e84 bce6faad ffffffff ffffffff     ................
   32b38:	00000000 ffffffff d898c296 f4a13945     ............E9..
   32b48:	2deb33a0 77037d81 63a440f2 f8bce6e5     .3.-.}.w.@.c....
   32b58:	e12c4247 6b17d1f2 37bf51f5 cbb64068     GB,....k.Q.7h@..
   32b68:	6b315ece 2bce3357 7c0f9e16 8ee7eb4a     .^1kW3.+...|J...
   32b78:	fe1a7f9b 4fe342e2 27d2604b 3bce3c3e     .....B.OK`.'><.;
   32b88:	cc53b0f6 651d06b0 769886bc b3ebbd55     ..S....e...vU...
   32b98:	aa3a93e7 5ac635d8 0002b807 0002b961     ..:..5.Z....a...
   32ba8:	0002b4a9                                ....

00032bac <base64_chars>:
   32bac:	44434241 48474645 4c4b4a49 504f4e4d     ABCDEFGHIJKLMNOP
   32bbc:	54535251 58575655 62615a59 66656463     QRSTUVWXYZabcdef
   32bcc:	6a696867 6e6d6c6b 7271706f 76757473     ghijklmnopqrstuv
   32bdc:	7a797877 33323130 37363534 2f2b3938     wxyz0123456789+/
   32bec:	00000000 00007325 0000203a 0000202c     ....%s..: .., ..
   32bfc:	00006325 0063255c 3025755c 5c586c34     %c..\%c.\u%04lX\
   32c0c:	34302575 0000586c 3025755c 00586c34     u%04lX..\u%04lX.
   32c1c:	0000005b 0000007b 0000007d 65757274     [...{...}...true
   32c2c:	00000000 736c6166 00000065 0000205f     ....false..._ ..
   32c3c:	6c6c252d 00000075 3438312d 34373634     -%llu...-1844674
   32c4c:	33373034 35393037 31363135 00000036     4073709551616...
   32c5c:	00002768 00000027 00000022 756c6c25     h'..'..."...%llu
   32c6c:	00000028 00000029 706d6973 2528656c     (...)...simple(%
   32c7c:	00002975 6c6c756e 00000000 65646e75     u)..null....unde
   32c8c:	656e6966 00000064 61766e69 0064696c     fined...invalid.

00032c9c <nrf52k_flash_dev>:
   32c9c:	00032cb4 00000000 00100000 00000100     .,..............
   32cac:	00000001 000000ff                       ........

00032cb4 <nrf52k_flash_funcs>:
   32cb4:	0002e351 0002e281 0002e201 0002e259     Q...........Y...
   32cc4:	00000000 0002e255 00000000              ....U.......

00032cd0 <os_bsp_uart0_cfg>:
   32cd0:	07050806                                ....

00032cd4 <nrf52_hal_timers>:
	...
   32ce8:	200043f0                                .C. 

00032cec <stdout>:
   32cec:	200004f4                                ... 

00032cf0 <MemFile_methods>:
   32cf0:	0002f91d 00000000                       ........

00032cf8 <log_fcb_handler>:
   32cf8:	00000002 0002fc31 0002ffd7 0002ffbb     ....1...........
   32d08:	0002feff 0002fe95 0002fe01 0002fbd1     ................
   32d18:	0002fbc7 0002fab5 0002fab1              ............

00032d24 <crc8_small_table>:
   32d24:	090e0700 15121b1c 31363f38 2d2a2324     ........8?61$#*-
   32d34:	65707974 00000000 72746e65 00736569     type....entries.
   32d44:	6f727265 65203a72 7972746e 6f6f7420     error: entry too
   32d54:	72616c20 28206567 20757a25 65747962      large (%zu byte
   32d64:	00002973 5f676f6c 656d616e 00000000     s)..log_name....
   32d74:	726f6263 00000000 006e6962 00727473     cbor....bin.str.
   32d84:	6576656c 0000006c 75646f6d 0000656c     level...module..
   32d94:	68676d69 00687361 0067736d 6576656c     imghash.msg.leve
   32da4:	616d5f6c 00000070 5f676f6c 7473696c     l_map...log_list
   32db4:	00000000 75646f6d 6d5f656c 00007061     ....module_map..
   32dc4:	00007374 65646e69 00000078 7478656e     ts..index...next
   32dd4:	646e695f 00007865 73676f6c 00000000     _index..logs....
   32de4:	74617473 73696c5f 00000074 6c656966     stat_list...fiel
   32df4:	00007364                                ds..

/home/crepel/Documents/EPFL/bluetooth_stuff/Link_layer_security/firmware_project/bin/targets/nordic_end/app/apps/bleprph/bleprph.elf:     file format elf32-littlearm

arm-none-eabi-objdump: section '.rodata' mentioned in a -j option, but not found in any input file
   text	   data	    bss	    dec	    hex	filename
 159216	   1112	  16336	 176664	  2b218	/home/crepel/Documents/EPFL/bluetooth_stuff/Link_layer_security/firmware_project/bin/targets/nordic_end/app/apps/bleprph/bleprph.elf
