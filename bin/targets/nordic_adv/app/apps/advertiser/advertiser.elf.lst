
/home/crepel/Documents/EPFL/bluetooth_stuff/Link_layer_security/firmware_project/bin/targets/nordic_adv/app/apps/advertiser/advertiser.elf:     file format elf32-littlearm
/home/crepel/Documents/EPFL/bluetooth_stuff/Link_layer_security/firmware_project/bin/targets/nordic_adv/app/apps/advertiser/advertiser.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0000c121

Program Header:
0x70000001 off    0x0002bdf0 vaddr 0x0002bdf0 paddr 0x0002bdf0 align 2**2
         filesz 0x00000018 memsz 0x00000018 flags r--
    LOAD off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**16
         filesz 0x0002be08 memsz 0x0002be08 flags rwx
    LOAD off    0x00030100 vaddr 0x20000100 paddr 0x0002be08 align 2**16
         filesz 0x00000124 memsz 0x00000148 flags rw-
    LOAD off    0x00030248 vaddr 0x20000248 paddr 0x0002bf2c align 2**16
         filesz 0x00000000 memsz 0x00004578 flags rw-
    LOAD off    0x00040000 vaddr 0x20000000 paddr 0x20000000 align 2**16
         filesz 0x00000000 memsz 0x00000100 flags rw-
private flags = 5000200: [Version5 EABI] [soft-float ABI]

Sections:
Idx Name               Size      VMA       LMA       File off  Algn  Flags
  0 .imghdr            00000020  0000c000  0000c000  0000c000  2**0  ALLOC
  1 .text              0001fdd0  0000c020  0000c020  0000c020  2**3  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.extab         00000000  0002bdf0  0002bdf0  00030224  2**0  CONTENTS
  3 .ARM.exidx         00000018  0002bdf0  0002bdf0  0002bdf0  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .vector_relocation 00000100  20000000  20000000  00040000  2**0  ALLOC
  5 .rtt               00000000  20000100  20000100  00030224  2**0  CONTENTS
  6 .data              00000124  20000100  0002be08  00030100  2**2  CONTENTS, ALLOC, LOAD, DATA
  7 .bssnz             00000024  20000224  0002bf2c  00030224  2**2  ALLOC
  8 .bss               00004578  20000248  0002bf2c  00030248  2**3  ALLOC
  9 .stack_dummy       000001b0  200047c0  200047c0  00030228  2**3  CONTENTS, READONLY
 10 .ARM.attributes    0000002a  00000000  00000000  000303d8  2**0  CONTENTS, READONLY
 11 .comment           0000007f  00000000  00000000  00030402  2**0  CONTENTS, READONLY
 12 .svc_table         00000004  00000000  00000000  00030481  2**0  CONTENTS, READONLY
 13 .debug_line        0003749f  00000000  00000000  00030485  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_info        000f5ffa  00000000  00000000  00067924  2**0  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev      00016d21  00000000  00000000  0015d91e  2**0  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges     00004b28  00000000  00000000  00174640  2**3  CONTENTS, READONLY, DEBUGGING
 17 .debug_str         000185aa  00000000  00000000  00179168  2**0  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc         00046995  00000000  00000000  00191712  2**0  CONTENTS, READONLY, DEBUGGING
 19 .debug_ranges      00004910  00000000  00000000  001d80a7  2**0  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame       0000deec  00000000  00000000  001dc9b8  2**2  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
0000c000 l    d  .imghdr	00000000 .imghdr
0000c020 l    d  .text	00000000 .text
0002bdf0 l    d  .ARM.extab	00000000 .ARM.extab
0002bdf0 l    d  .ARM.exidx	00000000 .ARM.exidx
20000000 l    d  .vector_relocation	00000000 .vector_relocation
20000100 l    d  .rtt	00000000 .rtt
20000100 l    d  .data	00000000 .data
20000224 l    d  .bssnz	00000000 .bssnz
20000248 l    d  .bss	00000000 .bss
200047c0 l    d  .stack_dummy	00000000 .stack_dummy
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .svc_table	00000000 .svc_table
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 gcc_startup_nrf52840.o
000001b0 l       *ABS*	00000000 Stack_Size
00000000 l       *ABS*	00000000 Heap_Size
0000c128 l       .text	00000000 .bss_zero_loop
00000000 l    df *ABS*	00000000 sbrk.c
20000100 l     O .data	00000004 sbrkBase
20000104 l     O .data	00000004 sbrkLimit
20000108 l     O .data	00000004 brk
00000000 l    df *ABS*	00000000 hal_system.c
00000000 l    df *ABS*	00000000 system_nrf52.c
0000c270 l     F .text	00000024 errata_36
0000c294 l     F .text	00000024 errata_98
0000c2b8 l     F .text	00000024 errata_103
0000c2dc l     F .text	00000024 errata_115
0000c300 l     F .text	00000024 errata_120
0000c324 l     F .text	00000024 errata_121
00000000 l    df *ABS*	00000000 start.c
00000000 l    df *ABS*	00000000 main.c
0000c474 l     F .text	00000014 on_reset
0000c488 l     F .text	00000046 set_ble_addr
0000c4d0 l     F .text	0000009c advertise
0000c578 l     F .text	00000030 adv_event
0000c56c l     F .text	0000000c on_sync
00000000 l    df *ABS*	00000000 nordic_adv-sysinit-app.c
00000000 l    df *ABS*	00000000 cmsis_nvic.c
00000000 l    df *ABS*	00000000 os_fault.c
00000000 l    df *ABS*	00000000 os.c
0000c7bc l     F .text	0000001e os_main
20000348 l     O .bss	00001000 g_os_main_stack
20000248 l     O .bss	00000100 g_idle_task_stack
00000000 l    df *ABS*	00000000 os_callout.c
00000000 l    df *ABS*	00000000 os_dev.c
0000cb1c l     F .text	0000005c os_dev_add
0000cb78 l     F .text	00000026 os_dev_initialize
0000cb9e l     F .text	00000020 os_dev_init
20001348 l     O .bss	00000008 g_os_dev_list
00000000 l    df *ABS*	00000000 os_eventq.c
20001350 l     O .bss	00000010 os_eventq_main
00000000 l    df *ABS*	00000000 os_mempool.c
0000ce30 l     F .text	00000078 os_mempool_init_internal
00000000 l    df *ABS*	00000000 os_msys.c
0000cfb8 l     F .text	00000010 os_msys_find_biggest_pool
0000cfc8 l     F .text	0000002c os_msys_find_pool
0000d040 l     F .text	00000058 os_msys_init_once
20001360 l     O .bss	00000db0 os_msys_1_data
20002110 l     O .bss	0000000c os_msys_1_mbuf_pool
2000211c l     O .bss	0000001c os_msys_1_mempool
20000110 l     O .data	00000008 g_msys_pool_list
00000000 l    df *ABS*	00000000 os_sanity.c
0000d124 l     F .text	00000020 os_sanity_check_list_lock
0000d144 l     F .text	0000001c os_sanity_check_list_unlock
00000000 l    df *ABS*	00000000 os_sched.c
00000000 l    df *ABS*	00000000 os_task.c
0000d4bc l     F .text	00000018 _clear_stack
00000000 l    df *ABS*	00000000 os_time.c
0000d5c4 l     F .text	0000004c os_deltatime
0000d610 l     F .text	00000064 os_time_tick
20002140 l     O .bss	00000030 basetod
00000000 l    df *ABS*	00000000 os_arch_arm.c
0000d7d8 l     F .text	00000002 os_arch_task_return_handler
00000000 l    df *ABS*	00000000 os_mbuf.c
00000000 l    df *ABS*	00000000 os_mutex.c
00000000 l    df *ABS*	00000000 HAL_CM4.o
0000e39c l       .text	00000000 SVC_User
0000e3ba l       .text	00000000 SVC_Done
00000000 l    df *ABS*	00000000 memcmp.c
0000e440 l       .text	00000000 test1
0000e434 l       .text	00000000 loop1
0000e446 l       .text	00000000 res1
0000e462 l       .text	00000000 test2
0000e46a l       .text	00000000 done
0000e456 l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memcpy.c
0000e476 l       .text	00000000 test1
0000e472 l       .text	00000000 loop1
0000e484 l       .text	00000000 test2
0000e480 l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 console.c
0000e524 l     F .text	00000054 add_ascii_num_with_char
0000e578 l     F .text	0000003c console_handle_line
0000e5b4 l     F .text	0000003c console_filter_out
0000e5f0 l     F .text	0000001e console_filter_write
0000e610 l     F .text	00000044 console_append_char
0000e654 l     F .text	0000001e console_write_nolock
0000e674 l     F .text	00000050 handle_end
0000e6c4 l     F .text	00000050 handle_home
0000e714 l     F .text	00000068 del_char
0000e77c l     F .text	00000020 handle_delete
0000e79c l     F .text	00000190 handle_ansi
0000e92c l     F .text	00000058 handle_backspace
0000e984 l     F .text	0000005c console_clear_line
0000e9e0 l     F .text	000000a8 insert_char
0000ea94 l     F .text	0000010c handle_nlip
20002174 l     O .bss	00000004 ansi_val
20002178 l     O .bss	00000004 ansi_val_2
2000217c l     O .bss	00000010 avail_queue
2000218c l     O .bss	00000004 completion
20002190 l     O .bss	00000004 console_compat_rx_cb
20002194 l     O .bss	0000000c console_write_lock
200021a0 l     O .bss	00000002 cur
200021a4 l     O .bss	00000004 current_line_ev
200021a8 l     O .bss	00000004 esc_state
200021ac l     O .bss	00000004 lines_queue
200021b0 l     O .bss	00000004 nlip_state
200021b4 l     O .bss	00000001 prev_endl.8570
200021b5 l     O .bss	00000001 rx_stalled
200021b6 l     O .bss	00000002 trailing_chars
20000128 l     O .data	00000004 echo
00000000 l    df *ABS*	00000000 console_fmt.c
00000000 l    df *ABS*	00000000 ticks.c
2000012c l     O .data	00000001 do_ticks
00000000 l    df *ABS*	00000000 uart_console.c
0000eed8 l     F .text	00000008 uart_blocking_tx
0000eee0 l     F .text	00000014 uart_console_ring_add_char
0000eef4 l     F .text	00000014 uart_console_ring_pull_char
0000ef08 l     F .text	00000016 uart_console_ring_is_full
0000ef1e l     F .text	0000000e uart_console_ring_is_empty
0000ef2c l     F .text	00000034 uart_console_tx_flush
0000ef60 l     F .text	0000001c uart_console_tx_char
0000ef7c l     F .text	00000058 uart_console_queue_char
0000efd4 l     F .text	00000044 uart_console_rx_char
0000f018 l     F .text	00000074 uart_console_rx_char_event
200021b8 l     O .bss	00000008 cr_rx
200021c0 l     O .bss	00000020 cr_rx_buf
200021e0 l     O .bss	00000008 cr_tx
200021e8 l     O .bss	00000020 cr_tx_buf
20002208 l     O .bss	00000001 uart_console_rx_stalled
2000220c l     O .bss	00000004 uart_dev
20002210 l     O .bss	00000004 write_char_cb
20000130 l     O .data	00000004 b.8420
00000000 l    df *ABS*	00000000 flash_map.c
0000f1a4 l     F .text	0000003c flash_area_find_idx
0000f1e0 l     F .text	00000058 flash_map_area_overlaps
0000f238 l     F .text	0000007c flash_map_add_new_dflt_areas
0000f2b4 l     F .text	00000078 flash_map_read_mfg
20002214 l     O .bss	00000078 mfg_areas.8453
00000000 l    df *ABS*	00000000 log.c
0000f410 l     F .text	0000001c log_registered
0000f42c l     F .text	0000000c log_chk_type
0000f438 l     F .text	00000014 log_chk_max_entry_len
0000f44c l     F .text	00000016 log_call_append_cb
0000f468 l     F .text	00000128 log_append_prepare
0000f64c l     F .text	0000003c log_read_last_hdr
0000f778 l     F .text	00000040 log_read_hdr_walk
2000228c l     O .bss	00000001 log_written
20000134 l     O .data	00000008 g_log_list
00000000 l    df *ABS*	00000000 log_console.c
0000f7b8 l     F .text	00000004 log_console_read
0000f7bc l     F .text	00000004 log_console_walk
0000f7c0 l     F .text	00000004 log_console_flush
0000f7c4 l     F .text	00000048 log_console_print_hdr
0000f80c l     F .text	00000048 log_console_dump_cbor_entry
0000f854 l     F .text	00000040 log_console_append_body
0000f894 l     F .text	0000001c log_console_append
20002290 l     O .bss	0000001c log_console
00000000 l    df *ABS*	00000000 log_level.c
200022ac l     O .bss	00000080 log_level_map
00000000 l    df *ABS*	00000000 modlog.c
0000f934 l     F .text	00000028 modlog_find_by_module
0000f95c l     F .text	0000003c modlog_insert
0000f998 l     F .text	0000001c modlog_alloc
0000f9b4 l     F .text	00000058 modlog_infer_handle
0000fa0c l     F .text	00000046 modlog_register_no_lock
0000fa52 l     F .text	0000002e modlog_append_one
0000fa80 l     F .text	00000080 modlog_append_no_lock
2000232c l     O .bss	00000004 modlog_first_dflt
20002330 l     O .bss	000000c0 modlog_mapping_buf
200023f0 l     O .bss	00000004 modlog_mappings
200023f4 l     O .bss	00000024 modlog_rwl
00000000 l    df *ABS*	00000000 mfg.c
0000fc74 l     F .text	00000094 mfg_seek_next_aux
0000fd08 l     F .text	00000070 mfg_read_mmr
0000fd78 l     F .text	00000054 mfg_read_next_mmr
0000fdcc l     F .text	00000044 mfg_open_flash_area
0000fe10 l     F .text	00000044 mfg_read_tlv_body
0000fee4 l     F .text	0000004e mfg_read_mmr_refs
20002418 l     O .bss	00000001 mfg_initialized
2000241c l     O .bss	00000018 mfg_mmrs
20002434 l     O .bss	00000004 mfg_num_mmrs
00000000 l    df *ABS*	00000000 stats.c
0000ff32 l     F .text	00000010 stats_offset
0000ff44 l     F .text	0000004c stats_register_internal
0000ffb4 l     F .text	0000003c stats_module_init_internal
00000000 l    df *ABS*	00000000 sysinit.c
00010096 l     F .text	00000006 sysinit_dflt_panic_cb
00000000 l    df *ABS*	00000000 mem.c
00000000 l    df *ABS*	00000000 rwlock.c
0001012c l     F .text	0000000c rwlock_complete_handoff
00010138 l     F .text	0000001a rwlock_read_must_block
00010152 l     F .text	00000016 rwlock_write_must_block
00010168 l     F .text	0000003a rwlock_unblock
00000000 l    df *ABS*	00000000 ble_ll.c
000102c4 l     F .text	00000070 ble_ll_count_rx_adv_pdus
00010334 l     F .text	00000060 ble_ll_count_rx_stats
00010394 l     F .text	00000020 ble_ll_flush_pkt_queue
00010404 l     F .text	0000001c ble_ll_hw_err_timer_cb
00010420 l     F .text	0000000a ble_ll_event_comp_pkts
0001042a l     F .text	00000008 ble_ll_event_dbuf_overflow
00010434 l     F .text	00000078 ble_ll_tx_pkt_in
000104ac l     F .text	00000008 ble_ll_event_tx_pkt
000104b4 l     F .text	000000b8 ble_ll_rx_pkt_in
0001056c l     F .text	00000008 ble_ll_event_rx_pkt
00010574 l     F .text	00000020 ble_ll_seed_prng
20002438 l     O .bss	000001e0 g_ble_ll_stack
0002af30 l     O .text	00000008 g_ble_ll_pdu_header_tx_time
00000000 l    df *ABS*	00000000 ble_ll_adv.c
00010c78 l     F .text	0000001a ble_ll_adv_first_chan
00010c92 l     F .text	0000001a ble_ll_adv_final_chan
00010cac l     F .text	00000016 ble_ll_adv_flags_set
00010cc2 l     F .text	00000018 ble_ll_adv_flags_clear
00010cda l     F .text	0000007c ble_ll_adv_rpa_update
00010d56 l     F .text	00000016 ble_ll_adv_active_chanset_clear
00010d6c l     F .text	00000030 ble_ll_adv_tx_done
00010d9c l     F .text	0000004c ble_ll_adv_sm_find_configured
00010de8 l     F .text	00000034 ble_ll_adv_active_chanset_set_pri
00010e1c l     F .text	0000002c ble_ll_adv_scheduled
00010e48 l     F .text	00000054 ble_ll_adv_set_sched
00010fb4 l     F .text	000000e8 ble_ll_adv_tx_start_cb
00010e9c l     F .text	00000118 ble_ll_adv_sm_start
0001109c l     F .text	000000aa ble_ll_adv_legacy_pdu_make
00011146 l     F .text	0000005a ble_ll_adv_scan_rsp_legacy_pdu_make
000111a0 l     F .text	00000030 ble_ll_adv_drop_event
000111d0 l     F .text	00000052 ble_ll_adv_update_adv_scan_rsp_data
00011224 l     F .text	00000070 ble_ll_adv_sm_stop
00011294 l     F .text	0000002e ble_ll_adv_set_enable
000112c2 l     F .text	00000068 ble_ll_adv_update_data_mbuf
0001132a l     F .text	000000b0 ble_ll_adv_set_scan_rsp_data
000113da l     F .text	000000ca ble_ll_adv_set_adv_data
000114a4 l     F .text	0000004c ble_ll_adv_already_connected
000114f0 l     F .text	0000015c ble_ll_adv_rx_req
0001164c l     F .text	000000fc ble_ll_adv_conn_req_rxd
00011748 l     F .text	00000026 ble_ll_adv_sm_stop_timeout
00011770 l     F .text	00000064 ble_ll_adv_reschedule_event
000117d4 l     F .text	00000034 ble_ll_adv_sm_init
0001194c l     F .text	0000000a ble_ll_adv_event_done
0001182c l     F .text	00000110 ble_ll_adv_done
0001193c l     F .text	00000010 ble_ll_adv_make_done
00000000 l    df *ABS*	00000000 ble_ll_conn.c
00011d1c l     F .text	0000001a ble_ll_conn_is_empty_pdu
00011d36 l     F .text	0000004c ble_ll_conn_calc_dci_csa1
00011d84 l     F .text	00000018 ble_ll_conn_halt
00011d9c l     F .text	00000014 ble_ll_conn_current_sm_over
00011db0 l     F .text	00000010 ble_ll_conn_rxend_unencrypt
00011dc0 l     F .text	00000010 ble_ll_conn_txend_encrypt
00011dd0 l     F .text	00000008 ble_ll_conn_wait_txend
00011dd8 l     F .text	0000000a ble_ll_conn_connect_ind_txend_to_init
00011de2 l     F .text	0000000a ble_ll_conn_connect_ind_txend_to_standby
00011dec l     F .text	00000028 ble_ll_init_get_conn_comp_ev
00011e14 l     F .text	00000032 ble_ll_conn_start_rx_encrypt
00011e46 l     F .text	00000010 ble_ll_conn_start_rx_unencrypt
00011e56 l     F .text	00000018 ble_ll_conn_continue_rx_encrypt
00011e6e l     F .text	00000020 ble_ll_conn_adjust_pyld_len
00011e8e l     F .text	00000030 ble_ll_update_max_tx_octets_phy_mode
00011ec0 l     F .text	00000040 ble_ll_conn_get_next_sched_time
00011f00 l     F .text	00000468 ble_ll_conn_tx_pdu
00012368 l     F .text	00000144 ble_ll_conn_event_start_cb
000124ac l     F .text	00000070 ble_ll_conn_master_common_init
0001251c l     F .text	00000036 ble_ll_conn_calc_itvl_ticks
00012552 l     F .text	0000006e ble_ll_conn_can_send_next_pdu
000125c0 l     F .text	0000006c ble_ll_conn_chk_csm_flags
0001262c l     F .text	000000a0 ble_ll_conn_connect_ind_tx_pducb
000126cc l     F .text	00000108 ble_ll_conn_is_peer_adv
000127d4 l     F .text	000000c0 ble_ll_conn_connect_ind_prepare
0001292c l     F .text	00000268 ble_ll_conn_next_event
00012b94 l     F .text	00000118 ble_ll_conn_created
00012cac l     F .text	00000016 ble_ll_conn_set_csa
00013018 l     F .text	00000138 ble_ll_conn_event_end
00000000 l    df *ABS*	00000000 ble_ll_conn_hci.c
00013ec8 l     F .text	0000002e ble_ll_conn_hci_chk_scan_params
00013ef8 l     F .text	00000028 ble_ll_init_alloc_conn_comp_ev
00013f76 l     F .text	00000066 ble_ll_conn_process_conn_params
0001413c l     F .text	00000034 ble_ll_conn_hci_cancel_conn_complete_event
20002618 l     O .bss	00000004 g_ble_ll_last_num_comp_pkt_evt
00000000 l    df *ABS*	00000000 ble_ll_ctrl.c
00014a44 l     F .text	00000038 ble_ll_ctrl_enc_allowed_pdu
00014a7c l     F .text	00000020 ble_ll_ctrl_rx_start_enc_req
00014a9c l     F .text	0000001a ble_ll_ctrl_rx_pause_enc_req
00014ab6 l     F .text	00000020 ble_ll_ctrl_rx_pause_enc_rsp
00014ad6 l     F .text	0000000c ble_ll_ctrl_proc_rsp_timer_cb
00014ae4 l     F .text	00000028 ble_ll_ctrl_start_rsp_timer
00014b0c l     F .text	00000114 ble_ll_ctrl_conn_upd_make
00014c20 l     F .text	00000026 ble_ll_ctrl_version_ind_make
00014c46 l     F .text	00000028 ble_ll_ctrl_datalen_upd_make
00014c6e l     F .text	000000cc ble_ll_ctrl_conn_param_pdu_make
00014d3c l     F .text	00000044 ble_ll_ctrl_chanmap_req_make
00014d80 l     F .text	0000002c ble_ll_ctrl_update_features
00014dac l     F .text	00000052 ble_ll_ctrl_rx_feature_req
00014dfe l     F .text	0000004c ble_ll_ctrl_enc_req_make
00014e4c l     F .text	000000e0 ble_ll_ctrl_proc_init
00014f2c l     F .text	00000088 ble_ll_ctrl_rx_conn_update
00014fb4 l     F .text	0000004c ble_ll_ctrl_rx_chanmap_req
00015000 l     F .text	00000066 ble_ll_ctrl_len_proc
00015066 l     F .text	0000007e ble_ll_ctrl_rx_enc_req
00015190 l     F .text	0000003c ble_ll_ctrl_rx_enc_rsp
00015284 l     F .text	00000164 ble_ll_ctrl_conn_param_pdu_proc
000153e8 l     F .text	00000034 ble_ll_ctrl_rx_conn_param_rsp
000155a4 l     F .text	000000cc ble_ll_ctrl_proc_unk_rsp
00015670 l     F .text	00000038 ble_ll_ctrl_rx_feature_rsp
000156a8 l     F .text	00000060 ble_ll_ctrl_rx_version_ind
00015708 l     F .text	0000004c ble_ll_ctrl_rx_start_enc_rsp
00015754 l     F .text	0000000a ble_ll_ctrl_rx_ping_rsp
0001575e l     F .text	00000068 ble_ll_ctrl_rx_conn_param_req
000157c6 l     F .text	0000007c ble_ll_ctrl_rx_reject_ind
00000000 l    df *ABS*	00000000 ble_ll_hci.c
00015cea l     F .text	00000004 ble_ll_hci_get_num_cmd_pkts
00015cee l     F .text	00000020 ble_ll_hci_rd_local_version
00015d0e l     F .text	0000001c ble_ll_hci_rd_local_supp_feat
00015d2c l     F .text	00000018 ble_ll_hci_rd_bd_addr
00015d44 l     F .text	0000001c ble_ll_hci_set_le_event_mask
00015d60 l     F .text	00000018 ble_ll_hci_le_read_bufsize
00015d78 l     F .text	00000018 ble_ll_hci_le_rd_sugg_data_len
00015d90 l     F .text	00000020 ble_ll_hci_le_rd_max_data_len
00015db0 l     F .text	0000004a ble_ll_hci_le_cmd_send_cmd_status
00015dfc l     F .text	0000001c ble_ll_read_rf_path_compensation
00015e18 l     F .text	0000001c ble_ll_hci_cb_set_event_mask
00015e34 l     F .text	0000001c ble_ll_hci_cb_set_event_mask2
00015e50 l     F .text	00000022 ble_ll_hci_link_ctrl_cmd_proc
00015e72 l     F .text	0000004a ble_ll_hci_ctlr_bb_cmd_proc
00015ebc l     F .text	00000054 ble_ll_hci_rd_local_supp_cmd
00015f10 l     F .text	0000005a ble_ll_hci_info_params_cmd_proc
00015f6a l     F .text	00000014 ble_ll_hci_status_params_cmd_proc
00015f7e l     F .text	00000016 ble_ll_hci_le_read_local_features
00015f94 l     F .text	00000042 ble_ll_hci_le_encrypt
00015fd6 l     F .text	00000012 ble_ll_hci_le_rand
00015fe8 l     F .text	00000016 ble_ll_hci_le_read_supp_states
00016000 l     F .text	00000058 ble_ll_hci_le_wr_sugg_data_len
00016058 l     F .text	00000020 ble_ll_read_tx_power
00016078 l     F .text	00000064 ble_ll_write_rf_path_compensation
000160dc l     F .text	000002b6 ble_ll_hci_le_cmd_proc
000163c8 l     F .text	00000118 ble_ll_hci_cmd_proc
2000261c l     O .bss	00000010 g_ble_ll_hci_cmd_ev
20002630 l     O .bss	00000008 g_ble_ll_hci_event_mask
20002638 l     O .bss	00000008 g_ble_ll_hci_event_mask2
20002640 l     O .bss	00000008 g_ble_ll_hci_le_event_mask
20002648 l     O .bss	00000002 rx_path_pwr_compensation
2000264a l     O .bss	00000002 tx_path_pwr_compensation
00000000 l    df *ABS*	00000000 ble_ll_hci_ev.c
00000000 l    df *ABS*	00000000 ble_ll_rand.c
00000000 l    df *ABS*	00000000 ble_ll_resolv.c
00016a34 l     F .text	00000018 ble_ll_resolv_irk_nonzero
00016a4c l     F .text	0000002c ble_ll_is_controller_busy
00016a78 l     F .text	00000020 ble_ll_resolv_list_chg_allowed
00016a98 l     F .text	00000040 ble_ll_is_on_resolv_list
00016ad8 l     F .text	00000078 ble_ll_resolv_gen_priv_addr
00016b50 l     F .text	00000064 ble_ll_resolv_rpa_timer_cb
00000000 l    df *ABS*	00000000 ble_ll_rfmgmt.c
000170f8 l     F .text	00000034 ble_ll_rfmgmt_disable
0001712c l     F .text	0000004c ble_ll_rfmgmt_release_ev
00017178 l     F .text	0000003c ble_ll_rfmgmt_enable
000171b4 l     F .text	00000014 ble_ll_rfmgmt_timer_exp
000171c8 l     F .text	00000084 ble_ll_rfmgmt_timer_reschedule
2000264c l     O .bss	00000044 g_ble_ll_rfmgmt_data
00000000 l    df *ABS*	00000000 ble_ll_scan.c
00017380 l     F .text	0000000c ble_ll_get_chan_to_scan
0001738c l     F .text	0000000e ble_ll_scan_get_next_adv_prim_chan
0001739a l     F .text	0000002a ble_ll_scan_move_window_to
000173c4 l     F .text	00000030 ble_ll_scan_is_inside_window
000173f4 l     F .text	00000056 ble_ll_scan_get_addr_data_from_legacy
0001744c l     F .text	000000c8 ble_ll_scan_req_backoff
00017514 l     F .text	00000074 ble_ll_scan_have_rxd_scan_rsp
00017588 l     F .text	00000060 ble_ll_scan_dup_update_legacy
000175e8 l     F .text	0000012c ble_ll_scan_rx_filter
00017714 l     F .text	000000b0 ble_ll_scan_rx_isr_on_legacy
000177c4 l     F .text	00000026 ble_ll_scan_req_tx_pdu_cb
000177ea l     F .text	0000002e ble_ll_scan_refresh_nrpa
00017818 l     F .text	00000070 ble_ll_scan_req_pdu_prepare
00017888 l     F .text	0000007c ble_ll_scan_send_scan_req
00017910 l     F .text	00000118 ble_ll_scan_start
00017a28 l     F .text	00000058 ble_ll_scan_rx_pkt_in_restore_addr_data
00017a80 l     F .text	000000f8 ble_ll_scan_dup_check_legacy
00017b78 l     F .text	0000005e ble_ll_hci_send_dir_adv_report
00017bd8 l     F .text	00000094 ble_ll_hci_send_adv_report
00017c6c l     F .text	000000c4 ble_ll_scan_send_adv_report
00017d30 l     F .text	00000090 ble_ll_scan_rx_pkt_in_on_legacy
00017dc0 l     F .text	000000a8 ble_ll_scan_sm_start
00017e68 l     F .text	00000084 ble_ll_scan_common_init
00017eec l     F .text	000000e0 ble_ll_scan_event_proc
000182d8 l     F .text	00000024 ble_ll_scan_interrupted_event_cb
00018074 l     F .text	00000128 ble_ll_scan_set_enable
20002690 l     O .bss	00000001 g_ble_ll_scan_num_rsp_advs
20002694 l     O .bss	00000014 g_ble_ll_scan_params
200026a8 l     O .bss	00000088 g_ble_ll_scan_sm
20002730 l     O .bss	00000008 g_scan_dup_list
20002738 l     O .bss	00000080 g_scan_dup_mem
200027b8 l     O .bss	0000001c g_scan_dup_pool
00000000 l    df *ABS*	00000000 ble_ll_sched.c
00018634 l     F .text	0000002e ble_ll_sched_is_overlap
00018664 l     F .text	00000024 ble_ll_sched_insert_if_empty
00018688 l     F .text	0000003c ble_ll_sched_conn_overlap
000186c4 l     F .text	00000024 ble_ll_sched_overlaps_current
000186e8 l     F .text	0000008c ble_ll_sched_execute_item
00018774 l     F .text	00000048 ble_ll_sched_run
00000000 l    df *ABS*	00000000 ble_ll_utils.c
0002b000 l     O .text	00000010 g_ble_sca_ppm_tbl
00000000 l    df *ABS*	00000000 ble_ll_whitelist.c
000190d4 l     F .text	0000001c ble_ll_whitelist_chg_allowed
000190f0 l     F .text	0000003c ble_ll_whitelist_search
00000000 l    df *ABS*	00000000 ble_mitm_ll.c
00000000 l    df *ABS*	00000000 ble_hw.c
00019224 l     F .text	00000040 ble_rng_isr
200027d4 l     O .bss	00000001 g_ble_hw_whitelist_mask
00000000 l    df *ABS*	00000000 ble_phy.c
00019550 l     F .text	00000018 ble_phy_apply_errata_102_106_107
00019568 l     F .text	00000020 nrf_wait_disabled
00019588 l     F .text	000000ac ble_phy_set_start_time
00019634 l     F .text	00000004 ble_phy_get_ccm_datarate
00019638 l     F .text	00000100 ble_phy_rx_xcvr_setup
00019738 l     F .text	00000030 ble_phy_set_access_addr
00019768 l     F .text	0000001c ble_phy_stop_usec_timer
00019784 l     F .text	0000003c ble_phy_disable_irq_and_ppi
000197c0 l     F .text	00000058 ble_phy_set_start_now
00019928 l     F .text	000000e4 ble_phy_tx_end_isr
00019f74 l     F .text	00000098 ble_phy_isr
00019ce0 l     F .text	00000140 ble_phy_rx_start_isr
00019e20 l     F .text	00000154 ble_phy_rx_end_isr
200027d8 l     O .bss	00000104 g_ble_phy_enc_buf
200028dc l     O .bss	00000104 g_ble_phy_rx_buf
200029e0 l     O .bss	00000104 g_ble_phy_tx_buf
0002b018 l     O .text	00000028 g_ble_phy_chan_freq
0002b040 l     O .text	00000004 g_ble_phy_t_rxaddrdelay
0002b044 l     O .text	00000004 g_ble_phy_t_rxenddelay
0002b048 l     O .text	00000004 g_ble_phy_t_txdelay
0002b04c l     O .text	00000004 g_ble_phy_t_txenddelay
00000000 l    df *ABS*	00000000 ble_gap.c
0001a2b8 l     F .text	0000002a ble_gap_call_event_cb
0001a2e4 l     F .text	0000002c ble_gap_is_preempted
0001a310 l     F .text	00000010 ble_gap_has_client
0001a320 l     F .text	00000012 ble_gap_update_to_l2cap
0001a334 l     F .text	00000018 ble_gap_adv_active_instance
0001a34c l     F .text	00000020 ble_gap_accept_master_conn
0001a36c l     F .text	0000003c ble_gap_accept_slave_conn
0001a3a8 l     F .text	00000028 ble_gap_adv_type
0001a3d0 l     F .text	00000032 ble_gap_adv_dflt_itvls
0001a404 l     F .text	00000024 ble_gap_update_entry_find
0001a428 l     F .text	00000046 ble_gap_validate_conn_params
0001a470 l     F .text	00000020 ble_gap_event_listener_call
0001a490 l     F .text	00000034 ble_gap_extract_conn_cb
0001a4c4 l     F .text	00000028 ble_gap_call_conn_event_cb
0001a4ec l     F .text	00000094 ble_gap_fill_conn_desc
0001a580 l     F .text	00000016 ble_gap_conn_to_snapshot
0001a596 l     F .text	00000028 ble_gap_find_snapshot
0001a5be l     F .text	0000001e ble_gap_rd_rem_sup_feat_tx
0001a5dc l     F .text	0000001a ble_gap_conn_cancel_tx
0001a5f6 l     F .text	0000002e ble_gap_disc_enable_tx
0001a624 l     F .text	0000000c ble_gap_disc_disable_tx
0001a630 l     F .text	00000024 ble_gap_adv_enable_tx
0001a654 l     F .text	00000094 ble_gap_adv_params_tx
0001a6e8 l     F .text	00000042 ble_gap_tx_param_pos_reply
0001a72a l     F .text	00000022 ble_gap_tx_param_neg_reply
0001a74c l     F .text	00000042 ble_gap_update_tx
0001a790 l     F .text	00000030 ble_gap_update_entry_remove
0001a7c0 l     F .text	00000024 ble_gap_master_reset_state
0001a7e4 l     F .text	00000030 ble_gap_master_extract_state
0001a814 l     F .text	00000046 ble_gap_disc_report
0001a85a l     F .text	00000032 ble_gap_master_connect_failure
0001a88c l     F .text	00000024 ble_gap_master_failed
0001a8b0 l     F .text	00000040 ble_gap_master_connect_cancelled
0001a8f0 l     F .text	0000003c ble_gap_disc_complete
0001a92c l     F .text	00000020 ble_gap_slave_reset_state
0001a94c l     F .text	0000002c ble_gap_slave_extract_cb
0001a978 l     F .text	00000038 ble_gap_adv_finished
0001a9b0 l     F .text	00000014 ble_gap_update_entry_free
0001a9c4 l     F .text	00000038 ble_gap_master_ticks_until_exp
0001a9fc l     F .text	00000050 ble_gap_master_timer
0001aa4c l     F .text	0000003c ble_gap_update_next_exp
0001aa88 l     F .text	00000038 ble_gap_slave_ticks_until_exp
0001aac0 l     F .text	0000002c ble_gap_slave_timer
0001aaec l     F .text	00000020 ble_gap_slave_set_timer
0001ab0c l     F .text	00000060 ble_gap_rx_adv_report_sanity_check
0001ab6c l     F .text	00000074 ble_gap_log_adv
0001abe0 l     F .text	00000030 ble_gap_log_update
0001ac10 l     F .text	00000084 ble_gap_adv_validate
0001ac94 l     F .text	00000024 ble_gap_update_entry_alloc
0001b100 l     F .text	00000044 ble_gap_adv_stop_no_lock
0001b158 l     F .text	00000038 ble_gap_disc_cancel_no_lock
0001b1a4 l     F .text	0000004c ble_gap_conn_cancel_no_lock
0001b28c l     F .text	0000003e ble_gap_update_notify
0001b484 l     F .text	0000002c ble_gap_update_l2cap_cb
0001b4b0 l     F .text	00000044 ble_gap_update_timer
0001b51c l     F .text	00000034 ble_gap_update_failed
20002ae4 l     O .bss	00000004 ble_gap_event_listener_list
20002ae8 l     O .bss	00000004 ble_gap_update_entries
20002aec l     O .bss	00000018 ble_gap_update_entry_mem
20002b04 l     O .bss	0000001c ble_gap_update_entry_pool
20000224 l     O .bssnz	00000014 ble_gap_master
20000238 l     O .bssnz	00000010 ble_gap_slave
20002b20 l     O .bss	0000000c preempt_done_mutex
20002b2c l     O .bss	00000008 slaves.12902
00000000 l    df *ABS*	00000000 ble_gattc.c
0001bac4 l     F .text	00000020 ble_gattc_rx_entry_find
0001bae4 l     F .text	0000000c ble_gattc_err_dispatch_get
0001baf0 l     F .text	0000000c ble_gattc_resume_dispatch_get
0001bafc l     F .text	0000000c ble_gattc_tmo_dispatch_get
0001bb08 l     F .text	00000024 ble_gattc_proc_matches_conn_op
0001bb2c l     F .text	0000001e ble_gattc_proc_matches_expired
0001bb4a l     F .text	0000002c ble_gattc_proc_matches_conn_rx_entry
0001bb76 l     F .text	00000008 ble_gattc_proc_matches_stalled
0001bb7e l     F .text	00000014 ble_gattc_proc_timeout
0001bb94 l     F .text	0000001c ble_gattc_error
0001bbb0 l     F .text	00000040 ble_gattc_mtu_cb
0001bbf0 l     F .text	0000000e ble_gattc_mtu_tmo
0001bbfe l     F .text	0000000a ble_gattc_mtu_err
0001bc08 l     F .text	00000040 ble_gattc_disc_all_svcs_cb
0001bc48 l     F .text	0000000e ble_gattc_disc_all_svcs_tmo
0001bc56 l     F .text	00000016 ble_gattc_disc_all_svcs_err
0001bc6c l     F .text	00000040 ble_gattc_disc_svc_uuid_cb
0001bcac l     F .text	0000000e ble_gattc_disc_svc_uuid_tmo
0001bcba l     F .text	00000014 ble_gattc_disc_svc_uuid_err
0001bcce l     F .text	0000004c ble_gattc_disc_svc_uuid_rx_hinfo
0001bd1c l     F .text	00000040 ble_gattc_find_inc_svcs_cb
0001bd5c l     F .text	0000000e ble_gattc_find_inc_svcs_tmo
0001bd6a l     F .text	00000018 ble_gattc_find_inc_svcs_err
0001bd84 l     F .text	00000040 ble_gattc_disc_all_chrs_cb
0001bdc4 l     F .text	0000000e ble_gattc_disc_all_chrs_tmo
0001bdd2 l     F .text	00000014 ble_gattc_disc_all_chrs_err
0001bde8 l     F .text	00000040 ble_gattc_disc_chr_uuid_cb
0001be28 l     F .text	0000000e ble_gattc_disc_chr_uuid_tmo
0001be36 l     F .text	00000014 ble_gattc_disc_chr_uuid_err
0001be4c l     F .text	00000048 ble_gattc_disc_all_dscs_cb
0001be94 l     F .text	0000000e ble_gattc_disc_all_dscs_tmo
0001bea2 l     F .text	00000014 ble_gattc_disc_all_dscs_err
0001beb6 l     F .text	00000046 ble_gattc_disc_all_dscs_rx_idata
0001befc l     F .text	00000040 ble_gattc_read_cb
0001bf3c l     F .text	0000000e ble_gattc_read_tmo
0001bf4a l     F .text	0000000a ble_gattc_read_err
0001bf54 l     F .text	00000026 ble_gattc_read_rx_read_rsp
0001bf7c l     F .text	00000040 ble_gattc_read_uuid_cb
0001bfbc l     F .text	0000000e ble_gattc_read_uuid_tmo
0001bfca l     F .text	0000000a ble_gattc_read_uuid_err
0001bfd4 l     F .text	0000001c ble_gattc_read_uuid_rx_complete
0001bff0 l     F .text	00000040 ble_gattc_read_long_cb
0001c030 l     F .text	0000000e ble_gattc_read_long_tmo
0001c03e l     F .text	0000000a ble_gattc_read_long_err
0001c048 l     F .text	00000054 ble_gattc_read_mult_cb
0001c09c l     F .text	0000000e ble_gattc_read_mult_tmo
0001c0aa l     F .text	0000000a ble_gattc_read_mult_err
0001c0b4 l     F .text	00000038 ble_gattc_write_long_cb
0001c0ec l     F .text	0000000c ble_gattc_write_long_tmo
0001c0f8 l     F .text	0000001a ble_gattc_write_long_rx_exec
0001c114 l     F .text	00000048 ble_gattc_write_reliable_cb
0001c15c l     F .text	0000000c ble_gattc_write_reliable_tmo
0001c168 l     F .text	0000000c ble_gattc_write_reliable_rx_exec
0001c174 l     F .text	0000002c ble_gattc_proc_set_resume_timer
0001c1a0 l     F .text	00000014 ble_gattc_process_resume_status
0001c1b4 l     F .text	00000010 ble_gattc_proc_set_exp_timer
0001c1c4 l     F .text	00000024 ble_gattc_ticks_until_resume
0001c1e8 l     F .text	00000078 ble_gattc_extract
0001c260 l     F .text	0000002c ble_gattc_extract_expired
0001c28c l     F .text	00000014 ble_gattc_extract_stalled
0001c2a0 l     F .text	00000020 ble_gattc_extract_by_conn_op
0001c2c0 l     F .text	00000014 ble_gattc_extract_first_by_conn_op
0001c2d4 l     F .text	00000014 ble_gattc_extract_one
0001c2e8 l     F .text	00000028 ble_gattc_extract_with_rx_entry
0001c310 l     F .text	00000020 ble_gattc_proc_insert
0001c330 l     F .text	00000010 ble_gattc_indicate_tmo
0001c340 l     F .text	0000004c ble_gattc_write_cb
0001c38c l     F .text	0000000c ble_gattc_write_tmo
0001c398 l     F .text	00000008 ble_gattc_write_err
0001c3a0 l     F .text	00000044 ble_gattc_proc_free
0001c3e4 l     F .text	0000003e ble_gattc_fail_procs
0001c422 l     F .text	00000020 ble_gattc_write_reliable_err
0001c442 l     F .text	0000002a ble_gattc_write_long_err
0001c46c l     F .text	00000084 ble_gattc_write_reliable_tx
0001c4f0 l     F .text	00000024 ble_gattc_write_reliable_resume
0001c514 l     F .text	0000006e ble_gattc_write_long_tx
0001c582 l     F .text	00000024 ble_gattc_write_long_resume
0001c5a6 l     F .text	0000001a ble_gattc_read_long_tx
0001c5c0 l     F .text	00000026 ble_gattc_read_long_resume
0001c5e6 l     F .text	0000006e ble_gattc_read_long_rx_read_rsp
0001c654 l     F .text	00000012 ble_gattc_disc_all_dscs_tx
0001c666 l     F .text	00000026 ble_gattc_disc_all_dscs_resume
0001c68c l     F .text	00000036 ble_gattc_disc_all_dscs_rx_complete
0001c6c4 l     F .text	00000028 ble_gattc_disc_chr_uuid_tx
0001c6ec l     F .text	00000026 ble_gattc_disc_chr_uuid_resume
0001c712 l     F .text	00000036 ble_gattc_disc_chr_uuid_rx_complete
0001c748 l     F .text	00000028 ble_gattc_disc_all_chrs_tx
0001c770 l     F .text	00000026 ble_gattc_disc_all_chrs_resume
0001c796 l     F .text	00000036 ble_gattc_disc_all_chrs_rx_complete
0001c7cc l     F .text	00000030 ble_gattc_find_inc_svcs_tx
0001c7fc l     F .text	00000026 ble_gattc_find_inc_svcs_resume
0001c822 l     F .text	00000038 ble_gattc_find_inc_svcs_rx_complete
0001c85a l     F .text	0000003a ble_gattc_disc_svc_uuid_tx
0001c894 l     F .text	00000026 ble_gattc_disc_svc_uuid_resume
0001c8ba l     F .text	00000038 ble_gattc_disc_svc_uuid_rx_complete
0001c8f4 l     F .text	00000028 ble_gattc_disc_all_svcs_tx
0001c91c l     F .text	00000026 ble_gattc_disc_all_svcs_resume
0001c942 l     F .text	0000003a ble_gattc_disc_all_svcs_rx_complete
0001c97c l     F .text	00000026 ble_gattc_process_status
0001c9a4 l     F .text	00000040 ble_gattc_resume_procs
0001c9e4 l     F .text	0000001c ble_gattc_proc_alloc
0001ca00 l     F .text	00000014 ble_gattc_log_proc_init
0001ca14 l     F .text	00000020 ble_gattc_log_notify
0001ca34 l     F .text	00000020 ble_gattc_log_indicate
0001ca54 l     F .text	00000044 ble_gattc_read_uuid_rx_adata
0001ca98 l     F .text	00000028 ble_gattc_indicate_err
0001cac0 l     F .text	00000024 ble_gattc_indicate_rx_rsp
0001cae4 l     F .text	0000005c ble_gattc_disc_all_svcs_rx_adata
0001cb40 l     F .text	0000007c ble_gattc_disc_all_chrs_rx_adata
0001cbbc l     F .text	0000008e ble_gattc_find_inc_svcs_rx_adata
0001cc4a l     F .text	0000009a ble_gattc_disc_chr_uuid_rx_adata
0001cce4 l     F .text	00000072 ble_gattc_find_inc_svcs_rx_read_rsp
0001cd56 l     F .text	00000090 ble_gattc_write_reliable_rx_prep
0001cde6 l     F .text	0000007a ble_gattc_write_long_rx_prep
20002b34 l     O .bss	000000e0 ble_gattc_proc_mem
20002c14 l     O .bss	0000001c ble_gattc_proc_pool
20002c30 l     O .bss	00000008 ble_gattc_procs
20002c38 l     O .bss	00000004 ble_gattc_resume_at
20002c3c l     O .bss	00000004 error.12571
0002b334 l     O .text	0000003c ble_gattc_err_dispatch
0002b3e0 l     O .text	0000003c ble_gattc_resume_dispatch
0002b41c l     O .text	00000010 ble_gattc_rx_exec_entries
0002b42c l     O .text	00000010 ble_gattc_rx_prep_entries
0002b43c l     O .text	00000018 ble_gattc_rx_read_rsp_entries
0002b454 l     O .text	00000020 ble_gattc_rx_read_type_complete_entries
0002b474 l     O .text	00000020 ble_gattc_rx_read_type_elem_entries
0002b494 l     O .text	0000003c ble_gattc_tmo_dispatch
00000000 l    df *ABS*	00000000 ble_gatts.c
0001d300 l     F .text	0000001a ble_gatts_chr_clt_cfg_allowed
0001d31a l     F .text	00000056 ble_gatts_att_flags_from_chr_flags
0001d370 l     F .text	00000056 ble_gatts_chr_properties
0001d3c6 l     F .text	00000014 ble_gatts_chr_is_sane
0001d3da l     F .text	0000000c ble_gatts_chr_op
0001d3e8 l     F .text	00000020 ble_gatts_chr_inc_val_stat
0001d408 l     F .text	0000002c ble_gatts_find_svc_entry_idx
0001d434 l     F .text	0000003c ble_gatts_svc_incs_satisfied
0001d470 l     F .text	0000000c ble_gatts_dsc_op
0001d47c l     F .text	00000024 ble_gatts_dsc_inc_stat
0001d4a0 l     F .text	00000014 ble_gatts_dsc_is_sane
0001d4b4 l     F .text	00000024 ble_gatts_clt_cfg_find_idx
0001d4d8 l     F .text	00000018 ble_gatts_clt_cfg_find
0001d4f0 l     F .text	00000024 ble_gatts_svc_type_to_uuid
0001d514 l     F .text	0000001a ble_gatts_svc_is_sane
0001d530 l     F .text	0000000c ble_gatts_clt_cfg_size
0001d53c l     F .text	00000034 ble_gatts_schedule_update
0001d570 l     F .text	000000e2 ble_gatts_count_resources
0001d654 l     F .text	000000f8 ble_gatts_clt_cfg_access_locked
0001d74c l     F .text	00000032 ble_gatts_subscribe_event
0001d810 l     F .text	00000028 ble_gatts_register_inc
0001dba4 l     F .text	00000058 ble_gatts_inc_access
0001d838 l     F .text	00000038 ble_gatts_register_clt_cfg_dsc
0001d870 l     F .text	00000064 ble_gatts_register_dsc
0001dcd2 l     F .text	00000038 ble_gatts_dsc_access
0001d8d4 l     F .text	00000108 ble_gatts_register_chr
0001db48 l     F .text	0000005c ble_gatts_chr_def_access
0001dc9a l     F .text	00000038 ble_gatts_chr_val_access
0001d9dc l     F .text	000000c4 ble_gatts_register_svc
0001db14 l     F .text	00000034 ble_gatts_svc_access
0001daa0 l     F .text	00000074 ble_gatts_register_round
0001dbfc l     F .text	0000009e ble_gatts_val_access
0001dd0a l     F .text	0000002e ble_gatts_mutable
0001dd38 l     F .text	00000024 ble_gatts_free_mem
0001dd5c l     F .text	0000001c ble_gatts_free_svc_defs
0001dd78 l     F .text	0000006c ble_gatts_tx_notifications_one_chr
20002c40 l     O .bss	00000004 ble_gatts_clt_cfg_mem
20002c44 l     O .bss	0000001c ble_gatts_clt_cfg_pool
20002c60 l     O .bss	00000004 ble_gatts_clt_cfgs
20002c64 l     O .bss	00000004 ble_gatts_num_cfgable_chrs
20002c68 l     O .bss	00000004 ble_gatts_num_svc_defs
20002c6c l     O .bss	00000002 ble_gatts_num_svc_entries
20002c70 l     O .bss	00000004 ble_gatts_svc_defs
20002c74 l     O .bss	00000004 ble_gatts_svc_entries
20000148 l     O .data	00000004 __compound_literal.0
2000014c l     O .data	00000004 __compound_literal.1
20000150 l     O .data	00000004 __compound_literal.2
20000154 l     O .data	00000004 __compound_literal.3
20000158 l     O .data	00000004 __compound_literal.4
00000000 l    df *ABS*	00000000 ble_hs.c
0001e3f0 l     F .text	0000004a ble_hs_wakeup_tx_conn
0001e43c l     F .text	00000018 ble_hs_event_rx_hci_ev
0001e454 l     F .text	0000001c ble_hs_clear_rx_queue
0001e470 l     F .text	00000030 ble_hs_rx_data
0001e4a0 l     F .text	00000008 ble_hs_event_tx_notify
0001e4b4 l     F .text	00000014 ble_hs_sched_start_stage2
0001e4c8 l     F .text	00000008 ble_hs_event_start_stage1
0001e550 l     F .text	00000008 ble_hs_event_rx_data
0001e5a8 l     F .text	00000020 ble_hs_timer_reset
0001e5c8 l     F .text	00000030 ble_hs_timer_sched
0001e5f8 l     F .text	00000064 ble_hs_sync
0001e65c l     F .text	0000005c ble_hs_reset
0001e6b8 l     F .text	00000008 ble_hs_event_reset
0001e6c0 l     F .text	00000054 ble_hs_timer_exp
0001e808 l     F .text	0000001e ble_hs_event_start_stage2
20002c78 l     O .bss	00000010 ble_hs_ev_reset
20002c88 l     O .bss	00000010 ble_hs_ev_start_stage1
20002c98 l     O .bss	00000010 ble_hs_ev_start_stage2
20002ca8 l     O .bss	00000010 ble_hs_ev_tx_notifications
20002cb8 l     O .bss	00000004 ble_hs_evq
20002cbc l     O .bss	000000a0 ble_hs_hci_os_event_buf
20002d5c l     O .bss	0000000c ble_hs_mutex
20002d68 l     O .bss	00000004 ble_hs_parent_task
20002d6c l     O .bss	00000004 ble_hs_reset_reason
20002d70 l     O .bss	00000018 ble_hs_rx_q
20002d88 l     O .bss	00000020 ble_hs_timer
00000000 l    df *ABS*	00000000 ble_hs_adv.c
0001ea90 l     F .text	00000012 find_field_func
0001eaa2 l     F .text	00000068 ble_hs_adv_set_hdr
0001eb0a l     F .text	0000004e ble_hs_adv_set_flat_mbuf
0001eb58 l     F .text	0000005e ble_hs_adv_set_array_uuid16
0001ebb6 l     F .text	00000062 ble_hs_adv_set_array_uuid128
0001ec18 l     F .text	0000006a ble_hs_adv_set_array_uuid32
0001ec82 l     F .text	00000066 ble_hs_adv_set_array16
0001ece8 l     F .text	000002d0 adv_set_fields
00000000 l    df *ABS*	00000000 ble_hs_atomic.c
00000000 l    df *ABS*	00000000 ble_hs_conn.c
20002da8 l     O .bss	00000064 ble_hs_conn_elem_mem
20002e0c l     O .bss	00000006 ble_hs_conn_null_addr
20002e14 l     O .bss	0000001c ble_hs_conn_pool
20002e30 l     O .bss	00000004 ble_hs_conns
00000000 l    df *ABS*	00000000 ble_hs_flow.c
00000000 l    df *ABS*	00000000 ble_hs_hci.c
0001f448 l     F .text	0000004a ble_hs_hci_rx_cmd_complete
0001f492 l     F .text	00000024 ble_hs_hci_rx_cmd_status
0001f4b8 l     F .text	0000000c ble_hs_hci_max_acl_payload_sz
0001f4c4 l     F .text	00000014 ble_hs_hci_lock
0001f4d8 l     F .text	00000030 ble_hs_hci_wait_for_ack
0001f508 l     F .text	00000090 ble_hs_hci_process_ack
0001f598 l     F .text	00000010 ble_hs_hci_unlock
0001f5a8 l     F .text	00000024 ble_hs_hci_rx_ack
0001f5cc l     F .text	00000024 ble_hs_hci_frag_alloc
0001f5f0 l     F .text	00000048 ble_hs_hci_acl_hdr_prepend
20002e34 l     O .bss	00000004 ble_hs_hci_ack
20002e38 l     O .bss	00000002 ble_hs_hci_buf_sz
20002e3c l     O .bss	0000011c ble_hs_hci_frag_data
20002f58 l     O .bss	0000000c ble_hs_hci_frag_mbuf_pool
20002f64 l     O .bss	0000001c ble_hs_hci_frag_mempool
20002f80 l     O .bss	0000000c ble_hs_hci_mutex
20002f8c l     O .bss	00000008 ble_hs_hci_sem
20002f94 l     O .bss	00000004 ble_hs_hci_sup_feat
20002f98 l     O .bss	00000001 ble_hs_hci_version
00000000 l    df *ABS*	00000000 ble_hs_hci_cmd.c
0001f85c l     F .text	00000018 ble_hs_hci_cmd_transport
0001f874 l     F .text	0000003c ble_hs_hci_cmd_send
00000000 l    df *ABS*	00000000 ble_hs_hci_evt.c
0001f8e8 l     F .text	00000024 ble_hs_hci_evt_dispatch_find
0001f90c l     F .text	00000014 ble_hs_hci_evt_le_dispatch_find
0001f920 l     F .text	00000026 ble_hs_hci_evt_le_meta
0001f946 l     F .text	0000004c ble_hs_hci_evt_le_adv_rpt_first_pass
0001f992 l     F .text	00000004 ble_hs_hci_evt_le_ext_adv_rpt
0001f996 l     F .text	00000004 ble_hs_hci_evt_le_periodic_adv_sync_estab
0001f99a l     F .text	00000004 ble_hs_hci_evt_le_periodic_adv_rpt
0001f99e l     F .text	00000004 ble_hs_hci_evt_le_periodic_adv_sync_lost
0001f9a2 l     F .text	00000004 ble_hs_hci_evt_le_periodic_adv_sync_transfer
0001f9a6 l     F .text	00000004 ble_hs_hci_evt_le_scan_timeout
0001f9aa l     F .text	00000004 ble_hs_hci_evt_le_adv_set_terminated
0001f9ae l     F .text	00000004 ble_hs_hci_evt_le_scan_req_rcvd
0001f9b2 l     F .text	00000014 ble_hs_hci_evt_hw_error
0001f9c6 l     F .text	00000014 ble_hs_hci_evt_enc_key_refresh
0001f9da l     F .text	00000014 ble_hs_hci_evt_encrypt_change
0001f9ee l     F .text	00000032 ble_hs_hci_evt_disconn_complete
0001fa20 l     F .text	00000062 ble_hs_hci_evt_num_completed_pkts
0001fa82 l     F .text	00000014 ble_hs_hci_evt_le_phy_update_complete
0001fa96 l     F .text	0000007e ble_hs_hci_evt_le_dir_adv_rpt
0001fb14 l     F .text	0000007e ble_hs_hci_evt_le_adv_rpt
0001fb92 l     F .text	00000086 ble_hs_hci_evt_le_enh_conn_complete
0001fc18 l     F .text	00000066 ble_hs_hci_evt_le_conn_complete
0001fc7e l     F .text	00000014 ble_hs_hci_evt_le_conn_parm_req
0001fc92 l     F .text	00000014 ble_hs_hci_evt_le_lt_key_req
0001fca6 l     F .text	00000014 ble_hs_hci_evt_le_rd_rem_used_feat_complete
0001fcba l     F .text	00000014 ble_hs_hci_evt_le_conn_upd_complete
0002b568 l     O .text	00000030 ble_hs_hci_evt_dispatch
0002b598 l     O .text	00000064 ble_hs_hci_evt_le_dispatch
00000000 l    df *ABS*	00000000 ble_hs_hci_util.c
00000000 l    df *ABS*	00000000 ble_hs_id.c
0001ffb4 l     F .text	00000042 ble_hs_id_addr_type_usable
20002f9c l     O .bss	00000006 ble_hs_id_pub
20002fa4 l     O .bss	00000006 ble_hs_id_rnd
00000000 l    df *ABS*	00000000 ble_hs_log.c
00000000 l    df *ABS*	00000000 ble_hs_mbuf.c
00020060 l     F .text	0000002a ble_hs_mbuf_gen_pkt
00000000 l    df *ABS*	00000000 ble_hs_misc.c
000200f4 l     F .text	00000034 ble_hs_misc_restore_one_irk
00000000 l    df *ABS*	00000000 ble_hs_mqueue.c
00000000 l    df *ABS*	00000000 ble_hs_pvcy.c
00020224 l     F .text	0000002e ble_hs_pvcy_set_addr_timeout
00020252 l     F .text	0000001a ble_hs_pvcy_clear_entries
0002026c l     F .text	0000001e ble_hs_pvcy_set_resolve_enabled
00020300 l     F .text	0000008c ble_hs_pvcy_add_entry_hci
20002fac l     O .bss	00000010 ble_hs_pvcy_irk
20002fbc l     O .bss	00000001 ble_hs_pvcy_started
00000000 l    df *ABS*	00000000 ble_hs_startup.c
00020448 l     F .text	0000001a ble_hs_startup_reset_tx
00020462 l     F .text	00000030 ble_hs_startup_le_read_buf_sz_tx
00020492 l     F .text	00000030 ble_hs_startup_read_buf_sz_tx
000204c2 l     F .text	0000002a ble_hs_startup_read_local_ver_tx
000204f0 l     F .text	00000058 ble_hs_startup_set_evmask_tx
00020548 l     F .text	00000048 ble_hs_startup_le_set_evmask_tx
00020590 l     F .text	0000005e ble_hs_startup_read_buf_sz
000205ee l     F .text	00000028 ble_hs_startup_le_read_sup_f_tx
00020616 l     F .text	00000028 ble_hs_startup_read_bd_addr
00000000 l    df *ABS*	00000000 ble_hs_stop.c
00020694 l     F .text	00000048 ble_hs_stop_done
000206dc l     F .text	00000020 ble_hs_stop_terminate_timeout_cb
20002fbd l     O .bss	00000001 ble_hs_stop_conn_cnt
20002fc0 l     O .bss	0000000c ble_hs_stop_gap_listener
20002fcc l     O .bss	00000004 ble_hs_stop_listeners
20002fd0 l     O .bss	00000020 ble_hs_stop_terminate_tmo
00000000 l    df *ABS*	00000000 ble_l2cap.c
00020718 l     F .text	00000012 ble_l2cap_get_mtu
0002072a l     F .text	00000020 ble_l2cap_append_rx
0002082e l     F .text	0000004c ble_l2cap_rx_payload
20002ff0 l     O .bss	00000054 ble_l2cap_chan_mem
00000000 l    df *ABS*	00000000 ble_l2cap_sig.c
000209d0 l     F .text	0000001c ble_l2cap_sig_next_id
000209ec l     F .text	00000014 ble_l2cap_sig_dispatch_get
00020a00 l     F .text	0000002c ble_l2cap_sig_proc_matches
00020a2c l     F .text	00000004 ble_l2cap_sig_rx_noop
00020a30 l     F .text	00000020 ble_l2cap_sig_update_call_cb
00020a50 l     F .text	00000024 ble_l2cap_sig_proc_insert
00020a74 l     F .text	00000060 ble_l2cap_sig_proc_extract
00020ad4 l     F .text	00000020 ble_l2cap_sig_proc_alloc
00020af4 l     F .text	00000014 ble_l2cap_sig_proc_set_timer
00020b08 l     F .text	0000005c ble_l2cap_sig_extract_expired
00020b64 l     F .text	00000014 ble_l2cap_sig_proc_free
00020b78 l     F .text	00000018 ble_l2cap_sig_process_status
00020b90 l     F .text	00000014 ble_l2cap_sig_rx_reject
00020ba4 l     F .text	0000004a ble_l2cap_sig_update_rsp_rx
00020bf0 l     F .text	00000084 ble_l2cap_sig_rx
00020c74 l     F .text	000000a0 ble_l2cap_sig_update_req_rx
20003044 l     O .bss	00000001 ble_l2cap_sig_cur_id
20003048 l     O .bss	00000014 ble_l2cap_sig_proc_mem
2000305c l     O .bss	0000001c ble_l2cap_sig_proc_pool
20003078 l     O .bss	00000008 ble_l2cap_sig_procs
0002b6b0 l     O .text	0000006c ble_l2cap_sig_dispatch
00000000 l    df *ABS*	00000000 ble_l2cap_sig_cmd.c
00000000 l    df *ABS*	00000000 ble_sm.c
00020f74 l     F .text	00000014 ble_sm_dispatch_get
00020f88 l     F .text	00000028 ble_sm_proc_remove
00020fb0 l     F .text	00000038 ble_sm_proc_matches
00020fe8 l     F .text	00000018 ble_sm_insert
00021000 l     F .text	0000000c ble_sm_rx_noop
0002100c l     F .text	00000028 ble_sm_build_authreq
00021034 l     F .text	00000022 ble_sm_key_dist
00021056 l     F .text	00000010 ble_sm_state_after_pair
00021068 l     F .text	00000024 ble_sm_pair_base_fill
0002108c l     F .text	00000020 ble_sm_pair_req_fill
000210ac l     F .text	00000028 ble_sm_pair_rsp_fill
000210d4 l     F .text	0000000e ble_sm_verify_auth_requirements
000210e2 l     F .text	0000000a ble_sm_gen_ediv
000210ec l     F .text	0000000c ble_sm_gen_master_id_rand
000210f8 l     F .text	0000000c ble_sm_gen_csrk
00021104 l     F .text	00000014 ble_sm_io_action
00021118 l     F .text	000000b2 ble_sm_pair_cfg
000211ca l     F .text	00000026 ble_sm_gen_ltk
000211f0 l     F .text	0000003c ble_sm_exec
0002122c l     F .text	00000032 ble_sm_sec_req_exec
0002125e l     F .text	000000e6 ble_sm_fill_store_value
00021344 l     F .text	00000048 ble_sm_update_sec_state
0002138c l     F .text	00000032 ble_sm_key_exch_success
000213be l     F .text	0000027a ble_sm_key_exch_exec
00021638 l     F .text	0000001e ble_sm_key_rxed
00021656 l     F .text	00000040 ble_sm_start_encrypt_tx
00021696 l     F .text	0000000e ble_sm_enc_restore_exec
000216a4 l     F .text	00000044 ble_sm_enc_start_exec
000216e8 l     F .text	0000004a ble_sm_ltk_req_reply_tx
00021732 l     F .text	00000024 ble_sm_ltk_start_exec
00021756 l     F .text	00000030 ble_sm_ltk_req_neg_reply_tx
00021786 l     F .text	0000004e ble_sm_ltk_restore_exec
000217d4 l     F .text	00000012 ble_sm_random_exec
000217e6 l     F .text	00000012 ble_sm_confirm_exec
000217f8 l     F .text	00000014 ble_sm_proc_set_timer
0002180c l     F .text	00000070 ble_sm_extract_expired
0002187c l     F .text	00000038 ble_sm_pair_fail_tx
000218b4 l     F .text	000000e6 ble_sm_persist_keys
0002199c l     F .text	00000014 ble_sm_proc_free
000219b0 l     F .text	00000020 ble_sm_proc_alloc
000219d0 l     F .text	00000044 ble_sm_retrieve_ltk
00021a14 l     F .text	0000002a ble_sm_fail_rx
00021a3e l     F .text	00000054 ble_sm_read_bond
00021a92 l     F .text	0000007c ble_sm_chk_repeat_pairing
00021b28 l     F .text	0000003c ble_sm_chk_store_overflow_by_type
00021b64 l     F .text	00000020 ble_sm_chk_store_overflow
00021c48 l     F .text	00000080 ble_sm_sign_info_rx
00021cc8 l     F .text	0000007a ble_sm_id_addr_info_rx
00021d42 l     F .text	00000080 ble_sm_id_info_rx
00021dc2 l     F .text	0000007a ble_sm_master_id_rx
00021e3c l     F .text	00000086 ble_sm_enc_info_rx
00021ec2 l     F .text	0000013a ble_sm_pair_req_rx
00022050 l     F .text	000000ae ble_sm_confirm_rx
000220fe l     F .text	000000c0 ble_sm_pair_rsp_rx
0002229c l     F .text	000000f0 ble_sm_enc_event_rx
0002238c l     F .text	00000078 ble_sm_rx
00022526 l     F .text	000000a4 ble_sm_pair_exec
000225da l     F .text	0000006c ble_sm_random_rx
000227aa l     F .text	000000ec ble_sm_sec_req_rx
20003080 l     O .bss	00000180 ble_sm_proc_mem
20003200 l     O .bss	0000001c ble_sm_proc_pool
2000321c l     O .bss	00000008 ble_sm_procs
0002b734 l     O .text	0000003c ble_sm_dispatch
0002b7ac l     O .text	0000002c ble_sm_state_dispatch
00000000 l    df *ABS*	00000000 ble_sm_cmd.c
00000000 l    df *ABS*	00000000 ble_sm_sc.c
0002297c l     F .text	00000014 ble_sm_sc_initiator_txes_confirm
00022990 l     F .text	00000014 ble_sm_sc_responder_verifies_random
000229a4 l     F .text	00000046 ble_sm_sc_gen_ri
000229ea l     F .text	00000026 ble_sm_sc_random_advance
00022a10 l     F .text	00000048 ble_sm_sc_gen_numcmp
00022a58 l     F .text	00000008 ble_sm_gen_pub_priv
00022a60 l     F .text	0000003c ble_sm_sc_ensure_keys_generated
00022a9c l     F .text	00000038 ble_sm_sc_dhkey_addrs
00022b88 l     F .text	00000162 ble_sm_dhkey_check_process
20003224 l     O .bss	00000001 ble_sm_sc_keys_generated
20003228 l     O .bss	00000020 ble_sm_sc_priv_key
20003248 l     O .bss	00000040 ble_sm_sc_pub_key
0002b7d8 l     O .text	00000019 ble_sm_sc_init_ioa
0002b7f4 l     O .text	00000019 ble_sm_sc_resp_ioa
00000000 l    df *ABS*	00000000 ble_store.c
00023324 l     F .text	00000018 ble_store_status
000233e8 l     F .text	00000008 ble_store_persist_sec
00000000 l    df *ABS*	00000000 ble_store_util.c
00023538 l     F .text	0000000a ble_store_util_iter_count
00000000 l    df *ABS*	00000000 ble_uuid.c
0002b810 l     O .text	00000010 ble_uuid_base
00000000 l    df *ABS*	00000000 ble_att.c
000236e4 l     F .text	00000028 ble_att_rx_dispatch_entry_find
0002370c l     F .text	000001f4 ble_att_inc_rx_stat
00023900 l     F .text	00000032 ble_att_rx_handle_unknown_request
00023932 l     F .text	00000082 ble_att_rx
20003288 l     O .bss	00000002 ble_att_preferred_mtu_val
0002b828 l     O .text	000000d8 ble_att_rx_dispatch
00000000 l    df *ABS*	00000000 ble_att_clt.c
00023c90 l     F .text	0000002c ble_att_clt_parse_find_type_value_hinfo
00023cbc l     F .text	0000003e ble_att_clt_parse_read_group_type_adata
00023cfa l     F .text	00000074 ble_att_clt_parse_find_info_entry
00000000 l    df *ABS*	00000000 ble_att_cmd.c
00000000 l    df *ABS*	00000000 ble_att_svr.c
000242dc l     F .text	00000010 ble_att_svr_next_id
000242ec l     F .text	00000024 ble_att_svr_prep_find_prev
00024310 l     F .text	0000005c ble_att_svr_prep_validate
0002436c l     F .text	00000020 ble_att_svr_entry_alloc
0002438c l     F .text	0000001a ble_att_svr_get_sec_state
000243a6 l     F .text	00000116 ble_att_svr_check_perms
000244bc l     F .text	0000005e ble_att_svr_read
0002451a l     F .text	00000062 ble_att_svr_write
0002457c l     F .text	00000018 ble_att_svr_pullup_req_base
00024594 l     F .text	00000068 ble_att_svr_build_mtu_rsp
000245fc l     F .text	00000024 ble_att_svr_pkt
00024620 l     F .text	00000032 ble_att_svr_build_write_rsp
00024652 l     F .text	00000032 ble_att_svr_build_indicate_rsp
00024684 l     F .text	000000b0 ble_att_svr_fill_info
00024734 l     F .text	00000060 ble_att_svr_build_find_info_rsp
00024794 l     F .text	00000048 ble_att_svr_read_group_type_entry_write
000247dc l     F .text	00000024 ble_att_svr_is_valid_find_group_type
00024800 l     F .text	00000054 ble_att_svr_is_valid_group_end
00024854 l     F .text	00000016 ble_att_svr_is_valid_read_group_type
0002486a l     F .text	0000005c ble_att_svr_read_flat
000248c6 l     F .text	0000005c ble_att_svr_fill_type_value_entry
00024924 l     F .text	000000e8 ble_att_svr_fill_type_value
00024a0c l     F .text	00000062 ble_att_svr_build_find_type_value_rsp
00024a6e l     F .text	0000003a ble_att_svr_service_uuid
00024aa8 l     F .text	00000184 ble_att_svr_build_read_group_type_rsp
00024c2c l     F .text	0000001c ble_att_svr_prep_free
00024c48 l     F .text	0000003c ble_att_svr_prep_alloc
00024c84 l     F .text	0000007c ble_att_svr_insert_prep_entry
00024d00 l     F .text	00000048 ble_att_svr_prep_extract
00024d48 l     F .text	00000014 ble_att_svr_free_start_mem
00024dd0 l     F .text	00000034 ble_att_svr_write_handle
00024e04 l     F .text	00000064 ble_att_svr_prep_write
00024e9c l     F .text	00000136 ble_att_svr_build_read_type_rsp
0002501c l     F .text	000000a6 ble_att_svr_build_read_mult_rsp
000250f4 l     F .text	000000a4 ble_att_svr_tx_rsp
2000328c l     O .bss	00000004 ble_att_svr_entry_mem
20003290 l     O .bss	0000001c ble_att_svr_entry_pool
200032ac l     O .bss	00000008 ble_att_svr_hidden_list
200032b4 l     O .bss	00000002 ble_att_svr_id
200032b8 l     O .bss	00000008 ble_att_svr_list
200032c0 l     O .bss	00000300 ble_att_svr_prep_entry_mem
200035c0 l     O .bss	0000001c ble_att_svr_prep_entry_pool
00000000 l    df *ABS*	00000000 ble_sm_alg.c
00025924 l     F .text	0000000c ble_sm_alg_log_buf
00025930 l     F .text	0000003e ble_sm_alg_aes_cmac
0002596e l     F .text	00000010 ble_sm_alg_rand
0002b934 l     O .text	00000020 ble_sm_alg_dbg_priv_key
0002b994 l     O .text	000000b0 curve_secp256r1
0002ba44 l     O .text	00000010 salt.12214
00000000 l    df *ABS*	00000000 ble_svc_gap.c
00025dbc l     F .text	00000016 ble_svc_gap_device_name_write_access
00025dd2 l     F .text	00000016 ble_svc_gap_appearance_write_access
00025de8 l     F .text	00000028 ble_svc_gap_device_name_read_access
00025e10 l     F .text	0000002c ble_svc_gap_appearance_read_access
00025e3c l     F .text	00000098 ble_svc_gap_access
200035dc l     O .bss	00000002 ble_svc_gap_appearance
20000184 l     O .data	00000004 __compound_literal.0
20000188 l     O .data	00000004 __compound_literal.1
2000018c l     O .data	00000004 __compound_literal.2
20000190 l     O .data	00000048 __compound_literal.3
200001d8 l     O .data	00000020 ble_svc_gap_name
0002ba54 l     O .text	00000020 ble_svc_gap_defs
00000000 l    df *ABS*	00000000 ble_hci_ram.c
200035e0 l     O .bss	00000104 ble_hci_ram_cmd_buf
200036e4 l     O .bss	0000001c ble_hci_ram_cmd_pool
20003700 l     O .bss	00000090 ble_hci_ram_evt_hi_buf
20003790 l     O .bss	0000001c ble_hci_ram_evt_hi_pool
200037ac l     O .bss	00000240 ble_hci_ram_evt_lo_buf
200039ec l     O .bss	0000001c ble_hci_ram_evt_lo_pool
20003a08 l     O .bss	00000004 ble_hci_ram_rx_acl_hs_arg
20003a0c l     O .bss	00000004 ble_hci_ram_rx_acl_hs_cb
20003a10 l     O .bss	00000004 ble_hci_ram_rx_acl_ll_arg
20003a14 l     O .bss	00000004 ble_hci_ram_rx_acl_ll_cb
20003a18 l     O .bss	00000004 ble_hci_ram_rx_cmd_hs_arg
20003a1c l     O .bss	00000004 ble_hci_ram_rx_cmd_hs_cb
20003a20 l     O .bss	00000004 ble_hci_ram_rx_cmd_ll_arg
20003a24 l     O .bss	00000004 ble_hci_ram_rx_cmd_ll_cb
00000000 l    df *ABS*	00000000 aes_encrypt.c
0002bb30 l     O .text	00000100 sbox
00000000 l    df *ABS*	00000000 cmac_mode.c
00000000 l    df *ABS*	00000000 ecc.c
00026bf4 l     F .text	0000001c vli_numDigits
00026c10 l     F .text	00000024 uECC_vli_rshift1
00026c34 l     F .text	00000040 muladd
00026c74 l     F .text	000000c2 uECC_vli_mult
00026e60 l     F .text	00000042 uECC_vli_add
00026ea2 l     F .text	0000003c vli_modInv_update
00027272 l     F .text	0000000c uECC_vli_modSquare_fast
0002743a l     F .text	00000118 XYcZ_addC
000276d0 l     F .text	0000006e XYcZ_initial_double
20003a28 l     O .bss	00000004 g_rng_function
0002bc30 l     O .text	000000b0 curve_secp256r1
00000000 l    df *ABS*	00000000 ecc_dh.c
00000000 l    df *ABS*	00000000 utils.c
00000000 l    df *ABS*	00000000 cbor_buf_reader.c
00027cca l     F .text	00000006 cbuf_buf_reader_get8
00027cd0 l     F .text	00000012 cbor_buf_reader_cpy
00027ce2 l     F .text	00000018 cbor_buf_reader_cmp
00027cfa l     F .text	00000018 cbuf_buf_reader_get64
00027d12 l     F .text	00000008 cbuf_buf_reader_get32
00027d1a l     F .text	0000000a cbuf_buf_reader_get16
00000000 l    df *ABS*	00000000 cborparser.c
00027d5c l     F .text	00000024 is_fixed_type
00027d80 l     F .text	00000004 iterate_noop
00027d84 l     F .text	00000144 preparse_value
00027ec8 l     F .text	0000004c preparse_next_value
00027f14 l     F .text	000000aa extract_length
00027fbe l     F .text	00000178 iterate_string_chunks
00028136 l     F .text	000000f0 advance_internal
00000000 l    df *ABS*	00000000 cborpretty.c
000284f4 l     F .text	00000028 hexDump
0002851c l     F .text	000001b4 utf8EscapedDump
000286d0 l     F .text	000003b8 value_to_pretty
00028a88 l     F .text	00000064 container_to_pretty
00000000 l    df *ABS*	00000000 cborparser_dup_string.c
00000000 l    df *ABS*	00000000 hal_bsp.c
00000000 l    df *ABS*	00000000 hal_flash.c
00028b90 l     F .text	0000001e hal_flash_check_addr
00000000 l    df *ABS*	00000000 hal_flash.c
00028c2c l     F .text	00000028 nrf52k_flash_wait_ready
00028c54 l     F .text	00000054 nrf52k_flash_erase_sector
00028ca8 l     F .text	00000004 nrf52k_flash_init
00028cac l     F .text	00000028 nrf52k_flash_sector_info
00028cd4 l     F .text	000000d0 nrf52k_flash_write
00028da4 l     F .text	0000000e nrf52k_flash_read
0002bdac l     O .text	0000001c nrf52k_flash_funcs
00000000 l    df *ABS*	00000000 hal_os_tick.c
00028db4 l     F .text	000000f4 nrf52_timer_handler
00000000 l    df *ABS*	00000000 hal_watchdog.c
00029000 l     F .text	00000016 nrf52_hal_wdt_default_handler
00029018 l     F .text	00000020 nrf52_wdt_irq_handler
00000000 l    df *ABS*	00000000 nrf52_clock.c
20003a2c l     O .bss	00000001 nrf52_clock_hfxo_refcnt
00000000 l    df *ABS*	00000000 nrf52_periph.c
00029164 l     F .text	00000040 nrf52_periph_create_timers
000291a4 l     F .text	00000044 nrf52_periph_create_uart
20003a30 l     O .bss	0000003c os_bsp_uart0
0002bdc8 l     O .text	00000004 os_bsp_uart0_cfg
00000000 l    df *ABS*	00000000 hal_timer.c
000291f4 l     F .text	0000000a nrf_read_timer_cntr
00029200 l     F .text	000000f4 nrf_timer_set_ocmp
000292f4 l     F .text	0000000a nrf_timer_disable_ocmp
000292fe l     F .text	00000010 nrf_rtc_disable_ocmp
00029310 l     F .text	00000054 hal_timer_read_bsptimer
00029364 l     F .text	00000070 hal_timer_chk_queue
000293d4 l     F .text	00000040 hal_rtc_timer_irq_handler
0002bdcc l     O .text	00000018 nrf52_hal_timers
00000000 l    df *ABS*	00000000 endian.c
00000000 l    df *ABS*	00000000 os_cputime.c
00000000 l    df *ABS*	00000000 os_cputime_pwr2.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 lrand48.c
00000000 l    df *ABS*	00000000 malloc.c
00029a3c l     F .text	00000004 malloc_lock_nop
00029a40 l     F .text	00000002 malloc_unlock_nop
00029a42 l     F .text	00000048 __malloc_from_block
00029a8c l     F .text	00000064 __free_block
200001f8 l     O .data	00000018 __malloc_head
20000210 l     O .data	00000004 malloc_lock
20000214 l     O .data	00000004 malloc_unlock
00000000 l    df *ABS*	00000000 mynewt.c
00029bd8 l     F .text	00000004 stdin_read
00029bdc l     F .text	00000010 stdout_write
20000218 l     O .data	00000004 _stdin
2000021c l     O .data	00000008 _stdin_methods
00000000 l    df *ABS*	00000000 realloc.c
00000000 l    df *ABS*	00000000 srand48.c
00000000 l    df *ABS*	00000000 tinyprintf.c
00029c60 l     F .text	000000c0 ui2a
00029d20 l     F .text	00000020 i2a
00029d40 l     F .text	00000030 a2d
00029d70 l     F .text	00000036 a2i
00029da6 l     F .text	0000002a putf
00029dd0 l     F .text	0000011c putchw
00029eec l     F .text	00000064 intarg
00000000 l    df *ABS*	00000000 vprintf.c
00000000 l    df *ABS*	00000000 jrand48.c
00000000 l    df *ABS*	00000000 memfile.c
00000000 l    df *ABS*	00000000 uart_hal.c
0002a2e4 l     F .text	00000022 uart_hal_blocking_tx
0002a306 l     F .text	00000022 uart_hal_start_rx
0002a328 l     F .text	00000022 uart_hal_start_tx
0002a34a l     F .text	00000030 uart_hal_resume
0002a37a l     F .text	0000002e uart_hal_suspend
0002a3a8 l     F .text	00000016 uart_hal_close
0002a3be l     F .text	0000008a uart_hal_open
00000000 l    df *ABS*	00000000 hal_uart.c
0002a4b0 l     F .text	00000020 hal_uart_tx_fill_buf
0002a4d0 l     F .text	00000072 uart_irq_handler
0002a544 l     F .text	00000014 uart0_irq_handler
0002a558 l     F .text	00000014 uart1_irq_handler
0002a56c l     F .text	000000f0 hal_uart_baudrate
20003a6c l     O .bss	0000001c uart0
20003a88 l     O .bss	0000001c uart1
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 ble_ll_supp_cmd.c
00000000 l    df *ABS*	00000000 nordic_adv-sysflash.c
00000000 l    df *ABS*	00000000 ble_hs_cfg.c
00000000 l    df *ABS*	00000000 SVC_Table.S
00000000 l       .svc_table	00000000 SVC_End
00028226 g     F .text	00000090 _cbor_value_decode_int64_internal
0000e0a6 g     F .text	00000058 os_mbuf_trim_front
000147aa g     F .text	00000054 ble_ll_conn_hci_rd_chan_map
0002403c g     F .text	0000004a ble_att_clt_tx_read_group_type
0001f27c g     F .text	0000001c ble_hs_conn_find_by_idx
000290dc g     F .text	00000044 nrf52_clock_hfxo_request
0001fd0c g     F .text	000000a0 ble_hs_hci_evt_acl_process
0000f0fc g     F .text	000000a8 uart_console_init
00011958 g     F .text	0000002c ble_ll_adv_rpa_timeout
20004250 g     O .bss	00000001 g_ble_ll_sched_offset_ticks
00024086 g     F .text	00000058 ble_att_clt_rx_read_group_type
000259ec g     F .text	00000128 ble_sm_alg_f5
0000d900 g     F .text	00000030 os_arch_start
200045f4 g     O .bss	00000038 ble_hs_stats
200047c0 g       .bss	00000000 __HeapBase
20003b70 g     O .bss	00000008 g_os_task_list
0000c738 g     F .text	00000084 os_idle_task
00023ff0 g     F .text	00000030 ble_att_clt_tx_read_blob
00013b58 g     F .text	00000044 ble_ll_conn_set_global_chanmap
200046ac g     O .bss	000000e4 ble_att_stats
200047b8 g     O .bss	00000006 __rand48_seed
00000000 g       .svc_table	00000000 SVC_Count
0000c18e  w    F .text	00000002 TIMER2_IRQHandler
0002a2cc g     F .text	00000018 fmemopen_w
000100e4 g     F .text	00000048 mem_split_frag
0002201c g     F .text	00000034 ble_sm_proc_can_advance
0000c188  w    F .text	00000002 DebugMon_Handler
0000db58 g     F .text	0000005a os_mbuf_copydata
20003b54 g     O .bss	00000008 g_os_mempool_list
0000c9ac g     F .text	0000001a os_callout_init
00021b10 g     F .text	00000018 ble_sm_num_procs
0000c9c8 g     F .text	0000003c os_callout_stop
0001b7cc g     F .text	0000004a ble_gap_notify_rx_event
0000c18e  w    F .text	00000002 RTC0_IRQHandler
00018e10 g     F .text	00000078 ble_ll_sched_adv_resched_pdu
00011bd4 g     F .text	00000040 ble_ll_adv_rx_isr_start
0001a12c g     F .text	00000124 ble_phy_tx
00015480 g     F .text	0000004e ble_ll_ctrl_proc_start
00029af0 g     F .text	00000050 add_malloc_block
20004274 g     O .bss	00000040 g_ble_ll_whitelist
0001d022 g     F .text	0000002c ble_gattc_rx_err
00018410 g     F .text	00000014 ble_ll_scan_rx_pkt_in
0001f440 g     F .text	00000002 ble_hs_flow_connection_broken
0001482c g     F .text	00000072 ble_ll_conn_hci_set_data_len
00016fd4 g     F .text	0000002c ble_ll_resolv_set_local_rpa
00010a00 g     F .text	0000007c ble_ll_reset
0000ccba g     F .text	00000070 os_eventq_put
0001fe9c g     F .text	0000001c ble_hs_id_set_pub
00016c30 g     F .text	0000012c ble_ll_resolv_list_add
20000100 g       .data	00000000 __data_start__
000234a8 g     F .text	0000001c ble_store_key_from_value_cccd
0000df22 g     F .text	00000062 os_mbuf_extend
0001d1d2 g     F .text	00000024 ble_gattc_rx_read_mult_rsp
0002bd94 g     O .text	00000018 nrf52k_flash_dev
00020e18 g     F .text	00000048 ble_l2cap_sig_timer
2000462c g     O .bss	0000001c ble_hs_hci_ev_pool
0002796c g     F .text	0000005c regularize_k
0002a1d0 g     F .text	00000024 printf
0002bde4 g     O .text	00000004 stdout
0000c18e  w    F .text	00000002 SWI0_EGU0_IRQHandler
000234c4 g     F .text	00000074 ble_store_iterate
2000465c g     O .bss	0000001c ble_l2cap_chan_pool
0001495a g     F .text	0000004c ble_ll_conn_hci_le_ltk_neg_reply
0000d870 g     F .text	0000008c os_arch_os_init
0000c17e  w    F .text	00000002 HardFault_Handler
0002530e g     F .text	000000a8 ble_att_svr_rx_read_type
00027252 g     F .text	00000020 uECC_vli_modMult_fast
00029424 g     F .text	00000068 hal_timer_init
00027a42 g     F .text	00000042 uECC_vli_bytesToNative
0001e1b0 g     F .text	00000080 ble_gatts_bonding_established
0000fe66 g     F .text	0000001a mfg_seek_next_with_type
000254ee g     F .text	000000c2 ble_att_svr_rx_read_group_type
0001d2a4 g     F .text	0000005c ble_gattc_init
000298c6 g     F .text	00000008 os_cputime_timer_stop
0001a080 g     F .text	0000004c ble_phy_rx_set_start_time
0000d930 g     F .text	0000005c os_arch_os_start
200044a0 g     O .bss	00000088 ble_gap_stats
200045c0 g     O .bss	00000034 ble_gatts_stats
20003b80 g     O .bss	00000001 g_console_ignore_non_nlip
0001f000 g     F .text	00000034 ble_hs_adv_find_field
0001ace4 g     F .text	00000010 ble_gap_master_in_progress
00025fc0 g     F .text	0000002c ble_hci_trans_hs_cmd_tx
0001f034 g     F .text	0000002a ble_hs_atomic_conn_delete
20003b81 g     O .bss	00000001 g_console_silence_non_nlip
000282d6 g     F .text	00000048 cbor_value_advance_fixed
000258dc g     F .text	00000048 ble_att_svr_init
0000f758 g     F .text	00000014 log_read
0001e3b0 g     F .text	00000040 ble_gatts_init
000109cc g     F .text	0000000c ble_ll_state_get
00021ffc g     F .text	00000020 ble_sm_ioact_state
0000c18e  w    F .text	00000002 SWI2_EGU2_IRQHandler
00018308 g     F .text	00000088 ble_ll_scan_rx_isr_end
00023482 g     F .text	0000000e ble_store_read_cccd
0001d04e g     F .text	00000024 ble_gattc_rx_mtu
0000e3ea g     F .text	0000000c SysTick_Handler
00020e94 g     F .text	0000002e ble_l2cap_sig_tx
0001670e g     F .text	00000044 ble_ll_hci_ev_conn_update
0000c18e  w    F .text	00000002 GPIOTE_IRQHandler
0002522c g     F .text	0000006a ble_att_svr_rx_find_info
0001694c g     F .text	0000007c ble_ll_rand_data_get
000233a8 g     F .text	00000040 ble_store_write
000254b2 g     F .text	0000003c ble_att_svr_rx_read_mult
00020dc0 g     F .text	00000020 ble_l2cap_sig_create_chan
00019408 g     F .text	00000048 ble_hw_rng_init
000107e8 g     F .text	00000028 ble_ll_rx_pdu_in
0000cf80 g     F .text	00000026 os_memblock_put
0000c18e  w    F .text	00000002 PWM1_IRQHandler
0000d0c6 g     F .text	00000028 os_msys_get_pkthdr
20003b9c g     O .bss	00000004 flash_map
0000e48a g     F .text	00000036 memmove
00016e8c g     F .text	00000054 ble_ll_resolv_set_rpa_tmo
00023fe2 g     F .text	0000000e ble_att_clt_rx_read
0001e524 g     F .text	00000008 ble_hs_lock
00016e58 g     F .text	00000034 ble_ll_resolv_local_addr_rd
00026ede g     F .text	00000042 uECC_vli_sub
00023390 g     F .text	00000018 ble_store_overflow_event
0000e3c0 g     F .text	0000002a PendSV_Handler
0000cebc g     F .text	00000036 os_mempool_clear
0002081a g     F .text	00000014 ble_l2cap_remove_rx
0000c17c  w    F .text	00000002 NMI_Handler
0001de58 g     F .text	0000005c ble_gatts_connection_broken
0002be08 g       .ARM.exidx	00000000 __exidx_end
000194a8 g     F .text	0000000c ble_hw_resolv_list_clear
0000c020 g       .text	00000000 __isr_vector_start
000182fc g     F .text	0000000a ble_ll_scan_interrupted
00014698 g     F .text	000000a0 ble_ll_conn_hci_disconnect_cmd
0000f590 g     F .text	00000048 log_init
0002a29c g     F .text	0000002e memfile_write
0000d7e4 g     F .text	00000014 os_arch_ctx_sw
00018588 g     F .text	00000008 ble_ll_scan_get_pdu_data
00010070 g     F .text	00000026 stats_init_and_reg
0002a448 g     F .text	00000068 uart_hal_init
0000c1f8 g     F .text	0000002c hal_system_reset
000170a8 g     F .text	00000034 ble_ll_resolv_init
0000c7e8 g     F .text	00000088 os_init_idle_task
00027d24 g     F .text	00000038 cbor_buf_reader_init
00022646 g     F .text	00000038 ble_sm_timer
20000128 g       .data	00000000 __aeabi_unwind_cpp_pr0
0000d2b8 g     F .text	0000000c os_sched_set_current_task
0000c18e  w    F .text	00000002 POWER_CLOCK_IRQHandler
000207b0 g     F .text	0000002c ble_l2cap_parse_hdr
00012e90 g     F .text	00000074 ble_ll_conn_update_eff_data_len
0002be08 g       .ARM.exidx	00000000 __etext
0001ad32 g     F .text	0000002a ble_gap_rx_l2cap_update_req
0002af9c g     O .text	0000001f g_ble_ll_ctrl_pkt_lengths
0001071c g     F .text	00000054 ble_ll_set_random_addr
000202c0 g     F .text	0000003e ble_hs_pvcy_set_mode
0001d018 g     F .text	0000000a ble_gattc_indicate
0000d764 g     F .text	0000004e os_get_uptime_usec
00012ce2 g     F .text	00000002 ble_ll_conn_init_wfr_timer_exp
0000ee74 g     F .text	0000003c console_vprintf
0001e830 g     F .text	00000260 ble_hs_init
00019524 g     F .text	00000004 ble_hw_resolv_list_size
0001b5e8 g     F .text	0000011c ble_gap_update_params
0001425c g     F .text	0000002a ble_ll_auth_pyld_tmo_event_send
0000d0a8 g     F .text	0000001e os_msys_get
0000c18e  w    F .text	00000002 RADIO_IRQHandler
000230c8 g     F .text	00000110 ble_sm_sc_public_key_rx
0001f150 g     F .text	00000054 ble_hs_conn_free
000119d4 g     F .text	00000108 ble_ll_adv_set_adv_params
0000df84 g     F .text	0000010a os_mbuf_pullup
0001ce60 g     F .text	00000068 ble_gattc_timer
0001d0ae g     F .text	0000001e ble_gattc_rx_find_type_value_hinfo
000142bc g     F .text	00000150 ble_ll_conn_create
20003b8c g     O .bss	00000010 rx_ev
20003be0 g     O .bss	0000010c ble_ll_stats
0000e1c0 g     F .text	000000c0 os_mutex_release
00010048 g     F .text	00000028 stats_register
000200d0 g     F .text	00000024 ble_hs_mbuf_pullup_base
0001d27c g     F .text	0000001a ble_gattc_rx_indicate_rsp
0000d170 g     F .text	00000024 os_sanity_check_register
20004254 g     O .bss	00000018 g_ble_ll_sched_timer
20000224 g       .bssnz	00000000 __bssnz_start__
00011cb0 g     F .text	00000030 ble_ll_adv_reset
0000d6c8 g     F .text	00000026 os_time_delay
0001b816 g     F .text	00000044 ble_gap_notify_tx_event
00027bdc g     F .text	000000bc uECC_shared_secret
200042fc g     O .bss	00000034 g_ble_phy_data
00026170 g     F .text	00000004 ble_hci_trans_reset
0000de56 g     F .text	00000088 os_mbuf_copyinto
0001f298 g     F .text	0000000e ble_hs_conn_exists
00015434 g     F .text	0000004c ble_ll_ctrl_terminate_start
0000c18e  w    F .text	00000002 PDM_IRQHandler
0001af00 g     F .text	0000002a ble_gap_adv_set_fields
0000fe80 g     F .text	0000000a mfg_read_tlv_flash_area
0000eecc g     F .text	0000000c console_get_ticks
00022516 g     F .text	00000010 ble_sm_our_pair_rand
00019c10 g     F .text	0000004e ble_phy_txpower_round
00011ce0 g     F .text	00000020 ble_ll_adv_enabled
000282b6 g     F .text	00000020 cbor_parser_init
0001f7fc g     F .text	0000000c ble_hs_hci_set_hci_version
0000dd90 g     F .text	000000c6 os_mbuf_prepend
00010810 g     F .text	00000034 ble_ll_acl_data_in
2000015c g     O .data	00000028 ble_hs_cfg
0002565c g     F .text	00000016 ble_att_svr_prep_clear
0001d250 g     F .text	0000002c ble_gattc_rx_exec_write_rsp
000193d0 g     F .text	00000038 ble_hw_encrypt_block
00022428 g     F .text	000000ee ble_sm_ltk_req_rx
20004100 g     O .bss	000000d8 g_ble_ll_resolv_list
0002597e g     F .text	0000006e ble_sm_alg_f4
0000cfa8 g     F .text	00000010 os_mempool_module_init
00010646 g     F .text	0000001c ble_ll_addr_subtype
0000c18e  w    F .text	00000002 TEMP_IRQHandler
0000d80a g     F .text	0000000a os_arch_in_critical
000235e6 g     F .text	0000000e ble_uuid_u16
0000c18e  w    F .text	00000002 QDEC_IRQHandler
00012ce4 g     F .text	00000028 ble_ll_conn_auth_pyld_timer_start
0000c18e  w    F .text	00000002 TIMER3_IRQHandler
00019484 g     F .text	00000024 ble_hw_rng_stop
00010678 g     F .text	0000007c ble_ll_is_valid_random_addr
0001368c g     F .text	00000184 ble_ll_conn_rx_data_pdu
00025d58 g     F .text	00000054 ble_sm_alg_gen_key_pair
00012d26 g     F .text	00000064 ble_ll_conn_master_init
0000d7da g     F .text	0000000a timer_handler
0000cc2c g     F .text	00000020 os_dev_lookup
0000d2c4 g     F .text	00000090 os_sched_sleep
000132b0 g     F .text	00000028 ble_ll_init_rx_isr_start
0000e470 g     F .text	0000001a memcpy
0001e4a8 g     F .text	0000000c ble_hs_evq_get
000185e8 g     F .text	0000004c ble_ll_scan_init
0001f274 g     F .text	00000008 ble_hs_conn_find_assert
0000c18e  w    F .text	00000002 PWM3_IRQHandler
00011c68 g     F .text	0000002e ble_ll_adv_get_local_rpa
000273d8 g     F .text	00000062 x_side_default
00016ee0 g     F .text	00000038 ble_ll_resolve_set_priv_mode
00029038 g     F .text	00000080 hal_watchdog_init
00016bdc g     F .text	00000014 ble_ll_resolv_list_read_size
00016df4 g     F .text	00000030 ble_ll_resolv_enable_cmd
00026248 g     F .text	000000bc tc_aes128_set_encrypt_key
000198a4 g     F .text	00000084 ble_phy_wfr_enable
0001dde4 g     F .text	00000074 ble_gatts_register_svcs
000145e8 g     F .text	00000066 ble_ll_conn_hci_param_nrr
0001856c g     F .text	00000008 ble_ll_scan_get_local_rpa
00029876 g     F .text	0000000c os_cputime_init
00029634 g     F .text	00000028 hal_timer_set_cb
00025724 g     F .text	000000b4 ble_att_svr_rx_exec_write
0001b1f0 g     F .text	0000005c ble_gap_terminate_with_conn
0001feec g     F .text	00000078 ble_hs_id_set_rnd
000154ce g     F .text	00000030 ble_ll_ctrl_initiate_dle
0002a94c g     F .text	00000000 .hidden __aeabi_uldivmod
00024202 g     F .text	00000040 ble_att_clt_tx_indicate
00000020 g       *ABS*	00000000 _imghdr_size
0000d27c g     F .text	00000030 os_sched_ctx_sw_hook
20003b84 g     O .bss	00000004 console_is_midline
0000da02 g     F .text	00000014 os_mbuf_free
0000c18e  w    F .text	00000002 FPU_IRQHandler
0001b8c8 g     F .text	00000038 ble_gap_mtu_event
0000c18e  w    F .text	00000002 USBD_IRQHandler
0002424c g     F .text	00000026 ble_att_cmd_prepare
2000010c g     O .data	00000004 SystemCoreClock
0001a0cc g     F .text	00000024 ble_phy_restart_rx
0000c1dc g     F .text	0000000c hal_system_init
00022950 g     F .text	0000002c ble_sm_tx
00020780 g     F .text	00000028 ble_l2cap_chan_free
0001d1b0 g     F .text	00000022 ble_gattc_rx_read_blob_rsp
20004200 g     O .bss	00000050 g_ble_ll_scan_rsp_advs
0000c18e  w    F .text	00000002 SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler
0001b77a g     F .text	00000026 ble_gap_identity_event
0000d814 g     F .text	00000044 os_arch_task_stack_init
000235f4 g     F .text	0000003e ble_uuid_init_from_att_buf
00014286 g     F .text	00000034 ble_ll_disconn_comp_event_send
00029b40 g     F .text	0000006c malloc
00024fe8 g     F .text	00000034 ble_att_svr_read_handle
0000f360 g     F .text	00000026 flash_area_read
0000dcd0 g     F .text	000000c0 os_mbuf_cmpm
0001f442 g     F .text	00000002 ble_hs_flow_fill_acl_usrhdr
0000c65c g     F .text	00000044 __assert_func
00016bf0 g     F .text	00000040 ble_ll_resolv_list_find
0001e0c4 g     F .text	000000c4 ble_gatts_rx_indicate_ack
000239c4 g     F .text	000001f8 ble_att_inc_tx_stat
00026df4 g     F .text	00000034 uECC_vli_cmp_unsafe
0000d418 g     F .text	00000048 os_sched_wakeup_ticks
0000ee14 g     F .text	00000060 console_pkg_init
000131ac g     F .text	00000104 ble_ll_init_rx_pkt_in
0000c184  w    F .text	00000002 UsageFault_Handler
000128e4 g     F .text	0000002c ble_ll_conn_sm_get
0002a1f4 g     F .text	0000003a vsnprintf
20003b4c g     O .bss	00000008 g_callout_list
0002038c g     F .text	00000038 ble_hs_pvcy_add_entry
00023632 g     F .text	0000002c ble_uuid_init_from_att_mbuf
000184e0 g     F .text	00000020 ble_ll_scan_can_chg_whitelist
0001f7f0 g     F .text	0000000c ble_hs_hci_set_le_supported_feat
00019450 g     F .text	00000034 ble_hw_rng_start
0001e188 g     F .text	00000028 ble_gatts_tx_notifications
0001d0cc g     F .text	0000001e ble_gattc_rx_find_type_value_complete
0001819c g     F .text	00000074 ble_ll_scan_rx_isr_start
00010600 g     F .text	00000016 ble_ll_chk_txrx_time
20003e80 g     O .bss	00000016 g_ble_ll_conn_params
0000c18e  w    F .text	00000002 UARTE0_UART0_IRQHandler
00029f50 g     F .text	0000025c tfp_format
2003fe50 g       *ABS*	00000000 __HeapLimit
20000248 g       .bss	00000000 __bss_start__
0001e52c g     F .text	00000008 ble_hs_unlock
0000c1e8 g     F .text	00000010 hal_debugger_connected
00027b44 g     F .text	00000098 uECC_make_key
000236b8 g     F .text	00000006 ble_uuid_length
00024190 g     F .text	00000026 ble_att_clt_tx_exec_write
00023e32 g     F .text	0000004e ble_att_clt_rx_find_info
0000c18e  w    F .text	00000002 TIMER4_IRQHandler
0001cf60 g     F .text	000000b8 ble_gattc_indicate_custom
00019264 g     F .text	00000030 ble_hw_get_public_addr
0001b85a g     F .text	0000006e ble_gap_subscribe_event
00018210 g     F .text	00000056 ble_ll_scan_adv_decode_addr
0002a9a4 g     F .text	000002cc .hidden __udivmoddi4
00026d64 g     F .text	0000002a uECC_vli_isZero
00016560 g     F .text	0000007c ble_ll_hci_is_event_enabled
00019b78 g     F .text	00000050 ble_phy_encrypt_enable
000284b8 g     F .text	0000003c _cbor_value_copy_string
00019c04 g     F .text	0000000c ble_phy_set_txend_cb
000194b4 g     F .text	00000038 ble_hw_resolv_list_add
0001fdac g     F .text	0000000e ble_hs_hci_util_handle_pb_bc_join
000169c8 g     F .text	0000002c ble_ll_rand_prand_get
0001a268 g     F .text	00000010 ble_phy_xcvr_state_get
0001f2b4 g     F .text	000000d4 ble_hs_conn_addrs
20003b68 g     O .bss	00000004 g_current_task
0000d194 g     F .text	00000084 os_sanity_run
00019c7c g     F .text	0000000c ble_phy_set_rx_pwr_compensation
000135e0 g     F .text	0000003c ble_ll_conn_timeout
20003df8 g     O .bss	00000004 g_ble_ll_cur_adv_sm
0000d7f8 g     F .text	0000000c os_arch_save_sr
00020188 g     F .text	00000010 ble_hs_misc_peer_addr_type_to_id
0001e230 g     F .text	000000e6 ble_gatts_bonding_restored
00016bb4 g     F .text	00000028 ble_ll_resolv_list_clr
0002a904 g     F .text	00000048 hal_uart_close
0000cea8 g     F .text	00000014 os_mempool_init
0000d6f0 g     F .text	00000038 os_gettimeofday
20003b78 g     O .bss	00000001 g_task_id
000147fe g     F .text	0000002e ble_ll_conn_hci_set_chan_class
20004648 g     O .bss	00000001 ble_hs_sync_state
2000013c g     O .data	00000008 g_stats_registry
0001ad9c g     F .text	00000118 ble_gap_adv_start
000241c2 g     F .text	00000040 ble_att_clt_tx_notify
00022fec g     F .text	000000dc ble_sm_sc_public_key_exec
00010a84 g     F .text	00000070 ble_ll_pdu_max_tx_octets_get
0001f7e0 g     F .text	00000010 ble_hs_hci_acl_tx
200040d4 g     O .bss	0000000c g_ble_ll_rnum_data
000253b6 g     F .text	0000007c ble_att_svr_rx_read
00029798 g     F .text	00000016 get_le32
0002a744 g     F .text	00000064 hal_uart_blocking_tx
000132d8 g     F .text	00000308 ble_ll_init_rx_isr_end
00015208 g     F .text	0000001e ble_ll_ctrl_is_start_enc_rsp
0002bdf0 g       .text	00000000 __exidx_start
0001b144 g     F .text	00000014 ble_gap_disc_active
0000d218 g     F .text	00000010 os_sanity_init
20003e98 g     O .bss	00000004 g_ble_ll_conn_cur_sm
0000da3a g     F .text	000000a8 os_mbuf_append
0000fe8a g     F .text	0000000a mfg_read_tlv_mmr_ref
00029824 g     F .text	00000016 get_be32
00023fb6 g     F .text	0000002c ble_att_clt_tx_read
0000e360 g     F .text	00000014 os_set_env
0002414e g     F .text	00000042 ble_att_clt_rx_prep_write
00028b74 g     F .text	00000010 hal_bsp_flash_dev
000291e8 g     F .text	0000000c nrf52_periph_create
000202b4 g     F .text	0000000c ble_hs_pvcy_our_irk
0002bde8 g     O .text	00000008 MemFile_methods
00026e50 g     F .text	00000010 cond_set
20003b5c g     O .bss	0000000c g_os_sanity_check_mu
0001e534 g     F .text	0000001c ble_hs_process_rx_data_queue
0001d144 g     F .text	0000001e ble_gattc_rx_read_group_type_adata
20004654 g     O .bss	00000006 ble_hs_misc_null_addr
2000426c g     O .bss	00000008 g_ble_ll_sched_q
0000c18e  w    F .text	00000002 CRYPTOCELL_IRQHandler
0000c1a0 g     F .text	0000003c _sbrk
00019bc8 g     F .text	00000010 ble_phy_encrypt_set_pkt_cntr
0002349c g     F .text	0000000c ble_store_delete_cccd
00028ea8 g     F .text	000000b0 os_tick_idle
00012f04 g     F .text	00000114 ble_ll_conn_end
0000eeb0 g     F .text	0000001c console_printf
0001909c g     F .text	00000038 ble_ll_utils_calc_window_widening
0000ec88 g     F .text	00000008 console_blocking_mode
0002831e g     F .text	0000014a cbor_value_enter_container
0000c18e  w    F .text	00000002 I2S_IRQHandler
0001af2a g     F .text	0000000a ble_gap_adv_active
0000c470 g     F .text	00000002 _init
00011b22 g     F .text	00000020 ble_ll_hci_set_adv_data
00024292 g     F .text	0000004a ble_att_tx
0001e360 g     F .text	00000050 ble_gatts_count_cfg
00019294 g     F .text	00000018 ble_hw_whitelist_clear
00011ae8 g     F .text	0000001a ble_ll_hci_adv_set_enable
00011b90 g     F .text	00000044 ble_ll_adv_rx_pkt_in
0000c18e  w    F .text	00000002 SWI4_EGU4_IRQHandler
0001cf48 g     F .text	0000000a ble_gattc_notify
0001ba0c g     F .text	00000038 ble_gap_event_listener_unregister
0002087a g     F .text	000000b8 ble_l2cap_rx
00028f58 g     F .text	000000a8 os_tick_init
0001981c g     F .text	00000088 ble_phy_rxpdu_copy
0001b7a0 g     F .text	0000002c ble_gap_repeat_pairing_event
00018ad0 g     F .text	00000100 ble_ll_sched_slave_new
0002008a g     F .text	0000000a ble_hs_mbuf_acl_pkt
000241b6 g     F .text	0000000c ble_att_clt_rx_exec_write
0000f8b0 g     F .text	00000008 log_console_get
00026070 g     F .text	0000005c ble_hci_trans_buf_alloc
00021b84 g     F .text	0000000a ble_sm_gen_pair_rand
0000c18e  w    F .text	00000002 TIMER0_IRQHandler
0000c870 g     F .text	000000d0 os_init
0001deb4 g     F .text	00000148 ble_gatts_start
0000c120 g     F .text	0000005c Reset_Handler
00018564 g     F .text	00000008 ble_ll_scan_get_peer_rpa
0001f638 g     F .text	00000020 ble_hs_hci_set_buf_sz
0000c18e  w    F .text	00000002 UARTE1_IRQHandler
0001feb8 g     F .text	00000032 ble_hs_id_gen_rnd
000298e8 g     F .text	00000016 os_cputime_ticks_to_usecs
0000fb34 g     F .text	0000003c modlog_append
20004652 g     O .bss	00000002 ble_hs_hci_avail_pkts
0000ea88 g     F .text	0000000c console_echo
00013810 g     F .text	00000258 ble_ll_conn_rx_isr_end
00027c98 g     F .text	00000018 _copy
00022704 g     F .text	000000a6 ble_sm_enc_initiate
0001d214 g     F .text	0000003c ble_gattc_rx_prep_write_rsp
20003bd8 g     O .bss	00000001 sysinit_active
000193b0 g     F .text	00000014 ble_hw_whitelist_disable
00018bd0 g     F .text	000000cc ble_ll_sched_adv_new
000193c4 g     F .text	0000000c ble_hw_whitelist_match
00014738 g     F .text	00000042 ble_ll_conn_hci_rd_rem_ver_cmd
20003b88 g     O .bss	00000001 g_console_silence
0001e06c g     F .text	00000056 ble_gatts_send_next_indicate
0002974c g     F .text	00000008 put_le16
2000464a g     O .bss	00000002 ble_hs_max_services
000151e8 g     F .text	00000020 ble_ll_ctrl_enc_allowed_pdu_tx
0000d990 g     F .text	0000000a os_mbuf_pool_init
00024e68 g     F .text	00000034 ble_att_svr_find_by_uuid
0000e3f6 g     F .text	0000001e os_default_irq_asm
000270fa g     F .text	00000022 uECC_vli_modSub
0000d460 g     F .text	0000000c os_sched_next_task
0001b2cc g     F .text	00000094 ble_gap_conn_broken
00027552 g     F .text	00000132 uECC_vli_modInv
0000d228 g     F .text	00000054 os_sched_insert
0000ca04 g     F .text	00000080 os_callout_reset
0000fe94 g     F .text	00000040 mfg_init
00023c00 g     F .text	0000002c ble_att_mtu
00029120 g     F .text	00000044 nrf52_clock_hfxo_release
0000cc90 g     F .text	00000010 os_dev_reset
00023d6e g     F .text	00000028 ble_att_clt_rx_error
00020de0 g     F .text	00000038 ble_l2cap_sig_conn_broken
00017fcc g     F .text	0000001c ble_ll_scan_halt
00026dd6 g     F .text	0000001e uECC_vli_set
00018960 g     F .text	00000170 ble_ll_sched_master_new
0001f388 g     F .text	00000084 ble_hs_conn_timer
0002a1b4 g     F .text	0000001c fprintf
00020178 g     F .text	00000010 ble_hs_misc_own_addr_type_to_id
0001e77c g     F .text	0000000c ble_hs_hw_error
0001fcd0 g     F .text	0000003c ble_hs_hci_evt_process
0000e1ac g     F .text	00000014 os_mutex_init
0000c190 g     F .text	00000010 _sbrkInit
0001734c g     F .text	00000034 ble_ll_rfmgmt_enable_now
0001e01c g     F .text	00000050 ble_gatts_conn_init
0000cd2a g     F .text	0000001a os_eventq_get_no_wait
00024272 g     F .text	00000020 ble_att_cmd_get
20000248 g       .bssnz	00000000 __bssnz_end__
00010770 g     F .text	00000028 ble_ll_is_our_devaddr
0000f388 g     F .text	00000088 flash_map_init
00019164 g     F .text	00000010 ble_ll_whitelist_match
0002a230 g     F .text	00000014 vprintf
0002a97c g     F .text	00000028 .hidden __popcountsi2
0000c7dc g     F .text	0000000c os_started
0000c18e  w    F .text	00000002 TIMER1_IRQHandler
20000000 g       .bss	00000000 _ram_start
000235aa g     F .text	0000003c ble_uuid_cmp
00022418 g     F .text	00000010 ble_sm_enc_key_refresh_rx
0001f814 g     F .text	00000048 ble_hs_hci_init
0000d3dc g     F .text	0000003c os_sched_os_timer_exp
20000000 g       .vector_relocation	00000000 __vector_tbl_reloc__
000165dc g     F .text	0000003c ble_ll_hci_cmd_rx
0001e4dc g     F .text	00000024 ble_hs_is_parent_task
000168a4 g     F .text	00000030 ble_ll_hci_ev_hw_err
00019158 g     F .text	0000000c ble_ll_whitelist_read_size
0002aea4 g     O .text	0000002c log_console_handler
00016e24 g     F .text	00000034 ble_ll_resolv_peer_addr_rd
00010276 g     F .text	0000001e rwlock_release_write
0000c18e  w    F .text	00000002 SPIM3_IRQHandler
0000db04 g     F .text	00000054 os_mbuf_appendfrom
0000c18e  w    F .text	00000002 PWM2_IRQHandler
0001e75c g     F .text	00000020 ble_hs_sched_reset
0001556e g     F .text	00000036 ble_ll_ctrl_proc_stop
00025296 g     F .text	00000078 ble_att_svr_rx_find_type_value
00017034 g     F .text	00000068 ble_ll_resolv_rpa
20003cec g     O .bss	00000006 g_random_addr
20000224 g       .data	00000000 __data_end__
0000f688 g     F .text	000000d0 log_register
0001fe64 g     F .text	00000038 ble_hs_hci_util_data_hdr_strip
0001cec8 g     F .text	00000080 ble_gattc_notify_custom
000101fc g     F .text	00000026 rwlock_release_read
0000c18e  w    F .text	00000002 ECB_IRQHandler
00023660 g     F .text	00000058 ble_uuid_flat
00018f20 g     F .text	00000010 ble_ll_sched_stop
00013fdc g     F .text	00000160 ble_ll_conn_comp_event_send
000270cc g     F .text	0000002e uECC_vli_modAdd
000228fc g     F .text	00000020 ble_sm_create_chan
000228bc g     F .text	00000040 ble_sm_init
0001a27c g     F .text	00000020 ble_phy_resolv_list_enable
000233f0 g     F .text	0000001a ble_store_full_event
00016624 g     F .text	00000058 ble_ll_hci_init
00025198 g     F .text	00000094 ble_att_svr_rx_mtu
00010844 g     F .text	00000058 ble_ll_rx_start
00024dac g     F .text	0000000c ble_att_svr_prev_handle
0001a0f0 g     F .text	0000003c ble_phy_tx_set_start_time
0002333c g     F .text	0000002c ble_store_read
20003b7c g     O .bss	00000004 g_os_time
00023bbc g     F .text	0000000a ble_att_set_peer_mtu
0002a65c g     F .text	0000003c hal_uart_init_cbs
00023c2c g     F .text	00000028 ble_att_create_chan
00017284 g     F .text	00000038 ble_ll_rfmgmt_reset
000290c8 g     F .text	00000014 hal_watchdog_tickle
200047c0 g       .bss	00000000 __bss_end__
00012cc4 g     F .text	0000001c ble_ll_conn_wfr_timer_exp
00022d8c g     F .text	000000a6 ble_sm_sc_random_exec
0000d99a g     F .text	00000032 os_mbuf_get
0000c18e  w    F .text	00000002 SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler
00020198 g     F .text	00000014 ble_hs_misc_restore_irks
00026a5e g     F .text	0000005a tc_cmac_setup
00019394 g     F .text	0000001c ble_hw_whitelist_enable
0001ad0c g     F .text	00000026 ble_gap_rx_rd_rem_sup_feat_complete
00023be6 g     F .text	0000001a ble_att_truncate_to_mtu
000225ca g     F .text	00000010 ble_sm_peer_pair_rand
00010af4 g     F .text	00000184 ble_ll_init
0001f0ee g     F .text	00000034 ble_hs_conn_chan_insert
0000f5d8 g     F .text	00000010 log_hdr_len
2000464c g     O .bss	00000002 ble_hs_max_attrs
000194ec g     F .text	00000038 ble_hw_resolv_list_rmv
0000d098 g     F .text	00000010 os_msys_reset
0000c18e g     F .text	00000002 Default_Handler
0000c45c g     F .text	00000014 _start
00025884 g     F .text	00000058 ble_att_svr_start
00019314 g     F .text	00000080 ble_hw_whitelist_rmv
00011b02 g     F .text	00000020 ble_ll_hci_set_scan_rsp_data
0001062e g     F .text	00000018 ble_ll_addr_is_id
0000f76c g     F .text	0000000c log_fill_current_img_hash
20003bc8 g     O .bss	00000010 g_stats_stats
20003e9c g     O .bss	00000004 g_ble_ll_conn_comp_ev
0000e374 g     F .text	00000006 os_arch_init_task_stack
00015268 g     F .text	0000001c ble_ll_ctrl_conn_param_reply
0000cdc6 g     F .text	00000022 os_eventq_run
0001453c g     F .text	000000ac ble_ll_conn_hci_param_rr
000298d8 g     F .text	00000010 os_cputime_usecs_to_ticks
0002983a g     F .text	00000020 swap_in_place
0000cef2 g     F .text	0000003e os_memblock_from
20003cf4 g     O .bss	00000006 g_dev_addr
0001900c g     F .text	00000052 ble_ll_utils_remapped_channel
0000eba0 g     F .text	00000034 console_lock
000109d8 g     F .text	00000010 ble_ll_event_send
00018500 g     F .text	00000058 ble_ll_scan_initiator_start
0002267e g     F .text	00000086 ble_sm_pair_initiate
20004330 g     O .bss	0000010c g_nrf_encrypt_scratchpad
00018f58 g     F .text	000000b4 ble_ll_utils_calc_access_addr
00020ed0 g     F .text	00000040 ble_l2cap_sig_cmd_get
00018c9c g     F .text	00000174 ble_ll_sched_adv_reschedule
20003aa4 g     O .bss	00000050 g_idle_task
00025dac g     F .text	00000010 ble_sm_alg_ecc_init
20000144 g     O .data	00000004 sysinit_panic_cb
0002965c g     F .text	0000008c hal_timer_start_at
0001905e g     F .text	0000003e ble_ll_utils_calc_num_used_chans
000201ac g     F .text	00000014 ble_mqueue_init
000109c0 g     F .text	0000000c ble_ll_state_set
20002138 g     O .bss	00000004 g_os_sanity_check_list
0001f244 g     F .text	00000018 ble_hs_conn_find
00025fec g     F .text	0000002c ble_hci_trans_ll_evt_tx
0001ff64 g     F .text	00000050 ble_hs_id_addr
0002a698 g     F .text	00000060 hal_uart_start_tx
00023368 g     F .text	00000028 ble_store_delete
0000cf30 g     F .text	00000032 os_memblock_get
0000d354 g     F .text	00000088 os_sched_wakeup
00018390 g     F .text	00000080 ble_ll_scan_wfr_timer_exp
000279c8 g     F .text	00000052 EccPoint_compute_public_key
0001d072 g     F .text	0000001e ble_gattc_rx_find_info_idata
000298fe g     F .text	00000010 os_sem_init
0001e4d0 g     F .text	0000000c ble_hs_evq_set
0001b900 g     F .text	00000030 ble_gap_preempt_no_lock
00025ed4 g     F .text	00000028 ble_svc_gap_device_name_set
00029bec g     F .text	00000060 realloc
000100b4 g     F .text	00000030 mem_init_mbuf_pool
00025cf8 g     F .text	00000060 ble_sm_alg_gen_dhkey
0001f2a8 g     F .text	0000000c ble_hs_conn_first
00019cd4 g     F .text	0000000c ble_phy_disable
0000c6a0 g     F .text	00000098 os_default_irq
00026d8e g     F .text	00000014 uECC_vli_testBit
200042b4 g     O .bss	00000001 g_nrf_num_irks
00026da2 g     F .text	00000034 uECC_vli_numBits
0001477a g     F .text	00000030 ble_ll_conn_hci_rd_rssi
2000464e g     O .bss	00000001 ble_hs_enabled_state
000128c0 g     F .text	00000024 ble_ll_conn_find_active_conn
0001b4f4 g     F .text	00000026 ble_gap_timer
00027808 g     F .text	00000164 EccPoint_mult
0001f728 g     F .text	000000b8 ble_hs_hci_acl_tx_now
00022896 g     F .text	00000026 ble_sm_connection_broken
0001d180 g     F .text	00000030 ble_gattc_rx_read_rsp
20003b6c g     O .bss	00000004 g_os_last_ctx_sw_time
20003ea0 g     O .bss	00000008 g_ble_ll_conn_free_list
00029910 g     F .text	00000064 os_sem_release
00018efc g     F .text	00000024 ble_ll_sched_next_time
000109e8 g     F .text	0000000a ble_ll_read_supp_states
0000e428 g     F .text	00000048 memcmp
0000d858 g     F .text	00000018 os_arch_init
0001d090 g     F .text	0000001e ble_gattc_rx_find_info_complete
00019c60 g     F .text	0000001c ble_phy_txpwr_set
0002ac70  w    F .text	00000002 .hidden __aeabi_ldiv0
000297ae g     F .text	00000076 get_le64
0001009c g     F .text	0000000c sysinit_start
0002948c g     F .text	00000170 hal_timer_config
0000cc4c g     F .text	00000044 os_dev_open
00013b9c g     F .text	000001dc ble_ll_conn_slave_start
0001b736 g     F .text	00000044 ble_gap_enc_event
00011c14 g     F .text	00000028 ble_ll_adv_can_chg_whitelist
00012894 g     F .text	00000012 ble_ll_conn_is_lru
00027684 g     F .text	0000000e EccPoint_isZero
0000e0fe g     F .text	000000ae os_mbuf_pack_chains
0000ee0c g     F .text	00000008 console_is_init
0001f67c g     F .text	0000007c ble_hs_hci_cmd_tx
00029c4c g     F .text	00000014 srand48
00019174 g     F .text	00000060 ble_ll_whitelist_add
00012d0c g     F .text	0000001a ble_ll_conn_auth_pyld_timer_cb
00025c44 g     F .text	000000b4 ble_sm_alg_g2
00029974 g     F .text	000000b8 os_sem_pend
0001efc8 g     F .text	00000038 ble_hs_adv_parse
000290b8 g     F .text	00000010 hal_watchdog_enable
00010294 g     F .text	00000030 rwlock_init
00011c3c g     F .text	0000002c ble_ll_adv_send_conn_comp_ev
0002063e g     F .text	00000054 ble_hs_startup_go
000101a2 g     F .text	0000005a rwlock_acquire_read
0001e788 g     F .text	00000080 ble_hs_start
000119a0 g     F .text	00000034 ble_ll_adv_halt
000298be g     F .text	00000008 os_cputime_timer_start
00011808 g     F .text	00000024 ble_ll_adv_chk_rpa_timeout
000151cc g     F .text	0000001c ble_ll_ctrl_enc_allowed_pdu_rx
00019bd8 g     F .text	0000002c ble_phy_encrypt_disable
0001489e g     F .text	00000060 ble_ll_conn_hci_le_start_encrypt
0001e714 g     F .text	0000000a ble_hs_timer_resched
000164e0 g     F .text	00000028 ble_ll_hci_send_noop
0000cff4 g     F .text	0000004c os_msys_register
00018574 g     F .text	00000014 ble_ll_scan_set_peer_rpa
20003af4 g     O .bss	00000004 g_os_idle_ctr
0000f32c g     F .text	00000034 flash_area_open
000149d8 g     F .text	0000006c ble_ll_conn_hci_wr_auth_pyld_tmo
0000dc56 g     F .text	0000007a os_mbuf_cmpf
0000c18e  w    F .text	00000002 SAADC_IRQHandler
000150e4 g     F .text	000000ac ble_ll_calc_session_key
00026044 g     F .text	0000002c ble_hci_trans_ll_acl_tx
0001d77e g     F .text	00000092 ble_gatts_clt_cfg_access
0001a25c g     F .text	0000000c ble_phy_rx_started
00023310 g     F .text	00000014 ble_sm_sc_init
0000e4c0 g     F .text	00000038 memset
0000c020 g       .text	00000100 __isr_vector
000255b0 g     F .text	0000006c ble_att_svr_rx_write
0000c5a8 g     F .text	00000050 main
00025816 g     F .text	0000006c ble_att_svr_rx_indicate
000148fe g     F .text	0000005c ble_ll_conn_hci_le_ltk_reply
00018f30 g     F .text	00000028 ble_ll_sched_init
00016a10 g     F .text	00000024 ble_ll_rand_init
0000f0b8 g     F .text	00000034 console_out_nolock
000167c4 g     F .text	00000050 ble_ll_hci_ev_ltk_req
00026d38 g     F .text	0000000c uECC_set_rng
00017904 g     F .text	0000000a ble_ll_scan_timer_cb
0000c18e  w    F .text	00000002 CCM_AAR_IRQHandler
0000c18e  w    F .text	00000002 WDT_IRQHandler
000103b4 g     F .text	00000050 ble_ll_task
0002080e g     F .text	0000000c ble_l2cap_get_conn_handle
0000fb00 g     F .text	00000034 modlog_register
00013f20 g     F .text	00000056 ble_ll_conn_hci_chk_conn_params
00026f20 g     F .text	000001ac vli_mmod_fast_secp256r1
20003cfc g     O .bss	00000050 g_ble_ll_task
00016862 g     F .text	00000042 ble_ll_hci_ev_rd_rem_ver
000100a8 g     F .text	0000000c sysinit_end
0001b24c g     F .text	00000040 ble_gap_terminate
0000fbac g     F .text	000000c8 modlog_init
0000e37a g     F .text	00000046 SVC_Handler
0001ba44 g     F .text	00000080 ble_gap_init
00016508 g     F .text	00000058 ble_ll_hci_is_le_event_enabled
0001b190 g     F .text	00000014 ble_gap_conn_active
000168d4 g     F .text	00000026 ble_ll_hci_ev_databuf_overflow
00016392 g     F .text	00000004 ble_ll_hci_adv_mode_ext
0000ccb0 g     F .text	0000000a os_eventq_inited
00016d5c g     F .text	00000098 ble_ll_resolv_list_rmv
000166c4 g     F .text	0000004a ble_ll_hci_ev_rem_conn_parm_req
00022cec g     F .text	000000a0 ble_sm_sc_confirm_exec
2000443c g     O .bss	00000040 ble_phy_stats
0001440c g     F .text	00000060 ble_ll_conn_hci_read_rem_features
00026e28 g     F .text	00000028 uECC_vli_equal
00028bd6 g     F .text	00000054 hal_flash_read
00020018 g     F .text	00000018 ble_hs_id_reset
0000ebd4 g     F .text	0000003c console_unlock
0000ce28 g     F .text	00000008 os_eventq_dflt_get
0002b640 g     O .text	00000010 ble_hs_pvcy_default_irk
000295fc g     F .text	00000038 hal_timer_read
00026d44 g     F .text	0000000c uECC_get_rng
000200a8 g     F .text	00000028 ble_hs_mbuf_from_flat
2000479c g     O .bss	0000001c nrf52_hal_timer5
0000cd44 g     F .text	00000082 os_eventq_get
00026b8c g     F .text	00000068 tc_cmac_final
0000d7b2 g     F .text	00000026 os_time_ms_to_ticks
00018558 g     F .text	0000000c ble_ll_scan_enabled
0000f640 g     F .text	0000000a log_walk
0000cae0 g     F .text	0000003c os_callout_wakeup_ticks
0001acf4 g     F .text	00000018 ble_gap_rx_adv_report
000207dc g     F .text	00000032 ble_l2cap_prepend_hdr
0000c18e  w    F .text	00000002 SWI5_EGU5_IRQHandler
00011d00 g     F .text	0000001c ble_ll_adv_init
00026174 g     F .text	000000d4 ble_hci_ram_init
0002009e g     F .text	0000000a ble_hs_mbuf_att_pkt
20003ba0 g     O .bss	00000004 flash_map_entries
0000dbb2 g     F .text	000000a4 os_mbuf_adj
00018590 g     F .text	00000010 ble_ll_scan_whitelist_enabled
0000c020 g       .imghdr	00000000 __text
0000fe54 g     F .text	00000012 mfg_seek_next
00027a1a g     F .text	00000028 uECC_vli_nativeToBytes
00017fe8 g     F .text	0000008c ble_ll_scan_sm_stop
20004678 g     O .bss	00000034 ble_l2cap_stats
0001e826 g     F .text	00000008 ble_hs_tx_data
0000e4f8 g     F .text	0000001c strcmp
0000f08c g     F .text	0000002c uart_console_blocking_mode
00022404 g     F .text	00000014 ble_sm_enc_change_rx
0000d2ac g     F .text	0000000c os_sched_get_current_task
0000ec10 g     F .text	00000078 console_write
00011c9c g     F .text	00000014 ble_ll_adv_wfr_timer_exp
200041d8 g     O .bss	00000028 g_ble_ll_resolv_data
0001b704 g     F .text	00000032 ble_gap_passkey_event
000207a8 g     F .text	00000008 ble_l2cap_is_mtu_req_sent
00029a2c g     F .text	00000010 lrand48
00019a0c g     F .text	0000016c ble_phy_init
00023efc g     F .text	0000004a ble_att_clt_tx_read_type
0000c358 g     F .text	00000104 SystemInit
000298ce g     F .text	0000000a os_cputime_get32
00023558 g     F .text	00000052 ble_uuid_init_from_buf
00010662 g     F .text	00000016 ble_ll_is_valid_public_addr
0000c18e  w    F .text	00000002 RNG_IRQHandler
000221be g     F .text	000000de ble_sm_process_result
00020030 g     F .text	00000024 ble_hs_log_mbuf
0000cde8 g     F .text	00000040 os_eventq_remove
00022e34 g     F .text	000001b8 ble_sm_sc_random_rx
000191d4 g     F .text	0000003c ble_ll_whitelist_rmv
20003d50 g     O .bss	000000a8 g_ble_ll_data
0001f25c g     F .text	00000018 ble_hs_conn_insert
0001a278 g     F .text	00000004 ble_phy_max_data_pdu_pyld
00020d14 g     F .text	000000ac ble_l2cap_sig_update
00025efc g     F .text	00000074 ble_svc_gap_init
000240de g     F .text	0000000a ble_att_clt_rx_write
00029754 g     F .text	00000014 put_le32
000187bc g     F .text	000001a4 ble_ll_sched_conn_reschedule
0001e318 g     F .text	00000048 ble_gatts_add_svcs
00010990 g     F .text	00000030 ble_ll_tx_mbuf_pducb
20003ea8 g     O .bss	00000004 g_ble_ll_conn_create_sm
0001f8b0 g     F .text	00000038 ble_hs_hci_cmd_send_buf
00024242 g     F .text	0000000a ble_att_clt_rx_indicate
00023e80 g     F .text	00000048 ble_att_clt_tx_find_type_value
00024020 g     F .text	0000000e ble_att_clt_rx_read_blob
0000d46c g     F .text	00000022 os_sched
00023ec8 g     F .text	00000034 ble_att_clt_rx_find_type_value
0001f0d8 g     F .text	00000016 ble_hs_conn_chan_find_by_scid
0002a6f8 g     F .text	0000004c hal_uart_start_rx
0001a2b0 g     F .text	00000008 ble_phy_rfclk_disable
00023f46 g     F .text	00000070 ble_att_clt_rx_read_type
00013b10 g     F .text	00000048 ble_ll_conn_tx_pkt_in
20003dfc g     O .bss	00000080 g_ble_ll_adv_sm
0000e280 g     F .text	000000e0 os_mutex_pend
00000000 g       .svc_table	00000000 SVC_Table
00020094 g     F .text	0000000a ble_hs_mbuf_l2cap_pkt
0000c18e  w    F .text	00000002 RTC2_IRQHandler
00016fac g     F .text	00000028 ble_ll_resolv_set_peer_rpa
00021c08 g     F .text	00000040 ble_sm_proc_find
0001709c g     F .text	0000000c ble_ll_resolv_enabled
0001d0ec g     F .text	0000002c ble_gattc_rx_read_type_adata
20040000 g       .bss	00000000 __StackTop
00023bc6 g     F .text	00000020 ble_att_chan_mtu
0001fdbc g     F .text	00000040 ble_hs_hci_util_read_adv_tx_pwr
00025b14 g     F .text	00000130 ble_sm_alg_f6
200042b8 g     O .bss	00000040 g_nrf_irk_list
00016814 g     F .text	0000004e ble_ll_hci_ev_rd_rem_used_feat
00027cb8 g     F .text	00000012 _double_byte
00023418 g     F .text	0000000c ble_store_write_our_sec
00015c1e g     F .text	000000cc ble_ll_ctrl_tx_done
00020158 g     F .text	00000020 ble_hs_misc_conn_chan_find_reqd
0000c18e  w    F .text	00000002 PWM0_IRQHandler
0000c18e  w    F .text	00000002 SWI3_EGU3_IRQHandler
0001541c g     F .text	00000018 ble_ll_ctrl_is_terminate_ind
0001667c g     F .text	00000048 ble_ll_hci_ev_datalen_chg
000257d8 g     F .text	0000003e ble_att_svr_rx_notify
00023c54 g     F .text	0000003c ble_att_init
00024fd2 g     F .text	00000016 ble_att_svr_ticks_until_tmo
0001fff6 g     F .text	00000020 ble_hs_id_use_addr
00026d50 g     F .text	00000014 uECC_vli_clear
0001f0a8 g     F .text	00000030 ble_hs_conn_can_alloc
000107ac g     F .text	0000003c ble_ll_wfr_timer_exp
0001f05e g     F .text	0000002c ble_hs_atomic_conn_flags
000201e6 g     F .text	0000003e ble_mqueue_put
0001fe3e g     F .text	00000026 ble_hs_hci_util_set_random_addr
0001aeb4 g     F .text	0000004c ble_gap_adv_set_data
000172bc g     F .text	00000028 ble_ll_rfmgmt_scan_changed
0001f444 g     F .text	00000004 ble_hs_flow_startup
000192ac g     F .text	00000068 ble_hw_whitelist_add
00020e60 g     F .text	00000034 ble_l2cap_sig_init
0001361c g     F .text	00000070 ble_ll_conn_rx_isr_start
0000ca84 g     F .text	0000005c os_callout_tick
0001f40c g     F .text	00000034 ble_hs_conn_init
0002babc g     O .text	00000048 sysflash_map_dflt
0001b930 g     F .text	00000018 ble_gap_preempt
0000f0ec g     F .text	00000010 uart_console_is_init
0000c120 g       .text	00000000 __isr_vector_end
0000c940 g     F .text	00000022 os_start
000106f4 g     F .text	00000028 ble_ll_is_valid_own_addr_type
00020f54 g     F .text	0000001e ble_l2cap_sig_reject_invalid_cid_tx
00015bd0 g     F .text	0000004e ble_ll_ctrl_reject_ind_send
00010616 g     F .text	00000018 ble_ll_is_rpa
0001b550 g     F .text	00000098 ble_gap_rx_param_req
0002985a g     F .text	0000001c swap_buf
00015226 g     F .text	00000042 ble_ll_ctrl_start_enc_send
000109f4 g     F .text	0000000c ble_ll_read_supp_features
00012d8c g     F .text	00000104 ble_ll_conn_sm_new
00011b44 g     F .text	0000004c ble_ll_adv_rx_isr_end
0002711c g     F .text	00000136 uECC_vli_mmod
00014650 g     F .text	00000048 ble_ll_conn_create_cancel
0001446c g     F .text	000000d0 ble_ll_conn_hci_update
000168fc g     F .text	00000050 ble_ll_rand_sample
00023424 g     F .text	0000000e ble_store_read_peer_sec
000232c2 g     F .text	0000004e ble_sm_sc_dhkey_check_rx
0000c18e  w    F .text	00000002 RTC1_IRQHandler
00027cb0 g     F .text	00000008 _set
0000d4d4 g     F .text	0000000a os_task_stacktop_get
20004528 g     O .bss	00000098 ble_gattc_stats
0001fdfc g     F .text	00000042 ble_hs_hci_util_rand
00010a7c g     F .text	00000006 ble_ll_pdu_tx_time_get
0002a804 g     F .text	00000100 hal_uart_config
00029882 g     F .text	0000003c os_cputime_timer_init
00020ec2 g     F .text	0000000e ble_l2cap_sig_hdr_parse
000250c2 g     F .text	00000030 ble_att_svr_tx_error_rsp
00012910 g     F .text	0000001c ble_ll_conn_calc_dci
0002773e g     F .text	000000ca XYcZ_add
00019220 g     F .text	00000002 do_works_mitm
00019218 g     F .text	00000008 ble_ll_whitelist_disable
00010798 g     F .text	00000014 ble_ll_get_our_devaddr
000203c4 g     F .text	00000084 ble_hs_pvcy_set_our_irk
00018424 g     F .text	0000009c ble_ll_scan_set_scan_params
0000c18e  w    F .text	00000002 SWI1_EGU1_IRQHandler
0001b3c4 g     F .text	000000c0 ble_gap_rx_update_complete
0001a250 g     F .text	0000000c ble_phy_access_addr_get
0000dede g     F .text	00000044 os_mbuf_concat
00023432 g     F .text	00000050 ble_store_write_peer_sec
0000ec90 g     F .text	0000017c console_handle_char
00018268 g     F .text	00000070 ble_ll_scan_chk_resume
00028af4 g     F .text	0000007e _cbor_value_dup_string
0000fed4 g     F .text	00000010 mfg_open
20000118 g     O .data	00000008 g_os_run_list
0001724c g     F .text	00000038 ble_ll_rfmgmt_init
0000c628 g     F .text	00000034 NVIC_Relocate
0001e514 g     F .text	00000010 ble_hs_unlock_nested
0000c5f8 g     F .text	00000030 sysinit_app
00023544 g     F .text	00000014 ble_store_util_count
0002074c g     F .text	00000034 ble_l2cap_chan_alloc
00023dfa g     F .text	00000038 ble_att_clt_tx_find_info
20002170 g     O .bss	00000004 os_flags
0000d804 g     F .text	00000006 os_arch_restore_sr
20004790 g     O .bss	0000000c g_hal_os_tick
00020970 g     F .text	00000060 ble_l2cap_init
000185a0 g     F .text	00000048 ble_ll_scan_reset
00010594 g     F .text	0000005c ble_ll_rxpdu_alloc
00016398 g     F .text	00000030 ble_ll_hci_event_send
00011c96 g     F .text	00000004 ble_ll_adv_get_peer_rpa
2003fe50 g       *ABS*	000001b0 __StackLimit
0001d162 g     F .text	0000001e ble_gattc_rx_read_group_type_complete
20003af8 g     O .bss	00000004 g_os_started
0001a00c g     F .text	00000074 ble_phy_rx
0001af34 g     F .text	000001cc ble_gap_rx_conn_complete
0000c18e  w    F .text	00000002 SPIM2_SPIS2_SPI2_IRQHandler
000184c0 g     F .text	00000020 ble_ll_hci_scan_set_enable
000260cc g     F .text	000000a4 ble_hci_trans_buf_free
00020932 g     F .text	0000003e ble_l2cap_tx
00025f70 g     F .text	00000028 ble_hci_trans_cfg_hs
0000c18e  w    F .text	00000002 NFCT_IRQHandler
00016618 g     F .text	0000000a ble_ll_hci_acl_rx
0001d118 g     F .text	0000002c ble_gattc_rx_read_type_complete
200042f8 g     O .bss	00000004 g_ble_rng_isr_cb
00028468 g     F .text	00000050 cbor_value_leave_container
20003eb0 g     O .bss	000001a0 g_ble_ll_conn_sm
000269e8 g     F .text	00000032 gf_double
00029768 g     F .text	00000026 put_le64
000105f0 g     F .text	00000010 ble_ll_chk_txrx_octets
00023490 g     F .text	0000000c ble_store_write_cccd
0000c348 g     F .text	00000010 SystemCoreClockUpdate
00026304 g     F .text	000006e4 tc_aes_encrypt
2000447c g     O .bss	00000021 g_nrf_ccm_data
0000da16 g     F .text	00000024 os_mbuf_free_chain
0001e558 g     F .text	0000003a ble_hs_wakeup_tx
0000d728 g     F .text	0000003c os_get_uptime
00012ce0 g     F .text	00000002 ble_ll_conn_reset_pending_aux_conn_rsp
0002727e g     F .text	0000015a double_jacobian_default
0000d0f0 g     F .text	00000034 os_msys_init
0001f224 g     F .text	00000020 ble_hs_conn_remove
00024db8 g     F .text	00000018 ble_att_svr_find_by_handle
0000dae2 g     F .text	00000022 os_mbuf_off
0001089c g     F .text	000000f4 ble_ll_rx_end
20003b89 g     O .bss	00000001 g_is_output_nlip
0001f658 g     F .text	00000024 ble_hs_hci_add_avail_pkts
0000d674 g     F .text	0000000c os_time_get
20003bac g     O .bss	0000001c modlog_mapping_pool
00025f98 g     F .text	00000028 ble_hci_trans_cfg_ll
0002340a g     F .text	0000000e ble_store_read_our_sec
00025672 g     F .text	000000b2 ble_att_svr_rx_prep_write
000296e8 g     F .text	00000064 hal_timer_stop
00016f18 g     F .text	0000000c ble_ll_resolv_get_rpa_tmo
00027692 g     F .text	0000003e apply_z
0000f5e8 g     F .text	00000058 log_append_body
00016f24 g     F .text	00000086 ble_ll_resolv_get_priv_addr
00017318 g     F .text	00000034 ble_ll_rfmgmt_release
000240e8 g     F .text	00000066 ble_att_clt_tx_prep_write
0000d9cc g     F .text	00000036 os_mbuf_get_pkthdr
20003ba4 g     O .bss	00000008 g_log_info
0001a2a8 g     F .text	00000008 ble_phy_rfclk_enable
0002ac70  w    F .text	00000002 .hidden __aeabi_idiv0
00025432 g     F .text	00000080 ble_att_svr_rx_read_blob
20004650 g     O .bss	00000002 ble_hs_max_client_configs
0001dffc g     F .text	00000020 ble_gatts_conn_can_alloc
00026a2e g     F .text	00000030 tc_cmac_init
00019210 g     F .text	00000008 ble_ll_whitelist_enable
0001e500 g     F .text	00000014 ble_hs_lock_nested
0001efb8 g     F .text	00000010 ble_hs_adv_set_fields
0002afd4 g     O .text	0000002a g_ble_ll_supp_cmds
0000d4e0 g     F .text	000000e4 os_task_init
0000c224 g     F .text	0000004c hal_system_clock_start
00027a84 g     F .text	00000078 uECC_valid_point
0000c182  w    F .text	00000002 BusFault_Handler
000206fc g     F .text	0000001c ble_hs_stop_init
0000f8b8 g     F .text	00000060 log_console_init
00021b8e g     F .text	00000078 ble_sm_ia_ra
0001e720 g     F .text	0000003c ble_hs_enqueue_hci_event
00016752 g     F .text	00000072 ble_ll_hci_ev_encrypt_chg
0000e514 g     F .text	00000010 strlen
0000cbc0 g     F .text	00000040 os_dev_create
0001f122 g     F .text	0000002c ble_hs_conn_delete_chan
0000cf62 g     F .text	0000001e os_memblock_put_from_cb
0001a29c g     F .text	0000000c ble_phy_resolv_list_disable
00010222 g     F .text	00000054 rwlock_acquire_write
200040e0 g     O .bss	00000020 g_ble_ll_rnum_buf
0000cca0 g     F .text	00000010 os_eventq_init
0002402e g     F .text	0000000e ble_att_clt_rx_read_mult
0000d680 g     F .text	00000048 os_time_advance
000149a6 g     F .text	00000032 ble_ll_conn_hci_rd_auth_pyld_tmo
000128a8 g     F .text	00000018 ble_ll_conn_get_ce_end_time
0000d490 g     F .text	0000002c os_sched_resort
000236be g     F .text	00000024 ble_uuid_to_mbuf
0001acb8 g     F .text	0000002a ble_gap_conn_find
0000e08e g     F .text	00000018 os_mbuf_prepend_pullup
000239b4 g     F .text	0000000e ble_att_conn_chan_find
00028bae g     F .text	00000028 hal_flash_init
0002978e g     F .text	0000000a get_le16
00013150 g     F .text	00000030 ble_ll_conn_connect_ind_send
0000c18e  w    F .text	00000002 MWU_IRQHandler
0000fff0 g     F .text	00000058 stats_module_init
0001ad5c g     F .text	00000040 ble_gap_rx_phy_update_complete
00013d78 g     F .text	000000c8 ble_ll_conn_module_reset
0000c180  w    F .text	00000002 MemoryManagement_Handler
0001b948 g     F .text	000000c4 ble_gap_preempt_done
0000c18e  w    F .text	00000002 QSPI_IRQHandler
00011adc g     F .text	0000000c ble_ll_adv_read_txpwr
0001d1f6 g     F .text	0000001e ble_gattc_rx_write_rsp
0002291c g     F .text	00000034 ble_sm_cmd_get
00023d96 g     F .text	00000064 ble_att_clt_rx_mtu
0001f808 g     F .text	0000000c ble_hs_hci_get_hci_version
00026018 g     F .text	0000002c ble_hci_trans_hs_acl_tx
20004050 g     O .bss	00000080 ble_ll_conn_stats
0001e594 g     F .text	00000014 ble_hs_is_enabled
0000f918 g     F .text	0000001c log_level_get
00029414 g     F .text	00000010 nrf52_timer5_irq_handler
00013a68 g     F .text	000000a6 ble_ll_conn_enqueue_pkt
00011984 g     F .text	0000001c ble_ll_adv_event_rmvd_from_sched
00026a1a g     F .text	00000014 tc_cmac_erase
00020054 g     F .text	0000000c ble_hs_log_flat_buf
000154fe g     F .text	00000070 ble_ll_ctrl_chk_proc_start
0000c18e  w    F .text	00000002 COMP_LPCOMP_IRQHandler
00020f10 g     F .text	00000044 ble_l2cap_sig_reject_tx
00019528 g     F .text	00000028 ble_hw_resolv_list_match
0002561c g     F .text	00000040 ble_att_svr_rx_write_no_rsp
00024d5c g     F .text	00000050 ble_att_svr_register
0000cc00 g     F .text	0000002c os_dev_initialize_all
000201c0 g     F .text	00000026 ble_mqueue_get
00026ab8 g     F .text	000000d4 tc_cmac_update
000172e4 g     F .text	00000034 ble_ll_rfmgmt_sched_changed
00013e40 g     F .text	00000088 ble_ll_conn_module_init
0000fb70 g     F .text	0000003a modlog_printf
00018e88 g     F .text	00000074 ble_ll_sched_rmv_elem
00020128 g     F .text	00000030 ble_hs_misc_conn_chan_find
0001cf52 g     F .text	0000000c ble_gatts_indicate_fail_notconn
0001f08a g     F .text	0000001c ble_hs_atomic_first_conn_handle
00019818 g     F .text	00000004 ble_phy_get_cur_phy
20000120 g     O .data	00000008 g_os_sleep_list
0002a244 g     F .text	00000058 jrand48
000231d8 g     F .text	000000ea ble_sm_sc_dhkey_check_exec
00022ad4 g     F .text	000000b4 ble_sm_sc_io_action
0002028c g     F .text	00000028 ble_hs_pvcy_ensure_started
00015844 g     F .text	0000038a ble_ll_ctrl_rx_pdu
00028b84 g     F .text	0000000c hal_bsp_init
0001d296 g     F .text	0000000c ble_gattc_connection_broken
0000c964 g     F .text	00000048 os_pkg_init
00019c88 g     F .text	0000004c ble_phy_setchan
200040d0 g     O .bss	00000004 g_ble_ll_conn_active_list
00014170 g     F .text	000000ec ble_ll_conn_num_comp_pkts_event_send
000169f4 g     F .text	0000001c ble_ll_rand_start
0001b360 g     F .text	00000064 ble_gap_rx_disconn_complete
0000d160 g     F .text	00000010 os_sanity_check_init
000170dc g     F .text	0000001c ble_ll_resolv_list_reset
0001912c g     F .text	0000002c ble_ll_whitelist_clear
0001f1a4 g     F .text	00000080 ble_hs_conn_alloc
0001f6f8 g     F .text	00000030 ble_hs_hci_rx_evt
0002a7a8 g     F .text	0000005c hal_uart_init
00028aec g     F .text	00000008 cbor_value_to_pretty_advance
00013180 g     F .text	0000002c ble_ll_conn_event_halt
0000ff90 g     F .text	00000022 stats_init
0002a1ac g     F .text	00000008 vfprintf
00027afc g     F .text	00000048 uECC_valid_public_key
00017000 g     F .text	00000034 ble_ll_resolv_gen_rpa
20003afc g     O .bss	00000050 g_os_main_task
00029bac g     F .text	0000002c free



Disassembly of section .text:

0000c020 <__isr_vector>:
    c020:	20040000 	.word	0x20040000
    c024:	0000c121 	.word	0x0000c121
    c028:	0000c17d 	.word	0x0000c17d
    c02c:	0000c17f 	.word	0x0000c17f
    c030:	0000c181 	.word	0x0000c181
    c034:	0000c183 	.word	0x0000c183
    c038:	0000c185 	.word	0x0000c185
	...
    c04c:	0000e37b 	.word	0x0000e37b
    c050:	0000c189 	.word	0x0000c189
    c054:	00000000 	.word	0x00000000
    c058:	0000e3c1 	.word	0x0000e3c1
    c05c:	0000e3eb 	.word	0x0000e3eb
    c060:	0000c18f 	.word	0x0000c18f
    c064:	0000c18f 	.word	0x0000c18f
    c068:	0000c18f 	.word	0x0000c18f
    c06c:	0000c18f 	.word	0x0000c18f
    c070:	0000c18f 	.word	0x0000c18f
    c074:	0000c18f 	.word	0x0000c18f
    c078:	0000c18f 	.word	0x0000c18f
    c07c:	0000c18f 	.word	0x0000c18f
    c080:	0000c18f 	.word	0x0000c18f
    c084:	0000c18f 	.word	0x0000c18f
    c088:	0000c18f 	.word	0x0000c18f
    c08c:	0000c18f 	.word	0x0000c18f
    c090:	0000c18f 	.word	0x0000c18f
    c094:	0000c18f 	.word	0x0000c18f
    c098:	0000c18f 	.word	0x0000c18f
    c09c:	0000c18f 	.word	0x0000c18f
    c0a0:	0000c18f 	.word	0x0000c18f
    c0a4:	0000c18f 	.word	0x0000c18f
    c0a8:	0000c18f 	.word	0x0000c18f
    c0ac:	0000c18f 	.word	0x0000c18f
    c0b0:	0000c18f 	.word	0x0000c18f
    c0b4:	0000c18f 	.word	0x0000c18f
    c0b8:	0000c18f 	.word	0x0000c18f
    c0bc:	0000c18f 	.word	0x0000c18f
    c0c0:	0000c18f 	.word	0x0000c18f
    c0c4:	0000c18f 	.word	0x0000c18f
    c0c8:	0000c18f 	.word	0x0000c18f
    c0cc:	0000c18f 	.word	0x0000c18f
    c0d0:	0000c18f 	.word	0x0000c18f
    c0d4:	0000c18f 	.word	0x0000c18f
	...
    c0e0:	0000c18f 	.word	0x0000c18f
    c0e4:	0000c18f 	.word	0x0000c18f
    c0e8:	0000c18f 	.word	0x0000c18f
    c0ec:	0000c18f 	.word	0x0000c18f
    c0f0:	0000c18f 	.word	0x0000c18f
    c0f4:	0000c18f 	.word	0x0000c18f
    c0f8:	0000c18f 	.word	0x0000c18f
    c0fc:	0000c18f 	.word	0x0000c18f
    c100:	0000c18f 	.word	0x0000c18f
    c104:	0000c18f 	.word	0x0000c18f
    c108:	0000c18f 	.word	0x0000c18f
    c10c:	00000000 	.word	0x00000000
    c110:	0000c18f 	.word	0x0000c18f
	...
    c11c:	0000c18f 	.word	0x0000c18f

0000c120 <Reset_Handler>:
    .type    Reset_Handler, %function
Reset_Handler:
    .fnstart

    /* Clear BSS */
    mov     r0, #0
    c120:	f04f 0000 	mov.w	r0, #0
    ldr     r2, =__bss_start__
    c124:	4a0c      	ldr	r2, [pc, #48]	; (c158 <.bss_zero_loop+0x30>)
    ldr     r3, =__bss_end__
    c126:	4b0d      	ldr	r3, [pc, #52]	; (c15c <.bss_zero_loop+0x34>)

0000c128 <.bss_zero_loop>:
.bss_zero_loop:
    cmp     r2, r3
    c128:	429a      	cmp	r2, r3
    itt     lt
    c12a:	bfbc      	itt	lt
    strlt   r0, [r2], #4
    c12c:	f842 0b04 	strlt.w	r0, [r2], #4
    blt    .bss_zero_loop
    c130:	e7fa      	blt.n	c128 <.bss_zero_loop>
 *      linker script.
 *      __etext: End of code section, i.e., begin of data sections to copy from.
 *      __data_start__/__data_end__: RAM address range that data should be
 *      copied to. Both must be aligned to 4 bytes boundary.  */

    ldr    r1, =__etext
    c132:	490b      	ldr	r1, [pc, #44]	; (c160 <.bss_zero_loop+0x38>)
    ldr    r2, =__data_start__
    c134:	4a0b      	ldr	r2, [pc, #44]	; (c164 <.bss_zero_loop+0x3c>)
    ldr    r3, =__data_end__
    c136:	4b0c      	ldr	r3, [pc, #48]	; (c168 <.bss_zero_loop+0x40>)

    subs    r3, r2
    c138:	1a9b      	subs	r3, r3, r2
    ble     .LC0
    c13a:	dd03      	ble.n	c144 <.bss_zero_loop+0x1c>

.LC1:
    subs    r3, 4
    c13c:	3b04      	subs	r3, #4
    ldr    r0, [r1,r3]
    c13e:	58c8      	ldr	r0, [r1, r3]
    str    r0, [r2,r3]
    c140:	50d0      	str	r0, [r2, r3]
    bgt    .LC1
    c142:	dcfb      	bgt.n	c13c <.bss_zero_loop+0x14>

.LC0:

    LDR     R0, =__HeapBase
    c144:	4809      	ldr	r0, [pc, #36]	; (c16c <.bss_zero_loop+0x44>)
    LDR     R1, =__HeapLimit
    c146:	490a      	ldr	r1, [pc, #40]	; (c170 <.bss_zero_loop+0x48>)
    BL      _sbrkInit
    c148:	f000 f822 	bl	c190 <_sbrkInit>

    LDR     R0, =SystemInit
    c14c:	4809      	ldr	r0, [pc, #36]	; (c174 <.bss_zero_loop+0x4c>)
    BLX     R0
    c14e:	4780      	blx	r0

    BL      hal_system_init
    c150:	f000 f844 	bl	c1dc <hal_system_init>

    LDR     R0, =_start
    c154:	4808      	ldr	r0, [pc, #32]	; (c178 <.bss_zero_loop+0x50>)
    BX      R0
    c156:	4700      	bx	r0
    ldr     r2, =__bss_start__
    c158:	20000248 	.word	0x20000248
    ldr     r3, =__bss_end__
    c15c:	200047c0 	.word	0x200047c0
    ldr    r1, =__etext
    c160:	0002be08 	.word	0x0002be08
    ldr    r2, =__data_start__
    c164:	20000100 	.word	0x20000100
    ldr    r3, =__data_end__
    c168:	20000224 	.word	0x20000224
    LDR     R0, =__HeapBase
    c16c:	200047c0 	.word	0x200047c0
    LDR     R1, =__HeapLimit
    c170:	2003fe50 	.word	0x2003fe50
    LDR     R0, =SystemInit
    c174:	0000c359 	.word	0x0000c359
    LDR     R0, =_start
    c178:	0000c45d 	.word	0x0000c45d

0000c17c <NMI_Handler>:
/* Dummy Exception Handlers (infinite loops which can be modified) */

    .weak   NMI_Handler
    .type   NMI_Handler, %function
NMI_Handler:
    B       .
    c17c:	e7fe      	b.n	c17c <NMI_Handler>

0000c17e <HardFault_Handler>:


    .weak   HardFault_Handler
    .type   HardFault_Handler, %function
HardFault_Handler:
    B       .
    c17e:	e7fe      	b.n	c17e <HardFault_Handler>

0000c180 <MemoryManagement_Handler>:


    .weak   MemoryManagement_Handler
    .type   MemoryManagement_Handler, %function
MemoryManagement_Handler:
    B       .
    c180:	e7fe      	b.n	c180 <MemoryManagement_Handler>

0000c182 <BusFault_Handler>:


    .weak   BusFault_Handler
    .type   BusFault_Handler, %function
BusFault_Handler:
    B       .
    c182:	e7fe      	b.n	c182 <BusFault_Handler>

0000c184 <UsageFault_Handler>:


    .weak   UsageFault_Handler
    .type   UsageFault_Handler, %function
UsageFault_Handler:
    B       .
    c184:	e7fe      	b.n	c184 <UsageFault_Handler>


    .weak   SVC_Handler
    .type   SVC_Handler, %function
SVC_Handler:
    B       .
    c186:	e7fe      	b.n	c186 <UsageFault_Handler+0x2>

0000c188 <DebugMon_Handler>:


    .weak   DebugMon_Handler
    .type   DebugMon_Handler, %function
DebugMon_Handler:
    b       .
    c188:	e7fe      	b.n	c188 <DebugMon_Handler>


    .weak   PendSV_Handler
    .type   PendSV_Handler, %function
PendSV_Handler:
    B       .
    c18a:	e7fe      	b.n	c18a <DebugMon_Handler+0x2>


    .weak   SysTick_Handler
    .type   SysTick_Handler, %function
SysTick_Handler:
    B       .
    c18c:	e7fe      	b.n	c18c <DebugMon_Handler+0x4>

0000c18e <Default_Handler>:
/* IRQ Handlers */

    .globl  Default_Handler
    .type   Default_Handler, %function
Default_Handler:
    B       .
    c18e:	e7fe      	b.n	c18e <Default_Handler>

0000c190 <_sbrkInit>:
static char *sbrkLimit __attribute__ ((section (".data")));
static char *brk __attribute__ ((section (".data")));

void
_sbrkInit(char *base, char *limit) {
    sbrkBase = base;
    c190:	4b02      	ldr	r3, [pc, #8]	; (c19c <_sbrkInit+0xc>)
    c192:	6018      	str	r0, [r3, #0]
    sbrkLimit = limit;
    c194:	6059      	str	r1, [r3, #4]
    brk = base;
    c196:	6098      	str	r0, [r3, #8]
}
    c198:	4770      	bx	lr
    c19a:	bf00      	nop
    c19c:	20000100 	.word	0x20000100

0000c1a0 <_sbrk>:
void *
_sbrk(int incr)
{
    void *prev_brk;

    if (incr < 0) {
    c1a0:	1e03      	subs	r3, r0, #0
    c1a2:	db09      	blt.n	c1b8 <_sbrk+0x18>
            prev_brk = brk;
            brk -= incr;
        }
    } else {
        /* Allocating memory from the heap. */
        if (sbrkLimit - brk >= incr) {
    c1a4:	4a0c      	ldr	r2, [pc, #48]	; (c1d8 <_sbrk+0x38>)
    c1a6:	6890      	ldr	r0, [r2, #8]
    c1a8:	6852      	ldr	r2, [r2, #4]
    c1aa:	1a12      	subs	r2, r2, r0
    c1ac:	429a      	cmp	r2, r3
    c1ae:	db0f      	blt.n	c1d0 <_sbrk+0x30>
            prev_brk = brk;
            brk += incr;
    c1b0:	4403      	add	r3, r0
    c1b2:	4a09      	ldr	r2, [pc, #36]	; (c1d8 <_sbrk+0x38>)
    c1b4:	6093      	str	r3, [r2, #8]
    c1b6:	4770      	bx	lr
        if (brk - incr < sbrkBase) {
    c1b8:	4a07      	ldr	r2, [pc, #28]	; (c1d8 <_sbrk+0x38>)
    c1ba:	6890      	ldr	r0, [r2, #8]
    c1bc:	4403      	add	r3, r0
    c1be:	6812      	ldr	r2, [r2, #0]
    c1c0:	4293      	cmp	r3, r2
    c1c2:	d302      	bcc.n	c1ca <_sbrk+0x2a>
            brk -= incr;
    c1c4:	4a04      	ldr	r2, [pc, #16]	; (c1d8 <_sbrk+0x38>)
    c1c6:	6093      	str	r3, [r2, #8]
    c1c8:	4770      	bx	lr
            prev_brk = (void *)-1;
    c1ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c1ce:	4770      	bx	lr
        } else {
            prev_brk = (void *)-1;
    c1d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        }
    }

    return prev_brk;
}
    c1d4:	4770      	bx	lr
    c1d6:	bf00      	nop
    c1d8:	20000100 	.word	0x20000100

0000c1dc <hal_system_init>:
 */
void
hal_system_init(void)
{
#if MYNEWT_VAL(MCU_DCDC_ENABLED)
    NRF_POWER->DCDCEN = 1;
    c1dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    c1e0:	2201      	movs	r2, #1
    c1e2:	f8c3 2578 	str.w	r2, [r3, #1400]	; 0x578
#endif
}
    c1e6:	4770      	bx	lr

0000c1e8 <hal_debugger_connected>:
}

int
hal_debugger_connected(void)
{
    return CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk;
    c1e8:	4b02      	ldr	r3, [pc, #8]	; (c1f4 <hal_debugger_connected+0xc>)
    c1ea:	6818      	ldr	r0, [r3, #0]
}
    c1ec:	f000 0001 	and.w	r0, r0, #1
    c1f0:	4770      	bx	lr
    c1f2:	bf00      	nop
    c1f4:	e000edf0 	.word	0xe000edf0

0000c1f8 <hal_system_reset>:
{
    c1f8:	b508      	push	{r3, lr}
        HAL_DEBUG_BREAK();
    c1fa:	f7ff fff5 	bl	c1e8 <hal_debugger_connected>
    c1fe:	b100      	cbz	r0, c202 <hal_system_reset+0xa>

static inline void
hal_debug_break(void)
{
#if !MYNEWT_VAL(MCU_DEBUG_IGNORE_BKPT)
    __BKPT(1);
    c200:	be01      	bkpt	0x0001
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    c202:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    c206:	4905      	ldr	r1, [pc, #20]	; (c21c <hal_system_reset+0x24>)
    c208:	68ca      	ldr	r2, [r1, #12]
    c20a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    c20e:	4b04      	ldr	r3, [pc, #16]	; (c220 <hal_system_reset+0x28>)
    c210:	4313      	orrs	r3, r2
    c212:	60cb      	str	r3, [r1, #12]
    c214:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    c218:	bf00      	nop
    c21a:	e7fd      	b.n	c218 <hal_system_reset+0x20>
    c21c:	e000ed00 	.word	0xe000ed00
    c220:	05fa0004 	.word	0x05fa0004

0000c224 <hal_system_clock_start>:
        }
    }
#endif

    /* Check if this clock source is already running */
    if ((NRF_CLOCK->LFCLKSTAT & regmsk) != regval) {
    c224:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    c228:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
    c22c:	4b0f      	ldr	r3, [pc, #60]	; (c26c <hal_system_clock_start+0x48>)
    c22e:	4013      	ands	r3, r2
    c230:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
    c234:	d018      	beq.n	c268 <hal_system_clock_start+0x44>
        NRF_CLOCK->TASKS_LFCLKSTOP = 1;
    c236:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    c23a:	2201      	movs	r2, #1
    c23c:	60da      	str	r2, [r3, #12]
        NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    c23e:	2100      	movs	r1, #0
    c240:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
        NRF_CLOCK->LFCLKSRC = clksrc;
    c244:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
        NRF_CLOCK->TASKS_LFCLKSTART = 1;
    c248:	609a      	str	r2, [r3, #8]

        /* Wait here till started! */
        while (1) {
            if (NRF_CLOCK->EVENTS_LFCLKSTARTED) {
    c24a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    c24e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    c252:	2b00      	cmp	r3, #0
    c254:	d0f9      	beq.n	c24a <hal_system_clock_start+0x26>
                if ((NRF_CLOCK->LFCLKSTAT & regmsk) == regval) {
    c256:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    c25a:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
    c25e:	4b03      	ldr	r3, [pc, #12]	; (c26c <hal_system_clock_start+0x48>)
    c260:	4013      	ands	r3, r2
    c262:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
    c266:	d1f0      	bne.n	c24a <hal_system_clock_start+0x26>
                }
            }
        }
    }
#endif
}
    c268:	4770      	bx	lr
    c26a:	bf00      	nop
    c26c:	00010003 	.word	0x00010003

0000c270 <errata_36>:
#endif

#ifdef NRF52840_XXAA
static bool errata_36(void)
{
	if ((*(uint32_t *)0x10000130ul == 0x8ul) &&
    c270:	4b06      	ldr	r3, [pc, #24]	; (c28c <errata_36+0x1c>)
    c272:	681b      	ldr	r3, [r3, #0]
    c274:	2b08      	cmp	r3, #8
    c276:	d001      	beq.n	c27c <errata_36+0xc>
			(*(uint32_t *)0x10000134ul == 0x0ul)) {
		return true;
	}

	return false;
    c278:	2000      	movs	r0, #0
    c27a:	4770      	bx	lr
			(*(uint32_t *)0x10000134ul == 0x0ul)) {
    c27c:	4b04      	ldr	r3, [pc, #16]	; (c290 <errata_36+0x20>)
    c27e:	681b      	ldr	r3, [r3, #0]
	if ((*(uint32_t *)0x10000130ul == 0x8ul) &&
    c280:	b10b      	cbz	r3, c286 <errata_36+0x16>
	return false;
    c282:	2000      	movs	r0, #0
    c284:	4770      	bx	lr
		return true;
    c286:	2001      	movs	r0, #1
}
    c288:	4770      	bx	lr
    c28a:	bf00      	nop
    c28c:	10000130 	.word	0x10000130
    c290:	10000134 	.word	0x10000134

0000c294 <errata_98>:


static bool errata_98(void)
{
	if ((*(uint32_t *)0x10000130ul == 0x8ul) &&
    c294:	4b06      	ldr	r3, [pc, #24]	; (c2b0 <errata_98+0x1c>)
    c296:	681b      	ldr	r3, [r3, #0]
    c298:	2b08      	cmp	r3, #8
    c29a:	d001      	beq.n	c2a0 <errata_98+0xc>
			(*(uint32_t *)0x10000134ul == 0x0ul)) {
		return true;
	}

	return false;
    c29c:	2000      	movs	r0, #0
    c29e:	4770      	bx	lr
			(*(uint32_t *)0x10000134ul == 0x0ul)) {
    c2a0:	4b04      	ldr	r3, [pc, #16]	; (c2b4 <errata_98+0x20>)
    c2a2:	681b      	ldr	r3, [r3, #0]
	if ((*(uint32_t *)0x10000130ul == 0x8ul) &&
    c2a4:	b10b      	cbz	r3, c2aa <errata_98+0x16>
	return false;
    c2a6:	2000      	movs	r0, #0
    c2a8:	4770      	bx	lr
		return true;
    c2aa:	2001      	movs	r0, #1
}
    c2ac:	4770      	bx	lr
    c2ae:	bf00      	nop
    c2b0:	10000130 	.word	0x10000130
    c2b4:	10000134 	.word	0x10000134

0000c2b8 <errata_103>:


static bool errata_103(void)
{
	if ((*(uint32_t *)0x10000130ul == 0x8ul) &&
    c2b8:	4b06      	ldr	r3, [pc, #24]	; (c2d4 <errata_103+0x1c>)
    c2ba:	681b      	ldr	r3, [r3, #0]
    c2bc:	2b08      	cmp	r3, #8
    c2be:	d001      	beq.n	c2c4 <errata_103+0xc>
			(*(uint32_t *)0x10000134ul == 0x0ul)) {
		return true;
	}

	return false;
    c2c0:	2000      	movs	r0, #0
    c2c2:	4770      	bx	lr
			(*(uint32_t *)0x10000134ul == 0x0ul)) {
    c2c4:	4b04      	ldr	r3, [pc, #16]	; (c2d8 <errata_103+0x20>)
    c2c6:	681b      	ldr	r3, [r3, #0]
	if ((*(uint32_t *)0x10000130ul == 0x8ul) &&
    c2c8:	b10b      	cbz	r3, c2ce <errata_103+0x16>
	return false;
    c2ca:	2000      	movs	r0, #0
    c2cc:	4770      	bx	lr
		return true;
    c2ce:	2001      	movs	r0, #1
}
    c2d0:	4770      	bx	lr
    c2d2:	bf00      	nop
    c2d4:	10000130 	.word	0x10000130
    c2d8:	10000134 	.word	0x10000134

0000c2dc <errata_115>:


static bool errata_115(void)
{
	if ((*(uint32_t *)0x10000130ul == 0x8ul) &&
    c2dc:	4b06      	ldr	r3, [pc, #24]	; (c2f8 <errata_115+0x1c>)
    c2de:	681b      	ldr	r3, [r3, #0]
    c2e0:	2b08      	cmp	r3, #8
    c2e2:	d001      	beq.n	c2e8 <errata_115+0xc>
			(*(uint32_t *)0x10000134ul == 0x0ul)) {
		return true;
	}

	return false;
    c2e4:	2000      	movs	r0, #0
    c2e6:	4770      	bx	lr
			(*(uint32_t *)0x10000134ul == 0x0ul)) {
    c2e8:	4b04      	ldr	r3, [pc, #16]	; (c2fc <errata_115+0x20>)
    c2ea:	681b      	ldr	r3, [r3, #0]
	if ((*(uint32_t *)0x10000130ul == 0x8ul) &&
    c2ec:	b10b      	cbz	r3, c2f2 <errata_115+0x16>
	return false;
    c2ee:	2000      	movs	r0, #0
    c2f0:	4770      	bx	lr
		return true;
    c2f2:	2001      	movs	r0, #1
}
    c2f4:	4770      	bx	lr
    c2f6:	bf00      	nop
    c2f8:	10000130 	.word	0x10000130
    c2fc:	10000134 	.word	0x10000134

0000c300 <errata_120>:


static bool errata_120(void)
{
	if ((*(uint32_t *)0x10000130ul == 0x8ul) &&
    c300:	4b06      	ldr	r3, [pc, #24]	; (c31c <errata_120+0x1c>)
    c302:	681b      	ldr	r3, [r3, #0]
    c304:	2b08      	cmp	r3, #8
    c306:	d001      	beq.n	c30c <errata_120+0xc>
			(*(uint32_t *)0x10000134ul == 0x0ul)) {
		return true;
	}

	return false;
    c308:	2000      	movs	r0, #0
    c30a:	4770      	bx	lr
			(*(uint32_t *)0x10000134ul == 0x0ul)) {
    c30c:	4b04      	ldr	r3, [pc, #16]	; (c320 <errata_120+0x20>)
    c30e:	681b      	ldr	r3, [r3, #0]
	if ((*(uint32_t *)0x10000130ul == 0x8ul) &&
    c310:	b10b      	cbz	r3, c316 <errata_120+0x16>
	return false;
    c312:	2000      	movs	r0, #0
    c314:	4770      	bx	lr
		return true;
    c316:	2001      	movs	r0, #1
}
    c318:	4770      	bx	lr
    c31a:	bf00      	nop
    c31c:	10000130 	.word	0x10000130
    c320:	10000134 	.word	0x10000134

0000c324 <errata_121>:

static bool errata_121(void)
{
	if ((*(uint32_t *)0x10000130ul == 0x8ul) &&
    c324:	4b06      	ldr	r3, [pc, #24]	; (c340 <errata_121+0x1c>)
    c326:	681b      	ldr	r3, [r3, #0]
    c328:	2b08      	cmp	r3, #8
    c32a:	d001      	beq.n	c330 <errata_121+0xc>
			(*(uint32_t *)0x10000134ul == 0x0ul)) {
		return true;
	}

	return false;
    c32c:	2000      	movs	r0, #0
    c32e:	4770      	bx	lr
			(*(uint32_t *)0x10000134ul == 0x0ul)) {
    c330:	4b04      	ldr	r3, [pc, #16]	; (c344 <errata_121+0x20>)
    c332:	681b      	ldr	r3, [r3, #0]
	if ((*(uint32_t *)0x10000130ul == 0x8ul) &&
    c334:	b10b      	cbz	r3, c33a <errata_121+0x16>
	return false;
    c336:	2000      	movs	r0, #0
    c338:	4770      	bx	lr
		return true;
    c33a:	2001      	movs	r0, #1
}
    c33c:	4770      	bx	lr
    c33e:	bf00      	nop
    c340:	10000130 	.word	0x10000130
    c344:	10000134 	.word	0x10000134

0000c348 <SystemCoreClockUpdate>:
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    c348:	4b01      	ldr	r3, [pc, #4]	; (c350 <SystemCoreClockUpdate+0x8>)
    c34a:	4a02      	ldr	r2, [pc, #8]	; (c354 <SystemCoreClockUpdate+0xc>)
    c34c:	601a      	str	r2, [r3, #0]
}
    c34e:	4770      	bx	lr
    c350:	2000010c 	.word	0x2000010c
    c354:	03d09000 	.word	0x03d09000

0000c358 <SystemInit>:
{
    c358:	b508      	push	{r3, lr}
        if (errata_36()){
    c35a:	f7ff ff89 	bl	c270 <errata_36>
    c35e:	b140      	cbz	r0, c372 <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    c360:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    c364:	2200      	movs	r2, #0
    c366:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    c36a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    c36e:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
        if (errata_98()){
    c372:	f7ff ff8f 	bl	c294 <errata_98>
    c376:	b110      	cbz	r0, c37e <SystemInit+0x26>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    c378:	4b2d      	ldr	r3, [pc, #180]	; (c430 <SystemInit+0xd8>)
    c37a:	4a2e      	ldr	r2, [pc, #184]	; (c434 <SystemInit+0xdc>)
    c37c:	601a      	str	r2, [r3, #0]
        if (errata_103()){
    c37e:	f7ff ff9b 	bl	c2b8 <errata_103>
    c382:	b118      	cbz	r0, c38c <SystemInit+0x34>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    c384:	4b2c      	ldr	r3, [pc, #176]	; (c438 <SystemInit+0xe0>)
    c386:	22fb      	movs	r2, #251	; 0xfb
    c388:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
        if (errata_115()){
    c38c:	f7ff ffa6 	bl	c2dc <errata_115>
    c390:	b148      	cbz	r0, c3a6 <SystemInit+0x4e>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    c392:	492a      	ldr	r1, [pc, #168]	; (c43c <SystemInit+0xe4>)
    c394:	680b      	ldr	r3, [r1, #0]
    c396:	f023 030f 	bic.w	r3, r3, #15
    c39a:	4a29      	ldr	r2, [pc, #164]	; (c440 <SystemInit+0xe8>)
    c39c:	6812      	ldr	r2, [r2, #0]
    c39e:	f002 020f 	and.w	r2, r2, #15
    c3a2:	4313      	orrs	r3, r2
    c3a4:	600b      	str	r3, [r1, #0]
        if (errata_120()){
    c3a6:	f7ff ffab 	bl	c300 <errata_120>
    c3aa:	b118      	cbz	r0, c3b4 <SystemInit+0x5c>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    c3ac:	4b25      	ldr	r3, [pc, #148]	; (c444 <SystemInit+0xec>)
    c3ae:	f44f 7200 	mov.w	r2, #512	; 0x200
    c3b2:	601a      	str	r2, [r3, #0]
        if (errata_121()){
    c3b4:	f7ff ffb6 	bl	c324 <errata_121>
    c3b8:	b110      	cbz	r0, c3c0 <SystemInit+0x68>
            *(volatile uint32_t *)0x40029600ul = 0x00040400ul;
    c3ba:	4b23      	ldr	r3, [pc, #140]	; (c448 <SystemInit+0xf0>)
    c3bc:	4a23      	ldr	r2, [pc, #140]	; (c44c <SystemInit+0xf4>)
    c3be:	601a      	str	r2, [r3, #0]
            if ((NRF_UICR->NFCPINS & UICR_NFCPINS_PROTECT_Msk) == (UICR_NFCPINS_PROTECT_NFC << UICR_NFCPINS_PROTECT_Pos)){
    c3c0:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    c3c4:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
    c3c8:	f013 0f01 	tst.w	r3, #1
    c3cc:	d104      	bne.n	c3d8 <SystemInit+0x80>
    SystemCoreClockUpdate();
    c3ce:	f7ff ffbb 	bl	c348 <SystemCoreClockUpdate>
    NVIC_Relocate();
    c3d2:	f000 f929 	bl	c628 <NVIC_Relocate>
}
    c3d6:	bd08      	pop	{r3, pc}
                NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
    c3d8:	4b1d      	ldr	r3, [pc, #116]	; (c450 <SystemInit+0xf8>)
    c3da:	2201      	movs	r2, #1
    c3dc:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
                while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    c3e0:	4b1b      	ldr	r3, [pc, #108]	; (c450 <SystemInit+0xf8>)
    c3e2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    c3e6:	2b00      	cmp	r3, #0
    c3e8:	d0fa      	beq.n	c3e0 <SystemInit+0x88>
                NRF_UICR->NFCPINS &= ~UICR_NFCPINS_PROTECT_Msk;
    c3ea:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
    c3ee:	f8d2 320c 	ldr.w	r3, [r2, #524]	; 0x20c
    c3f2:	f023 0301 	bic.w	r3, r3, #1
    c3f6:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
                while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    c3fa:	4b15      	ldr	r3, [pc, #84]	; (c450 <SystemInit+0xf8>)
    c3fc:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    c400:	2b00      	cmp	r3, #0
    c402:	d0fa      	beq.n	c3fa <SystemInit+0xa2>
                NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
    c404:	4b12      	ldr	r3, [pc, #72]	; (c450 <SystemInit+0xf8>)
    c406:	2200      	movs	r2, #0
    c408:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
                while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    c40c:	4b10      	ldr	r3, [pc, #64]	; (c450 <SystemInit+0xf8>)
    c40e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    c412:	2b00      	cmp	r3, #0
    c414:	d0fa      	beq.n	c40c <SystemInit+0xb4>
    c416:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    c41a:	490e      	ldr	r1, [pc, #56]	; (c454 <SystemInit+0xfc>)
    c41c:	68ca      	ldr	r2, [r1, #12]
    c41e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    c422:	4b0d      	ldr	r3, [pc, #52]	; (c458 <SystemInit+0x100>)
    c424:	4313      	orrs	r3, r2
    c426:	60cb      	str	r3, [r1, #12]
    c428:	f3bf 8f4f 	dsb	sy
    __NOP();
    c42c:	bf00      	nop
    c42e:	e7fd      	b.n	c42c <SystemInit+0xd4>
    c430:	4000568c 	.word	0x4000568c
    c434:	00038148 	.word	0x00038148
    c438:	4000f000 	.word	0x4000f000
    c43c:	40000ee4 	.word	0x40000ee4
    c440:	10000258 	.word	0x10000258
    c444:	40029640 	.word	0x40029640
    c448:	40029600 	.word	0x40029600
    c44c:	00040400 	.word	0x00040400
    c450:	4001e000 	.word	0x4001e000
    c454:	e000ed00 	.word	0xe000ed00
    c458:	05fa0004 	.word	0x05fa0004

0000c45c <_start>:

/*
 * Rudimentary startup function.
 */
void _start(void)
{
    c45c:	b508      	push	{r3, lr}
    int rc;

    rc = main(0, NULL);
    exit(rc);
#else
    os_init(main);
    c45e:	4803      	ldr	r0, [pc, #12]	; (c46c <_start+0x10>)
    c460:	f000 fa06 	bl	c870 <os_init>
    os_start();
    c464:	f000 fa6c 	bl	c940 <os_start>
#endif
}
    c468:	bd08      	pop	{r3, pc}
    c46a:	bf00      	nop
    c46c:	0000c5a9 	.word	0x0000c5a9

0000c470 <_init>:

void
_init(void)
{
}
    c470:	4770      	bx	lr
	...

0000c474 <on_reset>:
    advertise();
}

static void
on_reset(int reason)
{
    c474:	b508      	push	{r3, lr}
    MODLOG_DFLT(INFO, "Resetting state; reason=%d\n", reason);
    c476:	4603      	mov	r3, r0
    c478:	4a02      	ldr	r2, [pc, #8]	; (c484 <on_reset+0x10>)
    c47a:	2101      	movs	r1, #1
    c47c:	2000      	movs	r0, #0
    c47e:	f003 fb77 	bl	fb70 <modlog_printf>
}
    c482:	bd08      	pop	{r3, pc}
    c484:	0002acf0 	.word	0x0002acf0

0000c488 <set_ble_addr>:
{
    c488:	b500      	push	{lr}
    c48a:	b083      	sub	sp, #12
    rc = ble_hs_id_gen_rnd(1, &addr);
    c48c:	4669      	mov	r1, sp
    c48e:	2001      	movs	r0, #1
    c490:	f013 fd12 	bl	1feb8 <ble_hs_id_gen_rnd>
    assert(rc == 0);
    c494:	b938      	cbnz	r0, c4a6 <set_ble_addr+0x1e>
    rc = ble_hs_id_set_rnd(addr.val);
    c496:	f10d 0001 	add.w	r0, sp, #1
    c49a:	f013 fd27 	bl	1feec <ble_hs_id_set_rnd>
    assert(rc == 0);
    c49e:	b960      	cbnz	r0, c4ba <set_ble_addr+0x32>
}
    c4a0:	b003      	add	sp, #12
    c4a2:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
    c4a6:	f7ff fe9f 	bl	c1e8 <hal_debugger_connected>
    c4aa:	b100      	cbz	r0, c4ae <set_ble_addr+0x26>
    c4ac:	be01      	bkpt	0x0001
    c4ae:	2300      	movs	r3, #0
    c4b0:	461a      	mov	r2, r3
    c4b2:	4619      	mov	r1, r3
    c4b4:	4618      	mov	r0, r3
    c4b6:	f000 f8d1 	bl	c65c <__assert_func>
    assert(rc == 0);
    c4ba:	f7ff fe95 	bl	c1e8 <hal_debugger_connected>
    c4be:	b100      	cbz	r0, c4c2 <set_ble_addr+0x3a>
    c4c0:	be01      	bkpt	0x0001
    c4c2:	2300      	movs	r3, #0
    c4c4:	461a      	mov	r2, r3
    c4c6:	4619      	mov	r1, r3
    c4c8:	4618      	mov	r0, r3
    c4ca:	f000 f8c7 	bl	c65c <__assert_func>
	...

0000c4d0 <advertise>:
{
    c4d0:	b510      	push	{r4, lr}
    c4d2:	b09e      	sub	sp, #120	; 0x78
    memset(&adv_params, 0, sizeof(adv_params));
    c4d4:	2100      	movs	r1, #0
    c4d6:	911b      	str	r1, [sp, #108]	; 0x6c
    c4d8:	911c      	str	r1, [sp, #112]	; 0x70
    c4da:	f8ad 1074 	strh.w	r1, [sp, #116]	; 0x74
    adv_params.disc_mode = BLE_GAP_DISC_MODE_GEN;
    c4de:	2402      	movs	r4, #2
    c4e0:	f88d 406d 	strb.w	r4, [sp, #109]	; 0x6d
    memset(&fields, 0, sizeof(fields));
    c4e4:	2260      	movs	r2, #96	; 0x60
    c4e6:	a803      	add	r0, sp, #12
    c4e8:	f001 ffea 	bl	e4c0 <memset>
    fields.flags = BLE_HS_ADV_F_DISC_GEN;
    c4ec:	f88d 400c 	strb.w	r4, [sp, #12]
    fields.tx_pwr_lvl_is_present = 1;
    c4f0:	2301      	movs	r3, #1
    c4f2:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    fields.tx_pwr_lvl = BLE_HS_ADV_TX_PWR_LVL_AUTO;
    c4f6:	2380      	movs	r3, #128	; 0x80
    c4f8:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
    fields.name = (uint8_t *)device_name;
    c4fc:	4b18      	ldr	r3, [pc, #96]	; (c560 <advertise+0x90>)
    c4fe:	930a      	str	r3, [sp, #40]	; 0x28
    fields.name_len = strlen(device_name);
    c500:	230d      	movs	r3, #13
    c502:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    fields.name_is_complete = 1;
    c506:	2301      	movs	r3, #1
    c508:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
    rc = ble_gap_adv_set_fields(&fields);
    c50c:	a803      	add	r0, sp, #12
    c50e:	f00e fcf7 	bl	1af00 <ble_gap_adv_set_fields>
    assert(rc == 0);
    c512:	b988      	cbnz	r0, c538 <advertise+0x68>
    MODLOG_DFLT(INFO, "Starting advertising...\n");
    c514:	4a13      	ldr	r2, [pc, #76]	; (c564 <advertise+0x94>)
    c516:	2101      	movs	r1, #1
    c518:	2000      	movs	r0, #0
    c51a:	f003 fb29 	bl	fb70 <modlog_printf>
    rc = ble_gap_adv_start(BLE_OWN_ADDR_RANDOM, NULL, 10000,
    c51e:	2100      	movs	r1, #0
    c520:	9101      	str	r1, [sp, #4]
    c522:	4b11      	ldr	r3, [pc, #68]	; (c568 <advertise+0x98>)
    c524:	9300      	str	r3, [sp, #0]
    c526:	ab1b      	add	r3, sp, #108	; 0x6c
    c528:	f242 7210 	movw	r2, #10000	; 0x2710
    c52c:	2001      	movs	r0, #1
    c52e:	f00e fc35 	bl	1ad9c <ble_gap_adv_start>
    assert(rc == 0);
    c532:	b958      	cbnz	r0, c54c <advertise+0x7c>
}
    c534:	b01e      	add	sp, #120	; 0x78
    c536:	bd10      	pop	{r4, pc}
    assert(rc == 0);
    c538:	f7ff fe56 	bl	c1e8 <hal_debugger_connected>
    c53c:	b100      	cbz	r0, c540 <advertise+0x70>
    c53e:	be01      	bkpt	0x0001
    c540:	2300      	movs	r3, #0
    c542:	461a      	mov	r2, r3
    c544:	4619      	mov	r1, r3
    c546:	4618      	mov	r0, r3
    c548:	f000 f888 	bl	c65c <__assert_func>
    assert(rc == 0);
    c54c:	f7ff fe4c 	bl	c1e8 <hal_debugger_connected>
    c550:	b100      	cbz	r0, c554 <advertise+0x84>
    c552:	be01      	bkpt	0x0001
    c554:	2300      	movs	r3, #0
    c556:	461a      	mov	r2, r3
    c558:	4619      	mov	r1, r3
    c55a:	4618      	mov	r0, r3
    c55c:	f000 f87e 	bl	c65c <__assert_func>
    c560:	0002acc4 	.word	0x0002acc4
    c564:	0002acd4 	.word	0x0002acd4
    c568:	0000c579 	.word	0x0000c579

0000c56c <on_sync>:
{
    c56c:	b508      	push	{r3, lr}
    set_ble_addr();
    c56e:	f7ff ff8b 	bl	c488 <set_ble_addr>
    advertise();
    c572:	f7ff ffad 	bl	c4d0 <advertise>
}
    c576:	bd08      	pop	{r3, pc}

0000c578 <adv_event>:
{
    c578:	b508      	push	{r3, lr}
    switch (event->type) {
    c57a:	7803      	ldrb	r3, [r0, #0]
    c57c:	2b09      	cmp	r3, #9
    c57e:	d006      	beq.n	c58e <adv_event+0x16>
        MODLOG_DFLT(ERROR, "Advertising event not handled\n");
    c580:	4a07      	ldr	r2, [pc, #28]	; (c5a0 <adv_event+0x28>)
    c582:	2103      	movs	r1, #3
    c584:	2000      	movs	r0, #0
    c586:	f003 faf3 	bl	fb70 <modlog_printf>
}
    c58a:	2000      	movs	r0, #0
    c58c:	bd08      	pop	{r3, pc}
        MODLOG_DFLT(INFO, "Advertising completed, termination code: %d\n",
    c58e:	6843      	ldr	r3, [r0, #4]
    c590:	4a04      	ldr	r2, [pc, #16]	; (c5a4 <adv_event+0x2c>)
    c592:	2101      	movs	r1, #1
    c594:	2000      	movs	r0, #0
    c596:	f003 faeb 	bl	fb70 <modlog_printf>
        advertise();
    c59a:	f7ff ff99 	bl	c4d0 <advertise>
        return 0;
    c59e:	e7f4      	b.n	c58a <adv_event+0x12>
    c5a0:	0002aca4 	.word	0x0002aca4
    c5a4:	0002ac74 	.word	0x0002ac74

0000c5a8 <main>:

int
main(int argc, char **argv)
{
    c5a8:	b508      	push	{r3, lr}
    int rc;

    /* Initialize all packages. */
    sysinit();
    c5aa:	f003 fd77 	bl	1009c <sysinit_start>
    c5ae:	f000 f823 	bl	c5f8 <sysinit_app>
    c5b2:	f003 fd79 	bl	100a8 <sysinit_end>

    ble_hs_cfg.sync_cb = on_sync;
    c5b6:	4b0c      	ldr	r3, [pc, #48]	; (c5e8 <main+0x40>)
    c5b8:	4a0c      	ldr	r2, [pc, #48]	; (c5ec <main+0x44>)
    c5ba:	611a      	str	r2, [r3, #16]
    ble_hs_cfg.reset_cb = on_reset;
    c5bc:	4a0c      	ldr	r2, [pc, #48]	; (c5f0 <main+0x48>)
    c5be:	60da      	str	r2, [r3, #12]

    rc = ble_svc_gap_device_name_set(device_name);
    c5c0:	480c      	ldr	r0, [pc, #48]	; (c5f4 <main+0x4c>)
    c5c2:	f019 fc87 	bl	25ed4 <ble_svc_gap_device_name_set>
    assert(rc == 0);
    c5c6:	b920      	cbnz	r0, c5d2 <main+0x2a>

    /* As the last thing, process events from default event queue. */
    while (1) {
        os_eventq_run(os_eventq_dflt_get());
    c5c8:	f000 fc2e 	bl	ce28 <os_eventq_dflt_get>
    c5cc:	f000 fbfb 	bl	cdc6 <os_eventq_run>
    c5d0:	e7fa      	b.n	c5c8 <main+0x20>
    assert(rc == 0);
    c5d2:	f7ff fe09 	bl	c1e8 <hal_debugger_connected>
    c5d6:	b100      	cbz	r0, c5da <main+0x32>
    c5d8:	be01      	bkpt	0x0001
    c5da:	2300      	movs	r3, #0
    c5dc:	461a      	mov	r2, r3
    c5de:	4619      	mov	r1, r3
    c5e0:	4618      	mov	r0, r3
    c5e2:	f000 f83b 	bl	c65c <__assert_func>
    c5e6:	bf00      	nop
    c5e8:	2000015c 	.word	0x2000015c
    c5ec:	0000c56d 	.word	0x0000c56d
    c5f0:	0000c475 	.word	0x0000c475
    c5f4:	0002acc4 	.word	0x0002acc4

0000c5f8 <sysinit_app>:
void ble_ll_init(void);
void ble_svc_gap_init(void);

void
sysinit_app(void)
{
    c5f8:	b508      	push	{r3, lr}
    /*** Stage 0 */
    /* 0.0: os_pkg_init (kernel/os) */
    os_pkg_init();
    c5fa:	f000 f9b3 	bl	c964 <os_pkg_init>

    /*** Stage 2 */
    /* 2.0: flash_map_init (sys/flash_map) */
    flash_map_init();
    c5fe:	f002 fec3 	bl	f388 <flash_map_init>

    /*** Stage 10 */
    /* 10.0: stats_module_init (sys/stats/full) */
    stats_module_init();
    c602:	f003 fcf5 	bl	fff0 <stats_module_init>

    /*** Stage 20 */
    /* 20.0: console_pkg_init (sys/console/full) */
    console_pkg_init();
    c606:	f002 fc05 	bl	ee14 <console_pkg_init>

    /*** Stage 100 */
    /* 100.0: ble_hci_ram_init (nimble/transport/ram) */
    ble_hci_ram_init();
    c60a:	f019 fdb3 	bl	26174 <ble_hci_ram_init>
    /* 100.1: log_init (sys/log/full) */
    log_init();
    c60e:	f002 ffbf 	bl	f590 <log_init>
    /* 100.2: mfg_init (sys/mfg) */
    mfg_init();
    c612:	f003 fc3f 	bl	fe94 <mfg_init>
    /* 100.3: modlog_init (sys/log/modlog) */
    modlog_init();
    c616:	f003 fac9 	bl	fbac <modlog_init>

    /*** Stage 200 */
    /* 200.0: ble_hs_init (nimble/host) */
    ble_hs_init();
    c61a:	f012 f909 	bl	1e830 <ble_hs_init>

    /*** Stage 250 */
    /* 250.0: ble_ll_init (nimble/controller) */
    ble_ll_init();
    c61e:	f004 fa69 	bl	10af4 <ble_ll_init>

    /*** Stage 301 */
    /* 301.0: ble_svc_gap_init (nimble/host/services/gap) */
    ble_svc_gap_init();
    c622:	f019 fc6b 	bl	25efc <ble_svc_gap_init>
}
    c626:	bd08      	pop	{r3, pc}

0000c628 <NVIC_Relocate>:
     * designated in the linker script.
     */
    current_location = (uint32_t *)&__isr_vector;
    new_location = (uint32_t *)&__vector_tbl_reloc__;

    if (new_location != current_location) {
    c628:	4a09      	ldr	r2, [pc, #36]	; (c650 <NVIC_Relocate+0x28>)
    c62a:	4b0a      	ldr	r3, [pc, #40]	; (c654 <NVIC_Relocate+0x2c>)
    c62c:	429a      	cmp	r2, r3
    c62e:	d00a      	beq.n	c646 <NVIC_Relocate+0x1e>
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
    c630:	2300      	movs	r3, #0
    c632:	e006      	b.n	c642 <NVIC_Relocate+0x1a>
            new_location[i] = current_location[i];
    c634:	4a07      	ldr	r2, [pc, #28]	; (c654 <NVIC_Relocate+0x2c>)
    c636:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    c63a:	4a05      	ldr	r2, [pc, #20]	; (c650 <NVIC_Relocate+0x28>)
    c63c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
    c640:	3301      	adds	r3, #1
    c642:	2b35      	cmp	r3, #53	; 0x35
    c644:	ddf6      	ble.n	c634 <NVIC_Relocate+0xc>
    }

    /* Set VTOR except for M0 */
#if ((__CORTEX_M == 0) && (__VTOR_PRESENT == 0))
#else
    SCB->VTOR = (uint32_t)&__vector_tbl_reloc__;
    c646:	4a02      	ldr	r2, [pc, #8]	; (c650 <NVIC_Relocate+0x28>)
    c648:	4b03      	ldr	r3, [pc, #12]	; (c658 <NVIC_Relocate+0x30>)
    c64a:	609a      	str	r2, [r3, #8]
#endif
}
    c64c:	4770      	bx	lr
    c64e:	bf00      	nop
    c650:	20000000 	.word	0x20000000
    c654:	0000c020 	.word	0x0000c020
    c658:	e000ed00 	.word	0xe000ed00

0000c65c <__assert_func>:
}
#endif

void
__assert_func(const char *file, int line, const char *func, const char *e)
{
    c65c:	b508      	push	{r3, lr}
    c65e:	4675      	mov	r5, lr
    c660:	4604      	mov	r4, r0
    c662:	460e      	mov	r6, r1
#if MYNEWT_VAL(OS_CRASH_LOG)
    struct log_reboot_info lri;
#endif
    int sr;

    OS_ENTER_CRITICAL(sr);
    c664:	f001 f8c8 	bl	d7f8 <os_arch_save_sr>
    (void)sr;
    console_blocking_mode();
    c668:	f002 fb0e 	bl	ec88 <console_blocking_mode>
    OS_PRINT_ASSERT(file, line, func, e);
    c66c:	b16c      	cbz	r4, c68a <__assert_func+0x2e>
    c66e:	4633      	mov	r3, r6
    c670:	4622      	mov	r2, r4
    c672:	4629      	mov	r1, r5
    c674:	4807      	ldr	r0, [pc, #28]	; (c694 <__assert_func+0x38>)
    c676:	f002 fc1b 	bl	eeb0 <console_printf>

#if MYNEWT_VAL(OS_ASSERT_CB)
    os_assert_cb();
#endif

    SCB->ICSR = SCB_ICSR_NMIPENDSET_Msk;
    c67a:	4b07      	ldr	r3, [pc, #28]	; (c698 <__assert_func+0x3c>)
    c67c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    c680:	605a      	str	r2, [r3, #4]
    asm("isb");
    c682:	f3bf 8f6f 	isb	sy
    hal_system_reset();
    c686:	f7ff fdb7 	bl	c1f8 <hal_system_reset>
    OS_PRINT_ASSERT(file, line, func, e);
    c68a:	4629      	mov	r1, r5
    c68c:	4803      	ldr	r0, [pc, #12]	; (c69c <__assert_func+0x40>)
    c68e:	f002 fc0f 	bl	eeb0 <console_printf>
    c692:	e7f2      	b.n	c67a <__assert_func+0x1e>
    c694:	0002ad1c 	.word	0x0002ad1c
    c698:	e000ed00 	.word	0xe000ed00
    c69c:	0002ad0c 	.word	0x0002ad0c

0000c6a0 <os_default_irq>:
}

void
os_default_irq(struct trap_frame *tf)
{
    c6a0:	b500      	push	{lr}
    c6a2:	b083      	sub	sp, #12
    c6a4:	4604      	mov	r4, r0
#endif
#if MYNEWT_VAL(OS_CRASH_RESTORE_REGS)
    uint32_t orig_sp;
#endif

    console_blocking_mode();
    c6a6:	f002 faef 	bl	ec88 <console_blocking_mode>
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
      SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk, (uint32_t)tf->ef);
    c6aa:	4d1b      	ldr	r5, [pc, #108]	; (c718 <os_default_irq+0x78>)
    c6ac:	6869      	ldr	r1, [r5, #4]
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
    c6ae:	6822      	ldr	r2, [r4, #0]
    c6b0:	f3c1 0108 	ubfx	r1, r1, #0, #9
    c6b4:	4819      	ldr	r0, [pc, #100]	; (c71c <os_default_irq+0x7c>)
    c6b6:	f002 fbfb 	bl	eeb0 <console_printf>
    console_printf(" r0:0x%08lx  r1:0x%08lx  r2:0x%08lx  r3:0x%08lx\n",
      tf->ef->r0, tf->ef->r1, tf->ef->r2, tf->ef->r3);
    c6ba:	6820      	ldr	r0, [r4, #0]
    console_printf(" r0:0x%08lx  r1:0x%08lx  r2:0x%08lx  r3:0x%08lx\n",
    c6bc:	6883      	ldr	r3, [r0, #8]
    c6be:	6842      	ldr	r2, [r0, #4]
    c6c0:	6801      	ldr	r1, [r0, #0]
    c6c2:	68c0      	ldr	r0, [r0, #12]
    c6c4:	9000      	str	r0, [sp, #0]
    c6c6:	4816      	ldr	r0, [pc, #88]	; (c720 <os_default_irq+0x80>)
    c6c8:	f002 fbf2 	bl	eeb0 <console_printf>
    console_printf(" r4:0x%08lx  r5:0x%08lx  r6:0x%08lx  r7:0x%08lx\n",
    c6cc:	6923      	ldr	r3, [r4, #16]
    c6ce:	9300      	str	r3, [sp, #0]
    c6d0:	68e3      	ldr	r3, [r4, #12]
    c6d2:	68a2      	ldr	r2, [r4, #8]
    c6d4:	6861      	ldr	r1, [r4, #4]
    c6d6:	4813      	ldr	r0, [pc, #76]	; (c724 <os_default_irq+0x84>)
    c6d8:	f002 fbea 	bl	eeb0 <console_printf>
      tf->r4, tf->r5, tf->r6, tf->r7);
    console_printf(" r8:0x%08lx  r9:0x%08lx r10:0x%08lx r11:0x%08lx\n",
    c6dc:	6a23      	ldr	r3, [r4, #32]
    c6de:	9300      	str	r3, [sp, #0]
    c6e0:	69e3      	ldr	r3, [r4, #28]
    c6e2:	69a2      	ldr	r2, [r4, #24]
    c6e4:	6961      	ldr	r1, [r4, #20]
    c6e6:	4810      	ldr	r0, [pc, #64]	; (c728 <os_default_irq+0x88>)
    c6e8:	f002 fbe2 	bl	eeb0 <console_printf>
      tf->r8, tf->r9, tf->r10, tf->r11);
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
      tf->ef->r12, tf->ef->lr, tf->ef->pc, tf->ef->psr);
    c6ec:	6820      	ldr	r0, [r4, #0]
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
    c6ee:	6983      	ldr	r3, [r0, #24]
    c6f0:	6942      	ldr	r2, [r0, #20]
    c6f2:	6901      	ldr	r1, [r0, #16]
    c6f4:	69c0      	ldr	r0, [r0, #28]
    c6f6:	9000      	str	r0, [sp, #0]
    c6f8:	480c      	ldr	r0, [pc, #48]	; (c72c <os_default_irq+0x8c>)
    c6fa:	f002 fbd9 	bl	eeb0 <console_printf>
    console_printf("ICSR:0x%08lx HFSR:0x%08lx CFSR:0x%08lx\n",
    c6fe:	6869      	ldr	r1, [r5, #4]
    c700:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    c702:	6aab      	ldr	r3, [r5, #40]	; 0x28
    c704:	480a      	ldr	r0, [pc, #40]	; (c730 <os_default_irq+0x90>)
    c706:	f002 fbd3 	bl	eeb0 <console_printf>
      SCB->ICSR, SCB->HFSR, SCB->CFSR);
    console_printf("BFAR:0x%08lx MMFAR:0x%08lx\n", SCB->BFAR, SCB->MMFAR);
    c70a:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    c70c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
    c70e:	4809      	ldr	r0, [pc, #36]	; (c734 <os_default_irq+0x94>)
    c710:	f002 fbce 	bl	eeb0 <console_printf>
            : "r0"
        );
    }
#endif

    hal_system_reset();
    c714:	f7ff fd70 	bl	c1f8 <hal_system_reset>
    c718:	e000ed00 	.word	0xe000ed00
    c71c:	0002ad34 	.word	0x0002ad34
    c720:	0002ad68 	.word	0x0002ad68
    c724:	0002ad9c 	.word	0x0002ad9c
    c728:	0002add0 	.word	0x0002add0
    c72c:	0002ae04 	.word	0x0002ae04
    c730:	0002ae38 	.word	0x0002ae38
    c734:	0002ae60 	.word	0x0002ae60

0000c738 <os_idle_task>:
 *
 * @param arg unused
 */
void
os_idle_task(void *arg)
{
    c738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

    sanity_itvl_ticks = (MYNEWT_VAL(SANITY_INTERVAL) * OS_TICKS_PER_SEC) / 1000;
    sanity_last = 0;

#if MYNEWT_VAL(WATCHDOG_INTERVAL) > 0
    hal_watchdog_tickle();
    c73a:	f01c fcc5 	bl	290c8 <hal_watchdog_tickle>
    sanity_last = 0;
    c73e:	2500      	movs	r5, #0
    c740:	e00e      	b.n	c760 <os_idle_task+0x28>
    while (1) {
        ++g_os_idle_ctr;

        now = os_time_get();
        if (OS_TIME_TICK_GEQ(now, sanity_last + sanity_itvl_ticks)) {
            os_sanity_run();
    c742:	f000 fd27 	bl	d194 <os_sanity_run>
#if MYNEWT_VAL(WATCHDOG_INTERVAL) > 0
            /* Tickle the watchdog after successfully running sanity */
            hal_watchdog_tickle();
    c746:	f01c fcbf 	bl	290c8 <hal_watchdog_tickle>
#if MYNEWT_VAL(OS_WATCHDOG_MONITOR)
            os_cputime_timer_stop(&os_wdog_monitor);
            os_cputime_timer_relative(&os_wdog_monitor, OS_WDOG_MONITOR_TMO);
#endif
#endif
            sanity_last = now;
    c74a:	4625      	mov	r5, r4
    c74c:	e014      	b.n	c778 <os_idle_task+0x40>
         * happens on next interval in case it was already performed on current
         * tick.
         */
        sanity_to_next = sanity_last + sanity_itvl_ticks - now;
        if ((int)sanity_to_next <= 0) {
            sanity_to_next += sanity_itvl_ticks;
    c74e:	f503 63f0 	add.w	r3, r3, #1920	; 0x780
    c752:	e025      	b.n	c7a0 <os_idle_task+0x68>
        }
        iticks = min(iticks, sanity_to_next);

        if (iticks < MIN_IDLE_TICKS) {
            iticks = 0;
    c754:	2000      	movs	r0, #0
        /* Tell the architecture specific support to put the processor to sleep
         * for 'n' ticks.
         */

        os_trace_idle();
        os_tick_idle(iticks);
    c756:	f01c fba7 	bl	28ea8 <os_tick_idle>
        OS_EXIT_CRITICAL(sr);
    c75a:	4638      	mov	r0, r7
    c75c:	f001 f852 	bl	d804 <os_arch_restore_sr>
        ++g_os_idle_ctr;
    c760:	4a15      	ldr	r2, [pc, #84]	; (c7b8 <os_idle_task+0x80>)
    c762:	6813      	ldr	r3, [r2, #0]
    c764:	3301      	adds	r3, #1
    c766:	6013      	str	r3, [r2, #0]
        now = os_time_get();
    c768:	f000 ff84 	bl	d674 <os_time_get>
    c76c:	4604      	mov	r4, r0
        if (OS_TIME_TICK_GEQ(now, sanity_last + sanity_itvl_ticks)) {
    c76e:	f505 63f0 	add.w	r3, r5, #1920	; 0x780
    c772:	1ac3      	subs	r3, r0, r3
    c774:	2b00      	cmp	r3, #0
    c776:	dae4      	bge.n	c742 <os_idle_task+0xa>
        OS_ENTER_CRITICAL(sr);
    c778:	f001 f83e 	bl	d7f8 <os_arch_save_sr>
    c77c:	4607      	mov	r7, r0
        now = os_time_get();
    c77e:	f000 ff79 	bl	d674 <os_time_get>
    c782:	4606      	mov	r6, r0
        sticks = os_sched_wakeup_ticks(now);
    c784:	f000 fe48 	bl	d418 <os_sched_wakeup_ticks>
    c788:	4604      	mov	r4, r0
        cticks = os_callout_wakeup_ticks(now);
    c78a:	4630      	mov	r0, r6
    c78c:	f000 f9a8 	bl	cae0 <os_callout_wakeup_ticks>
        iticks = min(sticks, cticks);
    c790:	42a0      	cmp	r0, r4
    c792:	bf28      	it	cs
    c794:	4620      	movcs	r0, r4
        sanity_to_next = sanity_last + sanity_itvl_ticks - now;
    c796:	f505 63f0 	add.w	r3, r5, #1920	; 0x780
    c79a:	1b9b      	subs	r3, r3, r6
        if ((int)sanity_to_next <= 0) {
    c79c:	2b00      	cmp	r3, #0
    c79e:	ddd6      	ble.n	c74e <os_idle_task+0x16>
        iticks = min(iticks, sanity_to_next);
    c7a0:	4298      	cmp	r0, r3
    c7a2:	bf28      	it	cs
    c7a4:	4618      	movcs	r0, r3
        if (iticks < MIN_IDLE_TICKS) {
    c7a6:	280b      	cmp	r0, #11
    c7a8:	d9d4      	bls.n	c754 <os_idle_task+0x1c>
        } else if (iticks > MAX_IDLE_TICKS) {
    c7aa:	f5b0 3f96 	cmp.w	r0, #76800	; 0x12c00
    c7ae:	d9d2      	bls.n	c756 <os_idle_task+0x1e>
            iticks = MAX_IDLE_TICKS;
    c7b0:	f44f 3096 	mov.w	r0, #76800	; 0x12c00
    c7b4:	e7cf      	b.n	c756 <os_idle_task+0x1e>
    c7b6:	bf00      	nop
    c7b8:	20003af4 	.word	0x20003af4

0000c7bc <os_main>:
    return (g_os_started);
}

static void
os_main(void *arg)
{
    c7bc:	b508      	push	{r3, lr}
    c7be:	4603      	mov	r3, r0
    int (*fn)(int argc, char **argv) = arg;

#if !MYNEWT_VAL(SELFTEST)
    fn(0, NULL);
    c7c0:	2100      	movs	r1, #0
    c7c2:	4608      	mov	r0, r1
    c7c4:	4798      	blx	r3
    (void)fn;
    while (1) {
        os_eventq_run(os_eventq_dflt_get());
    }
#endif
    assert(0);
    c7c6:	f7ff fd0f 	bl	c1e8 <hal_debugger_connected>
    c7ca:	b100      	cbz	r0, c7ce <os_main+0x12>
    c7cc:	be01      	bkpt	0x0001
    c7ce:	2300      	movs	r3, #0
    c7d0:	461a      	mov	r2, r3
    c7d2:	4619      	mov	r1, r3
    c7d4:	4618      	mov	r0, r3
    c7d6:	f7ff ff41 	bl	c65c <__assert_func>
	...

0000c7dc <os_started>:
}
    c7dc:	4b01      	ldr	r3, [pc, #4]	; (c7e4 <os_started+0x8>)
    c7de:	6818      	ldr	r0, [r3, #0]
    c7e0:	4770      	bx	lr
    c7e2:	bf00      	nop
    c7e4:	20003af8 	.word	0x20003af8

0000c7e8 <os_init_idle_task>:
}
#endif

void
os_init_idle_task(void)
{
    c7e8:	b500      	push	{lr}
    c7ea:	b085      	sub	sp, #20
    int rc;

    rc = os_task_init(&g_idle_task, "idle", os_idle_task, NULL,
    c7ec:	2340      	movs	r3, #64	; 0x40
    c7ee:	9303      	str	r3, [sp, #12]
    c7f0:	4b1b      	ldr	r3, [pc, #108]	; (c860 <os_init_idle_task+0x78>)
    c7f2:	9302      	str	r3, [sp, #8]
    c7f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    c7f8:	9301      	str	r3, [sp, #4]
    c7fa:	23ff      	movs	r3, #255	; 0xff
    c7fc:	9300      	str	r3, [sp, #0]
    c7fe:	2300      	movs	r3, #0
    c800:	4a18      	ldr	r2, [pc, #96]	; (c864 <os_init_idle_task+0x7c>)
    c802:	4919      	ldr	r1, [pc, #100]	; (c868 <os_init_idle_task+0x80>)
    c804:	4819      	ldr	r0, [pc, #100]	; (c86c <os_init_idle_task+0x84>)
    c806:	f000 fe6b 	bl	d4e0 <os_task_init>
            OS_IDLE_PRIO, OS_WAIT_FOREVER, g_idle_task_stack,
            OS_STACK_ALIGN(OS_IDLE_STACK_SIZE));
    assert(rc == 0);
    c80a:	b950      	cbnz	r0, c822 <os_init_idle_task+0x3a>

    /* Initialize sanity */
    rc = os_sanity_init();
    c80c:	f000 fd04 	bl	d218 <os_sanity_init>
    assert(rc == 0);
    c810:	b988      	cbnz	r0, c836 <os_init_idle_task+0x4e>

#if MYNEWT_VAL(WATCHDOG_INTERVAL) > 0
    rc = hal_watchdog_init(MYNEWT_VAL(WATCHDOG_INTERVAL));
    c812:	f247 5030 	movw	r0, #30000	; 0x7530
    c816:	f01c fc0f 	bl	29038 <hal_watchdog_init>
    assert(rc == 0);
    c81a:	b9b0      	cbnz	r0, c84a <os_init_idle_task+0x62>
#if MYNEWT_VAL(OS_WATCHDOG_MONITOR)
    os_cputime_timer_init(&os_wdog_monitor, os_wdog_monitor_tmo, NULL);
    os_cputime_timer_relative(&os_wdog_monitor, OS_WDOG_MONITOR_TMO);
#endif
#endif
}
    c81c:	b005      	add	sp, #20
    c81e:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
    c822:	f7ff fce1 	bl	c1e8 <hal_debugger_connected>
    c826:	b100      	cbz	r0, c82a <os_init_idle_task+0x42>
    c828:	be01      	bkpt	0x0001
    c82a:	2300      	movs	r3, #0
    c82c:	461a      	mov	r2, r3
    c82e:	4619      	mov	r1, r3
    c830:	4618      	mov	r0, r3
    c832:	f7ff ff13 	bl	c65c <__assert_func>
    assert(rc == 0);
    c836:	f7ff fcd7 	bl	c1e8 <hal_debugger_connected>
    c83a:	b100      	cbz	r0, c83e <os_init_idle_task+0x56>
    c83c:	be01      	bkpt	0x0001
    c83e:	2300      	movs	r3, #0
    c840:	461a      	mov	r2, r3
    c842:	4619      	mov	r1, r3
    c844:	4618      	mov	r0, r3
    c846:	f7ff ff09 	bl	c65c <__assert_func>
    assert(rc == 0);
    c84a:	f7ff fccd 	bl	c1e8 <hal_debugger_connected>
    c84e:	b100      	cbz	r0, c852 <os_init_idle_task+0x6a>
    c850:	be01      	bkpt	0x0001
    c852:	2300      	movs	r3, #0
    c854:	461a      	mov	r2, r3
    c856:	4619      	mov	r1, r3
    c858:	4618      	mov	r0, r3
    c85a:	f7ff feff 	bl	c65c <__assert_func>
    c85e:	bf00      	nop
    c860:	20000248 	.word	0x20000248
    c864:	0000c739 	.word	0x0000c739
    c868:	0002ae84 	.word	0x0002ae84
    c86c:	20003aa4 	.word	0x20003aa4

0000c870 <os_init>:

void
os_init(int (*main_fn)(int argc, char **arg))
{
    c870:	b510      	push	{r4, lr}
    c872:	b084      	sub	sp, #16
    c874:	4604      	mov	r4, r0
#if MYNEWT_VAL(RTT)
    memset(&_SEGGER_RTT, 0, sizeof(_SEGGER_RTT));
    SEGGER_RTT_Init();
#endif

    TAILQ_INIT(&g_callout_list);
    c876:	4b2c      	ldr	r3, [pc, #176]	; (c928 <os_init+0xb8>)
    c878:	2200      	movs	r2, #0
    c87a:	601a      	str	r2, [r3, #0]
    c87c:	605b      	str	r3, [r3, #4]
    STAILQ_INIT(&g_os_task_list);
    c87e:	4b2b      	ldr	r3, [pc, #172]	; (c92c <os_init+0xbc>)
    c880:	601a      	str	r2, [r3, #0]
    c882:	605b      	str	r3, [r3, #4]
    os_eventq_init(os_eventq_dflt_get());
    c884:	f000 fad0 	bl	ce28 <os_eventq_dflt_get>
    c888:	f000 fa0a 	bl	cca0 <os_eventq_init>

    /* Initialize device list. */
    os_dev_reset();
    c88c:	f000 fa00 	bl	cc90 <os_dev_reset>

    err = os_arch_os_init();
    c890:	f000 ffee 	bl	d870 <os_arch_os_init>
    assert(err == OS_OK);
    c894:	bb00      	cbnz	r0, c8d8 <os_init+0x68>

    if (main_fn) {
    c896:	b18c      	cbz	r4, c8bc <os_init+0x4c>
        err = os_task_init(&g_os_main_task, "main", os_main, main_fn,
    c898:	f44f 6380 	mov.w	r3, #1024	; 0x400
    c89c:	9303      	str	r3, [sp, #12]
    c89e:	4b24      	ldr	r3, [pc, #144]	; (c930 <os_init+0xc0>)
    c8a0:	9302      	str	r3, [sp, #8]
    c8a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    c8a6:	9301      	str	r3, [sp, #4]
    c8a8:	237f      	movs	r3, #127	; 0x7f
    c8aa:	9300      	str	r3, [sp, #0]
    c8ac:	4623      	mov	r3, r4
    c8ae:	4a21      	ldr	r2, [pc, #132]	; (c934 <os_init+0xc4>)
    c8b0:	4921      	ldr	r1, [pc, #132]	; (c938 <os_init+0xc8>)
    c8b2:	4822      	ldr	r0, [pc, #136]	; (c93c <os_init+0xcc>)
    c8b4:	f000 fe14 	bl	d4e0 <os_task_init>
    c8b8:	b2c0      	uxtb	r0, r0
                   OS_MAIN_TASK_PRIO,
                   (OS_MAIN_TASK_TIMER_TICKS == 0) ? OS_WAIT_FOREVER : OS_MAIN_TASK_TIMER_TICKS,
                   g_os_main_stack, OS_STACK_ALIGN(OS_MAIN_STACK_SIZE));
        assert(err == 0);
    c8ba:	b9b8      	cbnz	r0, c8ec <os_init+0x7c>
    }

    /* Call bsp related OS initializations */
    hal_bsp_init();
    c8bc:	f01c f962 	bl	28b84 <hal_bsp_init>

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_PRIMARY);
    c8c0:	2001      	movs	r0, #1
    c8c2:	f000 f99d 	bl	cc00 <os_dev_initialize_all>
    c8c6:	b2c0      	uxtb	r0, r0
    assert(err == OS_OK);
    c8c8:	b9d0      	cbnz	r0, c900 <os_init+0x90>

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_SECONDARY);
    c8ca:	2002      	movs	r0, #2
    c8cc:	f000 f998 	bl	cc00 <os_dev_initialize_all>
    c8d0:	b2c0      	uxtb	r0, r0
    assert(err == OS_OK);
    c8d2:	b9f8      	cbnz	r0, c914 <os_init+0xa4>
}
    c8d4:	b004      	add	sp, #16
    c8d6:	bd10      	pop	{r4, pc}
    assert(err == OS_OK);
    c8d8:	f7ff fc86 	bl	c1e8 <hal_debugger_connected>
    c8dc:	b100      	cbz	r0, c8e0 <os_init+0x70>
    c8de:	be01      	bkpt	0x0001
    c8e0:	2300      	movs	r3, #0
    c8e2:	461a      	mov	r2, r3
    c8e4:	4619      	mov	r1, r3
    c8e6:	4618      	mov	r0, r3
    c8e8:	f7ff feb8 	bl	c65c <__assert_func>
        assert(err == 0);
    c8ec:	f7ff fc7c 	bl	c1e8 <hal_debugger_connected>
    c8f0:	b100      	cbz	r0, c8f4 <os_init+0x84>
    c8f2:	be01      	bkpt	0x0001
    c8f4:	2300      	movs	r3, #0
    c8f6:	461a      	mov	r2, r3
    c8f8:	4619      	mov	r1, r3
    c8fa:	4618      	mov	r0, r3
    c8fc:	f7ff feae 	bl	c65c <__assert_func>
    assert(err == OS_OK);
    c900:	f7ff fc72 	bl	c1e8 <hal_debugger_connected>
    c904:	b100      	cbz	r0, c908 <os_init+0x98>
    c906:	be01      	bkpt	0x0001
    c908:	2300      	movs	r3, #0
    c90a:	461a      	mov	r2, r3
    c90c:	4619      	mov	r1, r3
    c90e:	4618      	mov	r0, r3
    c910:	f7ff fea4 	bl	c65c <__assert_func>
    assert(err == OS_OK);
    c914:	f7ff fc68 	bl	c1e8 <hal_debugger_connected>
    c918:	b100      	cbz	r0, c91c <os_init+0xac>
    c91a:	be01      	bkpt	0x0001
    c91c:	2300      	movs	r3, #0
    c91e:	461a      	mov	r2, r3
    c920:	4619      	mov	r1, r3
    c922:	4618      	mov	r0, r3
    c924:	f7ff fe9a 	bl	c65c <__assert_func>
    c928:	20003b4c 	.word	0x20003b4c
    c92c:	20003b70 	.word	0x20003b70
    c930:	20000348 	.word	0x20000348
    c934:	0000c7bd 	.word	0x0000c7bd
    c938:	0002ae7c 	.word	0x0002ae7c
    c93c:	20003afc 	.word	0x20003afc

0000c940 <os_start>:

void
os_start(void)
{
    c940:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_SCHEDULING)
    os_error_t err;

#if MYNEWT_VAL(WATCHDOG_INTERVAL) > 0
    /* Enable the watchdog prior to starting the OS */
    hal_watchdog_enable();
    c942:	f01c fbb9 	bl	290b8 <hal_watchdog_enable>
#endif

    err = os_arch_os_start();
    c946:	f000 fff3 	bl	d930 <os_arch_os_start>
    assert(err == OS_OK);
    c94a:	b900      	cbnz	r0, c94e <os_start+0xe>
#else
    assert(0);
#endif
}
    c94c:	bd08      	pop	{r3, pc}
    assert(err == OS_OK);
    c94e:	f7ff fc4b 	bl	c1e8 <hal_debugger_connected>
    c952:	b100      	cbz	r0, c956 <os_start+0x16>
    c954:	be01      	bkpt	0x0001
    c956:	2300      	movs	r3, #0
    c958:	461a      	mov	r2, r3
    c95a:	4619      	mov	r1, r3
    c95c:	4618      	mov	r0, r3
    c95e:	f7ff fe7d 	bl	c65c <__assert_func>
	...

0000c964 <os_pkg_init>:
    hal_system_reset();
}

void
os_pkg_init(void)
{
    c964:	b508      	push	{r3, lr}
    os_error_t err;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
    c966:	4b10      	ldr	r3, [pc, #64]	; (c9a8 <os_pkg_init+0x44>)
    c968:	781b      	ldrb	r3, [r3, #0]
    c96a:	b14b      	cbz	r3, c980 <os_pkg_init+0x1c>

    err = os_dev_initialize_all(OS_DEV_INIT_KERNEL);
    c96c:	2003      	movs	r0, #3
    c96e:	f000 f947 	bl	cc00 <os_dev_initialize_all>
    c972:	b2c0      	uxtb	r0, r0
    assert(err == OS_OK);
    c974:	b970      	cbnz	r0, c994 <os_pkg_init+0x30>

    os_mempool_module_init();
    c976:	f000 fb17 	bl	cfa8 <os_mempool_module_init>
    os_msys_init();
    c97a:	f000 fbb9 	bl	d0f0 <os_msys_init>
}
    c97e:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
    c980:	f7ff fc32 	bl	c1e8 <hal_debugger_connected>
    c984:	b100      	cbz	r0, c988 <os_pkg_init+0x24>
    c986:	be01      	bkpt	0x0001
    c988:	2300      	movs	r3, #0
    c98a:	461a      	mov	r2, r3
    c98c:	4619      	mov	r1, r3
    c98e:	4618      	mov	r0, r3
    c990:	f7ff fe64 	bl	c65c <__assert_func>
    assert(err == OS_OK);
    c994:	f7ff fc28 	bl	c1e8 <hal_debugger_connected>
    c998:	b100      	cbz	r0, c99c <os_pkg_init+0x38>
    c99a:	be01      	bkpt	0x0001
    c99c:	2300      	movs	r3, #0
    c99e:	461a      	mov	r2, r3
    c9a0:	4619      	mov	r1, r3
    c9a2:	4618      	mov	r0, r3
    c9a4:	f7ff fe5a 	bl	c65c <__assert_func>
    c9a8:	20003bd8 	.word	0x20003bd8

0000c9ac <os_callout_init>:

struct os_callout_list g_callout_list;

void os_callout_init(struct os_callout *c, struct os_eventq *evq,
                     os_event_fn *ev_cb, void *ev_arg)
{
    c9ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c9ae:	4604      	mov	r4, r0
    c9b0:	460d      	mov	r5, r1
    c9b2:	4617      	mov	r7, r2
    c9b4:	461e      	mov	r6, r3
    os_trace_api_u32x2(OS_TRACE_ID_CALLOUT_INIT, (uint32_t)c, (uint32_t)evq);

    memset(c, 0, sizeof(*c));
    c9b6:	2220      	movs	r2, #32
    c9b8:	2100      	movs	r1, #0
    c9ba:	f001 fd81 	bl	e4c0 <memset>
    c->c_ev.ev_cb = ev_cb;
    c9be:	6067      	str	r7, [r4, #4]
    c->c_ev.ev_arg = ev_arg;
    c9c0:	60a6      	str	r6, [r4, #8]
    c->c_evq = evq;
    c9c2:	6125      	str	r5, [r4, #16]

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_INIT);
}
    c9c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0000c9c8 <os_callout_stop>:

void
os_callout_stop(struct os_callout *c)
{
    c9c8:	b538      	push	{r3, r4, r5, lr}
    c9ca:	4604      	mov	r4, r0
    os_sr_t sr;

    os_trace_api_u32(OS_TRACE_ID_CALLOUT_STOP, (uint32_t)c);

    OS_ENTER_CRITICAL(sr);
    c9cc:	f000 ff14 	bl	d7f8 <os_arch_save_sr>
    c9d0:	4605      	mov	r5, r0
 * @return 1 if queued, 0 if not queued.
 */
static inline int
os_callout_queued(struct os_callout *c)
{
    return c->c_next.tqe_prev != NULL;
    c9d2:	69e3      	ldr	r3, [r4, #28]

    if (os_callout_queued(c)) {
    c9d4:	b13b      	cbz	r3, c9e6 <os_callout_stop+0x1e>
        TAILQ_REMOVE(&g_callout_list, c, c_next);
    c9d6:	69a2      	ldr	r2, [r4, #24]
    c9d8:	b172      	cbz	r2, c9f8 <os_callout_stop+0x30>
    c9da:	61d3      	str	r3, [r2, #28]
    c9dc:	69e3      	ldr	r3, [r4, #28]
    c9de:	69a2      	ldr	r2, [r4, #24]
    c9e0:	601a      	str	r2, [r3, #0]
        c->c_next.tqe_prev = NULL;
    c9e2:	2300      	movs	r3, #0
    c9e4:	61e3      	str	r3, [r4, #28]
    }

    if (c->c_evq) {
    c9e6:	6920      	ldr	r0, [r4, #16]
    c9e8:	b110      	cbz	r0, c9f0 <os_callout_stop+0x28>
        os_eventq_remove(c->c_evq, &c->c_ev);
    c9ea:	4621      	mov	r1, r4
    c9ec:	f000 f9fc 	bl	cde8 <os_eventq_remove>
    }

    OS_EXIT_CRITICAL(sr);
    c9f0:	4628      	mov	r0, r5
    c9f2:	f000 ff07 	bl	d804 <os_arch_restore_sr>

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_STOP);
}
    c9f6:	bd38      	pop	{r3, r4, r5, pc}
        TAILQ_REMOVE(&g_callout_list, c, c_next);
    c9f8:	4a01      	ldr	r2, [pc, #4]	; (ca00 <os_callout_stop+0x38>)
    c9fa:	6053      	str	r3, [r2, #4]
    c9fc:	e7ee      	b.n	c9dc <os_callout_stop+0x14>
    c9fe:	bf00      	nop
    ca00:	20003b4c 	.word	0x20003b4c

0000ca04 <os_callout_reset>:

int
os_callout_reset(struct os_callout *c, os_time_t ticks)
{
    ca04:	b570      	push	{r4, r5, r6, lr}
    struct os_callout *entry;
    os_sr_t sr;
    int ret;

    /* Ensure this callout has been initialized. */
    assert(c->c_evq != NULL);
    ca06:	6903      	ldr	r3, [r0, #16]
    ca08:	b1c3      	cbz	r3, ca3c <os_callout_reset+0x38>
    ca0a:	4605      	mov	r5, r0
    ca0c:	460c      	mov	r4, r1

    os_trace_api_u32x2(OS_TRACE_ID_CALLOUT_RESET, (uint32_t)c, (uint32_t)ticks);

    if (ticks > INT32_MAX) {
    ca0e:	2900      	cmp	r1, #0
    ca10:	db34      	blt.n	ca7c <os_callout_reset+0x78>
        ret = OS_EINVAL;
        goto err;
    }

    OS_ENTER_CRITICAL(sr);
    ca12:	f000 fef1 	bl	d7f8 <os_arch_save_sr>
    ca16:	4606      	mov	r6, r0

    os_callout_stop(c);
    ca18:	4628      	mov	r0, r5
    ca1a:	f7ff ffd5 	bl	c9c8 <os_callout_stop>

    if (ticks == 0) {
    ca1e:	b904      	cbnz	r4, ca22 <os_callout_reset+0x1e>
        ticks = 1;
    ca20:	2401      	movs	r4, #1
    }

    c->c_ticks = os_time_get() + ticks;
    ca22:	f000 fe27 	bl	d674 <os_time_get>
    ca26:	4420      	add	r0, r4
    ca28:	6168      	str	r0, [r5, #20]

    entry = NULL;
    TAILQ_FOREACH(entry, &g_callout_list, c_next) {
    ca2a:	4b15      	ldr	r3, [pc, #84]	; (ca80 <os_callout_reset+0x7c>)
    ca2c:	681b      	ldr	r3, [r3, #0]
    ca2e:	b17b      	cbz	r3, ca50 <os_callout_reset+0x4c>
        if (OS_TIME_TICK_LT(c->c_ticks, entry->c_ticks)) {
    ca30:	695a      	ldr	r2, [r3, #20]
    ca32:	1a82      	subs	r2, r0, r2
    ca34:	2a00      	cmp	r2, #0
    ca36:	db0b      	blt.n	ca50 <os_callout_reset+0x4c>
    TAILQ_FOREACH(entry, &g_callout_list, c_next) {
    ca38:	699b      	ldr	r3, [r3, #24]
    ca3a:	e7f8      	b.n	ca2e <os_callout_reset+0x2a>
    assert(c->c_evq != NULL);
    ca3c:	f7ff fbd4 	bl	c1e8 <hal_debugger_connected>
    ca40:	b100      	cbz	r0, ca44 <os_callout_reset+0x40>
    ca42:	be01      	bkpt	0x0001
    ca44:	2300      	movs	r3, #0
    ca46:	461a      	mov	r2, r3
    ca48:	4619      	mov	r1, r3
    ca4a:	4618      	mov	r0, r3
    ca4c:	f7ff fe06 	bl	c65c <__assert_func>
            break;
        }
    }

    if (entry) {
    ca50:	b15b      	cbz	r3, ca6a <os_callout_reset+0x66>
        TAILQ_INSERT_BEFORE(entry, c, c_next);
    ca52:	69da      	ldr	r2, [r3, #28]
    ca54:	61ea      	str	r2, [r5, #28]
    ca56:	61ab      	str	r3, [r5, #24]
    ca58:	69da      	ldr	r2, [r3, #28]
    ca5a:	6015      	str	r5, [r2, #0]
    ca5c:	3518      	adds	r5, #24
    ca5e:	61dd      	str	r5, [r3, #28]
    } else {
        TAILQ_INSERT_TAIL(&g_callout_list, c, c_next);
    }

    OS_EXIT_CRITICAL(sr);
    ca60:	4630      	mov	r0, r6
    ca62:	f000 fecf 	bl	d804 <os_arch_restore_sr>

    ret = OS_OK;
    ca66:	2000      	movs	r0, #0

err:
    os_trace_api_ret_u32(OS_TRACE_ID_CALLOUT_RESET, (uint32_t)ret);
    return ret;
}
    ca68:	bd70      	pop	{r4, r5, r6, pc}
        TAILQ_INSERT_TAIL(&g_callout_list, c, c_next);
    ca6a:	2300      	movs	r3, #0
    ca6c:	61ab      	str	r3, [r5, #24]
    ca6e:	4b04      	ldr	r3, [pc, #16]	; (ca80 <os_callout_reset+0x7c>)
    ca70:	685a      	ldr	r2, [r3, #4]
    ca72:	61ea      	str	r2, [r5, #28]
    ca74:	6015      	str	r5, [r2, #0]
    ca76:	3518      	adds	r5, #24
    ca78:	605d      	str	r5, [r3, #4]
    ca7a:	e7f1      	b.n	ca60 <os_callout_reset+0x5c>
        ret = OS_EINVAL;
    ca7c:	2002      	movs	r0, #2
    return ret;
    ca7e:	e7f3      	b.n	ca68 <os_callout_reset+0x64>
    ca80:	20003b4c 	.word	0x20003b4c

0000ca84 <os_callout_tick>:
 * to run, it posts an event for each callout that's ready to run,
 * to the event queue provided to os_callout_init().
 */
void
os_callout_tick(void)
{
    ca84:	b538      	push	{r3, r4, r5, lr}
    struct os_callout *c;
    uint32_t now;

    os_trace_api_void(OS_TRACE_ID_CALLOUT_TICK);

    now = os_time_get();
    ca86:	f000 fdf5 	bl	d674 <os_time_get>
    ca8a:	4605      	mov	r5, r0
    ca8c:	e00f      	b.n	caae <os_callout_tick+0x2a>
    while (1) {
        OS_ENTER_CRITICAL(sr);
        c = TAILQ_FIRST(&g_callout_list);
        if (c) {
            if (OS_TIME_TICK_GEQ(now, c->c_ticks)) {
                TAILQ_REMOVE(&g_callout_list, c, c_next);
    ca8e:	69e2      	ldr	r2, [r4, #28]
    ca90:	4b12      	ldr	r3, [pc, #72]	; (cadc <os_callout_tick+0x58>)
    ca92:	605a      	str	r2, [r3, #4]
    ca94:	69e3      	ldr	r3, [r4, #28]
    ca96:	69a2      	ldr	r2, [r4, #24]
    ca98:	601a      	str	r2, [r3, #0]
                c->c_next.tqe_prev = NULL;
    ca9a:	2300      	movs	r3, #0
    ca9c:	61e3      	str	r3, [r4, #28]
            } else {
                c = NULL;
            }
        }
        OS_EXIT_CRITICAL(sr);
    ca9e:	f000 feb1 	bl	d804 <os_arch_restore_sr>

        if (c) {
    caa2:	b1d4      	cbz	r4, cada <os_callout_tick+0x56>
            if (c->c_evq) {
    caa4:	6920      	ldr	r0, [r4, #16]
    caa6:	b9a0      	cbnz	r0, cad2 <os_callout_tick+0x4e>
                os_eventq_put(c->c_evq, &c->c_ev);
            } else {
                c->c_ev.ev_cb(&c->c_ev);
    caa8:	6863      	ldr	r3, [r4, #4]
    caaa:	4620      	mov	r0, r4
    caac:	4798      	blx	r3
        OS_ENTER_CRITICAL(sr);
    caae:	f000 fea3 	bl	d7f8 <os_arch_save_sr>
        c = TAILQ_FIRST(&g_callout_list);
    cab2:	4b0a      	ldr	r3, [pc, #40]	; (cadc <os_callout_tick+0x58>)
    cab4:	681c      	ldr	r4, [r3, #0]
        if (c) {
    cab6:	2c00      	cmp	r4, #0
    cab8:	d0f1      	beq.n	ca9e <os_callout_tick+0x1a>
            if (OS_TIME_TICK_GEQ(now, c->c_ticks)) {
    caba:	6963      	ldr	r3, [r4, #20]
    cabc:	1aeb      	subs	r3, r5, r3
    cabe:	2b00      	cmp	r3, #0
    cac0:	db05      	blt.n	cace <os_callout_tick+0x4a>
                TAILQ_REMOVE(&g_callout_list, c, c_next);
    cac2:	69a3      	ldr	r3, [r4, #24]
    cac4:	2b00      	cmp	r3, #0
    cac6:	d0e2      	beq.n	ca8e <os_callout_tick+0xa>
    cac8:	69e2      	ldr	r2, [r4, #28]
    caca:	61da      	str	r2, [r3, #28]
    cacc:	e7e2      	b.n	ca94 <os_callout_tick+0x10>
                c = NULL;
    cace:	2400      	movs	r4, #0
    cad0:	e7e5      	b.n	ca9e <os_callout_tick+0x1a>
                os_eventq_put(c->c_evq, &c->c_ev);
    cad2:	4621      	mov	r1, r4
    cad4:	f000 f8f1 	bl	ccba <os_eventq_put>
    cad8:	e7e9      	b.n	caae <os_callout_tick+0x2a>
            break;
        }
    }

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_TICK);
}
    cada:	bd38      	pop	{r3, r4, r5, pc}
    cadc:	20003b4c 	.word	0x20003b4c

0000cae0 <os_callout_wakeup_ticks>:
 *
 * @return Number of ticks to first pending callout
 */
os_time_t
os_callout_wakeup_ticks(os_time_t now)
{
    cae0:	b510      	push	{r4, lr}
    cae2:	4604      	mov	r4, r0
    os_time_t rt;
    struct os_callout *c;

    OS_ASSERT_CRITICAL();
    cae4:	f000 fe91 	bl	d80a <os_arch_in_critical>
    cae8:	b130      	cbz	r0, caf8 <os_callout_wakeup_ticks+0x18>

    c = TAILQ_FIRST(&g_callout_list);
    caea:	4b0b      	ldr	r3, [pc, #44]	; (cb18 <os_callout_wakeup_ticks+0x38>)
    caec:	681b      	ldr	r3, [r3, #0]
    if (c != NULL) {
    caee:	b17b      	cbz	r3, cb10 <os_callout_wakeup_ticks+0x30>
        if (OS_TIME_TICK_GEQ(c->c_ticks, now)) {
    caf0:	6958      	ldr	r0, [r3, #20]
    caf2:	1b00      	subs	r0, r0, r4
    caf4:	d40a      	bmi.n	cb0c <os_callout_wakeup_ticks+0x2c>
    } else {
        rt = OS_TIMEOUT_NEVER;
    }

    return (rt);
}
    caf6:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
    caf8:	f7ff fb76 	bl	c1e8 <hal_debugger_connected>
    cafc:	b100      	cbz	r0, cb00 <os_callout_wakeup_ticks+0x20>
    cafe:	be01      	bkpt	0x0001
    cb00:	2300      	movs	r3, #0
    cb02:	461a      	mov	r2, r3
    cb04:	4619      	mov	r1, r3
    cb06:	4618      	mov	r0, r3
    cb08:	f7ff fda8 	bl	c65c <__assert_func>
            rt = 0;     /* callout time is in the past */
    cb0c:	2000      	movs	r0, #0
    cb0e:	e7f2      	b.n	caf6 <os_callout_wakeup_ticks+0x16>
        rt = OS_TIMEOUT_NEVER;
    cb10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return (rt);
    cb14:	e7ef      	b.n	caf6 <os_callout_wakeup_ticks+0x16>
    cb16:	bf00      	nop
    cb18:	20003b4c 	.word	0x20003b4c

0000cb1c <os_dev_add>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_add(struct os_dev *dev)
{
    cb1c:	b430      	push	{r4, r5}
    struct os_dev *cur_dev;
    struct os_dev *prev_dev;

    /* If no devices present, insert into head */
    if (STAILQ_FIRST(&g_os_dev_list) == NULL) {
    cb1e:	4b15      	ldr	r3, [pc, #84]	; (cb74 <os_dev_add+0x58>)
    cb20:	681d      	ldr	r5, [r3, #0]
    cb22:	b115      	cbz	r5, cb2a <os_dev_add+0xe>
    /* Add devices to the list, sorted first by stage, then by
     * priority.  Keep sorted in this order for initialization
     * stage.
     */
    prev_dev = NULL;
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
    cb24:	462b      	mov	r3, r5
    prev_dev = NULL;
    cb26:	2400      	movs	r4, #0
    cb28:	e008      	b.n	cb3c <os_dev_add+0x20>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
    cb2a:	4603      	mov	r3, r0
    cb2c:	f843 5f20 	str.w	r5, [r3, #32]!
    cb30:	4a10      	ldr	r2, [pc, #64]	; (cb74 <os_dev_add+0x58>)
    cb32:	6053      	str	r3, [r2, #4]
    cb34:	6010      	str	r0, [r2, #0]
        return (0);
    cb36:	e010      	b.n	cb5a <os_dev_add+0x3e>
        if (dev->od_stage < cur_dev->od_stage ||
            ((dev->od_stage == cur_dev->od_stage) &&
             (dev->od_priority < cur_dev->od_priority))) {
            break;
        }
        prev_dev = cur_dev;
    cb38:	461c      	mov	r4, r3
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
    cb3a:	6a1b      	ldr	r3, [r3, #32]
    cb3c:	b143      	cbz	r3, cb50 <os_dev_add+0x34>
        if (dev->od_stage < cur_dev->od_stage ||
    cb3e:	7e01      	ldrb	r1, [r0, #24]
    cb40:	7e1a      	ldrb	r2, [r3, #24]
    cb42:	4291      	cmp	r1, r2
    cb44:	d304      	bcc.n	cb50 <os_dev_add+0x34>
    cb46:	d1f7      	bne.n	cb38 <os_dev_add+0x1c>
             (dev->od_priority < cur_dev->od_priority))) {
    cb48:	7e41      	ldrb	r1, [r0, #25]
    cb4a:	7e5a      	ldrb	r2, [r3, #25]
            ((dev->od_stage == cur_dev->od_stage) &&
    cb4c:	4291      	cmp	r1, r2
    cb4e:	d2f3      	bcs.n	cb38 <os_dev_add+0x1c>
    }

    if (prev_dev) {
    cb50:	b15c      	cbz	r4, cb6a <os_dev_add+0x4e>
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
    cb52:	6a23      	ldr	r3, [r4, #32]
    cb54:	6203      	str	r3, [r0, #32]
    cb56:	b11b      	cbz	r3, cb60 <os_dev_add+0x44>
    cb58:	6220      	str	r0, [r4, #32]
    } else {
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
    }

    return (0);
}
    cb5a:	2000      	movs	r0, #0
    cb5c:	bc30      	pop	{r4, r5}
    cb5e:	4770      	bx	lr
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
    cb60:	f100 0320 	add.w	r3, r0, #32
    cb64:	4a03      	ldr	r2, [pc, #12]	; (cb74 <os_dev_add+0x58>)
    cb66:	6053      	str	r3, [r2, #4]
    cb68:	e7f6      	b.n	cb58 <os_dev_add+0x3c>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
    cb6a:	6205      	str	r5, [r0, #32]
    cb6c:	4b01      	ldr	r3, [pc, #4]	; (cb74 <os_dev_add+0x58>)
    cb6e:	6018      	str	r0, [r3, #0]
    cb70:	e7f3      	b.n	cb5a <os_dev_add+0x3e>
    cb72:	bf00      	nop
    cb74:	20001348 	.word	0x20001348

0000cb78 <os_dev_initialize>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_initialize(struct os_dev *dev)
{
    cb78:	b510      	push	{r4, lr}
    cb7a:	4604      	mov	r4, r0
    int rc;

    rc = dev->od_init(dev, dev->od_init_arg);
    cb7c:	6903      	ldr	r3, [r0, #16]
    cb7e:	6941      	ldr	r1, [r0, #20]
    cb80:	4798      	blx	r3
    if (rc != 0) {
    cb82:	4603      	mov	r3, r0
    cb84:	b128      	cbz	r0, cb92 <os_dev_initialize+0x1a>
        if (dev->od_flags & OS_DEV_F_INIT_CRITICAL) {
    cb86:	7ee2      	ldrb	r2, [r4, #27]
    cb88:	f012 0f08 	tst.w	r2, #8
    cb8c:	d105      	bne.n	cb9a <os_dev_initialize+0x22>
            goto err;
        }
    } else {
        dev->od_flags |= OS_DEV_F_STATUS_READY;
    }
    return 0;
    cb8e:	2300      	movs	r3, #0
    cb90:	e003      	b.n	cb9a <os_dev_initialize+0x22>
        dev->od_flags |= OS_DEV_F_STATUS_READY;
    cb92:	7ee2      	ldrb	r2, [r4, #27]
    cb94:	f042 0201 	orr.w	r2, r2, #1
    cb98:	76e2      	strb	r2, [r4, #27]
err:
    return rc;
}
    cb9a:	4618      	mov	r0, r3
    cb9c:	bd10      	pop	{r4, pc}

0000cb9e <os_dev_init>:
    dev->od_name = name;
    cb9e:	61c1      	str	r1, [r0, #28]
    dev->od_stage = stage;
    cba0:	7602      	strb	r2, [r0, #24]
    dev->od_priority = priority;
    cba2:	7643      	strb	r3, [r0, #25]
    dev->od_flags = 0;
    cba4:	2300      	movs	r3, #0
    cba6:	76c3      	strb	r3, [r0, #27]
    dev->od_open_ref = 0;
    cba8:	7683      	strb	r3, [r0, #26]
    dev->od_init = od_init;
    cbaa:	9a00      	ldr	r2, [sp, #0]
    cbac:	6102      	str	r2, [r0, #16]
    dev->od_init_arg = arg;
    cbae:	9a01      	ldr	r2, [sp, #4]
    cbb0:	6142      	str	r2, [r0, #20]
    memset(&dev->od_handlers, 0, sizeof(dev->od_handlers));
    cbb2:	6003      	str	r3, [r0, #0]
    cbb4:	6043      	str	r3, [r0, #4]
    cbb6:	6083      	str	r3, [r0, #8]
    cbb8:	60c3      	str	r3, [r0, #12]
}
    cbba:	4618      	mov	r0, r3
    cbbc:	4770      	bx	lr
	...

0000cbc0 <os_dev_create>:

int
os_dev_create(struct os_dev *dev, const char *name, uint8_t stage,
        uint8_t priority, os_dev_init_func_t od_init, void *arg)
{
    cbc0:	b530      	push	{r4, r5, lr}
    cbc2:	b083      	sub	sp, #12
    cbc4:	4605      	mov	r5, r0
    int rc;

    rc = os_dev_init(dev, name, stage, priority, od_init, arg);
    cbc6:	9c07      	ldr	r4, [sp, #28]
    cbc8:	9401      	str	r4, [sp, #4]
    cbca:	9c06      	ldr	r4, [sp, #24]
    cbcc:	9400      	str	r4, [sp, #0]
    cbce:	f7ff ffe6 	bl	cb9e <os_dev_init>
    if (rc != 0) {
    cbd2:	4603      	mov	r3, r0
    cbd4:	b110      	cbz	r0, cbdc <os_dev_create+0x1c>
    if (g_os_started) {
        rc = os_dev_initialize(dev);
    }
err:
    return (rc);
}
    cbd6:	4618      	mov	r0, r3
    cbd8:	b003      	add	sp, #12
    cbda:	bd30      	pop	{r4, r5, pc}
    rc = os_dev_add(dev);
    cbdc:	4628      	mov	r0, r5
    cbde:	f7ff ff9d 	bl	cb1c <os_dev_add>
    if (rc != 0) {
    cbe2:	4603      	mov	r3, r0
    cbe4:	2800      	cmp	r0, #0
    cbe6:	d1f6      	bne.n	cbd6 <os_dev_create+0x16>
    if (g_os_started) {
    cbe8:	4a04      	ldr	r2, [pc, #16]	; (cbfc <os_dev_create+0x3c>)
    cbea:	6812      	ldr	r2, [r2, #0]
    cbec:	2a00      	cmp	r2, #0
    cbee:	d0f2      	beq.n	cbd6 <os_dev_create+0x16>
        rc = os_dev_initialize(dev);
    cbf0:	4628      	mov	r0, r5
    cbf2:	f7ff ffc1 	bl	cb78 <os_dev_initialize>
    cbf6:	4603      	mov	r3, r0
    return (rc);
    cbf8:	e7ed      	b.n	cbd6 <os_dev_create+0x16>
    cbfa:	bf00      	nop
    cbfc:	20003af8 	.word	0x20003af8

0000cc00 <os_dev_initialize_all>:

int
os_dev_initialize_all(uint8_t stage)
{
    cc00:	b538      	push	{r3, r4, r5, lr}
    cc02:	4605      	mov	r5, r0
    struct os_dev *dev;
    int rc = 0;

    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
    cc04:	4b08      	ldr	r3, [pc, #32]	; (cc28 <os_dev_initialize_all+0x28>)
    cc06:	681c      	ldr	r4, [r3, #0]
    int rc = 0;
    cc08:	2200      	movs	r2, #0
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
    cc0a:	e000      	b.n	cc0e <os_dev_initialize_all+0xe>
    cc0c:	6a24      	ldr	r4, [r4, #32]
    cc0e:	b144      	cbz	r4, cc22 <os_dev_initialize_all+0x22>
        if (dev->od_stage == stage) {
    cc10:	7e23      	ldrb	r3, [r4, #24]
    cc12:	42ab      	cmp	r3, r5
    cc14:	d1fa      	bne.n	cc0c <os_dev_initialize_all+0xc>
            rc = os_dev_initialize(dev);
    cc16:	4620      	mov	r0, r4
    cc18:	f7ff ffae 	bl	cb78 <os_dev_initialize>
            if (rc) {
    cc1c:	4602      	mov	r2, r0
    cc1e:	2800      	cmp	r0, #0
    cc20:	d0f4      	beq.n	cc0c <os_dev_initialize_all+0xc>
            }
        }
    }

    return (rc);
}
    cc22:	4610      	mov	r0, r2
    cc24:	bd38      	pop	{r3, r4, r5, pc}
    cc26:	bf00      	nop
    cc28:	20001348 	.word	0x20001348

0000cc2c <os_dev_lookup>:
    return (rc);
}

struct os_dev *
os_dev_lookup(const char *name)
{
    cc2c:	b538      	push	{r3, r4, r5, lr}
    cc2e:	4605      	mov	r5, r0
    struct os_dev *dev;

    dev = NULL;
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
    cc30:	4b05      	ldr	r3, [pc, #20]	; (cc48 <os_dev_lookup+0x1c>)
    cc32:	681c      	ldr	r4, [r3, #0]
    cc34:	b134      	cbz	r4, cc44 <os_dev_lookup+0x18>
        if (!strcmp(dev->od_name, name)) {
    cc36:	4629      	mov	r1, r5
    cc38:	69e0      	ldr	r0, [r4, #28]
    cc3a:	f001 fc5d 	bl	e4f8 <strcmp>
    cc3e:	b108      	cbz	r0, cc44 <os_dev_lookup+0x18>
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
    cc40:	6a24      	ldr	r4, [r4, #32]
    cc42:	e7f7      	b.n	cc34 <os_dev_lookup+0x8>
            break;
        }
    }
    return (dev);
}
    cc44:	4620      	mov	r0, r4
    cc46:	bd38      	pop	{r3, r4, r5, pc}
    cc48:	20001348 	.word	0x20001348

0000cc4c <os_dev_open>:

struct os_dev *
os_dev_open(const char *devname, uint32_t timo, void *arg)
{
    cc4c:	b570      	push	{r4, r5, r6, lr}
    cc4e:	460d      	mov	r5, r1
    cc50:	4616      	mov	r6, r2
    struct os_dev *dev;
    os_sr_t sr;
    int rc;

    dev = os_dev_lookup(devname);
    cc52:	f7ff ffeb 	bl	cc2c <os_dev_lookup>
    if (dev == NULL) {
    cc56:	4604      	mov	r4, r0
    cc58:	b1a0      	cbz	r0, cc84 <os_dev_open+0x38>
        return (NULL);
    }

    /* Device is not ready to be opened. */
    if ((dev->od_flags & OS_DEV_F_STATUS_READY) == 0) {
    cc5a:	7ec3      	ldrb	r3, [r0, #27]
    cc5c:	f013 0f01 	tst.w	r3, #1
    cc60:	d012      	beq.n	cc88 <os_dev_open+0x3c>
        return (NULL);
    }

    if (dev->od_handlers.od_open) {
    cc62:	6803      	ldr	r3, [r0, #0]
    cc64:	b11b      	cbz	r3, cc6e <os_dev_open+0x22>
        rc = dev->od_handlers.od_open(dev, timo, arg);
    cc66:	4632      	mov	r2, r6
    cc68:	4629      	mov	r1, r5
    cc6a:	4798      	blx	r3
        if (rc != 0) {
    cc6c:	b970      	cbnz	r0, cc8c <os_dev_open+0x40>
            goto err;
        }
    }

    OS_ENTER_CRITICAL(sr);
    cc6e:	f000 fdc3 	bl	d7f8 <os_arch_save_sr>
    ++dev->od_open_ref;
    cc72:	7ea3      	ldrb	r3, [r4, #26]
    cc74:	3301      	adds	r3, #1
    cc76:	76a3      	strb	r3, [r4, #26]
    dev->od_flags |= OS_DEV_F_STATUS_OPEN;
    cc78:	7ee3      	ldrb	r3, [r4, #27]
    cc7a:	f043 0302 	orr.w	r3, r3, #2
    cc7e:	76e3      	strb	r3, [r4, #27]
    OS_EXIT_CRITICAL(sr);
    cc80:	f000 fdc0 	bl	d804 <os_arch_restore_sr>

    return (dev);
err:
    return (NULL);
}
    cc84:	4620      	mov	r0, r4
    cc86:	bd70      	pop	{r4, r5, r6, pc}
        return (NULL);
    cc88:	2400      	movs	r4, #0
    cc8a:	e7fb      	b.n	cc84 <os_dev_open+0x38>
    return (NULL);
    cc8c:	2400      	movs	r4, #0
    cc8e:	e7f9      	b.n	cc84 <os_dev_open+0x38>

0000cc90 <os_dev_reset>:
}

void
os_dev_reset(void)
{
    STAILQ_INIT(&g_os_dev_list);
    cc90:	4b02      	ldr	r3, [pc, #8]	; (cc9c <os_dev_reset+0xc>)
    cc92:	2200      	movs	r2, #0
    cc94:	601a      	str	r2, [r3, #0]
    cc96:	605b      	str	r3, [r3, #4]
}
    cc98:	4770      	bx	lr
    cc9a:	bf00      	nop
    cc9c:	20001348 	.word	0x20001348

0000cca0 <os_eventq_init>:
static struct os_eventq os_eventq_main;

void
os_eventq_init(struct os_eventq *evq)
{
    memset(evq, 0, sizeof(*evq));
    cca0:	2200      	movs	r2, #0
    cca2:	6002      	str	r2, [r0, #0]
    cca4:	6042      	str	r2, [r0, #4]
    STAILQ_INIT(&evq->evq_list);
    cca6:	4603      	mov	r3, r0
    cca8:	f843 2f08 	str.w	r2, [r3, #8]!
    ccac:	60c3      	str	r3, [r0, #12]
}
    ccae:	4770      	bx	lr

0000ccb0 <os_eventq_inited>:

int
os_eventq_inited(const struct os_eventq *evq)
{
    return evq->evq_list.stqh_last != NULL;
    ccb0:	68c0      	ldr	r0, [r0, #12]
}
    ccb2:	3000      	adds	r0, #0
    ccb4:	bf18      	it	ne
    ccb6:	2001      	movne	r0, #1
    ccb8:	4770      	bx	lr

0000ccba <os_eventq_put>:

void
os_eventq_put(struct os_eventq *evq, struct os_event *ev)
{
    ccba:	b570      	push	{r4, r5, r6, lr}
    int resched;
    os_sr_t sr;

    assert(evq != NULL && os_eventq_inited(evq));
    ccbc:	b1f0      	cbz	r0, ccfc <os_eventq_put+0x42>
    ccbe:	460c      	mov	r4, r1
    ccc0:	4605      	mov	r5, r0
    ccc2:	f7ff fff5 	bl	ccb0 <os_eventq_inited>
    ccc6:	b1c8      	cbz	r0, ccfc <os_eventq_put+0x42>

    os_trace_api_u32x2(OS_TRACE_ID_EVENTQ_PUT, (uint32_t)evq, (uint32_t)ev);

    OS_ENTER_CRITICAL(sr);
    ccc8:	f000 fd96 	bl	d7f8 <os_arch_save_sr>
    cccc:	4606      	mov	r6, r0

    /* Do not queue if already queued */
    if (OS_EVENT_QUEUED(ev)) {
    ccce:	7823      	ldrb	r3, [r4, #0]
    ccd0:	b9f3      	cbnz	r3, cd10 <os_eventq_put+0x56>
        os_trace_api_ret(OS_TRACE_ID_EVENTQ_PUT);
        return;
    }

    /* Queue the event */
    ev->ev_queued = 1;
    ccd2:	2301      	movs	r3, #1
    ccd4:	7023      	strb	r3, [r4, #0]
    STAILQ_INSERT_TAIL(&evq->evq_list, ev, ev_next);
    ccd6:	2300      	movs	r3, #0
    ccd8:	60e3      	str	r3, [r4, #12]
    ccda:	68eb      	ldr	r3, [r5, #12]
    ccdc:	601c      	str	r4, [r3, #0]
    ccde:	340c      	adds	r4, #12
    cce0:	60ec      	str	r4, [r5, #12]

    resched = 0;
    if (evq->evq_task) {
    cce2:	6868      	ldr	r0, [r5, #4]
    cce4:	b1d8      	cbz	r0, cd1e <os_eventq_put+0x64>
        /* If task waiting on event, wake it up.
         * Check if task is sleeping, because another event
         * queue may have woken this task up beforehand.
         */
        if (evq->evq_task->t_state == OS_TASK_SLEEP) {
    cce6:	7b03      	ldrb	r3, [r0, #12]
    cce8:	2b02      	cmp	r3, #2
    ccea:	d014      	beq.n	cd16 <os_eventq_put+0x5c>
    resched = 0;
    ccec:	2400      	movs	r4, #0
            resched = 1;
        }
        /* Either way, NULL out the task, because the task will
         * be awake upon exit of this function.
         */
        evq->evq_task = NULL;
    ccee:	2300      	movs	r3, #0
    ccf0:	606b      	str	r3, [r5, #4]
    }

    OS_EXIT_CRITICAL(sr);
    ccf2:	4630      	mov	r0, r6
    ccf4:	f000 fd86 	bl	d804 <os_arch_restore_sr>

    if (resched) {
    ccf8:	b99c      	cbnz	r4, cd22 <os_eventq_put+0x68>
        os_sched(NULL);
    }

    os_trace_api_ret(OS_TRACE_ID_EVENTQ_PUT);
}
    ccfa:	bd70      	pop	{r4, r5, r6, pc}
    assert(evq != NULL && os_eventq_inited(evq));
    ccfc:	f7ff fa74 	bl	c1e8 <hal_debugger_connected>
    cd00:	b100      	cbz	r0, cd04 <os_eventq_put+0x4a>
    cd02:	be01      	bkpt	0x0001
    cd04:	2300      	movs	r3, #0
    cd06:	461a      	mov	r2, r3
    cd08:	4619      	mov	r1, r3
    cd0a:	4618      	mov	r0, r3
    cd0c:	f7ff fca6 	bl	c65c <__assert_func>
        OS_EXIT_CRITICAL(sr);
    cd10:	f000 fd78 	bl	d804 <os_arch_restore_sr>
    cd14:	e7f1      	b.n	ccfa <os_eventq_put+0x40>
            os_sched_wakeup(evq->evq_task);
    cd16:	f000 fb1d 	bl	d354 <os_sched_wakeup>
            resched = 1;
    cd1a:	2401      	movs	r4, #1
    cd1c:	e7e7      	b.n	ccee <os_eventq_put+0x34>
    resched = 0;
    cd1e:	2400      	movs	r4, #0
    cd20:	e7e7      	b.n	ccf2 <os_eventq_put+0x38>
        os_sched(NULL);
    cd22:	2000      	movs	r0, #0
    cd24:	f000 fba2 	bl	d46c <os_sched>
    cd28:	e7e7      	b.n	ccfa <os_eventq_put+0x40>

0000cd2a <os_eventq_get_no_wait>:
{
    struct os_event *ev;

    os_trace_api_u32(OS_TRACE_ID_EVENTQ_GET_NO_WAIT, (uint32_t)evq);

    ev = STAILQ_FIRST(&evq->evq_list);
    cd2a:	6883      	ldr	r3, [r0, #8]
    if (ev) {
    cd2c:	b123      	cbz	r3, cd38 <os_eventq_get_no_wait+0xe>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
    cd2e:	68da      	ldr	r2, [r3, #12]
    cd30:	6082      	str	r2, [r0, #8]
    cd32:	b11a      	cbz	r2, cd3c <os_eventq_get_no_wait+0x12>
        ev->ev_queued = 0;
    cd34:	2200      	movs	r2, #0
    cd36:	701a      	strb	r2, [r3, #0]
    }

    os_trace_api_ret_u32(OS_TRACE_ID_EVENTQ_GET_NO_WAIT, (uint32_t)ev);

    return ev;
}
    cd38:	4618      	mov	r0, r3
    cd3a:	4770      	bx	lr
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
    cd3c:	f100 0208 	add.w	r2, r0, #8
    cd40:	60c2      	str	r2, [r0, #12]
    cd42:	e7f7      	b.n	cd34 <os_eventq_get_no_wait+0xa>

0000cd44 <os_eventq_get>:

struct os_event *
os_eventq_get(struct os_eventq *evq)
{
    cd44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cd46:	4605      	mov	r5, r0
    os_sr_t sr;
    struct os_task *t;

    os_trace_api_u32(OS_TRACE_ID_EVENTQ_GET, (uint32_t)evq);

    t = os_sched_get_current_task();
    cd48:	f000 fab0 	bl	d2ac <os_sched_get_current_task>
    cd4c:	4604      	mov	r4, r0
    if (evq->evq_owner != t) {
    cd4e:	682b      	ldr	r3, [r5, #0]
    cd50:	4283      	cmp	r3, r0
    cd52:	d001      	beq.n	cd58 <os_eventq_get+0x14>
        if (evq->evq_owner == NULL) {
    cd54:	b9db      	cbnz	r3, cd8e <os_eventq_get+0x4a>
            evq->evq_owner = t;
    cd56:	6028      	str	r0, [r5, #0]
             * by another.
             */
            assert(0);
        }
    }
    OS_ENTER_CRITICAL(sr);
    cd58:	f000 fd4e 	bl	d7f8 <os_arch_save_sr>
    cd5c:	4607      	mov	r7, r0
pull_one:
    ev = STAILQ_FIRST(&evq->evq_list);
    cd5e:	68ae      	ldr	r6, [r5, #8]
    if (ev) {
    cd60:	b9fe      	cbnz	r6, cda2 <os_eventq_get+0x5e>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
        ev->ev_queued = 0;
        t->t_flags &= ~OS_TASK_FLAG_EVQ_WAIT;
    } else {
        evq->evq_task = t;
    cd62:	606c      	str	r4, [r5, #4]
        os_sched_sleep(evq->evq_task, OS_TIMEOUT_NEVER);
    cd64:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    cd68:	4620      	mov	r0, r4
    cd6a:	f000 faab 	bl	d2c4 <os_sched_sleep>
        t->t_flags |= OS_TASK_FLAG_EVQ_WAIT;
    cd6e:	7b63      	ldrb	r3, [r4, #13]
    cd70:	f043 0308 	orr.w	r3, r3, #8
    cd74:	7363      	strb	r3, [r4, #13]
        OS_EXIT_CRITICAL(sr);
    cd76:	4638      	mov	r0, r7
    cd78:	f000 fd44 	bl	d804 <os_arch_restore_sr>

        os_sched(NULL);
    cd7c:	2000      	movs	r0, #0
    cd7e:	f000 fb75 	bl	d46c <os_sched>

        OS_ENTER_CRITICAL(sr);
    cd82:	f000 fd39 	bl	d7f8 <os_arch_save_sr>
    cd86:	4607      	mov	r7, r0
        evq->evq_task = NULL;
    cd88:	2300      	movs	r3, #0
    cd8a:	606b      	str	r3, [r5, #4]
        goto pull_one;
    cd8c:	e7e7      	b.n	cd5e <os_eventq_get+0x1a>
            assert(0);
    cd8e:	f7ff fa2b 	bl	c1e8 <hal_debugger_connected>
    cd92:	b100      	cbz	r0, cd96 <os_eventq_get+0x52>
    cd94:	be01      	bkpt	0x0001
    cd96:	2300      	movs	r3, #0
    cd98:	461a      	mov	r2, r3
    cd9a:	4619      	mov	r1, r3
    cd9c:	4618      	mov	r0, r3
    cd9e:	f7ff fc5d 	bl	c65c <__assert_func>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
    cda2:	68f3      	ldr	r3, [r6, #12]
    cda4:	60ab      	str	r3, [r5, #8]
    cda6:	b153      	cbz	r3, cdbe <os_eventq_get+0x7a>
        ev->ev_queued = 0;
    cda8:	2300      	movs	r3, #0
    cdaa:	7033      	strb	r3, [r6, #0]
        t->t_flags &= ~OS_TASK_FLAG_EVQ_WAIT;
    cdac:	7b63      	ldrb	r3, [r4, #13]
    cdae:	f023 0308 	bic.w	r3, r3, #8
    cdb2:	7363      	strb	r3, [r4, #13]
    }
    OS_EXIT_CRITICAL(sr);
    cdb4:	4638      	mov	r0, r7
    cdb6:	f000 fd25 	bl	d804 <os_arch_restore_sr>
#if MYNEWT_VAL(OS_EVENTQ_DEBUG)
    evq->evq_prev = ev;
#endif

    return (ev);
}
    cdba:	4630      	mov	r0, r6
    cdbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
    cdbe:	f105 0308 	add.w	r3, r5, #8
    cdc2:	60eb      	str	r3, [r5, #12]
    cdc4:	e7f0      	b.n	cda8 <os_eventq_get+0x64>

0000cdc6 <os_eventq_run>:
}
#endif

void
os_eventq_run(struct os_eventq *evq)
{
    cdc6:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_EVENTQ_MONITOR)
    struct os_eventq_mon *mon;
    uint32_t ticks;
#endif

    ev = os_eventq_get(evq);
    cdc8:	f7ff ffbc 	bl	cd44 <os_eventq_get>
    assert(ev->ev_cb != NULL);
    cdcc:	6843      	ldr	r3, [r0, #4]
    cdce:	b10b      	cbz	r3, cdd4 <os_eventq_run+0xe>
#if MYNEWT_VAL(OS_EVENTQ_MONITOR)
    ticks = os_cputime_get32();
#endif
    ev->ev_cb(ev);
    cdd0:	4798      	blx	r3
        if (ticks > mon->em_max) {
            mon->em_max = ticks;
        }
    }
#endif
}
    cdd2:	bd08      	pop	{r3, pc}
    assert(ev->ev_cb != NULL);
    cdd4:	f7ff fa08 	bl	c1e8 <hal_debugger_connected>
    cdd8:	b100      	cbz	r0, cddc <os_eventq_run+0x16>
    cdda:	be01      	bkpt	0x0001
    cddc:	2300      	movs	r3, #0
    cdde:	461a      	mov	r2, r3
    cde0:	4619      	mov	r1, r3
    cde2:	4618      	mov	r0, r3
    cde4:	f7ff fc3a 	bl	c65c <__assert_func>

0000cde8 <os_eventq_remove>:
    return (ev);
}

void
os_eventq_remove(struct os_eventq *evq, struct os_event *ev)
{
    cde8:	b538      	push	{r3, r4, r5, lr}
    cdea:	4605      	mov	r5, r0
    cdec:	460c      	mov	r4, r1
    os_sr_t sr;

    os_trace_api_u32x2(OS_TRACE_ID_EVENTQ_REMOVE, (uint32_t)evq, (uint32_t)ev);

    OS_ENTER_CRITICAL(sr);
    cdee:	f000 fd03 	bl	d7f8 <os_arch_save_sr>
    if (OS_EVENT_QUEUED(ev)) {
    cdf2:	7823      	ldrb	r3, [r4, #0]
    cdf4:	b183      	cbz	r3, ce18 <os_eventq_remove+0x30>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
    cdf6:	68aa      	ldr	r2, [r5, #8]
    cdf8:	42a2      	cmp	r2, r4
    cdfa:	d107      	bne.n	ce0c <os_eventq_remove+0x24>
    cdfc:	68d3      	ldr	r3, [r2, #12]
    cdfe:	60ab      	str	r3, [r5, #8]
    ce00:	b953      	cbnz	r3, ce18 <os_eventq_remove+0x30>
    ce02:	f105 0308 	add.w	r3, r5, #8
    ce06:	60eb      	str	r3, [r5, #12]
    ce08:	e006      	b.n	ce18 <os_eventq_remove+0x30>
    ce0a:	461a      	mov	r2, r3
    ce0c:	68d3      	ldr	r3, [r2, #12]
    ce0e:	42a3      	cmp	r3, r4
    ce10:	d1fb      	bne.n	ce0a <os_eventq_remove+0x22>
    ce12:	68db      	ldr	r3, [r3, #12]
    ce14:	60d3      	str	r3, [r2, #12]
    ce16:	b123      	cbz	r3, ce22 <os_eventq_remove+0x3a>
    }
    ev->ev_queued = 0;
    ce18:	2300      	movs	r3, #0
    ce1a:	7023      	strb	r3, [r4, #0]
    OS_EXIT_CRITICAL(sr);
    ce1c:	f000 fcf2 	bl	d804 <os_arch_restore_sr>

    os_trace_api_ret(OS_TRACE_ID_EVENTQ_REMOVE);
}
    ce20:	bd38      	pop	{r3, r4, r5, pc}
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
    ce22:	320c      	adds	r2, #12
    ce24:	60ea      	str	r2, [r5, #12]
    ce26:	e7f7      	b.n	ce18 <os_eventq_remove+0x30>

0000ce28 <os_eventq_dflt_get>:

struct os_eventq *
os_eventq_dflt_get(void)
{
    return &os_eventq_main;
}
    ce28:	4800      	ldr	r0, [pc, #0]	; (ce2c <os_eventq_dflt_get+0x4>)
    ce2a:	4770      	bx	lr
    ce2c:	20001350 	.word	0x20001350

0000ce30 <os_mempool_init_internal>:
    int i;
    uint8_t *block_addr;
    struct os_memblock *block_ptr;

    /* Check for valid parameters */
    if (!mp || (block_size == 0)) {
    ce30:	2800      	cmp	r0, #0
    ce32:	d031      	beq.n	ce98 <os_mempool_init_internal+0x68>
{
    ce34:	b430      	push	{r4, r5}
    ce36:	4604      	mov	r4, r0
    if (!mp || (block_size == 0)) {
    ce38:	2a00      	cmp	r2, #0
    ce3a:	d02f      	beq.n	ce9c <os_mempool_init_internal+0x6c>
        return OS_INVALID_PARM;
    }

    if ((!membuf) && (blocks != 0)) {
    ce3c:	b1bb      	cbz	r3, ce6e <os_mempool_init_internal+0x3e>
        return OS_INVALID_PARM;
    }

    if (membuf != NULL) {
    ce3e:	b113      	cbz	r3, ce46 <os_mempool_init_internal+0x16>
        /* Blocks need to be sized properly and memory buffer should be
         * aligned
         */
        if (((uint32_t)membuf & (OS_ALIGNMENT - 1)) != 0) {
    ce40:	f013 0f03 	tst.w	r3, #3
    ce44:	d12c      	bne.n	cea0 <os_mempool_init_internal+0x70>
            return OS_MEM_NOT_ALIGNED;
        }
    }

    /* Initialize the memory pool structure */
    mp->mp_block_size = block_size;
    ce46:	6022      	str	r2, [r4, #0]
    mp->mp_num_free = blocks;
    ce48:	80e1      	strh	r1, [r4, #6]
    mp->mp_min_free = blocks;
    ce4a:	8121      	strh	r1, [r4, #8]
    mp->mp_flags = flags;
    ce4c:	f89d 000c 	ldrb.w	r0, [sp, #12]
    ce50:	72a0      	strb	r0, [r4, #10]
    mp->mp_num_blocks = blocks;
    ce52:	80a1      	strh	r1, [r4, #4]
    mp->mp_membuf_addr = (uint32_t)membuf;
    ce54:	60e3      	str	r3, [r4, #12]
    mp->name = name;
    ce56:	9802      	ldr	r0, [sp, #8]
    ce58:	61a0      	str	r0, [r4, #24]
    SLIST_FIRST(mp) = membuf;
    ce5a:	6163      	str	r3, [r4, #20]

    if (blocks > 0) {
    ce5c:	b199      	cbz	r1, ce86 <os_mempool_init_internal+0x56>
        os_mempool_poison(mp, membuf);
        os_mempool_guard(mp, membuf);
        true_block_size = OS_MEMPOOL_TRUE_BLOCK_SIZE(mp);
    ce5e:	f012 0f03 	tst.w	r2, #3
    ce62:	d002      	beq.n	ce6a <os_mempool_init_internal+0x3a>
    ce64:	f022 0203 	bic.w	r2, r2, #3
    ce68:	3204      	adds	r2, #4

        /* Chain the memory blocks to the free list */
        block_addr = (uint8_t *)membuf;
        block_ptr = (struct os_memblock *)block_addr;
        for (i = 1; i < blocks; i++) {
    ce6a:	2001      	movs	r0, #1
    ce6c:	e007      	b.n	ce7e <os_mempool_init_internal+0x4e>
    if ((!membuf) && (blocks != 0)) {
    ce6e:	2900      	cmp	r1, #0
    ce70:	d0e5      	beq.n	ce3e <os_mempool_init_internal+0xe>
        return OS_INVALID_PARM;
    ce72:	2003      	movs	r0, #3
    ce74:	e00e      	b.n	ce94 <os_mempool_init_internal+0x64>
            block_addr += true_block_size;
    ce76:	189d      	adds	r5, r3, r2
            os_mempool_poison(mp, block_addr);
            os_mempool_guard(mp, block_addr);
            SLIST_NEXT(block_ptr, mb_next) = (struct os_memblock *)block_addr;
    ce78:	601d      	str	r5, [r3, #0]
        for (i = 1; i < blocks; i++) {
    ce7a:	3001      	adds	r0, #1
            block_addr += true_block_size;
    ce7c:	462b      	mov	r3, r5
        for (i = 1; i < blocks; i++) {
    ce7e:	4281      	cmp	r1, r0
    ce80:	dcf9      	bgt.n	ce76 <os_mempool_init_internal+0x46>
            block_ptr = (struct os_memblock *)block_addr;
        }

        /* Last one in the list should be NULL */
        SLIST_NEXT(block_ptr, mb_next) = NULL;
    ce82:	2200      	movs	r2, #0
    ce84:	601a      	str	r2, [r3, #0]
    }

    STAILQ_INSERT_TAIL(&g_os_mempool_list, mp, mp_list);
    ce86:	2000      	movs	r0, #0
    ce88:	6120      	str	r0, [r4, #16]
    ce8a:	4b06      	ldr	r3, [pc, #24]	; (cea4 <os_mempool_init_internal+0x74>)
    ce8c:	685a      	ldr	r2, [r3, #4]
    ce8e:	6014      	str	r4, [r2, #0]
    ce90:	3410      	adds	r4, #16
    ce92:	605c      	str	r4, [r3, #4]

    return OS_OK;
}
    ce94:	bc30      	pop	{r4, r5}
    ce96:	4770      	bx	lr
        return OS_INVALID_PARM;
    ce98:	2003      	movs	r0, #3
}
    ce9a:	4770      	bx	lr
        return OS_INVALID_PARM;
    ce9c:	2003      	movs	r0, #3
    ce9e:	e7f9      	b.n	ce94 <os_mempool_init_internal+0x64>
            return OS_MEM_NOT_ALIGNED;
    cea0:	2004      	movs	r0, #4
    cea2:	e7f7      	b.n	ce94 <os_mempool_init_internal+0x64>
    cea4:	20003b54 	.word	0x20003b54

0000cea8 <os_mempool_init>:

os_error_t
os_mempool_init(struct os_mempool *mp, uint16_t blocks, uint32_t block_size,
                void *membuf, char *name)
{
    cea8:	b510      	push	{r4, lr}
    ceaa:	b082      	sub	sp, #8
    return os_mempool_init_internal(mp, blocks, block_size, membuf, name, 0);
    ceac:	2400      	movs	r4, #0
    ceae:	9401      	str	r4, [sp, #4]
    ceb0:	9c04      	ldr	r4, [sp, #16]
    ceb2:	9400      	str	r4, [sp, #0]
    ceb4:	f7ff ffbc 	bl	ce30 <os_mempool_init_internal>
}
    ceb8:	b002      	add	sp, #8
    ceba:	bd10      	pop	{r4, pc}

0000cebc <os_mempool_clear>:
    struct os_memblock *block_ptr;
    int true_block_size;
    uint8_t *block_addr;
    uint16_t blocks;

    if (!mp) {
    cebc:	4601      	mov	r1, r0
    cebe:	b1b0      	cbz	r0, ceee <os_mempool_clear+0x32>
        return OS_INVALID_PARM;
    }

    true_block_size = OS_MEMPOOL_TRUE_BLOCK_SIZE(mp);
    cec0:	6800      	ldr	r0, [r0, #0]
    cec2:	f010 0f03 	tst.w	r0, #3
    cec6:	d002      	beq.n	cece <os_mempool_clear+0x12>
    cec8:	f020 0003 	bic.w	r0, r0, #3
    cecc:	3004      	adds	r0, #4

    /* cleanup the memory pool structure */
    mp->mp_num_free = mp->mp_num_blocks;
    cece:	888b      	ldrh	r3, [r1, #4]
    ced0:	80cb      	strh	r3, [r1, #6]
    mp->mp_min_free = mp->mp_num_blocks;
    ced2:	810b      	strh	r3, [r1, #8]
    os_mempool_poison(mp, (void *)mp->mp_membuf_addr);
    os_mempool_guard(mp, (void *)mp->mp_membuf_addr);
    SLIST_FIRST(mp) = (void *)mp->mp_membuf_addr;
    ced4:	68ca      	ldr	r2, [r1, #12]
    ced6:	614a      	str	r2, [r1, #20]
    /* Chain the memory blocks to the free list */
    block_addr = (uint8_t *)mp->mp_membuf_addr;
    block_ptr = (struct os_memblock *)block_addr;
    blocks = mp->mp_num_blocks;

    while (blocks > 1) {
    ced8:	e004      	b.n	cee4 <os_mempool_clear+0x28>
        block_addr += true_block_size;
    ceda:	1811      	adds	r1, r2, r0
        os_mempool_poison(mp, block_addr);
        os_mempool_guard(mp, block_addr);
        SLIST_NEXT(block_ptr, mb_next) = (struct os_memblock *)block_addr;
    cedc:	6011      	str	r1, [r2, #0]
        block_ptr = (struct os_memblock *)block_addr;
        --blocks;
    cede:	3b01      	subs	r3, #1
    cee0:	b29b      	uxth	r3, r3
        block_ptr = (struct os_memblock *)block_addr;
    cee2:	460a      	mov	r2, r1
    while (blocks > 1) {
    cee4:	2b01      	cmp	r3, #1
    cee6:	d8f8      	bhi.n	ceda <os_mempool_clear+0x1e>
    }

    /* Last one in the list should be NULL */
    SLIST_NEXT(block_ptr, mb_next) = NULL;
    cee8:	2000      	movs	r0, #0
    ceea:	6010      	str	r0, [r2, #0]

    return OS_OK;
    ceec:	4770      	bx	lr
        return OS_INVALID_PARM;
    ceee:	2003      	movs	r0, #3
}
    cef0:	4770      	bx	lr

0000cef2 <os_memblock_from>:
    return true;
}

int
os_memblock_from(const struct os_mempool *mp, const void *block_addr)
{
    cef2:	b410      	push	{r4}

    static_assert(sizeof block_addr == sizeof baddr32,
                  "Pointer to void must be 32-bits.");

    baddr32 = (uint32_t)block_addr;
    true_block_size = OS_MEMPOOL_TRUE_BLOCK_SIZE(mp);
    cef4:	6803      	ldr	r3, [r0, #0]
    cef6:	f013 0f03 	tst.w	r3, #3
    cefa:	d002      	beq.n	cf02 <os_memblock_from+0x10>
    cefc:	f023 0303 	bic.w	r3, r3, #3
    cf00:	3304      	adds	r3, #4
    end = mp->mp_membuf_addr + (mp->mp_num_blocks * true_block_size);
    cf02:	68c4      	ldr	r4, [r0, #12]
    cf04:	8882      	ldrh	r2, [r0, #4]
    cf06:	fb03 4202 	mla	r2, r3, r2, r4

    /* Check that the block is in the memory buffer range. */
    if ((baddr32 < mp->mp_membuf_addr) || (baddr32 >= end)) {
    cf0a:	428c      	cmp	r4, r1
    cf0c:	d80b      	bhi.n	cf26 <os_memblock_from+0x34>
    cf0e:	4291      	cmp	r1, r2
    cf10:	d20c      	bcs.n	cf2c <os_memblock_from+0x3a>
        return 0;
    }

    /* All freed blocks should be on true block size boundaries! */
    if (((baddr32 - mp->mp_membuf_addr) % true_block_size) != 0) {
    cf12:	1b09      	subs	r1, r1, r4
    cf14:	fbb1 f2f3 	udiv	r2, r1, r3
    cf18:	fb03 1112 	mls	r1, r3, r2, r1
    cf1c:	b909      	cbnz	r1, cf22 <os_memblock_from+0x30>
        return 0;
    }

    return 1;
    cf1e:	2001      	movs	r0, #1
    cf20:	e002      	b.n	cf28 <os_memblock_from+0x36>
        return 0;
    cf22:	2000      	movs	r0, #0
    cf24:	e000      	b.n	cf28 <os_memblock_from+0x36>
        return 0;
    cf26:	2000      	movs	r0, #0
}
    cf28:	bc10      	pop	{r4}
    cf2a:	4770      	bx	lr
        return 0;
    cf2c:	2000      	movs	r0, #0
    cf2e:	e7fb      	b.n	cf28 <os_memblock_from+0x36>

0000cf30 <os_memblock_get>:

void *
os_memblock_get(struct os_mempool *mp)
{
    cf30:	b538      	push	{r3, r4, r5, lr}

    os_trace_api_u32(OS_TRACE_ID_MEMBLOCK_GET, (uint32_t)mp);

    /* Check to make sure they passed in a memory pool (or something) */
    block = NULL;
    if (mp) {
    cf32:	b1a0      	cbz	r0, cf5e <os_memblock_get+0x2e>
    cf34:	4604      	mov	r4, r0
        OS_ENTER_CRITICAL(sr);
    cf36:	f000 fc5f 	bl	d7f8 <os_arch_save_sr>
        /* Check for any free */
        if (mp->mp_num_free) {
    cf3a:	88e3      	ldrh	r3, [r4, #6]
    cf3c:	b153      	cbz	r3, cf54 <os_memblock_get+0x24>
            /* Get a free block */
            block = SLIST_FIRST(mp);
    cf3e:	6965      	ldr	r5, [r4, #20]

            /* Set new free list head */
            SLIST_FIRST(mp) = SLIST_NEXT(block, mb_next);
    cf40:	682a      	ldr	r2, [r5, #0]
    cf42:	6162      	str	r2, [r4, #20]

            /* Decrement number free by 1 */
            mp->mp_num_free--;
    cf44:	3b01      	subs	r3, #1
    cf46:	b29b      	uxth	r3, r3
    cf48:	80e3      	strh	r3, [r4, #6]
            if (mp->mp_min_free > mp->mp_num_free) {
    cf4a:	8922      	ldrh	r2, [r4, #8]
    cf4c:	4293      	cmp	r3, r2
    cf4e:	d202      	bcs.n	cf56 <os_memblock_get+0x26>
                mp->mp_min_free = mp->mp_num_free;
    cf50:	8123      	strh	r3, [r4, #8]
    cf52:	e000      	b.n	cf56 <os_memblock_get+0x26>
    block = NULL;
    cf54:	2500      	movs	r5, #0
            }
        }
        OS_EXIT_CRITICAL(sr);
    cf56:	f000 fc55 	bl	d804 <os_arch_restore_sr>
    }

    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_GET, (uint32_t)block);

    return (void *)block;
}
    cf5a:	4628      	mov	r0, r5
    cf5c:	bd38      	pop	{r3, r4, r5, pc}
    block = NULL;
    cf5e:	2500      	movs	r5, #0
    return (void *)block;
    cf60:	e7fb      	b.n	cf5a <os_memblock_get+0x2a>

0000cf62 <os_memblock_put_from_cb>:

os_error_t
os_memblock_put_from_cb(struct os_mempool *mp, void *block_addr)
{
    cf62:	b538      	push	{r3, r4, r5, lr}
    cf64:	4604      	mov	r4, r0
    cf66:	460d      	mov	r5, r1

    os_mempool_guard_check(mp, block_addr);
    os_mempool_poison(mp, block_addr);

    block = (struct os_memblock *)block_addr;
    OS_ENTER_CRITICAL(sr);
    cf68:	f000 fc46 	bl	d7f8 <os_arch_save_sr>

    /* Chain current free list pointer to this block; make this block head */
    SLIST_NEXT(block, mb_next) = SLIST_FIRST(mp);
    cf6c:	6963      	ldr	r3, [r4, #20]
    cf6e:	602b      	str	r3, [r5, #0]
    SLIST_FIRST(mp) = block;
    cf70:	6165      	str	r5, [r4, #20]

    /* XXX: Should we check that the number free <= number blocks? */
    /* Increment number free */
    mp->mp_num_free++;
    cf72:	88e3      	ldrh	r3, [r4, #6]
    cf74:	3301      	adds	r3, #1
    cf76:	80e3      	strh	r3, [r4, #6]

    OS_EXIT_CRITICAL(sr);
    cf78:	f000 fc44 	bl	d804 <os_arch_restore_sr>

    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_PUT_FROM_CB, (uint32_t)OS_OK);

    return OS_OK;
}
    cf7c:	2000      	movs	r0, #0
    cf7e:	bd38      	pop	{r3, r4, r5, pc}

0000cf80 <os_memblock_put>:

    os_trace_api_u32x2(OS_TRACE_ID_MEMBLOCK_PUT, (uint32_t)mp,
                       (uint32_t)block_addr);

    /* Make sure parameters are valid */
    if ((mp == NULL) || (block_addr == NULL)) {
    cf80:	b168      	cbz	r0, cf9e <os_memblock_put+0x1e>
{
    cf82:	b508      	push	{r3, lr}
    if ((mp == NULL) || (block_addr == NULL)) {
    cf84:	b169      	cbz	r1, cfa2 <os_memblock_put+0x22>
    }
#endif
    /* If this is an extended mempool with a put callback, call the callback
     * instead of freeing the block directly.
     */
    if (mp->mp_flags & OS_MEMPOOL_F_EXT) {
    cf86:	7a83      	ldrb	r3, [r0, #10]
    cf88:	f013 0f01 	tst.w	r3, #1
    cf8c:	d004      	beq.n	cf98 <os_memblock_put+0x18>
        mpe = (struct os_mempool_ext *)mp;
        if (mpe->mpe_put_cb != NULL) {
    cf8e:	69c3      	ldr	r3, [r0, #28]
    cf90:	b113      	cbz	r3, cf98 <os_memblock_put+0x18>
            ret = mpe->mpe_put_cb(mpe, block_addr, mpe->mpe_put_arg);
    cf92:	6a02      	ldr	r2, [r0, #32]
    cf94:	4798      	blx	r3
    ret = os_memblock_put_from_cb(mp, block_addr);

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_PUT, (uint32_t)ret);
    return ret;
}
    cf96:	bd08      	pop	{r3, pc}
    ret = os_memblock_put_from_cb(mp, block_addr);
    cf98:	f7ff ffe3 	bl	cf62 <os_memblock_put_from_cb>
    cf9c:	e7fb      	b.n	cf96 <os_memblock_put+0x16>
        ret = OS_INVALID_PARM;
    cf9e:	2003      	movs	r0, #3
}
    cfa0:	4770      	bx	lr
        ret = OS_INVALID_PARM;
    cfa2:	2003      	movs	r0, #3
    cfa4:	e7f7      	b.n	cf96 <os_memblock_put+0x16>
	...

0000cfa8 <os_mempool_module_init>:
}

void
os_mempool_module_init(void)
{
    STAILQ_INIT(&g_os_mempool_list);
    cfa8:	4b02      	ldr	r3, [pc, #8]	; (cfb4 <os_mempool_module_init+0xc>)
    cfaa:	2200      	movs	r2, #0
    cfac:	601a      	str	r2, [r3, #0]
    cfae:	605b      	str	r3, [r3, #4]
}
    cfb0:	4770      	bx	lr
    cfb2:	bf00      	nop
    cfb4:	20003b54 	.word	0x20003b54

0000cfb8 <os_msys_find_biggest_pool>:

static struct os_mbuf_pool *
os_msys_find_biggest_pool(void)
{
    /* Mempools are sorted by the blocksize, so just return last one */
    return STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
    cfb8:	4b02      	ldr	r3, [pc, #8]	; (cfc4 <os_msys_find_biggest_pool+0xc>)
    cfba:	6818      	ldr	r0, [r3, #0]
    cfbc:	b108      	cbz	r0, cfc2 <os_msys_find_biggest_pool+0xa>
    cfbe:	6858      	ldr	r0, [r3, #4]
    cfc0:	3808      	subs	r0, #8
}
    cfc2:	4770      	bx	lr
    cfc4:	20000110 	.word	0x20000110

0000cfc8 <os_msys_find_pool>:
os_msys_find_pool(uint16_t dsize)
{
    struct os_mbuf_pool *pool;

    pool = NULL;
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
    cfc8:	4b09      	ldr	r3, [pc, #36]	; (cff0 <os_msys_find_pool+0x28>)
    cfca:	6819      	ldr	r1, [r3, #0]
    cfcc:	460b      	mov	r3, r1
    cfce:	b123      	cbz	r3, cfda <os_msys_find_pool+0x12>
        if (dsize <= pool->omp_databuf_len) {
    cfd0:	881a      	ldrh	r2, [r3, #0]
    cfd2:	4282      	cmp	r2, r0
    cfd4:	d201      	bcs.n	cfda <os_msys_find_pool+0x12>
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
    cfd6:	689b      	ldr	r3, [r3, #8]
    cfd8:	e7f9      	b.n	cfce <os_msys_find_pool+0x6>
            break;
        }
    }

    if (!pool) {
    cfda:	b10b      	cbz	r3, cfe0 <os_msys_find_pool+0x18>
        pool = STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
    }

    return (pool);
}
    cfdc:	4618      	mov	r0, r3
    cfde:	4770      	bx	lr
        pool = STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
    cfe0:	b119      	cbz	r1, cfea <os_msys_find_pool+0x22>
    cfe2:	4b03      	ldr	r3, [pc, #12]	; (cff0 <os_msys_find_pool+0x28>)
    cfe4:	685b      	ldr	r3, [r3, #4]
    cfe6:	3b08      	subs	r3, #8
    cfe8:	e7f8      	b.n	cfdc <os_msys_find_pool+0x14>
    cfea:	460b      	mov	r3, r1
    return (pool);
    cfec:	e7f6      	b.n	cfdc <os_msys_find_pool+0x14>
    cfee:	bf00      	nop
    cff0:	20000110 	.word	0x20000110

0000cff4 <os_msys_register>:
{
    cff4:	b430      	push	{r4, r5}
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
    cff6:	4b11      	ldr	r3, [pc, #68]	; (d03c <os_msys_register+0x48>)
    cff8:	681d      	ldr	r5, [r3, #0]
    cffa:	462b      	mov	r3, r5
    prev = NULL;
    cffc:	2400      	movs	r4, #0
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
    cffe:	b133      	cbz	r3, d00e <os_msys_register+0x1a>
        if (new_pool->omp_databuf_len < pool->omp_databuf_len) {
    d000:	8801      	ldrh	r1, [r0, #0]
    d002:	881a      	ldrh	r2, [r3, #0]
    d004:	4291      	cmp	r1, r2
    d006:	d302      	bcc.n	d00e <os_msys_register+0x1a>
        prev = pool;
    d008:	461c      	mov	r4, r3
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
    d00a:	689b      	ldr	r3, [r3, #8]
    d00c:	e7f7      	b.n	cffe <os_msys_register+0xa>
    if (prev) {
    d00e:	b15c      	cbz	r4, d028 <os_msys_register+0x34>
        STAILQ_INSERT_AFTER(&g_msys_pool_list, prev, new_pool, omp_next);
    d010:	68a3      	ldr	r3, [r4, #8]
    d012:	6083      	str	r3, [r0, #8]
    d014:	b11b      	cbz	r3, d01e <os_msys_register+0x2a>
    d016:	60a0      	str	r0, [r4, #8]
}
    d018:	2000      	movs	r0, #0
    d01a:	bc30      	pop	{r4, r5}
    d01c:	4770      	bx	lr
        STAILQ_INSERT_AFTER(&g_msys_pool_list, prev, new_pool, omp_next);
    d01e:	f100 0308 	add.w	r3, r0, #8
    d022:	4a06      	ldr	r2, [pc, #24]	; (d03c <os_msys_register+0x48>)
    d024:	6053      	str	r3, [r2, #4]
    d026:	e7f6      	b.n	d016 <os_msys_register+0x22>
        STAILQ_INSERT_HEAD(&g_msys_pool_list, new_pool, omp_next);
    d028:	6085      	str	r5, [r0, #8]
    d02a:	b115      	cbz	r5, d032 <os_msys_register+0x3e>
    d02c:	4b03      	ldr	r3, [pc, #12]	; (d03c <os_msys_register+0x48>)
    d02e:	6018      	str	r0, [r3, #0]
    d030:	e7f2      	b.n	d018 <os_msys_register+0x24>
    d032:	f100 0308 	add.w	r3, r0, #8
    d036:	4a01      	ldr	r2, [pc, #4]	; (d03c <os_msys_register+0x48>)
    d038:	6053      	str	r3, [r2, #4]
    d03a:	e7f7      	b.n	d02c <os_msys_register+0x38>
    d03c:	20000110 	.word	0x20000110

0000d040 <os_msys_init_once>:

static void
os_msys_init_once(void *data, struct os_mempool *mempool,
                  struct os_mbuf_pool *mbuf_pool,
                  int block_count, int block_size, char *name)
{
    d040:	b530      	push	{r4, r5, lr}
    d042:	b083      	sub	sp, #12
    d044:	4614      	mov	r4, r2
    int rc;

    rc = mem_init_mbuf_pool(data, mempool, mbuf_pool, block_count, block_size,
    d046:	9d07      	ldr	r5, [sp, #28]
    d048:	9501      	str	r5, [sp, #4]
    d04a:	9d06      	ldr	r5, [sp, #24]
    d04c:	9500      	str	r5, [sp, #0]
    d04e:	f003 f831 	bl	100b4 <mem_init_mbuf_pool>
                            name);
    SYSINIT_PANIC_ASSERT(rc == 0);
    d052:	b928      	cbnz	r0, d060 <os_msys_init_once+0x20>

    rc = os_msys_register(mbuf_pool);
    d054:	4620      	mov	r0, r4
    d056:	f7ff ffcd 	bl	cff4 <os_msys_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
    d05a:	b970      	cbnz	r0, d07a <os_msys_init_once+0x3a>
}
    d05c:	b003      	add	sp, #12
    d05e:	bd30      	pop	{r4, r5, pc}
    SYSINIT_PANIC_ASSERT(rc == 0);
    d060:	f7ff f8c2 	bl	c1e8 <hal_debugger_connected>
    d064:	b100      	cbz	r0, d068 <os_msys_init_once+0x28>
    d066:	be01      	bkpt	0x0001
    d068:	2000      	movs	r0, #0
    d06a:	9000      	str	r0, [sp, #0]
    d06c:	4b09      	ldr	r3, [pc, #36]	; (d094 <os_msys_init_once+0x54>)
    d06e:	681d      	ldr	r5, [r3, #0]
    d070:	4603      	mov	r3, r0
    d072:	4602      	mov	r2, r0
    d074:	4601      	mov	r1, r0
    d076:	47a8      	blx	r5
    d078:	e7ec      	b.n	d054 <os_msys_init_once+0x14>
    SYSINIT_PANIC_ASSERT(rc == 0);
    d07a:	f7ff f8b5 	bl	c1e8 <hal_debugger_connected>
    d07e:	b100      	cbz	r0, d082 <os_msys_init_once+0x42>
    d080:	be01      	bkpt	0x0001
    d082:	2000      	movs	r0, #0
    d084:	9000      	str	r0, [sp, #0]
    d086:	4b03      	ldr	r3, [pc, #12]	; (d094 <os_msys_init_once+0x54>)
    d088:	681c      	ldr	r4, [r3, #0]
    d08a:	4603      	mov	r3, r0
    d08c:	4602      	mov	r2, r0
    d08e:	4601      	mov	r1, r0
    d090:	47a0      	blx	r4
}
    d092:	e7e3      	b.n	d05c <os_msys_init_once+0x1c>
    d094:	20000144 	.word	0x20000144

0000d098 <os_msys_reset>:
    STAILQ_INIT(&g_msys_pool_list);
    d098:	4b02      	ldr	r3, [pc, #8]	; (d0a4 <os_msys_reset+0xc>)
    d09a:	2200      	movs	r2, #0
    d09c:	601a      	str	r2, [r3, #0]
    d09e:	605b      	str	r3, [r3, #4]
}
    d0a0:	4770      	bx	lr
    d0a2:	bf00      	nop
    d0a4:	20000110 	.word	0x20000110

0000d0a8 <os_msys_get>:
{
    d0a8:	b510      	push	{r4, lr}
    d0aa:	460c      	mov	r4, r1
    if (dsize == 0) {
    d0ac:	b930      	cbnz	r0, d0bc <os_msys_get+0x14>
        pool = os_msys_find_biggest_pool();
    d0ae:	f7ff ff83 	bl	cfb8 <os_msys_find_biggest_pool>
    if (!pool) {
    d0b2:	b130      	cbz	r0, d0c2 <os_msys_get+0x1a>
    m = os_mbuf_get(pool, leadingspace);
    d0b4:	4621      	mov	r1, r4
    d0b6:	f000 fc70 	bl	d99a <os_mbuf_get>
}
    d0ba:	bd10      	pop	{r4, pc}
        pool = os_msys_find_pool(dsize);
    d0bc:	f7ff ff84 	bl	cfc8 <os_msys_find_pool>
    d0c0:	e7f7      	b.n	d0b2 <os_msys_get+0xa>
    return (NULL);
    d0c2:	2000      	movs	r0, #0
    d0c4:	e7f9      	b.n	d0ba <os_msys_get+0x12>

0000d0c6 <os_msys_get_pkthdr>:
{
    d0c6:	b510      	push	{r4, lr}
    d0c8:	460c      	mov	r4, r1
    if (dsize == 0) {
    d0ca:	b930      	cbnz	r0, d0da <os_msys_get_pkthdr+0x14>
        pool = os_msys_find_biggest_pool();
    d0cc:	f7ff ff74 	bl	cfb8 <os_msys_find_biggest_pool>
    if (!pool) {
    d0d0:	b158      	cbz	r0, d0ea <os_msys_get_pkthdr+0x24>
    m = os_mbuf_get_pkthdr(pool, user_hdr_len);
    d0d2:	b2e1      	uxtb	r1, r4
    d0d4:	f000 fc7a 	bl	d9cc <os_mbuf_get_pkthdr>
}
    d0d8:	bd10      	pop	{r4, pc}
    d0da:	f101 0308 	add.w	r3, r1, #8
    d0de:	b29b      	uxth	r3, r3
        pool = os_msys_find_pool(dsize + total_pkthdr_len);
    d0e0:	4403      	add	r3, r0
    d0e2:	b298      	uxth	r0, r3
    d0e4:	f7ff ff70 	bl	cfc8 <os_msys_find_pool>
    d0e8:	e7f2      	b.n	d0d0 <os_msys_get_pkthdr+0xa>
    return (NULL);
    d0ea:	2000      	movs	r0, #0
    d0ec:	e7f4      	b.n	d0d8 <os_msys_get_pkthdr+0x12>
	...

0000d0f0 <os_msys_init>:

void
os_msys_init(void)
{
    d0f0:	b500      	push	{lr}
    d0f2:	b083      	sub	sp, #12
    int rc;

    os_msys_reset();
    d0f4:	f7ff ffd0 	bl	d098 <os_msys_reset>

    (void)os_msys_init_once;
    (void)rc;

#if MYNEWT_VAL(MSYS_1_BLOCK_COUNT) > 0
    os_msys_init_once(os_msys_1_data,
    d0f8:	4b06      	ldr	r3, [pc, #24]	; (d114 <os_msys_init+0x24>)
    d0fa:	9301      	str	r3, [sp, #4]
    d0fc:	f44f 7392 	mov.w	r3, #292	; 0x124
    d100:	9300      	str	r3, [sp, #0]
    d102:	230c      	movs	r3, #12
    d104:	4a04      	ldr	r2, [pc, #16]	; (d118 <os_msys_init+0x28>)
    d106:	4905      	ldr	r1, [pc, #20]	; (d11c <os_msys_init+0x2c>)
    d108:	4805      	ldr	r0, [pc, #20]	; (d120 <os_msys_init+0x30>)
    d10a:	f7ff ff99 	bl	d040 <os_msys_init_once>
    os_msys_sc.sc_checkin_itvl =
        OS_TICKS_PER_SEC * MYNEWT_VAL(MSYS_SANITY_TIMEOUT) / 1000;
    rc = os_sanity_check_register(&os_msys_sc);
    SYSINIT_PANIC_ASSERT(rc == 0);
#endif
}
    d10e:	b003      	add	sp, #12
    d110:	f85d fb04 	ldr.w	pc, [sp], #4
    d114:	0002ae8c 	.word	0x0002ae8c
    d118:	20002110 	.word	0x20002110
    d11c:	2000211c 	.word	0x2000211c
    d120:	20001360 	.word	0x20001360

0000d124 <os_sanity_check_list_lock>:
 *
 * @return 0 on success, error code on failure.
 */
static int
os_sanity_check_list_lock(void)
{
    d124:	b508      	push	{r3, lr}
    int rc;

    if (!g_os_started) {
    d126:	4b05      	ldr	r3, [pc, #20]	; (d13c <os_sanity_check_list_lock+0x18>)
    d128:	6818      	ldr	r0, [r3, #0]
    d12a:	b900      	cbnz	r0, d12e <os_sanity_check_list_lock+0xa>
    }

    return (0);
err:
    return (rc);
}
    d12c:	bd08      	pop	{r3, pc}
    rc = os_mutex_pend(&g_os_sanity_check_mu, OS_WAIT_FOREVER);
    d12e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    d132:	4803      	ldr	r0, [pc, #12]	; (d140 <os_sanity_check_list_lock+0x1c>)
    d134:	f001 f8a4 	bl	e280 <os_mutex_pend>
err:
    d138:	e7f8      	b.n	d12c <os_sanity_check_list_lock+0x8>
    d13a:	bf00      	nop
    d13c:	20003af8 	.word	0x20003af8
    d140:	20003b5c 	.word	0x20003b5c

0000d144 <os_sanity_check_list_unlock>:
 *
 * @return 0 on success, error code on failure
 */
static int
os_sanity_check_list_unlock(void)
{
    d144:	b508      	push	{r3, lr}
    int rc;

    if (!g_os_started) {
    d146:	4b04      	ldr	r3, [pc, #16]	; (d158 <os_sanity_check_list_unlock+0x14>)
    d148:	6818      	ldr	r0, [r3, #0]
    d14a:	b900      	cbnz	r0, d14e <os_sanity_check_list_unlock+0xa>
    }

    return (0);
err:
    return (rc);
}
    d14c:	bd08      	pop	{r3, pc}
    rc = os_mutex_release(&g_os_sanity_check_mu);
    d14e:	4803      	ldr	r0, [pc, #12]	; (d15c <os_sanity_check_list_unlock+0x18>)
    d150:	f001 f836 	bl	e1c0 <os_mutex_release>
err:
    d154:	e7fa      	b.n	d14c <os_sanity_check_list_unlock+0x8>
    d156:	bf00      	nop
    d158:	20003af8 	.word	0x20003af8
    d15c:	20003b5c 	.word	0x20003b5c

0000d160 <os_sanity_check_init>:
    memset(sc, 0, sizeof(*sc));
    d160:	2300      	movs	r3, #0
    d162:	6003      	str	r3, [r0, #0]
    d164:	6043      	str	r3, [r0, #4]
    d166:	6083      	str	r3, [r0, #8]
    d168:	60c3      	str	r3, [r0, #12]
    d16a:	6103      	str	r3, [r0, #16]
}
    d16c:	4618      	mov	r0, r3
    d16e:	4770      	bx	lr

0000d170 <os_sanity_check_register>:
}


int
os_sanity_check_register(struct os_sanity_check *sc)
{
    d170:	b510      	push	{r4, lr}
    d172:	4604      	mov	r4, r0
    int rc;

    rc = os_sanity_check_list_lock();
    d174:	f7ff ffd6 	bl	d124 <os_sanity_check_list_lock>
    if (rc != OS_OK) {
    d178:	4603      	mov	r3, r0
    d17a:	b108      	cbz	r0, d180 <os_sanity_check_register+0x10>
    }

    return (0);
err:
    return (rc);
}
    d17c:	4618      	mov	r0, r3
    d17e:	bd10      	pop	{r4, pc}
    SLIST_INSERT_HEAD(&g_os_sanity_check_list, sc, sc_next);
    d180:	4b03      	ldr	r3, [pc, #12]	; (d190 <os_sanity_check_register+0x20>)
    d182:	681a      	ldr	r2, [r3, #0]
    d184:	6122      	str	r2, [r4, #16]
    d186:	601c      	str	r4, [r3, #0]
    rc = os_sanity_check_list_unlock();
    d188:	f7ff ffdc 	bl	d144 <os_sanity_check_list_unlock>
    d18c:	4603      	mov	r3, r0
err:
    d18e:	e7f5      	b.n	d17c <os_sanity_check_register+0xc>
    d190:	20002138 	.word	0x20002138

0000d194 <os_sanity_run>:
 * Goes through the sanity check list, and performs sanity checks.  If any of
 * these checks failed, or tasks have not checked in, it resets the processor.
 */
void
os_sanity_run(void)
{
    d194:	b510      	push	{r4, lr}
    struct os_sanity_check *sc;
    int rc;

    rc = os_sanity_check_list_lock();
    d196:	f7ff ffc5 	bl	d124 <os_sanity_check_list_lock>
    if (rc != 0) {
    d19a:	b910      	cbnz	r0, d1a2 <os_sanity_run+0xe>
        assert(0);
    }

    SLIST_FOREACH(sc, &g_os_sanity_check_list, sc_next) {
    d19c:	4b1d      	ldr	r3, [pc, #116]	; (d214 <os_sanity_run+0x80>)
    d19e:	681c      	ldr	r4, [r3, #0]
    d1a0:	e012      	b.n	d1c8 <os_sanity_run+0x34>
        assert(0);
    d1a2:	f7ff f821 	bl	c1e8 <hal_debugger_connected>
    d1a6:	b100      	cbz	r0, d1aa <os_sanity_run+0x16>
    d1a8:	be01      	bkpt	0x0001
    d1aa:	2300      	movs	r3, #0
    d1ac:	461a      	mov	r2, r3
    d1ae:	4619      	mov	r1, r3
    d1b0:	4618      	mov	r0, r3
    d1b2:	f7ff fa53 	bl	c65c <__assert_func>
                sc->sc_checkin_last = os_time_get();
                continue;
            }
        }

        if (OS_TIME_TICK_GT(os_time_get(),
    d1b6:	f000 fa5d 	bl	d674 <os_time_get>
    d1ba:	6823      	ldr	r3, [r4, #0]
    d1bc:	6862      	ldr	r2, [r4, #4]
    d1be:	4413      	add	r3, r2
    d1c0:	1ac3      	subs	r3, r0, r3
    d1c2:	2b00      	cmp	r3, #0
    d1c4:	dc0d      	bgt.n	d1e2 <os_sanity_run+0x4e>
    SLIST_FOREACH(sc, &g_os_sanity_check_list, sc_next) {
    d1c6:	6924      	ldr	r4, [r4, #16]
    d1c8:	b1ac      	cbz	r4, d1f6 <os_sanity_run+0x62>
        if (sc->sc_func) {
    d1ca:	68a3      	ldr	r3, [r4, #8]
    d1cc:	2b00      	cmp	r3, #0
    d1ce:	d0f2      	beq.n	d1b6 <os_sanity_run+0x22>
            rc = sc->sc_func(sc, sc->sc_arg);
    d1d0:	68e1      	ldr	r1, [r4, #12]
    d1d2:	4620      	mov	r0, r4
    d1d4:	4798      	blx	r3
            if (rc == OS_OK) {
    d1d6:	2800      	cmp	r0, #0
    d1d8:	d1ed      	bne.n	d1b6 <os_sanity_run+0x22>
                sc->sc_checkin_last = os_time_get();
    d1da:	f000 fa4b 	bl	d674 <os_time_get>
    d1de:	6020      	str	r0, [r4, #0]
                continue;
    d1e0:	e7f1      	b.n	d1c6 <os_sanity_run+0x32>
                    sc->sc_checkin_last + sc->sc_checkin_itvl)) {
            assert(0);
    d1e2:	f7ff f801 	bl	c1e8 <hal_debugger_connected>
    d1e6:	b100      	cbz	r0, d1ea <os_sanity_run+0x56>
    d1e8:	be01      	bkpt	0x0001
    d1ea:	2300      	movs	r3, #0
    d1ec:	461a      	mov	r2, r3
    d1ee:	4619      	mov	r1, r3
    d1f0:	4618      	mov	r0, r3
    d1f2:	f7ff fa33 	bl	c65c <__assert_func>
        }
    }

    rc = os_sanity_check_list_unlock();
    d1f6:	f7ff ffa5 	bl	d144 <os_sanity_check_list_unlock>
    if (rc != 0) {
    d1fa:	b900      	cbnz	r0, d1fe <os_sanity_run+0x6a>
        assert(0);
    }
}
    d1fc:	bd10      	pop	{r4, pc}
        assert(0);
    d1fe:	f7fe fff3 	bl	c1e8 <hal_debugger_connected>
    d202:	b100      	cbz	r0, d206 <os_sanity_run+0x72>
    d204:	be01      	bkpt	0x0001
    d206:	2300      	movs	r3, #0
    d208:	461a      	mov	r2, r3
    d20a:	4619      	mov	r1, r3
    d20c:	4618      	mov	r0, r3
    d20e:	f7ff fa25 	bl	c65c <__assert_func>
    d212:	bf00      	nop
    d214:	20002138 	.word	0x20002138

0000d218 <os_sanity_init>:

int
os_sanity_init(void)
{
    d218:	b508      	push	{r3, lr}
    int rc;

    rc = os_mutex_init(&g_os_sanity_check_mu);
    d21a:	4802      	ldr	r0, [pc, #8]	; (d224 <os_sanity_init+0xc>)
    d21c:	f000 ffc6 	bl	e1ac <os_mutex_init>
    }

    return (0);
err:
    return (rc);
}
    d220:	bd08      	pop	{r3, pc}
    d222:	bf00      	nop
    d224:	20003b5c 	.word	0x20003b5c

0000d228 <os_sched_insert>:
{
    struct os_task *entry;
    os_sr_t sr;
    os_error_t rc;

    if (t->t_state != OS_TASK_READY) {
    d228:	7b03      	ldrb	r3, [r0, #12]
    d22a:	2b01      	cmp	r3, #1
    d22c:	d001      	beq.n	d232 <os_sched_insert+0xa>
    }
    OS_EXIT_CRITICAL(sr);

    return (0);
err:
    return (rc);
    d22e:	2002      	movs	r0, #2
}
    d230:	4770      	bx	lr
{
    d232:	b510      	push	{r4, lr}
    d234:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
    d236:	f000 fadf 	bl	d7f8 <os_arch_save_sr>
    TAILQ_FOREACH(entry, &g_os_run_list, t_os_list) {
    d23a:	4b0f      	ldr	r3, [pc, #60]	; (d278 <os_sched_insert+0x50>)
    d23c:	681b      	ldr	r3, [r3, #0]
    d23e:	b12b      	cbz	r3, d24c <os_sched_insert+0x24>
        if (t->t_prio < entry->t_prio) {
    d240:	7ae1      	ldrb	r1, [r4, #11]
    d242:	7ada      	ldrb	r2, [r3, #11]
    d244:	4291      	cmp	r1, r2
    d246:	d301      	bcc.n	d24c <os_sched_insert+0x24>
    TAILQ_FOREACH(entry, &g_os_run_list, t_os_list) {
    d248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    d24a:	e7f8      	b.n	d23e <os_sched_insert+0x16>
    if (entry) {
    d24c:	b153      	cbz	r3, d264 <os_sched_insert+0x3c>
        TAILQ_INSERT_BEFORE(entry, (struct os_task *) t, t_os_list);
    d24e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    d250:	64a2      	str	r2, [r4, #72]	; 0x48
    d252:	6463      	str	r3, [r4, #68]	; 0x44
    d254:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    d256:	6014      	str	r4, [r2, #0]
    d258:	3444      	adds	r4, #68	; 0x44
    d25a:	649c      	str	r4, [r3, #72]	; 0x48
    OS_EXIT_CRITICAL(sr);
    d25c:	f000 fad2 	bl	d804 <os_arch_restore_sr>
    return (0);
    d260:	2000      	movs	r0, #0
}
    d262:	bd10      	pop	{r4, pc}
        TAILQ_INSERT_TAIL(&g_os_run_list, (struct os_task *) t, t_os_list);
    d264:	2300      	movs	r3, #0
    d266:	6463      	str	r3, [r4, #68]	; 0x44
    d268:	4b03      	ldr	r3, [pc, #12]	; (d278 <os_sched_insert+0x50>)
    d26a:	685a      	ldr	r2, [r3, #4]
    d26c:	64a2      	str	r2, [r4, #72]	; 0x48
    d26e:	6014      	str	r4, [r2, #0]
    d270:	3444      	adds	r4, #68	; 0x44
    d272:	605c      	str	r4, [r3, #4]
    d274:	e7f2      	b.n	d25c <os_sched_insert+0x34>
    d276:	bf00      	nop
    d278:	20000118 	.word	0x20000118

0000d27c <os_sched_ctx_sw_hook>:

void
os_sched_ctx_sw_hook(struct os_task *next_t)
{
    d27c:	b410      	push	{r4}
    stack = g_current_task->t_stackbottom;
    for (i = 0; i < MYNEWT_VAL(OS_CTX_SW_STACK_GUARD); i++) {
        assert(stack[i] == OS_STACK_PATTERN);
    }
#endif
    next_t->t_ctx_sw_cnt++;
    d27e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    d280:	3301      	adds	r3, #1
    d282:	63c3      	str	r3, [r0, #60]	; 0x3c
#if MYNEWT_VAL(OS_TASK_RUN_TIME_CPUTIME)
    ticks = os_cputime_get32();
#else
    ticks = g_os_time;
    d284:	4b06      	ldr	r3, [pc, #24]	; (d2a0 <os_sched_ctx_sw_hook+0x24>)
    d286:	6818      	ldr	r0, [r3, #0]
#endif
    g_current_task->t_run_time += ticks - g_os_last_ctx_sw_time;
    d288:	4b06      	ldr	r3, [pc, #24]	; (d2a4 <os_sched_ctx_sw_hook+0x28>)
    d28a:	681c      	ldr	r4, [r3, #0]
    d28c:	4906      	ldr	r1, [pc, #24]	; (d2a8 <os_sched_ctx_sw_hook+0x2c>)
    d28e:	680b      	ldr	r3, [r1, #0]
    d290:	1ac2      	subs	r2, r0, r3
    d292:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    d294:	4413      	add	r3, r2
    d296:	63a3      	str	r3, [r4, #56]	; 0x38
    g_os_last_ctx_sw_time = ticks;
    d298:	6008      	str	r0, [r1, #0]
}
    d29a:	bc10      	pop	{r4}
    d29c:	4770      	bx	lr
    d29e:	bf00      	nop
    d2a0:	20003b7c 	.word	0x20003b7c
    d2a4:	20003b68 	.word	0x20003b68
    d2a8:	20003b6c 	.word	0x20003b6c

0000d2ac <os_sched_get_current_task>:

struct os_task *
os_sched_get_current_task(void)
{
    return (g_current_task);
}
    d2ac:	4b01      	ldr	r3, [pc, #4]	; (d2b4 <os_sched_get_current_task+0x8>)
    d2ae:	6818      	ldr	r0, [r3, #0]
    d2b0:	4770      	bx	lr
    d2b2:	bf00      	nop
    d2b4:	20003b68 	.word	0x20003b68

0000d2b8 <os_sched_set_current_task>:
 * @param t Pointer to currently running task.
 */
void
os_sched_set_current_task(struct os_task *t)
{
    g_current_task = t;
    d2b8:	4b01      	ldr	r3, [pc, #4]	; (d2c0 <os_sched_set_current_task+0x8>)
    d2ba:	6018      	str	r0, [r3, #0]
}
    d2bc:	4770      	bx	lr
    d2be:	bf00      	nop
    d2c0:	20003b68 	.word	0x20003b68

0000d2c4 <os_sched_sleep>:
 * NOTE: must be called with interrupts disabled! This function does not call
 * the scheduler
 */
int
os_sched_sleep(struct os_task *t, os_time_t nticks)
{
    d2c4:	b538      	push	{r3, r4, r5, lr}
    d2c6:	4604      	mov	r4, r0
    d2c8:	460d      	mov	r5, r1
    struct os_task *entry;

    entry = NULL;

    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
    d2ca:	6c43      	ldr	r3, [r0, #68]	; 0x44
    d2cc:	b1d3      	cbz	r3, d304 <os_sched_sleep+0x40>
    d2ce:	6c82      	ldr	r2, [r0, #72]	; 0x48
    d2d0:	649a      	str	r2, [r3, #72]	; 0x48
    d2d2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    d2d4:	6c62      	ldr	r2, [r4, #68]	; 0x44
    d2d6:	601a      	str	r2, [r3, #0]
    t->t_state = OS_TASK_SLEEP;
    d2d8:	2302      	movs	r3, #2
    d2da:	7323      	strb	r3, [r4, #12]
    t->t_next_wakeup = os_time_get() + nticks;
    d2dc:	f000 f9ca 	bl	d674 <os_time_get>
    d2e0:	4428      	add	r0, r5
    d2e2:	6360      	str	r0, [r4, #52]	; 0x34
    if (nticks == OS_TIMEOUT_NEVER) {
    d2e4:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    d2e8:	d010      	beq.n	d30c <os_sched_sleep+0x48>
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
    } else {
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
    d2ea:	4b18      	ldr	r3, [pc, #96]	; (d34c <os_sched_sleep+0x88>)
    d2ec:	681b      	ldr	r3, [r3, #0]
    d2ee:	b1d3      	cbz	r3, d326 <os_sched_sleep+0x62>
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
    d2f0:	7b5a      	ldrb	r2, [r3, #13]
    d2f2:	f012 0f01 	tst.w	r2, #1
    d2f6:	d116      	bne.n	d326 <os_sched_sleep+0x62>
                    OS_TIME_TICK_GT(entry->t_next_wakeup, t->t_next_wakeup)) {
    d2f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    d2fa:	1a12      	subs	r2, r2, r0
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
    d2fc:	2a00      	cmp	r2, #0
    d2fe:	dc12      	bgt.n	d326 <os_sched_sleep+0x62>
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
    d300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    d302:	e7f4      	b.n	d2ee <os_sched_sleep+0x2a>
    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
    d304:	6c82      	ldr	r2, [r0, #72]	; 0x48
    d306:	4b12      	ldr	r3, [pc, #72]	; (d350 <os_sched_sleep+0x8c>)
    d308:	605a      	str	r2, [r3, #4]
    d30a:	e7e2      	b.n	d2d2 <os_sched_sleep+0xe>
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
    d30c:	7b63      	ldrb	r3, [r4, #13]
    d30e:	f043 0301 	orr.w	r3, r3, #1
    d312:	7363      	strb	r3, [r4, #13]
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
    d314:	2300      	movs	r3, #0
    d316:	6463      	str	r3, [r4, #68]	; 0x44
    d318:	4b0c      	ldr	r3, [pc, #48]	; (d34c <os_sched_sleep+0x88>)
    d31a:	685a      	ldr	r2, [r3, #4]
    d31c:	64a2      	str	r2, [r4, #72]	; 0x48
    d31e:	6014      	str	r4, [r2, #0]
    d320:	3444      	adds	r4, #68	; 0x44
    d322:	605c      	str	r4, [r3, #4]
    d324:	e007      	b.n	d336 <os_sched_sleep+0x72>
                break;
            }
        }
        if (entry) {
    d326:	b143      	cbz	r3, d33a <os_sched_sleep+0x76>
            TAILQ_INSERT_BEFORE(entry, t, t_os_list);
    d328:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    d32a:	64a2      	str	r2, [r4, #72]	; 0x48
    d32c:	6463      	str	r3, [r4, #68]	; 0x44
    d32e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    d330:	6014      	str	r4, [r2, #0]
    d332:	3444      	adds	r4, #68	; 0x44
    d334:	649c      	str	r4, [r3, #72]	; 0x48
        }
    }

    os_trace_task_stop_ready(t, OS_TASK_SLEEP);
    return (0);
}
    d336:	2000      	movs	r0, #0
    d338:	bd38      	pop	{r3, r4, r5, pc}
            TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
    d33a:	2300      	movs	r3, #0
    d33c:	6463      	str	r3, [r4, #68]	; 0x44
    d33e:	4b03      	ldr	r3, [pc, #12]	; (d34c <os_sched_sleep+0x88>)
    d340:	685a      	ldr	r2, [r3, #4]
    d342:	64a2      	str	r2, [r4, #72]	; 0x48
    d344:	6014      	str	r4, [r2, #0]
    d346:	3444      	adds	r4, #68	; 0x44
    d348:	605c      	str	r4, [r3, #4]
    d34a:	e7f4      	b.n	d336 <os_sched_sleep+0x72>
    d34c:	20000120 	.word	0x20000120
    d350:	20000118 	.word	0x20000118

0000d354 <os_sched_wakeup>:
 *
 * NOTE: This function must be called with interrupts disabled.
 */
int
os_sched_wakeup(struct os_task *t)
{
    d354:	b508      	push	{r3, lr}
    struct os_task_obj *os_obj;

    assert(t->t_state == OS_TASK_SLEEP);
    d356:	7b03      	ldrb	r3, [r0, #12]
    d358:	2b02      	cmp	r3, #2
    d35a:	d108      	bne.n	d36e <os_sched_wakeup+0x1a>

    /* Remove self from object list if waiting on one */
    if (t->t_obj) {
    d35c:	69c3      	ldr	r3, [r0, #28]
    d35e:	b31b      	cbz	r3, d3a8 <os_sched_wakeup+0x54>
        os_obj = (struct os_task_obj *)t->t_obj;
        assert(!SLIST_EMPTY(&os_obj->obj_head));
    d360:	681a      	ldr	r2, [r3, #0]
    d362:	b172      	cbz	r2, d382 <os_sched_wakeup+0x2e>
        SLIST_REMOVE(&os_obj->obj_head, t, os_task, t_obj_list);
    d364:	4282      	cmp	r2, r0
    d366:	d117      	bne.n	d398 <os_sched_wakeup+0x44>
    d368:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
    d36a:	601a      	str	r2, [r3, #0]
    d36c:	e019      	b.n	d3a2 <os_sched_wakeup+0x4e>
    assert(t->t_state == OS_TASK_SLEEP);
    d36e:	f7fe ff3b 	bl	c1e8 <hal_debugger_connected>
    d372:	b100      	cbz	r0, d376 <os_sched_wakeup+0x22>
    d374:	be01      	bkpt	0x0001
    d376:	2300      	movs	r3, #0
    d378:	461a      	mov	r2, r3
    d37a:	4619      	mov	r1, r3
    d37c:	4618      	mov	r0, r3
    d37e:	f7ff f96d 	bl	c65c <__assert_func>
        assert(!SLIST_EMPTY(&os_obj->obj_head));
    d382:	f7fe ff31 	bl	c1e8 <hal_debugger_connected>
    d386:	b100      	cbz	r0, d38a <os_sched_wakeup+0x36>
    d388:	be01      	bkpt	0x0001
    d38a:	2300      	movs	r3, #0
    d38c:	461a      	mov	r2, r3
    d38e:	4619      	mov	r1, r3
    d390:	4618      	mov	r0, r3
    d392:	f7ff f963 	bl	c65c <__assert_func>
        SLIST_REMOVE(&os_obj->obj_head, t, os_task, t_obj_list);
    d396:	461a      	mov	r2, r3
    d398:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
    d39a:	4283      	cmp	r3, r0
    d39c:	d1fb      	bne.n	d396 <os_sched_wakeup+0x42>
    d39e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    d3a0:	64d3      	str	r3, [r2, #76]	; 0x4c
        SLIST_NEXT(t, t_obj_list) = NULL;
    d3a2:	2300      	movs	r3, #0
    d3a4:	64c3      	str	r3, [r0, #76]	; 0x4c
        t->t_obj = NULL;
    d3a6:	61c3      	str	r3, [r0, #28]
    }

    /* Remove task from sleep list */
    t->t_state = OS_TASK_READY;
    d3a8:	2301      	movs	r3, #1
    d3aa:	7303      	strb	r3, [r0, #12]
    t->t_next_wakeup = 0;
    d3ac:	2300      	movs	r3, #0
    d3ae:	6343      	str	r3, [r0, #52]	; 0x34
    t->t_flags &= ~OS_TASK_FLAG_NO_TIMEOUT;
    d3b0:	7b43      	ldrb	r3, [r0, #13]
    d3b2:	f023 0301 	bic.w	r3, r3, #1
    d3b6:	7343      	strb	r3, [r0, #13]
    TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
    d3b8:	6c43      	ldr	r3, [r0, #68]	; 0x44
    d3ba:	b143      	cbz	r3, d3ce <os_sched_wakeup+0x7a>
    d3bc:	6c82      	ldr	r2, [r0, #72]	; 0x48
    d3be:	649a      	str	r2, [r3, #72]	; 0x48
    d3c0:	6c83      	ldr	r3, [r0, #72]	; 0x48
    d3c2:	6c42      	ldr	r2, [r0, #68]	; 0x44
    d3c4:	601a      	str	r2, [r3, #0]
    os_sched_insert(t);
    d3c6:	f7ff ff2f 	bl	d228 <os_sched_insert>

    os_trace_task_start_ready(t);

    return (0);
}
    d3ca:	2000      	movs	r0, #0
    d3cc:	bd08      	pop	{r3, pc}
    TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
    d3ce:	6c82      	ldr	r2, [r0, #72]	; 0x48
    d3d0:	4b01      	ldr	r3, [pc, #4]	; (d3d8 <os_sched_wakeup+0x84>)
    d3d2:	605a      	str	r2, [r3, #4]
    d3d4:	e7f4      	b.n	d3c0 <os_sched_wakeup+0x6c>
    d3d6:	bf00      	nop
    d3d8:	20000120 	.word	0x20000120

0000d3dc <os_sched_os_timer_exp>:
 * removed from the sleep list and added to the run list.
 *
 */
void
os_sched_os_timer_exp(void)
{
    d3dc:	b570      	push	{r4, r5, r6, lr}
    struct os_task *t;
    struct os_task *next;
    os_time_t now;
    os_sr_t sr;

    now = os_time_get();
    d3de:	f000 f949 	bl	d674 <os_time_get>
    d3e2:	4605      	mov	r5, r0

    OS_ENTER_CRITICAL(sr);
    d3e4:	f000 fa08 	bl	d7f8 <os_arch_save_sr>
    d3e8:	4606      	mov	r6, r0

    /*
     * Wakeup any tasks that have their sleep timer expired
     */
    t = TAILQ_FIRST(&g_os_sleep_list);
    d3ea:	4b0a      	ldr	r3, [pc, #40]	; (d414 <os_sched_os_timer_exp+0x38>)
    d3ec:	6818      	ldr	r0, [r3, #0]
    while (t) {
    d3ee:	b160      	cbz	r0, d40a <os_sched_os_timer_exp+0x2e>
        /* If task waiting forever, do not check next wakeup time */
        if (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT) {
    d3f0:	7b43      	ldrb	r3, [r0, #13]
    d3f2:	f013 0f01 	tst.w	r3, #1
    d3f6:	d108      	bne.n	d40a <os_sched_os_timer_exp+0x2e>
            break;
        }
        next = TAILQ_NEXT(t, t_os_list);
    d3f8:	6c44      	ldr	r4, [r0, #68]	; 0x44
        if (OS_TIME_TICK_GEQ(now, t->t_next_wakeup)) {
    d3fa:	6b43      	ldr	r3, [r0, #52]	; 0x34
    d3fc:	1aeb      	subs	r3, r5, r3
    d3fe:	2b00      	cmp	r3, #0
    d400:	db03      	blt.n	d40a <os_sched_os_timer_exp+0x2e>
            os_sched_wakeup(t);
    d402:	f7ff ffa7 	bl	d354 <os_sched_wakeup>
        } else {
            break;
        }
        t = next;
    d406:	4620      	mov	r0, r4
    d408:	e7f1      	b.n	d3ee <os_sched_os_timer_exp+0x12>
    }

    OS_EXIT_CRITICAL(sr);
    d40a:	4630      	mov	r0, r6
    d40c:	f000 f9fa 	bl	d804 <os_arch_restore_sr>
}
    d410:	bd70      	pop	{r4, r5, r6, pc}
    d412:	bf00      	nop
    d414:	20000120 	.word	0x20000120

0000d418 <os_sched_wakeup_ticks>:
 * Return the number of ticks until the first sleep timer expires.If there are
 * no such tasks then return OS_TIMEOUT_NEVER instead.
 */
os_time_t
os_sched_wakeup_ticks(os_time_t now)
{
    d418:	b510      	push	{r4, lr}
    d41a:	4604      	mov	r4, r0
    os_time_t rt;
    struct os_task *t;

    OS_ASSERT_CRITICAL();
    d41c:	f000 f9f5 	bl	d80a <os_arch_in_critical>
    d420:	b150      	cbz	r0, d438 <os_sched_wakeup_ticks+0x20>

    t = TAILQ_FIRST(&g_os_sleep_list);
    d422:	4b0e      	ldr	r3, [pc, #56]	; (d45c <os_sched_wakeup_ticks+0x44>)
    d424:	681b      	ldr	r3, [r3, #0]
    if (t == NULL || (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT)) {
    d426:	b19b      	cbz	r3, d450 <os_sched_wakeup_ticks+0x38>
    d428:	7b5a      	ldrb	r2, [r3, #13]
    d42a:	f012 0f01 	tst.w	r2, #1
    d42e:	d112      	bne.n	d456 <os_sched_wakeup_ticks+0x3e>
        rt = OS_TIMEOUT_NEVER;
    } else if (OS_TIME_TICK_GEQ(t->t_next_wakeup, now)) {
    d430:	6b58      	ldr	r0, [r3, #52]	; 0x34
    d432:	1b00      	subs	r0, r0, r4
    d434:	d40a      	bmi.n	d44c <os_sched_wakeup_ticks+0x34>
        rt = t->t_next_wakeup - now;
    } else {
        rt = 0;     /* wakeup time was in the past */
    }
    return (rt);
}
    d436:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
    d438:	f7fe fed6 	bl	c1e8 <hal_debugger_connected>
    d43c:	b100      	cbz	r0, d440 <os_sched_wakeup_ticks+0x28>
    d43e:	be01      	bkpt	0x0001
    d440:	2300      	movs	r3, #0
    d442:	461a      	mov	r2, r3
    d444:	4619      	mov	r1, r3
    d446:	4618      	mov	r0, r3
    d448:	f7ff f908 	bl	c65c <__assert_func>
        rt = 0;     /* wakeup time was in the past */
    d44c:	2000      	movs	r0, #0
    d44e:	e7f2      	b.n	d436 <os_sched_wakeup_ticks+0x1e>
        rt = OS_TIMEOUT_NEVER;
    d450:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    d454:	e7ef      	b.n	d436 <os_sched_wakeup_ticks+0x1e>
    d456:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return (rt);
    d45a:	e7ec      	b.n	d436 <os_sched_wakeup_ticks+0x1e>
    d45c:	20000120 	.word	0x20000120

0000d460 <os_sched_next_task>:
 */
struct os_task *
os_sched_next_task(void)
{
    return (TAILQ_FIRST(&g_os_run_list));
}
    d460:	4b01      	ldr	r3, [pc, #4]	; (d468 <os_sched_next_task+0x8>)
    d462:	6818      	ldr	r0, [r3, #0]
    d464:	4770      	bx	lr
    d466:	bf00      	nop
    d468:	20000118 	.word	0x20000118

0000d46c <os_sched>:
{
    d46c:	b538      	push	{r3, r4, r5, lr}
    d46e:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
    d470:	f000 f9c2 	bl	d7f8 <os_arch_save_sr>
    d474:	4605      	mov	r5, r0
    if (!next_t) {
    d476:	b134      	cbz	r4, d486 <os_sched+0x1a>
    os_arch_ctx_sw(next_t);
    d478:	4620      	mov	r0, r4
    d47a:	f000 f9b3 	bl	d7e4 <os_arch_ctx_sw>
    OS_EXIT_CRITICAL(sr);
    d47e:	4628      	mov	r0, r5
    d480:	f000 f9c0 	bl	d804 <os_arch_restore_sr>
}
    d484:	bd38      	pop	{r3, r4, r5, pc}
        next_t = os_sched_next_task();
    d486:	f7ff ffeb 	bl	d460 <os_sched_next_task>
    d48a:	4604      	mov	r4, r0
    d48c:	e7f4      	b.n	d478 <os_sched+0xc>
	...

0000d490 <os_sched_resort>:
 * NOTE: this function expects interrupts to be disabled so they
 * are not disabled here.
 */
void
os_sched_resort(struct os_task *t)
{
    d490:	b508      	push	{r3, lr}
    if (t->t_state == OS_TASK_READY) {
    d492:	7b03      	ldrb	r3, [r0, #12]
    d494:	2b01      	cmp	r3, #1
    d496:	d000      	beq.n	d49a <os_sched_resort+0xa>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
        os_sched_insert(t);
    }
}
    d498:	bd08      	pop	{r3, pc}
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
    d49a:	6c43      	ldr	r3, [r0, #68]	; 0x44
    d49c:	b13b      	cbz	r3, d4ae <os_sched_resort+0x1e>
    d49e:	6c82      	ldr	r2, [r0, #72]	; 0x48
    d4a0:	649a      	str	r2, [r3, #72]	; 0x48
    d4a2:	6c83      	ldr	r3, [r0, #72]	; 0x48
    d4a4:	6c42      	ldr	r2, [r0, #68]	; 0x44
    d4a6:	601a      	str	r2, [r3, #0]
        os_sched_insert(t);
    d4a8:	f7ff febe 	bl	d228 <os_sched_insert>
}
    d4ac:	e7f4      	b.n	d498 <os_sched_resort+0x8>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
    d4ae:	6c82      	ldr	r2, [r0, #72]	; 0x48
    d4b0:	4b01      	ldr	r3, [pc, #4]	; (d4b8 <os_sched_resort+0x28>)
    d4b2:	605a      	str	r2, [r3, #4]
    d4b4:	e7f5      	b.n	d4a2 <os_sched_resort+0x12>
    d4b6:	bf00      	nop
    d4b8:	20000118 	.word	0x20000118

0000d4bc <_clear_stack>:
static void
_clear_stack(os_stack_t *stack_bottom, int size)
{
    int i;

    for (i = 0; i < size; i++) {
    d4bc:	2300      	movs	r3, #0
    d4be:	e003      	b.n	d4c8 <_clear_stack+0xc>
        stack_bottom[i] = OS_STACK_PATTERN;
    d4c0:	4a03      	ldr	r2, [pc, #12]	; (d4d0 <_clear_stack+0x14>)
    d4c2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    for (i = 0; i < size; i++) {
    d4c6:	3301      	adds	r3, #1
    d4c8:	428b      	cmp	r3, r1
    d4ca:	dbf9      	blt.n	d4c0 <_clear_stack+0x4>
    }
}
    d4cc:	4770      	bx	lr
    d4ce:	bf00      	nop
    d4d0:	deadbeef 	.word	0xdeadbeef

0000d4d4 <os_task_stacktop_get>:
}

os_stack_t *
os_task_stacktop_get(struct os_task *t)
{
    return &t->t_stackbottom[t->t_stacksize];
    d4d4:	6843      	ldr	r3, [r0, #4]
    d4d6:	8900      	ldrh	r0, [r0, #8]
}
    d4d8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    d4dc:	4770      	bx	lr
	...

0000d4e0 <os_task_init>:
{
    d4e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d4e4:	4604      	mov	r4, r0
    d4e6:	460e      	mov	r6, r1
    d4e8:	4690      	mov	r8, r2
    d4ea:	461d      	mov	r5, r3
    d4ec:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
    memset(t, 0, sizeof(*t));
    d4f0:	2250      	movs	r2, #80	; 0x50
    d4f2:	2100      	movs	r1, #0
    d4f4:	f000 ffe4 	bl	e4c0 <memset>
    t->t_func = func;
    d4f8:	f8c4 8014 	str.w	r8, [r4, #20]
    t->t_arg = arg;
    d4fc:	61a5      	str	r5, [r4, #24]
    OS_ENTER_CRITICAL(sr);
    d4fe:	f000 f97b 	bl	d7f8 <os_arch_save_sr>
    rc = g_task_id;
    d502:	4b2e      	ldr	r3, [pc, #184]	; (d5bc <os_task_init+0xdc>)
    d504:	781d      	ldrb	r5, [r3, #0]
    g_task_id++;
    d506:	1c6a      	adds	r2, r5, #1
    d508:	701a      	strb	r2, [r3, #0]
    OS_EXIT_CRITICAL(sr);
    d50a:	f000 f97b 	bl	d804 <os_arch_restore_sr>
    t->t_taskid = os_task_next_id();
    d50e:	72a5      	strb	r5, [r4, #10]
    t->t_prio = prio;
    d510:	f89d 3018 	ldrb.w	r3, [sp, #24]
    d514:	72e3      	strb	r3, [r4, #11]
    t->t_state = OS_TASK_READY;
    d516:	2301      	movs	r3, #1
    d518:	7323      	strb	r3, [r4, #12]
    t->t_name = name;
    d51a:	6126      	str	r6, [r4, #16]
    t->t_next_wakeup = 0;
    d51c:	2300      	movs	r3, #0
    d51e:	6363      	str	r3, [r4, #52]	; 0x34
    rc = os_sanity_check_init(&t->t_sanity_check);
    d520:	f104 0620 	add.w	r6, r4, #32
    d524:	4630      	mov	r0, r6
    d526:	f7ff fe1b 	bl	d160 <os_sanity_check_init>
    if (rc != OS_OK) {
    d52a:	4605      	mov	r5, r0
    d52c:	2800      	cmp	r0, #0
    d52e:	d138      	bne.n	d5a2 <os_task_init+0xc2>
    if (sanity_itvl != OS_WAIT_FOREVER) {
    d530:	9b07      	ldr	r3, [sp, #28]
    d532:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    d536:	d005      	beq.n	d544 <os_task_init+0x64>
        sc->sc_checkin_itvl = sanity_itvl;
    d538:	6263      	str	r3, [r4, #36]	; 0x24
        rc = os_sanity_check_register(sc);
    d53a:	4630      	mov	r0, r6
    d53c:	f7ff fe18 	bl	d170 <os_sanity_check_register>
        if (rc != OS_OK) {
    d540:	4605      	mov	r5, r0
    d542:	bb70      	cbnz	r0, d5a2 <os_task_init+0xc2>
    _clear_stack(stack_bottom, stack_size);
    d544:	4639      	mov	r1, r7
    d546:	9808      	ldr	r0, [sp, #32]
    d548:	f7ff ffb8 	bl	d4bc <_clear_stack>
    t->t_stackbottom = stack_bottom;
    d54c:	9b08      	ldr	r3, [sp, #32]
    d54e:	6063      	str	r3, [r4, #4]
    t->t_stacksize = stack_size;
    d550:	8127      	strh	r7, [r4, #8]
    t->t_stackptr = os_arch_task_stack_init(t, os_task_stacktop_get(t),
    d552:	4620      	mov	r0, r4
    d554:	f7ff ffbe 	bl	d4d4 <os_task_stacktop_get>
    d558:	463a      	mov	r2, r7
    d55a:	4601      	mov	r1, r0
    d55c:	4620      	mov	r0, r4
    d55e:	f000 f959 	bl	d814 <os_arch_task_stack_init>
    d562:	6020      	str	r0, [r4, #0]
    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
    d564:	4b16      	ldr	r3, [pc, #88]	; (d5c0 <os_task_init+0xe0>)
    d566:	681b      	ldr	r3, [r3, #0]
    d568:	b17b      	cbz	r3, d58a <os_task_init+0xaa>
        assert(t->t_prio != task->t_prio);
    d56a:	7ae1      	ldrb	r1, [r4, #11]
    d56c:	7ada      	ldrb	r2, [r3, #11]
    d56e:	4291      	cmp	r1, r2
    d570:	d001      	beq.n	d576 <os_task_init+0x96>
    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
    d572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    d574:	e7f8      	b.n	d568 <os_task_init+0x88>
        assert(t->t_prio != task->t_prio);
    d576:	f7fe fe37 	bl	c1e8 <hal_debugger_connected>
    d57a:	b100      	cbz	r0, d57e <os_task_init+0x9e>
    d57c:	be01      	bkpt	0x0001
    d57e:	2300      	movs	r3, #0
    d580:	461a      	mov	r2, r3
    d582:	4619      	mov	r1, r3
    d584:	4618      	mov	r0, r3
    d586:	f7ff f869 	bl	c65c <__assert_func>
    STAILQ_INSERT_TAIL(&g_os_task_list, t, t_os_task_list);
    d58a:	6423      	str	r3, [r4, #64]	; 0x40
    d58c:	4b0c      	ldr	r3, [pc, #48]	; (d5c0 <os_task_init+0xe0>)
    d58e:	685a      	ldr	r2, [r3, #4]
    d590:	6014      	str	r4, [r2, #0]
    d592:	f104 0240 	add.w	r2, r4, #64	; 0x40
    d596:	605a      	str	r2, [r3, #4]
    rc = os_sched_insert(t);
    d598:	4620      	mov	r0, r4
    d59a:	f7ff fe45 	bl	d228 <os_sched_insert>
    d59e:	4605      	mov	r5, r0
    if (rc != OS_OK) {
    d5a0:	b110      	cbz	r0, d5a8 <os_task_init+0xc8>
}
    d5a2:	4628      	mov	r0, r5
    d5a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (os_started()) {
    d5a8:	f7ff f918 	bl	c7dc <os_started>
    d5ac:	b908      	cbnz	r0, d5b2 <os_task_init+0xd2>
    return (0);
    d5ae:	4605      	mov	r5, r0
    d5b0:	e7f7      	b.n	d5a2 <os_task_init+0xc2>
        os_sched(NULL);
    d5b2:	2000      	movs	r0, #0
    d5b4:	f7ff ff5a 	bl	d46c <os_sched>
    d5b8:	e7f3      	b.n	d5a2 <os_task_init+0xc2>
    d5ba:	bf00      	nop
    d5bc:	20003b78 	.word	0x20003b78
    d5c0:	20003b70 	.word	0x20003b70

0000d5c4 <os_deltatime>:
} basetod;

static void
os_deltatime(os_time_t delta, const struct os_timeval *base,
    struct os_timeval *result)
{
    d5c4:	e92d 0830 	stmdb	sp!, {r4, r5, fp}
    struct os_timeval tvdelta;

    tvdelta.tv_sec = delta / OS_TICKS_PER_SEC;
    d5c8:	09c3      	lsrs	r3, r0, #7
    tvdelta.tv_usec = (delta % OS_TICKS_PER_SEC) * OS_USEC_PER_TICK;
    d5ca:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    os_timeradd(base, &tvdelta, result);
    d5ce:	e9d1 4500 	ldrd	r4, r5, [r1]
    d5d2:	eb14 0b03 	adds.w	fp, r4, r3
    d5d6:	f145 0c00 	adc.w	ip, r5, #0
    d5da:	e9c2 bc00 	strd	fp, ip, [r2]
    d5de:	688b      	ldr	r3, [r1, #8]
    d5e0:	f641 6184 	movw	r1, #7812	; 0x1e84
    d5e4:	fb01 3000 	mla	r0, r1, r0, r3
    d5e8:	6090      	str	r0, [r2, #8]
    d5ea:	4b08      	ldr	r3, [pc, #32]	; (d60c <os_deltatime+0x48>)
    d5ec:	4298      	cmp	r0, r3
    d5ee:	dd0a      	ble.n	d606 <os_deltatime+0x42>
    d5f0:	f11b 0401 	adds.w	r4, fp, #1
    d5f4:	f14c 0500 	adc.w	r5, ip, #0
    d5f8:	e9c2 4500 	strd	r4, r5, [r2]
    d5fc:	f5a0 2074 	sub.w	r0, r0, #999424	; 0xf4000
    d600:	f5a0 7010 	sub.w	r0, r0, #576	; 0x240
    d604:	6090      	str	r0, [r2, #8]
}
    d606:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
    d60a:	4770      	bx	lr
    d60c:	000f423f 	.word	0x000f423f

0000d610 <os_time_tick>:
}

#if MYNEWT_VAL(OS_SCHEDULING)
static void
os_time_tick(int ticks)
{
    d610:	b570      	push	{r4, r5, r6, lr}
    os_sr_t sr;
    os_time_t delta, prev_os_time;

    assert(ticks >= 0);
    d612:	1e04      	subs	r4, r0, #0
    d614:	db0d      	blt.n	d632 <os_time_tick+0x22>

    OS_ENTER_CRITICAL(sr);
    d616:	f000 f8ef 	bl	d7f8 <os_arch_save_sr>
    d61a:	4605      	mov	r5, r0
    prev_os_time = g_os_time;
    d61c:	4a13      	ldr	r2, [pc, #76]	; (d66c <os_time_tick+0x5c>)
    d61e:	6813      	ldr	r3, [r2, #0]
    g_os_time += ticks;
    d620:	18e0      	adds	r0, r4, r3
    d622:	6010      	str	r0, [r2, #0]

    /*
     * Update 'basetod' when 'g_os_time' crosses the 0x00000000 and
     * 0x80000000 thresholds.
     */
    if ((prev_os_time ^ g_os_time) >> 31) {
    d624:	ea90 0f03 	teq	r0, r3
    d628:	d40d      	bmi.n	d646 <os_time_tick+0x36>
        delta = g_os_time - basetod.ostime;
        os_deltatime(delta, &basetod.uptime, &basetod.uptime);
        os_deltatime(delta, &basetod.utctime, &basetod.utctime);
        basetod.ostime = g_os_time;
    }
    OS_EXIT_CRITICAL(sr);
    d62a:	4628      	mov	r0, r5
    d62c:	f000 f8ea 	bl	d804 <os_arch_restore_sr>
}
    d630:	bd70      	pop	{r4, r5, r6, pc}
    assert(ticks >= 0);
    d632:	f7fe fdd9 	bl	c1e8 <hal_debugger_connected>
    d636:	b100      	cbz	r0, d63a <os_time_tick+0x2a>
    d638:	be01      	bkpt	0x0001
    d63a:	2300      	movs	r3, #0
    d63c:	461a      	mov	r2, r3
    d63e:	4619      	mov	r1, r3
    d640:	4618      	mov	r0, r3
    d642:	f7ff f80b 	bl	c65c <__assert_func>
        delta = g_os_time - basetod.ostime;
    d646:	4e0a      	ldr	r6, [pc, #40]	; (d670 <os_time_tick+0x60>)
    d648:	4631      	mov	r1, r6
    d64a:	f851 4b08 	ldr.w	r4, [r1], #8
    d64e:	1b04      	subs	r4, r0, r4
        os_deltatime(delta, &basetod.uptime, &basetod.uptime);
    d650:	460a      	mov	r2, r1
    d652:	4620      	mov	r0, r4
    d654:	f7ff ffb6 	bl	d5c4 <os_deltatime>
        os_deltatime(delta, &basetod.utctime, &basetod.utctime);
    d658:	f106 0118 	add.w	r1, r6, #24
    d65c:	460a      	mov	r2, r1
    d65e:	4620      	mov	r0, r4
    d660:	f7ff ffb0 	bl	d5c4 <os_deltatime>
        basetod.ostime = g_os_time;
    d664:	4b01      	ldr	r3, [pc, #4]	; (d66c <os_time_tick+0x5c>)
    d666:	681b      	ldr	r3, [r3, #0]
    d668:	6033      	str	r3, [r6, #0]
    d66a:	e7de      	b.n	d62a <os_time_tick+0x1a>
    d66c:	20003b7c 	.word	0x20003b7c
    d670:	20002140 	.word	0x20002140

0000d674 <os_time_get>:
}
    d674:	4b01      	ldr	r3, [pc, #4]	; (d67c <os_time_get+0x8>)
    d676:	6818      	ldr	r0, [r3, #0]
    d678:	4770      	bx	lr
    d67a:	bf00      	nop
    d67c:	20003b7c 	.word	0x20003b7c

0000d680 <os_time_advance>:

void
os_time_advance(int ticks)
{
    d680:	b510      	push	{r4, lr}
    assert(ticks >= 0);
    d682:	1e04      	subs	r4, r0, #0
    d684:	db09      	blt.n	d69a <os_time_advance+0x1a>

    if (ticks > 0) {
    d686:	2c00      	cmp	r4, #0
    d688:	dd06      	ble.n	d698 <os_time_advance+0x18>
        if (!os_started()) {
    d68a:	f7ff f8a7 	bl	c7dc <os_started>
    d68e:	b970      	cbnz	r0, d6ae <os_time_advance+0x2e>
            g_os_time += ticks;
    d690:	4a0c      	ldr	r2, [pc, #48]	; (d6c4 <os_time_advance+0x44>)
    d692:	6813      	ldr	r3, [r2, #0]
    d694:	441c      	add	r4, r3
    d696:	6014      	str	r4, [r2, #0]
            os_callout_tick();
            os_sched_os_timer_exp();
            os_sched(NULL);
        }
    }
}
    d698:	bd10      	pop	{r4, pc}
    assert(ticks >= 0);
    d69a:	f7fe fda5 	bl	c1e8 <hal_debugger_connected>
    d69e:	b100      	cbz	r0, d6a2 <os_time_advance+0x22>
    d6a0:	be01      	bkpt	0x0001
    d6a2:	2300      	movs	r3, #0
    d6a4:	461a      	mov	r2, r3
    d6a6:	4619      	mov	r1, r3
    d6a8:	4618      	mov	r0, r3
    d6aa:	f7fe ffd7 	bl	c65c <__assert_func>
            os_time_tick(ticks);
    d6ae:	4620      	mov	r0, r4
    d6b0:	f7ff ffae 	bl	d610 <os_time_tick>
            os_callout_tick();
    d6b4:	f7ff f9e6 	bl	ca84 <os_callout_tick>
            os_sched_os_timer_exp();
    d6b8:	f7ff fe90 	bl	d3dc <os_sched_os_timer_exp>
            os_sched(NULL);
    d6bc:	2000      	movs	r0, #0
    d6be:	f7ff fed5 	bl	d46c <os_sched>
}
    d6c2:	e7e9      	b.n	d698 <os_time_advance+0x18>
    d6c4:	20003b7c 	.word	0x20003b7c

0000d6c8 <os_time_delay>:
void
os_time_delay(os_time_t osticks)
{
    os_sr_t sr;

    if (osticks > 0) {
    d6c8:	b900      	cbnz	r0, d6cc <os_time_delay+0x4>
    d6ca:	4770      	bx	lr
{
    d6cc:	b538      	push	{r3, r4, r5, lr}
    d6ce:	4604      	mov	r4, r0
        OS_ENTER_CRITICAL(sr);
    d6d0:	f000 f892 	bl	d7f8 <os_arch_save_sr>
    d6d4:	4605      	mov	r5, r0
        os_sched_sleep(os_sched_get_current_task(), (os_time_t)osticks);
    d6d6:	f7ff fde9 	bl	d2ac <os_sched_get_current_task>
    d6da:	4621      	mov	r1, r4
    d6dc:	f7ff fdf2 	bl	d2c4 <os_sched_sleep>
        OS_EXIT_CRITICAL(sr);
    d6e0:	4628      	mov	r0, r5
    d6e2:	f000 f88f 	bl	d804 <os_arch_restore_sr>
        os_sched(NULL);
    d6e6:	2000      	movs	r0, #0
    d6e8:	f7ff fec0 	bl	d46c <os_sched>
    }
}
    d6ec:	bd38      	pop	{r3, r4, r5, pc}
	...

0000d6f0 <os_gettimeofday>:
    return (0);
}

int
os_gettimeofday(struct os_timeval *tv, struct os_timezone *tz)
{
    d6f0:	b570      	push	{r4, r5, r6, lr}
    d6f2:	4605      	mov	r5, r0
    d6f4:	460c      	mov	r4, r1
    os_sr_t sr;
    os_time_t delta;

    OS_ENTER_CRITICAL(sr);
    d6f6:	f000 f87f 	bl	d7f8 <os_arch_save_sr>
    d6fa:	4606      	mov	r6, r0
    if (tv != NULL) {
    d6fc:	b145      	cbz	r5, d710 <os_gettimeofday+0x20>
        delta = os_time_get() - basetod.ostime;
    d6fe:	f7ff ffb9 	bl	d674 <os_time_get>
    d702:	4908      	ldr	r1, [pc, #32]	; (d724 <os_gettimeofday+0x34>)
    d704:	f851 3b18 	ldr.w	r3, [r1], #24
        os_deltatime(delta, &basetod.utctime, tv);
    d708:	462a      	mov	r2, r5
    d70a:	1ac0      	subs	r0, r0, r3
    d70c:	f7ff ff5a 	bl	d5c4 <os_deltatime>
    }

    if (tz != NULL) {
    d710:	b114      	cbz	r4, d718 <os_gettimeofday+0x28>
        *tz = basetod.timezone;
    d712:	4b04      	ldr	r3, [pc, #16]	; (d724 <os_gettimeofday+0x34>)
    d714:	6a98      	ldr	r0, [r3, #40]	; 0x28
    d716:	6020      	str	r0, [r4, #0]
    }
    OS_EXIT_CRITICAL(sr);
    d718:	4630      	mov	r0, r6
    d71a:	f000 f873 	bl	d804 <os_arch_restore_sr>

    return (0);
}
    d71e:	2000      	movs	r0, #0
    d720:	bd70      	pop	{r4, r5, r6, pc}
    d722:	bf00      	nop
    d724:	20002140 	.word	0x20002140

0000d728 <os_get_uptime>:
    return basetod.utctime.tv_sec > 0;
}

void
os_get_uptime(struct os_timeval *tvp)
{
    d728:	b5f0      	push	{r4, r5, r6, r7, lr}
    d72a:	b085      	sub	sp, #20
    d72c:	4606      	mov	r6, r0
  struct os_timeval tv;
  os_time_t delta;
  os_sr_t sr;
  os_time_t ostime;

  OS_ENTER_CRITICAL(sr);
    d72e:	f000 f863 	bl	d7f8 <os_arch_save_sr>
    d732:	4607      	mov	r7, r0
  tv = basetod.uptime;
    d734:	4d0a      	ldr	r5, [pc, #40]	; (d760 <os_get_uptime+0x38>)
    d736:	466c      	mov	r4, sp
    d738:	f105 0308 	add.w	r3, r5, #8
    d73c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    d73e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ostime = basetod.ostime;
    d742:	682d      	ldr	r5, [r5, #0]
  delta = os_time_get() - ostime;
    d744:	f7ff ff96 	bl	d674 <os_time_get>
    d748:	1b45      	subs	r5, r0, r5
  OS_EXIT_CRITICAL(sr);
    d74a:	4638      	mov	r0, r7
    d74c:	f000 f85a 	bl	d804 <os_arch_restore_sr>

  os_deltatime(delta, &tv, tvp);
    d750:	4632      	mov	r2, r6
    d752:	4621      	mov	r1, r4
    d754:	4628      	mov	r0, r5
    d756:	f7ff ff35 	bl	d5c4 <os_deltatime>
}
    d75a:	b005      	add	sp, #20
    d75c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d75e:	bf00      	nop
    d760:	20002140 	.word	0x20002140

0000d764 <os_get_uptime_usec>:

int64_t
os_get_uptime_usec(void)
{
    d764:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
    d768:	b084      	sub	sp, #16
  struct os_timeval tv;

  os_get_uptime(&tv);
    d76a:	4668      	mov	r0, sp
    d76c:	f7ff ffdc 	bl	d728 <os_get_uptime>

  return (tv.tv_sec * 1000000 + tv.tv_usec);
    d770:	e9dd 0100 	ldrd	r0, r1, [sp]
    d774:	014c      	lsls	r4, r1, #5
    d776:	0142      	lsls	r2, r0, #5
    d778:	ea44 63d0 	orr.w	r3, r4, r0, lsr #27
    d77c:	1a12      	subs	r2, r2, r0
    d77e:	eb63 0301 	sbc.w	r3, r3, r1
    d782:	025c      	lsls	r4, r3, #9
    d784:	ea44 54d2 	orr.w	r4, r4, r2, lsr #23
    d788:	0255      	lsls	r5, r2, #9
    d78a:	182e      	adds	r6, r5, r0
    d78c:	eb44 0701 	adc.w	r7, r4, r1
    d790:	01bd      	lsls	r5, r7, #6
    d792:	ea45 6596 	orr.w	r5, r5, r6, lsr #26
    d796:	01b4      	lsls	r4, r6, #6
    d798:	1ba2      	subs	r2, r4, r6
    d79a:	eb65 0307 	sbc.w	r3, r5, r7
    d79e:	1884      	adds	r4, r0, r2
    d7a0:	eb41 0503 	adc.w	r5, r1, r3
}
    d7a4:	9b02      	ldr	r3, [sp, #8]
    d7a6:	18e0      	adds	r0, r4, r3
    d7a8:	eb45 71e3 	adc.w	r1, r5, r3, asr #31
    d7ac:	b004      	add	sp, #16
    d7ae:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}

0000d7b2 <os_time_ms_to_ticks>:

int
os_time_ms_to_ticks(uint32_t ms, os_time_t *out_ticks)
{
    d7b2:	b538      	push	{r3, r4, r5, lr}
    d7b4:	4604      	mov	r4, r0
    d7b6:	460d      	mov	r5, r1
#endif

    static_assert(OS_TICKS_PER_SEC <= UINT32_MAX,
                  "OS_TICKS_PER_SEC must be <= UINT32_MAX");

    ticks = ((uint64_t)ms * OS_TICKS_PER_SEC) / 1000;
    d7b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    d7bc:	2300      	movs	r3, #0
    d7be:	01c0      	lsls	r0, r0, #7
    d7c0:	0e61      	lsrs	r1, r4, #25
    d7c2:	f01d f8c3 	bl	2a94c <__aeabi_uldivmod>
    if (ticks > UINT32_MAX) {
    d7c6:	2901      	cmp	r1, #1
    d7c8:	bf08      	it	eq
    d7ca:	2800      	cmpeq	r0, #0
    d7cc:	d202      	bcs.n	d7d4 <os_time_ms_to_ticks+0x22>
        return OS_EINVAL;
    }

    *out_ticks = ticks;
    d7ce:	6028      	str	r0, [r5, #0]
    return 0;
    d7d0:	2000      	movs	r0, #0
}
    d7d2:	bd38      	pop	{r3, r4, r5, pc}
        return OS_EINVAL;
    d7d4:	2002      	movs	r0, #2
    d7d6:	e7fc      	b.n	d7d2 <os_time_ms_to_ticks+0x20>

0000d7d8 <os_arch_task_return_handler>:
    return ret;
}

static void
os_arch_task_return_handler(void)
{
    d7d8:	e7fe      	b.n	d7d8 <os_arch_task_return_handler>

0000d7da <timer_handler>:
{
    d7da:	b508      	push	{r3, lr}
    os_time_advance(1);
    d7dc:	2001      	movs	r0, #1
    d7de:	f7ff ff4f 	bl	d680 <os_time_advance>
}
    d7e2:	bd08      	pop	{r3, pc}

0000d7e4 <os_arch_ctx_sw>:
{
    d7e4:	b508      	push	{r3, lr}
    os_sched_ctx_sw_hook(t);
    d7e6:	f7ff fd49 	bl	d27c <os_sched_ctx_sw_hook>
    SCB->ICSR = SCB_ICSR_PENDSVSET_Msk;
    d7ea:	4b02      	ldr	r3, [pc, #8]	; (d7f4 <os_arch_ctx_sw+0x10>)
    d7ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    d7f0:	605a      	str	r2, [r3, #4]
}
    d7f2:	bd08      	pop	{r3, pc}
    d7f4:	e000ed00 	.word	0xe000ed00

0000d7f8 <os_arch_save_sr>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    d7f8:	f3ef 8010 	mrs	r0, PRIMASK
    isr_ctx = __get_PRIMASK() & 1;
    d7fc:	f000 0001 	and.w	r0, r0, #1
  __ASM volatile ("cpsid i" : : : "memory");
    d800:	b672      	cpsid	i
}
    d802:	4770      	bx	lr

0000d804 <os_arch_restore_sr>:
    if (!isr_ctx) {
    d804:	b900      	cbnz	r0, d808 <os_arch_restore_sr+0x4>
  __ASM volatile ("cpsie i" : : : "memory");
    d806:	b662      	cpsie	i
}
    d808:	4770      	bx	lr

0000d80a <os_arch_in_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    d80a:	f3ef 8010 	mrs	r0, PRIMASK
}
    d80e:	f000 0001 	and.w	r0, r0, #1
    d812:	4770      	bx	lr

0000d814 <os_arch_task_stack_init>:
    while (1);
}

os_stack_t *
os_arch_task_stack_init(struct os_task *t, os_stack_t *stack_top, int size)
{
    d814:	b570      	push	{r4, r5, r6, lr}
    d816:	4606      	mov	r6, r0
    d818:	460d      	mov	r5, r1
    int i;
    os_stack_t *s;
    struct stack_frame *sf;

    /* Get stack frame pointer */
    s = (os_stack_t *) ((uint8_t *) stack_top - sizeof(*sf));
    d81a:	f1a1 0440 	sub.w	r4, r1, #64	; 0x40

    /* Zero out R1-R3, R12 */
    for (i = 9; i < 13; ++i) {
    d81e:	2309      	movs	r3, #9
    d820:	e003      	b.n	d82a <os_arch_task_stack_init+0x16>
        s[i] = 0;
    d822:	2200      	movs	r2, #0
    d824:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    for (i = 9; i < 13; ++i) {
    d828:	3301      	adds	r3, #1
    d82a:	2b0c      	cmp	r3, #12
    d82c:	ddf9      	ble.n	d822 <os_arch_task_stack_init+0xe>
    }

    /* Set registers R4 - R11 on stack. */
    os_arch_init_task_stack(s);
    d82e:	4620      	mov	r0, r4
    d830:	f000 fda0 	bl	e374 <os_arch_init_task_stack>

    /* Set remaining portions of stack frame */
    sf = (struct stack_frame *) s;
    sf->xpsr = INITIAL_xPSR;
    d834:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    d838:	f845 3c04 	str.w	r3, [r5, #-4]
    sf->pc = (uint32_t)t->t_func;
    d83c:	6973      	ldr	r3, [r6, #20]
    d83e:	f845 3c08 	str.w	r3, [r5, #-8]
    sf->r0 = (uint32_t)t->t_arg;
    d842:	69b3      	ldr	r3, [r6, #24]
    d844:	f845 3c20 	str.w	r3, [r5, #-32]
    /* Set function to cache returns from tasks. */
    sf->lr = (uint32_t)os_arch_task_return_handler;
    d848:	4b02      	ldr	r3, [pc, #8]	; (d854 <os_arch_task_stack_init+0x40>)
    d84a:	f845 3c0c 	str.w	r3, [r5, #-12]
#if MYNEWT_VAL(HARDFLOAT)
    sf->exc_lr = INITIAL_LR;
#endif

    return (s);
}
    d84e:	4620      	mov	r0, r4
    d850:	bd70      	pop	{r4, r5, r6, pc}
    d852:	bf00      	nop
    d854:	0000d7d9 	.word	0x0000d7d9

0000d858 <os_arch_init>:

void
os_arch_init(void)
{
    d858:	b508      	push	{r3, lr}
    /*
     * Trap on divide-by-zero.
     */
    SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    d85a:	4a04      	ldr	r2, [pc, #16]	; (d86c <os_arch_init+0x14>)
    d85c:	6953      	ldr	r3, [r2, #20]
    d85e:	f043 0310 	orr.w	r3, r3, #16
    d862:	6153      	str	r3, [r2, #20]
    os_init_idle_task();
    d864:	f7fe ffc0 	bl	c7e8 <os_init_idle_task>
}
    d868:	bd08      	pop	{r3, pc}
    d86a:	bf00      	nop
    d86c:	e000ed00 	.word	0xe000ed00

0000d870 <os_arch_os_init>:
    SVC_Call(os_arch_init);
}

os_error_t
os_arch_os_init(void)
{
    d870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    d872:	f3ef 8405 	mrs	r4, IPSR
    os_error_t err;
    int i;

    /* Cannot be called within an ISR */
    err = OS_ERR_IN_ISR;
    if (__get_IPSR() == 0) {
    d876:	b90c      	cbnz	r4, d87c <os_arch_os_init+0xc>
        err = OS_OK;

        /* Drop priority for all interrupts */
        for (i = 0; i < sizeof(NVIC->IP); i++) {
    d878:	2400      	movs	r4, #0
    d87a:	e009      	b.n	d890 <os_arch_os_init+0x20>
    err = OS_ERR_IN_ISR;
    d87c:	2007      	movs	r0, #7
    d87e:	e02e      	b.n	d8de <os_arch_os_init+0x6e>
            NVIC->IP[i] = -1;
    d880:	f104 4560 	add.w	r5, r4, #3758096384	; 0xe0000000
    d884:	f505 4561 	add.w	r5, r5, #57600	; 0xe100
    d888:	26ff      	movs	r6, #255	; 0xff
    d88a:	f885 6300 	strb.w	r6, [r5, #768]	; 0x300
        for (i = 0; i < sizeof(NVIC->IP); i++) {
    d88e:	3401      	adds	r4, #1
    d890:	2cef      	cmp	r4, #239	; 0xef
    d892:	d9f5      	bls.n	d880 <os_arch_os_init+0x10>
         * Install default interrupt handler for all interrupts except Reset,
         * which'll print out system state at the time of the interrupt, and
         * few other regs which should help in trying to figure out what went
         * wrong.
         */
        for (i = -NVIC_USER_IRQ_OFFSET + 2;
    d894:	f06f 040d 	mvn.w	r4, #13
    d898:	e007      	b.n	d8aa <os_arch_os_init+0x3a>
             i < NVIC_NUM_VECTORS - NVIC_USER_IRQ_OFFSET; i++) {
            NVIC_SetVector(i, (uint32_t)os_default_irq_asm);
    d89a:	b265      	sxtb	r5, r4
  uint32_t vectors = (uint32_t )SCB->VTOR;
    d89c:	4e12      	ldr	r6, [pc, #72]	; (d8e8 <os_arch_os_init+0x78>)
    d89e:	68b6      	ldr	r6, [r6, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
    d8a0:	3510      	adds	r5, #16
    d8a2:	4f12      	ldr	r7, [pc, #72]	; (d8ec <os_arch_os_init+0x7c>)
    d8a4:	f846 7025 	str.w	r7, [r6, r5, lsl #2]
             i < NVIC_NUM_VECTORS - NVIC_USER_IRQ_OFFSET; i++) {
    d8a8:	3401      	adds	r4, #1
        for (i = -NVIC_USER_IRQ_OFFSET + 2;
    d8aa:	2c25      	cmp	r4, #37	; 0x25
    d8ac:	ddf5      	ble.n	d89a <os_arch_os_init+0x2a>
  uint32_t vectors = (uint32_t )SCB->VTOR;
    d8ae:	4c0e      	ldr	r4, [pc, #56]	; (d8e8 <os_arch_os_init+0x78>)
    d8b0:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
    d8b2:	4e0f      	ldr	r6, [pc, #60]	; (d8f0 <os_arch_os_init+0x80>)
    d8b4:	62ee      	str	r6, [r5, #44]	; 0x2c
  uint32_t vectors = (uint32_t )SCB->VTOR;
    d8b6:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
    d8b8:	4e0e      	ldr	r6, [pc, #56]	; (d8f4 <os_arch_os_init+0x84>)
    d8ba:	63ae      	str	r6, [r5, #56]	; 0x38
  uint32_t vectors = (uint32_t )SCB->VTOR;
    d8bc:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
    d8be:	4e0e      	ldr	r6, [pc, #56]	; (d8f8 <os_arch_os_init+0x88>)
    d8c0:	63ee      	str	r6, [r5, #60]	; 0x3c
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    d8c2:	25e0      	movs	r5, #224	; 0xe0
    d8c4:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
    d8c8:	2520      	movs	r5, #32
    d8ca:	77e5      	strb	r5, [r4, #31]
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    d8cc:	f3ef 8414 	mrs	r4, CONTROL

        /* Set the SVC interrupt to priority 0 (highest configurable) */
        NVIC_SetPriority(SVCall_IRQn, SVC_PRIO);

        /* Check if privileged or not */
        if ((__get_CONTROL() & 1) == 0) {
    d8d0:	f014 0f01 	tst.w	r4, #1
    d8d4:	d004      	beq.n	d8e0 <os_arch_os_init+0x70>
    SVC_Call(os_arch_init);
    d8d6:	f8df c024 	ldr.w	ip, [pc, #36]	; d8fc <os_arch_os_init+0x8c>
    d8da:	df00      	svc	0
        err = OS_OK;
    d8dc:	2000      	movs	r0, #0
            svc_os_arch_init();
        }
    }

    return err;
}
    d8de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            os_arch_init();
    d8e0:	f7ff ffba 	bl	d858 <os_arch_init>
        err = OS_OK;
    d8e4:	2000      	movs	r0, #0
    d8e6:	e7fa      	b.n	d8de <os_arch_os_init+0x6e>
    d8e8:	e000ed00 	.word	0xe000ed00
    d8ec:	0000e3f7 	.word	0x0000e3f7
    d8f0:	0000e37b 	.word	0x0000e37b
    d8f4:	0000e3c1 	.word	0x0000e3c1
    d8f8:	0000e3eb 	.word	0x0000e3eb
    d8fc:	0000d859 	.word	0x0000d859

0000d900 <os_arch_start>:

uint32_t
os_arch_start(void)
{
    d900:	b510      	push	{r4, lr}
    struct os_task *t;

    /* Get the highest priority ready to run to set the current task */
    t = os_sched_next_task();
    d902:	f7ff fdad 	bl	d460 <os_sched_next_task>
    d906:	4604      	mov	r4, r0
    os_sched_set_current_task(t);
    d908:	f7ff fcd6 	bl	d2b8 <os_sched_set_current_task>

    /* Adjust PSP so it looks like this task just took an exception */
    __set_PSP((uint32_t)t->t_stackptr + offsetof(struct stack_frame, r0));
    d90c:	6823      	ldr	r3, [r4, #0]
    d90e:	3320      	adds	r3, #32
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    d910:	f383 8809 	msr	PSP, r3

    /* Intitialize and start system clock timer */
    os_tick_init(OS_TICKS_PER_SEC, OS_TICK_PRIO);
    d914:	2106      	movs	r1, #6
    d916:	2080      	movs	r0, #128	; 0x80
    d918:	f01b fb1e 	bl	28f58 <os_tick_init>

    /* Mark the OS as started, right before we run our first task */
    g_os_started = 1;
    d91c:	4b03      	ldr	r3, [pc, #12]	; (d92c <os_arch_start+0x2c>)
    d91e:	2201      	movs	r2, #1
    d920:	601a      	str	r2, [r3, #0]

    /* Perform context switch */
    os_arch_ctx_sw(t);
    d922:	4620      	mov	r0, r4
    d924:	f7ff ff5e 	bl	d7e4 <os_arch_ctx_sw>

    return (uint32_t)(t->t_arg);
}
    d928:	69a0      	ldr	r0, [r4, #24]
    d92a:	bd10      	pop	{r4, pc}
    d92c:	20003af8 	.word	0x20003af8

0000d930 <os_arch_os_start>:
 *
 * @return os_error_t
 */
os_error_t
os_arch_os_start(void)
{
    d930:	b510      	push	{r4, lr}
     * privileged or un-privileged mode.
     *
     * We switch to using "empty" part of idle task's stack until
     * the svc_os_arch_start() executes SVC, and we will never return.
     */
    os_set_env(g_idle_task.t_stackptr - 1);
    d932:	4814      	ldr	r0, [pc, #80]	; (d984 <os_arch_os_start+0x54>)
    d934:	6800      	ldr	r0, [r0, #0]
    d936:	3804      	subs	r0, #4
    d938:	f000 fd12 	bl	e360 <os_set_env>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    d93c:	f3ef 8405 	mrs	r4, IPSR

    err = OS_ERR_IN_ISR;
    if (__get_IPSR() == 0) {
    d940:	b9d4      	cbnz	r4, d978 <os_arch_os_start+0x48>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    d942:	f3ef 8414 	mrs	r4, CONTROL
         * The following switch statement is really just a sanity check to
         * insure that the os initialization routine was called prior to the
         * os start routine.
         */
        err = OS_OK;
        switch (__get_CONTROL() & 0x03) {
    d946:	f004 0403 	and.w	r4, r4, #3
    d94a:	2c03      	cmp	r4, #3
    d94c:	d808      	bhi.n	d960 <os_arch_os_start+0x30>
    d94e:	e8df f004 	tbb	[pc, r4]
    d952:	1515      	.short	0x1515
    d954:	0c02      	.short	0x0c02
        case 0x02:
            /*
             * We are running in Privileged Thread mode w/SP = PSP but we
             * are supposed to be un-privileged.
             */
            if ((os_flags & 1) == OS_RUN_UNPRIV) {
    d956:	4c0c      	ldr	r4, [pc, #48]	; (d988 <os_arch_os_start+0x58>)
    d958:	6824      	ldr	r4, [r4, #0]
    d95a:	f014 0f01 	tst.w	r4, #1
    d95e:	d10f      	bne.n	d980 <os_arch_os_start+0x50>
    SVC_Call(os_arch_start);
    d960:	f8df c028 	ldr.w	ip, [pc, #40]	; d98c <os_arch_os_start+0x5c>
    d964:	df00      	svc	0
    d966:	2000      	movs	r0, #0
            svc_os_arch_start();
        }
    }

    return err;
}
    d968:	bd10      	pop	{r4, pc}
            if  ((os_flags & 1) == OS_RUN_PRIV) {
    d96a:	4c07      	ldr	r4, [pc, #28]	; (d988 <os_arch_os_start+0x58>)
    d96c:	6824      	ldr	r4, [r4, #0]
    d96e:	f014 0f01 	tst.w	r4, #1
    d972:	d1f5      	bne.n	d960 <os_arch_os_start+0x30>
                err = OS_ERR_PRIV;
    d974:	2008      	movs	r0, #8
    d976:	e7f7      	b.n	d968 <os_arch_os_start+0x38>
    err = OS_ERR_IN_ISR;
    d978:	2007      	movs	r0, #7
    d97a:	e7f5      	b.n	d968 <os_arch_os_start+0x38>
            err = OS_ERR_PRIV;
    d97c:	2008      	movs	r0, #8
    d97e:	e7f3      	b.n	d968 <os_arch_os_start+0x38>
                err = OS_ERR_PRIV;
    d980:	2008      	movs	r0, #8
    d982:	e7f1      	b.n	d968 <os_arch_os_start+0x38>
    d984:	20003aa4 	.word	0x20003aa4
    d988:	20002170 	.word	0x20002170
    d98c:	0000d901 	.word	0x0000d901

0000d990 <os_mbuf_pool_init>:

int
os_mbuf_pool_init(struct os_mbuf_pool *omp, struct os_mempool *mp,
                  uint16_t buf_len, uint16_t nbufs)
{
    omp->omp_databuf_len = buf_len - sizeof(struct os_mbuf);
    d990:	3a10      	subs	r2, #16
    d992:	8002      	strh	r2, [r0, #0]
    omp->omp_pool = mp;
    d994:	6041      	str	r1, [r0, #4]

    return (0);
}
    d996:	2000      	movs	r0, #0
    d998:	4770      	bx	lr

0000d99a <os_mbuf_get>:

struct os_mbuf *
os_mbuf_get(struct os_mbuf_pool *omp, uint16_t leadingspace)
{
    d99a:	b538      	push	{r3, r4, r5, lr}
    struct os_mbuf *om;

    os_trace_api_u32x2(OS_TRACE_ID_MBUF_GET, (uint32_t)omp,
                       (uint32_t)leadingspace);

    if (leadingspace > omp->omp_databuf_len) {
    d99c:	8803      	ldrh	r3, [r0, #0]
    d99e:	428b      	cmp	r3, r1
    d9a0:	d312      	bcc.n	d9c8 <os_mbuf_get+0x2e>
    d9a2:	460d      	mov	r5, r1
    d9a4:	4604      	mov	r4, r0
        om = NULL;
        goto done;
    }

    om = os_memblock_get(omp->omp_pool);
    d9a6:	6840      	ldr	r0, [r0, #4]
    d9a8:	f7ff fac2 	bl	cf30 <os_memblock_get>
    if (!om) {
    d9ac:	4603      	mov	r3, r0
    d9ae:	b148      	cbz	r0, d9c4 <os_mbuf_get+0x2a>
        goto done;
    }

    SLIST_NEXT(om, om_next) = NULL;
    d9b0:	2200      	movs	r2, #0
    d9b2:	60c2      	str	r2, [r0, #12]
    om->om_flags = 0;
    d9b4:	7102      	strb	r2, [r0, #4]
    om->om_pkthdr_len = 0;
    d9b6:	7142      	strb	r2, [r0, #5]
    om->om_len = 0;
    d9b8:	80c2      	strh	r2, [r0, #6]
    om->om_data = (&om->om_databuf[0] + leadingspace);
    d9ba:	f100 0110 	add.w	r1, r0, #16
    d9be:	4429      	add	r1, r5
    d9c0:	6001      	str	r1, [r0, #0]
    om->om_omp = omp;
    d9c2:	6084      	str	r4, [r0, #8]

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_GET, (uint32_t)om);
    return om;
}
    d9c4:	4618      	mov	r0, r3
    d9c6:	bd38      	pop	{r3, r4, r5, pc}
        om = NULL;
    d9c8:	2300      	movs	r3, #0
    return om;
    d9ca:	e7fb      	b.n	d9c4 <os_mbuf_get+0x2a>

0000d9cc <os_mbuf_get_pkthdr>:

struct os_mbuf *
os_mbuf_get_pkthdr(struct os_mbuf_pool *omp, uint8_t user_pkthdr_len)
{
    d9cc:	b538      	push	{r3, r4, r5, lr}

    os_trace_api_u32x2(OS_TRACE_ID_MBUF_GET_PKTHDR, (uint32_t)omp,
                       (uint32_t)user_pkthdr_len);

    /* User packet header must fit inside mbuf */
    pkthdr_len = user_pkthdr_len + sizeof(struct os_mbuf_pkthdr);
    d9ce:	f101 0508 	add.w	r5, r1, #8
    if ((pkthdr_len > omp->omp_databuf_len) || (pkthdr_len > 255)) {
    d9d2:	8803      	ldrh	r3, [r0, #0]
    d9d4:	42ab      	cmp	r3, r5
    d9d6:	d310      	bcc.n	d9fa <os_mbuf_get_pkthdr+0x2e>
    d9d8:	2dff      	cmp	r5, #255	; 0xff
    d9da:	d810      	bhi.n	d9fe <os_mbuf_get_pkthdr+0x32>
        om = NULL;
        goto done;
    }

    om = os_mbuf_get(omp, 0);
    d9dc:	2100      	movs	r1, #0
    d9de:	f7ff ffdc 	bl	d99a <os_mbuf_get>
    if (om) {
    d9e2:	4603      	mov	r3, r0
    d9e4:	b138      	cbz	r0, d9f6 <os_mbuf_get_pkthdr+0x2a>
        om->om_pkthdr_len = pkthdr_len;
    d9e6:	715d      	strb	r5, [r3, #5]
        om->om_data += pkthdr_len;
    d9e8:	6802      	ldr	r2, [r0, #0]
    d9ea:	4415      	add	r5, r2
    d9ec:	6005      	str	r5, [r0, #0]

        pkthdr = OS_MBUF_PKTHDR(om);
        pkthdr->omp_len = 0;
    d9ee:	2200      	movs	r2, #0
    d9f0:	8202      	strh	r2, [r0, #16]
        pkthdr->omp_flags = 0;
    d9f2:	8242      	strh	r2, [r0, #18]
        STAILQ_NEXT(pkthdr, omp_next) = NULL;
    d9f4:	6142      	str	r2, [r0, #20]
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_GET_PKTHDR, (uint32_t)om);
    return om;
}
    d9f6:	4618      	mov	r0, r3
    d9f8:	bd38      	pop	{r3, r4, r5, pc}
        om = NULL;
    d9fa:	2300      	movs	r3, #0
    d9fc:	e7fb      	b.n	d9f6 <os_mbuf_get_pkthdr+0x2a>
    d9fe:	2300      	movs	r3, #0
    return om;
    da00:	e7f9      	b.n	d9f6 <os_mbuf_get_pkthdr+0x2a>

0000da02 <os_mbuf_free>:

int
os_mbuf_free(struct os_mbuf *om)
{
    da02:	b508      	push	{r3, lr}
    int rc;

    os_trace_api_u32(OS_TRACE_ID_MBUF_FREE, (uint32_t)om);

    if (om->om_omp != NULL) {
    da04:	6883      	ldr	r3, [r0, #8]
    da06:	b123      	cbz	r3, da12 <os_mbuf_free+0x10>
    da08:	4601      	mov	r1, r0
        rc = os_memblock_put(om->om_omp->omp_pool, om);
    da0a:	6858      	ldr	r0, [r3, #4]
    da0c:	f7ff fab8 	bl	cf80 <os_memblock_put>
    rc = 0;

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_FREE, (uint32_t)rc);
    return (rc);
}
    da10:	bd08      	pop	{r3, pc}
    rc = 0;
    da12:	2000      	movs	r0, #0
    return (rc);
    da14:	e7fc      	b.n	da10 <os_mbuf_free+0xe>

0000da16 <os_mbuf_free_chain>:

int
os_mbuf_free_chain(struct os_mbuf *om)
{
    da16:	4603      	mov	r3, r0
    struct os_mbuf *next;
    int rc;

    os_trace_api_u32(OS_TRACE_ID_MBUF_FREE_CHAIN, (uint32_t)om);

    while (om != NULL) {
    da18:	b160      	cbz	r0, da34 <os_mbuf_free_chain+0x1e>
{
    da1a:	b510      	push	{r4, lr}
        next = SLIST_NEXT(om, om_next);
    da1c:	68dc      	ldr	r4, [r3, #12]

        rc = os_mbuf_free(om);
    da1e:	4618      	mov	r0, r3
    da20:	f7ff ffef 	bl	da02 <os_mbuf_free>
        if (rc != 0) {
            goto done;
        }

        om = next;
    da24:	4623      	mov	r3, r4
        if (rc != 0) {
    da26:	4602      	mov	r2, r0
    da28:	b910      	cbnz	r0, da30 <os_mbuf_free_chain+0x1a>
    while (om != NULL) {
    da2a:	2c00      	cmp	r4, #0
    da2c:	d1f6      	bne.n	da1c <os_mbuf_free_chain+0x6>
    }

    rc = 0;
    da2e:	2200      	movs	r2, #0

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_FREE_CHAIN, (uint32_t)rc);
    return (rc);
}
    da30:	4610      	mov	r0, r2
    da32:	bd10      	pop	{r4, pc}
    rc = 0;
    da34:	2200      	movs	r2, #0
}
    da36:	4610      	mov	r0, r2
    da38:	4770      	bx	lr

0000da3a <os_mbuf_append>:
    return len;
}

int
os_mbuf_append(struct os_mbuf *om, const void *data,  uint16_t len)
{
    da3a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    struct os_mbuf *new;
    int remainder;
    int space;
    int rc;

    if (om == NULL) {
    da3e:	2800      	cmp	r0, #0
    da40:	d04d      	beq.n	dade <os_mbuf_append+0xa4>
    da42:	460f      	mov	r7, r1
    da44:	4691      	mov	r9, r2
    da46:	4682      	mov	sl, r0
        rc = OS_EINVAL;
        goto err;
    }

    omp = om->om_omp;
    da48:	f8d0 8008 	ldr.w	r8, [r0, #8]

    /* Scroll to last mbuf in the chain */
    last = om;
    da4c:	4605      	mov	r5, r0
    while (SLIST_NEXT(last, om_next) != NULL) {
    da4e:	e000      	b.n	da52 <os_mbuf_append+0x18>
        last = SLIST_NEXT(last, om_next);
    da50:	461d      	mov	r5, r3
    while (SLIST_NEXT(last, om_next) != NULL) {
    da52:	68eb      	ldr	r3, [r5, #12]
    da54:	2b00      	cmp	r3, #0
    da56:	d1fb      	bne.n	da50 <os_mbuf_append+0x16>
    }

    remainder = len;
    da58:	464e      	mov	r6, r9
static inline uint16_t
_os_mbuf_trailingspace(struct os_mbuf *om)
{
    struct os_mbuf_pool *omp;

    omp = om->om_omp;
    da5a:	68ab      	ldr	r3, [r5, #8]

    return (&om->om_databuf[0] + omp->omp_databuf_len) -
    da5c:	f105 0410 	add.w	r4, r5, #16
    da60:	881b      	ldrh	r3, [r3, #0]
    da62:	441c      	add	r4, r3
      (om->om_data + om->om_len);
    da64:	6828      	ldr	r0, [r5, #0]
    da66:	88eb      	ldrh	r3, [r5, #6]
    da68:	4418      	add	r0, r3
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
    da6a:	1a24      	subs	r4, r4, r0
    da6c:	b2a4      	uxth	r4, r4
    space = OS_MBUF_TRAILINGSPACE(last);

    /* If room in current mbuf, copy the first part of the data into the
     * remaining space in that mbuf.
     */
    if (space > 0) {
    da6e:	b164      	cbz	r4, da8a <os_mbuf_append+0x50>
        if (space > remainder) {
    da70:	454c      	cmp	r4, r9
    da72:	dd00      	ble.n	da76 <os_mbuf_append+0x3c>
            space = remainder;
    da74:	464c      	mov	r4, r9
        }

        memcpy(OS_MBUF_DATA(last, uint8_t *) + last->om_len , data, space);
    da76:	4622      	mov	r2, r4
    da78:	4639      	mov	r1, r7
    da7a:	f000 fcf9 	bl	e470 <memcpy>

        last->om_len += space;
    da7e:	88eb      	ldrh	r3, [r5, #6]
    da80:	4423      	add	r3, r4
    da82:	80eb      	strh	r3, [r5, #6]
        data += space;
    da84:	4427      	add	r7, r4
        remainder -= space;
    da86:	eba9 0604 	sub.w	r6, r9, r4
    }

    /* Take the remaining data, and keep allocating new mbufs and copying
     * data into it, until data is exhausted.
     */
    while (remainder > 0) {
    da8a:	2e00      	cmp	r6, #0
    da8c:	dd16      	ble.n	dabc <os_mbuf_append+0x82>
        new = os_mbuf_get(omp, 0);
    da8e:	2100      	movs	r1, #0
    da90:	4640      	mov	r0, r8
    da92:	f7ff ff82 	bl	d99a <os_mbuf_get>
        if (!new) {
    da96:	4604      	mov	r4, r0
    da98:	b180      	cbz	r0, dabc <os_mbuf_append+0x82>
            break;
        }

        new->om_len = min(omp->omp_databuf_len, remainder);
    da9a:	f8b8 2000 	ldrh.w	r2, [r8]
    da9e:	42b2      	cmp	r2, r6
    daa0:	bfa8      	it	ge
    daa2:	4632      	movge	r2, r6
    daa4:	b292      	uxth	r2, r2
    daa6:	80c2      	strh	r2, [r0, #6]
        memcpy(OS_MBUF_DATA(new, void *), data, new->om_len);
    daa8:	4639      	mov	r1, r7
    daaa:	6800      	ldr	r0, [r0, #0]
    daac:	f000 fce0 	bl	e470 <memcpy>
        data += new->om_len;
    dab0:	88e3      	ldrh	r3, [r4, #6]
    dab2:	441f      	add	r7, r3
        remainder -= new->om_len;
    dab4:	1af6      	subs	r6, r6, r3
        SLIST_NEXT(last, om_next) = new;
    dab6:	60ec      	str	r4, [r5, #12]
        last = new;
    dab8:	4625      	mov	r5, r4
    daba:	e7e6      	b.n	da8a <os_mbuf_append+0x50>
    }

    /* Adjust the packet header length in the buffer */
    if (OS_MBUF_IS_PKTHDR(om)) {
    dabc:	f89a 3005 	ldrb.w	r3, [sl, #5]
    dac0:	2b07      	cmp	r3, #7
    dac2:	d907      	bls.n	dad4 <os_mbuf_append+0x9a>
        OS_MBUF_PKTHDR(om)->omp_len += len - remainder;
    dac4:	eba9 0906 	sub.w	r9, r9, r6
    dac8:	f8ba 3010 	ldrh.w	r3, [sl, #16]
    dacc:	fa13 f989 	uxtah	r9, r3, r9
    dad0:	f8aa 9010 	strh.w	r9, [sl, #16]
    }

    if (remainder != 0) {
    dad4:	b106      	cbz	r6, dad8 <os_mbuf_append+0x9e>
        rc = OS_ENOMEM;
    dad6:	2601      	movs	r6, #1


    return (0);
err:
    return (rc);
}
    dad8:	4630      	mov	r0, r6
    dada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        rc = OS_EINVAL;
    dade:	2602      	movs	r6, #2
    dae0:	e7fa      	b.n	dad8 <os_mbuf_append+0x9e>

0000dae2 <os_mbuf_off>:

    /* Cast away const. */
    cur = (struct os_mbuf *)om;

    while (1) {
        if (cur == NULL) {
    dae2:	b170      	cbz	r0, db02 <os_mbuf_off+0x20>
{
    dae4:	b410      	push	{r4}
    dae6:	e002      	b.n	daee <os_mbuf_off+0xc>

            *out_off = off;
            return cur;
        }

        off -= cur->om_len;
    dae8:	1ac9      	subs	r1, r1, r3
        cur = next;
    daea:	4620      	mov	r0, r4
        if (cur == NULL) {
    daec:	b13c      	cbz	r4, dafe <os_mbuf_off+0x1c>
        next = SLIST_NEXT(cur, om_next);
    daee:	68c4      	ldr	r4, [r0, #12]
        if (cur->om_len > off ||
    daf0:	88c3      	ldrh	r3, [r0, #6]
    daf2:	428b      	cmp	r3, r1
    daf4:	dc02      	bgt.n	dafc <os_mbuf_off+0x1a>
    daf6:	d1f7      	bne.n	dae8 <os_mbuf_off+0x6>
            (cur->om_len == off && next == NULL)) {
    daf8:	2c00      	cmp	r4, #0
    dafa:	d1f5      	bne.n	dae8 <os_mbuf_off+0x6>
            *out_off = off;
    dafc:	8011      	strh	r1, [r2, #0]
    }
}
    dafe:	bc10      	pop	{r4}
    db00:	4770      	bx	lr
    db02:	4770      	bx	lr

0000db04 <os_mbuf_appendfrom>:
{
    db04:	b5f0      	push	{r4, r5, r6, r7, lr}
    db06:	b083      	sub	sp, #12
    db08:	4607      	mov	r7, r0
    db0a:	4608      	mov	r0, r1
    db0c:	4611      	mov	r1, r2
    db0e:	461e      	mov	r6, r3
    src_cur_om = os_mbuf_off(src, src_off, &src_cur_off);
    db10:	f10d 0206 	add.w	r2, sp, #6
    db14:	f7ff ffe5 	bl	dae2 <os_mbuf_off>
    db18:	4605      	mov	r5, r0
    while (len > 0) {
    db1a:	b1be      	cbz	r6, db4c <os_mbuf_appendfrom+0x48>
        if (src_cur_om == NULL) {
    db1c:	b1d5      	cbz	r5, db54 <os_mbuf_appendfrom+0x50>
        chunk_sz = min(len, src_cur_om->om_len - src_cur_off);
    db1e:	88ec      	ldrh	r4, [r5, #6]
    db20:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    db24:	1ae4      	subs	r4, r4, r3
    db26:	42b4      	cmp	r4, r6
    db28:	bfa8      	it	ge
    db2a:	4634      	movge	r4, r6
    db2c:	b2a4      	uxth	r4, r4
        rc = os_mbuf_append(dst, src_cur_om->om_data + src_cur_off, chunk_sz);
    db2e:	6829      	ldr	r1, [r5, #0]
    db30:	4622      	mov	r2, r4
    db32:	4419      	add	r1, r3
    db34:	4638      	mov	r0, r7
    db36:	f7ff ff80 	bl	da3a <os_mbuf_append>
        if (rc != 0) {
    db3a:	4603      	mov	r3, r0
    db3c:	b938      	cbnz	r0, db4e <os_mbuf_appendfrom+0x4a>
        len -= chunk_sz;
    db3e:	1b34      	subs	r4, r6, r4
    db40:	b2a6      	uxth	r6, r4
        src_cur_om = SLIST_NEXT(src_cur_om, om_next);
    db42:	68ed      	ldr	r5, [r5, #12]
        src_cur_off = 0;
    db44:	2300      	movs	r3, #0
    db46:	f8ad 3006 	strh.w	r3, [sp, #6]
    db4a:	e7e6      	b.n	db1a <os_mbuf_appendfrom+0x16>
    return 0;
    db4c:	2300      	movs	r3, #0
}
    db4e:	4618      	mov	r0, r3
    db50:	b003      	add	sp, #12
    db52:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return OS_EINVAL;
    db54:	2302      	movs	r3, #2
    db56:	e7fa      	b.n	db4e <os_mbuf_appendfrom+0x4a>

0000db58 <os_mbuf_copydata>:

int
os_mbuf_copydata(const struct os_mbuf *m, int off, int len, void *dst)
{
    db58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    db5a:	4604      	mov	r4, r0
    db5c:	461f      	mov	r7, r3
    unsigned int count;
    uint8_t *udst;

    if (!len) {
    db5e:	4616      	mov	r6, r2
    db60:	b312      	cbz	r2, dba8 <os_mbuf_copydata+0x50>
        return 0;
    }

    udst = dst;

    while (off > 0) {
    db62:	2900      	cmp	r1, #0
    db64:	dd06      	ble.n	db74 <os_mbuf_copydata+0x1c>
        if (!m) {
    db66:	b30c      	cbz	r4, dbac <os_mbuf_copydata+0x54>
            return (-1);
        }

        if (off < m->om_len)
    db68:	88e3      	ldrh	r3, [r4, #6]
    db6a:	428b      	cmp	r3, r1
    db6c:	dc02      	bgt.n	db74 <os_mbuf_copydata+0x1c>
            break;
        off -= m->om_len;
    db6e:	1ac9      	subs	r1, r1, r3
        m = SLIST_NEXT(m, om_next);
    db70:	68e4      	ldr	r4, [r4, #12]
    db72:	e7f6      	b.n	db62 <os_mbuf_copydata+0xa>
    }
    while (len > 0 && m != NULL) {
    db74:	2e00      	cmp	r6, #0
    db76:	dd10      	ble.n	db9a <os_mbuf_copydata+0x42>
    db78:	b17c      	cbz	r4, db9a <os_mbuf_copydata+0x42>
        count = min(m->om_len - off, len);
    db7a:	88e5      	ldrh	r5, [r4, #6]
    db7c:	1a6d      	subs	r5, r5, r1
    db7e:	42b5      	cmp	r5, r6
    db80:	bfa8      	it	ge
    db82:	4635      	movge	r5, r6
        memcpy(udst, m->om_data + off, count);
    db84:	6823      	ldr	r3, [r4, #0]
    db86:	462a      	mov	r2, r5
    db88:	4419      	add	r1, r3
    db8a:	4638      	mov	r0, r7
    db8c:	f000 fc70 	bl	e470 <memcpy>
        len -= count;
    db90:	1b76      	subs	r6, r6, r5
        udst += count;
    db92:	442f      	add	r7, r5
        off = 0;
        m = SLIST_NEXT(m, om_next);
    db94:	68e4      	ldr	r4, [r4, #12]
        off = 0;
    db96:	2100      	movs	r1, #0
    db98:	e7ec      	b.n	db74 <os_mbuf_copydata+0x1c>
    }

    return (len > 0 ? -1 : 0);
    db9a:	2e00      	cmp	r6, #0
    db9c:	dc01      	bgt.n	dba2 <os_mbuf_copydata+0x4a>
    db9e:	2000      	movs	r0, #0
    dba0:	e003      	b.n	dbaa <os_mbuf_copydata+0x52>
    dba2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    dba6:	e000      	b.n	dbaa <os_mbuf_copydata+0x52>
        return 0;
    dba8:	4610      	mov	r0, r2
}
    dbaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return (-1);
    dbac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    dbb0:	e7fb      	b.n	dbaa <os_mbuf_copydata+0x52>

0000dbb2 <os_mbuf_adj>:
{
    int len = req_len;
    struct os_mbuf *m;
    int count;

    if ((m = mp) == NULL)
    dbb2:	2800      	cmp	r0, #0
    dbb4:	d04e      	beq.n	dc54 <os_mbuf_adj+0xa2>
{
    dbb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dbb8:	4604      	mov	r4, r0
        return;
    if (len >= 0) {
    dbba:	2900      	cmp	r1, #0
    dbbc:	db1c      	blt.n	dbf8 <os_mbuf_adj+0x46>
    if ((m = mp) == NULL)
    dbbe:	4603      	mov	r3, r0
    int len = req_len;
    dbc0:	460a      	mov	r2, r1
    dbc2:	e005      	b.n	dbd0 <os_mbuf_adj+0x1e>
            if (m->om_len <= len) {
                len -= m->om_len;
                m->om_len = 0;
                m = SLIST_NEXT(m, om_next);
            } else {
                m->om_len -= len;
    dbc4:	1a80      	subs	r0, r0, r2
    dbc6:	80d8      	strh	r0, [r3, #6]
                m->om_data += len;
    dbc8:	6818      	ldr	r0, [r3, #0]
    dbca:	4402      	add	r2, r0
    dbcc:	601a      	str	r2, [r3, #0]
                len = 0;
    dbce:	2200      	movs	r2, #0
        while (m != NULL && len > 0) {
    dbd0:	b14b      	cbz	r3, dbe6 <os_mbuf_adj+0x34>
    dbd2:	2a00      	cmp	r2, #0
    dbd4:	dd07      	ble.n	dbe6 <os_mbuf_adj+0x34>
            if (m->om_len <= len) {
    dbd6:	88d8      	ldrh	r0, [r3, #6]
    dbd8:	4290      	cmp	r0, r2
    dbda:	dcf3      	bgt.n	dbc4 <os_mbuf_adj+0x12>
                len -= m->om_len;
    dbdc:	1a12      	subs	r2, r2, r0
                m->om_len = 0;
    dbde:	2000      	movs	r0, #0
    dbe0:	80d8      	strh	r0, [r3, #6]
                m = SLIST_NEXT(m, om_next);
    dbe2:	68db      	ldr	r3, [r3, #12]
    dbe4:	e7f4      	b.n	dbd0 <os_mbuf_adj+0x1e>
            }
        }
        if (OS_MBUF_IS_PKTHDR(mp))
    dbe6:	7963      	ldrb	r3, [r4, #5]
    dbe8:	2b07      	cmp	r3, #7
    dbea:	d904      	bls.n	dbf6 <os_mbuf_adj+0x44>
            OS_MBUF_PKTHDR(mp)->omp_len -= (req_len - len);
    dbec:	1a52      	subs	r2, r2, r1
    dbee:	8a21      	ldrh	r1, [r4, #16]
    dbf0:	fa11 f282 	uxtah	r2, r1, r2
    dbf4:	8222      	strh	r2, [r4, #16]
                break;
            }
            count -= m->om_len;
        }
    }
}
    dbf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        len = -len;
    dbf8:	424f      	negs	r7, r1
        count = 0;
    dbfa:	2200      	movs	r2, #0
    dbfc:	e000      	b.n	dc00 <os_mbuf_adj+0x4e>
            m = SLIST_NEXT(m, om_next);
    dbfe:	4628      	mov	r0, r5
            count += m->om_len;
    dc00:	88c3      	ldrh	r3, [r0, #6]
    dc02:	441a      	add	r2, r3
            if (SLIST_NEXT(m, om_next) == (struct os_mbuf *)0)
    dc04:	68c5      	ldr	r5, [r0, #12]
    dc06:	2d00      	cmp	r5, #0
    dc08:	d1f9      	bne.n	dbfe <os_mbuf_adj+0x4c>
        if (m->om_len >= len) {
    dc0a:	42bb      	cmp	r3, r7
    dc0c:	db09      	blt.n	dc22 <os_mbuf_adj+0x70>
            m->om_len -= len;
    dc0e:	b2bf      	uxth	r7, r7
    dc10:	1bdb      	subs	r3, r3, r7
    dc12:	80c3      	strh	r3, [r0, #6]
            if (OS_MBUF_IS_PKTHDR(mp))
    dc14:	7963      	ldrb	r3, [r4, #5]
    dc16:	2b07      	cmp	r3, #7
    dc18:	d9ed      	bls.n	dbf6 <os_mbuf_adj+0x44>
                OS_MBUF_PKTHDR(mp)->omp_len -= len;
    dc1a:	8a23      	ldrh	r3, [r4, #16]
    dc1c:	1bdf      	subs	r7, r3, r7
    dc1e:	8227      	strh	r7, [r4, #16]
    dc20:	e7e9      	b.n	dbf6 <os_mbuf_adj+0x44>
        if (count < 0)
    dc22:	188a      	adds	r2, r1, r2
    dc24:	d40b      	bmi.n	dc3e <os_mbuf_adj+0x8c>
        if (OS_MBUF_IS_PKTHDR(m))
    dc26:	7963      	ldrb	r3, [r4, #5]
    dc28:	2b07      	cmp	r3, #7
    dc2a:	d900      	bls.n	dc2e <os_mbuf_adj+0x7c>
            OS_MBUF_PKTHDR(m)->omp_len = count;
    dc2c:	8222      	strh	r2, [r4, #16]
        for (; m; m = SLIST_NEXT(m, om_next)) {
    dc2e:	2c00      	cmp	r4, #0
    dc30:	d0e1      	beq.n	dbf6 <os_mbuf_adj+0x44>
            if (m->om_len >= count) {
    dc32:	88e3      	ldrh	r3, [r4, #6]
    dc34:	4293      	cmp	r3, r2
    dc36:	da04      	bge.n	dc42 <os_mbuf_adj+0x90>
            count -= m->om_len;
    dc38:	1ad2      	subs	r2, r2, r3
        for (; m; m = SLIST_NEXT(m, om_next)) {
    dc3a:	68e4      	ldr	r4, [r4, #12]
    dc3c:	e7f7      	b.n	dc2e <os_mbuf_adj+0x7c>
            count = 0;
    dc3e:	2200      	movs	r2, #0
    dc40:	e7f1      	b.n	dc26 <os_mbuf_adj+0x74>
                m->om_len = count;
    dc42:	80e2      	strh	r2, [r4, #6]
                if (SLIST_NEXT(m, om_next) != NULL) {
    dc44:	68e0      	ldr	r0, [r4, #12]
    dc46:	2800      	cmp	r0, #0
    dc48:	d0d5      	beq.n	dbf6 <os_mbuf_adj+0x44>
                    os_mbuf_free_chain(SLIST_NEXT(m, om_next));
    dc4a:	f7ff fee4 	bl	da16 <os_mbuf_free_chain>
                    SLIST_NEXT(m, om_next) = NULL;
    dc4e:	2300      	movs	r3, #0
    dc50:	60e3      	str	r3, [r4, #12]
    dc52:	e7d0      	b.n	dbf6 <os_mbuf_adj+0x44>
    dc54:	4770      	bx	lr

0000dc56 <os_mbuf_cmpf>:

int
os_mbuf_cmpf(const struct os_mbuf *om, int off, const void *data, int len)
{
    dc56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dc5a:	b082      	sub	sp, #8
    uint16_t chunk_sz;
    uint16_t data_off;
    uint16_t om_off;
    int rc;

    if (len <= 0) {
    dc5c:	1e1e      	subs	r6, r3, #0
    dc5e:	dd2d      	ble.n	dcbc <os_mbuf_cmpf+0x66>
    dc60:	4617      	mov	r7, r2
        return 0;
    }

    data_off = 0;
    om = os_mbuf_off(om, off, &om_off);
    dc62:	f10d 0206 	add.w	r2, sp, #6
    dc66:	f7ff ff3c 	bl	dae2 <os_mbuf_off>
    dc6a:	4604      	mov	r4, r0
    data_off = 0;
    dc6c:	f04f 0800 	mov.w	r8, #0
    dc70:	e009      	b.n	dc86 <os_mbuf_cmpf+0x30>
            if (rc != 0) {
                return rc;
            }
        }

        data_off += chunk_sz;
    dc72:	4445      	add	r5, r8
    dc74:	fa1f f885 	uxth.w	r8, r5
        if (data_off == len) {
    dc78:	45b0      	cmp	r8, r6
    dc7a:	d027      	beq.n	dccc <os_mbuf_cmpf+0x76>
            return 0;
        }

        om = SLIST_NEXT(om, om_next);
    dc7c:	68e4      	ldr	r4, [r4, #12]
        om_off = 0;
    dc7e:	2300      	movs	r3, #0
    dc80:	f8ad 3006 	strh.w	r3, [sp, #6]

        if (om == NULL) {
    dc84:	b1bc      	cbz	r4, dcb6 <os_mbuf_cmpf+0x60>
        if (om == NULL) {
    dc86:	b1f4      	cbz	r4, dcc6 <os_mbuf_cmpf+0x70>
        chunk_sz = min(om->om_len - om_off, len - data_off);
    dc88:	eba6 0208 	sub.w	r2, r6, r8
    dc8c:	88e3      	ldrh	r3, [r4, #6]
    dc8e:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    dc92:	1a1b      	subs	r3, r3, r0
    dc94:	429a      	cmp	r2, r3
    dc96:	bfa8      	it	ge
    dc98:	461a      	movge	r2, r3
    dc9a:	b295      	uxth	r5, r2
        if (chunk_sz > 0) {
    dc9c:	2d00      	cmp	r5, #0
    dc9e:	d0e8      	beq.n	dc72 <os_mbuf_cmpf+0x1c>
            rc = memcmp(om->om_data + om_off, data + data_off, chunk_sz);
    dca0:	6823      	ldr	r3, [r4, #0]
    dca2:	462a      	mov	r2, r5
    dca4:	eb07 0108 	add.w	r1, r7, r8
    dca8:	4418      	add	r0, r3
    dcaa:	f000 fbbd 	bl	e428 <memcmp>
            if (rc != 0) {
    dcae:	4603      	mov	r3, r0
    dcb0:	2800      	cmp	r0, #0
    dcb2:	d0de      	beq.n	dc72 <os_mbuf_cmpf+0x1c>
    dcb4:	e003      	b.n	dcbe <os_mbuf_cmpf+0x68>
            return INT_MAX;
    dcb6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    dcba:	e000      	b.n	dcbe <os_mbuf_cmpf+0x68>
        return 0;
    dcbc:	2300      	movs	r3, #0
        }
    }
}
    dcbe:	4618      	mov	r0, r3
    dcc0:	b002      	add	sp, #8
    dcc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return INT_MAX;
    dcc6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    dcca:	e7f8      	b.n	dcbe <os_mbuf_cmpf+0x68>
            return 0;
    dccc:	2300      	movs	r3, #0
    dcce:	e7f6      	b.n	dcbe <os_mbuf_cmpf+0x68>

0000dcd0 <os_mbuf_cmpm>:

int
os_mbuf_cmpm(const struct os_mbuf *om1, uint16_t offset1,
             const struct os_mbuf *om2, uint16_t offset2,
             uint16_t len)
{
    dcd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    dcd4:	b083      	sub	sp, #12
    dcd6:	4615      	mov	r5, r2
    dcd8:	461f      	mov	r7, r3
    dcda:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
    uint16_t om2_left;
    uint16_t om1_off;
    uint16_t om2_off;
    int rc;

    om1_off = 0;
    dcde:	2300      	movs	r3, #0
    dce0:	f8ad 3006 	strh.w	r3, [sp, #6]
    om2_off = 0;
    dce4:	f8ad 3004 	strh.w	r3, [sp, #4]

    cur1 = os_mbuf_off(om1, offset1, &om1_off);
    dce8:	f10d 0206 	add.w	r2, sp, #6
    dcec:	f7ff fef9 	bl	dae2 <os_mbuf_off>
    dcf0:	4604      	mov	r4, r0
    cur2 = os_mbuf_off(om2, offset2, &om2_off);
    dcf2:	aa01      	add	r2, sp, #4
    dcf4:	4639      	mov	r1, r7
    dcf6:	4628      	mov	r0, r5
    dcf8:	f7ff fef3 	bl	dae2 <os_mbuf_off>
    dcfc:	4605      	mov	r5, r0
    dcfe:	e03a      	b.n	dd76 <os_mbuf_cmpm+0xa6>
        if (bytes_remaining == 0) {
            return 0;
        }

        while (cur1 != NULL && om1_off >= cur1->om_len) {
            cur1 = SLIST_NEXT(cur1, om_next);
    dd00:	68e4      	ldr	r4, [r4, #12]
            om1_off = 0;
    dd02:	2300      	movs	r3, #0
    dd04:	f8ad 3006 	strh.w	r3, [sp, #6]
        while (cur1 != NULL && om1_off >= cur1->om_len) {
    dd08:	b14c      	cbz	r4, dd1e <os_mbuf_cmpm+0x4e>
    dd0a:	88e2      	ldrh	r2, [r4, #6]
    dd0c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    dd10:	429a      	cmp	r2, r3
    dd12:	d9f5      	bls.n	dd00 <os_mbuf_cmpm+0x30>
    dd14:	e003      	b.n	dd1e <os_mbuf_cmpm+0x4e>
        }
        while (cur2 != NULL && om2_off >= cur2->om_len) {
            cur2 = SLIST_NEXT(cur2, om_next);
    dd16:	68ed      	ldr	r5, [r5, #12]
            om2_off = 0;
    dd18:	2300      	movs	r3, #0
    dd1a:	f8ad 3004 	strh.w	r3, [sp, #4]
        while (cur2 != NULL && om2_off >= cur2->om_len) {
    dd1e:	b125      	cbz	r5, dd2a <os_mbuf_cmpm+0x5a>
    dd20:	88ea      	ldrh	r2, [r5, #6]
    dd22:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    dd26:	429a      	cmp	r2, r3
    dd28:	d9f5      	bls.n	dd16 <os_mbuf_cmpm+0x46>
        }

        if (cur1 == NULL || cur2 == NULL) {
    dd2a:	b35c      	cbz	r4, dd84 <os_mbuf_cmpm+0xb4>
    dd2c:	b36d      	cbz	r5, dd8a <os_mbuf_cmpm+0xba>
            return INT_MAX;
        }

        om1_left = cur1->om_len - om1_off;
    dd2e:	88e3      	ldrh	r3, [r4, #6]
    dd30:	f8bd 9006 	ldrh.w	r9, [sp, #6]
    dd34:	eba3 0309 	sub.w	r3, r3, r9
    dd38:	b29a      	uxth	r2, r3
        om2_left = cur2->om_len - om2_off;
    dd3a:	88eb      	ldrh	r3, [r5, #6]
    dd3c:	f8bd 8004 	ldrh.w	r8, [sp, #4]
    dd40:	eba3 0308 	sub.w	r3, r3, r8
    dd44:	b29b      	uxth	r3, r3
        chunk_sz = min(min(om1_left, om2_left), bytes_remaining);
    dd46:	4637      	mov	r7, r6
    dd48:	429a      	cmp	r2, r3
    dd4a:	d200      	bcs.n	dd4e <os_mbuf_cmpm+0x7e>
    dd4c:	4613      	mov	r3, r2
    dd4e:	429f      	cmp	r7, r3
    dd50:	bfa8      	it	ge
    dd52:	461f      	movge	r7, r3

        rc = memcmp(cur1->om_data + om1_off, cur2->om_data + om2_off,
    dd54:	6820      	ldr	r0, [r4, #0]
    dd56:	6829      	ldr	r1, [r5, #0]
    dd58:	463a      	mov	r2, r7
    dd5a:	4441      	add	r1, r8
    dd5c:	4448      	add	r0, r9
    dd5e:	f000 fb63 	bl	e428 <memcmp>
                    chunk_sz);
        if (rc != 0) {
    dd62:	4603      	mov	r3, r0
    dd64:	b950      	cbnz	r0, dd7c <os_mbuf_cmpm+0xac>
            return rc;
        }

        om1_off += chunk_sz;
    dd66:	44b9      	add	r9, r7
    dd68:	f8ad 9006 	strh.w	r9, [sp, #6]
        om2_off += chunk_sz;
    dd6c:	44b8      	add	r8, r7
    dd6e:	f8ad 8004 	strh.w	r8, [sp, #4]
        bytes_remaining -= chunk_sz;
    dd72:	1bf6      	subs	r6, r6, r7
    dd74:	b2b6      	uxth	r6, r6
        if (bytes_remaining == 0) {
    dd76:	2e00      	cmp	r6, #0
    dd78:	d1c6      	bne.n	dd08 <os_mbuf_cmpm+0x38>
            return 0;
    dd7a:	2300      	movs	r3, #0
    }
}
    dd7c:	4618      	mov	r0, r3
    dd7e:	b003      	add	sp, #12
    dd80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            return INT_MAX;
    dd84:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    dd88:	e7f8      	b.n	dd7c <os_mbuf_cmpm+0xac>
    dd8a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    dd8e:	e7f5      	b.n	dd7c <os_mbuf_cmpm+0xac>

0000dd90 <os_mbuf_prepend>:

struct os_mbuf *
os_mbuf_prepend(struct os_mbuf *om, int len)
{
    dd90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dd92:	4604      	mov	r4, r0
    dd94:	460e      	mov	r6, r1
    dd96:	e019      	b.n	ddcc <os_mbuf_prepend+0x3c>
    startoff = 0;
    dd98:	2000      	movs	r0, #0
    dd9a:	e01b      	b.n	ddd4 <os_mbuf_prepend+0x44>
        /* The current head didn't have enough space; allocate a new head. */
        if (OS_MBUF_IS_PKTHDR(om)) {
            p = os_mbuf_get_pkthdr(om->om_omp,
                om->om_pkthdr_len - sizeof (struct os_mbuf_pkthdr));
        } else {
            p = os_mbuf_get(om->om_omp, 0);
    dd9c:	2100      	movs	r1, #0
    dd9e:	68a0      	ldr	r0, [r4, #8]
    dda0:	f7ff fdfb 	bl	d99a <os_mbuf_get>
    dda4:	4605      	mov	r5, r0
        }
        if (p == NULL) {
    dda6:	2d00      	cmp	r5, #0
    dda8:	d033      	beq.n	de12 <os_mbuf_prepend+0x82>
            os_mbuf_free_chain(om);
            om = NULL;
            break;
        }

        if (OS_MBUF_IS_PKTHDR(om)) {
    ddaa:	7963      	ldrb	r3, [r4, #5]
    ddac:	2b07      	cmp	r3, #7
    ddae:	d836      	bhi.n	de1e <os_mbuf_prepend+0x8e>
    omp = om->om_omp;
    ddb0:	68aa      	ldr	r2, [r5, #8]
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
    ddb2:	f105 0310 	add.w	r3, r5, #16
    ddb6:	8812      	ldrh	r2, [r2, #0]
    ddb8:	4413      	add	r3, r2
      (om->om_data + om->om_len);
    ddba:	6829      	ldr	r1, [r5, #0]
    ddbc:	88ea      	ldrh	r2, [r5, #6]
    ddbe:	440a      	add	r2, r1
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
    ddc0:	1a9b      	subs	r3, r3, r2
        }

        /* Move the new head's data pointer to the end so that data can be
         * prepended.
         */
        p->om_data += OS_MBUF_TRAILINGSPACE(p);
    ddc2:	fa11 f383 	uxtah	r3, r1, r3
    ddc6:	602b      	str	r3, [r5, #0]

        SLIST_NEXT(p, om_next) = om;
    ddc8:	60ec      	str	r4, [r5, #12]
        om = p;
    ddca:	462c      	mov	r4, r5
    if (OS_MBUF_IS_PKTHDR(om)) {
    ddcc:	7961      	ldrb	r1, [r4, #5]
    ddce:	2907      	cmp	r1, #7
    ddd0:	d9e2      	bls.n	dd98 <os_mbuf_prepend+0x8>
        startoff = om->om_pkthdr_len;
    ddd2:	b288      	uxth	r0, r1
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
    ddd4:	4623      	mov	r3, r4
    ddd6:	f853 2b10 	ldr.w	r2, [r3], #16
        ((uint8_t *) &om->om_databuf[0] + startoff));
    ddda:	4403      	add	r3, r0
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
    dddc:	1ad3      	subs	r3, r2, r3
    ddde:	b29b      	uxth	r3, r3
        leading = min(len, OS_MBUF_LEADINGSPACE(om));
    dde0:	429e      	cmp	r6, r3
    dde2:	da00      	bge.n	dde6 <os_mbuf_prepend+0x56>
    dde4:	4633      	mov	r3, r6
        om->om_data -= leading;
    dde6:	1ad2      	subs	r2, r2, r3
    dde8:	6022      	str	r2, [r4, #0]
        om->om_len += leading;
    ddea:	b298      	uxth	r0, r3
    ddec:	88e2      	ldrh	r2, [r4, #6]
    ddee:	4402      	add	r2, r0
    ddf0:	80e2      	strh	r2, [r4, #6]
        if (OS_MBUF_IS_PKTHDR(om)) {
    ddf2:	2907      	cmp	r1, #7
    ddf4:	d902      	bls.n	ddfc <os_mbuf_prepend+0x6c>
            OS_MBUF_PKTHDR(om)->omp_len += leading;
    ddf6:	8a22      	ldrh	r2, [r4, #16]
    ddf8:	4410      	add	r0, r2
    ddfa:	8220      	strh	r0, [r4, #16]
        if (len == 0) {
    ddfc:	1af6      	subs	r6, r6, r3
    ddfe:	d00c      	beq.n	de1a <os_mbuf_prepend+0x8a>
        if (OS_MBUF_IS_PKTHDR(om)) {
    de00:	2907      	cmp	r1, #7
    de02:	d9cb      	bls.n	dd9c <os_mbuf_prepend+0xc>
            p = os_mbuf_get_pkthdr(om->om_omp,
    de04:	3908      	subs	r1, #8
    de06:	b2c9      	uxtb	r1, r1
    de08:	68a0      	ldr	r0, [r4, #8]
    de0a:	f7ff fddf 	bl	d9cc <os_mbuf_get_pkthdr>
    de0e:	4605      	mov	r5, r0
    de10:	e7c9      	b.n	dda6 <os_mbuf_prepend+0x16>
            os_mbuf_free_chain(om);
    de12:	4620      	mov	r0, r4
    de14:	f7ff fdff 	bl	da16 <os_mbuf_free_chain>
            om = NULL;
    de18:	462c      	mov	r4, r5
    }

    return om;
}
    de1a:	4620      	mov	r0, r4
    de1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    assert(new_buf->om_len == 0);
    de1e:	88eb      	ldrh	r3, [r5, #6]
    de20:	b97b      	cbnz	r3, de42 <os_mbuf_prepend+0xb2>
    memcpy(&new_buf->om_databuf[0], &old_buf->om_databuf[0],
    de22:	f105 0710 	add.w	r7, r5, #16
    de26:	7962      	ldrb	r2, [r4, #5]
    de28:	f104 0110 	add.w	r1, r4, #16
    de2c:	4638      	mov	r0, r7
    de2e:	f000 fb1f 	bl	e470 <memcpy>
    new_buf->om_pkthdr_len = old_buf->om_pkthdr_len;
    de32:	7963      	ldrb	r3, [r4, #5]
    de34:	716b      	strb	r3, [r5, #5]
    new_buf->om_data = new_buf->om_databuf + old_buf->om_pkthdr_len;
    de36:	7963      	ldrb	r3, [r4, #5]
    de38:	441f      	add	r7, r3
    de3a:	602f      	str	r7, [r5, #0]
            om->om_pkthdr_len = 0;
    de3c:	2300      	movs	r3, #0
    de3e:	7163      	strb	r3, [r4, #5]
    de40:	e7b6      	b.n	ddb0 <os_mbuf_prepend+0x20>
    assert(new_buf->om_len == 0);
    de42:	f7fe f9d1 	bl	c1e8 <hal_debugger_connected>
    de46:	b100      	cbz	r0, de4a <os_mbuf_prepend+0xba>
    de48:	be01      	bkpt	0x0001
    de4a:	2300      	movs	r3, #0
    de4c:	461a      	mov	r2, r3
    de4e:	4619      	mov	r1, r3
    de50:	4618      	mov	r0, r3
    de52:	f7fe fc03 	bl	c65c <__assert_func>

0000de56 <os_mbuf_copyinto>:
    return om;
}

int
os_mbuf_copyinto(struct os_mbuf *om, int off, const void *src, int len)
{
    de56:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    de5a:	b083      	sub	sp, #12
    de5c:	4681      	mov	r9, r0
    de5e:	4688      	mov	r8, r1
    de60:	4617      	mov	r7, r2
    de62:	461e      	mov	r6, r3
    uint16_t cur_off;
    int copylen;
    int rc;

    /* Find the mbuf,offset pair for the start of the destination. */
    cur = os_mbuf_off(om, off, &cur_off);
    de64:	f10d 0206 	add.w	r2, sp, #6
    de68:	f7ff fe3b 	bl	dae2 <os_mbuf_off>
    if (cur == NULL) {
    de6c:	4605      	mov	r5, r0
    de6e:	b948      	cbnz	r0, de84 <os_mbuf_copyinto+0x2e>
        return -1;
    de70:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    de74:	e02d      	b.n	ded2 <os_mbuf_copyinto+0x7c>
            len -= copylen;

            copylen = 0;
        }

        if (len == 0) {
    de76:	b366      	cbz	r6, ded2 <os_mbuf_copyinto+0x7c>
            /* All the source data fit in the existing mbuf chain. */
            return 0;
        }

        next = SLIST_NEXT(cur, om_next);
    de78:	68eb      	ldr	r3, [r5, #12]
        if (next == NULL) {
    de7a:	b1ab      	cbz	r3, dea8 <os_mbuf_copyinto+0x52>
            break;
        }

        cur = next;
        cur_off = 0;
    de7c:	2200      	movs	r2, #0
    de7e:	f8ad 2006 	strh.w	r2, [sp, #6]
        cur = next;
    de82:	461d      	mov	r5, r3
        copylen = min(cur->om_len - cur_off, len);
    de84:	88ec      	ldrh	r4, [r5, #6]
    de86:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    de8a:	1ae4      	subs	r4, r4, r3
    de8c:	42b4      	cmp	r4, r6
    de8e:	bfa8      	it	ge
    de90:	4634      	movge	r4, r6
        if (copylen > 0) {
    de92:	2c00      	cmp	r4, #0
    de94:	ddef      	ble.n	de76 <os_mbuf_copyinto+0x20>
            memcpy(cur->om_data + cur_off, sptr, copylen);
    de96:	6828      	ldr	r0, [r5, #0]
    de98:	4622      	mov	r2, r4
    de9a:	4639      	mov	r1, r7
    de9c:	4418      	add	r0, r3
    de9e:	f000 fae7 	bl	e470 <memcpy>
            sptr += copylen;
    dea2:	4427      	add	r7, r4
            len -= copylen;
    dea4:	1b36      	subs	r6, r6, r4
    dea6:	e7e6      	b.n	de76 <os_mbuf_copyinto+0x20>
    }

    /* Append the remaining data to the end of the chain. */
    rc = os_mbuf_append(cur, sptr, len);
    dea8:	b2b2      	uxth	r2, r6
    deaa:	4639      	mov	r1, r7
    deac:	4628      	mov	r0, r5
    deae:	f7ff fdc4 	bl	da3a <os_mbuf_append>
    if (rc != 0) {
    deb2:	b968      	cbnz	r0, ded0 <os_mbuf_copyinto+0x7a>
        return rc;
    }

    /* Fix up the packet header, if one is present. */
    if (OS_MBUF_IS_PKTHDR(om)) {
    deb4:	f899 2005 	ldrb.w	r2, [r9, #5]
    deb8:	2a07      	cmp	r2, #7
    deba:	d90e      	bls.n	deda <os_mbuf_copyinto+0x84>
        OS_MBUF_PKTHDR(om)->omp_len =
            max(OS_MBUF_PKTHDR(om)->omp_len, off + len);
    debc:	4446      	add	r6, r8
    debe:	f8b9 8010 	ldrh.w	r8, [r9, #16]
    dec2:	4546      	cmp	r6, r8
    dec4:	bfb8      	it	lt
    dec6:	4646      	movlt	r6, r8
        OS_MBUF_PKTHDR(om)->omp_len =
    dec8:	f8a9 6010 	strh.w	r6, [r9, #16]
    }

    return 0;
    decc:	4606      	mov	r6, r0
    dece:	e000      	b.n	ded2 <os_mbuf_copyinto+0x7c>
        return rc;
    ded0:	4606      	mov	r6, r0
}
    ded2:	4630      	mov	r0, r6
    ded4:	b003      	add	sp, #12
    ded6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return 0;
    deda:	4606      	mov	r6, r0
    dedc:	e7f9      	b.n	ded2 <os_mbuf_copyinto+0x7c>

0000dede <os_mbuf_concat>:
{
    struct os_mbuf *next;
    struct os_mbuf *cur;

    /* Point 'cur' to the last buffer in the first chain. */
    cur = first;
    dede:	4602      	mov	r2, r0
    dee0:	e000      	b.n	dee4 <os_mbuf_concat+0x6>
        next = SLIST_NEXT(cur, om_next);
        if (next == NULL) {
            break;
        }

        cur = next;
    dee2:	461a      	mov	r2, r3
        next = SLIST_NEXT(cur, om_next);
    dee4:	68d3      	ldr	r3, [r2, #12]
        if (next == NULL) {
    dee6:	2b00      	cmp	r3, #0
    dee8:	d1fb      	bne.n	dee2 <os_mbuf_concat+0x4>
    }

    /* Attach the second chain to the end of the first. */
    SLIST_NEXT(cur, om_next) = second;
    deea:	60d1      	str	r1, [r2, #12]

    /* If the first chain has a packet header, calculate the length of the
     * second chain and add it to the header length.
     */
    if (OS_MBUF_IS_PKTHDR(first)) {
    deec:	7943      	ldrb	r3, [r0, #5]
    deee:	2b07      	cmp	r3, #7
    def0:	d914      	bls.n	df1c <os_mbuf_concat+0x3e>
        if (OS_MBUF_IS_PKTHDR(second)) {
    def2:	794b      	ldrb	r3, [r1, #5]
    def4:	2b07      	cmp	r3, #7
    def6:	d80d      	bhi.n	df14 <os_mbuf_concat+0x36>
            OS_MBUF_PKTHDR(first)->omp_len += OS_MBUF_PKTHDR(second)->omp_len;
        } else {
            for (cur = second; cur != NULL; cur = SLIST_NEXT(cur, om_next)) {
    def8:	460b      	mov	r3, r1
    defa:	b179      	cbz	r1, df1c <os_mbuf_concat+0x3e>
{
    defc:	b410      	push	{r4}
                OS_MBUF_PKTHDR(first)->omp_len += cur->om_len;
    defe:	88da      	ldrh	r2, [r3, #6]
    df00:	8a04      	ldrh	r4, [r0, #16]
    df02:	4422      	add	r2, r4
    df04:	8202      	strh	r2, [r0, #16]
            for (cur = second; cur != NULL; cur = SLIST_NEXT(cur, om_next)) {
    df06:	68db      	ldr	r3, [r3, #12]
    df08:	2b00      	cmp	r3, #0
    df0a:	d1f8      	bne.n	defe <os_mbuf_concat+0x20>
            }
        }
    }

    second->om_pkthdr_len = 0;
    df0c:	2300      	movs	r3, #0
    df0e:	714b      	strb	r3, [r1, #5]
}
    df10:	bc10      	pop	{r4}
    df12:	4770      	bx	lr
            OS_MBUF_PKTHDR(first)->omp_len += OS_MBUF_PKTHDR(second)->omp_len;
    df14:	8a0b      	ldrh	r3, [r1, #16]
    df16:	8a02      	ldrh	r2, [r0, #16]
    df18:	4413      	add	r3, r2
    df1a:	8203      	strh	r3, [r0, #16]
    second->om_pkthdr_len = 0;
    df1c:	2300      	movs	r3, #0
    df1e:	714b      	strb	r3, [r1, #5]
    df20:	4770      	bx	lr

0000df22 <os_mbuf_extend>:

void *
os_mbuf_extend(struct os_mbuf *om, uint16_t len)
{
    df22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    struct os_mbuf *newm;
    struct os_mbuf *last;
    void *data;

    if (len > om->om_omp->omp_databuf_len) {
    df24:	6887      	ldr	r7, [r0, #8]
    df26:	883b      	ldrh	r3, [r7, #0]
    df28:	428b      	cmp	r3, r1
    df2a:	d327      	bcc.n	df7c <os_mbuf_extend+0x5a>
        return NULL;
    }

    /* Scroll to last mbuf in the chain */
    last = om;
    df2c:	4604      	mov	r4, r0
    df2e:	e000      	b.n	df32 <os_mbuf_extend+0x10>
    while (SLIST_NEXT(last, om_next) != NULL) {
        last = SLIST_NEXT(last, om_next);
    df30:	461c      	mov	r4, r3
    while (SLIST_NEXT(last, om_next) != NULL) {
    df32:	68e3      	ldr	r3, [r4, #12]
    df34:	2b00      	cmp	r3, #0
    df36:	d1fb      	bne.n	df30 <os_mbuf_extend+0xe>
    df38:	460d      	mov	r5, r1
    df3a:	4606      	mov	r6, r0
    omp = om->om_omp;
    df3c:	68a2      	ldr	r2, [r4, #8]
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
    df3e:	f104 0310 	add.w	r3, r4, #16
    df42:	8812      	ldrh	r2, [r2, #0]
    df44:	4413      	add	r3, r2
      (om->om_data + om->om_len);
    df46:	6822      	ldr	r2, [r4, #0]
    df48:	88e1      	ldrh	r1, [r4, #6]
    df4a:	440a      	add	r2, r1
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
    df4c:	1a9b      	subs	r3, r3, r2
    df4e:	b29b      	uxth	r3, r3
    }

    if (OS_MBUF_TRAILINGSPACE(last) < len) {
    df50:	429d      	cmp	r5, r3
    df52:	d80b      	bhi.n	df6c <os_mbuf_extend+0x4a>

        SLIST_NEXT(last, om_next) = newm;
        last = newm;
    }

    data = last->om_data + last->om_len;
    df54:	6820      	ldr	r0, [r4, #0]
    df56:	88e3      	ldrh	r3, [r4, #6]
    df58:	4418      	add	r0, r3
    last->om_len += len;
    df5a:	442b      	add	r3, r5
    df5c:	80e3      	strh	r3, [r4, #6]

    if (OS_MBUF_IS_PKTHDR(om)) {
    df5e:	7973      	ldrb	r3, [r6, #5]
    df60:	2b07      	cmp	r3, #7
    df62:	d902      	bls.n	df6a <os_mbuf_extend+0x48>
        OS_MBUF_PKTHDR(om)->omp_len += len;
    df64:	8a31      	ldrh	r1, [r6, #16]
    df66:	440d      	add	r5, r1
    df68:	8235      	strh	r5, [r6, #16]
    }

    return data;
}
    df6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        newm = os_mbuf_get(om->om_omp, 0);
    df6c:	2100      	movs	r1, #0
    df6e:	4638      	mov	r0, r7
    df70:	f7ff fd13 	bl	d99a <os_mbuf_get>
        if (newm == NULL) {
    df74:	b120      	cbz	r0, df80 <os_mbuf_extend+0x5e>
        SLIST_NEXT(last, om_next) = newm;
    df76:	60e0      	str	r0, [r4, #12]
        last = newm;
    df78:	4604      	mov	r4, r0
    df7a:	e7eb      	b.n	df54 <os_mbuf_extend+0x32>
        return NULL;
    df7c:	2000      	movs	r0, #0
    df7e:	e7f4      	b.n	df6a <os_mbuf_extend+0x48>
            return NULL;
    df80:	2000      	movs	r0, #0
    df82:	e7f2      	b.n	df6a <os_mbuf_extend+0x48>

0000df84 <os_mbuf_pullup>:


struct os_mbuf *
os_mbuf_pullup(struct os_mbuf *om, uint16_t len)
{
    df84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    df88:	4604      	mov	r4, r0
    struct os_mbuf *next;
    struct os_mbuf *om2;
    int count;
    int space;

    omp = om->om_omp;
    df8a:	6880      	ldr	r0, [r0, #8]
    /*
     * If first mbuf has no cluster, and has room for len bytes
     * without shifting current data, pullup into it,
     * otherwise allocate a new mbuf to prepend to the chain.
     */
    if (om->om_len >= len) {
    df8c:	88e2      	ldrh	r2, [r4, #6]
    df8e:	428a      	cmp	r2, r1
    df90:	d279      	bcs.n	e086 <os_mbuf_pullup+0x102>
    df92:	460d      	mov	r5, r1
    df94:	f104 0310 	add.w	r3, r4, #16
    df98:	8806      	ldrh	r6, [r0, #0]
    df9a:	4433      	add	r3, r6
      (om->om_data + om->om_len);
    df9c:	6821      	ldr	r1, [r4, #0]
    df9e:	4411      	add	r1, r2
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
    dfa0:	1a5b      	subs	r3, r3, r1
        return (om);
    }
    if (om->om_len + OS_MBUF_TRAILINGSPACE(om) >= len &&
    dfa2:	fa12 f383 	uxtah	r3, r2, r3
    dfa6:	4629      	mov	r1, r5
    dfa8:	42ab      	cmp	r3, r5
    dfaa:	db12      	blt.n	dfd2 <os_mbuf_pullup+0x4e>
        SLIST_NEXT(om, om_next)) {
    dfac:	68e3      	ldr	r3, [r4, #12]
    if (om->om_len + OS_MBUF_TRAILINGSPACE(om) >= len &&
    dfae:	b183      	cbz	r3, dfd2 <os_mbuf_pullup+0x4e>
        om2 = om;
        om = SLIST_NEXT(om, om_next);
        len -= om2->om_len;
    dfb0:	1aad      	subs	r5, r5, r2
    dfb2:	b2ad      	uxth	r5, r5
        om2 = om;
    dfb4:	4627      	mov	r7, r4
        om = SLIST_NEXT(om, om_next);
    dfb6:	461c      	mov	r4, r3
    omp = om->om_omp;
    dfb8:	68bb      	ldr	r3, [r7, #8]
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
    dfba:	f107 0810 	add.w	r8, r7, #16
    dfbe:	881b      	ldrh	r3, [r3, #0]
    dfc0:	4498      	add	r8, r3
      (om->om_data + om->om_len);
    dfc2:	683b      	ldr	r3, [r7, #0]
    dfc4:	88fa      	ldrh	r2, [r7, #6]
    dfc6:	4413      	add	r3, r2
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
    dfc8:	eba8 0803 	sub.w	r8, r8, r3
    dfcc:	fa1f f888 	uxth.w	r8, r8
    dfd0:	e02d      	b.n	e02e <os_mbuf_pullup+0xaa>
    } else {
        if (len > omp->omp_databuf_len - om->om_pkthdr_len) {
    dfd2:	7963      	ldrb	r3, [r4, #5]
    dfd4:	1af6      	subs	r6, r6, r3
    dfd6:	42b1      	cmp	r1, r6
    dfd8:	dc50      	bgt.n	e07c <os_mbuf_pullup+0xf8>
            goto bad;
        }

        om2 = os_mbuf_get(omp, 0);
    dfda:	2100      	movs	r1, #0
    dfdc:	f7ff fcdd 	bl	d99a <os_mbuf_get>
        if (om2 == NULL) {
    dfe0:	4607      	mov	r7, r0
    dfe2:	2800      	cmp	r0, #0
    dfe4:	d04a      	beq.n	e07c <os_mbuf_pullup+0xf8>
            goto bad;
        }

        if (OS_MBUF_IS_PKTHDR(om)) {
    dfe6:	7963      	ldrb	r3, [r4, #5]
    dfe8:	2b07      	cmp	r3, #7
    dfea:	d9e5      	bls.n	dfb8 <os_mbuf_pullup+0x34>
    assert(new_buf->om_len == 0);
    dfec:	88c3      	ldrh	r3, [r0, #6]
    dfee:	b96b      	cbnz	r3, e00c <os_mbuf_pullup+0x88>
    memcpy(&new_buf->om_databuf[0], &old_buf->om_databuf[0],
    dff0:	f100 0610 	add.w	r6, r0, #16
    dff4:	7962      	ldrb	r2, [r4, #5]
    dff6:	f104 0110 	add.w	r1, r4, #16
    dffa:	4630      	mov	r0, r6
    dffc:	f000 fa38 	bl	e470 <memcpy>
    new_buf->om_pkthdr_len = old_buf->om_pkthdr_len;
    e000:	7963      	ldrb	r3, [r4, #5]
    e002:	717b      	strb	r3, [r7, #5]
    new_buf->om_data = new_buf->om_databuf + old_buf->om_pkthdr_len;
    e004:	7963      	ldrb	r3, [r4, #5]
    e006:	441e      	add	r6, r3
    e008:	603e      	str	r6, [r7, #0]
    e00a:	e7d5      	b.n	dfb8 <os_mbuf_pullup+0x34>
    assert(new_buf->om_len == 0);
    e00c:	f7fe f8ec 	bl	c1e8 <hal_debugger_connected>
    e010:	b100      	cbz	r0, e014 <os_mbuf_pullup+0x90>
    e012:	be01      	bkpt	0x0001
    e014:	2300      	movs	r3, #0
    e016:	461a      	mov	r2, r3
    e018:	4619      	mov	r1, r3
    e01a:	4618      	mov	r0, r3
    e01c:	f7fe fb1e 	bl	c65c <__assert_func>
        om->om_len -= count;
        space -= count;
        if (om->om_len) {
            om->om_data += count;
        } else {
            next = SLIST_NEXT(om, om_next);
    e020:	68e6      	ldr	r6, [r4, #12]
            os_mbuf_free(om);
    e022:	4620      	mov	r0, r4
    e024:	f7ff fced 	bl	da02 <os_mbuf_free>
            om = next;
    e028:	4634      	mov	r4, r6
        }
    } while (len > 0 && om);
    e02a:	b30d      	cbz	r5, e070 <os_mbuf_pullup+0xec>
    e02c:	b304      	cbz	r4, e070 <os_mbuf_pullup+0xec>
        count = min(min(len, space), om->om_len);
    e02e:	88e6      	ldrh	r6, [r4, #6]
    e030:	462b      	mov	r3, r5
    e032:	4545      	cmp	r5, r8
    e034:	bfa8      	it	ge
    e036:	4643      	movge	r3, r8
    e038:	429e      	cmp	r6, r3
    e03a:	bfa8      	it	ge
    e03c:	461e      	movge	r6, r3
        memcpy(om2->om_data + om2->om_len, om->om_data, count);
    e03e:	6838      	ldr	r0, [r7, #0]
    e040:	88fb      	ldrh	r3, [r7, #6]
    e042:	4632      	mov	r2, r6
    e044:	6821      	ldr	r1, [r4, #0]
    e046:	4418      	add	r0, r3
    e048:	f000 fa12 	bl	e470 <memcpy>
        len -= count;
    e04c:	b2b2      	uxth	r2, r6
    e04e:	1aad      	subs	r5, r5, r2
    e050:	b2ad      	uxth	r5, r5
        om2->om_len += count;
    e052:	88fb      	ldrh	r3, [r7, #6]
    e054:	4413      	add	r3, r2
    e056:	80fb      	strh	r3, [r7, #6]
        om->om_len -= count;
    e058:	88e3      	ldrh	r3, [r4, #6]
    e05a:	1a9b      	subs	r3, r3, r2
    e05c:	b29b      	uxth	r3, r3
    e05e:	80e3      	strh	r3, [r4, #6]
        space -= count;
    e060:	eba8 0806 	sub.w	r8, r8, r6
        if (om->om_len) {
    e064:	2b00      	cmp	r3, #0
    e066:	d0db      	beq.n	e020 <os_mbuf_pullup+0x9c>
            om->om_data += count;
    e068:	6823      	ldr	r3, [r4, #0]
    e06a:	441e      	add	r6, r3
    e06c:	6026      	str	r6, [r4, #0]
    e06e:	e7dc      	b.n	e02a <os_mbuf_pullup+0xa6>
    if (len > 0) {
    e070:	b90d      	cbnz	r5, e076 <os_mbuf_pullup+0xf2>
        os_mbuf_free(om2);
        goto bad;
    }
    SLIST_NEXT(om2, om_next) = om;
    e072:	60fc      	str	r4, [r7, #12]
    return (om2);
    e074:	e008      	b.n	e088 <os_mbuf_pullup+0x104>
        os_mbuf_free(om2);
    e076:	4638      	mov	r0, r7
    e078:	f7ff fcc3 	bl	da02 <os_mbuf_free>
bad:
    os_mbuf_free_chain(om);
    e07c:	4620      	mov	r0, r4
    e07e:	f7ff fcca 	bl	da16 <os_mbuf_free_chain>
    return (NULL);
    e082:	2700      	movs	r7, #0
    e084:	e000      	b.n	e088 <os_mbuf_pullup+0x104>
        return (om);
    e086:	4627      	mov	r7, r4
}
    e088:	4638      	mov	r0, r7
    e08a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e08e <os_mbuf_prepend_pullup>:
{
    e08e:	b510      	push	{r4, lr}
    e090:	460c      	mov	r4, r1
    om = os_mbuf_prepend(om, len);
    e092:	f7ff fe7d 	bl	dd90 <os_mbuf_prepend>
    if (om == NULL) {
    e096:	4603      	mov	r3, r0
    e098:	b118      	cbz	r0, e0a2 <os_mbuf_prepend_pullup+0x14>
    om = os_mbuf_pullup(om, len);
    e09a:	4621      	mov	r1, r4
    e09c:	f7ff ff72 	bl	df84 <os_mbuf_pullup>
    e0a0:	4603      	mov	r3, r0
}
    e0a2:	4618      	mov	r0, r3
    e0a4:	bd10      	pop	{r4, pc}

0000e0a6 <os_mbuf_trim_front>:

struct os_mbuf *
os_mbuf_trim_front(struct os_mbuf *om)
{
    e0a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e0a8:	4606      	mov	r6, r0
    struct os_mbuf *next;
    struct os_mbuf *cur;

    /* Abort early if there is nothing to trim. */
    if (om->om_len != 0) {
    e0aa:	88c7      	ldrh	r7, [r0, #6]
    e0ac:	b9d7      	cbnz	r7, e0e4 <os_mbuf_trim_front+0x3e>
    }

    /* Starting with the second mbuf in the chain, continue removing and
     * freeing mbufs until an non-empty one is encountered.
     */
    cur = SLIST_NEXT(om, om_next);
    e0ae:	68c4      	ldr	r4, [r0, #12]
    while (cur != NULL && cur->om_len == 0) {
    e0b0:	e005      	b.n	e0be <os_mbuf_trim_front+0x18>
        next = SLIST_NEXT(cur, om_next);
    e0b2:	68e5      	ldr	r5, [r4, #12]

        SLIST_NEXT(om, om_next) = next;
    e0b4:	60f5      	str	r5, [r6, #12]
        os_mbuf_free(cur);
    e0b6:	4620      	mov	r0, r4
    e0b8:	f7ff fca3 	bl	da02 <os_mbuf_free>

        cur = next;
    e0bc:	462c      	mov	r4, r5
    while (cur != NULL && cur->om_len == 0) {
    e0be:	b114      	cbz	r4, e0c6 <os_mbuf_trim_front+0x20>
    e0c0:	88e3      	ldrh	r3, [r4, #6]
    e0c2:	2b00      	cmp	r3, #0
    e0c4:	d0f5      	beq.n	e0b2 <os_mbuf_trim_front+0xc>
    }

    if (cur == NULL) {
    e0c6:	b16c      	cbz	r4, e0e4 <os_mbuf_trim_front+0x3e>
    if (OS_MBUF_IS_PKTHDR(om)) {
    e0c8:	7963      	ldrb	r3, [r4, #5]
    e0ca:	2b07      	cmp	r3, #7
    e0cc:	d900      	bls.n	e0d0 <os_mbuf_trim_front+0x2a>
        startoff = om->om_pkthdr_len;
    e0ce:	b29f      	uxth	r7, r3
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
    e0d0:	4620      	mov	r0, r4
    e0d2:	f850 3b10 	ldr.w	r3, [r0], #16
        ((uint8_t *) &om->om_databuf[0] + startoff));
    e0d6:	4407      	add	r7, r0
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
    e0d8:	1bdf      	subs	r7, r3, r7
    e0da:	b2bf      	uxth	r7, r7
    }

    /* Try to remove the first mbuf in the chain.  If this buffer contains a
     * packet header, make sure the second buffer can accommodate it.
     */
    if (OS_MBUF_LEADINGSPACE(cur) >= om->om_pkthdr_len) {
    e0dc:	7973      	ldrb	r3, [r6, #5]
    e0de:	b29a      	uxth	r2, r3
    e0e0:	42ba      	cmp	r2, r7
    e0e2:	d901      	bls.n	e0e8 <os_mbuf_trim_front+0x42>
        os_mbuf_free(om);
        om = cur;
    }

    return om;
}
    e0e4:	4630      	mov	r0, r6
    e0e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        cur->om_pkthdr_len = om->om_pkthdr_len;
    e0e8:	7163      	strb	r3, [r4, #5]
        memcpy(OS_MBUF_PKTHDR(cur), OS_MBUF_PKTHDR(om), om->om_pkthdr_len);
    e0ea:	7972      	ldrb	r2, [r6, #5]
    e0ec:	f106 0110 	add.w	r1, r6, #16
    e0f0:	f000 f9be 	bl	e470 <memcpy>
        os_mbuf_free(om);
    e0f4:	4630      	mov	r0, r6
    e0f6:	f7ff fc84 	bl	da02 <os_mbuf_free>
        om = cur;
    e0fa:	4626      	mov	r6, r4
    e0fc:	e7f2      	b.n	e0e4 <os_mbuf_trim_front+0x3e>

0000e0fe <os_mbuf_pack_chains>:
    return 0;
}

struct os_mbuf *
os_mbuf_pack_chains(struct os_mbuf *m1, struct os_mbuf *m2)
{
    e0fe:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint8_t *dptr;
    struct os_mbuf *cur;
    struct os_mbuf *next;

    /* If m1 is NULL, return NULL */
    if (m1 == NULL) {
    e102:	4681      	mov	r9, r0
    e104:	2800      	cmp	r0, #0
    e106:	d04e      	beq.n	e1a6 <os_mbuf_pack_chains+0xa8>

    /*
     * Concatenate the two chains to start. This will discard packet header in
     * m2 and adjust packet length in m1 if m1 has a packet header.
     */
    if (m2 != NULL) {
    e108:	b109      	cbz	r1, e10e <os_mbuf_pack_chains+0x10>
        os_mbuf_concat(m1, m2);
    e10a:	f7ff fee8 	bl	dede <os_mbuf_concat>
{
    e10e:	464d      	mov	r5, r9
    e110:	e006      	b.n	e120 <os_mbuf_pack_chains+0x22>
    startoff = 0;
    e112:	2300      	movs	r3, #0
    e114:	e008      	b.n	e128 <os_mbuf_pack_chains+0x2a>

    cur = m1;
    while (1) {
        /* If there is leading space in the mbuf, move data up */
        if (OS_MBUF_LEADINGSPACE(cur)) {
            dptr = &cur->om_databuf[0];
    e116:	4634      	mov	r4, r6
    e118:	e010      	b.n	e13c <os_mbuf_pack_chains+0x3e>
        if (next == NULL) {
            break;
        }

        /* Move cur to next as we filled up current */
        cur = next;
    e11a:	4625      	mov	r5, r4
        if (next == NULL) {
    e11c:	2c00      	cmp	r4, #0
    e11e:	d042      	beq.n	e1a6 <os_mbuf_pack_chains+0xa8>
    if (OS_MBUF_IS_PKTHDR(om)) {
    e120:	796a      	ldrb	r2, [r5, #5]
    e122:	2a07      	cmp	r2, #7
    e124:	d9f5      	bls.n	e112 <os_mbuf_pack_chains+0x14>
        startoff = om->om_pkthdr_len;
    e126:	b293      	uxth	r3, r2
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
    e128:	462e      	mov	r6, r5
    e12a:	f856 1b10 	ldr.w	r1, [r6], #16
        ((uint8_t *) &om->om_databuf[0] + startoff));
    e12e:	4433      	add	r3, r6
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
    e130:	1acb      	subs	r3, r1, r3
    e132:	b29b      	uxth	r3, r3
        if (OS_MBUF_LEADINGSPACE(cur)) {
    e134:	b13b      	cbz	r3, e146 <os_mbuf_pack_chains+0x48>
            if (OS_MBUF_IS_PKTHDR(cur)) {
    e136:	2a07      	cmp	r2, #7
    e138:	d9ed      	bls.n	e116 <os_mbuf_pack_chains+0x18>
                dptr += cur->om_pkthdr_len;
    e13a:	18b4      	adds	r4, r6, r2
            memmove(dptr, cur->om_data, cur->om_len);
    e13c:	88ea      	ldrh	r2, [r5, #6]
    e13e:	4620      	mov	r0, r4
    e140:	f000 f9a3 	bl	e48a <memmove>
            cur->om_data = dptr;
    e144:	602c      	str	r4, [r5, #0]
        dptr = cur->om_data + cur->om_len;
    e146:	682b      	ldr	r3, [r5, #0]
    e148:	f8b5 8006 	ldrh.w	r8, [r5, #6]
    e14c:	4498      	add	r8, r3
        next = SLIST_NEXT(cur, om_next);
    e14e:	68ec      	ldr	r4, [r5, #12]
    omp = om->om_omp;
    e150:	68ab      	ldr	r3, [r5, #8]
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
    e152:	881f      	ldrh	r7, [r3, #0]
    e154:	4437      	add	r7, r6
    e156:	eba7 0708 	sub.w	r7, r7, r8
    e15a:	b2bf      	uxth	r7, r7
        while (rem_len && next) {
    e15c:	2f00      	cmp	r7, #0
    e15e:	d0dc      	beq.n	e11a <os_mbuf_pack_chains+0x1c>
    e160:	2c00      	cmp	r4, #0
    e162:	d0da      	beq.n	e11a <os_mbuf_pack_chains+0x1c>
            copylen = min(rem_len, next->om_len);
    e164:	88e6      	ldrh	r6, [r4, #6]
    e166:	42be      	cmp	r6, r7
    e168:	bf28      	it	cs
    e16a:	463e      	movcs	r6, r7
            memcpy(dptr, next->om_data, copylen);
    e16c:	4632      	mov	r2, r6
    e16e:	6821      	ldr	r1, [r4, #0]
    e170:	4640      	mov	r0, r8
    e172:	f000 f97d 	bl	e470 <memcpy>
            cur->om_len += copylen;
    e176:	88eb      	ldrh	r3, [r5, #6]
    e178:	4433      	add	r3, r6
    e17a:	80eb      	strh	r3, [r5, #6]
            dptr += copylen;
    e17c:	44b0      	add	r8, r6
            rem_len -= copylen;
    e17e:	1bbf      	subs	r7, r7, r6
    e180:	b2bf      	uxth	r7, r7
            next->om_data += copylen;
    e182:	6823      	ldr	r3, [r4, #0]
    e184:	4433      	add	r3, r6
    e186:	6023      	str	r3, [r4, #0]
            next->om_len -= copylen;
    e188:	88e3      	ldrh	r3, [r4, #6]
    e18a:	1b9e      	subs	r6, r3, r6
    e18c:	80e6      	strh	r6, [r4, #6]
            while (next->om_len == 0) {
    e18e:	88e3      	ldrh	r3, [r4, #6]
    e190:	2b00      	cmp	r3, #0
    e192:	d1e3      	bne.n	e15c <os_mbuf_pack_chains+0x5e>
                SLIST_NEXT(cur, om_next) = SLIST_NEXT(next, om_next);
    e194:	68e3      	ldr	r3, [r4, #12]
    e196:	60eb      	str	r3, [r5, #12]
                os_mbuf_free(next);
    e198:	4620      	mov	r0, r4
    e19a:	f7ff fc32 	bl	da02 <os_mbuf_free>
                next = SLIST_NEXT(cur, om_next);
    e19e:	68ec      	ldr	r4, [r5, #12]
                if (next == NULL) {
    e1a0:	2c00      	cmp	r4, #0
    e1a2:	d1f4      	bne.n	e18e <os_mbuf_pack_chains+0x90>
    e1a4:	e7da      	b.n	e15c <os_mbuf_pack_chains+0x5e>
    }

    return m1;
}
    e1a6:	4648      	mov	r0, r9
    e1a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000e1ac <os_mutex_init>:
os_error_t
os_mutex_init(struct os_mutex *mu)
{
    os_error_t ret;

    if (!mu) {
    e1ac:	4603      	mov	r3, r0
    e1ae:	b128      	cbz	r0, e1bc <os_mutex_init+0x10>
    }

    os_trace_api_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)mu);

    /* Initialize to 0 */
    mu->mu_prio = 0;
    e1b0:	2000      	movs	r0, #0
    e1b2:	7158      	strb	r0, [r3, #5]
    mu->mu_level = 0;
    e1b4:	80d8      	strh	r0, [r3, #6]
    mu->mu_owner = NULL;
    e1b6:	6098      	str	r0, [r3, #8]
    SLIST_FIRST(&mu->mu_head) = NULL;
    e1b8:	6018      	str	r0, [r3, #0]
    e1ba:	4770      	bx	lr
        ret = OS_INVALID_PARM;
    e1bc:	2003      	movs	r0, #3
    ret = OS_OK;

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)ret);
    return ret;
}
    e1be:	4770      	bx	lr

0000e1c0 <os_mutex_release>:

os_error_t
os_mutex_release(struct os_mutex *mu)
{
    e1c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32(OS_TRACE_ID_MUTEX_RELEASE, (uint32_t)mu);

    /* Check if OS is started */
    if (!g_os_started) {
    e1c2:	4b2e      	ldr	r3, [pc, #184]	; (e27c <os_mutex_release+0xbc>)
    e1c4:	681b      	ldr	r3, [r3, #0]
    e1c6:	2b00      	cmp	r3, #0
    e1c8:	d052      	beq.n	e270 <os_mutex_release+0xb0>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid mutex */
    if (!mu) {
    e1ca:	2800      	cmp	r0, #0
    e1cc:	d052      	beq.n	e274 <os_mutex_release+0xb4>
    e1ce:	4604      	mov	r4, r0
        ret = OS_INVALID_PARM;
        goto done;
    }

    /* We better own this mutex! */
    current = os_sched_get_current_task();
    e1d0:	f7ff f86c 	bl	d2ac <os_sched_get_current_task>
    e1d4:	4605      	mov	r5, r0
    if ((mu->mu_level == 0) || (mu->mu_owner != current)) {
    e1d6:	88e3      	ldrh	r3, [r4, #6]
    e1d8:	2b00      	cmp	r3, #0
    e1da:	d04d      	beq.n	e278 <os_mutex_release+0xb8>
    e1dc:	68a2      	ldr	r2, [r4, #8]
    e1de:	4282      	cmp	r2, r0
    e1e0:	d001      	beq.n	e1e6 <os_mutex_release+0x26>
        ret = OS_BAD_MUTEX;
    e1e2:	2005      	movs	r0, #5
    e1e4:	e045      	b.n	e272 <os_mutex_release+0xb2>
        goto done;
    }

    /* Don't release if nested, just decrement nesting level */
    if (mu->mu_level != 1) {
    e1e6:	2b01      	cmp	r3, #1
    e1e8:	d003      	beq.n	e1f2 <os_mutex_release+0x32>
        --mu->mu_level;
    e1ea:	3b01      	subs	r3, #1
    e1ec:	80e3      	strh	r3, [r4, #6]
        ret = OS_OK;
    e1ee:	2000      	movs	r0, #0
        goto done;
    e1f0:	e03f      	b.n	e272 <os_mutex_release+0xb2>
    }

    OS_ENTER_CRITICAL(sr);
    e1f2:	f7ff fb01 	bl	d7f8 <os_arch_save_sr>
    e1f6:	4607      	mov	r7, r0

    /* Decrement nesting level (this effectively sets nesting level to 0) */
    --mu->mu_level;
    e1f8:	88e3      	ldrh	r3, [r4, #6]
    e1fa:	3b01      	subs	r3, #1
    e1fc:	80e3      	strh	r3, [r4, #6]

    /* Restore owner task's priority; resort list if different  */
    if (current->t_prio != mu->mu_prio) {
    e1fe:	7aea      	ldrb	r2, [r5, #11]
    e200:	7963      	ldrb	r3, [r4, #5]
    e202:	429a      	cmp	r2, r3
    e204:	d11e      	bne.n	e244 <os_mutex_release+0x84>
        current->t_prio = mu->mu_prio;
        os_sched_resort(current);
    }

    /* Check if tasks are waiting for the mutex */
    rdy = SLIST_FIRST(&mu->mu_head);
    e206:	6826      	ldr	r6, [r4, #0]
    if (rdy) {
    e208:	b146      	cbz	r6, e21c <os_mutex_release+0x5c>
        /* There is one waiting. Wake it up */
        assert(rdy->t_obj);
    e20a:	69f3      	ldr	r3, [r6, #28]
    e20c:	b1fb      	cbz	r3, e24e <os_mutex_release+0x8e>
        os_sched_wakeup(rdy);
    e20e:	4630      	mov	r0, r6
    e210:	f7ff f8a0 	bl	d354 <os_sched_wakeup>

        /* Set mutex internals */
        mu->mu_level = 1;
    e214:	2301      	movs	r3, #1
    e216:	80e3      	strh	r3, [r4, #6]
        mu->mu_prio = rdy->t_prio;
    e218:	7af3      	ldrb	r3, [r6, #11]
    e21a:	7163      	strb	r3, [r4, #5]
    }

    /* Set new owner of mutex (or NULL if not owned) */
    mu->mu_owner = rdy;
    e21c:	60a6      	str	r6, [r4, #8]
    if (rdy) {
    e21e:	b116      	cbz	r6, e226 <os_mutex_release+0x66>
        rdy->t_lockcnt++;
    e220:	7bb3      	ldrb	r3, [r6, #14]
    e222:	3301      	adds	r3, #1
    e224:	73b3      	strb	r3, [r6, #14]
    }
    --current->t_lockcnt;
    e226:	7bab      	ldrb	r3, [r5, #14]
    e228:	3b01      	subs	r3, #1
    e22a:	73ab      	strb	r3, [r5, #14]

    /* Do we need to re-schedule? */
    resched = 0;
    rdy = os_sched_next_task();
    e22c:	f7ff f918 	bl	d460 <os_sched_next_task>
    e230:	4604      	mov	r4, r0
    if (rdy != current) {
    e232:	4285      	cmp	r5, r0
    e234:	d015      	beq.n	e262 <os_mutex_release+0xa2>
        resched = 1;
    e236:	2501      	movs	r5, #1
    }
    OS_EXIT_CRITICAL(sr);
    e238:	4638      	mov	r0, r7
    e23a:	f7ff fae3 	bl	d804 <os_arch_restore_sr>

    /* Re-schedule if needed */
    if (resched) {
    e23e:	b995      	cbnz	r5, e266 <os_mutex_release+0xa6>
        os_sched(rdy);
    }

    ret = OS_OK;
    e240:	2000      	movs	r0, #0
    e242:	e016      	b.n	e272 <os_mutex_release+0xb2>
        current->t_prio = mu->mu_prio;
    e244:	72eb      	strb	r3, [r5, #11]
        os_sched_resort(current);
    e246:	4628      	mov	r0, r5
    e248:	f7ff f922 	bl	d490 <os_sched_resort>
    e24c:	e7db      	b.n	e206 <os_mutex_release+0x46>
        assert(rdy->t_obj);
    e24e:	f7fd ffcb 	bl	c1e8 <hal_debugger_connected>
    e252:	b100      	cbz	r0, e256 <os_mutex_release+0x96>
    e254:	be01      	bkpt	0x0001
    e256:	2300      	movs	r3, #0
    e258:	461a      	mov	r2, r3
    e25a:	4619      	mov	r1, r3
    e25c:	4618      	mov	r0, r3
    e25e:	f7fe f9fd 	bl	c65c <__assert_func>
    resched = 0;
    e262:	2500      	movs	r5, #0
    e264:	e7e8      	b.n	e238 <os_mutex_release+0x78>
        os_sched(rdy);
    e266:	4620      	mov	r0, r4
    e268:	f7ff f900 	bl	d46c <os_sched>
    ret = OS_OK;
    e26c:	2000      	movs	r0, #0
    e26e:	e000      	b.n	e272 <os_mutex_release+0xb2>
        ret = OS_NOT_STARTED;
    e270:	2009      	movs	r0, #9

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_RELEASE, (uint32_t)ret);
    return ret;
}
    e272:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ret = OS_INVALID_PARM;
    e274:	2003      	movs	r0, #3
    e276:	e7fc      	b.n	e272 <os_mutex_release+0xb2>
        ret = OS_BAD_MUTEX;
    e278:	2005      	movs	r0, #5
    e27a:	e7fa      	b.n	e272 <os_mutex_release+0xb2>
    e27c:	20003af8 	.word	0x20003af8

0000e280 <os_mutex_pend>:
    struct os_task *last;

    os_trace_api_u32x2(OS_TRACE_ID_MUTEX_PEND, (uint32_t)mu, (uint32_t)timeout);

    /* OS must be started when calling this function */
    if (!g_os_started) {
    e280:	4b36      	ldr	r3, [pc, #216]	; (e35c <os_mutex_pend+0xdc>)
    e282:	681b      	ldr	r3, [r3, #0]
    e284:	2b00      	cmp	r3, #0
    e286:	d065      	beq.n	e354 <os_mutex_pend+0xd4>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid mutex */
    if (!mu) {
    e288:	2800      	cmp	r0, #0
    e28a:	d065      	beq.n	e358 <os_mutex_pend+0xd8>
{
    e28c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e290:	460f      	mov	r7, r1
    e292:	4604      	mov	r4, r0
        ret = OS_INVALID_PARM;
        goto done;
    }

    OS_ENTER_CRITICAL(sr);
    e294:	f7ff fab0 	bl	d7f8 <os_arch_save_sr>
    e298:	4680      	mov	r8, r0

    /* Is this owned? */
    current = os_sched_get_current_task();
    e29a:	f7ff f807 	bl	d2ac <os_sched_get_current_task>
    e29e:	4605      	mov	r5, r0
    if (mu->mu_level == 0) {
    e2a0:	88e3      	ldrh	r3, [r4, #6]
    e2a2:	b19b      	cbz	r3, e2cc <os_mutex_pend+0x4c>
        ret = OS_OK;
        goto done;
    }

    /* Are we owner? */
    if (mu->mu_owner == current) {
    e2a4:	68a2      	ldr	r2, [r4, #8]
    e2a6:	4282      	cmp	r2, r0
    e2a8:	d01e      	beq.n	e2e8 <os_mutex_pend+0x68>
        ret = OS_OK;
        goto done;
    }

    /* Mutex is not owned by us. If timeout is 0, return immediately */
    if (timeout == 0) {
    e2aa:	b327      	cbz	r7, e2f6 <os_mutex_pend+0x76>
        ret = OS_TIMEOUT;
        goto done;
    }

    /* Change priority of owner if needed */
    if (mu->mu_owner->t_prio > current->t_prio) {
    e2ac:	7ad1      	ldrb	r1, [r2, #11]
    e2ae:	7ac3      	ldrb	r3, [r0, #11]
    e2b0:	4299      	cmp	r1, r3
    e2b2:	d825      	bhi.n	e300 <os_mutex_pend+0x80>
        os_sched_resort(mu->mu_owner);
    }

    /* Link current task to tasks waiting for mutex */
    last = NULL;
    if (!SLIST_EMPTY(&mu->mu_head)) {
    e2b4:	6821      	ldr	r1, [r4, #0]
    e2b6:	b369      	cbz	r1, e314 <os_mutex_pend+0x94>
        /* Insert in priority order */
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
    e2b8:	460b      	mov	r3, r1
    last = NULL;
    e2ba:	2600      	movs	r6, #0
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
    e2bc:	b32b      	cbz	r3, e30a <os_mutex_pend+0x8a>
            if (current->t_prio < entry->t_prio) {
    e2be:	7ae8      	ldrb	r0, [r5, #11]
    e2c0:	7ada      	ldrb	r2, [r3, #11]
    e2c2:	4290      	cmp	r0, r2
    e2c4:	d321      	bcc.n	e30a <os_mutex_pend+0x8a>
                break;
            }
            last = entry;
    e2c6:	461e      	mov	r6, r3
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
    e2c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    e2ca:	e7f7      	b.n	e2bc <os_mutex_pend+0x3c>
        mu->mu_owner = current;
    e2cc:	60a0      	str	r0, [r4, #8]
        mu->mu_prio  = current->t_prio;
    e2ce:	7ac3      	ldrb	r3, [r0, #11]
    e2d0:	7163      	strb	r3, [r4, #5]
        current->t_lockcnt++;
    e2d2:	7b83      	ldrb	r3, [r0, #14]
    e2d4:	3301      	adds	r3, #1
    e2d6:	7383      	strb	r3, [r0, #14]
        mu->mu_level = 1;
    e2d8:	2301      	movs	r3, #1
    e2da:	80e3      	strh	r3, [r4, #6]
        OS_EXIT_CRITICAL(sr);
    e2dc:	4640      	mov	r0, r8
    e2de:	f7ff fa91 	bl	d804 <os_arch_restore_sr>
        ret = OS_OK;
    e2e2:	2000      	movs	r0, #0
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_PEND, (uint32_t)ret);
    return ret;
}
    e2e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ++mu->mu_level;
    e2e8:	3301      	adds	r3, #1
    e2ea:	80e3      	strh	r3, [r4, #6]
        OS_EXIT_CRITICAL(sr);
    e2ec:	4640      	mov	r0, r8
    e2ee:	f7ff fa89 	bl	d804 <os_arch_restore_sr>
        ret = OS_OK;
    e2f2:	2000      	movs	r0, #0
        goto done;
    e2f4:	e7f6      	b.n	e2e4 <os_mutex_pend+0x64>
        OS_EXIT_CRITICAL(sr);
    e2f6:	4640      	mov	r0, r8
    e2f8:	f7ff fa84 	bl	d804 <os_arch_restore_sr>
        ret = OS_TIMEOUT;
    e2fc:	2006      	movs	r0, #6
        goto done;
    e2fe:	e7f1      	b.n	e2e4 <os_mutex_pend+0x64>
        mu->mu_owner->t_prio = current->t_prio;
    e300:	72d3      	strb	r3, [r2, #11]
        os_sched_resort(mu->mu_owner);
    e302:	68a0      	ldr	r0, [r4, #8]
    e304:	f7ff f8c4 	bl	d490 <os_sched_resort>
    e308:	e7d4      	b.n	e2b4 <os_mutex_pend+0x34>
    if (last) {
    e30a:	b11e      	cbz	r6, e314 <os_mutex_pend+0x94>
        SLIST_INSERT_AFTER(last, current, t_obj_list);
    e30c:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
    e30e:	64eb      	str	r3, [r5, #76]	; 0x4c
    e310:	64f5      	str	r5, [r6, #76]	; 0x4c
    e312:	e001      	b.n	e318 <os_mutex_pend+0x98>
        SLIST_INSERT_HEAD(&mu->mu_head, current, t_obj_list);
    e314:	64e9      	str	r1, [r5, #76]	; 0x4c
    e316:	6025      	str	r5, [r4, #0]
    current->t_obj = mu;
    e318:	61ec      	str	r4, [r5, #28]
    current->t_flags |= OS_TASK_FLAG_MUTEX_WAIT;
    e31a:	7b6b      	ldrb	r3, [r5, #13]
    e31c:	f043 0304 	orr.w	r3, r3, #4
    e320:	736b      	strb	r3, [r5, #13]
    os_sched_sleep(current, timeout);
    e322:	4639      	mov	r1, r7
    e324:	4628      	mov	r0, r5
    e326:	f7fe ffcd 	bl	d2c4 <os_sched_sleep>
    OS_EXIT_CRITICAL(sr);
    e32a:	4640      	mov	r0, r8
    e32c:	f7ff fa6a 	bl	d804 <os_arch_restore_sr>
    os_sched(NULL);
    e330:	2000      	movs	r0, #0
    e332:	f7ff f89b 	bl	d46c <os_sched>
    OS_ENTER_CRITICAL(sr);
    e336:	f7ff fa5f 	bl	d7f8 <os_arch_save_sr>
    current->t_flags &= ~OS_TASK_FLAG_MUTEX_WAIT;
    e33a:	7b6b      	ldrb	r3, [r5, #13]
    e33c:	f023 0304 	bic.w	r3, r3, #4
    e340:	736b      	strb	r3, [r5, #13]
    OS_EXIT_CRITICAL(sr);
    e342:	f7ff fa5f 	bl	d804 <os_arch_restore_sr>
    if (mu->mu_owner == current) {
    e346:	68a3      	ldr	r3, [r4, #8]
    e348:	42ab      	cmp	r3, r5
    e34a:	d001      	beq.n	e350 <os_mutex_pend+0xd0>
        ret = OS_TIMEOUT;
    e34c:	2006      	movs	r0, #6
    e34e:	e7c9      	b.n	e2e4 <os_mutex_pend+0x64>
        ret = OS_OK;
    e350:	2000      	movs	r0, #0
    e352:	e7c7      	b.n	e2e4 <os_mutex_pend+0x64>
        ret = OS_NOT_STARTED;
    e354:	2009      	movs	r0, #9
    e356:	4770      	bx	lr
        ret = OS_INVALID_PARM;
    e358:	2003      	movs	r0, #3
}
    e35a:	4770      	bx	lr
    e35c:	20003af8 	.word	0x20003af8

0000e360 <os_set_env>:
        .global os_set_env
os_set_env:
        .fnstart
        .cantunwind

        MSR     PSP,R0
    e360:	f380 8809 	msr	PSP, r0
        LDR     R0,=os_flags
    e364:	482b      	ldr	r0, [pc, #172]	; (e414 <os_default_irq_asm+0x1e>)
        LDRB    R0,[R0]
    e366:	7800      	ldrb	r0, [r0, #0]
        ADDS    R0, R0, #2
    e368:	3002      	adds	r0, #2
        MSR     CONTROL,R0
    e36a:	f380 8814 	msr	CONTROL, r0
        ISB
    e36e:	f3bf 8f6f 	isb	sy
        BX      LR
    e372:	4770      	bx	lr

0000e374 <os_arch_init_task_stack>:
        .type   os_arch_init_task_stack, %function
        .global os_arch_init_task_stack
os_arch_init_task_stack:
        .fnstart

        STMIA   R0,{R4-R11}
    e374:	e880 0ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp}
        BX      LR
    e378:	4770      	bx	lr

0000e37a <SVC_Handler>:
        PUSH    {R4,LR}
        BL      os_trace_isr_enter
        POP     {R4,LR}
#endif

        MRS     R0,PSP                  /* Read PSP */
    e37a:	f3ef 8009 	mrs	r0, PSP
        LDR     R1,[R0,#24]             /* Read Saved PC from Stack */
    e37e:	6981      	ldr	r1, [r0, #24]
        LDRB    R1,[R1,#-2]             /* Load SVC Number */
    e380:	f811 1c02 	ldrb.w	r1, [r1, #-2]
        CBNZ    R1,SVC_User
    e384:	b951      	cbnz	r1, e39c <SVC_User>

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
    e386:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
    e38a:	b510      	push	{r4, lr}
        BLX     R12                     /* Call SVC Function */
    e38c:	47e0      	blx	ip
        POP     {R4,LR}                 /* Restore EXC_RETURN */
    e38e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

        MRS     R12,PSP                 /* Read PSP */
    e392:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R2}             /* Store return values */
    e396:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR                      /* Return from interrupt */
    e39a:	4770      	bx	lr

0000e39c <SVC_User>:

        /*------------------- User SVC ------------------------------*/
SVC_User:
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
    e39c:	b510      	push	{r4, lr}
        LDR     R2,=SVC_Count
    e39e:	4a1e      	ldr	r2, [pc, #120]	; (e418 <os_default_irq_asm+0x22>)
        LDR     R2,[R2]
    e3a0:	6812      	ldr	r2, [r2, #0]
        CMP     R1,R2
    e3a2:	4291      	cmp	r1, r2
        BHI     SVC_Done                /* Overflow */
    e3a4:	d809      	bhi.n	e3ba <SVC_Done>

        LDR     R4,=SVC_Table-4
    e3a6:	4c1d      	ldr	r4, [pc, #116]	; (e41c <os_default_irq_asm+0x26>)
        LDR     R4,[R4,R1,LSL #2]       /* Load SVC Function Address */
    e3a8:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
    e3ac:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        BLX     R4                      /* Call SVC Function */
    e3b0:	47a0      	blx	r4

        MRS     R12,PSP
    e3b2:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R3}             /* Function return values */
    e3b6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

0000e3ba <SVC_Done>:
SVC_Done:
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
    e3ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR                      /* Return from interrupt */
    e3be:	4770      	bx	lr

0000e3c0 <PendSV_Handler>:
        .global PendSV_Handler
PendSV_Handler:
        .fnstart
        .cantunwind

        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
    e3c0:	4b17      	ldr	r3, [pc, #92]	; (e420 <os_default_irq_asm+0x2a>)
        LDR     R2,[R3]                 /* Store in R2 */
    e3c2:	681a      	ldr	r2, [r3, #0]
        LDR     R3,=g_current_task      /* Get current task */
    e3c4:	4b17      	ldr	r3, [pc, #92]	; (e424 <os_default_irq_asm+0x2e>)
        LDR     R1,[R3]                 /* Current task in R1 */
    e3c6:	6819      	ldr	r1, [r3, #0]
        CMP     R1,R2
    e3c8:	4291      	cmp	r1, r2
        IT      EQ
    e3ca:	bf08      	it	eq
        BXEQ    LR                      /* RETI, no task switch */
    e3cc:	4770      	bxeq	lr

        MRS     R12,PSP                 /* Read PSP */
    e3ce:	f3ef 8c09 	mrs	ip, PSP
        TST     LR,#0x10                /* is it extended frame? */
        IT      EQ
        VSTMDBEQ R12!,{S16-S31}         /* yes; push the regs */
        STMDB   R12!,{R4-R11,LR}        /* Save Old context */
#else
        STMDB   R12!,{R4-R11}           /* Save Old context */
    e3d2:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#endif
        STR     R12,[R1,#0]             /* Update stack pointer in current task */
    e3d6:	f8c1 c000 	str.w	ip, [r1]
        STR     R2,[R3]                 /* g_current_task = highest ready */
    e3da:	601a      	str	r2, [r3, #0]

        LDR     R12,[R2,#0]             /* get stack pointer of task we will start */
    e3dc:	f8d2 c000 	ldr.w	ip, [r2]
        ITTE    EQ
        VLDMIAEQ R12!,{S16-S31}         /* yes; pull the regs */
        MVNEQ   LR,#~0xFFFFFFED         /* BX treats it as extended */
        MVNNE   LR,#~0xFFFFFFFD         /* BX treats is as basic frame */
#else
        LDMIA   R12!,{R4-R11}           /* Restore New Context */
    e3e0:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#endif
        MSR     PSP,R12                 /* Write PSP */
    e3e4:	f38c 8809 	msr	PSP, ip
        MOV     R0, R2
        BL      os_trace_task_start_exec
        POP     {R4,LR}
#endif

        BX      LR                      /* Return to Thread Mode */
    e3e8:	4770      	bx	lr

0000e3ea <SysTick_Handler>:
        .global SysTick_Handler
SysTick_Handler:
        .fnstart
        .cantunwind

        PUSH    {R4,LR}                 /* Save EXC_RETURN */
    e3ea:	b510      	push	{r4, lr}
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_enter
#endif
        BL      timer_handler
    e3ec:	f7ff f9f5 	bl	d7da <timer_handler>
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
    e3f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR
    e3f4:	4770      	bx	lr

0000e3f6 <os_default_irq_asm>:

        /*
         * LR = 0xfffffff9 if we were using MSP as SP
         * LR = 0xfffffffd if we were using PSP as SP
         */
        TST     LR,#4
    e3f6:	f01e 0f04 	tst.w	lr, #4
        ITE     EQ
    e3fa:	bf0c      	ite	eq
        MRSEQ   R3,MSP
    e3fc:	f3ef 8308 	mrseq	r3, MSP
        MRSNE   R3,PSP
    e400:	f3ef 8309 	mrsne	r3, PSP
        PUSH    {R3-R11,LR}
    e404:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        MOV     R0, SP
    e408:	4668      	mov	r0, sp
        BL      os_default_irq
    e40a:	f7fe f949 	bl	c6a0 <os_default_irq>
        POP     {R3-R11,LR}                 /* Restore EXC_RETURN */
    e40e:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR
    e412:	4770      	bx	lr
        LDR     R0,=os_flags
    e414:	20002170 	.word	0x20002170
        LDR     R2,=SVC_Count
    e418:	00000000 	.word	0x00000000
        LDR     R4,=SVC_Table-4
    e41c:	fffffffc 	.word	0xfffffffc
        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
    e420:	20000118 	.word	0x20000118
        LDR     R3,=g_current_task      /* Get current task */
    e424:	20003b68 	.word	0x20003b68

0000e428 <memcmp>:
int memcmp(const void *s1, const void *s2, size_t n)
{
    int d = 0;

#if defined(ARCH_cortex_m3) || defined(ARCH_cortex_m4) || defined(ARCH_cortex_m7)
    asm (".syntax unified                   \n"
    e428:	b470      	push	{r4, r5, r6}
    e42a:	f04f 0500 	mov.w	r5, #0
    e42e:	f022 0603 	bic.w	r6, r2, #3
    e432:	e005      	b.n	e440 <test1>

0000e434 <loop1>:
    e434:	5943      	ldr	r3, [r0, r5]
    e436:	594c      	ldr	r4, [r1, r5]
    e438:	42a3      	cmp	r3, r4
    e43a:	d104      	bne.n	e446 <res1>
    e43c:	f105 0504 	add.w	r5, r5, #4

0000e440 <test1>:
    e440:	42b5      	cmp	r5, r6
    e442:	d1f7      	bne.n	e434 <loop1>
    e444:	e00d      	b.n	e462 <test2>

0000e446 <res1>:
    e446:	ba1b      	rev	r3, r3
    e448:	ba24      	rev	r4, r4
    e44a:	1b1b      	subs	r3, r3, r4
    e44c:	bf8c      	ite	hi
    e44e:	2301      	movhi	r3, #1
    e450:	f04f 33ff 	movls.w	r3, #4294967295	; 0xffffffff
    e454:	e009      	b.n	e46a <done>

0000e456 <loop2>:
    e456:	5d43      	ldrb	r3, [r0, r5]
    e458:	5d4c      	ldrb	r4, [r1, r5]
    e45a:	1b1b      	subs	r3, r3, r4
    e45c:	d105      	bne.n	e46a <done>
    e45e:	f105 0501 	add.w	r5, r5, #1

0000e462 <test2>:
    e462:	4295      	cmp	r5, r2
    e464:	d1f7      	bne.n	e456 <loop2>
    e466:	f04f 0300 	mov.w	r3, #0

0000e46a <done>:
    e46a:	4618      	mov	r0, r3
    e46c:	bc70      	pop	{r4, r5, r6}
			break;
	}
#endif

	return d;
}
    e46e:	4770      	bx	lr

0000e470 <memcpy>:
#if defined(__ARM_FEATURE_UNALIGNED)
        /*
         * We can speed up a bit by moving 32-bit words if unaligned access is
         * supported (e.g. Cortex-M3/4/7/33).
         */
        asm (".syntax unified           \n"
    e470:	e001      	b.n	e476 <test1>

0000e472 <loop1>:
    e472:	588b      	ldr	r3, [r1, r2]
    e474:	5083      	str	r3, [r0, r2]

0000e476 <test1>:
    e476:	3a04      	subs	r2, #4
    e478:	d5fb      	bpl.n	e472 <loop1>
    e47a:	f102 0204 	add.w	r2, r2, #4
             "       bpl  loop1         \n"
             "       add  r2, #4        \n"
            );
#endif

        asm (".syntax unified           \n"
    e47e:	e001      	b.n	e484 <test2>

0000e480 <loop2>:
    e480:	5c8b      	ldrb	r3, [r1, r2]
    e482:	5483      	strb	r3, [r0, r2]

0000e484 <test2>:
    e484:	3a01      	subs	r2, #1
    e486:	d5fb      	bpl.n	e480 <loop2>
		*q++ = *p++;
	}
#endif

	return dst;
}
    e488:	4770      	bx	lr

0000e48a <memmove>:
 */

#include <string.h>

void *memmove(void *dst, const void *src, size_t n)
{
    e48a:	b410      	push	{r4}
		q += (n - 1);
		asm volatile("std; rep; movsb; cld"
			     : "+c" (n), "+S"(p), "+D"(q));
	}
#else
	if (q < p) {
    e48c:	4281      	cmp	r1, r0
    e48e:	d80c      	bhi.n	e4aa <memmove+0x20>
		while (n--) {
			*q++ = *p++;
		}
	} else {
		p += n;
    e490:	4411      	add	r1, r2
		q += n;
    e492:	1883      	adds	r3, r0, r2
		while (n--) {
    e494:	e010      	b.n	e4b8 <memmove+0x2e>
			*q++ = *p++;
    e496:	780a      	ldrb	r2, [r1, #0]
    e498:	701a      	strb	r2, [r3, #0]
    e49a:	3301      	adds	r3, #1
    e49c:	3101      	adds	r1, #1
		while (n--) {
    e49e:	4622      	mov	r2, r4
    e4a0:	1e54      	subs	r4, r2, #1
    e4a2:	2a00      	cmp	r2, #0
    e4a4:	d1f7      	bne.n	e496 <memmove+0xc>
		}
	}
#endif

	return dst;
}
    e4a6:	bc10      	pop	{r4}
    e4a8:	4770      	bx	lr
	char *q = dst;
    e4aa:	4603      	mov	r3, r0
    e4ac:	e7f8      	b.n	e4a0 <memmove+0x16>
			*--q = *--p;
    e4ae:	f811 2d01 	ldrb.w	r2, [r1, #-1]!
    e4b2:	f803 2d01 	strb.w	r2, [r3, #-1]!
		while (n--) {
    e4b6:	4622      	mov	r2, r4
    e4b8:	1e54      	subs	r4, r2, #1
    e4ba:	2a00      	cmp	r2, #0
    e4bc:	d1f7      	bne.n	e4ae <memmove+0x24>
    e4be:	e7f2      	b.n	e4a6 <memmove+0x1c>

0000e4c0 <memset>:
#if defined(__arm__)
#include <mcu/cmsis_nvic.h>
#endif

void *memset(void *dst, int c, size_t n)
{
    e4c0:	b430      	push	{r4, r5}
	asm volatile ("cld ; rep ; stosq ; movl %3,%%ecx ; rep ; stosb"
		      :"+c" (nq), "+D" (q)
		      : "a" ((unsigned char)c * 0x0101010101010101U),
			"r" ((uint32_t) n & 7));
#elif defined(__arm__)
    asm volatile (".syntax unified                          \n"
    e4c2:	4605      	mov	r5, r0
    e4c4:	b2c9      	uxtb	r1, r1
    e4c6:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    e4ca:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    e4ce:	18ab      	adds	r3, r5, r2
    e4d0:	2403      	movs	r4, #3
    e4d2:	4023      	ands	r3, r4
    e4d4:	1ad3      	subs	r3, r2, r3
    e4d6:	d40b      	bmi.n	e4f0 <memset+0x30>
    e4d8:	e001      	b.n	e4de <memset+0x1e>
    e4da:	3a01      	subs	r2, #1
    e4dc:	54a9      	strb	r1, [r5, r2]
    e4de:	429a      	cmp	r2, r3
    e4e0:	d1fb      	bne.n	e4da <memset+0x1a>
    e4e2:	e000      	b.n	e4e6 <memset+0x26>
    e4e4:	50a9      	str	r1, [r5, r2]
    e4e6:	3a04      	subs	r2, #4
    e4e8:	d5fc      	bpl.n	e4e4 <memset+0x24>
    e4ea:	3204      	adds	r2, #4
    e4ec:	e000      	b.n	e4f0 <memset+0x30>
    e4ee:	54a9      	strb	r1, [r5, r2]
    e4f0:	3a01      	subs	r2, #1
    e4f2:	d5fc      	bpl.n	e4ee <memset+0x2e>
		*q++ = c;
	}
#endif

	return dst;
}
    e4f4:	bc30      	pop	{r4, r5}
    e4f6:	4770      	bx	lr

0000e4f8 <strcmp>:
 */

#include <string.h>

int strcmp(const char *s1, const char *s2)
{
    e4f8:	b430      	push	{r4, r5}
    e4fa:	4602      	mov	r2, r0
	const unsigned char *c2 = (const unsigned char *)s2;
	unsigned char ch;
	int d = 0;

	while (1) {
		d = (int)(ch = *c1++) - (int)*c2++;
    e4fc:	1c55      	adds	r5, r2, #1
    e4fe:	7813      	ldrb	r3, [r2, #0]
    e500:	1c4c      	adds	r4, r1, #1
    e502:	7808      	ldrb	r0, [r1, #0]
		if (d || !ch)
    e504:	1a18      	subs	r0, r3, r0
    e506:	d103      	bne.n	e510 <strcmp+0x18>
		d = (int)(ch = *c1++) - (int)*c2++;
    e508:	462a      	mov	r2, r5
    e50a:	4621      	mov	r1, r4
		if (d || !ch)
    e50c:	2b00      	cmp	r3, #0
    e50e:	d1f5      	bne.n	e4fc <strcmp+0x4>
			break;
	}

	return d;
}
    e510:	bc30      	pop	{r4, r5}
    e512:	4770      	bx	lr

0000e514 <strlen>:

#include <string.h>

size_t strlen(const char *s)
{
	const char *ss = s;
    e514:	4603      	mov	r3, r0
	while (*ss)
    e516:	e000      	b.n	e51a <strlen+0x6>
		ss++;
    e518:	3301      	adds	r3, #1
	while (*ss)
    e51a:	781a      	ldrb	r2, [r3, #0]
    e51c:	2a00      	cmp	r2, #0
    e51e:	d1fb      	bne.n	e518 <strlen+0x4>
	return ss - s;
}
    e520:	1a18      	subs	r0, r3, r0
    e522:	4770      	bx	lr

0000e524 <add_ascii_num_with_char>:
 * Helper function for terminal escape sequences with number parameter.
 * It adds ascii encoded number plus one character.
 */
static char *
add_ascii_num_with_char(char *str, unsigned int num, char c)
{
    e524:	b4f0      	push	{r4, r5, r6, r7}
    char *p = str;
    e526:	4604      	mov	r4, r0
    e528:	e000      	b.n	e52c <add_ascii_num_with_char+0x8>
    char *s;
    char tmp;

    /* Put digits in reverse order first. */
    do {
        *p++ = (num % 10) + '0';
    e52a:	4634      	mov	r4, r6
    e52c:	4b11      	ldr	r3, [pc, #68]	; (e574 <add_ascii_num_with_char+0x50>)
    e52e:	fba3 5301 	umull	r5, r3, r3, r1
    e532:	08db      	lsrs	r3, r3, #3
    e534:	461d      	mov	r5, r3
    e536:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    e53a:	005e      	lsls	r6, r3, #1
    e53c:	1b8b      	subs	r3, r1, r6
    e53e:	1c66      	adds	r6, r4, #1
    e540:	3330      	adds	r3, #48	; 0x30
    e542:	7023      	strb	r3, [r4, #0]
        num /= 10;
    e544:	4629      	mov	r1, r5
    } while (num);
    e546:	2d00      	cmp	r5, #0
    e548:	d1ef      	bne.n	e52a <add_ascii_num_with_char+0x6>
    s = str;
    str = p;
    --p;
    e54a:	4623      	mov	r3, r4
    e54c:	e009      	b.n	e562 <add_ascii_num_with_char+0x3e>
    /* Revers order of characters, to get correct number representation */
    while (s < p) {
       tmp = *s;
    e54e:	4605      	mov	r5, r0
    e550:	f815 6b01 	ldrb.w	r6, [r5], #1
       *s++ = *p;
    e554:	4619      	mov	r1, r3
    e556:	f811 7901 	ldrb.w	r7, [r1], #-1
    e55a:	7007      	strb	r7, [r0, #0]
       *p-- = tmp;
    e55c:	701e      	strb	r6, [r3, #0]
       *s++ = *p;
    e55e:	4628      	mov	r0, r5
       *p-- = tmp;
    e560:	460b      	mov	r3, r1
    while (s < p) {
    e562:	4283      	cmp	r3, r0
    e564:	d8f3      	bhi.n	e54e <add_ascii_num_with_char+0x2a>
    }

    *str++ = c;
    e566:	7062      	strb	r2, [r4, #1]
    *str = '\0';
    e568:	2300      	movs	r3, #0
    e56a:	70a3      	strb	r3, [r4, #2]

    return str;
}
    e56c:	1ca0      	adds	r0, r4, #2
    e56e:	bcf0      	pop	{r4, r5, r6, r7}
    e570:	4770      	bx	lr
    e572:	bf00      	nop
    e574:	cccccccd 	.word	0xcccccccd

0000e578 <console_handle_line>:
    esc_state &= ~ESC_ANSI;
}

static void
console_handle_line(void)
{
    e578:	b508      	push	{r3, lr}
    cur = 0;
    e57a:	2300      	movs	r3, #0
    e57c:	4a08      	ldr	r2, [pc, #32]	; (e5a0 <console_handle_line+0x28>)
    e57e:	8013      	strh	r3, [r2, #0]
    trailing_chars = 0;
    e580:	4a08      	ldr	r2, [pc, #32]	; (e5a4 <console_handle_line+0x2c>)
    e582:	8013      	strh	r3, [r2, #0]
    os_eventq_put(lines_queue, current_line_ev);
    e584:	4b08      	ldr	r3, [pc, #32]	; (e5a8 <console_handle_line+0x30>)
    e586:	6819      	ldr	r1, [r3, #0]
    e588:	4b08      	ldr	r3, [pc, #32]	; (e5ac <console_handle_line+0x34>)
    e58a:	6818      	ldr	r0, [r3, #0]
    e58c:	f7fe fb95 	bl	ccba <os_eventq_put>

#if MYNEWT_VAL(CONSOLE_COMPAT)
    if (console_compat_rx_cb) {
    e590:	4b07      	ldr	r3, [pc, #28]	; (e5b0 <console_handle_line+0x38>)
    e592:	681b      	ldr	r3, [r3, #0]
    e594:	b103      	cbz	r3, e598 <console_handle_line+0x20>
        console_compat_rx_cb();
    e596:	4798      	blx	r3
    }
#endif

    current_line_ev = NULL;
    e598:	4b03      	ldr	r3, [pc, #12]	; (e5a8 <console_handle_line+0x30>)
    e59a:	2200      	movs	r2, #0
    e59c:	601a      	str	r2, [r3, #0]
}
    e59e:	bd08      	pop	{r3, pc}
    e5a0:	200021a0 	.word	0x200021a0
    e5a4:	200021b6 	.word	0x200021b6
    e5a8:	200021a4 	.word	0x200021a4
    e5ac:	200021ac 	.word	0x200021ac
    e5b0:	20002190 	.word	0x20002190

0000e5b4 <console_filter_out>:
{
    e5b4:	b508      	push	{r3, lr}
    if (g_console_silence) {
    e5b6:	4b0b      	ldr	r3, [pc, #44]	; (e5e4 <console_filter_out+0x30>)
    e5b8:	781b      	ldrb	r3, [r3, #0]
    e5ba:	b973      	cbnz	r3, e5da <console_filter_out+0x26>
    if (prompt_has_focus || g_is_output_nlip) {
    e5bc:	4b0a      	ldr	r3, [pc, #40]	; (e5e8 <console_filter_out+0x34>)
    e5be:	781b      	ldrb	r3, [r3, #0]
    e5c0:	b94b      	cbnz	r3, e5d6 <console_filter_out+0x22>
    console_is_midline = c != '\n' && c != '\r';
    e5c2:	280a      	cmp	r0, #10
    e5c4:	d00c      	beq.n	e5e0 <console_filter_out+0x2c>
    e5c6:	280d      	cmp	r0, #13
    e5c8:	d008      	beq.n	e5dc <console_filter_out+0x28>
    e5ca:	2201      	movs	r2, #1
    e5cc:	4b07      	ldr	r3, [pc, #28]	; (e5ec <console_filter_out+0x38>)
    e5ce:	601a      	str	r2, [r3, #0]
        c = console_out_nolock(c);
    e5d0:	f000 fd72 	bl	f0b8 <console_out_nolock>
    return c;
    e5d4:	e001      	b.n	e5da <console_filter_out+0x26>
        return console_out_nolock(c);
    e5d6:	f000 fd6f 	bl	f0b8 <console_out_nolock>
}
    e5da:	bd08      	pop	{r3, pc}
    console_is_midline = c != '\n' && c != '\r';
    e5dc:	2200      	movs	r2, #0
    e5de:	e7f5      	b.n	e5cc <console_filter_out+0x18>
    e5e0:	2200      	movs	r2, #0
    e5e2:	e7f3      	b.n	e5cc <console_filter_out+0x18>
    e5e4:	20003b88 	.word	0x20003b88
    e5e8:	20003b89 	.word	0x20003b89
    e5ec:	20003b84 	.word	0x20003b84

0000e5f0 <console_filter_write>:
{
    e5f0:	b570      	push	{r4, r5, r6, lr}
    e5f2:	4606      	mov	r6, r0
    e5f4:	460d      	mov	r5, r1
    for (i = 0; i < cnt; i++) {
    e5f6:	2400      	movs	r4, #0
    e5f8:	42ac      	cmp	r4, r5
    e5fa:	da07      	bge.n	e60c <console_filter_write+0x1c>
        if (console_filter_out((int)str[i]) == EOF) {
    e5fc:	5d30      	ldrb	r0, [r6, r4]
    e5fe:	f7ff ffd9 	bl	e5b4 <console_filter_out>
    e602:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    e606:	d001      	beq.n	e60c <console_filter_write+0x1c>
    for (i = 0; i < cnt; i++) {
    e608:	3401      	adds	r4, #1
    e60a:	e7f5      	b.n	e5f8 <console_filter_write+0x8>
}
    e60c:	bd70      	pop	{r4, r5, r6, pc}
	...

0000e610 <console_append_char>:
    return handled;
}

static int
console_append_char(char *line, uint8_t byte)
{
    e610:	b508      	push	{r3, lr}
    if (cur + trailing_chars >= MYNEWT_VAL(CONSOLE_MAX_INPUT_LEN) - 1) {
    e612:	4b0d      	ldr	r3, [pc, #52]	; (e648 <console_append_char+0x38>)
    e614:	881b      	ldrh	r3, [r3, #0]
    e616:	4a0d      	ldr	r2, [pc, #52]	; (e64c <console_append_char+0x3c>)
    e618:	8812      	ldrh	r2, [r2, #0]
    e61a:	4413      	add	r3, r2
    e61c:	2bfe      	cmp	r3, #254	; 0xfe
    e61e:	dc0e      	bgt.n	e63e <console_append_char+0x2e>
        return 0;
    }

    line[cur + trailing_chars] = byte;
    e620:	54c1      	strb	r1, [r0, r3]

    if (byte == '\0') {
    e622:	b171      	cbz	r1, e642 <console_append_char+0x32>
        return 1;
    }

    if (echo) {
    e624:	4b0a      	ldr	r3, [pc, #40]	; (e650 <console_append_char+0x40>)
    e626:	681b      	ldr	r3, [r3, #0]
    e628:	b92b      	cbnz	r3, e636 <console_append_char+0x26>
        /* Echo back to console */
        console_switch_to_prompt();
        console_out_nolock(byte);
        console_switch_to_logs();
    }
    ++cur;
    e62a:	4a07      	ldr	r2, [pc, #28]	; (e648 <console_append_char+0x38>)
    e62c:	8813      	ldrh	r3, [r2, #0]
    e62e:	3301      	adds	r3, #1
    e630:	8013      	strh	r3, [r2, #0]
    return 1;
    e632:	2001      	movs	r0, #1
    e634:	e004      	b.n	e640 <console_append_char+0x30>
    e636:	4608      	mov	r0, r1
        console_out_nolock(byte);
    e638:	f000 fd3e 	bl	f0b8 <console_out_nolock>
    e63c:	e7f5      	b.n	e62a <console_append_char+0x1a>
        return 0;
    e63e:	2000      	movs	r0, #0
}
    e640:	bd08      	pop	{r3, pc}
        return 1;
    e642:	2001      	movs	r0, #1
    e644:	e7fc      	b.n	e640 <console_append_char+0x30>
    e646:	bf00      	nop
    e648:	200021a0 	.word	0x200021a0
    e64c:	200021b6 	.word	0x200021b6
    e650:	20000128 	.word	0x20000128

0000e654 <console_write_nolock>:
{
    e654:	b570      	push	{r4, r5, r6, lr}
    e656:	4606      	mov	r6, r0
    e658:	460d      	mov	r5, r1
    for (i = 0; i < cnt; i++) {
    e65a:	2400      	movs	r4, #0
    e65c:	42ac      	cmp	r4, r5
    e65e:	da07      	bge.n	e670 <console_write_nolock+0x1c>
        if (console_out_nolock((int)str[i]) == EOF) {
    e660:	5d30      	ldrb	r0, [r6, r4]
    e662:	f000 fd29 	bl	f0b8 <console_out_nolock>
    e666:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    e66a:	d001      	beq.n	e670 <console_write_nolock+0x1c>
    for (i = 0; i < cnt; i++) {
    e66c:	3401      	adds	r4, #1
    e66e:	e7f5      	b.n	e65c <console_write_nolock+0x8>
}
    e670:	bd70      	pop	{r4, r5, r6, pc}
	...

0000e674 <handle_end>:
    if (trailing_chars) {
    e674:	4b11      	ldr	r3, [pc, #68]	; (e6bc <handle_end+0x48>)
    e676:	8819      	ldrh	r1, [r3, #0]
    e678:	b901      	cbnz	r1, e67c <handle_end+0x8>
    e67a:	4770      	bx	lr
{
    e67c:	b510      	push	{r4, lr}
    e67e:	b084      	sub	sp, #16
    char seq[14] = CSI;
    e680:	f645 331b 	movw	r3, #23323	; 0x5b1b
    e684:	9300      	str	r3, [sp, #0]
    e686:	2300      	movs	r3, #0
    e688:	9301      	str	r3, [sp, #4]
    e68a:	9302      	str	r3, [sp, #8]
    e68c:	f8ad 300c 	strh.w	r3, [sp, #12]
    if (count) {
    e690:	b949      	cbnz	r1, e6a6 <handle_end+0x32>
        cur += trailing_chars;
    e692:	490b      	ldr	r1, [pc, #44]	; (e6c0 <handle_end+0x4c>)
    e694:	4a09      	ldr	r2, [pc, #36]	; (e6bc <handle_end+0x48>)
    e696:	880b      	ldrh	r3, [r1, #0]
    e698:	8810      	ldrh	r0, [r2, #0]
    e69a:	4403      	add	r3, r0
    e69c:	800b      	strh	r3, [r1, #0]
        trailing_chars = 0;
    e69e:	2300      	movs	r3, #0
    e6a0:	8013      	strh	r3, [r2, #0]
}
    e6a2:	b004      	add	sp, #16
    e6a4:	bd10      	pop	{r4, pc}
        p = add_ascii_num_with_char(seq + 2, count, 'C');
    e6a6:	466c      	mov	r4, sp
    e6a8:	2243      	movs	r2, #67	; 0x43
    e6aa:	f10d 0002 	add.w	r0, sp, #2
    e6ae:	f7ff ff39 	bl	e524 <add_ascii_num_with_char>
        console_write_nolock(seq, p - seq);
    e6b2:	1b01      	subs	r1, r0, r4
    e6b4:	4620      	mov	r0, r4
    e6b6:	f7ff ffcd 	bl	e654 <console_write_nolock>
    e6ba:	e7ea      	b.n	e692 <handle_end+0x1e>
    e6bc:	200021b6 	.word	0x200021b6
    e6c0:	200021a0 	.word	0x200021a0

0000e6c4 <handle_home>:
    if (cur) {
    e6c4:	4b11      	ldr	r3, [pc, #68]	; (e70c <handle_home+0x48>)
    e6c6:	8819      	ldrh	r1, [r3, #0]
    e6c8:	b901      	cbnz	r1, e6cc <handle_home+0x8>
    e6ca:	4770      	bx	lr
{
    e6cc:	b510      	push	{r4, lr}
    e6ce:	b084      	sub	sp, #16
    char seq[14] = CSI;
    e6d0:	f645 331b 	movw	r3, #23323	; 0x5b1b
    e6d4:	9300      	str	r3, [sp, #0]
    e6d6:	2300      	movs	r3, #0
    e6d8:	9301      	str	r3, [sp, #4]
    e6da:	9302      	str	r3, [sp, #8]
    e6dc:	f8ad 300c 	strh.w	r3, [sp, #12]
    if (count) {
    e6e0:	b949      	cbnz	r1, e6f6 <handle_home+0x32>
        trailing_chars += cur;
    e6e2:	490b      	ldr	r1, [pc, #44]	; (e710 <handle_home+0x4c>)
    e6e4:	4a09      	ldr	r2, [pc, #36]	; (e70c <handle_home+0x48>)
    e6e6:	880b      	ldrh	r3, [r1, #0]
    e6e8:	8810      	ldrh	r0, [r2, #0]
    e6ea:	4403      	add	r3, r0
    e6ec:	800b      	strh	r3, [r1, #0]
        cur = 0;
    e6ee:	2300      	movs	r3, #0
    e6f0:	8013      	strh	r3, [r2, #0]
}
    e6f2:	b004      	add	sp, #16
    e6f4:	bd10      	pop	{r4, pc}
        p = add_ascii_num_with_char(seq + 2, count, 'D');
    e6f6:	466c      	mov	r4, sp
    e6f8:	2244      	movs	r2, #68	; 0x44
    e6fa:	f10d 0002 	add.w	r0, sp, #2
    e6fe:	f7ff ff11 	bl	e524 <add_ascii_num_with_char>
        console_write_nolock(seq, p - seq);
    e702:	1b01      	subs	r1, r0, r4
    e704:	4620      	mov	r0, r4
    e706:	f7ff ffa5 	bl	e654 <console_write_nolock>
    e70a:	e7ea      	b.n	e6e2 <handle_home+0x1e>
    e70c:	200021a0 	.word	0x200021a0
    e710:	200021b6 	.word	0x200021b6

0000e714 <del_char>:
{
    e714:	b530      	push	{r4, r5, lr}
    e716:	b085      	sub	sp, #20
    e718:	4604      	mov	r4, r0
    left = trailing_chars;
    e71a:	4b17      	ldr	r3, [pc, #92]	; (e778 <del_char+0x64>)
    e71c:	881b      	ldrh	r3, [r3, #0]
    while (left-- > 1) {
    e71e:	e005      	b.n	e72c <del_char+0x18>
        *pos = *(pos + 1);
    e720:	7860      	ldrb	r0, [r4, #1]
    e722:	f804 0b01 	strb.w	r0, [r4], #1
        console_out_nolock(*(pos++));
    e726:	f000 fcc7 	bl	f0b8 <console_out_nolock>
    while (left-- > 1) {
    e72a:	462b      	mov	r3, r5
    e72c:	1e5d      	subs	r5, r3, #1
    e72e:	2b01      	cmp	r3, #1
    e730:	dcf6      	bgt.n	e720 <del_char+0xc>
    if (trailing_chars) {
    e732:	4b11      	ldr	r3, [pc, #68]	; (e778 <del_char+0x64>)
    e734:	881b      	ldrh	r3, [r3, #0]
    e736:	b90b      	cbnz	r3, e73c <del_char+0x28>
}
    e738:	b005      	add	sp, #20
    e73a:	bd30      	pop	{r4, r5, pc}
        console_out_nolock(' ');
    e73c:	2020      	movs	r0, #32
    e73e:	f000 fcbb 	bl	f0b8 <console_out_nolock>
        cursor_backward(trailing_chars);
    e742:	4b0d      	ldr	r3, [pc, #52]	; (e778 <del_char+0x64>)
    e744:	8819      	ldrh	r1, [r3, #0]
    char seq[14] = CSI;
    e746:	f645 331b 	movw	r3, #23323	; 0x5b1b
    e74a:	9300      	str	r3, [sp, #0]
    e74c:	2300      	movs	r3, #0
    e74e:	9301      	str	r3, [sp, #4]
    e750:	9302      	str	r3, [sp, #8]
    e752:	f8ad 300c 	strh.w	r3, [sp, #12]
    if (count) {
    e756:	b921      	cbnz	r1, e762 <del_char+0x4e>
        trailing_chars--;
    e758:	4a07      	ldr	r2, [pc, #28]	; (e778 <del_char+0x64>)
    e75a:	8813      	ldrh	r3, [r2, #0]
    e75c:	3b01      	subs	r3, #1
    e75e:	8013      	strh	r3, [r2, #0]
}
    e760:	e7ea      	b.n	e738 <del_char+0x24>
        p = add_ascii_num_with_char(seq + 2, count, 'D');
    e762:	466c      	mov	r4, sp
    e764:	2244      	movs	r2, #68	; 0x44
    e766:	f10d 0002 	add.w	r0, sp, #2
    e76a:	f7ff fedb 	bl	e524 <add_ascii_num_with_char>
        console_write_nolock(seq, p - seq);
    e76e:	1b01      	subs	r1, r0, r4
    e770:	4620      	mov	r0, r4
    e772:	f7ff ff6f 	bl	e654 <console_write_nolock>
    e776:	e7ef      	b.n	e758 <del_char+0x44>
    e778:	200021b6 	.word	0x200021b6

0000e77c <handle_delete>:
{
    e77c:	b508      	push	{r3, lr}
    if (trailing_chars) {
    e77e:	4b05      	ldr	r3, [pc, #20]	; (e794 <handle_delete+0x18>)
    e780:	881b      	ldrh	r3, [r3, #0]
    e782:	b903      	cbnz	r3, e786 <handle_delete+0xa>
}
    e784:	bd08      	pop	{r3, pc}
        del_char(&line[cur]);
    e786:	4b04      	ldr	r3, [pc, #16]	; (e798 <handle_delete+0x1c>)
    e788:	881b      	ldrh	r3, [r3, #0]
    e78a:	4418      	add	r0, r3
    e78c:	f7ff ffc2 	bl	e714 <del_char>
}
    e790:	e7f8      	b.n	e784 <handle_delete+0x8>
    e792:	bf00      	nop
    e794:	200021b6 	.word	0x200021b6
    e798:	200021a0 	.word	0x200021a0

0000e79c <handle_ansi>:
    if (esc_state & ESC_ANSI_FIRST) {
    e79c:	4b5e      	ldr	r3, [pc, #376]	; (e918 <handle_ansi+0x17c>)
    e79e:	681b      	ldr	r3, [r3, #0]
    e7a0:	f013 0f04 	tst.w	r3, #4
    e7a4:	d044      	beq.n	e830 <handle_ansi+0x94>
        esc_state &= ~ESC_ANSI_FIRST;
    e7a6:	f023 0304 	bic.w	r3, r3, #4
    e7aa:	4a5b      	ldr	r2, [pc, #364]	; (e918 <handle_ansi+0x17c>)
    e7ac:	6013      	str	r3, [r2, #0]
        if (!isdigit(byte)) {
    e7ae:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
    e7b2:	2a09      	cmp	r2, #9
    e7b4:	d931      	bls.n	e81a <handle_ansi+0x7e>
            ansi_val = 1;
    e7b6:	4b59      	ldr	r3, [pc, #356]	; (e91c <handle_ansi+0x180>)
    e7b8:	2201      	movs	r2, #1
    e7ba:	601a      	str	r2, [r3, #0]
{
    e7bc:	b510      	push	{r4, lr}
    e7be:	b084      	sub	sp, #16
    switch (byte) {
    e7c0:	2846      	cmp	r0, #70	; 0x46
    e7c2:	f000 809c 	beq.w	e8fe <handle_ansi+0x162>
    e7c6:	d85e      	bhi.n	e886 <handle_ansi+0xea>
    e7c8:	2843      	cmp	r0, #67	; 0x43
    e7ca:	d06c      	beq.n	e8a6 <handle_ansi+0x10a>
    e7cc:	2844      	cmp	r0, #68	; 0x44
    e7ce:	f040 808f 	bne.w	e8f0 <handle_ansi+0x154>
        if (ansi_val > cur) {
    e7d2:	4b53      	ldr	r3, [pc, #332]	; (e920 <handle_ansi+0x184>)
    e7d4:	881b      	ldrh	r3, [r3, #0]
    e7d6:	4a51      	ldr	r2, [pc, #324]	; (e91c <handle_ansi+0x180>)
    e7d8:	6811      	ldr	r1, [r2, #0]
    e7da:	428b      	cmp	r3, r1
    e7dc:	f0c0 8088 	bcc.w	e8f0 <handle_ansi+0x154>
        trailing_chars += ansi_val;
    e7e0:	b28a      	uxth	r2, r1
    e7e2:	4c50      	ldr	r4, [pc, #320]	; (e924 <handle_ansi+0x188>)
    e7e4:	8820      	ldrh	r0, [r4, #0]
    e7e6:	4410      	add	r0, r2
    e7e8:	8020      	strh	r0, [r4, #0]
        cur -= ansi_val;
    e7ea:	1a9b      	subs	r3, r3, r2
    e7ec:	4a4c      	ldr	r2, [pc, #304]	; (e920 <handle_ansi+0x184>)
    e7ee:	8013      	strh	r3, [r2, #0]
    char seq[14] = CSI;
    e7f0:	f645 331b 	movw	r3, #23323	; 0x5b1b
    e7f4:	9300      	str	r3, [sp, #0]
    e7f6:	2300      	movs	r3, #0
    e7f8:	9301      	str	r3, [sp, #4]
    e7fa:	9302      	str	r3, [sp, #8]
    e7fc:	f8ad 300c 	strh.w	r3, [sp, #12]
    if (count) {
    e800:	2900      	cmp	r1, #0
    e802:	d075      	beq.n	e8f0 <handle_ansi+0x154>
        p = add_ascii_num_with_char(seq + 2, count, 'D');
    e804:	466c      	mov	r4, sp
    e806:	2244      	movs	r2, #68	; 0x44
    e808:	f10d 0002 	add.w	r0, sp, #2
    e80c:	f7ff fe8a 	bl	e524 <add_ascii_num_with_char>
        console_write_nolock(seq, p - seq);
    e810:	1b01      	subs	r1, r0, r4
    e812:	4620      	mov	r0, r4
    e814:	f7ff ff1e 	bl	e654 <console_write_nolock>
    e818:	e06a      	b.n	e8f0 <handle_ansi+0x154>
        esc_state |= ESC_ANSI_VAL;
    e81a:	f043 0308 	orr.w	r3, r3, #8
    e81e:	4a3e      	ldr	r2, [pc, #248]	; (e918 <handle_ansi+0x17c>)
    e820:	6013      	str	r3, [r2, #0]
        ansi_val = byte - '0';
    e822:	3830      	subs	r0, #48	; 0x30
    e824:	4b3d      	ldr	r3, [pc, #244]	; (e91c <handle_ansi+0x180>)
    e826:	6018      	str	r0, [r3, #0]
        ansi_val_2 = 0;
    e828:	4b3f      	ldr	r3, [pc, #252]	; (e928 <handle_ansi+0x18c>)
    e82a:	2200      	movs	r2, #0
    e82c:	601a      	str	r2, [r3, #0]
        return;
    e82e:	4770      	bx	lr
    if (esc_state & ESC_ANSI_VAL) {
    e830:	f013 0f08 	tst.w	r3, #8
    e834:	d0c2      	beq.n	e7bc <handle_ansi+0x20>
        if (isdigit(byte)) {
    e836:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
    e83a:	2a09      	cmp	r2, #9
    e83c:	d814      	bhi.n	e868 <handle_ansi+0xcc>
            if (esc_state & ESC_ANSI_VAL_2) {
    e83e:	f013 0f10 	tst.w	r3, #16
    e842:	d008      	beq.n	e856 <handle_ansi+0xba>
                ansi_val_2 *= 10;
    e844:	4938      	ldr	r1, [pc, #224]	; (e928 <handle_ansi+0x18c>)
    e846:	680a      	ldr	r2, [r1, #0]
    e848:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    e84c:	0053      	lsls	r3, r2, #1
                ansi_val_2 += byte - '0';
    e84e:	4403      	add	r3, r0
    e850:	3b30      	subs	r3, #48	; 0x30
    e852:	600b      	str	r3, [r1, #0]
    e854:	4770      	bx	lr
                ansi_val *= 10;
    e856:	4931      	ldr	r1, [pc, #196]	; (e91c <handle_ansi+0x180>)
    e858:	680a      	ldr	r2, [r1, #0]
    e85a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    e85e:	0053      	lsls	r3, r2, #1
                ansi_val += byte - '0';
    e860:	4403      	add	r3, r0
    e862:	3b30      	subs	r3, #48	; 0x30
    e864:	600b      	str	r3, [r1, #0]
    e866:	4770      	bx	lr
        if (byte == ';' && !(esc_state & ESC_ANSI_VAL_2)) {
    e868:	283b      	cmp	r0, #59	; 0x3b
    e86a:	d004      	beq.n	e876 <handle_ansi+0xda>
        esc_state &= ~ESC_ANSI_VAL_2;
    e86c:	f023 0318 	bic.w	r3, r3, #24
    e870:	4a29      	ldr	r2, [pc, #164]	; (e918 <handle_ansi+0x17c>)
    e872:	6013      	str	r3, [r2, #0]
    e874:	e7a2      	b.n	e7bc <handle_ansi+0x20>
        if (byte == ';' && !(esc_state & ESC_ANSI_VAL_2)) {
    e876:	f013 0f10 	tst.w	r3, #16
    e87a:	d1f7      	bne.n	e86c <handle_ansi+0xd0>
            esc_state |= ESC_ANSI_VAL_2;
    e87c:	f043 0310 	orr.w	r3, r3, #16
    e880:	4a25      	ldr	r2, [pc, #148]	; (e918 <handle_ansi+0x17c>)
    e882:	6013      	str	r3, [r2, #0]
    e884:	4770      	bx	lr
    switch (byte) {
    e886:	2848      	cmp	r0, #72	; 0x48
    e888:	d02f      	beq.n	e8ea <handle_ansi+0x14e>
    e88a:	287e      	cmp	r0, #126	; 0x7e
    e88c:	d130      	bne.n	e8f0 <handle_ansi+0x154>
        switch (ansi_val) {
    e88e:	4b23      	ldr	r3, [pc, #140]	; (e91c <handle_ansi+0x180>)
    e890:	681b      	ldr	r3, [r3, #0]
    e892:	2b03      	cmp	r3, #3
    e894:	d037      	beq.n	e906 <handle_ansi+0x16a>
    e896:	2b04      	cmp	r3, #4
    e898:	d039      	beq.n	e90e <handle_ansi+0x172>
    e89a:	2b01      	cmp	r3, #1
    e89c:	d128      	bne.n	e8f0 <handle_ansi+0x154>
            handle_home(line);
    e89e:	4608      	mov	r0, r1
    e8a0:	f7ff ff10 	bl	e6c4 <handle_home>
            break;
    e8a4:	e024      	b.n	e8f0 <handle_ansi+0x154>
        if (ansi_val > trailing_chars) {
    e8a6:	4b1f      	ldr	r3, [pc, #124]	; (e924 <handle_ansi+0x188>)
    e8a8:	881b      	ldrh	r3, [r3, #0]
    e8aa:	4a1c      	ldr	r2, [pc, #112]	; (e91c <handle_ansi+0x180>)
    e8ac:	6811      	ldr	r1, [r2, #0]
    e8ae:	428b      	cmp	r3, r1
    e8b0:	d31e      	bcc.n	e8f0 <handle_ansi+0x154>
        trailing_chars -= ansi_val;
    e8b2:	b28a      	uxth	r2, r1
    e8b4:	1a9b      	subs	r3, r3, r2
    e8b6:	481b      	ldr	r0, [pc, #108]	; (e924 <handle_ansi+0x188>)
    e8b8:	8003      	strh	r3, [r0, #0]
        cur += ansi_val;
    e8ba:	4b19      	ldr	r3, [pc, #100]	; (e920 <handle_ansi+0x184>)
    e8bc:	8818      	ldrh	r0, [r3, #0]
    e8be:	4402      	add	r2, r0
    e8c0:	801a      	strh	r2, [r3, #0]
    char seq[14] = CSI;
    e8c2:	f645 331b 	movw	r3, #23323	; 0x5b1b
    e8c6:	9300      	str	r3, [sp, #0]
    e8c8:	2300      	movs	r3, #0
    e8ca:	9301      	str	r3, [sp, #4]
    e8cc:	9302      	str	r3, [sp, #8]
    e8ce:	f8ad 300c 	strh.w	r3, [sp, #12]
    if (count) {
    e8d2:	b169      	cbz	r1, e8f0 <handle_ansi+0x154>
        p = add_ascii_num_with_char(seq + 2, count, 'C');
    e8d4:	466c      	mov	r4, sp
    e8d6:	2243      	movs	r2, #67	; 0x43
    e8d8:	f10d 0002 	add.w	r0, sp, #2
    e8dc:	f7ff fe22 	bl	e524 <add_ascii_num_with_char>
        console_write_nolock(seq, p - seq);
    e8e0:	1b01      	subs	r1, r0, r4
    e8e2:	4620      	mov	r0, r4
    e8e4:	f7ff feb6 	bl	e654 <console_write_nolock>
    e8e8:	e002      	b.n	e8f0 <handle_ansi+0x154>
        handle_home(line);
    e8ea:	4608      	mov	r0, r1
    e8ec:	f7ff feea 	bl	e6c4 <handle_home>
    esc_state &= ~ESC_ANSI;
    e8f0:	4a09      	ldr	r2, [pc, #36]	; (e918 <handle_ansi+0x17c>)
    e8f2:	6813      	ldr	r3, [r2, #0]
    e8f4:	f023 0302 	bic.w	r3, r3, #2
    e8f8:	6013      	str	r3, [r2, #0]
}
    e8fa:	b004      	add	sp, #16
    e8fc:	bd10      	pop	{r4, pc}
        handle_end(line);
    e8fe:	4608      	mov	r0, r1
    e900:	f7ff feb8 	bl	e674 <handle_end>
        break;
    e904:	e7f4      	b.n	e8f0 <handle_ansi+0x154>
            handle_delete(line);
    e906:	4608      	mov	r0, r1
    e908:	f7ff ff38 	bl	e77c <handle_delete>
            break;
    e90c:	e7f0      	b.n	e8f0 <handle_ansi+0x154>
            handle_end(line);
    e90e:	4608      	mov	r0, r1
    e910:	f7ff feb0 	bl	e674 <handle_end>
            break;
    e914:	e7ec      	b.n	e8f0 <handle_ansi+0x154>
    e916:	bf00      	nop
    e918:	200021a8 	.word	0x200021a8
    e91c:	20002174 	.word	0x20002174
    e920:	200021a0 	.word	0x200021a0
    e924:	200021b6 	.word	0x200021b6
    e928:	20002178 	.word	0x20002178

0000e92c <handle_backspace>:

static void
handle_backspace(char *line)
{
    if (cur > 0) {
    e92c:	4b13      	ldr	r3, [pc, #76]	; (e97c <handle_backspace+0x50>)
    e92e:	881b      	ldrh	r3, [r3, #0]
    e930:	b903      	cbnz	r3, e934 <handle_backspace+0x8>
    e932:	4770      	bx	lr
{
    e934:	b530      	push	{r4, r5, lr}
    e936:	b085      	sub	sp, #20
    e938:	4604      	mov	r4, r0
    char seq[14] = CSI;
    e93a:	f645 331b 	movw	r3, #23323	; 0x5b1b
    e93e:	9300      	str	r3, [sp, #0]
    e940:	2300      	movs	r3, #0
    e942:	9301      	str	r3, [sp, #4]
    e944:	9302      	str	r3, [sp, #8]
    e946:	f8ad 300c 	strh.w	r3, [sp, #12]
        p = add_ascii_num_with_char(seq + 2, count, 'D');
    e94a:	466d      	mov	r5, sp
    e94c:	2244      	movs	r2, #68	; 0x44
    e94e:	2101      	movs	r1, #1
    e950:	f10d 0002 	add.w	r0, sp, #2
    e954:	f7ff fde6 	bl	e524 <add_ascii_num_with_char>
        console_write_nolock(seq, p - seq);
    e958:	1b41      	subs	r1, r0, r5
    e95a:	4628      	mov	r0, r5
    e95c:	f7ff fe7a 	bl	e654 <console_write_nolock>
        cursor_backward(1);
        cur--;
    e960:	4a06      	ldr	r2, [pc, #24]	; (e97c <handle_backspace+0x50>)
    e962:	8813      	ldrh	r3, [r2, #0]
    e964:	3b01      	subs	r3, #1
    e966:	b29b      	uxth	r3, r3
    e968:	8013      	strh	r3, [r2, #0]
        trailing_chars++;
    e96a:	4905      	ldr	r1, [pc, #20]	; (e980 <handle_backspace+0x54>)
    e96c:	880a      	ldrh	r2, [r1, #0]
    e96e:	3201      	adds	r2, #1
    e970:	800a      	strh	r2, [r1, #0]
        del_char(&line[cur]);
    e972:	18e0      	adds	r0, r4, r3
    e974:	f7ff fece 	bl	e714 <del_char>
    }
}
    e978:	b005      	add	sp, #20
    e97a:	bd30      	pop	{r4, r5, pc}
    e97c:	200021a0 	.word	0x200021a0
    e980:	200021b6 	.word	0x200021b6

0000e984 <console_clear_line>:
{
    e984:	b510      	push	{r4, lr}
    e986:	b084      	sub	sp, #16
    if (cur) {
    e988:	4b13      	ldr	r3, [pc, #76]	; (e9d8 <console_clear_line+0x54>)
    e98a:	8819      	ldrh	r1, [r3, #0]
    e98c:	b979      	cbnz	r1, e9ae <console_clear_line+0x2a>
    cur = 0;
    e98e:	2300      	movs	r3, #0
    e990:	4a11      	ldr	r2, [pc, #68]	; (e9d8 <console_clear_line+0x54>)
    e992:	8013      	strh	r3, [r2, #0]
    trailing_chars = 0;
    e994:	4a11      	ldr	r2, [pc, #68]	; (e9dc <console_clear_line+0x58>)
    e996:	8013      	strh	r3, [r2, #0]
    console_out_nolock(ESC);
    e998:	201b      	movs	r0, #27
    e99a:	f000 fb8d 	bl	f0b8 <console_out_nolock>
    console_out_nolock('[');
    e99e:	205b      	movs	r0, #91	; 0x5b
    e9a0:	f000 fb8a 	bl	f0b8 <console_out_nolock>
    console_out_nolock('K');
    e9a4:	204b      	movs	r0, #75	; 0x4b
    e9a6:	f000 fb87 	bl	f0b8 <console_out_nolock>
}
    e9aa:	b004      	add	sp, #16
    e9ac:	bd10      	pop	{r4, pc}
    char seq[14] = CSI;
    e9ae:	f645 331b 	movw	r3, #23323	; 0x5b1b
    e9b2:	9300      	str	r3, [sp, #0]
    e9b4:	2300      	movs	r3, #0
    e9b6:	9301      	str	r3, [sp, #4]
    e9b8:	9302      	str	r3, [sp, #8]
    e9ba:	f8ad 300c 	strh.w	r3, [sp, #12]
    if (count) {
    e9be:	2900      	cmp	r1, #0
    e9c0:	d0e5      	beq.n	e98e <console_clear_line+0xa>
        p = add_ascii_num_with_char(seq + 2, count, 'D');
    e9c2:	466c      	mov	r4, sp
    e9c4:	2244      	movs	r2, #68	; 0x44
    e9c6:	f10d 0002 	add.w	r0, sp, #2
    e9ca:	f7ff fdab 	bl	e524 <add_ascii_num_with_char>
        console_write_nolock(seq, p - seq);
    e9ce:	1b01      	subs	r1, r0, r4
    e9d0:	4620      	mov	r0, r4
    e9d2:	f7ff fe3f 	bl	e654 <console_write_nolock>
    e9d6:	e7da      	b.n	e98e <console_clear_line+0xa>
    e9d8:	200021a0 	.word	0x200021a0
    e9dc:	200021b6 	.word	0x200021b6

0000e9e0 <insert_char>:
        cur + trailing_chars >= MYNEWT_VAL(CONSOLE_MAX_INPUT_LEN) - 1) {
    e9e0:	4b26      	ldr	r3, [pc, #152]	; (ea7c <insert_char+0x9c>)
    e9e2:	881b      	ldrh	r3, [r3, #0]
    e9e4:	4a26      	ldr	r2, [pc, #152]	; (ea80 <insert_char+0xa0>)
    e9e6:	8812      	ldrh	r2, [r2, #0]
    e9e8:	4413      	add	r3, r2
    if ((!MYNEWT_VAL(CONSOLE_HISTORY_AUTO_SEARCH) || !trailing_selection) &&
    e9ea:	2bfe      	cmp	r3, #254	; 0xfe
    e9ec:	dc45      	bgt.n	ea7a <insert_char+0x9a>
{
    e9ee:	b5f0      	push	{r4, r5, r6, r7, lr}
    e9f0:	b085      	sub	sp, #20
    e9f2:	460f      	mov	r7, r1
    e9f4:	4606      	mov	r6, r0
    if (echo) {
    e9f6:	4b23      	ldr	r3, [pc, #140]	; (ea84 <insert_char+0xa4>)
    e9f8:	681b      	ldr	r3, [r3, #0]
    e9fa:	b963      	cbnz	r3, ea16 <insert_char+0x36>
    ++cur;
    e9fc:	4a1f      	ldr	r2, [pc, #124]	; (ea7c <insert_char+0x9c>)
    e9fe:	8813      	ldrh	r3, [r2, #0]
    ea00:	3301      	adds	r3, #1
    ea02:	8013      	strh	r3, [r2, #0]
    if (trailing_chars == 0) {
    ea04:	4b1e      	ldr	r3, [pc, #120]	; (ea80 <insert_char+0xa0>)
    ea06:	881b      	ldrh	r3, [r3, #0]
    ea08:	b903      	cbnz	r3, ea0c <insert_char+0x2c>
        *pos = c;
    ea0a:	7037      	strb	r7, [r6, #0]
    tmp = *pos;
    ea0c:	4634      	mov	r4, r6
    ea0e:	f814 5b01 	ldrb.w	r5, [r4], #1
    *(pos++) = c;
    ea12:	7037      	strb	r7, [r6, #0]
    while (end-- > 0) {
    ea14:	e00a      	b.n	ea2c <insert_char+0x4c>
        console_out_nolock(c);
    ea16:	4608      	mov	r0, r1
    ea18:	f000 fb4e 	bl	f0b8 <console_out_nolock>
    ea1c:	e7ee      	b.n	e9fc <insert_char+0x1c>
        c = *pos;
    ea1e:	4622      	mov	r2, r4
    ea20:	f812 1b01 	ldrb.w	r1, [r2], #1
        *(pos++) = tmp;
    ea24:	7025      	strb	r5, [r4, #0]
    while (end-- > 0) {
    ea26:	4633      	mov	r3, r6
        tmp = c;
    ea28:	460d      	mov	r5, r1
        *(pos++) = tmp;
    ea2a:	4614      	mov	r4, r2
    while (end-- > 0) {
    ea2c:	1e5e      	subs	r6, r3, #1
    ea2e:	2b00      	cmp	r3, #0
    ea30:	dd07      	ble.n	ea42 <insert_char+0x62>
        if (echo) {
    ea32:	4b14      	ldr	r3, [pc, #80]	; (ea84 <insert_char+0xa4>)
    ea34:	681b      	ldr	r3, [r3, #0]
    ea36:	2b00      	cmp	r3, #0
    ea38:	d0f1      	beq.n	ea1e <insert_char+0x3e>
            console_out_nolock(tmp);
    ea3a:	4628      	mov	r0, r5
    ea3c:	f000 fb3c 	bl	f0b8 <console_out_nolock>
    ea40:	e7ed      	b.n	ea1e <insert_char+0x3e>
    if (echo) {
    ea42:	4b10      	ldr	r3, [pc, #64]	; (ea84 <insert_char+0xa4>)
    ea44:	681b      	ldr	r3, [r3, #0]
    ea46:	b90b      	cbnz	r3, ea4c <insert_char+0x6c>
}
    ea48:	b005      	add	sp, #20
    ea4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        cursor_backward(trailing_chars);
    ea4c:	4b0c      	ldr	r3, [pc, #48]	; (ea80 <insert_char+0xa0>)
    ea4e:	8819      	ldrh	r1, [r3, #0]
    char seq[14] = CSI;
    ea50:	f645 331b 	movw	r3, #23323	; 0x5b1b
    ea54:	9300      	str	r3, [sp, #0]
    ea56:	2300      	movs	r3, #0
    ea58:	9301      	str	r3, [sp, #4]
    ea5a:	9302      	str	r3, [sp, #8]
    ea5c:	f8ad 300c 	strh.w	r3, [sp, #12]
    if (count) {
    ea60:	2900      	cmp	r1, #0
    ea62:	d0f1      	beq.n	ea48 <insert_char+0x68>
        p = add_ascii_num_with_char(seq + 2, count, 'D');
    ea64:	466c      	mov	r4, sp
    ea66:	2244      	movs	r2, #68	; 0x44
    ea68:	f10d 0002 	add.w	r0, sp, #2
    ea6c:	f7ff fd5a 	bl	e524 <add_ascii_num_with_char>
        console_write_nolock(seq, p - seq);
    ea70:	1b01      	subs	r1, r0, r4
    ea72:	4620      	mov	r0, r4
    ea74:	f7ff fdee 	bl	e654 <console_write_nolock>
    ea78:	e7e6      	b.n	ea48 <insert_char+0x68>
    ea7a:	4770      	bx	lr
    ea7c:	200021a0 	.word	0x200021a0
    ea80:	200021b6 	.word	0x200021b6
    ea84:	20000128 	.word	0x20000128

0000ea88 <console_echo>:
    echo = on;
    ea88:	4b01      	ldr	r3, [pc, #4]	; (ea90 <console_echo+0x8>)
    ea8a:	6018      	str	r0, [r3, #0]
}
    ea8c:	4770      	bx	lr
    ea8e:	bf00      	nop
    ea90:	20000128 	.word	0x20000128

0000ea94 <handle_nlip>:
{
    ea94:	b570      	push	{r4, r5, r6, lr}
    ea96:	4604      	mov	r4, r0
    input = current_line_ev->ev_arg;
    ea98:	4b3d      	ldr	r3, [pc, #244]	; (eb90 <handle_nlip+0xfc>)
    ea9a:	681b      	ldr	r3, [r3, #0]
    ea9c:	689d      	ldr	r5, [r3, #8]
    switch (nlip_state) {
    ea9e:	4b3d      	ldr	r3, [pc, #244]	; (eb94 <handle_nlip+0x100>)
    eaa0:	681b      	ldr	r3, [r3, #0]
    eaa2:	3b04      	subs	r3, #4
    eaa4:	2b10      	cmp	r3, #16
    eaa6:	d855      	bhi.n	eb54 <handle_nlip+0xc0>
    eaa8:	e8df f003 	tbb	[pc, r3]
    eaac:	5420543a 	.word	0x5420543a
    eab0:	54540954 	.word	0x54540954
    eab4:	54545454 	.word	0x54545454
    eab8:	54545454 	.word	0x54545454
    eabc:	09          	.byte	0x09
    eabd:	00          	.byte	0x00
        insert_char(&input->line[cur], byte);
    eabe:	4b36      	ldr	r3, [pc, #216]	; (eb98 <handle_nlip+0x104>)
    eac0:	8818      	ldrh	r0, [r3, #0]
    eac2:	4621      	mov	r1, r4
    eac4:	4428      	add	r0, r5
    eac6:	f7ff ff8b 	bl	e9e0 <insert_char>
        if (byte == '\n') {
    eaca:	2c0a      	cmp	r4, #10
    eacc:	d001      	beq.n	ead2 <handle_nlip+0x3e>
    handled = 1;
    eace:	2001      	movs	r0, #1
    ead0:	e013      	b.n	eafa <handle_nlip+0x66>
            input->line[cur] = '\0';
    ead2:	4b31      	ldr	r3, [pc, #196]	; (eb98 <handle_nlip+0x104>)
    ead4:	881b      	ldrh	r3, [r3, #0]
    ead6:	2400      	movs	r4, #0
    ead8:	54ec      	strb	r4, [r5, r3]
            console_echo(1);
    eada:	2001      	movs	r0, #1
    eadc:	f7ff ffd4 	bl	ea88 <console_echo>
            nlip_state = 0;
    eae0:	4b2c      	ldr	r3, [pc, #176]	; (eb94 <handle_nlip+0x100>)
    eae2:	601c      	str	r4, [r3, #0]
            console_handle_line();
    eae4:	f7ff fd48 	bl	e578 <console_handle_line>
    handled = 1;
    eae8:	2001      	movs	r0, #1
    eaea:	e006      	b.n	eafa <handle_nlip+0x66>
        if (byte == CONSOLE_NLIP_PKT_START2) {
    eaec:	2809      	cmp	r0, #9
    eaee:	d005      	beq.n	eafc <handle_nlip+0x68>
            nlip_state = 0;
    eaf0:	4b28      	ldr	r3, [pc, #160]	; (eb94 <handle_nlip+0x100>)
    eaf2:	2200      	movs	r2, #0
    eaf4:	601a      	str	r2, [r3, #0]
            handled = g_console_ignore_non_nlip;
    eaf6:	4b29      	ldr	r3, [pc, #164]	; (eb9c <handle_nlip+0x108>)
    eaf8:	7818      	ldrb	r0, [r3, #0]
}
    eafa:	bd70      	pop	{r4, r5, r6, pc}
            nlip_state = NLIP_PKT_START2;
    eafc:	4b25      	ldr	r3, [pc, #148]	; (eb94 <handle_nlip+0x100>)
    eafe:	6018      	str	r0, [r3, #0]
            console_echo(0);
    eb00:	2000      	movs	r0, #0
    eb02:	f7ff ffc1 	bl	ea88 <console_echo>
            insert_char(&input->line[cur], CONSOLE_NLIP_PKT_START1);
    eb06:	4e24      	ldr	r6, [pc, #144]	; (eb98 <handle_nlip+0x104>)
    eb08:	8830      	ldrh	r0, [r6, #0]
    eb0a:	2106      	movs	r1, #6
    eb0c:	4428      	add	r0, r5
    eb0e:	f7ff ff67 	bl	e9e0 <insert_char>
            insert_char(&input->line[cur], CONSOLE_NLIP_PKT_START2);
    eb12:	8830      	ldrh	r0, [r6, #0]
    eb14:	4621      	mov	r1, r4
    eb16:	4428      	add	r0, r5
    eb18:	f7ff ff62 	bl	e9e0 <insert_char>
    handled = 1;
    eb1c:	2001      	movs	r0, #1
    eb1e:	e7ec      	b.n	eafa <handle_nlip+0x66>
        if (byte == CONSOLE_NLIP_DATA_START2) {
    eb20:	2814      	cmp	r0, #20
    eb22:	d005      	beq.n	eb30 <handle_nlip+0x9c>
            nlip_state = 0;
    eb24:	4b1b      	ldr	r3, [pc, #108]	; (eb94 <handle_nlip+0x100>)
    eb26:	2200      	movs	r2, #0
    eb28:	601a      	str	r2, [r3, #0]
            handled = g_console_ignore_non_nlip;
    eb2a:	4b1c      	ldr	r3, [pc, #112]	; (eb9c <handle_nlip+0x108>)
    eb2c:	7818      	ldrb	r0, [r3, #0]
    eb2e:	e7e4      	b.n	eafa <handle_nlip+0x66>
            nlip_state = NLIP_DATA_START2;
    eb30:	4b18      	ldr	r3, [pc, #96]	; (eb94 <handle_nlip+0x100>)
    eb32:	6018      	str	r0, [r3, #0]
            console_echo(0);
    eb34:	2000      	movs	r0, #0
    eb36:	f7ff ffa7 	bl	ea88 <console_echo>
            insert_char(&input->line[cur], CONSOLE_NLIP_DATA_START1);
    eb3a:	4e17      	ldr	r6, [pc, #92]	; (eb98 <handle_nlip+0x104>)
    eb3c:	8830      	ldrh	r0, [r6, #0]
    eb3e:	2104      	movs	r1, #4
    eb40:	4428      	add	r0, r5
    eb42:	f7ff ff4d 	bl	e9e0 <insert_char>
            insert_char(&input->line[cur], CONSOLE_NLIP_DATA_START2);
    eb46:	8830      	ldrh	r0, [r6, #0]
    eb48:	4621      	mov	r1, r4
    eb4a:	4428      	add	r0, r5
    eb4c:	f7ff ff48 	bl	e9e0 <insert_char>
    handled = 1;
    eb50:	2001      	movs	r0, #1
    eb52:	e7d2      	b.n	eafa <handle_nlip+0x66>
        if (byte == CONSOLE_NLIP_DATA_START1) {
    eb54:	2804      	cmp	r0, #4
    eb56:	d00a      	beq.n	eb6e <handle_nlip+0xda>
        } else if (byte == CONSOLE_NLIP_PKT_START1) {
    eb58:	2806      	cmp	r0, #6
    eb5a:	d00d      	beq.n	eb78 <handle_nlip+0xe4>
            handled = g_console_ignore_non_nlip && byte != '\r' && byte != '\n';
    eb5c:	4b0f      	ldr	r3, [pc, #60]	; (eb9c <handle_nlip+0x108>)
    eb5e:	781b      	ldrb	r3, [r3, #0]
    eb60:	b18b      	cbz	r3, eb86 <handle_nlip+0xf2>
    eb62:	280d      	cmp	r0, #13
    eb64:	d011      	beq.n	eb8a <handle_nlip+0xf6>
    eb66:	280a      	cmp	r0, #10
    eb68:	d00b      	beq.n	eb82 <handle_nlip+0xee>
    eb6a:	2001      	movs	r0, #1
    return handled;
    eb6c:	e7c5      	b.n	eafa <handle_nlip+0x66>
            nlip_state = NLIP_DATA_START1;
    eb6e:	4b09      	ldr	r3, [pc, #36]	; (eb94 <handle_nlip+0x100>)
    eb70:	2204      	movs	r2, #4
    eb72:	601a      	str	r2, [r3, #0]
    handled = 1;
    eb74:	2001      	movs	r0, #1
    eb76:	e7c0      	b.n	eafa <handle_nlip+0x66>
            nlip_state = NLIP_PKT_START1;
    eb78:	4b06      	ldr	r3, [pc, #24]	; (eb94 <handle_nlip+0x100>)
    eb7a:	2206      	movs	r2, #6
    eb7c:	601a      	str	r2, [r3, #0]
    handled = 1;
    eb7e:	2001      	movs	r0, #1
    eb80:	e7bb      	b.n	eafa <handle_nlip+0x66>
            handled = g_console_ignore_non_nlip && byte != '\r' && byte != '\n';
    eb82:	2000      	movs	r0, #0
    eb84:	e7b9      	b.n	eafa <handle_nlip+0x66>
    eb86:	2000      	movs	r0, #0
    eb88:	e7b7      	b.n	eafa <handle_nlip+0x66>
    eb8a:	2000      	movs	r0, #0
    eb8c:	e7b5      	b.n	eafa <handle_nlip+0x66>
    eb8e:	bf00      	nop
    eb90:	200021a4 	.word	0x200021a4
    eb94:	200021b0 	.word	0x200021b0
    eb98:	200021a0 	.word	0x200021a0
    eb9c:	20003b80 	.word	0x20003b80

0000eba0 <console_lock>:
{
    eba0:	b508      	push	{r3, lr}
#endif

static inline int
os_arch_in_isr(void)
{
    return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
    eba2:	4b0a      	ldr	r3, [pc, #40]	; (ebcc <console_lock+0x2c>)
    eba4:	685b      	ldr	r3, [r3, #4]
    eba6:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (os_arch_in_isr()) {
    ebaa:	b123      	cbz	r3, ebb6 <console_lock+0x16>
 *
 * @return number of times lock was called from current task
 */
static inline uint16_t os_mutex_get_level(struct os_mutex *mu)
{
    return mu->mu_level;
    ebac:	4b08      	ldr	r3, [pc, #32]	; (ebd0 <console_lock+0x30>)
    ebae:	88db      	ldrh	r3, [r3, #6]
        if (os_mutex_get_level(&console_write_lock)) {
    ebb0:	b94b      	cbnz	r3, ebc6 <console_lock+0x26>
    int rc = OS_OK;
    ebb2:	2000      	movs	r0, #0
}
    ebb4:	bd08      	pop	{r3, pc}
    ebb6:	4601      	mov	r1, r0
    rc = os_mutex_pend(&console_write_lock, timeout);
    ebb8:	4805      	ldr	r0, [pc, #20]	; (ebd0 <console_lock+0x30>)
    ebba:	f7ff fb61 	bl	e280 <os_mutex_pend>
    if (rc == OS_NOT_STARTED) {
    ebbe:	2809      	cmp	r0, #9
    ebc0:	d1f8      	bne.n	ebb4 <console_lock+0x14>
        rc = OS_OK;
    ebc2:	2000      	movs	r0, #0
    return rc;
    ebc4:	e7f6      	b.n	ebb4 <console_lock+0x14>
            rc = OS_EBUSY;
    ebc6:	200b      	movs	r0, #11
    ebc8:	e7f4      	b.n	ebb4 <console_lock+0x14>
    ebca:	bf00      	nop
    ebcc:	e000ed00 	.word	0xe000ed00
    ebd0:	20002194 	.word	0x20002194

0000ebd4 <console_unlock>:
{
    ebd4:	b508      	push	{r3, lr}
    ebd6:	4b0c      	ldr	r3, [pc, #48]	; (ec08 <console_unlock+0x34>)
    ebd8:	685b      	ldr	r3, [r3, #4]
    ebda:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (os_arch_in_isr()) {
    ebde:	b10b      	cbz	r3, ebe4 <console_unlock+0x10>
    int rc = OS_OK;
    ebe0:	2000      	movs	r0, #0
}
    ebe2:	bd08      	pop	{r3, pc}
    rc = os_mutex_release(&console_write_lock);
    ebe4:	4809      	ldr	r0, [pc, #36]	; (ec0c <console_unlock+0x38>)
    ebe6:	f7ff faeb 	bl	e1c0 <os_mutex_release>
    assert(rc == OS_OK || rc == OS_NOT_STARTED);
    ebea:	2800      	cmp	r0, #0
    ebec:	d0f9      	beq.n	ebe2 <console_unlock+0xe>
    ebee:	2809      	cmp	r0, #9
    ebf0:	d0f7      	beq.n	ebe2 <console_unlock+0xe>
    ebf2:	f7fd faf9 	bl	c1e8 <hal_debugger_connected>
    ebf6:	b100      	cbz	r0, ebfa <console_unlock+0x26>
    ebf8:	be01      	bkpt	0x0001
    ebfa:	2300      	movs	r3, #0
    ebfc:	461a      	mov	r2, r3
    ebfe:	4619      	mov	r1, r3
    ec00:	4618      	mov	r0, r3
    ec02:	f7fd fd2b 	bl	c65c <__assert_func>
    ec06:	bf00      	nop
    ec08:	e000ed00 	.word	0xe000ed00
    ec0c:	20002194 	.word	0x20002194

0000ec10 <console_write>:
{
    ec10:	b538      	push	{r3, r4, r5, lr}
    ec12:	4605      	mov	r5, r0
    ec14:	460c      	mov	r4, r1
    if (console_lock(timeout) != OS_OK) {
    ec16:	2080      	movs	r0, #128	; 0x80
    ec18:	f7ff ffc2 	bl	eba0 <console_lock>
    ec1c:	b9e0      	cbnz	r0, ec58 <console_write+0x48>
    if (cnt >= 2 && str[0] == CONSOLE_NLIP_DATA_START1 &&
    ec1e:	2c01      	cmp	r4, #1
    ec20:	dd02      	ble.n	ec28 <console_write+0x18>
    ec22:	782b      	ldrb	r3, [r5, #0]
    ec24:	2b04      	cmp	r3, #4
    ec26:	d018      	beq.n	ec5a <console_write+0x4a>
    if (cnt >= 3 && str[1] == CONSOLE_NLIP_PKT_START1 &&
    ec28:	2c02      	cmp	r4, #2
    ec2a:	dd02      	ble.n	ec32 <console_write+0x22>
    ec2c:	786b      	ldrb	r3, [r5, #1]
    ec2e:	2b06      	cmp	r3, #6
    ec30:	d01a      	beq.n	ec68 <console_write+0x58>
    if (!g_is_output_nlip && g_console_silence_non_nlip) {
    ec32:	4b13      	ldr	r3, [pc, #76]	; (ec80 <console_write+0x70>)
    ec34:	781b      	ldrb	r3, [r3, #0]
    ec36:	b913      	cbnz	r3, ec3e <console_write+0x2e>
    ec38:	4b12      	ldr	r3, [pc, #72]	; (ec84 <console_write+0x74>)
    ec3a:	781b      	ldrb	r3, [r3, #0]
    ec3c:	b91b      	cbnz	r3, ec46 <console_write+0x36>
    console_filter_write(str, cnt);
    ec3e:	4621      	mov	r1, r4
    ec40:	4628      	mov	r0, r5
    ec42:	f7ff fcd5 	bl	e5f0 <console_filter_write>
    if (cnt > 0 && str[cnt - 1] == '\n') {
    ec46:	2c00      	cmp	r4, #0
    ec48:	dd04      	ble.n	ec54 <console_write+0x44>
    ec4a:	442c      	add	r4, r5
    ec4c:	f814 3c01 	ldrb.w	r3, [r4, #-1]
    ec50:	2b0a      	cmp	r3, #10
    ec52:	d010      	beq.n	ec76 <console_write+0x66>
    (void)console_unlock();
    ec54:	f7ff ffbe 	bl	ebd4 <console_unlock>
}
    ec58:	bd38      	pop	{r3, r4, r5, pc}
        str[1] == CONSOLE_NLIP_DATA_START2) {
    ec5a:	786b      	ldrb	r3, [r5, #1]
    if (cnt >= 2 && str[0] == CONSOLE_NLIP_DATA_START1 &&
    ec5c:	2b14      	cmp	r3, #20
    ec5e:	d1e3      	bne.n	ec28 <console_write+0x18>
        g_is_output_nlip = 1;
    ec60:	4b07      	ldr	r3, [pc, #28]	; (ec80 <console_write+0x70>)
    ec62:	2201      	movs	r2, #1
    ec64:	701a      	strb	r2, [r3, #0]
    ec66:	e7df      	b.n	ec28 <console_write+0x18>
        str[2] == CONSOLE_NLIP_PKT_START2) {
    ec68:	78ab      	ldrb	r3, [r5, #2]
    if (cnt >= 3 && str[1] == CONSOLE_NLIP_PKT_START1 &&
    ec6a:	2b09      	cmp	r3, #9
    ec6c:	d1e1      	bne.n	ec32 <console_write+0x22>
        g_is_output_nlip = 1;
    ec6e:	4b04      	ldr	r3, [pc, #16]	; (ec80 <console_write+0x70>)
    ec70:	2201      	movs	r2, #1
    ec72:	701a      	strb	r2, [r3, #0]
    ec74:	e7dd      	b.n	ec32 <console_write+0x22>
        g_is_output_nlip = 0;
    ec76:	4b02      	ldr	r3, [pc, #8]	; (ec80 <console_write+0x70>)
    ec78:	2200      	movs	r2, #0
    ec7a:	701a      	strb	r2, [r3, #0]
    ec7c:	e7ea      	b.n	ec54 <console_write+0x44>
    ec7e:	bf00      	nop
    ec80:	20003b89 	.word	0x20003b89
    ec84:	20003b81 	.word	0x20003b81

0000ec88 <console_blocking_mode>:
{
    ec88:	b508      	push	{r3, lr}
    uart_console_blocking_mode();
    ec8a:	f000 f9ff 	bl	f08c <uart_console_blocking_mode>
}
    ec8e:	bd08      	pop	{r3, pc}

0000ec90 <console_handle_char>:

int
console_handle_char(uint8_t byte)
{
    ec90:	b570      	push	{r4, r5, r6, lr}
    return 0;
#endif
    struct console_input *input;
    static char prev_endl = '\0';

    if (!lines_queue) {
    ec92:	4b54      	ldr	r3, [pc, #336]	; (ede4 <console_handle_char+0x154>)
    ec94:	681b      	ldr	r3, [r3, #0]
    ec96:	2b00      	cmp	r3, #0
    ec98:	f000 809f 	beq.w	edda <console_handle_char+0x14a>
    ec9c:	4604      	mov	r4, r0
        return 0;
    }

    if (!current_line_ev) {
    ec9e:	4b52      	ldr	r3, [pc, #328]	; (ede8 <console_handle_char+0x158>)
    eca0:	681b      	ldr	r3, [r3, #0]
    eca2:	b14b      	cbz	r3, ecb8 <console_handle_char+0x28>
        if (!current_line_ev) {
            rx_stalled = true;
            return -1;
        }
    }
    input = current_line_ev->ev_arg;
    eca4:	4b50      	ldr	r3, [pc, #320]	; (ede8 <console_handle_char+0x158>)
    eca6:	681b      	ldr	r3, [r3, #0]
    eca8:	689e      	ldr	r6, [r3, #8]

    if (handle_nlip(byte)) {
    ecaa:	4620      	mov	r0, r4
    ecac:	f7ff fef2 	bl	ea94 <handle_nlip>
    ecb0:	b178      	cbz	r0, ecd2 <console_handle_char+0x42>
        return 0;
    ecb2:	2500      	movs	r5, #0
    }
unlock:
    (void)console_unlock();

    return 0;
}
    ecb4:	4628      	mov	r0, r5
    ecb6:	bd70      	pop	{r4, r5, r6, pc}
        current_line_ev = os_eventq_get_no_wait(&avail_queue);
    ecb8:	484c      	ldr	r0, [pc, #304]	; (edec <console_handle_char+0x15c>)
    ecba:	f7fe f836 	bl	cd2a <os_eventq_get_no_wait>
    ecbe:	4b4a      	ldr	r3, [pc, #296]	; (ede8 <console_handle_char+0x158>)
    ecc0:	6018      	str	r0, [r3, #0]
        if (!current_line_ev) {
    ecc2:	2800      	cmp	r0, #0
    ecc4:	d1ee      	bne.n	eca4 <console_handle_char+0x14>
            rx_stalled = true;
    ecc6:	4b4a      	ldr	r3, [pc, #296]	; (edf0 <console_handle_char+0x160>)
    ecc8:	2201      	movs	r2, #1
    ecca:	701a      	strb	r2, [r3, #0]
            return -1;
    eccc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    ecd0:	e7f0      	b.n	ecb4 <console_handle_char+0x24>
    if (console_lock(1000)) {
    ecd2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    ecd6:	f7ff ff63 	bl	eba0 <console_lock>
    ecda:	4605      	mov	r5, r0
    ecdc:	2800      	cmp	r0, #0
    ecde:	d17e      	bne.n	edde <console_handle_char+0x14e>
    if (esc_state & ESC_ANSI) {
    ece0:	4b44      	ldr	r3, [pc, #272]	; (edf4 <console_handle_char+0x164>)
    ece2:	681b      	ldr	r3, [r3, #0]
    ece4:	f013 0f02 	tst.w	r3, #2
    ece8:	d118      	bne.n	ed1c <console_handle_char+0x8c>
    if (esc_state & ESC_ESC) {
    ecea:	f013 0f01 	tst.w	r3, #1
    ecee:	d11c      	bne.n	ed2a <console_handle_char+0x9a>
	    (__c >= '{' && __c <= '~');
}

__extern_inline int isprint(int __c)
{
	return (__c >= 0x20 && __c <= 0x7e);
    ecf0:	f1a4 0320 	sub.w	r3, r4, #32
    if (!isprint(byte)) {
    ecf4:	2b5e      	cmp	r3, #94	; 0x5e
    ecf6:	d969      	bls.n	edcc <console_handle_char+0x13c>
        handle_ansi(byte, input->line);
    ecf8:	4631      	mov	r1, r6
    ecfa:	4620      	mov	r0, r4
    ecfc:	f7ff fd4e 	bl	e79c <handle_ansi>
        switch (byte) {
    ed00:	2c0a      	cmp	r4, #10
    ed02:	d03c      	beq.n	ed7e <console_handle_char+0xee>
    ed04:	d921      	bls.n	ed4a <console_handle_char+0xba>
    ed06:	2c0d      	cmp	r4, #13
    ed08:	d039      	beq.n	ed7e <console_handle_char+0xee>
    ed0a:	d926      	bls.n	ed5a <console_handle_char+0xca>
    ed0c:	2c1b      	cmp	r4, #27
    ed0e:	d12a      	bne.n	ed66 <console_handle_char+0xd6>
            esc_state |= ESC_ESC;
    ed10:	4a38      	ldr	r2, [pc, #224]	; (edf4 <console_handle_char+0x164>)
    ed12:	6813      	ldr	r3, [r2, #0]
    ed14:	f043 0301 	orr.w	r3, r3, #1
    ed18:	6013      	str	r3, [r2, #0]
            break;
    ed1a:	e003      	b.n	ed24 <console_handle_char+0x94>
        handle_ansi(byte, input->line);
    ed1c:	4631      	mov	r1, r6
    ed1e:	4620      	mov	r0, r4
    ed20:	f7ff fd3c 	bl	e79c <handle_ansi>
    (void)console_unlock();
    ed24:	f7ff ff56 	bl	ebd4 <console_unlock>
    return 0;
    ed28:	e7c4      	b.n	ecb4 <console_handle_char+0x24>
        esc_state &= ~ESC_ESC;
    ed2a:	f023 0301 	bic.w	r3, r3, #1
    ed2e:	4a31      	ldr	r2, [pc, #196]	; (edf4 <console_handle_char+0x164>)
    ed30:	6013      	str	r3, [r2, #0]
        handle_ansi(byte, input->line);
    ed32:	4631      	mov	r1, r6
    ed34:	4620      	mov	r0, r4
    ed36:	f7ff fd31 	bl	e79c <handle_ansi>
        switch (byte) {
    ed3a:	2c5b      	cmp	r4, #91	; 0x5b
    ed3c:	d1f2      	bne.n	ed24 <console_handle_char+0x94>
            esc_state |= ESC_ANSI;
    ed3e:	4a2d      	ldr	r2, [pc, #180]	; (edf4 <console_handle_char+0x164>)
    ed40:	6813      	ldr	r3, [r2, #0]
            esc_state |= ESC_ANSI_FIRST;
    ed42:	f043 0306 	orr.w	r3, r3, #6
    ed46:	6013      	str	r3, [r2, #0]
            break;
    ed48:	e7ec      	b.n	ed24 <console_handle_char+0x94>
        switch (byte) {
    ed4a:	2c08      	cmp	r4, #8
    ed4c:	d00d      	beq.n	ed6a <console_handle_char+0xda>
    ed4e:	d831      	bhi.n	edb4 <console_handle_char+0x124>
    ed50:	2c03      	cmp	r4, #3
    ed52:	d10e      	bne.n	ed72 <console_handle_char+0xe2>
            console_clear_line();
    ed54:	f7ff fe16 	bl	e984 <console_clear_line>
            break;
    ed58:	e7e4      	b.n	ed24 <console_handle_char+0x94>
        switch (byte) {
    ed5a:	2c0c      	cmp	r4, #12
    ed5c:	d109      	bne.n	ed72 <console_handle_char+0xe2>
                console_out_nolock(VT);
    ed5e:	200c      	movs	r0, #12
    ed60:	f000 f9aa 	bl	f0b8 <console_out_nolock>
            break;
    ed64:	e7de      	b.n	ed24 <console_handle_char+0x94>
        switch (byte) {
    ed66:	2c7f      	cmp	r4, #127	; 0x7f
    ed68:	d103      	bne.n	ed72 <console_handle_char+0xe2>
            handle_backspace(input->line);
    ed6a:	4630      	mov	r0, r6
    ed6c:	f7ff fdde 	bl	e92c <handle_backspace>
            break;
    ed70:	e7d8      	b.n	ed24 <console_handle_char+0x94>
            insert_char(&input->line[cur], byte);
    ed72:	4b21      	ldr	r3, [pc, #132]	; (edf8 <console_handle_char+0x168>)
    ed74:	8818      	ldrh	r0, [r3, #0]
    ed76:	4621      	mov	r1, r4
    ed78:	4430      	add	r0, r6
    ed7a:	f7ff fe31 	bl	e9e0 <insert_char>
            if (byte == '\n' && prev_endl == '\r') {
    ed7e:	2c0a      	cmp	r4, #10
    ed80:	d103      	bne.n	ed8a <console_handle_char+0xfa>
    ed82:	4b1e      	ldr	r3, [pc, #120]	; (edfc <console_handle_char+0x16c>)
    ed84:	781b      	ldrb	r3, [r3, #0]
    ed86:	2b0d      	cmp	r3, #13
    ed88:	d011      	beq.n	edae <console_handle_char+0x11e>
            prev_endl = byte;
    ed8a:	4b1c      	ldr	r3, [pc, #112]	; (edfc <console_handle_char+0x16c>)
    ed8c:	701c      	strb	r4, [r3, #0]
            input->line[cur + trailing_chars] = '\0';
    ed8e:	4b1a      	ldr	r3, [pc, #104]	; (edf8 <console_handle_char+0x168>)
    ed90:	881b      	ldrh	r3, [r3, #0]
    ed92:	4a1b      	ldr	r2, [pc, #108]	; (ee00 <console_handle_char+0x170>)
    ed94:	8812      	ldrh	r2, [r2, #0]
    ed96:	4413      	add	r3, r2
    ed98:	2200      	movs	r2, #0
    ed9a:	54f2      	strb	r2, [r6, r3]
                console_filter_out('\r');
    ed9c:	200d      	movs	r0, #13
    ed9e:	f7ff fc09 	bl	e5b4 <console_filter_out>
                console_filter_out('\n');
    eda2:	200a      	movs	r0, #10
    eda4:	f7ff fc06 	bl	e5b4 <console_filter_out>
            console_handle_line();
    eda8:	f7ff fbe6 	bl	e578 <console_handle_line>
            break;
    edac:	e7ba      	b.n	ed24 <console_handle_char+0x94>
                prev_endl = byte;
    edae:	4b13      	ldr	r3, [pc, #76]	; (edfc <console_handle_char+0x16c>)
    edb0:	701c      	strb	r4, [r3, #0]
                break;
    edb2:	e7b7      	b.n	ed24 <console_handle_char+0x94>
            if (completion && (!trailing_chars ||
    edb4:	4b13      	ldr	r3, [pc, #76]	; (ee04 <console_handle_char+0x174>)
    edb6:	681b      	ldr	r3, [r3, #0]
    edb8:	2b00      	cmp	r3, #0
    edba:	d0b3      	beq.n	ed24 <console_handle_char+0x94>
    edbc:	4a10      	ldr	r2, [pc, #64]	; (ee00 <console_handle_char+0x170>)
    edbe:	8812      	ldrh	r2, [r2, #0]
    edc0:	2a00      	cmp	r2, #0
    edc2:	d1af      	bne.n	ed24 <console_handle_char+0x94>
                completion(input->line, console_append_char);
    edc4:	4910      	ldr	r1, [pc, #64]	; (ee08 <console_handle_char+0x178>)
    edc6:	4630      	mov	r0, r6
    edc8:	4798      	blx	r3
    edca:	e7ab      	b.n	ed24 <console_handle_char+0x94>
        insert_char(&input->line[cur], byte);
    edcc:	4b0a      	ldr	r3, [pc, #40]	; (edf8 <console_handle_char+0x168>)
    edce:	8818      	ldrh	r0, [r3, #0]
    edd0:	4621      	mov	r1, r4
    edd2:	4430      	add	r0, r6
    edd4:	f7ff fe04 	bl	e9e0 <insert_char>
    edd8:	e7a4      	b.n	ed24 <console_handle_char+0x94>
        return 0;
    edda:	2500      	movs	r5, #0
    eddc:	e76a      	b.n	ecb4 <console_handle_char+0x24>
        return -1;
    edde:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    ede2:	e767      	b.n	ecb4 <console_handle_char+0x24>
    ede4:	200021ac 	.word	0x200021ac
    ede8:	200021a4 	.word	0x200021a4
    edec:	2000217c 	.word	0x2000217c
    edf0:	200021b5 	.word	0x200021b5
    edf4:	200021a8 	.word	0x200021a8
    edf8:	200021a0 	.word	0x200021a0
    edfc:	200021b4 	.word	0x200021b4
    ee00:	200021b6 	.word	0x200021b6
    ee04:	2000218c 	.word	0x2000218c
    ee08:	0000e611 	.word	0x0000e611

0000ee0c <console_is_init>:

int
console_is_init(void)
{
    ee0c:	b508      	push	{r3, lr}
#if MYNEWT_VAL(CONSOLE_UART)
    return uart_console_is_init();
    ee0e:	f000 f96d 	bl	f0ec <uart_console_is_init>
#endif
#if MYNEWT_VAL(CONSOLE_BLE_MONITOR)
    return ble_monitor_console_is_init();
#endif
    return 0;
}
    ee12:	bd08      	pop	{r3, pc}

0000ee14 <console_pkg_init>:
}
#endif

void
console_pkg_init(void)
{
    ee14:	b510      	push	{r4, lr}
    ee16:	b082      	sub	sp, #8
    int rc = 0;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
    ee18:	4b12      	ldr	r3, [pc, #72]	; (ee64 <console_pkg_init+0x50>)
    ee1a:	781b      	ldrb	r3, [r3, #0]
    ee1c:	b153      	cbz	r3, ee34 <console_pkg_init+0x20>

    os_eventq_init(&avail_queue);
    ee1e:	4812      	ldr	r0, [pc, #72]	; (ee68 <console_pkg_init+0x54>)
    ee20:	f7fd ff3e 	bl	cca0 <os_eventq_init>
    os_mutex_init(&console_write_lock);
    ee24:	4811      	ldr	r0, [pc, #68]	; (ee6c <console_pkg_init+0x58>)
    ee26:	f7ff f9c1 	bl	e1ac <os_mutex_init>

#if MYNEWT_VAL(CONSOLE_UART)
    rc = uart_console_init();
    ee2a:	f000 f967 	bl	f0fc <uart_console_init>
#endif
#if MYNEWT_VAL(CONSOLE_RTT)
    rc = rtt_console_init();
#endif
    SYSINIT_PANIC_ASSERT(rc == 0);
    ee2e:	b958      	cbnz	r0, ee48 <console_pkg_init+0x34>
}
    ee30:	b002      	add	sp, #8
    ee32:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
    ee34:	f7fd f9d8 	bl	c1e8 <hal_debugger_connected>
    ee38:	b100      	cbz	r0, ee3c <console_pkg_init+0x28>
    ee3a:	be01      	bkpt	0x0001
    ee3c:	2300      	movs	r3, #0
    ee3e:	461a      	mov	r2, r3
    ee40:	4619      	mov	r1, r3
    ee42:	4618      	mov	r0, r3
    ee44:	f7fd fc0a 	bl	c65c <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
    ee48:	f7fd f9ce 	bl	c1e8 <hal_debugger_connected>
    ee4c:	b100      	cbz	r0, ee50 <console_pkg_init+0x3c>
    ee4e:	be01      	bkpt	0x0001
    ee50:	2000      	movs	r0, #0
    ee52:	9000      	str	r0, [sp, #0]
    ee54:	4b06      	ldr	r3, [pc, #24]	; (ee70 <console_pkg_init+0x5c>)
    ee56:	681c      	ldr	r4, [r3, #0]
    ee58:	4603      	mov	r3, r0
    ee5a:	4602      	mov	r2, r0
    ee5c:	4601      	mov	r1, r0
    ee5e:	47a0      	blx	r4
}
    ee60:	e7e6      	b.n	ee30 <console_pkg_init+0x1c>
    ee62:	bf00      	nop
    ee64:	20003bd8 	.word	0x20003bd8
    ee68:	2000217c 	.word	0x2000217c
    ee6c:	20002194 	.word	0x20002194
    ee70:	20000144 	.word	0x20000144

0000ee74 <console_vprintf>:

#if MYNEWT_VAL(BASELIBC_PRESENT)

int
console_vprintf(const char *fmt, va_list ap)
{
    ee74:	b570      	push	{r4, r5, r6, lr}
    ee76:	4604      	mov	r4, r0
    ee78:	460d      	mov	r5, r1
    int num_chars;

    num_chars = 0;

    if (console_get_ticks()) {
    ee7a:	f000 f827 	bl	eecc <console_get_ticks>
    ee7e:	b160      	cbz	r0, ee9a <console_vprintf+0x26>
        /* Prefix each line with a timestamp. */
        if (!console_is_midline) {
    ee80:	4b09      	ldr	r3, [pc, #36]	; (eea8 <console_vprintf+0x34>)
    ee82:	681b      	ldr	r3, [r3, #0]
    ee84:	b10b      	cbz	r3, ee8a <console_vprintf+0x16>
    num_chars = 0;
    ee86:	2600      	movs	r6, #0
    ee88:	e008      	b.n	ee9c <console_vprintf+0x28>
            num_chars += printf("%06lu ", (unsigned long)os_time_get());
    ee8a:	f7fe fbf3 	bl	d674 <os_time_get>
    ee8e:	4601      	mov	r1, r0
    ee90:	4806      	ldr	r0, [pc, #24]	; (eeac <console_vprintf+0x38>)
    ee92:	f01b f99d 	bl	2a1d0 <printf>
    ee96:	4606      	mov	r6, r0
    ee98:	e000      	b.n	ee9c <console_vprintf+0x28>
    num_chars = 0;
    ee9a:	2600      	movs	r6, #0
        }
    }

    num_chars += vprintf(fmt, ap);
    ee9c:	4629      	mov	r1, r5
    ee9e:	4620      	mov	r0, r4
    eea0:	f01b f9c6 	bl	2a230 <vprintf>

    return num_chars;
}
    eea4:	4430      	add	r0, r6
    eea6:	bd70      	pop	{r4, r5, r6, pc}
    eea8:	20003b84 	.word	0x20003b84
    eeac:	0002ae94 	.word	0x0002ae94

0000eeb0 <console_printf>:
 *                                  unlimited.  This return value is analogous
 *                                  to that of snprintf.
 */
int
console_printf(const char *fmt, ...)
{
    eeb0:	b40f      	push	{r0, r1, r2, r3}
    eeb2:	b500      	push	{lr}
    eeb4:	b083      	sub	sp, #12
    eeb6:	a904      	add	r1, sp, #16
    eeb8:	f851 0b04 	ldr.w	r0, [r1], #4
    va_list args;
    int num_chars;

    va_start(args, fmt);
    eebc:	9101      	str	r1, [sp, #4]
    num_chars = console_vprintf(fmt, args);
    eebe:	f7ff ffd9 	bl	ee74 <console_vprintf>
    va_end(args);

    return num_chars;
}
    eec2:	b003      	add	sp, #12
    eec4:	f85d eb04 	ldr.w	lr, [sp], #4
    eec8:	b004      	add	sp, #16
    eeca:	4770      	bx	lr

0000eecc <console_get_ticks>:

/* return value of CONSOLE_TICKS */
char console_get_ticks(void)
{
    return do_ticks;
}
    eecc:	4b01      	ldr	r3, [pc, #4]	; (eed4 <console_get_ticks+0x8>)
    eece:	7818      	ldrb	r0, [r3, #0]
    eed0:	4770      	bx	lr
    eed2:	bf00      	nop
    eed4:	2000012c 	.word	0x2000012c

0000eed8 <uart_blocking_tx>:
 *
 * @param dev		Uart device in question
 */
static inline void
uart_blocking_tx(struct uart_dev *dev, uint8_t byte)
{
    eed8:	b508      	push	{r3, lr}
    dev->ud_funcs.uf_blocking_tx(dev, byte);
    eeda:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    eedc:	4798      	blx	r3
}
    eede:	bd08      	pop	{r3, pc}

0000eee0 <uart_console_ring_add_char>:
}

static void
uart_console_ring_add_char(struct console_ring *cr, char ch)
{
    cr->buf[cr->head] = ch;
    eee0:	6842      	ldr	r2, [r0, #4]
    eee2:	7803      	ldrb	r3, [r0, #0]
    eee4:	54d1      	strb	r1, [r2, r3]
    cr->head = inc_and_wrap(cr->head, cr->size);
    eee6:	7803      	ldrb	r3, [r0, #0]
    eee8:	8842      	ldrh	r2, [r0, #2]
    return (i + 1) & (max - 1);
    eeea:	3301      	adds	r3, #1
    eeec:	3a01      	subs	r2, #1
    eeee:	4013      	ands	r3, r2
    cr->head = inc_and_wrap(cr->head, cr->size);
    eef0:	7003      	strb	r3, [r0, #0]
}
    eef2:	4770      	bx	lr

0000eef4 <uart_console_ring_pull_char>:

static uint8_t
uart_console_ring_pull_char(struct console_ring *cr)
{
    eef4:	4602      	mov	r2, r0
    uint8_t ch;

    ch = cr->buf[cr->tail];
    eef6:	6841      	ldr	r1, [r0, #4]
    eef8:	7843      	ldrb	r3, [r0, #1]
    eefa:	5cc8      	ldrb	r0, [r1, r3]
    cr->tail = inc_and_wrap(cr->tail, cr->size);
    eefc:	8851      	ldrh	r1, [r2, #2]
    return (i + 1) & (max - 1);
    eefe:	3301      	adds	r3, #1
    ef00:	3901      	subs	r1, #1
    ef02:	400b      	ands	r3, r1
    cr->tail = inc_and_wrap(cr->tail, cr->size);
    ef04:	7053      	strb	r3, [r2, #1]
    return ch;
}
    ef06:	4770      	bx	lr

0000ef08 <uart_console_ring_is_full>:

static bool
uart_console_ring_is_full(const struct console_ring *cr)
{
    return inc_and_wrap(cr->head, cr->size) == cr->tail;
    ef08:	7803      	ldrb	r3, [r0, #0]
    ef0a:	8842      	ldrh	r2, [r0, #2]
    return (i + 1) & (max - 1);
    ef0c:	3301      	adds	r3, #1
    ef0e:	3a01      	subs	r2, #1
    ef10:	4013      	ands	r3, r2
    return inc_and_wrap(cr->head, cr->size) == cr->tail;
    ef12:	7840      	ldrb	r0, [r0, #1]
}
    ef14:	4298      	cmp	r0, r3
    ef16:	bf14      	ite	ne
    ef18:	2000      	movne	r0, #0
    ef1a:	2001      	moveq	r0, #1
    ef1c:	4770      	bx	lr

0000ef1e <uart_console_ring_is_empty>:

static bool
uart_console_ring_is_empty(const struct console_ring *cr)
{
    return cr->head == cr->tail;
    ef1e:	7802      	ldrb	r2, [r0, #0]
    ef20:	7840      	ldrb	r0, [r0, #1]
}
    ef22:	4282      	cmp	r2, r0
    ef24:	bf14      	ite	ne
    ef26:	2000      	movne	r0, #0
    ef28:	2001      	moveq	r0, #1
    ef2a:	4770      	bx	lr

0000ef2c <uart_console_tx_flush>:
/*
 * Flush cnt characters from console output queue.
 */
static void
uart_console_tx_flush(int cnt)
{
    ef2c:	b538      	push	{r3, r4, r5, lr}
    ef2e:	4605      	mov	r5, r0
    int i;
    uint8_t byte;

    for (i = 0; i < cnt; i++) {
    ef30:	2400      	movs	r4, #0
    ef32:	42ac      	cmp	r4, r5
    ef34:	da0e      	bge.n	ef54 <uart_console_tx_flush+0x28>
        if (uart_console_ring_is_empty(&cr_tx)) {
    ef36:	4808      	ldr	r0, [pc, #32]	; (ef58 <uart_console_tx_flush+0x2c>)
    ef38:	f7ff fff1 	bl	ef1e <uart_console_ring_is_empty>
    ef3c:	b950      	cbnz	r0, ef54 <uart_console_tx_flush+0x28>
            break;
        }
        byte = uart_console_ring_pull_char(&cr_tx);
    ef3e:	4806      	ldr	r0, [pc, #24]	; (ef58 <uart_console_tx_flush+0x2c>)
    ef40:	f7ff ffd8 	bl	eef4 <uart_console_ring_pull_char>
        uart_blocking_tx(uart_dev, byte);
    ef44:	4b05      	ldr	r3, [pc, #20]	; (ef5c <uart_console_tx_flush+0x30>)
    ef46:	681b      	ldr	r3, [r3, #0]
    dev->ud_funcs.uf_blocking_tx(dev, byte);
    ef48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    ef4a:	4601      	mov	r1, r0
    ef4c:	4618      	mov	r0, r3
    ef4e:	4790      	blx	r2
    for (i = 0; i < cnt; i++) {
    ef50:	3401      	adds	r4, #1
    ef52:	e7ee      	b.n	ef32 <uart_console_tx_flush+0x6>
    }
}
    ef54:	bd38      	pop	{r3, r4, r5, pc}
    ef56:	bf00      	nop
    ef58:	200021e0 	.word	0x200021e0
    ef5c:	2000220c 	.word	0x2000220c

0000ef60 <uart_console_tx_char>:
 * Interrupts disabled when console_tx_char/console_rx_char are called.
 * Characters sent only in blocking mode.
 */
static int
uart_console_tx_char(void *arg)
{
    ef60:	b508      	push	{r3, lr}
    if (uart_console_ring_is_empty(&cr_tx)) {
    ef62:	4805      	ldr	r0, [pc, #20]	; (ef78 <uart_console_tx_char+0x18>)
    ef64:	f7ff ffdb 	bl	ef1e <uart_console_ring_is_empty>
    ef68:	b918      	cbnz	r0, ef72 <uart_console_tx_char+0x12>
        return -1;
    }
    return uart_console_ring_pull_char(&cr_tx);
    ef6a:	4803      	ldr	r0, [pc, #12]	; (ef78 <uart_console_tx_char+0x18>)
    ef6c:	f7ff ffc2 	bl	eef4 <uart_console_ring_pull_char>
}
    ef70:	bd08      	pop	{r3, pc}
        return -1;
    ef72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    ef76:	e7fb      	b.n	ef70 <uart_console_tx_char+0x10>
    ef78:	200021e0 	.word	0x200021e0

0000ef7c <uart_console_queue_char>:
    if (((uart_dev->ud_dev.od_flags & OS_DEV_F_STATUS_OPEN) == 0) ||
    ef7c:	7ec3      	ldrb	r3, [r0, #27]
    ef7e:	f003 0306 	and.w	r3, r3, #6
    ef82:	2b02      	cmp	r3, #2
    ef84:	d000      	beq.n	ef88 <uart_console_queue_char+0xc>
    ef86:	4770      	bx	lr
{
    ef88:	b570      	push	{r4, r5, r6, lr}
    ef8a:	460e      	mov	r6, r1
    ef8c:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
    ef8e:	f7fe fc33 	bl	d7f8 <os_arch_save_sr>
    ef92:	4605      	mov	r5, r0
    while (uart_console_ring_is_full(&cr_tx)) {
    ef94:	e002      	b.n	ef9c <uart_console_queue_char+0x20>
        OS_ENTER_CRITICAL(sr);
    ef96:	f7fe fc2f 	bl	d7f8 <os_arch_save_sr>
    ef9a:	4605      	mov	r5, r0
    while (uart_console_ring_is_full(&cr_tx)) {
    ef9c:	480c      	ldr	r0, [pc, #48]	; (efd0 <uart_console_queue_char+0x54>)
    ef9e:	f7ff ffb3 	bl	ef08 <uart_console_ring_is_full>
    efa2:	b168      	cbz	r0, efc0 <uart_console_queue_char+0x44>
    dev->ud_funcs.uf_start_tx(dev);
    efa4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    efa6:	4620      	mov	r0, r4
    efa8:	4798      	blx	r3
        OS_EXIT_CRITICAL(sr);
    efaa:	4628      	mov	r0, r5
    efac:	f7fe fc2a 	bl	d804 <os_arch_restore_sr>
        if (os_started()) {
    efb0:	f7fd fc14 	bl	c7dc <os_started>
    efb4:	2800      	cmp	r0, #0
    efb6:	d0ee      	beq.n	ef96 <uart_console_queue_char+0x1a>
            os_time_delay(1);
    efb8:	2001      	movs	r0, #1
    efba:	f7fe fb85 	bl	d6c8 <os_time_delay>
    efbe:	e7ea      	b.n	ef96 <uart_console_queue_char+0x1a>
    uart_console_ring_add_char(&cr_tx, ch);
    efc0:	4631      	mov	r1, r6
    efc2:	4803      	ldr	r0, [pc, #12]	; (efd0 <uart_console_queue_char+0x54>)
    efc4:	f7ff ff8c 	bl	eee0 <uart_console_ring_add_char>
    OS_EXIT_CRITICAL(sr);
    efc8:	4628      	mov	r0, r5
    efca:	f7fe fc1b 	bl	d804 <os_arch_restore_sr>
}
    efce:	bd70      	pop	{r4, r5, r6, pc}
    efd0:	200021e0 	.word	0x200021e0

0000efd4 <uart_console_rx_char>:
/*
 * Interrupts disabled when console_tx_char/console_rx_char are called.
 */
static int
uart_console_rx_char(void *arg, uint8_t byte)
{
    efd4:	b510      	push	{r4, lr}
    efd6:	460c      	mov	r4, r1
#if MYNEWT_VAL(CONSOLE_UART_RX_BUF_SIZE) > 0
    if (uart_console_ring_is_full(&cr_rx)) {
    efd8:	480c      	ldr	r0, [pc, #48]	; (f00c <uart_console_rx_char+0x38>)
    efda:	f7ff ff95 	bl	ef08 <uart_console_ring_is_full>
    efde:	b940      	cbnz	r0, eff2 <uart_console_rx_char+0x1e>
        uart_console_rx_stalled = true;
        return -1;
    }

    uart_console_ring_add_char(&cr_rx, byte);
    efe0:	4621      	mov	r1, r4
    efe2:	480a      	ldr	r0, [pc, #40]	; (f00c <uart_console_rx_char+0x38>)
    efe4:	f7ff ff7c 	bl	eee0 <uart_console_ring_add_char>

    if (!rx_ev.ev_queued) {
    efe8:	4b09      	ldr	r3, [pc, #36]	; (f010 <uart_console_rx_char+0x3c>)
    efea:	781b      	ldrb	r3, [r3, #0]
    efec:	b13b      	cbz	r3, effe <uart_console_rx_char+0x2a>
        os_eventq_put(os_eventq_dflt_get(), &rx_ev);
    }

    return 0;
    efee:	2000      	movs	r0, #0
#else
    return console_handle_char(byte);
#endif
}
    eff0:	bd10      	pop	{r4, pc}
        uart_console_rx_stalled = true;
    eff2:	4b08      	ldr	r3, [pc, #32]	; (f014 <uart_console_rx_char+0x40>)
    eff4:	2201      	movs	r2, #1
    eff6:	701a      	strb	r2, [r3, #0]
        return -1;
    eff8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    effc:	e7f8      	b.n	eff0 <uart_console_rx_char+0x1c>
        os_eventq_put(os_eventq_dflt_get(), &rx_ev);
    effe:	f7fd ff13 	bl	ce28 <os_eventq_dflt_get>
    f002:	4903      	ldr	r1, [pc, #12]	; (f010 <uart_console_rx_char+0x3c>)
    f004:	f7fd fe59 	bl	ccba <os_eventq_put>
    return 0;
    f008:	2000      	movs	r0, #0
    f00a:	e7f1      	b.n	eff0 <uart_console_rx_char+0x1c>
    f00c:	200021b8 	.word	0x200021b8
    f010:	20003b8c 	.word	0x20003b8c
    f014:	20002208 	.word	0x20002208

0000f018 <uart_console_rx_char_event>:

#if MYNEWT_VAL(CONSOLE_UART_RX_BUF_SIZE) > 0
static void
uart_console_rx_char_event(struct os_event *ev)
{
    f018:	b510      	push	{r4, lr}
    static int b = -1;
    int sr;
    int ret;

    /* We may have unhandled character - try it first */
    if (b >= 0) {
    f01a:	4b18      	ldr	r3, [pc, #96]	; (f07c <uart_console_rx_char_event+0x64>)
    f01c:	6818      	ldr	r0, [r3, #0]
    f01e:	2800      	cmp	r0, #0
    f020:	db0b      	blt.n	f03a <uart_console_rx_char_event+0x22>
        ret = console_handle_char(b);
    f022:	b2c0      	uxtb	r0, r0
    f024:	f7ff fe34 	bl	ec90 <console_handle_char>
        if (ret < 0) {
    f028:	2800      	cmp	r0, #0
    f02a:	da06      	bge.n	f03a <uart_console_rx_char_event+0x22>
    f02c:	e024      	b.n	f078 <uart_console_rx_char_event+0x60>
        if (uart_console_rx_stalled) {
            uart_console_rx_stalled = false;
            uart_start_rx(uart_dev);
        }

        ret = console_handle_char(b);
    f02e:	4b13      	ldr	r3, [pc, #76]	; (f07c <uart_console_rx_char_event+0x64>)
    f030:	7818      	ldrb	r0, [r3, #0]
    f032:	f7ff fe2d 	bl	ec90 <console_handle_char>
        if (ret < 0) {
    f036:	2800      	cmp	r0, #0
    f038:	db1e      	blt.n	f078 <uart_console_rx_char_event+0x60>
    while (!uart_console_ring_is_empty(&cr_rx)) {
    f03a:	4811      	ldr	r0, [pc, #68]	; (f080 <uart_console_rx_char_event+0x68>)
    f03c:	f7ff ff6f 	bl	ef1e <uart_console_ring_is_empty>
    f040:	b9b0      	cbnz	r0, f070 <uart_console_rx_char_event+0x58>
        OS_ENTER_CRITICAL(sr);
    f042:	f7fe fbd9 	bl	d7f8 <os_arch_save_sr>
    f046:	4604      	mov	r4, r0
        b = uart_console_ring_pull_char(&cr_rx);
    f048:	480d      	ldr	r0, [pc, #52]	; (f080 <uart_console_rx_char_event+0x68>)
    f04a:	f7ff ff53 	bl	eef4 <uart_console_ring_pull_char>
    f04e:	4b0b      	ldr	r3, [pc, #44]	; (f07c <uart_console_rx_char_event+0x64>)
    f050:	6018      	str	r0, [r3, #0]
        OS_EXIT_CRITICAL(sr);
    f052:	4620      	mov	r0, r4
    f054:	f7fe fbd6 	bl	d804 <os_arch_restore_sr>
        if (uart_console_rx_stalled) {
    f058:	4b0a      	ldr	r3, [pc, #40]	; (f084 <uart_console_rx_char_event+0x6c>)
    f05a:	781b      	ldrb	r3, [r3, #0]
    f05c:	2b00      	cmp	r3, #0
    f05e:	d0e6      	beq.n	f02e <uart_console_rx_char_event+0x16>
            uart_console_rx_stalled = false;
    f060:	4b08      	ldr	r3, [pc, #32]	; (f084 <uart_console_rx_char_event+0x6c>)
    f062:	2200      	movs	r2, #0
    f064:	701a      	strb	r2, [r3, #0]
            uart_start_rx(uart_dev);
    f066:	4b08      	ldr	r3, [pc, #32]	; (f088 <uart_console_rx_char_event+0x70>)
    f068:	6818      	ldr	r0, [r3, #0]
    dev->ud_funcs.uf_start_rx(dev);
    f06a:	6a83      	ldr	r3, [r0, #40]	; 0x28
    f06c:	4798      	blx	r3
    f06e:	e7de      	b.n	f02e <uart_console_rx_char_event+0x16>
            return;
        }
    }

    b = -1;
    f070:	4b02      	ldr	r3, [pc, #8]	; (f07c <uart_console_rx_char_event+0x64>)
    f072:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    f076:	601a      	str	r2, [r3, #0]
}
    f078:	bd10      	pop	{r4, pc}
    f07a:	bf00      	nop
    f07c:	20000130 	.word	0x20000130
    f080:	200021b8 	.word	0x200021b8
    f084:	20002208 	.word	0x20002208
    f088:	2000220c 	.word	0x2000220c

0000f08c <uart_console_blocking_mode>:
{
    f08c:	b510      	push	{r4, lr}
    OS_ENTER_CRITICAL(sr);
    f08e:	f7fe fbb3 	bl	d7f8 <os_arch_save_sr>
    f092:	4604      	mov	r4, r0
    if (write_char_cb) {
    f094:	4b06      	ldr	r3, [pc, #24]	; (f0b0 <uart_console_blocking_mode+0x24>)
    f096:	681b      	ldr	r3, [r3, #0]
    f098:	b12b      	cbz	r3, f0a6 <uart_console_blocking_mode+0x1a>
        write_char_cb = uart_blocking_tx;
    f09a:	4b05      	ldr	r3, [pc, #20]	; (f0b0 <uart_console_blocking_mode+0x24>)
    f09c:	4a05      	ldr	r2, [pc, #20]	; (f0b4 <uart_console_blocking_mode+0x28>)
    f09e:	601a      	str	r2, [r3, #0]
        uart_console_tx_flush(MYNEWT_VAL(CONSOLE_UART_TX_BUF_SIZE));
    f0a0:	2020      	movs	r0, #32
    f0a2:	f7ff ff43 	bl	ef2c <uart_console_tx_flush>
    OS_EXIT_CRITICAL(sr);
    f0a6:	4620      	mov	r0, r4
    f0a8:	f7fe fbac 	bl	d804 <os_arch_restore_sr>
}
    f0ac:	bd10      	pop	{r4, pc}
    f0ae:	bf00      	nop
    f0b0:	20002210 	.word	0x20002210
    f0b4:	0000eed9 	.word	0x0000eed9

0000f0b8 <console_out_nolock>:
{
    f0b8:	b538      	push	{r3, r4, r5, lr}
    f0ba:	4604      	mov	r4, r0
    if (!write_char_cb) {
    f0bc:	4b09      	ldr	r3, [pc, #36]	; (f0e4 <console_out_nolock+0x2c>)
    f0be:	681b      	ldr	r3, [r3, #0]
    f0c0:	b173      	cbz	r3, f0e0 <console_out_nolock+0x28>
    if ('\n' == c) {
    f0c2:	280a      	cmp	r0, #10
    f0c4:	d103      	bne.n	f0ce <console_out_nolock+0x16>
        write_char_cb(uart_dev, '\r');
    f0c6:	210d      	movs	r1, #13
    f0c8:	4a07      	ldr	r2, [pc, #28]	; (f0e8 <console_out_nolock+0x30>)
    f0ca:	6810      	ldr	r0, [r2, #0]
    f0cc:	4798      	blx	r3
    write_char_cb(uart_dev, c);
    f0ce:	4d06      	ldr	r5, [pc, #24]	; (f0e8 <console_out_nolock+0x30>)
    f0d0:	4b04      	ldr	r3, [pc, #16]	; (f0e4 <console_out_nolock+0x2c>)
    f0d2:	681b      	ldr	r3, [r3, #0]
    f0d4:	b2e1      	uxtb	r1, r4
    f0d6:	6828      	ldr	r0, [r5, #0]
    f0d8:	4798      	blx	r3
    uart_start_tx(uart_dev);
    f0da:	6828      	ldr	r0, [r5, #0]
    dev->ud_funcs.uf_start_tx(dev);
    f0dc:	6a43      	ldr	r3, [r0, #36]	; 0x24
    f0de:	4798      	blx	r3
}
    f0e0:	4620      	mov	r0, r4
    f0e2:	bd38      	pop	{r3, r4, r5, pc}
    f0e4:	20002210 	.word	0x20002210
    f0e8:	2000220c 	.word	0x2000220c

0000f0ec <uart_console_is_init>:
#endif

int
uart_console_is_init(void)
{
    return uart_dev != NULL;
    f0ec:	4b02      	ldr	r3, [pc, #8]	; (f0f8 <uart_console_is_init+0xc>)
    f0ee:	6818      	ldr	r0, [r3, #0]
}
    f0f0:	3000      	adds	r0, #0
    f0f2:	bf18      	it	ne
    f0f4:	2001      	movne	r0, #1
    f0f6:	4770      	bx	lr
    f0f8:	2000220c 	.word	0x2000220c

0000f0fc <uart_console_init>:
    return 0;
}

int
uart_console_init(void)
{
    f0fc:	b500      	push	{lr}
    f0fe:	b087      	sub	sp, #28
    struct uart_conf uc = {
    f100:	2300      	movs	r3, #0
    f102:	f8cd 3006 	str.w	r3, [sp, #6]
    f106:	f8cd 300e 	str.w	r3, [sp, #14]
    f10a:	f8cd 3012 	str.w	r3, [sp, #18]
    f10e:	f8ad 3016 	strh.w	r3, [sp, #22]
    f112:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
    f116:	9300      	str	r3, [sp, #0]
    f118:	2308      	movs	r3, #8
    f11a:	f88d 3004 	strb.w	r3, [sp, #4]
    f11e:	2301      	movs	r3, #1
    f120:	f88d 3005 	strb.w	r3, [sp, #5]
    f124:	4b13      	ldr	r3, [pc, #76]	; (f174 <uart_console_init+0x78>)
    f126:	9302      	str	r3, [sp, #8]
    f128:	4b13      	ldr	r3, [pc, #76]	; (f178 <uart_console_init+0x7c>)
    f12a:	9303      	str	r3, [sp, #12]
        .uc_flow_ctl = MYNEWT_VAL(CONSOLE_UART_FLOW_CONTROL),
        .uc_tx_char = uart_console_tx_char,
        .uc_rx_char = uart_console_rx_char,
    };

    cr_tx.size = MYNEWT_VAL(CONSOLE_UART_TX_BUF_SIZE);
    f12c:	4b13      	ldr	r3, [pc, #76]	; (f17c <uart_console_init+0x80>)
    f12e:	2220      	movs	r2, #32
    f130:	805a      	strh	r2, [r3, #2]
    cr_tx.buf = cr_tx_buf;
    f132:	4913      	ldr	r1, [pc, #76]	; (f180 <uart_console_init+0x84>)
    f134:	6059      	str	r1, [r3, #4]
    write_char_cb = uart_console_queue_char;
    f136:	4b13      	ldr	r3, [pc, #76]	; (f184 <uart_console_init+0x88>)
    f138:	4913      	ldr	r1, [pc, #76]	; (f188 <uart_console_init+0x8c>)
    f13a:	6019      	str	r1, [r3, #0]

#if MYNEWT_VAL(CONSOLE_UART_RX_BUF_SIZE) > 0
    cr_rx.size = MYNEWT_VAL(CONSOLE_UART_RX_BUF_SIZE);
    f13c:	4b13      	ldr	r3, [pc, #76]	; (f18c <uart_console_init+0x90>)
    f13e:	805a      	strh	r2, [r3, #2]
    cr_rx.buf = cr_rx_buf;
    f140:	4a13      	ldr	r2, [pc, #76]	; (f190 <uart_console_init+0x94>)
    f142:	605a      	str	r2, [r3, #4]

    rx_ev.ev_cb = uart_console_rx_char_event;
    f144:	4b13      	ldr	r3, [pc, #76]	; (f194 <uart_console_init+0x98>)
    f146:	4a14      	ldr	r2, [pc, #80]	; (f198 <uart_console_init+0x9c>)
    f148:	605a      	str	r2, [r3, #4]
#endif

    if (!uart_dev) {
    f14a:	4b14      	ldr	r3, [pc, #80]	; (f19c <uart_console_init+0xa0>)
    f14c:	681b      	ldr	r3, [r3, #0]
    f14e:	b11b      	cbz	r3, f158 <uart_console_init+0x5c>
          OS_TIMEOUT_NEVER, &uc);
        if (!uart_dev) {
            return -1;
        }
    }
    return 0;
    f150:	2000      	movs	r0, #0
}
    f152:	b007      	add	sp, #28
    f154:	f85d fb04 	ldr.w	pc, [sp], #4
        uart_dev = (struct uart_dev *)os_dev_open(MYNEWT_VAL(CONSOLE_UART_DEV),
    f158:	466a      	mov	r2, sp
    f15a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    f15e:	4810      	ldr	r0, [pc, #64]	; (f1a0 <uart_console_init+0xa4>)
    f160:	f7fd fd74 	bl	cc4c <os_dev_open>
    f164:	4b0d      	ldr	r3, [pc, #52]	; (f19c <uart_console_init+0xa0>)
    f166:	6018      	str	r0, [r3, #0]
        if (!uart_dev) {
    f168:	b108      	cbz	r0, f16e <uart_console_init+0x72>
    return 0;
    f16a:	2000      	movs	r0, #0
    f16c:	e7f1      	b.n	f152 <uart_console_init+0x56>
            return -1;
    f16e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    f172:	e7ee      	b.n	f152 <uart_console_init+0x56>
    f174:	0000ef61 	.word	0x0000ef61
    f178:	0000efd5 	.word	0x0000efd5
    f17c:	200021e0 	.word	0x200021e0
    f180:	200021e8 	.word	0x200021e8
    f184:	20002210 	.word	0x20002210
    f188:	0000ef7d 	.word	0x0000ef7d
    f18c:	200021b8 	.word	0x200021b8
    f190:	200021c0 	.word	0x200021c0
    f194:	20003b8c 	.word	0x20003b8c
    f198:	0000f019 	.word	0x0000f019
    f19c:	2000220c 	.word	0x2000220c
    f1a0:	0002ae9c 	.word	0x0002ae9c

0000f1a4 <flash_area_find_idx>:
const struct flash_area *flash_map;
int flash_map_entries;

static int
flash_area_find_idx(uint8_t id)
{
    f1a4:	b410      	push	{r4}
    int i;

    if (flash_map == NULL) {
    f1a6:	4b0c      	ldr	r3, [pc, #48]	; (f1d8 <flash_area_find_idx+0x34>)
    f1a8:	681c      	ldr	r4, [r3, #0]
    f1aa:	b18c      	cbz	r4, f1d0 <flash_area_find_idx+0x2c>
        return -1;
    }

    for (i = 0; i < flash_map_entries; i++) {
    f1ac:	2300      	movs	r3, #0
    f1ae:	4a0b      	ldr	r2, [pc, #44]	; (f1dc <flash_area_find_idx+0x38>)
    f1b0:	6812      	ldr	r2, [r2, #0]
    f1b2:	429a      	cmp	r2, r3
    f1b4:	dd07      	ble.n	f1c6 <flash_area_find_idx+0x22>
        if (flash_map[i].fa_id == id) {
    f1b6:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    f1ba:	008a      	lsls	r2, r1, #2
    f1bc:	5ca2      	ldrb	r2, [r4, r2]
    f1be:	4282      	cmp	r2, r0
    f1c0:	d003      	beq.n	f1ca <flash_area_find_idx+0x26>
    for (i = 0; i < flash_map_entries; i++) {
    f1c2:	3301      	adds	r3, #1
    f1c4:	e7f3      	b.n	f1ae <flash_area_find_idx+0xa>
            return i;
        }
    }

    return -1;
    f1c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
    f1ca:	4618      	mov	r0, r3
    f1cc:	bc10      	pop	{r4}
    f1ce:	4770      	bx	lr
        return -1;
    f1d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    f1d4:	e7f9      	b.n	f1ca <flash_area_find_idx+0x26>
    f1d6:	bf00      	nop
    f1d8:	20003b9c 	.word	0x20003b9c
    f1dc:	20003ba0 	.word	0x20003ba0

0000f1e0 <flash_map_area_overlaps>:
    const struct flash_area *area2;
    uint32_t end1;
    uint32_t end2;
    int i;

    for (i = 0; i < flash_map_entries; i++) {
    f1e0:	2300      	movs	r3, #0
    f1e2:	4a13      	ldr	r2, [pc, #76]	; (f230 <flash_map_area_overlaps+0x50>)
    f1e4:	6812      	ldr	r2, [r2, #0]
    f1e6:	429a      	cmp	r2, r3
    f1e8:	dd1f      	ble.n	f22a <flash_map_area_overlaps+0x4a>
{
    f1ea:	b430      	push	{r4, r5}
    f1ec:	e004      	b.n	f1f8 <flash_map_area_overlaps+0x18>
    for (i = 0; i < flash_map_entries; i++) {
    f1ee:	3301      	adds	r3, #1
    f1f0:	4a0f      	ldr	r2, [pc, #60]	; (f230 <flash_map_area_overlaps+0x50>)
    f1f2:	6812      	ldr	r2, [r2, #0]
    f1f4:	429a      	cmp	r2, r3
    f1f6:	dd15      	ble.n	f224 <flash_map_area_overlaps+0x44>
        area2 = &flash_map[i];
    f1f8:	4a0e      	ldr	r2, [pc, #56]	; (f234 <flash_map_area_overlaps+0x54>)
    f1fa:	6812      	ldr	r2, [r2, #0]
    f1fc:	eb03 0443 	add.w	r4, r3, r3, lsl #1
    f200:	00a1      	lsls	r1, r4, #2
    f202:	440a      	add	r2, r1

        if (area1->fa_device_id == area2->fa_device_id) {
    f204:	7844      	ldrb	r4, [r0, #1]
    f206:	7851      	ldrb	r1, [r2, #1]
    f208:	428c      	cmp	r4, r1
    f20a:	d1f0      	bne.n	f1ee <flash_map_area_overlaps+0xe>
            end1 = area1->fa_off + area1->fa_size;
    f20c:	6845      	ldr	r5, [r0, #4]
    f20e:	6881      	ldr	r1, [r0, #8]
    f210:	4429      	add	r1, r5
            end2 = area2->fa_off + area2->fa_size;
    f212:	6854      	ldr	r4, [r2, #4]
    f214:	6892      	ldr	r2, [r2, #8]
    f216:	4422      	add	r2, r4

            if (end1 > area2->fa_off && area1->fa_off < end2) {
    f218:	428c      	cmp	r4, r1
    f21a:	d2e8      	bcs.n	f1ee <flash_map_area_overlaps+0xe>
    f21c:	4295      	cmp	r5, r2
    f21e:	d2e6      	bcs.n	f1ee <flash_map_area_overlaps+0xe>
                return true;
    f220:	2001      	movs	r0, #1
    f222:	e000      	b.n	f226 <flash_map_area_overlaps+0x46>
            }
        }
    }

    return false;
    f224:	2000      	movs	r0, #0
}
    f226:	bc30      	pop	{r4, r5}
    f228:	4770      	bx	lr
    return false;
    f22a:	2000      	movs	r0, #0
}
    f22c:	4770      	bx	lr
    f22e:	bf00      	nop
    f230:	20003ba0 	.word	0x20003ba0
    f234:	20003b9c 	.word	0x20003b9c

0000f238 <flash_map_add_new_dflt_areas>:
 * Adds areas from the hardcoded flash map that aren't present in, and don't
 * overlap with, the manufacturing flash map.
 */
static void
flash_map_add_new_dflt_areas(void)
{
    f238:	b570      	push	{r4, r5, r6, lr}

    const struct flash_area *dflt_area;
    struct flash_area *dst_area;
    int i;
    
    for (i = 0; i < num_dflt_entries; i++) {
    f23a:	2400      	movs	r4, #0
    f23c:	e00a      	b.n	f254 <flash_map_add_new_dflt_areas+0x1c>
            /* Default flash map contains a new entry. */
            if (flash_map_entries >= MYNEWT_VAL(FLASH_MAP_MAX_AREAS)) {
                DFLT_LOG_DEBUG("failed to add default flash area: "
                               "no room: id=%d",
                               dflt_area->fa_id);
                DEBUG_PANIC();
    f23e:	f7fc ffd3 	bl	c1e8 <hal_debugger_connected>
    f242:	b100      	cbz	r0, f246 <flash_map_add_new_dflt_areas+0xe>
    f244:	be01      	bkpt	0x0001
    f246:	2300      	movs	r3, #0
    f248:	461a      	mov	r2, r3
    f24a:	4619      	mov	r1, r3
    f24c:	4618      	mov	r0, r3
    f24e:	f7fd fa05 	bl	c65c <__assert_func>
    for (i = 0; i < num_dflt_entries; i++) {
    f252:	3401      	adds	r4, #1
    f254:	2c05      	cmp	r4, #5
    f256:	dc26      	bgt.n	f2a6 <flash_map_add_new_dflt_areas+0x6e>
        dflt_area = &sysflash_map_dflt[i];
    f258:	0063      	lsls	r3, r4, #1
    f25a:	4423      	add	r3, r4
    f25c:	009a      	lsls	r2, r3, #2
    f25e:	4b12      	ldr	r3, [pc, #72]	; (f2a8 <flash_map_add_new_dflt_areas+0x70>)
    f260:	18d6      	adds	r6, r2, r3
        if (flash_area_find_idx(dflt_area->fa_id) == -1) {
    f262:	5c98      	ldrb	r0, [r3, r2]
    f264:	f7ff ff9e 	bl	f1a4 <flash_area_find_idx>
    f268:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    f26c:	d1f1      	bne.n	f252 <flash_map_add_new_dflt_areas+0x1a>
            if (flash_map_entries >= MYNEWT_VAL(FLASH_MAP_MAX_AREAS)) {
    f26e:	4b0f      	ldr	r3, [pc, #60]	; (f2ac <flash_map_add_new_dflt_areas+0x74>)
    f270:	681d      	ldr	r5, [r3, #0]
    f272:	2d09      	cmp	r5, #9
    f274:	dce3      	bgt.n	f23e <flash_map_add_new_dflt_areas+0x6>
                return;
            } 

            /* Add the default entry if it doesn't cause any overlaps. */
            if (flash_map_area_overlaps(dflt_area)) {
    f276:	4630      	mov	r0, r6
    f278:	f7ff ffb2 	bl	f1e0 <flash_map_area_overlaps>
    f27c:	2800      	cmp	r0, #0
    f27e:	d1e8      	bne.n	f252 <flash_map_add_new_dflt_areas+0x1a>
                DFLT_LOG_DEBUG("failed to add default flash area: "
                               "overlap: id=%d",
                               dflt_area->fa_id);
            } else {
                /* Cast away const. */
                dst_area = (struct flash_area *) &flash_map[flash_map_entries];
    f280:	4b0b      	ldr	r3, [pc, #44]	; (f2b0 <flash_map_add_new_dflt_areas+0x78>)
    f282:	681b      	ldr	r3, [r3, #0]
    f284:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    f288:	00aa      	lsls	r2, r5, #2
    f28a:	4413      	add	r3, r2

                *dst_area = *dflt_area;
    f28c:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    f290:	0091      	lsls	r1, r2, #2
    f292:	4a05      	ldr	r2, [pc, #20]	; (f2a8 <flash_map_add_new_dflt_areas+0x70>)
    f294:	440a      	add	r2, r1
    f296:	ca07      	ldmia	r2, {r0, r1, r2}
    f298:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                flash_map_entries++;
    f29c:	4a03      	ldr	r2, [pc, #12]	; (f2ac <flash_map_add_new_dflt_areas+0x74>)
    f29e:	6813      	ldr	r3, [r2, #0]
    f2a0:	3301      	adds	r3, #1
    f2a2:	6013      	str	r3, [r2, #0]
    f2a4:	e7d5      	b.n	f252 <flash_map_add_new_dflt_areas+0x1a>
            }
        }
    }
}
    f2a6:	bd70      	pop	{r4, r5, r6, pc}
    f2a8:	0002babc 	.word	0x0002babc
    f2ac:	20003ba0 	.word	0x20003ba0
    f2b0:	20003b9c 	.word	0x20003b9c

0000f2b4 <flash_map_read_mfg>:
{
    f2b4:	b570      	push	{r4, r5, r6, lr}
    f2b6:	b086      	sub	sp, #24
    f2b8:	4605      	mov	r5, r0
    f2ba:	460e      	mov	r6, r1
    f2bc:	4614      	mov	r4, r2
    *out_num_areas = 0;
    f2be:	2300      	movs	r3, #0
    f2c0:	6013      	str	r3, [r2, #0]
    mfg_init();
    f2c2:	f000 fde7 	bl	fe94 <mfg_init>
    mfg_open(&reader);
    f2c6:	a801      	add	r0, sp, #4
    f2c8:	f000 fe04 	bl	fed4 <mfg_open>
        if (*out_num_areas >= max_areas) {
    f2cc:	6823      	ldr	r3, [r4, #0]
    f2ce:	42ab      	cmp	r3, r5
    f2d0:	da29      	bge.n	f326 <flash_map_read_mfg+0x72>
        rc = mfg_seek_next_with_type(&reader, MFG_META_TLV_TYPE_FLASH_AREA);
    f2d2:	2102      	movs	r1, #2
    f2d4:	a801      	add	r0, sp, #4
    f2d6:	f000 fdc6 	bl	fe66 <mfg_seek_next_with_type>
    f2da:	4603      	mov	r3, r0
        switch (rc) {
    f2dc:	f110 0f0f 	cmn.w	r0, #15
    f2e0:	d003      	beq.n	f2ea <flash_map_read_mfg+0x36>
    f2e2:	b120      	cbz	r0, f2ee <flash_map_read_mfg+0x3a>
}
    f2e4:	4618      	mov	r0, r3
    f2e6:	b006      	add	sp, #24
    f2e8:	bd70      	pop	{r4, r5, r6, pc}
            return 0;
    f2ea:	2300      	movs	r3, #0
    f2ec:	e7fa      	b.n	f2e4 <flash_map_read_mfg+0x30>
        rc = mfg_read_tlv_flash_area(&reader, &meta_flash_area);
    f2ee:	a903      	add	r1, sp, #12
    f2f0:	a801      	add	r0, sp, #4
    f2f2:	f000 fdc5 	bl	fe80 <mfg_read_tlv_flash_area>
        if (rc != 0) {
    f2f6:	4603      	mov	r3, r0
    f2f8:	2800      	cmp	r0, #0
    f2fa:	d1f3      	bne.n	f2e4 <flash_map_read_mfg+0x30>
        fap = out_areas + *out_num_areas;
    f2fc:	6823      	ldr	r3, [r4, #0]
    f2fe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    f302:	009a      	lsls	r2, r3, #2
    f304:	18b3      	adds	r3, r6, r2
        fap->fa_id = meta_flash_area.area_id;
    f306:	f89d 100c 	ldrb.w	r1, [sp, #12]
    f30a:	54b1      	strb	r1, [r6, r2]
        fap->fa_device_id = meta_flash_area.device_id;
    f30c:	f89d 200d 	ldrb.w	r2, [sp, #13]
    f310:	705a      	strb	r2, [r3, #1]
        fap->fa_off = meta_flash_area.offset;
    f312:	f8dd 200e 	ldr.w	r2, [sp, #14]
    f316:	605a      	str	r2, [r3, #4]
        fap->fa_size = meta_flash_area.size;
    f318:	f8dd 2012 	ldr.w	r2, [sp, #18]
    f31c:	609a      	str	r2, [r3, #8]
        (*out_num_areas)++;
    f31e:	6823      	ldr	r3, [r4, #0]
    f320:	3301      	adds	r3, #1
    f322:	6023      	str	r3, [r4, #0]
        if (*out_num_areas >= max_areas) {
    f324:	e7d2      	b.n	f2cc <flash_map_read_mfg+0x18>
            return -1;
    f326:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    f32a:	e7db      	b.n	f2e4 <flash_map_read_mfg+0x30>

0000f32c <flash_area_open>:
{
    f32c:	b538      	push	{r3, r4, r5, lr}
    if (flash_map == NULL) {
    f32e:	4b0b      	ldr	r3, [pc, #44]	; (f35c <flash_area_open+0x30>)
    f330:	681c      	ldr	r4, [r3, #0]
    f332:	b164      	cbz	r4, f34e <flash_area_open+0x22>
    f334:	460d      	mov	r5, r1
    idx = flash_area_find_idx(id);
    f336:	f7ff ff35 	bl	f1a4 <flash_area_find_idx>
    if (idx == -1) {
    f33a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    f33e:	d009      	beq.n	f354 <flash_area_open+0x28>
    *fap = &flash_map[idx];
    f340:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    f344:	0083      	lsls	r3, r0, #2
    f346:	441c      	add	r4, r3
    f348:	602c      	str	r4, [r5, #0]
    return 0;
    f34a:	2000      	movs	r0, #0
}
    f34c:	bd38      	pop	{r3, r4, r5, pc}
        return SYS_EACCES;
    f34e:	f06f 0006 	mvn.w	r0, #6
    f352:	e7fb      	b.n	f34c <flash_area_open+0x20>
        return SYS_ENOENT;
    f354:	f06f 0003 	mvn.w	r0, #3
    f358:	e7f8      	b.n	f34c <flash_area_open+0x20>
    f35a:	bf00      	nop
    f35c:	20003b9c 	.word	0x20003b9c

0000f360 <flash_area_read>:
{
    f360:	b538      	push	{r3, r4, r5, lr}
    if (off > fa->fa_size || off + len > fa->fa_size) {
    f362:	6884      	ldr	r4, [r0, #8]
    f364:	428c      	cmp	r4, r1
    f366:	d308      	bcc.n	f37a <flash_area_read+0x1a>
    f368:	18cd      	adds	r5, r1, r3
    f36a:	42ac      	cmp	r4, r5
    f36c:	d308      	bcc.n	f380 <flash_area_read+0x20>
    return hal_flash_read(fa->fa_device_id, fa->fa_off + off, dst, len);
    f36e:	6844      	ldr	r4, [r0, #4]
    f370:	4421      	add	r1, r4
    f372:	7840      	ldrb	r0, [r0, #1]
    f374:	f019 fc2f 	bl	28bd6 <hal_flash_read>
}
    f378:	bd38      	pop	{r3, r4, r5, pc}
        return -1;
    f37a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    f37e:	e7fb      	b.n	f378 <flash_area_read+0x18>
    f380:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    f384:	e7f8      	b.n	f378 <flash_area_read+0x18>
	...

0000f388 <flash_map_init>:

void
flash_map_init(void)
{
    f388:	b510      	push	{r4, lr}
    f38a:	b084      	sub	sp, #16

    int num_areas;
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
    f38c:	4b1a      	ldr	r3, [pc, #104]	; (f3f8 <flash_map_init+0x70>)
    f38e:	781b      	ldrb	r3, [r3, #0]
    f390:	b193      	cbz	r3, f3b8 <flash_map_init+0x30>

    rc = hal_flash_init();
    f392:	f019 fc0c 	bl	28bae <hal_flash_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
    f396:	b9c8      	cbnz	r0, f3cc <flash_map_init+0x44>
     *    In particular, a FLASH_AREA_BOOTLOADER entry is required for the boot
     *    MMR, as well as an entry for each extended MMR.
     * 2. If we fail to read the flash map from the MMRs, the system continues
     *    to use the default flash map.
     */
    flash_map = sysflash_map_dflt;
    f398:	4b18      	ldr	r3, [pc, #96]	; (f3fc <flash_map_init+0x74>)
    f39a:	4a19      	ldr	r2, [pc, #100]	; (f400 <flash_map_init+0x78>)
    f39c:	601a      	str	r2, [r3, #0]
    flash_map_entries = sizeof sysflash_map_dflt / sizeof sysflash_map_dflt[0];
    f39e:	4b19      	ldr	r3, [pc, #100]	; (f404 <flash_map_init+0x7c>)
    f3a0:	2206      	movs	r2, #6
    f3a2:	601a      	str	r2, [r3, #0]

    /* Attempt to read the flash map from the manufacturing meta regions.  On
     * success, use the new flash map instead of the default hardcoded one.
     */
    rc = flash_map_read_mfg(sizeof mfg_areas / sizeof mfg_areas[0],
    f3a4:	aa03      	add	r2, sp, #12
    f3a6:	4918      	ldr	r1, [pc, #96]	; (f408 <flash_map_init+0x80>)
    f3a8:	200a      	movs	r0, #10
    f3aa:	f7ff ff83 	bl	f2b4 <flash_map_read_mfg>
                            mfg_areas, &num_areas);
    if (rc != 0 || num_areas == 0) {
    f3ae:	b908      	cbnz	r0, f3b4 <flash_map_init+0x2c>
    f3b0:	9b03      	ldr	r3, [sp, #12]
    f3b2:	b9c3      	cbnz	r3, f3e6 <flash_map_init+0x5e>
    /* The hardcoded flash map may contain new areas that aren't present in the
     * manufacturing flash map.  Try including them if they don't overlap with
     * any mfg areas.
     */
    flash_map_add_new_dflt_areas();
}
    f3b4:	b004      	add	sp, #16
    f3b6:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
    f3b8:	f7fc ff16 	bl	c1e8 <hal_debugger_connected>
    f3bc:	b100      	cbz	r0, f3c0 <flash_map_init+0x38>
    f3be:	be01      	bkpt	0x0001
    f3c0:	2300      	movs	r3, #0
    f3c2:	461a      	mov	r2, r3
    f3c4:	4619      	mov	r1, r3
    f3c6:	4618      	mov	r0, r3
    f3c8:	f7fd f948 	bl	c65c <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
    f3cc:	f7fc ff0c 	bl	c1e8 <hal_debugger_connected>
    f3d0:	b100      	cbz	r0, f3d4 <flash_map_init+0x4c>
    f3d2:	be01      	bkpt	0x0001
    f3d4:	2000      	movs	r0, #0
    f3d6:	9000      	str	r0, [sp, #0]
    f3d8:	4b0c      	ldr	r3, [pc, #48]	; (f40c <flash_map_init+0x84>)
    f3da:	681c      	ldr	r4, [r3, #0]
    f3dc:	4603      	mov	r3, r0
    f3de:	4602      	mov	r2, r0
    f3e0:	4601      	mov	r1, r0
    f3e2:	47a0      	blx	r4
    f3e4:	e7d8      	b.n	f398 <flash_map_init+0x10>
    flash_map = mfg_areas;
    f3e6:	4a05      	ldr	r2, [pc, #20]	; (f3fc <flash_map_init+0x74>)
    f3e8:	4907      	ldr	r1, [pc, #28]	; (f408 <flash_map_init+0x80>)
    f3ea:	6011      	str	r1, [r2, #0]
    flash_map_entries = num_areas;
    f3ec:	4a05      	ldr	r2, [pc, #20]	; (f404 <flash_map_init+0x7c>)
    f3ee:	6013      	str	r3, [r2, #0]
    flash_map_add_new_dflt_areas();
    f3f0:	f7ff ff22 	bl	f238 <flash_map_add_new_dflt_areas>
    f3f4:	e7de      	b.n	f3b4 <flash_map_init+0x2c>
    f3f6:	bf00      	nop
    f3f8:	20003bd8 	.word	0x20003bd8
    f3fc:	20003b9c 	.word	0x20003b9c
    f400:	0002babc 	.word	0x0002babc
    f404:	20003ba0 	.word	0x20003ba0
    f408:	20002214 	.word	0x20002214
    f40c:	20000144 	.word	0x20000144

0000f410 <log_registered>:
static int
log_registered(struct log *log)
{
    struct log *cur;

    STAILQ_FOREACH(cur, &g_log_list, l_next) {
    f410:	4b05      	ldr	r3, [pc, #20]	; (f428 <log_registered+0x18>)
    f412:	681b      	ldr	r3, [r3, #0]
    f414:	b11b      	cbz	r3, f41e <log_registered+0xe>
        if (cur == log) {
    f416:	4283      	cmp	r3, r0
    f418:	d003      	beq.n	f422 <log_registered+0x12>
    STAILQ_FOREACH(cur, &g_log_list, l_next) {
    f41a:	68db      	ldr	r3, [r3, #12]
    f41c:	e7fa      	b.n	f414 <log_registered+0x4>
            return 1;
        }
    }

    return 0;
    f41e:	2000      	movs	r0, #0
    f420:	4770      	bx	lr
            return 1;
    f422:	2001      	movs	r0, #1
}
    f424:	4770      	bx	lr
    f426:	bf00      	nop
    f428:	20000134 	.word	0x20000134

0000f42c <log_chk_type>:
{
    int rc;

    rc = OS_OK;

    switch(etype) {
    f42c:	2802      	cmp	r0, #2
    f42e:	d801      	bhi.n	f434 <log_chk_type+0x8>
    rc = OS_OK;
    f430:	2000      	movs	r0, #0
    f432:	4770      	bx	lr
        case LOG_ETYPE_STRING:
        case LOG_ETYPE_BINARY:
        case LOG_ETYPE_CBOR:
            break;
        default:
            rc = OS_ERROR;
    f434:	200c      	movs	r0, #12
            break;
    }

    return rc;
}
    f436:	4770      	bx	lr

0000f438 <log_chk_max_entry_len>:
log_chk_max_entry_len(struct log *log, uint16_t len)
{
    int rc;

    rc = OS_OK;
    if (log->l_max_entry_len != 0) {
    f438:	8b43      	ldrh	r3, [r0, #26]
    f43a:	b12b      	cbz	r3, f448 <log_chk_max_entry_len+0x10>
        if (len > log->l_max_entry_len) {
    f43c:	428b      	cmp	r3, r1
    f43e:	d201      	bcs.n	f444 <log_chk_max_entry_len+0xc>
            LOG_STATS_INC(log, too_long);
            rc = OS_ENOMEM;
    f440:	2001      	movs	r0, #1
        }
    }

    return rc;
}
    f442:	4770      	bx	lr
    rc = OS_OK;
    f444:	2000      	movs	r0, #0
    f446:	4770      	bx	lr
    f448:	2000      	movs	r0, #0
    f44a:	4770      	bx	lr

0000f44c <log_call_append_cb>:
/**
 * Calls the given log's append callback, if it has one.
 */
static void
log_call_append_cb(struct log *log, uint32_t idx)
{
    f44c:	b500      	push	{lr}
    f44e:	b083      	sub	sp, #12
     * preventing a TOCTTOU race.
     * (This all assumes that function pointer reads and writes are atomic.)
     */
    log_append_cb * volatile cb;

    cb = log->l_append_cb;
    f450:	6903      	ldr	r3, [r0, #16]
    f452:	9301      	str	r3, [sp, #4]
    if (cb != NULL) {
    f454:	9b01      	ldr	r3, [sp, #4]
    f456:	b10b      	cbz	r3, f45c <log_call_append_cb+0x10>
        cb(log, idx);
    f458:	9b01      	ldr	r3, [sp, #4]
    f45a:	4798      	blx	r3
    }
}
    f45c:	b003      	add	sp, #12
    f45e:	f85d fb04 	ldr.w	pc, [sp], #4
    f462:	0000      	movs	r0, r0
    f464:	0000      	movs	r0, r0
	...

0000f468 <log_append_prepare>:
{
    f468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f46c:	b087      	sub	sp, #28
    f46e:	4606      	mov	r6, r0
    f470:	4689      	mov	r9, r1
    f472:	4615      	mov	r5, r2
    f474:	469a      	mov	sl, r3
    f476:	9c10      	ldr	r4, [sp, #64]	; 0x40
    rc = log_chk_type(etype);
    f478:	4618      	mov	r0, r3
    f47a:	f7ff ffd7 	bl	f42c <log_chk_type>
    assert(rc == OS_OK);
    f47e:	2800      	cmp	r0, #0
    f480:	d140      	bne.n	f504 <log_append_prepare+0x9c>
    if (log->l_name == NULL || log->l_log == NULL) {
    f482:	6833      	ldr	r3, [r6, #0]
    f484:	2b00      	cmp	r3, #0
    f486:	d06f      	beq.n	f568 <log_append_prepare+0x100>
    f488:	6873      	ldr	r3, [r6, #4]
    f48a:	2b00      	cmp	r3, #0
    f48c:	d06f      	beq.n	f56e <log_append_prepare+0x106>
    if (level > LOG_LEVEL_MAX) {
    f48e:	2d0f      	cmp	r5, #15
    f490:	d900      	bls.n	f494 <log_append_prepare+0x2c>
        level = LOG_LEVEL_MAX;
    f492:	250f      	movs	r5, #15
    if (log->l_log->log_type == LOG_TYPE_STORAGE) {
    f494:	681b      	ldr	r3, [r3, #0]
    f496:	2b02      	cmp	r3, #2
    f498:	d03e      	beq.n	f518 <log_append_prepare+0xb0>
    if (level < log->l_level) {
    f49a:	7e33      	ldrb	r3, [r6, #24]
    f49c:	42ab      	cmp	r3, r5
    f49e:	d869      	bhi.n	f574 <log_append_prepare+0x10c>
    if (level < log_level_get(module)) {
    f4a0:	4648      	mov	r0, r9
    f4a2:	f000 fa39 	bl	f918 <log_level_get>
    f4a6:	42a8      	cmp	r0, r5
    f4a8:	d867      	bhi.n	f57a <log_append_prepare+0x112>
    OS_ENTER_CRITICAL(sr);
    f4aa:	f7fe f9a5 	bl	d7f8 <os_arch_save_sr>
    idx = g_log_info.li_next_index++;
    f4ae:	4b36      	ldr	r3, [pc, #216]	; (f588 <log_append_prepare+0x120>)
    f4b0:	f8d3 8000 	ldr.w	r8, [r3]
    f4b4:	f108 0201 	add.w	r2, r8, #1
    f4b8:	601a      	str	r2, [r3, #0]
    OS_EXIT_CRITICAL(sr);
    f4ba:	f7fe f9a3 	bl	d804 <os_arch_restore_sr>
    rc = os_gettimeofday(&tv, NULL);
    f4be:	2100      	movs	r1, #0
    f4c0:	a802      	add	r0, sp, #8
    f4c2:	f7fe f915 	bl	d6f0 <os_gettimeofday>
    if (rc || tv.tv_sec < UTC01_01_2016) {
    f4c6:	4683      	mov	fp, r0
    f4c8:	b948      	cbnz	r0, f4de <log_append_prepare+0x76>
    f4ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    f4ce:	e9cd 0100 	strd	r0, r1, [sp]
    f4d2:	a32b      	add	r3, pc, #172	; (adr r3, f580 <log_append_prepare+0x118>)
    f4d4:	e9d3 2300 	ldrd	r2, r3, [r3]
    f4d8:	4282      	cmp	r2, r0
    f4da:	418b      	sbcs	r3, r1
    f4dc:	db20      	blt.n	f520 <log_append_prepare+0xb8>
        ue->ue_ts = os_get_uptime_usec();
    f4de:	f7fe f941 	bl	d764 <os_get_uptime_usec>
    f4e2:	6020      	str	r0, [r4, #0]
    f4e4:	6061      	str	r1, [r4, #4]
    ue->ue_level = level;
    f4e6:	7365      	strb	r5, [r4, #13]
    ue->ue_module = module;
    f4e8:	f884 900c 	strb.w	r9, [r4, #12]
    ue->ue_index = idx;
    f4ec:	f8c4 8008 	str.w	r8, [r4, #8]
    ue->ue_etype = etype;
    f4f0:	7ba3      	ldrb	r3, [r4, #14]
    f4f2:	f36a 0303 	bfi	r3, sl, #0, #4
    ue->ue_flags = 0;
    f4f6:	f36f 1307 	bfc	r3, #4, #4
    f4fa:	73a3      	strb	r3, [r4, #14]
}
    f4fc:	4658      	mov	r0, fp
    f4fe:	b007      	add	sp, #28
    f500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    assert(rc == OS_OK);
    f504:	f7fc fe70 	bl	c1e8 <hal_debugger_connected>
    f508:	b100      	cbz	r0, f50c <log_append_prepare+0xa4>
    f50a:	be01      	bkpt	0x0001
    f50c:	2300      	movs	r3, #0
    f50e:	461a      	mov	r2, r3
    f510:	4619      	mov	r1, r3
    f512:	4618      	mov	r0, r3
    f514:	f7fd f8a2 	bl	c65c <__assert_func>
        log_written = 1;
    f518:	4b1c      	ldr	r3, [pc, #112]	; (f58c <log_append_prepare+0x124>)
    f51a:	2201      	movs	r2, #1
    f51c:	701a      	strb	r2, [r3, #0]
    f51e:	e7bc      	b.n	f49a <log_append_prepare+0x32>
        ue->ue_ts = tv.tv_sec * 1000000 + tv.tv_usec;
    f520:	e9dd 6700 	ldrd	r6, r7, [sp]
    f524:	0179      	lsls	r1, r7, #5
    f526:	0172      	lsls	r2, r6, #5
    f528:	ea41 63d6 	orr.w	r3, r1, r6, lsr #27
    f52c:	1b96      	subs	r6, r2, r6
    f52e:	eb63 0707 	sbc.w	r7, r3, r7
    f532:	0279      	lsls	r1, r7, #9
    f534:	ea41 51d6 	orr.w	r1, r1, r6, lsr #23
    f538:	0270      	lsls	r0, r6, #9
    f53a:	e9dd 2300 	ldrd	r2, r3, [sp]
    f53e:	1812      	adds	r2, r2, r0
    f540:	414b      	adcs	r3, r1
    f542:	461f      	mov	r7, r3
    f544:	0199      	lsls	r1, r3, #6
    f546:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
    f54a:	0190      	lsls	r0, r2, #6
    f54c:	1a82      	subs	r2, r0, r2
    f54e:	eb61 0307 	sbc.w	r3, r1, r7
    f552:	e9dd 6700 	ldrd	r6, r7, [sp]
    f556:	18b6      	adds	r6, r6, r2
    f558:	415f      	adcs	r7, r3
    f55a:	9b04      	ldr	r3, [sp, #16]
    f55c:	18f1      	adds	r1, r6, r3
    f55e:	eb47 72e3 	adc.w	r2, r7, r3, asr #31
    f562:	6021      	str	r1, [r4, #0]
    f564:	6062      	str	r2, [r4, #4]
    f566:	e7be      	b.n	f4e6 <log_append_prepare+0x7e>
        rc = -1;
    f568:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
    f56c:	e7c6      	b.n	f4fc <log_append_prepare+0x94>
    f56e:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
    f572:	e7c3      	b.n	f4fc <log_append_prepare+0x94>
        rc = -1;
    f574:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
    f578:	e7c0      	b.n	f4fc <log_append_prepare+0x94>
        rc = -1;
    f57a:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
    return (rc);
    f57e:	e7bd      	b.n	f4fc <log_append_prepare+0x94>
    f580:	5685c17f 	.word	0x5685c17f
    f584:	00000000 	.word	0x00000000
    f588:	20003ba4 	.word	0x20003ba4
    f58c:	2000228c 	.word	0x2000228c

0000f590 <log_init>:
{
    f590:	b508      	push	{r3, lr}
    SYSINIT_ASSERT_ACTIVE();
    f592:	4b0d      	ldr	r3, [pc, #52]	; (f5c8 <log_init+0x38>)
    f594:	781b      	ldrb	r3, [r3, #0]
    f596:	b163      	cbz	r3, f5b2 <log_init+0x22>
    log_written = 0;
    f598:	2300      	movs	r3, #0
    f59a:	4a0c      	ldr	r2, [pc, #48]	; (f5cc <log_init+0x3c>)
    f59c:	7013      	strb	r3, [r2, #0]
    STAILQ_INIT(&g_log_list);
    f59e:	4a0c      	ldr	r2, [pc, #48]	; (f5d0 <log_init+0x40>)
    f5a0:	6013      	str	r3, [r2, #0]
    f5a2:	6052      	str	r2, [r2, #4]
    g_log_info.li_version = MYNEWT_VAL(LOG_VERSION);
    f5a4:	4a0b      	ldr	r2, [pc, #44]	; (f5d4 <log_init+0x44>)
    f5a6:	2103      	movs	r1, #3
    f5a8:	7111      	strb	r1, [r2, #4]
    g_log_info.li_next_index = 0;
    f5aa:	6013      	str	r3, [r2, #0]
    log_console_init();
    f5ac:	f000 f984 	bl	f8b8 <log_console_init>
}
    f5b0:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
    f5b2:	f7fc fe19 	bl	c1e8 <hal_debugger_connected>
    f5b6:	b100      	cbz	r0, f5ba <log_init+0x2a>
    f5b8:	be01      	bkpt	0x0001
    f5ba:	2300      	movs	r3, #0
    f5bc:	461a      	mov	r2, r3
    f5be:	4619      	mov	r1, r3
    f5c0:	4618      	mov	r0, r3
    f5c2:	f7fd f84b 	bl	c65c <__assert_func>
    f5c6:	bf00      	nop
    f5c8:	20003bd8 	.word	0x20003bd8
    f5cc:	2000228c 	.word	0x2000228c
    f5d0:	20000134 	.word	0x20000134
    f5d4:	20003ba4 	.word	0x20003ba4

0000f5d8 <log_hdr_len>:
    if (hdr->ue_flags & LOG_FLAGS_IMG_HASH) {
    f5d8:	7b83      	ldrb	r3, [r0, #14]
    f5da:	f013 0f10 	tst.w	r3, #16
    f5de:	d101      	bne.n	f5e4 <log_hdr_len+0xc>
    return LOG_BASE_ENTRY_HDR_SIZE;
    f5e0:	200f      	movs	r0, #15
}
    f5e2:	4770      	bx	lr
        return LOG_BASE_ENTRY_HDR_SIZE + LOG_IMG_HASHLEN;
    f5e4:	2013      	movs	r0, #19
    f5e6:	4770      	bx	lr

0000f5e8 <log_append_body>:
}

int
log_append_body(struct log *log, uint8_t module, uint8_t level, uint8_t etype,
                const void *body, uint16_t body_len)
{
    f5e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    f5ec:	b089      	sub	sp, #36	; 0x24
    f5ee:	4606      	mov	r6, r0
    f5f0:	460f      	mov	r7, r1
    f5f2:	4690      	mov	r8, r2
    f5f4:	4699      	mov	r9, r3
    f5f6:	f8bd 5044 	ldrh.w	r5, [sp, #68]	; 0x44
    struct log_entry_hdr hdr;
    int rc;

    LOG_STATS_INC(log, writes);

    rc = log_chk_max_entry_len(log, body_len);
    f5fa:	4629      	mov	r1, r5
    f5fc:	f7ff ff1c 	bl	f438 <log_chk_max_entry_len>
    if (rc != OS_OK) {
    f600:	4604      	mov	r4, r0
    f602:	b118      	cbz	r0, f60c <log_append_body+0x24>
    }

    log_call_append_cb(log, hdr.ue_index);

    return 0;
}
    f604:	4620      	mov	r0, r4
    f606:	b009      	add	sp, #36	; 0x24
    f608:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    rc = log_append_prepare(log, module, level, etype, &hdr);
    f60c:	ab03      	add	r3, sp, #12
    f60e:	9300      	str	r3, [sp, #0]
    f610:	464b      	mov	r3, r9
    f612:	4642      	mov	r2, r8
    f614:	4639      	mov	r1, r7
    f616:	4630      	mov	r0, r6
    f618:	f7ff ff26 	bl	f468 <log_append_prepare>
    if (rc != 0) {
    f61c:	4604      	mov	r4, r0
    f61e:	2800      	cmp	r0, #0
    f620:	d1f0      	bne.n	f604 <log_append_body+0x1c>
    rc = log->l_log->log_append_body(log, &hdr, body, body_len);
    f622:	6873      	ldr	r3, [r6, #4]
    f624:	691c      	ldr	r4, [r3, #16]
    f626:	462b      	mov	r3, r5
    f628:	9a10      	ldr	r2, [sp, #64]	; 0x40
    f62a:	a903      	add	r1, sp, #12
    f62c:	4630      	mov	r0, r6
    f62e:	47a0      	blx	r4
    if (rc != 0) {
    f630:	4604      	mov	r4, r0
    f632:	2800      	cmp	r0, #0
    f634:	d1e6      	bne.n	f604 <log_append_body+0x1c>
    log_call_append_cb(log, hdr.ue_index);
    f636:	9905      	ldr	r1, [sp, #20]
    f638:	4630      	mov	r0, r6
    f63a:	f7ff ff07 	bl	f44c <log_call_append_cb>
    return 0;
    f63e:	e7e1      	b.n	f604 <log_append_body+0x1c>

0000f640 <log_walk>:
}

int
log_walk(struct log *log, log_walk_func_t walk_func,
         struct log_offset *log_offset)
{
    f640:	b508      	push	{r3, lr}
    int rc;

    rc = log->l_log->log_walk(log, walk_func, log_offset);
    f642:	6843      	ldr	r3, [r0, #4]
    f644:	69db      	ldr	r3, [r3, #28]
    f646:	4798      	blx	r3
    }

    return (0);
err:
    return (rc);
}
    f648:	bd08      	pop	{r3, pc}
	...

0000f64c <log_read_last_hdr>:
{
    f64c:	b530      	push	{r4, r5, lr}
    f64e:	b089      	sub	sp, #36	; 0x24
    arg.hdr = out_hdr;
    f650:	9106      	str	r1, [sp, #24]
    arg.read_success = 0;
    f652:	2300      	movs	r3, #0
    f654:	9307      	str	r3, [sp, #28]
    log_offset.lo_arg = &arg;
    f656:	aa06      	add	r2, sp, #24
    f658:	9204      	str	r2, [sp, #16]
    log_offset.lo_ts = -1;
    f65a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    f65e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    f662:	e9cd 4500 	strd	r4, r5, [sp]
    log_offset.lo_index = 0;
    f666:	9302      	str	r3, [sp, #8]
    log_offset.lo_data_len = 0;
    f668:	9303      	str	r3, [sp, #12]
    log_walk(log, log_read_hdr_walk, &log_offset);
    f66a:	466a      	mov	r2, sp
    f66c:	4905      	ldr	r1, [pc, #20]	; (f684 <log_read_last_hdr+0x38>)
    f66e:	f7ff ffe7 	bl	f640 <log_walk>
    if (!arg.read_success) {
    f672:	9b07      	ldr	r3, [sp, #28]
    f674:	b113      	cbz	r3, f67c <log_read_last_hdr+0x30>
    return 0;
    f676:	2000      	movs	r0, #0
}
    f678:	b009      	add	sp, #36	; 0x24
    f67a:	bd30      	pop	{r4, r5, pc}
        return -1;
    f67c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    f680:	e7fa      	b.n	f678 <log_read_last_hdr+0x2c>
    f682:	bf00      	nop
    f684:	0000f779 	.word	0x0000f779

0000f688 <log_register>:
{
    f688:	b530      	push	{r4, r5, lr}
    f68a:	b087      	sub	sp, #28
    f68c:	460c      	mov	r4, r1
    f68e:	f89d 1028 	ldrb.w	r1, [sp, #40]	; 0x28
    assert(!log_written);
    f692:	4d2e      	ldr	r5, [pc, #184]	; (f74c <log_register+0xc4>)
    f694:	782d      	ldrb	r5, [r5, #0]
    f696:	bb3d      	cbnz	r5, f6e8 <log_register+0x60>
    if (level > LOG_LEVEL_MAX) {
    f698:	290f      	cmp	r1, #15
    f69a:	d900      	bls.n	f69e <log_register+0x16>
        level = LOG_LEVEL_MAX;
    f69c:	210f      	movs	r1, #15
    log->l_name = name;
    f69e:	6020      	str	r0, [r4, #0]
    log->l_log = lh;
    f6a0:	6062      	str	r2, [r4, #4]
    log->l_arg = arg;
    f6a2:	60a3      	str	r3, [r4, #8]
    log->l_level = level;
    f6a4:	7621      	strb	r1, [r4, #24]
    log->l_append_cb = NULL;
    f6a6:	2300      	movs	r3, #0
    f6a8:	6123      	str	r3, [r4, #16]
    log->l_max_entry_len = 0;
    f6aa:	8363      	strh	r3, [r4, #26]
    if (!log_registered(log)) {
    f6ac:	4620      	mov	r0, r4
    f6ae:	f7ff feaf 	bl	f410 <log_registered>
    f6b2:	b938      	cbnz	r0, f6c4 <log_register+0x3c>
        STAILQ_INSERT_TAIL(&g_log_list, log, l_next);
    f6b4:	2300      	movs	r3, #0
    f6b6:	60e3      	str	r3, [r4, #12]
    f6b8:	4b25      	ldr	r3, [pc, #148]	; (f750 <log_register+0xc8>)
    f6ba:	685a      	ldr	r2, [r3, #4]
    f6bc:	6014      	str	r4, [r2, #0]
    f6be:	f104 020c 	add.w	r2, r4, #12
    f6c2:	605a      	str	r2, [r3, #4]
    if (log->l_log->log_registered) {
    f6c4:	6863      	ldr	r3, [r4, #4]
    f6c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    f6c8:	b31b      	cbz	r3, f712 <log_register+0x8a>
        rc = log->l_log->log_registered(log);
    f6ca:	4620      	mov	r0, r4
    f6cc:	4798      	blx	r3
        if (rc) {
    f6ce:	4605      	mov	r5, r0
    f6d0:	b1f8      	cbz	r0, f712 <log_register+0x8a>
            STAILQ_REMOVE(&g_log_list, log, log, l_next);
    f6d2:	4b1f      	ldr	r3, [pc, #124]	; (f750 <log_register+0xc8>)
    f6d4:	681a      	ldr	r2, [r3, #0]
    f6d6:	42a2      	cmp	r2, r4
    f6d8:	d111      	bne.n	f6fe <log_register+0x76>
    f6da:	68d3      	ldr	r3, [r2, #12]
    f6dc:	4a1c      	ldr	r2, [pc, #112]	; (f750 <log_register+0xc8>)
    f6de:	6013      	str	r3, [r2, #0]
    f6e0:	b9e3      	cbnz	r3, f71c <log_register+0x94>
    f6e2:	4613      	mov	r3, r2
    f6e4:	605a      	str	r2, [r3, #4]
    f6e6:	e019      	b.n	f71c <log_register+0x94>
    assert(!log_written);
    f6e8:	f7fc fd7e 	bl	c1e8 <hal_debugger_connected>
    f6ec:	b100      	cbz	r0, f6f0 <log_register+0x68>
    f6ee:	be01      	bkpt	0x0001
    f6f0:	2300      	movs	r3, #0
    f6f2:	461a      	mov	r2, r3
    f6f4:	4619      	mov	r1, r3
    f6f6:	4618      	mov	r0, r3
    f6f8:	f7fc ffb0 	bl	c65c <__assert_func>
            STAILQ_REMOVE(&g_log_list, log, log, l_next);
    f6fc:	461a      	mov	r2, r3
    f6fe:	68d3      	ldr	r3, [r2, #12]
    f700:	42a3      	cmp	r3, r4
    f702:	d1fb      	bne.n	f6fc <log_register+0x74>
    f704:	68db      	ldr	r3, [r3, #12]
    f706:	60d3      	str	r3, [r2, #12]
    f708:	b943      	cbnz	r3, f71c <log_register+0x94>
    f70a:	320c      	adds	r2, #12
    f70c:	4b10      	ldr	r3, [pc, #64]	; (f750 <log_register+0xc8>)
    f70e:	605a      	str	r2, [r3, #4]
    f710:	e004      	b.n	f71c <log_register+0x94>
    if (log->l_log->log_type == LOG_TYPE_STORAGE) {
    f712:	6863      	ldr	r3, [r4, #4]
    f714:	681b      	ldr	r3, [r3, #0]
    f716:	2b02      	cmp	r3, #2
    f718:	d003      	beq.n	f722 <log_register+0x9a>
    return (0);
    f71a:	2500      	movs	r5, #0
}
    f71c:	4628      	mov	r0, r5
    f71e:	b007      	add	sp, #28
    f720:	bd30      	pop	{r4, r5, pc}
        rc = log_read_last_hdr(log, &hdr);
    f722:	a901      	add	r1, sp, #4
    f724:	4620      	mov	r0, r4
    f726:	f7ff ff91 	bl	f64c <log_read_last_hdr>
        if (rc == 0) {
    f72a:	4605      	mov	r5, r0
    f72c:	b108      	cbz	r0, f732 <log_register+0xaa>
    return (0);
    f72e:	2500      	movs	r5, #0
    f730:	e7f4      	b.n	f71c <log_register+0x94>
            OS_ENTER_CRITICAL(sr);
    f732:	f7fe f861 	bl	d7f8 <os_arch_save_sr>
            if (hdr.ue_index >= g_log_info.li_next_index) {
    f736:	9b03      	ldr	r3, [sp, #12]
    f738:	4a06      	ldr	r2, [pc, #24]	; (f754 <log_register+0xcc>)
    f73a:	6812      	ldr	r2, [r2, #0]
    f73c:	4293      	cmp	r3, r2
    f73e:	d302      	bcc.n	f746 <log_register+0xbe>
                g_log_info.li_next_index = hdr.ue_index + 1;
    f740:	3301      	adds	r3, #1
    f742:	4a04      	ldr	r2, [pc, #16]	; (f754 <log_register+0xcc>)
    f744:	6013      	str	r3, [r2, #0]
            OS_EXIT_CRITICAL(sr);
    f746:	f7fe f85d 	bl	d804 <os_arch_restore_sr>
    f74a:	e7e7      	b.n	f71c <log_register+0x94>
    f74c:	2000228c 	.word	0x2000228c
    f750:	20000134 	.word	0x20000134
    f754:	20003ba4 	.word	0x20003ba4

0000f758 <log_read>:
 * @return                      The number of bytes read; 0 on failure.
 */
int
log_read(struct log *log, const void *dptr, void *buf, uint16_t off,
         uint16_t len)
{
    f758:	b530      	push	{r4, r5, lr}
    f75a:	b083      	sub	sp, #12
    int rc;

    rc = log->l_log->log_read(log, dptr, buf, off, len);
    f75c:	6844      	ldr	r4, [r0, #4]
    f75e:	6864      	ldr	r4, [r4, #4]
    f760:	f8bd 5018 	ldrh.w	r5, [sp, #24]
    f764:	9500      	str	r5, [sp, #0]
    f766:	47a0      	blx	r4

    return (rc);
}
    f768:	b003      	add	sp, #12
    f76a:	bd30      	pop	{r4, r5, pc}

0000f76c <log_fill_current_img_hash>:
    hdr->ue_flags |= LOG_FLAGS_IMG_HASH;

    /* We have to account for LOG_IMG_HASHLEN bytes of hash */
    return imgr_get_current_hash(hdr->ue_imghash, LOG_IMG_HASHLEN);
#endif
    memset(hdr->ue_imghash, 0, LOG_IMG_HASHLEN);
    f76c:	2300      	movs	r3, #0
    f76e:	f8c0 300f 	str.w	r3, [r0, #15]

    return SYS_ENOTSUP;
}
    f772:	f06f 000b 	mvn.w	r0, #11
    f776:	4770      	bx	lr

0000f778 <log_read_hdr_walk>:
{
    f778:	b530      	push	{r4, r5, lr}
    f77a:	b083      	sub	sp, #12
    f77c:	4615      	mov	r5, r2
    arg = log_offset->lo_arg;
    f77e:	690c      	ldr	r4, [r1, #16]
    rc = log_read(log, dptr, arg->hdr, 0, LOG_BASE_ENTRY_HDR_SIZE);
    f780:	6822      	ldr	r2, [r4, #0]
    f782:	230f      	movs	r3, #15
    f784:	9300      	str	r3, [sp, #0]
    f786:	2300      	movs	r3, #0
    f788:	4629      	mov	r1, r5
    f78a:	f7ff ffe5 	bl	f758 <log_read>
    if (rc >= LOG_BASE_ENTRY_HDR_SIZE) {
    f78e:	280e      	cmp	r0, #14
    f790:	dd01      	ble.n	f796 <log_read_hdr_walk+0x1e>
        arg->read_success = 1;
    f792:	2301      	movs	r3, #1
    f794:	6063      	str	r3, [r4, #4]
    if (arg->hdr->ue_flags & LOG_FLAGS_IMG_HASH) {
    f796:	6820      	ldr	r0, [r4, #0]
    f798:	7b83      	ldrb	r3, [r0, #14]
    f79a:	f013 0f10 	tst.w	r3, #16
    f79e:	d102      	bne.n	f7a6 <log_read_hdr_walk+0x2e>
}
    f7a0:	2001      	movs	r0, #1
    f7a2:	b003      	add	sp, #12
    f7a4:	bd30      	pop	{r4, r5, pc}
        rc = log_fill_current_img_hash(arg->hdr);
    f7a6:	f7ff ffe1 	bl	f76c <log_fill_current_img_hash>
        if (!rc || rc == SYS_ENOTSUP) {
    f7aa:	b110      	cbz	r0, f7b2 <log_read_hdr_walk+0x3a>
    f7ac:	f110 0f0c 	cmn.w	r0, #12
    f7b0:	d1f6      	bne.n	f7a0 <log_read_hdr_walk+0x28>
            arg->read_success = 1;
    f7b2:	2301      	movs	r3, #1
    f7b4:	6063      	str	r3, [r4, #4]
    f7b6:	e7f3      	b.n	f7a0 <log_read_hdr_walk+0x28>

0000f7b8 <log_console_read>:
log_console_read(struct log *log, const void *dptr, void *buf, uint16_t offset,
        uint16_t len)
{
    /* You don't read console, console read you */
    return (OS_EINVAL);
}
    f7b8:	2002      	movs	r0, #2
    f7ba:	4770      	bx	lr

0000f7bc <log_console_walk>:
log_console_walk(struct log *log, log_walk_func_t walk_func,
        struct log_offset *log_offset)
{
    /* You don't walk console, console walk you. */
    return (OS_EINVAL);
}
    f7bc:	2002      	movs	r0, #2
    f7be:	4770      	bx	lr

0000f7c0 <log_console_flush>:
static int
log_console_flush(struct log *log)
{
    /* You don't flush console, console flush you. */
    return (OS_EINVAL);
}
    f7c0:	2002      	movs	r0, #2
    f7c2:	4770      	bx	lr

0000f7c4 <log_console_print_hdr>:
{
    f7c4:	b510      	push	{r4, lr}
    f7c6:	b082      	sub	sp, #8
    f7c8:	4604      	mov	r4, r0
                   hdr->ue_ts, hdr->ue_module, hdr->ue_level);
    f7ca:	7b01      	ldrb	r1, [r0, #12]
    f7cc:	7b40      	ldrb	r0, [r0, #13]
    console_printf("[ts=%lluus, mod=%u level=%u ",
    f7ce:	6822      	ldr	r2, [r4, #0]
    f7d0:	6863      	ldr	r3, [r4, #4]
    f7d2:	9001      	str	r0, [sp, #4]
    f7d4:	9100      	str	r1, [sp, #0]
    f7d6:	480a      	ldr	r0, [pc, #40]	; (f800 <log_console_print_hdr+0x3c>)
    f7d8:	f7ff fb6a 	bl	eeb0 <console_printf>
    if (hdr->ue_flags & LOG_FLAGS_IMG_HASH) {
    f7dc:	7ba3      	ldrb	r3, [r4, #14]
    f7de:	f013 0f10 	tst.w	r3, #16
    f7e2:	d104      	bne.n	f7ee <log_console_print_hdr+0x2a>
    console_printf("]");
    f7e4:	4807      	ldr	r0, [pc, #28]	; (f804 <log_console_print_hdr+0x40>)
    f7e6:	f7ff fb63 	bl	eeb0 <console_printf>
}
    f7ea:	b002      	add	sp, #8
    f7ec:	bd10      	pop	{r4, pc}
        console_printf("ih=0x%x%x%x%x", hdr->ue_imghash[0], hdr->ue_imghash[1],
    f7ee:	7be1      	ldrb	r1, [r4, #15]
    f7f0:	7c22      	ldrb	r2, [r4, #16]
                       hdr->ue_imghash[2], hdr->ue_imghash[3]);
    f7f2:	7c63      	ldrb	r3, [r4, #17]
    f7f4:	7ca0      	ldrb	r0, [r4, #18]
        console_printf("ih=0x%x%x%x%x", hdr->ue_imghash[0], hdr->ue_imghash[1],
    f7f6:	9000      	str	r0, [sp, #0]
    f7f8:	4803      	ldr	r0, [pc, #12]	; (f808 <log_console_print_hdr+0x44>)
    f7fa:	f7ff fb59 	bl	eeb0 <console_printf>
    f7fe:	e7f1      	b.n	f7e4 <log_console_print_hdr+0x20>
    f800:	0002aed8 	.word	0x0002aed8
    f804:	0002af08 	.word	0x0002af08
    f808:	0002aef8 	.word	0x0002aef8

0000f80c <log_console_dump_cbor_entry>:
{
    f80c:	b570      	push	{r4, r5, r6, lr}
    f80e:	b094      	sub	sp, #80	; 0x50
    cbor_buf_reader_init(&cbor_buf_reader, dptr, len);
    f810:	460a      	mov	r2, r1
    f812:	4601      	mov	r1, r0
    f814:	a805      	add	r0, sp, #20
    f816:	f018 fa85 	bl	27d24 <cbor_buf_reader_init>
    cbor_parser_init(&cbor_buf_reader.r, 0, &cbor_parser, &cbor_value);
    f81a:	ad0d      	add	r5, sp, #52	; 0x34
    f81c:	462b      	mov	r3, r5
    f81e:	aa11      	add	r2, sp, #68	; 0x44
    f820:	2100      	movs	r1, #0
    f822:	a805      	add	r0, sp, #20
    f824:	f018 fd47 	bl	282b6 <cbor_parser_init>
    cbor_value_to_pretty(stdout, &cbor_value);
    f828:	4b08      	ldr	r3, [pc, #32]	; (f84c <log_console_dump_cbor_entry+0x40>)
    f82a:	681e      	ldr	r6, [r3, #0]

/* Human-readable (dump) API */
CBOR_API CborError cbor_value_to_pretty_advance(FILE *out, CborValue *value);
CBOR_INLINE_API CborError cbor_value_to_pretty(FILE *out, const CborValue *value)
{
    CborValue copy = *value;
    f82c:	ac01      	add	r4, sp, #4
    f82e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    f832:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return cbor_value_to_pretty_advance(out, &copy);
    f836:	4621      	mov	r1, r4
    f838:	4630      	mov	r0, r6
    f83a:	f019 f957 	bl	28aec <cbor_value_to_pretty_advance>
    console_write("\n", 1);
    f83e:	2101      	movs	r1, #1
    f840:	4803      	ldr	r0, [pc, #12]	; (f850 <log_console_dump_cbor_entry+0x44>)
    f842:	f7ff f9e5 	bl	ec10 <console_write>
}
    f846:	2000      	movs	r0, #0
    f848:	b014      	add	sp, #80	; 0x50
    f84a:	bd70      	pop	{r4, r5, r6, pc}
    f84c:	0002bde4 	.word	0x0002bde4
    f850:	0002b63c 	.word	0x0002b63c

0000f854 <log_console_append_body>:
{
    f854:	b570      	push	{r4, r5, r6, lr}
    f856:	460c      	mov	r4, r1
    f858:	4615      	mov	r5, r2
    f85a:	461e      	mov	r6, r3
    if (!console_is_init()) {
    f85c:	f7ff fad6 	bl	ee0c <console_is_init>
    f860:	b158      	cbz	r0, f87a <log_console_append_body+0x26>
    if (!console_is_midline) {
    f862:	4b0b      	ldr	r3, [pc, #44]	; (f890 <log_console_append_body+0x3c>)
    f864:	681b      	ldr	r3, [r3, #0]
    f866:	b153      	cbz	r3, f87e <log_console_append_body+0x2a>
    if (hdr->ue_etype != LOG_ETYPE_CBOR) {
    f868:	7ba3      	ldrb	r3, [r4, #14]
    f86a:	f003 030f 	and.w	r3, r3, #15
    f86e:	2b01      	cmp	r3, #1
    f870:	d009      	beq.n	f886 <log_console_append_body+0x32>
        console_write(body, body_len);
    f872:	4631      	mov	r1, r6
    f874:	4628      	mov	r0, r5
    f876:	f7ff f9cb 	bl	ec10 <console_write>
}
    f87a:	2000      	movs	r0, #0
    f87c:	bd70      	pop	{r4, r5, r6, pc}
        log_console_print_hdr(hdr);
    f87e:	4620      	mov	r0, r4
    f880:	f7ff ffa0 	bl	f7c4 <log_console_print_hdr>
    f884:	e7f0      	b.n	f868 <log_console_append_body+0x14>
        log_console_dump_cbor_entry(body, body_len);
    f886:	b2b1      	uxth	r1, r6
    f888:	4628      	mov	r0, r5
    f88a:	f7ff ffbf 	bl	f80c <log_console_dump_cbor_entry>
    f88e:	e7f4      	b.n	f87a <log_console_append_body+0x26>
    f890:	20003b84 	.word	0x20003b84

0000f894 <log_console_append>:
{
    f894:	b570      	push	{r4, r5, r6, lr}
    f896:	4605      	mov	r5, r0
    f898:	460c      	mov	r4, r1
    f89a:	4616      	mov	r6, r2
    hdr_len = log_hdr_len(buf);
    f89c:	4608      	mov	r0, r1
    f89e:	f7ff fe9b 	bl	f5d8 <log_hdr_len>
    return log_console_append_body(log, buf, (uint8_t *)buf + hdr_len,
    f8a2:	1a33      	subs	r3, r6, r0
    f8a4:	1822      	adds	r2, r4, r0
    f8a6:	4621      	mov	r1, r4
    f8a8:	4628      	mov	r0, r5
    f8aa:	f7ff ffd3 	bl	f854 <log_console_append_body>
}
    f8ae:	bd70      	pop	{r4, r5, r6, pc}

0000f8b0 <log_console_get>:
}
    f8b0:	4800      	ldr	r0, [pc, #0]	; (f8b4 <log_console_get+0x4>)
    f8b2:	4770      	bx	lr
    f8b4:	20002290 	.word	0x20002290

0000f8b8 <log_console_init>:
    .log_flush = log_console_flush,
};

void
log_console_init(void)
{
    f8b8:	b510      	push	{r4, lr}
    f8ba:	b082      	sub	sp, #8
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
    f8bc:	4b11      	ldr	r3, [pc, #68]	; (f904 <log_console_init+0x4c>)
    f8be:	781b      	ldrb	r3, [r3, #0]
    f8c0:	b14b      	cbz	r3, f8d6 <log_console_init+0x1e>

    rc = log_register("console", &log_console, &log_console_handler, NULL,
    f8c2:	2300      	movs	r3, #0
    f8c4:	9300      	str	r3, [sp, #0]
    f8c6:	4a10      	ldr	r2, [pc, #64]	; (f908 <log_console_init+0x50>)
    f8c8:	4910      	ldr	r1, [pc, #64]	; (f90c <log_console_init+0x54>)
    f8ca:	4811      	ldr	r0, [pc, #68]	; (f910 <log_console_init+0x58>)
    f8cc:	f7ff fedc 	bl	f688 <log_register>
                      MYNEWT_VAL(LOG_LEVEL));
    SYSINIT_PANIC_ASSERT(rc == 0);
    f8d0:	b958      	cbnz	r0, f8ea <log_console_init+0x32>
}
    f8d2:	b002      	add	sp, #8
    f8d4:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
    f8d6:	f7fc fc87 	bl	c1e8 <hal_debugger_connected>
    f8da:	b100      	cbz	r0, f8de <log_console_init+0x26>
    f8dc:	be01      	bkpt	0x0001
    f8de:	2300      	movs	r3, #0
    f8e0:	461a      	mov	r2, r3
    f8e2:	4619      	mov	r1, r3
    f8e4:	4618      	mov	r0, r3
    f8e6:	f7fc feb9 	bl	c65c <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
    f8ea:	f7fc fc7d 	bl	c1e8 <hal_debugger_connected>
    f8ee:	b100      	cbz	r0, f8f2 <log_console_init+0x3a>
    f8f0:	be01      	bkpt	0x0001
    f8f2:	2000      	movs	r0, #0
    f8f4:	9000      	str	r0, [sp, #0]
    f8f6:	4b07      	ldr	r3, [pc, #28]	; (f914 <log_console_init+0x5c>)
    f8f8:	681c      	ldr	r4, [r3, #0]
    f8fa:	4603      	mov	r3, r0
    f8fc:	4602      	mov	r2, r0
    f8fe:	4601      	mov	r1, r0
    f900:	47a0      	blx	r4
}
    f902:	e7e6      	b.n	f8d2 <log_console_init+0x1a>
    f904:	20003bd8 	.word	0x20003bd8
    f908:	0002aea4 	.word	0x0002aea4
    f90c:	20002290 	.word	0x20002290
    f910:	0002aed0 	.word	0x0002aed0
    f914:	20000144 	.word	0x20000144

0000f918 <log_level_get>:
uint8_t
log_level_get(uint8_t module)
{
    uint8_t byte;

    byte = log_level_map[module / 2];
    f918:	0843      	lsrs	r3, r0, #1
    f91a:	4a05      	ldr	r2, [pc, #20]	; (f930 <log_level_get+0x18>)
    f91c:	5cd3      	ldrb	r3, [r2, r3]
    if (module % 2 == 0) {
    f91e:	f010 0f01 	tst.w	r0, #1
    f922:	d001      	beq.n	f928 <log_level_get+0x10>
        return byte & 0x0f;
    } else {
        return byte >> 4;
    f924:	0918      	lsrs	r0, r3, #4
    }
}
    f926:	4770      	bx	lr
        return byte & 0x0f;
    f928:	f003 000f 	and.w	r0, r3, #15
    f92c:	4770      	bx	lr
    f92e:	bf00      	nop
    f930:	200022ac 	.word	0x200022ac

0000f934 <modlog_find_by_module>:
    return cur;
}

static struct modlog_mapping *
modlog_find_by_module(uint8_t module, struct modlog_mapping **out_prev)
{
    f934:	b410      	push	{r4}
    struct modlog_mapping *prev;
    struct modlog_mapping *cur;

    prev = NULL;
    SLIST_FOREACH(cur, &modlog_mappings, next) {
    f936:	4b08      	ldr	r3, [pc, #32]	; (f958 <modlog_find_by_module+0x24>)
    f938:	681b      	ldr	r3, [r3, #0]
    prev = NULL;
    f93a:	2400      	movs	r4, #0
    SLIST_FOREACH(cur, &modlog_mappings, next) {
    f93c:	b13b      	cbz	r3, f94e <modlog_find_by_module+0x1a>
        if (cur->desc.module == module) {
    f93e:	7a5a      	ldrb	r2, [r3, #9]
    f940:	4282      	cmp	r2, r0
    f942:	d004      	beq.n	f94e <modlog_find_by_module+0x1a>
            break;
        }

        if (cur->desc.module > module) {
    f944:	d802      	bhi.n	f94c <modlog_find_by_module+0x18>
            cur = NULL;
            break;
        }

        prev = cur;
    f946:	461c      	mov	r4, r3
    SLIST_FOREACH(cur, &modlog_mappings, next) {
    f948:	681b      	ldr	r3, [r3, #0]
    f94a:	e7f7      	b.n	f93c <modlog_find_by_module+0x8>
            cur = NULL;
    f94c:	2300      	movs	r3, #0
    }

    if (out_prev != NULL) {
    f94e:	b101      	cbz	r1, f952 <modlog_find_by_module+0x1e>
        *out_prev = prev;
    f950:	600c      	str	r4, [r1, #0]
    }

    return cur;
}
    f952:	4618      	mov	r0, r3
    f954:	bc10      	pop	{r4}
    f956:	4770      	bx	lr
    f958:	200023f0 	.word	0x200023f0

0000f95c <modlog_insert>:

static void
modlog_insert(struct modlog_mapping *mm)
{
    f95c:	b510      	push	{r4, lr}
    f95e:	b082      	sub	sp, #8
    f960:	4604      	mov	r4, r0
    struct modlog_mapping *prev;

    modlog_find_by_module(mm->desc.module, &prev);
    f962:	a901      	add	r1, sp, #4
    f964:	7a40      	ldrb	r0, [r0, #9]
    f966:	f7ff ffe5 	bl	f934 <modlog_find_by_module>
    if (prev == NULL) {
    f96a:	9b01      	ldr	r3, [sp, #4]
    f96c:	b143      	cbz	r3, f980 <modlog_insert+0x24>
        SLIST_INSERT_HEAD(&modlog_mappings, mm, next);
    } else {
        SLIST_INSERT_AFTER(prev, mm, next);
    f96e:	681b      	ldr	r3, [r3, #0]
    f970:	6023      	str	r3, [r4, #0]
    f972:	9b01      	ldr	r3, [sp, #4]
    f974:	601c      	str	r4, [r3, #0]
    }

    if (mm->desc.module == MODLOG_MODULE_DFLT) {
    f976:	7a63      	ldrb	r3, [r4, #9]
    f978:	2bff      	cmp	r3, #255	; 0xff
    f97a:	d006      	beq.n	f98a <modlog_insert+0x2e>
        modlog_first_dflt = mm;
    }
}
    f97c:	b002      	add	sp, #8
    f97e:	bd10      	pop	{r4, pc}
        SLIST_INSERT_HEAD(&modlog_mappings, mm, next);
    f980:	4b03      	ldr	r3, [pc, #12]	; (f990 <modlog_insert+0x34>)
    f982:	681a      	ldr	r2, [r3, #0]
    f984:	6022      	str	r2, [r4, #0]
    f986:	601c      	str	r4, [r3, #0]
    f988:	e7f5      	b.n	f976 <modlog_insert+0x1a>
        modlog_first_dflt = mm;
    f98a:	4b02      	ldr	r3, [pc, #8]	; (f994 <modlog_insert+0x38>)
    f98c:	601c      	str	r4, [r3, #0]
}
    f98e:	e7f5      	b.n	f97c <modlog_insert+0x20>
    f990:	200023f0 	.word	0x200023f0
    f994:	2000232c 	.word	0x2000232c

0000f998 <modlog_alloc>:
{
    f998:	b508      	push	{r3, lr}
    mm = os_memblock_get(&modlog_mapping_pool);
    f99a:	4805      	ldr	r0, [pc, #20]	; (f9b0 <modlog_alloc+0x18>)
    f99c:	f7fd fac8 	bl	cf30 <os_memblock_get>
    if (mm != NULL) {
    f9a0:	4603      	mov	r3, r0
    f9a2:	b118      	cbz	r0, f9ac <modlog_alloc+0x14>
        *mm = (struct modlog_mapping) { 0 };
    f9a4:	2200      	movs	r2, #0
    f9a6:	6002      	str	r2, [r0, #0]
    f9a8:	6042      	str	r2, [r0, #4]
    f9aa:	6082      	str	r2, [r0, #8]
}
    f9ac:	4618      	mov	r0, r3
    f9ae:	bd08      	pop	{r3, pc}
    f9b0:	20003bac 	.word	0x20003bac

0000f9b4 <modlog_infer_handle>:
{
    f9b4:	b508      	push	{r3, lr}
    off = (uintptr_t)mm - (uintptr_t)modlog_mapping_buf;
    f9b6:	4b13      	ldr	r3, [pc, #76]	; (fa04 <modlog_infer_handle+0x50>)
    f9b8:	1ac0      	subs	r0, r0, r3
    idx = off / elem_sz;
    f9ba:	4a13      	ldr	r2, [pc, #76]	; (fa08 <modlog_infer_handle+0x54>)
    f9bc:	fba2 3200 	umull	r3, r2, r2, r0
    f9c0:	08d2      	lsrs	r2, r2, #3
    assert(idx >= 0 && idx < MYNEWT_VAL(MODLOG_MAX_MAPPINGS));
    f9c2:	2a0f      	cmp	r2, #15
    f9c4:	d80a      	bhi.n	f9dc <modlog_infer_handle+0x28>
    assert(off % elem_sz == 0);
    f9c6:	4b10      	ldr	r3, [pc, #64]	; (fa08 <modlog_infer_handle+0x54>)
    f9c8:	fba3 1300 	umull	r1, r3, r3, r0
    f9cc:	08db      	lsrs	r3, r3, #3
    f9ce:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    f9d2:	0099      	lsls	r1, r3, #2
    f9d4:	4288      	cmp	r0, r1
    f9d6:	d10b      	bne.n	f9f0 <modlog_infer_handle+0x3c>
}
    f9d8:	b2d0      	uxtb	r0, r2
    f9da:	bd08      	pop	{r3, pc}
    assert(idx >= 0 && idx < MYNEWT_VAL(MODLOG_MAX_MAPPINGS));
    f9dc:	f7fc fc04 	bl	c1e8 <hal_debugger_connected>
    f9e0:	b100      	cbz	r0, f9e4 <modlog_infer_handle+0x30>
    f9e2:	be01      	bkpt	0x0001
    f9e4:	2300      	movs	r3, #0
    f9e6:	461a      	mov	r2, r3
    f9e8:	4619      	mov	r1, r3
    f9ea:	4618      	mov	r0, r3
    f9ec:	f7fc fe36 	bl	c65c <__assert_func>
    assert(off % elem_sz == 0);
    f9f0:	f7fc fbfa 	bl	c1e8 <hal_debugger_connected>
    f9f4:	b100      	cbz	r0, f9f8 <modlog_infer_handle+0x44>
    f9f6:	be01      	bkpt	0x0001
    f9f8:	2300      	movs	r3, #0
    f9fa:	461a      	mov	r2, r3
    f9fc:	4619      	mov	r1, r3
    f9fe:	4618      	mov	r0, r3
    fa00:	f7fc fe2c 	bl	c65c <__assert_func>
    fa04:	20002330 	.word	0x20002330
    fa08:	aaaaaaab 	.word	0xaaaaaaab

0000fa0c <modlog_register_no_lock>:
modlog_register_no_lock(uint8_t module, struct log *log, uint8_t min_level,
                        uint8_t *out_handle)
{
    struct modlog_mapping *mm;

    if (log == NULL) {
    fa0c:	b1c9      	cbz	r1, fa42 <modlog_register_no_lock+0x36>
{
    fa0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fa12:	4688      	mov	r8, r1
    fa14:	461d      	mov	r5, r3
    fa16:	4616      	mov	r6, r2
    fa18:	4607      	mov	r7, r0
        return SYS_EINVAL;
    }

    mm = modlog_alloc();
    fa1a:	f7ff ffbd 	bl	f998 <modlog_alloc>
    if (mm == NULL) {
    fa1e:	4604      	mov	r4, r0
    fa20:	b190      	cbz	r0, fa48 <modlog_register_no_lock+0x3c>
        return SYS_ENOMEM;
    }

    mm->desc = (struct modlog_desc) {
        .log = log,
        .handle = modlog_infer_handle(mm),
    fa22:	f7ff ffc7 	bl	f9b4 <modlog_infer_handle>
    mm->desc = (struct modlog_desc) {
    fa26:	f8c4 8004 	str.w	r8, [r4, #4]
    fa2a:	7220      	strb	r0, [r4, #8]
    fa2c:	7267      	strb	r7, [r4, #9]
    fa2e:	72a6      	strb	r6, [r4, #10]
        .module = module,
        .min_level = min_level,
    };

    modlog_insert(mm);
    fa30:	4620      	mov	r0, r4
    fa32:	f7ff ff93 	bl	f95c <modlog_insert>

    if (out_handle != NULL) {
    fa36:	b155      	cbz	r5, fa4e <modlog_register_no_lock+0x42>
        *out_handle = mm->desc.handle;
    fa38:	7a23      	ldrb	r3, [r4, #8]
    fa3a:	702b      	strb	r3, [r5, #0]
    }

    return 0;
    fa3c:	2000      	movs	r0, #0
}
    fa3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SYS_EINVAL;
    fa42:	f06f 0001 	mvn.w	r0, #1
}
    fa46:	4770      	bx	lr
        return SYS_ENOMEM;
    fa48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    fa4c:	e7f7      	b.n	fa3e <modlog_register_no_lock+0x32>
    return 0;
    fa4e:	2000      	movs	r0, #0
    fa50:	e7f5      	b.n	fa3e <modlog_register_no_lock+0x32>

0000fa52 <modlog_append_one>:
}

static int
modlog_append_one(struct modlog_mapping *mm, uint8_t module, uint8_t level,
                  uint8_t etype, void *data, uint16_t len)
{
    fa52:	b510      	push	{r4, lr}
    fa54:	b082      	sub	sp, #8
    int rc;

    if (level >= mm->desc.min_level) {
    fa56:	7a84      	ldrb	r4, [r0, #10]
    fa58:	4294      	cmp	r4, r2
    fa5a:	d903      	bls.n	fa64 <modlog_append_one+0x12>
    } else {
        LOG_STATS_INC(mm->desc.log, writes);
        LOG_STATS_INC(mm->desc.log, drops);
    }

    return 0;
    fa5c:	2300      	movs	r3, #0
}
    fa5e:	4618      	mov	r0, r3
    fa60:	b002      	add	sp, #8
    fa62:	bd10      	pop	{r4, pc}
        rc = log_append_body(mm->desc.log, module, level, etype, data, len);
    fa64:	6840      	ldr	r0, [r0, #4]
    fa66:	f8bd 4014 	ldrh.w	r4, [sp, #20]
    fa6a:	9401      	str	r4, [sp, #4]
    fa6c:	9c04      	ldr	r4, [sp, #16]
    fa6e:	9400      	str	r4, [sp, #0]
    fa70:	f7ff fdba 	bl	f5e8 <log_append_body>
        if (rc != 0) {
    fa74:	4603      	mov	r3, r0
    fa76:	2800      	cmp	r0, #0
    fa78:	d0f1      	beq.n	fa5e <modlog_append_one+0xc>
            return SYS_EIO;
    fa7a:	f06f 0304 	mvn.w	r3, #4
    fa7e:	e7ee      	b.n	fa5e <modlog_append_one+0xc>

0000fa80 <modlog_append_no_lock>:

static int
modlog_append_no_lock(uint8_t module, uint8_t level, uint8_t etype,
                      void *data, uint16_t len)
{
    fa80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    fa84:	b083      	sub	sp, #12
    fa86:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
    struct modlog_mapping *mm;
    int rc;

    if (module == MODLOG_MODULE_DFLT) {
    fa8a:	28ff      	cmp	r0, #255	; 0xff
    fa8c:	d02d      	beq.n	faea <modlog_append_no_lock+0x6a>
    fa8e:	461f      	mov	r7, r3
    fa90:	4691      	mov	r9, r2
    fa92:	4688      	mov	r8, r1
    fa94:	4605      	mov	r5, r0
        return SYS_EINVAL;
    }

    mm = modlog_find_by_module(module, NULL);
    fa96:	2100      	movs	r1, #0
    fa98:	f7ff ff4c 	bl	f934 <modlog_find_by_module>
    if (mm != NULL) {
    fa9c:	4604      	mov	r4, r0
    fa9e:	b188      	cbz	r0, fac4 <modlog_append_no_lock+0x44>
        while (mm != NULL && mm->desc.module == module) {
    faa0:	b334      	cbz	r4, faf0 <modlog_append_no_lock+0x70>
    faa2:	7a63      	ldrb	r3, [r4, #9]
    faa4:	42ab      	cmp	r3, r5
    faa6:	d10b      	bne.n	fac0 <modlog_append_no_lock+0x40>
            rc = modlog_append_one(mm, module, level, etype, data, len);
    faa8:	9601      	str	r6, [sp, #4]
    faaa:	9700      	str	r7, [sp, #0]
    faac:	464b      	mov	r3, r9
    faae:	4642      	mov	r2, r8
    fab0:	4629      	mov	r1, r5
    fab2:	4620      	mov	r0, r4
    fab4:	f7ff ffcd 	bl	fa52 <modlog_append_one>
            if (rc != 0) {
    fab8:	4603      	mov	r3, r0
    faba:	b9d0      	cbnz	r0, faf2 <modlog_append_no_lock+0x72>
                return rc;
            }

            mm = SLIST_NEXT(mm, next);
    fabc:	6824      	ldr	r4, [r4, #0]
    fabe:	e7ef      	b.n	faa0 <modlog_append_no_lock+0x20>
        }
        return 0;
    fac0:	2300      	movs	r3, #0
    fac2:	e016      	b.n	faf2 <modlog_append_no_lock+0x72>
    }

    /* No mappings match the specified module; write to the default set. */
    for (mm = modlog_first_dflt;
    fac4:	4b0d      	ldr	r3, [pc, #52]	; (fafc <modlog_append_no_lock+0x7c>)
    fac6:	681c      	ldr	r4, [r3, #0]
    fac8:	e000      	b.n	facc <modlog_append_no_lock+0x4c>
         mm != NULL;
         mm = SLIST_NEXT(mm, next)) {
    faca:	6824      	ldr	r4, [r4, #0]
    for (mm = modlog_first_dflt;
    facc:	b15c      	cbz	r4, fae6 <modlog_append_no_lock+0x66>

        rc = modlog_append_one(mm, module, level, etype, data, len);
    face:	9601      	str	r6, [sp, #4]
    fad0:	9700      	str	r7, [sp, #0]
    fad2:	464b      	mov	r3, r9
    fad4:	4642      	mov	r2, r8
    fad6:	4629      	mov	r1, r5
    fad8:	4620      	mov	r0, r4
    fada:	f7ff ffba 	bl	fa52 <modlog_append_one>
        if (rc != 0) {
    fade:	4603      	mov	r3, r0
    fae0:	2800      	cmp	r0, #0
    fae2:	d0f2      	beq.n	faca <modlog_append_no_lock+0x4a>
    fae4:	e005      	b.n	faf2 <modlog_append_no_lock+0x72>
            return rc;
        }
    }

    return 0;
    fae6:	2300      	movs	r3, #0
    fae8:	e003      	b.n	faf2 <modlog_append_no_lock+0x72>
        return SYS_EINVAL;
    faea:	f06f 0301 	mvn.w	r3, #1
    faee:	e000      	b.n	faf2 <modlog_append_no_lock+0x72>
        return 0;
    faf0:	2300      	movs	r3, #0
}
    faf2:	4618      	mov	r0, r3
    faf4:	b003      	add	sp, #12
    faf6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    fafa:	bf00      	nop
    fafc:	2000232c 	.word	0x2000232c

0000fb00 <modlog_register>:
}

int
modlog_register(uint8_t module, struct log *log, uint8_t min_level,
                uint8_t *out_handle)
{
    fb00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fb04:	4605      	mov	r5, r0
    fb06:	460e      	mov	r6, r1
    fb08:	4617      	mov	r7, r2
    fb0a:	4698      	mov	r8, r3
    int rc;

    rwlock_acquire_write(&modlog_rwl);
    fb0c:	4c08      	ldr	r4, [pc, #32]	; (fb30 <modlog_register+0x30>)
    fb0e:	4620      	mov	r0, r4
    fb10:	f000 fb87 	bl	10222 <rwlock_acquire_write>
    rc = modlog_register_no_lock(module, log, min_level, out_handle);
    fb14:	4643      	mov	r3, r8
    fb16:	463a      	mov	r2, r7
    fb18:	4631      	mov	r1, r6
    fb1a:	4628      	mov	r0, r5
    fb1c:	f7ff ff76 	bl	fa0c <modlog_register_no_lock>
    fb20:	4605      	mov	r5, r0
    rwlock_release_write(&modlog_rwl);
    fb22:	4620      	mov	r0, r4
    fb24:	f000 fba7 	bl	10276 <rwlock_release_write>

    return rc;
}
    fb28:	4628      	mov	r0, r5
    fb2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fb2e:	bf00      	nop
    fb30:	200023f4 	.word	0x200023f4

0000fb34 <modlog_append>:
}

int
modlog_append(uint8_t module, uint8_t level, uint8_t etype,
              void *data, uint16_t len)
{
    fb34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fb38:	b082      	sub	sp, #8
    fb3a:	4605      	mov	r5, r0
    fb3c:	460e      	mov	r6, r1
    fb3e:	4617      	mov	r7, r2
    fb40:	4698      	mov	r8, r3
    int rc;

    rwlock_acquire_read(&modlog_rwl);
    fb42:	4c0a      	ldr	r4, [pc, #40]	; (fb6c <modlog_append+0x38>)
    fb44:	4620      	mov	r0, r4
    fb46:	f000 fb2c 	bl	101a2 <rwlock_acquire_read>
    rc = modlog_append_no_lock(module, level, etype, data, len);
    fb4a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    fb4e:	9300      	str	r3, [sp, #0]
    fb50:	4643      	mov	r3, r8
    fb52:	463a      	mov	r2, r7
    fb54:	4631      	mov	r1, r6
    fb56:	4628      	mov	r0, r5
    fb58:	f7ff ff92 	bl	fa80 <modlog_append_no_lock>
    fb5c:	4605      	mov	r5, r0
    rwlock_release_read(&modlog_rwl);
    fb5e:	4620      	mov	r0, r4
    fb60:	f000 fb4c 	bl	101fc <rwlock_release_read>

    return rc;
}
    fb64:	4628      	mov	r0, r5
    fb66:	b002      	add	sp, #8
    fb68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fb6c:	200023f4 	.word	0x200023f4

0000fb70 <modlog_printf>:
    return rc;
}

void
modlog_printf(uint8_t module, uint8_t level, const char *msg, ...)
{
    fb70:	b40c      	push	{r2, r3}
    fb72:	b530      	push	{r4, r5, lr}
    fb74:	b0a5      	sub	sp, #148	; 0x94
    fb76:	4604      	mov	r4, r0
    fb78:	460d      	mov	r5, r1
    fb7a:	ab28      	add	r3, sp, #160	; 0xa0
    fb7c:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list args;
    char buf[MYNEWT_VAL(MODLOG_MAX_PRINTF_LEN)];
    int len;

    va_start(args, msg);
    fb80:	9323      	str	r3, [sp, #140]	; 0x8c
    len = vsnprintf(buf, MYNEWT_VAL(MODLOG_MAX_PRINTF_LEN), msg, args);
    fb82:	2180      	movs	r1, #128	; 0x80
    fb84:	a803      	add	r0, sp, #12
    fb86:	f01a fb35 	bl	2a1f4 <vsnprintf>
    va_end(args);

    if (len >= MYNEWT_VAL(MODLOG_MAX_PRINTF_LEN)) {
    fb8a:	287f      	cmp	r0, #127	; 0x7f
    fb8c:	dd00      	ble.n	fb90 <modlog_printf+0x20>
        len = MYNEWT_VAL(MODLOG_MAX_PRINTF_LEN) - 1;
    fb8e:	207f      	movs	r0, #127	; 0x7f
    }

    modlog_append(module, level, LOG_ETYPE_STRING, buf, len);
    fb90:	b280      	uxth	r0, r0
    fb92:	9000      	str	r0, [sp, #0]
    fb94:	ab03      	add	r3, sp, #12
    fb96:	2200      	movs	r2, #0
    fb98:	4629      	mov	r1, r5
    fb9a:	4620      	mov	r0, r4
    fb9c:	f7ff ffca 	bl	fb34 <modlog_append>
}
    fba0:	b025      	add	sp, #148	; 0x94
    fba2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    fba6:	b002      	add	sp, #8
    fba8:	4770      	bx	lr
	...

0000fbac <modlog_init>:

void
modlog_init(void)
{
    fbac:	b510      	push	{r4, lr}
    fbae:	b082      	sub	sp, #8
    int rc;

    SYSINIT_ASSERT_ACTIVE();
    fbb0:	4b28      	ldr	r3, [pc, #160]	; (fc54 <modlog_init+0xa8>)
    fbb2:	781b      	ldrb	r3, [r3, #0]
    fbb4:	b1e3      	cbz	r3, fbf0 <modlog_init+0x44>

    rc = os_mempool_init(&modlog_mapping_pool, MYNEWT_VAL(MODLOG_MAX_MAPPINGS),
    fbb6:	4b28      	ldr	r3, [pc, #160]	; (fc58 <modlog_init+0xac>)
    fbb8:	9300      	str	r3, [sp, #0]
    fbba:	4b28      	ldr	r3, [pc, #160]	; (fc5c <modlog_init+0xb0>)
    fbbc:	220c      	movs	r2, #12
    fbbe:	2110      	movs	r1, #16
    fbc0:	4827      	ldr	r0, [pc, #156]	; (fc60 <modlog_init+0xb4>)
    fbc2:	f7fd f971 	bl	cea8 <os_mempool_init>
                         sizeof (struct modlog_mapping), modlog_mapping_buf,
                         "modlog_mapping_pool");
    SYSINIT_PANIC_ASSERT(rc == 0);
    fbc6:	b9e8      	cbnz	r0, fc04 <modlog_init+0x58>

    SLIST_INIT(&modlog_mappings);
    fbc8:	2300      	movs	r3, #0
    fbca:	4a26      	ldr	r2, [pc, #152]	; (fc64 <modlog_init+0xb8>)
    fbcc:	6013      	str	r3, [r2, #0]
    modlog_first_dflt = NULL;
    fbce:	4a26      	ldr	r2, [pc, #152]	; (fc68 <modlog_init+0xbc>)
    fbd0:	6013      	str	r3, [r2, #0]

    rc = rwlock_init(&modlog_rwl);
    fbd2:	4826      	ldr	r0, [pc, #152]	; (fc6c <modlog_init+0xc0>)
    fbd4:	f000 fb5e 	bl	10294 <rwlock_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
    fbd8:	bb08      	cbnz	r0, fc1e <modlog_init+0x72>

    /* Register the default console mapping if configured. */
#if MYNEWT_VAL(MODLOG_CONSOLE_DFLT)
    rc = modlog_register(MODLOG_MODULE_DFLT, log_console_get(),
    fbda:	f7ff fe69 	bl	f8b0 <log_console_get>
    fbde:	2300      	movs	r3, #0
    fbe0:	461a      	mov	r2, r3
    fbe2:	4601      	mov	r1, r0
    fbe4:	20ff      	movs	r0, #255	; 0xff
    fbe6:	f7ff ff8b 	bl	fb00 <modlog_register>
                         LOG_LEVEL_DEBUG, NULL);
    SYSINIT_PANIC_ASSERT(rc == 0);
    fbea:	bb28      	cbnz	r0, fc38 <modlog_init+0x8c>
#endif
}
    fbec:	b002      	add	sp, #8
    fbee:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
    fbf0:	f7fc fafa 	bl	c1e8 <hal_debugger_connected>
    fbf4:	b100      	cbz	r0, fbf8 <modlog_init+0x4c>
    fbf6:	be01      	bkpt	0x0001
    fbf8:	2300      	movs	r3, #0
    fbfa:	461a      	mov	r2, r3
    fbfc:	4619      	mov	r1, r3
    fbfe:	4618      	mov	r0, r3
    fc00:	f7fc fd2c 	bl	c65c <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
    fc04:	f7fc faf0 	bl	c1e8 <hal_debugger_connected>
    fc08:	b100      	cbz	r0, fc0c <modlog_init+0x60>
    fc0a:	be01      	bkpt	0x0001
    fc0c:	2000      	movs	r0, #0
    fc0e:	9000      	str	r0, [sp, #0]
    fc10:	4b17      	ldr	r3, [pc, #92]	; (fc70 <modlog_init+0xc4>)
    fc12:	681c      	ldr	r4, [r3, #0]
    fc14:	4603      	mov	r3, r0
    fc16:	4602      	mov	r2, r0
    fc18:	4601      	mov	r1, r0
    fc1a:	47a0      	blx	r4
    fc1c:	e7d4      	b.n	fbc8 <modlog_init+0x1c>
    SYSINIT_PANIC_ASSERT(rc == 0);
    fc1e:	f7fc fae3 	bl	c1e8 <hal_debugger_connected>
    fc22:	b100      	cbz	r0, fc26 <modlog_init+0x7a>
    fc24:	be01      	bkpt	0x0001
    fc26:	2000      	movs	r0, #0
    fc28:	9000      	str	r0, [sp, #0]
    fc2a:	4b11      	ldr	r3, [pc, #68]	; (fc70 <modlog_init+0xc4>)
    fc2c:	681c      	ldr	r4, [r3, #0]
    fc2e:	4603      	mov	r3, r0
    fc30:	4602      	mov	r2, r0
    fc32:	4601      	mov	r1, r0
    fc34:	47a0      	blx	r4
    fc36:	e7d0      	b.n	fbda <modlog_init+0x2e>
    SYSINIT_PANIC_ASSERT(rc == 0);
    fc38:	f7fc fad6 	bl	c1e8 <hal_debugger_connected>
    fc3c:	b100      	cbz	r0, fc40 <modlog_init+0x94>
    fc3e:	be01      	bkpt	0x0001
    fc40:	2000      	movs	r0, #0
    fc42:	9000      	str	r0, [sp, #0]
    fc44:	4b0a      	ldr	r3, [pc, #40]	; (fc70 <modlog_init+0xc4>)
    fc46:	681c      	ldr	r4, [r3, #0]
    fc48:	4603      	mov	r3, r0
    fc4a:	4602      	mov	r2, r0
    fc4c:	4601      	mov	r1, r0
    fc4e:	47a0      	blx	r4
}
    fc50:	e7cc      	b.n	fbec <modlog_init+0x40>
    fc52:	bf00      	nop
    fc54:	20003bd8 	.word	0x20003bd8
    fc58:	0002af0c 	.word	0x0002af0c
    fc5c:	20002330 	.word	0x20002330
    fc60:	20003bac 	.word	0x20003bac
    fc64:	200023f0 	.word	0x200023f0
    fc68:	2000232c 	.word	0x2000232c
    fc6c:	200023f4 	.word	0x200023f4
    fc70:	20000144 	.word	0x20000144

0000fc74 <mfg_seek_next_aux>:
 *                                  for reading.
 *                              Other MFG error code on failure.
 */
static int
mfg_seek_next_aux(struct mfg_reader *reader)
{
    fc74:	b530      	push	{r4, r5, lr}
    fc76:	b083      	sub	sp, #12
    const struct flash_area *fap;
    const struct mfg_mmr *mmr;
    int rc;

    if (reader->mmr_idx >= mfg_num_mmrs) {
    fc78:	7885      	ldrb	r5, [r0, #2]
    fc7a:	4b21      	ldr	r3, [pc, #132]	; (fd00 <mfg_seek_next_aux+0x8c>)
    fc7c:	681b      	ldr	r3, [r3, #0]
    fc7e:	429d      	cmp	r5, r3
    fc80:	da32      	bge.n	fce8 <mfg_seek_next_aux+0x74>
    fc82:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }

    mmr = &mfg_mmrs[reader->mmr_idx];

    rc = flash_area_open(mmr->area_id, &fap);
    fc84:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    fc88:	0093      	lsls	r3, r2, #2
    fc8a:	a901      	add	r1, sp, #4
    fc8c:	4a1d      	ldr	r2, [pc, #116]	; (fd04 <mfg_seek_next_aux+0x90>)
    fc8e:	5cd0      	ldrb	r0, [r2, r3]
    fc90:	f7ff fb4c 	bl	f32c <flash_area_open>
    if (rc != 0) {
    fc94:	bb58      	cbnz	r0, fcee <mfg_seek_next_aux+0x7a>
        return SYS_EIO;
    }

    if (reader->offset == 0) {
    fc96:	6862      	ldr	r2, [r4, #4]
    fc98:	b9c2      	cbnz	r2, fccc <mfg_seek_next_aux+0x58>
        /* First seek; advance to the start of the MMR. */
        reader->offset = mmr->offset;
    fc9a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    fc9e:	00aa      	lsls	r2, r5, #2
    fca0:	4b18      	ldr	r3, [pc, #96]	; (fd04 <mfg_seek_next_aux+0x90>)
    fca2:	4413      	add	r3, r2
    fca4:	685b      	ldr	r3, [r3, #4]
    fca6:	6063      	str	r3, [r4, #4]
    } else {
        /* Follow-up seek; skip the current TLV. */
        reader->offset += MFG_META_TLV_SZ + reader->cur_tlv.size;
    }

    if (reader->offset >= fap->fa_size - MFG_META_FOOTER_SZ) {
    fca8:	6861      	ldr	r1, [r4, #4]
    fcaa:	9801      	ldr	r0, [sp, #4]
    fcac:	6883      	ldr	r3, [r0, #8]
    fcae:	3b08      	subs	r3, #8
    fcb0:	4299      	cmp	r1, r3
    fcb2:	d310      	bcc.n	fcd6 <mfg_seek_next_aux+0x62>
        /* Reached end of the MMR; advance to the next MMR if one exists. */
        if (reader->mmr_idx + 1 >= mfg_num_mmrs) {
    fcb4:	78a3      	ldrb	r3, [r4, #2]
    fcb6:	1c59      	adds	r1, r3, #1
    fcb8:	4a11      	ldr	r2, [pc, #68]	; (fd00 <mfg_seek_next_aux+0x8c>)
    fcba:	6812      	ldr	r2, [r2, #0]
    fcbc:	4291      	cmp	r1, r2
    fcbe:	da19      	bge.n	fcf4 <mfg_seek_next_aux+0x80>
            rc = SYS_EDONE;
        } else {
            reader->offset = 0;
    fcc0:	2200      	movs	r2, #0
    fcc2:	6062      	str	r2, [r4, #4]
            reader->mmr_idx++;
    fcc4:	70a1      	strb	r1, [r4, #2]
            rc = SYS_EAGAIN;
    fcc6:	f06f 0305 	mvn.w	r3, #5
    fcca:	e015      	b.n	fcf8 <mfg_seek_next_aux+0x84>
        reader->offset += MFG_META_TLV_SZ + reader->cur_tlv.size;
    fccc:	7863      	ldrb	r3, [r4, #1]
    fcce:	4413      	add	r3, r2
    fcd0:	3302      	adds	r3, #2
    fcd2:	6063      	str	r3, [r4, #4]
    fcd4:	e7e8      	b.n	fca8 <mfg_seek_next_aux+0x34>
        }
        goto done;
    }

    /* Read current TLV header. */
    rc = flash_area_read(fap, reader->offset, &reader->cur_tlv,
    fcd6:	2302      	movs	r3, #2
    fcd8:	4622      	mov	r2, r4
    fcda:	f7ff fb41 	bl	f360 <flash_area_read>
                         MFG_META_TLV_SZ);
    if (rc != 0) {
    fcde:	4603      	mov	r3, r0
    fce0:	b150      	cbz	r0, fcf8 <mfg_seek_next_aux+0x84>
        rc = SYS_EIO;
    fce2:	f06f 0304 	mvn.w	r3, #4
    fce6:	e007      	b.n	fcf8 <mfg_seek_next_aux+0x84>
        return SYS_EINVAL;
    fce8:	f06f 0301 	mvn.w	r3, #1
    fcec:	e004      	b.n	fcf8 <mfg_seek_next_aux+0x84>
        return SYS_EIO;
    fcee:	f06f 0304 	mvn.w	r3, #4
    fcf2:	e001      	b.n	fcf8 <mfg_seek_next_aux+0x84>
            rc = SYS_EDONE;
    fcf4:	f06f 030e 	mvn.w	r3, #14
    }

done:
    flash_area_close(fap);
    return rc;
}
    fcf8:	4618      	mov	r0, r3
    fcfa:	b003      	add	sp, #12
    fcfc:	bd30      	pop	{r4, r5, pc}
    fcfe:	bf00      	nop
    fd00:	20002434 	.word	0x20002434
    fd04:	2000241c 	.word	0x2000241c

0000fd08 <mfg_read_mmr>:
/**
 * Reads an MMR from the end of the specified flash area.
 */
static int
mfg_read_mmr(uint8_t area_id, struct mfg_mmr *out_mmr)
{
    fd08:	b530      	push	{r4, r5, lr}
    fd0a:	b085      	sub	sp, #20
    fd0c:	4605      	mov	r5, r0
    fd0e:	460c      	mov	r4, r1
    const struct flash_area *fap;
    struct mfg_meta_footer ftr;
    int rc;

    rc = flash_area_open(area_id, &fap);
    fd10:	a903      	add	r1, sp, #12
    fd12:	f7ff fb0b 	bl	f32c <flash_area_open>
    if (rc != 0) {
    fd16:	b9e8      	cbnz	r0, fd54 <mfg_read_mmr+0x4c>
        return SYS_EIO;
    }

    /* Read the MMR footer. */
    rc = flash_area_read(fap, fap->fa_size - sizeof ftr, &ftr, sizeof ftr);
    fd18:	9803      	ldr	r0, [sp, #12]
    fd1a:	6881      	ldr	r1, [r0, #8]
    fd1c:	2308      	movs	r3, #8
    fd1e:	aa01      	add	r2, sp, #4
    fd20:	3908      	subs	r1, #8
    fd22:	f7ff fb1d 	bl	f360 <flash_area_read>
    flash_area_close(fap);

    if (rc != 0) {
    fd26:	4601      	mov	r1, r0
    fd28:	b9b8      	cbnz	r0, fd5a <mfg_read_mmr+0x52>
        return SYS_EIO;
    }

    if (ftr.magic != MFG_META_MAGIC) {
    fd2a:	9a02      	ldr	r2, [sp, #8]
    fd2c:	4b11      	ldr	r3, [pc, #68]	; (fd74 <mfg_read_mmr+0x6c>)
    fd2e:	429a      	cmp	r2, r3
    fd30:	d116      	bne.n	fd60 <mfg_read_mmr+0x58>
        return SYS_ENODEV;
    }

    if (ftr.version != MFG_META_VERSION) {
    fd32:	f89d 3006 	ldrb.w	r3, [sp, #6]
    fd36:	2b02      	cmp	r3, #2
    fd38:	d115      	bne.n	fd66 <mfg_read_mmr+0x5e>
        return SYS_ENOTSUP;
    }

    if (ftr.size > fap->fa_size) {
    fd3a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    fd3e:	9b03      	ldr	r3, [sp, #12]
    fd40:	689b      	ldr	r3, [r3, #8]
    fd42:	429a      	cmp	r2, r3
    fd44:	d812      	bhi.n	fd6c <mfg_read_mmr+0x64>
        return SYS_ENODEV;
    }

    *out_mmr = (struct mfg_mmr) {
        .area_id = area_id,
        .offset = fap->fa_size - ftr.size,
    fd46:	1a9b      	subs	r3, r3, r2
    *out_mmr = (struct mfg_mmr) {
    fd48:	7025      	strb	r5, [r4, #0]
    fd4a:	6063      	str	r3, [r4, #4]
    fd4c:	60a2      	str	r2, [r4, #8]
        .size = ftr.size,
    };

    return 0;
}
    fd4e:	4608      	mov	r0, r1
    fd50:	b005      	add	sp, #20
    fd52:	bd30      	pop	{r4, r5, pc}
        return SYS_EIO;
    fd54:	f06f 0104 	mvn.w	r1, #4
    fd58:	e7f9      	b.n	fd4e <mfg_read_mmr+0x46>
        return SYS_EIO;
    fd5a:	f06f 0104 	mvn.w	r1, #4
    fd5e:	e7f6      	b.n	fd4e <mfg_read_mmr+0x46>
        return SYS_ENODEV;
    fd60:	f06f 0108 	mvn.w	r1, #8
    fd64:	e7f3      	b.n	fd4e <mfg_read_mmr+0x46>
        return SYS_ENOTSUP;
    fd66:	f06f 010b 	mvn.w	r1, #11
    fd6a:	e7f0      	b.n	fd4e <mfg_read_mmr+0x46>
        return SYS_ENODEV;
    fd6c:	f06f 0108 	mvn.w	r1, #8
    fd70:	e7ed      	b.n	fd4e <mfg_read_mmr+0x46>
    fd72:	bf00      	nop
    fd74:	3bb2a269 	.word	0x3bb2a269

0000fd78 <mfg_read_next_mmr>:
 * Reads an MMR from the end of the specified flash area.  On success, the
 * global MMR list is populated with the result for subsequent reading.
 */
static int
mfg_read_next_mmr(uint8_t area_id)
{
    fd78:	b508      	push	{r3, lr}
    int rc;
    int i;

    /* Detect if this MMR has already been read. */
    for (i = 0; i < mfg_num_mmrs; i++) {
    fd7a:	2300      	movs	r3, #0
    fd7c:	4a11      	ldr	r2, [pc, #68]	; (fdc4 <mfg_read_next_mmr+0x4c>)
    fd7e:	6812      	ldr	r2, [r2, #0]
    fd80:	429a      	cmp	r2, r3
    fd82:	dd08      	ble.n	fd96 <mfg_read_next_mmr+0x1e>
        if (mfg_mmrs[i].area_id == area_id) {
    fd84:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    fd88:	008a      	lsls	r2, r1, #2
    fd8a:	490f      	ldr	r1, [pc, #60]	; (fdc8 <mfg_read_next_mmr+0x50>)
    fd8c:	5c8a      	ldrb	r2, [r1, r2]
    fd8e:	4282      	cmp	r2, r0
    fd90:	d011      	beq.n	fdb6 <mfg_read_next_mmr+0x3e>
    for (i = 0; i < mfg_num_mmrs; i++) {
    fd92:	3301      	adds	r3, #1
    fd94:	e7f2      	b.n	fd7c <mfg_read_next_mmr+0x4>
            return SYS_EALREADY;
        }
    }

    if (mfg_num_mmrs >= MYNEWT_VAL(MFG_MAX_MMRS)) {
    fd96:	2a01      	cmp	r2, #1
    fd98:	dc11      	bgt.n	fdbe <mfg_read_next_mmr+0x46>
        return SYS_ENOMEM;
    }

    rc = mfg_read_mmr(area_id, &mfg_mmrs[mfg_num_mmrs]);
    fd9a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    fd9e:	0093      	lsls	r3, r2, #2
    fda0:	4909      	ldr	r1, [pc, #36]	; (fdc8 <mfg_read_next_mmr+0x50>)
    fda2:	4419      	add	r1, r3
    fda4:	f7ff ffb0 	bl	fd08 <mfg_read_mmr>
    if (rc != 0) {
    fda8:	4603      	mov	r3, r0
    fdaa:	b930      	cbnz	r0, fdba <mfg_read_next_mmr+0x42>
        return rc;
    }

    mfg_num_mmrs++;
    fdac:	4905      	ldr	r1, [pc, #20]	; (fdc4 <mfg_read_next_mmr+0x4c>)
    fdae:	680a      	ldr	r2, [r1, #0]
    fdb0:	3201      	adds	r2, #1
    fdb2:	600a      	str	r2, [r1, #0]
    return 0;
    fdb4:	e001      	b.n	fdba <mfg_read_next_mmr+0x42>
            return SYS_EALREADY;
    fdb6:	f06f 030a 	mvn.w	r3, #10
}
    fdba:	4618      	mov	r0, r3
    fdbc:	bd08      	pop	{r3, pc}
        return SYS_ENOMEM;
    fdbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    fdc2:	e7fa      	b.n	fdba <mfg_read_next_mmr+0x42>
    fdc4:	20002434 	.word	0x20002434
    fdc8:	2000241c 	.word	0x2000241c

0000fdcc <mfg_open_flash_area>:
{
    fdcc:	b508      	push	{r3, lr}
    assert(reader->mmr_idx < mfg_num_mmrs);
    fdce:	7883      	ldrb	r3, [r0, #2]
    fdd0:	4a0d      	ldr	r2, [pc, #52]	; (fe08 <mfg_open_flash_area+0x3c>)
    fdd2:	6812      	ldr	r2, [r2, #0]
    fdd4:	4293      	cmp	r3, r2
    fdd6:	da0a      	bge.n	fdee <mfg_open_flash_area+0x22>
    rc = flash_area_open(mmr->area_id, fap);
    fdd8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    fddc:	009a      	lsls	r2, r3, #2
    fdde:	4b0b      	ldr	r3, [pc, #44]	; (fe0c <mfg_open_flash_area+0x40>)
    fde0:	5c98      	ldrb	r0, [r3, r2]
    fde2:	f7ff faa3 	bl	f32c <flash_area_open>
    if (rc != 0) {
    fde6:	4603      	mov	r3, r0
    fde8:	b958      	cbnz	r0, fe02 <mfg_open_flash_area+0x36>
}
    fdea:	4618      	mov	r0, r3
    fdec:	bd08      	pop	{r3, pc}
    assert(reader->mmr_idx < mfg_num_mmrs);
    fdee:	f7fc f9fb 	bl	c1e8 <hal_debugger_connected>
    fdf2:	b100      	cbz	r0, fdf6 <mfg_open_flash_area+0x2a>
    fdf4:	be01      	bkpt	0x0001
    fdf6:	2300      	movs	r3, #0
    fdf8:	461a      	mov	r2, r3
    fdfa:	4619      	mov	r1, r3
    fdfc:	4618      	mov	r0, r3
    fdfe:	f7fc fc2d 	bl	c65c <__assert_func>
        return SYS_EIO;
    fe02:	f06f 0304 	mvn.w	r3, #4
    fe06:	e7f0      	b.n	fdea <mfg_open_flash_area+0x1e>
    fe08:	20002434 	.word	0x20002434
    fe0c:	2000241c 	.word	0x2000241c

0000fe10 <mfg_read_tlv_body>:
{
    fe10:	b570      	push	{r4, r5, r6, lr}
    fe12:	b082      	sub	sp, #8
    fe14:	4606      	mov	r6, r0
    fe16:	460c      	mov	r4, r1
    fe18:	4615      	mov	r5, r2
    rc = mfg_open_flash_area(reader, &fap);
    fe1a:	a901      	add	r1, sp, #4
    fe1c:	f7ff ffd6 	bl	fdcc <mfg_open_flash_area>
    if (rc != 0) {
    fe20:	4603      	mov	r3, r0
    fe22:	b110      	cbz	r0, fe2a <mfg_read_tlv_body+0x1a>
}
    fe24:	4618      	mov	r0, r3
    fe26:	b002      	add	sp, #8
    fe28:	bd70      	pop	{r4, r5, r6, pc}
    memset(dst, 0, max_size);
    fe2a:	462a      	mov	r2, r5
    fe2c:	2100      	movs	r1, #0
    fe2e:	4620      	mov	r0, r4
    fe30:	f7fe fb46 	bl	e4c0 <memset>
    read_sz = min(max_size, reader->cur_tlv.size);
    fe34:	7873      	ldrb	r3, [r6, #1]
    rc = flash_area_read(fap, reader->offset + MFG_META_TLV_SZ, dst, read_sz);
    fe36:	6871      	ldr	r1, [r6, #4]
    fe38:	42ab      	cmp	r3, r5
    fe3a:	bfa8      	it	ge
    fe3c:	462b      	movge	r3, r5
    fe3e:	4622      	mov	r2, r4
    fe40:	3102      	adds	r1, #2
    fe42:	9801      	ldr	r0, [sp, #4]
    fe44:	f7ff fa8c 	bl	f360 <flash_area_read>
    if (rc != 0) {
    fe48:	4603      	mov	r3, r0
    fe4a:	2800      	cmp	r0, #0
    fe4c:	d0ea      	beq.n	fe24 <mfg_read_tlv_body+0x14>
        return SYS_EIO;
    fe4e:	f06f 0304 	mvn.w	r3, #4
    fe52:	e7e7      	b.n	fe24 <mfg_read_tlv_body+0x14>

0000fe54 <mfg_seek_next>:
{
    fe54:	b510      	push	{r4, lr}
    fe56:	4604      	mov	r4, r0
        rc = mfg_seek_next_aux(reader);
    fe58:	4620      	mov	r0, r4
    fe5a:	f7ff ff0b 	bl	fc74 <mfg_seek_next_aux>
    } while (rc == SYS_EAGAIN);
    fe5e:	f110 0f06 	cmn.w	r0, #6
    fe62:	d0f9      	beq.n	fe58 <mfg_seek_next+0x4>
}
    fe64:	bd10      	pop	{r4, pc}

0000fe66 <mfg_seek_next_with_type>:
{
    fe66:	b538      	push	{r3, r4, r5, lr}
    fe68:	4604      	mov	r4, r0
    fe6a:	460d      	mov	r5, r1
        rc = mfg_seek_next(reader);
    fe6c:	4620      	mov	r0, r4
    fe6e:	f7ff fff1 	bl	fe54 <mfg_seek_next>
        if (rc != 0) {
    fe72:	4602      	mov	r2, r0
    fe74:	b910      	cbnz	r0, fe7c <mfg_seek_next_with_type+0x16>
        if (reader->cur_tlv.type == type) {
    fe76:	7823      	ldrb	r3, [r4, #0]
    fe78:	42ab      	cmp	r3, r5
    fe7a:	d1f7      	bne.n	fe6c <mfg_seek_next_with_type+0x6>
}
    fe7c:	4610      	mov	r0, r2
    fe7e:	bd38      	pop	{r3, r4, r5, pc}

0000fe80 <mfg_read_tlv_flash_area>:
{
    fe80:	b508      	push	{r3, lr}
    return mfg_read_tlv_body(reader, out_mfa, sizeof *out_mfa);
    fe82:	220a      	movs	r2, #10
    fe84:	f7ff ffc4 	bl	fe10 <mfg_read_tlv_body>
}
    fe88:	bd08      	pop	{r3, pc}

0000fe8a <mfg_read_tlv_mmr_ref>:
{
    fe8a:	b508      	push	{r3, lr}
    return mfg_read_tlv_body(reader, out_mr, sizeof *out_mr);
    fe8c:	2201      	movs	r2, #1
    fe8e:	f7ff ffbf 	bl	fe10 <mfg_read_tlv_body>
}
    fe92:	bd08      	pop	{r3, pc}

0000fe94 <mfg_init>:
 * called before any TLVs can be read.  No-op if this function has already
 * executed successfully.
 */
void
mfg_init(void)
{
    fe94:	b508      	push	{r3, lr}
    int rc;

    if (mfg_initialized) {
    fe96:	4b0d      	ldr	r3, [pc, #52]	; (fecc <mfg_init+0x38>)
    fe98:	781b      	ldrb	r3, [r3, #0]
    fe9a:	b94b      	cbnz	r3, feb0 <mfg_init+0x1c>
        return;
    }
    mfg_initialized = true;
    fe9c:	4b0b      	ldr	r3, [pc, #44]	; (fecc <mfg_init+0x38>)
    fe9e:	2201      	movs	r2, #1
    fea0:	701a      	strb	r2, [r3, #0]

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
    fea2:	4b0b      	ldr	r3, [pc, #44]	; (fed0 <mfg_init+0x3c>)
    fea4:	781b      	ldrb	r3, [r3, #0]
    fea6:	b123      	cbz	r3, feb2 <mfg_init+0x1e>

    /* Read the first MMR from the boot loader area. */
    rc = mfg_read_next_mmr(FLASH_AREA_BOOTLOADER);
    fea8:	2000      	movs	r0, #0
    feaa:	f7ff ff65 	bl	fd78 <mfg_read_next_mmr>
    if (rc != 0) {
    feae:	b150      	cbz	r0, fec6 <mfg_init+0x32>

    return;

err:
    MFG_LOG_ERROR("failed to read MMRs: rc=%d", rc);
}
    feb0:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
    feb2:	f7fc f999 	bl	c1e8 <hal_debugger_connected>
    feb6:	b100      	cbz	r0, feba <mfg_init+0x26>
    feb8:	be01      	bkpt	0x0001
    feba:	2300      	movs	r3, #0
    febc:	461a      	mov	r2, r3
    febe:	4619      	mov	r1, r3
    fec0:	4618      	mov	r0, r3
    fec2:	f7fc fbcb 	bl	c65c <__assert_func>
    rc = mfg_read_mmr_refs();
    fec6:	f000 f80d 	bl	fee4 <mfg_read_mmr_refs>
err:
    feca:	e7f1      	b.n	feb0 <mfg_init+0x1c>
    fecc:	20002418 	.word	0x20002418
    fed0:	20003bd8 	.word	0x20003bd8

0000fed4 <mfg_open>:
{
    fed4:	b510      	push	{r4, lr}
    fed6:	4604      	mov	r4, r0
    mfg_init();
    fed8:	f7ff ffdc 	bl	fe94 <mfg_init>
    *out_reader = (struct mfg_reader) { 0 };
    fedc:	2300      	movs	r3, #0
    fede:	6023      	str	r3, [r4, #0]
    fee0:	6063      	str	r3, [r4, #4]
}
    fee2:	bd10      	pop	{r4, pc}

0000fee4 <mfg_read_mmr_refs>:
{
    fee4:	b500      	push	{lr}
    fee6:	b085      	sub	sp, #20
    mfg_open(&reader);
    fee8:	a801      	add	r0, sp, #4
    feea:	f7ff fff3 	bl	fed4 <mfg_open>
        rc = mfg_seek_next_with_type(&reader, MFG_META_TLV_TYPE_MMR_REF);
    feee:	2104      	movs	r1, #4
    fef0:	eb0d 0001 	add.w	r0, sp, r1
    fef4:	f7ff ffb7 	bl	fe66 <mfg_seek_next_with_type>
    fef8:	4603      	mov	r3, r0
        switch (rc) {
    fefa:	f110 0f0f 	cmn.w	r0, #15
    fefe:	d004      	beq.n	ff0a <mfg_read_mmr_refs+0x26>
    ff00:	b128      	cbz	r0, ff0e <mfg_read_mmr_refs+0x2a>
}
    ff02:	4618      	mov	r0, r3
    ff04:	b005      	add	sp, #20
    ff06:	f85d fb04 	ldr.w	pc, [sp], #4
            return 0;
    ff0a:	2300      	movs	r3, #0
    ff0c:	e7f9      	b.n	ff02 <mfg_read_mmr_refs+0x1e>
        rc = mfg_read_tlv_mmr_ref(&reader, &mmr_ref);
    ff0e:	a903      	add	r1, sp, #12
    ff10:	a801      	add	r0, sp, #4
    ff12:	f7ff ffba 	bl	fe8a <mfg_read_tlv_mmr_ref>
        if (rc != 0) {
    ff16:	4603      	mov	r3, r0
    ff18:	2800      	cmp	r0, #0
    ff1a:	d1f2      	bne.n	ff02 <mfg_read_mmr_refs+0x1e>
        rc = mfg_read_next_mmr(mmr_ref.area_id);
    ff1c:	f89d 000c 	ldrb.w	r0, [sp, #12]
    ff20:	f7ff ff2a 	bl	fd78 <mfg_read_next_mmr>
        if (rc != 0 && rc != SYS_EALREADY) {
    ff24:	4603      	mov	r3, r0
    ff26:	2800      	cmp	r0, #0
    ff28:	d0e1      	beq.n	feee <mfg_read_mmr_refs+0xa>
    ff2a:	f110 0f0b 	cmn.w	r0, #11
    ff2e:	d0de      	beq.n	feee <mfg_read_mmr_refs+0xa>
    ff30:	e7e7      	b.n	ff02 <mfg_read_mmr_refs+0x1e>

0000ff32 <stats_offset>:
    STAILQ_HEAD_INITIALIZER(g_stats_registry);

static size_t
stats_offset(const struct stats_hdr *hdr)
{
    if (hdr->s_flags & STATS_HDR_F_PERSIST) {
    ff32:	88c3      	ldrh	r3, [r0, #6]
    ff34:	f013 0f01 	tst.w	r3, #1
    ff38:	d101      	bne.n	ff3e <stats_offset+0xc>
        return sizeof (struct stats_persisted_hdr);
    } else {
        return sizeof (struct stats_hdr);
    ff3a:	200c      	movs	r0, #12
    }
}
    ff3c:	4770      	bx	lr
        return sizeof (struct stats_persisted_hdr);
    ff3e:	2030      	movs	r0, #48	; 0x30
    ff40:	4770      	bx	lr
	...

0000ff44 <stats_register_internal>:
    return (uint8_t *)hdr + offset;
}

static int
stats_register_internal(const char *name, struct stats_hdr *shdr)
{
    ff44:	b570      	push	{r4, r5, r6, lr}
    ff46:	4606      	mov	r6, r0
    ff48:	460d      	mov	r5, r1
    int rc;

    /* Don't allow duplicate entries, return an error if this stat
     * is already registered.
     */
    STAILQ_FOREACH(cur, &g_stats_registry, s_next) {
    ff4a:	4b0f      	ldr	r3, [pc, #60]	; (ff88 <stats_register_internal+0x44>)
    ff4c:	681c      	ldr	r4, [r3, #0]
    ff4e:	b144      	cbz	r4, ff62 <stats_register_internal+0x1e>
        if (!strcmp(cur->s_name, name) || cur == shdr) {
    ff50:	4631      	mov	r1, r6
    ff52:	6820      	ldr	r0, [r4, #0]
    ff54:	f7fe fad0 	bl	e4f8 <strcmp>
    ff58:	b180      	cbz	r0, ff7c <stats_register_internal+0x38>
    ff5a:	42ac      	cmp	r4, r5
    ff5c:	d011      	beq.n	ff82 <stats_register_internal+0x3e>
    STAILQ_FOREACH(cur, &g_stats_registry, s_next) {
    ff5e:	68a4      	ldr	r4, [r4, #8]
    ff60:	e7f5      	b.n	ff4e <stats_register_internal+0xa>
            rc = -1;
            goto err;
        }
    }

    shdr->s_name = name;
    ff62:	602e      	str	r6, [r5, #0]
    if (shdr->s_flags & STATS_HDR_F_PERSIST) {
        stats_conf_assert_valid(shdr);
    }
#endif

    STAILQ_INSERT_TAIL(&g_stats_registry, shdr, s_next);
    ff64:	2000      	movs	r0, #0
    ff66:	60a8      	str	r0, [r5, #8]
    ff68:	4b07      	ldr	r3, [pc, #28]	; (ff88 <stats_register_internal+0x44>)
    ff6a:	685a      	ldr	r2, [r3, #4]
    ff6c:	6015      	str	r5, [r2, #0]
    ff6e:	3508      	adds	r5, #8
    ff70:	605d      	str	r5, [r3, #4]

    STATS_INC(g_stats_stats, num_registered);
    ff72:	4a06      	ldr	r2, [pc, #24]	; (ff8c <stats_register_internal+0x48>)
    ff74:	68d3      	ldr	r3, [r2, #12]
    ff76:	3301      	adds	r3, #1
    ff78:	60d3      	str	r3, [r2, #12]

    return (0);
err:
    return (rc);
}
    ff7a:	bd70      	pop	{r4, r5, r6, pc}
    return (rc);
    ff7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    ff80:	e7fb      	b.n	ff7a <stats_register_internal+0x36>
    ff82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    ff86:	e7f8      	b.n	ff7a <stats_register_internal+0x36>
    ff88:	2000013c 	.word	0x2000013c
    ff8c:	20003bc8 	.word	0x20003bc8

0000ff90 <stats_init>:
 * @return 0 on success, non-zero error code on failure.
 */
int
stats_init(struct stats_hdr *shdr, uint8_t size, uint8_t cnt,
        const struct stats_name_map *map, uint8_t map_cnt)
{
    ff90:	b570      	push	{r4, r5, r6, lr}
    ff92:	4604      	mov	r4, r0
    ff94:	460e      	mov	r6, r1
    ff96:	4615      	mov	r5, r2
    size_t offset;

    offset = stats_offset(shdr);
    ff98:	f7ff ffcb 	bl	ff32 <stats_offset>
    memset((uint8_t *)shdr + offset, 0, size * cnt);
    ff9c:	fb05 f206 	mul.w	r2, r5, r6
    ffa0:	2100      	movs	r1, #0
    ffa2:	4420      	add	r0, r4
    ffa4:	f7fe fa8c 	bl	e4c0 <memset>

    shdr->s_size = size;
    ffa8:	7126      	strb	r6, [r4, #4]
    shdr->s_cnt = cnt;
    ffaa:	7165      	strb	r5, [r4, #5]
    shdr->s_flags = 0;
    ffac:	2000      	movs	r0, #0
    ffae:	80e0      	strh	r0, [r4, #6]
    shdr->s_map = map;
    shdr->s_map_cnt = map_cnt;
#endif

    return (0);
}
    ffb0:	bd70      	pop	{r4, r5, r6, pc}
	...

0000ffb4 <stats_module_init_internal>:
{
    ffb4:	b500      	push	{lr}
    ffb6:	b083      	sub	sp, #12
    STAILQ_INIT(&g_stats_registry);
    ffb8:	4a0a      	ldr	r2, [pc, #40]	; (ffe4 <stats_module_init_internal+0x30>)
    ffba:	2300      	movs	r3, #0
    ffbc:	6013      	str	r3, [r2, #0]
    ffbe:	6052      	str	r2, [r2, #4]
    rc = stats_init(STATS_HDR(g_stats_stats),
    ffc0:	9300      	str	r3, [sp, #0]
    ffc2:	2201      	movs	r2, #1
    ffc4:	2104      	movs	r1, #4
    ffc6:	4808      	ldr	r0, [pc, #32]	; (ffe8 <stats_module_init_internal+0x34>)
    ffc8:	f7ff ffe2 	bl	ff90 <stats_init>
    if (rc) {
    ffcc:	4603      	mov	r3, r0
    ffce:	b118      	cbz	r0, ffd8 <stats_module_init_internal+0x24>
}
    ffd0:	4618      	mov	r0, r3
    ffd2:	b003      	add	sp, #12
    ffd4:	f85d fb04 	ldr.w	pc, [sp], #4
    rc = stats_register_internal("stat", STATS_HDR(g_stats_stats));
    ffd8:	4903      	ldr	r1, [pc, #12]	; (ffe8 <stats_module_init_internal+0x34>)
    ffda:	4804      	ldr	r0, [pc, #16]	; (ffec <stats_module_init_internal+0x38>)
    ffdc:	f7ff ffb2 	bl	ff44 <stats_register_internal>
    ffe0:	4603      	mov	r3, r0
    ffe2:	e7f5      	b.n	ffd0 <stats_module_init_internal+0x1c>
    ffe4:	2000013c 	.word	0x2000013c
    ffe8:	20003bc8 	.word	0x20003bc8
    ffec:	0002af20 	.word	0x0002af20

0000fff0 <stats_module_init>:
{
    fff0:	b510      	push	{r4, lr}
    fff2:	b082      	sub	sp, #8
    SYSINIT_ASSERT_ACTIVE();
    fff4:	4b11      	ldr	r3, [pc, #68]	; (1003c <stats_module_init+0x4c>)
    fff6:	781b      	ldrb	r3, [r3, #0]
    fff8:	b123      	cbz	r3, 10004 <stats_module_init+0x14>
    if (g_stats_stats.snum_registered) {
    fffa:	4b11      	ldr	r3, [pc, #68]	; (10040 <stats_module_init+0x50>)
    fffc:	68db      	ldr	r3, [r3, #12]
    fffe:	b15b      	cbz	r3, 10018 <stats_module_init+0x28>
}
   10000:	b002      	add	sp, #8
   10002:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   10004:	f7fc f8f0 	bl	c1e8 <hal_debugger_connected>
   10008:	b100      	cbz	r0, 1000c <stats_module_init+0x1c>
   1000a:	be01      	bkpt	0x0001
   1000c:	2300      	movs	r3, #0
   1000e:	461a      	mov	r2, r3
   10010:	4619      	mov	r1, r3
   10012:	4618      	mov	r0, r3
   10014:	f7fc fb22 	bl	c65c <__assert_func>
    rc = stats_module_init_internal();
   10018:	f7ff ffcc 	bl	ffb4 <stats_module_init_internal>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1001c:	2800      	cmp	r0, #0
   1001e:	d0ef      	beq.n	10000 <stats_module_init+0x10>
   10020:	f7fc f8e2 	bl	c1e8 <hal_debugger_connected>
   10024:	b100      	cbz	r0, 10028 <stats_module_init+0x38>
   10026:	be01      	bkpt	0x0001
   10028:	2000      	movs	r0, #0
   1002a:	9000      	str	r0, [sp, #0]
   1002c:	4b05      	ldr	r3, [pc, #20]	; (10044 <stats_module_init+0x54>)
   1002e:	681c      	ldr	r4, [r3, #0]
   10030:	4603      	mov	r3, r0
   10032:	4602      	mov	r2, r0
   10034:	4601      	mov	r1, r0
   10036:	47a0      	blx	r4
   10038:	e7e2      	b.n	10000 <stats_module_init+0x10>
   1003a:	bf00      	nop
   1003c:	20003bd8 	.word	0x20003bd8
   10040:	20003bc8 	.word	0x20003bc8
   10044:	20000144 	.word	0x20000144

00010048 <stats_register>:
 *
 * @return 0 on success, non-zero error code on failure.
 */
int
stats_register(const char *name, struct stats_hdr *shdr)
{
   10048:	b538      	push	{r3, r4, r5, lr}
   1004a:	4604      	mov	r4, r0
   1004c:	460d      	mov	r5, r1
    /*
     * We should always have at least "stat" registered so if there are no stats
     * registered, try to initialize module first. This allows to register stat
     * before sysinit is called (e.g. from BSP).
     */
    if (g_stats_stats.snum_registered == 0) {
   1004e:	4b07      	ldr	r3, [pc, #28]	; (1006c <stats_register+0x24>)
   10050:	68db      	ldr	r3, [r3, #12]
   10052:	b913      	cbnz	r3, 1005a <stats_register+0x12>
        if (stats_module_init_internal()) {
   10054:	f7ff ffae 	bl	ffb4 <stats_module_init_internal>
   10058:	b920      	cbnz	r0, 10064 <stats_register+0x1c>
            return -1;
        }
    }

    return stats_register_internal(name, shdr);
   1005a:	4629      	mov	r1, r5
   1005c:	4620      	mov	r0, r4
   1005e:	f7ff ff71 	bl	ff44 <stats_register_internal>
}
   10062:	bd38      	pop	{r3, r4, r5, pc}
            return -1;
   10064:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   10068:	e7fb      	b.n	10062 <stats_register+0x1a>
   1006a:	bf00      	nop
   1006c:	20003bc8 	.word	0x20003bc8

00010070 <stats_init_and_reg>:
 */
int
stats_init_and_reg(struct stats_hdr *shdr, uint8_t size, uint8_t cnt,
                   const struct stats_name_map *map, uint8_t map_cnt,
                   const char *name)
{
   10070:	b530      	push	{r4, r5, lr}
   10072:	b083      	sub	sp, #12
   10074:	4605      	mov	r5, r0
    int rc;

    rc = stats_init(shdr, size, cnt, map, map_cnt);
   10076:	f89d 4018 	ldrb.w	r4, [sp, #24]
   1007a:	9400      	str	r4, [sp, #0]
   1007c:	f7ff ff88 	bl	ff90 <stats_init>
    if (rc != 0) {
   10080:	4603      	mov	r3, r0
   10082:	b110      	cbz	r0, 1008a <stats_init_and_reg+0x1a>
    if (rc != 0) {
        return rc;
    }

    return rc;
}
   10084:	4618      	mov	r0, r3
   10086:	b003      	add	sp, #12
   10088:	bd30      	pop	{r4, r5, pc}
    rc = stats_register(name, shdr);
   1008a:	4629      	mov	r1, r5
   1008c:	9807      	ldr	r0, [sp, #28]
   1008e:	f7ff ffdb 	bl	10048 <stats_register>
   10092:	4603      	mov	r3, r0
   10094:	e7f6      	b.n	10084 <stats_init_and_reg+0x14>

00010096 <sysinit_dflt_panic_cb>:
#include "os/mynewt.h"

static void
sysinit_dflt_panic_cb(const char *file, int line, const char *func,
                      const char *expr, const char *msg)
{
   10096:	b508      	push	{r3, lr}
    if (msg != NULL) {
        fprintf(stderr, "sysinit failure: %s\n", msg);
    }
#endif

    __assert_func(file, line, func, expr);
   10098:	f7fc fae0 	bl	c65c <__assert_func>

0001009c <sysinit_start>:
}

void
sysinit_start(void)
{
    sysinit_active = 1;
   1009c:	4b01      	ldr	r3, [pc, #4]	; (100a4 <sysinit_start+0x8>)
   1009e:	2201      	movs	r2, #1
   100a0:	701a      	strb	r2, [r3, #0]
}
   100a2:	4770      	bx	lr
   100a4:	20003bd8 	.word	0x20003bd8

000100a8 <sysinit_end>:

void
sysinit_end(void)
{
    sysinit_active = 0;
   100a8:	4b01      	ldr	r3, [pc, #4]	; (100b0 <sysinit_end+0x8>)
   100aa:	2200      	movs	r2, #0
   100ac:	701a      	strb	r2, [r3, #0]
}
   100ae:	4770      	bx	lr
   100b0:	20003bd8 	.word	0x20003bd8

000100b4 <mem_init_mbuf_pool>:

int
mem_init_mbuf_pool(void *mem, struct os_mempool *mempool,
                   struct os_mbuf_pool *mbuf_pool, int num_blocks,
                   int block_size, char *name)
{
   100b4:	b570      	push	{r4, r5, r6, lr}
   100b6:	b082      	sub	sp, #8
   100b8:	460c      	mov	r4, r1
   100ba:	4616      	mov	r6, r2
    int rc;

    rc = os_mempool_init(mempool, num_blocks, block_size, mem, name);
   100bc:	b29d      	uxth	r5, r3
   100be:	9b07      	ldr	r3, [sp, #28]
   100c0:	9300      	str	r3, [sp, #0]
   100c2:	4603      	mov	r3, r0
   100c4:	9a06      	ldr	r2, [sp, #24]
   100c6:	4629      	mov	r1, r5
   100c8:	4620      	mov	r0, r4
   100ca:	f7fc feed 	bl	cea8 <os_mempool_init>
    if (rc != 0) {
   100ce:	b108      	cbz	r0, 100d4 <mem_init_mbuf_pool+0x20>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   100d0:	b002      	add	sp, #8
   100d2:	bd70      	pop	{r4, r5, r6, pc}
    rc = os_mbuf_pool_init(mbuf_pool, mempool, block_size, num_blocks);
   100d4:	462b      	mov	r3, r5
   100d6:	9a06      	ldr	r2, [sp, #24]
   100d8:	b292      	uxth	r2, r2
   100da:	4621      	mov	r1, r4
   100dc:	4630      	mov	r0, r6
   100de:	f7fd fc57 	bl	d990 <os_mbuf_pool_init>
   100e2:	e7f5      	b.n	100d0 <mem_init_mbuf_pool+0x1c>

000100e4 <mem_split_frag>:
 *                              NULL on failure.
 */
struct os_mbuf *
mem_split_frag(struct os_mbuf **om, uint16_t max_frag_sz,
               mem_frag_alloc_fn *alloc_cb, void *cb_arg)
{
   100e4:	b570      	push	{r4, r5, r6, lr}
   100e6:	460d      	mov	r5, r1
    struct os_mbuf *frag;
    int rc;

    if (OS_MBUF_PKTLEN(*om) <= max_frag_sz) {
   100e8:	6806      	ldr	r6, [r0, #0]
   100ea:	8a31      	ldrh	r1, [r6, #16]
   100ec:	42a9      	cmp	r1, r5
   100ee:	d915      	bls.n	1011c <mem_split_frag+0x38>
   100f0:	4619      	mov	r1, r3
   100f2:	4604      	mov	r4, r0
        *om = NULL;
        return frag;
    }

    /* Packet needs to be split.  Allocate a new buffer for the fragment. */
    frag = alloc_cb(max_frag_sz, cb_arg);
   100f4:	4628      	mov	r0, r5
   100f6:	4790      	blx	r2
    if (frag == NULL) {
   100f8:	4606      	mov	r6, r0
   100fa:	b190      	cbz	r0, 10122 <mem_split_frag+0x3e>
        goto err;
    }

    /* Move data from the front of the packet into the fragment mbuf. */
    rc = os_mbuf_appendfrom(frag, *om, 0, max_frag_sz);
   100fc:	462b      	mov	r3, r5
   100fe:	2200      	movs	r2, #0
   10100:	6821      	ldr	r1, [r4, #0]
   10102:	f7fd fcff 	bl	db04 <os_mbuf_appendfrom>
    if (rc != 0) {
   10106:	b960      	cbnz	r0, 10122 <mem_split_frag+0x3e>
        goto err;
    }
    os_mbuf_adj(*om, max_frag_sz);
   10108:	4629      	mov	r1, r5
   1010a:	6820      	ldr	r0, [r4, #0]
   1010c:	f7fd fd51 	bl	dbb2 <os_mbuf_adj>

    /* Free unused portion of of source mbuf chain, if possible. */
    *om = os_mbuf_trim_front(*om);
   10110:	6820      	ldr	r0, [r4, #0]
   10112:	f7fd ffc8 	bl	e0a6 <os_mbuf_trim_front>
   10116:	6020      	str	r0, [r4, #0]
    return frag;

err:
    os_mbuf_free_chain(frag);
    return NULL;
}
   10118:	4630      	mov	r0, r6
   1011a:	bd70      	pop	{r4, r5, r6, pc}
        *om = NULL;
   1011c:	2300      	movs	r3, #0
   1011e:	6003      	str	r3, [r0, #0]
        return frag;
   10120:	e7fa      	b.n	10118 <mem_split_frag+0x34>
    os_mbuf_free_chain(frag);
   10122:	4630      	mov	r0, r6
   10124:	f7fd fc77 	bl	da16 <os_mbuf_free_chain>
    return NULL;
   10128:	2600      	movs	r6, #0
   1012a:	e7f5      	b.n	10118 <mem_split_frag+0x34>

0001012c <rwlock_complete_handoff>:
static void
rwlock_complete_handoff(struct rwlock *lock)
{
    RWLOCK_DBG_ASSERT(lock->mtx.mu_owner == g_current_task);
    RWLOCK_DBG_ASSERT(lock->handoffs > 0);
    lock->handoffs--;
   1012c:	f890 3020 	ldrb.w	r3, [r0, #32]
   10130:	3b01      	subs	r3, #1
   10132:	f880 3020 	strb.w	r3, [r0, #32]
}
   10136:	4770      	bx	lr

00010138 <rwlock_read_must_block>:
static bool
rwlock_read_must_block(const struct rwlock *lock)
{
    RWLOCK_DBG_ASSERT(lock->mtx.mu_owner == g_current_task);

    return lock->active_writer ||
   10138:	69c3      	ldr	r3, [r0, #28]
           lock->pending_writers > 0 ||
   1013a:	f013 2fff 	tst.w	r3, #4278255360	; 0xff00ff00
   1013e:	d106      	bne.n	1014e <rwlock_read_must_block+0x16>
           lock->handoffs > 0;
   10140:	f890 3020 	ldrb.w	r3, [r0, #32]
           lock->pending_writers > 0 ||
   10144:	b90b      	cbnz	r3, 1014a <rwlock_read_must_block+0x12>
   10146:	2000      	movs	r0, #0
}
   10148:	4770      	bx	lr
           lock->pending_writers > 0 ||
   1014a:	2001      	movs	r0, #1
   1014c:	4770      	bx	lr
   1014e:	2001      	movs	r0, #1
   10150:	4770      	bx	lr

00010152 <rwlock_write_must_block>:
static bool
rwlock_write_must_block(const struct rwlock *lock)
{
    RWLOCK_DBG_ASSERT(lock->mtx.mu_owner == g_current_task);

    return lock->active_writer ||
   10152:	8b83      	ldrh	r3, [r0, #28]
           lock->num_readers > 0 ||
   10154:	b933      	cbnz	r3, 10164 <rwlock_write_must_block+0x12>
           lock->handoffs > 0;
   10156:	f890 3020 	ldrb.w	r3, [r0, #32]
           lock->num_readers > 0 ||
   1015a:	b90b      	cbnz	r3, 10160 <rwlock_write_must_block+0xe>
   1015c:	2000      	movs	r0, #0
}
   1015e:	4770      	bx	lr
           lock->num_readers > 0 ||
   10160:	2001      	movs	r0, #1
   10162:	4770      	bx	lr
   10164:	2001      	movs	r0, #1
   10166:	4770      	bx	lr

00010168 <rwlock_unblock>:
{
   10168:	b510      	push	{r4, lr}
   1016a:	4604      	mov	r4, r0
    if (lock->pending_writers > 0) {
   1016c:	7fc3      	ldrb	r3, [r0, #31]
   1016e:	b91b      	cbnz	r3, 10178 <rwlock_unblock+0x10>
        lock->handoffs = lock->pending_readers;
   10170:	7f83      	ldrb	r3, [r0, #30]
   10172:	f880 3020 	strb.w	r3, [r0, #32]
        while (lock->pending_readers > 0) {
   10176:	e010      	b.n	1019a <rwlock_unblock+0x32>
        lock->handoffs = 1;
   10178:	2301      	movs	r3, #1
   1017a:	f880 3020 	strb.w	r3, [r0, #32]
        os_sem_release(&lock->wsem);
   1017e:	3014      	adds	r0, #20
   10180:	f019 fbc6 	bl	29910 <os_sem_release>
        lock->pending_writers--;
   10184:	7fe3      	ldrb	r3, [r4, #31]
   10186:	3b01      	subs	r3, #1
   10188:	77e3      	strb	r3, [r4, #31]
   1018a:	e009      	b.n	101a0 <rwlock_unblock+0x38>
            os_sem_release(&lock->rsem);
   1018c:	f104 000c 	add.w	r0, r4, #12
   10190:	f019 fbbe 	bl	29910 <os_sem_release>
            lock->pending_readers--;
   10194:	7fa3      	ldrb	r3, [r4, #30]
   10196:	3b01      	subs	r3, #1
   10198:	77a3      	strb	r3, [r4, #30]
        while (lock->pending_readers > 0) {
   1019a:	7fa3      	ldrb	r3, [r4, #30]
   1019c:	2b00      	cmp	r3, #0
   1019e:	d1f5      	bne.n	1018c <rwlock_unblock+0x24>
}
   101a0:	bd10      	pop	{r4, pc}

000101a2 <rwlock_acquire_read>:

void
rwlock_acquire_read(struct rwlock *lock)
{
   101a2:	b538      	push	{r3, r4, r5, lr}
   101a4:	4604      	mov	r4, r0
    bool acquired;

    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
   101a6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   101aa:	f7fe f869 	bl	e280 <os_mutex_pend>

    if (rwlock_read_must_block(lock)) {
   101ae:	4620      	mov	r0, r4
   101b0:	f7ff ffc2 	bl	10138 <rwlock_read_must_block>
   101b4:	b140      	cbz	r0, 101c8 <rwlock_acquire_read+0x26>
        lock->pending_readers++;
   101b6:	7fa3      	ldrb	r3, [r4, #30]
   101b8:	3301      	adds	r3, #1
   101ba:	77a3      	strb	r3, [r4, #30]
        acquired = false;
   101bc:	2500      	movs	r5, #0
    } else {
        lock->num_readers++;
        acquired = true;
    }

    os_mutex_release(&lock->mtx);
   101be:	4620      	mov	r0, r4
   101c0:	f7fd fffe 	bl	e1c0 <os_mutex_release>

    if (acquired) {
   101c4:	b12d      	cbz	r5, 101d2 <rwlock_acquire_read+0x30>
    /* Record reader ownership. */
    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
    lock->num_readers++;
    rwlock_complete_handoff(lock);
    os_mutex_release(&lock->mtx);
}
   101c6:	bd38      	pop	{r3, r4, r5, pc}
        lock->num_readers++;
   101c8:	7f23      	ldrb	r3, [r4, #28]
   101ca:	3301      	adds	r3, #1
   101cc:	7723      	strb	r3, [r4, #28]
        acquired = true;
   101ce:	2501      	movs	r5, #1
   101d0:	e7f5      	b.n	101be <rwlock_acquire_read+0x1c>
    os_sem_pend(&lock->rsem, OS_TIMEOUT_NEVER);
   101d2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   101d6:	f104 000c 	add.w	r0, r4, #12
   101da:	f019 fbcb 	bl	29974 <os_sem_pend>
    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
   101de:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   101e2:	4620      	mov	r0, r4
   101e4:	f7fe f84c 	bl	e280 <os_mutex_pend>
    lock->num_readers++;
   101e8:	7f23      	ldrb	r3, [r4, #28]
   101ea:	3301      	adds	r3, #1
   101ec:	7723      	strb	r3, [r4, #28]
    rwlock_complete_handoff(lock);
   101ee:	4620      	mov	r0, r4
   101f0:	f7ff ff9c 	bl	1012c <rwlock_complete_handoff>
    os_mutex_release(&lock->mtx);
   101f4:	4620      	mov	r0, r4
   101f6:	f7fd ffe3 	bl	e1c0 <os_mutex_release>
   101fa:	e7e4      	b.n	101c6 <rwlock_acquire_read+0x24>

000101fc <rwlock_release_read>:

void
rwlock_release_read(struct rwlock *lock)
{
   101fc:	b510      	push	{r4, lr}
   101fe:	4604      	mov	r4, r0
    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
   10200:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   10204:	f7fe f83c 	bl	e280 <os_mutex_pend>

    RWLOCK_DBG_ASSERT(lock->num_readers > 0);
    lock->num_readers--;
   10208:	7f23      	ldrb	r3, [r4, #28]
   1020a:	3b01      	subs	r3, #1
   1020c:	b2db      	uxtb	r3, r3
   1020e:	7723      	strb	r3, [r4, #28]

    /* If this is the last active reader, unblock a pending writer if there is
     * one.
     */
    if (lock->num_readers == 0) {
   10210:	b11b      	cbz	r3, 1021a <rwlock_release_read+0x1e>
        rwlock_unblock(lock);
    }

    os_mutex_release(&lock->mtx);
   10212:	4620      	mov	r0, r4
   10214:	f7fd ffd4 	bl	e1c0 <os_mutex_release>
}
   10218:	bd10      	pop	{r4, pc}
        rwlock_unblock(lock);
   1021a:	4620      	mov	r0, r4
   1021c:	f7ff ffa4 	bl	10168 <rwlock_unblock>
   10220:	e7f7      	b.n	10212 <rwlock_release_read+0x16>

00010222 <rwlock_acquire_write>:

void
rwlock_acquire_write(struct rwlock *lock)
{
   10222:	b538      	push	{r3, r4, r5, lr}
   10224:	4604      	mov	r4, r0
    bool acquired;

    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
   10226:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1022a:	f7fe f829 	bl	e280 <os_mutex_pend>

    if (rwlock_write_must_block(lock)) {
   1022e:	4620      	mov	r0, r4
   10230:	f7ff ff8f 	bl	10152 <rwlock_write_must_block>
   10234:	b140      	cbz	r0, 10248 <rwlock_acquire_write+0x26>
        lock->pending_writers++;
   10236:	7fe3      	ldrb	r3, [r4, #31]
   10238:	3301      	adds	r3, #1
   1023a:	77e3      	strb	r3, [r4, #31]
        acquired = false;
   1023c:	2500      	movs	r5, #0
    } else {
        lock->active_writer = true;
        acquired = true;
    }

    os_mutex_release(&lock->mtx);
   1023e:	4620      	mov	r0, r4
   10240:	f7fd ffbe 	bl	e1c0 <os_mutex_release>

    if (acquired) {
   10244:	b11d      	cbz	r5, 1024e <rwlock_acquire_write+0x2c>
    /* Record writer ownership. */
    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
    lock->active_writer = true;
    rwlock_complete_handoff(lock);
    os_mutex_release(&lock->mtx);
}
   10246:	bd38      	pop	{r3, r4, r5, pc}
        lock->active_writer = true;
   10248:	2501      	movs	r5, #1
   1024a:	7765      	strb	r5, [r4, #29]
   1024c:	e7f7      	b.n	1023e <rwlock_acquire_write+0x1c>
    os_sem_pend(&lock->wsem, OS_TIMEOUT_NEVER);
   1024e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   10252:	f104 0014 	add.w	r0, r4, #20
   10256:	f019 fb8d 	bl	29974 <os_sem_pend>
    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
   1025a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1025e:	4620      	mov	r0, r4
   10260:	f7fe f80e 	bl	e280 <os_mutex_pend>
    lock->active_writer = true;
   10264:	2301      	movs	r3, #1
   10266:	7763      	strb	r3, [r4, #29]
    rwlock_complete_handoff(lock);
   10268:	4620      	mov	r0, r4
   1026a:	f7ff ff5f 	bl	1012c <rwlock_complete_handoff>
    os_mutex_release(&lock->mtx);
   1026e:	4620      	mov	r0, r4
   10270:	f7fd ffa6 	bl	e1c0 <os_mutex_release>
   10274:	e7e7      	b.n	10246 <rwlock_acquire_write+0x24>

00010276 <rwlock_release_write>:

void
rwlock_release_write(struct rwlock *lock)
{
   10276:	b510      	push	{r4, lr}
   10278:	4604      	mov	r4, r0
    os_mutex_pend(&lock->mtx, OS_TIMEOUT_NEVER);
   1027a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1027e:	f7fd ffff 	bl	e280 <os_mutex_pend>

    RWLOCK_DBG_ASSERT(lock->active_writer);
    lock->active_writer = false;
   10282:	2300      	movs	r3, #0
   10284:	7763      	strb	r3, [r4, #29]

    rwlock_unblock(lock);
   10286:	4620      	mov	r0, r4
   10288:	f7ff ff6e 	bl	10168 <rwlock_unblock>

    os_mutex_release(&lock->mtx);
   1028c:	4620      	mov	r0, r4
   1028e:	f7fd ff97 	bl	e1c0 <os_mutex_release>
}
   10292:	bd10      	pop	{r4, pc}

00010294 <rwlock_init>:

int
rwlock_init(struct rwlock *lock)
{
   10294:	b510      	push	{r4, lr}
   10296:	4604      	mov	r4, r0
    int rc;

    *lock = (struct rwlock) { 0 };
   10298:	2224      	movs	r2, #36	; 0x24
   1029a:	2100      	movs	r1, #0
   1029c:	f7fe f910 	bl	e4c0 <memset>

    rc = os_mutex_init(&lock->mtx);
   102a0:	4620      	mov	r0, r4
   102a2:	f7fd ff83 	bl	e1ac <os_mutex_init>
    if (rc != 0) {
   102a6:	b100      	cbz	r0, 102aa <rwlock_init+0x16>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   102a8:	bd10      	pop	{r4, pc}
    rc = os_sem_init(&lock->rsem, 0);
   102aa:	2100      	movs	r1, #0
   102ac:	f104 000c 	add.w	r0, r4, #12
   102b0:	f019 fb25 	bl	298fe <os_sem_init>
    if (rc != 0) {
   102b4:	2800      	cmp	r0, #0
   102b6:	d1f7      	bne.n	102a8 <rwlock_init+0x14>
    rc = os_sem_init(&lock->wsem, 0);
   102b8:	2100      	movs	r1, #0
   102ba:	f104 0014 	add.w	r0, r4, #20
   102be:	f019 fb1e 	bl	298fe <os_sem_init>
   102c2:	e7f1      	b.n	102a8 <rwlock_init+0x14>

000102c4 <ble_ll_count_rx_adv_pdus>:
 */
static void
ble_ll_count_rx_adv_pdus(uint8_t pdu_type)
{
    /* Count received packet types  */
    switch (pdu_type) {
   102c4:	2808      	cmp	r0, #8
   102c6:	d832      	bhi.n	1032e <ble_ll_count_rx_adv_pdus+0x6a>
   102c8:	e8df f000 	tbb	[pc, r0]
   102cc:	19140f0a 	.word	0x19140f0a
   102d0:	052d231e 	.word	0x052d231e
   102d4:	28          	.byte	0x28
   102d5:	00          	.byte	0x00
    case BLE_ADV_PDU_TYPE_ADV_EXT_IND:
        STATS_INC(ble_ll_stats, rx_adv_ext_ind);
   102d6:	4a16      	ldr	r2, [pc, #88]	; (10330 <ble_ll_count_rx_adv_pdus+0x6c>)
   102d8:	6d53      	ldr	r3, [r2, #84]	; 0x54
   102da:	3301      	adds	r3, #1
   102dc:	6553      	str	r3, [r2, #84]	; 0x54
        break;
   102de:	4770      	bx	lr
    case BLE_ADV_PDU_TYPE_ADV_IND:
        STATS_INC(ble_ll_stats, rx_adv_ind);
   102e0:	4a13      	ldr	r2, [pc, #76]	; (10330 <ble_ll_count_rx_adv_pdus+0x6c>)
   102e2:	6c93      	ldr	r3, [r2, #72]	; 0x48
   102e4:	3301      	adds	r3, #1
   102e6:	6493      	str	r3, [r2, #72]	; 0x48
        break;
   102e8:	4770      	bx	lr
    case BLE_ADV_PDU_TYPE_ADV_DIRECT_IND:
        STATS_INC(ble_ll_stats, rx_adv_direct_ind);
   102ea:	4a11      	ldr	r2, [pc, #68]	; (10330 <ble_ll_count_rx_adv_pdus+0x6c>)
   102ec:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   102ee:	3301      	adds	r3, #1
   102f0:	64d3      	str	r3, [r2, #76]	; 0x4c
        break;
   102f2:	4770      	bx	lr
    case BLE_ADV_PDU_TYPE_ADV_NONCONN_IND:
        STATS_INC(ble_ll_stats, rx_adv_nonconn_ind);
   102f4:	4a0e      	ldr	r2, [pc, #56]	; (10330 <ble_ll_count_rx_adv_pdus+0x6c>)
   102f6:	6d13      	ldr	r3, [r2, #80]	; 0x50
   102f8:	3301      	adds	r3, #1
   102fa:	6513      	str	r3, [r2, #80]	; 0x50
        break;
   102fc:	4770      	bx	lr
    case BLE_ADV_PDU_TYPE_SCAN_REQ:
        STATS_INC(ble_ll_stats, rx_scan_reqs);
   102fe:	4a0c      	ldr	r2, [pc, #48]	; (10330 <ble_ll_count_rx_adv_pdus+0x6c>)
   10300:	6d93      	ldr	r3, [r2, #88]	; 0x58
   10302:	3301      	adds	r3, #1
   10304:	6593      	str	r3, [r2, #88]	; 0x58
        break;
   10306:	4770      	bx	lr
    case BLE_ADV_PDU_TYPE_SCAN_RSP:
        STATS_INC(ble_ll_stats, rx_scan_rsps);
   10308:	4a09      	ldr	r2, [pc, #36]	; (10330 <ble_ll_count_rx_adv_pdus+0x6c>)
   1030a:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
   1030c:	3301      	adds	r3, #1
   1030e:	65d3      	str	r3, [r2, #92]	; 0x5c
        break;
   10310:	4770      	bx	lr
    case BLE_ADV_PDU_TYPE_CONNECT_IND:
        STATS_INC(ble_ll_stats, rx_connect_reqs);
   10312:	4a07      	ldr	r2, [pc, #28]	; (10330 <ble_ll_count_rx_adv_pdus+0x6c>)
   10314:	6e13      	ldr	r3, [r2, #96]	; 0x60
   10316:	3301      	adds	r3, #1
   10318:	6613      	str	r3, [r2, #96]	; 0x60
        break;
   1031a:	4770      	bx	lr
    case BLE_ADV_PDU_TYPE_AUX_CONNECT_RSP:
        STATS_INC(ble_ll_stats, rx_aux_connect_rsp);
   1031c:	4a04      	ldr	r2, [pc, #16]	; (10330 <ble_ll_count_rx_adv_pdus+0x6c>)
   1031e:	6e93      	ldr	r3, [r2, #104]	; 0x68
   10320:	3301      	adds	r3, #1
   10322:	6693      	str	r3, [r2, #104]	; 0x68
        break;
   10324:	4770      	bx	lr
    case BLE_ADV_PDU_TYPE_ADV_SCAN_IND:
        STATS_INC(ble_ll_stats, rx_scan_ind);
   10326:	4a02      	ldr	r2, [pc, #8]	; (10330 <ble_ll_count_rx_adv_pdus+0x6c>)
   10328:	6e53      	ldr	r3, [r2, #100]	; 0x64
   1032a:	3301      	adds	r3, #1
   1032c:	6653      	str	r3, [r2, #100]	; 0x64
        break;
    default:
        break;
    }
}
   1032e:	4770      	bx	lr
   10330:	20003be0 	.word	0x20003be0

00010334 <ble_ll_count_rx_stats>:
 * @param hdr
 * @param len
 */
static void
ble_ll_count_rx_stats(struct ble_mbuf_hdr *hdr, uint16_t len, uint8_t pdu_type)
{
   10334:	b510      	push	{r4, lr}
    uint8_t crcok;
    bool connection_data;

    crcok = BLE_MBUF_HDR_CRC_OK(hdr);
   10336:	8803      	ldrh	r3, [r0, #0]
   10338:	f003 0407 	and.w	r4, r3, #7
    if (!connection_data) {
        connection_data = (BLE_MBUF_HDR_RX_STATE(hdr) == BLE_LL_STATE_DTM);
    }
#endif

    if (crcok) {
   1033c:	f013 0f80 	tst.w	r3, #128	; 0x80
   10340:	d014      	beq.n	1036c <ble_ll_count_rx_stats+0x38>
        if (connection_data) {
   10342:	2c04      	cmp	r4, #4
   10344:	d107      	bne.n	10356 <ble_ll_count_rx_stats+0x22>
            STATS_INC(ble_ll_stats, rx_data_pdu_crc_ok);
   10346:	4b12      	ldr	r3, [pc, #72]	; (10390 <ble_ll_count_rx_stats+0x5c>)
   10348:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   1034a:	3201      	adds	r2, #1
   1034c:	635a      	str	r2, [r3, #52]	; 0x34
            STATS_INCN(ble_ll_stats, rx_data_bytes_crc_ok, len);
   1034e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   10350:	4411      	add	r1, r2
   10352:	63d9      	str	r1, [r3, #60]	; 0x3c
   10354:	e013      	b.n	1037e <ble_ll_count_rx_stats+0x4a>
   10356:	4610      	mov	r0, r2
        } else {
            STATS_INC(ble_ll_stats, rx_adv_pdu_crc_ok);
   10358:	4b0d      	ldr	r3, [pc, #52]	; (10390 <ble_ll_count_rx_stats+0x5c>)
   1035a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1035c:	3201      	adds	r2, #1
   1035e:	625a      	str	r2, [r3, #36]	; 0x24
            STATS_INCN(ble_ll_stats, rx_adv_bytes_crc_ok, len);
   10360:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   10362:	4411      	add	r1, r2
   10364:	62d9      	str	r1, [r3, #44]	; 0x2c
            ble_ll_count_rx_adv_pdus(pdu_type);
   10366:	f7ff ffad 	bl	102c4 <ble_ll_count_rx_adv_pdus>
   1036a:	e008      	b.n	1037e <ble_ll_count_rx_stats+0x4a>
        }
    } else {
        if (connection_data) {
   1036c:	2c04      	cmp	r4, #4
   1036e:	d007      	beq.n	10380 <ble_ll_count_rx_stats+0x4c>
            STATS_INC(ble_ll_stats, rx_data_pdu_crc_err);
            STATS_INCN(ble_ll_stats, rx_data_bytes_crc_err, len);
        } else {
            STATS_INC(ble_ll_stats, rx_adv_pdu_crc_err);
   10370:	4b07      	ldr	r3, [pc, #28]	; (10390 <ble_ll_count_rx_stats+0x5c>)
   10372:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   10374:	3201      	adds	r2, #1
   10376:	629a      	str	r2, [r3, #40]	; 0x28
            STATS_INCN(ble_ll_stats, rx_adv_bytes_crc_err, len);
   10378:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1037a:	4411      	add	r1, r2
   1037c:	6319      	str	r1, [r3, #48]	; 0x30
        }
    }
}
   1037e:	bd10      	pop	{r4, pc}
            STATS_INC(ble_ll_stats, rx_data_pdu_crc_err);
   10380:	4b03      	ldr	r3, [pc, #12]	; (10390 <ble_ll_count_rx_stats+0x5c>)
   10382:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   10384:	3201      	adds	r2, #1
   10386:	639a      	str	r2, [r3, #56]	; 0x38
            STATS_INCN(ble_ll_stats, rx_data_bytes_crc_err, len);
   10388:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1038a:	4411      	add	r1, r2
   1038c:	6419      	str	r1, [r3, #64]	; 0x40
   1038e:	e7f6      	b.n	1037e <ble_ll_count_rx_stats+0x4a>
   10390:	20003be0 	.word	0x20003be0

00010394 <ble_ll_flush_pkt_queue>:
 *
 * @param pktq
 */
static void
ble_ll_flush_pkt_queue(struct ble_ll_pkt_q *pktq)
{
   10394:	b510      	push	{r4, lr}
   10396:	4604      	mov	r4, r0
    struct os_mbuf_pkthdr *pkthdr;
    struct os_mbuf *om;

    /* FLush all packets from Link layer queues */
    while (STAILQ_FIRST(pktq)) {
   10398:	e001      	b.n	1039e <ble_ll_flush_pkt_queue+0xa>
        pkthdr = STAILQ_FIRST(pktq);
        om = OS_MBUF_PKTHDR_TO_MBUF(pkthdr);

        /* Remove from queue and free the mbuf */
        STAILQ_REMOVE_HEAD(pktq, omp_next);
        os_mbuf_free_chain(om);
   1039a:	f7fd fb3c 	bl	da16 <os_mbuf_free_chain>
    while (STAILQ_FIRST(pktq)) {
   1039e:	6823      	ldr	r3, [r4, #0]
   103a0:	b13b      	cbz	r3, 103b2 <ble_ll_flush_pkt_queue+0x1e>
        om = OS_MBUF_PKTHDR_TO_MBUF(pkthdr);
   103a2:	f1a3 0010 	sub.w	r0, r3, #16
        STAILQ_REMOVE_HEAD(pktq, omp_next);
   103a6:	685b      	ldr	r3, [r3, #4]
   103a8:	6023      	str	r3, [r4, #0]
   103aa:	2b00      	cmp	r3, #0
   103ac:	d1f5      	bne.n	1039a <ble_ll_flush_pkt_queue+0x6>
   103ae:	6064      	str	r4, [r4, #4]
   103b0:	e7f3      	b.n	1039a <ble_ll_flush_pkt_queue+0x6>
    }
}
   103b2:	bd10      	pop	{r4, pc}

000103b4 <ble_ll_task>:
{
   103b4:	b508      	push	{r3, lr}
    ble_phy_init();
   103b6:	f009 fb29 	bl	19a0c <ble_phy_init>
    ble_phy_txpwr_set(MYNEWT_VAL(BLE_LL_TX_PWR_DBM));
   103ba:	2000      	movs	r0, #0
   103bc:	f009 fc50 	bl	19c60 <ble_phy_txpwr_set>
    ble_hci_trans_cfg_ll(ble_ll_hci_cmd_rx, NULL, ble_ll_hci_acl_rx, NULL);
   103c0:	2300      	movs	r3, #0
   103c2:	4a0d      	ldr	r2, [pc, #52]	; (103f8 <ble_ll_task+0x44>)
   103c4:	4619      	mov	r1, r3
   103c6:	480d      	ldr	r0, [pc, #52]	; (103fc <ble_ll_task+0x48>)
   103c8:	f015 fde6 	bl	25f98 <ble_hci_trans_cfg_ll>
    ble_ll_hci_send_noop();
   103cc:	f006 f888 	bl	164e0 <ble_ll_hci_send_noop>
    ble_ll_rand_start();
   103d0:	f006 fb10 	bl	169f4 <ble_ll_rand_start>
ble_npl_eventq_get(struct ble_npl_eventq *evq, ble_npl_time_t tmo)
{
    struct os_event *ev;

    if (tmo == BLE_NPL_TIME_FOREVER) {
        ev = os_eventq_get(&evq->evq);
   103d4:	480a      	ldr	r0, [pc, #40]	; (10400 <ble_ll_task+0x4c>)
   103d6:	f7fc fcb5 	bl	cd44 <os_eventq_get>
        assert(ev);
   103da:	b110      	cbz	r0, 103e2 <ble_ll_task+0x2e>
}

static inline void
ble_npl_event_run(struct ble_npl_event *ev)
{
    ev->ev.ev_cb(&ev->ev);
   103dc:	6842      	ldr	r2, [r0, #4]
   103de:	4790      	blx	r2
   103e0:	e7f8      	b.n	103d4 <ble_ll_task+0x20>
   103e2:	f7fb ff01 	bl	c1e8 <hal_debugger_connected>
   103e6:	b100      	cbz	r0, 103ea <ble_ll_task+0x36>
   103e8:	be01      	bkpt	0x0001
   103ea:	2300      	movs	r3, #0
   103ec:	461a      	mov	r2, r3
   103ee:	4619      	mov	r1, r3
   103f0:	4618      	mov	r0, r3
   103f2:	f7fc f933 	bl	c65c <__assert_func>
   103f6:	bf00      	nop
   103f8:	00016619 	.word	0x00016619
   103fc:	000165dd 	.word	0x000165dd
   10400:	20003d60 	.word	0x20003d60

00010404 <ble_ll_hw_err_timer_cb>:
{
   10404:	b508      	push	{r3, lr}
    if (ble_ll_hci_ev_hw_err(BLE_HW_ERR_HCI_SYNC_LOSS)) {
   10406:	2001      	movs	r0, #1
   10408:	f006 fa4c 	bl	168a4 <ble_ll_hci_ev_hw_err>
   1040c:	b900      	cbnz	r0, 10410 <ble_ll_hw_err_timer_cb+0xc>
}
   1040e:	bd08      	pop	{r3, pc}
}

static inline ble_npl_error_t
ble_npl_callout_reset(struct ble_npl_callout *co, ble_npl_time_t ticks)
{
    return (ble_npl_error_t)os_callout_reset(&co->co, ticks);
   10410:	2106      	movs	r1, #6
   10412:	4802      	ldr	r0, [pc, #8]	; (1041c <ble_ll_hw_err_timer_cb+0x18>)
   10414:	f7fc faf6 	bl	ca04 <os_callout_reset>
   10418:	e7f9      	b.n	1040e <ble_ll_hw_err_timer_cb+0xa>
   1041a:	bf00      	nop
   1041c:	20003dd8 	.word	0x20003dd8

00010420 <ble_ll_event_comp_pkts>:
{
   10420:	b508      	push	{r3, lr}
    ble_ll_conn_num_comp_pkts_event_send(NULL);
   10422:	2000      	movs	r0, #0
   10424:	f003 fea4 	bl	14170 <ble_ll_conn_num_comp_pkts_event_send>
}
   10428:	bd08      	pop	{r3, pc}

0001042a <ble_ll_event_dbuf_overflow>:
{
   1042a:	b508      	push	{r3, lr}
    ble_ll_hci_ev_databuf_overflow();
   1042c:	f006 fa52 	bl	168d4 <ble_ll_hci_ev_databuf_overflow>
}
   10430:	bd08      	pop	{r3, pc}
	...

00010434 <ble_ll_tx_pkt_in>:
{
   10434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    while (STAILQ_FIRST(&g_ble_ll_data.ll_tx_pkt_q)) {
   10436:	e00a      	b.n	1044e <ble_ll_tx_pkt_in+0x1a>
        STAILQ_REMOVE_HEAD(&g_ble_ll_data.ll_tx_pkt_q, omp_next);
   10438:	4613      	mov	r3, r2
   1043a:	3260      	adds	r2, #96	; 0x60
   1043c:	665a      	str	r2, [r3, #100]	; 0x64
   1043e:	e010      	b.n	10462 <ble_ll_tx_pkt_in+0x2e>
            STATS_INC(ble_ll_stats, bad_acl_hdr);
   10440:	4a18      	ldr	r2, [pc, #96]	; (104a4 <ble_ll_tx_pkt_in+0x70>)
   10442:	69d3      	ldr	r3, [r2, #28]
   10444:	3301      	adds	r3, #1
   10446:	61d3      	str	r3, [r2, #28]
            os_mbuf_free_chain(om);
   10448:	4628      	mov	r0, r5
   1044a:	f7fd fae4 	bl	da16 <os_mbuf_free_chain>
    while (STAILQ_FIRST(&g_ble_ll_data.ll_tx_pkt_q)) {
   1044e:	4b16      	ldr	r3, [pc, #88]	; (104a8 <ble_ll_tx_pkt_in+0x74>)
   10450:	6e1c      	ldr	r4, [r3, #96]	; 0x60
   10452:	b32c      	cbz	r4, 104a0 <ble_ll_tx_pkt_in+0x6c>
        om = (struct os_mbuf *)((uint8_t *)pkthdr - sizeof(struct os_mbuf));
   10454:	f1a4 0510 	sub.w	r5, r4, #16
        STAILQ_REMOVE_HEAD(&g_ble_ll_data.ll_tx_pkt_q, omp_next);
   10458:	6863      	ldr	r3, [r4, #4]
   1045a:	4a13      	ldr	r2, [pc, #76]	; (104a8 <ble_ll_tx_pkt_in+0x74>)
   1045c:	6613      	str	r3, [r2, #96]	; 0x60
   1045e:	2b00      	cmp	r3, #0
   10460:	d0ea      	beq.n	10438 <ble_ll_tx_pkt_in+0x4>
        handle = get_le16(om->om_data);
   10462:	f854 0c10 	ldr.w	r0, [r4, #-16]
   10466:	f019 f992 	bl	2978e <get_le16>
   1046a:	4607      	mov	r7, r0
        length = get_le16(om->om_data + 2);
   1046c:	f854 0c10 	ldr.w	r0, [r4, #-16]
   10470:	3002      	adds	r0, #2
   10472:	f019 f98c 	bl	2978e <get_le16>
   10476:	4606      	mov	r6, r0
        os_mbuf_adj(om, sizeof(struct hci_data_hdr));
   10478:	2104      	movs	r1, #4
   1047a:	4628      	mov	r0, r5
   1047c:	f7fd fb99 	bl	dbb2 <os_mbuf_adj>
        pb = handle & 0x3000;
   10480:	f407 5240 	and.w	r2, r7, #12288	; 0x3000
        if ((pkthdr->omp_len != length) || (pb > 0x1000) || (length == 0)) {
   10484:	8823      	ldrh	r3, [r4, #0]
   10486:	42b3      	cmp	r3, r6
   10488:	d1da      	bne.n	10440 <ble_ll_tx_pkt_in+0xc>
   1048a:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
   1048e:	d8d7      	bhi.n	10440 <ble_ll_tx_pkt_in+0xc>
   10490:	2e00      	cmp	r6, #0
   10492:	d0d5      	beq.n	10440 <ble_ll_tx_pkt_in+0xc>
        ble_ll_conn_tx_pkt_in(om, handle, length);
   10494:	4632      	mov	r2, r6
   10496:	4639      	mov	r1, r7
   10498:	4628      	mov	r0, r5
   1049a:	f003 fb39 	bl	13b10 <ble_ll_conn_tx_pkt_in>
   1049e:	e7d6      	b.n	1044e <ble_ll_tx_pkt_in+0x1a>
}
   104a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   104a2:	bf00      	nop
   104a4:	20003be0 	.word	0x20003be0
   104a8:	20003d50 	.word	0x20003d50

000104ac <ble_ll_event_tx_pkt>:
{
   104ac:	b508      	push	{r3, lr}
    ble_ll_tx_pkt_in();
   104ae:	f7ff ffc1 	bl	10434 <ble_ll_tx_pkt_in>
}
   104b2:	bd08      	pop	{r3, pc}

000104b4 <ble_ll_rx_pkt_in>:
{
   104b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    while (STAILQ_FIRST(&g_ble_ll_data.ll_rx_pkt_q)) {
   104b8:	e011      	b.n	104de <ble_ll_rx_pkt_in+0x2a>
        STAILQ_REMOVE_HEAD(&g_ble_ll_data.ll_rx_pkt_q, omp_next);
   104ba:	4613      	mov	r3, r2
   104bc:	3248      	adds	r2, #72	; 0x48
   104be:	64da      	str	r2, [r3, #76]	; 0x4c
   104c0:	e01b      	b.n	104fa <ble_ll_rx_pkt_in+0x46>
            ble_ll_conn_rx_data_pdu(m, ble_hdr);
   104c2:	4631      	mov	r1, r6
   104c4:	4638      	mov	r0, r7
   104c6:	f003 f8e1 	bl	1368c <ble_ll_conn_rx_data_pdu>
   104ca:	e008      	b.n	104de <ble_ll_rx_pkt_in+0x2a>
            ble_ll_adv_rx_pkt_in(pdu_type, rxbuf, ble_hdr);
   104cc:	4632      	mov	r2, r6
   104ce:	4641      	mov	r1, r8
   104d0:	4628      	mov	r0, r5
   104d2:	f001 fb5d 	bl	11b90 <ble_ll_adv_rx_pkt_in>
        if (m) {
   104d6:	b117      	cbz	r7, 104de <ble_ll_rx_pkt_in+0x2a>
            os_mbuf_free_chain(m);
   104d8:	4638      	mov	r0, r7
   104da:	f7fd fa9c 	bl	da16 <os_mbuf_free_chain>
    while (STAILQ_FIRST(&g_ble_ll_data.ll_rx_pkt_q)) {
   104de:	4b21      	ldr	r3, [pc, #132]	; (10564 <ble_ll_rx_pkt_in+0xb0>)
   104e0:	6c9c      	ldr	r4, [r3, #72]	; 0x48
   104e2:	2c00      	cmp	r4, #0
   104e4:	d03b      	beq.n	1055e <ble_ll_rx_pkt_in+0xaa>
        m = (struct os_mbuf *)((uint8_t *)pkthdr - sizeof(struct os_mbuf));
   104e6:	f1a4 0710 	sub.w	r7, r4, #16
        OS_ENTER_CRITICAL(sr);
   104ea:	f7fd f985 	bl	d7f8 <os_arch_save_sr>
        STAILQ_REMOVE_HEAD(&g_ble_ll_data.ll_rx_pkt_q, omp_next);
   104ee:	4a1d      	ldr	r2, [pc, #116]	; (10564 <ble_ll_rx_pkt_in+0xb0>)
   104f0:	6c93      	ldr	r3, [r2, #72]	; 0x48
   104f2:	685b      	ldr	r3, [r3, #4]
   104f4:	6493      	str	r3, [r2, #72]	; 0x48
   104f6:	2b00      	cmp	r3, #0
   104f8:	d0df      	beq.n	104ba <ble_ll_rx_pkt_in+0x6>
        OS_EXIT_CRITICAL(sr);
   104fa:	f7fd f983 	bl	d804 <os_arch_restore_sr>
        ble_hdr = BLE_MBUF_HDR_PTR(m);
   104fe:	f104 0608 	add.w	r6, r4, #8
        rxbuf = m->om_data;
   10502:	f854 8c10 	ldr.w	r8, [r4, #-16]
        pdu_type = rxbuf[0] & BLE_ADV_PDU_HDR_TYPE_MASK;
   10506:	f898 5000 	ldrb.w	r5, [r8]
   1050a:	f005 050f 	and.w	r5, r5, #15
        ble_ll_count_rx_stats(ble_hdr, pkthdr->omp_len, pdu_type);
   1050e:	462a      	mov	r2, r5
   10510:	8821      	ldrh	r1, [r4, #0]
   10512:	4630      	mov	r0, r6
   10514:	f7ff ff0e 	bl	10334 <ble_ll_count_rx_stats>
        switch (BLE_MBUF_HDR_RX_STATE(ble_hdr)) {
   10518:	7a23      	ldrb	r3, [r4, #8]
   1051a:	f003 0307 	and.w	r3, r3, #7
   1051e:	3b01      	subs	r3, #1
   10520:	2b03      	cmp	r3, #3
   10522:	d817      	bhi.n	10554 <ble_ll_rx_pkt_in+0xa0>
   10524:	a201      	add	r2, pc, #4	; (adr r2, 1052c <ble_ll_rx_pkt_in+0x78>)
   10526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1052a:	bf00      	nop
   1052c:	000104cd 	.word	0x000104cd
   10530:	0001053d 	.word	0x0001053d
   10534:	00010549 	.word	0x00010549
   10538:	000104c3 	.word	0x000104c3
            ble_ll_scan_rx_pkt_in(pdu_type, m, ble_hdr);
   1053c:	4632      	mov	r2, r6
   1053e:	4639      	mov	r1, r7
   10540:	4628      	mov	r0, r5
   10542:	f007 ff65 	bl	18410 <ble_ll_scan_rx_pkt_in>
            break;
   10546:	e7c6      	b.n	104d6 <ble_ll_rx_pkt_in+0x22>
            ble_ll_init_rx_pkt_in(pdu_type, rxbuf, ble_hdr);
   10548:	4632      	mov	r2, r6
   1054a:	4641      	mov	r1, r8
   1054c:	4628      	mov	r0, r5
   1054e:	f002 fe2d 	bl	131ac <ble_ll_init_rx_pkt_in>
            break;
   10552:	e7c0      	b.n	104d6 <ble_ll_rx_pkt_in+0x22>
            STATS_INC(ble_ll_stats, bad_ll_state);
   10554:	4a04      	ldr	r2, [pc, #16]	; (10568 <ble_ll_rx_pkt_in+0xb4>)
   10556:	6993      	ldr	r3, [r2, #24]
   10558:	3301      	adds	r3, #1
   1055a:	6193      	str	r3, [r2, #24]
            break;
   1055c:	e7bb      	b.n	104d6 <ble_ll_rx_pkt_in+0x22>
}
   1055e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10562:	bf00      	nop
   10564:	20003d50 	.word	0x20003d50
   10568:	20003be0 	.word	0x20003be0

0001056c <ble_ll_event_rx_pkt>:
{
   1056c:	b508      	push	{r3, lr}
    ble_ll_rx_pkt_in();
   1056e:	f7ff ffa1 	bl	104b4 <ble_ll_rx_pkt_in>
}
   10572:	bd08      	pop	{r3, pc}

00010574 <ble_ll_seed_prng>:
    return rc;
}

static void
ble_ll_seed_prng(void)
{
   10574:	b508      	push	{r3, lr}

    /* Seed random number generator with least significant bytes of device
     * address.
     */
    seed = 0;
    for (i = 0; i < 4; ++i) {
   10576:	2300      	movs	r3, #0
    seed = 0;
   10578:	4618      	mov	r0, r3
    for (i = 0; i < 4; ++i) {
   1057a:	e004      	b.n	10586 <ble_ll_seed_prng+0x12>
        seed |= g_dev_addr[i];
   1057c:	4a04      	ldr	r2, [pc, #16]	; (10590 <ble_ll_seed_prng+0x1c>)
   1057e:	5cd2      	ldrb	r2, [r2, r3]
   10580:	4310      	orrs	r0, r2
        seed <<= 8;
   10582:	0200      	lsls	r0, r0, #8
    for (i = 0; i < 4; ++i) {
   10584:	3301      	adds	r3, #1
   10586:	2b03      	cmp	r3, #3
   10588:	ddf8      	ble.n	1057c <ble_ll_seed_prng+0x8>
{
	return (int)lrand48();
}
__extern_inline void srand(unsigned int __s)
{
	srand48(__s);
   1058a:	f019 fb5f 	bl	29c4c <srand48>
    }
    srand(seed);
}
   1058e:	bd08      	pop	{r3, pc}
   10590:	20003cf4 	.word	0x20003cf4

00010594 <ble_ll_rxpdu_alloc>:
{
   10594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10596:	4604      	mov	r4, r0
    om_ret = os_msys_get_pkthdr(len, sizeof(struct ble_mbuf_hdr));
   10598:	2110      	movs	r1, #16
   1059a:	f7fc fd94 	bl	d0c6 <os_msys_get_pkthdr>
    if (!om_ret) {
   1059e:	b1e8      	cbz	r0, 105dc <ble_ll_rxpdu_alloc+0x48>
   105a0:	4606      	mov	r6, r0
    pkthdr->omp_len = len;
   105a2:	8204      	strh	r4, [r0, #16]
    databuf_len = om_ret->om_omp->omp_databuf_len & ~3;
   105a4:	6883      	ldr	r3, [r0, #8]
   105a6:	881b      	ldrh	r3, [r3, #0]
   105a8:	f023 0303 	bic.w	r3, r3, #3
   105ac:	b29b      	uxth	r3, r3
    om_ret->om_data += 4;
   105ae:	6802      	ldr	r2, [r0, #0]
   105b0:	3204      	adds	r2, #4
   105b2:	6002      	str	r2, [r0, #0]
    rem_len -= databuf_len - om_ret->om_pkthdr_len - 4;
   105b4:	461f      	mov	r7, r3
   105b6:	7942      	ldrb	r2, [r0, #5]
   105b8:	1a9b      	subs	r3, r3, r2
   105ba:	3b04      	subs	r3, #4
   105bc:	1ae4      	subs	r4, r4, r3
    om = om_ret;
   105be:	4605      	mov	r5, r0
    while (rem_len > 0) {
   105c0:	2c00      	cmp	r4, #0
   105c2:	dd10      	ble.n	105e6 <ble_ll_rxpdu_alloc+0x52>
        om_next = os_msys_get(rem_len, 0);
   105c4:	2100      	movs	r1, #0
   105c6:	b2a0      	uxth	r0, r4
   105c8:	f7fc fd6e 	bl	d0a8 <os_msys_get>
        if (!om_next) {
   105cc:	b118      	cbz	r0, 105d6 <ble_ll_rxpdu_alloc+0x42>
        SLIST_NEXT(om, om_next) = om_next;
   105ce:	60e8      	str	r0, [r5, #12]
        rem_len -= databuf_len;
   105d0:	1be4      	subs	r4, r4, r7
        om = om_next;
   105d2:	4605      	mov	r5, r0
   105d4:	e7f4      	b.n	105c0 <ble_ll_rxpdu_alloc+0x2c>
            os_mbuf_free_chain(om_ret);
   105d6:	4630      	mov	r0, r6
   105d8:	f7fd fa1d 	bl	da16 <os_mbuf_free_chain>
    STATS_INC(ble_ll_stats, no_bufs);
   105dc:	4a03      	ldr	r2, [pc, #12]	; (105ec <ble_ll_rxpdu_alloc+0x58>)
   105de:	6a13      	ldr	r3, [r2, #32]
   105e0:	3301      	adds	r3, #1
   105e2:	6213      	str	r3, [r2, #32]
    return NULL;
   105e4:	2600      	movs	r6, #0
}
   105e6:	4630      	mov	r0, r6
   105e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   105ea:	bf00      	nop
   105ec:	20003be0 	.word	0x20003be0

000105f0 <ble_ll_chk_txrx_octets>:
    if ((octets < BLE_LL_CONN_SUPP_BYTES_MIN) ||
   105f0:	381b      	subs	r0, #27
   105f2:	b280      	uxth	r0, r0
   105f4:	28e0      	cmp	r0, #224	; 0xe0
   105f6:	d801      	bhi.n	105fc <ble_ll_chk_txrx_octets+0xc>
        rc = 1;
   105f8:	2001      	movs	r0, #1
}
   105fa:	4770      	bx	lr
        rc = 0;
   105fc:	2000      	movs	r0, #0
   105fe:	4770      	bx	lr

00010600 <ble_ll_chk_txrx_time>:
    if ((time < BLE_LL_CONN_SUPP_TIME_MIN) ||
   10600:	f5a0 70a4 	sub.w	r0, r0, #328	; 0x148
   10604:	b280      	uxth	r0, r0
   10606:	f244 1348 	movw	r3, #16712	; 0x4148
   1060a:	4298      	cmp	r0, r3
   1060c:	d801      	bhi.n	10612 <ble_ll_chk_txrx_time+0x12>
        rc = 1;
   1060e:	2001      	movs	r0, #1
}
   10610:	4770      	bx	lr
        rc = 0;
   10612:	2000      	movs	r0, #0
   10614:	4770      	bx	lr

00010616 <ble_ll_is_rpa>:
    if (addr_type && ((addr[5] & 0xc0) == 0x40)) {
   10616:	b131      	cbz	r1, 10626 <ble_ll_is_rpa+0x10>
   10618:	7943      	ldrb	r3, [r0, #5]
   1061a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1061e:	2b40      	cmp	r3, #64	; 0x40
   10620:	d003      	beq.n	1062a <ble_ll_is_rpa+0x14>
        rc = 0;
   10622:	2000      	movs	r0, #0
   10624:	4770      	bx	lr
   10626:	2000      	movs	r0, #0
   10628:	4770      	bx	lr
        rc = 1;
   1062a:	2001      	movs	r0, #1
}
   1062c:	4770      	bx	lr

0001062e <ble_ll_addr_is_id>:
    return !addr_type || ((addr[5] & 0xc0) == 0xc0);
   1062e:	b141      	cbz	r1, 10642 <ble_ll_addr_is_id+0x14>
   10630:	7943      	ldrb	r3, [r0, #5]
   10632:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   10636:	2bc0      	cmp	r3, #192	; 0xc0
   10638:	d001      	beq.n	1063e <ble_ll_addr_is_id+0x10>
   1063a:	2000      	movs	r0, #0
}
   1063c:	4770      	bx	lr
    return !addr_type || ((addr[5] & 0xc0) == 0xc0);
   1063e:	2001      	movs	r0, #1
   10640:	4770      	bx	lr
   10642:	2001      	movs	r0, #1
   10644:	4770      	bx	lr

00010646 <ble_ll_addr_subtype>:
    if (!addr_type) {
   10646:	b141      	cbz	r1, 1065a <ble_ll_addr_subtype+0x14>
    switch (addr[5] >> 6) {
   10648:	7943      	ldrb	r3, [r0, #5]
   1064a:	099b      	lsrs	r3, r3, #6
   1064c:	d003      	beq.n	10656 <ble_ll_addr_subtype+0x10>
   1064e:	2b01      	cmp	r3, #1
   10650:	d005      	beq.n	1065e <ble_ll_addr_subtype+0x18>
        return BLE_LL_ADDR_SUBTYPE_IDENTITY; /* static random */
   10652:	2000      	movs	r0, #0
   10654:	4770      	bx	lr
        return BLE_LL_ADDR_SUBTYPE_NRPA; /* NRPA */
   10656:	2002      	movs	r0, #2
   10658:	4770      	bx	lr
        return BLE_LL_ADDR_SUBTYPE_IDENTITY;
   1065a:	2000      	movs	r0, #0
   1065c:	4770      	bx	lr
        return BLE_LL_ADDR_SUBTYPE_RPA; /* RPA */
   1065e:	2001      	movs	r0, #1
}
   10660:	4770      	bx	lr

00010662 <ble_ll_is_valid_public_addr>:
    for (i = 0; i < BLE_DEV_ADDR_LEN; ++i) {
   10662:	2300      	movs	r3, #0
   10664:	2b05      	cmp	r3, #5
   10666:	dc03      	bgt.n	10670 <ble_ll_is_valid_public_addr+0xe>
        if (addr[i]) {
   10668:	5cc2      	ldrb	r2, [r0, r3]
   1066a:	b91a      	cbnz	r2, 10674 <ble_ll_is_valid_public_addr+0x12>
    for (i = 0; i < BLE_DEV_ADDR_LEN; ++i) {
   1066c:	3301      	adds	r3, #1
   1066e:	e7f9      	b.n	10664 <ble_ll_is_valid_public_addr+0x2>
    return 0;
   10670:	2000      	movs	r0, #0
   10672:	4770      	bx	lr
            return 1;
   10674:	2001      	movs	r0, #1
}
   10676:	4770      	bx	lr

00010678 <ble_ll_is_valid_random_addr>:
{
   10678:	b510      	push	{r4, lr}
    sum = 0;
   1067a:	2300      	movs	r3, #0
    for (i = 0; i < (BLE_DEV_ADDR_LEN -1); ++i) {
   1067c:	461a      	mov	r2, r3
   1067e:	e003      	b.n	10688 <ble_ll_is_valid_random_addr+0x10>
        sum += addr[i];
   10680:	5c84      	ldrb	r4, [r0, r2]
   10682:	4423      	add	r3, r4
   10684:	b29b      	uxth	r3, r3
    for (i = 0; i < (BLE_DEV_ADDR_LEN -1); ++i) {
   10686:	3201      	adds	r2, #1
   10688:	2a04      	cmp	r2, #4
   1068a:	ddf9      	ble.n	10680 <ble_ll_is_valid_random_addr+0x8>
    sum += addr[5] & 0x3f;
   1068c:	7942      	ldrb	r2, [r0, #5]
   1068e:	f002 013f 	and.w	r1, r2, #63	; 0x3f
   10692:	440b      	add	r3, r1
   10694:	b29b      	uxth	r3, r3
    if ((sum == 0) || (sum == ((5*255) + 0x3f))) {
   10696:	b1f3      	cbz	r3, 106d6 <ble_ll_is_valid_random_addr+0x5e>
   10698:	f240 543a 	movw	r4, #1338	; 0x53a
   1069c:	42a3      	cmp	r3, r4
   1069e:	d01d      	beq.n	106dc <ble_ll_is_valid_random_addr+0x64>
    addr_type = addr[5] & 0xc0;
   106a0:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
    if (addr_type == 0xc0) {
   106a4:	2ac0      	cmp	r2, #192	; 0xc0
   106a6:	d01b      	beq.n	106e0 <ble_ll_is_valid_random_addr+0x68>
    } else if (addr_type == 0x40) {
   106a8:	2a40      	cmp	r2, #64	; 0x40
   106aa:	d009      	beq.n	106c0 <ble_ll_is_valid_random_addr+0x48>
    } else if (addr_type == 0) {
   106ac:	b9f2      	cbnz	r2, 106ec <ble_ll_is_valid_random_addr+0x74>
   106ae:	4601      	mov	r1, r0
        if (!memcmp(g_dev_addr, addr, BLE_DEV_ADDR_LEN)) {
   106b0:	2206      	movs	r2, #6
   106b2:	480f      	ldr	r0, [pc, #60]	; (106f0 <ble_ll_is_valid_random_addr+0x78>)
   106b4:	f7fd feb8 	bl	e428 <memcmp>
   106b8:	4603      	mov	r3, r0
   106ba:	b168      	cbz	r0, 106d8 <ble_ll_is_valid_random_addr+0x60>
    rc = 1;
   106bc:	2301      	movs	r3, #1
   106be:	e00b      	b.n	106d8 <ble_ll_is_valid_random_addr+0x60>
        sum = addr[3] + addr[4] + (addr[5] & 0x3f);
   106c0:	78c3      	ldrb	r3, [r0, #3]
   106c2:	7902      	ldrb	r2, [r0, #4]
   106c4:	4413      	add	r3, r2
        if ((sum == 0) || (sum == (255 + 255 + 0x3f))) {
   106c6:	18c9      	adds	r1, r1, r3
   106c8:	d00c      	beq.n	106e4 <ble_ll_is_valid_random_addr+0x6c>
   106ca:	f240 233d 	movw	r3, #573	; 0x23d
   106ce:	4299      	cmp	r1, r3
   106d0:	d00a      	beq.n	106e8 <ble_ll_is_valid_random_addr+0x70>
    rc = 1;
   106d2:	2301      	movs	r3, #1
   106d4:	e000      	b.n	106d8 <ble_ll_is_valid_random_addr+0x60>
        return 0;
   106d6:	2300      	movs	r3, #0
}
   106d8:	4618      	mov	r0, r3
   106da:	bd10      	pop	{r4, pc}
        return 0;
   106dc:	2300      	movs	r3, #0
   106de:	e7fb      	b.n	106d8 <ble_ll_is_valid_random_addr+0x60>
    rc = 1;
   106e0:	2301      	movs	r3, #1
   106e2:	e7f9      	b.n	106d8 <ble_ll_is_valid_random_addr+0x60>
            rc = 0;
   106e4:	2300      	movs	r3, #0
   106e6:	e7f7      	b.n	106d8 <ble_ll_is_valid_random_addr+0x60>
   106e8:	2300      	movs	r3, #0
   106ea:	e7f5      	b.n	106d8 <ble_ll_is_valid_random_addr+0x60>
        rc = 0;
   106ec:	2300      	movs	r3, #0
   106ee:	e7f3      	b.n	106d8 <ble_ll_is_valid_random_addr+0x60>
   106f0:	20003cf4 	.word	0x20003cf4

000106f4 <ble_ll_is_valid_own_addr_type>:
{
   106f4:	b508      	push	{r3, lr}
    switch (own_addr_type) {
   106f6:	2803      	cmp	r0, #3
   106f8:	d80b      	bhi.n	10712 <ble_ll_is_valid_own_addr_type+0x1e>
   106fa:	e8df f000 	tbb	[pc, r0]
   106fe:	0602      	.short	0x0602
   10700:	0602      	.short	0x0602
        rc = ble_ll_is_valid_public_addr(g_dev_addr);
   10702:	4805      	ldr	r0, [pc, #20]	; (10718 <ble_ll_is_valid_own_addr_type+0x24>)
   10704:	f7ff ffad 	bl	10662 <ble_ll_is_valid_public_addr>
}
   10708:	bd08      	pop	{r3, pc}
        rc = ble_ll_is_valid_random_addr(random_addr);
   1070a:	4608      	mov	r0, r1
   1070c:	f7ff ffb4 	bl	10678 <ble_ll_is_valid_random_addr>
        break;
   10710:	e7fa      	b.n	10708 <ble_ll_is_valid_own_addr_type+0x14>
        rc = 0;
   10712:	2000      	movs	r0, #0
    return rc;
   10714:	e7f8      	b.n	10708 <ble_ll_is_valid_own_addr_type+0x14>
   10716:	bf00      	nop
   10718:	20003cf4 	.word	0x20003cf4

0001071c <ble_ll_set_random_addr>:
{
   1071c:	b570      	push	{r4, r5, r6, lr}
    if (len < sizeof(*cmd)) {
   1071e:	2905      	cmp	r1, #5
   10720:	d91c      	bls.n	1075c <ble_ll_set_random_addr+0x40>
    if (g_ble_ll_conn_create_sm || ble_ll_scan_enabled() ||
   10722:	4b11      	ldr	r3, [pc, #68]	; (10768 <ble_ll_set_random_addr+0x4c>)
   10724:	681b      	ldr	r3, [r3, #0]
   10726:	b113      	cbz	r3, 1072e <ble_ll_set_random_addr+0x12>
        return BLE_ERR_CMD_DISALLOWED;
   10728:	240c      	movs	r4, #12
}
   1072a:	4620      	mov	r0, r4
   1072c:	bd70      	pop	{r4, r5, r6, pc}
   1072e:	4616      	mov	r6, r2
   10730:	4605      	mov	r5, r0
    if (g_ble_ll_conn_create_sm || ble_ll_scan_enabled() ||
   10732:	f007 ff11 	bl	18558 <ble_ll_scan_enabled>
   10736:	4604      	mov	r4, r0
   10738:	b990      	cbnz	r0, 10760 <ble_ll_set_random_addr+0x44>
   1073a:	b14e      	cbz	r6, 10750 <ble_ll_set_random_addr+0x34>
    if (!ble_ll_is_valid_random_addr(cmd->addr)) {
   1073c:	4628      	mov	r0, r5
   1073e:	f7ff ff9b 	bl	10678 <ble_ll_is_valid_random_addr>
   10742:	b178      	cbz	r0, 10764 <ble_ll_set_random_addr+0x48>
    memcpy(g_random_addr, cmd->addr, BLE_DEV_ADDR_LEN);
   10744:	4b09      	ldr	r3, [pc, #36]	; (1076c <ble_ll_set_random_addr+0x50>)
   10746:	682a      	ldr	r2, [r5, #0]
   10748:	601a      	str	r2, [r3, #0]
   1074a:	88aa      	ldrh	r2, [r5, #4]
   1074c:	809a      	strh	r2, [r3, #4]
    return BLE_ERR_SUCCESS;
   1074e:	e7ec      	b.n	1072a <ble_ll_set_random_addr+0xe>
                                (!hci_adv_ext && ble_ll_adv_enabled())) {
   10750:	f001 fac6 	bl	11ce0 <ble_ll_adv_enabled>
   10754:	2800      	cmp	r0, #0
   10756:	d0f1      	beq.n	1073c <ble_ll_set_random_addr+0x20>
        return BLE_ERR_CMD_DISALLOWED;
   10758:	240c      	movs	r4, #12
   1075a:	e7e6      	b.n	1072a <ble_ll_set_random_addr+0xe>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1075c:	2412      	movs	r4, #18
   1075e:	e7e4      	b.n	1072a <ble_ll_set_random_addr+0xe>
        return BLE_ERR_CMD_DISALLOWED;
   10760:	240c      	movs	r4, #12
   10762:	e7e2      	b.n	1072a <ble_ll_set_random_addr+0xe>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   10764:	2412      	movs	r4, #18
   10766:	e7e0      	b.n	1072a <ble_ll_set_random_addr+0xe>
   10768:	20003ea8 	.word	0x20003ea8
   1076c:	20003cec 	.word	0x20003cec

00010770 <ble_ll_is_our_devaddr>:
{
   10770:	b508      	push	{r3, lr}
    if (addr_type) {
   10772:	b141      	cbz	r1, 10786 <ble_ll_is_our_devaddr+0x16>
        our_addr = g_random_addr;
   10774:	4b06      	ldr	r3, [pc, #24]	; (10790 <ble_ll_is_our_devaddr+0x20>)
    if (!memcmp(our_addr, addr, BLE_DEV_ADDR_LEN)) {
   10776:	2206      	movs	r2, #6
   10778:	4601      	mov	r1, r0
   1077a:	4618      	mov	r0, r3
   1077c:	f7fd fe54 	bl	e428 <memcmp>
   10780:	b918      	cbnz	r0, 1078a <ble_ll_is_our_devaddr+0x1a>
        rc = 1;
   10782:	2001      	movs	r0, #1
}
   10784:	bd08      	pop	{r3, pc}
        our_addr = g_dev_addr;
   10786:	4b03      	ldr	r3, [pc, #12]	; (10794 <ble_ll_is_our_devaddr+0x24>)
   10788:	e7f5      	b.n	10776 <ble_ll_is_our_devaddr+0x6>
    rc = 0;
   1078a:	2000      	movs	r0, #0
   1078c:	e7fa      	b.n	10784 <ble_ll_is_our_devaddr+0x14>
   1078e:	bf00      	nop
   10790:	20003cec 	.word	0x20003cec
   10794:	20003cf4 	.word	0x20003cf4

00010798 <ble_ll_get_our_devaddr>:
    if (addr_type) {
   10798:	b908      	cbnz	r0, 1079e <ble_ll_get_our_devaddr+0x6>
    return g_dev_addr;
   1079a:	4802      	ldr	r0, [pc, #8]	; (107a4 <ble_ll_get_our_devaddr+0xc>)
}
   1079c:	4770      	bx	lr
        return g_random_addr;
   1079e:	4802      	ldr	r0, [pc, #8]	; (107a8 <ble_ll_get_our_devaddr+0x10>)
   107a0:	4770      	bx	lr
   107a2:	bf00      	nop
   107a4:	20003cf4 	.word	0x20003cf4
   107a8:	20003cec 	.word	0x20003cec

000107ac <ble_ll_wfr_timer_exp>:
{
   107ac:	b538      	push	{r3, r4, r5, lr}
    rx_start = ble_phy_rx_started();
   107ae:	f009 fd55 	bl	1a25c <ble_phy_rx_started>
   107b2:	4605      	mov	r5, r0
    lls = g_ble_ll_data.ll_state;
   107b4:	4b0b      	ldr	r3, [pc, #44]	; (107e4 <ble_ll_wfr_timer_exp+0x38>)
   107b6:	7a1c      	ldrb	r4, [r3, #8]
    ble_ll_trace_u32x3(BLE_LL_TRACE_ID_WFR_EXP, lls, ble_phy_xcvr_state_get(),
   107b8:	f009 fd56 	bl	1a268 <ble_phy_xcvr_state_get>
    if (!rx_start) {
   107bc:	b945      	cbnz	r5, 107d0 <ble_ll_wfr_timer_exp+0x24>
        switch (lls) {
   107be:	1e63      	subs	r3, r4, #1
   107c0:	2b03      	cmp	r3, #3
   107c2:	d805      	bhi.n	107d0 <ble_ll_wfr_timer_exp+0x24>
   107c4:	e8df f003 	tbb	[pc, r3]
   107c8:	050b0802 	.word	0x050b0802
            ble_ll_adv_wfr_timer_exp();
   107cc:	f001 fa66 	bl	11c9c <ble_ll_adv_wfr_timer_exp>
}
   107d0:	bd38      	pop	{r3, r4, r5, pc}
            ble_ll_conn_wfr_timer_exp();
   107d2:	f002 fa77 	bl	12cc4 <ble_ll_conn_wfr_timer_exp>
            break;
   107d6:	e7fb      	b.n	107d0 <ble_ll_wfr_timer_exp+0x24>
            ble_ll_scan_wfr_timer_exp();
   107d8:	f007 fdda 	bl	18390 <ble_ll_scan_wfr_timer_exp>
            break;
   107dc:	e7f8      	b.n	107d0 <ble_ll_wfr_timer_exp+0x24>
            ble_ll_conn_init_wfr_timer_exp();
   107de:	f002 fa80 	bl	12ce2 <ble_ll_conn_init_wfr_timer_exp>
}
   107e2:	e7f5      	b.n	107d0 <ble_ll_wfr_timer_exp+0x24>
   107e4:	20003d50 	.word	0x20003d50

000107e8 <ble_ll_rx_pdu_in>:
{
   107e8:	b508      	push	{r3, lr}
    pkthdr = OS_MBUF_PKTHDR(rxpdu);
   107ea:	f100 0110 	add.w	r1, r0, #16
    STAILQ_INSERT_TAIL(&g_ble_ll_data.ll_rx_pkt_q, pkthdr, omp_next);
   107ee:	2300      	movs	r3, #0
   107f0:	f840 3f14 	str.w	r3, [r0, #20]!
   107f4:	4b05      	ldr	r3, [pc, #20]	; (1080c <ble_ll_rx_pdu_in+0x24>)
   107f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
   107f8:	6011      	str	r1, [r2, #0]
   107fa:	64d8      	str	r0, [r3, #76]	; 0x4c
    os_eventq_put(&evq->evq, &ev->ev);
   107fc:	f103 0138 	add.w	r1, r3, #56	; 0x38
   10800:	f103 0010 	add.w	r0, r3, #16
   10804:	f7fc fa59 	bl	ccba <os_eventq_put>
}
   10808:	bd08      	pop	{r3, pc}
   1080a:	bf00      	nop
   1080c:	20003d50 	.word	0x20003d50

00010810 <ble_ll_acl_data_in>:
{
   10810:	b538      	push	{r3, r4, r5, lr}
   10812:	4604      	mov	r4, r0
    pkthdr = OS_MBUF_PKTHDR(txpkt);
   10814:	f100 0510 	add.w	r5, r0, #16
    OS_ENTER_CRITICAL(sr);
   10818:	f7fc ffee 	bl	d7f8 <os_arch_save_sr>
    STAILQ_INSERT_TAIL(&g_ble_ll_data.ll_tx_pkt_q, pkthdr, omp_next);
   1081c:	4623      	mov	r3, r4
   1081e:	2200      	movs	r2, #0
   10820:	f843 2f14 	str.w	r2, [r3, #20]!
   10824:	4c06      	ldr	r4, [pc, #24]	; (10840 <ble_ll_acl_data_in+0x30>)
   10826:	6e62      	ldr	r2, [r4, #100]	; 0x64
   10828:	6015      	str	r5, [r2, #0]
   1082a:	6663      	str	r3, [r4, #100]	; 0x64
    OS_EXIT_CRITICAL(sr);
   1082c:	f7fc ffea 	bl	d804 <os_arch_restore_sr>
   10830:	f104 0150 	add.w	r1, r4, #80	; 0x50
   10834:	f104 0010 	add.w	r0, r4, #16
   10838:	f7fc fa3f 	bl	ccba <os_eventq_put>
}
   1083c:	bd38      	pop	{r3, r4, r5, pc}
   1083e:	bf00      	nop
   10840:	20003d50 	.word	0x20003d50

00010844 <ble_ll_rx_start>:
{
   10844:	b510      	push	{r4, lr}
   10846:	4614      	mov	r4, r2
    pdu_type = rxbuf[0] & BLE_ADV_PDU_HDR_TYPE_MASK;
   10848:	7800      	ldrb	r0, [r0, #0]
   1084a:	f000 000f 	and.w	r0, r0, #15
    ble_ll_trace_u32x2(BLE_LL_TRACE_ID_RX_START, g_ble_ll_data.ll_state,
   1084e:	4b11      	ldr	r3, [pc, #68]	; (10894 <ble_ll_rx_start+0x50>)
   10850:	7a1b      	ldrb	r3, [r3, #8]
    switch (g_ble_ll_data.ll_state) {
   10852:	3b01      	subs	r3, #1
   10854:	2b03      	cmp	r3, #3
   10856:	d815      	bhi.n	10884 <ble_ll_rx_start+0x40>
   10858:	e8df f003 	tbb	[pc, r3]
   1085c:	020c1009 	.word	0x020c1009
        rc = ble_ll_conn_rx_isr_start(rxhdr, ble_phy_access_addr_get());
   10860:	f009 fcf6 	bl	1a250 <ble_phy_access_addr_get>
   10864:	4601      	mov	r1, r0
   10866:	4620      	mov	r0, r4
   10868:	f002 fed8 	bl	1361c <ble_ll_conn_rx_isr_start>
}
   1086c:	bd10      	pop	{r4, pc}
        rc = ble_ll_adv_rx_isr_start(pdu_type);
   1086e:	f001 f9b1 	bl	11bd4 <ble_ll_adv_rx_isr_start>
        break;
   10872:	e7fb      	b.n	1086c <ble_ll_rx_start+0x28>
        rc = ble_ll_init_rx_isr_start(pdu_type, rxhdr);
   10874:	4621      	mov	r1, r4
   10876:	f002 fd1b 	bl	132b0 <ble_ll_init_rx_isr_start>
        break;
   1087a:	e7f7      	b.n	1086c <ble_ll_rx_start+0x28>
        rc = ble_ll_scan_rx_isr_start(pdu_type, &rxhdr->rxinfo.flags);
   1087c:	4621      	mov	r1, r4
   1087e:	f007 fc8d 	bl	1819c <ble_ll_scan_rx_isr_start>
        break;
   10882:	e7f3      	b.n	1086c <ble_ll_rx_start+0x28>
        STATS_INC(ble_ll_stats, bad_ll_state);
   10884:	4a04      	ldr	r2, [pc, #16]	; (10898 <ble_ll_rx_start+0x54>)
   10886:	6993      	ldr	r3, [r2, #24]
   10888:	3301      	adds	r3, #1
   1088a:	6193      	str	r3, [r2, #24]
        rc = -1;
   1088c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return rc;
   10890:	e7ec      	b.n	1086c <ble_ll_rx_start+0x28>
   10892:	bf00      	nop
   10894:	20003d50 	.word	0x20003d50
   10898:	20003be0 	.word	0x20003be0

0001089c <ble_ll_rx_end>:
{
   1089c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1089e:	4605      	mov	r5, r0
    crcok = BLE_MBUF_HDR_CRC_OK(rxhdr);
   108a0:	880b      	ldrh	r3, [r1, #0]
   108a2:	f003 0280 	and.w	r2, r3, #128	; 0x80
   108a6:	f3c3 16c0 	ubfx	r6, r3, #7, #1
    pdu_type = rxbuf[0] & BLE_ADV_PDU_HDR_TYPE_MASK;
   108aa:	7804      	ldrb	r4, [r0, #0]
    len = rxbuf[1];
   108ac:	7840      	ldrb	r0, [r0, #1]
    if (BLE_MBUF_HDR_RX_STATE(rxhdr) == BLE_LL_STATE_CONNECTION) {
   108ae:	f003 0307 	and.w	r3, r3, #7
   108b2:	2b04      	cmp	r3, #4
   108b4:	d00b      	beq.n	108ce <ble_ll_rx_end+0x32>
   108b6:	f004 040f 	and.w	r4, r4, #15
    if (crcok) {
   108ba:	b30a      	cbz	r2, 10900 <ble_ll_rx_end+0x64>
        switch (pdu_type) {
   108bc:	2c08      	cmp	r4, #8
   108be:	d80d      	bhi.n	108dc <ble_ll_rx_end+0x40>
   108c0:	e8df f004 	tbb	[pc, r4]
   108c4:	0a140a14 	.word	0x0a140a14
   108c8:	2f141a14 	.word	0x2f141a14
   108cc:	2f          	.byte	0x2f
   108cd:	00          	.byte	0x00
        rc = ble_ll_conn_rx_isr_end(rxbuf, rxhdr);
   108ce:	4628      	mov	r0, r5
   108d0:	f002 ff9e 	bl	13810 <ble_ll_conn_rx_isr_end>
   108d4:	4604      	mov	r4, r0
        return rc;
   108d6:	e032      	b.n	1093e <ble_ll_rx_end+0xa2>
            if (len != BLE_SCAN_REQ_LEN) {
   108d8:	280c      	cmp	r0, #12
   108da:	d005      	beq.n	108e8 <ble_ll_rx_end+0x4c>
            STATS_INC(ble_ll_stats, rx_adv_malformed_pkts);
   108dc:	4a2b      	ldr	r2, [pc, #172]	; (1098c <ble_ll_rx_end+0xf0>)
   108de:	6c53      	ldr	r3, [r2, #68]	; 0x44
   108e0:	3301      	adds	r3, #1
   108e2:	6453      	str	r3, [r2, #68]	; 0x44
   108e4:	2201      	movs	r2, #1
   108e6:	e00c      	b.n	10902 <ble_ll_rx_end+0x66>
    badpkt = 0;
   108e8:	2200      	movs	r2, #0
   108ea:	e00a      	b.n	10902 <ble_ll_rx_end+0x66>
            if ((len < BLE_DEV_ADDR_LEN) || (len > BLE_ADV_SCAN_IND_MAX_LEN)) {
   108ec:	1f83      	subs	r3, r0, #6
   108ee:	b2db      	uxtb	r3, r3
   108f0:	2b1f      	cmp	r3, #31
   108f2:	d8f3      	bhi.n	108dc <ble_ll_rx_end+0x40>
    badpkt = 0;
   108f4:	2200      	movs	r2, #0
   108f6:	e004      	b.n	10902 <ble_ll_rx_end+0x66>
            if (len != BLE_CONNECT_REQ_LEN) {
   108f8:	2822      	cmp	r0, #34	; 0x22
   108fa:	d1ef      	bne.n	108dc <ble_ll_rx_end+0x40>
    badpkt = 0;
   108fc:	2200      	movs	r2, #0
   108fe:	e000      	b.n	10902 <ble_ll_rx_end+0x66>
   10900:	2200      	movs	r2, #0
    switch (BLE_MBUF_HDR_RX_STATE(rxhdr)) {
   10902:	780b      	ldrb	r3, [r1, #0]
   10904:	f003 0307 	and.w	r3, r3, #7
   10908:	2b02      	cmp	r3, #2
   1090a:	d025      	beq.n	10958 <ble_ll_rx_end+0xbc>
   1090c:	2b03      	cmp	r3, #3
   1090e:	d036      	beq.n	1097e <ble_ll_rx_end+0xe2>
   10910:	2b01      	cmp	r3, #1
   10912:	d008      	beq.n	10926 <ble_ll_rx_end+0x8a>
        STATS_INC(ble_ll_stats, bad_ll_state);
   10914:	4a1d      	ldr	r2, [pc, #116]	; (1098c <ble_ll_rx_end+0xf0>)
   10916:	6993      	ldr	r3, [r2, #24]
   10918:	3301      	adds	r3, #1
   1091a:	6193      	str	r3, [r2, #24]
        rc = -1;
   1091c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   10920:	e00d      	b.n	1093e <ble_ll_rx_end+0xa2>
    badpkt = 0;
   10922:	2200      	movs	r2, #0
   10924:	e7ed      	b.n	10902 <ble_ll_rx_end+0x66>
        if (!badpkt) {
   10926:	b162      	cbz	r2, 10942 <ble_ll_rx_end+0xa6>
    rxpdu = NULL;
   10928:	2700      	movs	r7, #0
        rc = ble_ll_adv_rx_isr_end(pdu_type, rxpdu, crcok);
   1092a:	4632      	mov	r2, r6
   1092c:	4639      	mov	r1, r7
   1092e:	4620      	mov	r0, r4
   10930:	f001 f908 	bl	11b44 <ble_ll_adv_rx_isr_end>
   10934:	4604      	mov	r4, r0
    if (rxpdu) {
   10936:	b117      	cbz	r7, 1093e <ble_ll_rx_end+0xa2>
        ble_ll_rx_pdu_in(rxpdu);
   10938:	4638      	mov	r0, r7
   1093a:	f7ff ff55 	bl	107e8 <ble_ll_rx_pdu_in>
}
   1093e:	4620      	mov	r0, r4
   10940:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            rxpdu = ble_ll_rxpdu_alloc(len + BLE_LL_PDU_HDR_LEN);
   10942:	3002      	adds	r0, #2
   10944:	f7ff fe26 	bl	10594 <ble_ll_rxpdu_alloc>
            if (rxpdu) {
   10948:	4607      	mov	r7, r0
   1094a:	2800      	cmp	r0, #0
   1094c:	d0ed      	beq.n	1092a <ble_ll_rx_end+0x8e>
                ble_phy_rxpdu_copy(rxbuf, rxpdu);
   1094e:	4601      	mov	r1, r0
   10950:	4628      	mov	r0, r5
   10952:	f008 ff63 	bl	1981c <ble_phy_rxpdu_copy>
   10956:	e7e8      	b.n	1092a <ble_ll_rx_end+0x8e>
        if (!badpkt) {
   10958:	b132      	cbz	r2, 10968 <ble_ll_rx_end+0xcc>
    rxpdu = NULL;
   1095a:	2700      	movs	r7, #0
        rc = ble_ll_scan_rx_isr_end(rxpdu, crcok);
   1095c:	4631      	mov	r1, r6
   1095e:	4638      	mov	r0, r7
   10960:	f007 fcd2 	bl	18308 <ble_ll_scan_rx_isr_end>
   10964:	4604      	mov	r4, r0
        break;
   10966:	e7e6      	b.n	10936 <ble_ll_rx_end+0x9a>
            rxpdu = ble_ll_rxpdu_alloc(len + BLE_LL_PDU_HDR_LEN);
   10968:	3002      	adds	r0, #2
   1096a:	f7ff fe13 	bl	10594 <ble_ll_rxpdu_alloc>
            if (rxpdu) {
   1096e:	4607      	mov	r7, r0
   10970:	2800      	cmp	r0, #0
   10972:	d0f3      	beq.n	1095c <ble_ll_rx_end+0xc0>
                ble_phy_rxpdu_copy(rxbuf, rxpdu);
   10974:	4601      	mov	r1, r0
   10976:	4628      	mov	r0, r5
   10978:	f008 ff50 	bl	1981c <ble_phy_rxpdu_copy>
   1097c:	e7ee      	b.n	1095c <ble_ll_rx_end+0xc0>
        rc = ble_ll_init_rx_isr_end(rxbuf, crcok, rxhdr);
   1097e:	460a      	mov	r2, r1
   10980:	4631      	mov	r1, r6
   10982:	4628      	mov	r0, r5
   10984:	f002 fca8 	bl	132d8 <ble_ll_init_rx_isr_end>
   10988:	4604      	mov	r4, r0
   1098a:	e7d8      	b.n	1093e <ble_ll_rx_end+0xa2>
   1098c:	20003be0 	.word	0x20003be0

00010990 <ble_ll_tx_mbuf_pducb>:
{
   10990:	b538      	push	{r3, r4, r5, lr}
    BLE_LL_ASSERT(txpdu);
   10992:	b159      	cbz	r1, 109ac <ble_ll_tx_mbuf_pducb+0x1c>
   10994:	4615      	mov	r5, r2
   10996:	460c      	mov	r4, r1
    os_mbuf_copydata(txpdu, ble_hdr->txinfo.offset, ble_hdr->txinfo.pyld_len,
   10998:	4603      	mov	r3, r0
   1099a:	7e8a      	ldrb	r2, [r1, #26]
   1099c:	7e49      	ldrb	r1, [r1, #25]
   1099e:	4620      	mov	r0, r4
   109a0:	f7fd f8da 	bl	db58 <os_mbuf_copydata>
    *hdr_byte = ble_hdr->txinfo.hdr_byte;
   109a4:	7ee3      	ldrb	r3, [r4, #27]
   109a6:	702b      	strb	r3, [r5, #0]
}
   109a8:	7ea0      	ldrb	r0, [r4, #26]
   109aa:	bd38      	pop	{r3, r4, r5, pc}
    BLE_LL_ASSERT(txpdu);
   109ac:	f7fb fc1c 	bl	c1e8 <hal_debugger_connected>
   109b0:	b100      	cbz	r0, 109b4 <ble_ll_tx_mbuf_pducb+0x24>
   109b2:	be01      	bkpt	0x0001
   109b4:	2300      	movs	r3, #0
   109b6:	461a      	mov	r2, r3
   109b8:	4619      	mov	r1, r3
   109ba:	4618      	mov	r0, r3
   109bc:	f7fb fe4e 	bl	c65c <__assert_func>

000109c0 <ble_ll_state_set>:
    g_ble_ll_data.ll_state = ll_state;
   109c0:	4b01      	ldr	r3, [pc, #4]	; (109c8 <ble_ll_state_set+0x8>)
   109c2:	7218      	strb	r0, [r3, #8]
}
   109c4:	4770      	bx	lr
   109c6:	bf00      	nop
   109c8:	20003d50 	.word	0x20003d50

000109cc <ble_ll_state_get>:
}
   109cc:	4b01      	ldr	r3, [pc, #4]	; (109d4 <ble_ll_state_get+0x8>)
   109ce:	7a18      	ldrb	r0, [r3, #8]
   109d0:	4770      	bx	lr
   109d2:	bf00      	nop
   109d4:	20003d50 	.word	0x20003d50

000109d8 <ble_ll_event_send>:
{
   109d8:	b508      	push	{r3, lr}
   109da:	4601      	mov	r1, r0
   109dc:	4801      	ldr	r0, [pc, #4]	; (109e4 <ble_ll_event_send+0xc>)
   109de:	f7fc f96c 	bl	ccba <os_eventq_put>
}
   109e2:	bd08      	pop	{r3, pc}
   109e4:	20003d60 	.word	0x20003d60

000109e8 <ble_ll_read_supp_states>:
}
   109e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   109ec:	f240 31ff 	movw	r1, #1023	; 0x3ff
   109f0:	4770      	bx	lr
	...

000109f4 <ble_ll_read_supp_features>:
}
   109f4:	4b01      	ldr	r3, [pc, #4]	; (109fc <ble_ll_read_supp_features+0x8>)
   109f6:	e9d3 0100 	ldrd	r0, r1, [r3]
   109fa:	4770      	bx	lr
   109fc:	20003d50 	.word	0x20003d50

00010a00 <ble_ll_reset>:
{
   10a00:	b538      	push	{r3, r4, r5, lr}
    OS_ENTER_CRITICAL(sr);
   10a02:	f7fc fef9 	bl	d7f8 <os_arch_save_sr>
   10a06:	4604      	mov	r4, r0
    ble_phy_disable();
   10a08:	f009 f964 	bl	19cd4 <ble_phy_disable>
    ble_ll_sched_stop();
   10a0c:	f008 fa88 	bl	18f20 <ble_ll_sched_stop>
    ble_ll_scan_reset();
   10a10:	f007 fdc6 	bl	185a0 <ble_ll_scan_reset>
    ble_ll_rfmgmt_reset();
   10a14:	f006 fc36 	bl	17284 <ble_ll_rfmgmt_reset>
    OS_EXIT_CRITICAL(sr);
   10a18:	4620      	mov	r0, r4
   10a1a:	f7fc fef3 	bl	d804 <os_arch_restore_sr>
    ble_ll_adv_reset();
   10a1e:	f001 f947 	bl	11cb0 <ble_ll_adv_reset>
    ble_ll_flush_pkt_queue(&g_ble_ll_data.ll_tx_pkt_q);
   10a22:	4c13      	ldr	r4, [pc, #76]	; (10a70 <ble_ll_reset+0x70>)
   10a24:	4620      	mov	r0, r4
   10a26:	f7ff fcb5 	bl	10394 <ble_ll_flush_pkt_queue>
    ble_ll_flush_pkt_queue(&g_ble_ll_data.ll_rx_pkt_q);
   10a2a:	f1a4 0018 	sub.w	r0, r4, #24
   10a2e:	f7ff fcb1 	bl	10394 <ble_ll_flush_pkt_queue>
    STATS_RESET(ble_ll_stats);
   10a32:	f44f 7280 	mov.w	r2, #256	; 0x100
   10a36:	2100      	movs	r1, #0
   10a38:	480e      	ldr	r0, [pc, #56]	; (10a74 <ble_ll_reset+0x74>)
   10a3a:	f7fd fd41 	bl	e4c0 <memset>
    g_ble_ll_data.ll_pref_tx_phys = 0;
   10a3e:	2500      	movs	r5, #0
   10a40:	f804 5c54 	strb.w	r5, [r4, #-84]
    g_ble_ll_data.ll_pref_rx_phys = 0;
   10a44:	f804 5c53 	strb.w	r5, [r4, #-83]
    ble_ll_conn_module_reset();
   10a48:	f003 f996 	bl	13d78 <ble_ll_conn_module_reset>
    ble_ll_hci_init();
   10a4c:	f005 fdea 	bl	16624 <ble_ll_hci_init>
    ble_ll_sched_init();
   10a50:	f008 fa6e 	bl	18f30 <ble_ll_sched_init>
    ble_ll_state_set(BLE_LL_STATE_STANDBY);
   10a54:	4628      	mov	r0, r5
   10a56:	f7ff ffb3 	bl	109c0 <ble_ll_state_set>
    memset(g_random_addr, 0, BLE_DEV_ADDR_LEN);
   10a5a:	4b07      	ldr	r3, [pc, #28]	; (10a78 <ble_ll_reset+0x78>)
   10a5c:	601d      	str	r5, [r3, #0]
   10a5e:	809d      	strh	r5, [r3, #4]
    ble_ll_whitelist_clear();
   10a60:	f008 fb64 	bl	1912c <ble_ll_whitelist_clear>
    ble_ll_resolv_list_reset();
   10a64:	f006 fb3a 	bl	170dc <ble_ll_resolv_list_reset>
    rc = ble_phy_init();
   10a68:	f008 ffd0 	bl	19a0c <ble_phy_init>
}
   10a6c:	bd38      	pop	{r3, r4, r5, pc}
   10a6e:	bf00      	nop
   10a70:	20003db0 	.word	0x20003db0
   10a74:	20003bec 	.word	0x20003bec
   10a78:	20003cec 	.word	0x20003cec

00010a7c <ble_ll_pdu_tx_time_get>:
    }

    usecs += g_ble_ll_pdu_header_tx_time[phy_mode];
#else
    usecs = (((payload_len) + BLE_LL_PDU_HDR_LEN + BLE_LL_ACC_ADDR_LEN
            + BLE_LL_PREAMBLE_LEN + BLE_LL_CRC_LEN) << 3);
   10a7c:	300a      	adds	r0, #10
#endif

    return usecs;
}
   10a7e:	00c0      	lsls	r0, r0, #3
   10a80:	4770      	bx	lr
	...

00010a84 <ble_ll_pdu_max_tx_octets_get>:

uint16_t
ble_ll_pdu_max_tx_octets_get(uint32_t usecs, int phy_mode)
{
   10a84:	b508      	push	{r3, lr}
    uint32_t header_tx_time;
    uint16_t octets = 0;

    BLE_LL_ASSERT(phy_mode < BLE_PHY_NUM_MODE);
   10a86:	2903      	cmp	r1, #3
   10a88:	dc0f      	bgt.n	10aaa <ble_ll_pdu_max_tx_octets_get+0x26>

    header_tx_time = g_ble_ll_pdu_header_tx_time[phy_mode];
   10a8a:	4b19      	ldr	r3, [pc, #100]	; (10af0 <ble_ll_pdu_max_tx_octets_get+0x6c>)
   10a8c:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
     * Reference:
     * Core v5.0, Vol 6, Part B, section 4.5.10
     * see connEffectiveMaxTxTime and connEffectiveMaxRxTime definitions
     */

    if (usecs < header_tx_time) {
   10a90:	4283      	cmp	r3, r0
   10a92:	d82a      	bhi.n	10aea <ble_ll_pdu_max_tx_octets_get+0x66>
        return 27;
    }

    usecs -= header_tx_time;
   10a94:	1ac0      	subs	r0, r0, r3

    if (phy_mode == BLE_PHY_MODE_1M) {
   10a96:	2901      	cmp	r1, #1
   10a98:	d011      	beq.n	10abe <ble_ll_pdu_max_tx_octets_get+0x3a>
        /* 8 usecs per byte */
        octets = usecs >> 3;
    } else if (phy_mode == BLE_PHY_MODE_2M) {
   10a9a:	2902      	cmp	r1, #2
   10a9c:	d015      	beq.n	10aca <ble_ll_pdu_max_tx_octets_get+0x46>
        /* 4 usecs per byte */
        octets = usecs >> 2;
    } else if (phy_mode == BLE_PHY_MODE_CODED_125KBPS) {
   10a9e:	2903      	cmp	r1, #3
   10aa0:	d016      	beq.n	10ad0 <ble_ll_pdu_max_tx_octets_get+0x4c>
        /* S=8 => 8 * 8 = 64 usecs per byte */
        octets = usecs >> 6;
    } else if (phy_mode == BLE_PHY_MODE_CODED_500KBPS) {
   10aa2:	b9c1      	cbnz	r1, 10ad6 <ble_ll_pdu_max_tx_octets_get+0x52>
        /* S=2 => 2 * 8 = 16 usecs per byte */
        octets = usecs >> 4;
   10aa4:	f3c0 100f 	ubfx	r0, r0, #4, #16
   10aa8:	e00b      	b.n	10ac2 <ble_ll_pdu_max_tx_octets_get+0x3e>
    BLE_LL_ASSERT(phy_mode < BLE_PHY_NUM_MODE);
   10aaa:	f7fb fb9d 	bl	c1e8 <hal_debugger_connected>
   10aae:	b100      	cbz	r0, 10ab2 <ble_ll_pdu_max_tx_octets_get+0x2e>
   10ab0:	be01      	bkpt	0x0001
   10ab2:	2300      	movs	r3, #0
   10ab4:	461a      	mov	r2, r3
   10ab6:	4619      	mov	r1, r3
   10ab8:	4618      	mov	r0, r3
   10aba:	f7fb fdcf 	bl	c65c <__assert_func>
        octets = usecs >> 3;
   10abe:	f3c0 00cf 	ubfx	r0, r0, #3, #16
    } else {
        BLE_LL_ASSERT(0);
    }

    /* see comment at the beginning */
    return max(27, octets);
   10ac2:	281b      	cmp	r0, #27
   10ac4:	bf38      	it	cc
   10ac6:	201b      	movcc	r0, #27
}
   10ac8:	bd08      	pop	{r3, pc}
        octets = usecs >> 2;
   10aca:	f3c0 008f 	ubfx	r0, r0, #2, #16
   10ace:	e7f8      	b.n	10ac2 <ble_ll_pdu_max_tx_octets_get+0x3e>
        octets = usecs >> 6;
   10ad0:	f3c0 108f 	ubfx	r0, r0, #6, #16
   10ad4:	e7f5      	b.n	10ac2 <ble_ll_pdu_max_tx_octets_get+0x3e>
        BLE_LL_ASSERT(0);
   10ad6:	f7fb fb87 	bl	c1e8 <hal_debugger_connected>
   10ada:	b100      	cbz	r0, 10ade <ble_ll_pdu_max_tx_octets_get+0x5a>
   10adc:	be01      	bkpt	0x0001
   10ade:	2300      	movs	r3, #0
   10ae0:	461a      	mov	r2, r3
   10ae2:	4619      	mov	r1, r3
   10ae4:	4618      	mov	r0, r3
   10ae6:	f7fb fdb9 	bl	c65c <__assert_func>
        return 27;
   10aea:	201b      	movs	r0, #27
   10aec:	e7ec      	b.n	10ac8 <ble_ll_pdu_max_tx_octets_get+0x44>
   10aee:	bf00      	nop
   10af0:	0002af30 	.word	0x0002af30

00010af4 <ble_ll_init>:
 *
 * @return int
 */
void
ble_ll_init(void)
{
   10af4:	b5f0      	push	{r4, r5, r6, r7, lr}
   10af6:	b08d      	sub	sp, #52	; 0x34
    uint64_t features;
    ble_addr_t addr;
    struct ble_ll_obj *lldata;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   10af8:	4b51      	ldr	r3, [pc, #324]	; (10c40 <ble_ll_init+0x14c>)
   10afa:	781b      	ldrb	r3, [r3, #0]
   10afc:	2b00      	cmp	r3, #0
   10afe:	d07b      	beq.n	10bf8 <ble_ll_init+0x104>
    return memcmp(addr, BLE_ADDR_ANY, BLE_DEV_ADDR_LEN) == 0;
   10b00:	2300      	movs	r3, #0
   10b02:	9308      	str	r3, [sp, #32]
   10b04:	f8cd 3023 	str.w	r3, [sp, #35]	; 0x23
   10b08:	2206      	movs	r2, #6
   10b0a:	a908      	add	r1, sp, #32
   10b0c:	484d      	ldr	r0, [pc, #308]	; (10c44 <ble_ll_init+0x150>)
   10b0e:	f7fd fc8b 	bl	e428 <memcmp>

    ble_ll_trace_init();
    ble_phy_trace_init();

    /* Set public device address if not already set */
    if (ble_ll_is_addr_empty(g_dev_addr)) {
   10b12:	b988      	cbnz	r0, 10b38 <ble_ll_init+0x44>
        /* Use sycfg address if configured, otherwise try to read from HW */
        if (!ble_ll_is_addr_empty(MYNEWT_VAL(BLE_PUBLIC_DEV_ADDR))) {
   10b14:	2300      	movs	r3, #0
   10b16:	9306      	str	r3, [sp, #24]
   10b18:	f8ad 301c 	strh.w	r3, [sp, #28]
    return memcmp(addr, BLE_ADDR_ANY, BLE_DEV_ADDR_LEN) == 0;
   10b1c:	930a      	str	r3, [sp, #40]	; 0x28
   10b1e:	f8cd 302b 	str.w	r3, [sp, #43]	; 0x2b
   10b22:	2206      	movs	r2, #6
   10b24:	a90a      	add	r1, sp, #40	; 0x28
   10b26:	a806      	add	r0, sp, #24
   10b28:	f7fd fc7e 	bl	e428 <memcmp>
        if (!ble_ll_is_addr_empty(MYNEWT_VAL(BLE_PUBLIC_DEV_ADDR))) {
   10b2c:	2800      	cmp	r0, #0
   10b2e:	d06d      	beq.n	10c0c <ble_ll_init+0x118>
            memcpy(g_dev_addr, MYNEWT_VAL(BLE_PUBLIC_DEV_ADDR), BLE_DEV_ADDR_LEN);
   10b30:	4b44      	ldr	r3, [pc, #272]	; (10c44 <ble_ll_init+0x150>)
   10b32:	2200      	movs	r2, #0
   10b34:	601a      	str	r2, [r3, #0]
   10b36:	809a      	strh	r2, [r3, #4]
                memcpy(g_dev_addr, &addr.val[0], BLE_DEV_ADDR_LEN);
            }
        }
    }

    ble_ll_rfmgmt_init();
   10b38:	f006 fb88 	bl	1724c <ble_ll_rfmgmt_init>

    /* Get pointer to global data object */
    lldata = &g_ble_ll_data;

    /* Set acl pkt size and number */
    lldata->ll_num_acl_pkts = MYNEWT_VAL(BLE_ACL_BUF_COUNT);
   10b3c:	4c42      	ldr	r4, [pc, #264]	; (10c48 <ble_ll_init+0x154>)
   10b3e:	2604      	movs	r6, #4
   10b40:	7266      	strb	r6, [r4, #9]
    lldata->ll_acl_pkt_size = MYNEWT_VAL(BLE_ACL_BUF_SIZE);
   10b42:	23ff      	movs	r3, #255	; 0xff
   10b44:	8163      	strh	r3, [r4, #10]
    os_eventq_init(&evq->evq);
   10b46:	f104 0710 	add.w	r7, r4, #16
   10b4a:	4638      	mov	r0, r7
   10b4c:	f7fc f8a8 	bl	cca0 <os_eventq_init>

    /* Initialize eventq */
    ble_npl_eventq_init(&lldata->ll_evq);

    /* Initialize the transmit (from host) and receive (from phy) queues */
    STAILQ_INIT(&lldata->ll_tx_pkt_q);
   10b50:	2500      	movs	r5, #0
   10b52:	4623      	mov	r3, r4
   10b54:	f843 5f60 	str.w	r5, [r3, #96]!
   10b58:	6663      	str	r3, [r4, #100]	; 0x64
    STAILQ_INIT(&lldata->ll_rx_pkt_q);
   10b5a:	4623      	mov	r3, r4
   10b5c:	f843 5f48 	str.w	r5, [r3, #72]!
   10b60:	64e3      	str	r3, [r4, #76]	; 0x4c
    memset(ev, 0, sizeof(*ev));
   10b62:	63a5      	str	r5, [r4, #56]	; 0x38
   10b64:	6425      	str	r5, [r4, #64]	; 0x40
   10b66:	6465      	str	r5, [r4, #68]	; 0x44
    ev->ev.ev_cb = (os_event_fn *)fn;
   10b68:	4b38      	ldr	r3, [pc, #224]	; (10c4c <ble_ll_init+0x158>)
   10b6a:	63e3      	str	r3, [r4, #60]	; 0x3c
    memset(ev, 0, sizeof(*ev));
   10b6c:	6525      	str	r5, [r4, #80]	; 0x50
   10b6e:	65a5      	str	r5, [r4, #88]	; 0x58
   10b70:	65e5      	str	r5, [r4, #92]	; 0x5c
    ev->ev.ev_cb = (os_event_fn *)fn;
   10b72:	4b37      	ldr	r3, [pc, #220]	; (10c50 <ble_ll_init+0x15c>)
   10b74:	6563      	str	r3, [r4, #84]	; 0x54
    memset(ev, 0, sizeof(*ev));
   10b76:	66a5      	str	r5, [r4, #104]	; 0x68
   10b78:	6725      	str	r5, [r4, #112]	; 0x70
   10b7a:	6765      	str	r5, [r4, #116]	; 0x74
    ev->ev.ev_cb = (os_event_fn *)fn;
   10b7c:	4b35      	ldr	r3, [pc, #212]	; (10c54 <ble_ll_init+0x160>)
   10b7e:	66e3      	str	r3, [r4, #108]	; 0x6c
    memset(ev, 0, sizeof(*ev));
   10b80:	67a5      	str	r5, [r4, #120]	; 0x78
   10b82:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
   10b86:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
    ev->ev.ev_cb = (os_event_fn *)fn;
   10b8a:	4b33      	ldr	r3, [pc, #204]	; (10c58 <ble_ll_init+0x164>)
   10b8c:	67e3      	str	r3, [r4, #124]	; 0x7c
    os_callout_init(&co->co, &evq->evq, (os_event_fn *)ev_cb, ev_arg);
   10b8e:	462b      	mov	r3, r5
   10b90:	4a32      	ldr	r2, [pc, #200]	; (10c5c <ble_ll_init+0x168>)
   10b92:	4639      	mov	r1, r7
   10b94:	f104 0088 	add.w	r0, r4, #136	; 0x88
   10b98:	f7fb ff08 	bl	c9ac <os_callout_init>
                         &g_ble_ll_data.ll_evq,
                         ble_ll_hw_err_timer_cb,
                         NULL);

    /* Initialize LL HCI */
    ble_ll_hci_init();
   10b9c:	f005 fd42 	bl	16624 <ble_ll_hci_init>

    /* Init the scheduler */
    ble_ll_sched_init();
   10ba0:	f008 f9c6 	bl	18f30 <ble_ll_sched_init>

    /* Initialize advertiser */
    ble_ll_adv_init();
   10ba4:	f001 f8ac 	bl	11d00 <ble_ll_adv_init>

    /* Initialize a scanner */
    ble_ll_scan_init();
   10ba8:	f007 fd1e 	bl	185e8 <ble_ll_scan_init>

    /* Initialize the connection module */
    ble_ll_conn_module_init();
   10bac:	f003 f948 	bl	13e40 <ble_ll_conn_module_init>
    features |= BLE_LL_FEAT_LE_ENCRYPTION;
#endif

#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LL_PRIVACY)
    features |= (BLE_LL_FEAT_LL_PRIVACY | BLE_LL_FEAT_EXT_SCAN_FILT);
    ble_ll_resolv_init();
   10bb0:	f006 fa7a 	bl	170a8 <ble_ll_resolv_init>
    features |= BLE_LL_FEAT_SYNC_TRANS_RECV;
    features |= BLE_LL_FEAT_SYNC_TRANS_SEND;
#endif

    /* Initialize random number generation */
    ble_ll_rand_init();
   10bb4:	f005 ff2c 	bl	16a10 <ble_ll_rand_init>

    /* XXX: This really doesn't belong here, as the address probably has not
     * been set yet.
     */
    ble_ll_seed_prng();
   10bb8:	f7ff fcdc 	bl	10574 <ble_ll_seed_prng>

    lldata->ll_supp_features = features;
   10bbc:	22ff      	movs	r2, #255	; 0xff
   10bbe:	2300      	movs	r3, #0
   10bc0:	e9c4 2300 	strd	r2, r3, [r4]

    rc = stats_init_and_reg(STATS_HDR(ble_ll_stats),
   10bc4:	4b26      	ldr	r3, [pc, #152]	; (10c60 <ble_ll_init+0x16c>)
   10bc6:	9301      	str	r3, [sp, #4]
   10bc8:	9500      	str	r5, [sp, #0]
   10bca:	462b      	mov	r3, r5
   10bcc:	2240      	movs	r2, #64	; 0x40
   10bce:	4631      	mov	r1, r6
   10bd0:	4824      	ldr	r0, [pc, #144]	; (10c64 <ble_ll_init+0x170>)
   10bd2:	f7ff fa4d 	bl	10070 <stats_init_and_reg>
                            STATS_SIZE_INIT_PARMS(ble_ll_stats, STATS_SIZE_32),
                            STATS_NAME_INIT_PARMS(ble_ll_stats),
                            "ble_ll");
    SYSINIT_PANIC_ASSERT(rc == 0);
   10bd6:	bb30      	cbnz	r0, 10c26 <ble_ll_init+0x132>
    ble_ll_dtm_init();
#endif

#if MYNEWT
    /* Initialize the LL task */
    os_task_init(&g_ble_ll_task, "ble_ll", ble_ll_task, NULL,
   10bd8:	2378      	movs	r3, #120	; 0x78
   10bda:	9303      	str	r3, [sp, #12]
   10bdc:	4b22      	ldr	r3, [pc, #136]	; (10c68 <ble_ll_init+0x174>)
   10bde:	9302      	str	r3, [sp, #8]
   10be0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10be4:	9301      	str	r3, [sp, #4]
   10be6:	2300      	movs	r3, #0
   10be8:	9300      	str	r3, [sp, #0]
   10bea:	4a20      	ldr	r2, [pc, #128]	; (10c6c <ble_ll_init+0x178>)
   10bec:	491c      	ldr	r1, [pc, #112]	; (10c60 <ble_ll_init+0x16c>)
   10bee:	4820      	ldr	r0, [pc, #128]	; (10c70 <ble_ll_init+0x17c>)
   10bf0:	f7fc fc76 	bl	d4e0 <os_task_init>
 * For non-Mynewt OS it is required that OS creates task for LL and run LL
 * routine which is wrapped by nimble_port_ll_task_func().
 */

#endif
}
   10bf4:	b00d      	add	sp, #52	; 0x34
   10bf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    SYSINIT_ASSERT_ACTIVE();
   10bf8:	f7fb faf6 	bl	c1e8 <hal_debugger_connected>
   10bfc:	b100      	cbz	r0, 10c00 <ble_ll_init+0x10c>
   10bfe:	be01      	bkpt	0x0001
   10c00:	2300      	movs	r3, #0
   10c02:	461a      	mov	r2, r3
   10c04:	4619      	mov	r1, r3
   10c06:	4618      	mov	r0, r3
   10c08:	f7fb fd28 	bl	c65c <__assert_func>
            rc = ble_hw_get_public_addr(&addr);
   10c0c:	a804      	add	r0, sp, #16
   10c0e:	f008 fb29 	bl	19264 <ble_hw_get_public_addr>
            if (!rc) {
   10c12:	2800      	cmp	r0, #0
   10c14:	d190      	bne.n	10b38 <ble_ll_init+0x44>
                memcpy(g_dev_addr, &addr.val[0], BLE_DEV_ADDR_LEN);
   10c16:	4a0b      	ldr	r2, [pc, #44]	; (10c44 <ble_ll_init+0x150>)
   10c18:	ab0c      	add	r3, sp, #48	; 0x30
   10c1a:	f853 1d1f 	ldr.w	r1, [r3, #-31]!
   10c1e:	6011      	str	r1, [r2, #0]
   10c20:	889b      	ldrh	r3, [r3, #4]
   10c22:	8093      	strh	r3, [r2, #4]
   10c24:	e788      	b.n	10b38 <ble_ll_init+0x44>
    SYSINIT_PANIC_ASSERT(rc == 0);
   10c26:	f7fb fadf 	bl	c1e8 <hal_debugger_connected>
   10c2a:	b100      	cbz	r0, 10c2e <ble_ll_init+0x13a>
   10c2c:	be01      	bkpt	0x0001
   10c2e:	2000      	movs	r0, #0
   10c30:	9000      	str	r0, [sp, #0]
   10c32:	4b10      	ldr	r3, [pc, #64]	; (10c74 <ble_ll_init+0x180>)
   10c34:	681c      	ldr	r4, [r3, #0]
   10c36:	4603      	mov	r3, r0
   10c38:	4602      	mov	r2, r0
   10c3a:	4601      	mov	r1, r0
   10c3c:	47a0      	blx	r4
   10c3e:	e7cb      	b.n	10bd8 <ble_ll_init+0xe4>
   10c40:	20003bd8 	.word	0x20003bd8
   10c44:	20003cf4 	.word	0x20003cf4
   10c48:	20003d50 	.word	0x20003d50
   10c4c:	0001056d 	.word	0x0001056d
   10c50:	000104ad 	.word	0x000104ad
   10c54:	0001042b 	.word	0x0001042b
   10c58:	00010421 	.word	0x00010421
   10c5c:	00010405 	.word	0x00010405
   10c60:	0002af28 	.word	0x0002af28
   10c64:	20003be0 	.word	0x20003be0
   10c68:	20002438 	.word	0x20002438
   10c6c:	000103b5 	.word	0x000103b5
   10c70:	20003cfc 	.word	0x20003cfc
   10c74:	20000144 	.word	0x20000144

00010c78 <ble_ll_adv_first_chan>:
ble_ll_adv_first_chan(struct ble_ll_adv_sm *advsm)
{
    uint8_t adv_chan;

    /* Set first advertising channel */
    if (advsm->adv_chanmask & 0x01) {
   10c78:	7883      	ldrb	r3, [r0, #2]
   10c7a:	f013 0f01 	tst.w	r3, #1
   10c7e:	d106      	bne.n	10c8e <ble_ll_adv_first_chan+0x16>
        adv_chan = BLE_PHY_ADV_CHAN_START;
    } else if (advsm->adv_chanmask & 0x02) {
   10c80:	f013 0f02 	tst.w	r3, #2
   10c84:	d101      	bne.n	10c8a <ble_ll_adv_first_chan+0x12>
        adv_chan = BLE_PHY_ADV_CHAN_START + 1;
    } else {
        adv_chan = BLE_PHY_ADV_CHAN_START + 2;
   10c86:	2027      	movs	r0, #39	; 0x27
    }

    return adv_chan;
}
   10c88:	4770      	bx	lr
        adv_chan = BLE_PHY_ADV_CHAN_START + 1;
   10c8a:	2026      	movs	r0, #38	; 0x26
   10c8c:	4770      	bx	lr
        adv_chan = BLE_PHY_ADV_CHAN_START;
   10c8e:	2025      	movs	r0, #37	; 0x25
   10c90:	4770      	bx	lr

00010c92 <ble_ll_adv_final_chan>:
static uint8_t
ble_ll_adv_final_chan(struct ble_ll_adv_sm *advsm)
{
    uint8_t adv_chan;

    if (advsm->adv_chanmask & 0x04) {
   10c92:	7883      	ldrb	r3, [r0, #2]
   10c94:	f013 0f04 	tst.w	r3, #4
   10c98:	d106      	bne.n	10ca8 <ble_ll_adv_final_chan+0x16>
        adv_chan = BLE_PHY_ADV_CHAN_START + 2;
    } else if (advsm->adv_chanmask & 0x02) {
   10c9a:	f013 0f02 	tst.w	r3, #2
   10c9e:	d101      	bne.n	10ca4 <ble_ll_adv_final_chan+0x12>
        adv_chan = BLE_PHY_ADV_CHAN_START + 1;
    } else {
        adv_chan = BLE_PHY_ADV_CHAN_START;
   10ca0:	2025      	movs	r0, #37	; 0x25
    }

    return adv_chan;
}
   10ca2:	4770      	bx	lr
        adv_chan = BLE_PHY_ADV_CHAN_START + 1;
   10ca4:	2026      	movs	r0, #38	; 0x26
   10ca6:	4770      	bx	lr
        adv_chan = BLE_PHY_ADV_CHAN_START + 2;
   10ca8:	2027      	movs	r0, #39	; 0x27
   10caa:	4770      	bx	lr

00010cac <ble_ll_adv_flags_set>:
{
   10cac:	b538      	push	{r3, r4, r5, lr}
   10cae:	4605      	mov	r5, r0
   10cb0:	460c      	mov	r4, r1
    OS_ENTER_CRITICAL(sr);
   10cb2:	f7fc fda1 	bl	d7f8 <os_arch_save_sr>
    advsm->flags |= flags;
   10cb6:	896b      	ldrh	r3, [r5, #10]
   10cb8:	431c      	orrs	r4, r3
   10cba:	816c      	strh	r4, [r5, #10]
    OS_EXIT_CRITICAL(sr);
   10cbc:	f7fc fda2 	bl	d804 <os_arch_restore_sr>
}
   10cc0:	bd38      	pop	{r3, r4, r5, pc}

00010cc2 <ble_ll_adv_flags_clear>:
{
   10cc2:	b538      	push	{r3, r4, r5, lr}
   10cc4:	4604      	mov	r4, r0
   10cc6:	460d      	mov	r5, r1
    OS_ENTER_CRITICAL(sr);
   10cc8:	f7fc fd96 	bl	d7f8 <os_arch_save_sr>
    advsm->flags &= ~flags;
   10ccc:	8961      	ldrh	r1, [r4, #10]
   10cce:	ea21 0105 	bic.w	r1, r1, r5
   10cd2:	8161      	strh	r1, [r4, #10]
    OS_EXIT_CRITICAL(sr);
   10cd4:	f7fc fd96 	bl	d804 <os_arch_restore_sr>
}
   10cd8:	bd38      	pop	{r3, r4, r5, pc}

00010cda <ble_ll_adv_rpa_update>:
{
   10cda:	b538      	push	{r3, r4, r5, lr}
   10cdc:	4604      	mov	r4, r0
    if (ble_ll_resolv_gen_rpa(advsm->peer_addr, advsm->peer_addr_type,
   10cde:	f100 0534 	add.w	r5, r0, #52	; 0x34
   10ce2:	2301      	movs	r3, #1
   10ce4:	f100 0228 	add.w	r2, r0, #40	; 0x28
   10ce8:	7941      	ldrb	r1, [r0, #5]
   10cea:	4628      	mov	r0, r5
   10cec:	f006 f988 	bl	17000 <ble_ll_resolv_gen_rpa>
   10cf0:	b960      	cbnz	r0, 10d0c <ble_ll_adv_rpa_update+0x32>
        if (advsm->own_addr_type & 1) {
   10cf2:	7923      	ldrb	r3, [r4, #4]
   10cf4:	f013 0f01 	tst.w	r3, #1
   10cf8:	d00d      	beq.n	10d16 <ble_ll_adv_rpa_update+0x3c>
            ble_ll_adv_flags_set(advsm, BLE_LL_ADV_SM_FLAG_TX_ADD);
   10cfa:	2101      	movs	r1, #1
   10cfc:	4620      	mov	r0, r4
   10cfe:	f7ff ffd5 	bl	10cac <ble_ll_adv_flags_set>
    if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_DIRECTED) {
   10d02:	89a3      	ldrh	r3, [r4, #12]
   10d04:	f013 0f04 	tst.w	r3, #4
   10d08:	d10a      	bne.n	10d20 <ble_ll_adv_rpa_update+0x46>
}
   10d0a:	bd38      	pop	{r3, r4, r5, pc}
        ble_ll_adv_flags_set(advsm, BLE_LL_ADV_SM_FLAG_TX_ADD);
   10d0c:	2101      	movs	r1, #1
   10d0e:	4620      	mov	r0, r4
   10d10:	f7ff ffcc 	bl	10cac <ble_ll_adv_flags_set>
   10d14:	e7f5      	b.n	10d02 <ble_ll_adv_rpa_update+0x28>
            ble_ll_adv_flags_clear(advsm, BLE_LL_ADV_SM_FLAG_TX_ADD);
   10d16:	2101      	movs	r1, #1
   10d18:	4620      	mov	r0, r4
   10d1a:	f7ff ffd2 	bl	10cc2 <ble_ll_adv_flags_clear>
   10d1e:	e7f0      	b.n	10d02 <ble_ll_adv_rpa_update+0x28>
        if (ble_ll_resolv_gen_rpa(advsm->peer_addr, advsm->peer_addr_type,
   10d20:	2300      	movs	r3, #0
   10d22:	f104 023a 	add.w	r2, r4, #58	; 0x3a
   10d26:	7961      	ldrb	r1, [r4, #5]
   10d28:	4628      	mov	r0, r5
   10d2a:	f006 f969 	bl	17000 <ble_ll_resolv_gen_rpa>
   10d2e:	b940      	cbnz	r0, 10d42 <ble_ll_adv_rpa_update+0x68>
            if (advsm->peer_addr_type & 1) {
   10d30:	7963      	ldrb	r3, [r4, #5]
   10d32:	f013 0f01 	tst.w	r3, #1
   10d36:	d109      	bne.n	10d4c <ble_ll_adv_rpa_update+0x72>
                ble_ll_adv_flags_clear(advsm, BLE_LL_ADV_SM_FLAG_RX_ADD);
   10d38:	2102      	movs	r1, #2
   10d3a:	4620      	mov	r0, r4
   10d3c:	f7ff ffc1 	bl	10cc2 <ble_ll_adv_flags_clear>
}
   10d40:	e7e3      	b.n	10d0a <ble_ll_adv_rpa_update+0x30>
            ble_ll_adv_flags_set(advsm, BLE_LL_ADV_SM_FLAG_RX_ADD);
   10d42:	2102      	movs	r1, #2
   10d44:	4620      	mov	r0, r4
   10d46:	f7ff ffb1 	bl	10cac <ble_ll_adv_flags_set>
   10d4a:	e7de      	b.n	10d0a <ble_ll_adv_rpa_update+0x30>
                ble_ll_adv_flags_set(advsm, BLE_LL_ADV_SM_FLAG_RX_ADD);
   10d4c:	2102      	movs	r1, #2
   10d4e:	4620      	mov	r0, r4
   10d50:	f7ff ffac 	bl	10cac <ble_ll_adv_flags_set>
   10d54:	e7d9      	b.n	10d0a <ble_ll_adv_rpa_update+0x30>

00010d56 <ble_ll_adv_active_chanset_clear>:
{
   10d56:	b510      	push	{r4, lr}
   10d58:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
   10d5a:	f7fc fd4d 	bl	d7f8 <os_arch_save_sr>
    advsm->flags &= ~BLE_LL_ADV_SM_FLAG_ACTIVE_CHANSET_MASK;
   10d5e:	8963      	ldrh	r3, [r4, #10]
   10d60:	f023 0330 	bic.w	r3, r3, #48	; 0x30
   10d64:	8163      	strh	r3, [r4, #10]
    OS_EXIT_CRITICAL(sr);
   10d66:	f7fc fd4d 	bl	d804 <os_arch_restore_sr>
}
   10d6a:	bd10      	pop	{r4, pc}

00010d6c <ble_ll_adv_tx_done>:
 * @param advsm
 *
 */
static void
ble_ll_adv_tx_done(void *arg)
{
   10d6c:	b510      	push	{r4, lr}
   10d6e:	4604      	mov	r4, r0
    struct ble_ll_adv_sm *advsm;

    /* reset power to max after advertising */
    ble_phy_txpwr_set(MYNEWT_VAL(BLE_LL_TX_PWR_DBM));
   10d70:	2000      	movs	r0, #0
   10d72:	f008 ff75 	bl	19c60 <ble_phy_txpwr_set>
    os_eventq_put(&evq->evq, &ev->ev);
   10d76:	f104 0154 	add.w	r1, r4, #84	; 0x54
   10d7a:	4806      	ldr	r0, [pc, #24]	; (10d94 <ble_ll_adv_tx_done+0x28>)
   10d7c:	f7fb ff9d 	bl	ccba <os_eventq_put>
    }
#else
    ble_npl_eventq_put(&g_ble_ll_data.ll_evq, &advsm->adv_txdone_ev);
#endif

    ble_ll_state_set(BLE_LL_STATE_STANDBY);
   10d80:	2000      	movs	r0, #0
   10d82:	f7ff fe1d 	bl	109c0 <ble_ll_state_set>

    ble_ll_adv_active_chanset_clear(advsm);
   10d86:	4620      	mov	r0, r4
   10d88:	f7ff ffe5 	bl	10d56 <ble_ll_adv_active_chanset_clear>

    /* We no longer have a current state machine */
    g_ble_ll_cur_adv_sm = NULL;
   10d8c:	4b02      	ldr	r3, [pc, #8]	; (10d98 <ble_ll_adv_tx_done+0x2c>)
   10d8e:	2200      	movs	r2, #0
   10d90:	601a      	str	r2, [r3, #0]
}
   10d92:	bd10      	pop	{r4, pc}
   10d94:	20003d60 	.word	0x20003d60
   10d98:	20003df8 	.word	0x20003df8

00010d9c <ble_ll_adv_sm_find_configured>:
{
   10d9c:	b510      	push	{r4, lr}
   10d9e:	4604      	mov	r4, r0
    if (!ble_ll_hci_adv_mode_ext()) {
   10da0:	f005 faf7 	bl	16392 <ble_ll_hci_adv_mode_ext>
   10da4:	b9c0      	cbnz	r0, 10dd8 <ble_ll_adv_sm_find_configured+0x3c>
        BLE_LL_ASSERT(instance == 0);
   10da6:	b90c      	cbnz	r4, 10dac <ble_ll_adv_sm_find_configured+0x10>
        return &g_ble_ll_adv_sm[0];
   10da8:	480e      	ldr	r0, [pc, #56]	; (10de4 <ble_ll_adv_sm_find_configured+0x48>)
}
   10daa:	bd10      	pop	{r4, pc}
        BLE_LL_ASSERT(instance == 0);
   10dac:	f7fb fa1c 	bl	c1e8 <hal_debugger_connected>
   10db0:	b100      	cbz	r0, 10db4 <ble_ll_adv_sm_find_configured+0x18>
   10db2:	be01      	bkpt	0x0001
   10db4:	2300      	movs	r3, #0
   10db6:	461a      	mov	r2, r3
   10db8:	4619      	mov	r1, r3
   10dba:	4618      	mov	r0, r3
   10dbc:	f7fb fc4e 	bl	c65c <__assert_func>
        advsm = &g_ble_ll_adv_sm[i];
   10dc0:	4808      	ldr	r0, [pc, #32]	; (10de4 <ble_ll_adv_sm_find_configured+0x48>)
   10dc2:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
        if ((advsm->flags & BLE_LL_ADV_SM_FLAG_CONFIGURED) &&
   10dc6:	8942      	ldrh	r2, [r0, #10]
   10dc8:	f012 0f80 	tst.w	r2, #128	; 0x80
   10dcc:	d002      	beq.n	10dd4 <ble_ll_adv_sm_find_configured+0x38>
                (advsm->adv_instance == instance)) {
   10dce:	7842      	ldrb	r2, [r0, #1]
        if ((advsm->flags & BLE_LL_ADV_SM_FLAG_CONFIGURED) &&
   10dd0:	42a2      	cmp	r2, r4
   10dd2:	d0ea      	beq.n	10daa <ble_ll_adv_sm_find_configured+0xe>
    for (i = 0; i < ARRAY_SIZE(g_ble_ll_adv_sm); i++) {
   10dd4:	3301      	adds	r3, #1
   10dd6:	e000      	b.n	10dda <ble_ll_adv_sm_find_configured+0x3e>
   10dd8:	2300      	movs	r3, #0
   10dda:	2b00      	cmp	r3, #0
   10ddc:	d0f0      	beq.n	10dc0 <ble_ll_adv_sm_find_configured+0x24>
    return NULL;
   10dde:	2000      	movs	r0, #0
   10de0:	e7e3      	b.n	10daa <ble_ll_adv_sm_find_configured+0xe>
   10de2:	bf00      	nop
   10de4:	20003dfc 	.word	0x20003dfc

00010de8 <ble_ll_adv_active_chanset_set_pri>:
{
   10de8:	b510      	push	{r4, lr}
   10dea:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
   10dec:	f7fc fd04 	bl	d7f8 <os_arch_save_sr>
    assert((advsm->flags & BLE_LL_ADV_SM_FLAG_ACTIVE_CHANSET_MASK) == 0);
   10df0:	8963      	ldrh	r3, [r4, #10]
   10df2:	f013 0f30 	tst.w	r3, #48	; 0x30
   10df6:	d107      	bne.n	10e08 <ble_ll_adv_active_chanset_set_pri+0x20>
    advsm->flags &= ~BLE_LL_ADV_SM_FLAG_ACTIVE_CHANSET_MASK;
   10df8:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    advsm->flags |= 0x10;
   10dfc:	f043 0310 	orr.w	r3, r3, #16
   10e00:	8163      	strh	r3, [r4, #10]
    OS_EXIT_CRITICAL(sr);
   10e02:	f7fc fcff 	bl	d804 <os_arch_restore_sr>
}
   10e06:	bd10      	pop	{r4, pc}
    assert((advsm->flags & BLE_LL_ADV_SM_FLAG_ACTIVE_CHANSET_MASK) == 0);
   10e08:	f7fb f9ee 	bl	c1e8 <hal_debugger_connected>
   10e0c:	b100      	cbz	r0, 10e10 <ble_ll_adv_active_chanset_set_pri+0x28>
   10e0e:	be01      	bkpt	0x0001
   10e10:	2300      	movs	r3, #0
   10e12:	461a      	mov	r2, r3
   10e14:	4619      	mov	r1, r3
   10e16:	4618      	mov	r0, r3
   10e18:	f7fb fc20 	bl	c65c <__assert_func>

00010e1c <ble_ll_adv_scheduled>:
}
#endif

static void
ble_ll_adv_scheduled(struct ble_ll_adv_sm *advsm, uint32_t sch_start, void *arg)
{
   10e1c:	b538      	push	{r3, r4, r5, lr}
    /* The event start time is when we start transmission of the adv PDU */
    advsm->adv_event_start_time = sch_start + g_ble_ll_sched_offset_ticks;
   10e1e:	4b08      	ldr	r3, [pc, #32]	; (10e40 <ble_ll_adv_scheduled+0x24>)
   10e20:	781c      	ldrb	r4, [r3, #0]
   10e22:	440c      	add	r4, r1
   10e24:	6184      	str	r4, [r0, #24]
    advsm->adv_pdu_start_time = advsm->adv_event_start_time;
   10e26:	61c4      	str	r4, [r0, #28]
                             os_cputime_usecs_to_ticks(advsm->duration * 10000);
    }
#else
    /* Set the time at which we must end directed, high-duty cycle advertising.
     */
    if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_HD_DIRECTED) {
   10e28:	8983      	ldrh	r3, [r0, #12]
   10e2a:	f013 0f08 	tst.w	r3, #8
   10e2e:	d100      	bne.n	10e32 <ble_ll_adv_scheduled+0x16>
        advsm->adv_end_time = advsm->adv_event_start_time +
                     os_cputime_usecs_to_ticks(BLE_LL_ADV_STATE_HD_MAX * 1000);
    }
#endif
}
   10e30:	bd38      	pop	{r3, r4, r5, pc}
   10e32:	4605      	mov	r5, r0
                     os_cputime_usecs_to_ticks(BLE_LL_ADV_STATE_HD_MAX * 1000);
   10e34:	4803      	ldr	r0, [pc, #12]	; (10e44 <ble_ll_adv_scheduled+0x28>)
   10e36:	f018 fd4f 	bl	298d8 <os_cputime_usecs_to_ticks>
        advsm->adv_end_time = advsm->adv_event_start_time +
   10e3a:	4404      	add	r4, r0
   10e3c:	622c      	str	r4, [r5, #32]
}
   10e3e:	e7f7      	b.n	10e30 <ble_ll_adv_scheduled+0x14>
   10e40:	20004250 	.word	0x20004250
   10e44:	00138800 	.word	0x00138800

00010e48 <ble_ll_adv_set_sched>:
{
   10e48:	b538      	push	{r3, r4, r5, lr}
   10e4a:	4604      	mov	r4, r0
    sch->cb_arg = advsm;
   10e4c:	6700      	str	r0, [r0, #112]	; 0x70
    sch->sched_cb = ble_ll_adv_tx_start_cb;
   10e4e:	4b11      	ldr	r3, [pc, #68]	; (10e94 <ble_ll_adv_set_sched+0x4c>)
   10e50:	6743      	str	r3, [r0, #116]	; 0x74
    sch->sched_type = BLE_LL_SCHED_TYPE_ADV;
   10e52:	2101      	movs	r1, #1
   10e54:	f880 1064 	strb.w	r1, [r0, #100]	; 0x64
    max_usecs = ble_ll_pdu_tx_time_get(advsm->adv_pdu_len, BLE_PHY_MODE_1M);
   10e58:	79c0      	ldrb	r0, [r0, #7]
   10e5a:	f7ff fe0f 	bl	10a7c <ble_ll_pdu_tx_time_get>
    if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_DIRECTED) {
   10e5e:	89a3      	ldrh	r3, [r4, #12]
   10e60:	f013 0f04 	tst.w	r3, #4
   10e64:	d105      	bne.n	10e72 <ble_ll_adv_set_sched+0x2a>
    } else if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_CONNECTABLE) {
   10e66:	f013 0f01 	tst.w	r3, #1
   10e6a:	d004      	beq.n	10e76 <ble_ll_adv_set_sched+0x2e>
        max_usecs += BLE_LL_SCHED_ADV_MAX_USECS;
   10e6c:	f500 7055 	add.w	r0, r0, #852	; 0x354
   10e70:	e001      	b.n	10e76 <ble_ll_adv_set_sched+0x2e>
        max_usecs += BLE_LL_SCHED_DIRECT_ADV_MAX_USECS;
   10e72:	f500 70fb 	add.w	r0, r0, #502	; 0x1f6
    sch->start_time = advsm->adv_pdu_start_time - g_ble_ll_sched_offset_ticks;
   10e76:	69e5      	ldr	r5, [r4, #28]
   10e78:	4b07      	ldr	r3, [pc, #28]	; (10e98 <ble_ll_adv_set_sched+0x50>)
   10e7a:	781b      	ldrb	r3, [r3, #0]
   10e7c:	1aeb      	subs	r3, r5, r3
   10e7e:	66a3      	str	r3, [r4, #104]	; 0x68
    sch->remainder = 0;
   10e80:	2300      	movs	r3, #0
   10e82:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66

/* Convert usecs to ticks and round up to nearest tick */
static inline uint32_t
ble_ll_usecs_to_ticks_round_up(uint32_t usecs)
{
    return os_cputime_usecs_to_ticks(usecs + 30);
   10e86:	301e      	adds	r0, #30
   10e88:	f018 fd26 	bl	298d8 <os_cputime_usecs_to_ticks>
    sch->end_time = advsm->adv_pdu_start_time +
   10e8c:	4428      	add	r0, r5
   10e8e:	66e0      	str	r0, [r4, #108]	; 0x6c
}
   10e90:	bd38      	pop	{r3, r4, r5, pc}
   10e92:	bf00      	nop
   10e94:	00010fb5 	.word	0x00010fb5
   10e98:	20004250 	.word	0x20004250

00010e9c <ble_ll_adv_sm_start>:
 *
 * @return int
 */
static int
ble_ll_adv_sm_start(struct ble_ll_adv_sm *advsm)
{
   10e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10e9e:	4604      	mov	r4, r0
    const uint8_t *random_addr;
    uint32_t earliest_start_time;
    int32_t delta;

    /* only clear flags that are not set from HCI */
    ble_ll_adv_flags_clear(advsm, BLE_LL_ADV_SM_FLAG_TX_ADD |
   10ea0:	210b      	movs	r1, #11
   10ea2:	f7ff ff0e 	bl	10cc2 <ble_ll_adv_flags_clear>
    random_addr = advsm->adv_random_addr;
#else
    random_addr = g_random_addr;
#endif

    if (!ble_ll_is_valid_own_addr_type(advsm->own_addr_type, random_addr)) {
   10ea6:	493f      	ldr	r1, [pc, #252]	; (10fa4 <ble_ll_adv_sm_start+0x108>)
   10ea8:	7920      	ldrb	r0, [r4, #4]
   10eaa:	f7ff fc23 	bl	106f4 <ble_ll_is_valid_own_addr_type>
   10eae:	2800      	cmp	r0, #0
   10eb0:	d073      	beq.n	10f9a <ble_ll_adv_sm_start+0xfe>

    /*
     * Get an event with which to send the connection complete event if
     * this is connectable
     */
    if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_CONNECTABLE) {
   10eb2:	89a3      	ldrh	r3, [r4, #12]
   10eb4:	f013 0f01 	tst.w	r3, #1
   10eb8:	d001      	beq.n	10ebe <ble_ll_adv_sm_start+0x22>
        /* We expect this to be NULL but if not we wont allocate one... */
        if (advsm->conn_comp_ev == NULL) {
   10eba:	6d23      	ldr	r3, [r4, #80]	; 0x50
   10ebc:	b14b      	cbz	r3, 10ed2 <ble_ll_adv_sm_start+0x36>
            advsm->conn_comp_ev = evbuf;
        }
    }

    /* Set advertising address */
    if ((advsm->own_addr_type & 1) == 0) {
   10ebe:	7923      	ldrb	r3, [r4, #4]
   10ec0:	f013 0f01 	tst.w	r3, #1
   10ec4:	d00c      	beq.n	10ee0 <ble_ll_adv_sm_start+0x44>
#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LL_EXT_ADV)
        addr = advsm->adv_random_addr;
#else
        addr = g_random_addr;
#endif
        advsm->flags |= BLE_LL_ADV_SM_FLAG_TX_ADD;
   10ec6:	8962      	ldrh	r2, [r4, #10]
   10ec8:	f042 0201 	orr.w	r2, r2, #1
   10ecc:	8162      	strh	r2, [r4, #10]
        addr = g_random_addr;
   10ece:	4a35      	ldr	r2, [pc, #212]	; (10fa4 <ble_ll_adv_sm_start+0x108>)
   10ed0:	e007      	b.n	10ee2 <ble_ll_adv_sm_start+0x46>
            evbuf = ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   10ed2:	2002      	movs	r0, #2
   10ed4:	f015 f8cc 	bl	26070 <ble_hci_trans_buf_alloc>
            if (!evbuf) {
   10ed8:	2800      	cmp	r0, #0
   10eda:	d060      	beq.n	10f9e <ble_ll_adv_sm_start+0x102>
            advsm->conn_comp_ev = evbuf;
   10edc:	6520      	str	r0, [r4, #80]	; 0x50
   10ede:	e7ee      	b.n	10ebe <ble_ll_adv_sm_start+0x22>
        addr = g_dev_addr;
   10ee0:	4a31      	ldr	r2, [pc, #196]	; (10fa8 <ble_ll_adv_sm_start+0x10c>)
    }
    memcpy(advsm->adva, addr, BLE_DEV_ADDR_LEN);
   10ee2:	6811      	ldr	r1, [r2, #0]
   10ee4:	62a1      	str	r1, [r4, #40]	; 0x28
   10ee6:	8892      	ldrh	r2, [r2, #4]
   10ee8:	85a2      	strh	r2, [r4, #44]	; 0x2c

    if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_DIRECTED) {
   10eea:	89a2      	ldrh	r2, [r4, #12]
   10eec:	f012 0f04 	tst.w	r2, #4
   10ef0:	d133      	bne.n	10f5a <ble_ll_adv_sm_start+0xbe>
        }
    }

#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LL_PRIVACY)
    /* This will generate an RPA for both initiator addr and adva */
    if (advsm->own_addr_type > BLE_HCI_ADV_OWN_ADDR_RANDOM) {
   10ef2:	2b01      	cmp	r3, #1
   10ef4:	d841      	bhi.n	10f7a <ble_ll_adv_sm_start+0xde>
        ble_ll_adv_rpa_update(advsm);
    }
#endif

    /* Set flag telling us that advertising is enabled */
    advsm->adv_enabled = 1;
   10ef6:	2301      	movs	r3, #1
   10ef8:	7023      	strb	r3, [r4, #0]
    advsm->channel_id = ((access_addr & 0xffff0000) >> 16) ^
                         (access_addr & 0x0000ffff);
#endif

    /* Determine the advertising interval we will use */
    if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_HD_DIRECTED) {
   10efa:	89a3      	ldrh	r3, [r4, #12]
   10efc:	f013 0f08 	tst.w	r3, #8
   10f00:	d03f      	beq.n	10f82 <ble_ll_adv_sm_start+0xe6>
        /* Set it to max. allowed for high duty cycle advertising */
        advsm->adv_itvl_usecs = BLE_LL_ADV_PDU_ITVL_HD_MS_MAX;
   10f02:	f640 63a6 	movw	r3, #3750	; 0xea6
   10f06:	6163      	str	r3, [r4, #20]
        advsm->adv_itvl_usecs = (uint32_t)advsm->adv_itvl_max;
        advsm->adv_itvl_usecs *= BLE_LL_ADV_ITVL;
    }

    /* Set first advertising channel */
    adv_chan = ble_ll_adv_first_chan(advsm);
   10f08:	4620      	mov	r0, r4
   10f0a:	f7ff feb5 	bl	10c78 <ble_ll_adv_first_chan>
    advsm->adv_chan = adv_chan;
   10f0e:	71a0      	strb	r0, [r4, #6]
     * used to setup start time for scheduler item.
     * Then we check if start time for scheduler item (which includes scheduler
     * overhead) is no earlier than calculated earliest possible start time and
     * adjust scheduler item if necessary.
     */
    earliest_start_time = ble_ll_rfmgmt_enable_now();
   10f10:	f006 fa1c 	bl	1734c <ble_ll_rfmgmt_enable_now>
   10f14:	4607      	mov	r7, r0
	return (int)lrand48();
   10f16:	f018 fd89 	bl	29a2c <lrand48>

    start_delay_us = rand() % (BLE_LL_ADV_DELAY_MS_MAX * 1000);
   10f1a:	4b24      	ldr	r3, [pc, #144]	; (10fac <ble_ll_adv_sm_start+0x110>)
   10f1c:	fb83 2300 	smull	r2, r3, r3, r0
   10f20:	17c5      	asrs	r5, r0, #31
   10f22:	ebc5 3523 	rsb	r5, r5, r3, asr #12
   10f26:	f242 7310 	movw	r3, #10000	; 0x2710
   10f2a:	fb03 0515 	mls	r5, r3, r5, r0
    advsm->adv_pdu_start_time = os_cputime_get32() +
   10f2e:	f018 fcce 	bl	298ce <os_cputime_get32>
   10f32:	4606      	mov	r6, r0
                                os_cputime_usecs_to_ticks(start_delay_us);
   10f34:	4628      	mov	r0, r5
   10f36:	f018 fccf 	bl	298d8 <os_cputime_usecs_to_ticks>
    advsm->adv_pdu_start_time = os_cputime_get32() +
   10f3a:	4430      	add	r0, r6
   10f3c:	61e0      	str	r0, [r4, #28]

    ble_ll_adv_set_sched(advsm);
   10f3e:	4620      	mov	r0, r4
   10f40:	f7ff ff82 	bl	10e48 <ble_ll_adv_set_sched>

    delta = (int32_t)(advsm->adv_sch.start_time - earliest_start_time);
   10f44:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    if (delta < 0) {
   10f46:	1bdb      	subs	r3, r3, r7
   10f48:	d422      	bmi.n	10f90 <ble_ll_adv_sm_start+0xf4>
        advsm->adv_sch.start_time -= delta;
        advsm->adv_sch.end_time -= delta;
    }

    /* This does actual scheduling */
    ble_ll_sched_adv_new(&advsm->adv_sch, ble_ll_adv_scheduled, NULL);
   10f4a:	2200      	movs	r2, #0
   10f4c:	4918      	ldr	r1, [pc, #96]	; (10fb0 <ble_ll_adv_sm_start+0x114>)
   10f4e:	f104 0064 	add.w	r0, r4, #100	; 0x64
   10f52:	f007 fe3d 	bl	18bd0 <ble_ll_sched_adv_new>
    if (!(advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY)) {
        ble_ll_adv_aux_schedule(advsm);
    }
#endif

    return BLE_ERR_SUCCESS;
   10f56:	2000      	movs	r0, #0
}
   10f58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        memcpy(advsm->initiator_addr, advsm->peer_addr, BLE_DEV_ADDR_LEN);
   10f5a:	4622      	mov	r2, r4
   10f5c:	f852 1f34 	ldr.w	r1, [r2, #52]!
   10f60:	f8c4 103a 	str.w	r1, [r4, #58]	; 0x3a
   10f64:	8892      	ldrh	r2, [r2, #4]
   10f66:	87e2      	strh	r2, [r4, #62]	; 0x3e
        if (advsm->peer_addr_type & 1) {
   10f68:	7962      	ldrb	r2, [r4, #5]
   10f6a:	f012 0f01 	tst.w	r2, #1
   10f6e:	d0c0      	beq.n	10ef2 <ble_ll_adv_sm_start+0x56>
            advsm->flags |= BLE_LL_ADV_SM_FLAG_RX_ADD;
   10f70:	8962      	ldrh	r2, [r4, #10]
   10f72:	f042 0202 	orr.w	r2, r2, #2
   10f76:	8162      	strh	r2, [r4, #10]
   10f78:	e7bb      	b.n	10ef2 <ble_ll_adv_sm_start+0x56>
        ble_ll_adv_rpa_update(advsm);
   10f7a:	4620      	mov	r0, r4
   10f7c:	f7ff fead 	bl	10cda <ble_ll_adv_rpa_update>
   10f80:	e7b9      	b.n	10ef6 <ble_ll_adv_sm_start+0x5a>
        advsm->adv_itvl_usecs = (uint32_t)advsm->adv_itvl_max;
   10f82:	8a22      	ldrh	r2, [r4, #16]
        advsm->adv_itvl_usecs *= BLE_LL_ADV_ITVL;
   10f84:	f240 2371 	movw	r3, #625	; 0x271
   10f88:	fb03 f302 	mul.w	r3, r3, r2
   10f8c:	6163      	str	r3, [r4, #20]
   10f8e:	e7bb      	b.n	10f08 <ble_ll_adv_sm_start+0x6c>
        advsm->adv_sch.start_time -= delta;
   10f90:	66a7      	str	r7, [r4, #104]	; 0x68
        advsm->adv_sch.end_time -= delta;
   10f92:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
   10f94:	1ad3      	subs	r3, r2, r3
   10f96:	66e3      	str	r3, [r4, #108]	; 0x6c
   10f98:	e7d7      	b.n	10f4a <ble_ll_adv_sm_start+0xae>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   10f9a:	2012      	movs	r0, #18
   10f9c:	e7dc      	b.n	10f58 <ble_ll_adv_sm_start+0xbc>
                return BLE_ERR_MEM_CAPACITY;
   10f9e:	2007      	movs	r0, #7
   10fa0:	e7da      	b.n	10f58 <ble_ll_adv_sm_start+0xbc>
   10fa2:	bf00      	nop
   10fa4:	20003cec 	.word	0x20003cec
   10fa8:	20003cf4 	.word	0x20003cf4
   10fac:	68db8bad 	.word	0x68db8bad
   10fb0:	00010e1d 	.word	0x00010e1d

00010fb4 <ble_ll_adv_tx_start_cb>:
{
   10fb4:	b538      	push	{r3, r4, r5, lr}
   10fb6:	4605      	mov	r5, r0
    advsm = (struct ble_ll_adv_sm *)sch->cb_arg;
   10fb8:	68c4      	ldr	r4, [r0, #12]
    g_ble_ll_cur_adv_sm = advsm;
   10fba:	4b31      	ldr	r3, [pc, #196]	; (11080 <ble_ll_adv_tx_start_cb+0xcc>)
   10fbc:	601c      	str	r4, [r3, #0]
    ble_ll_adv_active_chanset_set_pri(advsm);
   10fbe:	4620      	mov	r0, r4
   10fc0:	f7ff ff12 	bl	10de8 <ble_ll_adv_active_chanset_set_pri>
    if ((advsm->flags & BLE_LL_ADV_SM_FLAG_NEW_ADV_DATA) ||
   10fc4:	8963      	ldrh	r3, [r4, #10]
   10fc6:	f413 6fc0 	tst.w	r3, #1536	; 0x600
   10fca:	d115      	bne.n	10ff8 <ble_ll_adv_tx_start_cb+0x44>
    ble_phy_txpwr_set(advsm->adv_txpwr);
   10fcc:	f994 0009 	ldrsb.w	r0, [r4, #9]
   10fd0:	f008 fe46 	bl	19c60 <ble_phy_txpwr_set>
    rc = ble_phy_setchan(advsm->adv_chan, BLE_ACCESS_ADDR_ADV, BLE_LL_CRCINIT_ADV);
   10fd4:	4a2b      	ldr	r2, [pc, #172]	; (11084 <ble_ll_adv_tx_start_cb+0xd0>)
   10fd6:	492c      	ldr	r1, [pc, #176]	; (11088 <ble_ll_adv_tx_start_cb+0xd4>)
   10fd8:	79a0      	ldrb	r0, [r4, #6]
   10fda:	f008 fe55 	bl	19c88 <ble_phy_setchan>
    assert(rc == 0);
   10fde:	b988      	cbnz	r0, 11004 <ble_ll_adv_tx_start_cb+0x50>
    txstart = sch->start_time + g_ble_ll_sched_offset_ticks;
   10fe0:	6868      	ldr	r0, [r5, #4]
   10fe2:	4b2a      	ldr	r3, [pc, #168]	; (1108c <ble_ll_adv_tx_start_cb+0xd8>)
   10fe4:	781b      	ldrb	r3, [r3, #0]
    rc = ble_phy_tx_set_start_time(txstart, sch->remainder);
   10fe6:	78a9      	ldrb	r1, [r5, #2]
   10fe8:	4418      	add	r0, r3
   10fea:	f009 f881 	bl	1a0f0 <ble_phy_tx_set_start_time>
    if (rc) {
   10fee:	b198      	cbz	r0, 11018 <ble_ll_adv_tx_start_cb+0x64>
        STATS_INC(ble_ll_stats, adv_late_starts);
   10ff0:	4a27      	ldr	r2, [pc, #156]	; (11090 <ble_ll_adv_tx_start_cb+0xdc>)
   10ff2:	6f13      	ldr	r3, [r2, #112]	; 0x70
   10ff4:	3301      	adds	r3, #1
   10ff6:	6713      	str	r3, [r2, #112]	; 0x70
    ble_ll_adv_tx_done(advsm);
   10ff8:	4620      	mov	r0, r4
   10ffa:	f7ff feb7 	bl	10d6c <ble_ll_adv_tx_done>
    return BLE_LL_SCHED_STATE_DONE;
   10ffe:	2501      	movs	r5, #1
}
   11000:	4628      	mov	r0, r5
   11002:	bd38      	pop	{r3, r4, r5, pc}
    assert(rc == 0);
   11004:	f7fb f8f0 	bl	c1e8 <hal_debugger_connected>
   11008:	b100      	cbz	r0, 1100c <ble_ll_adv_tx_start_cb+0x58>
   1100a:	be01      	bkpt	0x0001
   1100c:	2300      	movs	r3, #0
   1100e:	461a      	mov	r2, r3
   11010:	4619      	mov	r1, r3
   11012:	4618      	mov	r0, r3
   11014:	f7fb fb22 	bl	c65c <__assert_func>
    ble_phy_encrypt_disable();
   11018:	f008 fdde 	bl	19bd8 <ble_phy_encrypt_disable>
    advsm->adv_rpa_index = -1;
   1101c:	23ff      	movs	r3, #255	; 0xff
   1101e:	7223      	strb	r3, [r4, #8]
    if (ble_ll_resolv_enabled()) {
   11020:	f006 f83c 	bl	1709c <ble_ll_resolv_enabled>
   11024:	b300      	cbz	r0, 11068 <ble_ll_adv_tx_start_cb+0xb4>
        ble_phy_resolv_list_enable();
   11026:	f009 f929 	bl	1a27c <ble_phy_resolv_list_enable>
    if ((advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY) &&
   1102a:	89a3      	ldrh	r3, [r4, #12]
   1102c:	f013 0f10 	tst.w	r3, #16
   11030:	d002      	beq.n	11038 <ble_ll_adv_tx_start_cb+0x84>
   11032:	f013 0f03 	tst.w	r3, #3
   11036:	d11a      	bne.n	1106e <ble_ll_adv_tx_start_cb+0xba>
        ble_phy_set_txend_cb(ble_ll_adv_tx_done, advsm);
   11038:	4621      	mov	r1, r4
   1103a:	4816      	ldr	r0, [pc, #88]	; (11094 <ble_ll_adv_tx_start_cb+0xe0>)
   1103c:	f008 fde2 	bl	19c04 <ble_phy_set_txend_cb>
        end_trans = BLE_PHY_TRANSITION_NONE;
   11040:	2200      	movs	r2, #0
    rc = ble_phy_tx(ble_ll_adv_legacy_pdu_make, advsm, end_trans);
   11042:	4621      	mov	r1, r4
   11044:	4814      	ldr	r0, [pc, #80]	; (11098 <ble_ll_adv_tx_start_cb+0xe4>)
   11046:	f009 f871 	bl	1a12c <ble_phy_tx>
    if (rc) {
   1104a:	4605      	mov	r5, r0
   1104c:	2800      	cmp	r0, #0
   1104e:	d1d3      	bne.n	10ff8 <ble_ll_adv_tx_start_cb+0x44>
    if (advsm->adv_filter_policy != BLE_HCI_ADV_FILT_NONE) {
   11050:	78e3      	ldrb	r3, [r4, #3]
   11052:	b193      	cbz	r3, 1107a <ble_ll_adv_tx_start_cb+0xc6>
        ble_ll_whitelist_enable();
   11054:	f008 f8dc 	bl	19210 <ble_ll_whitelist_enable>
    ble_ll_state_set(BLE_LL_STATE_ADV);
   11058:	2001      	movs	r0, #1
   1105a:	f7ff fcb1 	bl	109c0 <ble_ll_state_set>
    STATS_INC(ble_ll_stats, adv_txg);
   1105e:	4a0c      	ldr	r2, [pc, #48]	; (11090 <ble_ll_adv_tx_start_cb+0xdc>)
   11060:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
   11062:	3301      	adds	r3, #1
   11064:	66d3      	str	r3, [r2, #108]	; 0x6c
    return BLE_LL_SCHED_STATE_RUNNING;
   11066:	e7cb      	b.n	11000 <ble_ll_adv_tx_start_cb+0x4c>
        ble_phy_resolv_list_disable();
   11068:	f009 f918 	bl	1a29c <ble_phy_resolv_list_disable>
   1106c:	e7dd      	b.n	1102a <ble_ll_adv_tx_start_cb+0x76>
        ble_phy_set_txend_cb(NULL, NULL);
   1106e:	2100      	movs	r1, #0
   11070:	4608      	mov	r0, r1
   11072:	f008 fdc7 	bl	19c04 <ble_phy_set_txend_cb>
        end_trans = BLE_PHY_TRANSITION_TX_RX;
   11076:	2202      	movs	r2, #2
        ble_phy_set_txend_cb(NULL, NULL);
   11078:	e7e3      	b.n	11042 <ble_ll_adv_tx_start_cb+0x8e>
        ble_ll_whitelist_disable();
   1107a:	f008 f8cd 	bl	19218 <ble_ll_whitelist_disable>
   1107e:	e7eb      	b.n	11058 <ble_ll_adv_tx_start_cb+0xa4>
   11080:	20003df8 	.word	0x20003df8
   11084:	00555555 	.word	0x00555555
   11088:	8e89bed6 	.word	0x8e89bed6
   1108c:	20004250 	.word	0x20004250
   11090:	20003be0 	.word	0x20003be0
   11094:	00010d6d 	.word	0x00010d6d
   11098:	0001109d 	.word	0x0001109d

0001109c <ble_ll_adv_legacy_pdu_make>:
{
   1109c:	b570      	push	{r4, r5, r6, lr}
   1109e:	460c      	mov	r4, r1
    adv_data_len = ADV_DATA_LEN(advsm);
   110a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   110a2:	b333      	cbz	r3, 110f2 <ble_ll_adv_legacy_pdu_make+0x56>
   110a4:	7c19      	ldrb	r1, [r3, #16]
    pdulen = BLE_DEV_ADDR_LEN + adv_data_len;
   110a6:	1d8d      	adds	r5, r1, #6
   110a8:	b2ed      	uxtb	r5, r5
    if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_DIRECTED) {
   110aa:	89a3      	ldrh	r3, [r4, #12]
   110ac:	f013 0f04 	tst.w	r3, #4
   110b0:	d021      	beq.n	110f6 <ble_ll_adv_legacy_pdu_make+0x5a>
        if (advsm->flags & BLE_LL_ADV_SM_FLAG_RX_ADD) {
   110b2:	8963      	ldrh	r3, [r4, #10]
   110b4:	f013 0f02 	tst.w	r3, #2
   110b8:	d125      	bne.n	11106 <ble_ll_adv_legacy_pdu_make+0x6a>
        pdu_type = BLE_ADV_PDU_TYPE_ADV_DIRECT_IND;
   110ba:	2301      	movs	r3, #1
        pdulen = BLE_ADV_DIRECT_IND_LEN;
   110bc:	250c      	movs	r5, #12
        adv_data_len = 0;
   110be:	2100      	movs	r1, #0
    assert(adv_data_len <= BLE_ADV_LEGACY_DATA_MAX_LEN);
   110c0:	291f      	cmp	r1, #31
   110c2:	d828      	bhi.n	11116 <ble_ll_adv_legacy_pdu_make+0x7a>
    advsm->adv_pdu_len = pdulen + BLE_LL_PDU_HDR_LEN;
   110c4:	1cae      	adds	r6, r5, #2
   110c6:	71e6      	strb	r6, [r4, #7]
    if (advsm->flags & BLE_LL_ADV_SM_FLAG_TX_ADD) {
   110c8:	8966      	ldrh	r6, [r4, #10]
   110ca:	f016 0f01 	tst.w	r6, #1
   110ce:	d001      	beq.n	110d4 <ble_ll_adv_legacy_pdu_make+0x38>
        pdu_type |= BLE_ADV_PDU_HDR_TXADD_RAND;
   110d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    *hdr_byte = pdu_type;
   110d4:	7013      	strb	r3, [r2, #0]
    memcpy(dptr, advsm->adva, BLE_DEV_ADDR_LEN);
   110d6:	4623      	mov	r3, r4
   110d8:	f853 2f28 	ldr.w	r2, [r3, #40]!
   110dc:	6002      	str	r2, [r0, #0]
   110de:	889b      	ldrh	r3, [r3, #4]
   110e0:	8083      	strh	r3, [r0, #4]
    dptr += BLE_DEV_ADDR_LEN;
   110e2:	1d83      	adds	r3, r0, #6
    if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_DIRECTED) {
   110e4:	89a2      	ldrh	r2, [r4, #12]
   110e6:	f012 0f04 	tst.w	r2, #4
   110ea:	d11e      	bne.n	1112a <ble_ll_adv_legacy_pdu_make+0x8e>
    if (adv_data_len != 0) {
   110ec:	bb29      	cbnz	r1, 1113a <ble_ll_adv_legacy_pdu_make+0x9e>
}
   110ee:	4628      	mov	r0, r5
   110f0:	bd70      	pop	{r4, r5, r6, pc}
    adv_data_len = ADV_DATA_LEN(advsm);
   110f2:	2100      	movs	r1, #0
   110f4:	e7d7      	b.n	110a6 <ble_ll_adv_legacy_pdu_make+0xa>
    } else if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_CONNECTABLE) {
   110f6:	f013 0f01 	tst.w	r3, #1
   110fa:	d108      	bne.n	1110e <ble_ll_adv_legacy_pdu_make+0x72>
    } else if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_SCANNABLE) {
   110fc:	f013 0f02 	tst.w	r3, #2
   11100:	d007      	beq.n	11112 <ble_ll_adv_legacy_pdu_make+0x76>
        pdu_type = BLE_ADV_PDU_TYPE_ADV_SCAN_IND;
   11102:	2306      	movs	r3, #6
   11104:	e7dc      	b.n	110c0 <ble_ll_adv_legacy_pdu_make+0x24>
            pdu_type |= BLE_ADV_PDU_HDR_RXADD_RAND;
   11106:	2381      	movs	r3, #129	; 0x81
        pdulen = BLE_ADV_DIRECT_IND_LEN;
   11108:	250c      	movs	r5, #12
        adv_data_len = 0;
   1110a:	2100      	movs	r1, #0
   1110c:	e7d8      	b.n	110c0 <ble_ll_adv_legacy_pdu_make+0x24>
        pdu_type = BLE_ADV_PDU_TYPE_ADV_IND;
   1110e:	2300      	movs	r3, #0
   11110:	e7d6      	b.n	110c0 <ble_ll_adv_legacy_pdu_make+0x24>
        pdu_type = BLE_ADV_PDU_TYPE_ADV_NONCONN_IND;
   11112:	2302      	movs	r3, #2
   11114:	e7d4      	b.n	110c0 <ble_ll_adv_legacy_pdu_make+0x24>
    assert(adv_data_len <= BLE_ADV_LEGACY_DATA_MAX_LEN);
   11116:	f7fb f867 	bl	c1e8 <hal_debugger_connected>
   1111a:	b100      	cbz	r0, 1111e <ble_ll_adv_legacy_pdu_make+0x82>
   1111c:	be01      	bkpt	0x0001
   1111e:	2300      	movs	r3, #0
   11120:	461a      	mov	r2, r3
   11122:	4619      	mov	r1, r3
   11124:	4618      	mov	r0, r3
   11126:	f7fb fa99 	bl	c65c <__assert_func>
        memcpy(dptr, advsm->initiator_addr, BLE_DEV_ADDR_LEN);
   1112a:	4622      	mov	r2, r4
   1112c:	f852 6f3a 	ldr.w	r6, [r2, #58]!
   11130:	f8c0 6006 	str.w	r6, [r0, #6]
   11134:	8892      	ldrh	r2, [r2, #4]
   11136:	809a      	strh	r2, [r3, #4]
   11138:	e7d8      	b.n	110ec <ble_ll_adv_legacy_pdu_make+0x50>
        os_mbuf_copydata(advsm->adv_data, 0, adv_data_len, dptr);
   1113a:	460a      	mov	r2, r1
   1113c:	2100      	movs	r1, #0
   1113e:	6c20      	ldr	r0, [r4, #64]	; 0x40
   11140:	f7fc fd0a 	bl	db58 <os_mbuf_copydata>
   11144:	e7d3      	b.n	110ee <ble_ll_adv_legacy_pdu_make+0x52>

00011146 <ble_ll_adv_scan_rsp_legacy_pdu_make>:
{
   11146:	b538      	push	{r3, r4, r5, lr}
   11148:	460c      	mov	r4, r1
    scan_rsp_len = SCAN_RSP_DATA_LEN(advsm);
   1114a:	6c8b      	ldr	r3, [r1, #72]	; 0x48
   1114c:	b1eb      	cbz	r3, 1118a <ble_ll_adv_scan_rsp_legacy_pdu_make+0x44>
   1114e:	7c19      	ldrb	r1, [r3, #16]
    assert(scan_rsp_len <= BLE_SCAN_RSP_LEGACY_DATA_MAX_LEN);
   11150:	291f      	cmp	r1, #31
   11152:	d810      	bhi.n	11176 <ble_ll_adv_scan_rsp_legacy_pdu_make+0x30>
    pdulen = BLE_DEV_ADDR_LEN + scan_rsp_len;
   11154:	1d8d      	adds	r5, r1, #6
   11156:	b2ed      	uxtb	r5, r5
    if (advsm->flags & BLE_LL_ADV_SM_FLAG_TX_ADD) {
   11158:	8963      	ldrh	r3, [r4, #10]
   1115a:	f013 0f01 	tst.w	r3, #1
   1115e:	d116      	bne.n	1118e <ble_ll_adv_scan_rsp_legacy_pdu_make+0x48>
    hdr = BLE_ADV_PDU_TYPE_SCAN_RSP;
   11160:	2304      	movs	r3, #4
    *hdr_byte = hdr;
   11162:	7013      	strb	r3, [r2, #0]
    memcpy(dptr, advsm->adva, BLE_DEV_ADDR_LEN);
   11164:	4622      	mov	r2, r4
   11166:	f852 3f28 	ldr.w	r3, [r2, #40]!
   1116a:	6003      	str	r3, [r0, #0]
   1116c:	8893      	ldrh	r3, [r2, #4]
   1116e:	8083      	strh	r3, [r0, #4]
    if (scan_rsp_len != 0) {
   11170:	b979      	cbnz	r1, 11192 <ble_ll_adv_scan_rsp_legacy_pdu_make+0x4c>
}
   11172:	4628      	mov	r0, r5
   11174:	bd38      	pop	{r3, r4, r5, pc}
    assert(scan_rsp_len <= BLE_SCAN_RSP_LEGACY_DATA_MAX_LEN);
   11176:	f7fb f837 	bl	c1e8 <hal_debugger_connected>
   1117a:	b100      	cbz	r0, 1117e <ble_ll_adv_scan_rsp_legacy_pdu_make+0x38>
   1117c:	be01      	bkpt	0x0001
   1117e:	2300      	movs	r3, #0
   11180:	461a      	mov	r2, r3
   11182:	4619      	mov	r1, r3
   11184:	4618      	mov	r0, r3
   11186:	f7fb fa69 	bl	c65c <__assert_func>
    scan_rsp_len = SCAN_RSP_DATA_LEN(advsm);
   1118a:	2100      	movs	r1, #0
   1118c:	e7e2      	b.n	11154 <ble_ll_adv_scan_rsp_legacy_pdu_make+0xe>
        hdr |= BLE_ADV_PDU_HDR_TXADD_RAND;
   1118e:	2344      	movs	r3, #68	; 0x44
   11190:	e7e7      	b.n	11162 <ble_ll_adv_scan_rsp_legacy_pdu_make+0x1c>
        os_mbuf_copydata(advsm->scan_rsp_data, 0, scan_rsp_len,
   11192:	1d83      	adds	r3, r0, #6
   11194:	460a      	mov	r2, r1
   11196:	2100      	movs	r1, #0
   11198:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   1119a:	f7fc fcdd 	bl	db58 <os_mbuf_copydata>
   1119e:	e7e8      	b.n	11172 <ble_ll_adv_scan_rsp_legacy_pdu_make+0x2c>

000111a0 <ble_ll_adv_drop_event>:
    return rc;
}

static void
ble_ll_adv_drop_event(struct ble_ll_adv_sm *advsm)
{
   111a0:	b510      	push	{r4, lr}
   111a2:	4604      	mov	r4, r0
    STATS_INC(ble_ll_stats, adv_drop_event);
   111a4:	4a08      	ldr	r2, [pc, #32]	; (111c8 <ble_ll_adv_drop_event+0x28>)
   111a6:	6f93      	ldr	r3, [r2, #120]	; 0x78
   111a8:	3301      	adds	r3, #1
   111aa:	6793      	str	r3, [r2, #120]	; 0x78

    ble_ll_sched_rmv_elem(&advsm->adv_sch);
   111ac:	3064      	adds	r0, #100	; 0x64
   111ae:	f007 fe6b 	bl	18e88 <ble_ll_sched_rmv_elem>

    ble_npl_eventq_remove(&g_ble_ll_data.ll_evq, &advsm->adv_sec_txdone_ev);
    advsm->aux_active = 0;
#endif

    advsm->adv_chan = ble_ll_adv_final_chan(advsm);
   111b2:	4620      	mov	r0, r4
   111b4:	f7ff fd6d 	bl	10c92 <ble_ll_adv_final_chan>
   111b8:	71a0      	strb	r0, [r4, #6]
   111ba:	f104 0154 	add.w	r1, r4, #84	; 0x54
   111be:	4803      	ldr	r0, [pc, #12]	; (111cc <ble_ll_adv_drop_event+0x2c>)
   111c0:	f7fb fd7b 	bl	ccba <os_eventq_put>
    ble_npl_eventq_put(&g_ble_ll_data.ll_evq, &advsm->adv_txdone_ev);
}
   111c4:	bd10      	pop	{r4, pc}
   111c6:	bf00      	nop
   111c8:	20003be0 	.word	0x20003be0
   111cc:	20003d60 	.word	0x20003d60

000111d0 <ble_ll_adv_update_adv_scan_rsp_data>:
    if (!(advsm->flags & BLE_LL_ADV_SM_FLAG_NEW_ADV_DATA) &&
   111d0:	8943      	ldrh	r3, [r0, #10]
   111d2:	f413 6fc0 	tst.w	r3, #1536	; 0x600
   111d6:	d023      	beq.n	11220 <ble_ll_adv_update_adv_scan_rsp_data+0x50>
{
   111d8:	b510      	push	{r4, lr}
   111da:	4604      	mov	r4, r0
    if (advsm->flags & BLE_LL_ADV_SM_FLAG_NEW_ADV_DATA) {
   111dc:	f413 7f00 	tst.w	r3, #512	; 0x200
   111e0:	d00e      	beq.n	11200 <ble_ll_adv_update_adv_scan_rsp_data+0x30>
        if (advsm->new_adv_data) {
   111e2:	6c43      	ldr	r3, [r0, #68]	; 0x44
   111e4:	b133      	cbz	r3, 111f4 <ble_ll_adv_update_adv_scan_rsp_data+0x24>
            os_mbuf_free_chain(advsm->adv_data);
   111e6:	6c00      	ldr	r0, [r0, #64]	; 0x40
   111e8:	f7fc fc15 	bl	da16 <os_mbuf_free_chain>
            advsm->adv_data = advsm->new_adv_data;
   111ec:	6c63      	ldr	r3, [r4, #68]	; 0x44
   111ee:	6423      	str	r3, [r4, #64]	; 0x40
            advsm->new_adv_data = NULL;
   111f0:	2300      	movs	r3, #0
   111f2:	6463      	str	r3, [r4, #68]	; 0x44
        ble_ll_adv_flags_clear(advsm, BLE_LL_ADV_SM_FLAG_NEW_ADV_DATA);
   111f4:	f44f 7100 	mov.w	r1, #512	; 0x200
   111f8:	4620      	mov	r0, r4
   111fa:	f7ff fd62 	bl	10cc2 <ble_ll_adv_flags_clear>
}
   111fe:	bd10      	pop	{r4, pc}
    } else if (advsm->flags & BLE_LL_ADV_SM_FLAG_NEW_SCAN_RSP_DATA) {
   11200:	f413 6f80 	tst.w	r3, #1024	; 0x400
   11204:	d0fb      	beq.n	111fe <ble_ll_adv_update_adv_scan_rsp_data+0x2e>
        os_mbuf_free_chain(advsm->scan_rsp_data);
   11206:	6c80      	ldr	r0, [r0, #72]	; 0x48
   11208:	f7fc fc05 	bl	da16 <os_mbuf_free_chain>
        advsm->scan_rsp_data = advsm->new_scan_rsp_data;
   1120c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   1120e:	64a3      	str	r3, [r4, #72]	; 0x48
        advsm->new_scan_rsp_data = NULL;
   11210:	2300      	movs	r3, #0
   11212:	64e3      	str	r3, [r4, #76]	; 0x4c
        ble_ll_adv_flags_clear(advsm, BLE_LL_ADV_SM_FLAG_NEW_SCAN_RSP_DATA);
   11214:	f44f 6180 	mov.w	r1, #1024	; 0x400
   11218:	4620      	mov	r0, r4
   1121a:	f7ff fd52 	bl	10cc2 <ble_ll_adv_flags_clear>
   1121e:	e7ee      	b.n	111fe <ble_ll_adv_update_adv_scan_rsp_data+0x2e>
   11220:	4770      	bx	lr
	...

00011224 <ble_ll_adv_sm_stop>:
{
   11224:	b538      	push	{r3, r4, r5, lr}
    if (advsm->adv_enabled) {
   11226:	7803      	ldrb	r3, [r0, #0]
   11228:	b903      	cbnz	r3, 1122c <ble_ll_adv_sm_stop+0x8>
}
   1122a:	bd38      	pop	{r3, r4, r5, pc}
   1122c:	4604      	mov	r4, r0
        ble_ll_rfmgmt_release();
   1122e:	f006 f873 	bl	17318 <ble_ll_rfmgmt_release>
        ble_ll_sched_rmv_elem(&advsm->adv_sch);
   11232:	f104 0064 	add.w	r0, r4, #100	; 0x64
   11236:	f007 fe27 	bl	18e88 <ble_ll_sched_rmv_elem>
        OS_ENTER_CRITICAL(sr);
   1123a:	f7fc fadd 	bl	d7f8 <os_arch_save_sr>
   1123e:	4605      	mov	r5, r0
        if (ble_ll_state_get() == BLE_LL_STATE_ADV) {
   11240:	f7ff fbc4 	bl	109cc <ble_ll_state_get>
   11244:	2801      	cmp	r0, #1
   11246:	d016      	beq.n	11276 <ble_ll_adv_sm_stop+0x52>
        OS_EXIT_CRITICAL(sr);
   11248:	4628      	mov	r0, r5
   1124a:	f7fc fadb 	bl	d804 <os_arch_restore_sr>
    os_eventq_remove(&evq->evq, &ev->ev);
   1124e:	f104 0154 	add.w	r1, r4, #84	; 0x54
   11252:	480e      	ldr	r0, [pc, #56]	; (1128c <ble_ll_adv_sm_stop+0x68>)
   11254:	f7fb fdc8 	bl	cde8 <os_eventq_remove>
        if (advsm->conn_comp_ev) {
   11258:	6d20      	ldr	r0, [r4, #80]	; 0x50
   1125a:	b118      	cbz	r0, 11264 <ble_ll_adv_sm_stop+0x40>
            ble_hci_trans_buf_free(advsm->conn_comp_ev);
   1125c:	f014 ff36 	bl	260cc <ble_hci_trans_buf_free>
            advsm->conn_comp_ev = NULL;
   11260:	2300      	movs	r3, #0
   11262:	6523      	str	r3, [r4, #80]	; 0x50
        ble_ll_adv_active_chanset_clear(advsm);
   11264:	4620      	mov	r0, r4
   11266:	f7ff fd76 	bl	10d56 <ble_ll_adv_active_chanset_clear>
        advsm->adv_enabled = 0;
   1126a:	2300      	movs	r3, #0
   1126c:	7023      	strb	r3, [r4, #0]
        ble_ll_adv_update_adv_scan_rsp_data(advsm);
   1126e:	4620      	mov	r0, r4
   11270:	f7ff ffae 	bl	111d0 <ble_ll_adv_update_adv_scan_rsp_data>
}
   11274:	e7d9      	b.n	1122a <ble_ll_adv_sm_stop+0x6>
            ble_phy_disable();
   11276:	f008 fd2d 	bl	19cd4 <ble_phy_disable>
            ble_ll_state_set(BLE_LL_STATE_STANDBY);
   1127a:	2000      	movs	r0, #0
   1127c:	f7ff fba0 	bl	109c0 <ble_ll_state_set>
            g_ble_ll_cur_adv_sm = NULL;
   11280:	4b03      	ldr	r3, [pc, #12]	; (11290 <ble_ll_adv_sm_stop+0x6c>)
   11282:	2200      	movs	r2, #0
   11284:	601a      	str	r2, [r3, #0]
            ble_ll_scan_chk_resume();
   11286:	f006 ffef 	bl	18268 <ble_ll_scan_chk_resume>
   1128a:	e7dd      	b.n	11248 <ble_ll_adv_sm_stop+0x24>
   1128c:	20003d60 	.word	0x20003d60
   11290:	20003df8 	.word	0x20003df8

00011294 <ble_ll_adv_set_enable>:
{
   11294:	b510      	push	{r4, lr}
   11296:	460c      	mov	r4, r1
    advsm = ble_ll_adv_sm_find_configured(instance);
   11298:	f7ff fd80 	bl	10d9c <ble_ll_adv_sm_find_configured>
    if (!advsm) {
   1129c:	b168      	cbz	r0, 112ba <ble_ll_adv_set_enable+0x26>
    if (enable == 1) {
   1129e:	2c01      	cmp	r4, #1
   112a0:	d004      	beq.n	112ac <ble_ll_adv_set_enable+0x18>
    } else if (enable == 0) {
   112a2:	b964      	cbnz	r4, 112be <ble_ll_adv_set_enable+0x2a>
        ble_ll_adv_sm_stop(advsm);
   112a4:	f7ff ffbe 	bl	11224 <ble_ll_adv_sm_stop>
    rc = BLE_ERR_SUCCESS;
   112a8:	2000      	movs	r0, #0
}
   112aa:	bd10      	pop	{r4, pc}
        if (!advsm->adv_enabled) {
   112ac:	7802      	ldrb	r2, [r0, #0]
   112ae:	b10a      	cbz	r2, 112b4 <ble_ll_adv_set_enable+0x20>
    rc = BLE_ERR_SUCCESS;
   112b0:	2000      	movs	r0, #0
   112b2:	e7fa      	b.n	112aa <ble_ll_adv_set_enable+0x16>
            rc = ble_ll_adv_sm_start(advsm);
   112b4:	f7ff fdf2 	bl	10e9c <ble_ll_adv_sm_start>
   112b8:	e7f7      	b.n	112aa <ble_ll_adv_set_enable+0x16>
        return BLE_ERR_UNK_ADV_INDENT;
   112ba:	2042      	movs	r0, #66	; 0x42
   112bc:	e7f5      	b.n	112aa <ble_ll_adv_set_enable+0x16>
        rc = BLE_ERR_INV_HCI_CMD_PARMS;
   112be:	2012      	movs	r0, #18
   112c0:	e7f3      	b.n	112aa <ble_ll_adv_set_enable+0x16>

000112c2 <ble_ll_adv_update_data_mbuf>:
{
   112c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   112c6:	4605      	mov	r5, r0
   112c8:	4617      	mov	r7, r2
   112ca:	4698      	mov	r8, r3
   112cc:	f8bd 6018 	ldrh.w	r6, [sp, #24]
    om = *omp;
   112d0:	6804      	ldr	r4, [r0, #0]
    if (new_data) {
   112d2:	b149      	cbz	r1, 112e8 <ble_ll_adv_update_data_mbuf+0x26>
        if (om) {
   112d4:	b114      	cbz	r4, 112dc <ble_ll_adv_update_data_mbuf+0x1a>
            os_mbuf_free_chain(om);
   112d6:	4620      	mov	r0, r4
   112d8:	f7fc fb9d 	bl	da16 <os_mbuf_free_chain>
        om = os_msys_get_pkthdr(datalen, 0);
   112dc:	2100      	movs	r1, #0
   112de:	4630      	mov	r0, r6
   112e0:	f7fb fef1 	bl	d0c6 <os_msys_get_pkthdr>
        if (!om) {
   112e4:	4604      	mov	r4, r0
   112e6:	b1e8      	cbz	r0, 11324 <ble_ll_adv_update_data_mbuf+0x62>
    assert(om);
   112e8:	b174      	cbz	r4, 11308 <ble_ll_adv_update_data_mbuf+0x46>
    if (OS_MBUF_PKTLEN(om) + datalen > maxlen) {
   112ea:	8a23      	ldrh	r3, [r4, #16]
   112ec:	4433      	add	r3, r6
   112ee:	42bb      	cmp	r3, r7
   112f0:	dc14      	bgt.n	1131c <ble_ll_adv_update_data_mbuf+0x5a>
    ret = os_mbuf_append(om, data, datalen);
   112f2:	4632      	mov	r2, r6
   112f4:	4641      	mov	r1, r8
   112f6:	4620      	mov	r0, r4
   112f8:	f7fc fb9f 	bl	da3a <os_mbuf_append>
    if (ret) {
   112fc:	b190      	cbz	r0, 11324 <ble_ll_adv_update_data_mbuf+0x62>
        os_mbuf_free_chain(om);
   112fe:	4620      	mov	r0, r4
   11300:	f7fc fb89 	bl	da16 <os_mbuf_free_chain>
        om = NULL;
   11304:	2400      	movs	r4, #0
   11306:	e00d      	b.n	11324 <ble_ll_adv_update_data_mbuf+0x62>
    assert(om);
   11308:	f7fa ff6e 	bl	c1e8 <hal_debugger_connected>
   1130c:	b100      	cbz	r0, 11310 <ble_ll_adv_update_data_mbuf+0x4e>
   1130e:	be01      	bkpt	0x0001
   11310:	2300      	movs	r3, #0
   11312:	461a      	mov	r2, r3
   11314:	4619      	mov	r1, r3
   11316:	4618      	mov	r0, r3
   11318:	f7fb f9a0 	bl	c65c <__assert_func>
        os_mbuf_free_chain(om);
   1131c:	4620      	mov	r0, r4
   1131e:	f7fc fb7a 	bl	da16 <os_mbuf_free_chain>
        om = NULL;
   11322:	2400      	movs	r4, #0
    *omp = om;
   11324:	602c      	str	r4, [r5, #0]
}
   11326:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001132a <ble_ll_adv_set_scan_rsp_data>:
{
   1132a:	b5f0      	push	{r4, r5, r6, r7, lr}
   1132c:	b083      	sub	sp, #12
   1132e:	4607      	mov	r7, r0
   11330:	460e      	mov	r6, r1
   11332:	461d      	mov	r5, r3
    advsm = ble_ll_adv_sm_find_configured(instance);
   11334:	4610      	mov	r0, r2
   11336:	f7ff fd31 	bl	10d9c <ble_ll_adv_sm_find_configured>
    if (!advsm) {
   1133a:	2800      	cmp	r0, #0
   1133c:	d042      	beq.n	113c4 <ble_ll_adv_set_scan_rsp_data+0x9a>
   1133e:	4604      	mov	r4, r0
    if (!(advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_SCANNABLE)) {
   11340:	8983      	ldrh	r3, [r0, #12]
   11342:	f013 0f02 	tst.w	r3, #2
   11346:	d102      	bne.n	1134e <ble_ll_adv_set_scan_rsp_data+0x24>
        if (!(advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY)) {
   11348:	f013 0f10 	tst.w	r3, #16
   1134c:	d03c      	beq.n	113c8 <ble_ll_adv_set_scan_rsp_data+0x9e>
    switch (operation) {
   1134e:	2d03      	cmp	r5, #3
   11350:	d13c      	bne.n	113cc <ble_ll_adv_set_scan_rsp_data+0xa2>
        if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY) {
   11352:	f013 0f10 	tst.w	r3, #16
   11356:	d001      	beq.n	1135c <ble_ll_adv_set_scan_rsp_data+0x32>
            if (datalen > BLE_SCAN_RSP_LEGACY_DATA_MAX_LEN) {
   11358:	2e1f      	cmp	r6, #31
   1135a:	d83a      	bhi.n	113d2 <ble_ll_adv_set_scan_rsp_data+0xa8>
    new_data = (operation == BLE_HCI_LE_SET_DATA_OPER_COMPLETE) ||
   1135c:	2d03      	cmp	r5, #3
   1135e:	d021      	beq.n	113a4 <ble_ll_adv_set_scan_rsp_data+0x7a>
   11360:	2d01      	cmp	r5, #1
   11362:	d000      	beq.n	11366 <ble_ll_adv_set_scan_rsp_data+0x3c>
   11364:	2500      	movs	r5, #0
    if (advsm->adv_enabled) {
   11366:	7823      	ldrb	r3, [r4, #0]
   11368:	b1f3      	cbz	r3, 113a8 <ble_ll_adv_set_scan_rsp_data+0x7e>
        if (advsm->new_scan_rsp_data) {
   1136a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   1136c:	b14b      	cbz	r3, 11382 <ble_ll_adv_set_scan_rsp_data+0x58>
            ble_ll_adv_flags_clear(advsm, BLE_LL_ADV_SM_FLAG_NEW_SCAN_RSP_DATA);
   1136e:	f44f 6180 	mov.w	r1, #1024	; 0x400
   11372:	4620      	mov	r0, r4
   11374:	f7ff fca5 	bl	10cc2 <ble_ll_adv_flags_clear>
            os_mbuf_free_chain(advsm->new_scan_rsp_data);
   11378:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   1137a:	f7fc fb4c 	bl	da16 <os_mbuf_free_chain>
            advsm->new_scan_rsp_data = NULL;
   1137e:	2300      	movs	r3, #0
   11380:	64e3      	str	r3, [r4, #76]	; 0x4c
        ble_ll_adv_update_data_mbuf(&advsm->new_scan_rsp_data, new_data,
   11382:	9600      	str	r6, [sp, #0]
   11384:	463b      	mov	r3, r7
   11386:	221f      	movs	r2, #31
   11388:	4629      	mov	r1, r5
   1138a:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   1138e:	f7ff ff98 	bl	112c2 <ble_ll_adv_update_data_mbuf>
        if (!advsm->new_scan_rsp_data) {
   11392:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   11394:	b1fb      	cbz	r3, 113d6 <ble_ll_adv_set_scan_rsp_data+0xac>
        ble_ll_adv_flags_set(advsm, BLE_LL_ADV_SM_FLAG_NEW_SCAN_RSP_DATA);
   11396:	f44f 6180 	mov.w	r1, #1024	; 0x400
   1139a:	4620      	mov	r0, r4
   1139c:	f7ff fc86 	bl	10cac <ble_ll_adv_flags_set>
    return BLE_ERR_SUCCESS;
   113a0:	2000      	movs	r0, #0
   113a2:	e014      	b.n	113ce <ble_ll_adv_set_scan_rsp_data+0xa4>
    new_data = (operation == BLE_HCI_LE_SET_DATA_OPER_COMPLETE) ||
   113a4:	2501      	movs	r5, #1
   113a6:	e7de      	b.n	11366 <ble_ll_adv_set_scan_rsp_data+0x3c>
        ble_ll_adv_update_data_mbuf(&advsm->scan_rsp_data, new_data,
   113a8:	9600      	str	r6, [sp, #0]
   113aa:	463b      	mov	r3, r7
   113ac:	221f      	movs	r2, #31
   113ae:	4629      	mov	r1, r5
   113b0:	f104 0048 	add.w	r0, r4, #72	; 0x48
   113b4:	f7ff ff85 	bl	112c2 <ble_ll_adv_update_data_mbuf>
        if (!advsm->scan_rsp_data) {
   113b8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   113ba:	b10b      	cbz	r3, 113c0 <ble_ll_adv_set_scan_rsp_data+0x96>
    return BLE_ERR_SUCCESS;
   113bc:	2000      	movs	r0, #0
   113be:	e006      	b.n	113ce <ble_ll_adv_set_scan_rsp_data+0xa4>
            return BLE_ERR_MEM_CAPACITY;
   113c0:	2007      	movs	r0, #7
   113c2:	e004      	b.n	113ce <ble_ll_adv_set_scan_rsp_data+0xa4>
        return BLE_ERR_UNK_ADV_INDENT;
   113c4:	2042      	movs	r0, #66	; 0x42
   113c6:	e002      	b.n	113ce <ble_ll_adv_set_scan_rsp_data+0xa4>
            return BLE_ERR_INV_HCI_CMD_PARMS;
   113c8:	2012      	movs	r0, #18
   113ca:	e000      	b.n	113ce <ble_ll_adv_set_scan_rsp_data+0xa4>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   113cc:	2012      	movs	r0, #18
}
   113ce:	b003      	add	sp, #12
   113d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
                return BLE_ERR_INV_HCI_CMD_PARMS;
   113d2:	2012      	movs	r0, #18
   113d4:	e7fb      	b.n	113ce <ble_ll_adv_set_scan_rsp_data+0xa4>
            return BLE_ERR_MEM_CAPACITY;
   113d6:	2007      	movs	r0, #7
   113d8:	e7f9      	b.n	113ce <ble_ll_adv_set_scan_rsp_data+0xa4>

000113da <ble_ll_adv_set_adv_data>:
{
   113da:	b5f0      	push	{r4, r5, r6, r7, lr}
   113dc:	b083      	sub	sp, #12
   113de:	4607      	mov	r7, r0
   113e0:	460e      	mov	r6, r1
   113e2:	461d      	mov	r5, r3
    advsm = ble_ll_adv_sm_find_configured(instance);
   113e4:	4610      	mov	r0, r2
   113e6:	f7ff fcd9 	bl	10d9c <ble_ll_adv_sm_find_configured>
    if (!advsm) {
   113ea:	2800      	cmp	r0, #0
   113ec:	d04f      	beq.n	1148e <ble_ll_adv_set_adv_data+0xb4>
   113ee:	4604      	mov	r4, r0
    if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY) {
   113f0:	8983      	ldrh	r3, [r0, #12]
   113f2:	f013 0f10 	tst.w	r3, #16
   113f6:	d007      	beq.n	11408 <ble_ll_adv_set_adv_data+0x2e>
        if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_DIRECTED) {
   113f8:	f013 0f04 	tst.w	r3, #4
   113fc:	d007      	beq.n	1140e <ble_ll_adv_set_adv_data+0x34>
            if (ble_ll_hci_adv_mode_ext()) {
   113fe:	f004 ffc8 	bl	16392 <ble_ll_hci_adv_mode_ext>
   11402:	b120      	cbz	r0, 1140e <ble_ll_adv_set_adv_data+0x34>
                return BLE_ERR_INV_HCI_CMD_PARMS;
   11404:	2012      	movs	r0, #18
   11406:	e047      	b.n	11498 <ble_ll_adv_set_adv_data+0xbe>
        if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_SCANNABLE) {
   11408:	f013 0f02 	tst.w	r3, #2
   1140c:	d141      	bne.n	11492 <ble_ll_adv_set_adv_data+0xb8>
    switch (operation) {
   1140e:	2d03      	cmp	r5, #3
   11410:	d141      	bne.n	11496 <ble_ll_adv_set_adv_data+0xbc>
        if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY) {
   11412:	89a3      	ldrh	r3, [r4, #12]
   11414:	f013 0f10 	tst.w	r3, #16
   11418:	d001      	beq.n	1141e <ble_ll_adv_set_adv_data+0x44>
            if (datalen > BLE_ADV_LEGACY_DATA_MAX_LEN) {
   1141a:	2e1f      	cmp	r6, #31
   1141c:	d83e      	bhi.n	1149c <ble_ll_adv_set_adv_data+0xc2>
        ble_ll_adv_flags_clear(advsm, BLE_LL_ADV_SM_FLAG_ADV_DATA_INCOMPLETE);
   1141e:	2140      	movs	r1, #64	; 0x40
   11420:	4620      	mov	r0, r4
   11422:	f7ff fc4e 	bl	10cc2 <ble_ll_adv_flags_clear>
    new_data = (operation == BLE_HCI_LE_SET_DATA_OPER_COMPLETE) ||
   11426:	2d03      	cmp	r5, #3
   11428:	d021      	beq.n	1146e <ble_ll_adv_set_adv_data+0x94>
   1142a:	2d01      	cmp	r5, #1
   1142c:	d000      	beq.n	11430 <ble_ll_adv_set_adv_data+0x56>
   1142e:	2500      	movs	r5, #0
    if (advsm->adv_enabled) {
   11430:	7823      	ldrb	r3, [r4, #0]
   11432:	b1f3      	cbz	r3, 11472 <ble_ll_adv_set_adv_data+0x98>
        if (advsm->new_adv_data) {
   11434:	6c63      	ldr	r3, [r4, #68]	; 0x44
   11436:	b14b      	cbz	r3, 1144c <ble_ll_adv_set_adv_data+0x72>
            ble_ll_adv_flags_clear(advsm, BLE_LL_ADV_SM_FLAG_NEW_ADV_DATA);
   11438:	f44f 7100 	mov.w	r1, #512	; 0x200
   1143c:	4620      	mov	r0, r4
   1143e:	f7ff fc40 	bl	10cc2 <ble_ll_adv_flags_clear>
            os_mbuf_free_chain(advsm->new_adv_data);
   11442:	6c60      	ldr	r0, [r4, #68]	; 0x44
   11444:	f7fc fae7 	bl	da16 <os_mbuf_free_chain>
            advsm->new_adv_data = NULL;
   11448:	2300      	movs	r3, #0
   1144a:	6463      	str	r3, [r4, #68]	; 0x44
        ble_ll_adv_update_data_mbuf(&advsm->new_adv_data, new_data,
   1144c:	9600      	str	r6, [sp, #0]
   1144e:	463b      	mov	r3, r7
   11450:	221f      	movs	r2, #31
   11452:	4629      	mov	r1, r5
   11454:	f104 0044 	add.w	r0, r4, #68	; 0x44
   11458:	f7ff ff33 	bl	112c2 <ble_ll_adv_update_data_mbuf>
        if (!advsm->new_adv_data) {
   1145c:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1145e:	b1fb      	cbz	r3, 114a0 <ble_ll_adv_set_adv_data+0xc6>
        ble_ll_adv_flags_set(advsm, BLE_LL_ADV_SM_FLAG_NEW_ADV_DATA);
   11460:	f44f 7100 	mov.w	r1, #512	; 0x200
   11464:	4620      	mov	r0, r4
   11466:	f7ff fc21 	bl	10cac <ble_ll_adv_flags_set>
    return BLE_ERR_SUCCESS;
   1146a:	2000      	movs	r0, #0
   1146c:	e014      	b.n	11498 <ble_ll_adv_set_adv_data+0xbe>
    new_data = (operation == BLE_HCI_LE_SET_DATA_OPER_COMPLETE) ||
   1146e:	2501      	movs	r5, #1
   11470:	e7de      	b.n	11430 <ble_ll_adv_set_adv_data+0x56>
        ble_ll_adv_update_data_mbuf(&advsm->adv_data, new_data,
   11472:	9600      	str	r6, [sp, #0]
   11474:	463b      	mov	r3, r7
   11476:	221f      	movs	r2, #31
   11478:	4629      	mov	r1, r5
   1147a:	f104 0040 	add.w	r0, r4, #64	; 0x40
   1147e:	f7ff ff20 	bl	112c2 <ble_ll_adv_update_data_mbuf>
        if (!advsm->adv_data) {
   11482:	6c23      	ldr	r3, [r4, #64]	; 0x40
   11484:	b10b      	cbz	r3, 1148a <ble_ll_adv_set_adv_data+0xb0>
    return BLE_ERR_SUCCESS;
   11486:	2000      	movs	r0, #0
   11488:	e006      	b.n	11498 <ble_ll_adv_set_adv_data+0xbe>
            return BLE_ERR_MEM_CAPACITY;
   1148a:	2007      	movs	r0, #7
   1148c:	e004      	b.n	11498 <ble_ll_adv_set_adv_data+0xbe>
        return BLE_ERR_UNK_ADV_INDENT;
   1148e:	2042      	movs	r0, #66	; 0x42
   11490:	e002      	b.n	11498 <ble_ll_adv_set_adv_data+0xbe>
            return BLE_ERR_INV_HCI_CMD_PARMS;
   11492:	2012      	movs	r0, #18
   11494:	e000      	b.n	11498 <ble_ll_adv_set_adv_data+0xbe>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   11496:	2012      	movs	r0, #18
}
   11498:	b003      	add	sp, #12
   1149a:	bdf0      	pop	{r4, r5, r6, r7, pc}
                return BLE_ERR_INV_HCI_CMD_PARMS;
   1149c:	2012      	movs	r0, #18
   1149e:	e7fb      	b.n	11498 <ble_ll_adv_set_adv_data+0xbe>
            return BLE_ERR_MEM_CAPACITY;
   114a0:	2007      	movs	r0, #7
   114a2:	e7f9      	b.n	11498 <ble_ll_adv_set_adv_data+0xbe>

000114a4 <ble_ll_adv_already_connected>:
{
   114a4:	b570      	push	{r4, r5, r6, lr}
   114a6:	4605      	mov	r5, r0
   114a8:	460e      	mov	r6, r1
    SLIST_FOREACH(connsm, &g_ble_ll_conn_active_list, act_sle) {
   114aa:	4b10      	ldr	r3, [pc, #64]	; (114ec <ble_ll_adv_already_connected+0x48>)
   114ac:	681c      	ldr	r4, [r3, #0]
   114ae:	e006      	b.n	114be <ble_ll_adv_already_connected+0x1a>
                if (connsm->peer_addr_type & 1) {
   114b0:	f894 3092 	ldrb.w	r3, [r4, #146]	; 0x92
   114b4:	f013 0f01 	tst.w	r3, #1
   114b8:	d115      	bne.n	114e6 <ble_ll_adv_already_connected+0x42>
    SLIST_FOREACH(connsm, &g_ble_ll_conn_active_list, act_sle) {
   114ba:	f8d4 40b8 	ldr.w	r4, [r4, #184]	; 0xb8
   114be:	b184      	cbz	r4, 114e2 <ble_ll_adv_already_connected+0x3e>
        if (!memcmp(&connsm->peer_addr, addr, BLE_DEV_ADDR_LEN)) {
   114c0:	2206      	movs	r2, #6
   114c2:	4629      	mov	r1, r5
   114c4:	f104 0093 	add.w	r0, r4, #147	; 0x93
   114c8:	f7fc ffae 	bl	e428 <memcmp>
   114cc:	2800      	cmp	r0, #0
   114ce:	d1f4      	bne.n	114ba <ble_ll_adv_already_connected+0x16>
            if (addr_type == BLE_ADDR_RANDOM) {
   114d0:	2e01      	cmp	r6, #1
   114d2:	d0ed      	beq.n	114b0 <ble_ll_adv_already_connected+0xc>
                if ((connsm->peer_addr_type & 1) == 0) {
   114d4:	f894 3092 	ldrb.w	r3, [r4, #146]	; 0x92
   114d8:	f013 0f01 	tst.w	r3, #1
   114dc:	d1ed      	bne.n	114ba <ble_ll_adv_already_connected+0x16>
                    return 1;
   114de:	2001      	movs	r0, #1
   114e0:	e000      	b.n	114e4 <ble_ll_adv_already_connected+0x40>
    return 0;
   114e2:	2000      	movs	r0, #0
}
   114e4:	bd70      	pop	{r4, r5, r6, pc}
                    return 1;
   114e6:	2001      	movs	r0, #1
   114e8:	e7fc      	b.n	114e4 <ble_ll_adv_already_connected+0x40>
   114ea:	bf00      	nop
   114ec:	200040d0 	.word	0x200040d0

000114f0 <ble_ll_adv_rx_req>:
{
   114f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   114f4:	4607      	mov	r7, r0
   114f6:	460e      	mov	r6, r1
    advsm = g_ble_ll_cur_adv_sm;
   114f8:	4b4f      	ldr	r3, [pc, #316]	; (11638 <ble_ll_adv_rx_req+0x148>)
   114fa:	f8d3 8000 	ldr.w	r8, [r3]
    rxbuf = rxpdu->om_data;
   114fe:	680d      	ldr	r5, [r1, #0]
    if (memcmp(advsm->adva, adva, BLE_DEV_ADDR_LEN)) {
   11500:	2206      	movs	r2, #6
   11502:	f105 0108 	add.w	r1, r5, #8
   11506:	f108 0028 	add.w	r0, r8, #40	; 0x28
   1150a:	f7fc ff8d 	bl	e428 <memcmp>
   1150e:	2800      	cmp	r0, #0
   11510:	f040 8085 	bne.w	1161e <ble_ll_adv_rx_req+0x12e>
   11514:	4682      	mov	sl, r0
    if (pdu_type == BLE_ADV_PDU_TYPE_SCAN_REQ) {
   11516:	2f03      	cmp	r7, #3
   11518:	d022      	beq.n	11560 <ble_ll_adv_rx_req+0x70>
        chk_wl = advsm->adv_filter_policy & 2;
   1151a:	f898 4003 	ldrb.w	r4, [r8, #3]
   1151e:	f004 0402 	and.w	r4, r4, #2
    if (rxbuf[0] & BLE_ADV_PDU_HDR_TXADD_MASK) {
   11522:	782b      	ldrb	r3, [r5, #0]
   11524:	f013 0f40 	tst.w	r3, #64	; 0x40
   11528:	d01f      	beq.n	1156a <ble_ll_adv_rx_req+0x7a>
        txadd = BLE_ADDR_RANDOM;
   1152a:	f04f 0901 	mov.w	r9, #1
    peer = rxbuf + BLE_LL_PDU_HDR_LEN;
   1152e:	3502      	adds	r5, #2
    if (ble_ll_resolv_enabled()) {
   11530:	f005 fdb4 	bl	1709c <ble_ll_resolv_enabled>
   11534:	b9e0      	cbnz	r0, 11570 <ble_ll_adv_rx_req+0x80>
    if (chk_wl && !ble_ll_whitelist_match(peer, peer_addr_type, resolved)) {
   11536:	2c00      	cmp	r4, #0
   11538:	d150      	bne.n	115dc <ble_ll_adv_rx_req+0xec>
    ble_hdr->rxinfo.flags |= BLE_MBUF_HDR_F_DEVMATCH;
   1153a:	8b33      	ldrh	r3, [r6, #24]
   1153c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   11540:	8333      	strh	r3, [r6, #24]
    if (pdu_type == BLE_ADV_PDU_TYPE_SCAN_REQ) {
   11542:	2f03      	cmp	r7, #3
   11544:	d054      	beq.n	115f0 <ble_ll_adv_rx_req+0x100>
    } else if (pdu_type == BLE_ADV_PDU_TYPE_AUX_CONNECT_REQ) {
   11546:	2f05      	cmp	r7, #5
   11548:	d16f      	bne.n	1162a <ble_ll_adv_rx_req+0x13a>
        if (ble_ll_adv_already_connected(peer, peer_addr_type)) {
   1154a:	4649      	mov	r1, r9
   1154c:	4628      	mov	r0, r5
   1154e:	f7ff ffa9 	bl	114a4 <ble_ll_adv_already_connected>
   11552:	2800      	cmp	r0, #0
   11554:	d16c      	bne.n	11630 <ble_ll_adv_rx_req+0x140>
    rc = -1;
   11556:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
   1155a:	4618      	mov	r0, r3
   1155c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        chk_wl = advsm->adv_filter_policy & 1;
   11560:	f898 4003 	ldrb.w	r4, [r8, #3]
   11564:	f004 0401 	and.w	r4, r4, #1
   11568:	e7db      	b.n	11522 <ble_ll_adv_rx_req+0x32>
        txadd = BLE_ADDR_PUBLIC;
   1156a:	f04f 0900 	mov.w	r9, #0
   1156e:	e7de      	b.n	1152e <ble_ll_adv_rx_req+0x3e>
        if (ble_ll_is_rpa(peer, txadd)) {
   11570:	4649      	mov	r1, r9
   11572:	4628      	mov	r0, r5
   11574:	f7ff f84f 	bl	10616 <ble_ll_is_rpa>
   11578:	4683      	mov	fp, r0
   1157a:	b300      	cbz	r0, 115be <ble_ll_adv_rx_req+0xce>
            advsm->adv_rpa_index = ble_hw_resolv_list_match();
   1157c:	f007 ffd4 	bl	19528 <ble_hw_resolv_list_match>
   11580:	b240      	sxtb	r0, r0
   11582:	f888 0008 	strb.w	r0, [r8, #8]
            if (advsm->adv_rpa_index >= 0) {
   11586:	2800      	cmp	r0, #0
   11588:	db14      	blt.n	115b4 <ble_ll_adv_rx_req+0xc4>
                ble_hdr->rxinfo.flags |= BLE_MBUF_HDR_F_RESOLVED;
   1158a:	8b33      	ldrh	r3, [r6, #24]
   1158c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   11590:	8333      	strh	r3, [r6, #24]
                rl = &g_ble_ll_resolv_list[advsm->adv_rpa_index];
   11592:	f998 2008 	ldrsb.w	r2, [r8, #8]
                if (chk_wl) {
   11596:	2c00      	cmp	r4, #0
   11598:	d0cd      	beq.n	11536 <ble_ll_adv_rx_req+0x46>
                    peer = rl->rl_identity_addr;
   1159a:	2336      	movs	r3, #54	; 0x36
   1159c:	fb03 f302 	mul.w	r3, r3, r2
   115a0:	f103 0520 	add.w	r5, r3, #32
   115a4:	4a25      	ldr	r2, [pc, #148]	; (1163c <ble_ll_adv_rx_req+0x14c>)
   115a6:	4415      	add	r5, r2
   115a8:	3504      	adds	r5, #4
                    peer_addr_type = rl->rl_addr_type;
   115aa:	f812 9003 	ldrb.w	r9, [r2, r3]
                    resolved = 1;
   115ae:	f04f 0a01 	mov.w	sl, #1
   115b2:	e7c0      	b.n	11536 <ble_ll_adv_rx_req+0x46>
                if (chk_wl) {
   115b4:	2c00      	cmp	r4, #0
   115b6:	d0be      	beq.n	11536 <ble_ll_adv_rx_req+0x46>
                    return -1;
   115b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   115bc:	e7cd      	b.n	1155a <ble_ll_adv_rx_req+0x6a>
            rl = ble_ll_resolv_list_find(peer, peer_addr_type);
   115be:	4649      	mov	r1, r9
   115c0:	4628      	mov	r0, r5
   115c2:	f005 fb15 	bl	16bf0 <ble_ll_resolv_list_find>
            if (rl && (rl->rl_priv_mode == BLE_HCI_PRIVACY_NETWORK) &&
   115c6:	b128      	cbz	r0, 115d4 <ble_ll_adv_rx_req+0xe4>
   115c8:	7842      	ldrb	r2, [r0, #1]
   115ca:	b92a      	cbnz	r2, 115d8 <ble_ll_adv_rx_req+0xe8>
                rl->rl_has_peer) {
   115cc:	78c3      	ldrb	r3, [r0, #3]
            if (rl && (rl->rl_priv_mode == BLE_HCI_PRIVACY_NETWORK) &&
   115ce:	bb4b      	cbnz	r3, 11624 <ble_ll_adv_rx_req+0x134>
    resolved = 0;
   115d0:	46da      	mov	sl, fp
   115d2:	e7b0      	b.n	11536 <ble_ll_adv_rx_req+0x46>
   115d4:	46da      	mov	sl, fp
   115d6:	e7ae      	b.n	11536 <ble_ll_adv_rx_req+0x46>
   115d8:	46da      	mov	sl, fp
   115da:	e7ac      	b.n	11536 <ble_ll_adv_rx_req+0x46>
    if (chk_wl && !ble_ll_whitelist_match(peer, peer_addr_type, resolved)) {
   115dc:	4652      	mov	r2, sl
   115de:	4649      	mov	r1, r9
   115e0:	4628      	mov	r0, r5
   115e2:	f007 fdbf 	bl	19164 <ble_ll_whitelist_match>
   115e6:	2800      	cmp	r0, #0
   115e8:	d1a7      	bne.n	1153a <ble_ll_adv_rx_req+0x4a>
        return -1;
   115ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   115ee:	e7b4      	b.n	1155a <ble_ll_adv_rx_req+0x6a>
        ble_phy_set_txend_cb(ble_ll_adv_tx_done, advsm);
   115f0:	4641      	mov	r1, r8
   115f2:	4813      	ldr	r0, [pc, #76]	; (11640 <ble_ll_adv_rx_req+0x150>)
   115f4:	f008 fb06 	bl	19c04 <ble_phy_set_txend_cb>
        rc = ble_phy_tx(ble_ll_adv_scan_rsp_legacy_pdu_make, advsm,
   115f8:	2200      	movs	r2, #0
   115fa:	4641      	mov	r1, r8
   115fc:	4811      	ldr	r0, [pc, #68]	; (11644 <ble_ll_adv_rx_req+0x154>)
   115fe:	f008 fd95 	bl	1a12c <ble_phy_tx>
        if (!rc) {
   11602:	4603      	mov	r3, r0
   11604:	2800      	cmp	r0, #0
   11606:	d1a8      	bne.n	1155a <ble_ll_adv_rx_req+0x6a>
            ble_hdr->rxinfo.flags |= BLE_MBUF_HDR_F_SCAN_RSP_TXD;
   11608:	8b32      	ldrh	r2, [r6, #24]
   1160a:	f042 0210 	orr.w	r2, r2, #16
   1160e:	8332      	strh	r2, [r6, #24]
            STATS_INC(ble_ll_stats, scan_rsp_txg);
   11610:	490d      	ldr	r1, [pc, #52]	; (11648 <ble_ll_adv_rx_req+0x158>)
   11612:	f8d1 2094 	ldr.w	r2, [r1, #148]	; 0x94
   11616:	3201      	adds	r2, #1
   11618:	f8c1 2094 	str.w	r2, [r1, #148]	; 0x94
   1161c:	e79d      	b.n	1155a <ble_ll_adv_rx_req+0x6a>
        return -1;
   1161e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11622:	e79a      	b.n	1155a <ble_ll_adv_rx_req+0x6a>
                return -1;
   11624:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11628:	e797      	b.n	1155a <ble_ll_adv_rx_req+0x6a>
    rc = -1;
   1162a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1162e:	e794      	b.n	1155a <ble_ll_adv_rx_req+0x6a>
            return -1;
   11630:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11634:	e791      	b.n	1155a <ble_ll_adv_rx_req+0x6a>
   11636:	bf00      	nop
   11638:	20003df8 	.word	0x20003df8
   1163c:	20004100 	.word	0x20004100
   11640:	00010d6d 	.word	0x00010d6d
   11644:	00011147 	.word	0x00011147
   11648:	20003be0 	.word	0x20003be0

0001164c <ble_ll_adv_conn_req_rxd>:
{
   1164c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if (!(advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY)) {
   11650:	8993      	ldrh	r3, [r2, #12]
   11652:	f013 0f10 	tst.w	r3, #16
   11656:	d103      	bne.n	11660 <ble_ll_adv_conn_req_rxd+0x14>
        if (!(advsm->flags & BLE_LL_ADV_SM_FLAG_CONN_RSP_TXD)) {
   11658:	8954      	ldrh	r4, [r2, #10]
   1165a:	f014 0f08 	tst.w	r4, #8
   1165e:	d069      	beq.n	11734 <ble_ll_adv_conn_req_rxd+0xe8>
    resolved = BLE_MBUF_HDR_RESOLVED(hdr);
   11660:	880c      	ldrh	r4, [r1, #0]
   11662:	f404 6680 	and.w	r6, r4, #1024	; 0x400
    inita = rxbuf + BLE_LL_PDU_HDR_LEN;
   11666:	1c87      	adds	r7, r0, #2
    if (hdr->rxinfo.flags & BLE_MBUF_HDR_F_DEVMATCH) {
   11668:	f014 0f40 	tst.w	r4, #64	; 0x40
   1166c:	d064      	beq.n	11738 <ble_ll_adv_conn_req_rxd+0xec>
        if (rxbuf[0] & BLE_ADV_PDU_HDR_TXADD_MASK) {
   1166e:	7804      	ldrb	r4, [r0, #0]
   11670:	f014 0f40 	tst.w	r4, #64	; 0x40
   11674:	d019      	beq.n	116aa <ble_ll_adv_conn_req_rxd+0x5e>
            addr_type = BLE_ADDR_RANDOM;
   11676:	f04f 0801 	mov.w	r8, #1
   1167a:	4614      	mov	r4, r2
   1167c:	4689      	mov	r9, r1
   1167e:	4605      	mov	r5, r0
        if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_DIRECTED) {
   11680:	f013 0f04 	tst.w	r3, #4
   11684:	d01d      	beq.n	116c2 <ble_ll_adv_conn_req_rxd+0x76>
            if (resolved) {
   11686:	b19e      	cbz	r6, 116b0 <ble_ll_adv_conn_req_rxd+0x64>
                ident_addr = g_ble_ll_resolv_list[advsm->adv_rpa_index].rl_identity_addr;
   11688:	f992 2008 	ldrsb.w	r2, [r2, #8]
   1168c:	2336      	movs	r3, #54	; 0x36
   1168e:	fb03 f302 	mul.w	r3, r3, r2
   11692:	f103 0120 	add.w	r1, r3, #32
   11696:	4a2b      	ldr	r2, [pc, #172]	; (11744 <ble_ll_adv_conn_req_rxd+0xf8>)
   11698:	4411      	add	r1, r2
   1169a:	3104      	adds	r1, #4
                addr_type = g_ble_ll_resolv_list[advsm->adv_rpa_index].rl_addr_type;
   1169c:	f812 8003 	ldrb.w	r8, [r2, r3]
            if ((addr_type != advsm->peer_addr_type) ||
   116a0:	7963      	ldrb	r3, [r4, #5]
   116a2:	4543      	cmp	r3, r8
   116a4:	d006      	beq.n	116b4 <ble_ll_adv_conn_req_rxd+0x68>
   116a6:	2500      	movs	r5, #0
   116a8:	e047      	b.n	1173a <ble_ll_adv_conn_req_rxd+0xee>
            addr_type = BLE_ADDR_PUBLIC;
   116aa:	f04f 0800 	mov.w	r8, #0
   116ae:	e7e4      	b.n	1167a <ble_ll_adv_conn_req_rxd+0x2e>
            ident_addr = inita;
   116b0:	4639      	mov	r1, r7
   116b2:	e7f5      	b.n	116a0 <ble_ll_adv_conn_req_rxd+0x54>
                memcmp(advsm->peer_addr, ident_addr, BLE_DEV_ADDR_LEN)) {
   116b4:	2206      	movs	r2, #6
   116b6:	f104 0034 	add.w	r0, r4, #52	; 0x34
   116ba:	f7fc feb5 	bl	e428 <memcmp>
            if ((addr_type != advsm->peer_addr_type) ||
   116be:	2800      	cmp	r0, #0
   116c0:	d13e      	bne.n	11740 <ble_ll_adv_conn_req_rxd+0xf4>
        if (resolved) {
   116c2:	b9a6      	cbnz	r6, 116ee <ble_ll_adv_conn_req_rxd+0xa2>
                          !(advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY));
   116c4:	89a3      	ldrh	r3, [r4, #12]
        valid = ble_ll_conn_slave_start(rxbuf, addr_type, hdr,
   116c6:	091b      	lsrs	r3, r3, #4
   116c8:	f083 0301 	eor.w	r3, r3, #1
   116cc:	f003 0301 	and.w	r3, r3, #1
   116d0:	464a      	mov	r2, r9
   116d2:	4641      	mov	r1, r8
   116d4:	4628      	mov	r0, r5
   116d6:	f002 fa61 	bl	13b9c <ble_ll_conn_slave_start>
        if (valid) {
   116da:	4605      	mov	r5, r0
   116dc:	b368      	cbz	r0, 1173a <ble_ll_adv_conn_req_rxd+0xee>
            if (!(advsm->flags & BLE_LL_ADV_SM_FLAG_CONN_RSP_TXD)) {
   116de:	8963      	ldrh	r3, [r4, #10]
   116e0:	f013 0f08 	tst.w	r3, #8
   116e4:	d129      	bne.n	1173a <ble_ll_adv_conn_req_rxd+0xee>
                ble_ll_adv_sm_stop(advsm);
   116e6:	4620      	mov	r0, r4
   116e8:	f7ff fd9c 	bl	11224 <ble_ll_adv_sm_stop>
   116ec:	e025      	b.n	1173a <ble_ll_adv_conn_req_rxd+0xee>
            memcpy(advsm->adv_rpa, inita, BLE_DEV_ADDR_LEN);
   116ee:	683b      	ldr	r3, [r7, #0]
   116f0:	f8c4 302e 	str.w	r3, [r4, #46]	; 0x2e
   116f4:	88bb      	ldrh	r3, [r7, #4]
   116f6:	8663      	strh	r3, [r4, #50]	; 0x32
            ble_ll_resolv_set_peer_rpa(advsm->adv_rpa_index, inita);
   116f8:	4639      	mov	r1, r7
   116fa:	f994 0008 	ldrsb.w	r0, [r4, #8]
   116fe:	f005 fc55 	bl	16fac <ble_ll_resolv_set_peer_rpa>
                   g_ble_ll_resolv_list[advsm->adv_rpa_index].rl_identity_addr,
   11702:	f994 3008 	ldrsb.w	r3, [r4, #8]
   11706:	2236      	movs	r2, #54	; 0x36
   11708:	fb02 f303 	mul.w	r3, r2, r3
   1170c:	3320      	adds	r3, #32
   1170e:	490d      	ldr	r1, [pc, #52]	; (11744 <ble_ll_adv_conn_req_rxd+0xf8>)
   11710:	440b      	add	r3, r1
            memcpy(inita,
   11712:	f853 0f04 	ldr.w	r0, [r3, #4]!
   11716:	f8c5 0002 	str.w	r0, [r5, #2]
   1171a:	889b      	ldrh	r3, [r3, #4]
   1171c:	80bb      	strh	r3, [r7, #4]
            addr_type = g_ble_ll_resolv_list[advsm->adv_rpa_index].rl_addr_type;
   1171e:	f994 3008 	ldrsb.w	r3, [r4, #8]
   11722:	fb02 f203 	mul.w	r2, r2, r3
   11726:	f811 8002 	ldrb.w	r8, [r1, r2]
            addr_type += 2;
   1172a:	f108 0802 	add.w	r8, r8, #2
   1172e:	fa5f f888 	uxtb.w	r8, r8
   11732:	e7c7      	b.n	116c4 <ble_ll_adv_conn_req_rxd+0x78>
            return 0;
   11734:	2500      	movs	r5, #0
   11736:	e000      	b.n	1173a <ble_ll_adv_conn_req_rxd+0xee>
    valid = 0;
   11738:	2500      	movs	r5, #0
}
   1173a:	4628      	mov	r0, r5
   1173c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   11740:	2500      	movs	r5, #0
   11742:	e7fa      	b.n	1173a <ble_ll_adv_conn_req_rxd+0xee>
   11744:	20004100 	.word	0x20004100

00011748 <ble_ll_adv_sm_stop_timeout>:
{
   11748:	b510      	push	{r4, lr}
   1174a:	4604      	mov	r4, r0
    if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_HD_DIRECTED) {
   1174c:	8983      	ldrh	r3, [r0, #12]
   1174e:	f013 0f08 	tst.w	r3, #8
   11752:	d103      	bne.n	1175c <ble_ll_adv_sm_stop_timeout+0x14>
    ble_ll_adv_sm_stop(advsm);
   11754:	4620      	mov	r0, r4
   11756:	f7ff fd65 	bl	11224 <ble_ll_adv_sm_stop>
}
   1175a:	bd10      	pop	{r4, pc}
        ble_ll_conn_comp_event_send(NULL, BLE_ERR_DIR_ADV_TMO,
   1175c:	4603      	mov	r3, r0
   1175e:	6d02      	ldr	r2, [r0, #80]	; 0x50
   11760:	213c      	movs	r1, #60	; 0x3c
   11762:	2000      	movs	r0, #0
   11764:	f002 fc3a 	bl	13fdc <ble_ll_conn_comp_event_send>
        advsm->conn_comp_ev = NULL;
   11768:	2300      	movs	r3, #0
   1176a:	6523      	str	r3, [r4, #80]	; 0x50
   1176c:	e7f2      	b.n	11754 <ble_ll_adv_sm_stop_timeout+0xc>
	...

00011770 <ble_ll_adv_reschedule_event>:

static void
ble_ll_adv_reschedule_event(struct ble_ll_adv_sm *advsm)
{
   11770:	b510      	push	{r4, lr}
   11772:	b082      	sub	sp, #8
    int rc;
    uint32_t start_time;
    uint32_t max_delay_ticks;

    assert(advsm->adv_enabled);
   11774:	7803      	ldrb	r3, [r0, #0]
   11776:	b1b3      	cbz	r3, 117a6 <ble_ll_adv_reschedule_event+0x36>
   11778:	4604      	mov	r4, r0

    if (!advsm->adv_sch.enqueued) {
   1177a:	f890 3065 	ldrb.w	r3, [r0, #101]	; 0x65
   1177e:	b983      	cbnz	r3, 117a2 <ble_ll_adv_reschedule_event+0x32>
        if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_HD_DIRECTED) {
   11780:	8983      	ldrh	r3, [r0, #12]
   11782:	f013 0f08 	tst.w	r3, #8
   11786:	d018      	beq.n	117ba <ble_ll_adv_reschedule_event+0x4a>
            max_delay_ticks = 0;
   11788:	2200      	movs	r2, #0
        } else {
            max_delay_ticks =
                    os_cputime_usecs_to_ticks(BLE_LL_ADV_DELAY_MS_MAX * 1000);
        }

        rc = ble_ll_sched_adv_reschedule(&advsm->adv_sch, &start_time,
   1178a:	a901      	add	r1, sp, #4
   1178c:	f104 0064 	add.w	r0, r4, #100	; 0x64
   11790:	f007 fa84 	bl	18c9c <ble_ll_sched_adv_reschedule>
                                         max_delay_ticks);
        if (rc) {
   11794:	b9b8      	cbnz	r0, 117c6 <ble_ll_adv_reschedule_event+0x56>
            ble_ll_adv_drop_event(advsm);
            return;
        }

        start_time += g_ble_ll_sched_offset_ticks;
   11796:	4b0e      	ldr	r3, [pc, #56]	; (117d0 <ble_ll_adv_reschedule_event+0x60>)
   11798:	781b      	ldrb	r3, [r3, #0]
   1179a:	9a01      	ldr	r2, [sp, #4]
   1179c:	4413      	add	r3, r2
        advsm->adv_event_start_time = start_time;
   1179e:	61a3      	str	r3, [r4, #24]
        advsm->adv_pdu_start_time = start_time;
   117a0:	61e3      	str	r3, [r4, #28]
    if (!(advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY) &&
                                                        !advsm->aux_active) {
        ble_ll_adv_aux_schedule(advsm);
    }
#endif
}
   117a2:	b002      	add	sp, #8
   117a4:	bd10      	pop	{r4, pc}
    assert(advsm->adv_enabled);
   117a6:	f7fa fd1f 	bl	c1e8 <hal_debugger_connected>
   117aa:	b100      	cbz	r0, 117ae <ble_ll_adv_reschedule_event+0x3e>
   117ac:	be01      	bkpt	0x0001
   117ae:	2300      	movs	r3, #0
   117b0:	461a      	mov	r2, r3
   117b2:	4619      	mov	r1, r3
   117b4:	4618      	mov	r0, r3
   117b6:	f7fa ff51 	bl	c65c <__assert_func>
            max_delay_ticks =
   117ba:	f242 7010 	movw	r0, #10000	; 0x2710
   117be:	f018 f88b 	bl	298d8 <os_cputime_usecs_to_ticks>
   117c2:	4602      	mov	r2, r0
   117c4:	e7e1      	b.n	1178a <ble_ll_adv_reschedule_event+0x1a>
            ble_ll_adv_drop_event(advsm);
   117c6:	4620      	mov	r0, r4
   117c8:	f7ff fcea 	bl	111a0 <ble_ll_adv_drop_event>
   117cc:	e7e9      	b.n	117a2 <ble_ll_adv_reschedule_event+0x32>
   117ce:	bf00      	nop
   117d0:	20004250 	.word	0x20004250

000117d4 <ble_ll_adv_sm_init>:
    return 0;
}

static void
ble_ll_adv_sm_init(struct ble_ll_adv_sm *advsm)
{
   117d4:	b510      	push	{r4, lr}
   117d6:	4604      	mov	r4, r0
    memset(advsm, 0, sizeof(struct ble_ll_adv_sm));
   117d8:	2280      	movs	r2, #128	; 0x80
   117da:	2100      	movs	r1, #0
   117dc:	f7fc fe70 	bl	e4c0 <memset>

    advsm->adv_itvl_min = BLE_HCI_ADV_ITVL_DEF;
   117e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
   117e4:	81e3      	strh	r3, [r4, #14]
    advsm->adv_itvl_max = BLE_HCI_ADV_ITVL_DEF;
   117e6:	8223      	strh	r3, [r4, #16]
    advsm->adv_chanmask = BLE_HCI_ADV_CHANMASK_DEF;
   117e8:	2307      	movs	r3, #7
   117ea:	70a3      	strb	r3, [r4, #2]
    memset(ev, 0, sizeof(*ev));
   117ec:	2300      	movs	r3, #0
   117ee:	6563      	str	r3, [r4, #84]	; 0x54
   117f0:	6623      	str	r3, [r4, #96]	; 0x60
    ev->ev.ev_queued = 0;
   117f2:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
    ev->ev.ev_cb = (os_event_fn *)fn;
   117f6:	4b03      	ldr	r3, [pc, #12]	; (11804 <ble_ll_adv_sm_init+0x30>)
   117f8:	65a3      	str	r3, [r4, #88]	; 0x58
    ev->ev.ev_arg = arg;
   117fa:	65e4      	str	r4, [r4, #92]	; 0x5c
#endif
#endif

    /* Configure instances to be legacy on start */
    advsm->props |= BLE_HCI_LE_SET_EXT_ADV_PROP_SCANNABLE;
    advsm->props |= BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY;
   117fc:	2312      	movs	r3, #18
   117fe:	81a3      	strh	r3, [r4, #12]
}
   11800:	bd10      	pop	{r4, pc}
   11802:	bf00      	nop
   11804:	0001194d 	.word	0x0001194d

00011808 <ble_ll_adv_chk_rpa_timeout>:
    if (advsm->own_addr_type < BLE_HCI_ADV_OWN_ADDR_PRIV_PUB) {
   11808:	7903      	ldrb	r3, [r0, #4]
   1180a:	2b01      	cmp	r3, #1
   1180c:	d903      	bls.n	11816 <ble_ll_adv_chk_rpa_timeout+0xe>
    if (advsm->flags & BLE_LL_ADV_SM_FLAG_ADV_RPA_TMO) {
   1180e:	8943      	ldrh	r3, [r0, #10]
   11810:	f413 7f80 	tst.w	r3, #256	; 0x100
   11814:	d100      	bne.n	11818 <ble_ll_adv_chk_rpa_timeout+0x10>
   11816:	4770      	bx	lr
{
   11818:	b510      	push	{r4, lr}
   1181a:	4604      	mov	r4, r0
        ble_ll_adv_rpa_update(advsm);
   1181c:	f7ff fa5d 	bl	10cda <ble_ll_adv_rpa_update>
        ble_ll_adv_flags_clear(advsm, BLE_LL_ADV_SM_FLAG_ADV_RPA_TMO);
   11820:	f44f 7180 	mov.w	r1, #256	; 0x100
   11824:	4620      	mov	r0, r4
   11826:	f7ff fa4c 	bl	10cc2 <ble_ll_adv_flags_clear>
}
   1182a:	bd10      	pop	{r4, pc}

0001182c <ble_ll_adv_done>:
{
   1182c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    assert(advsm->adv_enabled);
   11830:	7803      	ldrb	r3, [r0, #0]
   11832:	2b00      	cmp	r3, #0
   11834:	d047      	beq.n	118c6 <ble_ll_adv_done+0x9a>
   11836:	4604      	mov	r4, r0
    ble_ll_rfmgmt_release();
   11838:	f005 fd6e 	bl	17318 <ble_ll_rfmgmt_release>
    ble_ll_adv_update_adv_scan_rsp_data(advsm);
   1183c:	4620      	mov	r0, r4
   1183e:	f7ff fcc7 	bl	111d0 <ble_ll_adv_update_adv_scan_rsp_data>
    ble_ll_sched_rmv_elem(&advsm->adv_sch);
   11842:	f104 0564 	add.w	r5, r4, #100	; 0x64
   11846:	4628      	mov	r0, r5
   11848:	f007 fb1e 	bl	18e88 <ble_ll_sched_rmv_elem>
    os_eventq_remove(&evq->evq, &ev->ev);
   1184c:	f104 0654 	add.w	r6, r4, #84	; 0x54
   11850:	4631      	mov	r1, r6
   11852:	4837      	ldr	r0, [pc, #220]	; (11930 <ble_ll_adv_done+0x104>)
   11854:	f7fb fac8 	bl	cde8 <os_eventq_remove>
    final_adv_chan = ble_ll_adv_final_chan(advsm);
   11858:	4620      	mov	r0, r4
   1185a:	f7ff fa1a 	bl	10c92 <ble_ll_adv_final_chan>
    if (advsm->adv_chan == final_adv_chan) {
   1185e:	79a3      	ldrb	r3, [r4, #6]
   11860:	4283      	cmp	r3, r0
   11862:	d03a      	beq.n	118da <ble_ll_adv_done+0xae>
        ++advsm->adv_chan;
   11864:	3301      	adds	r3, #1
   11866:	b2db      	uxtb	r3, r3
   11868:	71a3      	strb	r3, [r4, #6]
        mask = 1 << (advsm->adv_chan - BLE_PHY_ADV_CHAN_START);
   1186a:	f1a3 0125 	sub.w	r1, r3, #37	; 0x25
   1186e:	2201      	movs	r2, #1
   11870:	408a      	lsls	r2, r1
        if ((mask & advsm->adv_chanmask) == 0) {
   11872:	78a1      	ldrb	r1, [r4, #2]
   11874:	420a      	tst	r2, r1
   11876:	d101      	bne.n	1187c <ble_ll_adv_done+0x50>
            ++advsm->adv_chan;
   11878:	3301      	adds	r3, #1
   1187a:	71a3      	strb	r3, [r4, #6]
        advsm->adv_pdu_start_time = os_cputime_get32() +
   1187c:	f018 f827 	bl	298ce <os_cputime_get32>
   11880:	4b2c      	ldr	r3, [pc, #176]	; (11934 <ble_ll_adv_done+0x108>)
   11882:	781b      	ldrb	r3, [r3, #0]
   11884:	4418      	add	r0, r3
   11886:	61e0      	str	r0, [r4, #28]
        resched_pdu = 1;
   11888:	2701      	movs	r7, #1
    if ((advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_HD_DIRECTED) &&
   1188a:	89a3      	ldrh	r3, [r4, #12]
   1188c:	f013 0f08 	tst.w	r3, #8
   11890:	d003      	beq.n	1189a <ble_ll_adv_done+0x6e>
            (advsm->adv_pdu_start_time >= advsm->adv_end_time)) {
   11892:	69e2      	ldr	r2, [r4, #28]
   11894:	6a23      	ldr	r3, [r4, #32]
    if ((advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_HD_DIRECTED) &&
   11896:	429a      	cmp	r2, r3
   11898:	d240      	bcs.n	1191c <ble_ll_adv_done+0xf0>
    ble_ll_adv_chk_rpa_timeout(advsm);
   1189a:	4620      	mov	r0, r4
   1189c:	f7ff ffb4 	bl	11808 <ble_ll_adv_chk_rpa_timeout>
    ble_ll_adv_set_sched(advsm);
   118a0:	4620      	mov	r0, r4
   118a2:	f7ff fad1 	bl	10e48 <ble_ll_adv_set_sched>
    if (!resched_pdu) {
   118a6:	2f00      	cmp	r7, #0
   118a8:	d03c      	beq.n	11924 <ble_ll_adv_done+0xf8>
    rc = ble_ll_sched_adv_resched_pdu(&advsm->adv_sch);
   118aa:	4628      	mov	r0, r5
   118ac:	f007 fab0 	bl	18e10 <ble_ll_sched_adv_resched_pdu>
    if (rc) {
   118b0:	2800      	cmp	r0, #0
   118b2:	d03a      	beq.n	1192a <ble_ll_adv_done+0xfe>
        STATS_INC(ble_ll_stats, adv_resched_pdu_fail);
   118b4:	4a20      	ldr	r2, [pc, #128]	; (11938 <ble_ll_adv_done+0x10c>)
   118b6:	6f53      	ldr	r3, [r2, #116]	; 0x74
   118b8:	3301      	adds	r3, #1
   118ba:	6753      	str	r3, [r2, #116]	; 0x74
    os_eventq_put(&evq->evq, &ev->ev);
   118bc:	4631      	mov	r1, r6
   118be:	481c      	ldr	r0, [pc, #112]	; (11930 <ble_ll_adv_done+0x104>)
   118c0:	f7fb f9fb 	bl	ccba <os_eventq_put>
   118c4:	e031      	b.n	1192a <ble_ll_adv_done+0xfe>
    assert(advsm->adv_enabled);
   118c6:	f7fa fc8f 	bl	c1e8 <hal_debugger_connected>
   118ca:	b100      	cbz	r0, 118ce <ble_ll_adv_done+0xa2>
   118cc:	be01      	bkpt	0x0001
   118ce:	2300      	movs	r3, #0
   118d0:	461a      	mov	r2, r3
   118d2:	4619      	mov	r1, r3
   118d4:	4618      	mov	r0, r3
   118d6:	f7fa fec1 	bl	c65c <__assert_func>
        ble_ll_scan_chk_resume();
   118da:	f006 fcc5 	bl	18268 <ble_ll_scan_chk_resume>
        advsm->adv_chan = ble_ll_adv_first_chan(advsm);
   118de:	4620      	mov	r0, r4
   118e0:	f7ff f9ca 	bl	10c78 <ble_ll_adv_first_chan>
   118e4:	71a0      	strb	r0, [r4, #6]
        tick_itvl = os_cputime_usecs_to_ticks(itvl);
   118e6:	6960      	ldr	r0, [r4, #20]
   118e8:	f017 fff6 	bl	298d8 <os_cputime_usecs_to_ticks>
   118ec:	4680      	mov	r8, r0
        advsm->adv_event_start_time += tick_itvl;
   118ee:	69a0      	ldr	r0, [r4, #24]
   118f0:	4440      	add	r0, r8
   118f2:	61a0      	str	r0, [r4, #24]
        advsm->adv_pdu_start_time = advsm->adv_event_start_time;
   118f4:	61e0      	str	r0, [r4, #28]
        start_time = advsm->adv_pdu_start_time - g_ble_ll_sched_offset_ticks;
   118f6:	4b0f      	ldr	r3, [pc, #60]	; (11934 <ble_ll_adv_done+0x108>)
   118f8:	781f      	ldrb	r7, [r3, #0]
   118fa:	1bc7      	subs	r7, r0, r7
        delta_t = (int32_t)(start_time - os_cputime_get32());
   118fc:	f017 ffe7 	bl	298ce <os_cputime_get32>
        if (delta_t < 0) {
   11900:	1a38      	subs	r0, r7, r0
   11902:	d401      	bmi.n	11908 <ble_ll_adv_done+0xdc>
        resched_pdu = 0;
   11904:	2700      	movs	r7, #0
   11906:	e7c0      	b.n	1188a <ble_ll_adv_done+0x5e>
            while (delta_t < 0) {
   11908:	2800      	cmp	r0, #0
   1190a:	da05      	bge.n	11918 <ble_ll_adv_done+0xec>
                advsm->adv_event_start_time += tick_itvl;
   1190c:	69a3      	ldr	r3, [r4, #24]
   1190e:	4443      	add	r3, r8
   11910:	61a3      	str	r3, [r4, #24]
                advsm->adv_pdu_start_time = advsm->adv_event_start_time;
   11912:	61e3      	str	r3, [r4, #28]
                delta_t += (int32_t)tick_itvl;
   11914:	4440      	add	r0, r8
   11916:	e7f7      	b.n	11908 <ble_ll_adv_done+0xdc>
        resched_pdu = 0;
   11918:	2700      	movs	r7, #0
   1191a:	e7b6      	b.n	1188a <ble_ll_adv_done+0x5e>
        ble_ll_adv_sm_stop_timeout(advsm);
   1191c:	4620      	mov	r0, r4
   1191e:	f7ff ff13 	bl	11748 <ble_ll_adv_sm_stop_timeout>
        return;
   11922:	e002      	b.n	1192a <ble_ll_adv_done+0xfe>
        ble_ll_adv_reschedule_event(advsm);
   11924:	4620      	mov	r0, r4
   11926:	f7ff ff23 	bl	11770 <ble_ll_adv_reschedule_event>
}
   1192a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1192e:	bf00      	nop
   11930:	20003d60 	.word	0x20003d60
   11934:	20004250 	.word	0x20004250
   11938:	20003be0 	.word	0x20003be0

0001193c <ble_ll_adv_make_done>:
{
   1193c:	b510      	push	{r4, lr}
   1193e:	4604      	mov	r4, r0
    ble_ll_adv_active_chanset_clear(advsm);
   11940:	f7ff fa09 	bl	10d56 <ble_ll_adv_active_chanset_clear>
    ble_ll_adv_done(advsm);
   11944:	4620      	mov	r0, r4
   11946:	f7ff ff71 	bl	1182c <ble_ll_adv_done>
}
   1194a:	bd10      	pop	{r4, pc}

0001194c <ble_ll_adv_event_done>:
{
   1194c:	b508      	push	{r3, lr}
    ble_ll_adv_done(ble_npl_event_get_arg(ev));
   1194e:	6880      	ldr	r0, [r0, #8]
   11950:	f7ff ff6c 	bl	1182c <ble_ll_adv_done>
}
   11954:	bd08      	pop	{r3, pc}
	...

00011958 <ble_ll_adv_rpa_timeout>:
{
   11958:	b510      	push	{r4, lr}
    for (i = 0; i < BLE_ADV_INSTANCES; i++) {
   1195a:	2400      	movs	r4, #0
   1195c:	2c00      	cmp	r4, #0
   1195e:	dd00      	ble.n	11962 <ble_ll_adv_rpa_timeout+0xa>
}
   11960:	bd10      	pop	{r4, pc}
        advsm = &g_ble_ll_adv_sm[i];
   11962:	01e2      	lsls	r2, r4, #7
   11964:	4b06      	ldr	r3, [pc, #24]	; (11980 <ble_ll_adv_rpa_timeout+0x28>)
   11966:	18d0      	adds	r0, r2, r3
        if (advsm->adv_enabled &&
   11968:	5cd3      	ldrb	r3, [r2, r3]
   1196a:	b113      	cbz	r3, 11972 <ble_ll_adv_rpa_timeout+0x1a>
                advsm->own_addr_type > BLE_HCI_ADV_OWN_ADDR_RANDOM) {
   1196c:	7903      	ldrb	r3, [r0, #4]
        if (advsm->adv_enabled &&
   1196e:	2b01      	cmp	r3, #1
   11970:	d801      	bhi.n	11976 <ble_ll_adv_rpa_timeout+0x1e>
    for (i = 0; i < BLE_ADV_INSTANCES; i++) {
   11972:	3401      	adds	r4, #1
   11974:	e7f2      	b.n	1195c <ble_ll_adv_rpa_timeout+0x4>
            ble_ll_adv_flags_set(advsm, BLE_LL_ADV_SM_FLAG_ADV_RPA_TMO);
   11976:	f44f 7180 	mov.w	r1, #256	; 0x100
   1197a:	f7ff f997 	bl	10cac <ble_ll_adv_flags_set>
   1197e:	e7f8      	b.n	11972 <ble_ll_adv_rpa_timeout+0x1a>
   11980:	20003dfc 	.word	0x20003dfc

00011984 <ble_ll_adv_event_rmvd_from_sched>:
{
   11984:	b510      	push	{r4, lr}
   11986:	4604      	mov	r4, r0
    advsm->adv_chan = ble_ll_adv_final_chan(advsm);
   11988:	f7ff f983 	bl	10c92 <ble_ll_adv_final_chan>
   1198c:	71a0      	strb	r0, [r4, #6]
   1198e:	f104 0154 	add.w	r1, r4, #84	; 0x54
   11992:	4802      	ldr	r0, [pc, #8]	; (1199c <ble_ll_adv_event_rmvd_from_sched+0x18>)
   11994:	f7fb f991 	bl	ccba <os_eventq_put>
}
   11998:	bd10      	pop	{r4, pc}
   1199a:	bf00      	nop
   1199c:	20003d60 	.word	0x20003d60

000119a0 <ble_ll_adv_halt>:
{
   119a0:	b510      	push	{r4, lr}
    if (g_ble_ll_cur_adv_sm != NULL) {
   119a2:	4b0a      	ldr	r3, [pc, #40]	; (119cc <ble_ll_adv_halt+0x2c>)
   119a4:	681c      	ldr	r4, [r3, #0]
   119a6:	b184      	cbz	r4, 119ca <ble_ll_adv_halt+0x2a>
        ble_phy_txpwr_set(MYNEWT_VAL(BLE_LL_TX_PWR_DBM));
   119a8:	2000      	movs	r0, #0
   119aa:	f008 f959 	bl	19c60 <ble_phy_txpwr_set>
   119ae:	f104 0154 	add.w	r1, r4, #84	; 0x54
   119b2:	4807      	ldr	r0, [pc, #28]	; (119d0 <ble_ll_adv_halt+0x30>)
   119b4:	f7fb f981 	bl	ccba <os_eventq_put>
        ble_ll_state_set(BLE_LL_STATE_STANDBY);
   119b8:	2000      	movs	r0, #0
   119ba:	f7ff f801 	bl	109c0 <ble_ll_state_set>
        ble_ll_adv_active_chanset_clear(g_ble_ll_cur_adv_sm);
   119be:	4c03      	ldr	r4, [pc, #12]	; (119cc <ble_ll_adv_halt+0x2c>)
   119c0:	6820      	ldr	r0, [r4, #0]
   119c2:	f7ff f9c8 	bl	10d56 <ble_ll_adv_active_chanset_clear>
        g_ble_ll_cur_adv_sm = NULL;
   119c6:	2300      	movs	r3, #0
   119c8:	6023      	str	r3, [r4, #0]
}
   119ca:	bd10      	pop	{r4, pc}
   119cc:	20003df8 	.word	0x20003df8
   119d0:	20003d60 	.word	0x20003d60

000119d4 <ble_ll_adv_set_adv_params>:
    if (len != sizeof(*cmd)) {
   119d4:	290f      	cmp	r1, #15
   119d6:	d161      	bne.n	11a9c <ble_ll_adv_set_adv_params+0xc8>
   119d8:	4603      	mov	r3, r0
    if (advsm->adv_enabled) {
   119da:	4a3e      	ldr	r2, [pc, #248]	; (11ad4 <ble_ll_adv_set_adv_params+0x100>)
   119dc:	7812      	ldrb	r2, [r2, #0]
   119de:	2a00      	cmp	r2, #0
   119e0:	d15e      	bne.n	11aa0 <ble_ll_adv_set_adv_params+0xcc>
{
   119e2:	b4f0      	push	{r4, r5, r6, r7}
    adv_itvl_min = le16toh(cmd->min_interval);
   119e4:	8804      	ldrh	r4, [r0, #0]
    adv_itvl_max = le16toh(cmd->max_interval);
   119e6:	8845      	ldrh	r5, [r0, #2]
    adv_filter_policy = cmd->filter_policy;
   119e8:	7b86      	ldrb	r6, [r0, #14]
    switch (cmd->type) {
   119ea:	7901      	ldrb	r1, [r0, #4]
   119ec:	2904      	cmp	r1, #4
   119ee:	d859      	bhi.n	11aa4 <ble_ll_adv_set_adv_params+0xd0>
   119f0:	e8df f001 	tbb	[pc, r1]
   119f4:	1d1b0503 	.word	0x1d1b0503
   119f8:	11          	.byte	0x11
   119f9:	00          	.byte	0x00
        props = BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY_IND;
   119fa:	2213      	movs	r2, #19
   119fc:	e018      	b.n	11a30 <ble_ll_adv_set_adv_params+0x5c>
        memcpy(advsm->peer_addr, cmd->peer_addr, BLE_DEV_ADDR_LEN);
   119fe:	4619      	mov	r1, r3
   11a00:	4c35      	ldr	r4, [pc, #212]	; (11ad8 <ble_ll_adv_set_adv_params+0x104>)
   11a02:	f851 0f07 	ldr.w	r0, [r1, #7]!
   11a06:	6020      	str	r0, [r4, #0]
   11a08:	8889      	ldrh	r1, [r1, #4]
   11a0a:	80a1      	strh	r1, [r4, #4]
        adv_filter_policy = BLE_HCI_ADV_FILT_NONE;
   11a0c:	4616      	mov	r6, r2
        props = BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY_HD_DIR ;
   11a0e:	221d      	movs	r2, #29
        adv_itvl_max = 0;
   11a10:	2500      	movs	r5, #0
        adv_itvl_min = 0;
   11a12:	462c      	mov	r4, r5
        break;
   11a14:	e00c      	b.n	11a30 <ble_ll_adv_set_adv_params+0x5c>
        memcpy(advsm->peer_addr, cmd->peer_addr, BLE_DEV_ADDR_LEN);
   11a16:	4619      	mov	r1, r3
   11a18:	4e2f      	ldr	r6, [pc, #188]	; (11ad8 <ble_ll_adv_set_adv_params+0x104>)
   11a1a:	f851 0f07 	ldr.w	r0, [r1, #7]!
   11a1e:	6030      	str	r0, [r6, #0]
   11a20:	8889      	ldrh	r1, [r1, #4]
   11a22:	80b1      	strh	r1, [r6, #4]
        adv_filter_policy = BLE_HCI_ADV_FILT_NONE;
   11a24:	4616      	mov	r6, r2
        props = BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY_LD_DIR ;
   11a26:	2215      	movs	r2, #21
        break;
   11a28:	e002      	b.n	11a30 <ble_ll_adv_set_adv_params+0x5c>
        props = BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY_SCAN;
   11a2a:	2212      	movs	r2, #18
        break;
   11a2c:	e000      	b.n	11a30 <ble_ll_adv_set_adv_params+0x5c>
        props = BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY_NONCONN;
   11a2e:	2210      	movs	r2, #16
    if (!(props & BLE_HCI_LE_SET_EXT_ADV_PROP_HD_DIRECTED)) {
   11a30:	f012 0f08 	tst.w	r2, #8
   11a34:	d10b      	bne.n	11a4e <ble_ll_adv_set_adv_params+0x7a>
        if ((adv_itvl_min > adv_itvl_max) ||
   11a36:	42ac      	cmp	r4, r5
   11a38:	d836      	bhi.n	11aa8 <ble_ll_adv_set_adv_params+0xd4>
   11a3a:	2c1f      	cmp	r4, #31
   11a3c:	d936      	bls.n	11aac <ble_ll_adv_set_adv_params+0xd8>
                (adv_itvl_min < BLE_HCI_ADV_ITVL_MIN) ||
   11a3e:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
   11a42:	d835      	bhi.n	11ab0 <ble_ll_adv_set_adv_params+0xdc>
                (adv_itvl_min > BLE_HCI_ADV_ITVL_MAX) ||
   11a44:	2d1f      	cmp	r5, #31
   11a46:	d935      	bls.n	11ab4 <ble_ll_adv_set_adv_params+0xe0>
                (adv_itvl_max < BLE_HCI_ADV_ITVL_MIN) ||
   11a48:	f5b5 4f80 	cmp.w	r5, #16384	; 0x4000
   11a4c:	d834      	bhi.n	11ab8 <ble_ll_adv_set_adv_params+0xe4>
    if ((cmd->own_addr_type > BLE_HCI_ADV_OWN_ADDR_MAX) ||
   11a4e:	7959      	ldrb	r1, [r3, #5]
   11a50:	2903      	cmp	r1, #3
   11a52:	d833      	bhi.n	11abc <ble_ll_adv_set_adv_params+0xe8>
        (cmd->peer_addr_type > BLE_HCI_ADV_PEER_ADDR_MAX)) {
   11a54:	7999      	ldrb	r1, [r3, #6]
    if ((cmd->own_addr_type > BLE_HCI_ADV_OWN_ADDR_MAX) ||
   11a56:	2901      	cmp	r1, #1
   11a58:	d833      	bhi.n	11ac2 <ble_ll_adv_set_adv_params+0xee>
    advsm->adv_txpwr = MYNEWT_VAL(BLE_LL_TX_PWR_DBM);
   11a5a:	491e      	ldr	r1, [pc, #120]	; (11ad4 <ble_ll_adv_set_adv_params+0x100>)
   11a5c:	2000      	movs	r0, #0
   11a5e:	7248      	strb	r0, [r1, #9]
    if (cmd->own_addr_type > BLE_HCI_ADV_OWN_ADDR_RANDOM) {
   11a60:	7959      	ldrb	r1, [r3, #5]
   11a62:	2901      	cmp	r1, #1
   11a64:	d812      	bhi.n	11a8c <ble_ll_adv_set_adv_params+0xb8>
    if (((cmd->chan_map & 0xF8) != 0) || (cmd->chan_map == 0)) {
   11a66:	7b59      	ldrb	r1, [r3, #13]
   11a68:	f011 0ff8 	tst.w	r1, #248	; 0xf8
   11a6c:	d12b      	bne.n	11ac6 <ble_ll_adv_set_adv_params+0xf2>
   11a6e:	b361      	cbz	r1, 11aca <ble_ll_adv_set_adv_params+0xf6>
    if (adv_filter_policy > BLE_HCI_ADV_FILT_MAX) {
   11a70:	2e03      	cmp	r6, #3
   11a72:	d82c      	bhi.n	11ace <ble_ll_adv_set_adv_params+0xfa>
    advsm->own_addr_type = cmd->own_addr_type;
   11a74:	795f      	ldrb	r7, [r3, #5]
   11a76:	4817      	ldr	r0, [pc, #92]	; (11ad4 <ble_ll_adv_set_adv_params+0x100>)
   11a78:	7107      	strb	r7, [r0, #4]
    advsm->peer_addr_type = cmd->peer_addr_type;
   11a7a:	799b      	ldrb	r3, [r3, #6]
   11a7c:	7143      	strb	r3, [r0, #5]
    advsm->adv_filter_policy = adv_filter_policy;
   11a7e:	70c6      	strb	r6, [r0, #3]
    advsm->adv_chanmask = cmd->chan_map;
   11a80:	7081      	strb	r1, [r0, #2]
    advsm->adv_itvl_min = adv_itvl_min;
   11a82:	81c4      	strh	r4, [r0, #14]
    advsm->adv_itvl_max = adv_itvl_max;
   11a84:	8205      	strh	r5, [r0, #16]
    advsm->props = props;
   11a86:	8182      	strh	r2, [r0, #12]
    return 0;
   11a88:	2000      	movs	r0, #0
   11a8a:	e018      	b.n	11abe <ble_ll_adv_set_adv_params+0xea>
        memcpy(advsm->peer_addr, cmd->peer_addr, BLE_DEV_ADDR_LEN);
   11a8c:	4619      	mov	r1, r3
   11a8e:	4f12      	ldr	r7, [pc, #72]	; (11ad8 <ble_ll_adv_set_adv_params+0x104>)
   11a90:	f851 0f07 	ldr.w	r0, [r1, #7]!
   11a94:	6038      	str	r0, [r7, #0]
   11a96:	8889      	ldrh	r1, [r1, #4]
   11a98:	80b9      	strh	r1, [r7, #4]
   11a9a:	e7e4      	b.n	11a66 <ble_ll_adv_set_adv_params+0x92>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   11a9c:	2012      	movs	r0, #18
   11a9e:	4770      	bx	lr
        return BLE_ERR_CMD_DISALLOWED;
   11aa0:	200c      	movs	r0, #12
}
   11aa2:	4770      	bx	lr
        return BLE_ERR_INV_HCI_CMD_PARMS;
   11aa4:	2012      	movs	r0, #18
   11aa6:	e00a      	b.n	11abe <ble_ll_adv_set_adv_params+0xea>
            return BLE_ERR_INV_HCI_CMD_PARMS;
   11aa8:	2012      	movs	r0, #18
   11aaa:	e008      	b.n	11abe <ble_ll_adv_set_adv_params+0xea>
   11aac:	2012      	movs	r0, #18
   11aae:	e006      	b.n	11abe <ble_ll_adv_set_adv_params+0xea>
   11ab0:	2012      	movs	r0, #18
   11ab2:	e004      	b.n	11abe <ble_ll_adv_set_adv_params+0xea>
   11ab4:	2012      	movs	r0, #18
   11ab6:	e002      	b.n	11abe <ble_ll_adv_set_adv_params+0xea>
   11ab8:	2012      	movs	r0, #18
   11aba:	e000      	b.n	11abe <ble_ll_adv_set_adv_params+0xea>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   11abc:	2012      	movs	r0, #18
}
   11abe:	bcf0      	pop	{r4, r5, r6, r7}
   11ac0:	4770      	bx	lr
        return BLE_ERR_INV_HCI_CMD_PARMS;
   11ac2:	2012      	movs	r0, #18
   11ac4:	e7fb      	b.n	11abe <ble_ll_adv_set_adv_params+0xea>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   11ac6:	2012      	movs	r0, #18
   11ac8:	e7f9      	b.n	11abe <ble_ll_adv_set_adv_params+0xea>
   11aca:	2012      	movs	r0, #18
   11acc:	e7f7      	b.n	11abe <ble_ll_adv_set_adv_params+0xea>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   11ace:	2012      	movs	r0, #18
   11ad0:	e7f5      	b.n	11abe <ble_ll_adv_set_adv_params+0xea>
   11ad2:	bf00      	nop
   11ad4:	20003dfc 	.word	0x20003dfc
   11ad8:	20003e30 	.word	0x20003e30

00011adc <ble_ll_adv_read_txpwr>:
    rsp->power_level = MYNEWT_VAL(BLE_LL_TX_PWR_DBM);
   11adc:	2300      	movs	r3, #0
   11ade:	7003      	strb	r3, [r0, #0]
    *rsplen = sizeof(*rsp);
   11ae0:	2201      	movs	r2, #1
   11ae2:	700a      	strb	r2, [r1, #0]
}
   11ae4:	4618      	mov	r0, r3
   11ae6:	4770      	bx	lr

00011ae8 <ble_ll_hci_adv_set_enable>:
    if (len != sizeof(*cmd)) {
   11ae8:	2901      	cmp	r1, #1
   11aea:	d001      	beq.n	11af0 <ble_ll_hci_adv_set_enable+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   11aec:	2012      	movs	r0, #18
}
   11aee:	4770      	bx	lr
{
   11af0:	b508      	push	{r3, lr}
    return ble_ll_adv_set_enable(0, cmd->enable, -1, 0);
   11af2:	2300      	movs	r3, #0
   11af4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   11af8:	7801      	ldrb	r1, [r0, #0]
   11afa:	4618      	mov	r0, r3
   11afc:	f7ff fbca 	bl	11294 <ble_ll_adv_set_enable>
}
   11b00:	bd08      	pop	{r3, pc}

00011b02 <ble_ll_hci_set_scan_rsp_data>:
    if ((len != sizeof(*cmd)) || (cmd->scan_rsp_len > sizeof(cmd->scan_rsp))) {
   11b02:	2920      	cmp	r1, #32
   11b04:	d109      	bne.n	11b1a <ble_ll_hci_set_scan_rsp_data+0x18>
   11b06:	7801      	ldrb	r1, [r0, #0]
   11b08:	291f      	cmp	r1, #31
   11b0a:	d808      	bhi.n	11b1e <ble_ll_hci_set_scan_rsp_data+0x1c>
{
   11b0c:	b508      	push	{r3, lr}
    return ble_ll_adv_set_scan_rsp_data(cmd->scan_rsp, cmd->scan_rsp_len, 0,
   11b0e:	2303      	movs	r3, #3
   11b10:	2200      	movs	r2, #0
   11b12:	3001      	adds	r0, #1
   11b14:	f7ff fc09 	bl	1132a <ble_ll_adv_set_scan_rsp_data>
}
   11b18:	bd08      	pop	{r3, pc}
        return BLE_ERR_INV_HCI_CMD_PARMS;
   11b1a:	2012      	movs	r0, #18
   11b1c:	4770      	bx	lr
   11b1e:	2012      	movs	r0, #18
}
   11b20:	4770      	bx	lr

00011b22 <ble_ll_hci_set_adv_data>:
    if ((len != sizeof(*cmd)) || (cmd->adv_data_len > sizeof(cmd->adv_data))) {
   11b22:	2920      	cmp	r1, #32
   11b24:	d109      	bne.n	11b3a <ble_ll_hci_set_adv_data+0x18>
   11b26:	7801      	ldrb	r1, [r0, #0]
   11b28:	291f      	cmp	r1, #31
   11b2a:	d808      	bhi.n	11b3e <ble_ll_hci_set_adv_data+0x1c>
{
   11b2c:	b508      	push	{r3, lr}
    return ble_ll_adv_set_adv_data(cmd->adv_data, cmd->adv_data_len, 0,
   11b2e:	2303      	movs	r3, #3
   11b30:	2200      	movs	r2, #0
   11b32:	3001      	adds	r0, #1
   11b34:	f7ff fc51 	bl	113da <ble_ll_adv_set_adv_data>
}
   11b38:	bd08      	pop	{r3, pc}
        return BLE_ERR_INV_HCI_CMD_PARMS;
   11b3a:	2012      	movs	r0, #18
   11b3c:	4770      	bx	lr
   11b3e:	2012      	movs	r0, #18
}
   11b40:	4770      	bx	lr
	...

00011b44 <ble_ll_adv_rx_isr_end>:
{
   11b44:	b510      	push	{r4, lr}
    if (rxpdu == NULL) {
   11b46:	b141      	cbz	r1, 11b5a <ble_ll_adv_rx_isr_end+0x16>
   11b48:	460b      	mov	r3, r1
        if (crcok) {
   11b4a:	b19a      	cbz	r2, 11b74 <ble_ll_adv_rx_isr_end+0x30>
            if ((pdu_type == BLE_ADV_PDU_TYPE_SCAN_REQ) ||
   11b4c:	2803      	cmp	r0, #3
   11b4e:	d00b      	beq.n	11b68 <ble_ll_adv_rx_isr_end+0x24>
   11b50:	2805      	cmp	r0, #5
   11b52:	d009      	beq.n	11b68 <ble_ll_adv_rx_isr_end+0x24>
    rc = -1;
   11b54:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   11b58:	e00e      	b.n	11b78 <ble_ll_adv_rx_isr_end+0x34>
        ble_ll_adv_tx_done(g_ble_ll_cur_adv_sm);
   11b5a:	4b0c      	ldr	r3, [pc, #48]	; (11b8c <ble_ll_adv_rx_isr_end+0x48>)
   11b5c:	6818      	ldr	r0, [r3, #0]
   11b5e:	f7ff f905 	bl	10d6c <ble_ll_adv_tx_done>
    rc = -1;
   11b62:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   11b66:	e00b      	b.n	11b80 <ble_ll_adv_rx_isr_end+0x3c>
                rc = ble_ll_adv_rx_req(pdu_type, rxpdu);
   11b68:	4619      	mov	r1, r3
   11b6a:	f7ff fcc1 	bl	114f0 <ble_ll_adv_rx_req>
        if (rc) {
   11b6e:	4604      	mov	r4, r0
   11b70:	b128      	cbz	r0, 11b7e <ble_ll_adv_rx_isr_end+0x3a>
   11b72:	e001      	b.n	11b78 <ble_ll_adv_rx_isr_end+0x34>
    rc = -1;
   11b74:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
            g_ble_ll_cur_adv_sm = NULL;
   11b78:	4b04      	ldr	r3, [pc, #16]	; (11b8c <ble_ll_adv_rx_isr_end+0x48>)
   11b7a:	2200      	movs	r2, #0
   11b7c:	601a      	str	r2, [r3, #0]
    if (rc) {
   11b7e:	b114      	cbz	r4, 11b86 <ble_ll_adv_rx_isr_end+0x42>
        ble_ll_state_set(BLE_LL_STATE_STANDBY);
   11b80:	2000      	movs	r0, #0
   11b82:	f7fe ff1d 	bl	109c0 <ble_ll_state_set>
}
   11b86:	4620      	mov	r0, r4
   11b88:	bd10      	pop	{r4, pc}
   11b8a:	bf00      	nop
   11b8c:	20003df8 	.word	0x20003df8

00011b90 <ble_ll_adv_rx_pkt_in>:
    if (!advsm->adv_enabled) {
   11b90:	4b0f      	ldr	r3, [pc, #60]	; (11bd0 <ble_ll_adv_rx_pkt_in+0x40>)
   11b92:	781b      	ldrb	r3, [r3, #0]
   11b94:	b1db      	cbz	r3, 11bce <ble_ll_adv_rx_pkt_in+0x3e>
{
   11b96:	b510      	push	{r4, lr}
   11b98:	4614      	mov	r4, r2
   11b9a:	460b      	mov	r3, r1
    if (BLE_MBUF_HDR_CRC_OK(hdr)) {
   11b9c:	8812      	ldrh	r2, [r2, #0]
   11b9e:	f012 0f80 	tst.w	r2, #128	; 0x80
   11ba2:	d003      	beq.n	11bac <ble_ll_adv_rx_pkt_in+0x1c>
        if (ptype == BLE_ADV_PDU_TYPE_CONNECT_IND) {
   11ba4:	2805      	cmp	r0, #5
   11ba6:	d006      	beq.n	11bb6 <ble_ll_adv_rx_pkt_in+0x26>
            if ((ptype == BLE_ADV_PDU_TYPE_SCAN_REQ) &&
   11ba8:	2803      	cmp	r0, #3
   11baa:	d00c      	beq.n	11bc6 <ble_ll_adv_rx_pkt_in+0x36>
        ble_ll_adv_make_done(advsm, hdr);
   11bac:	4621      	mov	r1, r4
   11bae:	4808      	ldr	r0, [pc, #32]	; (11bd0 <ble_ll_adv_rx_pkt_in+0x40>)
   11bb0:	f7ff fec4 	bl	1193c <ble_ll_adv_make_done>
}
   11bb4:	bd10      	pop	{r4, pc}
            if (ble_ll_adv_conn_req_rxd(rxbuf, hdr, advsm)) {
   11bb6:	4a06      	ldr	r2, [pc, #24]	; (11bd0 <ble_ll_adv_rx_pkt_in+0x40>)
   11bb8:	4621      	mov	r1, r4
   11bba:	4618      	mov	r0, r3
   11bbc:	f7ff fd46 	bl	1164c <ble_ll_adv_conn_req_rxd>
   11bc0:	2800      	cmp	r0, #0
   11bc2:	d0f3      	beq.n	11bac <ble_ll_adv_rx_pkt_in+0x1c>
   11bc4:	e7f6      	b.n	11bb4 <ble_ll_adv_rx_pkt_in+0x24>
            if ((ptype == BLE_ADV_PDU_TYPE_SCAN_REQ) &&
   11bc6:	f012 0f10 	tst.w	r2, #16
   11bca:	d0ef      	beq.n	11bac <ble_ll_adv_rx_pkt_in+0x1c>
   11bcc:	e7f2      	b.n	11bb4 <ble_ll_adv_rx_pkt_in+0x24>
   11bce:	4770      	bx	lr
   11bd0:	20003dfc 	.word	0x20003dfc

00011bd4 <ble_ll_adv_rx_isr_start>:
{
   11bd4:	b508      	push	{r3, lr}
    advsm = g_ble_ll_cur_adv_sm;
   11bd6:	4b0e      	ldr	r3, [pc, #56]	; (11c10 <ble_ll_adv_rx_isr_start+0x3c>)
   11bd8:	681a      	ldr	r2, [r3, #0]
    if (pdu_type == BLE_ADV_PDU_TYPE_SCAN_REQ) {
   11bda:	2803      	cmp	r0, #3
   11bdc:	d00b      	beq.n	11bf6 <ble_ll_adv_rx_isr_start+0x22>
        if (pdu_type == BLE_ADV_PDU_TYPE_CONNECT_IND) {
   11bde:	2805      	cmp	r0, #5
   11be0:	d10f      	bne.n	11c02 <ble_ll_adv_rx_isr_start+0x2e>
            if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_CONNECTABLE) {
   11be2:	8993      	ldrh	r3, [r2, #12]
   11be4:	f013 0f01 	tst.w	r3, #1
   11be8:	d00b      	beq.n	11c02 <ble_ll_adv_rx_isr_start+0x2e>
                rc = !(advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY);
   11bea:	0918      	lsrs	r0, r3, #4
   11bec:	f080 0001 	eor.w	r0, r0, #1
   11bf0:	f000 0001 	and.w	r0, r0, #1
}
   11bf4:	bd08      	pop	{r3, pc}
        if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_SCANNABLE) {
   11bf6:	8993      	ldrh	r3, [r2, #12]
   11bf8:	f013 0f02 	tst.w	r3, #2
   11bfc:	d001      	beq.n	11c02 <ble_ll_adv_rx_isr_start+0x2e>
            rc = 1;
   11bfe:	2001      	movs	r0, #1
    return rc;
   11c00:	e7f8      	b.n	11bf4 <ble_ll_adv_rx_isr_start+0x20>
        ble_ll_adv_tx_done(advsm);
   11c02:	4610      	mov	r0, r2
   11c04:	f7ff f8b2 	bl	10d6c <ble_ll_adv_tx_done>
   11c08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   11c0c:	e7f2      	b.n	11bf4 <ble_ll_adv_rx_isr_start+0x20>
   11c0e:	bf00      	nop
   11c10:	20003df8 	.word	0x20003df8

00011c14 <ble_ll_adv_can_chg_whitelist>:
    for (i = 0; i < BLE_ADV_INSTANCES; ++i) {
   11c14:	2300      	movs	r3, #0
   11c16:	2b00      	cmp	r3, #0
   11c18:	dd01      	ble.n	11c1e <ble_ll_adv_can_chg_whitelist+0xa>
    rc = 1;
   11c1a:	2001      	movs	r0, #1
   11c1c:	4770      	bx	lr
        if (advsm->adv_enabled &&
   11c1e:	01da      	lsls	r2, r3, #7
   11c20:	4905      	ldr	r1, [pc, #20]	; (11c38 <ble_ll_adv_can_chg_whitelist+0x24>)
   11c22:	5c8a      	ldrb	r2, [r1, r2]
   11c24:	b11a      	cbz	r2, 11c2e <ble_ll_adv_can_chg_whitelist+0x1a>
            (advsm->adv_filter_policy != BLE_HCI_ADV_FILT_NONE)) {
   11c26:	eb01 12c3 	add.w	r2, r1, r3, lsl #7
   11c2a:	78d2      	ldrb	r2, [r2, #3]
        if (advsm->adv_enabled &&
   11c2c:	b90a      	cbnz	r2, 11c32 <ble_ll_adv_can_chg_whitelist+0x1e>
    for (i = 0; i < BLE_ADV_INSTANCES; ++i) {
   11c2e:	3301      	adds	r3, #1
   11c30:	e7f1      	b.n	11c16 <ble_ll_adv_can_chg_whitelist+0x2>
            rc = 0;
   11c32:	2000      	movs	r0, #0
}
   11c34:	4770      	bx	lr
   11c36:	bf00      	nop
   11c38:	20003dfc 	.word	0x20003dfc

00011c3c <ble_ll_adv_send_conn_comp_ev>:
{
   11c3c:	b508      	push	{r3, lr}
    evbuf = advsm->conn_comp_ev;
   11c3e:	4b09      	ldr	r3, [pc, #36]	; (11c64 <ble_ll_adv_send_conn_comp_ev+0x28>)
   11c40:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    assert(evbuf != NULL);
   11c42:	b12a      	cbz	r2, 11c50 <ble_ll_adv_send_conn_comp_ev+0x14>
    advsm->conn_comp_ev = NULL;
   11c44:	4b07      	ldr	r3, [pc, #28]	; (11c64 <ble_ll_adv_send_conn_comp_ev+0x28>)
   11c46:	2100      	movs	r1, #0
   11c48:	6519      	str	r1, [r3, #80]	; 0x50
    ble_ll_conn_comp_event_send(connsm, BLE_ERR_SUCCESS, evbuf, advsm);
   11c4a:	f002 f9c7 	bl	13fdc <ble_ll_conn_comp_event_send>
}
   11c4e:	bd08      	pop	{r3, pc}
    assert(evbuf != NULL);
   11c50:	f7fa faca 	bl	c1e8 <hal_debugger_connected>
   11c54:	b100      	cbz	r0, 11c58 <ble_ll_adv_send_conn_comp_ev+0x1c>
   11c56:	be01      	bkpt	0x0001
   11c58:	2300      	movs	r3, #0
   11c5a:	461a      	mov	r2, r3
   11c5c:	4619      	mov	r1, r3
   11c5e:	4618      	mov	r0, r3
   11c60:	f7fa fcfc 	bl	c65c <__assert_func>
   11c64:	20003dfc 	.word	0x20003dfc

00011c68 <ble_ll_adv_get_local_rpa>:
{
   11c68:	b510      	push	{r4, lr}
    if (advsm->own_addr_type > BLE_HCI_ADV_OWN_ADDR_RANDOM) {
   11c6a:	7903      	ldrb	r3, [r0, #4]
   11c6c:	2b01      	cmp	r3, #1
   11c6e:	d90e      	bls.n	11c8e <ble_ll_adv_get_local_rpa+0x26>
        if ((advsm->flags & BLE_LL_ADV_SM_FLAG_TX_ADD) &&
   11c70:	8943      	ldrh	r3, [r0, #10]
   11c72:	f013 0f01 	tst.w	r3, #1
   11c76:	d00c      	beq.n	11c92 <ble_ll_adv_get_local_rpa+0x2a>
                                    ble_ll_is_rpa(advsm->adva, 1)) {
   11c78:	f100 0428 	add.w	r4, r0, #40	; 0x28
   11c7c:	2101      	movs	r1, #1
   11c7e:	4620      	mov	r0, r4
   11c80:	f7fe fcc9 	bl	10616 <ble_ll_is_rpa>
        if ((advsm->flags & BLE_LL_ADV_SM_FLAG_TX_ADD) &&
   11c84:	b108      	cbz	r0, 11c8a <ble_ll_adv_get_local_rpa+0x22>
}
   11c86:	4620      	mov	r0, r4
   11c88:	bd10      	pop	{r4, pc}
    uint8_t *rpa = NULL;
   11c8a:	2400      	movs	r4, #0
   11c8c:	e7fb      	b.n	11c86 <ble_ll_adv_get_local_rpa+0x1e>
   11c8e:	2400      	movs	r4, #0
   11c90:	e7f9      	b.n	11c86 <ble_ll_adv_get_local_rpa+0x1e>
   11c92:	2400      	movs	r4, #0
    return rpa;
   11c94:	e7f7      	b.n	11c86 <ble_ll_adv_get_local_rpa+0x1e>

00011c96 <ble_ll_adv_get_peer_rpa>:
}
   11c96:	302e      	adds	r0, #46	; 0x2e
   11c98:	4770      	bx	lr
	...

00011c9c <ble_ll_adv_wfr_timer_exp>:
{
   11c9c:	b508      	push	{r3, lr}
    ble_phy_disable();
   11c9e:	f008 f819 	bl	19cd4 <ble_phy_disable>
    ble_ll_adv_tx_done(g_ble_ll_cur_adv_sm);
   11ca2:	4b02      	ldr	r3, [pc, #8]	; (11cac <ble_ll_adv_wfr_timer_exp+0x10>)
   11ca4:	6818      	ldr	r0, [r3, #0]
   11ca6:	f7ff f861 	bl	10d6c <ble_ll_adv_tx_done>
}
   11caa:	bd08      	pop	{r3, pc}
   11cac:	20003df8 	.word	0x20003df8

00011cb0 <ble_ll_adv_reset>:
{
   11cb0:	b538      	push	{r3, r4, r5, lr}
    for (i = 0; i < BLE_ADV_INSTANCES; ++i) {
   11cb2:	2500      	movs	r5, #0
   11cb4:	2d00      	cmp	r5, #0
   11cb6:	dd00      	ble.n	11cba <ble_ll_adv_reset+0xa>
}
   11cb8:	bd38      	pop	{r3, r4, r5, pc}
        advsm = &g_ble_ll_adv_sm[i];
   11cba:	4c08      	ldr	r4, [pc, #32]	; (11cdc <ble_ll_adv_reset+0x2c>)
   11cbc:	eb04 14c5 	add.w	r4, r4, r5, lsl #7
        ble_ll_adv_sm_stop(advsm);
   11cc0:	4620      	mov	r0, r4
   11cc2:	f7ff faaf 	bl	11224 <ble_ll_adv_sm_stop>
        os_mbuf_free_chain(advsm->adv_data);
   11cc6:	6c20      	ldr	r0, [r4, #64]	; 0x40
   11cc8:	f7fb fea5 	bl	da16 <os_mbuf_free_chain>
        os_mbuf_free_chain(advsm->scan_rsp_data);
   11ccc:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   11cce:	f7fb fea2 	bl	da16 <os_mbuf_free_chain>
        ble_ll_adv_sm_init(advsm);
   11cd2:	4620      	mov	r0, r4
   11cd4:	f7ff fd7e 	bl	117d4 <ble_ll_adv_sm_init>
    for (i = 0; i < BLE_ADV_INSTANCES; ++i) {
   11cd8:	3501      	adds	r5, #1
   11cda:	e7eb      	b.n	11cb4 <ble_ll_adv_reset+0x4>
   11cdc:	20003dfc 	.word	0x20003dfc

00011ce0 <ble_ll_adv_enabled>:
    for (i = 0; i < BLE_ADV_INSTANCES; i++) {
   11ce0:	2300      	movs	r3, #0
   11ce2:	2b00      	cmp	r3, #0
   11ce4:	dd01      	ble.n	11cea <ble_ll_adv_enabled+0xa>
    return 0;
   11ce6:	2000      	movs	r0, #0
   11ce8:	4770      	bx	lr
        if (g_ble_ll_adv_sm[i].adv_enabled) {
   11cea:	01da      	lsls	r2, r3, #7
   11cec:	4903      	ldr	r1, [pc, #12]	; (11cfc <ble_ll_adv_enabled+0x1c>)
   11cee:	5c8a      	ldrb	r2, [r1, r2]
   11cf0:	b90a      	cbnz	r2, 11cf6 <ble_ll_adv_enabled+0x16>
    for (i = 0; i < BLE_ADV_INSTANCES; i++) {
   11cf2:	3301      	adds	r3, #1
   11cf4:	e7f5      	b.n	11ce2 <ble_ll_adv_enabled+0x2>
            return 1;
   11cf6:	2001      	movs	r0, #1
}
   11cf8:	4770      	bx	lr
   11cfa:	bf00      	nop
   11cfc:	20003dfc 	.word	0x20003dfc

00011d00 <ble_ll_adv_init>:
 * Initialize the advertising functionality of a BLE device. This should
 * be called once on initialization
 */
void
ble_ll_adv_init(void)
{
   11d00:	b510      	push	{r4, lr}
    int i;

    /* Set default advertising parameters */
    for (i = 0; i < BLE_ADV_INSTANCES; ++i) {
   11d02:	2400      	movs	r4, #0
   11d04:	2c00      	cmp	r4, #0
   11d06:	dd00      	ble.n	11d0a <ble_ll_adv_init+0xa>
        ble_ll_adv_sm_init(&g_ble_ll_adv_sm[i]);
    }
}
   11d08:	bd10      	pop	{r4, pc}
        ble_ll_adv_sm_init(&g_ble_ll_adv_sm[i]);
   11d0a:	4803      	ldr	r0, [pc, #12]	; (11d18 <ble_ll_adv_init+0x18>)
   11d0c:	eb00 10c4 	add.w	r0, r0, r4, lsl #7
   11d10:	f7ff fd60 	bl	117d4 <ble_ll_adv_sm_init>
    for (i = 0; i < BLE_ADV_INSTANCES; ++i) {
   11d14:	3401      	adds	r4, #1
   11d16:	e7f5      	b.n	11d04 <ble_ll_adv_init+0x4>
   11d18:	20003dfc 	.word	0x20003dfc

00011d1c <ble_ll_conn_is_empty_pdu>:
ble_ll_conn_is_empty_pdu(uint8_t *rxbuf)
{
    int rc;
    uint8_t llid;

    llid = rxbuf[0] & BLE_LL_DATA_HDR_LLID_MASK;
   11d1c:	7803      	ldrb	r3, [r0, #0]
   11d1e:	f003 0303 	and.w	r3, r3, #3
    if ((llid == BLE_LL_LLID_DATA_FRAG) && (rxbuf[1] == 0)) {
   11d22:	2b01      	cmp	r3, #1
   11d24:	d001      	beq.n	11d2a <ble_ll_conn_is_empty_pdu+0xe>
        rc = 1;
    } else {
        rc = 0;
   11d26:	2000      	movs	r0, #0
   11d28:	4770      	bx	lr
    if ((llid == BLE_LL_LLID_DATA_FRAG) && (rxbuf[1] == 0)) {
   11d2a:	7843      	ldrb	r3, [r0, #1]
   11d2c:	b10b      	cbz	r3, 11d32 <ble_ll_conn_is_empty_pdu+0x16>
        rc = 0;
   11d2e:	2000      	movs	r0, #0
   11d30:	4770      	bx	lr
        rc = 1;
   11d32:	2001      	movs	r0, #1
    }
    return rc;
}
   11d34:	4770      	bx	lr

00011d36 <ble_ll_conn_calc_dci_csa1>:
    return connsm;
}

static uint8_t
ble_ll_conn_calc_dci_csa1(struct ble_ll_conn_sm *conn)
{
   11d36:	b508      	push	{r3, lr}
   11d38:	4601      	mov	r1, r0
    uint8_t curchan;
    uint8_t remap_index;
    uint8_t bitpos;

    /* Get next unmapped channel */
    curchan = conn->last_unmapped_chan + conn->hop_inc;
   11d3a:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
   11d3e:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
   11d42:	4403      	add	r3, r0
   11d44:	b2d8      	uxtb	r0, r3
    if (curchan > BLE_PHY_NUM_DATA_CHANS) {
   11d46:	2825      	cmp	r0, #37	; 0x25
   11d48:	d902      	bls.n	11d50 <ble_ll_conn_calc_dci_csa1+0x1a>
        curchan -= BLE_PHY_NUM_DATA_CHANS;
   11d4a:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
   11d4e:	b2d8      	uxtb	r0, r3
    }

    /* Save unmapped channel */
    conn->last_unmapped_chan = curchan;
   11d50:	f881 0030 	strb.w	r0, [r1, #48]	; 0x30

    /* Is this a valid channel? */
    bitpos = 1 << (curchan & 0x07);
   11d54:	f000 0207 	and.w	r2, r0, #7
   11d58:	2301      	movs	r3, #1
   11d5a:	4093      	lsls	r3, r2
    if (conn->chanmap[curchan >> 3] & bitpos) {
   11d5c:	f3c0 02c7 	ubfx	r2, r0, #3, #8
   11d60:	440a      	add	r2, r1
   11d62:	f892 2020 	ldrb.w	r2, [r2, #32]
   11d66:	4213      	tst	r3, r2
   11d68:	d000      	beq.n	11d6c <ble_ll_conn_calc_dci_csa1+0x36>

    /* Calculate remap index */
    remap_index = curchan % conn->num_used_chans;

    return ble_ll_utils_remapped_channel(remap_index, conn->chanmap);
}
   11d6a:	bd08      	pop	{r3, pc}
    remap_index = curchan % conn->num_used_chans;
   11d6c:	f891 2031 	ldrb.w	r2, [r1, #49]	; 0x31
   11d70:	fbb0 f3f2 	udiv	r3, r0, r2
   11d74:	fb02 0013 	mls	r0, r2, r3, r0
    return ble_ll_utils_remapped_channel(remap_index, conn->chanmap);
   11d78:	3120      	adds	r1, #32
   11d7a:	b2c0      	uxtb	r0, r0
   11d7c:	f007 f946 	bl	1900c <ble_ll_utils_remapped_channel>
   11d80:	e7f3      	b.n	11d6a <ble_ll_conn_calc_dci_csa1+0x34>
	...

00011d84 <ble_ll_conn_halt>:
{
   11d84:	b508      	push	{r3, lr}
    ble_phy_disable();
   11d86:	f007 ffa5 	bl	19cd4 <ble_phy_disable>
    ble_ll_state_set(BLE_LL_STATE_STANDBY);
   11d8a:	2000      	movs	r0, #0
   11d8c:	f7fe fe18 	bl	109c0 <ble_ll_state_set>
    g_ble_ll_conn_cur_sm = NULL;
   11d90:	4b01      	ldr	r3, [pc, #4]	; (11d98 <ble_ll_conn_halt+0x14>)
   11d92:	2200      	movs	r2, #0
   11d94:	601a      	str	r2, [r3, #0]
}
   11d96:	bd08      	pop	{r3, pc}
   11d98:	20003e98 	.word	0x20003e98

00011d9c <ble_ll_conn_current_sm_over>:
{
   11d9c:	b510      	push	{r4, lr}
   11d9e:	4604      	mov	r4, r0
    ble_ll_conn_halt();
   11da0:	f7ff fff0 	bl	11d84 <ble_ll_conn_halt>
    if (connsm) {
   11da4:	b11c      	cbz	r4, 11dae <ble_ll_conn_current_sm_over+0x12>
        ble_ll_event_send(&connsm->conn_ev_end);
   11da6:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   11daa:	f7fe fe15 	bl	109d8 <ble_ll_event_send>
}
   11dae:	bd10      	pop	{r4, pc}

00011db0 <ble_ll_conn_rxend_unencrypt>:
    ble_ll_conn_current_sm_over(connsm);
}

static void
ble_ll_conn_rxend_unencrypt(void *arg)
{
   11db0:	b508      	push	{r3, lr}
    struct ble_ll_conn_sm *connsm;

    connsm = (struct ble_ll_conn_sm *)arg;
    CONN_F_ENCRYPTED(connsm) = 0;
   11db2:	7882      	ldrb	r2, [r0, #2]
   11db4:	f36f 0241 	bfc	r2, #1, #1
   11db8:	7082      	strb	r2, [r0, #2]
    ble_ll_conn_current_sm_over(connsm);
   11dba:	f7ff ffef 	bl	11d9c <ble_ll_conn_current_sm_over>
}
   11dbe:	bd08      	pop	{r3, pc}

00011dc0 <ble_ll_conn_txend_encrypt>:
{
   11dc0:	b508      	push	{r3, lr}
    CONN_F_ENCRYPTED(connsm) = 1;
   11dc2:	7883      	ldrb	r3, [r0, #2]
   11dc4:	f043 0302 	orr.w	r3, r3, #2
   11dc8:	7083      	strb	r3, [r0, #2]
    ble_ll_conn_current_sm_over(connsm);
   11dca:	f7ff ffe7 	bl	11d9c <ble_ll_conn_current_sm_over>
}
   11dce:	bd08      	pop	{r3, pc}

00011dd0 <ble_ll_conn_wait_txend>:
{
   11dd0:	b508      	push	{r3, lr}
    ble_ll_conn_current_sm_over(connsm);
   11dd2:	f7ff ffe3 	bl	11d9c <ble_ll_conn_current_sm_over>
}
   11dd6:	bd08      	pop	{r3, pc}

00011dd8 <ble_ll_conn_connect_ind_txend_to_init>:
    ble_ll_state_set(BLE_LL_STATE_STANDBY);
}

static void
ble_ll_conn_connect_ind_txend_to_init(void *arg)
{
   11dd8:	b508      	push	{r3, lr}
    ble_ll_state_set(BLE_LL_STATE_INITIATING);
   11dda:	2003      	movs	r0, #3
   11ddc:	f7fe fdf0 	bl	109c0 <ble_ll_state_set>
}
   11de0:	bd08      	pop	{r3, pc}

00011de2 <ble_ll_conn_connect_ind_txend_to_standby>:
{
   11de2:	b508      	push	{r3, lr}
    ble_ll_state_set(BLE_LL_STATE_STANDBY);
   11de4:	2000      	movs	r0, #0
   11de6:	f7fe fdeb 	bl	109c0 <ble_ll_state_set>
}
   11dea:	bd08      	pop	{r3, pc}

00011dec <ble_ll_init_get_conn_comp_ev>:
{
   11dec:	b508      	push	{r3, lr}
    evbuf = g_ble_ll_conn_comp_ev;
   11dee:	4b08      	ldr	r3, [pc, #32]	; (11e10 <ble_ll_init_get_conn_comp_ev+0x24>)
   11df0:	6818      	ldr	r0, [r3, #0]
    BLE_LL_ASSERT(evbuf != NULL);
   11df2:	b118      	cbz	r0, 11dfc <ble_ll_init_get_conn_comp_ev+0x10>
    g_ble_ll_conn_comp_ev = NULL;
   11df4:	4b06      	ldr	r3, [pc, #24]	; (11e10 <ble_ll_init_get_conn_comp_ev+0x24>)
   11df6:	2200      	movs	r2, #0
   11df8:	601a      	str	r2, [r3, #0]
}
   11dfa:	bd08      	pop	{r3, pc}
    BLE_LL_ASSERT(evbuf != NULL);
   11dfc:	f7fa f9f4 	bl	c1e8 <hal_debugger_connected>
   11e00:	b100      	cbz	r0, 11e04 <ble_ll_init_get_conn_comp_ev+0x18>
   11e02:	be01      	bkpt	0x0001
   11e04:	2300      	movs	r3, #0
   11e06:	461a      	mov	r2, r3
   11e08:	4619      	mov	r1, r3
   11e0a:	4618      	mov	r0, r3
   11e0c:	f7fa fc26 	bl	c65c <__assert_func>
   11e10:	20003e9c 	.word	0x20003e9c

00011e14 <ble_ll_conn_start_rx_encrypt>:
{
   11e14:	b500      	push	{lr}
   11e16:	b083      	sub	sp, #12
   11e18:	4602      	mov	r2, r0
    CONN_F_ENCRYPTED(connsm) = 1;
   11e1a:	7883      	ldrb	r3, [r0, #2]
   11e1c:	f043 0302 	orr.w	r3, r3, #2
   11e20:	7083      	strb	r3, [r0, #2]
    ble_phy_encrypt_enable(connsm->enc_data.rx_pkt_cntr,
   11e22:	f8d0 0120 	ldr.w	r0, [r0, #288]	; 0x120
                           !CONN_IS_MASTER(connsm));
   11e26:	79d3      	ldrb	r3, [r2, #7]
    ble_phy_encrypt_enable(connsm->enc_data.rx_pkt_cntr,
   11e28:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
   11e2c:	bf18      	it	ne
   11e2e:	2301      	movne	r3, #1
   11e30:	9300      	str	r3, [sp, #0]
   11e32:	f502 73ac 	add.w	r3, r2, #344	; 0x158
   11e36:	f502 7298 	add.w	r2, r2, #304	; 0x130
   11e3a:	2100      	movs	r1, #0
   11e3c:	f007 fe9c 	bl	19b78 <ble_phy_encrypt_enable>
}
   11e40:	b003      	add	sp, #12
   11e42:	f85d fb04 	ldr.w	pc, [sp], #4

00011e46 <ble_ll_conn_start_rx_unencrypt>:
{
   11e46:	b508      	push	{r3, lr}
    CONN_F_ENCRYPTED(connsm) = 0;
   11e48:	7883      	ldrb	r3, [r0, #2]
   11e4a:	f36f 0341 	bfc	r3, #1, #1
   11e4e:	7083      	strb	r3, [r0, #2]
    ble_phy_encrypt_disable();
   11e50:	f007 fec2 	bl	19bd8 <ble_phy_encrypt_disable>
}
   11e54:	bd08      	pop	{r3, pc}

00011e56 <ble_ll_conn_continue_rx_encrypt>:
{
   11e56:	b508      	push	{r3, lr}
                                 !CONN_IS_MASTER(connsm));
   11e58:	79c2      	ldrb	r2, [r0, #7]
    ble_phy_encrypt_set_pkt_cntr(connsm->enc_data.rx_pkt_cntr,
   11e5a:	f112 32ff 	adds.w	r2, r2, #4294967295	; 0xffffffff
   11e5e:	bf18      	it	ne
   11e60:	2201      	movne	r2, #1
   11e62:	f8d0 0120 	ldr.w	r0, [r0, #288]	; 0x120
   11e66:	2100      	movs	r1, #0
   11e68:	f007 feae 	bl	19bc8 <ble_phy_encrypt_set_pkt_cntr>
}
   11e6c:	bd08      	pop	{r3, pc}

00011e6e <ble_ll_conn_adjust_pyld_len>:
{
   11e6e:	b538      	push	{r3, r4, r5, lr}
   11e70:	4604      	mov	r4, r0
   11e72:	460d      	mov	r5, r1
    phy_max_tx_octets = ble_ll_pdu_max_tx_octets_get(connsm->eff_max_tx_time,
   11e74:	2101      	movs	r1, #1
   11e76:	8b00      	ldrh	r0, [r0, #24]
   11e78:	f7fe fe04 	bl	10a84 <ble_ll_pdu_max_tx_octets_get>
    if (ret > connsm->eff_max_tx_octets) {
   11e7c:	7ba3      	ldrb	r3, [r4, #14]
   11e7e:	42ab      	cmp	r3, r5
   11e80:	d300      	bcc.n	11e84 <ble_ll_conn_adjust_pyld_len+0x16>
    ret = pyld_len;
   11e82:	462b      	mov	r3, r5
    if (ret > phy_max_tx_octets) {
   11e84:	4283      	cmp	r3, r0
   11e86:	d900      	bls.n	11e8a <ble_ll_conn_adjust_pyld_len+0x1c>
}
   11e88:	bd38      	pop	{r3, r4, r5, pc}
    if (ret > phy_max_tx_octets) {
   11e8a:	4618      	mov	r0, r3
   11e8c:	e7fc      	b.n	11e88 <ble_ll_conn_adjust_pyld_len+0x1a>

00011e8e <ble_ll_update_max_tx_octets_phy_mode>:
{
   11e8e:	b538      	push	{r3, r4, r5, lr}
   11e90:	4604      	mov	r4, r0
    usecs = connsm->eff_max_tx_time;
   11e92:	8b05      	ldrh	r5, [r0, #24]
            ble_ll_pdu_max_tx_octets_get(usecs, BLE_PHY_MODE_1M);
   11e94:	2101      	movs	r1, #1
   11e96:	4628      	mov	r0, r5
   11e98:	f7fe fdf4 	bl	10a84 <ble_ll_pdu_max_tx_octets_get>
    connsm->max_tx_octets_phy_mode[BLE_PHY_MODE_1M] =
   11e9c:	7760      	strb	r0, [r4, #29]
            ble_ll_pdu_max_tx_octets_get(usecs, BLE_PHY_MODE_2M);
   11e9e:	2102      	movs	r1, #2
   11ea0:	4628      	mov	r0, r5
   11ea2:	f7fe fdef 	bl	10a84 <ble_ll_pdu_max_tx_octets_get>
    connsm->max_tx_octets_phy_mode[BLE_PHY_MODE_2M] =
   11ea6:	77a0      	strb	r0, [r4, #30]
            ble_ll_pdu_max_tx_octets_get(usecs, BLE_PHY_MODE_CODED_125KBPS);
   11ea8:	2103      	movs	r1, #3
   11eaa:	4628      	mov	r0, r5
   11eac:	f7fe fdea 	bl	10a84 <ble_ll_pdu_max_tx_octets_get>
    connsm->max_tx_octets_phy_mode[BLE_PHY_MODE_CODED_125KBPS] =
   11eb0:	77e0      	strb	r0, [r4, #31]
            ble_ll_pdu_max_tx_octets_get(usecs, BLE_PHY_MODE_CODED_500KBPS);
   11eb2:	2100      	movs	r1, #0
   11eb4:	4628      	mov	r0, r5
   11eb6:	f7fe fde5 	bl	10a84 <ble_ll_pdu_max_tx_octets_get>
    connsm->max_tx_octets_phy_mode[BLE_PHY_MODE_CODED_500KBPS] =
   11eba:	7720      	strb	r0, [r4, #28]
}
   11ebc:	bd38      	pop	{r3, r4, r5, pc}
	...

00011ec0 <ble_ll_conn_get_next_sched_time>:
{
   11ec0:	b510      	push	{r4, lr}
   11ec2:	b082      	sub	sp, #8
    ce_end = connsm->anchor_point + connsm->conn_itvl_ticks -
   11ec4:	6f44      	ldr	r4, [r0, #116]	; 0x74
   11ec6:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
   11ec8:	441c      	add	r4, r3
   11eca:	4b0c      	ldr	r3, [pc, #48]	; (11efc <ble_ll_conn_get_next_sched_time+0x3c>)
   11ecc:	781b      	ldrb	r3, [r3, #0]
   11ece:	1ae4      	subs	r4, r4, r3
    if ((connsm->anchor_point_usecs + connsm->conn_itvl_usecs) >= 31) {
   11ed0:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
   11ed4:	f890 2079 	ldrb.w	r2, [r0, #121]	; 0x79
   11ed8:	4413      	add	r3, r2
   11eda:	2b1e      	cmp	r3, #30
   11edc:	dd00      	ble.n	11ee0 <ble_ll_conn_get_next_sched_time+0x20>
        ++ce_end;
   11ede:	3401      	adds	r4, #1
    if (ble_ll_sched_next_time(&next_sched_time)) {
   11ee0:	a801      	add	r0, sp, #4
   11ee2:	f007 f80b 	bl	18efc <ble_ll_sched_next_time>
   11ee6:	b118      	cbz	r0, 11ef0 <ble_ll_conn_get_next_sched_time+0x30>
        if (CPUTIME_LT(next_sched_time, ce_end)) {
   11ee8:	9b01      	ldr	r3, [sp, #4]
   11eea:	1b1a      	subs	r2, r3, r4
   11eec:	2a00      	cmp	r2, #0
   11eee:	db02      	blt.n	11ef6 <ble_ll_conn_get_next_sched_time+0x36>
}
   11ef0:	4620      	mov	r0, r4
   11ef2:	b002      	add	sp, #8
   11ef4:	bd10      	pop	{r4, pc}
            ce_end = next_sched_time;
   11ef6:	461c      	mov	r4, r3
    return ce_end;
   11ef8:	e7fa      	b.n	11ef0 <ble_ll_conn_get_next_sched_time+0x30>
   11efa:	bf00      	nop
   11efc:	20004250 	.word	0x20004250

00011f00 <ble_ll_conn_tx_pdu>:
{
   11f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11f04:	b08f      	sub	sp, #60	; 0x3c
   11f06:	4604      	mov	r4, r0
    if (connsm->csmflags.cfbit.terminate_ind_rxd) {
   11f08:	7803      	ldrb	r3, [r0, #0]
   11f0a:	f013 0f04 	tst.w	r3, #4
   11f0e:	d036      	beq.n	11f7e <ble_ll_conn_tx_pdu+0x7e>
        CONN_F_EMPTY_PDU_TXD(connsm) = 1;
   11f10:	7843      	ldrb	r3, [r0, #1]
   11f12:	f043 0320 	orr.w	r3, r3, #32
   11f16:	7043      	strb	r3, [r0, #1]
    ble_hdr = NULL;
   11f18:	2700      	movs	r7, #0
    m = NULL;
   11f1a:	463e      	mov	r6, r7
    hdr_byte = BLE_LL_LLID_DATA_FRAG;
   11f1c:	2501      	movs	r5, #1
    md = 0;
   11f1e:	46b9      	mov	r9, r7
    if (CONN_F_EMPTY_PDU_TXD(connsm)) {
   11f20:	7863      	ldrb	r3, [r4, #1]
   11f22:	f013 0f20 	tst.w	r3, #32
   11f26:	d00a      	beq.n	11f3e <ble_ll_conn_tx_pdu+0x3e>
        m->om_data += BLE_MBUF_MEMBLOCK_OVERHEAD;
   11f28:	ab0e      	add	r3, sp, #56	; 0x38
   11f2a:	9304      	str	r3, [sp, #16]
        ble_hdr->txinfo.flags = 0;
   11f2c:	2300      	movs	r3, #0
   11f2e:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
        ble_hdr->txinfo.offset = 0;
   11f32:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
        ble_hdr->txinfo.pyld_len = 0;
   11f36:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
        ble_hdr = &empty_pdu.ble_hdr;
   11f3a:	af0a      	add	r7, sp, #40	; 0x28
        m = (struct os_mbuf *)&empty_pdu;
   11f3c:	ae04      	add	r6, sp, #16
    if (connsm->tx_seqnum) {
   11f3e:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
   11f42:	b10b      	cbz	r3, 11f48 <ble_ll_conn_tx_pdu+0x48>
        hdr_byte |= BLE_LL_DATA_HDR_SN_MASK;
   11f44:	f045 0508 	orr.w	r5, r5, #8
    if (md) {
   11f48:	f1b9 0f00 	cmp.w	r9, #0
   11f4c:	d001      	beq.n	11f52 <ble_ll_conn_tx_pdu+0x52>
        hdr_byte |= BLE_LL_DATA_HDR_MD_MASK;
   11f4e:	f045 0510 	orr.w	r5, r5, #16
    if (connsm->next_exp_seqnum) {
   11f52:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
   11f56:	b10b      	cbz	r3, 11f5c <ble_ll_conn_tx_pdu+0x5c>
        hdr_byte |= BLE_LL_DATA_HDR_NESN_MASK;
   11f58:	f045 0504 	orr.w	r5, r5, #4
    ble_hdr->txinfo.hdr_byte = hdr_byte;
   11f5c:	70fd      	strb	r5, [r7, #3]
    if ((connsm->csmflags.cfbit.terminate_ind_rxd) ||
   11f5e:	7823      	ldrb	r3, [r4, #0]
   11f60:	f013 0f04 	tst.w	r3, #4
   11f64:	f040 8129 	bne.w	121ba <ble_ll_conn_tx_pdu+0x2ba>
        ((connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) && (md == 0) &&
   11f68:	f894 8007 	ldrb.w	r8, [r4, #7]
    if ((connsm->csmflags.cfbit.terminate_ind_rxd) ||
   11f6c:	f1b8 0f02 	cmp.w	r8, #2
   11f70:	f000 8109 	beq.w	12186 <ble_ll_conn_tx_pdu+0x286>
        txend_func = NULL;
   11f74:	f04f 0a00 	mov.w	sl, #0
        end_transition = BLE_PHY_TRANSITION_TX_RX;
   11f78:	f04f 0802 	mov.w	r8, #2
   11f7c:	e121      	b.n	121c2 <ble_ll_conn_tx_pdu+0x2c2>
    pkthdr = STAILQ_FIRST(&connsm->conn_txq);
   11f7e:	f8d0 a0b0 	ldr.w	sl, [r0, #176]	; 0xb0
    if (!connsm->cur_tx_pdu && !CONN_F_EMPTY_PDU_TXD(connsm) && !pkthdr) {
   11f82:	f8d0 60ac 	ldr.w	r6, [r0, #172]	; 0xac
   11f86:	b336      	cbz	r6, 11fd6 <ble_ll_conn_tx_pdu+0xd6>
    if (!connsm->cur_tx_pdu && !CONN_F_EMPTY_PDU_TXD(connsm)) {
   11f88:	b39e      	cbz	r6, 11ff2 <ble_ll_conn_tx_pdu+0xf2>
        if (connsm->cur_tx_pdu) {
   11f8a:	2e00      	cmp	r6, #0
   11f8c:	f000 8091 	beq.w	120b2 <ble_ll_conn_tx_pdu+0x1b2>
            ble_hdr = BLE_MBUF_HDR_PTR(m);
   11f90:	f106 0718 	add.w	r7, r6, #24
            pktlen = OS_MBUF_PKTLEN(m);
   11f94:	f8b6 8010 	ldrh.w	r8, [r6, #16]
            cur_txlen = ble_hdr->txinfo.pyld_len;
   11f98:	f896 b01a 	ldrb.w	fp, [r6, #26]
            cur_offset = ble_hdr->txinfo.offset;
   11f9c:	f896 9019 	ldrb.w	r9, [r6, #25]
            if (cur_offset == 0) {
   11fa0:	f1b9 0f00 	cmp.w	r9, #0
   11fa4:	d17b      	bne.n	1209e <ble_ll_conn_tx_pdu+0x19e>
                hdr_byte = ble_hdr->txinfo.hdr_byte & BLE_LL_DATA_HDR_LLID_MASK;
   11fa6:	7ef5      	ldrb	r5, [r6, #27]
   11fa8:	f005 0503 	and.w	r5, r5, #3
            if (connsm->enc_data.enc_state > CONN_ENC_S_ENCRYPTED) {
   11fac:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
   11fb0:	2b02      	cmp	r3, #2
   11fb2:	f240 8095 	bls.w	120e0 <ble_ll_conn_tx_pdu+0x1e0>
                if (nextpkthdr && !ble_ll_ctrl_enc_allowed_pdu_tx(nextpkthdr)
   11fb6:	f1ba 0f00 	cmp.w	sl, #0
   11fba:	f000 8091 	beq.w	120e0 <ble_ll_conn_tx_pdu+0x1e0>
   11fbe:	4650      	mov	r0, sl
   11fc0:	f003 f912 	bl	151e8 <ble_ll_ctrl_enc_allowed_pdu_tx>
   11fc4:	2800      	cmp	r0, #0
   11fc6:	f040 808b 	bne.w	120e0 <ble_ll_conn_tx_pdu+0x1e0>
                    && ((connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) ||
   11fca:	79e3      	ldrb	r3, [r4, #7]
   11fcc:	2b01      	cmp	r3, #1
   11fce:	d168      	bne.n	120a2 <ble_ll_conn_tx_pdu+0x1a2>
                    nextpkthdr = NULL;
   11fd0:	f04f 0a00 	mov.w	sl, #0
   11fd4:	e084      	b.n	120e0 <ble_ll_conn_tx_pdu+0x1e0>
    if (!connsm->cur_tx_pdu && !CONN_F_EMPTY_PDU_TXD(connsm) && !pkthdr) {
   11fd6:	7843      	ldrb	r3, [r0, #1]
   11fd8:	f013 0f20 	tst.w	r3, #32
   11fdc:	d1d4      	bne.n	11f88 <ble_ll_conn_tx_pdu+0x88>
   11fde:	f1ba 0f00 	cmp.w	sl, #0
   11fe2:	d1d1      	bne.n	11f88 <ble_ll_conn_tx_pdu+0x88>
        CONN_F_EMPTY_PDU_TXD(connsm) = 1;
   11fe4:	f043 0320 	orr.w	r3, r3, #32
   11fe8:	7043      	strb	r3, [r0, #1]
    ble_hdr = NULL;
   11fea:	2700      	movs	r7, #0
    hdr_byte = BLE_LL_LLID_DATA_FRAG;
   11fec:	2501      	movs	r5, #1
    md = 0;
   11fee:	46b9      	mov	r9, r7
        goto conn_tx_pdu;
   11ff0:	e796      	b.n	11f20 <ble_ll_conn_tx_pdu+0x20>
    if (!connsm->cur_tx_pdu && !CONN_F_EMPTY_PDU_TXD(connsm)) {
   11ff2:	7863      	ldrb	r3, [r4, #1]
   11ff4:	f013 0f20 	tst.w	r3, #32
   11ff8:	d1c7      	bne.n	11f8a <ble_ll_conn_tx_pdu+0x8a>
        m = OS_MBUF_PKTHDR_TO_MBUF(pkthdr);
   11ffa:	f1aa 0610 	sub.w	r6, sl, #16
        nextpkthdr = STAILQ_NEXT(pkthdr, omp_next);
   11ffe:	f8da 9004 	ldr.w	r9, [sl, #4]
        if (connsm->enc_data.enc_state > CONN_ENC_S_ENCRYPTED) {
   12002:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
   12006:	2b02      	cmp	r3, #2
   12008:	d81b      	bhi.n	12042 <ble_ll_conn_tx_pdu+0x142>
        STAILQ_REMOVE_HEAD(&connsm->conn_txq, omp_next);
   1200a:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   1200e:	685b      	ldr	r3, [r3, #4]
   12010:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
   12014:	b3bb      	cbz	r3, 12086 <ble_ll_conn_tx_pdu+0x186>
        ble_hdr = BLE_MBUF_HDR_PTR(m);
   12016:	f10a 0708 	add.w	r7, sl, #8
        llid = ble_hdr->txinfo.hdr_byte & BLE_LL_DATA_HDR_LLID_MASK;
   1201a:	f89a 300b 	ldrb.w	r3, [sl, #11]
   1201e:	f003 0303 	and.w	r3, r3, #3
        pktlen = pkthdr->omp_len;
   12022:	f8ba 8000 	ldrh.w	r8, [sl]
        if (llid == BLE_LL_LLID_CTRL) {
   12026:	2b03      	cmp	r3, #3
   12028:	d132      	bne.n	12090 <ble_ll_conn_tx_pdu+0x190>
            cur_txlen = pktlen;
   1202a:	fa5f fb88 	uxtb.w	fp, r8
        ble_hdr->txinfo.pyld_len = cur_txlen;
   1202e:	f88a b00a 	strb.w	fp, [sl, #10]
        hdr_byte = ble_hdr->txinfo.hdr_byte;
   12032:	f89a 500b 	ldrb.w	r5, [sl, #11]
        connsm->cur_tx_pdu = m;
   12036:	f8c4 60ac 	str.w	r6, [r4, #172]	; 0xac
   1203a:	46ca      	mov	sl, r9
    cur_offset = 0;
   1203c:	f04f 0900 	mov.w	r9, #0
        connsm->cur_tx_pdu = m;
   12040:	e04e      	b.n	120e0 <ble_ll_conn_tx_pdu+0x1e0>
            if (!ble_ll_ctrl_enc_allowed_pdu_tx(pkthdr)) {
   12042:	4650      	mov	r0, sl
   12044:	f003 f8d0 	bl	151e8 <ble_ll_ctrl_enc_allowed_pdu_tx>
   12048:	b938      	cbnz	r0, 1205a <ble_ll_conn_tx_pdu+0x15a>
                CONN_F_EMPTY_PDU_TXD(connsm) = 1;
   1204a:	7863      	ldrb	r3, [r4, #1]
   1204c:	f043 0320 	orr.w	r3, r3, #32
   12050:	7063      	strb	r3, [r4, #1]
    ble_hdr = NULL;
   12052:	2700      	movs	r7, #0
    hdr_byte = BLE_LL_LLID_DATA_FRAG;
   12054:	2501      	movs	r5, #1
    md = 0;
   12056:	46b9      	mov	r9, r7
                goto conn_tx_pdu;
   12058:	e762      	b.n	11f20 <ble_ll_conn_tx_pdu+0x20>
            if (nextpkthdr && !ble_ll_ctrl_enc_allowed_pdu_tx(nextpkthdr)
   1205a:	f1b9 0f00 	cmp.w	r9, #0
   1205e:	d0d4      	beq.n	1200a <ble_ll_conn_tx_pdu+0x10a>
   12060:	4648      	mov	r0, r9
   12062:	f003 f8c1 	bl	151e8 <ble_ll_ctrl_enc_allowed_pdu_tx>
   12066:	2800      	cmp	r0, #0
   12068:	d1cf      	bne.n	1200a <ble_ll_conn_tx_pdu+0x10a>
                && ((connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) ||
   1206a:	79e3      	ldrb	r3, [r4, #7]
   1206c:	2b01      	cmp	r3, #1
   1206e:	d007      	beq.n	12080 <ble_ll_conn_tx_pdu+0x180>
                    !ble_ll_ctrl_is_start_enc_rsp(m))) {
   12070:	4630      	mov	r0, r6
   12072:	f003 f8c9 	bl	15208 <ble_ll_ctrl_is_start_enc_rsp>
                && ((connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) ||
   12076:	2800      	cmp	r0, #0
   12078:	d1c7      	bne.n	1200a <ble_ll_conn_tx_pdu+0x10a>
                nextpkthdr = NULL;
   1207a:	f04f 0900 	mov.w	r9, #0
   1207e:	e7c4      	b.n	1200a <ble_ll_conn_tx_pdu+0x10a>
   12080:	f04f 0900 	mov.w	r9, #0
   12084:	e7c1      	b.n	1200a <ble_ll_conn_tx_pdu+0x10a>
        STAILQ_REMOVE_HEAD(&connsm->conn_txq, omp_next);
   12086:	f104 03b0 	add.w	r3, r4, #176	; 0xb0
   1208a:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
   1208e:	e7c2      	b.n	12016 <ble_ll_conn_tx_pdu+0x116>
            cur_txlen = ble_ll_conn_adjust_pyld_len(connsm, pktlen);
   12090:	4641      	mov	r1, r8
   12092:	4620      	mov	r0, r4
   12094:	f7ff feeb 	bl	11e6e <ble_ll_conn_adjust_pyld_len>
   12098:	fa5f fb80 	uxtb.w	fp, r0
   1209c:	e7c7      	b.n	1202e <ble_ll_conn_tx_pdu+0x12e>
    hdr_byte = BLE_LL_LLID_DATA_FRAG;
   1209e:	2501      	movs	r5, #1
   120a0:	e784      	b.n	11fac <ble_ll_conn_tx_pdu+0xac>
                        !ble_ll_ctrl_is_start_enc_rsp(connsm->cur_tx_pdu))) {
   120a2:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
   120a6:	f003 f8af 	bl	15208 <ble_ll_ctrl_is_start_enc_rsp>
                    && ((connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) ||
   120aa:	b9c8      	cbnz	r0, 120e0 <ble_ll_conn_tx_pdu+0x1e0>
                    nextpkthdr = NULL;
   120ac:	f04f 0a00 	mov.w	sl, #0
   120b0:	e016      	b.n	120e0 <ble_ll_conn_tx_pdu+0x1e0>
            if (connsm->enc_data.enc_state > CONN_ENC_S_ENCRYPTED) {
   120b2:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
   120b6:	2b02      	cmp	r3, #2
   120b8:	d90d      	bls.n	120d6 <ble_ll_conn_tx_pdu+0x1d6>
                if (nextpkthdr && !ble_ll_ctrl_enc_allowed_pdu_tx(nextpkthdr)) {
   120ba:	f1ba 0f00 	cmp.w	sl, #0
   120be:	d03e      	beq.n	1213e <ble_ll_conn_tx_pdu+0x23e>
   120c0:	4650      	mov	r0, sl
   120c2:	f003 f891 	bl	151e8 <ble_ll_ctrl_enc_allowed_pdu_tx>
   120c6:	2800      	cmp	r0, #0
   120c8:	d03f      	beq.n	1214a <ble_ll_conn_tx_pdu+0x24a>
    ble_hdr = NULL;
   120ca:	2700      	movs	r7, #0
            pktlen = 0;
   120cc:	46b8      	mov	r8, r7
    cur_offset = 0;
   120ce:	46b9      	mov	r9, r7
            cur_txlen = 0;
   120d0:	46bb      	mov	fp, r7
    hdr_byte = BLE_LL_LLID_DATA_FRAG;
   120d2:	2501      	movs	r5, #1
   120d4:	e004      	b.n	120e0 <ble_ll_conn_tx_pdu+0x1e0>
    ble_hdr = NULL;
   120d6:	2700      	movs	r7, #0
            pktlen = 0;
   120d8:	46b8      	mov	r8, r7
    cur_offset = 0;
   120da:	46b9      	mov	r9, r7
            cur_txlen = 0;
   120dc:	46bb      	mov	fp, r7
    hdr_byte = BLE_LL_LLID_DATA_FRAG;
   120de:	2501      	movs	r5, #1
    if (nextpkthdr || ((cur_offset + cur_txlen) < pktlen)) {
   120e0:	f1ba 0f00 	cmp.w	sl, #0
   120e4:	d039      	beq.n	1215a <ble_ll_conn_tx_pdu+0x25a>
        next_event_time = ble_ll_conn_get_next_sched_time(connsm);
   120e6:	4620      	mov	r0, r4
   120e8:	f7ff feea 	bl	11ec0 <ble_ll_conn_get_next_sched_time>
   120ec:	9003      	str	r0, [sp, #12]
        if ((cur_offset + cur_txlen) < pktlen) {
   120ee:	eb09 030b 	add.w	r3, r9, fp
   120f2:	4543      	cmp	r3, r8
   120f4:	da38      	bge.n	12168 <ble_ll_conn_tx_pdu+0x268>
            next_txlen = pktlen - (cur_offset + cur_txlen);
   120f6:	fa5f f088 	uxtb.w	r0, r8
   120fa:	fa5f f883 	uxtb.w	r8, r3
   120fe:	eba0 0008 	sub.w	r0, r0, r8
   12102:	b2c0      	uxtb	r0, r0
        ticks = (BLE_LL_IFS * 3) + connsm->eff_max_rx_time +
   12104:	f8b4 801a 	ldrh.w	r8, [r4, #26]
            ble_ll_pdu_tx_time_get(next_txlen, tx_phy_mode) +
   12108:	2101      	movs	r1, #1
   1210a:	f7fe fcb7 	bl	10a7c <ble_ll_pdu_tx_time_get>
        ticks = (BLE_LL_IFS * 3) + connsm->eff_max_rx_time +
   1210e:	4480      	add	r8, r0
            ble_ll_pdu_tx_time_get(cur_txlen, tx_phy_mode);
   12110:	2101      	movs	r1, #1
   12112:	4658      	mov	r0, fp
   12114:	f7fe fcb2 	bl	10a7c <ble_ll_pdu_tx_time_get>
            ble_ll_pdu_tx_time_get(next_txlen, tx_phy_mode) +
   12118:	4440      	add	r0, r8
        ticks = (BLE_LL_IFS * 3) + connsm->eff_max_rx_time +
   1211a:	f500 70e1 	add.w	r0, r0, #450	; 0x1c2
        if (connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) {
   1211e:	79e3      	ldrb	r3, [r4, #7]
   12120:	2b01      	cmp	r3, #1
   12122:	d029      	beq.n	12178 <ble_ll_conn_tx_pdu+0x278>
        ticks = os_cputime_usecs_to_ticks(ticks);
   12124:	f017 fbd8 	bl	298d8 <os_cputime_usecs_to_ticks>
   12128:	4680      	mov	r8, r0
        if ((int32_t)((os_cputime_get32() + ticks) - next_event_time) < 0) {
   1212a:	f017 fbd0 	bl	298ce <os_cputime_get32>
   1212e:	4440      	add	r0, r8
   12130:	9b03      	ldr	r3, [sp, #12]
   12132:	1ac0      	subs	r0, r0, r3
   12134:	2800      	cmp	r0, #0
   12136:	db23      	blt.n	12180 <ble_ll_conn_tx_pdu+0x280>
    md = 0;
   12138:	f04f 0900 	mov.w	r9, #0
   1213c:	e6f0      	b.n	11f20 <ble_ll_conn_tx_pdu+0x20>
    ble_hdr = NULL;
   1213e:	2700      	movs	r7, #0
            pktlen = 0;
   12140:	46b8      	mov	r8, r7
    cur_offset = 0;
   12142:	46b9      	mov	r9, r7
            cur_txlen = 0;
   12144:	46bb      	mov	fp, r7
    hdr_byte = BLE_LL_LLID_DATA_FRAG;
   12146:	2501      	movs	r5, #1
   12148:	e7ca      	b.n	120e0 <ble_ll_conn_tx_pdu+0x1e0>
                    nextpkthdr = NULL;
   1214a:	f04f 0a00 	mov.w	sl, #0
    ble_hdr = NULL;
   1214e:	4657      	mov	r7, sl
            pktlen = 0;
   12150:	46d0      	mov	r8, sl
    cur_offset = 0;
   12152:	46d1      	mov	r9, sl
            cur_txlen = 0;
   12154:	46d3      	mov	fp, sl
    hdr_byte = BLE_LL_LLID_DATA_FRAG;
   12156:	2501      	movs	r5, #1
   12158:	e7c2      	b.n	120e0 <ble_ll_conn_tx_pdu+0x1e0>
    if (nextpkthdr || ((cur_offset + cur_txlen) < pktlen)) {
   1215a:	eb09 030b 	add.w	r3, r9, fp
   1215e:	4543      	cmp	r3, r8
   12160:	dbc1      	blt.n	120e6 <ble_ll_conn_tx_pdu+0x1e6>
    md = 0;
   12162:	f04f 0900 	mov.w	r9, #0
   12166:	e6db      	b.n	11f20 <ble_ll_conn_tx_pdu+0x20>
            if (nextpkthdr->omp_len > connsm->eff_max_tx_octets) {
   12168:	f8ba 3000 	ldrh.w	r3, [sl]
   1216c:	7ba0      	ldrb	r0, [r4, #14]
   1216e:	b282      	uxth	r2, r0
   12170:	4293      	cmp	r3, r2
   12172:	d8c7      	bhi.n	12104 <ble_ll_conn_tx_pdu+0x204>
                next_txlen = nextpkthdr->omp_len;
   12174:	b2d8      	uxtb	r0, r3
   12176:	e7c5      	b.n	12104 <ble_ll_conn_tx_pdu+0x204>
            ticks += (BLE_LL_IFS + connsm->eff_max_rx_time);
   12178:	8b63      	ldrh	r3, [r4, #26]
   1217a:	4418      	add	r0, r3
   1217c:	3096      	adds	r0, #150	; 0x96
   1217e:	e7d1      	b.n	12124 <ble_ll_conn_tx_pdu+0x224>
            md = 1;
   12180:	f04f 0901 	mov.w	r9, #1
   12184:	e6cc      	b.n	11f20 <ble_ll_conn_tx_pdu+0x20>
        ((connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) && (md == 0) &&
   12186:	f1b9 0f00 	cmp.w	r9, #0
   1218a:	d14f      	bne.n	1222c <ble_ll_conn_tx_pdu+0x32c>
         (connsm->cons_rxd_bad_crc == 0) &&
   1218c:	f894 a034 	ldrb.w	sl, [r4, #52]	; 0x34
        ((connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) && (md == 0) &&
   12190:	f1ba 0f00 	cmp.w	sl, #0
   12194:	d14d      	bne.n	12232 <ble_ll_conn_tx_pdu+0x332>
         ((connsm->last_rxd_hdr_byte & BLE_LL_DATA_HDR_MD_MASK) == 0) &&
   12196:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
         (connsm->cons_rxd_bad_crc == 0) &&
   1219a:	f013 0f10 	tst.w	r3, #16
   1219e:	d002      	beq.n	121a6 <ble_ll_conn_tx_pdu+0x2a6>
        txend_func = NULL;
   121a0:	f04f 0a00 	mov.w	sl, #0
   121a4:	e00d      	b.n	121c2 <ble_ll_conn_tx_pdu+0x2c2>
         !ble_ll_ctrl_is_terminate_ind(hdr_byte, m->om_data[0]))) {
   121a6:	6833      	ldr	r3, [r6, #0]
   121a8:	7819      	ldrb	r1, [r3, #0]
   121aa:	4628      	mov	r0, r5
   121ac:	f003 f936 	bl	1541c <ble_ll_ctrl_is_terminate_ind>
         ((connsm->last_rxd_hdr_byte & BLE_LL_DATA_HDR_MD_MASK) == 0) &&
   121b0:	b938      	cbnz	r0, 121c2 <ble_ll_conn_tx_pdu+0x2c2>
        end_transition = BLE_PHY_TRANSITION_NONE;
   121b2:	46d0      	mov	r8, sl
        txend_func = ble_ll_conn_wait_txend;
   121b4:	f8df a198 	ldr.w	sl, [pc, #408]	; 12350 <ble_ll_conn_tx_pdu+0x450>
   121b8:	e003      	b.n	121c2 <ble_ll_conn_tx_pdu+0x2c2>
   121ba:	f8df a194 	ldr.w	sl, [pc, #404]	; 12350 <ble_ll_conn_tx_pdu+0x450>
        end_transition = BLE_PHY_TRANSITION_NONE;
   121be:	f04f 0800 	mov.w	r8, #0
    llid = ble_hdr->txinfo.hdr_byte & BLE_LL_DATA_HDR_LLID_MASK;
   121c2:	78fb      	ldrb	r3, [r7, #3]
   121c4:	f003 0303 	and.w	r3, r3, #3
    if (llid == BLE_LL_LLID_CTRL) {
   121c8:	2b03      	cmp	r3, #3
   121ca:	d035      	beq.n	12238 <ble_ll_conn_tx_pdu+0x338>
        opcode = 0;
   121cc:	2300      	movs	r3, #0
        is_ctrl = 0;
   121ce:	461a      	mov	r2, r3
    } else if (is_ctrl && (opcode == BLE_LL_CTRL_START_ENC_REQ)) {
   121d0:	b10a      	cbz	r2, 121d6 <ble_ll_conn_tx_pdu+0x2d6>
   121d2:	2b05      	cmp	r3, #5
   121d4:	d04d      	beq.n	12272 <ble_ll_conn_tx_pdu+0x372>
    } else if (is_ctrl && (opcode == BLE_LL_CTRL_PAUSE_ENC_RSP)) {
   121d6:	b10a      	cbz	r2, 121dc <ble_ll_conn_tx_pdu+0x2dc>
   121d8:	2b0b      	cmp	r3, #11
   121da:	d05f      	beq.n	1229c <ble_ll_conn_tx_pdu+0x39c>
        if (CONN_F_ENCRYPTED(connsm)) {
   121dc:	78a3      	ldrb	r3, [r4, #2]
   121de:	f013 0f02 	tst.w	r3, #2
   121e2:	f040 8089 	bne.w	122f8 <ble_ll_conn_tx_pdu+0x3f8>
    ble_phy_set_txend_cb(txend_func, connsm);
   121e6:	4621      	mov	r1, r4
   121e8:	4650      	mov	r0, sl
   121ea:	f007 fd0b 	bl	19c04 <ble_phy_set_txend_cb>
    rc = ble_phy_tx(ble_ll_tx_mbuf_pducb, m, end_transition);
   121ee:	4642      	mov	r2, r8
   121f0:	4631      	mov	r1, r6
   121f2:	4855      	ldr	r0, [pc, #340]	; (12348 <ble_ll_conn_tx_pdu+0x448>)
   121f4:	f007 ff9a 	bl	1a12c <ble_phy_tx>
    if (!rc) {
   121f8:	4602      	mov	r2, r0
   121fa:	b998      	cbnz	r0, 12224 <ble_ll_conn_tx_pdu+0x324>
        cur_txlen = ble_hdr->txinfo.pyld_len;
   121fc:	78b9      	ldrb	r1, [r7, #2]
        CONN_F_LAST_TXD_MD(connsm) = md;
   121fe:	7863      	ldrb	r3, [r4, #1]
   12200:	f369 1386 	bfi	r3, r9, #6, #1
   12204:	7063      	strb	r3, [r4, #1]
        if (CONN_F_EMPTY_PDU_TXD(connsm)) {
   12206:	f013 0f20 	tst.w	r3, #32
   1220a:	f000 8089 	beq.w	12320 <ble_ll_conn_tx_pdu+0x420>
            if (connsm->csmflags.cfbit.terminate_ind_rxd) {
   1220e:	7823      	ldrb	r3, [r4, #0]
   12210:	f013 0f04 	tst.w	r3, #4
   12214:	d002      	beq.n	1221c <ble_ll_conn_tx_pdu+0x31c>
                connsm->csmflags.cfbit.terminate_ind_rxd_acked = 1;
   12216:	f043 0308 	orr.w	r3, r3, #8
   1221a:	7023      	strb	r3, [r4, #0]
            STATS_INC(ble_ll_conn_stats, tx_empty_pdus);
   1221c:	494b      	ldr	r1, [pc, #300]	; (1234c <ble_ll_conn_tx_pdu+0x44c>)
   1221e:	6ecb      	ldr	r3, [r1, #108]	; 0x6c
   12220:	3301      	adds	r3, #1
   12222:	66cb      	str	r3, [r1, #108]	; 0x6c
}
   12224:	4610      	mov	r0, r2
   12226:	b00f      	add	sp, #60	; 0x3c
   12228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        txend_func = NULL;
   1222c:	f04f 0a00 	mov.w	sl, #0
   12230:	e7c7      	b.n	121c2 <ble_ll_conn_tx_pdu+0x2c2>
   12232:	f04f 0a00 	mov.w	sl, #0
   12236:	e7c4      	b.n	121c2 <ble_ll_conn_tx_pdu+0x2c2>
        opcode = m->om_data[0];
   12238:	6833      	ldr	r3, [r6, #0]
   1223a:	781b      	ldrb	r3, [r3, #0]
    if (is_ctrl && (opcode == BLE_LL_CTRL_START_ENC_RSP)) {
   1223c:	2b06      	cmp	r3, #6
   1223e:	d001      	beq.n	12244 <ble_ll_conn_tx_pdu+0x344>
        is_ctrl = 1;
   12240:	2201      	movs	r2, #1
   12242:	e7c5      	b.n	121d0 <ble_ll_conn_tx_pdu+0x2d0>
        CONN_F_ENCRYPTED(connsm) = 1;
   12244:	78a3      	ldrb	r3, [r4, #2]
   12246:	f043 0302 	orr.w	r3, r3, #2
   1224a:	70a3      	strb	r3, [r4, #2]
        connsm->enc_data.tx_encrypted = 1;
   1224c:	2301      	movs	r3, #1
   1224e:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
                               CONN_IS_MASTER(connsm));
   12252:	79e3      	ldrb	r3, [r4, #7]
        ble_phy_encrypt_enable(connsm->enc_data.tx_pkt_cntr,
   12254:	2b01      	cmp	r3, #1
   12256:	bf14      	ite	ne
   12258:	2300      	movne	r3, #0
   1225a:	2301      	moveq	r3, #1
   1225c:	9300      	str	r3, [sp, #0]
   1225e:	f504 73ac 	add.w	r3, r4, #344	; 0x158
   12262:	f504 7298 	add.w	r2, r4, #304	; 0x130
   12266:	f8d4 011c 	ldr.w	r0, [r4, #284]	; 0x11c
   1226a:	2100      	movs	r1, #0
   1226c:	f007 fc84 	bl	19b78 <ble_phy_encrypt_enable>
   12270:	e7b9      	b.n	121e6 <ble_ll_conn_tx_pdu+0x2e6>
        CONN_F_ENCRYPTED(connsm) = 0;
   12272:	78a3      	ldrb	r3, [r4, #2]
   12274:	f36f 0341 	bfc	r3, #1, #1
   12278:	70a3      	strb	r3, [r4, #2]
        connsm->enc_data.enc_state = CONN_ENC_S_START_ENC_RSP_WAIT;
   1227a:	2307      	movs	r3, #7
   1227c:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
        connsm->enc_data.tx_encrypted = 0;
   12280:	2300      	movs	r3, #0
   12282:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
        ble_phy_encrypt_disable();
   12286:	f007 fca7 	bl	19bd8 <ble_phy_encrypt_disable>
        if (txend_func == NULL) {
   1228a:	f1ba 0f00 	cmp.w	sl, #0
   1228e:	d002      	beq.n	12296 <ble_ll_conn_tx_pdu+0x396>
            txend_func = ble_ll_conn_txend_encrypt;
   12290:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 12354 <ble_ll_conn_tx_pdu+0x454>
   12294:	e7a7      	b.n	121e6 <ble_ll_conn_tx_pdu+0x2e6>
            txend_func = ble_ll_conn_start_rx_encrypt;
   12296:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 12358 <ble_ll_conn_tx_pdu+0x458>
   1229a:	e7a4      	b.n	121e6 <ble_ll_conn_tx_pdu+0x2e6>
        if (connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) {
   1229c:	79e3      	ldrb	r3, [r4, #7]
   1229e:	2b02      	cmp	r3, #2
   122a0:	d00c      	beq.n	122bc <ble_ll_conn_tx_pdu+0x3bc>
            CONN_F_ENCRYPTED(connsm) = 0;
   122a2:	78a3      	ldrb	r3, [r4, #2]
   122a4:	f36f 0341 	bfc	r3, #1, #1
   122a8:	70a3      	strb	r3, [r4, #2]
            connsm->enc_data.enc_state = CONN_ENC_S_PAUSED;
   122aa:	2305      	movs	r3, #5
   122ac:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
            connsm->enc_data.tx_encrypted = 0;
   122b0:	2300      	movs	r3, #0
   122b2:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
            ble_phy_encrypt_disable();
   122b6:	f007 fc8f 	bl	19bd8 <ble_phy_encrypt_disable>
   122ba:	e794      	b.n	121e6 <ble_ll_conn_tx_pdu+0x2e6>
            CONN_F_ENCRYPTED(connsm) = 1;
   122bc:	78a2      	ldrb	r2, [r4, #2]
   122be:	f042 0202 	orr.w	r2, r2, #2
   122c2:	70a2      	strb	r2, [r4, #2]
            connsm->enc_data.tx_encrypted = 1;
   122c4:	2201      	movs	r2, #1
   122c6:	f884 2119 	strb.w	r2, [r4, #281]	; 0x119
            ble_phy_encrypt_enable(connsm->enc_data.tx_pkt_cntr,
   122ca:	4293      	cmp	r3, r2
   122cc:	bf14      	ite	ne
   122ce:	2300      	movne	r3, #0
   122d0:	2301      	moveq	r3, #1
   122d2:	9300      	str	r3, [sp, #0]
   122d4:	f504 73ac 	add.w	r3, r4, #344	; 0x158
   122d8:	f504 7298 	add.w	r2, r4, #304	; 0x130
   122dc:	f8d4 011c 	ldr.w	r0, [r4, #284]	; 0x11c
   122e0:	2100      	movs	r1, #0
   122e2:	f007 fc49 	bl	19b78 <ble_phy_encrypt_enable>
            if (txend_func == NULL) {
   122e6:	f1ba 0f00 	cmp.w	sl, #0
   122ea:	d002      	beq.n	122f2 <ble_ll_conn_tx_pdu+0x3f2>
                txend_func = ble_ll_conn_rxend_unencrypt;
   122ec:	f8df a06c 	ldr.w	sl, [pc, #108]	; 1235c <ble_ll_conn_tx_pdu+0x45c>
   122f0:	e779      	b.n	121e6 <ble_ll_conn_tx_pdu+0x2e6>
                txend_func = ble_ll_conn_start_rx_unencrypt;
   122f2:	f8df a06c 	ldr.w	sl, [pc, #108]	; 12360 <ble_ll_conn_tx_pdu+0x460>
   122f6:	e776      	b.n	121e6 <ble_ll_conn_tx_pdu+0x2e6>
            connsm->enc_data.tx_encrypted = 1;
   122f8:	2301      	movs	r3, #1
   122fa:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
                                         CONN_IS_MASTER(connsm));
   122fe:	79e2      	ldrb	r2, [r4, #7]
            ble_phy_encrypt_set_pkt_cntr(connsm->enc_data.tx_pkt_cntr,
   12300:	429a      	cmp	r2, r3
   12302:	bf14      	ite	ne
   12304:	2200      	movne	r2, #0
   12306:	2201      	moveq	r2, #1
   12308:	f8d4 011c 	ldr.w	r0, [r4, #284]	; 0x11c
   1230c:	2100      	movs	r1, #0
   1230e:	f007 fc5b 	bl	19bc8 <ble_phy_encrypt_set_pkt_cntr>
            if (txend_func == NULL) {
   12312:	f1ba 0f00 	cmp.w	sl, #0
   12316:	f47f af66 	bne.w	121e6 <ble_ll_conn_tx_pdu+0x2e6>
                txend_func = ble_ll_conn_continue_rx_encrypt;
   1231a:	f8df a048 	ldr.w	sl, [pc, #72]	; 12364 <ble_ll_conn_tx_pdu+0x464>
   1231e:	e762      	b.n	121e6 <ble_ll_conn_tx_pdu+0x2e6>
        } else if ((hdr_byte & BLE_LL_DATA_HDR_LLID_MASK) == BLE_LL_LLID_CTRL) {
   12320:	f005 0503 	and.w	r5, r5, #3
   12324:	2d03      	cmp	r5, #3
   12326:	d007      	beq.n	12338 <ble_ll_conn_tx_pdu+0x438>
            STATS_INC(ble_ll_conn_stats, tx_l2cap_pdus);
   12328:	4b08      	ldr	r3, [pc, #32]	; (1234c <ble_ll_conn_tx_pdu+0x44c>)
   1232a:	6e58      	ldr	r0, [r3, #100]	; 0x64
   1232c:	3001      	adds	r0, #1
   1232e:	6658      	str	r0, [r3, #100]	; 0x64
            STATS_INCN(ble_ll_conn_stats, tx_l2cap_bytes, cur_txlen);
   12330:	6e98      	ldr	r0, [r3, #104]	; 0x68
   12332:	4401      	add	r1, r0
   12334:	6699      	str	r1, [r3, #104]	; 0x68
    return rc;
   12336:	e775      	b.n	12224 <ble_ll_conn_tx_pdu+0x324>
            STATS_INC(ble_ll_conn_stats, tx_ctrl_pdus);
   12338:	4b04      	ldr	r3, [pc, #16]	; (1234c <ble_ll_conn_tx_pdu+0x44c>)
   1233a:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
   1233c:	3001      	adds	r0, #1
   1233e:	65d8      	str	r0, [r3, #92]	; 0x5c
            STATS_INCN(ble_ll_conn_stats, tx_ctrl_bytes, cur_txlen);
   12340:	6e18      	ldr	r0, [r3, #96]	; 0x60
   12342:	4401      	add	r1, r0
   12344:	6619      	str	r1, [r3, #96]	; 0x60
   12346:	e76d      	b.n	12224 <ble_ll_conn_tx_pdu+0x324>
   12348:	00010991 	.word	0x00010991
   1234c:	20004050 	.word	0x20004050
   12350:	00011dd1 	.word	0x00011dd1
   12354:	00011dc1 	.word	0x00011dc1
   12358:	00011e15 	.word	0x00011e15
   1235c:	00011db1 	.word	0x00011db1
   12360:	00011e47 	.word	0x00011e47
   12364:	00011e57 	.word	0x00011e57

00012368 <ble_ll_conn_event_start_cb>:
{
   12368:	b530      	push	{r4, r5, lr}
   1236a:	b083      	sub	sp, #12
    connsm = (struct ble_ll_conn_sm *)sch->cb_arg;
   1236c:	68c4      	ldr	r4, [r0, #12]
    g_ble_ll_conn_cur_sm = connsm;
   1236e:	4b4c      	ldr	r3, [pc, #304]	; (124a0 <ble_ll_conn_event_start_cb+0x138>)
   12370:	601c      	str	r4, [r3, #0]
    BLE_LL_ASSERT(connsm);
   12372:	2c00      	cmp	r4, #0
   12374:	d043      	beq.n	123fe <ble_ll_conn_event_start_cb+0x96>
   12376:	4605      	mov	r5, r0
    if (connsm->conn_state == BLE_LL_CONN_STATE_IDLE) {
   12378:	79a3      	ldrb	r3, [r4, #6]
   1237a:	2b00      	cmp	r3, #0
   1237c:	d049      	beq.n	12412 <ble_ll_conn_event_start_cb+0xaa>
    ble_ll_whitelist_disable();
   1237e:	f006 ff4b 	bl	19218 <ble_ll_whitelist_disable>
    ble_ll_state_set(BLE_LL_STATE_CONNECTION);
   12382:	2004      	movs	r0, #4
   12384:	f7fe fb1c 	bl	109c0 <ble_ll_state_set>
    ble_phy_setchan(connsm->data_chan_index, connsm->access_addr,
   12388:	6da2      	ldr	r2, [r4, #88]	; 0x58
   1238a:	6d61      	ldr	r1, [r4, #84]	; 0x54
   1238c:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
   12390:	f007 fc7a 	bl	19c88 <ble_phy_setchan>
    ble_phy_resolv_list_disable();
   12394:	f007 ff82 	bl	1a29c <ble_phy_resolv_list_disable>
    if (connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) {
   12398:	79e3      	ldrb	r3, [r4, #7]
   1239a:	2b01      	cmp	r3, #1
   1239c:	d047      	beq.n	1242e <ble_ll_conn_event_start_cb+0xc6>
        if (CONN_F_ENCRYPTED(connsm)) {
   1239e:	78a3      	ldrb	r3, [r4, #2]
   123a0:	f013 0f02 	tst.w	r3, #2
   123a4:	d069      	beq.n	1247a <ble_ll_conn_event_start_cb+0x112>
            ble_phy_encrypt_enable(connsm->enc_data.rx_pkt_cntr,
   123a6:	f8d4 0120 	ldr.w	r0, [r4, #288]	; 0x120
   123aa:	2301      	movs	r3, #1
   123ac:	9300      	str	r3, [sp, #0]
   123ae:	f504 73ac 	add.w	r3, r4, #344	; 0x158
   123b2:	f504 7298 	add.w	r2, r4, #304	; 0x130
   123b6:	2100      	movs	r1, #0
   123b8:	f007 fbde 	bl	19b78 <ble_phy_encrypt_enable>
        start = sch->start_time + g_ble_ll_sched_offset_ticks;
   123bc:	6868      	ldr	r0, [r5, #4]
   123be:	4b39      	ldr	r3, [pc, #228]	; (124a4 <ble_ll_conn_event_start_cb+0x13c>)
   123c0:	781b      	ldrb	r3, [r3, #0]
        rc = ble_phy_rx_set_start_time(start, sch->remainder);
   123c2:	78a9      	ldrb	r1, [r5, #2]
   123c4:	4418      	add	r0, r3
   123c6:	f007 fe5b 	bl	1a080 <ble_phy_rx_set_start_time>
        if (rc) {
   123ca:	4605      	mov	r5, r0
   123cc:	2800      	cmp	r0, #0
   123ce:	d057      	beq.n	12480 <ble_ll_conn_event_start_cb+0x118>
            STATS_INC(ble_ll_conn_stats, slave_ce_failures);
   123d0:	4a35      	ldr	r2, [pc, #212]	; (124a8 <ble_ll_conn_event_start_cb+0x140>)
   123d2:	6b13      	ldr	r3, [r2, #48]	; 0x30
   123d4:	3301      	adds	r3, #1
   123d6:	6313      	str	r3, [r2, #48]	; 0x30
        ble_ll_event_send(&connsm->conn_ev_end);
   123d8:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   123dc:	f7fe fafc 	bl	109d8 <ble_ll_event_send>
        ble_phy_disable();
   123e0:	f007 fc78 	bl	19cd4 <ble_phy_disable>
        ble_ll_state_set(BLE_LL_STATE_STANDBY);
   123e4:	2000      	movs	r0, #0
   123e6:	f7fe faeb 	bl	109c0 <ble_ll_state_set>
        g_ble_ll_conn_cur_sm = NULL;
   123ea:	4b2d      	ldr	r3, [pc, #180]	; (124a0 <ble_ll_conn_event_start_cb+0x138>)
   123ec:	2200      	movs	r2, #0
   123ee:	601a      	str	r2, [r3, #0]
   123f0:	2501      	movs	r5, #1
    connsm->last_scheduled = os_cputime_get32();
   123f2:	f017 fa6c 	bl	298ce <os_cputime_get32>
   123f6:	6660      	str	r0, [r4, #100]	; 0x64
}
   123f8:	4628      	mov	r0, r5
   123fa:	b003      	add	sp, #12
   123fc:	bd30      	pop	{r4, r5, pc}
    BLE_LL_ASSERT(connsm);
   123fe:	f7f9 fef3 	bl	c1e8 <hal_debugger_connected>
   12402:	b100      	cbz	r0, 12406 <ble_ll_conn_event_start_cb+0x9e>
   12404:	be01      	bkpt	0x0001
   12406:	2300      	movs	r3, #0
   12408:	461a      	mov	r2, r3
   1240a:	4619      	mov	r1, r3
   1240c:	4618      	mov	r0, r3
   1240e:	f7fa f925 	bl	c65c <__assert_func>
        STATS_INC(ble_ll_conn_stats, sched_start_in_idle);
   12412:	4a25      	ldr	r2, [pc, #148]	; (124a8 <ble_ll_conn_event_start_cb+0x140>)
   12414:	6f53      	ldr	r3, [r2, #116]	; 0x74
   12416:	3301      	adds	r3, #1
   12418:	6753      	str	r3, [r2, #116]	; 0x74
        BLE_LL_ASSERT(0);
   1241a:	f7f9 fee5 	bl	c1e8 <hal_debugger_connected>
   1241e:	b100      	cbz	r0, 12422 <ble_ll_conn_event_start_cb+0xba>
   12420:	be01      	bkpt	0x0001
   12422:	2300      	movs	r3, #0
   12424:	461a      	mov	r2, r3
   12426:	4619      	mov	r1, r3
   12428:	4618      	mov	r0, r3
   1242a:	f7fa f917 	bl	c65c <__assert_func>
        start = sch->start_time + g_ble_ll_sched_offset_ticks;
   1242e:	6868      	ldr	r0, [r5, #4]
   12430:	4b1c      	ldr	r3, [pc, #112]	; (124a4 <ble_ll_conn_event_start_cb+0x13c>)
   12432:	781b      	ldrb	r3, [r3, #0]
        rc = ble_phy_tx_set_start_time(start, sch->remainder);
   12434:	78a9      	ldrb	r1, [r5, #2]
   12436:	4418      	add	r0, r3
   12438:	f007 fe5a 	bl	1a0f0 <ble_phy_tx_set_start_time>
        if (!rc) {
   1243c:	b9c0      	cbnz	r0, 12470 <ble_ll_conn_event_start_cb+0x108>
            if (CONN_F_ENCRYPTED(connsm)) {
   1243e:	78a3      	ldrb	r3, [r4, #2]
   12440:	f013 0f02 	tst.w	r3, #2
   12444:	d011      	beq.n	1246a <ble_ll_conn_event_start_cb+0x102>
                ble_phy_encrypt_enable(connsm->enc_data.tx_pkt_cntr,
   12446:	f8d4 011c 	ldr.w	r0, [r4, #284]	; 0x11c
   1244a:	2301      	movs	r3, #1
   1244c:	9300      	str	r3, [sp, #0]
   1244e:	f504 73ac 	add.w	r3, r4, #344	; 0x158
   12452:	f504 7298 	add.w	r2, r4, #304	; 0x130
   12456:	2100      	movs	r1, #0
   12458:	f007 fb8e 	bl	19b78 <ble_phy_encrypt_enable>
            rc = ble_ll_conn_tx_pdu(connsm);
   1245c:	4620      	mov	r0, r4
   1245e:	f7ff fd4f 	bl	11f00 <ble_ll_conn_tx_pdu>
            if (!rc) {
   12462:	4605      	mov	r5, r0
   12464:	2800      	cmp	r0, #0
   12466:	d1b7      	bne.n	123d8 <ble_ll_conn_event_start_cb+0x70>
   12468:	e7c3      	b.n	123f2 <ble_ll_conn_event_start_cb+0x8a>
                ble_phy_encrypt_disable();
   1246a:	f007 fbb5 	bl	19bd8 <ble_phy_encrypt_disable>
   1246e:	e7f5      	b.n	1245c <ble_ll_conn_event_start_cb+0xf4>
            STATS_INC(ble_ll_conn_stats, conn_ev_late);
   12470:	4a0d      	ldr	r2, [pc, #52]	; (124a8 <ble_ll_conn_event_start_cb+0x140>)
   12472:	6913      	ldr	r3, [r2, #16]
   12474:	3301      	adds	r3, #1
   12476:	6113      	str	r3, [r2, #16]
   12478:	e7ae      	b.n	123d8 <ble_ll_conn_event_start_cb+0x70>
            ble_phy_encrypt_disable();
   1247a:	f007 fbad 	bl	19bd8 <ble_phy_encrypt_disable>
   1247e:	e79d      	b.n	123bc <ble_ll_conn_event_start_cb+0x54>
            connsm->csmflags.cfbit.slave_set_last_anchor = 1;
   12480:	7823      	ldrb	r3, [r4, #0]
   12482:	f043 0320 	orr.w	r3, r3, #32
   12486:	7023      	strb	r3, [r4, #0]
            usecs = connsm->slave_cur_tx_win_usecs + 61 +
   12488:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
                (2 * connsm->slave_cur_window_widening);
   1248c:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
            usecs = connsm->slave_cur_tx_win_usecs + 61 +
   12490:	eb02 0243 	add.w	r2, r2, r3, lsl #1
            ble_phy_wfr_enable(BLE_PHY_WFR_ENABLE_RX, 0, usecs);
   12494:	323d      	adds	r2, #61	; 0x3d
   12496:	2100      	movs	r1, #0
   12498:	4608      	mov	r0, r1
   1249a:	f007 fa03 	bl	198a4 <ble_phy_wfr_enable>
   1249e:	e7a8      	b.n	123f2 <ble_ll_conn_event_start_cb+0x8a>
   124a0:	20003e98 	.word	0x20003e98
   124a4:	20004250 	.word	0x20004250
   124a8:	20004050 	.word	0x20004050

000124ac <ble_ll_conn_master_common_init>:
{
   124ac:	b510      	push	{r4, lr}
   124ae:	4604      	mov	r4, r0
    connsm->conn_role = BLE_LL_CONN_ROLE_MASTER;
   124b0:	2301      	movs	r3, #1
   124b2:	71c3      	strb	r3, [r0, #7]
    connsm->tx_win_size = BLE_LL_CONN_TX_WIN_MIN + 1;
   124b4:	2302      	movs	r3, #2
   124b6:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
    connsm->tx_win_off = 0;
   124ba:	2300      	movs	r3, #0
   124bc:	f8a0 3072 	strh.w	r3, [r0, #114]	; 0x72
    connsm->master_sca = MYNEWT_VAL(BLE_LL_MASTER_SCA);
   124c0:	2304      	movs	r3, #4
   124c2:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
   124c6:	f017 fab1 	bl	29a2c <lrand48>
    connsm->hop_inc = (rand() % 12) + 5;
   124ca:	4a11      	ldr	r2, [pc, #68]	; (12510 <ble_ll_conn_master_common_init+0x64>)
   124cc:	fb82 3200 	smull	r3, r2, r2, r0
   124d0:	17c3      	asrs	r3, r0, #31
   124d2:	ebc3 0362 	rsb	r3, r3, r2, asr #1
   124d6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   124da:	009a      	lsls	r2, r3, #2
   124dc:	1a83      	subs	r3, r0, r2
   124de:	3305      	adds	r3, #5
   124e0:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
    connsm->num_used_chans = g_ble_ll_conn_params.num_used_chans;
   124e4:	4b0b      	ldr	r3, [pc, #44]	; (12514 <ble_ll_conn_master_common_init+0x68>)
   124e6:	795a      	ldrb	r2, [r3, #5]
   124e8:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
    memcpy(connsm->chanmap, g_ble_ll_conn_params.master_chan_map,
   124ec:	681a      	ldr	r2, [r3, #0]
   124ee:	6222      	str	r2, [r4, #32]
   124f0:	791b      	ldrb	r3, [r3, #4]
   124f2:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    connsm->access_addr = ble_ll_utils_calc_access_addr();
   124f6:	f006 fd2f 	bl	18f58 <ble_ll_utils_calc_access_addr>
   124fa:	6560      	str	r0, [r4, #84]	; 0x54
   124fc:	f017 fa96 	bl	29a2c <lrand48>
    connsm->crcinit = rand() & 0xffffff;
   12500:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   12504:	65a0      	str	r0, [r4, #88]	; 0x58
    connsm->conn_sch.sched_cb = ble_ll_conn_event_start_cb;
   12506:	4b04      	ldr	r3, [pc, #16]	; (12518 <ble_ll_conn_master_common_init+0x6c>)
   12508:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
}
   1250c:	bd10      	pop	{r4, pc}
   1250e:	bf00      	nop
   12510:	2aaaaaab 	.word	0x2aaaaaab
   12514:	20003e80 	.word	0x20003e80
   12518:	00012369 	.word	0x00012369

0001251c <ble_ll_conn_calc_itvl_ticks>:
{
   1251c:	b570      	push	{r4, r5, r6, lr}
   1251e:	4605      	mov	r5, r0
    usecs = connsm->conn_itvl * BLE_LL_CONN_ITVL_USECS;
   12520:	f8b0 0068 	ldrh.w	r0, [r0, #104]	; 0x68
   12524:	f240 44e2 	movw	r4, #1250	; 0x4e2
   12528:	fb04 f400 	mul.w	r4, r4, r0
    ticks = os_cputime_usecs_to_ticks(usecs);
   1252c:	4620      	mov	r0, r4
   1252e:	f017 f9d3 	bl	298d8 <os_cputime_usecs_to_ticks>
   12532:	4606      	mov	r6, r0
                                        os_cputime_ticks_to_usecs(ticks));
   12534:	f017 f9d8 	bl	298e8 <os_cputime_ticks_to_usecs>
    connsm->conn_itvl_usecs = (uint8_t)(usecs -
   12538:	1a20      	subs	r0, r4, r0
   1253a:	b2c0      	uxtb	r0, r0
   1253c:	f885 0079 	strb.w	r0, [r5, #121]	; 0x79
    if (connsm->conn_itvl_usecs == 31) {
   12540:	281f      	cmp	r0, #31
   12542:	d001      	beq.n	12548 <ble_ll_conn_calc_itvl_ticks+0x2c>
    connsm->conn_itvl_ticks = ticks;
   12544:	67ee      	str	r6, [r5, #124]	; 0x7c
}
   12546:	bd70      	pop	{r4, r5, r6, pc}
        connsm->conn_itvl_usecs = 0;
   12548:	2300      	movs	r3, #0
   1254a:	f885 3079 	strb.w	r3, [r5, #121]	; 0x79
        ++ticks;
   1254e:	3601      	adds	r6, #1
   12550:	e7f8      	b.n	12544 <ble_ll_conn_calc_itvl_ticks+0x28>

00012552 <ble_ll_conn_can_send_next_pdu>:
{
   12552:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) {
   12554:	79c3      	ldrb	r3, [r0, #7]
   12556:	2b01      	cmp	r3, #1
   12558:	d001      	beq.n	1255e <ble_ll_conn_can_send_next_pdu+0xc>
    rc = 1;
   1255a:	2001      	movs	r0, #1
}
   1255c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1255e:	4616      	mov	r6, r2
   12560:	460d      	mov	r5, r1
   12562:	4604      	mov	r4, r0
        next_sched_time = ble_ll_conn_get_next_sched_time(connsm);
   12564:	f7ff fcac 	bl	11ec0 <ble_ll_conn_get_next_sched_time>
   12568:	4607      	mov	r7, r0
        txpdu = connsm->cur_tx_pdu;
   1256a:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
        if (!txpdu) {
   1256e:	b1ca      	cbz	r2, 125a4 <ble_ll_conn_can_send_next_pdu+0x52>
            pkthdr = OS_MBUF_PKTHDR(txpdu);
   12570:	f102 0310 	add.w	r3, r2, #16
        if (txpdu) {
   12574:	b1ea      	cbz	r2, 125b2 <ble_ll_conn_can_send_next_pdu+0x60>
            rem_bytes = pkthdr->omp_len - txhdr->txinfo.offset;
   12576:	781b      	ldrb	r3, [r3, #0]
   12578:	7e52      	ldrb	r2, [r2, #25]
   1257a:	1a9b      	subs	r3, r3, r2
   1257c:	b2db      	uxtb	r3, r3
            if (rem_bytes > connsm->eff_max_tx_octets) {
   1257e:	7ba0      	ldrb	r0, [r4, #14]
   12580:	4298      	cmp	r0, r3
   12582:	d300      	bcc.n	12586 <ble_ll_conn_can_send_next_pdu+0x34>
            rem_bytes = pkthdr->omp_len - txhdr->txinfo.offset;
   12584:	4618      	mov	r0, r3
            usecs = ble_ll_pdu_tx_time_get(rem_bytes, tx_phy_mode);
   12586:	2101      	movs	r1, #1
   12588:	f7fe fa78 	bl	10a7c <ble_ll_pdu_tx_time_get>
        usecs += (BLE_LL_IFS * 2) + connsm->eff_max_rx_time;
   1258c:	8b64      	ldrh	r4, [r4, #26]
   1258e:	4420      	add	r0, r4
   12590:	f500 7496 	add.w	r4, r0, #300	; 0x12c
        allowed_usecs = os_cputime_ticks_to_usecs(ticks);
   12594:	1b78      	subs	r0, r7, r5
   12596:	f017 f9a7 	bl	298e8 <os_cputime_ticks_to_usecs>
        if ((usecs + add_usecs) >= allowed_usecs) {
   1259a:	4434      	add	r4, r6
   1259c:	4284      	cmp	r4, r0
   1259e:	d30d      	bcc.n	125bc <ble_ll_conn_can_send_next_pdu+0x6a>
            rc = 0;
   125a0:	2000      	movs	r0, #0
    return rc;
   125a2:	e7db      	b.n	1255c <ble_ll_conn_can_send_next_pdu+0xa>
            pkthdr = STAILQ_FIRST(&connsm->conn_txq);
   125a4:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
            if (pkthdr) {
   125a8:	2b00      	cmp	r3, #0
   125aa:	d0e3      	beq.n	12574 <ble_ll_conn_can_send_next_pdu+0x22>
                txpdu = OS_MBUF_PKTHDR_TO_MBUF(pkthdr);
   125ac:	f1a3 0210 	sub.w	r2, r3, #16
   125b0:	e7e0      	b.n	12574 <ble_ll_conn_can_send_next_pdu+0x22>
            usecs = ble_ll_pdu_tx_time_get(0, tx_phy_mode);
   125b2:	2101      	movs	r1, #1
   125b4:	2000      	movs	r0, #0
   125b6:	f7fe fa61 	bl	10a7c <ble_ll_pdu_tx_time_get>
   125ba:	e7e7      	b.n	1258c <ble_ll_conn_can_send_next_pdu+0x3a>
    rc = 1;
   125bc:	2001      	movs	r0, #1
   125be:	e7cd      	b.n	1255c <ble_ll_conn_can_send_next_pdu+0xa>

000125c0 <ble_ll_conn_chk_csm_flags>:
{
   125c0:	b510      	push	{r4, lr}
   125c2:	4604      	mov	r4, r0
    if (connsm->csmflags.cfbit.send_ltk_req) {
   125c4:	7883      	ldrb	r3, [r0, #2]
   125c6:	f013 0f01 	tst.w	r3, #1
   125ca:	d114      	bne.n	125f6 <ble_ll_conn_chk_csm_flags+0x36>
    if (connsm->csmflags.cfbit.host_expects_upd_event) {
   125cc:	7863      	ldrb	r3, [r4, #1]
   125ce:	f013 0f02 	tst.w	r3, #2
   125d2:	d00f      	beq.n	125f4 <ble_ll_conn_chk_csm_flags+0x34>
        if (IS_PENDING_CTRL_PROC(connsm, BLE_LL_CTRL_PROC_CONN_UPDATE)) {
   125d4:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
   125d8:	f013 0f01 	tst.w	r3, #1
   125dc:	d119      	bne.n	12612 <ble_ll_conn_chk_csm_flags+0x52>
            if (IS_PENDING_CTRL_PROC(connsm, BLE_LL_CTRL_PROC_CONN_PARAM_REQ)) {
   125de:	f013 0f40 	tst.w	r3, #64	; 0x40
   125e2:	d11c      	bne.n	1261e <ble_ll_conn_chk_csm_flags+0x5e>
        update_status = BLE_ERR_SUCCESS;
   125e4:	2100      	movs	r1, #0
        ble_ll_hci_ev_conn_update(connsm, update_status);
   125e6:	4620      	mov	r0, r4
   125e8:	f004 f891 	bl	1670e <ble_ll_hci_ev_conn_update>
        connsm->csmflags.cfbit.host_expects_upd_event = 0;
   125ec:	7863      	ldrb	r3, [r4, #1]
   125ee:	f36f 0341 	bfc	r3, #1, #1
   125f2:	7063      	strb	r3, [r4, #1]
}
   125f4:	bd10      	pop	{r4, pc}
        if (ble_ll_hci_ev_ltk_req(connsm)) {
   125f6:	f004 f8e5 	bl	167c4 <ble_ll_hci_ev_ltk_req>
   125fa:	b920      	cbnz	r0, 12606 <ble_ll_conn_chk_csm_flags+0x46>
        connsm->csmflags.cfbit.send_ltk_req = 0;
   125fc:	78a3      	ldrb	r3, [r4, #2]
   125fe:	f36f 0300 	bfc	r3, #0, #1
   12602:	70a3      	strb	r3, [r4, #2]
   12604:	e7e2      	b.n	125cc <ble_ll_conn_chk_csm_flags+0xc>
            ble_ll_ctrl_reject_ind_send(connsm, BLE_LL_CTRL_ENC_REQ,
   12606:	2206      	movs	r2, #6
   12608:	2103      	movs	r1, #3
   1260a:	4620      	mov	r0, r4
   1260c:	f003 fae0 	bl	15bd0 <ble_ll_ctrl_reject_ind_send>
   12610:	e7f4      	b.n	125fc <ble_ll_conn_chk_csm_flags+0x3c>
            ble_ll_ctrl_proc_stop(connsm, BLE_LL_CTRL_PROC_CONN_UPDATE);
   12612:	2100      	movs	r1, #0
   12614:	4620      	mov	r0, r4
   12616:	f002 ffaa 	bl	1556e <ble_ll_ctrl_proc_stop>
        update_status = BLE_ERR_SUCCESS;
   1261a:	2100      	movs	r1, #0
   1261c:	e7e3      	b.n	125e6 <ble_ll_conn_chk_csm_flags+0x26>
                ble_ll_ctrl_proc_stop(connsm, BLE_LL_CTRL_PROC_CONN_PARAM_REQ);
   1261e:	2106      	movs	r1, #6
   12620:	4620      	mov	r0, r4
   12622:	f002 ffa4 	bl	1556e <ble_ll_ctrl_proc_stop>
                update_status = connsm->reject_reason;
   12626:	f894 1037 	ldrb.w	r1, [r4, #55]	; 0x37
   1262a:	e7dc      	b.n	125e6 <ble_ll_conn_chk_csm_flags+0x26>

0001262c <ble_ll_conn_connect_ind_tx_pducb>:

static uint8_t
ble_ll_conn_connect_ind_tx_pducb(uint8_t *dptr, void *pducb_arg, uint8_t *hdr_byte)
{
   1262c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1262e:	4604      	mov	r4, r0
   12630:	460d      	mov	r5, r1
   12632:	4617      	mov	r7, r2
    connsm = pducb_arg;
    /*
     * pdu_data was prepared just before starting TX and is expected to be
     * still valid here
     */
    pdu_data = ble_ll_scan_get_pdu_data();
   12634:	f005 ffa8 	bl	18588 <ble_ll_scan_get_pdu_data>
   12638:	4606      	mov	r6, r0

    memcpy(dptr, pdu_data->inita, BLE_DEV_ADDR_LEN);
   1263a:	4603      	mov	r3, r0
   1263c:	f853 2f01 	ldr.w	r2, [r3, #1]!
   12640:	6022      	str	r2, [r4, #0]
   12642:	889b      	ldrh	r3, [r3, #4]
   12644:	80a3      	strh	r3, [r4, #4]
    memcpy(dptr + BLE_DEV_ADDR_LEN, pdu_data->adva, BLE_DEV_ADDR_LEN);
   12646:	4603      	mov	r3, r0
   12648:	f853 2f07 	ldr.w	r2, [r3, #7]!
   1264c:	f8c4 2006 	str.w	r2, [r4, #6]
   12650:	889b      	ldrh	r3, [r3, #4]
   12652:	8163      	strh	r3, [r4, #10]

    dptr += 2 * BLE_DEV_ADDR_LEN;

    put_le32(dptr, connsm->access_addr);
   12654:	6d69      	ldr	r1, [r5, #84]	; 0x54
   12656:	f104 000c 	add.w	r0, r4, #12
   1265a:	f017 f87b 	bl	29754 <put_le32>
    dptr[4] = (uint8_t)connsm->crcinit;
   1265e:	f895 3058 	ldrb.w	r3, [r5, #88]	; 0x58
   12662:	7423      	strb	r3, [r4, #16]
    dptr[5] = (uint8_t)(connsm->crcinit >> 8);
   12664:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
   12668:	7463      	strb	r3, [r4, #17]
    dptr[6] = (uint8_t)(connsm->crcinit >> 16);
   1266a:	f895 305a 	ldrb.w	r3, [r5, #90]	; 0x5a
   1266e:	74a3      	strb	r3, [r4, #18]
    dptr[7] = connsm->tx_win_size;
   12670:	f895 303a 	ldrb.w	r3, [r5, #58]	; 0x3a
   12674:	74e3      	strb	r3, [r4, #19]
    put_le16(dptr + 8, connsm->tx_win_off);
   12676:	f8b5 1072 	ldrh.w	r1, [r5, #114]	; 0x72
   1267a:	f104 0014 	add.w	r0, r4, #20
   1267e:	f017 f865 	bl	2974c <put_le16>
    put_le16(dptr + 10, connsm->conn_itvl);
   12682:	f8b5 1068 	ldrh.w	r1, [r5, #104]	; 0x68
   12686:	f104 0016 	add.w	r0, r4, #22
   1268a:	f017 f85f 	bl	2974c <put_le16>
    put_le16(dptr + 12, connsm->slave_latency);
   1268e:	f8b5 106a 	ldrh.w	r1, [r5, #106]	; 0x6a
   12692:	f104 0018 	add.w	r0, r4, #24
   12696:	f017 f859 	bl	2974c <put_le16>
    put_le16(dptr + 14, connsm->supervision_tmo);
   1269a:	f8b5 106c 	ldrh.w	r1, [r5, #108]	; 0x6c
   1269e:	f104 001a 	add.w	r0, r4, #26
   126a2:	f017 f853 	bl	2974c <put_le16>
    memcpy(dptr + 16, &connsm->chanmap, BLE_LL_CONN_CHMAP_LEN);
   126a6:	462b      	mov	r3, r5
   126a8:	f853 2f20 	ldr.w	r2, [r3, #32]!
   126ac:	61e2      	str	r2, [r4, #28]
   126ae:	791b      	ldrb	r3, [r3, #4]
   126b0:	f884 3020 	strb.w	r3, [r4, #32]
    dptr[21] = connsm->hop_inc | (connsm->master_sca << 5);
   126b4:	f995 302e 	ldrsb.w	r3, [r5, #46]	; 0x2e
   126b8:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
   126bc:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
   126c0:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21

    *hdr_byte = pdu_data->hdr_byte;
   126c4:	7833      	ldrb	r3, [r6, #0]
   126c6:	703b      	strb	r3, [r7, #0]

    return 34;
}
   126c8:	2022      	movs	r0, #34	; 0x22
   126ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000126cc <ble_ll_conn_is_peer_adv>:
{
   126cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    connsm = g_ble_ll_conn_create_sm;
   126ce:	4b3f      	ldr	r3, [pc, #252]	; (127cc <ble_ll_conn_is_peer_adv+0x100>)
   126d0:	681d      	ldr	r5, [r3, #0]
    if (!connsm) {
   126d2:	2d00      	cmp	r5, #0
   126d4:	d06d      	beq.n	127b2 <ble_ll_conn_is_peer_adv+0xe6>
   126d6:	4614      	mov	r4, r2
   126d8:	460f      	mov	r7, r1
   126da:	4606      	mov	r6, r0
    switch (connsm->peer_addr_type) {
   126dc:	f895 3092 	ldrb.w	r3, [r5, #146]	; 0x92
   126e0:	2b03      	cmp	r3, #3
   126e2:	d868      	bhi.n	127b6 <ble_ll_conn_is_peer_adv+0xea>
   126e4:	e8df f003 	tbb	[pc, r3]
   126e8:	51420202 	.word	0x51420202
        if (ble_ll_addr_is_id(adva, addr_type)) {
   126ec:	4601      	mov	r1, r0
   126ee:	4638      	mov	r0, r7
   126f0:	f7fd ff9d 	bl	1062e <ble_ll_addr_is_id>
   126f4:	b9d0      	cbnz	r0, 1272c <ble_ll_conn_is_peer_adv+0x60>
        if ((index >= 0) &&
   126f6:	2c00      	cmp	r4, #0
   126f8:	db32      	blt.n	12760 <ble_ll_conn_is_peer_adv+0x94>
                (g_ble_ll_resolv_list[index].rl_addr_type == connsm->peer_addr_type)) {
   126fa:	2336      	movs	r3, #54	; 0x36
   126fc:	fb03 f304 	mul.w	r3, r3, r4
   12700:	4a33      	ldr	r2, [pc, #204]	; (127d0 <ble_ll_conn_is_peer_adv+0x104>)
   12702:	5cd2      	ldrb	r2, [r2, r3]
   12704:	f895 3092 	ldrb.w	r3, [r5, #146]	; 0x92
        if ((index >= 0) &&
   12708:	429a      	cmp	r2, r3
   1270a:	d021      	beq.n	12750 <ble_ll_conn_is_peer_adv+0x84>
    uint8_t *peer_addr = NULL;
   1270c:	2000      	movs	r0, #0
        if ((connsm->peer_addr_type == addr_type) && !peer_addr) {
   1270e:	f895 3092 	ldrb.w	r3, [r5, #146]	; 0x92
   12712:	42b3      	cmp	r3, r6
   12714:	d026      	beq.n	12764 <ble_ll_conn_is_peer_adv+0x98>
    if (peer_addr) {
   12716:	2800      	cmp	r0, #0
   12718:	d055      	beq.n	127c6 <ble_ll_conn_is_peer_adv+0xfa>
        if (!memcmp(peer_addr, connsm->peer_addr, BLE_DEV_ADDR_LEN)) {
   1271a:	2206      	movs	r2, #6
   1271c:	f105 0193 	add.w	r1, r5, #147	; 0x93
   12720:	f7fb fe82 	bl	e428 <memcmp>
   12724:	2800      	cmp	r0, #0
   12726:	d142      	bne.n	127ae <ble_ll_conn_is_peer_adv+0xe2>
            rc = 1;
   12728:	2001      	movs	r0, #1
   1272a:	e043      	b.n	127b4 <ble_ll_conn_is_peer_adv+0xe8>
            if (ble_ll_resolv_enabled()) {
   1272c:	f004 fcb6 	bl	1709c <ble_ll_resolv_enabled>
   12730:	2800      	cmp	r0, #0
   12732:	d0e0      	beq.n	126f6 <ble_ll_conn_is_peer_adv+0x2a>
                rl = ble_ll_resolv_list_find(adva, addr_type);
   12734:	4631      	mov	r1, r6
   12736:	4638      	mov	r0, r7
   12738:	f004 fa5a 	bl	16bf0 <ble_ll_resolv_list_find>
                if (rl && (rl->rl_priv_mode == BLE_HCI_PRIVACY_NETWORK) &&
   1273c:	2800      	cmp	r0, #0
   1273e:	d0da      	beq.n	126f6 <ble_ll_conn_is_peer_adv+0x2a>
   12740:	7842      	ldrb	r2, [r0, #1]
   12742:	2a00      	cmp	r2, #0
   12744:	d1d7      	bne.n	126f6 <ble_ll_conn_is_peer_adv+0x2a>
                    rl->rl_has_peer) {
   12746:	78c3      	ldrb	r3, [r0, #3]
                if (rl && (rl->rl_priv_mode == BLE_HCI_PRIVACY_NETWORK) &&
   12748:	2b00      	cmp	r3, #0
   1274a:	d0d4      	beq.n	126f6 <ble_ll_conn_is_peer_adv+0x2a>
                    return 0;
   1274c:	2000      	movs	r0, #0
   1274e:	e031      	b.n	127b4 <ble_ll_conn_is_peer_adv+0xe8>
            peer_addr = g_ble_ll_resolv_list[index].rl_identity_addr;
   12750:	2036      	movs	r0, #54	; 0x36
   12752:	fb00 f004 	mul.w	r0, r0, r4
   12756:	3020      	adds	r0, #32
   12758:	4b1d      	ldr	r3, [pc, #116]	; (127d0 <ble_ll_conn_is_peer_adv+0x104>)
   1275a:	4418      	add	r0, r3
   1275c:	3004      	adds	r0, #4
   1275e:	e7d6      	b.n	1270e <ble_ll_conn_is_peer_adv+0x42>
    uint8_t *peer_addr = NULL;
   12760:	2000      	movs	r0, #0
   12762:	e7d4      	b.n	1270e <ble_ll_conn_is_peer_adv+0x42>
        if ((connsm->peer_addr_type == addr_type) && !peer_addr) {
   12764:	2800      	cmp	r0, #0
   12766:	d1d6      	bne.n	12716 <ble_ll_conn_is_peer_adv+0x4a>
            peer_addr = adva;
   12768:	4638      	mov	r0, r7
   1276a:	e7d4      	b.n	12716 <ble_ll_conn_is_peer_adv+0x4a>
        if ((index < 0) ||
   1276c:	2c00      	cmp	r4, #0
   1276e:	db24      	blt.n	127ba <ble_ll_conn_is_peer_adv+0xee>
            (g_ble_ll_resolv_list[index].rl_addr_type != 0)) {
   12770:	2336      	movs	r3, #54	; 0x36
   12772:	fb03 f304 	mul.w	r3, r3, r4
   12776:	4a16      	ldr	r2, [pc, #88]	; (127d0 <ble_ll_conn_is_peer_adv+0x104>)
   12778:	5cd3      	ldrb	r3, [r2, r3]
        if ((index < 0) ||
   1277a:	bb03      	cbnz	r3, 127be <ble_ll_conn_is_peer_adv+0xf2>
        peer_addr = g_ble_ll_resolv_list[index].rl_identity_addr;
   1277c:	2036      	movs	r0, #54	; 0x36
   1277e:	fb00 f004 	mul.w	r0, r0, r4
   12782:	3020      	adds	r0, #32
   12784:	4410      	add	r0, r2
   12786:	3004      	adds	r0, #4
        break;
   12788:	e7c5      	b.n	12716 <ble_ll_conn_is_peer_adv+0x4a>
        if ((index < 0) ||
   1278a:	2c00      	cmp	r4, #0
   1278c:	db19      	blt.n	127c2 <ble_ll_conn_is_peer_adv+0xf6>
            (g_ble_ll_resolv_list[index].rl_addr_type != 1)) {
   1278e:	2336      	movs	r3, #54	; 0x36
   12790:	fb03 f304 	mul.w	r3, r3, r4
   12794:	4a0e      	ldr	r2, [pc, #56]	; (127d0 <ble_ll_conn_is_peer_adv+0x104>)
   12796:	5cd3      	ldrb	r3, [r2, r3]
        if ((index < 0) ||
   12798:	2b01      	cmp	r3, #1
   1279a:	d001      	beq.n	127a0 <ble_ll_conn_is_peer_adv+0xd4>
            return 0;
   1279c:	2000      	movs	r0, #0
   1279e:	e009      	b.n	127b4 <ble_ll_conn_is_peer_adv+0xe8>
        peer_addr = g_ble_ll_resolv_list[index].rl_identity_addr;
   127a0:	2036      	movs	r0, #54	; 0x36
   127a2:	fb00 f004 	mul.w	r0, r0, r4
   127a6:	3020      	adds	r0, #32
   127a8:	4410      	add	r0, r2
   127aa:	3004      	adds	r0, #4
        break;
   127ac:	e7b3      	b.n	12716 <ble_ll_conn_is_peer_adv+0x4a>
    rc = 0;
   127ae:	2000      	movs	r0, #0
   127b0:	e000      	b.n	127b4 <ble_ll_conn_is_peer_adv+0xe8>
        return 0;
   127b2:	2000      	movs	r0, #0
}
   127b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    rc = 0;
   127b6:	2000      	movs	r0, #0
   127b8:	e7fc      	b.n	127b4 <ble_ll_conn_is_peer_adv+0xe8>
            return 0;
   127ba:	2000      	movs	r0, #0
   127bc:	e7fa      	b.n	127b4 <ble_ll_conn_is_peer_adv+0xe8>
   127be:	2000      	movs	r0, #0
   127c0:	e7f8      	b.n	127b4 <ble_ll_conn_is_peer_adv+0xe8>
            return 0;
   127c2:	2000      	movs	r0, #0
   127c4:	e7f6      	b.n	127b4 <ble_ll_conn_is_peer_adv+0xe8>
    rc = 0;
   127c6:	2000      	movs	r0, #0
   127c8:	e7f4      	b.n	127b4 <ble_ll_conn_is_peer_adv+0xe8>
   127ca:	bf00      	nop
   127cc:	20003ea8 	.word	0x20003ea8
   127d0:	20004100 	.word	0x20004100

000127d4 <ble_ll_conn_connect_ind_prepare>:
{
   127d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   127d8:	460c      	mov	r4, r1
   127da:	461d      	mov	r5, r3
   127dc:	f89d 1020 	ldrb.w	r1, [sp, #32]
   127e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    if (adva_type) {
   127e2:	4690      	mov	r8, r2
   127e4:	b99a      	cbnz	r2, 1280e <ble_ll_conn_connect_ind_prepare+0x3a>
    hdr = BLE_ADV_PDU_TYPE_CONNECT_IND;
   127e6:	2605      	movs	r6, #5
    if (inita) {
   127e8:	b19b      	cbz	r3, 12812 <ble_ll_conn_connect_ind_prepare+0x3e>
        memcpy(pdu_data->inita, inita, BLE_DEV_ADDR_LEN);
   127ea:	681a      	ldr	r2, [r3, #0]
   127ec:	f8c4 2001 	str.w	r2, [r4, #1]
   127f0:	889b      	ldrh	r3, [r3, #4]
   127f2:	f8a4 3005 	strh.w	r3, [r4, #5]
        if (inita_type) {
   127f6:	b109      	cbz	r1, 127fc <ble_ll_conn_connect_ind_prepare+0x28>
            hdr |= BLE_ADV_PDU_HDR_TXADD_RAND;
   127f8:	f046 0640 	orr.w	r6, r6, #64	; 0x40
    memcpy(pdu_data->adva, adva, BLE_DEV_ADDR_LEN);
   127fc:	682b      	ldr	r3, [r5, #0]
   127fe:	f8c4 3007 	str.w	r3, [r4, #7]
   12802:	88ab      	ldrh	r3, [r5, #4]
   12804:	f8a4 300b 	strh.w	r3, [r4, #11]
    pdu_data->hdr_byte = hdr;
   12808:	7026      	strb	r6, [r4, #0]
}
   1280a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        hdr |= BLE_ADV_PDU_HDR_RXADD_MASK;
   1280e:	2685      	movs	r6, #133	; 0x85
   12810:	e7ea      	b.n	127e8 <ble_ll_conn_connect_ind_prepare+0x14>
        connsm = g_ble_ll_conn_create_sm;
   12812:	4b1c      	ldr	r3, [pc, #112]	; (12884 <ble_ll_conn_connect_ind_prepare+0xb0>)
   12814:	f8d3 9000 	ldr.w	r9, [r3]
        if ((connsm->own_addr_type & 1) == 0) {
   12818:	f899 3091 	ldrb.w	r3, [r9, #145]	; 0x91
   1281c:	f013 0f01 	tst.w	r3, #1
   12820:	d010      	beq.n	12844 <ble_ll_conn_connect_ind_prepare+0x70>
            hdr |= BLE_ADV_PDU_HDR_TXADD_RAND;
   12822:	f046 0640 	orr.w	r6, r6, #64	; 0x40
            addr = g_random_addr;
   12826:	4f18      	ldr	r7, [pc, #96]	; (12888 <ble_ll_conn_connect_ind_prepare+0xb4>)
        if (connsm->own_addr_type > BLE_HCI_ADV_OWN_ADDR_RANDOM) {
   12828:	2b01      	cmp	r3, #1
   1282a:	d80d      	bhi.n	12848 <ble_ll_conn_connect_ind_prepare+0x74>
        if (addr) {
   1282c:	2f00      	cmp	r7, #0
   1282e:	d0e5      	beq.n	127fc <ble_ll_conn_connect_ind_prepare+0x28>
            memcpy(pdu_data->inita, addr, BLE_DEV_ADDR_LEN);
   12830:	683b      	ldr	r3, [r7, #0]
   12832:	f8c4 3001 	str.w	r3, [r4, #1]
   12836:	88bb      	ldrh	r3, [r7, #4]
   12838:	f8a4 3005 	strh.w	r3, [r4, #5]
            connsm->inita_identity_used = 1;
   1283c:	2301      	movs	r3, #1
   1283e:	f889 3090 	strb.w	r3, [r9, #144]	; 0x90
   12842:	e7db      	b.n	127fc <ble_ll_conn_connect_ind_prepare+0x28>
            addr = g_dev_addr;
   12844:	4f11      	ldr	r7, [pc, #68]	; (1288c <ble_ll_conn_connect_ind_prepare+0xb8>)
   12846:	e7ef      	b.n	12828 <ble_ll_conn_connect_ind_prepare+0x54>
            is_rpa = ble_ll_is_rpa(adva, adva_type);
   12848:	4641      	mov	r1, r8
   1284a:	4628      	mov	r0, r5
   1284c:	f7fd fee3 	bl	10616 <ble_ll_is_rpa>
            if (is_rpa) {
   12850:	b198      	cbz	r0, 1287a <ble_ll_conn_connect_ind_prepare+0xa6>
                if (rpa_index >= 0) {
   12852:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   12854:	2b00      	cmp	r3, #0
   12856:	dbe9      	blt.n	1282c <ble_ll_conn_connect_ind_prepare+0x58>
                    rl = &g_ble_ll_resolv_list[rpa_index];
   12858:	2336      	movs	r3, #54	; 0x36
   1285a:	480d      	ldr	r0, [pc, #52]	; (12890 <ble_ll_conn_connect_ind_prepare+0xbc>)
   1285c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1285e:	fb03 0002 	mla	r0, r3, r2, r0
            if (rl && rl->rl_has_local) {
   12862:	2800      	cmp	r0, #0
   12864:	d0e2      	beq.n	1282c <ble_ll_conn_connect_ind_prepare+0x58>
   12866:	7883      	ldrb	r3, [r0, #2]
   12868:	2b00      	cmp	r3, #0
   1286a:	d0df      	beq.n	1282c <ble_ll_conn_connect_ind_prepare+0x58>
                hdr |= BLE_ADV_PDU_HDR_TXADD_RAND;
   1286c:	f046 0640 	orr.w	r6, r6, #64	; 0x40
                ble_ll_resolv_get_priv_addr(rl, 1, pdu_data->inita);
   12870:	1c62      	adds	r2, r4, #1
   12872:	2101      	movs	r1, #1
   12874:	f004 fb56 	bl	16f24 <ble_ll_resolv_get_priv_addr>
   12878:	e7c0      	b.n	127fc <ble_ll_conn_connect_ind_prepare+0x28>
                 rl = ble_ll_resolv_list_find(adva, adva_type);
   1287a:	4641      	mov	r1, r8
   1287c:	4628      	mov	r0, r5
   1287e:	f004 f9b7 	bl	16bf0 <ble_ll_resolv_list_find>
   12882:	e7ee      	b.n	12862 <ble_ll_conn_connect_ind_prepare+0x8e>
   12884:	20003ea8 	.word	0x20003ea8
   12888:	20003cec 	.word	0x20003cec
   1288c:	20003cf4 	.word	0x20003cf4
   12890:	20004100 	.word	0x20004100

00012894 <ble_ll_conn_is_lru>:
    if ((int32_t)(s1->last_scheduled - s2->last_scheduled) < 0) {
   12894:	6e43      	ldr	r3, [r0, #100]	; 0x64
   12896:	6e4a      	ldr	r2, [r1, #100]	; 0x64
   12898:	1a9b      	subs	r3, r3, r2
   1289a:	2b00      	cmp	r3, #0
   1289c:	db01      	blt.n	128a2 <ble_ll_conn_is_lru+0xe>
        rc = 0;
   1289e:	2000      	movs	r0, #0
}
   128a0:	4770      	bx	lr
        rc = 1;
   128a2:	2001      	movs	r0, #1
   128a4:	4770      	bx	lr
	...

000128a8 <ble_ll_conn_get_ce_end_time>:
{
   128a8:	b508      	push	{r3, lr}
    if (g_ble_ll_conn_cur_sm) {
   128aa:	4b04      	ldr	r3, [pc, #16]	; (128bc <ble_ll_conn_get_ce_end_time+0x14>)
   128ac:	681b      	ldr	r3, [r3, #0]
   128ae:	b10b      	cbz	r3, 128b4 <ble_ll_conn_get_ce_end_time+0xc>
        ce_end_time = g_ble_ll_conn_cur_sm->ce_end_time;
   128b0:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
}
   128b2:	bd08      	pop	{r3, pc}
        ce_end_time = os_cputime_get32();
   128b4:	f017 f80b 	bl	298ce <os_cputime_get32>
    return ce_end_time;
   128b8:	e7fb      	b.n	128b2 <ble_ll_conn_get_ce_end_time+0xa>
   128ba:	bf00      	nop
   128bc:	20003e98 	.word	0x20003e98

000128c0 <ble_ll_conn_find_active_conn>:
    if ((handle != 0) && (handle <= MYNEWT_VAL(BLE_MAX_CONNECTIONS))) {
   128c0:	2801      	cmp	r0, #1
   128c2:	d108      	bne.n	128d6 <ble_ll_conn_find_active_conn+0x16>
        connsm = &g_ble_ll_conn_sm[handle - 1];
   128c4:	3801      	subs	r0, #1
   128c6:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
   128ca:	4b05      	ldr	r3, [pc, #20]	; (128e0 <ble_ll_conn_find_active_conn+0x20>)
   128cc:	fb02 3000 	mla	r0, r2, r0, r3
        if (connsm->conn_state == BLE_LL_CONN_STATE_IDLE) {
   128d0:	7983      	ldrb	r3, [r0, #6]
   128d2:	b113      	cbz	r3, 128da <ble_ll_conn_find_active_conn+0x1a>
}
   128d4:	4770      	bx	lr
    connsm = NULL;
   128d6:	2000      	movs	r0, #0
   128d8:	4770      	bx	lr
            connsm = NULL;
   128da:	2000      	movs	r0, #0
    return connsm;
   128dc:	e7fa      	b.n	128d4 <ble_ll_conn_find_active_conn+0x14>
   128de:	bf00      	nop
   128e0:	20003eb0 	.word	0x20003eb0

000128e4 <ble_ll_conn_sm_get>:
    connsm = STAILQ_FIRST(&g_ble_ll_conn_free_list);
   128e4:	4b08      	ldr	r3, [pc, #32]	; (12908 <ble_ll_conn_sm_get+0x24>)
   128e6:	6818      	ldr	r0, [r3, #0]
    if (connsm) {
   128e8:	b140      	cbz	r0, 128fc <ble_ll_conn_sm_get+0x18>
        STAILQ_REMOVE_HEAD(&g_ble_ll_conn_free_list, free_stqe);
   128ea:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
   128ee:	4a06      	ldr	r2, [pc, #24]	; (12908 <ble_ll_conn_sm_get+0x24>)
   128f0:	6013      	str	r3, [r2, #0]
   128f2:	b103      	cbz	r3, 128f6 <ble_ll_conn_sm_get+0x12>
}
   128f4:	4770      	bx	lr
        STAILQ_REMOVE_HEAD(&g_ble_ll_conn_free_list, free_stqe);
   128f6:	4613      	mov	r3, r2
   128f8:	605a      	str	r2, [r3, #4]
   128fa:	4770      	bx	lr
        STATS_INC(ble_ll_conn_stats, no_free_conn_sm);
   128fc:	4a03      	ldr	r2, [pc, #12]	; (1290c <ble_ll_conn_sm_get+0x28>)
   128fe:	6a13      	ldr	r3, [r2, #32]
   12900:	3301      	adds	r3, #1
   12902:	6213      	str	r3, [r2, #32]
    return connsm;
   12904:	e7f6      	b.n	128f4 <ble_ll_conn_sm_get+0x10>
   12906:	bf00      	nop
   12908:	20003ea0 	.word	0x20003ea0
   1290c:	20004050 	.word	0x20004050

00012910 <ble_ll_conn_calc_dci>:
{
   12910:	b538      	push	{r3, r4, r5, lr}
   12912:	4605      	mov	r5, r0
   12914:	460c      	mov	r4, r1
    index = conn->data_chan_index;
   12916:	f890 002f 	ldrb.w	r0, [r0, #47]	; 0x2f
    while (latency > 0) {
   1291a:	e004      	b.n	12926 <ble_ll_conn_calc_dci+0x16>
        index = ble_ll_conn_calc_dci_csa1(conn);
   1291c:	4628      	mov	r0, r5
   1291e:	f7ff fa0a 	bl	11d36 <ble_ll_conn_calc_dci_csa1>
        latency--;
   12922:	3c01      	subs	r4, #1
   12924:	b2a4      	uxth	r4, r4
    while (latency > 0) {
   12926:	2c00      	cmp	r4, #0
   12928:	d1f8      	bne.n	1291c <ble_ll_conn_calc_dci+0xc>
}
   1292a:	bd38      	pop	{r3, r4, r5, pc}

0001292c <ble_ll_conn_next_event>:
{
   1292c:	b570      	push	{r4, r5, r6, lr}
   1292e:	4604      	mov	r4, r0
    ble_ll_conn_chk_csm_flags(connsm);
   12930:	f7ff fe46 	bl	125c0 <ble_ll_conn_chk_csm_flags>
    if (connsm->disconnect_reason && !CONN_F_TERMINATE_STARTED(connsm)) {
   12934:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   12938:	b11b      	cbz	r3, 12942 <ble_ll_conn_next_event+0x16>
   1293a:	f994 3000 	ldrsb.w	r3, [r4]
   1293e:	2b00      	cmp	r3, #0
   12940:	da59      	bge.n	129f6 <ble_ll_conn_next_event+0xca>
    if (CONN_F_TERMINATE_STARTED(connsm) && (connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE)) {
   12942:	7822      	ldrb	r2, [r4, #0]
   12944:	f012 0f80 	tst.w	r2, #128	; 0x80
   12948:	d159      	bne.n	129fe <ble_ll_conn_next_event+0xd2>
    itvl = connsm->conn_itvl * BLE_LL_CONN_ITVL_USECS;
   1294a:	f8b4 0068 	ldrh.w	r0, [r4, #104]	; 0x68
   1294e:	f240 45e2 	movw	r5, #1250	; 0x4e2
   12952:	fb05 f500 	mul.w	r5, r5, r0
        !CONN_F_PHY_UPDATE_SCHED(connsm)                &&
   12956:	6821      	ldr	r1, [r4, #0]
   12958:	4b8c      	ldr	r3, [pc, #560]	; (12b8c <ble_ll_conn_next_event+0x260>)
   1295a:	400b      	ands	r3, r1
    if (connsm->csmflags.cfbit.allow_slave_latency      &&
   1295c:	2b10      	cmp	r3, #16
   1295e:	d055      	beq.n	12a0c <ble_ll_conn_next_event+0xe0>
    latency = 1;
   12960:	2601      	movs	r6, #1
    connsm->event_cntr += latency;
   12962:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
   12966:	4433      	add	r3, r6
   12968:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
    if (latency == 1) {
   1296c:	2e01      	cmp	r6, #1
   1296e:	d159      	bne.n	12a24 <ble_ll_conn_next_event+0xf8>
        connsm->anchor_point += connsm->conn_itvl_ticks;
   12970:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
   12972:	6f63      	ldr	r3, [r4, #116]	; 0x74
   12974:	4413      	add	r3, r2
   12976:	6763      	str	r3, [r4, #116]	; 0x74
        connsm->anchor_point_usecs += connsm->conn_itvl_usecs;
   12978:	f894 3079 	ldrb.w	r3, [r4, #121]	; 0x79
   1297c:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
   12980:	4413      	add	r3, r2
   12982:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    if (connsm->anchor_point_usecs >= 31) {
   12986:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   1298a:	2b1e      	cmp	r3, #30
   1298c:	d905      	bls.n	1299a <ble_ll_conn_next_event+0x6e>
        ++connsm->anchor_point;
   1298e:	6f62      	ldr	r2, [r4, #116]	; 0x74
   12990:	3201      	adds	r2, #1
   12992:	6762      	str	r2, [r4, #116]	; 0x74
        connsm->anchor_point_usecs -= 31;
   12994:	3b1f      	subs	r3, #31
   12996:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    if (connsm->csmflags.cfbit.conn_update_sched &&
   1299a:	7863      	ldrb	r3, [r4, #1]
   1299c:	f013 0f01 	tst.w	r3, #1
   129a0:	d005      	beq.n	129ae <ble_ll_conn_next_event+0x82>
        (connsm->event_cntr == connsm->conn_update_req.instant)) {
   129a2:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
   129a6:	f8b4 3180 	ldrh.w	r3, [r4, #384]	; 0x180
    if (connsm->csmflags.cfbit.conn_update_sched &&
   129aa:	429a      	cmp	r2, r3
   129ac:	d049      	beq.n	12a42 <ble_ll_conn_next_event+0x116>
    if (connsm->csmflags.cfbit.chanmap_update_scheduled &&
   129ae:	7863      	ldrb	r3, [r4, #1]
   129b0:	f013 0f10 	tst.w	r3, #16
   129b4:	d007      	beq.n	129c6 <ble_ll_conn_next_event+0x9a>
        ((int16_t)(connsm->chanmap_instant - connsm->event_cntr) <= 0)) {
   129b6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
   129b8:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
   129bc:	1a9b      	subs	r3, r3, r2
   129be:	b21b      	sxth	r3, r3
    if (connsm->csmflags.cfbit.chanmap_update_scheduled &&
   129c0:	2b00      	cmp	r3, #0
   129c2:	f340 80a4 	ble.w	12b0e <ble_ll_conn_next_event+0x1e2>
    connsm->data_chan_index = ble_ll_conn_calc_dci(connsm, latency);
   129c6:	4631      	mov	r1, r6
   129c8:	4620      	mov	r0, r4
   129ca:	f7ff ffa1 	bl	12910 <ble_ll_conn_calc_dci>
   129ce:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
    if (CONN_F_TERMINATE_STARTED(connsm)) {
   129d2:	f994 3000 	ldrsb.w	r3, [r4]
   129d6:	2b00      	cmp	r3, #0
   129d8:	f2c0 80b0 	blt.w	12b3c <ble_ll_conn_next_event+0x210>
    if (connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) {
   129dc:	79e3      	ldrb	r3, [r4, #7]
   129de:	2b02      	cmp	r3, #2
   129e0:	f000 80b5 	beq.w	12b4e <ble_ll_conn_next_event+0x222>
    itvl = MYNEWT_VAL(BLE_LL_CONN_INIT_SLOTS) * BLE_LL_SCHED_32KHZ_TICKS_PER_SLOT;
   129e4:	23a4      	movs	r3, #164	; 0xa4
    itvl -= g_ble_ll_sched_offset_ticks;
   129e6:	4a6a      	ldr	r2, [pc, #424]	; (12b90 <ble_ll_conn_next_event+0x264>)
   129e8:	7810      	ldrb	r0, [r2, #0]
   129ea:	1a18      	subs	r0, r3, r0
    connsm->ce_end_time = connsm->anchor_point + itvl;
   129ec:	6f63      	ldr	r3, [r4, #116]	; 0x74
   129ee:	4403      	add	r3, r0
   129f0:	65e3      	str	r3, [r4, #92]	; 0x5c
    return 0;
   129f2:	2000      	movs	r0, #0
}
   129f4:	bd70      	pop	{r4, r5, r6, pc}
        ble_ll_ctrl_terminate_start(connsm);
   129f6:	4620      	mov	r0, r4
   129f8:	f002 fd1c 	bl	15434 <ble_ll_ctrl_terminate_start>
   129fc:	e7a1      	b.n	12942 <ble_ll_conn_next_event+0x16>
    if (CONN_F_TERMINATE_STARTED(connsm) && (connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE)) {
   129fe:	79e3      	ldrb	r3, [r4, #7]
   12a00:	2b02      	cmp	r3, #2
   12a02:	d1a2      	bne.n	1294a <ble_ll_conn_next_event+0x1e>
        connsm->slave_latency = 0;
   12a04:	2300      	movs	r3, #0
   12a06:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
   12a0a:	e79e      	b.n	1294a <ble_ll_conn_next_event+0x1e>
        if (connsm->csmflags.cfbit.pkt_rxd) {
   12a0c:	f012 0f01 	tst.w	r2, #1
   12a10:	d006      	beq.n	12a20 <ble_ll_conn_next_event+0xf4>
            latency += connsm->slave_latency;
   12a12:	f8b4 606a 	ldrh.w	r6, [r4, #106]	; 0x6a
   12a16:	3601      	adds	r6, #1
   12a18:	b2b6      	uxth	r6, r6
            itvl = itvl * latency;
   12a1a:	fb06 f505 	mul.w	r5, r6, r5
   12a1e:	e7a0      	b.n	12962 <ble_ll_conn_next_event+0x36>
    latency = 1;
   12a20:	2601      	movs	r6, #1
   12a22:	e79e      	b.n	12962 <ble_ll_conn_next_event+0x36>
        ticks = os_cputime_usecs_to_ticks(itvl);
   12a24:	4628      	mov	r0, r5
   12a26:	f016 ff57 	bl	298d8 <os_cputime_usecs_to_ticks>
        connsm->anchor_point += ticks;
   12a2a:	6f63      	ldr	r3, [r4, #116]	; 0x74
   12a2c:	4403      	add	r3, r0
   12a2e:	6763      	str	r3, [r4, #116]	; 0x74
        connsm->anchor_point_usecs += (itvl - os_cputime_ticks_to_usecs(ticks));
   12a30:	f016 ff5a 	bl	298e8 <os_cputime_ticks_to_usecs>
   12a34:	1a28      	subs	r0, r5, r0
   12a36:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
   12a3a:	4428      	add	r0, r5
   12a3c:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78
   12a40:	e7a1      	b.n	12986 <ble_ll_conn_next_event+0x5a>
        if ((connsm->conn_role == BLE_LL_CONN_ROLE_MASTER)  ||
   12a42:	79e3      	ldrb	r3, [r4, #7]
   12a44:	2b01      	cmp	r3, #1
   12a46:	d007      	beq.n	12a58 <ble_ll_conn_next_event+0x12c>
   12a48:	2b02      	cmp	r3, #2
   12a4a:	d031      	beq.n	12ab0 <ble_ll_conn_next_event+0x184>
            (connsm->conn_itvl != upd->interval)            ||
   12a4c:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
   12a50:	f8b4 317a 	ldrh.w	r3, [r4, #378]	; 0x17a
             IS_PENDING_CTRL_PROC(connsm, BLE_LL_CTRL_PROC_CONN_PARAM_REQ)) ||
   12a54:	429a      	cmp	r2, r3
   12a56:	d031      	beq.n	12abc <ble_ll_conn_next_event+0x190>
            connsm->csmflags.cfbit.host_expects_upd_event = 1;
   12a58:	7863      	ldrb	r3, [r4, #1]
   12a5a:	f043 0302 	orr.w	r3, r3, #2
   12a5e:	7063      	strb	r3, [r4, #1]
        connsm->supervision_tmo = upd->timeout;
   12a60:	f8b4 317e 	ldrh.w	r3, [r4, #382]	; 0x17e
   12a64:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
        connsm->slave_latency = upd->latency;
   12a68:	f8b4 317c 	ldrh.w	r3, [r4, #380]	; 0x17c
   12a6c:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
        connsm->tx_win_size = upd->winsize;
   12a70:	f894 2176 	ldrb.w	r2, [r4, #374]	; 0x176
   12a74:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
            connsm->tx_win_size * BLE_LL_CONN_TX_WIN_USECS;
   12a78:	f240 43e2 	movw	r3, #1250	; 0x4e2
   12a7c:	fb03 f302 	mul.w	r3, r3, r2
        connsm->slave_cur_tx_win_usecs =
   12a80:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        connsm->tx_win_off = upd->winoffset;
   12a84:	f8b4 3178 	ldrh.w	r3, [r4, #376]	; 0x178
   12a88:	f8a4 3072 	strh.w	r3, [r4, #114]	; 0x72
        connsm->conn_itvl = upd->interval;
   12a8c:	f8b4 317a 	ldrh.w	r3, [r4, #378]	; 0x17a
   12a90:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
        ble_ll_conn_calc_itvl_ticks(connsm);
   12a94:	4620      	mov	r0, r4
   12a96:	f7ff fd41 	bl	1251c <ble_ll_conn_calc_itvl_ticks>
        if (upd->winoffset != 0) {
   12a9a:	f8b4 3178 	ldrh.w	r3, [r4, #376]	; 0x178
   12a9e:	b9d3      	cbnz	r3, 12ad6 <ble_ll_conn_next_event+0x1aa>
        connsm->last_rxd_pdu_cputime = connsm->anchor_point;
   12aa0:	6f63      	ldr	r3, [r4, #116]	; 0x74
   12aa2:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        connsm->csmflags.cfbit.conn_update_sched = 0;
   12aa6:	7863      	ldrb	r3, [r4, #1]
   12aa8:	f36f 0300 	bfc	r3, #0, #1
   12aac:	7063      	strb	r3, [r4, #1]
   12aae:	e77e      	b.n	129ae <ble_ll_conn_next_event+0x82>
             IS_PENDING_CTRL_PROC(connsm, BLE_LL_CTRL_PROC_CONN_PARAM_REQ)) ||
   12ab0:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
            ((connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) &&
   12ab4:	f013 0f40 	tst.w	r3, #64	; 0x40
   12ab8:	d1ce      	bne.n	12a58 <ble_ll_conn_next_event+0x12c>
   12aba:	e7c7      	b.n	12a4c <ble_ll_conn_next_event+0x120>
            (connsm->slave_latency != upd->latency)         ||
   12abc:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
   12ac0:	f8b4 317c 	ldrh.w	r3, [r4, #380]	; 0x17c
            (connsm->conn_itvl != upd->interval)            ||
   12ac4:	429a      	cmp	r2, r3
   12ac6:	d1c7      	bne.n	12a58 <ble_ll_conn_next_event+0x12c>
            (connsm->supervision_tmo != upd->timeout)) {
   12ac8:	f8b4 206c 	ldrh.w	r2, [r4, #108]	; 0x6c
   12acc:	f8b4 317e 	ldrh.w	r3, [r4, #382]	; 0x17e
            (connsm->slave_latency != upd->latency)         ||
   12ad0:	429a      	cmp	r2, r3
   12ad2:	d1c1      	bne.n	12a58 <ble_ll_conn_next_event+0x12c>
   12ad4:	e7c4      	b.n	12a60 <ble_ll_conn_next_event+0x134>
            usecs = upd->winoffset * BLE_LL_CONN_ITVL_USECS;
   12ad6:	f240 45e2 	movw	r5, #1250	; 0x4e2
   12ada:	fb05 f503 	mul.w	r5, r5, r3
            ticks = os_cputime_usecs_to_ticks(usecs);
   12ade:	4628      	mov	r0, r5
   12ae0:	f016 fefa 	bl	298d8 <os_cputime_usecs_to_ticks>
            connsm->anchor_point += ticks;
   12ae4:	6f63      	ldr	r3, [r4, #116]	; 0x74
   12ae6:	4403      	add	r3, r0
   12ae8:	6763      	str	r3, [r4, #116]	; 0x74
            usecs = usecs - os_cputime_ticks_to_usecs(ticks);
   12aea:	f016 fefd 	bl	298e8 <os_cputime_ticks_to_usecs>
   12aee:	1a28      	subs	r0, r5, r0
            connsm->anchor_point_usecs += usecs;
   12af0:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   12af4:	4403      	add	r3, r0
   12af6:	b2db      	uxtb	r3, r3
   12af8:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
            if (connsm->anchor_point_usecs >= 31) {
   12afc:	2b1e      	cmp	r3, #30
   12afe:	d9cf      	bls.n	12aa0 <ble_ll_conn_next_event+0x174>
                ++connsm->anchor_point;
   12b00:	6f62      	ldr	r2, [r4, #116]	; 0x74
   12b02:	3201      	adds	r2, #1
   12b04:	6762      	str	r2, [r4, #116]	; 0x74
                connsm->anchor_point_usecs -= 31;
   12b06:	3b1f      	subs	r3, #31
   12b08:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
   12b0c:	e7c8      	b.n	12aa0 <ble_ll_conn_next_event+0x174>
            ble_ll_utils_calc_num_used_chans(connsm->req_chanmap);
   12b0e:	f104 0525 	add.w	r5, r4, #37	; 0x25
   12b12:	4628      	mov	r0, r5
   12b14:	f006 faa3 	bl	1905e <ble_ll_utils_calc_num_used_chans>
        connsm->num_used_chans =
   12b18:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
        memcpy(connsm->chanmap, connsm->req_chanmap, BLE_LL_CONN_CHMAP_LEN);
   12b1c:	f8d4 3025 	ldr.w	r3, [r4, #37]	; 0x25
   12b20:	6223      	str	r3, [r4, #32]
   12b22:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   12b26:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
        connsm->csmflags.cfbit.chanmap_update_scheduled = 0;
   12b2a:	7863      	ldrb	r3, [r4, #1]
   12b2c:	f36f 1304 	bfc	r3, #4, #1
   12b30:	7063      	strb	r3, [r4, #1]
        ble_ll_ctrl_proc_stop(connsm, BLE_LL_CTRL_PROC_CHAN_MAP_UPD);
   12b32:	2101      	movs	r1, #1
   12b34:	4620      	mov	r0, r4
   12b36:	f002 fd1a 	bl	1556e <ble_ll_ctrl_proc_stop>
   12b3a:	e744      	b.n	129c6 <ble_ll_conn_next_event+0x9a>
        if ((int32_t)(connsm->terminate_timeout - connsm->anchor_point) <= 0) {
   12b3c:	6e23      	ldr	r3, [r4, #96]	; 0x60
   12b3e:	6f62      	ldr	r2, [r4, #116]	; 0x74
   12b40:	1a9b      	subs	r3, r3, r2
   12b42:	2b00      	cmp	r3, #0
   12b44:	f73f af4a 	bgt.w	129dc <ble_ll_conn_next_event+0xb0>
            return -1;
   12b48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12b4c:	e752      	b.n	129f4 <ble_ll_conn_next_event+0xc8>
        cur_ww = ble_ll_utils_calc_window_widening(connsm->anchor_point,
   12b4e:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
   12b52:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
   12b56:	6f60      	ldr	r0, [r4, #116]	; 0x74
   12b58:	f006 faa0 	bl	1909c <ble_ll_utils_calc_window_widening>
        max_ww = (connsm->conn_itvl * (BLE_LL_CONN_ITVL_USECS/2)) - BLE_LL_IFS;
   12b5c:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
   12b60:	f240 2371 	movw	r3, #625	; 0x271
   12b64:	fb03 f302 	mul.w	r3, r3, r2
   12b68:	3b96      	subs	r3, #150	; 0x96
        if (cur_ww >= max_ww) {
   12b6a:	4298      	cmp	r0, r3
   12b6c:	d20a      	bcs.n	12b84 <ble_ll_conn_next_event+0x258>
        cur_ww += BLE_LL_JITTER_USECS;
   12b6e:	3010      	adds	r0, #16
        connsm->slave_cur_window_widening = cur_ww;
   12b70:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
        itvl += os_cputime_usecs_to_ticks(cur_ww + connsm->slave_cur_tx_win_usecs);
   12b74:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
   12b78:	4418      	add	r0, r3
   12b7a:	f016 fead 	bl	298d8 <os_cputime_usecs_to_ticks>
   12b7e:	f100 03a4 	add.w	r3, r0, #164	; 0xa4
   12b82:	e730      	b.n	129e6 <ble_ll_conn_next_event+0xba>
            return -1;
   12b84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12b88:	e734      	b.n	129f4 <ble_ll_conn_next_event+0xc8>
   12b8a:	bf00      	nop
   12b8c:	00401110 	.word	0x00401110
   12b90:	20004250 	.word	0x20004250

00012b94 <ble_ll_conn_created>:
{
   12b94:	b570      	push	{r4, r5, r6, lr}
   12b96:	4604      	mov	r4, r0
   12b98:	460d      	mov	r5, r1
    connsm->conn_state = BLE_LL_CONN_STATE_CREATED;
   12b9a:	2301      	movs	r3, #1
   12b9c:	7183      	strb	r3, [r0, #6]
    connsm->csmflags.cfbit.pkt_rxd = 0;
   12b9e:	7803      	ldrb	r3, [r0, #0]
   12ba0:	f36f 0300 	bfc	r3, #0, #1
   12ba4:	7003      	strb	r3, [r0, #0]
    connsm->last_scheduled = os_cputime_get32();
   12ba6:	f016 fe92 	bl	298ce <os_cputime_get32>
   12baa:	6660      	str	r0, [r4, #100]	; 0x64
    connsm->last_rxd_pdu_cputime = connsm->last_scheduled;
   12bac:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) {
   12bb0:	79e3      	ldrb	r3, [r4, #7]
   12bb2:	2b02      	cmp	r3, #2
   12bb4:	d010      	beq.n	12bd8 <ble_ll_conn_created+0x44>
        if (connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) {
   12bb6:	79e3      	ldrb	r3, [r4, #7]
   12bb8:	2b02      	cmp	r3, #2
   12bba:	d06e      	beq.n	12c9a <ble_ll_conn_created+0x106>
            evbuf = ble_ll_init_get_conn_comp_ev();
   12bbc:	f7ff f916 	bl	11dec <ble_ll_init_get_conn_comp_ev>
            ble_ll_conn_comp_event_send(connsm, BLE_ERR_SUCCESS, evbuf, NULL);
   12bc0:	2300      	movs	r3, #0
   12bc2:	4602      	mov	r2, r0
   12bc4:	4619      	mov	r1, r3
   12bc6:	4620      	mov	r0, r4
   12bc8:	f001 fa08 	bl	13fdc <ble_ll_conn_comp_event_send>
            ble_ll_ctrl_proc_start(connsm, BLE_LL_CTRL_PROC_FEATURE_XCHG);
   12bcc:	2103      	movs	r1, #3
   12bce:	4620      	mov	r0, r4
   12bd0:	f002 fc56 	bl	15480 <ble_ll_ctrl_proc_start>
   12bd4:	2001      	movs	r0, #1
}
   12bd6:	bd70      	pop	{r4, r5, r6, pc}
        connsm->last_anchor_point = rxhdr->beg_cputime;
   12bd8:	68ab      	ldr	r3, [r5, #8]
   12bda:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
        usecs = rxhdr->rem_usecs + 1250 +
   12bde:	68ee      	ldr	r6, [r5, #12]
                (connsm->tx_win_off * BLE_LL_CONN_TX_WIN_USECS) +
   12be0:	f8b4 0072 	ldrh.w	r0, [r4, #114]	; 0x72
        usecs = rxhdr->rem_usecs + 1250 +
   12be4:	f240 43e2 	movw	r3, #1250	; 0x4e2
   12be8:	fb03 6600 	mla	r6, r3, r0, r6
                ble_ll_pdu_tx_time_get(BLE_CONNECT_REQ_LEN,
   12bec:	79a9      	ldrb	r1, [r5, #6]
   12bee:	2022      	movs	r0, #34	; 0x22
   12bf0:	f7fd ff44 	bl	10a7c <ble_ll_pdu_tx_time_get>
                (connsm->tx_win_off * BLE_LL_CONN_TX_WIN_USECS) +
   12bf4:	4430      	add	r0, r6
        usecs = rxhdr->rem_usecs + 1250 +
   12bf6:	f200 46e2 	addw	r6, r0, #1250	; 0x4e2
        if (rxhdr->rxinfo.channel < BLE_PHY_NUM_DATA_CHANS) {
   12bfa:	78ab      	ldrb	r3, [r5, #2]
   12bfc:	2b24      	cmp	r3, #36	; 0x24
   12bfe:	d80c      	bhi.n	12c1a <ble_ll_conn_created+0x86>
            switch (rxhdr->rxinfo.phy) {
   12c00:	f995 3005 	ldrsb.w	r3, [r5, #5]
   12c04:	2b01      	cmp	r3, #1
   12c06:	db37      	blt.n	12c78 <ble_ll_conn_created+0xe4>
   12c08:	2b02      	cmp	r3, #2
   12c0a:	dd04      	ble.n	12c16 <ble_ll_conn_created+0x82>
   12c0c:	2b03      	cmp	r3, #3
   12c0e:	d133      	bne.n	12c78 <ble_ll_conn_created+0xe4>
                usecs += 2500;
   12c10:	f600 66a6 	addw	r6, r0, #3750	; 0xea6
                break;
   12c14:	e001      	b.n	12c1a <ble_ll_conn_created+0x86>
                usecs += 1250;
   12c16:	f600 16c4 	addw	r6, r0, #2500	; 0x9c4
        endtime = os_cputime_usecs_to_ticks(usecs);
   12c1a:	4630      	mov	r0, r6
   12c1c:	f016 fe5c 	bl	298d8 <os_cputime_usecs_to_ticks>
        connsm->anchor_point = rxhdr->beg_cputime + endtime;
   12c20:	68ab      	ldr	r3, [r5, #8]
   12c22:	4403      	add	r3, r0
   12c24:	6763      	str	r3, [r4, #116]	; 0x74
        connsm->anchor_point_usecs = usecs - os_cputime_ticks_to_usecs(endtime);
   12c26:	f016 fe5f 	bl	298e8 <os_cputime_ticks_to_usecs>
   12c2a:	1a30      	subs	r0, r6, r0
   12c2c:	b2c0      	uxtb	r0, r0
   12c2e:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78
        if (connsm->anchor_point_usecs == 31) {
   12c32:	281f      	cmp	r0, #31
   12c34:	d02a      	beq.n	12c8c <ble_ll_conn_created+0xf8>
            connsm->tx_win_size * BLE_LL_CONN_TX_WIN_USECS;
   12c36:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
   12c3a:	f240 40e2 	movw	r0, #1250	; 0x4e2
   12c3e:	fb00 f003 	mul.w	r0, r0, r3
        connsm->slave_cur_tx_win_usecs =
   12c42:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
        connsm->ce_end_time = connsm->anchor_point +
   12c46:	6f66      	ldr	r6, [r4, #116]	; 0x74
            + os_cputime_usecs_to_ticks(connsm->slave_cur_tx_win_usecs) + 1;
   12c48:	f016 fe46 	bl	298d8 <os_cputime_usecs_to_ticks>
   12c4c:	4430      	add	r0, r6
   12c4e:	30a5      	adds	r0, #165	; 0xa5
        connsm->ce_end_time = connsm->anchor_point +
   12c50:	65e0      	str	r0, [r4, #92]	; 0x5c
        connsm->slave_cur_window_widening = BLE_LL_JITTER_USECS;
   12c52:	2310      	movs	r3, #16
   12c54:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        while (ble_ll_sched_slave_new(connsm)) {
   12c58:	4620      	mov	r0, r4
   12c5a:	f005 ff39 	bl	18ad0 <ble_ll_sched_slave_new>
   12c5e:	2800      	cmp	r0, #0
   12c60:	d0a9      	beq.n	12bb6 <ble_ll_conn_created+0x22>
            if (ble_ll_conn_next_event(connsm)) {
   12c62:	4620      	mov	r0, r4
   12c64:	f7ff fe62 	bl	1292c <ble_ll_conn_next_event>
   12c68:	2800      	cmp	r0, #0
   12c6a:	d0f5      	beq.n	12c58 <ble_ll_conn_created+0xc4>
                STATS_INC(ble_ll_conn_stats, cant_set_sched);
   12c6c:	4a0e      	ldr	r2, [pc, #56]	; (12ca8 <ble_ll_conn_created+0x114>)
   12c6e:	68d3      	ldr	r3, [r2, #12]
   12c70:	3301      	adds	r3, #1
   12c72:	60d3      	str	r3, [r2, #12]
                rc = 0;
   12c74:	2000      	movs	r0, #0
   12c76:	e7ae      	b.n	12bd6 <ble_ll_conn_created+0x42>
                BLE_LL_ASSERT(0);
   12c78:	f7f9 fab6 	bl	c1e8 <hal_debugger_connected>
   12c7c:	b100      	cbz	r0, 12c80 <ble_ll_conn_created+0xec>
   12c7e:	be01      	bkpt	0x0001
   12c80:	2300      	movs	r3, #0
   12c82:	461a      	mov	r2, r3
   12c84:	4619      	mov	r1, r3
   12c86:	4618      	mov	r0, r3
   12c88:	f7f9 fce8 	bl	c65c <__assert_func>
            ++connsm->anchor_point;
   12c8c:	6f63      	ldr	r3, [r4, #116]	; 0x74
   12c8e:	3301      	adds	r3, #1
   12c90:	6763      	str	r3, [r4, #116]	; 0x74
            connsm->anchor_point_usecs = 0;
   12c92:	2300      	movs	r3, #0
   12c94:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
   12c98:	e7cd      	b.n	12c36 <ble_ll_conn_created+0xa2>
            ble_ll_adv_send_conn_comp_ev(connsm, rxhdr);
   12c9a:	4629      	mov	r1, r5
   12c9c:	4620      	mov	r0, r4
   12c9e:	f7fe ffcd 	bl	11c3c <ble_ll_adv_send_conn_comp_ev>
   12ca2:	2001      	movs	r0, #1
   12ca4:	e797      	b.n	12bd6 <ble_ll_conn_created+0x42>
   12ca6:	bf00      	nop
   12ca8:	20004050 	.word	0x20004050

00012cac <ble_ll_conn_set_csa>:
{
   12cac:	b510      	push	{r4, lr}
   12cae:	4604      	mov	r4, r0
    connsm->last_unmapped_chan = 0;
   12cb0:	2300      	movs	r3, #0
   12cb2:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
    connsm->data_chan_index = ble_ll_conn_calc_dci(connsm, 1);
   12cb6:	2101      	movs	r1, #1
   12cb8:	f7ff fe2a 	bl	12910 <ble_ll_conn_calc_dci>
   12cbc:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
}
   12cc0:	bd10      	pop	{r4, pc}
	...

00012cc4 <ble_ll_conn_wfr_timer_exp>:
{
   12cc4:	b508      	push	{r3, lr}
    ble_ll_conn_current_sm_over(connsm);
   12cc6:	4b04      	ldr	r3, [pc, #16]	; (12cd8 <ble_ll_conn_wfr_timer_exp+0x14>)
   12cc8:	6818      	ldr	r0, [r3, #0]
   12cca:	f7ff f867 	bl	11d9c <ble_ll_conn_current_sm_over>
    STATS_INC(ble_ll_conn_stats, wfr_expirations);
   12cce:	4a03      	ldr	r2, [pc, #12]	; (12cdc <ble_ll_conn_wfr_timer_exp+0x18>)
   12cd0:	6953      	ldr	r3, [r2, #20]
   12cd2:	3301      	adds	r3, #1
   12cd4:	6153      	str	r3, [r2, #20]
}
   12cd6:	bd08      	pop	{r3, pc}
   12cd8:	20003e98 	.word	0x20003e98
   12cdc:	20004050 	.word	0x20004050

00012ce0 <ble_ll_conn_reset_pending_aux_conn_rsp>:
}
   12ce0:	4770      	bx	lr

00012ce2 <ble_ll_conn_init_wfr_timer_exp>:
}
   12ce2:	4770      	bx	lr

00012ce4 <ble_ll_conn_auth_pyld_timer_start>:
{
   12ce4:	b510      	push	{r4, lr}
   12ce6:	4604      	mov	r4, r0
    tmo = (int32_t)BLE_LL_CONN_AUTH_PYLD_OS_TMO(connsm->auth_pyld_tmo);
   12ce8:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
   12cec:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   12cf0:	0058      	lsls	r0, r3, #1
os_time_ms_to_ticks32(uint32_t ms)
{
#if OS_TICKS_PER_SEC == 1000
    return ms;
#else
    return ((uint64_t)ms * OS_TICKS_PER_SEC) / 1000;
   12cf2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   12cf6:	2300      	movs	r3, #0
   12cf8:	01c0      	lsls	r0, r0, #7
   12cfa:	2100      	movs	r1, #0
   12cfc:	f017 fe26 	bl	2a94c <__aeabi_uldivmod>
    return (ble_npl_error_t)os_callout_reset(&co->co, ticks);
   12d00:	4601      	mov	r1, r0
   12d02:	f104 00f8 	add.w	r0, r4, #248	; 0xf8
   12d06:	f7f9 fe7d 	bl	ca04 <os_callout_reset>
}
   12d0a:	bd10      	pop	{r4, pc}

00012d0c <ble_ll_conn_auth_pyld_timer_cb>:
{
   12d0c:	b510      	push	{r4, lr}
    return ev->ev.ev_arg;
   12d0e:	6884      	ldr	r4, [r0, #8]
    ble_ll_auth_pyld_tmo_event_send(connsm);
   12d10:	4620      	mov	r0, r4
   12d12:	f001 faa3 	bl	1425c <ble_ll_auth_pyld_tmo_event_send>
    ble_ll_ctrl_proc_start(connsm, BLE_LL_CTRL_PROC_LE_PING);
   12d16:	2107      	movs	r1, #7
   12d18:	4620      	mov	r0, r4
   12d1a:	f002 fbb1 	bl	15480 <ble_ll_ctrl_proc_start>
    ble_ll_conn_auth_pyld_timer_start(connsm);
   12d1e:	4620      	mov	r0, r4
   12d20:	f7ff ffe0 	bl	12ce4 <ble_ll_conn_auth_pyld_timer_start>
}
   12d24:	bd10      	pop	{r4, pc}

00012d26 <ble_ll_conn_master_init>:
{
   12d26:	b538      	push	{r3, r4, r5, lr}
   12d28:	4605      	mov	r5, r0
   12d2a:	460c      	mov	r4, r1
    ble_ll_conn_master_common_init(connsm);
   12d2c:	f7ff fbbe 	bl	124ac <ble_ll_conn_master_common_init>
    connsm->slave_latency = hcc->conn_latency;
   12d30:	8a63      	ldrh	r3, [r4, #18]
   12d32:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
    connsm->supervision_tmo = hcc->supervision_timeout;
   12d36:	8aa3      	ldrh	r3, [r4, #20]
   12d38:	f8a5 306c 	strh.w	r3, [r5, #108]	; 0x6c
    connsm->own_addr_type = hcc->own_addr_type;
   12d3c:	7b23      	ldrb	r3, [r4, #12]
   12d3e:	f885 3091 	strb.w	r3, [r5, #145]	; 0x91
    if (hcc->filter_policy == 0) {
   12d42:	7923      	ldrb	r3, [r4, #4]
   12d44:	b173      	cbz	r3, 12d64 <ble_ll_conn_master_init+0x3e>
    connsm->conn_itvl = hcc->conn_itvl_max;
   12d46:	8a23      	ldrh	r3, [r4, #16]
   12d48:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
    if (hcc->min_ce_len > (connsm->conn_itvl * 2)) {
   12d4c:	8ae1      	ldrh	r1, [r4, #22]
   12d4e:	005a      	lsls	r2, r3, #1
   12d50:	4291      	cmp	r1, r2
   12d52:	dd13      	ble.n	12d7c <ble_ll_conn_master_init+0x56>
        connsm->min_ce_len = connsm->conn_itvl * 2;
   12d54:	f8a5 206e 	strh.w	r2, [r5, #110]	; 0x6e
    if (hcc->max_ce_len > (connsm->conn_itvl * 2)) {
   12d58:	8b21      	ldrh	r1, [r4, #24]
   12d5a:	428a      	cmp	r2, r1
   12d5c:	db11      	blt.n	12d82 <ble_ll_conn_master_init+0x5c>
        connsm->max_ce_len = hcc->max_ce_len;
   12d5e:	f8a5 1070 	strh.w	r1, [r5, #112]	; 0x70
}
   12d62:	bd38      	pop	{r3, r4, r5, pc}
        memcpy(&connsm->peer_addr, &hcc->peer_addr, BLE_DEV_ADDR_LEN);
   12d64:	4623      	mov	r3, r4
   12d66:	f853 2f06 	ldr.w	r2, [r3, #6]!
   12d6a:	f8c5 2093 	str.w	r2, [r5, #147]	; 0x93
   12d6e:	889b      	ldrh	r3, [r3, #4]
   12d70:	f8a5 3097 	strh.w	r3, [r5, #151]	; 0x97
        connsm->peer_addr_type = hcc->peer_addr_type;
   12d74:	7963      	ldrb	r3, [r4, #5]
   12d76:	f885 3092 	strb.w	r3, [r5, #146]	; 0x92
   12d7a:	e7e4      	b.n	12d46 <ble_ll_conn_master_init+0x20>
        connsm->min_ce_len = hcc->min_ce_len;
   12d7c:	f8a5 106e 	strh.w	r1, [r5, #110]	; 0x6e
   12d80:	e7ea      	b.n	12d58 <ble_ll_conn_master_init+0x32>
        connsm->max_ce_len = connsm->conn_itvl * 2;
   12d82:	005b      	lsls	r3, r3, #1
   12d84:	f8a5 3070 	strh.w	r3, [r5, #112]	; 0x70
   12d88:	e7eb      	b.n	12d62 <ble_ll_conn_master_init+0x3c>
	...

00012d8c <ble_ll_conn_sm_new>:
{
   12d8c:	b570      	push	{r4, r5, r6, lr}
   12d8e:	4604      	mov	r4, r0
    connsm->csmflags.conn_flags = 0;
   12d90:	2500      	movs	r5, #0
   12d92:	6005      	str	r5, [r0, #0]
    connsm->event_cntr = 0;
   12d94:	f8a0 504a 	strh.w	r5, [r0, #74]	; 0x4a
    connsm->conn_state = BLE_LL_CONN_STATE_IDLE;
   12d98:	7185      	strb	r5, [r0, #6]
    connsm->disconnect_reason = 0;
   12d9a:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
    connsm->rxd_disconnect_reason = 0;
   12d9e:	f880 503d 	strb.w	r5, [r0, #61]	; 0x3d
    connsm->conn_features = BLE_LL_CONN_INITIAL_FEATURES;
   12da2:	2322      	movs	r3, #34	; 0x22
   12da4:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
    memset(connsm->remote_features, 0, sizeof(connsm->remote_features));
   12da8:	6405      	str	r5, [r0, #64]	; 0x40
   12daa:	f8c0 5043 	str.w	r5, [r0, #67]	; 0x43
    connsm->vers_nr = 0;
   12dae:	f880 503e 	strb.w	r5, [r0, #62]	; 0x3e
    connsm->comp_id = 0;
   12db2:	f8a0 504e 	strh.w	r5, [r0, #78]	; 0x4e
    connsm->sub_vers_nr = 0;
   12db6:	f8a0 5050 	strh.w	r5, [r0, #80]	; 0x50
    connsm->reject_reason = BLE_ERR_SUCCESS;
   12dba:	f880 5037 	strb.w	r5, [r0, #55]	; 0x37
    connsm->conn_rssi = BLE_LL_CONN_UNKNOWN_RSSI;
   12dbe:	237f      	movs	r3, #127	; 0x7f
   12dc0:	7203      	strb	r3, [r0, #8]
    connsm->rpa_index = -1;
   12dc2:	23ff      	movs	r3, #255	; 0xff
   12dc4:	7243      	strb	r3, [r0, #9]
    connsm->inita_identity_used = 0;
   12dc6:	f880 5090 	strb.w	r5, [r0, #144]	; 0x90
    connsm->cur_ctrl_proc = BLE_LL_CTRL_PROC_IDLE;
   12dca:	f880 303b 	strb.w	r3, [r0, #59]	; 0x3b
    connsm->pending_ctrl_procs = 0;
   12dce:	f8a0 5048 	strh.w	r5, [r0, #72]	; 0x48
    connsm->conn_param_req.handle = 0;
   12dd2:	f8a0 5168 	strh.w	r5, [r0, #360]	; 0x168
    memset(ev, 0, sizeof(*ev));
   12dd6:	f8c0 509c 	str.w	r5, [r0, #156]	; 0x9c
   12dda:	f8c0 50a8 	str.w	r5, [r0, #168]	; 0xa8
    ev->ev.ev_queued = 0;
   12dde:	f880 509c 	strb.w	r5, [r0, #156]	; 0x9c
    ev->ev.ev_cb = (os_event_fn *)fn;
   12de2:	4b26      	ldr	r3, [pc, #152]	; (12e7c <ble_ll_conn_sm_new+0xf0>)
   12de4:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
    ev->ev.ev_arg = arg;
   12de8:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
    STAILQ_INIT(&connsm->conn_txq);
   12dec:	4603      	mov	r3, r0
   12dee:	f843 5fb0 	str.w	r5, [r3, #176]!
   12df2:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4
    connsm->cur_tx_pdu = NULL;
   12df6:	f8c0 50ac 	str.w	r5, [r0, #172]	; 0xac
    connsm->tx_seqnum = 0;
   12dfa:	f880 5032 	strb.w	r5, [r0, #50]	; 0x32
    connsm->next_exp_seqnum = 0;
   12dfe:	f880 5033 	strb.w	r5, [r0, #51]	; 0x33
    connsm->cons_rxd_bad_crc = 0;
   12e02:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
    connsm->last_rxd_sn = 1;
   12e06:	2601      	movs	r6, #1
   12e08:	f880 6035 	strb.w	r6, [r0, #53]	; 0x35
    connsm->completed_pkts = 0;
   12e0c:	f8a0 504c 	strh.w	r5, [r0, #76]	; 0x4c
    connsm->max_tx_octets = conn_params->conn_init_max_tx_octets;
   12e10:	4b1b      	ldr	r3, [pc, #108]	; (12e80 <ble_ll_conn_sm_new+0xf4>)
   12e12:	7a1a      	ldrb	r2, [r3, #8]
   12e14:	7282      	strb	r2, [r0, #10]
    connsm->max_rx_octets = conn_params->supp_max_rx_octets;
   12e16:	79da      	ldrb	r2, [r3, #7]
   12e18:	72c2      	strb	r2, [r0, #11]
    connsm->max_tx_time = conn_params->conn_init_max_tx_time;
   12e1a:	899a      	ldrh	r2, [r3, #12]
   12e1c:	8202      	strh	r2, [r0, #16]
    connsm->max_rx_time = conn_params->supp_max_rx_time;
   12e1e:	8a9b      	ldrh	r3, [r3, #20]
   12e20:	8243      	strh	r3, [r0, #18]
    connsm->rem_max_tx_time = BLE_LL_CONN_SUPP_TIME_MIN;
   12e22:	f44f 73a4 	mov.w	r3, #328	; 0x148
   12e26:	8283      	strh	r3, [r0, #20]
    connsm->rem_max_rx_time = BLE_LL_CONN_SUPP_TIME_MIN;
   12e28:	82c3      	strh	r3, [r0, #22]
    connsm->eff_max_tx_time = BLE_LL_CONN_SUPP_TIME_MIN;
   12e2a:	8303      	strh	r3, [r0, #24]
    connsm->eff_max_rx_time = BLE_LL_CONN_SUPP_TIME_MIN;
   12e2c:	8343      	strh	r3, [r0, #26]
    connsm->rem_max_tx_octets = BLE_LL_CONN_SUPP_BYTES_MIN;
   12e2e:	231b      	movs	r3, #27
   12e30:	7303      	strb	r3, [r0, #12]
    connsm->rem_max_rx_octets = BLE_LL_CONN_SUPP_BYTES_MIN;
   12e32:	7343      	strb	r3, [r0, #13]
    connsm->eff_max_tx_octets = BLE_LL_CONN_SUPP_BYTES_MIN;
   12e34:	7383      	strb	r3, [r0, #14]
    connsm->eff_max_rx_octets = BLE_LL_CONN_SUPP_BYTES_MIN;
   12e36:	73c3      	strb	r3, [r0, #15]
    ble_ll_update_max_tx_octets_phy_mode(connsm);
   12e38:	f7ff f829 	bl	11e8e <ble_ll_update_max_tx_octets_phy_mode>
    memset(&connsm->enc_data, 0, sizeof(struct ble_ll_conn_enc_data));
   12e3c:	2250      	movs	r2, #80	; 0x50
   12e3e:	4629      	mov	r1, r5
   12e40:	f504 708c 	add.w	r0, r4, #280	; 0x118
   12e44:	f7fb fb3c 	bl	e4c0 <memset>
    connsm->enc_data.enc_state = CONN_ENC_S_UNENCRYPTED;
   12e48:	f884 6118 	strb.w	r6, [r4, #280]	; 0x118
    connsm->auth_pyld_tmo = BLE_LL_CONN_DEF_AUTH_PYLD_TMO;
   12e4c:	f640 33b8 	movw	r3, #3000	; 0xbb8
   12e50:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
    CONN_F_LE_PING_SUPP(connsm) = 1;
   12e54:	78a3      	ldrb	r3, [r4, #2]
   12e56:	f043 0308 	orr.w	r3, r3, #8
   12e5a:	70a3      	strb	r3, [r4, #2]
    os_callout_init(&co->co, &evq->evq, (os_event_fn *)ev_cb, ev_arg);
   12e5c:	4623      	mov	r3, r4
   12e5e:	4a09      	ldr	r2, [pc, #36]	; (12e84 <ble_ll_conn_sm_new+0xf8>)
   12e60:	4909      	ldr	r1, [pc, #36]	; (12e88 <ble_ll_conn_sm_new+0xfc>)
   12e62:	f104 00f8 	add.w	r0, r4, #248	; 0xf8
   12e66:	f7f9 fda1 	bl	c9ac <os_callout_init>
    ble_ll_conn_calc_itvl_ticks(connsm);
   12e6a:	4620      	mov	r0, r4
   12e6c:	f7ff fb56 	bl	1251c <ble_ll_conn_calc_itvl_ticks>
    SLIST_INSERT_HEAD(&g_ble_ll_conn_active_list, connsm, act_sle);
   12e70:	4b06      	ldr	r3, [pc, #24]	; (12e8c <ble_ll_conn_sm_new+0x100>)
   12e72:	681a      	ldr	r2, [r3, #0]
   12e74:	f8c4 20b8 	str.w	r2, [r4, #184]	; 0xb8
   12e78:	601c      	str	r4, [r3, #0]
}
   12e7a:	bd70      	pop	{r4, r5, r6, pc}
   12e7c:	00013019 	.word	0x00013019
   12e80:	20003e80 	.word	0x20003e80
   12e84:	00012d0d 	.word	0x00012d0d
   12e88:	20003d60 	.word	0x20003d60
   12e8c:	200040d0 	.word	0x200040d0

00012e90 <ble_ll_conn_update_eff_data_len>:
{
   12e90:	b510      	push	{r4, lr}
   12e92:	4604      	mov	r4, r0
    eff_time = min(connsm->rem_max_tx_time, connsm->max_rx_time);
   12e94:	8a43      	ldrh	r3, [r0, #18]
   12e96:	8a82      	ldrh	r2, [r0, #20]
   12e98:	4293      	cmp	r3, r2
   12e9a:	bf28      	it	cs
   12e9c:	4613      	movcs	r3, r2
    if (eff_time != connsm->eff_max_rx_time) {
   12e9e:	8b42      	ldrh	r2, [r0, #26]
   12ea0:	429a      	cmp	r2, r3
   12ea2:	d020      	beq.n	12ee6 <ble_ll_conn_update_eff_data_len+0x56>
        connsm->eff_max_rx_time = eff_time;
   12ea4:	8343      	strh	r3, [r0, #26]
        send_event = 1;
   12ea6:	2101      	movs	r1, #1
    eff_time = min(connsm->rem_max_rx_time, connsm->max_tx_time);
   12ea8:	8a23      	ldrh	r3, [r4, #16]
   12eaa:	8ae2      	ldrh	r2, [r4, #22]
   12eac:	4293      	cmp	r3, r2
   12eae:	bf28      	it	cs
   12eb0:	4613      	movcs	r3, r2
    if (eff_time != connsm->eff_max_tx_time) {
   12eb2:	8b22      	ldrh	r2, [r4, #24]
   12eb4:	429a      	cmp	r2, r3
   12eb6:	d118      	bne.n	12eea <ble_ll_conn_update_eff_data_len+0x5a>
    eff_bytes = min(connsm->rem_max_tx_octets, connsm->max_rx_octets);
   12eb8:	7b22      	ldrb	r2, [r4, #12]
   12eba:	7ae3      	ldrb	r3, [r4, #11]
   12ebc:	429a      	cmp	r2, r3
   12ebe:	d21a      	bcs.n	12ef6 <ble_ll_conn_update_eff_data_len+0x66>
   12ec0:	b293      	uxth	r3, r2
    if (eff_bytes != connsm->eff_max_rx_octets) {
   12ec2:	7be2      	ldrb	r2, [r4, #15]
   12ec4:	429a      	cmp	r2, r3
   12ec6:	d001      	beq.n	12ecc <ble_ll_conn_update_eff_data_len+0x3c>
        connsm->eff_max_rx_octets = eff_bytes;
   12ec8:	73e3      	strb	r3, [r4, #15]
        send_event = 1;
   12eca:	2101      	movs	r1, #1
    eff_bytes = min(connsm->rem_max_rx_octets, connsm->max_tx_octets);
   12ecc:	7b62      	ldrb	r2, [r4, #13]
   12ece:	7aa3      	ldrb	r3, [r4, #10]
   12ed0:	429a      	cmp	r2, r3
   12ed2:	d212      	bcs.n	12efa <ble_ll_conn_update_eff_data_len+0x6a>
   12ed4:	b293      	uxth	r3, r2
    if (eff_bytes != connsm->eff_max_tx_octets) {
   12ed6:	7ba2      	ldrb	r2, [r4, #14]
   12ed8:	429a      	cmp	r2, r3
   12eda:	d010      	beq.n	12efe <ble_ll_conn_update_eff_data_len+0x6e>
        connsm->eff_max_tx_octets = eff_bytes;
   12edc:	73a3      	strb	r3, [r4, #14]
        ble_ll_hci_ev_datalen_chg(connsm);
   12ede:	4620      	mov	r0, r4
   12ee0:	f003 fbcc 	bl	1667c <ble_ll_hci_ev_datalen_chg>
}
   12ee4:	bd10      	pop	{r4, pc}
    send_event = 0;
   12ee6:	2100      	movs	r1, #0
   12ee8:	e7de      	b.n	12ea8 <ble_ll_conn_update_eff_data_len+0x18>
        connsm->eff_max_tx_time = eff_time;
   12eea:	8323      	strh	r3, [r4, #24]
        ble_ll_update_max_tx_octets_phy_mode(connsm);
   12eec:	4620      	mov	r0, r4
   12eee:	f7fe ffce 	bl	11e8e <ble_ll_update_max_tx_octets_phy_mode>
        send_event = 1;
   12ef2:	2101      	movs	r1, #1
   12ef4:	e7e0      	b.n	12eb8 <ble_ll_conn_update_eff_data_len+0x28>
    eff_bytes = min(connsm->rem_max_tx_octets, connsm->max_rx_octets);
   12ef6:	b29b      	uxth	r3, r3
   12ef8:	e7e3      	b.n	12ec2 <ble_ll_conn_update_eff_data_len+0x32>
    eff_bytes = min(connsm->rem_max_rx_octets, connsm->max_tx_octets);
   12efa:	b29b      	uxth	r3, r3
   12efc:	e7eb      	b.n	12ed6 <ble_ll_conn_update_eff_data_len+0x46>
    if (send_event) {
   12efe:	2900      	cmp	r1, #0
   12f00:	d1ed      	bne.n	12ede <ble_ll_conn_update_eff_data_len+0x4e>
   12f02:	e7ef      	b.n	12ee4 <ble_ll_conn_update_eff_data_len+0x54>

00012f04 <ble_ll_conn_end>:
{
   12f04:	b570      	push	{r4, r5, r6, lr}
   12f06:	4604      	mov	r4, r0
   12f08:	460d      	mov	r5, r1
    ble_ll_sched_rmv_elem(&connsm->conn_sch);
   12f0a:	30dc      	adds	r0, #220	; 0xdc
   12f0c:	f005 ffbc 	bl	18e88 <ble_ll_sched_rmv_elem>
    OS_ENTER_CRITICAL(sr);
   12f10:	f7fa fc72 	bl	d7f8 <os_arch_save_sr>
   12f14:	4606      	mov	r6, r0
    if (g_ble_ll_conn_cur_sm == connsm) {
   12f16:	4b3b      	ldr	r3, [pc, #236]	; (13004 <ble_ll_conn_end+0x100>)
   12f18:	681b      	ldr	r3, [r3, #0]
   12f1a:	42a3      	cmp	r3, r4
   12f1c:	d012      	beq.n	12f44 <ble_ll_conn_end+0x40>
    OS_EXIT_CRITICAL(sr);
   12f1e:	4630      	mov	r0, r6
   12f20:	f7fa fc70 	bl	d804 <os_arch_restore_sr>
}

static inline void
ble_npl_callout_stop(struct ble_npl_callout *co)
{
    os_callout_stop(&co->co);
   12f24:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
   12f28:	f7f9 fd4e 	bl	c9c8 <os_callout_stop>
   12f2c:	f104 00f8 	add.w	r0, r4, #248	; 0xf8
   12f30:	f7f9 fd4a 	bl	c9c8 <os_callout_stop>
    SLIST_REMOVE(&g_ble_ll_conn_active_list, connsm, ble_ll_conn_sm, act_sle);
   12f34:	4b34      	ldr	r3, [pc, #208]	; (13008 <ble_ll_conn_end+0x104>)
   12f36:	681a      	ldr	r2, [r3, #0]
   12f38:	42a2      	cmp	r2, r4
   12f3a:	d10b      	bne.n	12f54 <ble_ll_conn_end+0x50>
   12f3c:	f8d2 20b8 	ldr.w	r2, [r2, #184]	; 0xb8
   12f40:	601a      	str	r2, [r3, #0]
   12f42:	e00f      	b.n	12f64 <ble_ll_conn_end+0x60>
        ble_ll_conn_halt();
   12f44:	f7fe ff1e 	bl	11d84 <ble_ll_conn_halt>
        STATS_INC(ble_ll_conn_stats, conn_event_while_tmo);
   12f48:	4a30      	ldr	r2, [pc, #192]	; (1300c <ble_ll_conn_end+0x108>)
   12f4a:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
   12f4c:	3301      	adds	r3, #1
   12f4e:	67d3      	str	r3, [r2, #124]	; 0x7c
   12f50:	e7e5      	b.n	12f1e <ble_ll_conn_end+0x1a>
    SLIST_REMOVE(&g_ble_ll_conn_active_list, connsm, ble_ll_conn_sm, act_sle);
   12f52:	461a      	mov	r2, r3
   12f54:	f8d2 30b8 	ldr.w	r3, [r2, #184]	; 0xb8
   12f58:	42a3      	cmp	r3, r4
   12f5a:	d1fa      	bne.n	12f52 <ble_ll_conn_end+0x4e>
   12f5c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
   12f60:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
    if (connsm->cur_tx_pdu) {
   12f64:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
   12f68:	b140      	cbz	r0, 12f7c <ble_ll_conn_end+0x78>
        os_mbuf_free_chain(connsm->cur_tx_pdu);
   12f6a:	f7fa fd54 	bl	da16 <os_mbuf_free_chain>
        connsm->cur_tx_pdu = NULL;
   12f6e:	2300      	movs	r3, #0
   12f70:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
   12f74:	e002      	b.n	12f7c <ble_ll_conn_end+0x78>
        os_mbuf_free_chain(m);
   12f76:	3810      	subs	r0, #16
   12f78:	f7fa fd4d 	bl	da16 <os_mbuf_free_chain>
        pkthdr = STAILQ_FIRST(&connsm->conn_txq);
   12f7c:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
        if (!pkthdr) {
   12f80:	b148      	cbz	r0, 12f96 <ble_ll_conn_end+0x92>
        STAILQ_REMOVE_HEAD(&connsm->conn_txq, omp_next);
   12f82:	6843      	ldr	r3, [r0, #4]
   12f84:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
   12f88:	2b00      	cmp	r3, #0
   12f8a:	d1f4      	bne.n	12f76 <ble_ll_conn_end+0x72>
   12f8c:	f104 03b0 	add.w	r3, r4, #176	; 0xb0
   12f90:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
   12f94:	e7ef      	b.n	12f76 <ble_ll_conn_end+0x72>
    os_eventq_remove(&evq->evq, &ev->ev);
   12f96:	f104 019c 	add.w	r1, r4, #156	; 0x9c
   12f9a:	481d      	ldr	r0, [pc, #116]	; (13010 <ble_ll_conn_end+0x10c>)
   12f9c:	f7f9 ff24 	bl	cde8 <os_eventq_remove>
    connsm->conn_state = BLE_LL_CONN_STATE_IDLE;
   12fa0:	2300      	movs	r3, #0
   12fa2:	71a3      	strb	r3, [r4, #6]
    if (connsm->csmflags.cfbit.pending_hci_rd_features &&
   12fa4:	78e3      	ldrb	r3, [r4, #3]
   12fa6:	f003 0318 	and.w	r3, r3, #24
   12faa:	2b18      	cmp	r3, #24
   12fac:	d017      	beq.n	12fde <ble_ll_conn_end+0xda>
    if (connsm->csmflags.cfbit.pending_hci_rd_features) {
   12fae:	78e3      	ldrb	r3, [r4, #3]
   12fb0:	f013 0f10 	tst.w	r3, #16
   12fb4:	d11c      	bne.n	12ff0 <ble_ll_conn_end+0xec>
    if (ble_err && (ble_err != BLE_ERR_UNK_CONN_ID ||
   12fb6:	b14d      	cbz	r5, 12fcc <ble_ll_conn_end+0xc8>
   12fb8:	2d02      	cmp	r5, #2
   12fba:	d103      	bne.n	12fc4 <ble_ll_conn_end+0xc0>
   12fbc:	7823      	ldrb	r3, [r4, #0]
   12fbe:	f013 0f04 	tst.w	r3, #4
   12fc2:	d003      	beq.n	12fcc <ble_ll_conn_end+0xc8>
        ble_ll_disconn_comp_event_send(connsm, ble_err);
   12fc4:	4629      	mov	r1, r5
   12fc6:	4620      	mov	r0, r4
   12fc8:	f001 f95d 	bl	14286 <ble_ll_disconn_comp_event_send>
    STAILQ_INSERT_TAIL(&g_ble_ll_conn_free_list, connsm, free_stqe);
   12fcc:	2300      	movs	r3, #0
   12fce:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
   12fd2:	4b10      	ldr	r3, [pc, #64]	; (13014 <ble_ll_conn_end+0x110>)
   12fd4:	685a      	ldr	r2, [r3, #4]
   12fd6:	6014      	str	r4, [r2, #0]
   12fd8:	34b8      	adds	r4, #184	; 0xb8
   12fda:	605c      	str	r4, [r3, #4]
}
   12fdc:	bd70      	pop	{r4, r5, r6, pc}
        ble_ll_hci_ev_rd_rem_used_feat(connsm, BLE_ERR_SUCCESS);
   12fde:	2100      	movs	r1, #0
   12fe0:	4620      	mov	r0, r4
   12fe2:	f003 fc17 	bl	16814 <ble_ll_hci_ev_rd_rem_used_feat>
        connsm->csmflags.cfbit.pending_hci_rd_features = 0;
   12fe6:	78e3      	ldrb	r3, [r4, #3]
   12fe8:	f36f 1304 	bfc	r3, #4, #1
   12fec:	70e3      	strb	r3, [r4, #3]
   12fee:	e7de      	b.n	12fae <ble_ll_conn_end+0xaa>
        ble_ll_hci_ev_rd_rem_used_feat(connsm, ble_err);
   12ff0:	4629      	mov	r1, r5
   12ff2:	4620      	mov	r0, r4
   12ff4:	f003 fc0e 	bl	16814 <ble_ll_hci_ev_rd_rem_used_feat>
        connsm->csmflags.cfbit.pending_hci_rd_features = 0;
   12ff8:	78e3      	ldrb	r3, [r4, #3]
   12ffa:	f36f 1304 	bfc	r3, #4, #1
   12ffe:	70e3      	strb	r3, [r4, #3]
   13000:	e7d9      	b.n	12fb6 <ble_ll_conn_end+0xb2>
   13002:	bf00      	nop
   13004:	20003e98 	.word	0x20003e98
   13008:	200040d0 	.word	0x200040d0
   1300c:	20004050 	.word	0x20004050
   13010:	20003d60 	.word	0x20003d60
   13014:	20003ea0 	.word	0x20003ea0

00013018 <ble_ll_conn_event_end>:
{
   13018:	b538      	push	{r3, r4, r5, lr}
   1301a:	4604      	mov	r4, r0
    ble_ll_rfmgmt_release();
   1301c:	f004 f97c 	bl	17318 <ble_ll_rfmgmt_release>
    return ev->ev.ev_arg;
   13020:	68a4      	ldr	r4, [r4, #8]
    BLE_LL_ASSERT(connsm);
   13022:	b18c      	cbz	r4, 13048 <ble_ll_conn_event_end+0x30>
    if (connsm->conn_state == BLE_LL_CONN_STATE_IDLE) {
   13024:	79a3      	ldrb	r3, [r4, #6]
   13026:	b1cb      	cbz	r3, 1305c <ble_ll_conn_event_end+0x44>
    ble_ll_scan_chk_resume();
   13028:	f005 f91e 	bl	18268 <ble_ll_scan_chk_resume>
    if ((connsm->csmflags.cfbit.terminate_ind_txd) ||
   1302c:	7823      	ldrb	r3, [r4, #0]
   1302e:	f013 0202 	ands.w	r2, r3, #2
   13032:	d103      	bne.n	1303c <ble_ll_conn_event_end+0x24>
                    (connsm->csmflags.cfbit.terminate_ind_rxd &&
   13034:	f003 030c 	and.w	r3, r3, #12
    if ((connsm->csmflags.cfbit.terminate_ind_txd) ||
   13038:	2b0c      	cmp	r3, #12
   1303a:	d122      	bne.n	13082 <ble_ll_conn_event_end+0x6a>
        if (connsm->csmflags.cfbit.terminate_ind_txd) {
   1303c:	b9e2      	cbnz	r2, 13078 <ble_ll_conn_event_end+0x60>
            ble_err = connsm->rxd_disconnect_reason;
   1303e:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
            if (ble_err == 0) {
   13042:	b9d1      	cbnz	r1, 1307a <ble_ll_conn_event_end+0x62>
                ble_err = BLE_ERR_REM_USER_CONN_TERM;
   13044:	2113      	movs	r1, #19
   13046:	e018      	b.n	1307a <ble_ll_conn_event_end+0x62>
    BLE_LL_ASSERT(connsm);
   13048:	f7f9 f8ce 	bl	c1e8 <hal_debugger_connected>
   1304c:	b100      	cbz	r0, 13050 <ble_ll_conn_event_end+0x38>
   1304e:	be01      	bkpt	0x0001
   13050:	2300      	movs	r3, #0
   13052:	461a      	mov	r2, r3
   13054:	4619      	mov	r1, r3
   13056:	4618      	mov	r0, r3
   13058:	f7f9 fb00 	bl	c65c <__assert_func>
        STATS_INC(ble_ll_conn_stats, sched_end_in_idle);
   1305c:	4a39      	ldr	r2, [pc, #228]	; (13144 <ble_ll_conn_event_end+0x12c>)
   1305e:	6f93      	ldr	r3, [r2, #120]	; 0x78
   13060:	3301      	adds	r3, #1
   13062:	6793      	str	r3, [r2, #120]	; 0x78
        BLE_LL_ASSERT(0);
   13064:	f7f9 f8c0 	bl	c1e8 <hal_debugger_connected>
   13068:	b100      	cbz	r0, 1306c <ble_ll_conn_event_end+0x54>
   1306a:	be01      	bkpt	0x0001
   1306c:	2300      	movs	r3, #0
   1306e:	461a      	mov	r2, r3
   13070:	4619      	mov	r1, r3
   13072:	4618      	mov	r0, r3
   13074:	f7f9 faf2 	bl	c65c <__assert_func>
            ble_err = BLE_ERR_CONN_TERM_LOCAL;
   13078:	2116      	movs	r1, #22
        ble_ll_conn_end(connsm, ble_err);
   1307a:	4620      	mov	r0, r4
   1307c:	f7ff ff42 	bl	12f04 <ble_ll_conn_end>
}
   13080:	bd38      	pop	{r3, r4, r5, pc}
    os_eventq_remove(&evq->evq, &ev->ev);
   13082:	f104 019c 	add.w	r1, r4, #156	; 0x9c
   13086:	4830      	ldr	r0, [pc, #192]	; (13148 <ble_ll_conn_event_end+0x130>)
   13088:	f7f9 feae 	bl	cde8 <os_eventq_remove>
    if (connsm->csmflags.cfbit.pkt_rxd) {
   1308c:	7823      	ldrb	r3, [r4, #0]
   1308e:	f013 0f01 	tst.w	r3, #1
   13092:	d002      	beq.n	1309a <ble_ll_conn_event_end+0x82>
        connsm->slave_cur_tx_win_usecs = 0;
   13094:	2300      	movs	r3, #0
   13096:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    if (ble_ll_conn_next_event(connsm)) {
   1309a:	4620      	mov	r0, r4
   1309c:	f7ff fc46 	bl	1292c <ble_ll_conn_next_event>
   130a0:	b9d0      	cbnz	r0, 130d8 <ble_ll_conn_event_end+0xc0>
    connsm->cons_rxd_bad_crc = 0;
   130a2:	2200      	movs	r2, #0
   130a4:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    connsm->csmflags.cfbit.pkt_rxd = 0;
   130a8:	7823      	ldrb	r3, [r4, #0]
   130aa:	f362 0300 	bfi	r3, r2, #0, #1
   130ae:	7023      	strb	r3, [r4, #0]
    ble_ll_ctrl_chk_proc_start(connsm);
   130b0:	4620      	mov	r0, r4
   130b2:	f002 fa24 	bl	154fe <ble_ll_ctrl_chk_proc_start>
    connsm->conn_sch.sched_cb = ble_ll_conn_event_start_cb;
   130b6:	4b25      	ldr	r3, [pc, #148]	; (1314c <ble_ll_conn_event_end+0x134>)
   130b8:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
    while (ble_ll_sched_conn_reschedule(connsm)) {
   130bc:	4620      	mov	r0, r4
   130be:	f005 fb7d 	bl	187bc <ble_ll_sched_conn_reschedule>
   130c2:	b170      	cbz	r0, 130e2 <ble_ll_conn_event_end+0xca>
        if (ble_ll_conn_next_event(connsm)) {
   130c4:	4620      	mov	r0, r4
   130c6:	f7ff fc31 	bl	1292c <ble_ll_conn_next_event>
   130ca:	2800      	cmp	r0, #0
   130cc:	d0f6      	beq.n	130bc <ble_ll_conn_event_end+0xa4>
            ble_ll_conn_end(connsm, BLE_ERR_CONN_TERM_LOCAL);
   130ce:	2116      	movs	r1, #22
   130d0:	4620      	mov	r0, r4
   130d2:	f7ff ff17 	bl	12f04 <ble_ll_conn_end>
            return;
   130d6:	e7d3      	b.n	13080 <ble_ll_conn_event_end+0x68>
        ble_ll_conn_end(connsm, BLE_ERR_CONN_TERM_LOCAL);
   130d8:	2116      	movs	r1, #22
   130da:	4620      	mov	r0, r4
   130dc:	f7ff ff12 	bl	12f04 <ble_ll_conn_end>
        return;
   130e0:	e7ce      	b.n	13080 <ble_ll_conn_event_end+0x68>
    if (connsm->conn_state == BLE_LL_CONN_STATE_CREATED) {
   130e2:	79a3      	ldrb	r3, [r4, #6]
   130e4:	2b01      	cmp	r3, #1
   130e6:	d01f      	beq.n	13128 <ble_ll_conn_event_end+0x110>
        tmo = connsm->supervision_tmo * BLE_HCI_CONN_SPVN_TMO_UNITS * 1000UL;
   130e8:	f8b4 306c 	ldrh.w	r3, [r4, #108]	; 0x6c
   130ec:	f242 7010 	movw	r0, #10000	; 0x2710
   130f0:	fb00 f003 	mul.w	r0, r0, r3
        ble_err = BLE_ERR_CONN_SPVN_TMO;
   130f4:	2508      	movs	r5, #8
    tmo = os_cputime_usecs_to_ticks(tmo);
   130f6:	f016 fbef 	bl	298d8 <os_cputime_usecs_to_ticks>
    if ((int32_t)(connsm->anchor_point - connsm->last_rxd_pdu_cputime) >= tmo) {
   130fa:	6f63      	ldr	r3, [r4, #116]	; 0x74
   130fc:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
   13100:	1a9b      	subs	r3, r3, r2
   13102:	4283      	cmp	r3, r0
   13104:	d218      	bcs.n	13138 <ble_ll_conn_event_end+0x120>
    ble_ll_conn_num_comp_pkts_event_send(connsm);
   13106:	4620      	mov	r0, r4
   13108:	f001 f832 	bl	14170 <ble_ll_conn_num_comp_pkts_event_send>
    if (connsm->csmflags.cfbit.pending_hci_rd_features &&
   1310c:	78e3      	ldrb	r3, [r4, #3]
   1310e:	f003 0318 	and.w	r3, r3, #24
   13112:	2b18      	cmp	r3, #24
   13114:	d1b4      	bne.n	13080 <ble_ll_conn_event_end+0x68>
        ble_ll_hci_ev_rd_rem_used_feat(connsm, BLE_ERR_SUCCESS);
   13116:	2100      	movs	r1, #0
   13118:	4620      	mov	r0, r4
   1311a:	f003 fb7b 	bl	16814 <ble_ll_hci_ev_rd_rem_used_feat>
        connsm->csmflags.cfbit.pending_hci_rd_features = 0;
   1311e:	78e3      	ldrb	r3, [r4, #3]
   13120:	f36f 1304 	bfc	r3, #4, #1
   13124:	70e3      	strb	r3, [r4, #3]
   13126:	e7ab      	b.n	13080 <ble_ll_conn_event_end+0x68>
        tmo = (uint32_t)connsm->conn_itvl * BLE_LL_CONN_ITVL_USECS * 6UL;
   13128:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
   1312c:	f641 504c 	movw	r0, #7500	; 0x1d4c
   13130:	fb00 f003 	mul.w	r0, r0, r3
        ble_err = BLE_ERR_CONN_ESTABLISHMENT;
   13134:	253e      	movs	r5, #62	; 0x3e
   13136:	e7de      	b.n	130f6 <ble_ll_conn_event_end+0xde>
        ble_ll_conn_end(connsm, ble_err);
   13138:	4629      	mov	r1, r5
   1313a:	4620      	mov	r0, r4
   1313c:	f7ff fee2 	bl	12f04 <ble_ll_conn_end>
        return;
   13140:	e79e      	b.n	13080 <ble_ll_conn_event_end+0x68>
   13142:	bf00      	nop
   13144:	20004050 	.word	0x20004050
   13148:	20003d60 	.word	0x20003d60
   1314c:	00012369 	.word	0x00012369

00013150 <ble_ll_conn_connect_ind_send>:
 * @param addr_type Address type of advertiser
 * @param adva Address of advertiser
 */
int
ble_ll_conn_connect_ind_send(struct ble_ll_conn_sm *connsm, uint8_t end_trans)
{
   13150:	b538      	push	{r3, r4, r5, lr}
   13152:	4604      	mov	r4, r0
    int rc;

    if (end_trans == BLE_PHY_TRANSITION_NONE) {
   13154:	460d      	mov	r5, r1
   13156:	b149      	cbz	r1, 1316c <ble_ll_conn_connect_ind_send+0x1c>
        ble_phy_set_txend_cb(ble_ll_conn_connect_ind_txend_to_standby, NULL);
    } else {
        ble_phy_set_txend_cb(ble_ll_conn_connect_ind_txend_to_init, NULL);
   13158:	2100      	movs	r1, #0
   1315a:	4806      	ldr	r0, [pc, #24]	; (13174 <ble_ll_conn_connect_ind_send+0x24>)
   1315c:	f006 fd52 	bl	19c04 <ble_phy_set_txend_cb>
    }

    rc = ble_phy_tx(ble_ll_conn_connect_ind_tx_pducb, connsm, end_trans);
   13160:	462a      	mov	r2, r5
   13162:	4621      	mov	r1, r4
   13164:	4804      	ldr	r0, [pc, #16]	; (13178 <ble_ll_conn_connect_ind_send+0x28>)
   13166:	f006 ffe1 	bl	1a12c <ble_phy_tx>

    return rc;
}
   1316a:	bd38      	pop	{r3, r4, r5, pc}
        ble_phy_set_txend_cb(ble_ll_conn_connect_ind_txend_to_standby, NULL);
   1316c:	4803      	ldr	r0, [pc, #12]	; (1317c <ble_ll_conn_connect_ind_send+0x2c>)
   1316e:	f006 fd49 	bl	19c04 <ble_phy_set_txend_cb>
   13172:	e7f5      	b.n	13160 <ble_ll_conn_connect_ind_send+0x10>
   13174:	00011dd9 	.word	0x00011dd9
   13178:	0001262d 	.word	0x0001262d
   1317c:	00011de3 	.word	0x00011de3

00013180 <ble_ll_conn_event_halt>:
 * NOTE: the phy has been disabled as well as the wfr timer before this is
 * called.
 */
void
ble_ll_conn_event_halt(void)
{
   13180:	b510      	push	{r4, lr}
    ble_ll_state_set(BLE_LL_STATE_STANDBY);
   13182:	2000      	movs	r0, #0
   13184:	f7fd fc1c 	bl	109c0 <ble_ll_state_set>
    if (g_ble_ll_conn_cur_sm) {
   13188:	4b07      	ldr	r3, [pc, #28]	; (131a8 <ble_ll_conn_event_halt+0x28>)
   1318a:	681b      	ldr	r3, [r3, #0]
   1318c:	b153      	cbz	r3, 131a4 <ble_ll_conn_event_halt+0x24>
        g_ble_ll_conn_cur_sm->csmflags.cfbit.pkt_rxd = 0;
   1318e:	781a      	ldrb	r2, [r3, #0]
   13190:	f36f 0200 	bfc	r2, #0, #1
   13194:	701a      	strb	r2, [r3, #0]
        ble_ll_event_send(&g_ble_ll_conn_cur_sm->conn_ev_end);
   13196:	4c04      	ldr	r4, [pc, #16]	; (131a8 <ble_ll_conn_event_halt+0x28>)
   13198:	6820      	ldr	r0, [r4, #0]
   1319a:	309c      	adds	r0, #156	; 0x9c
   1319c:	f7fd fc1c 	bl	109d8 <ble_ll_event_send>
        g_ble_ll_conn_cur_sm = NULL;
   131a0:	2300      	movs	r3, #0
   131a2:	6023      	str	r3, [r4, #0]
    }
}
   131a4:	bd10      	pop	{r4, pc}
   131a6:	bf00      	nop
   131a8:	20003e98 	.word	0x20003e98

000131ac <ble_ll_init_rx_pkt_in>:
 * @param ble_hdr
 */
void
ble_ll_init_rx_pkt_in(uint8_t pdu_type, uint8_t *rxbuf,
                      struct ble_mbuf_hdr *ble_hdr)
{
   131ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   131ae:	b08b      	sub	sp, #44	; 0x2c
    uint8_t *addr;
    uint8_t *adv_addr;
    uint8_t *inita;
    uint8_t inita_type;
    struct ble_ll_conn_sm *connsm;
    int ext_adv_mode = -1;
   131b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   131b4:	9305      	str	r3, [sp, #20]
         aux_data = ble_hdr->rxinfo.user_data;
     }
#endif

    /* Get the connection state machine we are trying to create */
    connsm = g_ble_ll_conn_create_sm;
   131b6:	4b3c      	ldr	r3, [pc, #240]	; (132a8 <ble_ll_init_rx_pkt_in+0xfc>)
   131b8:	681e      	ldr	r6, [r3, #0]
    if (!connsm) {
   131ba:	b15e      	cbz	r6, 131d4 <ble_ll_init_rx_pkt_in+0x28>
   131bc:	4615      	mov	r5, r2
   131be:	460c      	mov	r4, r1
        }
#endif
        return;
    }

    if (!BLE_MBUF_HDR_CRC_OK(ble_hdr)) {
   131c0:	8813      	ldrh	r3, [r2, #0]
   131c2:	f013 0f80 	tst.w	r3, #128	; 0x80
   131c6:	d003      	beq.n	131d0 <ble_ll_init_rx_pkt_in+0x24>
        }
    }
#endif

    /* If we have sent a connect request, we need to enter CONNECTION state */
    if (connsm && CONN_F_CONN_REQ_TXD(connsm)) {
   131c8:	f996 3001 	ldrsb.w	r3, [r6, #1]
   131cc:	2b00      	cmp	r3, #0
   131ce:	db03      	blt.n	131d8 <ble_ll_init_rx_pkt_in+0x2c>
    if (aux_data) {
        ble_ll_scan_aux_data_unref(ble_hdr->rxinfo.user_data);
        ble_hdr->rxinfo.user_data = NULL;
    }
#endif
    ble_ll_scan_chk_resume();
   131d0:	f005 f84a 	bl	18268 <ble_ll_scan_chk_resume>
}
   131d4:	b00b      	add	sp, #44	; 0x2c
   131d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (ble_ll_scan_adv_decode_addr(pdu_type, rxbuf, ble_hdr,
   131d8:	ab05      	add	r3, sp, #20
   131da:	9303      	str	r3, [sp, #12]
   131dc:	f10d 031b 	add.w	r3, sp, #27
   131e0:	9302      	str	r3, [sp, #8]
   131e2:	ab07      	add	r3, sp, #28
   131e4:	9301      	str	r3, [sp, #4]
   131e6:	f10d 0327 	add.w	r3, sp, #39	; 0x27
   131ea:	9300      	str	r3, [sp, #0]
   131ec:	ab08      	add	r3, sp, #32
   131ee:	f005 f80f 	bl	18210 <ble_ll_scan_adv_decode_addr>
   131f2:	2800      	cmp	r0, #0
   131f4:	d1ec      	bne.n	131d0 <ble_ll_init_rx_pkt_in+0x24>
        if (connsm->rpa_index >= 0) {
   131f6:	f996 2009 	ldrsb.w	r2, [r6, #9]
   131fa:	2a00      	cmp	r2, #0
   131fc:	db36      	blt.n	1326c <ble_ll_init_rx_pkt_in+0xc0>
            addr_type = g_ble_ll_resolv_list[connsm->rpa_index].rl_addr_type + 2;
   131fe:	482b      	ldr	r0, [pc, #172]	; (132ac <ble_ll_init_rx_pkt_in+0x100>)
   13200:	2336      	movs	r3, #54	; 0x36
   13202:	fb03 f302 	mul.w	r3, r3, r2
   13206:	5cc1      	ldrb	r1, [r0, r3]
   13208:	3102      	adds	r1, #2
   1320a:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
            addr = g_ble_ll_resolv_list[connsm->rpa_index].rl_identity_addr;
   1320e:	f103 0720 	add.w	r7, r3, #32
   13212:	4407      	add	r7, r0
   13214:	3704      	adds	r7, #4
        if (connsm->rpa_index >= 0) {
   13216:	2a00      	cmp	r2, #0
   13218:	db30      	blt.n	1327c <ble_ll_init_rx_pkt_in+0xd0>
            connsm->peer_addr_type = addr_type;
   1321a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   1321e:	f886 3092 	strb.w	r3, [r6, #146]	; 0x92
            memcpy(connsm->peer_addr, addr, BLE_DEV_ADDR_LEN);
   13222:	683b      	ldr	r3, [r7, #0]
   13224:	f8c6 3093 	str.w	r3, [r6, #147]	; 0x93
   13228:	88bb      	ldrh	r3, [r7, #4]
   1322a:	f8a6 3097 	strh.w	r3, [r6, #151]	; 0x97
            ble_ll_scan_set_peer_rpa(adv_addr);
   1322e:	9808      	ldr	r0, [sp, #32]
   13230:	f005 f9a0 	bl	18574 <ble_ll_scan_set_peer_rpa>
            ble_ll_resolv_set_peer_rpa(connsm->rpa_index, rxbuf + BLE_LL_PDU_HDR_LEN);
   13234:	1ca1      	adds	r1, r4, #2
   13236:	f996 0009 	ldrsb.w	r0, [r6, #9]
   1323a:	f003 feb7 	bl	16fac <ble_ll_resolv_set_peer_rpa>
            if (ble_ll_is_rpa(inita, inita_type)) {
   1323e:	f89d 101b 	ldrb.w	r1, [sp, #27]
   13242:	9807      	ldr	r0, [sp, #28]
   13244:	f7fd f9e7 	bl	10616 <ble_ll_is_rpa>
   13248:	b990      	cbnz	r0, 13270 <ble_ll_init_rx_pkt_in+0xc4>
        g_ble_ll_conn_create_sm = NULL;
   1324a:	2000      	movs	r0, #0
   1324c:	4b16      	ldr	r3, [pc, #88]	; (132a8 <ble_ll_init_rx_pkt_in+0xfc>)
   1324e:	6018      	str	r0, [r3, #0]
        ble_ll_scan_sm_stop(0);
   13250:	f004 feca 	bl	17fe8 <ble_ll_scan_sm_stop>
        if (ble_hdr->rxinfo.channel < BLE_PHY_NUM_DATA_CHANS) {
   13254:	78ab      	ldrb	r3, [r5, #2]
   13256:	2b24      	cmp	r3, #36	; 0x24
   13258:	d81f      	bhi.n	1329a <ble_ll_init_rx_pkt_in+0xee>
            ble_ll_conn_set_csa(connsm, 1);
   1325a:	2101      	movs	r1, #1
   1325c:	4630      	mov	r0, r6
   1325e:	f7ff fd25 	bl	12cac <ble_ll_conn_set_csa>
        ble_ll_conn_created(connsm, NULL);
   13262:	2100      	movs	r1, #0
   13264:	4630      	mov	r0, r6
   13266:	f7ff fc95 	bl	12b94 <ble_ll_conn_created>
        return;
   1326a:	e7b3      	b.n	131d4 <ble_ll_init_rx_pkt_in+0x28>
            addr = adv_addr;
   1326c:	9f08      	ldr	r7, [sp, #32]
   1326e:	e7d2      	b.n	13216 <ble_ll_init_rx_pkt_in+0x6a>
                ble_ll_resolv_set_local_rpa(connsm->rpa_index, inita);
   13270:	9907      	ldr	r1, [sp, #28]
   13272:	f996 0009 	ldrsb.w	r0, [r6, #9]
   13276:	f003 fead 	bl	16fd4 <ble_ll_resolv_set_local_rpa>
   1327a:	e7e6      	b.n	1324a <ble_ll_init_rx_pkt_in+0x9e>
        } else if (ble_ll_scan_whitelist_enabled()) {
   1327c:	f005 f988 	bl	18590 <ble_ll_scan_whitelist_enabled>
   13280:	2800      	cmp	r0, #0
   13282:	d0e2      	beq.n	1324a <ble_ll_init_rx_pkt_in+0x9e>
            connsm->peer_addr_type = addr_type;
   13284:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   13288:	f886 3092 	strb.w	r3, [r6, #146]	; 0x92
            memcpy(connsm->peer_addr, addr, BLE_DEV_ADDR_LEN);
   1328c:	683b      	ldr	r3, [r7, #0]
   1328e:	f8c6 3093 	str.w	r3, [r6, #147]	; 0x93
   13292:	88bb      	ldrh	r3, [r7, #4]
   13294:	f8a6 3097 	strh.w	r3, [r6, #151]	; 0x97
   13298:	e7d7      	b.n	1324a <ble_ll_init_rx_pkt_in+0x9e>
            ble_ll_conn_set_csa(connsm, rxbuf[0] & BLE_ADV_PDU_HDR_CHSEL_MASK);
   1329a:	7821      	ldrb	r1, [r4, #0]
   1329c:	f3c1 1140 	ubfx	r1, r1, #5, #1
   132a0:	4630      	mov	r0, r6
   132a2:	f7ff fd03 	bl	12cac <ble_ll_conn_set_csa>
   132a6:	e7dc      	b.n	13262 <ble_ll_init_rx_pkt_in+0xb6>
   132a8:	20003ea8 	.word	0x20003ea8
   132ac:	20004100 	.word	0x20004100

000132b0 <ble_ll_init_rx_isr_start>:
int
ble_ll_init_rx_isr_start(uint8_t pdu_type, struct ble_mbuf_hdr *ble_hdr)
{
    struct ble_ll_conn_sm *connsm;

    connsm = g_ble_ll_conn_create_sm;
   132b0:	4b08      	ldr	r3, [pc, #32]	; (132d4 <ble_ll_init_rx_isr_start+0x24>)
   132b2:	681b      	ldr	r3, [r3, #0]
    if (!connsm) {
   132b4:	b143      	cbz	r3, 132c8 <ble_ll_init_rx_isr_start+0x18>
        return 0;
    }

    if ((pdu_type == BLE_ADV_PDU_TYPE_ADV_IND) ||
   132b6:	b148      	cbz	r0, 132cc <ble_ll_init_rx_isr_start+0x1c>
   132b8:	2801      	cmp	r0, #1
   132ba:	d009      	beq.n	132d0 <ble_ll_init_rx_isr_start+0x20>
        (pdu_type == BLE_ADV_PDU_TYPE_ADV_DIRECT_IND ||
   132bc:	2808      	cmp	r0, #8
   132be:	d001      	beq.n	132c4 <ble_ll_init_rx_isr_start+0x14>
        ble_hdr->rxinfo.flags |= BLE_MBUF_HDR_F_EXT_ADV;
        return 1;
    }
#endif

    return 0;
   132c0:	2000      	movs	r0, #0
}
   132c2:	4770      	bx	lr
        return 1;
   132c4:	2001      	movs	r0, #1
   132c6:	4770      	bx	lr
        return 0;
   132c8:	2000      	movs	r0, #0
   132ca:	4770      	bx	lr
        return 1;
   132cc:	2001      	movs	r0, #1
   132ce:	4770      	bx	lr
   132d0:	2001      	movs	r0, #1
   132d2:	4770      	bx	lr
   132d4:	20003ea8 	.word	0x20003ea8

000132d8 <ble_ll_init_rx_isr_end>:
 *       > 0: Do not disable PHY as that has already been done.
 */
int
ble_ll_init_rx_isr_end(uint8_t *rxbuf, uint8_t crcok,
                       struct ble_mbuf_hdr *ble_hdr)
{
   132d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   132dc:	b08d      	sub	sp, #52	; 0x34
    int chk_wl;
    int index;
    uint8_t pdu_type;
    uint8_t adv_addr_type;
    uint8_t peer_addr_type;
    uint8_t *adv_addr = NULL;
   132de:	2300      	movs	r3, #0
   132e0:	930a      	str	r3, [sp, #40]	; 0x28
    uint8_t *peer;
    uint8_t *init_addr = NULL;
   132e2:	9309      	str	r3, [sp, #36]	; 0x24
#endif
#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LL_EXT_ADV)
    struct ble_ll_scan_sm *scansm;
    uint8_t phy;
#endif
    int ext_adv_mode = -1;
   132e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   132e8:	9307      	str	r3, [sp, #28]

    /* Get connection state machine to use if connection to be established */
    connsm = g_ble_ll_conn_create_sm;
   132ea:	4bac      	ldr	r3, [pc, #688]	; (1359c <ble_ll_init_rx_isr_end+0x2c4>)
   132ec:	681e      	ldr	r6, [r3, #0]
    /* This could happen if connection init was cancelled while isr end was
     * already pending
     */
    if (!connsm) {
   132ee:	b1f6      	cbz	r6, 1332e <ble_ll_init_rx_isr_end+0x56>
   132f0:	4604      	mov	r4, r0
   132f2:	4690      	mov	r8, r2
        ble_ll_state_set(BLE_LL_STATE_STANDBY);
        return -1;
    }

    rc = -1;
    pdu_type = rxbuf[0] & BLE_ADV_PDU_HDR_TYPE_MASK;
   132f4:	7805      	ldrb	r5, [r0, #0]
   132f6:	f005 050f 	and.w	r5, r5, #15
    pyld_len = rxbuf[1];
   132fa:	7847      	ldrb	r7, [r0, #1]
        ble_hdr->rxinfo.user_data = scansm->cur_aux_data;
        scansm->cur_aux_data = NULL;
    }
#endif

    if (!crcok) {
   132fc:	b9e9      	cbnz	r1, 1333a <ble_ll_init_rx_isr_end+0x62>
    rc = -1;
   132fe:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff

    /*
     * We have to restart receive if we cant hand up pdu. We return 0 so that
     * the phy does not get disabled.
     */
    rxpdu = ble_ll_rxpdu_alloc(pyld_len + BLE_LL_PDU_HDR_LEN);
   13302:	1cb8      	adds	r0, r7, #2
   13304:	f7fd f946 	bl	10594 <ble_ll_rxpdu_alloc>
    if (rxpdu == NULL) {
   13308:	4605      	mov	r5, r0
   1330a:	2800      	cmp	r0, #0
   1330c:	f000 814f 	beq.w	135ae <ble_ll_init_rx_isr_end+0x2d6>
            ble_ll_sched_rmv_elem(&connsm->conn_sch);
        }
        ble_phy_restart_rx();
        rc = 0;
    } else {
        ble_phy_rxpdu_copy(rxbuf, rxpdu);
   13310:	4601      	mov	r1, r0
   13312:	4620      	mov	r0, r4
   13314:	f006 fa82 	bl	1981c <ble_phy_rxpdu_copy>
        ble_ll_rx_pdu_in(rxpdu);
   13318:	4628      	mov	r0, r5
   1331a:	f7fd fa65 	bl	107e8 <ble_ll_rx_pdu_in>
    }

    if (rc) {
   1331e:	f1b8 0f00 	cmp.w	r8, #0
   13322:	f000 814c 	beq.w	135be <ble_ll_init_rx_isr_end+0x2e6>
        ble_ll_state_set(BLE_LL_STATE_STANDBY);
   13326:	2000      	movs	r0, #0
   13328:	f7fd fb4a 	bl	109c0 <ble_ll_state_set>
   1332c:	e147      	b.n	135be <ble_ll_init_rx_isr_end+0x2e6>
        ble_ll_state_set(BLE_LL_STATE_STANDBY);
   1332e:	2000      	movs	r0, #0
   13330:	f7fd fb46 	bl	109c0 <ble_ll_state_set>
        return -1;
   13334:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   13338:	e141      	b.n	135be <ble_ll_init_rx_isr_end+0x2e6>
    if (ble_ll_scan_adv_decode_addr(pdu_type, rxbuf, ble_hdr,
   1333a:	ab07      	add	r3, sp, #28
   1333c:	9303      	str	r3, [sp, #12]
   1333e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
   13342:	9302      	str	r3, [sp, #8]
   13344:	ab09      	add	r3, sp, #36	; 0x24
   13346:	9301      	str	r3, [sp, #4]
   13348:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
   1334c:	9300      	str	r3, [sp, #0]
   1334e:	ab0a      	add	r3, sp, #40	; 0x28
   13350:	4601      	mov	r1, r0
   13352:	4628      	mov	r0, r5
   13354:	f004 ff5c 	bl	18210 <ble_ll_scan_adv_decode_addr>
   13358:	9004      	str	r0, [sp, #16]
   1335a:	2800      	cmp	r0, #0
   1335c:	f040 8106 	bne.w	1356c <ble_ll_init_rx_isr_end+0x294>
    switch (pdu_type) {
   13360:	b155      	cbz	r5, 13378 <ble_ll_init_rx_isr_end+0xa0>
   13362:	2d01      	cmp	r5, #1
   13364:	f040 8105 	bne.w	13572 <ble_ll_init_rx_isr_end+0x29a>
        inita_is_rpa = (uint8_t)ble_ll_is_rpa(init_addr, init_addr_type);
   13368:	f89d 1023 	ldrb.w	r1, [sp, #35]	; 0x23
   1336c:	9809      	ldr	r0, [sp, #36]	; 0x24
   1336e:	f7fd f952 	bl	10616 <ble_ll_is_rpa>
   13372:	b2c5      	uxtb	r5, r0
        if (!inita_is_rpa) {
   13374:	2d00      	cmp	r5, #0
   13376:	d036      	beq.n	133e6 <ble_ll_init_rx_isr_end+0x10e>
    peer = adv_addr;
   13378:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    peer_addr_type = adv_addr_type;
   1337c:	f89d b02f 	ldrb.w	fp, [sp, #47]	; 0x2f
    chk_wl = ble_ll_scan_whitelist_enabled();
   13380:	f005 f906 	bl	18590 <ble_ll_scan_whitelist_enabled>
   13384:	9005      	str	r0, [sp, #20]
    if (ble_ll_is_rpa(adv_addr, adv_addr_type) && ble_ll_resolv_enabled()) {
   13386:	f89d 102f 	ldrb.w	r1, [sp, #47]	; 0x2f
   1338a:	980a      	ldr	r0, [sp, #40]	; 0x28
   1338c:	f7fd f943 	bl	10616 <ble_ll_is_rpa>
   13390:	2800      	cmp	r0, #0
   13392:	d132      	bne.n	133fa <ble_ll_init_rx_isr_end+0x122>
    } else if (init_addr) {
   13394:	9b09      	ldr	r3, [sp, #36]	; 0x24
   13396:	2b00      	cmp	r3, #0
   13398:	f000 808f 	beq.w	134ba <ble_ll_init_rx_isr_end+0x1e2>
        if (inita_is_rpa && !ble_ll_resolv_enabled()) {
   1339c:	b125      	cbz	r5, 133a8 <ble_ll_init_rx_isr_end+0xd0>
   1339e:	f003 fe7d 	bl	1709c <ble_ll_resolv_enabled>
   133a2:	2800      	cmp	r0, #0
   133a4:	f000 80f1 	beq.w	1358a <ble_ll_init_rx_isr_end+0x2b2>
        rl = ble_ll_resolv_list_find(adv_addr, adv_addr_type);
   133a8:	f89d 102f 	ldrb.w	r1, [sp, #47]	; 0x2f
   133ac:	980a      	ldr	r0, [sp, #40]	; 0x28
   133ae:	f003 fc1f 	bl	16bf0 <ble_ll_resolv_list_find>
        if (rl && !inita_is_rpa &&
   133b2:	4682      	mov	sl, r0
   133b4:	b130      	cbz	r0, 133c4 <ble_ll_init_rx_isr_end+0xec>
   133b6:	b92d      	cbnz	r5, 133c4 <ble_ll_init_rx_isr_end+0xec>
           (rl->rl_priv_mode == BLE_HCI_PRIVACY_NETWORK) &&
   133b8:	7843      	ldrb	r3, [r0, #1]
        if (rl && !inita_is_rpa &&
   133ba:	b91b      	cbnz	r3, 133c4 <ble_ll_init_rx_isr_end+0xec>
           rl->rl_has_local) {
   133bc:	7883      	ldrb	r3, [r0, #2]
           (rl->rl_priv_mode == BLE_HCI_PRIVACY_NETWORK) &&
   133be:	2b00      	cmp	r3, #0
   133c0:	f040 80e6 	bne.w	13590 <ble_ll_init_rx_isr_end+0x2b8>
        if (inita_is_rpa) {
   133c4:	2d00      	cmp	r5, #0
   133c6:	f000 8096 	beq.w	134f6 <ble_ll_init_rx_isr_end+0x21e>
            if (!rl || !ble_ll_resolv_rpa(init_addr, rl->rl_local_irk)) {
   133ca:	f1ba 0f00 	cmp.w	sl, #0
   133ce:	f000 80e2 	beq.w	13596 <ble_ll_init_rx_isr_end+0x2be>
   133d2:	f10a 0104 	add.w	r1, sl, #4
   133d6:	9809      	ldr	r0, [sp, #36]	; 0x24
   133d8:	f003 fe2c 	bl	17034 <ble_ll_resolv_rpa>
   133dc:	2800      	cmp	r0, #0
   133de:	d15c      	bne.n	1349a <ble_ll_init_rx_isr_end+0x1c2>
    rc = -1;
   133e0:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   133e4:	e78d      	b.n	13302 <ble_ll_init_rx_isr_end+0x2a>
            if (!ble_ll_is_our_devaddr(init_addr, init_addr_type)) {
   133e6:	f89d 1023 	ldrb.w	r1, [sp, #35]	; 0x23
   133ea:	9809      	ldr	r0, [sp, #36]	; 0x24
   133ec:	f7fd f9c0 	bl	10770 <ble_ll_is_our_devaddr>
   133f0:	2800      	cmp	r0, #0
   133f2:	d1c1      	bne.n	13378 <ble_ll_init_rx_isr_end+0xa0>
    rc = -1;
   133f4:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   133f8:	e783      	b.n	13302 <ble_ll_init_rx_isr_end+0x2a>
    if (ble_ll_is_rpa(adv_addr, adv_addr_type) && ble_ll_resolv_enabled()) {
   133fa:	f003 fe4f 	bl	1709c <ble_ll_resolv_enabled>
   133fe:	2800      	cmp	r0, #0
   13400:	d0c8      	beq.n	13394 <ble_ll_init_rx_isr_end+0xbc>
        index = ble_hw_resolv_list_match();
   13402:	f006 f891 	bl	19528 <ble_hw_resolv_list_match>
        if (index >= 0) {
   13406:	f1b0 0a00 	subs.w	sl, r0, #0
   1340a:	db3d      	blt.n	13488 <ble_ll_init_rx_isr_end+0x1b0>
            ble_hdr->rxinfo.flags |= BLE_MBUF_HDR_F_RESOLVED;
   1340c:	f8b8 3000 	ldrh.w	r3, [r8]
   13410:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   13414:	f8a8 3000 	strh.w	r3, [r8]
            connsm->rpa_index = index;
   13418:	f886 a009 	strb.w	sl, [r6, #9]
            peer = rl->rl_identity_addr;
   1341c:	2336      	movs	r3, #54	; 0x36
   1341e:	fb03 f30a 	mul.w	r3, r3, sl
   13422:	f103 0920 	add.w	r9, r3, #32
   13426:	4a5e      	ldr	r2, [pc, #376]	; (135a0 <ble_ll_init_rx_isr_end+0x2c8>)
   13428:	4491      	add	r9, r2
   1342a:	f109 0904 	add.w	r9, r9, #4
            peer_addr_type = rl->rl_addr_type;
   1342e:	18d1      	adds	r1, r2, r3
   13430:	f812 b003 	ldrb.w	fp, [r2, r3]
            if ((rl->rl_priv_mode == BLE_HCI_PRIVACY_NETWORK) && init_addr &&
   13434:	784b      	ldrb	r3, [r1, #1]
   13436:	b933      	cbnz	r3, 13446 <ble_ll_init_rx_isr_end+0x16e>
   13438:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1343a:	b123      	cbz	r3, 13446 <ble_ll_init_rx_isr_end+0x16e>
   1343c:	b91d      	cbnz	r5, 13446 <ble_ll_init_rx_isr_end+0x16e>
                !inita_is_rpa && rl->rl_has_local) {
   1343e:	788b      	ldrb	r3, [r1, #2]
   13440:	2b00      	cmp	r3, #0
   13442:	f040 8099 	bne.w	13578 <ble_ll_init_rx_isr_end+0x2a0>
            if (init_addr && inita_is_rpa) {
   13446:	9809      	ldr	r0, [sp, #36]	; 0x24
   13448:	b388      	cbz	r0, 134ae <ble_ll_init_rx_isr_end+0x1d6>
   1344a:	b915      	cbnz	r5, 13452 <ble_ll_init_rx_isr_end+0x17a>
            resolved = 1;
   1344c:	2301      	movs	r3, #1
   1344e:	9304      	str	r3, [sp, #16]
   13450:	e035      	b.n	134be <ble_ll_init_rx_isr_end+0x1e6>
                                       g_ble_ll_resolv_list[index].rl_local_irk)) {
   13452:	2136      	movs	r1, #54	; 0x36
   13454:	4b52      	ldr	r3, [pc, #328]	; (135a0 <ble_ll_init_rx_isr_end+0x2c8>)
   13456:	fb01 310a 	mla	r1, r1, sl, r3
                if (!ble_ll_resolv_rpa(init_addr,
   1345a:	3104      	adds	r1, #4
   1345c:	f003 fdea 	bl	17034 <ble_ll_resolv_rpa>
   13460:	b910      	cbnz	r0, 13468 <ble_ll_init_rx_isr_end+0x190>
    rc = -1;
   13462:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   13466:	e74c      	b.n	13302 <ble_ll_init_rx_isr_end+0x2a>
                memcpy(init_addr, rl->rl_local_rpa, BLE_DEV_ADDR_LEN);
   13468:	2336      	movs	r3, #54	; 0x36
   1346a:	fb03 f30a 	mul.w	r3, r3, sl
   1346e:	f103 0228 	add.w	r2, r3, #40	; 0x28
   13472:	4b4b      	ldr	r3, [pc, #300]	; (135a0 <ble_ll_init_rx_isr_end+0x2c8>)
   13474:	4413      	add	r3, r2
   13476:	9a09      	ldr	r2, [sp, #36]	; 0x24
   13478:	f853 1f02 	ldr.w	r1, [r3, #2]!
   1347c:	6011      	str	r1, [r2, #0]
   1347e:	889b      	ldrh	r3, [r3, #4]
   13480:	8093      	strh	r3, [r2, #4]
            resolved = 1;
   13482:	2301      	movs	r3, #1
   13484:	9304      	str	r3, [sp, #16]
   13486:	e01a      	b.n	134be <ble_ll_init_rx_isr_end+0x1e6>
            if (chk_wl) {
   13488:	9a05      	ldr	r2, [sp, #20]
   1348a:	2a00      	cmp	r2, #0
   1348c:	d177      	bne.n	1357e <ble_ll_init_rx_isr_end+0x2a6>
            if (init_addr && inita_is_rpa) {
   1348e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   13490:	b183      	cbz	r3, 134b4 <ble_ll_init_rx_isr_end+0x1dc>
   13492:	2d00      	cmp	r5, #0
   13494:	d176      	bne.n	13584 <ble_ll_init_rx_isr_end+0x2ac>
    resolved = 0;
   13496:	9204      	str	r2, [sp, #16]
   13498:	e011      	b.n	134be <ble_ll_init_rx_isr_end+0x1e6>
            memcpy(init_addr, rl->rl_local_rpa, BLE_DEV_ADDR_LEN);
   1349a:	4653      	mov	r3, sl
   1349c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1349e:	f853 1f2a 	ldr.w	r1, [r3, #42]!
   134a2:	6011      	str	r1, [r2, #0]
   134a4:	889b      	ldrh	r3, [r3, #4]
   134a6:	8093      	strh	r3, [r2, #4]
    index = -1;
   134a8:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   134ac:	e007      	b.n	134be <ble_ll_init_rx_isr_end+0x1e6>
            resolved = 1;
   134ae:	2301      	movs	r3, #1
   134b0:	9304      	str	r3, [sp, #16]
   134b2:	e004      	b.n	134be <ble_ll_init_rx_isr_end+0x1e6>
    resolved = 0;
   134b4:	9b05      	ldr	r3, [sp, #20]
   134b6:	9304      	str	r3, [sp, #16]
   134b8:	e001      	b.n	134be <ble_ll_init_rx_isr_end+0x1e6>
    index = -1;
   134ba:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
    if (chk_wl) {
   134be:	9b05      	ldr	r3, [sp, #20]
   134c0:	b1e3      	cbz	r3, 134fc <ble_ll_init_rx_isr_end+0x224>
        if (!ble_ll_whitelist_match(peer, peer_addr_type, resolved)) {
   134c2:	9a04      	ldr	r2, [sp, #16]
   134c4:	4659      	mov	r1, fp
   134c6:	4648      	mov	r0, r9
   134c8:	f005 fe4c 	bl	19164 <ble_ll_whitelist_match>
   134cc:	2800      	cmp	r0, #0
   134ce:	d06b      	beq.n	135a8 <ble_ll_init_rx_isr_end+0x2d0>
    ble_hdr->rxinfo.flags |= BLE_MBUF_HDR_F_DEVMATCH;
   134d0:	f8b8 3000 	ldrh.w	r3, [r8]
   134d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   134d8:	f8a8 3000 	strh.w	r3, [r8]
    if (ble_ll_sched_master_new(connsm, ble_hdr, pyld_len)) {
   134dc:	463a      	mov	r2, r7
   134de:	4641      	mov	r1, r8
   134e0:	4630      	mov	r0, r6
   134e2:	f005 fa3d 	bl	18960 <ble_ll_sched_master_new>
   134e6:	b1a0      	cbz	r0, 13512 <ble_ll_init_rx_isr_end+0x23a>
        STATS_INC(ble_ll_conn_stats, cant_set_sched);
   134e8:	4a2e      	ldr	r2, [pc, #184]	; (135a4 <ble_ll_init_rx_isr_end+0x2cc>)
   134ea:	68d3      	ldr	r3, [r2, #12]
   134ec:	3301      	adds	r3, #1
   134ee:	60d3      	str	r3, [r2, #12]
    rc = -1;
   134f0:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
        goto init_rx_isr_exit;
   134f4:	e705      	b.n	13302 <ble_ll_init_rx_isr_end+0x2a>
    index = -1;
   134f6:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   134fa:	e7e0      	b.n	134be <ble_ll_init_rx_isr_end+0x1e6>
        if (!ble_ll_conn_is_peer_adv(adv_addr_type, adv_addr, index)) {
   134fc:	4652      	mov	r2, sl
   134fe:	990a      	ldr	r1, [sp, #40]	; 0x28
   13500:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
   13504:	f7ff f8e2 	bl	126cc <ble_ll_conn_is_peer_adv>
   13508:	2800      	cmp	r0, #0
   1350a:	d1e1      	bne.n	134d0 <ble_ll_init_rx_isr_end+0x1f8>
    rc = -1;
   1350c:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   13510:	e6f7      	b.n	13302 <ble_ll_init_rx_isr_end+0x2a>
    ble_ll_conn_connect_ind_prepare(connsm,
   13512:	f005 f839 	bl	18588 <ble_ll_scan_get_pdu_data>
   13516:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
   1351a:	f898 3002 	ldrb.w	r3, [r8, #2]
   1351e:	9303      	str	r3, [sp, #12]
   13520:	f8cd a008 	str.w	sl, [sp, #8]
   13524:	9b09      	ldr	r3, [sp, #36]	; 0x24
   13526:	9301      	str	r3, [sp, #4]
   13528:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   1352c:	9300      	str	r3, [sp, #0]
   1352e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13530:	4601      	mov	r1, r0
   13532:	4630      	mov	r0, r6
   13534:	f7ff f94e 	bl	127d4 <ble_ll_conn_connect_ind_prepare>
    rc = ble_ll_conn_connect_ind_send(connsm, conn_req_end_trans);
   13538:	2100      	movs	r1, #0
   1353a:	4630      	mov	r0, r6
   1353c:	f7ff fe08 	bl	13150 <ble_ll_conn_connect_ind_send>
    if (rc) {
   13540:	4680      	mov	r8, r0
   13542:	b970      	cbnz	r0, 13562 <ble_ll_init_rx_isr_end+0x28a>
    if (init_addr && !inita_is_rpa) {
   13544:	9b09      	ldr	r3, [sp, #36]	; 0x24
   13546:	b11b      	cbz	r3, 13550 <ble_ll_init_rx_isr_end+0x278>
   13548:	b915      	cbnz	r5, 13550 <ble_ll_init_rx_isr_end+0x278>
        connsm->inita_identity_used = 1;
   1354a:	2301      	movs	r3, #1
   1354c:	f886 3090 	strb.w	r3, [r6, #144]	; 0x90
    CONN_F_CONN_REQ_TXD(connsm) = 1;
   13550:	7873      	ldrb	r3, [r6, #1]
   13552:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   13556:	7073      	strb	r3, [r6, #1]
    STATS_INC(ble_ll_conn_stats, conn_req_txd);
   13558:	4a12      	ldr	r2, [pc, #72]	; (135a4 <ble_ll_init_rx_isr_end+0x2cc>)
   1355a:	6c13      	ldr	r3, [r2, #64]	; 0x40
   1355c:	3301      	adds	r3, #1
   1355e:	6413      	str	r3, [r2, #64]	; 0x40
   13560:	e6cf      	b.n	13302 <ble_ll_init_rx_isr_end+0x2a>
        ble_ll_sched_rmv_elem(&connsm->conn_sch);
   13562:	f106 00dc 	add.w	r0, r6, #220	; 0xdc
   13566:	f005 fc8f 	bl	18e88 <ble_ll_sched_rmv_elem>
        goto init_rx_isr_exit;
   1356a:	e6ca      	b.n	13302 <ble_ll_init_rx_isr_end+0x2a>
    rc = -1;
   1356c:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   13570:	e6c7      	b.n	13302 <ble_ll_init_rx_isr_end+0x2a>
   13572:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   13576:	e6c4      	b.n	13302 <ble_ll_init_rx_isr_end+0x2a>
   13578:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   1357c:	e6c1      	b.n	13302 <ble_ll_init_rx_isr_end+0x2a>
   1357e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   13582:	e6be      	b.n	13302 <ble_ll_init_rx_isr_end+0x2a>
   13584:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   13588:	e6bb      	b.n	13302 <ble_ll_init_rx_isr_end+0x2a>
   1358a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   1358e:	e6b8      	b.n	13302 <ble_ll_init_rx_isr_end+0x2a>
   13590:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   13594:	e6b5      	b.n	13302 <ble_ll_init_rx_isr_end+0x2a>
   13596:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   1359a:	e6b2      	b.n	13302 <ble_ll_init_rx_isr_end+0x2a>
   1359c:	20003ea8 	.word	0x20003ea8
   135a0:	20004100 	.word	0x20004100
   135a4:	20004050 	.word	0x20004050
   135a8:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   135ac:	e6a9      	b.n	13302 <ble_ll_init_rx_isr_end+0x2a>
        if (CONN_F_CONN_REQ_TXD(connsm) == 1) {
   135ae:	f996 3001 	ldrsb.w	r3, [r6, #1]
   135b2:	2b00      	cmp	r3, #0
   135b4:	db07      	blt.n	135c6 <ble_ll_init_rx_isr_end+0x2ee>
        ble_phy_restart_rx();
   135b6:	f006 fd89 	bl	1a0cc <ble_phy_restart_rx>
        rc = 0;
   135ba:	f04f 0800 	mov.w	r8, #0
    }

    return rc;
}
   135be:	4640      	mov	r0, r8
   135c0:	b00d      	add	sp, #52	; 0x34
   135c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            CONN_F_CONN_REQ_TXD(connsm) = 0;
   135c6:	7873      	ldrb	r3, [r6, #1]
   135c8:	f36f 13c7 	bfc	r3, #7, #1
   135cc:	7073      	strb	r3, [r6, #1]
            CONN_F_AUX_CONN_REQ(connsm) = 0;
   135ce:	78f3      	ldrb	r3, [r6, #3]
   135d0:	f36f 0382 	bfc	r3, #2, #1
   135d4:	70f3      	strb	r3, [r6, #3]
            ble_ll_sched_rmv_elem(&connsm->conn_sch);
   135d6:	f106 00dc 	add.w	r0, r6, #220	; 0xdc
   135da:	f005 fc55 	bl	18e88 <ble_ll_sched_rmv_elem>
   135de:	e7ea      	b.n	135b6 <ble_ll_init_rx_isr_end+0x2de>

000135e0 <ble_ll_conn_timeout>:
 * @param connsm
 * @param ble_err
 */
void
ble_ll_conn_timeout(struct ble_ll_conn_sm *connsm, uint8_t ble_err)
{
   135e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   135e2:	4604      	mov	r4, r0
   135e4:	460d      	mov	r5, r1
    int was_current;
    os_sr_t sr;

    was_current = 0;
    OS_ENTER_CRITICAL(sr);
   135e6:	f7fa f907 	bl	d7f8 <os_arch_save_sr>
   135ea:	4606      	mov	r6, r0
    if (g_ble_ll_conn_cur_sm == connsm) {
   135ec:	4b0a      	ldr	r3, [pc, #40]	; (13618 <ble_ll_conn_timeout+0x38>)
   135ee:	681b      	ldr	r3, [r3, #0]
   135f0:	42a3      	cmp	r3, r4
   135f2:	d009      	beq.n	13608 <ble_ll_conn_timeout+0x28>
    was_current = 0;
   135f4:	2700      	movs	r7, #0
        ble_ll_conn_current_sm_over(NULL);
        was_current = 1;
    }
    OS_EXIT_CRITICAL(sr);
   135f6:	4630      	mov	r0, r6
   135f8:	f7fa f904 	bl	d804 <os_arch_restore_sr>

    /* Check if we need to resume scanning */
    if (was_current) {
   135fc:	b94f      	cbnz	r7, 13612 <ble_ll_conn_timeout+0x32>
        ble_ll_scan_chk_resume();
    }

    ble_ll_conn_end(connsm, ble_err);
   135fe:	4629      	mov	r1, r5
   13600:	4620      	mov	r0, r4
   13602:	f7ff fc7f 	bl	12f04 <ble_ll_conn_end>
}
   13606:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ble_ll_conn_current_sm_over(NULL);
   13608:	2000      	movs	r0, #0
   1360a:	f7fe fbc7 	bl	11d9c <ble_ll_conn_current_sm_over>
        was_current = 1;
   1360e:	2701      	movs	r7, #1
   13610:	e7f1      	b.n	135f6 <ble_ll_conn_timeout+0x16>
        ble_ll_scan_chk_resume();
   13612:	f004 fe29 	bl	18268 <ble_ll_scan_chk_resume>
   13616:	e7f2      	b.n	135fe <ble_ll_conn_timeout+0x1e>
   13618:	20003e98 	.word	0x20003e98

0001361c <ble_ll_conn_rx_isr_start>:
 *
 * @param rxhdr
 */
int
ble_ll_conn_rx_isr_start(struct ble_mbuf_hdr *rxhdr, uint32_t aa)
{
   1361c:	b510      	push	{r4, lr}
     * Disable wait for response timer since we receive a response. We dont
     * care if this is the response we were waiting for or not; the code
     * called at receive end will deal with ending the connection event
     * if needed
     */
    connsm = g_ble_ll_conn_cur_sm;
   1361e:	4b19      	ldr	r3, [pc, #100]	; (13684 <ble_ll_conn_rx_isr_start+0x68>)
   13620:	681c      	ldr	r4, [r3, #0]
    if (connsm) {
   13622:	b35c      	cbz	r4, 1367c <ble_ll_conn_rx_isr_start+0x60>
        /* Double check access address. Better match connection state machine */
        if (aa != connsm->access_addr) {
   13624:	6d63      	ldr	r3, [r4, #84]	; 0x54
   13626:	428b      	cmp	r3, r1
   13628:	d117      	bne.n	1365a <ble_ll_conn_rx_isr_start+0x3e>
            g_ble_ll_conn_cur_sm = NULL;
            return -1;
        }

        /* Set connection handle in mbuf header */
        rxhdr->rxinfo.handle = connsm->conn_handle;
   1362a:	88a3      	ldrh	r3, [r4, #4]
   1362c:	70c3      	strb	r3, [r0, #3]

        /* Set flag denoting we have received a packet in connection event */
        connsm->csmflags.cfbit.pkt_rxd = 1;
   1362e:	7823      	ldrb	r3, [r4, #0]
   13630:	f043 0301 	orr.w	r3, r3, #1
   13634:	7023      	strb	r3, [r4, #0]

        /* Connection is established */
        connsm->conn_state = BLE_LL_CONN_STATE_ESTABLISHED;
   13636:	2202      	movs	r2, #2
   13638:	71a2      	strb	r2, [r4, #6]

        /* Set anchor point (and last) if 1st rxd frame in connection event */
        if (connsm->csmflags.cfbit.slave_set_last_anchor) {
   1363a:	f013 0f20 	tst.w	r3, #32
   1363e:	d01f      	beq.n	13680 <ble_ll_conn_rx_isr_start+0x64>
            connsm->csmflags.cfbit.slave_set_last_anchor = 0;
   13640:	b2db      	uxtb	r3, r3
   13642:	f36f 1345 	bfc	r3, #5, #1
   13646:	7023      	strb	r3, [r4, #0]
            connsm->last_anchor_point = rxhdr->beg_cputime;
   13648:	6883      	ldr	r3, [r0, #8]
   1364a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
            connsm->anchor_point = connsm->last_anchor_point;
   1364e:	6763      	str	r3, [r4, #116]	; 0x74
            connsm->anchor_point_usecs = rxhdr->rem_usecs;
   13650:	68c3      	ldr	r3, [r0, #12]
   13652:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
        }
    }
    return 1;
   13656:	2001      	movs	r0, #1
}
   13658:	bd10      	pop	{r4, pc}
            STATS_INC(ble_ll_conn_stats, rx_data_pdu_bad_aa);
   1365a:	4a0b      	ldr	r2, [pc, #44]	; (13688 <ble_ll_conn_rx_isr_start+0x6c>)
   1365c:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1365e:	3301      	adds	r3, #1
   13660:	6293      	str	r3, [r2, #40]	; 0x28
            ble_ll_state_set(BLE_LL_STATE_STANDBY);
   13662:	2000      	movs	r0, #0
   13664:	f7fd f9ac 	bl	109c0 <ble_ll_state_set>
            ble_ll_event_send(&connsm->conn_ev_end);
   13668:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   1366c:	f7fd f9b4 	bl	109d8 <ble_ll_event_send>
            g_ble_ll_conn_cur_sm = NULL;
   13670:	4b04      	ldr	r3, [pc, #16]	; (13684 <ble_ll_conn_rx_isr_start+0x68>)
   13672:	2200      	movs	r2, #0
   13674:	601a      	str	r2, [r3, #0]
            return -1;
   13676:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1367a:	e7ed      	b.n	13658 <ble_ll_conn_rx_isr_start+0x3c>
    return 1;
   1367c:	2001      	movs	r0, #1
   1367e:	e7eb      	b.n	13658 <ble_ll_conn_rx_isr_start+0x3c>
   13680:	2001      	movs	r0, #1
   13682:	e7e9      	b.n	13658 <ble_ll_conn_rx_isr_start+0x3c>
   13684:	20003e98 	.word	0x20003e98
   13688:	20004050 	.word	0x20004050

0001368c <ble_ll_conn_rx_data_pdu>:
 * @param rxpdu Pointer to received pdu
 * @param rxpdu Pointer to ble mbuf header of received pdu
 */
void
ble_ll_conn_rx_data_pdu(struct os_mbuf *rxpdu, struct ble_mbuf_hdr *hdr)
{
   1368c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13690:	4605      	mov	r5, r0
    uint8_t llid;
    uint16_t acl_len;
    uint16_t acl_hdr;
    struct ble_ll_conn_sm *connsm;

    if (BLE_MBUF_HDR_CRC_OK(hdr)) {
   13692:	880b      	ldrh	r3, [r1, #0]
   13694:	f013 0f80 	tst.w	r3, #128	; 0x80
   13698:	f000 80b3 	beq.w	13802 <ble_ll_conn_rx_data_pdu+0x176>
   1369c:	460c      	mov	r4, r1
        /* XXX: there is a chance that the connection was thrown away and
           re-used before processing packets here. Fix this. */
        /* We better have a connection state machine */
        connsm = ble_ll_conn_find_active_conn(hdr->rxinfo.handle);
   1369e:	78c8      	ldrb	r0, [r1, #3]
   136a0:	f7ff f90e 	bl	128c0 <ble_ll_conn_find_active_conn>
        if (connsm) {
   136a4:	4606      	mov	r6, r0
   136a6:	2800      	cmp	r0, #0
   136a8:	f000 80a7 	beq.w	137fa <ble_ll_conn_rx_data_pdu+0x16e>
            /* Check state machine */
            ble_ll_conn_chk_csm_flags(connsm);
   136ac:	f7fe ff88 	bl	125c0 <ble_ll_conn_chk_csm_flags>

            /* Validate rx data pdu */
            rxbuf = rxpdu->om_data;
   136b0:	682b      	ldr	r3, [r5, #0]
            hdr_byte = rxbuf[0];
   136b2:	781f      	ldrb	r7, [r3, #0]
            acl_len = rxbuf[1];
   136b4:	f893 8001 	ldrb.w	r8, [r3, #1]
   136b8:	fa1f f988 	uxth.w	r9, r8

            /*
             * Check that the LLID and payload length are reasonable.
             * Empty payload is only allowed for LLID == 01b.
             *  */
            if ((llid == 0) ||
   136bc:	f017 0a03 	ands.w	sl, r7, #3
   136c0:	d005      	beq.n	136ce <ble_ll_conn_rx_data_pdu+0x42>
   136c2:	f1b9 0f00 	cmp.w	r9, #0
   136c6:	d107      	bne.n	136d8 <ble_ll_conn_rx_data_pdu+0x4c>
                ((acl_len == 0) && (llid != BLE_LL_LLID_DATA_FRAG))) {
   136c8:	f1ba 0f01 	cmp.w	sl, #1
   136cc:	d004      	beq.n	136d8 <ble_ll_conn_rx_data_pdu+0x4c>
                STATS_INC(ble_ll_conn_stats, rx_bad_llid);
   136ce:	4a4f      	ldr	r2, [pc, #316]	; (1380c <ble_ll_conn_rx_data_pdu+0x180>)
   136d0:	6d93      	ldr	r3, [r2, #88]	; 0x58
   136d2:	3301      	adds	r3, #1
   136d4:	6593      	str	r3, [r2, #88]	; 0x58
                goto conn_rx_data_pdu_end;
   136d6:	e094      	b.n	13802 <ble_ll_conn_rx_data_pdu+0x176>
            /* Check if PDU is allowed when encryption is started. If not,
             * terminate connection.
             *
             * Reference: Core 5.0, Vol 6, Part B, 5.1.3.1
             */
            if ((connsm->enc_data.enc_state > CONN_ENC_S_PAUSE_ENC_RSP_WAIT) &&
   136d8:	f896 3118 	ldrb.w	r3, [r6, #280]	; 0x118
   136dc:	2b04      	cmp	r3, #4
   136de:	d843      	bhi.n	13768 <ble_ll_conn_rx_data_pdu+0xdc>
            /*
             * Reset authenticated payload timeout if valid MIC. NOTE: we dont
             * check the MIC failure bit as that would have terminated the
             * connection
             */
            if ((connsm->enc_data.enc_state == CONN_ENC_S_ENCRYPTED) &&
   136e0:	f896 3118 	ldrb.w	r3, [r6, #280]	; 0x118
   136e4:	2b02      	cmp	r3, #2
   136e6:	d049      	beq.n	1377c <ble_ll_conn_rx_data_pdu+0xf0>
                ble_ll_conn_auth_pyld_timer_start(connsm);
            }
#endif

            /* Update RSSI */
            connsm->conn_rssi = hdr->rxinfo.rssi;
   136e8:	f994 3004 	ldrsb.w	r3, [r4, #4]
   136ec:	7233      	strb	r3, [r6, #8]

            /*
             * If we are a slave, we can only start to use slave latency
             * once we have received a NESN of 1 from the master
             */
            if (connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) {
   136ee:	79f3      	ldrb	r3, [r6, #7]
   136f0:	2b02      	cmp	r3, #2
   136f2:	d04e      	beq.n	13792 <ble_ll_conn_rx_data_pdu+0x106>

            /*
             * Discard the received PDU if the sequence number is the same
             * as the last received sequence number
             */
            rxd_sn = hdr_byte & BLE_LL_DATA_HDR_SN_MASK;
   136f4:	f007 0708 	and.w	r7, r7, #8
            if (rxd_sn != connsm->last_rxd_sn) {
   136f8:	f896 3035 	ldrb.w	r3, [r6, #53]	; 0x35
   136fc:	42bb      	cmp	r3, r7
   136fe:	d077      	beq.n	137f0 <ble_ll_conn_rx_data_pdu+0x164>
                /* Update last rxd sn */
                connsm->last_rxd_sn = rxd_sn;
   13700:	f886 7035 	strb.w	r7, [r6, #53]	; 0x35

                /* No need to do anything if empty pdu */
                if ((llid == BLE_LL_LLID_DATA_FRAG) && (acl_len == 0)) {
   13704:	f1ba 0f01 	cmp.w	sl, #1
   13708:	d04b      	beq.n	137a2 <ble_ll_conn_rx_data_pdu+0x116>
#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LE_ENCRYPTION)
                /*
                 * XXX: should we check to see if we are in a state where we
                 * might expect to get an encrypted PDU?
                 */
                if (BLE_MBUF_HDR_MIC_FAILURE(hdr)) {
   1370a:	8823      	ldrh	r3, [r4, #0]
   1370c:	f013 0f20 	tst.w	r3, #32
   13710:	d14b      	bne.n	137aa <ble_ll_conn_rx_data_pdu+0x11e>
                    ble_ll_conn_timeout(connsm, BLE_ERR_CONN_TERM_MIC);
                    goto conn_rx_data_pdu_end;
                }
#endif

                if (llid == BLE_LL_LLID_CTRL) {
   13712:	f1ba 0f03 	cmp.w	sl, #3
   13716:	d051      	beq.n	137bc <ble_ll_conn_rx_data_pdu+0x130>
                    if (ble_ll_ctrl_rx_pdu(connsm, rxpdu)) {
                        STATS_INC(ble_ll_conn_stats, rx_malformed_ctrl_pdus);
                    }
                } else {
                    /* Count # of received l2cap frames and byes */
                    STATS_INC(ble_ll_conn_stats, rx_l2cap_pdus);
   13718:	4a3c      	ldr	r2, [pc, #240]	; (1380c <ble_ll_conn_rx_data_pdu+0x180>)
   1371a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   1371c:	3301      	adds	r3, #1
   1371e:	64d3      	str	r3, [r2, #76]	; 0x4c
                    STATS_INCN(ble_ll_conn_stats, rx_l2cap_bytes, acl_len);
   13720:	6d13      	ldr	r3, [r2, #80]	; 0x50
   13722:	4443      	add	r3, r8
   13724:	6513      	str	r3, [r2, #80]	; 0x50
    if (OS_MBUF_IS_PKTHDR(om)) {
   13726:	796b      	ldrb	r3, [r5, #5]
   13728:	2b07      	cmp	r3, #7
   1372a:	d955      	bls.n	137d8 <ble_ll_conn_rx_data_pdu+0x14c>
        startoff = om->om_pkthdr_len;
   1372c:	b299      	uxth	r1, r3
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   1372e:	462a      	mov	r2, r5
   13730:	f852 3b10 	ldr.w	r3, [r2], #16
        ((uint8_t *) &om->om_databuf[0] + startoff));
   13734:	440a      	add	r2, r1
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   13736:	1a9b      	subs	r3, r3, r2
   13738:	b29b      	uxth	r3, r3

                    /* NOTE: there should be at least two bytes available */
                    BLE_LL_ASSERT(OS_MBUF_LEADINGSPACE(rxpdu) >= 2);
   1373a:	2b01      	cmp	r3, #1
   1373c:	d94e      	bls.n	137dc <ble_ll_conn_rx_data_pdu+0x150>
                    os_mbuf_prepend(rxpdu, 2);
   1373e:	2102      	movs	r1, #2
   13740:	4628      	mov	r0, r5
   13742:	f7fa fb25 	bl	dd90 <os_mbuf_prepend>
                    rxbuf = rxpdu->om_data;
   13746:	682c      	ldr	r4, [r5, #0]

                    acl_hdr = (llid << 12) | connsm->conn_handle;
   13748:	f9b6 1004 	ldrsh.w	r1, [r6, #4]
   1374c:	ea41 310a 	orr.w	r1, r1, sl, lsl #12
                    put_le16(rxbuf, acl_hdr);
   13750:	b289      	uxth	r1, r1
   13752:	4620      	mov	r0, r4
   13754:	f015 fffa 	bl	2974c <put_le16>
                    put_le16(rxbuf + 2, acl_len);
   13758:	4649      	mov	r1, r9
   1375a:	1ca0      	adds	r0, r4, #2
   1375c:	f015 fff6 	bl	2974c <put_le16>
                    ble_hci_trans_ll_acl_tx(rxpdu);
   13760:	4628      	mov	r0, r5
   13762:	f012 fc6f 	bl	26044 <ble_hci_trans_ll_acl_tx>
   13766:	e04f      	b.n	13808 <ble_ll_conn_rx_data_pdu+0x17c>
                    !ble_ll_ctrl_enc_allowed_pdu_rx(rxpdu)) {
   13768:	4628      	mov	r0, r5
   1376a:	f001 fd2f 	bl	151cc <ble_ll_ctrl_enc_allowed_pdu_rx>
            if ((connsm->enc_data.enc_state > CONN_ENC_S_PAUSE_ENC_RSP_WAIT) &&
   1376e:	2800      	cmp	r0, #0
   13770:	d1b6      	bne.n	136e0 <ble_ll_conn_rx_data_pdu+0x54>
                ble_ll_conn_timeout(connsm, BLE_ERR_CONN_TERM_MIC);
   13772:	213d      	movs	r1, #61	; 0x3d
   13774:	4630      	mov	r0, r6
   13776:	f7ff ff33 	bl	135e0 <ble_ll_conn_timeout>
                goto conn_rx_data_pdu_end;
   1377a:	e042      	b.n	13802 <ble_ll_conn_rx_data_pdu+0x176>
            if ((connsm->enc_data.enc_state == CONN_ENC_S_ENCRYPTED) &&
   1377c:	78b3      	ldrb	r3, [r6, #2]
   1377e:	f013 0f08 	tst.w	r3, #8
   13782:	d0b1      	beq.n	136e8 <ble_ll_conn_rx_data_pdu+0x5c>
                CONN_F_LE_PING_SUPP(connsm) && (acl_len != 0)) {
   13784:	f1b9 0f00 	cmp.w	r9, #0
   13788:	d0ae      	beq.n	136e8 <ble_ll_conn_rx_data_pdu+0x5c>
                ble_ll_conn_auth_pyld_timer_start(connsm);
   1378a:	4630      	mov	r0, r6
   1378c:	f7ff faaa 	bl	12ce4 <ble_ll_conn_auth_pyld_timer_start>
   13790:	e7aa      	b.n	136e8 <ble_ll_conn_rx_data_pdu+0x5c>
                if (hdr_byte & BLE_LL_DATA_HDR_NESN_MASK) {
   13792:	f017 0f04 	tst.w	r7, #4
   13796:	d0ad      	beq.n	136f4 <ble_ll_conn_rx_data_pdu+0x68>
                    connsm->csmflags.cfbit.allow_slave_latency = 1;
   13798:	7833      	ldrb	r3, [r6, #0]
   1379a:	f043 0310 	orr.w	r3, r3, #16
   1379e:	7033      	strb	r3, [r6, #0]
   137a0:	e7a8      	b.n	136f4 <ble_ll_conn_rx_data_pdu+0x68>
                if ((llid == BLE_LL_LLID_DATA_FRAG) && (acl_len == 0)) {
   137a2:	f1b9 0f00 	cmp.w	r9, #0
   137a6:	d02c      	beq.n	13802 <ble_ll_conn_rx_data_pdu+0x176>
   137a8:	e7af      	b.n	1370a <ble_ll_conn_rx_data_pdu+0x7e>
                    STATS_INC(ble_ll_conn_stats, mic_failures);
   137aa:	4a18      	ldr	r2, [pc, #96]	; (1380c <ble_ll_conn_rx_data_pdu+0x180>)
   137ac:	6f13      	ldr	r3, [r2, #112]	; 0x70
   137ae:	3301      	adds	r3, #1
   137b0:	6713      	str	r3, [r2, #112]	; 0x70
                    ble_ll_conn_timeout(connsm, BLE_ERR_CONN_TERM_MIC);
   137b2:	213d      	movs	r1, #61	; 0x3d
   137b4:	4630      	mov	r0, r6
   137b6:	f7ff ff13 	bl	135e0 <ble_ll_conn_timeout>
                    goto conn_rx_data_pdu_end;
   137ba:	e022      	b.n	13802 <ble_ll_conn_rx_data_pdu+0x176>
                    STATS_INC(ble_ll_conn_stats, rx_ctrl_pdus);
   137bc:	4a13      	ldr	r2, [pc, #76]	; (1380c <ble_ll_conn_rx_data_pdu+0x180>)
   137be:	6c93      	ldr	r3, [r2, #72]	; 0x48
   137c0:	3301      	adds	r3, #1
   137c2:	6493      	str	r3, [r2, #72]	; 0x48
                    if (ble_ll_ctrl_rx_pdu(connsm, rxpdu)) {
   137c4:	4629      	mov	r1, r5
   137c6:	4630      	mov	r0, r6
   137c8:	f002 f83c 	bl	15844 <ble_ll_ctrl_rx_pdu>
   137cc:	b1e0      	cbz	r0, 13808 <ble_ll_conn_rx_data_pdu+0x17c>
                        STATS_INC(ble_ll_conn_stats, rx_malformed_ctrl_pdus);
   137ce:	4a0f      	ldr	r2, [pc, #60]	; (1380c <ble_ll_conn_rx_data_pdu+0x180>)
   137d0:	6d53      	ldr	r3, [r2, #84]	; 0x54
   137d2:	3301      	adds	r3, #1
   137d4:	6553      	str	r3, [r2, #84]	; 0x54
   137d6:	e017      	b.n	13808 <ble_ll_conn_rx_data_pdu+0x17c>
    startoff = 0;
   137d8:	2100      	movs	r1, #0
   137da:	e7a8      	b.n	1372e <ble_ll_conn_rx_data_pdu+0xa2>
                    BLE_LL_ASSERT(OS_MBUF_LEADINGSPACE(rxpdu) >= 2);
   137dc:	f7f8 fd04 	bl	c1e8 <hal_debugger_connected>
   137e0:	b100      	cbz	r0, 137e4 <ble_ll_conn_rx_data_pdu+0x158>
   137e2:	be01      	bkpt	0x0001
   137e4:	2300      	movs	r3, #0
   137e6:	461a      	mov	r2, r3
   137e8:	4619      	mov	r1, r3
   137ea:	4618      	mov	r0, r3
   137ec:	f7f8 ff36 	bl	c65c <__assert_func>
                }

                /* NOTE: we dont free the mbuf since we handed it off! */
                return;
            } else {
                STATS_INC(ble_ll_conn_stats, data_pdu_rx_dup);
   137f0:	4a06      	ldr	r2, [pc, #24]	; (1380c <ble_ll_conn_rx_data_pdu+0x180>)
   137f2:	6b53      	ldr	r3, [r2, #52]	; 0x34
   137f4:	3301      	adds	r3, #1
   137f6:	6353      	str	r3, [r2, #52]	; 0x34
   137f8:	e003      	b.n	13802 <ble_ll_conn_rx_data_pdu+0x176>
            }
        } else {
            STATS_INC(ble_ll_conn_stats, no_conn_sm);
   137fa:	4a04      	ldr	r2, [pc, #16]	; (1380c <ble_ll_conn_rx_data_pdu+0x180>)
   137fc:	69d3      	ldr	r3, [r2, #28]
   137fe:	3301      	adds	r3, #1
   13800:	61d3      	str	r3, [r2, #28]
        }
    }

    /* Free buffer */
conn_rx_data_pdu_end:
    os_mbuf_free_chain(rxpdu);
   13802:	4628      	mov	r0, r5
   13804:	f7fa f907 	bl	da16 <os_mbuf_free_chain>
}
   13808:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1380c:	20004050 	.word	0x20004050

00013810 <ble_ll_conn_rx_isr_end>:
 *      == 0: Success. Do not disable the PHY.
 *       > 0: Do not disable PHY as that has already been done.
 */
int
ble_ll_conn_rx_isr_end(uint8_t *rxbuf, struct ble_mbuf_hdr *rxhdr)
{
   13810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13814:	b083      	sub	sp, #12
   13816:	4607      	mov	r7, r0
   13818:	460e      	mov	r6, r1
    struct os_mbuf *rxpdu;
    struct ble_mbuf_hdr *txhdr;
    int rx_phy_mode;

    /* Retrieve the header and payload length */
    hdr_byte = rxbuf[0];
   1381a:	f890 a000 	ldrb.w	sl, [r0]
    rx_pyld_len = rxbuf[1];
   1381e:	7843      	ldrb	r3, [r0, #1]
   13820:	9300      	str	r3, [sp, #0]
     * now is that we should not ack the packet if we have no receive
     * buffers available. We want to free up our transmit PDU if it was
     * acked, but we should not ack the received frame if we cant hand it up.
     * NOTE: we hand up empty pdu's to the LL task!
     */
    rxpdu = ble_ll_rxpdu_alloc(rx_pyld_len + BLE_LL_PDU_HDR_LEN);
   13822:	fa1f f983 	uxth.w	r9, r3
   13826:	f109 0002 	add.w	r0, r9, #2
   1382a:	f7fc feb3 	bl	10594 <ble_ll_rxpdu_alloc>
   1382e:	4680      	mov	r8, r0
    /*
     * We should have a current connection state machine. If we dont, we just
     * hand the packet to the higher layer to count it.
     */
    rc = -1;
    connsm = g_ble_ll_conn_cur_sm;
   13830:	4b8a      	ldr	r3, [pc, #552]	; (13a5c <ble_ll_conn_rx_isr_end+0x24c>)
   13832:	681c      	ldr	r4, [r3, #0]
    if (!connsm) {
   13834:	b3a4      	cbz	r4, 138a0 <ble_ll_conn_rx_isr_end+0x90>
    /*
     * Calculate the end time of the received PDU. NOTE: this looks strange
     * but for the 32768 crystal we add the time it takes to send the packet
     * to the 'additional usecs' field to save some calculations.
     */
    begtime = rxhdr->beg_cputime;
   13836:	f8d6 b008 	ldr.w	fp, [r6, #8]
#if BLE_LL_BT5_PHY_SUPPORTED
    rx_phy_mode = connsm->phy_data.rx_phy_mode;
#else
    rx_phy_mode = BLE_PHY_MODE_1M;
#endif
    add_usecs = rxhdr->rem_usecs +
   1383a:	68f5      	ldr	r5, [r6, #12]
            ble_ll_pdu_tx_time_get(rx_pyld_len, rx_phy_mode);
   1383c:	2101      	movs	r1, #1
   1383e:	4648      	mov	r0, r9
   13840:	f7fd f91c 	bl	10a7c <ble_ll_pdu_tx_time_get>
    add_usecs = rxhdr->rem_usecs +
   13844:	4405      	add	r5, r0
    /*
     * Check the packet CRC. A connection event can continue even if the
     * received PDU does not pass the CRC check. If we receive two consecutive
     * CRC errors we end the conection event.
     */
    if (!BLE_MBUF_HDR_CRC_OK(rxhdr)) {
   13846:	8833      	ldrh	r3, [r6, #0]
   13848:	f013 0f80 	tst.w	r3, #128	; 0x80
   1384c:	d138      	bne.n	138c0 <ble_ll_conn_rx_isr_end+0xb0>
        /*
         * Increment # of consecutively received CRC errors. If more than
         * one we will end the connection event.
         */
        ++connsm->cons_rxd_bad_crc;
   1384e:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
   13852:	3301      	adds	r3, #1
   13854:	b2db      	uxtb	r3, r3
   13856:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if (connsm->cons_rxd_bad_crc >= 2) {
   1385a:	2b01      	cmp	r3, #1
   1385c:	d927      	bls.n	138ae <ble_ll_conn_rx_isr_end+0x9e>
            reply = 0;
   1385e:	2300      	movs	r3, #0
    /* If reply flag set, send data pdu and continue connection event */
    rc = -1;
    if (rx_pyld_len && CONN_F_ENCRYPTED(connsm)) {
        rx_pyld_len += BLE_LL_DATA_MIC_LEN;
    }
    if (reply && ble_ll_conn_can_send_next_pdu(connsm, begtime, add_usecs)) {
   13860:	2b00      	cmp	r3, #0
   13862:	f000 80f1 	beq.w	13a48 <ble_ll_conn_rx_isr_end+0x238>
   13866:	462a      	mov	r2, r5
   13868:	4659      	mov	r1, fp
   1386a:	4620      	mov	r0, r4
   1386c:	f7fe fe71 	bl	12552 <ble_ll_conn_can_send_next_pdu>
   13870:	2800      	cmp	r0, #0
   13872:	f000 80ec 	beq.w	13a4e <ble_ll_conn_rx_isr_end+0x23e>
        rc = ble_ll_conn_tx_pdu(connsm);
   13876:	4620      	mov	r0, r4
   13878:	f7fe fb42 	bl	11f00 <ble_ll_conn_tx_pdu>
   1387c:	4606      	mov	r6, r0
    }

conn_exit:
    /* Copy the received pdu and hand it up */
    if (rxpdu) {
   1387e:	f1b8 0f00 	cmp.w	r8, #0
   13882:	d006      	beq.n	13892 <ble_ll_conn_rx_isr_end+0x82>
        ble_phy_rxpdu_copy(rxbuf, rxpdu);
   13884:	4641      	mov	r1, r8
   13886:	4638      	mov	r0, r7
   13888:	f005 ffc8 	bl	1981c <ble_phy_rxpdu_copy>
        ble_ll_rx_pdu_in(rxpdu);
   1388c:	4640      	mov	r0, r8
   1388e:	f7fc ffab 	bl	107e8 <ble_ll_rx_pdu_in>
    }

    /* Send link layer a connection end event if over */
    if (rc) {
   13892:	2e00      	cmp	r6, #0
   13894:	f040 80de 	bne.w	13a54 <ble_ll_conn_rx_isr_end+0x244>
        ble_ll_conn_current_sm_over(connsm);
    }

    return rc;
}
   13898:	4630      	mov	r0, r6
   1389a:	b003      	add	sp, #12
   1389c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        STATS_INC(ble_ll_conn_stats, rx_data_pdu_no_conn);
   138a0:	4a6f      	ldr	r2, [pc, #444]	; (13a60 <ble_ll_conn_rx_isr_end+0x250>)
   138a2:	6a53      	ldr	r3, [r2, #36]	; 0x24
   138a4:	3301      	adds	r3, #1
   138a6:	6253      	str	r3, [r2, #36]	; 0x24
    rc = -1;
   138a8:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
        goto conn_exit;
   138ac:	e7e7      	b.n	1387e <ble_ll_conn_rx_isr_end+0x6e>
            if (connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) {
   138ae:	79e3      	ldrb	r3, [r4, #7]
   138b0:	2b01      	cmp	r3, #1
   138b2:	d001      	beq.n	138b8 <ble_ll_conn_rx_isr_end+0xa8>
                reply = 1;
   138b4:	2301      	movs	r3, #1
   138b6:	e7d3      	b.n	13860 <ble_ll_conn_rx_isr_end+0x50>
                reply = CONN_F_LAST_TXD_MD(connsm);
   138b8:	7863      	ldrb	r3, [r4, #1]
   138ba:	f3c3 1380 	ubfx	r3, r3, #6, #1
   138be:	e7cf      	b.n	13860 <ble_ll_conn_rx_isr_end+0x50>
        connsm->cons_rxd_bad_crc = 0;
   138c0:	2300      	movs	r3, #0
   138c2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
                                        os_cputime_usecs_to_ticks(add_usecs);
   138c6:	4628      	mov	r0, r5
   138c8:	f016 f806 	bl	298d8 <os_cputime_usecs_to_ticks>
        connsm->last_rxd_pdu_cputime = begtime +
   138cc:	4458      	add	r0, fp
   138ce:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
        if ((hdr_byte & BLE_LL_DATA_HDR_LLID_MASK) == 0) {
   138d2:	f01a 0303 	ands.w	r3, sl, #3
   138d6:	f000 80b4 	beq.w	13a42 <ble_ll_conn_rx_isr_end+0x232>
        connsm->last_rxd_hdr_byte = hdr_byte;
   138da:	f884 a036 	strb.w	sl, [r4, #54]	; 0x36
        if ((hdr_byte & BLE_LL_DATA_HDR_LLID_MASK) == BLE_LL_LLID_CTRL) {
   138de:	2b03      	cmp	r3, #3
   138e0:	d03c      	beq.n	1395c <ble_ll_conn_rx_isr_end+0x14c>
    uint8_t opcode = 0;
   138e2:	f04f 0900 	mov.w	r9, #0
        is_ctrl = 0;
   138e6:	f8cd 9004 	str.w	r9, [sp, #4]
        hdr_sn = hdr_byte & BLE_LL_DATA_HDR_SN_MASK;
   138ea:	f00a 0208 	and.w	r2, sl, #8
        conn_nesn = connsm->next_exp_seqnum;
   138ee:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
        if (rxpdu && ((hdr_sn && conn_nesn) || (!hdr_sn && !conn_nesn))) {
   138f2:	f1b8 0f00 	cmp.w	r8, #0
   138f6:	d014      	beq.n	13922 <ble_ll_conn_rx_isr_end+0x112>
   138f8:	b102      	cbz	r2, 138fc <ble_ll_conn_rx_isr_end+0xec>
   138fa:	b90b      	cbnz	r3, 13900 <ble_ll_conn_rx_isr_end+0xf0>
   138fc:	b98a      	cbnz	r2, 13922 <ble_ll_conn_rx_isr_end+0x112>
   138fe:	b983      	cbnz	r3, 13922 <ble_ll_conn_rx_isr_end+0x112>
            connsm->next_exp_seqnum ^= 1;
   13900:	f083 0301 	eor.w	r3, r3, #1
   13904:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
            if (CONN_F_ENCRYPTED(connsm) && !ble_ll_conn_is_empty_pdu(rxbuf)) {
   13908:	78a3      	ldrb	r3, [r4, #2]
   1390a:	f013 0f02 	tst.w	r3, #2
   1390e:	d008      	beq.n	13922 <ble_ll_conn_rx_isr_end+0x112>
   13910:	4638      	mov	r0, r7
   13912:	f7fe fa03 	bl	11d1c <ble_ll_conn_is_empty_pdu>
   13916:	b920      	cbnz	r0, 13922 <ble_ll_conn_rx_isr_end+0x112>
                ++connsm->enc_data.rx_pkt_cntr;
   13918:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   1391c:	3301      	adds	r3, #1
   1391e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
        ble_ll_trace_u32x2(BLE_LL_TRACE_ID_CONN_RX, connsm->tx_seqnum,
   13922:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
   13926:	f00a 0204 	and.w	r2, sl, #4
        if (CONN_F_EMPTY_PDU_TXD(connsm) || connsm->cur_tx_pdu) {
   1392a:	7861      	ldrb	r1, [r4, #1]
   1392c:	f011 0f20 	tst.w	r1, #32
   13930:	d102      	bne.n	13938 <ble_ll_conn_rx_isr_end+0x128>
   13932:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
   13936:	b139      	cbz	r1, 13948 <ble_ll_conn_rx_isr_end+0x138>
            if ((hdr_nesn && conn_sn) || (!hdr_nesn && !conn_sn)) {
   13938:	b102      	cbz	r2, 1393c <ble_ll_conn_rx_isr_end+0x12c>
   1393a:	b90b      	cbnz	r3, 13940 <ble_ll_conn_rx_isr_end+0x130>
   1393c:	b99a      	cbnz	r2, 13966 <ble_ll_conn_rx_isr_end+0x156>
   1393e:	b993      	cbnz	r3, 13966 <ble_ll_conn_rx_isr_end+0x156>
                STATS_INC(ble_ll_conn_stats, data_pdu_txf);
   13940:	4a47      	ldr	r2, [pc, #284]	; (13a60 <ble_ll_conn_rx_isr_end+0x250>)
   13942:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
   13944:	3301      	adds	r3, #1
   13946:	63d3      	str	r3, [r2, #60]	; 0x3c
        if (is_ctrl && (opcode == BLE_LL_CTRL_TERMINATE_IND)
   13948:	9b01      	ldr	r3, [sp, #4]
   1394a:	b113      	cbz	r3, 13952 <ble_ll_conn_rx_isr_end+0x142>
   1394c:	f1b9 0f02 	cmp.w	r9, #2
   13950:	d05e      	beq.n	13a10 <ble_ll_conn_rx_isr_end+0x200>
        if (connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) {
   13952:	79e3      	ldrb	r3, [r4, #7]
   13954:	2b01      	cmp	r3, #1
   13956:	d066      	beq.n	13a26 <ble_ll_conn_rx_isr_end+0x216>
            reply = 1;
   13958:	2301      	movs	r3, #1
   1395a:	e781      	b.n	13860 <ble_ll_conn_rx_isr_end+0x50>
            opcode = rxbuf[2];
   1395c:	f897 9002 	ldrb.w	r9, [r7, #2]
            is_ctrl = 1;
   13960:	2301      	movs	r3, #1
   13962:	9301      	str	r3, [sp, #4]
   13964:	e7c1      	b.n	138ea <ble_ll_conn_rx_isr_end+0xda>
                connsm->tx_seqnum ^= 1;
   13966:	f083 0301 	eor.w	r3, r3, #1
   1396a:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
                STATS_INC(ble_ll_conn_stats, data_pdu_txg);
   1396e:	4a3c      	ldr	r2, [pc, #240]	; (13a60 <ble_ll_conn_rx_isr_end+0x250>)
   13970:	6b93      	ldr	r3, [r2, #56]	; 0x38
   13972:	3301      	adds	r3, #1
   13974:	6393      	str	r3, [r2, #56]	; 0x38
                if (CONN_F_EMPTY_PDU_TXD(connsm)) {
   13976:	7863      	ldrb	r3, [r4, #1]
   13978:	f013 0f20 	tst.w	r3, #32
   1397c:	d004      	beq.n	13988 <ble_ll_conn_rx_isr_end+0x178>
                    CONN_F_EMPTY_PDU_TXD(connsm) = 0;
   1397e:	7863      	ldrb	r3, [r4, #1]
   13980:	f36f 1345 	bfc	r3, #5, #1
   13984:	7063      	strb	r3, [r4, #1]
                    goto chk_rx_terminate_ind;
   13986:	e7df      	b.n	13948 <ble_ll_conn_rx_isr_end+0x138>
                txpdu = connsm->cur_tx_pdu;
   13988:	f8d4 60ac 	ldr.w	r6, [r4, #172]	; 0xac
                if (txpdu) {
   1398c:	2e00      	cmp	r6, #0
   1398e:	d0db      	beq.n	13948 <ble_ll_conn_rx_isr_end+0x138>
                    if (connsm->enc_data.tx_encrypted) {
   13990:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   13994:	b123      	cbz	r3, 139a0 <ble_ll_conn_rx_isr_end+0x190>
                        ++connsm->enc_data.tx_pkt_cntr;
   13996:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   1399a:	3301      	adds	r3, #1
   1399c:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
                    if ((txhdr->txinfo.hdr_byte & BLE_LL_DATA_HDR_LLID_MASK)
   139a0:	7ef3      	ldrb	r3, [r6, #27]
   139a2:	f003 0303 	and.w	r3, r3, #3
   139a6:	2b03      	cmp	r3, #3
   139a8:	d018      	beq.n	139dc <ble_ll_conn_rx_isr_end+0x1cc>
                    txhdr->txinfo.offset += txhdr->txinfo.pyld_len;
   139aa:	7eb1      	ldrb	r1, [r6, #26]
   139ac:	7e73      	ldrb	r3, [r6, #25]
   139ae:	440b      	add	r3, r1
   139b0:	b2db      	uxtb	r3, r3
   139b2:	7673      	strb	r3, [r6, #25]
                    if (txhdr->txinfo.offset >= OS_MBUF_PKTLEN(txpdu)) {
   139b4:	b298      	uxth	r0, r3
   139b6:	8a32      	ldrh	r2, [r6, #16]
   139b8:	4290      	cmp	r0, r2
   139ba:	d321      	bcc.n	13a00 <ble_ll_conn_rx_isr_end+0x1f0>
                        if (txhdr->txinfo.pyld_len != 0) {
   139bc:	b139      	cbz	r1, 139ce <ble_ll_conn_rx_isr_end+0x1be>
                            ++connsm->completed_pkts;
   139be:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
   139c2:	3301      	adds	r3, #1
   139c4:	b29b      	uxth	r3, r3
   139c6:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
                            if (connsm->completed_pkts > 2) {
   139ca:	2b02      	cmp	r3, #2
   139cc:	d812      	bhi.n	139f4 <ble_ll_conn_rx_isr_end+0x1e4>
                        os_mbuf_free_chain(txpdu);
   139ce:	4630      	mov	r0, r6
   139d0:	f7fa f821 	bl	da16 <os_mbuf_free_chain>
                        connsm->cur_tx_pdu = NULL;
   139d4:	2300      	movs	r3, #0
   139d6:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
   139da:	e7b5      	b.n	13948 <ble_ll_conn_rx_isr_end+0x138>
                        connsm->cur_tx_pdu = NULL;
   139dc:	2300      	movs	r3, #0
   139de:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
                        rc = ble_ll_ctrl_tx_done(txpdu, connsm);
   139e2:	4621      	mov	r1, r4
   139e4:	4630      	mov	r0, r6
   139e6:	f002 f91a 	bl	15c1e <ble_ll_ctrl_tx_done>
                        if (rc) {
   139ea:	4606      	mov	r6, r0
   139ec:	2800      	cmp	r0, #0
   139ee:	f47f af46 	bne.w	1387e <ble_ll_conn_rx_isr_end+0x6e>
   139f2:	e7a9      	b.n	13948 <ble_ll_conn_rx_isr_end+0x138>
    os_eventq_put(&evq->evq, &ev->ev);
   139f4:	481b      	ldr	r0, [pc, #108]	; (13a64 <ble_ll_conn_rx_isr_end+0x254>)
   139f6:	4601      	mov	r1, r0
   139f8:	3868      	subs	r0, #104	; 0x68
   139fa:	f7f9 f95e 	bl	ccba <os_eventq_put>
   139fe:	e7e6      	b.n	139ce <ble_ll_conn_rx_isr_end+0x1be>
                        rem_bytes = OS_MBUF_PKTLEN(txpdu) - txhdr->txinfo.offset;
   13a00:	b2d2      	uxtb	r2, r2
   13a02:	1ad3      	subs	r3, r2, r3
                        rem_bytes = ble_ll_conn_adjust_pyld_len(connsm, rem_bytes);
   13a04:	b2d9      	uxtb	r1, r3
   13a06:	4620      	mov	r0, r4
   13a08:	f7fe fa31 	bl	11e6e <ble_ll_conn_adjust_pyld_len>
                        txhdr->txinfo.pyld_len = rem_bytes;
   13a0c:	76b0      	strb	r0, [r6, #26]
   13a0e:	e79b      	b.n	13948 <ble_ll_conn_rx_isr_end+0x138>
                    && (rx_pyld_len == (1 + BLE_LL_CTRL_TERMINATE_IND_LEN))) {
   13a10:	9b00      	ldr	r3, [sp, #0]
   13a12:	2b02      	cmp	r3, #2
   13a14:	d19d      	bne.n	13952 <ble_ll_conn_rx_isr_end+0x142>
            connsm->csmflags.cfbit.terminate_ind_rxd = 1;
   13a16:	7823      	ldrb	r3, [r4, #0]
   13a18:	f043 0304 	orr.w	r3, r3, #4
   13a1c:	7023      	strb	r3, [r4, #0]
            connsm->rxd_disconnect_reason = rxbuf[3];
   13a1e:	78fb      	ldrb	r3, [r7, #3]
   13a20:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
   13a24:	e795      	b.n	13952 <ble_ll_conn_rx_isr_end+0x142>
            reply = CONN_F_LAST_TXD_MD(connsm) || (hdr_byte & BLE_LL_DATA_HDR_MD_MASK);
   13a26:	7863      	ldrb	r3, [r4, #1]
   13a28:	f013 0f40 	tst.w	r3, #64	; 0x40
   13a2c:	d104      	bne.n	13a38 <ble_ll_conn_rx_isr_end+0x228>
   13a2e:	f01a 0f10 	tst.w	sl, #16
   13a32:	d004      	beq.n	13a3e <ble_ll_conn_rx_isr_end+0x22e>
   13a34:	2301      	movs	r3, #1
   13a36:	e000      	b.n	13a3a <ble_ll_conn_rx_isr_end+0x22a>
   13a38:	2301      	movs	r3, #1
   13a3a:	b2db      	uxtb	r3, r3
   13a3c:	e710      	b.n	13860 <ble_ll_conn_rx_isr_end+0x50>
   13a3e:	2300      	movs	r3, #0
   13a40:	e7fb      	b.n	13a3a <ble_ll_conn_rx_isr_end+0x22a>
    rc = -1;
   13a42:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   13a46:	e71a      	b.n	1387e <ble_ll_conn_rx_isr_end+0x6e>
    rc = -1;
   13a48:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   13a4c:	e717      	b.n	1387e <ble_ll_conn_rx_isr_end+0x6e>
   13a4e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   13a52:	e714      	b.n	1387e <ble_ll_conn_rx_isr_end+0x6e>
        ble_ll_conn_current_sm_over(connsm);
   13a54:	4620      	mov	r0, r4
   13a56:	f7fe f9a1 	bl	11d9c <ble_ll_conn_current_sm_over>
    return rc;
   13a5a:	e71d      	b.n	13898 <ble_ll_conn_rx_isr_end+0x88>
   13a5c:	20003e98 	.word	0x20003e98
   13a60:	20004050 	.word	0x20004050
   13a64:	20003dc8 	.word	0x20003dc8

00013a68 <ble_ll_conn_enqueue_pkt>:
 * @param om
 */
void
ble_ll_conn_enqueue_pkt(struct ble_ll_conn_sm *connsm, struct os_mbuf *om,
                        uint8_t hdr_byte, uint8_t length)
{
   13a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13a6a:	4605      	mov	r5, r0
   13a6c:	460c      	mov	r4, r1
    struct os_mbuf_pkthdr *pkthdr;
    struct ble_mbuf_hdr *ble_hdr;
    int lifo;

    /* Set mbuf length and packet length if a control PDU */
    if (hdr_byte == BLE_LL_LLID_CTRL) {
   13a6e:	2a03      	cmp	r2, #3
   13a70:	d00d      	beq.n	13a8e <ble_ll_conn_enqueue_pkt+0x26>
        OS_MBUF_PKTHDR(om)->omp_len = length;
    }

    /* Set BLE transmit header */
    ble_hdr = BLE_MBUF_HDR_PTR(om);
    ble_hdr->txinfo.flags = 0;
   13a72:	2300      	movs	r3, #0
   13a74:	7623      	strb	r3, [r4, #24]
    ble_hdr->txinfo.offset = 0;
   13a76:	7663      	strb	r3, [r4, #25]
    ble_hdr->txinfo.hdr_byte = hdr_byte;
   13a78:	76e2      	strb	r2, [r4, #27]
     * need to do this now.
     */

    lifo = 0;
#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LE_ENCRYPTION)
    if (connsm->enc_data.enc_state > CONN_ENC_S_ENCRYPTED) {
   13a7a:	f895 3118 	ldrb.w	r3, [r5, #280]	; 0x118
   13a7e:	2b02      	cmp	r3, #2
   13a80:	d923      	bls.n	13aca <ble_ll_conn_enqueue_pkt+0x62>

        /*
         * If this is one of the following types we need to insert it at
         * head of queue.
         */
        llid = ble_hdr->txinfo.hdr_byte & BLE_LL_DATA_HDR_LLID_MASK;
   13a82:	f002 0203 	and.w	r2, r2, #3
        if (llid == BLE_LL_LLID_CTRL) {
   13a86:	2a03      	cmp	r2, #3
   13a88:	d005      	beq.n	13a96 <ble_ll_conn_enqueue_pkt+0x2e>
    lifo = 0;
   13a8a:	2600      	movs	r6, #0
   13a8c:	e01e      	b.n	13acc <ble_ll_conn_enqueue_pkt+0x64>
        om->om_len = length;
   13a8e:	b29b      	uxth	r3, r3
   13a90:	80cb      	strh	r3, [r1, #6]
        OS_MBUF_PKTHDR(om)->omp_len = length;
   13a92:	820b      	strh	r3, [r1, #16]
   13a94:	e7ed      	b.n	13a72 <ble_ll_conn_enqueue_pkt+0xa>
            switch (om->om_data[0]) {
   13a96:	6822      	ldr	r2, [r4, #0]
   13a98:	7812      	ldrb	r2, [r2, #0]
   13a9a:	3a02      	subs	r2, #2
   13a9c:	2a0f      	cmp	r2, #15
   13a9e:	d809      	bhi.n	13ab4 <ble_ll_conn_enqueue_pkt+0x4c>
   13aa0:	e8df f002 	tbb	[pc, r2]
   13aa4:	220f0f22 	.word	0x220f0f22
   13aa8:	08080822 	.word	0x08080822
   13aac:	22080a08 	.word	0x22080a08
   13ab0:	22080808 	.word	0x22080808
    lifo = 0;
   13ab4:	2600      	movs	r6, #0
   13ab6:	e009      	b.n	13acc <ble_ll_conn_enqueue_pkt+0x64>
            case BLE_LL_CTRL_START_ENC_REQ:
            case BLE_LL_CTRL_START_ENC_RSP:
                lifo = 1;
                break;
            case BLE_LL_CTRL_PAUSE_ENC_RSP:
                if (connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) {
   13ab8:	79eb      	ldrb	r3, [r5, #7]
   13aba:	2b01      	cmp	r3, #1
   13abc:	d016      	beq.n	13aec <ble_ll_conn_enqueue_pkt+0x84>
    lifo = 0;
   13abe:	2600      	movs	r6, #0
   13ac0:	e004      	b.n	13acc <ble_ll_conn_enqueue_pkt+0x64>
            case BLE_LL_CTRL_ENC_REQ:
            case BLE_LL_CTRL_ENC_RSP:
                /* If encryption has been paused, we don't want to send any packets from the
                 * TX queue, as they would go unencrypted.
                 */
                if (connsm->enc_data.enc_state == CONN_ENC_S_PAUSED) {
   13ac2:	2b05      	cmp	r3, #5
   13ac4:	d014      	beq.n	13af0 <ble_ll_conn_enqueue_pkt+0x88>
    lifo = 0;
   13ac6:	2600      	movs	r6, #0
   13ac8:	e000      	b.n	13acc <ble_ll_conn_enqueue_pkt+0x64>
   13aca:	2600      	movs	r6, #0
        }
    }
#endif

    /* Add to transmit queue for the connection */
    pkthdr = OS_MBUF_PKTHDR(om);
   13acc:	f104 0710 	add.w	r7, r4, #16
    OS_ENTER_CRITICAL(sr);
   13ad0:	f7f9 fe92 	bl	d7f8 <os_arch_save_sr>
    if (lifo) {
   13ad4:	b196      	cbz	r6, 13afc <ble_ll_conn_enqueue_pkt+0x94>
        STAILQ_INSERT_HEAD(&connsm->conn_txq, pkthdr, omp_next);
   13ad6:	f8d5 30b0 	ldr.w	r3, [r5, #176]	; 0xb0
   13ada:	6163      	str	r3, [r4, #20]
   13adc:	b153      	cbz	r3, 13af4 <ble_ll_conn_enqueue_pkt+0x8c>
   13ade:	f8c5 70b0 	str.w	r7, [r5, #176]	; 0xb0
    } else {
        STAILQ_INSERT_TAIL(&connsm->conn_txq, pkthdr, omp_next);
    }
    OS_EXIT_CRITICAL(sr);
   13ae2:	f7f9 fe8f 	bl	d804 <os_arch_restore_sr>
}
   13ae6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                lifo = 1;
   13ae8:	2601      	movs	r6, #1
   13aea:	e7ef      	b.n	13acc <ble_ll_conn_enqueue_pkt+0x64>
                    lifo = 1;
   13aec:	2601      	movs	r6, #1
   13aee:	e7ed      	b.n	13acc <ble_ll_conn_enqueue_pkt+0x64>
                    lifo = 1;
   13af0:	2601      	movs	r6, #1
   13af2:	e7eb      	b.n	13acc <ble_ll_conn_enqueue_pkt+0x64>
        STAILQ_INSERT_HEAD(&connsm->conn_txq, pkthdr, omp_next);
   13af4:	3414      	adds	r4, #20
   13af6:	f8c5 40b4 	str.w	r4, [r5, #180]	; 0xb4
   13afa:	e7f0      	b.n	13ade <ble_ll_conn_enqueue_pkt+0x76>
        STAILQ_INSERT_TAIL(&connsm->conn_txq, pkthdr, omp_next);
   13afc:	2300      	movs	r3, #0
   13afe:	f844 3f14 	str.w	r3, [r4, #20]!
   13b02:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   13b06:	601f      	str	r7, [r3, #0]
   13b08:	f8c5 40b4 	str.w	r4, [r5, #180]	; 0xb4
   13b0c:	e7e9      	b.n	13ae2 <ble_ll_conn_enqueue_pkt+0x7a>
	...

00013b10 <ble_ll_conn_tx_pkt_in>:
 *
 * @return int
 */
void
ble_ll_conn_tx_pkt_in(struct os_mbuf *om, uint16_t handle, uint16_t length)
{
   13b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13b12:	4605      	mov	r5, r0
   13b14:	460c      	mov	r4, r1
   13b16:	4617      	mov	r7, r2
    uint16_t pb;
    struct ble_ll_conn_sm *connsm;

    /* See if we have an active matching connection handle */
    conn_handle = handle & 0x0FFF;
    connsm = ble_ll_conn_find_active_conn(conn_handle);
   13b18:	f3c1 000b 	ubfx	r0, r1, #0, #12
   13b1c:	f7fe fed0 	bl	128c0 <ble_ll_conn_find_active_conn>
    if (connsm) {
   13b20:	b180      	cbz	r0, 13b44 <ble_ll_conn_tx_pkt_in+0x34>
   13b22:	4606      	mov	r6, r0
        /* Construct LL header in buffer (NOTE: pb already checked) */
        pb = handle & 0x3000;
        if (pb == 0) {
   13b24:	f414 5f40 	tst.w	r4, #12288	; 0x3000
   13b28:	d00a      	beq.n	13b40 <ble_ll_conn_tx_pkt_in+0x30>
            hdr_byte = BLE_LL_LLID_DATA_START;
        } else {
            hdr_byte = BLE_LL_LLID_DATA_FRAG;
   13b2a:	2201      	movs	r2, #1
        }

        /* Add to total l2cap pdus enqueue */
        STATS_INC(ble_ll_conn_stats, l2cap_enqueued);
   13b2c:	4909      	ldr	r1, [pc, #36]	; (13b54 <ble_ll_conn_tx_pkt_in+0x44>)
   13b2e:	6c4b      	ldr	r3, [r1, #68]	; 0x44
   13b30:	3301      	adds	r3, #1
   13b32:	644b      	str	r3, [r1, #68]	; 0x44

        /* Clear flags field in BLE header */
        ble_ll_conn_enqueue_pkt(connsm, om, hdr_byte, length);
   13b34:	b2fb      	uxtb	r3, r7
   13b36:	4629      	mov	r1, r5
   13b38:	4630      	mov	r0, r6
   13b3a:	f7ff ff95 	bl	13a68 <ble_ll_conn_enqueue_pkt>
    } else {
        /* No connection found! */
        STATS_INC(ble_ll_conn_stats, handle_not_found);
        os_mbuf_free_chain(om);
    }
}
   13b3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            hdr_byte = BLE_LL_LLID_DATA_START;
   13b40:	2202      	movs	r2, #2
   13b42:	e7f3      	b.n	13b2c <ble_ll_conn_tx_pkt_in+0x1c>
        STATS_INC(ble_ll_conn_stats, handle_not_found);
   13b44:	4a03      	ldr	r2, [pc, #12]	; (13b54 <ble_ll_conn_tx_pkt_in+0x44>)
   13b46:	6993      	ldr	r3, [r2, #24]
   13b48:	3301      	adds	r3, #1
   13b4a:	6193      	str	r3, [r2, #24]
        os_mbuf_free_chain(om);
   13b4c:	4628      	mov	r0, r5
   13b4e:	f7f9 ff62 	bl	da16 <os_mbuf_free_chain>
}
   13b52:	e7f4      	b.n	13b3e <ble_ll_conn_tx_pkt_in+0x2e>
   13b54:	20004050 	.word	0x20004050

00013b58 <ble_ll_conn_set_global_chanmap>:
 * @param num_used_chans
 * @param chanmap
 */
void
ble_ll_conn_set_global_chanmap(uint8_t num_used_chans, const uint8_t *chanmap)
{
   13b58:	b538      	push	{r3, r4, r5, lr}
   13b5a:	4605      	mov	r5, r0
   13b5c:	460c      	mov	r4, r1
    struct ble_ll_conn_sm *connsm;
    struct ble_ll_conn_global_params *conn_params;

    /* Do nothing if same channel map */
    conn_params = &g_ble_ll_conn_params;
    if (!memcmp(conn_params->master_chan_map, chanmap, BLE_LL_CONN_CHMAP_LEN)) {
   13b5e:	2205      	movs	r2, #5
   13b60:	480c      	ldr	r0, [pc, #48]	; (13b94 <ble_ll_conn_set_global_chanmap+0x3c>)
   13b62:	f7fa fc61 	bl	e428 <memcmp>
   13b66:	b900      	cbnz	r0, 13b6a <ble_ll_conn_set_global_chanmap+0x12>
    SLIST_FOREACH(connsm, &g_ble_ll_conn_active_list, act_sle) {
        if (connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) {
            ble_ll_ctrl_proc_start(connsm, BLE_LL_CTRL_PROC_CHAN_MAP_UPD);
        }
    }
}
   13b68:	bd38      	pop	{r3, r4, r5, pc}
    conn_params->num_used_chans = num_used_chans;
   13b6a:	4b0a      	ldr	r3, [pc, #40]	; (13b94 <ble_ll_conn_set_global_chanmap+0x3c>)
   13b6c:	715d      	strb	r5, [r3, #5]
    memcpy(conn_params->master_chan_map, chanmap, BLE_LL_CONN_CHMAP_LEN);
   13b6e:	6822      	ldr	r2, [r4, #0]
   13b70:	601a      	str	r2, [r3, #0]
   13b72:	7922      	ldrb	r2, [r4, #4]
   13b74:	711a      	strb	r2, [r3, #4]
    SLIST_FOREACH(connsm, &g_ble_ll_conn_active_list, act_sle) {
   13b76:	4b08      	ldr	r3, [pc, #32]	; (13b98 <ble_ll_conn_set_global_chanmap+0x40>)
   13b78:	681c      	ldr	r4, [r3, #0]
   13b7a:	e001      	b.n	13b80 <ble_ll_conn_set_global_chanmap+0x28>
   13b7c:	f8d4 40b8 	ldr.w	r4, [r4, #184]	; 0xb8
   13b80:	2c00      	cmp	r4, #0
   13b82:	d0f1      	beq.n	13b68 <ble_ll_conn_set_global_chanmap+0x10>
        if (connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) {
   13b84:	79e3      	ldrb	r3, [r4, #7]
   13b86:	2b01      	cmp	r3, #1
   13b88:	d1f8      	bne.n	13b7c <ble_ll_conn_set_global_chanmap+0x24>
            ble_ll_ctrl_proc_start(connsm, BLE_LL_CTRL_PROC_CHAN_MAP_UPD);
   13b8a:	2101      	movs	r1, #1
   13b8c:	4620      	mov	r0, r4
   13b8e:	f001 fc77 	bl	15480 <ble_ll_ctrl_proc_start>
   13b92:	e7f3      	b.n	13b7c <ble_ll_conn_set_global_chanmap+0x24>
   13b94:	20003e80 	.word	0x20003e80
   13b98:	200040d0 	.word	0x200040d0

00013b9c <ble_ll_conn_slave_start>:
 * @return 0: connection not started; 1 connecton started
 */
int
ble_ll_conn_slave_start(uint8_t *rxbuf, uint8_t pat, struct ble_mbuf_hdr *rxhdr,
                        bool force_csa2)
{
   13b9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   13ba0:	4606      	mov	r6, r0
   13ba2:	4689      	mov	r9, r1
   13ba4:	4617      	mov	r7, r2
   13ba6:	4698      	mov	r8, r3
    uint8_t *inita;
    uint8_t *dptr;
    struct ble_ll_conn_sm *connsm;

    /* Ignore the connection request if we are already connected*/
    inita = rxbuf + BLE_LL_PDU_HDR_LEN;
   13ba8:	1c85      	adds	r5, r0, #2
    SLIST_FOREACH(connsm, &g_ble_ll_conn_active_list, act_sle) {
   13baa:	4b6f      	ldr	r3, [pc, #444]	; (13d68 <ble_ll_conn_slave_start+0x1cc>)
   13bac:	681c      	ldr	r4, [r3, #0]
   13bae:	e007      	b.n	13bc0 <ble_ll_conn_slave_start+0x24>
            if (rxbuf[0] & BLE_ADV_PDU_HDR_TXADD_MASK) {
                if (connsm->peer_addr_type & 1) {
                    return 0;
                }
            } else {
                if ((connsm->peer_addr_type & 1) == 0) {
   13bb0:	f894 2092 	ldrb.w	r2, [r4, #146]	; 0x92
   13bb4:	f012 0f01 	tst.w	r2, #1
   13bb8:	f000 8088 	beq.w	13ccc <ble_ll_conn_slave_start+0x130>
    SLIST_FOREACH(connsm, &g_ble_ll_conn_active_list, act_sle) {
   13bbc:	f8d4 40b8 	ldr.w	r4, [r4, #184]	; 0xb8
   13bc0:	b194      	cbz	r4, 13be8 <ble_ll_conn_slave_start+0x4c>
        if (!memcmp(&connsm->peer_addr, inita, BLE_DEV_ADDR_LEN)) {
   13bc2:	2206      	movs	r2, #6
   13bc4:	4629      	mov	r1, r5
   13bc6:	f104 0093 	add.w	r0, r4, #147	; 0x93
   13bca:	f7fa fc2d 	bl	e428 <memcmp>
   13bce:	4603      	mov	r3, r0
   13bd0:	2800      	cmp	r0, #0
   13bd2:	d1f3      	bne.n	13bbc <ble_ll_conn_slave_start+0x20>
            if (rxbuf[0] & BLE_ADV_PDU_HDR_TXADD_MASK) {
   13bd4:	7832      	ldrb	r2, [r6, #0]
   13bd6:	f012 0f40 	tst.w	r2, #64	; 0x40
   13bda:	d0e9      	beq.n	13bb0 <ble_ll_conn_slave_start+0x14>
                if (connsm->peer_addr_type & 1) {
   13bdc:	f894 2092 	ldrb.w	r2, [r4, #146]	; 0x92
   13be0:	f012 0f01 	tst.w	r2, #1
   13be4:	d0ea      	beq.n	13bbc <ble_ll_conn_slave_start+0x20>
   13be6:	e071      	b.n	13ccc <ble_ll_conn_slave_start+0x130>
            }
        }
    }

    /* Allocate a connection. If none available, dont do anything */
    connsm = ble_ll_conn_sm_get();
   13be8:	f7fe fe7c 	bl	128e4 <ble_ll_conn_sm_get>
    if (connsm == NULL) {
   13bec:	4604      	mov	r4, r0
   13bee:	2800      	cmp	r0, #0
   13bf0:	f000 80b7 	beq.w	13d62 <ble_ll_conn_slave_start+0x1c6>

    /* Set the pointer at the start of the connection data */
    dptr = rxbuf + BLE_LL_CONN_REQ_ADVA_OFF + BLE_DEV_ADDR_LEN;

    /* Set connection state machine information */
    connsm->access_addr = get_le32(dptr);
   13bf4:	f106 000e 	add.w	r0, r6, #14
   13bf8:	f015 fdce 	bl	29798 <get_le32>
   13bfc:	6560      	str	r0, [r4, #84]	; 0x54
    crcinit = dptr[6];
   13bfe:	7d32      	ldrb	r2, [r6, #20]
    crcinit = (crcinit << 8) | dptr[5];
   13c00:	7cf3      	ldrb	r3, [r6, #19]
   13c02:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
    crcinit = (crcinit << 8) | dptr[4];
   13c06:	7cb3      	ldrb	r3, [r6, #18]
   13c08:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    connsm->crcinit = crcinit;
   13c0c:	65a3      	str	r3, [r4, #88]	; 0x58
    connsm->tx_win_size = dptr[7];
   13c0e:	7d73      	ldrb	r3, [r6, #21]
   13c10:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    connsm->tx_win_off = get_le16(dptr + 8);
   13c14:	f106 0016 	add.w	r0, r6, #22
   13c18:	f015 fdb9 	bl	2978e <get_le16>
   13c1c:	f8a4 0072 	strh.w	r0, [r4, #114]	; 0x72
    connsm->conn_itvl = get_le16(dptr + 10);
   13c20:	f106 0018 	add.w	r0, r6, #24
   13c24:	f015 fdb3 	bl	2978e <get_le16>
   13c28:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
    connsm->slave_latency = get_le16(dptr + 12);
   13c2c:	f106 001a 	add.w	r0, r6, #26
   13c30:	f015 fdad 	bl	2978e <get_le16>
   13c34:	f8a4 006a 	strh.w	r0, [r4, #106]	; 0x6a
    connsm->supervision_tmo = get_le16(dptr + 14);
   13c38:	f106 001c 	add.w	r0, r6, #28
   13c3c:	f015 fda7 	bl	2978e <get_le16>
   13c40:	f8a4 006c 	strh.w	r0, [r4, #108]	; 0x6c
    memcpy(&connsm->chanmap, dptr + 16, BLE_LL_CONN_CHMAP_LEN);
   13c44:	f104 0220 	add.w	r2, r4, #32
   13c48:	4633      	mov	r3, r6
   13c4a:	f853 1f1e 	ldr.w	r1, [r3, #30]!
   13c4e:	6221      	str	r1, [r4, #32]
   13c50:	791b      	ldrb	r3, [r3, #4]
   13c52:	7113      	strb	r3, [r2, #4]
    connsm->hop_inc = dptr[21] & 0x1F;
   13c54:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
   13c58:	f003 031f 	and.w	r3, r3, #31
   13c5c:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
    connsm->master_sca = dptr[21] >> 5;
   13c60:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
   13c64:	095b      	lsrs	r3, r3, #5
   13c66:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

    /* Error check parameters */
    if ((connsm->tx_win_off > connsm->conn_itvl) ||
   13c6a:	f8b4 1072 	ldrh.w	r1, [r4, #114]	; 0x72
   13c6e:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
   13c72:	4299      	cmp	r1, r3
   13c74:	d81e      	bhi.n	13cb4 <ble_ll_conn_slave_start+0x118>
   13c76:	2b05      	cmp	r3, #5
   13c78:	d91c      	bls.n	13cb4 <ble_ll_conn_slave_start+0x118>
        (connsm->conn_itvl < BLE_HCI_CONN_ITVL_MIN) ||
   13c7a:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   13c7e:	d819      	bhi.n	13cb4 <ble_ll_conn_slave_start+0x118>
        (connsm->conn_itvl > BLE_HCI_CONN_ITVL_MAX) ||
        (connsm->tx_win_size < BLE_LL_CONN_TX_WIN_MIN) ||
   13c80:	f894 103a 	ldrb.w	r1, [r4, #58]	; 0x3a
        (connsm->conn_itvl > BLE_HCI_CONN_ITVL_MAX) ||
   13c84:	b1b1      	cbz	r1, 13cb4 <ble_ll_conn_slave_start+0x118>
        (connsm->slave_latency > BLE_LL_CONN_SLAVE_LATENCY_MAX)) {
   13c86:	f8b4 e06a 	ldrh.w	lr, [r4, #106]	; 0x6a
        (connsm->tx_win_size < BLE_LL_CONN_TX_WIN_MIN) ||
   13c8a:	f5be 7ffa 	cmp.w	lr, #500	; 0x1f4
   13c8e:	d211      	bcs.n	13cb4 <ble_ll_conn_slave_start+0x118>
        goto err_slave_start;
    }

    /* Slave latency cannot cause a supervision timeout */
    temp = (connsm->slave_latency + 1) * (connsm->conn_itvl * 2) *
   13c90:	f640 1cc4 	movw	ip, #2500	; 0x9c4
   13c94:	fb0c fc03 	mul.w	ip, ip, r3
   13c98:	fb0e cc0c 	mla	ip, lr, ip, ip
            BLE_LL_CONN_ITVL_USECS;
    if ((connsm->supervision_tmo * 10000) <= temp ) {
   13c9c:	f242 7e10 	movw	lr, #10000	; 0x2710
   13ca0:	fb0e f000 	mul.w	r0, lr, r0
   13ca4:	4560      	cmp	r0, ip
   13ca6:	d905      	bls.n	13cb4 <ble_ll_conn_slave_start+0x118>

    /*
     * The transmit window must be less than or equal to the lesser of 10
     * msecs or the connection interval minus 1.25 msecs.
     */
    temp = connsm->conn_itvl - 1;
   13ca8:	3b01      	subs	r3, #1
    if (temp > 8) {
   13caa:	2b08      	cmp	r3, #8
   13cac:	d900      	bls.n	13cb0 <ble_ll_conn_slave_start+0x114>
        temp = 8;
   13cae:	2308      	movs	r3, #8
    }
    if (connsm->tx_win_size > temp) {
   13cb0:	4299      	cmp	r1, r3
   13cb2:	d90e      	bls.n	13cd2 <ble_ll_conn_slave_start+0x136>
        STAILQ_INSERT_TAIL(&g_ble_ll_conn_free_list, connsm, free_stqe);
    }
    return rc;

err_slave_start:
    STAILQ_INSERT_TAIL(&g_ble_ll_conn_free_list, connsm, free_stqe);
   13cb4:	2300      	movs	r3, #0
   13cb6:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
   13cba:	4a2c      	ldr	r2, [pc, #176]	; (13d6c <ble_ll_conn_slave_start+0x1d0>)
   13cbc:	6851      	ldr	r1, [r2, #4]
   13cbe:	600c      	str	r4, [r1, #0]
   13cc0:	34b8      	adds	r4, #184	; 0xb8
   13cc2:	6054      	str	r4, [r2, #4]
    STATS_INC(ble_ll_conn_stats, slave_rxd_bad_conn_req_params);
   13cc4:	492a      	ldr	r1, [pc, #168]	; (13d70 <ble_ll_conn_slave_start+0x1d4>)
   13cc6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
   13cc8:	3201      	adds	r2, #1
   13cca:	62ca      	str	r2, [r1, #44]	; 0x2c
    return 0;
}
   13ccc:	4618      	mov	r0, r3
   13cce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    memcpy(&connsm->peer_addr, inita, BLE_DEV_ADDR_LEN);
   13cd2:	682b      	ldr	r3, [r5, #0]
   13cd4:	f8c4 3093 	str.w	r3, [r4, #147]	; 0x93
   13cd8:	88ab      	ldrh	r3, [r5, #4]
   13cda:	f8a4 3097 	strh.w	r3, [r4, #151]	; 0x97
    connsm->peer_addr_type = pat;
   13cde:	f884 9092 	strb.w	r9, [r4, #146]	; 0x92
    connsm->num_used_chans = ble_ll_utils_calc_num_used_chans(connsm->chanmap);
   13ce2:	4610      	mov	r0, r2
   13ce4:	f005 f9bb 	bl	1905e <ble_ll_utils_calc_num_used_chans>
   13ce8:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
    if (connsm->num_used_chans < 2) {
   13cec:	2801      	cmp	r0, #1
   13cee:	d9e1      	bls.n	13cb4 <ble_ll_conn_slave_start+0x118>
    connsm->conn_role = BLE_LL_CONN_ROLE_SLAVE;
   13cf0:	2302      	movs	r3, #2
   13cf2:	71e3      	strb	r3, [r4, #7]
    ble_ll_conn_sm_new(connsm);
   13cf4:	4620      	mov	r0, r4
   13cf6:	f7ff f849 	bl	12d8c <ble_ll_conn_sm_new>
                        force_csa2 || (rxbuf[0] & BLE_ADV_PDU_HDR_CHSEL_MASK));
   13cfa:	f1b8 0f00 	cmp.w	r8, #0
   13cfe:	d105      	bne.n	13d0c <ble_ll_conn_slave_start+0x170>
   13d00:	7833      	ldrb	r3, [r6, #0]
   13d02:	f013 0f20 	tst.w	r3, #32
   13d06:	d020      	beq.n	13d4a <ble_ll_conn_slave_start+0x1ae>
   13d08:	2101      	movs	r1, #1
   13d0a:	e000      	b.n	13d0e <ble_ll_conn_slave_start+0x172>
   13d0c:	2101      	movs	r1, #1
    ble_ll_conn_set_csa(connsm,
   13d0e:	4620      	mov	r0, r4
   13d10:	f7fe ffcc 	bl	12cac <ble_ll_conn_set_csa>
    connsm->conn_sch.sched_cb = ble_ll_conn_event_start_cb;
   13d14:	4b17      	ldr	r3, [pc, #92]	; (13d74 <ble_ll_conn_slave_start+0x1d8>)
   13d16:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
    rc = ble_ll_conn_created(connsm, rxhdr);
   13d1a:	4639      	mov	r1, r7
   13d1c:	4620      	mov	r0, r4
   13d1e:	f7fe ff39 	bl	12b94 <ble_ll_conn_created>
    if (!rc) {
   13d22:	4603      	mov	r3, r0
   13d24:	2800      	cmp	r0, #0
   13d26:	d1d1      	bne.n	13ccc <ble_ll_conn_slave_start+0x130>
        SLIST_REMOVE(&g_ble_ll_conn_active_list, connsm, ble_ll_conn_sm, act_sle);
   13d28:	4a0f      	ldr	r2, [pc, #60]	; (13d68 <ble_ll_conn_slave_start+0x1cc>)
   13d2a:	6812      	ldr	r2, [r2, #0]
   13d2c:	42a2      	cmp	r2, r4
   13d2e:	d10f      	bne.n	13d50 <ble_ll_conn_slave_start+0x1b4>
   13d30:	f8d2 10b8 	ldr.w	r1, [r2, #184]	; 0xb8
   13d34:	4a0c      	ldr	r2, [pc, #48]	; (13d68 <ble_ll_conn_slave_start+0x1cc>)
   13d36:	6011      	str	r1, [r2, #0]
        STAILQ_INSERT_TAIL(&g_ble_ll_conn_free_list, connsm, free_stqe);
   13d38:	2200      	movs	r2, #0
   13d3a:	f8c4 20b8 	str.w	r2, [r4, #184]	; 0xb8
   13d3e:	4a0b      	ldr	r2, [pc, #44]	; (13d6c <ble_ll_conn_slave_start+0x1d0>)
   13d40:	6851      	ldr	r1, [r2, #4]
   13d42:	600c      	str	r4, [r1, #0]
   13d44:	34b8      	adds	r4, #184	; 0xb8
   13d46:	6054      	str	r4, [r2, #4]
   13d48:	e7c0      	b.n	13ccc <ble_ll_conn_slave_start+0x130>
                        force_csa2 || (rxbuf[0] & BLE_ADV_PDU_HDR_CHSEL_MASK));
   13d4a:	2100      	movs	r1, #0
   13d4c:	e7df      	b.n	13d0e <ble_ll_conn_slave_start+0x172>
        SLIST_REMOVE(&g_ble_ll_conn_active_list, connsm, ble_ll_conn_sm, act_sle);
   13d4e:	460a      	mov	r2, r1
   13d50:	f8d2 10b8 	ldr.w	r1, [r2, #184]	; 0xb8
   13d54:	42a1      	cmp	r1, r4
   13d56:	d1fa      	bne.n	13d4e <ble_ll_conn_slave_start+0x1b2>
   13d58:	f8d1 10b8 	ldr.w	r1, [r1, #184]	; 0xb8
   13d5c:	f8c2 10b8 	str.w	r1, [r2, #184]	; 0xb8
   13d60:	e7ea      	b.n	13d38 <ble_ll_conn_slave_start+0x19c>
        return 0;
   13d62:	2300      	movs	r3, #0
   13d64:	e7b2      	b.n	13ccc <ble_ll_conn_slave_start+0x130>
   13d66:	bf00      	nop
   13d68:	200040d0 	.word	0x200040d0
   13d6c:	20003ea0 	.word	0x20003ea0
   13d70:	20004050 	.word	0x20004050
   13d74:	00012369 	.word	0x00012369

00013d78 <ble_ll_conn_module_reset>:
 *
 * Context: Link Layer task
 */
void
ble_ll_conn_module_reset(void)
{
   13d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint16_t maxbytes;
    struct ble_ll_conn_sm *connsm;
    struct ble_ll_conn_global_params *conn_params;

    /* Kill the current one first (if one is running) */
    if (g_ble_ll_conn_cur_sm) {
   13d7a:	4b2b      	ldr	r3, [pc, #172]	; (13e28 <ble_ll_conn_module_reset+0xb0>)
   13d7c:	6818      	ldr	r0, [r3, #0]
   13d7e:	b118      	cbz	r0, 13d88 <ble_ll_conn_module_reset+0x10>
        connsm = g_ble_ll_conn_cur_sm;
        g_ble_ll_conn_cur_sm = NULL;
   13d80:	2100      	movs	r1, #0
   13d82:	6019      	str	r1, [r3, #0]
        ble_ll_conn_end(connsm, BLE_ERR_SUCCESS);
   13d84:	f7ff f8be 	bl	12f04 <ble_ll_conn_end>
    }

    /* Free the global connection complete event if there is one */
    if (g_ble_ll_conn_comp_ev) {
   13d88:	4b28      	ldr	r3, [pc, #160]	; (13e2c <ble_ll_conn_module_reset+0xb4>)
   13d8a:	6818      	ldr	r0, [r3, #0]
   13d8c:	b120      	cbz	r0, 13d98 <ble_ll_conn_module_reset+0x20>
        ble_hci_trans_buf_free(g_ble_ll_conn_comp_ev);
   13d8e:	f012 f99d 	bl	260cc <ble_hci_trans_buf_free>
        g_ble_ll_conn_comp_ev = NULL;
   13d92:	4b26      	ldr	r3, [pc, #152]	; (13e2c <ble_ll_conn_module_reset+0xb4>)
   13d94:	2200      	movs	r2, #0
   13d96:	601a      	str	r2, [r3, #0]
    }

    /* Reset connection we are attempting to create */
    g_ble_ll_conn_create_sm = NULL;
   13d98:	4b25      	ldr	r3, [pc, #148]	; (13e30 <ble_ll_conn_module_reset+0xb8>)
   13d9a:	2200      	movs	r2, #0
   13d9c:	601a      	str	r2, [r3, #0]

    /* Now go through and end all the connections */
    while (1) {
        connsm = SLIST_FIRST(&g_ble_ll_conn_active_list);
   13d9e:	4b25      	ldr	r3, [pc, #148]	; (13e34 <ble_ll_conn_module_reset+0xbc>)
   13da0:	6818      	ldr	r0, [r3, #0]
        if (!connsm) {
   13da2:	b118      	cbz	r0, 13dac <ble_ll_conn_module_reset+0x34>
            break;
        }
        ble_ll_conn_end(connsm, BLE_ERR_SUCCESS);
   13da4:	2100      	movs	r1, #0
   13da6:	f7ff f8ad 	bl	12f04 <ble_ll_conn_end>
        connsm = SLIST_FIRST(&g_ble_ll_conn_active_list);
   13daa:	e7f8      	b.n	13d9e <ble_ll_conn_module_reset+0x26>
    }

    /* Get the maximum supported PHY PDU size from the PHY */
    max_phy_pyld = ble_phy_max_data_pdu_pyld();
   13dac:	f006 fa64 	bl	1a278 <ble_phy_max_data_pdu_pyld>
   13db0:	4605      	mov	r5, r0

    /* Configure the global LL parameters */
    conn_params = &g_ble_ll_conn_params;

    maxbytes = min(MYNEWT_VAL(BLE_LL_SUPP_MAX_RX_BYTES), max_phy_pyld);
   13db2:	4606      	mov	r6, r0
   13db4:	28fb      	cmp	r0, #251	; 0xfb
   13db6:	bf28      	it	cs
   13db8:	26fb      	movcs	r6, #251	; 0xfb
   13dba:	b2f6      	uxtb	r6, r6
    conn_params->supp_max_rx_octets = maxbytes;
   13dbc:	4c1e      	ldr	r4, [pc, #120]	; (13e38 <ble_ll_conn_module_reset+0xc0>)
   13dbe:	71e6      	strb	r6, [r4, #7]
#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LE_CODED_PHY)
    conn_params->supp_max_rx_time = MAX_TIME_CODED(maxbytes);
#else
    conn_params->supp_max_rx_time = MAX_TIME_UNCODED(maxbytes);
   13dc0:	1d37      	adds	r7, r6, #4
   13dc2:	2101      	movs	r1, #1
   13dc4:	4638      	mov	r0, r7
   13dc6:	f7fc fe59 	bl	10a7c <ble_ll_pdu_tx_time_get>
   13dca:	82a0      	strh	r0, [r4, #20]
#endif

    maxbytes = min(MYNEWT_VAL(BLE_LL_SUPP_MAX_TX_BYTES), max_phy_pyld);
    conn_params->supp_max_tx_octets = maxbytes;
   13dcc:	71a6      	strb	r6, [r4, #6]
#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LE_CODED_PHY)
    conn_params->supp_max_tx_time = MAX_TIME_CODED(maxbytes);
#else
    conn_params->supp_max_tx_time = MAX_TIME_UNCODED(maxbytes);
   13dce:	2101      	movs	r1, #1
   13dd0:	4638      	mov	r0, r7
   13dd2:	f7fc fe53 	bl	10a7c <ble_ll_pdu_tx_time_get>
   13dd6:	8260      	strh	r0, [r4, #18]
#endif

    maxbytes = min(MYNEWT_VAL(BLE_LL_CONN_INIT_MAX_TX_BYTES), max_phy_pyld);
   13dd8:	2d1b      	cmp	r5, #27
   13dda:	bf28      	it	cs
   13ddc:	251b      	movcs	r5, #27
   13dde:	b2ed      	uxtb	r5, r5
    conn_params->conn_init_max_tx_octets = maxbytes;
   13de0:	7225      	strb	r5, [r4, #8]
    conn_params->conn_init_max_tx_time = MAX_TIME_UNCODED(maxbytes);
   13de2:	3504      	adds	r5, #4
   13de4:	2101      	movs	r1, #1
   13de6:	4628      	mov	r0, r5
   13de8:	f7fc fe48 	bl	10a7c <ble_ll_pdu_tx_time_get>
   13dec:	81a0      	strh	r0, [r4, #12]
    conn_params->conn_init_max_tx_time_uncoded = MAX_TIME_UNCODED(maxbytes);
   13dee:	2101      	movs	r1, #1
   13df0:	4628      	mov	r0, r5
   13df2:	f7fc fe43 	bl	10a7c <ble_ll_pdu_tx_time_get>
   13df6:	81e0      	strh	r0, [r4, #14]
    conn_params->conn_init_max_tx_time_coded = MAX_TIME_CODED(maxbytes);
   13df8:	2103      	movs	r1, #3
   13dfa:	4628      	mov	r0, r5
   13dfc:	f7fc fe3e 	bl	10a7c <ble_ll_pdu_tx_time_get>
   13e00:	8220      	strh	r0, [r4, #16]

    conn_params->sugg_tx_octets = BLE_LL_CONN_SUPP_BYTES_MIN;
   13e02:	231b      	movs	r3, #27
   13e04:	7263      	strb	r3, [r4, #9]
    conn_params->sugg_tx_time = BLE_LL_CONN_SUPP_TIME_MIN;
   13e06:	f44f 73a4 	mov.w	r3, #328	; 0x148
   13e0a:	8163      	strh	r3, [r4, #10]

    /* Mask in all channels by default */
    conn_params->num_used_chans = BLE_PHY_NUM_DATA_CHANS;
   13e0c:	2325      	movs	r3, #37	; 0x25
   13e0e:	7163      	strb	r3, [r4, #5]
    memset(conn_params->master_chan_map, 0xff, BLE_LL_CONN_CHMAP_LEN - 1);
   13e10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13e14:	6023      	str	r3, [r4, #0]
    conn_params->master_chan_map[4] = 0x1f;
   13e16:	231f      	movs	r3, #31
   13e18:	7123      	strb	r3, [r4, #4]

    /* Reset statistics */
    STATS_RESET(ble_ll_conn_stats);
   13e1a:	2274      	movs	r2, #116	; 0x74
   13e1c:	2100      	movs	r1, #0
   13e1e:	4807      	ldr	r0, [pc, #28]	; (13e3c <ble_ll_conn_module_reset+0xc4>)
   13e20:	f7fa fb4e 	bl	e4c0 <memset>
    /* reset default sync transfer params */
    g_ble_ll_conn_sync_transfer_params.max_skip = 0;
    g_ble_ll_conn_sync_transfer_params.mode = 0;
    g_ble_ll_conn_sync_transfer_params.sync_timeout_us = 0;
#endif
}
   13e24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13e26:	bf00      	nop
   13e28:	20003e98 	.word	0x20003e98
   13e2c:	20003e9c 	.word	0x20003e9c
   13e30:	20003ea8 	.word	0x20003ea8
   13e34:	200040d0 	.word	0x200040d0
   13e38:	20003e80 	.word	0x20003e80
   13e3c:	2000405c 	.word	0x2000405c

00013e40 <ble_ll_conn_module_init>:

/* Initialize the connection module */
void
ble_ll_conn_module_init(void)
{
   13e40:	b530      	push	{r4, r5, lr}
   13e42:	b083      	sub	sp, #12
    int rc;
    uint16_t i;
    struct ble_ll_conn_sm *connsm;

    /* Initialize list of active conections */
    SLIST_INIT(&g_ble_ll_conn_active_list);
   13e44:	2400      	movs	r4, #0
   13e46:	4b1b      	ldr	r3, [pc, #108]	; (13eb4 <ble_ll_conn_module_init+0x74>)
   13e48:	601c      	str	r4, [r3, #0]
    STAILQ_INIT(&g_ble_ll_conn_free_list);
   13e4a:	4b1b      	ldr	r3, [pc, #108]	; (13eb8 <ble_ll_conn_module_init+0x78>)
   13e4c:	601c      	str	r4, [r3, #0]
   13e4e:	605b      	str	r3, [r3, #4]
    /*
     * Take all the connections off the free memory pool and add them to
     * the free connection list, assigning handles in linear order. Note:
     * the specification allows a handle of zero; we just avoid using it.
     */
    connsm = &g_ble_ll_conn_sm[0];
   13e50:	4d1a      	ldr	r5, [pc, #104]	; (13ebc <ble_ll_conn_module_init+0x7c>)
    for (i = 0; i < MYNEWT_VAL(BLE_MAX_CONNECTIONS); ++i) {
   13e52:	b16c      	cbz	r4, 13e70 <ble_ll_conn_module_init+0x30>
        connsm->conn_sch.cb_arg = connsm;
        ++connsm;
    }

    /* Register connection statistics */
    rc = stats_init_and_reg(STATS_HDR(ble_ll_conn_stats),
   13e54:	4b1a      	ldr	r3, [pc, #104]	; (13ec0 <ble_ll_conn_module_init+0x80>)
   13e56:	9301      	str	r3, [sp, #4]
   13e58:	2300      	movs	r3, #0
   13e5a:	9300      	str	r3, [sp, #0]
   13e5c:	221d      	movs	r2, #29
   13e5e:	2104      	movs	r1, #4
   13e60:	4818      	ldr	r0, [pc, #96]	; (13ec4 <ble_ll_conn_module_init+0x84>)
   13e62:	f7fc f905 	bl	10070 <stats_init_and_reg>
                            STATS_SIZE_INIT_PARMS(ble_ll_conn_stats, STATS_SIZE_32),
                            STATS_NAME_INIT_PARMS(ble_ll_conn_stats),
                            "ble_ll_conn");
    BLE_LL_ASSERT(rc == 0);
   13e66:	b9d0      	cbnz	r0, 13e9e <ble_ll_conn_module_init+0x5e>

    /* Call reset to finish reset of initialization */
    ble_ll_conn_module_reset();
   13e68:	f7ff ff86 	bl	13d78 <ble_ll_conn_module_reset>
}
   13e6c:	b003      	add	sp, #12
   13e6e:	bd30      	pop	{r4, r5, pc}
        memset(connsm, 0, sizeof(struct ble_ll_conn_sm));
   13e70:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
   13e74:	2100      	movs	r1, #0
   13e76:	4628      	mov	r0, r5
   13e78:	f7fa fb22 	bl	e4c0 <memset>
        connsm->conn_handle = i + 1;
   13e7c:	3401      	adds	r4, #1
   13e7e:	b2a4      	uxth	r4, r4
   13e80:	80ac      	strh	r4, [r5, #4]
        STAILQ_INSERT_TAIL(&g_ble_ll_conn_free_list, connsm, free_stqe);
   13e82:	4b0d      	ldr	r3, [pc, #52]	; (13eb8 <ble_ll_conn_module_init+0x78>)
   13e84:	685a      	ldr	r2, [r3, #4]
   13e86:	6015      	str	r5, [r2, #0]
   13e88:	f105 02b8 	add.w	r2, r5, #184	; 0xb8
   13e8c:	605a      	str	r2, [r3, #4]
        connsm->conn_sch.sched_type = BLE_LL_SCHED_TYPE_CONN;
   13e8e:	2303      	movs	r3, #3
   13e90:	f885 30dc 	strb.w	r3, [r5, #220]	; 0xdc
        connsm->conn_sch.cb_arg = connsm;
   13e94:	f8c5 50e8 	str.w	r5, [r5, #232]	; 0xe8
        ++connsm;
   13e98:	f505 75d0 	add.w	r5, r5, #416	; 0x1a0
   13e9c:	e7d9      	b.n	13e52 <ble_ll_conn_module_init+0x12>
    BLE_LL_ASSERT(rc == 0);
   13e9e:	f7f8 f9a3 	bl	c1e8 <hal_debugger_connected>
   13ea2:	b100      	cbz	r0, 13ea6 <ble_ll_conn_module_init+0x66>
   13ea4:	be01      	bkpt	0x0001
   13ea6:	2300      	movs	r3, #0
   13ea8:	461a      	mov	r2, r3
   13eaa:	4619      	mov	r1, r3
   13eac:	4618      	mov	r0, r3
   13eae:	f7f8 fbd5 	bl	c65c <__assert_func>
   13eb2:	bf00      	nop
   13eb4:	200040d0 	.word	0x200040d0
   13eb8:	20003ea0 	.word	0x20003ea0
   13ebc:	20003eb0 	.word	0x20003eb0
   13ec0:	0002af38 	.word	0x0002af38
   13ec4:	20004050 	.word	0x20004050

00013ec8 <ble_ll_conn_hci_chk_scan_params>:

static int
ble_ll_conn_hci_chk_scan_params(uint16_t itvl, uint16_t window)
{
    /* Check interval and window */
    if ((itvl < BLE_HCI_SCAN_ITVL_MIN) ||
   13ec8:	1f03      	subs	r3, r0, #4
   13eca:	b29b      	uxth	r3, r3
   13ecc:	f643 72fc 	movw	r2, #16380	; 0x3ffc
   13ed0:	4293      	cmp	r3, r2
   13ed2:	d80a      	bhi.n	13eea <ble_ll_conn_hci_chk_scan_params+0x22>
        (itvl > BLE_HCI_SCAN_ITVL_MAX) ||
   13ed4:	2903      	cmp	r1, #3
   13ed6:	d90a      	bls.n	13eee <ble_ll_conn_hci_chk_scan_params+0x26>
        (window < BLE_HCI_SCAN_WINDOW_MIN) ||
   13ed8:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
   13edc:	d809      	bhi.n	13ef2 <ble_ll_conn_hci_chk_scan_params+0x2a>
        (window > BLE_HCI_SCAN_WINDOW_MAX) ||
   13ede:	4288      	cmp	r0, r1
   13ee0:	d301      	bcc.n	13ee6 <ble_ll_conn_hci_chk_scan_params+0x1e>
        (itvl < window)) {
        return BLE_ERR_INV_HCI_CMD_PARMS;
    }

    return 0;
   13ee2:	2000      	movs	r0, #0
}
   13ee4:	4770      	bx	lr
        return BLE_ERR_INV_HCI_CMD_PARMS;
   13ee6:	2012      	movs	r0, #18
   13ee8:	4770      	bx	lr
   13eea:	2012      	movs	r0, #18
   13eec:	4770      	bx	lr
   13eee:	2012      	movs	r0, #18
   13ef0:	4770      	bx	lr
   13ef2:	2012      	movs	r0, #18
   13ef4:	4770      	bx	lr
	...

00013ef8 <ble_ll_init_alloc_conn_comp_ev>:
{
   13ef8:	b508      	push	{r3, lr}
    evbuf = g_ble_ll_conn_comp_ev;
   13efa:	4b08      	ldr	r3, [pc, #32]	; (13f1c <ble_ll_init_alloc_conn_comp_ev+0x24>)
   13efc:	681b      	ldr	r3, [r3, #0]
    if (evbuf == NULL) {
   13efe:	b10b      	cbz	r3, 13f04 <ble_ll_init_alloc_conn_comp_ev+0xc>
    rc = 0;
   13f00:	2000      	movs	r0, #0
}
   13f02:	bd08      	pop	{r3, pc}
        evbuf = ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   13f04:	2002      	movs	r0, #2
   13f06:	f012 f8b3 	bl	26070 <ble_hci_trans_buf_alloc>
        if (!evbuf) {
   13f0a:	b118      	cbz	r0, 13f14 <ble_ll_init_alloc_conn_comp_ev+0x1c>
            g_ble_ll_conn_comp_ev = evbuf;
   13f0c:	4a03      	ldr	r2, [pc, #12]	; (13f1c <ble_ll_init_alloc_conn_comp_ev+0x24>)
   13f0e:	6010      	str	r0, [r2, #0]
    rc = 0;
   13f10:	2000      	movs	r0, #0
   13f12:	e7f6      	b.n	13f02 <ble_ll_init_alloc_conn_comp_ev+0xa>
            rc = -1;
   13f14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return rc;
   13f18:	e7f3      	b.n	13f02 <ble_ll_init_alloc_conn_comp_ev+0xa>
   13f1a:	bf00      	nop
   13f1c:	20003e9c 	.word	0x20003e9c

00013f20 <ble_ll_conn_hci_chk_conn_params>:
    if ((itvl_min > itvl_max) ||
   13f20:	4288      	cmp	r0, r1
   13f22:	d81c      	bhi.n	13f5e <ble_ll_conn_hci_chk_conn_params+0x3e>
   13f24:	2805      	cmp	r0, #5
   13f26:	d91c      	bls.n	13f62 <ble_ll_conn_hci_chk_conn_params+0x42>
        (itvl_min < BLE_HCI_CONN_ITVL_MIN) ||
   13f28:	f5b1 6f48 	cmp.w	r1, #3200	; 0xc80
   13f2c:	d81b      	bhi.n	13f66 <ble_ll_conn_hci_chk_conn_params+0x46>
        (itvl_max > BLE_HCI_CONN_ITVL_MAX) ||
   13f2e:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
   13f32:	d21a      	bcs.n	13f6a <ble_ll_conn_hci_chk_conn_params+0x4a>
        (latency > BLE_HCI_CONN_LATENCY_MAX) ||
   13f34:	2b09      	cmp	r3, #9
   13f36:	d91a      	bls.n	13f6e <ble_ll_conn_hci_chk_conn_params+0x4e>
        (spvn_tmo < BLE_HCI_CONN_SPVN_TIMEOUT_MIN) ||
   13f38:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   13f3c:	d819      	bhi.n	13f72 <ble_ll_conn_hci_chk_conn_params+0x52>
    spvn_tmo_usecs *= (BLE_HCI_CONN_SPVN_TMO_UNITS * 1000);
   13f3e:	f242 7010 	movw	r0, #10000	; 0x2710
   13f42:	fb00 f303 	mul.w	r3, r0, r3
    min_spvn_tmo_usecs = (uint32_t)itvl_max * 2 * BLE_LL_CONN_ITVL_USECS;
   13f46:	f640 10c4 	movw	r0, #2500	; 0x9c4
   13f4a:	fb00 f101 	mul.w	r1, r0, r1
    min_spvn_tmo_usecs *= (1 + latency);
   13f4e:	fb02 1101 	mla	r1, r2, r1, r1
    if (spvn_tmo_usecs <= min_spvn_tmo_usecs) {
   13f52:	428b      	cmp	r3, r1
   13f54:	d901      	bls.n	13f5a <ble_ll_conn_hci_chk_conn_params+0x3a>
    return BLE_ERR_SUCCESS;
   13f56:	2000      	movs	r0, #0
}
   13f58:	4770      	bx	lr
        return BLE_ERR_INV_HCI_CMD_PARMS;
   13f5a:	2012      	movs	r0, #18
   13f5c:	4770      	bx	lr
        return BLE_ERR_INV_HCI_CMD_PARMS;
   13f5e:	2012      	movs	r0, #18
   13f60:	4770      	bx	lr
   13f62:	2012      	movs	r0, #18
   13f64:	4770      	bx	lr
   13f66:	2012      	movs	r0, #18
   13f68:	4770      	bx	lr
   13f6a:	2012      	movs	r0, #18
   13f6c:	4770      	bx	lr
   13f6e:	2012      	movs	r0, #18
   13f70:	4770      	bx	lr
   13f72:	2012      	movs	r0, #18
   13f74:	4770      	bx	lr

00013f76 <ble_ll_conn_process_conn_params>:
#endif

static int
ble_ll_conn_process_conn_params(const struct ble_hci_le_rem_conn_param_rr_cp *cmd,
                                struct ble_ll_conn_sm *connsm)
{
   13f76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int rc;
    struct hci_conn_update *hcu;

    /* Retrieve command data */
    hcu = &connsm->conn_param_req;
    hcu->handle = connsm->conn_handle;
   13f78:	888b      	ldrh	r3, [r1, #4]
   13f7a:	f8a1 3168 	strh.w	r3, [r1, #360]	; 0x168

    BLE_LL_ASSERT(connsm->conn_handle == le16toh(cmd->conn_handle));
   13f7e:	8802      	ldrh	r2, [r0, #0]
   13f80:	4293      	cmp	r3, r2
   13f82:	d11d      	bne.n	13fc0 <ble_ll_conn_process_conn_params+0x4a>

    hcu->conn_itvl_min = le16toh(cmd->conn_itvl_min);
   13f84:	8844      	ldrh	r4, [r0, #2]
   13f86:	f8a1 416a 	strh.w	r4, [r1, #362]	; 0x16a
    hcu->conn_itvl_max = le16toh(cmd->conn_itvl_max);
   13f8a:	8885      	ldrh	r5, [r0, #4]
   13f8c:	f8a1 516c 	strh.w	r5, [r1, #364]	; 0x16c
    hcu->conn_latency = le16toh(cmd->conn_latency);
   13f90:	88c2      	ldrh	r2, [r0, #6]
   13f92:	f8a1 216e 	strh.w	r2, [r1, #366]	; 0x16e
    hcu->supervision_timeout = le16toh(cmd->supervision_timeout);
   13f96:	8903      	ldrh	r3, [r0, #8]
   13f98:	f8a1 3170 	strh.w	r3, [r1, #368]	; 0x170
    hcu->min_ce_len = le16toh(cmd->min_ce);
   13f9c:	8947      	ldrh	r7, [r0, #10]
   13f9e:	b2be      	uxth	r6, r7
   13fa0:	f8a1 7172 	strh.w	r7, [r1, #370]	; 0x172
    hcu->max_ce_len = le16toh(cmd->max_ce);
   13fa4:	8980      	ldrh	r0, [r0, #12]
   13fa6:	b287      	uxth	r7, r0
   13fa8:	f8a1 0174 	strh.w	r0, [r1, #372]	; 0x174

    /* Check that parameter values are in range */
    rc = ble_ll_conn_hci_chk_conn_params(hcu->conn_itvl_min,
   13fac:	4629      	mov	r1, r5
   13fae:	4620      	mov	r0, r4
   13fb0:	f7ff ffb6 	bl	13f20 <ble_ll_conn_hci_chk_conn_params>
                                         hcu->conn_itvl_max,
                                         hcu->conn_latency,
                                         hcu->supervision_timeout);

    /* Check valid min/max ce length */
    if (rc || (hcu->min_ce_len > hcu->max_ce_len)) {
   13fb4:	4603      	mov	r3, r0
   13fb6:	b978      	cbnz	r0, 13fd8 <ble_ll_conn_process_conn_params+0x62>
   13fb8:	42be      	cmp	r6, r7
   13fba:	d80b      	bhi.n	13fd4 <ble_ll_conn_process_conn_params+0x5e>
        return BLE_ERR_INV_HCI_CMD_PARMS;
    }
    return rc;
}
   13fbc:	4618      	mov	r0, r3
   13fbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    BLE_LL_ASSERT(connsm->conn_handle == le16toh(cmd->conn_handle));
   13fc0:	f7f8 f912 	bl	c1e8 <hal_debugger_connected>
   13fc4:	b100      	cbz	r0, 13fc8 <ble_ll_conn_process_conn_params+0x52>
   13fc6:	be01      	bkpt	0x0001
   13fc8:	2300      	movs	r3, #0
   13fca:	461a      	mov	r2, r3
   13fcc:	4619      	mov	r1, r3
   13fce:	4618      	mov	r0, r3
   13fd0:	f7f8 fb44 	bl	c65c <__assert_func>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   13fd4:	2312      	movs	r3, #18
   13fd6:	e7f1      	b.n	13fbc <ble_ll_conn_process_conn_params+0x46>
   13fd8:	2312      	movs	r3, #18
   13fda:	e7ef      	b.n	13fbc <ble_ll_conn_process_conn_params+0x46>

00013fdc <ble_ll_conn_comp_event_send>:
{
   13fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    BLE_LL_ASSERT(evbuf);
   13fde:	b382      	cbz	r2, 14042 <ble_ll_conn_comp_event_send+0x66>
   13fe0:	4605      	mov	r5, r0
   13fe2:	460e      	mov	r6, r1
   13fe4:	461f      	mov	r7, r3
   13fe6:	4614      	mov	r4, r2
    if (ble_ll_hci_is_le_event_enabled(BLE_HCI_LE_SUBEV_ENH_CONN_COMPLETE)) {
   13fe8:	200a      	movs	r0, #10
   13fea:	f002 fa8d 	bl	16508 <ble_ll_hci_is_le_event_enabled>
   13fee:	2800      	cmp	r0, #0
   13ff0:	d067      	beq.n	140c2 <ble_ll_conn_comp_event_send+0xe6>
        hci_ev->opcode = BLE_HCI_EVCODE_LE_META;
   13ff2:	233e      	movs	r3, #62	; 0x3e
   13ff4:	7023      	strb	r3, [r4, #0]
        hci_ev->length = sizeof(*enh_ev);
   13ff6:	221f      	movs	r2, #31
   13ff8:	7062      	strb	r2, [r4, #1]
        memset(enh_ev, 0, sizeof(*enh_ev));
   13ffa:	2100      	movs	r1, #0
   13ffc:	1ca0      	adds	r0, r4, #2
   13ffe:	f7fa fa5f 	bl	e4c0 <memset>
        enh_ev->subev_code = BLE_HCI_LE_SUBEV_ENH_CONN_COMPLETE;
   14002:	230a      	movs	r3, #10
   14004:	70a3      	strb	r3, [r4, #2]
        enh_ev->status = status;
   14006:	70e6      	strb	r6, [r4, #3]
        if (connsm) {
   14008:	2d00      	cmp	r5, #0
   1400a:	d04b      	beq.n	140a4 <ble_ll_conn_comp_event_send+0xc8>
            enh_ev->conn_handle = htole16(connsm->conn_handle);
   1400c:	88ab      	ldrh	r3, [r5, #4]
   1400e:	80a3      	strh	r3, [r4, #4]
            enh_ev->role = connsm->conn_role - 1;
   14010:	79eb      	ldrb	r3, [r5, #7]
   14012:	3b01      	subs	r3, #1
   14014:	71a3      	strb	r3, [r4, #6]
            enh_ev->peer_addr_type = connsm->peer_addr_type;
   14016:	f895 3092 	ldrb.w	r3, [r5, #146]	; 0x92
   1401a:	71e3      	strb	r3, [r4, #7]
            memcpy(enh_ev->peer_addr, connsm->peer_addr, BLE_DEV_ADDR_LEN);
   1401c:	462b      	mov	r3, r5
   1401e:	f853 2f93 	ldr.w	r2, [r3, #147]!
   14022:	60a2      	str	r2, [r4, #8]
   14024:	889b      	ldrh	r3, [r3, #4]
   14026:	81a3      	strh	r3, [r4, #12]
            if (connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) {
   14028:	79eb      	ldrb	r3, [r5, #7]
   1402a:	2b01      	cmp	r3, #1
   1402c:	d113      	bne.n	14056 <ble_ll_conn_comp_event_send+0x7a>
                if (connsm->inita_identity_used) {
   1402e:	f895 3090 	ldrb.w	r3, [r5, #144]	; 0x90
   14032:	b9cb      	cbnz	r3, 14068 <ble_ll_conn_comp_event_send+0x8c>
                } else  if (connsm->own_addr_type > BLE_HCI_ADV_OWN_ADDR_RANDOM) {
   14034:	f895 3091 	ldrb.w	r3, [r5, #145]	; 0x91
   14038:	2b01      	cmp	r3, #1
   1403a:	d915      	bls.n	14068 <ble_ll_conn_comp_event_send+0x8c>
                    rpa = ble_ll_scan_get_local_rpa();
   1403c:	f004 fa96 	bl	1856c <ble_ll_scan_get_local_rpa>
   14040:	e00c      	b.n	1405c <ble_ll_conn_comp_event_send+0x80>
    BLE_LL_ASSERT(evbuf);
   14042:	f7f8 f8d1 	bl	c1e8 <hal_debugger_connected>
   14046:	b100      	cbz	r0, 1404a <ble_ll_conn_comp_event_send+0x6e>
   14048:	be01      	bkpt	0x0001
   1404a:	2300      	movs	r3, #0
   1404c:	461a      	mov	r2, r3
   1404e:	4619      	mov	r1, r3
   14050:	4618      	mov	r0, r3
   14052:	f7f8 fb03 	bl	c65c <__assert_func>
                rpa = ble_ll_adv_get_local_rpa(advsm);
   14056:	4638      	mov	r0, r7
   14058:	f7fd fe06 	bl	11c68 <ble_ll_adv_get_local_rpa>
            if (rpa) {
   1405c:	b120      	cbz	r0, 14068 <ble_ll_conn_comp_event_send+0x8c>
                memcpy(enh_ev->local_rpa, rpa, BLE_DEV_ADDR_LEN);
   1405e:	6803      	ldr	r3, [r0, #0]
   14060:	f8c4 300e 	str.w	r3, [r4, #14]
   14064:	8883      	ldrh	r3, [r0, #4]
   14066:	8263      	strh	r3, [r4, #18]
             if (connsm->peer_addr_type < BLE_HCI_CONN_PEER_ADDR_PUBLIC_IDENT
   14068:	f895 3092 	ldrb.w	r3, [r5, #146]	; 0x92
   1406c:	2b01      	cmp	r3, #1
   1406e:	d91d      	bls.n	140ac <ble_ll_conn_comp_event_send+0xd0>
             if (enh_ev->peer_addr_type > BLE_HCI_CONN_PEER_ADDR_RANDOM) {
   14070:	79e3      	ldrb	r3, [r4, #7]
   14072:	2b01      	cmp	r3, #1
   14074:	d909      	bls.n	1408a <ble_ll_conn_comp_event_send+0xae>
                 if (connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) {
   14076:	79eb      	ldrb	r3, [r5, #7]
   14078:	2b01      	cmp	r3, #1
   1407a:	d01f      	beq.n	140bc <ble_ll_conn_comp_event_send+0xe0>
                     rpa = ble_ll_adv_get_peer_rpa(advsm);
   1407c:	4638      	mov	r0, r7
   1407e:	f7fd fe0a 	bl	11c96 <ble_ll_adv_get_peer_rpa>
                 memcpy(enh_ev->peer_rpa, rpa, BLE_DEV_ADDR_LEN);
   14082:	6803      	ldr	r3, [r0, #0]
   14084:	6163      	str	r3, [r4, #20]
   14086:	8883      	ldrh	r3, [r0, #4]
   14088:	8323      	strh	r3, [r4, #24]
            enh_ev->conn_itvl = htole16(connsm->conn_itvl);
   1408a:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
   1408e:	8363      	strh	r3, [r4, #26]
            enh_ev->conn_latency = htole16(connsm->slave_latency);
   14090:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
   14094:	83a3      	strh	r3, [r4, #28]
            enh_ev->supervision_timeout = htole16(connsm->supervision_tmo);
   14096:	f8b5 306c 	ldrh.w	r3, [r5, #108]	; 0x6c
   1409a:	83e3      	strh	r3, [r4, #30]
            enh_ev->mca = connsm->master_sca;
   1409c:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
   140a0:	f884 3020 	strb.w	r3, [r4, #32]
        ble_ll_hci_event_send(hci_ev);
   140a4:	4620      	mov	r0, r4
   140a6:	f002 f977 	bl	16398 <ble_ll_hci_event_send>
}
   140aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                     && (connsm->rpa_index > -1)) {
   140ac:	f995 3009 	ldrsb.w	r3, [r5, #9]
   140b0:	2b00      	cmp	r3, #0
   140b2:	dbdd      	blt.n	14070 <ble_ll_conn_comp_event_send+0x94>
                 enh_ev->peer_addr_type += 2;
   140b4:	79e3      	ldrb	r3, [r4, #7]
   140b6:	3302      	adds	r3, #2
   140b8:	71e3      	strb	r3, [r4, #7]
   140ba:	e7d9      	b.n	14070 <ble_ll_conn_comp_event_send+0x94>
                     rpa = ble_ll_scan_get_peer_rpa();
   140bc:	f004 fa52 	bl	18564 <ble_ll_scan_get_peer_rpa>
   140c0:	e7df      	b.n	14082 <ble_ll_conn_comp_event_send+0xa6>
    if (ble_ll_hci_is_le_event_enabled(BLE_HCI_LE_SUBEV_CONN_COMPLETE)) {
   140c2:	2001      	movs	r0, #1
   140c4:	f002 fa20 	bl	16508 <ble_ll_hci_is_le_event_enabled>
   140c8:	b3a0      	cbz	r0, 14134 <ble_ll_conn_comp_event_send+0x158>
        hci_ev->opcode = BLE_HCI_EVCODE_LE_META;
   140ca:	233e      	movs	r3, #62	; 0x3e
   140cc:	7023      	strb	r3, [r4, #0]
        hci_ev->length = sizeof(*ev);
   140ce:	2313      	movs	r3, #19
   140d0:	7063      	strb	r3, [r4, #1]
        memset(ev, 0, sizeof(*ev));
   140d2:	2200      	movs	r2, #0
   140d4:	f8c4 2002 	str.w	r2, [r4, #2]
   140d8:	f8c4 2006 	str.w	r2, [r4, #6]
   140dc:	f8c4 200a 	str.w	r2, [r4, #10]
   140e0:	f8c4 200e 	str.w	r2, [r4, #14]
   140e4:	f8c4 2011 	str.w	r2, [r4, #17]
        ev->subev_code = BLE_HCI_LE_SUBEV_CONN_COMPLETE;
   140e8:	2301      	movs	r3, #1
   140ea:	70a3      	strb	r3, [r4, #2]
        ev->status = status;
   140ec:	70e6      	strb	r6, [r4, #3]
        if (connsm) {
   140ee:	b1ed      	cbz	r5, 1412c <ble_ll_conn_comp_event_send+0x150>
            ev->conn_handle = htole16(connsm->conn_handle);
   140f0:	88ab      	ldrh	r3, [r5, #4]
   140f2:	80a3      	strh	r3, [r4, #4]
            ev->role = connsm->conn_role - 1;
   140f4:	79eb      	ldrb	r3, [r5, #7]
   140f6:	3b01      	subs	r3, #1
   140f8:	71a3      	strb	r3, [r4, #6]
            ev->peer_addr_type = connsm->peer_addr_type;
   140fa:	f895 3092 	ldrb.w	r3, [r5, #146]	; 0x92
   140fe:	71e3      	strb	r3, [r4, #7]
            if (ev->peer_addr_type > BLE_HCI_CONN_PEER_ADDR_RANDOM) {
   14100:	2b01      	cmp	r3, #1
   14102:	d901      	bls.n	14108 <ble_ll_conn_comp_event_send+0x12c>
                ev->peer_addr_type -= 2;
   14104:	3b02      	subs	r3, #2
   14106:	71e3      	strb	r3, [r4, #7]
            memcpy(ev->peer_addr, connsm->peer_addr, BLE_DEV_ADDR_LEN);
   14108:	462b      	mov	r3, r5
   1410a:	f853 2f93 	ldr.w	r2, [r3, #147]!
   1410e:	60a2      	str	r2, [r4, #8]
   14110:	889b      	ldrh	r3, [r3, #4]
   14112:	81a3      	strh	r3, [r4, #12]
            ev->conn_itvl = htole16(connsm->conn_itvl);
   14114:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
   14118:	81e3      	strh	r3, [r4, #14]
            ev->conn_latency = htole16(connsm->slave_latency);
   1411a:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
   1411e:	8223      	strh	r3, [r4, #16]
            ev->supervision_timeout = htole16(connsm->supervision_tmo);
   14120:	f8b5 306c 	ldrh.w	r3, [r5, #108]	; 0x6c
   14124:	8263      	strh	r3, [r4, #18]
            ev->mca = connsm->master_sca;
   14126:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
   1412a:	7523      	strb	r3, [r4, #20]
        ble_ll_hci_event_send(hci_ev);
   1412c:	4620      	mov	r0, r4
   1412e:	f002 f933 	bl	16398 <ble_ll_hci_event_send>
        return;
   14132:	e7ba      	b.n	140aa <ble_ll_conn_comp_event_send+0xce>
    ble_hci_trans_buf_free(evbuf);
   14134:	4620      	mov	r0, r4
   14136:	f011 ffc9 	bl	260cc <ble_hci_trans_buf_free>
   1413a:	e7b6      	b.n	140aa <ble_ll_conn_comp_event_send+0xce>

0001413c <ble_ll_conn_hci_cancel_conn_complete_event>:
/* this is called from same context after cmd complete is send so it is
 * safe to use g_ble_ll_conn_comp_ev
 */
static void
ble_ll_conn_hci_cancel_conn_complete_event(void)
{
   1413c:	b508      	push	{r3, lr}
    BLE_LL_ASSERT(g_ble_ll_conn_comp_ev);
   1413e:	4b0b      	ldr	r3, [pc, #44]	; (1416c <ble_ll_conn_hci_cancel_conn_complete_event+0x30>)
   14140:	681a      	ldr	r2, [r3, #0]
   14142:	b142      	cbz	r2, 14156 <ble_ll_conn_hci_cancel_conn_complete_event+0x1a>

    ble_ll_conn_comp_event_send(NULL, BLE_ERR_UNK_CONN_ID,
   14144:	2300      	movs	r3, #0
   14146:	2102      	movs	r1, #2
   14148:	4618      	mov	r0, r3
   1414a:	f7ff ff47 	bl	13fdc <ble_ll_conn_comp_event_send>
                                g_ble_ll_conn_comp_ev, NULL);
    g_ble_ll_conn_comp_ev = NULL;
   1414e:	4b07      	ldr	r3, [pc, #28]	; (1416c <ble_ll_conn_hci_cancel_conn_complete_event+0x30>)
   14150:	2200      	movs	r2, #0
   14152:	601a      	str	r2, [r3, #0]
}
   14154:	bd08      	pop	{r3, pc}
    BLE_LL_ASSERT(g_ble_ll_conn_comp_ev);
   14156:	f7f8 f847 	bl	c1e8 <hal_debugger_connected>
   1415a:	b100      	cbz	r0, 1415e <ble_ll_conn_hci_cancel_conn_complete_event+0x22>
   1415c:	be01      	bkpt	0x0001
   1415e:	2300      	movs	r3, #0
   14160:	461a      	mov	r2, r3
   14162:	4619      	mov	r1, r3
   14164:	4618      	mov	r0, r3
   14166:	f7f8 fa79 	bl	c65c <__assert_func>
   1416a:	bf00      	nop
   1416c:	20003e9c 	.word	0x20003e9c

00014170 <ble_ll_conn_num_comp_pkts_event_send>:
{
   14170:	b570      	push	{r4, r5, r6, lr}
    if (connsm == NULL) {
   14172:	b320      	cbz	r0, 141be <ble_ll_conn_num_comp_pkts_event_send+0x4e>
   14174:	4604      	mov	r4, r0
}

static inline uint32_t
ble_npl_time_get(void)
{
    return os_time_get();
   14176:	f7f9 fa7d 	bl	d674 <os_time_get>
    if ((ble_npl_stime_t)(ble_npl_time_get() - g_ble_ll_last_num_comp_pkt_evt) <
   1417a:	4b36      	ldr	r3, [pc, #216]	; (14254 <ble_ll_conn_num_comp_pkts_event_send+0xe4>)
   1417c:	681b      	ldr	r3, [r3, #0]
   1417e:	1ac0      	subs	r0, r0, r3
   14180:	28ff      	cmp	r0, #255	; 0xff
   14182:	d81c      	bhi.n	141be <ble_ll_conn_num_comp_pkts_event_send+0x4e>
        if (connsm->completed_pkts) {
   14184:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
   14188:	2b00      	cmp	r3, #0
   1418a:	d05f      	beq.n	1424c <ble_ll_conn_num_comp_pkts_event_send+0xdc>
            hci_ev = (void *) ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   1418c:	2002      	movs	r0, #2
   1418e:	f011 ff6f 	bl	26070 <ble_hci_trans_buf_alloc>
            if (hci_ev) {
   14192:	2800      	cmp	r0, #0
   14194:	d05a      	beq.n	1424c <ble_ll_conn_num_comp_pkts_event_send+0xdc>
                hci_ev->opcode = BLE_HCI_EVCODE_NUM_COMP_PKTS;
   14196:	2213      	movs	r2, #19
   14198:	7002      	strb	r2, [r0, #0]
                hci_ev->length = sizeof(*ev);
   1419a:	2201      	movs	r2, #1
   1419c:	7042      	strb	r2, [r0, #1]
                ev->count = 1;
   1419e:	7082      	strb	r2, [r0, #2]
                ev->completed[0].handle = htole16(connsm->conn_handle);
   141a0:	88a2      	ldrh	r2, [r4, #4]
   141a2:	f8a0 2003 	strh.w	r2, [r0, #3]
                ev->completed[0].packets = htole16(connsm->completed_pkts);
   141a6:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   141aa:	f8a0 2005 	strh.w	r2, [r0, #5]
                hci_ev->length += sizeof(ev->completed[0]);
   141ae:	2205      	movs	r2, #5
   141b0:	7042      	strb	r2, [r0, #1]
                connsm->completed_pkts = 0;
   141b2:	2200      	movs	r2, #0
   141b4:	f8a4 204c 	strh.w	r2, [r4, #76]	; 0x4c
                ble_ll_hci_event_send(hci_ev);
   141b8:	f002 f8ee 	bl	16398 <ble_ll_hci_event_send>
   141bc:	e046      	b.n	1424c <ble_ll_conn_num_comp_pkts_event_send+0xdc>
    SLIST_FOREACH(connsm, &g_ble_ll_conn_active_list, act_sle) {
   141be:	4b26      	ldr	r3, [pc, #152]	; (14258 <ble_ll_conn_num_comp_pkts_event_send+0xe8>)
   141c0:	681c      	ldr	r4, [r3, #0]
    event_sent = 0;
   141c2:	2600      	movs	r6, #0
    hci_ev = NULL;
   141c4:	4632      	mov	r2, r6
    ev = NULL;
   141c6:	4635      	mov	r5, r6
    SLIST_FOREACH(connsm, &g_ble_ll_conn_active_list, act_sle) {
   141c8:	e018      	b.n	141fc <ble_ll_conn_num_comp_pkts_event_send+0x8c>
            if (!hci_ev) {
   141ca:	b322      	cbz	r2, 14216 <ble_ll_conn_num_comp_pkts_event_send+0xa6>
            ev->completed[ev->count].handle = htole16(connsm->conn_handle);
   141cc:	782b      	ldrb	r3, [r5, #0]
   141ce:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   141d2:	88a1      	ldrh	r1, [r4, #4]
   141d4:	f8a3 1001 	strh.w	r1, [r3, #1]
            ev->completed[ev->count].packets = htole16(connsm->completed_pkts);
   141d8:	f8b4 104c 	ldrh.w	r1, [r4, #76]	; 0x4c
   141dc:	f8a3 1003 	strh.w	r1, [r3, #3]
            hci_ev->length += sizeof(ev->completed[ev->count]);
   141e0:	7853      	ldrb	r3, [r2, #1]
   141e2:	3304      	adds	r3, #4
   141e4:	7053      	strb	r3, [r2, #1]
            ev->count++;
   141e6:	782b      	ldrb	r3, [r5, #0]
   141e8:	3301      	adds	r3, #1
   141ea:	702b      	strb	r3, [r5, #0]
            connsm->completed_pkts = 0;
   141ec:	2300      	movs	r3, #0
   141ee:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
            if (ev->count == max_handles) {
   141f2:	782b      	ldrb	r3, [r5, #0]
   141f4:	2b11      	cmp	r3, #17
   141f6:	d01b      	beq.n	14230 <ble_ll_conn_num_comp_pkts_event_send+0xc0>
    SLIST_FOREACH(connsm, &g_ble_ll_conn_active_list, act_sle) {
   141f8:	f8d4 40b8 	ldr.w	r4, [r4, #184]	; 0xb8
   141fc:	b1f4      	cbz	r4, 1423c <ble_ll_conn_num_comp_pkts_event_send+0xcc>
        if ((connsm->conn_state != BLE_LL_CONN_STATE_IDLE) &&
   141fe:	79a3      	ldrb	r3, [r4, #6]
   14200:	2b00      	cmp	r3, #0
   14202:	d0f9      	beq.n	141f8 <ble_ll_conn_num_comp_pkts_event_send+0x88>
            (connsm->completed_pkts || !STAILQ_EMPTY(&connsm->conn_txq))) {
   14204:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
        if ((connsm->conn_state != BLE_LL_CONN_STATE_IDLE) &&
   14208:	2b00      	cmp	r3, #0
   1420a:	d1de      	bne.n	141ca <ble_ll_conn_num_comp_pkts_event_send+0x5a>
            (connsm->completed_pkts || !STAILQ_EMPTY(&connsm->conn_txq))) {
   1420c:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   14210:	2b00      	cmp	r3, #0
   14212:	d1da      	bne.n	141ca <ble_ll_conn_num_comp_pkts_event_send+0x5a>
   14214:	e7f0      	b.n	141f8 <ble_ll_conn_num_comp_pkts_event_send+0x88>
                hci_ev = (void *) ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   14216:	2002      	movs	r0, #2
   14218:	f011 ff2a 	bl	26070 <ble_hci_trans_buf_alloc>
                if (!hci_ev) {
   1421c:	4602      	mov	r2, r0
   1421e:	b168      	cbz	r0, 1423c <ble_ll_conn_num_comp_pkts_event_send+0xcc>
                hci_ev->opcode = BLE_HCI_EVCODE_NUM_COMP_PKTS;
   14220:	2313      	movs	r3, #19
   14222:	7003      	strb	r3, [r0, #0]
                hci_ev->length = sizeof(*ev);
   14224:	2301      	movs	r3, #1
   14226:	7043      	strb	r3, [r0, #1]
                ev = (void *)hci_ev->data;
   14228:	1c85      	adds	r5, r0, #2
                ev->count = 0;
   1422a:	2300      	movs	r3, #0
   1422c:	7083      	strb	r3, [r0, #2]
   1422e:	e7cd      	b.n	141cc <ble_ll_conn_num_comp_pkts_event_send+0x5c>
                ble_ll_hci_event_send(hci_ev);
   14230:	4610      	mov	r0, r2
   14232:	f002 f8b1 	bl	16398 <ble_ll_hci_event_send>
                event_sent = 1;
   14236:	2601      	movs	r6, #1
                hci_ev = NULL;
   14238:	2200      	movs	r2, #0
   1423a:	e7dd      	b.n	141f8 <ble_ll_conn_num_comp_pkts_event_send+0x88>
    if (hci_ev) {
   1423c:	b13a      	cbz	r2, 1424e <ble_ll_conn_num_comp_pkts_event_send+0xde>
        ble_ll_hci_event_send(hci_ev);
   1423e:	4610      	mov	r0, r2
   14240:	f002 f8aa 	bl	16398 <ble_ll_hci_event_send>
   14244:	f7f9 fa16 	bl	d674 <os_time_get>
        g_ble_ll_last_num_comp_pkt_evt = ble_npl_time_get();
   14248:	4b02      	ldr	r3, [pc, #8]	; (14254 <ble_ll_conn_num_comp_pkts_event_send+0xe4>)
   1424a:	6018      	str	r0, [r3, #0]
}
   1424c:	bd70      	pop	{r4, r5, r6, pc}
    if (event_sent) {
   1424e:	2e00      	cmp	r6, #0
   14250:	d1f8      	bne.n	14244 <ble_ll_conn_num_comp_pkts_event_send+0xd4>
   14252:	e7fb      	b.n	1424c <ble_ll_conn_num_comp_pkts_event_send+0xdc>
   14254:	20002618 	.word	0x20002618
   14258:	200040d0 	.word	0x200040d0

0001425c <ble_ll_auth_pyld_tmo_event_send>:
{
   1425c:	b510      	push	{r4, lr}
   1425e:	4604      	mov	r4, r0
    if (ble_ll_hci_is_event_enabled(BLE_HCI_EVCODE_AUTH_PYLD_TMO)) {
   14260:	2057      	movs	r0, #87	; 0x57
   14262:	f002 f97d 	bl	16560 <ble_ll_hci_is_event_enabled>
   14266:	b900      	cbnz	r0, 1426a <ble_ll_auth_pyld_tmo_event_send+0xe>
}
   14268:	bd10      	pop	{r4, pc}
        hci_ev = (void *) ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   1426a:	2002      	movs	r0, #2
   1426c:	f011 ff00 	bl	26070 <ble_hci_trans_buf_alloc>
        if (hci_ev) {
   14270:	2800      	cmp	r0, #0
   14272:	d0f9      	beq.n	14268 <ble_ll_auth_pyld_tmo_event_send+0xc>
            hci_ev->opcode = BLE_HCI_EVCODE_AUTH_PYLD_TMO;
   14274:	2257      	movs	r2, #87	; 0x57
   14276:	7002      	strb	r2, [r0, #0]
            hci_ev->length = sizeof(*ev);
   14278:	2202      	movs	r2, #2
   1427a:	7042      	strb	r2, [r0, #1]
            ev->conn_handle = htole16(connsm->conn_handle);
   1427c:	88a2      	ldrh	r2, [r4, #4]
   1427e:	8042      	strh	r2, [r0, #2]
            ble_ll_hci_event_send(hci_ev);
   14280:	f002 f88a 	bl	16398 <ble_ll_hci_event_send>
}
   14284:	e7f0      	b.n	14268 <ble_ll_auth_pyld_tmo_event_send+0xc>

00014286 <ble_ll_disconn_comp_event_send>:
{
   14286:	b538      	push	{r3, r4, r5, lr}
   14288:	4605      	mov	r5, r0
   1428a:	460c      	mov	r4, r1
    if (ble_ll_hci_is_event_enabled(BLE_HCI_EVCODE_DISCONN_CMP)) {
   1428c:	2005      	movs	r0, #5
   1428e:	f002 f967 	bl	16560 <ble_ll_hci_is_event_enabled>
   14292:	b900      	cbnz	r0, 14296 <ble_ll_disconn_comp_event_send+0x10>
}
   14294:	bd38      	pop	{r3, r4, r5, pc}
        hci_ev = (void *) ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   14296:	2002      	movs	r0, #2
   14298:	f011 feea 	bl	26070 <ble_hci_trans_buf_alloc>
        if (hci_ev) {
   1429c:	2800      	cmp	r0, #0
   1429e:	d0f9      	beq.n	14294 <ble_ll_disconn_comp_event_send+0xe>
            hci_ev->opcode = BLE_HCI_EVCODE_DISCONN_CMP;
   142a0:	2205      	movs	r2, #5
   142a2:	7002      	strb	r2, [r0, #0]
            hci_ev->length = sizeof(*ev);
   142a4:	2204      	movs	r2, #4
   142a6:	7042      	strb	r2, [r0, #1]
            ev->status = BLE_ERR_SUCCESS;
   142a8:	2200      	movs	r2, #0
   142aa:	7082      	strb	r2, [r0, #2]
            ev->conn_handle = htole16(connsm->conn_handle);
   142ac:	88aa      	ldrh	r2, [r5, #4]
   142ae:	f8a0 2003 	strh.w	r2, [r0, #3]
            ev->reason = reason;
   142b2:	7144      	strb	r4, [r0, #5]
            ble_ll_hci_event_send(hci_ev);
   142b4:	f002 f870 	bl	16398 <ble_ll_hci_event_send>
}
   142b8:	e7ec      	b.n	14294 <ble_ll_disconn_comp_event_send+0xe>
	...

000142bc <ble_ll_conn_create>:
{
   142bc:	b510      	push	{r4, lr}
   142be:	b088      	sub	sp, #32
    struct hci_create_conn hcc = { 0 };
   142c0:	2300      	movs	r3, #0
   142c2:	9301      	str	r3, [sp, #4]
   142c4:	9302      	str	r3, [sp, #8]
   142c6:	9303      	str	r3, [sp, #12]
   142c8:	9304      	str	r3, [sp, #16]
   142ca:	9305      	str	r3, [sp, #20]
   142cc:	9306      	str	r3, [sp, #24]
   142ce:	f8ad 301c 	strh.w	r3, [sp, #28]
    if (len < sizeof(*cmd)) {
   142d2:	2918      	cmp	r1, #24
   142d4:	f240 8082 	bls.w	143dc <ble_ll_conn_create+0x120>
    if (g_ble_ll_conn_create_sm) {
   142d8:	4b49      	ldr	r3, [pc, #292]	; (14400 <ble_ll_conn_create+0x144>)
   142da:	681b      	ldr	r3, [r3, #0]
   142dc:	b11b      	cbz	r3, 142e6 <ble_ll_conn_create+0x2a>
        return BLE_ERR_CMD_DISALLOWED;
   142de:	230c      	movs	r3, #12
}
   142e0:	4618      	mov	r0, r3
   142e2:	b008      	add	sp, #32
   142e4:	bd10      	pop	{r4, pc}
   142e6:	4604      	mov	r4, r0
    if (ble_ll_scan_enabled()) {
   142e8:	f004 f936 	bl	18558 <ble_ll_scan_enabled>
   142ec:	2800      	cmp	r0, #0
   142ee:	d177      	bne.n	143e0 <ble_ll_conn_create+0x124>
    hcc.scan_itvl = le16toh(cmd->scan_itvl);
   142f0:	8820      	ldrh	r0, [r4, #0]
   142f2:	f8ad 0004 	strh.w	r0, [sp, #4]
    hcc.scan_window = le16toh(cmd->scan_window);
   142f6:	8861      	ldrh	r1, [r4, #2]
   142f8:	f8ad 1006 	strh.w	r1, [sp, #6]
    rc = ble_ll_conn_hci_chk_scan_params(hcc.scan_itvl, hcc.scan_window);
   142fc:	f7ff fde4 	bl	13ec8 <ble_ll_conn_hci_chk_scan_params>
    if (rc) {
   14300:	2800      	cmp	r0, #0
   14302:	d16f      	bne.n	143e4 <ble_ll_conn_create+0x128>
    hcc.filter_policy = cmd->filter_policy;
   14304:	7923      	ldrb	r3, [r4, #4]
   14306:	f88d 3008 	strb.w	r3, [sp, #8]
    if (hcc.filter_policy > BLE_HCI_INITIATOR_FILT_POLICY_MAX) {
   1430a:	2b01      	cmp	r3, #1
   1430c:	d86c      	bhi.n	143e8 <ble_ll_conn_create+0x12c>
    if (hcc.filter_policy == 0) {
   1430e:	b963      	cbnz	r3, 1432a <ble_ll_conn_create+0x6e>
        hcc.peer_addr_type = cmd->peer_addr_type;
   14310:	7963      	ldrb	r3, [r4, #5]
   14312:	f88d 3009 	strb.w	r3, [sp, #9]
        if (hcc.peer_addr_type > BLE_HCI_CONN_PEER_ADDR_MAX) {
   14316:	2b03      	cmp	r3, #3
   14318:	d868      	bhi.n	143ec <ble_ll_conn_create+0x130>
        memcpy(&hcc.peer_addr, cmd->peer_addr, BLE_DEV_ADDR_LEN);
   1431a:	4623      	mov	r3, r4
   1431c:	f853 2f06 	ldr.w	r2, [r3, #6]!
   14320:	f8cd 200a 	str.w	r2, [sp, #10]
   14324:	889b      	ldrh	r3, [r3, #4]
   14326:	f8ad 300e 	strh.w	r3, [sp, #14]
    hcc.own_addr_type = cmd->own_addr_type;
   1432a:	7b23      	ldrb	r3, [r4, #12]
   1432c:	f88d 3010 	strb.w	r3, [sp, #16]
    if (hcc.own_addr_type > BLE_HCI_ADV_OWN_ADDR_MAX) {
   14330:	2b03      	cmp	r3, #3
   14332:	d85d      	bhi.n	143f0 <ble_ll_conn_create+0x134>
    hcc.conn_itvl_min = le16toh(cmd->min_conn_itvl);
   14334:	f8b4 000d 	ldrh.w	r0, [r4, #13]
   14338:	f8ad 0012 	strh.w	r0, [sp, #18]
    hcc.conn_itvl_max = le16toh(cmd->max_conn_itvl);
   1433c:	f8b4 100f 	ldrh.w	r1, [r4, #15]
   14340:	f8ad 1014 	strh.w	r1, [sp, #20]
    hcc.conn_latency = le16toh(cmd->conn_latency);
   14344:	f8b4 2011 	ldrh.w	r2, [r4, #17]
   14348:	f8ad 2016 	strh.w	r2, [sp, #22]
    hcc.supervision_timeout = le16toh(cmd->tmo);
   1434c:	f8b4 3013 	ldrh.w	r3, [r4, #19]
   14350:	f8ad 3018 	strh.w	r3, [sp, #24]
    rc = ble_ll_conn_hci_chk_conn_params(hcc.conn_itvl_min,
   14354:	f7ff fde4 	bl	13f20 <ble_ll_conn_hci_chk_conn_params>
    if (rc) {
   14358:	4603      	mov	r3, r0
   1435a:	2800      	cmp	r0, #0
   1435c:	d1c0      	bne.n	142e0 <ble_ll_conn_create+0x24>
    hcc.min_ce_len = le16toh(cmd->min_ce);
   1435e:	f8b4 3015 	ldrh.w	r3, [r4, #21]
   14362:	b299      	uxth	r1, r3
   14364:	f8ad 301a 	strh.w	r3, [sp, #26]
    hcc.max_ce_len = le16toh(cmd->max_ce);
   14368:	f8b4 3017 	ldrh.w	r3, [r4, #23]
   1436c:	b29a      	uxth	r2, r3
   1436e:	f8ad 301c 	strh.w	r3, [sp, #28]
    if (hcc.min_ce_len > hcc.max_ce_len) {
   14372:	4291      	cmp	r1, r2
   14374:	d83e      	bhi.n	143f4 <ble_ll_conn_create+0x138>
    if (ble_ll_init_alloc_conn_comp_ev()) {
   14376:	f7ff fdbf 	bl	13ef8 <ble_ll_init_alloc_conn_comp_ev>
   1437a:	2800      	cmp	r0, #0
   1437c:	d13c      	bne.n	143f8 <ble_ll_conn_create+0x13c>
    connsm = ble_ll_conn_sm_get();
   1437e:	f7fe fab1 	bl	128e4 <ble_ll_conn_sm_get>
    if (connsm == NULL) {
   14382:	4604      	mov	r4, r0
   14384:	2800      	cmp	r0, #0
   14386:	d039      	beq.n	143fc <ble_ll_conn_create+0x140>
    ble_ll_conn_master_init(connsm, &hcc);
   14388:	a901      	add	r1, sp, #4
   1438a:	f7fe fccc 	bl	12d26 <ble_ll_conn_master_init>
    ble_ll_conn_sm_new(connsm);
   1438e:	4620      	mov	r0, r4
   14390:	f7fe fcfc 	bl	12d8c <ble_ll_conn_sm_new>
    rc = ble_ll_scan_initiator_start(&hcc, &connsm->scansm);
   14394:	f504 71ce 	add.w	r1, r4, #412	; 0x19c
   14398:	a801      	add	r0, sp, #4
   1439a:	f004 f8b1 	bl	18500 <ble_ll_scan_initiator_start>
    if (rc) {
   1439e:	4603      	mov	r3, r0
   143a0:	b1c8      	cbz	r0, 143d6 <ble_ll_conn_create+0x11a>
        SLIST_REMOVE(&g_ble_ll_conn_active_list,connsm,ble_ll_conn_sm,act_sle);
   143a2:	4a18      	ldr	r2, [pc, #96]	; (14404 <ble_ll_conn_create+0x148>)
   143a4:	6811      	ldr	r1, [r2, #0]
   143a6:	42a1      	cmp	r1, r4
   143a8:	d104      	bne.n	143b4 <ble_ll_conn_create+0xf8>
   143aa:	f8d1 10b8 	ldr.w	r1, [r1, #184]	; 0xb8
   143ae:	6011      	str	r1, [r2, #0]
   143b0:	e008      	b.n	143c4 <ble_ll_conn_create+0x108>
   143b2:	4611      	mov	r1, r2
   143b4:	f8d1 20b8 	ldr.w	r2, [r1, #184]	; 0xb8
   143b8:	42a2      	cmp	r2, r4
   143ba:	d1fa      	bne.n	143b2 <ble_ll_conn_create+0xf6>
   143bc:	f8d2 20b8 	ldr.w	r2, [r2, #184]	; 0xb8
   143c0:	f8c1 20b8 	str.w	r2, [r1, #184]	; 0xb8
        STAILQ_INSERT_TAIL(&g_ble_ll_conn_free_list, connsm, free_stqe);
   143c4:	2200      	movs	r2, #0
   143c6:	f8c4 20b8 	str.w	r2, [r4, #184]	; 0xb8
   143ca:	4a0f      	ldr	r2, [pc, #60]	; (14408 <ble_ll_conn_create+0x14c>)
   143cc:	6851      	ldr	r1, [r2, #4]
   143ce:	600c      	str	r4, [r1, #0]
   143d0:	34b8      	adds	r4, #184	; 0xb8
   143d2:	6054      	str	r4, [r2, #4]
   143d4:	e784      	b.n	142e0 <ble_ll_conn_create+0x24>
        g_ble_ll_conn_create_sm = connsm;
   143d6:	4a0a      	ldr	r2, [pc, #40]	; (14400 <ble_ll_conn_create+0x144>)
   143d8:	6014      	str	r4, [r2, #0]
   143da:	e781      	b.n	142e0 <ble_ll_conn_create+0x24>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   143dc:	2312      	movs	r3, #18
   143de:	e77f      	b.n	142e0 <ble_ll_conn_create+0x24>
        return BLE_ERR_CMD_DISALLOWED;
   143e0:	230c      	movs	r3, #12
   143e2:	e77d      	b.n	142e0 <ble_ll_conn_create+0x24>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   143e4:	2312      	movs	r3, #18
   143e6:	e77b      	b.n	142e0 <ble_ll_conn_create+0x24>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   143e8:	2312      	movs	r3, #18
   143ea:	e779      	b.n	142e0 <ble_ll_conn_create+0x24>
            return BLE_ERR_INV_HCI_CMD_PARMS;
   143ec:	2312      	movs	r3, #18
   143ee:	e777      	b.n	142e0 <ble_ll_conn_create+0x24>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   143f0:	2312      	movs	r3, #18
   143f2:	e775      	b.n	142e0 <ble_ll_conn_create+0x24>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   143f4:	2312      	movs	r3, #18
   143f6:	e773      	b.n	142e0 <ble_ll_conn_create+0x24>
        return BLE_ERR_MEM_CAPACITY;
   143f8:	2307      	movs	r3, #7
   143fa:	e771      	b.n	142e0 <ble_ll_conn_create+0x24>
        return BLE_ERR_CONN_LIMIT;
   143fc:	2309      	movs	r3, #9
   143fe:	e76f      	b.n	142e0 <ble_ll_conn_create+0x24>
   14400:	20003ea8 	.word	0x20003ea8
   14404:	200040d0 	.word	0x200040d0
   14408:	20003ea0 	.word	0x20003ea0

0001440c <ble_ll_conn_hci_read_rem_features>:
    if (len != sizeof(*cmd)) {
   1440c:	2902      	cmp	r1, #2
   1440e:	d001      	beq.n	14414 <ble_ll_conn_hci_read_rem_features+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   14410:	2012      	movs	r0, #18
}
   14412:	4770      	bx	lr
{
   14414:	b510      	push	{r4, lr}
    connsm = ble_ll_conn_find_active_conn(le16toh(cmd->conn_handle));
   14416:	8800      	ldrh	r0, [r0, #0]
   14418:	f7fe fa52 	bl	128c0 <ble_ll_conn_find_active_conn>
    if (!connsm) {
   1441c:	4604      	mov	r4, r0
   1441e:	b308      	cbz	r0, 14464 <ble_ll_conn_hci_read_rem_features+0x58>
    if (connsm->csmflags.cfbit.pending_hci_rd_features) {
   14420:	78c3      	ldrb	r3, [r0, #3]
   14422:	f013 0f10 	tst.w	r3, #16
   14426:	d11f      	bne.n	14468 <ble_ll_conn_hci_read_rem_features+0x5c>
    if (!connsm->csmflags.cfbit.rxd_features &&
   14428:	f013 0f08 	tst.w	r3, #8
   1442c:	d10b      	bne.n	14446 <ble_ll_conn_hci_read_rem_features+0x3a>
                !IS_PENDING_CTRL_PROC(connsm, BLE_LL_CTRL_PROC_FEATURE_XCHG)) {
   1442e:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
    if (!connsm->csmflags.cfbit.rxd_features &&
   14432:	f013 0f08 	tst.w	r3, #8
   14436:	d106      	bne.n	14446 <ble_ll_conn_hci_read_rem_features+0x3a>
        if ((connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) &&
   14438:	79c3      	ldrb	r3, [r0, #7]
   1443a:	2b02      	cmp	r3, #2
   1443c:	d009      	beq.n	14452 <ble_ll_conn_hci_read_rem_features+0x46>
        ble_ll_ctrl_proc_start(connsm, BLE_LL_CTRL_PROC_FEATURE_XCHG);
   1443e:	2103      	movs	r1, #3
   14440:	4620      	mov	r0, r4
   14442:	f001 f81d 	bl	15480 <ble_ll_ctrl_proc_start>
    connsm->csmflags.cfbit.pending_hci_rd_features = 1;
   14446:	78e3      	ldrb	r3, [r4, #3]
   14448:	f043 0310 	orr.w	r3, r3, #16
   1444c:	70e3      	strb	r3, [r4, #3]
    return BLE_ERR_SUCCESS;
   1444e:	2000      	movs	r0, #0
}
   14450:	bd10      	pop	{r4, pc}
            !(ble_ll_read_supp_features() & BLE_LL_FEAT_SLAVE_INIT)) {
   14452:	f7fc facf 	bl	109f4 <ble_ll_read_supp_features>
   14456:	f000 0208 	and.w	r2, r0, #8
   1445a:	2300      	movs	r3, #0
        if ((connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) &&
   1445c:	4313      	orrs	r3, r2
   1445e:	d1ee      	bne.n	1443e <ble_ll_conn_hci_read_rem_features+0x32>
                return BLE_ERR_CMD_DISALLOWED;
   14460:	200c      	movs	r0, #12
   14462:	e7f5      	b.n	14450 <ble_ll_conn_hci_read_rem_features+0x44>
        return BLE_ERR_UNK_CONN_ID;
   14464:	2002      	movs	r0, #2
   14466:	e7f3      	b.n	14450 <ble_ll_conn_hci_read_rem_features+0x44>
        return BLE_ERR_CMD_DISALLOWED;
   14468:	200c      	movs	r0, #12
   1446a:	e7f1      	b.n	14450 <ble_ll_conn_hci_read_rem_features+0x44>

0001446c <ble_ll_conn_hci_update>:
{
   1446c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14470:	4605      	mov	r5, r0
    handle = le16toh(cmd->conn_handle);
   14472:	8806      	ldrh	r6, [r0, #0]
    connsm = ble_ll_conn_find_active_conn(handle);
   14474:	4630      	mov	r0, r6
   14476:	f7fe fa23 	bl	128c0 <ble_ll_conn_find_active_conn>
    if (!connsm) {
   1447a:	2800      	cmp	r0, #0
   1447c:	d050      	beq.n	14520 <ble_ll_conn_hci_update+0xb4>
   1447e:	4604      	mov	r4, r0
    if (IS_PENDING_CTRL_PROC(connsm, BLE_LL_CTRL_PROC_CONN_PARAM_REQ) ||
   14480:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
   14484:	f013 0f41 	tst.w	r3, #65	; 0x41
   14488:	d14c      	bne.n	14524 <ble_ll_conn_hci_update+0xb8>
    if ((connsm->conn_features & BLE_LL_FEAT_CONN_PARM_REQ) == 0) {
   1448a:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
   1448e:	f013 0f02 	tst.w	r3, #2
   14492:	d105      	bne.n	144a0 <ble_ll_conn_hci_update+0x34>
        if (connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) {
   14494:	79c3      	ldrb	r3, [r0, #7]
   14496:	2b02      	cmp	r3, #2
   14498:	d048      	beq.n	1452c <ble_ll_conn_hci_update+0xc0>
        ctrl_proc = BLE_LL_CTRL_PROC_CONN_UPDATE;
   1449a:	f04f 0800 	mov.w	r8, #0
   1449e:	e001      	b.n	144a4 <ble_ll_conn_hci_update+0x38>
        ctrl_proc = BLE_LL_CTRL_PROC_CONN_PARAM_REQ;
   144a0:	f04f 0806 	mov.w	r8, #6
    if (connsm->csmflags.cfbit.awaiting_host_reply) {
   144a4:	7823      	ldrb	r3, [r4, #0]
   144a6:	f013 0f40 	tst.w	r3, #64	; 0x40
   144aa:	d00c      	beq.n	144c6 <ble_ll_conn_hci_update+0x5a>
        if (connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) {
   144ac:	79e3      	ldrb	r3, [r4, #7]
   144ae:	2b02      	cmp	r3, #2
   144b0:	d03e      	beq.n	14530 <ble_ll_conn_hci_update+0xc4>
            connsm->csmflags.cfbit.awaiting_host_reply = 0;
   144b2:	7823      	ldrb	r3, [r4, #0]
   144b4:	f36f 1386 	bfc	r3, #6, #1
   144b8:	7023      	strb	r3, [r4, #0]
            ble_ll_ctrl_reject_ind_send(connsm, connsm->host_reply_opcode,
   144ba:	2223      	movs	r2, #35	; 0x23
   144bc:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
   144c0:	4620      	mov	r0, r4
   144c2:	f001 fb85 	bl	15bd0 <ble_ll_ctrl_reject_ind_send>
    if (connsm->csmflags.cfbit.chanmap_update_scheduled) {
   144c6:	7863      	ldrb	r3, [r4, #1]
   144c8:	f013 0f10 	tst.w	r3, #16
   144cc:	d002      	beq.n	144d4 <ble_ll_conn_hci_update+0x68>
        if (connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) {
   144ce:	79e3      	ldrb	r3, [r4, #7]
   144d0:	2b02      	cmp	r3, #2
   144d2:	d02f      	beq.n	14534 <ble_ll_conn_hci_update+0xc8>
    hcu->conn_itvl_min = le16toh(cmd->conn_itvl_min);
   144d4:	886b      	ldrh	r3, [r5, #2]
   144d6:	b298      	uxth	r0, r3
   144d8:	f8a4 316a 	strh.w	r3, [r4, #362]	; 0x16a
    hcu->conn_itvl_max = le16toh(cmd->conn_itvl_max);
   144dc:	88ab      	ldrh	r3, [r5, #4]
   144de:	b299      	uxth	r1, r3
   144e0:	f8a4 316c 	strh.w	r3, [r4, #364]	; 0x16c
    hcu->conn_latency = le16toh(cmd->conn_latency);
   144e4:	88eb      	ldrh	r3, [r5, #6]
   144e6:	b29a      	uxth	r2, r3
   144e8:	f8a4 316e 	strh.w	r3, [r4, #366]	; 0x16e
    hcu->supervision_timeout = le16toh(cmd->supervision_timeout);
   144ec:	892f      	ldrh	r7, [r5, #8]
   144ee:	b2bb      	uxth	r3, r7
   144f0:	f8a4 7170 	strh.w	r7, [r4, #368]	; 0x170
    hcu->min_ce_len = le16toh(cmd->min_ce_len);
   144f4:	896f      	ldrh	r7, [r5, #10]
   144f6:	fa1f fc87 	uxth.w	ip, r7
   144fa:	f8a4 7172 	strh.w	r7, [r4, #370]	; 0x172
    hcu->max_ce_len = le16toh(cmd->max_ce_len);
   144fe:	89ad      	ldrh	r5, [r5, #12]
   14500:	b2af      	uxth	r7, r5
   14502:	f8a4 5174 	strh.w	r5, [r4, #372]	; 0x174
    if (hcu->min_ce_len > hcu->max_ce_len) {
   14506:	45bc      	cmp	ip, r7
   14508:	d816      	bhi.n	14538 <ble_ll_conn_hci_update+0xcc>
    rc = ble_ll_conn_hci_chk_conn_params(hcu->conn_itvl_min,
   1450a:	f7ff fd09 	bl	13f20 <ble_ll_conn_hci_chk_conn_params>
    if (!rc) {
   1450e:	4605      	mov	r5, r0
   14510:	b948      	cbnz	r0, 14526 <ble_ll_conn_hci_update+0xba>
        hcu->handle = handle;
   14512:	f8a4 6168 	strh.w	r6, [r4, #360]	; 0x168
        ble_ll_ctrl_proc_start(connsm, ctrl_proc);
   14516:	4641      	mov	r1, r8
   14518:	4620      	mov	r0, r4
   1451a:	f000 ffb1 	bl	15480 <ble_ll_ctrl_proc_start>
   1451e:	e002      	b.n	14526 <ble_ll_conn_hci_update+0xba>
        return BLE_ERR_UNK_CONN_ID;
   14520:	2502      	movs	r5, #2
   14522:	e000      	b.n	14526 <ble_ll_conn_hci_update+0xba>
        return BLE_ERR_CMD_DISALLOWED;
   14524:	250c      	movs	r5, #12
}
   14526:	4628      	mov	r0, r5
   14528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return BLE_ERR_UNSUPP_REM_FEATURE;
   1452c:	251a      	movs	r5, #26
   1452e:	e7fa      	b.n	14526 <ble_ll_conn_hci_update+0xba>
            return BLE_ERR_LMP_COLLISION;
   14530:	2523      	movs	r5, #35	; 0x23
   14532:	e7f8      	b.n	14526 <ble_ll_conn_hci_update+0xba>
            return BLE_ERR_DIFF_TRANS_COLL;
   14534:	252a      	movs	r5, #42	; 0x2a
   14536:	e7f6      	b.n	14526 <ble_ll_conn_hci_update+0xba>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   14538:	2512      	movs	r5, #18
   1453a:	e7f4      	b.n	14526 <ble_ll_conn_hci_update+0xba>

0001453c <ble_ll_conn_hci_param_rr>:
{
   1453c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (len != sizeof(*cmd)) {
   14540:	290e      	cmp	r1, #14
   14542:	d003      	beq.n	1454c <ble_ll_conn_hci_param_rr+0x10>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   14544:	2412      	movs	r4, #18
}
   14546:	4620      	mov	r0, r4
   14548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1454c:	461e      	mov	r6, r3
   1454e:	4615      	mov	r5, r2
   14550:	4604      	mov	r4, r0
    handle = le16toh(cmd->conn_handle);
   14552:	8807      	ldrh	r7, [r0, #0]
   14554:	fa1f f887 	uxth.w	r8, r7
    if ((ble_ll_read_supp_features() & BLE_LL_FEAT_CONN_PARM_REQ) == 0) {
   14558:	f7fc fa4c 	bl	109f4 <ble_ll_read_supp_features>
   1455c:	f000 0202 	and.w	r2, r0, #2
   14560:	2300      	movs	r3, #0
   14562:	4313      	orrs	r3, r2
   14564:	d104      	bne.n	14570 <ble_ll_conn_hci_param_rr+0x34>
        rc = BLE_ERR_UNKNOWN_HCI_CMD;
   14566:	2401      	movs	r4, #1
    rsp->conn_handle = htole16(handle);
   14568:	802f      	strh	r7, [r5, #0]
    *rsplen = sizeof(*rsp);
   1456a:	2302      	movs	r3, #2
   1456c:	7033      	strb	r3, [r6, #0]
    return rc;
   1456e:	e7ea      	b.n	14546 <ble_ll_conn_hci_param_rr+0xa>
    connsm = ble_ll_conn_find_active_conn(handle);
   14570:	4640      	mov	r0, r8
   14572:	f7fe f9a5 	bl	128c0 <ble_ll_conn_find_active_conn>
    if (!connsm) {
   14576:	4680      	mov	r8, r0
   14578:	b388      	cbz	r0, 145de <ble_ll_conn_hci_param_rr+0xa2>
    rc = ble_ll_conn_process_conn_params(cmd, connsm);
   1457a:	4601      	mov	r1, r0
   1457c:	4620      	mov	r0, r4
   1457e:	f7ff fcfa 	bl	13f76 <ble_ll_conn_process_conn_params>
   14582:	4604      	mov	r4, r0
    if (connsm->csmflags.cfbit.awaiting_host_reply) {
   14584:	f898 3000 	ldrb.w	r3, [r8]
   14588:	f013 0f40 	tst.w	r3, #64	; 0x40
   1458c:	d0ec      	beq.n	14568 <ble_ll_conn_hci_param_rr+0x2c>
        if (rc == BLE_ERR_SUCCESS) {
   1458e:	b9c8      	cbnz	r0, 145c4 <ble_ll_conn_hci_param_rr+0x88>
            om = os_msys_get_pkthdr(BLE_LL_CTRL_MAX_PDU_LEN,
   14590:	2110      	movs	r1, #16
   14592:	201b      	movs	r0, #27
   14594:	f7f8 fd97 	bl	d0c6 <os_msys_get_pkthdr>
            if (om) {
   14598:	4681      	mov	r9, r0
   1459a:	b1c8      	cbz	r0, 145d0 <ble_ll_conn_hci_param_rr+0x94>
                dptr = om->om_data;
   1459c:	f8d0 a000 	ldr.w	sl, [r0]
                rsp_opcode = ble_ll_ctrl_conn_param_reply(connsm, dptr,
   145a0:	f508 72c1 	add.w	r2, r8, #386	; 0x182
   145a4:	4651      	mov	r1, sl
   145a6:	4640      	mov	r0, r8
   145a8:	f000 fe5e 	bl	15268 <ble_ll_ctrl_conn_param_reply>
                dptr[0] = rsp_opcode;
   145ac:	f88a 0000 	strb.w	r0, [sl]
                len = g_ble_ll_ctrl_pkt_lengths[rsp_opcode] + 1;
   145b0:	4b0c      	ldr	r3, [pc, #48]	; (145e4 <ble_ll_conn_hci_param_rr+0xa8>)
   145b2:	5c1b      	ldrb	r3, [r3, r0]
   145b4:	3301      	adds	r3, #1
                ble_ll_conn_enqueue_pkt(connsm, om, BLE_LL_LLID_CTRL, len);
   145b6:	b2db      	uxtb	r3, r3
   145b8:	2203      	movs	r2, #3
   145ba:	4649      	mov	r1, r9
   145bc:	4640      	mov	r0, r8
   145be:	f7ff fa53 	bl	13a68 <ble_ll_conn_enqueue_pkt>
   145c2:	e005      	b.n	145d0 <ble_ll_conn_hci_param_rr+0x94>
            ble_ll_ctrl_reject_ind_send(connsm, connsm->host_reply_opcode,
   145c4:	223b      	movs	r2, #59	; 0x3b
   145c6:	f898 1038 	ldrb.w	r1, [r8, #56]	; 0x38
   145ca:	4640      	mov	r0, r8
   145cc:	f001 fb00 	bl	15bd0 <ble_ll_ctrl_reject_ind_send>
        connsm->csmflags.cfbit.awaiting_host_reply = 0;
   145d0:	f898 3000 	ldrb.w	r3, [r8]
   145d4:	f36f 1386 	bfc	r3, #6, #1
   145d8:	f888 3000 	strb.w	r3, [r8]
   145dc:	e7c4      	b.n	14568 <ble_ll_conn_hci_param_rr+0x2c>
        rc = BLE_ERR_UNK_CONN_ID;
   145de:	2402      	movs	r4, #2
   145e0:	e7c2      	b.n	14568 <ble_ll_conn_hci_param_rr+0x2c>
   145e2:	bf00      	nop
   145e4:	0002af9c 	.word	0x0002af9c

000145e8 <ble_ll_conn_hci_param_nrr>:
    if (len != sizeof(*cmd)) {
   145e8:	2903      	cmp	r1, #3
   145ea:	d001      	beq.n	145f0 <ble_ll_conn_hci_param_nrr+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   145ec:	2012      	movs	r0, #18
}
   145ee:	4770      	bx	lr
{
   145f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   145f4:	461e      	mov	r6, r3
   145f6:	4615      	mov	r5, r2
   145f8:	4604      	mov	r4, r0
    handle = le16toh(cmd->conn_handle);
   145fa:	8807      	ldrh	r7, [r0, #0]
   145fc:	fa1f f887 	uxth.w	r8, r7
    if ((ble_ll_read_supp_features() & BLE_LL_FEAT_CONN_PARM_REQ) == 0) {
   14600:	f7fc f9f8 	bl	109f4 <ble_ll_read_supp_features>
   14604:	f000 0202 	and.w	r2, r0, #2
   14608:	2300      	movs	r3, #0
   1460a:	4313      	orrs	r3, r2
   1460c:	d105      	bne.n	1461a <ble_ll_conn_hci_param_nrr+0x32>
        rc = BLE_ERR_UNKNOWN_HCI_CMD;
   1460e:	2001      	movs	r0, #1
    rsp->conn_handle = htole16(handle);
   14610:	802f      	strh	r7, [r5, #0]
    *rsplen = sizeof(*rsp);
   14612:	2302      	movs	r3, #2
   14614:	7033      	strb	r3, [r6, #0]
}
   14616:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    connsm = ble_ll_conn_find_active_conn(handle);
   1461a:	4640      	mov	r0, r8
   1461c:	f7fe f950 	bl	128c0 <ble_ll_conn_find_active_conn>
    if (!connsm) {
   14620:	4680      	mov	r8, r0
   14622:	b190      	cbz	r0, 1464a <ble_ll_conn_hci_param_nrr+0x62>
    if (connsm->csmflags.cfbit.awaiting_host_reply) {
   14624:	7803      	ldrb	r3, [r0, #0]
   14626:	f013 0f40 	tst.w	r3, #64	; 0x40
   1462a:	d101      	bne.n	14630 <ble_ll_conn_hci_param_nrr+0x48>
    rc = BLE_ERR_SUCCESS;
   1462c:	2000      	movs	r0, #0
   1462e:	e7ef      	b.n	14610 <ble_ll_conn_hci_param_nrr+0x28>
        ble_ll_ctrl_reject_ind_send(connsm, connsm->host_reply_opcode,
   14630:	78a2      	ldrb	r2, [r4, #2]
   14632:	f890 1038 	ldrb.w	r1, [r0, #56]	; 0x38
   14636:	f001 facb 	bl	15bd0 <ble_ll_ctrl_reject_ind_send>
        connsm->csmflags.cfbit.awaiting_host_reply = 0;
   1463a:	f898 3000 	ldrb.w	r3, [r8]
   1463e:	f36f 1386 	bfc	r3, #6, #1
   14642:	f888 3000 	strb.w	r3, [r8]
    rc = BLE_ERR_SUCCESS;
   14646:	2000      	movs	r0, #0
   14648:	e7e2      	b.n	14610 <ble_ll_conn_hci_param_nrr+0x28>
        rc = BLE_ERR_UNK_CONN_ID;
   1464a:	2002      	movs	r0, #2
   1464c:	e7e0      	b.n	14610 <ble_ll_conn_hci_param_nrr+0x28>
	...

00014650 <ble_ll_conn_create_cancel>:
 *
 * @return int
 */
int
ble_ll_conn_create_cancel(ble_ll_hci_post_cmd_complete_cb *post_cmd_cb)
{
   14650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14652:	4607      	mov	r7, r0
     * If we receive this command and we have not got a connection
     * create command, we have to return disallowed. The spec does not say
     * what happens if the connection has already been established. We
     * return disallowed as well
     */
    OS_ENTER_CRITICAL(sr);
   14654:	f7f9 f8d0 	bl	d7f8 <os_arch_save_sr>
   14658:	4606      	mov	r6, r0
    connsm = g_ble_ll_conn_create_sm;
   1465a:	4b0d      	ldr	r3, [pc, #52]	; (14690 <ble_ll_conn_create_cancel+0x40>)
   1465c:	681d      	ldr	r5, [r3, #0]
    if (connsm && (connsm->conn_state == BLE_LL_CONN_STATE_IDLE)) {
   1465e:	b195      	cbz	r5, 14686 <ble_ll_conn_create_cancel+0x36>
   14660:	79ab      	ldrb	r3, [r5, #6]
   14662:	b993      	cbnz	r3, 1468a <ble_ll_conn_create_cancel+0x3a>
        /* stop scanning and end the connection event */
        g_ble_ll_conn_create_sm = NULL;
   14664:	2400      	movs	r4, #0
   14666:	4b0a      	ldr	r3, [pc, #40]	; (14690 <ble_ll_conn_create_cancel+0x40>)
   14668:	601c      	str	r4, [r3, #0]
        ble_ll_scan_sm_stop(1);
   1466a:	2001      	movs	r0, #1
   1466c:	f003 fcbc 	bl	17fe8 <ble_ll_scan_sm_stop>
        ble_ll_conn_end(connsm, BLE_ERR_UNK_CONN_ID);
   14670:	2102      	movs	r1, #2
   14672:	4628      	mov	r0, r5
   14674:	f7fe fc46 	bl	12f04 <ble_ll_conn_end>

        *post_cmd_cb = ble_ll_conn_hci_cancel_conn_complete_event;
   14678:	4b06      	ldr	r3, [pc, #24]	; (14694 <ble_ll_conn_create_cancel+0x44>)
   1467a:	603b      	str	r3, [r7, #0]
        rc = BLE_ERR_SUCCESS;
    } else {
        /* If we are not attempting to create a connection*/
        rc = BLE_ERR_CMD_DISALLOWED;
    }
    OS_EXIT_CRITICAL(sr);
   1467c:	4630      	mov	r0, r6
   1467e:	f7f9 f8c1 	bl	d804 <os_arch_restore_sr>

    return rc;
}
   14682:	4620      	mov	r0, r4
   14684:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rc = BLE_ERR_CMD_DISALLOWED;
   14686:	240c      	movs	r4, #12
   14688:	e7f8      	b.n	1467c <ble_ll_conn_create_cancel+0x2c>
   1468a:	240c      	movs	r4, #12
   1468c:	e7f6      	b.n	1467c <ble_ll_conn_create_cancel+0x2c>
   1468e:	bf00      	nop
   14690:	20003ea8 	.word	0x20003ea8
   14694:	0001413d 	.word	0x0001413d

00014698 <ble_ll_conn_hci_disconnect_cmd>:
    int rc;
    uint16_t handle;
    struct ble_ll_conn_sm *connsm;
    const struct ble_hci_lc_disconnect_cp *cmd = (const void *) cmdbuf;

    if (len != sizeof (*cmd)) {
   14698:	2903      	cmp	r1, #3
   1469a:	d143      	bne.n	14724 <ble_ll_conn_hci_disconnect_cmd+0x8c>
        return BLE_ERR_INV_HCI_CMD_PARMS;
    }

    /* Check for valid parameters */
    handle = le16toh(cmd->conn_handle);
   1469c:	8802      	ldrh	r2, [r0, #0]

    rc = BLE_ERR_INV_HCI_CMD_PARMS;
    if (handle <= BLE_LL_CONN_MAX_CONN_HANDLE) {
   1469e:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
   146a2:	d241      	bcs.n	14728 <ble_ll_conn_hci_disconnect_cmd+0x90>
        /* Make sure reason is valid */
        switch (cmd->reason) {
   146a4:	7883      	ldrb	r3, [r0, #2]
   146a6:	3b05      	subs	r3, #5
   146a8:	2b36      	cmp	r3, #54	; 0x36
   146aa:	d83f      	bhi.n	1472c <ble_ll_conn_hci_disconnect_cmd+0x94>
   146ac:	e8df f003 	tbb	[pc, r3]
   146b0:	3e3e3e1c 	.word	0x3e3e3e1c
   146b4:	3e3e3e3e 	.word	0x3e3e3e3e
   146b8:	3e3e3e3e 	.word	0x3e3e3e3e
   146bc:	1c1c3e3e 	.word	0x1c1c3e3e
   146c0:	3e3e3e1c 	.word	0x3e3e3e1c
   146c4:	3e3e1c3e 	.word	0x3e3e1c3e
   146c8:	3e3e3e3e 	.word	0x3e3e3e3e
   146cc:	3e3e3e3e 	.word	0x3e3e3e3e
   146d0:	3e3e3e3e 	.word	0x3e3e3e3e
   146d4:	3e3e3e1c 	.word	0x3e3e3e1c
   146d8:	3e3e3e3e 	.word	0x3e3e3e3e
   146dc:	3e3e3e3e 	.word	0x3e3e3e3e
   146e0:	3e3e3e3e 	.word	0x3e3e3e3e
   146e4:	3e3e      	.short	0x3e3e
   146e6:	1c          	.byte	0x1c
   146e7:	00          	.byte	0x00
{
   146e8:	b510      	push	{r4, lr}
   146ea:	4604      	mov	r4, r0
        case BLE_ERR_RD_CONN_TERM_RESRCS:
        case BLE_ERR_RD_CONN_TERM_PWROFF:
        case BLE_ERR_UNSUPP_REM_FEATURE:
        case BLE_ERR_UNIT_KEY_PAIRING:
        case BLE_ERR_CONN_PARMS:
            connsm = ble_ll_conn_find_active_conn(handle);
   146ec:	4610      	mov	r0, r2
   146ee:	f7fe f8e7 	bl	128c0 <ble_ll_conn_find_active_conn>
            if (connsm) {
   146f2:	b1e8      	cbz	r0, 14730 <ble_ll_conn_hci_disconnect_cmd+0x98>
                /* Do not allow command if we are in process of disconnecting */
                if (connsm->disconnect_reason) {
   146f4:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
   146f8:	b9e2      	cbnz	r2, 14734 <ble_ll_conn_hci_disconnect_cmd+0x9c>
                    rc = BLE_ERR_CMD_DISALLOWED;
                } else {
                    /* This control procedure better not be pending! */
                    BLE_LL_ASSERT(CONN_F_TERMINATE_STARTED(connsm) == 0);
   146fa:	f990 2000 	ldrsb.w	r2, [r0]
   146fe:	2a00      	cmp	r2, #0
   14700:	db06      	blt.n	14710 <ble_ll_conn_hci_disconnect_cmd+0x78>

                    /* Record the disconnect reason */
                    connsm->disconnect_reason = cmd->reason;
   14702:	78a2      	ldrb	r2, [r4, #2]
   14704:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c

                    /* Start this control procedure */
                    ble_ll_ctrl_terminate_start(connsm);
   14708:	f000 fe94 	bl	15434 <ble_ll_ctrl_terminate_start>

                    rc = BLE_ERR_SUCCESS;
   1470c:	2000      	movs	r0, #0
            break;
        }
    }

    return rc;
}
   1470e:	bd10      	pop	{r4, pc}
                    BLE_LL_ASSERT(CONN_F_TERMINATE_STARTED(connsm) == 0);
   14710:	f7f7 fd6a 	bl	c1e8 <hal_debugger_connected>
   14714:	b100      	cbz	r0, 14718 <ble_ll_conn_hci_disconnect_cmd+0x80>
   14716:	be01      	bkpt	0x0001
   14718:	2300      	movs	r3, #0
   1471a:	461a      	mov	r2, r3
   1471c:	4619      	mov	r1, r3
   1471e:	4618      	mov	r0, r3
   14720:	f7f7 ff9c 	bl	c65c <__assert_func>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   14724:	2012      	movs	r0, #18
   14726:	4770      	bx	lr
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   14728:	2012      	movs	r0, #18
   1472a:	4770      	bx	lr
   1472c:	2012      	movs	r0, #18
}
   1472e:	4770      	bx	lr
                rc = BLE_ERR_UNK_CONN_ID;
   14730:	2002      	movs	r0, #2
   14732:	e7ec      	b.n	1470e <ble_ll_conn_hci_disconnect_cmd+0x76>
                    rc = BLE_ERR_CMD_DISALLOWED;
   14734:	200c      	movs	r0, #12
   14736:	e7ea      	b.n	1470e <ble_ll_conn_hci_disconnect_cmd+0x76>

00014738 <ble_ll_conn_hci_rd_rem_ver_cmd>:
ble_ll_conn_hci_rd_rem_ver_cmd(const uint8_t *cmdbuf, uint8_t len)
{
    struct ble_ll_conn_sm *connsm;
    const struct ble_hci_rd_rem_ver_info_cp *cmd = (const void *) cmdbuf;

    if (len != sizeof(*cmd)) {
   14738:	2902      	cmp	r1, #2
   1473a:	d001      	beq.n	14740 <ble_ll_conn_hci_rd_rem_ver_cmd+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1473c:	2012      	movs	r0, #18
    } else {
        connsm->pending_ctrl_procs |= (1 << BLE_LL_CTRL_PROC_VERSION_XCHG);
    }

    return BLE_ERR_SUCCESS;
}
   1473e:	4770      	bx	lr
{
   14740:	b508      	push	{r3, lr}
    connsm = ble_ll_conn_find_active_conn(le16toh(cmd->conn_handle));
   14742:	8800      	ldrh	r0, [r0, #0]
   14744:	f7fe f8bc 	bl	128c0 <ble_ll_conn_find_active_conn>
    if (!connsm) {
   14748:	b198      	cbz	r0, 14772 <ble_ll_conn_hci_rd_rem_ver_cmd+0x3a>
    if (IS_PENDING_CTRL_PROC(connsm, BLE_LL_CTRL_PROC_VERSION_XCHG)) {
   1474a:	f8b0 2048 	ldrh.w	r2, [r0, #72]	; 0x48
   1474e:	f012 0f10 	tst.w	r2, #16
   14752:	d110      	bne.n	14776 <ble_ll_conn_hci_rd_rem_ver_cmd+0x3e>
    if (!connsm->csmflags.cfbit.version_ind_sent) {
   14754:	7841      	ldrb	r1, [r0, #1]
   14756:	f011 0f04 	tst.w	r1, #4
   1475a:	d005      	beq.n	14768 <ble_ll_conn_hci_rd_rem_ver_cmd+0x30>
        connsm->pending_ctrl_procs |= (1 << BLE_LL_CTRL_PROC_VERSION_XCHG);
   1475c:	f042 0210 	orr.w	r2, r2, #16
   14760:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
    return BLE_ERR_SUCCESS;
   14764:	2000      	movs	r0, #0
}
   14766:	bd08      	pop	{r3, pc}
        ble_ll_ctrl_proc_start(connsm, BLE_LL_CTRL_PROC_VERSION_XCHG);
   14768:	2104      	movs	r1, #4
   1476a:	f000 fe89 	bl	15480 <ble_ll_ctrl_proc_start>
    return BLE_ERR_SUCCESS;
   1476e:	2000      	movs	r0, #0
   14770:	e7f9      	b.n	14766 <ble_ll_conn_hci_rd_rem_ver_cmd+0x2e>
        return BLE_ERR_UNK_CONN_ID;
   14772:	2002      	movs	r0, #2
   14774:	e7f7      	b.n	14766 <ble_ll_conn_hci_rd_rem_ver_cmd+0x2e>
        return BLE_ERR_CMD_DISALLOWED;
   14776:	200c      	movs	r0, #12
   14778:	e7f5      	b.n	14766 <ble_ll_conn_hci_rd_rem_ver_cmd+0x2e>

0001477a <ble_ll_conn_hci_rd_rssi>:
    const struct ble_hci_rd_rssi_cp *cmd = (const void *) cmdbuf;
    struct ble_hci_rd_rssi_rp *rsp = (void *) rspbuf;
    struct ble_ll_conn_sm *connsm;
    int rc;

    if (len != sizeof(*cmd)) {
   1477a:	2902      	cmp	r1, #2
   1477c:	d001      	beq.n	14782 <ble_ll_conn_hci_rd_rssi+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1477e:	2012      	movs	r0, #18
        rc = BLE_ERR_SUCCESS;
    }

    *rsplen = sizeof(*rsp);
    return rc;
}
   14780:	4770      	bx	lr
{
   14782:	b538      	push	{r3, r4, r5, lr}
   14784:	461d      	mov	r5, r3
   14786:	4614      	mov	r4, r2
    rsp->handle = cmd->handle;
   14788:	8803      	ldrh	r3, [r0, #0]
   1478a:	8013      	strh	r3, [r2, #0]
    connsm = ble_ll_conn_find_active_conn(le16toh(cmd->handle));
   1478c:	8800      	ldrh	r0, [r0, #0]
   1478e:	f7fe f897 	bl	128c0 <ble_ll_conn_find_active_conn>
    if (!connsm) {
   14792:	b130      	cbz	r0, 147a2 <ble_ll_conn_hci_rd_rssi+0x28>
        rsp->rssi = connsm->conn_rssi;
   14794:	f990 3008 	ldrsb.w	r3, [r0, #8]
   14798:	70a3      	strb	r3, [r4, #2]
        rc = BLE_ERR_SUCCESS;
   1479a:	2000      	movs	r0, #0
    *rsplen = sizeof(*rsp);
   1479c:	2303      	movs	r3, #3
   1479e:	702b      	strb	r3, [r5, #0]
}
   147a0:	bd38      	pop	{r3, r4, r5, pc}
        rsp->rssi = 127;
   147a2:	237f      	movs	r3, #127	; 0x7f
   147a4:	70a3      	strb	r3, [r4, #2]
        rc = BLE_ERR_UNK_CONN_ID;
   147a6:	2002      	movs	r0, #2
   147a8:	e7f8      	b.n	1479c <ble_ll_conn_hci_rd_rssi+0x22>

000147aa <ble_ll_conn_hci_rd_chan_map>:
    struct ble_hci_le_rd_chan_map_rp *rsp = (void *) rspbuf;
    struct ble_ll_conn_sm *connsm;
    uint16_t handle;
    int rc;

    if (len != sizeof(*cmd)) {
   147aa:	2902      	cmp	r1, #2
   147ac:	d001      	beq.n	147b2 <ble_ll_conn_hci_rd_chan_map+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   147ae:	2012      	movs	r0, #18

    rsp->conn_handle = htole16(handle);

    *rsplen = sizeof(*rsp);
    return rc;
}
   147b0:	4770      	bx	lr
{
   147b2:	b570      	push	{r4, r5, r6, lr}
   147b4:	461d      	mov	r5, r3
   147b6:	4614      	mov	r4, r2
    handle = le16toh(cmd->conn_handle);
   147b8:	8806      	ldrh	r6, [r0, #0]
    connsm = ble_ll_conn_find_active_conn(handle);
   147ba:	4630      	mov	r0, r6
   147bc:	f7fe f880 	bl	128c0 <ble_ll_conn_find_active_conn>
    if (!connsm) {
   147c0:	4602      	mov	r2, r0
   147c2:	b170      	cbz	r0, 147e2 <ble_ll_conn_hci_rd_chan_map+0x38>
        if (connsm->csmflags.cfbit.chanmap_update_scheduled) {
   147c4:	7843      	ldrb	r3, [r0, #1]
   147c6:	f013 0f10 	tst.w	r3, #16
   147ca:	d010      	beq.n	147ee <ble_ll_conn_hci_rd_chan_map+0x44>
            memcpy(rsp->chan_map, connsm->req_chanmap, BLE_LL_CONN_CHMAP_LEN);
   147cc:	f852 3f25 	ldr.w	r3, [r2, #37]!
   147d0:	f8c4 3002 	str.w	r3, [r4, #2]
   147d4:	7913      	ldrb	r3, [r2, #4]
   147d6:	71a3      	strb	r3, [r4, #6]
        rc = BLE_ERR_SUCCESS;
   147d8:	2000      	movs	r0, #0
    rsp->conn_handle = htole16(handle);
   147da:	8026      	strh	r6, [r4, #0]
    *rsplen = sizeof(*rsp);
   147dc:	2307      	movs	r3, #7
   147de:	702b      	strb	r3, [r5, #0]
}
   147e0:	bd70      	pop	{r4, r5, r6, pc}
        memset(rsp->chan_map, 0, sizeof(rsp->chan_map));
   147e2:	2200      	movs	r2, #0
   147e4:	f8c4 2002 	str.w	r2, [r4, #2]
   147e8:	71a2      	strb	r2, [r4, #6]
        rc = BLE_ERR_UNK_CONN_ID;
   147ea:	2002      	movs	r0, #2
   147ec:	e7f5      	b.n	147da <ble_ll_conn_hci_rd_chan_map+0x30>
            memcpy(rsp->chan_map, connsm->chanmap, BLE_LL_CONN_CHMAP_LEN);
   147ee:	f852 3f20 	ldr.w	r3, [r2, #32]!
   147f2:	f8c4 3002 	str.w	r3, [r4, #2]
   147f6:	7913      	ldrb	r3, [r2, #4]
   147f8:	71a3      	strb	r3, [r4, #6]
        rc = BLE_ERR_SUCCESS;
   147fa:	2000      	movs	r0, #0
   147fc:	e7ed      	b.n	147da <ble_ll_conn_hci_rd_chan_map+0x30>

000147fe <ble_ll_conn_hci_set_chan_class>:
ble_ll_conn_hci_set_chan_class(const uint8_t *cmdbuf, uint8_t len)
{
    const struct ble_hci_le_set_host_chan_class_cp *cmd = (const void *) cmdbuf;
    uint8_t num_used_chans;

    if (len != sizeof(*cmd)) {
   147fe:	2905      	cmp	r1, #5
   14800:	d001      	beq.n	14806 <ble_ll_conn_hci_set_chan_class+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   14802:	2012      	movs	r0, #18
    }

    /* Set the host channel mask */
    ble_ll_conn_set_global_chanmap(num_used_chans, cmd->chan_map);
    return BLE_ERR_SUCCESS;
}
   14804:	4770      	bx	lr
{
   14806:	b510      	push	{r4, lr}
   14808:	4604      	mov	r4, r0
    num_used_chans = ble_ll_utils_calc_num_used_chans(cmd->chan_map);
   1480a:	f004 fc28 	bl	1905e <ble_ll_utils_calc_num_used_chans>
    if ((num_used_chans < 2) || ((cmd->chan_map[4] & 0xe0) != 0)) {
   1480e:	2801      	cmp	r0, #1
   14810:	d908      	bls.n	14824 <ble_ll_conn_hci_set_chan_class+0x26>
   14812:	7923      	ldrb	r3, [r4, #4]
   14814:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   14818:	d106      	bne.n	14828 <ble_ll_conn_hci_set_chan_class+0x2a>
    ble_ll_conn_set_global_chanmap(num_used_chans, cmd->chan_map);
   1481a:	4621      	mov	r1, r4
   1481c:	f7ff f99c 	bl	13b58 <ble_ll_conn_set_global_chanmap>
    return BLE_ERR_SUCCESS;
   14820:	2000      	movs	r0, #0
}
   14822:	bd10      	pop	{r4, pc}
        return BLE_ERR_INV_HCI_CMD_PARMS;
   14824:	2012      	movs	r0, #18
   14826:	e7fc      	b.n	14822 <ble_ll_conn_hci_set_chan_class+0x24>
   14828:	2012      	movs	r0, #18
   1482a:	e7fa      	b.n	14822 <ble_ll_conn_hci_set_chan_class+0x24>

0001482c <ble_ll_conn_hci_set_data_len>:
    uint16_t handle;
    uint16_t txoctets;
    uint16_t txtime;
    struct ble_ll_conn_sm *connsm;

    if (len != sizeof(*cmd)) {
   1482c:	2906      	cmp	r1, #6
   1482e:	d001      	beq.n	14834 <ble_ll_conn_hci_set_data_len+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   14830:	2012      	movs	r0, #18

done:
    rsp->conn_handle = htole16(handle);
    *rsplen = sizeof(*rsp);
    return rc;
}
   14832:	4770      	bx	lr
{
   14834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14838:	461e      	mov	r6, r3
   1483a:	4615      	mov	r5, r2
   1483c:	4604      	mov	r4, r0
    handle = le16toh(cmd->conn_handle);
   1483e:	8807      	ldrh	r7, [r0, #0]
    connsm = ble_ll_conn_find_active_conn(handle);
   14840:	4638      	mov	r0, r7
   14842:	f7fe f83d 	bl	128c0 <ble_ll_conn_find_active_conn>
    if (!connsm) {
   14846:	4680      	mov	r8, r0
   14848:	b1f8      	cbz	r0, 1488a <ble_ll_conn_hci_set_data_len+0x5e>
    txoctets = le16toh(cmd->tx_octets);
   1484a:	f8b4 9002 	ldrh.w	r9, [r4, #2]
    txtime = le16toh(cmd->tx_time);
   1484e:	88a4      	ldrh	r4, [r4, #4]
   14850:	fa1f fa84 	uxth.w	sl, r4
    if (!ble_ll_chk_txrx_octets(txoctets) ||
   14854:	4648      	mov	r0, r9
   14856:	f7fb fecb 	bl	105f0 <ble_ll_chk_txrx_octets>
   1485a:	b908      	cbnz	r0, 14860 <ble_ll_conn_hci_set_data_len+0x34>
        rc = BLE_ERR_INV_HCI_CMD_PARMS;
   1485c:	2012      	movs	r0, #18
   1485e:	e015      	b.n	1488c <ble_ll_conn_hci_set_data_len+0x60>
        !ble_ll_chk_txrx_time(txtime)) {
   14860:	4650      	mov	r0, sl
   14862:	f7fb fecd 	bl	10600 <ble_ll_chk_txrx_time>
    if (!ble_ll_chk_txrx_octets(txoctets) ||
   14866:	b1b0      	cbz	r0, 14896 <ble_ll_conn_hci_set_data_len+0x6a>
    if (connsm->max_tx_time != txtime ||
   14868:	f8b8 3010 	ldrh.w	r3, [r8, #16]
   1486c:	4553      	cmp	r3, sl
   1486e:	d103      	bne.n	14878 <ble_ll_conn_hci_set_data_len+0x4c>
        connsm->max_tx_octets != txoctets) {
   14870:	f898 300a 	ldrb.w	r3, [r8, #10]
    if (connsm->max_tx_time != txtime ||
   14874:	454b      	cmp	r3, r9
   14876:	d010      	beq.n	1489a <ble_ll_conn_hci_set_data_len+0x6e>
        connsm->max_tx_time = txtime;
   14878:	f8a8 4010 	strh.w	r4, [r8, #16]
        connsm->max_tx_octets = txoctets;
   1487c:	f888 900a 	strb.w	r9, [r8, #10]
        ble_ll_ctrl_initiate_dle(connsm);
   14880:	4640      	mov	r0, r8
   14882:	f000 fe24 	bl	154ce <ble_ll_ctrl_initiate_dle>
    rc = BLE_ERR_SUCCESS;
   14886:	2000      	movs	r0, #0
   14888:	e000      	b.n	1488c <ble_ll_conn_hci_set_data_len+0x60>
        rc = BLE_ERR_UNK_CONN_ID;
   1488a:	2002      	movs	r0, #2
    rsp->conn_handle = htole16(handle);
   1488c:	802f      	strh	r7, [r5, #0]
    *rsplen = sizeof(*rsp);
   1488e:	2302      	movs	r3, #2
   14890:	7033      	strb	r3, [r6, #0]
}
   14892:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        rc = BLE_ERR_INV_HCI_CMD_PARMS;
   14896:	2012      	movs	r0, #18
   14898:	e7f8      	b.n	1488c <ble_ll_conn_hci_set_data_len+0x60>
    rc = BLE_ERR_SUCCESS;
   1489a:	2000      	movs	r0, #0
   1489c:	e7f6      	b.n	1488c <ble_ll_conn_hci_set_data_len+0x60>

0001489e <ble_ll_conn_hci_le_start_encrypt>:
{
    const struct ble_hci_le_start_encrypt_cp *cmd = (const void *) cmdbuf;
    struct ble_ll_conn_sm *connsm;
    int rc;

    if (len != sizeof(*cmd)) {
   1489e:	291c      	cmp	r1, #28
   148a0:	d001      	beq.n	148a6 <ble_ll_conn_hci_le_start_encrypt+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   148a2:	2012      	movs	r0, #18
        ble_ll_ctrl_proc_start(connsm, BLE_LL_CTRL_PROC_ENCRYPT);
        rc = BLE_ERR_SUCCESS;
    }

    return rc;
}
   148a4:	4770      	bx	lr
{
   148a6:	b538      	push	{r3, r4, r5, lr}
   148a8:	4604      	mov	r4, r0
    connsm = ble_ll_conn_find_active_conn(le16toh(cmd->conn_handle));
   148aa:	8800      	ldrh	r0, [r0, #0]
   148ac:	f7fe f808 	bl	128c0 <ble_ll_conn_find_active_conn>
    if (!connsm) {
   148b0:	4605      	mov	r5, r0
   148b2:	b1f0      	cbz	r0, 148f2 <ble_ll_conn_hci_le_start_encrypt+0x54>
    } else if (connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) {
   148b4:	79c3      	ldrb	r3, [r0, #7]
   148b6:	2b02      	cmp	r3, #2
   148b8:	d01d      	beq.n	148f6 <ble_ll_conn_hci_le_start_encrypt+0x58>
    } else if (connsm->cur_ctrl_proc == BLE_LL_CTRL_PROC_ENCRYPT) {
   148ba:	f890 303b 	ldrb.w	r3, [r0, #59]	; 0x3b
   148be:	2b02      	cmp	r3, #2
   148c0:	d01b      	beq.n	148fa <ble_ll_conn_hci_le_start_encrypt+0x5c>
        connsm->enc_data.host_rand_num = le64toh(cmd->rand);
   148c2:	f8d4 2002 	ldr.w	r2, [r4, #2]
   148c6:	f8d4 3006 	ldr.w	r3, [r4, #6]
   148ca:	f8c0 2128 	str.w	r2, [r0, #296]	; 0x128
   148ce:	f8c0 312c 	str.w	r3, [r0, #300]	; 0x12c
        connsm->enc_data.enc_div = le16toh(cmd->div);
   148d2:	8963      	ldrh	r3, [r4, #10]
   148d4:	f8a0 311a 	strh.w	r3, [r0, #282]	; 0x11a
        swap_buf(connsm->enc_data.enc_block.key, cmd->ltk, 16);
   148d8:	2210      	movs	r2, #16
   148da:	f104 010c 	add.w	r1, r4, #12
   148de:	f500 709c 	add.w	r0, r0, #312	; 0x138
   148e2:	f014 ffba 	bl	2985a <swap_buf>
        ble_ll_ctrl_proc_start(connsm, BLE_LL_CTRL_PROC_ENCRYPT);
   148e6:	2102      	movs	r1, #2
   148e8:	4628      	mov	r0, r5
   148ea:	f000 fdc9 	bl	15480 <ble_ll_ctrl_proc_start>
        rc = BLE_ERR_SUCCESS;
   148ee:	2000      	movs	r0, #0
}
   148f0:	bd38      	pop	{r3, r4, r5, pc}
        rc = BLE_ERR_UNK_CONN_ID;
   148f2:	2002      	movs	r0, #2
   148f4:	e7fc      	b.n	148f0 <ble_ll_conn_hci_le_start_encrypt+0x52>
        rc = BLE_ERR_UNSPECIFIED;
   148f6:	201f      	movs	r0, #31
   148f8:	e7fa      	b.n	148f0 <ble_ll_conn_hci_le_start_encrypt+0x52>
        rc = BLE_ERR_CMD_DISALLOWED;
   148fa:	200c      	movs	r0, #12
   148fc:	e7f8      	b.n	148f0 <ble_ll_conn_hci_le_start_encrypt+0x52>

000148fe <ble_ll_conn_hci_le_ltk_reply>:
    struct ble_hci_le_lt_key_req_reply_rp *rsp = (void *) rspbuf;
    struct ble_ll_conn_sm *connsm;
    uint16_t handle;
    int rc;

    if (len != sizeof(*cmd)) {
   148fe:	2912      	cmp	r1, #18
   14900:	d001      	beq.n	14906 <ble_ll_conn_hci_le_ltk_reply+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   14902:	2012      	movs	r0, #18
ltk_key_cmd_complete:
    rsp->conn_handle = htole16(handle);

    *rsplen = sizeof(*rsp);
    return rc;
}
   14904:	4770      	bx	lr
{
   14906:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1490a:	461e      	mov	r6, r3
   1490c:	4615      	mov	r5, r2
   1490e:	4604      	mov	r4, r0
    handle = le16toh(cmd->conn_handle);
   14910:	8807      	ldrh	r7, [r0, #0]
    connsm = ble_ll_conn_find_active_conn(handle);
   14912:	4638      	mov	r0, r7
   14914:	f7fd ffd4 	bl	128c0 <ble_ll_conn_find_active_conn>
    if (!connsm) {
   14918:	4680      	mov	r8, r0
   1491a:	b1d0      	cbz	r0, 14952 <ble_ll_conn_hci_le_ltk_reply+0x54>
    if (connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) {
   1491c:	79c3      	ldrb	r3, [r0, #7]
   1491e:	2b01      	cmp	r3, #1
   14920:	d019      	beq.n	14956 <ble_ll_conn_hci_le_ltk_reply+0x58>
    if (connsm->enc_data.enc_state != CONN_ENC_S_LTK_REQ_WAIT) {
   14922:	f890 3118 	ldrb.w	r3, [r0, #280]	; 0x118
   14926:	2b08      	cmp	r3, #8
   14928:	d005      	beq.n	14936 <ble_ll_conn_hci_le_ltk_reply+0x38>
        rc = BLE_ERR_CMD_DISALLOWED;
   1492a:	200c      	movs	r0, #12
    rsp->conn_handle = htole16(handle);
   1492c:	802f      	strh	r7, [r5, #0]
    *rsplen = sizeof(*rsp);
   1492e:	2302      	movs	r3, #2
   14930:	7033      	strb	r3, [r6, #0]
}
   14932:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    swap_buf(connsm->enc_data.enc_block.key, cmd->ltk, 16);
   14936:	2210      	movs	r2, #16
   14938:	1ca1      	adds	r1, r4, #2
   1493a:	f500 709c 	add.w	r0, r0, #312	; 0x138
   1493e:	f014 ff8c 	bl	2985a <swap_buf>
    ble_ll_calc_session_key(connsm);
   14942:	4640      	mov	r0, r8
   14944:	f000 fbce 	bl	150e4 <ble_ll_calc_session_key>
    ble_ll_ctrl_start_enc_send(connsm);
   14948:	4640      	mov	r0, r8
   1494a:	f000 fc6c 	bl	15226 <ble_ll_ctrl_start_enc_send>
    rc = BLE_ERR_SUCCESS;
   1494e:	2000      	movs	r0, #0
   14950:	e7ec      	b.n	1492c <ble_ll_conn_hci_le_ltk_reply+0x2e>
        rc = BLE_ERR_UNK_CONN_ID;
   14952:	2002      	movs	r0, #2
   14954:	e7ea      	b.n	1492c <ble_ll_conn_hci_le_ltk_reply+0x2e>
        rc = BLE_ERR_UNSPECIFIED;
   14956:	201f      	movs	r0, #31
   14958:	e7e8      	b.n	1492c <ble_ll_conn_hci_le_ltk_reply+0x2e>

0001495a <ble_ll_conn_hci_le_ltk_neg_reply>:
    struct ble_hci_le_lt_key_req_neg_reply_rp *rsp = (void *) rspbuf;
    struct ble_ll_conn_sm *connsm;
    uint16_t handle;
    int rc;

    if (len != sizeof(*cmd)) {
   1495a:	2902      	cmp	r1, #2
   1495c:	d001      	beq.n	14962 <ble_ll_conn_hci_le_ltk_neg_reply+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1495e:	2012      	movs	r0, #18
ltk_key_cmd_complete:
    rsp->conn_handle = htole16(handle);

    *rsplen = sizeof(*rsp);
    return rc;
}
   14960:	4770      	bx	lr
{
   14962:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14964:	461d      	mov	r5, r3
   14966:	4614      	mov	r4, r2
    handle = le16toh(cmd->conn_handle);
   14968:	8806      	ldrh	r6, [r0, #0]
    connsm = ble_ll_conn_find_active_conn(handle);
   1496a:	4630      	mov	r0, r6
   1496c:	f7fd ffa8 	bl	128c0 <ble_ll_conn_find_active_conn>
    if (!connsm) {
   14970:	4607      	mov	r7, r0
   14972:	b1a0      	cbz	r0, 1499e <ble_ll_conn_hci_le_ltk_neg_reply+0x44>
    if (connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) {
   14974:	79c3      	ldrb	r3, [r0, #7]
   14976:	2b01      	cmp	r3, #1
   14978:	d013      	beq.n	149a2 <ble_ll_conn_hci_le_ltk_neg_reply+0x48>
    if (connsm->enc_data.enc_state != CONN_ENC_S_LTK_REQ_WAIT) {
   1497a:	f890 3118 	ldrb.w	r3, [r0, #280]	; 0x118
   1497e:	2b08      	cmp	r3, #8
   14980:	d004      	beq.n	1498c <ble_ll_conn_hci_le_ltk_neg_reply+0x32>
        rc = BLE_ERR_CMD_DISALLOWED;
   14982:	200c      	movs	r0, #12
    rsp->conn_handle = htole16(handle);
   14984:	8026      	strh	r6, [r4, #0]
    *rsplen = sizeof(*rsp);
   14986:	2302      	movs	r3, #2
   14988:	702b      	strb	r3, [r5, #0]
}
   1498a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ble_ll_ctrl_reject_ind_send(connsm, BLE_LL_CTRL_ENC_REQ,
   1498c:	2206      	movs	r2, #6
   1498e:	2103      	movs	r1, #3
   14990:	f001 f91e 	bl	15bd0 <ble_ll_ctrl_reject_ind_send>
    connsm->enc_data.enc_state = CONN_ENC_S_LTK_NEG_REPLY;
   14994:	2309      	movs	r3, #9
   14996:	f887 3118 	strb.w	r3, [r7, #280]	; 0x118
    rc = BLE_ERR_SUCCESS;
   1499a:	2000      	movs	r0, #0
   1499c:	e7f2      	b.n	14984 <ble_ll_conn_hci_le_ltk_neg_reply+0x2a>
        rc = BLE_ERR_UNK_CONN_ID;
   1499e:	2002      	movs	r0, #2
   149a0:	e7f0      	b.n	14984 <ble_ll_conn_hci_le_ltk_neg_reply+0x2a>
        rc = BLE_ERR_UNSPECIFIED;
   149a2:	201f      	movs	r0, #31
   149a4:	e7ee      	b.n	14984 <ble_ll_conn_hci_le_ltk_neg_reply+0x2a>

000149a6 <ble_ll_conn_hci_rd_auth_pyld_tmo>:
    struct ble_ll_conn_sm *connsm;
    uint16_t handle;
    int rc;


    if (len != sizeof(*cmd)) {
   149a6:	2902      	cmp	r1, #2
   149a8:	d001      	beq.n	149ae <ble_ll_conn_hci_rd_auth_pyld_tmo+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   149aa:	2012      	movs	r0, #18

    rsp->conn_handle = htole16(handle);

    *rsplen = sizeof(*rsp);
    return rc;
}
   149ac:	4770      	bx	lr
{
   149ae:	b570      	push	{r4, r5, r6, lr}
   149b0:	461d      	mov	r5, r3
   149b2:	4614      	mov	r4, r2
    handle = le16toh(cmd->conn_handle);
   149b4:	8806      	ldrh	r6, [r0, #0]
    connsm = ble_ll_conn_find_active_conn(handle);
   149b6:	4630      	mov	r0, r6
   149b8:	f7fd ff82 	bl	128c0 <ble_ll_conn_find_active_conn>
    if (!connsm) {
   149bc:	b138      	cbz	r0, 149ce <ble_ll_conn_hci_rd_auth_pyld_tmo+0x28>
        rsp->tmo = htole16(connsm->auth_pyld_tmo);
   149be:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
   149c2:	8063      	strh	r3, [r4, #2]
        rc = BLE_ERR_SUCCESS;
   149c4:	2000      	movs	r0, #0
    rsp->conn_handle = htole16(handle);
   149c6:	8026      	strh	r6, [r4, #0]
    *rsplen = sizeof(*rsp);
   149c8:	2304      	movs	r3, #4
   149ca:	702b      	strb	r3, [r5, #0]
}
   149cc:	bd70      	pop	{r4, r5, r6, pc}
        rsp->tmo = 0;
   149ce:	2300      	movs	r3, #0
   149d0:	70a3      	strb	r3, [r4, #2]
   149d2:	70e3      	strb	r3, [r4, #3]
        rc = BLE_ERR_UNK_CONN_ID;
   149d4:	2002      	movs	r0, #2
   149d6:	e7f6      	b.n	149c6 <ble_ll_conn_hci_rd_auth_pyld_tmo+0x20>

000149d8 <ble_ll_conn_hci_wr_auth_pyld_tmo>:
    uint32_t min_tmo;
    uint16_t handle;
    uint16_t tmo;
    int rc;

    if (len != sizeof(*cmd)) {
   149d8:	2904      	cmp	r1, #4
   149da:	d001      	beq.n	149e0 <ble_ll_conn_hci_wr_auth_pyld_tmo+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   149dc:	2012      	movs	r0, #18
    }

    rsp->conn_handle = htole16(handle);
    *rsplen = sizeof(*rsp);
    return rc;
}
   149de:	4770      	bx	lr
{
   149e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   149e2:	461d      	mov	r5, r3
   149e4:	4616      	mov	r6, r2
   149e6:	4604      	mov	r4, r0
    handle = le16toh(cmd->conn_handle);
   149e8:	8807      	ldrh	r7, [r0, #0]
    connsm = ble_ll_conn_find_active_conn(handle);
   149ea:	4638      	mov	r0, r7
   149ec:	f7fd ff68 	bl	128c0 <ble_ll_conn_find_active_conn>
    if (!connsm) {
   149f0:	4603      	mov	r3, r0
   149f2:	b1d8      	cbz	r0, 14a2c <ble_ll_conn_hci_wr_auth_pyld_tmo+0x54>
        tmo = le16toh(cmd->tmo);
   149f4:	8862      	ldrh	r2, [r4, #2]
   149f6:	b290      	uxth	r0, r2
        min_tmo = (uint32_t)connsm->conn_itvl * BLE_LL_CONN_ITVL_USECS;
   149f8:	f8b3 4068 	ldrh.w	r4, [r3, #104]	; 0x68
   149fc:	f240 41e2 	movw	r1, #1250	; 0x4e2
   14a00:	fb01 f104 	mul.w	r1, r1, r4
        min_tmo *= (connsm->slave_latency + 1);
   14a04:	f8b3 406a 	ldrh.w	r4, [r3, #106]	; 0x6a
   14a08:	fb04 1101 	mla	r1, r4, r1, r1
        min_tmo /= 10000;
   14a0c:	4c0c      	ldr	r4, [pc, #48]	; (14a40 <ble_ll_conn_hci_wr_auth_pyld_tmo+0x68>)
   14a0e:	fba4 4101 	umull	r4, r1, r4, r1
        if (tmo < min_tmo) {
   14a12:	ebb0 3f51 	cmp.w	r0, r1, lsr #13
   14a16:	d30b      	bcc.n	14a30 <ble_ll_conn_hci_wr_auth_pyld_tmo+0x58>
            connsm->auth_pyld_tmo = tmo;
   14a18:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
   14a1c:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
            if (ble_npl_callout_is_active(&connsm->auth_pyld_timer)) {
   14a20:	b15a      	cbz	r2, 14a3a <ble_ll_conn_hci_wr_auth_pyld_tmo+0x62>
                ble_ll_conn_auth_pyld_timer_start(connsm);
   14a22:	4618      	mov	r0, r3
   14a24:	f7fe f95e 	bl	12ce4 <ble_ll_conn_auth_pyld_timer_start>
    rc = BLE_ERR_SUCCESS;
   14a28:	2000      	movs	r0, #0
   14a2a:	e002      	b.n	14a32 <ble_ll_conn_hci_wr_auth_pyld_tmo+0x5a>
        rc = BLE_ERR_UNK_CONN_ID;
   14a2c:	2002      	movs	r0, #2
   14a2e:	e000      	b.n	14a32 <ble_ll_conn_hci_wr_auth_pyld_tmo+0x5a>
            rc = BLE_ERR_INV_HCI_CMD_PARMS;
   14a30:	2012      	movs	r0, #18
    rsp->conn_handle = htole16(handle);
   14a32:	8037      	strh	r7, [r6, #0]
    *rsplen = sizeof(*rsp);
   14a34:	2302      	movs	r3, #2
   14a36:	702b      	strb	r3, [r5, #0]
}
   14a38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    rc = BLE_ERR_SUCCESS;
   14a3a:	2000      	movs	r0, #0
   14a3c:	e7f9      	b.n	14a32 <ble_ll_conn_hci_wr_auth_pyld_tmo+0x5a>
   14a3e:	bf00      	nop
   14a40:	d1b71759 	.word	0xd1b71759

00014a44 <ble_ll_ctrl_enc_allowed_pdu>:
{
    int allowed;

    allowed = 0;

    switch (llid) {
   14a44:	2801      	cmp	r0, #1
   14a46:	d010      	beq.n	14a6a <ble_ll_ctrl_enc_allowed_pdu+0x26>
   14a48:	2803      	cmp	r0, #3
   14a4a:	d113      	bne.n	14a74 <ble_ll_ctrl_enc_allowed_pdu+0x30>
    case BLE_LL_LLID_CTRL:
        switch (opcode) {
   14a4c:	3a02      	subs	r2, #2
   14a4e:	2a0f      	cmp	r2, #15
   14a50:	d809      	bhi.n	14a66 <ble_ll_ctrl_enc_allowed_pdu+0x22>
   14a52:	e8df f002 	tbb	[pc, r2]
   14a56:	1111      	.short	0x1111
   14a58:	08111111 	.word	0x08111111
   14a5c:	11110808 	.word	0x11110808
   14a60:	08081108 	.word	0x08081108
   14a64:	1108      	.short	0x1108
    allowed = 0;
   14a66:	2000      	movs	r0, #0
   14a68:	4770      	bx	lr
            allowed = 1;
            break;
        }
        break;
    case BLE_LL_LLID_DATA_FRAG:
        if (len == 0) {
   14a6a:	b909      	cbnz	r1, 14a70 <ble_ll_ctrl_enc_allowed_pdu+0x2c>
            /* Empty PDUs are allowed */
            allowed = 1;
   14a6c:	2001      	movs	r0, #1
        }
        break;
    }

    return allowed;
}
   14a6e:	4770      	bx	lr
    allowed = 0;
   14a70:	2000      	movs	r0, #0
   14a72:	4770      	bx	lr
   14a74:	2000      	movs	r0, #0
   14a76:	4770      	bx	lr
            allowed = 1;
   14a78:	2001      	movs	r0, #1
   14a7a:	4770      	bx	lr

00014a7c <ble_ll_ctrl_rx_start_enc_req>:
{
    int rc;

    /* Only master should receive start enc request */
    rc = BLE_ERR_MAX;
    if (connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) {
   14a7c:	79c3      	ldrb	r3, [r0, #7]
   14a7e:	2b01      	cmp	r3, #1
   14a80:	d001      	beq.n	14a86 <ble_ll_ctrl_rx_start_enc_req+0xa>
        if (connsm->enc_data.enc_state == CONN_ENC_S_START_ENC_REQ_WAIT) {
            connsm->enc_data.enc_state = CONN_ENC_S_START_ENC_RSP_WAIT;
            rc = BLE_LL_CTRL_START_ENC_RSP;
        }
    } else {
        rc = BLE_LL_CTRL_UNKNOWN_RSP;
   14a82:	2007      	movs	r0, #7
   14a84:	4770      	bx	lr
        if (connsm->enc_data.enc_state == CONN_ENC_S_START_ENC_REQ_WAIT) {
   14a86:	f890 3118 	ldrb.w	r3, [r0, #280]	; 0x118
   14a8a:	2b06      	cmp	r3, #6
   14a8c:	d001      	beq.n	14a92 <ble_ll_ctrl_rx_start_enc_req+0x16>
    rc = BLE_ERR_MAX;
   14a8e:	20ff      	movs	r0, #255	; 0xff
    }
    return rc;
}
   14a90:	4770      	bx	lr
            connsm->enc_data.enc_state = CONN_ENC_S_START_ENC_RSP_WAIT;
   14a92:	2307      	movs	r3, #7
   14a94:	f880 3118 	strb.w	r3, [r0, #280]	; 0x118
            rc = BLE_LL_CTRL_START_ENC_RSP;
   14a98:	2006      	movs	r0, #6
   14a9a:	4770      	bx	lr

00014a9c <ble_ll_ctrl_rx_pause_enc_req>:
     * The spec does not say what to do here, but if we receive a pause
     * encryption request and we are not encrypted, what do we do? We
     * ignore it...
     */
    rc = BLE_ERR_MAX;
    if ((connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) &&
   14a9c:	79c3      	ldrb	r3, [r0, #7]
   14a9e:	2b02      	cmp	r3, #2
   14aa0:	d001      	beq.n	14aa6 <ble_ll_ctrl_rx_pause_enc_req+0xa>
        (connsm->enc_data.enc_state == CONN_ENC_S_ENCRYPTED)) {
        rc = BLE_LL_CTRL_PAUSE_ENC_RSP;
    } else {
        rc = BLE_LL_CTRL_UNKNOWN_RSP;
   14aa2:	2007      	movs	r0, #7
   14aa4:	4770      	bx	lr
        (connsm->enc_data.enc_state == CONN_ENC_S_ENCRYPTED)) {
   14aa6:	f890 3118 	ldrb.w	r3, [r0, #280]	; 0x118
    if ((connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) &&
   14aaa:	2b02      	cmp	r3, #2
   14aac:	d001      	beq.n	14ab2 <ble_ll_ctrl_rx_pause_enc_req+0x16>
        rc = BLE_LL_CTRL_UNKNOWN_RSP;
   14aae:	2007      	movs	r0, #7
   14ab0:	4770      	bx	lr
        rc = BLE_LL_CTRL_PAUSE_ENC_RSP;
   14ab2:	200b      	movs	r0, #11
    }

    return rc;
}
   14ab4:	4770      	bx	lr

00014ab6 <ble_ll_ctrl_rx_pause_enc_rsp>:
static uint8_t
ble_ll_ctrl_rx_pause_enc_rsp(struct ble_ll_conn_sm *connsm)
{
    int rc;

    if (connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) {
   14ab6:	79c3      	ldrb	r3, [r0, #7]
   14ab8:	2b01      	cmp	r3, #1
   14aba:	d00a      	beq.n	14ad2 <ble_ll_ctrl_rx_pause_enc_rsp+0x1c>
        rc = BLE_LL_CTRL_PAUSE_ENC_RSP;
    } else if (connsm->enc_data.enc_state == CONN_ENC_S_PAUSE_ENC_RSP_WAIT) {
   14abc:	f890 3118 	ldrb.w	r3, [r0, #280]	; 0x118
   14ac0:	2b04      	cmp	r3, #4
   14ac2:	d001      	beq.n	14ac8 <ble_ll_ctrl_rx_pause_enc_rsp+0x12>
         * From this moment encryption is paused.
         */
        rc = BLE_ERR_MAX;
        connsm->enc_data.enc_state = CONN_ENC_S_PAUSED;
    } else {
        rc = BLE_LL_CTRL_UNKNOWN_RSP;
   14ac4:	2007      	movs	r0, #7
    }

    return rc;
}
   14ac6:	4770      	bx	lr
        connsm->enc_data.enc_state = CONN_ENC_S_PAUSED;
   14ac8:	2305      	movs	r3, #5
   14aca:	f880 3118 	strb.w	r3, [r0, #280]	; 0x118
        rc = BLE_ERR_MAX;
   14ace:	20ff      	movs	r0, #255	; 0xff
   14ad0:	4770      	bx	lr
        rc = BLE_LL_CTRL_PAUSE_ENC_RSP;
   14ad2:	200b      	movs	r0, #11
   14ad4:	4770      	bx	lr

00014ad6 <ble_ll_ctrl_proc_rsp_timer_cb>:
{
   14ad6:	b508      	push	{r3, lr}
    ble_ll_conn_timeout((struct ble_ll_conn_sm *)ble_npl_event_get_arg(ev),
   14ad8:	2122      	movs	r1, #34	; 0x22
   14ada:	6880      	ldr	r0, [r0, #8]
   14adc:	f7fe fd80 	bl	135e0 <ble_ll_conn_timeout>
}
   14ae0:	bd08      	pop	{r3, pc}
	...

00014ae4 <ble_ll_ctrl_start_rsp_timer>:
{
   14ae4:	b510      	push	{r4, lr}
   14ae6:	4603      	mov	r3, r0
    os_callout_init(&co->co, &evq->evq, (os_event_fn *)ev_cb, ev_arg);
   14ae8:	f100 04bc 	add.w	r4, r0, #188	; 0xbc
   14aec:	4a05      	ldr	r2, [pc, #20]	; (14b04 <ble_ll_ctrl_start_rsp_timer+0x20>)
   14aee:	4906      	ldr	r1, [pc, #24]	; (14b08 <ble_ll_ctrl_start_rsp_timer+0x24>)
   14af0:	4620      	mov	r0, r4
   14af2:	f7f7 ff5b 	bl	c9ac <os_callout_init>
    return (ble_npl_error_t)os_callout_reset(&co->co, ticks);
   14af6:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
   14afa:	4620      	mov	r0, r4
   14afc:	f7f7 ff82 	bl	ca04 <os_callout_reset>
}
   14b00:	bd10      	pop	{r4, pc}
   14b02:	bf00      	nop
   14b04:	00014ad7 	.word	0x00014ad7
   14b08:	20003d60 	.word	0x20003d60

00014b0c <ble_ll_ctrl_conn_upd_make>:
{
   14b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14b0e:	4604      	mov	r4, r0
   14b10:	460e      	mov	r6, r1
    instant = connsm->event_cntr + connsm->slave_latency + 6 + 1;
   14b12:	f8b0 504a 	ldrh.w	r5, [r0, #74]	; 0x4a
   14b16:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
   14b1a:	441d      	add	r5, r3
   14b1c:	b2ad      	uxth	r5, r5
   14b1e:	3507      	adds	r5, #7
   14b20:	b2ad      	uxth	r5, r5
    if (cp) {
   14b22:	2a00      	cmp	r2, #0
   14b24:	d066      	beq.n	14bf4 <ble_ll_ctrl_conn_upd_make+0xe8>
   14b26:	4611      	mov	r1, r2
        if (cp->offset0 != 0xFFFF) {
   14b28:	8997      	ldrh	r7, [r2, #12]
   14b2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   14b2e:	429f      	cmp	r7, r3
   14b30:	d05c      	beq.n	14bec <ble_ll_ctrl_conn_upd_make+0xe0>
            new_itvl_usecs = cp->interval_max * BLE_LL_CONN_ITVL_USECS;
   14b32:	8853      	ldrh	r3, [r2, #2]
   14b34:	f240 42e2 	movw	r2, #1250	; 0x4e2
   14b38:	fb02 f303 	mul.w	r3, r2, r3
            old_itvl_usecs = connsm->conn_itvl * BLE_LL_CONN_ITVL_USECS;
   14b3c:	f8b0 0068 	ldrh.w	r0, [r0, #104]	; 0x68
   14b40:	fb02 f200 	mul.w	r2, r2, r0
            if ((int16_t)(cp->ref_conn_event_cnt - instant) >= 0) {
   14b44:	8948      	ldrh	r0, [r1, #10]
   14b46:	eba0 0c05 	sub.w	ip, r0, r5
   14b4a:	f41c 4f00 	tst.w	ip, #32768	; 0x8000
   14b4e:	d140      	bne.n	14bd2 <ble_ll_ctrl_conn_upd_make+0xc6>
                num_old_ce = cp->ref_conn_event_cnt - instant;
   14b50:	4660      	mov	r0, ip
                dt += (cp->offset0 * BLE_LL_CONN_ITVL_USECS);
   14b52:	f240 4ce2 	movw	ip, #1250	; 0x4e2
   14b56:	fb0c f707 	mul.w	r7, ip, r7
   14b5a:	fb00 7202 	mla	r2, r0, r2, r7
                dt = dt % new_itvl_usecs;
   14b5e:	fbb2 f0f3 	udiv	r0, r2, r3
   14b62:	fb03 2310 	mls	r3, r3, r0, r2
            req->winoffset = dt / BLE_LL_CONN_TX_WIN_USECS;
   14b66:	4a2d      	ldr	r2, [pc, #180]	; (14c1c <ble_ll_ctrl_conn_upd_make+0x110>)
   14b68:	fba2 2303 	umull	r2, r3, r2, r3
   14b6c:	0a9b      	lsrs	r3, r3, #10
   14b6e:	f8a4 3178 	strh.w	r3, [r4, #376]	; 0x178
        req->interval = cp->interval_max;
   14b72:	884b      	ldrh	r3, [r1, #2]
   14b74:	f8a4 317a 	strh.w	r3, [r4, #378]	; 0x17a
        req->timeout = cp->timeout;
   14b78:	88cb      	ldrh	r3, [r1, #6]
   14b7a:	f8a4 317e 	strh.w	r3, [r4, #382]	; 0x17e
        req->latency = cp->latency;
   14b7e:	888b      	ldrh	r3, [r1, #4]
   14b80:	f8a4 317c 	strh.w	r3, [r4, #380]	; 0x17c
        req->winsize = 1;
   14b84:	2301      	movs	r3, #1
   14b86:	f884 3176 	strb.w	r3, [r4, #374]	; 0x176
    req->instant = instant;
   14b8a:	f8a4 5180 	strh.w	r5, [r4, #384]	; 0x180
    pyld[0] = req->winsize;
   14b8e:	f894 3176 	ldrb.w	r3, [r4, #374]	; 0x176
   14b92:	4630      	mov	r0, r6
   14b94:	f800 3b01 	strb.w	r3, [r0], #1
    put_le16(pyld + 1, req->winoffset);
   14b98:	f8b4 1178 	ldrh.w	r1, [r4, #376]	; 0x178
   14b9c:	f014 fdd6 	bl	2974c <put_le16>
    put_le16(pyld + 3, req->interval);
   14ba0:	f8b4 117a 	ldrh.w	r1, [r4, #378]	; 0x17a
   14ba4:	1cf0      	adds	r0, r6, #3
   14ba6:	f014 fdd1 	bl	2974c <put_le16>
    put_le16(pyld + 5, req->latency);
   14baa:	f8b4 117c 	ldrh.w	r1, [r4, #380]	; 0x17c
   14bae:	1d70      	adds	r0, r6, #5
   14bb0:	f014 fdcc 	bl	2974c <put_le16>
    put_le16(pyld + 7, req->timeout);
   14bb4:	f8b4 117e 	ldrh.w	r1, [r4, #382]	; 0x17e
   14bb8:	1df0      	adds	r0, r6, #7
   14bba:	f014 fdc7 	bl	2974c <put_le16>
    put_le16(pyld + 9, instant);
   14bbe:	4629      	mov	r1, r5
   14bc0:	f106 0009 	add.w	r0, r6, #9
   14bc4:	f014 fdc2 	bl	2974c <put_le16>
    connsm->csmflags.cfbit.conn_update_sched = 1;
   14bc8:	7863      	ldrb	r3, [r4, #1]
   14bca:	f043 0301 	orr.w	r3, r3, #1
   14bce:	7063      	strb	r3, [r4, #1]
}
   14bd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                num_old_ce = instant - cp->ref_conn_event_cnt;
   14bd2:	1a28      	subs	r0, r5, r0
                dt = old_itvl_usecs * num_old_ce;
   14bd4:	fb00 f202 	mul.w	r2, r0, r2
                dt -= (cp->offset0 * BLE_LL_CONN_ITVL_USECS);
   14bd8:	f240 40e2 	movw	r0, #1250	; 0x4e2
   14bdc:	fb00 2217 	mls	r2, r0, r7, r2
                dt = dt % new_itvl_usecs;
   14be0:	fbb2 f7f3 	udiv	r7, r2, r3
   14be4:	fb03 2217 	mls	r2, r3, r7, r2
                dt = new_itvl_usecs - dt;
   14be8:	1a9b      	subs	r3, r3, r2
   14bea:	e7bc      	b.n	14b66 <ble_ll_ctrl_conn_upd_make+0x5a>
            req->winoffset = 0;
   14bec:	2300      	movs	r3, #0
   14bee:	f8a0 3178 	strh.w	r3, [r0, #376]	; 0x178
   14bf2:	e7be      	b.n	14b72 <ble_ll_ctrl_conn_upd_make+0x66>
        req->interval = hcu->conn_itvl_max;
   14bf4:	f8b0 316c 	ldrh.w	r3, [r0, #364]	; 0x16c
   14bf8:	f8a0 317a 	strh.w	r3, [r0, #378]	; 0x17a
        req->timeout = hcu->supervision_timeout;
   14bfc:	f8b0 3170 	ldrh.w	r3, [r0, #368]	; 0x170
   14c00:	f8a0 317e 	strh.w	r3, [r0, #382]	; 0x17e
        req->latency = hcu->conn_latency;
   14c04:	f8b0 316e 	ldrh.w	r3, [r0, #366]	; 0x16e
   14c08:	f8a0 317c 	strh.w	r3, [r0, #380]	; 0x17c
        req->winoffset = 0;
   14c0c:	2300      	movs	r3, #0
   14c0e:	f8a0 3178 	strh.w	r3, [r0, #376]	; 0x178
        req->winsize = connsm->tx_win_size;
   14c12:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
   14c16:	f880 3176 	strb.w	r3, [r0, #374]	; 0x176
   14c1a:	e7b6      	b.n	14b8a <ble_ll_ctrl_conn_upd_make+0x7e>
   14c1c:	d1b71759 	.word	0xd1b71759

00014c20 <ble_ll_ctrl_version_ind_make>:
    put_le16(dptr + 21, offset);
}

static void
ble_ll_ctrl_version_ind_make(struct ble_ll_conn_sm *connsm, uint8_t *pyld)
{
   14c20:	b510      	push	{r4, lr}
   14c22:	460c      	mov	r4, r1
    /* Set flag to denote we have sent/received this */
    connsm->csmflags.cfbit.version_ind_sent = 1;
   14c24:	7843      	ldrb	r3, [r0, #1]
   14c26:	f043 0304 	orr.w	r3, r3, #4
   14c2a:	7043      	strb	r3, [r0, #1]

    /* Fill out response */
    pyld[0] = BLE_HCI_VER_BCS;
   14c2c:	4608      	mov	r0, r1
   14c2e:	2309      	movs	r3, #9
   14c30:	f800 3b01 	strb.w	r3, [r0], #1
    put_le16(pyld + 1, MYNEWT_VAL(BLE_LL_MFRG_ID));
   14c34:	f64f 71ff 	movw	r1, #65535	; 0xffff
   14c38:	f014 fd88 	bl	2974c <put_le16>
    put_le16(pyld + 3, BLE_LL_SUB_VERS_NR);
   14c3c:	2100      	movs	r1, #0
   14c3e:	1ce0      	adds	r0, r4, #3
   14c40:	f014 fd84 	bl	2974c <put_le16>
}
   14c44:	bd10      	pop	{r4, pc}

00014c46 <ble_ll_ctrl_datalen_upd_make>:
{
   14c46:	b538      	push	{r3, r4, r5, lr}
   14c48:	4605      	mov	r5, r0
   14c4a:	460c      	mov	r4, r1
    put_le16(dptr + 1, connsm->max_rx_octets);
   14c4c:	7ac1      	ldrb	r1, [r0, #11]
   14c4e:	1c60      	adds	r0, r4, #1
   14c50:	f014 fd7c 	bl	2974c <put_le16>
    put_le16(dptr + 3, connsm->max_rx_time);
   14c54:	8a69      	ldrh	r1, [r5, #18]
   14c56:	1ce0      	adds	r0, r4, #3
   14c58:	f014 fd78 	bl	2974c <put_le16>
    put_le16(dptr + 5, connsm->max_tx_octets);
   14c5c:	7aa9      	ldrb	r1, [r5, #10]
   14c5e:	1d60      	adds	r0, r4, #5
   14c60:	f014 fd74 	bl	2974c <put_le16>
    put_le16(dptr + 7, connsm->max_tx_time);
   14c64:	8a29      	ldrh	r1, [r5, #16]
   14c66:	1de0      	adds	r0, r4, #7
   14c68:	f014 fd70 	bl	2974c <put_le16>
}
   14c6c:	bd38      	pop	{r3, r4, r5, pc}

00014c6e <ble_ll_ctrl_conn_param_pdu_make>:
{
   14c6e:	b570      	push	{r4, r5, r6, lr}
   14c70:	4605      	mov	r5, r0
   14c72:	460c      	mov	r4, r1
    if (req) {
   14c74:	2a00      	cmp	r2, #0
   14c76:	d144      	bne.n	14d02 <ble_ll_ctrl_conn_param_pdu_make+0x94>
        BLE_LL_ASSERT(hcu->handle != 0);
   14c78:	f8b0 3168 	ldrh.w	r3, [r0, #360]	; 0x168
   14c7c:	2b00      	cmp	r3, #0
   14c7e:	d052      	beq.n	14d26 <ble_ll_ctrl_conn_param_pdu_make+0xb8>
        put_le16(dptr, hcu->conn_itvl_min);
   14c80:	f8b0 116a 	ldrh.w	r1, [r0, #362]	; 0x16a
   14c84:	4620      	mov	r0, r4
   14c86:	f014 fd61 	bl	2974c <put_le16>
        put_le16(dptr + 2, hcu->conn_itvl_max);
   14c8a:	f8b5 116c 	ldrh.w	r1, [r5, #364]	; 0x16c
   14c8e:	1ca0      	adds	r0, r4, #2
   14c90:	f014 fd5c 	bl	2974c <put_le16>
        put_le16(dptr + 4, hcu->conn_latency);
   14c94:	f8b5 116e 	ldrh.w	r1, [r5, #366]	; 0x16e
   14c98:	1d20      	adds	r0, r4, #4
   14c9a:	f014 fd57 	bl	2974c <put_le16>
        put_le16(dptr + 6, hcu->supervision_timeout);
   14c9e:	f8b5 1170 	ldrh.w	r1, [r5, #368]	; 0x170
   14ca2:	1da0      	adds	r0, r4, #6
   14ca4:	f014 fd52 	bl	2974c <put_le16>
    dptr[8] = 0;
   14ca8:	2300      	movs	r3, #0
   14caa:	7223      	strb	r3, [r4, #8]
    put_le16(dptr + 9, connsm->event_cntr);
   14cac:	f8b5 104a 	ldrh.w	r1, [r5, #74]	; 0x4a
   14cb0:	f104 0009 	add.w	r0, r4, #9
   14cb4:	f014 fd4a 	bl	2974c <put_le16>
    put_le16(dptr + 11, offset);
   14cb8:	f64f 71ff 	movw	r1, #65535	; 0xffff
   14cbc:	f104 000b 	add.w	r0, r4, #11
   14cc0:	f014 fd44 	bl	2974c <put_le16>
    put_le16(dptr + 13, offset);
   14cc4:	f64f 71ff 	movw	r1, #65535	; 0xffff
   14cc8:	f104 000d 	add.w	r0, r4, #13
   14ccc:	f014 fd3e 	bl	2974c <put_le16>
    put_le16(dptr + 15, offset);
   14cd0:	f64f 71ff 	movw	r1, #65535	; 0xffff
   14cd4:	f104 000f 	add.w	r0, r4, #15
   14cd8:	f014 fd38 	bl	2974c <put_le16>
    put_le16(dptr + 17, offset);
   14cdc:	f64f 71ff 	movw	r1, #65535	; 0xffff
   14ce0:	f104 0011 	add.w	r0, r4, #17
   14ce4:	f014 fd32 	bl	2974c <put_le16>
    put_le16(dptr + 19, offset);
   14ce8:	f64f 71ff 	movw	r1, #65535	; 0xffff
   14cec:	f104 0013 	add.w	r0, r4, #19
   14cf0:	f014 fd2c 	bl	2974c <put_le16>
    put_le16(dptr + 21, offset);
   14cf4:	f64f 71ff 	movw	r1, #65535	; 0xffff
   14cf8:	f104 0015 	add.w	r0, r4, #21
   14cfc:	f014 fd26 	bl	2974c <put_le16>
}
   14d00:	bd70      	pop	{r4, r5, r6, pc}
   14d02:	4616      	mov	r6, r2
        put_le16(dptr, req->interval_min);
   14d04:	8811      	ldrh	r1, [r2, #0]
   14d06:	4620      	mov	r0, r4
   14d08:	f014 fd20 	bl	2974c <put_le16>
        put_le16(dptr + 2, req->interval_max);
   14d0c:	8871      	ldrh	r1, [r6, #2]
   14d0e:	1ca0      	adds	r0, r4, #2
   14d10:	f014 fd1c 	bl	2974c <put_le16>
        put_le16(dptr + 4, req->latency);
   14d14:	88b1      	ldrh	r1, [r6, #4]
   14d16:	1d20      	adds	r0, r4, #4
   14d18:	f014 fd18 	bl	2974c <put_le16>
        put_le16(dptr + 6, req->timeout);
   14d1c:	88f1      	ldrh	r1, [r6, #6]
   14d1e:	1da0      	adds	r0, r4, #6
   14d20:	f014 fd14 	bl	2974c <put_le16>
   14d24:	e7c0      	b.n	14ca8 <ble_ll_ctrl_conn_param_pdu_make+0x3a>
        BLE_LL_ASSERT(hcu->handle != 0);
   14d26:	f7f7 fa5f 	bl	c1e8 <hal_debugger_connected>
   14d2a:	b100      	cbz	r0, 14d2e <ble_ll_ctrl_conn_param_pdu_make+0xc0>
   14d2c:	be01      	bkpt	0x0001
   14d2e:	2300      	movs	r3, #0
   14d30:	461a      	mov	r2, r3
   14d32:	4619      	mov	r1, r3
   14d34:	4618      	mov	r0, r3
   14d36:	f7f7 fc91 	bl	c65c <__assert_func>
	...

00014d3c <ble_ll_ctrl_chanmap_req_make>:
 * @param connsm    Pointer to connection state machine
 * @param pyld      Pointer to payload of LL control PDU
 */
static void
ble_ll_ctrl_chanmap_req_make(struct ble_ll_conn_sm *connsm, uint8_t *pyld)
{
   14d3c:	b510      	push	{r4, lr}
   14d3e:	4604      	mov	r4, r0
   14d40:	4608      	mov	r0, r1
    /* Copy channel map that host desires into request */
    memcpy(pyld, g_ble_ll_conn_params.master_chan_map, BLE_LL_CONN_CHMAP_LEN);
   14d42:	4b0e      	ldr	r3, [pc, #56]	; (14d7c <ble_ll_ctrl_chanmap_req_make+0x40>)
   14d44:	681a      	ldr	r2, [r3, #0]
   14d46:	600a      	str	r2, [r1, #0]
   14d48:	791b      	ldrb	r3, [r3, #4]
   14d4a:	710b      	strb	r3, [r1, #4]
    memcpy(connsm->req_chanmap, pyld, BLE_LL_CONN_CHMAP_LEN);
   14d4c:	680b      	ldr	r3, [r1, #0]
   14d4e:	f8c4 3025 	str.w	r3, [r4, #37]	; 0x25
   14d52:	790b      	ldrb	r3, [r1, #4]
   14d54:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29

    /* Place instant into request */
    connsm->chanmap_instant = connsm->event_cntr + connsm->slave_latency + 6 + 1;
   14d58:	f8b4 104a 	ldrh.w	r1, [r4, #74]	; 0x4a
   14d5c:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
   14d60:	4419      	add	r1, r3
   14d62:	b289      	uxth	r1, r1
   14d64:	3107      	adds	r1, #7
   14d66:	b289      	uxth	r1, r1
   14d68:	8561      	strh	r1, [r4, #42]	; 0x2a
    put_le16(pyld + BLE_LL_CONN_CHMAP_LEN, connsm->chanmap_instant);
   14d6a:	3005      	adds	r0, #5
   14d6c:	f014 fcee 	bl	2974c <put_le16>

    /* Set scheduled flag */
    connsm->csmflags.cfbit.chanmap_update_scheduled = 1;
   14d70:	7863      	ldrb	r3, [r4, #1]
   14d72:	f043 0310 	orr.w	r3, r3, #16
   14d76:	7063      	strb	r3, [r4, #1]
}
   14d78:	bd10      	pop	{r4, pc}
   14d7a:	bf00      	nop
   14d7c:	20003e80 	.word	0x20003e80

00014d80 <ble_ll_ctrl_update_features>:
    ble_ll_ctrl_proc_start(connsm, BLE_LL_CTRL_PROC_DATA_LEN_UPD);
}

static void
ble_ll_ctrl_update_features(struct ble_ll_conn_sm *connsm, uint8_t *feat)
{
   14d80:	b410      	push	{r4}
    connsm->conn_features = feat[0];
   14d82:	780b      	ldrb	r3, [r1, #0]
   14d84:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
    memcpy(connsm->remote_features, feat + 1, 7);
   14d88:	f851 2f01 	ldr.w	r2, [r1, #1]!
   14d8c:	6402      	str	r2, [r0, #64]	; 0x40
   14d8e:	888c      	ldrh	r4, [r1, #4]
   14d90:	798a      	ldrb	r2, [r1, #6]
   14d92:	f8a0 4044 	strh.w	r4, [r0, #68]	; 0x44
   14d96:	f880 2046 	strb.w	r2, [r0, #70]	; 0x46

    /* If we received peer's features for the 1st time, we should try DLE */
    if (!connsm->csmflags.cfbit.rxd_features) {
   14d9a:	78c3      	ldrb	r3, [r0, #3]
   14d9c:	f013 0f08 	tst.w	r3, #8
   14da0:	d102      	bne.n	14da8 <ble_ll_ctrl_update_features+0x28>
            connsm->max_rx_time = BLE_LL_CONN_SUPP_TIME_MAX_CODED;
        }
#endif

        connsm->csmflags.cfbit.pending_initiate_dle = 1;
        connsm->csmflags.cfbit.rxd_features = 1;
   14da2:	f043 0328 	orr.w	r3, r3, #40	; 0x28
   14da6:	70c3      	strb	r3, [r0, #3]
    }
}
   14da8:	bc10      	pop	{r4}
   14daa:	4770      	bx	lr

00014dac <ble_ll_ctrl_rx_feature_req>:

    /*
     * Only accept slave feature requests if we are a master and feature
     * requests if we are a slave.
     */
    if (opcode ==  BLE_LL_CTRL_SLAVE_FEATURE_REQ) {
   14dac:	2b0e      	cmp	r3, #14
   14dae:	d004      	beq.n	14dba <ble_ll_ctrl_rx_feature_req+0xe>
        if (connsm->conn_role != BLE_LL_CONN_ROLE_MASTER) {
            return BLE_LL_CTRL_UNKNOWN_RSP;
        }
    } else {
        /* XXX: not sure this is correct but do it anyway */
        if (connsm->conn_role != BLE_LL_CONN_ROLE_SLAVE) {
   14db0:	79c3      	ldrb	r3, [r0, #7]
   14db2:	2b02      	cmp	r3, #2
   14db4:	d006      	beq.n	14dc4 <ble_ll_ctrl_rx_feature_req+0x18>
            return BLE_LL_CTRL_UNKNOWN_RSP;
   14db6:	2007      	movs	r0, #7

    put_le64(rspbuf + 1, our_feat);
    rspbuf[1] = connsm->conn_features;

    return rsp_opcode;
}
   14db8:	4770      	bx	lr
        if (connsm->conn_role != BLE_LL_CONN_ROLE_MASTER) {
   14dba:	79c3      	ldrb	r3, [r0, #7]
   14dbc:	2b01      	cmp	r3, #1
   14dbe:	d001      	beq.n	14dc4 <ble_ll_ctrl_rx_feature_req+0x18>
            return BLE_LL_CTRL_UNKNOWN_RSP;
   14dc0:	2007      	movs	r0, #7
   14dc2:	4770      	bx	lr
{
   14dc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14dc8:	4616      	mov	r6, r2
   14dca:	460d      	mov	r5, r1
   14dcc:	4604      	mov	r4, r0
    our_feat = ble_ll_read_supp_features();
   14dce:	f7fb fe11 	bl	109f4 <ble_ll_read_supp_features>
   14dd2:	4607      	mov	r7, r0
   14dd4:	4688      	mov	r8, r1
    ble_ll_ctrl_update_features(connsm, dptr);
   14dd6:	4629      	mov	r1, r5
   14dd8:	4620      	mov	r0, r4
   14dda:	f7ff ffd1 	bl	14d80 <ble_ll_ctrl_update_features>
    connsm->conn_features &= our_feat;
   14dde:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
   14de2:	403b      	ands	r3, r7
   14de4:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
    put_le64(rspbuf + 1, our_feat);
   14de8:	463a      	mov	r2, r7
   14dea:	4643      	mov	r3, r8
   14dec:	1c70      	adds	r0, r6, #1
   14dee:	f014 fcbb 	bl	29768 <put_le64>
    rspbuf[1] = connsm->conn_features;
   14df2:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
   14df6:	7073      	strb	r3, [r6, #1]
    return rsp_opcode;
   14df8:	2009      	movs	r0, #9
}
   14dfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00014dfe <ble_ll_ctrl_enc_req_make>:
{
   14dfe:	b570      	push	{r4, r5, r6, lr}
   14e00:	4604      	mov	r4, r0
   14e02:	460d      	mov	r5, r1
    put_le64(dptr, connsm->enc_data.host_rand_num);
   14e04:	f500 7394 	add.w	r3, r0, #296	; 0x128
   14e08:	e9d3 2300 	ldrd	r2, r3, [r3]
   14e0c:	4608      	mov	r0, r1
   14e0e:	f014 fcab 	bl	29768 <put_le64>
    put_le16(dptr + 8, connsm->enc_data.enc_div);
   14e12:	f8b4 111a 	ldrh.w	r1, [r4, #282]	; 0x11a
   14e16:	f105 0008 	add.w	r0, r5, #8
   14e1a:	f014 fc97 	bl	2974c <put_le16>
    ble_ll_rand_data_get(connsm->enc_data.enc_block.plain_text + 8, 8);
   14e1e:	f504 76a8 	add.w	r6, r4, #336	; 0x150
   14e22:	2108      	movs	r1, #8
   14e24:	4630      	mov	r0, r6
   14e26:	f001 fd91 	bl	1694c <ble_ll_rand_data_get>
    swap_buf(dptr + 10, connsm->enc_data.enc_block.plain_text + 8, 8);
   14e2a:	2208      	movs	r2, #8
   14e2c:	4631      	mov	r1, r6
   14e2e:	f105 000a 	add.w	r0, r5, #10
   14e32:	f014 fd12 	bl	2985a <swap_buf>
    ble_ll_rand_data_get(connsm->enc_data.iv, 4);
   14e36:	2104      	movs	r1, #4
   14e38:	f504 7098 	add.w	r0, r4, #304	; 0x130
   14e3c:	f001 fd86 	bl	1694c <ble_ll_rand_data_get>
    memcpy(dptr + 18, connsm->enc_data.iv, 4);
   14e40:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
   14e44:	f8c5 3012 	str.w	r3, [r5, #18]
}
   14e48:	bd70      	pop	{r4, r5, r6, pc}
	...

00014e4c <ble_ll_ctrl_proc_init>:
 * @param connsm
 * @param ctrl_proc
 */
static struct os_mbuf *
ble_ll_ctrl_proc_init(struct ble_ll_conn_sm *connsm, int ctrl_proc)
{
   14e4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14e50:	4606      	mov	r6, r0
   14e52:	460d      	mov	r5, r1
    uint8_t *dptr;
    uint8_t *ctrdata;
    struct os_mbuf *om;

    /* Get an mbuf for the control pdu */
    om = os_msys_get_pkthdr(BLE_LL_CTRL_MAX_PDU_LEN, sizeof(struct ble_mbuf_hdr));
   14e54:	2110      	movs	r1, #16
   14e56:	201b      	movs	r0, #27
   14e58:	f7f8 f935 	bl	d0c6 <os_msys_get_pkthdr>

    if (om) {
   14e5c:	4604      	mov	r4, r0
   14e5e:	b1d8      	cbz	r0, 14e98 <ble_ll_ctrl_proc_init+0x4c>
        /* The control data starts after the opcode (1 byte) */
        dptr = om->om_data;
   14e60:	6807      	ldr	r7, [r0, #0]
        ctrdata = dptr + 1;
   14e62:	f107 0801 	add.w	r8, r7, #1

        switch (ctrl_proc) {
   14e66:	2d08      	cmp	r5, #8
   14e68:	d851      	bhi.n	14f0e <ble_ll_ctrl_proc_init+0xc2>
   14e6a:	e8df f005 	tbb	[pc, r5]
   14e6e:	1805      	.short	0x1805
   14e70:	322c1e44 	.word	0x322c1e44
   14e74:	5a37      	.short	0x5a37
   14e76:	3e          	.byte	0x3e
   14e77:	00          	.byte	0x00
        case BLE_LL_CTRL_PROC_CONN_UPDATE:
            opcode = BLE_LL_CTRL_CONN_UPDATE_IND;
            ble_ll_ctrl_conn_upd_make(connsm, ctrdata, NULL);
   14e78:	2200      	movs	r2, #0
   14e7a:	4641      	mov	r1, r8
   14e7c:	4630      	mov	r0, r6
   14e7e:	f7ff fe45 	bl	14b0c <ble_ll_ctrl_conn_upd_make>
            opcode = BLE_LL_CTRL_CONN_UPDATE_IND;
   14e82:	2500      	movs	r5, #0
            BLE_LL_ASSERT(0);
            break;
        }

        /* Set llid, length and opcode */
        dptr[0] = opcode;
   14e84:	703d      	strb	r5, [r7, #0]
        len = g_ble_ll_ctrl_pkt_lengths[opcode] + 1;
   14e86:	4b28      	ldr	r3, [pc, #160]	; (14f28 <ble_ll_ctrl_proc_init+0xdc>)
   14e88:	5d5b      	ldrb	r3, [r3, r5]
   14e8a:	3301      	adds	r3, #1

        /* Add packet to transmit queue of connection */
        ble_ll_conn_enqueue_pkt(connsm, om, BLE_LL_LLID_CTRL, len);
   14e8c:	b2db      	uxtb	r3, r3
   14e8e:	2203      	movs	r2, #3
   14e90:	4621      	mov	r1, r4
   14e92:	4630      	mov	r0, r6
   14e94:	f7fe fde8 	bl	13a68 <ble_ll_conn_enqueue_pkt>
    }

    return om;
}
   14e98:	4620      	mov	r0, r4
   14e9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            ble_ll_ctrl_chanmap_req_make(connsm, ctrdata);
   14e9e:	4641      	mov	r1, r8
   14ea0:	4630      	mov	r0, r6
   14ea2:	f7ff ff4b 	bl	14d3c <ble_ll_ctrl_chanmap_req_make>
            opcode = BLE_LL_CTRL_CHANNEL_MAP_REQ;
   14ea6:	2501      	movs	r5, #1
            break;
   14ea8:	e7ec      	b.n	14e84 <ble_ll_ctrl_proc_init+0x38>
            if (connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) {
   14eaa:	79f3      	ldrb	r3, [r6, #7]
   14eac:	2b01      	cmp	r3, #1
   14eae:	d008      	beq.n	14ec2 <ble_ll_ctrl_proc_init+0x76>
                opcode = BLE_LL_CTRL_SLAVE_FEATURE_REQ;
   14eb0:	250e      	movs	r5, #14
            put_le64(ctrdata, ble_ll_read_supp_features());
   14eb2:	f7fb fd9f 	bl	109f4 <ble_ll_read_supp_features>
   14eb6:	4602      	mov	r2, r0
   14eb8:	460b      	mov	r3, r1
   14eba:	4640      	mov	r0, r8
   14ebc:	f014 fc54 	bl	29768 <put_le64>
            break;
   14ec0:	e7e0      	b.n	14e84 <ble_ll_ctrl_proc_init+0x38>
                opcode = BLE_LL_CTRL_FEATURE_REQ;
   14ec2:	2508      	movs	r5, #8
   14ec4:	e7f5      	b.n	14eb2 <ble_ll_ctrl_proc_init+0x66>
            ble_ll_ctrl_version_ind_make(connsm, ctrdata);
   14ec6:	4641      	mov	r1, r8
   14ec8:	4630      	mov	r0, r6
   14eca:	f7ff fea9 	bl	14c20 <ble_ll_ctrl_version_ind_make>
            opcode = BLE_LL_CTRL_VERSION_IND;
   14ece:	250c      	movs	r5, #12
            break;
   14ed0:	e7d8      	b.n	14e84 <ble_ll_ctrl_proc_init+0x38>
            ctrdata[0] = connsm->disconnect_reason;
   14ed2:	f896 303c 	ldrb.w	r3, [r6, #60]	; 0x3c
   14ed6:	707b      	strb	r3, [r7, #1]
            opcode = BLE_LL_CTRL_TERMINATE_IND;
   14ed8:	2502      	movs	r5, #2
            break;
   14eda:	e7d3      	b.n	14e84 <ble_ll_ctrl_proc_init+0x38>
            ble_ll_ctrl_conn_param_pdu_make(connsm, ctrdata, NULL);
   14edc:	2200      	movs	r2, #0
   14ede:	4641      	mov	r1, r8
   14ee0:	4630      	mov	r0, r6
   14ee2:	f7ff fec4 	bl	14c6e <ble_ll_ctrl_conn_param_pdu_make>
            opcode = BLE_LL_CTRL_CONN_PARM_REQ;
   14ee6:	250f      	movs	r5, #15
            break;
   14ee8:	e7cc      	b.n	14e84 <ble_ll_ctrl_proc_init+0x38>
            ble_ll_ctrl_datalen_upd_make(connsm, dptr);
   14eea:	4639      	mov	r1, r7
   14eec:	4630      	mov	r0, r6
   14eee:	f7ff feaa 	bl	14c46 <ble_ll_ctrl_datalen_upd_make>
            opcode = BLE_LL_CTRL_LENGTH_REQ;
   14ef2:	2514      	movs	r5, #20
            break;
   14ef4:	e7c6      	b.n	14e84 <ble_ll_ctrl_proc_init+0x38>
            if (connsm->enc_data.enc_state == CONN_ENC_S_ENCRYPTED) {
   14ef6:	f896 3118 	ldrb.w	r3, [r6, #280]	; 0x118
   14efa:	2b02      	cmp	r3, #2
   14efc:	d101      	bne.n	14f02 <ble_ll_ctrl_proc_init+0xb6>
                opcode = BLE_LL_CTRL_PAUSE_ENC_REQ;
   14efe:	250a      	movs	r5, #10
   14f00:	e7c0      	b.n	14e84 <ble_ll_ctrl_proc_init+0x38>
                ble_ll_ctrl_enc_req_make(connsm, ctrdata);
   14f02:	4641      	mov	r1, r8
   14f04:	4630      	mov	r0, r6
   14f06:	f7ff ff7a 	bl	14dfe <ble_ll_ctrl_enc_req_make>
                opcode = BLE_LL_CTRL_ENC_REQ;
   14f0a:	2503      	movs	r5, #3
   14f0c:	e7ba      	b.n	14e84 <ble_ll_ctrl_proc_init+0x38>
            BLE_LL_ASSERT(0);
   14f0e:	f7f7 f96b 	bl	c1e8 <hal_debugger_connected>
   14f12:	b100      	cbz	r0, 14f16 <ble_ll_ctrl_proc_init+0xca>
   14f14:	be01      	bkpt	0x0001
   14f16:	2300      	movs	r3, #0
   14f18:	461a      	mov	r2, r3
   14f1a:	4619      	mov	r1, r3
   14f1c:	4618      	mov	r0, r3
   14f1e:	f7f7 fb9d 	bl	c65c <__assert_func>
            opcode = BLE_LL_CTRL_PING_REQ;
   14f22:	2512      	movs	r5, #18
   14f24:	e7ae      	b.n	14e84 <ble_ll_ctrl_proc_init+0x38>
   14f26:	bf00      	nop
   14f28:	0002af9c 	.word	0x0002af9c

00014f2c <ble_ll_ctrl_rx_conn_update>:
{
   14f2c:	b538      	push	{r3, r4, r5, lr}
    if (connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) {
   14f2e:	79c3      	ldrb	r3, [r0, #7]
   14f30:	2b01      	cmp	r3, #1
   14f32:	d03b      	beq.n	14fac <ble_ll_ctrl_rx_conn_update+0x80>
   14f34:	460d      	mov	r5, r1
   14f36:	4604      	mov	r4, r0
    reqdata->winsize = dptr[0];
   14f38:	4608      	mov	r0, r1
   14f3a:	f810 3b01 	ldrb.w	r3, [r0], #1
   14f3e:	f884 3176 	strb.w	r3, [r4, #374]	; 0x176
    reqdata->winoffset = get_le16(dptr + 1);
   14f42:	f014 fc24 	bl	2978e <get_le16>
   14f46:	f8a4 0178 	strh.w	r0, [r4, #376]	; 0x178
    reqdata->interval = get_le16(dptr + 3);
   14f4a:	1ce8      	adds	r0, r5, #3
   14f4c:	f014 fc1f 	bl	2978e <get_le16>
   14f50:	f8a4 017a 	strh.w	r0, [r4, #378]	; 0x17a
    reqdata->latency = get_le16(dptr + 5);
   14f54:	1d68      	adds	r0, r5, #5
   14f56:	f014 fc1a 	bl	2978e <get_le16>
   14f5a:	f8a4 017c 	strh.w	r0, [r4, #380]	; 0x17c
    reqdata->timeout = get_le16(dptr + 7);
   14f5e:	1de8      	adds	r0, r5, #7
   14f60:	f014 fc15 	bl	2978e <get_le16>
   14f64:	f8a4 017e 	strh.w	r0, [r4, #382]	; 0x17e
    reqdata->instant = get_le16(dptr + 9);
   14f68:	f105 0009 	add.w	r0, r5, #9
   14f6c:	f014 fc0f 	bl	2978e <get_le16>
   14f70:	f8a4 0180 	strh.w	r0, [r4, #384]	; 0x180
    conn_events = (reqdata->instant - connsm->event_cntr) & 0xFFFF;
   14f74:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
   14f78:	1ac3      	subs	r3, r0, r3
   14f7a:	b29b      	uxth	r3, r3
    if (conn_events >= 32767) {
   14f7c:	f647 72fe 	movw	r2, #32766	; 0x7ffe
   14f80:	4293      	cmp	r3, r2
   14f82:	d80d      	bhi.n	14fa0 <ble_ll_ctrl_rx_conn_update+0x74>
        connsm->csmflags.cfbit.conn_update_sched = 1;
   14f84:	7862      	ldrb	r2, [r4, #1]
   14f86:	f042 0201 	orr.w	r2, r2, #1
   14f8a:	7062      	strb	r2, [r4, #1]
        if (conn_events == 0) {
   14f8c:	b983      	cbnz	r3, 14fb0 <ble_ll_ctrl_rx_conn_update+0x84>
            reqdata->winoffset = 0;
   14f8e:	f8a4 3178 	strh.w	r3, [r4, #376]	; 0x178
            reqdata->winsize = 0;
   14f92:	f884 3176 	strb.w	r3, [r4, #374]	; 0x176
            reqdata->instant += 1;
   14f96:	3001      	adds	r0, #1
   14f98:	f8a4 0180 	strh.w	r0, [r4, #384]	; 0x180
    return rsp_opcode;
   14f9c:	20ff      	movs	r0, #255	; 0xff
   14f9e:	e006      	b.n	14fae <ble_ll_ctrl_rx_conn_update+0x82>
        ble_ll_conn_timeout(connsm, BLE_ERR_INSTANT_PASSED);
   14fa0:	2128      	movs	r1, #40	; 0x28
   14fa2:	4620      	mov	r0, r4
   14fa4:	f7fe fb1c 	bl	135e0 <ble_ll_conn_timeout>
    return rsp_opcode;
   14fa8:	20ff      	movs	r0, #255	; 0xff
   14faa:	e000      	b.n	14fae <ble_ll_ctrl_rx_conn_update+0x82>
        return BLE_LL_CTRL_UNKNOWN_RSP;
   14fac:	2007      	movs	r0, #7
}
   14fae:	bd38      	pop	{r3, r4, r5, pc}
    return rsp_opcode;
   14fb0:	20ff      	movs	r0, #255	; 0xff
   14fb2:	e7fc      	b.n	14fae <ble_ll_ctrl_rx_conn_update+0x82>

00014fb4 <ble_ll_ctrl_rx_chanmap_req>:
{
   14fb4:	b538      	push	{r3, r4, r5, lr}
    if (connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) {
   14fb6:	79c3      	ldrb	r3, [r0, #7]
   14fb8:	2b01      	cmp	r3, #1
   14fba:	d01f      	beq.n	14ffc <ble_ll_ctrl_rx_chanmap_req+0x48>
   14fbc:	460d      	mov	r5, r1
   14fbe:	4604      	mov	r4, r0
    instant = get_le16(dptr + BLE_LL_CONN_CHMAP_LEN);
   14fc0:	1d48      	adds	r0, r1, #5
   14fc2:	f014 fbe4 	bl	2978e <get_le16>
    conn_events = (instant - connsm->event_cntr) & 0xFFFF;
   14fc6:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
   14fca:	1ac3      	subs	r3, r0, r3
   14fcc:	b29b      	uxth	r3, r3
    if (conn_events >= 32767) {
   14fce:	f647 72fe 	movw	r2, #32766	; 0x7ffe
   14fd2:	4293      	cmp	r3, r2
   14fd4:	d80c      	bhi.n	14ff0 <ble_ll_ctrl_rx_chanmap_req+0x3c>
        connsm->chanmap_instant = instant;
   14fd6:	8560      	strh	r0, [r4, #42]	; 0x2a
        memcpy(connsm->req_chanmap, dptr, BLE_LL_CONN_CHMAP_LEN);
   14fd8:	682b      	ldr	r3, [r5, #0]
   14fda:	f8c4 3025 	str.w	r3, [r4, #37]	; 0x25
   14fde:	792b      	ldrb	r3, [r5, #4]
   14fe0:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
        connsm->csmflags.cfbit.chanmap_update_scheduled = 1;
   14fe4:	7863      	ldrb	r3, [r4, #1]
   14fe6:	f043 0310 	orr.w	r3, r3, #16
   14fea:	7063      	strb	r3, [r4, #1]
    return BLE_ERR_MAX;
   14fec:	20ff      	movs	r0, #255	; 0xff
   14fee:	e006      	b.n	14ffe <ble_ll_ctrl_rx_chanmap_req+0x4a>
        ble_ll_conn_timeout(connsm, BLE_ERR_INSTANT_PASSED);
   14ff0:	2128      	movs	r1, #40	; 0x28
   14ff2:	4620      	mov	r0, r4
   14ff4:	f7fe faf4 	bl	135e0 <ble_ll_conn_timeout>
    return BLE_ERR_MAX;
   14ff8:	20ff      	movs	r0, #255	; 0xff
   14ffa:	e000      	b.n	14ffe <ble_ll_ctrl_rx_chanmap_req+0x4a>
        return BLE_LL_CTRL_UNKNOWN_RSP;
   14ffc:	2007      	movs	r0, #7
}
   14ffe:	bd38      	pop	{r3, r4, r5, pc}

00015000 <ble_ll_ctrl_len_proc>:
{
   15000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15004:	4680      	mov	r8, r0
   15006:	460c      	mov	r4, r1
    ctrl_req.max_rx_bytes = get_le16(dptr);
   15008:	4608      	mov	r0, r1
   1500a:	f014 fbc0 	bl	2978e <get_le16>
   1500e:	4605      	mov	r5, r0
    ctrl_req.max_rx_time = get_le16(dptr + 2);
   15010:	1ca0      	adds	r0, r4, #2
   15012:	f014 fbbc 	bl	2978e <get_le16>
   15016:	4606      	mov	r6, r0
    ctrl_req.max_tx_bytes = get_le16(dptr + 4);
   15018:	1d20      	adds	r0, r4, #4
   1501a:	f014 fbb8 	bl	2978e <get_le16>
   1501e:	4607      	mov	r7, r0
    ctrl_req.max_tx_time = get_le16(dptr + 6);
   15020:	1da0      	adds	r0, r4, #6
   15022:	f014 fbb4 	bl	2978e <get_le16>
    if ((ctrl_req.max_rx_bytes < BLE_LL_CONN_SUPP_BYTES_MIN) ||
   15026:	2d1a      	cmp	r5, #26
   15028:	d916      	bls.n	15058 <ble_ll_ctrl_len_proc+0x58>
   1502a:	f5b6 7fa4 	cmp.w	r6, #328	; 0x148
   1502e:	d316      	bcc.n	1505e <ble_ll_ctrl_len_proc+0x5e>
        (ctrl_req.max_rx_time < BLE_LL_CONN_SUPP_TIME_MIN) ||
   15030:	2f1a      	cmp	r7, #26
   15032:	d916      	bls.n	15062 <ble_ll_ctrl_len_proc+0x62>
        (ctrl_req.max_tx_bytes < BLE_LL_CONN_SUPP_BYTES_MIN) ||
   15034:	f5b0 7fa4 	cmp.w	r0, #328	; 0x148
   15038:	d201      	bcs.n	1503e <ble_ll_ctrl_len_proc+0x3e>
        rc = 1;
   1503a:	2001      	movs	r0, #1
    return rc;
   1503c:	e00d      	b.n	1505a <ble_ll_ctrl_len_proc+0x5a>
        connsm->rem_max_rx_time = ctrl_req.max_rx_time;
   1503e:	f8a8 6016 	strh.w	r6, [r8, #22]
        connsm->rem_max_tx_time = ctrl_req.max_tx_time;
   15042:	f8a8 0014 	strh.w	r0, [r8, #20]
        connsm->rem_max_rx_octets = ctrl_req.max_rx_bytes;
   15046:	f888 500d 	strb.w	r5, [r8, #13]
        connsm->rem_max_tx_octets = ctrl_req.max_tx_bytes;
   1504a:	f888 700c 	strb.w	r7, [r8, #12]
        ble_ll_conn_update_eff_data_len(connsm);
   1504e:	4640      	mov	r0, r8
   15050:	f7fd ff1e 	bl	12e90 <ble_ll_conn_update_eff_data_len>
        rc = 0;
   15054:	2000      	movs	r0, #0
   15056:	e000      	b.n	1505a <ble_ll_ctrl_len_proc+0x5a>
        rc = 1;
   15058:	2001      	movs	r0, #1
}
   1505a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = 1;
   1505e:	2001      	movs	r0, #1
   15060:	e7fb      	b.n	1505a <ble_ll_ctrl_len_proc+0x5a>
   15062:	2001      	movs	r0, #1
   15064:	e7f9      	b.n	1505a <ble_ll_ctrl_len_proc+0x5a>

00015066 <ble_ll_ctrl_rx_enc_req>:
{
   15066:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (connsm->conn_role != BLE_LL_CONN_ROLE_SLAVE) {
   15068:	79c3      	ldrb	r3, [r0, #7]
   1506a:	2b02      	cmp	r3, #2
   1506c:	d001      	beq.n	15072 <ble_ll_ctrl_rx_enc_req+0xc>
        return BLE_LL_CTRL_UNKNOWN_RSP;
   1506e:	2007      	movs	r0, #7
}
   15070:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15072:	4616      	mov	r6, r2
   15074:	460d      	mov	r5, r1
   15076:	4604      	mov	r4, r0
    connsm->enc_data.enc_state = CONN_ENC_S_LTK_REQ_WAIT;
   15078:	2708      	movs	r7, #8
   1507a:	f880 7118 	strb.w	r7, [r0, #280]	; 0x118
    connsm->enc_data.rx_pkt_cntr = 0;
   1507e:	2300      	movs	r3, #0
   15080:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
    connsm->enc_data.tx_pkt_cntr = 0;
   15084:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
    connsm->enc_data.tx_encrypted = 0;
   15088:	f880 3119 	strb.w	r3, [r0, #281]	; 0x119
    connsm->enc_data.host_rand_num = get_le64(dptr);
   1508c:	4608      	mov	r0, r1
   1508e:	f014 fb8e 	bl	297ae <get_le64>
   15092:	f504 7394 	add.w	r3, r4, #296	; 0x128
   15096:	e9c3 0100 	strd	r0, r1, [r3]
    connsm->enc_data.enc_div = get_le16(dptr + 8);
   1509a:	19e8      	adds	r0, r5, r7
   1509c:	f014 fb77 	bl	2978e <get_le16>
   150a0:	f8a4 011a 	strh.w	r0, [r4, #282]	; 0x11a
    swap_buf(connsm->enc_data.enc_block.plain_text + 8, dptr + 10, 8);
   150a4:	463a      	mov	r2, r7
   150a6:	f105 010a 	add.w	r1, r5, #10
   150aa:	f504 70a8 	add.w	r0, r4, #336	; 0x150
   150ae:	f014 fbd4 	bl	2985a <swap_buf>
    memcpy(connsm->enc_data.iv, dptr + 18, 4);
   150b2:	f8d5 3012 	ldr.w	r3, [r5, #18]
   150b6:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
    ble_ll_rand_data_get(connsm->enc_data.enc_block.plain_text, 8);
   150ba:	f504 75a4 	add.w	r5, r4, #328	; 0x148
   150be:	4639      	mov	r1, r7
   150c0:	4628      	mov	r0, r5
   150c2:	f001 fc43 	bl	1694c <ble_ll_rand_data_get>
    swap_buf(rspdata, connsm->enc_data.enc_block.plain_text, 8);
   150c6:	463a      	mov	r2, r7
   150c8:	4629      	mov	r1, r5
   150ca:	4630      	mov	r0, r6
   150cc:	f014 fbc5 	bl	2985a <swap_buf>
    ble_ll_rand_data_get(connsm->enc_data.iv + 4, 4);
   150d0:	2104      	movs	r1, #4
   150d2:	f504 709a 	add.w	r0, r4, #308	; 0x134
   150d6:	f001 fc39 	bl	1694c <ble_ll_rand_data_get>
    memcpy(rspdata + 8, connsm->enc_data.iv + 4, 4);
   150da:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
   150de:	60b3      	str	r3, [r6, #8]
    return BLE_LL_CTRL_ENC_RSP;
   150e0:	2004      	movs	r0, #4
   150e2:	e7c5      	b.n	15070 <ble_ll_ctrl_rx_enc_req+0xa>

000150e4 <ble_ll_calc_session_key>:
{
   150e4:	b570      	push	{r4, r5, r6, lr}
   150e6:	4605      	mov	r5, r0
        if (!ble_hw_encrypt_block(&connsm->enc_data.enc_block)) {
   150e8:	f505 709c 	add.w	r0, r5, #312	; 0x138
   150ec:	f004 f970 	bl	193d0 <ble_hw_encrypt_block>
   150f0:	4606      	mov	r6, r0
   150f2:	2800      	cmp	r0, #0
   150f4:	d1f8      	bne.n	150e8 <ble_ll_calc_session_key+0x4>
    console_printf("Calculating Session Key for handle=%u",
   150f6:	88a9      	ldrh	r1, [r5, #4]
   150f8:	481e      	ldr	r0, [pc, #120]	; (15174 <ble_ll_calc_session_key+0x90>)
   150fa:	f7f9 fed9 	bl	eeb0 <console_printf>
    console_printf("\nLTK:");
   150fe:	481e      	ldr	r0, [pc, #120]	; (15178 <ble_ll_calc_session_key+0x94>)
   15100:	f7f9 fed6 	bl	eeb0 <console_printf>
    for (cnt = 0; cnt < 16; ++cnt) {
   15104:	4634      	mov	r4, r6
   15106:	e006      	b.n	15116 <ble_ll_calc_session_key+0x32>
        console_printf("%02x", connsm->enc_data.enc_block.key[cnt]);
   15108:	192b      	adds	r3, r5, r4
   1510a:	f893 1138 	ldrb.w	r1, [r3, #312]	; 0x138
   1510e:	481b      	ldr	r0, [pc, #108]	; (1517c <ble_ll_calc_session_key+0x98>)
   15110:	f7f9 fece 	bl	eeb0 <console_printf>
    for (cnt = 0; cnt < 16; ++cnt) {
   15114:	3401      	adds	r4, #1
   15116:	2c0f      	cmp	r4, #15
   15118:	ddf6      	ble.n	15108 <ble_ll_calc_session_key+0x24>
    console_printf("\nSKD:");
   1511a:	4819      	ldr	r0, [pc, #100]	; (15180 <ble_ll_calc_session_key+0x9c>)
   1511c:	f7f9 fec8 	bl	eeb0 <console_printf>
    for (cnt = 0; cnt < 16; ++cnt) {
   15120:	4634      	mov	r4, r6
   15122:	e006      	b.n	15132 <ble_ll_calc_session_key+0x4e>
        console_printf("%02x", connsm->enc_data.enc_block.plain_text[cnt]);
   15124:	192b      	adds	r3, r5, r4
   15126:	f893 1148 	ldrb.w	r1, [r3, #328]	; 0x148
   1512a:	4814      	ldr	r0, [pc, #80]	; (1517c <ble_ll_calc_session_key+0x98>)
   1512c:	f7f9 fec0 	bl	eeb0 <console_printf>
    for (cnt = 0; cnt < 16; ++cnt) {
   15130:	3401      	adds	r4, #1
   15132:	2c0f      	cmp	r4, #15
   15134:	ddf6      	ble.n	15124 <ble_ll_calc_session_key+0x40>
    console_printf("\nSession Key:");
   15136:	4813      	ldr	r0, [pc, #76]	; (15184 <ble_ll_calc_session_key+0xa0>)
   15138:	f7f9 feba 	bl	eeb0 <console_printf>
    for (cnt = 0; cnt < 16; ++cnt) {
   1513c:	4634      	mov	r4, r6
   1513e:	e006      	b.n	1514e <ble_ll_calc_session_key+0x6a>
        console_printf("%02x", connsm->enc_data.enc_block.cipher_text[cnt]);
   15140:	192b      	adds	r3, r5, r4
   15142:	f893 1158 	ldrb.w	r1, [r3, #344]	; 0x158
   15146:	480d      	ldr	r0, [pc, #52]	; (1517c <ble_ll_calc_session_key+0x98>)
   15148:	f7f9 feb2 	bl	eeb0 <console_printf>
    for (cnt = 0; cnt < 16; ++cnt) {
   1514c:	3401      	adds	r4, #1
   1514e:	2c0f      	cmp	r4, #15
   15150:	ddf6      	ble.n	15140 <ble_ll_calc_session_key+0x5c>
    console_printf("\nIV:");
   15152:	480d      	ldr	r0, [pc, #52]	; (15188 <ble_ll_calc_session_key+0xa4>)
   15154:	f7f9 feac 	bl	eeb0 <console_printf>
    for (cnt = 0; cnt < 8; ++ cnt) {
   15158:	e006      	b.n	15168 <ble_ll_calc_session_key+0x84>
        console_printf("%02x", connsm->enc_data.iv[cnt]);
   1515a:	19ab      	adds	r3, r5, r6
   1515c:	f893 1130 	ldrb.w	r1, [r3, #304]	; 0x130
   15160:	4806      	ldr	r0, [pc, #24]	; (1517c <ble_ll_calc_session_key+0x98>)
   15162:	f7f9 fea5 	bl	eeb0 <console_printf>
    for (cnt = 0; cnt < 8; ++ cnt) {
   15166:	3601      	adds	r6, #1
   15168:	2e07      	cmp	r6, #7
   1516a:	ddf6      	ble.n	1515a <ble_ll_calc_session_key+0x76>
    console_printf("\n");
   1516c:	4807      	ldr	r0, [pc, #28]	; (1518c <ble_ll_calc_session_key+0xa8>)
   1516e:	f7f9 fe9f 	bl	eeb0 <console_printf>
}
   15172:	bd70      	pop	{r4, r5, r6, pc}
   15174:	0002af44 	.word	0x0002af44
   15178:	0002af6c 	.word	0x0002af6c
   1517c:	0002af74 	.word	0x0002af74
   15180:	0002af7c 	.word	0x0002af7c
   15184:	0002af84 	.word	0x0002af84
   15188:	0002af94 	.word	0x0002af94
   1518c:	0002b63c 	.word	0x0002b63c

00015190 <ble_ll_ctrl_rx_enc_rsp>:
{
   15190:	b538      	push	{r3, r4, r5, lr}
    if (connsm->cur_ctrl_proc == BLE_LL_CTRL_PROC_ENCRYPT) {
   15192:	f890 303b 	ldrb.w	r3, [r0, #59]	; 0x3b
   15196:	2b02      	cmp	r3, #2
   15198:	d000      	beq.n	1519c <ble_ll_ctrl_rx_enc_rsp+0xc>
}
   1519a:	bd38      	pop	{r3, r4, r5, pc}
   1519c:	460d      	mov	r5, r1
   1519e:	4604      	mov	r4, r0
        connsm->enc_data.rx_pkt_cntr = 0;
   151a0:	2300      	movs	r3, #0
   151a2:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
        connsm->enc_data.tx_pkt_cntr = 0;
   151a6:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
        connsm->enc_data.tx_encrypted = 0;
   151aa:	f880 3119 	strb.w	r3, [r0, #281]	; 0x119
        swap_buf(connsm->enc_data.enc_block.plain_text, dptr, 8);
   151ae:	2208      	movs	r2, #8
   151b0:	f500 70a4 	add.w	r0, r0, #328	; 0x148
   151b4:	f014 fb51 	bl	2985a <swap_buf>
        memcpy(connsm->enc_data.iv + 4, dptr + 8, 4);
   151b8:	68ab      	ldr	r3, [r5, #8]
   151ba:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
        ble_ll_calc_session_key(connsm);
   151be:	4620      	mov	r0, r4
   151c0:	f7ff ff90 	bl	150e4 <ble_ll_calc_session_key>
        connsm->enc_data.enc_state = CONN_ENC_S_START_ENC_REQ_WAIT;
   151c4:	2306      	movs	r3, #6
   151c6:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
}
   151ca:	e7e6      	b.n	1519a <ble_ll_ctrl_rx_enc_rsp+0xa>

000151cc <ble_ll_ctrl_enc_allowed_pdu_rx>:
{
   151cc:	b508      	push	{r3, lr}
    llid = rxpdu->om_data[0] & BLE_LL_DATA_HDR_LLID_MASK;
   151ce:	6803      	ldr	r3, [r0, #0]
   151d0:	7818      	ldrb	r0, [r3, #0]
   151d2:	f000 0003 	and.w	r0, r0, #3
    len = rxpdu->om_data[1];
   151d6:	7859      	ldrb	r1, [r3, #1]
    if (llid == BLE_LL_LLID_CTRL) {
   151d8:	2803      	cmp	r0, #3
   151da:	d003      	beq.n	151e4 <ble_ll_ctrl_enc_allowed_pdu_rx+0x18>
        opcode = 0;
   151dc:	2200      	movs	r2, #0
    return ble_ll_ctrl_enc_allowed_pdu(llid, len, opcode);
   151de:	f7ff fc31 	bl	14a44 <ble_ll_ctrl_enc_allowed_pdu>
}
   151e2:	bd08      	pop	{r3, pc}
        opcode = rxpdu->om_data[2];
   151e4:	789a      	ldrb	r2, [r3, #2]
   151e6:	e7fa      	b.n	151de <ble_ll_ctrl_enc_allowed_pdu_rx+0x12>

000151e8 <ble_ll_ctrl_enc_allowed_pdu_tx>:
{
   151e8:	b508      	push	{r3, lr}
    llid = ble_hdr->txinfo.hdr_byte & BLE_LL_DATA_HDR_LLID_MASK;
   151ea:	7ac3      	ldrb	r3, [r0, #11]
   151ec:	f003 0303 	and.w	r3, r3, #3
    len = ble_hdr->txinfo.pyld_len;
   151f0:	7a81      	ldrb	r1, [r0, #10]
    if (llid == BLE_LL_LLID_CTRL) {
   151f2:	2b03      	cmp	r3, #3
   151f4:	d004      	beq.n	15200 <ble_ll_ctrl_enc_allowed_pdu_tx+0x18>
        opcode = 0;
   151f6:	2200      	movs	r2, #0
    return ble_ll_ctrl_enc_allowed_pdu(llid, len, opcode);
   151f8:	4618      	mov	r0, r3
   151fa:	f7ff fc23 	bl	14a44 <ble_ll_ctrl_enc_allowed_pdu>
}
   151fe:	bd08      	pop	{r3, pc}
        opcode = m->om_data[0];
   15200:	f850 2c10 	ldr.w	r2, [r0, #-16]
   15204:	7812      	ldrb	r2, [r2, #0]
   15206:	e7f7      	b.n	151f8 <ble_ll_ctrl_enc_allowed_pdu_tx+0x10>

00015208 <ble_ll_ctrl_is_start_enc_rsp>:
    llid = ble_hdr->txinfo.hdr_byte & BLE_LL_DATA_HDR_LLID_MASK;
   15208:	7ec3      	ldrb	r3, [r0, #27]
   1520a:	f003 0303 	and.w	r3, r3, #3
    if (llid == BLE_LL_LLID_CTRL) {
   1520e:	2b03      	cmp	r3, #3
   15210:	d001      	beq.n	15216 <ble_ll_ctrl_is_start_enc_rsp+0xe>
    is_start_enc_rsp = 0;
   15212:	2000      	movs	r0, #0
   15214:	4770      	bx	lr
        opcode = txpdu->om_data[0];
   15216:	6803      	ldr	r3, [r0, #0]
   15218:	781b      	ldrb	r3, [r3, #0]
        if (opcode == BLE_LL_CTRL_START_ENC_RSP) {
   1521a:	2b06      	cmp	r3, #6
   1521c:	d001      	beq.n	15222 <ble_ll_ctrl_is_start_enc_rsp+0x1a>
    is_start_enc_rsp = 0;
   1521e:	2000      	movs	r0, #0
   15220:	4770      	bx	lr
            is_start_enc_rsp = 1;
   15222:	2001      	movs	r0, #1
}
   15224:	4770      	bx	lr

00015226 <ble_ll_ctrl_start_enc_send>:
{
   15226:	b510      	push	{r4, lr}
   15228:	4604      	mov	r4, r0
    om = os_msys_get_pkthdr(BLE_LL_CTRL_MAX_PDU_LEN,
   1522a:	2110      	movs	r1, #16
   1522c:	201b      	movs	r0, #27
   1522e:	f7f7 ff4a 	bl	d0c6 <os_msys_get_pkthdr>
    if (om) {
   15232:	b1b0      	cbz	r0, 15262 <ble_ll_ctrl_start_enc_send+0x3c>
   15234:	4601      	mov	r1, r0
        om->om_data[0] = BLE_LL_CTRL_START_ENC_REQ;
   15236:	6803      	ldr	r3, [r0, #0]
   15238:	2205      	movs	r2, #5
   1523a:	701a      	strb	r2, [r3, #0]
        ble_ll_conn_enqueue_pkt(connsm, om, BLE_LL_LLID_CTRL, 1);
   1523c:	2301      	movs	r3, #1
   1523e:	2203      	movs	r2, #3
   15240:	4620      	mov	r0, r4
   15242:	f7fe fc11 	bl	13a68 <ble_ll_conn_enqueue_pkt>
        if (connsm->cur_ctrl_proc == BLE_LL_CTRL_PROC_IDLE) {
   15246:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
   1524a:	2bff      	cmp	r3, #255	; 0xff
   1524c:	d001      	beq.n	15252 <ble_ll_ctrl_start_enc_send+0x2c>
        rc = 0;
   1524e:	2000      	movs	r0, #0
}
   15250:	bd10      	pop	{r4, pc}
            connsm->cur_ctrl_proc = BLE_LL_CTRL_PROC_ENCRYPT;
   15252:	2302      	movs	r3, #2
   15254:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
            ble_ll_ctrl_start_rsp_timer(connsm);
   15258:	4620      	mov	r0, r4
   1525a:	f7ff fc43 	bl	14ae4 <ble_ll_ctrl_start_rsp_timer>
        rc = 0;
   1525e:	2000      	movs	r0, #0
   15260:	e7f6      	b.n	15250 <ble_ll_ctrl_start_enc_send+0x2a>
        rc = -1;
   15262:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15266:	e7f3      	b.n	15250 <ble_ll_ctrl_start_enc_send+0x2a>

00015268 <ble_ll_ctrl_conn_param_reply>:
{
   15268:	b508      	push	{r3, lr}
    if (connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) {
   1526a:	79c3      	ldrb	r3, [r0, #7]
   1526c:	2b02      	cmp	r3, #2
   1526e:	d004      	beq.n	1527a <ble_ll_ctrl_conn_param_reply+0x12>
        ble_ll_ctrl_conn_upd_make(connsm, rsp + 1, req);
   15270:	3101      	adds	r1, #1
   15272:	f7ff fc4b 	bl	14b0c <ble_ll_ctrl_conn_upd_make>
        rsp_opcode = BLE_LL_CTRL_CONN_UPDATE_IND;
   15276:	2000      	movs	r0, #0
}
   15278:	bd08      	pop	{r3, pc}
        ble_ll_ctrl_conn_param_pdu_make(connsm, rsp + 1, req);
   1527a:	3101      	adds	r1, #1
   1527c:	f7ff fcf7 	bl	14c6e <ble_ll_ctrl_conn_param_pdu_make>
        rsp_opcode = BLE_LL_CTRL_CONN_PARM_RSP;
   15280:	2010      	movs	r0, #16
   15282:	e7f9      	b.n	15278 <ble_ll_ctrl_conn_param_reply+0x10>

00015284 <ble_ll_ctrl_conn_param_pdu_proc>:
{
   15284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15288:	4604      	mov	r4, r0
   1528a:	460d      	mov	r5, r1
   1528c:	4617      	mov	r7, r2
   1528e:	461e      	mov	r6, r3
    req = &connsm->conn_cp;
   15290:	f500 78c1 	add.w	r8, r0, #386	; 0x182
    req->interval_min = get_le16(dptr);
   15294:	4608      	mov	r0, r1
   15296:	f014 fa7a 	bl	2978e <get_le16>
   1529a:	f8a4 0182 	strh.w	r0, [r4, #386]	; 0x182
    req->interval_max = get_le16(dptr + 2);
   1529e:	1ca8      	adds	r0, r5, #2
   152a0:	f014 fa75 	bl	2978e <get_le16>
   152a4:	f8a4 0184 	strh.w	r0, [r4, #388]	; 0x184
    req->latency = get_le16(dptr + 4);
   152a8:	1d28      	adds	r0, r5, #4
   152aa:	f014 fa70 	bl	2978e <get_le16>
   152ae:	f8a4 0186 	strh.w	r0, [r4, #390]	; 0x186
    req->timeout = get_le16(dptr + 6);
   152b2:	1da8      	adds	r0, r5, #6
   152b4:	f014 fa6b 	bl	2978e <get_le16>
   152b8:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188
    req->pref_periodicity = dptr[8];
   152bc:	7a2b      	ldrb	r3, [r5, #8]
   152be:	f884 318a 	strb.w	r3, [r4, #394]	; 0x18a
    req->ref_conn_event_cnt  = get_le16(dptr + 9);
   152c2:	f105 0009 	add.w	r0, r5, #9
   152c6:	f014 fa62 	bl	2978e <get_le16>
   152ca:	f8a4 018c 	strh.w	r0, [r4, #396]	; 0x18c
    req->offset0 = get_le16(dptr + 11);
   152ce:	f105 000b 	add.w	r0, r5, #11
   152d2:	f014 fa5c 	bl	2978e <get_le16>
   152d6:	f8a4 018e 	strh.w	r0, [r4, #398]	; 0x18e
    req->offset1 = get_le16(dptr + 13);
   152da:	f105 000d 	add.w	r0, r5, #13
   152de:	f014 fa56 	bl	2978e <get_le16>
   152e2:	f8a4 0190 	strh.w	r0, [r4, #400]	; 0x190
    req->offset2 = get_le16(dptr + 15);
   152e6:	f105 000f 	add.w	r0, r5, #15
   152ea:	f014 fa50 	bl	2978e <get_le16>
   152ee:	f8a4 0192 	strh.w	r0, [r4, #402]	; 0x192
    req->offset3 = get_le16(dptr + 17);
   152f2:	f105 0011 	add.w	r0, r5, #17
   152f6:	f014 fa4a 	bl	2978e <get_le16>
   152fa:	f8a4 0194 	strh.w	r0, [r4, #404]	; 0x194
    req->offset4 = get_le16(dptr + 19);
   152fe:	f105 0013 	add.w	r0, r5, #19
   15302:	f014 fa44 	bl	2978e <get_le16>
   15306:	f8a4 0196 	strh.w	r0, [r4, #406]	; 0x196
    req->offset5 = get_le16(dptr + 21);
   1530a:	f105 0015 	add.w	r0, r5, #21
   1530e:	f014 fa3e 	bl	2978e <get_le16>
   15312:	f8a4 0198 	strh.w	r0, [r4, #408]	; 0x198
    rc = ble_ll_conn_hci_chk_conn_params(req->interval_min,
   15316:	f8b4 3188 	ldrh.w	r3, [r4, #392]	; 0x188
   1531a:	f8b4 2186 	ldrh.w	r2, [r4, #390]	; 0x186
   1531e:	f8b4 1184 	ldrh.w	r1, [r4, #388]	; 0x184
   15322:	f8b4 0182 	ldrh.w	r0, [r4, #386]	; 0x182
   15326:	f7fe fdfb 	bl	13f20 <ble_ll_conn_hci_chk_conn_params>
    if (rc) {
   1532a:	2800      	cmp	r0, #0
   1532c:	d156      	bne.n	153dc <ble_ll_ctrl_conn_param_pdu_proc+0x158>
    if (opcode == BLE_LL_CTRL_CONN_PARM_REQ) {
   1532e:	2e0f      	cmp	r6, #15
   15330:	d00b      	beq.n	1534a <ble_ll_ctrl_conn_param_pdu_proc+0xc6>
    if ((connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) ||
   15332:	79e3      	ldrb	r3, [r4, #7]
   15334:	2b02      	cmp	r3, #2
   15336:	d024      	beq.n	15382 <ble_ll_ctrl_conn_param_pdu_proc+0xfe>
   15338:	2e10      	cmp	r6, #16
   1533a:	d022      	beq.n	15382 <ble_ll_ctrl_conn_param_pdu_proc+0xfe>
        if (!ble_ll_hci_is_le_event_enabled(BLE_HCI_LE_SUBEV_REM_CONN_PARM_REQ)){
   1533c:	2006      	movs	r0, #6
   1533e:	f001 f8e3 	bl	16508 <ble_ll_hci_is_le_event_enabled>
   15342:	2800      	cmp	r0, #0
   15344:	d13e      	bne.n	153c4 <ble_ll_ctrl_conn_param_pdu_proc+0x140>
            ble_err = BLE_ERR_UNSUPP_REM_FEATURE;
   15346:	231a      	movs	r3, #26
   15348:	e049      	b.n	153de <ble_ll_ctrl_conn_param_pdu_proc+0x15a>
        if ((connsm->conn_itvl >= req->interval_min) &&
   1534a:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
   1534e:	f8b4 2182 	ldrh.w	r2, [r4, #386]	; 0x182
   15352:	4293      	cmp	r3, r2
   15354:	d3ed      	bcc.n	15332 <ble_ll_ctrl_conn_param_pdu_proc+0xae>
            (connsm->conn_itvl <= req->interval_max) &&
   15356:	f8b4 2184 	ldrh.w	r2, [r4, #388]	; 0x184
        if ((connsm->conn_itvl >= req->interval_min) &&
   1535a:	4293      	cmp	r3, r2
   1535c:	d8e9      	bhi.n	15332 <ble_ll_ctrl_conn_param_pdu_proc+0xae>
            (connsm->supervision_tmo == req->timeout) &&
   1535e:	f8b4 206c 	ldrh.w	r2, [r4, #108]	; 0x6c
   15362:	f8b4 3188 	ldrh.w	r3, [r4, #392]	; 0x188
            (connsm->conn_itvl <= req->interval_max) &&
   15366:	429a      	cmp	r2, r3
   15368:	d1e3      	bne.n	15332 <ble_ll_ctrl_conn_param_pdu_proc+0xae>
            (connsm->slave_latency == req->latency)) {
   1536a:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
   1536e:	f8b4 3186 	ldrh.w	r3, [r4, #390]	; 0x186
            (connsm->supervision_tmo == req->timeout) &&
   15372:	429a      	cmp	r2, r3
   15374:	d1dd      	bne.n	15332 <ble_ll_ctrl_conn_param_pdu_proc+0xae>
        rsp_opcode = ble_ll_ctrl_conn_param_reply(connsm, rspbuf, req);
   15376:	4642      	mov	r2, r8
   15378:	4639      	mov	r1, r7
   1537a:	4620      	mov	r0, r4
   1537c:	f7ff ff74 	bl	15268 <ble_ll_ctrl_conn_param_reply>
   15380:	e030      	b.n	153e4 <ble_ll_ctrl_conn_param_pdu_proc+0x160>
        if (hcu->handle != 0) {
   15382:	f8b4 3168 	ldrh.w	r3, [r4, #360]	; 0x168
   15386:	2b00      	cmp	r3, #0
   15388:	d0d8      	beq.n	1533c <ble_ll_ctrl_conn_param_pdu_proc+0xb8>
            if (!((req->interval_min < hcu->conn_itvl_min) ||
   1538a:	f8b4 3182 	ldrh.w	r3, [r4, #386]	; 0x182
   1538e:	f8b4 216a 	ldrh.w	r2, [r4, #362]	; 0x16a
   15392:	4293      	cmp	r3, r2
   15394:	d3d2      	bcc.n	1533c <ble_ll_ctrl_conn_param_pdu_proc+0xb8>
                  (req->interval_min > hcu->conn_itvl_max) ||
   15396:	f8b4 116c 	ldrh.w	r1, [r4, #364]	; 0x16c
            if (!((req->interval_min < hcu->conn_itvl_min) ||
   1539a:	428b      	cmp	r3, r1
   1539c:	d8ce      	bhi.n	1533c <ble_ll_ctrl_conn_param_pdu_proc+0xb8>
                  (req->interval_max < hcu->conn_itvl_min) ||
   1539e:	f8b4 3184 	ldrh.w	r3, [r4, #388]	; 0x184
                  (req->interval_min > hcu->conn_itvl_max) ||
   153a2:	429a      	cmp	r2, r3
   153a4:	d8ca      	bhi.n	1533c <ble_ll_ctrl_conn_param_pdu_proc+0xb8>
                  (req->interval_max < hcu->conn_itvl_min) ||
   153a6:	4299      	cmp	r1, r3
   153a8:	d3c8      	bcc.n	1533c <ble_ll_ctrl_conn_param_pdu_proc+0xb8>
                  (req->latency != hcu->conn_latency) ||
   153aa:	f8b4 2186 	ldrh.w	r2, [r4, #390]	; 0x186
   153ae:	f8b4 316e 	ldrh.w	r3, [r4, #366]	; 0x16e
                  (req->interval_max > hcu->conn_itvl_max) ||
   153b2:	429a      	cmp	r2, r3
   153b4:	d1c2      	bne.n	1533c <ble_ll_ctrl_conn_param_pdu_proc+0xb8>
                  (req->timeout != hcu->supervision_timeout))) {
   153b6:	f8b4 2188 	ldrh.w	r2, [r4, #392]	; 0x188
   153ba:	f8b4 3170 	ldrh.w	r3, [r4, #368]	; 0x170
            if (!((req->interval_min < hcu->conn_itvl_min) ||
   153be:	429a      	cmp	r2, r3
   153c0:	d1bc      	bne.n	1533c <ble_ll_ctrl_conn_param_pdu_proc+0xb8>
   153c2:	e7d8      	b.n	15376 <ble_ll_ctrl_conn_param_pdu_proc+0xf2>
        ble_ll_hci_ev_rem_conn_parm_req(connsm, req);
   153c4:	4641      	mov	r1, r8
   153c6:	4620      	mov	r0, r4
   153c8:	f001 f97c 	bl	166c4 <ble_ll_hci_ev_rem_conn_parm_req>
        connsm->host_reply_opcode = opcode;
   153cc:	f884 6038 	strb.w	r6, [r4, #56]	; 0x38
        connsm->csmflags.cfbit.awaiting_host_reply = 1;
   153d0:	7823      	ldrb	r3, [r4, #0]
   153d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   153d6:	7023      	strb	r3, [r4, #0]
        rsp_opcode = 255;
   153d8:	20ff      	movs	r0, #255	; 0xff
   153da:	e003      	b.n	153e4 <ble_ll_ctrl_conn_param_pdu_proc+0x160>
        ble_err = BLE_ERR_INV_LMP_LL_PARM;
   153dc:	231e      	movs	r3, #30
        rspbuf[1] = opcode;
   153de:	707e      	strb	r6, [r7, #1]
        rspbuf[2] = ble_err;
   153e0:	70bb      	strb	r3, [r7, #2]
        rsp_opcode = BLE_LL_CTRL_REJECT_IND_EXT;
   153e2:	2011      	movs	r0, #17
}
   153e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000153e8 <ble_ll_ctrl_rx_conn_param_rsp>:
{
   153e8:	b508      	push	{r3, lr}
    if (connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) {
   153ea:	79c3      	ldrb	r3, [r0, #7]
   153ec:	2b02      	cmp	r3, #2
   153ee:	d011      	beq.n	15414 <ble_ll_ctrl_rx_conn_param_rsp+0x2c>
    if (connsm->csmflags.cfbit.awaiting_host_reply) {
   153f0:	7803      	ldrb	r3, [r0, #0]
   153f2:	f013 0f40 	tst.w	r3, #64	; 0x40
   153f6:	d003      	beq.n	15400 <ble_ll_ctrl_rx_conn_param_rsp+0x18>
        connsm->csmflags.cfbit.awaiting_host_reply = 0;
   153f8:	7803      	ldrb	r3, [r0, #0]
   153fa:	f36f 1386 	bfc	r3, #6, #1
   153fe:	7003      	strb	r3, [r0, #0]
    if (!IS_PENDING_CTRL_PROC(connsm, BLE_LL_CTRL_PROC_CONN_PARAM_REQ)) {
   15400:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
   15404:	f013 0f40 	tst.w	r3, #64	; 0x40
   15408:	d006      	beq.n	15418 <ble_ll_ctrl_rx_conn_param_rsp+0x30>
    rsp_opcode = ble_ll_ctrl_conn_param_pdu_proc(connsm, dptr, rspbuf,
   1540a:	2310      	movs	r3, #16
   1540c:	f7ff ff3a 	bl	15284 <ble_ll_ctrl_conn_param_pdu_proc>
   15410:	b2c0      	uxtb	r0, r0
}
   15412:	bd08      	pop	{r3, pc}
        return BLE_LL_CTRL_UNKNOWN_RSP;
   15414:	2007      	movs	r0, #7
   15416:	e7fc      	b.n	15412 <ble_ll_ctrl_rx_conn_param_rsp+0x2a>
        return BLE_ERR_MAX;
   15418:	20ff      	movs	r0, #255	; 0xff
   1541a:	e7fa      	b.n	15412 <ble_ll_ctrl_rx_conn_param_rsp+0x2a>

0001541c <ble_ll_ctrl_is_terminate_ind>:
ble_ll_ctrl_is_terminate_ind(uint8_t hdr, uint8_t opcode)
{
    int rc;

    rc = 0;
    if ((hdr & BLE_LL_DATA_HDR_LLID_MASK) == BLE_LL_LLID_CTRL) {
   1541c:	f000 0003 	and.w	r0, r0, #3
   15420:	2803      	cmp	r0, #3
   15422:	d001      	beq.n	15428 <ble_ll_ctrl_is_terminate_ind+0xc>
    rc = 0;
   15424:	2000      	movs	r0, #0
   15426:	4770      	bx	lr
        if (opcode == BLE_LL_CTRL_TERMINATE_IND) {
   15428:	2902      	cmp	r1, #2
   1542a:	d001      	beq.n	15430 <ble_ll_ctrl_is_terminate_ind+0x14>
    rc = 0;
   1542c:	2000      	movs	r0, #0
   1542e:	4770      	bx	lr
            rc = 1;
   15430:	2001      	movs	r0, #1
        }
    }
    return rc;
}
   15432:	4770      	bx	lr

00015434 <ble_ll_ctrl_terminate_start>:
 *
 * @param connsm
 */
void
ble_ll_ctrl_terminate_start(struct ble_ll_conn_sm *connsm)
{
   15434:	b570      	push	{r4, r5, r6, lr}
    int ctrl_proc;
    uint32_t usecs;
    struct os_mbuf *om;

    BLE_LL_ASSERT(connsm->disconnect_reason != 0);
   15436:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
   1543a:	b1bb      	cbz	r3, 1546c <ble_ll_ctrl_terminate_start+0x38>
   1543c:	4604      	mov	r4, r0

    ctrl_proc = BLE_LL_CTRL_PROC_TERMINATE;
    om = ble_ll_ctrl_proc_init(connsm, ctrl_proc);
   1543e:	2105      	movs	r1, #5
   15440:	f7ff fd04 	bl	14e4c <ble_ll_ctrl_proc_init>
    if (om) {
   15444:	b188      	cbz	r0, 1546a <ble_ll_ctrl_terminate_start+0x36>
        CONN_F_TERMINATE_STARTED(connsm) = 1;
   15446:	7823      	ldrb	r3, [r4, #0]
   15448:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1544c:	7023      	strb	r3, [r4, #0]

        /* Set terminate "timeout" */
        usecs = connsm->supervision_tmo * BLE_HCI_CONN_SPVN_TMO_UNITS * 1000;
   1544e:	f8b4 306c 	ldrh.w	r3, [r4, #108]	; 0x6c
   15452:	f242 7610 	movw	r6, #10000	; 0x2710
   15456:	fb06 f603 	mul.w	r6, r6, r3
        connsm->terminate_timeout = os_cputime_get32() +
   1545a:	f014 fa38 	bl	298ce <os_cputime_get32>
   1545e:	4605      	mov	r5, r0
            os_cputime_usecs_to_ticks(usecs);
   15460:	4630      	mov	r0, r6
   15462:	f014 fa39 	bl	298d8 <os_cputime_usecs_to_ticks>
        connsm->terminate_timeout = os_cputime_get32() +
   15466:	4428      	add	r0, r5
   15468:	6620      	str	r0, [r4, #96]	; 0x60
    }
}
   1546a:	bd70      	pop	{r4, r5, r6, pc}
    BLE_LL_ASSERT(connsm->disconnect_reason != 0);
   1546c:	f7f6 febc 	bl	c1e8 <hal_debugger_connected>
   15470:	b100      	cbz	r0, 15474 <ble_ll_ctrl_terminate_start+0x40>
   15472:	be01      	bkpt	0x0001
   15474:	2300      	movs	r3, #0
   15476:	461a      	mov	r2, r3
   15478:	4619      	mov	r1, r3
   1547a:	4618      	mov	r0, r3
   1547c:	f7f7 f8ee 	bl	c65c <__assert_func>

00015480 <ble_ll_ctrl_proc_start>:
 *
 * @param connsm Pointer to connection state machine.
 */
void
ble_ll_ctrl_proc_start(struct ble_ll_conn_sm *connsm, int ctrl_proc)
{
   15480:	b538      	push	{r3, r4, r5, lr}
    struct os_mbuf *om;

    BLE_LL_ASSERT(ctrl_proc != BLE_LL_CTRL_PROC_TERMINATE);
   15482:	2905      	cmp	r1, #5
   15484:	d00d      	beq.n	154a2 <ble_ll_ctrl_proc_start+0x22>
   15486:	4604      	mov	r4, r0
   15488:	460d      	mov	r5, r1

    om = NULL;
    if (connsm->cur_ctrl_proc == BLE_LL_CTRL_PROC_IDLE) {
   1548a:	f890 303b 	ldrb.w	r3, [r0, #59]	; 0x3b
   1548e:	2bff      	cmp	r3, #255	; 0xff
   15490:	d011      	beq.n	154b6 <ble_ll_ctrl_proc_start+0x36>
            }
        }
    }

    /* Set bitmask denoting control procedure is pending */
    connsm->pending_ctrl_procs |= (1 << ctrl_proc);
   15492:	2101      	movs	r1, #1
   15494:	40a9      	lsls	r1, r5
   15496:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
   1549a:	4319      	orrs	r1, r3
   1549c:	f8a4 1048 	strh.w	r1, [r4, #72]	; 0x48
}
   154a0:	bd38      	pop	{r3, r4, r5, pc}
    BLE_LL_ASSERT(ctrl_proc != BLE_LL_CTRL_PROC_TERMINATE);
   154a2:	f7f6 fea1 	bl	c1e8 <hal_debugger_connected>
   154a6:	b100      	cbz	r0, 154aa <ble_ll_ctrl_proc_start+0x2a>
   154a8:	be01      	bkpt	0x0001
   154aa:	2300      	movs	r3, #0
   154ac:	461a      	mov	r2, r3
   154ae:	4619      	mov	r1, r3
   154b0:	4618      	mov	r0, r3
   154b2:	f7f7 f8d3 	bl	c65c <__assert_func>
        om = ble_ll_ctrl_proc_init(connsm, ctrl_proc);
   154b6:	f7ff fcc9 	bl	14e4c <ble_ll_ctrl_proc_init>
        if (om) {
   154ba:	2800      	cmp	r0, #0
   154bc:	d0e9      	beq.n	15492 <ble_ll_ctrl_proc_start+0x12>
            connsm->cur_ctrl_proc = ctrl_proc;
   154be:	f884 503b 	strb.w	r5, [r4, #59]	; 0x3b
            if (ctrl_proc != BLE_LL_CTRL_PROC_CHAN_MAP_UPD) {
   154c2:	2d01      	cmp	r5, #1
   154c4:	d0e5      	beq.n	15492 <ble_ll_ctrl_proc_start+0x12>
                ble_ll_ctrl_start_rsp_timer(connsm);
   154c6:	4620      	mov	r0, r4
   154c8:	f7ff fb0c 	bl	14ae4 <ble_ll_ctrl_start_rsp_timer>
   154cc:	e7e1      	b.n	15492 <ble_ll_ctrl_proc_start+0x12>

000154ce <ble_ll_ctrl_initiate_dle>:
{
   154ce:	b508      	push	{r3, lr}
    if (!(connsm->conn_features & BLE_LL_FEAT_DATA_LEN_EXT)) {
   154d0:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
   154d4:	f013 0f20 	tst.w	r3, #32
   154d8:	d010      	beq.n	154fc <ble_ll_ctrl_initiate_dle+0x2e>
    if ((connsm->max_tx_octets <= BLE_LL_CONN_SUPP_BYTES_MIN) &&
   154da:	7a83      	ldrb	r3, [r0, #10]
   154dc:	2b1b      	cmp	r3, #27
   154de:	d80a      	bhi.n	154f6 <ble_ll_ctrl_initiate_dle+0x28>
        (connsm->max_rx_octets <= BLE_LL_CONN_SUPP_BYTES_MIN) &&
   154e0:	7ac3      	ldrb	r3, [r0, #11]
    if ((connsm->max_tx_octets <= BLE_LL_CONN_SUPP_BYTES_MIN) &&
   154e2:	2b1b      	cmp	r3, #27
   154e4:	d807      	bhi.n	154f6 <ble_ll_ctrl_initiate_dle+0x28>
        (connsm->max_tx_time <= BLE_LL_CONN_SUPP_TIME_MIN) &&
   154e6:	8a03      	ldrh	r3, [r0, #16]
        (connsm->max_rx_octets <= BLE_LL_CONN_SUPP_BYTES_MIN) &&
   154e8:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   154ec:	d803      	bhi.n	154f6 <ble_ll_ctrl_initiate_dle+0x28>
        (connsm->max_rx_time <= BLE_LL_CONN_SUPP_TIME_MIN)) {
   154ee:	8a43      	ldrh	r3, [r0, #18]
        (connsm->max_tx_time <= BLE_LL_CONN_SUPP_TIME_MIN) &&
   154f0:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   154f4:	d902      	bls.n	154fc <ble_ll_ctrl_initiate_dle+0x2e>
    ble_ll_ctrl_proc_start(connsm, BLE_LL_CTRL_PROC_DATA_LEN_UPD);
   154f6:	2108      	movs	r1, #8
   154f8:	f7ff ffc2 	bl	15480 <ble_ll_ctrl_proc_start>
}
   154fc:	bd08      	pop	{r3, pc}

000154fe <ble_ll_ctrl_chk_proc_start>:
 *
 * @param connsm Pointer to connection state machine.
 */
void
ble_ll_ctrl_chk_proc_start(struct ble_ll_conn_sm *connsm)
{
   154fe:	b538      	push	{r3, r4, r5, lr}
   15500:	4604      	mov	r4, r0

    /*
     * If we are terminating, dont start any new procedures but start
     * terminate if needed
     */
    if (connsm->disconnect_reason) {
   15502:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
   15506:	b133      	cbz	r3, 15516 <ble_ll_ctrl_chk_proc_start+0x18>
        if (!CONN_F_TERMINATE_STARTED(connsm)) {
   15508:	f990 3000 	ldrsb.w	r3, [r0]
   1550c:	2b00      	cmp	r3, #0
   1550e:	db06      	blt.n	1551e <ble_ll_ctrl_chk_proc_start+0x20>
            /*
             * If the terminate procedure has not started it means we were not
             * able to start it right away (no control pdu was available).
             * Start it now. No need to start any other procedures.
             */
            ble_ll_ctrl_terminate_start(connsm);
   15510:	f7ff ff90 	bl	15434 <ble_ll_ctrl_terminate_start>
   15514:	e003      	b.n	1551e <ble_ll_ctrl_chk_proc_start+0x20>
        }
        return;
    }

    /* If there is a running procedure or no pending, do nothing */
    if ((connsm->cur_ctrl_proc == BLE_LL_CTRL_PROC_IDLE) &&
   15516:	f890 303b 	ldrb.w	r3, [r0, #59]	; 0x3b
   1551a:	2bff      	cmp	r3, #255	; 0xff
   1551c:	d000      	beq.n	15520 <ble_ll_ctrl_chk_proc_start+0x22>
                    break;
                }
            }
        }
    }
}
   1551e:	bd38      	pop	{r3, r4, r5, pc}
        (connsm->pending_ctrl_procs != 0)) {
   15520:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
    if ((connsm->cur_ctrl_proc == BLE_LL_CTRL_PROC_IDLE) &&
   15524:	2b00      	cmp	r3, #0
   15526:	d0fa      	beq.n	1551e <ble_ll_ctrl_chk_proc_start+0x20>
        for (i = 0; i < BLE_LL_CTRL_PROC_NUM; ++i) {
   15528:	2500      	movs	r5, #0
   1552a:	2d09      	cmp	r5, #9
   1552c:	dcf7      	bgt.n	1551e <ble_ll_ctrl_chk_proc_start+0x20>
            if (IS_PENDING_CTRL_PROC(connsm, i)) {
   1552e:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
   15532:	412b      	asrs	r3, r5
   15534:	f013 0f01 	tst.w	r3, #1
   15538:	d017      	beq.n	1556a <ble_ll_ctrl_chk_proc_start+0x6c>
                if ((i == BLE_LL_CTRL_PROC_VERSION_XCHG) &&
   1553a:	2d04      	cmp	r5, #4
   1553c:	d004      	beq.n	15548 <ble_ll_ctrl_chk_proc_start+0x4a>
                    ble_ll_ctrl_proc_start(connsm, i);
   1553e:	4629      	mov	r1, r5
   15540:	4620      	mov	r0, r4
   15542:	f7ff ff9d 	bl	15480 <ble_ll_ctrl_proc_start>
                    break;
   15546:	e7ea      	b.n	1551e <ble_ll_ctrl_chk_proc_start+0x20>
                if ((i == BLE_LL_CTRL_PROC_VERSION_XCHG) &&
   15548:	7863      	ldrb	r3, [r4, #1]
   1554a:	f013 0f08 	tst.w	r3, #8
   1554e:	d0f6      	beq.n	1553e <ble_ll_ctrl_chk_proc_start+0x40>
                    ble_ll_hci_ev_rd_rem_ver(connsm, BLE_ERR_SUCCESS);
   15550:	2100      	movs	r1, #0
   15552:	4620      	mov	r0, r4
   15554:	f001 f985 	bl	16862 <ble_ll_hci_ev_rd_rem_ver>
                    CLR_PENDING_CTRL_PROC(connsm, i);
   15558:	2301      	movs	r3, #1
   1555a:	fa03 f205 	lsl.w	r2, r3, r5
   1555e:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
   15562:	ea23 0302 	bic.w	r3, r3, r2
   15566:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
        for (i = 0; i < BLE_LL_CTRL_PROC_NUM; ++i) {
   1556a:	3501      	adds	r5, #1
   1556c:	e7dd      	b.n	1552a <ble_ll_ctrl_chk_proc_start+0x2c>

0001556e <ble_ll_ctrl_proc_stop>:
{
   1556e:	b538      	push	{r3, r4, r5, lr}
   15570:	4604      	mov	r4, r0
   15572:	460d      	mov	r5, r1
    if (connsm->cur_ctrl_proc == ctrl_proc) {
   15574:	f890 303b 	ldrb.w	r3, [r0, #59]	; 0x3b
   15578:	428b      	cmp	r3, r1
   1557a:	d00c      	beq.n	15596 <ble_ll_ctrl_proc_stop+0x28>
    CLR_PENDING_CTRL_PROC(connsm, ctrl_proc);
   1557c:	2101      	movs	r1, #1
   1557e:	fa01 f305 	lsl.w	r3, r1, r5
   15582:	f8b4 1048 	ldrh.w	r1, [r4, #72]	; 0x48
   15586:	ea21 0103 	bic.w	r1, r1, r3
   1558a:	f8a4 1048 	strh.w	r1, [r4, #72]	; 0x48
    ble_ll_ctrl_chk_proc_start(connsm);
   1558e:	4620      	mov	r0, r4
   15590:	f7ff ffb5 	bl	154fe <ble_ll_ctrl_chk_proc_start>
}
   15594:	bd38      	pop	{r3, r4, r5, pc}
    os_callout_stop(&co->co);
   15596:	30bc      	adds	r0, #188	; 0xbc
   15598:	f7f7 fa16 	bl	c9c8 <os_callout_stop>
        connsm->cur_ctrl_proc = BLE_LL_CTRL_PROC_IDLE;
   1559c:	23ff      	movs	r3, #255	; 0xff
   1559e:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
   155a2:	e7eb      	b.n	1557c <ble_ll_ctrl_proc_stop+0xe>

000155a4 <ble_ll_ctrl_proc_unk_rsp>:
{
   155a4:	b538      	push	{r3, r4, r5, lr}
   155a6:	4605      	mov	r5, r0
   155a8:	4613      	mov	r3, r2
    opcode = dptr[0];
   155aa:	780c      	ldrb	r4, [r1, #0]
    switch (opcode) {
   155ac:	2c14      	cmp	r4, #20
   155ae:	d837      	bhi.n	15620 <ble_ll_ctrl_proc_unk_rsp+0x7c>
   155b0:	e8df f004 	tbb	[pc, r4]
   155b4:	36363639 	.word	0x36363639
   155b8:	36363636 	.word	0x36363636
   155bc:	36363636 	.word	0x36363636
   155c0:	1b133636 	.word	0x1b133636
   155c4:	362e3638 	.word	0x362e3638
   155c8:	0b          	.byte	0x0b
   155c9:	00          	.byte	0x00
        BLE_LL_CONN_CLEAR_FEATURE(connsm, BLE_LL_FEAT_DATA_LEN_EXT);
   155ca:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
   155ce:	f023 0320 	bic.w	r3, r3, #32
   155d2:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
        ctrl_proc = BLE_LL_CTRL_PROC_DATA_LEN_UPD;
   155d6:	2408      	movs	r4, #8
        break;
   155d8:	e025      	b.n	15626 <ble_ll_ctrl_proc_unk_rsp+0x82>
        BLE_LL_CONN_CLEAR_FEATURE(connsm, BLE_LL_FEAT_SLAVE_INIT);
   155da:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
   155de:	f023 0308 	bic.w	r3, r3, #8
   155e2:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
        ctrl_proc = BLE_LL_CTRL_PROC_FEATURE_XCHG;
   155e6:	2403      	movs	r4, #3
        break;
   155e8:	e01d      	b.n	15626 <ble_ll_ctrl_proc_unk_rsp+0x82>
        BLE_LL_CONN_CLEAR_FEATURE(connsm, BLE_LL_FEAT_CONN_PARM_REQ);
   155ea:	f890 203f 	ldrb.w	r2, [r0, #63]	; 0x3f
   155ee:	f022 0202 	bic.w	r2, r2, #2
   155f2:	f880 203f 	strb.w	r2, [r0, #63]	; 0x3f
        if (connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) {
   155f6:	79c2      	ldrb	r2, [r0, #7]
   155f8:	2a01      	cmp	r2, #1
   155fa:	d001      	beq.n	15600 <ble_ll_ctrl_proc_unk_rsp+0x5c>
        ctrl_proc = BLE_LL_CTRL_PROC_CONN_PARAM_REQ;
   155fc:	2406      	movs	r4, #6
   155fe:	e012      	b.n	15626 <ble_ll_ctrl_proc_unk_rsp+0x82>
            ble_ll_ctrl_conn_upd_make(connsm, rspdata, NULL);
   15600:	2200      	movs	r2, #0
   15602:	4619      	mov	r1, r3
   15604:	f7ff fa82 	bl	14b0c <ble_ll_ctrl_conn_upd_make>
            connsm->reject_reason = BLE_ERR_SUCCESS;
   15608:	2000      	movs	r0, #0
   1560a:	f885 0037 	strb.w	r0, [r5, #55]	; 0x37
            return BLE_LL_CTRL_CONN_UPDATE_IND;
   1560e:	e00f      	b.n	15630 <ble_ll_ctrl_proc_unk_rsp+0x8c>
        BLE_LL_CONN_CLEAR_FEATURE(connsm, BLE_LL_FEAT_LE_PING);
   15610:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
   15614:	f023 0310 	bic.w	r3, r3, #16
   15618:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
        ctrl_proc = BLE_LL_CTRL_PROC_LE_PING;
   1561c:	2407      	movs	r4, #7
        break;
   1561e:	e002      	b.n	15626 <ble_ll_ctrl_proc_unk_rsp+0x82>
        ctrl_proc = BLE_LL_CTRL_PROC_NUM;
   15620:	240a      	movs	r4, #10
        break;
   15622:	e000      	b.n	15626 <ble_ll_ctrl_proc_unk_rsp+0x82>
        ctrl_proc = BLE_LL_CTRL_PROC_CONN_PARAM_REQ;
   15624:	2406      	movs	r4, #6
    if (connsm->cur_ctrl_proc == ctrl_proc) {
   15626:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
   1562a:	42a3      	cmp	r3, r4
   1562c:	d001      	beq.n	15632 <ble_ll_ctrl_proc_unk_rsp+0x8e>
    return BLE_ERR_MAX;
   1562e:	20ff      	movs	r0, #255	; 0xff
}
   15630:	bd38      	pop	{r3, r4, r5, pc}
        ble_ll_ctrl_proc_stop(connsm, ctrl_proc);
   15632:	4621      	mov	r1, r4
   15634:	4628      	mov	r0, r5
   15636:	f7ff ff9a 	bl	1556e <ble_ll_ctrl_proc_stop>
        if (ctrl_proc == BLE_LL_CTRL_PROC_CONN_PARAM_REQ) {
   1563a:	2c06      	cmp	r4, #6
   1563c:	d003      	beq.n	15646 <ble_ll_ctrl_proc_unk_rsp+0xa2>
        } else if (ctrl_proc == BLE_LL_CTRL_PROC_FEATURE_XCHG) {
   1563e:	2c03      	cmp	r4, #3
   15640:	d007      	beq.n	15652 <ble_ll_ctrl_proc_unk_rsp+0xae>
    return BLE_ERR_MAX;
   15642:	20ff      	movs	r0, #255	; 0xff
   15644:	e7f4      	b.n	15630 <ble_ll_ctrl_proc_unk_rsp+0x8c>
            ble_ll_hci_ev_conn_update(connsm, BLE_ERR_UNSUPP_REM_FEATURE);
   15646:	211a      	movs	r1, #26
   15648:	4628      	mov	r0, r5
   1564a:	f001 f860 	bl	1670e <ble_ll_hci_ev_conn_update>
    return BLE_ERR_MAX;
   1564e:	20ff      	movs	r0, #255	; 0xff
   15650:	e7ee      	b.n	15630 <ble_ll_ctrl_proc_unk_rsp+0x8c>
            if (connsm->csmflags.cfbit.pending_hci_rd_features) {
   15652:	78eb      	ldrb	r3, [r5, #3]
   15654:	f013 0f10 	tst.w	r3, #16
   15658:	d105      	bne.n	15666 <ble_ll_ctrl_proc_unk_rsp+0xc2>
            connsm->csmflags.cfbit.pending_hci_rd_features = 0;
   1565a:	78eb      	ldrb	r3, [r5, #3]
   1565c:	f36f 1304 	bfc	r3, #4, #1
   15660:	70eb      	strb	r3, [r5, #3]
    return BLE_ERR_MAX;
   15662:	20ff      	movs	r0, #255	; 0xff
   15664:	e7e4      	b.n	15630 <ble_ll_ctrl_proc_unk_rsp+0x8c>
                ble_ll_hci_ev_rd_rem_used_feat(connsm,
   15666:	211a      	movs	r1, #26
   15668:	4628      	mov	r0, r5
   1566a:	f001 f8d3 	bl	16814 <ble_ll_hci_ev_rd_rem_used_feat>
   1566e:	e7f4      	b.n	1565a <ble_ll_ctrl_proc_unk_rsp+0xb6>

00015670 <ble_ll_ctrl_rx_feature_rsp>:
{
   15670:	b510      	push	{r4, lr}
   15672:	4604      	mov	r4, r0
    ble_ll_ctrl_update_features(connsm, dptr);
   15674:	f7ff fb84 	bl	14d80 <ble_ll_ctrl_update_features>
    if (IS_PENDING_CTRL_PROC(connsm, BLE_LL_CTRL_PROC_FEATURE_XCHG)) {
   15678:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
   1567c:	f013 0f08 	tst.w	r3, #8
   15680:	d104      	bne.n	1568c <ble_ll_ctrl_rx_feature_rsp+0x1c>
    if (connsm->csmflags.cfbit.pending_hci_rd_features) {
   15682:	78e3      	ldrb	r3, [r4, #3]
   15684:	f013 0f10 	tst.w	r3, #16
   15688:	d105      	bne.n	15696 <ble_ll_ctrl_rx_feature_rsp+0x26>
}
   1568a:	bd10      	pop	{r4, pc}
        ble_ll_ctrl_proc_stop(connsm, BLE_LL_CTRL_PROC_FEATURE_XCHG);
   1568c:	2103      	movs	r1, #3
   1568e:	4620      	mov	r0, r4
   15690:	f7ff ff6d 	bl	1556e <ble_ll_ctrl_proc_stop>
   15694:	e7f5      	b.n	15682 <ble_ll_ctrl_rx_feature_rsp+0x12>
        ble_ll_hci_ev_rd_rem_used_feat(connsm, BLE_ERR_SUCCESS);
   15696:	2100      	movs	r1, #0
   15698:	4620      	mov	r0, r4
   1569a:	f001 f8bb 	bl	16814 <ble_ll_hci_ev_rd_rem_used_feat>
        connsm->csmflags.cfbit.pending_hci_rd_features = 0;
   1569e:	78e3      	ldrb	r3, [r4, #3]
   156a0:	f36f 1304 	bfc	r3, #4, #1
   156a4:	70e3      	strb	r3, [r4, #3]
}
   156a6:	e7f0      	b.n	1568a <ble_ll_ctrl_rx_feature_rsp+0x1a>

000156a8 <ble_ll_ctrl_rx_version_ind>:
{
   156a8:	b570      	push	{r4, r5, r6, lr}
   156aa:	4604      	mov	r4, r0
   156ac:	460d      	mov	r5, r1
   156ae:	4616      	mov	r6, r2
    connsm->vers_nr = dptr[0];
   156b0:	4608      	mov	r0, r1
   156b2:	f810 3b01 	ldrb.w	r3, [r0], #1
   156b6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    connsm->comp_id = get_le16(dptr + 1);
   156ba:	f014 f868 	bl	2978e <get_le16>
   156be:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
    connsm->sub_vers_nr = get_le16(dptr + 3);
   156c2:	1ce8      	adds	r0, r5, #3
   156c4:	f014 f863 	bl	2978e <get_le16>
   156c8:	f8a4 0050 	strh.w	r0, [r4, #80]	; 0x50
    connsm->csmflags.cfbit.rxd_version_ind = 1;
   156cc:	7863      	ldrb	r3, [r4, #1]
   156ce:	f043 0308 	orr.w	r3, r3, #8
   156d2:	7063      	strb	r3, [r4, #1]
    if (!connsm->csmflags.cfbit.version_ind_sent) {
   156d4:	f013 0f04 	tst.w	r3, #4
   156d8:	d007      	beq.n	156ea <ble_ll_ctrl_rx_version_ind+0x42>
    rsp_opcode = BLE_ERR_MAX;
   156da:	25ff      	movs	r5, #255	; 0xff
    if (IS_PENDING_CTRL_PROC(connsm, BLE_LL_CTRL_PROC_VERSION_XCHG)) {
   156dc:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
   156e0:	f013 0f10 	tst.w	r3, #16
   156e4:	d107      	bne.n	156f6 <ble_ll_ctrl_rx_version_ind+0x4e>
}
   156e6:	4628      	mov	r0, r5
   156e8:	bd70      	pop	{r4, r5, r6, pc}
        ble_ll_ctrl_version_ind_make(connsm, rspbuf);
   156ea:	4631      	mov	r1, r6
   156ec:	4620      	mov	r0, r4
   156ee:	f7ff fa97 	bl	14c20 <ble_ll_ctrl_version_ind_make>
        rsp_opcode = BLE_LL_CTRL_VERSION_IND;
   156f2:	250c      	movs	r5, #12
   156f4:	e7f2      	b.n	156dc <ble_ll_ctrl_rx_version_ind+0x34>
        ble_ll_hci_ev_rd_rem_ver(connsm, BLE_ERR_SUCCESS);
   156f6:	2100      	movs	r1, #0
   156f8:	4620      	mov	r0, r4
   156fa:	f001 f8b2 	bl	16862 <ble_ll_hci_ev_rd_rem_ver>
        ble_ll_ctrl_proc_stop(connsm, BLE_LL_CTRL_PROC_VERSION_XCHG);
   156fe:	2104      	movs	r1, #4
   15700:	4620      	mov	r0, r4
   15702:	f7ff ff34 	bl	1556e <ble_ll_ctrl_proc_stop>
   15706:	e7ee      	b.n	156e6 <ble_ll_ctrl_rx_version_ind+0x3e>

00015708 <ble_ll_ctrl_rx_start_enc_rsp>:
{
   15708:	b538      	push	{r3, r4, r5, lr}
    if (connsm->enc_data.enc_state != CONN_ENC_S_START_ENC_RSP_WAIT) {
   1570a:	f890 3118 	ldrb.w	r3, [r0, #280]	; 0x118
   1570e:	2b07      	cmp	r3, #7
   15710:	d11e      	bne.n	15750 <ble_ll_ctrl_rx_start_enc_rsp+0x48>
   15712:	4604      	mov	r4, r0
    if (connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) {
   15714:	79c3      	ldrb	r3, [r0, #7]
   15716:	2b01      	cmp	r3, #1
   15718:	d00a      	beq.n	15730 <ble_ll_ctrl_rx_start_enc_rsp+0x28>
        if (connsm->cur_ctrl_proc == BLE_LL_CTRL_PROC_ENCRYPT) {
   1571a:	f890 303b 	ldrb.w	r3, [r0, #59]	; 0x3b
   1571e:	2b02      	cmp	r3, #2
   15720:	d011      	beq.n	15746 <ble_ll_ctrl_rx_start_enc_rsp+0x3e>
        rc = BLE_LL_CTRL_START_ENC_RSP;
   15722:	2506      	movs	r5, #6
    ble_ll_hci_ev_encrypt_chg(connsm, BLE_ERR_SUCCESS);
   15724:	2100      	movs	r1, #0
   15726:	4620      	mov	r0, r4
   15728:	f001 f813 	bl	16752 <ble_ll_hci_ev_encrypt_chg>
    return rc;
   1572c:	b2e8      	uxtb	r0, r5
}
   1572e:	bd38      	pop	{r3, r4, r5, pc}
        ble_ll_ctrl_proc_stop(connsm, BLE_LL_CTRL_PROC_ENCRYPT);
   15730:	2102      	movs	r1, #2
   15732:	f7ff ff1c 	bl	1556e <ble_ll_ctrl_proc_stop>
        connsm->enc_data.enc_state = CONN_ENC_S_ENCRYPTED;
   15736:	2302      	movs	r3, #2
   15738:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
        ble_ll_conn_auth_pyld_timer_start(connsm);
   1573c:	4620      	mov	r0, r4
   1573e:	f7fd fad1 	bl	12ce4 <ble_ll_conn_auth_pyld_timer_start>
        rc = BLE_ERR_MAX;
   15742:	25ff      	movs	r5, #255	; 0xff
   15744:	e7ee      	b.n	15724 <ble_ll_ctrl_rx_start_enc_rsp+0x1c>
            ble_ll_ctrl_proc_stop(connsm, BLE_LL_CTRL_PROC_ENCRYPT);
   15746:	2102      	movs	r1, #2
   15748:	f7ff ff11 	bl	1556e <ble_ll_ctrl_proc_stop>
        rc = BLE_LL_CTRL_START_ENC_RSP;
   1574c:	2506      	movs	r5, #6
   1574e:	e7e9      	b.n	15724 <ble_ll_ctrl_rx_start_enc_rsp+0x1c>
        return BLE_ERR_MAX;
   15750:	20ff      	movs	r0, #255	; 0xff
   15752:	e7ec      	b.n	1572e <ble_ll_ctrl_rx_start_enc_rsp+0x26>

00015754 <ble_ll_ctrl_rx_ping_rsp>:
{
   15754:	b508      	push	{r3, lr}
    ble_ll_ctrl_proc_stop(connsm, BLE_LL_CTRL_PROC_LE_PING);
   15756:	2107      	movs	r1, #7
   15758:	f7ff ff09 	bl	1556e <ble_ll_ctrl_proc_stop>
}
   1575c:	bd08      	pop	{r3, pc}

0001575e <ble_ll_ctrl_rx_conn_param_req>:
    if (connsm->csmflags.cfbit.awaiting_host_reply) {
   1575e:	7803      	ldrb	r3, [r0, #0]
   15760:	f013 0f40 	tst.w	r3, #64	; 0x40
   15764:	d12d      	bne.n	157c2 <ble_ll_ctrl_rx_conn_param_req+0x64>
{
   15766:	b570      	push	{r4, r5, r6, lr}
   15768:	4616      	mov	r6, r2
   1576a:	460d      	mov	r5, r1
   1576c:	4604      	mov	r4, r0
    if (IS_PENDING_CTRL_PROC(connsm, BLE_LL_CTRL_PROC_CONN_PARAM_REQ)) {
   1576e:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
   15772:	f013 0f40 	tst.w	r3, #64	; 0x40
   15776:	d00f      	beq.n	15798 <ble_ll_ctrl_rx_conn_param_req+0x3a>
        if (connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) {
   15778:	79c3      	ldrb	r3, [r0, #7]
   1577a:	2b02      	cmp	r3, #2
   1577c:	d005      	beq.n	1578a <ble_ll_ctrl_rx_conn_param_req+0x2c>
            rspbuf[1] = BLE_LL_CTRL_CONN_PARM_REQ;
   1577e:	230f      	movs	r3, #15
   15780:	7053      	strb	r3, [r2, #1]
            rspbuf[2] = BLE_ERR_LMP_COLLISION;
   15782:	2323      	movs	r3, #35	; 0x23
   15784:	7093      	strb	r3, [r2, #2]
            return rsp_opcode;
   15786:	2011      	movs	r0, #17
   15788:	e014      	b.n	157b4 <ble_ll_ctrl_rx_conn_param_req+0x56>
            ble_ll_ctrl_proc_stop(connsm, BLE_LL_CTRL_PROC_CONN_PARAM_REQ);
   1578a:	2106      	movs	r1, #6
   1578c:	f7ff feef 	bl	1556e <ble_ll_ctrl_proc_stop>
            ble_ll_hci_ev_conn_update(connsm, BLE_ERR_LMP_COLLISION);
   15790:	2123      	movs	r1, #35	; 0x23
   15792:	4620      	mov	r0, r4
   15794:	f000 ffbb 	bl	1670e <ble_ll_hci_ev_conn_update>
    if ((connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) &&
   15798:	79e3      	ldrb	r3, [r4, #7]
   1579a:	2b01      	cmp	r3, #1
   1579c:	d103      	bne.n	157a6 <ble_ll_ctrl_rx_conn_param_req+0x48>
   1579e:	7863      	ldrb	r3, [r4, #1]
   157a0:	f013 0f10 	tst.w	r3, #16
   157a4:	d107      	bne.n	157b6 <ble_ll_ctrl_rx_conn_param_req+0x58>
    rsp_opcode = ble_ll_ctrl_conn_param_pdu_proc(connsm, dptr, rspbuf,
   157a6:	230f      	movs	r3, #15
   157a8:	4632      	mov	r2, r6
   157aa:	4629      	mov	r1, r5
   157ac:	4620      	mov	r0, r4
   157ae:	f7ff fd69 	bl	15284 <ble_ll_ctrl_conn_param_pdu_proc>
   157b2:	b2c0      	uxtb	r0, r0
}
   157b4:	bd70      	pop	{r4, r5, r6, pc}
        rspbuf[1] = BLE_LL_CTRL_CONN_PARM_REQ;
   157b6:	230f      	movs	r3, #15
   157b8:	7073      	strb	r3, [r6, #1]
        rspbuf[2] = BLE_ERR_DIFF_TRANS_COLL;
   157ba:	232a      	movs	r3, #42	; 0x2a
   157bc:	70b3      	strb	r3, [r6, #2]
        return rsp_opcode;
   157be:	2011      	movs	r0, #17
   157c0:	e7f8      	b.n	157b4 <ble_ll_ctrl_rx_conn_param_req+0x56>
        return BLE_ERR_MAX;
   157c2:	20ff      	movs	r0, #255	; 0xff
}
   157c4:	4770      	bx	lr

000157c6 <ble_ll_ctrl_rx_reject_ind>:
{
   157c6:	b538      	push	{r3, r4, r5, lr}
   157c8:	4604      	mov	r4, r0
    if (opcode == BLE_LL_CTRL_REJECT_IND) {
   157ca:	2a0d      	cmp	r2, #13
   157cc:	d00a      	beq.n	157e4 <ble_ll_ctrl_rx_reject_ind+0x1e>
        ble_error = dptr[1];
   157ce:	784d      	ldrb	r5, [r1, #1]
    switch (connsm->cur_ctrl_proc) {
   157d0:	f894 003b 	ldrb.w	r0, [r4, #59]	; 0x3b
   157d4:	2806      	cmp	r0, #6
   157d6:	d007      	beq.n	157e8 <ble_ll_ctrl_rx_reject_ind+0x22>
   157d8:	2808      	cmp	r0, #8
   157da:	d02c      	beq.n	15836 <ble_ll_ctrl_rx_reject_ind+0x70>
   157dc:	2802      	cmp	r0, #2
   157de:	d01d      	beq.n	1581c <ble_ll_ctrl_rx_reject_ind+0x56>
    uint8_t rsp_opcode = BLE_ERR_MAX;
   157e0:	20ff      	movs	r0, #255	; 0xff
   157e2:	e027      	b.n	15834 <ble_ll_ctrl_rx_reject_ind+0x6e>
        ble_error = dptr[0];
   157e4:	780d      	ldrb	r5, [r1, #0]
   157e6:	e7f3      	b.n	157d0 <ble_ll_ctrl_rx_reject_ind+0xa>
        if (opcode == BLE_LL_CTRL_REJECT_IND_EXT) {
   157e8:	2a11      	cmp	r2, #17
   157ea:	d001      	beq.n	157f0 <ble_ll_ctrl_rx_reject_ind+0x2a>
    uint8_t rsp_opcode = BLE_ERR_MAX;
   157ec:	20ff      	movs	r0, #255	; 0xff
   157ee:	e021      	b.n	15834 <ble_ll_ctrl_rx_reject_ind+0x6e>
            if (connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) {
   157f0:	79e2      	ldrb	r2, [r4, #7]
   157f2:	2a01      	cmp	r2, #1
   157f4:	d009      	beq.n	1580a <ble_ll_ctrl_rx_reject_ind+0x44>
                ble_ll_ctrl_proc_stop(connsm, BLE_LL_CTRL_PROC_CONN_PARAM_REQ);
   157f6:	2106      	movs	r1, #6
   157f8:	4620      	mov	r0, r4
   157fa:	f7ff feb8 	bl	1556e <ble_ll_ctrl_proc_stop>
                ble_ll_hci_ev_conn_update(connsm, ble_error);
   157fe:	4629      	mov	r1, r5
   15800:	4620      	mov	r0, r4
   15802:	f000 ff84 	bl	1670e <ble_ll_hci_ev_conn_update>
    uint8_t rsp_opcode = BLE_ERR_MAX;
   15806:	20ff      	movs	r0, #255	; 0xff
   15808:	e014      	b.n	15834 <ble_ll_ctrl_rx_reject_ind+0x6e>
                ble_ll_ctrl_conn_upd_make(connsm, rspdata, NULL);
   1580a:	2200      	movs	r2, #0
   1580c:	4619      	mov	r1, r3
   1580e:	4620      	mov	r0, r4
   15810:	f7ff f97c 	bl	14b0c <ble_ll_ctrl_conn_upd_make>
                connsm->reject_reason = BLE_ERR_SUCCESS;
   15814:	2000      	movs	r0, #0
   15816:	f884 0037 	strb.w	r0, [r4, #55]	; 0x37
   1581a:	e00b      	b.n	15834 <ble_ll_ctrl_rx_reject_ind+0x6e>
        ble_ll_ctrl_proc_stop(connsm, BLE_LL_CTRL_PROC_ENCRYPT);
   1581c:	2102      	movs	r1, #2
   1581e:	4620      	mov	r0, r4
   15820:	f7ff fea5 	bl	1556e <ble_ll_ctrl_proc_stop>
        ble_ll_hci_ev_encrypt_chg(connsm, ble_error);
   15824:	4629      	mov	r1, r5
   15826:	4620      	mov	r0, r4
   15828:	f000 ff93 	bl	16752 <ble_ll_hci_ev_encrypt_chg>
        connsm->enc_data.enc_state = CONN_ENC_S_UNENCRYPTED;
   1582c:	2301      	movs	r3, #1
   1582e:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
    uint8_t rsp_opcode = BLE_ERR_MAX;
   15832:	20ff      	movs	r0, #255	; 0xff
}
   15834:	bd38      	pop	{r3, r4, r5, pc}
        ble_ll_ctrl_proc_stop(connsm, BLE_LL_CTRL_PROC_DATA_LEN_UPD);
   15836:	2108      	movs	r1, #8
   15838:	4620      	mov	r0, r4
   1583a:	f7ff fe98 	bl	1556e <ble_ll_ctrl_proc_stop>
    uint8_t rsp_opcode = BLE_ERR_MAX;
   1583e:	20ff      	movs	r0, #255	; 0xff
        break;
   15840:	e7f8      	b.n	15834 <ble_ll_ctrl_rx_reject_ind+0x6e>
	...

00015844 <ble_ll_ctrl_rx_pdu>:
 * @param om
 * @param connsm
 */
int
ble_ll_ctrl_rx_pdu(struct ble_ll_conn_sm *connsm, struct os_mbuf *om)
{
   15844:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15848:	4606      	mov	r6, r0
   1584a:	460f      	mov	r7, r1
    /*
     * dptr points to om_data pointer. The first byte of om_data is the
     * first byte of the Data Channel PDU header. Get length from header and
     * opcode from LL control PDU.
     */
    dptr = om->om_data;
   1584c:	680c      	ldr	r4, [r1, #0]
    len = dptr[1];
   1584e:	7863      	ldrb	r3, [r4, #1]
    opcode = dptr[2];
   15850:	78a5      	ldrb	r5, [r4, #2]
#endif

    /* If opcode comes from reserved value or CtrlData fields is invalid
     * we shall respond with LL_UNKNOWN_RSP
     */
    if ((opcode >= BLE_LL_CTRL_OPCODES) ||
   15852:	2d1e      	cmp	r5, #30
   15854:	f200 8188 	bhi.w	15b68 <ble_ll_ctrl_rx_pdu+0x324>
   15858:	f104 0901 	add.w	r9, r4, #1
   1585c:	f104 0803 	add.w	r8, r4, #3
   15860:	3b01      	subs	r3, #1
   15862:	b2db      	uxtb	r3, r3
        (len != g_ble_ll_ctrl_pkt_lengths[opcode])) {
   15864:	4abf      	ldr	r2, [pc, #764]	; (15b64 <ble_ll_ctrl_rx_pdu+0x320>)
   15866:	5d52      	ldrb	r2, [r2, r5]
    if ((opcode >= BLE_LL_CTRL_OPCODES) ||
   15868:	429a      	cmp	r2, r3
   1586a:	f040 8184 	bne.w	15b76 <ble_ll_ctrl_rx_pdu+0x332>
        rsp_opcode = BLE_LL_CTRL_UNKNOWN_RSP;
        goto ll_ctrl_send_rsp;
    }

    /* Check if the feature is supported. */
    switch (opcode) {
   1586e:	1eeb      	subs	r3, r5, #3
   15870:	2b19      	cmp	r3, #25
   15872:	d867      	bhi.n	15944 <ble_ll_ctrl_rx_pdu+0x100>
   15874:	e8df f003 	tbb	[pc, r3]
   15878:	66196619 	.word	0x66196619
   1587c:	19666666 	.word	0x19666666
   15880:	1f666666 	.word	0x1f666666
   15884:	16661c1c 	.word	0x16661c1c
   15888:	13660d66 	.word	0x13660d66
   1588c:	66106666 	.word	0x66106666
   15890:	2266      	.short	0x2266
    case BLE_LL_CTRL_LENGTH_REQ:
        feature = BLE_LL_FEAT_DATA_LEN_EXT;
   15892:	f04f 0a20 	mov.w	sl, #32
   15896:	e013      	b.n	158c0 <ble_ll_ctrl_rx_pdu+0x7c>
        break;
    case BLE_LL_CTRL_PHY_REQ:
        feature = BLE_LL_FEAT_LE_2M_PHY | BLE_LL_FEAT_LE_CODED_PHY;
        break;
    case BLE_LL_CTRL_MIN_USED_CHAN_IND:
        feature = BLE_LL_FEAT_MIN_USED_CHAN;
   15898:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
   1589c:	e010      	b.n	158c0 <ble_ll_ctrl_rx_pdu+0x7c>
        feature = BLE_LL_FEAT_LE_2M_PHY | BLE_LL_FEAT_LE_CODED_PHY;
   1589e:	f44f 6a10 	mov.w	sl, #2304	; 0x900
   158a2:	e00d      	b.n	158c0 <ble_ll_ctrl_rx_pdu+0x7c>
        feature = BLE_LL_FEAT_LE_PING;
   158a4:	f04f 0a10 	mov.w	sl, #16
   158a8:	e00a      	b.n	158c0 <ble_ll_ctrl_rx_pdu+0x7c>
        feature = BLE_LL_FEAT_LE_ENCRYPTION;
   158aa:	f04f 0a01 	mov.w	sl, #1
   158ae:	e007      	b.n	158c0 <ble_ll_ctrl_rx_pdu+0x7c>
        feature = BLE_LL_FEAT_CONN_PARM_REQ;
   158b0:	f04f 0a02 	mov.w	sl, #2
   158b4:	e004      	b.n	158c0 <ble_ll_ctrl_rx_pdu+0x7c>
        feature = BLE_LL_FEAT_SLAVE_INIT;
   158b6:	f04f 0a08 	mov.w	sl, #8
   158ba:	e001      	b.n	158c0 <ble_ll_ctrl_rx_pdu+0x7c>
        break;
    case BLE_LL_CTRL_PERIODIC_SYNC_IND:
        feature = BLE_LL_FEAT_SYNC_TRANS_RECV;
   158bc:	f04f 7a00 	mov.w	sl, #33554432	; 0x2000000
        feature = 0;
        break;
    }

    if (feature) {
        features = ble_ll_read_supp_features();
   158c0:	f7fb f898 	bl	109f4 <ble_ll_read_supp_features>
        if ((features & feature) == 0) {
   158c4:	ea1a 0f00 	tst.w	sl, r0
   158c8:	d13c      	bne.n	15944 <ble_ll_ctrl_rx_pdu+0x100>
            if (opcode == BLE_LL_CTRL_ENC_REQ) {
   158ca:	2d03      	cmp	r5, #3
   158cc:	d024      	beq.n	15918 <ble_ll_ctrl_rx_pdu+0xd4>
    int rc = 0;
   158ce:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   158d2:	46ca      	mov	sl, r9
                    rsp_opcode = BLE_LL_CTRL_REJECT_IND;
                    rspbuf[1] = BLE_ERR_UNSUPP_REM_FEATURE;
                }
            } else {
                /* Construct unknown rsp pdu */
                rsp_opcode = BLE_LL_CTRL_UNKNOWN_RSP;
   158d4:	f04f 0807 	mov.w	r8, #7
        break;
    }

    /* Free mbuf or send response */
ll_ctrl_send_rsp:
    if (rsp_opcode == BLE_ERR_MAX) {
   158d8:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   158dc:	f000 8164 	beq.w	15ba8 <ble_ll_ctrl_rx_pdu+0x364>
    } else {
        /*
         * Write the response opcode into the buffer. If this is an unknown
         * response, put opcode of unknown pdu into buffer.
         */
        rspbuf[0] = rsp_opcode;
   158e0:	f884 8000 	strb.w	r8, [r4]
        if (rsp_opcode == BLE_LL_CTRL_UNKNOWN_RSP) {
   158e4:	f1b8 0f07 	cmp.w	r8, #7
   158e8:	f000 8162 	beq.w	15bb0 <ble_ll_ctrl_rx_pdu+0x36c>
            rspbuf[1] = opcode;
        }
        len = g_ble_ll_ctrl_pkt_lengths[rsp_opcode] + 1;
   158ec:	4b9d      	ldr	r3, [pc, #628]	; (15b64 <ble_ll_ctrl_rx_pdu+0x320>)
   158ee:	f813 3008 	ldrb.w	r3, [r3, r8]
   158f2:	3301      	adds	r3, #1
        ble_ll_conn_enqueue_pkt(connsm, om, BLE_LL_LLID_CTRL, len);
   158f4:	b2db      	uxtb	r3, r3
   158f6:	2203      	movs	r2, #3
   158f8:	4639      	mov	r1, r7
   158fa:	4630      	mov	r0, r6
   158fc:	f7fe f8b4 	bl	13a68 <ble_ll_conn_enqueue_pkt>
#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LE_ENCRYPTION)
        if (restart_encryption) {
   15900:	f1ba 0f00 	cmp.w	sl, #0
   15904:	f040 8156 	bne.w	15bb4 <ble_ll_ctrl_rx_pdu+0x370>
            ble_ll_ctrl_proc_init(connsm, BLE_LL_CTRL_PROC_ENCRYPT);
        }
#endif
    }

    if (connsm->csmflags.cfbit.pending_initiate_dle) {
   15908:	78f3      	ldrb	r3, [r6, #3]
   1590a:	f013 0f20 	tst.w	r3, #32
   1590e:	f040 8156 	bne.w	15bbe <ble_ll_ctrl_rx_pdu+0x37a>
        connsm->csmflags.cfbit.pending_initiate_dle = 0;
        ble_ll_ctrl_initiate_dle(connsm);
    }

    return rc;
}
   15912:	4648      	mov	r0, r9
   15914:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                if (connsm->conn_features & BLE_LL_FEAT_EXTENDED_REJ) {
   15918:	f896 303f 	ldrb.w	r3, [r6, #63]	; 0x3f
   1591c:	f013 0f04 	tst.w	r3, #4
   15920:	d008      	beq.n	15934 <ble_ll_ctrl_rx_pdu+0xf0>
                    rspbuf[1] = opcode;
   15922:	7065      	strb	r5, [r4, #1]
                    rspbuf[2] = BLE_ERR_UNSUPP_REM_FEATURE;
   15924:	231a      	movs	r3, #26
   15926:	70a3      	strb	r3, [r4, #2]
    int rc = 0;
   15928:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   1592c:	46ca      	mov	sl, r9
                    rsp_opcode = BLE_LL_CTRL_REJECT_IND_EXT;
   1592e:	f04f 0811 	mov.w	r8, #17
   15932:	e7d1      	b.n	158d8 <ble_ll_ctrl_rx_pdu+0x94>
                    rspbuf[1] = BLE_ERR_UNSUPP_REM_FEATURE;
   15934:	231a      	movs	r3, #26
   15936:	7063      	strb	r3, [r4, #1]
    int rc = 0;
   15938:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   1593c:	46ca      	mov	sl, r9
                    rsp_opcode = BLE_LL_CTRL_REJECT_IND;
   1593e:	f04f 080d 	mov.w	r8, #13
   15942:	e7c9      	b.n	158d8 <ble_ll_ctrl_rx_pdu+0x94>
    do_works_mitm();
   15944:	f003 fc6c 	bl	19220 <do_works_mitm>
    switch (opcode) {
   15948:	2d15      	cmp	r5, #21
   1594a:	d817      	bhi.n	1597c <ble_ll_ctrl_rx_pdu+0x138>
   1594c:	e8df f015 	tbh	[pc, r5, lsl #1]
   15950:	0026001c 	.word	0x0026001c
   15954:	00a90016 	.word	0x00a90016
   15958:	00bd00b3 	.word	0x00bd00b3
   1595c:	006b00c5 	.word	0x006b00c5
   15960:	00840076 	.word	0x00840076
   15964:	00d500cd 	.word	0x00d500cd
   15968:	00fe0090 	.word	0x00fe0090
   1596c:	00e8009b 	.word	0x00e8009b
   15970:	00fe00f3 	.word	0x00fe00f3
   15974:	00df011a 	.word	0x00df011a
   15978:	004d0030 	.word	0x004d0030
    int rc = 0;
   1597c:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   15980:	46ca      	mov	sl, r9
    rsp_opcode = BLE_ERR_MAX;
   15982:	f04f 08ff 	mov.w	r8, #255	; 0xff
   15986:	e7a7      	b.n	158d8 <ble_ll_ctrl_rx_pdu+0x94>
        rsp_opcode = ble_ll_ctrl_rx_conn_update(connsm, dptr);
   15988:	4641      	mov	r1, r8
   1598a:	4630      	mov	r0, r6
   1598c:	f7ff face 	bl	14f2c <ble_ll_ctrl_rx_conn_update>
   15990:	fa5f f880 	uxtb.w	r8, r0
    int rc = 0;
   15994:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   15998:	46ca      	mov	sl, r9
        break;
   1599a:	e79d      	b.n	158d8 <ble_ll_ctrl_rx_pdu+0x94>
        rsp_opcode = ble_ll_ctrl_rx_chanmap_req(connsm, dptr);
   1599c:	4641      	mov	r1, r8
   1599e:	4630      	mov	r0, r6
   159a0:	f7ff fb08 	bl	14fb4 <ble_ll_ctrl_rx_chanmap_req>
   159a4:	fa5f f880 	uxtb.w	r8, r0
    int rc = 0;
   159a8:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   159ac:	46ca      	mov	sl, r9
        break;
   159ae:	e793      	b.n	158d8 <ble_ll_ctrl_rx_pdu+0x94>
        if (ble_ll_ctrl_len_proc(connsm, dptr)) {
   159b0:	4641      	mov	r1, r8
   159b2:	4630      	mov	r0, r6
   159b4:	f7ff fb24 	bl	15000 <ble_ll_ctrl_len_proc>
   159b8:	4682      	mov	sl, r0
   159ba:	2800      	cmp	r0, #0
   159bc:	f040 80e8 	bne.w	15b90 <ble_ll_ctrl_rx_pdu+0x34c>
        if ((connsm->cur_ctrl_proc != BLE_LL_CTRL_PROC_DATA_LEN_UPD) &&
   159c0:	f896 303b 	ldrb.w	r3, [r6, #59]	; 0x3b
   159c4:	2b08      	cmp	r3, #8
   159c6:	d008      	beq.n	159da <ble_ll_ctrl_rx_pdu+0x196>
            IS_PENDING_CTRL_PROC(connsm, BLE_LL_CTRL_PROC_DATA_LEN_UPD)) {
   159c8:	f8b6 3048 	ldrh.w	r3, [r6, #72]	; 0x48
        if ((connsm->cur_ctrl_proc != BLE_LL_CTRL_PROC_DATA_LEN_UPD) &&
   159cc:	f413 7f80 	tst.w	r3, #256	; 0x100
   159d0:	d003      	beq.n	159da <ble_ll_ctrl_rx_pdu+0x196>
            CLR_PENDING_CTRL_PROC(connsm, BLE_LL_CTRL_PROC_DATA_LEN_UPD);
   159d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   159d6:	f8a6 3048 	strh.w	r3, [r6, #72]	; 0x48
        ble_ll_ctrl_datalen_upd_make(connsm, rspbuf);
   159da:	4621      	mov	r1, r4
   159dc:	4630      	mov	r0, r6
   159de:	f7ff f932 	bl	14c46 <ble_ll_ctrl_datalen_upd_make>
    int rc = 0;
   159e2:	46d1      	mov	r9, sl
        rsp_opcode = BLE_LL_CTRL_LENGTH_RSP;
   159e4:	f04f 0815 	mov.w	r8, #21
        break;
   159e8:	e776      	b.n	158d8 <ble_ll_ctrl_rx_pdu+0x94>
        if (connsm->cur_ctrl_proc == BLE_LL_CTRL_PROC_DATA_LEN_UPD) {
   159ea:	f896 303b 	ldrb.w	r3, [r6, #59]	; 0x3b
   159ee:	2b08      	cmp	r3, #8
   159f0:	d005      	beq.n	159fe <ble_ll_ctrl_rx_pdu+0x1ba>
    int rc = 0;
   159f2:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   159f6:	46ca      	mov	sl, r9
    rsp_opcode = BLE_ERR_MAX;
   159f8:	f04f 08ff 	mov.w	r8, #255	; 0xff
   159fc:	e76c      	b.n	158d8 <ble_ll_ctrl_rx_pdu+0x94>
            if (ble_ll_ctrl_len_proc(connsm, dptr)) {
   159fe:	4641      	mov	r1, r8
   15a00:	4630      	mov	r0, r6
   15a02:	f7ff fafd 	bl	15000 <ble_ll_ctrl_len_proc>
   15a06:	4681      	mov	r9, r0
   15a08:	b940      	cbnz	r0, 15a1c <ble_ll_ctrl_rx_pdu+0x1d8>
    rsp_opcode = BLE_ERR_MAX;
   15a0a:	f04f 08ff 	mov.w	r8, #255	; 0xff
            ble_ll_ctrl_proc_stop(connsm, BLE_LL_CTRL_PROC_DATA_LEN_UPD);
   15a0e:	2108      	movs	r1, #8
   15a10:	4630      	mov	r0, r6
   15a12:	f7ff fdac 	bl	1556e <ble_ll_ctrl_proc_stop>
    restart_encryption = 0;
   15a16:	f04f 0a00 	mov.w	sl, #0
   15a1a:	e75d      	b.n	158d8 <ble_ll_ctrl_rx_pdu+0x94>
                rc = -1;
   15a1c:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
                rsp_opcode = BLE_LL_CTRL_UNKNOWN_RSP;
   15a20:	f04f 0807 	mov.w	r8, #7
   15a24:	e7f3      	b.n	15a0e <ble_ll_ctrl_rx_pdu+0x1ca>
        rsp_opcode = ble_ll_ctrl_proc_unk_rsp(connsm, dptr, rspdata);
   15a26:	464a      	mov	r2, r9
   15a28:	4641      	mov	r1, r8
   15a2a:	4630      	mov	r0, r6
   15a2c:	f7ff fdba 	bl	155a4 <ble_ll_ctrl_proc_unk_rsp>
   15a30:	fa5f f880 	uxtb.w	r8, r0
    int rc = 0;
   15a34:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   15a38:	46ca      	mov	sl, r9
        break;
   15a3a:	e74d      	b.n	158d8 <ble_ll_ctrl_rx_pdu+0x94>
        do_works_mitm();
   15a3c:	f003 fbf0 	bl	19220 <do_works_mitm>
        rsp_opcode = ble_ll_ctrl_rx_feature_req(connsm, dptr, rspbuf, opcode);
   15a40:	462b      	mov	r3, r5
   15a42:	4622      	mov	r2, r4
   15a44:	4641      	mov	r1, r8
   15a46:	4630      	mov	r0, r6
   15a48:	f7ff f9b0 	bl	14dac <ble_ll_ctrl_rx_feature_req>
   15a4c:	fa5f f880 	uxtb.w	r8, r0
    int rc = 0;
   15a50:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   15a54:	46ca      	mov	sl, r9
        break;
   15a56:	e73f      	b.n	158d8 <ble_ll_ctrl_rx_pdu+0x94>
        do_works_mitm();
   15a58:	f003 fbe2 	bl	19220 <do_works_mitm>
        ble_ll_ctrl_rx_feature_rsp(connsm, dptr);
   15a5c:	4641      	mov	r1, r8
   15a5e:	4630      	mov	r0, r6
   15a60:	f7ff fe06 	bl	15670 <ble_ll_ctrl_rx_feature_rsp>
    int rc = 0;
   15a64:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   15a68:	46ca      	mov	sl, r9
    rsp_opcode = BLE_ERR_MAX;
   15a6a:	f04f 08ff 	mov.w	r8, #255	; 0xff
        break;
   15a6e:	e733      	b.n	158d8 <ble_ll_ctrl_rx_pdu+0x94>
        rsp_opcode = ble_ll_ctrl_rx_version_ind(connsm, dptr, rspdata);
   15a70:	464a      	mov	r2, r9
   15a72:	4641      	mov	r1, r8
   15a74:	4630      	mov	r0, r6
   15a76:	f7ff fe17 	bl	156a8 <ble_ll_ctrl_rx_version_ind>
   15a7a:	fa5f f880 	uxtb.w	r8, r0
    int rc = 0;
   15a7e:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   15a82:	46ca      	mov	sl, r9
        break;
   15a84:	e728      	b.n	158d8 <ble_ll_ctrl_rx_pdu+0x94>
        do_works_mitm();
   15a86:	f003 fbcb 	bl	19220 <do_works_mitm>
        rsp_opcode = ble_ll_ctrl_rx_feature_req(connsm, dptr, rspbuf, opcode);
   15a8a:	462b      	mov	r3, r5
   15a8c:	4622      	mov	r2, r4
   15a8e:	4641      	mov	r1, r8
   15a90:	4630      	mov	r0, r6
   15a92:	f7ff f98b 	bl	14dac <ble_ll_ctrl_rx_feature_req>
   15a96:	fa5f f880 	uxtb.w	r8, r0
    int rc = 0;
   15a9a:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   15a9e:	46ca      	mov	sl, r9
        break;
   15aa0:	e71a      	b.n	158d8 <ble_ll_ctrl_rx_pdu+0x94>
        rsp_opcode = ble_ll_ctrl_rx_enc_req(connsm, dptr, rspdata);
   15aa2:	464a      	mov	r2, r9
   15aa4:	4641      	mov	r1, r8
   15aa6:	4630      	mov	r0, r6
   15aa8:	f7ff fadd 	bl	15066 <ble_ll_ctrl_rx_enc_req>
   15aac:	4680      	mov	r8, r0
    int rc = 0;
   15aae:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   15ab2:	46ca      	mov	sl, r9
        break;
   15ab4:	e710      	b.n	158d8 <ble_ll_ctrl_rx_pdu+0x94>
        ble_ll_ctrl_rx_enc_rsp(connsm, dptr);
   15ab6:	4641      	mov	r1, r8
   15ab8:	4630      	mov	r0, r6
   15aba:	f7ff fb69 	bl	15190 <ble_ll_ctrl_rx_enc_rsp>
    int rc = 0;
   15abe:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   15ac2:	46ca      	mov	sl, r9
    rsp_opcode = BLE_ERR_MAX;
   15ac4:	f04f 08ff 	mov.w	r8, #255	; 0xff
        break;
   15ac8:	e706      	b.n	158d8 <ble_ll_ctrl_rx_pdu+0x94>
        rsp_opcode = ble_ll_ctrl_rx_start_enc_req(connsm);
   15aca:	4630      	mov	r0, r6
   15acc:	f7fe ffd6 	bl	14a7c <ble_ll_ctrl_rx_start_enc_req>
   15ad0:	4680      	mov	r8, r0
    int rc = 0;
   15ad2:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   15ad6:	46ca      	mov	sl, r9
        break;
   15ad8:	e6fe      	b.n	158d8 <ble_ll_ctrl_rx_pdu+0x94>
        rsp_opcode = ble_ll_ctrl_rx_start_enc_rsp(connsm);
   15ada:	4630      	mov	r0, r6
   15adc:	f7ff fe14 	bl	15708 <ble_ll_ctrl_rx_start_enc_rsp>
   15ae0:	4680      	mov	r8, r0
    int rc = 0;
   15ae2:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   15ae6:	46ca      	mov	sl, r9
        break;
   15ae8:	e6f6      	b.n	158d8 <ble_ll_ctrl_rx_pdu+0x94>
        rsp_opcode = ble_ll_ctrl_rx_pause_enc_req(connsm);
   15aea:	4630      	mov	r0, r6
   15aec:	f7fe ffd6 	bl	14a9c <ble_ll_ctrl_rx_pause_enc_req>
   15af0:	4680      	mov	r8, r0
    int rc = 0;
   15af2:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   15af6:	46ca      	mov	sl, r9
        break;
   15af8:	e6ee      	b.n	158d8 <ble_ll_ctrl_rx_pdu+0x94>
        rsp_opcode = ble_ll_ctrl_rx_pause_enc_rsp(connsm);
   15afa:	4630      	mov	r0, r6
   15afc:	f7fe ffdb 	bl	14ab6 <ble_ll_ctrl_rx_pause_enc_rsp>
   15b00:	4680      	mov	r8, r0
        if (rsp_opcode == BLE_LL_CTRL_PAUSE_ENC_RSP) {
   15b02:	280b      	cmp	r0, #11
   15b04:	d04b      	beq.n	15b9e <ble_ll_ctrl_rx_pdu+0x35a>
    int rc = 0;
   15b06:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   15b0a:	46ca      	mov	sl, r9
   15b0c:	e6e4      	b.n	158d8 <ble_ll_ctrl_rx_pdu+0x94>
        ble_ll_ctrl_rx_ping_rsp(connsm);
   15b0e:	4630      	mov	r0, r6
   15b10:	f7ff fe20 	bl	15754 <ble_ll_ctrl_rx_ping_rsp>
    int rc = 0;
   15b14:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   15b18:	46ca      	mov	sl, r9
    rsp_opcode = BLE_ERR_MAX;
   15b1a:	f04f 08ff 	mov.w	r8, #255	; 0xff
        break;
   15b1e:	e6db      	b.n	158d8 <ble_ll_ctrl_rx_pdu+0x94>
        rsp_opcode = ble_ll_ctrl_rx_conn_param_req(connsm, dptr, rspbuf);
   15b20:	4622      	mov	r2, r4
   15b22:	4641      	mov	r1, r8
   15b24:	4630      	mov	r0, r6
   15b26:	f7ff fe1a 	bl	1575e <ble_ll_ctrl_rx_conn_param_req>
   15b2a:	fa5f f880 	uxtb.w	r8, r0
    int rc = 0;
   15b2e:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   15b32:	46ca      	mov	sl, r9
        break;
   15b34:	e6d0      	b.n	158d8 <ble_ll_ctrl_rx_pdu+0x94>
        rsp_opcode = ble_ll_ctrl_rx_conn_param_rsp(connsm, dptr, rspbuf);
   15b36:	4622      	mov	r2, r4
   15b38:	4641      	mov	r1, r8
   15b3a:	4630      	mov	r0, r6
   15b3c:	f7ff fc54 	bl	153e8 <ble_ll_ctrl_rx_conn_param_rsp>
   15b40:	fa5f f880 	uxtb.w	r8, r0
    int rc = 0;
   15b44:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   15b48:	46ca      	mov	sl, r9
        break;
   15b4a:	e6c5      	b.n	158d8 <ble_ll_ctrl_rx_pdu+0x94>
        rsp_opcode = ble_ll_ctrl_rx_reject_ind(connsm, dptr, opcode, rspdata);
   15b4c:	464b      	mov	r3, r9
   15b4e:	462a      	mov	r2, r5
   15b50:	4641      	mov	r1, r8
   15b52:	4630      	mov	r0, r6
   15b54:	f7ff fe37 	bl	157c6 <ble_ll_ctrl_rx_reject_ind>
   15b58:	fa5f f880 	uxtb.w	r8, r0
    int rc = 0;
   15b5c:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   15b60:	46ca      	mov	sl, r9
        break;
   15b62:	e6b9      	b.n	158d8 <ble_ll_ctrl_rx_pdu+0x94>
   15b64:	0002af9c 	.word	0x0002af9c
        rc = -1;
   15b68:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
    restart_encryption = 0;
   15b6c:	f04f 0a00 	mov.w	sl, #0
        rsp_opcode = BLE_LL_CTRL_UNKNOWN_RSP;
   15b70:	f04f 0807 	mov.w	r8, #7
   15b74:	e6b0      	b.n	158d8 <ble_ll_ctrl_rx_pdu+0x94>
        rc = -1;
   15b76:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
    restart_encryption = 0;
   15b7a:	f04f 0a00 	mov.w	sl, #0
        rsp_opcode = BLE_LL_CTRL_UNKNOWN_RSP;
   15b7e:	f04f 0807 	mov.w	r8, #7
   15b82:	e6a9      	b.n	158d8 <ble_ll_ctrl_rx_pdu+0x94>
    int rc = 0;
   15b84:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   15b88:	46ca      	mov	sl, r9
        rsp_opcode = BLE_LL_CTRL_PING_RSP;
   15b8a:	f04f 0813 	mov.w	r8, #19
   15b8e:	e6a3      	b.n	158d8 <ble_ll_ctrl_rx_pdu+0x94>
            rc  = -1;
   15b90:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
    restart_encryption = 0;
   15b94:	f04f 0a00 	mov.w	sl, #0
            rsp_opcode = BLE_LL_CTRL_UNKNOWN_RSP;
   15b98:	f04f 0807 	mov.w	r8, #7
   15b9c:	e69c      	b.n	158d8 <ble_ll_ctrl_rx_pdu+0x94>
    int rc = 0;
   15b9e:	f04f 0900 	mov.w	r9, #0
            restart_encryption = 1;
   15ba2:	f04f 0a01 	mov.w	sl, #1
   15ba6:	e697      	b.n	158d8 <ble_ll_ctrl_rx_pdu+0x94>
        os_mbuf_free_chain(om);
   15ba8:	4638      	mov	r0, r7
   15baa:	f7f7 ff34 	bl	da16 <os_mbuf_free_chain>
   15bae:	e6ab      	b.n	15908 <ble_ll_ctrl_rx_pdu+0xc4>
            rspbuf[1] = opcode;
   15bb0:	7065      	strb	r5, [r4, #1]
   15bb2:	e69b      	b.n	158ec <ble_ll_ctrl_rx_pdu+0xa8>
            ble_ll_ctrl_proc_init(connsm, BLE_LL_CTRL_PROC_ENCRYPT);
   15bb4:	2102      	movs	r1, #2
   15bb6:	4630      	mov	r0, r6
   15bb8:	f7ff f948 	bl	14e4c <ble_ll_ctrl_proc_init>
   15bbc:	e6a4      	b.n	15908 <ble_ll_ctrl_rx_pdu+0xc4>
        connsm->csmflags.cfbit.pending_initiate_dle = 0;
   15bbe:	78f3      	ldrb	r3, [r6, #3]
   15bc0:	f36f 1345 	bfc	r3, #5, #1
   15bc4:	70f3      	strb	r3, [r6, #3]
        ble_ll_ctrl_initiate_dle(connsm);
   15bc6:	4630      	mov	r0, r6
   15bc8:	f7ff fc81 	bl	154ce <ble_ll_ctrl_initiate_dle>
    return rc;
   15bcc:	e6a1      	b.n	15912 <ble_ll_ctrl_rx_pdu+0xce>
   15bce:	bf00      	nop

00015bd0 <ble_ll_ctrl_reject_ind_send>:
 * @return int
 */
int
ble_ll_ctrl_reject_ind_send(struct ble_ll_conn_sm *connsm, uint8_t rej_opcode,
                            uint8_t err)
{
   15bd0:	b570      	push	{r4, r5, r6, lr}
   15bd2:	4605      	mov	r5, r0
   15bd4:	460c      	mov	r4, r1
   15bd6:	4616      	mov	r6, r2
    uint8_t len;
    uint8_t opcode;
    uint8_t *rspbuf;
    struct os_mbuf *om;

    om = os_msys_get_pkthdr(BLE_LL_CTRL_MAX_PDU_LEN,
   15bd8:	2110      	movs	r1, #16
   15bda:	201b      	movs	r0, #27
   15bdc:	f7f7 fa73 	bl	d0c6 <os_msys_get_pkthdr>
                            sizeof(struct ble_mbuf_hdr));
    if (om) {
   15be0:	b1d8      	cbz	r0, 15c1a <ble_ll_ctrl_reject_ind_send+0x4a>
   15be2:	4601      	mov	r1, r0
        rspbuf = om->om_data;
   15be4:	6803      	ldr	r3, [r0, #0]
        opcode = BLE_LL_CTRL_REJECT_IND_EXT;
        if (rej_opcode == BLE_LL_CTRL_ENC_REQ) {
   15be6:	2c03      	cmp	r4, #3
   15be8:	d00a      	beq.n	15c00 <ble_ll_ctrl_reject_ind_send+0x30>
            if ((connsm->conn_features & BLE_LL_FEAT_EXTENDED_REJ) == 0) {
                opcode = BLE_LL_CTRL_REJECT_IND;
            }
        }
        rspbuf[0] = opcode;
   15bea:	2211      	movs	r2, #17
   15bec:	701a      	strb	r2, [r3, #0]
        if (opcode == BLE_LL_CTRL_REJECT_IND) {
            rspbuf[1] = err;
            len = BLE_LL_CTRL_REJ_IND_LEN + 1;
        } else {
            rspbuf[1] = rej_opcode;
   15bee:	705c      	strb	r4, [r3, #1]
            rspbuf[2] = err;
   15bf0:	709e      	strb	r6, [r3, #2]
            len = BLE_LL_CTRL_REJECT_IND_EXT_LEN + 1;
   15bf2:	2303      	movs	r3, #3
        }
        ble_ll_conn_enqueue_pkt(connsm, om, BLE_LL_LLID_CTRL, len);
   15bf4:	2203      	movs	r2, #3
   15bf6:	4628      	mov	r0, r5
   15bf8:	f7fd ff36 	bl	13a68 <ble_ll_conn_enqueue_pkt>
        rc = 0;
   15bfc:	2000      	movs	r0, #0
    } else {
        rc = 1;
    }
    return rc;
}
   15bfe:	bd70      	pop	{r4, r5, r6, pc}
            if ((connsm->conn_features & BLE_LL_FEAT_EXTENDED_REJ) == 0) {
   15c00:	f895 203f 	ldrb.w	r2, [r5, #63]	; 0x3f
   15c04:	f012 0f04 	tst.w	r2, #4
   15c08:	d104      	bne.n	15c14 <ble_ll_ctrl_reject_ind_send+0x44>
        rspbuf[0] = opcode;
   15c0a:	220d      	movs	r2, #13
   15c0c:	701a      	strb	r2, [r3, #0]
            rspbuf[1] = err;
   15c0e:	705e      	strb	r6, [r3, #1]
            len = BLE_LL_CTRL_REJ_IND_LEN + 1;
   15c10:	2302      	movs	r3, #2
   15c12:	e7ef      	b.n	15bf4 <ble_ll_ctrl_reject_ind_send+0x24>
        rspbuf[0] = opcode;
   15c14:	2211      	movs	r2, #17
   15c16:	701a      	strb	r2, [r3, #0]
   15c18:	e7e9      	b.n	15bee <ble_ll_ctrl_reject_ind_send+0x1e>
        rc = 1;
   15c1a:	2001      	movs	r0, #1
    return rc;
   15c1c:	e7ef      	b.n	15bfe <ble_ll_ctrl_reject_ind_send+0x2e>

00015c1e <ble_ll_ctrl_tx_done>:
 *
 * @return int
 */
int
ble_ll_ctrl_tx_done(struct os_mbuf *txpdu, struct ble_ll_conn_sm *connsm)
{
   15c1e:	b538      	push	{r3, r4, r5, lr}
   15c20:	4604      	mov	r4, r0
    int rc;
    uint8_t opcode;

    rc = 0;
    opcode = txpdu->om_data[0];
   15c22:	6802      	ldr	r2, [r0, #0]
   15c24:	7813      	ldrb	r3, [r2, #0]
    switch (opcode) {
   15c26:	3b02      	subs	r3, #2
   15c28:	2b0f      	cmp	r3, #15
   15c2a:	d85a      	bhi.n	15ce2 <ble_ll_ctrl_tx_done+0xc4>
   15c2c:	e8df f003 	tbb	[pc, r3]
   15c30:	59373208 	.word	0x59373208
   15c34:	5959593d 	.word	0x5959593d
   15c38:	2d594f32 	.word	0x2d594f32
   15c3c:	13595959 	.word	0x13595959
    case BLE_LL_CTRL_TERMINATE_IND:
        connsm->csmflags.cfbit.terminate_ind_txd = 1;
   15c40:	780b      	ldrb	r3, [r1, #0]
   15c42:	f043 0302 	orr.w	r3, r3, #2
   15c46:	700b      	strb	r3, [r1, #0]
        rc = -1;
   15c48:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
#endif
    default:
        break;
    }

    os_mbuf_free_chain(txpdu);
   15c4c:	4620      	mov	r0, r4
   15c4e:	f7f7 fee2 	bl	da16 <os_mbuf_free_chain>
    return rc;
}
   15c52:	4628      	mov	r0, r5
   15c54:	bd38      	pop	{r3, r4, r5, pc}
        if (connsm->cur_ctrl_proc == BLE_LL_CTRL_PROC_CONN_PARAM_REQ) {
   15c56:	f891 303b 	ldrb.w	r3, [r1, #59]	; 0x3b
   15c5a:	2b06      	cmp	r3, #6
   15c5c:	d008      	beq.n	15c70 <ble_ll_ctrl_tx_done+0x52>
        if (connsm->enc_data.enc_state > CONN_ENC_S_ENCRYPTED) {
   15c5e:	f891 3118 	ldrb.w	r3, [r1, #280]	; 0x118
   15c62:	2b02      	cmp	r3, #2
   15c64:	d93f      	bls.n	15ce6 <ble_ll_ctrl_tx_done+0xc8>
            connsm->enc_data.enc_state = CONN_ENC_S_UNENCRYPTED;
   15c66:	2301      	movs	r3, #1
   15c68:	f881 3118 	strb.w	r3, [r1, #280]	; 0x118
    rc = 0;
   15c6c:	2500      	movs	r5, #0
   15c6e:	e7ed      	b.n	15c4c <ble_ll_ctrl_tx_done+0x2e>
            if (txpdu->om_data[1] == BLE_LL_CTRL_CONN_PARM_REQ &&
   15c70:	7853      	ldrb	r3, [r2, #1]
   15c72:	2b0f      	cmp	r3, #15
   15c74:	d1f3      	bne.n	15c5e <ble_ll_ctrl_tx_done+0x40>
                            txpdu->om_data[2] != BLE_ERR_LMP_COLLISION) {
   15c76:	7893      	ldrb	r3, [r2, #2]
            if (txpdu->om_data[1] == BLE_LL_CTRL_CONN_PARM_REQ &&
   15c78:	2b23      	cmp	r3, #35	; 0x23
   15c7a:	d0f0      	beq.n	15c5e <ble_ll_ctrl_tx_done+0x40>
                connsm->reject_reason = txpdu->om_data[2];
   15c7c:	f881 3037 	strb.w	r3, [r1, #55]	; 0x37
                connsm->csmflags.cfbit.host_expects_upd_event = 1;
   15c80:	784b      	ldrb	r3, [r1, #1]
   15c82:	f043 0302 	orr.w	r3, r3, #2
   15c86:	704b      	strb	r3, [r1, #1]
   15c88:	e7e9      	b.n	15c5e <ble_ll_ctrl_tx_done+0x40>
        connsm->enc_data.enc_state = CONN_ENC_S_UNENCRYPTED;
   15c8a:	2301      	movs	r3, #1
   15c8c:	f881 3118 	strb.w	r3, [r1, #280]	; 0x118
    rc = 0;
   15c90:	2500      	movs	r5, #0
        break;
   15c92:	e7db      	b.n	15c4c <ble_ll_ctrl_tx_done+0x2e>
        connsm->enc_data.enc_state = CONN_ENC_S_ENC_RSP_WAIT;
   15c94:	2303      	movs	r3, #3
   15c96:	f881 3118 	strb.w	r3, [r1, #280]	; 0x118
    rc = 0;
   15c9a:	2500      	movs	r5, #0
        break;
   15c9c:	e7d6      	b.n	15c4c <ble_ll_ctrl_tx_done+0x2e>
        connsm->csmflags.cfbit.send_ltk_req = 1;
   15c9e:	788b      	ldrb	r3, [r1, #2]
   15ca0:	f043 0301 	orr.w	r3, r3, #1
   15ca4:	708b      	strb	r3, [r1, #2]
    rc = 0;
   15ca6:	2500      	movs	r5, #0
        break;
   15ca8:	e7d0      	b.n	15c4c <ble_ll_ctrl_tx_done+0x2e>
        if (connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) {
   15caa:	79cb      	ldrb	r3, [r1, #7]
   15cac:	2b02      	cmp	r3, #2
   15cae:	d001      	beq.n	15cb4 <ble_ll_ctrl_tx_done+0x96>
    rc = 0;
   15cb0:	2500      	movs	r5, #0
   15cb2:	e7cb      	b.n	15c4c <ble_ll_ctrl_tx_done+0x2e>
            connsm->enc_data.enc_state = CONN_ENC_S_ENCRYPTED;
   15cb4:	f881 3118 	strb.w	r3, [r1, #280]	; 0x118
            if (CONN_F_LE_PING_SUPP(connsm)) {
   15cb8:	788b      	ldrb	r3, [r1, #2]
   15cba:	f013 0f08 	tst.w	r3, #8
   15cbe:	d101      	bne.n	15cc4 <ble_ll_ctrl_tx_done+0xa6>
    rc = 0;
   15cc0:	2500      	movs	r5, #0
   15cc2:	e7c3      	b.n	15c4c <ble_ll_ctrl_tx_done+0x2e>
                ble_ll_conn_auth_pyld_timer_start(connsm);
   15cc4:	4608      	mov	r0, r1
   15cc6:	f7fd f80d 	bl	12ce4 <ble_ll_conn_auth_pyld_timer_start>
    rc = 0;
   15cca:	2500      	movs	r5, #0
   15ccc:	e7be      	b.n	15c4c <ble_ll_ctrl_tx_done+0x2e>
        if (connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) {
   15cce:	79cb      	ldrb	r3, [r1, #7]
   15cd0:	2b02      	cmp	r3, #2
   15cd2:	d001      	beq.n	15cd8 <ble_ll_ctrl_tx_done+0xba>
    rc = 0;
   15cd4:	2500      	movs	r5, #0
   15cd6:	e7b9      	b.n	15c4c <ble_ll_ctrl_tx_done+0x2e>
            connsm->enc_data.enc_state = CONN_ENC_S_PAUSE_ENC_RSP_WAIT;
   15cd8:	2304      	movs	r3, #4
   15cda:	f881 3118 	strb.w	r3, [r1, #280]	; 0x118
    rc = 0;
   15cde:	2500      	movs	r5, #0
   15ce0:	e7b4      	b.n	15c4c <ble_ll_ctrl_tx_done+0x2e>
   15ce2:	2500      	movs	r5, #0
   15ce4:	e7b2      	b.n	15c4c <ble_ll_ctrl_tx_done+0x2e>
   15ce6:	2500      	movs	r5, #0
   15ce8:	e7b0      	b.n	15c4c <ble_ll_ctrl_tx_done+0x2e>

00015cea <ble_ll_hci_get_num_cmd_pkts>:
 */
static uint8_t
ble_ll_hci_get_num_cmd_pkts(void)
{
    return BLE_LL_CFG_NUM_HCI_CMD_PKTS;
}
   15cea:	2001      	movs	r0, #1
   15cec:	4770      	bx	lr

00015cee <ble_ll_hci_rd_local_version>:
 *
 * @return int
 */
static int
ble_ll_hci_rd_local_version(uint8_t *rspbuf, uint8_t *rsplen)
{
   15cee:	4603      	mov	r3, r0
    struct ble_hci_ip_rd_local_ver_rp *rsp = (void *) rspbuf;

    rsp->hci_ver = BLE_HCI_VER_BCS;
   15cf0:	2209      	movs	r2, #9
   15cf2:	7002      	strb	r2, [r0, #0]
    rsp->hci_rev = 0;
   15cf4:	2000      	movs	r0, #0
   15cf6:	7058      	strb	r0, [r3, #1]
   15cf8:	7098      	strb	r0, [r3, #2]
    rsp->lmp_ver = BLE_LMP_VER_BCS;
   15cfa:	70da      	strb	r2, [r3, #3]
    rsp->manufacturer = htole16(MYNEWT_VAL(BLE_LL_MFRG_ID));
   15cfc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15d00:	711a      	strb	r2, [r3, #4]
   15d02:	715a      	strb	r2, [r3, #5]
    rsp->lmp_subver = 0;
   15d04:	7198      	strb	r0, [r3, #6]
   15d06:	71d8      	strb	r0, [r3, #7]

    *rsplen = sizeof(*rsp);
   15d08:	2308      	movs	r3, #8
   15d0a:	700b      	strb	r3, [r1, #0]
    return BLE_ERR_SUCCESS;
}
   15d0c:	4770      	bx	lr

00015d0e <ble_ll_hci_rd_local_supp_feat>:
    /*
     * The only two bits we set here currently are (5th byte):
     *      BR/EDR not supported        (bit 5)
     *      LE supported (controller)   (bit 6)
     */
    rsp->features = htole64(0x0000006000000000);
   15d0e:	2300      	movs	r3, #0
   15d10:	7003      	strb	r3, [r0, #0]
   15d12:	7043      	strb	r3, [r0, #1]
   15d14:	7083      	strb	r3, [r0, #2]
   15d16:	70c3      	strb	r3, [r0, #3]
   15d18:	2260      	movs	r2, #96	; 0x60
   15d1a:	7102      	strb	r2, [r0, #4]
   15d1c:	7143      	strb	r3, [r0, #5]
   15d1e:	7183      	strb	r3, [r0, #6]
   15d20:	71c3      	strb	r3, [r0, #7]

    *rsplen = sizeof(*rsp);
   15d22:	2208      	movs	r2, #8
   15d24:	700a      	strb	r2, [r1, #0]
    return BLE_ERR_SUCCESS;
}
   15d26:	4618      	mov	r0, r3
   15d28:	4770      	bx	lr
	...

00015d2c <ble_ll_hci_rd_bd_addr>:
static int
ble_ll_hci_rd_bd_addr(uint8_t *rspbuf, uint8_t *rsplen)
{
    struct ble_hci_ip_rd_bd_addr_rp *rsp = (void *) rspbuf;

    memcpy(rsp->addr, g_dev_addr, BLE_DEV_ADDR_LEN);
   15d2c:	4b04      	ldr	r3, [pc, #16]	; (15d40 <ble_ll_hci_rd_bd_addr+0x14>)
   15d2e:	681a      	ldr	r2, [r3, #0]
   15d30:	6002      	str	r2, [r0, #0]
   15d32:	889b      	ldrh	r3, [r3, #4]
   15d34:	8083      	strh	r3, [r0, #4]

    *rsplen = sizeof(*rsp);
   15d36:	2306      	movs	r3, #6
   15d38:	700b      	strb	r3, [r1, #0]
    return BLE_ERR_SUCCESS;
}
   15d3a:	2000      	movs	r0, #0
   15d3c:	4770      	bx	lr
   15d3e:	bf00      	nop
   15d40:	20003cf4 	.word	0x20003cf4

00015d44 <ble_ll_hci_set_le_event_mask>:
static int
ble_ll_hci_set_le_event_mask(const uint8_t *cmdbuf, uint8_t len)
{
    const struct ble_hci_le_set_event_mask_cp *cmd = (const void *) cmdbuf;

    if (len != sizeof(*cmd)) {
   15d44:	2908      	cmp	r1, #8
   15d46:	d106      	bne.n	15d56 <ble_ll_hci_set_le_event_mask+0x12>
        return BLE_ERR_INV_HCI_CMD_PARMS;
    }

    g_ble_ll_hci_le_event_mask = le64toh(cmd->event_mask);
   15d48:	6801      	ldr	r1, [r0, #0]
   15d4a:	6842      	ldr	r2, [r0, #4]
   15d4c:	4b03      	ldr	r3, [pc, #12]	; (15d5c <ble_ll_hci_set_le_event_mask+0x18>)
   15d4e:	6019      	str	r1, [r3, #0]
   15d50:	605a      	str	r2, [r3, #4]

    return BLE_ERR_SUCCESS;
   15d52:	2000      	movs	r0, #0
   15d54:	4770      	bx	lr
        return BLE_ERR_INV_HCI_CMD_PARMS;
   15d56:	2012      	movs	r0, #18
}
   15d58:	4770      	bx	lr
   15d5a:	bf00      	nop
   15d5c:	20002640 	.word	0x20002640

00015d60 <ble_ll_hci_le_read_bufsize>:
static int
ble_ll_hci_le_read_bufsize(uint8_t *rspbuf, uint8_t *rsplen)
{
    struct ble_hci_le_rd_buf_size_rp *rp = (void *) rspbuf;

    rp->data_len = htole16(g_ble_ll_data.ll_acl_pkt_size);
   15d60:	4b04      	ldr	r3, [pc, #16]	; (15d74 <ble_ll_hci_le_read_bufsize+0x14>)
   15d62:	895a      	ldrh	r2, [r3, #10]
   15d64:	8002      	strh	r2, [r0, #0]
    rp->data_packets = g_ble_ll_data.ll_num_acl_pkts;
   15d66:	7a5b      	ldrb	r3, [r3, #9]
   15d68:	7083      	strb	r3, [r0, #2]

    *rsplen = sizeof(*rp);
   15d6a:	2303      	movs	r3, #3
   15d6c:	700b      	strb	r3, [r1, #0]
    return BLE_ERR_SUCCESS;
}
   15d6e:	2000      	movs	r0, #0
   15d70:	4770      	bx	lr
   15d72:	bf00      	nop
   15d74:	20003d50 	.word	0x20003d50

00015d78 <ble_ll_hci_le_rd_sugg_data_len>:
ble_ll_hci_le_rd_sugg_data_len(uint8_t *rspbuf, uint8_t *rsplen)
{
    struct ble_hci_le_rd_sugg_def_data_len_rp *rsp = (void *) rspbuf;

    /* Place the data packet length and number of packets in the buffer */
    rsp->max_tx_octets = htole16(g_ble_ll_conn_params.sugg_tx_octets);
   15d78:	4b04      	ldr	r3, [pc, #16]	; (15d8c <ble_ll_hci_le_rd_sugg_data_len+0x14>)
   15d7a:	7a5a      	ldrb	r2, [r3, #9]
   15d7c:	8002      	strh	r2, [r0, #0]
    rsp->max_tx_time = htole16(g_ble_ll_conn_params.sugg_tx_time);
   15d7e:	895b      	ldrh	r3, [r3, #10]
   15d80:	8043      	strh	r3, [r0, #2]

    *rsplen = sizeof(*rsp);
   15d82:	2304      	movs	r3, #4
   15d84:	700b      	strb	r3, [r1, #0]
    return BLE_ERR_SUCCESS;
}
   15d86:	2000      	movs	r0, #0
   15d88:	4770      	bx	lr
   15d8a:	bf00      	nop
   15d8c:	20003e80 	.word	0x20003e80

00015d90 <ble_ll_hci_le_rd_max_data_len>:
ble_ll_hci_le_rd_max_data_len(uint8_t *rspbuf, uint8_t *rsplen)
{
    struct ble_hci_le_rd_max_data_len_rp *rsp = (void *)rspbuf;

    /* Place the data packet length and number of packets in the buffer */
    rsp->max_tx_octests = htole16(g_ble_ll_conn_params.supp_max_tx_octets);
   15d90:	4b06      	ldr	r3, [pc, #24]	; (15dac <ble_ll_hci_le_rd_max_data_len+0x1c>)
   15d92:	799a      	ldrb	r2, [r3, #6]
   15d94:	8002      	strh	r2, [r0, #0]
    rsp->max_tx_time = htole16(g_ble_ll_conn_params.supp_max_tx_time);
   15d96:	8a5a      	ldrh	r2, [r3, #18]
   15d98:	8042      	strh	r2, [r0, #2]
    rsp->max_rx_octests = htole16(g_ble_ll_conn_params.supp_max_rx_octets);
   15d9a:	79da      	ldrb	r2, [r3, #7]
   15d9c:	8082      	strh	r2, [r0, #4]
    rsp->max_rx_time = htole16(g_ble_ll_conn_params.supp_max_rx_time);
   15d9e:	8a9b      	ldrh	r3, [r3, #20]
   15da0:	80c3      	strh	r3, [r0, #6]

    *rsplen = sizeof(*rsp);
   15da2:	2308      	movs	r3, #8
   15da4:	700b      	strb	r3, [r1, #0]
    return BLE_ERR_SUCCESS;
}
   15da6:	2000      	movs	r0, #0
   15da8:	4770      	bx	lr
   15daa:	bf00      	nop
   15dac:	20003e80 	.word	0x20003e80

00015db0 <ble_ll_hci_le_cmd_send_cmd_status>:
static int
ble_ll_hci_le_cmd_send_cmd_status(uint16_t ocf)
{
    int rc;

    switch (ocf) {
   15db0:	380d      	subs	r0, #13
   15db2:	2837      	cmp	r0, #55	; 0x37
   15db4:	d81f      	bhi.n	15df6 <ble_ll_hci_le_cmd_send_cmd_status+0x46>
   15db6:	e8df f000 	tbb	[pc, r0]
   15dba:	1e1c      	.short	0x1e1c
   15dbc:	1e1e1e1e 	.word	0x1e1e1e1e
   15dc0:	1c1e1e1c 	.word	0x1c1e1e1c
   15dc4:	1e1c1e1e 	.word	0x1e1c1e1e
   15dc8:	1e1e1e1e 	.word	0x1e1e1e1e
   15dcc:	1e1e1e1e 	.word	0x1e1e1e1e
   15dd0:	1c1c1e1e 	.word	0x1c1c1e1e
   15dd4:	1e1e1e1e 	.word	0x1e1e1e1e
   15dd8:	1e1e1e1e 	.word	0x1e1e1e1e
   15ddc:	1c1e1e1e 	.word	0x1c1e1e1e
   15de0:	1e1e1e1e 	.word	0x1e1e1e1e
   15de4:	1e1e1e1e 	.word	0x1e1e1e1e
   15de8:	1e1e1e1e 	.word	0x1e1e1e1e
   15dec:	1e1e1e1e 	.word	0x1e1e1e1e
   15df0:	1c1c      	.short	0x1c1c
    case BLE_HCI_OCF_LE_START_ENCRYPT:
    case BLE_HCI_OCF_LE_RD_P256_PUBKEY:
    case BLE_HCI_OCF_LE_GEN_DHKEY:
    case BLE_HCI_OCF_LE_SET_PHY:
    case BLE_HCI_OCF_LE_PERIODIC_ADV_CREATE_SYNC:
        rc = 1;
   15df2:	2001      	movs	r0, #1
   15df4:	4770      	bx	lr
        break;
    default:
        rc = 0;
   15df6:	2000      	movs	r0, #0
        break;
    }
    return rc;
}
   15df8:	4770      	bx	lr
	...

00015dfc <ble_ll_read_rf_path_compensation>:
static int
ble_ll_read_rf_path_compensation(uint8_t *rspbuf, uint8_t *rsplen)
{
    struct ble_hci_le_rd_rf_path_compensation_rp *rsp = (void *) rspbuf;

    rsp->rx_path_compensation = htole16(rx_path_pwr_compensation);
   15dfc:	4b04      	ldr	r3, [pc, #16]	; (15e10 <ble_ll_read_rf_path_compensation+0x14>)
   15dfe:	881b      	ldrh	r3, [r3, #0]
   15e00:	8043      	strh	r3, [r0, #2]
    rsp->tx_path_compensation = htole16(tx_path_pwr_compensation);
   15e02:	4b04      	ldr	r3, [pc, #16]	; (15e14 <ble_ll_read_rf_path_compensation+0x18>)
   15e04:	881b      	ldrh	r3, [r3, #0]
   15e06:	8003      	strh	r3, [r0, #0]

    *rsplen = sizeof(*rsp);;
   15e08:	2304      	movs	r3, #4
   15e0a:	700b      	strb	r3, [r1, #0]
    return BLE_ERR_SUCCESS;
}
   15e0c:	2000      	movs	r0, #0
   15e0e:	4770      	bx	lr
   15e10:	20002648 	.word	0x20002648
   15e14:	2000264a 	.word	0x2000264a

00015e18 <ble_ll_hci_cb_set_event_mask>:
static int
ble_ll_hci_cb_set_event_mask(const uint8_t *cmdbuf, uint8_t len)
{
    const struct ble_hci_cb_set_event_mask_cp *cmd = (const void *) cmdbuf;

    if (len != sizeof (*cmd)) {
   15e18:	2908      	cmp	r1, #8
   15e1a:	d106      	bne.n	15e2a <ble_ll_hci_cb_set_event_mask+0x12>
        return BLE_ERR_INV_HCI_CMD_PARMS;
    }

    g_ble_ll_hci_event_mask = le64toh(cmd->event_mask);
   15e1c:	6801      	ldr	r1, [r0, #0]
   15e1e:	6842      	ldr	r2, [r0, #4]
   15e20:	4b03      	ldr	r3, [pc, #12]	; (15e30 <ble_ll_hci_cb_set_event_mask+0x18>)
   15e22:	6019      	str	r1, [r3, #0]
   15e24:	605a      	str	r2, [r3, #4]

    return BLE_ERR_SUCCESS;
   15e26:	2000      	movs	r0, #0
   15e28:	4770      	bx	lr
        return BLE_ERR_INV_HCI_CMD_PARMS;
   15e2a:	2012      	movs	r0, #18
}
   15e2c:	4770      	bx	lr
   15e2e:	bf00      	nop
   15e30:	20002630 	.word	0x20002630

00015e34 <ble_ll_hci_cb_set_event_mask2>:
static int
ble_ll_hci_cb_set_event_mask2(const uint8_t *cmdbuf, uint8_t len)
{
    const struct ble_hci_cb_set_event_mask2_cp *cmd = (const void *) cmdbuf;

    if (len != sizeof (*cmd)) {
   15e34:	2908      	cmp	r1, #8
   15e36:	d106      	bne.n	15e46 <ble_ll_hci_cb_set_event_mask2+0x12>
        return BLE_ERR_INV_HCI_CMD_PARMS;
    }

    g_ble_ll_hci_event_mask2 = le64toh(cmd->event_mask2);
   15e38:	6801      	ldr	r1, [r0, #0]
   15e3a:	6842      	ldr	r2, [r0, #4]
   15e3c:	4b03      	ldr	r3, [pc, #12]	; (15e4c <ble_ll_hci_cb_set_event_mask2+0x18>)
   15e3e:	6019      	str	r1, [r3, #0]
   15e40:	605a      	str	r2, [r3, #4]

    return BLE_ERR_SUCCESS;
   15e42:	2000      	movs	r0, #0
   15e44:	4770      	bx	lr
        return BLE_ERR_INV_HCI_CMD_PARMS;
   15e46:	2012      	movs	r0, #18
}
   15e48:	4770      	bx	lr
   15e4a:	bf00      	nop
   15e4c:	20002638 	.word	0x20002638

00015e50 <ble_ll_hci_link_ctrl_cmd_proc>:
{
   15e50:	b508      	push	{r3, lr}
    switch (ocf) {
   15e52:	2a06      	cmp	r2, #6
   15e54:	d003      	beq.n	15e5e <ble_ll_hci_link_ctrl_cmd_proc+0xe>
   15e56:	2a1d      	cmp	r2, #29
   15e58:	d006      	beq.n	15e68 <ble_ll_hci_link_ctrl_cmd_proc+0x18>
        rc = BLE_ERR_UNKNOWN_HCI_CMD;
   15e5a:	2001      	movs	r0, #1
    return rc;
   15e5c:	e003      	b.n	15e66 <ble_ll_hci_link_ctrl_cmd_proc+0x16>
        rc = ble_ll_conn_hci_disconnect_cmd(cmdbuf, len);
   15e5e:	f7fe fc1b 	bl	14698 <ble_ll_conn_hci_disconnect_cmd>
        rc += (BLE_ERR_MAX + 1);
   15e62:	f500 7080 	add.w	r0, r0, #256	; 0x100
}
   15e66:	bd08      	pop	{r3, pc}
        rc = ble_ll_conn_hci_rd_rem_ver_cmd(cmdbuf, len);
   15e68:	f7fe fc66 	bl	14738 <ble_ll_conn_hci_rd_rem_ver_cmd>
        rc += (BLE_ERR_MAX + 1);
   15e6c:	f500 7080 	add.w	r0, r0, #256	; 0x100
        break;
   15e70:	e7f9      	b.n	15e66 <ble_ll_hci_link_ctrl_cmd_proc+0x16>

00015e72 <ble_ll_hci_ctlr_bb_cmd_proc>:

static int
ble_ll_hci_ctlr_bb_cmd_proc(const uint8_t *cmdbuf, uint8_t len, uint16_t ocf,
                            uint8_t *rspbuf, uint8_t *rsplen)
{
   15e72:	b510      	push	{r4, lr}
    int rc;

    /* Assume error; if all pass rc gets set to 0 */
    rc = BLE_ERR_INV_HCI_CMD_PARMS;

    switch (ocf) {
   15e74:	2a63      	cmp	r2, #99	; 0x63
   15e76:	d015      	beq.n	15ea4 <ble_ll_hci_ctlr_bb_cmd_proc+0x32>
   15e78:	461c      	mov	r4, r3
   15e7a:	d807      	bhi.n	15e8c <ble_ll_hci_ctlr_bb_cmd_proc+0x1a>
   15e7c:	2a01      	cmp	r2, #1
   15e7e:	d00e      	beq.n	15e9e <ble_ll_hci_ctlr_bb_cmd_proc+0x2c>
   15e80:	2a03      	cmp	r2, #3
   15e82:	d117      	bne.n	15eb4 <ble_ll_hci_ctlr_bb_cmd_proc+0x42>
    case BLE_HCI_OCF_CB_SET_EVENT_MASK:
        rc = ble_ll_hci_cb_set_event_mask(cmdbuf, len);
        break;
    case BLE_HCI_OCF_CB_RESET:
        if (len == 0) {
   15e84:	b9c1      	cbnz	r1, 15eb8 <ble_ll_hci_ctlr_bb_cmd_proc+0x46>
            rc = ble_ll_reset();
   15e86:	f7fa fdbb 	bl	10a00 <ble_ll_reset>
   15e8a:	e00a      	b.n	15ea2 <ble_ll_hci_ctlr_bb_cmd_proc+0x30>
    switch (ocf) {
   15e8c:	2a7b      	cmp	r2, #123	; 0x7b
   15e8e:	d00c      	beq.n	15eaa <ble_ll_hci_ctlr_bb_cmd_proc+0x38>
   15e90:	2a7c      	cmp	r2, #124	; 0x7c
   15e92:	d10f      	bne.n	15eb4 <ble_ll_hci_ctlr_bb_cmd_proc+0x42>
#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LE_PING)
    case BLE_HCI_OCF_CB_RD_AUTH_PYLD_TMO:
        rc = ble_ll_conn_hci_rd_auth_pyld_tmo(cmdbuf, len, rspbuf, rsplen);
        break;
    case BLE_HCI_OCF_CB_WR_AUTH_PYLD_TMO:
        rc = ble_ll_conn_hci_wr_auth_pyld_tmo(cmdbuf, len, rspbuf, rsplen);
   15e94:	9b02      	ldr	r3, [sp, #8]
   15e96:	4622      	mov	r2, r4
   15e98:	f7fe fd9e 	bl	149d8 <ble_ll_conn_hci_wr_auth_pyld_tmo>
        break;
   15e9c:	e001      	b.n	15ea2 <ble_ll_hci_ctlr_bb_cmd_proc+0x30>
        rc = ble_ll_hci_cb_set_event_mask(cmdbuf, len);
   15e9e:	f7ff ffbb 	bl	15e18 <ble_ll_hci_cb_set_event_mask>
        rc = BLE_ERR_UNKNOWN_HCI_CMD;
        break;
    }

    return rc;
}
   15ea2:	bd10      	pop	{r4, pc}
        rc = ble_ll_hci_cb_set_event_mask2(cmdbuf, len);
   15ea4:	f7ff ffc6 	bl	15e34 <ble_ll_hci_cb_set_event_mask2>
        break;
   15ea8:	e7fb      	b.n	15ea2 <ble_ll_hci_ctlr_bb_cmd_proc+0x30>
        rc = ble_ll_conn_hci_rd_auth_pyld_tmo(cmdbuf, len, rspbuf, rsplen);
   15eaa:	9b02      	ldr	r3, [sp, #8]
   15eac:	4622      	mov	r2, r4
   15eae:	f7fe fd7a 	bl	149a6 <ble_ll_conn_hci_rd_auth_pyld_tmo>
        break;
   15eb2:	e7f6      	b.n	15ea2 <ble_ll_hci_ctlr_bb_cmd_proc+0x30>
        rc = BLE_ERR_UNKNOWN_HCI_CMD;
   15eb4:	2001      	movs	r0, #1
   15eb6:	e7f4      	b.n	15ea2 <ble_ll_hci_ctlr_bb_cmd_proc+0x30>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   15eb8:	2012      	movs	r0, #18
    return rc;
   15eba:	e7f2      	b.n	15ea2 <ble_ll_hci_ctlr_bb_cmd_proc+0x30>

00015ebc <ble_ll_hci_rd_local_supp_cmd>:
{
   15ebc:	b4f0      	push	{r4, r5, r6, r7}
    memset(rsp->commands, 0, sizeof(rsp->commands));
   15ebe:	2300      	movs	r3, #0
   15ec0:	f8c0 302a 	str.w	r3, [r0, #42]	; 0x2a
   15ec4:	f8c0 302e 	str.w	r3, [r0, #46]	; 0x2e
   15ec8:	f8c0 3032 	str.w	r3, [r0, #50]	; 0x32
   15ecc:	f8c0 3036 	str.w	r3, [r0, #54]	; 0x36
   15ed0:	f8c0 303a 	str.w	r3, [r0, #58]	; 0x3a
   15ed4:	87c3      	strh	r3, [r0, #62]	; 0x3e
    memcpy(rsp->commands, g_ble_ll_supp_cmds, sizeof(g_ble_ll_supp_cmds));
   15ed6:	4b0d      	ldr	r3, [pc, #52]	; (15f0c <ble_ll_hci_rd_local_supp_cmd+0x50>)
   15ed8:	f103 0220 	add.w	r2, r3, #32
   15edc:	681f      	ldr	r7, [r3, #0]
   15ede:	685e      	ldr	r6, [r3, #4]
   15ee0:	689d      	ldr	r5, [r3, #8]
   15ee2:	68dc      	ldr	r4, [r3, #12]
   15ee4:	6007      	str	r7, [r0, #0]
   15ee6:	6046      	str	r6, [r0, #4]
   15ee8:	6085      	str	r5, [r0, #8]
   15eea:	60c4      	str	r4, [r0, #12]
   15eec:	3310      	adds	r3, #16
   15eee:	3010      	adds	r0, #16
   15ef0:	4293      	cmp	r3, r2
   15ef2:	d1f3      	bne.n	15edc <ble_ll_hci_rd_local_supp_cmd+0x20>
   15ef4:	681c      	ldr	r4, [r3, #0]
   15ef6:	685a      	ldr	r2, [r3, #4]
   15ef8:	6004      	str	r4, [r0, #0]
   15efa:	6042      	str	r2, [r0, #4]
   15efc:	891b      	ldrh	r3, [r3, #8]
   15efe:	8103      	strh	r3, [r0, #8]
    *rsplen = sizeof(*rsp);
   15f00:	2340      	movs	r3, #64	; 0x40
   15f02:	700b      	strb	r3, [r1, #0]
}
   15f04:	2000      	movs	r0, #0
   15f06:	bcf0      	pop	{r4, r5, r6, r7}
   15f08:	4770      	bx	lr
   15f0a:	bf00      	nop
   15f0c:	0002afd4 	.word	0x0002afd4

00015f10 <ble_ll_hci_info_params_cmd_proc>:

static int
ble_ll_hci_info_params_cmd_proc(const uint8_t *cmdbuf, uint8_t len,
                                uint16_t ocf, uint8_t *rspbuf, uint8_t *rsplen)
{
   15f10:	b508      	push	{r3, lr}
    int rc;

    /* Assume error; if all pass rc gets set to 0 */
    rc = BLE_ERR_INV_HCI_CMD_PARMS;

    switch (ocf) {
   15f12:	3a01      	subs	r2, #1
   15f14:	2a08      	cmp	r2, #8
   15f16:	d81e      	bhi.n	15f56 <ble_ll_hci_info_params_cmd_proc+0x46>
   15f18:	e8df f002 	tbb	[pc, r2]
   15f1c:	1d110b05 	.word	0x1d110b05
   15f20:	1d1d1d1d 	.word	0x1d1d1d1d
   15f24:	17          	.byte	0x17
   15f25:	00          	.byte	0x00
    case BLE_HCI_OCF_IP_RD_LOCAL_VER:
        if (len == 0) {
   15f26:	b9c1      	cbnz	r1, 15f5a <ble_ll_hci_info_params_cmd_proc+0x4a>
            rc = ble_ll_hci_rd_local_version(rspbuf, rsplen);
   15f28:	9902      	ldr	r1, [sp, #8]
   15f2a:	4618      	mov	r0, r3
   15f2c:	f7ff fedf 	bl	15cee <ble_ll_hci_rd_local_version>
   15f30:	e012      	b.n	15f58 <ble_ll_hci_info_params_cmd_proc+0x48>
        }
        break;
    case BLE_HCI_OCF_IP_RD_LOC_SUPP_CMD:
        if (len == 0) {
   15f32:	b9a1      	cbnz	r1, 15f5e <ble_ll_hci_info_params_cmd_proc+0x4e>
            rc = ble_ll_hci_rd_local_supp_cmd(rspbuf, rsplen);
   15f34:	9902      	ldr	r1, [sp, #8]
   15f36:	4618      	mov	r0, r3
   15f38:	f7ff ffc0 	bl	15ebc <ble_ll_hci_rd_local_supp_cmd>
   15f3c:	e00c      	b.n	15f58 <ble_ll_hci_info_params_cmd_proc+0x48>
        }
        break;
    case BLE_HCI_OCF_IP_RD_LOC_SUPP_FEAT:
        if (len == 0) {
   15f3e:	b981      	cbnz	r1, 15f62 <ble_ll_hci_info_params_cmd_proc+0x52>
            rc = ble_ll_hci_rd_local_supp_feat(rspbuf, rsplen);
   15f40:	9902      	ldr	r1, [sp, #8]
   15f42:	4618      	mov	r0, r3
   15f44:	f7ff fee3 	bl	15d0e <ble_ll_hci_rd_local_supp_feat>
   15f48:	e006      	b.n	15f58 <ble_ll_hci_info_params_cmd_proc+0x48>
        }
        break;
    case BLE_HCI_OCF_IP_RD_BD_ADDR:
        if (len == 0) {
   15f4a:	b961      	cbnz	r1, 15f66 <ble_ll_hci_info_params_cmd_proc+0x56>
            rc = ble_ll_hci_rd_bd_addr(rspbuf, rsplen);
   15f4c:	9902      	ldr	r1, [sp, #8]
   15f4e:	4618      	mov	r0, r3
   15f50:	f7ff feec 	bl	15d2c <ble_ll_hci_rd_bd_addr>
   15f54:	e000      	b.n	15f58 <ble_ll_hci_info_params_cmd_proc+0x48>
        }
        break;
    default:
        rc = BLE_ERR_UNKNOWN_HCI_CMD;
   15f56:	2001      	movs	r0, #1
        break;
    }

    return rc;
}
   15f58:	bd08      	pop	{r3, pc}
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   15f5a:	2012      	movs	r0, #18
   15f5c:	e7fc      	b.n	15f58 <ble_ll_hci_info_params_cmd_proc+0x48>
   15f5e:	2012      	movs	r0, #18
   15f60:	e7fa      	b.n	15f58 <ble_ll_hci_info_params_cmd_proc+0x48>
   15f62:	2012      	movs	r0, #18
   15f64:	e7f8      	b.n	15f58 <ble_ll_hci_info_params_cmd_proc+0x48>
   15f66:	2012      	movs	r0, #18
    return rc;
   15f68:	e7f6      	b.n	15f58 <ble_ll_hci_info_params_cmd_proc+0x48>

00015f6a <ble_ll_hci_status_params_cmd_proc>:
                                  uint16_t ocf, uint8_t *rspbuf,
                                  uint8_t *rsplen)
{
    int rc;

    switch (ocf) {
   15f6a:	2a05      	cmp	r2, #5
   15f6c:	d001      	beq.n	15f72 <ble_ll_hci_status_params_cmd_proc+0x8>
    case BLE_HCI_OCF_RD_RSSI:
        rc = ble_ll_conn_hci_rd_rssi(cmdbuf, len, rspbuf, rsplen);
        break;
    default:
        rc = BLE_ERR_UNKNOWN_HCI_CMD;
   15f6e:	2001      	movs	r0, #1
        break;
    }

    return rc;
}
   15f70:	4770      	bx	lr
{
   15f72:	b508      	push	{r3, lr}
   15f74:	461a      	mov	r2, r3
        rc = ble_ll_conn_hci_rd_rssi(cmdbuf, len, rspbuf, rsplen);
   15f76:	9b02      	ldr	r3, [sp, #8]
   15f78:	f7fe fbff 	bl	1477a <ble_ll_conn_hci_rd_rssi>
}
   15f7c:	bd08      	pop	{r3, pc}

00015f7e <ble_ll_hci_le_read_local_features>:
{
   15f7e:	b538      	push	{r3, r4, r5, lr}
   15f80:	4604      	mov	r4, r0
   15f82:	460d      	mov	r5, r1
    rsp->features = htole64(ble_ll_read_supp_features());
   15f84:	f7fa fd36 	bl	109f4 <ble_ll_read_supp_features>
   15f88:	6020      	str	r0, [r4, #0]
   15f8a:	6061      	str	r1, [r4, #4]
    *rsplen = sizeof(*rsp);
   15f8c:	2308      	movs	r3, #8
   15f8e:	702b      	strb	r3, [r5, #0]
}
   15f90:	2000      	movs	r0, #0
   15f92:	bd38      	pop	{r3, r4, r5, pc}

00015f94 <ble_ll_hci_le_encrypt>:
{
   15f94:	b570      	push	{r4, r5, r6, lr}
   15f96:	b08c      	sub	sp, #48	; 0x30
   15f98:	4604      	mov	r4, r0
   15f9a:	4616      	mov	r6, r2
   15f9c:	461d      	mov	r5, r3
    swap_buf(ecb.key, cmd->key, BLE_ENC_BLOCK_SIZE);
   15f9e:	2210      	movs	r2, #16
   15fa0:	4601      	mov	r1, r0
   15fa2:	4668      	mov	r0, sp
   15fa4:	f013 fc59 	bl	2985a <swap_buf>
    swap_buf(ecb.plain_text, cmd->data, BLE_ENC_BLOCK_SIZE);
   15fa8:	2210      	movs	r2, #16
   15faa:	18a1      	adds	r1, r4, r2
   15fac:	eb0d 0002 	add.w	r0, sp, r2
   15fb0:	f013 fc53 	bl	2985a <swap_buf>
    rc = ble_hw_encrypt_block(&ecb);
   15fb4:	4668      	mov	r0, sp
   15fb6:	f003 fa0b 	bl	193d0 <ble_hw_encrypt_block>
    if (!rc) {
   15fba:	b950      	cbnz	r0, 15fd2 <ble_ll_hci_le_encrypt+0x3e>
   15fbc:	4604      	mov	r4, r0
        swap_buf(rsp->data, ecb.cipher_text, BLE_ENC_BLOCK_SIZE);
   15fbe:	2210      	movs	r2, #16
   15fc0:	a908      	add	r1, sp, #32
   15fc2:	4630      	mov	r0, r6
   15fc4:	f013 fc49 	bl	2985a <swap_buf>
        *rsplen = sizeof(*rsp);
   15fc8:	2310      	movs	r3, #16
   15fca:	702b      	strb	r3, [r5, #0]
}
   15fcc:	4620      	mov	r0, r4
   15fce:	b00c      	add	sp, #48	; 0x30
   15fd0:	bd70      	pop	{r4, r5, r6, pc}
        rc = BLE_ERR_CTLR_BUSY;
   15fd2:	243a      	movs	r4, #58	; 0x3a
    return rc;
   15fd4:	e7fa      	b.n	15fcc <ble_ll_hci_le_encrypt+0x38>

00015fd6 <ble_ll_hci_le_rand>:
{
   15fd6:	b510      	push	{r4, lr}
   15fd8:	460c      	mov	r4, r1
    ble_ll_rand_data_get((uint8_t *)&rsp->random_number,
   15fda:	2108      	movs	r1, #8
   15fdc:	f000 fcb6 	bl	1694c <ble_ll_rand_data_get>
    *rsplen = sizeof(*rsp);
   15fe0:	2308      	movs	r3, #8
   15fe2:	7023      	strb	r3, [r4, #0]
}
   15fe4:	2000      	movs	r0, #0
   15fe6:	bd10      	pop	{r4, pc}

00015fe8 <ble_ll_hci_le_read_supp_states>:
{
   15fe8:	b538      	push	{r3, r4, r5, lr}
   15fea:	4604      	mov	r4, r0
   15fec:	460d      	mov	r5, r1
    rsp->states = htole64(ble_ll_read_supp_states());
   15fee:	f7fa fcfb 	bl	109e8 <ble_ll_read_supp_states>
   15ff2:	6020      	str	r0, [r4, #0]
   15ff4:	6061      	str	r1, [r4, #4]
    *rsplen = sizeof(*rsp);
   15ff6:	2308      	movs	r3, #8
   15ff8:	702b      	strb	r3, [r5, #0]
}
   15ffa:	2000      	movs	r0, #0
   15ffc:	bd38      	pop	{r3, r4, r5, pc}
	...

00016000 <ble_ll_hci_le_wr_sugg_data_len>:
    if (len != sizeof(*cmd)) {
   16000:	2904      	cmp	r1, #4
   16002:	d001      	beq.n	16008 <ble_ll_hci_le_wr_sugg_data_len+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   16004:	2012      	movs	r0, #18
}
   16006:	4770      	bx	lr
{
   16008:	b570      	push	{r4, r5, r6, lr}
    tx_oct = le16toh(cmd->max_tx_octets);
   1600a:	8804      	ldrh	r4, [r0, #0]
    tx_time = le16toh(cmd->max_tx_time);
   1600c:	8845      	ldrh	r5, [r0, #2]
   1600e:	b2ae      	uxth	r6, r5
    if (ble_ll_chk_txrx_octets(tx_oct) && ble_ll_chk_txrx_time(tx_time)) {
   16010:	4620      	mov	r0, r4
   16012:	f7fa faed 	bl	105f0 <ble_ll_chk_txrx_octets>
   16016:	b1c8      	cbz	r0, 1604c <ble_ll_hci_le_wr_sugg_data_len+0x4c>
   16018:	4630      	mov	r0, r6
   1601a:	f7fa faf1 	bl	10600 <ble_ll_chk_txrx_time>
   1601e:	b1b8      	cbz	r0, 16050 <ble_ll_hci_le_wr_sugg_data_len+0x50>
        g_ble_ll_conn_params.sugg_tx_octets = (uint8_t)tx_oct;
   16020:	4b0c      	ldr	r3, [pc, #48]	; (16054 <ble_ll_hci_le_wr_sugg_data_len+0x54>)
   16022:	725c      	strb	r4, [r3, #9]
        g_ble_ll_conn_params.sugg_tx_time = tx_time;
   16024:	815d      	strh	r5, [r3, #10]
                        min(tx_oct, g_ble_ll_conn_params.supp_max_tx_octets);
   16026:	799a      	ldrb	r2, [r3, #6]
   16028:	4294      	cmp	r4, r2
   1602a:	bf28      	it	cs
   1602c:	4614      	movcs	r4, r2
        g_ble_ll_conn_params.conn_init_max_tx_octets =
   1602e:	721c      	strb	r4, [r3, #8]
                        min(tx_time, g_ble_ll_conn_params.supp_max_tx_time);
   16030:	8a58      	ldrh	r0, [r3, #18]
        g_ble_ll_conn_params.conn_init_max_tx_time =
   16032:	42b0      	cmp	r0, r6
   16034:	bf28      	it	cs
   16036:	4630      	movcs	r0, r6
   16038:	8198      	strh	r0, [r3, #12]
                                min(BLE_LL_CONN_SUPP_TIME_MAX_UNCODED,
   1603a:	f640 0248 	movw	r2, #2120	; 0x848
   1603e:	4282      	cmp	r2, r0
   16040:	bf28      	it	cs
   16042:	4602      	movcs	r2, r0
        g_ble_ll_conn_params.conn_init_max_tx_time_uncoded =
   16044:	81da      	strh	r2, [r3, #14]
        g_ble_ll_conn_params.conn_init_max_tx_time_coded =
   16046:	8218      	strh	r0, [r3, #16]
        rc = BLE_ERR_SUCCESS;
   16048:	2000      	movs	r0, #0
   1604a:	e000      	b.n	1604e <ble_ll_hci_le_wr_sugg_data_len+0x4e>
        rc = BLE_ERR_INV_HCI_CMD_PARMS;
   1604c:	2012      	movs	r0, #18
}
   1604e:	bd70      	pop	{r4, r5, r6, pc}
        rc = BLE_ERR_INV_HCI_CMD_PARMS;
   16050:	2012      	movs	r0, #18
   16052:	e7fc      	b.n	1604e <ble_ll_hci_le_wr_sugg_data_len+0x4e>
   16054:	20003e80 	.word	0x20003e80

00016058 <ble_ll_read_tx_power>:
{
   16058:	b538      	push	{r3, r4, r5, lr}
   1605a:	4604      	mov	r4, r0
   1605c:	460d      	mov	r5, r1
    rsp->min_tx_power = ble_phy_txpower_round(-127);
   1605e:	f06f 007e 	mvn.w	r0, #126	; 0x7e
   16062:	f003 fdd5 	bl	19c10 <ble_phy_txpower_round>
   16066:	7020      	strb	r0, [r4, #0]
    rsp->max_tx_power = ble_phy_txpower_round(126);
   16068:	207e      	movs	r0, #126	; 0x7e
   1606a:	f003 fdd1 	bl	19c10 <ble_phy_txpower_round>
   1606e:	7060      	strb	r0, [r4, #1]
    *rsplen = sizeof(*rsp);
   16070:	2302      	movs	r3, #2
   16072:	702b      	strb	r3, [r5, #0]
}
   16074:	2000      	movs	r0, #0
   16076:	bd38      	pop	{r3, r4, r5, pc}

00016078 <ble_ll_write_rf_path_compensation>:
    if (len != sizeof(*cmd)) {
   16078:	2904      	cmp	r1, #4
   1607a:	d121      	bne.n	160c0 <ble_ll_write_rf_path_compensation+0x48>
{
   1607c:	b510      	push	{r4, lr}
    tx = le16toh(cmd->tx_path_compensation);
   1607e:	f9b0 3000 	ldrsh.w	r3, [r0]
   16082:	461c      	mov	r4, r3
    rx = le16toh(cmd->rx_path_compensation);
   16084:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
   16088:	b20a      	sxth	r2, r1
    if ((tx < -1280) || (tx > 1280) || (rx < -1280) || (rx > 1280)) {
   1608a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
   1608e:	b29b      	uxth	r3, r3
   16090:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
   16094:	d816      	bhi.n	160c4 <ble_ll_write_rf_path_compensation+0x4c>
   16096:	f512 6fa0 	cmn.w	r2, #1280	; 0x500
   1609a:	db15      	blt.n	160c8 <ble_ll_write_rf_path_compensation+0x50>
   1609c:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
   160a0:	dc14      	bgt.n	160cc <ble_ll_write_rf_path_compensation+0x54>
    tx_path_pwr_compensation = tx;
   160a2:	4b0b      	ldr	r3, [pc, #44]	; (160d0 <ble_ll_write_rf_path_compensation+0x58>)
   160a4:	801c      	strh	r4, [r3, #0]
    rx_path_pwr_compensation = rx;
   160a6:	4b0b      	ldr	r3, [pc, #44]	; (160d4 <ble_ll_write_rf_path_compensation+0x5c>)
   160a8:	8019      	strh	r1, [r3, #0]
    ble_phy_set_rx_pwr_compensation(rx_path_pwr_compensation / 10);
   160aa:	480b      	ldr	r0, [pc, #44]	; (160d8 <ble_ll_write_rf_path_compensation+0x60>)
   160ac:	fb80 3002 	smull	r3, r0, r0, r2
   160b0:	17d2      	asrs	r2, r2, #31
   160b2:	ebc2 00a0 	rsb	r0, r2, r0, asr #2
   160b6:	b240      	sxtb	r0, r0
   160b8:	f003 fde0 	bl	19c7c <ble_phy_set_rx_pwr_compensation>
    return BLE_ERR_SUCCESS;
   160bc:	2000      	movs	r0, #0
   160be:	e002      	b.n	160c6 <ble_ll_write_rf_path_compensation+0x4e>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   160c0:	2012      	movs	r0, #18
}
   160c2:	4770      	bx	lr
        return BLE_ERR_INV_HCI_CMD_PARMS;
   160c4:	2012      	movs	r0, #18
}
   160c6:	bd10      	pop	{r4, pc}
        return BLE_ERR_INV_HCI_CMD_PARMS;
   160c8:	2012      	movs	r0, #18
   160ca:	e7fc      	b.n	160c6 <ble_ll_write_rf_path_compensation+0x4e>
   160cc:	2012      	movs	r0, #18
   160ce:	e7fa      	b.n	160c6 <ble_ll_write_rf_path_compensation+0x4e>
   160d0:	2000264a 	.word	0x2000264a
   160d4:	20002648 	.word	0x20002648
   160d8:	66666667 	.word	0x66666667

000160dc <ble_ll_hci_le_cmd_proc>:
{
   160dc:	b538      	push	{r3, r4, r5, lr}
   160de:	4615      	mov	r5, r2
   160e0:	461a      	mov	r2, r3
    switch (ocf) {
   160e2:	1e6b      	subs	r3, r5, #1
   160e4:	2b4d      	cmp	r3, #77	; 0x4d
   160e6:	f200 8152 	bhi.w	1638e <ble_ll_hci_le_cmd_proc+0x2b2>
   160ea:	e8df f013 	tbh	[pc, r3, lsl #1]
   160ee:	004e      	.short	0x004e
   160f0:	0064005b 	.word	0x0064005b
   160f4:	006d0150 	.word	0x006d0150
   160f8:	00760072 	.word	0x00760072
   160fc:	0083007f 	.word	0x0083007f
   16100:	008b0087 	.word	0x008b0087
   16104:	0093008f 	.word	0x0093008f
   16108:	009f0097 	.word	0x009f0097
   1610c:	00af00a8 	.word	0x00af00a8
   16110:	00b700b3 	.word	0x00b700b3
   16114:	00bf00bb 	.word	0x00bf00bb
   16118:	00c800c4 	.word	0x00c800c4
   1611c:	00d600cd 	.word	0x00d600cd
   16120:	00df00da 	.word	0x00df00da
   16124:	015000e4 	.word	0x015000e4
   16128:	01500150 	.word	0x01500150
   1612c:	00f200ed 	.word	0x00f200ed
   16130:	00fc00f7 	.word	0x00fc00f7
   16134:	01500105 	.word	0x01500105
   16138:	01090150 	.word	0x01090150
   1613c:	0111010d 	.word	0x0111010d
   16140:	01210118 	.word	0x01210118
   16144:	012b0126 	.word	0x012b0126
   16148:	0133012f 	.word	0x0133012f
   1614c:	01500150 	.word	0x01500150
   16150:	01500150 	.word	0x01500150
   16154:	01500150 	.word	0x01500150
   16158:	01500150 	.word	0x01500150
   1615c:	01500150 	.word	0x01500150
   16160:	01500150 	.word	0x01500150
   16164:	01500150 	.word	0x01500150
   16168:	01500150 	.word	0x01500150
   1616c:	01500150 	.word	0x01500150
   16170:	01500150 	.word	0x01500150
   16174:	01500150 	.word	0x01500150
   16178:	01500150 	.word	0x01500150
   1617c:	01500150 	.word	0x01500150
   16180:	013c0150 	.word	0x013c0150
   16184:	01480142 	.word	0x01480142
   16188:	014c      	.short	0x014c
        rc = ble_ll_hci_set_le_event_mask(cmdbuf, len);
   1618a:	f7ff fddb 	bl	15d44 <ble_ll_hci_set_le_event_mask>
   1618e:	4604      	mov	r4, r0
    if (ble_ll_hci_le_cmd_send_cmd_status(ocf) || rc == BLE_ERR_UNKNOWN_HCI_CMD) {
   16190:	4628      	mov	r0, r5
   16192:	f7ff fe0d 	bl	15db0 <ble_ll_hci_le_cmd_send_cmd_status>
   16196:	b908      	cbnz	r0, 1619c <ble_ll_hci_le_cmd_proc+0xc0>
   16198:	2c01      	cmp	r4, #1
   1619a:	d101      	bne.n	161a0 <ble_ll_hci_le_cmd_proc+0xc4>
        rc += (BLE_ERR_MAX + 1);
   1619c:	f504 7480 	add.w	r4, r4, #256	; 0x100
}
   161a0:	4620      	mov	r0, r4
   161a2:	bd38      	pop	{r3, r4, r5, pc}
        if (len == 0) {
   161a4:	b109      	cbz	r1, 161aa <ble_ll_hci_le_cmd_proc+0xce>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   161a6:	2412      	movs	r4, #18
   161a8:	e7f2      	b.n	16190 <ble_ll_hci_le_cmd_proc+0xb4>
            rc = ble_ll_hci_le_read_bufsize(rspbuf, rsplen);
   161aa:	9904      	ldr	r1, [sp, #16]
   161ac:	4610      	mov	r0, r2
   161ae:	f7ff fdd7 	bl	15d60 <ble_ll_hci_le_read_bufsize>
   161b2:	4604      	mov	r4, r0
   161b4:	e7ec      	b.n	16190 <ble_ll_hci_le_cmd_proc+0xb4>
        if (len == 0) {
   161b6:	b109      	cbz	r1, 161bc <ble_ll_hci_le_cmd_proc+0xe0>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   161b8:	2412      	movs	r4, #18
   161ba:	e7e9      	b.n	16190 <ble_ll_hci_le_cmd_proc+0xb4>
            rc = ble_ll_hci_le_read_local_features(rspbuf, rsplen);
   161bc:	9904      	ldr	r1, [sp, #16]
   161be:	4610      	mov	r0, r2
   161c0:	f7ff fedd 	bl	15f7e <ble_ll_hci_le_read_local_features>
   161c4:	4604      	mov	r4, r0
   161c6:	e7e3      	b.n	16190 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_set_random_addr(cmdbuf, len, false);
   161c8:	2200      	movs	r2, #0
   161ca:	f7fa faa7 	bl	1071c <ble_ll_set_random_addr>
   161ce:	4604      	mov	r4, r0
        break;
   161d0:	e7de      	b.n	16190 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_adv_set_adv_params(cmdbuf, len);
   161d2:	f7fb fbff 	bl	119d4 <ble_ll_adv_set_adv_params>
   161d6:	4604      	mov	r4, r0
        break;
   161d8:	e7da      	b.n	16190 <ble_ll_hci_le_cmd_proc+0xb4>
        if (len == 0) {
   161da:	b109      	cbz	r1, 161e0 <ble_ll_hci_le_cmd_proc+0x104>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   161dc:	2412      	movs	r4, #18
   161de:	e7d7      	b.n	16190 <ble_ll_hci_le_cmd_proc+0xb4>
            rc = ble_ll_adv_read_txpwr(rspbuf, rsplen);
   161e0:	9904      	ldr	r1, [sp, #16]
   161e2:	4610      	mov	r0, r2
   161e4:	f7fb fc7a 	bl	11adc <ble_ll_adv_read_txpwr>
   161e8:	4604      	mov	r4, r0
   161ea:	e7d1      	b.n	16190 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_hci_set_adv_data(cmdbuf, len);
   161ec:	f7fb fc99 	bl	11b22 <ble_ll_hci_set_adv_data>
   161f0:	4604      	mov	r4, r0
        break;
   161f2:	e7cd      	b.n	16190 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_hci_set_scan_rsp_data(cmdbuf, len);
   161f4:	f7fb fc85 	bl	11b02 <ble_ll_hci_set_scan_rsp_data>
   161f8:	4604      	mov	r4, r0
        break;
   161fa:	e7c9      	b.n	16190 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_hci_adv_set_enable(cmdbuf, len);
   161fc:	f7fb fc74 	bl	11ae8 <ble_ll_hci_adv_set_enable>
   16200:	4604      	mov	r4, r0
        break;
   16202:	e7c5      	b.n	16190 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_scan_set_scan_params(cmdbuf, len);
   16204:	f002 f90e 	bl	18424 <ble_ll_scan_set_scan_params>
   16208:	4604      	mov	r4, r0
        break;
   1620a:	e7c1      	b.n	16190 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_hci_scan_set_enable(cmdbuf, len);
   1620c:	f002 f958 	bl	184c0 <ble_ll_hci_scan_set_enable>
   16210:	4604      	mov	r4, r0
        break;
   16212:	e7bd      	b.n	16190 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_conn_create(cmdbuf, len);
   16214:	f7fe f852 	bl	142bc <ble_ll_conn_create>
   16218:	4604      	mov	r4, r0
        break;
   1621a:	e7b9      	b.n	16190 <ble_ll_hci_le_cmd_proc+0xb4>
        if (len == 0) {
   1621c:	b109      	cbz	r1, 16222 <ble_ll_hci_le_cmd_proc+0x146>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   1621e:	2412      	movs	r4, #18
   16220:	e7b6      	b.n	16190 <ble_ll_hci_le_cmd_proc+0xb4>
            rc = ble_ll_conn_create_cancel(cb);
   16222:	9805      	ldr	r0, [sp, #20]
   16224:	f7fe fa14 	bl	14650 <ble_ll_conn_create_cancel>
   16228:	4604      	mov	r4, r0
   1622a:	e7b1      	b.n	16190 <ble_ll_hci_le_cmd_proc+0xb4>
        if (len == 0) {
   1622c:	b109      	cbz	r1, 16232 <ble_ll_hci_le_cmd_proc+0x156>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   1622e:	2412      	movs	r4, #18
   16230:	e7ae      	b.n	16190 <ble_ll_hci_le_cmd_proc+0xb4>
            rc = ble_ll_whitelist_read_size(rspbuf, rsplen);
   16232:	9904      	ldr	r1, [sp, #16]
   16234:	4610      	mov	r0, r2
   16236:	f002 ff8f 	bl	19158 <ble_ll_whitelist_read_size>
   1623a:	4604      	mov	r4, r0
   1623c:	e7a8      	b.n	16190 <ble_ll_hci_le_cmd_proc+0xb4>
        if (len == 0) {
   1623e:	b109      	cbz	r1, 16244 <ble_ll_hci_le_cmd_proc+0x168>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   16240:	2412      	movs	r4, #18
   16242:	e7a5      	b.n	16190 <ble_ll_hci_le_cmd_proc+0xb4>
            rc = ble_ll_whitelist_clear();
   16244:	f002 ff72 	bl	1912c <ble_ll_whitelist_clear>
   16248:	4604      	mov	r4, r0
   1624a:	e7a1      	b.n	16190 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_whitelist_add(cmdbuf, len);
   1624c:	f002 ff92 	bl	19174 <ble_ll_whitelist_add>
   16250:	4604      	mov	r4, r0
        break;
   16252:	e79d      	b.n	16190 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_whitelist_rmv(cmdbuf, len);
   16254:	f002 ffbe 	bl	191d4 <ble_ll_whitelist_rmv>
   16258:	4604      	mov	r4, r0
        break;
   1625a:	e799      	b.n	16190 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_conn_hci_update(cmdbuf, len);
   1625c:	f7fe f906 	bl	1446c <ble_ll_conn_hci_update>
   16260:	4604      	mov	r4, r0
        break;
   16262:	e795      	b.n	16190 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_conn_hci_set_chan_class(cmdbuf, len);
   16264:	f7fe facb 	bl	147fe <ble_ll_conn_hci_set_chan_class>
   16268:	4604      	mov	r4, r0
        break;
   1626a:	e791      	b.n	16190 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_conn_hci_rd_chan_map(cmdbuf, len, rspbuf, rsplen);
   1626c:	9b04      	ldr	r3, [sp, #16]
   1626e:	f7fe fa9c 	bl	147aa <ble_ll_conn_hci_rd_chan_map>
   16272:	4604      	mov	r4, r0
        break;
   16274:	e78c      	b.n	16190 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_conn_hci_read_rem_features(cmdbuf, len);
   16276:	f7fe f8c9 	bl	1440c <ble_ll_conn_hci_read_rem_features>
   1627a:	4604      	mov	r4, r0
        break;
   1627c:	e788      	b.n	16190 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_hci_le_encrypt(cmdbuf, len, rspbuf, rsplen);
   1627e:	9b04      	ldr	r3, [sp, #16]
   16280:	f7ff fe88 	bl	15f94 <ble_ll_hci_le_encrypt>
   16284:	4604      	mov	r4, r0
        break;
   16286:	e783      	b.n	16190 <ble_ll_hci_le_cmd_proc+0xb4>
        if (len == 0) {
   16288:	b109      	cbz	r1, 1628e <ble_ll_hci_le_cmd_proc+0x1b2>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   1628a:	2412      	movs	r4, #18
   1628c:	e780      	b.n	16190 <ble_ll_hci_le_cmd_proc+0xb4>
            rc = ble_ll_hci_le_rand(rspbuf, rsplen);
   1628e:	9904      	ldr	r1, [sp, #16]
   16290:	4610      	mov	r0, r2
   16292:	f7ff fea0 	bl	15fd6 <ble_ll_hci_le_rand>
   16296:	4604      	mov	r4, r0
   16298:	e77a      	b.n	16190 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_conn_hci_le_start_encrypt(cmdbuf, len);
   1629a:	f7fe fb00 	bl	1489e <ble_ll_conn_hci_le_start_encrypt>
   1629e:	4604      	mov	r4, r0
        break;
   162a0:	e776      	b.n	16190 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_conn_hci_le_ltk_reply(cmdbuf, len, rspbuf, rsplen);
   162a2:	9b04      	ldr	r3, [sp, #16]
   162a4:	f7fe fb2b 	bl	148fe <ble_ll_conn_hci_le_ltk_reply>
   162a8:	4604      	mov	r4, r0
        break;
   162aa:	e771      	b.n	16190 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_conn_hci_le_ltk_neg_reply(cmdbuf, len, rspbuf, rsplen);
   162ac:	9b04      	ldr	r3, [sp, #16]
   162ae:	f7fe fb54 	bl	1495a <ble_ll_conn_hci_le_ltk_neg_reply>
   162b2:	4604      	mov	r4, r0
        break;
   162b4:	e76c      	b.n	16190 <ble_ll_hci_le_cmd_proc+0xb4>
        if (len == 0) {
   162b6:	b109      	cbz	r1, 162bc <ble_ll_hci_le_cmd_proc+0x1e0>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   162b8:	2412      	movs	r4, #18
   162ba:	e769      	b.n	16190 <ble_ll_hci_le_cmd_proc+0xb4>
            rc = ble_ll_hci_le_read_supp_states(rspbuf, rsplen);
   162bc:	9904      	ldr	r1, [sp, #16]
   162be:	4610      	mov	r0, r2
   162c0:	f7ff fe92 	bl	15fe8 <ble_ll_hci_le_read_supp_states>
   162c4:	4604      	mov	r4, r0
   162c6:	e763      	b.n	16190 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_conn_hci_param_rr(cmdbuf, len, rspbuf, rsplen);
   162c8:	9b04      	ldr	r3, [sp, #16]
   162ca:	f7fe f937 	bl	1453c <ble_ll_conn_hci_param_rr>
   162ce:	4604      	mov	r4, r0
        break;
   162d0:	e75e      	b.n	16190 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_conn_hci_param_nrr(cmdbuf, len, rspbuf, rsplen);
   162d2:	9b04      	ldr	r3, [sp, #16]
   162d4:	f7fe f988 	bl	145e8 <ble_ll_conn_hci_param_nrr>
   162d8:	4604      	mov	r4, r0
        break;
   162da:	e759      	b.n	16190 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_conn_hci_set_data_len(cmdbuf, len, rspbuf, rsplen);
   162dc:	9b04      	ldr	r3, [sp, #16]
   162de:	f7fe faa5 	bl	1482c <ble_ll_conn_hci_set_data_len>
   162e2:	4604      	mov	r4, r0
        break;
   162e4:	e754      	b.n	16190 <ble_ll_hci_le_cmd_proc+0xb4>
        if (len == 0) {
   162e6:	b109      	cbz	r1, 162ec <ble_ll_hci_le_cmd_proc+0x210>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   162e8:	2412      	movs	r4, #18
   162ea:	e751      	b.n	16190 <ble_ll_hci_le_cmd_proc+0xb4>
            rc = ble_ll_hci_le_rd_sugg_data_len(rspbuf, rsplen);
   162ec:	9904      	ldr	r1, [sp, #16]
   162ee:	4610      	mov	r0, r2
   162f0:	f7ff fd42 	bl	15d78 <ble_ll_hci_le_rd_sugg_data_len>
   162f4:	4604      	mov	r4, r0
   162f6:	e74b      	b.n	16190 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_hci_le_wr_sugg_data_len(cmdbuf, len);
   162f8:	f7ff fe82 	bl	16000 <ble_ll_hci_le_wr_sugg_data_len>
   162fc:	4604      	mov	r4, r0
        break;
   162fe:	e747      	b.n	16190 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_resolv_list_add(cmdbuf, len);
   16300:	f000 fc96 	bl	16c30 <ble_ll_resolv_list_add>
   16304:	4604      	mov	r4, r0
        break;
   16306:	e743      	b.n	16190 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_resolv_list_rmv(cmdbuf, len);
   16308:	f000 fd28 	bl	16d5c <ble_ll_resolv_list_rmv>
   1630c:	4604      	mov	r4, r0
        break;
   1630e:	e73f      	b.n	16190 <ble_ll_hci_le_cmd_proc+0xb4>
        if (len == 0) {
   16310:	b109      	cbz	r1, 16316 <ble_ll_hci_le_cmd_proc+0x23a>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   16312:	2412      	movs	r4, #18
   16314:	e73c      	b.n	16190 <ble_ll_hci_le_cmd_proc+0xb4>
            rc = ble_ll_resolv_list_clr();
   16316:	f000 fc4d 	bl	16bb4 <ble_ll_resolv_list_clr>
   1631a:	4604      	mov	r4, r0
   1631c:	e738      	b.n	16190 <ble_ll_hci_le_cmd_proc+0xb4>
        if (len == 0) {
   1631e:	b109      	cbz	r1, 16324 <ble_ll_hci_le_cmd_proc+0x248>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   16320:	2412      	movs	r4, #18
   16322:	e735      	b.n	16190 <ble_ll_hci_le_cmd_proc+0xb4>
            rc = ble_ll_resolv_list_read_size(rspbuf, rsplen);
   16324:	9904      	ldr	r1, [sp, #16]
   16326:	4610      	mov	r0, r2
   16328:	f000 fc58 	bl	16bdc <ble_ll_resolv_list_read_size>
   1632c:	4604      	mov	r4, r0
   1632e:	e72f      	b.n	16190 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_resolv_peer_addr_rd(cmdbuf, len, rspbuf, rsplen);
   16330:	9b04      	ldr	r3, [sp, #16]
   16332:	f000 fd77 	bl	16e24 <ble_ll_resolv_peer_addr_rd>
   16336:	4604      	mov	r4, r0
        break;
   16338:	e72a      	b.n	16190 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_resolv_local_addr_rd(cmdbuf, len, rspbuf, rsplen);
   1633a:	9b04      	ldr	r3, [sp, #16]
   1633c:	f000 fd8c 	bl	16e58 <ble_ll_resolv_local_addr_rd>
   16340:	4604      	mov	r4, r0
        break;
   16342:	e725      	b.n	16190 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_resolv_enable_cmd(cmdbuf, len);
   16344:	f000 fd56 	bl	16df4 <ble_ll_resolv_enable_cmd>
   16348:	4604      	mov	r4, r0
        break;
   1634a:	e721      	b.n	16190 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_resolv_set_rpa_tmo(cmdbuf, len);
   1634c:	f000 fd9e 	bl	16e8c <ble_ll_resolv_set_rpa_tmo>
   16350:	4604      	mov	r4, r0
        break;
   16352:	e71d      	b.n	16190 <ble_ll_hci_le_cmd_proc+0xb4>
        if (len == 0) {
   16354:	b109      	cbz	r1, 1635a <ble_ll_hci_le_cmd_proc+0x27e>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   16356:	2412      	movs	r4, #18
   16358:	e71a      	b.n	16190 <ble_ll_hci_le_cmd_proc+0xb4>
            rc = ble_ll_hci_le_rd_max_data_len(rspbuf, rsplen);
   1635a:	9904      	ldr	r1, [sp, #16]
   1635c:	4610      	mov	r0, r2
   1635e:	f7ff fd17 	bl	15d90 <ble_ll_hci_le_rd_max_data_len>
   16362:	4604      	mov	r4, r0
   16364:	e714      	b.n	16190 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_read_tx_power(rspbuf, rsplen);
   16366:	9904      	ldr	r1, [sp, #16]
   16368:	4610      	mov	r0, r2
   1636a:	f7ff fe75 	bl	16058 <ble_ll_read_tx_power>
   1636e:	4604      	mov	r4, r0
        break;
   16370:	e70e      	b.n	16190 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_read_rf_path_compensation(rspbuf, rsplen);
   16372:	9904      	ldr	r1, [sp, #16]
   16374:	4610      	mov	r0, r2
   16376:	f7ff fd41 	bl	15dfc <ble_ll_read_rf_path_compensation>
   1637a:	4604      	mov	r4, r0
        break;
   1637c:	e708      	b.n	16190 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_write_rf_path_compensation(cmdbuf, len);
   1637e:	f7ff fe7b 	bl	16078 <ble_ll_write_rf_path_compensation>
   16382:	4604      	mov	r4, r0
        break;
   16384:	e704      	b.n	16190 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_resolve_set_priv_mode(cmdbuf, len);
   16386:	f000 fdab 	bl	16ee0 <ble_ll_resolve_set_priv_mode>
   1638a:	4604      	mov	r4, r0
        break;
   1638c:	e700      	b.n	16190 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = BLE_ERR_UNKNOWN_HCI_CMD;
   1638e:	2401      	movs	r4, #1
   16390:	e6fe      	b.n	16190 <ble_ll_hci_le_cmd_proc+0xb4>

00016392 <ble_ll_hci_adv_mode_ext>:
}
   16392:	2000      	movs	r0, #0
   16394:	4770      	bx	lr
	...

00016398 <ble_ll_hci_event_send>:
{
   16398:	b508      	push	{r3, lr}
    BLE_LL_ASSERT(sizeof(*hci_ev) + hci_ev->length <= BLE_LL_MAX_EVT_LEN);
   1639a:	7843      	ldrb	r3, [r0, #1]
   1639c:	3302      	adds	r3, #2
   1639e:	2b46      	cmp	r3, #70	; 0x46
   163a0:	d806      	bhi.n	163b0 <ble_ll_hci_event_send+0x18>
    STATS_INC(ble_ll_stats, hci_events_sent);
   163a2:	4a08      	ldr	r2, [pc, #32]	; (163c4 <ble_ll_hci_event_send+0x2c>)
   163a4:	6953      	ldr	r3, [r2, #20]
   163a6:	3301      	adds	r3, #1
   163a8:	6153      	str	r3, [r2, #20]
    rc = ble_hci_trans_ll_evt_tx((uint8_t *)hci_ev);
   163aa:	f00f fe1f 	bl	25fec <ble_hci_trans_ll_evt_tx>
}
   163ae:	bd08      	pop	{r3, pc}
    BLE_LL_ASSERT(sizeof(*hci_ev) + hci_ev->length <= BLE_LL_MAX_EVT_LEN);
   163b0:	f7f5 ff1a 	bl	c1e8 <hal_debugger_connected>
   163b4:	b100      	cbz	r0, 163b8 <ble_ll_hci_event_send+0x20>
   163b6:	be01      	bkpt	0x0001
   163b8:	2300      	movs	r3, #0
   163ba:	461a      	mov	r2, r3
   163bc:	4619      	mov	r1, r3
   163be:	4618      	mov	r0, r3
   163c0:	f7f6 f94c 	bl	c65c <__assert_func>
   163c4:	20003be0 	.word	0x20003be0

000163c8 <ble_ll_hci_cmd_proc>:
 *
 * @param ev Pointer to os event containing a pointer to command buffer
 */
static void
ble_ll_hci_cmd_proc(struct ble_npl_event *ev)
{
   163c8:	b570      	push	{r4, r5, r6, lr}
   163ca:	b084      	sub	sp, #16
    uint8_t ogf;
    uint8_t rsplen;
    struct ble_hci_cmd *cmd;
    uint16_t opcode;
    uint16_t ocf;
    ble_ll_hci_post_cmd_complete_cb post_cb = NULL;
   163cc:	2300      	movs	r3, #0
   163ce:	9302      	str	r3, [sp, #8]
    return ev->ev.ev_arg;
   163d0:	6884      	ldr	r4, [r0, #8]

    BLE_LL_DEBUG_GPIO(HCI_CMD, 1);

    /* The command buffer is the event argument */
    cmd = ble_npl_event_get_arg(ev);
    BLE_LL_ASSERT(cmd != NULL);
   163d2:	b194      	cbz	r4, 163fa <ble_ll_hci_cmd_proc+0x32>

    /* Get the opcode from the command buffer */
    opcode = le16toh(cmd->opcode);
   163d4:	4623      	mov	r3, r4
   163d6:	f833 6b06 	ldrh.w	r6, [r3], #6
   163da:	b2b1      	uxth	r1, r6
    ocf = BLE_HCI_OCF(opcode);
   163dc:	f3c1 0209 	ubfx	r2, r1, #0, #10
    ogf = BLE_HCI_OGF(opcode);
   163e0:	0a89      	lsrs	r1, r1, #10
     */
    hci_ev = (struct ble_hci_ev *) cmd;
    rspbuf = hci_ev->data + sizeof(*cmd_complete);

    /* Assume response length is zero */
    rsplen = 0;
   163e2:	2000      	movs	r0, #0
   163e4:	f88d 000f 	strb.w	r0, [sp, #15]

    switch (ogf) {
   163e8:	3901      	subs	r1, #1
   163ea:	2907      	cmp	r1, #7
   163ec:	d862      	bhi.n	164b4 <ble_ll_hci_cmd_proc+0xec>
   163ee:	e8df f001 	tbb	[pc, r1]
   163f2:	610e      	.short	0x610e
   163f4:	61433a31 	.word	0x61433a31
   163f8:	4c61      	.short	0x4c61
    BLE_LL_ASSERT(cmd != NULL);
   163fa:	f7f5 fef5 	bl	c1e8 <hal_debugger_connected>
   163fe:	b100      	cbz	r0, 16402 <ble_ll_hci_cmd_proc+0x3a>
   16400:	be01      	bkpt	0x0001
   16402:	2300      	movs	r3, #0
   16404:	461a      	mov	r2, r3
   16406:	4619      	mov	r1, r3
   16408:	4618      	mov	r0, r3
   1640a:	f7f6 f927 	bl	c65c <__assert_func>
    case BLE_HCI_OGF_LINK_CTRL:
        rc = ble_ll_hci_link_ctrl_cmd_proc(cmd->data, cmd->length, ocf);
   1640e:	78a1      	ldrb	r1, [r4, #2]
   16410:	1ce0      	adds	r0, r4, #3
   16412:	f7ff fd1d 	bl	15e50 <ble_ll_hci_link_ctrl_cmd_proc>
   16416:	4605      	mov	r5, r0
        rc = BLE_ERR_UNKNOWN_HCI_CMD;
        break;
    }

    /* If no response is generated, we free the buffers */
    BLE_LL_ASSERT(rc >= 0);
   16418:	2d00      	cmp	r5, #0
   1641a:	db41      	blt.n	164a0 <ble_ll_hci_cmd_proc+0xd8>
    if (rc <= BLE_ERR_MAX) {
   1641c:	2dff      	cmp	r5, #255	; 0xff
   1641e:	dc4b      	bgt.n	164b8 <ble_ll_hci_cmd_proc+0xf0>
        /* Create a command complete event with status from command */
        hci_ev->opcode = BLE_HCI_EVCODE_COMMAND_COMPLETE;
   16420:	230e      	movs	r3, #14
   16422:	7023      	strb	r3, [r4, #0]
        hci_ev->length = sizeof(*cmd_complete) + rsplen;
   16424:	f89d 300f 	ldrb.w	r3, [sp, #15]
   16428:	3304      	adds	r3, #4
   1642a:	7063      	strb	r3, [r4, #1]

        cmd_complete = (void *) hci_ev->data;
        cmd_complete->num_packets = ble_ll_hci_get_num_cmd_pkts();
   1642c:	f7ff fc5d 	bl	15cea <ble_ll_hci_get_num_cmd_pkts>
   16430:	70a0      	strb	r0, [r4, #2]
        cmd_complete->opcode = htole16(opcode);
   16432:	f8a4 6003 	strh.w	r6, [r4, #3]
        cmd_complete->status = (uint8_t) rc;
   16436:	7165      	strb	r5, [r4, #5]
        cmd_status->num_packets = ble_ll_hci_get_num_cmd_pkts();
        cmd_status->opcode = htole16(opcode);
    }

    /* Count commands and those in error */
    if (rc) {
   16438:	2d00      	cmp	r5, #0
   1643a:	d049      	beq.n	164d0 <ble_ll_hci_cmd_proc+0x108>
        STATS_INC(ble_ll_stats, hci_cmd_errs);
   1643c:	4a27      	ldr	r2, [pc, #156]	; (164dc <ble_ll_hci_cmd_proc+0x114>)
   1643e:	6913      	ldr	r3, [r2, #16]
   16440:	3301      	adds	r3, #1
   16442:	6113      	str	r3, [r2, #16]
    } else {
        STATS_INC(ble_ll_stats, hci_cmds);
    }

    /* Send the event (events cannot be masked) */
    ble_ll_hci_event_send(hci_ev);
   16444:	4620      	mov	r0, r4
   16446:	f7ff ffa7 	bl	16398 <ble_ll_hci_event_send>

    /* Call post callback if set by command handler */
    if (post_cb) {
   1644a:	9b02      	ldr	r3, [sp, #8]
   1644c:	b103      	cbz	r3, 16450 <ble_ll_hci_cmd_proc+0x88>
        post_cb();
   1644e:	4798      	blx	r3
    }

    BLE_LL_DEBUG_GPIO(HCI_CMD, 0);
}
   16450:	b004      	add	sp, #16
   16452:	bd70      	pop	{r4, r5, r6, pc}
        rc = ble_ll_hci_ctlr_bb_cmd_proc(cmd->data, cmd->length, ocf, rspbuf, &rsplen);
   16454:	78a1      	ldrb	r1, [r4, #2]
   16456:	f10d 000f 	add.w	r0, sp, #15
   1645a:	9000      	str	r0, [sp, #0]
   1645c:	1ce0      	adds	r0, r4, #3
   1645e:	f7ff fd08 	bl	15e72 <ble_ll_hci_ctlr_bb_cmd_proc>
   16462:	4605      	mov	r5, r0
        break;
   16464:	e7d8      	b.n	16418 <ble_ll_hci_cmd_proc+0x50>
        rc = ble_ll_hci_info_params_cmd_proc(cmd->data, cmd->length, ocf, rspbuf, &rsplen);
   16466:	78a1      	ldrb	r1, [r4, #2]
   16468:	f10d 000f 	add.w	r0, sp, #15
   1646c:	9000      	str	r0, [sp, #0]
   1646e:	1ce0      	adds	r0, r4, #3
   16470:	f7ff fd4e 	bl	15f10 <ble_ll_hci_info_params_cmd_proc>
   16474:	4605      	mov	r5, r0
        break;
   16476:	e7cf      	b.n	16418 <ble_ll_hci_cmd_proc+0x50>
        rc = ble_ll_hci_status_params_cmd_proc(cmd->data, cmd->length, ocf, rspbuf, &rsplen);
   16478:	78a1      	ldrb	r1, [r4, #2]
   1647a:	f10d 000f 	add.w	r0, sp, #15
   1647e:	9000      	str	r0, [sp, #0]
   16480:	1ce0      	adds	r0, r4, #3
   16482:	f7ff fd72 	bl	15f6a <ble_ll_hci_status_params_cmd_proc>
   16486:	4605      	mov	r5, r0
        break;
   16488:	e7c6      	b.n	16418 <ble_ll_hci_cmd_proc+0x50>
        rc = ble_ll_hci_le_cmd_proc(cmd->data, cmd->length, ocf, rspbuf, &rsplen, &post_cb);
   1648a:	78a1      	ldrb	r1, [r4, #2]
   1648c:	a802      	add	r0, sp, #8
   1648e:	9001      	str	r0, [sp, #4]
   16490:	f10d 000f 	add.w	r0, sp, #15
   16494:	9000      	str	r0, [sp, #0]
   16496:	1ce0      	adds	r0, r4, #3
   16498:	f7ff fe20 	bl	160dc <ble_ll_hci_le_cmd_proc>
   1649c:	4605      	mov	r5, r0
        break;
   1649e:	e7bb      	b.n	16418 <ble_ll_hci_cmd_proc+0x50>
    BLE_LL_ASSERT(rc >= 0);
   164a0:	f7f5 fea2 	bl	c1e8 <hal_debugger_connected>
   164a4:	b100      	cbz	r0, 164a8 <ble_ll_hci_cmd_proc+0xe0>
   164a6:	be01      	bkpt	0x0001
   164a8:	2300      	movs	r3, #0
   164aa:	461a      	mov	r2, r3
   164ac:	4619      	mov	r1, r3
   164ae:	4618      	mov	r0, r3
   164b0:	f7f6 f8d4 	bl	c65c <__assert_func>
        rc = BLE_ERR_UNKNOWN_HCI_CMD;
   164b4:	2501      	movs	r5, #1
   164b6:	e7b1      	b.n	1641c <ble_ll_hci_cmd_proc+0x54>
        rc -= (BLE_ERR_MAX + 1);
   164b8:	f5a5 7580 	sub.w	r5, r5, #256	; 0x100
        hci_ev->opcode = BLE_HCI_EVCODE_COMMAND_STATUS;
   164bc:	230f      	movs	r3, #15
   164be:	7023      	strb	r3, [r4, #0]
        hci_ev->length = sizeof(*cmd_status);
   164c0:	2304      	movs	r3, #4
   164c2:	7063      	strb	r3, [r4, #1]
        cmd_status->status = (uint8_t)rc;
   164c4:	70a5      	strb	r5, [r4, #2]
        cmd_status->num_packets = ble_ll_hci_get_num_cmd_pkts();
   164c6:	f7ff fc10 	bl	15cea <ble_ll_hci_get_num_cmd_pkts>
   164ca:	70e0      	strb	r0, [r4, #3]
        cmd_status->opcode = htole16(opcode);
   164cc:	80a6      	strh	r6, [r4, #4]
   164ce:	e7b3      	b.n	16438 <ble_ll_hci_cmd_proc+0x70>
        STATS_INC(ble_ll_stats, hci_cmds);
   164d0:	4a02      	ldr	r2, [pc, #8]	; (164dc <ble_ll_hci_cmd_proc+0x114>)
   164d2:	68d3      	ldr	r3, [r2, #12]
   164d4:	3301      	adds	r3, #1
   164d6:	60d3      	str	r3, [r2, #12]
   164d8:	e7b4      	b.n	16444 <ble_ll_hci_cmd_proc+0x7c>
   164da:	bf00      	nop
   164dc:	20003be0 	.word	0x20003be0

000164e0 <ble_ll_hci_send_noop>:
{
   164e0:	b510      	push	{r4, lr}
    hci_ev = (void *) ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   164e2:	2002      	movs	r0, #2
   164e4:	f00f fdc4 	bl	26070 <ble_hci_trans_buf_alloc>
    if (hci_ev) {
   164e8:	b168      	cbz	r0, 16506 <ble_ll_hci_send_noop+0x26>
   164ea:	4604      	mov	r4, r0
        hci_ev->opcode = BLE_HCI_EVCODE_COMMAND_COMPLETE;
   164ec:	230e      	movs	r3, #14
   164ee:	7003      	strb	r3, [r0, #0]
        hci_ev->length = sizeof(*ev);
   164f0:	2303      	movs	r3, #3
   164f2:	7043      	strb	r3, [r0, #1]
        ev->num_packets = ble_ll_hci_get_num_cmd_pkts();
   164f4:	f7ff fbf9 	bl	15cea <ble_ll_hci_get_num_cmd_pkts>
   164f8:	70a0      	strb	r0, [r4, #2]
        ev->opcode = BLE_HCI_OPCODE_NOP;
   164fa:	2300      	movs	r3, #0
   164fc:	70e3      	strb	r3, [r4, #3]
   164fe:	7123      	strb	r3, [r4, #4]
        ble_ll_hci_event_send(hci_ev);
   16500:	4620      	mov	r0, r4
   16502:	f7ff ff49 	bl	16398 <ble_ll_hci_event_send>
}
   16506:	bd10      	pop	{r4, pc}

00016508 <ble_ll_hci_is_le_event_enabled>:
{
   16508:	e92d 0830 	stmdb	sp!, {r4, r5, fp}
    if (g_ble_ll_hci_event_mask & (1ull << (BLE_HCI_EVCODE_LE_META - 1))) {
   1650c:	4b12      	ldr	r3, [pc, #72]	; (16558 <ble_ll_hci_is_le_event_enabled+0x50>)
   1650e:	e9d3 2300 	ldrd	r2, r3, [r3]
   16512:	2400      	movs	r4, #0
   16514:	f003 5500 	and.w	r5, r3, #536870912	; 0x20000000
   16518:	ea54 0305 	orrs.w	r3, r4, r5
   1651c:	d01a      	beq.n	16554 <ble_ll_hci_is_le_event_enabled+0x4c>
        return g_ble_ll_hci_le_event_mask & (1ull << (subev - 1));
   1651e:	1e45      	subs	r5, r0, #1
   16520:	2101      	movs	r1, #1
   16522:	3821      	subs	r0, #33	; 0x21
   16524:	f1c5 0420 	rsb	r4, r5, #32
   16528:	fa01 fc00 	lsl.w	ip, r1, r0
   1652c:	fa21 f404 	lsr.w	r4, r1, r4
   16530:	ea4c 0c04 	orr.w	ip, ip, r4
   16534:	fa01 fb05 	lsl.w	fp, r1, r5
   16538:	4908      	ldr	r1, [pc, #32]	; (1655c <ble_ll_hci_is_le_event_enabled+0x54>)
   1653a:	e9d1 0100 	ldrd	r0, r1, [r1]
   1653e:	ea0b 0200 	and.w	r2, fp, r0
   16542:	ea0c 0301 	and.w	r3, ip, r1
   16546:	4313      	orrs	r3, r2
   16548:	bf14      	ite	ne
   1654a:	2001      	movne	r0, #1
   1654c:	2000      	moveq	r0, #0
}
   1654e:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
   16552:	4770      	bx	lr
    return false;
   16554:	2000      	movs	r0, #0
   16556:	e7fa      	b.n	1654e <ble_ll_hci_is_le_event_enabled+0x46>
   16558:	20002630 	.word	0x20002630
   1655c:	20002640 	.word	0x20002640

00016560 <ble_ll_hci_is_event_enabled>:
{
   16560:	e92d 0830 	stmdb	sp!, {r4, r5, fp}
    if (evcode >= 64) {
   16564:	283f      	cmp	r0, #63	; 0x3f
   16566:	d81a      	bhi.n	1659e <ble_ll_hci_is_event_enabled+0x3e>
    return g_ble_ll_hci_event_mask & (1ull << (evcode - 1));
   16568:	1e45      	subs	r5, r0, #1
   1656a:	2101      	movs	r1, #1
   1656c:	3821      	subs	r0, #33	; 0x21
   1656e:	f1c5 0420 	rsb	r4, r5, #32
   16572:	fa01 fc00 	lsl.w	ip, r1, r0
   16576:	fa21 f404 	lsr.w	r4, r1, r4
   1657a:	ea4c 0c04 	orr.w	ip, ip, r4
   1657e:	fa01 fb05 	lsl.w	fp, r1, r5
   16582:	4914      	ldr	r1, [pc, #80]	; (165d4 <ble_ll_hci_is_event_enabled+0x74>)
   16584:	e9d1 0100 	ldrd	r0, r1, [r1]
   16588:	ea0b 0200 	and.w	r2, fp, r0
   1658c:	ea0c 0301 	and.w	r3, ip, r1
   16590:	4313      	orrs	r3, r2
   16592:	bf14      	ite	ne
   16594:	2001      	movne	r0, #1
   16596:	2000      	moveq	r0, #0
}
   16598:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
   1659c:	4770      	bx	lr
        return g_ble_ll_hci_event_mask2 & (1ull << (evcode - 64));
   1659e:	f1a0 0540 	sub.w	r5, r0, #64	; 0x40
   165a2:	2101      	movs	r1, #1
   165a4:	3860      	subs	r0, #96	; 0x60
   165a6:	f1c5 0420 	rsb	r4, r5, #32
   165aa:	fa01 fc00 	lsl.w	ip, r1, r0
   165ae:	fa21 f404 	lsr.w	r4, r1, r4
   165b2:	ea4c 0c04 	orr.w	ip, ip, r4
   165b6:	fa01 fb05 	lsl.w	fp, r1, r5
   165ba:	4907      	ldr	r1, [pc, #28]	; (165d8 <ble_ll_hci_is_event_enabled+0x78>)
   165bc:	e9d1 0100 	ldrd	r0, r1, [r1]
   165c0:	ea0b 0200 	and.w	r2, fp, r0
   165c4:	ea0c 0301 	and.w	r3, ip, r1
   165c8:	4313      	orrs	r3, r2
   165ca:	bf14      	ite	ne
   165cc:	2001      	movne	r0, #1
   165ce:	2000      	moveq	r0, #0
   165d0:	e7e2      	b.n	16598 <ble_ll_hci_is_event_enabled+0x38>
   165d2:	bf00      	nop
   165d4:	20002630 	.word	0x20002630
   165d8:	20002638 	.word	0x20002638

000165dc <ble_ll_hci_cmd_rx>:
 * @return                      0 on success;
 *                              BLE_ERR_MEM_CAPACITY on HCI buffer exhaustion.
 */
int
ble_ll_hci_cmd_rx(uint8_t *cmd, void *arg)
{
   165dc:	b508      	push	{r3, lr}
    return ev->ev.ev_queued;
   165de:	4b0c      	ldr	r3, [pc, #48]	; (16610 <ble_ll_hci_cmd_rx+0x34>)
   165e0:	781b      	ldrb	r3, [r3, #0]
    struct ble_npl_event *ev;

    /* Get an event structure off the queue */
    ev = &g_ble_ll_hci_cmd_ev;
    if (ble_npl_event_is_queued(ev)) {
   165e2:	b99b      	cbnz	r3, 1660c <ble_ll_hci_cmd_rx+0x30>
    assert(ev->ev.ev_queued == 0);
   165e4:	4b0a      	ldr	r3, [pc, #40]	; (16610 <ble_ll_hci_cmd_rx+0x34>)
   165e6:	781b      	ldrb	r3, [r3, #0]
   165e8:	b933      	cbnz	r3, 165f8 <ble_ll_hci_cmd_rx+0x1c>
    ev->ev.ev_arg = arg;
   165ea:	4909      	ldr	r1, [pc, #36]	; (16610 <ble_ll_hci_cmd_rx+0x34>)
   165ec:	6088      	str	r0, [r1, #8]
    os_eventq_put(&evq->evq, &ev->ev);
   165ee:	4809      	ldr	r0, [pc, #36]	; (16614 <ble_ll_hci_cmd_rx+0x38>)
   165f0:	f7f6 fb63 	bl	ccba <os_eventq_put>

    /* Fill out the event and post to Link Layer */
    ble_npl_event_set_arg(ev, cmd);
    ble_npl_eventq_put(&g_ble_ll_data.ll_evq, ev);

    return 0;
   165f4:	2000      	movs	r0, #0
}
   165f6:	bd08      	pop	{r3, pc}
    assert(ev->ev.ev_queued == 0);
   165f8:	f7f5 fdf6 	bl	c1e8 <hal_debugger_connected>
   165fc:	b100      	cbz	r0, 16600 <ble_ll_hci_cmd_rx+0x24>
   165fe:	be01      	bkpt	0x0001
   16600:	2300      	movs	r3, #0
   16602:	461a      	mov	r2, r3
   16604:	4619      	mov	r1, r3
   16606:	4618      	mov	r0, r3
   16608:	f7f6 f828 	bl	c65c <__assert_func>
        return BLE_ERR_MEM_CAPACITY;
   1660c:	2007      	movs	r0, #7
   1660e:	e7f2      	b.n	165f6 <ble_ll_hci_cmd_rx+0x1a>
   16610:	2000261c 	.word	0x2000261c
   16614:	20003d60 	.word	0x20003d60

00016618 <ble_ll_hci_acl_rx>:

/* Send ACL data from host to contoller */
int
ble_ll_hci_acl_rx(struct os_mbuf *om, void *arg)
{
   16618:	b508      	push	{r3, lr}
    ble_ll_acl_data_in(om);
   1661a:	f7fa f8f9 	bl	10810 <ble_ll_acl_data_in>
    return 0;
}
   1661e:	2000      	movs	r0, #0
   16620:	bd08      	pop	{r3, pc}
	...

00016624 <ble_ll_hci_init>:
    memset(ev, 0, sizeof(*ev));
   16624:	4a0e      	ldr	r2, [pc, #56]	; (16660 <ble_ll_hci_init+0x3c>)
   16626:	2300      	movs	r3, #0
   16628:	6013      	str	r3, [r2, #0]
   1662a:	6093      	str	r3, [r2, #8]
   1662c:	60d3      	str	r3, [r2, #12]
    ev->ev.ev_cb = (os_event_fn *)fn;
   1662e:	490d      	ldr	r1, [pc, #52]	; (16664 <ble_ll_hci_init+0x40>)
   16630:	6051      	str	r1, [r2, #4]

    /* Set event callback for command processing */
    ble_npl_event_init(&g_ble_ll_hci_cmd_ev, ble_ll_hci_cmd_proc, NULL);

    /* Set defaults for LE events: Vol 2 Part E 7.8.1 */
    g_ble_ll_hci_le_event_mask = 0x1f;
   16632:	4a0d      	ldr	r2, [pc, #52]	; (16668 <ble_ll_hci_init+0x44>)
   16634:	201f      	movs	r0, #31
   16636:	2100      	movs	r1, #0
   16638:	e9c2 0100 	strd	r0, r1, [r2]

    /* Set defaults for controller/baseband events: Vol 2 Part E 7.3.1 */
    g_ble_ll_hci_event_mask = 0x1fffffffffff;
   1663c:	4a0b      	ldr	r2, [pc, #44]	; (1666c <ble_ll_hci_init+0x48>)
   1663e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16642:	f641 71ff 	movw	r1, #8191	; 0x1fff
   16646:	e9c2 0100 	strd	r0, r1, [r2]


    /* Set page 2 to 0 */
    g_ble_ll_hci_event_mask2 = 0;
   1664a:	4a09      	ldr	r2, [pc, #36]	; (16670 <ble_ll_hci_init+0x4c>)
   1664c:	2000      	movs	r0, #0
   1664e:	2100      	movs	r1, #0
   16650:	e9c2 0100 	strd	r0, r1, [r2]

    /* reset RF path compensation values */
    rx_path_pwr_compensation = 0;
   16654:	4a07      	ldr	r2, [pc, #28]	; (16674 <ble_ll_hci_init+0x50>)
   16656:	8013      	strh	r3, [r2, #0]
    tx_path_pwr_compensation = 0;
   16658:	4a07      	ldr	r2, [pc, #28]	; (16678 <ble_ll_hci_init+0x54>)
   1665a:	8013      	strh	r3, [r2, #0]

#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LL_EXT_ADV)
    /* after reset both legacy and extended advertising commands are allowed */
    hci_adv_mode = ADV_MODE_ANY;
#endif
}
   1665c:	4770      	bx	lr
   1665e:	bf00      	nop
   16660:	2000261c 	.word	0x2000261c
   16664:	000163c9 	.word	0x000163c9
   16668:	20002640 	.word	0x20002640
   1666c:	20002630 	.word	0x20002630
   16670:	20002638 	.word	0x20002638
   16674:	20002648 	.word	0x20002648
   16678:	2000264a 	.word	0x2000264a

0001667c <ble_ll_hci_ev_datalen_chg>:
 *
 * @param connsm Pointer to connection state machine
 */
void
ble_ll_hci_ev_datalen_chg(struct ble_ll_conn_sm *connsm)
{
   1667c:	b510      	push	{r4, lr}
   1667e:	4604      	mov	r4, r0
    struct ble_hci_ev_le_subev_data_len_chg *ev;
    struct ble_hci_ev *hci_ev;

    if (ble_ll_hci_is_le_event_enabled(BLE_HCI_LE_SUBEV_DATA_LEN_CHG)) {
   16680:	2007      	movs	r0, #7
   16682:	f7ff ff41 	bl	16508 <ble_ll_hci_is_le_event_enabled>
   16686:	b900      	cbnz	r0, 1668a <ble_ll_hci_ev_datalen_chg+0xe>
            ev->max_rx_time = htole16(connsm->eff_max_rx_time);

            ble_ll_hci_event_send(hci_ev);
        }
    }
}
   16688:	bd10      	pop	{r4, pc}
        hci_ev = (void *) ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   1668a:	2002      	movs	r0, #2
   1668c:	f00f fcf0 	bl	26070 <ble_hci_trans_buf_alloc>
        if (hci_ev) {
   16690:	2800      	cmp	r0, #0
   16692:	d0f9      	beq.n	16688 <ble_ll_hci_ev_datalen_chg+0xc>
            hci_ev->opcode = BLE_HCI_EVCODE_LE_META;
   16694:	223e      	movs	r2, #62	; 0x3e
   16696:	7002      	strb	r2, [r0, #0]
            hci_ev->length = sizeof(*ev);
   16698:	220b      	movs	r2, #11
   1669a:	7042      	strb	r2, [r0, #1]
            ev->subev_code = BLE_HCI_LE_SUBEV_DATA_LEN_CHG;
   1669c:	2207      	movs	r2, #7
   1669e:	7082      	strb	r2, [r0, #2]
            ev->conn_handle = htole16(connsm->conn_handle);
   166a0:	88a2      	ldrh	r2, [r4, #4]
   166a2:	f8a0 2003 	strh.w	r2, [r0, #3]
            ev->max_tx_octets = htole16(connsm->eff_max_tx_octets);
   166a6:	7ba2      	ldrb	r2, [r4, #14]
   166a8:	f8a0 2005 	strh.w	r2, [r0, #5]
            ev->max_tx_time = htole16(connsm->eff_max_tx_time);
   166ac:	8b22      	ldrh	r2, [r4, #24]
   166ae:	f8a0 2007 	strh.w	r2, [r0, #7]
            ev->max_rx_octets = htole16(connsm->eff_max_rx_octets);
   166b2:	7be2      	ldrb	r2, [r4, #15]
   166b4:	f8a0 2009 	strh.w	r2, [r0, #9]
            ev->max_rx_time = htole16(connsm->eff_max_rx_time);
   166b8:	8b62      	ldrh	r2, [r4, #26]
   166ba:	f8a0 200b 	strh.w	r2, [r0, #11]
            ble_ll_hci_event_send(hci_ev);
   166be:	f7ff fe6b 	bl	16398 <ble_ll_hci_event_send>
}
   166c2:	e7e1      	b.n	16688 <ble_ll_hci_ev_datalen_chg+0xc>

000166c4 <ble_ll_hci_ev_rem_conn_parm_req>:
 * @param connsm Pointer to connection state machine
 */
void
ble_ll_hci_ev_rem_conn_parm_req(struct ble_ll_conn_sm *connsm,
                                struct ble_ll_conn_params *cp)
{
   166c4:	b538      	push	{r3, r4, r5, lr}
   166c6:	4605      	mov	r5, r0
   166c8:	460c      	mov	r4, r1
    struct ble_hci_ev_le_subev_rem_conn_param_req *ev;
    struct ble_hci_ev *hci_ev;

    if (ble_ll_hci_is_le_event_enabled(BLE_HCI_LE_SUBEV_REM_CONN_PARM_REQ)) {
   166ca:	2006      	movs	r0, #6
   166cc:	f7ff ff1c 	bl	16508 <ble_ll_hci_is_le_event_enabled>
   166d0:	b900      	cbnz	r0, 166d4 <ble_ll_hci_ev_rem_conn_parm_req+0x10>
            ev->timeout = htole16(cp->timeout);

            ble_ll_hci_event_send(hci_ev);
        }
    }
}
   166d2:	bd38      	pop	{r3, r4, r5, pc}
        hci_ev = (void *) ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   166d4:	2002      	movs	r0, #2
   166d6:	f00f fccb 	bl	26070 <ble_hci_trans_buf_alloc>
        if (hci_ev) {
   166da:	2800      	cmp	r0, #0
   166dc:	d0f9      	beq.n	166d2 <ble_ll_hci_ev_rem_conn_parm_req+0xe>
            hci_ev->opcode = BLE_HCI_EVCODE_LE_META;
   166de:	223e      	movs	r2, #62	; 0x3e
   166e0:	7002      	strb	r2, [r0, #0]
            hci_ev->length = sizeof(*ev);
   166e2:	220b      	movs	r2, #11
   166e4:	7042      	strb	r2, [r0, #1]
            ev->subev_code = BLE_HCI_LE_SUBEV_REM_CONN_PARM_REQ;
   166e6:	2206      	movs	r2, #6
   166e8:	7082      	strb	r2, [r0, #2]
            ev->conn_handle = htole16(connsm->conn_handle);
   166ea:	88aa      	ldrh	r2, [r5, #4]
   166ec:	f8a0 2003 	strh.w	r2, [r0, #3]
            ev->min_interval = htole16(cp->interval_min);
   166f0:	8822      	ldrh	r2, [r4, #0]
   166f2:	f8a0 2005 	strh.w	r2, [r0, #5]
            ev->max_interval = htole16(cp->interval_max);
   166f6:	8862      	ldrh	r2, [r4, #2]
   166f8:	f8a0 2007 	strh.w	r2, [r0, #7]
            ev->latency = htole16(cp->latency);
   166fc:	88a2      	ldrh	r2, [r4, #4]
   166fe:	f8a0 2009 	strh.w	r2, [r0, #9]
            ev->timeout = htole16(cp->timeout);
   16702:	88e2      	ldrh	r2, [r4, #6]
   16704:	f8a0 200b 	strh.w	r2, [r0, #11]
            ble_ll_hci_event_send(hci_ev);
   16708:	f7ff fe46 	bl	16398 <ble_ll_hci_event_send>
}
   1670c:	e7e1      	b.n	166d2 <ble_ll_hci_ev_rem_conn_parm_req+0xe>

0001670e <ble_ll_hci_ev_conn_update>:
 * @param connsm Pointer to connection state machine
 * @param status The error code.
 */
void
ble_ll_hci_ev_conn_update(struct ble_ll_conn_sm *connsm, uint8_t status)
{
   1670e:	b538      	push	{r3, r4, r5, lr}
   16710:	4604      	mov	r4, r0
   16712:	460d      	mov	r5, r1
    struct ble_hci_ev_le_subev_conn_upd_complete *ev;
    struct ble_hci_ev *hci_ev;

    if (ble_ll_hci_is_le_event_enabled(BLE_HCI_LE_SUBEV_CONN_UPD_COMPLETE)) {
   16714:	2003      	movs	r0, #3
   16716:	f7ff fef7 	bl	16508 <ble_ll_hci_is_le_event_enabled>
   1671a:	b900      	cbnz	r0, 1671e <ble_ll_hci_ev_conn_update+0x10>
            ev->supervision_timeout = htole16(connsm->supervision_tmo);

            ble_ll_hci_event_send(hci_ev);
        }
    }
}
   1671c:	bd38      	pop	{r3, r4, r5, pc}
        hci_ev = (void *) ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   1671e:	2002      	movs	r0, #2
   16720:	f00f fca6 	bl	26070 <ble_hci_trans_buf_alloc>
        if (hci_ev) {
   16724:	2800      	cmp	r0, #0
   16726:	d0f9      	beq.n	1671c <ble_ll_hci_ev_conn_update+0xe>
            hci_ev->opcode = BLE_HCI_EVCODE_LE_META;
   16728:	223e      	movs	r2, #62	; 0x3e
   1672a:	7002      	strb	r2, [r0, #0]
            hci_ev->length = sizeof(*ev);
   1672c:	220a      	movs	r2, #10
   1672e:	7042      	strb	r2, [r0, #1]
            ev->subev_code = BLE_HCI_LE_SUBEV_CONN_UPD_COMPLETE;
   16730:	2203      	movs	r2, #3
   16732:	7082      	strb	r2, [r0, #2]
            ev->status = status;
   16734:	70c5      	strb	r5, [r0, #3]
            ev->conn_handle = htole16(connsm->conn_handle);
   16736:	88a2      	ldrh	r2, [r4, #4]
   16738:	8082      	strh	r2, [r0, #4]
            ev->conn_itvl = htole16(connsm->conn_itvl);
   1673a:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
   1673e:	80c2      	strh	r2, [r0, #6]
            ev->conn_latency = htole16(connsm->slave_latency);
   16740:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
   16744:	8102      	strh	r2, [r0, #8]
            ev->supervision_timeout = htole16(connsm->supervision_tmo);
   16746:	f8b4 206c 	ldrh.w	r2, [r4, #108]	; 0x6c
   1674a:	8142      	strh	r2, [r0, #10]
            ble_ll_hci_event_send(hci_ev);
   1674c:	f7ff fe24 	bl	16398 <ble_ll_hci_event_send>
}
   16750:	e7e4      	b.n	1671c <ble_ll_hci_ev_conn_update+0xe>

00016752 <ble_ll_hci_ev_encrypt_chg>:

#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LE_ENCRYPTION)
void
ble_ll_hci_ev_encrypt_chg(struct ble_ll_conn_sm *connsm, uint8_t status)
{
   16752:	b538      	push	{r3, r4, r5, lr}
   16754:	4604      	mov	r4, r0
   16756:	460d      	mov	r5, r1
    struct ble_hci_ev_enc_key_refresh *ev_key_refresh;
    struct ble_hci_ev_enrypt_chg *ev_enc_chf;
    struct ble_hci_ev *hci_ev;

    if (CONN_F_ENC_CHANGE_SENT(connsm) == 0) {
   16758:	7883      	ldrb	r3, [r0, #2]
   1675a:	f013 0f04 	tst.w	r3, #4
   1675e:	d11c      	bne.n	1679a <ble_ll_hci_ev_encrypt_chg+0x48>
        if (ble_ll_hci_is_event_enabled(BLE_HCI_EVCODE_ENCRYPT_CHG)) {
   16760:	2008      	movs	r0, #8
   16762:	f7ff fefd 	bl	16560 <ble_ll_hci_is_event_enabled>
   16766:	b920      	cbnz	r0, 16772 <ble_ll_hci_ev_encrypt_chg+0x20>

                ble_ll_hci_event_send(hci_ev);
            }
        }

        CONN_F_ENC_CHANGE_SENT(connsm) = 1;
   16768:	78a3      	ldrb	r3, [r4, #2]
   1676a:	f043 0304 	orr.w	r3, r3, #4
   1676e:	70a3      	strb	r3, [r4, #2]
            ev_key_refresh->conn_handle = htole16(connsm->conn_handle);

            ble_ll_hci_event_send(hci_ev);
        }
    }
}
   16770:	bd38      	pop	{r3, r4, r5, pc}
            hci_ev = (void *)ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   16772:	2002      	movs	r0, #2
   16774:	f00f fc7c 	bl	26070 <ble_hci_trans_buf_alloc>
            if (hci_ev) {
   16778:	2800      	cmp	r0, #0
   1677a:	d0f5      	beq.n	16768 <ble_ll_hci_ev_encrypt_chg+0x16>
                hci_ev->opcode = BLE_HCI_EVCODE_ENCRYPT_CHG;
   1677c:	2208      	movs	r2, #8
   1677e:	7002      	strb	r2, [r0, #0]
                hci_ev->length = sizeof(*ev_enc_chf);
   16780:	2204      	movs	r2, #4
   16782:	7042      	strb	r2, [r0, #1]
                ev_enc_chf->status = status;
   16784:	7085      	strb	r5, [r0, #2]
                ev_enc_chf->connection_handle = htole16(connsm->conn_handle);
   16786:	88a2      	ldrh	r2, [r4, #4]
   16788:	f8a0 2003 	strh.w	r2, [r0, #3]
                ev_enc_chf->enabled = (status == BLE_ERR_SUCCESS) ? 0x01 : 0x00;
   1678c:	fab5 f585 	clz	r5, r5
   16790:	096d      	lsrs	r5, r5, #5
   16792:	7145      	strb	r5, [r0, #5]
                ble_ll_hci_event_send(hci_ev);
   16794:	f7ff fe00 	bl	16398 <ble_ll_hci_event_send>
   16798:	e7e6      	b.n	16768 <ble_ll_hci_ev_encrypt_chg+0x16>
    if (ble_ll_hci_is_event_enabled(BLE_HCI_EVCODE_ENC_KEY_REFRESH)) {
   1679a:	2030      	movs	r0, #48	; 0x30
   1679c:	f7ff fee0 	bl	16560 <ble_ll_hci_is_event_enabled>
   167a0:	2800      	cmp	r0, #0
   167a2:	d0e5      	beq.n	16770 <ble_ll_hci_ev_encrypt_chg+0x1e>
        hci_ev = (void *)ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   167a4:	2002      	movs	r0, #2
   167a6:	f00f fc63 	bl	26070 <ble_hci_trans_buf_alloc>
        if (hci_ev) {
   167aa:	2800      	cmp	r0, #0
   167ac:	d0e0      	beq.n	16770 <ble_ll_hci_ev_encrypt_chg+0x1e>
            hci_ev->opcode = BLE_HCI_EVCODE_ENC_KEY_REFRESH;
   167ae:	2230      	movs	r2, #48	; 0x30
   167b0:	7002      	strb	r2, [r0, #0]
            hci_ev->length = sizeof(*ev_key_refresh);
   167b2:	2203      	movs	r2, #3
   167b4:	7042      	strb	r2, [r0, #1]
            ev_key_refresh->status = status;
   167b6:	7085      	strb	r5, [r0, #2]
            ev_key_refresh->conn_handle = htole16(connsm->conn_handle);
   167b8:	88a2      	ldrh	r2, [r4, #4]
   167ba:	f8a0 2003 	strh.w	r2, [r0, #3]
            ble_ll_hci_event_send(hci_ev);
   167be:	f7ff fdeb 	bl	16398 <ble_ll_hci_event_send>
   167c2:	e7d5      	b.n	16770 <ble_ll_hci_ev_encrypt_chg+0x1e>

000167c4 <ble_ll_hci_ev_ltk_req>:
 *
 * @param connsm Pointer to connection state machine
 */
int
ble_ll_hci_ev_ltk_req(struct ble_ll_conn_sm *connsm)
{
   167c4:	b510      	push	{r4, lr}
   167c6:	4604      	mov	r4, r0
    struct ble_hci_ev_le_subev_lt_key_req *ev;
    struct ble_hci_ev *hci_ev;
    int rc;

    if (ble_ll_hci_is_le_event_enabled(BLE_HCI_LE_SUBEV_LT_KEY_REQ)) {
   167c8:	2005      	movs	r0, #5
   167ca:	f7ff fe9d 	bl	16508 <ble_ll_hci_is_le_event_enabled>
   167ce:	b1e0      	cbz	r0, 1680a <ble_ll_hci_ev_ltk_req+0x46>
        hci_ev = (void *) ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   167d0:	2002      	movs	r0, #2
   167d2:	f00f fc4d 	bl	26070 <ble_hci_trans_buf_alloc>
        if (hci_ev) {
   167d6:	b1d8      	cbz	r0, 16810 <ble_ll_hci_ev_ltk_req+0x4c>
            hci_ev->opcode = BLE_HCI_EVCODE_LE_META;
   167d8:	223e      	movs	r2, #62	; 0x3e
   167da:	7002      	strb	r2, [r0, #0]
            hci_ev->length = sizeof(*ev);
   167dc:	220d      	movs	r2, #13
   167de:	7042      	strb	r2, [r0, #1]
            ev = (void *) hci_ev->data;

            ev->subev_code = BLE_HCI_LE_SUBEV_LT_KEY_REQ;
   167e0:	2205      	movs	r2, #5
   167e2:	7082      	strb	r2, [r0, #2]
            ev->conn_handle = htole16(connsm->conn_handle);
   167e4:	88a2      	ldrh	r2, [r4, #4]
   167e6:	f8a0 2003 	strh.w	r2, [r0, #3]
            ev->rand = htole64(connsm->enc_data.host_rand_num);
   167ea:	f8d4 1128 	ldr.w	r1, [r4, #296]	; 0x128
   167ee:	f8d4 212c 	ldr.w	r2, [r4, #300]	; 0x12c
   167f2:	f8c0 1005 	str.w	r1, [r0, #5]
   167f6:	f8c0 2009 	str.w	r2, [r0, #9]
            ev->div = htole16(connsm->enc_data.enc_div);
   167fa:	f8b4 211a 	ldrh.w	r2, [r4, #282]	; 0x11a
   167fe:	f8a0 200d 	strh.w	r2, [r0, #13]

            ble_ll_hci_event_send(hci_ev);
   16802:	f7ff fdc9 	bl	16398 <ble_ll_hci_event_send>
        }
        rc = 0;
   16806:	2000      	movs	r0, #0
    if (rc == 0) {
        bletest_ltk_req_reply(connsm->conn_handle);
    }
#endif
    return rc;
}
   16808:	bd10      	pop	{r4, pc}
        rc = -1;
   1680a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1680e:	e7fb      	b.n	16808 <ble_ll_hci_ev_ltk_req+0x44>
        rc = 0;
   16810:	2000      	movs	r0, #0
    return rc;
   16812:	e7f9      	b.n	16808 <ble_ll_hci_ev_ltk_req+0x44>

00016814 <ble_ll_hci_ev_rd_rem_used_feat>:
#endif

void
ble_ll_hci_ev_rd_rem_used_feat(struct ble_ll_conn_sm *connsm, uint8_t status)
{
   16814:	b538      	push	{r3, r4, r5, lr}
   16816:	4604      	mov	r4, r0
   16818:	460d      	mov	r5, r1
    struct ble_hci_ev_le_subev_rd_rem_used_feat *ev;
    struct ble_hci_ev *hci_ev;

    if (ble_ll_hci_is_le_event_enabled(BLE_HCI_LE_SUBEV_RD_REM_USED_FEAT)) {
   1681a:	2004      	movs	r0, #4
   1681c:	f7ff fe74 	bl	16508 <ble_ll_hci_is_le_event_enabled>
   16820:	b900      	cbnz	r0, 16824 <ble_ll_hci_ev_rd_rem_used_feat+0x10>
            memcpy(ev->features + 1, connsm->remote_features, 7);

            ble_ll_hci_event_send(hci_ev);
        }
    }
}
   16822:	bd38      	pop	{r3, r4, r5, pc}
        hci_ev = (void *) ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   16824:	2002      	movs	r0, #2
   16826:	f00f fc23 	bl	26070 <ble_hci_trans_buf_alloc>
        if (hci_ev) {
   1682a:	4603      	mov	r3, r0
   1682c:	2800      	cmp	r0, #0
   1682e:	d0f8      	beq.n	16822 <ble_ll_hci_ev_rd_rem_used_feat+0xe>
            hci_ev->opcode = BLE_HCI_EVCODE_LE_META;
   16830:	223e      	movs	r2, #62	; 0x3e
   16832:	7002      	strb	r2, [r0, #0]
            hci_ev->length = sizeof(*ev);
   16834:	220c      	movs	r2, #12
   16836:	7042      	strb	r2, [r0, #1]
            ev->subev_code = BLE_HCI_LE_SUBEV_RD_REM_USED_FEAT;
   16838:	2204      	movs	r2, #4
   1683a:	7082      	strb	r2, [r0, #2]
            ev->status = status;
   1683c:	70c5      	strb	r5, [r0, #3]
            ev->conn_handle = htole16(connsm->conn_handle);
   1683e:	88a2      	ldrh	r2, [r4, #4]
   16840:	8082      	strh	r2, [r0, #4]
            ev->features[0] = connsm->conn_features;
   16842:	f894 203f 	ldrb.w	r2, [r4, #63]	; 0x3f
   16846:	7182      	strb	r2, [r0, #6]
            memcpy(ev->features + 1, connsm->remote_features, 7);
   16848:	f854 1f40 	ldr.w	r1, [r4, #64]!
   1684c:	f8c0 1007 	str.w	r1, [r0, #7]
   16850:	88a0      	ldrh	r0, [r4, #4]
   16852:	79a1      	ldrb	r1, [r4, #6]
   16854:	f8a3 000b 	strh.w	r0, [r3, #11]
   16858:	7359      	strb	r1, [r3, #13]
            ble_ll_hci_event_send(hci_ev);
   1685a:	4618      	mov	r0, r3
   1685c:	f7ff fd9c 	bl	16398 <ble_ll_hci_event_send>
}
   16860:	e7df      	b.n	16822 <ble_ll_hci_ev_rd_rem_used_feat+0xe>

00016862 <ble_ll_hci_ev_rd_rem_ver>:

void
ble_ll_hci_ev_rd_rem_ver(struct ble_ll_conn_sm *connsm, uint8_t status)
{
   16862:	b538      	push	{r3, r4, r5, lr}
   16864:	4604      	mov	r4, r0
   16866:	460d      	mov	r5, r1
    struct ble_hci_ev_rd_rem_ver_info_cmp *ev;
    struct ble_hci_ev *hci_ev;

    if (ble_ll_hci_is_event_enabled(BLE_HCI_EVCODE_RD_REM_VER_INFO_CMP)) {
   16868:	200c      	movs	r0, #12
   1686a:	f7ff fe79 	bl	16560 <ble_ll_hci_is_event_enabled>
   1686e:	b900      	cbnz	r0, 16872 <ble_ll_hci_ev_rd_rem_ver+0x10>
            ev->subversion = htole16(connsm->sub_vers_nr);

            ble_ll_hci_event_send(hci_ev);
        }
    }
}
   16870:	bd38      	pop	{r3, r4, r5, pc}
        hci_ev = (void *) ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   16872:	2002      	movs	r0, #2
   16874:	f00f fbfc 	bl	26070 <ble_hci_trans_buf_alloc>
        if (hci_ev) {
   16878:	2800      	cmp	r0, #0
   1687a:	d0f9      	beq.n	16870 <ble_ll_hci_ev_rd_rem_ver+0xe>
            hci_ev->opcode = BLE_HCI_EVCODE_RD_REM_VER_INFO_CMP;
   1687c:	220c      	movs	r2, #12
   1687e:	7002      	strb	r2, [r0, #0]
            hci_ev->length = sizeof(*ev);
   16880:	2208      	movs	r2, #8
   16882:	7042      	strb	r2, [r0, #1]
            ev->status = status;
   16884:	7085      	strb	r5, [r0, #2]
            ev->conn_handle = htole16(connsm->conn_handle);
   16886:	88a2      	ldrh	r2, [r4, #4]
   16888:	f8a0 2003 	strh.w	r2, [r0, #3]
            ev->version = connsm->vers_nr;
   1688c:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
   16890:	7142      	strb	r2, [r0, #5]
            ev->manufacturer = htole16(connsm->comp_id);
   16892:	f8b4 204e 	ldrh.w	r2, [r4, #78]	; 0x4e
   16896:	80c2      	strh	r2, [r0, #6]
            ev->subversion = htole16(connsm->sub_vers_nr);
   16898:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
   1689c:	8102      	strh	r2, [r0, #8]
            ble_ll_hci_event_send(hci_ev);
   1689e:	f7ff fd7b 	bl	16398 <ble_ll_hci_event_send>
}
   168a2:	e7e5      	b.n	16870 <ble_ll_hci_ev_rd_rem_ver+0xe>

000168a4 <ble_ll_hci_ev_hw_err>:
 *
 * @return int 0: event masked or event sent, -1 otherwise
 */
int
ble_ll_hci_ev_hw_err(uint8_t hw_err)
{
   168a4:	b510      	push	{r4, lr}
   168a6:	4604      	mov	r4, r0
    struct ble_hci_ev_hw_error *ev;
    struct ble_hci_ev *hci_ev;
    int rc;

    rc = 0;
    if (ble_ll_hci_is_event_enabled(BLE_HCI_EVCODE_HW_ERROR)) {
   168a8:	2010      	movs	r0, #16
   168aa:	f7ff fe59 	bl	16560 <ble_ll_hci_is_event_enabled>
   168ae:	b908      	cbnz	r0, 168b4 <ble_ll_hci_ev_hw_err+0x10>
    rc = 0;
   168b0:	2000      	movs	r0, #0
        } else {
            rc = -1;
        }
    }
    return rc;
}
   168b2:	bd10      	pop	{r4, pc}
        hci_ev = (void *)ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   168b4:	2002      	movs	r0, #2
   168b6:	f00f fbdb 	bl	26070 <ble_hci_trans_buf_alloc>
        if (hci_ev) {
   168ba:	b140      	cbz	r0, 168ce <ble_ll_hci_ev_hw_err+0x2a>
            hci_ev->opcode = BLE_HCI_EVCODE_HW_ERROR;
   168bc:	2210      	movs	r2, #16
   168be:	7002      	strb	r2, [r0, #0]
            hci_ev->length = sizeof(*ev);
   168c0:	2201      	movs	r2, #1
   168c2:	7042      	strb	r2, [r0, #1]
            ev->hw_code = hw_err;
   168c4:	7084      	strb	r4, [r0, #2]
            ble_ll_hci_event_send(hci_ev);
   168c6:	f7ff fd67 	bl	16398 <ble_ll_hci_event_send>
    rc = 0;
   168ca:	2000      	movs	r0, #0
   168cc:	e7f1      	b.n	168b2 <ble_ll_hci_ev_hw_err+0xe>
            rc = -1;
   168ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return rc;
   168d2:	e7ee      	b.n	168b2 <ble_ll_hci_ev_hw_err+0xe>

000168d4 <ble_ll_hci_ev_databuf_overflow>:

void
ble_ll_hci_ev_databuf_overflow(void)
{
   168d4:	b508      	push	{r3, lr}
    struct ble_hci_ev_data_buf_overflow *ev;
    struct ble_hci_ev *hci_ev;

    if (ble_ll_hci_is_event_enabled(BLE_HCI_EVCODE_DATA_BUF_OVERFLOW)) {
   168d6:	201a      	movs	r0, #26
   168d8:	f7ff fe42 	bl	16560 <ble_ll_hci_is_event_enabled>
   168dc:	b900      	cbnz	r0, 168e0 <ble_ll_hci_ev_databuf_overflow+0xc>
            ev->link_type = BLE_HCI_EVENT_ACL_BUF_OVERFLOW;

            ble_ll_hci_event_send(hci_ev);
        }
    }
}
   168de:	bd08      	pop	{r3, pc}
        hci_ev = (void *) ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   168e0:	2002      	movs	r0, #2
   168e2:	f00f fbc5 	bl	26070 <ble_hci_trans_buf_alloc>
        if (hci_ev) {
   168e6:	2800      	cmp	r0, #0
   168e8:	d0f9      	beq.n	168de <ble_ll_hci_ev_databuf_overflow+0xa>
            hci_ev->opcode = BLE_HCI_EVCODE_DATA_BUF_OVERFLOW;
   168ea:	221a      	movs	r2, #26
   168ec:	7002      	strb	r2, [r0, #0]
            hci_ev->length = sizeof(*ev);
   168ee:	2201      	movs	r2, #1
   168f0:	7042      	strb	r2, [r0, #1]
            ev->link_type = BLE_HCI_EVENT_ACL_BUF_OVERFLOW;
   168f2:	7082      	strb	r2, [r0, #2]
            ble_ll_hci_event_send(hci_ev);
   168f4:	f7ff fd50 	bl	16398 <ble_ll_hci_event_send>
}
   168f8:	e7f1      	b.n	168de <ble_ll_hci_ev_databuf_overflow+0xa>
	...

000168fc <ble_ll_rand_sample>:
#define IS_RNUM_BUF_END(x)  \
    (x == &g_ble_ll_rnum_buf[MYNEWT_VAL(BLE_LL_RNG_BUFSIZE) - 1])

void
ble_ll_rand_sample(uint8_t rnum)
{
   168fc:	b538      	push	{r3, r4, r5, lr}
   168fe:	4605      	mov	r5, r0
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
   16900:	f7f6 ff7a 	bl	d7f8 <os_arch_save_sr>
   16904:	4604      	mov	r4, r0
    if (g_ble_ll_rnum_data.rnd_size < MYNEWT_VAL(BLE_LL_RNG_BUFSIZE)) {
   16906:	4b0f      	ldr	r3, [pc, #60]	; (16944 <ble_ll_rand_sample+0x48>)
   16908:	7a1b      	ldrb	r3, [r3, #8]
   1690a:	b2db      	uxtb	r3, r3
   1690c:	2b1f      	cmp	r3, #31
   1690e:	d815      	bhi.n	1693c <ble_ll_rand_sample+0x40>
        ++g_ble_ll_rnum_data.rnd_size;
   16910:	4a0c      	ldr	r2, [pc, #48]	; (16944 <ble_ll_rand_sample+0x48>)
   16912:	7a13      	ldrb	r3, [r2, #8]
   16914:	3301      	adds	r3, #1
   16916:	b2db      	uxtb	r3, r3
   16918:	7213      	strb	r3, [r2, #8]
        g_ble_ll_rnum_data.rnd_in[0] = rnum;
   1691a:	6813      	ldr	r3, [r2, #0]
   1691c:	701d      	strb	r5, [r3, #0]
        if (IS_RNUM_BUF_END(g_ble_ll_rnum_data.rnd_in)) {
   1691e:	6813      	ldr	r3, [r2, #0]
   16920:	4a09      	ldr	r2, [pc, #36]	; (16948 <ble_ll_rand_sample+0x4c>)
   16922:	4293      	cmp	r3, r2
   16924:	d006      	beq.n	16934 <ble_ll_rand_sample+0x38>
            g_ble_ll_rnum_data.rnd_in = g_ble_ll_rnum_buf;
        } else {
            ++g_ble_ll_rnum_data.rnd_in;
   16926:	3301      	adds	r3, #1
   16928:	4a06      	ldr	r2, [pc, #24]	; (16944 <ble_ll_rand_sample+0x48>)
   1692a:	6013      	str	r3, [r2, #0]
        }
    } else {
        /* Stop generating random numbers as we are full */
        ble_hw_rng_stop();
    }
    OS_EXIT_CRITICAL(sr);
   1692c:	4620      	mov	r0, r4
   1692e:	f7f6 ff69 	bl	d804 <os_arch_restore_sr>
}
   16932:	bd38      	pop	{r3, r4, r5, pc}
            g_ble_ll_rnum_data.rnd_in = g_ble_ll_rnum_buf;
   16934:	4b03      	ldr	r3, [pc, #12]	; (16944 <ble_ll_rand_sample+0x48>)
   16936:	3a1f      	subs	r2, #31
   16938:	601a      	str	r2, [r3, #0]
   1693a:	e7f7      	b.n	1692c <ble_ll_rand_sample+0x30>
        ble_hw_rng_stop();
   1693c:	f002 fda2 	bl	19484 <ble_hw_rng_stop>
   16940:	e7f4      	b.n	1692c <ble_ll_rand_sample+0x30>
   16942:	bf00      	nop
   16944:	200040d4 	.word	0x200040d4
   16948:	200040ff 	.word	0x200040ff

0001694c <ble_ll_rand_data_get>:
#endif

/* Get 'len' bytes of random data */
int
ble_ll_rand_data_get(uint8_t *buf, uint8_t len)
{
   1694c:	b538      	push	{r3, r4, r5, lr}
   1694e:	4604      	mov	r4, r0
   16950:	460d      	mov	r5, r1
    }
#else
    uint8_t rnums;
    os_sr_t sr;

    while (len != 0) {
   16952:	e017      	b.n	16984 <ble_ll_rand_data_get+0x38>
        len -= rnums;
        g_ble_ll_rnum_data.rnd_size -= rnums;
        while (rnums) {
            buf[0] = g_ble_ll_rnum_data.rnd_out[0];
            if (IS_RNUM_BUF_END(g_ble_ll_rnum_data.rnd_out)) {
                g_ble_ll_rnum_data.rnd_out = g_ble_ll_rnum_buf;
   16954:	4a1a      	ldr	r2, [pc, #104]	; (169c0 <ble_ll_rand_data_get+0x74>)
   16956:	391f      	subs	r1, #31
   16958:	6051      	str	r1, [r2, #4]
            } else {
                ++g_ble_ll_rnum_data.rnd_out;
            }
            ++buf;
   1695a:	3401      	adds	r4, #1
            --rnums;
   1695c:	3b01      	subs	r3, #1
   1695e:	b2db      	uxtb	r3, r3
        while (rnums) {
   16960:	b15b      	cbz	r3, 1697a <ble_ll_rand_data_get+0x2e>
            buf[0] = g_ble_ll_rnum_data.rnd_out[0];
   16962:	4a17      	ldr	r2, [pc, #92]	; (169c0 <ble_ll_rand_data_get+0x74>)
   16964:	6851      	ldr	r1, [r2, #4]
   16966:	7809      	ldrb	r1, [r1, #0]
   16968:	7021      	strb	r1, [r4, #0]
            if (IS_RNUM_BUF_END(g_ble_ll_rnum_data.rnd_out)) {
   1696a:	6852      	ldr	r2, [r2, #4]
   1696c:	4915      	ldr	r1, [pc, #84]	; (169c4 <ble_ll_rand_data_get+0x78>)
   1696e:	428a      	cmp	r2, r1
   16970:	d0f0      	beq.n	16954 <ble_ll_rand_data_get+0x8>
                ++g_ble_ll_rnum_data.rnd_out;
   16972:	3201      	adds	r2, #1
   16974:	4912      	ldr	r1, [pc, #72]	; (169c0 <ble_ll_rand_data_get+0x74>)
   16976:	604a      	str	r2, [r1, #4]
   16978:	e7ef      	b.n	1695a <ble_ll_rand_data_get+0xe>
        }
        OS_EXIT_CRITICAL(sr);
   1697a:	f7f6 ff43 	bl	d804 <os_arch_restore_sr>

        /* Make sure rng is started! */
        ble_hw_rng_start();
   1697e:	f002 fd67 	bl	19450 <ble_hw_rng_start>

        /* Wait till bytes are in buffer. */
        if (len) {
   16982:	b985      	cbnz	r5, 169a6 <ble_ll_rand_data_get+0x5a>
    while (len != 0) {
   16984:	b1d5      	cbz	r5, 169bc <ble_ll_rand_data_get+0x70>
        OS_ENTER_CRITICAL(sr);
   16986:	f7f6 ff37 	bl	d7f8 <os_arch_save_sr>
        rnums = g_ble_ll_rnum_data.rnd_size;
   1698a:	4b0d      	ldr	r3, [pc, #52]	; (169c0 <ble_ll_rand_data_get+0x74>)
   1698c:	7a1b      	ldrb	r3, [r3, #8]
   1698e:	b2db      	uxtb	r3, r3
        if (rnums > len) {
   16990:	429d      	cmp	r5, r3
   16992:	d200      	bcs.n	16996 <ble_ll_rand_data_get+0x4a>
            rnums = len;
   16994:	462b      	mov	r3, r5
        len -= rnums;
   16996:	1aed      	subs	r5, r5, r3
   16998:	b2ed      	uxtb	r5, r5
        g_ble_ll_rnum_data.rnd_size -= rnums;
   1699a:	4909      	ldr	r1, [pc, #36]	; (169c0 <ble_ll_rand_data_get+0x74>)
   1699c:	7a0a      	ldrb	r2, [r1, #8]
   1699e:	1ad2      	subs	r2, r2, r3
   169a0:	b2d2      	uxtb	r2, r2
   169a2:	720a      	strb	r2, [r1, #8]
        while (rnums) {
   169a4:	e7dc      	b.n	16960 <ble_ll_rand_data_get+0x14>
            while ((g_ble_ll_rnum_data.rnd_size < len) &&
   169a6:	4b06      	ldr	r3, [pc, #24]	; (169c0 <ble_ll_rand_data_get+0x74>)
   169a8:	7a1b      	ldrb	r3, [r3, #8]
   169aa:	b2db      	uxtb	r3, r3
   169ac:	42ab      	cmp	r3, r5
   169ae:	d2e9      	bcs.n	16984 <ble_ll_rand_data_get+0x38>
                   (g_ble_ll_rnum_data.rnd_size < MYNEWT_VAL(BLE_LL_RNG_BUFSIZE))) {
   169b0:	4b03      	ldr	r3, [pc, #12]	; (169c0 <ble_ll_rand_data_get+0x74>)
   169b2:	7a1b      	ldrb	r3, [r3, #8]
   169b4:	b2db      	uxtb	r3, r3
            while ((g_ble_ll_rnum_data.rnd_size < len) &&
   169b6:	2b1f      	cmp	r3, #31
   169b8:	d9f5      	bls.n	169a6 <ble_ll_rand_data_get+0x5a>
   169ba:	e7e3      	b.n	16984 <ble_ll_rand_data_get+0x38>
            }
        }
    }
#endif
    return BLE_ERR_SUCCESS;
}
   169bc:	2000      	movs	r0, #0
   169be:	bd38      	pop	{r3, r4, r5, pc}
   169c0:	200040d4 	.word	0x200040d4
   169c4:	200040ff 	.word	0x200040ff

000169c8 <ble_ll_rand_prand_get>:
 *
 * @param prand
 */
void
ble_ll_rand_prand_get(uint8_t *prand)
{
   169c8:	b510      	push	{r4, lr}
   169ca:	4604      	mov	r4, r0
    uint16_t sum;

    while (1) {
        /* Get 24 bits of random data */
        ble_ll_rand_data_get(prand, 3);
   169cc:	2103      	movs	r1, #3
   169ce:	4620      	mov	r0, r4
   169d0:	f7ff ffbc 	bl	1694c <ble_ll_rand_data_get>

        /* Prand cannot be all zeros or 1's. */
        sum = prand[0] + prand[1] + prand[2];
   169d4:	7823      	ldrb	r3, [r4, #0]
   169d6:	7862      	ldrb	r2, [r4, #1]
   169d8:	4413      	add	r3, r2
   169da:	78a2      	ldrb	r2, [r4, #2]
        if ((sum != 0) && (sum != (3 * 0xff))) {
   169dc:	18d3      	adds	r3, r2, r3
   169de:	d0f5      	beq.n	169cc <ble_ll_rand_prand_get+0x4>
   169e0:	f240 21fd 	movw	r1, #765	; 0x2fd
   169e4:	428b      	cmp	r3, r1
   169e6:	d0f1      	beq.n	169cc <ble_ll_rand_prand_get+0x4>
            break;
        }
    }

    /* Upper two bits must be 01 */
    prand[2] &= ~0xc0;
   169e8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    prand[2] |= 0x40;
   169ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   169f0:	70a2      	strb	r2, [r4, #2]
}
   169f2:	bd10      	pop	{r4, pc}

000169f4 <ble_ll_rand_start>:
 *
 * @return int
 */
int
ble_ll_rand_start(void)
{
   169f4:	b508      	push	{r3, lr}
#if MYNEWT_VAL(TRNG)
    /* Nothing to do - this is handled by driver */
#else
    /* Start the generation of numbers if we are not full */
    if (g_ble_ll_rnum_data.rnd_size < MYNEWT_VAL(BLE_LL_RNG_BUFSIZE)) {
   169f6:	4b05      	ldr	r3, [pc, #20]	; (16a0c <ble_ll_rand_start+0x18>)
   169f8:	7a1b      	ldrb	r3, [r3, #8]
   169fa:	b2db      	uxtb	r3, r3
   169fc:	2b1f      	cmp	r3, #31
   169fe:	d901      	bls.n	16a04 <ble_ll_rand_start+0x10>
        ble_hw_rng_start();
    }
#endif
    return 0;
}
   16a00:	2000      	movs	r0, #0
   16a02:	bd08      	pop	{r3, pc}
        ble_hw_rng_start();
   16a04:	f002 fd24 	bl	19450 <ble_hw_rng_start>
   16a08:	e7fa      	b.n	16a00 <ble_ll_rand_start+0xc>
   16a0a:	bf00      	nop
   16a0c:	200040d4 	.word	0x200040d4

00016a10 <ble_ll_rand_init>:
 *
 * @return int
 */
int
ble_ll_rand_init(void)
{
   16a10:	b508      	push	{r3, lr}
#if MYNEWT_VAL(TRNG)
    g_trng = (struct trng_dev *) os_dev_open("trng", OS_TIMEOUT_NEVER, NULL);
#else
    g_ble_ll_rnum_data.rnd_in = g_ble_ll_rnum_buf;
   16a12:	4b05      	ldr	r3, [pc, #20]	; (16a28 <ble_ll_rand_init+0x18>)
   16a14:	4a05      	ldr	r2, [pc, #20]	; (16a2c <ble_ll_rand_init+0x1c>)
   16a16:	601a      	str	r2, [r3, #0]
    g_ble_ll_rnum_data.rnd_out = g_ble_ll_rnum_buf;
   16a18:	605a      	str	r2, [r3, #4]
    ble_hw_rng_init(ble_ll_rand_sample, 1);
   16a1a:	2101      	movs	r1, #1
   16a1c:	4804      	ldr	r0, [pc, #16]	; (16a30 <ble_ll_rand_init+0x20>)
   16a1e:	f002 fcf3 	bl	19408 <ble_hw_rng_init>
#endif
    return 0;
}
   16a22:	2000      	movs	r0, #0
   16a24:	bd08      	pop	{r3, pc}
   16a26:	bf00      	nop
   16a28:	200040d4 	.word	0x200040d4
   16a2c:	200040e0 	.word	0x200040e0
   16a30:	000168fd 	.word	0x000168fd

00016a34 <ble_ll_resolv_irk_nonzero>:
{
    int i;
    int rc;

    rc = 0;
    for (i = 0; i < 16; ++i) {
   16a34:	2300      	movs	r3, #0
   16a36:	2b0f      	cmp	r3, #15
   16a38:	dc04      	bgt.n	16a44 <ble_ll_resolv_irk_nonzero+0x10>
        if (*irk != 0) {
   16a3a:	7802      	ldrb	r2, [r0, #0]
   16a3c:	b922      	cbnz	r2, 16a48 <ble_ll_resolv_irk_nonzero+0x14>
            rc = 1;
            break;
        }
        ++irk;
   16a3e:	3001      	adds	r0, #1
    for (i = 0; i < 16; ++i) {
   16a40:	3301      	adds	r3, #1
   16a42:	e7f8      	b.n	16a36 <ble_ll_resolv_irk_nonzero+0x2>
    rc = 0;
   16a44:	2000      	movs	r0, #0
   16a46:	4770      	bx	lr
            rc = 1;
   16a48:	2001      	movs	r0, #1
    }

    return rc;
}
   16a4a:	4770      	bx	lr

00016a4c <ble_ll_is_controller_busy>:
{
   16a4c:	b508      	push	{r3, lr}
    return ble_ll_adv_enabled() || ble_ll_scan_enabled() ||
   16a4e:	f7fb f947 	bl	11ce0 <ble_ll_adv_enabled>
   16a52:	b110      	cbz	r0, 16a5a <ble_ll_is_controller_busy+0xe>
   16a54:	2301      	movs	r3, #1
}
   16a56:	4618      	mov	r0, r3
   16a58:	bd08      	pop	{r3, pc}
    return ble_ll_adv_enabled() || ble_ll_scan_enabled() ||
   16a5a:	f001 fd7d 	bl	18558 <ble_ll_scan_enabled>
   16a5e:	4603      	mov	r3, r0
   16a60:	b928      	cbnz	r0, 16a6e <ble_ll_is_controller_busy+0x22>
   16a62:	4a04      	ldr	r2, [pc, #16]	; (16a74 <ble_ll_is_controller_busy+0x28>)
   16a64:	6812      	ldr	r2, [r2, #0]
   16a66:	2a00      	cmp	r2, #0
   16a68:	d0f5      	beq.n	16a56 <ble_ll_is_controller_busy+0xa>
   16a6a:	2301      	movs	r3, #1
   16a6c:	e7f3      	b.n	16a56 <ble_ll_is_controller_busy+0xa>
   16a6e:	2301      	movs	r3, #1
   16a70:	e7f1      	b.n	16a56 <ble_ll_is_controller_busy+0xa>
   16a72:	bf00      	nop
   16a74:	20003ea8 	.word	0x20003ea8

00016a78 <ble_ll_resolv_list_chg_allowed>:
{
   16a78:	b508      	push	{r3, lr}
    if (g_ble_ll_resolv_data.addr_res_enabled &&
   16a7a:	4b06      	ldr	r3, [pc, #24]	; (16a94 <ble_ll_resolv_list_chg_allowed+0x1c>)
   16a7c:	781b      	ldrb	r3, [r3, #0]
   16a7e:	b90b      	cbnz	r3, 16a84 <ble_ll_resolv_list_chg_allowed+0xc>
        rc = 1;
   16a80:	2001      	movs	r0, #1
}
   16a82:	bd08      	pop	{r3, pc}
       ble_ll_is_controller_busy()) {
   16a84:	f7ff ffe2 	bl	16a4c <ble_ll_is_controller_busy>
    if (g_ble_ll_resolv_data.addr_res_enabled &&
   16a88:	b908      	cbnz	r0, 16a8e <ble_ll_resolv_list_chg_allowed+0x16>
        rc = 1;
   16a8a:	2001      	movs	r0, #1
    return rc;
   16a8c:	e7f9      	b.n	16a82 <ble_ll_resolv_list_chg_allowed+0xa>
        rc = 0;
   16a8e:	2000      	movs	r0, #0
   16a90:	e7f7      	b.n	16a82 <ble_ll_resolv_list_chg_allowed+0xa>
   16a92:	bf00      	nop
   16a94:	200041d8 	.word	0x200041d8

00016a98 <ble_ll_is_on_resolv_list>:
 * is the 'position' of the device in the resolving list (the index of the
 * element plus 1).
 */
static int
ble_ll_is_on_resolv_list(const uint8_t *addr, uint8_t addr_type)
{
   16a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16a9a:	4607      	mov	r7, r0
   16a9c:	460e      	mov	r6, r1
    int i;
    struct ble_ll_resolv_entry *rl;

    rl = &g_ble_ll_resolv_list[0];
   16a9e:	4c0c      	ldr	r4, [pc, #48]	; (16ad0 <ble_ll_is_on_resolv_list+0x38>)
    for (i = 0; i < g_ble_ll_resolv_data.rl_cnt; ++i) {
   16aa0:	2500      	movs	r5, #0
   16aa2:	e001      	b.n	16aa8 <ble_ll_is_on_resolv_list+0x10>
        if ((rl->rl_addr_type == addr_type) &&
            (!memcmp(&rl->rl_identity_addr[0], addr, BLE_DEV_ADDR_LEN))) {
            return i + 1;
        }
        ++rl;
   16aa4:	3436      	adds	r4, #54	; 0x36
    for (i = 0; i < g_ble_ll_resolv_data.rl_cnt; ++i) {
   16aa6:	3501      	adds	r5, #1
   16aa8:	4b0a      	ldr	r3, [pc, #40]	; (16ad4 <ble_ll_is_on_resolv_list+0x3c>)
   16aaa:	78db      	ldrb	r3, [r3, #3]
   16aac:	42ab      	cmp	r3, r5
   16aae:	dd0c      	ble.n	16aca <ble_ll_is_on_resolv_list+0x32>
        if ((rl->rl_addr_type == addr_type) &&
   16ab0:	7823      	ldrb	r3, [r4, #0]
   16ab2:	42b3      	cmp	r3, r6
   16ab4:	d1f6      	bne.n	16aa4 <ble_ll_is_on_resolv_list+0xc>
            (!memcmp(&rl->rl_identity_addr[0], addr, BLE_DEV_ADDR_LEN))) {
   16ab6:	2206      	movs	r2, #6
   16ab8:	4639      	mov	r1, r7
   16aba:	f104 0024 	add.w	r0, r4, #36	; 0x24
   16abe:	f7f7 fcb3 	bl	e428 <memcmp>
        if ((rl->rl_addr_type == addr_type) &&
   16ac2:	2800      	cmp	r0, #0
   16ac4:	d1ee      	bne.n	16aa4 <ble_ll_is_on_resolv_list+0xc>
            return i + 1;
   16ac6:	1c68      	adds	r0, r5, #1
   16ac8:	e000      	b.n	16acc <ble_ll_is_on_resolv_list+0x34>
    }

    return 0;
   16aca:	2000      	movs	r0, #0
}
   16acc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16ace:	bf00      	nop
   16ad0:	20004100 	.word	0x20004100
   16ad4:	200041d8 	.word	0x200041d8

00016ad8 <ble_ll_resolv_gen_priv_addr>:
{
   16ad8:	b570      	push	{r4, r5, r6, lr}
   16ada:	b08c      	sub	sp, #48	; 0x30
    BLE_LL_ASSERT(rl != NULL);
   16adc:	b350      	cbz	r0, 16b34 <ble_ll_resolv_gen_priv_addr+0x5c>
   16ade:	4605      	mov	r5, r0
    if (local) {
   16ae0:	bb91      	cbnz	r1, 16b48 <ble_ll_resolv_gen_priv_addr+0x70>
        addr = rl->rl_peer_rpa;
   16ae2:	f100 0430 	add.w	r4, r0, #48	; 0x30
        irk = rl->rl_peer_irk;
   16ae6:	3514      	adds	r5, #20
    ble_ll_rand_prand_get(prand);
   16ae8:	1ce0      	adds	r0, r4, #3
   16aea:	f7ff ff6d 	bl	169c8 <ble_ll_rand_prand_get>
    memcpy(ecb.key, irk, 16);
   16aee:	466e      	mov	r6, sp
   16af0:	6828      	ldr	r0, [r5, #0]
   16af2:	6869      	ldr	r1, [r5, #4]
   16af4:	68aa      	ldr	r2, [r5, #8]
   16af6:	68eb      	ldr	r3, [r5, #12]
   16af8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    memset(ecb.plain_text, 0, 13);
   16afa:	2300      	movs	r3, #0
   16afc:	9304      	str	r3, [sp, #16]
   16afe:	9305      	str	r3, [sp, #20]
   16b00:	9306      	str	r3, [sp, #24]
   16b02:	f88d 301c 	strb.w	r3, [sp, #28]
    ecb.plain_text[13] = prand[2];
   16b06:	7963      	ldrb	r3, [r4, #5]
   16b08:	f88d 301d 	strb.w	r3, [sp, #29]
    ecb.plain_text[14] = prand[1];
   16b0c:	7923      	ldrb	r3, [r4, #4]
   16b0e:	f88d 301e 	strb.w	r3, [sp, #30]
    ecb.plain_text[15] = prand[0];
   16b12:	78e3      	ldrb	r3, [r4, #3]
   16b14:	f88d 301f 	strb.w	r3, [sp, #31]
    ble_hw_encrypt_block(&ecb);
   16b18:	4668      	mov	r0, sp
   16b1a:	f002 fc59 	bl	193d0 <ble_hw_encrypt_block>
    addr[0] = ecb.cipher_text[15];
   16b1e:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   16b22:	7023      	strb	r3, [r4, #0]
    addr[1] = ecb.cipher_text[14];
   16b24:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
   16b28:	7063      	strb	r3, [r4, #1]
    addr[2] = ecb.cipher_text[13];
   16b2a:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   16b2e:	70a3      	strb	r3, [r4, #2]
}
   16b30:	b00c      	add	sp, #48	; 0x30
   16b32:	bd70      	pop	{r4, r5, r6, pc}
    BLE_LL_ASSERT(rl != NULL);
   16b34:	f7f5 fb58 	bl	c1e8 <hal_debugger_connected>
   16b38:	b100      	cbz	r0, 16b3c <ble_ll_resolv_gen_priv_addr+0x64>
   16b3a:	be01      	bkpt	0x0001
   16b3c:	2300      	movs	r3, #0
   16b3e:	461a      	mov	r2, r3
   16b40:	4619      	mov	r1, r3
   16b42:	4618      	mov	r0, r3
   16b44:	f7f5 fd8a 	bl	c65c <__assert_func>
        addr = rl->rl_local_rpa;
   16b48:	f100 042a 	add.w	r4, r0, #42	; 0x2a
        irk = rl->rl_local_irk;
   16b4c:	3504      	adds	r5, #4
   16b4e:	e7cb      	b.n	16ae8 <ble_ll_resolv_gen_priv_addr+0x10>

00016b50 <ble_ll_resolv_rpa_timer_cb>:
{
   16b50:	b570      	push	{r4, r5, r6, lr}
    rl = &g_ble_ll_resolv_list[0];
   16b52:	4c16      	ldr	r4, [pc, #88]	; (16bac <ble_ll_resolv_rpa_timer_cb+0x5c>)
    for (i = 0; i < g_ble_ll_resolv_data.rl_cnt; ++i) {
   16b54:	2500      	movs	r5, #0
   16b56:	e00c      	b.n	16b72 <ble_ll_resolv_rpa_timer_cb+0x22>
            OS_ENTER_CRITICAL(sr);
   16b58:	f7f6 fe4e 	bl	d7f8 <os_arch_save_sr>
   16b5c:	4606      	mov	r6, r0
            ble_ll_resolv_gen_priv_addr(rl, 1);
   16b5e:	2101      	movs	r1, #1
   16b60:	4620      	mov	r0, r4
   16b62:	f7ff ffb9 	bl	16ad8 <ble_ll_resolv_gen_priv_addr>
            OS_EXIT_CRITICAL(sr);
   16b66:	4630      	mov	r0, r6
   16b68:	f7f6 fe4c 	bl	d804 <os_arch_restore_sr>
   16b6c:	e008      	b.n	16b80 <ble_ll_resolv_rpa_timer_cb+0x30>
        ++rl;
   16b6e:	3436      	adds	r4, #54	; 0x36
    for (i = 0; i < g_ble_ll_resolv_data.rl_cnt; ++i) {
   16b70:	3501      	adds	r5, #1
   16b72:	4b0f      	ldr	r3, [pc, #60]	; (16bb0 <ble_ll_resolv_rpa_timer_cb+0x60>)
   16b74:	78db      	ldrb	r3, [r3, #3]
   16b76:	42ab      	cmp	r3, r5
   16b78:	dd10      	ble.n	16b9c <ble_ll_resolv_rpa_timer_cb+0x4c>
        if (rl->rl_has_local) {
   16b7a:	78a3      	ldrb	r3, [r4, #2]
   16b7c:	2b00      	cmp	r3, #0
   16b7e:	d1eb      	bne.n	16b58 <ble_ll_resolv_rpa_timer_cb+0x8>
        if (rl->rl_has_peer) {
   16b80:	78e3      	ldrb	r3, [r4, #3]
   16b82:	2b00      	cmp	r3, #0
   16b84:	d0f3      	beq.n	16b6e <ble_ll_resolv_rpa_timer_cb+0x1e>
            OS_ENTER_CRITICAL(sr);
   16b86:	f7f6 fe37 	bl	d7f8 <os_arch_save_sr>
   16b8a:	4606      	mov	r6, r0
            ble_ll_resolv_gen_priv_addr(rl, 0);
   16b8c:	2100      	movs	r1, #0
   16b8e:	4620      	mov	r0, r4
   16b90:	f7ff ffa2 	bl	16ad8 <ble_ll_resolv_gen_priv_addr>
            OS_EXIT_CRITICAL(sr);
   16b94:	4630      	mov	r0, r6
   16b96:	f7f6 fe35 	bl	d804 <os_arch_restore_sr>
   16b9a:	e7e8      	b.n	16b6e <ble_ll_resolv_rpa_timer_cb+0x1e>
    ble_npl_callout_reset(&g_ble_ll_resolv_data.rpa_timer,
   16b9c:	4804      	ldr	r0, [pc, #16]	; (16bb0 <ble_ll_resolv_rpa_timer_cb+0x60>)
    return (ble_npl_error_t)os_callout_reset(&co->co, ticks);
   16b9e:	6841      	ldr	r1, [r0, #4]
   16ba0:	3008      	adds	r0, #8
   16ba2:	f7f5 ff2f 	bl	ca04 <os_callout_reset>
    ble_ll_adv_rpa_timeout();
   16ba6:	f7fa fed7 	bl	11958 <ble_ll_adv_rpa_timeout>
}
   16baa:	bd70      	pop	{r4, r5, r6, pc}
   16bac:	20004100 	.word	0x20004100
   16bb0:	200041d8 	.word	0x200041d8

00016bb4 <ble_ll_resolv_list_clr>:
{
   16bb4:	b538      	push	{r3, r4, r5, lr}
    if (!ble_ll_resolv_list_chg_allowed()) {
   16bb6:	f7ff ff5f 	bl	16a78 <ble_ll_resolv_list_chg_allowed>
   16bba:	b158      	cbz	r0, 16bd4 <ble_ll_resolv_list_clr+0x20>
    g_ble_ll_resolv_data.rl_cnt_hw = 0;
   16bbc:	4d06      	ldr	r5, [pc, #24]	; (16bd8 <ble_ll_resolv_list_clr+0x24>)
   16bbe:	2400      	movs	r4, #0
   16bc0:	70ac      	strb	r4, [r5, #2]
    g_ble_ll_resolv_data.rl_cnt = 0;
   16bc2:	70ec      	strb	r4, [r5, #3]
    ble_hw_resolv_list_clear();
   16bc4:	f002 fc70 	bl	194a8 <ble_hw_resolv_list_clear>
    os_callout_stop(&co->co);
   16bc8:	f105 0008 	add.w	r0, r5, #8
   16bcc:	f7f5 fefc 	bl	c9c8 <os_callout_stop>
    return BLE_ERR_SUCCESS;
   16bd0:	4620      	mov	r0, r4
}
   16bd2:	bd38      	pop	{r3, r4, r5, pc}
        return BLE_ERR_CMD_DISALLOWED;
   16bd4:	200c      	movs	r0, #12
   16bd6:	e7fc      	b.n	16bd2 <ble_ll_resolv_list_clr+0x1e>
   16bd8:	200041d8 	.word	0x200041d8

00016bdc <ble_ll_resolv_list_read_size>:
    rsp->size = g_ble_ll_resolv_data.rl_size;
   16bdc:	4b03      	ldr	r3, [pc, #12]	; (16bec <ble_ll_resolv_list_read_size+0x10>)
   16bde:	785b      	ldrb	r3, [r3, #1]
   16be0:	7003      	strb	r3, [r0, #0]
    *rsplen = sizeof(*rsp);
   16be2:	2301      	movs	r3, #1
   16be4:	700b      	strb	r3, [r1, #0]
}
   16be6:	2000      	movs	r0, #0
   16be8:	4770      	bx	lr
   16bea:	bf00      	nop
   16bec:	200041d8 	.word	0x200041d8

00016bf0 <ble_ll_resolv_list_find>:
 *
 * @return Pointer to resolving list entry or NULL if no entry found.
 */
struct ble_ll_resolv_entry *
ble_ll_resolv_list_find(const uint8_t *addr, uint8_t addr_type)
{
   16bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16bf2:	4607      	mov	r7, r0
   16bf4:	460e      	mov	r6, r1
    int i;
    struct ble_ll_resolv_entry *rl;

    rl = &g_ble_ll_resolv_list[0];
   16bf6:	4c0c      	ldr	r4, [pc, #48]	; (16c28 <ble_ll_resolv_list_find+0x38>)
    for (i = 0; i < g_ble_ll_resolv_data.rl_cnt; ++i) {
   16bf8:	2500      	movs	r5, #0
   16bfa:	e001      	b.n	16c00 <ble_ll_resolv_list_find+0x10>
        if ((rl->rl_addr_type == addr_type) &&
            (!memcmp(&rl->rl_identity_addr[0], addr, BLE_DEV_ADDR_LEN))) {
            return rl;
        }
        ++rl;
   16bfc:	3436      	adds	r4, #54	; 0x36
    for (i = 0; i < g_ble_ll_resolv_data.rl_cnt; ++i) {
   16bfe:	3501      	adds	r5, #1
   16c00:	4b0a      	ldr	r3, [pc, #40]	; (16c2c <ble_ll_resolv_list_find+0x3c>)
   16c02:	78db      	ldrb	r3, [r3, #3]
   16c04:	42ab      	cmp	r3, r5
   16c06:	dd0b      	ble.n	16c20 <ble_ll_resolv_list_find+0x30>
        if ((rl->rl_addr_type == addr_type) &&
   16c08:	7823      	ldrb	r3, [r4, #0]
   16c0a:	42b3      	cmp	r3, r6
   16c0c:	d1f6      	bne.n	16bfc <ble_ll_resolv_list_find+0xc>
            (!memcmp(&rl->rl_identity_addr[0], addr, BLE_DEV_ADDR_LEN))) {
   16c0e:	2206      	movs	r2, #6
   16c10:	4639      	mov	r1, r7
   16c12:	f104 0024 	add.w	r0, r4, #36	; 0x24
   16c16:	f7f7 fc07 	bl	e428 <memcmp>
        if ((rl->rl_addr_type == addr_type) &&
   16c1a:	2800      	cmp	r0, #0
   16c1c:	d1ee      	bne.n	16bfc <ble_ll_resolv_list_find+0xc>
   16c1e:	e000      	b.n	16c22 <ble_ll_resolv_list_find+0x32>
    }

    return NULL;
   16c20:	2400      	movs	r4, #0
}
   16c22:	4620      	mov	r0, r4
   16c24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16c26:	bf00      	nop
   16c28:	20004100 	.word	0x20004100
   16c2c:	200041d8 	.word	0x200041d8

00016c30 <ble_ll_resolv_list_add>:
 *
 * @return int
 */
int
ble_ll_resolv_list_add(const uint8_t *cmdbuf, uint8_t len)
{
   16c30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    const struct ble_hci_le_add_resolv_list_cp *cmd = (const void *) cmdbuf;
    struct ble_ll_resolv_entry *rl;
    int rc = BLE_ERR_SUCCESS;

    if (len != sizeof(*cmd)) {
   16c34:	2927      	cmp	r1, #39	; 0x27
   16c36:	d003      	beq.n	16c40 <ble_ll_resolv_list_add+0x10>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   16c38:	2512      	movs	r5, #18
        ble_npl_callout_reset(&g_ble_ll_resolv_data.rpa_timer,
                              g_ble_ll_resolv_data.rpa_tmo);
    }

    return rc;
}
   16c3a:	4628      	mov	r0, r5
   16c3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   16c40:	4604      	mov	r4, r0
    if (!ble_ll_resolv_list_chg_allowed()) {
   16c42:	f7ff ff19 	bl	16a78 <ble_ll_resolv_list_chg_allowed>
   16c46:	2800      	cmp	r0, #0
   16c48:	d07d      	beq.n	16d46 <ble_ll_resolv_list_add+0x116>
    if (g_ble_ll_resolv_data.rl_cnt >= g_ble_ll_resolv_data.rl_size) {
   16c4a:	4b42      	ldr	r3, [pc, #264]	; (16d54 <ble_ll_resolv_list_add+0x124>)
   16c4c:	78df      	ldrb	r7, [r3, #3]
   16c4e:	785b      	ldrb	r3, [r3, #1]
   16c50:	429f      	cmp	r7, r3
   16c52:	d27a      	bcs.n	16d4a <ble_ll_resolv_list_add+0x11a>
    if (ble_ll_is_on_resolv_list(cmd->peer_id_addr, cmd->peer_addr_type)) {
   16c54:	f104 0801 	add.w	r8, r4, #1
   16c58:	7821      	ldrb	r1, [r4, #0]
   16c5a:	4640      	mov	r0, r8
   16c5c:	f7ff ff1c 	bl	16a98 <ble_ll_is_on_resolv_list>
   16c60:	4605      	mov	r5, r0
   16c62:	2800      	cmp	r0, #0
   16c64:	d173      	bne.n	16d4e <ble_ll_resolv_list_add+0x11e>
    if (ble_ll_resolv_irk_nonzero(cmd->peer_irk)) {
   16c66:	f104 0907 	add.w	r9, r4, #7
   16c6a:	4648      	mov	r0, r9
   16c6c:	f7ff fee2 	bl	16a34 <ble_ll_resolv_irk_nonzero>
   16c70:	bb60      	cbnz	r0, 16ccc <ble_ll_resolv_list_add+0x9c>
        rl = &g_ble_ll_resolv_list[g_ble_ll_resolv_data.rl_cnt];
   16c72:	2636      	movs	r6, #54	; 0x36
   16c74:	4b38      	ldr	r3, [pc, #224]	; (16d58 <ble_ll_resolv_list_add+0x128>)
   16c76:	fb06 3607 	mla	r6, r6, r7, r3
    memset (rl, 0, sizeof(*rl));
   16c7a:	2236      	movs	r2, #54	; 0x36
   16c7c:	2100      	movs	r1, #0
   16c7e:	4630      	mov	r0, r6
   16c80:	f7f7 fc1e 	bl	e4c0 <memset>
    rl->rl_addr_type = cmd->peer_addr_type;
   16c84:	7822      	ldrb	r2, [r4, #0]
   16c86:	4633      	mov	r3, r6
   16c88:	f803 2b24 	strb.w	r2, [r3], #36
    memcpy(rl->rl_identity_addr, cmd->peer_id_addr, BLE_DEV_ADDR_LEN);
   16c8c:	f8d8 2000 	ldr.w	r2, [r8]
   16c90:	6272      	str	r2, [r6, #36]	; 0x24
   16c92:	f8b8 2004 	ldrh.w	r2, [r8, #4]
   16c96:	809a      	strh	r2, [r3, #4]
    if (ble_ll_resolv_irk_nonzero(cmd->peer_irk)) {
   16c98:	4648      	mov	r0, r9
   16c9a:	f7ff fecb 	bl	16a34 <ble_ll_resolv_irk_nonzero>
   16c9e:	bb28      	cbnz	r0, 16cec <ble_ll_resolv_list_add+0xbc>
    if (ble_ll_resolv_irk_nonzero(cmd->local_irk)) {
   16ca0:	3417      	adds	r4, #23
   16ca2:	4620      	mov	r0, r4
   16ca4:	f7ff fec6 	bl	16a34 <ble_ll_resolv_irk_nonzero>
   16ca8:	bb68      	cbnz	r0, 16d06 <ble_ll_resolv_list_add+0xd6>
    rl->rl_priv_mode = BLE_HCI_PRIVACY_NETWORK;
   16caa:	2300      	movs	r3, #0
   16cac:	7073      	strb	r3, [r6, #1]
    if (rl->rl_has_peer) {
   16cae:	78f3      	ldrb	r3, [r6, #3]
   16cb0:	bba3      	cbnz	r3, 16d1c <ble_ll_resolv_list_add+0xec>
    g_ble_ll_resolv_data.rl_cnt++;
   16cb2:	4a28      	ldr	r2, [pc, #160]	; (16d54 <ble_ll_resolv_list_add+0x124>)
   16cb4:	78d3      	ldrb	r3, [r2, #3]
   16cb6:	3301      	adds	r3, #1
   16cb8:	b2db      	uxtb	r3, r3
   16cba:	70d3      	strb	r3, [r2, #3]
    if (g_ble_ll_resolv_data.rl_cnt == 1) {
   16cbc:	2b01      	cmp	r3, #1
   16cbe:	d1bc      	bne.n	16c3a <ble_ll_resolv_list_add+0xa>
        ble_npl_callout_reset(&g_ble_ll_resolv_data.rpa_timer,
   16cc0:	4610      	mov	r0, r2
    return (ble_npl_error_t)os_callout_reset(&co->co, ticks);
   16cc2:	6851      	ldr	r1, [r2, #4]
   16cc4:	3008      	adds	r0, #8
   16cc6:	f7f5 fe9d 	bl	ca04 <os_callout_reset>
   16cca:	e7b6      	b.n	16c3a <ble_ll_resolv_list_add+0xa>
        memmove(&g_ble_ll_resolv_list[g_ble_ll_resolv_data.rl_cnt_hw + 1],
   16ccc:	4b21      	ldr	r3, [pc, #132]	; (16d54 <ble_ll_resolv_list_add+0x124>)
   16cce:	789b      	ldrb	r3, [r3, #2]
   16cd0:	2236      	movs	r2, #54	; 0x36
   16cd2:	fb03 2c02 	mla	ip, r3, r2, r2
   16cd6:	4820      	ldr	r0, [pc, #128]	; (16d58 <ble_ll_resolv_list_add+0x128>)
                &g_ble_ll_resolv_list[g_ble_ll_resolv_data.rl_cnt_hw],
   16cd8:	fb02 0603 	mla	r6, r2, r3, r0
                (g_ble_ll_resolv_data.rl_cnt - g_ble_ll_resolv_data.rl_cnt_hw) *
   16cdc:	1aff      	subs	r7, r7, r3
        memmove(&g_ble_ll_resolv_list[g_ble_ll_resolv_data.rl_cnt_hw + 1],
   16cde:	fb02 f207 	mul.w	r2, r2, r7
   16ce2:	4631      	mov	r1, r6
   16ce4:	4460      	add	r0, ip
   16ce6:	f7f7 fbd0 	bl	e48a <memmove>
   16cea:	e7c6      	b.n	16c7a <ble_ll_resolv_list_add+0x4a>
        swap_buf(rl->rl_peer_irk, cmd->peer_irk, 16);
   16cec:	2210      	movs	r2, #16
   16cee:	4649      	mov	r1, r9
   16cf0:	f106 0014 	add.w	r0, r6, #20
   16cf4:	f012 fdb1 	bl	2985a <swap_buf>
        rl->rl_has_peer = 1;
   16cf8:	2301      	movs	r3, #1
   16cfa:	70f3      	strb	r3, [r6, #3]
        ble_ll_resolv_gen_priv_addr(rl, 0);
   16cfc:	2100      	movs	r1, #0
   16cfe:	4630      	mov	r0, r6
   16d00:	f7ff feea 	bl	16ad8 <ble_ll_resolv_gen_priv_addr>
   16d04:	e7cc      	b.n	16ca0 <ble_ll_resolv_list_add+0x70>
        swap_buf(rl->rl_local_irk, cmd->local_irk, 16);
   16d06:	2210      	movs	r2, #16
   16d08:	4621      	mov	r1, r4
   16d0a:	1d30      	adds	r0, r6, #4
   16d0c:	f012 fda5 	bl	2985a <swap_buf>
        rl->rl_has_local = 1;
   16d10:	2101      	movs	r1, #1
   16d12:	70b1      	strb	r1, [r6, #2]
        ble_ll_resolv_gen_priv_addr(rl, 1);
   16d14:	4630      	mov	r0, r6
   16d16:	f7ff fedf 	bl	16ad8 <ble_ll_resolv_gen_priv_addr>
   16d1a:	e7c6      	b.n	16caa <ble_ll_resolv_list_add+0x7a>
        rc = ble_hw_resolv_list_add(rl->rl_peer_irk);
   16d1c:	f106 0014 	add.w	r0, r6, #20
   16d20:	f002 fbc8 	bl	194b4 <ble_hw_resolv_list_add>
        BLE_LL_ASSERT(rc == BLE_ERR_SUCCESS);
   16d24:	4605      	mov	r5, r0
   16d26:	b920      	cbnz	r0, 16d32 <ble_ll_resolv_list_add+0x102>
        g_ble_ll_resolv_data.rl_cnt_hw++;
   16d28:	4a0a      	ldr	r2, [pc, #40]	; (16d54 <ble_ll_resolv_list_add+0x124>)
   16d2a:	7893      	ldrb	r3, [r2, #2]
   16d2c:	3301      	adds	r3, #1
   16d2e:	7093      	strb	r3, [r2, #2]
   16d30:	e7bf      	b.n	16cb2 <ble_ll_resolv_list_add+0x82>
        BLE_LL_ASSERT(rc == BLE_ERR_SUCCESS);
   16d32:	f7f5 fa59 	bl	c1e8 <hal_debugger_connected>
   16d36:	b100      	cbz	r0, 16d3a <ble_ll_resolv_list_add+0x10a>
   16d38:	be01      	bkpt	0x0001
   16d3a:	2300      	movs	r3, #0
   16d3c:	461a      	mov	r2, r3
   16d3e:	4619      	mov	r1, r3
   16d40:	4618      	mov	r0, r3
   16d42:	f7f5 fc8b 	bl	c65c <__assert_func>
        return BLE_ERR_CMD_DISALLOWED;
   16d46:	250c      	movs	r5, #12
   16d48:	e777      	b.n	16c3a <ble_ll_resolv_list_add+0xa>
        return BLE_ERR_MEM_CAPACITY;
   16d4a:	2507      	movs	r5, #7
   16d4c:	e775      	b.n	16c3a <ble_ll_resolv_list_add+0xa>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   16d4e:	2512      	movs	r5, #18
   16d50:	e773      	b.n	16c3a <ble_ll_resolv_list_add+0xa>
   16d52:	bf00      	nop
   16d54:	200041d8 	.word	0x200041d8
   16d58:	20004100 	.word	0x20004100

00016d5c <ble_ll_resolv_list_rmv>:
ble_ll_resolv_list_rmv(const uint8_t *cmdbuf, uint8_t len)
{
    const struct ble_hci_le_rmv_resolve_list_cp *cmd = (const void *) cmdbuf;
    int position;

    if (len != sizeof(*cmd)) {
   16d5c:	2907      	cmp	r1, #7
   16d5e:	d001      	beq.n	16d64 <ble_ll_resolv_list_rmv+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   16d60:	2012      	movs	r0, #18

        return BLE_ERR_SUCCESS;
    }

    return BLE_ERR_UNK_CONN_ID;
}
   16d62:	4770      	bx	lr
{
   16d64:	b570      	push	{r4, r5, r6, lr}
   16d66:	4604      	mov	r4, r0
    if (!ble_ll_resolv_list_chg_allowed()) {
   16d68:	f7ff fe86 	bl	16a78 <ble_ll_resolv_list_chg_allowed>
   16d6c:	2800      	cmp	r0, #0
   16d6e:	d037      	beq.n	16de0 <ble_ll_resolv_list_rmv+0x84>
    position = ble_ll_is_on_resolv_list(cmd->peer_id_addr, cmd->peer_addr_type);
   16d70:	7821      	ldrb	r1, [r4, #0]
   16d72:	1c60      	adds	r0, r4, #1
   16d74:	f7ff fe90 	bl	16a98 <ble_ll_is_on_resolv_list>
    if (position) {
   16d78:	4604      	mov	r4, r0
   16d7a:	b398      	cbz	r0, 16de4 <ble_ll_resolv_list_rmv+0x88>
        BLE_LL_ASSERT(position <= g_ble_ll_resolv_data.rl_cnt);
   16d7c:	4b1a      	ldr	r3, [pc, #104]	; (16de8 <ble_ll_resolv_list_rmv+0x8c>)
   16d7e:	78dd      	ldrb	r5, [r3, #3]
   16d80:	4285      	cmp	r5, r0
   16d82:	db16      	blt.n	16db2 <ble_ll_resolv_list_rmv+0x56>
        memmove(&g_ble_ll_resolv_list[position - 1],
   16d84:	1e46      	subs	r6, r0, #1
   16d86:	2336      	movs	r3, #54	; 0x36
   16d88:	4818      	ldr	r0, [pc, #96]	; (16dec <ble_ll_resolv_list_rmv+0x90>)
                (g_ble_ll_resolv_data.rl_cnt - position) *
   16d8a:	1b2a      	subs	r2, r5, r4
        memmove(&g_ble_ll_resolv_list[position - 1],
   16d8c:	fb03 f202 	mul.w	r2, r3, r2
   16d90:	fb03 0104 	mla	r1, r3, r4, r0
   16d94:	fb03 0006 	mla	r0, r3, r6, r0
   16d98:	f7f7 fb77 	bl	e48a <memmove>
        g_ble_ll_resolv_data.rl_cnt--;
   16d9c:	4b12      	ldr	r3, [pc, #72]	; (16de8 <ble_ll_resolv_list_rmv+0x8c>)
   16d9e:	3d01      	subs	r5, #1
   16da0:	70dd      	strb	r5, [r3, #3]
        if (position <= g_ble_ll_resolv_data.rl_cnt_hw) {
   16da2:	789b      	ldrb	r3, [r3, #2]
   16da4:	42a3      	cmp	r3, r4
   16da6:	da0e      	bge.n	16dc6 <ble_ll_resolv_list_rmv+0x6a>
        if (g_ble_ll_resolv_data.rl_cnt == 0) {
   16da8:	4b0f      	ldr	r3, [pc, #60]	; (16de8 <ble_ll_resolv_list_rmv+0x8c>)
   16daa:	78db      	ldrb	r3, [r3, #3]
   16dac:	b19b      	cbz	r3, 16dd6 <ble_ll_resolv_list_rmv+0x7a>
        return BLE_ERR_SUCCESS;
   16dae:	2000      	movs	r0, #0
   16db0:	e017      	b.n	16de2 <ble_ll_resolv_list_rmv+0x86>
        BLE_LL_ASSERT(position <= g_ble_ll_resolv_data.rl_cnt);
   16db2:	f7f5 fa19 	bl	c1e8 <hal_debugger_connected>
   16db6:	b100      	cbz	r0, 16dba <ble_ll_resolv_list_rmv+0x5e>
   16db8:	be01      	bkpt	0x0001
   16dba:	2300      	movs	r3, #0
   16dbc:	461a      	mov	r2, r3
   16dbe:	4619      	mov	r1, r3
   16dc0:	4618      	mov	r0, r3
   16dc2:	f7f5 fc4b 	bl	c65c <__assert_func>
            ble_hw_resolv_list_rmv(position - 1);
   16dc6:	4630      	mov	r0, r6
   16dc8:	f002 fb90 	bl	194ec <ble_hw_resolv_list_rmv>
            g_ble_ll_resolv_data.rl_cnt_hw--;
   16dcc:	4a06      	ldr	r2, [pc, #24]	; (16de8 <ble_ll_resolv_list_rmv+0x8c>)
   16dce:	7893      	ldrb	r3, [r2, #2]
   16dd0:	3b01      	subs	r3, #1
   16dd2:	7093      	strb	r3, [r2, #2]
   16dd4:	e7e8      	b.n	16da8 <ble_ll_resolv_list_rmv+0x4c>
    os_callout_stop(&co->co);
   16dd6:	4806      	ldr	r0, [pc, #24]	; (16df0 <ble_ll_resolv_list_rmv+0x94>)
   16dd8:	f7f5 fdf6 	bl	c9c8 <os_callout_stop>
        return BLE_ERR_SUCCESS;
   16ddc:	2000      	movs	r0, #0
   16dde:	e000      	b.n	16de2 <ble_ll_resolv_list_rmv+0x86>
        return BLE_ERR_CMD_DISALLOWED;
   16de0:	200c      	movs	r0, #12
}
   16de2:	bd70      	pop	{r4, r5, r6, pc}
    return BLE_ERR_UNK_CONN_ID;
   16de4:	2002      	movs	r0, #2
   16de6:	e7fc      	b.n	16de2 <ble_ll_resolv_list_rmv+0x86>
   16de8:	200041d8 	.word	0x200041d8
   16dec:	20004100 	.word	0x20004100
   16df0:	200041e0 	.word	0x200041e0

00016df4 <ble_ll_resolv_enable_cmd>:
int
ble_ll_resolv_enable_cmd(const uint8_t *cmdbuf, uint8_t len)
{
    const struct ble_hci_le_set_addr_res_en_cp *cmd = (const void *) cmdbuf;

    if (len != sizeof(*cmd)) {
   16df4:	2901      	cmp	r1, #1
   16df6:	d002      	beq.n	16dfe <ble_ll_resolv_enable_cmd+0xa>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   16df8:	2312      	movs	r3, #18
    }

    g_ble_ll_resolv_data.addr_res_enabled = cmd->enable;

    return BLE_ERR_SUCCESS;
}
   16dfa:	4618      	mov	r0, r3
   16dfc:	4770      	bx	lr
{
   16dfe:	b510      	push	{r4, lr}
   16e00:	4604      	mov	r4, r0
    if (ble_ll_is_controller_busy()) {
   16e02:	f7ff fe23 	bl	16a4c <ble_ll_is_controller_busy>
   16e06:	4603      	mov	r3, r0
   16e08:	b930      	cbnz	r0, 16e18 <ble_ll_resolv_enable_cmd+0x24>
    if (cmd->enable > 1) {
   16e0a:	7822      	ldrb	r2, [r4, #0]
   16e0c:	2a01      	cmp	r2, #1
   16e0e:	d805      	bhi.n	16e1c <ble_ll_resolv_enable_cmd+0x28>
    g_ble_ll_resolv_data.addr_res_enabled = cmd->enable;
   16e10:	4903      	ldr	r1, [pc, #12]	; (16e20 <ble_ll_resolv_enable_cmd+0x2c>)
   16e12:	700a      	strb	r2, [r1, #0]
}
   16e14:	4618      	mov	r0, r3
   16e16:	bd10      	pop	{r4, pc}
        return  BLE_ERR_CMD_DISALLOWED;
   16e18:	230c      	movs	r3, #12
   16e1a:	e7fb      	b.n	16e14 <ble_ll_resolv_enable_cmd+0x20>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   16e1c:	2312      	movs	r3, #18
   16e1e:	e7f9      	b.n	16e14 <ble_ll_resolv_enable_cmd+0x20>
   16e20:	200041d8 	.word	0x200041d8

00016e24 <ble_ll_resolv_peer_addr_rd>:
    const struct ble_hci_le_rd_peer_recolv_addr_cp *cmd = (const void *) cmdbuf;
    struct ble_hci_le_rd_peer_recolv_addr_rp *rsp = (void *) rspbuf;
    struct ble_ll_resolv_entry *rl;
    int rc;

    if (len != sizeof(*cmd)) {
   16e24:	2907      	cmp	r1, #7
   16e26:	d001      	beq.n	16e2c <ble_ll_resolv_peer_addr_rd+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   16e28:	2012      	movs	r0, #18
        rc = BLE_ERR_UNK_CONN_ID;
    }

    *rsplen = sizeof(*rsp);
    return rc;
}
   16e2a:	4770      	bx	lr
{
   16e2c:	b538      	push	{r3, r4, r5, lr}
   16e2e:	461d      	mov	r5, r3
   16e30:	4614      	mov	r4, r2
    rl = ble_ll_resolv_list_find(cmd->peer_id_addr, cmd->peer_addr_type);
   16e32:	7801      	ldrb	r1, [r0, #0]
   16e34:	3001      	adds	r0, #1
   16e36:	f7ff fedb 	bl	16bf0 <ble_ll_resolv_list_find>
    if (rl) {
   16e3a:	b140      	cbz	r0, 16e4e <ble_ll_resolv_peer_addr_rd+0x2a>
        memcpy(rsp->rpa, rl->rl_peer_rpa, BLE_DEV_ADDR_LEN);
   16e3c:	f850 3f30 	ldr.w	r3, [r0, #48]!
   16e40:	6023      	str	r3, [r4, #0]
   16e42:	8883      	ldrh	r3, [r0, #4]
   16e44:	80a3      	strh	r3, [r4, #4]
        rc = BLE_ERR_SUCCESS;
   16e46:	2000      	movs	r0, #0
    *rsplen = sizeof(*rsp);
   16e48:	2306      	movs	r3, #6
   16e4a:	702b      	strb	r3, [r5, #0]
}
   16e4c:	bd38      	pop	{r3, r4, r5, pc}
        memset(rsp->rpa, 0, BLE_DEV_ADDR_LEN);
   16e4e:	2300      	movs	r3, #0
   16e50:	6023      	str	r3, [r4, #0]
   16e52:	80a3      	strh	r3, [r4, #4]
        rc = BLE_ERR_UNK_CONN_ID;
   16e54:	2002      	movs	r0, #2
   16e56:	e7f7      	b.n	16e48 <ble_ll_resolv_peer_addr_rd+0x24>

00016e58 <ble_ll_resolv_local_addr_rd>:
    const struct ble_hci_le_rd_local_recolv_addr_cp *cmd = (const void *) cmdbuf;
    struct ble_hci_le_rd_local_recolv_addr_rp *rsp = (void *) rspbuf;
    struct ble_ll_resolv_entry *rl;
    int rc;

    if (len != sizeof(*cmd)) {
   16e58:	2907      	cmp	r1, #7
   16e5a:	d001      	beq.n	16e60 <ble_ll_resolv_local_addr_rd+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   16e5c:	2012      	movs	r0, #18
        rc = BLE_ERR_UNK_CONN_ID;
    }

    *rsplen = sizeof(*rsp);
    return rc;
}
   16e5e:	4770      	bx	lr
{
   16e60:	b538      	push	{r3, r4, r5, lr}
   16e62:	461d      	mov	r5, r3
   16e64:	4614      	mov	r4, r2
    rl = ble_ll_resolv_list_find(cmd->peer_id_addr, cmd->peer_addr_type);
   16e66:	7801      	ldrb	r1, [r0, #0]
   16e68:	3001      	adds	r0, #1
   16e6a:	f7ff fec1 	bl	16bf0 <ble_ll_resolv_list_find>
    if (rl) {
   16e6e:	b140      	cbz	r0, 16e82 <ble_ll_resolv_local_addr_rd+0x2a>
        memcpy(rsp->rpa, rl->rl_local_rpa, BLE_DEV_ADDR_LEN);
   16e70:	f850 3f2a 	ldr.w	r3, [r0, #42]!
   16e74:	6023      	str	r3, [r4, #0]
   16e76:	8883      	ldrh	r3, [r0, #4]
   16e78:	80a3      	strh	r3, [r4, #4]
        rc = BLE_ERR_SUCCESS;
   16e7a:	2000      	movs	r0, #0
    *rsplen = sizeof(*rsp);
   16e7c:	2306      	movs	r3, #6
   16e7e:	702b      	strb	r3, [r5, #0]
}
   16e80:	bd38      	pop	{r3, r4, r5, pc}
        memset(rsp->rpa, 0, BLE_DEV_ADDR_LEN);
   16e82:	2300      	movs	r3, #0
   16e84:	6023      	str	r3, [r4, #0]
   16e86:	80a3      	strh	r3, [r4, #4]
        rc = BLE_ERR_UNK_CONN_ID;
   16e88:	2002      	movs	r0, #2
   16e8a:	e7f7      	b.n	16e7c <ble_ll_resolv_local_addr_rd+0x24>

00016e8c <ble_ll_resolv_set_rpa_tmo>:
ble_ll_resolv_set_rpa_tmo(const uint8_t *cmdbuf, uint8_t len)
{
    const struct ble_hci_le_set_rpa_tmo_cp *cmd = (const void *)cmdbuf;
    uint16_t tmo_secs;

    if (len != sizeof(*cmd)) {
   16e8c:	2902      	cmp	r1, #2
   16e8e:	d11e      	bne.n	16ece <ble_ll_resolv_set_rpa_tmo+0x42>
{
   16e90:	b508      	push	{r3, lr}
        return BLE_ERR_INV_HCI_CMD_PARMS;
    }

    tmo_secs = le16toh(cmd->rpa_timeout);
   16e92:	8802      	ldrh	r2, [r0, #0]
    if (!((tmo_secs > 0) && (tmo_secs <= 0xA1B8))) {
   16e94:	1e53      	subs	r3, r2, #1
   16e96:	b29b      	uxth	r3, r3
   16e98:	f24a 11b7 	movw	r1, #41399	; 0xa1b7
   16e9c:	428b      	cmp	r3, r1
   16e9e:	d818      	bhi.n	16ed2 <ble_ll_resolv_set_rpa_tmo+0x46>
        return BLE_ERR_INV_HCI_CMD_PARMS;
    }

    g_ble_ll_resolv_data.rpa_tmo = ble_npl_time_ms_to_ticks32(tmo_secs * 1000);
   16ea0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   16ea4:	fb01 f102 	mul.w	r1, r1, r2
   16ea8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   16eac:	2300      	movs	r3, #0
   16eae:	01c8      	lsls	r0, r1, #7
   16eb0:	0e49      	lsrs	r1, r1, #25
   16eb2:	f013 fd4b 	bl	2a94c <__aeabi_uldivmod>
   16eb6:	4b08      	ldr	r3, [pc, #32]	; (16ed8 <ble_ll_resolv_set_rpa_tmo+0x4c>)
   16eb8:	6058      	str	r0, [r3, #4]

    /* restart timer if there is something on RL */
    if (g_ble_ll_resolv_data.rl_cnt) {
   16eba:	78db      	ldrb	r3, [r3, #3]
   16ebc:	b90b      	cbnz	r3, 16ec2 <ble_ll_resolv_set_rpa_tmo+0x36>
        ble_npl_callout_reset(&g_ble_ll_resolv_data.rpa_timer,
                              g_ble_ll_resolv_data.rpa_tmo);
    }

    return BLE_ERR_SUCCESS;
   16ebe:	2000      	movs	r0, #0
}
   16ec0:	bd08      	pop	{r3, pc}
    return (ble_npl_error_t)os_callout_reset(&co->co, ticks);
   16ec2:	4601      	mov	r1, r0
   16ec4:	4805      	ldr	r0, [pc, #20]	; (16edc <ble_ll_resolv_set_rpa_tmo+0x50>)
   16ec6:	f7f5 fd9d 	bl	ca04 <os_callout_reset>
    return BLE_ERR_SUCCESS;
   16eca:	2000      	movs	r0, #0
   16ecc:	e7f8      	b.n	16ec0 <ble_ll_resolv_set_rpa_tmo+0x34>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   16ece:	2012      	movs	r0, #18
}
   16ed0:	4770      	bx	lr
        return BLE_ERR_INV_HCI_CMD_PARMS;
   16ed2:	2012      	movs	r0, #18
   16ed4:	e7f4      	b.n	16ec0 <ble_ll_resolv_set_rpa_tmo+0x34>
   16ed6:	bf00      	nop
   16ed8:	200041d8 	.word	0x200041d8
   16edc:	200041e0 	.word	0x200041e0

00016ee0 <ble_ll_resolve_set_priv_mode>:

int
ble_ll_resolve_set_priv_mode(const uint8_t *cmdbuf, uint8_t len)
{
   16ee0:	b570      	push	{r4, r5, r6, lr}
   16ee2:	4605      	mov	r5, r0
   16ee4:	460e      	mov	r6, r1
    const struct ble_hci_le_set_privacy_mode_cp *cmd = (const void *) cmdbuf;
    struct ble_ll_resolv_entry *rl;

    if (ble_ll_is_controller_busy()) {
   16ee6:	f7ff fdb1 	bl	16a4c <ble_ll_is_controller_busy>
   16eea:	b978      	cbnz	r0, 16f0c <ble_ll_resolve_set_priv_mode+0x2c>
   16eec:	4604      	mov	r4, r0
        return BLE_ERR_CMD_DISALLOWED;
    }

    if (len != sizeof(*cmd)) {
   16eee:	2e08      	cmp	r6, #8
   16ef0:	d002      	beq.n	16ef8 <ble_ll_resolve_set_priv_mode+0x18>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   16ef2:	2412      	movs	r4, #18
    }

    rl->rl_priv_mode = cmd->mode;

    return BLE_ERR_SUCCESS;
}
   16ef4:	4620      	mov	r0, r4
   16ef6:	bd70      	pop	{r4, r5, r6, pc}
    rl = ble_ll_resolv_list_find(cmd->peer_id_addr, cmd->peer_id_addr_type);
   16ef8:	7829      	ldrb	r1, [r5, #0]
   16efa:	1c68      	adds	r0, r5, #1
   16efc:	f7ff fe78 	bl	16bf0 <ble_ll_resolv_list_find>
    if (!rl) {
   16f00:	b130      	cbz	r0, 16f10 <ble_ll_resolve_set_priv_mode+0x30>
    if (cmd->mode > BLE_HCI_PRIVACY_DEVICE) {
   16f02:	79eb      	ldrb	r3, [r5, #7]
   16f04:	2b01      	cmp	r3, #1
   16f06:	d805      	bhi.n	16f14 <ble_ll_resolve_set_priv_mode+0x34>
    rl->rl_priv_mode = cmd->mode;
   16f08:	7043      	strb	r3, [r0, #1]
    return BLE_ERR_SUCCESS;
   16f0a:	e7f3      	b.n	16ef4 <ble_ll_resolve_set_priv_mode+0x14>
        return BLE_ERR_CMD_DISALLOWED;
   16f0c:	240c      	movs	r4, #12
   16f0e:	e7f1      	b.n	16ef4 <ble_ll_resolve_set_priv_mode+0x14>
        return BLE_ERR_UNK_CONN_ID;
   16f10:	2402      	movs	r4, #2
   16f12:	e7ef      	b.n	16ef4 <ble_ll_resolve_set_priv_mode+0x14>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   16f14:	2412      	movs	r4, #18
   16f16:	e7ed      	b.n	16ef4 <ble_ll_resolve_set_priv_mode+0x14>

00016f18 <ble_ll_resolv_get_rpa_tmo>:
 */
uint32_t
ble_ll_resolv_get_rpa_tmo(void)
{
    return g_ble_ll_resolv_data.rpa_tmo;
}
   16f18:	4b01      	ldr	r3, [pc, #4]	; (16f20 <ble_ll_resolv_get_rpa_tmo+0x8>)
   16f1a:	6858      	ldr	r0, [r3, #4]
   16f1c:	4770      	bx	lr
   16f1e:	bf00      	nop
   16f20:	200041d8 	.word	0x200041d8

00016f24 <ble_ll_resolv_get_priv_addr>:

void
ble_ll_resolv_get_priv_addr(struct ble_ll_resolv_entry *rl, int local,
                            uint8_t *addr)
{
   16f24:	b570      	push	{r4, r5, r6, lr}
    os_sr_t sr;

    BLE_LL_ASSERT(rl != NULL);
   16f26:	b180      	cbz	r0, 16f4a <ble_ll_resolv_get_priv_addr+0x26>
   16f28:	460e      	mov	r6, r1
   16f2a:	4615      	mov	r5, r2
   16f2c:	4604      	mov	r4, r0
    BLE_LL_ASSERT(addr != NULL);
   16f2e:	b1b2      	cbz	r2, 16f5e <ble_ll_resolv_get_priv_addr+0x3a>

    OS_ENTER_CRITICAL(sr);
   16f30:	f7f6 fc62 	bl	d7f8 <os_arch_save_sr>
    if (local) {
   16f34:	b33e      	cbz	r6, 16f86 <ble_ll_resolv_get_priv_addr+0x62>
        BLE_LL_ASSERT(rl->rl_has_local);
   16f36:	78a3      	ldrb	r3, [r4, #2]
   16f38:	b1db      	cbz	r3, 16f72 <ble_ll_resolv_get_priv_addr+0x4e>
        memcpy(addr, rl->rl_local_rpa, BLE_DEV_ADDR_LEN);
   16f3a:	f854 3f2a 	ldr.w	r3, [r4, #42]!
   16f3e:	602b      	str	r3, [r5, #0]
   16f40:	88a3      	ldrh	r3, [r4, #4]
   16f42:	80ab      	strh	r3, [r5, #4]
    } else {
        BLE_LL_ASSERT(rl->rl_has_peer);
        memcpy(addr, rl->rl_peer_rpa, BLE_DEV_ADDR_LEN);
    }

    OS_EXIT_CRITICAL(sr);
   16f44:	f7f6 fc5e 	bl	d804 <os_arch_restore_sr>
}
   16f48:	bd70      	pop	{r4, r5, r6, pc}
    BLE_LL_ASSERT(rl != NULL);
   16f4a:	f7f5 f94d 	bl	c1e8 <hal_debugger_connected>
   16f4e:	b100      	cbz	r0, 16f52 <ble_ll_resolv_get_priv_addr+0x2e>
   16f50:	be01      	bkpt	0x0001
   16f52:	2300      	movs	r3, #0
   16f54:	461a      	mov	r2, r3
   16f56:	4619      	mov	r1, r3
   16f58:	4618      	mov	r0, r3
   16f5a:	f7f5 fb7f 	bl	c65c <__assert_func>
    BLE_LL_ASSERT(addr != NULL);
   16f5e:	f7f5 f943 	bl	c1e8 <hal_debugger_connected>
   16f62:	b100      	cbz	r0, 16f66 <ble_ll_resolv_get_priv_addr+0x42>
   16f64:	be01      	bkpt	0x0001
   16f66:	2300      	movs	r3, #0
   16f68:	461a      	mov	r2, r3
   16f6a:	4619      	mov	r1, r3
   16f6c:	4618      	mov	r0, r3
   16f6e:	f7f5 fb75 	bl	c65c <__assert_func>
        BLE_LL_ASSERT(rl->rl_has_local);
   16f72:	f7f5 f939 	bl	c1e8 <hal_debugger_connected>
   16f76:	b100      	cbz	r0, 16f7a <ble_ll_resolv_get_priv_addr+0x56>
   16f78:	be01      	bkpt	0x0001
   16f7a:	2300      	movs	r3, #0
   16f7c:	461a      	mov	r2, r3
   16f7e:	4619      	mov	r1, r3
   16f80:	4618      	mov	r0, r3
   16f82:	f7f5 fb6b 	bl	c65c <__assert_func>
        BLE_LL_ASSERT(rl->rl_has_peer);
   16f86:	78e3      	ldrb	r3, [r4, #3]
   16f88:	b12b      	cbz	r3, 16f96 <ble_ll_resolv_get_priv_addr+0x72>
        memcpy(addr, rl->rl_peer_rpa, BLE_DEV_ADDR_LEN);
   16f8a:	f854 3f30 	ldr.w	r3, [r4, #48]!
   16f8e:	602b      	str	r3, [r5, #0]
   16f90:	88a3      	ldrh	r3, [r4, #4]
   16f92:	80ab      	strh	r3, [r5, #4]
   16f94:	e7d6      	b.n	16f44 <ble_ll_resolv_get_priv_addr+0x20>
        BLE_LL_ASSERT(rl->rl_has_peer);
   16f96:	f7f5 f927 	bl	c1e8 <hal_debugger_connected>
   16f9a:	b100      	cbz	r0, 16f9e <ble_ll_resolv_get_priv_addr+0x7a>
   16f9c:	be01      	bkpt	0x0001
   16f9e:	2300      	movs	r3, #0
   16fa0:	461a      	mov	r2, r3
   16fa2:	4619      	mov	r1, r3
   16fa4:	4618      	mov	r0, r3
   16fa6:	f7f5 fb59 	bl	c65c <__assert_func>
	...

00016fac <ble_ll_resolv_set_peer_rpa>:

void
ble_ll_resolv_set_peer_rpa(int index, uint8_t *rpa)
{
   16fac:	b538      	push	{r3, r4, r5, lr}
   16fae:	4605      	mov	r5, r0
   16fb0:	460c      	mov	r4, r1
    os_sr_t sr;
    struct ble_ll_resolv_entry *rl;

    OS_ENTER_CRITICAL(sr);
   16fb2:	f7f6 fc21 	bl	d7f8 <os_arch_save_sr>
    rl = &g_ble_ll_resolv_list[index];
    memcpy(rl->rl_peer_rpa, rpa, BLE_DEV_ADDR_LEN);
   16fb6:	2336      	movs	r3, #54	; 0x36
   16fb8:	fb03 f305 	mul.w	r3, r3, r5
   16fbc:	3330      	adds	r3, #48	; 0x30
   16fbe:	4a04      	ldr	r2, [pc, #16]	; (16fd0 <ble_ll_resolv_set_peer_rpa+0x24>)
   16fc0:	1899      	adds	r1, r3, r2
   16fc2:	6825      	ldr	r5, [r4, #0]
   16fc4:	509d      	str	r5, [r3, r2]
   16fc6:	88a3      	ldrh	r3, [r4, #4]
   16fc8:	808b      	strh	r3, [r1, #4]
    OS_EXIT_CRITICAL(sr);
   16fca:	f7f6 fc1b 	bl	d804 <os_arch_restore_sr>
}
   16fce:	bd38      	pop	{r3, r4, r5, pc}
   16fd0:	20004100 	.word	0x20004100

00016fd4 <ble_ll_resolv_set_local_rpa>:

void
ble_ll_resolv_set_local_rpa(int index, uint8_t *rpa)
{
   16fd4:	b538      	push	{r3, r4, r5, lr}
   16fd6:	4605      	mov	r5, r0
   16fd8:	460c      	mov	r4, r1
    os_sr_t sr;
    struct ble_ll_resolv_entry *rl;

    OS_ENTER_CRITICAL(sr);
   16fda:	f7f6 fc0d 	bl	d7f8 <os_arch_save_sr>
    rl = &g_ble_ll_resolv_list[index];
    memcpy(rl->rl_local_rpa, rpa, BLE_DEV_ADDR_LEN);
   16fde:	2336      	movs	r3, #54	; 0x36
   16fe0:	fb03 f305 	mul.w	r3, r3, r5
   16fe4:	3328      	adds	r3, #40	; 0x28
   16fe6:	4a05      	ldr	r2, [pc, #20]	; (16ffc <ble_ll_resolv_set_local_rpa+0x28>)
   16fe8:	4413      	add	r3, r2
   16fea:	6822      	ldr	r2, [r4, #0]
   16fec:	f8c3 2002 	str.w	r2, [r3, #2]
   16ff0:	88a2      	ldrh	r2, [r4, #4]
   16ff2:	80da      	strh	r2, [r3, #6]
    OS_EXIT_CRITICAL(sr);
   16ff4:	f7f6 fc06 	bl	d804 <os_arch_restore_sr>
}
   16ff8:	bd38      	pop	{r3, r4, r5, pc}
   16ffa:	bf00      	nop
   16ffc:	20004100 	.word	0x20004100

00017000 <ble_ll_resolv_gen_rpa>:
 *
 * @return int
 */
int
ble_ll_resolv_gen_rpa(uint8_t *addr, uint8_t addr_type, uint8_t *rpa, int local)
{
   17000:	b538      	push	{r3, r4, r5, lr}
   17002:	4615      	mov	r5, r2
   17004:	461c      	mov	r4, r3
    struct ble_ll_resolv_entry *rl;

    rl = ble_ll_resolv_list_find(addr, addr_type);
   17006:	f7ff fdf3 	bl	16bf0 <ble_ll_resolv_list_find>
    if (rl) {
   1700a:	b168      	cbz	r0, 17028 <ble_ll_resolv_gen_rpa+0x28>
   1700c:	4603      	mov	r3, r0
        if ((local && rl->rl_has_local) || (!local && rl->rl_has_peer)) {
   1700e:	b10c      	cbz	r4, 17014 <ble_ll_resolv_gen_rpa+0x14>
   17010:	7882      	ldrb	r2, [r0, #2]
   17012:	b912      	cbnz	r2, 1701a <ble_ll_resolv_gen_rpa+0x1a>
   17014:	b954      	cbnz	r4, 1702c <ble_ll_resolv_gen_rpa+0x2c>
   17016:	78da      	ldrb	r2, [r3, #3]
   17018:	b152      	cbz	r2, 17030 <ble_ll_resolv_gen_rpa+0x30>
            ble_ll_resolv_get_priv_addr(rl, local, rpa);
   1701a:	462a      	mov	r2, r5
   1701c:	4621      	mov	r1, r4
   1701e:	4618      	mov	r0, r3
   17020:	f7ff ff80 	bl	16f24 <ble_ll_resolv_get_priv_addr>
            return 1;
   17024:	2001      	movs	r0, #1
        }
    }

    return 0;
}
   17026:	bd38      	pop	{r3, r4, r5, pc}
    return 0;
   17028:	2000      	movs	r0, #0
   1702a:	e7fc      	b.n	17026 <ble_ll_resolv_gen_rpa+0x26>
   1702c:	2000      	movs	r0, #0
   1702e:	e7fa      	b.n	17026 <ble_ll_resolv_gen_rpa+0x26>
   17030:	4620      	mov	r0, r4
   17032:	e7f8      	b.n	17026 <ble_ll_resolv_gen_rpa+0x26>

00017034 <ble_ll_resolv_rpa>:
 *
 * @return int
 */
int
ble_ll_resolv_rpa(const uint8_t *rpa, const uint8_t *irk)
{
   17034:	b510      	push	{r4, lr}
   17036:	b08c      	sub	sp, #48	; 0x30
   17038:	4604      	mov	r4, r0
    struct ble_encryption_block ecb;

    irk32 = (const uint32_t *)irk;
    key32 = (uint32_t *)&ecb.key[0];

    key32[0] = irk32[0];
   1703a:	680b      	ldr	r3, [r1, #0]
   1703c:	9300      	str	r3, [sp, #0]
    key32[1] = irk32[1];
   1703e:	684b      	ldr	r3, [r1, #4]
   17040:	9301      	str	r3, [sp, #4]
    key32[2] = irk32[2];
   17042:	688b      	ldr	r3, [r1, #8]
   17044:	9302      	str	r3, [sp, #8]
    key32[3] = irk32[3];
   17046:	68cb      	ldr	r3, [r1, #12]
   17048:	9303      	str	r3, [sp, #12]

    pt32 = (uint32_t *)&ecb.plain_text[0];
    pt32[0] = 0;
   1704a:	2300      	movs	r3, #0
   1704c:	9304      	str	r3, [sp, #16]
    pt32[1] = 0;
   1704e:	9305      	str	r3, [sp, #20]
    pt32[2] = 0;
   17050:	9306      	str	r3, [sp, #24]
    pt32[3] = 0;
   17052:	9307      	str	r3, [sp, #28]

    ecb.plain_text[15] = rpa[3];
   17054:	78c3      	ldrb	r3, [r0, #3]
   17056:	f88d 301f 	strb.w	r3, [sp, #31]
    ecb.plain_text[14] = rpa[4];
   1705a:	7903      	ldrb	r3, [r0, #4]
   1705c:	f88d 301e 	strb.w	r3, [sp, #30]
    ecb.plain_text[13] = rpa[5];
   17060:	7943      	ldrb	r3, [r0, #5]
   17062:	f88d 301d 	strb.w	r3, [sp, #29]

    ble_hw_encrypt_block(&ecb);
   17066:	4668      	mov	r0, sp
   17068:	f002 f9b2 	bl	193d0 <ble_hw_encrypt_block>
    if ((ecb.cipher_text[15] == rpa[0]) && (ecb.cipher_text[14] == rpa[1]) &&
   1706c:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
   17070:	7823      	ldrb	r3, [r4, #0]
   17072:	429a      	cmp	r2, r3
   17074:	d002      	beq.n	1707c <ble_ll_resolv_rpa+0x48>
        (ecb.cipher_text[13] == rpa[2])) {
        rc = 1;
    } else {
        rc = 0;
   17076:	2000      	movs	r0, #0
    }

    return rc;
}
   17078:	b00c      	add	sp, #48	; 0x30
   1707a:	bd10      	pop	{r4, pc}
    if ((ecb.cipher_text[15] == rpa[0]) && (ecb.cipher_text[14] == rpa[1]) &&
   1707c:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
   17080:	7863      	ldrb	r3, [r4, #1]
   17082:	429a      	cmp	r2, r3
   17084:	d001      	beq.n	1708a <ble_ll_resolv_rpa+0x56>
        rc = 0;
   17086:	2000      	movs	r0, #0
   17088:	e7f6      	b.n	17078 <ble_ll_resolv_rpa+0x44>
        (ecb.cipher_text[13] == rpa[2])) {
   1708a:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
   1708e:	78a3      	ldrb	r3, [r4, #2]
    if ((ecb.cipher_text[15] == rpa[0]) && (ecb.cipher_text[14] == rpa[1]) &&
   17090:	429a      	cmp	r2, r3
   17092:	d001      	beq.n	17098 <ble_ll_resolv_rpa+0x64>
        rc = 0;
   17094:	2000      	movs	r0, #0
   17096:	e7ef      	b.n	17078 <ble_ll_resolv_rpa+0x44>
        rc = 1;
   17098:	2001      	movs	r0, #1
    return rc;
   1709a:	e7ed      	b.n	17078 <ble_ll_resolv_rpa+0x44>

0001709c <ble_ll_resolv_enabled>:
 */
uint8_t
ble_ll_resolv_enabled(void)
{
    return g_ble_ll_resolv_data.addr_res_enabled;
}
   1709c:	4b01      	ldr	r3, [pc, #4]	; (170a4 <ble_ll_resolv_enabled+0x8>)
   1709e:	7818      	ldrb	r0, [r3, #0]
   170a0:	4770      	bx	lr
   170a2:	bf00      	nop
   170a4:	200041d8 	.word	0x200041d8

000170a8 <ble_ll_resolv_init>:
    ble_ll_resolv_init();
}

void
ble_ll_resolv_init(void)
{
   170a8:	b510      	push	{r4, lr}
    uint8_t hw_size;

    /* Default is 15 minutes */
    g_ble_ll_resolv_data.rpa_tmo = ble_npl_time_ms_to_ticks32(15 * 60 * 1000);
   170aa:	4b09      	ldr	r3, [pc, #36]	; (170d0 <ble_ll_resolv_init+0x28>)
   170ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
   170b0:	605a      	str	r2, [r3, #4]

    hw_size = ble_hw_resolv_list_size();
   170b2:	f002 fa37 	bl	19524 <ble_hw_resolv_list_size>
    if (hw_size > MYNEWT_VAL(BLE_LL_RESOLV_LIST_SIZE)) {
   170b6:	2804      	cmp	r0, #4
   170b8:	d900      	bls.n	170bc <ble_ll_resolv_init+0x14>
        hw_size = MYNEWT_VAL(BLE_LL_RESOLV_LIST_SIZE);
   170ba:	2004      	movs	r0, #4
    }
    g_ble_ll_resolv_data.rl_size = hw_size;
   170bc:	4c04      	ldr	r4, [pc, #16]	; (170d0 <ble_ll_resolv_init+0x28>)
   170be:	7060      	strb	r0, [r4, #1]
    os_callout_init(&co->co, &evq->evq, (os_event_fn *)ev_cb, ev_arg);
   170c0:	2300      	movs	r3, #0
   170c2:	4a04      	ldr	r2, [pc, #16]	; (170d4 <ble_ll_resolv_init+0x2c>)
   170c4:	4904      	ldr	r1, [pc, #16]	; (170d8 <ble_ll_resolv_init+0x30>)
   170c6:	f104 0008 	add.w	r0, r4, #8
   170ca:	f7f5 fc6f 	bl	c9ac <os_callout_init>

    ble_npl_callout_init(&g_ble_ll_resolv_data.rpa_timer,
                         &g_ble_ll_data.ll_evq,
                         ble_ll_resolv_rpa_timer_cb,
                         NULL);
}
   170ce:	bd10      	pop	{r4, pc}
   170d0:	200041d8 	.word	0x200041d8
   170d4:	00016b51 	.word	0x00016b51
   170d8:	20003d60 	.word	0x20003d60

000170dc <ble_ll_resolv_list_reset>:
{
   170dc:	b508      	push	{r3, lr}
    g_ble_ll_resolv_data.addr_res_enabled = 0;
   170de:	4805      	ldr	r0, [pc, #20]	; (170f4 <ble_ll_resolv_list_reset+0x18>)
   170e0:	2300      	movs	r3, #0
   170e2:	f800 3b08 	strb.w	r3, [r0], #8
    os_callout_stop(&co->co);
   170e6:	f7f5 fc6f 	bl	c9c8 <os_callout_stop>
    ble_ll_resolv_list_clr();
   170ea:	f7ff fd63 	bl	16bb4 <ble_ll_resolv_list_clr>
    ble_ll_resolv_init();
   170ee:	f7ff ffdb 	bl	170a8 <ble_ll_resolv_init>
}
   170f2:	bd08      	pop	{r3, pc}
   170f4:	200041d8 	.word	0x200041d8

000170f8 <ble_ll_rfmgmt_disable>:
    }
}

static void
ble_ll_rfmgmt_disable(void)
{
   170f8:	b508      	push	{r3, lr}
    OS_ASSERT_CRITICAL();
   170fa:	f7f6 fb86 	bl	d80a <os_arch_in_critical>
   170fe:	b118      	cbz	r0, 17108 <ble_ll_rfmgmt_disable+0x10>

    if (g_ble_ll_rfmgmt_data.state != RFMGMT_STATE_OFF) {
   17100:	4b09      	ldr	r3, [pc, #36]	; (17128 <ble_ll_rfmgmt_disable+0x30>)
   17102:	781b      	ldrb	r3, [r3, #0]
   17104:	b953      	cbnz	r3, 1711c <ble_ll_rfmgmt_disable+0x24>
        ble_phy_rfclk_disable();
        g_ble_ll_rfmgmt_data.state = RFMGMT_STATE_OFF;
    }
}
   17106:	bd08      	pop	{r3, pc}
    OS_ASSERT_CRITICAL();
   17108:	f7f5 f86e 	bl	c1e8 <hal_debugger_connected>
   1710c:	b100      	cbz	r0, 17110 <ble_ll_rfmgmt_disable+0x18>
   1710e:	be01      	bkpt	0x0001
   17110:	2300      	movs	r3, #0
   17112:	461a      	mov	r2, r3
   17114:	4619      	mov	r1, r3
   17116:	4618      	mov	r0, r3
   17118:	f7f5 faa0 	bl	c65c <__assert_func>
        ble_phy_rfclk_disable();
   1711c:	f003 f8c8 	bl	1a2b0 <ble_phy_rfclk_disable>
        g_ble_ll_rfmgmt_data.state = RFMGMT_STATE_OFF;
   17120:	4b01      	ldr	r3, [pc, #4]	; (17128 <ble_ll_rfmgmt_disable+0x30>)
   17122:	2200      	movs	r2, #0
   17124:	701a      	strb	r2, [r3, #0]
}
   17126:	e7ee      	b.n	17106 <ble_ll_rfmgmt_disable+0xe>
   17128:	2000264c 	.word	0x2000264c

0001712c <ble_ll_rfmgmt_release_ev>:
    ble_ll_rfmgmt_enable();
}

static void
ble_ll_rfmgmt_release_ev(struct ble_npl_event *ev)
{
   1712c:	b538      	push	{r3, r4, r5, lr}
    uint32_t now;
    bool can_disable;
    uint8_t lls;
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
   1712e:	f7f6 fb63 	bl	d7f8 <os_arch_save_sr>
   17132:	4605      	mov	r5, r0

    now = os_cputime_get32();
   17134:	f012 fbcb 	bl	298ce <os_cputime_get32>
   17138:	4604      	mov	r4, r0

    can_disable = true;
    lls = ble_ll_state_get();
   1713a:	f7f9 fc47 	bl	109cc <ble_ll_state_get>

    if (rfmgmt->enable_scan && CPUTIME_GEQ(now, rfmgmt->enable_scan_at)) {
   1713e:	4b0d      	ldr	r3, [pc, #52]	; (17174 <ble_ll_rfmgmt_release_ev+0x48>)
   17140:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   17144:	b123      	cbz	r3, 17150 <ble_ll_rfmgmt_release_ev+0x24>
   17146:	4b0b      	ldr	r3, [pc, #44]	; (17174 <ble_ll_rfmgmt_release_ev+0x48>)
   17148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1714a:	1ae3      	subs	r3, r4, r3
   1714c:	2b00      	cmp	r3, #0
   1714e:	da09      	bge.n	17164 <ble_ll_rfmgmt_release_ev+0x38>
        /* Blocked by scan */
        can_disable = false;
    } else if (rfmgmt->enable_sched && CPUTIME_GEQ(now, rfmgmt->enable_sched_at)) {
   17150:	4b08      	ldr	r3, [pc, #32]	; (17174 <ble_ll_rfmgmt_release_ev+0x48>)
   17152:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   17156:	b123      	cbz	r3, 17162 <ble_ll_rfmgmt_release_ev+0x36>
   17158:	4b06      	ldr	r3, [pc, #24]	; (17174 <ble_ll_rfmgmt_release_ev+0x48>)
   1715a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1715c:	1ae4      	subs	r4, r4, r3
   1715e:	2c00      	cmp	r4, #0
   17160:	da00      	bge.n	17164 <ble_ll_rfmgmt_release_ev+0x38>
        /* Blocked by scheduler item */
        can_disable = false;
    } else if (lls != BLE_LL_STATE_STANDBY) {
   17162:	b118      	cbz	r0, 1716c <ble_ll_rfmgmt_release_ev+0x40>

    if (can_disable) {
        ble_ll_rfmgmt_disable();
    }

    OS_EXIT_CRITICAL(sr);
   17164:	4628      	mov	r0, r5
   17166:	f7f6 fb4d 	bl	d804 <os_arch_restore_sr>
}
   1716a:	bd38      	pop	{r3, r4, r5, pc}
        ble_ll_rfmgmt_disable();
   1716c:	f7ff ffc4 	bl	170f8 <ble_ll_rfmgmt_disable>
   17170:	e7f8      	b.n	17164 <ble_ll_rfmgmt_release_ev+0x38>
   17172:	bf00      	nop
   17174:	2000264c 	.word	0x2000264c

00017178 <ble_ll_rfmgmt_enable>:
{
   17178:	b510      	push	{r4, lr}
    OS_ASSERT_CRITICAL();
   1717a:	f7f6 fb46 	bl	d80a <os_arch_in_critical>
   1717e:	b118      	cbz	r0, 17188 <ble_ll_rfmgmt_enable+0x10>
    if (g_ble_ll_rfmgmt_data.state == RFMGMT_STATE_OFF) {
   17180:	4b0b      	ldr	r3, [pc, #44]	; (171b0 <ble_ll_rfmgmt_enable+0x38>)
   17182:	781b      	ldrb	r3, [r3, #0]
   17184:	b153      	cbz	r3, 1719c <ble_ll_rfmgmt_enable+0x24>
}
   17186:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
   17188:	f7f5 f82e 	bl	c1e8 <hal_debugger_connected>
   1718c:	b100      	cbz	r0, 17190 <ble_ll_rfmgmt_enable+0x18>
   1718e:	be01      	bkpt	0x0001
   17190:	2300      	movs	r3, #0
   17192:	461a      	mov	r2, r3
   17194:	4619      	mov	r1, r3
   17196:	4618      	mov	r0, r3
   17198:	f7f5 fa60 	bl	c65c <__assert_func>
        g_ble_ll_rfmgmt_data.state = RFMGMT_STATE_ENABLING;
   1719c:	4c04      	ldr	r4, [pc, #16]	; (171b0 <ble_ll_rfmgmt_enable+0x38>)
   1719e:	2301      	movs	r3, #1
   171a0:	7023      	strb	r3, [r4, #0]
        g_ble_ll_rfmgmt_data.enabled_at = os_cputime_get32();
   171a2:	f012 fb94 	bl	298ce <os_cputime_get32>
   171a6:	6320      	str	r0, [r4, #48]	; 0x30
        ble_phy_rfclk_enable();
   171a8:	f003 f87e 	bl	1a2a8 <ble_phy_rfclk_enable>
}
   171ac:	e7eb      	b.n	17186 <ble_ll_rfmgmt_enable+0xe>
   171ae:	bf00      	nop
   171b0:	2000264c 	.word	0x2000264c

000171b4 <ble_ll_rfmgmt_timer_exp>:
{
   171b4:	b508      	push	{r3, lr}
    g_ble_ll_rfmgmt_data.timer_scheduled = false;
   171b6:	4b03      	ldr	r3, [pc, #12]	; (171c4 <ble_ll_rfmgmt_timer_exp+0x10>)
   171b8:	2200      	movs	r2, #0
   171ba:	771a      	strb	r2, [r3, #28]
    ble_ll_rfmgmt_enable();
   171bc:	f7ff ffdc 	bl	17178 <ble_ll_rfmgmt_enable>
}
   171c0:	bd08      	pop	{r3, pc}
   171c2:	bf00      	nop
   171c4:	2000264c 	.word	0x2000264c

000171c8 <ble_ll_rfmgmt_timer_reschedule>:
{
   171c8:	b510      	push	{r4, lr}
    if (rfmgmt->enable_scan && rfmgmt->enable_sched) {
   171ca:	4b1f      	ldr	r3, [pc, #124]	; (17248 <ble_ll_rfmgmt_timer_reschedule+0x80>)
   171cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   171d0:	b15b      	cbz	r3, 171ea <ble_ll_rfmgmt_timer_reschedule+0x22>
   171d2:	4a1d      	ldr	r2, [pc, #116]	; (17248 <ble_ll_rfmgmt_timer_reschedule+0x80>)
   171d4:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
   171d8:	b13a      	cbz	r2, 171ea <ble_ll_rfmgmt_timer_reschedule+0x22>
        if (CPUTIME_LT(rfmgmt->enable_scan_at, rfmgmt->enable_sched_at)) {
   171da:	4b1b      	ldr	r3, [pc, #108]	; (17248 <ble_ll_rfmgmt_timer_reschedule+0x80>)
   171dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   171de:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   171e0:	1b13      	subs	r3, r2, r4
   171e2:	2b00      	cmp	r3, #0
   171e4:	da04      	bge.n	171f0 <ble_ll_rfmgmt_timer_reschedule+0x28>
            enable_at = rfmgmt->enable_scan_at;
   171e6:	4614      	mov	r4, r2
   171e8:	e002      	b.n	171f0 <ble_ll_rfmgmt_timer_reschedule+0x28>
    } else if (rfmgmt->enable_scan) {
   171ea:	b1e3      	cbz	r3, 17226 <ble_ll_rfmgmt_timer_reschedule+0x5e>
        enable_at = rfmgmt->enable_scan_at;
   171ec:	4b16      	ldr	r3, [pc, #88]	; (17248 <ble_ll_rfmgmt_timer_reschedule+0x80>)
   171ee:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    if (rfmgmt->timer_scheduled) {
   171f0:	4b15      	ldr	r3, [pc, #84]	; (17248 <ble_ll_rfmgmt_timer_reschedule+0x80>)
   171f2:	7f1b      	ldrb	r3, [r3, #28]
   171f4:	b14b      	cbz	r3, 1720a <ble_ll_rfmgmt_timer_reschedule+0x42>
        if (rfmgmt->timer_scheduled_at == enable_at) {
   171f6:	4b14      	ldr	r3, [pc, #80]	; (17248 <ble_ll_rfmgmt_timer_reschedule+0x80>)
   171f8:	6a1b      	ldr	r3, [r3, #32]
   171fa:	42a3      	cmp	r3, r4
   171fc:	d012      	beq.n	17224 <ble_ll_rfmgmt_timer_reschedule+0x5c>
        rfmgmt->timer_scheduled = false;
   171fe:	4812      	ldr	r0, [pc, #72]	; (17248 <ble_ll_rfmgmt_timer_reschedule+0x80>)
   17200:	2300      	movs	r3, #0
   17202:	7703      	strb	r3, [r0, #28]
        os_cputime_timer_stop(&rfmgmt->timer);
   17204:	3004      	adds	r0, #4
   17206:	f012 fb5e 	bl	298c6 <os_cputime_timer_stop>
    if (CPUTIME_LEQ(enable_at, os_cputime_get32())) {
   1720a:	f012 fb60 	bl	298ce <os_cputime_get32>
   1720e:	1a20      	subs	r0, r4, r0
   17210:	2800      	cmp	r0, #0
   17212:	dd16      	ble.n	17242 <ble_ll_rfmgmt_timer_reschedule+0x7a>
    rfmgmt->timer_scheduled = true;
   17214:	480c      	ldr	r0, [pc, #48]	; (17248 <ble_ll_rfmgmt_timer_reschedule+0x80>)
   17216:	2301      	movs	r3, #1
   17218:	7703      	strb	r3, [r0, #28]
    rfmgmt->timer_scheduled_at = enable_at;
   1721a:	6204      	str	r4, [r0, #32]
    os_cputime_timer_start(&rfmgmt->timer, enable_at);
   1721c:	4621      	mov	r1, r4
   1721e:	3004      	adds	r0, #4
   17220:	f012 fb4d 	bl	298be <os_cputime_timer_start>
}
   17224:	bd10      	pop	{r4, pc}
    } else if (rfmgmt->enable_sched) {
   17226:	4b08      	ldr	r3, [pc, #32]	; (17248 <ble_ll_rfmgmt_timer_reschedule+0x80>)
   17228:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   1722c:	b113      	cbz	r3, 17234 <ble_ll_rfmgmt_timer_reschedule+0x6c>
        enable_at = rfmgmt->enable_sched_at;
   1722e:	4b06      	ldr	r3, [pc, #24]	; (17248 <ble_ll_rfmgmt_timer_reschedule+0x80>)
   17230:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   17232:	e7dd      	b.n	171f0 <ble_ll_rfmgmt_timer_reschedule+0x28>
        rfmgmt->timer_scheduled = false;
   17234:	4804      	ldr	r0, [pc, #16]	; (17248 <ble_ll_rfmgmt_timer_reschedule+0x80>)
   17236:	2300      	movs	r3, #0
   17238:	7703      	strb	r3, [r0, #28]
        os_cputime_timer_stop(&rfmgmt->timer);
   1723a:	3004      	adds	r0, #4
   1723c:	f012 fb43 	bl	298c6 <os_cputime_timer_stop>
        return;
   17240:	e7f0      	b.n	17224 <ble_ll_rfmgmt_timer_reschedule+0x5c>
        ble_ll_rfmgmt_enable();
   17242:	f7ff ff99 	bl	17178 <ble_ll_rfmgmt_enable>
        return;
   17246:	e7ed      	b.n	17224 <ble_ll_rfmgmt_timer_reschedule+0x5c>
   17248:	2000264c 	.word	0x2000264c

0001724c <ble_ll_rfmgmt_init>:
    return rem_ticks;
}

void
ble_ll_rfmgmt_init(void)
{
   1724c:	b538      	push	{r3, r4, r5, lr}
    struct ble_ll_rfmgmt_data *rfmgmt = &g_ble_ll_rfmgmt_data;

    rfmgmt->state = RFMGMT_STATE_OFF;
   1724e:	4c0a      	ldr	r4, [pc, #40]	; (17278 <ble_ll_rfmgmt_init+0x2c>)
   17250:	2500      	movs	r5, #0
   17252:	7025      	strb	r5, [r4, #0]
   17254:	f240 50fa 	movw	r0, #1530	; 0x5fa
   17258:	f012 fb3e 	bl	298d8 <os_cputime_usecs_to_ticks>

    rfmgmt->ticks_to_enabled =
   1725c:	8060      	strh	r0, [r4, #2]
            ble_ll_usecs_to_ticks_round_up(MYNEWT_VAL(BLE_LL_RFMGMT_ENABLE_TIME));

    rfmgmt->timer_scheduled = false;
   1725e:	7725      	strb	r5, [r4, #28]
    os_cputime_timer_init(&rfmgmt->timer, ble_ll_rfmgmt_timer_exp, NULL);
   17260:	462a      	mov	r2, r5
   17262:	4906      	ldr	r1, [pc, #24]	; (1727c <ble_ll_rfmgmt_init+0x30>)
   17264:	1d20      	adds	r0, r4, #4
   17266:	f012 fb0c 	bl	29882 <os_cputime_timer_init>
    memset(ev, 0, sizeof(*ev));
   1726a:	6365      	str	r5, [r4, #52]	; 0x34
   1726c:	63e5      	str	r5, [r4, #60]	; 0x3c
   1726e:	6425      	str	r5, [r4, #64]	; 0x40
    ev->ev.ev_cb = (os_event_fn *)fn;
   17270:	4b03      	ldr	r3, [pc, #12]	; (17280 <ble_ll_rfmgmt_init+0x34>)
   17272:	63a3      	str	r3, [r4, #56]	; 0x38

    ble_npl_event_init(&rfmgmt->release_ev, ble_ll_rfmgmt_release_ev, NULL);
}
   17274:	bd38      	pop	{r3, r4, r5, pc}
   17276:	bf00      	nop
   17278:	2000264c 	.word	0x2000264c
   1727c:	000171b5 	.word	0x000171b5
   17280:	0001712d 	.word	0x0001712d

00017284 <ble_ll_rfmgmt_reset>:

void
ble_ll_rfmgmt_reset(void)
{
   17284:	b538      	push	{r3, r4, r5, lr}
    struct ble_ll_rfmgmt_data *rfmgmt = &g_ble_ll_rfmgmt_data;

    rfmgmt->timer_scheduled = false;
   17286:	4c0b      	ldr	r4, [pc, #44]	; (172b4 <ble_ll_rfmgmt_reset+0x30>)
   17288:	2500      	movs	r5, #0
   1728a:	7725      	strb	r5, [r4, #28]
    rfmgmt->timer_scheduled_at = 0;
   1728c:	6225      	str	r5, [r4, #32]
    os_cputime_timer_stop(&rfmgmt->timer);
   1728e:	1d20      	adds	r0, r4, #4
   17290:	f012 fb19 	bl	298c6 <os_cputime_timer_stop>
    os_eventq_remove(&evq->evq, &ev->ev);
   17294:	f104 0134 	add.w	r1, r4, #52	; 0x34
   17298:	4807      	ldr	r0, [pc, #28]	; (172b8 <ble_ll_rfmgmt_reset+0x34>)
   1729a:	f7f5 fda5 	bl	cde8 <os_eventq_remove>

    ble_npl_eventq_remove(&g_ble_ll_data.ll_evq, &rfmgmt->release_ev);

    ble_ll_rfmgmt_disable();
   1729e:	f7ff ff2b 	bl	170f8 <ble_ll_rfmgmt_disable>

    rfmgmt->enable_scan = false;
   172a2:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
    rfmgmt->enable_scan_at = 0;
   172a6:	62a5      	str	r5, [r4, #40]	; 0x28
    rfmgmt->enable_sched = false;
   172a8:	f884 5025 	strb.w	r5, [r4, #37]	; 0x25
    rfmgmt->enable_sched_at = 0;
   172ac:	62e5      	str	r5, [r4, #44]	; 0x2c

    rfmgmt->enabled_at = 0;
   172ae:	6325      	str	r5, [r4, #48]	; 0x30
}
   172b0:	bd38      	pop	{r3, r4, r5, pc}
   172b2:	bf00      	nop
   172b4:	2000264c 	.word	0x2000264c
   172b8:	20003d60 	.word	0x20003d60

000172bc <ble_ll_rfmgmt_scan_changed>:

void
ble_ll_rfmgmt_scan_changed(bool enabled, uint32_t next_window)
{
   172bc:	b570      	push	{r4, r5, r6, lr}
   172be:	4606      	mov	r6, r0
   172c0:	460c      	mov	r4, r1
    struct ble_ll_rfmgmt_data *rfmgmt = &g_ble_ll_rfmgmt_data;
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
   172c2:	f7f6 fa99 	bl	d7f8 <os_arch_save_sr>
   172c6:	4605      	mov	r5, r0

    rfmgmt->enable_scan = enabled;
   172c8:	4b05      	ldr	r3, [pc, #20]	; (172e0 <ble_ll_rfmgmt_scan_changed+0x24>)
   172ca:	f883 6024 	strb.w	r6, [r3, #36]	; 0x24
    rfmgmt->enable_scan_at = next_window - rfmgmt->ticks_to_enabled;
   172ce:	885a      	ldrh	r2, [r3, #2]
   172d0:	1aa4      	subs	r4, r4, r2
   172d2:	629c      	str	r4, [r3, #40]	; 0x28

    ble_ll_rfmgmt_timer_reschedule();
   172d4:	f7ff ff78 	bl	171c8 <ble_ll_rfmgmt_timer_reschedule>

    OS_EXIT_CRITICAL(sr);
   172d8:	4628      	mov	r0, r5
   172da:	f7f6 fa93 	bl	d804 <os_arch_restore_sr>
}
   172de:	bd70      	pop	{r4, r5, r6, pc}
   172e0:	2000264c 	.word	0x2000264c

000172e4 <ble_ll_rfmgmt_sched_changed>:

void
ble_ll_rfmgmt_sched_changed(struct ble_ll_sched_item *first)
{
   172e4:	b538      	push	{r3, r4, r5, lr}
   172e6:	4604      	mov	r4, r0
    struct ble_ll_rfmgmt_data *rfmgmt = &g_ble_ll_rfmgmt_data;
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
   172e8:	f7f6 fa86 	bl	d7f8 <os_arch_save_sr>
   172ec:	4605      	mov	r5, r0

    rfmgmt->enable_sched = (first != NULL);
   172ee:	2c00      	cmp	r4, #0
   172f0:	bf14      	ite	ne
   172f2:	2201      	movne	r2, #1
   172f4:	2200      	moveq	r2, #0
   172f6:	4b07      	ldr	r3, [pc, #28]	; (17314 <ble_ll_rfmgmt_sched_changed+0x30>)
   172f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    if (first) {
   172fc:	d004      	beq.n	17308 <ble_ll_rfmgmt_sched_changed+0x24>
        rfmgmt->enable_sched_at = first->start_time - rfmgmt->ticks_to_enabled;
   172fe:	6863      	ldr	r3, [r4, #4]
   17300:	4a04      	ldr	r2, [pc, #16]	; (17314 <ble_ll_rfmgmt_sched_changed+0x30>)
   17302:	8851      	ldrh	r1, [r2, #2]
   17304:	1a5b      	subs	r3, r3, r1
   17306:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    ble_ll_rfmgmt_timer_reschedule();
   17308:	f7ff ff5e 	bl	171c8 <ble_ll_rfmgmt_timer_reschedule>

    OS_EXIT_CRITICAL(sr);
   1730c:	4628      	mov	r0, r5
   1730e:	f7f6 fa79 	bl	d804 <os_arch_restore_sr>
}
   17312:	bd38      	pop	{r3, r4, r5, pc}
   17314:	2000264c 	.word	0x2000264c

00017318 <ble_ll_rfmgmt_release>:

void
ble_ll_rfmgmt_release(void)
{
   17318:	b538      	push	{r3, r4, r5, lr}
    struct ble_ll_rfmgmt_data *rfmgmt = &g_ble_ll_rfmgmt_data;
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
   1731a:	f7f6 fa6d 	bl	d7f8 <os_arch_save_sr>
   1731e:	4605      	mov	r5, r0
   17320:	4c08      	ldr	r4, [pc, #32]	; (17344 <ble_ll_rfmgmt_release+0x2c>)
   17322:	f104 0134 	add.w	r1, r4, #52	; 0x34
   17326:	4808      	ldr	r0, [pc, #32]	; (17348 <ble_ll_rfmgmt_release+0x30>)
   17328:	f7f5 fd5e 	bl	cde8 <os_eventq_remove>

    ble_npl_eventq_remove(&g_ble_ll_data.ll_evq, &rfmgmt->release_ev);

    if (g_ble_ll_rfmgmt_data.state != RFMGMT_STATE_OFF) {
   1732c:	7823      	ldrb	r3, [r4, #0]
   1732e:	b91b      	cbnz	r3, 17338 <ble_ll_rfmgmt_release+0x20>
        ble_npl_eventq_put(&g_ble_ll_data.ll_evq, &rfmgmt->release_ev);
    }

    OS_EXIT_CRITICAL(sr);
   17330:	4628      	mov	r0, r5
   17332:	f7f6 fa67 	bl	d804 <os_arch_restore_sr>
}
   17336:	bd38      	pop	{r3, r4, r5, pc}
    os_eventq_put(&evq->evq, &ev->ev);
   17338:	f104 0134 	add.w	r1, r4, #52	; 0x34
   1733c:	4802      	ldr	r0, [pc, #8]	; (17348 <ble_ll_rfmgmt_release+0x30>)
   1733e:	f7f5 fcbc 	bl	ccba <os_eventq_put>
   17342:	e7f5      	b.n	17330 <ble_ll_rfmgmt_release+0x18>
   17344:	2000264c 	.word	0x2000264c
   17348:	20003d60 	.word	0x20003d60

0001734c <ble_ll_rfmgmt_enable_now>:

uint32_t
ble_ll_rfmgmt_enable_now(void)
{
   1734c:	b538      	push	{r3, r4, r5, lr}
    struct ble_ll_rfmgmt_data *rfmgmt = &g_ble_ll_rfmgmt_data;
    uint32_t enabled_at;
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
   1734e:	f7f6 fa53 	bl	d7f8 <os_arch_save_sr>
   17352:	4605      	mov	r5, r0

    ble_ll_rfmgmt_enable();
   17354:	f7ff ff10 	bl	17178 <ble_ll_rfmgmt_enable>

    if (rfmgmt->state == RFMGMT_STATE_ENABLED) {
   17358:	4b08      	ldr	r3, [pc, #32]	; (1737c <ble_ll_rfmgmt_enable_now+0x30>)
   1735a:	781b      	ldrb	r3, [r3, #0]
   1735c:	2b02      	cmp	r3, #2
   1735e:	d009      	beq.n	17374 <ble_ll_rfmgmt_enable_now+0x28>
        enabled_at = os_cputime_get32();
    } else {
        enabled_at = rfmgmt->enabled_at + rfmgmt->ticks_to_enabled + 1;
   17360:	4b06      	ldr	r3, [pc, #24]	; (1737c <ble_ll_rfmgmt_enable_now+0x30>)
   17362:	6b1c      	ldr	r4, [r3, #48]	; 0x30
   17364:	885b      	ldrh	r3, [r3, #2]
   17366:	441c      	add	r4, r3
   17368:	3401      	adds	r4, #1
    }

    OS_EXIT_CRITICAL(sr);
   1736a:	4628      	mov	r0, r5
   1736c:	f7f6 fa4a 	bl	d804 <os_arch_restore_sr>

    return enabled_at;
}
   17370:	4620      	mov	r0, r4
   17372:	bd38      	pop	{r3, r4, r5, pc}
        enabled_at = os_cputime_get32();
   17374:	f012 faab 	bl	298ce <os_cputime_get32>
   17378:	4604      	mov	r4, r0
   1737a:	e7f6      	b.n	1736a <ble_ll_rfmgmt_enable_now+0x1e>
   1737c:	2000264c 	.word	0x2000264c

00017380 <ble_ll_get_chan_to_scan>:

static void
ble_ll_get_chan_to_scan(struct ble_ll_scan_sm *scansm, uint8_t *chan,
                        int *phy)
{
    struct ble_ll_scan_params *scanp = scansm->scanp;
   17380:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    }

    *chan = aux_data->chan;
    *phy = aux_data->aux_phy;
#else
    *chan = scanp->scan_chan;
   17382:	7958      	ldrb	r0, [r3, #5]
   17384:	7008      	strb	r0, [r1, #0]
    *phy = scanp->phy;
   17386:	781b      	ldrb	r3, [r3, #0]
   17388:	6013      	str	r3, [r2, #0]
#endif
}
   1738a:	4770      	bx	lr

0001738c <ble_ll_scan_get_next_adv_prim_chan>:
}

static uint8_t
ble_ll_scan_get_next_adv_prim_chan(uint8_t chan)
{
    ++chan;
   1738c:	3001      	adds	r0, #1
   1738e:	b2c0      	uxtb	r0, r0
    if (chan == BLE_PHY_NUM_CHANS) {
   17390:	2828      	cmp	r0, #40	; 0x28
   17392:	d000      	beq.n	17396 <ble_ll_scan_get_next_adv_prim_chan+0xa>
        chan = BLE_PHY_ADV_CHAN_START;
    }

    return chan;
}
   17394:	4770      	bx	lr
        chan = BLE_PHY_ADV_CHAN_START;
   17396:	2025      	movs	r0, #37	; 0x25
   17398:	e7fc      	b.n	17394 <ble_ll_scan_get_next_adv_prim_chan+0x8>

0001739a <ble_ll_scan_move_window_to>:

static uint32_t
ble_ll_scan_move_window_to(struct ble_ll_scan_params *scanp, uint32_t time)
{
   1739a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1739c:	4605      	mov	r5, r0
   1739e:	460f      	mov	r7, r1
    /*
     * Move window until given tick is before or inside window and move to next
     * channel for each skipped interval.
     */

    end_time = scanp->timing.start_time + scanp->timing.window;
   173a0:	6904      	ldr	r4, [r0, #16]
   173a2:	68c6      	ldr	r6, [r0, #12]
   173a4:	4434      	add	r4, r6
    while (CPUTIME_GEQ(time, end_time)) {
   173a6:	e008      	b.n	173ba <ble_ll_scan_move_window_to+0x20>
        scanp->timing.start_time += scanp->timing.interval;
   173a8:	68ac      	ldr	r4, [r5, #8]
   173aa:	692b      	ldr	r3, [r5, #16]
   173ac:	441c      	add	r4, r3
   173ae:	612c      	str	r4, [r5, #16]
        scanp->scan_chan = ble_ll_scan_get_next_adv_prim_chan(scanp->scan_chan);
   173b0:	7968      	ldrb	r0, [r5, #5]
   173b2:	f7ff ffeb 	bl	1738c <ble_ll_scan_get_next_adv_prim_chan>
   173b6:	7168      	strb	r0, [r5, #5]
        end_time = scanp->timing.start_time + scanp->timing.window;
   173b8:	4434      	add	r4, r6
    while (CPUTIME_GEQ(time, end_time)) {
   173ba:	1b3c      	subs	r4, r7, r4
   173bc:	2c00      	cmp	r4, #0
   173be:	daf3      	bge.n	173a8 <ble_ll_scan_move_window_to+0xe>
    }

    return scanp->timing.start_time;
}
   173c0:	6928      	ldr	r0, [r5, #16]
   173c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000173c4 <ble_ll_scan_is_inside_window>:

static bool
ble_ll_scan_is_inside_window(struct ble_ll_scan_params *scanp, uint32_t time)
{
   173c4:	b538      	push	{r3, r4, r5, lr}
   173c6:	4605      	mov	r5, r0
   173c8:	460c      	mov	r4, r1
    uint32_t start_time;

    /* Make sure we are checking against closest window */
    start_time = ble_ll_scan_move_window_to(scanp, time);
   173ca:	f7ff ffe6 	bl	1739a <ble_ll_scan_move_window_to>

    if (scanp->timing.window == scanp->timing.interval) {
   173ce:	68eb      	ldr	r3, [r5, #12]
   173d0:	68aa      	ldr	r2, [r5, #8]
   173d2:	4293      	cmp	r3, r2
   173d4:	d00c      	beq.n	173f0 <ble_ll_scan_is_inside_window+0x2c>
        /* always inside window in continuous scan */
        return true;
    }

    return CPUTIME_GEQ(time, start_time) &&
   173d6:	1a22      	subs	r2, r4, r0
   173d8:	2a00      	cmp	r2, #0
   173da:	db05      	blt.n	173e8 <ble_ll_scan_is_inside_window+0x24>
           CPUTIME_LT(time, start_time + scanp->timing.window);
   173dc:	4403      	add	r3, r0
   173de:	1ae3      	subs	r3, r4, r3
    return CPUTIME_GEQ(time, start_time) &&
   173e0:	2b00      	cmp	r3, #0
   173e2:	db03      	blt.n	173ec <ble_ll_scan_is_inside_window+0x28>
   173e4:	2000      	movs	r0, #0
   173e6:	e004      	b.n	173f2 <ble_ll_scan_is_inside_window+0x2e>
   173e8:	2000      	movs	r0, #0
   173ea:	e002      	b.n	173f2 <ble_ll_scan_is_inside_window+0x2e>
   173ec:	2001      	movs	r0, #1
   173ee:	e000      	b.n	173f2 <ble_ll_scan_is_inside_window+0x2e>
        return true;
   173f0:	2001      	movs	r0, #1
}
   173f2:	bd38      	pop	{r3, r4, r5, pc}

000173f4 <ble_ll_scan_get_addr_data_from_legacy>:
}

static void
ble_ll_scan_get_addr_data_from_legacy(uint8_t pdu_type, uint8_t *rxbuf,
                                     struct ble_ll_scan_addr_data *addrd)
{
   173f4:	b508      	push	{r3, lr}
    BLE_LL_ASSERT(pdu_type < BLE_ADV_PDU_TYPE_ADV_EXT_IND);
   173f6:	2806      	cmp	r0, #6
   173f8:	d80f      	bhi.n	1741a <ble_ll_scan_get_addr_data_from_legacy+0x26>

    addrd->adva_present = true;
   173fa:	2301      	movs	r3, #1
   173fc:	7013      	strb	r3, [r2, #0]

    addrd->adva = rxbuf + BLE_LL_PDU_HDR_LEN;
   173fe:	1c8b      	adds	r3, r1, #2
   17400:	6053      	str	r3, [r2, #4]
    addrd->adva_type = ble_ll_get_addr_type(rxbuf[0] & BLE_ADV_PDU_HDR_TXADD_MASK);
   17402:	780b      	ldrb	r3, [r1, #0]
    if (txrxflag) {
   17404:	f013 0f40 	tst.w	r3, #64	; 0x40
   17408:	d011      	beq.n	1742e <ble_ll_scan_get_addr_data_from_legacy+0x3a>
        return BLE_HCI_ADV_OWN_ADDR_RANDOM;
   1740a:	2301      	movs	r3, #1
   1740c:	7053      	strb	r3, [r2, #1]

    if (pdu_type == BLE_ADV_PDU_TYPE_ADV_DIRECT_IND) {
   1740e:	2801      	cmp	r0, #1
   17410:	d00f      	beq.n	17432 <ble_ll_scan_get_addr_data_from_legacy+0x3e>
        addrd->targeta = rxbuf + BLE_LL_PDU_HDR_LEN + BLE_DEV_ADDR_LEN;
        addrd->targeta_type = ble_ll_get_addr_type(rxbuf[0] & BLE_ADV_PDU_HDR_RXADD_MASK);
    } else {
        addrd->targeta = NULL;
   17412:	2300      	movs	r3, #0
   17414:	60d3      	str	r3, [r2, #12]
        addrd->targeta_type = 0;
   17416:	7213      	strb	r3, [r2, #8]
    }
}
   17418:	bd08      	pop	{r3, pc}
    BLE_LL_ASSERT(pdu_type < BLE_ADV_PDU_TYPE_ADV_EXT_IND);
   1741a:	f7f4 fee5 	bl	c1e8 <hal_debugger_connected>
   1741e:	b100      	cbz	r0, 17422 <ble_ll_scan_get_addr_data_from_legacy+0x2e>
   17420:	be01      	bkpt	0x0001
   17422:	2300      	movs	r3, #0
   17424:	461a      	mov	r2, r3
   17426:	4619      	mov	r1, r3
   17428:	4618      	mov	r0, r3
   1742a:	f7f5 f917 	bl	c65c <__assert_func>
    return BLE_HCI_ADV_OWN_ADDR_PUBLIC;
   1742e:	2300      	movs	r3, #0
   17430:	e7ec      	b.n	1740c <ble_ll_scan_get_addr_data_from_legacy+0x18>
        addrd->targeta = rxbuf + BLE_LL_PDU_HDR_LEN + BLE_DEV_ADDR_LEN;
   17432:	f101 0308 	add.w	r3, r1, #8
   17436:	60d3      	str	r3, [r2, #12]
    if (txrxflag) {
   17438:	f991 3000 	ldrsb.w	r3, [r1]
   1743c:	2b00      	cmp	r3, #0
   1743e:	db02      	blt.n	17446 <ble_ll_scan_get_addr_data_from_legacy+0x52>
    return BLE_HCI_ADV_OWN_ADDR_PUBLIC;
   17440:	2300      	movs	r3, #0
        addrd->targeta_type = ble_ll_get_addr_type(rxbuf[0] & BLE_ADV_PDU_HDR_RXADD_MASK);
   17442:	7213      	strb	r3, [r2, #8]
   17444:	e7e8      	b.n	17418 <ble_ll_scan_get_addr_data_from_legacy+0x24>
        return BLE_HCI_ADV_OWN_ADDR_RANDOM;
   17446:	2301      	movs	r3, #1
   17448:	e7fb      	b.n	17442 <ble_ll_scan_get_addr_data_from_legacy+0x4e>
	...

0001744c <ble_ll_scan_req_backoff>:
{
   1744c:	b510      	push	{r4, lr}
    BLE_LL_ASSERT(scansm->backoff_count == 0);
   1744e:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
   17450:	bb03      	cbnz	r3, 17494 <ble_ll_scan_req_backoff+0x48>
   17452:	4604      	mov	r4, r0
    BLE_LL_ASSERT(scansm->scan_rsp_pending == 0);
   17454:	78c3      	ldrb	r3, [r0, #3]
   17456:	bb3b      	cbnz	r3, 174a8 <ble_ll_scan_req_backoff+0x5c>
    if (success) {
   17458:	2900      	cmp	r1, #0
   1745a:	d037      	beq.n	174cc <ble_ll_scan_req_backoff+0x80>
        scansm->scan_rsp_cons_fails = 0;
   1745c:	2300      	movs	r3, #0
   1745e:	7103      	strb	r3, [r0, #4]
        ++scansm->scan_rsp_cons_ok;
   17460:	7943      	ldrb	r3, [r0, #5]
   17462:	3301      	adds	r3, #1
   17464:	b2db      	uxtb	r3, r3
   17466:	7143      	strb	r3, [r0, #5]
        if (scansm->scan_rsp_cons_ok == 2) {
   17468:	2b02      	cmp	r3, #2
   1746a:	d027      	beq.n	174bc <ble_ll_scan_req_backoff+0x70>
        STATS_INC(ble_ll_stats, scan_req_txg);
   1746c:	4a28      	ldr	r2, [pc, #160]	; (17510 <ble_ll_scan_req_backoff+0xc4>)
   1746e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
   17472:	3301      	adds	r3, #1
   17474:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
   17478:	f012 fad8 	bl	29a2c <lrand48>
    scansm->backoff_count = rand() & (scansm->upper_limit - 1);
   1747c:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   1747e:	3b01      	subs	r3, #1
   17480:	b21b      	sxth	r3, r3
   17482:	4018      	ands	r0, r3
   17484:	b280      	uxth	r0, r0
    ++scansm->backoff_count;
   17486:	3001      	adds	r0, #1
   17488:	b280      	uxth	r0, r0
   1748a:	84e0      	strh	r0, [r4, #38]	; 0x26
    BLE_LL_ASSERT(scansm->backoff_count <= 256);
   1748c:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   17490:	d833      	bhi.n	174fa <ble_ll_scan_req_backoff+0xae>
}
   17492:	bd10      	pop	{r4, pc}
    BLE_LL_ASSERT(scansm->backoff_count == 0);
   17494:	f7f4 fea8 	bl	c1e8 <hal_debugger_connected>
   17498:	b100      	cbz	r0, 1749c <ble_ll_scan_req_backoff+0x50>
   1749a:	be01      	bkpt	0x0001
   1749c:	2300      	movs	r3, #0
   1749e:	461a      	mov	r2, r3
   174a0:	4619      	mov	r1, r3
   174a2:	4618      	mov	r0, r3
   174a4:	f7f5 f8da 	bl	c65c <__assert_func>
    BLE_LL_ASSERT(scansm->scan_rsp_pending == 0);
   174a8:	f7f4 fe9e 	bl	c1e8 <hal_debugger_connected>
   174ac:	b100      	cbz	r0, 174b0 <ble_ll_scan_req_backoff+0x64>
   174ae:	be01      	bkpt	0x0001
   174b0:	2300      	movs	r3, #0
   174b2:	461a      	mov	r2, r3
   174b4:	4619      	mov	r1, r3
   174b6:	4618      	mov	r0, r3
   174b8:	f7f5 f8d0 	bl	c65c <__assert_func>
            scansm->scan_rsp_cons_ok = 0;
   174bc:	2300      	movs	r3, #0
   174be:	7143      	strb	r3, [r0, #5]
            if (scansm->upper_limit > 1) {
   174c0:	8c83      	ldrh	r3, [r0, #36]	; 0x24
   174c2:	2b01      	cmp	r3, #1
   174c4:	d9d2      	bls.n	1746c <ble_ll_scan_req_backoff+0x20>
                scansm->upper_limit >>= 1;
   174c6:	085b      	lsrs	r3, r3, #1
   174c8:	8483      	strh	r3, [r0, #36]	; 0x24
   174ca:	e7cf      	b.n	1746c <ble_ll_scan_req_backoff+0x20>
        scansm->scan_rsp_cons_ok = 0;
   174cc:	2300      	movs	r3, #0
   174ce:	7143      	strb	r3, [r0, #5]
        ++scansm->scan_rsp_cons_fails;
   174d0:	7903      	ldrb	r3, [r0, #4]
   174d2:	3301      	adds	r3, #1
   174d4:	b2db      	uxtb	r3, r3
   174d6:	7103      	strb	r3, [r0, #4]
        if (scansm->scan_rsp_cons_fails == 2) {
   174d8:	2b02      	cmp	r3, #2
   174da:	d006      	beq.n	174ea <ble_ll_scan_req_backoff+0x9e>
        STATS_INC(ble_ll_stats, scan_req_txf);
   174dc:	4a0c      	ldr	r2, [pc, #48]	; (17510 <ble_ll_scan_req_backoff+0xc4>)
   174de:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
   174e2:	3301      	adds	r3, #1
   174e4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
   174e8:	e7c6      	b.n	17478 <ble_ll_scan_req_backoff+0x2c>
            scansm->scan_rsp_cons_fails = 0;
   174ea:	2300      	movs	r3, #0
   174ec:	7103      	strb	r3, [r0, #4]
            if (scansm->upper_limit < 256) {
   174ee:	8c83      	ldrh	r3, [r0, #36]	; 0x24
   174f0:	2bff      	cmp	r3, #255	; 0xff
   174f2:	d8f3      	bhi.n	174dc <ble_ll_scan_req_backoff+0x90>
                scansm->upper_limit <<= 1;
   174f4:	005b      	lsls	r3, r3, #1
   174f6:	8483      	strh	r3, [r0, #36]	; 0x24
   174f8:	e7f0      	b.n	174dc <ble_ll_scan_req_backoff+0x90>
    BLE_LL_ASSERT(scansm->backoff_count <= 256);
   174fa:	f7f4 fe75 	bl	c1e8 <hal_debugger_connected>
   174fe:	b100      	cbz	r0, 17502 <ble_ll_scan_req_backoff+0xb6>
   17500:	be01      	bkpt	0x0001
   17502:	2300      	movs	r3, #0
   17504:	461a      	mov	r2, r3
   17506:	4619      	mov	r1, r3
   17508:	4618      	mov	r0, r3
   1750a:	f7f5 f8a7 	bl	c65c <__assert_func>
   1750e:	bf00      	nop
   17510:	20003be0 	.word	0x20003be0

00017514 <ble_ll_scan_have_rxd_scan_rsp>:
{
   17514:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   17518:	4606      	mov	r6, r0
   1751a:	460f      	mov	r7, r1
   1751c:	4690      	mov	r8, r2
   1751e:	4699      	mov	r9, r3
    num_advs = g_ble_ll_scan_num_rsp_advs;
   17520:	4b17      	ldr	r3, [pc, #92]	; (17580 <ble_ll_scan_have_rxd_scan_rsp+0x6c>)
   17522:	781c      	ldrb	r4, [r3, #0]
    adv = &g_ble_ll_scan_rsp_advs[0];
   17524:	4d17      	ldr	r5, [pc, #92]	; (17584 <ble_ll_scan_have_rxd_scan_rsp+0x70>)
    while (num_advs) {
   17526:	e00c      	b.n	17542 <ble_ll_scan_have_rxd_scan_rsp+0x2e>
                if ((adv->sc_adv_flags & BLE_LL_SC_ADV_F_RANDOM_ADDR) == 0) {
   17528:	882b      	ldrh	r3, [r5, #0]
   1752a:	f013 0f01 	tst.w	r3, #1
   1752e:	d105      	bne.n	1753c <ble_ll_scan_have_rxd_scan_rsp+0x28>
                    if (ext_adv) {
   17530:	f1b8 0f00 	cmp.w	r8, #0
   17534:	d020      	beq.n	17578 <ble_ll_scan_have_rxd_scan_rsp+0x64>
                        if (adi == adv->adi) {
   17536:	886b      	ldrh	r3, [r5, #2]
   17538:	454b      	cmp	r3, r9
   1753a:	d01f      	beq.n	1757c <ble_ll_scan_have_rxd_scan_rsp+0x68>
        ++adv;
   1753c:	350a      	adds	r5, #10
        --num_advs;
   1753e:	3c01      	subs	r4, #1
   17540:	b2e4      	uxtb	r4, r4
    while (num_advs) {
   17542:	b1a4      	cbz	r4, 1756e <ble_ll_scan_have_rxd_scan_rsp+0x5a>
        if (!memcmp(&adv->adv_addr, addr, BLE_DEV_ADDR_LEN)) {
   17544:	2206      	movs	r2, #6
   17546:	4631      	mov	r1, r6
   17548:	1d28      	adds	r0, r5, #4
   1754a:	f7f6 ff6d 	bl	e428 <memcmp>
   1754e:	2800      	cmp	r0, #0
   17550:	d1f4      	bne.n	1753c <ble_ll_scan_have_rxd_scan_rsp+0x28>
            if (txadd) {
   17552:	2f00      	cmp	r7, #0
   17554:	d0e8      	beq.n	17528 <ble_ll_scan_have_rxd_scan_rsp+0x14>
                if (adv->sc_adv_flags & BLE_LL_SC_ADV_F_RANDOM_ADDR) {
   17556:	882b      	ldrh	r3, [r5, #0]
   17558:	f013 0f01 	tst.w	r3, #1
   1755c:	d0ee      	beq.n	1753c <ble_ll_scan_have_rxd_scan_rsp+0x28>
                    if (ext_adv) {
   1755e:	f1b8 0f00 	cmp.w	r8, #0
   17562:	d007      	beq.n	17574 <ble_ll_scan_have_rxd_scan_rsp+0x60>
                        if (adi == adv->adi) {
   17564:	886b      	ldrh	r3, [r5, #2]
   17566:	454b      	cmp	r3, r9
   17568:	d1e8      	bne.n	1753c <ble_ll_scan_have_rxd_scan_rsp+0x28>
                            return 1;
   1756a:	2001      	movs	r0, #1
   1756c:	e000      	b.n	17570 <ble_ll_scan_have_rxd_scan_rsp+0x5c>
    return 0;
   1756e:	2000      	movs	r0, #0
}
   17570:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                    return 1;
   17574:	2001      	movs	r0, #1
   17576:	e7fb      	b.n	17570 <ble_ll_scan_have_rxd_scan_rsp+0x5c>
                    return 1;
   17578:	2001      	movs	r0, #1
   1757a:	e7f9      	b.n	17570 <ble_ll_scan_have_rxd_scan_rsp+0x5c>
                            return 1;
   1757c:	2001      	movs	r0, #1
   1757e:	e7f7      	b.n	17570 <ble_ll_scan_have_rxd_scan_rsp+0x5c>
   17580:	20002690 	.word	0x20002690
   17584:	20004200 	.word	0x20004200

00017588 <ble_ll_scan_dup_update_legacy>:
{
   17588:	b570      	push	{r4, r5, r6, lr}
   1758a:	461e      	mov	r6, r3
    e = TAILQ_FIRST(&g_scan_dup_list);
   1758c:	4b15      	ldr	r3, [pc, #84]	; (175e4 <ble_ll_scan_dup_update_legacy+0x5c>)
   1758e:	681c      	ldr	r4, [r3, #0]
    BLE_LL_ASSERT(e && e->type == type && !memcmp(e->addr, addr, 6));
   17590:	b1a4      	cbz	r4, 175bc <ble_ll_scan_dup_update_legacy+0x34>
   17592:	4615      	mov	r5, r2
   17594:	f000 0001 	and.w	r0, r0, #1
   17598:	7823      	ldrb	r3, [r4, #0]
   1759a:	4283      	cmp	r3, r0
   1759c:	d10e      	bne.n	175bc <ble_ll_scan_dup_update_legacy+0x34>
   1759e:	2206      	movs	r2, #6
   175a0:	1c60      	adds	r0, r4, #1
   175a2:	f7f6 ff41 	bl	e428 <memcmp>
   175a6:	b948      	cbnz	r0, 175bc <ble_ll_scan_dup_update_legacy+0x34>
    if (subev == BLE_HCI_LE_SUBEV_DIRECT_ADV_RPT) {
   175a8:	2d0b      	cmp	r5, #11
   175aa:	d011      	beq.n	175d0 <ble_ll_scan_dup_update_legacy+0x48>
        if (evtype == BLE_HCI_ADV_RPT_EVTYPE_SCAN_RSP) {
   175ac:	2e04      	cmp	r6, #4
   175ae:	d014      	beq.n	175da <ble_ll_scan_dup_update_legacy+0x52>
            e->flags |= BLE_LL_SCAN_DUP_F_ADV_REPORT_SENT;
   175b0:	79e3      	ldrb	r3, [r4, #7]
   175b2:	f043 0301 	orr.w	r3, r3, #1
   175b6:	71e3      	strb	r3, [r4, #7]
}
   175b8:	2000      	movs	r0, #0
   175ba:	bd70      	pop	{r4, r5, r6, pc}
    BLE_LL_ASSERT(e && e->type == type && !memcmp(e->addr, addr, 6));
   175bc:	f7f4 fe14 	bl	c1e8 <hal_debugger_connected>
   175c0:	b100      	cbz	r0, 175c4 <ble_ll_scan_dup_update_legacy+0x3c>
   175c2:	be01      	bkpt	0x0001
   175c4:	2300      	movs	r3, #0
   175c6:	461a      	mov	r2, r3
   175c8:	4619      	mov	r1, r3
   175ca:	4618      	mov	r0, r3
   175cc:	f7f5 f846 	bl	c65c <__assert_func>
        e->flags |= BLE_LL_SCAN_DUP_F_DIR_ADV_REPORT_SENT;
   175d0:	79e3      	ldrb	r3, [r4, #7]
   175d2:	f043 0302 	orr.w	r3, r3, #2
   175d6:	71e3      	strb	r3, [r4, #7]
   175d8:	e7ee      	b.n	175b8 <ble_ll_scan_dup_update_legacy+0x30>
            e->flags |= BLE_LL_SCAN_DUP_F_SCAN_RSP_SENT;
   175da:	79e3      	ldrb	r3, [r4, #7]
   175dc:	f043 0304 	orr.w	r3, r3, #4
   175e0:	71e3      	strb	r3, [r4, #7]
   175e2:	e7e9      	b.n	175b8 <ble_ll_scan_dup_update_legacy+0x30>
   175e4:	20002730 	.word	0x20002730

000175e8 <ble_ll_scan_rx_filter>:
 *          1 = match
 *          2 = match, but do not scan
 */
static int
ble_ll_scan_rx_filter(struct ble_mbuf_hdr *hdr, struct ble_ll_scan_addr_data *addrd)
{
   175e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   175ec:	4606      	mov	r6, r0
   175ee:	460c      	mov	r4, r1
    struct ble_ll_scan_sm *scansm = &g_ble_ll_scan_sm;
    struct ble_ll_scan_params *scanp = scansm->scanp;
   175f0:	4b46      	ldr	r3, [pc, #280]	; (1770c <ble_ll_scan_rx_filter+0x124>)
   175f2:	f8d3 806c 	ldr.w	r8, [r3, #108]	; 0x6c
#endif
    bool scan_req_allowed = true;
    int resolved = 0;

    /* Use AdvA as initial advertiser address, we may try to resolve it later */
    addrd->adv_addr = addrd->adva;
   175f6:	684b      	ldr	r3, [r1, #4]
   175f8:	614b      	str	r3, [r1, #20]
    addrd->adv_addr_type = addrd->adva_type;
   175fa:	784b      	ldrb	r3, [r1, #1]
   175fc:	740b      	strb	r3, [r1, #16]

#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LL_PRIVACY)
    /* By default, assume AdvA is not resolved */
    rxinfo->rpa_index = -1;
   175fe:	23ff      	movs	r3, #255	; 0xff
   17600:	71c3      	strb	r3, [r0, #7]

    switch (ble_ll_addr_subtype(addrd->adva, addrd->adva_type)) {
   17602:	7849      	ldrb	r1, [r1, #1]
   17604:	6860      	ldr	r0, [r4, #4]
   17606:	f7f9 f81e 	bl	10646 <ble_ll_addr_subtype>
   1760a:	4605      	mov	r5, r0
   1760c:	b328      	cbz	r0, 1765a <ble_ll_scan_rx_filter+0x72>
   1760e:	2801      	cmp	r0, #1
   17610:	d130      	bne.n	17674 <ble_ll_scan_rx_filter+0x8c>
         * Only resolve if packet actually contained AdvA.
         * In extended advertising PDUs we may use RL index from a PDU that
         * already had AdvA (e.g. ADV_EXT_IND in case of AUX_ADV_IND without
         * AdvA). In legacy advertising PDUs we always need to resolve AdvA.
         */
        if (addrd->adva_present) {
   17612:	7823      	ldrb	r3, [r4, #0]
   17614:	b1bb      	cbz	r3, 17646 <ble_ll_scan_rx_filter+0x5e>
            rxinfo->rpa_index = ble_hw_resolv_list_match();
   17616:	f001 ff87 	bl	19528 <ble_hw_resolv_list_match>
   1761a:	b240      	sxtb	r0, r0
   1761c:	71f0      	strb	r0, [r6, #7]
            BLE_LL_ASSERT(false);
            rxinfo->rpa_index = -1;
#endif
        }

        if (rxinfo->rpa_index < 0) {
   1761e:	2800      	cmp	r0, #0
   17620:	db3f      	blt.n	176a2 <ble_ll_scan_rx_filter+0xba>
            aux_data->rpa_index = rxinfo->rpa_index;
        }
#endif

        /* Use resolved identity address as advertiser address */
        rl = &g_ble_ll_resolv_list[rxinfo->rpa_index];
   17622:	2336      	movs	r3, #54	; 0x36
   17624:	fb03 f000 	mul.w	r0, r3, r0
   17628:	4a39      	ldr	r2, [pc, #228]	; (17710 <ble_ll_scan_rx_filter+0x128>)
   1762a:	1887      	adds	r7, r0, r2
        addrd->adv_addr = rl->rl_identity_addr;
   1762c:	f100 0320 	add.w	r3, r0, #32
   17630:	4413      	add	r3, r2
   17632:	3304      	adds	r3, #4
   17634:	6163      	str	r3, [r4, #20]
        addrd->adv_addr_type = rl->rl_addr_type;
   17636:	5c83      	ldrb	r3, [r0, r2]
   17638:	7423      	strb	r3, [r4, #16]
        addrd->rl = rl;
   1763a:	61a7      	str	r7, [r4, #24]

        rxinfo->flags |= BLE_MBUF_HDR_F_RESOLVED;
   1763c:	8833      	ldrh	r3, [r6, #0]
   1763e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   17642:	8033      	strh	r3, [r6, #0]
        resolved = 1;
        break;
   17644:	e018      	b.n	17678 <ble_ll_scan_rx_filter+0x90>
            BLE_LL_ASSERT(false);
   17646:	f7f4 fdcf 	bl	c1e8 <hal_debugger_connected>
   1764a:	b100      	cbz	r0, 1764e <ble_ll_scan_rx_filter+0x66>
   1764c:	be01      	bkpt	0x0001
   1764e:	2300      	movs	r3, #0
   17650:	461a      	mov	r2, r3
   17652:	4619      	mov	r1, r3
   17654:	4618      	mov	r0, r3
   17656:	f7f5 f801 	bl	c65c <__assert_func>
    case BLE_LL_ADDR_SUBTYPE_IDENTITY:
        /*
         * If AdvA is an identity address, we need to check if that device was
         * added to RL in order to use proper privacy mode.
         */
        rl = ble_ll_resolv_list_find(addrd->adva, addrd->adva_type);
   1765a:	7861      	ldrb	r1, [r4, #1]
   1765c:	6860      	ldr	r0, [r4, #4]
   1765e:	f7ff fac7 	bl	16bf0 <ble_ll_resolv_list_find>
        if (!rl) {
   17662:	4607      	mov	r7, r0
   17664:	b140      	cbz	r0, 17678 <ble_ll_scan_rx_filter+0x90>
            break;
        }

        addrd->rl = rl;
   17666:	61a0      	str	r0, [r4, #24]

        /* Ignore device if using network privacy mode and it has IRK */
        if ((rl->rl_priv_mode == BLE_HCI_PRIVACY_NETWORK) && rl->rl_has_peer) {
   17668:	7843      	ldrb	r3, [r0, #1]
   1766a:	b92b      	cbnz	r3, 17678 <ble_ll_scan_rx_filter+0x90>
   1766c:	78c3      	ldrb	r3, [r0, #3]
   1766e:	b11b      	cbz	r3, 17678 <ble_ll_scan_rx_filter+0x90>
            return 0;
   17670:	462b      	mov	r3, r5
   17672:	e038      	b.n	176e6 <ble_ll_scan_rx_filter+0xfe>
    int resolved = 0;
   17674:	2500      	movs	r5, #0
    struct ble_ll_resolv_entry *rl = NULL;
   17676:	462f      	mov	r7, r5
    default:
        /* NRPA goes through filtering policy directly */
        break;
    }

    if (addrd->targeta) {
   17678:	68e0      	ldr	r0, [r4, #12]
   1767a:	b360      	cbz	r0, 176d6 <ble_ll_scan_rx_filter+0xee>
        switch (ble_ll_addr_subtype(addrd->targeta, addrd->targeta_type)) {
   1767c:	7a21      	ldrb	r1, [r4, #8]
   1767e:	f7f8 ffe2 	bl	10646 <ble_ll_addr_subtype>
   17682:	4603      	mov	r3, r0
   17684:	b1b8      	cbz	r0, 176b6 <ble_ll_scan_rx_filter+0xce>
   17686:	2801      	cmp	r0, #1
   17688:	d130      	bne.n	176ec <ble_ll_scan_rx_filter+0x104>
        case BLE_LL_ADDR_SUBTYPE_RPA:
            /* Check if TargetA can be resolved using the same RL entry as AdvA */
            if (rl && ble_ll_resolv_rpa(addrd->targeta, rl->rl_local_irk)) {
   1768a:	b16f      	cbz	r7, 176a8 <ble_ll_scan_rx_filter+0xc0>
   1768c:	1d39      	adds	r1, r7, #4
   1768e:	68e0      	ldr	r0, [r4, #12]
   17690:	f7ff fcd0 	bl	17034 <ble_ll_resolv_rpa>
   17694:	b140      	cbz	r0, 176a8 <ble_ll_scan_rx_filter+0xc0>
                rxinfo->flags |= BLE_MBUF_HDR_F_TARGETA_RESOLVED;
   17696:	8833      	ldrh	r3, [r6, #0]
   17698:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   1769c:	8033      	strh	r3, [r6, #0]
    bool scan_req_allowed = true;
   1769e:	2601      	movs	r6, #1
                break;
   176a0:	e01a      	b.n	176d8 <ble_ll_scan_rx_filter+0xf0>
    int resolved = 0;
   176a2:	2500      	movs	r5, #0
    struct ble_ll_resolv_entry *rl = NULL;
   176a4:	462f      	mov	r7, r5
   176a6:	e7e7      	b.n	17678 <ble_ll_scan_rx_filter+0x90>
            }

            /* Check if scan filter policy allows unresolved RPAs to be processed */
            if (!(scanp->scan_filt_policy & 0x02)) {
   176a8:	f898 3002 	ldrb.w	r3, [r8, #2]
   176ac:	f013 0f02 	tst.w	r3, #2
   176b0:	d027      	beq.n	17702 <ble_ll_scan_rx_filter+0x11a>
            /*
             * We will notify host as requited by scan policy, but make sure we
             * do not send scan request since we do not know if this is directed
             * to us.
             */
            scan_req_allowed = false;
   176b2:	2600      	movs	r6, #0
   176b4:	e010      	b.n	176d8 <ble_ll_scan_rx_filter+0xf0>
            break;
        case BLE_LL_ADDR_SUBTYPE_IDENTITY:
            /* We shall ignore identity in TargetA if we are using RPA */
            if ((scanp->own_addr_type & 0x02) && rl && rl->rl_has_local) {
   176b6:	f898 2001 	ldrb.w	r2, [r8, #1]
   176ba:	f012 0f02 	tst.w	r2, #2
   176be:	d002      	beq.n	176c6 <ble_ll_scan_rx_filter+0xde>
   176c0:	b10f      	cbz	r7, 176c6 <ble_ll_scan_rx_filter+0xde>
   176c2:	78ba      	ldrb	r2, [r7, #2]
   176c4:	b97a      	cbnz	r2, 176e6 <ble_ll_scan_rx_filter+0xfe>
                return 0;
            }
            /* Ignore if not directed to us */
            if (!ble_ll_is_our_devaddr(addrd->targeta, addrd->targeta_type)) {
   176c6:	7a21      	ldrb	r1, [r4, #8]
   176c8:	68e0      	ldr	r0, [r4, #12]
   176ca:	f7f9 f851 	bl	10770 <ble_ll_is_our_devaddr>
   176ce:	4603      	mov	r3, r0
   176d0:	b148      	cbz	r0, 176e6 <ble_ll_scan_rx_filter+0xfe>
    bool scan_req_allowed = true;
   176d2:	2601      	movs	r6, #1
   176d4:	e000      	b.n	176d8 <ble_ll_scan_rx_filter+0xf0>
   176d6:	2601      	movs	r6, #1
        return 0;
    }
#endif

    /* Check on WL if required by scan filter policy */
    if (scanp->scan_filt_policy & 0x01) {
   176d8:	f898 3002 	ldrb.w	r3, [r8, #2]
   176dc:	f013 0f01 	tst.w	r3, #1
   176e0:	d106      	bne.n	176f0 <ble_ll_scan_rx_filter+0x108>
        if (!ble_ll_whitelist_match(addrd->adv_addr, addrd->adv_addr_type, resolved)) {
            return 0;
        }
    }

    return scan_req_allowed ? 1 : 2;
   176e2:	b186      	cbz	r6, 17706 <ble_ll_scan_rx_filter+0x11e>
   176e4:	2301      	movs	r3, #1
}
   176e6:	4618      	mov	r0, r3
   176e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bool scan_req_allowed = true;
   176ec:	2601      	movs	r6, #1
   176ee:	e7f3      	b.n	176d8 <ble_ll_scan_rx_filter+0xf0>
        if (!ble_ll_whitelist_match(addrd->adv_addr, addrd->adv_addr_type, resolved)) {
   176f0:	462a      	mov	r2, r5
   176f2:	7c21      	ldrb	r1, [r4, #16]
   176f4:	6960      	ldr	r0, [r4, #20]
   176f6:	f001 fd35 	bl	19164 <ble_ll_whitelist_match>
   176fa:	4603      	mov	r3, r0
   176fc:	2800      	cmp	r0, #0
   176fe:	d1f0      	bne.n	176e2 <ble_ll_scan_rx_filter+0xfa>
   17700:	e7f1      	b.n	176e6 <ble_ll_scan_rx_filter+0xfe>
                return 0;
   17702:	2300      	movs	r3, #0
   17704:	e7ef      	b.n	176e6 <ble_ll_scan_rx_filter+0xfe>
    return scan_req_allowed ? 1 : 2;
   17706:	2302      	movs	r3, #2
   17708:	e7ed      	b.n	176e6 <ble_ll_scan_rx_filter+0xfe>
   1770a:	bf00      	nop
   1770c:	200026a8 	.word	0x200026a8
   17710:	20004100 	.word	0x20004100

00017714 <ble_ll_scan_rx_isr_on_legacy>:

static int
ble_ll_scan_rx_isr_on_legacy(uint8_t pdu_type, uint8_t *rxbuf,
                             struct ble_mbuf_hdr *hdr,
                             struct ble_ll_scan_addr_data *addrd)
{
   17714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17716:	4606      	mov	r6, r0
   17718:	4614      	mov	r4, r2
   1771a:	461d      	mov	r5, r3
    struct ble_ll_scan_sm *scansm = &g_ble_ll_scan_sm;
    struct ble_ll_scan_params *scanp = scansm->scanp;
   1771c:	4b27      	ldr	r3, [pc, #156]	; (177bc <ble_ll_scan_rx_isr_on_legacy+0xa8>)
   1771e:	6edf      	ldr	r7, [r3, #108]	; 0x6c
    struct ble_mbuf_hdr_rxinfo *rxinfo = &hdr->rxinfo;
    uint8_t sreq_adva_type;
    uint8_t *sreq_adva;
    int rc;

    ble_ll_scan_get_addr_data_from_legacy(pdu_type, rxbuf, addrd);
   17720:	462a      	mov	r2, r5
   17722:	f7ff fe67 	bl	173f4 <ble_ll_scan_get_addr_data_from_legacy>

    if (pdu_type == BLE_ADV_PDU_TYPE_SCAN_RSP) {
   17726:	2e04      	cmp	r6, #4
   17728:	d127      	bne.n	1777a <ble_ll_scan_rx_isr_on_legacy+0x66>
        if (!BLE_MBUF_HDR_SCAN_RSP_RXD(hdr)) {
   1772a:	8823      	ldrh	r3, [r4, #0]
   1772c:	f013 0f08 	tst.w	r3, #8
   17730:	d03a      	beq.n	177a8 <ble_ll_scan_rx_isr_on_legacy+0x94>
             * update backoff.
             */
            return -1;
        }

        sreq_adva_type = !!(scansm->pdu_data.hdr_byte & BLE_ADV_PDU_HDR_RXADD_MASK);
   17732:	4b22      	ldr	r3, [pc, #136]	; (177bc <ble_ll_scan_rx_isr_on_legacy+0xa8>)
   17734:	7d9a      	ldrb	r2, [r3, #22]

        /*
         * Ignore scan response if AdvA does not match AdvA in request and also
         * update backoff as if there was no scan response.
         */
        if ((addrd->adva_type != sreq_adva_type) ||
   17736:	786b      	ldrb	r3, [r5, #1]
   17738:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   1773c:	d116      	bne.n	1776c <ble_ll_scan_rx_isr_on_legacy+0x58>
            memcmp(addrd->adva, sreq_adva, BLE_DEV_ADDR_LEN)) {
   1773e:	2206      	movs	r2, #6
   17740:	491f      	ldr	r1, [pc, #124]	; (177c0 <ble_ll_scan_rx_isr_on_legacy+0xac>)
   17742:	6868      	ldr	r0, [r5, #4]
   17744:	f7f6 fe70 	bl	e428 <memcmp>
        if ((addrd->adva_type != sreq_adva_type) ||
   17748:	4605      	mov	r5, r0
   1774a:	b978      	cbnz	r0, 1776c <ble_ll_scan_rx_isr_on_legacy+0x58>
        /*
         * We are not pushing this one through filters so need to update
         * rpa_index here as otherwise pkt_in won't be able to determine
         * advertiser address properly.
         */
        rxinfo->rpa_index = ble_hw_resolv_list_match();
   1774c:	f001 feec 	bl	19528 <ble_hw_resolv_list_match>
   17750:	b240      	sxtb	r0, r0
   17752:	71e0      	strb	r0, [r4, #7]
        if (rxinfo->rpa_index >= 0) {
   17754:	2800      	cmp	r0, #0
   17756:	db03      	blt.n	17760 <ble_ll_scan_rx_isr_on_legacy+0x4c>
            rxinfo->flags |= BLE_MBUF_HDR_F_RESOLVED;
   17758:	8823      	ldrh	r3, [r4, #0]
   1775a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   1775e:	8023      	strh	r3, [r4, #0]
        }
#endif

        rxinfo->flags |= BLE_MBUF_HDR_F_DEVMATCH;
   17760:	8823      	ldrh	r3, [r4, #0]
   17762:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   17766:	8023      	strh	r3, [r4, #0]
    }

    return (scanp->scan_type == BLE_SCAN_TYPE_ACTIVE) &&
           ((pdu_type == BLE_ADV_PDU_TYPE_ADV_IND) ||
            (pdu_type == BLE_ADV_PDU_TYPE_ADV_SCAN_IND));
}
   17768:	4628      	mov	r0, r5
   1776a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            ble_ll_scan_req_backoff(scansm, 0);
   1776c:	2100      	movs	r1, #0
   1776e:	4813      	ldr	r0, [pc, #76]	; (177bc <ble_ll_scan_rx_isr_on_legacy+0xa8>)
   17770:	f7ff fe6c 	bl	1744c <ble_ll_scan_req_backoff>
            return -1;
   17774:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   17778:	e7f6      	b.n	17768 <ble_ll_scan_rx_isr_on_legacy+0x54>
    rc = ble_ll_scan_rx_filter(hdr, addrd);
   1777a:	4629      	mov	r1, r5
   1777c:	4620      	mov	r0, r4
   1777e:	f7ff ff33 	bl	175e8 <ble_ll_scan_rx_filter>
    if (!rc) {
   17782:	4605      	mov	r5, r0
   17784:	2800      	cmp	r0, #0
   17786:	d0ef      	beq.n	17768 <ble_ll_scan_rx_isr_on_legacy+0x54>
    rxinfo->flags |= BLE_MBUF_HDR_F_DEVMATCH;
   17788:	8823      	ldrh	r3, [r4, #0]
   1778a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1778e:	8023      	strh	r3, [r4, #0]
    if (rc == 2) {
   17790:	2802      	cmp	r0, #2
   17792:	d00c      	beq.n	177ae <ble_ll_scan_rx_isr_on_legacy+0x9a>
    return (scanp->scan_type == BLE_SCAN_TYPE_ACTIVE) &&
   17794:	793b      	ldrb	r3, [r7, #4]
   17796:	2b01      	cmp	r3, #1
   17798:	d001      	beq.n	1779e <ble_ll_scan_rx_isr_on_legacy+0x8a>
   1779a:	2500      	movs	r5, #0
   1779c:	e7e4      	b.n	17768 <ble_ll_scan_rx_isr_on_legacy+0x54>
   1779e:	b146      	cbz	r6, 177b2 <ble_ll_scan_rx_isr_on_legacy+0x9e>
           ((pdu_type == BLE_ADV_PDU_TYPE_ADV_IND) ||
   177a0:	2e06      	cmp	r6, #6
   177a2:	d008      	beq.n	177b6 <ble_ll_scan_rx_isr_on_legacy+0xa2>
    return (scanp->scan_type == BLE_SCAN_TYPE_ACTIVE) &&
   177a4:	2500      	movs	r5, #0
   177a6:	e7df      	b.n	17768 <ble_ll_scan_rx_isr_on_legacy+0x54>
            return -1;
   177a8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   177ac:	e7dc      	b.n	17768 <ble_ll_scan_rx_isr_on_legacy+0x54>
        return 0;
   177ae:	2500      	movs	r5, #0
   177b0:	e7da      	b.n	17768 <ble_ll_scan_rx_isr_on_legacy+0x54>
    return (scanp->scan_type == BLE_SCAN_TYPE_ACTIVE) &&
   177b2:	2501      	movs	r5, #1
   177b4:	e7d8      	b.n	17768 <ble_ll_scan_rx_isr_on_legacy+0x54>
   177b6:	2501      	movs	r5, #1
   177b8:	e7d6      	b.n	17768 <ble_ll_scan_rx_isr_on_legacy+0x54>
   177ba:	bf00      	nop
   177bc:	200026a8 	.word	0x200026a8
   177c0:	200026c5 	.word	0x200026c5

000177c4 <ble_ll_scan_req_tx_pdu_cb>:
{
   177c4:	b410      	push	{r4}
    memcpy(dptr, pdu_data->scana, BLE_DEV_ADDR_LEN);
   177c6:	460b      	mov	r3, r1
   177c8:	f853 4f17 	ldr.w	r4, [r3, #23]!
   177cc:	6004      	str	r4, [r0, #0]
   177ce:	889b      	ldrh	r3, [r3, #4]
   177d0:	8083      	strh	r3, [r0, #4]
    memcpy(dptr + BLE_DEV_ADDR_LEN, pdu_data->adva, BLE_DEV_ADDR_LEN);
   177d2:	460b      	mov	r3, r1
   177d4:	f853 4f1d 	ldr.w	r4, [r3, #29]!
   177d8:	f8c0 4006 	str.w	r4, [r0, #6]
   177dc:	889b      	ldrh	r3, [r3, #4]
   177de:	8143      	strh	r3, [r0, #10]
    *hdr_byte = pdu_data->hdr_byte;
   177e0:	7d8b      	ldrb	r3, [r1, #22]
   177e2:	7013      	strb	r3, [r2, #0]
}
   177e4:	200c      	movs	r0, #12
   177e6:	bc10      	pop	{r4}
   177e8:	4770      	bx	lr

000177ea <ble_ll_scan_refresh_nrpa>:
{
   177ea:	b538      	push	{r3, r4, r5, lr}
   177ec:	4604      	mov	r4, r0
    return os_time_get();
   177ee:	f7f5 ff41 	bl	d674 <os_time_get>
    if ((ble_npl_stime_t)(now - scansm->scan_nrpa_timer) >= 0) {
   177f2:	68e3      	ldr	r3, [r4, #12]
   177f4:	1ac3      	subs	r3, r0, r3
   177f6:	2b00      	cmp	r3, #0
   177f8:	db0d      	blt.n	17816 <ble_ll_scan_refresh_nrpa+0x2c>
   177fa:	4605      	mov	r5, r0
        ble_ll_rand_data_get(scansm->scan_nrpa, BLE_DEV_ADDR_LEN);
   177fc:	2106      	movs	r1, #6
   177fe:	f104 0010 	add.w	r0, r4, #16
   17802:	f7ff f8a3 	bl	1694c <ble_ll_rand_data_get>
        scansm->scan_nrpa[5] &= ~0xc0;
   17806:	7d63      	ldrb	r3, [r4, #21]
   17808:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1780c:	7563      	strb	r3, [r4, #21]
        scansm->scan_nrpa_timer = now + ble_ll_resolv_get_rpa_tmo();
   1780e:	f7ff fb83 	bl	16f18 <ble_ll_resolv_get_rpa_tmo>
   17812:	4428      	add	r0, r5
   17814:	60e0      	str	r0, [r4, #12]
}
   17816:	bd38      	pop	{r3, r4, r5, pc}

00017818 <ble_ll_scan_req_pdu_prepare>:
{
   17818:	b570      	push	{r4, r5, r6, lr}
   1781a:	b082      	sub	sp, #8
   1781c:	4604      	mov	r4, r0
   1781e:	460e      	mov	r6, r1
    if (adv_addr_type) {
   17820:	bb1a      	cbnz	r2, 1786a <ble_ll_scan_req_pdu_prepare+0x52>
    hdr_byte = BLE_ADV_PDU_TYPE_SCAN_REQ;
   17822:	2503      	movs	r5, #3
    if (scansm->own_addr_type & 0x01) {
   17824:	7861      	ldrb	r1, [r4, #1]
   17826:	f011 0f01 	tst.w	r1, #1
   1782a:	d020      	beq.n	1786e <ble_ll_scan_req_pdu_prepare+0x56>
        hdr_byte |= BLE_ADV_PDU_HDR_TXADD_RAND;
   1782c:	f045 0540 	orr.w	r5, r5, #64	; 0x40
        scana = g_random_addr;
   17830:	4a13      	ldr	r2, [pc, #76]	; (17880 <ble_ll_scan_req_pdu_prepare+0x68>)
    if (scansm->own_addr_type & 0x02) {
   17832:	f011 0f02 	tst.w	r1, #2
   17836:	d009      	beq.n	1784c <ble_ll_scan_req_pdu_prepare+0x34>
        if (rl && rl->rl_has_local) {
   17838:	b10b      	cbz	r3, 1783e <ble_ll_scan_req_pdu_prepare+0x26>
   1783a:	789a      	ldrb	r2, [r3, #2]
   1783c:	b9ca      	cbnz	r2, 17872 <ble_ll_scan_req_pdu_prepare+0x5a>
            ble_ll_scan_refresh_nrpa(scansm);
   1783e:	4620      	mov	r0, r4
   17840:	f7ff ffd3 	bl	177ea <ble_ll_scan_refresh_nrpa>
            scana = scansm->scan_nrpa;
   17844:	f104 0210 	add.w	r2, r4, #16
        hdr_byte |= BLE_ADV_PDU_HDR_TXADD_RAND;
   17848:	f045 0540 	orr.w	r5, r5, #64	; 0x40
    pdu_data->hdr_byte = hdr_byte;
   1784c:	75a5      	strb	r5, [r4, #22]
    memcpy(pdu_data->scana, scana, BLE_DEV_ADDR_LEN);
   1784e:	6813      	ldr	r3, [r2, #0]
   17850:	f8c4 3017 	str.w	r3, [r4, #23]
   17854:	8893      	ldrh	r3, [r2, #4]
   17856:	f8a4 301b 	strh.w	r3, [r4, #27]
    memcpy(pdu_data->adva, adv_addr, BLE_DEV_ADDR_LEN);
   1785a:	6833      	ldr	r3, [r6, #0]
   1785c:	f8c4 301d 	str.w	r3, [r4, #29]
   17860:	88b3      	ldrh	r3, [r6, #4]
   17862:	f8a4 3021 	strh.w	r3, [r4, #33]	; 0x21
}
   17866:	b002      	add	sp, #8
   17868:	bd70      	pop	{r4, r5, r6, pc}
        hdr_byte |= BLE_ADV_PDU_HDR_RXADD_RAND;
   1786a:	2583      	movs	r5, #131	; 0x83
   1786c:	e7da      	b.n	17824 <ble_ll_scan_req_pdu_prepare+0xc>
        scana = g_dev_addr;
   1786e:	4a05      	ldr	r2, [pc, #20]	; (17884 <ble_ll_scan_req_pdu_prepare+0x6c>)
   17870:	e7df      	b.n	17832 <ble_ll_scan_req_pdu_prepare+0x1a>
            ble_ll_resolv_get_priv_addr(rl, 1, rpa);
   17872:	466a      	mov	r2, sp
   17874:	2101      	movs	r1, #1
   17876:	4618      	mov	r0, r3
   17878:	f7ff fb54 	bl	16f24 <ble_ll_resolv_get_priv_addr>
            scana = rpa;
   1787c:	466a      	mov	r2, sp
   1787e:	e7e3      	b.n	17848 <ble_ll_scan_req_pdu_prepare+0x30>
   17880:	20003cec 	.word	0x20003cec
   17884:	20003cf4 	.word	0x20003cf4

00017888 <ble_ll_scan_send_scan_req>:

static bool
ble_ll_scan_send_scan_req(uint8_t pdu_type, uint8_t *rxbuf,
                          struct ble_mbuf_hdr *hdr,
                          struct ble_ll_scan_addr_data *addrd)
{
   17888:	b570      	push	{r4, r5, r6, lr}
   1788a:	4615      	mov	r5, r2
   1788c:	461c      	mov	r4, r3
        is_ext_adv = true;
    }
#endif

    /* Check if we already scanned this device successfully */
    if (ble_ll_scan_have_rxd_scan_rsp(addrd->adv_addr, addrd->adv_addr_type,
   1788e:	2300      	movs	r3, #0
   17890:	461a      	mov	r2, r3
   17892:	7c21      	ldrb	r1, [r4, #16]
   17894:	6960      	ldr	r0, [r4, #20]
   17896:	f7ff fe3d 	bl	17514 <ble_ll_scan_have_rxd_scan_rsp>
   1789a:	bb40      	cbnz	r0, 178ee <ble_ll_scan_send_scan_req+0x66>
                                      is_ext_adv, adi)) {
        return false;
    }

    /* Better not be a scan response pending */
    BLE_LL_ASSERT(scansm->scan_rsp_pending == 0);
   1789c:	4b17      	ldr	r3, [pc, #92]	; (178fc <ble_ll_scan_send_scan_req+0x74>)
   1789e:	78db      	ldrb	r3, [r3, #3]
   178a0:	b9db      	cbnz	r3, 178da <ble_ll_scan_send_scan_req+0x52>

    /* We want to send a request. See if backoff allows us */
    if (scansm->backoff_count > 0) {
   178a2:	4b16      	ldr	r3, [pc, #88]	; (178fc <ble_ll_scan_send_scan_req+0x74>)
   178a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
   178a6:	b123      	cbz	r3, 178b2 <ble_ll_scan_send_scan_req+0x2a>
        if (--scansm->backoff_count != 0) {
   178a8:	3b01      	subs	r3, #1
   178aa:	b29b      	uxth	r3, r3
   178ac:	4a13      	ldr	r2, [pc, #76]	; (178fc <ble_ll_scan_send_scan_req+0x74>)
   178ae:	84d3      	strh	r3, [r2, #38]	; 0x26
   178b0:	b9fb      	cbnz	r3, 178f2 <ble_ll_scan_send_scan_req+0x6a>
        return false;
    }
#endif

    /* Use original AdvA in scan request (Core 5.1, Vol 6, Part B, section 6.3) */
    ble_ll_scan_req_pdu_prepare(scansm, addrd->adva, addrd->adva_type, addrd->rl);
   178b2:	4e12      	ldr	r6, [pc, #72]	; (178fc <ble_ll_scan_send_scan_req+0x74>)
   178b4:	69a3      	ldr	r3, [r4, #24]
   178b6:	7862      	ldrb	r2, [r4, #1]
   178b8:	6861      	ldr	r1, [r4, #4]
   178ba:	4630      	mov	r0, r6
   178bc:	f7ff ffac 	bl	17818 <ble_ll_scan_req_pdu_prepare>

    rc = ble_phy_tx(ble_ll_scan_req_tx_pdu_cb, scansm, BLE_PHY_TRANSITION_TX_RX);
   178c0:	2202      	movs	r2, #2
   178c2:	4631      	mov	r1, r6
   178c4:	480e      	ldr	r0, [pc, #56]	; (17900 <ble_ll_scan_send_scan_req+0x78>)
   178c6:	f002 fc31 	bl	1a12c <ble_phy_tx>
    if (rc) {
   178ca:	b9a0      	cbnz	r0, 178f6 <ble_ll_scan_send_scan_req+0x6e>
        return false;
    }

    scansm->scan_rsp_pending = 1;
   178cc:	2001      	movs	r0, #1
   178ce:	70f0      	strb	r0, [r6, #3]
    rxinfo->flags |= BLE_MBUF_HDR_F_SCAN_REQ_TXD;
   178d0:	882b      	ldrh	r3, [r5, #0]
   178d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   178d6:	802b      	strh	r3, [r5, #0]
        scansm->cur_aux_data = ble_ll_scan_aux_data_ref(aux_data);
        STATS_INC(ble_ll_stats, aux_scan_req_tx);
    }
#endif

    return true;
   178d8:	e00a      	b.n	178f0 <ble_ll_scan_send_scan_req+0x68>
    BLE_LL_ASSERT(scansm->scan_rsp_pending == 0);
   178da:	f7f4 fc85 	bl	c1e8 <hal_debugger_connected>
   178de:	b100      	cbz	r0, 178e2 <ble_ll_scan_send_scan_req+0x5a>
   178e0:	be01      	bkpt	0x0001
   178e2:	2300      	movs	r3, #0
   178e4:	461a      	mov	r2, r3
   178e6:	4619      	mov	r1, r3
   178e8:	4618      	mov	r0, r3
   178ea:	f7f4 feb7 	bl	c65c <__assert_func>
        return false;
   178ee:	2000      	movs	r0, #0
}
   178f0:	bd70      	pop	{r4, r5, r6, pc}
            return false;
   178f2:	2000      	movs	r0, #0
   178f4:	e7fc      	b.n	178f0 <ble_ll_scan_send_scan_req+0x68>
        return false;
   178f6:	2000      	movs	r0, #0
   178f8:	e7fa      	b.n	178f0 <ble_ll_scan_send_scan_req+0x68>
   178fa:	bf00      	nop
   178fc:	200026a8 	.word	0x200026a8
   17900:	000177c5 	.word	0x000177c5

00017904 <ble_ll_scan_timer_cb>:
 *
 * @param arg Pointer to scan state machine.
 */
void
ble_ll_scan_timer_cb(void *arg)
{
   17904:	b508      	push	{r3, lr}
    struct ble_ll_scan_sm *scansm;

    scansm = (struct ble_ll_scan_sm *)arg;
    ble_ll_event_send(&scansm->scan_sched_ev);
   17906:	302c      	adds	r0, #44	; 0x2c
   17908:	f7f9 f866 	bl	109d8 <ble_ll_event_send>
}
   1790c:	bd08      	pop	{r3, pc}
	...

00017910 <ble_ll_scan_start>:
{
   17910:	b570      	push	{r4, r5, r6, lr}
   17912:	b082      	sub	sp, #8
    struct ble_ll_scan_params *scanp = scansm->scanp;
   17914:	6ec5      	ldr	r5, [r0, #108]	; 0x6c
    BLE_LL_ASSERT(scansm->scan_rsp_pending == 0);
   17916:	78c3      	ldrb	r3, [r0, #3]
   17918:	2b00      	cmp	r3, #0
   1791a:	d130      	bne.n	1797e <ble_ll_scan_start+0x6e>
   1791c:	460c      	mov	r4, r1
    ble_ll_get_chan_to_scan(scansm, &scan_chan, &phy);
   1791e:	466a      	mov	r2, sp
   17920:	f10d 0107 	add.w	r1, sp, #7
   17924:	f7ff fd2c 	bl	17380 <ble_ll_get_chan_to_scan>
    BLE_LL_ASSERT(!sch || scan_chan < BLE_PHY_ADV_CHAN_START);
   17928:	b11c      	cbz	r4, 17932 <ble_ll_scan_start+0x22>
   1792a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1792e:	2b24      	cmp	r3, #36	; 0x24
   17930:	d82f      	bhi.n	17992 <ble_ll_scan_start+0x82>
    BLE_LL_ASSERT(sch || scan_chan >= BLE_PHY_ADV_CHAN_START);
   17932:	2c00      	cmp	r4, #0
   17934:	d037      	beq.n	179a6 <ble_ll_scan_start+0x96>
    rc = ble_phy_setchan(scan_chan, BLE_ACCESS_ADDR_ADV, BLE_LL_CRCINIT_ADV);
   17936:	4a39      	ldr	r2, [pc, #228]	; (17a1c <ble_ll_scan_start+0x10c>)
   17938:	4939      	ldr	r1, [pc, #228]	; (17a20 <ble_ll_scan_start+0x110>)
   1793a:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1793e:	f002 f9a3 	bl	19c88 <ble_phy_setchan>
    BLE_LL_ASSERT(rc == 0);
   17942:	4606      	mov	r6, r0
   17944:	2800      	cmp	r0, #0
   17946:	d13c      	bne.n	179c2 <ble_ll_scan_start+0xb2>
    ble_phy_set_txend_cb(NULL, NULL);
   17948:	2100      	movs	r1, #0
   1794a:	4608      	mov	r0, r1
   1794c:	f002 f95a 	bl	19c04 <ble_phy_set_txend_cb>
    ble_phy_encrypt_disable();
   17950:	f002 f942 	bl	19bd8 <ble_phy_encrypt_disable>
    if (ble_ll_resolv_enabled()) {
   17954:	f7ff fba2 	bl	1709c <ble_ll_resolv_enabled>
   17958:	2800      	cmp	r0, #0
   1795a:	d03c      	beq.n	179d6 <ble_ll_scan_start+0xc6>
        ble_phy_resolv_list_enable();
   1795c:	f002 fc8e 	bl	1a27c <ble_phy_resolv_list_enable>
    if (sch) {
   17960:	2c00      	cmp	r4, #0
   17962:	d03b      	beq.n	179dc <ble_ll_scan_start+0xcc>
        rc = ble_phy_rx_set_start_time(sch->start_time +
   17964:	6863      	ldr	r3, [r4, #4]
   17966:	4a2f      	ldr	r2, [pc, #188]	; (17a24 <ble_ll_scan_start+0x114>)
   17968:	7810      	ldrb	r0, [r2, #0]
   1796a:	78a1      	ldrb	r1, [r4, #2]
   1796c:	4418      	add	r0, r3
   1796e:	f002 fb87 	bl	1a080 <ble_phy_rx_set_start_time>
    if (!rc || rc == BLE_PHY_ERR_RX_LATE) {
   17972:	2800      	cmp	r0, #0
   17974:	d03b      	beq.n	179ee <ble_ll_scan_start+0xde>
   17976:	2806      	cmp	r0, #6
   17978:	d039      	beq.n	179ee <ble_ll_scan_start+0xde>
   1797a:	4606      	mov	r6, r0
    return rc;
   1797c:	e043      	b.n	17a06 <ble_ll_scan_start+0xf6>
    BLE_LL_ASSERT(scansm->scan_rsp_pending == 0);
   1797e:	f7f4 fc33 	bl	c1e8 <hal_debugger_connected>
   17982:	b100      	cbz	r0, 17986 <ble_ll_scan_start+0x76>
   17984:	be01      	bkpt	0x0001
   17986:	2300      	movs	r3, #0
   17988:	461a      	mov	r2, r3
   1798a:	4619      	mov	r1, r3
   1798c:	4618      	mov	r0, r3
   1798e:	f7f4 fe65 	bl	c65c <__assert_func>
    BLE_LL_ASSERT(!sch || scan_chan < BLE_PHY_ADV_CHAN_START);
   17992:	f7f4 fc29 	bl	c1e8 <hal_debugger_connected>
   17996:	b100      	cbz	r0, 1799a <ble_ll_scan_start+0x8a>
   17998:	be01      	bkpt	0x0001
   1799a:	2300      	movs	r3, #0
   1799c:	461a      	mov	r2, r3
   1799e:	4619      	mov	r1, r3
   179a0:	4618      	mov	r0, r3
   179a2:	f7f4 fe5b 	bl	c65c <__assert_func>
    BLE_LL_ASSERT(sch || scan_chan >= BLE_PHY_ADV_CHAN_START);
   179a6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   179aa:	2b24      	cmp	r3, #36	; 0x24
   179ac:	d8c3      	bhi.n	17936 <ble_ll_scan_start+0x26>
   179ae:	f7f4 fc1b 	bl	c1e8 <hal_debugger_connected>
   179b2:	b100      	cbz	r0, 179b6 <ble_ll_scan_start+0xa6>
   179b4:	be01      	bkpt	0x0001
   179b6:	2300      	movs	r3, #0
   179b8:	461a      	mov	r2, r3
   179ba:	4619      	mov	r1, r3
   179bc:	4618      	mov	r0, r3
   179be:	f7f4 fe4d 	bl	c65c <__assert_func>
    BLE_LL_ASSERT(rc == 0);
   179c2:	f7f4 fc11 	bl	c1e8 <hal_debugger_connected>
   179c6:	b100      	cbz	r0, 179ca <ble_ll_scan_start+0xba>
   179c8:	be01      	bkpt	0x0001
   179ca:	2300      	movs	r3, #0
   179cc:	461a      	mov	r2, r3
   179ce:	4619      	mov	r1, r3
   179d0:	4618      	mov	r0, r3
   179d2:	f7f4 fe43 	bl	c65c <__assert_func>
        ble_phy_resolv_list_disable();
   179d6:	f002 fc61 	bl	1a29c <ble_phy_resolv_list_disable>
   179da:	e7c1      	b.n	17960 <ble_ll_scan_start+0x50>
        rc = ble_phy_rx_set_start_time(os_cputime_get32() +
   179dc:	f011 ff77 	bl	298ce <os_cputime_get32>
   179e0:	4b10      	ldr	r3, [pc, #64]	; (17a24 <ble_ll_scan_start+0x114>)
   179e2:	781b      	ldrb	r3, [r3, #0]
   179e4:	2100      	movs	r1, #0
   179e6:	4418      	add	r0, r3
   179e8:	f002 fb4a 	bl	1a080 <ble_phy_rx_set_start_time>
   179ec:	e7c1      	b.n	17972 <ble_ll_scan_start+0x62>
        if (scanp->scan_filt_policy & 1) {
   179ee:	78ab      	ldrb	r3, [r5, #2]
   179f0:	f013 0f01 	tst.w	r3, #1
   179f4:	d00a      	beq.n	17a0c <ble_ll_scan_start+0xfc>
            ble_ll_whitelist_enable();
   179f6:	f001 fc0b 	bl	19210 <ble_ll_whitelist_enable>
        if (scanp->scan_type == BLE_SCAN_TYPE_INITIATE) {
   179fa:	792b      	ldrb	r3, [r5, #4]
   179fc:	2b02      	cmp	r3, #2
   179fe:	d008      	beq.n	17a12 <ble_ll_scan_start+0x102>
            ble_ll_state_set(BLE_LL_STATE_SCANNING);
   17a00:	2002      	movs	r0, #2
   17a02:	f7f8 ffdd 	bl	109c0 <ble_ll_state_set>
}
   17a06:	4630      	mov	r0, r6
   17a08:	b002      	add	sp, #8
   17a0a:	bd70      	pop	{r4, r5, r6, pc}
            ble_ll_whitelist_disable();
   17a0c:	f001 fc04 	bl	19218 <ble_ll_whitelist_disable>
   17a10:	e7f3      	b.n	179fa <ble_ll_scan_start+0xea>
            ble_ll_state_set(BLE_LL_STATE_INITIATING);
   17a12:	2003      	movs	r0, #3
   17a14:	f7f8 ffd4 	bl	109c0 <ble_ll_state_set>
   17a18:	e7f5      	b.n	17a06 <ble_ll_scan_start+0xf6>
   17a1a:	bf00      	nop
   17a1c:	00555555 	.word	0x00555555
   17a20:	8e89bed6 	.word	0x8e89bed6
   17a24:	20004250 	.word	0x20004250

00017a28 <ble_ll_scan_rx_pkt_in_restore_addr_data>:
#endif

static void
ble_ll_scan_rx_pkt_in_restore_addr_data(struct ble_mbuf_hdr *hdr,
                                        struct ble_ll_scan_addr_data *addrd)
{
   17a28:	b538      	push	{r3, r4, r5, lr}
    struct ble_ll_scan_sm *scansm = &g_ble_ll_scan_sm;
    struct ble_mbuf_hdr_rxinfo *rxinfo = &hdr->rxinfo;
    struct ble_ll_resolv_entry *rl;
#endif

    addrd->adv_addr = addrd->adva;
   17a2a:	684b      	ldr	r3, [r1, #4]
   17a2c:	614b      	str	r3, [r1, #20]
    addrd->adv_addr_type = addrd->adva_type;
   17a2e:	784b      	ldrb	r3, [r1, #1]
   17a30:	740b      	strb	r3, [r1, #16]

#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LL_PRIVACY)
    if (rxinfo->rpa_index >= 0) {
   17a32:	f990 2007 	ldrsb.w	r2, [r0, #7]
   17a36:	2a00      	cmp	r2, #0
   17a38:	db0c      	blt.n	17a54 <ble_ll_scan_rx_pkt_in_restore_addr_data+0x2c>
        rl = &g_ble_ll_resolv_list[rxinfo->rpa_index];
   17a3a:	2336      	movs	r3, #54	; 0x36
   17a3c:	fb03 f302 	mul.w	r3, r3, r2
   17a40:	4c0d      	ldr	r4, [pc, #52]	; (17a78 <ble_ll_scan_rx_pkt_in_restore_addr_data+0x50>)
   17a42:	191d      	adds	r5, r3, r4
        addrd->adv_addr = rl->rl_identity_addr;
   17a44:	f103 0220 	add.w	r2, r3, #32
   17a48:	4422      	add	r2, r4
   17a4a:	3204      	adds	r2, #4
   17a4c:	614a      	str	r2, [r1, #20]
        addrd->adv_addr_type = rl->rl_addr_type;
   17a4e:	5d1b      	ldrb	r3, [r3, r4]
   17a50:	740b      	strb	r3, [r1, #16]
        addrd->rl = rl;
   17a52:	618d      	str	r5, [r1, #24]
    }
    if (hdr->rxinfo.flags & BLE_MBUF_HDR_F_TARGETA_RESOLVED) {
   17a54:	8803      	ldrh	r3, [r0, #0]
   17a56:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   17a5a:	d100      	bne.n	17a5e <ble_ll_scan_rx_pkt_in_restore_addr_data+0x36>
        addrd->targeta = ble_ll_get_our_devaddr(scansm->own_addr_type & 1);
        addrd->targeta_type = scansm->own_addr_type & 1;
    }
#endif
}
   17a5c:	bd38      	pop	{r3, r4, r5, pc}
   17a5e:	460c      	mov	r4, r1
        addrd->targeta = ble_ll_get_our_devaddr(scansm->own_addr_type & 1);
   17a60:	4d06      	ldr	r5, [pc, #24]	; (17a7c <ble_ll_scan_rx_pkt_in_restore_addr_data+0x54>)
   17a62:	7868      	ldrb	r0, [r5, #1]
   17a64:	f000 0001 	and.w	r0, r0, #1
   17a68:	f7f8 fe96 	bl	10798 <ble_ll_get_our_devaddr>
   17a6c:	60e0      	str	r0, [r4, #12]
        addrd->targeta_type = scansm->own_addr_type & 1;
   17a6e:	786b      	ldrb	r3, [r5, #1]
   17a70:	f003 0301 	and.w	r3, r3, #1
   17a74:	7223      	strb	r3, [r4, #8]
}
   17a76:	e7f1      	b.n	17a5c <ble_ll_scan_rx_pkt_in_restore_addr_data+0x34>
   17a78:	20004100 	.word	0x20004100
   17a7c:	200026a8 	.word	0x200026a8

00017a80 <ble_ll_scan_dup_check_legacy>:
{
   17a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17a82:	460e      	mov	r6, r1
   17a84:	4617      	mov	r7, r2
    type = BLE_LL_SCAN_ENTRY_TYPE_LEGACY(addr_type);
   17a86:	f000 0501 	and.w	r5, r0, #1
    TAILQ_FOREACH(e, &g_scan_dup_list, link) {
   17a8a:	4b39      	ldr	r3, [pc, #228]	; (17b70 <ble_ll_scan_dup_check_legacy+0xf0>)
   17a8c:	681c      	ldr	r4, [r3, #0]
   17a8e:	e000      	b.n	17a92 <ble_ll_scan_dup_check_legacy+0x12>
   17a90:	68a4      	ldr	r4, [r4, #8]
   17a92:	b14c      	cbz	r4, 17aa8 <ble_ll_scan_dup_check_legacy+0x28>
        if ((e->type == type) && !memcmp(e->addr, addr, 6)) {
   17a94:	7823      	ldrb	r3, [r4, #0]
   17a96:	42ab      	cmp	r3, r5
   17a98:	d1fa      	bne.n	17a90 <ble_ll_scan_dup_check_legacy+0x10>
   17a9a:	2206      	movs	r2, #6
   17a9c:	4631      	mov	r1, r6
   17a9e:	1c60      	adds	r0, r4, #1
   17aa0:	f7f6 fcc2 	bl	e428 <memcmp>
   17aa4:	2800      	cmp	r0, #0
   17aa6:	d1f3      	bne.n	17a90 <ble_ll_scan_dup_check_legacy+0x10>
    if (e) {
   17aa8:	2c00      	cmp	r4, #0
   17aaa:	d02d      	beq.n	17b08 <ble_ll_scan_dup_check_legacy+0x88>
        if (pdu_type == BLE_ADV_PDU_TYPE_ADV_DIRECT_IND) {
   17aac:	2f01      	cmp	r7, #1
   17aae:	d01a      	beq.n	17ae6 <ble_ll_scan_dup_check_legacy+0x66>
        } else if (pdu_type == BLE_ADV_PDU_TYPE_SCAN_RSP) {
   17ab0:	2f04      	cmp	r7, #4
   17ab2:	d01c      	beq.n	17aee <ble_ll_scan_dup_check_legacy+0x6e>
            rc = e->flags & BLE_LL_SCAN_DUP_F_ADV_REPORT_SENT;
   17ab4:	79e0      	ldrb	r0, [r4, #7]
   17ab6:	f000 0001 	and.w	r0, r0, #1
    if (e != TAILQ_FIRST(&g_scan_dup_list)) {
   17aba:	4b2d      	ldr	r3, [pc, #180]	; (17b70 <ble_ll_scan_dup_check_legacy+0xf0>)
   17abc:	681b      	ldr	r3, [r3, #0]
   17abe:	429c      	cmp	r4, r3
   17ac0:	d010      	beq.n	17ae4 <ble_ll_scan_dup_check_legacy+0x64>
        TAILQ_REMOVE(&g_scan_dup_list, e, link);
   17ac2:	68a3      	ldr	r3, [r4, #8]
   17ac4:	b1bb      	cbz	r3, 17af6 <ble_ll_scan_dup_check_legacy+0x76>
   17ac6:	68e2      	ldr	r2, [r4, #12]
   17ac8:	60da      	str	r2, [r3, #12]
   17aca:	68e3      	ldr	r3, [r4, #12]
   17acc:	68a2      	ldr	r2, [r4, #8]
   17ace:	601a      	str	r2, [r3, #0]
        TAILQ_INSERT_HEAD(&g_scan_dup_list, e, link);
   17ad0:	4b27      	ldr	r3, [pc, #156]	; (17b70 <ble_ll_scan_dup_check_legacy+0xf0>)
   17ad2:	681b      	ldr	r3, [r3, #0]
   17ad4:	60a3      	str	r3, [r4, #8]
   17ad6:	b193      	cbz	r3, 17afe <ble_ll_scan_dup_check_legacy+0x7e>
   17ad8:	f104 0208 	add.w	r2, r4, #8
   17adc:	60da      	str	r2, [r3, #12]
   17ade:	4b24      	ldr	r3, [pc, #144]	; (17b70 <ble_ll_scan_dup_check_legacy+0xf0>)
   17ae0:	601c      	str	r4, [r3, #0]
   17ae2:	60e3      	str	r3, [r4, #12]
}
   17ae4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            rc = e->flags & BLE_LL_SCAN_DUP_F_DIR_ADV_REPORT_SENT;
   17ae6:	79e0      	ldrb	r0, [r4, #7]
   17ae8:	f000 0002 	and.w	r0, r0, #2
   17aec:	e7e5      	b.n	17aba <ble_ll_scan_dup_check_legacy+0x3a>
            rc = e->flags & BLE_LL_SCAN_DUP_F_SCAN_RSP_SENT;
   17aee:	79e0      	ldrb	r0, [r4, #7]
   17af0:	f000 0004 	and.w	r0, r0, #4
   17af4:	e7e1      	b.n	17aba <ble_ll_scan_dup_check_legacy+0x3a>
        TAILQ_REMOVE(&g_scan_dup_list, e, link);
   17af6:	68e2      	ldr	r2, [r4, #12]
   17af8:	4b1d      	ldr	r3, [pc, #116]	; (17b70 <ble_ll_scan_dup_check_legacy+0xf0>)
   17afa:	605a      	str	r2, [r3, #4]
   17afc:	e7e5      	b.n	17aca <ble_ll_scan_dup_check_legacy+0x4a>
        TAILQ_INSERT_HEAD(&g_scan_dup_list, e, link);
   17afe:	f104 0308 	add.w	r3, r4, #8
   17b02:	4a1b      	ldr	r2, [pc, #108]	; (17b70 <ble_ll_scan_dup_check_legacy+0xf0>)
   17b04:	6053      	str	r3, [r2, #4]
   17b06:	e7ea      	b.n	17ade <ble_ll_scan_dup_check_legacy+0x5e>
    e = os_memblock_get(&g_scan_dup_pool);
   17b08:	481a      	ldr	r0, [pc, #104]	; (17b74 <ble_ll_scan_dup_check_legacy+0xf4>)
   17b0a:	f7f5 fa11 	bl	cf30 <os_memblock_get>
    if (!e) {
   17b0e:	4603      	mov	r3, r0
   17b10:	b1c8      	cbz	r0, 17b46 <ble_ll_scan_dup_check_legacy+0xc6>
    memset(e, 0, sizeof(*e));
   17b12:	2200      	movs	r2, #0
   17b14:	601a      	str	r2, [r3, #0]
   17b16:	605a      	str	r2, [r3, #4]
   17b18:	609a      	str	r2, [r3, #8]
   17b1a:	60da      	str	r2, [r3, #12]
        e->flags = 0;
   17b1c:	71da      	strb	r2, [r3, #7]
        e->type = type;
   17b1e:	461a      	mov	r2, r3
   17b20:	f802 5b01 	strb.w	r5, [r2], #1
        memcpy(e->addr, addr, 6);
   17b24:	6831      	ldr	r1, [r6, #0]
   17b26:	f8c3 1001 	str.w	r1, [r3, #1]
   17b2a:	88b1      	ldrh	r1, [r6, #4]
   17b2c:	8091      	strh	r1, [r2, #4]
        TAILQ_INSERT_HEAD(&g_scan_dup_list, e, link);
   17b2e:	4a10      	ldr	r2, [pc, #64]	; (17b70 <ble_ll_scan_dup_check_legacy+0xf0>)
   17b30:	6812      	ldr	r2, [r2, #0]
   17b32:	609a      	str	r2, [r3, #8]
   17b34:	b1ba      	cbz	r2, 17b66 <ble_ll_scan_dup_check_legacy+0xe6>
   17b36:	f103 0108 	add.w	r1, r3, #8
   17b3a:	60d1      	str	r1, [r2, #12]
   17b3c:	4a0c      	ldr	r2, [pc, #48]	; (17b70 <ble_ll_scan_dup_check_legacy+0xf0>)
   17b3e:	6013      	str	r3, [r2, #0]
   17b40:	60da      	str	r2, [r3, #12]
        rc = 0;
   17b42:	2000      	movs	r0, #0
    return rc;
   17b44:	e7ce      	b.n	17ae4 <ble_ll_scan_dup_check_legacy+0x64>
        e = TAILQ_LAST(&g_scan_dup_list, ble_ll_scan_dup_list);
   17b46:	4b0a      	ldr	r3, [pc, #40]	; (17b70 <ble_ll_scan_dup_check_legacy+0xf0>)
   17b48:	685b      	ldr	r3, [r3, #4]
   17b4a:	685b      	ldr	r3, [r3, #4]
   17b4c:	681b      	ldr	r3, [r3, #0]
        TAILQ_REMOVE(&g_scan_dup_list, e, link);
   17b4e:	689a      	ldr	r2, [r3, #8]
   17b50:	b12a      	cbz	r2, 17b5e <ble_ll_scan_dup_check_legacy+0xde>
   17b52:	68d9      	ldr	r1, [r3, #12]
   17b54:	60d1      	str	r1, [r2, #12]
   17b56:	68da      	ldr	r2, [r3, #12]
   17b58:	6899      	ldr	r1, [r3, #8]
   17b5a:	6011      	str	r1, [r2, #0]
   17b5c:	e7d9      	b.n	17b12 <ble_ll_scan_dup_check_legacy+0x92>
   17b5e:	68d9      	ldr	r1, [r3, #12]
   17b60:	4a03      	ldr	r2, [pc, #12]	; (17b70 <ble_ll_scan_dup_check_legacy+0xf0>)
   17b62:	6051      	str	r1, [r2, #4]
   17b64:	e7f7      	b.n	17b56 <ble_ll_scan_dup_check_legacy+0xd6>
        TAILQ_INSERT_HEAD(&g_scan_dup_list, e, link);
   17b66:	f103 0208 	add.w	r2, r3, #8
   17b6a:	4901      	ldr	r1, [pc, #4]	; (17b70 <ble_ll_scan_dup_check_legacy+0xf0>)
   17b6c:	604a      	str	r2, [r1, #4]
   17b6e:	e7e5      	b.n	17b3c <ble_ll_scan_dup_check_legacy+0xbc>
   17b70:	20002730 	.word	0x20002730
   17b74:	200027b8 	.word	0x200027b8

00017b78 <ble_ll_hci_send_dir_adv_report>:
{
   17b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17b7a:	4605      	mov	r5, r0
   17b7c:	460f      	mov	r7, r1
   17b7e:	4614      	mov	r4, r2
   17b80:	461e      	mov	r6, r3
    if (!ble_ll_hci_is_le_event_enabled(BLE_HCI_LE_SUBEV_DIRECT_ADV_RPT)) {
   17b82:	200b      	movs	r0, #11
   17b84:	f7fe fcc0 	bl	16508 <ble_ll_hci_is_le_event_enabled>
   17b88:	b1f8      	cbz	r0, 17bca <ble_ll_hci_send_dir_adv_report+0x52>
    hci_ev = (void *) ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_LO);
   17b8a:	2001      	movs	r0, #1
   17b8c:	f00e fa70 	bl	26070 <ble_hci_trans_buf_alloc>
    if (!hci_ev) {
   17b90:	b1f0      	cbz	r0, 17bd0 <ble_ll_hci_send_dir_adv_report+0x58>
    hci_ev->opcode = BLE_HCI_EVCODE_LE_META;
   17b92:	223e      	movs	r2, #62	; 0x3e
   17b94:	7002      	strb	r2, [r0, #0]
    hci_ev->length = sizeof(*ev) + sizeof(*(ev->reports));
   17b96:	2212      	movs	r2, #18
   17b98:	7042      	strb	r2, [r0, #1]
    ev->subev_code = BLE_HCI_LE_SUBEV_DIRECT_ADV_RPT;
   17b9a:	220b      	movs	r2, #11
   17b9c:	7082      	strb	r2, [r0, #2]
    ev->num_reports = 1;
   17b9e:	2201      	movs	r2, #1
   17ba0:	70c2      	strb	r2, [r0, #3]
    ev->reports[0].type = BLE_HCI_ADV_RPT_EVTYPE_DIR_IND;
   17ba2:	7102      	strb	r2, [r0, #4]
    ev->reports[0].addr_type = addr_type;
   17ba4:	7147      	strb	r7, [r0, #5]
    memcpy(ev->reports[0].addr, addr, BLE_DEV_ADDR_LEN);
   17ba6:	682a      	ldr	r2, [r5, #0]
   17ba8:	f8c0 2006 	str.w	r2, [r0, #6]
   17bac:	88aa      	ldrh	r2, [r5, #4]
   17bae:	8142      	strh	r2, [r0, #10]
    ev->reports[0].dir_addr_type = inita_type;
   17bb0:	7306      	strb	r6, [r0, #12]
    memcpy(ev->reports[0].dir_addr, inita, BLE_DEV_ADDR_LEN);
   17bb2:	6822      	ldr	r2, [r4, #0]
   17bb4:	f8c0 200d 	str.w	r2, [r0, #13]
   17bb8:	88a2      	ldrh	r2, [r4, #4]
   17bba:	f8a0 2011 	strh.w	r2, [r0, #17]
    ev->reports[0].rssi = rssi;
   17bbe:	f99d 2018 	ldrsb.w	r2, [sp, #24]
   17bc2:	74c2      	strb	r2, [r0, #19]
    return ble_ll_hci_event_send(hci_ev);
   17bc4:	f7fe fbe8 	bl	16398 <ble_ll_hci_event_send>
}
   17bc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return -1;
   17bca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17bce:	e7fb      	b.n	17bc8 <ble_ll_hci_send_dir_adv_report+0x50>
        return -1;
   17bd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17bd4:	e7f8      	b.n	17bc8 <ble_ll_hci_send_dir_adv_report+0x50>
	...

00017bd8 <ble_ll_hci_send_adv_report>:
{
   17bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17bdc:	4681      	mov	r9, r0
   17bde:	460e      	mov	r6, r1
   17be0:	4690      	mov	r8, r2
   17be2:	461f      	mov	r7, r3
   17be4:	f89d 5020 	ldrb.w	r5, [sp, #32]
    if (!ble_ll_hci_is_le_event_enabled(BLE_HCI_LE_SUBEV_ADV_RPT)) {
   17be8:	2002      	movs	r0, #2
   17bea:	f7fe fc8d 	bl	16508 <ble_ll_hci_is_le_event_enabled>
   17bee:	b3a8      	cbz	r0, 17c5c <ble_ll_hci_send_adv_report+0x84>
    if ((sizeof(*ev) + sizeof(ev->reports[0]) + adv_data_len + 1) > BLE_HCI_MAX_DATA_LEN) {
   17bf0:	f105 030c 	add.w	r3, r5, #12
   17bf4:	2b44      	cmp	r3, #68	; 0x44
   17bf6:	d828      	bhi.n	17c4a <ble_ll_hci_send_adv_report+0x72>
    hci_ev = (void *) ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_LO);
   17bf8:	2001      	movs	r0, #1
   17bfa:	f00e fa39 	bl	26070 <ble_hci_trans_buf_alloc>
    if (!hci_ev) {
   17bfe:	4604      	mov	r4, r0
   17c00:	b378      	cbz	r0, 17c62 <ble_ll_hci_send_adv_report+0x8a>
    hci_ev->opcode = BLE_HCI_EVCODE_LE_META;
   17c02:	233e      	movs	r3, #62	; 0x3e
   17c04:	7003      	strb	r3, [r0, #0]
    hci_ev->length = sizeof(*ev) + sizeof(ev->reports[0]) + adv_data_len + 1;
   17c06:	f105 030c 	add.w	r3, r5, #12
   17c0a:	7043      	strb	r3, [r0, #1]
    ev = (void *) hci_ev->data;
   17c0c:	f100 0a02 	add.w	sl, r0, #2
    ev->subev_code = BLE_HCI_LE_SUBEV_ADV_RPT;
   17c10:	2302      	movs	r3, #2
   17c12:	7083      	strb	r3, [r0, #2]
    ev->num_reports = 1;
   17c14:	2301      	movs	r3, #1
   17c16:	70c3      	strb	r3, [r0, #3]
    ev->reports[0].type = evtype;
   17c18:	f880 9004 	strb.w	r9, [r0, #4]
    ev->reports[0].addr_type = addr_type;
   17c1c:	f880 8005 	strb.w	r8, [r0, #5]
    memcpy(ev->reports[0].addr, addr, BLE_DEV_ADDR_LEN);
   17c20:	6833      	ldr	r3, [r6, #0]
   17c22:	f8c0 3006 	str.w	r3, [r0, #6]
   17c26:	88b3      	ldrh	r3, [r6, #4]
   17c28:	8143      	strh	r3, [r0, #10]
    ev->reports[0].data_len = adv_data_len;
   17c2a:	7305      	strb	r5, [r0, #12]
    os_mbuf_copydata(adv_data, 0, adv_data_len, ev->reports[0].data);
   17c2c:	f100 030d 	add.w	r3, r0, #13
   17c30:	462a      	mov	r2, r5
   17c32:	2100      	movs	r1, #0
   17c34:	9809      	ldr	r0, [sp, #36]	; 0x24
   17c36:	f7f5 ff8f 	bl	db58 <os_mbuf_copydata>
    ev_rssi = (int8_t *) (hci_ev->data + sizeof(*ev) + sizeof(ev->reports[0]) + adv_data_len);
   17c3a:	350b      	adds	r5, #11
    *ev_rssi = rssi;
   17c3c:	f80a 7005 	strb.w	r7, [sl, r5]
    return ble_ll_hci_event_send(hci_ev);
   17c40:	4620      	mov	r0, r4
   17c42:	f7fe fba9 	bl	16398 <ble_ll_hci_event_send>
}
   17c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        STATS_INC(ble_ll_stats, adv_evt_dropped);
   17c4a:	4a07      	ldr	r2, [pc, #28]	; (17c68 <ble_ll_hci_send_adv_report+0x90>)
   17c4c:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
   17c50:	3301      	adds	r3, #1
   17c52:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
        return -1;
   17c56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17c5a:	e7f4      	b.n	17c46 <ble_ll_hci_send_adv_report+0x6e>
        return -1;
   17c5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17c60:	e7f1      	b.n	17c46 <ble_ll_hci_send_adv_report+0x6e>
        return -1;
   17c62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17c66:	e7ee      	b.n	17c46 <ble_ll_hci_send_adv_report+0x6e>
   17c68:	20003be0 	.word	0x20003be0

00017c6c <ble_ll_scan_send_adv_report>:
{
   17c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17c70:	b085      	sub	sp, #20
   17c72:	4605      	mov	r5, r0
   17c74:	468a      	mov	sl, r1
   17c76:	4616      	mov	r6, r2
   17c78:	9303      	str	r3, [sp, #12]
   17c7a:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
   17c7e:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
   17c82:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
    if (pdu_type == BLE_ADV_PDU_TYPE_ADV_DIRECT_IND) {
   17c86:	2801      	cmp	r0, #1
   17c88:	d030      	beq.n	17cec <ble_ll_scan_send_adv_report+0x80>
        if (pdu_type == BLE_ADV_PDU_TYPE_ADV_IND) {
   17c8a:	b120      	cbz	r0, 17c96 <ble_ll_scan_send_adv_report+0x2a>
        } else if (pdu_type == BLE_ADV_PDU_TYPE_ADV_SCAN_IND) {
   17c8c:	2806      	cmp	r0, #6
   17c8e:	d038      	beq.n	17d02 <ble_ll_scan_send_adv_report+0x96>
        } else if (pdu_type == BLE_ADV_PDU_TYPE_ADV_NONCONN_IND) {
   17c90:	2802      	cmp	r0, #2
   17c92:	d034      	beq.n	17cfe <ble_ll_scan_send_adv_report+0x92>
            evtype = BLE_HCI_ADV_RPT_EVTYPE_SCAN_RSP;
   17c94:	2504      	movs	r5, #4
        adv_data_len = om->om_data[1] - BLE_DEV_ADDR_LEN;
   17c96:	f8d8 3000 	ldr.w	r3, [r8]
   17c9a:	785c      	ldrb	r4, [r3, #1]
   17c9c:	3c06      	subs	r4, #6
   17c9e:	b2e4      	uxtb	r4, r4
        os_mbuf_adj(om, BLE_LL_PDU_HDR_LEN + BLE_DEV_ADDR_LEN);
   17ca0:	2108      	movs	r1, #8
   17ca2:	4640      	mov	r0, r8
   17ca4:	f7f5 ff85 	bl	dbb2 <os_mbuf_adj>
    uint8_t subev = BLE_HCI_LE_SUBEV_ADV_RPT;
   17ca8:	f04f 0b02 	mov.w	fp, #2
    if (BLE_MBUF_HDR_RESOLVED(hdr)) {
   17cac:	f8b9 3000 	ldrh.w	r3, [r9]
   17cb0:	f413 6f80 	tst.w	r3, #1024	; 0x400
   17cb4:	d001      	beq.n	17cba <ble_ll_scan_send_adv_report+0x4e>
        adva_type += 2;
   17cb6:	3602      	adds	r6, #2
   17cb8:	b2f6      	uxtb	r6, r6
    if (BLE_MBUF_HDR_TARGETA_RESOLVED(hdr)) {
   17cba:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   17cbe:	d001      	beq.n	17cc4 <ble_ll_scan_send_adv_report+0x58>
        inita_type += 2;
   17cc0:	3702      	adds	r7, #2
   17cc2:	b2ff      	uxtb	r7, r7
    if (subev == BLE_HCI_LE_SUBEV_DIRECT_ADV_RPT) {
   17cc4:	f1bb 0f0b 	cmp.w	fp, #11
   17cc8:	d021      	beq.n	17d0e <ble_ll_scan_send_adv_report+0xa2>
    rc = ble_ll_hci_send_adv_report(evtype, adva, adva_type, hdr->rxinfo.rssi,
   17cca:	f999 3004 	ldrsb.w	r3, [r9, #4]
   17cce:	f8cd 8004 	str.w	r8, [sp, #4]
   17cd2:	9400      	str	r4, [sp, #0]
   17cd4:	4632      	mov	r2, r6
   17cd6:	4651      	mov	r1, sl
   17cd8:	4628      	mov	r0, r5
   17cda:	f7ff ff7d 	bl	17bd8 <ble_ll_hci_send_adv_report>
    if (!rc && scansm->scan_filt_dups) {
   17cde:	b910      	cbnz	r0, 17ce6 <ble_ll_scan_send_adv_report+0x7a>
   17ce0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   17ce2:	789b      	ldrb	r3, [r3, #2]
   17ce4:	b9eb      	cbnz	r3, 17d22 <ble_ll_scan_send_adv_report+0xb6>
}
   17ce6:	b005      	add	sp, #20
   17ce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (ble_ll_is_rpa(inita, inita_type)) {
   17cec:	4639      	mov	r1, r7
   17cee:	4618      	mov	r0, r3
   17cf0:	f7f8 fc91 	bl	10616 <ble_ll_is_rpa>
   17cf4:	b938      	cbnz	r0, 17d06 <ble_ll_scan_send_adv_report+0x9a>
        adv_data_len = 0;
   17cf6:	2400      	movs	r4, #0
    uint8_t subev = BLE_HCI_LE_SUBEV_ADV_RPT;
   17cf8:	f04f 0b02 	mov.w	fp, #2
   17cfc:	e7d6      	b.n	17cac <ble_ll_scan_send_adv_report+0x40>
            evtype = BLE_HCI_ADV_RPT_EVTYPE_NONCONN_IND;
   17cfe:	2503      	movs	r5, #3
   17d00:	e7c9      	b.n	17c96 <ble_ll_scan_send_adv_report+0x2a>
            evtype = BLE_HCI_ADV_RPT_EVTYPE_SCAN_IND;
   17d02:	2502      	movs	r5, #2
   17d04:	e7c7      	b.n	17c96 <ble_ll_scan_send_adv_report+0x2a>
        adv_data_len = 0;
   17d06:	2400      	movs	r4, #0
            subev = BLE_HCI_LE_SUBEV_DIRECT_ADV_RPT;
   17d08:	f04f 0b0b 	mov.w	fp, #11
   17d0c:	e7ce      	b.n	17cac <ble_ll_scan_send_adv_report+0x40>
        rc = ble_ll_hci_send_dir_adv_report(adva, adva_type, inita, inita_type,
   17d0e:	f999 3004 	ldrsb.w	r3, [r9, #4]
   17d12:	9300      	str	r3, [sp, #0]
   17d14:	463b      	mov	r3, r7
   17d16:	9a03      	ldr	r2, [sp, #12]
   17d18:	4631      	mov	r1, r6
   17d1a:	4650      	mov	r0, sl
   17d1c:	f7ff ff2c 	bl	17b78 <ble_ll_hci_send_dir_adv_report>
        goto done;
   17d20:	e7dd      	b.n	17cde <ble_ll_scan_send_adv_report+0x72>
        ble_ll_scan_dup_update_legacy(adva_type, adva, subev, evtype);
   17d22:	462b      	mov	r3, r5
   17d24:	465a      	mov	r2, fp
   17d26:	4651      	mov	r1, sl
   17d28:	4630      	mov	r0, r6
   17d2a:	f7ff fc2d 	bl	17588 <ble_ll_scan_dup_update_legacy>
}
   17d2e:	e7da      	b.n	17ce6 <ble_ll_scan_send_adv_report+0x7a>

00017d30 <ble_ll_scan_rx_pkt_in_on_legacy>:

static void
ble_ll_scan_rx_pkt_in_on_legacy(uint8_t pdu_type, struct os_mbuf *om,
                                struct ble_mbuf_hdr *hdr,
                                struct ble_ll_scan_addr_data *addrd)
{
   17d30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17d34:	b084      	sub	sp, #16
    struct ble_ll_scan_sm *scansm = &g_ble_ll_scan_sm;
    uint8_t *rxbuf = om->om_data;
   17d36:	680e      	ldr	r6, [r1, #0]
    bool send_hci_report;


    if (!BLE_MBUF_HDR_DEVMATCH(hdr) ||
   17d38:	8814      	ldrh	r4, [r2, #0]
   17d3a:	f004 05c0 	and.w	r5, r4, #192	; 0xc0
   17d3e:	2dc0      	cmp	r5, #192	; 0xc0
   17d40:	d002      	beq.n	17d48 <ble_ll_scan_rx_pkt_in_on_legacy+0x18>
    }

    if (BLE_MBUF_HDR_SCAN_RSP_RXD(hdr)) {
        ble_ll_scan_req_backoff(scansm, 1);
    }
}
   17d42:	b004      	add	sp, #16
   17d44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        !BLE_MBUF_HDR_CRC_OK(hdr) ||
   17d48:	f414 4f00 	tst.w	r4, #32768	; 0x8000
   17d4c:	d1f9      	bne.n	17d42 <ble_ll_scan_rx_pkt_in_on_legacy+0x12>
   17d4e:	4698      	mov	r8, r3
   17d50:	4615      	mov	r5, r2
   17d52:	460c      	mov	r4, r1
   17d54:	4607      	mov	r7, r0
    ble_ll_scan_get_addr_data_from_legacy(pdu_type, rxbuf, addrd);
   17d56:	461a      	mov	r2, r3
   17d58:	4631      	mov	r1, r6
   17d5a:	f7ff fb4b 	bl	173f4 <ble_ll_scan_get_addr_data_from_legacy>
    ble_ll_scan_rx_pkt_in_restore_addr_data(hdr, addrd);
   17d5e:	4641      	mov	r1, r8
   17d60:	4628      	mov	r0, r5
   17d62:	f7ff fe61 	bl	17a28 <ble_ll_scan_rx_pkt_in_restore_addr_data>
    send_hci_report = !scansm->scan_filt_dups ||
   17d66:	4b15      	ldr	r3, [pc, #84]	; (17dbc <ble_ll_scan_rx_pkt_in_on_legacy+0x8c>)
   17d68:	789b      	ldrb	r3, [r3, #2]
   17d6a:	b953      	cbnz	r3, 17d82 <ble_ll_scan_rx_pkt_in_on_legacy+0x52>
   17d6c:	2301      	movs	r3, #1
    if (send_hci_report) {
   17d6e:	b9a3      	cbnz	r3, 17d9a <ble_ll_scan_rx_pkt_in_on_legacy+0x6a>
    if (BLE_MBUF_HDR_SCAN_RSP_RXD(hdr)) {
   17d70:	882b      	ldrh	r3, [r5, #0]
   17d72:	f013 0f08 	tst.w	r3, #8
   17d76:	d0e4      	beq.n	17d42 <ble_ll_scan_rx_pkt_in_on_legacy+0x12>
        ble_ll_scan_req_backoff(scansm, 1);
   17d78:	2101      	movs	r1, #1
   17d7a:	4810      	ldr	r0, [pc, #64]	; (17dbc <ble_ll_scan_rx_pkt_in_on_legacy+0x8c>)
   17d7c:	f7ff fb66 	bl	1744c <ble_ll_scan_req_backoff>
   17d80:	e7df      	b.n	17d42 <ble_ll_scan_rx_pkt_in_on_legacy+0x12>
                      !ble_ll_scan_dup_check_legacy(addrd->adv_addr_type,
   17d82:	463a      	mov	r2, r7
   17d84:	f8d8 1014 	ldr.w	r1, [r8, #20]
   17d88:	f898 0010 	ldrb.w	r0, [r8, #16]
   17d8c:	f7ff fe78 	bl	17a80 <ble_ll_scan_dup_check_legacy>
    send_hci_report = !scansm->scan_filt_dups ||
   17d90:	b108      	cbz	r0, 17d96 <ble_ll_scan_rx_pkt_in_on_legacy+0x66>
   17d92:	2300      	movs	r3, #0
   17d94:	e7eb      	b.n	17d6e <ble_ll_scan_rx_pkt_in_on_legacy+0x3e>
   17d96:	2301      	movs	r3, #1
   17d98:	e7e9      	b.n	17d6e <ble_ll_scan_rx_pkt_in_on_legacy+0x3e>
                                    addrd->adv_addr, addrd->adv_addr_type,
   17d9a:	f8d8 1014 	ldr.w	r1, [r8, #20]
                                    addrd->targeta, addrd->targeta_type,
   17d9e:	f8d8 300c 	ldr.w	r3, [r8, #12]
        ble_ll_scan_send_adv_report(pdu_type,
   17da2:	f898 2010 	ldrb.w	r2, [r8, #16]
   17da6:	4805      	ldr	r0, [pc, #20]	; (17dbc <ble_ll_scan_rx_pkt_in_on_legacy+0x8c>)
   17da8:	9003      	str	r0, [sp, #12]
   17daa:	9502      	str	r5, [sp, #8]
   17dac:	9401      	str	r4, [sp, #4]
   17dae:	f898 0008 	ldrb.w	r0, [r8, #8]
   17db2:	9000      	str	r0, [sp, #0]
   17db4:	4638      	mov	r0, r7
   17db6:	f7ff ff59 	bl	17c6c <ble_ll_scan_send_adv_report>
   17dba:	e7d9      	b.n	17d70 <ble_ll_scan_rx_pkt_in_on_legacy+0x40>
   17dbc:	200026a8 	.word	0x200026a8

00017dc0 <ble_ll_scan_sm_start>:
{
   17dc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17dc4:	4604      	mov	r4, r0
    if (!ble_ll_is_valid_own_addr_type(scansm->own_addr_type, g_random_addr)) {
   17dc6:	4923      	ldr	r1, [pc, #140]	; (17e54 <ble_ll_scan_sm_start+0x94>)
   17dc8:	7840      	ldrb	r0, [r0, #1]
   17dca:	f7f8 fc93 	bl	106f4 <ble_ll_is_valid_own_addr_type>
   17dce:	2800      	cmp	r0, #0
   17dd0:	d03d      	beq.n	17e4e <ble_ll_scan_sm_start+0x8e>
    BLE_LL_ASSERT(scansm->scanp);
   17dd2:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
   17dd4:	b38d      	cbz	r5, 17e3a <ble_ll_scan_sm_start+0x7a>
    scanp_next = scansm->scanp_next;
   17dd6:	6f26      	ldr	r6, [r4, #112]	; 0x70
    STATS_INC(ble_ll_stats, scan_starts);
   17dd8:	4a1f      	ldr	r2, [pc, #124]	; (17e58 <ble_ll_scan_sm_start+0x98>)
   17dda:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
   17dde:	3301      	adds	r3, #1
   17de0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    scansm->scan_enabled = 1;
   17de4:	2301      	movs	r3, #1
   17de6:	7023      	strb	r3, [r4, #0]
    scanp->scan_chan = BLE_PHY_ADV_CHAN_START;
   17de8:	2325      	movs	r3, #37	; 0x25
   17dea:	716b      	strb	r3, [r5, #5]
    if (scanp_next) {
   17dec:	b106      	cbz	r6, 17df0 <ble_ll_scan_sm_start+0x30>
        scanp_next->scan_chan = BLE_PHY_ADV_CHAN_START;
   17dee:	7173      	strb	r3, [r6, #5]
    scansm->upper_limit = 1;
   17df0:	2701      	movs	r7, #1
   17df2:	84a7      	strh	r7, [r4, #36]	; 0x24
    scansm->backoff_count = 1;
   17df4:	84e7      	strh	r7, [r4, #38]	; 0x26
    scansm->scan_rsp_pending = 0;
   17df6:	f04f 0800 	mov.w	r8, #0
   17dfa:	f884 8003 	strb.w	r8, [r4, #3]
    g_ble_ll_scan_num_rsp_advs = 0;
   17dfe:	4b17      	ldr	r3, [pc, #92]	; (17e5c <ble_ll_scan_sm_start+0x9c>)
   17e00:	f883 8000 	strb.w	r8, [r3]
    os_mempool_clear(&g_scan_dup_pool);
   17e04:	4816      	ldr	r0, [pc, #88]	; (17e60 <ble_ll_scan_sm_start+0xa0>)
   17e06:	f7f5 f859 	bl	cebc <os_mempool_clear>
    TAILQ_INIT(&g_scan_dup_list);
   17e0a:	4b16      	ldr	r3, [pc, #88]	; (17e64 <ble_ll_scan_sm_start+0xa4>)
   17e0c:	f8c3 8000 	str.w	r8, [r3]
   17e10:	605b      	str	r3, [r3, #4]
    scanp->timing.start_time = ble_ll_rfmgmt_enable_now();
   17e12:	f7ff fa9b 	bl	1734c <ble_ll_rfmgmt_enable_now>
   17e16:	4601      	mov	r1, r0
   17e18:	6128      	str	r0, [r5, #16]
    ble_ll_rfmgmt_scan_changed(true, scanp->timing.start_time);
   17e1a:	4638      	mov	r0, r7
   17e1c:	f7ff fa4e 	bl	172bc <ble_ll_rfmgmt_scan_changed>
    if (scanp_next) {
   17e20:	b11e      	cbz	r6, 17e2a <ble_ll_scan_sm_start+0x6a>
        scanp_next->timing.start_time = scanp->timing.start_time +
   17e22:	692b      	ldr	r3, [r5, #16]
                                        scanp->timing.window;
   17e24:	68ea      	ldr	r2, [r5, #12]
        scanp_next->timing.start_time = scanp->timing.start_time +
   17e26:	4413      	add	r3, r2
   17e28:	6133      	str	r3, [r6, #16]
    os_cputime_timer_start(&scansm->scan_timer, scanp->timing.start_time);
   17e2a:	6929      	ldr	r1, [r5, #16]
   17e2c:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   17e30:	f011 fd45 	bl	298be <os_cputime_timer_start>
    return BLE_ERR_SUCCESS;
   17e34:	2000      	movs	r0, #0
}
   17e36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    BLE_LL_ASSERT(scansm->scanp);
   17e3a:	f7f4 f9d5 	bl	c1e8 <hal_debugger_connected>
   17e3e:	b100      	cbz	r0, 17e42 <ble_ll_scan_sm_start+0x82>
   17e40:	be01      	bkpt	0x0001
   17e42:	2300      	movs	r3, #0
   17e44:	461a      	mov	r2, r3
   17e46:	4619      	mov	r1, r3
   17e48:	4618      	mov	r0, r3
   17e4a:	f7f4 fc07 	bl	c65c <__assert_func>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   17e4e:	2012      	movs	r0, #18
   17e50:	e7f1      	b.n	17e36 <ble_ll_scan_sm_start+0x76>
   17e52:	bf00      	nop
   17e54:	20003cec 	.word	0x20003cec
   17e58:	20003be0 	.word	0x20003be0
   17e5c:	20002690 	.word	0x20002690
   17e60:	200027b8 	.word	0x200027b8
   17e64:	20002730 	.word	0x20002730

00017e68 <ble_ll_scan_common_init>:
    return g_ble_ll_scan_sm.scanp->scan_filt_policy & 1;
}

static void
ble_ll_scan_common_init(void)
{
   17e68:	b538      	push	{r3, r4, r5, lr}
    struct ble_ll_scan_params *scanp;
    int i;

    /* Clear state machine in case re-initialized */
    scansm = &g_ble_ll_scan_sm;
    memset(scansm, 0, sizeof(struct ble_ll_scan_sm));
   17e6a:	4d1b      	ldr	r5, [pc, #108]	; (17ed8 <ble_ll_scan_common_init+0x70>)
   17e6c:	2288      	movs	r2, #136	; 0x88
   17e6e:	2100      	movs	r1, #0
   17e70:	4628      	mov	r0, r5
   17e72:	f7f6 fb25 	bl	e4c0 <memset>

    /* Clear scan parameters in case re-initialized */
    memset(g_ble_ll_scan_params, 0, sizeof(g_ble_ll_scan_params));
   17e76:	4b19      	ldr	r3, [pc, #100]	; (17edc <ble_ll_scan_common_init+0x74>)
   17e78:	2400      	movs	r4, #0
   17e7a:	601c      	str	r4, [r3, #0]
   17e7c:	605c      	str	r4, [r3, #4]
   17e7e:	609c      	str	r4, [r3, #8]
   17e80:	60dc      	str	r4, [r3, #12]
   17e82:	611c      	str	r4, [r3, #16]
    ev->ev.ev_cb = (os_event_fn *)fn;
   17e84:	4b16      	ldr	r3, [pc, #88]	; (17ee0 <ble_ll_scan_common_init+0x78>)
   17e86:	632b      	str	r3, [r5, #48]	; 0x30
    ev->ev.ev_arg = arg;
   17e88:	636d      	str	r5, [r5, #52]	; 0x34

    /* Initialize scanning window end event */
    ble_npl_event_init(&scansm->scan_sched_ev, ble_ll_scan_event_proc, scansm);

    for (i = 0; i < BLE_LL_SCAN_PHY_NUMBER; i++) {
   17e8a:	2c00      	cmp	r4, #0
   17e8c:	dd13      	ble.n	17eb6 <ble_ll_scan_common_init+0x4e>
                        ble_ll_scan_time_hci_to_ticks(BLE_HCI_SCAN_ITVL_DEF);
        scanp->timing.window =
                        ble_ll_scan_time_hci_to_ticks(BLE_HCI_SCAN_WINDOW_DEF);
    }

    scansm->scanp_phys[PHY_UNCODED].phy = BLE_PHY_1M;
   17e8e:	4c12      	ldr	r4, [pc, #72]	; (17ed8 <ble_ll_scan_common_init+0x70>)
   17e90:	2301      	movs	r3, #1
   17e92:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    return os_time_get();
   17e96:	f7f5 fbed 	bl	d674 <os_time_get>
    scansm->scanp_phys[PHY_CODED].phy = BLE_PHY_CODED;
#endif

#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LL_PRIVACY)
    /* Make sure we'll generate new NRPA if necessary */
    scansm->scan_nrpa_timer = ble_npl_time_get();
   17e9a:	60e0      	str	r0, [r4, #12]
#endif

    /* Initialize scanning timer */
    os_cputime_timer_init(&scansm->scan_timer, ble_ll_scan_timer_cb, scansm);
   17e9c:	4622      	mov	r2, r4
   17e9e:	4911      	ldr	r1, [pc, #68]	; (17ee4 <ble_ll_scan_common_init+0x7c>)
   17ea0:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   17ea4:	f011 fced 	bl	29882 <os_cputime_timer_init>
    memset(ev, 0, sizeof(*ev));
   17ea8:	2300      	movs	r3, #0
   17eaa:	6563      	str	r3, [r4, #84]	; 0x54
   17eac:	65e3      	str	r3, [r4, #92]	; 0x5c
   17eae:	6623      	str	r3, [r4, #96]	; 0x60
    ev->ev.ev_cb = (os_event_fn *)fn;
   17eb0:	4b0d      	ldr	r3, [pc, #52]	; (17ee8 <ble_ll_scan_common_init+0x80>)
   17eb2:	65a3      	str	r3, [r4, #88]	; 0x58
    os_cputime_timer_init(&scansm->period_timer, ble_ll_scan_period_timer_cb,
                                                                        scansm);
#endif

    ble_npl_event_init(&scansm->scan_interrupted_ev, ble_ll_scan_interrupted_event_cb, NULL);
}
   17eb4:	bd38      	pop	{r3, r4, r5, pc}
    return os_cputime_usecs_to_ticks(value * BLE_HCI_SCAN_ITVL);
   17eb6:	f242 7010 	movw	r0, #10000	; 0x2710
   17eba:	f011 fd0d 	bl	298d8 <os_cputime_usecs_to_ticks>
        scanp->timing.interval =
   17ebe:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   17ec2:	4d06      	ldr	r5, [pc, #24]	; (17edc <ble_ll_scan_common_init+0x74>)
   17ec4:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   17ec8:	60a8      	str	r0, [r5, #8]
    return os_cputime_usecs_to_ticks(value * BLE_HCI_SCAN_ITVL);
   17eca:	f242 7010 	movw	r0, #10000	; 0x2710
   17ece:	f011 fd03 	bl	298d8 <os_cputime_usecs_to_ticks>
        scanp->timing.window =
   17ed2:	60e8      	str	r0, [r5, #12]
    for (i = 0; i < BLE_LL_SCAN_PHY_NUMBER; i++) {
   17ed4:	3401      	adds	r4, #1
   17ed6:	e7d8      	b.n	17e8a <ble_ll_scan_common_init+0x22>
   17ed8:	200026a8 	.word	0x200026a8
   17edc:	20002694 	.word	0x20002694
   17ee0:	00017eed 	.word	0x00017eed
   17ee4:	00017905 	.word	0x00017905
   17ee8:	000182d9 	.word	0x000182d9

00017eec <ble_ll_scan_event_proc>:
{
   17eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return ev->ev.ev_arg;
   17eee:	6884      	ldr	r4, [r0, #8]
    scanp = scansm->scanp;
   17ef0:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
    OS_ENTER_CRITICAL(sr);
   17ef2:	f7f5 fc81 	bl	d7f8 <os_arch_save_sr>
   17ef6:	4605      	mov	r5, r0
    if (!scansm->scan_enabled) {
   17ef8:	7823      	ldrb	r3, [r4, #0]
   17efa:	b183      	cbz	r3, 17f1e <ble_ll_scan_event_proc+0x32>
    if (scansm->cur_aux_data || scansm->scan_rsp_pending) {
   17efc:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   17efe:	b90b      	cbnz	r3, 17f04 <ble_ll_scan_event_proc+0x18>
   17f00:	78e3      	ldrb	r3, [r4, #3]
   17f02:	b1d3      	cbz	r3, 17f3a <ble_ll_scan_event_proc+0x4e>
        STATS_INC(ble_ll_stats, scan_timer_stopped);
   17f04:	4a30      	ldr	r2, [pc, #192]	; (17fc8 <ble_ll_scan_event_proc+0xdc>)
   17f06:	f8d2 30d8 	ldr.w	r3, [r2, #216]	; 0xd8
   17f0a:	3301      	adds	r3, #1
   17f0c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
        scansm->restart_timer_needed = 1;
   17f10:	2301      	movs	r3, #1
   17f12:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
        OS_EXIT_CRITICAL(sr);
   17f16:	4628      	mov	r0, r5
   17f18:	f7f5 fc74 	bl	d804 <os_arch_restore_sr>
}
   17f1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        os_cputime_timer_stop(&scansm->scan_timer);
   17f1e:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   17f22:	f011 fcd0 	bl	298c6 <os_cputime_timer_stop>
        ble_ll_rfmgmt_scan_changed(false, 0);
   17f26:	2100      	movs	r1, #0
   17f28:	4608      	mov	r0, r1
   17f2a:	f7ff f9c7 	bl	172bc <ble_ll_rfmgmt_scan_changed>
        ble_ll_rfmgmt_release();
   17f2e:	f7ff f9f3 	bl	17318 <ble_ll_rfmgmt_release>
        OS_EXIT_CRITICAL(sr);
   17f32:	4628      	mov	r0, r5
   17f34:	f7f5 fc66 	bl	d804 <os_arch_restore_sr>
        return;
   17f38:	e7f0      	b.n	17f1c <ble_ll_scan_event_proc+0x30>
    now = os_cputime_get32();
   17f3a:	f011 fcc8 	bl	298ce <os_cputime_get32>
    inside_window = ble_ll_scan_is_inside_window(scanp, now);
   17f3e:	4601      	mov	r1, r0
   17f40:	4630      	mov	r0, r6
   17f42:	f7ff fa3f 	bl	173c4 <ble_ll_scan_is_inside_window>
   17f46:	4607      	mov	r7, r0
    ble_ll_rfmgmt_scan_changed(true, scanp->timing.start_time);
   17f48:	6931      	ldr	r1, [r6, #16]
   17f4a:	2001      	movs	r0, #1
   17f4c:	f7ff f9b6 	bl	172bc <ble_ll_rfmgmt_scan_changed>
    if (inside_window) {
   17f50:	b167      	cbz	r7, 17f6c <ble_ll_scan_event_proc+0x80>
        next_proc_time = scanp->timing.start_time + scanp->timing.window;
   17f52:	6933      	ldr	r3, [r6, #16]
   17f54:	68f6      	ldr	r6, [r6, #12]
   17f56:	441e      	add	r6, r3
    switch (ble_ll_state_get()) {
   17f58:	f7f8 fd38 	bl	109cc <ble_ll_state_get>
   17f5c:	2806      	cmp	r0, #6
   17f5e:	d824      	bhi.n	17faa <ble_ll_scan_event_proc+0xbe>
   17f60:	e8df f000 	tbb	[pc, r0]
   17f64:	061b0c0b 	.word	0x061b0c0b
   17f68:	230c      	.short	0x230c
   17f6a:	0c          	.byte	0x0c
   17f6b:	00          	.byte	0x00
        next_proc_time = scanp->timing.start_time;
   17f6c:	6936      	ldr	r6, [r6, #16]
   17f6e:	e7f3      	b.n	17f58 <ble_ll_scan_event_proc+0x6c>
        ble_phy_disable();
   17f70:	f001 feb0 	bl	19cd4 <ble_phy_disable>
        if (!inside_window) {
   17f74:	b16f      	cbz	r7, 17f92 <ble_ll_scan_event_proc+0xa6>
        ble_ll_conn_reset_pending_aux_conn_rsp();
   17f76:	f7fa feb3 	bl	12ce0 <ble_ll_conn_reset_pending_aux_conn_rsp>
    if (start_scan) {
   17f7a:	bb07      	cbnz	r7, 17fbe <ble_ll_scan_event_proc+0xd2>
        ble_ll_rfmgmt_release();
   17f7c:	f7ff f9cc 	bl	17318 <ble_ll_rfmgmt_release>
    OS_EXIT_CRITICAL(sr);
   17f80:	4628      	mov	r0, r5
   17f82:	f7f5 fc3f 	bl	d804 <os_arch_restore_sr>
    os_cputime_timer_start(&scansm->scan_timer, next_proc_time);
   17f86:	4631      	mov	r1, r6
   17f88:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   17f8c:	f011 fc97 	bl	298be <os_cputime_timer_start>
   17f90:	e7c4      	b.n	17f1c <ble_ll_scan_event_proc+0x30>
            ble_ll_state_set(BLE_LL_STATE_STANDBY);
   17f92:	2000      	movs	r0, #0
   17f94:	f7f8 fd14 	bl	109c0 <ble_ll_state_set>
   17f98:	e7ed      	b.n	17f76 <ble_ll_scan_event_proc+0x8a>
        ble_phy_disable();
   17f9a:	f001 fe9b 	bl	19cd4 <ble_phy_disable>
        if (!inside_window) {
   17f9e:	2f00      	cmp	r7, #0
   17fa0:	d1eb      	bne.n	17f7a <ble_ll_scan_event_proc+0x8e>
            ble_ll_state_set(BLE_LL_STATE_STANDBY);
   17fa2:	2000      	movs	r0, #0
   17fa4:	f7f8 fd0c 	bl	109c0 <ble_ll_state_set>
   17fa8:	e7e7      	b.n	17f7a <ble_ll_scan_event_proc+0x8e>
        BLE_LL_ASSERT(0);
   17faa:	f7f4 f91d 	bl	c1e8 <hal_debugger_connected>
   17fae:	b100      	cbz	r0, 17fb2 <ble_ll_scan_event_proc+0xc6>
   17fb0:	be01      	bkpt	0x0001
   17fb2:	2300      	movs	r3, #0
   17fb4:	461a      	mov	r2, r3
   17fb6:	4619      	mov	r1, r3
   17fb8:	4618      	mov	r0, r3
   17fba:	f7f4 fb4f 	bl	c65c <__assert_func>
        ble_ll_scan_start(scansm, NULL);
   17fbe:	2100      	movs	r1, #0
   17fc0:	4620      	mov	r0, r4
   17fc2:	f7ff fca5 	bl	17910 <ble_ll_scan_start>
   17fc6:	e7db      	b.n	17f80 <ble_ll_scan_event_proc+0x94>
   17fc8:	20003be0 	.word	0x20003be0

00017fcc <ble_ll_scan_halt>:
{
   17fcc:	b508      	push	{r3, lr}
    if (scansm->scan_rsp_pending) {
   17fce:	4b05      	ldr	r3, [pc, #20]	; (17fe4 <ble_ll_scan_halt+0x18>)
   17fd0:	78db      	ldrb	r3, [r3, #3]
   17fd2:	b903      	cbnz	r3, 17fd6 <ble_ll_scan_halt+0xa>
}
   17fd4:	bd08      	pop	{r3, pc}
        scansm->scan_rsp_pending = 0;
   17fd6:	4803      	ldr	r0, [pc, #12]	; (17fe4 <ble_ll_scan_halt+0x18>)
   17fd8:	2100      	movs	r1, #0
   17fda:	70c1      	strb	r1, [r0, #3]
        ble_ll_scan_req_backoff(scansm, 0);
   17fdc:	f7ff fa36 	bl	1744c <ble_ll_scan_req_backoff>
}
   17fe0:	e7f8      	b.n	17fd4 <ble_ll_scan_halt+0x8>
   17fe2:	bf00      	nop
   17fe4:	200026a8 	.word	0x200026a8

00017fe8 <ble_ll_scan_sm_stop>:
{
   17fe8:	b570      	push	{r4, r5, r6, lr}
   17fea:	4605      	mov	r5, r0
    os_cputime_timer_stop(&scansm->scan_timer);
   17fec:	4c1f      	ldr	r4, [pc, #124]	; (1806c <ble_ll_scan_sm_stop+0x84>)
   17fee:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   17ff2:	f011 fc68 	bl	298c6 <os_cputime_timer_stop>
    OS_ENTER_CRITICAL(sr);
   17ff6:	f7f5 fbff 	bl	d7f8 <os_arch_save_sr>
   17ffa:	4606      	mov	r6, r0
    scansm->scan_enabled = 0;
   17ffc:	2300      	movs	r3, #0
   17ffe:	7023      	strb	r3, [r4, #0]
    scansm->restart_timer_needed = 0;
   18000:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    if (scansm->scan_rsp_pending) {
   18004:	78e3      	ldrb	r3, [r4, #3]
   18006:	b9b3      	cbnz	r3, 18036 <ble_ll_scan_sm_stop+0x4e>
    OS_EXIT_CRITICAL(sr);
   18008:	4630      	mov	r0, r6
   1800a:	f7f5 fbfb 	bl	d804 <os_arch_restore_sr>
    STATS_INC(ble_ll_stats, scan_stops);
   1800e:	4a18      	ldr	r2, [pc, #96]	; (18070 <ble_ll_scan_sm_stop+0x88>)
   18010:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
   18014:	3301      	adds	r3, #1
   18016:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if (chk_disable) {
   1801a:	b995      	cbnz	r5, 18042 <ble_ll_scan_sm_stop+0x5a>
    OS_ENTER_CRITICAL(sr);
   1801c:	f7f5 fbec 	bl	d7f8 <os_arch_save_sr>
   18020:	4604      	mov	r4, r0
    ble_ll_rfmgmt_scan_changed(false, 0);
   18022:	2100      	movs	r1, #0
   18024:	4608      	mov	r0, r1
   18026:	f7ff f949 	bl	172bc <ble_ll_rfmgmt_scan_changed>
    ble_ll_rfmgmt_release();
   1802a:	f7ff f975 	bl	17318 <ble_ll_rfmgmt_release>
    OS_EXIT_CRITICAL(sr);
   1802e:	4620      	mov	r0, r4
   18030:	f7f5 fbe8 	bl	d804 <os_arch_restore_sr>
}
   18034:	bd70      	pop	{r4, r5, r6, pc}
        scansm->scan_rsp_pending = 0;
   18036:	4620      	mov	r0, r4
   18038:	2100      	movs	r1, #0
   1803a:	70e1      	strb	r1, [r4, #3]
        ble_ll_scan_req_backoff(scansm, 0);
   1803c:	f7ff fa06 	bl	1744c <ble_ll_scan_req_backoff>
   18040:	e7e2      	b.n	18008 <ble_ll_scan_sm_stop+0x20>
        OS_ENTER_CRITICAL(sr);
   18042:	f7f5 fbd9 	bl	d7f8 <os_arch_save_sr>
   18046:	4604      	mov	r4, r0
        lls = ble_ll_state_get();
   18048:	f7f8 fcc0 	bl	109cc <ble_ll_state_get>
        if ((lls == BLE_LL_STATE_SCANNING) ||
   1804c:	2802      	cmp	r0, #2
   1804e:	d007      	beq.n	18060 <ble_ll_scan_sm_stop+0x78>
   18050:	2803      	cmp	r0, #3
   18052:	d003      	beq.n	1805c <ble_ll_scan_sm_stop+0x74>
        OS_EXIT_CRITICAL(sr);
   18054:	4620      	mov	r0, r4
   18056:	f7f5 fbd5 	bl	d804 <os_arch_restore_sr>
   1805a:	e7df      	b.n	1801c <ble_ll_scan_sm_stop+0x34>
                        (lls == BLE_LL_STATE_INITIATING && chk_disable == 1)) {
   1805c:	2d01      	cmp	r5, #1
   1805e:	d1f9      	bne.n	18054 <ble_ll_scan_sm_stop+0x6c>
            ble_phy_disable();
   18060:	f001 fe38 	bl	19cd4 <ble_phy_disable>
            ble_ll_state_set(BLE_LL_STATE_STANDBY);
   18064:	2000      	movs	r0, #0
   18066:	f7f8 fcab 	bl	109c0 <ble_ll_state_set>
   1806a:	e7f3      	b.n	18054 <ble_ll_scan_sm_stop+0x6c>
   1806c:	200026a8 	.word	0x200026a8
   18070:	20003be0 	.word	0x20003be0

00018074 <ble_ll_scan_set_enable>:
    if ((filter_dups > 1) || (enable > 1)) {
   18074:	2901      	cmp	r1, #1
   18076:	f200 8086 	bhi.w	18186 <ble_ll_scan_set_enable+0x112>
   1807a:	2801      	cmp	r0, #1
   1807c:	f200 8085 	bhi.w	1818a <ble_ll_scan_set_enable+0x116>
{
   18080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (!enable) {
   18082:	b948      	cbnz	r0, 18098 <ble_ll_scan_set_enable+0x24>
        if (scansm->scan_enabled) {
   18084:	4b43      	ldr	r3, [pc, #268]	; (18194 <ble_ll_scan_set_enable+0x120>)
   18086:	781b      	ldrb	r3, [r3, #0]
   18088:	b90b      	cbnz	r3, 1808e <ble_ll_scan_set_enable+0x1a>
        return BLE_ERR_SUCCESS;
   1808a:	2000      	movs	r0, #0
}
   1808c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            ble_ll_scan_sm_stop(1);
   1808e:	2001      	movs	r0, #1
   18090:	f7ff ffaa 	bl	17fe8 <ble_ll_scan_sm_stop>
        return BLE_ERR_SUCCESS;
   18094:	2000      	movs	r0, #0
   18096:	e7f9      	b.n	1808c <ble_ll_scan_set_enable+0x18>
    if (scansm->scan_enabled) {
   18098:	4b3e      	ldr	r3, [pc, #248]	; (18194 <ble_ll_scan_set_enable+0x120>)
   1809a:	781b      	ldrb	r3, [r3, #0]
   1809c:	b9f3      	cbnz	r3, 180dc <ble_ll_scan_set_enable+0x68>
    scansm->scan_filt_dups = filter_dups;
   1809e:	4a3d      	ldr	r2, [pc, #244]	; (18194 <ble_ll_scan_set_enable+0x120>)
   180a0:	7091      	strb	r1, [r2, #2]
    scansm->scanp = NULL;
   180a2:	2300      	movs	r3, #0
   180a4:	66d3      	str	r3, [r2, #108]	; 0x6c
    scansm->scanp_next = NULL;
   180a6:	6713      	str	r3, [r2, #112]	; 0x70
    for (i = 0; i < BLE_LL_SCAN_PHY_NUMBER; i++) {
   180a8:	2b00      	cmp	r3, #0
   180aa:	dd1e      	ble.n	180ea <ble_ll_scan_set_enable+0x76>
    if (!scansm->scanp) {
   180ac:	4b39      	ldr	r3, [pc, #228]	; (18194 <ble_ll_scan_set_enable+0x120>)
   180ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   180b0:	2b00      	cmp	r3, #0
   180b2:	d04d      	beq.n	18150 <ble_ll_scan_set_enable+0xdc>
    rc = ble_ll_scan_sm_start(scansm);
   180b4:	4837      	ldr	r0, [pc, #220]	; (18194 <ble_ll_scan_set_enable+0x120>)
   180b6:	f7ff fe83 	bl	17dc0 <ble_ll_scan_sm_start>
    return rc;
   180ba:	e7e7      	b.n	1808c <ble_ll_scan_set_enable+0x18>
            if (scanp_phy->configured &&
   180bc:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   180c0:	0090      	lsls	r0, r2, #2
   180c2:	4a34      	ldr	r2, [pc, #208]	; (18194 <ble_ll_scan_set_enable+0x120>)
   180c4:	4402      	add	r2, r0
   180c6:	f892 2077 	ldrb.w	r2, [r2, #119]	; 0x77
   180ca:	b12a      	cbz	r2, 180d8 <ble_ll_scan_set_enable+0x64>
                                scanp_phy->scan_type == BLE_SCAN_TYPE_INITIATE) {
   180cc:	4a31      	ldr	r2, [pc, #196]	; (18194 <ble_ll_scan_set_enable+0x120>)
   180ce:	4402      	add	r2, r0
   180d0:	f892 2078 	ldrb.w	r2, [r2, #120]	; 0x78
            if (scanp_phy->configured &&
   180d4:	2a02      	cmp	r2, #2
   180d6:	d05a      	beq.n	1818e <ble_ll_scan_set_enable+0x11a>
        for (i = 0; i < BLE_LL_SCAN_PHY_NUMBER; i++) {
   180d8:	3301      	adds	r3, #1
   180da:	e000      	b.n	180de <ble_ll_scan_set_enable+0x6a>
   180dc:	2300      	movs	r3, #0
   180de:	2b00      	cmp	r3, #0
   180e0:	ddec      	ble.n	180bc <ble_ll_scan_set_enable+0x48>
        scansm->scan_filt_dups = filter_dups;
   180e2:	4b2c      	ldr	r3, [pc, #176]	; (18194 <ble_ll_scan_set_enable+0x120>)
   180e4:	7099      	strb	r1, [r3, #2]
        return BLE_ERR_SUCCESS;
   180e6:	2000      	movs	r0, #0
   180e8:	e7d0      	b.n	1808c <ble_ll_scan_set_enable+0x18>
        scanp_phy = &scansm->scanp_phys[i];
   180ea:	009a      	lsls	r2, r3, #2
   180ec:	18d0      	adds	r0, r2, r3
   180ee:	0081      	lsls	r1, r0, #2
   180f0:	3170      	adds	r1, #112	; 0x70
   180f2:	4828      	ldr	r0, [pc, #160]	; (18194 <ble_ll_scan_set_enable+0x120>)
   180f4:	4401      	add	r1, r0
   180f6:	1d0e      	adds	r6, r1, #4
        if (!scanp->configured) {
   180f8:	441a      	add	r2, r3
   180fa:	0091      	lsls	r1, r2, #2
   180fc:	4a26      	ldr	r2, [pc, #152]	; (18198 <ble_ll_scan_set_enable+0x124>)
   180fe:	440a      	add	r2, r1
   18100:	78d1      	ldrb	r1, [r2, #3]
   18102:	b1f1      	cbz	r1, 18142 <ble_ll_scan_set_enable+0xce>
        scanp_phy->configured = scanp->configured;
   18104:	4684      	mov	ip, r0
   18106:	009a      	lsls	r2, r3, #2
   18108:	18d0      	adds	r0, r2, r3
   1810a:	0084      	lsls	r4, r0, #2
   1810c:	4620      	mov	r0, r4
   1810e:	4464      	add	r4, ip
   18110:	f884 1077 	strb.w	r1, [r4, #119]	; 0x77
        scanp_phy->scan_type = scanp->scan_type;
   18114:	4d20      	ldr	r5, [pc, #128]	; (18198 <ble_ll_scan_set_enable+0x124>)
   18116:	4405      	add	r5, r0
   18118:	792a      	ldrb	r2, [r5, #4]
   1811a:	f884 2078 	strb.w	r2, [r4, #120]	; 0x78
        scanp_phy->timing = scanp->timing;
   1811e:	f105 0208 	add.w	r2, r5, #8
   18122:	f104 077c 	add.w	r7, r4, #124	; 0x7c
   18126:	ca07      	ldmia	r2, {r0, r1, r2}
   18128:	e887 0007 	stmia.w	r7, {r0, r1, r2}
        scanp_phy->scan_filt_policy = scanp->scan_filt_policy;
   1812c:	78aa      	ldrb	r2, [r5, #2]
   1812e:	f884 2076 	strb.w	r2, [r4, #118]	; 0x76
        scanp_phy->own_addr_type = scanp->own_addr_type;
   18132:	786a      	ldrb	r2, [r5, #1]
   18134:	f884 2075 	strb.w	r2, [r4, #117]	; 0x75
        if (!scansm->scanp) {
   18138:	f8dc 106c 	ldr.w	r1, [ip, #108]	; 0x6c
   1813c:	b119      	cbz	r1, 18146 <ble_ll_scan_set_enable+0xd2>
            scansm->scanp_next = scanp_phy;
   1813e:	4a15      	ldr	r2, [pc, #84]	; (18194 <ble_ll_scan_set_enable+0x120>)
   18140:	6716      	str	r6, [r2, #112]	; 0x70
    for (i = 0; i < BLE_LL_SCAN_PHY_NUMBER; i++) {
   18142:	3301      	adds	r3, #1
   18144:	e7b0      	b.n	180a8 <ble_ll_scan_set_enable+0x34>
            scansm->scanp = scanp_phy;
   18146:	f8cc 606c 	str.w	r6, [ip, #108]	; 0x6c
            scansm->own_addr_type = scanp_phy->own_addr_type;
   1814a:	f88c 2001 	strb.w	r2, [ip, #1]
   1814e:	e7f8      	b.n	18142 <ble_ll_scan_set_enable+0xce>
        scansm->scanp = &scansm->scanp_phys[PHY_UNCODED];
   18150:	4c10      	ldr	r4, [pc, #64]	; (18194 <ble_ll_scan_set_enable+0x120>)
   18152:	f104 0374 	add.w	r3, r4, #116	; 0x74
   18156:	66e3      	str	r3, [r4, #108]	; 0x6c
        scansm->own_addr_type = BLE_ADDR_PUBLIC;
   18158:	2500      	movs	r5, #0
   1815a:	7065      	strb	r5, [r4, #1]
        scanp_phy->configured = 1;
   1815c:	2301      	movs	r3, #1
   1815e:	f884 3077 	strb.w	r3, [r4, #119]	; 0x77
        scanp_phy->scan_type = BLE_SCAN_TYPE_PASSIVE;
   18162:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
    return os_cputime_usecs_to_ticks(value * BLE_HCI_SCAN_ITVL);
   18166:	f242 7010 	movw	r0, #10000	; 0x2710
   1816a:	f011 fbb5 	bl	298d8 <os_cputime_usecs_to_ticks>
        scanp_phy->timing.interval =
   1816e:	67e0      	str	r0, [r4, #124]	; 0x7c
    return os_cputime_usecs_to_ticks(value * BLE_HCI_SCAN_ITVL);
   18170:	f242 7010 	movw	r0, #10000	; 0x2710
   18174:	f011 fbb0 	bl	298d8 <os_cputime_usecs_to_ticks>
        scanp_phy->timing.window =
   18178:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
        scanp_phy->scan_filt_policy = BLE_HCI_SCAN_FILT_NO_WL;
   1817c:	f884 5076 	strb.w	r5, [r4, #118]	; 0x76
        scanp_phy->own_addr_type = BLE_ADDR_PUBLIC;
   18180:	f884 5075 	strb.w	r5, [r4, #117]	; 0x75
   18184:	e796      	b.n	180b4 <ble_ll_scan_set_enable+0x40>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   18186:	2012      	movs	r0, #18
   18188:	4770      	bx	lr
   1818a:	2012      	movs	r0, #18
}
   1818c:	4770      	bx	lr
                return BLE_ERR_CMD_DISALLOWED;
   1818e:	200c      	movs	r0, #12
   18190:	e77c      	b.n	1808c <ble_ll_scan_set_enable+0x18>
   18192:	bf00      	nop
   18194:	200026a8 	.word	0x200026a8
   18198:	20002694 	.word	0x20002694

0001819c <ble_ll_scan_rx_isr_start>:
{
   1819c:	b510      	push	{r4, lr}
    scanp = scansm->scanp;
   1819e:	4b1a      	ldr	r3, [pc, #104]	; (18208 <ble_ll_scan_rx_isr_start+0x6c>)
   181a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    switch (scanp->scan_type) {
   181a2:	791b      	ldrb	r3, [r3, #4]
   181a4:	2b01      	cmp	r3, #1
   181a6:	d12c      	bne.n	18202 <ble_ll_scan_rx_isr_start+0x66>
        if ((pdu_type == BLE_ADV_PDU_TYPE_ADV_IND) ||
   181a8:	b118      	cbz	r0, 181b2 <ble_ll_scan_rx_isr_start+0x16>
   181aa:	2806      	cmp	r0, #6
   181ac:	d01d      	beq.n	181ea <ble_ll_scan_rx_isr_start+0x4e>
    rc = 0;
   181ae:	2400      	movs	r4, #0
   181b0:	e000      	b.n	181b4 <ble_ll_scan_rx_isr_start+0x18>
            rc = 1;
   181b2:	2401      	movs	r4, #1
        if (scansm->cur_aux_data && !scansm->scan_rsp_pending ) {
   181b4:	4b14      	ldr	r3, [pc, #80]	; (18208 <ble_ll_scan_rx_isr_start+0x6c>)
   181b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   181b8:	b143      	cbz	r3, 181cc <ble_ll_scan_rx_isr_start+0x30>
   181ba:	4b13      	ldr	r3, [pc, #76]	; (18208 <ble_ll_scan_rx_isr_start+0x6c>)
   181bc:	78db      	ldrb	r3, [r3, #3]
   181be:	b92b      	cbnz	r3, 181cc <ble_ll_scan_rx_isr_start+0x30>
            STATS_INC(ble_ll_stats, aux_received);
   181c0:	4a12      	ldr	r2, [pc, #72]	; (1820c <ble_ll_scan_rx_isr_start+0x70>)
   181c2:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
   181c6:	3301      	adds	r3, #1
   181c8:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
        if (scansm->scan_rsp_pending) {
   181cc:	4b0e      	ldr	r3, [pc, #56]	; (18208 <ble_ll_scan_rx_isr_start+0x6c>)
   181ce:	78db      	ldrb	r3, [r3, #3]
   181d0:	b1c3      	cbz	r3, 18204 <ble_ll_scan_rx_isr_start+0x68>
            scansm->scan_rsp_pending = 0;
   181d2:	4b0d      	ldr	r3, [pc, #52]	; (18208 <ble_ll_scan_rx_isr_start+0x6c>)
   181d4:	2200      	movs	r2, #0
   181d6:	70da      	strb	r2, [r3, #3]
            if (pdu_type == BLE_ADV_PDU_TYPE_SCAN_RSP) {
   181d8:	2804      	cmp	r0, #4
   181da:	d008      	beq.n	181ee <ble_ll_scan_rx_isr_start+0x52>
            } else if (pdu_type == BLE_ADV_PDU_TYPE_AUX_SCAN_RSP) {
   181dc:	2807      	cmp	r0, #7
   181de:	d00b      	beq.n	181f8 <ble_ll_scan_rx_isr_start+0x5c>
                ble_ll_scan_req_backoff(scansm, 0);
   181e0:	2100      	movs	r1, #0
   181e2:	4809      	ldr	r0, [pc, #36]	; (18208 <ble_ll_scan_rx_isr_start+0x6c>)
   181e4:	f7ff f932 	bl	1744c <ble_ll_scan_req_backoff>
   181e8:	e00c      	b.n	18204 <ble_ll_scan_rx_isr_start+0x68>
            rc = 1;
   181ea:	2401      	movs	r4, #1
   181ec:	e7e2      	b.n	181b4 <ble_ll_scan_rx_isr_start+0x18>
                *rxflags |= BLE_MBUF_HDR_F_SCAN_RSP_RXD;
   181ee:	880b      	ldrh	r3, [r1, #0]
   181f0:	f043 0308 	orr.w	r3, r3, #8
   181f4:	800b      	strh	r3, [r1, #0]
   181f6:	e005      	b.n	18204 <ble_ll_scan_rx_isr_start+0x68>
                *rxflags |= BLE_MBUF_HDR_F_SCAN_RSP_RXD;
   181f8:	880b      	ldrh	r3, [r1, #0]
   181fa:	f043 0308 	orr.w	r3, r3, #8
   181fe:	800b      	strh	r3, [r1, #0]
   18200:	e000      	b.n	18204 <ble_ll_scan_rx_isr_start+0x68>
    rc = 0;
   18202:	2400      	movs	r4, #0
}
   18204:	4620      	mov	r0, r4
   18206:	bd10      	pop	{r4, pc}
   18208:	200026a8 	.word	0x200026a8
   1820c:	20003be0 	.word	0x20003be0

00018210 <ble_ll_scan_adv_decode_addr>:
    if (pdu_type != BLE_ADV_PDU_TYPE_ADV_EXT_IND &&
   18210:	1fc2      	subs	r2, r0, #7
   18212:	b2d2      	uxtb	r2, r2
   18214:	2a01      	cmp	r2, #1
   18216:	d923      	bls.n	18260 <ble_ll_scan_adv_decode_addr+0x50>
{
   18218:	b410      	push	{r4}
        *addr_type = ble_ll_get_addr_type(rxbuf[0] & BLE_ADV_PDU_HDR_TXADD_MASK);
   1821a:	780a      	ldrb	r2, [r1, #0]
    if (txrxflag) {
   1821c:	f012 0f40 	tst.w	r2, #64	; 0x40
   18220:	d00d      	beq.n	1823e <ble_ll_scan_adv_decode_addr+0x2e>
        return BLE_HCI_ADV_OWN_ADDR_RANDOM;
   18222:	2401      	movs	r4, #1
   18224:	9a01      	ldr	r2, [sp, #4]
   18226:	7014      	strb	r4, [r2, #0]
        *addr = rxbuf + BLE_LL_PDU_HDR_LEN;
   18228:	1c8a      	adds	r2, r1, #2
   1822a:	601a      	str	r2, [r3, #0]
        if (pdu_type != BLE_ADV_PDU_TYPE_ADV_DIRECT_IND) {
   1822c:	2801      	cmp	r0, #1
   1822e:	d008      	beq.n	18242 <ble_ll_scan_adv_decode_addr+0x32>
            *inita = NULL;
   18230:	2000      	movs	r0, #0
   18232:	9b02      	ldr	r3, [sp, #8]
   18234:	6018      	str	r0, [r3, #0]
            *inita_type = 0;
   18236:	9b03      	ldr	r3, [sp, #12]
   18238:	7018      	strb	r0, [r3, #0]
}
   1823a:	bc10      	pop	{r4}
   1823c:	4770      	bx	lr
    return BLE_HCI_ADV_OWN_ADDR_PUBLIC;
   1823e:	2400      	movs	r4, #0
   18240:	e7f0      	b.n	18224 <ble_ll_scan_adv_decode_addr+0x14>
        *inita = rxbuf + BLE_LL_PDU_HDR_LEN + BLE_DEV_ADDR_LEN;
   18242:	f101 0308 	add.w	r3, r1, #8
   18246:	9a02      	ldr	r2, [sp, #8]
   18248:	6013      	str	r3, [r2, #0]
    if (txrxflag) {
   1824a:	f991 3000 	ldrsb.w	r3, [r1]
   1824e:	2b00      	cmp	r3, #0
   18250:	db04      	blt.n	1825c <ble_ll_scan_adv_decode_addr+0x4c>
    return BLE_HCI_ADV_OWN_ADDR_PUBLIC;
   18252:	2300      	movs	r3, #0
        *inita_type = ble_ll_get_addr_type(rxbuf[0] & BLE_ADV_PDU_HDR_RXADD_MASK);
   18254:	9a03      	ldr	r2, [sp, #12]
   18256:	7013      	strb	r3, [r2, #0]
        return 0;
   18258:	2000      	movs	r0, #0
   1825a:	e7ee      	b.n	1823a <ble_ll_scan_adv_decode_addr+0x2a>
        return BLE_HCI_ADV_OWN_ADDR_RANDOM;
   1825c:	2301      	movs	r3, #1
   1825e:	e7f9      	b.n	18254 <ble_ll_scan_adv_decode_addr+0x44>
    return -1;
   18260:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   18264:	4770      	bx	lr
	...

00018268 <ble_ll_scan_chk_resume>:
{
   18268:	b538      	push	{r3, r4, r5, lr}
    if (scansm->scan_enabled) {
   1826a:	4b19      	ldr	r3, [pc, #100]	; (182d0 <ble_ll_scan_chk_resume+0x68>)
   1826c:	781b      	ldrb	r3, [r3, #0]
   1826e:	b903      	cbnz	r3, 18272 <ble_ll_scan_chk_resume+0xa>
}
   18270:	bd38      	pop	{r3, r4, r5, pc}
        OS_ENTER_CRITICAL(sr);
   18272:	f7f5 fac1 	bl	d7f8 <os_arch_save_sr>
   18276:	4604      	mov	r4, r0
        if (scansm->restart_timer_needed) {
   18278:	4b15      	ldr	r3, [pc, #84]	; (182d0 <ble_ll_scan_chk_resume+0x68>)
   1827a:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
   1827e:	b94b      	cbnz	r3, 18294 <ble_ll_scan_chk_resume+0x2c>
        now = os_cputime_get32();
   18280:	f011 fb25 	bl	298ce <os_cputime_get32>
   18284:	4605      	mov	r5, r0
        if (ble_ll_state_get() == BLE_LL_STATE_STANDBY &&
   18286:	f7f8 fba1 	bl	109cc <ble_ll_state_get>
   1828a:	b1a0      	cbz	r0, 182b6 <ble_ll_scan_chk_resume+0x4e>
        OS_EXIT_CRITICAL(sr);
   1828c:	4620      	mov	r0, r4
   1828e:	f7f5 fab9 	bl	d804 <os_arch_restore_sr>
   18292:	e7ed      	b.n	18270 <ble_ll_scan_chk_resume+0x8>
            scansm->restart_timer_needed = 0;
   18294:	480e      	ldr	r0, [pc, #56]	; (182d0 <ble_ll_scan_chk_resume+0x68>)
   18296:	2300      	movs	r3, #0
   18298:	f880 3064 	strb.w	r3, [r0, #100]	; 0x64
            ble_ll_event_send(&scansm->scan_sched_ev);
   1829c:	302c      	adds	r0, #44	; 0x2c
   1829e:	f7f8 fb9b 	bl	109d8 <ble_ll_event_send>
            STATS_INC(ble_ll_stats, scan_timer_restarted);
   182a2:	4a0c      	ldr	r2, [pc, #48]	; (182d4 <ble_ll_scan_chk_resume+0x6c>)
   182a4:	f8d2 30dc 	ldr.w	r3, [r2, #220]	; 0xdc
   182a8:	3301      	adds	r3, #1
   182aa:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
            OS_EXIT_CRITICAL(sr);
   182ae:	4620      	mov	r0, r4
   182b0:	f7f5 faa8 	bl	d804 <os_arch_restore_sr>
            return;
   182b4:	e7dc      	b.n	18270 <ble_ll_scan_chk_resume+0x8>
            ble_ll_scan_is_inside_window(scansm->scanp, now)) {
   182b6:	4629      	mov	r1, r5
   182b8:	4b05      	ldr	r3, [pc, #20]	; (182d0 <ble_ll_scan_chk_resume+0x68>)
   182ba:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
   182bc:	f7ff f882 	bl	173c4 <ble_ll_scan_is_inside_window>
        if (ble_ll_state_get() == BLE_LL_STATE_STANDBY &&
   182c0:	2800      	cmp	r0, #0
   182c2:	d0e3      	beq.n	1828c <ble_ll_scan_chk_resume+0x24>
            ble_ll_scan_start(scansm, NULL);
   182c4:	2100      	movs	r1, #0
   182c6:	4802      	ldr	r0, [pc, #8]	; (182d0 <ble_ll_scan_chk_resume+0x68>)
   182c8:	f7ff fb22 	bl	17910 <ble_ll_scan_start>
   182cc:	e7de      	b.n	1828c <ble_ll_scan_chk_resume+0x24>
   182ce:	bf00      	nop
   182d0:	200026a8 	.word	0x200026a8
   182d4:	20003be0 	.word	0x20003be0

000182d8 <ble_ll_scan_interrupted_event_cb>:
{
   182d8:	b508      	push	{r3, lr}
    if (!scansm->scan_enabled) {
   182da:	4b07      	ldr	r3, [pc, #28]	; (182f8 <ble_ll_scan_interrupted_event_cb+0x20>)
   182dc:	781b      	ldrb	r3, [r3, #0]
   182de:	b123      	cbz	r3, 182ea <ble_ll_scan_interrupted_event_cb+0x12>
    if (scansm->scan_rsp_pending) {
   182e0:	4b05      	ldr	r3, [pc, #20]	; (182f8 <ble_ll_scan_interrupted_event_cb+0x20>)
   182e2:	78db      	ldrb	r3, [r3, #3]
   182e4:	b913      	cbnz	r3, 182ec <ble_ll_scan_interrupted_event_cb+0x14>
    ble_ll_scan_chk_resume();
   182e6:	f7ff ffbf 	bl	18268 <ble_ll_scan_chk_resume>
}
   182ea:	bd08      	pop	{r3, pc}
        scansm->scan_rsp_pending = 0;
   182ec:	4802      	ldr	r0, [pc, #8]	; (182f8 <ble_ll_scan_interrupted_event_cb+0x20>)
   182ee:	2100      	movs	r1, #0
   182f0:	70c1      	strb	r1, [r0, #3]
        ble_ll_scan_req_backoff(scansm, 0);
   182f2:	f7ff f8ab 	bl	1744c <ble_ll_scan_req_backoff>
   182f6:	e7f6      	b.n	182e6 <ble_ll_scan_interrupted_event_cb+0xe>
   182f8:	200026a8 	.word	0x200026a8

000182fc <ble_ll_scan_interrupted>:
{
   182fc:	b508      	push	{r3, lr}
    ble_ll_event_send(&scansm->scan_interrupted_ev);
   182fe:	3054      	adds	r0, #84	; 0x54
   18300:	f7f8 fb6a 	bl	109d8 <ble_ll_event_send>
}
   18304:	bd08      	pop	{r3, pc}
	...

00018308 <ble_ll_scan_rx_isr_end>:
{
   18308:	b5f0      	push	{r4, r5, r6, r7, lr}
   1830a:	b089      	sub	sp, #36	; 0x24
    if (rxpdu == NULL) {
   1830c:	b188      	cbz	r0, 18332 <ble_ll_scan_rx_isr_end+0x2a>
   1830e:	4605      	mov	r5, r0
   18310:	f100 0718 	add.w	r7, r0, #24
    rxbuf = rxpdu->om_data;
   18314:	6806      	ldr	r6, [r0, #0]
    pdu_type = rxbuf[0] & BLE_ADV_PDU_HDR_TYPE_MASK;
   18316:	7834      	ldrb	r4, [r6, #0]
   18318:	f004 040f 	and.w	r4, r4, #15
    if (!crcok) {
   1831c:	b349      	cbz	r1, 18372 <ble_ll_scan_rx_isr_end+0x6a>
    addrd.rl = NULL;
   1831e:	2300      	movs	r3, #0
   18320:	9307      	str	r3, [sp, #28]
    switch (pdu_type) {
   18322:	2c06      	cmp	r4, #6
   18324:	d825      	bhi.n	18372 <ble_ll_scan_rx_isr_end+0x6a>
   18326:	e8df f004 	tbb	[pc, r4]
   1832a:	0909      	.short	0x0909
   1832c:	24092409 	.word	0x24092409
   18330:	09          	.byte	0x09
   18331:	00          	.byte	0x00
        ble_ll_scan_interrupted(scansm);
   18332:	4816      	ldr	r0, [pc, #88]	; (1838c <ble_ll_scan_rx_isr_end+0x84>)
   18334:	f7ff ffe2 	bl	182fc <ble_ll_scan_interrupted>
        return 0;
   18338:	2000      	movs	r0, #0
   1833a:	e012      	b.n	18362 <ble_ll_scan_rx_isr_end+0x5a>
        rc = ble_ll_scan_rx_isr_on_legacy(pdu_type, rxbuf, hdr, &addrd);
   1833c:	ab01      	add	r3, sp, #4
   1833e:	463a      	mov	r2, r7
   18340:	4631      	mov	r1, r6
   18342:	4620      	mov	r0, r4
   18344:	f7ff f9e6 	bl	17714 <ble_ll_scan_rx_isr_on_legacy>
    if (rc == -1) {
   18348:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   1834c:	d011      	beq.n	18372 <ble_ll_scan_rx_isr_end+0x6a>
    } else if (rc == 1) {
   1834e:	2801      	cmp	r0, #1
   18350:	d109      	bne.n	18366 <ble_ll_scan_rx_isr_end+0x5e>
        if (ble_ll_scan_send_scan_req(pdu_type, rxbuf, hdr, &addrd)) {
   18352:	ab01      	add	r3, sp, #4
   18354:	463a      	mov	r2, r7
   18356:	4631      	mov	r1, r6
   18358:	4620      	mov	r0, r4
   1835a:	f7ff fa95 	bl	17888 <ble_ll_scan_send_scan_req>
   1835e:	b110      	cbz	r0, 18366 <ble_ll_scan_rx_isr_end+0x5e>
            return 0;
   18360:	2000      	movs	r0, #0
}
   18362:	b009      	add	sp, #36	; 0x24
   18364:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ble_ll_state_set(BLE_LL_STATE_STANDBY);
   18366:	2000      	movs	r0, #0
   18368:	f7f8 fb2a 	bl	109c0 <ble_ll_state_set>
    return -1;
   1836c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18370:	e7f7      	b.n	18362 <ble_ll_scan_rx_isr_end+0x5a>
    rxinfo->flags |= BLE_MBUF_HDR_F_IGNORED;
   18372:	8b2b      	ldrh	r3, [r5, #24]
   18374:	ea6f 4343 	mvn.w	r3, r3, lsl #17
   18378:	ea6f 4353 	mvn.w	r3, r3, lsr #17
   1837c:	832b      	strh	r3, [r5, #24]
    ble_ll_state_set(BLE_LL_STATE_STANDBY);
   1837e:	2000      	movs	r0, #0
   18380:	f7f8 fb1e 	bl	109c0 <ble_ll_state_set>
    return -1;
   18384:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18388:	e7eb      	b.n	18362 <ble_ll_scan_rx_isr_end+0x5a>
   1838a:	bf00      	nop
   1838c:	200026a8 	.word	0x200026a8

00018390 <ble_ll_scan_wfr_timer_exp>:
{
   18390:	b510      	push	{r4, lr}
   18392:	b082      	sub	sp, #8
    if (scansm->scan_rsp_pending) {
   18394:	4b1b      	ldr	r3, [pc, #108]	; (18404 <ble_ll_scan_wfr_timer_exp+0x74>)
   18396:	78db      	ldrb	r3, [r3, #3]
   18398:	bb03      	cbnz	r3, 183dc <ble_ll_scan_wfr_timer_exp+0x4c>
    if (scansm->cur_aux_data) {
   1839a:	4b1a      	ldr	r3, [pc, #104]	; (18404 <ble_ll_scan_wfr_timer_exp+0x74>)
   1839c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   1839e:	b1cb      	cbz	r3, 183d4 <ble_ll_scan_wfr_timer_exp+0x44>
        ble_ll_scan_interrupted(scansm);
   183a0:	4c18      	ldr	r4, [pc, #96]	; (18404 <ble_ll_scan_wfr_timer_exp+0x74>)
   183a2:	4620      	mov	r0, r4
   183a4:	f7ff ffaa 	bl	182fc <ble_ll_scan_interrupted>
        ble_phy_disable();
   183a8:	f001 fc94 	bl	19cd4 <ble_phy_disable>
        now = os_cputime_get32();
   183ac:	f011 fa8f 	bl	298ce <os_cputime_get32>
        if (!ble_ll_scan_is_inside_window(scansm->scanp, now)) {
   183b0:	4601      	mov	r1, r0
   183b2:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
   183b4:	f7ff f806 	bl	173c4 <ble_ll_scan_is_inside_window>
   183b8:	b1b0      	cbz	r0, 183e8 <ble_ll_scan_wfr_timer_exp+0x58>
        ble_ll_get_chan_to_scan(scansm, &chan, &phy);
   183ba:	466a      	mov	r2, sp
   183bc:	f10d 0107 	add.w	r1, sp, #7
   183c0:	4810      	ldr	r0, [pc, #64]	; (18404 <ble_ll_scan_wfr_timer_exp+0x74>)
   183c2:	f7fe ffdd 	bl	17380 <ble_ll_get_chan_to_scan>
        rc = ble_phy_setchan(chan, BLE_ACCESS_ADDR_ADV, BLE_LL_CRCINIT_ADV);
   183c6:	4a10      	ldr	r2, [pc, #64]	; (18408 <ble_ll_scan_wfr_timer_exp+0x78>)
   183c8:	4910      	ldr	r1, [pc, #64]	; (1840c <ble_ll_scan_wfr_timer_exp+0x7c>)
   183ca:	f89d 0007 	ldrb.w	r0, [sp, #7]
   183ce:	f001 fc5b 	bl	19c88 <ble_phy_setchan>
        BLE_LL_ASSERT(rc == 0);
   183d2:	b960      	cbnz	r0, 183ee <ble_ll_scan_wfr_timer_exp+0x5e>
    ble_phy_restart_rx();
   183d4:	f001 fe7a 	bl	1a0cc <ble_phy_restart_rx>
}
   183d8:	b002      	add	sp, #8
   183da:	bd10      	pop	{r4, pc}
        scansm->scan_rsp_pending = 0;
   183dc:	4809      	ldr	r0, [pc, #36]	; (18404 <ble_ll_scan_wfr_timer_exp+0x74>)
   183de:	2100      	movs	r1, #0
   183e0:	70c1      	strb	r1, [r0, #3]
        ble_ll_scan_req_backoff(scansm, 0);
   183e2:	f7ff f833 	bl	1744c <ble_ll_scan_req_backoff>
   183e6:	e7d8      	b.n	1839a <ble_ll_scan_wfr_timer_exp+0xa>
            ble_ll_state_set(BLE_LL_STATE_STANDBY);
   183e8:	f7f8 faea 	bl	109c0 <ble_ll_state_set>
   183ec:	e7f4      	b.n	183d8 <ble_ll_scan_wfr_timer_exp+0x48>
        BLE_LL_ASSERT(rc == 0);
   183ee:	f7f3 fefb 	bl	c1e8 <hal_debugger_connected>
   183f2:	b100      	cbz	r0, 183f6 <ble_ll_scan_wfr_timer_exp+0x66>
   183f4:	be01      	bkpt	0x0001
   183f6:	2300      	movs	r3, #0
   183f8:	461a      	mov	r2, r3
   183fa:	4619      	mov	r1, r3
   183fc:	4618      	mov	r0, r3
   183fe:	f7f4 f92d 	bl	c65c <__assert_func>
   18402:	bf00      	nop
   18404:	200026a8 	.word	0x200026a8
   18408:	00555555 	.word	0x00555555
   1840c:	8e89bed6 	.word	0x8e89bed6

00018410 <ble_ll_scan_rx_pkt_in>:
{
   18410:	b500      	push	{lr}
   18412:	b089      	sub	sp, #36	; 0x24
    ble_ll_scan_rx_pkt_in_on_legacy(ptype, om, hdr, &addrd);
   18414:	ab01      	add	r3, sp, #4
   18416:	f7ff fc8b 	bl	17d30 <ble_ll_scan_rx_pkt_in_on_legacy>
    ble_ll_scan_chk_resume();
   1841a:	f7ff ff25 	bl	18268 <ble_ll_scan_chk_resume>
}
   1841e:	b009      	add	sp, #36	; 0x24
   18420:	f85d fb04 	ldr.w	pc, [sp], #4

00018424 <ble_ll_scan_set_scan_params>:
    if (len != sizeof(*cmd)) {
   18424:	2907      	cmp	r1, #7
   18426:	d135      	bne.n	18494 <ble_ll_scan_set_scan_params+0x70>
{
   18428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (scansm->scan_enabled) {
   1842a:	4b23      	ldr	r3, [pc, #140]	; (184b8 <ble_ll_scan_set_scan_params+0x94>)
   1842c:	781b      	ldrb	r3, [r3, #0]
   1842e:	bb9b      	cbnz	r3, 18498 <ble_ll_scan_set_scan_params+0x74>
    scan_itvl = le16toh(cmd->scan_itvl);
   18430:	f8b0 2001 	ldrh.w	r2, [r0, #1]
    scan_window = le16toh(cmd->scan_window);
   18434:	f8b0 5003 	ldrh.w	r5, [r0, #3]
    if ((cmd->scan_type != BLE_HCI_SCAN_TYPE_PASSIVE) &&
   18438:	7803      	ldrb	r3, [r0, #0]
   1843a:	2b01      	cmp	r3, #1
   1843c:	d82e      	bhi.n	1849c <ble_ll_scan_set_scan_params+0x78>
    if ((scan_itvl < BLE_HCI_SCAN_ITVL_MIN) ||
   1843e:	1f13      	subs	r3, r2, #4
   18440:	b29b      	uxth	r3, r3
   18442:	f643 71fc 	movw	r1, #16380	; 0x3ffc
   18446:	428b      	cmp	r3, r1
   18448:	d82a      	bhi.n	184a0 <ble_ll_scan_set_scan_params+0x7c>
        (scan_itvl > BLE_HCI_SCAN_ITVL_MAX) ||
   1844a:	2d03      	cmp	r5, #3
   1844c:	d92a      	bls.n	184a4 <ble_ll_scan_set_scan_params+0x80>
        (scan_window < BLE_HCI_SCAN_WINDOW_MIN) ||
   1844e:	f5b5 4f80 	cmp.w	r5, #16384	; 0x4000
   18452:	d829      	bhi.n	184a8 <ble_ll_scan_set_scan_params+0x84>
        (scan_window > BLE_HCI_SCAN_WINDOW_MAX) ||
   18454:	42aa      	cmp	r2, r5
   18456:	d329      	bcc.n	184ac <ble_ll_scan_set_scan_params+0x88>
    if (cmd->own_addr_type > BLE_HCI_ADV_OWN_ADDR_MAX) {
   18458:	7943      	ldrb	r3, [r0, #5]
   1845a:	2b03      	cmp	r3, #3
   1845c:	d828      	bhi.n	184b0 <ble_ll_scan_set_scan_params+0x8c>
    if (cmd->filter_policy > BLE_HCI_SCAN_FILT_MAX) {
   1845e:	7983      	ldrb	r3, [r0, #6]
   18460:	2b03      	cmp	r3, #3
   18462:	d827      	bhi.n	184b4 <ble_ll_scan_set_scan_params+0x90>
   18464:	4604      	mov	r4, r0
    scanp->configured = 1;
   18466:	4e15      	ldr	r6, [pc, #84]	; (184bc <ble_ll_scan_set_scan_params+0x98>)
   18468:	2301      	movs	r3, #1
   1846a:	70f3      	strb	r3, [r6, #3]
    scanp->scan_type = cmd->scan_type;
   1846c:	7803      	ldrb	r3, [r0, #0]
   1846e:	7133      	strb	r3, [r6, #4]
    return os_cputime_usecs_to_ticks(value * BLE_HCI_SCAN_ITVL);
   18470:	f240 2771 	movw	r7, #625	; 0x271
   18474:	fb07 f002 	mul.w	r0, r7, r2
   18478:	f011 fa2e 	bl	298d8 <os_cputime_usecs_to_ticks>
    scanp->timing.interval = ble_ll_scan_time_hci_to_ticks(scan_itvl);
   1847c:	60b0      	str	r0, [r6, #8]
    return os_cputime_usecs_to_ticks(value * BLE_HCI_SCAN_ITVL);
   1847e:	fb07 f005 	mul.w	r0, r7, r5
   18482:	f011 fa29 	bl	298d8 <os_cputime_usecs_to_ticks>
    scanp->timing.window = ble_ll_scan_time_hci_to_ticks(scan_window);
   18486:	60f0      	str	r0, [r6, #12]
    scanp->scan_filt_policy = cmd->filter_policy;
   18488:	79a3      	ldrb	r3, [r4, #6]
   1848a:	70b3      	strb	r3, [r6, #2]
    scanp->own_addr_type = cmd->own_addr_type;
   1848c:	7963      	ldrb	r3, [r4, #5]
   1848e:	7073      	strb	r3, [r6, #1]
    return 0;
   18490:	2000      	movs	r0, #0
   18492:	e002      	b.n	1849a <ble_ll_scan_set_scan_params+0x76>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   18494:	2012      	movs	r0, #18
}
   18496:	4770      	bx	lr
        return BLE_ERR_CMD_DISALLOWED;
   18498:	200c      	movs	r0, #12
}
   1849a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1849c:	2012      	movs	r0, #18
   1849e:	e7fc      	b.n	1849a <ble_ll_scan_set_scan_params+0x76>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   184a0:	2012      	movs	r0, #18
   184a2:	e7fa      	b.n	1849a <ble_ll_scan_set_scan_params+0x76>
   184a4:	2012      	movs	r0, #18
   184a6:	e7f8      	b.n	1849a <ble_ll_scan_set_scan_params+0x76>
   184a8:	2012      	movs	r0, #18
   184aa:	e7f6      	b.n	1849a <ble_ll_scan_set_scan_params+0x76>
   184ac:	2012      	movs	r0, #18
   184ae:	e7f4      	b.n	1849a <ble_ll_scan_set_scan_params+0x76>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   184b0:	2012      	movs	r0, #18
   184b2:	e7f2      	b.n	1849a <ble_ll_scan_set_scan_params+0x76>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   184b4:	2012      	movs	r0, #18
   184b6:	e7f0      	b.n	1849a <ble_ll_scan_set_scan_params+0x76>
   184b8:	200026a8 	.word	0x200026a8
   184bc:	20002694 	.word	0x20002694

000184c0 <ble_ll_hci_scan_set_enable>:
    if (len != sizeof(*cmd)) {
   184c0:	2902      	cmp	r1, #2
   184c2:	d001      	beq.n	184c8 <ble_ll_hci_scan_set_enable+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   184c4:	2012      	movs	r0, #18
}
   184c6:	4770      	bx	lr
{
   184c8:	b500      	push	{lr}
   184ca:	b083      	sub	sp, #12
    return ble_ll_scan_set_enable(cmd->enable, cmd->filter_duplicates, 0, 0,
   184cc:	7841      	ldrb	r1, [r0, #1]
   184ce:	7800      	ldrb	r0, [r0, #0]
   184d0:	2200      	movs	r2, #0
   184d2:	9200      	str	r2, [sp, #0]
   184d4:	4613      	mov	r3, r2
   184d6:	f7ff fdcd 	bl	18074 <ble_ll_scan_set_enable>
}
   184da:	b003      	add	sp, #12
   184dc:	f85d fb04 	ldr.w	pc, [sp], #4

000184e0 <ble_ll_scan_can_chg_whitelist>:
    scanp = scansm->scanp;
   184e0:	4b06      	ldr	r3, [pc, #24]	; (184fc <ble_ll_scan_can_chg_whitelist+0x1c>)
   184e2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    if (scansm->scan_enabled && (scanp->scan_filt_policy & 1)) {
   184e4:	781b      	ldrb	r3, [r3, #0]
   184e6:	b12b      	cbz	r3, 184f4 <ble_ll_scan_can_chg_whitelist+0x14>
   184e8:	7893      	ldrb	r3, [r2, #2]
   184ea:	f013 0f01 	tst.w	r3, #1
   184ee:	d103      	bne.n	184f8 <ble_ll_scan_can_chg_whitelist+0x18>
        rc = 1;
   184f0:	2001      	movs	r0, #1
   184f2:	4770      	bx	lr
   184f4:	2001      	movs	r0, #1
   184f6:	4770      	bx	lr
        rc = 0;
   184f8:	2000      	movs	r0, #0
}
   184fa:	4770      	bx	lr
   184fc:	200026a8 	.word	0x200026a8

00018500 <ble_ll_scan_initiator_start>:
{
   18500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18502:	4605      	mov	r5, r0
   18504:	460f      	mov	r7, r1
    scansm->own_addr_type = hcc->own_addr_type;
   18506:	7b03      	ldrb	r3, [r0, #12]
   18508:	4c12      	ldr	r4, [pc, #72]	; (18554 <ble_ll_scan_initiator_start+0x54>)
   1850a:	7063      	strb	r3, [r4, #1]
    scansm->scanp = &scansm->scanp_phys[PHY_UNCODED];
   1850c:	f104 0374 	add.w	r3, r4, #116	; 0x74
   18510:	66e3      	str	r3, [r4, #108]	; 0x6c
    scansm->scanp_next = NULL;
   18512:	2300      	movs	r3, #0
   18514:	6723      	str	r3, [r4, #112]	; 0x70
    scanp->scan_filt_policy = hcc->filter_policy;
   18516:	7903      	ldrb	r3, [r0, #4]
   18518:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
    scanp->timing.interval = ble_ll_scan_time_hci_to_ticks(hcc->scan_itvl);
   1851c:	8800      	ldrh	r0, [r0, #0]
    return os_cputime_usecs_to_ticks(value * BLE_HCI_SCAN_ITVL);
   1851e:	f240 2671 	movw	r6, #625	; 0x271
   18522:	fb06 f000 	mul.w	r0, r6, r0
   18526:	f011 f9d7 	bl	298d8 <os_cputime_usecs_to_ticks>
    scanp->timing.interval = ble_ll_scan_time_hci_to_ticks(hcc->scan_itvl);
   1852a:	67e0      	str	r0, [r4, #124]	; 0x7c
    scanp->timing.window = ble_ll_scan_time_hci_to_ticks(hcc->scan_window);
   1852c:	8868      	ldrh	r0, [r5, #2]
    return os_cputime_usecs_to_ticks(value * BLE_HCI_SCAN_ITVL);
   1852e:	fb06 f000 	mul.w	r0, r6, r0
   18532:	f011 f9d1 	bl	298d8 <os_cputime_usecs_to_ticks>
    scanp->timing.window = ble_ll_scan_time_hci_to_ticks(hcc->scan_window);
   18536:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    scanp->scan_type = BLE_SCAN_TYPE_INITIATE;
   1853a:	2302      	movs	r3, #2
   1853c:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    rc = ble_ll_scan_sm_start(scansm);
   18540:	4620      	mov	r0, r4
   18542:	f7ff fc3d 	bl	17dc0 <ble_ll_scan_sm_start>
    if (sm == NULL) {
   18546:	b117      	cbz	r7, 1854e <ble_ll_scan_initiator_start+0x4e>
    if (rc == BLE_ERR_SUCCESS) {
   18548:	b110      	cbz	r0, 18550 <ble_ll_scan_initiator_start+0x50>
        *sm = NULL;
   1854a:	2300      	movs	r3, #0
   1854c:	603b      	str	r3, [r7, #0]
}
   1854e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        *sm = scansm;
   18550:	603c      	str	r4, [r7, #0]
   18552:	e7fc      	b.n	1854e <ble_ll_scan_initiator_start+0x4e>
   18554:	200026a8 	.word	0x200026a8

00018558 <ble_ll_scan_enabled>:
}
   18558:	4b01      	ldr	r3, [pc, #4]	; (18560 <ble_ll_scan_enabled+0x8>)
   1855a:	7818      	ldrb	r0, [r3, #0]
   1855c:	4770      	bx	lr
   1855e:	bf00      	nop
   18560:	200026a8 	.word	0x200026a8

00018564 <ble_ll_scan_get_peer_rpa>:
}
   18564:	4800      	ldr	r0, [pc, #0]	; (18568 <ble_ll_scan_get_peer_rpa+0x4>)
   18566:	4770      	bx	lr
   18568:	200026ae 	.word	0x200026ae

0001856c <ble_ll_scan_get_local_rpa>:
}
   1856c:	4800      	ldr	r0, [pc, #0]	; (18570 <ble_ll_scan_get_local_rpa+0x4>)
   1856e:	4770      	bx	lr
   18570:	200026bf 	.word	0x200026bf

00018574 <ble_ll_scan_set_peer_rpa>:
    memcpy(scansm->scan_peer_rpa, rpa, BLE_DEV_ADDR_LEN);
   18574:	4b03      	ldr	r3, [pc, #12]	; (18584 <ble_ll_scan_set_peer_rpa+0x10>)
   18576:	6802      	ldr	r2, [r0, #0]
   18578:	f8c3 2006 	str.w	r2, [r3, #6]
   1857c:	8882      	ldrh	r2, [r0, #4]
   1857e:	815a      	strh	r2, [r3, #10]
}
   18580:	4770      	bx	lr
   18582:	bf00      	nop
   18584:	200026a8 	.word	0x200026a8

00018588 <ble_ll_scan_get_pdu_data>:
}
   18588:	4800      	ldr	r0, [pc, #0]	; (1858c <ble_ll_scan_get_pdu_data+0x4>)
   1858a:	4770      	bx	lr
   1858c:	200026be 	.word	0x200026be

00018590 <ble_ll_scan_whitelist_enabled>:
    return g_ble_ll_scan_sm.scanp->scan_filt_policy & 1;
   18590:	4b02      	ldr	r3, [pc, #8]	; (1859c <ble_ll_scan_whitelist_enabled+0xc>)
   18592:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   18594:	7898      	ldrb	r0, [r3, #2]
}
   18596:	f000 0001 	and.w	r0, r0, #1
   1859a:	4770      	bx	lr
   1859c:	200026a8 	.word	0x200026a8

000185a0 <ble_ll_scan_reset>:
 *
 * @return int
 */
void
ble_ll_scan_reset(void)
{
   185a0:	b510      	push	{r4, lr}
    struct ble_ll_scan_sm *scansm;

    scansm = &g_ble_ll_scan_sm;

    /* If enabled, stop it. */
    if (scansm->scan_enabled) {
   185a2:	4b0c      	ldr	r3, [pc, #48]	; (185d4 <ble_ll_scan_reset+0x34>)
   185a4:	781b      	ldrb	r3, [r3, #0]
   185a6:	b983      	cbnz	r3, 185ca <ble_ll_scan_reset+0x2a>
    os_cputime_timer_stop(&scansm->duration_timer);
    os_cputime_timer_stop(&scansm->period_timer);
#endif

    /* Reset duplicate advertisers and those from which we rxd a response */
    g_ble_ll_scan_num_rsp_advs = 0;
   185a8:	2400      	movs	r4, #0
   185aa:	4b0b      	ldr	r3, [pc, #44]	; (185d8 <ble_ll_scan_reset+0x38>)
   185ac:	701c      	strb	r4, [r3, #0]
    memset(&g_ble_ll_scan_rsp_advs[0], 0, sizeof(g_ble_ll_scan_rsp_advs));
   185ae:	2250      	movs	r2, #80	; 0x50
   185b0:	4621      	mov	r1, r4
   185b2:	480a      	ldr	r0, [pc, #40]	; (185dc <ble_ll_scan_reset+0x3c>)
   185b4:	f7f5 ff84 	bl	e4c0 <memset>

    os_mempool_clear(&g_scan_dup_pool);
   185b8:	4809      	ldr	r0, [pc, #36]	; (185e0 <ble_ll_scan_reset+0x40>)
   185ba:	f7f4 fc7f 	bl	cebc <os_mempool_clear>
    TAILQ_INIT(&g_scan_dup_list);
   185be:	4b09      	ldr	r3, [pc, #36]	; (185e4 <ble_ll_scan_reset+0x44>)
   185c0:	601c      	str	r4, [r3, #0]
   185c2:	605b      	str	r3, [r3, #4]
    /* clear memory pool for AUX scan results */
    os_mempool_clear(&ext_scan_aux_pool);
#endif

    /* Call the common init function again */
    ble_ll_scan_common_init();
   185c4:	f7ff fc50 	bl	17e68 <ble_ll_scan_common_init>
}
   185c8:	bd10      	pop	{r4, pc}
        ble_ll_scan_sm_stop(0);
   185ca:	2000      	movs	r0, #0
   185cc:	f7ff fd0c 	bl	17fe8 <ble_ll_scan_sm_stop>
   185d0:	e7ea      	b.n	185a8 <ble_ll_scan_reset+0x8>
   185d2:	bf00      	nop
   185d4:	200026a8 	.word	0x200026a8
   185d8:	20002690 	.word	0x20002690
   185dc:	20004200 	.word	0x20004200
   185e0:	200027b8 	.word	0x200027b8
   185e4:	20002730 	.word	0x20002730

000185e8 <ble_ll_scan_init>:
 * Initialize a scanner. Must be called before scanning can be started.
 * Expected to be called with a un-initialized scanning state machine.
 */
void
ble_ll_scan_init(void)
{
   185e8:	b500      	push	{lr}
   185ea:	b083      	sub	sp, #12
                          ext_scan_aux_mem,
                          "ble_ll_aux_scan_pool");
    BLE_LL_ASSERT(err == 0);
#endif

    err = os_mempool_init(&g_scan_dup_pool,
   185ec:	4b0d      	ldr	r3, [pc, #52]	; (18624 <ble_ll_scan_init+0x3c>)
   185ee:	9300      	str	r3, [sp, #0]
   185f0:	4b0d      	ldr	r3, [pc, #52]	; (18628 <ble_ll_scan_init+0x40>)
   185f2:	2210      	movs	r2, #16
   185f4:	2108      	movs	r1, #8
   185f6:	480d      	ldr	r0, [pc, #52]	; (1862c <ble_ll_scan_init+0x44>)
   185f8:	f7f4 fc56 	bl	cea8 <os_mempool_init>
                          MYNEWT_VAL(BLE_LL_NUM_SCAN_DUP_ADVS),
                          sizeof(struct ble_ll_scan_dup_entry),
                          g_scan_dup_mem,
                          "ble_ll_scan_dup_pool");
    BLE_LL_ASSERT(err == 0);
   185fc:	b940      	cbnz	r0, 18610 <ble_ll_scan_init+0x28>

    TAILQ_INIT(&g_scan_dup_list);
   185fe:	4b0c      	ldr	r3, [pc, #48]	; (18630 <ble_ll_scan_init+0x48>)
   18600:	2200      	movs	r2, #0
   18602:	601a      	str	r2, [r3, #0]
   18604:	605b      	str	r3, [r3, #4]

    ble_ll_scan_common_init();
   18606:	f7ff fc2f 	bl	17e68 <ble_ll_scan_common_init>
}
   1860a:	b003      	add	sp, #12
   1860c:	f85d fb04 	ldr.w	pc, [sp], #4
    BLE_LL_ASSERT(err == 0);
   18610:	f7f3 fdea 	bl	c1e8 <hal_debugger_connected>
   18614:	b100      	cbz	r0, 18618 <ble_ll_scan_init+0x30>
   18616:	be01      	bkpt	0x0001
   18618:	2300      	movs	r3, #0
   1861a:	461a      	mov	r2, r3
   1861c:	4619      	mov	r1, r3
   1861e:	4618      	mov	r0, r3
   18620:	f7f4 f81c 	bl	c65c <__assert_func>
   18624:	0002afbc 	.word	0x0002afbc
   18628:	20002738 	.word	0x20002738
   1862c:	200027b8 	.word	0x200027b8
   18630:	20002730 	.word	0x20002730

00018634 <ble_ll_sched_is_overlap>:
 * @return int 0: dont overlap 1:overlap
 */
static int
ble_ll_sched_is_overlap(struct ble_ll_sched_item *s1,
                        struct ble_ll_sched_item *s2)
{
   18634:	b410      	push	{r4}
    int rc;

    rc = 1;
    if ((int32_t)(s1->start_time - s2->start_time) < 0) {
   18636:	6843      	ldr	r3, [r0, #4]
   18638:	684a      	ldr	r2, [r1, #4]
   1863a:	1a9c      	subs	r4, r3, r2
   1863c:	2c00      	cmp	r4, #0
   1863e:	db06      	blt.n	1864e <ble_ll_sched_is_overlap+0x1a>
        if ((int32_t)(s1->end_time - s2->start_time) <= 0) {
            rc = 0;
        }
    } else {
        /* Check for overlap */
        if ((int32_t)(s1->start_time - s2->end_time) >= 0) {
   18640:	688a      	ldr	r2, [r1, #8]
   18642:	1a9b      	subs	r3, r3, r2
   18644:	2b00      	cmp	r3, #0
   18646:	db08      	blt.n	1865a <ble_ll_sched_is_overlap+0x26>
            rc = 0;
   18648:	2000      	movs	r0, #0
        }
    }

    return rc;
}
   1864a:	bc10      	pop	{r4}
   1864c:	4770      	bx	lr
        if ((int32_t)(s1->end_time - s2->start_time) <= 0) {
   1864e:	6883      	ldr	r3, [r0, #8]
   18650:	1a9a      	subs	r2, r3, r2
   18652:	2a00      	cmp	r2, #0
   18654:	dd03      	ble.n	1865e <ble_ll_sched_is_overlap+0x2a>
    rc = 1;
   18656:	2001      	movs	r0, #1
   18658:	e7f7      	b.n	1864a <ble_ll_sched_is_overlap+0x16>
   1865a:	2001      	movs	r0, #1
   1865c:	e7f5      	b.n	1864a <ble_ll_sched_is_overlap+0x16>
            rc = 0;
   1865e:	2000      	movs	r0, #0
   18660:	e7f3      	b.n	1864a <ble_ll_sched_is_overlap+0x16>
	...

00018664 <ble_ll_sched_insert_if_empty>:
static struct ble_ll_sched_item *
ble_ll_sched_insert_if_empty(struct ble_ll_sched_item *sch)
{
    struct ble_ll_sched_item *entry;

    entry = TAILQ_FIRST(&g_ble_ll_sched_q);
   18664:	4b07      	ldr	r3, [pc, #28]	; (18684 <ble_ll_sched_insert_if_empty+0x20>)
   18666:	681b      	ldr	r3, [r3, #0]
    if (!entry) {
   18668:	b10b      	cbz	r3, 1866e <ble_ll_sched_insert_if_empty+0xa>
        TAILQ_INSERT_HEAD(&g_ble_ll_sched_q, sch, link);
        sch->enqueued = 1;
    }
    return entry;
}
   1866a:	4618      	mov	r0, r3
   1866c:	4770      	bx	lr
        TAILQ_INSERT_HEAD(&g_ble_ll_sched_q, sch, link);
   1866e:	4601      	mov	r1, r0
   18670:	f841 3f14 	str.w	r3, [r1, #20]!
   18674:	4a03      	ldr	r2, [pc, #12]	; (18684 <ble_ll_sched_insert_if_empty+0x20>)
   18676:	6051      	str	r1, [r2, #4]
   18678:	6010      	str	r0, [r2, #0]
   1867a:	6182      	str	r2, [r0, #24]
        sch->enqueued = 1;
   1867c:	2201      	movs	r2, #1
   1867e:	7042      	strb	r2, [r0, #1]
    return entry;
   18680:	e7f3      	b.n	1866a <ble_ll_sched_insert_if_empty+0x6>
   18682:	bf00      	nop
   18684:	2000426c 	.word	0x2000426c

00018688 <ble_ll_sched_conn_overlap>:
{
   18688:	b508      	push	{r3, lr}
    if (entry->sched_type == BLE_LL_SCHED_TYPE_CONN) {
   1868a:	7803      	ldrb	r3, [r0, #0]
   1868c:	2b03      	cmp	r3, #3
   1868e:	d113      	bne.n	186b8 <ble_ll_sched_conn_overlap+0x30>
        connsm = (struct ble_ll_conn_sm *)entry->cb_arg;
   18690:	68c2      	ldr	r2, [r0, #12]
        entry->enqueued = 0;
   18692:	2300      	movs	r3, #0
   18694:	7043      	strb	r3, [r0, #1]
        TAILQ_REMOVE(&g_ble_ll_sched_q, entry, link);
   18696:	6943      	ldr	r3, [r0, #20]
   18698:	b153      	cbz	r3, 186b0 <ble_ll_sched_conn_overlap+0x28>
   1869a:	6981      	ldr	r1, [r0, #24]
   1869c:	6199      	str	r1, [r3, #24]
   1869e:	6983      	ldr	r3, [r0, #24]
   186a0:	6941      	ldr	r1, [r0, #20]
   186a2:	6019      	str	r1, [r3, #0]
        ble_ll_event_send(&connsm->conn_ev_end);
   186a4:	f102 009c 	add.w	r0, r2, #156	; 0x9c
   186a8:	f7f8 f996 	bl	109d8 <ble_ll_event_send>
        rc = 0;
   186ac:	2000      	movs	r0, #0
}
   186ae:	bd08      	pop	{r3, pc}
        TAILQ_REMOVE(&g_ble_ll_sched_q, entry, link);
   186b0:	6981      	ldr	r1, [r0, #24]
   186b2:	4b03      	ldr	r3, [pc, #12]	; (186c0 <ble_ll_sched_conn_overlap+0x38>)
   186b4:	6059      	str	r1, [r3, #4]
   186b6:	e7f2      	b.n	1869e <ble_ll_sched_conn_overlap+0x16>
        rc = -1;
   186b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return rc;
   186bc:	e7f7      	b.n	186ae <ble_ll_sched_conn_overlap+0x26>
   186be:	bf00      	nop
   186c0:	2000426c 	.word	0x2000426c

000186c4 <ble_ll_sched_overlaps_current>:
{
   186c4:	b510      	push	{r4, lr}
   186c6:	4604      	mov	r4, r0
    if (ble_ll_state_get() == BLE_LL_STATE_CONNECTION) {
   186c8:	f7f8 f980 	bl	109cc <ble_ll_state_get>
   186cc:	2804      	cmp	r0, #4
   186ce:	d001      	beq.n	186d4 <ble_ll_sched_overlaps_current+0x10>
    rc = 0;
   186d0:	2000      	movs	r0, #0
}
   186d2:	bd10      	pop	{r4, pc}
        ce_end_time = ble_ll_conn_get_ce_end_time();
   186d4:	f7fa f8e8 	bl	128a8 <ble_ll_conn_get_ce_end_time>
        if ((int32_t)(ce_end_time - sch->start_time) > 0) {
   186d8:	6863      	ldr	r3, [r4, #4]
   186da:	1ac0      	subs	r0, r0, r3
   186dc:	2800      	cmp	r0, #0
   186de:	dd01      	ble.n	186e4 <ble_ll_sched_overlaps_current+0x20>
            rc = 1;
   186e0:	2001      	movs	r0, #1
    return rc;
   186e2:	e7f6      	b.n	186d2 <ble_ll_sched_overlaps_current+0xe>
    rc = 0;
   186e4:	2000      	movs	r0, #0
   186e6:	e7f4      	b.n	186d2 <ble_ll_sched_overlaps_current+0xe>

000186e8 <ble_ll_sched_execute_item>:
 *
 * @return int 0: schedule item is not over; otherwise schedule item is done.
 */
static int
ble_ll_sched_execute_item(struct ble_ll_sched_item *sch)
{
   186e8:	b538      	push	{r3, r4, r5, lr}
   186ea:	4604      	mov	r4, r0
    int rc;
    uint8_t lls;

    lls = ble_ll_state_get();
   186ec:	f7f8 f96e 	bl	109cc <ble_ll_state_get>
   186f0:	4605      	mov	r5, r0

    ble_ll_trace_u32x3(BLE_LL_TRACE_ID_SCHED, lls, os_cputime_get32(),
   186f2:	f011 f8ec 	bl	298ce <os_cputime_get32>
                       sch->start_time);

    if (lls == BLE_LL_STATE_STANDBY) {
   186f6:	b1a5      	cbz	r5, 18722 <ble_ll_sched_execute_item+0x3a>
     * BLE_LL_STATE_INITIATING
     * BLE_LL_STATE_STANDBY
     *
     * Let scanner to decide to disable phy or not.
     */
    if (sch->sched_type == BLE_LL_SCHED_TYPE_AUX_SCAN) {
   186f8:	7823      	ldrb	r3, [r4, #0]
   186fa:	2b04      	cmp	r3, #4
   186fc:	d103      	bne.n	18706 <ble_ll_sched_execute_item+0x1e>
        if (lls == BLE_LL_STATE_INITIATING || lls == BLE_LL_STATE_SCANNING) {
   186fe:	1eab      	subs	r3, r5, #2
   18700:	b2db      	uxtb	r3, r3
   18702:	2b01      	cmp	r3, #1
   18704:	d90d      	bls.n	18722 <ble_ll_sched_execute_item+0x3a>
     * This is either an advertising event or connection event start. If
     * we are scanning or initiating just stop it.
     */

    /* We have to disable the PHY no matter what */
    ble_phy_disable();
   18706:	f001 fae5 	bl	19cd4 <ble_phy_disable>

    if (lls == BLE_LL_STATE_SCANNING) {
   1870a:	2d02      	cmp	r5, #2
   1870c:	d00e      	beq.n	1872c <ble_ll_sched_execute_item+0x44>
        ble_ll_state_set(BLE_LL_STATE_STANDBY);
        ble_ll_scan_halt();
    } else if (lls == BLE_LL_STATE_INITIATING) {
   1870e:	2d03      	cmp	r5, #3
   18710:	d012      	beq.n	18738 <ble_ll_sched_execute_item+0x50>
        ble_ll_state_set(BLE_LL_STATE_STANDBY);
        ble_ll_scan_halt();
        /* PHY is disabled - make sure we do not wait for AUX_CONNECT_RSP */
        ble_ll_conn_reset_pending_aux_conn_rsp();
    } else if (lls == BLE_LL_STATE_ADV) {
   18712:	2d01      	cmp	r5, #1
   18714:	d018      	beq.n	18748 <ble_ll_sched_execute_item+0x60>
    } else if (lls == BLE_LL_STATE_SYNC) {
        STATS_INC(ble_ll_stats, sched_state_sync_errs);
        ble_ll_sync_halt();
#endif
    } else {
        STATS_INC(ble_ll_stats, sched_state_conn_errs);
   18716:	4a16      	ldr	r2, [pc, #88]	; (18770 <ble_ll_sched_execute_item+0x88>)
   18718:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
   1871a:	3301      	adds	r3, #1
   1871c:	67d3      	str	r3, [r2, #124]	; 0x7c
        ble_ll_conn_event_halt();
   1871e:	f7fa fd2f 	bl	13180 <ble_ll_conn_event_halt>
    }

sched:
    BLE_LL_DEBUG_GPIO(SCHED_ITEM_CB, 1);
    BLE_LL_ASSERT(sch->sched_cb);
   18722:	6923      	ldr	r3, [r4, #16]
   18724:	b1cb      	cbz	r3, 1875a <ble_ll_sched_execute_item+0x72>
    rc = sch->sched_cb(sch);
   18726:	4620      	mov	r0, r4
   18728:	4798      	blx	r3
    BLE_LL_DEBUG_GPIO(SCHED_ITEM_CB, 0);
    return rc;
}
   1872a:	bd38      	pop	{r3, r4, r5, pc}
        ble_ll_state_set(BLE_LL_STATE_STANDBY);
   1872c:	2000      	movs	r0, #0
   1872e:	f7f8 f947 	bl	109c0 <ble_ll_state_set>
        ble_ll_scan_halt();
   18732:	f7ff fc4b 	bl	17fcc <ble_ll_scan_halt>
   18736:	e7f4      	b.n	18722 <ble_ll_sched_execute_item+0x3a>
        ble_ll_state_set(BLE_LL_STATE_STANDBY);
   18738:	2000      	movs	r0, #0
   1873a:	f7f8 f941 	bl	109c0 <ble_ll_state_set>
        ble_ll_scan_halt();
   1873e:	f7ff fc45 	bl	17fcc <ble_ll_scan_halt>
        ble_ll_conn_reset_pending_aux_conn_rsp();
   18742:	f7fa facd 	bl	12ce0 <ble_ll_conn_reset_pending_aux_conn_rsp>
   18746:	e7ec      	b.n	18722 <ble_ll_sched_execute_item+0x3a>
        STATS_INC(ble_ll_stats, sched_state_adv_errs);
   18748:	4a09      	ldr	r2, [pc, #36]	; (18770 <ble_ll_sched_execute_item+0x88>)
   1874a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
   1874e:	3301      	adds	r3, #1
   18750:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
        ble_ll_adv_halt();
   18754:	f7f9 f924 	bl	119a0 <ble_ll_adv_halt>
   18758:	e7e3      	b.n	18722 <ble_ll_sched_execute_item+0x3a>
    BLE_LL_ASSERT(sch->sched_cb);
   1875a:	f7f3 fd45 	bl	c1e8 <hal_debugger_connected>
   1875e:	b100      	cbz	r0, 18762 <ble_ll_sched_execute_item+0x7a>
   18760:	be01      	bkpt	0x0001
   18762:	2300      	movs	r3, #0
   18764:	461a      	mov	r2, r3
   18766:	4619      	mov	r1, r3
   18768:	4618      	mov	r0, r3
   1876a:	f7f3 ff77 	bl	c65c <__assert_func>
   1876e:	bf00      	nop
   18770:	20003be0 	.word	0x20003be0

00018774 <ble_ll_sched_run>:
    struct ble_ll_sched_item *sch;

    BLE_LL_DEBUG_GPIO(SCHED_RUN, 1);

    /* Look through schedule queue */
    sch = TAILQ_FIRST(&g_ble_ll_sched_q);
   18774:	4b0f      	ldr	r3, [pc, #60]	; (187b4 <ble_ll_sched_run+0x40>)
   18776:	6818      	ldr	r0, [r3, #0]
    if (sch) {
   18778:	b1d0      	cbz	r0, 187b0 <ble_ll_sched_run+0x3c>
{
   1877a:	b510      	push	{r4, lr}
            g_ble_ll_sched_max_early = dt;
        }
#endif

        /* Remove schedule item and execute the callback */
        TAILQ_REMOVE(&g_ble_ll_sched_q, sch, link);
   1877c:	6943      	ldr	r3, [r0, #20]
   1877e:	b19b      	cbz	r3, 187a8 <ble_ll_sched_run+0x34>
   18780:	6982      	ldr	r2, [r0, #24]
   18782:	619a      	str	r2, [r3, #24]
   18784:	6983      	ldr	r3, [r0, #24]
   18786:	6942      	ldr	r2, [r0, #20]
   18788:	601a      	str	r2, [r3, #0]
        sch->enqueued = 0;
   1878a:	2300      	movs	r3, #0
   1878c:	7043      	strb	r3, [r0, #1]
        ble_ll_sched_execute_item(sch);
   1878e:	f7ff ffab 	bl	186e8 <ble_ll_sched_execute_item>

        /* Restart if there is an item on the schedule */
        sch = TAILQ_FIRST(&g_ble_ll_sched_q);
   18792:	4b08      	ldr	r3, [pc, #32]	; (187b4 <ble_ll_sched_run+0x40>)
   18794:	681c      	ldr	r4, [r3, #0]
        if (sch) {
   18796:	b11c      	cbz	r4, 187a0 <ble_ll_sched_run+0x2c>
            os_cputime_timer_start(&g_ble_ll_sched_timer, sch->start_time);
   18798:	6861      	ldr	r1, [r4, #4]
   1879a:	4807      	ldr	r0, [pc, #28]	; (187b8 <ble_ll_sched_run+0x44>)
   1879c:	f011 f88f 	bl	298be <os_cputime_timer_start>
        }
        ble_ll_rfmgmt_sched_changed(sch);
   187a0:	4620      	mov	r0, r4
   187a2:	f7fe fd9f 	bl	172e4 <ble_ll_rfmgmt_sched_changed>
    }

    BLE_LL_DEBUG_GPIO(SCHED_RUN, 0);
}
   187a6:	bd10      	pop	{r4, pc}
        TAILQ_REMOVE(&g_ble_ll_sched_q, sch, link);
   187a8:	6982      	ldr	r2, [r0, #24]
   187aa:	4b02      	ldr	r3, [pc, #8]	; (187b4 <ble_ll_sched_run+0x40>)
   187ac:	605a      	str	r2, [r3, #4]
   187ae:	e7e9      	b.n	18784 <ble_ll_sched_run+0x10>
   187b0:	4770      	bx	lr
   187b2:	bf00      	nop
   187b4:	2000426c 	.word	0x2000426c
   187b8:	20004254 	.word	0x20004254

000187bc <ble_ll_sched_conn_reschedule>:
{
   187bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   187c0:	4682      	mov	sl, r0
    sch = &connsm->conn_sch;
   187c2:	f100 07dc 	add.w	r7, r0, #220	; 0xdc
    sch->start_time = connsm->anchor_point - g_ble_ll_sched_offset_ticks;
   187c6:	6f43      	ldr	r3, [r0, #116]	; 0x74
   187c8:	4a62      	ldr	r2, [pc, #392]	; (18954 <ble_ll_sched_conn_reschedule+0x198>)
   187ca:	7812      	ldrb	r2, [r2, #0]
   187cc:	1a9b      	subs	r3, r3, r2
   187ce:	f8c0 30e0 	str.w	r3, [r0, #224]	; 0xe0
    if (connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) {
   187d2:	79c3      	ldrb	r3, [r0, #7]
   187d4:	2b02      	cmp	r3, #2
   187d6:	d01f      	beq.n	18818 <ble_ll_sched_conn_reschedule+0x5c>
        sch->remainder = connsm->anchor_point_usecs;
   187d8:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
   187dc:	f880 30de 	strb.w	r3, [r0, #222]	; 0xde
    sch->end_time = connsm->ce_end_time;
   187e0:	f8da 305c 	ldr.w	r3, [sl, #92]	; 0x5c
   187e4:	f8ca 30e4 	str.w	r3, [sl, #228]	; 0xe4
    if ((int32_t)(sch->start_time - os_cputime_get32()) < 0) {
   187e8:	f8da 40e0 	ldr.w	r4, [sl, #224]	; 0xe0
   187ec:	f011 f86f 	bl	298ce <os_cputime_get32>
   187f0:	1a20      	subs	r0, r4, r0
   187f2:	2800      	cmp	r0, #0
   187f4:	f2c0 80ab 	blt.w	1894e <ble_ll_sched_conn_reschedule+0x192>
    OS_ENTER_CRITICAL(sr);
   187f8:	f7f4 fffe 	bl	d7f8 <os_arch_save_sr>
   187fc:	4681      	mov	r9, r0
    if (ble_ll_sched_overlaps_current(sch)) {
   187fe:	4638      	mov	r0, r7
   18800:	f7ff ff60 	bl	186c4 <ble_ll_sched_overlaps_current>
   18804:	4680      	mov	r8, r0
   18806:	b9a8      	cbnz	r0, 18834 <ble_ll_sched_conn_reschedule+0x78>
    os_cputime_timer_stop(&g_ble_ll_sched_timer);
   18808:	4853      	ldr	r0, [pc, #332]	; (18958 <ble_ll_sched_conn_reschedule+0x19c>)
   1880a:	f011 f85c 	bl	298c6 <os_cputime_timer_stop>
    TAILQ_FOREACH(entry, &g_ble_ll_sched_q, link) {
   1880e:	4b53      	ldr	r3, [pc, #332]	; (1895c <ble_ll_sched_conn_reschedule+0x1a0>)
   18810:	681d      	ldr	r5, [r3, #0]
    end_overlap = NULL;
   18812:	2600      	movs	r6, #0
    start_overlap = NULL;
   18814:	4634      	mov	r4, r6
    TAILQ_FOREACH(entry, &g_ble_ll_sched_q, link) {
   18816:	e02b      	b.n	18870 <ble_ll_sched_conn_reschedule+0xb4>
        sch->start_time -= (os_cputime_usecs_to_ticks(usecs) + 1);
   18818:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
   1881c:	f011 f85c 	bl	298d8 <os_cputime_usecs_to_ticks>
   18820:	3001      	adds	r0, #1
   18822:	f8da 30e0 	ldr.w	r3, [sl, #224]	; 0xe0
   18826:	1a1b      	subs	r3, r3, r0
   18828:	f8ca 30e0 	str.w	r3, [sl, #224]	; 0xe0
        sch->remainder = 0;
   1882c:	2300      	movs	r3, #0
   1882e:	f88a 30de 	strb.w	r3, [sl, #222]	; 0xde
   18832:	e7d5      	b.n	187e0 <ble_ll_sched_conn_reschedule+0x24>
        OS_EXIT_CRITICAL(sr);
   18834:	4648      	mov	r0, r9
   18836:	f7f4 ffe5 	bl	d804 <os_arch_restore_sr>
        return -1;
   1883a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   1883e:	e074      	b.n	1892a <ble_ll_sched_conn_reschedule+0x16e>
                            !ble_ll_conn_is_lru((struct ble_ll_conn_sm *)sch->cb_arg,
   18840:	68e9      	ldr	r1, [r5, #12]
   18842:	f8da 00e8 	ldr.w	r0, [sl, #232]	; 0xe8
   18846:	f7fa f825 	bl	12894 <ble_ll_conn_is_lru>
           if (entry->sched_type == BLE_LL_SCHED_TYPE_CONN &&
   1884a:	b9e0      	cbnz	r0, 18886 <ble_ll_sched_conn_reschedule+0xca>
                start_overlap = NULL;
   1884c:	2400      	movs	r4, #0
                rc = -1;
   1884e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    if (!rc) {
   18852:	f1b8 0f00 	cmp.w	r8, #0
   18856:	d143      	bne.n	188e0 <ble_ll_sched_conn_reschedule+0x124>
        if (!entry) {
   18858:	b335      	cbz	r5, 188a8 <ble_ll_sched_conn_reschedule+0xec>
        sch->enqueued = 1;
   1885a:	2301      	movs	r3, #1
   1885c:	f88a 30dd 	strb.w	r3, [sl, #221]	; 0xdd
    while (entry) {
   18860:	e03e      	b.n	188e0 <ble_ll_sched_conn_reschedule+0x124>
            if ((int32_t)(sch->end_time - entry->start_time) <= 0) {
   18862:	f8da 30e4 	ldr.w	r3, [sl, #228]	; 0xe4
   18866:	6869      	ldr	r1, [r5, #4]
   18868:	1a5b      	subs	r3, r3, r1
   1886a:	2b00      	cmp	r3, #0
   1886c:	dd0e      	ble.n	1888c <ble_ll_sched_conn_reschedule+0xd0>
    TAILQ_FOREACH(entry, &g_ble_ll_sched_q, link) {
   1886e:	696d      	ldr	r5, [r5, #20]
   18870:	2d00      	cmp	r5, #0
   18872:	d0ee      	beq.n	18852 <ble_ll_sched_conn_reschedule+0x96>
        if (ble_ll_sched_is_overlap(sch, entry)) {
   18874:	4629      	mov	r1, r5
   18876:	4638      	mov	r0, r7
   18878:	f7ff fedc 	bl	18634 <ble_ll_sched_is_overlap>
   1887c:	2800      	cmp	r0, #0
   1887e:	d0f0      	beq.n	18862 <ble_ll_sched_conn_reschedule+0xa6>
           if (entry->sched_type == BLE_LL_SCHED_TYPE_CONN &&
   18880:	782b      	ldrb	r3, [r5, #0]
   18882:	2b03      	cmp	r3, #3
   18884:	d0dc      	beq.n	18840 <ble_ll_sched_conn_reschedule+0x84>
            if (start_overlap == NULL) {
   18886:	b164      	cbz	r4, 188a2 <ble_ll_sched_conn_reschedule+0xe6>
                end_overlap = entry;
   18888:	462e      	mov	r6, r5
   1888a:	e7f0      	b.n	1886e <ble_ll_sched_conn_reschedule+0xb2>
                TAILQ_INSERT_BEFORE(entry, sch, link);
   1888c:	69ab      	ldr	r3, [r5, #24]
   1888e:	f8ca 30f4 	str.w	r3, [sl, #244]	; 0xf4
   18892:	4653      	mov	r3, sl
   18894:	f843 5ff0 	str.w	r5, [r3, #240]!
   18898:	69a9      	ldr	r1, [r5, #24]
   1889a:	600f      	str	r7, [r1, #0]
   1889c:	61ab      	str	r3, [r5, #24]
                rc = 0;
   1889e:	4680      	mov	r8, r0
   188a0:	e7da      	b.n	18858 <ble_ll_sched_conn_reschedule+0x9c>
                end_overlap = entry;
   188a2:	462e      	mov	r6, r5
                start_overlap = entry;
   188a4:	462c      	mov	r4, r5
   188a6:	e7e2      	b.n	1886e <ble_ll_sched_conn_reschedule+0xb2>
            TAILQ_INSERT_TAIL(&g_ble_ll_sched_q, sch, link);
   188a8:	2300      	movs	r3, #0
   188aa:	f8ca 30f0 	str.w	r3, [sl, #240]	; 0xf0
   188ae:	4b2b      	ldr	r3, [pc, #172]	; (1895c <ble_ll_sched_conn_reschedule+0x1a0>)
   188b0:	685a      	ldr	r2, [r3, #4]
   188b2:	f8ca 20f4 	str.w	r2, [sl, #244]	; 0xf4
   188b6:	6017      	str	r7, [r2, #0]
   188b8:	f10a 02f0 	add.w	r2, sl, #240	; 0xf0
   188bc:	605a      	str	r2, [r3, #4]
   188be:	e7cc      	b.n	1885a <ble_ll_sched_conn_reschedule+0x9e>
            tmp = (struct ble_ll_conn_sm *)entry->cb_arg;
   188c0:	68e0      	ldr	r0, [r4, #12]
            ble_ll_event_send(&tmp->conn_ev_end);
   188c2:	309c      	adds	r0, #156	; 0x9c
   188c4:	f7f8 f888 	bl	109d8 <ble_ll_event_send>
        TAILQ_REMOVE(&g_ble_ll_sched_q, entry, link);
   188c8:	6963      	ldr	r3, [r4, #20]
   188ca:	b1f3      	cbz	r3, 1890a <ble_ll_sched_conn_reschedule+0x14e>
   188cc:	69a2      	ldr	r2, [r4, #24]
   188ce:	619a      	str	r2, [r3, #24]
   188d0:	69a3      	ldr	r3, [r4, #24]
   188d2:	6962      	ldr	r2, [r4, #20]
   188d4:	601a      	str	r2, [r3, #0]
        entry->enqueued = 0;
   188d6:	2300      	movs	r3, #0
   188d8:	7063      	strb	r3, [r4, #1]
        if (entry == end_overlap) {
   188da:	42a6      	cmp	r6, r4
   188dc:	d019      	beq.n	18912 <ble_ll_sched_conn_reschedule+0x156>
        entry = start_overlap;
   188de:	462c      	mov	r4, r5
    while (entry) {
   188e0:	b1bc      	cbz	r4, 18912 <ble_ll_sched_conn_reschedule+0x156>
        start_overlap = TAILQ_NEXT(entry,link);
   188e2:	6965      	ldr	r5, [r4, #20]
        switch (entry->sched_type) {
   188e4:	7823      	ldrb	r3, [r4, #0]
   188e6:	2b01      	cmp	r3, #1
   188e8:	d00b      	beq.n	18902 <ble_ll_sched_conn_reschedule+0x146>
   188ea:	2b03      	cmp	r3, #3
   188ec:	d0e8      	beq.n	188c0 <ble_ll_sched_conn_reschedule+0x104>
            BLE_LL_ASSERT(0);
   188ee:	f7f3 fc7b 	bl	c1e8 <hal_debugger_connected>
   188f2:	b100      	cbz	r0, 188f6 <ble_ll_sched_conn_reschedule+0x13a>
   188f4:	be01      	bkpt	0x0001
   188f6:	2300      	movs	r3, #0
   188f8:	461a      	mov	r2, r3
   188fa:	4619      	mov	r1, r3
   188fc:	4618      	mov	r0, r3
   188fe:	f7f3 fead 	bl	c65c <__assert_func>
            ble_ll_adv_event_rmvd_from_sched((struct ble_ll_adv_sm *)entry->cb_arg);
   18902:	68e0      	ldr	r0, [r4, #12]
   18904:	f7f9 f83e 	bl	11984 <ble_ll_adv_event_rmvd_from_sched>
            break;
   18908:	e7de      	b.n	188c8 <ble_ll_sched_conn_reschedule+0x10c>
        TAILQ_REMOVE(&g_ble_ll_sched_q, entry, link);
   1890a:	69a2      	ldr	r2, [r4, #24]
   1890c:	4b13      	ldr	r3, [pc, #76]	; (1895c <ble_ll_sched_conn_reschedule+0x1a0>)
   1890e:	605a      	str	r2, [r3, #4]
   18910:	e7de      	b.n	188d0 <ble_ll_sched_conn_reschedule+0x114>
    entry = TAILQ_FIRST(&g_ble_ll_sched_q);
   18912:	4b12      	ldr	r3, [pc, #72]	; (1895c <ble_ll_sched_conn_reschedule+0x1a0>)
   18914:	681c      	ldr	r4, [r3, #0]
    if (entry == sch) {
   18916:	42a7      	cmp	r7, r4
   18918:	d00a      	beq.n	18930 <ble_ll_sched_conn_reschedule+0x174>
    OS_EXIT_CRITICAL(sr);
   1891a:	4648      	mov	r0, r9
   1891c:	f7f4 ff72 	bl	d804 <os_arch_restore_sr>
    BLE_LL_ASSERT(sch != NULL);
   18920:	b15c      	cbz	r4, 1893a <ble_ll_sched_conn_reschedule+0x17e>
    os_cputime_timer_start(&g_ble_ll_sched_timer, sch->start_time);
   18922:	6861      	ldr	r1, [r4, #4]
   18924:	480c      	ldr	r0, [pc, #48]	; (18958 <ble_ll_sched_conn_reschedule+0x19c>)
   18926:	f010 ffca 	bl	298be <os_cputime_timer_start>
}
   1892a:	4640      	mov	r0, r8
   1892c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        ble_ll_rfmgmt_sched_changed(sch);
   18930:	4638      	mov	r0, r7
   18932:	f7fe fcd7 	bl	172e4 <ble_ll_rfmgmt_sched_changed>
    sch = &connsm->conn_sch;
   18936:	463c      	mov	r4, r7
   18938:	e7ef      	b.n	1891a <ble_ll_sched_conn_reschedule+0x15e>
    BLE_LL_ASSERT(sch != NULL);
   1893a:	f7f3 fc55 	bl	c1e8 <hal_debugger_connected>
   1893e:	b100      	cbz	r0, 18942 <ble_ll_sched_conn_reschedule+0x186>
   18940:	be01      	bkpt	0x0001
   18942:	2300      	movs	r3, #0
   18944:	461a      	mov	r2, r3
   18946:	4619      	mov	r1, r3
   18948:	4618      	mov	r0, r3
   1894a:	f7f3 fe87 	bl	c65c <__assert_func>
        return -1;
   1894e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   18952:	e7ea      	b.n	1892a <ble_ll_sched_conn_reschedule+0x16e>
   18954:	20004250 	.word	0x20004250
   18958:	20004254 	.word	0x20004254
   1895c:	2000426c 	.word	0x2000426c

00018960 <ble_ll_sched_master_new>:
{
   18960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18964:	b083      	sub	sp, #12
   18966:	4605      	mov	r5, r0
   18968:	460c      	mov	r4, r1
    sch = &connsm->conn_sch;
   1896a:	f100 09dc 	add.w	r9, r0, #220	; 0xdc
    adv_rxend = os_cputime_get32();
   1896e:	f010 ffae 	bl	298ce <os_cputime_get32>
    if (ble_hdr->rxinfo.channel >= BLE_PHY_NUM_DATA_CHANS) {
   18972:	78a3      	ldrb	r3, [r4, #2]
   18974:	2b24      	cmp	r3, #36	; 0x24
   18976:	d915      	bls.n	189a4 <ble_ll_sched_master_new+0x44>
        earliest_start = adv_rxend + 57;
   18978:	f100 0839 	add.w	r8, r0, #57	; 0x39
    earliest_end = earliest_start + dur;
   1897c:	f108 06a4 	add.w	r6, r8, #164	; 0xa4
    itvl_t = connsm->conn_itvl_ticks;
   18980:	f8d5 b07c 	ldr.w	fp, [r5, #124]	; 0x7c
    OS_ENTER_CRITICAL(sr);
   18984:	f7f4 ff38 	bl	d7f8 <os_arch_save_sr>
   18988:	9001      	str	r0, [sp, #4]
    sch->start_time = earliest_start;
   1898a:	f8c5 80e0 	str.w	r8, [r5, #224]	; 0xe0
    if (!ble_ll_sched_insert_if_empty(sch)) {
   1898e:	4648      	mov	r0, r9
   18990:	f7ff fe68 	bl	18664 <ble_ll_sched_insert_if_empty>
   18994:	b308      	cbz	r0, 189da <ble_ll_sched_master_new+0x7a>
        os_cputime_timer_stop(&g_ble_ll_sched_timer);
   18996:	484a      	ldr	r0, [pc, #296]	; (18ac0 <ble_ll_sched_master_new+0x160>)
   18998:	f010 ff95 	bl	298c6 <os_cputime_timer_stop>
        TAILQ_FOREACH(entry, &g_ble_ll_sched_q, link) {
   1899c:	4b49      	ldr	r3, [pc, #292]	; (18ac4 <ble_ll_sched_master_new+0x164>)
   1899e:	681c      	ldr	r4, [r3, #0]
    earliest_start += MYNEWT_VAL(BLE_LL_CONN_INIT_MIN_WIN_OFFSET) *
   189a0:	4647      	mov	r7, r8
        TAILQ_FOREACH(entry, &g_ble_ll_sched_q, link) {
   189a2:	e050      	b.n	18a46 <ble_ll_sched_master_new+0xe6>
        if (ble_hdr->rxinfo.phy == BLE_PHY_1M) {
   189a4:	f994 3005 	ldrsb.w	r3, [r4, #5]
   189a8:	2b01      	cmp	r3, #1
   189aa:	d006      	beq.n	189ba <ble_ll_sched_master_new+0x5a>
        } else if (ble_hdr->rxinfo.phy == BLE_PHY_2M) {
   189ac:	2b02      	cmp	r3, #2
   189ae:	d007      	beq.n	189c0 <ble_ll_sched_master_new+0x60>
        } else if (ble_hdr->rxinfo.phy == BLE_PHY_CODED) {
   189b0:	2b03      	cmp	r3, #3
   189b2:	d108      	bne.n	189c6 <ble_ll_sched_master_new+0x66>
            earliest_start = adv_rxend + 223;
   189b4:	f100 08df 	add.w	r8, r0, #223	; 0xdf
   189b8:	e7e0      	b.n	1897c <ble_ll_sched_master_new+0x1c>
            earliest_start = adv_rxend + 98;
   189ba:	f100 0862 	add.w	r8, r0, #98	; 0x62
   189be:	e7dd      	b.n	1897c <ble_ll_sched_master_new+0x1c>
            earliest_start = adv_rxend + 93;
   189c0:	f100 085d 	add.w	r8, r0, #93	; 0x5d
   189c4:	e7da      	b.n	1897c <ble_ll_sched_master_new+0x1c>
            BLE_LL_ASSERT(0);
   189c6:	f7f3 fc0f 	bl	c1e8 <hal_debugger_connected>
   189ca:	b100      	cbz	r0, 189ce <ble_ll_sched_master_new+0x6e>
   189cc:	be01      	bkpt	0x0001
   189ce:	2300      	movs	r3, #0
   189d0:	461a      	mov	r2, r3
   189d2:	4619      	mov	r1, r3
   189d4:	4618      	mov	r0, r3
   189d6:	f7f3 fe41 	bl	c65c <__assert_func>
        connsm->tx_win_off = MYNEWT_VAL(BLE_LL_CONN_INIT_MIN_WIN_OFFSET);
   189da:	f04f 0a00 	mov.w	sl, #0
   189de:	f8a5 a072 	strh.w	sl, [r5, #114]	; 0x72
    earliest_start += MYNEWT_VAL(BLE_LL_CONN_INIT_MIN_WIN_OFFSET) *
   189e2:	4647      	mov	r7, r8
    if (!rc) {
   189e4:	f1ba 0f00 	cmp.w	sl, #0
   189e8:	d10b      	bne.n	18a02 <ble_ll_sched_master_new+0xa2>
        sch->start_time = earliest_start;
   189ea:	f8c5 70e0 	str.w	r7, [r5, #224]	; 0xe0
        sch->end_time = earliest_end;
   189ee:	f8c5 60e4 	str.w	r6, [r5, #228]	; 0xe4
        connsm->anchor_point = earliest_start + g_ble_ll_sched_offset_ticks;
   189f2:	4b35      	ldr	r3, [pc, #212]	; (18ac8 <ble_ll_sched_master_new+0x168>)
   189f4:	781b      	ldrb	r3, [r3, #0]
   189f6:	441f      	add	r7, r3
   189f8:	676f      	str	r7, [r5, #116]	; 0x74
        connsm->anchor_point_usecs = 0;
   189fa:	2300      	movs	r3, #0
   189fc:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
        connsm->ce_end_time = earliest_end;
   18a00:	65ee      	str	r6, [r5, #92]	; 0x5c
    sch = TAILQ_FIRST(&g_ble_ll_sched_q);
   18a02:	4b30      	ldr	r3, [pc, #192]	; (18ac4 <ble_ll_sched_master_new+0x164>)
   18a04:	681c      	ldr	r4, [r3, #0]
    ble_ll_rfmgmt_sched_changed(sch);
   18a06:	4620      	mov	r0, r4
   18a08:	f7fe fc6c 	bl	172e4 <ble_ll_rfmgmt_sched_changed>
    OS_EXIT_CRITICAL(sr);
   18a0c:	9801      	ldr	r0, [sp, #4]
   18a0e:	f7f4 fef9 	bl	d804 <os_arch_restore_sr>
    os_cputime_timer_start(&g_ble_ll_sched_timer, sch->start_time);
   18a12:	6861      	ldr	r1, [r4, #4]
   18a14:	482a      	ldr	r0, [pc, #168]	; (18ac0 <ble_ll_sched_master_new+0x160>)
   18a16:	f010 ff52 	bl	298be <os_cputime_timer_start>
}
   18a1a:	4650      	mov	r0, sl
   18a1c:	b003      	add	sp, #12
   18a1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                if ((earliest_start - initial_start) <= itvl_t) {
   18a22:	eba7 0308 	sub.w	r3, r7, r8
   18a26:	455b      	cmp	r3, fp
   18a28:	d834      	bhi.n	18a94 <ble_ll_sched_master_new+0x134>
                    TAILQ_INSERT_BEFORE(entry, sch, link);
   18a2a:	69a3      	ldr	r3, [r4, #24]
   18a2c:	f8c5 30f4 	str.w	r3, [r5, #244]	; 0xf4
   18a30:	462b      	mov	r3, r5
   18a32:	f843 4ff0 	str.w	r4, [r3, #240]!
   18a36:	69a2      	ldr	r2, [r4, #24]
   18a38:	f8c2 9000 	str.w	r9, [r2]
   18a3c:	61a3      	str	r3, [r4, #24]
                    rc = 0;
   18a3e:	f04f 0a00 	mov.w	sl, #0
   18a42:	e015      	b.n	18a70 <ble_ll_sched_master_new+0x110>
        TAILQ_FOREACH(entry, &g_ble_ll_sched_q, link) {
   18a44:	6964      	ldr	r4, [r4, #20]
   18a46:	b18c      	cbz	r4, 18a6c <ble_ll_sched_master_new+0x10c>
            sch->start_time = earliest_start;
   18a48:	f8c5 70e0 	str.w	r7, [r5, #224]	; 0xe0
            sch->end_time = earliest_end;
   18a4c:	f8c5 60e4 	str.w	r6, [r5, #228]	; 0xe4
            if ((int32_t)(sch->end_time - entry->start_time) <= 0) {
   18a50:	6863      	ldr	r3, [r4, #4]
   18a52:	1af3      	subs	r3, r6, r3
   18a54:	2b00      	cmp	r3, #0
   18a56:	dde4      	ble.n	18a22 <ble_ll_sched_master_new+0xc2>
            if (ble_ll_sched_is_overlap(sch, entry)) {
   18a58:	4621      	mov	r1, r4
   18a5a:	4648      	mov	r0, r9
   18a5c:	f7ff fdea 	bl	18634 <ble_ll_sched_is_overlap>
   18a60:	2800      	cmp	r0, #0
   18a62:	d0ef      	beq.n	18a44 <ble_ll_sched_master_new+0xe4>
                earliest_start = entry->end_time;
   18a64:	68a7      	ldr	r7, [r4, #8]
                earliest_end = earliest_start + dur;
   18a66:	f107 06a4 	add.w	r6, r7, #164	; 0xa4
   18a6a:	e7eb      	b.n	18a44 <ble_ll_sched_master_new+0xe4>
    rc = -1;
   18a6c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
        if (!entry) {
   18a70:	b19c      	cbz	r4, 18a9a <ble_ll_sched_master_new+0x13a>
        if (!rc) {
   18a72:	f1ba 0f00 	cmp.w	sl, #0
   18a76:	d1b5      	bne.n	189e4 <ble_ll_sched_master_new+0x84>
            sch->enqueued = 1;
   18a78:	2301      	movs	r3, #1
   18a7a:	f885 30dd 	strb.w	r3, [r5, #221]	; 0xdd
            dur = os_cputime_ticks_to_usecs(earliest_start - initial_start);
   18a7e:	eba7 0008 	sub.w	r0, r7, r8
   18a82:	f010 ff31 	bl	298e8 <os_cputime_ticks_to_usecs>
            connsm->tx_win_off = dur / BLE_LL_CONN_TX_OFF_USECS;
   18a86:	4b11      	ldr	r3, [pc, #68]	; (18acc <ble_ll_sched_master_new+0x16c>)
   18a88:	fba3 3000 	umull	r3, r0, r3, r0
   18a8c:	0a80      	lsrs	r0, r0, #10
   18a8e:	f8a5 0072 	strh.w	r0, [r5, #114]	; 0x72
   18a92:	e7a7      	b.n	189e4 <ble_ll_sched_master_new+0x84>
    rc = -1;
   18a94:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   18a98:	e7ea      	b.n	18a70 <ble_ll_sched_master_new+0x110>
            if ((earliest_start - initial_start) <= itvl_t) {
   18a9a:	eba7 0308 	sub.w	r3, r7, r8
   18a9e:	455b      	cmp	r3, fp
   18aa0:	d8e7      	bhi.n	18a72 <ble_ll_sched_master_new+0x112>
                TAILQ_INSERT_TAIL(&g_ble_ll_sched_q, sch, link);
   18aa2:	2300      	movs	r3, #0
   18aa4:	f8c5 30f0 	str.w	r3, [r5, #240]	; 0xf0
   18aa8:	4a06      	ldr	r2, [pc, #24]	; (18ac4 <ble_ll_sched_master_new+0x164>)
   18aaa:	6851      	ldr	r1, [r2, #4]
   18aac:	f8c5 10f4 	str.w	r1, [r5, #244]	; 0xf4
   18ab0:	f8c1 9000 	str.w	r9, [r1]
   18ab4:	f105 01f0 	add.w	r1, r5, #240	; 0xf0
   18ab8:	6051      	str	r1, [r2, #4]
                rc = 0;
   18aba:	469a      	mov	sl, r3
   18abc:	e7dc      	b.n	18a78 <ble_ll_sched_master_new+0x118>
   18abe:	bf00      	nop
   18ac0:	20004254 	.word	0x20004254
   18ac4:	2000426c 	.word	0x2000426c
   18ac8:	20004250 	.word	0x20004250
   18acc:	d1b71759 	.word	0xd1b71759

00018ad0 <ble_ll_sched_slave_new>:
{
   18ad0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   18ad4:	4605      	mov	r5, r0
    sch = &connsm->conn_sch;
   18ad6:	f100 07dc 	add.w	r7, r0, #220	; 0xdc
    sch->start_time = connsm->anchor_point - g_ble_ll_sched_offset_ticks -
   18ada:	6f44      	ldr	r4, [r0, #116]	; 0x74
   18adc:	4b39      	ldr	r3, [pc, #228]	; (18bc4 <ble_ll_sched_slave_new+0xf4>)
   18ade:	7818      	ldrb	r0, [r3, #0]
   18ae0:	1a24      	subs	r4, r4, r0
        os_cputime_usecs_to_ticks(connsm->slave_cur_window_widening) - 1;
   18ae2:	f8d5 0088 	ldr.w	r0, [r5, #136]	; 0x88
   18ae6:	f010 fef7 	bl	298d8 <os_cputime_usecs_to_ticks>
    sch->start_time = connsm->anchor_point - g_ble_ll_sched_offset_ticks -
   18aea:	1a20      	subs	r0, r4, r0
        os_cputime_usecs_to_ticks(connsm->slave_cur_window_widening) - 1;
   18aec:	3801      	subs	r0, #1
    sch->start_time = connsm->anchor_point - g_ble_ll_sched_offset_ticks -
   18aee:	f8c5 00e0 	str.w	r0, [r5, #224]	; 0xe0
    sch->end_time = connsm->ce_end_time;
   18af2:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   18af4:	f8c5 30e4 	str.w	r3, [r5, #228]	; 0xe4
    sch->remainder = 0;
   18af8:	2300      	movs	r3, #0
   18afa:	f885 30de 	strb.w	r3, [r5, #222]	; 0xde
    OS_ENTER_CRITICAL(sr);
   18afe:	f7f4 fe7b 	bl	d7f8 <os_arch_save_sr>
   18b02:	4681      	mov	r9, r0
    if (ble_ll_sched_overlaps_current(sch)) {
   18b04:	4638      	mov	r0, r7
   18b06:	f7ff fddd 	bl	186c4 <ble_ll_sched_overlaps_current>
   18b0a:	b950      	cbnz	r0, 18b22 <ble_ll_sched_slave_new+0x52>
   18b0c:	4680      	mov	r8, r0
    entry = ble_ll_sched_insert_if_empty(sch);
   18b0e:	4638      	mov	r0, r7
   18b10:	f7ff fda8 	bl	18664 <ble_ll_sched_insert_if_empty>
    if (!entry) {
   18b14:	4604      	mov	r4, r0
   18b16:	2800      	cmp	r0, #0
   18b18:	d044      	beq.n	18ba4 <ble_ll_sched_slave_new+0xd4>
        os_cputime_timer_stop(&g_ble_ll_sched_timer);
   18b1a:	482b      	ldr	r0, [pc, #172]	; (18bc8 <ble_ll_sched_slave_new+0xf8>)
   18b1c:	f010 fed3 	bl	298c6 <os_cputime_timer_stop>
   18b20:	e01c      	b.n	18b5c <ble_ll_sched_slave_new+0x8c>
        OS_EXIT_CRITICAL(sr);
   18b22:	4648      	mov	r0, r9
   18b24:	f7f4 fe6e 	bl	d804 <os_arch_restore_sr>
        return rc;
   18b28:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   18b2c:	e043      	b.n	18bb6 <ble_ll_sched_slave_new+0xe6>
                TAILQ_INSERT_BEFORE(entry, sch, link);
   18b2e:	69a3      	ldr	r3, [r4, #24]
   18b30:	f8c5 30f4 	str.w	r3, [r5, #244]	; 0xf4
   18b34:	462b      	mov	r3, r5
   18b36:	f843 4ff0 	str.w	r4, [r3, #240]!
   18b3a:	69a2      	ldr	r2, [r4, #24]
   18b3c:	6017      	str	r7, [r2, #0]
   18b3e:	61a3      	str	r3, [r4, #24]
            sch->enqueued = 1;
   18b40:	2301      	movs	r3, #1
   18b42:	f885 30dd 	strb.w	r3, [r5, #221]	; 0xdd
   18b46:	4641      	mov	r1, r8
        next_sch = TAILQ_FIRST(&g_ble_ll_sched_q);
   18b48:	4b20      	ldr	r3, [pc, #128]	; (18bcc <ble_ll_sched_slave_new+0xfc>)
   18b4a:	681a      	ldr	r2, [r3, #0]
        if (next_sch == sch) {
   18b4c:	4297      	cmp	r7, r2
   18b4e:	d026      	beq.n	18b9e <ble_ll_sched_slave_new+0xce>
    int first = 0;
   18b50:	4643      	mov	r3, r8
            sch = next_sch;
   18b52:	4617      	mov	r7, r2
   18b54:	4688      	mov	r8, r1
   18b56:	e026      	b.n	18ba6 <ble_ll_sched_slave_new+0xd6>
            entry = next_sch;
   18b58:	4634      	mov	r4, r6
            if (!entry) {
   18b5a:	b1a6      	cbz	r6, 18b86 <ble_ll_sched_slave_new+0xb6>
            next_sch = entry->link.tqe_next;
   18b5c:	6966      	ldr	r6, [r4, #20]
            if ((int32_t)(sch->end_time - entry->start_time) <= 0) {
   18b5e:	f8d5 30e4 	ldr.w	r3, [r5, #228]	; 0xe4
   18b62:	6862      	ldr	r2, [r4, #4]
   18b64:	1a9b      	subs	r3, r3, r2
   18b66:	2b00      	cmp	r3, #0
   18b68:	dde1      	ble.n	18b2e <ble_ll_sched_slave_new+0x5e>
            if (ble_ll_sched_is_overlap(sch, entry)) {
   18b6a:	4621      	mov	r1, r4
   18b6c:	4638      	mov	r0, r7
   18b6e:	f7ff fd61 	bl	18634 <ble_ll_sched_is_overlap>
   18b72:	2800      	cmp	r0, #0
   18b74:	d0f0      	beq.n	18b58 <ble_ll_sched_slave_new+0x88>
                if (ble_ll_sched_conn_overlap(entry)) {
   18b76:	4620      	mov	r0, r4
   18b78:	f7ff fd86 	bl	18688 <ble_ll_sched_conn_overlap>
   18b7c:	2800      	cmp	r0, #0
   18b7e:	d0eb      	beq.n	18b58 <ble_ll_sched_slave_new+0x88>
    rc = -1;
   18b80:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   18b84:	e7e0      	b.n	18b48 <ble_ll_sched_slave_new+0x78>
                TAILQ_INSERT_TAIL(&g_ble_ll_sched_q, sch, link);
   18b86:	2300      	movs	r3, #0
   18b88:	f8c5 30f0 	str.w	r3, [r5, #240]	; 0xf0
   18b8c:	4b0f      	ldr	r3, [pc, #60]	; (18bcc <ble_ll_sched_slave_new+0xfc>)
   18b8e:	685a      	ldr	r2, [r3, #4]
   18b90:	f8c5 20f4 	str.w	r2, [r5, #244]	; 0xf4
   18b94:	6017      	str	r7, [r2, #0]
   18b96:	f105 02f0 	add.w	r2, r5, #240	; 0xf0
   18b9a:	605a      	str	r2, [r3, #4]
   18b9c:	e7d0      	b.n	18b40 <ble_ll_sched_slave_new+0x70>
        if (next_sch == sch) {
   18b9e:	4688      	mov	r8, r1
            first = 1;
   18ba0:	2301      	movs	r3, #1
   18ba2:	e000      	b.n	18ba6 <ble_ll_sched_slave_new+0xd6>
        first = 1;
   18ba4:	2301      	movs	r3, #1
    if (first) {
   18ba6:	b94b      	cbnz	r3, 18bbc <ble_ll_sched_slave_new+0xec>
    OS_EXIT_CRITICAL(sr);
   18ba8:	4648      	mov	r0, r9
   18baa:	f7f4 fe2b 	bl	d804 <os_arch_restore_sr>
    os_cputime_timer_start(&g_ble_ll_sched_timer, sch->start_time);
   18bae:	6879      	ldr	r1, [r7, #4]
   18bb0:	4805      	ldr	r0, [pc, #20]	; (18bc8 <ble_ll_sched_slave_new+0xf8>)
   18bb2:	f010 fe84 	bl	298be <os_cputime_timer_start>
}
   18bb6:	4640      	mov	r0, r8
   18bb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ble_ll_rfmgmt_sched_changed(sch);
   18bbc:	4638      	mov	r0, r7
   18bbe:	f7fe fb91 	bl	172e4 <ble_ll_rfmgmt_sched_changed>
   18bc2:	e7f1      	b.n	18ba8 <ble_ll_sched_slave_new+0xd8>
   18bc4:	20004250 	.word	0x20004250
   18bc8:	20004254 	.word	0x20004254
   18bcc:	2000426c 	.word	0x2000426c

00018bd0 <ble_ll_sched_adv_new>:
{
   18bd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   18bd4:	4605      	mov	r5, r0
   18bd6:	460f      	mov	r7, r1
   18bd8:	4691      	mov	r9, r2
    duration = sch->end_time - sch->start_time;
   18bda:	6886      	ldr	r6, [r0, #8]
   18bdc:	6843      	ldr	r3, [r0, #4]
   18bde:	1af6      	subs	r6, r6, r3
    OS_ENTER_CRITICAL(sr);
   18be0:	f7f4 fe0a 	bl	d7f8 <os_arch_save_sr>
   18be4:	4680      	mov	r8, r0
    entry = ble_ll_sched_insert_if_empty(sch);
   18be6:	4628      	mov	r0, r5
   18be8:	f7ff fd3c 	bl	18664 <ble_ll_sched_insert_if_empty>
    if (!entry) {
   18bec:	b128      	cbz	r0, 18bfa <ble_ll_sched_adv_new+0x2a>
        os_cputime_timer_stop(&g_ble_ll_sched_timer);
   18bee:	4829      	ldr	r0, [pc, #164]	; (18c94 <ble_ll_sched_adv_new+0xc4>)
   18bf0:	f010 fe69 	bl	298c6 <os_cputime_timer_stop>
        TAILQ_FOREACH(entry, &g_ble_ll_sched_q, link) {
   18bf4:	4b28      	ldr	r3, [pc, #160]	; (18c98 <ble_ll_sched_adv_new+0xc8>)
   18bf6:	681c      	ldr	r4, [r3, #0]
   18bf8:	e022      	b.n	18c40 <ble_ll_sched_adv_new+0x70>
        adv_start = sch->start_time;
   18bfa:	6869      	ldr	r1, [r5, #4]
   18bfc:	462c      	mov	r4, r5
   18bfe:	e00d      	b.n	18c1c <ble_ll_sched_adv_new+0x4c>
                TAILQ_INSERT_BEFORE(entry, sch, link);
   18c00:	69a3      	ldr	r3, [r4, #24]
   18c02:	61ab      	str	r3, [r5, #24]
   18c04:	616c      	str	r4, [r5, #20]
   18c06:	69a3      	ldr	r3, [r4, #24]
   18c08:	601d      	str	r5, [r3, #0]
   18c0a:	f105 0314 	add.w	r3, r5, #20
   18c0e:	61a3      	str	r3, [r4, #24]
        if (!entry) {
   18c10:	b344      	cbz	r4, 18c64 <ble_ll_sched_adv_new+0x94>
        adv_start = sch->start_time;
   18c12:	6869      	ldr	r1, [r5, #4]
        sch->enqueued = 1;
   18c14:	2301      	movs	r3, #1
   18c16:	706b      	strb	r3, [r5, #1]
        sch = TAILQ_FIRST(&g_ble_ll_sched_q);
   18c18:	4b1f      	ldr	r3, [pc, #124]	; (18c98 <ble_ll_sched_adv_new+0xc8>)
   18c1a:	681c      	ldr	r4, [r3, #0]
    if (cb) {
   18c1c:	b117      	cbz	r7, 18c24 <ble_ll_sched_adv_new+0x54>
        cb((struct ble_ll_adv_sm *)orig->cb_arg, adv_start, arg);
   18c1e:	464a      	mov	r2, r9
   18c20:	68e8      	ldr	r0, [r5, #12]
   18c22:	47b8      	blx	r7
    if (orig == sch) {
   18c24:	42ac      	cmp	r4, r5
   18c26:	d027      	beq.n	18c78 <ble_ll_sched_adv_new+0xa8>
    OS_EXIT_CRITICAL(sr);
   18c28:	4640      	mov	r0, r8
   18c2a:	f7f4 fdeb 	bl	d804 <os_arch_restore_sr>
    BLE_LL_ASSERT(sch != NULL);
   18c2e:	b33c      	cbz	r4, 18c80 <ble_ll_sched_adv_new+0xb0>
    os_cputime_timer_start(&g_ble_ll_sched_timer, sch->start_time);
   18c30:	6861      	ldr	r1, [r4, #4]
   18c32:	4818      	ldr	r0, [pc, #96]	; (18c94 <ble_ll_sched_adv_new+0xc4>)
   18c34:	f010 fe43 	bl	298be <os_cputime_timer_start>
}
   18c38:	2000      	movs	r0, #0
   18c3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        TAILQ_FOREACH(entry, &g_ble_ll_sched_q, link) {
   18c3e:	6964      	ldr	r4, [r4, #20]
   18c40:	2c00      	cmp	r4, #0
   18c42:	d0e5      	beq.n	18c10 <ble_ll_sched_adv_new+0x40>
            if ((int32_t)(sch->end_time - entry->start_time) <= 0) {
   18c44:	68ab      	ldr	r3, [r5, #8]
   18c46:	6862      	ldr	r2, [r4, #4]
   18c48:	1a9b      	subs	r3, r3, r2
   18c4a:	2b00      	cmp	r3, #0
   18c4c:	ddd8      	ble.n	18c00 <ble_ll_sched_adv_new+0x30>
            if (ble_ll_sched_is_overlap(sch, entry)) {
   18c4e:	4621      	mov	r1, r4
   18c50:	4628      	mov	r0, r5
   18c52:	f7ff fcef 	bl	18634 <ble_ll_sched_is_overlap>
   18c56:	2800      	cmp	r0, #0
   18c58:	d0f1      	beq.n	18c3e <ble_ll_sched_adv_new+0x6e>
                sch->start_time = entry->end_time;
   18c5a:	68a3      	ldr	r3, [r4, #8]
   18c5c:	606b      	str	r3, [r5, #4]
                sch->end_time = sch->start_time + duration;
   18c5e:	4433      	add	r3, r6
   18c60:	60ab      	str	r3, [r5, #8]
   18c62:	e7ec      	b.n	18c3e <ble_ll_sched_adv_new+0x6e>
            TAILQ_INSERT_TAIL(&g_ble_ll_sched_q, sch, link);
   18c64:	2300      	movs	r3, #0
   18c66:	616b      	str	r3, [r5, #20]
   18c68:	4b0b      	ldr	r3, [pc, #44]	; (18c98 <ble_ll_sched_adv_new+0xc8>)
   18c6a:	685a      	ldr	r2, [r3, #4]
   18c6c:	61aa      	str	r2, [r5, #24]
   18c6e:	6015      	str	r5, [r2, #0]
   18c70:	f105 0214 	add.w	r2, r5, #20
   18c74:	605a      	str	r2, [r3, #4]
   18c76:	e7cc      	b.n	18c12 <ble_ll_sched_adv_new+0x42>
        ble_ll_rfmgmt_sched_changed(sch);
   18c78:	4620      	mov	r0, r4
   18c7a:	f7fe fb33 	bl	172e4 <ble_ll_rfmgmt_sched_changed>
   18c7e:	e7d3      	b.n	18c28 <ble_ll_sched_adv_new+0x58>
    BLE_LL_ASSERT(sch != NULL);
   18c80:	f7f3 fab2 	bl	c1e8 <hal_debugger_connected>
   18c84:	b100      	cbz	r0, 18c88 <ble_ll_sched_adv_new+0xb8>
   18c86:	be01      	bkpt	0x0001
   18c88:	2300      	movs	r3, #0
   18c8a:	461a      	mov	r2, r3
   18c8c:	4619      	mov	r1, r3
   18c8e:	4618      	mov	r0, r3
   18c90:	f7f3 fce4 	bl	c65c <__assert_func>
   18c94:	20004254 	.word	0x20004254
   18c98:	2000426c 	.word	0x2000426c

00018c9c <ble_ll_sched_adv_reschedule>:
{
   18c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18ca0:	b083      	sub	sp, #12
   18ca2:	4604      	mov	r4, r0
   18ca4:	468b      	mov	fp, r1
   18ca6:	4692      	mov	sl, r2
    duration = sch->end_time - sch->start_time;
   18ca8:	6883      	ldr	r3, [r0, #8]
   18caa:	6842      	ldr	r2, [r0, #4]
   18cac:	eba3 0802 	sub.w	r8, r3, r2
    sch->end_time += max_delay_ticks;
   18cb0:	4453      	add	r3, sl
   18cb2:	6083      	str	r3, [r0, #8]
    OS_ENTER_CRITICAL(sr);
   18cb4:	f7f4 fda0 	bl	d7f8 <os_arch_save_sr>
   18cb8:	9001      	str	r0, [sp, #4]
    entry = ble_ll_sched_insert_if_empty(sch);
   18cba:	4620      	mov	r0, r4
   18cbc:	f7ff fcd2 	bl	18664 <ble_ll_sched_insert_if_empty>
    if (entry) {
   18cc0:	2800      	cmp	r0, #0
   18cc2:	d059      	beq.n	18d78 <ble_ll_sched_adv_reschedule+0xdc>
   18cc4:	4606      	mov	r6, r0
        os_cputime_timer_stop(&g_ble_ll_sched_timer);
   18cc6:	4850      	ldr	r0, [pc, #320]	; (18e08 <ble_ll_sched_adv_reschedule+0x16c>)
   18cc8:	f010 fdfd 	bl	298c6 <os_cputime_timer_stop>
    end_overlap = NULL;
   18ccc:	f04f 0900 	mov.w	r9, #0
    start_overlap = NULL;
   18cd0:	464d      	mov	r5, r9
   18cd2:	e006      	b.n	18ce2 <ble_ll_sched_adv_reschedule+0x46>
                if ((int32_t)(sch->end_time - entry->start_time) <= 0) {
   18cd4:	68a3      	ldr	r3, [r4, #8]
   18cd6:	6872      	ldr	r2, [r6, #4]
   18cd8:	1a9b      	subs	r3, r3, r2
   18cda:	2b00      	cmp	r3, #0
   18cdc:	dd0e      	ble.n	18cfc <ble_ll_sched_adv_reschedule+0x60>
            entry = next_sch;
   18cde:	463e      	mov	r6, r7
            if (entry == NULL) {
   18ce0:	b16f      	cbz	r7, 18cfe <ble_ll_sched_adv_reschedule+0x62>
            next_sch = entry->link.tqe_next;
   18ce2:	6977      	ldr	r7, [r6, #20]
            if (ble_ll_sched_is_overlap(sch, entry)) {
   18ce4:	4631      	mov	r1, r6
   18ce6:	4620      	mov	r0, r4
   18ce8:	f7ff fca4 	bl	18634 <ble_ll_sched_is_overlap>
   18cec:	2800      	cmp	r0, #0
   18cee:	d0f1      	beq.n	18cd4 <ble_ll_sched_adv_reschedule+0x38>
                if (start_overlap == NULL) {
   18cf0:	b10d      	cbz	r5, 18cf6 <ble_ll_sched_adv_reschedule+0x5a>
                    end_overlap = entry;
   18cf2:	46b1      	mov	r9, r6
   18cf4:	e7f3      	b.n	18cde <ble_ll_sched_adv_reschedule+0x42>
                    end_overlap = entry;
   18cf6:	46b1      	mov	r9, r6
                    start_overlap = entry;
   18cf8:	4635      	mov	r5, r6
   18cfa:	e7f0      	b.n	18cde <ble_ll_sched_adv_reschedule+0x42>
                    before = entry;
   18cfc:	4637      	mov	r7, r6
        if (start_overlap == NULL) {
   18cfe:	b1ed      	cbz	r5, 18d3c <ble_ll_sched_adv_reschedule+0xa0>
            orig_start = sch->start_time;
   18d00:	6866      	ldr	r6, [r4, #4]
            sch->end_time = sch->start_time + duration;
   18d02:	eb08 0306 	add.w	r3, r8, r6
   18d06:	60a3      	str	r3, [r4, #8]
                next_sch = entry->link.tqe_next;
   18d08:	696b      	ldr	r3, [r5, #20]
                if ((int32_t)(sch->end_time - entry->start_time) <= 0) {
   18d0a:	68a2      	ldr	r2, [r4, #8]
   18d0c:	6869      	ldr	r1, [r5, #4]
   18d0e:	1a50      	subs	r0, r2, r1
   18d10:	2800      	cmp	r0, #0
   18d12:	dd27      	ble.n	18d64 <ble_ll_sched_adv_reschedule+0xc8>
                    sch->start_time = entry->end_time;
   18d14:	68aa      	ldr	r2, [r5, #8]
   18d16:	6062      	str	r2, [r4, #4]
                    sch->end_time = sch->start_time + duration;
   18d18:	eb02 0108 	add.w	r1, r2, r8
   18d1c:	60a1      	str	r1, [r4, #8]
                if (entry == end_overlap) {
   18d1e:	454d      	cmp	r5, r9
   18d20:	d047      	beq.n	18db2 <ble_ll_sched_adv_reschedule+0x116>
                entry = next_sch;
   18d22:	461d      	mov	r5, r3
                BLE_LL_ASSERT(entry != NULL);
   18d24:	2b00      	cmp	r3, #0
   18d26:	d1ef      	bne.n	18d08 <ble_ll_sched_adv_reschedule+0x6c>
   18d28:	f7f3 fa5e 	bl	c1e8 <hal_debugger_connected>
   18d2c:	b100      	cbz	r0, 18d30 <ble_ll_sched_adv_reschedule+0x94>
   18d2e:	be01      	bkpt	0x0001
   18d30:	2300      	movs	r3, #0
   18d32:	461a      	mov	r2, r3
   18d34:	4619      	mov	r1, r3
   18d36:	4618      	mov	r0, r3
   18d38:	f7f3 fc90 	bl	c65c <__assert_func>
            if (before) {
   18d3c:	b147      	cbz	r7, 18d50 <ble_ll_sched_adv_reschedule+0xb4>
                TAILQ_INSERT_BEFORE(before, sch, link);
   18d3e:	69bb      	ldr	r3, [r7, #24]
   18d40:	61a3      	str	r3, [r4, #24]
   18d42:	6167      	str	r7, [r4, #20]
   18d44:	69bb      	ldr	r3, [r7, #24]
   18d46:	601c      	str	r4, [r3, #0]
   18d48:	f104 0314 	add.w	r3, r4, #20
   18d4c:	61bb      	str	r3, [r7, #24]
   18d4e:	e013      	b.n	18d78 <ble_ll_sched_adv_reschedule+0xdc>
                TAILQ_INSERT_TAIL(&g_ble_ll_sched_q, sch, link);
   18d50:	2300      	movs	r3, #0
   18d52:	6163      	str	r3, [r4, #20]
   18d54:	4b2d      	ldr	r3, [pc, #180]	; (18e0c <ble_ll_sched_adv_reschedule+0x170>)
   18d56:	685a      	ldr	r2, [r3, #4]
   18d58:	61a2      	str	r2, [r4, #24]
   18d5a:	6014      	str	r4, [r2, #0]
   18d5c:	f104 0214 	add.w	r2, r4, #20
   18d60:	605a      	str	r2, [r3, #4]
   18d62:	e009      	b.n	18d78 <ble_ll_sched_adv_reschedule+0xdc>
                    rand_ticks = entry->start_time - sch->end_time;
   18d64:	eba1 0a02 	sub.w	sl, r1, r2
                    TAILQ_INSERT_BEFORE(before, sch, link);
   18d68:	69ab      	ldr	r3, [r5, #24]
   18d6a:	61a3      	str	r3, [r4, #24]
   18d6c:	6165      	str	r5, [r4, #20]
   18d6e:	69ab      	ldr	r3, [r5, #24]
   18d70:	601c      	str	r4, [r3, #0]
   18d72:	f104 0314 	add.w	r3, r4, #20
   18d76:	61ab      	str	r3, [r5, #24]
        sch->enqueued = 1;
   18d78:	2301      	movs	r3, #1
   18d7a:	7063      	strb	r3, [r4, #1]
        if (rand_ticks) {
   18d7c:	f1ba 0f00 	cmp.w	sl, #0
   18d80:	d130      	bne.n	18de4 <ble_ll_sched_adv_reschedule+0x148>
        sch->end_time = sch->start_time + duration;
   18d82:	6862      	ldr	r2, [r4, #4]
   18d84:	eb02 0308 	add.w	r3, r2, r8
   18d88:	60a3      	str	r3, [r4, #8]
        *start = sch->start_time;
   18d8a:	f8cb 2000 	str.w	r2, [fp]
        if (sch == TAILQ_FIRST(&g_ble_ll_sched_q)) {
   18d8e:	4b1f      	ldr	r3, [pc, #124]	; (18e0c <ble_ll_sched_adv_reschedule+0x170>)
   18d90:	681b      	ldr	r3, [r3, #0]
   18d92:	42a3      	cmp	r3, r4
   18d94:	d030      	beq.n	18df8 <ble_ll_sched_adv_reschedule+0x15c>
   18d96:	2400      	movs	r4, #0
    OS_EXIT_CRITICAL(sr);
   18d98:	9801      	ldr	r0, [sp, #4]
   18d9a:	f7f4 fd33 	bl	d804 <os_arch_restore_sr>
    sch = TAILQ_FIRST(&g_ble_ll_sched_q);
   18d9e:	4b1b      	ldr	r3, [pc, #108]	; (18e0c <ble_ll_sched_adv_reschedule+0x170>)
   18da0:	681b      	ldr	r3, [r3, #0]
    os_cputime_timer_start(&g_ble_ll_sched_timer, sch->start_time);
   18da2:	6859      	ldr	r1, [r3, #4]
   18da4:	4818      	ldr	r0, [pc, #96]	; (18e08 <ble_ll_sched_adv_reschedule+0x16c>)
   18da6:	f010 fd8a 	bl	298be <os_cputime_timer_start>
}
   18daa:	4620      	mov	r0, r4
   18dac:	b003      	add	sp, #12
   18dae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    rand_ticks = (orig_start + max_delay_ticks) - sch->start_time;
   18db2:	4456      	add	r6, sl
   18db4:	1ab2      	subs	r2, r6, r2
                    if (rand_ticks > max_delay_ticks) {
   18db6:	4592      	cmp	sl, r2
   18db8:	d323      	bcc.n	18e02 <ble_ll_sched_adv_reschedule+0x166>
                        if (next_sch == NULL) {
   18dba:	b14b      	cbz	r3, 18dd0 <ble_ll_sched_adv_reschedule+0x134>
                            TAILQ_INSERT_BEFORE(next_sch, sch, link);
   18dbc:	6999      	ldr	r1, [r3, #24]
   18dbe:	61a1      	str	r1, [r4, #24]
   18dc0:	6163      	str	r3, [r4, #20]
   18dc2:	6999      	ldr	r1, [r3, #24]
   18dc4:	600c      	str	r4, [r1, #0]
   18dc6:	f104 0114 	add.w	r1, r4, #20
   18dca:	6199      	str	r1, [r3, #24]
                    rand_ticks = (orig_start + max_delay_ticks) - sch->start_time;
   18dcc:	4692      	mov	sl, r2
   18dce:	e7d3      	b.n	18d78 <ble_ll_sched_adv_reschedule+0xdc>
                            TAILQ_INSERT_TAIL(&g_ble_ll_sched_q, sch, link);
   18dd0:	6163      	str	r3, [r4, #20]
   18dd2:	4b0e      	ldr	r3, [pc, #56]	; (18e0c <ble_ll_sched_adv_reschedule+0x170>)
   18dd4:	6859      	ldr	r1, [r3, #4]
   18dd6:	61a1      	str	r1, [r4, #24]
   18dd8:	600c      	str	r4, [r1, #0]
   18dda:	f104 0114 	add.w	r1, r4, #20
   18dde:	6059      	str	r1, [r3, #4]
                    rand_ticks = (orig_start + max_delay_ticks) - sch->start_time;
   18de0:	4692      	mov	sl, r2
   18de2:	e7c9      	b.n	18d78 <ble_ll_sched_adv_reschedule+0xdc>
   18de4:	f010 fe22 	bl	29a2c <lrand48>
            sch->start_time += rand() % rand_ticks;
   18de8:	fbb0 f3fa 	udiv	r3, r0, sl
   18dec:	fb0a 0a13 	mls	sl, sl, r3, r0
   18df0:	6863      	ldr	r3, [r4, #4]
   18df2:	4453      	add	r3, sl
   18df4:	6063      	str	r3, [r4, #4]
   18df6:	e7c4      	b.n	18d82 <ble_ll_sched_adv_reschedule+0xe6>
            ble_ll_rfmgmt_sched_changed(sch);
   18df8:	4620      	mov	r0, r4
   18dfa:	f7fe fa73 	bl	172e4 <ble_ll_rfmgmt_sched_changed>
   18dfe:	2400      	movs	r4, #0
   18e00:	e7ca      	b.n	18d98 <ble_ll_sched_adv_reschedule+0xfc>
                        rc = -1;
   18e02:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   18e06:	e7c7      	b.n	18d98 <ble_ll_sched_adv_reschedule+0xfc>
   18e08:	20004254 	.word	0x20004254
   18e0c:	2000426c 	.word	0x2000426c

00018e10 <ble_ll_sched_adv_resched_pdu>:
{
   18e10:	b570      	push	{r4, r5, r6, lr}
   18e12:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
   18e14:	f7f4 fcf0 	bl	d7f8 <os_arch_save_sr>
   18e18:	4606      	mov	r6, r0
    lls = ble_ll_state_get();
   18e1a:	f7f7 fdd7 	bl	109cc <ble_ll_state_get>
    if ((lls == BLE_LL_STATE_ADV) || (lls == BLE_LL_STATE_CONNECTION) ||
   18e1e:	2801      	cmp	r0, #1
   18e20:	d027      	beq.n	18e72 <ble_ll_sched_adv_resched_pdu+0x62>
   18e22:	2804      	cmp	r0, #4
   18e24:	d025      	beq.n	18e72 <ble_ll_sched_adv_resched_pdu+0x62>
   18e26:	2806      	cmp	r0, #6
   18e28:	d023      	beq.n	18e72 <ble_ll_sched_adv_resched_pdu+0x62>
    entry = ble_ll_sched_insert_if_empty(sch);
   18e2a:	4620      	mov	r0, r4
   18e2c:	f7ff fc1a 	bl	18664 <ble_ll_sched_insert_if_empty>
    if (entry) {
   18e30:	4605      	mov	r5, r0
   18e32:	b188      	cbz	r0, 18e58 <ble_ll_sched_adv_resched_pdu+0x48>
        if (ble_ll_sched_is_overlap(sch, entry)) {
   18e34:	4601      	mov	r1, r0
   18e36:	4620      	mov	r0, r4
   18e38:	f7ff fbfc 	bl	18634 <ble_ll_sched_is_overlap>
   18e3c:	b9c8      	cbnz	r0, 18e72 <ble_ll_sched_adv_resched_pdu+0x62>
        os_cputime_timer_stop(&g_ble_ll_sched_timer);
   18e3e:	4810      	ldr	r0, [pc, #64]	; (18e80 <ble_ll_sched_adv_resched_pdu+0x70>)
   18e40:	f010 fd41 	bl	298c6 <os_cputime_timer_stop>
        TAILQ_INSERT_BEFORE(entry, sch, link);
   18e44:	69ab      	ldr	r3, [r5, #24]
   18e46:	61a3      	str	r3, [r4, #24]
   18e48:	6165      	str	r5, [r4, #20]
   18e4a:	69ab      	ldr	r3, [r5, #24]
   18e4c:	601c      	str	r4, [r3, #0]
   18e4e:	f104 0314 	add.w	r3, r4, #20
   18e52:	61ab      	str	r3, [r5, #24]
        sch->enqueued = 1;
   18e54:	2301      	movs	r3, #1
   18e56:	7063      	strb	r3, [r4, #1]
    ble_ll_rfmgmt_sched_changed(TAILQ_FIRST(&g_ble_ll_sched_q));
   18e58:	4b0a      	ldr	r3, [pc, #40]	; (18e84 <ble_ll_sched_adv_resched_pdu+0x74>)
   18e5a:	6818      	ldr	r0, [r3, #0]
   18e5c:	f7fe fa42 	bl	172e4 <ble_ll_rfmgmt_sched_changed>
    OS_EXIT_CRITICAL(sr);
   18e60:	4630      	mov	r0, r6
   18e62:	f7f4 fccf 	bl	d804 <os_arch_restore_sr>
    os_cputime_timer_start(&g_ble_ll_sched_timer, sch->start_time);
   18e66:	6861      	ldr	r1, [r4, #4]
   18e68:	4805      	ldr	r0, [pc, #20]	; (18e80 <ble_ll_sched_adv_resched_pdu+0x70>)
   18e6a:	f010 fd28 	bl	298be <os_cputime_timer_start>
    return 0;
   18e6e:	2000      	movs	r0, #0
}
   18e70:	bd70      	pop	{r4, r5, r6, pc}
    OS_EXIT_CRITICAL(sr);
   18e72:	4630      	mov	r0, r6
   18e74:	f7f4 fcc6 	bl	d804 <os_arch_restore_sr>
    return -1;
   18e78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18e7c:	e7f8      	b.n	18e70 <ble_ll_sched_adv_resched_pdu+0x60>
   18e7e:	bf00      	nop
   18e80:	20004254 	.word	0x20004254
   18e84:	2000426c 	.word	0x2000426c

00018e88 <ble_ll_sched_rmv_elem>:
{
   18e88:	b570      	push	{r4, r5, r6, lr}
    if (!sch) {
   18e8a:	2800      	cmp	r0, #0
   18e8c:	d030      	beq.n	18ef0 <ble_ll_sched_rmv_elem+0x68>
   18e8e:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
   18e90:	f7f4 fcb2 	bl	d7f8 <os_arch_save_sr>
   18e94:	4605      	mov	r5, r0
    if (sch->enqueued) {
   18e96:	7863      	ldrb	r3, [r4, #1]
   18e98:	b323      	cbz	r3, 18ee4 <ble_ll_sched_rmv_elem+0x5c>
        first = TAILQ_FIRST(&g_ble_ll_sched_q);
   18e9a:	4b16      	ldr	r3, [pc, #88]	; (18ef4 <ble_ll_sched_rmv_elem+0x6c>)
   18e9c:	681e      	ldr	r6, [r3, #0]
        if (first == sch) {
   18e9e:	42b4      	cmp	r4, r6
   18ea0:	d00c      	beq.n	18ebc <ble_ll_sched_rmv_elem+0x34>
        TAILQ_REMOVE(&g_ble_ll_sched_q, sch, link);
   18ea2:	6963      	ldr	r3, [r4, #20]
   18ea4:	b173      	cbz	r3, 18ec4 <ble_ll_sched_rmv_elem+0x3c>
   18ea6:	69a2      	ldr	r2, [r4, #24]
   18ea8:	619a      	str	r2, [r3, #24]
   18eaa:	69a3      	ldr	r3, [r4, #24]
   18eac:	6962      	ldr	r2, [r4, #20]
   18eae:	601a      	str	r2, [r3, #0]
        sch->enqueued = 0;
   18eb0:	2300      	movs	r3, #0
   18eb2:	7063      	strb	r3, [r4, #1]
        if (first == sch) {
   18eb4:	42b4      	cmp	r4, r6
   18eb6:	d009      	beq.n	18ecc <ble_ll_sched_rmv_elem+0x44>
        rc = 0;
   18eb8:	2400      	movs	r4, #0
   18eba:	e014      	b.n	18ee6 <ble_ll_sched_rmv_elem+0x5e>
            os_cputime_timer_stop(&g_ble_ll_sched_timer);
   18ebc:	480e      	ldr	r0, [pc, #56]	; (18ef8 <ble_ll_sched_rmv_elem+0x70>)
   18ebe:	f010 fd02 	bl	298c6 <os_cputime_timer_stop>
   18ec2:	e7ee      	b.n	18ea2 <ble_ll_sched_rmv_elem+0x1a>
        TAILQ_REMOVE(&g_ble_ll_sched_q, sch, link);
   18ec4:	69a2      	ldr	r2, [r4, #24]
   18ec6:	4b0b      	ldr	r3, [pc, #44]	; (18ef4 <ble_ll_sched_rmv_elem+0x6c>)
   18ec8:	605a      	str	r2, [r3, #4]
   18eca:	e7ee      	b.n	18eaa <ble_ll_sched_rmv_elem+0x22>
            first = TAILQ_FIRST(&g_ble_ll_sched_q);
   18ecc:	4b09      	ldr	r3, [pc, #36]	; (18ef4 <ble_ll_sched_rmv_elem+0x6c>)
   18ece:	681c      	ldr	r4, [r3, #0]
            if (first) {
   18ed0:	b11c      	cbz	r4, 18eda <ble_ll_sched_rmv_elem+0x52>
                os_cputime_timer_start(&g_ble_ll_sched_timer, first->start_time);
   18ed2:	6861      	ldr	r1, [r4, #4]
   18ed4:	4808      	ldr	r0, [pc, #32]	; (18ef8 <ble_ll_sched_rmv_elem+0x70>)
   18ed6:	f010 fcf2 	bl	298be <os_cputime_timer_start>
            ble_ll_rfmgmt_sched_changed(first);
   18eda:	4620      	mov	r0, r4
   18edc:	f7fe fa02 	bl	172e4 <ble_ll_rfmgmt_sched_changed>
        rc = 0;
   18ee0:	2400      	movs	r4, #0
   18ee2:	e000      	b.n	18ee6 <ble_ll_sched_rmv_elem+0x5e>
    int rc = 1;
   18ee4:	2401      	movs	r4, #1
    OS_EXIT_CRITICAL(sr);
   18ee6:	4628      	mov	r0, r5
   18ee8:	f7f4 fc8c 	bl	d804 <os_arch_restore_sr>
}
   18eec:	4620      	mov	r0, r4
   18eee:	bd70      	pop	{r4, r5, r6, pc}
        return rc;
   18ef0:	2401      	movs	r4, #1
   18ef2:	e7fb      	b.n	18eec <ble_ll_sched_rmv_elem+0x64>
   18ef4:	2000426c 	.word	0x2000426c
   18ef8:	20004254 	.word	0x20004254

00018efc <ble_ll_sched_next_time>:
 *
 * @return int 0: No events are scheduled 1: there is an upcoming event
 */
int
ble_ll_sched_next_time(uint32_t *next_event_time)
{
   18efc:	b510      	push	{r4, lr}
   18efe:	4604      	mov	r4, r0
    int rc;
    os_sr_t sr;
    struct ble_ll_sched_item *first;

    rc = 0;
    OS_ENTER_CRITICAL(sr);
   18f00:	f7f4 fc7a 	bl	d7f8 <os_arch_save_sr>
    first = TAILQ_FIRST(&g_ble_ll_sched_q);
   18f04:	4b05      	ldr	r3, [pc, #20]	; (18f1c <ble_ll_sched_next_time+0x20>)
   18f06:	681b      	ldr	r3, [r3, #0]
    if (first) {
   18f08:	b133      	cbz	r3, 18f18 <ble_ll_sched_next_time+0x1c>
        *next_event_time = first->start_time;
   18f0a:	685b      	ldr	r3, [r3, #4]
   18f0c:	6023      	str	r3, [r4, #0]
        rc = 1;
   18f0e:	2401      	movs	r4, #1
    }
    OS_EXIT_CRITICAL(sr);
   18f10:	f7f4 fc78 	bl	d804 <os_arch_restore_sr>

    return rc;
}
   18f14:	4620      	mov	r0, r4
   18f16:	bd10      	pop	{r4, pc}
    rc = 0;
   18f18:	2400      	movs	r4, #0
   18f1a:	e7f9      	b.n	18f10 <ble_ll_sched_next_time+0x14>
   18f1c:	2000426c 	.word	0x2000426c

00018f20 <ble_ll_sched_stop>:
 *
 * Context: Link Layer task
 */
void
ble_ll_sched_stop(void)
{
   18f20:	b508      	push	{r3, lr}
    os_cputime_timer_stop(&g_ble_ll_sched_timer);
   18f22:	4802      	ldr	r0, [pc, #8]	; (18f2c <ble_ll_sched_stop+0xc>)
   18f24:	f010 fccf 	bl	298c6 <os_cputime_timer_stop>
}
   18f28:	bd08      	pop	{r3, pc}
   18f2a:	bf00      	nop
   18f2c:	20004254 	.word	0x20004254

00018f30 <ble_ll_sched_init>:
 *
 * @return int
 */
int
ble_ll_sched_init(void)
{
   18f30:	b508      	push	{r3, lr}
    /*
     * This is the offset from the start of the scheduled item until the actual
     * tx/rx should occur, in ticks. We also "round up" to the nearest tick.
     */
    g_ble_ll_sched_offset_ticks =
        (uint8_t) os_cputime_usecs_to_ticks(XCVR_TX_SCHED_DELAY_USECS + 30);
   18f32:	20df      	movs	r0, #223	; 0xdf
   18f34:	f010 fcd0 	bl	298d8 <os_cputime_usecs_to_ticks>
    g_ble_ll_sched_offset_ticks =
   18f38:	4b04      	ldr	r3, [pc, #16]	; (18f4c <ble_ll_sched_init+0x1c>)
   18f3a:	7018      	strb	r0, [r3, #0]

    /* Initialize cputimer for the scheduler */
    os_cputime_timer_init(&g_ble_ll_sched_timer, ble_ll_sched_run, NULL);
   18f3c:	2200      	movs	r2, #0
   18f3e:	4904      	ldr	r1, [pc, #16]	; (18f50 <ble_ll_sched_init+0x20>)
   18f40:	4804      	ldr	r0, [pc, #16]	; (18f54 <ble_ll_sched_init+0x24>)
   18f42:	f010 fc9e 	bl	29882 <os_cputime_timer_init>
    g_ble_ll_sched_data.sch_ticks_per_epoch = BLE_LL_SCHED_PERIODS *
        g_ble_ll_sched_data.sch_ticks_per_period;
#endif

    return 0;
}
   18f46:	2000      	movs	r0, #0
   18f48:	bd08      	pop	{r3, pc}
   18f4a:	bf00      	nop
   18f4c:	20004250 	.word	0x20004250
   18f50:	00018775 	.word	0x00018775
   18f54:	20004254 	.word	0x20004254

00018f58 <ble_ll_utils_calc_access_addr>:
    500, 250, 150, 100, 75, 50, 30, 20
};

uint32_t
ble_ll_utils_calc_access_addr(void)
{
   18f58:	b570      	push	{r4, r5, r6, lr}
   18f5a:	f010 fd67 	bl	29a2c <lrand48>

    /* Calculate a random access address */
    aa = 0;
    while (1) {
        /* Get two, 16-bit random numbers */
        aa_low = rand() & 0xFFFF;
   18f5e:	b286      	uxth	r6, r0
   18f60:	f010 fd64 	bl	29a2c <lrand48>
        aa_high = rand() & 0xFFFF;
   18f64:	b283      	uxth	r3, r0

        /* All four bytes cannot be equal */
        if (aa_low == aa_high) {
   18f66:	429e      	cmp	r6, r3
   18f68:	d0f7      	beq.n	18f5a <ble_ll_utils_calc_access_addr+0x2>
   18f6a:	4605      	mov	r5, r0
            continue;
        }

        /* Upper 6 bits must have 2 transitions */
        tmp = (int16_t)aa_high >> 10;
   18f6c:	f340 2085 	sbfx	r0, r0, #10, #6
        if (__builtin_popcount(tmp ^ (tmp >> 1)) < 2) {
   18f70:	ea80 0060 	eor.w	r0, r0, r0, asr #1
   18f74:	f011 fd02 	bl	2a97c <__popcountsi2>
   18f78:	2801      	cmp	r0, #1
   18f7a:	ddee      	ble.n	18f5a <ble_ll_utils_calc_access_addr+0x2>
            continue;
        }

        /* Cannot be access address or be 1 bit different */
        aa = aa_high;
        aa = (aa << 16) | aa_low;
   18f7c:	ea46 4005 	orr.w	r0, r6, r5, lsl #16
        bits_diff = 0;
        temp = aa ^ BLE_ACCESS_ADDR_ADV;
   18f80:	4921      	ldr	r1, [pc, #132]	; (19008 <ble_ll_utils_calc_access_addr+0xb0>)
   18f82:	4041      	eors	r1, r0
        bits_diff = 0;
   18f84:	2200      	movs	r2, #0
        for (mask = 0x00000001; mask != 0; mask <<= 1) {
   18f86:	2301      	movs	r3, #1
   18f88:	e000      	b.n	18f8c <ble_ll_utils_calc_access_addr+0x34>
   18f8a:	005b      	lsls	r3, r3, #1
   18f8c:	b12b      	cbz	r3, 18f9a <ble_ll_utils_calc_access_addr+0x42>
            if (mask & temp) {
   18f8e:	420b      	tst	r3, r1
   18f90:	d0fb      	beq.n	18f8a <ble_ll_utils_calc_access_addr+0x32>
                ++bits_diff;
   18f92:	3201      	adds	r2, #1
   18f94:	b2d2      	uxtb	r2, r2
                if (bits_diff > 1) {
   18f96:	2a01      	cmp	r2, #1
   18f98:	d9f7      	bls.n	18f8a <ble_ll_utils_calc_access_addr+0x32>
                    break;
                }
            }
        }
        if (bits_diff <= 1) {
   18f9a:	2a01      	cmp	r2, #1
   18f9c:	d9dd      	bls.n	18f5a <ble_ll_utils_calc_access_addr+0x2>
        }

        /* Cannot have more than 24 transitions */
        transitions = 0;
        consecutive = 1;
        ones = 0;
   18f9e:	2400      	movs	r4, #0
        transitions = 0;
   18fa0:	4625      	mov	r5, r4
        consecutive = 1;
   18fa2:	2201      	movs	r2, #1
        mask = 0x00000001;
   18fa4:	4613      	mov	r3, r2
   18fa6:	e00c      	b.n	18fc2 <ble_ll_utils_calc_access_addr+0x6a>
            if (mask & aa) {
                if (prev_bit == 0) {
                    ++transitions;
                    consecutive = 1;
                } else {
                    ++consecutive;
   18fa8:	3201      	adds	r2, #1
   18faa:	b2d2      	uxtb	r2, r2
                    ++transitions;
                    consecutive = 1;
                }
            }

            if (prev_bit) {
   18fac:	b109      	cbz	r1, 18fb2 <ble_ll_utils_calc_access_addr+0x5a>
                ones++;
   18fae:	3401      	adds	r4, #1
   18fb0:	b2e4      	uxtb	r4, r4
            }

            /* 8 lsb should have at least three 1 */
            if (mask == 0x00000100 && ones < 3) {
   18fb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   18fb6:	d019      	beq.n	18fec <ble_ll_utils_calc_access_addr+0x94>
                break;
            }

            /* 16 lsb should have no more than 11 transitions */
            if (mask == 0x00010000 && transitions > 11) {
   18fb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   18fbc:	d019      	beq.n	18ff2 <ble_ll_utils_calc_access_addr+0x9a>
                break;
            }

            /* This is invalid! */
            if (consecutive > 6) {
   18fbe:	2a06      	cmp	r2, #6
   18fc0:	d81a      	bhi.n	18ff8 <ble_ll_utils_calc_access_addr+0xa0>
        while (mask < 0x80000000) {
   18fc2:	2b00      	cmp	r3, #0
   18fc4:	db19      	blt.n	18ffa <ble_ll_utils_calc_access_addr+0xa2>
            prev_bit = aa & mask;
   18fc6:	ea03 0100 	and.w	r1, r3, r0
            mask <<= 1;
   18fca:	005b      	lsls	r3, r3, #1
            if (mask & aa) {
   18fcc:	4218      	tst	r0, r3
   18fce:	d005      	beq.n	18fdc <ble_ll_utils_calc_access_addr+0x84>
                if (prev_bit == 0) {
   18fd0:	2900      	cmp	r1, #0
   18fd2:	d1e9      	bne.n	18fa8 <ble_ll_utils_calc_access_addr+0x50>
                    ++transitions;
   18fd4:	3501      	adds	r5, #1
   18fd6:	b2ed      	uxtb	r5, r5
                    consecutive = 1;
   18fd8:	2201      	movs	r2, #1
   18fda:	e7e7      	b.n	18fac <ble_ll_utils_calc_access_addr+0x54>
                if (prev_bit == 0) {
   18fdc:	b911      	cbnz	r1, 18fe4 <ble_ll_utils_calc_access_addr+0x8c>
                    ++consecutive;
   18fde:	3201      	adds	r2, #1
   18fe0:	b2d2      	uxtb	r2, r2
   18fe2:	e7e3      	b.n	18fac <ble_ll_utils_calc_access_addr+0x54>
                    ++transitions;
   18fe4:	3501      	adds	r5, #1
   18fe6:	b2ed      	uxtb	r5, r5
                    consecutive = 1;
   18fe8:	2201      	movs	r2, #1
   18fea:	e7df      	b.n	18fac <ble_ll_utils_calc_access_addr+0x54>
            if (mask == 0x00000100 && ones < 3) {
   18fec:	2c02      	cmp	r4, #2
   18fee:	d8e3      	bhi.n	18fb8 <ble_ll_utils_calc_access_addr+0x60>
   18ff0:	e003      	b.n	18ffa <ble_ll_utils_calc_access_addr+0xa2>
            if (mask == 0x00010000 && transitions > 11) {
   18ff2:	2d0b      	cmp	r5, #11
   18ff4:	d9e3      	bls.n	18fbe <ble_ll_utils_calc_access_addr+0x66>
   18ff6:	e000      	b.n	18ffa <ble_ll_utils_calc_access_addr+0xa2>
                /* Make sure we always detect invalid sequence below */
                mask = 0;
   18ff8:	2300      	movs	r3, #0
                break;
            }
        }

        /* Invalid sequence found */
        if (mask != 0x80000000) {
   18ffa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   18ffe:	d1ac      	bne.n	18f5a <ble_ll_utils_calc_access_addr+0x2>
            continue;
        }

        /* Cannot be more than 24 transitions */
        if (transitions > 24) {
   19000:	2d18      	cmp	r5, #24
   19002:	d8aa      	bhi.n	18f5a <ble_ll_utils_calc_access_addr+0x2>

        /* We have a valid access address */
        break;
    }
    return aa;
}
   19004:	bd70      	pop	{r4, r5, r6, pc}
   19006:	bf00      	nop
   19008:	8e89bed6 	.word	0x8e89bed6

0001900c <ble_ll_utils_remapped_channel>:

uint8_t
ble_ll_utils_remapped_channel(uint8_t remap_index, const uint8_t *chanmap)
{
   1900c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     * we just calculate
     * Iterate through channel map to find this channel
     */
    chan = 0;
    cntr = 0;
    for (i = 0; i < BLE_LL_CHMAP_LEN; i++) {
   1900e:	2500      	movs	r5, #0
    chan = 0;
   19010:	462e      	mov	r6, r5
    cntr = 0;
   19012:	462c      	mov	r4, r5
    for (i = 0; i < BLE_LL_CHMAP_LEN; i++) {
   19014:	e00e      	b.n	19034 <ble_ll_utils_remapped_channel+0x28>
                    if (cntr == remap_index) {
                        return (chan + j);
                    }
                    ++cntr;
                }
                mask <<= 1;
   19016:	005b      	lsls	r3, r3, #1
   19018:	b2db      	uxtb	r3, r3
            for (j = 0; j < 8; j++) {
   1901a:	3201      	adds	r2, #1
   1901c:	2a07      	cmp	r2, #7
   1901e:	dc06      	bgt.n	1902e <ble_ll_utils_remapped_channel+0x22>
                if (usable_chans & mask) {
   19020:	423b      	tst	r3, r7
   19022:	d0f8      	beq.n	19016 <ble_ll_utils_remapped_channel+0xa>
                    if (cntr == remap_index) {
   19024:	4284      	cmp	r4, r0
   19026:	d017      	beq.n	19058 <ble_ll_utils_remapped_channel+0x4c>
                    ++cntr;
   19028:	3401      	adds	r4, #1
   1902a:	b2e4      	uxtb	r4, r4
   1902c:	e7f3      	b.n	19016 <ble_ll_utils_remapped_channel+0xa>
            }
        }
        chan += 8;
   1902e:	3608      	adds	r6, #8
   19030:	b2f6      	uxtb	r6, r6
    for (i = 0; i < BLE_LL_CHMAP_LEN; i++) {
   19032:	3501      	adds	r5, #1
   19034:	2d04      	cmp	r5, #4
   19036:	dc05      	bgt.n	19044 <ble_ll_utils_remapped_channel+0x38>
        usable_chans = chanmap[i];
   19038:	5d4f      	ldrb	r7, [r1, r5]
        if (usable_chans != 0) {
   1903a:	2f00      	cmp	r7, #0
   1903c:	d0f7      	beq.n	1902e <ble_ll_utils_remapped_channel+0x22>
            for (j = 0; j < 8; j++) {
   1903e:	2200      	movs	r2, #0
            mask = 0x01;
   19040:	2301      	movs	r3, #1
   19042:	e7eb      	b.n	1901c <ble_ll_utils_remapped_channel+0x10>
    }

    /* we should never reach here */
    BLE_LL_ASSERT(0);
   19044:	f7f3 f8d0 	bl	c1e8 <hal_debugger_connected>
   19048:	b100      	cbz	r0, 1904c <ble_ll_utils_remapped_channel+0x40>
   1904a:	be01      	bkpt	0x0001
   1904c:	2300      	movs	r3, #0
   1904e:	461a      	mov	r2, r3
   19050:	4619      	mov	r1, r3
   19052:	4618      	mov	r0, r3
   19054:	f7f3 fb02 	bl	c65c <__assert_func>
                        return (chan + j);
   19058:	4432      	add	r2, r6
   1905a:	b2d0      	uxtb	r0, r2
    return 0;
}
   1905c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001905e <ble_ll_utils_calc_num_used_chans>:

uint8_t
ble_ll_utils_calc_num_used_chans(const uint8_t *chmap)
{
   1905e:	b430      	push	{r4, r5}
    int j;
    uint8_t mask;
    uint8_t chanbyte;
    uint8_t used_channels;

    used_channels = 0;
   19060:	2100      	movs	r1, #0
    for (i = 0; i < BLE_LL_CHMAP_LEN; ++i) {
   19062:	460d      	mov	r5, r1
   19064:	e00d      	b.n	19082 <ble_ll_utils_calc_num_used_chans+0x24>
                mask = 0x01;
                for (j = 0; j < 8; ++j) {
                    if (chanbyte & mask) {
                        ++used_channels;
                    }
                    mask <<= 1;
   19066:	005b      	lsls	r3, r3, #1
   19068:	b2db      	uxtb	r3, r3
                for (j = 0; j < 8; ++j) {
   1906a:	3201      	adds	r2, #1
   1906c:	2a07      	cmp	r2, #7
   1906e:	dc07      	bgt.n	19080 <ble_ll_utils_calc_num_used_chans+0x22>
                    if (chanbyte & mask) {
   19070:	4223      	tst	r3, r4
   19072:	d0f8      	beq.n	19066 <ble_ll_utils_calc_num_used_chans+0x8>
                        ++used_channels;
   19074:	3101      	adds	r1, #1
   19076:	b2c9      	uxtb	r1, r1
   19078:	e7f5      	b.n	19066 <ble_ll_utils_calc_num_used_chans+0x8>
                mask = 0x01;
   1907a:	2301      	movs	r3, #1
                for (j = 0; j < 8; ++j) {
   1907c:	2200      	movs	r2, #0
   1907e:	e7f5      	b.n	1906c <ble_ll_utils_calc_num_used_chans+0xe>
    for (i = 0; i < BLE_LL_CHMAP_LEN; ++i) {
   19080:	3501      	adds	r5, #1
   19082:	2d04      	cmp	r5, #4
   19084:	dc07      	bgt.n	19096 <ble_ll_utils_calc_num_used_chans+0x38>
        chanbyte = chmap[i];
   19086:	5d44      	ldrb	r4, [r0, r5]
        if (chanbyte) {
   19088:	2c00      	cmp	r4, #0
   1908a:	d0f9      	beq.n	19080 <ble_ll_utils_calc_num_used_chans+0x22>
            if (chanbyte == 0xff) {
   1908c:	2cff      	cmp	r4, #255	; 0xff
   1908e:	d1f4      	bne.n	1907a <ble_ll_utils_calc_num_used_chans+0x1c>
                used_channels += 8;
   19090:	3108      	adds	r1, #8
   19092:	b2c9      	uxtb	r1, r1
   19094:	e7f4      	b.n	19080 <ble_ll_utils_calc_num_used_chans+0x22>
                }
            }
        }
    }
    return used_channels;
}
   19096:	4608      	mov	r0, r1
   19098:	bc30      	pop	{r4, r5}
   1909a:	4770      	bx	lr

0001909c <ble_ll_utils_calc_window_widening>:
    int32_t time_since_last_anchor;
    uint32_t delta_msec;

    window_widening = 0;

    time_since_last_anchor = (int32_t)(anchor_point - last_anchor_point);
   1909c:	1a40      	subs	r0, r0, r1
    if (time_since_last_anchor > 0) {
   1909e:	2800      	cmp	r0, #0
   190a0:	dd11      	ble.n	190c6 <ble_ll_utils_calc_window_widening+0x2a>
{
   190a2:	b510      	push	{r4, lr}
   190a4:	4614      	mov	r4, r2
        delta_msec = os_cputime_ticks_to_usecs(time_since_last_anchor) / 1000;
   190a6:	f010 fc1f 	bl	298e8 <os_cputime_ticks_to_usecs>
   190aa:	4a08      	ldr	r2, [pc, #32]	; (190cc <ble_ll_utils_calc_window_widening+0x30>)
   190ac:	fba2 3000 	umull	r3, r0, r2, r0
   190b0:	0983      	lsrs	r3, r0, #6
        total_sca_ppm = g_ble_sca_ppm_tbl[master_sca] +
   190b2:	4907      	ldr	r1, [pc, #28]	; (190d0 <ble_ll_utils_calc_window_widening+0x34>)
   190b4:	f831 0014 	ldrh.w	r0, [r1, r4, lsl #1]
   190b8:	303c      	adds	r0, #60	; 0x3c
                                          MYNEWT_VAL(BLE_LL_OUR_SCA);
        window_widening = (total_sca_ppm * delta_msec) / 1000;
   190ba:	fb00 f003 	mul.w	r0, r0, r3
   190be:	fba2 3000 	umull	r3, r0, r2, r0
   190c2:	0980      	lsrs	r0, r0, #6
    }

    return window_widening;
}
   190c4:	bd10      	pop	{r4, pc}
    window_widening = 0;
   190c6:	2000      	movs	r0, #0
}
   190c8:	4770      	bx	lr
   190ca:	bf00      	nop
   190cc:	10624dd3 	.word	0x10624dd3
   190d0:	0002b000 	.word	0x0002b000

000190d4 <ble_ll_whitelist_chg_allowed>:

struct ble_ll_whitelist_entry g_ble_ll_whitelist[BLE_LL_WHITELIST_SIZE];

static int
ble_ll_whitelist_chg_allowed(void)
{
   190d4:	b508      	push	{r3, lr}
     *  -> scanning uses the whitelist and is enabled.
     *  -> initiating uses whitelist and a LE create connection command is in
     *     progress
     */
    rc = 1;
    if (!ble_ll_adv_can_chg_whitelist() || !ble_ll_scan_can_chg_whitelist()) {
   190d6:	f7f8 fd9d 	bl	11c14 <ble_ll_adv_can_chg_whitelist>
   190da:	4603      	mov	r3, r0
   190dc:	b908      	cbnz	r0, 190e2 <ble_ll_whitelist_chg_allowed+0xe>
        rc = 0;
    }
    return rc;
}
   190de:	4618      	mov	r0, r3
   190e0:	bd08      	pop	{r3, pc}
    if (!ble_ll_adv_can_chg_whitelist() || !ble_ll_scan_can_chg_whitelist()) {
   190e2:	f7ff f9fd 	bl	184e0 <ble_ll_scan_can_chg_whitelist>
   190e6:	4603      	mov	r3, r0
   190e8:	2800      	cmp	r0, #0
   190ea:	d0f8      	beq.n	190de <ble_ll_whitelist_chg_allowed+0xa>
    rc = 1;
   190ec:	2301      	movs	r3, #1
    return rc;
   190ee:	e7f6      	b.n	190de <ble_ll_whitelist_chg_allowed+0xa>

000190f0 <ble_ll_whitelist_search>:
 * is the 'position' of the device in the whitelist (the index of the element
 * plus 1).
 */
static int
ble_ll_whitelist_search(const uint8_t *addr, uint8_t addr_type)
{
   190f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   190f2:	4607      	mov	r7, r0
   190f4:	460e      	mov	r6, r1
    int i;
    struct ble_ll_whitelist_entry *wl;

    wl = &g_ble_ll_whitelist[0];
   190f6:	4c0c      	ldr	r4, [pc, #48]	; (19128 <ble_ll_whitelist_search+0x38>)
    for (i = 0; i < BLE_LL_WHITELIST_SIZE; ++i) {
   190f8:	2500      	movs	r5, #0
   190fa:	e001      	b.n	19100 <ble_ll_whitelist_search+0x10>
        if ((wl->wl_valid) && (wl->wl_addr_type == addr_type) &&
            (!memcmp(&wl->wl_dev_addr[0], addr, BLE_DEV_ADDR_LEN))) {
            return i + 1;
        }
        ++wl;
   190fc:	3408      	adds	r4, #8
    for (i = 0; i < BLE_LL_WHITELIST_SIZE; ++i) {
   190fe:	3501      	adds	r5, #1
   19100:	2d07      	cmp	r5, #7
   19102:	dc0e      	bgt.n	19122 <ble_ll_whitelist_search+0x32>
        if ((wl->wl_valid) && (wl->wl_addr_type == addr_type) &&
   19104:	7823      	ldrb	r3, [r4, #0]
   19106:	2b00      	cmp	r3, #0
   19108:	d0f8      	beq.n	190fc <ble_ll_whitelist_search+0xc>
   1910a:	7863      	ldrb	r3, [r4, #1]
   1910c:	42b3      	cmp	r3, r6
   1910e:	d1f5      	bne.n	190fc <ble_ll_whitelist_search+0xc>
            (!memcmp(&wl->wl_dev_addr[0], addr, BLE_DEV_ADDR_LEN))) {
   19110:	2206      	movs	r2, #6
   19112:	4639      	mov	r1, r7
   19114:	1ca0      	adds	r0, r4, #2
   19116:	f7f5 f987 	bl	e428 <memcmp>
        if ((wl->wl_valid) && (wl->wl_addr_type == addr_type) &&
   1911a:	2800      	cmp	r0, #0
   1911c:	d1ee      	bne.n	190fc <ble_ll_whitelist_search+0xc>
            return i + 1;
   1911e:	1c68      	adds	r0, r5, #1
   19120:	e000      	b.n	19124 <ble_ll_whitelist_search+0x34>
    }

    return 0;
   19122:	2000      	movs	r0, #0
}
   19124:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19126:	bf00      	nop
   19128:	20004274 	.word	0x20004274

0001912c <ble_ll_whitelist_clear>:
{
   1912c:	b508      	push	{r3, lr}
    if (!ble_ll_whitelist_chg_allowed()) {
   1912e:	f7ff ffd1 	bl	190d4 <ble_ll_whitelist_chg_allowed>
   19132:	b160      	cbz	r0, 1914e <ble_ll_whitelist_clear+0x22>
    wl = &g_ble_ll_whitelist[0];
   19134:	4a07      	ldr	r2, [pc, #28]	; (19154 <ble_ll_whitelist_clear+0x28>)
    for (i = 0; i < BLE_LL_WHITELIST_SIZE; ++i) {
   19136:	2300      	movs	r3, #0
   19138:	e003      	b.n	19142 <ble_ll_whitelist_clear+0x16>
        wl->wl_valid = 0;
   1913a:	2100      	movs	r1, #0
   1913c:	f802 1b08 	strb.w	r1, [r2], #8
    for (i = 0; i < BLE_LL_WHITELIST_SIZE; ++i) {
   19140:	3301      	adds	r3, #1
   19142:	2b07      	cmp	r3, #7
   19144:	ddf9      	ble.n	1913a <ble_ll_whitelist_clear+0xe>
    ble_hw_whitelist_clear();
   19146:	f000 f8a5 	bl	19294 <ble_hw_whitelist_clear>
    return BLE_ERR_SUCCESS;
   1914a:	2000      	movs	r0, #0
}
   1914c:	bd08      	pop	{r3, pc}
        return BLE_ERR_CMD_DISALLOWED;
   1914e:	200c      	movs	r0, #12
   19150:	e7fc      	b.n	1914c <ble_ll_whitelist_clear+0x20>
   19152:	bf00      	nop
   19154:	20004274 	.word	0x20004274

00019158 <ble_ll_whitelist_read_size>:
    rsp->size = BLE_LL_WHITELIST_SIZE;
   19158:	2308      	movs	r3, #8
   1915a:	7003      	strb	r3, [r0, #0]
    *rsplen = sizeof(*rsp);
   1915c:	2301      	movs	r3, #1
   1915e:	700b      	strb	r3, [r1, #0]
}
   19160:	2000      	movs	r0, #0
   19162:	4770      	bx	lr

00019164 <ble_ll_whitelist_match>:
 *
 * @return int
 */
int
ble_ll_whitelist_match(uint8_t *addr, uint8_t addr_type, int is_ident)
{
   19164:	b508      	push	{r3, lr}
    /*
     * XXX: This should be changed. This is HW specific: some HW may be able
     * to both resolve a private address and perform a whitelist check. The
     * current BLE hw cannot support this.
     */
    if (is_ident) {
   19166:	b112      	cbz	r2, 1916e <ble_ll_whitelist_match+0xa>
        rc = ble_ll_whitelist_search(addr, addr_type);
   19168:	f7ff ffc2 	bl	190f0 <ble_ll_whitelist_search>
    }
#else
    rc = ble_ll_whitelist_search(addr, addr_type);
#endif
    return rc;
}
   1916c:	bd08      	pop	{r3, pc}
        rc = ble_hw_whitelist_match();
   1916e:	f000 f929 	bl	193c4 <ble_hw_whitelist_match>
    return rc;
   19172:	e7fb      	b.n	1916c <ble_ll_whitelist_match+0x8>

00019174 <ble_ll_whitelist_add>:
    const struct ble_hci_le_add_whte_list_cp *cmd = (const void *) cmdbuf;
    struct ble_ll_whitelist_entry *wl;
    int rc;
    int i;

    if (len != sizeof(*cmd)) {
   19174:	2907      	cmp	r1, #7
   19176:	d001      	beq.n	1917c <ble_ll_whitelist_add+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   19178:	2012      	movs	r0, #18
#endif
        }
    }

    return rc;
}
   1917a:	4770      	bx	lr
{
   1917c:	b538      	push	{r3, r4, r5, lr}
   1917e:	4604      	mov	r4, r0
    if (!ble_ll_whitelist_chg_allowed()) {
   19180:	f7ff ffa8 	bl	190d4 <ble_ll_whitelist_chg_allowed>
   19184:	b300      	cbz	r0, 191c8 <ble_ll_whitelist_add+0x54>
    if (!ble_ll_whitelist_search(cmd->addr, cmd->addr_type)) {
   19186:	1c65      	adds	r5, r4, #1
   19188:	7821      	ldrb	r1, [r4, #0]
   1918a:	4628      	mov	r0, r5
   1918c:	f7ff ffb0 	bl	190f0 <ble_ll_whitelist_search>
   19190:	4603      	mov	r3, r0
   19192:	b938      	cbnz	r0, 191a4 <ble_ll_whitelist_add+0x30>
        wl = &g_ble_ll_whitelist[0];
   19194:	4a0e      	ldr	r2, [pc, #56]	; (191d0 <ble_ll_whitelist_add+0x5c>)
        for (i = 0; i < BLE_LL_WHITELIST_SIZE; ++i) {
   19196:	2b07      	cmp	r3, #7
   19198:	dc0f      	bgt.n	191ba <ble_ll_whitelist_add+0x46>
            if (wl->wl_valid == 0) {
   1919a:	7811      	ldrb	r1, [r2, #0]
   1919c:	b121      	cbz	r1, 191a8 <ble_ll_whitelist_add+0x34>
            ++wl;
   1919e:	3208      	adds	r2, #8
        for (i = 0; i < BLE_LL_WHITELIST_SIZE; ++i) {
   191a0:	3301      	adds	r3, #1
   191a2:	e7f8      	b.n	19196 <ble_ll_whitelist_add+0x22>
    rc = BLE_ERR_SUCCESS;
   191a4:	2000      	movs	r0, #0
}
   191a6:	bd38      	pop	{r3, r4, r5, pc}
                memcpy(&wl->wl_dev_addr[0], cmd->addr, BLE_DEV_ADDR_LEN);
   191a8:	6829      	ldr	r1, [r5, #0]
   191aa:	f8c2 1002 	str.w	r1, [r2, #2]
   191ae:	88a9      	ldrh	r1, [r5, #4]
   191b0:	80d1      	strh	r1, [r2, #6]
                wl->wl_addr_type = cmd->addr_type;
   191b2:	7821      	ldrb	r1, [r4, #0]
   191b4:	7051      	strb	r1, [r2, #1]
                wl->wl_valid = 1;
   191b6:	2101      	movs	r1, #1
   191b8:	7011      	strb	r1, [r2, #0]
        if (i == BLE_LL_WHITELIST_SIZE) {
   191ba:	2b08      	cmp	r3, #8
   191bc:	d006      	beq.n	191cc <ble_ll_whitelist_add+0x58>
            rc = ble_hw_whitelist_add(cmd->addr, cmd->addr_type);
   191be:	7821      	ldrb	r1, [r4, #0]
   191c0:	4628      	mov	r0, r5
   191c2:	f000 f873 	bl	192ac <ble_hw_whitelist_add>
   191c6:	e7ee      	b.n	191a6 <ble_ll_whitelist_add+0x32>
        return BLE_ERR_CMD_DISALLOWED;
   191c8:	200c      	movs	r0, #12
   191ca:	e7ec      	b.n	191a6 <ble_ll_whitelist_add+0x32>
            rc = BLE_ERR_MEM_CAPACITY;
   191cc:	2007      	movs	r0, #7
   191ce:	e7ea      	b.n	191a6 <ble_ll_whitelist_add+0x32>
   191d0:	20004274 	.word	0x20004274

000191d4 <ble_ll_whitelist_rmv>:
ble_ll_whitelist_rmv(const uint8_t *cmdbuf, uint8_t len)
{
    const struct ble_hci_le_rmv_white_list_cp *cmd = (const void *) cmdbuf;
    int position;

    if (len != sizeof(*cmd)) {
   191d4:	2907      	cmp	r1, #7
   191d6:	d001      	beq.n	191dc <ble_ll_whitelist_rmv+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   191d8:	2012      	movs	r0, #18
#if (BLE_USES_HW_WHITELIST == 1)
    ble_hw_whitelist_rmv(cmd->addr, cmd->addr_type);
#endif

    return BLE_ERR_SUCCESS;
}
   191da:	4770      	bx	lr
{
   191dc:	b538      	push	{r3, r4, r5, lr}
   191de:	4604      	mov	r4, r0
    if (!ble_ll_whitelist_chg_allowed()) {
   191e0:	f7ff ff78 	bl	190d4 <ble_ll_whitelist_chg_allowed>
   191e4:	b180      	cbz	r0, 19208 <ble_ll_whitelist_rmv+0x34>
    position = ble_ll_whitelist_search(cmd->addr, cmd->addr_type);
   191e6:	1c65      	adds	r5, r4, #1
   191e8:	7821      	ldrb	r1, [r4, #0]
   191ea:	4628      	mov	r0, r5
   191ec:	f7ff ff80 	bl	190f0 <ble_ll_whitelist_search>
    if (position) {
   191f0:	b120      	cbz	r0, 191fc <ble_ll_whitelist_rmv+0x28>
        g_ble_ll_whitelist[position - 1].wl_valid = 0;
   191f2:	1e43      	subs	r3, r0, #1
   191f4:	4a05      	ldr	r2, [pc, #20]	; (1920c <ble_ll_whitelist_rmv+0x38>)
   191f6:	2100      	movs	r1, #0
   191f8:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
    ble_hw_whitelist_rmv(cmd->addr, cmd->addr_type);
   191fc:	7821      	ldrb	r1, [r4, #0]
   191fe:	4628      	mov	r0, r5
   19200:	f000 f888 	bl	19314 <ble_hw_whitelist_rmv>
    return BLE_ERR_SUCCESS;
   19204:	2000      	movs	r0, #0
}
   19206:	bd38      	pop	{r3, r4, r5, pc}
        return BLE_ERR_CMD_DISALLOWED;
   19208:	200c      	movs	r0, #12
   1920a:	e7fc      	b.n	19206 <ble_ll_whitelist_rmv+0x32>
   1920c:	20004274 	.word	0x20004274

00019210 <ble_ll_whitelist_enable>:
 *
 * Note: This function has no effect if we are not using HW whitelisting
 */
void
ble_ll_whitelist_enable(void)
{
   19210:	b508      	push	{r3, lr}
#if (BLE_USES_HW_WHITELIST == 1)
    ble_hw_whitelist_enable();
   19212:	f000 f8bf 	bl	19394 <ble_hw_whitelist_enable>
#endif
}
   19216:	bd08      	pop	{r3, pc}

00019218 <ble_ll_whitelist_disable>:
 *
 * Note: This function has no effect if we are not using HW whitelisting
 */
void
ble_ll_whitelist_disable(void)
{
   19218:	b508      	push	{r3, lr}
#if (BLE_USES_HW_WHITELIST == 1)
    ble_hw_whitelist_disable();
   1921a:	f000 f8c9 	bl	193b0 <ble_hw_whitelist_disable>
#endif
}
   1921e:	bd08      	pop	{r3, pc}

00019220 <do_works_mitm>:
void do_works_mitm(){
#ifdef BLE_LL_ENCRYPT_DEBUG

    console_print("==============/n/r/n/r/n/r/n/r/n/rYEEEEEEEEEEEEEEAH");
#endif
}
   19220:	4770      	bx	lr
	...

00019224 <ble_rng_isr>:
/**
 * Random number generator ISR.
 */
static void
ble_rng_isr(void)
{
   19224:	b508      	push	{r3, lr}
    uint8_t rnum;

    os_trace_isr_enter();

    /* No callback? Clear and disable interrupts */
    if (g_ble_rng_isr_cb == NULL) {
   19226:	4b0d      	ldr	r3, [pc, #52]	; (1925c <ble_rng_isr+0x38>)
   19228:	681b      	ldr	r3, [r3, #0]
   1922a:	b163      	cbz	r3, 19246 <ble_rng_isr+0x22>
        os_trace_isr_exit();
        return;
    }

    /* If there is a value ready grab it */
    if (NRF_RNG->EVENTS_VALRDY) {
   1922c:	4a0c      	ldr	r2, [pc, #48]	; (19260 <ble_rng_isr+0x3c>)
   1922e:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
   19232:	b13a      	cbz	r2, 19244 <ble_rng_isr+0x20>
        NRF_RNG->EVENTS_VALRDY = 0;
   19234:	4a0a      	ldr	r2, [pc, #40]	; (19260 <ble_rng_isr+0x3c>)
   19236:	2100      	movs	r1, #0
   19238:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
        rnum = (uint8_t)NRF_RNG->VALUE;
   1923c:	f8d2 0508 	ldr.w	r0, [r2, #1288]	; 0x508
        (*g_ble_rng_isr_cb)(rnum);
   19240:	b2c0      	uxtb	r0, r0
   19242:	4798      	blx	r3
    }

    os_trace_isr_exit();
}
   19244:	bd08      	pop	{r3, pc}
        NRF_RNG->INTENCLR = 1;
   19246:	4b06      	ldr	r3, [pc, #24]	; (19260 <ble_rng_isr+0x3c>)
   19248:	2201      	movs	r2, #1
   1924a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        NRF_RNG->EVENTS_VALRDY = 0;
   1924e:	2200      	movs	r2, #0
   19250:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        (void)NRF_RNG->SHORTS;
   19254:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
   19258:	e7f4      	b.n	19244 <ble_rng_isr+0x20>
   1925a:	bf00      	nop
   1925c:	200042f8 	.word	0x200042f8
   19260:	4000d000 	.word	0x4000d000

00019264 <ble_hw_get_public_addr>:
    if ((NRF_FICR->DEVICEADDRTYPE & 1) != 0) {
   19264:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   19268:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
   1926c:	f013 0f01 	tst.w	r3, #1
   19270:	d10d      	bne.n	1928e <ble_hw_get_public_addr+0x2a>
    addr_low = NRF_FICR->DEVICEADDR[0];
   19272:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   19276:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
    addr_high = NRF_FICR->DEVICEADDR[1];
   1927a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
    memcpy(addr->val, &addr_low, 4);
   1927e:	f8c0 2001 	str.w	r2, [r0, #1]
    memcpy(&addr->val[4], &addr_high, 2);
   19282:	f8a0 3005 	strh.w	r3, [r0, #5]
    addr->type = BLE_ADDR_PUBLIC;
   19286:	2300      	movs	r3, #0
   19288:	7003      	strb	r3, [r0, #0]
    return 0;
   1928a:	4618      	mov	r0, r3
   1928c:	4770      	bx	lr
        return -1;
   1928e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   19292:	4770      	bx	lr

00019294 <ble_hw_whitelist_clear>:
    NRF_RADIO->DACNF = 0;
   19294:	2300      	movs	r3, #0
   19296:	4a03      	ldr	r2, [pc, #12]	; (192a4 <ble_hw_whitelist_clear+0x10>)
   19298:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
    g_ble_hw_whitelist_mask = 0;
   1929c:	4a02      	ldr	r2, [pc, #8]	; (192a8 <ble_hw_whitelist_clear+0x14>)
   1929e:	7013      	strb	r3, [r2, #0]
}
   192a0:	4770      	bx	lr
   192a2:	bf00      	nop
   192a4:	40001000 	.word	0x40001000
   192a8:	200027d4 	.word	0x200027d4

000192ac <ble_hw_whitelist_add>:
{
   192ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    mask = 0x01;
   192b0:	2501      	movs	r5, #1
    for (i = 0; i < BLE_HW_WHITE_LIST_SIZE; ++i) {
   192b2:	2400      	movs	r4, #0
   192b4:	2c07      	cmp	r4, #7
   192b6:	dc26      	bgt.n	19306 <ble_hw_whitelist_add+0x5a>
        if ((mask & g_ble_hw_whitelist_mask) == 0) {
   192b8:	4b14      	ldr	r3, [pc, #80]	; (1930c <ble_hw_whitelist_add+0x60>)
   192ba:	781b      	ldrb	r3, [r3, #0]
   192bc:	422b      	tst	r3, r5
   192be:	d002      	beq.n	192c6 <ble_hw_whitelist_add+0x1a>
        mask <<= 1;
   192c0:	006d      	lsls	r5, r5, #1
    for (i = 0; i < BLE_HW_WHITE_LIST_SIZE; ++i) {
   192c2:	3401      	adds	r4, #1
   192c4:	e7f6      	b.n	192b4 <ble_hw_whitelist_add+0x8>
   192c6:	460f      	mov	r7, r1
   192c8:	4606      	mov	r6, r0
            NRF_RADIO->DAB[i] = get_le32(addr);
   192ca:	f010 fa65 	bl	29798 <get_le32>
   192ce:	f8df 8040 	ldr.w	r8, [pc, #64]	; 19310 <ble_hw_whitelist_add+0x64>
   192d2:	f504 73c0 	add.w	r3, r4, #384	; 0x180
   192d6:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
            NRF_RADIO->DAP[i] = get_le16(addr + 4);
   192da:	1d30      	adds	r0, r6, #4
   192dc:	f010 fa57 	bl	2978e <get_le16>
   192e0:	f504 74c4 	add.w	r4, r4, #392	; 0x188
   192e4:	f848 0024 	str.w	r0, [r8, r4, lsl #2]
            if (addr_type == BLE_ADDR_RANDOM) {
   192e8:	2f01      	cmp	r7, #1
   192ea:	d005      	beq.n	192f8 <ble_hw_whitelist_add+0x4c>
            g_ble_hw_whitelist_mask |= mask;
   192ec:	4a07      	ldr	r2, [pc, #28]	; (1930c <ble_hw_whitelist_add+0x60>)
   192ee:	7813      	ldrb	r3, [r2, #0]
   192f0:	431d      	orrs	r5, r3
   192f2:	7015      	strb	r5, [r2, #0]
            return BLE_ERR_SUCCESS;
   192f4:	2000      	movs	r0, #0
   192f6:	e007      	b.n	19308 <ble_hw_whitelist_add+0x5c>
                NRF_RADIO->DACNF |= (mask << 8);
   192f8:	f8d8 3640 	ldr.w	r3, [r8, #1600]	; 0x640
   192fc:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
   19300:	f8c8 3640 	str.w	r3, [r8, #1600]	; 0x640
   19304:	e7f2      	b.n	192ec <ble_hw_whitelist_add+0x40>
    return BLE_ERR_MEM_CAPACITY;
   19306:	2007      	movs	r0, #7
}
   19308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1930c:	200027d4 	.word	0x200027d4
   19310:	40001000 	.word	0x40001000

00019314 <ble_hw_whitelist_rmv>:
{
   19314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19316:	4606      	mov	r6, r0
   19318:	460d      	mov	r5, r1
    dab = get_le32(addr);
   1931a:	f010 fa3d 	bl	29798 <get_le32>
   1931e:	4604      	mov	r4, r0
    dap = get_le16(addr + 4);
   19320:	1d30      	adds	r0, r6, #4
   19322:	f010 fa34 	bl	2978e <get_le16>
    txadd = NRF_RADIO->DACNF >> 8;
   19326:	4b19      	ldr	r3, [pc, #100]	; (1938c <ble_hw_whitelist_rmv+0x78>)
   19328:	f8d3 7640 	ldr.w	r7, [r3, #1600]	; 0x640
   1932c:	0a3f      	lsrs	r7, r7, #8
    mask = 0x01;
   1932e:	2201      	movs	r2, #1
    for (i = 0; i < BLE_HW_WHITE_LIST_SIZE; ++i) {
   19330:	2300      	movs	r3, #0
   19332:	e002      	b.n	1933a <ble_hw_whitelist_rmv+0x26>
                    if (cfg_addr != 0) {
   19334:	b9d1      	cbnz	r1, 1936c <ble_hw_whitelist_rmv+0x58>
        mask <<= 1;
   19336:	0052      	lsls	r2, r2, #1
    for (i = 0; i < BLE_HW_WHITE_LIST_SIZE; ++i) {
   19338:	3301      	adds	r3, #1
   1933a:	2b07      	cmp	r3, #7
   1933c:	dc16      	bgt.n	1936c <ble_hw_whitelist_rmv+0x58>
        if (mask & g_ble_hw_whitelist_mask) {
   1933e:	4914      	ldr	r1, [pc, #80]	; (19390 <ble_hw_whitelist_rmv+0x7c>)
   19340:	7809      	ldrb	r1, [r1, #0]
   19342:	4211      	tst	r1, r2
   19344:	d0f7      	beq.n	19336 <ble_hw_whitelist_rmv+0x22>
            if ((dab == NRF_RADIO->DAB[i]) && (dap == NRF_RADIO->DAP[i])) {
   19346:	f503 71c0 	add.w	r1, r3, #384	; 0x180
   1934a:	4e10      	ldr	r6, [pc, #64]	; (1938c <ble_hw_whitelist_rmv+0x78>)
   1934c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
   19350:	42a1      	cmp	r1, r4
   19352:	d1f0      	bne.n	19336 <ble_hw_whitelist_rmv+0x22>
   19354:	f503 71c4 	add.w	r1, r3, #392	; 0x188
   19358:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
   1935c:	4288      	cmp	r0, r1
   1935e:	d1ea      	bne.n	19336 <ble_hw_whitelist_rmv+0x22>
                cfg_addr = txadd & mask;
   19360:	b2d1      	uxtb	r1, r2
   19362:	4039      	ands	r1, r7
                if (addr_type == BLE_ADDR_RANDOM) {
   19364:	2d01      	cmp	r5, #1
   19366:	d0e5      	beq.n	19334 <ble_hw_whitelist_rmv+0x20>
                    if (cfg_addr == 0) {
   19368:	2900      	cmp	r1, #0
   1936a:	d1e4      	bne.n	19336 <ble_hw_whitelist_rmv+0x22>
    if (i < BLE_HW_WHITE_LIST_SIZE) {
   1936c:	2b07      	cmp	r3, #7
   1936e:	dc0b      	bgt.n	19388 <ble_hw_whitelist_rmv+0x74>
        g_ble_hw_whitelist_mask &= ~mask;
   19370:	4907      	ldr	r1, [pc, #28]	; (19390 <ble_hw_whitelist_rmv+0x7c>)
   19372:	780b      	ldrb	r3, [r1, #0]
   19374:	ea23 0302 	bic.w	r3, r3, r2
   19378:	700b      	strb	r3, [r1, #0]
        NRF_RADIO->DACNF &= ~mask;
   1937a:	4904      	ldr	r1, [pc, #16]	; (1938c <ble_hw_whitelist_rmv+0x78>)
   1937c:	f8d1 3640 	ldr.w	r3, [r1, #1600]	; 0x640
   19380:	ea23 0202 	bic.w	r2, r3, r2
   19384:	f8c1 2640 	str.w	r2, [r1, #1600]	; 0x640
}
   19388:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1938a:	bf00      	nop
   1938c:	40001000 	.word	0x40001000
   19390:	200027d4 	.word	0x200027d4

00019394 <ble_hw_whitelist_enable>:
    NRF_RADIO->DACNF |= g_ble_hw_whitelist_mask;
   19394:	4a04      	ldr	r2, [pc, #16]	; (193a8 <ble_hw_whitelist_enable+0x14>)
   19396:	f8d2 1640 	ldr.w	r1, [r2, #1600]	; 0x640
   1939a:	4b04      	ldr	r3, [pc, #16]	; (193ac <ble_hw_whitelist_enable+0x18>)
   1939c:	781b      	ldrb	r3, [r3, #0]
   1939e:	430b      	orrs	r3, r1
   193a0:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
}
   193a4:	4770      	bx	lr
   193a6:	bf00      	nop
   193a8:	40001000 	.word	0x40001000
   193ac:	200027d4 	.word	0x200027d4

000193b0 <ble_hw_whitelist_disable>:
    NRF_RADIO->DACNF &= 0x0000ff00;
   193b0:	4a03      	ldr	r2, [pc, #12]	; (193c0 <ble_hw_whitelist_disable+0x10>)
   193b2:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
   193b6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   193ba:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
}
   193be:	4770      	bx	lr
   193c0:	40001000 	.word	0x40001000

000193c4 <ble_hw_whitelist_match>:
    return (int)NRF_RADIO->EVENTS_DEVMATCH;
   193c4:	4b01      	ldr	r3, [pc, #4]	; (193cc <ble_hw_whitelist_match+0x8>)
   193c6:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
   193ca:	4770      	bx	lr
   193cc:	40001000 	.word	0x40001000

000193d0 <ble_hw_encrypt_block>:
    NRF_ECB->TASKS_STOPECB = 1;
   193d0:	4b0c      	ldr	r3, [pc, #48]	; (19404 <ble_hw_encrypt_block+0x34>)
   193d2:	2201      	movs	r2, #1
   193d4:	605a      	str	r2, [r3, #4]
    NRF_ECB->EVENTS_ENDECB = 0;
   193d6:	2100      	movs	r1, #0
   193d8:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    NRF_ECB->EVENTS_ERRORECB = 0;
   193dc:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
    NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
   193e0:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    NRF_ECB->TASKS_STARTECB = 1;
   193e4:	601a      	str	r2, [r3, #0]
        end = NRF_ECB->EVENTS_ENDECB;
   193e6:	4b07      	ldr	r3, [pc, #28]	; (19404 <ble_hw_encrypt_block+0x34>)
   193e8:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
        err = NRF_ECB->EVENTS_ERRORECB;
   193ec:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
        if (end || err) {
   193f0:	b90a      	cbnz	r2, 193f6 <ble_hw_encrypt_block+0x26>
   193f2:	2b00      	cmp	r3, #0
   193f4:	d0f7      	beq.n	193e6 <ble_hw_encrypt_block+0x16>
            if (err) {
   193f6:	b90b      	cbnz	r3, 193fc <ble_hw_encrypt_block+0x2c>
    rc = 0;
   193f8:	2000      	movs	r0, #0
   193fa:	4770      	bx	lr
                rc = -1;
   193fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   19400:	4770      	bx	lr
   19402:	bf00      	nop
   19404:	4000e000 	.word	0x4000e000

00019408 <ble_hw_rng_init>:
 */
int
ble_hw_rng_init(ble_rng_isr_cb_t cb, int bias)
{
    /* Set bias */
    if (bias) {
   19408:	b199      	cbz	r1, 19432 <ble_hw_rng_init+0x2a>
        NRF_RNG->CONFIG = 1;
   1940a:	4b0c      	ldr	r3, [pc, #48]	; (1943c <ble_hw_rng_init+0x34>)
   1940c:	2201      	movs	r2, #1
   1940e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    } else {
        NRF_RNG->CONFIG = 0;
    }

    /* If we were passed a function pointer we need to enable the interrupt */
    if (cb != NULL) {
   19412:	b160      	cbz	r0, 1942e <ble_hw_rng_init+0x26>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   19414:	4b0a      	ldr	r3, [pc, #40]	; (19440 <ble_hw_rng_init+0x38>)
   19416:	22e0      	movs	r2, #224	; 0xe0
   19418:	f883 230d 	strb.w	r2, [r3, #781]	; 0x30d
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1941c:	4a09      	ldr	r2, [pc, #36]	; (19444 <ble_hw_rng_init+0x3c>)
   1941e:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   19420:	4909      	ldr	r1, [pc, #36]	; (19448 <ble_hw_rng_init+0x40>)
   19422:	6751      	str	r1, [r2, #116]	; 0x74
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   19424:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   19428:	601a      	str	r2, [r3, #0]
        NVIC_SetVector(RNG_IRQn, (uint32_t)ble_rng_isr);
#else
        ble_npl_hw_set_isr(RNG_IRQn, ble_rng_isr);
#endif
        NVIC_EnableIRQ(RNG_IRQn);
        g_ble_rng_isr_cb = cb;
   1942a:	4b08      	ldr	r3, [pc, #32]	; (1944c <ble_hw_rng_init+0x44>)
   1942c:	6018      	str	r0, [r3, #0]
    }

    return 0;
}
   1942e:	2000      	movs	r0, #0
   19430:	4770      	bx	lr
        NRF_RNG->CONFIG = 0;
   19432:	4b02      	ldr	r3, [pc, #8]	; (1943c <ble_hw_rng_init+0x34>)
   19434:	2200      	movs	r2, #0
   19436:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   1943a:	e7ea      	b.n	19412 <ble_hw_rng_init+0xa>
   1943c:	4000d000 	.word	0x4000d000
   19440:	e000e100 	.word	0xe000e100
   19444:	e000ed00 	.word	0xe000ed00
   19448:	00019225 	.word	0x00019225
   1944c:	200042f8 	.word	0x200042f8

00019450 <ble_hw_rng_start>:
 *
 * @return int
 */
int
ble_hw_rng_start(void)
{
   19450:	b508      	push	{r3, lr}
    os_sr_t sr;

    /* No need for interrupt if there is no callback */
    OS_ENTER_CRITICAL(sr);
   19452:	f7f4 f9d1 	bl	d7f8 <os_arch_save_sr>
    NRF_RNG->EVENTS_VALRDY = 0;
   19456:	4b09      	ldr	r3, [pc, #36]	; (1947c <ble_hw_rng_start+0x2c>)
   19458:	2200      	movs	r2, #0
   1945a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    if (g_ble_rng_isr_cb) {
   1945e:	4b08      	ldr	r3, [pc, #32]	; (19480 <ble_hw_rng_start+0x30>)
   19460:	681b      	ldr	r3, [r3, #0]
   19462:	b11b      	cbz	r3, 1946c <ble_hw_rng_start+0x1c>
        NRF_RNG->INTENSET = 1;
   19464:	4b05      	ldr	r3, [pc, #20]	; (1947c <ble_hw_rng_start+0x2c>)
   19466:	2201      	movs	r2, #1
   19468:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    }
    NRF_RNG->TASKS_START = 1;
   1946c:	4b03      	ldr	r3, [pc, #12]	; (1947c <ble_hw_rng_start+0x2c>)
   1946e:	2201      	movs	r2, #1
   19470:	601a      	str	r2, [r3, #0]
    OS_EXIT_CRITICAL(sr);
   19472:	f7f4 f9c7 	bl	d804 <os_arch_restore_sr>

    return 0;
}
   19476:	2000      	movs	r0, #0
   19478:	bd08      	pop	{r3, pc}
   1947a:	bf00      	nop
   1947c:	4000d000 	.word	0x4000d000
   19480:	200042f8 	.word	0x200042f8

00019484 <ble_hw_rng_stop>:
 *
 * @return int
 */
int
ble_hw_rng_stop(void)
{
   19484:	b510      	push	{r4, lr}
    os_sr_t sr;

    /* No need for interrupt if there is no callback */
    OS_ENTER_CRITICAL(sr);
   19486:	f7f4 f9b7 	bl	d7f8 <os_arch_save_sr>
    NRF_RNG->INTENCLR = 1;
   1948a:	4b06      	ldr	r3, [pc, #24]	; (194a4 <ble_hw_rng_stop+0x20>)
   1948c:	2201      	movs	r2, #1
   1948e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    NRF_RNG->TASKS_STOP = 1;
   19492:	605a      	str	r2, [r3, #4]
    NRF_RNG->EVENTS_VALRDY = 0;
   19494:	2400      	movs	r4, #0
   19496:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
    OS_EXIT_CRITICAL(sr);
   1949a:	f7f4 f9b3 	bl	d804 <os_arch_restore_sr>

    return 0;
}
   1949e:	4620      	mov	r0, r4
   194a0:	bd10      	pop	{r4, pc}
   194a2:	bf00      	nop
   194a4:	4000d000 	.word	0x4000d000

000194a8 <ble_hw_resolv_list_clear>:
 * @return int
 */
void
ble_hw_resolv_list_clear(void)
{
    g_nrf_num_irks = 0;
   194a8:	4b01      	ldr	r3, [pc, #4]	; (194b0 <ble_hw_resolv_list_clear+0x8>)
   194aa:	2200      	movs	r2, #0
   194ac:	701a      	strb	r2, [r3, #0]
}
   194ae:	4770      	bx	lr
   194b0:	200042b4 	.word	0x200042b4

000194b4 <ble_hw_resolv_list_add>:
ble_hw_resolv_list_add(uint8_t *irk)
{
    uint32_t *nrf_entry;

    /* Find first ununsed device address match element */
    if (g_nrf_num_irks == NRF_IRK_LIST_ENTRIES) {
   194b4:	4b0b      	ldr	r3, [pc, #44]	; (194e4 <ble_hw_resolv_list_add+0x30>)
   194b6:	781b      	ldrb	r3, [r3, #0]
   194b8:	2b04      	cmp	r3, #4
   194ba:	d011      	beq.n	194e0 <ble_hw_resolv_list_add+0x2c>
{
   194bc:	b4f0      	push	{r4, r5, r6, r7}
        return BLE_ERR_MEM_CAPACITY;
    }

    /* Copy into irk list */
    nrf_entry = &g_nrf_irk_list[4 * g_nrf_num_irks];
   194be:	011c      	lsls	r4, r3, #4
   194c0:	4909      	ldr	r1, [pc, #36]	; (194e8 <ble_hw_resolv_list_add+0x34>)
   194c2:	1862      	adds	r2, r4, r1
    memcpy(nrf_entry, irk, 16);
   194c4:	6807      	ldr	r7, [r0, #0]
   194c6:	6846      	ldr	r6, [r0, #4]
   194c8:	6885      	ldr	r5, [r0, #8]
   194ca:	68c0      	ldr	r0, [r0, #12]
   194cc:	5067      	str	r7, [r4, r1]
   194ce:	6056      	str	r6, [r2, #4]
   194d0:	6095      	str	r5, [r2, #8]
   194d2:	60d0      	str	r0, [r2, #12]

    /* Add to total */
    ++g_nrf_num_irks;
   194d4:	3301      	adds	r3, #1
   194d6:	4a03      	ldr	r2, [pc, #12]	; (194e4 <ble_hw_resolv_list_add+0x30>)
   194d8:	7013      	strb	r3, [r2, #0]
    return BLE_ERR_SUCCESS;
   194da:	2000      	movs	r0, #0
}
   194dc:	bcf0      	pop	{r4, r5, r6, r7}
   194de:	4770      	bx	lr
        return BLE_ERR_MEM_CAPACITY;
   194e0:	2007      	movs	r0, #7
}
   194e2:	4770      	bx	lr
   194e4:	200042b4 	.word	0x200042b4
   194e8:	200042b8 	.word	0x200042b8

000194ec <ble_hw_resolv_list_rmv>:
void
ble_hw_resolv_list_rmv(int index)
{
    uint32_t *irk_entry;

    if (index < g_nrf_num_irks) {
   194ec:	4b0b      	ldr	r3, [pc, #44]	; (1951c <ble_hw_resolv_list_rmv+0x30>)
   194ee:	781b      	ldrb	r3, [r3, #0]
   194f0:	4283      	cmp	r3, r0
   194f2:	dd12      	ble.n	1951a <ble_hw_resolv_list_rmv+0x2e>
{
   194f4:	b510      	push	{r4, lr}
        --g_nrf_num_irks;
   194f6:	3b01      	subs	r3, #1
   194f8:	b2db      	uxtb	r3, r3
   194fa:	4a08      	ldr	r2, [pc, #32]	; (1951c <ble_hw_resolv_list_rmv+0x30>)
   194fc:	7013      	strb	r3, [r2, #0]
        irk_entry = &g_nrf_irk_list[index];
   194fe:	4c08      	ldr	r4, [pc, #32]	; (19520 <ble_hw_resolv_list_rmv+0x34>)
   19500:	eb04 0480 	add.w	r4, r4, r0, lsl #2
        if (g_nrf_num_irks > index) {
   19504:	4283      	cmp	r3, r0
   19506:	dc00      	bgt.n	1950a <ble_hw_resolv_list_rmv+0x1e>
            memmove(irk_entry, irk_entry + 4, 16 * (g_nrf_num_irks - index));
        }
    }
}
   19508:	bd10      	pop	{r4, pc}
            memmove(irk_entry, irk_entry + 4, 16 * (g_nrf_num_irks - index));
   1950a:	1a1a      	subs	r2, r3, r0
   1950c:	0112      	lsls	r2, r2, #4
   1950e:	f104 0110 	add.w	r1, r4, #16
   19512:	4620      	mov	r0, r4
   19514:	f7f4 ffb9 	bl	e48a <memmove>
}
   19518:	e7f6      	b.n	19508 <ble_hw_resolv_list_rmv+0x1c>
   1951a:	4770      	bx	lr
   1951c:	200042b4 	.word	0x200042b4
   19520:	200042b8 	.word	0x200042b8

00019524 <ble_hw_resolv_list_size>:
 */
uint8_t
ble_hw_resolv_list_size(void)
{
    return BLE_HW_RESOLV_LIST_SIZE;
}
   19524:	2010      	movs	r0, #16
   19526:	4770      	bx	lr

00019528 <ble_hw_resolv_list_match>:
int
ble_hw_resolv_list_match(void)
{
    uint32_t index;

    if (NRF_AAR->EVENTS_END) {
   19528:	4b08      	ldr	r3, [pc, #32]	; (1954c <ble_hw_resolv_list_match+0x24>)
   1952a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   1952e:	b13b      	cbz	r3, 19540 <ble_hw_resolv_list_match+0x18>
        if (NRF_AAR->EVENTS_RESOLVED) {
   19530:	4b06      	ldr	r3, [pc, #24]	; (1954c <ble_hw_resolv_list_match+0x24>)
   19532:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   19536:	b133      	cbz	r3, 19546 <ble_hw_resolv_list_match+0x1e>
            index = NRF_AAR->STATUS;
   19538:	4b04      	ldr	r3, [pc, #16]	; (1954c <ble_hw_resolv_list_match+0x24>)
   1953a:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
            return (int)index;
   1953e:	4770      	bx	lr
        }
    }

    return -1;
   19540:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19544:	4770      	bx	lr
   19546:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1954a:	4770      	bx	lr
   1954c:	4000f000 	.word	0x4000f000

00019550 <ble_phy_apply_errata_102_106_107>:
{
    /* [102] RADIO: PAYLOAD/END events delayed or not triggered after ADDRESS
     * [106] RADIO: Higher CRC error rates for some access addresses
     * [107] RADIO: Immediate address match for access addresses containing MSBs 0x00
     */
    *(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   19550:	4a04      	ldr	r2, [pc, #16]	; (19564 <ble_phy_apply_errata_102_106_107+0x14>)
   19552:	6813      	ldr	r3, [r2, #0]
                         0xfffffffe) | 0x01000000;
   19554:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   19558:	f023 0301 	bic.w	r3, r3, #1
   1955c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    *(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   19560:	6013      	str	r3, [r2, #0]
}
   19562:	4770      	bx	lr
   19564:	40001774 	.word	0x40001774

00019568 <nrf_wait_disabled>:
static void
nrf_wait_disabled(void)
{
    uint32_t state;

    state = NRF_RADIO->STATE;
   19568:	4b06      	ldr	r3, [pc, #24]	; (19584 <nrf_wait_disabled+0x1c>)
   1956a:	f8d3 3550 	ldr.w	r3, [r3, #1360]	; 0x550
    if (state != RADIO_STATE_STATE_Disabled) {
   1956e:	b143      	cbz	r3, 19582 <nrf_wait_disabled+0x1a>
        if ((state == RADIO_STATE_STATE_RxDisable) ||
   19570:	2b04      	cmp	r3, #4
   19572:	d001      	beq.n	19578 <nrf_wait_disabled+0x10>
   19574:	2b0c      	cmp	r3, #12
   19576:	d104      	bne.n	19582 <nrf_wait_disabled+0x1a>
            (state == RADIO_STATE_STATE_TxDisable)) {
            /* This will end within a short time (6 usecs). Just poll */
            while (NRF_RADIO->STATE == state) {
   19578:	4a02      	ldr	r2, [pc, #8]	; (19584 <nrf_wait_disabled+0x1c>)
   1957a:	f8d2 2550 	ldr.w	r2, [r2, #1360]	; 0x550
   1957e:	429a      	cmp	r2, r3
   19580:	d0fa      	beq.n	19578 <nrf_wait_disabled+0x10>
                /* If this fails, something is really wrong. Should last
                 * no more than 6 usecs */
            }
        }
    }
}
   19582:	4770      	bx	lr
   19584:	40001000 	.word	0x40001000

00019588 <ble_phy_set_start_time>:
 *
 *
 */
static int
ble_phy_set_start_time(uint32_t cputime, uint8_t rem_usecs, bool tx)
{
   19588:	b430      	push	{r4, r5}
     * Radio ramp-up time is 40 usecs and TX delay is 3 or 5 usecs depending on
     * phy, thus we'll offset RTC by 2 full ticks (61 usecs) and then compensate
     * using TIMER0 with 1 usec precision.
     */

    cputime -= 2;
   1958a:	1e84      	subs	r4, r0, #2
    rem_usecs += 61;
    if (tx) {
   1958c:	2a00      	cmp	r2, #0
   1958e:	d03d      	beq.n	1960c <ble_phy_set_start_time+0x84>
        rem_usecs -= BLE_PHY_T_TXENFAST;
   19590:	3115      	adds	r1, #21
   19592:	b2c9      	uxtb	r1, r1
        rem_usecs -= g_ble_phy_t_txdelay[g_ble_phy_data.phy_cur_phy_mode];
   19594:	4b23      	ldr	r3, [pc, #140]	; (19624 <ble_phy_set_start_time+0x9c>)
   19596:	7a9b      	ldrb	r3, [r3, #10]
   19598:	4a23      	ldr	r2, [pc, #140]	; (19628 <ble_phy_set_start_time+0xa0>)
   1959a:	5cd3      	ldrb	r3, [r2, r3]
   1959c:	1ac9      	subs	r1, r1, r3
   1959e:	b2c9      	uxtb	r1, r1
     * tick then we should better count one more low-power tick rather than
     * 30 high-power usecs. Also make sure we don't set TIMER0 CC to 0 as the
     * compare won't occur.
     */

    if (rem_usecs > 30) {
   195a0:	291e      	cmp	r1, #30
   195a2:	d902      	bls.n	195aa <ble_phy_set_start_time+0x22>
        cputime++;
   195a4:	1e44      	subs	r4, r0, #1
        rem_usecs -= 30;
   195a6:	391e      	subs	r1, #30
   195a8:	b2c9      	uxtb	r1, r1
     *      counter.
     *
     * NOTE: since the counter can tick 1 while we do these calculations we
     * need to account for it.
     */
    next_cc = cputime & 0xffffff;
   195aa:	f024 457f 	bic.w	r5, r4, #4278190080	; 0xff000000
    cur_cc = NRF_RTC0->CC[0];
   195ae:	4a1f      	ldr	r2, [pc, #124]	; (1962c <ble_phy_set_start_time+0xa4>)
   195b0:	f8d2 3540 	ldr.w	r3, [r2, #1344]	; 0x540
    cntr = NRF_RTC0->COUNTER;
   195b4:	f8d2 2504 	ldr.w	r2, [r2, #1284]	; 0x504

    delta = (cur_cc - cntr) & 0xffffff;
   195b8:	1a9b      	subs	r3, r3, r2
   195ba:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    if ((delta <= 3) && (delta != 0)) {
   195be:	3b01      	subs	r3, #1
   195c0:	2b02      	cmp	r3, #2
   195c2:	d926      	bls.n	19612 <ble_phy_set_start_time+0x8a>
        return -1;
    }
    delta = (next_cc - cntr) & 0xffffff;
   195c4:	1aaa      	subs	r2, r5, r2
   195c6:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
    if ((delta & 0x800000) || (delta < 3)) {
   195ca:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
   195ce:	d123      	bne.n	19618 <ble_phy_set_start_time+0x90>
   195d0:	2b02      	cmp	r3, #2
   195d2:	d924      	bls.n	1961e <ble_phy_set_start_time+0x96>
        return -1;
    }

    /* Clear and set TIMER0 to fire off at proper time */
    NRF_TIMER0->TASKS_CLEAR = 1;
   195d4:	4b16      	ldr	r3, [pc, #88]	; (19630 <ble_phy_set_start_time+0xa8>)
   195d6:	2201      	movs	r2, #1
   195d8:	60da      	str	r2, [r3, #12]
    NRF_TIMER0->CC[0] = rem_usecs;
   195da:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    NRF_TIMER0->EVENTS_COMPARE[0] = 0;
   195de:	2000      	movs	r0, #0
   195e0:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140

    /* Set RTC compare to start TIMER0 */
    NRF_RTC0->EVENTS_COMPARE[0] = 0;
   195e4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
   195e8:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
    NRF_RTC0->CC[0] = next_cc;
   195ec:	f8c3 5540 	str.w	r5, [r3, #1344]	; 0x540
    NRF_RTC0->EVTENSET = RTC_EVTENSET_COMPARE0_Msk;
   195f0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   195f4:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344

    /* Enable PPI */
    NRF_PPI->CHENSET = PPI_CHEN_CH31_Msk;
   195f8:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
   195fc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   19600:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504

    /* Store the cputime at which we set the RTC */
    g_ble_phy_data.phy_start_cputime = cputime;
   19604:	4b07      	ldr	r3, [pc, #28]	; (19624 <ble_phy_set_start_time+0x9c>)
   19606:	631c      	str	r4, [r3, #48]	; 0x30

    return 0;
}
   19608:	bc30      	pop	{r4, r5}
   1960a:	4770      	bx	lr
        rem_usecs -= BLE_PHY_T_RXENFAST;
   1960c:	3115      	adds	r1, #21
   1960e:	b2c9      	uxtb	r1, r1
   19610:	e7c6      	b.n	195a0 <ble_phy_set_start_time+0x18>
        return -1;
   19612:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19616:	e7f7      	b.n	19608 <ble_phy_set_start_time+0x80>
        return -1;
   19618:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1961c:	e7f4      	b.n	19608 <ble_phy_set_start_time+0x80>
   1961e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19622:	e7f1      	b.n	19608 <ble_phy_set_start_time+0x80>
   19624:	200042fc 	.word	0x200042fc
   19628:	0002b048 	.word	0x0002b048
   1962c:	4000b000 	.word	0x4000b000
   19630:	40008000 	.word	0x40008000

00019634 <ble_phy_get_ccm_datarate>:
    assert(0);
    return 0;
#else
    return CCM_MODE_DATARATE_1Mbit << CCM_MODE_DATARATE_Pos;
#endif
}
   19634:	2000      	movs	r0, #0
   19636:	4770      	bx	lr

00019638 <ble_phy_rx_xcvr_setup>:
/**
 * Setup transceiver for receive.
 */
static void
ble_phy_rx_xcvr_setup(void)
{
   19638:	b510      	push	{r4, lr}

    dptr = (uint8_t *)&g_ble_phy_rx_buf[0];
    dptr += 3;

#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LE_ENCRYPTION)
    if (g_ble_phy_data.phy_encrypted) {
   1963a:	4b35      	ldr	r3, [pc, #212]	; (19710 <ble_phy_rx_xcvr_setup+0xd8>)
   1963c:	79db      	ldrb	r3, [r3, #7]
   1963e:	b383      	cbz	r3, 196a2 <ble_phy_rx_xcvr_setup+0x6a>
        NRF_RADIO->PACKETPTR = (uint32_t)&g_ble_phy_enc_buf[0];
   19640:	4b34      	ldr	r3, [pc, #208]	; (19714 <ble_phy_rx_xcvr_setup+0xdc>)
   19642:	4a35      	ldr	r2, [pc, #212]	; (19718 <ble_phy_rx_xcvr_setup+0xe0>)
   19644:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
        NRF_CCM->INPTR = (uint32_t)&g_ble_phy_enc_buf[0];
   19648:	4c34      	ldr	r4, [pc, #208]	; (1971c <ble_phy_rx_xcvr_setup+0xe4>)
   1964a:	f8c4 350c 	str.w	r3, [r4, #1292]	; 0x50c
        NRF_CCM->OUTPTR = (uint32_t)dptr;
   1964e:	4b34      	ldr	r3, [pc, #208]	; (19720 <ble_phy_rx_xcvr_setup+0xe8>)
   19650:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
        NRF_CCM->SCRATCHPTR = (uint32_t)&g_nrf_encrypt_scratchpad[0];
   19654:	4b33      	ldr	r3, [pc, #204]	; (19724 <ble_phy_rx_xcvr_setup+0xec>)
   19656:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
        NRF_CCM->MODE = CCM_MODE_LENGTH_Msk | CCM_MODE_MODE_Decryption |
                                                    ble_phy_get_ccm_datarate();
   1965a:	f7ff ffeb 	bl	19634 <ble_phy_get_ccm_datarate>
        NRF_CCM->MODE = CCM_MODE_LENGTH_Msk | CCM_MODE_MODE_Decryption |
   1965e:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
   19662:	f040 0001 	orr.w	r0, r0, #1
   19666:	f8c4 0504 	str.w	r0, [r4, #1284]	; 0x504
        NRF_CCM->CNFPTR = (uint32_t)&g_nrf_ccm_data;
   1966a:	4b2f      	ldr	r3, [pc, #188]	; (19728 <ble_phy_rx_xcvr_setup+0xf0>)
   1966c:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
        NRF_CCM->SHORTS = 0;
   19670:	2300      	movs	r3, #0
   19672:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        NRF_CCM->EVENTS_ERROR = 0;
   19676:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
        NRF_CCM->EVENTS_ENDCRYPT = 0;
   1967a:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
        NRF_CCM->TASKS_KSGEN = 1;
   1967e:	2301      	movs	r3, #1
   19680:	6023      	str	r3, [r4, #0]
        NRF_PPI->CHENSET = PPI_CHEN_CH25_Msk;
   19682:	4b2a      	ldr	r3, [pc, #168]	; (1972c <ble_phy_rx_xcvr_setup+0xf4>)
   19684:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   19688:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
#else
    NRF_RADIO->PACKETPTR = (uint32_t)dptr;
#endif

#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LL_PRIVACY)
    if (g_ble_phy_data.phy_privacy) {
   1968c:	4b20      	ldr	r3, [pc, #128]	; (19710 <ble_phy_rx_xcvr_setup+0xd8>)
   1968e:	7a1b      	ldrb	r3, [r3, #8]
   19690:	b963      	cbnz	r3, 196ac <ble_phy_rx_xcvr_setup+0x74>
        NRF_AAR->SCRATCHPTR = (uint32_t)&g_ble_phy_data.phy_aar_scratch;
        NRF_AAR->EVENTS_END = 0;
        NRF_AAR->EVENTS_RESOLVED = 0;
        NRF_AAR->EVENTS_NOTRESOLVED = 0;
    } else {
        if (g_ble_phy_data.phy_encrypted == 0) {
   19692:	4b1f      	ldr	r3, [pc, #124]	; (19710 <ble_phy_rx_xcvr_setup+0xd8>)
   19694:	79db      	ldrb	r3, [r3, #7]
   19696:	b9d3      	cbnz	r3, 196ce <ble_phy_rx_xcvr_setup+0x96>
            NRF_AAR->ENABLE = AAR_ENABLE_ENABLE_Disabled;
   19698:	4b20      	ldr	r3, [pc, #128]	; (1971c <ble_phy_rx_xcvr_setup+0xe4>)
   1969a:	2200      	movs	r2, #0
   1969c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
   196a0:	e015      	b.n	196ce <ble_phy_rx_xcvr_setup+0x96>
        NRF_RADIO->PACKETPTR = (uint32_t)dptr;
   196a2:	4a1f      	ldr	r2, [pc, #124]	; (19720 <ble_phy_rx_xcvr_setup+0xe8>)
   196a4:	4b1c      	ldr	r3, [pc, #112]	; (19718 <ble_phy_rx_xcvr_setup+0xe0>)
   196a6:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   196aa:	e7ef      	b.n	1968c <ble_phy_rx_xcvr_setup+0x54>
        NRF_AAR->ENABLE = AAR_ENABLE_ENABLE_Enabled;
   196ac:	4b1b      	ldr	r3, [pc, #108]	; (1971c <ble_phy_rx_xcvr_setup+0xe4>)
   196ae:	2203      	movs	r2, #3
   196b0:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
        NRF_AAR->IRKPTR = (uint32_t)&g_nrf_irk_list[0];
   196b4:	4a1e      	ldr	r2, [pc, #120]	; (19730 <ble_phy_rx_xcvr_setup+0xf8>)
   196b6:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
        NRF_AAR->SCRATCHPTR = (uint32_t)&g_ble_phy_data.phy_aar_scratch;
   196ba:	4a1e      	ldr	r2, [pc, #120]	; (19734 <ble_phy_rx_xcvr_setup+0xfc>)
   196bc:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
        NRF_AAR->EVENTS_END = 0;
   196c0:	2200      	movs	r2, #0
   196c2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        NRF_AAR->EVENTS_RESOLVED = 0;
   196c6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
        NRF_AAR->EVENTS_NOTRESOLVED = 0;
   196ca:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
        }
    }
#endif

    /* Turn off trigger TXEN on output compare match and AAR on bcmatch */
    NRF_PPI->CHENCLR = PPI_CHEN_CH20_Msk | PPI_CHEN_CH23_Msk;
   196ce:	4b17      	ldr	r3, [pc, #92]	; (1972c <ble_phy_rx_xcvr_setup+0xf4>)
   196d0:	f44f 0210 	mov.w	r2, #9437184	; 0x900000
   196d4:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508

    /* Reset the rx started flag. Used for the wait for response */
    g_ble_phy_data.phy_rx_started = 0;
   196d8:	4b0d      	ldr	r3, [pc, #52]	; (19710 <ble_phy_rx_xcvr_setup+0xd8>)
   196da:	2200      	movs	r2, #0
   196dc:	719a      	strb	r2, [r3, #6]
    g_ble_phy_data.phy_state = BLE_PHY_STATE_RX;
   196de:	2101      	movs	r1, #1
   196e0:	70d9      	strb	r1, [r3, #3]
        g_ble_phy_data.phy_bcc_offset = 5;
    } else {
        g_ble_phy_data.phy_bcc_offset = 0;
    }
#else
    g_ble_phy_data.phy_bcc_offset = 0;
   196e2:	735a      	strb	r2, [r3, #13]
#endif

    /* I want to know when 1st byte received (after address) */
    NRF_RADIO->BCC = 8 + g_ble_phy_data.phy_bcc_offset; /* in bits */
   196e4:	4b0c      	ldr	r3, [pc, #48]	; (19718 <ble_phy_rx_xcvr_setup+0xe0>)
   196e6:	2108      	movs	r1, #8
   196e8:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
    NRF_RADIO->EVENTS_ADDRESS = 0;
   196ec:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    NRF_RADIO->EVENTS_DEVMATCH = 0;
   196f0:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    NRF_RADIO->EVENTS_BCMATCH = 0;
   196f4:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    NRF_RADIO->EVENTS_RSSIEND = 0;
   196f8:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    NRF_RADIO->EVENTS_CRCOK = 0;
   196fc:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
    NRF_RADIO->SHORTS = RADIO_SHORTS_END_DISABLE_Msk |
   19700:	f240 1253 	movw	r2, #339	; 0x153
   19704:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
                        RADIO_SHORTS_READY_START_Msk |
                        RADIO_SHORTS_ADDRESS_BCSTART_Msk |
                        RADIO_SHORTS_ADDRESS_RSSISTART_Msk |
                        RADIO_SHORTS_DISABLED_RSSISTOP_Msk;

    NRF_RADIO->INTENSET = RADIO_INTENSET_ADDRESS_Msk;
   19708:	2202      	movs	r2, #2
   1970a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1970e:	bd10      	pop	{r4, pc}
   19710:	200042fc 	.word	0x200042fc
   19714:	200027d8 	.word	0x200027d8
   19718:	40001000 	.word	0x40001000
   1971c:	4000f000 	.word	0x4000f000
   19720:	200028df 	.word	0x200028df
   19724:	20004330 	.word	0x20004330
   19728:	2000447c 	.word	0x2000447c
   1972c:	4001f000 	.word	0x4001f000
   19730:	200042b8 	.word	0x200042b8
   19734:	2000430c 	.word	0x2000430c

00019738 <ble_phy_set_access_addr>:
 *
 * @return int 0: success; PHY error code otherwise
 */
static int
ble_phy_set_access_addr(uint32_t access_addr)
{
   19738:	b508      	push	{r3, lr}
    NRF_RADIO->BASE0 = (access_addr << 8);
   1973a:	0203      	lsls	r3, r0, #8
   1973c:	4a08      	ldr	r2, [pc, #32]	; (19760 <ble_phy_set_access_addr+0x28>)
   1973e:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
    NRF_RADIO->PREFIX0 = (NRF_RADIO->PREFIX0 & 0xFFFFFF00) | (access_addr >> 24);
   19742:	f8d2 3524 	ldr.w	r3, [r2, #1316]	; 0x524
   19746:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1974a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
   1974e:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524

    g_ble_phy_data.phy_access_address = access_addr;
   19752:	4b04      	ldr	r3, [pc, #16]	; (19764 <ble_phy_set_access_addr+0x2c>)
   19754:	6158      	str	r0, [r3, #20]

    ble_phy_apply_errata_102_106_107();
   19756:	f7ff fefb 	bl	19550 <ble_phy_apply_errata_102_106_107>

    return 0;
}
   1975a:	2000      	movs	r0, #0
   1975c:	bd08      	pop	{r3, pc}
   1975e:	bf00      	nop
   19760:	40001000 	.word	0x40001000
   19764:	200042fc 	.word	0x200042fc

00019768 <ble_phy_stop_usec_timer>:
 * Stop the timer used to count microseconds when using RTC for cputime
 */
static void
ble_phy_stop_usec_timer(void)
{
    NRF_TIMER0->TASKS_STOP = 1;
   19768:	4b05      	ldr	r3, [pc, #20]	; (19780 <ble_phy_stop_usec_timer+0x18>)
   1976a:	2201      	movs	r2, #1
   1976c:	605a      	str	r2, [r3, #4]
    NRF_TIMER0->TASKS_SHUTDOWN = 1;
   1976e:	611a      	str	r2, [r3, #16]
    NRF_RTC0->EVTENCLR = RTC_EVTENSET_COMPARE0_Msk;
   19770:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
   19774:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   19778:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
}
   1977c:	4770      	bx	lr
   1977e:	bf00      	nop
   19780:	40008000 	.word	0x40008000

00019784 <ble_phy_disable_irq_and_ppi>:
 * the phy.
 */
static void
ble_phy_disable_irq_and_ppi(void)
{
    NRF_RADIO->INTENCLR = NRF_RADIO_IRQ_MASK_ALL;
   19784:	4b0a      	ldr	r3, [pc, #40]	; (197b0 <ble_phy_disable_irq_and_ppi+0x2c>)
   19786:	f243 42ff 	movw	r2, #13567	; 0x34ff
   1978a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    NRF_RADIO->SHORTS = 0;
   1978e:	2200      	movs	r2, #0
   19790:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    NRF_RADIO->TASKS_DISABLE = 1;
   19794:	2101      	movs	r1, #1
   19796:	6119      	str	r1, [r3, #16]
    NRF_PPI->CHENCLR = PPI_CHEN_CH4_Msk | PPI_CHEN_CH5_Msk | PPI_CHEN_CH20_Msk |
   19798:	f503 33f0 	add.w	r3, r3, #122880	; 0x1e000
   1979c:	4905      	ldr	r1, [pc, #20]	; (197b4 <ble_phy_disable_irq_and_ppi+0x30>)
   1979e:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   197a2:	4b05      	ldr	r3, [pc, #20]	; (197b8 <ble_phy_disable_irq_and_ppi+0x34>)
   197a4:	2102      	movs	r1, #2
   197a6:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
          PPI_CHEN_CH21_Msk | PPI_CHEN_CH23_Msk |
          PPI_CHEN_CH25_Msk | PPI_CHEN_CH31_Msk;
    NVIC_ClearPendingIRQ(RADIO_IRQn);
    g_ble_phy_data.phy_state = BLE_PHY_STATE_IDLE;
   197aa:	4b04      	ldr	r3, [pc, #16]	; (197bc <ble_phy_disable_irq_and_ppi+0x38>)
   197ac:	70da      	strb	r2, [r3, #3]
}
   197ae:	4770      	bx	lr
   197b0:	40001000 	.word	0x40001000
   197b4:	82b00030 	.word	0x82b00030
   197b8:	e000e100 	.word	0xe000e100
   197bc:	200042fc 	.word	0x200042fc

000197c0 <ble_phy_set_start_now>:
{
   197c0:	b538      	push	{r3, r4, r5, lr}
    OS_ENTER_CRITICAL(sr);
   197c2:	f7f4 f819 	bl	d7f8 <os_arch_save_sr>
   197c6:	4605      	mov	r5, r0
    NRF_TIMER0->TASKS_CLEAR = 1;
   197c8:	4b10      	ldr	r3, [pc, #64]	; (1980c <ble_phy_set_start_now+0x4c>)
   197ca:	2201      	movs	r2, #1
   197cc:	60da      	str	r2, [r3, #12]
    NRF_TIMER0->CC[0] = 1;
   197ce:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    NRF_TIMER0->EVENTS_COMPARE[0] = 0;
   197d2:	2400      	movs	r4, #0
   197d4:	f8c3 4140 	str.w	r4, [r3, #320]	; 0x140
    now = os_cputime_get32();
   197d8:	f010 f879 	bl	298ce <os_cputime_get32>
    NRF_RTC0->EVENTS_COMPARE[0] = 0;
   197dc:	4b0c      	ldr	r3, [pc, #48]	; (19810 <ble_phy_set_start_now+0x50>)
   197de:	f8c3 4140 	str.w	r4, [r3, #320]	; 0x140
    NRF_RTC0->CC[0] = now + 3;
   197e2:	3003      	adds	r0, #3
   197e4:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    NRF_RTC0->EVTENSET = RTC_EVTENSET_COMPARE0_Msk;
   197e8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   197ec:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
    NRF_PPI->CHENSET = PPI_CHEN_CH31_Msk;
   197f0:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
   197f4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   197f8:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    g_ble_phy_data.phy_start_cputime = now + 3;
   197fc:	4b05      	ldr	r3, [pc, #20]	; (19814 <ble_phy_set_start_now+0x54>)
   197fe:	6318      	str	r0, [r3, #48]	; 0x30
    OS_EXIT_CRITICAL(sr);
   19800:	4628      	mov	r0, r5
   19802:	f7f3 ffff 	bl	d804 <os_arch_restore_sr>
}
   19806:	4620      	mov	r0, r4
   19808:	bd38      	pop	{r3, r4, r5, pc}
   1980a:	bf00      	nop
   1980c:	40008000 	.word	0x40008000
   19810:	4000b000 	.word	0x4000b000
   19814:	200042fc 	.word	0x200042fc

00019818 <ble_phy_get_cur_phy>:
}
   19818:	2001      	movs	r0, #1
   1981a:	4770      	bx	lr

0001981c <ble_phy_rxpdu_copy>:
{
   1981c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    assert(((uint32_t)dptr & 3) == 0);
   1981e:	f010 0f03 	tst.w	r0, #3
   19822:	d10a      	bne.n	1983a <ble_phy_rxpdu_copy+0x1e>
   19824:	460e      	mov	r6, r1
    block_len = rxpdu->om_omp->omp_databuf_len;
   19826:	688b      	ldr	r3, [r1, #8]
   19828:	f8b3 c000 	ldrh.w	ip, [r3]
    rem_len = OS_MBUF_PKTHDR(rxpdu)->omp_len;
   1982c:	8a0d      	ldrh	r5, [r1, #16]
    copy_len = block_len - rxpdu->om_pkthdr_len - 4;
   1982e:	794b      	ldrb	r3, [r1, #5]
   19830:	ebac 0303 	sub.w	r3, ip, r3
   19834:	3b04      	subs	r3, #4
    om = rxpdu;
   19836:	460f      	mov	r7, r1
   19838:	e00b      	b.n	19852 <ble_phy_rxpdu_copy+0x36>
    assert(((uint32_t)dptr & 3) == 0);
   1983a:	f7f2 fcd5 	bl	c1e8 <hal_debugger_connected>
   1983e:	b100      	cbz	r0, 19842 <ble_phy_rxpdu_copy+0x26>
   19840:	be01      	bkpt	0x0001
   19842:	2300      	movs	r3, #0
   19844:	461a      	mov	r2, r3
   19846:	4619      	mov	r1, r3
   19848:	4618      	mov	r0, r3
   1984a:	f7f2 ff07 	bl	c65c <__assert_func>
        om = SLIST_NEXT(om, om_next);
   1984e:	68ff      	ldr	r7, [r7, #12]
        copy_len = block_len;
   19850:	4663      	mov	r3, ip
        copy_len = min(copy_len, rem_len);
   19852:	462a      	mov	r2, r5
   19854:	429d      	cmp	r5, r3
   19856:	bf28      	it	cs
   19858:	461a      	movcs	r2, r3
        copy_len &= ~3;
   1985a:	f022 0203 	bic.w	r2, r2, #3
        dst = om->om_data;
   1985e:	6839      	ldr	r1, [r7, #0]
        om->om_len = copy_len;
   19860:	80fa      	strh	r2, [r7, #6]
        rem_len -= copy_len;
   19862:	1aad      	subs	r5, r5, r2
        block_rem_len -= copy_len;
   19864:	eba3 0e02 	sub.w	lr, r3, r2
        __asm__ volatile (".syntax unified              \n"
   19868:	4614      	mov	r4, r2
   1986a:	e001      	b.n	19870 <ble_phy_rxpdu_copy+0x54>
   1986c:	5883      	ldr	r3, [r0, r2]
   1986e:	508b      	str	r3, [r1, r2]
   19870:	3a04      	subs	r2, #4
   19872:	d5fb      	bpl.n	1986c <ble_phy_rxpdu_copy+0x50>
   19874:	1900      	adds	r0, r0, r4
   19876:	1909      	adds	r1, r1, r4
        if ((rem_len < 4) && (block_rem_len >= rem_len)) {
   19878:	2d03      	cmp	r5, #3
   1987a:	d8e8      	bhi.n	1984e <ble_phy_rxpdu_copy+0x32>
   1987c:	4575      	cmp	r5, lr
   1987e:	d8e6      	bhi.n	1984e <ble_phy_rxpdu_copy+0x32>
    om->om_len += rem_len;
   19880:	88fb      	ldrh	r3, [r7, #6]
   19882:	442b      	add	r3, r5
   19884:	80fb      	strh	r3, [r7, #6]
    __asm__ volatile (".syntax unified              \n"
   19886:	e001      	b.n	1988c <ble_phy_rxpdu_copy+0x70>
   19888:	5d43      	ldrb	r3, [r0, r5]
   1988a:	554b      	strb	r3, [r1, r5]
   1988c:	3d01      	subs	r5, #1
   1988e:	d5fb      	bpl.n	19888 <ble_phy_rxpdu_copy+0x6c>
    memcpy(BLE_MBUF_HDR_PTR(rxpdu), &g_ble_phy_data.rxhdr,
   19890:	4c03      	ldr	r4, [pc, #12]	; (198a0 <ble_phy_rxpdu_copy+0x84>)
   19892:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   19894:	61b0      	str	r0, [r6, #24]
   19896:	61f1      	str	r1, [r6, #28]
   19898:	6232      	str	r2, [r6, #32]
   1989a:	6273      	str	r3, [r6, #36]	; 0x24
}
   1989c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1989e:	bf00      	nop
   198a0:	20004314 	.word	0x20004314

000198a4 <ble_phy_wfr_enable>:
{
   198a4:	b410      	push	{r4}
    phy = g_ble_phy_data.phy_cur_phy_mode;
   198a6:	4b1b      	ldr	r3, [pc, #108]	; (19914 <ble_phy_wfr_enable+0x70>)
   198a8:	7a9c      	ldrb	r4, [r3, #10]
    if (txrx == BLE_PHY_WFR_ENABLE_TXRX) {
   198aa:	2801      	cmp	r0, #1
   198ac:	d029      	beq.n	19902 <ble_phy_wfr_enable+0x5e>
        end_time = NRF_TIMER0->CC[0] + BLE_PHY_T_RXENFAST + wfr_usecs;
   198ae:	4b1a      	ldr	r3, [pc, #104]	; (19918 <ble_phy_wfr_enable+0x74>)
   198b0:	f8d3 3540 	ldr.w	r3, [r3, #1344]	; 0x540
   198b4:	441a      	add	r2, r3
   198b6:	3228      	adds	r2, #40	; 0x28
    end_time += ble_phy_mode_pdu_start_off(phy);
   198b8:	3228      	adds	r2, #40	; 0x28
    end_time += g_ble_phy_t_rxaddrdelay[phy];
   198ba:	4b18      	ldr	r3, [pc, #96]	; (1991c <ble_phy_wfr_enable+0x78>)
   198bc:	5d1b      	ldrb	r3, [r3, r4]
   198be:	441a      	add	r2, r3
    NRF_TIMER0->CC[3] = end_time;
   198c0:	4b15      	ldr	r3, [pc, #84]	; (19918 <ble_phy_wfr_enable+0x74>)
   198c2:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
    NRF_TIMER0->EVENTS_COMPARE[3] = 0;
   198c6:	2200      	movs	r2, #0
   198c8:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
    NRF_PPI->CHENSET = (PPI_CHEN_CH4_Msk | PPI_CHEN_CH5_Msk);
   198cc:	4a14      	ldr	r2, [pc, #80]	; (19920 <ble_phy_wfr_enable+0x7c>)
   198ce:	2130      	movs	r1, #48	; 0x30
   198d0:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
    NRF_RADIO->INTENSET = RADIO_INTENSET_DISABLED_Msk;
   198d4:	f5a2 32f0 	sub.w	r2, r2, #122880	; 0x1e000
   198d8:	2110      	movs	r1, #16
   198da:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
    NRF_TIMER0->TASKS_CAPTURE[1] = 1;
   198de:	2201      	movs	r2, #1
   198e0:	645a      	str	r2, [r3, #68]	; 0x44
    if (NRF_TIMER0->CC[1] > NRF_TIMER0->CC[3]) {
   198e2:	f8d3 2544 	ldr.w	r2, [r3, #1348]	; 0x544
   198e6:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
   198ea:	429a      	cmp	r2, r3
   198ec:	d907      	bls.n	198fe <ble_phy_wfr_enable+0x5a>
        NRF_PPI->CHENCLR = PPI_CHEN_CH4_Msk | PPI_CHEN_CH5_Msk;
   198ee:	4b0c      	ldr	r3, [pc, #48]	; (19920 <ble_phy_wfr_enable+0x7c>)
   198f0:	2230      	movs	r2, #48	; 0x30
   198f2:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
        NRF_RADIO->TASKS_DISABLE = 1;
   198f6:	f5a3 33f0 	sub.w	r3, r3, #122880	; 0x1e000
   198fa:	2201      	movs	r2, #1
   198fc:	611a      	str	r2, [r3, #16]
}
   198fe:	bc10      	pop	{r4}
   19900:	4770      	bx	lr
        end_time = NRF_TIMER0->CC[2] + BLE_LL_IFS;
   19902:	4b05      	ldr	r3, [pc, #20]	; (19918 <ble_phy_wfr_enable+0x74>)
   19904:	f8d3 3548 	ldr.w	r3, [r3, #1352]	; 0x548
   19908:	3396      	adds	r3, #150	; 0x96
        end_time += g_ble_phy_t_txenddelay[tx_phy_mode];
   1990a:	4a06      	ldr	r2, [pc, #24]	; (19924 <ble_phy_wfr_enable+0x80>)
   1990c:	5c52      	ldrb	r2, [r2, r1]
   1990e:	441a      	add	r2, r3
        end_time += 1;
   19910:	3203      	adds	r2, #3
   19912:	e7d1      	b.n	198b8 <ble_phy_wfr_enable+0x14>
   19914:	200042fc 	.word	0x200042fc
   19918:	40008000 	.word	0x40008000
   1991c:	0002b040 	.word	0x0002b040
   19920:	4001f000 	.word	0x4001f000
   19924:	0002b04c 	.word	0x0002b04c

00019928 <ble_phy_tx_end_isr>:
{
   19928:	b510      	push	{r4, lr}
    tx_phy_mode = g_ble_phy_data.phy_cur_phy_mode;
   1992a:	4b30      	ldr	r3, [pc, #192]	; (199ec <ble_phy_tx_end_isr+0xc4>)
   1992c:	7a9c      	ldrb	r4, [r3, #10]
    was_encrypted = g_ble_phy_data.phy_encrypted;
   1992e:	79d9      	ldrb	r1, [r3, #7]
    assert(g_ble_phy_data.phy_state == BLE_PHY_STATE_TX);
   19930:	78db      	ldrb	r3, [r3, #3]
   19932:	2b02      	cmp	r3, #2
   19934:	d12c      	bne.n	19990 <ble_phy_tx_end_isr+0x68>
    NRF_RADIO->EVENTS_DISABLED = 0;
   19936:	4b2e      	ldr	r3, [pc, #184]	; (199f0 <ble_phy_tx_end_isr+0xc8>)
   19938:	2200      	movs	r2, #0
   1993a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    NRF_RADIO->INTENCLR = RADIO_INTENCLR_DISABLED_Msk;
   1993e:	2010      	movs	r0, #16
   19940:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    NRF_RADIO->EVENTS_END = 0;
   19944:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    wfr_time = NRF_RADIO->SHORTS;
   19948:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    if (was_encrypted) {
   1994c:	b159      	cbz	r1, 19966 <ble_phy_tx_end_isr+0x3e>
        if (NRF_CCM->EVENTS_ERROR) {
   1994e:	4b29      	ldr	r3, [pc, #164]	; (199f4 <ble_phy_tx_end_isr+0xcc>)
   19950:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
   19954:	b13b      	cbz	r3, 19966 <ble_phy_tx_end_isr+0x3e>
            STATS_INC(ble_phy_stats, tx_hw_err);
   19956:	4a28      	ldr	r2, [pc, #160]	; (199f8 <ble_phy_tx_end_isr+0xd0>)
   19958:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
   1995a:	3301      	adds	r3, #1
   1995c:	63d3      	str	r3, [r2, #60]	; 0x3c
            NRF_CCM->EVENTS_ERROR = 0;
   1995e:	4b25      	ldr	r3, [pc, #148]	; (199f4 <ble_phy_tx_end_isr+0xcc>)
   19960:	2200      	movs	r2, #0
   19962:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    if (g_ble_phy_data.txend_cb) {
   19966:	4b21      	ldr	r3, [pc, #132]	; (199ec <ble_phy_tx_end_isr+0xc4>)
   19968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1996a:	b113      	cbz	r3, 19972 <ble_phy_tx_end_isr+0x4a>
        g_ble_phy_data.txend_cb(g_ble_phy_data.txend_arg);
   1996c:	4a1f      	ldr	r2, [pc, #124]	; (199ec <ble_phy_tx_end_isr+0xc4>)
   1996e:	6a90      	ldr	r0, [r2, #40]	; 0x28
   19970:	4798      	blx	r3
    transition = g_ble_phy_data.phy_transition;
   19972:	4b1e      	ldr	r3, [pc, #120]	; (199ec <ble_phy_tx_end_isr+0xc4>)
   19974:	791b      	ldrb	r3, [r3, #4]
    if (transition == BLE_PHY_TRANSITION_TX_RX) {
   19976:	2b02      	cmp	r3, #2
   19978:	d014      	beq.n	199a4 <ble_phy_tx_end_isr+0x7c>
        NRF_TIMER0->TASKS_STOP = 1;
   1997a:	4a20      	ldr	r2, [pc, #128]	; (199fc <ble_phy_tx_end_isr+0xd4>)
   1997c:	2101      	movs	r1, #1
   1997e:	6051      	str	r1, [r2, #4]
        NRF_TIMER0->TASKS_SHUTDOWN = 1;
   19980:	6111      	str	r1, [r2, #16]
        NRF_PPI->CHENCLR = PPI_CHEN_CH4_Msk | PPI_CHEN_CH5_Msk |
   19982:	f502 32b8 	add.w	r2, r2, #94208	; 0x17000
   19986:	491e      	ldr	r1, [pc, #120]	; (19a00 <ble_phy_tx_end_isr+0xd8>)
   19988:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
        assert(transition == BLE_PHY_TRANSITION_NONE);
   1998c:	bb23      	cbnz	r3, 199d8 <ble_phy_tx_end_isr+0xb0>
}
   1998e:	bd10      	pop	{r4, pc}
    assert(g_ble_phy_data.phy_state == BLE_PHY_STATE_TX);
   19990:	f7f2 fc2a 	bl	c1e8 <hal_debugger_connected>
   19994:	b100      	cbz	r0, 19998 <ble_phy_tx_end_isr+0x70>
   19996:	be01      	bkpt	0x0001
   19998:	2300      	movs	r3, #0
   1999a:	461a      	mov	r2, r3
   1999c:	4619      	mov	r1, r3
   1999e:	4618      	mov	r0, r3
   199a0:	f7f2 fe5c 	bl	c65c <__assert_func>
        ble_phy_rx_xcvr_setup();
   199a4:	f7ff fe48 	bl	19638 <ble_phy_rx_xcvr_setup>
        ble_phy_wfr_enable(BLE_PHY_WFR_ENABLE_TXRX, tx_phy_mode, 0);
   199a8:	2200      	movs	r2, #0
   199aa:	4621      	mov	r1, r4
   199ac:	2001      	movs	r0, #1
   199ae:	f7ff ff79 	bl	198a4 <ble_phy_wfr_enable>
        rx_time = NRF_TIMER0->CC[2] + BLE_LL_IFS;
   199b2:	4a12      	ldr	r2, [pc, #72]	; (199fc <ble_phy_tx_end_isr+0xd4>)
   199b4:	f8d2 1548 	ldr.w	r1, [r2, #1352]	; 0x548
   199b8:	3196      	adds	r1, #150	; 0x96
        rx_time += g_ble_phy_t_txenddelay[tx_phy_mode];
   199ba:	4b12      	ldr	r3, [pc, #72]	; (19a04 <ble_phy_tx_end_isr+0xdc>)
   199bc:	5d1b      	ldrb	r3, [r3, r4]
   199be:	440b      	add	r3, r1
        rx_time -= 2;
   199c0:	3b2a      	subs	r3, #42	; 0x2a
        NRF_TIMER0->CC[0] = rx_time;
   199c2:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
        NRF_TIMER0->EVENTS_COMPARE[0] = 0;
   199c6:	2300      	movs	r3, #0
   199c8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
        NRF_PPI->CHENSET = PPI_CHEN_CH21_Msk;
   199cc:	4b0e      	ldr	r3, [pc, #56]	; (19a08 <ble_phy_tx_end_isr+0xe0>)
   199ce:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   199d2:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   199d6:	e7da      	b.n	1998e <ble_phy_tx_end_isr+0x66>
        assert(transition == BLE_PHY_TRANSITION_NONE);
   199d8:	f7f2 fc06 	bl	c1e8 <hal_debugger_connected>
   199dc:	b100      	cbz	r0, 199e0 <ble_phy_tx_end_isr+0xb8>
   199de:	be01      	bkpt	0x0001
   199e0:	2300      	movs	r3, #0
   199e2:	461a      	mov	r2, r3
   199e4:	4619      	mov	r1, r3
   199e6:	4618      	mov	r0, r3
   199e8:	f7f2 fe38 	bl	c65c <__assert_func>
   199ec:	200042fc 	.word	0x200042fc
   199f0:	40001000 	.word	0x40001000
   199f4:	4000f000 	.word	0x4000f000
   199f8:	2000443c 	.word	0x2000443c
   199fc:	40008000 	.word	0x40008000
   19a00:	80100030 	.word	0x80100030
   19a04:	0002b04c 	.word	0x0002b04c
   19a08:	4001f000 	.word	0x4001f000

00019a0c <ble_phy_init>:
{
   19a0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19a10:	b082      	sub	sp, #8
    g_ble_phy_data.phy_cur_phy_mode = BLE_PHY_MODE_1M;
   19a12:	4f4b      	ldr	r7, [pc, #300]	; (19b40 <ble_phy_init+0x134>)
   19a14:	2601      	movs	r6, #1
   19a16:	72be      	strb	r6, [r7, #10]
    g_ble_phy_data.phy_tx_phy_mode = BLE_PHY_MODE_1M;
   19a18:	72fe      	strb	r6, [r7, #11]
    g_ble_phy_data.phy_rx_phy_mode = BLE_PHY_MODE_1M;
   19a1a:	733e      	strb	r6, [r7, #12]
    g_ble_phy_data.rx_pwr_compensation = 0;
   19a1c:	2400      	movs	r4, #0
   19a1e:	73bc      	strb	r4, [r7, #14]
    g_ble_phy_data.phy_chan = BLE_PHY_NUM_CHANS;
   19a20:	2328      	movs	r3, #40	; 0x28
   19a22:	70bb      	strb	r3, [r7, #2]
    NRF_RADIO->POWER = 0;
   19a24:	4b47      	ldr	r3, [pc, #284]	; (19b44 <ble_phy_init+0x138>)
   19a26:	f8c3 4ffc 	str.w	r4, [r3, #4092]	; 0xffc
    NRF_RADIO->POWER = 1;
   19a2a:	f8c3 6ffc 	str.w	r6, [r3, #4092]	; 0xffc
    NRF_RADIO->INTENCLR = NRF_RADIO_IRQ_MASK_ALL;
   19a2e:	f243 42ff 	movw	r2, #13567	; 0x34ff
   19a32:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    NRF_RADIO->MODE = RADIO_MODE_MODE_Ble_1Mbit;
   19a36:	f04f 0903 	mov.w	r9, #3
   19a3a:	f8c3 9510 	str.w	r9, [r3, #1296]	; 0x510
    NRF_RADIO->PCNF0 = NRF_PCNF0;
   19a3e:	4a42      	ldr	r2, [pc, #264]	; (19b48 <ble_phy_init+0x13c>)
   19a40:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    NRF_RADIO->PCNF1 = NRF_MAXLEN |
   19a44:	4a41      	ldr	r2, [pc, #260]	; (19b4c <ble_phy_init+0x140>)
   19a46:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast << RADIO_MODECNF0_RU_Pos) &
   19a4a:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   19a4e:	4332      	orrs	r2, r6
   19a50:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
    NRF_RADIO->TXADDRESS  = 0;
   19a54:	f8c3 452c 	str.w	r4, [r3, #1324]	; 0x52c
    NRF_RADIO->RXADDRESSES  = (1 << 0);
   19a58:	f8c3 6530 	str.w	r6, [r3, #1328]	; 0x530
    NRF_RADIO->CRCCNF = (RADIO_CRCCNF_SKIPADDR_Skip << RADIO_CRCCNF_SKIPADDR_Pos) | RADIO_CRCCNF_LEN_Three;
   19a5c:	f240 1203 	movw	r2, #259	; 0x103
   19a60:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
    NRF_RADIO->CRCPOLY = 0x0000065B;
   19a64:	f240 625b 	movw	r2, #1627	; 0x65b
   19a68:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    NRF_RADIO->TIFS = BLE_LL_IFS;
   19a6c:	2296      	movs	r2, #150	; 0x96
   19a6e:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
    NRF_PPI->CHENSET = PPI_CHEN_CH26_Msk | PPI_CHEN_CH27_Msk;
   19a72:	f8df 8100 	ldr.w	r8, [pc, #256]	; 19b74 <ble_phy_init+0x168>
   19a76:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
   19a7a:	f8c8 3504 	str.w	r3, [r8, #1284]	; 0x504
    NRF_CCM->INTENCLR = 0xffffffff;
   19a7e:	4d34      	ldr	r5, [pc, #208]	; (19b50 <ble_phy_init+0x144>)
   19a80:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   19a84:	f8c5 a308 	str.w	sl, [r5, #776]	; 0x308
    NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   19a88:	f8c5 6200 	str.w	r6, [r5, #512]	; 0x200
    NRF_CCM->EVENTS_ERROR = 0;
   19a8c:	f8c5 4108 	str.w	r4, [r5, #264]	; 0x108
    memset(g_nrf_encrypt_scratchpad, 0, sizeof(g_nrf_encrypt_scratchpad));
   19a90:	f44f 7286 	mov.w	r2, #268	; 0x10c
   19a94:	4621      	mov	r1, r4
   19a96:	482f      	ldr	r0, [pc, #188]	; (19b54 <ble_phy_init+0x148>)
   19a98:	f7f4 fd12 	bl	e4c0 <memset>
    g_ble_phy_data.phy_aar_scratch = 0;
   19a9c:	613c      	str	r4, [r7, #16]
    NRF_AAR->IRKPTR = (uint32_t)&g_nrf_irk_list[0];
   19a9e:	4b2e      	ldr	r3, [pc, #184]	; (19b58 <ble_phy_init+0x14c>)
   19aa0:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
    NRF_AAR->INTENCLR = 0xffffffff;
   19aa4:	f8c5 a308 	str.w	sl, [r5, #776]	; 0x308
    NRF_AAR->EVENTS_END = 0;
   19aa8:	f8c5 4100 	str.w	r4, [r5, #256]	; 0x100
    NRF_AAR->EVENTS_RESOLVED = 0;
   19aac:	f8c5 4104 	str.w	r4, [r5, #260]	; 0x104
    NRF_AAR->EVENTS_NOTRESOLVED = 0;
   19ab0:	f8c5 4108 	str.w	r4, [r5, #264]	; 0x108
    NRF_AAR->NIRK = 0;
   19ab4:	f8c5 4504 	str.w	r4, [r5, #1284]	; 0x504
    NRF_TIMER0->TASKS_STOP = 1;
   19ab8:	4b28      	ldr	r3, [pc, #160]	; (19b5c <ble_phy_init+0x150>)
   19aba:	605e      	str	r6, [r3, #4]
    NRF_TIMER0->TASKS_SHUTDOWN = 1;
   19abc:	611e      	str	r6, [r3, #16]
    NRF_TIMER0->BITMODE = 3;    /* 32-bit timer */
   19abe:	f8c3 9508 	str.w	r9, [r3, #1288]	; 0x508
    NRF_TIMER0->MODE = 0;       /* Timer mode */
   19ac2:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
    NRF_TIMER0->PRESCALER = 4;  /* gives us 1 MHz */
   19ac6:	2204      	movs	r2, #4
   19ac8:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    NRF_PPI->CH[4].EEP = (uint32_t)&(NRF_RADIO->EVENTS_ADDRESS);
   19acc:	f5a3 43dd 	sub.w	r3, r3, #28288	; 0x6e80
   19ad0:	3b7c      	subs	r3, #124	; 0x7c
   19ad2:	f8c8 3530 	str.w	r3, [r8, #1328]	; 0x530
    NRF_PPI->CH[4].TEP = (uint32_t)&(NRF_TIMER0->TASKS_CAPTURE[3]);
   19ad6:	f503 43de 	add.w	r3, r3, #28416	; 0x6f00
   19ada:	3348      	adds	r3, #72	; 0x48
   19adc:	f8c8 3534 	str.w	r3, [r8, #1332]	; 0x534
    NRF_PPI->CH[5].EEP = (uint32_t)&(NRF_TIMER0->EVENTS_COMPARE[3]);
   19ae0:	f503 7380 	add.w	r3, r3, #256	; 0x100
   19ae4:	f8c8 3538 	str.w	r3, [r8, #1336]	; 0x538
    NRF_PPI->CH[5].TEP = (uint32_t)&(NRF_RADIO->TASKS_DISABLE);
   19ae8:	f5a3 43e2 	sub.w	r3, r3, #28928	; 0x7100
   19aec:	3b3c      	subs	r3, #60	; 0x3c
   19aee:	f8c8 353c 	str.w	r3, [r8, #1340]	; 0x53c
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   19af2:	4b1b      	ldr	r3, [pc, #108]	; (19b60 <ble_phy_init+0x154>)
   19af4:	f883 4301 	strb.w	r4, [r3, #769]	; 0x301
  uint32_t vectors = (uint32_t )SCB->VTOR;
   19af8:	4a1a      	ldr	r2, [pc, #104]	; (19b64 <ble_phy_init+0x158>)
   19afa:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   19afc:	491a      	ldr	r1, [pc, #104]	; (19b68 <ble_phy_init+0x15c>)
   19afe:	6451      	str	r1, [r2, #68]	; 0x44
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   19b00:	2202      	movs	r2, #2
   19b02:	601a      	str	r2, [r3, #0]
    if (!g_ble_phy_data.phy_stats_initialized) {
   19b04:	783b      	ldrb	r3, [r7, #0]
   19b06:	b11b      	cbz	r3, 19b10 <ble_phy_init+0x104>
}
   19b08:	2000      	movs	r0, #0
   19b0a:	b002      	add	sp, #8
   19b0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        rc = stats_init_and_reg(STATS_HDR(ble_phy_stats),
   19b10:	4b16      	ldr	r3, [pc, #88]	; (19b6c <ble_phy_init+0x160>)
   19b12:	9301      	str	r3, [sp, #4]
   19b14:	4623      	mov	r3, r4
   19b16:	9400      	str	r4, [sp, #0]
   19b18:	220d      	movs	r2, #13
   19b1a:	2104      	movs	r1, #4
   19b1c:	4814      	ldr	r0, [pc, #80]	; (19b70 <ble_phy_init+0x164>)
   19b1e:	f7f6 faa7 	bl	10070 <stats_init_and_reg>
        assert(rc == 0);
   19b22:	b918      	cbnz	r0, 19b2c <ble_phy_init+0x120>
        g_ble_phy_data.phy_stats_initialized  = 1;
   19b24:	4b06      	ldr	r3, [pc, #24]	; (19b40 <ble_phy_init+0x134>)
   19b26:	2201      	movs	r2, #1
   19b28:	701a      	strb	r2, [r3, #0]
   19b2a:	e7ed      	b.n	19b08 <ble_phy_init+0xfc>
        assert(rc == 0);
   19b2c:	f7f2 fb5c 	bl	c1e8 <hal_debugger_connected>
   19b30:	b100      	cbz	r0, 19b34 <ble_phy_init+0x128>
   19b32:	be01      	bkpt	0x0001
   19b34:	2300      	movs	r3, #0
   19b36:	461a      	mov	r2, r3
   19b38:	4619      	mov	r1, r3
   19b3a:	4618      	mov	r0, r3
   19b3c:	f7f2 fd8e 	bl	c65c <__assert_func>
   19b40:	200042fc 	.word	0x200042fc
   19b44:	40001000 	.word	0x40001000
   19b48:	00100108 	.word	0x00100108
   19b4c:	020300ff 	.word	0x020300ff
   19b50:	4000f000 	.word	0x4000f000
   19b54:	20004330 	.word	0x20004330
   19b58:	200042b8 	.word	0x200042b8
   19b5c:	40008000 	.word	0x40008000
   19b60:	e000e100 	.word	0xe000e100
   19b64:	e000ed00 	.word	0xe000ed00
   19b68:	00019f75 	.word	0x00019f75
   19b6c:	0002b010 	.word	0x0002b010
   19b70:	2000443c 	.word	0x2000443c
   19b74:	4001f000 	.word	0x4001f000

00019b78 <ble_phy_encrypt_enable>:
{
   19b78:	b4f0      	push	{r4, r5, r6, r7}
    memcpy(g_nrf_ccm_data.key, key, 16);
   19b7a:	4c10      	ldr	r4, [pc, #64]	; (19bbc <ble_phy_encrypt_enable+0x44>)
   19b7c:	681f      	ldr	r7, [r3, #0]
   19b7e:	685e      	ldr	r6, [r3, #4]
   19b80:	689d      	ldr	r5, [r3, #8]
   19b82:	68db      	ldr	r3, [r3, #12]
   19b84:	6027      	str	r7, [r4, #0]
   19b86:	6066      	str	r6, [r4, #4]
   19b88:	60a5      	str	r5, [r4, #8]
   19b8a:	60e3      	str	r3, [r4, #12]
    g_nrf_ccm_data.pkt_counter = pkt_counter;
   19b8c:	6120      	str	r0, [r4, #16]
   19b8e:	6161      	str	r1, [r4, #20]
    memcpy(g_nrf_ccm_data.iv, iv, 8);
   19b90:	6811      	ldr	r1, [r2, #0]
   19b92:	6853      	ldr	r3, [r2, #4]
   19b94:	f8c4 1019 	str.w	r1, [r4, #25]
   19b98:	f8c4 301d 	str.w	r3, [r4, #29]
    g_nrf_ccm_data.dir_bit = is_master;
   19b9c:	f89d 3010 	ldrb.w	r3, [sp, #16]
   19ba0:	7623      	strb	r3, [r4, #24]
    g_ble_phy_data.phy_encrypted = 1;
   19ba2:	4b07      	ldr	r3, [pc, #28]	; (19bc0 <ble_phy_encrypt_enable+0x48>)
   19ba4:	2201      	movs	r2, #1
   19ba6:	71da      	strb	r2, [r3, #7]
    NRF_AAR->ENABLE = AAR_ENABLE_ENABLE_Disabled;
   19ba8:	4b06      	ldr	r3, [pc, #24]	; (19bc4 <ble_phy_encrypt_enable+0x4c>)
   19baa:	2200      	movs	r2, #0
   19bac:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   19bb0:	2202      	movs	r2, #2
   19bb2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
   19bb6:	bcf0      	pop	{r4, r5, r6, r7}
   19bb8:	4770      	bx	lr
   19bba:	bf00      	nop
   19bbc:	2000447c 	.word	0x2000447c
   19bc0:	200042fc 	.word	0x200042fc
   19bc4:	4000f000 	.word	0x4000f000

00019bc8 <ble_phy_encrypt_set_pkt_cntr>:
    g_nrf_ccm_data.pkt_counter = pkt_counter;
   19bc8:	4b02      	ldr	r3, [pc, #8]	; (19bd4 <ble_phy_encrypt_set_pkt_cntr+0xc>)
   19bca:	6118      	str	r0, [r3, #16]
   19bcc:	6159      	str	r1, [r3, #20]
    g_nrf_ccm_data.dir_bit = dir;
   19bce:	761a      	strb	r2, [r3, #24]
}
   19bd0:	4770      	bx	lr
   19bd2:	bf00      	nop
   19bd4:	2000447c 	.word	0x2000447c

00019bd8 <ble_phy_encrypt_disable>:
    NRF_PPI->CHENCLR = PPI_CHEN_CH25_Msk;
   19bd8:	4b07      	ldr	r3, [pc, #28]	; (19bf8 <ble_phy_encrypt_disable+0x20>)
   19bda:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   19bde:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    NRF_CCM->TASKS_STOP = 1;
   19be2:	4a06      	ldr	r2, [pc, #24]	; (19bfc <ble_phy_encrypt_disable+0x24>)
   19be4:	2301      	movs	r3, #1
   19be6:	6093      	str	r3, [r2, #8]
    NRF_CCM->EVENTS_ERROR = 0;
   19be8:	2300      	movs	r3, #0
   19bea:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   19bee:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    g_ble_phy_data.phy_encrypted = 0;
   19bf2:	4a03      	ldr	r2, [pc, #12]	; (19c00 <ble_phy_encrypt_disable+0x28>)
   19bf4:	71d3      	strb	r3, [r2, #7]
}
   19bf6:	4770      	bx	lr
   19bf8:	4001f000 	.word	0x4001f000
   19bfc:	4000f000 	.word	0x4000f000
   19c00:	200042fc 	.word	0x200042fc

00019c04 <ble_phy_set_txend_cb>:
    g_ble_phy_data.txend_cb = txend_cb;
   19c04:	4b01      	ldr	r3, [pc, #4]	; (19c0c <ble_phy_set_txend_cb+0x8>)
   19c06:	62d8      	str	r0, [r3, #44]	; 0x2c
    g_ble_phy_data.txend_arg = arg;
   19c08:	6299      	str	r1, [r3, #40]	; 0x28
}
   19c0a:	4770      	bx	lr
   19c0c:	200042fc 	.word	0x200042fc

00019c10 <ble_phy_txpower_round>:
    if (dbm >= (int8_t)RADIO_TXPOWER_TXPOWER_Pos4dBm) {
   19c10:	2803      	cmp	r0, #3
   19c12:	dc14      	bgt.n	19c3e <ble_phy_txpower_round+0x2e>
    if (dbm >= (int8_t)RADIO_TXPOWER_TXPOWER_Pos3dBm) {
   19c14:	2802      	cmp	r0, #2
   19c16:	dc14      	bgt.n	19c42 <ble_phy_txpower_round+0x32>
    if (dbm >= (int8_t)RADIO_TXPOWER_TXPOWER_0dBm) {
   19c18:	2800      	cmp	r0, #0
   19c1a:	db01      	blt.n	19c20 <ble_phy_txpower_round+0x10>
        return (int8_t)RADIO_TXPOWER_TXPOWER_0dBm;
   19c1c:	2000      	movs	r0, #0
   19c1e:	4770      	bx	lr
    if (dbm >= (int8_t)RADIO_TXPOWER_TXPOWER_Neg4dBm) {
   19c20:	f110 0f04 	cmn.w	r0, #4
   19c24:	da0f      	bge.n	19c46 <ble_phy_txpower_round+0x36>
    if (dbm >= (int8_t)RADIO_TXPOWER_TXPOWER_Neg8dBm) {
   19c26:	f110 0f08 	cmn.w	r0, #8
   19c2a:	da0f      	bge.n	19c4c <ble_phy_txpower_round+0x3c>
    if (dbm >= (int8_t)RADIO_TXPOWER_TXPOWER_Neg12dBm) {
   19c2c:	f110 0f0c 	cmn.w	r0, #12
   19c30:	da0f      	bge.n	19c52 <ble_phy_txpower_round+0x42>
    if (dbm >= (int8_t)RADIO_TXPOWER_TXPOWER_Neg20dBm) {
   19c32:	f110 0f14 	cmn.w	r0, #20
   19c36:	db0f      	blt.n	19c58 <ble_phy_txpower_round+0x48>
        return (int8_t)RADIO_TXPOWER_TXPOWER_Neg20dBm;
   19c38:	f06f 0013 	mvn.w	r0, #19
   19c3c:	4770      	bx	lr
        return (int8_t)RADIO_TXPOWER_TXPOWER_Pos4dBm;
   19c3e:	2004      	movs	r0, #4
   19c40:	4770      	bx	lr
        return (int8_t)RADIO_TXPOWER_TXPOWER_Pos3dBm;
   19c42:	2003      	movs	r0, #3
   19c44:	4770      	bx	lr
        return (int8_t)RADIO_TXPOWER_TXPOWER_Neg4dBm;
   19c46:	f06f 0003 	mvn.w	r0, #3
   19c4a:	4770      	bx	lr
        return (int8_t)RADIO_TXPOWER_TXPOWER_Neg8dBm;
   19c4c:	f06f 0007 	mvn.w	r0, #7
   19c50:	4770      	bx	lr
        return (int8_t)RADIO_TXPOWER_TXPOWER_Neg12dBm;
   19c52:	f06f 000b 	mvn.w	r0, #11
   19c56:	4770      	bx	lr
    return (int8_t)RADIO_TXPOWER_TXPOWER_Neg40dBm;
   19c58:	f06f 0027 	mvn.w	r0, #39	; 0x27
}
   19c5c:	4770      	bx	lr
	...

00019c60 <ble_phy_txpwr_set>:
{
   19c60:	b508      	push	{r3, lr}
    dbm = ble_phy_txpower_round(dbm);
   19c62:	f7ff ffd5 	bl	19c10 <ble_phy_txpower_round>
    NRF_RADIO->TXPOWER = dbm;
   19c66:	4b03      	ldr	r3, [pc, #12]	; (19c74 <ble_phy_txpwr_set+0x14>)
   19c68:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    g_ble_phy_data.phy_txpwr_dbm = dbm;
   19c6c:	4b02      	ldr	r3, [pc, #8]	; (19c78 <ble_phy_txpwr_set+0x18>)
   19c6e:	7058      	strb	r0, [r3, #1]
}
   19c70:	2000      	movs	r0, #0
   19c72:	bd08      	pop	{r3, pc}
   19c74:	40001000 	.word	0x40001000
   19c78:	200042fc 	.word	0x200042fc

00019c7c <ble_phy_set_rx_pwr_compensation>:
    g_ble_phy_data.rx_pwr_compensation = compensation;
   19c7c:	4b01      	ldr	r3, [pc, #4]	; (19c84 <ble_phy_set_rx_pwr_compensation+0x8>)
   19c7e:	7398      	strb	r0, [r3, #14]
}
   19c80:	4770      	bx	lr
   19c82:	bf00      	nop
   19c84:	200042fc 	.word	0x200042fc

00019c88 <ble_phy_setchan>:
{
   19c88:	b538      	push	{r3, r4, r5, lr}
    assert(chan < BLE_PHY_NUM_CHANS);
   19c8a:	2827      	cmp	r0, #39	; 0x27
   19c8c:	d811      	bhi.n	19cb2 <ble_phy_setchan+0x2a>
   19c8e:	4604      	mov	r4, r0
   19c90:	4615      	mov	r5, r2
    ble_phy_set_access_addr(access_addr);
   19c92:	4608      	mov	r0, r1
   19c94:	f7ff fd50 	bl	19738 <ble_phy_set_access_addr>
    NRF_RADIO->CRCINIT = crcinit;
   19c98:	4b0b      	ldr	r3, [pc, #44]	; (19cc8 <ble_phy_setchan+0x40>)
   19c9a:	f8c3 553c 	str.w	r5, [r3, #1340]	; 0x53c
    g_ble_phy_data.phy_chan = chan;
   19c9e:	4a0b      	ldr	r2, [pc, #44]	; (19ccc <ble_phy_setchan+0x44>)
   19ca0:	7094      	strb	r4, [r2, #2]
    NRF_RADIO->FREQUENCY = g_ble_phy_chan_freq[chan];
   19ca2:	4a0b      	ldr	r2, [pc, #44]	; (19cd0 <ble_phy_setchan+0x48>)
   19ca4:	5d12      	ldrb	r2, [r2, r4]
   19ca6:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    NRF_RADIO->DATAWHITEIV = chan;
   19caa:	f8c3 4554 	str.w	r4, [r3, #1364]	; 0x554
}
   19cae:	2000      	movs	r0, #0
   19cb0:	bd38      	pop	{r3, r4, r5, pc}
    assert(chan < BLE_PHY_NUM_CHANS);
   19cb2:	f7f2 fa99 	bl	c1e8 <hal_debugger_connected>
   19cb6:	b100      	cbz	r0, 19cba <ble_phy_setchan+0x32>
   19cb8:	be01      	bkpt	0x0001
   19cba:	2300      	movs	r3, #0
   19cbc:	461a      	mov	r2, r3
   19cbe:	4619      	mov	r1, r3
   19cc0:	4618      	mov	r0, r3
   19cc2:	f7f2 fccb 	bl	c65c <__assert_func>
   19cc6:	bf00      	nop
   19cc8:	40001000 	.word	0x40001000
   19ccc:	200042fc 	.word	0x200042fc
   19cd0:	0002b018 	.word	0x0002b018

00019cd4 <ble_phy_disable>:
 * the usec timer (if used), disables interrupts, disables the RADIO, disables
 * PPI and sets state to idle.
 */
void
ble_phy_disable(void)
{
   19cd4:	b508      	push	{r3, lr}
    ble_phy_trace_void(BLE_PHY_TRACE_ID_DISABLE);

    ble_phy_stop_usec_timer();
   19cd6:	f7ff fd47 	bl	19768 <ble_phy_stop_usec_timer>
    ble_phy_disable_irq_and_ppi();
   19cda:	f7ff fd53 	bl	19784 <ble_phy_disable_irq_and_ppi>
}
   19cde:	bd08      	pop	{r3, pc}

00019ce0 <ble_phy_rx_start_isr>:
{
   19ce0:	b538      	push	{r3, r4, r5, lr}
    NRF_RADIO->EVENTS_ADDRESS = 0;
   19ce2:	4b46      	ldr	r3, [pc, #280]	; (19dfc <ble_phy_rx_start_isr+0x11c>)
   19ce4:	2500      	movs	r5, #0
   19ce6:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
    NRF_RADIO->INTENCLR = RADIO_INTENCLR_DISABLED_Msk | RADIO_INTENCLR_ADDRESS_Msk;
   19cea:	2212      	movs	r2, #18
   19cec:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    NRF_PPI->CHENCLR = PPI_CHEN_CH4_Msk | PPI_CHEN_CH5_Msk;
   19cf0:	f503 33f0 	add.w	r3, r3, #122880	; 0x1e000
   19cf4:	2230      	movs	r2, #48	; 0x30
   19cf6:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    ble_hdr->rxinfo.flags = ble_ll_state_get();
   19cfa:	f7f6 fe67 	bl	109cc <ble_ll_state_get>
   19cfe:	4c40      	ldr	r4, [pc, #256]	; (19e00 <ble_phy_rx_start_isr+0x120>)
   19d00:	8320      	strh	r0, [r4, #24]
    ble_hdr->rxinfo.channel = g_ble_phy_data.phy_chan;
   19d02:	78a3      	ldrb	r3, [r4, #2]
   19d04:	76a3      	strb	r3, [r4, #26]
    ble_hdr->rxinfo.handle = 0;
   19d06:	76e5      	strb	r5, [r4, #27]
    ble_hdr->rxinfo.phy = ble_phy_get_cur_phy();
   19d08:	f7ff fd86 	bl	19818 <ble_phy_get_cur_phy>
   19d0c:	7760      	strb	r0, [r4, #29]
    phy = g_ble_phy_data.phy_cur_phy_mode;
   19d0e:	7aa2      	ldrb	r2, [r4, #10]
    ble_hdr->rxinfo.phy_mode = ble_phy_get_cur_rx_phy_mode();
   19d10:	77a2      	strb	r2, [r4, #30]
    ble_hdr->beg_cputime = g_ble_phy_data.phy_start_cputime;
   19d12:	6b23      	ldr	r3, [r4, #48]	; 0x30
   19d14:	6223      	str	r3, [r4, #32]
    usecs = NRF_TIMER0->CC[1];
   19d16:	493b      	ldr	r1, [pc, #236]	; (19e04 <ble_phy_rx_start_isr+0x124>)
   19d18:	f8d1 0544 	ldr.w	r0, [r1, #1348]	; 0x544
                g_ble_phy_t_rxaddrdelay[ble_hdr->rxinfo.phy_mode];
   19d1c:	493a      	ldr	r1, [pc, #232]	; (19e08 <ble_phy_rx_start_isr+0x128>)
   19d1e:	5c8c      	ldrb	r4, [r1, r2]
    pdu_usecs = ble_phy_mode_pdu_start_off(ble_hdr->rxinfo.phy_mode) +
   19d20:	3428      	adds	r4, #40	; 0x28
    if (usecs < pdu_usecs) {
   19d22:	42a0      	cmp	r0, r4
   19d24:	d203      	bcs.n	19d2e <ble_phy_rx_start_isr+0x4e>
        g_ble_phy_data.phy_start_cputime--;
   19d26:	3b01      	subs	r3, #1
   19d28:	4a35      	ldr	r2, [pc, #212]	; (19e00 <ble_phy_rx_start_isr+0x120>)
   19d2a:	6313      	str	r3, [r2, #48]	; 0x30
        usecs += 30;
   19d2c:	301e      	adds	r0, #30
    usecs -= pdu_usecs;
   19d2e:	1b04      	subs	r4, r0, r4
    ticks = os_cputime_usecs_to_ticks(usecs);
   19d30:	4620      	mov	r0, r4
   19d32:	f00f fdd1 	bl	298d8 <os_cputime_usecs_to_ticks>
   19d36:	4605      	mov	r5, r0
    usecs -= os_cputime_ticks_to_usecs(ticks);
   19d38:	f00f fdd6 	bl	298e8 <os_cputime_ticks_to_usecs>
   19d3c:	1a20      	subs	r0, r4, r0
    if (usecs == 31) {
   19d3e:	281f      	cmp	r0, #31
   19d40:	d015      	beq.n	19d6e <ble_phy_rx_start_isr+0x8e>
    ble_hdr->beg_cputime += ticks;
   19d42:	4b2f      	ldr	r3, [pc, #188]	; (19e00 <ble_phy_rx_start_isr+0x120>)
   19d44:	6a1a      	ldr	r2, [r3, #32]
   19d46:	442a      	add	r2, r5
   19d48:	621a      	str	r2, [r3, #32]
    ble_hdr->rem_usecs = usecs;
   19d4a:	6258      	str	r0, [r3, #36]	; 0x24
        state = NRF_RADIO->STATE;
   19d4c:	4b2b      	ldr	r3, [pc, #172]	; (19dfc <ble_phy_rx_start_isr+0x11c>)
   19d4e:	f8d3 2550 	ldr.w	r2, [r3, #1360]	; 0x550
        if (NRF_RADIO->EVENTS_BCMATCH != 0) {
   19d52:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
   19d56:	b96b      	cbnz	r3, 19d74 <ble_phy_rx_start_isr+0x94>
        if (state == RADIO_STATE_STATE_Disabled) {
   19d58:	2a00      	cmp	r2, #0
   19d5a:	d1f7      	bne.n	19d4c <ble_phy_rx_start_isr+0x6c>
            NRF_RADIO->INTENCLR = NRF_RADIO_IRQ_MASK_ALL;
   19d5c:	4b27      	ldr	r3, [pc, #156]	; (19dfc <ble_phy_rx_start_isr+0x11c>)
   19d5e:	f243 42ff 	movw	r2, #13567	; 0x34ff
   19d62:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            NRF_RADIO->SHORTS = 0;
   19d66:	2000      	movs	r0, #0
   19d68:	f8c3 0200 	str.w	r0, [r3, #512]	; 0x200
            return false;
   19d6c:	e03b      	b.n	19de6 <ble_phy_rx_start_isr+0x106>
        ++ticks;
   19d6e:	3501      	adds	r5, #1
        usecs = 0;
   19d70:	2000      	movs	r0, #0
   19d72:	e7e6      	b.n	19d42 <ble_phy_rx_start_isr+0x62>
    if (g_ble_phy_data.phy_privacy && (dptr[3] & 0x40)) {
   19d74:	4b22      	ldr	r3, [pc, #136]	; (19e00 <ble_phy_rx_start_isr+0x120>)
   19d76:	7a1b      	ldrb	r3, [r3, #8]
   19d78:	b303      	cbz	r3, 19dbc <ble_phy_rx_start_isr+0xdc>
   19d7a:	4b24      	ldr	r3, [pc, #144]	; (19e0c <ble_phy_rx_start_isr+0x12c>)
   19d7c:	78db      	ldrb	r3, [r3, #3]
   19d7e:	f013 0f40 	tst.w	r3, #64	; 0x40
   19d82:	d01b      	beq.n	19dbc <ble_phy_rx_start_isr+0xdc>
        adva_offset = (dptr[3] & 0x0f) == 0x07 ? 2 : 0;
   19d84:	f003 030f 	and.w	r3, r3, #15
   19d88:	2b07      	cmp	r3, #7
   19d8a:	d02d      	beq.n	19de8 <ble_phy_rx_start_isr+0x108>
   19d8c:	2300      	movs	r3, #0
        NRF_AAR->ADDRPTR = (uint32_t)(dptr + 3 + adva_offset);
   19d8e:	1cd9      	adds	r1, r3, #3
   19d90:	4a1e      	ldr	r2, [pc, #120]	; (19e0c <ble_phy_rx_start_isr+0x12c>)
   19d92:	440a      	add	r2, r1
   19d94:	491e      	ldr	r1, [pc, #120]	; (19e10 <ble_phy_rx_start_isr+0x130>)
   19d96:	f8c1 2510 	str.w	r2, [r1, #1296]	; 0x510
        NRF_RADIO->EVENTS_BCMATCH = 0;
   19d9a:	f5a1 4160 	sub.w	r1, r1, #57344	; 0xe000
   19d9e:	2200      	movs	r2, #0
   19da0:	f8c1 2128 	str.w	r2, [r1, #296]	; 0x128
        NRF_PPI->CHENSET = PPI_CHEN_CH23_Msk;
   19da4:	4a1b      	ldr	r2, [pc, #108]	; (19e14 <ble_phy_rx_start_isr+0x134>)
   19da6:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   19daa:	f8c2 0504 	str.w	r0, [r2, #1284]	; 0x504
        NRF_RADIO->BCC = (BLE_LL_PDU_HDR_LEN + adva_offset + BLE_DEV_ADDR_LEN) * 8 +
   19dae:	3308      	adds	r3, #8
                         g_ble_phy_data.phy_bcc_offset;
   19db0:	4a13      	ldr	r2, [pc, #76]	; (19e00 <ble_phy_rx_start_isr+0x120>)
   19db2:	7b52      	ldrb	r2, [r2, #13]
        NRF_RADIO->BCC = (BLE_LL_PDU_HDR_LEN + adva_offset + BLE_DEV_ADDR_LEN) * 8 +
   19db4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   19db8:	f8c1 3560 	str.w	r3, [r1, #1376]	; 0x560
    rc = ble_ll_rx_start(dptr + 3,
   19dbc:	4b10      	ldr	r3, [pc, #64]	; (19e00 <ble_phy_rx_start_isr+0x120>)
   19dbe:	f103 0218 	add.w	r2, r3, #24
   19dc2:	7899      	ldrb	r1, [r3, #2]
   19dc4:	4814      	ldr	r0, [pc, #80]	; (19e18 <ble_phy_rx_start_isr+0x138>)
   19dc6:	f7f6 fd3d 	bl	10844 <ble_ll_rx_start>
    if (rc >= 0) {
   19dca:	2800      	cmp	r0, #0
   19dcc:	db0e      	blt.n	19dec <ble_phy_rx_start_isr+0x10c>
        g_ble_phy_data.phy_rx_started = 1;
   19dce:	4b0c      	ldr	r3, [pc, #48]	; (19e00 <ble_phy_rx_start_isr+0x120>)
   19dd0:	2201      	movs	r2, #1
   19dd2:	719a      	strb	r2, [r3, #6]
        NRF_RADIO->INTENSET = RADIO_INTENSET_END_Msk;
   19dd4:	4b09      	ldr	r3, [pc, #36]	; (19dfc <ble_phy_rx_start_isr+0x11c>)
   19dd6:	2208      	movs	r2, #8
   19dd8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    STATS_INC(ble_phy_stats, rx_starts);
   19ddc:	4a0f      	ldr	r2, [pc, #60]	; (19e1c <ble_phy_rx_start_isr+0x13c>)
   19dde:	6a13      	ldr	r3, [r2, #32]
   19de0:	3301      	adds	r3, #1
   19de2:	6213      	str	r3, [r2, #32]
    return true;
   19de4:	2001      	movs	r0, #1
}
   19de6:	bd38      	pop	{r3, r4, r5, pc}
        adva_offset = (dptr[3] & 0x0f) == 0x07 ? 2 : 0;
   19de8:	2302      	movs	r3, #2
   19dea:	e7d0      	b.n	19d8e <ble_phy_rx_start_isr+0xae>
        ble_phy_disable();
   19dec:	f7ff ff72 	bl	19cd4 <ble_phy_disable>
        STATS_INC(ble_phy_stats, rx_aborts);
   19df0:	4a0a      	ldr	r2, [pc, #40]	; (19e1c <ble_phy_rx_start_isr+0x13c>)
   19df2:	6a53      	ldr	r3, [r2, #36]	; 0x24
   19df4:	3301      	adds	r3, #1
   19df6:	6253      	str	r3, [r2, #36]	; 0x24
   19df8:	e7f0      	b.n	19ddc <ble_phy_rx_start_isr+0xfc>
   19dfa:	bf00      	nop
   19dfc:	40001000 	.word	0x40001000
   19e00:	200042fc 	.word	0x200042fc
   19e04:	40008000 	.word	0x40008000
   19e08:	0002b040 	.word	0x0002b040
   19e0c:	200028dc 	.word	0x200028dc
   19e10:	4000f000 	.word	0x4000f000
   19e14:	4001f000 	.word	0x4001f000
   19e18:	200028df 	.word	0x200028df
   19e1c:	2000443c 	.word	0x2000443c

00019e20 <ble_phy_rx_end_isr>:
{
   19e20:	b510      	push	{r4, lr}
    NRF_RADIO->EVENTS_END = 0;
   19e22:	4b4a      	ldr	r3, [pc, #296]	; (19f4c <ble_phy_rx_end_isr+0x12c>)
   19e24:	2200      	movs	r2, #0
   19e26:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    NRF_RADIO->INTENCLR = RADIO_INTENCLR_END_Msk;
   19e2a:	2208      	movs	r2, #8
   19e2c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    NRF_PPI->CHENCLR = PPI_CHEN_CH21_Msk;
   19e30:	4a47      	ldr	r2, [pc, #284]	; (19f50 <ble_phy_rx_end_isr+0x130>)
   19e32:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
   19e36:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
    assert(NRF_RADIO->EVENTS_RSSIEND != 0);
   19e3a:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   19e3e:	2b00      	cmp	r3, #0
   19e40:	d043      	beq.n	19eca <ble_phy_rx_end_isr+0xaa>
                           g_ble_phy_data.rx_pwr_compensation;
   19e42:	4944      	ldr	r1, [pc, #272]	; (19f54 <ble_phy_rx_end_isr+0x134>)
   19e44:	7b8b      	ldrb	r3, [r1, #14]
    ble_hdr->rxinfo.rssi = (-1 * NRF_RADIO->RSSISAMPLE) +
   19e46:	4a41      	ldr	r2, [pc, #260]	; (19f4c <ble_phy_rx_end_isr+0x12c>)
   19e48:	f8d2 0548 	ldr.w	r0, [r2, #1352]	; 0x548
   19e4c:	1a1b      	subs	r3, r3, r0
   19e4e:	770b      	strb	r3, [r1, #28]
    crcok = NRF_RADIO->EVENTS_CRCOK;
   19e50:	f8d2 3130 	ldr.w	r3, [r2, #304]	; 0x130
    if (!crcok) {
   19e54:	f013 0fff 	tst.w	r3, #255	; 0xff
   19e58:	d141      	bne.n	19ede <ble_phy_rx_end_isr+0xbe>
        STATS_INC(ble_phy_stats, rx_crc_err);
   19e5a:	4a3f      	ldr	r2, [pc, #252]	; (19f58 <ble_phy_rx_end_isr+0x138>)
   19e5c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   19e5e:	3301      	adds	r3, #1
   19e60:	62d3      	str	r3, [r2, #44]	; 0x2c
    tx_time = NRF_TIMER0->CC[2] + BLE_LL_IFS;
   19e62:	4a3e      	ldr	r2, [pc, #248]	; (19f5c <ble_phy_rx_end_isr+0x13c>)
   19e64:	f8d2 3548 	ldr.w	r3, [r2, #1352]	; 0x548
   19e68:	3396      	adds	r3, #150	; 0x96
    tx_time -= g_ble_phy_t_rxenddelay[ble_hdr->rxinfo.phy_mode];
   19e6a:	493a      	ldr	r1, [pc, #232]	; (19f54 <ble_phy_rx_end_isr+0x134>)
   19e6c:	7f88      	ldrb	r0, [r1, #30]
   19e6e:	4c3c      	ldr	r4, [pc, #240]	; (19f60 <ble_phy_rx_end_isr+0x140>)
   19e70:	5c20      	ldrb	r0, [r4, r0]
   19e72:	1a1b      	subs	r3, r3, r0
    tx_time -= BLE_PHY_T_TXENFAST;
   19e74:	3b28      	subs	r3, #40	; 0x28
    tx_time -= g_ble_phy_t_txdelay[g_ble_phy_data.phy_cur_phy_mode];
   19e76:	7a89      	ldrb	r1, [r1, #10]
   19e78:	483a      	ldr	r0, [pc, #232]	; (19f64 <ble_phy_rx_end_isr+0x144>)
   19e7a:	5c41      	ldrb	r1, [r0, r1]
   19e7c:	1a5b      	subs	r3, r3, r1
    NRF_TIMER0->CC[0] = tx_time;
   19e7e:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
    NRF_TIMER0->EVENTS_COMPARE[0] = 0;
   19e82:	2300      	movs	r3, #0
   19e84:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
    NRF_PPI->CHENSET = PPI_CHEN_CH20_Msk;
   19e88:	4b31      	ldr	r3, [pc, #196]	; (19f50 <ble_phy_rx_end_isr+0x130>)
   19e8a:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
   19e8e:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
    NRF_TIMER0->TASKS_CAPTURE[3] = 1;
   19e92:	2301      	movs	r3, #1
   19e94:	64d3      	str	r3, [r2, #76]	; 0x4c
    if (NRF_TIMER0->CC[3] > NRF_TIMER0->CC[0]) {
   19e96:	f8d2 154c 	ldr.w	r1, [r2, #1356]	; 0x54c
   19e9a:	f8d2 3540 	ldr.w	r3, [r2, #1344]	; 0x540
   19e9e:	4299      	cmp	r1, r3
   19ea0:	d907      	bls.n	19eb2 <ble_phy_rx_end_isr+0x92>
        NRF_PPI->CHENCLR = PPI_CHEN_CH20_Msk;
   19ea2:	4b2b      	ldr	r3, [pc, #172]	; (19f50 <ble_phy_rx_end_isr+0x130>)
   19ea4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   19ea8:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
        g_ble_phy_data.phy_transition_late = 1;
   19eac:	4b29      	ldr	r3, [pc, #164]	; (19f54 <ble_phy_rx_end_isr+0x134>)
   19eae:	2201      	movs	r2, #1
   19eb0:	715a      	strb	r2, [r3, #5]
    dptr[2] = dptr[1];
   19eb2:	482d      	ldr	r0, [pc, #180]	; (19f68 <ble_phy_rx_end_isr+0x148>)
   19eb4:	7903      	ldrb	r3, [r0, #4]
   19eb6:	7143      	strb	r3, [r0, #5]
    dptr[1] = dptr[0];
   19eb8:	78c3      	ldrb	r3, [r0, #3]
   19eba:	f800 3f04 	strb.w	r3, [r0, #4]!
    rc = ble_ll_rx_end(dptr + 1, ble_hdr);
   19ebe:	492b      	ldr	r1, [pc, #172]	; (19f6c <ble_phy_rx_end_isr+0x14c>)
   19ec0:	f7f6 fcec 	bl	1089c <ble_ll_rx_end>
    if (rc < 0) {
   19ec4:	2800      	cmp	r0, #0
   19ec6:	db3d      	blt.n	19f44 <ble_phy_rx_end_isr+0x124>
}
   19ec8:	bd10      	pop	{r4, pc}
    assert(NRF_RADIO->EVENTS_RSSIEND != 0);
   19eca:	f7f2 f98d 	bl	c1e8 <hal_debugger_connected>
   19ece:	b100      	cbz	r0, 19ed2 <ble_phy_rx_end_isr+0xb2>
   19ed0:	be01      	bkpt	0x0001
   19ed2:	2300      	movs	r3, #0
   19ed4:	461a      	mov	r2, r3
   19ed6:	4619      	mov	r1, r3
   19ed8:	4618      	mov	r0, r3
   19eda:	f7f2 fbbf 	bl	c65c <__assert_func>
        STATS_INC(ble_phy_stats, rx_valid);
   19ede:	4a1e      	ldr	r2, [pc, #120]	; (19f58 <ble_phy_rx_end_isr+0x138>)
   19ee0:	6a93      	ldr	r3, [r2, #40]	; 0x28
   19ee2:	3301      	adds	r3, #1
   19ee4:	6293      	str	r3, [r2, #40]	; 0x28
        ble_hdr->rxinfo.flags |= BLE_MBUF_HDR_F_CRC_OK;
   19ee6:	4a1b      	ldr	r2, [pc, #108]	; (19f54 <ble_phy_rx_end_isr+0x134>)
   19ee8:	8b13      	ldrh	r3, [r2, #24]
   19eea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   19eee:	8313      	strh	r3, [r2, #24]
        if (g_ble_phy_data.phy_encrypted) {
   19ef0:	79d2      	ldrb	r2, [r2, #7]
   19ef2:	2a00      	cmp	r2, #0
   19ef4:	d0b5      	beq.n	19e62 <ble_phy_rx_end_isr+0x42>
            if ((dptr[1] != 0) && (NRF_CCM->MICSTATUS == 0)) {
   19ef6:	4a1c      	ldr	r2, [pc, #112]	; (19f68 <ble_phy_rx_end_isr+0x148>)
   19ef8:	7912      	ldrb	r2, [r2, #4]
   19efa:	b13a      	cbz	r2, 19f0c <ble_phy_rx_end_isr+0xec>
   19efc:	4a1c      	ldr	r2, [pc, #112]	; (19f70 <ble_phy_rx_end_isr+0x150>)
   19efe:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
   19f02:	b91a      	cbnz	r2, 19f0c <ble_phy_rx_end_isr+0xec>
                ble_hdr->rxinfo.flags |= BLE_MBUF_HDR_F_MIC_FAILURE;
   19f04:	f043 0320 	orr.w	r3, r3, #32
   19f08:	4a12      	ldr	r2, [pc, #72]	; (19f54 <ble_phy_rx_end_isr+0x134>)
   19f0a:	8313      	strh	r3, [r2, #24]
            if (NRF_CCM->EVENTS_ERROR) {
   19f0c:	4b18      	ldr	r3, [pc, #96]	; (19f70 <ble_phy_rx_end_isr+0x150>)
   19f0e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
   19f12:	b143      	cbz	r3, 19f26 <ble_phy_rx_end_isr+0x106>
                STATS_INC(ble_phy_stats, rx_hw_err);
   19f14:	4a10      	ldr	r2, [pc, #64]	; (19f58 <ble_phy_rx_end_isr+0x138>)
   19f16:	6b93      	ldr	r3, [r2, #56]	; 0x38
   19f18:	3301      	adds	r3, #1
   19f1a:	6393      	str	r3, [r2, #56]	; 0x38
                ble_hdr->rxinfo.flags &= ~BLE_MBUF_HDR_F_CRC_OK;
   19f1c:	4a0d      	ldr	r2, [pc, #52]	; (19f54 <ble_phy_rx_end_isr+0x134>)
   19f1e:	8b13      	ldrh	r3, [r2, #24]
   19f20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   19f24:	8313      	strh	r3, [r2, #24]
            if (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   19f26:	4b12      	ldr	r3, [pc, #72]	; (19f70 <ble_phy_rx_end_isr+0x150>)
   19f28:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   19f2c:	2b00      	cmp	r3, #0
   19f2e:	d198      	bne.n	19e62 <ble_phy_rx_end_isr+0x42>
                STATS_INC(ble_phy_stats, rx_hw_err);
   19f30:	4a09      	ldr	r2, [pc, #36]	; (19f58 <ble_phy_rx_end_isr+0x138>)
   19f32:	6b93      	ldr	r3, [r2, #56]	; 0x38
   19f34:	3301      	adds	r3, #1
   19f36:	6393      	str	r3, [r2, #56]	; 0x38
                ble_hdr->rxinfo.flags &= ~BLE_MBUF_HDR_F_CRC_OK;
   19f38:	4a06      	ldr	r2, [pc, #24]	; (19f54 <ble_phy_rx_end_isr+0x134>)
   19f3a:	8b13      	ldrh	r3, [r2, #24]
   19f3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   19f40:	8313      	strh	r3, [r2, #24]
   19f42:	e78e      	b.n	19e62 <ble_phy_rx_end_isr+0x42>
        ble_phy_disable();
   19f44:	f7ff fec6 	bl	19cd4 <ble_phy_disable>
}
   19f48:	e7be      	b.n	19ec8 <ble_phy_rx_end_isr+0xa8>
   19f4a:	bf00      	nop
   19f4c:	40001000 	.word	0x40001000
   19f50:	4001f000 	.word	0x4001f000
   19f54:	200042fc 	.word	0x200042fc
   19f58:	2000443c 	.word	0x2000443c
   19f5c:	40008000 	.word	0x40008000
   19f60:	0002b044 	.word	0x0002b044
   19f64:	0002b048 	.word	0x0002b048
   19f68:	200028dc 	.word	0x200028dc
   19f6c:	20004314 	.word	0x20004314
   19f70:	4000f000 	.word	0x4000f000

00019f74 <ble_phy_isr>:
{
   19f74:	b510      	push	{r4, lr}
    irq_en = NRF_RADIO->INTENCLR;
   19f76:	4b22      	ldr	r3, [pc, #136]	; (1a000 <ble_phy_isr+0x8c>)
   19f78:	f8d3 4308 	ldr.w	r4, [r3, #776]	; 0x308
    if ((irq_en & RADIO_INTENCLR_ADDRESS_Msk) && NRF_RADIO->EVENTS_ADDRESS) {
   19f7c:	f014 0f02 	tst.w	r4, #2
   19f80:	d002      	beq.n	19f88 <ble_phy_isr+0x14>
   19f82:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   19f86:	b9fb      	cbnz	r3, 19fc8 <ble_phy_isr+0x54>
    if ((irq_en & RADIO_INTENCLR_DISABLED_Msk) && NRF_RADIO->EVENTS_DISABLED) {
   19f88:	f014 0f10 	tst.w	r4, #16
   19f8c:	d00a      	beq.n	19fa4 <ble_phy_isr+0x30>
   19f8e:	4b1c      	ldr	r3, [pc, #112]	; (1a000 <ble_phy_isr+0x8c>)
   19f90:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   19f94:	b133      	cbz	r3, 19fa4 <ble_phy_isr+0x30>
        if (g_ble_phy_data.phy_state == BLE_PHY_STATE_RX) {
   19f96:	4b1b      	ldr	r3, [pc, #108]	; (1a004 <ble_phy_isr+0x90>)
   19f98:	78db      	ldrb	r3, [r3, #3]
   19f9a:	2b01      	cmp	r3, #1
   19f9c:	d01b      	beq.n	19fd6 <ble_phy_isr+0x62>
        } else if (g_ble_phy_data.phy_state == BLE_PHY_STATE_IDLE) {
   19f9e:	b30b      	cbz	r3, 19fe4 <ble_phy_isr+0x70>
            ble_phy_tx_end_isr();
   19fa0:	f7ff fcc2 	bl	19928 <ble_phy_tx_end_isr>
    if ((irq_en & RADIO_INTENCLR_END_Msk) && NRF_RADIO->EVENTS_END) {
   19fa4:	f014 0f08 	tst.w	r4, #8
   19fa8:	d003      	beq.n	19fb2 <ble_phy_isr+0x3e>
   19faa:	4b15      	ldr	r3, [pc, #84]	; (1a000 <ble_phy_isr+0x8c>)
   19fac:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
   19fb0:	bb13      	cbnz	r3, 19ff8 <ble_phy_isr+0x84>
    g_ble_phy_data.phy_transition_late = 0;
   19fb2:	4b14      	ldr	r3, [pc, #80]	; (1a004 <ble_phy_isr+0x90>)
   19fb4:	2200      	movs	r2, #0
   19fb6:	715a      	strb	r2, [r3, #5]
    irq_en = NRF_RADIO->SHORTS;
   19fb8:	4b11      	ldr	r3, [pc, #68]	; (1a000 <ble_phy_isr+0x8c>)
   19fba:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    STATS_INC(ble_phy_stats, phy_isrs);
   19fbe:	4a12      	ldr	r2, [pc, #72]	; (1a008 <ble_phy_isr+0x94>)
   19fc0:	68d3      	ldr	r3, [r2, #12]
   19fc2:	3301      	adds	r3, #1
   19fc4:	60d3      	str	r3, [r2, #12]
}
   19fc6:	bd10      	pop	{r4, pc}
        if (ble_phy_rx_start_isr()) {
   19fc8:	f7ff fe8a 	bl	19ce0 <ble_phy_rx_start_isr>
   19fcc:	2800      	cmp	r0, #0
   19fce:	d0db      	beq.n	19f88 <ble_phy_isr+0x14>
            irq_en &= ~RADIO_INTENCLR_DISABLED_Msk;
   19fd0:	f024 0410 	bic.w	r4, r4, #16
   19fd4:	e7d8      	b.n	19f88 <ble_phy_isr+0x14>
            NRF_RADIO->EVENTS_DISABLED = 0;
   19fd6:	2000      	movs	r0, #0
   19fd8:	4b09      	ldr	r3, [pc, #36]	; (1a000 <ble_phy_isr+0x8c>)
   19fda:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
            ble_ll_wfr_timer_exp(NULL);
   19fde:	f7f6 fbe5 	bl	107ac <ble_ll_wfr_timer_exp>
   19fe2:	e7df      	b.n	19fa4 <ble_phy_isr+0x30>
            assert(0);
   19fe4:	f7f2 f900 	bl	c1e8 <hal_debugger_connected>
   19fe8:	b100      	cbz	r0, 19fec <ble_phy_isr+0x78>
   19fea:	be01      	bkpt	0x0001
   19fec:	2300      	movs	r3, #0
   19fee:	461a      	mov	r2, r3
   19ff0:	4619      	mov	r1, r3
   19ff2:	4618      	mov	r0, r3
   19ff4:	f7f2 fb32 	bl	c65c <__assert_func>
        ble_phy_rx_end_isr();
   19ff8:	f7ff ff12 	bl	19e20 <ble_phy_rx_end_isr>
   19ffc:	e7d9      	b.n	19fb2 <ble_phy_isr+0x3e>
   19ffe:	bf00      	nop
   1a000:	40001000 	.word	0x40001000
   1a004:	200042fc 	.word	0x200042fc
   1a008:	2000443c 	.word	0x2000443c

0001a00c <ble_phy_rx>:
{
   1a00c:	b508      	push	{r3, lr}
    nrf_wait_disabled();
   1a00e:	f7ff faab 	bl	19568 <nrf_wait_disabled>
    if ((NRF_RADIO->STATE != RADIO_STATE_STATE_Disabled) &&
   1a012:	4b18      	ldr	r3, [pc, #96]	; (1a074 <ble_phy_rx+0x68>)
   1a014:	f8d3 3550 	ldr.w	r3, [r3, #1360]	; 0x550
   1a018:	b133      	cbz	r3, 1a028 <ble_phy_rx+0x1c>
            ((NRF_RADIO->STATE & 0x07) != RADIO_STATE_STATE_RxIdle)) {
   1a01a:	4b16      	ldr	r3, [pc, #88]	; (1a074 <ble_phy_rx+0x68>)
   1a01c:	f8d3 3550 	ldr.w	r3, [r3, #1360]	; 0x550
   1a020:	f003 0307 	and.w	r3, r3, #7
    if ((NRF_RADIO->STATE != RADIO_STATE_STATE_Disabled) &&
   1a024:	2b02      	cmp	r3, #2
   1a026:	d113      	bne.n	1a050 <ble_phy_rx+0x44>
    NRF_RADIO->INTENCLR = NRF_RADIO_IRQ_MASK_ALL;
   1a028:	4b12      	ldr	r3, [pc, #72]	; (1a074 <ble_phy_rx+0x68>)
   1a02a:	f243 42ff 	movw	r2, #13567	; 0x34ff
   1a02e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    NRF_RADIO->EVENTS_END = 0;
   1a032:	2200      	movs	r2, #0
   1a034:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    NRF_RADIO->EVENTS_DISABLED = 0;
   1a038:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    ble_phy_rx_xcvr_setup();
   1a03c:	f7ff fafc 	bl	19638 <ble_phy_rx_xcvr_setup>
    assert(NRF_PPI->CHEN & PPI_CHEN_CH21_Msk);
   1a040:	4b0d      	ldr	r3, [pc, #52]	; (1a078 <ble_phy_rx+0x6c>)
   1a042:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
   1a046:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
   1a04a:	d009      	beq.n	1a060 <ble_phy_rx+0x54>
    return 0;
   1a04c:	2000      	movs	r0, #0
}
   1a04e:	bd08      	pop	{r3, pc}
        ble_phy_disable();
   1a050:	f7ff fe40 	bl	19cd4 <ble_phy_disable>
        STATS_INC(ble_phy_stats, radio_state_errs);
   1a054:	4a09      	ldr	r2, [pc, #36]	; (1a07c <ble_phy_rx+0x70>)
   1a056:	6b53      	ldr	r3, [r2, #52]	; 0x34
   1a058:	3301      	adds	r3, #1
   1a05a:	6353      	str	r3, [r2, #52]	; 0x34
        return BLE_PHY_ERR_RADIO_STATE;
   1a05c:	2001      	movs	r0, #1
   1a05e:	e7f6      	b.n	1a04e <ble_phy_rx+0x42>
    assert(NRF_PPI->CHEN & PPI_CHEN_CH21_Msk);
   1a060:	f7f2 f8c2 	bl	c1e8 <hal_debugger_connected>
   1a064:	b100      	cbz	r0, 1a068 <ble_phy_rx+0x5c>
   1a066:	be01      	bkpt	0x0001
   1a068:	2300      	movs	r3, #0
   1a06a:	461a      	mov	r2, r3
   1a06c:	4619      	mov	r1, r3
   1a06e:	4618      	mov	r0, r3
   1a070:	f7f2 faf4 	bl	c65c <__assert_func>
   1a074:	40001000 	.word	0x40001000
   1a078:	4001f000 	.word	0x4001f000
   1a07c:	2000443c 	.word	0x2000443c

0001a080 <ble_phy_rx_set_start_time>:
{
   1a080:	b510      	push	{r4, lr}
    NRF_PPI->CHENCLR = PPI_CHEN_CH20_Msk;
   1a082:	4b10      	ldr	r3, [pc, #64]	; (1a0c4 <ble_phy_rx_set_start_time+0x44>)
   1a084:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   1a088:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    if (ble_phy_set_start_time(cputime, rem_usecs, false) != 0) {
   1a08c:	2200      	movs	r2, #0
   1a08e:	f7ff fa7b 	bl	19588 <ble_phy_set_start_time>
   1a092:	b960      	cbnz	r0, 1a0ae <ble_phy_rx_set_start_time+0x2e>
    bool late = false;
   1a094:	2400      	movs	r4, #0
    NRF_PPI->CHENSET = PPI_CHEN_CH21_Msk;
   1a096:	4b0b      	ldr	r3, [pc, #44]	; (1a0c4 <ble_phy_rx_set_start_time+0x44>)
   1a098:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   1a09c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    rc = ble_phy_rx();
   1a0a0:	f7ff ffb4 	bl	1a00c <ble_phy_rx>
    if (!rc && late) {
   1a0a4:	4603      	mov	r3, r0
   1a0a6:	b900      	cbnz	r0, 1a0aa <ble_phy_rx_set_start_time+0x2a>
   1a0a8:	b94c      	cbnz	r4, 1a0be <ble_phy_rx_set_start_time+0x3e>
}
   1a0aa:	4618      	mov	r0, r3
   1a0ac:	bd10      	pop	{r4, pc}
        STATS_INC(ble_phy_stats, rx_late);
   1a0ae:	4a06      	ldr	r2, [pc, #24]	; (1a0c8 <ble_phy_rx_set_start_time+0x48>)
   1a0b0:	6b13      	ldr	r3, [r2, #48]	; 0x30
   1a0b2:	3301      	adds	r3, #1
   1a0b4:	6313      	str	r3, [r2, #48]	; 0x30
        ble_phy_set_start_now();
   1a0b6:	f7ff fb83 	bl	197c0 <ble_phy_set_start_now>
        late = true;
   1a0ba:	2401      	movs	r4, #1
   1a0bc:	e7eb      	b.n	1a096 <ble_phy_rx_set_start_time+0x16>
        rc = BLE_PHY_ERR_RX_LATE;
   1a0be:	2306      	movs	r3, #6
    return rc;
   1a0c0:	e7f3      	b.n	1a0aa <ble_phy_rx_set_start_time+0x2a>
   1a0c2:	bf00      	nop
   1a0c4:	4001f000 	.word	0x4001f000
   1a0c8:	2000443c 	.word	0x2000443c

0001a0cc <ble_phy_restart_rx>:
{
   1a0cc:	b508      	push	{r3, lr}
    ble_phy_stop_usec_timer();
   1a0ce:	f7ff fb4b 	bl	19768 <ble_phy_stop_usec_timer>
    ble_phy_disable_irq_and_ppi();
   1a0d2:	f7ff fb57 	bl	19784 <ble_phy_disable_irq_and_ppi>
    ble_phy_set_start_now();
   1a0d6:	f7ff fb73 	bl	197c0 <ble_phy_set_start_now>
    NRF_PPI->CHENSET = PPI_CHEN_CH21_Msk;
   1a0da:	4b04      	ldr	r3, [pc, #16]	; (1a0ec <ble_phy_restart_rx+0x20>)
   1a0dc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   1a0e0:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    ble_phy_rx();
   1a0e4:	f7ff ff92 	bl	1a00c <ble_phy_rx>
}
   1a0e8:	bd08      	pop	{r3, pc}
   1a0ea:	bf00      	nop
   1a0ec:	4001f000 	.word	0x4001f000

0001a0f0 <ble_phy_tx_set_start_time>:
{
   1a0f0:	b508      	push	{r3, lr}
    NRF_PPI->CHENCLR = PPI_CHEN_CH21_Msk;
   1a0f2:	4b0c      	ldr	r3, [pc, #48]	; (1a124 <ble_phy_tx_set_start_time+0x34>)
   1a0f4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   1a0f8:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    if (ble_phy_set_start_time(cputime, rem_usecs, true) != 0) {
   1a0fc:	2201      	movs	r2, #1
   1a0fe:	f7ff fa43 	bl	19588 <ble_phy_set_start_time>
   1a102:	b938      	cbnz	r0, 1a114 <ble_phy_tx_set_start_time+0x24>
   1a104:	4603      	mov	r3, r0
        NRF_PPI->CHENSET = PPI_CHEN_CH20_Msk;
   1a106:	4a07      	ldr	r2, [pc, #28]	; (1a124 <ble_phy_tx_set_start_time+0x34>)
   1a108:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
   1a10c:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
}
   1a110:	4618      	mov	r0, r3
   1a112:	bd08      	pop	{r3, pc}
        STATS_INC(ble_phy_stats, tx_late);
   1a114:	4a04      	ldr	r2, [pc, #16]	; (1a128 <ble_phy_tx_set_start_time+0x38>)
   1a116:	6993      	ldr	r3, [r2, #24]
   1a118:	3301      	adds	r3, #1
   1a11a:	6193      	str	r3, [r2, #24]
        ble_phy_disable();
   1a11c:	f7ff fdda 	bl	19cd4 <ble_phy_disable>
        rc = BLE_PHY_ERR_TX_LATE;
   1a120:	2305      	movs	r3, #5
   1a122:	e7f5      	b.n	1a110 <ble_phy_tx_set_start_time+0x20>
   1a124:	4001f000 	.word	0x4001f000
   1a128:	2000443c 	.word	0x2000443c

0001a12c <ble_phy_tx>:
{
   1a12c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a130:	b082      	sub	sp, #8
    if (g_ble_phy_data.phy_transition_late) {
   1a132:	4b3c      	ldr	r3, [pc, #240]	; (1a224 <ble_phy_tx+0xf8>)
   1a134:	795b      	ldrb	r3, [r3, #5]
   1a136:	2b00      	cmp	r3, #0
   1a138:	d15d      	bne.n	1a1f6 <ble_phy_tx+0xca>
   1a13a:	4607      	mov	r7, r0
   1a13c:	4688      	mov	r8, r1
   1a13e:	4616      	mov	r6, r2
    nrf_wait_disabled();
   1a140:	f7ff fa12 	bl	19568 <nrf_wait_disabled>
    NRF_PPI->CHENCLR = PPI_CHEN_CH4_Msk | PPI_CHEN_CH5_Msk | PPI_CHEN_CH23_Msk |
   1a144:	4b38      	ldr	r3, [pc, #224]	; (1a228 <ble_phy_tx+0xfc>)
   1a146:	4a39      	ldr	r2, [pc, #228]	; (1a22c <ble_phy_tx+0x100>)
   1a148:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    if (g_ble_phy_data.phy_encrypted) {
   1a14c:	4b35      	ldr	r3, [pc, #212]	; (1a224 <ble_phy_tx+0xf8>)
   1a14e:	79db      	ldrb	r3, [r3, #7]
   1a150:	2b00      	cmp	r3, #0
   1a152:	d058      	beq.n	1a206 <ble_phy_tx+0xda>
        NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   1a154:	4d36      	ldr	r5, [pc, #216]	; (1a230 <ble_phy_tx+0x104>)
   1a156:	2301      	movs	r3, #1
   1a158:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
        NRF_CCM->INPTR = (uint32_t)dptr;
   1a15c:	4c35      	ldr	r4, [pc, #212]	; (1a234 <ble_phy_tx+0x108>)
   1a15e:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
        NRF_CCM->OUTPTR = (uint32_t)pktptr;
   1a162:	4b35      	ldr	r3, [pc, #212]	; (1a238 <ble_phy_tx+0x10c>)
   1a164:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
        NRF_CCM->SCRATCHPTR = (uint32_t)&g_nrf_encrypt_scratchpad[0];
   1a168:	4b34      	ldr	r3, [pc, #208]	; (1a23c <ble_phy_tx+0x110>)
   1a16a:	f8c5 3514 	str.w	r3, [r5, #1300]	; 0x514
        NRF_CCM->EVENTS_ERROR = 0;
   1a16e:	2300      	movs	r3, #0
   1a170:	f8c5 3108 	str.w	r3, [r5, #264]	; 0x108
        NRF_CCM->MODE = CCM_MODE_LENGTH_Msk | ble_phy_get_ccm_datarate();
   1a174:	f7ff fa5e 	bl	19634 <ble_phy_get_ccm_datarate>
   1a178:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
   1a17c:	f8c5 0504 	str.w	r0, [r5, #1284]	; 0x504
        NRF_CCM->CNFPTR = (uint32_t)&g_nrf_ccm_data;
   1a180:	4b2f      	ldr	r3, [pc, #188]	; (1a240 <ble_phy_tx+0x114>)
   1a182:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
    payload_len = pducb(&dptr[3], pducb_arg, &hdr_byte);
   1a186:	f10d 0207 	add.w	r2, sp, #7
   1a18a:	4641      	mov	r1, r8
   1a18c:	1ce0      	adds	r0, r4, #3
   1a18e:	47b8      	blx	r7
    dptr[0] = hdr_byte;
   1a190:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1a194:	7023      	strb	r3, [r4, #0]
    dptr[1] = payload_len;
   1a196:	7060      	strb	r0, [r4, #1]
    dptr[2] = 0;
   1a198:	2300      	movs	r3, #0
   1a19a:	70a3      	strb	r3, [r4, #2]
    if (g_ble_phy_data.phy_encrypted) {
   1a19c:	4b21      	ldr	r3, [pc, #132]	; (1a224 <ble_phy_tx+0xf8>)
   1a19e:	79db      	ldrb	r3, [r3, #7]
   1a1a0:	b113      	cbz	r3, 1a1a8 <ble_phy_tx+0x7c>
        NRF_CCM->TASKS_KSGEN = 1;
   1a1a2:	4b23      	ldr	r3, [pc, #140]	; (1a230 <ble_phy_tx+0x104>)
   1a1a4:	2201      	movs	r2, #1
   1a1a6:	601a      	str	r2, [r3, #0]
    NRF_RADIO->PACKETPTR = (uint32_t)pktptr;
   1a1a8:	4b26      	ldr	r3, [pc, #152]	; (1a244 <ble_phy_tx+0x118>)
   1a1aa:	4a23      	ldr	r2, [pc, #140]	; (1a238 <ble_phy_tx+0x10c>)
   1a1ac:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    NRF_RADIO->EVENTS_READY = 0;
   1a1b0:	2200      	movs	r2, #0
   1a1b2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    NRF_RADIO->EVENTS_END = 0;
   1a1b6:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    NRF_RADIO->EVENTS_DISABLED = 0;
   1a1ba:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    NRF_RADIO->SHORTS = shortcuts;
   1a1be:	2203      	movs	r2, #3
   1a1c0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    NRF_RADIO->INTENSET = RADIO_INTENSET_DISABLED_Msk;
   1a1c4:	2210      	movs	r2, #16
   1a1c6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    g_ble_phy_data.phy_transition = end_trans;
   1a1ca:	4a16      	ldr	r2, [pc, #88]	; (1a224 <ble_phy_tx+0xf8>)
   1a1cc:	7116      	strb	r6, [r2, #4]
    g_ble_phy_data.phy_tx_pyld_len = payload_len;
   1a1ce:	7250      	strb	r0, [r2, #9]
    state = NRF_RADIO->STATE;
   1a1d0:	f8d3 3550 	ldr.w	r3, [r3, #1360]	; 0x550
    if (state != RADIO_STATE_STATE_Tx) {
   1a1d4:	2b0b      	cmp	r3, #11
   1a1d6:	d01c      	beq.n	1a212 <ble_phy_tx+0xe6>
        g_ble_phy_data.phy_state = BLE_PHY_STATE_TX;
   1a1d8:	4613      	mov	r3, r2
   1a1da:	2202      	movs	r2, #2
   1a1dc:	70da      	strb	r2, [r3, #3]
        STATS_INC(ble_phy_stats, tx_good);
   1a1de:	4b1a      	ldr	r3, [pc, #104]	; (1a248 <ble_phy_tx+0x11c>)
   1a1e0:	691a      	ldr	r2, [r3, #16]
   1a1e2:	3201      	adds	r2, #1
   1a1e4:	611a      	str	r2, [r3, #16]
        STATS_INCN(ble_phy_stats, tx_bytes, payload_len + BLE_LL_PDU_HDR_LEN);
   1a1e6:	69da      	ldr	r2, [r3, #28]
   1a1e8:	4410      	add	r0, r2
   1a1ea:	3002      	adds	r0, #2
   1a1ec:	61d8      	str	r0, [r3, #28]
        rc = BLE_ERR_SUCCESS;
   1a1ee:	2000      	movs	r0, #0
}
   1a1f0:	b002      	add	sp, #8
   1a1f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ble_phy_disable();
   1a1f6:	f7ff fd6d 	bl	19cd4 <ble_phy_disable>
        STATS_INC(ble_phy_stats, tx_late);
   1a1fa:	4a13      	ldr	r2, [pc, #76]	; (1a248 <ble_phy_tx+0x11c>)
   1a1fc:	6993      	ldr	r3, [r2, #24]
   1a1fe:	3301      	adds	r3, #1
   1a200:	6193      	str	r3, [r2, #24]
        return BLE_PHY_ERR_TX_LATE;
   1a202:	2005      	movs	r0, #5
   1a204:	e7f4      	b.n	1a1f0 <ble_phy_tx+0xc4>
        NRF_AAR->IRKPTR = (uint32_t)&g_nrf_irk_list[0];
   1a206:	4a11      	ldr	r2, [pc, #68]	; (1a24c <ble_phy_tx+0x120>)
   1a208:	4b09      	ldr	r3, [pc, #36]	; (1a230 <ble_phy_tx+0x104>)
   1a20a:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
        dptr = (uint8_t *)&g_ble_phy_tx_buf[0];
   1a20e:	4c0a      	ldr	r4, [pc, #40]	; (1a238 <ble_phy_tx+0x10c>)
   1a210:	e7b9      	b.n	1a186 <ble_phy_tx+0x5a>
        ble_phy_disable();
   1a212:	f7ff fd5f 	bl	19cd4 <ble_phy_disable>
        STATS_INC(ble_phy_stats, tx_late);
   1a216:	4a0c      	ldr	r2, [pc, #48]	; (1a248 <ble_phy_tx+0x11c>)
   1a218:	6993      	ldr	r3, [r2, #24]
   1a21a:	3301      	adds	r3, #1
   1a21c:	6193      	str	r3, [r2, #24]
        rc = BLE_PHY_ERR_RADIO_STATE;
   1a21e:	2001      	movs	r0, #1
   1a220:	e7e6      	b.n	1a1f0 <ble_phy_tx+0xc4>
   1a222:	bf00      	nop
   1a224:	200042fc 	.word	0x200042fc
   1a228:	4001f000 	.word	0x4001f000
   1a22c:	02800030 	.word	0x02800030
   1a230:	4000f000 	.word	0x4000f000
   1a234:	200027d8 	.word	0x200027d8
   1a238:	200029e0 	.word	0x200029e0
   1a23c:	20004330 	.word	0x20004330
   1a240:	2000447c 	.word	0x2000447c
   1a244:	40001000 	.word	0x40001000
   1a248:	2000443c 	.word	0x2000443c
   1a24c:	200042b8 	.word	0x200042b8

0001a250 <ble_phy_access_addr_get>:

/* Gets the current access address */
uint32_t ble_phy_access_addr_get(void)
{
    return g_ble_phy_data.phy_access_address;
}
   1a250:	4b01      	ldr	r3, [pc, #4]	; (1a258 <ble_phy_access_addr_get+0x8>)
   1a252:	6958      	ldr	r0, [r3, #20]
   1a254:	4770      	bx	lr
   1a256:	bf00      	nop
   1a258:	200042fc 	.word	0x200042fc

0001a25c <ble_phy_rx_started>:
 */
int
ble_phy_rx_started(void)
{
    return g_ble_phy_data.phy_rx_started;
}
   1a25c:	4b01      	ldr	r3, [pc, #4]	; (1a264 <ble_phy_rx_started+0x8>)
   1a25e:	7998      	ldrb	r0, [r3, #6]
   1a260:	4770      	bx	lr
   1a262:	bf00      	nop
   1a264:	200042fc 	.word	0x200042fc

0001a268 <ble_phy_xcvr_state_get>:
 */
uint8_t
ble_phy_xcvr_state_get(void)
{
    uint32_t state;
    state = NRF_RADIO->STATE;
   1a268:	4b02      	ldr	r3, [pc, #8]	; (1a274 <ble_phy_xcvr_state_get+0xc>)
   1a26a:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
    return (uint8_t)state;
}
   1a26e:	b2c0      	uxtb	r0, r0
   1a270:	4770      	bx	lr
   1a272:	bf00      	nop
   1a274:	40001000 	.word	0x40001000

0001a278 <ble_phy_max_data_pdu_pyld>:
 */
uint8_t
ble_phy_max_data_pdu_pyld(void)
{
    return BLE_LL_DATA_PDU_MAX_PYLD;
}
   1a278:	20fb      	movs	r0, #251	; 0xfb
   1a27a:	4770      	bx	lr

0001a27c <ble_phy_resolv_list_enable>:

#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LL_PRIVACY)
void
ble_phy_resolv_list_enable(void)
{
    NRF_AAR->NIRK = (uint32_t)g_nrf_num_irks;
   1a27c:	4b04      	ldr	r3, [pc, #16]	; (1a290 <ble_phy_resolv_list_enable+0x14>)
   1a27e:	781a      	ldrb	r2, [r3, #0]
   1a280:	4b04      	ldr	r3, [pc, #16]	; (1a294 <ble_phy_resolv_list_enable+0x18>)
   1a282:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    g_ble_phy_data.phy_privacy = 1;
   1a286:	4b04      	ldr	r3, [pc, #16]	; (1a298 <ble_phy_resolv_list_enable+0x1c>)
   1a288:	2201      	movs	r2, #1
   1a28a:	721a      	strb	r2, [r3, #8]
}
   1a28c:	4770      	bx	lr
   1a28e:	bf00      	nop
   1a290:	200042b4 	.word	0x200042b4
   1a294:	4000f000 	.word	0x4000f000
   1a298:	200042fc 	.word	0x200042fc

0001a29c <ble_phy_resolv_list_disable>:

void
ble_phy_resolv_list_disable(void)
{
    g_ble_phy_data.phy_privacy = 0;
   1a29c:	4b01      	ldr	r3, [pc, #4]	; (1a2a4 <ble_phy_resolv_list_disable+0x8>)
   1a29e:	2200      	movs	r2, #0
   1a2a0:	721a      	strb	r2, [r3, #8]
}
   1a2a2:	4770      	bx	lr
   1a2a4:	200042fc 	.word	0x200042fc

0001a2a8 <ble_phy_rfclk_enable>:
}
#endif

void
ble_phy_rfclk_enable(void)
{
   1a2a8:	b508      	push	{r3, lr}
#if MYNEWT
    nrf52_clock_hfxo_request();
   1a2aa:	f00e ff17 	bl	290dc <nrf52_clock_hfxo_request>
#else
    NRF_CLOCK->TASKS_HFCLKSTART = 1;
#endif
}
   1a2ae:	bd08      	pop	{r3, pc}

0001a2b0 <ble_phy_rfclk_disable>:

void
ble_phy_rfclk_disable(void)
{
   1a2b0:	b508      	push	{r3, lr}
#if MYNEWT
    nrf52_clock_hfxo_release();
   1a2b2:	f00e ff35 	bl	29120 <nrf52_clock_hfxo_release>
#else
    NRF_CLOCK->TASKS_HFCLKSTOP = 1;
#endif
}
   1a2b6:	bd08      	pop	{r3, pc}

0001a2b8 <ble_gap_call_event_cb>:
ble_gap_event_listener_call(struct ble_gap_event *event);

static int
ble_gap_call_event_cb(struct ble_gap_event *event,
                      ble_gap_event_fn *cb, void *cb_arg)
{
   1a2b8:	b508      	push	{r3, lr}
    int rc;

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());

    if (cb != NULL) {
   1a2ba:	b119      	cbz	r1, 1a2c4 <ble_gap_call_event_cb+0xc>
   1a2bc:	460b      	mov	r3, r1
   1a2be:	4611      	mov	r1, r2
        rc = cb(event, cb_arg);
   1a2c0:	4798      	blx	r3
        }
        rc = 0;
    }

    return rc;
}
   1a2c2:	bd08      	pop	{r3, pc}
        if (event->type == BLE_GAP_EVENT_CONN_UPDATE_REQ) {
   1a2c4:	7803      	ldrb	r3, [r0, #0]
   1a2c6:	2b04      	cmp	r3, #4
   1a2c8:	d001      	beq.n	1a2ce <ble_gap_call_event_cb+0x16>
        rc = 0;
   1a2ca:	2000      	movs	r0, #0
    return rc;
   1a2cc:	e7f9      	b.n	1a2c2 <ble_gap_call_event_cb+0xa>
                *event->conn_update_req.peer_params;
   1a2ce:	6842      	ldr	r2, [r0, #4]
            *event->conn_update_req.self_params =
   1a2d0:	6883      	ldr	r3, [r0, #8]
   1a2d2:	6810      	ldr	r0, [r2, #0]
   1a2d4:	6851      	ldr	r1, [r2, #4]
   1a2d6:	6892      	ldr	r2, [r2, #8]
   1a2d8:	6018      	str	r0, [r3, #0]
   1a2da:	6059      	str	r1, [r3, #4]
   1a2dc:	609a      	str	r2, [r3, #8]
        rc = 0;
   1a2de:	2000      	movs	r0, #0
   1a2e0:	e7ef      	b.n	1a2c2 <ble_gap_call_event_cb+0xa>
	...

0001a2e4 <ble_gap_is_preempted>:
{
    int i;

    BLE_HS_DBG_ASSERT(ble_hs_locked_by_cur_task());

    if (ble_gap_master.preempted_op != BLE_GAP_OP_NULL) {
   1a2e4:	4b09      	ldr	r3, [pc, #36]	; (1a30c <ble_gap_is_preempted+0x28>)
   1a2e6:	7c1b      	ldrb	r3, [r3, #16]
   1a2e8:	b963      	cbnz	r3, 1a304 <ble_gap_is_preempted+0x20>
        return true;
    }

    for (i = 0; i < BLE_ADV_INSTANCES; i++) {
   1a2ea:	2b00      	cmp	r3, #0
   1a2ec:	dd01      	ble.n	1a2f2 <ble_gap_is_preempted+0xe>
        if (ble_gap_slave[i].preempted) {
            return true;
        }
    }

    return false;
   1a2ee:	2000      	movs	r0, #0
   1a2f0:	4770      	bx	lr
        if (ble_gap_slave[i].preempted) {
   1a2f2:	4a06      	ldr	r2, [pc, #24]	; (1a30c <ble_gap_is_preempted+0x28>)
   1a2f4:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   1a2f8:	7d52      	ldrb	r2, [r2, #21]
   1a2fa:	f012 0f04 	tst.w	r2, #4
   1a2fe:	d103      	bne.n	1a308 <ble_gap_is_preempted+0x24>
    for (i = 0; i < BLE_ADV_INSTANCES; i++) {
   1a300:	3301      	adds	r3, #1
   1a302:	e7f2      	b.n	1a2ea <ble_gap_is_preempted+0x6>
        return true;
   1a304:	2001      	movs	r0, #1
   1a306:	4770      	bx	lr
            return true;
   1a308:	2001      	movs	r0, #1
}
   1a30a:	4770      	bx	lr
   1a30c:	20000224 	.word	0x20000224

0001a310 <ble_gap_has_client>:

#if NIMBLE_BLE_CONNECT
static bool
ble_gap_has_client(struct ble_gap_master_state *out_state)
{
    if (!out_state) {
   1a310:	b120      	cbz	r0, 1a31c <ble_gap_has_client+0xc>
        return 0;
    }

    return out_state->cb;
   1a312:	6880      	ldr	r0, [r0, #8]
   1a314:	3000      	adds	r0, #0
   1a316:	bf18      	it	ne
   1a318:	2001      	movne	r0, #1
   1a31a:	4770      	bx	lr
        return 0;
   1a31c:	2000      	movs	r0, #0
}
   1a31e:	4770      	bx	lr

0001a320 <ble_gap_update_to_l2cap>:
#if NIMBLE_BLE_CONNECT
static void
ble_gap_update_to_l2cap(const struct ble_gap_upd_params *params,
                        struct ble_l2cap_sig_update_params *l2cap_params)
{
    l2cap_params->itvl_min = params->itvl_min;
   1a320:	8803      	ldrh	r3, [r0, #0]
   1a322:	800b      	strh	r3, [r1, #0]
    l2cap_params->itvl_max = params->itvl_max;
   1a324:	8843      	ldrh	r3, [r0, #2]
   1a326:	804b      	strh	r3, [r1, #2]
    l2cap_params->slave_latency = params->latency;
   1a328:	8883      	ldrh	r3, [r0, #4]
   1a32a:	808b      	strh	r3, [r1, #4]
    l2cap_params->timeout_multiplier = params->supervision_timeout;
   1a32c:	88c3      	ldrh	r3, [r0, #6]
   1a32e:	80cb      	strh	r3, [r1, #6]
}
   1a330:	4770      	bx	lr
	...

0001a334 <ble_gap_adv_active_instance>:

static int
ble_gap_adv_active_instance(uint8_t instance)
{
    /* Assume read is atomic; mutex not necessary. */
    return ble_gap_slave[instance].op == BLE_GAP_OP_S_ADV;
   1a334:	4b04      	ldr	r3, [pc, #16]	; (1a348 <ble_gap_adv_active_instance+0x14>)
   1a336:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   1a33a:	7d00      	ldrb	r0, [r0, #20]
}
   1a33c:	2801      	cmp	r0, #1
   1a33e:	bf14      	ite	ne
   1a340:	2000      	movne	r0, #0
   1a342:	2001      	moveq	r0, #1
   1a344:	4770      	bx	lr
   1a346:	bf00      	nop
   1a348:	20000224 	.word	0x20000224

0001a34c <ble_gap_accept_master_conn>:
static int
ble_gap_accept_master_conn(void)
{
    int rc;

    switch (ble_gap_master.op) {
   1a34c:	4b05      	ldr	r3, [pc, #20]	; (1a364 <ble_gap_accept_master_conn+0x18>)
   1a34e:	781b      	ldrb	r3, [r3, #0]
   1a350:	2b02      	cmp	r3, #2
   1a352:	d105      	bne.n	1a360 <ble_gap_accept_master_conn+0x14>
        rc = BLE_HS_ENOENT;
        break;
    }

    if (rc == 0) {
        STATS_INC(ble_gap_stats, connect_mst);
   1a354:	4a04      	ldr	r2, [pc, #16]	; (1a368 <ble_gap_accept_master_conn+0x1c>)
   1a356:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
   1a358:	3301      	adds	r3, #1
   1a35a:	65d3      	str	r3, [r2, #92]	; 0x5c
        rc = 0;
   1a35c:	2000      	movs	r0, #0
   1a35e:	4770      	bx	lr
        rc = BLE_HS_ENOENT;
   1a360:	2005      	movs	r0, #5
    }

    return rc;
}
   1a362:	4770      	bx	lr
   1a364:	20000224 	.word	0x20000224
   1a368:	200044a0 	.word	0x200044a0

0001a36c <ble_gap_accept_slave_conn>:
static int
ble_gap_accept_slave_conn(uint8_t instance)
{
    int rc;

    if (instance >= BLE_ADV_INSTANCES) {
   1a36c:	b988      	cbnz	r0, 1a392 <ble_gap_accept_slave_conn+0x26>
{
   1a36e:	b510      	push	{r4, lr}
   1a370:	4604      	mov	r4, r0
       rc = BLE_HS_ENOENT;
    } else if (!ble_gap_adv_active_instance(instance)) {
   1a372:	f7ff ffdf 	bl	1a334 <ble_gap_adv_active_instance>
   1a376:	b170      	cbz	r0, 1a396 <ble_gap_accept_slave_conn+0x2a>
        rc = BLE_HS_ENOENT;
    } else {
        if (ble_gap_slave[instance].connectable) {
   1a378:	4b09      	ldr	r3, [pc, #36]	; (1a3a0 <ble_gap_accept_slave_conn+0x34>)
   1a37a:	eb03 1404 	add.w	r4, r3, r4, lsl #4
   1a37e:	7d63      	ldrb	r3, [r4, #21]
   1a380:	f013 0f08 	tst.w	r3, #8
   1a384:	d009      	beq.n	1a39a <ble_gap_accept_slave_conn+0x2e>
            rc = BLE_HS_ENOENT;
        }
    }

    if (rc == 0) {
        STATS_INC(ble_gap_stats, connect_slv);
   1a386:	4a07      	ldr	r2, [pc, #28]	; (1a3a4 <ble_gap_accept_slave_conn+0x38>)
   1a388:	6e13      	ldr	r3, [r2, #96]	; 0x60
   1a38a:	3301      	adds	r3, #1
   1a38c:	6613      	str	r3, [r2, #96]	; 0x60
            rc = 0;
   1a38e:	2000      	movs	r0, #0
    }

    return rc;
}
   1a390:	bd10      	pop	{r4, pc}
       rc = BLE_HS_ENOENT;
   1a392:	2005      	movs	r0, #5
}
   1a394:	4770      	bx	lr
        rc = BLE_HS_ENOENT;
   1a396:	2005      	movs	r0, #5
   1a398:	e7fa      	b.n	1a390 <ble_gap_accept_slave_conn+0x24>
            rc = BLE_HS_ENOENT;
   1a39a:	2005      	movs	r0, #5
    return rc;
   1a39c:	e7f8      	b.n	1a390 <ble_gap_accept_slave_conn+0x24>
   1a39e:	bf00      	nop
   1a3a0:	20000224 	.word	0x20000224
   1a3a4:	200044a0 	.word	0x200044a0

0001a3a8 <ble_gap_adv_type>:
 *****************************************************************************/
#if NIMBLE_BLE_ADVERTISE && !MYNEWT_VAL(BLE_EXT_ADV)
static int
ble_gap_adv_type(const struct ble_gap_adv_params *adv_params)
{
    switch (adv_params->conn_mode) {
   1a3a8:	7803      	ldrb	r3, [r0, #0]
   1a3aa:	b11b      	cbz	r3, 1a3b4 <ble_gap_adv_type+0xc>
   1a3ac:	2b01      	cmp	r3, #1
   1a3ae:	d005      	beq.n	1a3bc <ble_gap_adv_type+0x14>
        } else {
            return BLE_HCI_ADV_TYPE_ADV_SCAN_IND;
        }

    case BLE_GAP_CONN_MODE_UND:
        return BLE_HCI_ADV_TYPE_ADV_IND;
   1a3b0:	2000      	movs	r0, #0
   1a3b2:	4770      	bx	lr
        if (adv_params->disc_mode == BLE_GAP_DISC_MODE_NON) {
   1a3b4:	7843      	ldrb	r3, [r0, #1]
   1a3b6:	b93b      	cbnz	r3, 1a3c8 <ble_gap_adv_type+0x20>
            return BLE_HCI_ADV_TYPE_ADV_NONCONN_IND;
   1a3b8:	2003      	movs	r0, #3
   1a3ba:	4770      	bx	lr

    case BLE_GAP_CONN_MODE_DIR:
        if (adv_params->high_duty_cycle) {
   1a3bc:	7a03      	ldrb	r3, [r0, #8]
   1a3be:	f013 0f01 	tst.w	r3, #1
   1a3c2:	d003      	beq.n	1a3cc <ble_gap_adv_type+0x24>
            return BLE_HCI_ADV_TYPE_ADV_DIRECT_IND_HD;
   1a3c4:	2001      	movs	r0, #1
   1a3c6:	4770      	bx	lr
            return BLE_HCI_ADV_TYPE_ADV_SCAN_IND;
   1a3c8:	2002      	movs	r0, #2
   1a3ca:	4770      	bx	lr
        } else {
            return BLE_HCI_ADV_TYPE_ADV_DIRECT_IND_LD;
   1a3cc:	2004      	movs	r0, #4

    default:
        BLE_HS_DBG_ASSERT(0);
        return BLE_HCI_ADV_TYPE_ADV_IND;
    }
}
   1a3ce:	4770      	bx	lr

0001a3d0 <ble_gap_adv_dflt_itvls>:

static void
ble_gap_adv_dflt_itvls(uint8_t conn_mode,
                       uint16_t *out_itvl_min, uint16_t *out_itvl_max)
{
    switch (conn_mode) {
   1a3d0:	2801      	cmp	r0, #1
   1a3d2:	d011      	beq.n	1a3f8 <ble_gap_adv_dflt_itvls+0x28>
   1a3d4:	b130      	cbz	r0, 1a3e4 <ble_gap_adv_dflt_itvls+0x14>
   1a3d6:	2802      	cmp	r0, #2
   1a3d8:	d009      	beq.n	1a3ee <ble_gap_adv_dflt_itvls+0x1e>
        *out_itvl_max = BLE_GAP_ADV_FAST_INTERVAL1_MAX;
        break;

    default:
        BLE_HS_DBG_ASSERT(0);
        *out_itvl_min = BLE_GAP_ADV_FAST_INTERVAL1_MIN;
   1a3da:	2330      	movs	r3, #48	; 0x30
   1a3dc:	800b      	strh	r3, [r1, #0]
        *out_itvl_max = BLE_GAP_ADV_FAST_INTERVAL1_MAX;
   1a3de:	2360      	movs	r3, #96	; 0x60
   1a3e0:	8013      	strh	r3, [r2, #0]
        break;
    }
}
   1a3e2:	4770      	bx	lr
        *out_itvl_min = BLE_GAP_ADV_FAST_INTERVAL2_MIN;
   1a3e4:	23a0      	movs	r3, #160	; 0xa0
   1a3e6:	800b      	strh	r3, [r1, #0]
        *out_itvl_max = BLE_GAP_ADV_FAST_INTERVAL2_MAX;
   1a3e8:	23f0      	movs	r3, #240	; 0xf0
   1a3ea:	8013      	strh	r3, [r2, #0]
        break;
   1a3ec:	4770      	bx	lr
        *out_itvl_min = BLE_GAP_ADV_FAST_INTERVAL1_MIN;
   1a3ee:	2330      	movs	r3, #48	; 0x30
   1a3f0:	800b      	strh	r3, [r1, #0]
        *out_itvl_max = BLE_GAP_ADV_FAST_INTERVAL1_MAX;
   1a3f2:	2360      	movs	r3, #96	; 0x60
   1a3f4:	8013      	strh	r3, [r2, #0]
        break;
   1a3f6:	4770      	bx	lr
        *out_itvl_min = BLE_GAP_ADV_FAST_INTERVAL1_MIN;
   1a3f8:	2330      	movs	r3, #48	; 0x30
   1a3fa:	800b      	strh	r3, [r1, #0]
        *out_itvl_max = BLE_GAP_ADV_FAST_INTERVAL1_MAX;
   1a3fc:	2360      	movs	r3, #96	; 0x60
   1a3fe:	8013      	strh	r3, [r2, #0]
        break;
   1a400:	4770      	bx	lr
	...

0001a404 <ble_gap_update_entry_find>:
}

static struct ble_gap_update_entry *
ble_gap_update_entry_find(uint16_t conn_handle,
                          struct ble_gap_update_entry **out_prev)
{
   1a404:	b410      	push	{r4}
    struct ble_gap_update_entry *prev;

    BLE_HS_DBG_ASSERT(ble_hs_locked_by_cur_task());

    prev = NULL;
    SLIST_FOREACH(entry, &ble_gap_update_entries, next) {
   1a406:	4b07      	ldr	r3, [pc, #28]	; (1a424 <ble_gap_update_entry_find+0x20>)
   1a408:	681b      	ldr	r3, [r3, #0]
    prev = NULL;
   1a40a:	2400      	movs	r4, #0
    SLIST_FOREACH(entry, &ble_gap_update_entries, next) {
   1a40c:	b12b      	cbz	r3, 1a41a <ble_gap_update_entry_find+0x16>
        if (entry->conn_handle == conn_handle) {
   1a40e:	8a9a      	ldrh	r2, [r3, #20]
   1a410:	4282      	cmp	r2, r0
   1a412:	d002      	beq.n	1a41a <ble_gap_update_entry_find+0x16>
            break;
        }

        prev = entry;
   1a414:	461c      	mov	r4, r3
    SLIST_FOREACH(entry, &ble_gap_update_entries, next) {
   1a416:	681b      	ldr	r3, [r3, #0]
   1a418:	e7f8      	b.n	1a40c <ble_gap_update_entry_find+0x8>
    }

    if (out_prev != NULL) {
   1a41a:	b101      	cbz	r1, 1a41e <ble_gap_update_entry_find+0x1a>
        *out_prev = prev;
   1a41c:	600c      	str	r4, [r1, #0]
    }

    return entry;
}
   1a41e:	4618      	mov	r0, r3
   1a420:	bc10      	pop	{r4}
   1a422:	4770      	bx	lr
   1a424:	20002ae8 	.word	0x20002ae8

0001a428 <ble_gap_validate_conn_params>:
static bool
ble_gap_validate_conn_params(const struct ble_gap_upd_params *params)
{

    /* Requirements from Bluetooth spec. v4.2 [Vol 2, Part E], 7.8.18 */
    if (params->itvl_min > params->itvl_max) {
   1a428:	8802      	ldrh	r2, [r0, #0]
   1a42a:	8843      	ldrh	r3, [r0, #2]
   1a42c:	429a      	cmp	r2, r3
   1a42e:	d816      	bhi.n	1a45e <ble_gap_validate_conn_params+0x36>
        return false;
    }

    if (params->itvl_min < 0x0006 || params->itvl_max > 0x0C80) {
   1a430:	2a05      	cmp	r2, #5
   1a432:	d916      	bls.n	1a462 <ble_gap_validate_conn_params+0x3a>
   1a434:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   1a438:	d815      	bhi.n	1a466 <ble_gap_validate_conn_params+0x3e>
        return false;
    }

    if (params->latency > 0x01F3) {
   1a43a:	8882      	ldrh	r2, [r0, #4]
   1a43c:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
   1a440:	d213      	bcs.n	1a46a <ble_gap_validate_conn_params+0x42>
    /* According to specification mentioned above we should make sure that:
     * supervision_timeout_ms > (1 + latency) * 2 * max_interval_ms
     *    =>
     * supervision_timeout * 10 ms > (1 + latency) * 2 * itvl_max * 1.25ms
     */
    if (params->supervision_timeout <=
   1a442:	88c1      	ldrh	r1, [r0, #6]
                   (((1 + params->latency) * params->itvl_max) / 4)) {
   1a444:	fb02 3303 	mla	r3, r2, r3, r3
   1a448:	2b00      	cmp	r3, #0
   1a44a:	db04      	blt.n	1a456 <ble_gap_validate_conn_params+0x2e>
    if (params->supervision_timeout <=
   1a44c:	ebb1 0fa3 	cmp.w	r1, r3, asr #2
   1a450:	dd03      	ble.n	1a45a <ble_gap_validate_conn_params+0x32>
        return false;
    }

    return true;
   1a452:	2001      	movs	r0, #1
}
   1a454:	4770      	bx	lr
                   (((1 + params->latency) * params->itvl_max) / 4)) {
   1a456:	3303      	adds	r3, #3
   1a458:	e7f8      	b.n	1a44c <ble_gap_validate_conn_params+0x24>
        return false;
   1a45a:	2000      	movs	r0, #0
   1a45c:	4770      	bx	lr
        return false;
   1a45e:	2000      	movs	r0, #0
   1a460:	4770      	bx	lr
        return false;
   1a462:	2000      	movs	r0, #0
   1a464:	4770      	bx	lr
   1a466:	2000      	movs	r0, #0
   1a468:	4770      	bx	lr
        return false;
   1a46a:	2000      	movs	r0, #0
   1a46c:	4770      	bx	lr
	...

0001a470 <ble_gap_event_listener_call>:
    return rc;
}

static int
ble_gap_event_listener_call(struct ble_gap_event *event)
{
   1a470:	b538      	push	{r3, r4, r5, lr}
   1a472:	4605      	mov	r5, r0
    struct ble_gap_event_listener *evl = NULL;

    SLIST_FOREACH(evl, &ble_gap_event_listener_list, link) {
   1a474:	4b05      	ldr	r3, [pc, #20]	; (1a48c <ble_gap_event_listener_call+0x1c>)
   1a476:	681c      	ldr	r4, [r3, #0]
   1a478:	e004      	b.n	1a484 <ble_gap_event_listener_call+0x14>
        evl->fn(event, evl->arg);
   1a47a:	6823      	ldr	r3, [r4, #0]
   1a47c:	6861      	ldr	r1, [r4, #4]
   1a47e:	4628      	mov	r0, r5
   1a480:	4798      	blx	r3
    SLIST_FOREACH(evl, &ble_gap_event_listener_list, link) {
   1a482:	68a4      	ldr	r4, [r4, #8]
   1a484:	2c00      	cmp	r4, #0
   1a486:	d1f8      	bne.n	1a47a <ble_gap_event_listener_call+0xa>
    }

    return 0;
}
   1a488:	2000      	movs	r0, #0
   1a48a:	bd38      	pop	{r3, r4, r5, pc}
   1a48c:	20002ae4 	.word	0x20002ae4

0001a490 <ble_gap_extract_conn_cb>:
{
   1a490:	b570      	push	{r4, r5, r6, lr}
   1a492:	4604      	mov	r4, r0
   1a494:	460e      	mov	r6, r1
   1a496:	4615      	mov	r5, r2
    ble_hs_lock();
   1a498:	f004 f844 	bl	1e524 <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
   1a49c:	4620      	mov	r0, r4
   1a49e:	f004 fed1 	bl	1f244 <ble_hs_conn_find>
    if (conn != NULL) {
   1a4a2:	4604      	mov	r4, r0
   1a4a4:	b140      	cbz	r0, 1a4b8 <ble_gap_extract_conn_cb+0x28>
        *out_cb = conn->bhc_cb;
   1a4a6:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   1a4a8:	6033      	str	r3, [r6, #0]
        *out_cb_arg = conn->bhc_cb_arg;
   1a4aa:	6e03      	ldr	r3, [r0, #96]	; 0x60
   1a4ac:	602b      	str	r3, [r5, #0]
    ble_hs_unlock();
   1a4ae:	f004 f83d 	bl	1e52c <ble_hs_unlock>
    if (conn == NULL) {
   1a4b2:	b12c      	cbz	r4, 1a4c0 <ble_gap_extract_conn_cb+0x30>
        return 0;
   1a4b4:	2000      	movs	r0, #0
}
   1a4b6:	bd70      	pop	{r4, r5, r6, pc}
        *out_cb = NULL;
   1a4b8:	2300      	movs	r3, #0
   1a4ba:	6033      	str	r3, [r6, #0]
        *out_cb_arg = NULL;
   1a4bc:	602b      	str	r3, [r5, #0]
   1a4be:	e7f6      	b.n	1a4ae <ble_gap_extract_conn_cb+0x1e>
        return BLE_HS_ENOTCONN;
   1a4c0:	2007      	movs	r0, #7
   1a4c2:	e7f8      	b.n	1a4b6 <ble_gap_extract_conn_cb+0x26>

0001a4c4 <ble_gap_call_conn_event_cb>:
{
   1a4c4:	b510      	push	{r4, lr}
   1a4c6:	b082      	sub	sp, #8
   1a4c8:	4604      	mov	r4, r0
   1a4ca:	4608      	mov	r0, r1
    rc = ble_gap_extract_conn_cb(conn_handle, &cb, &cb_arg);
   1a4cc:	466a      	mov	r2, sp
   1a4ce:	a901      	add	r1, sp, #4
   1a4d0:	f7ff ffde 	bl	1a490 <ble_gap_extract_conn_cb>
    if (rc != 0) {
   1a4d4:	4603      	mov	r3, r0
   1a4d6:	b110      	cbz	r0, 1a4de <ble_gap_call_conn_event_cb+0x1a>
}
   1a4d8:	4618      	mov	r0, r3
   1a4da:	b002      	add	sp, #8
   1a4dc:	bd10      	pop	{r4, pc}
    rc = ble_gap_call_event_cb(event, cb, cb_arg);
   1a4de:	9a00      	ldr	r2, [sp, #0]
   1a4e0:	9901      	ldr	r1, [sp, #4]
   1a4e2:	4620      	mov	r0, r4
   1a4e4:	f7ff fee8 	bl	1a2b8 <ble_gap_call_event_cb>
   1a4e8:	4603      	mov	r3, r0
   1a4ea:	e7f5      	b.n	1a4d8 <ble_gap_call_conn_event_cb+0x14>

0001a4ec <ble_gap_fill_conn_desc>:
{
   1a4ec:	b570      	push	{r4, r5, r6, lr}
   1a4ee:	b088      	sub	sp, #32
   1a4f0:	4605      	mov	r5, r0
   1a4f2:	460c      	mov	r4, r1
    ble_hs_conn_addrs(conn, &addrs);
   1a4f4:	ae01      	add	r6, sp, #4
   1a4f6:	4631      	mov	r1, r6
   1a4f8:	f004 fedc 	bl	1f2b4 <ble_hs_conn_addrs>
    desc->our_id_addr = addrs.our_id_addr;
   1a4fc:	e896 0003 	ldmia.w	r6, {r0, r1}
   1a500:	6060      	str	r0, [r4, #4]
   1a502:	f104 0308 	add.w	r3, r4, #8
   1a506:	f823 1b02 	strh.w	r1, [r3], #2
   1a50a:	0c09      	lsrs	r1, r1, #16
   1a50c:	7019      	strb	r1, [r3, #0]
    desc->peer_id_addr = addrs.peer_id_addr;
   1a50e:	ab08      	add	r3, sp, #32
   1a510:	f853 1d15 	ldr.w	r1, [r3, #-21]!
   1a514:	f8c4 100b 	str.w	r1, [r4, #11]
   1a518:	8899      	ldrh	r1, [r3, #4]
   1a51a:	799b      	ldrb	r3, [r3, #6]
   1a51c:	f8a4 100f 	strh.w	r1, [r4, #15]
   1a520:	7463      	strb	r3, [r4, #17]
    desc->our_ota_addr = addrs.our_ota_addr;
   1a522:	ab08      	add	r3, sp, #32
   1a524:	f853 1d0e 	ldr.w	r1, [r3, #-14]!
   1a528:	f8c4 1012 	str.w	r1, [r4, #18]
   1a52c:	8899      	ldrh	r1, [r3, #4]
   1a52e:	799b      	ldrb	r3, [r3, #6]
   1a530:	82e1      	strh	r1, [r4, #22]
   1a532:	7623      	strb	r3, [r4, #24]
    desc->peer_ota_addr = addrs.peer_ota_addr;
   1a534:	ab08      	add	r3, sp, #32
   1a536:	f853 1d07 	ldr.w	r1, [r3, #-7]!
   1a53a:	f8c4 1019 	str.w	r1, [r4, #25]
   1a53e:	8899      	ldrh	r1, [r3, #4]
   1a540:	799b      	ldrb	r3, [r3, #6]
   1a542:	f8a4 101d 	strh.w	r1, [r4, #29]
   1a546:	77e3      	strb	r3, [r4, #31]
    desc->conn_handle = conn->bhc_handle;
   1a548:	88ab      	ldrh	r3, [r5, #4]
   1a54a:	8423      	strh	r3, [r4, #32]
    desc->conn_itvl = conn->bhc_itvl;
   1a54c:	8bab      	ldrh	r3, [r5, #28]
   1a54e:	8463      	strh	r3, [r4, #34]	; 0x22
    desc->conn_latency = conn->bhc_latency;
   1a550:	8beb      	ldrh	r3, [r5, #30]
   1a552:	84a3      	strh	r3, [r4, #36]	; 0x24
    desc->supervision_timeout = conn->bhc_supervision_timeout;
   1a554:	8c2b      	ldrh	r3, [r5, #32]
   1a556:	84e3      	strh	r3, [r4, #38]	; 0x26
    desc->master_clock_accuracy = conn->bhc_master_clock_accuracy;
   1a558:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
   1a55c:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    desc->sec_state = conn->bhc_sec_state;
   1a560:	6dab      	ldr	r3, [r5, #88]	; 0x58
   1a562:	6023      	str	r3, [r4, #0]
    if (conn->bhc_flags & BLE_HS_CONN_F_MASTER) {
   1a564:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
   1a568:	f013 0f01 	tst.w	r3, #1
   1a56c:	d104      	bne.n	1a578 <ble_gap_fill_conn_desc+0x8c>
        desc->role = BLE_GAP_ROLE_SLAVE;
   1a56e:	2301      	movs	r3, #1
   1a570:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
   1a574:	b008      	add	sp, #32
   1a576:	bd70      	pop	{r4, r5, r6, pc}
        desc->role = BLE_GAP_ROLE_MASTER;
   1a578:	2300      	movs	r3, #0
   1a57a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
   1a57e:	e7f9      	b.n	1a574 <ble_gap_fill_conn_desc+0x88>

0001a580 <ble_gap_conn_to_snapshot>:
{
   1a580:	b538      	push	{r3, r4, r5, lr}
   1a582:	4605      	mov	r5, r0
   1a584:	460c      	mov	r4, r1
    ble_gap_fill_conn_desc(conn, snap->desc);
   1a586:	6809      	ldr	r1, [r1, #0]
   1a588:	f7ff ffb0 	bl	1a4ec <ble_gap_fill_conn_desc>
    snap->cb = conn->bhc_cb;
   1a58c:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   1a58e:	6063      	str	r3, [r4, #4]
    snap->cb_arg = conn->bhc_cb_arg;
   1a590:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   1a592:	60a3      	str	r3, [r4, #8]
}
   1a594:	bd38      	pop	{r3, r4, r5, pc}

0001a596 <ble_gap_find_snapshot>:
{
   1a596:	b538      	push	{r3, r4, r5, lr}
   1a598:	4604      	mov	r4, r0
   1a59a:	460d      	mov	r5, r1
    ble_hs_lock();
   1a59c:	f003 ffc2 	bl	1e524 <ble_hs_lock>
    conn = ble_hs_conn_find(handle);
   1a5a0:	4620      	mov	r0, r4
   1a5a2:	f004 fe4f 	bl	1f244 <ble_hs_conn_find>
    if (conn != NULL) {
   1a5a6:	4604      	mov	r4, r0
   1a5a8:	b110      	cbz	r0, 1a5b0 <ble_gap_find_snapshot+0x1a>
        ble_gap_conn_to_snapshot(conn, snap);
   1a5aa:	4629      	mov	r1, r5
   1a5ac:	f7ff ffe8 	bl	1a580 <ble_gap_conn_to_snapshot>
    ble_hs_unlock();
   1a5b0:	f003 ffbc 	bl	1e52c <ble_hs_unlock>
    if (conn == NULL) {
   1a5b4:	b10c      	cbz	r4, 1a5ba <ble_gap_find_snapshot+0x24>
        return 0;
   1a5b6:	2000      	movs	r0, #0
}
   1a5b8:	bd38      	pop	{r3, r4, r5, pc}
        return BLE_HS_ENOTCONN;
   1a5ba:	2007      	movs	r0, #7
   1a5bc:	e7fc      	b.n	1a5b8 <ble_gap_find_snapshot+0x22>

0001a5be <ble_gap_rd_rem_sup_feat_tx>:
{
   1a5be:	b500      	push	{lr}
   1a5c0:	b085      	sub	sp, #20
    cmd.conn_handle = htole16(handle);
   1a5c2:	a904      	add	r1, sp, #16
   1a5c4:	f821 0d04 	strh.w	r0, [r1, #-4]!
    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   1a5c8:	2300      	movs	r3, #0
   1a5ca:	9300      	str	r3, [sp, #0]
   1a5cc:	2202      	movs	r2, #2
   1a5ce:	f242 0016 	movw	r0, #8214	; 0x2016
   1a5d2:	f005 f853 	bl	1f67c <ble_hs_hci_cmd_tx>
}
   1a5d6:	b005      	add	sp, #20
   1a5d8:	f85d fb04 	ldr.w	pc, [sp], #4

0001a5dc <ble_gap_conn_cancel_tx>:
{
   1a5dc:	b500      	push	{lr}
   1a5de:	b083      	sub	sp, #12
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   1a5e0:	2100      	movs	r1, #0
   1a5e2:	9100      	str	r1, [sp, #0]
   1a5e4:	460b      	mov	r3, r1
   1a5e6:	460a      	mov	r2, r1
   1a5e8:	f242 000e 	movw	r0, #8206	; 0x200e
   1a5ec:	f005 f846 	bl	1f67c <ble_hs_hci_cmd_tx>
}
   1a5f0:	b003      	add	sp, #12
   1a5f2:	f85d fb04 	ldr.w	pc, [sp], #4

0001a5f6 <ble_gap_disc_enable_tx>:
{
   1a5f6:	b500      	push	{lr}
   1a5f8:	b085      	sub	sp, #20
    cmd.enable = !!enable;
   1a5fa:	3000      	adds	r0, #0
   1a5fc:	bf18      	it	ne
   1a5fe:	2001      	movne	r0, #1
   1a600:	f88d 000c 	strb.w	r0, [sp, #12]
    cmd.filter_duplicates = !!filter_duplicates;
   1a604:	3100      	adds	r1, #0
   1a606:	bf18      	it	ne
   1a608:	2101      	movne	r1, #1
   1a60a:	f88d 100d 	strb.w	r1, [sp, #13]
    return ble_hs_hci_cmd_tx(opcode, &cmd, sizeof(cmd), NULL, 0);
   1a60e:	2300      	movs	r3, #0
   1a610:	9300      	str	r3, [sp, #0]
   1a612:	2202      	movs	r2, #2
   1a614:	a903      	add	r1, sp, #12
   1a616:	f242 000c 	movw	r0, #8204	; 0x200c
   1a61a:	f005 f82f 	bl	1f67c <ble_hs_hci_cmd_tx>
}
   1a61e:	b005      	add	sp, #20
   1a620:	f85d fb04 	ldr.w	pc, [sp], #4

0001a624 <ble_gap_disc_disable_tx>:
{
   1a624:	b508      	push	{r3, lr}
    return ble_gap_disc_enable_tx(0, 0);
   1a626:	2100      	movs	r1, #0
   1a628:	4608      	mov	r0, r1
   1a62a:	f7ff ffe4 	bl	1a5f6 <ble_gap_disc_enable_tx>
}
   1a62e:	bd08      	pop	{r3, pc}

0001a630 <ble_gap_adv_enable_tx>:
{
   1a630:	b500      	push	{lr}
   1a632:	b085      	sub	sp, #20
    cmd.enable = !!enable;
   1a634:	3000      	adds	r0, #0
   1a636:	bf18      	it	ne
   1a638:	2001      	movne	r0, #1
   1a63a:	a904      	add	r1, sp, #16
   1a63c:	f801 0d04 	strb.w	r0, [r1, #-4]!
    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   1a640:	2300      	movs	r3, #0
   1a642:	9300      	str	r3, [sp, #0]
   1a644:	2201      	movs	r2, #1
   1a646:	f242 000a 	movw	r0, #8202	; 0x200a
   1a64a:	f005 f817 	bl	1f67c <ble_hs_hci_cmd_tx>
}
   1a64e:	b005      	add	sp, #20
   1a650:	f85d fb04 	ldr.w	pc, [sp], #4

0001a654 <ble_gap_adv_params_tx>:
{
   1a654:	b570      	push	{r4, r5, r6, lr}
   1a656:	b08a      	sub	sp, #40	; 0x28
   1a658:	4606      	mov	r6, r0
   1a65a:	460c      	mov	r4, r1
   1a65c:	4615      	mov	r5, r2
    const ble_addr_t *peer_any = BLE_ADDR_ANY;
   1a65e:	2300      	movs	r3, #0
   1a660:	9308      	str	r3, [sp, #32]
   1a662:	f8cd 3023 	str.w	r3, [sp, #35]	; 0x23
    if ((adv_params->itvl_min == 0) && (adv_params->itvl_max == 0)) {
   1a666:	8853      	ldrh	r3, [r2, #2]
   1a668:	b90b      	cbnz	r3, 1a66e <ble_gap_adv_params_tx+0x1a>
   1a66a:	8892      	ldrh	r2, [r2, #4]
   1a66c:	b33a      	cbz	r2, 1a6be <ble_gap_adv_params_tx+0x6a>
        cmd.min_interval = htole16(adv_params->itvl_min);
   1a66e:	f8ad 3010 	strh.w	r3, [sp, #16]
        cmd.max_interval = htole16(adv_params->itvl_max);
   1a672:	88ab      	ldrh	r3, [r5, #4]
   1a674:	f8ad 3012 	strh.w	r3, [sp, #18]
    cmd.type = ble_gap_adv_type(adv_params);
   1a678:	4628      	mov	r0, r5
   1a67a:	f7ff fe95 	bl	1a3a8 <ble_gap_adv_type>
   1a67e:	f88d 0014 	strb.w	r0, [sp, #20]
    cmd.own_addr_type = own_addr_type;
   1a682:	f88d 6015 	strb.w	r6, [sp, #21]
    if (peer_addr == NULL) {
   1a686:	b34c      	cbz	r4, 1a6dc <ble_gap_adv_params_tx+0x88>
    cmd.peer_addr_type = peer_addr->type;
   1a688:	7823      	ldrb	r3, [r4, #0]
   1a68a:	f88d 3016 	strb.w	r3, [sp, #22]
    memcpy(&cmd.peer_addr, peer_addr->val, sizeof(cmd.peer_addr));
   1a68e:	f854 3f01 	ldr.w	r3, [r4, #1]!
   1a692:	f8cd 3017 	str.w	r3, [sp, #23]
   1a696:	88a3      	ldrh	r3, [r4, #4]
   1a698:	f8ad 301b 	strh.w	r3, [sp, #27]
    if (adv_params->channel_map == 0) {
   1a69c:	79ab      	ldrb	r3, [r5, #6]
   1a69e:	b1fb      	cbz	r3, 1a6e0 <ble_gap_adv_params_tx+0x8c>
        cmd.chan_map = adv_params->channel_map;
   1a6a0:	f88d 301d 	strb.w	r3, [sp, #29]
    cmd.filter_policy = adv_params->filter_policy;
   1a6a4:	79eb      	ldrb	r3, [r5, #7]
   1a6a6:	f88d 301e 	strb.w	r3, [sp, #30]
    return ble_hs_hci_cmd_tx(opcode, &cmd, sizeof(cmd), NULL, 0);
   1a6aa:	2300      	movs	r3, #0
   1a6ac:	9300      	str	r3, [sp, #0]
   1a6ae:	220f      	movs	r2, #15
   1a6b0:	a904      	add	r1, sp, #16
   1a6b2:	f242 0006 	movw	r0, #8198	; 0x2006
   1a6b6:	f004 ffe1 	bl	1f67c <ble_hs_hci_cmd_tx>
}
   1a6ba:	b00a      	add	sp, #40	; 0x28
   1a6bc:	bd70      	pop	{r4, r5, r6, pc}
        ble_gap_adv_dflt_itvls(adv_params->conn_mode, &min, &max);
   1a6be:	aa03      	add	r2, sp, #12
   1a6c0:	f10d 010e 	add.w	r1, sp, #14
   1a6c4:	7828      	ldrb	r0, [r5, #0]
   1a6c6:	f7ff fe83 	bl	1a3d0 <ble_gap_adv_dflt_itvls>
        cmd.min_interval = htole16(min);
   1a6ca:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1a6ce:	f8ad 3010 	strh.w	r3, [sp, #16]
        cmd.max_interval = htole16(max);
   1a6d2:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   1a6d6:	f8ad 3012 	strh.w	r3, [sp, #18]
   1a6da:	e7cd      	b.n	1a678 <ble_gap_adv_params_tx+0x24>
        peer_addr = peer_any;
   1a6dc:	ac08      	add	r4, sp, #32
   1a6de:	e7d3      	b.n	1a688 <ble_gap_adv_params_tx+0x34>
        cmd.chan_map = BLE_GAP_ADV_DFLT_CHANNEL_MAP;
   1a6e0:	2307      	movs	r3, #7
   1a6e2:	f88d 301d 	strb.w	r3, [sp, #29]
   1a6e6:	e7dd      	b.n	1a6a4 <ble_gap_adv_params_tx+0x50>

0001a6e8 <ble_gap_tx_param_pos_reply>:
{
   1a6e8:	b500      	push	{lr}
   1a6ea:	b087      	sub	sp, #28
    cmd.conn_handle = htole16(conn_handle);
   1a6ec:	f8ad 0008 	strh.w	r0, [sp, #8]
    cmd.conn_itvl_min = htole16(params->itvl_min);
   1a6f0:	880b      	ldrh	r3, [r1, #0]
   1a6f2:	f8ad 300a 	strh.w	r3, [sp, #10]
    cmd.conn_itvl_max = htole16(params->itvl_max);
   1a6f6:	884b      	ldrh	r3, [r1, #2]
   1a6f8:	f8ad 300c 	strh.w	r3, [sp, #12]
    cmd.conn_latency = htole16(params->latency);
   1a6fc:	888b      	ldrh	r3, [r1, #4]
   1a6fe:	f8ad 300e 	strh.w	r3, [sp, #14]
    cmd.supervision_timeout = htole16(params->supervision_timeout);
   1a702:	88cb      	ldrh	r3, [r1, #6]
   1a704:	f8ad 3010 	strh.w	r3, [sp, #16]
    cmd.min_ce = htole16(params->min_ce_len);
   1a708:	890b      	ldrh	r3, [r1, #8]
   1a70a:	f8ad 3012 	strh.w	r3, [sp, #18]
    cmd.max_ce = htole16(params->max_ce_len);
   1a70e:	894b      	ldrh	r3, [r1, #10]
   1a710:	f8ad 3014 	strh.w	r3, [sp, #20]
    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   1a714:	2300      	movs	r3, #0
   1a716:	9300      	str	r3, [sp, #0]
   1a718:	220e      	movs	r2, #14
   1a71a:	a902      	add	r1, sp, #8
   1a71c:	f242 0020 	movw	r0, #8224	; 0x2020
   1a720:	f004 ffac 	bl	1f67c <ble_hs_hci_cmd_tx>
}
   1a724:	b007      	add	sp, #28
   1a726:	f85d fb04 	ldr.w	pc, [sp], #4

0001a72a <ble_gap_tx_param_neg_reply>:
{
   1a72a:	b500      	push	{lr}
   1a72c:	b085      	sub	sp, #20
    cmd.conn_handle = htole16(conn_handle);
   1a72e:	f8ad 000c 	strh.w	r0, [sp, #12]
    cmd.reason = reject_reason;
   1a732:	f88d 100e 	strb.w	r1, [sp, #14]
    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   1a736:	2300      	movs	r3, #0
   1a738:	9300      	str	r3, [sp, #0]
   1a73a:	2203      	movs	r2, #3
   1a73c:	a903      	add	r1, sp, #12
   1a73e:	f242 0021 	movw	r0, #8225	; 0x2021
   1a742:	f004 ff9b 	bl	1f67c <ble_hs_hci_cmd_tx>
}
   1a746:	b005      	add	sp, #20
   1a748:	f85d fb04 	ldr.w	pc, [sp], #4

0001a74c <ble_gap_update_tx>:
{
   1a74c:	b500      	push	{lr}
   1a74e:	b087      	sub	sp, #28
    cmd.conn_handle = htole16(conn_handle);
   1a750:	f8ad 0008 	strh.w	r0, [sp, #8]
    cmd.conn_itvl_min = htole16(params->itvl_min);
   1a754:	880b      	ldrh	r3, [r1, #0]
   1a756:	f8ad 300a 	strh.w	r3, [sp, #10]
    cmd.conn_itvl_max = htole16(params->itvl_max);
   1a75a:	884b      	ldrh	r3, [r1, #2]
   1a75c:	f8ad 300c 	strh.w	r3, [sp, #12]
    cmd.conn_latency = htole16(params->latency);
   1a760:	888b      	ldrh	r3, [r1, #4]
   1a762:	f8ad 300e 	strh.w	r3, [sp, #14]
    cmd.supervision_timeout = htole16(params->supervision_timeout);
   1a766:	88cb      	ldrh	r3, [r1, #6]
   1a768:	f8ad 3010 	strh.w	r3, [sp, #16]
    cmd.min_ce_len = htole16(params->min_ce_len);
   1a76c:	890b      	ldrh	r3, [r1, #8]
   1a76e:	f8ad 3012 	strh.w	r3, [sp, #18]
    cmd.max_ce_len = htole16(params->max_ce_len);
   1a772:	894b      	ldrh	r3, [r1, #10]
   1a774:	f8ad 3014 	strh.w	r3, [sp, #20]
    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   1a778:	2300      	movs	r3, #0
   1a77a:	9300      	str	r3, [sp, #0]
   1a77c:	220e      	movs	r2, #14
   1a77e:	a902      	add	r1, sp, #8
   1a780:	f242 0013 	movw	r0, #8211	; 0x2013
   1a784:	f004 ff7a 	bl	1f67c <ble_hs_hci_cmd_tx>
}
   1a788:	b007      	add	sp, #28
   1a78a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0001a790 <ble_gap_update_entry_remove>:
{
   1a790:	b510      	push	{r4, lr}
   1a792:	b082      	sub	sp, #8
    entry = ble_gap_update_entry_find(conn_handle, &prev);
   1a794:	a901      	add	r1, sp, #4
   1a796:	f7ff fe35 	bl	1a404 <ble_gap_update_entry_find>
    if (entry != NULL) {
   1a79a:	4604      	mov	r4, r0
   1a79c:	b128      	cbz	r0, 1a7aa <ble_gap_update_entry_remove+0x1a>
        if (prev == NULL) {
   1a79e:	9b01      	ldr	r3, [sp, #4]
   1a7a0:	b133      	cbz	r3, 1a7b0 <ble_gap_update_entry_remove+0x20>
            SLIST_NEXT(prev, next) = SLIST_NEXT(entry, next);
   1a7a2:	6802      	ldr	r2, [r0, #0]
   1a7a4:	601a      	str	r2, [r3, #0]
        ble_hs_timer_resched();
   1a7a6:	f003 ffb5 	bl	1e714 <ble_hs_timer_resched>
}
   1a7aa:	4620      	mov	r0, r4
   1a7ac:	b002      	add	sp, #8
   1a7ae:	bd10      	pop	{r4, pc}
            SLIST_REMOVE_HEAD(&ble_gap_update_entries, next);
   1a7b0:	4b02      	ldr	r3, [pc, #8]	; (1a7bc <ble_gap_update_entry_remove+0x2c>)
   1a7b2:	681a      	ldr	r2, [r3, #0]
   1a7b4:	6812      	ldr	r2, [r2, #0]
   1a7b6:	601a      	str	r2, [r3, #0]
   1a7b8:	e7f5      	b.n	1a7a6 <ble_gap_update_entry_remove+0x16>
   1a7ba:	bf00      	nop
   1a7bc:	20002ae8 	.word	0x20002ae8

0001a7c0 <ble_gap_master_reset_state>:
{
   1a7c0:	b508      	push	{r3, lr}
    ble_gap_master.op = BLE_GAP_OP_NULL;
   1a7c2:	4b07      	ldr	r3, [pc, #28]	; (1a7e0 <ble_gap_master_reset_state+0x20>)
   1a7c4:	2200      	movs	r2, #0
   1a7c6:	701a      	strb	r2, [r3, #0]
    ble_gap_master.exp_set = 0;
   1a7c8:	7859      	ldrb	r1, [r3, #1]
   1a7ca:	f362 0100 	bfi	r1, r2, #0, #1
   1a7ce:	7059      	strb	r1, [r3, #1]
    ble_gap_master.conn.cancel = 0;
   1a7d0:	7c59      	ldrb	r1, [r3, #17]
   1a7d2:	f362 01c3 	bfi	r1, r2, #3, #1
   1a7d6:	7459      	strb	r1, [r3, #17]
    ble_hs_timer_resched();
   1a7d8:	f003 ff9c 	bl	1e714 <ble_hs_timer_resched>
}
   1a7dc:	bd08      	pop	{r3, pc}
   1a7de:	bf00      	nop
   1a7e0:	20000224 	.word	0x20000224

0001a7e4 <ble_gap_master_extract_state>:
{
   1a7e4:	b570      	push	{r4, r5, r6, lr}
   1a7e6:	4604      	mov	r4, r0
   1a7e8:	460e      	mov	r6, r1
    ble_hs_lock();
   1a7ea:	f003 fe9b 	bl	1e524 <ble_hs_lock>
    *out_state = ble_gap_master;
   1a7ee:	4d08      	ldr	r5, [pc, #32]	; (1a810 <ble_gap_master_extract_state+0x2c>)
   1a7f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1a7f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1a7f4:	682b      	ldr	r3, [r5, #0]
   1a7f6:	6023      	str	r3, [r4, #0]
    if (reset_state) {
   1a7f8:	b916      	cbnz	r6, 1a800 <ble_gap_master_extract_state+0x1c>
    ble_hs_unlock();
   1a7fa:	f003 fe97 	bl	1e52c <ble_hs_unlock>
}
   1a7fe:	bd70      	pop	{r4, r5, r6, pc}
        ble_gap_master_reset_state();
   1a800:	f7ff ffde 	bl	1a7c0 <ble_gap_master_reset_state>
        ble_gap_master.preempted_op = BLE_GAP_OP_NULL;
   1a804:	f1a5 0310 	sub.w	r3, r5, #16
   1a808:	2200      	movs	r2, #0
   1a80a:	741a      	strb	r2, [r3, #16]
   1a80c:	e7f5      	b.n	1a7fa <ble_gap_master_extract_state+0x16>
   1a80e:	bf00      	nop
   1a810:	20000224 	.word	0x20000224

0001a814 <ble_gap_disc_report>:
{
   1a814:	b530      	push	{r4, r5, lr}
   1a816:	b093      	sub	sp, #76	; 0x4c
   1a818:	4604      	mov	r4, r0
    memset(&event, 0, sizeof event);
   1a81a:	2234      	movs	r2, #52	; 0x34
   1a81c:	2100      	movs	r1, #0
   1a81e:	4668      	mov	r0, sp
   1a820:	f7f3 fe4e 	bl	e4c0 <memset>
    event.type = BLE_GAP_EVENT_DISC;
   1a824:	2307      	movs	r3, #7
   1a826:	f88d 3000 	strb.w	r3, [sp]
    event.disc = *((struct ble_gap_disc_desc *)desc);
   1a82a:	ad01      	add	r5, sp, #4
   1a82c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   1a82e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1a830:	e894 0003 	ldmia.w	r4, {r0, r1}
   1a834:	e885 0003 	stmia.w	r5, {r0, r1}
    ble_gap_master_extract_state(&state, 0);
   1a838:	2100      	movs	r1, #0
   1a83a:	a80d      	add	r0, sp, #52	; 0x34
   1a83c:	f7ff ffd2 	bl	1a7e4 <ble_gap_master_extract_state>
    if (ble_gap_has_client(&state)) {
   1a840:	a80d      	add	r0, sp, #52	; 0x34
   1a842:	f7ff fd65 	bl	1a310 <ble_gap_has_client>
   1a846:	b118      	cbz	r0, 1a850 <ble_gap_disc_report+0x3c>
        state.cb(&event, state.cb_arg);
   1a848:	9910      	ldr	r1, [sp, #64]	; 0x40
   1a84a:	4668      	mov	r0, sp
   1a84c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1a84e:	4798      	blx	r3
    ble_gap_event_listener_call(&event);
   1a850:	4668      	mov	r0, sp
   1a852:	f7ff fe0d 	bl	1a470 <ble_gap_event_listener_call>
}
   1a856:	b013      	add	sp, #76	; 0x4c
   1a858:	bd30      	pop	{r4, r5, pc}

0001a85a <ble_gap_master_connect_failure>:
{
   1a85a:	b510      	push	{r4, lr}
   1a85c:	b092      	sub	sp, #72	; 0x48
   1a85e:	4604      	mov	r4, r0
    ble_gap_master_extract_state(&state, 1);
   1a860:	2101      	movs	r1, #1
   1a862:	a80d      	add	r0, sp, #52	; 0x34
   1a864:	f7ff ffbe 	bl	1a7e4 <ble_gap_master_extract_state>
    if (ble_gap_has_client(&state)) {
   1a868:	a80d      	add	r0, sp, #52	; 0x34
   1a86a:	f7ff fd51 	bl	1a310 <ble_gap_has_client>
   1a86e:	b910      	cbnz	r0, 1a876 <ble_gap_master_connect_failure+0x1c>
        rc = 0;
   1a870:	2000      	movs	r0, #0
}
   1a872:	b012      	add	sp, #72	; 0x48
   1a874:	bd10      	pop	{r4, pc}
        memset(&event, 0, sizeof event);
   1a876:	2234      	movs	r2, #52	; 0x34
   1a878:	2100      	movs	r1, #0
   1a87a:	4668      	mov	r0, sp
   1a87c:	f7f3 fe20 	bl	e4c0 <memset>
        event.connect.status = status;
   1a880:	9401      	str	r4, [sp, #4]
        rc = state.cb(&event, state.cb_arg);
   1a882:	9910      	ldr	r1, [sp, #64]	; 0x40
   1a884:	4668      	mov	r0, sp
   1a886:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1a888:	4798      	blx	r3
   1a88a:	e7f2      	b.n	1a872 <ble_gap_master_connect_failure+0x18>

0001a88c <ble_gap_master_failed>:
{
   1a88c:	b508      	push	{r3, lr}
    switch (ble_gap_master.op) {
   1a88e:	4b06      	ldr	r3, [pc, #24]	; (1a8a8 <ble_gap_master_failed+0x1c>)
   1a890:	781b      	ldrb	r3, [r3, #0]
   1a892:	2b02      	cmp	r3, #2
   1a894:	d000      	beq.n	1a898 <ble_gap_master_failed+0xc>
}
   1a896:	bd08      	pop	{r3, pc}
        STATS_INC(ble_gap_stats, initiate_fail);
   1a898:	4a04      	ldr	r2, [pc, #16]	; (1a8ac <ble_gap_master_failed+0x20>)
   1a89a:	6c13      	ldr	r3, [r2, #64]	; 0x40
   1a89c:	3301      	adds	r3, #1
   1a89e:	6413      	str	r3, [r2, #64]	; 0x40
        ble_gap_master_connect_failure(status);
   1a8a0:	f7ff ffdb 	bl	1a85a <ble_gap_master_connect_failure>
}
   1a8a4:	e7f7      	b.n	1a896 <ble_gap_master_failed+0xa>
   1a8a6:	bf00      	nop
   1a8a8:	20000224 	.word	0x20000224
   1a8ac:	200044a0 	.word	0x200044a0

0001a8b0 <ble_gap_master_connect_cancelled>:
{
   1a8b0:	b510      	push	{r4, lr}
   1a8b2:	b092      	sub	sp, #72	; 0x48
    ble_gap_master_extract_state(&state, 1);
   1a8b4:	2101      	movs	r1, #1
   1a8b6:	a80d      	add	r0, sp, #52	; 0x34
   1a8b8:	f7ff ff94 	bl	1a7e4 <ble_gap_master_extract_state>
    if (state.cb != NULL) {
   1a8bc:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   1a8be:	b194      	cbz	r4, 1a8e6 <ble_gap_master_connect_cancelled+0x36>
        memset(&event, 0, sizeof event);
   1a8c0:	2234      	movs	r2, #52	; 0x34
   1a8c2:	2100      	movs	r1, #0
   1a8c4:	4668      	mov	r0, sp
   1a8c6:	f7f3 fdfb 	bl	e4c0 <memset>
        event.connect.conn_handle = BLE_HS_CONN_HANDLE_NONE;
   1a8ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1a8ce:	f8ad 3008 	strh.w	r3, [sp, #8]
        if (state.conn.cancel) {
   1a8d2:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
   1a8d6:	f013 0f08 	tst.w	r3, #8
   1a8da:	d006      	beq.n	1a8ea <ble_gap_master_connect_cancelled+0x3a>
            event.connect.status = BLE_HS_EAPP;
   1a8dc:	2309      	movs	r3, #9
   1a8de:	9301      	str	r3, [sp, #4]
        state.cb(&event, state.cb_arg);
   1a8e0:	9910      	ldr	r1, [sp, #64]	; 0x40
   1a8e2:	4668      	mov	r0, sp
   1a8e4:	47a0      	blx	r4
}
   1a8e6:	b012      	add	sp, #72	; 0x48
   1a8e8:	bd10      	pop	{r4, pc}
            event.connect.status = BLE_HS_ETIMEOUT;
   1a8ea:	230d      	movs	r3, #13
   1a8ec:	9301      	str	r3, [sp, #4]
   1a8ee:	e7f7      	b.n	1a8e0 <ble_gap_master_connect_cancelled+0x30>

0001a8f0 <ble_gap_disc_complete>:
{
   1a8f0:	b500      	push	{lr}
   1a8f2:	b093      	sub	sp, #76	; 0x4c
    memset(&event, 0, sizeof event);
   1a8f4:	2234      	movs	r2, #52	; 0x34
   1a8f6:	2100      	movs	r1, #0
   1a8f8:	4668      	mov	r0, sp
   1a8fa:	f7f3 fde1 	bl	e4c0 <memset>
    event.type = BLE_GAP_EVENT_DISC_COMPLETE;
   1a8fe:	2308      	movs	r3, #8
   1a900:	f88d 3000 	strb.w	r3, [sp]
    ble_gap_master_extract_state(&state, 1);
   1a904:	2101      	movs	r1, #1
   1a906:	a80d      	add	r0, sp, #52	; 0x34
   1a908:	f7ff ff6c 	bl	1a7e4 <ble_gap_master_extract_state>
    if (ble_gap_has_client(&state)) {
   1a90c:	a80d      	add	r0, sp, #52	; 0x34
   1a90e:	f7ff fcff 	bl	1a310 <ble_gap_has_client>
   1a912:	b928      	cbnz	r0, 1a920 <ble_gap_disc_complete+0x30>
    ble_gap_event_listener_call(&event);
   1a914:	4668      	mov	r0, sp
   1a916:	f7ff fdab 	bl	1a470 <ble_gap_event_listener_call>
}
   1a91a:	b013      	add	sp, #76	; 0x4c
   1a91c:	f85d fb04 	ldr.w	pc, [sp], #4
        ble_gap_call_event_cb(&event, state.cb, state.cb_arg);
   1a920:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1a922:	990f      	ldr	r1, [sp, #60]	; 0x3c
   1a924:	4668      	mov	r0, sp
   1a926:	f7ff fcc7 	bl	1a2b8 <ble_gap_call_event_cb>
   1a92a:	e7f3      	b.n	1a914 <ble_gap_disc_complete+0x24>

0001a92c <ble_gap_slave_reset_state>:
{
   1a92c:	b508      	push	{r3, lr}
    ble_gap_slave[instance].op = BLE_GAP_OP_NULL;
   1a92e:	4b06      	ldr	r3, [pc, #24]	; (1a948 <ble_gap_slave_reset_state+0x1c>)
   1a930:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   1a934:	2100      	movs	r1, #0
   1a936:	7501      	strb	r1, [r0, #20]
    ble_gap_slave[instance].exp_set = 0;
   1a938:	7d42      	ldrb	r2, [r0, #21]
   1a93a:	f361 1204 	bfi	r2, r1, #4, #1
   1a93e:	7542      	strb	r2, [r0, #21]
    ble_hs_timer_resched();
   1a940:	f003 fee8 	bl	1e714 <ble_hs_timer_resched>
}
   1a944:	bd08      	pop	{r3, pc}
   1a946:	bf00      	nop
   1a948:	20000224 	.word	0x20000224

0001a94c <ble_gap_slave_extract_cb>:
{
   1a94c:	b570      	push	{r4, r5, r6, lr}
   1a94e:	4604      	mov	r4, r0
   1a950:	460e      	mov	r6, r1
   1a952:	4615      	mov	r5, r2
    ble_hs_lock();
   1a954:	f003 fde6 	bl	1e524 <ble_hs_lock>
    *out_cb = ble_gap_slave[instance].cb;
   1a958:	4b06      	ldr	r3, [pc, #24]	; (1a974 <ble_gap_slave_extract_cb+0x28>)
   1a95a:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   1a95e:	69da      	ldr	r2, [r3, #28]
   1a960:	6032      	str	r2, [r6, #0]
    *out_cb_arg = ble_gap_slave[instance].cb_arg;
   1a962:	6a1b      	ldr	r3, [r3, #32]
   1a964:	602b      	str	r3, [r5, #0]
    ble_gap_slave_reset_state(instance);
   1a966:	4620      	mov	r0, r4
   1a968:	f7ff ffe0 	bl	1a92c <ble_gap_slave_reset_state>
    ble_hs_unlock();
   1a96c:	f003 fdde 	bl	1e52c <ble_hs_unlock>
}
   1a970:	bd70      	pop	{r4, r5, r6, pc}
   1a972:	bf00      	nop
   1a974:	20000224 	.word	0x20000224

0001a978 <ble_gap_adv_finished>:
{
   1a978:	b530      	push	{r4, r5, lr}
   1a97a:	b091      	sub	sp, #68	; 0x44
   1a97c:	4604      	mov	r4, r0
   1a97e:	460d      	mov	r5, r1
    memset(&event, 0, sizeof event);
   1a980:	2234      	movs	r2, #52	; 0x34
   1a982:	2100      	movs	r1, #0
   1a984:	a803      	add	r0, sp, #12
   1a986:	f7f3 fd9b 	bl	e4c0 <memset>
    event.type = BLE_GAP_EVENT_ADV_COMPLETE;
   1a98a:	2309      	movs	r3, #9
   1a98c:	f88d 300c 	strb.w	r3, [sp, #12]
    event.adv_complete.reason = reason;
   1a990:	9504      	str	r5, [sp, #16]
    ble_gap_event_listener_call(&event);
   1a992:	a803      	add	r0, sp, #12
   1a994:	f7ff fd6c 	bl	1a470 <ble_gap_event_listener_call>
    ble_gap_slave_extract_cb(instance, &cb, &cb_arg);
   1a998:	aa01      	add	r2, sp, #4
   1a99a:	a902      	add	r1, sp, #8
   1a99c:	4620      	mov	r0, r4
   1a99e:	f7ff ffd5 	bl	1a94c <ble_gap_slave_extract_cb>
    if (cb != NULL) {
   1a9a2:	9b02      	ldr	r3, [sp, #8]
   1a9a4:	b113      	cbz	r3, 1a9ac <ble_gap_adv_finished+0x34>
        cb(&event, cb_arg);
   1a9a6:	9901      	ldr	r1, [sp, #4]
   1a9a8:	a803      	add	r0, sp, #12
   1a9aa:	4798      	blx	r3
}
   1a9ac:	b011      	add	sp, #68	; 0x44
   1a9ae:	bd30      	pop	{r4, r5, pc}

0001a9b0 <ble_gap_update_entry_free>:
    if (entry != NULL) {
   1a9b0:	b128      	cbz	r0, 1a9be <ble_gap_update_entry_free+0xe>
{
   1a9b2:	b508      	push	{r3, lr}
   1a9b4:	4601      	mov	r1, r0
        rc = os_memblock_put(&ble_gap_update_entry_pool, entry);
   1a9b6:	4802      	ldr	r0, [pc, #8]	; (1a9c0 <ble_gap_update_entry_free+0x10>)
   1a9b8:	f7f2 fae2 	bl	cf80 <os_memblock_put>
}
   1a9bc:	bd08      	pop	{r3, pc}
   1a9be:	4770      	bx	lr
   1a9c0:	20002b04 	.word	0x20002b04

0001a9c4 <ble_gap_master_ticks_until_exp>:
    if (ble_gap_master.op == BLE_GAP_OP_NULL || !ble_gap_master.exp_set) {
   1a9c4:	4b0c      	ldr	r3, [pc, #48]	; (1a9f8 <ble_gap_master_ticks_until_exp+0x34>)
   1a9c6:	781b      	ldrb	r3, [r3, #0]
   1a9c8:	b16b      	cbz	r3, 1a9e6 <ble_gap_master_ticks_until_exp+0x22>
   1a9ca:	4b0b      	ldr	r3, [pc, #44]	; (1a9f8 <ble_gap_master_ticks_until_exp+0x34>)
   1a9cc:	785b      	ldrb	r3, [r3, #1]
   1a9ce:	f013 0f01 	tst.w	r3, #1
   1a9d2:	d00b      	beq.n	1a9ec <ble_gap_master_ticks_until_exp+0x28>
{
   1a9d4:	b510      	push	{r4, lr}
    ticks = ble_gap_master.exp_os_ticks - ble_npl_time_get();
   1a9d6:	4b08      	ldr	r3, [pc, #32]	; (1a9f8 <ble_gap_master_ticks_until_exp+0x34>)
   1a9d8:	685c      	ldr	r4, [r3, #4]
    return os_time_get();
   1a9da:	f7f2 fe4b 	bl	d674 <os_time_get>
   1a9de:	1a20      	subs	r0, r4, r0
    if (ticks > 0) {
   1a9e0:	2800      	cmp	r0, #0
   1a9e2:	dd06      	ble.n	1a9f2 <ble_gap_master_ticks_until_exp+0x2e>
}
   1a9e4:	bd10      	pop	{r4, pc}
        return BLE_HS_FOREVER;
   1a9e6:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1a9ea:	4770      	bx	lr
   1a9ec:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
}
   1a9f0:	4770      	bx	lr
    return 0;
   1a9f2:	2000      	movs	r0, #0
   1a9f4:	e7f6      	b.n	1a9e4 <ble_gap_master_ticks_until_exp+0x20>
   1a9f6:	bf00      	nop
   1a9f8:	20000224 	.word	0x20000224

0001a9fc <ble_gap_master_timer>:
{
   1a9fc:	b508      	push	{r3, lr}
    ticks_until_exp = ble_gap_master_ticks_until_exp();
   1a9fe:	f7ff ffe1 	bl	1a9c4 <ble_gap_master_ticks_until_exp>
    if (ticks_until_exp != 0) {
   1aa02:	b9f0      	cbnz	r0, 1aa42 <ble_gap_master_timer+0x46>
    switch (ble_gap_master.op) {
   1aa04:	4b10      	ldr	r3, [pc, #64]	; (1aa48 <ble_gap_master_timer+0x4c>)
   1aa06:	781b      	ldrb	r3, [r3, #0]
   1aa08:	2b01      	cmp	r3, #1
   1aa0a:	d00c      	beq.n	1aa26 <ble_gap_master_timer+0x2a>
   1aa0c:	2b02      	cmp	r3, #2
   1aa0e:	d116      	bne.n	1aa3e <ble_gap_master_timer+0x42>
        rc = ble_gap_conn_cancel_tx();
   1aa10:	f7ff fde4 	bl	1a5dc <ble_gap_conn_cancel_tx>
        if (rc != 0) {
   1aa14:	b9b0      	cbnz	r0, 1aa44 <ble_gap_master_timer+0x48>
            ble_gap_master.exp_set = 0;
   1aa16:	4b0c      	ldr	r3, [pc, #48]	; (1aa48 <ble_gap_master_timer+0x4c>)
   1aa18:	785a      	ldrb	r2, [r3, #1]
   1aa1a:	f36f 0200 	bfc	r2, #0, #1
   1aa1e:	705a      	strb	r2, [r3, #1]
    return BLE_HS_FOREVER;
   1aa20:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
        break;
   1aa24:	e00d      	b.n	1aa42 <ble_gap_master_timer+0x46>
        rc = ble_gap_disc_enable_tx(0, 0);
   1aa26:	2100      	movs	r1, #0
   1aa28:	4608      	mov	r0, r1
   1aa2a:	f7ff fde4 	bl	1a5f6 <ble_gap_disc_enable_tx>
        if (rc != 0) {
   1aa2e:	b108      	cbz	r0, 1aa34 <ble_gap_master_timer+0x38>
            return ble_npl_time_ms_to_ticks32(BLE_GAP_CANCEL_RETRY_TIMEOUT_MS);
   1aa30:	200c      	movs	r0, #12
   1aa32:	e006      	b.n	1aa42 <ble_gap_master_timer+0x46>
        ble_gap_disc_complete();
   1aa34:	f7ff ff5c 	bl	1a8f0 <ble_gap_disc_complete>
    return BLE_HS_FOREVER;
   1aa38:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
        break;
   1aa3c:	e001      	b.n	1aa42 <ble_gap_master_timer+0x46>
    return BLE_HS_FOREVER;
   1aa3e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
}
   1aa42:	bd08      	pop	{r3, pc}
            return ble_npl_time_ms_to_ticks32(BLE_GAP_CANCEL_RETRY_TIMEOUT_MS);
   1aa44:	200c      	movs	r0, #12
   1aa46:	e7fc      	b.n	1aa42 <ble_gap_master_timer+0x46>
   1aa48:	20000224 	.word	0x20000224

0001aa4c <ble_gap_update_next_exp>:
{
   1aa4c:	b538      	push	{r3, r4, r5, lr}
   1aa4e:	4605      	mov	r5, r0
   1aa50:	f7f2 fe10 	bl	d674 <os_time_get>
    SLIST_FOREACH(entry, &ble_gap_update_entries, next) {
   1aa54:	4b0b      	ldr	r3, [pc, #44]	; (1aa84 <ble_gap_update_next_exp+0x38>)
   1aa56:	681a      	ldr	r2, [r3, #0]
    best_ticks = BLE_HS_FOREVER;
   1aa58:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    conn_handle = BLE_HS_CONN_HANDLE_NONE;
   1aa5c:	f64f 74ff 	movw	r4, #65535	; 0xffff
    SLIST_FOREACH(entry, &ble_gap_update_entries, next) {
   1aa60:	e002      	b.n	1aa68 <ble_gap_update_next_exp+0x1c>
            ticks = 0;
   1aa62:	2300      	movs	r3, #0
   1aa64:	e005      	b.n	1aa72 <ble_gap_update_next_exp+0x26>
    SLIST_FOREACH(entry, &ble_gap_update_entries, next) {
   1aa66:	6812      	ldr	r2, [r2, #0]
   1aa68:	b142      	cbz	r2, 1aa7c <ble_gap_update_next_exp+0x30>
        ticks = entry->exp_os_ticks - now;
   1aa6a:	6913      	ldr	r3, [r2, #16]
   1aa6c:	1a1b      	subs	r3, r3, r0
        if (ticks <= 0) {
   1aa6e:	2b00      	cmp	r3, #0
   1aa70:	ddf7      	ble.n	1aa62 <ble_gap_update_next_exp+0x16>
        if (ticks < best_ticks) {
   1aa72:	4299      	cmp	r1, r3
   1aa74:	ddf7      	ble.n	1aa66 <ble_gap_update_next_exp+0x1a>
            conn_handle = entry->conn_handle;
   1aa76:	8a94      	ldrh	r4, [r2, #20]
            best_ticks = ticks;
   1aa78:	4619      	mov	r1, r3
   1aa7a:	e7f4      	b.n	1aa66 <ble_gap_update_next_exp+0x1a>
    if (out_ticks_from_now != NULL) {
   1aa7c:	b105      	cbz	r5, 1aa80 <ble_gap_update_next_exp+0x34>
        *out_ticks_from_now = best_ticks;
   1aa7e:	6029      	str	r1, [r5, #0]
}
   1aa80:	4620      	mov	r0, r4
   1aa82:	bd38      	pop	{r3, r4, r5, pc}
   1aa84:	20002ae8 	.word	0x20002ae8

0001aa88 <ble_gap_slave_ticks_until_exp>:
    if (ble_gap_slave[0].op == BLE_GAP_OP_NULL || !ble_gap_slave[0].exp_set) {
   1aa88:	4b0c      	ldr	r3, [pc, #48]	; (1aabc <ble_gap_slave_ticks_until_exp+0x34>)
   1aa8a:	7d1b      	ldrb	r3, [r3, #20]
   1aa8c:	b16b      	cbz	r3, 1aaaa <ble_gap_slave_ticks_until_exp+0x22>
   1aa8e:	4b0b      	ldr	r3, [pc, #44]	; (1aabc <ble_gap_slave_ticks_until_exp+0x34>)
   1aa90:	7d5b      	ldrb	r3, [r3, #21]
   1aa92:	f013 0f10 	tst.w	r3, #16
   1aa96:	d00b      	beq.n	1aab0 <ble_gap_slave_ticks_until_exp+0x28>
{
   1aa98:	b510      	push	{r4, lr}
    ticks = ble_gap_slave[0].exp_os_ticks - ble_npl_time_get();
   1aa9a:	4b08      	ldr	r3, [pc, #32]	; (1aabc <ble_gap_slave_ticks_until_exp+0x34>)
   1aa9c:	699c      	ldr	r4, [r3, #24]
   1aa9e:	f7f2 fde9 	bl	d674 <os_time_get>
   1aaa2:	1a20      	subs	r0, r4, r0
    if (ticks > 0) {
   1aaa4:	2800      	cmp	r0, #0
   1aaa6:	dd06      	ble.n	1aab6 <ble_gap_slave_ticks_until_exp+0x2e>
}
   1aaa8:	bd10      	pop	{r4, pc}
        return BLE_HS_FOREVER;
   1aaaa:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1aaae:	4770      	bx	lr
   1aab0:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
}
   1aab4:	4770      	bx	lr
    return 0;
   1aab6:	2000      	movs	r0, #0
   1aab8:	e7f6      	b.n	1aaa8 <ble_gap_slave_ticks_until_exp+0x20>
   1aaba:	bf00      	nop
   1aabc:	20000224 	.word	0x20000224

0001aac0 <ble_gap_slave_timer>:
{
   1aac0:	b508      	push	{r3, lr}
    ticks_until_exp = ble_gap_slave_ticks_until_exp();
   1aac2:	f7ff ffe1 	bl	1aa88 <ble_gap_slave_ticks_until_exp>
    if (ticks_until_exp != 0) {
   1aac6:	b100      	cbz	r0, 1aaca <ble_gap_slave_timer+0xa>
}
   1aac8:	bd08      	pop	{r3, pc}
    rc = ble_gap_adv_enable_tx(0);
   1aaca:	2000      	movs	r0, #0
   1aacc:	f7ff fdb0 	bl	1a630 <ble_gap_adv_enable_tx>
    if (rc != 0) {
   1aad0:	b108      	cbz	r0, 1aad6 <ble_gap_slave_timer+0x16>
        return 100;
   1aad2:	2064      	movs	r0, #100	; 0x64
   1aad4:	e7f8      	b.n	1aac8 <ble_gap_slave_timer+0x8>
    ble_gap_slave_reset_state(0);
   1aad6:	f7ff ff29 	bl	1a92c <ble_gap_slave_reset_state>
    ble_gap_adv_finished(0, BLE_HS_ETIMEOUT, 0, 0);
   1aada:	2300      	movs	r3, #0
   1aadc:	461a      	mov	r2, r3
   1aade:	210d      	movs	r1, #13
   1aae0:	4618      	mov	r0, r3
   1aae2:	f7ff ff49 	bl	1a978 <ble_gap_adv_finished>
    return BLE_HS_FOREVER;
   1aae6:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1aaea:	e7ed      	b.n	1aac8 <ble_gap_slave_timer+0x8>

0001aaec <ble_gap_slave_set_timer>:
{
   1aaec:	b510      	push	{r4, lr}
   1aaee:	4604      	mov	r4, r0
   1aaf0:	f7f2 fdc0 	bl	d674 <os_time_get>
    ble_gap_slave[0].exp_os_ticks = ble_npl_time_get() + ticks_from_now;
   1aaf4:	4420      	add	r0, r4
   1aaf6:	4b04      	ldr	r3, [pc, #16]	; (1ab08 <ble_gap_slave_set_timer+0x1c>)
   1aaf8:	6198      	str	r0, [r3, #24]
    ble_gap_slave[0].exp_set = 1;
   1aafa:	7d5a      	ldrb	r2, [r3, #21]
   1aafc:	f042 0210 	orr.w	r2, r2, #16
   1ab00:	755a      	strb	r2, [r3, #21]
    ble_hs_timer_resched();
   1ab02:	f003 fe07 	bl	1e714 <ble_hs_timer_resched>
}
   1ab06:	bd10      	pop	{r4, pc}
   1ab08:	20000224 	.word	0x20000224

0001ab0c <ble_gap_rx_adv_report_sanity_check>:
{
   1ab0c:	b510      	push	{r4, lr}
   1ab0e:	b082      	sub	sp, #8
    STATS_INC(ble_gap_stats, rx_adv_report);
   1ab10:	4c14      	ldr	r4, [pc, #80]	; (1ab64 <ble_gap_rx_adv_report_sanity_check+0x58>)
   1ab12:	6f23      	ldr	r3, [r4, #112]	; 0x70
   1ab14:	3301      	adds	r3, #1
   1ab16:	6723      	str	r3, [r4, #112]	; 0x70
    if (ble_gap_master.op != BLE_GAP_OP_M_DISC) {
   1ab18:	4b13      	ldr	r3, [pc, #76]	; (1ab68 <ble_gap_rx_adv_report_sanity_check+0x5c>)
   1ab1a:	781b      	ldrb	r3, [r3, #0]
   1ab1c:	2b01      	cmp	r3, #1
   1ab1e:	d11b      	bne.n	1ab58 <ble_gap_rx_adv_report_sanity_check+0x4c>
    if (ble_gap_master.disc.limited) {
   1ab20:	4b11      	ldr	r3, [pc, #68]	; (1ab68 <ble_gap_rx_adv_report_sanity_check+0x5c>)
   1ab22:	7c5b      	ldrb	r3, [r3, #17]
   1ab24:	f013 0f01 	tst.w	r3, #1
   1ab28:	d103      	bne.n	1ab32 <ble_gap_rx_adv_report_sanity_check+0x26>
    return 0;
   1ab2a:	2300      	movs	r3, #0
}
   1ab2c:	4618      	mov	r0, r3
   1ab2e:	b002      	add	sp, #8
   1ab30:	bd10      	pop	{r4, pc}
   1ab32:	460a      	mov	r2, r1
   1ab34:	4601      	mov	r1, r0
        rc = ble_hs_adv_find_field(BLE_HS_ADV_TYPE_FLAGS, adv_data,
   1ab36:	ab01      	add	r3, sp, #4
   1ab38:	2001      	movs	r0, #1
   1ab3a:	f004 fa61 	bl	1f000 <ble_hs_adv_find_field>
        if ((rc == 0) && (flags->length == 2) &&
   1ab3e:	4603      	mov	r3, r0
   1ab40:	b968      	cbnz	r0, 1ab5e <ble_gap_rx_adv_report_sanity_check+0x52>
   1ab42:	9a01      	ldr	r2, [sp, #4]
   1ab44:	7811      	ldrb	r1, [r2, #0]
   1ab46:	2902      	cmp	r1, #2
   1ab48:	d1f0      	bne.n	1ab2c <ble_gap_rx_adv_report_sanity_check+0x20>
            !(flags->value[0] & BLE_HS_ADV_F_DISC_LTD)) {
   1ab4a:	7892      	ldrb	r2, [r2, #2]
        if ((rc == 0) && (flags->length == 2) &&
   1ab4c:	f012 0f01 	tst.w	r2, #1
   1ab50:	d1ec      	bne.n	1ab2c <ble_gap_rx_adv_report_sanity_check+0x20>
            return -1;
   1ab52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ab56:	e7e9      	b.n	1ab2c <ble_gap_rx_adv_report_sanity_check+0x20>
        return -1;
   1ab58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ab5c:	e7e6      	b.n	1ab2c <ble_gap_rx_adv_report_sanity_check+0x20>
    return 0;
   1ab5e:	2300      	movs	r3, #0
   1ab60:	e7e4      	b.n	1ab2c <ble_gap_rx_adv_report_sanity_check+0x20>
   1ab62:	bf00      	nop
   1ab64:	200044a0 	.word	0x200044a0
   1ab68:	20000224 	.word	0x20000224

0001ab6c <ble_gap_log_adv>:
{
   1ab6c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ab6e:	b087      	sub	sp, #28
   1ab70:	4606      	mov	r6, r0
   1ab72:	460c      	mov	r4, r1
   1ab74:	4615      	mov	r5, r2
    BLE_HS_LOG(INFO, "disc_mode=%d", adv_params->disc_mode);
   1ab76:	7853      	ldrb	r3, [r2, #1]
   1ab78:	4a15      	ldr	r2, [pc, #84]	; (1abd0 <ble_gap_log_adv+0x64>)
   1ab7a:	2101      	movs	r1, #1
   1ab7c:	2004      	movs	r0, #4
   1ab7e:	f7f4 fff7 	bl	fb70 <modlog_printf>
    if (direct_addr) {
   1ab82:	b1ac      	cbz	r4, 1abb0 <ble_gap_log_adv+0x44>
        BLE_HS_LOG(INFO, " direct_addr_type=%d direct_addr=",
   1ab84:	7823      	ldrb	r3, [r4, #0]
   1ab86:	4a13      	ldr	r2, [pc, #76]	; (1abd4 <ble_gap_log_adv+0x68>)
   1ab88:	2101      	movs	r1, #1
   1ab8a:	2004      	movs	r0, #4
   1ab8c:	f7f4 fff0 	bl	fb70 <modlog_printf>
        BLE_HS_LOG_ADDR(INFO, direct_addr->val);
   1ab90:	79a3      	ldrb	r3, [r4, #6]
   1ab92:	7962      	ldrb	r2, [r4, #5]
   1ab94:	7921      	ldrb	r1, [r4, #4]
   1ab96:	78e0      	ldrb	r0, [r4, #3]
   1ab98:	78a7      	ldrb	r7, [r4, #2]
   1ab9a:	7864      	ldrb	r4, [r4, #1]
   1ab9c:	9404      	str	r4, [sp, #16]
   1ab9e:	9703      	str	r7, [sp, #12]
   1aba0:	9002      	str	r0, [sp, #8]
   1aba2:	9101      	str	r1, [sp, #4]
   1aba4:	9200      	str	r2, [sp, #0]
   1aba6:	4a0c      	ldr	r2, [pc, #48]	; (1abd8 <ble_gap_log_adv+0x6c>)
   1aba8:	2101      	movs	r1, #1
   1abaa:	2004      	movs	r0, #4
   1abac:	f7f4 ffe0 	bl	fb70 <modlog_printf>
    BLE_HS_LOG(INFO, " adv_channel_map=%d own_addr_type=%d "
   1abb0:	79ab      	ldrb	r3, [r5, #6]
   1abb2:	79ea      	ldrb	r2, [r5, #7]
   1abb4:	8869      	ldrh	r1, [r5, #2]
   1abb6:	88a8      	ldrh	r0, [r5, #4]
   1abb8:	9003      	str	r0, [sp, #12]
   1abba:	9102      	str	r1, [sp, #8]
   1abbc:	9201      	str	r2, [sp, #4]
   1abbe:	9600      	str	r6, [sp, #0]
   1abc0:	4a06      	ldr	r2, [pc, #24]	; (1abdc <ble_gap_log_adv+0x70>)
   1abc2:	2101      	movs	r1, #1
   1abc4:	2004      	movs	r0, #4
   1abc6:	f7f4 ffd3 	bl	fb70 <modlog_printf>
}
   1abca:	b007      	add	sp, #28
   1abcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1abce:	bf00      	nop
   1abd0:	0002b0e8 	.word	0x0002b0e8
   1abd4:	0002b0f8 	.word	0x0002b0f8
   1abd8:	0002b228 	.word	0x0002b228
   1abdc:	0002b11c 	.word	0x0002b11c

0001abe0 <ble_gap_log_update>:
{
   1abe0:	b570      	push	{r4, r5, r6, lr}
   1abe2:	b086      	sub	sp, #24
    BLE_HS_LOG(INFO, "connection parameter update; "
   1abe4:	880b      	ldrh	r3, [r1, #0]
   1abe6:	884a      	ldrh	r2, [r1, #2]
   1abe8:	888c      	ldrh	r4, [r1, #4]
   1abea:	88cd      	ldrh	r5, [r1, #6]
   1abec:	890e      	ldrh	r6, [r1, #8]
   1abee:	8949      	ldrh	r1, [r1, #10]
   1abf0:	9105      	str	r1, [sp, #20]
   1abf2:	9604      	str	r6, [sp, #16]
   1abf4:	9503      	str	r5, [sp, #12]
   1abf6:	9402      	str	r4, [sp, #8]
   1abf8:	9201      	str	r2, [sp, #4]
   1abfa:	9300      	str	r3, [sp, #0]
   1abfc:	4603      	mov	r3, r0
   1abfe:	4a03      	ldr	r2, [pc, #12]	; (1ac0c <ble_gap_log_update+0x2c>)
   1ac00:	2101      	movs	r1, #1
   1ac02:	2004      	movs	r0, #4
   1ac04:	f7f4 ffb4 	bl	fb70 <modlog_printf>
}
   1ac08:	b006      	add	sp, #24
   1ac0a:	bd70      	pop	{r4, r5, r6, pc}
   1ac0c:	0002b178 	.word	0x0002b178

0001ac10 <ble_gap_adv_validate>:
    if (adv_params == NULL) {
   1ac10:	b37a      	cbz	r2, 1ac72 <ble_gap_adv_validate+0x62>
{
   1ac12:	b508      	push	{r3, lr}
   1ac14:	4613      	mov	r3, r2
    if (own_addr_type > BLE_HCI_ADV_OWN_ADDR_MAX) {
   1ac16:	2803      	cmp	r0, #3
   1ac18:	d82d      	bhi.n	1ac76 <ble_gap_adv_validate+0x66>
    if (adv_params->disc_mode >= BLE_GAP_DISC_MODE_MAX) {
   1ac1a:	7852      	ldrb	r2, [r2, #1]
   1ac1c:	2a02      	cmp	r2, #2
   1ac1e:	d82c      	bhi.n	1ac7a <ble_gap_adv_validate+0x6a>
    if (ble_gap_slave[0].op != BLE_GAP_OP_NULL) {
   1ac20:	4a1b      	ldr	r2, [pc, #108]	; (1ac90 <ble_gap_adv_validate+0x80>)
   1ac22:	7d12      	ldrb	r2, [r2, #20]
   1ac24:	bb5a      	cbnz	r2, 1ac7e <ble_gap_adv_validate+0x6e>
    switch (adv_params->conn_mode) {
   1ac26:	781a      	ldrb	r2, [r3, #0]
   1ac28:	2a01      	cmp	r2, #1
   1ac2a:	d017      	beq.n	1ac5c <ble_gap_adv_validate+0x4c>
   1ac2c:	b11a      	cbz	r2, 1ac36 <ble_gap_adv_validate+0x26>
   1ac2e:	2a02      	cmp	r2, #2
   1ac30:	d009      	beq.n	1ac46 <ble_gap_adv_validate+0x36>
        return BLE_HS_EINVAL;
   1ac32:	2003      	movs	r0, #3
   1ac34:	e020      	b.n	1ac78 <ble_gap_adv_validate+0x68>
        if (adv_params->high_duty_cycle) {
   1ac36:	7a1b      	ldrb	r3, [r3, #8]
   1ac38:	f013 0f01 	tst.w	r3, #1
   1ac3c:	d101      	bne.n	1ac42 <ble_gap_adv_validate+0x32>
    return 0;
   1ac3e:	2000      	movs	r0, #0
   1ac40:	e01a      	b.n	1ac78 <ble_gap_adv_validate+0x68>
            return BLE_HS_EINVAL;
   1ac42:	2003      	movs	r0, #3
   1ac44:	e018      	b.n	1ac78 <ble_gap_adv_validate+0x68>
        if (adv_params->high_duty_cycle) {
   1ac46:	7a1b      	ldrb	r3, [r3, #8]
   1ac48:	f013 0f01 	tst.w	r3, #1
   1ac4c:	d119      	bne.n	1ac82 <ble_gap_adv_validate+0x72>
        if (!ble_hs_conn_can_alloc()) {
   1ac4e:	f004 fa2b 	bl	1f0a8 <ble_hs_conn_can_alloc>
   1ac52:	b108      	cbz	r0, 1ac58 <ble_gap_adv_validate+0x48>
    return 0;
   1ac54:	2000      	movs	r0, #0
   1ac56:	e00f      	b.n	1ac78 <ble_gap_adv_validate+0x68>
            return BLE_HS_ENOMEM;
   1ac58:	2006      	movs	r0, #6
   1ac5a:	e00d      	b.n	1ac78 <ble_gap_adv_validate+0x68>
        if (peer_addr == NULL) {
   1ac5c:	b199      	cbz	r1, 1ac86 <ble_gap_adv_validate+0x76>
        if (peer_addr->type != BLE_ADDR_PUBLIC &&
   1ac5e:	780b      	ldrb	r3, [r1, #0]
   1ac60:	2b03      	cmp	r3, #3
   1ac62:	d812      	bhi.n	1ac8a <ble_gap_adv_validate+0x7a>
        if (!ble_hs_conn_can_alloc()) {
   1ac64:	f004 fa20 	bl	1f0a8 <ble_hs_conn_can_alloc>
   1ac68:	b108      	cbz	r0, 1ac6e <ble_gap_adv_validate+0x5e>
    return 0;
   1ac6a:	2000      	movs	r0, #0
   1ac6c:	e004      	b.n	1ac78 <ble_gap_adv_validate+0x68>
            return BLE_HS_ENOMEM;
   1ac6e:	2006      	movs	r0, #6
   1ac70:	e002      	b.n	1ac78 <ble_gap_adv_validate+0x68>
        return BLE_HS_EINVAL;
   1ac72:	2003      	movs	r0, #3
}
   1ac74:	4770      	bx	lr
        return BLE_HS_EINVAL;
   1ac76:	2003      	movs	r0, #3
}
   1ac78:	bd08      	pop	{r3, pc}
        return BLE_HS_EINVAL;
   1ac7a:	2003      	movs	r0, #3
   1ac7c:	e7fc      	b.n	1ac78 <ble_gap_adv_validate+0x68>
        return BLE_HS_EALREADY;
   1ac7e:	2002      	movs	r0, #2
   1ac80:	e7fa      	b.n	1ac78 <ble_gap_adv_validate+0x68>
            return BLE_HS_EINVAL;
   1ac82:	2003      	movs	r0, #3
   1ac84:	e7f8      	b.n	1ac78 <ble_gap_adv_validate+0x68>
            return BLE_HS_EINVAL;
   1ac86:	2003      	movs	r0, #3
   1ac88:	e7f6      	b.n	1ac78 <ble_gap_adv_validate+0x68>
            return BLE_HS_EINVAL;
   1ac8a:	2003      	movs	r0, #3
   1ac8c:	e7f4      	b.n	1ac78 <ble_gap_adv_validate+0x68>
   1ac8e:	bf00      	nop
   1ac90:	20000224 	.word	0x20000224

0001ac94 <ble_gap_update_entry_alloc>:
{
   1ac94:	b508      	push	{r3, lr}
    entry = os_memblock_get(&ble_gap_update_entry_pool);
   1ac96:	4807      	ldr	r0, [pc, #28]	; (1acb4 <ble_gap_update_entry_alloc+0x20>)
   1ac98:	f7f2 f94a 	bl	cf30 <os_memblock_get>
    if (entry != NULL) {
   1ac9c:	4603      	mov	r3, r0
   1ac9e:	b130      	cbz	r0, 1acae <ble_gap_update_entry_alloc+0x1a>
        memset(entry, 0, sizeof *entry);
   1aca0:	2200      	movs	r2, #0
   1aca2:	6002      	str	r2, [r0, #0]
   1aca4:	6042      	str	r2, [r0, #4]
   1aca6:	6082      	str	r2, [r0, #8]
   1aca8:	60c2      	str	r2, [r0, #12]
   1acaa:	6102      	str	r2, [r0, #16]
   1acac:	6142      	str	r2, [r0, #20]
}
   1acae:	4618      	mov	r0, r3
   1acb0:	bd08      	pop	{r3, pc}
   1acb2:	bf00      	nop
   1acb4:	20002b04 	.word	0x20002b04

0001acb8 <ble_gap_conn_find>:
{
   1acb8:	b538      	push	{r3, r4, r5, lr}
   1acba:	4604      	mov	r4, r0
   1acbc:	460d      	mov	r5, r1
    ble_hs_lock();
   1acbe:	f003 fc31 	bl	1e524 <ble_hs_lock>
    conn = ble_hs_conn_find(handle);
   1acc2:	4620      	mov	r0, r4
   1acc4:	f004 fabe 	bl	1f244 <ble_hs_conn_find>
    if (conn != NULL && out_desc != NULL) {
   1acc8:	4604      	mov	r4, r0
   1acca:	b118      	cbz	r0, 1acd4 <ble_gap_conn_find+0x1c>
   1accc:	b115      	cbz	r5, 1acd4 <ble_gap_conn_find+0x1c>
        ble_gap_fill_conn_desc(conn, out_desc);
   1acce:	4629      	mov	r1, r5
   1acd0:	f7ff fc0c 	bl	1a4ec <ble_gap_fill_conn_desc>
    ble_hs_unlock();
   1acd4:	f003 fc2a 	bl	1e52c <ble_hs_unlock>
    if (conn == NULL) {
   1acd8:	b10c      	cbz	r4, 1acde <ble_gap_conn_find+0x26>
        return 0;
   1acda:	2000      	movs	r0, #0
}
   1acdc:	bd38      	pop	{r3, r4, r5, pc}
        return BLE_HS_ENOTCONN;
   1acde:	2007      	movs	r0, #7
   1ace0:	e7fc      	b.n	1acdc <ble_gap_conn_find+0x24>
	...

0001ace4 <ble_gap_master_in_progress>:
    return ble_gap_master.op != BLE_GAP_OP_NULL;
   1ace4:	4b02      	ldr	r3, [pc, #8]	; (1acf0 <ble_gap_master_in_progress+0xc>)
   1ace6:	7818      	ldrb	r0, [r3, #0]
}
   1ace8:	3000      	adds	r0, #0
   1acea:	bf18      	it	ne
   1acec:	2001      	movne	r0, #1
   1acee:	4770      	bx	lr
   1acf0:	20000224 	.word	0x20000224

0001acf4 <ble_gap_rx_adv_report>:
{
   1acf4:	b510      	push	{r4, lr}
   1acf6:	4604      	mov	r4, r0
    if (ble_gap_rx_adv_report_sanity_check(desc->data, desc->length_data)) {
   1acf8:	7841      	ldrb	r1, [r0, #1]
   1acfa:	68c0      	ldr	r0, [r0, #12]
   1acfc:	f7ff ff06 	bl	1ab0c <ble_gap_rx_adv_report_sanity_check>
   1ad00:	b100      	cbz	r0, 1ad04 <ble_gap_rx_adv_report+0x10>
}
   1ad02:	bd10      	pop	{r4, pc}
    ble_gap_disc_report(desc);
   1ad04:	4620      	mov	r0, r4
   1ad06:	f7ff fd85 	bl	1a814 <ble_gap_disc_report>
   1ad0a:	e7fa      	b.n	1ad02 <ble_gap_rx_adv_report+0xe>

0001ad0c <ble_gap_rx_rd_rem_sup_feat_complete>:
{
   1ad0c:	b538      	push	{r3, r4, r5, lr}
   1ad0e:	4604      	mov	r4, r0
    ble_hs_lock();
   1ad10:	f003 fc08 	bl	1e524 <ble_hs_lock>
    conn = ble_hs_conn_find(le16toh(ev->conn_handle));
   1ad14:	8860      	ldrh	r0, [r4, #2]
   1ad16:	f004 fa95 	bl	1f244 <ble_hs_conn_find>
    if ((conn != NULL) && (ev->status == 0)) {
   1ad1a:	b110      	cbz	r0, 1ad22 <ble_gap_rx_rd_rem_sup_feat_complete+0x16>
   1ad1c:	4605      	mov	r5, r0
   1ad1e:	7863      	ldrb	r3, [r4, #1]
   1ad20:	b113      	cbz	r3, 1ad28 <ble_gap_rx_rd_rem_sup_feat_complete+0x1c>
    ble_hs_unlock();
   1ad22:	f003 fc03 	bl	1e52c <ble_hs_unlock>
}
   1ad26:	bd38      	pop	{r3, r4, r5, pc}
        conn->supported_feat = get_le32(ev->features);
   1ad28:	1d20      	adds	r0, r4, #4
   1ad2a:	f00e fd35 	bl	29798 <get_le32>
   1ad2e:	6268      	str	r0, [r5, #36]	; 0x24
   1ad30:	e7f7      	b.n	1ad22 <ble_gap_rx_rd_rem_sup_feat_complete+0x16>

0001ad32 <ble_gap_rx_l2cap_update_req>:
{
   1ad32:	b530      	push	{r4, r5, lr}
   1ad34:	b08f      	sub	sp, #60	; 0x3c
   1ad36:	4604      	mov	r4, r0
   1ad38:	460d      	mov	r5, r1
    memset(&event, 0, sizeof event);
   1ad3a:	2234      	movs	r2, #52	; 0x34
   1ad3c:	2100      	movs	r1, #0
   1ad3e:	a801      	add	r0, sp, #4
   1ad40:	f7f3 fbbe 	bl	e4c0 <memset>
    event.type = BLE_GAP_EVENT_L2CAP_UPDATE_REQ;
   1ad44:	2305      	movs	r3, #5
   1ad46:	f88d 3004 	strb.w	r3, [sp, #4]
    event.conn_update_req.conn_handle = conn_handle;
   1ad4a:	f8ad 4010 	strh.w	r4, [sp, #16]
    event.conn_update_req.peer_params = params;
   1ad4e:	9502      	str	r5, [sp, #8]
    rc = ble_gap_call_conn_event_cb(&event, conn_handle);
   1ad50:	4621      	mov	r1, r4
   1ad52:	a801      	add	r0, sp, #4
   1ad54:	f7ff fbb6 	bl	1a4c4 <ble_gap_call_conn_event_cb>
}
   1ad58:	b00f      	add	sp, #60	; 0x3c
   1ad5a:	bd30      	pop	{r4, r5, pc}

0001ad5c <ble_gap_rx_phy_update_complete>:
{
   1ad5c:	b570      	push	{r4, r5, r6, lr}
   1ad5e:	b08e      	sub	sp, #56	; 0x38
   1ad60:	4604      	mov	r4, r0
    uint16_t conn_handle = le16toh(ev->conn_handle);
   1ad62:	8845      	ldrh	r5, [r0, #2]
   1ad64:	b2ae      	uxth	r6, r5
    memset(&event, 0, sizeof event);
   1ad66:	2234      	movs	r2, #52	; 0x34
   1ad68:	2100      	movs	r1, #0
   1ad6a:	a801      	add	r0, sp, #4
   1ad6c:	f7f3 fba8 	bl	e4c0 <memset>
    event.type = BLE_GAP_EVENT_PHY_UPDATE_COMPLETE;
   1ad70:	2312      	movs	r3, #18
   1ad72:	f88d 3004 	strb.w	r3, [sp, #4]
    event.phy_updated.status = ev->status;
   1ad76:	7863      	ldrb	r3, [r4, #1]
   1ad78:	9302      	str	r3, [sp, #8]
    event.phy_updated.conn_handle = conn_handle;
   1ad7a:	f8ad 500c 	strh.w	r5, [sp, #12]
    event.phy_updated.tx_phy = ev->tx_phy;
   1ad7e:	7923      	ldrb	r3, [r4, #4]
   1ad80:	f88d 300e 	strb.w	r3, [sp, #14]
    event.phy_updated.rx_phy = ev->rx_phy;
   1ad84:	7963      	ldrb	r3, [r4, #5]
   1ad86:	f88d 300f 	strb.w	r3, [sp, #15]
    ble_gap_event_listener_call(&event);
   1ad8a:	a801      	add	r0, sp, #4
   1ad8c:	f7ff fb70 	bl	1a470 <ble_gap_event_listener_call>
    ble_gap_call_conn_event_cb(&event, conn_handle);
   1ad90:	4631      	mov	r1, r6
   1ad92:	a801      	add	r0, sp, #4
   1ad94:	f7ff fb96 	bl	1a4c4 <ble_gap_call_conn_event_cb>
}
   1ad98:	b00e      	add	sp, #56	; 0x38
   1ad9a:	bd70      	pop	{r4, r5, r6, pc}

0001ad9c <ble_gap_adv_start>:
{
   1ad9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ada0:	b082      	sub	sp, #8
   1ada2:	4605      	mov	r5, r0
   1ada4:	4688      	mov	r8, r1
   1ada6:	4617      	mov	r7, r2
   1ada8:	461e      	mov	r6, r3
    STATS_INC(ble_gap_stats, adv_start);
   1adaa:	4a3e      	ldr	r2, [pc, #248]	; (1aea4 <ble_gap_adv_start+0x108>)
   1adac:	69d3      	ldr	r3, [r2, #28]
   1adae:	3301      	adds	r3, #1
   1adb0:	61d3      	str	r3, [r2, #28]
    ble_hs_lock();
   1adb2:	f003 fbb7 	bl	1e524 <ble_hs_lock>
    rc = ble_gap_adv_validate(own_addr_type, direct_addr, adv_params);
   1adb6:	4632      	mov	r2, r6
   1adb8:	4641      	mov	r1, r8
   1adba:	4628      	mov	r0, r5
   1adbc:	f7ff ff28 	bl	1ac10 <ble_gap_adv_validate>
    if (rc != 0) {
   1adc0:	4604      	mov	r4, r0
   1adc2:	b9b0      	cbnz	r0, 1adf2 <ble_gap_adv_start+0x56>
    if (duration_ms != BLE_HS_FOREVER) {
   1adc4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   1adc8:	429f      	cmp	r7, r3
   1adca:	d005      	beq.n	1add8 <ble_gap_adv_start+0x3c>
}

static inline ble_npl_error_t
ble_npl_time_ms_to_ticks(uint32_t ms, ble_npl_time_t *out_ticks)
{
    return (ble_npl_error_t)os_time_ms_to_ticks(ms, out_ticks);
   1adcc:	a901      	add	r1, sp, #4
   1adce:	4638      	mov	r0, r7
   1add0:	f7f2 fcef 	bl	d7b2 <os_time_ms_to_ticks>
        if (rc != 0) {
   1add4:	b2c0      	uxtb	r0, r0
   1add6:	b9b8      	cbnz	r0, 1ae08 <ble_gap_adv_start+0x6c>
    if (!ble_hs_is_enabled()) {
   1add8:	f003 fbdc 	bl	1e594 <ble_hs_is_enabled>
   1addc:	2800      	cmp	r0, #0
   1adde:	d05d      	beq.n	1ae9c <ble_gap_adv_start+0x100>
    if (ble_gap_is_preempted()) {
   1ade0:	f7ff fa80 	bl	1a2e4 <ble_gap_is_preempted>
   1ade4:	2800      	cmp	r0, #0
   1ade6:	d155      	bne.n	1ae94 <ble_gap_adv_start+0xf8>
    rc = ble_hs_id_use_addr(own_addr_type);
   1ade8:	4628      	mov	r0, r5
   1adea:	f005 f904 	bl	1fff6 <ble_hs_id_use_addr>
    if (rc != 0) {
   1adee:	4604      	mov	r4, r0
   1adf0:	b170      	cbz	r0, 1ae10 <ble_gap_adv_start+0x74>
    ble_hs_unlock();
   1adf2:	f003 fb9b 	bl	1e52c <ble_hs_unlock>
    if (rc != 0) {
   1adf6:	b11c      	cbz	r4, 1ae00 <ble_gap_adv_start+0x64>
        STATS_INC(ble_gap_stats, adv_start_fail);
   1adf8:	4a2a      	ldr	r2, [pc, #168]	; (1aea4 <ble_gap_adv_start+0x108>)
   1adfa:	6a13      	ldr	r3, [r2, #32]
   1adfc:	3301      	adds	r3, #1
   1adfe:	6213      	str	r3, [r2, #32]
}
   1ae00:	4620      	mov	r0, r4
   1ae02:	b002      	add	sp, #8
   1ae04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ble_hs_unlock();
   1ae08:	f003 fb90 	bl	1e52c <ble_hs_unlock>
            rc = BLE_HS_EINVAL;
   1ae0c:	2403      	movs	r4, #3
   1ae0e:	e7f3      	b.n	1adf8 <ble_gap_adv_start+0x5c>
    BLE_HS_LOG(INFO, "GAP procedure initiated: advertise; ");
   1ae10:	4a25      	ldr	r2, [pc, #148]	; (1aea8 <ble_gap_adv_start+0x10c>)
   1ae12:	2101      	movs	r1, #1
   1ae14:	2004      	movs	r0, #4
   1ae16:	f7f4 feab 	bl	fb70 <modlog_printf>
    ble_gap_log_adv(own_addr_type, direct_addr, adv_params);
   1ae1a:	4632      	mov	r2, r6
   1ae1c:	4641      	mov	r1, r8
   1ae1e:	4628      	mov	r0, r5
   1ae20:	f7ff fea4 	bl	1ab6c <ble_gap_log_adv>
    BLE_HS_LOG(INFO, "\n");
   1ae24:	4a21      	ldr	r2, [pc, #132]	; (1aeac <ble_gap_adv_start+0x110>)
   1ae26:	2101      	movs	r1, #1
   1ae28:	2004      	movs	r0, #4
   1ae2a:	f7f4 fea1 	bl	fb70 <modlog_printf>
    ble_gap_slave[0].cb = cb;
   1ae2e:	4b20      	ldr	r3, [pc, #128]	; (1aeb0 <ble_gap_adv_start+0x114>)
   1ae30:	9a08      	ldr	r2, [sp, #32]
   1ae32:	61da      	str	r2, [r3, #28]
    ble_gap_slave[0].cb_arg = cb_arg;
   1ae34:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1ae36:	621a      	str	r2, [r3, #32]
    ble_gap_slave[0].our_addr_type = own_addr_type;
   1ae38:	7d5a      	ldrb	r2, [r3, #21]
   1ae3a:	f365 0201 	bfi	r2, r5, #0, #2
   1ae3e:	755a      	strb	r2, [r3, #21]
    if (adv_params->conn_mode != BLE_GAP_CONN_MODE_NON) {
   1ae40:	7833      	ldrb	r3, [r6, #0]
   1ae42:	b1eb      	cbz	r3, 1ae80 <ble_gap_adv_start+0xe4>
        ble_gap_slave[0].connectable = 1;
   1ae44:	4a1a      	ldr	r2, [pc, #104]	; (1aeb0 <ble_gap_adv_start+0x114>)
   1ae46:	7d53      	ldrb	r3, [r2, #21]
   1ae48:	f043 0308 	orr.w	r3, r3, #8
   1ae4c:	7553      	strb	r3, [r2, #21]
    rc = ble_gap_adv_params_tx(own_addr_type, direct_addr, adv_params);
   1ae4e:	4632      	mov	r2, r6
   1ae50:	4641      	mov	r1, r8
   1ae52:	4628      	mov	r0, r5
   1ae54:	f7ff fbfe 	bl	1a654 <ble_gap_adv_params_tx>
    if (rc != 0) {
   1ae58:	4604      	mov	r4, r0
   1ae5a:	2800      	cmp	r0, #0
   1ae5c:	d1c9      	bne.n	1adf2 <ble_gap_adv_start+0x56>
    ble_gap_slave[0].op = BLE_GAP_OP_S_ADV;
   1ae5e:	2001      	movs	r0, #1
   1ae60:	4b13      	ldr	r3, [pc, #76]	; (1aeb0 <ble_gap_adv_start+0x114>)
   1ae62:	7518      	strb	r0, [r3, #20]
    rc = ble_gap_adv_enable_tx(1);
   1ae64:	f7ff fbe4 	bl	1a630 <ble_gap_adv_enable_tx>
    if (rc != 0) {
   1ae68:	4604      	mov	r4, r0
   1ae6a:	b978      	cbnz	r0, 1ae8c <ble_gap_adv_start+0xf0>
    if (duration_ms != BLE_HS_FOREVER) {
   1ae6c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   1ae70:	429f      	cmp	r7, r3
   1ae72:	d002      	beq.n	1ae7a <ble_gap_adv_start+0xde>
        ble_gap_slave_set_timer(duration_ticks);
   1ae74:	9801      	ldr	r0, [sp, #4]
   1ae76:	f7ff fe39 	bl	1aaec <ble_gap_slave_set_timer>
    ble_hs_unlock();
   1ae7a:	f003 fb57 	bl	1e52c <ble_hs_unlock>
   1ae7e:	e7bf      	b.n	1ae00 <ble_gap_adv_start+0x64>
        ble_gap_slave[0].connectable = 0;
   1ae80:	4b0b      	ldr	r3, [pc, #44]	; (1aeb0 <ble_gap_adv_start+0x114>)
   1ae82:	7d5a      	ldrb	r2, [r3, #21]
   1ae84:	f36f 02c3 	bfc	r2, #3, #1
   1ae88:	755a      	strb	r2, [r3, #21]
   1ae8a:	e7e0      	b.n	1ae4e <ble_gap_adv_start+0xb2>
        ble_gap_slave_reset_state(0);
   1ae8c:	2000      	movs	r0, #0
   1ae8e:	f7ff fd4d 	bl	1a92c <ble_gap_slave_reset_state>
        goto done;
   1ae92:	e7ae      	b.n	1adf2 <ble_gap_adv_start+0x56>
    ble_hs_unlock();
   1ae94:	f003 fb4a 	bl	1e52c <ble_hs_unlock>
        rc = BLE_HS_EPREEMPTED;
   1ae98:	241d      	movs	r4, #29
   1ae9a:	e7ad      	b.n	1adf8 <ble_gap_adv_start+0x5c>
    ble_hs_unlock();
   1ae9c:	f003 fb46 	bl	1e52c <ble_hs_unlock>
        rc = BLE_HS_EDISABLED;
   1aea0:	241e      	movs	r4, #30
   1aea2:	e7a9      	b.n	1adf8 <ble_gap_adv_start+0x5c>
   1aea4:	200044a0 	.word	0x200044a0
   1aea8:	0002b050 	.word	0x0002b050
   1aeac:	0002b63c 	.word	0x0002b63c
   1aeb0:	20000224 	.word	0x20000224

0001aeb4 <ble_gap_adv_set_data>:
    STATS_INC(ble_gap_stats, adv_set_data);
   1aeb4:	4a11      	ldr	r2, [pc, #68]	; (1aefc <ble_gap_adv_set_data+0x48>)
   1aeb6:	6a53      	ldr	r3, [r2, #36]	; 0x24
   1aeb8:	3301      	adds	r3, #1
   1aeba:	6253      	str	r3, [r2, #36]	; 0x24
    if (((data == NULL) && (data_len != 0)) ||
   1aebc:	4603      	mov	r3, r0
   1aebe:	b1b0      	cbz	r0, 1aeee <ble_gap_adv_set_data+0x3a>
   1aec0:	291f      	cmp	r1, #31
   1aec2:	dc18      	bgt.n	1aef6 <ble_gap_adv_set_data+0x42>
{
   1aec4:	b510      	push	{r4, lr}
   1aec6:	b08a      	sub	sp, #40	; 0x28
   1aec8:	460c      	mov	r4, r1
    memcpy(cmd.adv_data, data, data_len);
   1aeca:	460a      	mov	r2, r1
   1aecc:	4619      	mov	r1, r3
   1aece:	f10d 0009 	add.w	r0, sp, #9
   1aed2:	f7f3 facd 	bl	e470 <memcpy>
    cmd.adv_data_len = data_len;
   1aed6:	f88d 4008 	strb.w	r4, [sp, #8]
    return ble_hs_hci_cmd_tx(opcode, &cmd, sizeof(cmd), NULL, 0);
   1aeda:	2300      	movs	r3, #0
   1aedc:	9300      	str	r3, [sp, #0]
   1aede:	2220      	movs	r2, #32
   1aee0:	a902      	add	r1, sp, #8
   1aee2:	f242 0008 	movw	r0, #8200	; 0x2008
   1aee6:	f004 fbc9 	bl	1f67c <ble_hs_hci_cmd_tx>
}
   1aeea:	b00a      	add	sp, #40	; 0x28
   1aeec:	bd10      	pop	{r4, pc}
    if (((data == NULL) && (data_len != 0)) ||
   1aeee:	2900      	cmp	r1, #0
   1aef0:	d0e6      	beq.n	1aec0 <ble_gap_adv_set_data+0xc>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1aef2:	2012      	movs	r0, #18
   1aef4:	4770      	bx	lr
   1aef6:	2012      	movs	r0, #18
}
   1aef8:	4770      	bx	lr
   1aefa:	bf00      	nop
   1aefc:	200044a0 	.word	0x200044a0

0001af00 <ble_gap_adv_set_fields>:
{
   1af00:	b500      	push	{lr}
   1af02:	b08b      	sub	sp, #44	; 0x2c
    rc = ble_hs_adv_set_fields(adv_fields, buf, &buf_sz, sizeof buf);
   1af04:	231f      	movs	r3, #31
   1af06:	f10d 0207 	add.w	r2, sp, #7
   1af0a:	a902      	add	r1, sp, #8
   1af0c:	f004 f854 	bl	1efb8 <ble_hs_adv_set_fields>
    if (rc != 0) {
   1af10:	4603      	mov	r3, r0
   1af12:	b118      	cbz	r0, 1af1c <ble_gap_adv_set_fields+0x1c>
}
   1af14:	4618      	mov	r0, r3
   1af16:	b00b      	add	sp, #44	; 0x2c
   1af18:	f85d fb04 	ldr.w	pc, [sp], #4
    rc = ble_gap_adv_set_data(buf, buf_sz);
   1af1c:	f89d 1007 	ldrb.w	r1, [sp, #7]
   1af20:	a802      	add	r0, sp, #8
   1af22:	f7ff ffc7 	bl	1aeb4 <ble_gap_adv_set_data>
   1af26:	4603      	mov	r3, r0
   1af28:	e7f4      	b.n	1af14 <ble_gap_adv_set_fields+0x14>

0001af2a <ble_gap_adv_active>:
{
   1af2a:	b508      	push	{r3, lr}
    return ble_gap_adv_active_instance(0);
   1af2c:	2000      	movs	r0, #0
   1af2e:	f7ff fa01 	bl	1a334 <ble_gap_adv_active_instance>
}
   1af32:	bd08      	pop	{r3, pc}

0001af34 <ble_gap_rx_conn_complete>:
{
   1af34:	b5f0      	push	{r4, r5, r6, r7, lr}
   1af36:	b091      	sub	sp, #68	; 0x44
    STATS_INC(ble_gap_stats, rx_conn_complete);
   1af38:	4a6e      	ldr	r2, [pc, #440]	; (1b0f4 <ble_gap_rx_conn_complete+0x1c0>)
   1af3a:	6f53      	ldr	r3, [r2, #116]	; 0x74
   1af3c:	3301      	adds	r3, #1
   1af3e:	6753      	str	r3, [r2, #116]	; 0x74
    if (evt->status != BLE_ERR_SUCCESS) {
   1af40:	7803      	ldrb	r3, [r0, #0]
   1af42:	b39b      	cbz	r3, 1afac <ble_gap_rx_conn_complete+0x78>
        switch (evt->status) {
   1af44:	2b02      	cmp	r3, #2
   1af46:	d010      	beq.n	1af6a <ble_gap_rx_conn_complete+0x36>
   1af48:	2b3c      	cmp	r3, #60	; 0x3c
   1af4a:	d120      	bne.n	1af8e <ble_gap_rx_conn_complete+0x5a>
            if (ble_gap_adv_active()) {
   1af4c:	f7ff ffed 	bl	1af2a <ble_gap_adv_active>
   1af50:	4605      	mov	r5, r0
   1af52:	b910      	cbnz	r0, 1af5a <ble_gap_rx_conn_complete+0x26>
}
   1af54:	4628      	mov	r0, r5
   1af56:	b011      	add	sp, #68	; 0x44
   1af58:	bdf0      	pop	{r4, r5, r6, r7, pc}
                ble_gap_adv_finished(0, 0, 0, 0);
   1af5a:	2300      	movs	r3, #0
   1af5c:	461a      	mov	r2, r3
   1af5e:	4619      	mov	r1, r3
   1af60:	4618      	mov	r0, r3
   1af62:	f7ff fd09 	bl	1a978 <ble_gap_adv_finished>
        return 0;
   1af66:	2500      	movs	r5, #0
   1af68:	e7f4      	b.n	1af54 <ble_gap_rx_conn_complete+0x20>
            if (ble_gap_master_in_progress()) {
   1af6a:	f7ff febb 	bl	1ace4 <ble_gap_master_in_progress>
   1af6e:	4605      	mov	r5, r0
   1af70:	2800      	cmp	r0, #0
   1af72:	d0ef      	beq.n	1af54 <ble_gap_rx_conn_complete+0x20>
                if (ble_gap_master.preempted_op == BLE_GAP_OP_M_CONN) {
   1af74:	4b60      	ldr	r3, [pc, #384]	; (1b0f8 <ble_gap_rx_conn_complete+0x1c4>)
   1af76:	7c1b      	ldrb	r3, [r3, #16]
   1af78:	2b02      	cmp	r3, #2
   1af7a:	d003      	beq.n	1af84 <ble_gap_rx_conn_complete+0x50>
                    ble_gap_master_connect_cancelled();
   1af7c:	f7ff fc98 	bl	1a8b0 <ble_gap_master_connect_cancelled>
        return 0;
   1af80:	2500      	movs	r5, #0
   1af82:	e7e7      	b.n	1af54 <ble_gap_rx_conn_complete+0x20>
                    ble_gap_master_failed(BLE_HS_EPREEMPTED);
   1af84:	201d      	movs	r0, #29
   1af86:	f7ff fc81 	bl	1a88c <ble_gap_master_failed>
        return 0;
   1af8a:	2500      	movs	r5, #0
   1af8c:	e7e2      	b.n	1af54 <ble_gap_rx_conn_complete+0x20>
            BLE_HS_LOG(INFO, "controller reported invalid error code in conn"
   1af8e:	4a5b      	ldr	r2, [pc, #364]	; (1b0fc <ble_gap_rx_conn_complete+0x1c8>)
   1af90:	2101      	movs	r1, #1
   1af92:	2004      	movs	r0, #4
   1af94:	f7f4 fdec 	bl	fb70 <modlog_printf>
            assert(0);
   1af98:	f7f1 f926 	bl	c1e8 <hal_debugger_connected>
   1af9c:	b100      	cbz	r0, 1afa0 <ble_gap_rx_conn_complete+0x6c>
   1af9e:	be01      	bkpt	0x0001
   1afa0:	2300      	movs	r3, #0
   1afa2:	461a      	mov	r2, r3
   1afa4:	4619      	mov	r1, r3
   1afa6:	4618      	mov	r0, r3
   1afa8:	f7f1 fb58 	bl	c65c <__assert_func>
   1afac:	4604      	mov	r4, r0
   1afae:	460e      	mov	r6, r1
    if (ble_hs_atomic_conn_flags(evt->connection_handle, NULL) == 0) {
   1afb0:	2100      	movs	r1, #0
   1afb2:	8840      	ldrh	r0, [r0, #2]
   1afb4:	f004 f853 	bl	1f05e <ble_hs_atomic_conn_flags>
   1afb8:	4605      	mov	r5, r0
   1afba:	2800      	cmp	r0, #0
   1afbc:	d0ca      	beq.n	1af54 <ble_gap_rx_conn_complete+0x20>
    switch (evt->role) {
   1afbe:	7923      	ldrb	r3, [r4, #4]
   1afc0:	2b00      	cmp	r3, #0
   1afc2:	d062      	beq.n	1b08a <ble_gap_rx_conn_complete+0x156>
   1afc4:	2b01      	cmp	r3, #1
   1afc6:	d066      	beq.n	1b096 <ble_gap_rx_conn_complete+0x162>
    conn = ble_hs_conn_alloc(evt->connection_handle);
   1afc8:	8860      	ldrh	r0, [r4, #2]
   1afca:	f004 f8eb 	bl	1f1a4 <ble_hs_conn_alloc>
   1afce:	4605      	mov	r5, r0
    conn->bhc_itvl = evt->conn_itvl;
   1afd0:	89a3      	ldrh	r3, [r4, #12]
   1afd2:	8383      	strh	r3, [r0, #28]
    conn->bhc_latency = evt->conn_latency;
   1afd4:	89e3      	ldrh	r3, [r4, #14]
   1afd6:	83c3      	strh	r3, [r0, #30]
    conn->bhc_supervision_timeout = evt->supervision_timeout;
   1afd8:	8a23      	ldrh	r3, [r4, #16]
   1afda:	8403      	strh	r3, [r0, #32]
    conn->bhc_master_clock_accuracy = evt->master_clk_acc;
   1afdc:	7ca3      	ldrb	r3, [r4, #18]
   1afde:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
    if (evt->role == BLE_HCI_LE_CONN_COMPLETE_ROLE_MASTER) {
   1afe2:	7923      	ldrb	r3, [r4, #4]
   1afe4:	2b00      	cmp	r3, #0
   1afe6:	d15d      	bne.n	1b0a4 <ble_gap_rx_conn_complete+0x170>
        conn->bhc_cb = ble_gap_master.cb;
   1afe8:	4b43      	ldr	r3, [pc, #268]	; (1b0f8 <ble_gap_rx_conn_complete+0x1c4>)
   1afea:	689a      	ldr	r2, [r3, #8]
   1afec:	65c2      	str	r2, [r0, #92]	; 0x5c
        conn->bhc_cb_arg = ble_gap_master.cb_arg;
   1afee:	68da      	ldr	r2, [r3, #12]
   1aff0:	6602      	str	r2, [r0, #96]	; 0x60
        conn->bhc_flags |= BLE_HS_CONN_F_MASTER;
   1aff2:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
   1aff6:	f042 0201 	orr.w	r2, r2, #1
   1affa:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
        conn->bhc_our_addr_type = ble_gap_master.conn.our_addr_type;
   1affe:	7c5b      	ldrb	r3, [r3, #17]
   1b000:	f3c3 0341 	ubfx	r3, r3, #1, #2
   1b004:	7183      	strb	r3, [r0, #6]
        ble_gap_master_reset_state();
   1b006:	f7ff fbdb 	bl	1a7c0 <ble_gap_master_reset_state>
    conn->bhc_peer_addr.type = evt->peer_addr_type;
   1b00a:	7966      	ldrb	r6, [r4, #5]
   1b00c:	71ee      	strb	r6, [r5, #7]
    memcpy(conn->bhc_peer_addr.val, evt->peer_addr, 6);
   1b00e:	4623      	mov	r3, r4
   1b010:	f853 2f06 	ldr.w	r2, [r3, #6]!
   1b014:	60aa      	str	r2, [r5, #8]
   1b016:	889b      	ldrh	r3, [r3, #4]
   1b018:	81ab      	strh	r3, [r5, #12]
    conn->bhc_our_rpa_addr.type = BLE_ADDR_RANDOM;
   1b01a:	2301      	movs	r3, #1
   1b01c:	73ab      	strb	r3, [r5, #14]
    memcpy(conn->bhc_our_rpa_addr.val, evt->local_rpa, 6);
   1b01e:	4623      	mov	r3, r4
   1b020:	f853 2f13 	ldr.w	r2, [r3, #19]!
   1b024:	f8c5 200f 	str.w	r2, [r5, #15]
   1b028:	889b      	ldrh	r3, [r3, #4]
   1b02a:	f8a5 3013 	strh.w	r3, [r5, #19]
    if (memcmp(BLE_ADDR_ANY->val, evt->peer_rpa, 6) == 0) {
   1b02e:	2300      	movs	r3, #0
   1b030:	930e      	str	r3, [sp, #56]	; 0x38
   1b032:	f8cd 303b 	str.w	r3, [sp, #59]	; 0x3b
   1b036:	f104 0719 	add.w	r7, r4, #25
   1b03a:	2206      	movs	r2, #6
   1b03c:	4639      	mov	r1, r7
   1b03e:	f10d 0039 	add.w	r0, sp, #57	; 0x39
   1b042:	f7f3 f9f1 	bl	e428 <memcmp>
   1b046:	2800      	cmp	r0, #0
   1b048:	d14b      	bne.n	1b0e2 <ble_gap_rx_conn_complete+0x1ae>
        if (BLE_ADDR_IS_RPA(&conn->bhc_peer_addr)) {
   1b04a:	2e01      	cmp	r6, #1
   1b04c:	d039      	beq.n	1b0c2 <ble_gap_rx_conn_complete+0x18e>
    ble_hs_lock();
   1b04e:	f003 fa69 	bl	1e524 <ble_hs_lock>
    memset(&event, 0, sizeof event);
   1b052:	2234      	movs	r2, #52	; 0x34
   1b054:	2100      	movs	r1, #0
   1b056:	a801      	add	r0, sp, #4
   1b058:	f7f3 fa32 	bl	e4c0 <memset>
    ble_hs_conn_insert(conn);
   1b05c:	4628      	mov	r0, r5
   1b05e:	f004 f8fd 	bl	1f25c <ble_hs_conn_insert>
    ble_hs_unlock();
   1b062:	f003 fa63 	bl	1e52c <ble_hs_unlock>
    event.type = BLE_GAP_EVENT_CONNECT;
   1b066:	2500      	movs	r5, #0
   1b068:	f88d 5004 	strb.w	r5, [sp, #4]
    event.connect.conn_handle = evt->connection_handle;
   1b06c:	8863      	ldrh	r3, [r4, #2]
   1b06e:	f8ad 300c 	strh.w	r3, [sp, #12]
    event.connect.status = 0;
   1b072:	9502      	str	r5, [sp, #8]
    ble_gap_event_listener_call(&event);
   1b074:	a801      	add	r0, sp, #4
   1b076:	f7ff f9fb 	bl	1a470 <ble_gap_event_listener_call>
    ble_gap_call_conn_event_cb(&event, evt->connection_handle);
   1b07a:	8861      	ldrh	r1, [r4, #2]
   1b07c:	a801      	add	r0, sp, #4
   1b07e:	f7ff fa21 	bl	1a4c4 <ble_gap_call_conn_event_cb>
    ble_gap_rd_rem_sup_feat_tx(evt->connection_handle);
   1b082:	8860      	ldrh	r0, [r4, #2]
   1b084:	f7ff fa9b 	bl	1a5be <ble_gap_rd_rem_sup_feat_tx>
    return 0;
   1b088:	e764      	b.n	1af54 <ble_gap_rx_conn_complete+0x20>
        rc = ble_gap_accept_master_conn();
   1b08a:	f7ff f95f 	bl	1a34c <ble_gap_accept_master_conn>
        if (rc != 0) {
   1b08e:	4605      	mov	r5, r0
   1b090:	2800      	cmp	r0, #0
   1b092:	d099      	beq.n	1afc8 <ble_gap_rx_conn_complete+0x94>
   1b094:	e75e      	b.n	1af54 <ble_gap_rx_conn_complete+0x20>
        rc = ble_gap_accept_slave_conn(instance);
   1b096:	4630      	mov	r0, r6
   1b098:	f7ff f968 	bl	1a36c <ble_gap_accept_slave_conn>
        if (rc != 0) {
   1b09c:	4605      	mov	r5, r0
   1b09e:	2800      	cmp	r0, #0
   1b0a0:	d092      	beq.n	1afc8 <ble_gap_rx_conn_complete+0x94>
   1b0a2:	e757      	b.n	1af54 <ble_gap_rx_conn_complete+0x20>
        conn->bhc_cb = ble_gap_slave[instance].cb;
   1b0a4:	4b14      	ldr	r3, [pc, #80]	; (1b0f8 <ble_gap_rx_conn_complete+0x1c4>)
   1b0a6:	eb03 1306 	add.w	r3, r3, r6, lsl #4
   1b0aa:	69da      	ldr	r2, [r3, #28]
   1b0ac:	65c2      	str	r2, [r0, #92]	; 0x5c
        conn->bhc_cb_arg = ble_gap_slave[instance].cb_arg;
   1b0ae:	6a1a      	ldr	r2, [r3, #32]
   1b0b0:	6602      	str	r2, [r0, #96]	; 0x60
        conn->bhc_our_addr_type = ble_gap_slave[instance].our_addr_type;
   1b0b2:	7d5b      	ldrb	r3, [r3, #21]
   1b0b4:	f3c3 0301 	ubfx	r3, r3, #0, #2
   1b0b8:	7183      	strb	r3, [r0, #6]
        ble_gap_slave_reset_state(instance);
   1b0ba:	4630      	mov	r0, r6
   1b0bc:	f7ff fc36 	bl	1a92c <ble_gap_slave_reset_state>
   1b0c0:	e7a3      	b.n	1b00a <ble_gap_rx_conn_complete+0xd6>
        if (BLE_ADDR_IS_RPA(&conn->bhc_peer_addr)) {
   1b0c2:	7b6b      	ldrb	r3, [r5, #13]
   1b0c4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1b0c8:	2b40      	cmp	r3, #64	; 0x40
   1b0ca:	d1c0      	bne.n	1b04e <ble_gap_rx_conn_complete+0x11a>
            conn->bhc_peer_rpa_addr = conn->bhc_peer_addr;
   1b0cc:	462a      	mov	r2, r5
   1b0ce:	f852 1f07 	ldr.w	r1, [r2, #7]!
   1b0d2:	f8c5 1015 	str.w	r1, [r5, #21]
   1b0d6:	8891      	ldrh	r1, [r2, #4]
   1b0d8:	7992      	ldrb	r2, [r2, #6]
   1b0da:	f8a5 1019 	strh.w	r1, [r5, #25]
   1b0de:	76ea      	strb	r2, [r5, #27]
   1b0e0:	e7b5      	b.n	1b04e <ble_gap_rx_conn_complete+0x11a>
        conn->bhc_peer_rpa_addr.type = BLE_ADDR_RANDOM;
   1b0e2:	2301      	movs	r3, #1
   1b0e4:	756b      	strb	r3, [r5, #21]
        memcpy(conn->bhc_peer_rpa_addr.val, evt->peer_rpa, 6);
   1b0e6:	683b      	ldr	r3, [r7, #0]
   1b0e8:	f8c5 3016 	str.w	r3, [r5, #22]
   1b0ec:	88bb      	ldrh	r3, [r7, #4]
   1b0ee:	836b      	strh	r3, [r5, #26]
   1b0f0:	e7ad      	b.n	1b04e <ble_gap_rx_conn_complete+0x11a>
   1b0f2:	bf00      	nop
   1b0f4:	200044a0 	.word	0x200044a0
   1b0f8:	20000224 	.word	0x20000224
   1b0fc:	0002b24c 	.word	0x0002b24c

0001b100 <ble_gap_adv_stop_no_lock>:
{
   1b100:	b538      	push	{r3, r4, r5, lr}
    STATS_INC(ble_gap_stats, adv_stop);
   1b102:	4a0e      	ldr	r2, [pc, #56]	; (1b13c <ble_gap_adv_stop_no_lock+0x3c>)
   1b104:	6953      	ldr	r3, [r2, #20]
   1b106:	3301      	adds	r3, #1
   1b108:	6153      	str	r3, [r2, #20]
    active = ble_gap_adv_active();
   1b10a:	f7ff ff0e 	bl	1af2a <ble_gap_adv_active>
   1b10e:	4605      	mov	r5, r0
    BLE_HS_LOG(INFO, "GAP procedure initiated: stop advertising.\n");
   1b110:	4a0b      	ldr	r2, [pc, #44]	; (1b140 <ble_gap_adv_stop_no_lock+0x40>)
   1b112:	2101      	movs	r1, #1
   1b114:	2004      	movs	r0, #4
   1b116:	f7f4 fd2b 	bl	fb70 <modlog_printf>
    rc = ble_gap_adv_enable_tx(0);
   1b11a:	2000      	movs	r0, #0
   1b11c:	f7ff fa88 	bl	1a630 <ble_gap_adv_enable_tx>
    if (rc != 0) {
   1b120:	4604      	mov	r4, r0
   1b122:	b128      	cbz	r0, 1b130 <ble_gap_adv_stop_no_lock+0x30>
        STATS_INC(ble_gap_stats, adv_stop_fail);
   1b124:	4a05      	ldr	r2, [pc, #20]	; (1b13c <ble_gap_adv_stop_no_lock+0x3c>)
   1b126:	6993      	ldr	r3, [r2, #24]
   1b128:	3301      	adds	r3, #1
   1b12a:	6193      	str	r3, [r2, #24]
}
   1b12c:	4620      	mov	r0, r4
   1b12e:	bd38      	pop	{r3, r4, r5, pc}
    ble_gap_slave_reset_state(0);
   1b130:	f7ff fbfc 	bl	1a92c <ble_gap_slave_reset_state>
    if (!active) {
   1b134:	2d00      	cmp	r5, #0
   1b136:	d1f9      	bne.n	1b12c <ble_gap_adv_stop_no_lock+0x2c>
        rc = BLE_HS_EALREADY;
   1b138:	2402      	movs	r4, #2
   1b13a:	e7f3      	b.n	1b124 <ble_gap_adv_stop_no_lock+0x24>
   1b13c:	200044a0 	.word	0x200044a0
   1b140:	0002b078 	.word	0x0002b078

0001b144 <ble_gap_disc_active>:
    return ble_gap_master.op == BLE_GAP_OP_M_DISC;
   1b144:	4b03      	ldr	r3, [pc, #12]	; (1b154 <ble_gap_disc_active+0x10>)
   1b146:	7818      	ldrb	r0, [r3, #0]
}
   1b148:	2801      	cmp	r0, #1
   1b14a:	bf14      	ite	ne
   1b14c:	2000      	movne	r0, #0
   1b14e:	2001      	moveq	r0, #1
   1b150:	4770      	bx	lr
   1b152:	bf00      	nop
   1b154:	20000224 	.word	0x20000224

0001b158 <ble_gap_disc_cancel_no_lock>:
{
   1b158:	b510      	push	{r4, lr}
    STATS_INC(ble_gap_stats, discover_cancel);
   1b15a:	4a0c      	ldr	r2, [pc, #48]	; (1b18c <ble_gap_disc_cancel_no_lock+0x34>)
   1b15c:	6f93      	ldr	r3, [r2, #120]	; 0x78
   1b15e:	3301      	adds	r3, #1
   1b160:	6793      	str	r3, [r2, #120]	; 0x78
    if (!ble_gap_disc_active()) {
   1b162:	f7ff ffef 	bl	1b144 <ble_gap_disc_active>
   1b166:	b930      	cbnz	r0, 1b176 <ble_gap_disc_cancel_no_lock+0x1e>
        rc = BLE_HS_EALREADY;
   1b168:	2402      	movs	r4, #2
        STATS_INC(ble_gap_stats, discover_cancel_fail);
   1b16a:	4a08      	ldr	r2, [pc, #32]	; (1b18c <ble_gap_disc_cancel_no_lock+0x34>)
   1b16c:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
   1b16e:	3301      	adds	r3, #1
   1b170:	67d3      	str	r3, [r2, #124]	; 0x7c
}
   1b172:	4620      	mov	r0, r4
   1b174:	bd10      	pop	{r4, pc}
    rc = ble_gap_disc_disable_tx();
   1b176:	f7ff fa55 	bl	1a624 <ble_gap_disc_disable_tx>
    if (rc != 0) {
   1b17a:	4604      	mov	r4, r0
   1b17c:	b110      	cbz	r0, 1b184 <ble_gap_disc_cancel_no_lock+0x2c>
    if (rc != 0) {
   1b17e:	2c00      	cmp	r4, #0
   1b180:	d1f3      	bne.n	1b16a <ble_gap_disc_cancel_no_lock+0x12>
   1b182:	e7f6      	b.n	1b172 <ble_gap_disc_cancel_no_lock+0x1a>
    ble_gap_master_reset_state();
   1b184:	f7ff fb1c 	bl	1a7c0 <ble_gap_master_reset_state>
   1b188:	e7f9      	b.n	1b17e <ble_gap_disc_cancel_no_lock+0x26>
   1b18a:	bf00      	nop
   1b18c:	200044a0 	.word	0x200044a0

0001b190 <ble_gap_conn_active>:
    return ble_gap_master.op == BLE_GAP_OP_M_CONN;
   1b190:	4b03      	ldr	r3, [pc, #12]	; (1b1a0 <ble_gap_conn_active+0x10>)
   1b192:	7818      	ldrb	r0, [r3, #0]
}
   1b194:	2802      	cmp	r0, #2
   1b196:	bf14      	ite	ne
   1b198:	2000      	movne	r0, #0
   1b19a:	2001      	moveq	r0, #1
   1b19c:	4770      	bx	lr
   1b19e:	bf00      	nop
   1b1a0:	20000224 	.word	0x20000224

0001b1a4 <ble_gap_conn_cancel_no_lock>:
{
   1b1a4:	b508      	push	{r3, lr}
    STATS_INC(ble_gap_stats, cancel);
   1b1a6:	4a0f      	ldr	r2, [pc, #60]	; (1b1e4 <ble_gap_conn_cancel_no_lock+0x40>)
   1b1a8:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   1b1aa:	3301      	adds	r3, #1
   1b1ac:	64d3      	str	r3, [r2, #76]	; 0x4c
    if (!ble_gap_conn_active()) {
   1b1ae:	f7ff ffef 	bl	1b190 <ble_gap_conn_active>
   1b1b2:	b930      	cbnz	r0, 1b1c2 <ble_gap_conn_cancel_no_lock+0x1e>
        rc = BLE_HS_EALREADY;
   1b1b4:	2102      	movs	r1, #2
        STATS_INC(ble_gap_stats, cancel_fail);
   1b1b6:	4a0b      	ldr	r2, [pc, #44]	; (1b1e4 <ble_gap_conn_cancel_no_lock+0x40>)
   1b1b8:	6d13      	ldr	r3, [r2, #80]	; 0x50
   1b1ba:	3301      	adds	r3, #1
   1b1bc:	6513      	str	r3, [r2, #80]	; 0x50
}
   1b1be:	4608      	mov	r0, r1
   1b1c0:	bd08      	pop	{r3, pc}
    BLE_HS_LOG(INFO, "GAP procedure initiated: cancel connection\n");
   1b1c2:	4a09      	ldr	r2, [pc, #36]	; (1b1e8 <ble_gap_conn_cancel_no_lock+0x44>)
   1b1c4:	2101      	movs	r1, #1
   1b1c6:	2004      	movs	r0, #4
   1b1c8:	f7f4 fcd2 	bl	fb70 <modlog_printf>
    rc = ble_gap_conn_cancel_tx();
   1b1cc:	f7ff fa06 	bl	1a5dc <ble_gap_conn_cancel_tx>
    if (rc != 0) {
   1b1d0:	4601      	mov	r1, r0
   1b1d2:	2800      	cmp	r0, #0
   1b1d4:	d1ef      	bne.n	1b1b6 <ble_gap_conn_cancel_no_lock+0x12>
    ble_gap_master.conn.cancel = 1;
   1b1d6:	4a05      	ldr	r2, [pc, #20]	; (1b1ec <ble_gap_conn_cancel_no_lock+0x48>)
   1b1d8:	7c53      	ldrb	r3, [r2, #17]
   1b1da:	f043 0308 	orr.w	r3, r3, #8
   1b1de:	7453      	strb	r3, [r2, #17]
   1b1e0:	e7ed      	b.n	1b1be <ble_gap_conn_cancel_no_lock+0x1a>
   1b1e2:	bf00      	nop
   1b1e4:	200044a0 	.word	0x200044a0
   1b1e8:	0002b0a4 	.word	0x0002b0a4
   1b1ec:	20000224 	.word	0x20000224

0001b1f0 <ble_gap_terminate_with_conn>:
    if (conn->bhc_flags & BLE_HS_CONN_F_TERMINATING) {
   1b1f0:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   1b1f4:	f013 0f02 	tst.w	r3, #2
   1b1f8:	d122      	bne.n	1b240 <ble_gap_terminate_with_conn+0x50>
{
   1b1fa:	b530      	push	{r4, r5, lr}
   1b1fc:	b085      	sub	sp, #20
   1b1fe:	460d      	mov	r5, r1
   1b200:	4604      	mov	r4, r0
    BLE_HS_LOG(INFO, "GAP procedure initiated: terminate connection; "
   1b202:	8883      	ldrh	r3, [r0, #4]
   1b204:	9100      	str	r1, [sp, #0]
   1b206:	4a10      	ldr	r2, [pc, #64]	; (1b248 <ble_gap_terminate_with_conn+0x58>)
   1b208:	2101      	movs	r1, #1
   1b20a:	2004      	movs	r0, #4
   1b20c:	f7f4 fcb0 	bl	fb70 <modlog_printf>
    cmd.conn_handle = htole16(conn->bhc_handle);
   1b210:	88a3      	ldrh	r3, [r4, #4]
   1b212:	f8ad 300c 	strh.w	r3, [sp, #12]
    cmd.reason = hci_reason;
   1b216:	f88d 500e 	strb.w	r5, [sp, #14]
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LINK_CTRL,
   1b21a:	2300      	movs	r3, #0
   1b21c:	9300      	str	r3, [sp, #0]
   1b21e:	2203      	movs	r2, #3
   1b220:	a903      	add	r1, sp, #12
   1b222:	f240 4006 	movw	r0, #1030	; 0x406
   1b226:	f004 fa29 	bl	1f67c <ble_hs_hci_cmd_tx>
    if (rc != 0) {
   1b22a:	4603      	mov	r3, r0
   1b22c:	b928      	cbnz	r0, 1b23a <ble_gap_terminate_with_conn+0x4a>
    conn->bhc_flags |= BLE_HS_CONN_F_TERMINATING;
   1b22e:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
   1b232:	f042 0202 	orr.w	r2, r2, #2
   1b236:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
}
   1b23a:	4618      	mov	r0, r3
   1b23c:	b005      	add	sp, #20
   1b23e:	bd30      	pop	{r4, r5, pc}
        return BLE_HS_EALREADY;
   1b240:	2302      	movs	r3, #2
}
   1b242:	4618      	mov	r0, r3
   1b244:	4770      	bx	lr
   1b246:	bf00      	nop
   1b248:	0002b290 	.word	0x0002b290

0001b24c <ble_gap_terminate>:
{
   1b24c:	b538      	push	{r3, r4, r5, lr}
   1b24e:	4604      	mov	r4, r0
   1b250:	460d      	mov	r5, r1
    STATS_INC(ble_gap_stats, terminate);
   1b252:	4a0d      	ldr	r2, [pc, #52]	; (1b288 <ble_gap_terminate+0x3c>)
   1b254:	6c53      	ldr	r3, [r2, #68]	; 0x44
   1b256:	3301      	adds	r3, #1
   1b258:	6453      	str	r3, [r2, #68]	; 0x44
    ble_hs_lock();
   1b25a:	f003 f963 	bl	1e524 <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
   1b25e:	4620      	mov	r0, r4
   1b260:	f003 fff0 	bl	1f244 <ble_hs_conn_find>
    if (conn == NULL) {
   1b264:	b160      	cbz	r0, 1b280 <ble_gap_terminate+0x34>
    rc = ble_gap_terminate_with_conn(conn, hci_reason);
   1b266:	4629      	mov	r1, r5
   1b268:	f7ff ffc2 	bl	1b1f0 <ble_gap_terminate_with_conn>
   1b26c:	4604      	mov	r4, r0
    ble_hs_unlock();
   1b26e:	f003 f95d 	bl	1e52c <ble_hs_unlock>
    if (rc != 0) {
   1b272:	b11c      	cbz	r4, 1b27c <ble_gap_terminate+0x30>
        STATS_INC(ble_gap_stats, terminate_fail);
   1b274:	4a04      	ldr	r2, [pc, #16]	; (1b288 <ble_gap_terminate+0x3c>)
   1b276:	6c93      	ldr	r3, [r2, #72]	; 0x48
   1b278:	3301      	adds	r3, #1
   1b27a:	6493      	str	r3, [r2, #72]	; 0x48
}
   1b27c:	4620      	mov	r0, r4
   1b27e:	bd38      	pop	{r3, r4, r5, pc}
    ble_hs_unlock();
   1b280:	f003 f954 	bl	1e52c <ble_hs_unlock>
        rc = BLE_HS_ENOTCONN;
   1b284:	2407      	movs	r4, #7
   1b286:	e7f5      	b.n	1b274 <ble_gap_terminate+0x28>
   1b288:	200044a0 	.word	0x200044a0

0001b28c <ble_gap_update_notify>:
{
   1b28c:	b530      	push	{r4, r5, lr}
   1b28e:	b08f      	sub	sp, #60	; 0x3c
   1b290:	4604      	mov	r4, r0
   1b292:	460d      	mov	r5, r1
    memset(&event, 0, sizeof event);
   1b294:	2234      	movs	r2, #52	; 0x34
   1b296:	2100      	movs	r1, #0
   1b298:	a801      	add	r0, sp, #4
   1b29a:	f7f3 f911 	bl	e4c0 <memset>
    event.type = BLE_GAP_EVENT_CONN_UPDATE;
   1b29e:	2303      	movs	r3, #3
   1b2a0:	f88d 3004 	strb.w	r3, [sp, #4]
    event.conn_update.conn_handle = conn_handle;
   1b2a4:	f8ad 400c 	strh.w	r4, [sp, #12]
    event.conn_update.status = status;
   1b2a8:	9502      	str	r5, [sp, #8]
    ble_gap_event_listener_call(&event);
   1b2aa:	a801      	add	r0, sp, #4
   1b2ac:	f7ff f8e0 	bl	1a470 <ble_gap_event_listener_call>
    ble_gap_call_conn_event_cb(&event, conn_handle);
   1b2b0:	4621      	mov	r1, r4
   1b2b2:	a801      	add	r0, sp, #4
   1b2b4:	f7ff f906 	bl	1a4c4 <ble_gap_call_conn_event_cb>
    if (status == BLE_HS_ETIMEOUT) {
   1b2b8:	2d0d      	cmp	r5, #13
   1b2ba:	d001      	beq.n	1b2c0 <ble_gap_update_notify+0x34>
}
   1b2bc:	b00f      	add	sp, #60	; 0x3c
   1b2be:	bd30      	pop	{r4, r5, pc}
        ble_gap_terminate(conn_handle, BLE_ERR_REM_USER_CONN_TERM);
   1b2c0:	2113      	movs	r1, #19
   1b2c2:	4620      	mov	r0, r4
   1b2c4:	f7ff ffc2 	bl	1b24c <ble_gap_terminate>
}
   1b2c8:	e7f8      	b.n	1b2bc <ble_gap_update_notify+0x30>
	...

0001b2cc <ble_gap_conn_broken>:
{
   1b2cc:	b570      	push	{r4, r5, r6, lr}
   1b2ce:	b090      	sub	sp, #64	; 0x40
   1b2d0:	4604      	mov	r4, r0
   1b2d2:	460d      	mov	r5, r1
    memset(&event, 0, sizeof event);
   1b2d4:	2234      	movs	r2, #52	; 0x34
   1b2d6:	2100      	movs	r1, #0
   1b2d8:	4668      	mov	r0, sp
   1b2da:	f7f3 f8f1 	bl	e4c0 <memset>
    snap.desc = &event.disconnect.conn;
   1b2de:	a910      	add	r1, sp, #64	; 0x40
   1b2e0:	ab02      	add	r3, sp, #8
   1b2e2:	f841 3d0c 	str.w	r3, [r1, #-12]!
    rc = ble_gap_find_snapshot(conn_handle, &snap);
   1b2e6:	4620      	mov	r0, r4
   1b2e8:	f7ff f955 	bl	1a596 <ble_gap_find_snapshot>
    if (rc != 0) {
   1b2ec:	b108      	cbz	r0, 1b2f2 <ble_gap_conn_broken+0x26>
}
   1b2ee:	b010      	add	sp, #64	; 0x40
   1b2f0:	bd70      	pop	{r4, r5, r6, pc}
    ble_hs_lock();
   1b2f2:	f003 f917 	bl	1e524 <ble_hs_lock>
    entry = ble_gap_update_entry_remove(conn_handle);
   1b2f6:	4620      	mov	r0, r4
   1b2f8:	f7ff fa4a 	bl	1a790 <ble_gap_update_entry_remove>
   1b2fc:	4606      	mov	r6, r0
    ble_hs_unlock();
   1b2fe:	f003 f915 	bl	1e52c <ble_hs_unlock>
    if (entry != NULL) {
   1b302:	b136      	cbz	r6, 1b312 <ble_gap_conn_broken+0x46>
        ble_gap_update_notify(conn_handle, reason);
   1b304:	4629      	mov	r1, r5
   1b306:	4620      	mov	r0, r4
   1b308:	f7ff ffc0 	bl	1b28c <ble_gap_update_notify>
        ble_gap_update_entry_free(entry);
   1b30c:	4630      	mov	r0, r6
   1b30e:	f7ff fb4f 	bl	1a9b0 <ble_gap_update_entry_free>
    ble_l2cap_sig_conn_broken(conn_handle, reason);
   1b312:	4629      	mov	r1, r5
   1b314:	4620      	mov	r0, r4
   1b316:	f005 fd63 	bl	20de0 <ble_l2cap_sig_conn_broken>
    ble_sm_connection_broken(conn_handle);
   1b31a:	4620      	mov	r0, r4
   1b31c:	f007 fabb 	bl	22896 <ble_sm_connection_broken>
    ble_gatts_connection_broken(conn_handle);
   1b320:	4620      	mov	r0, r4
   1b322:	f002 fd99 	bl	1de58 <ble_gatts_connection_broken>
    ble_gattc_connection_broken(conn_handle);
   1b326:	4620      	mov	r0, r4
   1b328:	f001 ffb5 	bl	1d296 <ble_gattc_connection_broken>
    ble_hs_flow_connection_broken(conn_handle);;
   1b32c:	4620      	mov	r0, r4
   1b32e:	f004 f887 	bl	1f440 <ble_hs_flow_connection_broken>
    ble_hs_atomic_conn_delete(conn_handle);
   1b332:	4620      	mov	r0, r4
   1b334:	f003 fe7e 	bl	1f034 <ble_hs_atomic_conn_delete>
    event.type = BLE_GAP_EVENT_DISCONNECT;
   1b338:	2301      	movs	r3, #1
   1b33a:	f88d 3000 	strb.w	r3, [sp]
    event.disconnect.reason = reason;
   1b33e:	9501      	str	r5, [sp, #4]
    ble_gap_event_listener_call(&event);
   1b340:	4668      	mov	r0, sp
   1b342:	f7ff f895 	bl	1a470 <ble_gap_event_listener_call>
    ble_gap_call_event_cb(&event, snap.cb, snap.cb_arg);
   1b346:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1b348:	990e      	ldr	r1, [sp, #56]	; 0x38
   1b34a:	4668      	mov	r0, sp
   1b34c:	f7fe ffb4 	bl	1a2b8 <ble_gap_call_event_cb>
    STATS_INC(ble_gap_stats, disconnect);
   1b350:	4a02      	ldr	r2, [pc, #8]	; (1b35c <ble_gap_conn_broken+0x90>)
   1b352:	6e53      	ldr	r3, [r2, #100]	; 0x64
   1b354:	3301      	adds	r3, #1
   1b356:	6653      	str	r3, [r2, #100]	; 0x64
   1b358:	e7c9      	b.n	1b2ee <ble_gap_conn_broken+0x22>
   1b35a:	bf00      	nop
   1b35c:	200044a0 	.word	0x200044a0

0001b360 <ble_gap_rx_disconn_complete>:
{
   1b360:	b570      	push	{r4, r5, r6, lr}
   1b362:	b08e      	sub	sp, #56	; 0x38
   1b364:	4604      	mov	r4, r0
    uint16_t handle = le16toh(ev->conn_handle);
   1b366:	f8b0 5001 	ldrh.w	r5, [r0, #1]
   1b36a:	b2ae      	uxth	r6, r5
    STATS_INC(ble_gap_stats, rx_disconnect);
   1b36c:	4a14      	ldr	r2, [pc, #80]	; (1b3c0 <ble_gap_rx_disconn_complete+0x60>)
   1b36e:	6e93      	ldr	r3, [r2, #104]	; 0x68
   1b370:	3301      	adds	r3, #1
   1b372:	6693      	str	r3, [r2, #104]	; 0x68
    if (ev->status == 0) {
   1b374:	7803      	ldrb	r3, [r0, #0]
   1b376:	b953      	cbnz	r3, 1b38e <ble_gap_rx_disconn_complete+0x2e>
        ble_gap_conn_broken(handle, BLE_HS_HCI_ERR(ev->reason));
   1b378:	78c1      	ldrb	r1, [r0, #3]
   1b37a:	b131      	cbz	r1, 1b38a <ble_gap_rx_disconn_complete+0x2a>
   1b37c:	f501 7100 	add.w	r1, r1, #512	; 0x200
   1b380:	4630      	mov	r0, r6
   1b382:	f7ff ffa3 	bl	1b2cc <ble_gap_conn_broken>
}
   1b386:	b00e      	add	sp, #56	; 0x38
   1b388:	bd70      	pop	{r4, r5, r6, pc}
        ble_gap_conn_broken(handle, BLE_HS_HCI_ERR(ev->reason));
   1b38a:	2100      	movs	r1, #0
   1b38c:	e7f8      	b.n	1b380 <ble_gap_rx_disconn_complete+0x20>
        memset(&event, 0, sizeof event);
   1b38e:	2234      	movs	r2, #52	; 0x34
   1b390:	2100      	movs	r1, #0
   1b392:	a801      	add	r0, sp, #4
   1b394:	f7f3 f894 	bl	e4c0 <memset>
        event.type = BLE_GAP_EVENT_TERM_FAILURE;
   1b398:	2306      	movs	r3, #6
   1b39a:	f88d 3004 	strb.w	r3, [sp, #4]
        event.term_failure.conn_handle = handle;
   1b39e:	f8ad 500c 	strh.w	r5, [sp, #12]
        event.term_failure.status = BLE_HS_HCI_ERR(ev->status);
   1b3a2:	7823      	ldrb	r3, [r4, #0]
   1b3a4:	b153      	cbz	r3, 1b3bc <ble_gap_rx_disconn_complete+0x5c>
   1b3a6:	f503 7300 	add.w	r3, r3, #512	; 0x200
   1b3aa:	9302      	str	r3, [sp, #8]
        ble_gap_event_listener_call(&event);
   1b3ac:	a801      	add	r0, sp, #4
   1b3ae:	f7ff f85f 	bl	1a470 <ble_gap_event_listener_call>
        ble_gap_call_conn_event_cb(&event, handle);
   1b3b2:	4631      	mov	r1, r6
   1b3b4:	a801      	add	r0, sp, #4
   1b3b6:	f7ff f885 	bl	1a4c4 <ble_gap_call_conn_event_cb>
}
   1b3ba:	e7e4      	b.n	1b386 <ble_gap_rx_disconn_complete+0x26>
        event.term_failure.status = BLE_HS_HCI_ERR(ev->status);
   1b3bc:	2300      	movs	r3, #0
   1b3be:	e7f4      	b.n	1b3aa <ble_gap_rx_disconn_complete+0x4a>
   1b3c0:	200044a0 	.word	0x200044a0

0001b3c4 <ble_gap_rx_update_complete>:
{
   1b3c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b3c6:	b091      	sub	sp, #68	; 0x44
   1b3c8:	4604      	mov	r4, r0
    STATS_INC(ble_gap_stats, rx_update_complete);
   1b3ca:	4a2c      	ldr	r2, [pc, #176]	; (1b47c <ble_gap_rx_update_complete+0xb8>)
   1b3cc:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
   1b3ce:	3301      	adds	r3, #1
   1b3d0:	66d3      	str	r3, [r2, #108]	; 0x6c
    memset(&event, 0, sizeof event);
   1b3d2:	2234      	movs	r2, #52	; 0x34
   1b3d4:	2100      	movs	r1, #0
   1b3d6:	a801      	add	r0, sp, #4
   1b3d8:	f7f3 f872 	bl	e4c0 <memset>
    memset(&l2cap_params, 0, sizeof l2cap_params);
   1b3dc:	2300      	movs	r3, #0
   1b3de:	930e      	str	r3, [sp, #56]	; 0x38
   1b3e0:	930f      	str	r3, [sp, #60]	; 0x3c
    ble_hs_lock();
   1b3e2:	f003 f89f 	bl	1e524 <ble_hs_lock>
    conn_handle = le16toh(ev->conn_handle);
   1b3e6:	8865      	ldrh	r5, [r4, #2]
    conn = ble_hs_conn_find(conn_handle);
   1b3e8:	4628      	mov	r0, r5
   1b3ea:	f003 ff2b 	bl	1f244 <ble_hs_conn_find>
    if (conn != NULL) {
   1b3ee:	b120      	cbz	r0, 1b3fa <ble_gap_rx_update_complete+0x36>
   1b3f0:	4606      	mov	r6, r0
        switch (ev->status) {
   1b3f2:	7863      	ldrb	r3, [r4, #1]
   1b3f4:	b193      	cbz	r3, 1b41c <ble_gap_rx_update_complete+0x58>
   1b3f6:	2b1a      	cmp	r3, #26
   1b3f8:	d017      	beq.n	1b42a <ble_gap_rx_update_complete+0x66>
    if (l2cap_params.itvl_min == 0) {
   1b3fa:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   1b3fe:	b353      	cbz	r3, 1b456 <ble_gap_rx_update_complete+0x92>
    ble_hs_unlock();
   1b400:	f003 f894 	bl	1e52c <ble_hs_unlock>
    if (l2cap_params.itvl_min != 0) {
   1b404:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   1b408:	bb5b      	cbnz	r3, 1b462 <ble_gap_rx_update_complete+0x9e>
        cb_status = BLE_HS_HCI_ERR(ev->status);
   1b40a:	7861      	ldrb	r1, [r4, #1]
   1b40c:	b399      	cbz	r1, 1b476 <ble_gap_rx_update_complete+0xb2>
   1b40e:	f501 7100 	add.w	r1, r1, #512	; 0x200
        ble_gap_update_notify(conn_handle, cb_status);
   1b412:	4628      	mov	r0, r5
   1b414:	f7ff ff3a 	bl	1b28c <ble_gap_update_notify>
}
   1b418:	b011      	add	sp, #68	; 0x44
   1b41a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            conn->bhc_itvl = le16toh(ev->conn_itvl);
   1b41c:	88a3      	ldrh	r3, [r4, #4]
   1b41e:	8383      	strh	r3, [r0, #28]
            conn->bhc_latency = le16toh(ev->conn_latency);
   1b420:	88e3      	ldrh	r3, [r4, #6]
   1b422:	83c3      	strh	r3, [r0, #30]
            conn->bhc_supervision_timeout = le16toh(ev->supervision_timeout);
   1b424:	8923      	ldrh	r3, [r4, #8]
   1b426:	8403      	strh	r3, [r0, #32]
            break;
   1b428:	e7e7      	b.n	1b3fa <ble_gap_rx_update_complete+0x36>
            entry = ble_gap_update_entry_find(conn_handle, NULL);
   1b42a:	2100      	movs	r1, #0
   1b42c:	4628      	mov	r0, r5
   1b42e:	f7fe ffe9 	bl	1a404 <ble_gap_update_entry_find>
            if (entry != NULL && !(conn->bhc_flags & BLE_HS_CONN_F_MASTER)) {
   1b432:	4607      	mov	r7, r0
   1b434:	2800      	cmp	r0, #0
   1b436:	d0e0      	beq.n	1b3fa <ble_gap_rx_update_complete+0x36>
   1b438:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
   1b43c:	f013 0f01 	tst.w	r3, #1
   1b440:	d1db      	bne.n	1b3fa <ble_gap_rx_update_complete+0x36>
                ble_gap_update_to_l2cap(&entry->params, &l2cap_params);
   1b442:	a90e      	add	r1, sp, #56	; 0x38
   1b444:	3004      	adds	r0, #4
   1b446:	f7fe ff6b 	bl	1a320 <ble_gap_update_to_l2cap>
    return os_time_get();
   1b44a:	f7f2 f913 	bl	d674 <os_time_get>
                entry->exp_os_ticks = ble_npl_time_get() +
   1b44e:	f500 50a0 	add.w	r0, r0, #5120	; 0x1400
   1b452:	6138      	str	r0, [r7, #16]
   1b454:	e7d1      	b.n	1b3fa <ble_gap_rx_update_complete+0x36>
        entry = ble_gap_update_entry_remove(conn_handle);
   1b456:	4628      	mov	r0, r5
   1b458:	f7ff f99a 	bl	1a790 <ble_gap_update_entry_remove>
        ble_gap_update_entry_free(entry);
   1b45c:	f7ff faa8 	bl	1a9b0 <ble_gap_update_entry_free>
   1b460:	e7ce      	b.n	1b400 <ble_gap_rx_update_complete+0x3c>
        rc = ble_l2cap_sig_update(conn_handle, &l2cap_params,
   1b462:	2300      	movs	r3, #0
   1b464:	4a06      	ldr	r2, [pc, #24]	; (1b480 <ble_gap_rx_update_complete+0xbc>)
   1b466:	a90e      	add	r1, sp, #56	; 0x38
   1b468:	4628      	mov	r0, r5
   1b46a:	f005 fc53 	bl	20d14 <ble_l2cap_sig_update>
        if (rc == 0) {
   1b46e:	4601      	mov	r1, r0
   1b470:	2800      	cmp	r0, #0
   1b472:	d1ce      	bne.n	1b412 <ble_gap_rx_update_complete+0x4e>
   1b474:	e7d0      	b.n	1b418 <ble_gap_rx_update_complete+0x54>
        cb_status = BLE_HS_HCI_ERR(ev->status);
   1b476:	2100      	movs	r1, #0
   1b478:	e7cb      	b.n	1b412 <ble_gap_rx_update_complete+0x4e>
   1b47a:	bf00      	nop
   1b47c:	200044a0 	.word	0x200044a0
   1b480:	0001b485 	.word	0x0001b485

0001b484 <ble_gap_update_l2cap_cb>:
{
   1b484:	b570      	push	{r4, r5, r6, lr}
   1b486:	4605      	mov	r5, r0
   1b488:	460e      	mov	r6, r1
    ble_hs_lock();
   1b48a:	f003 f84b 	bl	1e524 <ble_hs_lock>
    entry = ble_gap_update_entry_remove(conn_handle);
   1b48e:	4628      	mov	r0, r5
   1b490:	f7ff f97e 	bl	1a790 <ble_gap_update_entry_remove>
   1b494:	4604      	mov	r4, r0
    ble_hs_unlock();
   1b496:	f003 f849 	bl	1e52c <ble_hs_unlock>
    if (entry != NULL) {
   1b49a:	b11c      	cbz	r4, 1b4a4 <ble_gap_update_l2cap_cb+0x20>
        ble_gap_update_entry_free(entry);
   1b49c:	4620      	mov	r0, r4
   1b49e:	f7ff fa87 	bl	1a9b0 <ble_gap_update_entry_free>
        if (status != 0) {
   1b4a2:	b906      	cbnz	r6, 1b4a6 <ble_gap_update_l2cap_cb+0x22>
}
   1b4a4:	bd70      	pop	{r4, r5, r6, pc}
            ble_gap_update_notify(conn_handle, status);
   1b4a6:	4631      	mov	r1, r6
   1b4a8:	4628      	mov	r0, r5
   1b4aa:	f7ff feef 	bl	1b28c <ble_gap_update_notify>
}
   1b4ae:	e7f9      	b.n	1b4a4 <ble_gap_update_l2cap_cb+0x20>

0001b4b0 <ble_gap_update_timer>:
{
   1b4b0:	b530      	push	{r4, r5, lr}
   1b4b2:	b083      	sub	sp, #12
   1b4b4:	e003      	b.n	1b4be <ble_gap_update_timer+0xe>
        ble_hs_unlock();
   1b4b6:	f003 f839 	bl	1e52c <ble_hs_unlock>
            entry = NULL;
   1b4ba:	2400      	movs	r4, #0
    } while (entry != NULL);
   1b4bc:	b1bc      	cbz	r4, 1b4ee <ble_gap_update_timer+0x3e>
        ble_hs_lock();
   1b4be:	f003 f831 	bl	1e524 <ble_hs_lock>
        conn_handle = ble_gap_update_next_exp(&ticks_until_exp);
   1b4c2:	a801      	add	r0, sp, #4
   1b4c4:	f7ff fac2 	bl	1aa4c <ble_gap_update_next_exp>
        if (ticks_until_exp == 0) {
   1b4c8:	9b01      	ldr	r3, [sp, #4]
   1b4ca:	2b00      	cmp	r3, #0
   1b4cc:	d1f3      	bne.n	1b4b6 <ble_gap_update_timer+0x6>
   1b4ce:	4605      	mov	r5, r0
            entry = ble_gap_update_entry_remove(conn_handle);
   1b4d0:	f7ff f95e 	bl	1a790 <ble_gap_update_entry_remove>
   1b4d4:	4604      	mov	r4, r0
        ble_hs_unlock();
   1b4d6:	f003 f829 	bl	1e52c <ble_hs_unlock>
        if (entry != NULL) {
   1b4da:	2c00      	cmp	r4, #0
   1b4dc:	d0ee      	beq.n	1b4bc <ble_gap_update_timer+0xc>
            ble_gap_update_notify(conn_handle, BLE_HS_ETIMEOUT);
   1b4de:	210d      	movs	r1, #13
   1b4e0:	4628      	mov	r0, r5
   1b4e2:	f7ff fed3 	bl	1b28c <ble_gap_update_notify>
            ble_gap_update_entry_free(entry);
   1b4e6:	4620      	mov	r0, r4
   1b4e8:	f7ff fa62 	bl	1a9b0 <ble_gap_update_entry_free>
   1b4ec:	e7e6      	b.n	1b4bc <ble_gap_update_timer+0xc>
}
   1b4ee:	9801      	ldr	r0, [sp, #4]
   1b4f0:	b003      	add	sp, #12
   1b4f2:	bd30      	pop	{r4, r5, pc}

0001b4f4 <ble_gap_timer>:
{
   1b4f4:	b510      	push	{r4, lr}
    master_ticks = ble_gap_master_timer();
   1b4f6:	f7ff fa81 	bl	1a9fc <ble_gap_master_timer>
   1b4fa:	4604      	mov	r4, r0
    update_ticks = ble_gap_update_timer();
   1b4fc:	f7ff ffd8 	bl	1b4b0 <ble_gap_update_timer>
    min_ticks = min(master_ticks, update_ticks);
   1b500:	4284      	cmp	r4, r0
   1b502:	bfa8      	it	ge
   1b504:	4604      	movge	r4, r0
    min_ticks = min(min_ticks, ble_gap_slave_timer());
   1b506:	f7ff fadb 	bl	1aac0 <ble_gap_slave_timer>
   1b50a:	42a0      	cmp	r0, r4
   1b50c:	dd01      	ble.n	1b512 <ble_gap_timer+0x1e>
}
   1b50e:	4620      	mov	r0, r4
   1b510:	bd10      	pop	{r4, pc}
    min_ticks = min(min_ticks, ble_gap_slave_timer());
   1b512:	f7ff fad5 	bl	1aac0 <ble_gap_slave_timer>
   1b516:	4604      	mov	r4, r0
    return min_ticks;
   1b518:	e7f9      	b.n	1b50e <ble_gap_timer+0x1a>
	...

0001b51c <ble_gap_update_failed>:
{
   1b51c:	b570      	push	{r4, r5, r6, lr}
   1b51e:	4604      	mov	r4, r0
   1b520:	460d      	mov	r5, r1
    STATS_INC(ble_gap_stats, update_fail);
   1b522:	4a0a      	ldr	r2, [pc, #40]	; (1b54c <ble_gap_update_failed+0x30>)
   1b524:	6d93      	ldr	r3, [r2, #88]	; 0x58
   1b526:	3301      	adds	r3, #1
   1b528:	6593      	str	r3, [r2, #88]	; 0x58
    ble_hs_lock();
   1b52a:	f002 fffb 	bl	1e524 <ble_hs_lock>
    entry = ble_gap_update_entry_remove(conn_handle);
   1b52e:	4620      	mov	r0, r4
   1b530:	f7ff f92e 	bl	1a790 <ble_gap_update_entry_remove>
   1b534:	4606      	mov	r6, r0
    ble_hs_unlock();
   1b536:	f002 fff9 	bl	1e52c <ble_hs_unlock>
    ble_gap_update_entry_free(entry);
   1b53a:	4630      	mov	r0, r6
   1b53c:	f7ff fa38 	bl	1a9b0 <ble_gap_update_entry_free>
    ble_gap_update_notify(conn_handle, status);
   1b540:	4629      	mov	r1, r5
   1b542:	4620      	mov	r0, r4
   1b544:	f7ff fea2 	bl	1b28c <ble_gap_update_notify>
}
   1b548:	bd70      	pop	{r4, r5, r6, pc}
   1b54a:	bf00      	nop
   1b54c:	200044a0 	.word	0x200044a0

0001b550 <ble_gap_rx_param_req>:
{
   1b550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b554:	b094      	sub	sp, #80	; 0x50
   1b556:	4604      	mov	r4, r0
    memset(&event, 0, sizeof event);
   1b558:	f04f 0834 	mov.w	r8, #52	; 0x34
   1b55c:	4642      	mov	r2, r8
   1b55e:	2100      	movs	r1, #0
   1b560:	a801      	add	r0, sp, #4
   1b562:	f7f2 ffad 	bl	e4c0 <memset>
    peer_params.itvl_min = le16toh(ev->min_interval);
   1b566:	f8b4 3003 	ldrh.w	r3, [r4, #3]
   1b56a:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
    peer_params.itvl_max = le16toh(ev->max_interval);
   1b56e:	f8b4 3005 	ldrh.w	r3, [r4, #5]
   1b572:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
    peer_params.latency = le16toh(ev->latency);
   1b576:	f8b4 3007 	ldrh.w	r3, [r4, #7]
   1b57a:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
    peer_params.supervision_timeout = le16toh(ev->timeout);
   1b57e:	f8b4 3009 	ldrh.w	r3, [r4, #9]
   1b582:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
    peer_params.min_ce_len = 0;
   1b586:	2300      	movs	r3, #0
   1b588:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
    peer_params.max_ce_len = 0;
   1b58c:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
    self_params = peer_params;
   1b590:	ae0e      	add	r6, sp, #56	; 0x38
   1b592:	ad11      	add	r5, sp, #68	; 0x44
   1b594:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   1b598:	e886 0007 	stmia.w	r6, {r0, r1, r2}
    conn_handle = le16toh(ev->conn_handle);
   1b59c:	f8b4 7001 	ldrh.w	r7, [r4, #1]
   1b5a0:	b2bc      	uxth	r4, r7
    memset(&event, 0, sizeof event);
   1b5a2:	4642      	mov	r2, r8
   1b5a4:	4619      	mov	r1, r3
   1b5a6:	a801      	add	r0, sp, #4
   1b5a8:	f7f2 ff8a 	bl	e4c0 <memset>
    event.type = BLE_GAP_EVENT_CONN_UPDATE_REQ;
   1b5ac:	2304      	movs	r3, #4
   1b5ae:	f88d 3004 	strb.w	r3, [sp, #4]
    event.conn_update_req.conn_handle = conn_handle;
   1b5b2:	f8ad 7010 	strh.w	r7, [sp, #16]
    event.conn_update_req.self_params = &self_params;
   1b5b6:	9603      	str	r6, [sp, #12]
    event.conn_update_req.peer_params = &peer_params;
   1b5b8:	9502      	str	r5, [sp, #8]
    rc = ble_gap_call_conn_event_cb(&event, conn_handle);
   1b5ba:	4621      	mov	r1, r4
   1b5bc:	eb0d 0003 	add.w	r0, sp, r3
   1b5c0:	f7fe ff80 	bl	1a4c4 <ble_gap_call_conn_event_cb>
    if (rc == 0) {
   1b5c4:	b948      	cbnz	r0, 1b5da <ble_gap_rx_param_req+0x8a>
        rc = ble_gap_tx_param_pos_reply(conn_handle, &self_params);
   1b5c6:	a90e      	add	r1, sp, #56	; 0x38
   1b5c8:	4620      	mov	r0, r4
   1b5ca:	f7ff f88d 	bl	1a6e8 <ble_gap_tx_param_pos_reply>
        if (rc != 0) {
   1b5ce:	4601      	mov	r1, r0
   1b5d0:	b138      	cbz	r0, 1b5e2 <ble_gap_rx_param_req+0x92>
            ble_gap_update_failed(conn_handle, rc);
   1b5d2:	4620      	mov	r0, r4
   1b5d4:	f7ff ffa2 	bl	1b51c <ble_gap_update_failed>
   1b5d8:	e003      	b.n	1b5e2 <ble_gap_rx_param_req+0x92>
        ble_gap_tx_param_neg_reply(conn_handle, rc);
   1b5da:	b2c1      	uxtb	r1, r0
   1b5dc:	4620      	mov	r0, r4
   1b5de:	f7ff f8a4 	bl	1a72a <ble_gap_tx_param_neg_reply>
}
   1b5e2:	b014      	add	sp, #80	; 0x50
   1b5e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001b5e8 <ble_gap_update_params>:
{
   1b5e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b5ec:	b082      	sub	sp, #8
   1b5ee:	4606      	mov	r6, r0
   1b5f0:	460d      	mov	r5, r1
    if (!ble_gap_validate_conn_params(params)) {
   1b5f2:	4608      	mov	r0, r1
   1b5f4:	f7fe ff18 	bl	1a428 <ble_gap_validate_conn_params>
   1b5f8:	2800      	cmp	r0, #0
   1b5fa:	d076      	beq.n	1b6ea <ble_gap_update_params+0x102>
    STATS_INC(ble_gap_stats, update);
   1b5fc:	4a3c      	ldr	r2, [pc, #240]	; (1b6f0 <ble_gap_update_params+0x108>)
   1b5fe:	6d53      	ldr	r3, [r2, #84]	; 0x54
   1b600:	3301      	adds	r3, #1
   1b602:	6553      	str	r3, [r2, #84]	; 0x54
    memset(&l2cap_params, 0, sizeof l2cap_params);
   1b604:	2300      	movs	r3, #0
   1b606:	9300      	str	r3, [sp, #0]
   1b608:	9301      	str	r3, [sp, #4]
    ble_hs_lock();
   1b60a:	f002 ff8b 	bl	1e524 <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
   1b60e:	4630      	mov	r0, r6
   1b610:	f003 fe18 	bl	1f244 <ble_hs_conn_find>
    if (conn == NULL) {
   1b614:	4604      	mov	r4, r0
   1b616:	b3b8      	cbz	r0, 1b688 <ble_gap_update_params+0xa0>
    dup = ble_gap_update_entry_find(conn_handle, NULL);
   1b618:	2100      	movs	r1, #0
   1b61a:	4630      	mov	r0, r6
   1b61c:	f7fe fef2 	bl	1a404 <ble_gap_update_entry_find>
    if (dup != NULL) {
   1b620:	b118      	cbz	r0, 1b62a <ble_gap_update_params+0x42>
        rc = BLE_HS_EALREADY;
   1b622:	2402      	movs	r4, #2
    l2cap_update = 0;
   1b624:	2700      	movs	r7, #0
    entry = NULL;
   1b626:	46b8      	mov	r8, r7
   1b628:	e031      	b.n	1b68e <ble_gap_update_params+0xa6>
    entry = ble_gap_update_entry_alloc();
   1b62a:	f7ff fb33 	bl	1ac94 <ble_gap_update_entry_alloc>
    if (entry == NULL) {
   1b62e:	4680      	mov	r8, r0
   1b630:	2800      	cmp	r0, #0
   1b632:	d040      	beq.n	1b6b6 <ble_gap_update_params+0xce>
    entry->conn_handle = conn_handle;
   1b634:	8286      	strh	r6, [r0, #20]
    entry->params = *params;
   1b636:	1d03      	adds	r3, r0, #4
   1b638:	6828      	ldr	r0, [r5, #0]
   1b63a:	6869      	ldr	r1, [r5, #4]
   1b63c:	68aa      	ldr	r2, [r5, #8]
   1b63e:	c307      	stmia	r3!, {r0, r1, r2}
   1b640:	f7f2 f818 	bl	d674 <os_time_get>
    entry->exp_os_ticks = ble_npl_time_get() +
   1b644:	f500 50a0 	add.w	r0, r0, #5120	; 0x1400
   1b648:	f8c8 0010 	str.w	r0, [r8, #16]
    BLE_HS_LOG(INFO, "GAP procedure initiated: ");
   1b64c:	4a29      	ldr	r2, [pc, #164]	; (1b6f4 <ble_gap_update_params+0x10c>)
   1b64e:	2101      	movs	r1, #1
   1b650:	2004      	movs	r0, #4
   1b652:	f7f4 fa8d 	bl	fb70 <modlog_printf>
    ble_gap_log_update(conn_handle, params);
   1b656:	4629      	mov	r1, r5
   1b658:	4630      	mov	r0, r6
   1b65a:	f7ff fac1 	bl	1abe0 <ble_gap_log_update>
    BLE_HS_LOG(INFO, "\n");
   1b65e:	4a26      	ldr	r2, [pc, #152]	; (1b6f8 <ble_gap_update_params+0x110>)
   1b660:	2101      	movs	r1, #1
   1b662:	2004      	movs	r0, #4
   1b664:	f7f4 fa84 	bl	fb70 <modlog_printf>
    if ((conn->supported_feat & BLE_HS_HCI_LE_FEAT_CONN_PARAM_REQUEST) == 0 &&
   1b668:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b66a:	f013 0f02 	tst.w	r3, #2
   1b66e:	d104      	bne.n	1b67a <ble_gap_update_params+0x92>
            !(conn->bhc_flags & BLE_HS_CONN_F_MASTER)) {
   1b670:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    if ((conn->supported_feat & BLE_HS_HCI_LE_FEAT_CONN_PARAM_REQUEST) == 0 &&
   1b674:	f013 0f01 	tst.w	r3, #1
   1b678:	d020      	beq.n	1b6bc <ble_gap_update_params+0xd4>
        rc = ble_gap_update_tx(conn_handle, params);
   1b67a:	4629      	mov	r1, r5
   1b67c:	4630      	mov	r0, r6
   1b67e:	f7ff f865 	bl	1a74c <ble_gap_update_tx>
   1b682:	4604      	mov	r4, r0
    l2cap_update = 0;
   1b684:	2700      	movs	r7, #0
   1b686:	e002      	b.n	1b68e <ble_gap_update_params+0xa6>
        rc = BLE_HS_ENOTCONN;
   1b688:	2407      	movs	r4, #7
    l2cap_update = 0;
   1b68a:	2700      	movs	r7, #0
    entry = NULL;
   1b68c:	46b8      	mov	r8, r7
    ble_hs_unlock();
   1b68e:	f002 ff4d 	bl	1e52c <ble_hs_unlock>
    if (!l2cap_update) {
   1b692:	b9b7      	cbnz	r7, 1b6c2 <ble_gap_update_params+0xda>
        ble_hs_timer_resched();
   1b694:	f003 f83e 	bl	1e714 <ble_hs_timer_resched>
    ble_hs_lock();
   1b698:	f002 ff44 	bl	1e524 <ble_hs_lock>
    if (rc == 0) {
   1b69c:	b9ec      	cbnz	r4, 1b6da <ble_gap_update_params+0xf2>
        SLIST_INSERT_HEAD(&ble_gap_update_entries, entry, next);
   1b69e:	4b17      	ldr	r3, [pc, #92]	; (1b6fc <ble_gap_update_params+0x114>)
   1b6a0:	681a      	ldr	r2, [r3, #0]
   1b6a2:	f8c8 2000 	str.w	r2, [r8]
   1b6a6:	f8c3 8000 	str.w	r8, [r3]
    ble_hs_unlock();
   1b6aa:	f002 ff3f 	bl	1e52c <ble_hs_unlock>
}
   1b6ae:	4620      	mov	r0, r4
   1b6b0:	b002      	add	sp, #8
   1b6b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = BLE_HS_ENOMEM;
   1b6b6:	2406      	movs	r4, #6
    l2cap_update = 0;
   1b6b8:	2700      	movs	r7, #0
   1b6ba:	e7e8      	b.n	1b68e <ble_gap_update_params+0xa6>
        rc = 0;
   1b6bc:	2400      	movs	r4, #0
        l2cap_update = 1;
   1b6be:	2701      	movs	r7, #1
   1b6c0:	e7e5      	b.n	1b68e <ble_gap_update_params+0xa6>
        ble_gap_update_to_l2cap(params, &l2cap_params);
   1b6c2:	4669      	mov	r1, sp
   1b6c4:	4628      	mov	r0, r5
   1b6c6:	f7fe fe2b 	bl	1a320 <ble_gap_update_to_l2cap>
        rc = ble_l2cap_sig_update(conn_handle, &l2cap_params,
   1b6ca:	2300      	movs	r3, #0
   1b6cc:	4a0c      	ldr	r2, [pc, #48]	; (1b700 <ble_gap_update_params+0x118>)
   1b6ce:	4669      	mov	r1, sp
   1b6d0:	4630      	mov	r0, r6
   1b6d2:	f005 fb1f 	bl	20d14 <ble_l2cap_sig_update>
   1b6d6:	4604      	mov	r4, r0
   1b6d8:	e7de      	b.n	1b698 <ble_gap_update_params+0xb0>
        ble_gap_update_entry_free(entry);
   1b6da:	4640      	mov	r0, r8
   1b6dc:	f7ff f968 	bl	1a9b0 <ble_gap_update_entry_free>
        STATS_INC(ble_gap_stats, update_fail);
   1b6e0:	4a03      	ldr	r2, [pc, #12]	; (1b6f0 <ble_gap_update_params+0x108>)
   1b6e2:	6d93      	ldr	r3, [r2, #88]	; 0x58
   1b6e4:	3301      	adds	r3, #1
   1b6e6:	6593      	str	r3, [r2, #88]	; 0x58
   1b6e8:	e7df      	b.n	1b6aa <ble_gap_update_params+0xc2>
        return BLE_HS_EINVAL;
   1b6ea:	2403      	movs	r4, #3
   1b6ec:	e7df      	b.n	1b6ae <ble_gap_update_params+0xc6>
   1b6ee:	bf00      	nop
   1b6f0:	200044a0 	.word	0x200044a0
   1b6f4:	0002b2e0 	.word	0x0002b2e0
   1b6f8:	0002b63c 	.word	0x0002b63c
   1b6fc:	20002ae8 	.word	0x20002ae8
   1b700:	0001b485 	.word	0x0001b485

0001b704 <ble_gap_passkey_event>:
{
   1b704:	b530      	push	{r4, r5, lr}
   1b706:	b08f      	sub	sp, #60	; 0x3c
   1b708:	4604      	mov	r4, r0
   1b70a:	460d      	mov	r5, r1
    memset(&event, 0, sizeof event);
   1b70c:	2234      	movs	r2, #52	; 0x34
   1b70e:	2100      	movs	r1, #0
   1b710:	a801      	add	r0, sp, #4
   1b712:	f7f2 fed5 	bl	e4c0 <memset>
    event.type = BLE_GAP_EVENT_PASSKEY_ACTION;
   1b716:	230b      	movs	r3, #11
   1b718:	f88d 3004 	strb.w	r3, [sp, #4]
    event.passkey.conn_handle = conn_handle;
   1b71c:	f8ad 4010 	strh.w	r4, [sp, #16]
    event.passkey.params = *passkey_params;
   1b720:	ab02      	add	r3, sp, #8
   1b722:	e895 0003 	ldmia.w	r5, {r0, r1}
   1b726:	e883 0003 	stmia.w	r3, {r0, r1}
    ble_gap_call_conn_event_cb(&event, conn_handle);
   1b72a:	4621      	mov	r1, r4
   1b72c:	a801      	add	r0, sp, #4
   1b72e:	f7fe fec9 	bl	1a4c4 <ble_gap_call_conn_event_cb>
}
   1b732:	b00f      	add	sp, #60	; 0x3c
   1b734:	bd30      	pop	{r4, r5, pc}

0001b736 <ble_gap_enc_event>:
{
   1b736:	b570      	push	{r4, r5, r6, lr}
   1b738:	b08e      	sub	sp, #56	; 0x38
   1b73a:	4604      	mov	r4, r0
   1b73c:	460d      	mov	r5, r1
   1b73e:	4616      	mov	r6, r2
    memset(&event, 0, sizeof event);
   1b740:	2234      	movs	r2, #52	; 0x34
   1b742:	2100      	movs	r1, #0
   1b744:	a801      	add	r0, sp, #4
   1b746:	f7f2 febb 	bl	e4c0 <memset>
    event.type = BLE_GAP_EVENT_ENC_CHANGE;
   1b74a:	230a      	movs	r3, #10
   1b74c:	f88d 3004 	strb.w	r3, [sp, #4]
    event.enc_change.conn_handle = conn_handle;
   1b750:	f8ad 400c 	strh.w	r4, [sp, #12]
    event.enc_change.status = status;
   1b754:	9502      	str	r5, [sp, #8]
    ble_gap_event_listener_call(&event);
   1b756:	a801      	add	r0, sp, #4
   1b758:	f7fe fe8a 	bl	1a470 <ble_gap_event_listener_call>
    ble_gap_call_conn_event_cb(&event, conn_handle);
   1b75c:	4621      	mov	r1, r4
   1b75e:	a801      	add	r0, sp, #4
   1b760:	f7fe feb0 	bl	1a4c4 <ble_gap_call_conn_event_cb>
    if (status == 0) {
   1b764:	b91d      	cbnz	r5, 1b76e <ble_gap_enc_event+0x38>
        if (security_restored) {
   1b766:	b926      	cbnz	r6, 1b772 <ble_gap_enc_event+0x3c>
            ble_gatts_bonding_established(conn_handle);
   1b768:	4620      	mov	r0, r4
   1b76a:	f002 fd21 	bl	1e1b0 <ble_gatts_bonding_established>
}
   1b76e:	b00e      	add	sp, #56	; 0x38
   1b770:	bd70      	pop	{r4, r5, r6, pc}
            ble_gatts_bonding_restored(conn_handle);
   1b772:	4620      	mov	r0, r4
   1b774:	f002 fd5c 	bl	1e230 <ble_gatts_bonding_restored>
   1b778:	e7f9      	b.n	1b76e <ble_gap_enc_event+0x38>

0001b77a <ble_gap_identity_event>:
{
   1b77a:	b510      	push	{r4, lr}
   1b77c:	b08e      	sub	sp, #56	; 0x38
   1b77e:	4604      	mov	r4, r0
    memset(&event, 0, sizeof event);
   1b780:	2234      	movs	r2, #52	; 0x34
   1b782:	2100      	movs	r1, #0
   1b784:	a801      	add	r0, sp, #4
   1b786:	f7f2 fe9b 	bl	e4c0 <memset>
    event.type = BLE_GAP_EVENT_IDENTITY_RESOLVED;
   1b78a:	2310      	movs	r3, #16
   1b78c:	f88d 3004 	strb.w	r3, [sp, #4]
    event.identity_resolved.conn_handle = conn_handle;
   1b790:	f8ad 4008 	strh.w	r4, [sp, #8]
    ble_gap_call_conn_event_cb(&event, conn_handle);
   1b794:	4621      	mov	r1, r4
   1b796:	a801      	add	r0, sp, #4
   1b798:	f7fe fe94 	bl	1a4c4 <ble_gap_call_conn_event_cb>
}
   1b79c:	b00e      	add	sp, #56	; 0x38
   1b79e:	bd10      	pop	{r4, pc}

0001b7a0 <ble_gap_repeat_pairing_event>:
{
   1b7a0:	b510      	push	{r4, lr}
   1b7a2:	b08e      	sub	sp, #56	; 0x38
   1b7a4:	4604      	mov	r4, r0
    memset(&event, 0, sizeof event);
   1b7a6:	2234      	movs	r2, #52	; 0x34
   1b7a8:	2100      	movs	r1, #0
   1b7aa:	a801      	add	r0, sp, #4
   1b7ac:	f7f2 fe88 	bl	e4c0 <memset>
    event.type = BLE_GAP_EVENT_REPEAT_PAIRING;
   1b7b0:	2311      	movs	r3, #17
   1b7b2:	f88d 3004 	strb.w	r3, [sp, #4]
    event.repeat_pairing = *rp;
   1b7b6:	6820      	ldr	r0, [r4, #0]
   1b7b8:	9002      	str	r0, [sp, #8]
   1b7ba:	88a3      	ldrh	r3, [r4, #4]
   1b7bc:	f8ad 300c 	strh.w	r3, [sp, #12]
    rc = ble_gap_call_conn_event_cb(&event, rp->conn_handle);
   1b7c0:	8821      	ldrh	r1, [r4, #0]
   1b7c2:	a801      	add	r0, sp, #4
   1b7c4:	f7fe fe7e 	bl	1a4c4 <ble_gap_call_conn_event_cb>
}
   1b7c8:	b00e      	add	sp, #56	; 0x38
   1b7ca:	bd10      	pop	{r4, pc}

0001b7cc <ble_gap_notify_rx_event>:
{
   1b7cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b7ce:	b08f      	sub	sp, #60	; 0x3c
   1b7d0:	4604      	mov	r4, r0
   1b7d2:	460f      	mov	r7, r1
   1b7d4:	4616      	mov	r6, r2
   1b7d6:	461d      	mov	r5, r3
    memset(&event, 0, sizeof event);
   1b7d8:	2234      	movs	r2, #52	; 0x34
   1b7da:	2100      	movs	r1, #0
   1b7dc:	a801      	add	r0, sp, #4
   1b7de:	f7f2 fe6f 	bl	e4c0 <memset>
    event.type = BLE_GAP_EVENT_NOTIFY_RX;
   1b7e2:	230c      	movs	r3, #12
   1b7e4:	f88d 3004 	strb.w	r3, [sp, #4]
    event.notify_rx.conn_handle = conn_handle;
   1b7e8:	f8ad 400e 	strh.w	r4, [sp, #14]
    event.notify_rx.attr_handle = attr_handle;
   1b7ec:	f8ad 700c 	strh.w	r7, [sp, #12]
    event.notify_rx.om = om;
   1b7f0:	9602      	str	r6, [sp, #8]
    event.notify_rx.indication = is_indication;
   1b7f2:	f04f 0300 	mov.w	r3, #0
   1b7f6:	f365 0300 	bfi	r3, r5, #0, #1
   1b7fa:	f88d 3010 	strb.w	r3, [sp, #16]
    ble_gap_event_listener_call(&event);
   1b7fe:	a801      	add	r0, sp, #4
   1b800:	f7fe fe36 	bl	1a470 <ble_gap_event_listener_call>
    ble_gap_call_conn_event_cb(&event, conn_handle);
   1b804:	4621      	mov	r1, r4
   1b806:	a801      	add	r0, sp, #4
   1b808:	f7fe fe5c 	bl	1a4c4 <ble_gap_call_conn_event_cb>
    os_mbuf_free_chain(event.notify_rx.om);
   1b80c:	9802      	ldr	r0, [sp, #8]
   1b80e:	f7f2 f902 	bl	da16 <os_mbuf_free_chain>
}
   1b812:	b00f      	add	sp, #60	; 0x3c
   1b814:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001b816 <ble_gap_notify_tx_event>:
{
   1b816:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b818:	b08f      	sub	sp, #60	; 0x3c
   1b81a:	4607      	mov	r7, r0
   1b81c:	460c      	mov	r4, r1
   1b81e:	4616      	mov	r6, r2
   1b820:	461d      	mov	r5, r3
    memset(&event, 0, sizeof event);
   1b822:	2234      	movs	r2, #52	; 0x34
   1b824:	2100      	movs	r1, #0
   1b826:	a801      	add	r0, sp, #4
   1b828:	f7f2 fe4a 	bl	e4c0 <memset>
    event.type = BLE_GAP_EVENT_NOTIFY_TX;
   1b82c:	230d      	movs	r3, #13
   1b82e:	f88d 3004 	strb.w	r3, [sp, #4]
    event.notify_tx.conn_handle = conn_handle;
   1b832:	f8ad 400c 	strh.w	r4, [sp, #12]
    event.notify_tx.status = status;
   1b836:	9702      	str	r7, [sp, #8]
    event.notify_tx.attr_handle = attr_handle;
   1b838:	f8ad 600e 	strh.w	r6, [sp, #14]
    event.notify_tx.indication = is_indication;
   1b83c:	f04f 0300 	mov.w	r3, #0
   1b840:	f365 0300 	bfi	r3, r5, #0, #1
   1b844:	f88d 3010 	strb.w	r3, [sp, #16]
    ble_gap_event_listener_call(&event);
   1b848:	a801      	add	r0, sp, #4
   1b84a:	f7fe fe11 	bl	1a470 <ble_gap_event_listener_call>
    ble_gap_call_conn_event_cb(&event, conn_handle);
   1b84e:	4621      	mov	r1, r4
   1b850:	a801      	add	r0, sp, #4
   1b852:	f7fe fe37 	bl	1a4c4 <ble_gap_call_conn_event_cb>
}
   1b856:	b00f      	add	sp, #60	; 0x3c
   1b858:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001b85a <ble_gap_subscribe_event>:
{
   1b85a:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b85c:	b08f      	sub	sp, #60	; 0x3c
   1b85e:	4605      	mov	r5, r0
   1b860:	460f      	mov	r7, r1
   1b862:	4616      	mov	r6, r2
   1b864:	461c      	mov	r4, r3
    memset(&event, 0, sizeof event);
   1b866:	2234      	movs	r2, #52	; 0x34
   1b868:	2100      	movs	r1, #0
   1b86a:	a801      	add	r0, sp, #4
   1b86c:	f7f2 fe28 	bl	e4c0 <memset>
    event.type = BLE_GAP_EVENT_SUBSCRIBE;
   1b870:	230e      	movs	r3, #14
   1b872:	f88d 3004 	strb.w	r3, [sp, #4]
    event.subscribe.conn_handle = conn_handle;
   1b876:	f8ad 5008 	strh.w	r5, [sp, #8]
    event.subscribe.attr_handle = attr_handle;
   1b87a:	f8ad 700a 	strh.w	r7, [sp, #10]
    event.subscribe.reason = reason;
   1b87e:	f88d 600c 	strb.w	r6, [sp, #12]
    event.subscribe.cur_notify = !!cur_notify;
   1b882:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
   1b886:	3200      	adds	r2, #0
   1b888:	bf18      	it	ne
   1b88a:	2201      	movne	r2, #1
   1b88c:	1c23      	adds	r3, r4, #0
   1b88e:	bf18      	it	ne
   1b890:	2301      	movne	r3, #1
   1b892:	f362 0341 	bfi	r3, r2, #1, #1
    event.subscribe.prev_indicate = !!prev_indicate;
   1b896:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
   1b89a:	3200      	adds	r2, #0
   1b89c:	bf18      	it	ne
   1b89e:	2201      	movne	r2, #1
   1b8a0:	f362 0382 	bfi	r3, r2, #2, #1
    event.subscribe.cur_indicate = !!cur_indicate;
   1b8a4:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
   1b8a8:	3200      	adds	r2, #0
   1b8aa:	bf18      	it	ne
   1b8ac:	2201      	movne	r2, #1
   1b8ae:	f362 03c3 	bfi	r3, r2, #3, #1
   1b8b2:	f88d 300d 	strb.w	r3, [sp, #13]
    ble_gap_event_listener_call(&event);
   1b8b6:	a801      	add	r0, sp, #4
   1b8b8:	f7fe fdda 	bl	1a470 <ble_gap_event_listener_call>
    ble_gap_call_conn_event_cb(&event, conn_handle);
   1b8bc:	4629      	mov	r1, r5
   1b8be:	a801      	add	r0, sp, #4
   1b8c0:	f7fe fe00 	bl	1a4c4 <ble_gap_call_conn_event_cb>
}
   1b8c4:	b00f      	add	sp, #60	; 0x3c
   1b8c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001b8c8 <ble_gap_mtu_event>:
{
   1b8c8:	b570      	push	{r4, r5, r6, lr}
   1b8ca:	b08e      	sub	sp, #56	; 0x38
   1b8cc:	4604      	mov	r4, r0
   1b8ce:	460e      	mov	r6, r1
   1b8d0:	4615      	mov	r5, r2
    memset(&event, 0, sizeof event);
   1b8d2:	2234      	movs	r2, #52	; 0x34
   1b8d4:	2100      	movs	r1, #0
   1b8d6:	a801      	add	r0, sp, #4
   1b8d8:	f7f2 fdf2 	bl	e4c0 <memset>
    event.type = BLE_GAP_EVENT_MTU;
   1b8dc:	230f      	movs	r3, #15
   1b8de:	f88d 3004 	strb.w	r3, [sp, #4]
    event.mtu.conn_handle = conn_handle;
   1b8e2:	f8ad 4008 	strh.w	r4, [sp, #8]
    event.mtu.channel_id = cid;
   1b8e6:	f8ad 600a 	strh.w	r6, [sp, #10]
    event.mtu.value = mtu;
   1b8ea:	f8ad 500c 	strh.w	r5, [sp, #12]
    ble_gap_event_listener_call(&event);
   1b8ee:	a801      	add	r0, sp, #4
   1b8f0:	f7fe fdbe 	bl	1a470 <ble_gap_event_listener_call>
    ble_gap_call_conn_event_cb(&event, conn_handle);
   1b8f4:	4621      	mov	r1, r4
   1b8f6:	a801      	add	r0, sp, #4
   1b8f8:	f7fe fde4 	bl	1a4c4 <ble_gap_call_conn_event_cb>
}
   1b8fc:	b00e      	add	sp, #56	; 0x38
   1b8fe:	bd70      	pop	{r4, r5, r6, pc}

0001b900 <ble_gap_preempt_no_lock>:
{
   1b900:	b508      	push	{r3, lr}
    rc = ble_gap_adv_stop_no_lock();
   1b902:	f7ff fbfd 	bl	1b100 <ble_gap_adv_stop_no_lock>
    if (rc == 0) {
   1b906:	b920      	cbnz	r0, 1b912 <ble_gap_preempt_no_lock+0x12>
        ble_gap_slave[0].preempted = 1;
   1b908:	4a08      	ldr	r2, [pc, #32]	; (1b92c <ble_gap_preempt_no_lock+0x2c>)
   1b90a:	7d53      	ldrb	r3, [r2, #21]
   1b90c:	f043 0304 	orr.w	r3, r3, #4
   1b910:	7553      	strb	r3, [r2, #21]
    rc = ble_gap_conn_cancel_no_lock();
   1b912:	f7ff fc47 	bl	1b1a4 <ble_gap_conn_cancel_no_lock>
    if (rc == 0) {
   1b916:	b910      	cbnz	r0, 1b91e <ble_gap_preempt_no_lock+0x1e>
        ble_gap_master.preempted_op = BLE_GAP_OP_M_CONN;
   1b918:	4b04      	ldr	r3, [pc, #16]	; (1b92c <ble_gap_preempt_no_lock+0x2c>)
   1b91a:	2202      	movs	r2, #2
   1b91c:	741a      	strb	r2, [r3, #16]
    rc = ble_gap_disc_cancel_no_lock();
   1b91e:	f7ff fc1b 	bl	1b158 <ble_gap_disc_cancel_no_lock>
    if (rc == 0) {
   1b922:	b910      	cbnz	r0, 1b92a <ble_gap_preempt_no_lock+0x2a>
        ble_gap_master.preempted_op = BLE_GAP_OP_M_DISC;
   1b924:	4b01      	ldr	r3, [pc, #4]	; (1b92c <ble_gap_preempt_no_lock+0x2c>)
   1b926:	2201      	movs	r2, #1
   1b928:	741a      	strb	r2, [r3, #16]
}
   1b92a:	bd08      	pop	{r3, pc}
   1b92c:	20000224 	.word	0x20000224

0001b930 <ble_gap_preempt>:
{
   1b930:	b508      	push	{r3, lr}
    ble_hs_lock();
   1b932:	f002 fdf7 	bl	1e524 <ble_hs_lock>
    if (!ble_gap_is_preempted()) {
   1b936:	f7fe fcd5 	bl	1a2e4 <ble_gap_is_preempted>
   1b93a:	b110      	cbz	r0, 1b942 <ble_gap_preempt+0x12>
    ble_hs_unlock();
   1b93c:	f002 fdf6 	bl	1e52c <ble_hs_unlock>
}
   1b940:	bd08      	pop	{r3, pc}
        ble_gap_preempt_no_lock();
   1b942:	f7ff ffdd 	bl	1b900 <ble_gap_preempt_no_lock>
   1b946:	e7f9      	b.n	1b93c <ble_gap_preempt+0xc>

0001b948 <ble_gap_preempt_done>:
{
   1b948:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b94a:	b08f      	sub	sp, #60	; 0x3c
    return (ble_npl_error_t)os_mutex_pend(&mu->mu, timeout);
   1b94c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1b950:	482b      	ldr	r0, [pc, #172]	; (1ba00 <ble_gap_preempt_done+0xb8>)
   1b952:	f7f2 fc95 	bl	e280 <os_mutex_pend>
    memset(slaves, 0, sizeof(slaves));
   1b956:	4b2b      	ldr	r3, [pc, #172]	; (1ba04 <ble_gap_preempt_done+0xbc>)
   1b958:	2400      	movs	r4, #0
   1b95a:	601c      	str	r4, [r3, #0]
   1b95c:	605c      	str	r4, [r3, #4]
    ble_hs_lock();
   1b95e:	f002 fde1 	bl	1e524 <ble_hs_lock>
    for (i = 0; i < BLE_ADV_INSTANCES; i++) {
   1b962:	4623      	mov	r3, r4
   1b964:	2b00      	cmp	r3, #0
   1b966:	dd14      	ble.n	1b992 <ble_gap_preempt_done+0x4a>
    if (ble_gap_master.preempted_op == BLE_GAP_OP_M_DISC) {
   1b968:	4b27      	ldr	r3, [pc, #156]	; (1ba08 <ble_gap_preempt_done+0xc0>)
   1b96a:	7c1b      	ldrb	r3, [r3, #16]
   1b96c:	2b01      	cmp	r3, #1
   1b96e:	d028      	beq.n	1b9c2 <ble_gap_preempt_done+0x7a>
    disc_preempted = 0;
   1b970:	2700      	movs	r7, #0
    ble_hs_unlock();
   1b972:	f002 fddb 	bl	1e52c <ble_hs_unlock>
    event.type = BLE_GAP_EVENT_ADV_COMPLETE;
   1b976:	2309      	movs	r3, #9
   1b978:	f88d 3004 	strb.w	r3, [sp, #4]
    event.adv_complete.reason = BLE_HS_EPREEMPTED;
   1b97c:	231d      	movs	r3, #29
   1b97e:	9302      	str	r3, [sp, #8]
    for (i = 0; i < BLE_ADV_INSTANCES; i++) {
   1b980:	2400      	movs	r4, #0
   1b982:	2c00      	cmp	r4, #0
   1b984:	dd24      	ble.n	1b9d0 <ble_gap_preempt_done+0x88>
    return (ble_npl_error_t)os_mutex_release(&mu->mu);
   1b986:	481e      	ldr	r0, [pc, #120]	; (1ba00 <ble_gap_preempt_done+0xb8>)
   1b988:	f7f2 fc1a 	bl	e1c0 <os_mutex_release>
    if (disc_preempted) {
   1b98c:	bb67      	cbnz	r7, 1b9e8 <ble_gap_preempt_done+0xa0>
}
   1b98e:	b00f      	add	sp, #60	; 0x3c
   1b990:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (ble_gap_slave[i].preempted) {
   1b992:	4a1d      	ldr	r2, [pc, #116]	; (1ba08 <ble_gap_preempt_done+0xc0>)
   1b994:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   1b998:	7d52      	ldrb	r2, [r2, #21]
   1b99a:	f012 0f04 	tst.w	r2, #4
   1b99e:	d00e      	beq.n	1b9be <ble_gap_preempt_done+0x76>
            ble_gap_slave[i].preempted = 0;
   1b9a0:	4a19      	ldr	r2, [pc, #100]	; (1ba08 <ble_gap_preempt_done+0xc0>)
   1b9a2:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   1b9a6:	7d50      	ldrb	r0, [r2, #21]
   1b9a8:	f36f 0082 	bfc	r0, #2, #1
   1b9ac:	7550      	strb	r0, [r2, #21]
            slaves[i].cb = ble_gap_slave[i].cb;
   1b9ae:	69d0      	ldr	r0, [r2, #28]
   1b9b0:	4914      	ldr	r1, [pc, #80]	; (1ba04 <ble_gap_preempt_done+0xbc>)
   1b9b2:	f841 0033 	str.w	r0, [r1, r3, lsl #3]
            slaves[i].arg = ble_gap_slave[i].cb_arg;
   1b9b6:	6a12      	ldr	r2, [r2, #32]
   1b9b8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   1b9bc:	604a      	str	r2, [r1, #4]
    for (i = 0; i < BLE_ADV_INSTANCES; i++) {
   1b9be:	3301      	adds	r3, #1
   1b9c0:	e7d0      	b.n	1b964 <ble_gap_preempt_done+0x1c>
        ble_gap_master.preempted_op = BLE_GAP_OP_NULL;
   1b9c2:	4b11      	ldr	r3, [pc, #68]	; (1ba08 <ble_gap_preempt_done+0xc0>)
   1b9c4:	2200      	movs	r2, #0
   1b9c6:	741a      	strb	r2, [r3, #16]
        master_cb = ble_gap_master.cb;
   1b9c8:	689d      	ldr	r5, [r3, #8]
        master_arg = ble_gap_master.cb_arg;
   1b9ca:	68de      	ldr	r6, [r3, #12]
        disc_preempted = 1;
   1b9cc:	2701      	movs	r7, #1
   1b9ce:	e7d0      	b.n	1b972 <ble_gap_preempt_done+0x2a>
        if (slaves[i].cb) {
   1b9d0:	4b0c      	ldr	r3, [pc, #48]	; (1ba04 <ble_gap_preempt_done+0xbc>)
   1b9d2:	f853 1034 	ldr.w	r1, [r3, r4, lsl #3]
   1b9d6:	b129      	cbz	r1, 1b9e4 <ble_gap_preempt_done+0x9c>
            ble_gap_call_event_cb(&event, slaves[i].cb, slaves[i].arg);
   1b9d8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   1b9dc:	685a      	ldr	r2, [r3, #4]
   1b9de:	a801      	add	r0, sp, #4
   1b9e0:	f7fe fc6a 	bl	1a2b8 <ble_gap_call_event_cb>
    for (i = 0; i < BLE_ADV_INSTANCES; i++) {
   1b9e4:	3401      	adds	r4, #1
   1b9e6:	e7cc      	b.n	1b982 <ble_gap_preempt_done+0x3a>
        event.type = BLE_GAP_EVENT_DISC_COMPLETE;
   1b9e8:	2308      	movs	r3, #8
   1b9ea:	f88d 3004 	strb.w	r3, [sp, #4]
        event.disc_complete.reason = BLE_HS_EPREEMPTED;
   1b9ee:	231d      	movs	r3, #29
   1b9f0:	9302      	str	r3, [sp, #8]
        ble_gap_call_event_cb(&event, master_cb, master_arg);
   1b9f2:	4632      	mov	r2, r6
   1b9f4:	4629      	mov	r1, r5
   1b9f6:	a801      	add	r0, sp, #4
   1b9f8:	f7fe fc5e 	bl	1a2b8 <ble_gap_call_event_cb>
}
   1b9fc:	e7c7      	b.n	1b98e <ble_gap_preempt_done+0x46>
   1b9fe:	bf00      	nop
   1ba00:	20002b20 	.word	0x20002b20
   1ba04:	20002b2c 	.word	0x20002b2c
   1ba08:	20000224 	.word	0x20000224

0001ba0c <ble_gap_event_listener_unregister>:
    SLIST_FOREACH(evl, &ble_gap_event_listener_list, link) {
   1ba0c:	4b0c      	ldr	r3, [pc, #48]	; (1ba40 <ble_gap_event_listener_unregister+0x34>)
   1ba0e:	681a      	ldr	r2, [r3, #0]
   1ba10:	4613      	mov	r3, r2
   1ba12:	b11b      	cbz	r3, 1ba1c <ble_gap_event_listener_unregister+0x10>
        if (evl == listener) {
   1ba14:	4283      	cmp	r3, r0
   1ba16:	d001      	beq.n	1ba1c <ble_gap_event_listener_unregister+0x10>
    SLIST_FOREACH(evl, &ble_gap_event_listener_list, link) {
   1ba18:	689b      	ldr	r3, [r3, #8]
   1ba1a:	e7fa      	b.n	1ba12 <ble_gap_event_listener_unregister+0x6>
    if (!evl) {
   1ba1c:	b173      	cbz	r3, 1ba3c <ble_gap_event_listener_unregister+0x30>
        SLIST_REMOVE(&ble_gap_event_listener_list, listener,
   1ba1e:	4282      	cmp	r2, r0
   1ba20:	d105      	bne.n	1ba2e <ble_gap_event_listener_unregister+0x22>
   1ba22:	6892      	ldr	r2, [r2, #8]
   1ba24:	4b06      	ldr	r3, [pc, #24]	; (1ba40 <ble_gap_event_listener_unregister+0x34>)
   1ba26:	601a      	str	r2, [r3, #0]
        rc = 0;
   1ba28:	2000      	movs	r0, #0
   1ba2a:	4770      	bx	lr
        SLIST_REMOVE(&ble_gap_event_listener_list, listener,
   1ba2c:	461a      	mov	r2, r3
   1ba2e:	6893      	ldr	r3, [r2, #8]
   1ba30:	4283      	cmp	r3, r0
   1ba32:	d1fb      	bne.n	1ba2c <ble_gap_event_listener_unregister+0x20>
   1ba34:	689b      	ldr	r3, [r3, #8]
   1ba36:	6093      	str	r3, [r2, #8]
        rc = 0;
   1ba38:	2000      	movs	r0, #0
   1ba3a:	4770      	bx	lr
        rc = BLE_HS_ENOENT;
   1ba3c:	2005      	movs	r0, #5
}
   1ba3e:	4770      	bx	lr
   1ba40:	20002ae4 	.word	0x20002ae4

0001ba44 <ble_gap_init>:
 * $init                                                                     *
 *****************************************************************************/

int
ble_gap_init(void)
{
   1ba44:	b510      	push	{r4, lr}
   1ba46:	b082      	sub	sp, #8
    int rc;

    memset(&ble_gap_master, 0, sizeof(ble_gap_master));
   1ba48:	4b15      	ldr	r3, [pc, #84]	; (1baa0 <ble_gap_init+0x5c>)
   1ba4a:	2400      	movs	r4, #0
   1ba4c:	601c      	str	r4, [r3, #0]
   1ba4e:	605c      	str	r4, [r3, #4]
   1ba50:	609c      	str	r4, [r3, #8]
   1ba52:	60dc      	str	r4, [r3, #12]
   1ba54:	611c      	str	r4, [r3, #16]
    memset(ble_gap_slave, 0, sizeof(ble_gap_slave));
   1ba56:	615c      	str	r4, [r3, #20]
   1ba58:	619c      	str	r4, [r3, #24]
   1ba5a:	61dc      	str	r4, [r3, #28]
   1ba5c:	621c      	str	r4, [r3, #32]
    return (ble_npl_error_t)os_mutex_init(&mu->mu);
   1ba5e:	4811      	ldr	r0, [pc, #68]	; (1baa4 <ble_gap_init+0x60>)
   1ba60:	f7f2 fba4 	bl	e1ac <os_mutex_init>
    memset(&ble_gap_sync, 0, sizeof(ble_gap_sync));
#endif

    ble_npl_mutex_init(&preempt_done_mutex);

    SLIST_INIT(&ble_gap_update_entries);
   1ba64:	4b10      	ldr	r3, [pc, #64]	; (1baa8 <ble_gap_init+0x64>)
   1ba66:	601c      	str	r4, [r3, #0]
    SLIST_INIT(&ble_gap_event_listener_list);
   1ba68:	4b10      	ldr	r3, [pc, #64]	; (1baac <ble_gap_init+0x68>)
   1ba6a:	601c      	str	r4, [r3, #0]

    rc = os_mempool_init(&ble_gap_update_entry_pool,
   1ba6c:	4b10      	ldr	r3, [pc, #64]	; (1bab0 <ble_gap_init+0x6c>)
   1ba6e:	9300      	str	r3, [sp, #0]
   1ba70:	4b10      	ldr	r3, [pc, #64]	; (1bab4 <ble_gap_init+0x70>)
   1ba72:	2218      	movs	r2, #24
   1ba74:	2101      	movs	r1, #1
   1ba76:	4810      	ldr	r0, [pc, #64]	; (1bab8 <ble_gap_init+0x74>)
   1ba78:	f7f1 fa16 	bl	cea8 <os_mempool_init>
                         MYNEWT_VAL(BLE_GAP_MAX_PENDING_CONN_PARAM_UPDATE),
                         sizeof (struct ble_gap_update_entry),
                         ble_gap_update_entry_mem,
                         "ble_gap_update");
    switch (rc) {
   1ba7c:	b120      	cbz	r0, 1ba88 <ble_gap_init+0x44>
   1ba7e:	2801      	cmp	r0, #1
   1ba80:	d10c      	bne.n	1ba9c <ble_gap_init+0x58>
    case 0:
        break;
    case OS_ENOMEM:
        rc = BLE_HS_ENOMEM;
   1ba82:	2006      	movs	r0, #6

    return 0;

err:
    return rc;
}
   1ba84:	b002      	add	sp, #8
   1ba86:	bd10      	pop	{r4, pc}
    rc = stats_init_and_reg(
   1ba88:	4b0c      	ldr	r3, [pc, #48]	; (1babc <ble_gap_init+0x78>)
   1ba8a:	9301      	str	r3, [sp, #4]
   1ba8c:	2300      	movs	r3, #0
   1ba8e:	9300      	str	r3, [sp, #0]
   1ba90:	221f      	movs	r2, #31
   1ba92:	2104      	movs	r1, #4
   1ba94:	480a      	ldr	r0, [pc, #40]	; (1bac0 <ble_gap_init+0x7c>)
   1ba96:	f7f4 faeb 	bl	10070 <stats_init_and_reg>
err:
   1ba9a:	e7f3      	b.n	1ba84 <ble_gap_init+0x40>
        rc = BLE_HS_EOS;
   1ba9c:	200b      	movs	r0, #11
   1ba9e:	e7f1      	b.n	1ba84 <ble_gap_init+0x40>
   1baa0:	20000224 	.word	0x20000224
   1baa4:	20002b20 	.word	0x20002b20
   1baa8:	20002ae8 	.word	0x20002ae8
   1baac:	20002ae4 	.word	0x20002ae4
   1bab0:	0002b0d0 	.word	0x0002b0d0
   1bab4:	20002aec 	.word	0x20002aec
   1bab8:	20002b04 	.word	0x20002b04
   1babc:	0002b0e0 	.word	0x0002b0e0
   1bac0:	200044a0 	.word	0x200044a0

0001bac4 <ble_gattc_rx_entry_find>:
 * $rx entry                                                                 *
 *****************************************************************************/

static const void *
ble_gattc_rx_entry_find(uint8_t op, const void *rx_entries, int num_entries)
{
   1bac4:	b430      	push	{r4, r5}
   1bac6:	4605      	mov	r5, r0

    const struct gen_entry *entries;
    int i;

    entries = rx_entries;
    for (i = 0; i < num_entries; i++) {
   1bac8:	2300      	movs	r3, #0
   1baca:	4293      	cmp	r3, r2
   1bacc:	da07      	bge.n	1bade <ble_gattc_rx_entry_find+0x1a>
        if (entries[i].op == op) {
   1bace:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
   1bad2:	f811 4033 	ldrb.w	r4, [r1, r3, lsl #3]
   1bad6:	42ac      	cmp	r4, r5
   1bad8:	d002      	beq.n	1bae0 <ble_gattc_rx_entry_find+0x1c>
    for (i = 0; i < num_entries; i++) {
   1bada:	3301      	adds	r3, #1
   1badc:	e7f5      	b.n	1baca <ble_gattc_rx_entry_find+0x6>
            return entries + i;
        }
    }

    return NULL;
   1bade:	2000      	movs	r0, #0
}
   1bae0:	bc30      	pop	{r4, r5}
   1bae2:	4770      	bx	lr

0001bae4 <ble_gattc_err_dispatch_get>:
static ble_gattc_err_fn *
ble_gattc_err_dispatch_get(uint8_t op)
{
    BLE_HS_DBG_ASSERT(op < BLE_GATT_OP_CNT);
    return ble_gattc_err_dispatch[op];
}
   1bae4:	4b01      	ldr	r3, [pc, #4]	; (1baec <ble_gattc_err_dispatch_get+0x8>)
   1bae6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1baea:	4770      	bx	lr
   1baec:	0002b334 	.word	0x0002b334

0001baf0 <ble_gattc_resume_dispatch_get>:
static ble_gattc_resume_fn *
ble_gattc_resume_dispatch_get(uint8_t op)
{
    BLE_HS_DBG_ASSERT(op < BLE_GATT_OP_CNT);
    return ble_gattc_resume_dispatch[op];
}
   1baf0:	4b01      	ldr	r3, [pc, #4]	; (1baf8 <ble_gattc_resume_dispatch_get+0x8>)
   1baf2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1baf6:	4770      	bx	lr
   1baf8:	0002b3e0 	.word	0x0002b3e0

0001bafc <ble_gattc_tmo_dispatch_get>:
static ble_gattc_tmo_fn *
ble_gattc_tmo_dispatch_get(uint8_t op)
{
    BLE_HS_DBG_ASSERT(op < BLE_GATT_OP_CNT);
    return ble_gattc_tmo_dispatch[op];
}
   1bafc:	4b01      	ldr	r3, [pc, #4]	; (1bb04 <ble_gattc_tmo_dispatch_get+0x8>)
   1bafe:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1bb02:	4770      	bx	lr
   1bb04:	0002b494 	.word	0x0002b494

0001bb08 <ble_gattc_proc_matches_conn_op>:
{
    const struct ble_gattc_criteria_conn_op *criteria;

    criteria = arg;

    if (criteria->conn_handle != proc->conn_handle) {
   1bb08:	880a      	ldrh	r2, [r1, #0]
   1bb0a:	8903      	ldrh	r3, [r0, #8]
   1bb0c:	429a      	cmp	r2, r3
   1bb0e:	d001      	beq.n	1bb14 <ble_gattc_proc_matches_conn_op+0xc>
        return 0;
   1bb10:	2000      	movs	r0, #0
   1bb12:	4770      	bx	lr
    }

    if (criteria->op != proc->op && criteria->op != BLE_GATT_OP_NONE) {
   1bb14:	788b      	ldrb	r3, [r1, #2]
   1bb16:	7a82      	ldrb	r2, [r0, #10]
   1bb18:	4293      	cmp	r3, r2
   1bb1a:	d005      	beq.n	1bb28 <ble_gattc_proc_matches_conn_op+0x20>
   1bb1c:	2bff      	cmp	r3, #255	; 0xff
   1bb1e:	d001      	beq.n	1bb24 <ble_gattc_proc_matches_conn_op+0x1c>
        return 0;
   1bb20:	2000      	movs	r0, #0
    }

    return 1;
}
   1bb22:	4770      	bx	lr
    return 1;
   1bb24:	2001      	movs	r0, #1
   1bb26:	4770      	bx	lr
   1bb28:	2001      	movs	r0, #1
   1bb2a:	4770      	bx	lr

0001bb2c <ble_gattc_proc_matches_expired>:
    struct ble_gattc_criteria_exp *criteria;
    int32_t time_diff;

    criteria = arg;

    time_diff = proc->exp_os_ticks - criteria->now;
   1bb2c:	6843      	ldr	r3, [r0, #4]
   1bb2e:	680a      	ldr	r2, [r1, #0]
   1bb30:	1a9b      	subs	r3, r3, r2

    if (time_diff <= 0) {
   1bb32:	2b00      	cmp	r3, #0
   1bb34:	dd05      	ble.n	1bb42 <ble_gattc_proc_matches_expired+0x16>
        /* Procedure is expired. */
        return 1;
    }

    /* Procedure isn't expired; determine if it is the next to expire. */
    if (time_diff < criteria->next_exp_in) {
   1bb36:	684a      	ldr	r2, [r1, #4]
   1bb38:	429a      	cmp	r2, r3
   1bb3a:	dd04      	ble.n	1bb46 <ble_gattc_proc_matches_expired+0x1a>
        criteria->next_exp_in = time_diff;
   1bb3c:	604b      	str	r3, [r1, #4]
    }
    return 0;
   1bb3e:	2000      	movs	r0, #0
   1bb40:	4770      	bx	lr
        return 1;
   1bb42:	2001      	movs	r0, #1
   1bb44:	4770      	bx	lr
    return 0;
   1bb46:	2000      	movs	r0, #0
}
   1bb48:	4770      	bx	lr

0001bb4a <ble_gattc_proc_matches_conn_rx_entry>:
{
    struct ble_gattc_criteria_conn_rx_entry *criteria;

    criteria = arg;

    if (criteria->conn_handle != BLE_HS_CONN_HANDLE_NONE &&
   1bb4a:	880b      	ldrh	r3, [r1, #0]
   1bb4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1bb50:	4293      	cmp	r3, r2
   1bb52:	d004      	beq.n	1bb5e <ble_gattc_proc_matches_conn_rx_entry+0x14>
        criteria->conn_handle != proc->conn_handle) {
   1bb54:	8902      	ldrh	r2, [r0, #8]
    if (criteria->conn_handle != BLE_HS_CONN_HANDLE_NONE &&
   1bb56:	4293      	cmp	r3, r2
   1bb58:	d001      	beq.n	1bb5e <ble_gattc_proc_matches_conn_rx_entry+0x14>

        return 0;
   1bb5a:	2000      	movs	r0, #0
    /* Entry matches; indicate corresponding rx entry. */
    criteria->matching_rx_entry = ble_gattc_rx_entry_find(
        proc->op, criteria->rx_entries, criteria->num_rx_entries);

    return (criteria->matching_rx_entry != NULL);
}
   1bb5c:	4770      	bx	lr
{
   1bb5e:	b510      	push	{r4, lr}
   1bb60:	460c      	mov	r4, r1
    criteria->matching_rx_entry = ble_gattc_rx_entry_find(
   1bb62:	688a      	ldr	r2, [r1, #8]
   1bb64:	6849      	ldr	r1, [r1, #4]
   1bb66:	7a80      	ldrb	r0, [r0, #10]
   1bb68:	f7ff ffac 	bl	1bac4 <ble_gattc_rx_entry_find>
   1bb6c:	60e0      	str	r0, [r4, #12]
    return (criteria->matching_rx_entry != NULL);
   1bb6e:	3000      	adds	r0, #0
   1bb70:	bf18      	it	ne
   1bb72:	2001      	movne	r0, #1
}
   1bb74:	bd10      	pop	{r4, pc}

0001bb76 <ble_gattc_proc_matches_stalled>:
}

static int
ble_gattc_proc_matches_stalled(struct ble_gattc_proc *proc, void *unused)
{
    return proc->flags & BLE_GATTC_PROC_F_STALLED;
   1bb76:	7ac0      	ldrb	r0, [r0, #11]
}
   1bb78:	f000 0001 	and.w	r0, r0, #1
   1bb7c:	4770      	bx	lr

0001bb7e <ble_gattc_proc_timeout>:
    return diff;
}

static void
ble_gattc_proc_timeout(struct ble_gattc_proc *proc)
{
   1bb7e:	b510      	push	{r4, lr}
   1bb80:	4604      	mov	r4, r0
    ble_gattc_tmo_fn *cb;

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    cb = ble_gattc_tmo_dispatch_get(proc->op);
   1bb82:	7a80      	ldrb	r0, [r0, #10]
   1bb84:	f7ff ffba 	bl	1bafc <ble_gattc_tmo_dispatch_get>
    if (cb != NULL) {
   1bb88:	b110      	cbz	r0, 1bb90 <ble_gattc_proc_timeout+0x12>
   1bb8a:	4603      	mov	r3, r0
        cb(proc);
   1bb8c:	4620      	mov	r0, r4
   1bb8e:	4798      	blx	r3
    }
}
   1bb90:	bd10      	pop	{r4, pc}
	...

0001bb94 <ble_gattc_error>:
ble_gattc_error(int status, uint16_t att_handle)
{
    static struct ble_gatt_error error;

    /* For consistency, always indicate a handle of 0 on success. */
    if (status == 0 || status == BLE_HS_EDONE) {
   1bb94:	4603      	mov	r3, r0
   1bb96:	b118      	cbz	r0, 1bba0 <ble_gattc_error+0xc>
   1bb98:	280e      	cmp	r0, #14
   1bb9a:	d102      	bne.n	1bba2 <ble_gattc_error+0xe>
        att_handle = 0;
   1bb9c:	2100      	movs	r1, #0
   1bb9e:	e000      	b.n	1bba2 <ble_gattc_error+0xe>
   1bba0:	2100      	movs	r1, #0
    }

    error.status = status;
   1bba2:	4802      	ldr	r0, [pc, #8]	; (1bbac <ble_gattc_error+0x18>)
   1bba4:	8003      	strh	r3, [r0, #0]
    error.att_handle = att_handle;
   1bba6:	8041      	strh	r1, [r0, #2]
    return &error;
}
   1bba8:	4770      	bx	lr
   1bbaa:	bf00      	nop
   1bbac:	20002c3c 	.word	0x20002c3c

0001bbb0 <ble_gattc_mtu_cb>:
 *                                  is no callback).
 */
static int
ble_gattc_mtu_cb(struct ble_gattc_proc *proc, int status, uint16_t att_handle,
                 uint16_t mtu)
{
   1bbb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    int rc;

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status != 0 && status != BLE_HS_EDONE) {
   1bbb4:	460c      	mov	r4, r1
   1bbb6:	b129      	cbz	r1, 1bbc4 <ble_gattc_mtu_cb+0x14>
   1bbb8:	290e      	cmp	r1, #14
   1bbba:	d003      	beq.n	1bbc4 <ble_gattc_mtu_cb+0x14>
        STATS_INC(ble_gattc_stats, mtu_fail);
   1bbbc:	4d0b      	ldr	r5, [pc, #44]	; (1bbec <ble_gattc_mtu_cb+0x3c>)
   1bbbe:	6929      	ldr	r1, [r5, #16]
   1bbc0:	3101      	adds	r1, #1
   1bbc2:	6129      	str	r1, [r5, #16]
    }

    if (proc->mtu.cb == NULL) {
   1bbc4:	68c7      	ldr	r7, [r0, #12]
   1bbc6:	b17f      	cbz	r7, 1bbe8 <ble_gattc_mtu_cb+0x38>
   1bbc8:	4625      	mov	r5, r4
   1bbca:	461e      	mov	r6, r3
   1bbcc:	4611      	mov	r1, r2
   1bbce:	4604      	mov	r4, r0
        rc = 0;
    } else {
        rc = proc->mtu.cb(proc->conn_handle,
   1bbd0:	f8b0 8008 	ldrh.w	r8, [r0, #8]
                          ble_gattc_error(status, att_handle),
   1bbd4:	4628      	mov	r0, r5
   1bbd6:	f7ff ffdd 	bl	1bb94 <ble_gattc_error>
        rc = proc->mtu.cb(proc->conn_handle,
   1bbda:	6923      	ldr	r3, [r4, #16]
   1bbdc:	4632      	mov	r2, r6
   1bbde:	4601      	mov	r1, r0
   1bbe0:	4640      	mov	r0, r8
   1bbe2:	47b8      	blx	r7
                          mtu, proc->mtu.cb_arg);
    }

    return rc;
}
   1bbe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = 0;
   1bbe8:	2000      	movs	r0, #0
    return rc;
   1bbea:	e7fb      	b.n	1bbe4 <ble_gattc_mtu_cb+0x34>
   1bbec:	20004528 	.word	0x20004528

0001bbf0 <ble_gattc_mtu_tmo>:

static void
ble_gattc_mtu_tmo(struct ble_gattc_proc *proc)
{
   1bbf0:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_mtu_cb(proc, BLE_HS_ETIMEOUT, 0, 0);
   1bbf2:	2300      	movs	r3, #0
   1bbf4:	461a      	mov	r2, r3
   1bbf6:	210d      	movs	r1, #13
   1bbf8:	f7ff ffda 	bl	1bbb0 <ble_gattc_mtu_cb>
}
   1bbfc:	bd08      	pop	{r3, pc}

0001bbfe <ble_gattc_mtu_err>:
/**
 * Handles an incoming ATT error response for the specified mtu-exchange proc.
 */
static void
ble_gattc_mtu_err(struct ble_gattc_proc *proc, int status, uint16_t att_handle)
{
   1bbfe:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);
    ble_gattc_mtu_cb(proc, status, att_handle, 0);
   1bc00:	2300      	movs	r3, #0
   1bc02:	f7ff ffd5 	bl	1bbb0 <ble_gattc_mtu_cb>
}
   1bc06:	bd08      	pop	{r3, pc}

0001bc08 <ble_gattc_disc_all_svcs_cb>:
 */
static int
ble_gattc_disc_all_svcs_cb(struct ble_gattc_proc *proc,
                           uint16_t status, uint16_t att_handle,
                           struct ble_gatt_svc *service)
{
   1bc08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    BLE_HS_DBG_ASSERT(service != NULL || status != 0);
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status != 0 && status != BLE_HS_EDONE) {
   1bc0c:	460c      	mov	r4, r1
   1bc0e:	b129      	cbz	r1, 1bc1c <ble_gattc_disc_all_svcs_cb+0x14>
   1bc10:	290e      	cmp	r1, #14
   1bc12:	d003      	beq.n	1bc1c <ble_gattc_disc_all_svcs_cb+0x14>
        STATS_INC(ble_gattc_stats, disc_all_svcs_fail);
   1bc14:	4d0b      	ldr	r5, [pc, #44]	; (1bc44 <ble_gattc_disc_all_svcs_cb+0x3c>)
   1bc16:	69a9      	ldr	r1, [r5, #24]
   1bc18:	3101      	adds	r1, #1
   1bc1a:	61a9      	str	r1, [r5, #24]
    }

    if (proc->disc_all_svcs.cb == NULL) {
   1bc1c:	6907      	ldr	r7, [r0, #16]
   1bc1e:	b17f      	cbz	r7, 1bc40 <ble_gattc_disc_all_svcs_cb+0x38>
   1bc20:	4625      	mov	r5, r4
   1bc22:	461e      	mov	r6, r3
   1bc24:	4611      	mov	r1, r2
   1bc26:	4604      	mov	r4, r0
        rc = 0;
    } else {
        rc = proc->disc_all_svcs.cb(proc->conn_handle,
   1bc28:	f8b0 8008 	ldrh.w	r8, [r0, #8]
                                    ble_gattc_error(status, att_handle),
   1bc2c:	4628      	mov	r0, r5
   1bc2e:	f7ff ffb1 	bl	1bb94 <ble_gattc_error>
        rc = proc->disc_all_svcs.cb(proc->conn_handle,
   1bc32:	6963      	ldr	r3, [r4, #20]
   1bc34:	4632      	mov	r2, r6
   1bc36:	4601      	mov	r1, r0
   1bc38:	4640      	mov	r0, r8
   1bc3a:	47b8      	blx	r7
                                    service, proc->disc_all_svcs.cb_arg);
    }

    return rc;
}
   1bc3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = 0;
   1bc40:	2000      	movs	r0, #0
    return rc;
   1bc42:	e7fb      	b.n	1bc3c <ble_gattc_disc_all_svcs_cb+0x34>
   1bc44:	20004528 	.word	0x20004528

0001bc48 <ble_gattc_disc_all_svcs_tmo>:

static void
ble_gattc_disc_all_svcs_tmo(struct ble_gattc_proc *proc)
{
   1bc48:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_disc_all_svcs_cb(proc, BLE_HS_ETIMEOUT, 0, 0);
   1bc4a:	2300      	movs	r3, #0
   1bc4c:	461a      	mov	r2, r3
   1bc4e:	210d      	movs	r1, #13
   1bc50:	f7ff ffda 	bl	1bc08 <ble_gattc_disc_all_svcs_cb>
}
   1bc54:	bd08      	pop	{r3, pc}

0001bc56 <ble_gattc_disc_all_svcs_err>:
 * discover-all-services proc.
 */
static void
ble_gattc_disc_all_svcs_err(struct ble_gattc_proc *proc, int status,
                            uint16_t att_handle)
{
   1bc56:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status == BLE_HS_ATT_ERR(BLE_ATT_ERR_ATTR_NOT_FOUND)) {
   1bc58:	f5b1 7f85 	cmp.w	r1, #266	; 0x10a
   1bc5c:	d004      	beq.n	1bc68 <ble_gattc_disc_all_svcs_err+0x12>
        /* Discovery is complete. */
        status = BLE_HS_EDONE;
    }

    ble_gattc_disc_all_svcs_cb(proc, status, att_handle, NULL);
   1bc5e:	2300      	movs	r3, #0
   1bc60:	b289      	uxth	r1, r1
   1bc62:	f7ff ffd1 	bl	1bc08 <ble_gattc_disc_all_svcs_cb>
}
   1bc66:	bd08      	pop	{r3, pc}
        status = BLE_HS_EDONE;
   1bc68:	210e      	movs	r1, #14
   1bc6a:	e7f8      	b.n	1bc5e <ble_gattc_disc_all_svcs_err+0x8>

0001bc6c <ble_gattc_disc_svc_uuid_cb>:
 */
static int
ble_gattc_disc_svc_uuid_cb(struct ble_gattc_proc *proc, int status,
                           uint16_t att_handle,
                           struct ble_gatt_svc *service)
{
   1bc6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    BLE_HS_DBG_ASSERT(service != NULL || status != 0);
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status != 0 && status != BLE_HS_EDONE) {
   1bc70:	460c      	mov	r4, r1
   1bc72:	b129      	cbz	r1, 1bc80 <ble_gattc_disc_svc_uuid_cb+0x14>
   1bc74:	290e      	cmp	r1, #14
   1bc76:	d003      	beq.n	1bc80 <ble_gattc_disc_svc_uuid_cb+0x14>
        STATS_INC(ble_gattc_stats, disc_svc_uuid_fail);
   1bc78:	4d0b      	ldr	r5, [pc, #44]	; (1bca8 <ble_gattc_disc_svc_uuid_cb+0x3c>)
   1bc7a:	6a29      	ldr	r1, [r5, #32]
   1bc7c:	3101      	adds	r1, #1
   1bc7e:	6229      	str	r1, [r5, #32]
    }

    if (proc->disc_svc_uuid.cb == NULL) {
   1bc80:	6a47      	ldr	r7, [r0, #36]	; 0x24
   1bc82:	b17f      	cbz	r7, 1bca4 <ble_gattc_disc_svc_uuid_cb+0x38>
   1bc84:	4625      	mov	r5, r4
   1bc86:	461e      	mov	r6, r3
   1bc88:	4611      	mov	r1, r2
   1bc8a:	4604      	mov	r4, r0
        rc = 0;
    } else {
        rc = proc->disc_svc_uuid.cb(proc->conn_handle,
   1bc8c:	f8b0 8008 	ldrh.w	r8, [r0, #8]
                                    ble_gattc_error(status, att_handle),
   1bc90:	4628      	mov	r0, r5
   1bc92:	f7ff ff7f 	bl	1bb94 <ble_gattc_error>
        rc = proc->disc_svc_uuid.cb(proc->conn_handle,
   1bc96:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1bc98:	4632      	mov	r2, r6
   1bc9a:	4601      	mov	r1, r0
   1bc9c:	4640      	mov	r0, r8
   1bc9e:	47b8      	blx	r7
                                    service, proc->disc_svc_uuid.cb_arg);
    }

    return rc;
}
   1bca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = 0;
   1bca4:	2000      	movs	r0, #0
    return rc;
   1bca6:	e7fb      	b.n	1bca0 <ble_gattc_disc_svc_uuid_cb+0x34>
   1bca8:	20004528 	.word	0x20004528

0001bcac <ble_gattc_disc_svc_uuid_tmo>:

static void
ble_gattc_disc_svc_uuid_tmo(struct ble_gattc_proc *proc)
{
   1bcac:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_disc_svc_uuid_cb(proc, BLE_HS_ETIMEOUT, 0, 0);
   1bcae:	2300      	movs	r3, #0
   1bcb0:	461a      	mov	r2, r3
   1bcb2:	210d      	movs	r1, #13
   1bcb4:	f7ff ffda 	bl	1bc6c <ble_gattc_disc_svc_uuid_cb>
}
   1bcb8:	bd08      	pop	{r3, pc}

0001bcba <ble_gattc_disc_svc_uuid_err>:
 * discover-service-by-uuid proc.
 */
static void
ble_gattc_disc_svc_uuid_err(struct ble_gattc_proc *proc, int status,
                            uint16_t att_handle)
{
   1bcba:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status == BLE_HS_ATT_ERR(BLE_ATT_ERR_ATTR_NOT_FOUND)) {
   1bcbc:	f5b1 7f85 	cmp.w	r1, #266	; 0x10a
   1bcc0:	d003      	beq.n	1bcca <ble_gattc_disc_svc_uuid_err+0x10>
        /* Discovery is complete. */
        status = BLE_HS_EDONE;
    }

    ble_gattc_disc_svc_uuid_cb(proc, status, att_handle, NULL);
   1bcc2:	2300      	movs	r3, #0
   1bcc4:	f7ff ffd2 	bl	1bc6c <ble_gattc_disc_svc_uuid_cb>
}
   1bcc8:	bd08      	pop	{r3, pc}
        status = BLE_HS_EDONE;
   1bcca:	210e      	movs	r1, #14
   1bccc:	e7f9      	b.n	1bcc2 <ble_gattc_disc_svc_uuid_err+0x8>

0001bcce <ble_gattc_disc_svc_uuid_rx_hinfo>:
 * the specified discover-service-by-uuid proc.
 */
static int
ble_gattc_disc_svc_uuid_rx_hinfo(struct ble_gattc_proc *proc,
                                 struct ble_att_find_type_value_hinfo *hinfo)
{
   1bcce:	b570      	push	{r4, r5, r6, lr}
   1bcd0:	b086      	sub	sp, #24
   1bcd2:	4604      	mov	r4, r0
    int cbrc;
    int rc;

    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (hinfo->group_end_handle <= proc->disc_svc_uuid.prev_handle) {
   1bcd4:	884b      	ldrh	r3, [r1, #2]
   1bcd6:	8c02      	ldrh	r2, [r0, #32]
   1bcd8:	4293      	cmp	r3, r2
   1bcda:	d918      	bls.n	1bd0e <ble_gattc_disc_svc_uuid_rx_hinfo+0x40>
        /* Peer sent services out of order; terminate procedure. */
        rc = BLE_HS_EBADDATA;
        goto done;
    }

    proc->disc_svc_uuid.prev_handle = hinfo->group_end_handle;
   1bcdc:	8403      	strh	r3, [r0, #32]

    service.start_handle = hinfo->attr_handle;
   1bcde:	880b      	ldrh	r3, [r1, #0]
   1bce0:	f8ad 3000 	strh.w	r3, [sp]
    service.end_handle = hinfo->group_end_handle;
   1bce4:	884b      	ldrh	r3, [r1, #2]
   1bce6:	f8ad 3002 	strh.w	r3, [sp, #2]
    service.uuid = proc->disc_svc_uuid.service_uuid;
   1bcea:	ad01      	add	r5, sp, #4
   1bcec:	f100 060c 	add.w	r6, r0, #12
   1bcf0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1bcf2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1bcf4:	6833      	ldr	r3, [r6, #0]
   1bcf6:	602b      	str	r3, [r5, #0]

    rc = 0;
   1bcf8:	2500      	movs	r5, #0

done:
    cbrc = ble_gattc_disc_svc_uuid_cb(proc, rc, 0, &service);
   1bcfa:	466b      	mov	r3, sp
   1bcfc:	2200      	movs	r2, #0
   1bcfe:	4629      	mov	r1, r5
   1bd00:	4620      	mov	r0, r4
   1bd02:	f7ff ffb3 	bl	1bc6c <ble_gattc_disc_svc_uuid_cb>
    if (rc != 0 || cbrc != 0) {
   1bd06:	b935      	cbnz	r5, 1bd16 <ble_gattc_disc_svc_uuid_rx_hinfo+0x48>
   1bd08:	b918      	cbnz	r0, 1bd12 <ble_gattc_disc_svc_uuid_rx_hinfo+0x44>
        return BLE_HS_EDONE;
    } else {
        return 0;
    }
}
   1bd0a:	b006      	add	sp, #24
   1bd0c:	bd70      	pop	{r4, r5, r6, pc}
        rc = BLE_HS_EBADDATA;
   1bd0e:	250a      	movs	r5, #10
   1bd10:	e7f3      	b.n	1bcfa <ble_gattc_disc_svc_uuid_rx_hinfo+0x2c>
        return BLE_HS_EDONE;
   1bd12:	200e      	movs	r0, #14
   1bd14:	e7f9      	b.n	1bd0a <ble_gattc_disc_svc_uuid_rx_hinfo+0x3c>
   1bd16:	200e      	movs	r0, #14
   1bd18:	e7f7      	b.n	1bd0a <ble_gattc_disc_svc_uuid_rx_hinfo+0x3c>
	...

0001bd1c <ble_gattc_find_inc_svcs_cb>:
 */
static int
ble_gattc_find_inc_svcs_cb(struct ble_gattc_proc *proc, int status,
                           uint16_t att_handle,
                           struct ble_gatt_svc *service)
{
   1bd1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    BLE_HS_DBG_ASSERT(service != NULL || status != 0);
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status != 0 && status != BLE_HS_EDONE) {
   1bd20:	460c      	mov	r4, r1
   1bd22:	b129      	cbz	r1, 1bd30 <ble_gattc_find_inc_svcs_cb+0x14>
   1bd24:	290e      	cmp	r1, #14
   1bd26:	d003      	beq.n	1bd30 <ble_gattc_find_inc_svcs_cb+0x14>
        STATS_INC(ble_gattc_stats, find_inc_svcs_fail);
   1bd28:	4d0b      	ldr	r5, [pc, #44]	; (1bd58 <ble_gattc_find_inc_svcs_cb+0x3c>)
   1bd2a:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   1bd2c:	3101      	adds	r1, #1
   1bd2e:	62a9      	str	r1, [r5, #40]	; 0x28
    }

    if (proc->find_inc_svcs.cb == NULL) {
   1bd30:	6947      	ldr	r7, [r0, #20]
   1bd32:	b17f      	cbz	r7, 1bd54 <ble_gattc_find_inc_svcs_cb+0x38>
   1bd34:	4625      	mov	r5, r4
   1bd36:	461e      	mov	r6, r3
   1bd38:	4611      	mov	r1, r2
   1bd3a:	4604      	mov	r4, r0
        rc = 0;
    } else {
        rc = proc->find_inc_svcs.cb(proc->conn_handle,
   1bd3c:	f8b0 8008 	ldrh.w	r8, [r0, #8]
                                    ble_gattc_error(status, att_handle),
   1bd40:	4628      	mov	r0, r5
   1bd42:	f7ff ff27 	bl	1bb94 <ble_gattc_error>
        rc = proc->find_inc_svcs.cb(proc->conn_handle,
   1bd46:	69a3      	ldr	r3, [r4, #24]
   1bd48:	4632      	mov	r2, r6
   1bd4a:	4601      	mov	r1, r0
   1bd4c:	4640      	mov	r0, r8
   1bd4e:	47b8      	blx	r7
                                    service, proc->find_inc_svcs.cb_arg);
    }

    return rc;
}
   1bd50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = 0;
   1bd54:	2000      	movs	r0, #0
    return rc;
   1bd56:	e7fb      	b.n	1bd50 <ble_gattc_find_inc_svcs_cb+0x34>
   1bd58:	20004528 	.word	0x20004528

0001bd5c <ble_gattc_find_inc_svcs_tmo>:

static void
ble_gattc_find_inc_svcs_tmo(struct ble_gattc_proc *proc)
{
   1bd5c:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_find_inc_svcs_cb(proc, BLE_HS_ETIMEOUT, 0, 0);
   1bd5e:	2300      	movs	r3, #0
   1bd60:	461a      	mov	r2, r3
   1bd62:	210d      	movs	r1, #13
   1bd64:	f7ff ffda 	bl	1bd1c <ble_gattc_find_inc_svcs_cb>
}
   1bd68:	bd08      	pop	{r3, pc}

0001bd6a <ble_gattc_find_inc_svcs_err>:
 * find-included-services proc.
 */
static void
ble_gattc_find_inc_svcs_err(struct ble_gattc_proc *proc, int status,
                            uint16_t att_handle)
{
   1bd6a:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (proc->find_inc_svcs.cur_start == 0 &&
   1bd6c:	8a03      	ldrh	r3, [r0, #16]
   1bd6e:	b913      	cbnz	r3, 1bd76 <ble_gattc_find_inc_svcs_err+0xc>
   1bd70:	f5b1 7f85 	cmp.w	r1, #266	; 0x10a
   1bd74:	d003      	beq.n	1bd7e <ble_gattc_find_inc_svcs_err+0x14>

        /* Discovery is complete. */
        status = BLE_HS_EDONE;
    }

    ble_gattc_find_inc_svcs_cb(proc, status, att_handle, NULL);
   1bd76:	2300      	movs	r3, #0
   1bd78:	f7ff ffd0 	bl	1bd1c <ble_gattc_find_inc_svcs_cb>
}
   1bd7c:	bd08      	pop	{r3, pc}
        status = BLE_HS_EDONE;
   1bd7e:	210e      	movs	r1, #14
   1bd80:	e7f9      	b.n	1bd76 <ble_gattc_find_inc_svcs_err+0xc>
	...

0001bd84 <ble_gattc_disc_all_chrs_cb>:
 *                                  is no callback).
 */
static int
ble_gattc_disc_all_chrs_cb(struct ble_gattc_proc *proc, int status,
                           uint16_t att_handle, struct ble_gatt_chr *chr)
{
   1bd84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    BLE_HS_DBG_ASSERT(chr != NULL || status != 0);
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status != 0 && status != BLE_HS_EDONE) {
   1bd88:	460c      	mov	r4, r1
   1bd8a:	b129      	cbz	r1, 1bd98 <ble_gattc_disc_all_chrs_cb+0x14>
   1bd8c:	290e      	cmp	r1, #14
   1bd8e:	d003      	beq.n	1bd98 <ble_gattc_disc_all_chrs_cb+0x14>
        STATS_INC(ble_gattc_stats, disc_all_chrs_fail);
   1bd90:	4d0b      	ldr	r5, [pc, #44]	; (1bdc0 <ble_gattc_disc_all_chrs_cb+0x3c>)
   1bd92:	6b29      	ldr	r1, [r5, #48]	; 0x30
   1bd94:	3101      	adds	r1, #1
   1bd96:	6329      	str	r1, [r5, #48]	; 0x30
    }

    if (proc->disc_all_chrs.cb == NULL) {
   1bd98:	6907      	ldr	r7, [r0, #16]
   1bd9a:	b17f      	cbz	r7, 1bdbc <ble_gattc_disc_all_chrs_cb+0x38>
   1bd9c:	4625      	mov	r5, r4
   1bd9e:	461e      	mov	r6, r3
   1bda0:	4611      	mov	r1, r2
   1bda2:	4604      	mov	r4, r0
        rc = 0;
    } else {
        rc = proc->disc_all_chrs.cb(proc->conn_handle,
   1bda4:	f8b0 8008 	ldrh.w	r8, [r0, #8]
                                    ble_gattc_error(status, att_handle), chr,
   1bda8:	4628      	mov	r0, r5
   1bdaa:	f7ff fef3 	bl	1bb94 <ble_gattc_error>
        rc = proc->disc_all_chrs.cb(proc->conn_handle,
   1bdae:	6963      	ldr	r3, [r4, #20]
   1bdb0:	4632      	mov	r2, r6
   1bdb2:	4601      	mov	r1, r0
   1bdb4:	4640      	mov	r0, r8
   1bdb6:	47b8      	blx	r7
                                    proc->disc_all_chrs.cb_arg);
    }

    return rc;
}
   1bdb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = 0;
   1bdbc:	2000      	movs	r0, #0
    return rc;
   1bdbe:	e7fb      	b.n	1bdb8 <ble_gattc_disc_all_chrs_cb+0x34>
   1bdc0:	20004528 	.word	0x20004528

0001bdc4 <ble_gattc_disc_all_chrs_tmo>:

static void
ble_gattc_disc_all_chrs_tmo(struct ble_gattc_proc *proc)
{
   1bdc4:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_disc_all_chrs_cb(proc, BLE_HS_ETIMEOUT, 0, NULL);
   1bdc6:	2300      	movs	r3, #0
   1bdc8:	461a      	mov	r2, r3
   1bdca:	210d      	movs	r1, #13
   1bdcc:	f7ff ffda 	bl	1bd84 <ble_gattc_disc_all_chrs_cb>
}
   1bdd0:	bd08      	pop	{r3, pc}

0001bdd2 <ble_gattc_disc_all_chrs_err>:
 * discover-all-characteristics proc.
 */
static void
ble_gattc_disc_all_chrs_err(struct ble_gattc_proc *proc, int status,
                            uint16_t att_handle)
{
   1bdd2:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status == BLE_HS_ATT_ERR(BLE_ATT_ERR_ATTR_NOT_FOUND)) {
   1bdd4:	f5b1 7f85 	cmp.w	r1, #266	; 0x10a
   1bdd8:	d003      	beq.n	1bde2 <ble_gattc_disc_all_chrs_err+0x10>
        /* Discovery is complete. */
        status = BLE_HS_EDONE;
    }

    ble_gattc_disc_all_chrs_cb(proc, status, att_handle, NULL);
   1bdda:	2300      	movs	r3, #0
   1bddc:	f7ff ffd2 	bl	1bd84 <ble_gattc_disc_all_chrs_cb>
}
   1bde0:	bd08      	pop	{r3, pc}
        status = BLE_HS_EDONE;
   1bde2:	210e      	movs	r1, #14
   1bde4:	e7f9      	b.n	1bdda <ble_gattc_disc_all_chrs_err+0x8>
	...

0001bde8 <ble_gattc_disc_chr_uuid_cb>:
 *                                  is no callback).
 */
static int
ble_gattc_disc_chr_uuid_cb(struct ble_gattc_proc *proc, int status,
                           uint16_t att_handle, struct ble_gatt_chr *chr)
{
   1bde8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    BLE_HS_DBG_ASSERT(chr != NULL || status != 0);
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status != 0 && status != BLE_HS_EDONE) {
   1bdec:	460c      	mov	r4, r1
   1bdee:	b129      	cbz	r1, 1bdfc <ble_gattc_disc_chr_uuid_cb+0x14>
   1bdf0:	290e      	cmp	r1, #14
   1bdf2:	d003      	beq.n	1bdfc <ble_gattc_disc_chr_uuid_cb+0x14>
        STATS_INC(ble_gattc_stats, disc_chrs_uuid_fail);
   1bdf4:	4d0b      	ldr	r5, [pc, #44]	; (1be24 <ble_gattc_disc_chr_uuid_cb+0x3c>)
   1bdf6:	6ba9      	ldr	r1, [r5, #56]	; 0x38
   1bdf8:	3101      	adds	r1, #1
   1bdfa:	63a9      	str	r1, [r5, #56]	; 0x38
    }

    if (proc->disc_chr_uuid.cb == NULL) {
   1bdfc:	6a47      	ldr	r7, [r0, #36]	; 0x24
   1bdfe:	b17f      	cbz	r7, 1be20 <ble_gattc_disc_chr_uuid_cb+0x38>
   1be00:	4625      	mov	r5, r4
   1be02:	461e      	mov	r6, r3
   1be04:	4611      	mov	r1, r2
   1be06:	4604      	mov	r4, r0
        rc = 0;
    } else {
        rc = proc->disc_chr_uuid.cb(proc->conn_handle,
   1be08:	f8b0 8008 	ldrh.w	r8, [r0, #8]
                                    ble_gattc_error(status, att_handle), chr,
   1be0c:	4628      	mov	r0, r5
   1be0e:	f7ff fec1 	bl	1bb94 <ble_gattc_error>
        rc = proc->disc_chr_uuid.cb(proc->conn_handle,
   1be12:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1be14:	4632      	mov	r2, r6
   1be16:	4601      	mov	r1, r0
   1be18:	4640      	mov	r0, r8
   1be1a:	47b8      	blx	r7
                                    proc->disc_chr_uuid.cb_arg);
    }

    return rc;
}
   1be1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = 0;
   1be20:	2000      	movs	r0, #0
    return rc;
   1be22:	e7fb      	b.n	1be1c <ble_gattc_disc_chr_uuid_cb+0x34>
   1be24:	20004528 	.word	0x20004528

0001be28 <ble_gattc_disc_chr_uuid_tmo>:

static void
ble_gattc_disc_chr_uuid_tmo(struct ble_gattc_proc *proc)
{
   1be28:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_disc_chr_uuid_cb(proc, BLE_HS_ETIMEOUT, 0, NULL);
   1be2a:	2300      	movs	r3, #0
   1be2c:	461a      	mov	r2, r3
   1be2e:	210d      	movs	r1, #13
   1be30:	f7ff ffda 	bl	1bde8 <ble_gattc_disc_chr_uuid_cb>
}
   1be34:	bd08      	pop	{r3, pc}

0001be36 <ble_gattc_disc_chr_uuid_err>:
 * discover-characteristic-by-uuid proc.
 */
static void
ble_gattc_disc_chr_uuid_err(struct ble_gattc_proc *proc, int status,
                            uint16_t att_handle)
{
   1be36:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status == BLE_HS_ATT_ERR(BLE_ATT_ERR_ATTR_NOT_FOUND)) {
   1be38:	f5b1 7f85 	cmp.w	r1, #266	; 0x10a
   1be3c:	d003      	beq.n	1be46 <ble_gattc_disc_chr_uuid_err+0x10>
        /* Discovery is complete. */
        status = BLE_HS_EDONE;
    }

    ble_gattc_disc_chr_uuid_cb(proc, status, att_handle, NULL);
   1be3e:	2300      	movs	r3, #0
   1be40:	f7ff ffd2 	bl	1bde8 <ble_gattc_disc_chr_uuid_cb>
}
   1be44:	bd08      	pop	{r3, pc}
        status = BLE_HS_EDONE;
   1be46:	210e      	movs	r1, #14
   1be48:	e7f9      	b.n	1be3e <ble_gattc_disc_chr_uuid_err+0x8>
	...

0001be4c <ble_gattc_disc_all_dscs_cb>:
 *                                  is no callback).
 */
static int
ble_gattc_disc_all_dscs_cb(struct ble_gattc_proc *proc, int status,
                           uint16_t att_handle, struct ble_gatt_dsc *dsc)
{
   1be4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1be50:	b082      	sub	sp, #8

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    BLE_HS_DBG_ASSERT(dsc != NULL || status != 0);
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status != 0 && status != BLE_HS_EDONE) {
   1be52:	460c      	mov	r4, r1
   1be54:	b129      	cbz	r1, 1be62 <ble_gattc_disc_all_dscs_cb+0x16>
   1be56:	290e      	cmp	r1, #14
   1be58:	d003      	beq.n	1be62 <ble_gattc_disc_all_dscs_cb+0x16>
        STATS_INC(ble_gattc_stats, disc_all_dscs_fail);
   1be5a:	4d0d      	ldr	r5, [pc, #52]	; (1be90 <ble_gattc_disc_all_dscs_cb+0x44>)
   1be5c:	6c29      	ldr	r1, [r5, #64]	; 0x40
   1be5e:	3101      	adds	r1, #1
   1be60:	6429      	str	r1, [r5, #64]	; 0x40
    }

    if (proc->disc_all_dscs.cb == NULL) {
   1be62:	6946      	ldr	r6, [r0, #20]
   1be64:	b196      	cbz	r6, 1be8c <ble_gattc_disc_all_dscs_cb+0x40>
   1be66:	4625      	mov	r5, r4
   1be68:	461f      	mov	r7, r3
   1be6a:	4611      	mov	r1, r2
   1be6c:	4604      	mov	r4, r0
        rc = 0;
    } else {
        rc = proc->disc_all_dscs.cb(proc->conn_handle,
   1be6e:	f8b0 8008 	ldrh.w	r8, [r0, #8]
                                    ble_gattc_error(status, att_handle),
   1be72:	4628      	mov	r0, r5
   1be74:	f7ff fe8e 	bl	1bb94 <ble_gattc_error>
        rc = proc->disc_all_dscs.cb(proc->conn_handle,
   1be78:	89a2      	ldrh	r2, [r4, #12]
   1be7a:	69a3      	ldr	r3, [r4, #24]
   1be7c:	9300      	str	r3, [sp, #0]
   1be7e:	463b      	mov	r3, r7
   1be80:	4601      	mov	r1, r0
   1be82:	4640      	mov	r0, r8
   1be84:	47b0      	blx	r6
                                    proc->disc_all_dscs.chr_val_handle,
                                    dsc, proc->disc_all_dscs.cb_arg);
    }

    return rc;
}
   1be86:	b002      	add	sp, #8
   1be88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = 0;
   1be8c:	2000      	movs	r0, #0
    return rc;
   1be8e:	e7fa      	b.n	1be86 <ble_gattc_disc_all_dscs_cb+0x3a>
   1be90:	20004528 	.word	0x20004528

0001be94 <ble_gattc_disc_all_dscs_tmo>:

static void
ble_gattc_disc_all_dscs_tmo(struct ble_gattc_proc *proc)
{
   1be94:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_disc_all_dscs_cb(proc, BLE_HS_ETIMEOUT, 0, NULL);
   1be96:	2300      	movs	r3, #0
   1be98:	461a      	mov	r2, r3
   1be9a:	210d      	movs	r1, #13
   1be9c:	f7ff ffd6 	bl	1be4c <ble_gattc_disc_all_dscs_cb>
}
   1bea0:	bd08      	pop	{r3, pc}

0001bea2 <ble_gattc_disc_all_dscs_err>:
 * discover-all-descriptors proc.
 */
static void
ble_gattc_disc_all_dscs_err(struct ble_gattc_proc *proc, int status,
                            uint16_t att_handle)
{
   1bea2:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status == BLE_HS_ATT_ERR(BLE_ATT_ERR_ATTR_NOT_FOUND)) {
   1bea4:	f5b1 7f85 	cmp.w	r1, #266	; 0x10a
   1bea8:	d003      	beq.n	1beb2 <ble_gattc_disc_all_dscs_err+0x10>
        /* Discovery is complete. */
        status = BLE_HS_EDONE;
    }

    ble_gattc_disc_all_dscs_cb(proc, status, att_handle, NULL);
   1beaa:	2300      	movs	r3, #0
   1beac:	f7ff ffce 	bl	1be4c <ble_gattc_disc_all_dscs_cb>
}
   1beb0:	bd08      	pop	{r3, pc}
        status = BLE_HS_EDONE;
   1beb2:	210e      	movs	r1, #14
   1beb4:	e7f9      	b.n	1beaa <ble_gattc_disc_all_dscs_err+0x8>

0001beb6 <ble_gattc_disc_all_dscs_rx_idata>:
 * response for the specified discover-all-descriptors proc.
 */
static int
ble_gattc_disc_all_dscs_rx_idata(struct ble_gattc_proc *proc,
                                 struct ble_att_find_info_idata *idata)
{
   1beb6:	b5f0      	push	{r4, r5, r6, r7, lr}
   1beb8:	b087      	sub	sp, #28
   1beba:	4606      	mov	r6, r0
    int cbrc;
    int rc;

    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (idata->attr_handle <= proc->disc_all_dscs.prev_handle) {
   1bebc:	880b      	ldrh	r3, [r1, #0]
   1bebe:	89c2      	ldrh	r2, [r0, #14]
   1bec0:	4293      	cmp	r3, r2
   1bec2:	d915      	bls.n	1bef0 <ble_gattc_disc_all_dscs_rx_idata+0x3a>
        /* Peer sent descriptors out of order; terminate procedure. */
        rc = BLE_HS_EBADDATA;
        goto done;
    }
    proc->disc_all_dscs.prev_handle = idata->attr_handle;
   1bec4:	81c3      	strh	r3, [r0, #14]

    rc = 0;
   1bec6:	2700      	movs	r7, #0

done:
    dsc.handle = idata->attr_handle;
   1bec8:	460c      	mov	r4, r1
   1beca:	f834 3b04 	ldrh.w	r3, [r4], #4
   1bece:	f8ad 3000 	strh.w	r3, [sp]
    dsc.uuid = idata->uuid;
   1bed2:	ad01      	add	r5, sp, #4
   1bed4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   1bed6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1bed8:	6823      	ldr	r3, [r4, #0]
   1beda:	602b      	str	r3, [r5, #0]

    cbrc = ble_gattc_disc_all_dscs_cb(proc, rc, 0, &dsc);
   1bedc:	466b      	mov	r3, sp
   1bede:	2200      	movs	r2, #0
   1bee0:	4639      	mov	r1, r7
   1bee2:	4630      	mov	r0, r6
   1bee4:	f7ff ffb2 	bl	1be4c <ble_gattc_disc_all_dscs_cb>
    if (rc != 0 || cbrc != 0) {
   1bee8:	b937      	cbnz	r7, 1bef8 <ble_gattc_disc_all_dscs_rx_idata+0x42>
   1beea:	b918      	cbnz	r0, 1bef4 <ble_gattc_disc_all_dscs_rx_idata+0x3e>
        return BLE_HS_EDONE;
    } else {
        return 0;
    }
}
   1beec:	b007      	add	sp, #28
   1beee:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rc = BLE_HS_EBADDATA;
   1bef0:	270a      	movs	r7, #10
   1bef2:	e7e9      	b.n	1bec8 <ble_gattc_disc_all_dscs_rx_idata+0x12>
        return BLE_HS_EDONE;
   1bef4:	200e      	movs	r0, #14
   1bef6:	e7f9      	b.n	1beec <ble_gattc_disc_all_dscs_rx_idata+0x36>
   1bef8:	200e      	movs	r0, #14
   1befa:	e7f7      	b.n	1beec <ble_gattc_disc_all_dscs_rx_idata+0x36>

0001befc <ble_gattc_read_cb>:
 *                                  is no callback).
 */
static int
ble_gattc_read_cb(struct ble_gattc_proc *proc, int status,
                  uint16_t att_handle, struct ble_gatt_attr *attr)
{
   1befc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    BLE_HS_DBG_ASSERT(attr != NULL || status != 0);
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status != 0 && status != BLE_HS_EDONE) {
   1bf00:	460c      	mov	r4, r1
   1bf02:	b129      	cbz	r1, 1bf10 <ble_gattc_read_cb+0x14>
   1bf04:	290e      	cmp	r1, #14
   1bf06:	d003      	beq.n	1bf10 <ble_gattc_read_cb+0x14>
        STATS_INC(ble_gattc_stats, read_fail);
   1bf08:	4d0b      	ldr	r5, [pc, #44]	; (1bf38 <ble_gattc_read_cb+0x3c>)
   1bf0a:	6ca9      	ldr	r1, [r5, #72]	; 0x48
   1bf0c:	3101      	adds	r1, #1
   1bf0e:	64a9      	str	r1, [r5, #72]	; 0x48
    }

    if (proc->read.cb == NULL) {
   1bf10:	6907      	ldr	r7, [r0, #16]
   1bf12:	b17f      	cbz	r7, 1bf34 <ble_gattc_read_cb+0x38>
   1bf14:	4625      	mov	r5, r4
   1bf16:	461e      	mov	r6, r3
   1bf18:	4611      	mov	r1, r2
   1bf1a:	4604      	mov	r4, r0
        rc = 0;
    } else {
        rc = proc->read.cb(proc->conn_handle,
   1bf1c:	f8b0 8008 	ldrh.w	r8, [r0, #8]
                           ble_gattc_error(status, att_handle), attr,
   1bf20:	4628      	mov	r0, r5
   1bf22:	f7ff fe37 	bl	1bb94 <ble_gattc_error>
        rc = proc->read.cb(proc->conn_handle,
   1bf26:	6963      	ldr	r3, [r4, #20]
   1bf28:	4632      	mov	r2, r6
   1bf2a:	4601      	mov	r1, r0
   1bf2c:	4640      	mov	r0, r8
   1bf2e:	47b8      	blx	r7
                           proc->read.cb_arg);
    }

    return rc;
}
   1bf30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = 0;
   1bf34:	2000      	movs	r0, #0
    return rc;
   1bf36:	e7fb      	b.n	1bf30 <ble_gattc_read_cb+0x34>
   1bf38:	20004528 	.word	0x20004528

0001bf3c <ble_gattc_read_tmo>:

static void
ble_gattc_read_tmo(struct ble_gattc_proc *proc)
{
   1bf3c:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_read_cb(proc, BLE_HS_ETIMEOUT, 0, NULL);
   1bf3e:	2300      	movs	r3, #0
   1bf40:	461a      	mov	r2, r3
   1bf42:	210d      	movs	r1, #13
   1bf44:	f7ff ffda 	bl	1befc <ble_gattc_read_cb>
}
   1bf48:	bd08      	pop	{r3, pc}

0001bf4a <ble_gattc_read_err>:
 * read-characteristic-value proc.
 */
static void
ble_gattc_read_err(struct ble_gattc_proc *proc, int status,
                   uint16_t att_handle)
{
   1bf4a:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);
    ble_gattc_read_cb(proc, status, att_handle, NULL);
   1bf4c:	2300      	movs	r3, #0
   1bf4e:	f7ff ffd5 	bl	1befc <ble_gattc_read_cb>
}
   1bf52:	bd08      	pop	{r3, pc}

0001bf54 <ble_gattc_read_rx_read_rsp>:
 * read-characteristic-value proc.
 */
static int
ble_gattc_read_rx_read_rsp(struct ble_gattc_proc *proc, int status,
                           struct os_mbuf **om)
{
   1bf54:	b510      	push	{r4, lr}
   1bf56:	b082      	sub	sp, #8
   1bf58:	4614      	mov	r4, r2
    struct ble_gatt_attr attr;

    ble_gattc_dbg_assert_proc_not_inserted(proc);

    attr.handle = proc->read.handle;
   1bf5a:	8983      	ldrh	r3, [r0, #12]
   1bf5c:	f8ad 3000 	strh.w	r3, [sp]
    attr.offset = 0;
   1bf60:	2200      	movs	r2, #0
   1bf62:	f8ad 2002 	strh.w	r2, [sp, #2]
    attr.om = *om;
   1bf66:	6823      	ldr	r3, [r4, #0]
   1bf68:	9301      	str	r3, [sp, #4]

    ble_gattc_read_cb(proc, status, 0, &attr);
   1bf6a:	466b      	mov	r3, sp
   1bf6c:	f7ff ffc6 	bl	1befc <ble_gattc_read_cb>

    /* Indicate to the caller whether the application consumed the mbuf. */
    *om = attr.om;
   1bf70:	9b01      	ldr	r3, [sp, #4]
   1bf72:	6023      	str	r3, [r4, #0]

    /* The read operation only has a single request / response exchange. */
    return BLE_HS_EDONE;
}
   1bf74:	200e      	movs	r0, #14
   1bf76:	b002      	add	sp, #8
   1bf78:	bd10      	pop	{r4, pc}
	...

0001bf7c <ble_gattc_read_uuid_cb>:
 *                                  is no callback).
 */
static int
ble_gattc_read_uuid_cb(struct ble_gattc_proc *proc, int status,
                       uint16_t att_handle, struct ble_gatt_attr *attr)
{
   1bf7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    BLE_HS_DBG_ASSERT(attr != NULL || status != 0);
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status != 0 && status != BLE_HS_EDONE) {
   1bf80:	460c      	mov	r4, r1
   1bf82:	b129      	cbz	r1, 1bf90 <ble_gattc_read_uuid_cb+0x14>
   1bf84:	290e      	cmp	r1, #14
   1bf86:	d003      	beq.n	1bf90 <ble_gattc_read_uuid_cb+0x14>
        STATS_INC(ble_gattc_stats, read_uuid_fail);
   1bf88:	4d0b      	ldr	r5, [pc, #44]	; (1bfb8 <ble_gattc_read_uuid_cb+0x3c>)
   1bf8a:	6d29      	ldr	r1, [r5, #80]	; 0x50
   1bf8c:	3101      	adds	r1, #1
   1bf8e:	6529      	str	r1, [r5, #80]	; 0x50
    }

    if (proc->read_uuid.cb == NULL) {
   1bf90:	6a47      	ldr	r7, [r0, #36]	; 0x24
   1bf92:	b17f      	cbz	r7, 1bfb4 <ble_gattc_read_uuid_cb+0x38>
   1bf94:	4625      	mov	r5, r4
   1bf96:	461e      	mov	r6, r3
   1bf98:	4611      	mov	r1, r2
   1bf9a:	4604      	mov	r4, r0
        rc = 0;
    } else {
        rc = proc->read_uuid.cb(proc->conn_handle,
   1bf9c:	f8b0 8008 	ldrh.w	r8, [r0, #8]
                                ble_gattc_error(status, att_handle), attr,
   1bfa0:	4628      	mov	r0, r5
   1bfa2:	f7ff fdf7 	bl	1bb94 <ble_gattc_error>
        rc = proc->read_uuid.cb(proc->conn_handle,
   1bfa6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1bfa8:	4632      	mov	r2, r6
   1bfaa:	4601      	mov	r1, r0
   1bfac:	4640      	mov	r0, r8
   1bfae:	47b8      	blx	r7
                                proc->read_uuid.cb_arg);
    }

    return rc;
}
   1bfb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = 0;
   1bfb4:	2000      	movs	r0, #0
    return rc;
   1bfb6:	e7fb      	b.n	1bfb0 <ble_gattc_read_uuid_cb+0x34>
   1bfb8:	20004528 	.word	0x20004528

0001bfbc <ble_gattc_read_uuid_tmo>:

static void
ble_gattc_read_uuid_tmo(struct ble_gattc_proc *proc)
{
   1bfbc:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_read_uuid_cb(proc, BLE_HS_ETIMEOUT, 0, NULL);
   1bfbe:	2300      	movs	r3, #0
   1bfc0:	461a      	mov	r2, r3
   1bfc2:	210d      	movs	r1, #13
   1bfc4:	f7ff ffda 	bl	1bf7c <ble_gattc_read_uuid_cb>
}
   1bfc8:	bd08      	pop	{r3, pc}

0001bfca <ble_gattc_read_uuid_err>:
 * read-using-characteristic-uuid proc.
 */
static void
ble_gattc_read_uuid_err(struct ble_gattc_proc *proc, int status,
                        uint16_t att_handle)
{
   1bfca:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_read_uuid_cb(proc, status, att_handle, NULL);
   1bfcc:	2300      	movs	r3, #0
   1bfce:	f7ff ffd5 	bl	1bf7c <ble_gattc_read_uuid_cb>
}
   1bfd2:	bd08      	pop	{r3, pc}

0001bfd4 <ble_gattc_read_uuid_rx_complete>:
 * Handles a notification that a read-by-type response has been fully
 * processed for the specified read-using-characteristic-uuid proc.
 */
static int
ble_gattc_read_uuid_rx_complete(struct ble_gattc_proc *proc, int status)
{
   1bfd4:	b510      	push	{r4, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status != 0) {
   1bfd6:	b931      	cbnz	r1, 1bfe6 <ble_gattc_read_uuid_rx_complete+0x12>
    }

    /* XXX: We may need to send a follow-up request to address the possibility
     * of multiple characteristics with identical UUIDs.
     */
    ble_gattc_read_uuid_cb(proc, BLE_HS_EDONE, 0, NULL);
   1bfd8:	2300      	movs	r3, #0
   1bfda:	461a      	mov	r2, r3
   1bfdc:	210e      	movs	r1, #14
   1bfde:	f7ff ffcd 	bl	1bf7c <ble_gattc_read_uuid_cb>
    return BLE_HS_EDONE;
}
   1bfe2:	200e      	movs	r0, #14
   1bfe4:	bd10      	pop	{r4, pc}
        ble_gattc_read_uuid_cb(proc, status, 0, NULL);
   1bfe6:	2300      	movs	r3, #0
   1bfe8:	461a      	mov	r2, r3
   1bfea:	f7ff ffc7 	bl	1bf7c <ble_gattc_read_uuid_cb>
        return BLE_HS_EDONE;
   1bfee:	e7f8      	b.n	1bfe2 <ble_gattc_read_uuid_rx_complete+0xe>

0001bff0 <ble_gattc_read_long_cb>:
 *                                  is no callback).
 */
static int
ble_gattc_read_long_cb(struct ble_gattc_proc *proc, int status,
                       uint16_t att_handle, struct ble_gatt_attr *attr)
{
   1bff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    BLE_HS_DBG_ASSERT(attr != NULL || status != 0);
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status != 0 && status != BLE_HS_EDONE) {
   1bff4:	460c      	mov	r4, r1
   1bff6:	b129      	cbz	r1, 1c004 <ble_gattc_read_long_cb+0x14>
   1bff8:	290e      	cmp	r1, #14
   1bffa:	d003      	beq.n	1c004 <ble_gattc_read_long_cb+0x14>
        STATS_INC(ble_gattc_stats, read_long_fail);
   1bffc:	4d0b      	ldr	r5, [pc, #44]	; (1c02c <ble_gattc_read_long_cb+0x3c>)
   1bffe:	6da9      	ldr	r1, [r5, #88]	; 0x58
   1c000:	3101      	adds	r1, #1
   1c002:	65a9      	str	r1, [r5, #88]	; 0x58
    }

    if (proc->read_long.cb == NULL) {
   1c004:	6907      	ldr	r7, [r0, #16]
   1c006:	b17f      	cbz	r7, 1c028 <ble_gattc_read_long_cb+0x38>
   1c008:	4625      	mov	r5, r4
   1c00a:	461e      	mov	r6, r3
   1c00c:	4611      	mov	r1, r2
   1c00e:	4604      	mov	r4, r0
        rc = 0;
    } else {
        rc = proc->read_long.cb(proc->conn_handle,
   1c010:	f8b0 8008 	ldrh.w	r8, [r0, #8]
                                ble_gattc_error(status, att_handle), attr,
   1c014:	4628      	mov	r0, r5
   1c016:	f7ff fdbd 	bl	1bb94 <ble_gattc_error>
        rc = proc->read_long.cb(proc->conn_handle,
   1c01a:	6963      	ldr	r3, [r4, #20]
   1c01c:	4632      	mov	r2, r6
   1c01e:	4601      	mov	r1, r0
   1c020:	4640      	mov	r0, r8
   1c022:	47b8      	blx	r7
                                proc->read_long.cb_arg);
    }

    return rc;
}
   1c024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = 0;
   1c028:	2000      	movs	r0, #0
    return rc;
   1c02a:	e7fb      	b.n	1c024 <ble_gattc_read_long_cb+0x34>
   1c02c:	20004528 	.word	0x20004528

0001c030 <ble_gattc_read_long_tmo>:

static void
ble_gattc_read_long_tmo(struct ble_gattc_proc *proc)
{
   1c030:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_read_long_cb(proc, BLE_HS_ETIMEOUT, 0, NULL);
   1c032:	2300      	movs	r3, #0
   1c034:	461a      	mov	r2, r3
   1c036:	210d      	movs	r1, #13
   1c038:	f7ff ffda 	bl	1bff0 <ble_gattc_read_long_cb>
}
   1c03c:	bd08      	pop	{r3, pc}

0001c03e <ble_gattc_read_long_err>:
 * read-long-characteristic proc.
 */
static void
ble_gattc_read_long_err(struct ble_gattc_proc *proc, int status,
                        uint16_t att_handle)
{
   1c03e:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);
    ble_gattc_read_long_cb(proc, status, att_handle, NULL);
   1c040:	2300      	movs	r3, #0
   1c042:	f7ff ffd5 	bl	1bff0 <ble_gattc_read_long_cb>
}
   1c046:	bd08      	pop	{r3, pc}

0001c048 <ble_gattc_read_mult_cb>:
 *                                  is no callback).
 */
static int
ble_gattc_read_mult_cb(struct ble_gattc_proc *proc, int status,
                       uint16_t att_handle, struct os_mbuf **om)
{
   1c048:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c04a:	b083      	sub	sp, #12
   1c04c:	4605      	mov	r5, r0
   1c04e:	461c      	mov	r4, r3

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    BLE_HS_DBG_ASSERT(om != NULL || status != 0);
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status != 0 && status != BLE_HS_EDONE) {
   1c050:	4608      	mov	r0, r1
   1c052:	b129      	cbz	r1, 1c060 <ble_gattc_read_mult_cb+0x18>
   1c054:	290e      	cmp	r1, #14
   1c056:	d003      	beq.n	1c060 <ble_gattc_read_mult_cb+0x18>
        STATS_INC(ble_gattc_stats, read_mult_fail);
   1c058:	490f      	ldr	r1, [pc, #60]	; (1c098 <ble_gattc_read_mult_cb+0x50>)
   1c05a:	6e0b      	ldr	r3, [r1, #96]	; 0x60
   1c05c:	3301      	adds	r3, #1
   1c05e:	660b      	str	r3, [r1, #96]	; 0x60
    }

    attr.handle = 0;
   1c060:	2300      	movs	r3, #0
   1c062:	f8ad 3000 	strh.w	r3, [sp]
    attr.offset = 0;
   1c066:	f8ad 3002 	strh.w	r3, [sp, #2]
    if (om == NULL) {
   1c06a:	b18c      	cbz	r4, 1c090 <ble_gattc_read_mult_cb+0x48>
        attr.om = NULL;
    } else {
        attr.om = *om;
   1c06c:	6823      	ldr	r3, [r4, #0]
   1c06e:	9301      	str	r3, [sp, #4]
    }

    if (proc->read_mult.cb == NULL) {
   1c070:	6a2e      	ldr	r6, [r5, #32]
   1c072:	b17e      	cbz	r6, 1c094 <ble_gattc_read_mult_cb+0x4c>
        rc = 0;
    } else {
        rc = proc->read_mult.cb(proc->conn_handle,
   1c074:	892f      	ldrh	r7, [r5, #8]
                                ble_gattc_error(status, att_handle), &attr,
   1c076:	4611      	mov	r1, r2
   1c078:	f7ff fd8c 	bl	1bb94 <ble_gattc_error>
        rc = proc->read_mult.cb(proc->conn_handle,
   1c07c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1c07e:	466a      	mov	r2, sp
   1c080:	4601      	mov	r1, r0
   1c082:	4638      	mov	r0, r7
   1c084:	47b0      	blx	r6
                                proc->read_mult.cb_arg);
    }

    /* Indicate to the caller whether the application consumed the mbuf. */
    if (om != NULL) {
   1c086:	b10c      	cbz	r4, 1c08c <ble_gattc_read_mult_cb+0x44>
        *om = attr.om;
   1c088:	9b01      	ldr	r3, [sp, #4]
   1c08a:	6023      	str	r3, [r4, #0]
    }

    return rc;
}
   1c08c:	b003      	add	sp, #12
   1c08e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        attr.om = NULL;
   1c090:	9301      	str	r3, [sp, #4]
   1c092:	e7ed      	b.n	1c070 <ble_gattc_read_mult_cb+0x28>
        rc = 0;
   1c094:	2000      	movs	r0, #0
   1c096:	e7f6      	b.n	1c086 <ble_gattc_read_mult_cb+0x3e>
   1c098:	20004528 	.word	0x20004528

0001c09c <ble_gattc_read_mult_tmo>:

static void
ble_gattc_read_mult_tmo(struct ble_gattc_proc *proc)
{
   1c09c:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_read_mult_cb(proc, BLE_HS_ETIMEOUT, 0, 0);
   1c09e:	2300      	movs	r3, #0
   1c0a0:	461a      	mov	r2, r3
   1c0a2:	210d      	movs	r1, #13
   1c0a4:	f7ff ffd0 	bl	1c048 <ble_gattc_read_mult_cb>
}
   1c0a8:	bd08      	pop	{r3, pc}

0001c0aa <ble_gattc_read_mult_err>:
 * read-multiple-characteristics proc.
 */
static void
ble_gattc_read_mult_err(struct ble_gattc_proc *proc, int status,
                        uint16_t att_handle)
{
   1c0aa:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);
    ble_gattc_read_mult_cb(proc, status, att_handle, NULL);
   1c0ac:	2300      	movs	r3, #0
   1c0ae:	f7ff ffcb 	bl	1c048 <ble_gattc_read_mult_cb>
}
   1c0b2:	bd08      	pop	{r3, pc}

0001c0b4 <ble_gattc_write_long_cb>:
 *                                  is no callback).
 */
static int
ble_gattc_write_long_cb(struct ble_gattc_proc *proc, int status,
                        uint16_t att_handle)
{
   1c0b4:	b570      	push	{r4, r5, r6, lr}
    int rc;

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status != 0 && status != BLE_HS_EDONE) {
   1c0b6:	460b      	mov	r3, r1
   1c0b8:	b129      	cbz	r1, 1c0c6 <ble_gattc_write_long_cb+0x12>
   1c0ba:	290e      	cmp	r1, #14
   1c0bc:	d003      	beq.n	1c0c6 <ble_gattc_write_long_cb+0x12>
        STATS_INC(ble_gattc_stats, write_long_fail);
   1c0be:	4c0a      	ldr	r4, [pc, #40]	; (1c0e8 <ble_gattc_write_long_cb+0x34>)
   1c0c0:	6fa1      	ldr	r1, [r4, #120]	; 0x78
   1c0c2:	3101      	adds	r1, #1
   1c0c4:	67a1      	str	r1, [r4, #120]	; 0x78
    }

    if (proc->write_long.cb == NULL) {
   1c0c6:	6985      	ldr	r5, [r0, #24]
   1c0c8:	b165      	cbz	r5, 1c0e4 <ble_gattc_write_long_cb+0x30>
   1c0ca:	4611      	mov	r1, r2
   1c0cc:	4604      	mov	r4, r0
        rc = 0;
    } else {
        rc = proc->write_long.cb(proc->conn_handle,
   1c0ce:	8906      	ldrh	r6, [r0, #8]
                                 ble_gattc_error(status, att_handle),
   1c0d0:	4618      	mov	r0, r3
   1c0d2:	f7ff fd5f 	bl	1bb94 <ble_gattc_error>
        rc = proc->write_long.cb(proc->conn_handle,
   1c0d6:	69e3      	ldr	r3, [r4, #28]
   1c0d8:	f104 020c 	add.w	r2, r4, #12
   1c0dc:	4601      	mov	r1, r0
   1c0de:	4630      	mov	r0, r6
   1c0e0:	47a8      	blx	r5
                                 &proc->write_long.attr,
                                 proc->write_long.cb_arg);
    }

    return rc;
}
   1c0e2:	bd70      	pop	{r4, r5, r6, pc}
        rc = 0;
   1c0e4:	2000      	movs	r0, #0
    return rc;
   1c0e6:	e7fc      	b.n	1c0e2 <ble_gattc_write_long_cb+0x2e>
   1c0e8:	20004528 	.word	0x20004528

0001c0ec <ble_gattc_write_long_tmo>:

static void
ble_gattc_write_long_tmo(struct ble_gattc_proc *proc)
{
   1c0ec:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_write_long_cb(proc, BLE_HS_ETIMEOUT, 0);
   1c0ee:	2200      	movs	r2, #0
   1c0f0:	210d      	movs	r1, #13
   1c0f2:	f7ff ffdf 	bl	1c0b4 <ble_gattc_write_long_cb>
}
   1c0f6:	bd08      	pop	{r3, pc}

0001c0f8 <ble_gattc_write_long_rx_exec>:
 * Handles an incoming execute-write-response for the specified
 * write-long-characteristic-values proc.
 */
static int
ble_gattc_write_long_rx_exec(struct ble_gattc_proc *proc, int status)
{
   1c0f8:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (proc->write_long.attr.offset <
   1c0fa:	89c2      	ldrh	r2, [r0, #14]
        OS_MBUF_PKTLEN(proc->write_long.attr.om)) {
   1c0fc:	6903      	ldr	r3, [r0, #16]
   1c0fe:	8a1b      	ldrh	r3, [r3, #16]
    if (proc->write_long.attr.offset <
   1c100:	429a      	cmp	r2, r3
   1c102:	d201      	bcs.n	1c108 <ble_gattc_write_long_rx_exec+0x10>

        /* Expecting an execute write response, not a prepare write
         * response.
         */
        return BLE_HS_EBADDATA;
   1c104:	200a      	movs	r0, #10
    }

    ble_gattc_write_long_cb(proc, status, 0);
    return BLE_HS_EDONE;
}
   1c106:	bd08      	pop	{r3, pc}
    ble_gattc_write_long_cb(proc, status, 0);
   1c108:	2200      	movs	r2, #0
   1c10a:	f7ff ffd3 	bl	1c0b4 <ble_gattc_write_long_cb>
    return BLE_HS_EDONE;
   1c10e:	200e      	movs	r0, #14
   1c110:	e7f9      	b.n	1c106 <ble_gattc_write_long_rx_exec+0xe>
	...

0001c114 <ble_gattc_write_reliable_cb>:
 *                                  is no callback).
 */
static int
ble_gattc_write_reliable_cb(struct ble_gattc_proc *proc, int status,
                            uint16_t att_handle)
{
   1c114:	b570      	push	{r4, r5, r6, lr}
   1c116:	b082      	sub	sp, #8
    int rc;

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status != 0 && status != BLE_HS_EDONE) {
   1c118:	460b      	mov	r3, r1
   1c11a:	b139      	cbz	r1, 1c12c <ble_gattc_write_reliable_cb+0x18>
   1c11c:	290e      	cmp	r1, #14
   1c11e:	d005      	beq.n	1c12c <ble_gattc_write_reliable_cb+0x18>
        STATS_INC(ble_gattc_stats, write_reliable_fail);
   1c120:	4c0d      	ldr	r4, [pc, #52]	; (1c158 <ble_gattc_write_reliable_cb+0x44>)
   1c122:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
   1c126:	3101      	adds	r1, #1
   1c128:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
    }

    if (proc->write_reliable.cb == NULL) {
   1c12c:	6b05      	ldr	r5, [r0, #48]	; 0x30
   1c12e:	b185      	cbz	r5, 1c152 <ble_gattc_write_reliable_cb+0x3e>
   1c130:	4611      	mov	r1, r2
   1c132:	4604      	mov	r4, r0
        rc = 0;
    } else {
        rc = proc->write_reliable.cb(proc->conn_handle,
   1c134:	8906      	ldrh	r6, [r0, #8]
                                     ble_gattc_error(status, att_handle),
   1c136:	4618      	mov	r0, r3
   1c138:	f7ff fd2c 	bl	1bb94 <ble_gattc_error>
        rc = proc->write_reliable.cb(proc->conn_handle,
   1c13c:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   1c140:	6b62      	ldr	r2, [r4, #52]	; 0x34
   1c142:	9200      	str	r2, [sp, #0]
   1c144:	f104 020c 	add.w	r2, r4, #12
   1c148:	4601      	mov	r1, r0
   1c14a:	4630      	mov	r0, r6
   1c14c:	47a8      	blx	r5
                                     proc->write_reliable.num_attrs,
                                     proc->write_reliable.cb_arg);
    }

    return rc;
}
   1c14e:	b002      	add	sp, #8
   1c150:	bd70      	pop	{r4, r5, r6, pc}
        rc = 0;
   1c152:	2000      	movs	r0, #0
    return rc;
   1c154:	e7fb      	b.n	1c14e <ble_gattc_write_reliable_cb+0x3a>
   1c156:	bf00      	nop
   1c158:	20004528 	.word	0x20004528

0001c15c <ble_gattc_write_reliable_tmo>:

static void
ble_gattc_write_reliable_tmo(struct ble_gattc_proc *proc)
{
   1c15c:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_write_reliable_cb(proc, BLE_HS_ETIMEOUT, 0);
   1c15e:	2200      	movs	r2, #0
   1c160:	210d      	movs	r1, #13
   1c162:	f7ff ffd7 	bl	1c114 <ble_gattc_write_reliable_cb>
}
   1c166:	bd08      	pop	{r3, pc}

0001c168 <ble_gattc_write_reliable_rx_exec>:
 * Handles an incoming execute-write-response for the specified
 * write-reliable-characteristic-values proc.
 */
static int
ble_gattc_write_reliable_rx_exec(struct ble_gattc_proc *proc, int status)
{
   1c168:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);
    ble_gattc_write_reliable_cb(proc, status, 0);
   1c16a:	2200      	movs	r2, #0
   1c16c:	f7ff ffd2 	bl	1c114 <ble_gattc_write_reliable_cb>
    return BLE_HS_EDONE;
}
   1c170:	200e      	movs	r0, #14
   1c172:	bd08      	pop	{r3, pc}

0001c174 <ble_gattc_proc_set_resume_timer>:
{
   1c174:	b508      	push	{r3, lr}
    proc->flags |= BLE_GATTC_PROC_F_STALLED;
   1c176:	7ac3      	ldrb	r3, [r0, #11]
   1c178:	f043 0301 	orr.w	r3, r3, #1
   1c17c:	72c3      	strb	r3, [r0, #11]
    if (ble_gattc_resume_at == 0) {
   1c17e:	4b07      	ldr	r3, [pc, #28]	; (1c19c <ble_gattc_proc_set_resume_timer+0x28>)
   1c180:	681b      	ldr	r3, [r3, #0]
   1c182:	b103      	cbz	r3, 1c186 <ble_gattc_proc_set_resume_timer+0x12>
}
   1c184:	bd08      	pop	{r3, pc}
    return os_time_get();
   1c186:	f7f1 fa75 	bl	d674 <os_time_get>
        ble_gattc_resume_at = ble_npl_time_get() +
   1c18a:	3080      	adds	r0, #128	; 0x80
   1c18c:	4b03      	ldr	r3, [pc, #12]	; (1c19c <ble_gattc_proc_set_resume_timer+0x28>)
   1c18e:	6018      	str	r0, [r3, #0]
        if (ble_gattc_resume_at == 0) {
   1c190:	2800      	cmp	r0, #0
   1c192:	d1f7      	bne.n	1c184 <ble_gattc_proc_set_resume_timer+0x10>
            ble_gattc_resume_at++;
   1c194:	3001      	adds	r0, #1
   1c196:	6018      	str	r0, [r3, #0]
}
   1c198:	e7f4      	b.n	1c184 <ble_gattc_proc_set_resume_timer+0x10>
   1c19a:	bf00      	nop
   1c19c:	20002c38 	.word	0x20002c38

0001c1a0 <ble_gattc_process_resume_status>:
    switch (status) {
   1c1a0:	2906      	cmp	r1, #6
   1c1a2:	d001      	beq.n	1c1a8 <ble_gattc_process_resume_status+0x8>
}
   1c1a4:	4608      	mov	r0, r1
   1c1a6:	4770      	bx	lr
{
   1c1a8:	b508      	push	{r3, lr}
        ble_gattc_proc_set_resume_timer(proc);
   1c1aa:	f7ff ffe3 	bl	1c174 <ble_gattc_proc_set_resume_timer>
        return 0;
   1c1ae:	2100      	movs	r1, #0
}
   1c1b0:	4608      	mov	r0, r1
   1c1b2:	bd08      	pop	{r3, pc}

0001c1b4 <ble_gattc_proc_set_exp_timer>:
{
   1c1b4:	b510      	push	{r4, lr}
   1c1b6:	4604      	mov	r4, r0
   1c1b8:	f7f1 fa5c 	bl	d674 <os_time_get>
    proc->exp_os_ticks = ble_npl_time_get() +
   1c1bc:	f500 6070 	add.w	r0, r0, #3840	; 0xf00
   1c1c0:	6060      	str	r0, [r4, #4]
}
   1c1c2:	bd10      	pop	{r4, pc}

0001c1c4 <ble_gattc_ticks_until_resume>:
{
   1c1c4:	b508      	push	{r3, lr}
    if (ble_gattc_resume_at == 0) {
   1c1c6:	4b07      	ldr	r3, [pc, #28]	; (1c1e4 <ble_gattc_ticks_until_resume+0x20>)
   1c1c8:	681b      	ldr	r3, [r3, #0]
   1c1ca:	b143      	cbz	r3, 1c1de <ble_gattc_ticks_until_resume+0x1a>
   1c1cc:	f7f1 fa52 	bl	d674 <os_time_get>
    diff = ble_gattc_resume_at - now;
   1c1d0:	4b04      	ldr	r3, [pc, #16]	; (1c1e4 <ble_gattc_ticks_until_resume+0x20>)
   1c1d2:	681b      	ldr	r3, [r3, #0]
   1c1d4:	1a18      	subs	r0, r3, r0
    if (diff <= 0) {
   1c1d6:	2800      	cmp	r0, #0
   1c1d8:	dc03      	bgt.n	1c1e2 <ble_gattc_ticks_until_resume+0x1e>
        return 0;
   1c1da:	2000      	movs	r0, #0
   1c1dc:	e001      	b.n	1c1e2 <ble_gattc_ticks_until_resume+0x1e>
        return BLE_HS_FOREVER;
   1c1de:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
}
   1c1e2:	bd08      	pop	{r3, pc}
   1c1e4:	20002c38 	.word	0x20002c38

0001c1e8 <ble_gattc_extract>:
{
   1c1e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c1ec:	4681      	mov	r9, r0
   1c1ee:	4688      	mov	r8, r1
   1c1f0:	4693      	mov	fp, r2
   1c1f2:	461f      	mov	r7, r3
    STAILQ_INIT(dst_list);
   1c1f4:	2500      	movs	r5, #0
   1c1f6:	601d      	str	r5, [r3, #0]
   1c1f8:	605b      	str	r3, [r3, #4]
    ble_hs_lock();
   1c1fa:	f002 f993 	bl	1e524 <ble_hs_lock>
    proc = STAILQ_FIRST(&ble_gattc_procs);
   1c1fe:	4b17      	ldr	r3, [pc, #92]	; (1c25c <ble_gattc_extract+0x74>)
   1c200:	681c      	ldr	r4, [r3, #0]
    num_extracted = 0;
   1c202:	46aa      	mov	sl, r5
    while (proc != NULL) {
   1c204:	e00c      	b.n	1c220 <ble_gattc_extract+0x38>
                STAILQ_REMOVE_HEAD(&ble_gattc_procs, next);
   1c206:	4a15      	ldr	r2, [pc, #84]	; (1c25c <ble_gattc_extract+0x74>)
   1c208:	6813      	ldr	r3, [r2, #0]
   1c20a:	681b      	ldr	r3, [r3, #0]
   1c20c:	6013      	str	r3, [r2, #0]
   1c20e:	b9ab      	cbnz	r3, 1c23c <ble_gattc_extract+0x54>
   1c210:	4613      	mov	r3, r2
   1c212:	605a      	str	r2, [r3, #4]
   1c214:	e012      	b.n	1c23c <ble_gattc_extract+0x54>
                STAILQ_REMOVE_AFTER(&ble_gattc_procs, prev, next);
   1c216:	4b11      	ldr	r3, [pc, #68]	; (1c25c <ble_gattc_extract+0x74>)
   1c218:	605d      	str	r5, [r3, #4]
   1c21a:	e00f      	b.n	1c23c <ble_gattc_extract+0x54>
            prev = proc;
   1c21c:	4625      	mov	r5, r4
   1c21e:	4634      	mov	r4, r6
    while (proc != NULL) {
   1c220:	b1c4      	cbz	r4, 1c254 <ble_gattc_extract+0x6c>
        next = STAILQ_NEXT(proc, next);
   1c222:	6826      	ldr	r6, [r4, #0]
        if (cb(proc, arg)) {
   1c224:	4641      	mov	r1, r8
   1c226:	4620      	mov	r0, r4
   1c228:	47c8      	blx	r9
   1c22a:	2800      	cmp	r0, #0
   1c22c:	d0f6      	beq.n	1c21c <ble_gattc_extract+0x34>
            if (prev == NULL) {
   1c22e:	2d00      	cmp	r5, #0
   1c230:	d0e9      	beq.n	1c206 <ble_gattc_extract+0x1e>
                STAILQ_REMOVE_AFTER(&ble_gattc_procs, prev, next);
   1c232:	682b      	ldr	r3, [r5, #0]
   1c234:	681b      	ldr	r3, [r3, #0]
   1c236:	602b      	str	r3, [r5, #0]
   1c238:	2b00      	cmp	r3, #0
   1c23a:	d0ec      	beq.n	1c216 <ble_gattc_extract+0x2e>
            STAILQ_INSERT_TAIL(dst_list, proc, next);
   1c23c:	2300      	movs	r3, #0
   1c23e:	6023      	str	r3, [r4, #0]
   1c240:	687b      	ldr	r3, [r7, #4]
   1c242:	601c      	str	r4, [r3, #0]
   1c244:	607c      	str	r4, [r7, #4]
            if (max_procs > 0) {
   1c246:	f1bb 0f00 	cmp.w	fp, #0
   1c24a:	dde8      	ble.n	1c21e <ble_gattc_extract+0x36>
                num_extracted++;
   1c24c:	f10a 0a01 	add.w	sl, sl, #1
                if (num_extracted >= max_procs) {
   1c250:	45d3      	cmp	fp, sl
   1c252:	dce4      	bgt.n	1c21e <ble_gattc_extract+0x36>
    ble_hs_unlock();
   1c254:	f002 f96a 	bl	1e52c <ble_hs_unlock>
}
   1c258:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c25c:	20002c30 	.word	0x20002c30

0001c260 <ble_gattc_extract_expired>:
{
   1c260:	b510      	push	{r4, lr}
   1c262:	b082      	sub	sp, #8
   1c264:	4604      	mov	r4, r0
   1c266:	f7f1 fa05 	bl	d674 <os_time_get>
    criteria.now = ble_npl_time_get();
   1c26a:	9000      	str	r0, [sp, #0]
    criteria.next_exp_in = BLE_HS_FOREVER;
   1c26c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   1c270:	9301      	str	r3, [sp, #4]
    STAILQ_INIT(dst_list);
   1c272:	2200      	movs	r2, #0
   1c274:	6022      	str	r2, [r4, #0]
   1c276:	6064      	str	r4, [r4, #4]
    ble_gattc_extract(ble_gattc_proc_matches_expired, &criteria, 0, dst_list);
   1c278:	4623      	mov	r3, r4
   1c27a:	4669      	mov	r1, sp
   1c27c:	4802      	ldr	r0, [pc, #8]	; (1c288 <ble_gattc_extract_expired+0x28>)
   1c27e:	f7ff ffb3 	bl	1c1e8 <ble_gattc_extract>
}
   1c282:	9801      	ldr	r0, [sp, #4]
   1c284:	b002      	add	sp, #8
   1c286:	bd10      	pop	{r4, pc}
   1c288:	0001bb2d 	.word	0x0001bb2d

0001c28c <ble_gattc_extract_stalled>:
{
   1c28c:	b508      	push	{r3, lr}
    ble_gattc_extract(ble_gattc_proc_matches_stalled, NULL, 0, dst_list);
   1c28e:	4603      	mov	r3, r0
   1c290:	2200      	movs	r2, #0
   1c292:	4611      	mov	r1, r2
   1c294:	4801      	ldr	r0, [pc, #4]	; (1c29c <ble_gattc_extract_stalled+0x10>)
   1c296:	f7ff ffa7 	bl	1c1e8 <ble_gattc_extract>
}
   1c29a:	bd08      	pop	{r3, pc}
   1c29c:	0001bb77 	.word	0x0001bb77

0001c2a0 <ble_gattc_extract_by_conn_op>:
{
   1c2a0:	b500      	push	{lr}
   1c2a2:	b083      	sub	sp, #12
    criteria.conn_handle = conn_handle;
   1c2a4:	f8ad 0004 	strh.w	r0, [sp, #4]
    criteria.op = op;
   1c2a8:	f88d 1006 	strb.w	r1, [sp, #6]
    ble_gattc_extract(ble_gattc_proc_matches_conn_op, &criteria, max_procs, dst_list);
   1c2ac:	a901      	add	r1, sp, #4
   1c2ae:	4803      	ldr	r0, [pc, #12]	; (1c2bc <ble_gattc_extract_by_conn_op+0x1c>)
   1c2b0:	f7ff ff9a 	bl	1c1e8 <ble_gattc_extract>
}
   1c2b4:	b003      	add	sp, #12
   1c2b6:	f85d fb04 	ldr.w	pc, [sp], #4
   1c2ba:	bf00      	nop
   1c2bc:	0001bb09 	.word	0x0001bb09

0001c2c0 <ble_gattc_extract_first_by_conn_op>:
{
   1c2c0:	b500      	push	{lr}
   1c2c2:	b083      	sub	sp, #12
    ble_gattc_extract_by_conn_op(conn_handle, op, 1, &dst_list);
   1c2c4:	466b      	mov	r3, sp
   1c2c6:	2201      	movs	r2, #1
   1c2c8:	f7ff ffea 	bl	1c2a0 <ble_gattc_extract_by_conn_op>
}
   1c2cc:	9800      	ldr	r0, [sp, #0]
   1c2ce:	b003      	add	sp, #12
   1c2d0:	f85d fb04 	ldr.w	pc, [sp], #4

0001c2d4 <ble_gattc_extract_one>:
{
   1c2d4:	b500      	push	{lr}
   1c2d6:	b083      	sub	sp, #12
    ble_gattc_extract(cb, arg, 1, &dst_list);
   1c2d8:	466b      	mov	r3, sp
   1c2da:	2201      	movs	r2, #1
   1c2dc:	f7ff ff84 	bl	1c1e8 <ble_gattc_extract>
}
   1c2e0:	9800      	ldr	r0, [sp, #0]
   1c2e2:	b003      	add	sp, #12
   1c2e4:	f85d fb04 	ldr.w	pc, [sp], #4

0001c2e8 <ble_gattc_extract_with_rx_entry>:
{
   1c2e8:	b510      	push	{r4, lr}
   1c2ea:	b084      	sub	sp, #16
   1c2ec:	461c      	mov	r4, r3
    criteria.conn_handle = conn_handle;
   1c2ee:	f8ad 0000 	strh.w	r0, [sp]
    criteria.rx_entries = rx_entries;
   1c2f2:	9101      	str	r1, [sp, #4]
    criteria.num_rx_entries = num_rx_entries;
   1c2f4:	9202      	str	r2, [sp, #8]
    criteria.matching_rx_entry = NULL;
   1c2f6:	2300      	movs	r3, #0
   1c2f8:	9303      	str	r3, [sp, #12]
    proc = ble_gattc_extract_one(ble_gattc_proc_matches_conn_rx_entry,
   1c2fa:	4669      	mov	r1, sp
   1c2fc:	4803      	ldr	r0, [pc, #12]	; (1c30c <ble_gattc_extract_with_rx_entry+0x24>)
   1c2fe:	f7ff ffe9 	bl	1c2d4 <ble_gattc_extract_one>
    *out_rx_entry = criteria.matching_rx_entry;
   1c302:	9b03      	ldr	r3, [sp, #12]
   1c304:	6023      	str	r3, [r4, #0]
}
   1c306:	b004      	add	sp, #16
   1c308:	bd10      	pop	{r4, pc}
   1c30a:	bf00      	nop
   1c30c:	0001bb4b 	.word	0x0001bb4b

0001c310 <ble_gattc_proc_insert>:
{
   1c310:	b510      	push	{r4, lr}
   1c312:	4604      	mov	r4, r0
    ble_hs_lock();
   1c314:	f002 f906 	bl	1e524 <ble_hs_lock>
    STAILQ_INSERT_TAIL(&ble_gattc_procs, proc, next);
   1c318:	2300      	movs	r3, #0
   1c31a:	6023      	str	r3, [r4, #0]
   1c31c:	4b03      	ldr	r3, [pc, #12]	; (1c32c <ble_gattc_proc_insert+0x1c>)
   1c31e:	685a      	ldr	r2, [r3, #4]
   1c320:	6014      	str	r4, [r2, #0]
   1c322:	605c      	str	r4, [r3, #4]
    ble_hs_unlock();
   1c324:	f002 f902 	bl	1e52c <ble_hs_unlock>
}
   1c328:	bd10      	pop	{r4, pc}
   1c32a:	bf00      	nop
   1c32c:	20002c30 	.word	0x20002c30

0001c330 <ble_gattc_indicate_tmo>:
    ble_gatts_send_next_indicate(proc->conn_handle);
}

static void
ble_gattc_indicate_tmo(struct ble_gattc_proc *proc)
{
   1c330:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gap_notify_tx_event(BLE_HS_ETIMEOUT, proc->conn_handle,
   1c332:	2301      	movs	r3, #1
   1c334:	8982      	ldrh	r2, [r0, #12]
   1c336:	8901      	ldrh	r1, [r0, #8]
   1c338:	200d      	movs	r0, #13
   1c33a:	f7ff fa6c 	bl	1b816 <ble_gap_notify_tx_event>
                            proc->indicate.chr_val_handle, 1);
}
   1c33e:	bd08      	pop	{r3, pc}

0001c340 <ble_gattc_write_cb>:
{
   1c340:	b570      	push	{r4, r5, r6, lr}
   1c342:	b082      	sub	sp, #8
    if (status != 0 && status != BLE_HS_EDONE) {
   1c344:	460b      	mov	r3, r1
   1c346:	b129      	cbz	r1, 1c354 <ble_gattc_write_cb+0x14>
   1c348:	290e      	cmp	r1, #14
   1c34a:	d003      	beq.n	1c354 <ble_gattc_write_cb+0x14>
        STATS_INC(ble_gattc_stats, write_fail);
   1c34c:	4c0e      	ldr	r4, [pc, #56]	; (1c388 <ble_gattc_write_cb+0x48>)
   1c34e:	6f21      	ldr	r1, [r4, #112]	; 0x70
   1c350:	3101      	adds	r1, #1
   1c352:	6721      	str	r1, [r4, #112]	; 0x70
    if (proc->write.cb == NULL) {
   1c354:	6905      	ldr	r5, [r0, #16]
   1c356:	b1a5      	cbz	r5, 1c382 <ble_gattc_write_cb+0x42>
   1c358:	4611      	mov	r1, r2
   1c35a:	4604      	mov	r4, r0
        memset(&attr, 0, sizeof attr);
   1c35c:	2200      	movs	r2, #0
   1c35e:	f8cd 2002 	str.w	r2, [sp, #2]
   1c362:	f8ad 2006 	strh.w	r2, [sp, #6]
        attr.handle = proc->write.att_handle;
   1c366:	8982      	ldrh	r2, [r0, #12]
   1c368:	f8ad 2000 	strh.w	r2, [sp]
        rc = proc->write.cb(proc->conn_handle,
   1c36c:	8906      	ldrh	r6, [r0, #8]
                            ble_gattc_error(status, att_handle),
   1c36e:	4618      	mov	r0, r3
   1c370:	f7ff fc10 	bl	1bb94 <ble_gattc_error>
        rc = proc->write.cb(proc->conn_handle,
   1c374:	6963      	ldr	r3, [r4, #20]
   1c376:	466a      	mov	r2, sp
   1c378:	4601      	mov	r1, r0
   1c37a:	4630      	mov	r0, r6
   1c37c:	47a8      	blx	r5
}
   1c37e:	b002      	add	sp, #8
   1c380:	bd70      	pop	{r4, r5, r6, pc}
        rc = 0;
   1c382:	2000      	movs	r0, #0
    return rc;
   1c384:	e7fb      	b.n	1c37e <ble_gattc_write_cb+0x3e>
   1c386:	bf00      	nop
   1c388:	20004528 	.word	0x20004528

0001c38c <ble_gattc_write_tmo>:
{
   1c38c:	b508      	push	{r3, lr}
    ble_gattc_write_cb(proc, BLE_HS_ETIMEOUT, 0);
   1c38e:	2200      	movs	r2, #0
   1c390:	210d      	movs	r1, #13
   1c392:	f7ff ffd5 	bl	1c340 <ble_gattc_write_cb>
}
   1c396:	bd08      	pop	{r3, pc}

0001c398 <ble_gattc_write_err>:
{
   1c398:	b508      	push	{r3, lr}
    ble_gattc_write_cb(proc, status, att_handle);
   1c39a:	f7ff ffd1 	bl	1c340 <ble_gattc_write_cb>
}
   1c39e:	bd08      	pop	{r3, pc}

0001c3a0 <ble_gattc_proc_free>:
    if (proc != NULL) {
   1c3a0:	b1e8      	cbz	r0, 1c3de <ble_gattc_proc_free+0x3e>
{
   1c3a2:	b538      	push	{r3, r4, r5, lr}
   1c3a4:	4604      	mov	r4, r0
        switch (proc->op) {
   1c3a6:	7a83      	ldrb	r3, [r0, #10]
   1c3a8:	2b0c      	cmp	r3, #12
   1c3aa:	d006      	beq.n	1c3ba <ble_gattc_proc_free+0x1a>
   1c3ac:	2b0d      	cmp	r3, #13
   1c3ae:	d014      	beq.n	1c3da <ble_gattc_proc_free+0x3a>
        rc = os_memblock_put(&ble_gattc_proc_pool, proc);
   1c3b0:	4621      	mov	r1, r4
   1c3b2:	480b      	ldr	r0, [pc, #44]	; (1c3e0 <ble_gattc_proc_free+0x40>)
   1c3b4:	f7f0 fde4 	bl	cf80 <os_memblock_put>
}
   1c3b8:	bd38      	pop	{r3, r4, r5, pc}
            os_mbuf_free_chain(proc->write_long.attr.om);
   1c3ba:	6900      	ldr	r0, [r0, #16]
   1c3bc:	f7f1 fb2b 	bl	da16 <os_mbuf_free_chain>
            break;
   1c3c0:	e7f6      	b.n	1c3b0 <ble_gattc_proc_free+0x10>
                os_mbuf_free_chain(proc->write_reliable.attrs[i].om);
   1c3c2:	1c5d      	adds	r5, r3, #1
   1c3c4:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
   1c3c8:	6898      	ldr	r0, [r3, #8]
   1c3ca:	f7f1 fb24 	bl	da16 <os_mbuf_free_chain>
            for (i = 0; i < proc->write_reliable.num_attrs; i++) {
   1c3ce:	462b      	mov	r3, r5
   1c3d0:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
   1c3d4:	429a      	cmp	r2, r3
   1c3d6:	dcf4      	bgt.n	1c3c2 <ble_gattc_proc_free+0x22>
   1c3d8:	e7ea      	b.n	1c3b0 <ble_gattc_proc_free+0x10>
   1c3da:	2300      	movs	r3, #0
   1c3dc:	e7f8      	b.n	1c3d0 <ble_gattc_proc_free+0x30>
   1c3de:	4770      	bx	lr
   1c3e0:	20002c14 	.word	0x20002c14

0001c3e4 <ble_gattc_fail_procs>:
{
   1c3e4:	b530      	push	{r4, r5, lr}
   1c3e6:	b083      	sub	sp, #12
   1c3e8:	4615      	mov	r5, r2
    ble_gattc_extract_by_conn_op(conn_handle, op, 0, &temp_list);
   1c3ea:	466b      	mov	r3, sp
   1c3ec:	2200      	movs	r2, #0
   1c3ee:	f7ff ff57 	bl	1c2a0 <ble_gattc_extract_by_conn_op>
    while ((proc = STAILQ_FIRST(&temp_list)) != NULL) {
   1c3f2:	e002      	b.n	1c3fa <ble_gattc_fail_procs+0x16>
        ble_gattc_proc_free(proc);
   1c3f4:	4620      	mov	r0, r4
   1c3f6:	f7ff ffd3 	bl	1c3a0 <ble_gattc_proc_free>
    while ((proc = STAILQ_FIRST(&temp_list)) != NULL) {
   1c3fa:	9c00      	ldr	r4, [sp, #0]
   1c3fc:	b17c      	cbz	r4, 1c41e <ble_gattc_fail_procs+0x3a>
        err_cb = ble_gattc_err_dispatch_get(proc->op);
   1c3fe:	7aa0      	ldrb	r0, [r4, #10]
   1c400:	f7ff fb70 	bl	1bae4 <ble_gattc_err_dispatch_get>
   1c404:	4603      	mov	r3, r0
        err_cb(proc, status, 0);
   1c406:	2200      	movs	r2, #0
   1c408:	4629      	mov	r1, r5
   1c40a:	4620      	mov	r0, r4
   1c40c:	4798      	blx	r3
        STAILQ_REMOVE_HEAD(&temp_list, next);
   1c40e:	9b00      	ldr	r3, [sp, #0]
   1c410:	681b      	ldr	r3, [r3, #0]
   1c412:	9300      	str	r3, [sp, #0]
   1c414:	2b00      	cmp	r3, #0
   1c416:	d1ed      	bne.n	1c3f4 <ble_gattc_fail_procs+0x10>
   1c418:	f8cd d004 	str.w	sp, [sp, #4]
   1c41c:	e7ea      	b.n	1c3f4 <ble_gattc_fail_procs+0x10>
}
   1c41e:	b003      	add	sp, #12
   1c420:	bd30      	pop	{r4, r5, pc}

0001c422 <ble_gattc_write_reliable_err>:
{
   1c422:	b510      	push	{r4, lr}
   1c424:	4604      	mov	r4, r0
    ble_gattc_write_reliable_cb(proc, status, att_handle);
   1c426:	f7ff fe75 	bl	1c114 <ble_gattc_write_reliable_cb>
    if (proc->write_reliable.cur_attr < proc->write_reliable.num_attrs) {
   1c42a:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
   1c42e:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   1c432:	429a      	cmp	r2, r3
   1c434:	d300      	bcc.n	1c438 <ble_gattc_write_reliable_err+0x16>
}
   1c436:	bd10      	pop	{r4, pc}
        ble_att_clt_tx_exec_write(proc->conn_handle,
   1c438:	2100      	movs	r1, #0
   1c43a:	8920      	ldrh	r0, [r4, #8]
   1c43c:	f007 fea8 	bl	24190 <ble_att_clt_tx_exec_write>
}
   1c440:	e7f9      	b.n	1c436 <ble_gattc_write_reliable_err+0x14>

0001c442 <ble_gattc_write_long_err>:
{
   1c442:	b570      	push	{r4, r5, r6, lr}
   1c444:	4604      	mov	r4, r0
   1c446:	460d      	mov	r5, r1
   1c448:	4616      	mov	r6, r2
    if (proc->write_long.attr.offset > 0 &&
   1c44a:	89c3      	ldrh	r3, [r0, #14]
   1c44c:	b11b      	cbz	r3, 1c456 <ble_gattc_write_long_err+0x14>
            OS_MBUF_PKTLEN(proc->write_long.attr.om)) {
   1c44e:	6902      	ldr	r2, [r0, #16]
   1c450:	8a12      	ldrh	r2, [r2, #16]
    if (proc->write_long.attr.offset > 0 &&
   1c452:	4293      	cmp	r3, r2
   1c454:	d305      	bcc.n	1c462 <ble_gattc_write_long_err+0x20>
    ble_gattc_write_long_cb(proc, status, att_handle);
   1c456:	4632      	mov	r2, r6
   1c458:	4629      	mov	r1, r5
   1c45a:	4620      	mov	r0, r4
   1c45c:	f7ff fe2a 	bl	1c0b4 <ble_gattc_write_long_cb>
}
   1c460:	bd70      	pop	{r4, r5, r6, pc}
        ble_att_clt_tx_exec_write(proc->conn_handle,
   1c462:	2100      	movs	r1, #0
   1c464:	8900      	ldrh	r0, [r0, #8]
   1c466:	f007 fe93 	bl	24190 <ble_att_clt_tx_exec_write>
   1c46a:	e7f4      	b.n	1c456 <ble_gattc_write_long_err+0x14>

0001c46c <ble_gattc_write_reliable_tx>:
{
   1c46c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c470:	4604      	mov	r4, r0
    attr_idx = proc->write_reliable.cur_attr;
   1c472:	f890 502d 	ldrb.w	r5, [r0, #45]	; 0x2d
    if (attr_idx >= proc->write_reliable.num_attrs) {
   1c476:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
   1c47a:	429d      	cmp	r5, r3
   1c47c:	d225      	bcs.n	1c4ca <ble_gattc_write_reliable_tx+0x5e>
    attr = proc->write_reliable.attrs + attr_idx;
   1c47e:	f100 080c 	add.w	r8, r0, #12
   1c482:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
    max_sz = ble_att_mtu(proc->conn_handle) - BLE_ATT_PREP_WRITE_CMD_BASE_SZ;
   1c486:	8900      	ldrh	r0, [r0, #8]
   1c488:	f007 fbba 	bl	23c00 <ble_att_mtu>
   1c48c:	3805      	subs	r0, #5
   1c48e:	b280      	uxth	r0, r0
    if (max_sz <= 0) {
   1c490:	b338      	cbz	r0, 1c4e2 <ble_gattc_write_reliable_tx+0x76>
        min(max_sz, OS_MBUF_PKTLEN(attr->om) - attr->offset);
   1c492:	687b      	ldr	r3, [r7, #4]
   1c494:	8a1b      	ldrh	r3, [r3, #16]
   1c496:	887a      	ldrh	r2, [r7, #2]
   1c498:	1a9b      	subs	r3, r3, r2
   1c49a:	4298      	cmp	r0, r3
   1c49c:	bfa8      	it	ge
   1c49e:	4618      	movge	r0, r3
    proc->write_reliable.length =
   1c4a0:	85e0      	strh	r0, [r4, #46]	; 0x2e
    om = ble_hs_mbuf_att_pkt();
   1c4a2:	f003 fdfc 	bl	2009e <ble_hs_mbuf_att_pkt>
    if (om == NULL) {
   1c4a6:	4606      	mov	r6, r0
   1c4a8:	b1f0      	cbz	r0, 1c4e8 <ble_gattc_write_reliable_tx+0x7c>
    rc = os_mbuf_appendfrom(om, attr->om, attr->offset,
   1c4aa:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
   1c4ac:	887a      	ldrh	r2, [r7, #2]
   1c4ae:	6879      	ldr	r1, [r7, #4]
   1c4b0:	f7f1 fb28 	bl	db04 <os_mbuf_appendfrom>
    if (rc != 0) {
   1c4b4:	b9d0      	cbnz	r0, 1c4ec <ble_gattc_write_reliable_tx+0x80>
    rc = ble_att_clt_tx_prep_write(proc->conn_handle, attr->handle,
   1c4b6:	4633      	mov	r3, r6
   1c4b8:	887a      	ldrh	r2, [r7, #2]
   1c4ba:	f838 1035 	ldrh.w	r1, [r8, r5, lsl #3]
   1c4be:	8920      	ldrh	r0, [r4, #8]
   1c4c0:	f007 fe12 	bl	240e8 <ble_att_clt_tx_prep_write>
   1c4c4:	4604      	mov	r4, r0
    om = NULL;
   1c4c6:	2600      	movs	r6, #0
done:
   1c4c8:	e005      	b.n	1c4d6 <ble_gattc_write_reliable_tx+0x6a>
        rc = ble_att_clt_tx_exec_write(proc->conn_handle,
   1c4ca:	2101      	movs	r1, #1
   1c4cc:	8900      	ldrh	r0, [r0, #8]
   1c4ce:	f007 fe5f 	bl	24190 <ble_att_clt_tx_exec_write>
   1c4d2:	4604      	mov	r4, r0
    om = NULL;
   1c4d4:	2600      	movs	r6, #0
    os_mbuf_free_chain(om);
   1c4d6:	4630      	mov	r0, r6
   1c4d8:	f7f1 fa9d 	bl	da16 <os_mbuf_free_chain>
}
   1c4dc:	4620      	mov	r0, r4
   1c4de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = BLE_HS_ENOTCONN;
   1c4e2:	2407      	movs	r4, #7
    om = NULL;
   1c4e4:	2600      	movs	r6, #0
   1c4e6:	e7f6      	b.n	1c4d6 <ble_gattc_write_reliable_tx+0x6a>
        rc = BLE_HS_ENOMEM;
   1c4e8:	2406      	movs	r4, #6
   1c4ea:	e7f4      	b.n	1c4d6 <ble_gattc_write_reliable_tx+0x6a>
        rc = BLE_HS_ENOMEM;
   1c4ec:	2406      	movs	r4, #6
   1c4ee:	e7f2      	b.n	1c4d6 <ble_gattc_write_reliable_tx+0x6a>

0001c4f0 <ble_gattc_write_reliable_resume>:
{
   1c4f0:	b538      	push	{r3, r4, r5, lr}
   1c4f2:	4605      	mov	r5, r0
    status = ble_gattc_write_reliable_tx(proc);
   1c4f4:	f7ff ffba 	bl	1c46c <ble_gattc_write_reliable_tx>
    rc = ble_gattc_process_resume_status(proc, status);
   1c4f8:	4601      	mov	r1, r0
   1c4fa:	4628      	mov	r0, r5
   1c4fc:	f7ff fe50 	bl	1c1a0 <ble_gattc_process_resume_status>
    if (rc != 0) {
   1c500:	4604      	mov	r4, r0
   1c502:	b908      	cbnz	r0, 1c508 <ble_gattc_write_reliable_resume+0x18>
}
   1c504:	4620      	mov	r0, r4
   1c506:	bd38      	pop	{r3, r4, r5, pc}
        ble_gattc_write_reliable_cb(proc, rc, 0);
   1c508:	2200      	movs	r2, #0
   1c50a:	4601      	mov	r1, r0
   1c50c:	4628      	mov	r0, r5
   1c50e:	f7ff fe01 	bl	1c114 <ble_gattc_write_reliable_cb>
        return rc;
   1c512:	e7f7      	b.n	1c504 <ble_gattc_write_reliable_resume+0x14>

0001c514 <ble_gattc_write_long_tx>:
{
   1c514:	b538      	push	{r3, r4, r5, lr}
   1c516:	4604      	mov	r4, r0
    max_sz = ble_att_mtu(proc->conn_handle) - BLE_ATT_PREP_WRITE_CMD_BASE_SZ;
   1c518:	8900      	ldrh	r0, [r0, #8]
   1c51a:	f007 fb71 	bl	23c00 <ble_att_mtu>
   1c51e:	1f42      	subs	r2, r0, #5
    if (max_sz <= 0) {
   1c520:	2a00      	cmp	r2, #0
   1c522:	dd27      	ble.n	1c574 <ble_gattc_write_long_tx+0x60>
    write_len = min(max_sz,
   1c524:	6923      	ldr	r3, [r4, #16]
   1c526:	8a1b      	ldrh	r3, [r3, #16]
   1c528:	89e0      	ldrh	r0, [r4, #14]
   1c52a:	1a18      	subs	r0, r3, r0
   1c52c:	4290      	cmp	r0, r2
   1c52e:	bfa8      	it	ge
   1c530:	4610      	movge	r0, r2
    if (write_len <= 0) {
   1c532:	2800      	cmp	r0, #0
   1c534:	dd13      	ble.n	1c55e <ble_gattc_write_long_tx+0x4a>
    proc->write_long.length = write_len;
   1c536:	82a0      	strh	r0, [r4, #20]
    om = ble_hs_mbuf_att_pkt();
   1c538:	f003 fdb1 	bl	2009e <ble_hs_mbuf_att_pkt>
    if (om == NULL) {
   1c53c:	4605      	mov	r5, r0
   1c53e:	b1e0      	cbz	r0, 1c57a <ble_gattc_write_long_tx+0x66>
    rc = os_mbuf_appendfrom(om, proc->write_long.attr.om,
   1c540:	8aa3      	ldrh	r3, [r4, #20]
   1c542:	89e2      	ldrh	r2, [r4, #14]
   1c544:	6921      	ldr	r1, [r4, #16]
   1c546:	f7f1 fadd 	bl	db04 <os_mbuf_appendfrom>
    if (rc != 0) {
   1c54a:	b9c0      	cbnz	r0, 1c57e <ble_gattc_write_long_tx+0x6a>
    rc = ble_att_clt_tx_prep_write(proc->conn_handle,
   1c54c:	462b      	mov	r3, r5
   1c54e:	89e2      	ldrh	r2, [r4, #14]
   1c550:	89a1      	ldrh	r1, [r4, #12]
   1c552:	8920      	ldrh	r0, [r4, #8]
   1c554:	f007 fdc8 	bl	240e8 <ble_att_clt_tx_prep_write>
   1c558:	4604      	mov	r4, r0
    om = NULL;
   1c55a:	2500      	movs	r5, #0
done:
   1c55c:	e005      	b.n	1c56a <ble_gattc_write_long_tx+0x56>
        rc = ble_att_clt_tx_exec_write(proc->conn_handle,
   1c55e:	2101      	movs	r1, #1
   1c560:	8920      	ldrh	r0, [r4, #8]
   1c562:	f007 fe15 	bl	24190 <ble_att_clt_tx_exec_write>
   1c566:	4604      	mov	r4, r0
    om = NULL;
   1c568:	2500      	movs	r5, #0
    os_mbuf_free_chain(om);
   1c56a:	4628      	mov	r0, r5
   1c56c:	f7f1 fa53 	bl	da16 <os_mbuf_free_chain>
}
   1c570:	4620      	mov	r0, r4
   1c572:	bd38      	pop	{r3, r4, r5, pc}
        rc = BLE_HS_ENOTCONN;
   1c574:	2407      	movs	r4, #7
    om = NULL;
   1c576:	2500      	movs	r5, #0
   1c578:	e7f7      	b.n	1c56a <ble_gattc_write_long_tx+0x56>
        rc = BLE_HS_ENOMEM;
   1c57a:	2406      	movs	r4, #6
   1c57c:	e7f5      	b.n	1c56a <ble_gattc_write_long_tx+0x56>
        rc = BLE_HS_ENOMEM;
   1c57e:	2406      	movs	r4, #6
   1c580:	e7f3      	b.n	1c56a <ble_gattc_write_long_tx+0x56>

0001c582 <ble_gattc_write_long_resume>:
{
   1c582:	b538      	push	{r3, r4, r5, lr}
   1c584:	4605      	mov	r5, r0
    status = ble_gattc_write_long_tx(proc);
   1c586:	f7ff ffc5 	bl	1c514 <ble_gattc_write_long_tx>
    rc = ble_gattc_process_resume_status(proc, status);
   1c58a:	4601      	mov	r1, r0
   1c58c:	4628      	mov	r0, r5
   1c58e:	f7ff fe07 	bl	1c1a0 <ble_gattc_process_resume_status>
    if (rc != 0) {
   1c592:	4604      	mov	r4, r0
   1c594:	b908      	cbnz	r0, 1c59a <ble_gattc_write_long_resume+0x18>
}
   1c596:	4620      	mov	r0, r4
   1c598:	bd38      	pop	{r3, r4, r5, pc}
        ble_gattc_write_long_cb(proc, rc, 0);
   1c59a:	2200      	movs	r2, #0
   1c59c:	4601      	mov	r1, r0
   1c59e:	4628      	mov	r0, r5
   1c5a0:	f7ff fd88 	bl	1c0b4 <ble_gattc_write_long_cb>
        return rc;
   1c5a4:	e7f7      	b.n	1c596 <ble_gattc_write_long_resume+0x14>

0001c5a6 <ble_gattc_read_long_tx>:
{
   1c5a6:	b508      	push	{r3, lr}
    if (proc->read_long.offset == 0) {
   1c5a8:	89c2      	ldrh	r2, [r0, #14]
   1c5aa:	b922      	cbnz	r2, 1c5b6 <ble_gattc_read_long_tx+0x10>
        rc = ble_att_clt_tx_read(proc->conn_handle, proc->read_long.handle);
   1c5ac:	8981      	ldrh	r1, [r0, #12]
   1c5ae:	8900      	ldrh	r0, [r0, #8]
   1c5b0:	f007 fd01 	bl	23fb6 <ble_att_clt_tx_read>
}
   1c5b4:	bd08      	pop	{r3, pc}
        rc = ble_att_clt_tx_read_blob(proc->conn_handle,
   1c5b6:	8981      	ldrh	r1, [r0, #12]
   1c5b8:	8900      	ldrh	r0, [r0, #8]
   1c5ba:	f007 fd19 	bl	23ff0 <ble_att_clt_tx_read_blob>
   1c5be:	e7f9      	b.n	1c5b4 <ble_gattc_read_long_tx+0xe>

0001c5c0 <ble_gattc_read_long_resume>:
{
   1c5c0:	b538      	push	{r3, r4, r5, lr}
   1c5c2:	4605      	mov	r5, r0
    status = ble_gattc_read_long_tx(proc);
   1c5c4:	f7ff ffef 	bl	1c5a6 <ble_gattc_read_long_tx>
    rc = ble_gattc_process_resume_status(proc, status);
   1c5c8:	4601      	mov	r1, r0
   1c5ca:	4628      	mov	r0, r5
   1c5cc:	f7ff fde8 	bl	1c1a0 <ble_gattc_process_resume_status>
    if (rc != 0) {
   1c5d0:	4604      	mov	r4, r0
   1c5d2:	b908      	cbnz	r0, 1c5d8 <ble_gattc_read_long_resume+0x18>
}
   1c5d4:	4620      	mov	r0, r4
   1c5d6:	bd38      	pop	{r3, r4, r5, pc}
        ble_gattc_read_long_cb(proc, rc, 0, NULL);
   1c5d8:	2300      	movs	r3, #0
   1c5da:	461a      	mov	r2, r3
   1c5dc:	4601      	mov	r1, r0
   1c5de:	4628      	mov	r0, r5
   1c5e0:	f7ff fd06 	bl	1bff0 <ble_gattc_read_long_cb>
        return rc;
   1c5e4:	e7f6      	b.n	1c5d4 <ble_gattc_read_long_resume+0x14>

0001c5e6 <ble_gattc_read_long_rx_read_rsp>:
{
   1c5e6:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c5e8:	b083      	sub	sp, #12
   1c5ea:	4604      	mov	r4, r0
   1c5ec:	460f      	mov	r7, r1
   1c5ee:	4615      	mov	r5, r2
    data_len = OS_MBUF_PKTLEN(*om);
   1c5f0:	6813      	ldr	r3, [r2, #0]
   1c5f2:	8a1e      	ldrh	r6, [r3, #16]
    attr.handle = proc->read_long.handle;
   1c5f4:	8982      	ldrh	r2, [r0, #12]
   1c5f6:	f8ad 2000 	strh.w	r2, [sp]
    attr.offset = proc->read_long.offset;
   1c5fa:	89c2      	ldrh	r2, [r0, #14]
   1c5fc:	f8ad 2002 	strh.w	r2, [sp, #2]
    attr.om = *om;
   1c600:	9301      	str	r3, [sp, #4]
    rc = ble_gattc_read_long_cb(proc, status, 0, &attr);
   1c602:	466b      	mov	r3, sp
   1c604:	2200      	movs	r2, #0
   1c606:	f7ff fcf3 	bl	1bff0 <ble_gattc_read_long_cb>
    *om = attr.om;
   1c60a:	9b01      	ldr	r3, [sp, #4]
   1c60c:	602b      	str	r3, [r5, #0]
    if (rc != 0 || status != 0) {
   1c60e:	b9c8      	cbnz	r0, 1c644 <ble_gattc_read_long_rx_read_rsp+0x5e>
   1c610:	b9d7      	cbnz	r7, 1c648 <ble_gattc_read_long_rx_read_rsp+0x62>
    mtu = ble_att_mtu(proc->conn_handle);
   1c612:	8920      	ldrh	r0, [r4, #8]
   1c614:	f007 faf4 	bl	23c00 <ble_att_mtu>
    if (mtu == 0) {
   1c618:	b1d0      	cbz	r0, 1c650 <ble_gattc_read_long_rx_read_rsp+0x6a>
    if (data_len < mtu - 1) {
   1c61a:	1e43      	subs	r3, r0, #1
   1c61c:	429e      	cmp	r6, r3
   1c61e:	db09      	blt.n	1c634 <ble_gattc_read_long_rx_read_rsp+0x4e>
    proc->read_long.offset += data_len;
   1c620:	89e3      	ldrh	r3, [r4, #14]
   1c622:	441e      	add	r6, r3
   1c624:	81e6      	strh	r6, [r4, #14]
    rc = ble_gattc_read_long_resume(proc);
   1c626:	4620      	mov	r0, r4
   1c628:	f7ff ffca 	bl	1c5c0 <ble_gattc_read_long_resume>
    if (rc != 0) {
   1c62c:	4603      	mov	r3, r0
   1c62e:	b160      	cbz	r0, 1c64a <ble_gattc_read_long_rx_read_rsp+0x64>
        return BLE_HS_EDONE;
   1c630:	230e      	movs	r3, #14
   1c632:	e00a      	b.n	1c64a <ble_gattc_read_long_rx_read_rsp+0x64>
        ble_gattc_read_long_cb(proc, BLE_HS_EDONE, 0, NULL);
   1c634:	2300      	movs	r3, #0
   1c636:	461a      	mov	r2, r3
   1c638:	210e      	movs	r1, #14
   1c63a:	4620      	mov	r0, r4
   1c63c:	f7ff fcd8 	bl	1bff0 <ble_gattc_read_long_cb>
        return BLE_HS_EDONE;
   1c640:	230e      	movs	r3, #14
   1c642:	e002      	b.n	1c64a <ble_gattc_read_long_rx_read_rsp+0x64>
        return BLE_HS_EDONE;
   1c644:	230e      	movs	r3, #14
   1c646:	e000      	b.n	1c64a <ble_gattc_read_long_rx_read_rsp+0x64>
   1c648:	230e      	movs	r3, #14
}
   1c64a:	4618      	mov	r0, r3
   1c64c:	b003      	add	sp, #12
   1c64e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return BLE_HS_EDONE;
   1c650:	230e      	movs	r3, #14
   1c652:	e7fa      	b.n	1c64a <ble_gattc_read_long_rx_read_rsp+0x64>

0001c654 <ble_gattc_disc_all_dscs_tx>:
{
   1c654:	b508      	push	{r3, lr}
                                  proc->disc_all_dscs.prev_handle + 1,
   1c656:	89c1      	ldrh	r1, [r0, #14]
    rc = ble_att_clt_tx_find_info(proc->conn_handle,
   1c658:	3101      	adds	r1, #1
   1c65a:	8a02      	ldrh	r2, [r0, #16]
   1c65c:	b289      	uxth	r1, r1
   1c65e:	8900      	ldrh	r0, [r0, #8]
   1c660:	f007 fbcb 	bl	23dfa <ble_att_clt_tx_find_info>
}
   1c664:	bd08      	pop	{r3, pc}

0001c666 <ble_gattc_disc_all_dscs_resume>:
{
   1c666:	b538      	push	{r3, r4, r5, lr}
   1c668:	4605      	mov	r5, r0
    status = ble_gattc_disc_all_dscs_tx(proc);
   1c66a:	f7ff fff3 	bl	1c654 <ble_gattc_disc_all_dscs_tx>
    rc = ble_gattc_process_resume_status(proc, status);
   1c66e:	4601      	mov	r1, r0
   1c670:	4628      	mov	r0, r5
   1c672:	f7ff fd95 	bl	1c1a0 <ble_gattc_process_resume_status>
    if (rc != 0) {
   1c676:	4604      	mov	r4, r0
   1c678:	b908      	cbnz	r0, 1c67e <ble_gattc_disc_all_dscs_resume+0x18>
}
   1c67a:	4620      	mov	r0, r4
   1c67c:	bd38      	pop	{r3, r4, r5, pc}
        ble_gattc_disc_all_dscs_cb(proc, rc, 0, NULL);
   1c67e:	2300      	movs	r3, #0
   1c680:	461a      	mov	r2, r3
   1c682:	4601      	mov	r1, r0
   1c684:	4628      	mov	r0, r5
   1c686:	f7ff fbe1 	bl	1be4c <ble_gattc_disc_all_dscs_cb>
        return rc;
   1c68a:	e7f6      	b.n	1c67a <ble_gattc_disc_all_dscs_resume+0x14>

0001c68c <ble_gattc_disc_all_dscs_rx_complete>:
{
   1c68c:	b510      	push	{r4, lr}
    if (status != 0) {
   1c68e:	b949      	cbnz	r1, 1c6a4 <ble_gattc_disc_all_dscs_rx_complete+0x18>
    if (proc->disc_all_dscs.prev_handle == proc->disc_all_dscs.end_handle) {
   1c690:	89c2      	ldrh	r2, [r0, #14]
   1c692:	8a03      	ldrh	r3, [r0, #16]
   1c694:	429a      	cmp	r2, r3
   1c696:	d00b      	beq.n	1c6b0 <ble_gattc_disc_all_dscs_rx_complete+0x24>
    rc = ble_gattc_disc_all_dscs_resume(proc);
   1c698:	f7ff ffe5 	bl	1c666 <ble_gattc_disc_all_dscs_resume>
    if (rc != 0) {
   1c69c:	4603      	mov	r3, r0
   1c69e:	b970      	cbnz	r0, 1c6be <ble_gattc_disc_all_dscs_rx_complete+0x32>
}
   1c6a0:	4618      	mov	r0, r3
   1c6a2:	bd10      	pop	{r4, pc}
        ble_gattc_disc_all_dscs_cb(proc, status, 0, NULL);
   1c6a4:	2300      	movs	r3, #0
   1c6a6:	461a      	mov	r2, r3
   1c6a8:	f7ff fbd0 	bl	1be4c <ble_gattc_disc_all_dscs_cb>
        return BLE_HS_EDONE;
   1c6ac:	230e      	movs	r3, #14
   1c6ae:	e7f7      	b.n	1c6a0 <ble_gattc_disc_all_dscs_rx_complete+0x14>
        ble_gattc_disc_all_dscs_cb(proc, BLE_HS_EDONE, 0, NULL);
   1c6b0:	2300      	movs	r3, #0
   1c6b2:	461a      	mov	r2, r3
   1c6b4:	210e      	movs	r1, #14
   1c6b6:	f7ff fbc9 	bl	1be4c <ble_gattc_disc_all_dscs_cb>
        return BLE_HS_EDONE;
   1c6ba:	230e      	movs	r3, #14
   1c6bc:	e7f0      	b.n	1c6a0 <ble_gattc_disc_all_dscs_rx_complete+0x14>
        return BLE_HS_EDONE;
   1c6be:	230e      	movs	r3, #14
   1c6c0:	e7ee      	b.n	1c6a0 <ble_gattc_disc_all_dscs_rx_complete+0x14>
	...

0001c6c4 <ble_gattc_disc_chr_uuid_tx>:
{
   1c6c4:	b500      	push	{lr}
   1c6c6:	b083      	sub	sp, #12
    ble_uuid16_t uuid = BLE_UUID16_INIT(BLE_ATT_UUID_CHARACTERISTIC);
   1c6c8:	4b07      	ldr	r3, [pc, #28]	; (1c6e8 <ble_gattc_disc_chr_uuid_tx+0x24>)
   1c6ca:	681a      	ldr	r2, [r3, #0]
   1c6cc:	ab02      	add	r3, sp, #8
   1c6ce:	f843 2d04 	str.w	r2, [r3, #-4]!
                                  proc->disc_chr_uuid.prev_handle + 1,
   1c6d2:	8c01      	ldrh	r1, [r0, #32]
    rc = ble_att_clt_tx_read_type(proc->conn_handle,
   1c6d4:	3101      	adds	r1, #1
   1c6d6:	8c42      	ldrh	r2, [r0, #34]	; 0x22
   1c6d8:	b289      	uxth	r1, r1
   1c6da:	8900      	ldrh	r0, [r0, #8]
   1c6dc:	f007 fc0e 	bl	23efc <ble_att_clt_tx_read_type>
}
   1c6e0:	b003      	add	sp, #12
   1c6e2:	f85d fb04 	ldr.w	pc, [sp], #4
   1c6e6:	bf00      	nop
   1c6e8:	0002b328 	.word	0x0002b328

0001c6ec <ble_gattc_disc_chr_uuid_resume>:
{
   1c6ec:	b538      	push	{r3, r4, r5, lr}
   1c6ee:	4605      	mov	r5, r0
    status = ble_gattc_disc_chr_uuid_tx(proc);
   1c6f0:	f7ff ffe8 	bl	1c6c4 <ble_gattc_disc_chr_uuid_tx>
    rc = ble_gattc_process_resume_status(proc, status);
   1c6f4:	4601      	mov	r1, r0
   1c6f6:	4628      	mov	r0, r5
   1c6f8:	f7ff fd52 	bl	1c1a0 <ble_gattc_process_resume_status>
    if (rc != 0) {
   1c6fc:	4604      	mov	r4, r0
   1c6fe:	b908      	cbnz	r0, 1c704 <ble_gattc_disc_chr_uuid_resume+0x18>
}
   1c700:	4620      	mov	r0, r4
   1c702:	bd38      	pop	{r3, r4, r5, pc}
        ble_gattc_disc_chr_uuid_cb(proc, rc, 0, NULL);
   1c704:	2300      	movs	r3, #0
   1c706:	461a      	mov	r2, r3
   1c708:	4601      	mov	r1, r0
   1c70a:	4628      	mov	r0, r5
   1c70c:	f7ff fb6c 	bl	1bde8 <ble_gattc_disc_chr_uuid_cb>
        return rc;
   1c710:	e7f6      	b.n	1c700 <ble_gattc_disc_chr_uuid_resume+0x14>

0001c712 <ble_gattc_disc_chr_uuid_rx_complete>:
{
   1c712:	b510      	push	{r4, lr}
    if (status != 0) {
   1c714:	b949      	cbnz	r1, 1c72a <ble_gattc_disc_chr_uuid_rx_complete+0x18>
    if (proc->disc_chr_uuid.prev_handle == proc->disc_chr_uuid.end_handle) {
   1c716:	8c02      	ldrh	r2, [r0, #32]
   1c718:	8c43      	ldrh	r3, [r0, #34]	; 0x22
   1c71a:	429a      	cmp	r2, r3
   1c71c:	d00b      	beq.n	1c736 <ble_gattc_disc_chr_uuid_rx_complete+0x24>
    rc = ble_gattc_disc_chr_uuid_resume(proc);
   1c71e:	f7ff ffe5 	bl	1c6ec <ble_gattc_disc_chr_uuid_resume>
    if (rc != 0) {
   1c722:	4603      	mov	r3, r0
   1c724:	b970      	cbnz	r0, 1c744 <ble_gattc_disc_chr_uuid_rx_complete+0x32>
}
   1c726:	4618      	mov	r0, r3
   1c728:	bd10      	pop	{r4, pc}
        ble_gattc_disc_chr_uuid_cb(proc, status, 0, NULL);
   1c72a:	2300      	movs	r3, #0
   1c72c:	461a      	mov	r2, r3
   1c72e:	f7ff fb5b 	bl	1bde8 <ble_gattc_disc_chr_uuid_cb>
        return BLE_HS_EDONE;
   1c732:	230e      	movs	r3, #14
   1c734:	e7f7      	b.n	1c726 <ble_gattc_disc_chr_uuid_rx_complete+0x14>
        ble_gattc_disc_chr_uuid_cb(proc, BLE_HS_EDONE, 0, NULL);
   1c736:	2300      	movs	r3, #0
   1c738:	461a      	mov	r2, r3
   1c73a:	210e      	movs	r1, #14
   1c73c:	f7ff fb54 	bl	1bde8 <ble_gattc_disc_chr_uuid_cb>
        return BLE_HS_EDONE;
   1c740:	230e      	movs	r3, #14
   1c742:	e7f0      	b.n	1c726 <ble_gattc_disc_chr_uuid_rx_complete+0x14>
        return BLE_HS_EDONE;
   1c744:	230e      	movs	r3, #14
   1c746:	e7ee      	b.n	1c726 <ble_gattc_disc_chr_uuid_rx_complete+0x14>

0001c748 <ble_gattc_disc_all_chrs_tx>:
{
   1c748:	b500      	push	{lr}
   1c74a:	b083      	sub	sp, #12
    ble_uuid16_t uuid = BLE_UUID16_INIT(BLE_ATT_UUID_CHARACTERISTIC);
   1c74c:	4b07      	ldr	r3, [pc, #28]	; (1c76c <ble_gattc_disc_all_chrs_tx+0x24>)
   1c74e:	681a      	ldr	r2, [r3, #0]
   1c750:	ab02      	add	r3, sp, #8
   1c752:	f843 2d04 	str.w	r2, [r3, #-4]!
                                  proc->disc_all_chrs.prev_handle + 1,
   1c756:	8981      	ldrh	r1, [r0, #12]
    rc = ble_att_clt_tx_read_type(proc->conn_handle,
   1c758:	3101      	adds	r1, #1
   1c75a:	89c2      	ldrh	r2, [r0, #14]
   1c75c:	b289      	uxth	r1, r1
   1c75e:	8900      	ldrh	r0, [r0, #8]
   1c760:	f007 fbcc 	bl	23efc <ble_att_clt_tx_read_type>
}
   1c764:	b003      	add	sp, #12
   1c766:	f85d fb04 	ldr.w	pc, [sp], #4
   1c76a:	bf00      	nop
   1c76c:	0002b328 	.word	0x0002b328

0001c770 <ble_gattc_disc_all_chrs_resume>:
{
   1c770:	b538      	push	{r3, r4, r5, lr}
   1c772:	4605      	mov	r5, r0
    status = ble_gattc_disc_all_chrs_tx(proc);
   1c774:	f7ff ffe8 	bl	1c748 <ble_gattc_disc_all_chrs_tx>
    rc = ble_gattc_process_resume_status(proc, status);
   1c778:	4601      	mov	r1, r0
   1c77a:	4628      	mov	r0, r5
   1c77c:	f7ff fd10 	bl	1c1a0 <ble_gattc_process_resume_status>
    if (rc != 0) {
   1c780:	4604      	mov	r4, r0
   1c782:	b908      	cbnz	r0, 1c788 <ble_gattc_disc_all_chrs_resume+0x18>
}
   1c784:	4620      	mov	r0, r4
   1c786:	bd38      	pop	{r3, r4, r5, pc}
        ble_gattc_disc_all_chrs_cb(proc, rc, 0, NULL);
   1c788:	2300      	movs	r3, #0
   1c78a:	461a      	mov	r2, r3
   1c78c:	4601      	mov	r1, r0
   1c78e:	4628      	mov	r0, r5
   1c790:	f7ff faf8 	bl	1bd84 <ble_gattc_disc_all_chrs_cb>
        return rc;
   1c794:	e7f6      	b.n	1c784 <ble_gattc_disc_all_chrs_resume+0x14>

0001c796 <ble_gattc_disc_all_chrs_rx_complete>:
{
   1c796:	b510      	push	{r4, lr}
    if (status != 0) {
   1c798:	b949      	cbnz	r1, 1c7ae <ble_gattc_disc_all_chrs_rx_complete+0x18>
    if (proc->disc_all_chrs.prev_handle == proc->disc_all_chrs.end_handle) {
   1c79a:	8982      	ldrh	r2, [r0, #12]
   1c79c:	89c3      	ldrh	r3, [r0, #14]
   1c79e:	429a      	cmp	r2, r3
   1c7a0:	d00b      	beq.n	1c7ba <ble_gattc_disc_all_chrs_rx_complete+0x24>
    rc = ble_gattc_disc_all_chrs_resume(proc);
   1c7a2:	f7ff ffe5 	bl	1c770 <ble_gattc_disc_all_chrs_resume>
    if (rc != 0) {
   1c7a6:	4603      	mov	r3, r0
   1c7a8:	b970      	cbnz	r0, 1c7c8 <ble_gattc_disc_all_chrs_rx_complete+0x32>
}
   1c7aa:	4618      	mov	r0, r3
   1c7ac:	bd10      	pop	{r4, pc}
        ble_gattc_disc_all_chrs_cb(proc, status, 0, NULL);
   1c7ae:	2300      	movs	r3, #0
   1c7b0:	461a      	mov	r2, r3
   1c7b2:	f7ff fae7 	bl	1bd84 <ble_gattc_disc_all_chrs_cb>
        return BLE_HS_EDONE;
   1c7b6:	230e      	movs	r3, #14
   1c7b8:	e7f7      	b.n	1c7aa <ble_gattc_disc_all_chrs_rx_complete+0x14>
        ble_gattc_disc_all_chrs_cb(proc, BLE_HS_EDONE, 0, NULL);
   1c7ba:	2300      	movs	r3, #0
   1c7bc:	461a      	mov	r2, r3
   1c7be:	210e      	movs	r1, #14
   1c7c0:	f7ff fae0 	bl	1bd84 <ble_gattc_disc_all_chrs_cb>
        return BLE_HS_EDONE;
   1c7c4:	230e      	movs	r3, #14
   1c7c6:	e7f0      	b.n	1c7aa <ble_gattc_disc_all_chrs_rx_complete+0x14>
        return BLE_HS_EDONE;
   1c7c8:	230e      	movs	r3, #14
   1c7ca:	e7ee      	b.n	1c7aa <ble_gattc_disc_all_chrs_rx_complete+0x14>

0001c7cc <ble_gattc_find_inc_svcs_tx>:
{
   1c7cc:	b500      	push	{lr}
   1c7ce:	b083      	sub	sp, #12
    ble_uuid16_t uuid = BLE_UUID16_INIT(BLE_ATT_UUID_INCLUDE);
   1c7d0:	4b09      	ldr	r3, [pc, #36]	; (1c7f8 <ble_gattc_find_inc_svcs_tx+0x2c>)
   1c7d2:	685b      	ldr	r3, [r3, #4]
   1c7d4:	9301      	str	r3, [sp, #4]
    if (proc->find_inc_svcs.cur_start == 0) {
   1c7d6:	8a01      	ldrh	r1, [r0, #16]
   1c7d8:	b951      	cbnz	r1, 1c7f0 <ble_gattc_find_inc_svcs_tx+0x24>
                                      proc->find_inc_svcs.prev_handle + 1,
   1c7da:	8981      	ldrh	r1, [r0, #12]
        rc = ble_att_clt_tx_read_type(proc->conn_handle,
   1c7dc:	3101      	adds	r1, #1
   1c7de:	ab01      	add	r3, sp, #4
   1c7e0:	89c2      	ldrh	r2, [r0, #14]
   1c7e2:	b289      	uxth	r1, r1
   1c7e4:	8900      	ldrh	r0, [r0, #8]
   1c7e6:	f007 fb89 	bl	23efc <ble_att_clt_tx_read_type>
}
   1c7ea:	b003      	add	sp, #12
   1c7ec:	f85d fb04 	ldr.w	pc, [sp], #4
        rc = ble_att_clt_tx_read(proc->conn_handle,
   1c7f0:	8900      	ldrh	r0, [r0, #8]
   1c7f2:	f007 fbe0 	bl	23fb6 <ble_att_clt_tx_read>
   1c7f6:	e7f8      	b.n	1c7ea <ble_gattc_find_inc_svcs_tx+0x1e>
   1c7f8:	0002b328 	.word	0x0002b328

0001c7fc <ble_gattc_find_inc_svcs_resume>:
{
   1c7fc:	b538      	push	{r3, r4, r5, lr}
   1c7fe:	4605      	mov	r5, r0
    status = ble_gattc_find_inc_svcs_tx(proc);
   1c800:	f7ff ffe4 	bl	1c7cc <ble_gattc_find_inc_svcs_tx>
    rc = ble_gattc_process_resume_status(proc, status);
   1c804:	4601      	mov	r1, r0
   1c806:	4628      	mov	r0, r5
   1c808:	f7ff fcca 	bl	1c1a0 <ble_gattc_process_resume_status>
    if (rc != 0) {
   1c80c:	4604      	mov	r4, r0
   1c80e:	b908      	cbnz	r0, 1c814 <ble_gattc_find_inc_svcs_resume+0x18>
}
   1c810:	4620      	mov	r0, r4
   1c812:	bd38      	pop	{r3, r4, r5, pc}
        ble_gattc_find_inc_svcs_cb(proc, rc, 0, NULL);
   1c814:	2300      	movs	r3, #0
   1c816:	461a      	mov	r2, r3
   1c818:	4601      	mov	r1, r0
   1c81a:	4628      	mov	r0, r5
   1c81c:	f7ff fa7e 	bl	1bd1c <ble_gattc_find_inc_svcs_cb>
        return rc;
   1c820:	e7f6      	b.n	1c810 <ble_gattc_find_inc_svcs_resume+0x14>

0001c822 <ble_gattc_find_inc_svcs_rx_complete>:
{
   1c822:	b510      	push	{r4, lr}
    if (status != 0) {
   1c824:	b951      	cbnz	r1, 1c83c <ble_gattc_find_inc_svcs_rx_complete+0x1a>
    if (proc->find_inc_svcs.prev_handle == 0xffff) {
   1c826:	8982      	ldrh	r2, [r0, #12]
   1c828:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1c82c:	429a      	cmp	r2, r3
   1c82e:	d00b      	beq.n	1c848 <ble_gattc_find_inc_svcs_rx_complete+0x26>
    rc = ble_gattc_find_inc_svcs_resume(proc);
   1c830:	f7ff ffe4 	bl	1c7fc <ble_gattc_find_inc_svcs_resume>
    if (rc != 0) {
   1c834:	4603      	mov	r3, r0
   1c836:	b970      	cbnz	r0, 1c856 <ble_gattc_find_inc_svcs_rx_complete+0x34>
}
   1c838:	4618      	mov	r0, r3
   1c83a:	bd10      	pop	{r4, pc}
        ble_gattc_find_inc_svcs_cb(proc, status, 0, NULL);
   1c83c:	2300      	movs	r3, #0
   1c83e:	461a      	mov	r2, r3
   1c840:	f7ff fa6c 	bl	1bd1c <ble_gattc_find_inc_svcs_cb>
        return BLE_HS_EDONE;
   1c844:	230e      	movs	r3, #14
   1c846:	e7f7      	b.n	1c838 <ble_gattc_find_inc_svcs_rx_complete+0x16>
        ble_gattc_find_inc_svcs_cb(proc, BLE_HS_EDONE, 0, NULL);
   1c848:	2300      	movs	r3, #0
   1c84a:	461a      	mov	r2, r3
   1c84c:	210e      	movs	r1, #14
   1c84e:	f7ff fa65 	bl	1bd1c <ble_gattc_find_inc_svcs_cb>
        return BLE_HS_EDONE;
   1c852:	230e      	movs	r3, #14
   1c854:	e7f0      	b.n	1c838 <ble_gattc_find_inc_svcs_rx_complete+0x16>
        return BLE_HS_EDONE;
   1c856:	230e      	movs	r3, #14
   1c858:	e7ee      	b.n	1c838 <ble_gattc_find_inc_svcs_rx_complete+0x16>

0001c85a <ble_gattc_disc_svc_uuid_tx>:
{
   1c85a:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c85c:	b087      	sub	sp, #28
   1c85e:	4604      	mov	r4, r0
    ble_uuid_flat(&proc->disc_svc_uuid.service_uuid.u, val);
   1c860:	f100 060c 	add.w	r6, r0, #12
   1c864:	ad02      	add	r5, sp, #8
   1c866:	4629      	mov	r1, r5
   1c868:	4630      	mov	r0, r6
   1c86a:	f006 fef9 	bl	23660 <ble_uuid_flat>
    rc = ble_att_clt_tx_find_type_value(proc->conn_handle,
   1c86e:	8927      	ldrh	r7, [r4, #8]
                                        proc->disc_svc_uuid.prev_handle + 1,
   1c870:	8c24      	ldrh	r4, [r4, #32]
    rc = ble_att_clt_tx_find_type_value(proc->conn_handle,
   1c872:	3401      	adds	r4, #1
   1c874:	b2a4      	uxth	r4, r4
   1c876:	4630      	mov	r0, r6
   1c878:	f006 ff1e 	bl	236b8 <ble_uuid_length>
   1c87c:	9001      	str	r0, [sp, #4]
   1c87e:	9500      	str	r5, [sp, #0]
   1c880:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1c884:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1c888:	4621      	mov	r1, r4
   1c88a:	4638      	mov	r0, r7
   1c88c:	f007 faf8 	bl	23e80 <ble_att_clt_tx_find_type_value>
}
   1c890:	b007      	add	sp, #28
   1c892:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001c894 <ble_gattc_disc_svc_uuid_resume>:
{
   1c894:	b538      	push	{r3, r4, r5, lr}
   1c896:	4605      	mov	r5, r0
    status = ble_gattc_disc_svc_uuid_tx(proc);
   1c898:	f7ff ffdf 	bl	1c85a <ble_gattc_disc_svc_uuid_tx>
    rc = ble_gattc_process_resume_status(proc, status);
   1c89c:	4601      	mov	r1, r0
   1c89e:	4628      	mov	r0, r5
   1c8a0:	f7ff fc7e 	bl	1c1a0 <ble_gattc_process_resume_status>
    if (rc != 0) {
   1c8a4:	4604      	mov	r4, r0
   1c8a6:	b908      	cbnz	r0, 1c8ac <ble_gattc_disc_svc_uuid_resume+0x18>
}
   1c8a8:	4620      	mov	r0, r4
   1c8aa:	bd38      	pop	{r3, r4, r5, pc}
        ble_gattc_disc_svc_uuid_cb(proc, rc, 0, NULL);
   1c8ac:	2300      	movs	r3, #0
   1c8ae:	461a      	mov	r2, r3
   1c8b0:	4601      	mov	r1, r0
   1c8b2:	4628      	mov	r0, r5
   1c8b4:	f7ff f9da 	bl	1bc6c <ble_gattc_disc_svc_uuid_cb>
        return rc;
   1c8b8:	e7f6      	b.n	1c8a8 <ble_gattc_disc_svc_uuid_resume+0x14>

0001c8ba <ble_gattc_disc_svc_uuid_rx_complete>:
{
   1c8ba:	b510      	push	{r4, lr}
    if (status != 0) {
   1c8bc:	b951      	cbnz	r1, 1c8d4 <ble_gattc_disc_svc_uuid_rx_complete+0x1a>
    if (proc->disc_svc_uuid.prev_handle == 0xffff) {
   1c8be:	8c02      	ldrh	r2, [r0, #32]
   1c8c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1c8c4:	429a      	cmp	r2, r3
   1c8c6:	d00b      	beq.n	1c8e0 <ble_gattc_disc_svc_uuid_rx_complete+0x26>
    rc = ble_gattc_disc_svc_uuid_resume(proc);
   1c8c8:	f7ff ffe4 	bl	1c894 <ble_gattc_disc_svc_uuid_resume>
    if (rc != 0) {
   1c8cc:	4603      	mov	r3, r0
   1c8ce:	b970      	cbnz	r0, 1c8ee <ble_gattc_disc_svc_uuid_rx_complete+0x34>
}
   1c8d0:	4618      	mov	r0, r3
   1c8d2:	bd10      	pop	{r4, pc}
        ble_gattc_disc_svc_uuid_cb(proc, status, 0, NULL);
   1c8d4:	2300      	movs	r3, #0
   1c8d6:	461a      	mov	r2, r3
   1c8d8:	f7ff f9c8 	bl	1bc6c <ble_gattc_disc_svc_uuid_cb>
        return BLE_HS_EDONE;
   1c8dc:	230e      	movs	r3, #14
   1c8de:	e7f7      	b.n	1c8d0 <ble_gattc_disc_svc_uuid_rx_complete+0x16>
        ble_gattc_disc_svc_uuid_cb(proc, BLE_HS_EDONE, 0, NULL);
   1c8e0:	2300      	movs	r3, #0
   1c8e2:	461a      	mov	r2, r3
   1c8e4:	210e      	movs	r1, #14
   1c8e6:	f7ff f9c1 	bl	1bc6c <ble_gattc_disc_svc_uuid_cb>
        return BLE_HS_EDONE;
   1c8ea:	230e      	movs	r3, #14
   1c8ec:	e7f0      	b.n	1c8d0 <ble_gattc_disc_svc_uuid_rx_complete+0x16>
        return BLE_HS_EDONE;
   1c8ee:	230e      	movs	r3, #14
   1c8f0:	e7ee      	b.n	1c8d0 <ble_gattc_disc_svc_uuid_rx_complete+0x16>
	...

0001c8f4 <ble_gattc_disc_all_svcs_tx>:
{
   1c8f4:	b500      	push	{lr}
   1c8f6:	b083      	sub	sp, #12
    ble_uuid16_t uuid = BLE_UUID16_INIT(BLE_ATT_UUID_PRIMARY_SERVICE);
   1c8f8:	4b07      	ldr	r3, [pc, #28]	; (1c918 <ble_gattc_disc_all_svcs_tx+0x24>)
   1c8fa:	689a      	ldr	r2, [r3, #8]
   1c8fc:	ab02      	add	r3, sp, #8
   1c8fe:	f843 2d04 	str.w	r2, [r3, #-4]!
                                        proc->disc_all_svcs.prev_handle + 1,
   1c902:	8981      	ldrh	r1, [r0, #12]
    rc = ble_att_clt_tx_read_group_type(proc->conn_handle,
   1c904:	3101      	adds	r1, #1
   1c906:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1c90a:	b289      	uxth	r1, r1
   1c90c:	8900      	ldrh	r0, [r0, #8]
   1c90e:	f007 fb95 	bl	2403c <ble_att_clt_tx_read_group_type>
}
   1c912:	b003      	add	sp, #12
   1c914:	f85d fb04 	ldr.w	pc, [sp], #4
   1c918:	0002b328 	.word	0x0002b328

0001c91c <ble_gattc_disc_all_svcs_resume>:
{
   1c91c:	b538      	push	{r3, r4, r5, lr}
   1c91e:	4605      	mov	r5, r0
    status = ble_gattc_disc_all_svcs_tx(proc);
   1c920:	f7ff ffe8 	bl	1c8f4 <ble_gattc_disc_all_svcs_tx>
    rc = ble_gattc_process_resume_status(proc, status);
   1c924:	4601      	mov	r1, r0
   1c926:	4628      	mov	r0, r5
   1c928:	f7ff fc3a 	bl	1c1a0 <ble_gattc_process_resume_status>
    if (rc != 0) {
   1c92c:	4604      	mov	r4, r0
   1c92e:	b908      	cbnz	r0, 1c934 <ble_gattc_disc_all_svcs_resume+0x18>
}
   1c930:	4620      	mov	r0, r4
   1c932:	bd38      	pop	{r3, r4, r5, pc}
        ble_gattc_disc_all_svcs_cb(proc, rc, 0, NULL);
   1c934:	2300      	movs	r3, #0
   1c936:	461a      	mov	r2, r3
   1c938:	b281      	uxth	r1, r0
   1c93a:	4628      	mov	r0, r5
   1c93c:	f7ff f964 	bl	1bc08 <ble_gattc_disc_all_svcs_cb>
        return rc;
   1c940:	e7f6      	b.n	1c930 <ble_gattc_disc_all_svcs_resume+0x14>

0001c942 <ble_gattc_disc_all_svcs_rx_complete>:
{
   1c942:	b510      	push	{r4, lr}
    if (status != 0) {
   1c944:	b951      	cbnz	r1, 1c95c <ble_gattc_disc_all_svcs_rx_complete+0x1a>
    if (proc->disc_all_svcs.prev_handle == 0xffff) {
   1c946:	8982      	ldrh	r2, [r0, #12]
   1c948:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1c94c:	429a      	cmp	r2, r3
   1c94e:	d00c      	beq.n	1c96a <ble_gattc_disc_all_svcs_rx_complete+0x28>
    rc = ble_gattc_disc_all_svcs_resume(proc);
   1c950:	f7ff ffe4 	bl	1c91c <ble_gattc_disc_all_svcs_resume>
    if (rc != 0) {
   1c954:	4603      	mov	r3, r0
   1c956:	b978      	cbnz	r0, 1c978 <ble_gattc_disc_all_svcs_rx_complete+0x36>
}
   1c958:	4618      	mov	r0, r3
   1c95a:	bd10      	pop	{r4, pc}
        ble_gattc_disc_all_svcs_cb(proc, status, 0, NULL);
   1c95c:	2300      	movs	r3, #0
   1c95e:	461a      	mov	r2, r3
   1c960:	b289      	uxth	r1, r1
   1c962:	f7ff f951 	bl	1bc08 <ble_gattc_disc_all_svcs_cb>
        return BLE_HS_EDONE;
   1c966:	230e      	movs	r3, #14
   1c968:	e7f6      	b.n	1c958 <ble_gattc_disc_all_svcs_rx_complete+0x16>
        ble_gattc_disc_all_svcs_cb(proc, BLE_HS_EDONE, 0, NULL);
   1c96a:	2300      	movs	r3, #0
   1c96c:	461a      	mov	r2, r3
   1c96e:	210e      	movs	r1, #14
   1c970:	f7ff f94a 	bl	1bc08 <ble_gattc_disc_all_svcs_cb>
        return BLE_HS_EDONE;
   1c974:	230e      	movs	r3, #14
   1c976:	e7ef      	b.n	1c958 <ble_gattc_disc_all_svcs_rx_complete+0x16>
        return BLE_HS_EDONE;
   1c978:	230e      	movs	r3, #14
   1c97a:	e7ed      	b.n	1c958 <ble_gattc_disc_all_svcs_rx_complete+0x16>

0001c97c <ble_gattc_process_status>:
{
   1c97c:	b510      	push	{r4, lr}
   1c97e:	4604      	mov	r4, r0
    switch (status) {
   1c980:	b961      	cbnz	r1, 1c99c <ble_gattc_process_status+0x20>
        if (!(proc->flags & BLE_GATTC_PROC_F_STALLED)) {
   1c982:	7ac3      	ldrb	r3, [r0, #11]
   1c984:	f013 0f01 	tst.w	r3, #1
   1c988:	d005      	beq.n	1c996 <ble_gattc_process_status+0x1a>
        ble_gattc_proc_insert(proc);
   1c98a:	4620      	mov	r0, r4
   1c98c:	f7ff fcc0 	bl	1c310 <ble_gattc_proc_insert>
        ble_hs_timer_resched();
   1c990:	f001 fec0 	bl	1e714 <ble_hs_timer_resched>
}
   1c994:	bd10      	pop	{r4, pc}
            ble_gattc_proc_set_exp_timer(proc);
   1c996:	f7ff fc0d 	bl	1c1b4 <ble_gattc_proc_set_exp_timer>
   1c99a:	e7f6      	b.n	1c98a <ble_gattc_process_status+0xe>
        ble_gattc_proc_free(proc);
   1c99c:	f7ff fd00 	bl	1c3a0 <ble_gattc_proc_free>
}
   1c9a0:	e7f8      	b.n	1c994 <ble_gattc_process_status+0x18>
	...

0001c9a4 <ble_gattc_resume_procs>:
{
   1c9a4:	b510      	push	{r4, lr}
   1c9a6:	b082      	sub	sp, #8
    ble_gattc_resume_at = 0;
   1c9a8:	4b0d      	ldr	r3, [pc, #52]	; (1c9e0 <ble_gattc_resume_procs+0x3c>)
   1c9aa:	2200      	movs	r2, #0
   1c9ac:	601a      	str	r2, [r3, #0]
    ble_gattc_extract_stalled(&stall_list);
   1c9ae:	4668      	mov	r0, sp
   1c9b0:	f7ff fc6c 	bl	1c28c <ble_gattc_extract_stalled>
    STAILQ_FOREACH(proc, &stall_list, next) {
   1c9b4:	9c00      	ldr	r4, [sp, #0]
   1c9b6:	e00e      	b.n	1c9d6 <ble_gattc_resume_procs+0x32>
        resume_cb = ble_gattc_resume_dispatch_get(proc->op);
   1c9b8:	7aa0      	ldrb	r0, [r4, #10]
   1c9ba:	f7ff f899 	bl	1baf0 <ble_gattc_resume_dispatch_get>
   1c9be:	4602      	mov	r2, r0
        proc->flags &= ~BLE_GATTC_PROC_F_STALLED;
   1c9c0:	7ae3      	ldrb	r3, [r4, #11]
   1c9c2:	f023 0301 	bic.w	r3, r3, #1
   1c9c6:	72e3      	strb	r3, [r4, #11]
        rc = resume_cb(proc);
   1c9c8:	4620      	mov	r0, r4
   1c9ca:	4790      	blx	r2
        ble_gattc_process_status(proc, rc);
   1c9cc:	4601      	mov	r1, r0
   1c9ce:	4620      	mov	r0, r4
   1c9d0:	f7ff ffd4 	bl	1c97c <ble_gattc_process_status>
    STAILQ_FOREACH(proc, &stall_list, next) {
   1c9d4:	6824      	ldr	r4, [r4, #0]
   1c9d6:	2c00      	cmp	r4, #0
   1c9d8:	d1ee      	bne.n	1c9b8 <ble_gattc_resume_procs+0x14>
}
   1c9da:	b002      	add	sp, #8
   1c9dc:	bd10      	pop	{r4, pc}
   1c9de:	bf00      	nop
   1c9e0:	20002c38 	.word	0x20002c38

0001c9e4 <ble_gattc_proc_alloc>:
{
   1c9e4:	b510      	push	{r4, lr}
    proc = os_memblock_get(&ble_gattc_proc_pool);
   1c9e6:	4805      	ldr	r0, [pc, #20]	; (1c9fc <ble_gattc_proc_alloc+0x18>)
   1c9e8:	f7f0 faa2 	bl	cf30 <os_memblock_get>
    if (proc != NULL) {
   1c9ec:	4604      	mov	r4, r0
   1c9ee:	b118      	cbz	r0, 1c9f8 <ble_gattc_proc_alloc+0x14>
        memset(proc, 0, sizeof *proc);
   1c9f0:	2238      	movs	r2, #56	; 0x38
   1c9f2:	2100      	movs	r1, #0
   1c9f4:	f7f1 fd64 	bl	e4c0 <memset>
}
   1c9f8:	4620      	mov	r0, r4
   1c9fa:	bd10      	pop	{r4, pc}
   1c9fc:	20002c14 	.word	0x20002c14

0001ca00 <ble_gattc_log_proc_init>:
{
   1ca00:	b508      	push	{r3, lr}
    BLE_HS_LOG(INFO, "GATT procedure initiated: %s", name);
   1ca02:	4603      	mov	r3, r0
   1ca04:	4a02      	ldr	r2, [pc, #8]	; (1ca10 <ble_gattc_log_proc_init+0x10>)
   1ca06:	2101      	movs	r1, #1
   1ca08:	2004      	movs	r0, #4
   1ca0a:	f7f3 f8b1 	bl	fb70 <modlog_printf>
}
   1ca0e:	bd08      	pop	{r3, pc}
   1ca10:	0002b3a8 	.word	0x0002b3a8

0001ca14 <ble_gattc_log_notify>:
{
   1ca14:	b510      	push	{r4, lr}
   1ca16:	4604      	mov	r4, r0
    ble_gattc_log_proc_init("notify; ");
   1ca18:	4804      	ldr	r0, [pc, #16]	; (1ca2c <ble_gattc_log_notify+0x18>)
   1ca1a:	f7ff fff1 	bl	1ca00 <ble_gattc_log_proc_init>
    BLE_HS_LOG(INFO, "att_handle=%d\n", att_handle);
   1ca1e:	4623      	mov	r3, r4
   1ca20:	4a03      	ldr	r2, [pc, #12]	; (1ca30 <ble_gattc_log_notify+0x1c>)
   1ca22:	2101      	movs	r1, #1
   1ca24:	2004      	movs	r0, #4
   1ca26:	f7f3 f8a3 	bl	fb70 <modlog_printf>
}
   1ca2a:	bd10      	pop	{r4, pc}
   1ca2c:	0002b39c 	.word	0x0002b39c
   1ca30:	0002b3d0 	.word	0x0002b3d0

0001ca34 <ble_gattc_log_indicate>:
{
   1ca34:	b510      	push	{r4, lr}
   1ca36:	4604      	mov	r4, r0
    ble_gattc_log_proc_init("indicate; ");
   1ca38:	4804      	ldr	r0, [pc, #16]	; (1ca4c <ble_gattc_log_indicate+0x18>)
   1ca3a:	f7ff ffe1 	bl	1ca00 <ble_gattc_log_proc_init>
    BLE_HS_LOG(INFO, "att_handle=%d\n", att_handle);
   1ca3e:	4623      	mov	r3, r4
   1ca40:	4a03      	ldr	r2, [pc, #12]	; (1ca50 <ble_gattc_log_indicate+0x1c>)
   1ca42:	2101      	movs	r1, #1
   1ca44:	2004      	movs	r0, #4
   1ca46:	f7f3 f893 	bl	fb70 <modlog_printf>
}
   1ca4a:	bd10      	pop	{r4, pc}
   1ca4c:	0002b390 	.word	0x0002b390
   1ca50:	0002b3d0 	.word	0x0002b3d0

0001ca54 <ble_gattc_read_uuid_rx_adata>:
{
   1ca54:	b510      	push	{r4, lr}
   1ca56:	b082      	sub	sp, #8
   1ca58:	4604      	mov	r4, r0
   1ca5a:	460b      	mov	r3, r1
    attr.handle = adata->att_handle;
   1ca5c:	880a      	ldrh	r2, [r1, #0]
   1ca5e:	f8ad 2000 	strh.w	r2, [sp]
    attr.offset = 0;
   1ca62:	2200      	movs	r2, #0
   1ca64:	f8ad 2002 	strh.w	r2, [sp, #2]
    attr.om = ble_hs_mbuf_from_flat(adata->value, adata->value_len);
   1ca68:	8889      	ldrh	r1, [r1, #4]
   1ca6a:	6898      	ldr	r0, [r3, #8]
   1ca6c:	f003 fb1c 	bl	200a8 <ble_hs_mbuf_from_flat>
   1ca70:	9001      	str	r0, [sp, #4]
    if (attr.om == NULL) {
   1ca72:	b168      	cbz	r0, 1ca90 <ble_gattc_read_uuid_rx_adata+0x3c>
        rc = 0;
   1ca74:	2100      	movs	r1, #0
    rc = ble_gattc_read_uuid_cb(proc, rc, 0, &attr);
   1ca76:	466b      	mov	r3, sp
   1ca78:	2200      	movs	r2, #0
   1ca7a:	4620      	mov	r0, r4
   1ca7c:	f7ff fa7e 	bl	1bf7c <ble_gattc_read_uuid_cb>
   1ca80:	4604      	mov	r4, r0
    os_mbuf_free_chain(attr.om);
   1ca82:	9801      	ldr	r0, [sp, #4]
   1ca84:	f7f0 ffc7 	bl	da16 <os_mbuf_free_chain>
    if (rc != 0) {
   1ca88:	b924      	cbnz	r4, 1ca94 <ble_gattc_read_uuid_rx_adata+0x40>
}
   1ca8a:	4620      	mov	r0, r4
   1ca8c:	b002      	add	sp, #8
   1ca8e:	bd10      	pop	{r4, pc}
        rc = BLE_HS_ENOMEM;
   1ca90:	2106      	movs	r1, #6
   1ca92:	e7f0      	b.n	1ca76 <ble_gattc_read_uuid_rx_adata+0x22>
        return BLE_HS_EDONE;
   1ca94:	240e      	movs	r4, #14
   1ca96:	e7f8      	b.n	1ca8a <ble_gattc_read_uuid_rx_adata+0x36>

0001ca98 <ble_gattc_indicate_err>:
{
   1ca98:	b538      	push	{r3, r4, r5, lr}
   1ca9a:	4604      	mov	r4, r0
   1ca9c:	460d      	mov	r5, r1
    if (status != BLE_HS_ENOTCONN) {
   1ca9e:	2907      	cmp	r1, #7
   1caa0:	d004      	beq.n	1caac <ble_gattc_indicate_err+0x14>
        rc = ble_gatts_rx_indicate_ack(proc->conn_handle,
   1caa2:	8981      	ldrh	r1, [r0, #12]
   1caa4:	8900      	ldrh	r0, [r0, #8]
   1caa6:	f001 fb0d 	bl	1e0c4 <ble_gatts_rx_indicate_ack>
        if (rc != 0) {
   1caaa:	b940      	cbnz	r0, 1cabe <ble_gattc_indicate_err+0x26>
    ble_gap_notify_tx_event(status, proc->conn_handle,
   1caac:	2301      	movs	r3, #1
   1caae:	89a2      	ldrh	r2, [r4, #12]
   1cab0:	8921      	ldrh	r1, [r4, #8]
   1cab2:	4628      	mov	r0, r5
   1cab4:	f7fe feaf 	bl	1b816 <ble_gap_notify_tx_event>
    ble_gatts_send_next_indicate(proc->conn_handle);
   1cab8:	8920      	ldrh	r0, [r4, #8]
   1caba:	f001 fad7 	bl	1e06c <ble_gatts_send_next_indicate>
}
   1cabe:	bd38      	pop	{r3, r4, r5, pc}

0001cac0 <ble_gattc_indicate_rx_rsp>:
 * Handles an incoming handle-value-confirmation for the specified indication
 * proc.
 */
static void
ble_gattc_indicate_rx_rsp(struct ble_gattc_proc *proc)
{
   1cac0:	b510      	push	{r4, lr}
   1cac2:	4604      	mov	r4, r0
    int rc;

    ble_gattc_dbg_assert_proc_not_inserted(proc);

    rc = ble_gatts_rx_indicate_ack(proc->conn_handle,
   1cac4:	8981      	ldrh	r1, [r0, #12]
   1cac6:	8900      	ldrh	r0, [r0, #8]
   1cac8:	f001 fafc 	bl	1e0c4 <ble_gatts_rx_indicate_ack>
                                   proc->indicate.chr_val_handle);
    if (rc != 0) {
   1cacc:	b100      	cbz	r0, 1cad0 <ble_gattc_indicate_rx_rsp+0x10>
    ble_gap_notify_tx_event(BLE_HS_EDONE, proc->conn_handle,
                            proc->indicate.chr_val_handle, 1);

    /* Send the next indication if one is pending. */
    ble_gatts_send_next_indicate(proc->conn_handle);
}
   1cace:	bd10      	pop	{r4, pc}
    ble_gap_notify_tx_event(BLE_HS_EDONE, proc->conn_handle,
   1cad0:	2301      	movs	r3, #1
   1cad2:	89a2      	ldrh	r2, [r4, #12]
   1cad4:	8921      	ldrh	r1, [r4, #8]
   1cad6:	200e      	movs	r0, #14
   1cad8:	f7fe fe9d 	bl	1b816 <ble_gap_notify_tx_event>
    ble_gatts_send_next_indicate(proc->conn_handle);
   1cadc:	8920      	ldrh	r0, [r4, #8]
   1cade:	f001 fac5 	bl	1e06c <ble_gatts_send_next_indicate>
   1cae2:	e7f4      	b.n	1cace <ble_gattc_indicate_rx_rsp+0xe>

0001cae4 <ble_gattc_disc_all_svcs_rx_adata>:
{
   1cae4:	b570      	push	{r4, r5, r6, lr}
   1cae6:	b086      	sub	sp, #24
   1cae8:	4606      	mov	r6, r0
   1caea:	460d      	mov	r5, r1
    switch (adata->value_len) {
   1caec:	684a      	ldr	r2, [r1, #4]
   1caee:	2a02      	cmp	r2, #2
   1caf0:	d00c      	beq.n	1cb0c <ble_gattc_disc_all_svcs_rx_adata+0x28>
   1caf2:	2a10      	cmp	r2, #16
   1caf4:	d00a      	beq.n	1cb0c <ble_gattc_disc_all_svcs_rx_adata+0x28>
        rc = BLE_HS_EBADDATA;
   1caf6:	240a      	movs	r4, #10
    cbrc = ble_gattc_disc_all_svcs_cb(proc, rc, 0, &service);
   1caf8:	466b      	mov	r3, sp
   1cafa:	2200      	movs	r2, #0
   1cafc:	b2a1      	uxth	r1, r4
   1cafe:	4630      	mov	r0, r6
   1cb00:	f7ff f882 	bl	1bc08 <ble_gattc_disc_all_svcs_cb>
    if (rc != 0 || cbrc != 0) {
   1cb04:	b9d4      	cbnz	r4, 1cb3c <ble_gattc_disc_all_svcs_rx_adata+0x58>
   1cb06:	b9b8      	cbnz	r0, 1cb38 <ble_gattc_disc_all_svcs_rx_adata+0x54>
}
   1cb08:	b006      	add	sp, #24
   1cb0a:	bd70      	pop	{r4, r5, r6, pc}
        rc = ble_uuid_init_from_att_buf(&service.uuid, adata->value,
   1cb0c:	68a9      	ldr	r1, [r5, #8]
   1cb0e:	a801      	add	r0, sp, #4
   1cb10:	f006 fd70 	bl	235f4 <ble_uuid_init_from_att_buf>
        if (rc != 0) {
   1cb14:	4604      	mov	r4, r0
   1cb16:	b958      	cbnz	r0, 1cb30 <ble_gattc_disc_all_svcs_rx_adata+0x4c>
    if (adata->end_group_handle <= proc->disc_all_svcs.prev_handle) {
   1cb18:	886b      	ldrh	r3, [r5, #2]
   1cb1a:	89b2      	ldrh	r2, [r6, #12]
   1cb1c:	4293      	cmp	r3, r2
   1cb1e:	d909      	bls.n	1cb34 <ble_gattc_disc_all_svcs_rx_adata+0x50>
    proc->disc_all_svcs.prev_handle = adata->end_group_handle;
   1cb20:	81b3      	strh	r3, [r6, #12]
    service.start_handle = adata->att_handle;
   1cb22:	882b      	ldrh	r3, [r5, #0]
   1cb24:	f8ad 3000 	strh.w	r3, [sp]
    service.end_handle = adata->end_group_handle;
   1cb28:	886b      	ldrh	r3, [r5, #2]
   1cb2a:	f8ad 3002 	strh.w	r3, [sp, #2]
   1cb2e:	e7e3      	b.n	1caf8 <ble_gattc_disc_all_svcs_rx_adata+0x14>
            rc = BLE_HS_EBADDATA;
   1cb30:	240a      	movs	r4, #10
   1cb32:	e7e1      	b.n	1caf8 <ble_gattc_disc_all_svcs_rx_adata+0x14>
        rc = BLE_HS_EBADDATA;
   1cb34:	240a      	movs	r4, #10
   1cb36:	e7df      	b.n	1caf8 <ble_gattc_disc_all_svcs_rx_adata+0x14>
        return BLE_HS_EDONE;
   1cb38:	200e      	movs	r0, #14
   1cb3a:	e7e5      	b.n	1cb08 <ble_gattc_disc_all_svcs_rx_adata+0x24>
   1cb3c:	200e      	movs	r0, #14
   1cb3e:	e7e3      	b.n	1cb08 <ble_gattc_disc_all_svcs_rx_adata+0x24>

0001cb40 <ble_gattc_disc_all_chrs_rx_adata>:
{
   1cb40:	b570      	push	{r4, r5, r6, lr}
   1cb42:	b088      	sub	sp, #32
   1cb44:	4606      	mov	r6, r0
   1cb46:	460c      	mov	r4, r1
    memset(&chr, 0, sizeof chr);
   1cb48:	2300      	movs	r3, #0
   1cb4a:	9301      	str	r3, [sp, #4]
   1cb4c:	9302      	str	r3, [sp, #8]
   1cb4e:	9303      	str	r3, [sp, #12]
   1cb50:	9304      	str	r3, [sp, #16]
   1cb52:	9305      	str	r3, [sp, #20]
   1cb54:	9306      	str	r3, [sp, #24]
   1cb56:	9307      	str	r3, [sp, #28]
    chr.def_handle = adata->att_handle;
   1cb58:	880b      	ldrh	r3, [r1, #0]
   1cb5a:	f8ad 3004 	strh.w	r3, [sp, #4]
    switch (adata->value_len) {
   1cb5e:	684a      	ldr	r2, [r1, #4]
   1cb60:	2a05      	cmp	r2, #5
   1cb62:	d00c      	beq.n	1cb7e <ble_gattc_disc_all_chrs_rx_adata+0x3e>
   1cb64:	2a13      	cmp	r2, #19
   1cb66:	d00a      	beq.n	1cb7e <ble_gattc_disc_all_chrs_rx_adata+0x3e>
        rc = BLE_HS_EBADDATA;
   1cb68:	250a      	movs	r5, #10
    cbrc = ble_gattc_disc_all_chrs_cb(proc, rc, 0, &chr);
   1cb6a:	ab01      	add	r3, sp, #4
   1cb6c:	2200      	movs	r2, #0
   1cb6e:	4629      	mov	r1, r5
   1cb70:	4630      	mov	r0, r6
   1cb72:	f7ff f907 	bl	1bd84 <ble_gattc_disc_all_chrs_cb>
    if (rc != 0 || cbrc != 0) {
   1cb76:	b9fd      	cbnz	r5, 1cbb8 <ble_gattc_disc_all_chrs_rx_adata+0x78>
   1cb78:	b9e0      	cbnz	r0, 1cbb4 <ble_gattc_disc_all_chrs_rx_adata+0x74>
}
   1cb7a:	b008      	add	sp, #32
   1cb7c:	bd70      	pop	{r4, r5, r6, pc}
        rc = ble_uuid_init_from_att_buf(&chr.uuid, adata->value + 3,
   1cb7e:	68a1      	ldr	r1, [r4, #8]
   1cb80:	3a03      	subs	r2, #3
   1cb82:	3103      	adds	r1, #3
   1cb84:	a803      	add	r0, sp, #12
   1cb86:	f006 fd35 	bl	235f4 <ble_uuid_init_from_att_buf>
        if (rc != 0) {
   1cb8a:	4605      	mov	r5, r0
   1cb8c:	b108      	cbz	r0, 1cb92 <ble_gattc_disc_all_chrs_rx_adata+0x52>
            rc = BLE_HS_EBADDATA;
   1cb8e:	250a      	movs	r5, #10
   1cb90:	e7eb      	b.n	1cb6a <ble_gattc_disc_all_chrs_rx_adata+0x2a>
    chr.properties = adata->value[0];
   1cb92:	68a0      	ldr	r0, [r4, #8]
   1cb94:	f810 3b01 	ldrb.w	r3, [r0], #1
   1cb98:	f88d 3008 	strb.w	r3, [sp, #8]
    chr.val_handle = get_le16(adata->value + 1);
   1cb9c:	f00c fdf7 	bl	2978e <get_le16>
   1cba0:	f8ad 0006 	strh.w	r0, [sp, #6]
    if (adata->att_handle <= proc->disc_all_chrs.prev_handle) {
   1cba4:	8823      	ldrh	r3, [r4, #0]
   1cba6:	89b2      	ldrh	r2, [r6, #12]
   1cba8:	4293      	cmp	r3, r2
   1cbaa:	d901      	bls.n	1cbb0 <ble_gattc_disc_all_chrs_rx_adata+0x70>
    proc->disc_all_chrs.prev_handle = adata->att_handle;
   1cbac:	81b3      	strh	r3, [r6, #12]
   1cbae:	e7dc      	b.n	1cb6a <ble_gattc_disc_all_chrs_rx_adata+0x2a>
        rc = BLE_HS_EBADDATA;
   1cbb0:	250a      	movs	r5, #10
   1cbb2:	e7da      	b.n	1cb6a <ble_gattc_disc_all_chrs_rx_adata+0x2a>
        return BLE_HS_EDONE;
   1cbb4:	200e      	movs	r0, #14
   1cbb6:	e7e0      	b.n	1cb7a <ble_gattc_disc_all_chrs_rx_adata+0x3a>
   1cbb8:	200e      	movs	r0, #14
   1cbba:	e7de      	b.n	1cb7a <ble_gattc_disc_all_chrs_rx_adata+0x3a>

0001cbbc <ble_gattc_find_inc_svcs_rx_adata>:
    if (proc->find_inc_svcs.cur_start != 0) {
   1cbbc:	8a03      	ldrh	r3, [r0, #16]
   1cbbe:	2b00      	cmp	r3, #0
   1cbc0:	d13f      	bne.n	1cc42 <ble_gattc_find_inc_svcs_rx_adata+0x86>
{
   1cbc2:	b530      	push	{r4, r5, lr}
   1cbc4:	b087      	sub	sp, #28
   1cbc6:	460c      	mov	r4, r1
   1cbc8:	4605      	mov	r5, r0
    if (adata->att_handle <= proc->find_inc_svcs.prev_handle) {
   1cbca:	880b      	ldrh	r3, [r1, #0]
   1cbcc:	8982      	ldrh	r2, [r0, #12]
   1cbce:	4293      	cmp	r3, r2
   1cbd0:	d928      	bls.n	1cc24 <ble_gattc_find_inc_svcs_rx_adata+0x68>
    proc->find_inc_svcs.prev_handle = adata->att_handle;
   1cbd2:	8183      	strh	r3, [r0, #12]
    switch (adata->value_len) {
   1cbd4:	684b      	ldr	r3, [r1, #4]
   1cbd6:	2b04      	cmp	r3, #4
   1cbd8:	d003      	beq.n	1cbe2 <ble_gattc_find_inc_svcs_rx_adata+0x26>
   1cbda:	2b06      	cmp	r3, #6
   1cbdc:	d00d      	beq.n	1cbfa <ble_gattc_find_inc_svcs_rx_adata+0x3e>
        rc = BLE_HS_EBADDATA;
   1cbde:	240a      	movs	r4, #10
   1cbe0:	e021      	b.n	1cc26 <ble_gattc_find_inc_svcs_rx_adata+0x6a>
        proc->find_inc_svcs.cur_start = get_le16(adata->value + 0);
   1cbe2:	6888      	ldr	r0, [r1, #8]
   1cbe4:	f00c fdd3 	bl	2978e <get_le16>
   1cbe8:	8228      	strh	r0, [r5, #16]
        proc->find_inc_svcs.cur_end = get_le16(adata->value + 2);
   1cbea:	68a0      	ldr	r0, [r4, #8]
   1cbec:	3002      	adds	r0, #2
   1cbee:	f00c fdce 	bl	2978e <get_le16>
   1cbf2:	8268      	strh	r0, [r5, #18]
    rc = 0;
   1cbf4:	2400      	movs	r4, #0
        cbrc = 0;
   1cbf6:	4620      	mov	r0, r4
   1cbf8:	e01d      	b.n	1cc36 <ble_gattc_find_inc_svcs_rx_adata+0x7a>
        service.start_handle = get_le16(adata->value + 0);
   1cbfa:	6888      	ldr	r0, [r1, #8]
   1cbfc:	f00c fdc7 	bl	2978e <get_le16>
   1cc00:	f8ad 0000 	strh.w	r0, [sp]
        service.end_handle = get_le16(adata->value + 2);
   1cc04:	68a0      	ldr	r0, [r4, #8]
   1cc06:	3002      	adds	r0, #2
   1cc08:	f00c fdc1 	bl	2978e <get_le16>
   1cc0c:	f8ad 0002 	strh.w	r0, [sp, #2]
        rc = ble_uuid_init_from_att_buf(&service.uuid, adata->value + 4, 2);
   1cc10:	68a1      	ldr	r1, [r4, #8]
   1cc12:	2202      	movs	r2, #2
   1cc14:	3104      	adds	r1, #4
   1cc16:	a801      	add	r0, sp, #4
   1cc18:	f006 fcec 	bl	235f4 <ble_uuid_init_from_att_buf>
        if (rc != 0) {
   1cc1c:	4604      	mov	r4, r0
   1cc1e:	b110      	cbz	r0, 1cc26 <ble_gattc_find_inc_svcs_rx_adata+0x6a>
            rc = BLE_HS_EBADDATA;
   1cc20:	240a      	movs	r4, #10
   1cc22:	e000      	b.n	1cc26 <ble_gattc_find_inc_svcs_rx_adata+0x6a>
        rc = BLE_HS_EBADDATA;
   1cc24:	240a      	movs	r4, #10
        cbrc = ble_gattc_find_inc_svcs_cb(proc, 0, 0, &service);
   1cc26:	466b      	mov	r3, sp
   1cc28:	2200      	movs	r2, #0
   1cc2a:	4611      	mov	r1, r2
   1cc2c:	4628      	mov	r0, r5
   1cc2e:	f7ff f875 	bl	1bd1c <ble_gattc_find_inc_svcs_cb>
        if (rc != 0) {
   1cc32:	b104      	cbz	r4, 1cc36 <ble_gattc_find_inc_svcs_rx_adata+0x7a>
            rc = cbrc;
   1cc34:	4604      	mov	r4, r0
    if (rc != 0 || cbrc != 0) {
   1cc36:	b934      	cbnz	r4, 1cc46 <ble_gattc_find_inc_svcs_rx_adata+0x8a>
   1cc38:	b908      	cbnz	r0, 1cc3e <ble_gattc_find_inc_svcs_rx_adata+0x82>
}
   1cc3a:	b007      	add	sp, #28
   1cc3c:	bd30      	pop	{r4, r5, pc}
        return BLE_HS_EDONE;
   1cc3e:	200e      	movs	r0, #14
   1cc40:	e7fb      	b.n	1cc3a <ble_gattc_find_inc_svcs_rx_adata+0x7e>
        return 0;
   1cc42:	2000      	movs	r0, #0
}
   1cc44:	4770      	bx	lr
        return BLE_HS_EDONE;
   1cc46:	200e      	movs	r0, #14
   1cc48:	e7f7      	b.n	1cc3a <ble_gattc_find_inc_svcs_rx_adata+0x7e>

0001cc4a <ble_gattc_disc_chr_uuid_rx_adata>:
{
   1cc4a:	b570      	push	{r4, r5, r6, lr}
   1cc4c:	b088      	sub	sp, #32
   1cc4e:	4606      	mov	r6, r0
   1cc50:	460c      	mov	r4, r1
    memset(&chr, 0, sizeof chr);
   1cc52:	2300      	movs	r3, #0
   1cc54:	9301      	str	r3, [sp, #4]
   1cc56:	9302      	str	r3, [sp, #8]
   1cc58:	9303      	str	r3, [sp, #12]
   1cc5a:	9304      	str	r3, [sp, #16]
   1cc5c:	9305      	str	r3, [sp, #20]
   1cc5e:	9306      	str	r3, [sp, #24]
   1cc60:	9307      	str	r3, [sp, #28]
    chr.def_handle = adata->att_handle;
   1cc62:	880b      	ldrh	r3, [r1, #0]
   1cc64:	f8ad 3004 	strh.w	r3, [sp, #4]
    switch (adata->value_len) {
   1cc68:	684a      	ldr	r2, [r1, #4]
   1cc6a:	2a05      	cmp	r2, #5
   1cc6c:	d00e      	beq.n	1cc8c <ble_gattc_disc_chr_uuid_rx_adata+0x42>
   1cc6e:	2a13      	cmp	r2, #19
   1cc70:	d00c      	beq.n	1cc8c <ble_gattc_disc_chr_uuid_rx_adata+0x42>
        cbrc = ble_gattc_disc_chr_uuid_cb(proc, rc, 0, NULL);
   1cc72:	2300      	movs	r3, #0
   1cc74:	461a      	mov	r2, r3
   1cc76:	210a      	movs	r1, #10
   1cc78:	4630      	mov	r0, r6
   1cc7a:	f7ff f8b5 	bl	1bde8 <ble_gattc_disc_chr_uuid_cb>
   1cc7e:	4605      	mov	r5, r0
   1cc80:	240a      	movs	r4, #10
    if (rc != 0 || cbrc != 0) {
   1cc82:	bb6c      	cbnz	r4, 1cce0 <ble_gattc_disc_chr_uuid_rx_adata+0x96>
   1cc84:	bb55      	cbnz	r5, 1ccdc <ble_gattc_disc_chr_uuid_rx_adata+0x92>
}
   1cc86:	4628      	mov	r0, r5
   1cc88:	b008      	add	sp, #32
   1cc8a:	bd70      	pop	{r4, r5, r6, pc}
        rc = ble_uuid_init_from_att_buf(&chr.uuid, adata->value + 3,
   1cc8c:	68a1      	ldr	r1, [r4, #8]
   1cc8e:	3a03      	subs	r2, #3
   1cc90:	3103      	adds	r1, #3
   1cc92:	a803      	add	r0, sp, #12
   1cc94:	f006 fcae 	bl	235f4 <ble_uuid_init_from_att_buf>
        if (rc != 0) {
   1cc98:	4605      	mov	r5, r0
   1cc9a:	2800      	cmp	r0, #0
   1cc9c:	d1e9      	bne.n	1cc72 <ble_gattc_disc_chr_uuid_rx_adata+0x28>
    chr.properties = adata->value[0];
   1cc9e:	68a0      	ldr	r0, [r4, #8]
   1cca0:	f810 3b01 	ldrb.w	r3, [r0], #1
   1cca4:	f88d 3008 	strb.w	r3, [sp, #8]
    chr.val_handle = get_le16(adata->value + 1);
   1cca8:	f00c fd71 	bl	2978e <get_le16>
   1ccac:	f8ad 0006 	strh.w	r0, [sp, #6]
    if (adata->att_handle <= proc->disc_chr_uuid.prev_handle) {
   1ccb0:	8823      	ldrh	r3, [r4, #0]
   1ccb2:	8c32      	ldrh	r2, [r6, #32]
   1ccb4:	4293      	cmp	r3, r2
   1ccb6:	d9dc      	bls.n	1cc72 <ble_gattc_disc_chr_uuid_rx_adata+0x28>
    proc->disc_chr_uuid.prev_handle = adata->att_handle;
   1ccb8:	8433      	strh	r3, [r6, #32]
    } else if (ble_uuid_cmp(&chr.uuid.u, &proc->disc_chr_uuid.chr_uuid.u) == 0) {
   1ccba:	f106 010c 	add.w	r1, r6, #12
   1ccbe:	a803      	add	r0, sp, #12
   1ccc0:	f006 fc73 	bl	235aa <ble_uuid_cmp>
   1ccc4:	4604      	mov	r4, r0
   1ccc6:	b108      	cbz	r0, 1cccc <ble_gattc_disc_chr_uuid_rx_adata+0x82>
    rc = 0;
   1ccc8:	462c      	mov	r4, r5
   1ccca:	e7da      	b.n	1cc82 <ble_gattc_disc_chr_uuid_rx_adata+0x38>
        cbrc = ble_gattc_disc_chr_uuid_cb(proc, 0, 0, &chr);
   1cccc:	ab01      	add	r3, sp, #4
   1ccce:	2200      	movs	r2, #0
   1ccd0:	4611      	mov	r1, r2
   1ccd2:	4630      	mov	r0, r6
   1ccd4:	f7ff f888 	bl	1bde8 <ble_gattc_disc_chr_uuid_cb>
   1ccd8:	4605      	mov	r5, r0
   1ccda:	e7d2      	b.n	1cc82 <ble_gattc_disc_chr_uuid_rx_adata+0x38>
        return BLE_HS_EDONE;
   1ccdc:	250e      	movs	r5, #14
   1ccde:	e7d2      	b.n	1cc86 <ble_gattc_disc_chr_uuid_rx_adata+0x3c>
   1cce0:	250e      	movs	r5, #14
   1cce2:	e7d0      	b.n	1cc86 <ble_gattc_disc_chr_uuid_rx_adata+0x3c>

0001cce4 <ble_gattc_find_inc_svcs_rx_read_rsp>:
{
   1cce4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cce6:	b087      	sub	sp, #28
   1cce8:	4606      	mov	r6, r0
   1ccea:	460c      	mov	r4, r1
   1ccec:	4615      	mov	r5, r2
    rc = ble_uuid_init_from_att_mbuf(&service.uuid, *om, 0, 16);
   1ccee:	2310      	movs	r3, #16
   1ccf0:	2200      	movs	r2, #0
   1ccf2:	6829      	ldr	r1, [r5, #0]
   1ccf4:	a801      	add	r0, sp, #4
   1ccf6:	f006 fc9c 	bl	23632 <ble_uuid_init_from_att_mbuf>
   1ccfa:	4607      	mov	r7, r0
    os_mbuf_free_chain(*om);
   1ccfc:	6828      	ldr	r0, [r5, #0]
   1ccfe:	f7f0 fe8a 	bl	da16 <os_mbuf_free_chain>
    *om = NULL;
   1cd02:	2300      	movs	r3, #0
   1cd04:	602b      	str	r3, [r5, #0]
    if (rc != 0) {
   1cd06:	b9bf      	cbnz	r7, 1cd38 <ble_gattc_find_inc_svcs_rx_read_rsp+0x54>
    if (proc->find_inc_svcs.cur_start == 0) {
   1cd08:	8a33      	ldrh	r3, [r6, #16]
   1cd0a:	b1bb      	cbz	r3, 1cd3c <ble_gattc_find_inc_svcs_rx_read_rsp+0x58>
    if (status != 0) {
   1cd0c:	b9bc      	cbnz	r4, 1cd3e <ble_gattc_find_inc_svcs_rx_read_rsp+0x5a>
    service.start_handle = proc->find_inc_svcs.cur_start;
   1cd0e:	f8ad 3000 	strh.w	r3, [sp]
    service.end_handle = proc->find_inc_svcs.cur_end;
   1cd12:	8a73      	ldrh	r3, [r6, #18]
   1cd14:	f8ad 3002 	strh.w	r3, [sp, #2]
    rc = ble_gattc_find_inc_svcs_cb(proc, 0, 0, &service);
   1cd18:	466b      	mov	r3, sp
   1cd1a:	2200      	movs	r2, #0
   1cd1c:	4611      	mov	r1, r2
   1cd1e:	4630      	mov	r0, r6
   1cd20:	f7fe fffc 	bl	1bd1c <ble_gattc_find_inc_svcs_cb>
    if (rc != 0) {
   1cd24:	b9a8      	cbnz	r0, 1cd52 <ble_gattc_find_inc_svcs_rx_read_rsp+0x6e>
    proc->find_inc_svcs.cur_start = 0;
   1cd26:	2300      	movs	r3, #0
   1cd28:	8233      	strh	r3, [r6, #16]
    proc->find_inc_svcs.cur_end = 0;
   1cd2a:	8273      	strh	r3, [r6, #18]
    rc = ble_gattc_find_inc_svcs_resume(proc);
   1cd2c:	4630      	mov	r0, r6
   1cd2e:	f7ff fd65 	bl	1c7fc <ble_gattc_find_inc_svcs_resume>
    if (rc != 0) {
   1cd32:	4604      	mov	r4, r0
   1cd34:	b150      	cbz	r0, 1cd4c <ble_gattc_find_inc_svcs_rx_read_rsp+0x68>
   1cd36:	e002      	b.n	1cd3e <ble_gattc_find_inc_svcs_rx_read_rsp+0x5a>
        rc = BLE_HS_EBADDATA;
   1cd38:	240a      	movs	r4, #10
   1cd3a:	e000      	b.n	1cd3e <ble_gattc_find_inc_svcs_rx_read_rsp+0x5a>
        rc = BLE_HS_EBADDATA;
   1cd3c:	240a      	movs	r4, #10
    ble_gattc_find_inc_svcs_cb(proc, rc, 0, NULL);
   1cd3e:	2300      	movs	r3, #0
   1cd40:	461a      	mov	r2, r3
   1cd42:	4621      	mov	r1, r4
   1cd44:	4630      	mov	r0, r6
   1cd46:	f7fe ffe9 	bl	1bd1c <ble_gattc_find_inc_svcs_cb>
    return BLE_HS_EDONE;
   1cd4a:	240e      	movs	r4, #14
}
   1cd4c:	4620      	mov	r0, r4
   1cd4e:	b007      	add	sp, #28
   1cd50:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return BLE_HS_EDONE;
   1cd52:	240e      	movs	r4, #14
   1cd54:	e7fa      	b.n	1cd4c <ble_gattc_find_inc_svcs_rx_read_rsp+0x68>

0001cd56 <ble_gattc_write_reliable_rx_prep>:
{
   1cd56:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cd58:	b083      	sub	sp, #12
   1cd5a:	4604      	mov	r4, r0
   1cd5c:	461d      	mov	r5, r3
    om = *rxom;
   1cd5e:	9b08      	ldr	r3, [sp, #32]
   1cd60:	681f      	ldr	r7, [r3, #0]
    if (status != 0) {
   1cd62:	460b      	mov	r3, r1
   1cd64:	bba1      	cbnz	r1, 1cdd0 <ble_gattc_write_reliable_rx_prep+0x7a>
    if (proc->write_reliable.cur_attr >= proc->write_reliable.num_attrs) {
   1cd66:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
   1cd6a:	f890 102c 	ldrb.w	r1, [r0, #44]	; 0x2c
   1cd6e:	428b      	cmp	r3, r1
   1cd70:	d22b      	bcs.n	1cdca <ble_gattc_write_reliable_rx_prep+0x74>
    attr = proc->write_reliable.attrs + proc->write_reliable.cur_attr;
   1cd72:	f100 010c 	add.w	r1, r0, #12
   1cd76:	eb01 06c3 	add.w	r6, r1, r3, lsl #3
    if (handle != attr->handle) {
   1cd7a:	f831 3033 	ldrh.w	r3, [r1, r3, lsl #3]
   1cd7e:	4293      	cmp	r3, r2
   1cd80:	d125      	bne.n	1cdce <ble_gattc_write_reliable_rx_prep+0x78>
    if (offset != attr->offset) {
   1cd82:	8873      	ldrh	r3, [r6, #2]
   1cd84:	42ab      	cmp	r3, r5
   1cd86:	d001      	beq.n	1cd8c <ble_gattc_write_reliable_rx_prep+0x36>
        rc = BLE_HS_EBADDATA;
   1cd88:	230a      	movs	r3, #10
   1cd8a:	e021      	b.n	1cdd0 <ble_gattc_write_reliable_rx_prep+0x7a>
    if (os_mbuf_cmpm(attr->om, offset, om, 0,
   1cd8c:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
   1cd8e:	9300      	str	r3, [sp, #0]
   1cd90:	2300      	movs	r3, #0
   1cd92:	463a      	mov	r2, r7
   1cd94:	4629      	mov	r1, r5
   1cd96:	6870      	ldr	r0, [r6, #4]
   1cd98:	f7f0 ff9a 	bl	dcd0 <os_mbuf_cmpm>
   1cd9c:	bb08      	cbnz	r0, 1cde2 <ble_gattc_write_reliable_rx_prep+0x8c>
    attr->offset += proc->write_reliable.length;
   1cd9e:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
   1cda0:	8872      	ldrh	r2, [r6, #2]
   1cda2:	4413      	add	r3, r2
   1cda4:	b29b      	uxth	r3, r3
   1cda6:	8073      	strh	r3, [r6, #2]
    if (attr->offset >= OS_MBUF_PKTLEN(attr->om)) {
   1cda8:	6872      	ldr	r2, [r6, #4]
   1cdaa:	8a12      	ldrh	r2, [r2, #16]
   1cdac:	4293      	cmp	r3, r2
   1cdae:	d306      	bcc.n	1cdbe <ble_gattc_write_reliable_rx_prep+0x68>
        attr->offset = 0;
   1cdb0:	2300      	movs	r3, #0
   1cdb2:	8073      	strh	r3, [r6, #2]
        proc->write_reliable.cur_attr++;
   1cdb4:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   1cdb8:	3301      	adds	r3, #1
   1cdba:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    rc = ble_gattc_write_reliable_resume(proc);
   1cdbe:	4620      	mov	r0, r4
   1cdc0:	f7ff fb96 	bl	1c4f0 <ble_gattc_write_reliable_resume>
    if (rc != 0) {
   1cdc4:	4603      	mov	r3, r0
   1cdc6:	b148      	cbz	r0, 1cddc <ble_gattc_write_reliable_rx_prep+0x86>
   1cdc8:	e002      	b.n	1cdd0 <ble_gattc_write_reliable_rx_prep+0x7a>
        rc = BLE_HS_EBADDATA;
   1cdca:	230a      	movs	r3, #10
   1cdcc:	e000      	b.n	1cdd0 <ble_gattc_write_reliable_rx_prep+0x7a>
        rc = BLE_HS_EBADDATA;
   1cdce:	230a      	movs	r3, #10
    ble_gattc_write_reliable_err(proc, rc, 0);
   1cdd0:	2200      	movs	r2, #0
   1cdd2:	4619      	mov	r1, r3
   1cdd4:	4620      	mov	r0, r4
   1cdd6:	f7ff fb24 	bl	1c422 <ble_gattc_write_reliable_err>
    return BLE_HS_EDONE;
   1cdda:	230e      	movs	r3, #14
}
   1cddc:	4618      	mov	r0, r3
   1cdde:	b003      	add	sp, #12
   1cde0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rc = BLE_HS_EBADDATA;
   1cde2:	230a      	movs	r3, #10
   1cde4:	e7f4      	b.n	1cdd0 <ble_gattc_write_reliable_rx_prep+0x7a>

0001cde6 <ble_gattc_write_long_rx_prep>:
{
   1cde6:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cde8:	b083      	sub	sp, #12
   1cdea:	4604      	mov	r4, r0
    om = *rxom;
   1cdec:	9808      	ldr	r0, [sp, #32]
   1cdee:	6806      	ldr	r6, [r0, #0]
    if (status != 0) {
   1cdf0:	4608      	mov	r0, r1
   1cdf2:	bb31      	cbnz	r1, 1ce42 <ble_gattc_write_long_rx_prep+0x5c>
    if (proc->write_long.attr.offset >=
   1cdf4:	89e1      	ldrh	r1, [r4, #14]
        OS_MBUF_PKTLEN(proc->write_long.attr.om)) {
   1cdf6:	6925      	ldr	r5, [r4, #16]
   1cdf8:	8a28      	ldrh	r0, [r5, #16]
    if (proc->write_long.attr.offset >=
   1cdfa:	4281      	cmp	r1, r0
   1cdfc:	d21e      	bcs.n	1ce3c <ble_gattc_write_long_rx_prep+0x56>
    if (handle != proc->write_long.attr.handle) {
   1cdfe:	89a7      	ldrh	r7, [r4, #12]
   1ce00:	4297      	cmp	r7, r2
   1ce02:	d11d      	bne.n	1ce40 <ble_gattc_write_long_rx_prep+0x5a>
    if (offset != proc->write_long.attr.offset) {
   1ce04:	4299      	cmp	r1, r3
   1ce06:	d125      	bne.n	1ce54 <ble_gattc_write_long_rx_prep+0x6e>
    if (offset + OS_MBUF_PKTLEN(om) >
   1ce08:	8a32      	ldrh	r2, [r6, #16]
   1ce0a:	1899      	adds	r1, r3, r2
   1ce0c:	4281      	cmp	r1, r0
   1ce0e:	dc23      	bgt.n	1ce58 <ble_gattc_write_long_rx_prep+0x72>
    if (OS_MBUF_PKTLEN(om) != proc->write_long.length) {
   1ce10:	8aa1      	ldrh	r1, [r4, #20]
   1ce12:	428a      	cmp	r2, r1
   1ce14:	d001      	beq.n	1ce1a <ble_gattc_write_long_rx_prep+0x34>
        rc = BLE_HS_EBADDATA;
   1ce16:	200a      	movs	r0, #10
   1ce18:	e013      	b.n	1ce42 <ble_gattc_write_long_rx_prep+0x5c>
    if (os_mbuf_cmpm(om, 0,
   1ce1a:	9100      	str	r1, [sp, #0]
   1ce1c:	462a      	mov	r2, r5
   1ce1e:	2100      	movs	r1, #0
   1ce20:	4630      	mov	r0, r6
   1ce22:	f7f0 ff55 	bl	dcd0 <os_mbuf_cmpm>
   1ce26:	b9c8      	cbnz	r0, 1ce5c <ble_gattc_write_long_rx_prep+0x76>
    proc->write_long.attr.offset += OS_MBUF_PKTLEN(om);
   1ce28:	8a33      	ldrh	r3, [r6, #16]
   1ce2a:	89e2      	ldrh	r2, [r4, #14]
   1ce2c:	4413      	add	r3, r2
   1ce2e:	81e3      	strh	r3, [r4, #14]
    rc = ble_gattc_write_long_resume(proc);
   1ce30:	4620      	mov	r0, r4
   1ce32:	f7ff fba6 	bl	1c582 <ble_gattc_write_long_resume>
    if (rc != 0) {
   1ce36:	4603      	mov	r3, r0
   1ce38:	b148      	cbz	r0, 1ce4e <ble_gattc_write_long_rx_prep+0x68>
   1ce3a:	e002      	b.n	1ce42 <ble_gattc_write_long_rx_prep+0x5c>
        rc = BLE_HS_EBADDATA;
   1ce3c:	200a      	movs	r0, #10
   1ce3e:	e000      	b.n	1ce42 <ble_gattc_write_long_rx_prep+0x5c>
        rc = BLE_HS_EBADDATA;
   1ce40:	200a      	movs	r0, #10
    ble_gattc_write_long_cb(proc, rc, 0);
   1ce42:	2200      	movs	r2, #0
   1ce44:	4601      	mov	r1, r0
   1ce46:	4620      	mov	r0, r4
   1ce48:	f7ff f934 	bl	1c0b4 <ble_gattc_write_long_cb>
    return BLE_HS_EDONE;
   1ce4c:	230e      	movs	r3, #14
}
   1ce4e:	4618      	mov	r0, r3
   1ce50:	b003      	add	sp, #12
   1ce52:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rc = BLE_HS_EBADDATA;
   1ce54:	200a      	movs	r0, #10
   1ce56:	e7f4      	b.n	1ce42 <ble_gattc_write_long_rx_prep+0x5c>
        rc = BLE_HS_EBADDATA;
   1ce58:	200a      	movs	r0, #10
   1ce5a:	e7f2      	b.n	1ce42 <ble_gattc_write_long_rx_prep+0x5c>
        rc = BLE_HS_EBADDATA;
   1ce5c:	200a      	movs	r0, #10
   1ce5e:	e7f0      	b.n	1ce42 <ble_gattc_write_long_rx_prep+0x5c>

0001ce60 <ble_gattc_timer>:
{
   1ce60:	b530      	push	{r4, r5, lr}
   1ce62:	b083      	sub	sp, #12
    ticks_until_exp = ble_gattc_extract_expired(&exp_list);
   1ce64:	4668      	mov	r0, sp
   1ce66:	f7ff f9fb 	bl	1c260 <ble_gattc_extract_expired>
   1ce6a:	4605      	mov	r5, r0
    while ((proc = STAILQ_FIRST(&exp_list)) != NULL) {
   1ce6c:	e002      	b.n	1ce74 <ble_gattc_timer+0x14>
        ble_gattc_proc_free(proc);
   1ce6e:	4620      	mov	r0, r4
   1ce70:	f7ff fa96 	bl	1c3a0 <ble_gattc_proc_free>
    while ((proc = STAILQ_FIRST(&exp_list)) != NULL) {
   1ce74:	9c00      	ldr	r4, [sp, #0]
   1ce76:	b1a4      	cbz	r4, 1cea2 <ble_gattc_timer+0x42>
        STATS_INC(ble_gattc_stats, proc_timeout);
   1ce78:	4a12      	ldr	r2, [pc, #72]	; (1cec4 <ble_gattc_timer+0x64>)
   1ce7a:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
   1ce7e:	3301      	adds	r3, #1
   1ce80:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        ble_gattc_proc_timeout(proc);
   1ce84:	4620      	mov	r0, r4
   1ce86:	f7fe fe7a 	bl	1bb7e <ble_gattc_proc_timeout>
        ble_gap_terminate(proc->conn_handle, BLE_ERR_REM_USER_CONN_TERM);
   1ce8a:	2113      	movs	r1, #19
   1ce8c:	8920      	ldrh	r0, [r4, #8]
   1ce8e:	f7fe f9dd 	bl	1b24c <ble_gap_terminate>
        STAILQ_REMOVE_HEAD(&exp_list, next);
   1ce92:	9b00      	ldr	r3, [sp, #0]
   1ce94:	681b      	ldr	r3, [r3, #0]
   1ce96:	9300      	str	r3, [sp, #0]
   1ce98:	2b00      	cmp	r3, #0
   1ce9a:	d1e8      	bne.n	1ce6e <ble_gattc_timer+0xe>
   1ce9c:	f8cd d004 	str.w	sp, [sp, #4]
   1cea0:	e7e5      	b.n	1ce6e <ble_gattc_timer+0xe>
    ticks_until_resume = ble_gattc_ticks_until_resume();
   1cea2:	f7ff f98f 	bl	1c1c4 <ble_gattc_ticks_until_resume>
    if (ticks_until_resume == 0) {
   1cea6:	4603      	mov	r3, r0
   1cea8:	b128      	cbz	r0, 1ceb6 <ble_gattc_timer+0x56>
}
   1ceaa:	42ab      	cmp	r3, r5
   1ceac:	bfa8      	it	ge
   1ceae:	462b      	movge	r3, r5
   1ceb0:	4618      	mov	r0, r3
   1ceb2:	b003      	add	sp, #12
   1ceb4:	bd30      	pop	{r4, r5, pc}
        ble_gattc_resume_procs();
   1ceb6:	f7ff fd75 	bl	1c9a4 <ble_gattc_resume_procs>
        ticks_until_resume = ble_gattc_ticks_until_resume();
   1ceba:	f7ff f983 	bl	1c1c4 <ble_gattc_ticks_until_resume>
   1cebe:	4603      	mov	r3, r0
   1cec0:	e7f3      	b.n	1ceaa <ble_gattc_timer+0x4a>
   1cec2:	bf00      	nop
   1cec4:	20004528 	.word	0x20004528

0001cec8 <ble_gattc_notify_custom>:
{
   1cec8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ceca:	b083      	sub	sp, #12
   1cecc:	4607      	mov	r7, r0
   1cece:	460d      	mov	r5, r1
   1ced0:	4614      	mov	r4, r2
    STATS_INC(ble_gattc_stats, notify);
   1ced2:	4a1c      	ldr	r2, [pc, #112]	; (1cf44 <ble_gattc_notify_custom+0x7c>)
   1ced4:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
   1ced8:	3301      	adds	r3, #1
   1ceda:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    ble_gattc_log_notify(chr_val_handle);
   1cede:	4608      	mov	r0, r1
   1cee0:	f7ff fd98 	bl	1ca14 <ble_gattc_log_notify>
    if (txom == NULL) {
   1cee4:	b1cc      	cbz	r4, 1cf1a <ble_gattc_notify_custom+0x52>
    rc = ble_att_clt_tx_notify(conn_handle, chr_val_handle, txom);
   1cee6:	4622      	mov	r2, r4
   1cee8:	4629      	mov	r1, r5
   1ceea:	4638      	mov	r0, r7
   1ceec:	f007 f969 	bl	241c2 <ble_att_clt_tx_notify>
    if (rc != 0) {
   1cef0:	4606      	mov	r6, r0
   1cef2:	b320      	cbz	r0, 1cf3e <ble_gattc_notify_custom+0x76>
    txom = NULL;
   1cef4:	2400      	movs	r4, #0
        STATS_INC(ble_gattc_stats, notify_fail);
   1cef6:	4a13      	ldr	r2, [pc, #76]	; (1cf44 <ble_gattc_notify_custom+0x7c>)
   1cef8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
   1cefc:	3301      	adds	r3, #1
   1cefe:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    ble_gap_notify_tx_event(rc, conn_handle, chr_val_handle, 0);
   1cf02:	2300      	movs	r3, #0
   1cf04:	462a      	mov	r2, r5
   1cf06:	4639      	mov	r1, r7
   1cf08:	4630      	mov	r0, r6
   1cf0a:	f7fe fc84 	bl	1b816 <ble_gap_notify_tx_event>
    os_mbuf_free_chain(txom);
   1cf0e:	4620      	mov	r0, r4
   1cf10:	f7f0 fd81 	bl	da16 <os_mbuf_free_chain>
}
   1cf14:	4630      	mov	r0, r6
   1cf16:	b003      	add	sp, #12
   1cf18:	bdf0      	pop	{r4, r5, r6, r7, pc}
        txom = ble_hs_mbuf_att_pkt();
   1cf1a:	f003 f8c0 	bl	2009e <ble_hs_mbuf_att_pkt>
        if (txom == NULL) {
   1cf1e:	4604      	mov	r4, r0
   1cf20:	b158      	cbz	r0, 1cf3a <ble_gattc_notify_custom+0x72>
        rc = ble_att_svr_read_handle(BLE_HS_CONN_HANDLE_NONE,
   1cf22:	2200      	movs	r2, #0
   1cf24:	9200      	str	r2, [sp, #0]
   1cf26:	4603      	mov	r3, r0
   1cf28:	4629      	mov	r1, r5
   1cf2a:	f64f 70ff 	movw	r0, #65535	; 0xffff
   1cf2e:	f008 f85b 	bl	24fe8 <ble_att_svr_read_handle>
        if (rc != 0) {
   1cf32:	2800      	cmp	r0, #0
   1cf34:	d0d7      	beq.n	1cee6 <ble_gattc_notify_custom+0x1e>
            rc = BLE_HS_EAPP;
   1cf36:	2609      	movs	r6, #9
   1cf38:	e7dd      	b.n	1cef6 <ble_gattc_notify_custom+0x2e>
            rc = BLE_HS_ENOMEM;
   1cf3a:	2606      	movs	r6, #6
   1cf3c:	e7db      	b.n	1cef6 <ble_gattc_notify_custom+0x2e>
    txom = NULL;
   1cf3e:	2400      	movs	r4, #0
   1cf40:	e7df      	b.n	1cf02 <ble_gattc_notify_custom+0x3a>
   1cf42:	bf00      	nop
   1cf44:	20004528 	.word	0x20004528

0001cf48 <ble_gattc_notify>:
{
   1cf48:	b508      	push	{r3, lr}
    rc = ble_gattc_notify_custom(conn_handle, chr_val_handle, NULL);
   1cf4a:	2200      	movs	r2, #0
   1cf4c:	f7ff ffbc 	bl	1cec8 <ble_gattc_notify_custom>
}
   1cf50:	bd08      	pop	{r3, pc}

0001cf52 <ble_gatts_indicate_fail_notconn>:
 * Causes the indication in progress for the specified connection (if any) to
 * fail with a status code of BLE_HS_ENOTCONN;
 */
void
ble_gatts_indicate_fail_notconn(uint16_t conn_handle)
{
   1cf52:	b508      	push	{r3, lr}
    ble_gattc_fail_procs(conn_handle, BLE_GATT_OP_INDICATE, BLE_HS_ENOTCONN);
   1cf54:	2207      	movs	r2, #7
   1cf56:	210e      	movs	r1, #14
   1cf58:	f7ff fa44 	bl	1c3e4 <ble_gattc_fail_procs>
}
   1cf5c:	bd08      	pop	{r3, pc}
	...

0001cf60 <ble_gattc_indicate_custom>:

int
ble_gattc_indicate_custom(uint16_t conn_handle, uint16_t chr_val_handle,
                          struct os_mbuf *txom)
{
   1cf60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cf64:	b082      	sub	sp, #8
   1cf66:	4680      	mov	r8, r0
   1cf68:	460d      	mov	r5, r1
   1cf6a:	4616      	mov	r6, r2

    struct ble_gattc_proc *proc;
    struct ble_hs_conn *conn;
    int rc;

    STATS_INC(ble_gattc_stats, indicate);
   1cf6c:	4a29      	ldr	r2, [pc, #164]	; (1d014 <ble_gattc_indicate_custom+0xb4>)
   1cf6e:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
   1cf72:	3301      	adds	r3, #1
   1cf74:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

    proc = ble_gattc_proc_alloc();
   1cf78:	f7ff fd34 	bl	1c9e4 <ble_gattc_proc_alloc>
    if (proc == NULL) {
   1cf7c:	4607      	mov	r7, r0
   1cf7e:	b368      	cbz	r0, 1cfdc <ble_gattc_indicate_custom+0x7c>
        rc = BLE_HS_ENOMEM;
        goto done;
    }

    proc->op = BLE_GATT_OP_INDICATE;
   1cf80:	230e      	movs	r3, #14
   1cf82:	7283      	strb	r3, [r0, #10]
    proc->conn_handle = conn_handle;
   1cf84:	f8a0 8008 	strh.w	r8, [r0, #8]
    proc->indicate.chr_val_handle = chr_val_handle;
   1cf88:	8185      	strh	r5, [r0, #12]

    ble_gattc_log_indicate(chr_val_handle);
   1cf8a:	4628      	mov	r0, r5
   1cf8c:	f7ff fd52 	bl	1ca34 <ble_gattc_log_indicate>

    if (txom == NULL) {
   1cf90:	b14e      	cbz	r6, 1cfa6 <ble_gattc_indicate_custom+0x46>
            rc = BLE_HS_EAPP;
            goto done;
        }
    }

    rc = ble_att_clt_tx_indicate(conn_handle, chr_val_handle, txom);
   1cf92:	4632      	mov	r2, r6
   1cf94:	4629      	mov	r1, r5
   1cf96:	4640      	mov	r0, r8
   1cf98:	f007 f933 	bl	24202 <ble_att_clt_tx_indicate>
    txom = NULL;
    if (rc != 0) {
   1cf9c:	4604      	mov	r4, r0
   1cf9e:	b190      	cbz	r0, 1cfc6 <ble_gattc_indicate_custom+0x66>
        conn->bhc_gatt_svr.indicate_val_handle = chr_val_handle;
    }
    ble_hs_unlock();

done:
    if (rc != 0) {
   1cfa0:	b3b4      	cbz	r4, 1d010 <ble_gattc_indicate_custom+0xb0>
   1cfa2:	2600      	movs	r6, #0
   1cfa4:	e01b      	b.n	1cfde <ble_gattc_indicate_custom+0x7e>
        txom = ble_hs_mbuf_att_pkt();
   1cfa6:	f003 f87a 	bl	2009e <ble_hs_mbuf_att_pkt>
        if (txom == NULL) {
   1cfaa:	4606      	mov	r6, r0
   1cfac:	b370      	cbz	r0, 1d00c <ble_gattc_indicate_custom+0xac>
        rc = ble_att_svr_read_handle(BLE_HS_CONN_HANDLE_NONE, chr_val_handle,
   1cfae:	2200      	movs	r2, #0
   1cfb0:	9200      	str	r2, [sp, #0]
   1cfb2:	4603      	mov	r3, r0
   1cfb4:	4629      	mov	r1, r5
   1cfb6:	f64f 70ff 	movw	r0, #65535	; 0xffff
   1cfba:	f008 f815 	bl	24fe8 <ble_att_svr_read_handle>
        if (rc != 0) {
   1cfbe:	2800      	cmp	r0, #0
   1cfc0:	d0e7      	beq.n	1cf92 <ble_gattc_indicate_custom+0x32>
            rc = BLE_HS_EAPP;
   1cfc2:	2409      	movs	r4, #9
   1cfc4:	e00b      	b.n	1cfde <ble_gattc_indicate_custom+0x7e>
    ble_hs_lock();
   1cfc6:	f001 faad 	bl	1e524 <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
   1cfca:	4640      	mov	r0, r8
   1cfcc:	f002 f93a 	bl	1f244 <ble_hs_conn_find>
    if (conn != NULL) {
   1cfd0:	b108      	cbz	r0, 1cfd6 <ble_gattc_indicate_custom+0x76>
        conn->bhc_gatt_svr.indicate_val_handle = chr_val_handle;
   1cfd2:	f8a0 5054 	strh.w	r5, [r0, #84]	; 0x54
    ble_hs_unlock();
   1cfd6:	f001 faa9 	bl	1e52c <ble_hs_unlock>
   1cfda:	e7e1      	b.n	1cfa0 <ble_gattc_indicate_custom+0x40>
        rc = BLE_HS_ENOMEM;
   1cfdc:	2406      	movs	r4, #6
        STATS_INC(ble_gattc_stats, indicate_fail);
   1cfde:	4a0d      	ldr	r2, [pc, #52]	; (1d014 <ble_gattc_indicate_custom+0xb4>)
   1cfe0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
   1cfe4:	3301      	adds	r3, #1
   1cfe6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Tell the application that an indication transmission was attempted. */
    ble_gap_notify_tx_event(rc, conn_handle, chr_val_handle, 1);
   1cfea:	2301      	movs	r3, #1
   1cfec:	462a      	mov	r2, r5
   1cfee:	4641      	mov	r1, r8
   1cff0:	4620      	mov	r0, r4
   1cff2:	f7fe fc10 	bl	1b816 <ble_gap_notify_tx_event>

    ble_gattc_process_status(proc, rc);
   1cff6:	4621      	mov	r1, r4
   1cff8:	4638      	mov	r0, r7
   1cffa:	f7ff fcbf 	bl	1c97c <ble_gattc_process_status>
    os_mbuf_free_chain(txom);
   1cffe:	4630      	mov	r0, r6
   1d000:	f7f0 fd09 	bl	da16 <os_mbuf_free_chain>
    return rc;
}
   1d004:	4620      	mov	r0, r4
   1d006:	b002      	add	sp, #8
   1d008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            rc = BLE_HS_ENOMEM;
   1d00c:	2406      	movs	r4, #6
   1d00e:	e7e6      	b.n	1cfde <ble_gattc_indicate_custom+0x7e>
   1d010:	2600      	movs	r6, #0
   1d012:	e7ea      	b.n	1cfea <ble_gattc_indicate_custom+0x8a>
   1d014:	20004528 	.word	0x20004528

0001d018 <ble_gattc_indicate>:

int
ble_gattc_indicate(uint16_t conn_handle, uint16_t chr_val_handle)
{
   1d018:	b508      	push	{r3, lr}
    return ble_gattc_indicate_custom(conn_handle, chr_val_handle, NULL);
   1d01a:	2200      	movs	r2, #0
   1d01c:	f7ff ffa0 	bl	1cf60 <ble_gattc_indicate_custom>
}
   1d020:	bd08      	pop	{r3, pc}

0001d022 <ble_gattc_rx_err>:
 * Dispatches an incoming ATT error-response to the appropriate active GATT
 * procedure.
 */
void
ble_gattc_rx_err(uint16_t conn_handle, uint16_t handle, uint16_t status)
{
   1d022:	b570      	push	{r4, r5, r6, lr}
   1d024:	460e      	mov	r6, r1
   1d026:	4615      	mov	r5, r2
    struct ble_gattc_proc *proc;
    ble_gattc_err_fn *err_cb;

    proc = ble_gattc_extract_first_by_conn_op(conn_handle, BLE_GATT_OP_NONE);
   1d028:	21ff      	movs	r1, #255	; 0xff
   1d02a:	f7ff f949 	bl	1c2c0 <ble_gattc_extract_first_by_conn_op>
    if (proc != NULL) {
   1d02e:	b168      	cbz	r0, 1d04c <ble_gattc_rx_err+0x2a>
   1d030:	4604      	mov	r4, r0
        err_cb = ble_gattc_err_dispatch_get(proc->op);
   1d032:	7a80      	ldrb	r0, [r0, #10]
   1d034:	f7fe fd56 	bl	1bae4 <ble_gattc_err_dispatch_get>
        if (err_cb != NULL) {
   1d038:	4603      	mov	r3, r0
   1d03a:	b120      	cbz	r0, 1d046 <ble_gattc_rx_err+0x24>
            err_cb(proc, BLE_HS_ERR_ATT_BASE + status, handle);
   1d03c:	4632      	mov	r2, r6
   1d03e:	f505 7180 	add.w	r1, r5, #256	; 0x100
   1d042:	4620      	mov	r0, r4
   1d044:	4798      	blx	r3
        }
        ble_gattc_proc_free(proc);
   1d046:	4620      	mov	r0, r4
   1d048:	f7ff f9aa 	bl	1c3a0 <ble_gattc_proc_free>
    }
}
   1d04c:	bd70      	pop	{r4, r5, r6, pc}

0001d04e <ble_gattc_rx_mtu>:
 * Dispatches an incoming ATT exchange-mtu-response to the appropriate active
 * GATT procedure.
 */
void
ble_gattc_rx_mtu(uint16_t conn_handle, int status, uint16_t chan_mtu)
{
   1d04e:	b570      	push	{r4, r5, r6, lr}
   1d050:	460d      	mov	r5, r1
   1d052:	4616      	mov	r6, r2
    struct ble_gattc_proc *proc;

    proc = ble_gattc_extract_first_by_conn_op(conn_handle, BLE_GATT_OP_MTU);
   1d054:	2100      	movs	r1, #0
   1d056:	f7ff f933 	bl	1c2c0 <ble_gattc_extract_first_by_conn_op>
    if (proc != NULL) {
   1d05a:	b148      	cbz	r0, 1d070 <ble_gattc_rx_mtu+0x22>
   1d05c:	4604      	mov	r4, r0
        ble_gattc_mtu_cb(proc, status, 0, chan_mtu);
   1d05e:	4633      	mov	r3, r6
   1d060:	2200      	movs	r2, #0
   1d062:	4629      	mov	r1, r5
   1d064:	f7fe fda4 	bl	1bbb0 <ble_gattc_mtu_cb>
        ble_gattc_process_status(proc, BLE_HS_EDONE);
   1d068:	210e      	movs	r1, #14
   1d06a:	4620      	mov	r0, r4
   1d06c:	f7ff fc86 	bl	1c97c <ble_gattc_process_status>
    }
}
   1d070:	bd70      	pop	{r4, r5, r6, pc}

0001d072 <ble_gattc_rx_find_info_idata>:
 * find-information-response to the appropriate active GATT procedure.
 */
void
ble_gattc_rx_find_info_idata(uint16_t conn_handle,
                             struct ble_att_find_info_idata *idata)
{
   1d072:	b538      	push	{r3, r4, r5, lr}
   1d074:	460d      	mov	r5, r1
#endif

    struct ble_gattc_proc *proc;
    int rc;

    proc = ble_gattc_extract_first_by_conn_op(conn_handle,
   1d076:	2106      	movs	r1, #6
   1d078:	f7ff f922 	bl	1c2c0 <ble_gattc_extract_first_by_conn_op>
                                              BLE_GATT_OP_DISC_ALL_DSCS);
    if (proc != NULL) {
   1d07c:	b138      	cbz	r0, 1d08e <ble_gattc_rx_find_info_idata+0x1c>
   1d07e:	4604      	mov	r4, r0
        rc = ble_gattc_disc_all_dscs_rx_idata(proc, idata);
   1d080:	4629      	mov	r1, r5
   1d082:	f7fe ff18 	bl	1beb6 <ble_gattc_disc_all_dscs_rx_idata>
        ble_gattc_process_status(proc, rc);
   1d086:	4601      	mov	r1, r0
   1d088:	4620      	mov	r0, r4
   1d08a:	f7ff fc77 	bl	1c97c <ble_gattc_process_status>
    }
}
   1d08e:	bd38      	pop	{r3, r4, r5, pc}

0001d090 <ble_gattc_rx_find_info_complete>:
 * Dispatches an incoming notification of the end of a
 * find-information-response to the appropriate active GATT procedure.
 */
void
ble_gattc_rx_find_info_complete(uint16_t conn_handle, int status)
{
   1d090:	b538      	push	{r3, r4, r5, lr}
   1d092:	460d      	mov	r5, r1
#endif

    struct ble_gattc_proc *proc;
    int rc;

    proc = ble_gattc_extract_first_by_conn_op(conn_handle,
   1d094:	2106      	movs	r1, #6
   1d096:	f7ff f913 	bl	1c2c0 <ble_gattc_extract_first_by_conn_op>
                                              BLE_GATT_OP_DISC_ALL_DSCS);
    if (proc != NULL) {
   1d09a:	b138      	cbz	r0, 1d0ac <ble_gattc_rx_find_info_complete+0x1c>
   1d09c:	4604      	mov	r4, r0
        rc = ble_gattc_disc_all_dscs_rx_complete(proc, status);
   1d09e:	4629      	mov	r1, r5
   1d0a0:	f7ff faf4 	bl	1c68c <ble_gattc_disc_all_dscs_rx_complete>
        ble_gattc_process_status(proc, rc);
   1d0a4:	4601      	mov	r1, r0
   1d0a6:	4620      	mov	r0, r4
   1d0a8:	f7ff fc68 	bl	1c97c <ble_gattc_process_status>
    }
}
   1d0ac:	bd38      	pop	{r3, r4, r5, pc}

0001d0ae <ble_gattc_rx_find_type_value_hinfo>:
 * find-by-type-value-response to the appropriate active GATT procedure.
 */
void
ble_gattc_rx_find_type_value_hinfo(uint16_t conn_handle,
                                   struct ble_att_find_type_value_hinfo *hinfo)
{
   1d0ae:	b538      	push	{r3, r4, r5, lr}
   1d0b0:	460d      	mov	r5, r1
#endif

    struct ble_gattc_proc *proc;
    int rc;

    proc = ble_gattc_extract_first_by_conn_op(conn_handle,
   1d0b2:	2102      	movs	r1, #2
   1d0b4:	f7ff f904 	bl	1c2c0 <ble_gattc_extract_first_by_conn_op>
                                              BLE_GATT_OP_DISC_SVC_UUID);
    if (proc != NULL) {
   1d0b8:	b138      	cbz	r0, 1d0ca <ble_gattc_rx_find_type_value_hinfo+0x1c>
   1d0ba:	4604      	mov	r4, r0
        rc = ble_gattc_disc_svc_uuid_rx_hinfo(proc, hinfo);
   1d0bc:	4629      	mov	r1, r5
   1d0be:	f7fe fe06 	bl	1bcce <ble_gattc_disc_svc_uuid_rx_hinfo>
        ble_gattc_process_status(proc, rc);
   1d0c2:	4601      	mov	r1, r0
   1d0c4:	4620      	mov	r0, r4
   1d0c6:	f7ff fc59 	bl	1c97c <ble_gattc_process_status>
    }
}
   1d0ca:	bd38      	pop	{r3, r4, r5, pc}

0001d0cc <ble_gattc_rx_find_type_value_complete>:
 * Dispatches an incoming notification of the end of a
 * find-by-type-value-response to the appropriate active GATT procedure.
 */
void
ble_gattc_rx_find_type_value_complete(uint16_t conn_handle, int status)
{
   1d0cc:	b538      	push	{r3, r4, r5, lr}
   1d0ce:	460d      	mov	r5, r1
#endif

    struct ble_gattc_proc *proc;
    int rc;

    proc = ble_gattc_extract_first_by_conn_op(conn_handle,
   1d0d0:	2102      	movs	r1, #2
   1d0d2:	f7ff f8f5 	bl	1c2c0 <ble_gattc_extract_first_by_conn_op>
                                              BLE_GATT_OP_DISC_SVC_UUID);
    if (proc != NULL) {
   1d0d6:	b138      	cbz	r0, 1d0e8 <ble_gattc_rx_find_type_value_complete+0x1c>
   1d0d8:	4604      	mov	r4, r0
        rc = ble_gattc_disc_svc_uuid_rx_complete(proc, status);
   1d0da:	4629      	mov	r1, r5
   1d0dc:	f7ff fbed 	bl	1c8ba <ble_gattc_disc_svc_uuid_rx_complete>
        ble_gattc_process_status(proc, rc);
   1d0e0:	4601      	mov	r1, r0
   1d0e2:	4620      	mov	r0, r4
   1d0e4:	f7ff fc4a 	bl	1c97c <ble_gattc_process_status>
    }
}
   1d0e8:	bd38      	pop	{r3, r4, r5, pc}
	...

0001d0ec <ble_gattc_rx_read_type_adata>:
 * to the appropriate active GATT procedure.
 */
void
ble_gattc_rx_read_type_adata(uint16_t conn_handle,
                             struct ble_att_read_type_adata *adata)
{
   1d0ec:	b530      	push	{r4, r5, lr}
   1d0ee:	b083      	sub	sp, #12
   1d0f0:	460d      	mov	r5, r1

    const struct ble_gattc_rx_adata_entry *rx_entry;
    struct ble_gattc_proc *proc;
    int rc;

    proc = BLE_GATTC_RX_EXTRACT_RX_ENTRY(conn_handle,
   1d0f2:	ab01      	add	r3, sp, #4
   1d0f4:	2204      	movs	r2, #4
   1d0f6:	4907      	ldr	r1, [pc, #28]	; (1d114 <ble_gattc_rx_read_type_adata+0x28>)
   1d0f8:	f7ff f8f6 	bl	1c2e8 <ble_gattc_extract_with_rx_entry>
                                         ble_gattc_rx_read_type_elem_entries,
                                         &rx_entry);
    if (proc != NULL) {
   1d0fc:	b140      	cbz	r0, 1d110 <ble_gattc_rx_read_type_adata+0x24>
   1d0fe:	4604      	mov	r4, r0
        rc = rx_entry->cb(proc, adata);
   1d100:	9b01      	ldr	r3, [sp, #4]
   1d102:	685b      	ldr	r3, [r3, #4]
   1d104:	4629      	mov	r1, r5
   1d106:	4798      	blx	r3
        ble_gattc_process_status(proc, rc);
   1d108:	4601      	mov	r1, r0
   1d10a:	4620      	mov	r0, r4
   1d10c:	f7ff fc36 	bl	1c97c <ble_gattc_process_status>
    }
}
   1d110:	b003      	add	sp, #12
   1d112:	bd30      	pop	{r4, r5, pc}
   1d114:	0002b474 	.word	0x0002b474

0001d118 <ble_gattc_rx_read_type_complete>:
 * Dispatches an incoming notification of the end of a read-by-type-response to
 * the appropriate active GATT procedure.
 */
void
ble_gattc_rx_read_type_complete(uint16_t conn_handle, int status)
{
   1d118:	b530      	push	{r4, r5, lr}
   1d11a:	b083      	sub	sp, #12
   1d11c:	460d      	mov	r5, r1

    const struct ble_gattc_rx_complete_entry *rx_entry;
    struct ble_gattc_proc *proc;
    int rc;

    proc = BLE_GATTC_RX_EXTRACT_RX_ENTRY(
   1d11e:	ab01      	add	r3, sp, #4
   1d120:	2204      	movs	r2, #4
   1d122:	4907      	ldr	r1, [pc, #28]	; (1d140 <ble_gattc_rx_read_type_complete+0x28>)
   1d124:	f7ff f8e0 	bl	1c2e8 <ble_gattc_extract_with_rx_entry>
        conn_handle, ble_gattc_rx_read_type_complete_entries,
        &rx_entry);
    if (proc != NULL) {
   1d128:	b140      	cbz	r0, 1d13c <ble_gattc_rx_read_type_complete+0x24>
   1d12a:	4604      	mov	r4, r0
        rc = rx_entry->cb(proc, status);
   1d12c:	9b01      	ldr	r3, [sp, #4]
   1d12e:	685b      	ldr	r3, [r3, #4]
   1d130:	4629      	mov	r1, r5
   1d132:	4798      	blx	r3
        ble_gattc_process_status(proc, rc);
   1d134:	4601      	mov	r1, r0
   1d136:	4620      	mov	r0, r4
   1d138:	f7ff fc20 	bl	1c97c <ble_gattc_process_status>
    }
}
   1d13c:	b003      	add	sp, #12
   1d13e:	bd30      	pop	{r4, r5, pc}
   1d140:	0002b454 	.word	0x0002b454

0001d144 <ble_gattc_rx_read_group_type_adata>:
 * read-by-group-type-response to the appropriate active GATT procedure.
 */
void
ble_gattc_rx_read_group_type_adata(uint16_t conn_handle,
                                   struct ble_att_read_group_type_adata *adata)
{
   1d144:	b538      	push	{r3, r4, r5, lr}
   1d146:	460d      	mov	r5, r1
#endif

    struct ble_gattc_proc *proc;
    int rc;

    proc = ble_gattc_extract_first_by_conn_op(conn_handle,
   1d148:	2101      	movs	r1, #1
   1d14a:	f7ff f8b9 	bl	1c2c0 <ble_gattc_extract_first_by_conn_op>
                                              BLE_GATT_OP_DISC_ALL_SVCS);
    if (proc != NULL) {
   1d14e:	b138      	cbz	r0, 1d160 <ble_gattc_rx_read_group_type_adata+0x1c>
   1d150:	4604      	mov	r4, r0
        rc = ble_gattc_disc_all_svcs_rx_adata(proc, adata);
   1d152:	4629      	mov	r1, r5
   1d154:	f7ff fcc6 	bl	1cae4 <ble_gattc_disc_all_svcs_rx_adata>
        ble_gattc_process_status(proc, rc);
   1d158:	4601      	mov	r1, r0
   1d15a:	4620      	mov	r0, r4
   1d15c:	f7ff fc0e 	bl	1c97c <ble_gattc_process_status>
    }
}
   1d160:	bd38      	pop	{r3, r4, r5, pc}

0001d162 <ble_gattc_rx_read_group_type_complete>:
 * Dispatches an incoming notification of the end of a
 * read-by-group-type-response to the appropriate active GATT procedure.
 */
void
ble_gattc_rx_read_group_type_complete(uint16_t conn_handle, int status)
{
   1d162:	b538      	push	{r3, r4, r5, lr}
   1d164:	460d      	mov	r5, r1
#endif

    struct ble_gattc_proc *proc;
    int rc;

    proc = ble_gattc_extract_first_by_conn_op(conn_handle,
   1d166:	2101      	movs	r1, #1
   1d168:	f7ff f8aa 	bl	1c2c0 <ble_gattc_extract_first_by_conn_op>
                                              BLE_GATT_OP_DISC_ALL_SVCS);
    if (proc != NULL) {
   1d16c:	b138      	cbz	r0, 1d17e <ble_gattc_rx_read_group_type_complete+0x1c>
   1d16e:	4604      	mov	r4, r0
        rc = ble_gattc_disc_all_svcs_rx_complete(proc, status);
   1d170:	4629      	mov	r1, r5
   1d172:	f7ff fbe6 	bl	1c942 <ble_gattc_disc_all_svcs_rx_complete>
        ble_gattc_process_status(proc, rc);
   1d176:	4601      	mov	r1, r0
   1d178:	4620      	mov	r0, r4
   1d17a:	f7ff fbff 	bl	1c97c <ble_gattc_process_status>
    }
}
   1d17e:	bd38      	pop	{r3, r4, r5, pc}

0001d180 <ble_gattc_rx_read_rsp>:
 * Dispatches an incoming ATT read-response to the appropriate active GATT
 * procedure.
 */
void
ble_gattc_rx_read_rsp(uint16_t conn_handle, int status, struct os_mbuf **om)
{
   1d180:	b570      	push	{r4, r5, r6, lr}
   1d182:	b082      	sub	sp, #8
   1d184:	460d      	mov	r5, r1
   1d186:	4616      	mov	r6, r2

    const struct ble_gattc_rx_attr_entry *rx_entry;
    struct ble_gattc_proc *proc;
    int rc;

    proc = BLE_GATTC_RX_EXTRACT_RX_ENTRY(conn_handle,
   1d188:	ab01      	add	r3, sp, #4
   1d18a:	2203      	movs	r2, #3
   1d18c:	4907      	ldr	r1, [pc, #28]	; (1d1ac <ble_gattc_rx_read_rsp+0x2c>)
   1d18e:	f7ff f8ab 	bl	1c2e8 <ble_gattc_extract_with_rx_entry>
                                         ble_gattc_rx_read_rsp_entries,
                                         &rx_entry);
    if (proc != NULL) {
   1d192:	b148      	cbz	r0, 1d1a8 <ble_gattc_rx_read_rsp+0x28>
   1d194:	4604      	mov	r4, r0
        rc = rx_entry->cb(proc, status, om);
   1d196:	9b01      	ldr	r3, [sp, #4]
   1d198:	685b      	ldr	r3, [r3, #4]
   1d19a:	4632      	mov	r2, r6
   1d19c:	4629      	mov	r1, r5
   1d19e:	4798      	blx	r3
        ble_gattc_process_status(proc, rc);
   1d1a0:	4601      	mov	r1, r0
   1d1a2:	4620      	mov	r0, r4
   1d1a4:	f7ff fbea 	bl	1c97c <ble_gattc_process_status>
    }
}
   1d1a8:	b002      	add	sp, #8
   1d1aa:	bd70      	pop	{r4, r5, r6, pc}
   1d1ac:	0002b43c 	.word	0x0002b43c

0001d1b0 <ble_gattc_rx_read_blob_rsp>:
 * procedure.
 */
void
ble_gattc_rx_read_blob_rsp(uint16_t conn_handle, int status,
                           struct os_mbuf **om)
{
   1d1b0:	b570      	push	{r4, r5, r6, lr}
   1d1b2:	460d      	mov	r5, r1
   1d1b4:	4616      	mov	r6, r2
#endif

    struct ble_gattc_proc *proc;
    int rc;

    proc = ble_gattc_extract_first_by_conn_op(conn_handle,
   1d1b6:	2109      	movs	r1, #9
   1d1b8:	f7ff f882 	bl	1c2c0 <ble_gattc_extract_first_by_conn_op>
                                              BLE_GATT_OP_READ_LONG);
    if (proc != NULL) {
   1d1bc:	b140      	cbz	r0, 1d1d0 <ble_gattc_rx_read_blob_rsp+0x20>
   1d1be:	4604      	mov	r4, r0
        rc = ble_gattc_read_long_rx_read_rsp(proc, status, om);
   1d1c0:	4632      	mov	r2, r6
   1d1c2:	4629      	mov	r1, r5
   1d1c4:	f7ff fa0f 	bl	1c5e6 <ble_gattc_read_long_rx_read_rsp>
        ble_gattc_process_status(proc, rc);
   1d1c8:	4601      	mov	r1, r0
   1d1ca:	4620      	mov	r0, r4
   1d1cc:	f7ff fbd6 	bl	1c97c <ble_gattc_process_status>
    }
}
   1d1d0:	bd70      	pop	{r4, r5, r6, pc}

0001d1d2 <ble_gattc_rx_read_mult_rsp>:
 * GATT procedure.
 */
void
ble_gattc_rx_read_mult_rsp(uint16_t conn_handle, int status,
                           struct os_mbuf **om)
{
   1d1d2:	b570      	push	{r4, r5, r6, lr}
   1d1d4:	460d      	mov	r5, r1
   1d1d6:	4616      	mov	r6, r2
    return;
#endif

    struct ble_gattc_proc *proc;

    proc = ble_gattc_extract_first_by_conn_op(conn_handle,
   1d1d8:	210a      	movs	r1, #10
   1d1da:	f7ff f871 	bl	1c2c0 <ble_gattc_extract_first_by_conn_op>
                                              BLE_GATT_OP_READ_MULT);
    if (proc != NULL) {
   1d1de:	b148      	cbz	r0, 1d1f4 <ble_gattc_rx_read_mult_rsp+0x22>
   1d1e0:	4604      	mov	r4, r0
        ble_gattc_read_mult_cb(proc, status, 0, om);
   1d1e2:	4633      	mov	r3, r6
   1d1e4:	2200      	movs	r2, #0
   1d1e6:	4629      	mov	r1, r5
   1d1e8:	f7fe ff2e 	bl	1c048 <ble_gattc_read_mult_cb>
        ble_gattc_process_status(proc, BLE_HS_EDONE);
   1d1ec:	210e      	movs	r1, #14
   1d1ee:	4620      	mov	r0, r4
   1d1f0:	f7ff fbc4 	bl	1c97c <ble_gattc_process_status>
    }
}
   1d1f4:	bd70      	pop	{r4, r5, r6, pc}

0001d1f6 <ble_gattc_rx_write_rsp>:
 * Dispatches an incoming ATT write-response to the appropriate active GATT
 * procedure.
 */
void
ble_gattc_rx_write_rsp(uint16_t conn_handle)
{
   1d1f6:	b510      	push	{r4, lr}
    return;
#endif

    struct ble_gattc_proc *proc;

    proc = ble_gattc_extract_first_by_conn_op(conn_handle,
   1d1f8:	210b      	movs	r1, #11
   1d1fa:	f7ff f861 	bl	1c2c0 <ble_gattc_extract_first_by_conn_op>
                                              BLE_GATT_OP_WRITE);
    if (proc != NULL) {
   1d1fe:	b140      	cbz	r0, 1d212 <ble_gattc_rx_write_rsp+0x1c>
   1d200:	4604      	mov	r4, r0
        ble_gattc_write_cb(proc, 0, 0);
   1d202:	2200      	movs	r2, #0
   1d204:	4611      	mov	r1, r2
   1d206:	f7ff f89b 	bl	1c340 <ble_gattc_write_cb>
        ble_gattc_process_status(proc, BLE_HS_EDONE);
   1d20a:	210e      	movs	r1, #14
   1d20c:	4620      	mov	r0, r4
   1d20e:	f7ff fbb5 	bl	1c97c <ble_gattc_process_status>
    }
}
   1d212:	bd10      	pop	{r4, pc}

0001d214 <ble_gattc_rx_prep_write_rsp>:
 */
void
ble_gattc_rx_prep_write_rsp(uint16_t conn_handle, int status,
                            uint16_t handle, uint16_t offset,
                            struct os_mbuf **om)
{
   1d214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d218:	b084      	sub	sp, #16
   1d21a:	4688      	mov	r8, r1
   1d21c:	4616      	mov	r6, r2
   1d21e:	461f      	mov	r7, r3

    const struct ble_gattc_rx_prep_entry *rx_entry;
    struct ble_gattc_proc *proc;
    int rc;

    proc = BLE_GATTC_RX_EXTRACT_RX_ENTRY(conn_handle,
   1d220:	ab03      	add	r3, sp, #12
   1d222:	2202      	movs	r2, #2
   1d224:	4909      	ldr	r1, [pc, #36]	; (1d24c <ble_gattc_rx_prep_write_rsp+0x38>)
   1d226:	f7ff f85f 	bl	1c2e8 <ble_gattc_extract_with_rx_entry>
                                         ble_gattc_rx_prep_entries,
                                         &rx_entry);
    if (proc != NULL) {
   1d22a:	b160      	cbz	r0, 1d246 <ble_gattc_rx_prep_write_rsp+0x32>
   1d22c:	4604      	mov	r4, r0
        rc = rx_entry->cb(proc, status, handle, offset, om);
   1d22e:	9b03      	ldr	r3, [sp, #12]
   1d230:	685d      	ldr	r5, [r3, #4]
   1d232:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1d234:	9300      	str	r3, [sp, #0]
   1d236:	463b      	mov	r3, r7
   1d238:	4632      	mov	r2, r6
   1d23a:	4641      	mov	r1, r8
   1d23c:	47a8      	blx	r5
        ble_gattc_process_status(proc, rc);
   1d23e:	4601      	mov	r1, r0
   1d240:	4620      	mov	r0, r4
   1d242:	f7ff fb9b 	bl	1c97c <ble_gattc_process_status>
    }
}
   1d246:	b004      	add	sp, #16
   1d248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1d24c:	0002b42c 	.word	0x0002b42c

0001d250 <ble_gattc_rx_exec_write_rsp>:
 * Dispatches an incoming ATT execute-write-response to the appropriate active
 * GATT procedure.
 */
void
ble_gattc_rx_exec_write_rsp(uint16_t conn_handle, int status)
{
   1d250:	b530      	push	{r4, r5, lr}
   1d252:	b083      	sub	sp, #12
   1d254:	460d      	mov	r5, r1

    const struct ble_gattc_rx_exec_entry *rx_entry;
    struct ble_gattc_proc *proc;
    int rc;

    proc = BLE_GATTC_RX_EXTRACT_RX_ENTRY(conn_handle,
   1d256:	ab01      	add	r3, sp, #4
   1d258:	2202      	movs	r2, #2
   1d25a:	4907      	ldr	r1, [pc, #28]	; (1d278 <ble_gattc_rx_exec_write_rsp+0x28>)
   1d25c:	f7ff f844 	bl	1c2e8 <ble_gattc_extract_with_rx_entry>
                                         ble_gattc_rx_exec_entries, &rx_entry);
    if (proc != NULL) {
   1d260:	b140      	cbz	r0, 1d274 <ble_gattc_rx_exec_write_rsp+0x24>
   1d262:	4604      	mov	r4, r0
        rc = rx_entry->cb(proc, status);
   1d264:	9b01      	ldr	r3, [sp, #4]
   1d266:	685b      	ldr	r3, [r3, #4]
   1d268:	4629      	mov	r1, r5
   1d26a:	4798      	blx	r3
        ble_gattc_process_status(proc, rc);
   1d26c:	4601      	mov	r1, r0
   1d26e:	4620      	mov	r0, r4
   1d270:	f7ff fb84 	bl	1c97c <ble_gattc_process_status>
    }
}
   1d274:	b003      	add	sp, #12
   1d276:	bd30      	pop	{r4, r5, pc}
   1d278:	0002b41c 	.word	0x0002b41c

0001d27c <ble_gattc_rx_indicate_rsp>:
 * Dispatches an incoming ATT handle-value-confirmation to the appropriate
 * active GATT procedure.
 */
void
ble_gattc_rx_indicate_rsp(uint16_t conn_handle)
{
   1d27c:	b510      	push	{r4, lr}
    return;
#endif

    struct ble_gattc_proc *proc;

    proc = ble_gattc_extract_first_by_conn_op(conn_handle,
   1d27e:	210e      	movs	r1, #14
   1d280:	f7ff f81e 	bl	1c2c0 <ble_gattc_extract_first_by_conn_op>
                                              BLE_GATT_OP_INDICATE);
    if (proc != NULL) {
   1d284:	b130      	cbz	r0, 1d294 <ble_gattc_rx_indicate_rsp+0x18>
   1d286:	4604      	mov	r4, r0
        ble_gattc_indicate_rx_rsp(proc);
   1d288:	f7ff fc1a 	bl	1cac0 <ble_gattc_indicate_rx_rsp>
        ble_gattc_process_status(proc, BLE_HS_EDONE);
   1d28c:	210e      	movs	r1, #14
   1d28e:	4620      	mov	r0, r4
   1d290:	f7ff fb74 	bl	1c97c <ble_gattc_process_status>
    }
}
   1d294:	bd10      	pop	{r4, pc}

0001d296 <ble_gattc_connection_broken>:
 * @param conn_handle           The handle of the connection that was
 *                                  terminated.
 */
void
ble_gattc_connection_broken(uint16_t conn_handle)
{
   1d296:	b508      	push	{r3, lr}
    ble_gattc_fail_procs(conn_handle, BLE_GATT_OP_NONE, BLE_HS_ENOTCONN);
   1d298:	2207      	movs	r2, #7
   1d29a:	21ff      	movs	r1, #255	; 0xff
   1d29c:	f7ff f8a2 	bl	1c3e4 <ble_gattc_fail_procs>
}
   1d2a0:	bd08      	pop	{r3, pc}
	...

0001d2a4 <ble_gattc_init>:
    return !STAILQ_EMPTY(&ble_gattc_procs);
}

int
ble_gattc_init(void)
{
   1d2a4:	b500      	push	{lr}
   1d2a6:	b083      	sub	sp, #12
    int rc;

    STAILQ_INIT(&ble_gattc_procs);
   1d2a8:	4b0f      	ldr	r3, [pc, #60]	; (1d2e8 <ble_gattc_init+0x44>)
   1d2aa:	2200      	movs	r2, #0
   1d2ac:	601a      	str	r2, [r3, #0]
   1d2ae:	605b      	str	r3, [r3, #4]

    if (MYNEWT_VAL(BLE_GATT_MAX_PROCS) > 0) {
        rc = os_mempool_init(&ble_gattc_proc_pool,
   1d2b0:	4b0e      	ldr	r3, [pc, #56]	; (1d2ec <ble_gattc_init+0x48>)
   1d2b2:	9300      	str	r3, [sp, #0]
   1d2b4:	4b0e      	ldr	r3, [pc, #56]	; (1d2f0 <ble_gattc_init+0x4c>)
   1d2b6:	2238      	movs	r2, #56	; 0x38
   1d2b8:	2104      	movs	r1, #4
   1d2ba:	480e      	ldr	r0, [pc, #56]	; (1d2f4 <ble_gattc_init+0x50>)
   1d2bc:	f7ef fdf4 	bl	cea8 <os_mempool_init>
   1d2c0:	4603      	mov	r3, r0
                             MYNEWT_VAL(BLE_GATT_MAX_PROCS),
                             sizeof (struct ble_gattc_proc),
                             ble_gattc_proc_mem,
                             "ble_gattc_proc_pool");
        if (rc != 0) {
   1d2c2:	b118      	cbz	r0, 1d2cc <ble_gattc_init+0x28>
    if (rc != 0) {
        return BLE_HS_EOS;
    }

    return 0;
}
   1d2c4:	4618      	mov	r0, r3
   1d2c6:	b003      	add	sp, #12
   1d2c8:	f85d fb04 	ldr.w	pc, [sp], #4
    rc = stats_init_and_reg(
   1d2cc:	4b0a      	ldr	r3, [pc, #40]	; (1d2f8 <ble_gattc_init+0x54>)
   1d2ce:	9301      	str	r3, [sp, #4]
   1d2d0:	2300      	movs	r3, #0
   1d2d2:	9300      	str	r3, [sp, #0]
   1d2d4:	2223      	movs	r2, #35	; 0x23
   1d2d6:	2104      	movs	r1, #4
   1d2d8:	4808      	ldr	r0, [pc, #32]	; (1d2fc <ble_gattc_init+0x58>)
   1d2da:	f7f2 fec9 	bl	10070 <stats_init_and_reg>
    if (rc != 0) {
   1d2de:	4603      	mov	r3, r0
   1d2e0:	2800      	cmp	r0, #0
   1d2e2:	d0ef      	beq.n	1d2c4 <ble_gattc_init+0x20>
        return BLE_HS_EOS;
   1d2e4:	230b      	movs	r3, #11
   1d2e6:	e7ed      	b.n	1d2c4 <ble_gattc_init+0x20>
   1d2e8:	20002c30 	.word	0x20002c30
   1d2ec:	0002b370 	.word	0x0002b370
   1d2f0:	20002b34 	.word	0x20002b34
   1d2f4:	20002c14 	.word	0x20002c14
   1d2f8:	0002b384 	.word	0x0002b384
   1d2fc:	20004528 	.word	0x20004528

0001d300 <ble_gatts_chr_clt_cfg_allowed>:
ble_gatts_chr_clt_cfg_allowed(const struct ble_gatt_chr_def *chr)
{
    uint16_t flags;

    flags = 0;
    if (chr->flags & BLE_GATT_CHR_F_NOTIFY) {
   1d300:	8a03      	ldrh	r3, [r0, #16]
   1d302:	f013 0f10 	tst.w	r3, #16
   1d306:	d106      	bne.n	1d316 <ble_gatts_chr_clt_cfg_allowed+0x16>
    flags = 0;
   1d308:	2000      	movs	r0, #0
        flags |= BLE_GATTS_CLT_CFG_F_NOTIFY;
    }
    if (chr->flags & BLE_GATT_CHR_F_INDICATE) {
   1d30a:	f013 0f20 	tst.w	r3, #32
   1d30e:	d001      	beq.n	1d314 <ble_gatts_chr_clt_cfg_allowed+0x14>
        flags |= BLE_GATTS_CLT_CFG_F_INDICATE;
   1d310:	f040 0002 	orr.w	r0, r0, #2
    }

    return flags;
}
   1d314:	4770      	bx	lr
        flags |= BLE_GATTS_CLT_CFG_F_NOTIFY;
   1d316:	2001      	movs	r0, #1
   1d318:	e7f7      	b.n	1d30a <ble_gatts_chr_clt_cfg_allowed+0xa>

0001d31a <ble_gatts_att_flags_from_chr_flags>:
ble_gatts_att_flags_from_chr_flags(ble_gatt_chr_flags chr_flags)
{
    uint8_t att_flags;

    att_flags = 0;
    if (chr_flags & BLE_GATT_CHR_F_READ) {
   1d31a:	f010 0f02 	tst.w	r0, #2
   1d31e:	d125      	bne.n	1d36c <ble_gatts_att_flags_from_chr_flags+0x52>
    att_flags = 0;
   1d320:	2300      	movs	r3, #0
        att_flags |= BLE_ATT_F_READ;
    }
    if (chr_flags & (BLE_GATT_CHR_F_WRITE_NO_RSP | BLE_GATT_CHR_F_WRITE)) {
   1d322:	f010 0f0c 	tst.w	r0, #12
   1d326:	d001      	beq.n	1d32c <ble_gatts_att_flags_from_chr_flags+0x12>
        att_flags |= BLE_ATT_F_WRITE;
   1d328:	f043 0302 	orr.w	r3, r3, #2
    }
    if (chr_flags & BLE_GATT_CHR_F_READ_ENC) {
   1d32c:	f410 7f00 	tst.w	r0, #512	; 0x200
   1d330:	d001      	beq.n	1d336 <ble_gatts_att_flags_from_chr_flags+0x1c>
        att_flags |= BLE_ATT_F_READ_ENC;
   1d332:	f043 0304 	orr.w	r3, r3, #4
    }
    if (chr_flags & BLE_GATT_CHR_F_READ_AUTHEN) {
   1d336:	f410 6f80 	tst.w	r0, #1024	; 0x400
   1d33a:	d001      	beq.n	1d340 <ble_gatts_att_flags_from_chr_flags+0x26>
        att_flags |= BLE_ATT_F_READ_AUTHEN;
   1d33c:	f043 0308 	orr.w	r3, r3, #8
    }
    if (chr_flags & BLE_GATT_CHR_F_READ_AUTHOR) {
   1d340:	f410 6f00 	tst.w	r0, #2048	; 0x800
   1d344:	d001      	beq.n	1d34a <ble_gatts_att_flags_from_chr_flags+0x30>
        att_flags |= BLE_ATT_F_READ_AUTHOR;
   1d346:	f043 0310 	orr.w	r3, r3, #16
    }
    if (chr_flags & BLE_GATT_CHR_F_WRITE_ENC) {
   1d34a:	f410 5f80 	tst.w	r0, #4096	; 0x1000
   1d34e:	d001      	beq.n	1d354 <ble_gatts_att_flags_from_chr_flags+0x3a>
        att_flags |= BLE_ATT_F_WRITE_ENC;
   1d350:	f043 0320 	orr.w	r3, r3, #32
    }
    if (chr_flags & BLE_GATT_CHR_F_WRITE_AUTHEN) {
   1d354:	f410 5f00 	tst.w	r0, #8192	; 0x2000
   1d358:	d001      	beq.n	1d35e <ble_gatts_att_flags_from_chr_flags+0x44>
        att_flags |= BLE_ATT_F_WRITE_AUTHEN;
   1d35a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    }
    if (chr_flags & BLE_GATT_CHR_F_WRITE_AUTHOR) {
   1d35e:	f410 4f80 	tst.w	r0, #16384	; 0x4000
   1d362:	d001      	beq.n	1d368 <ble_gatts_att_flags_from_chr_flags+0x4e>
        att_flags |= BLE_ATT_F_WRITE_AUTHOR;
   1d364:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    }

    return att_flags;
}
   1d368:	4618      	mov	r0, r3
   1d36a:	4770      	bx	lr
        att_flags |= BLE_ATT_F_READ;
   1d36c:	2301      	movs	r3, #1
   1d36e:	e7d8      	b.n	1d322 <ble_gatts_att_flags_from_chr_flags+0x8>

0001d370 <ble_gatts_chr_properties>:
{
    uint8_t properties;

    properties = 0;

    if (chr->flags & BLE_GATT_CHR_F_BROADCAST) {
   1d370:	8a03      	ldrh	r3, [r0, #16]
   1d372:	f013 0f01 	tst.w	r3, #1
   1d376:	d124      	bne.n	1d3c2 <ble_gatts_chr_properties+0x52>
    properties = 0;
   1d378:	2000      	movs	r0, #0
        properties |= BLE_GATT_CHR_PROP_BROADCAST;
    }
    if (chr->flags & BLE_GATT_CHR_F_READ) {
   1d37a:	f013 0f02 	tst.w	r3, #2
   1d37e:	d001      	beq.n	1d384 <ble_gatts_chr_properties+0x14>
        properties |= BLE_GATT_CHR_PROP_READ;
   1d380:	f040 0002 	orr.w	r0, r0, #2
    }
    if (chr->flags & BLE_GATT_CHR_F_WRITE_NO_RSP) {
   1d384:	f013 0f04 	tst.w	r3, #4
   1d388:	d001      	beq.n	1d38e <ble_gatts_chr_properties+0x1e>
        properties |= BLE_GATT_CHR_PROP_WRITE_NO_RSP;
   1d38a:	f040 0004 	orr.w	r0, r0, #4
    }
    if (chr->flags & BLE_GATT_CHR_F_WRITE) {
   1d38e:	f013 0f08 	tst.w	r3, #8
   1d392:	d001      	beq.n	1d398 <ble_gatts_chr_properties+0x28>
        properties |= BLE_GATT_CHR_PROP_WRITE;
   1d394:	f040 0008 	orr.w	r0, r0, #8
    }
    if (chr->flags & BLE_GATT_CHR_F_NOTIFY) {
   1d398:	f013 0f10 	tst.w	r3, #16
   1d39c:	d001      	beq.n	1d3a2 <ble_gatts_chr_properties+0x32>
        properties |= BLE_GATT_CHR_PROP_NOTIFY;
   1d39e:	f040 0010 	orr.w	r0, r0, #16
    }
    if (chr->flags & BLE_GATT_CHR_F_INDICATE) {
   1d3a2:	f013 0f20 	tst.w	r3, #32
   1d3a6:	d001      	beq.n	1d3ac <ble_gatts_chr_properties+0x3c>
        properties |= BLE_GATT_CHR_PROP_INDICATE;
   1d3a8:	f040 0020 	orr.w	r0, r0, #32
    }
    if (chr->flags & BLE_GATT_CHR_F_AUTH_SIGN_WRITE) {
   1d3ac:	f013 0f40 	tst.w	r3, #64	; 0x40
   1d3b0:	d001      	beq.n	1d3b6 <ble_gatts_chr_properties+0x46>
        properties |= BLE_GATT_CHR_PROP_AUTH_SIGN_WRITE;
   1d3b2:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    }
    if (chr->flags &
   1d3b6:	f413 7fc0 	tst.w	r3, #384	; 0x180
   1d3ba:	d001      	beq.n	1d3c0 <ble_gatts_chr_properties+0x50>
        (BLE_GATT_CHR_F_RELIABLE_WRITE | BLE_GATT_CHR_F_AUX_WRITE)) {

        properties |= BLE_GATT_CHR_PROP_EXTENDED;
   1d3bc:	f040 0080 	orr.w	r0, r0, #128	; 0x80
    }

    return properties;
}
   1d3c0:	4770      	bx	lr
        properties |= BLE_GATT_CHR_PROP_BROADCAST;
   1d3c2:	2001      	movs	r0, #1
   1d3c4:	e7d9      	b.n	1d37a <ble_gatts_chr_properties+0xa>

0001d3c6 <ble_gatts_chr_is_sane>:
}

static int
ble_gatts_chr_is_sane(const struct ble_gatt_chr_def *chr)
{
    if (chr->uuid == NULL) {
   1d3c6:	6803      	ldr	r3, [r0, #0]
   1d3c8:	b12b      	cbz	r3, 1d3d6 <ble_gatts_chr_is_sane+0x10>
        return 0;
    }

    if (chr->access_cb == NULL) {
   1d3ca:	6843      	ldr	r3, [r0, #4]
   1d3cc:	b10b      	cbz	r3, 1d3d2 <ble_gatts_chr_is_sane+0xc>
        return 0;
    }

    /* XXX: Check properties. */

    return 1;
   1d3ce:	2001      	movs	r0, #1
}
   1d3d0:	4770      	bx	lr
        return 0;
   1d3d2:	2000      	movs	r0, #0
   1d3d4:	4770      	bx	lr
        return 0;
   1d3d6:	2000      	movs	r0, #0
   1d3d8:	4770      	bx	lr

0001d3da <ble_gatts_chr_op>:

static uint8_t
ble_gatts_chr_op(uint8_t att_op)
{
    switch (att_op) {
   1d3da:	2802      	cmp	r0, #2
   1d3dc:	d001      	beq.n	1d3e2 <ble_gatts_chr_op+0x8>
    case BLE_ATT_ACCESS_OP_READ:
        return BLE_GATT_ACCESS_OP_READ_CHR;
   1d3de:	2000      	movs	r0, #0
   1d3e0:	4770      	bx	lr

    case BLE_ATT_ACCESS_OP_WRITE:
        return BLE_GATT_ACCESS_OP_WRITE_CHR;
   1d3e2:	2001      	movs	r0, #1

    default:
        BLE_HS_DBG_ASSERT(0);
        return BLE_GATT_ACCESS_OP_READ_CHR;
    }
}
   1d3e4:	4770      	bx	lr
	...

0001d3e8 <ble_gatts_chr_inc_val_stat>:

static void
ble_gatts_chr_inc_val_stat(uint8_t gatt_op)
{
    switch (gatt_op) {
   1d3e8:	b110      	cbz	r0, 1d3f0 <ble_gatts_chr_inc_val_stat+0x8>
   1d3ea:	2801      	cmp	r0, #1
   1d3ec:	d005      	beq.n	1d3fa <ble_gatts_chr_inc_val_stat+0x12>
   1d3ee:	4770      	bx	lr
    case BLE_GATT_ACCESS_OP_READ_CHR:
        STATS_INC(ble_gatts_stats, chr_val_reads);
   1d3f0:	4a04      	ldr	r2, [pc, #16]	; (1d404 <ble_gatts_chr_inc_val_stat+0x1c>)
   1d3f2:	6a53      	ldr	r3, [r2, #36]	; 0x24
   1d3f4:	3301      	adds	r3, #1
   1d3f6:	6253      	str	r3, [r2, #36]	; 0x24
        break;
   1d3f8:	4770      	bx	lr

    case BLE_GATT_ACCESS_OP_WRITE_CHR:
        STATS_INC(ble_gatts_stats, chr_val_writes);
   1d3fa:	4a02      	ldr	r2, [pc, #8]	; (1d404 <ble_gatts_chr_inc_val_stat+0x1c>)
   1d3fc:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1d3fe:	3301      	adds	r3, #1
   1d400:	6293      	str	r3, [r2, #40]	; 0x28
        break;

    default:
        break;
    }
}
   1d402:	4770      	bx	lr
   1d404:	200045c0 	.word	0x200045c0

0001d408 <ble_gatts_find_svc_entry_idx>:
static int
ble_gatts_find_svc_entry_idx(const struct ble_gatt_svc_def *svc)
{
    int i;

    for (i = 0; i < ble_gatts_num_svc_entries; i++) {
   1d408:	2300      	movs	r3, #0
   1d40a:	4a08      	ldr	r2, [pc, #32]	; (1d42c <ble_gatts_find_svc_entry_idx+0x24>)
   1d40c:	8812      	ldrh	r2, [r2, #0]
   1d40e:	429a      	cmp	r2, r3
   1d410:	dd07      	ble.n	1d422 <ble_gatts_find_svc_entry_idx+0x1a>
        if (ble_gatts_svc_entries[i].svc == svc) {
   1d412:	4a07      	ldr	r2, [pc, #28]	; (1d430 <ble_gatts_find_svc_entry_idx+0x28>)
   1d414:	6812      	ldr	r2, [r2, #0]
   1d416:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   1d41a:	4282      	cmp	r2, r0
   1d41c:	d003      	beq.n	1d426 <ble_gatts_find_svc_entry_idx+0x1e>
    for (i = 0; i < ble_gatts_num_svc_entries; i++) {
   1d41e:	3301      	adds	r3, #1
   1d420:	e7f3      	b.n	1d40a <ble_gatts_find_svc_entry_idx+0x2>
            return i;
        }
    }

    return -1;
   1d422:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
   1d426:	4618      	mov	r0, r3
   1d428:	4770      	bx	lr
   1d42a:	bf00      	nop
   1d42c:	20002c6c 	.word	0x20002c6c
   1d430:	20002c74 	.word	0x20002c74

0001d434 <ble_gatts_svc_incs_satisfied>:

static int
ble_gatts_svc_incs_satisfied(const struct ble_gatt_svc_def *svc)
{
   1d434:	b538      	push	{r3, r4, r5, lr}
    int idx;
    int i;

    if (svc->includes == NULL) {
   1d436:	6885      	ldr	r5, [r0, #8]
   1d438:	b195      	cbz	r5, 1d460 <ble_gatts_svc_incs_satisfied+0x2c>
        /* No included services. */
        return 1;
    }

    for (i = 0; svc->includes[i] != NULL; i++) {
   1d43a:	2400      	movs	r4, #0
   1d43c:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   1d440:	b160      	cbz	r0, 1d45c <ble_gatts_svc_incs_satisfied+0x28>
        idx = ble_gatts_find_svc_entry_idx(svc->includes[i]);
   1d442:	f7ff ffe1 	bl	1d408 <ble_gatts_find_svc_entry_idx>
        if (idx == -1 || ble_gatts_svc_entries[idx].handle == 0) {
   1d446:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   1d44a:	d00b      	beq.n	1d464 <ble_gatts_svc_incs_satisfied+0x30>
   1d44c:	4b07      	ldr	r3, [pc, #28]	; (1d46c <ble_gatts_svc_incs_satisfied+0x38>)
   1d44e:	681b      	ldr	r3, [r3, #0]
   1d450:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   1d454:	8883      	ldrh	r3, [r0, #4]
   1d456:	b13b      	cbz	r3, 1d468 <ble_gatts_svc_incs_satisfied+0x34>
    for (i = 0; svc->includes[i] != NULL; i++) {
   1d458:	3401      	adds	r4, #1
   1d45a:	e7ef      	b.n	1d43c <ble_gatts_svc_incs_satisfied+0x8>
            return 0;
        }
    }

    return 1;
   1d45c:	2001      	movs	r0, #1
   1d45e:	e000      	b.n	1d462 <ble_gatts_svc_incs_satisfied+0x2e>
        return 1;
   1d460:	2001      	movs	r0, #1
}
   1d462:	bd38      	pop	{r3, r4, r5, pc}
            return 0;
   1d464:	2000      	movs	r0, #0
   1d466:	e7fc      	b.n	1d462 <ble_gatts_svc_incs_satisfied+0x2e>
   1d468:	2000      	movs	r0, #0
   1d46a:	e7fa      	b.n	1d462 <ble_gatts_svc_incs_satisfied+0x2e>
   1d46c:	20002c74 	.word	0x20002c74

0001d470 <ble_gatts_dsc_op>:
}

static uint8_t
ble_gatts_dsc_op(uint8_t att_op)
{
    switch (att_op) {
   1d470:	2802      	cmp	r0, #2
   1d472:	d001      	beq.n	1d478 <ble_gatts_dsc_op+0x8>
    case BLE_ATT_ACCESS_OP_READ:
        return BLE_GATT_ACCESS_OP_READ_DSC;
   1d474:	2002      	movs	r0, #2
   1d476:	4770      	bx	lr

    case BLE_ATT_ACCESS_OP_WRITE:
        return BLE_GATT_ACCESS_OP_WRITE_DSC;
   1d478:	2003      	movs	r0, #3

    default:
        BLE_HS_DBG_ASSERT(0);
        return BLE_GATT_ACCESS_OP_READ_DSC;
    }
}
   1d47a:	4770      	bx	lr

0001d47c <ble_gatts_dsc_inc_stat>:

static void
ble_gatts_dsc_inc_stat(uint8_t gatt_op)
{
    switch (gatt_op) {
   1d47c:	2802      	cmp	r0, #2
   1d47e:	d002      	beq.n	1d486 <ble_gatts_dsc_inc_stat+0xa>
   1d480:	2803      	cmp	r0, #3
   1d482:	d005      	beq.n	1d490 <ble_gatts_dsc_inc_stat+0x14>
   1d484:	4770      	bx	lr
    case BLE_GATT_ACCESS_OP_READ_DSC:
        STATS_INC(ble_gatts_stats, dsc_reads);
   1d486:	4a05      	ldr	r2, [pc, #20]	; (1d49c <ble_gatts_dsc_inc_stat+0x20>)
   1d488:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   1d48a:	3301      	adds	r3, #1
   1d48c:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
   1d48e:	4770      	bx	lr

    case BLE_GATT_ACCESS_OP_WRITE_DSC:
        STATS_INC(ble_gatts_stats, dsc_writes);
   1d490:	4a02      	ldr	r2, [pc, #8]	; (1d49c <ble_gatts_dsc_inc_stat+0x20>)
   1d492:	6b13      	ldr	r3, [r2, #48]	; 0x30
   1d494:	3301      	adds	r3, #1
   1d496:	6313      	str	r3, [r2, #48]	; 0x30
        break;

    default:
        break;
    }
}
   1d498:	4770      	bx	lr
   1d49a:	bf00      	nop
   1d49c:	200045c0 	.word	0x200045c0

0001d4a0 <ble_gatts_dsc_is_sane>:
}

static int
ble_gatts_dsc_is_sane(const struct ble_gatt_dsc_def *dsc)
{
    if (dsc->uuid == NULL) {
   1d4a0:	6803      	ldr	r3, [r0, #0]
   1d4a2:	b12b      	cbz	r3, 1d4b0 <ble_gatts_dsc_is_sane+0x10>
        return 0;
    }

    if (dsc->access_cb == NULL) {
   1d4a4:	6883      	ldr	r3, [r0, #8]
   1d4a6:	b10b      	cbz	r3, 1d4ac <ble_gatts_dsc_is_sane+0xc>
        return 0;
    }

    return 1;
   1d4a8:	2001      	movs	r0, #1
}
   1d4aa:	4770      	bx	lr
        return 0;
   1d4ac:	2000      	movs	r0, #0
   1d4ae:	4770      	bx	lr
        return 0;
   1d4b0:	2000      	movs	r0, #0
   1d4b2:	4770      	bx	lr

0001d4b4 <ble_gatts_clt_cfg_find_idx>:
                           uint16_t chr_val_handle)
{
    struct ble_gatts_clt_cfg *cfg;
    int i;

    for (i = 0; i < ble_gatts_num_cfgable_chrs; i++) {
   1d4b4:	2300      	movs	r3, #0
   1d4b6:	4a07      	ldr	r2, [pc, #28]	; (1d4d4 <ble_gatts_clt_cfg_find_idx+0x20>)
   1d4b8:	6812      	ldr	r2, [r2, #0]
   1d4ba:	429a      	cmp	r2, r3
   1d4bc:	dd05      	ble.n	1d4ca <ble_gatts_clt_cfg_find_idx+0x16>
        cfg = cfgs + i;
        if (cfg->chr_val_handle == chr_val_handle) {
   1d4be:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
   1d4c2:	428a      	cmp	r2, r1
   1d4c4:	d003      	beq.n	1d4ce <ble_gatts_clt_cfg_find_idx+0x1a>
    for (i = 0; i < ble_gatts_num_cfgable_chrs; i++) {
   1d4c6:	3301      	adds	r3, #1
   1d4c8:	e7f5      	b.n	1d4b6 <ble_gatts_clt_cfg_find_idx+0x2>
            return i;
        }
    }

    return -1;
   1d4ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
   1d4ce:	4618      	mov	r0, r3
   1d4d0:	4770      	bx	lr
   1d4d2:	bf00      	nop
   1d4d4:	20002c64 	.word	0x20002c64

0001d4d8 <ble_gatts_clt_cfg_find>:

static struct ble_gatts_clt_cfg *
ble_gatts_clt_cfg_find(struct ble_gatts_clt_cfg *cfgs,
                       uint16_t chr_val_handle)
{
   1d4d8:	b510      	push	{r4, lr}
   1d4da:	4604      	mov	r4, r0
    int idx;

    idx = ble_gatts_clt_cfg_find_idx(cfgs, chr_val_handle);
   1d4dc:	f7ff ffea 	bl	1d4b4 <ble_gatts_clt_cfg_find_idx>
    if (idx == -1) {
   1d4e0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   1d4e4:	d002      	beq.n	1d4ec <ble_gatts_clt_cfg_find+0x14>
        return NULL;
    } else {
        return cfgs + idx;
   1d4e6:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    }
}
   1d4ea:	bd10      	pop	{r4, pc}
        return NULL;
   1d4ec:	2000      	movs	r0, #0
   1d4ee:	e7fc      	b.n	1d4ea <ble_gatts_clt_cfg_find+0x12>

0001d4f0 <ble_gatts_svc_type_to_uuid>:
}

static int
ble_gatts_svc_type_to_uuid(uint8_t svc_type, const ble_uuid_t **uuid)
{
    switch (svc_type) {
   1d4f0:	2801      	cmp	r0, #1
   1d4f2:	d003      	beq.n	1d4fc <ble_gatts_svc_type_to_uuid+0xc>
   1d4f4:	2802      	cmp	r0, #2
   1d4f6:	d005      	beq.n	1d504 <ble_gatts_svc_type_to_uuid+0x14>
    case BLE_GATT_SVC_TYPE_SECONDARY:
        *uuid = uuid_sec;
        return 0;

    default:
        return BLE_HS_EINVAL;
   1d4f8:	2003      	movs	r0, #3
    }
}
   1d4fa:	4770      	bx	lr
        *uuid = uuid_pri;
   1d4fc:	4b03      	ldr	r3, [pc, #12]	; (1d50c <ble_gatts_svc_type_to_uuid+0x1c>)
   1d4fe:	600b      	str	r3, [r1, #0]
        return 0;
   1d500:	2000      	movs	r0, #0
   1d502:	4770      	bx	lr
        *uuid = uuid_sec;
   1d504:	4b02      	ldr	r3, [pc, #8]	; (1d510 <ble_gatts_svc_type_to_uuid+0x20>)
   1d506:	600b      	str	r3, [r1, #0]
        return 0;
   1d508:	2000      	movs	r0, #0
   1d50a:	4770      	bx	lr
   1d50c:	20000148 	.word	0x20000148
   1d510:	2000014c 	.word	0x2000014c

0001d514 <ble_gatts_svc_is_sane>:

static int
ble_gatts_svc_is_sane(const struct ble_gatt_svc_def *svc)
{
    if (svc->type != BLE_GATT_SVC_TYPE_PRIMARY &&
   1d514:	7803      	ldrb	r3, [r0, #0]
   1d516:	3b01      	subs	r3, #1
   1d518:	b2db      	uxtb	r3, r3
   1d51a:	2b01      	cmp	r3, #1
   1d51c:	d901      	bls.n	1d522 <ble_gatts_svc_is_sane+0xe>
        svc->type != BLE_GATT_SVC_TYPE_SECONDARY) {

        return 0;
   1d51e:	2000      	movs	r0, #0
   1d520:	4770      	bx	lr
    }

    if (svc->uuid == NULL) {
   1d522:	6843      	ldr	r3, [r0, #4]
   1d524:	b10b      	cbz	r3, 1d52a <ble_gatts_svc_is_sane+0x16>
        return 0;
    }

    return 1;
   1d526:	2001      	movs	r0, #1
}
   1d528:	4770      	bx	lr
        return 0;
   1d52a:	2000      	movs	r0, #0
   1d52c:	4770      	bx	lr
	...

0001d530 <ble_gatts_clt_cfg_size>:
}

static int
ble_gatts_clt_cfg_size(void)
{
    return ble_gatts_num_cfgable_chrs * sizeof (struct ble_gatts_clt_cfg);
   1d530:	4b01      	ldr	r3, [pc, #4]	; (1d538 <ble_gatts_clt_cfg_size+0x8>)
   1d532:	6818      	ldr	r0, [r3, #0]
}
   1d534:	0080      	lsls	r0, r0, #2
   1d536:	4770      	bx	lr
   1d538:	20002c64 	.word	0x20002c64

0001d53c <ble_gatts_schedule_update>:
ble_gatts_schedule_update(struct ble_hs_conn *conn,
                          struct ble_gatts_clt_cfg *clt_cfg)
{
    uint8_t att_op;

    if (!(clt_cfg->flags & BLE_GATTS_CLT_CFG_F_MODIFIED)) {
   1d53c:	788b      	ldrb	r3, [r1, #2]
   1d53e:	f013 0f80 	tst.w	r3, #128	; 0x80
   1d542:	d101      	bne.n	1d548 <ble_gatts_schedule_update+0xc>
        /* Characteristic not modified.  Nothing to send. */
        att_op = 0;
   1d544:	2000      	movs	r0, #0
   1d546:	4770      	bx	lr
    } else if (clt_cfg->flags & BLE_GATTS_CLT_CFG_F_NOTIFY) {
   1d548:	f013 0f01 	tst.w	r3, #1
   1d54c:	d107      	bne.n	1d55e <ble_gatts_schedule_update+0x22>
        /* Notifications always get sent immediately. */
        att_op = BLE_ATT_OP_NOTIFY_REQ;
    } else if (clt_cfg->flags & BLE_GATTS_CLT_CFG_F_INDICATE) {
   1d54e:	f013 0f02 	tst.w	r3, #2
   1d552:	d009      	beq.n	1d568 <ble_gatts_schedule_update+0x2c>
        /* Only one outstanding indication per peer is allowed.  If we
         * are still awaiting an ack, mark this CCCD as updated so that
         * we know to send the indication upon receiving the expected ack.
         * If there isn't an outstanding indication, send this one now.
         */
        if (conn->bhc_gatt_svr.indicate_val_handle != 0) {
   1d554:	f8b0 2054 	ldrh.w	r2, [r0, #84]	; 0x54
   1d558:	b942      	cbnz	r2, 1d56c <ble_gatts_schedule_update+0x30>
            att_op = 0;
        } else {
            att_op = BLE_ATT_OP_INDICATE_REQ;
   1d55a:	201d      	movs	r0, #29
   1d55c:	e000      	b.n	1d560 <ble_gatts_schedule_update+0x24>
        att_op = BLE_ATT_OP_NOTIFY_REQ;
   1d55e:	201b      	movs	r0, #27

    /* If we will be sending an update, clear the modified flag so that we
     * don't double-send.
     */
    if (att_op != 0) {
        clt_cfg->flags &= ~BLE_GATTS_CLT_CFG_F_MODIFIED;
   1d560:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1d564:	708b      	strb	r3, [r1, #2]
   1d566:	4770      	bx	lr
        att_op = 0;
   1d568:	2000      	movs	r0, #0
   1d56a:	4770      	bx	lr
            att_op = 0;
   1d56c:	2000      	movs	r0, #0
    }

    return att_op;
}
   1d56e:	4770      	bx	lr

0001d570 <ble_gatts_count_resources>:
 *                                  invalid resource definition.
 */
static int
ble_gatts_count_resources(const struct ble_gatt_svc_def *svcs,
                          struct ble_gatt_resources *res)
{
   1d570:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1d574:	4681      	mov	r9, r0
   1d576:	460c      	mov	r4, r1
    int s;
    int i;
    int c;
    int d;

    for (s = 0; svcs[s].type != BLE_GATT_SVC_TYPE_END; s++) {
   1d578:	f04f 0a00 	mov.w	sl, #0
   1d57c:	ea4f 130a 	mov.w	r3, sl, lsl #4
   1d580:	eb09 0703 	add.w	r7, r9, r3
   1d584:	f819 3003 	ldrb.w	r3, [r9, r3]
   1d588:	2b00      	cmp	r3, #0
   1d58a:	d059      	beq.n	1d640 <ble_gatts_count_resources+0xd0>
        svc = svcs + s;

        if (!ble_gatts_svc_is_sane(svc)) {
   1d58c:	4638      	mov	r0, r7
   1d58e:	f7ff ffc1 	bl	1d514 <ble_gatts_svc_is_sane>
   1d592:	2800      	cmp	r0, #0
   1d594:	d056      	beq.n	1d644 <ble_gatts_count_resources+0xd4>

        /* Each service requires:
         *     o 1 service
         *     o 1 attribute
         */
        res->svcs++;
   1d596:	8823      	ldrh	r3, [r4, #0]
   1d598:	3301      	adds	r3, #1
   1d59a:	8023      	strh	r3, [r4, #0]
        res->attrs++;
   1d59c:	8963      	ldrh	r3, [r4, #10]
   1d59e:	3301      	adds	r3, #1
   1d5a0:	8163      	strh	r3, [r4, #10]

        if (svc->includes != NULL) {
   1d5a2:	68bb      	ldr	r3, [r7, #8]
   1d5a4:	b163      	cbz	r3, 1d5c0 <ble_gatts_count_resources+0x50>
            for (i = 0; svc->includes[i] != NULL; i++) {
   1d5a6:	2200      	movs	r2, #0
   1d5a8:	68bb      	ldr	r3, [r7, #8]
   1d5aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1d5ae:	b13b      	cbz	r3, 1d5c0 <ble_gatts_count_resources+0x50>
                /* Each include requires:
                 *     o 1 include
                 *     o 1 attribute
                 */
                res->incs++;
   1d5b0:	8863      	ldrh	r3, [r4, #2]
   1d5b2:	3301      	adds	r3, #1
   1d5b4:	8063      	strh	r3, [r4, #2]
                res->attrs++;
   1d5b6:	8963      	ldrh	r3, [r4, #10]
   1d5b8:	3301      	adds	r3, #1
   1d5ba:	8163      	strh	r3, [r4, #10]
            for (i = 0; svc->includes[i] != NULL; i++) {
   1d5bc:	3201      	adds	r2, #1
   1d5be:	e7f3      	b.n	1d5a8 <ble_gatts_count_resources+0x38>
            }
        }

        if (svc->characteristics != NULL) {
   1d5c0:	68fb      	ldr	r3, [r7, #12]
   1d5c2:	2b00      	cmp	r3, #0
   1d5c4:	d039      	beq.n	1d63a <ble_gatts_count_resources+0xca>
            for (c = 0; svc->characteristics[c].uuid != NULL; c++) {
   1d5c6:	f04f 0800 	mov.w	r8, #0
   1d5ca:	e001      	b.n	1d5d0 <ble_gatts_count_resources+0x60>
   1d5cc:	f108 0801 	add.w	r8, r8, #1
   1d5d0:	68fa      	ldr	r2, [r7, #12]
   1d5d2:	eb08 0148 	add.w	r1, r8, r8, lsl #1
   1d5d6:	00cb      	lsls	r3, r1, #3
   1d5d8:	18d6      	adds	r6, r2, r3
   1d5da:	58d3      	ldr	r3, [r2, r3]
   1d5dc:	2b00      	cmp	r3, #0
   1d5de:	d02c      	beq.n	1d63a <ble_gatts_count_resources+0xca>
                chr = svc->characteristics + c;

                if (!ble_gatts_chr_is_sane(chr)) {
   1d5e0:	4630      	mov	r0, r6
   1d5e2:	f7ff fef0 	bl	1d3c6 <ble_gatts_chr_is_sane>
   1d5e6:	2800      	cmp	r0, #0
   1d5e8:	d02e      	beq.n	1d648 <ble_gatts_count_resources+0xd8>

                /* Each characteristic requires:
                 *     o 1 characteristic
                 *     o 2 attributes
                 */
                res->chrs++;
   1d5ea:	88a3      	ldrh	r3, [r4, #4]
   1d5ec:	3301      	adds	r3, #1
   1d5ee:	80a3      	strh	r3, [r4, #4]
                res->attrs += 2;
   1d5f0:	8963      	ldrh	r3, [r4, #10]
   1d5f2:	3302      	adds	r3, #2
   1d5f4:	b29b      	uxth	r3, r3
   1d5f6:	8163      	strh	r3, [r4, #10]

                /* If the characteristic permits notifications or indications,
                 * it has a CCCD.
                 */
                if (chr->flags & BLE_GATT_CHR_F_NOTIFY ||
   1d5f8:	8a32      	ldrh	r2, [r6, #16]
   1d5fa:	f012 0f30 	tst.w	r2, #48	; 0x30
   1d5fe:	d007      	beq.n	1d610 <ble_gatts_count_resources+0xa0>
                    /* Each CCCD requires:
                     *     o 1 descriptor
                     *     o 1 CCCD
                     *     o 1 attribute
                     */
                    res->dscs++;
   1d600:	88e2      	ldrh	r2, [r4, #6]
   1d602:	3201      	adds	r2, #1
   1d604:	80e2      	strh	r2, [r4, #6]
                    res->cccds++;
   1d606:	8922      	ldrh	r2, [r4, #8]
   1d608:	3201      	adds	r2, #1
   1d60a:	8122      	strh	r2, [r4, #8]
                    res->attrs++;
   1d60c:	3301      	adds	r3, #1
   1d60e:	8163      	strh	r3, [r4, #10]
                }

                if (chr->descriptors != NULL) {
   1d610:	68f3      	ldr	r3, [r6, #12]
   1d612:	2b00      	cmp	r3, #0
   1d614:	d0da      	beq.n	1d5cc <ble_gatts_count_resources+0x5c>
                    for (d = 0; chr->descriptors[d].uuid != NULL; d++) {
   1d616:	2500      	movs	r5, #0
   1d618:	68f2      	ldr	r2, [r6, #12]
   1d61a:	012b      	lsls	r3, r5, #4
   1d61c:	18d0      	adds	r0, r2, r3
   1d61e:	58d3      	ldr	r3, [r2, r3]
   1d620:	2b00      	cmp	r3, #0
   1d622:	d0d3      	beq.n	1d5cc <ble_gatts_count_resources+0x5c>
                        if (!ble_gatts_dsc_is_sane(chr->descriptors + d)) {
   1d624:	f7ff ff3c 	bl	1d4a0 <ble_gatts_dsc_is_sane>
   1d628:	b180      	cbz	r0, 1d64c <ble_gatts_count_resources+0xdc>

                        /* Each descriptor requires:
                         *     o 1 descriptor
                         *     o 1 attribute
                         */
                        res->dscs++;
   1d62a:	88e3      	ldrh	r3, [r4, #6]
   1d62c:	3301      	adds	r3, #1
   1d62e:	80e3      	strh	r3, [r4, #6]
                        res->attrs++;
   1d630:	8963      	ldrh	r3, [r4, #10]
   1d632:	3301      	adds	r3, #1
   1d634:	8163      	strh	r3, [r4, #10]
                    for (d = 0; chr->descriptors[d].uuid != NULL; d++) {
   1d636:	3501      	adds	r5, #1
   1d638:	e7ee      	b.n	1d618 <ble_gatts_count_resources+0xa8>
    for (s = 0; svcs[s].type != BLE_GATT_SVC_TYPE_END; s++) {
   1d63a:	f10a 0a01 	add.w	sl, sl, #1
   1d63e:	e79d      	b.n	1d57c <ble_gatts_count_resources+0xc>
                }
            }
        }
    }

    return 0;
   1d640:	2000      	movs	r0, #0
   1d642:	e004      	b.n	1d64e <ble_gatts_count_resources+0xde>
            return BLE_HS_EINVAL;
   1d644:	2003      	movs	r0, #3
   1d646:	e002      	b.n	1d64e <ble_gatts_count_resources+0xde>
                    return BLE_HS_EINVAL;
   1d648:	2003      	movs	r0, #3
   1d64a:	e000      	b.n	1d64e <ble_gatts_count_resources+0xde>
                            return BLE_HS_EINVAL;
   1d64c:	2003      	movs	r0, #3
}
   1d64e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0001d654 <ble_gatts_clt_cfg_access_locked>:
{
   1d654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d658:	9e07      	ldr	r6, [sp, #28]
    out_cccd->chr_val_handle = 0;
   1d65a:	2300      	movs	r3, #0
   1d65c:	8133      	strh	r3, [r6, #8]
    chr_val_handle = attr_handle - 1;
   1d65e:	1e4c      	subs	r4, r1, #1
   1d660:	b2a4      	uxth	r4, r4
    if (chr_val_handle > attr_handle) {
   1d662:	42a1      	cmp	r1, r4
   1d664:	d365      	bcc.n	1d732 <ble_gatts_clt_cfg_access_locked+0xde>
   1d666:	4615      	mov	r5, r2
   1d668:	4607      	mov	r7, r0
    clt_cfg = ble_gatts_clt_cfg_find(conn->bhc_gatt_svr.clt_cfgs,
   1d66a:	4621      	mov	r1, r4
   1d66c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   1d66e:	f7ff ff33 	bl	1d4d8 <ble_gatts_clt_cfg_find>
    if (clt_cfg == NULL) {
   1d672:	4680      	mov	r8, r0
   1d674:	2800      	cmp	r0, #0
   1d676:	d060      	beq.n	1d73a <ble_gatts_clt_cfg_access_locked+0xe6>
    *out_prev_clt_cfg_flags = clt_cfg->flags;
   1d678:	7882      	ldrb	r2, [r0, #2]
   1d67a:	9b08      	ldr	r3, [sp, #32]
   1d67c:	701a      	strb	r2, [r3, #0]
    *out_cur_clt_cfg_flags = clt_cfg->flags;
   1d67e:	7883      	ldrb	r3, [r0, #2]
   1d680:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1d682:	7013      	strb	r3, [r2, #0]
    gatt_op = ble_gatts_dsc_op(att_op);
   1d684:	4628      	mov	r0, r5
   1d686:	f7ff fef3 	bl	1d470 <ble_gatts_dsc_op>
   1d68a:	4605      	mov	r5, r0
    ble_gatts_dsc_inc_stat(gatt_op);
   1d68c:	f7ff fef6 	bl	1d47c <ble_gatts_dsc_inc_stat>
    switch (gatt_op) {
   1d690:	2d02      	cmp	r5, #2
   1d692:	d003      	beq.n	1d69c <ble_gatts_clt_cfg_access_locked+0x48>
   1d694:	2d03      	cmp	r5, #3
   1d696:	d013      	beq.n	1d6c0 <ble_gatts_clt_cfg_access_locked+0x6c>
        return BLE_ATT_ERR_UNLIKELY;
   1d698:	250e      	movs	r5, #14
   1d69a:	e04b      	b.n	1d734 <ble_gatts_clt_cfg_access_locked+0xe0>
        STATS_INC(ble_gatts_stats, dsc_reads);
   1d69c:	4a2a      	ldr	r2, [pc, #168]	; (1d748 <ble_gatts_clt_cfg_access_locked+0xf4>)
   1d69e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   1d6a0:	3301      	adds	r3, #1
   1d6a2:	62d3      	str	r3, [r2, #44]	; 0x2c
        buf = os_mbuf_extend(om, 2);
   1d6a4:	2102      	movs	r1, #2
   1d6a6:	9806      	ldr	r0, [sp, #24]
   1d6a8:	f7f0 fc3b 	bl	df22 <os_mbuf_extend>
        if (buf == NULL) {
   1d6ac:	2800      	cmp	r0, #0
   1d6ae:	d046      	beq.n	1d73e <ble_gatts_clt_cfg_access_locked+0xea>
        put_le16(buf, clt_cfg->flags & ~BLE_GATTS_CLT_CFG_F_RESERVED);
   1d6b0:	f898 1002 	ldrb.w	r1, [r8, #2]
   1d6b4:	f001 0103 	and.w	r1, r1, #3
   1d6b8:	f00c f848 	bl	2974c <put_le16>
    return 0;
   1d6bc:	2500      	movs	r5, #0
        break;
   1d6be:	e039      	b.n	1d734 <ble_gatts_clt_cfg_access_locked+0xe0>
        STATS_INC(ble_gatts_stats, dsc_writes);
   1d6c0:	4a21      	ldr	r2, [pc, #132]	; (1d748 <ble_gatts_clt_cfg_access_locked+0xf4>)
   1d6c2:	6b13      	ldr	r3, [r2, #48]	; 0x30
   1d6c4:	3301      	adds	r3, #1
   1d6c6:	6313      	str	r3, [r2, #48]	; 0x30
        if (OS_MBUF_PKTLEN(om) != 2) {
   1d6c8:	9b06      	ldr	r3, [sp, #24]
   1d6ca:	8a1b      	ldrh	r3, [r3, #16]
   1d6cc:	2b02      	cmp	r3, #2
   1d6ce:	d001      	beq.n	1d6d4 <ble_gatts_clt_cfg_access_locked+0x80>
            return BLE_ATT_ERR_INVALID_ATTR_VALUE_LEN;
   1d6d0:	250d      	movs	r5, #13
   1d6d2:	e02f      	b.n	1d734 <ble_gatts_clt_cfg_access_locked+0xe0>
        om = os_mbuf_pullup(om, 2);
   1d6d4:	2102      	movs	r1, #2
   1d6d6:	9806      	ldr	r0, [sp, #24]
   1d6d8:	f7f0 fc54 	bl	df84 <os_mbuf_pullup>
        flags = get_le16(om->om_data);
   1d6dc:	6800      	ldr	r0, [r0, #0]
   1d6de:	f00c f856 	bl	2978e <get_le16>
        if ((flags & ~clt_cfg->allowed) != 0) {
   1d6e2:	f898 5003 	ldrb.w	r5, [r8, #3]
   1d6e6:	ea30 0505 	bics.w	r5, r0, r5
   1d6ea:	d12a      	bne.n	1d742 <ble_gatts_clt_cfg_access_locked+0xee>
        if (clt_cfg->flags != flags) {
   1d6ec:	f898 3002 	ldrb.w	r3, [r8, #2]
   1d6f0:	4283      	cmp	r3, r0
   1d6f2:	d01f      	beq.n	1d734 <ble_gatts_clt_cfg_access_locked+0xe0>
            clt_cfg->flags = flags;
   1d6f4:	b2c0      	uxtb	r0, r0
   1d6f6:	f888 0002 	strb.w	r0, [r8, #2]
            *out_cur_clt_cfg_flags = flags;
   1d6fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1d6fc:	7018      	strb	r0, [r3, #0]
            if (conn->bhc_sec_state.bonded) {
   1d6fe:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
   1d702:	f013 0f04 	tst.w	r3, #4
   1d706:	d015      	beq.n	1d734 <ble_gatts_clt_cfg_access_locked+0xe0>
                out_cccd->peer_addr = conn->bhc_peer_addr;
   1d708:	463b      	mov	r3, r7
   1d70a:	f853 0f07 	ldr.w	r0, [r3, #7]!
   1d70e:	6030      	str	r0, [r6, #0]
   1d710:	889a      	ldrh	r2, [r3, #4]
   1d712:	799b      	ldrb	r3, [r3, #6]
   1d714:	80b2      	strh	r2, [r6, #4]
   1d716:	71b3      	strb	r3, [r6, #6]
                    ble_hs_misc_peer_addr_type_to_id(conn->bhc_peer_addr.type);
   1d718:	79f8      	ldrb	r0, [r7, #7]
   1d71a:	f002 fd35 	bl	20188 <ble_hs_misc_peer_addr_type_to_id>
                out_cccd->peer_addr.type =
   1d71e:	7030      	strb	r0, [r6, #0]
                out_cccd->chr_val_handle = chr_val_handle;
   1d720:	8134      	strh	r4, [r6, #8]
                out_cccd->flags = clt_cfg->flags;
   1d722:	f898 3002 	ldrb.w	r3, [r8, #2]
   1d726:	8173      	strh	r3, [r6, #10]
                out_cccd->value_changed = 0;
   1d728:	7b33      	ldrb	r3, [r6, #12]
   1d72a:	f36f 0300 	bfc	r3, #0, #1
   1d72e:	7333      	strb	r3, [r6, #12]
   1d730:	e000      	b.n	1d734 <ble_gatts_clt_cfg_access_locked+0xe0>
        return BLE_ATT_ERR_UNLIKELY;
   1d732:	250e      	movs	r5, #14
}
   1d734:	4628      	mov	r0, r5
   1d736:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return BLE_ATT_ERR_UNLIKELY;
   1d73a:	250e      	movs	r5, #14
   1d73c:	e7fa      	b.n	1d734 <ble_gatts_clt_cfg_access_locked+0xe0>
            return BLE_ATT_ERR_INSUFFICIENT_RES;
   1d73e:	2511      	movs	r5, #17
   1d740:	e7f8      	b.n	1d734 <ble_gatts_clt_cfg_access_locked+0xe0>
            return BLE_ATT_ERR_REQ_NOT_SUPPORTED;
   1d742:	2506      	movs	r5, #6
   1d744:	e7f6      	b.n	1d734 <ble_gatts_clt_cfg_access_locked+0xe0>
   1d746:	bf00      	nop
   1d748:	200045c0 	.word	0x200045c0

0001d74c <ble_gatts_subscribe_event>:
{
   1d74c:	b530      	push	{r4, r5, lr}
   1d74e:	b085      	sub	sp, #20
   1d750:	f89d 4020 	ldrb.w	r4, [sp, #32]
    if ((prev_flags ^ cur_flags) & ~BLE_GATTS_CLT_CFG_F_RESERVED) {
   1d754:	ea83 0504 	eor.w	r5, r3, r4
   1d758:	f035 05fc 	bics.w	r5, r5, #252	; 0xfc
   1d75c:	d101      	bne.n	1d762 <ble_gatts_subscribe_event+0x16>
}
   1d75e:	b005      	add	sp, #20
   1d760:	bd30      	pop	{r4, r5, pc}
        ble_gap_subscribe_event(conn_handle,
   1d762:	f004 0502 	and.w	r5, r4, #2
   1d766:	9502      	str	r5, [sp, #8]
   1d768:	f003 0502 	and.w	r5, r3, #2
   1d76c:	9501      	str	r5, [sp, #4]
   1d76e:	f004 0401 	and.w	r4, r4, #1
   1d772:	9400      	str	r4, [sp, #0]
   1d774:	f003 0301 	and.w	r3, r3, #1
   1d778:	f7fe f86f 	bl	1b85a <ble_gap_subscribe_event>
}
   1d77c:	e7ef      	b.n	1d75e <ble_gatts_subscribe_event+0x12>

0001d77e <ble_gatts_clt_cfg_access>:
{
   1d77e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d782:	b08c      	sub	sp, #48	; 0x30
   1d784:	4606      	mov	r6, r0
   1d786:	460d      	mov	r5, r1
   1d788:	4617      	mov	r7, r2
   1d78a:	4698      	mov	r8, r3
    ble_hs_lock();
   1d78c:	f000 feca 	bl	1e524 <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
   1d790:	4630      	mov	r0, r6
   1d792:	f001 fd57 	bl	1f244 <ble_hs_conn_find>
    if (conn == NULL) {
   1d796:	b1b8      	cbz	r0, 1d7c8 <ble_gatts_clt_cfg_access+0x4a>
        rc = ble_gatts_clt_cfg_access_locked(conn, attr_handle, op, offset,
   1d798:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1d79a:	681b      	ldr	r3, [r3, #0]
   1d79c:	f10d 0212 	add.w	r2, sp, #18
   1d7a0:	9203      	str	r2, [sp, #12]
   1d7a2:	f10d 0213 	add.w	r2, sp, #19
   1d7a6:	9202      	str	r2, [sp, #8]
   1d7a8:	aa08      	add	r2, sp, #32
   1d7aa:	9201      	str	r2, [sp, #4]
   1d7ac:	9300      	str	r3, [sp, #0]
   1d7ae:	4643      	mov	r3, r8
   1d7b0:	463a      	mov	r2, r7
   1d7b2:	4629      	mov	r1, r5
   1d7b4:	f7ff ff4e 	bl	1d654 <ble_gatts_clt_cfg_access_locked>
   1d7b8:	4604      	mov	r4, r0
    ble_hs_unlock();
   1d7ba:	f000 feb7 	bl	1e52c <ble_hs_unlock>
    if (rc != 0) {
   1d7be:	b13c      	cbz	r4, 1d7d0 <ble_gatts_clt_cfg_access+0x52>
}
   1d7c0:	4620      	mov	r0, r4
   1d7c2:	b00c      	add	sp, #48	; 0x30
   1d7c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ble_hs_unlock();
   1d7c8:	f000 feb0 	bl	1e52c <ble_hs_unlock>
        rc = BLE_ATT_ERR_UNLIKELY;
   1d7cc:	240e      	movs	r4, #14
   1d7ce:	e7f7      	b.n	1d7c0 <ble_gatts_clt_cfg_access+0x42>
    chr_val_handle = attr_handle - 1;
   1d7d0:	1e69      	subs	r1, r5, #1
    ble_gatts_subscribe_event(conn_handle, chr_val_handle,
   1d7d2:	f89d 3013 	ldrb.w	r3, [sp, #19]
   1d7d6:	f89d 2012 	ldrb.w	r2, [sp, #18]
   1d7da:	9200      	str	r2, [sp, #0]
   1d7dc:	2201      	movs	r2, #1
   1d7de:	b289      	uxth	r1, r1
   1d7e0:	4630      	mov	r0, r6
   1d7e2:	f7ff ffb3 	bl	1d74c <ble_gatts_subscribe_event>
    if (cccd_value.chr_val_handle != 0) {
   1d7e6:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   1d7ea:	2b00      	cmp	r3, #0
   1d7ec:	d0e8      	beq.n	1d7c0 <ble_gatts_clt_cfg_access+0x42>
        if (cccd_value.flags == 0) {
   1d7ee:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
   1d7f2:	b123      	cbz	r3, 1d7fe <ble_gatts_clt_cfg_access+0x80>
            rc = ble_store_write_cccd(&cccd_value);
   1d7f4:	a808      	add	r0, sp, #32
   1d7f6:	f005 fe4b 	bl	23490 <ble_store_write_cccd>
   1d7fa:	4604      	mov	r4, r0
   1d7fc:	e7e0      	b.n	1d7c0 <ble_gatts_clt_cfg_access+0x42>
            ble_store_key_from_value_cccd(&cccd_key, &cccd_value);
   1d7fe:	a908      	add	r1, sp, #32
   1d800:	a805      	add	r0, sp, #20
   1d802:	f005 fe51 	bl	234a8 <ble_store_key_from_value_cccd>
            rc = ble_store_delete_cccd(&cccd_key);
   1d806:	a805      	add	r0, sp, #20
   1d808:	f005 fe48 	bl	2349c <ble_store_delete_cccd>
   1d80c:	4604      	mov	r4, r0
   1d80e:	e7d7      	b.n	1d7c0 <ble_gatts_clt_cfg_access+0x42>

0001d810 <ble_gatts_register_inc>:
{
   1d810:	b500      	push	{lr}
   1d812:	b085      	sub	sp, #20
    rc = ble_att_svr_register(uuid_inc, BLE_ATT_F_READ, 0, &handle,
   1d814:	9001      	str	r0, [sp, #4]
   1d816:	4b06      	ldr	r3, [pc, #24]	; (1d830 <ble_gatts_register_inc+0x20>)
   1d818:	9300      	str	r3, [sp, #0]
   1d81a:	f10d 030e 	add.w	r3, sp, #14
   1d81e:	2200      	movs	r2, #0
   1d820:	2101      	movs	r1, #1
   1d822:	4804      	ldr	r0, [pc, #16]	; (1d834 <ble_gatts_register_inc+0x24>)
   1d824:	f007 fa9a 	bl	24d5c <ble_att_svr_register>
}
   1d828:	b005      	add	sp, #20
   1d82a:	f85d fb04 	ldr.w	pc, [sp], #4
   1d82e:	bf00      	nop
   1d830:	0001dba5 	.word	0x0001dba5
   1d834:	20000150 	.word	0x20000150

0001d838 <ble_gatts_register_clt_cfg_dsc>:
{
   1d838:	b500      	push	{lr}
   1d83a:	b083      	sub	sp, #12
    rc = ble_att_svr_register(uuid_ccc, BLE_ATT_F_READ | BLE_ATT_F_WRITE, 0,
   1d83c:	2200      	movs	r2, #0
   1d83e:	9201      	str	r2, [sp, #4]
   1d840:	4b08      	ldr	r3, [pc, #32]	; (1d864 <ble_gatts_register_clt_cfg_dsc+0x2c>)
   1d842:	9300      	str	r3, [sp, #0]
   1d844:	4603      	mov	r3, r0
   1d846:	2103      	movs	r1, #3
   1d848:	4807      	ldr	r0, [pc, #28]	; (1d868 <ble_gatts_register_clt_cfg_dsc+0x30>)
   1d84a:	f007 fa87 	bl	24d5c <ble_att_svr_register>
    if (rc != 0) {
   1d84e:	4602      	mov	r2, r0
   1d850:	b918      	cbnz	r0, 1d85a <ble_gatts_register_clt_cfg_dsc+0x22>
    STATS_INC(ble_gatts_stats, dscs);
   1d852:	4906      	ldr	r1, [pc, #24]	; (1d86c <ble_gatts_register_clt_cfg_dsc+0x34>)
   1d854:	694b      	ldr	r3, [r1, #20]
   1d856:	3301      	adds	r3, #1
   1d858:	614b      	str	r3, [r1, #20]
}
   1d85a:	4610      	mov	r0, r2
   1d85c:	b003      	add	sp, #12
   1d85e:	f85d fb04 	ldr.w	pc, [sp], #4
   1d862:	bf00      	nop
   1d864:	0001d77f 	.word	0x0001d77f
   1d868:	20000158 	.word	0x20000158
   1d86c:	200045c0 	.word	0x200045c0

0001d870 <ble_gatts_register_dsc>:
{
   1d870:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d872:	b089      	sub	sp, #36	; 0x24
   1d874:	4607      	mov	r7, r0
   1d876:	460e      	mov	r6, r1
   1d878:	4614      	mov	r4, r2
    if (!ble_gatts_dsc_is_sane(dsc)) {
   1d87a:	4610      	mov	r0, r2
   1d87c:	f7ff fe10 	bl	1d4a0 <ble_gatts_dsc_is_sane>
   1d880:	b300      	cbz	r0, 1d8c4 <ble_gatts_register_dsc+0x54>
    rc = ble_att_svr_register(dsc->uuid, dsc->att_flags, dsc->min_key_size,
   1d882:	7921      	ldrb	r1, [r4, #4]
   1d884:	7962      	ldrb	r2, [r4, #5]
   1d886:	9401      	str	r4, [sp, #4]
   1d888:	4b10      	ldr	r3, [pc, #64]	; (1d8cc <ble_gatts_register_dsc+0x5c>)
   1d88a:	9300      	str	r3, [sp, #0]
   1d88c:	f10d 030a 	add.w	r3, sp, #10
   1d890:	6820      	ldr	r0, [r4, #0]
   1d892:	f007 fa63 	bl	24d5c <ble_att_svr_register>
    if (rc != 0) {
   1d896:	4605      	mov	r5, r0
   1d898:	b9a8      	cbnz	r0, 1d8c6 <ble_gatts_register_dsc+0x56>
    if (register_cb != NULL) {
   1d89a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1d89c:	b16b      	cbz	r3, 1d8ba <ble_gatts_register_dsc+0x4a>
        register_ctxt.op = BLE_GATT_REGISTER_OP_DSC;
   1d89e:	2303      	movs	r3, #3
   1d8a0:	f88d 300c 	strb.w	r3, [sp, #12]
        register_ctxt.dsc.handle = dsc_handle;
   1d8a4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   1d8a8:	f8ad 3010 	strh.w	r3, [sp, #16]
        register_ctxt.dsc.svc_def = svc;
   1d8ac:	9707      	str	r7, [sp, #28]
        register_ctxt.dsc.chr_def = chr;
   1d8ae:	9606      	str	r6, [sp, #24]
        register_ctxt.dsc.dsc_def = dsc;
   1d8b0:	9405      	str	r4, [sp, #20]
        register_cb(&register_ctxt, cb_arg);
   1d8b2:	990f      	ldr	r1, [sp, #60]	; 0x3c
   1d8b4:	a803      	add	r0, sp, #12
   1d8b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1d8b8:	4798      	blx	r3
    STATS_INC(ble_gatts_stats, dscs);
   1d8ba:	4a05      	ldr	r2, [pc, #20]	; (1d8d0 <ble_gatts_register_dsc+0x60>)
   1d8bc:	6953      	ldr	r3, [r2, #20]
   1d8be:	3301      	adds	r3, #1
   1d8c0:	6153      	str	r3, [r2, #20]
    return 0;
   1d8c2:	e000      	b.n	1d8c6 <ble_gatts_register_dsc+0x56>
        return BLE_HS_EINVAL;
   1d8c4:	2503      	movs	r5, #3
}
   1d8c6:	4628      	mov	r0, r5
   1d8c8:	b009      	add	sp, #36	; 0x24
   1d8ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d8cc:	0001dcd3 	.word	0x0001dcd3
   1d8d0:	200045c0 	.word	0x200045c0

0001d8d4 <ble_gatts_register_chr>:
{
   1d8d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d8d8:	b08b      	sub	sp, #44	; 0x2c
   1d8da:	4680      	mov	r8, r0
   1d8dc:	460c      	mov	r4, r1
   1d8de:	4617      	mov	r7, r2
   1d8e0:	4699      	mov	r9, r3
    if (!ble_gatts_chr_is_sane(chr)) {
   1d8e2:	4608      	mov	r0, r1
   1d8e4:	f7ff fd6f 	bl	1d3c6 <ble_gatts_chr_is_sane>
   1d8e8:	2800      	cmp	r0, #0
   1d8ea:	d064      	beq.n	1d9b6 <ble_gatts_register_chr+0xe2>
    if (ble_gatts_chr_clt_cfg_allowed(chr) != 0) {
   1d8ec:	4620      	mov	r0, r4
   1d8ee:	f7ff fd07 	bl	1d300 <ble_gatts_chr_clt_cfg_allowed>
   1d8f2:	b140      	cbz	r0, 1d906 <ble_gatts_register_chr+0x32>
        if (ble_gatts_num_cfgable_chrs > ble_hs_max_client_configs) {
   1d8f4:	4b33      	ldr	r3, [pc, #204]	; (1d9c4 <ble_gatts_register_chr+0xf0>)
   1d8f6:	881a      	ldrh	r2, [r3, #0]
   1d8f8:	4b33      	ldr	r3, [pc, #204]	; (1d9c8 <ble_gatts_register_chr+0xf4>)
   1d8fa:	681b      	ldr	r3, [r3, #0]
   1d8fc:	429a      	cmp	r2, r3
   1d8fe:	db5c      	blt.n	1d9ba <ble_gatts_register_chr+0xe6>
        ble_gatts_num_cfgable_chrs++;
   1d900:	3301      	adds	r3, #1
   1d902:	4a31      	ldr	r2, [pc, #196]	; (1d9c8 <ble_gatts_register_chr+0xf4>)
   1d904:	6013      	str	r3, [r2, #0]
    rc = ble_att_svr_register(uuid_chr, BLE_ATT_F_READ, 0, &def_handle,
   1d906:	9401      	str	r4, [sp, #4]
   1d908:	4b30      	ldr	r3, [pc, #192]	; (1d9cc <ble_gatts_register_chr+0xf8>)
   1d90a:	9300      	str	r3, [sp, #0]
   1d90c:	f10d 0312 	add.w	r3, sp, #18
   1d910:	2200      	movs	r2, #0
   1d912:	2101      	movs	r1, #1
   1d914:	482e      	ldr	r0, [pc, #184]	; (1d9d0 <ble_gatts_register_chr+0xfc>)
   1d916:	f007 fa21 	bl	24d5c <ble_att_svr_register>
    if (rc != 0) {
   1d91a:	4605      	mov	r5, r0
   1d91c:	b118      	cbz	r0, 1d926 <ble_gatts_register_chr+0x52>
}
   1d91e:	4628      	mov	r0, r5
   1d920:	b00b      	add	sp, #44	; 0x2c
   1d922:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    att_flags = ble_gatts_att_flags_from_chr_flags(chr->flags);
   1d926:	8a20      	ldrh	r0, [r4, #16]
   1d928:	f7ff fcf7 	bl	1d31a <ble_gatts_att_flags_from_chr_flags>
    rc = ble_att_svr_register(chr->uuid, att_flags, chr->min_key_size,
   1d92c:	7ca2      	ldrb	r2, [r4, #18]
   1d92e:	9401      	str	r4, [sp, #4]
   1d930:	4b28      	ldr	r3, [pc, #160]	; (1d9d4 <ble_gatts_register_chr+0x100>)
   1d932:	9300      	str	r3, [sp, #0]
   1d934:	ab04      	add	r3, sp, #16
   1d936:	4601      	mov	r1, r0
   1d938:	6820      	ldr	r0, [r4, #0]
   1d93a:	f007 fa0f 	bl	24d5c <ble_att_svr_register>
    if (rc != 0) {
   1d93e:	4605      	mov	r5, r0
   1d940:	2800      	cmp	r0, #0
   1d942:	d1ec      	bne.n	1d91e <ble_gatts_register_chr+0x4a>
    if (chr->val_handle != NULL) {
   1d944:	6963      	ldr	r3, [r4, #20]
   1d946:	b113      	cbz	r3, 1d94e <ble_gatts_register_chr+0x7a>
        *chr->val_handle = val_handle;
   1d948:	f8bd 2010 	ldrh.w	r2, [sp, #16]
   1d94c:	801a      	strh	r2, [r3, #0]
    if (register_cb != NULL) {
   1d94e:	b187      	cbz	r7, 1d972 <ble_gatts_register_chr+0x9e>
        register_ctxt.op = BLE_GATT_REGISTER_OP_CHR;
   1d950:	2302      	movs	r3, #2
   1d952:	f88d 3014 	strb.w	r3, [sp, #20]
        register_ctxt.chr.def_handle = def_handle;
   1d956:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   1d95a:	f8ad 3018 	strh.w	r3, [sp, #24]
        register_ctxt.chr.val_handle = val_handle;
   1d95e:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   1d962:	f8ad 301a 	strh.w	r3, [sp, #26]
        register_ctxt.chr.svc_def = svc;
   1d966:	f8cd 8020 	str.w	r8, [sp, #32]
        register_ctxt.chr.chr_def = chr;
   1d96a:	9407      	str	r4, [sp, #28]
        register_cb(&register_ctxt, cb_arg);
   1d96c:	4649      	mov	r1, r9
   1d96e:	a805      	add	r0, sp, #20
   1d970:	47b8      	blx	r7
    if (ble_gatts_chr_clt_cfg_allowed(chr) != 0) {
   1d972:	4620      	mov	r0, r4
   1d974:	f7ff fcc4 	bl	1d300 <ble_gatts_chr_clt_cfg_allowed>
   1d978:	b980      	cbnz	r0, 1d99c <ble_gatts_register_chr+0xc8>
    if (chr->descriptors != NULL) {
   1d97a:	68e6      	ldr	r6, [r4, #12]
   1d97c:	b1b6      	cbz	r6, 1d9ac <ble_gatts_register_chr+0xd8>
        for (dsc = chr->descriptors; dsc->uuid != NULL; dsc++) {
   1d97e:	6833      	ldr	r3, [r6, #0]
   1d980:	b1a3      	cbz	r3, 1d9ac <ble_gatts_register_chr+0xd8>
            rc = ble_gatts_register_dsc(svc, chr, dsc, def_handle, register_cb,
   1d982:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   1d986:	f8cd 9004 	str.w	r9, [sp, #4]
   1d98a:	9700      	str	r7, [sp, #0]
   1d98c:	4632      	mov	r2, r6
   1d98e:	4621      	mov	r1, r4
   1d990:	4640      	mov	r0, r8
   1d992:	f7ff ff6d 	bl	1d870 <ble_gatts_register_dsc>
            if (rc != 0) {
   1d996:	b990      	cbnz	r0, 1d9be <ble_gatts_register_chr+0xea>
        for (dsc = chr->descriptors; dsc->uuid != NULL; dsc++) {
   1d998:	3610      	adds	r6, #16
   1d99a:	e7f0      	b.n	1d97e <ble_gatts_register_chr+0xaa>
        rc = ble_gatts_register_clt_cfg_dsc(&dsc_handle);
   1d99c:	f10d 000e 	add.w	r0, sp, #14
   1d9a0:	f7ff ff4a 	bl	1d838 <ble_gatts_register_clt_cfg_dsc>
        if (rc != 0) {
   1d9a4:	2800      	cmp	r0, #0
   1d9a6:	d0e8      	beq.n	1d97a <ble_gatts_register_chr+0xa6>
            return rc;
   1d9a8:	4605      	mov	r5, r0
   1d9aa:	e7b8      	b.n	1d91e <ble_gatts_register_chr+0x4a>
    STATS_INC(ble_gatts_stats, chrs);
   1d9ac:	4a0a      	ldr	r2, [pc, #40]	; (1d9d8 <ble_gatts_register_chr+0x104>)
   1d9ae:	6913      	ldr	r3, [r2, #16]
   1d9b0:	3301      	adds	r3, #1
   1d9b2:	6113      	str	r3, [r2, #16]
    return 0;
   1d9b4:	e7b3      	b.n	1d91e <ble_gatts_register_chr+0x4a>
        return BLE_HS_EINVAL;
   1d9b6:	2503      	movs	r5, #3
   1d9b8:	e7b1      	b.n	1d91e <ble_gatts_register_chr+0x4a>
            return BLE_HS_ENOMEM;
   1d9ba:	2506      	movs	r5, #6
   1d9bc:	e7af      	b.n	1d91e <ble_gatts_register_chr+0x4a>
                return rc;
   1d9be:	4605      	mov	r5, r0
   1d9c0:	e7ad      	b.n	1d91e <ble_gatts_register_chr+0x4a>
   1d9c2:	bf00      	nop
   1d9c4:	20004650 	.word	0x20004650
   1d9c8:	20002c64 	.word	0x20002c64
   1d9cc:	0001db49 	.word	0x0001db49
   1d9d0:	20000154 	.word	0x20000154
   1d9d4:	0001dc9b 	.word	0x0001dc9b
   1d9d8:	200045c0 	.word	0x200045c0

0001d9dc <ble_gatts_register_svc>:
{
   1d9dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d9e0:	b088      	sub	sp, #32
   1d9e2:	4604      	mov	r4, r0
   1d9e4:	460e      	mov	r6, r1
   1d9e6:	4617      	mov	r7, r2
   1d9e8:	4698      	mov	r8, r3
    if (!ble_gatts_svc_incs_satisfied(svc)) {
   1d9ea:	f7ff fd23 	bl	1d434 <ble_gatts_svc_incs_satisfied>
   1d9ee:	2800      	cmp	r0, #0
   1d9f0:	d045      	beq.n	1da7e <ble_gatts_register_svc+0xa2>
    if (!ble_gatts_svc_is_sane(svc)) {
   1d9f2:	4620      	mov	r0, r4
   1d9f4:	f7ff fd8e 	bl	1d514 <ble_gatts_svc_is_sane>
   1d9f8:	2800      	cmp	r0, #0
   1d9fa:	d045      	beq.n	1da88 <ble_gatts_register_svc+0xac>
    uuid = NULL;
   1d9fc:	2500      	movs	r5, #0
   1d9fe:	a908      	add	r1, sp, #32
   1da00:	f841 5d18 	str.w	r5, [r1, #-24]!
    rc = ble_gatts_svc_type_to_uuid(svc->type, &uuid);
   1da04:	7820      	ldrb	r0, [r4, #0]
   1da06:	f7ff fd73 	bl	1d4f0 <ble_gatts_svc_type_to_uuid>
    rc = ble_att_svr_register(uuid, BLE_ATT_F_READ, 0, out_handle,
   1da0a:	9401      	str	r4, [sp, #4]
   1da0c:	4b21      	ldr	r3, [pc, #132]	; (1da94 <ble_gatts_register_svc+0xb8>)
   1da0e:	9300      	str	r3, [sp, #0]
   1da10:	4633      	mov	r3, r6
   1da12:	462a      	mov	r2, r5
   1da14:	2101      	movs	r1, #1
   1da16:	9802      	ldr	r0, [sp, #8]
   1da18:	f007 f9a0 	bl	24d5c <ble_att_svr_register>
    if (rc != 0) {
   1da1c:	4605      	mov	r5, r0
   1da1e:	bb78      	cbnz	r0, 1da80 <ble_gatts_register_svc+0xa4>
    if (register_cb != NULL) {
   1da20:	b14f      	cbz	r7, 1da36 <ble_gatts_register_svc+0x5a>
        register_ctxt.op = BLE_GATT_REGISTER_OP_SVC;
   1da22:	2301      	movs	r3, #1
   1da24:	f88d 300c 	strb.w	r3, [sp, #12]
        register_ctxt.svc.handle = *out_handle;
   1da28:	8833      	ldrh	r3, [r6, #0]
   1da2a:	f8ad 3010 	strh.w	r3, [sp, #16]
        register_ctxt.svc.svc_def = svc;
   1da2e:	9405      	str	r4, [sp, #20]
        register_cb(&register_ctxt, cb_arg);
   1da30:	4641      	mov	r1, r8
   1da32:	a803      	add	r0, sp, #12
   1da34:	47b8      	blx	r7
    if (svc->includes != NULL) {
   1da36:	68a3      	ldr	r3, [r4, #8]
   1da38:	b17b      	cbz	r3, 1da5a <ble_gatts_register_svc+0x7e>
        for (i = 0; svc->includes[i] != NULL; i++) {
   1da3a:	462e      	mov	r6, r5
   1da3c:	68a3      	ldr	r3, [r4, #8]
   1da3e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
   1da42:	b150      	cbz	r0, 1da5a <ble_gatts_register_svc+0x7e>
            idx = ble_gatts_find_svc_entry_idx(svc->includes[i]);
   1da44:	f7ff fce0 	bl	1d408 <ble_gatts_find_svc_entry_idx>
            rc = ble_gatts_register_inc(ble_gatts_svc_entries + idx);
   1da48:	4b13      	ldr	r3, [pc, #76]	; (1da98 <ble_gatts_register_svc+0xbc>)
   1da4a:	681b      	ldr	r3, [r3, #0]
   1da4c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   1da50:	f7ff fede 	bl	1d810 <ble_gatts_register_inc>
            if (rc != 0) {
   1da54:	b9d0      	cbnz	r0, 1da8c <ble_gatts_register_svc+0xb0>
        for (i = 0; svc->includes[i] != NULL; i++) {
   1da56:	3601      	adds	r6, #1
   1da58:	e7f0      	b.n	1da3c <ble_gatts_register_svc+0x60>
    if (svc->characteristics != NULL) {
   1da5a:	68e6      	ldr	r6, [r4, #12]
   1da5c:	b156      	cbz	r6, 1da74 <ble_gatts_register_svc+0x98>
        for (chr = svc->characteristics; chr->uuid != NULL; chr++) {
   1da5e:	6833      	ldr	r3, [r6, #0]
   1da60:	b143      	cbz	r3, 1da74 <ble_gatts_register_svc+0x98>
            rc = ble_gatts_register_chr(svc, chr, register_cb, cb_arg);
   1da62:	4643      	mov	r3, r8
   1da64:	463a      	mov	r2, r7
   1da66:	4631      	mov	r1, r6
   1da68:	4620      	mov	r0, r4
   1da6a:	f7ff ff33 	bl	1d8d4 <ble_gatts_register_chr>
            if (rc != 0) {
   1da6e:	b978      	cbnz	r0, 1da90 <ble_gatts_register_svc+0xb4>
        for (chr = svc->characteristics; chr->uuid != NULL; chr++) {
   1da70:	3618      	adds	r6, #24
   1da72:	e7f4      	b.n	1da5e <ble_gatts_register_svc+0x82>
    STATS_INC(ble_gatts_stats, svcs);
   1da74:	4a09      	ldr	r2, [pc, #36]	; (1da9c <ble_gatts_register_svc+0xc0>)
   1da76:	68d3      	ldr	r3, [r2, #12]
   1da78:	3301      	adds	r3, #1
   1da7a:	60d3      	str	r3, [r2, #12]
    return 0;
   1da7c:	e000      	b.n	1da80 <ble_gatts_register_svc+0xa4>
        return BLE_HS_EAGAIN;
   1da7e:	2501      	movs	r5, #1
}
   1da80:	4628      	mov	r0, r5
   1da82:	b008      	add	sp, #32
   1da84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return BLE_HS_EINVAL;
   1da88:	2503      	movs	r5, #3
   1da8a:	e7f9      	b.n	1da80 <ble_gatts_register_svc+0xa4>
                return rc;
   1da8c:	4605      	mov	r5, r0
   1da8e:	e7f7      	b.n	1da80 <ble_gatts_register_svc+0xa4>
                return rc;
   1da90:	4605      	mov	r5, r0
   1da92:	e7f5      	b.n	1da80 <ble_gatts_register_svc+0xa4>
   1da94:	0001db15 	.word	0x0001db15
   1da98:	20002c74 	.word	0x20002c74
   1da9c:	200045c0 	.word	0x200045c0

0001daa0 <ble_gatts_register_round>:
{
   1daa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1daa4:	b082      	sub	sp, #8
   1daa6:	4606      	mov	r6, r0
   1daa8:	4688      	mov	r8, r1
   1daaa:	4617      	mov	r7, r2
    *out_num_registered = 0;
   1daac:	2400      	movs	r4, #0
   1daae:	6004      	str	r4, [r0, #0]
    for (i = 0; i < ble_gatts_num_svc_entries; i++) {
   1dab0:	e009      	b.n	1dac6 <ble_gatts_register_round+0x26>
                entry->handle = handle;
   1dab2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1dab6:	80ab      	strh	r3, [r5, #4]
                entry->end_group_handle = ble_att_svr_prev_handle();
   1dab8:	f007 f978 	bl	24dac <ble_att_svr_prev_handle>
   1dabc:	80e8      	strh	r0, [r5, #6]
                (*out_num_registered)++;
   1dabe:	6833      	ldr	r3, [r6, #0]
   1dac0:	3301      	adds	r3, #1
   1dac2:	6033      	str	r3, [r6, #0]
    for (i = 0; i < ble_gatts_num_svc_entries; i++) {
   1dac4:	3401      	adds	r4, #1
   1dac6:	4b11      	ldr	r3, [pc, #68]	; (1db0c <ble_gatts_register_round+0x6c>)
   1dac8:	881b      	ldrh	r3, [r3, #0]
   1daca:	42a3      	cmp	r3, r4
   1dacc:	dd17      	ble.n	1dafe <ble_gatts_register_round+0x5e>
        entry = ble_gatts_svc_entries + i;
   1dace:	4b10      	ldr	r3, [pc, #64]	; (1db10 <ble_gatts_register_round+0x70>)
   1dad0:	6818      	ldr	r0, [r3, #0]
   1dad2:	eb00 05c4 	add.w	r5, r0, r4, lsl #3
        if (entry->handle == 0) {
   1dad6:	88ab      	ldrh	r3, [r5, #4]
   1dad8:	2b00      	cmp	r3, #0
   1dada:	d1f3      	bne.n	1dac4 <ble_gatts_register_round+0x24>
            rc = ble_gatts_register_svc(entry->svc, &handle, cb, cb_arg);
   1dadc:	463b      	mov	r3, r7
   1dade:	4642      	mov	r2, r8
   1dae0:	f10d 0106 	add.w	r1, sp, #6
   1dae4:	f850 0034 	ldr.w	r0, [r0, r4, lsl #3]
   1dae8:	f7ff ff78 	bl	1d9dc <ble_gatts_register_svc>
            switch (rc) {
   1daec:	4603      	mov	r3, r0
   1daee:	2800      	cmp	r0, #0
   1daf0:	d0df      	beq.n	1dab2 <ble_gatts_register_round+0x12>
   1daf2:	2801      	cmp	r0, #1
   1daf4:	d0e6      	beq.n	1dac4 <ble_gatts_register_round+0x24>
}
   1daf6:	4618      	mov	r0, r3
   1daf8:	b002      	add	sp, #8
   1dafa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (*out_num_registered == 0) {
   1dafe:	6833      	ldr	r3, [r6, #0]
   1db00:	b10b      	cbz	r3, 1db06 <ble_gatts_register_round+0x66>
    return 0;
   1db02:	2300      	movs	r3, #0
   1db04:	e7f7      	b.n	1daf6 <ble_gatts_register_round+0x56>
        return BLE_HS_EINVAL;
   1db06:	2303      	movs	r3, #3
   1db08:	e7f5      	b.n	1daf6 <ble_gatts_register_round+0x56>
   1db0a:	bf00      	nop
   1db0c:	20002c6c 	.word	0x20002c6c
   1db10:	20002c74 	.word	0x20002c74

0001db14 <ble_gatts_svc_access>:
{
   1db14:	b538      	push	{r3, r4, r5, lr}
   1db16:	9c05      	ldr	r4, [sp, #20]
    STATS_INC(ble_gatts_stats, svc_def_reads);
   1db18:	4a0a      	ldr	r2, [pc, #40]	; (1db44 <ble_gatts_svc_access+0x30>)
   1db1a:	6993      	ldr	r3, [r2, #24]
   1db1c:	3301      	adds	r3, #1
   1db1e:	6193      	str	r3, [r2, #24]
    buf = os_mbuf_extend(*om, ble_uuid_length(svc->uuid));
   1db20:	9b04      	ldr	r3, [sp, #16]
   1db22:	681d      	ldr	r5, [r3, #0]
   1db24:	6860      	ldr	r0, [r4, #4]
   1db26:	f005 fdc7 	bl	236b8 <ble_uuid_length>
   1db2a:	b281      	uxth	r1, r0
   1db2c:	4628      	mov	r0, r5
   1db2e:	f7f0 f9f8 	bl	df22 <os_mbuf_extend>
    if (buf == NULL) {
   1db32:	b128      	cbz	r0, 1db40 <ble_gatts_svc_access+0x2c>
   1db34:	4601      	mov	r1, r0
    ble_uuid_flat(svc->uuid, buf);
   1db36:	6860      	ldr	r0, [r4, #4]
   1db38:	f005 fd92 	bl	23660 <ble_uuid_flat>
    return 0;
   1db3c:	2000      	movs	r0, #0
}
   1db3e:	bd38      	pop	{r3, r4, r5, pc}
        return BLE_ATT_ERR_INSUFFICIENT_RES;
   1db40:	2011      	movs	r0, #17
   1db42:	e7fc      	b.n	1db3e <ble_gatts_svc_access+0x2a>
   1db44:	200045c0 	.word	0x200045c0

0001db48 <ble_gatts_chr_def_access>:
{
   1db48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1db4a:	460d      	mov	r5, r1
   1db4c:	9f06      	ldr	r7, [sp, #24]
   1db4e:	9e07      	ldr	r6, [sp, #28]
    STATS_INC(ble_gatts_stats, chr_def_reads);
   1db50:	4a13      	ldr	r2, [pc, #76]	; (1dba0 <ble_gatts_chr_def_access+0x58>)
   1db52:	6a13      	ldr	r3, [r2, #32]
   1db54:	3301      	adds	r3, #1
   1db56:	6213      	str	r3, [r2, #32]
    buf = os_mbuf_extend(*om, 3);
   1db58:	2103      	movs	r1, #3
   1db5a:	6838      	ldr	r0, [r7, #0]
   1db5c:	f7f0 f9e1 	bl	df22 <os_mbuf_extend>
    if (buf == NULL) {
   1db60:	b1c8      	cbz	r0, 1db96 <ble_gatts_chr_def_access+0x4e>
   1db62:	4604      	mov	r4, r0
    buf[0] = ble_gatts_chr_properties(chr);
   1db64:	4630      	mov	r0, r6
   1db66:	f7ff fc03 	bl	1d370 <ble_gatts_chr_properties>
   1db6a:	f804 0b01 	strb.w	r0, [r4], #1
    put_le16(buf + 1, attr_handle + 1);
   1db6e:	1c69      	adds	r1, r5, #1
   1db70:	b289      	uxth	r1, r1
   1db72:	4620      	mov	r0, r4
   1db74:	f00b fdea 	bl	2974c <put_le16>
    buf = os_mbuf_extend(*om, ble_uuid_length(chr->uuid));
   1db78:	683c      	ldr	r4, [r7, #0]
   1db7a:	6830      	ldr	r0, [r6, #0]
   1db7c:	f005 fd9c 	bl	236b8 <ble_uuid_length>
   1db80:	b281      	uxth	r1, r0
   1db82:	4620      	mov	r0, r4
   1db84:	f7f0 f9cd 	bl	df22 <os_mbuf_extend>
    if (buf == NULL) {
   1db88:	4601      	mov	r1, r0
   1db8a:	b130      	cbz	r0, 1db9a <ble_gatts_chr_def_access+0x52>
    ble_uuid_flat(chr->uuid, buf);
   1db8c:	6830      	ldr	r0, [r6, #0]
   1db8e:	f005 fd67 	bl	23660 <ble_uuid_flat>
    return 0;
   1db92:	2000      	movs	r0, #0
}
   1db94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return BLE_ATT_ERR_INSUFFICIENT_RES;
   1db96:	2011      	movs	r0, #17
   1db98:	e7fc      	b.n	1db94 <ble_gatts_chr_def_access+0x4c>
        return BLE_ATT_ERR_INSUFFICIENT_RES;
   1db9a:	2011      	movs	r0, #17
   1db9c:	e7fa      	b.n	1db94 <ble_gatts_chr_def_access+0x4c>
   1db9e:	bf00      	nop
   1dba0:	200045c0 	.word	0x200045c0

0001dba4 <ble_gatts_inc_access>:
{
   1dba4:	b570      	push	{r4, r5, r6, lr}
   1dba6:	9e04      	ldr	r6, [sp, #16]
   1dba8:	9c05      	ldr	r4, [sp, #20]
    STATS_INC(ble_gatts_stats, svc_inc_reads);
   1dbaa:	4a13      	ldr	r2, [pc, #76]	; (1dbf8 <ble_gatts_inc_access+0x54>)
   1dbac:	69d3      	ldr	r3, [r2, #28]
   1dbae:	3301      	adds	r3, #1
   1dbb0:	61d3      	str	r3, [r2, #28]
    buf = os_mbuf_extend(*om, 4);
   1dbb2:	2104      	movs	r1, #4
   1dbb4:	6830      	ldr	r0, [r6, #0]
   1dbb6:	f7f0 f9b4 	bl	df22 <os_mbuf_extend>
    if (buf == NULL) {
   1dbba:	b1c8      	cbz	r0, 1dbf0 <ble_gatts_inc_access+0x4c>
   1dbbc:	4605      	mov	r5, r0
    put_le16(buf + 0, entry->handle);
   1dbbe:	88a1      	ldrh	r1, [r4, #4]
   1dbc0:	f00b fdc4 	bl	2974c <put_le16>
    put_le16(buf + 2, entry->end_group_handle);
   1dbc4:	88e1      	ldrh	r1, [r4, #6]
   1dbc6:	1ca8      	adds	r0, r5, #2
   1dbc8:	f00b fdc0 	bl	2974c <put_le16>
    uuid16 = ble_uuid_u16(entry->svc->uuid);
   1dbcc:	6823      	ldr	r3, [r4, #0]
   1dbce:	6858      	ldr	r0, [r3, #4]
   1dbd0:	f005 fd09 	bl	235e6 <ble_uuid_u16>
    if (uuid16 != 0) {
   1dbd4:	4604      	mov	r4, r0
   1dbd6:	b908      	cbnz	r0, 1dbdc <ble_gatts_inc_access+0x38>
    return 0;
   1dbd8:	2000      	movs	r0, #0
}
   1dbda:	bd70      	pop	{r4, r5, r6, pc}
        buf = os_mbuf_extend(*om, 2);
   1dbdc:	2102      	movs	r1, #2
   1dbde:	6830      	ldr	r0, [r6, #0]
   1dbe0:	f7f0 f99f 	bl	df22 <os_mbuf_extend>
        if (buf == NULL) {
   1dbe4:	b130      	cbz	r0, 1dbf4 <ble_gatts_inc_access+0x50>
        put_le16(buf, uuid16);
   1dbe6:	4621      	mov	r1, r4
   1dbe8:	f00b fdb0 	bl	2974c <put_le16>
    return 0;
   1dbec:	2000      	movs	r0, #0
   1dbee:	e7f4      	b.n	1dbda <ble_gatts_inc_access+0x36>
        return BLE_ATT_ERR_INSUFFICIENT_RES;
   1dbf0:	2011      	movs	r0, #17
   1dbf2:	e7f2      	b.n	1dbda <ble_gatts_inc_access+0x36>
            return BLE_ATT_ERR_INSUFFICIENT_RES;
   1dbf4:	2011      	movs	r0, #17
   1dbf6:	e7f0      	b.n	1dbda <ble_gatts_inc_access+0x36>
   1dbf8:	200045c0 	.word	0x200045c0

0001dbfc <ble_gatts_val_access>:
{
   1dbfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1dc00:	4606      	mov	r6, r0
   1dc02:	4688      	mov	r8, r1
   1dc04:	4617      	mov	r7, r2
   1dc06:	461c      	mov	r4, r3
   1dc08:	9d08      	ldr	r5, [sp, #32]
    switch (gatt_ctxt->op) {
   1dc0a:	781b      	ldrb	r3, [r3, #0]
   1dc0c:	2b03      	cmp	r3, #3
   1dc0e:	d840      	bhi.n	1dc92 <ble_gatts_val_access+0x96>
   1dc10:	e8df f003 	tbb	[pc, r3]
   1dc14:	33023302 	.word	0x33023302
        if (offset == 0) {
   1dc18:	b9f7      	cbnz	r7, 1dc58 <ble_gatts_val_access+0x5c>
            gatt_ctxt->om = *om;
   1dc1a:	682b      	ldr	r3, [r5, #0]
   1dc1c:	6063      	str	r3, [r4, #4]
            new_om = 0;
   1dc1e:	f04f 0900 	mov.w	r9, #0
        initial_len = OS_MBUF_PKTLEN(gatt_ctxt->om);
   1dc22:	6863      	ldr	r3, [r4, #4]
   1dc24:	f8b3 a010 	ldrh.w	sl, [r3, #16]
        rc = access_cb(conn_handle, attr_handle, gatt_ctxt, cb_arg);
   1dc28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1dc2a:	4622      	mov	r2, r4
   1dc2c:	4641      	mov	r1, r8
   1dc2e:	4630      	mov	r0, r6
   1dc30:	9e09      	ldr	r6, [sp, #36]	; 0x24
   1dc32:	47b0      	blx	r6
        if (rc == 0) {
   1dc34:	4606      	mov	r6, r0
   1dc36:	b940      	cbnz	r0, 1dc4a <ble_gatts_val_access+0x4e>
            attr_len = OS_MBUF_PKTLEN(gatt_ctxt->om) - initial_len - offset;
   1dc38:	6861      	ldr	r1, [r4, #4]
   1dc3a:	8a0b      	ldrh	r3, [r1, #16]
   1dc3c:	eba3 030a 	sub.w	r3, r3, sl
            if (attr_len >= 0) {
   1dc40:	1bdb      	subs	r3, r3, r7
   1dc42:	d418      	bmi.n	1dc76 <ble_gatts_val_access+0x7a>
                if (new_om) {
   1dc44:	f1b9 0f00 	cmp.w	r9, #0
   1dc48:	d10f      	bne.n	1dc6a <ble_gatts_val_access+0x6e>
        if (new_om) {
   1dc4a:	f1b9 0f00 	cmp.w	r9, #0
   1dc4e:	d01d      	beq.n	1dc8c <ble_gatts_val_access+0x90>
            os_mbuf_free_chain(gatt_ctxt->om);
   1dc50:	6860      	ldr	r0, [r4, #4]
   1dc52:	f7ef fee0 	bl	da16 <os_mbuf_free_chain>
   1dc56:	e019      	b.n	1dc8c <ble_gatts_val_access+0x90>
            gatt_ctxt->om = os_msys_get_pkthdr(0, 0);
   1dc58:	2100      	movs	r1, #0
   1dc5a:	4608      	mov	r0, r1
   1dc5c:	f7ef fa33 	bl	d0c6 <os_msys_get_pkthdr>
   1dc60:	6060      	str	r0, [r4, #4]
            if (gatt_ctxt->om == NULL) {
   1dc62:	b1c0      	cbz	r0, 1dc96 <ble_gatts_val_access+0x9a>
            new_om = 1;
   1dc64:	f04f 0901 	mov.w	r9, #1
   1dc68:	e7db      	b.n	1dc22 <ble_gatts_val_access+0x26>
                    os_mbuf_appendfrom(*om, gatt_ctxt->om, offset, attr_len);
   1dc6a:	b29b      	uxth	r3, r3
   1dc6c:	463a      	mov	r2, r7
   1dc6e:	6828      	ldr	r0, [r5, #0]
   1dc70:	f7ef ff48 	bl	db04 <os_mbuf_appendfrom>
   1dc74:	e7e9      	b.n	1dc4a <ble_gatts_val_access+0x4e>
                rc = BLE_ATT_ERR_INVALID_OFFSET;
   1dc76:	2607      	movs	r6, #7
   1dc78:	e7e7      	b.n	1dc4a <ble_gatts_val_access+0x4e>
        gatt_ctxt->om = *om;
   1dc7a:	682b      	ldr	r3, [r5, #0]
   1dc7c:	6063      	str	r3, [r4, #4]
        rc = access_cb(conn_handle, attr_handle, gatt_ctxt, cb_arg);
   1dc7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1dc80:	4622      	mov	r2, r4
   1dc82:	9e09      	ldr	r6, [sp, #36]	; 0x24
   1dc84:	47b0      	blx	r6
   1dc86:	4606      	mov	r6, r0
        *om = gatt_ctxt->om;
   1dc88:	6863      	ldr	r3, [r4, #4]
   1dc8a:	602b      	str	r3, [r5, #0]
}
   1dc8c:	4630      	mov	r0, r6
   1dc8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return BLE_ATT_ERR_UNLIKELY;
   1dc92:	260e      	movs	r6, #14
   1dc94:	e7fa      	b.n	1dc8c <ble_gatts_val_access+0x90>
                return BLE_ATT_ERR_INSUFFICIENT_RES;
   1dc96:	2611      	movs	r6, #17
   1dc98:	e7f8      	b.n	1dc8c <ble_gatts_val_access+0x90>

0001dc9a <ble_gatts_chr_val_access>:
{
   1dc9a:	b5f0      	push	{r4, r5, r6, r7, lr}
   1dc9c:	b089      	sub	sp, #36	; 0x24
   1dc9e:	4605      	mov	r5, r0
   1dca0:	460e      	mov	r6, r1
   1dca2:	461f      	mov	r7, r3
   1dca4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    gatt_ctxt.op = ble_gatts_chr_op(att_op);
   1dca6:	4610      	mov	r0, r2
   1dca8:	f7ff fb97 	bl	1d3da <ble_gatts_chr_op>
   1dcac:	f88d 0014 	strb.w	r0, [sp, #20]
    gatt_ctxt.chr = chr_def;
   1dcb0:	9407      	str	r4, [sp, #28]
    ble_gatts_chr_inc_val_stat(gatt_ctxt.op);
   1dcb2:	f7ff fb99 	bl	1d3e8 <ble_gatts_chr_inc_val_stat>
    rc = ble_gatts_val_access(conn_handle, attr_handle, offset, &gatt_ctxt, om,
   1dcb6:	6863      	ldr	r3, [r4, #4]
   1dcb8:	68a2      	ldr	r2, [r4, #8]
   1dcba:	9202      	str	r2, [sp, #8]
   1dcbc:	9301      	str	r3, [sp, #4]
   1dcbe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1dcc0:	9300      	str	r3, [sp, #0]
   1dcc2:	ab05      	add	r3, sp, #20
   1dcc4:	463a      	mov	r2, r7
   1dcc6:	4631      	mov	r1, r6
   1dcc8:	4628      	mov	r0, r5
   1dcca:	f7ff ff97 	bl	1dbfc <ble_gatts_val_access>
}
   1dcce:	b009      	add	sp, #36	; 0x24
   1dcd0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001dcd2 <ble_gatts_dsc_access>:
{
   1dcd2:	b5f0      	push	{r4, r5, r6, r7, lr}
   1dcd4:	b089      	sub	sp, #36	; 0x24
   1dcd6:	4605      	mov	r5, r0
   1dcd8:	460e      	mov	r6, r1
   1dcda:	461f      	mov	r7, r3
   1dcdc:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    gatt_ctxt.op = ble_gatts_dsc_op(att_op);
   1dcde:	4610      	mov	r0, r2
   1dce0:	f7ff fbc6 	bl	1d470 <ble_gatts_dsc_op>
   1dce4:	f88d 0014 	strb.w	r0, [sp, #20]
    gatt_ctxt.dsc = dsc_def;
   1dce8:	9407      	str	r4, [sp, #28]
    ble_gatts_dsc_inc_stat(gatt_ctxt.op);
   1dcea:	f7ff fbc7 	bl	1d47c <ble_gatts_dsc_inc_stat>
    rc = ble_gatts_val_access(conn_handle, attr_handle, offset, &gatt_ctxt, om,
   1dcee:	68a3      	ldr	r3, [r4, #8]
   1dcf0:	68e2      	ldr	r2, [r4, #12]
   1dcf2:	9202      	str	r2, [sp, #8]
   1dcf4:	9301      	str	r3, [sp, #4]
   1dcf6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1dcf8:	9300      	str	r3, [sp, #0]
   1dcfa:	ab05      	add	r3, sp, #20
   1dcfc:	463a      	mov	r2, r7
   1dcfe:	4631      	mov	r1, r6
   1dd00:	4628      	mov	r0, r5
   1dd02:	f7ff ff7b 	bl	1dbfc <ble_gatts_val_access>
}
   1dd06:	b009      	add	sp, #36	; 0x24
   1dd08:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001dd0a <ble_gatts_mutable>:
{
   1dd0a:	b508      	push	{r3, lr}
    if (ble_gap_adv_active() ||
   1dd0c:	f7fd f90d 	bl	1af2a <ble_gap_adv_active>
   1dd10:	b108      	cbz	r0, 1dd16 <ble_gatts_mutable+0xc>
        return false;
   1dd12:	2000      	movs	r0, #0
}
   1dd14:	bd08      	pop	{r3, pc}
        ble_gap_disc_active() ||
   1dd16:	f7fd fa15 	bl	1b144 <ble_gap_disc_active>
    if (ble_gap_adv_active() ||
   1dd1a:	b108      	cbz	r0, 1dd20 <ble_gatts_mutable+0x16>
        return false;
   1dd1c:	2000      	movs	r0, #0
   1dd1e:	e7f9      	b.n	1dd14 <ble_gatts_mutable+0xa>
        ble_gap_conn_active()) {
   1dd20:	f7fd fa36 	bl	1b190 <ble_gap_conn_active>
        ble_gap_disc_active() ||
   1dd24:	b108      	cbz	r0, 1dd2a <ble_gatts_mutable+0x20>
        return false;
   1dd26:	2000      	movs	r0, #0
   1dd28:	e7f4      	b.n	1dd14 <ble_gatts_mutable+0xa>
    if (ble_hs_conn_first() != NULL) {
   1dd2a:	f001 fabd 	bl	1f2a8 <ble_hs_conn_first>
   1dd2e:	b108      	cbz	r0, 1dd34 <ble_gatts_mutable+0x2a>
        return false;
   1dd30:	2000      	movs	r0, #0
   1dd32:	e7ef      	b.n	1dd14 <ble_gatts_mutable+0xa>
    return true;
   1dd34:	2001      	movs	r0, #1
   1dd36:	e7ed      	b.n	1dd14 <ble_gatts_mutable+0xa>

0001dd38 <ble_gatts_free_mem>:
{
   1dd38:	b538      	push	{r3, r4, r5, lr}
    free(ble_gatts_clt_cfg_mem);
   1dd3a:	4c06      	ldr	r4, [pc, #24]	; (1dd54 <ble_gatts_free_mem+0x1c>)
   1dd3c:	6820      	ldr	r0, [r4, #0]
   1dd3e:	f00b ff35 	bl	29bac <free>
    ble_gatts_clt_cfg_mem = NULL;
   1dd42:	2500      	movs	r5, #0
   1dd44:	6025      	str	r5, [r4, #0]
    free(ble_gatts_svc_entries);
   1dd46:	4c04      	ldr	r4, [pc, #16]	; (1dd58 <ble_gatts_free_mem+0x20>)
   1dd48:	6820      	ldr	r0, [r4, #0]
   1dd4a:	f00b ff2f 	bl	29bac <free>
    ble_gatts_svc_entries = NULL;
   1dd4e:	6025      	str	r5, [r4, #0]
}
   1dd50:	bd38      	pop	{r3, r4, r5, pc}
   1dd52:	bf00      	nop
   1dd54:	20002c40 	.word	0x20002c40
   1dd58:	20002c74 	.word	0x20002c74

0001dd5c <ble_gatts_free_svc_defs>:
{
   1dd5c:	b510      	push	{r4, lr}
    free(ble_gatts_svc_defs);
   1dd5e:	4c04      	ldr	r4, [pc, #16]	; (1dd70 <ble_gatts_free_svc_defs+0x14>)
   1dd60:	6820      	ldr	r0, [r4, #0]
   1dd62:	f00b ff23 	bl	29bac <free>
    ble_gatts_svc_defs = NULL;
   1dd66:	2300      	movs	r3, #0
   1dd68:	6023      	str	r3, [r4, #0]
    ble_gatts_num_svc_defs = 0;
   1dd6a:	4a02      	ldr	r2, [pc, #8]	; (1dd74 <ble_gatts_free_svc_defs+0x18>)
   1dd6c:	6013      	str	r3, [r2, #0]
}
   1dd6e:	bd10      	pop	{r4, pc}
   1dd70:	20002c70 	.word	0x20002c70
   1dd74:	20002c68 	.word	0x20002c68

0001dd78 <ble_gatts_tx_notifications_one_chr>:
{
   1dd78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1dd7c:	4680      	mov	r8, r0
    clt_cfg_idx = ble_gatts_clt_cfg_find_idx(ble_gatts_clt_cfgs,
   1dd7e:	4601      	mov	r1, r0
   1dd80:	4b17      	ldr	r3, [pc, #92]	; (1dde0 <ble_gatts_tx_notifications_one_chr+0x68>)
   1dd82:	6818      	ldr	r0, [r3, #0]
   1dd84:	f7ff fb96 	bl	1d4b4 <ble_gatts_clt_cfg_find_idx>
    if (clt_cfg_idx == -1) {
   1dd88:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   1dd8c:	d026      	beq.n	1dddc <ble_gatts_tx_notifications_one_chr+0x64>
   1dd8e:	4681      	mov	r9, r0
    for (i = 0; ; i++) {
   1dd90:	2500      	movs	r5, #0
   1dd92:	e008      	b.n	1dda6 <ble_gatts_tx_notifications_one_chr+0x2e>
            att_op = 0;
   1dd94:	2600      	movs	r6, #0
            conn_handle = BLE_HS_CONN_HANDLE_NONE;
   1dd96:	f64f 77ff 	movw	r7, #65535	; 0xffff
   1dd9a:	e013      	b.n	1ddc4 <ble_gatts_tx_notifications_one_chr+0x4c>
            ble_gattc_notify(conn_handle, chr_val_handle);
   1dd9c:	4641      	mov	r1, r8
   1dd9e:	4638      	mov	r0, r7
   1dda0:	f7ff f8d2 	bl	1cf48 <ble_gattc_notify>
    for (i = 0; ; i++) {
   1dda4:	3501      	adds	r5, #1
        ble_hs_lock();
   1dda6:	f000 fbbd 	bl	1e524 <ble_hs_lock>
        conn = ble_hs_conn_find_by_idx(i);
   1ddaa:	4628      	mov	r0, r5
   1ddac:	f001 fa66 	bl	1f27c <ble_hs_conn_find_by_idx>
        if (conn != NULL) {
   1ddb0:	4604      	mov	r4, r0
   1ddb2:	2800      	cmp	r0, #0
   1ddb4:	d0ee      	beq.n	1dd94 <ble_gatts_tx_notifications_one_chr+0x1c>
            clt_cfg = conn->bhc_gatt_svr.clt_cfgs + clt_cfg_idx;
   1ddb6:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
            att_op = ble_gatts_schedule_update(conn, clt_cfg);
   1ddb8:	eb01 0189 	add.w	r1, r1, r9, lsl #2
   1ddbc:	f7ff fbbe 	bl	1d53c <ble_gatts_schedule_update>
   1ddc0:	4606      	mov	r6, r0
            conn_handle = conn->bhc_handle;
   1ddc2:	88a7      	ldrh	r7, [r4, #4]
        ble_hs_unlock();
   1ddc4:	f000 fbb2 	bl	1e52c <ble_hs_unlock>
        if (conn == NULL) {
   1ddc8:	b144      	cbz	r4, 1dddc <ble_gatts_tx_notifications_one_chr+0x64>
        switch (att_op) {
   1ddca:	2e1b      	cmp	r6, #27
   1ddcc:	d0e6      	beq.n	1dd9c <ble_gatts_tx_notifications_one_chr+0x24>
   1ddce:	2e1d      	cmp	r6, #29
   1ddd0:	d1e8      	bne.n	1dda4 <ble_gatts_tx_notifications_one_chr+0x2c>
            ble_gattc_indicate(conn_handle, chr_val_handle);
   1ddd2:	4641      	mov	r1, r8
   1ddd4:	4638      	mov	r0, r7
   1ddd6:	f7ff f91f 	bl	1d018 <ble_gattc_indicate>
            break;
   1ddda:	e7e3      	b.n	1dda4 <ble_gatts_tx_notifications_one_chr+0x2c>
}
   1dddc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1dde0:	20002c60 	.word	0x20002c60

0001dde4 <ble_gatts_register_svcs>:
{
   1dde4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1dde6:	b083      	sub	sp, #12
    for (i = 0; svcs[i].type != BLE_GATT_SVC_TYPE_END; i++) {
   1dde8:	2400      	movs	r4, #0
   1ddea:	0123      	lsls	r3, r4, #4
   1ddec:	18c7      	adds	r7, r0, r3
   1ddee:	5cc3      	ldrb	r3, [r0, r3]
   1ddf0:	b19b      	cbz	r3, 1de1a <ble_gatts_register_svcs+0x36>
        idx = ble_gatts_num_svc_entries + i;
   1ddf2:	4b16      	ldr	r3, [pc, #88]	; (1de4c <ble_gatts_register_svcs+0x68>)
   1ddf4:	881b      	ldrh	r3, [r3, #0]
   1ddf6:	4423      	add	r3, r4
        if (idx >= ble_hs_max_services) {
   1ddf8:	4d15      	ldr	r5, [pc, #84]	; (1de50 <ble_gatts_register_svcs+0x6c>)
   1ddfa:	882d      	ldrh	r5, [r5, #0]
   1ddfc:	429d      	cmp	r5, r3
   1ddfe:	dd21      	ble.n	1de44 <ble_gatts_register_svcs+0x60>
        ble_gatts_svc_entries[idx].svc = svcs + i;
   1de00:	4d14      	ldr	r5, [pc, #80]	; (1de54 <ble_gatts_register_svcs+0x70>)
   1de02:	682e      	ldr	r6, [r5, #0]
   1de04:	eb06 05c3 	add.w	r5, r6, r3, lsl #3
   1de08:	f846 7033 	str.w	r7, [r6, r3, lsl #3]
        ble_gatts_svc_entries[idx].handle = 0;
   1de0c:	2300      	movs	r3, #0
   1de0e:	80ab      	strh	r3, [r5, #4]
        ble_gatts_svc_entries[idx].end_group_handle = 0xffff;
   1de10:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1de14:	80eb      	strh	r3, [r5, #6]
    for (i = 0; svcs[i].type != BLE_GATT_SVC_TYPE_END; i++) {
   1de16:	3401      	adds	r4, #1
   1de18:	e7e7      	b.n	1ddea <ble_gatts_register_svcs+0x6>
   1de1a:	4617      	mov	r7, r2
   1de1c:	460e      	mov	r6, r1
    ble_gatts_num_svc_entries += num_svcs;
   1de1e:	4a0b      	ldr	r2, [pc, #44]	; (1de4c <ble_gatts_register_svcs+0x68>)
   1de20:	8813      	ldrh	r3, [r2, #0]
   1de22:	4423      	add	r3, r4
   1de24:	8013      	strh	r3, [r2, #0]
    total_registered = 0;
   1de26:	2500      	movs	r5, #0
    while (total_registered < num_svcs) {
   1de28:	42a5      	cmp	r5, r4
   1de2a:	da09      	bge.n	1de40 <ble_gatts_register_svcs+0x5c>
        rc = ble_gatts_register_round(&cur_registered, cb, cb_arg);
   1de2c:	463a      	mov	r2, r7
   1de2e:	4631      	mov	r1, r6
   1de30:	a801      	add	r0, sp, #4
   1de32:	f7ff fe35 	bl	1daa0 <ble_gatts_register_round>
        if (rc != 0) {
   1de36:	4603      	mov	r3, r0
   1de38:	b928      	cbnz	r0, 1de46 <ble_gatts_register_svcs+0x62>
        total_registered += cur_registered;
   1de3a:	9b01      	ldr	r3, [sp, #4]
   1de3c:	441d      	add	r5, r3
   1de3e:	e7f3      	b.n	1de28 <ble_gatts_register_svcs+0x44>
    return 0;
   1de40:	2300      	movs	r3, #0
   1de42:	e000      	b.n	1de46 <ble_gatts_register_svcs+0x62>
            return BLE_HS_ENOMEM;
   1de44:	2306      	movs	r3, #6
}
   1de46:	4618      	mov	r0, r3
   1de48:	b003      	add	sp, #12
   1de4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1de4c:	20002c6c 	.word	0x20002c6c
   1de50:	2000464a 	.word	0x2000464a
   1de54:	20002c74 	.word	0x20002c74

0001de58 <ble_gatts_connection_broken>:
{
   1de58:	b5f0      	push	{r4, r5, r6, r7, lr}
   1de5a:	b083      	sub	sp, #12
   1de5c:	4606      	mov	r6, r0
    ble_hs_lock();
   1de5e:	f000 fb61 	bl	1e524 <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
   1de62:	4630      	mov	r0, r6
   1de64:	f001 f9ee 	bl	1f244 <ble_hs_conn_find>
    if (conn != NULL) {
   1de68:	4604      	mov	r4, r0
   1de6a:	b120      	cbz	r0, 1de76 <ble_gatts_connection_broken+0x1e>
        clt_cfgs = conn->bhc_gatt_svr.clt_cfgs;
   1de6c:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
        num_clt_cfgs = conn->bhc_gatt_svr.num_clt_cfgs;
   1de6e:	6d07      	ldr	r7, [r0, #80]	; 0x50
        conn->bhc_gatt_svr.clt_cfgs = NULL;
   1de70:	2300      	movs	r3, #0
   1de72:	64c3      	str	r3, [r0, #76]	; 0x4c
        conn->bhc_gatt_svr.num_clt_cfgs = 0;
   1de74:	6503      	str	r3, [r0, #80]	; 0x50
    ble_hs_unlock();
   1de76:	f000 fb59 	bl	1e52c <ble_hs_unlock>
    if (conn == NULL) {
   1de7a:	b1bc      	cbz	r4, 1deac <ble_gatts_connection_broken+0x54>
    ble_gatts_indicate_fail_notconn(conn_handle);
   1de7c:	4630      	mov	r0, r6
   1de7e:	f7ff f868 	bl	1cf52 <ble_gatts_indicate_fail_notconn>
    if (clt_cfgs != NULL) {
   1de82:	b19d      	cbz	r5, 1deac <ble_gatts_connection_broken+0x54>
        for (i = 0; i < num_clt_cfgs; i++) {
   1de84:	2400      	movs	r4, #0
   1de86:	e00b      	b.n	1dea0 <ble_gatts_connection_broken+0x48>
            ble_gatts_subscribe_event(conn_handle, clt_cfgs[i].chr_val_handle,
   1de88:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   1de8c:	789b      	ldrb	r3, [r3, #2]
   1de8e:	f835 1024 	ldrh.w	r1, [r5, r4, lsl #2]
   1de92:	2200      	movs	r2, #0
   1de94:	9200      	str	r2, [sp, #0]
   1de96:	2202      	movs	r2, #2
   1de98:	4630      	mov	r0, r6
   1de9a:	f7ff fc57 	bl	1d74c <ble_gatts_subscribe_event>
        for (i = 0; i < num_clt_cfgs; i++) {
   1de9e:	3401      	adds	r4, #1
   1dea0:	42a7      	cmp	r7, r4
   1dea2:	dcf1      	bgt.n	1de88 <ble_gatts_connection_broken+0x30>
        rc = os_memblock_put(&ble_gatts_clt_cfg_pool, clt_cfgs);
   1dea4:	4629      	mov	r1, r5
   1dea6:	4802      	ldr	r0, [pc, #8]	; (1deb0 <ble_gatts_connection_broken+0x58>)
   1dea8:	f7ef f86a 	bl	cf80 <os_memblock_put>
}
   1deac:	b003      	add	sp, #12
   1deae:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1deb0:	20002c44 	.word	0x20002c44

0001deb4 <ble_gatts_start>:
{
   1deb4:	b570      	push	{r4, r5, r6, lr}
   1deb6:	b084      	sub	sp, #16
    ble_uuid16_t uuid = BLE_UUID16_INIT(BLE_ATT_UUID_CHARACTERISTIC);
   1deb8:	4b43      	ldr	r3, [pc, #268]	; (1dfc8 <ble_gatts_start+0x114>)
   1deba:	681b      	ldr	r3, [r3, #0]
   1debc:	9303      	str	r3, [sp, #12]
    ble_hs_lock();
   1debe:	f000 fb31 	bl	1e524 <ble_hs_lock>
    if (!ble_gatts_mutable()) {
   1dec2:	f7ff ff22 	bl	1dd0a <ble_gatts_mutable>
   1dec6:	2800      	cmp	r0, #0
   1dec8:	d071      	beq.n	1dfae <ble_gatts_start+0xfa>
    ble_gatts_free_mem();
   1deca:	f7ff ff35 	bl	1dd38 <ble_gatts_free_mem>
    rc = ble_att_svr_start();
   1dece:	f007 fcd9 	bl	25884 <ble_att_svr_start>
    if (rc != 0) {
   1ded2:	4604      	mov	r4, r0
   1ded4:	2800      	cmp	r0, #0
   1ded6:	d168      	bne.n	1dfaa <ble_gatts_start+0xf6>
    if (ble_hs_max_client_configs > 0) {
   1ded8:	4b3c      	ldr	r3, [pc, #240]	; (1dfcc <ble_gatts_start+0x118>)
   1deda:	8818      	ldrh	r0, [r3, #0]
   1dedc:	b9b0      	cbnz	r0, 1df0c <ble_gatts_start+0x58>
    if (ble_hs_max_services > 0) {
   1dede:	4b3c      	ldr	r3, [pc, #240]	; (1dfd0 <ble_gatts_start+0x11c>)
   1dee0:	8818      	ldrh	r0, [r3, #0]
   1dee2:	b9e0      	cbnz	r0, 1df1e <ble_gatts_start+0x6a>
    ble_gatts_num_svc_entries = 0;
   1dee4:	4b3b      	ldr	r3, [pc, #236]	; (1dfd4 <ble_gatts_start+0x120>)
   1dee6:	2200      	movs	r2, #0
   1dee8:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < ble_gatts_num_svc_defs; i++) {
   1deea:	4b3b      	ldr	r3, [pc, #236]	; (1dfd8 <ble_gatts_start+0x124>)
   1deec:	681b      	ldr	r3, [r3, #0]
   1deee:	42a3      	cmp	r3, r4
   1def0:	dd1e      	ble.n	1df30 <ble_gatts_start+0x7c>
        rc = ble_gatts_register_svcs(ble_gatts_svc_defs[i],
   1def2:	4b3a      	ldr	r3, [pc, #232]	; (1dfdc <ble_gatts_start+0x128>)
   1def4:	6818      	ldr	r0, [r3, #0]
   1def6:	4b3a      	ldr	r3, [pc, #232]	; (1dfe0 <ble_gatts_start+0x12c>)
   1def8:	685a      	ldr	r2, [r3, #4]
   1defa:	6819      	ldr	r1, [r3, #0]
   1defc:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
   1df00:	f7ff ff70 	bl	1dde4 <ble_gatts_register_svcs>
        if (rc != 0) {
   1df04:	2800      	cmp	r0, #0
   1df06:	d14f      	bne.n	1dfa8 <ble_gatts_start+0xf4>
    for (i = 0; i < ble_gatts_num_svc_defs; i++) {
   1df08:	3401      	adds	r4, #1
   1df0a:	e7ee      	b.n	1deea <ble_gatts_start+0x36>
        ble_gatts_clt_cfg_mem = malloc(
   1df0c:	0080      	lsls	r0, r0, #2
   1df0e:	f00b fe17 	bl	29b40 <malloc>
   1df12:	4b34      	ldr	r3, [pc, #208]	; (1dfe4 <ble_gatts_start+0x130>)
   1df14:	6018      	str	r0, [r3, #0]
        if (ble_gatts_clt_cfg_mem == NULL) {
   1df16:	2800      	cmp	r0, #0
   1df18:	d1e1      	bne.n	1dede <ble_gatts_start+0x2a>
            rc = BLE_HS_ENOMEM;
   1df1a:	2406      	movs	r4, #6
   1df1c:	e048      	b.n	1dfb0 <ble_gatts_start+0xfc>
            malloc(ble_hs_max_services * sizeof *ble_gatts_svc_entries);
   1df1e:	00c0      	lsls	r0, r0, #3
   1df20:	f00b fe0e 	bl	29b40 <malloc>
        ble_gatts_svc_entries =
   1df24:	4b30      	ldr	r3, [pc, #192]	; (1dfe8 <ble_gatts_start+0x134>)
   1df26:	6018      	str	r0, [r3, #0]
        if (ble_gatts_svc_entries == NULL) {
   1df28:	2800      	cmp	r0, #0
   1df2a:	d1db      	bne.n	1dee4 <ble_gatts_start+0x30>
            rc = BLE_HS_ENOMEM;
   1df2c:	2406      	movs	r4, #6
   1df2e:	e03f      	b.n	1dfb0 <ble_gatts_start+0xfc>
    ble_gatts_free_svc_defs();
   1df30:	f7ff ff14 	bl	1dd5c <ble_gatts_free_svc_defs>
    if (ble_gatts_num_cfgable_chrs == 0) {
   1df34:	4b2d      	ldr	r3, [pc, #180]	; (1dfec <ble_gatts_start+0x138>)
   1df36:	681c      	ldr	r4, [r3, #0]
   1df38:	2c00      	cmp	r4, #0
   1df3a:	d03d      	beq.n	1dfb8 <ble_gatts_start+0x104>
    num_elems = ble_hs_max_client_configs / ble_gatts_num_cfgable_chrs;
   1df3c:	4b23      	ldr	r3, [pc, #140]	; (1dfcc <ble_gatts_start+0x118>)
   1df3e:	881b      	ldrh	r3, [r3, #0]
   1df40:	fb93 f4f4 	sdiv	r4, r3, r4
                         ble_gatts_clt_cfg_size(), ble_gatts_clt_cfg_mem,
   1df44:	f7ff faf4 	bl	1d530 <ble_gatts_clt_cfg_size>
    rc = os_mempool_init(&ble_gatts_clt_cfg_pool, num_elems,
   1df48:	4b26      	ldr	r3, [pc, #152]	; (1dfe4 <ble_gatts_start+0x130>)
   1df4a:	681b      	ldr	r3, [r3, #0]
   1df4c:	4a28      	ldr	r2, [pc, #160]	; (1dff0 <ble_gatts_start+0x13c>)
   1df4e:	9200      	str	r2, [sp, #0]
   1df50:	4602      	mov	r2, r0
   1df52:	b2a1      	uxth	r1, r4
   1df54:	4827      	ldr	r0, [pc, #156]	; (1dff4 <ble_gatts_start+0x140>)
   1df56:	f7ee ffa7 	bl	cea8 <os_mempool_init>
   1df5a:	4606      	mov	r6, r0
   1df5c:	4604      	mov	r4, r0
    if (rc != 0) {
   1df5e:	b108      	cbz	r0, 1df64 <ble_gatts_start+0xb0>
        rc = BLE_HS_EOS;
   1df60:	240b      	movs	r4, #11
   1df62:	e025      	b.n	1dfb0 <ble_gatts_start+0xfc>
    ble_gatts_clt_cfgs = os_memblock_get(&ble_gatts_clt_cfg_pool);
   1df64:	4823      	ldr	r0, [pc, #140]	; (1dff4 <ble_gatts_start+0x140>)
   1df66:	f7ee ffe3 	bl	cf30 <os_memblock_get>
   1df6a:	4b23      	ldr	r3, [pc, #140]	; (1dff8 <ble_gatts_start+0x144>)
   1df6c:	6018      	str	r0, [r3, #0]
    if (ble_gatts_clt_cfgs == NULL) {
   1df6e:	b340      	cbz	r0, 1dfc2 <ble_gatts_start+0x10e>
    ha = NULL;
   1df70:	2500      	movs	r5, #0
    while ((ha = ble_att_svr_find_by_uuid(ha, &uuid.u, 0xffff)) != NULL) {
   1df72:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1df76:	a903      	add	r1, sp, #12
   1df78:	4628      	mov	r0, r5
   1df7a:	f006 ff75 	bl	24e68 <ble_att_svr_find_by_uuid>
   1df7e:	4605      	mov	r5, r0
   1df80:	b198      	cbz	r0, 1dfaa <ble_gatts_start+0xf6>
        allowed_flags = ble_gatts_chr_clt_cfg_allowed(chr);
   1df82:	6928      	ldr	r0, [r5, #16]
   1df84:	f7ff f9bc 	bl	1d300 <ble_gatts_chr_clt_cfg_allowed>
        if (allowed_flags != 0) {
   1df88:	4601      	mov	r1, r0
   1df8a:	2800      	cmp	r0, #0
   1df8c:	d0f1      	beq.n	1df72 <ble_gatts_start+0xbe>
            ble_gatts_clt_cfgs[idx].chr_val_handle = ha->ha_handle_id + 1;
   1df8e:	896b      	ldrh	r3, [r5, #10]
   1df90:	4a19      	ldr	r2, [pc, #100]	; (1dff8 <ble_gatts_start+0x144>)
   1df92:	6810      	ldr	r0, [r2, #0]
   1df94:	eb00 0286 	add.w	r2, r0, r6, lsl #2
   1df98:	3301      	adds	r3, #1
   1df9a:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
            ble_gatts_clt_cfgs[idx].allowed = allowed_flags;
   1df9e:	70d1      	strb	r1, [r2, #3]
            ble_gatts_clt_cfgs[idx].flags = 0;
   1dfa0:	2300      	movs	r3, #0
   1dfa2:	7093      	strb	r3, [r2, #2]
            idx++;
   1dfa4:	3601      	adds	r6, #1
   1dfa6:	e7e4      	b.n	1df72 <ble_gatts_start+0xbe>
        rc = ble_gatts_register_svcs(ble_gatts_svc_defs[i],
   1dfa8:	4604      	mov	r4, r0
    if (rc != 0) {
   1dfaa:	b90c      	cbnz	r4, 1dfb0 <ble_gatts_start+0xfc>
   1dfac:	e004      	b.n	1dfb8 <ble_gatts_start+0x104>
        rc = BLE_HS_EBUSY;
   1dfae:	240f      	movs	r4, #15
        ble_gatts_free_mem();
   1dfb0:	f7ff fec2 	bl	1dd38 <ble_gatts_free_mem>
        ble_gatts_free_svc_defs();
   1dfb4:	f7ff fed2 	bl	1dd5c <ble_gatts_free_svc_defs>
    ble_hs_unlock();
   1dfb8:	f000 fab8 	bl	1e52c <ble_hs_unlock>
}
   1dfbc:	4620      	mov	r0, r4
   1dfbe:	b004      	add	sp, #16
   1dfc0:	bd70      	pop	{r4, r5, r6, pc}
        rc = BLE_HS_ENOMEM;
   1dfc2:	2406      	movs	r4, #6
   1dfc4:	e7f4      	b.n	1dfb0 <ble_gatts_start+0xfc>
   1dfc6:	bf00      	nop
   1dfc8:	0002b4d0 	.word	0x0002b4d0
   1dfcc:	20004650 	.word	0x20004650
   1dfd0:	2000464a 	.word	0x2000464a
   1dfd4:	20002c6c 	.word	0x20002c6c
   1dfd8:	20002c68 	.word	0x20002c68
   1dfdc:	20002c70 	.word	0x20002c70
   1dfe0:	2000015c 	.word	0x2000015c
   1dfe4:	20002c40 	.word	0x20002c40
   1dfe8:	20002c74 	.word	0x20002c74
   1dfec:	20002c64 	.word	0x20002c64
   1dff0:	0002b4e0 	.word	0x0002b4e0
   1dff4:	20002c44 	.word	0x20002c44
   1dff8:	20002c60 	.word	0x20002c60

0001dffc <ble_gatts_conn_can_alloc>:
    return ble_gatts_num_cfgable_chrs == 0 ||
   1dffc:	4b05      	ldr	r3, [pc, #20]	; (1e014 <ble_gatts_conn_can_alloc+0x18>)
   1dffe:	681b      	ldr	r3, [r3, #0]
   1e000:	b133      	cbz	r3, 1e010 <ble_gatts_conn_can_alloc+0x14>
           ble_gatts_clt_cfg_pool.mp_num_free > 0;
   1e002:	4b05      	ldr	r3, [pc, #20]	; (1e018 <ble_gatts_conn_can_alloc+0x1c>)
   1e004:	88db      	ldrh	r3, [r3, #6]
    return ble_gatts_num_cfgable_chrs == 0 ||
   1e006:	b90b      	cbnz	r3, 1e00c <ble_gatts_conn_can_alloc+0x10>
   1e008:	2000      	movs	r0, #0
}
   1e00a:	4770      	bx	lr
    return ble_gatts_num_cfgable_chrs == 0 ||
   1e00c:	2001      	movs	r0, #1
   1e00e:	4770      	bx	lr
   1e010:	2001      	movs	r0, #1
   1e012:	4770      	bx	lr
   1e014:	20002c64 	.word	0x20002c64
   1e018:	20002c44 	.word	0x20002c44

0001e01c <ble_gatts_conn_init>:
    if (ble_gatts_num_cfgable_chrs > 0) {
   1e01c:	4b10      	ldr	r3, [pc, #64]	; (1e060 <ble_gatts_conn_init+0x44>)
   1e01e:	681b      	ldr	r3, [r3, #0]
   1e020:	2b00      	cmp	r3, #0
   1e022:	dc04      	bgt.n	1e02e <ble_gatts_conn_init+0x12>
        gatts_conn->clt_cfgs = NULL;
   1e024:	2300      	movs	r3, #0
   1e026:	6003      	str	r3, [r0, #0]
        gatts_conn->num_clt_cfgs = 0;
   1e028:	6043      	str	r3, [r0, #4]
    return 0;
   1e02a:	4618      	mov	r0, r3
}
   1e02c:	4770      	bx	lr
{
   1e02e:	b570      	push	{r4, r5, r6, lr}
   1e030:	4604      	mov	r4, r0
        gatts_conn->clt_cfgs = os_memblock_get(&ble_gatts_clt_cfg_pool);
   1e032:	480c      	ldr	r0, [pc, #48]	; (1e064 <ble_gatts_conn_init+0x48>)
   1e034:	f7ee ff7c 	bl	cf30 <os_memblock_get>
   1e038:	4605      	mov	r5, r0
   1e03a:	6020      	str	r0, [r4, #0]
        if (gatts_conn->clt_cfgs == NULL) {
   1e03c:	b168      	cbz	r0, 1e05a <ble_gatts_conn_init+0x3e>
        memcpy(gatts_conn->clt_cfgs, ble_gatts_clt_cfgs,
   1e03e:	4b0a      	ldr	r3, [pc, #40]	; (1e068 <ble_gatts_conn_init+0x4c>)
   1e040:	681e      	ldr	r6, [r3, #0]
               ble_gatts_clt_cfg_size());
   1e042:	f7ff fa75 	bl	1d530 <ble_gatts_clt_cfg_size>
        memcpy(gatts_conn->clt_cfgs, ble_gatts_clt_cfgs,
   1e046:	4602      	mov	r2, r0
   1e048:	4631      	mov	r1, r6
   1e04a:	4628      	mov	r0, r5
   1e04c:	f7f0 fa10 	bl	e470 <memcpy>
        gatts_conn->num_clt_cfgs = ble_gatts_num_cfgable_chrs;
   1e050:	4b03      	ldr	r3, [pc, #12]	; (1e060 <ble_gatts_conn_init+0x44>)
   1e052:	681b      	ldr	r3, [r3, #0]
   1e054:	6063      	str	r3, [r4, #4]
    return 0;
   1e056:	2000      	movs	r0, #0
}
   1e058:	bd70      	pop	{r4, r5, r6, pc}
            return BLE_HS_ENOMEM;
   1e05a:	2006      	movs	r0, #6
   1e05c:	e7fc      	b.n	1e058 <ble_gatts_conn_init+0x3c>
   1e05e:	bf00      	nop
   1e060:	20002c64 	.word	0x20002c64
   1e064:	20002c44 	.word	0x20002c44
   1e068:	20002c60 	.word	0x20002c60

0001e06c <ble_gatts_send_next_indicate>:
{
   1e06c:	b570      	push	{r4, r5, r6, lr}
   1e06e:	4605      	mov	r5, r0
    ble_hs_lock();
   1e070:	f000 fa58 	bl	1e524 <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
   1e074:	4628      	mov	r0, r5
   1e076:	f001 f8e5 	bl	1f244 <ble_hs_conn_find>
    if (conn != NULL) {
   1e07a:	4604      	mov	r4, r0
   1e07c:	b160      	cbz	r0, 1e098 <ble_gatts_send_next_indicate+0x2c>
        for (i = 0; i < conn->bhc_gatt_svr.num_clt_cfgs; i++) {
   1e07e:	2200      	movs	r2, #0
   1e080:	6d23      	ldr	r3, [r4, #80]	; 0x50
   1e082:	4293      	cmp	r3, r2
   1e084:	dd0f      	ble.n	1e0a6 <ble_gatts_send_next_indicate+0x3a>
            clt_cfg = conn->bhc_gatt_svr.clt_cfgs + i;
   1e086:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   1e088:	eb03 0382 	add.w	r3, r3, r2, lsl #2
            if (clt_cfg->flags & BLE_GATTS_CLT_CFG_F_MODIFIED) {
   1e08c:	7899      	ldrb	r1, [r3, #2]
   1e08e:	f011 0f80 	tst.w	r1, #128	; 0x80
   1e092:	d103      	bne.n	1e09c <ble_gatts_send_next_indicate+0x30>
        for (i = 0; i < conn->bhc_gatt_svr.num_clt_cfgs; i++) {
   1e094:	3201      	adds	r2, #1
   1e096:	e7f3      	b.n	1e080 <ble_gatts_send_next_indicate+0x14>
    chr_val_handle = 0;
   1e098:	2600      	movs	r6, #0
   1e09a:	e005      	b.n	1e0a8 <ble_gatts_send_next_indicate+0x3c>
                chr_val_handle = clt_cfg->chr_val_handle;
   1e09c:	881e      	ldrh	r6, [r3, #0]
                clt_cfg->flags &= ~BLE_GATTS_CLT_CFG_F_MODIFIED;
   1e09e:	f001 017f 	and.w	r1, r1, #127	; 0x7f
   1e0a2:	7099      	strb	r1, [r3, #2]
                break;
   1e0a4:	e000      	b.n	1e0a8 <ble_gatts_send_next_indicate+0x3c>
    chr_val_handle = 0;
   1e0a6:	2600      	movs	r6, #0
    ble_hs_unlock();
   1e0a8:	f000 fa40 	bl	1e52c <ble_hs_unlock>
    if (conn == NULL) {
   1e0ac:	b12c      	cbz	r4, 1e0ba <ble_gatts_send_next_indicate+0x4e>
    if (chr_val_handle == 0) {
   1e0ae:	b136      	cbz	r6, 1e0be <ble_gatts_send_next_indicate+0x52>
    rc = ble_gattc_indicate(conn_handle, chr_val_handle);
   1e0b0:	4631      	mov	r1, r6
   1e0b2:	4628      	mov	r0, r5
   1e0b4:	f7fe ffb0 	bl	1d018 <ble_gattc_indicate>
}
   1e0b8:	bd70      	pop	{r4, r5, r6, pc}
        return BLE_HS_ENOTCONN;
   1e0ba:	2007      	movs	r0, #7
   1e0bc:	e7fc      	b.n	1e0b8 <ble_gatts_send_next_indicate+0x4c>
        return BLE_HS_ENOENT;
   1e0be:	2005      	movs	r0, #5
   1e0c0:	e7fa      	b.n	1e0b8 <ble_gatts_send_next_indicate+0x4c>
	...

0001e0c4 <ble_gatts_rx_indicate_ack>:
{
   1e0c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e0c8:	b084      	sub	sp, #16
   1e0ca:	4680      	mov	r8, r0
   1e0cc:	460e      	mov	r6, r1
    clt_cfg_idx = ble_gatts_clt_cfg_find_idx(ble_gatts_clt_cfgs,
   1e0ce:	4b2d      	ldr	r3, [pc, #180]	; (1e184 <ble_gatts_rx_indicate_ack+0xc0>)
   1e0d0:	681c      	ldr	r4, [r3, #0]
   1e0d2:	4620      	mov	r0, r4
   1e0d4:	f7ff f9ee 	bl	1d4b4 <ble_gatts_clt_cfg_find_idx>
    if (clt_cfg_idx == -1) {
   1e0d8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   1e0dc:	d04b      	beq.n	1e176 <ble_gatts_rx_indicate_ack+0xb2>
    clt_cfg = ble_gatts_clt_cfgs + clt_cfg_idx;
   1e0de:	0085      	lsls	r5, r0, #2
   1e0e0:	442c      	add	r4, r5
    if (!(clt_cfg->allowed & BLE_GATTS_CLT_CFG_F_INDICATE)) {
   1e0e2:	78e3      	ldrb	r3, [r4, #3]
   1e0e4:	f013 0f02 	tst.w	r3, #2
   1e0e8:	d047      	beq.n	1e17a <ble_gatts_rx_indicate_ack+0xb6>
    ble_hs_lock();
   1e0ea:	f000 fa1b 	bl	1e524 <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
   1e0ee:	4640      	mov	r0, r8
   1e0f0:	f001 f8a8 	bl	1f244 <ble_hs_conn_find>
   1e0f4:	4603      	mov	r3, r0
    if (conn->bhc_gatt_svr.indicate_val_handle == chr_val_handle) {
   1e0f6:	f8b0 2054 	ldrh.w	r2, [r0, #84]	; 0x54
   1e0fa:	42b2      	cmp	r2, r6
   1e0fc:	d006      	beq.n	1e10c <ble_gatts_rx_indicate_ack+0x48>
        rc = BLE_HS_ENOENT;
   1e0fe:	2405      	movs	r4, #5
    ble_hs_unlock();
   1e100:	f000 fa14 	bl	1e52c <ble_hs_unlock>
    if (rc != 0) {
   1e104:	bbd4      	cbnz	r4, 1e17c <ble_gatts_rx_indicate_ack+0xb8>
    if (persist) {
   1e106:	bb97      	cbnz	r7, 1e16e <ble_gatts_rx_indicate_ack+0xaa>
    return 0;
   1e108:	463c      	mov	r4, r7
   1e10a:	e037      	b.n	1e17c <ble_gatts_rx_indicate_ack+0xb8>
        conn->bhc_gatt_svr.indicate_val_handle = 0;
   1e10c:	2200      	movs	r2, #0
   1e10e:	f8a0 2054 	strh.w	r2, [r0, #84]	; 0x54
        clt_cfg = conn->bhc_gatt_svr.clt_cfgs + clt_cfg_idx;
   1e112:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   1e114:	4405      	add	r5, r0
        persist = conn->bhc_sec_state.bonded &&
   1e116:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
   1e11a:	f012 0f04 	tst.w	r2, #4
   1e11e:	d023      	beq.n	1e168 <ble_gatts_rx_indicate_ack+0xa4>
                  !(clt_cfg->flags & BLE_GATTS_CLT_CFG_F_MODIFIED);
   1e120:	f995 2002 	ldrsb.w	r2, [r5, #2]
        persist = conn->bhc_sec_state.bonded &&
   1e124:	2a00      	cmp	r2, #0
   1e126:	da02      	bge.n	1e12e <ble_gatts_rx_indicate_ack+0x6a>
        rc = 0;
   1e128:	2400      	movs	r4, #0
   1e12a:	4627      	mov	r7, r4
   1e12c:	e7e8      	b.n	1e100 <ble_gatts_rx_indicate_ack+0x3c>
            cccd_value.peer_addr = conn->bhc_peer_addr;
   1e12e:	461a      	mov	r2, r3
   1e130:	f852 0f07 	ldr.w	r0, [r2, #7]!
   1e134:	9000      	str	r0, [sp, #0]
   1e136:	8891      	ldrh	r1, [r2, #4]
   1e138:	7992      	ldrb	r2, [r2, #6]
   1e13a:	f8ad 1004 	strh.w	r1, [sp, #4]
   1e13e:	f88d 2006 	strb.w	r2, [sp, #6]
                ble_hs_misc_peer_addr_type_to_id(conn->bhc_peer_addr.type);
   1e142:	79d8      	ldrb	r0, [r3, #7]
   1e144:	f002 f820 	bl	20188 <ble_hs_misc_peer_addr_type_to_id>
            cccd_value.peer_addr.type =
   1e148:	f88d 0000 	strb.w	r0, [sp]
            cccd_value.chr_val_handle = chr_val_handle;
   1e14c:	f8ad 6008 	strh.w	r6, [sp, #8]
            cccd_value.flags = clt_cfg->flags;
   1e150:	78ab      	ldrb	r3, [r5, #2]
   1e152:	f8ad 300a 	strh.w	r3, [sp, #10]
            cccd_value.value_changed = 0;
   1e156:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1e15a:	f36f 0300 	bfc	r3, #0, #1
   1e15e:	f88d 300c 	strb.w	r3, [sp, #12]
        rc = 0;
   1e162:	2400      	movs	r4, #0
        persist = conn->bhc_sec_state.bonded &&
   1e164:	2701      	movs	r7, #1
   1e166:	e7cb      	b.n	1e100 <ble_gatts_rx_indicate_ack+0x3c>
        rc = 0;
   1e168:	2400      	movs	r4, #0
   1e16a:	4627      	mov	r7, r4
   1e16c:	e7c8      	b.n	1e100 <ble_gatts_rx_indicate_ack+0x3c>
        rc = ble_store_write_cccd(&cccd_value);
   1e16e:	4668      	mov	r0, sp
   1e170:	f005 f98e 	bl	23490 <ble_store_write_cccd>
   1e174:	e002      	b.n	1e17c <ble_gatts_rx_indicate_ack+0xb8>
        return BLE_HS_ENOENT;
   1e176:	2405      	movs	r4, #5
   1e178:	e000      	b.n	1e17c <ble_gatts_rx_indicate_ack+0xb8>
        return BLE_HS_ENOENT;
   1e17a:	2405      	movs	r4, #5
}
   1e17c:	4620      	mov	r0, r4
   1e17e:	b004      	add	sp, #16
   1e180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e184:	20002c60 	.word	0x20002c60

0001e188 <ble_gatts_tx_notifications>:
{
   1e188:	b510      	push	{r4, lr}
    for (i = 0; i < ble_gatts_num_cfgable_chrs; i++) {
   1e18a:	2400      	movs	r4, #0
   1e18c:	e006      	b.n	1e19c <ble_gatts_tx_notifications+0x14>
        chr_val_handle = ble_gatts_clt_cfgs[i].chr_val_handle;
   1e18e:	4b06      	ldr	r3, [pc, #24]	; (1e1a8 <ble_gatts_tx_notifications+0x20>)
   1e190:	681b      	ldr	r3, [r3, #0]
        ble_gatts_tx_notifications_one_chr(chr_val_handle);
   1e192:	f833 0024 	ldrh.w	r0, [r3, r4, lsl #2]
   1e196:	f7ff fdef 	bl	1dd78 <ble_gatts_tx_notifications_one_chr>
    for (i = 0; i < ble_gatts_num_cfgable_chrs; i++) {
   1e19a:	3401      	adds	r4, #1
   1e19c:	4b03      	ldr	r3, [pc, #12]	; (1e1ac <ble_gatts_tx_notifications+0x24>)
   1e19e:	681b      	ldr	r3, [r3, #0]
   1e1a0:	42a3      	cmp	r3, r4
   1e1a2:	dcf4      	bgt.n	1e18e <ble_gatts_tx_notifications+0x6>
}
   1e1a4:	bd10      	pop	{r4, pc}
   1e1a6:	bf00      	nop
   1e1a8:	20002c60 	.word	0x20002c60
   1e1ac:	20002c64 	.word	0x20002c64

0001e1b0 <ble_gatts_bonding_established>:
{
   1e1b0:	b570      	push	{r4, r5, r6, lr}
   1e1b2:	b084      	sub	sp, #16
   1e1b4:	4606      	mov	r6, r0
    ble_hs_lock();
   1e1b6:	f000 f9b5 	bl	1e524 <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
   1e1ba:	4630      	mov	r0, r6
   1e1bc:	f001 f842 	bl	1f244 <ble_hs_conn_find>
   1e1c0:	4605      	mov	r5, r0
    cccd_value.peer_addr = conn->bhc_peer_addr;
   1e1c2:	4603      	mov	r3, r0
   1e1c4:	f853 0f07 	ldr.w	r0, [r3, #7]!
   1e1c8:	9000      	str	r0, [sp, #0]
   1e1ca:	889a      	ldrh	r2, [r3, #4]
   1e1cc:	799b      	ldrb	r3, [r3, #6]
   1e1ce:	f8ad 2004 	strh.w	r2, [sp, #4]
   1e1d2:	f88d 3006 	strb.w	r3, [sp, #6]
        ble_hs_misc_peer_addr_type_to_id(conn->bhc_peer_addr.type);
   1e1d6:	79e8      	ldrb	r0, [r5, #7]
   1e1d8:	f001 ffd6 	bl	20188 <ble_hs_misc_peer_addr_type_to_id>
    cccd_value.peer_addr.type =
   1e1dc:	f88d 0000 	strb.w	r0, [sp]
    for (i = 0; i < gatt_srv->num_clt_cfgs; ++i) {
   1e1e0:	2400      	movs	r4, #0
   1e1e2:	e000      	b.n	1e1e6 <ble_gatts_bonding_established+0x36>
   1e1e4:	3401      	adds	r4, #1
   1e1e6:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   1e1e8:	42a3      	cmp	r3, r4
   1e1ea:	dd1d      	ble.n	1e228 <ble_gatts_bonding_established+0x78>
        clt_cfg = &gatt_srv->clt_cfgs[i];
   1e1ec:	6cea      	ldr	r2, [r5, #76]	; 0x4c
   1e1ee:	eb02 0384 	add.w	r3, r2, r4, lsl #2
        if (clt_cfg->flags != 0) {
   1e1f2:	7899      	ldrb	r1, [r3, #2]
   1e1f4:	2900      	cmp	r1, #0
   1e1f6:	d0f5      	beq.n	1e1e4 <ble_gatts_bonding_established+0x34>
            cccd_value.chr_val_handle = clt_cfg->chr_val_handle;
   1e1f8:	f832 2024 	ldrh.w	r2, [r2, r4, lsl #2]
   1e1fc:	f8ad 2008 	strh.w	r2, [sp, #8]
            cccd_value.flags = clt_cfg->flags;
   1e200:	789b      	ldrb	r3, [r3, #2]
   1e202:	f8ad 300a 	strh.w	r3, [sp, #10]
            cccd_value.value_changed = 0;
   1e206:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1e20a:	f36f 0300 	bfc	r3, #0, #1
   1e20e:	f88d 300c 	strb.w	r3, [sp, #12]
            ble_hs_unlock();
   1e212:	f000 f98b 	bl	1e52c <ble_hs_unlock>
            ble_store_write_cccd(&cccd_value);
   1e216:	4668      	mov	r0, sp
   1e218:	f005 f93a 	bl	23490 <ble_store_write_cccd>
            ble_hs_lock();
   1e21c:	f000 f982 	bl	1e524 <ble_hs_lock>
            conn = ble_hs_conn_find(conn_handle);
   1e220:	4630      	mov	r0, r6
   1e222:	f001 f80f 	bl	1f244 <ble_hs_conn_find>
   1e226:	e7dd      	b.n	1e1e4 <ble_gatts_bonding_established+0x34>
    ble_hs_unlock();
   1e228:	f000 f980 	bl	1e52c <ble_hs_unlock>
}
   1e22c:	b004      	add	sp, #16
   1e22e:	bd70      	pop	{r4, r5, r6, pc}

0001e230 <ble_gatts_bonding_restored>:
{
   1e230:	b530      	push	{r4, r5, lr}
   1e232:	b08b      	sub	sp, #44	; 0x2c
   1e234:	4604      	mov	r4, r0
    ble_hs_lock();
   1e236:	f000 f975 	bl	1e524 <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
   1e23a:	4620      	mov	r0, r4
   1e23c:	f001 f802 	bl	1f244 <ble_hs_conn_find>
   1e240:	4602      	mov	r2, r0
    cccd_key.peer_addr = conn->bhc_peer_addr;
   1e242:	4603      	mov	r3, r0
   1e244:	f853 0f07 	ldr.w	r0, [r3, #7]!
   1e248:	9003      	str	r0, [sp, #12]
   1e24a:	8899      	ldrh	r1, [r3, #4]
   1e24c:	799b      	ldrb	r3, [r3, #6]
   1e24e:	f8ad 1010 	strh.w	r1, [sp, #16]
   1e252:	f88d 3012 	strb.w	r3, [sp, #18]
        ble_hs_misc_peer_addr_type_to_id(conn->bhc_peer_addr.type);
   1e256:	79d0      	ldrb	r0, [r2, #7]
   1e258:	f001 ff96 	bl	20188 <ble_hs_misc_peer_addr_type_to_id>
    cccd_key.peer_addr.type =
   1e25c:	f88d 000c 	strb.w	r0, [sp, #12]
    cccd_key.chr_val_handle = 0;
   1e260:	2300      	movs	r3, #0
   1e262:	f8ad 3014 	strh.w	r3, [sp, #20]
    cccd_key.idx = 0;
   1e266:	f88d 3016 	strb.w	r3, [sp, #22]
    ble_hs_unlock();
   1e26a:	f000 f95f 	bl	1e52c <ble_hs_unlock>
   1e26e:	e014      	b.n	1e29a <ble_gatts_bonding_restored+0x6a>
                clt_cfg->flags |= BLE_GATTS_CLT_CFG_F_MODIFIED;
   1e270:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1e274:	7083      	strb	r3, [r0, #2]
                att_op = ble_gatts_schedule_update(conn, clt_cfg);
   1e276:	4628      	mov	r0, r5
   1e278:	f7ff f960 	bl	1d53c <ble_gatts_schedule_update>
   1e27c:	4605      	mov	r5, r0
   1e27e:	e028      	b.n	1e2d2 <ble_gatts_bonding_restored+0xa2>
        att_op = 0;
   1e280:	2500      	movs	r5, #0
   1e282:	e026      	b.n	1e2d2 <ble_gatts_bonding_restored+0xa2>
            rc = ble_gattc_notify(conn_handle, cccd_value.chr_val_handle);
   1e284:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   1e288:	4620      	mov	r0, r4
   1e28a:	f7fe fe5d 	bl	1cf48 <ble_gattc_notify>
            if (rc == 0) {
   1e28e:	b3b0      	cbz	r0, 1e2fe <ble_gatts_bonding_restored+0xce>
        cccd_key.idx++;
   1e290:	f89d 3016 	ldrb.w	r3, [sp, #22]
   1e294:	3301      	adds	r3, #1
   1e296:	f88d 3016 	strb.w	r3, [sp, #22]
        rc = ble_store_read_cccd(&cccd_key, &cccd_value);
   1e29a:	a906      	add	r1, sp, #24
   1e29c:	a803      	add	r0, sp, #12
   1e29e:	f005 f8f0 	bl	23482 <ble_store_read_cccd>
        if (rc != 0) {
   1e2a2:	bbb0      	cbnz	r0, 1e312 <ble_gatts_bonding_restored+0xe2>
        ble_hs_lock();
   1e2a4:	f000 f93e 	bl	1e524 <ble_hs_lock>
        conn = ble_hs_conn_find(conn_handle);
   1e2a8:	4620      	mov	r0, r4
   1e2aa:	f000 ffcb 	bl	1f244 <ble_hs_conn_find>
   1e2ae:	4605      	mov	r5, r0
        clt_cfg = ble_gatts_clt_cfg_find(conn->bhc_gatt_svr.clt_cfgs,
   1e2b0:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   1e2b4:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   1e2b6:	f7ff f90f 	bl	1d4d8 <ble_gatts_clt_cfg_find>
        if (clt_cfg != NULL) {
   1e2ba:	4601      	mov	r1, r0
   1e2bc:	2800      	cmp	r0, #0
   1e2be:	d0df      	beq.n	1e280 <ble_gatts_bonding_restored+0x50>
            clt_cfg->flags = cccd_value.flags;
   1e2c0:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   1e2c4:	7083      	strb	r3, [r0, #2]
            if (cccd_value.value_changed) {
   1e2c6:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
   1e2ca:	f012 0f01 	tst.w	r2, #1
   1e2ce:	d1cf      	bne.n	1e270 <ble_gatts_bonding_restored+0x40>
        att_op = 0;
   1e2d0:	2500      	movs	r5, #0
        ble_hs_unlock();
   1e2d2:	f000 f92b 	bl	1e52c <ble_hs_unlock>
        ble_gatts_subscribe_event(conn_handle, cccd_value.chr_val_handle,
   1e2d6:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   1e2da:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   1e2de:	9300      	str	r3, [sp, #0]
   1e2e0:	2300      	movs	r3, #0
   1e2e2:	2203      	movs	r2, #3
   1e2e4:	4620      	mov	r0, r4
   1e2e6:	f7ff fa31 	bl	1d74c <ble_gatts_subscribe_event>
        switch (att_op) {
   1e2ea:	2d1b      	cmp	r5, #27
   1e2ec:	d0ca      	beq.n	1e284 <ble_gatts_bonding_restored+0x54>
   1e2ee:	2d1d      	cmp	r5, #29
   1e2f0:	d1ce      	bne.n	1e290 <ble_gatts_bonding_restored+0x60>
            ble_gattc_indicate(conn_handle, cccd_value.chr_val_handle);
   1e2f2:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   1e2f6:	4620      	mov	r0, r4
   1e2f8:	f7fe fe8e 	bl	1d018 <ble_gattc_indicate>
            break;
   1e2fc:	e7c8      	b.n	1e290 <ble_gatts_bonding_restored+0x60>
                cccd_value.value_changed = 0;
   1e2fe:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   1e302:	f36f 0300 	bfc	r3, #0, #1
   1e306:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
                ble_store_write_cccd(&cccd_value);
   1e30a:	a806      	add	r0, sp, #24
   1e30c:	f005 f8c0 	bl	23490 <ble_store_write_cccd>
   1e310:	e7be      	b.n	1e290 <ble_gatts_bonding_restored+0x60>
}
   1e312:	b00b      	add	sp, #44	; 0x2c
   1e314:	bd30      	pop	{r4, r5, pc}
	...

0001e318 <ble_gatts_add_svcs>:
{
   1e318:	b570      	push	{r4, r5, r6, lr}
   1e31a:	4606      	mov	r6, r0
    ble_hs_lock();
   1e31c:	f000 f902 	bl	1e524 <ble_hs_lock>
    if (!ble_gatts_mutable()) {
   1e320:	f7ff fcf3 	bl	1dd0a <ble_gatts_mutable>
   1e324:	b180      	cbz	r0, 1e348 <ble_gatts_add_svcs+0x30>
                (ble_gatts_num_svc_defs + 1) * sizeof *ble_gatts_svc_defs);
   1e326:	4b0c      	ldr	r3, [pc, #48]	; (1e358 <ble_gatts_add_svcs+0x40>)
   1e328:	681d      	ldr	r5, [r3, #0]
   1e32a:	1c6c      	adds	r4, r5, #1
    p = realloc(ble_gatts_svc_defs,
   1e32c:	00a1      	lsls	r1, r4, #2
   1e32e:	4b0b      	ldr	r3, [pc, #44]	; (1e35c <ble_gatts_add_svcs+0x44>)
   1e330:	6818      	ldr	r0, [r3, #0]
   1e332:	f00b fc5b 	bl	29bec <realloc>
    if (p == NULL) {
   1e336:	b160      	cbz	r0, 1e352 <ble_gatts_add_svcs+0x3a>
    ble_gatts_svc_defs = p;
   1e338:	4a08      	ldr	r2, [pc, #32]	; (1e35c <ble_gatts_add_svcs+0x44>)
   1e33a:	6010      	str	r0, [r2, #0]
    ble_gatts_svc_defs[ble_gatts_num_svc_defs] = svcs;
   1e33c:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
    ble_gatts_num_svc_defs++;
   1e340:	4b05      	ldr	r3, [pc, #20]	; (1e358 <ble_gatts_add_svcs+0x40>)
   1e342:	601c      	str	r4, [r3, #0]
    rc = 0;
   1e344:	2400      	movs	r4, #0
   1e346:	e000      	b.n	1e34a <ble_gatts_add_svcs+0x32>
        rc = BLE_HS_EBUSY;
   1e348:	240f      	movs	r4, #15
    ble_hs_unlock();
   1e34a:	f000 f8ef 	bl	1e52c <ble_hs_unlock>
}
   1e34e:	4620      	mov	r0, r4
   1e350:	bd70      	pop	{r4, r5, r6, pc}
        rc = BLE_HS_ENOMEM;
   1e352:	2406      	movs	r4, #6
   1e354:	e7f9      	b.n	1e34a <ble_gatts_add_svcs+0x32>
   1e356:	bf00      	nop
   1e358:	20002c68 	.word	0x20002c68
   1e35c:	20002c70 	.word	0x20002c70

0001e360 <ble_gatts_count_cfg>:
int
ble_gatts_count_cfg(const struct ble_gatt_svc_def *defs)
{
   1e360:	b500      	push	{lr}
   1e362:	b085      	sub	sp, #20
    struct ble_gatt_resources res = { 0 };
   1e364:	2300      	movs	r3, #0
   1e366:	9301      	str	r3, [sp, #4]
   1e368:	9302      	str	r3, [sp, #8]
   1e36a:	9303      	str	r3, [sp, #12]
    int rc;

    rc = ble_gatts_count_resources(defs, &res);
   1e36c:	a901      	add	r1, sp, #4
   1e36e:	f7ff f8ff 	bl	1d570 <ble_gatts_count_resources>
    if (rc != 0) {
   1e372:	4602      	mov	r2, r0
   1e374:	b990      	cbnz	r0, 1e39c <ble_gatts_count_cfg+0x3c>
        return rc;
    }

    ble_hs_max_services += res.svcs;
   1e376:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   1e37a:	490a      	ldr	r1, [pc, #40]	; (1e3a4 <ble_gatts_count_cfg+0x44>)
   1e37c:	8808      	ldrh	r0, [r1, #0]
   1e37e:	4403      	add	r3, r0
   1e380:	800b      	strh	r3, [r1, #0]
    ble_hs_max_attrs += res.attrs;
   1e382:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1e386:	4908      	ldr	r1, [pc, #32]	; (1e3a8 <ble_gatts_count_cfg+0x48>)
   1e388:	8808      	ldrh	r0, [r1, #0]
   1e38a:	4403      	add	r3, r0
   1e38c:	800b      	strh	r3, [r1, #0]

    /* Reserve an extra CCCD for the cache. */
    ble_hs_max_client_configs +=
        res.cccds * (MYNEWT_VAL(BLE_MAX_CONNECTIONS) + 1);
   1e38e:	f8bd 000c 	ldrh.w	r0, [sp, #12]
    ble_hs_max_client_configs +=
   1e392:	4906      	ldr	r1, [pc, #24]	; (1e3ac <ble_gatts_count_cfg+0x4c>)
   1e394:	880b      	ldrh	r3, [r1, #0]
   1e396:	eb03 0340 	add.w	r3, r3, r0, lsl #1
   1e39a:	800b      	strh	r3, [r1, #0]

    return 0;
}
   1e39c:	4610      	mov	r0, r2
   1e39e:	b005      	add	sp, #20
   1e3a0:	f85d fb04 	ldr.w	pc, [sp], #4
   1e3a4:	2000464a 	.word	0x2000464a
   1e3a8:	2000464c 	.word	0x2000464c
   1e3ac:	20004650 	.word	0x20004650

0001e3b0 <ble_gatts_init>:
    return rc;
}

int
ble_gatts_init(void)
{
   1e3b0:	b500      	push	{lr}
   1e3b2:	b083      	sub	sp, #12
    int rc;

    ble_gatts_num_cfgable_chrs = 0;
   1e3b4:	2300      	movs	r3, #0
   1e3b6:	4a0a      	ldr	r2, [pc, #40]	; (1e3e0 <ble_gatts_init+0x30>)
   1e3b8:	6013      	str	r3, [r2, #0]
    ble_gatts_clt_cfgs = NULL;
   1e3ba:	4a0a      	ldr	r2, [pc, #40]	; (1e3e4 <ble_gatts_init+0x34>)
   1e3bc:	6013      	str	r3, [r2, #0]

    rc = stats_init_and_reg(
   1e3be:	4a0a      	ldr	r2, [pc, #40]	; (1e3e8 <ble_gatts_init+0x38>)
   1e3c0:	9201      	str	r2, [sp, #4]
   1e3c2:	9300      	str	r3, [sp, #0]
   1e3c4:	220a      	movs	r2, #10
   1e3c6:	2104      	movs	r1, #4
   1e3c8:	4808      	ldr	r0, [pc, #32]	; (1e3ec <ble_gatts_init+0x3c>)
   1e3ca:	f7f1 fe51 	bl	10070 <stats_init_and_reg>
        STATS_HDR(ble_gatts_stats), STATS_SIZE_INIT_PARMS(ble_gatts_stats,
        STATS_SIZE_32), STATS_NAME_INIT_PARMS(ble_gatts_stats), "ble_gatts");
    if (rc != 0) {
   1e3ce:	4603      	mov	r3, r0
   1e3d0:	b918      	cbnz	r0, 1e3da <ble_gatts_init+0x2a>
        return BLE_HS_EOS;
    }

    return 0;

}
   1e3d2:	4618      	mov	r0, r3
   1e3d4:	b003      	add	sp, #12
   1e3d6:	f85d fb04 	ldr.w	pc, [sp], #4
        return BLE_HS_EOS;
   1e3da:	230b      	movs	r3, #11
   1e3dc:	e7f9      	b.n	1e3d2 <ble_gatts_init+0x22>
   1e3de:	bf00      	nop
   1e3e0:	20002c64 	.word	0x20002c64
   1e3e4:	20002c60 	.word	0x20002c60
   1e3e8:	0002b4d4 	.word	0x0002b4d4
   1e3ec:	200045c0 	.word	0x200045c0

0001e3f0 <ble_hs_wakeup_tx_conn>:
    }
}

static int
ble_hs_wakeup_tx_conn(struct ble_hs_conn *conn)
{
   1e3f0:	b510      	push	{r4, lr}
   1e3f2:	b082      	sub	sp, #8
   1e3f4:	4604      	mov	r4, r0
    struct os_mbuf_pkthdr *omp;
    struct os_mbuf *om;
    int rc;

    while ((omp = STAILQ_FIRST(&conn->bhc_tx_q)) != NULL) {
   1e3f6:	e008      	b.n	1e40a <ble_hs_wakeup_tx_conn+0x1a>
        STAILQ_REMOVE_HEAD(&conn->bhc_tx_q, omp_next);

        om = OS_MBUF_PKTHDR_TO_MBUF(omp);
   1e3f8:	3b10      	subs	r3, #16
   1e3fa:	a902      	add	r1, sp, #8
   1e3fc:	f841 3d04 	str.w	r3, [r1, #-4]!
        rc = ble_hs_hci_acl_tx_now(conn, &om);
   1e400:	4620      	mov	r0, r4
   1e402:	f001 f991 	bl	1f728 <ble_hs_hci_acl_tx_now>
        if (rc == BLE_HS_EAGAIN) {
   1e406:	2801      	cmp	r0, #1
   1e408:	d009      	beq.n	1e41e <ble_hs_wakeup_tx_conn+0x2e>
    while ((omp = STAILQ_FIRST(&conn->bhc_tx_q)) != NULL) {
   1e40a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1e40c:	b193      	cbz	r3, 1e434 <ble_hs_wakeup_tx_conn+0x44>
        STAILQ_REMOVE_HEAD(&conn->bhc_tx_q, omp_next);
   1e40e:	685a      	ldr	r2, [r3, #4]
   1e410:	63e2      	str	r2, [r4, #60]	; 0x3c
   1e412:	2a00      	cmp	r2, #0
   1e414:	d1f0      	bne.n	1e3f8 <ble_hs_wakeup_tx_conn+0x8>
   1e416:	f104 023c 	add.w	r2, r4, #60	; 0x3c
   1e41a:	6422      	str	r2, [r4, #64]	; 0x40
   1e41c:	e7ec      	b.n	1e3f8 <ble_hs_wakeup_tx_conn+0x8>
            /* Controller is at capacity.  This packet will be the first to
             * get transmitted next time around.
             */
            STAILQ_INSERT_HEAD(&conn->bhc_tx_q, OS_MBUF_PKTHDR(om), omp_next);
   1e41e:	9b01      	ldr	r3, [sp, #4]
   1e420:	f103 0110 	add.w	r1, r3, #16
   1e424:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   1e426:	615a      	str	r2, [r3, #20]
   1e428:	b10a      	cbz	r2, 1e42e <ble_hs_wakeup_tx_conn+0x3e>
   1e42a:	63e1      	str	r1, [r4, #60]	; 0x3c
            return BLE_HS_EAGAIN;
   1e42c:	e003      	b.n	1e436 <ble_hs_wakeup_tx_conn+0x46>
            STAILQ_INSERT_HEAD(&conn->bhc_tx_q, OS_MBUF_PKTHDR(om), omp_next);
   1e42e:	3314      	adds	r3, #20
   1e430:	6423      	str	r3, [r4, #64]	; 0x40
   1e432:	e7fa      	b.n	1e42a <ble_hs_wakeup_tx_conn+0x3a>
        }
    }

    return 0;
   1e434:	2000      	movs	r0, #0
}
   1e436:	b002      	add	sp, #8
   1e438:	bd10      	pop	{r4, pc}
	...

0001e43c <ble_hs_event_rx_hci_ev>:
#endif
}

static void
ble_hs_event_rx_hci_ev(struct ble_npl_event *ev)
{
   1e43c:	b510      	push	{r4, lr}
   1e43e:	4601      	mov	r1, r0
    return ev->ev.ev_arg;
   1e440:	6884      	ldr	r4, [r0, #8]
    const struct ble_hci_ev *hci_ev;
    int rc;

    hci_ev = ble_npl_event_get_arg(ev);

    rc = os_memblock_put(&ble_hs_hci_ev_pool, ev);
   1e442:	4803      	ldr	r0, [pc, #12]	; (1e450 <ble_hs_event_rx_hci_ev+0x14>)
   1e444:	f7ee fd9c 	bl	cf80 <os_memblock_put>
#if BLE_MONITOR
    ble_monitor_send(BLE_MONITOR_OPCODE_EVENT_PKT, hci_ev,
                     hci_ev->length + sizeof(*hci_ev));
#endif

    ble_hs_hci_evt_process(hci_ev);
   1e448:	4620      	mov	r0, r4
   1e44a:	f001 fc41 	bl	1fcd0 <ble_hs_hci_evt_process>
}
   1e44e:	bd10      	pop	{r4, pc}
   1e450:	2000462c 	.word	0x2000462c

0001e454 <ble_hs_clear_rx_queue>:
{
   1e454:	b508      	push	{r3, lr}
    while ((om = ble_mqueue_get(&ble_hs_rx_q)) != NULL) {
   1e456:	e002      	b.n	1e45e <ble_hs_clear_rx_queue+0xa>
        os_mbuf_free_chain(om);
   1e458:	4618      	mov	r0, r3
   1e45a:	f7ef fadc 	bl	da16 <os_mbuf_free_chain>
    while ((om = ble_mqueue_get(&ble_hs_rx_q)) != NULL) {
   1e45e:	4803      	ldr	r0, [pc, #12]	; (1e46c <ble_hs_clear_rx_queue+0x18>)
   1e460:	f001 feae 	bl	201c0 <ble_mqueue_get>
   1e464:	4603      	mov	r3, r0
   1e466:	2800      	cmp	r0, #0
   1e468:	d1f6      	bne.n	1e458 <ble_hs_clear_rx_queue+0x4>
}
   1e46a:	bd08      	pop	{r3, pc}
   1e46c:	20002d70 	.word	0x20002d70

0001e470 <ble_hs_rx_data>:
 *
 * @return                      0 on success; nonzero on failure.
 */
static int
ble_hs_rx_data(struct os_mbuf *om, void *arg)
{
   1e470:	b510      	push	{r4, lr}
   1e472:	4604      	mov	r4, r0
    int rc;

    /* If flow control is enabled, mark this packet with its corresponding
     * connection handle.
     */
    ble_hs_flow_fill_acl_usrhdr(om);
   1e474:	f000 ffe5 	bl	1f442 <ble_hs_flow_fill_acl_usrhdr>

    rc = ble_mqueue_put(&ble_hs_rx_q, ble_hs_evq, om);
   1e478:	4622      	mov	r2, r4
   1e47a:	4b07      	ldr	r3, [pc, #28]	; (1e498 <ble_hs_rx_data+0x28>)
   1e47c:	6819      	ldr	r1, [r3, #0]
   1e47e:	4807      	ldr	r0, [pc, #28]	; (1e49c <ble_hs_rx_data+0x2c>)
   1e480:	f001 feb1 	bl	201e6 <ble_mqueue_put>
    if (rc != 0) {
   1e484:	4603      	mov	r3, r0
   1e486:	b908      	cbnz	r0, 1e48c <ble_hs_rx_data+0x1c>
        os_mbuf_free_chain(om);
        return BLE_HS_EOS;
    }

    return 0;
}
   1e488:	4618      	mov	r0, r3
   1e48a:	bd10      	pop	{r4, pc}
        os_mbuf_free_chain(om);
   1e48c:	4620      	mov	r0, r4
   1e48e:	f7ef fac2 	bl	da16 <os_mbuf_free_chain>
        return BLE_HS_EOS;
   1e492:	230b      	movs	r3, #11
   1e494:	e7f8      	b.n	1e488 <ble_hs_rx_data+0x18>
   1e496:	bf00      	nop
   1e498:	20002cb8 	.word	0x20002cb8
   1e49c:	20002d70 	.word	0x20002d70

0001e4a0 <ble_hs_event_tx_notify>:
{
   1e4a0:	b508      	push	{r3, lr}
    ble_gatts_tx_notifications();
   1e4a2:	f7ff fe71 	bl	1e188 <ble_gatts_tx_notifications>
}
   1e4a6:	bd08      	pop	{r3, pc}

0001e4a8 <ble_hs_evq_get>:
}
   1e4a8:	4b01      	ldr	r3, [pc, #4]	; (1e4b0 <ble_hs_evq_get+0x8>)
   1e4aa:	6818      	ldr	r0, [r3, #0]
   1e4ac:	4770      	bx	lr
   1e4ae:	bf00      	nop
   1e4b0:	20002cb8 	.word	0x20002cb8

0001e4b4 <ble_hs_sched_start_stage2>:
{
   1e4b4:	b508      	push	{r3, lr}
    ble_npl_eventq_put((struct ble_npl_eventq *)ble_hs_evq_get(),
   1e4b6:	f7ff fff7 	bl	1e4a8 <ble_hs_evq_get>
    os_eventq_put(&evq->evq, &ev->ev);
   1e4ba:	4902      	ldr	r1, [pc, #8]	; (1e4c4 <ble_hs_sched_start_stage2+0x10>)
   1e4bc:	f7ee fbfd 	bl	ccba <os_eventq_put>
}
   1e4c0:	bd08      	pop	{r3, pc}
   1e4c2:	bf00      	nop
   1e4c4:	20002c98 	.word	0x20002c98

0001e4c8 <ble_hs_event_start_stage1>:
{
   1e4c8:	b508      	push	{r3, lr}
    ble_hs_sched_start_stage2();
   1e4ca:	f7ff fff3 	bl	1e4b4 <ble_hs_sched_start_stage2>
}
   1e4ce:	bd08      	pop	{r3, pc}

0001e4d0 <ble_hs_evq_set>:
    ble_hs_evq = evq;
   1e4d0:	4b01      	ldr	r3, [pc, #4]	; (1e4d8 <ble_hs_evq_set+0x8>)
   1e4d2:	6018      	str	r0, [r3, #0]
}
   1e4d4:	4770      	bx	lr
   1e4d6:	bf00      	nop
   1e4d8:	20002cb8 	.word	0x20002cb8

0001e4dc <ble_hs_is_parent_task>:
{
   1e4dc:	b508      	push	{r3, lr}
    return os_started();
   1e4de:	f7ee f97d 	bl	c7dc <os_started>
    return !ble_npl_os_started() ||
   1e4e2:	b908      	cbnz	r0, 1e4e8 <ble_hs_is_parent_task+0xc>
   1e4e4:	2001      	movs	r0, #1
}
   1e4e6:	bd08      	pop	{r3, pc}
    return os_sched_get_current_task();
   1e4e8:	f7ee fee0 	bl	d2ac <os_sched_get_current_task>
           ble_npl_get_current_task_id() == ble_hs_parent_task;
   1e4ec:	4b03      	ldr	r3, [pc, #12]	; (1e4fc <ble_hs_is_parent_task+0x20>)
   1e4ee:	681b      	ldr	r3, [r3, #0]
    return !ble_npl_os_started() ||
   1e4f0:	4283      	cmp	r3, r0
   1e4f2:	d001      	beq.n	1e4f8 <ble_hs_is_parent_task+0x1c>
   1e4f4:	2000      	movs	r0, #0
   1e4f6:	e7f6      	b.n	1e4e6 <ble_hs_is_parent_task+0xa>
   1e4f8:	2001      	movs	r0, #1
   1e4fa:	e7f4      	b.n	1e4e6 <ble_hs_is_parent_task+0xa>
   1e4fc:	20002d68 	.word	0x20002d68

0001e500 <ble_hs_lock_nested>:
{
   1e500:	b508      	push	{r3, lr}
    return (ble_npl_error_t)os_mutex_pend(&mu->mu, timeout);
   1e502:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1e506:	4802      	ldr	r0, [pc, #8]	; (1e510 <ble_hs_lock_nested+0x10>)
   1e508:	f7ef feba 	bl	e280 <os_mutex_pend>
}
   1e50c:	bd08      	pop	{r3, pc}
   1e50e:	bf00      	nop
   1e510:	20002d5c 	.word	0x20002d5c

0001e514 <ble_hs_unlock_nested>:
{
   1e514:	b508      	push	{r3, lr}
    return (ble_npl_error_t)os_mutex_release(&mu->mu);
   1e516:	4802      	ldr	r0, [pc, #8]	; (1e520 <ble_hs_unlock_nested+0xc>)
   1e518:	f7ef fe52 	bl	e1c0 <os_mutex_release>
}
   1e51c:	bd08      	pop	{r3, pc}
   1e51e:	bf00      	nop
   1e520:	20002d5c 	.word	0x20002d5c

0001e524 <ble_hs_lock>:
{
   1e524:	b508      	push	{r3, lr}
    ble_hs_lock_nested();
   1e526:	f7ff ffeb 	bl	1e500 <ble_hs_lock_nested>
}
   1e52a:	bd08      	pop	{r3, pc}

0001e52c <ble_hs_unlock>:
{
   1e52c:	b508      	push	{r3, lr}
    ble_hs_unlock_nested();
   1e52e:	f7ff fff1 	bl	1e514 <ble_hs_unlock_nested>
}
   1e532:	bd08      	pop	{r3, pc}

0001e534 <ble_hs_process_rx_data_queue>:
{
   1e534:	b508      	push	{r3, lr}
    while ((om = ble_mqueue_get(&ble_hs_rx_q)) != NULL) {
   1e536:	e002      	b.n	1e53e <ble_hs_process_rx_data_queue+0xa>
        ble_hs_hci_evt_acl_process(om);
   1e538:	4618      	mov	r0, r3
   1e53a:	f001 fbe7 	bl	1fd0c <ble_hs_hci_evt_acl_process>
    while ((om = ble_mqueue_get(&ble_hs_rx_q)) != NULL) {
   1e53e:	4803      	ldr	r0, [pc, #12]	; (1e54c <ble_hs_process_rx_data_queue+0x18>)
   1e540:	f001 fe3e 	bl	201c0 <ble_mqueue_get>
   1e544:	4603      	mov	r3, r0
   1e546:	2800      	cmp	r0, #0
   1e548:	d1f6      	bne.n	1e538 <ble_hs_process_rx_data_queue+0x4>
}
   1e54a:	bd08      	pop	{r3, pc}
   1e54c:	20002d70 	.word	0x20002d70

0001e550 <ble_hs_event_rx_data>:
{
   1e550:	b508      	push	{r3, lr}
    ble_hs_process_rx_data_queue();
   1e552:	f7ff ffef 	bl	1e534 <ble_hs_process_rx_data_queue>
}
   1e556:	bd08      	pop	{r3, pc}

0001e558 <ble_hs_wakeup_tx>:
{
   1e558:	b510      	push	{r4, lr}
    ble_hs_lock();
   1e55a:	f7ff ffe3 	bl	1e524 <ble_hs_lock>
    for (conn = ble_hs_conn_first();
   1e55e:	f000 fea3 	bl	1f2a8 <ble_hs_conn_first>
   1e562:	b148      	cbz	r0, 1e578 <ble_hs_wakeup_tx+0x20>
        if (conn->bhc_flags & BLE_HS_CONN_F_TX_FRAG) {
   1e564:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   1e568:	f013 0f04 	tst.w	r3, #4
   1e56c:	d101      	bne.n	1e572 <ble_hs_wakeup_tx+0x1a>
         conn = SLIST_NEXT(conn, bhc_next)) {
   1e56e:	6800      	ldr	r0, [r0, #0]
   1e570:	e7f7      	b.n	1e562 <ble_hs_wakeup_tx+0xa>
            rc = ble_hs_wakeup_tx_conn(conn);
   1e572:	f7ff ff3d 	bl	1e3f0 <ble_hs_wakeup_tx_conn>
            if (rc != 0) {
   1e576:	b948      	cbnz	r0, 1e58c <ble_hs_wakeup_tx+0x34>
    for (conn = ble_hs_conn_first();
   1e578:	f000 fe96 	bl	1f2a8 <ble_hs_conn_first>
   1e57c:	4604      	mov	r4, r0
   1e57e:	b12c      	cbz	r4, 1e58c <ble_hs_wakeup_tx+0x34>
        rc = ble_hs_wakeup_tx_conn(conn);
   1e580:	4620      	mov	r0, r4
   1e582:	f7ff ff35 	bl	1e3f0 <ble_hs_wakeup_tx_conn>
        if (rc != 0) {
   1e586:	b908      	cbnz	r0, 1e58c <ble_hs_wakeup_tx+0x34>
         conn = SLIST_NEXT(conn, bhc_next)) {
   1e588:	6824      	ldr	r4, [r4, #0]
   1e58a:	e7f8      	b.n	1e57e <ble_hs_wakeup_tx+0x26>
    ble_hs_unlock();
   1e58c:	f7ff ffce 	bl	1e52c <ble_hs_unlock>
}
   1e590:	bd10      	pop	{r4, pc}
	...

0001e594 <ble_hs_is_enabled>:
    return ble_hs_enabled_state == BLE_HS_ENABLED_STATE_ON;
   1e594:	4b03      	ldr	r3, [pc, #12]	; (1e5a4 <ble_hs_is_enabled+0x10>)
   1e596:	7818      	ldrb	r0, [r3, #0]
}
   1e598:	2802      	cmp	r0, #2
   1e59a:	bf14      	ite	ne
   1e59c:	2000      	movne	r0, #0
   1e59e:	2001      	moveq	r0, #1
   1e5a0:	4770      	bx	lr
   1e5a2:	bf00      	nop
   1e5a4:	2000464e 	.word	0x2000464e

0001e5a8 <ble_hs_timer_reset>:
{
   1e5a8:	b510      	push	{r4, lr}
   1e5aa:	4604      	mov	r4, r0
    if (!ble_hs_is_enabled()) {
   1e5ac:	f7ff fff2 	bl	1e594 <ble_hs_is_enabled>
   1e5b0:	b120      	cbz	r0, 1e5bc <ble_hs_timer_reset+0x14>
    return (ble_npl_error_t)os_callout_reset(&co->co, ticks);
   1e5b2:	4621      	mov	r1, r4
   1e5b4:	4803      	ldr	r0, [pc, #12]	; (1e5c4 <ble_hs_timer_reset+0x1c>)
   1e5b6:	f7ee fa25 	bl	ca04 <os_callout_reset>
}
   1e5ba:	bd10      	pop	{r4, pc}
    os_callout_stop(&co->co);
   1e5bc:	4801      	ldr	r0, [pc, #4]	; (1e5c4 <ble_hs_timer_reset+0x1c>)
   1e5be:	f7ee fa03 	bl	c9c8 <os_callout_stop>
   1e5c2:	e7fa      	b.n	1e5ba <ble_hs_timer_reset+0x12>
   1e5c4:	20002d88 	.word	0x20002d88

0001e5c8 <ble_hs_timer_sched>:
    if (ticks_from_now == BLE_HS_FOREVER) {
   1e5c8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   1e5cc:	4298      	cmp	r0, r3
   1e5ce:	d010      	beq.n	1e5f2 <ble_hs_timer_sched+0x2a>
{
   1e5d0:	b510      	push	{r4, lr}
   1e5d2:	4604      	mov	r4, r0
    return os_time_get();
   1e5d4:	f7ef f84e 	bl	d674 <os_time_get>
    abs_time = ble_npl_time_get() + ticks_from_now;
   1e5d8:	4420      	add	r0, r4
   1e5da:	4b06      	ldr	r3, [pc, #24]	; (1e5f4 <ble_hs_timer_sched+0x2c>)
   1e5dc:	69db      	ldr	r3, [r3, #28]
    if (!ble_npl_callout_is_active(&ble_hs_timer) ||
   1e5de:	b123      	cbz	r3, 1e5ea <ble_hs_timer_sched+0x22>
    return co->co.c_ticks;
   1e5e0:	4b04      	ldr	r3, [pc, #16]	; (1e5f4 <ble_hs_timer_sched+0x2c>)
   1e5e2:	695b      	ldr	r3, [r3, #20]
            ((ble_npl_stime_t)(abs_time -
   1e5e4:	1ac0      	subs	r0, r0, r3
    if (!ble_npl_callout_is_active(&ble_hs_timer) ||
   1e5e6:	2800      	cmp	r0, #0
   1e5e8:	da02      	bge.n	1e5f0 <ble_hs_timer_sched+0x28>
        ble_hs_timer_reset(ticks_from_now);
   1e5ea:	4620      	mov	r0, r4
   1e5ec:	f7ff ffdc 	bl	1e5a8 <ble_hs_timer_reset>
}
   1e5f0:	bd10      	pop	{r4, pc}
   1e5f2:	4770      	bx	lr
   1e5f4:	20002d88 	.word	0x20002d88

0001e5f8 <ble_hs_sync>:
{
   1e5f8:	b510      	push	{r4, lr}
    ble_hs_sync_state = BLE_HS_SYNC_STATE_BRINGUP;
   1e5fa:	4b14      	ldr	r3, [pc, #80]	; (1e64c <ble_hs_sync+0x54>)
   1e5fc:	2201      	movs	r2, #1
   1e5fe:	701a      	strb	r2, [r3, #0]
    rc = ble_hs_startup_go();
   1e600:	f002 f81d 	bl	2063e <ble_hs_startup_go>
    if (rc == 0) {
   1e604:	4604      	mov	r4, r0
   1e606:	b940      	cbnz	r0, 1e61a <ble_hs_sync+0x22>
        ble_hs_sync_state = BLE_HS_SYNC_STATE_GOOD;
   1e608:	4b10      	ldr	r3, [pc, #64]	; (1e64c <ble_hs_sync+0x54>)
   1e60a:	2202      	movs	r2, #2
   1e60c:	701a      	strb	r2, [r3, #0]
    ble_hs_timer_sched(retry_tmo_ticks);
   1e60e:	200c      	movs	r0, #12
   1e610:	f7ff ffda 	bl	1e5c8 <ble_hs_timer_sched>
    if (rc == 0) {
   1e614:	b12c      	cbz	r4, 1e622 <ble_hs_sync+0x2a>
}
   1e616:	4620      	mov	r0, r4
   1e618:	bd10      	pop	{r4, pc}
        ble_hs_sync_state = BLE_HS_SYNC_STATE_BAD;
   1e61a:	4b0c      	ldr	r3, [pc, #48]	; (1e64c <ble_hs_sync+0x54>)
   1e61c:	2200      	movs	r2, #0
   1e61e:	701a      	strb	r2, [r3, #0]
   1e620:	e7f5      	b.n	1e60e <ble_hs_sync+0x16>
        rc = ble_hs_misc_restore_irks();
   1e622:	f001 fdb9 	bl	20198 <ble_hs_misc_restore_irks>
        if (rc != 0) {
   1e626:	4604      	mov	r4, r0
   1e628:	b940      	cbnz	r0, 1e63c <ble_hs_sync+0x44>
        if (ble_hs_cfg.sync_cb != NULL) {
   1e62a:	4b09      	ldr	r3, [pc, #36]	; (1e650 <ble_hs_sync+0x58>)
   1e62c:	691b      	ldr	r3, [r3, #16]
   1e62e:	b103      	cbz	r3, 1e632 <ble_hs_sync+0x3a>
            ble_hs_cfg.sync_cb();
   1e630:	4798      	blx	r3
        STATS_INC(ble_hs_stats, sync);
   1e632:	4a08      	ldr	r2, [pc, #32]	; (1e654 <ble_hs_sync+0x5c>)
   1e634:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   1e636:	3301      	adds	r3, #1
   1e638:	62d3      	str	r3, [r2, #44]	; 0x2c
    return rc;
   1e63a:	e7ec      	b.n	1e616 <ble_hs_sync+0x1e>
            BLE_HS_LOG(INFO, "Failed to restore IRKs from store; status=%d\n",
   1e63c:	4603      	mov	r3, r0
   1e63e:	4a06      	ldr	r2, [pc, #24]	; (1e658 <ble_hs_sync+0x60>)
   1e640:	2101      	movs	r1, #1
   1e642:	2004      	movs	r0, #4
   1e644:	f7f1 fa94 	bl	fb70 <modlog_printf>
   1e648:	e7ef      	b.n	1e62a <ble_hs_sync+0x32>
   1e64a:	bf00      	nop
   1e64c:	20004648 	.word	0x20004648
   1e650:	2000015c 	.word	0x2000015c
   1e654:	200045f4 	.word	0x200045f4
   1e658:	0002b514 	.word	0x0002b514

0001e65c <ble_hs_reset>:
{
   1e65c:	b508      	push	{r3, lr}
    STATS_INC(ble_hs_stats, reset);
   1e65e:	4a12      	ldr	r2, [pc, #72]	; (1e6a8 <ble_hs_reset+0x4c>)
   1e660:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1e662:	3301      	adds	r3, #1
   1e664:	6293      	str	r3, [r2, #40]	; 0x28
    ble_hs_sync_state = 0;
   1e666:	4b11      	ldr	r3, [pc, #68]	; (1e6ac <ble_hs_reset+0x50>)
   1e668:	2200      	movs	r2, #0
   1e66a:	701a      	strb	r2, [r3, #0]
    (void)ble_hci_trans_reset();
   1e66c:	f007 fd80 	bl	26170 <ble_hci_trans_reset>
    ble_hs_clear_rx_queue();
   1e670:	f7ff fef0 	bl	1e454 <ble_hs_clear_rx_queue>
        conn_handle = ble_hs_atomic_first_conn_handle();
   1e674:	f000 fd09 	bl	1f08a <ble_hs_atomic_first_conn_handle>
        if (conn_handle == BLE_HS_CONN_HANDLE_NONE) {
   1e678:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1e67c:	4298      	cmp	r0, r3
   1e67e:	d004      	beq.n	1e68a <ble_hs_reset+0x2e>
        ble_gap_conn_broken(conn_handle, ble_hs_reset_reason);
   1e680:	4b0b      	ldr	r3, [pc, #44]	; (1e6b0 <ble_hs_reset+0x54>)
   1e682:	6819      	ldr	r1, [r3, #0]
   1e684:	f7fc fe22 	bl	1b2cc <ble_gap_conn_broken>
        conn_handle = ble_hs_atomic_first_conn_handle();
   1e688:	e7f4      	b.n	1e674 <ble_hs_reset+0x18>
    ble_hs_id_reset();
   1e68a:	f001 fcc5 	bl	20018 <ble_hs_id_reset>
    if (ble_hs_cfg.reset_cb != NULL && ble_hs_reset_reason != 0) {
   1e68e:	4b09      	ldr	r3, [pc, #36]	; (1e6b4 <ble_hs_reset+0x58>)
   1e690:	68db      	ldr	r3, [r3, #12]
   1e692:	b11b      	cbz	r3, 1e69c <ble_hs_reset+0x40>
   1e694:	4a06      	ldr	r2, [pc, #24]	; (1e6b0 <ble_hs_reset+0x54>)
   1e696:	6810      	ldr	r0, [r2, #0]
   1e698:	b100      	cbz	r0, 1e69c <ble_hs_reset+0x40>
        ble_hs_cfg.reset_cb(ble_hs_reset_reason);
   1e69a:	4798      	blx	r3
    ble_hs_reset_reason = 0;
   1e69c:	4b04      	ldr	r3, [pc, #16]	; (1e6b0 <ble_hs_reset+0x54>)
   1e69e:	2200      	movs	r2, #0
   1e6a0:	601a      	str	r2, [r3, #0]
    rc = ble_hs_sync();
   1e6a2:	f7ff ffa9 	bl	1e5f8 <ble_hs_sync>
}
   1e6a6:	bd08      	pop	{r3, pc}
   1e6a8:	200045f4 	.word	0x200045f4
   1e6ac:	20004648 	.word	0x20004648
   1e6b0:	20002d6c 	.word	0x20002d6c
   1e6b4:	2000015c 	.word	0x2000015c

0001e6b8 <ble_hs_event_reset>:
{
   1e6b8:	b508      	push	{r3, lr}
    ble_hs_reset();
   1e6ba:	f7ff ffcf 	bl	1e65c <ble_hs_reset>
}
   1e6be:	bd08      	pop	{r3, pc}

0001e6c0 <ble_hs_timer_exp>:
{
   1e6c0:	b508      	push	{r3, lr}
    switch (ble_hs_sync_state) {
   1e6c2:	4b13      	ldr	r3, [pc, #76]	; (1e710 <ble_hs_timer_exp+0x50>)
   1e6c4:	781b      	ldrb	r3, [r3, #0]
   1e6c6:	b1b3      	cbz	r3, 1e6f6 <ble_hs_timer_exp+0x36>
   1e6c8:	2b02      	cmp	r3, #2
   1e6ca:	d117      	bne.n	1e6fc <ble_hs_timer_exp+0x3c>
        ticks_until_next = ble_gattc_timer();
   1e6cc:	f7fe fbc8 	bl	1ce60 <ble_gattc_timer>
        ble_hs_timer_sched(ticks_until_next);
   1e6d0:	f7ff ff7a 	bl	1e5c8 <ble_hs_timer_sched>
        ticks_until_next = ble_gap_timer();
   1e6d4:	f7fc ff0e 	bl	1b4f4 <ble_gap_timer>
        ble_hs_timer_sched(ticks_until_next);
   1e6d8:	f7ff ff76 	bl	1e5c8 <ble_hs_timer_sched>
        ticks_until_next = ble_l2cap_sig_timer();
   1e6dc:	f002 fb9c 	bl	20e18 <ble_l2cap_sig_timer>
        ble_hs_timer_sched(ticks_until_next);
   1e6e0:	f7ff ff72 	bl	1e5c8 <ble_hs_timer_sched>
        ticks_until_next = ble_sm_timer();
   1e6e4:	f003 ffaf 	bl	22646 <ble_sm_timer>
        ble_hs_timer_sched(ticks_until_next);
   1e6e8:	f7ff ff6e 	bl	1e5c8 <ble_hs_timer_sched>
        ticks_until_next = ble_hs_conn_timer();
   1e6ec:	f000 fe4c 	bl	1f388 <ble_hs_conn_timer>
        ble_hs_timer_sched(ticks_until_next);
   1e6f0:	f7ff ff6a 	bl	1e5c8 <ble_hs_timer_sched>
}
   1e6f4:	bd08      	pop	{r3, pc}
        ble_hs_reset();
   1e6f6:	f7ff ffb1 	bl	1e65c <ble_hs_reset>
        break;
   1e6fa:	e7fb      	b.n	1e6f4 <ble_hs_timer_exp+0x34>
        assert(0);
   1e6fc:	f7ed fd74 	bl	c1e8 <hal_debugger_connected>
   1e700:	b100      	cbz	r0, 1e704 <ble_hs_timer_exp+0x44>
   1e702:	be01      	bkpt	0x0001
   1e704:	2300      	movs	r3, #0
   1e706:	461a      	mov	r2, r3
   1e708:	4619      	mov	r1, r3
   1e70a:	4618      	mov	r0, r3
   1e70c:	f7ed ffa6 	bl	c65c <__assert_func>
   1e710:	20004648 	.word	0x20004648

0001e714 <ble_hs_timer_resched>:
{
   1e714:	b508      	push	{r3, lr}
    ble_hs_timer_reset(0);
   1e716:	2000      	movs	r0, #0
   1e718:	f7ff ff46 	bl	1e5a8 <ble_hs_timer_reset>
}
   1e71c:	bd08      	pop	{r3, pc}
	...

0001e720 <ble_hs_enqueue_hci_event>:
{
   1e720:	b510      	push	{r4, lr}
   1e722:	4604      	mov	r4, r0
    ev = os_memblock_get(&ble_hs_hci_ev_pool);
   1e724:	480a      	ldr	r0, [pc, #40]	; (1e750 <ble_hs_enqueue_hci_event+0x30>)
   1e726:	f7ee fc03 	bl	cf30 <os_memblock_get>
    if (ev == NULL) {
   1e72a:	b160      	cbz	r0, 1e746 <ble_hs_enqueue_hci_event+0x26>
   1e72c:	4601      	mov	r1, r0
    memset(ev, 0, sizeof(*ev));
   1e72e:	2300      	movs	r3, #0
   1e730:	6003      	str	r3, [r0, #0]
   1e732:	60c3      	str	r3, [r0, #12]
    ev->ev.ev_queued = 0;
   1e734:	7003      	strb	r3, [r0, #0]
    ev->ev.ev_cb = (os_event_fn *)fn;
   1e736:	4b07      	ldr	r3, [pc, #28]	; (1e754 <ble_hs_enqueue_hci_event+0x34>)
   1e738:	6043      	str	r3, [r0, #4]
    ev->ev.ev_arg = arg;
   1e73a:	6084      	str	r4, [r0, #8]
    os_eventq_put(&evq->evq, &ev->ev);
   1e73c:	4b06      	ldr	r3, [pc, #24]	; (1e758 <ble_hs_enqueue_hci_event+0x38>)
   1e73e:	6818      	ldr	r0, [r3, #0]
   1e740:	f7ee fabb 	bl	ccba <os_eventq_put>
}
   1e744:	bd10      	pop	{r4, pc}
        ble_hci_trans_buf_free(hci_evt);
   1e746:	4620      	mov	r0, r4
   1e748:	f007 fcc0 	bl	260cc <ble_hci_trans_buf_free>
   1e74c:	e7fa      	b.n	1e744 <ble_hs_enqueue_hci_event+0x24>
   1e74e:	bf00      	nop
   1e750:	2000462c 	.word	0x2000462c
   1e754:	0001e43d 	.word	0x0001e43d
   1e758:	20002cb8 	.word	0x20002cb8

0001e75c <ble_hs_sched_reset>:
{
   1e75c:	b508      	push	{r3, lr}
    ble_hs_reset_reason = reason;
   1e75e:	4b04      	ldr	r3, [pc, #16]	; (1e770 <ble_hs_sched_reset+0x14>)
   1e760:	6018      	str	r0, [r3, #0]
   1e762:	4904      	ldr	r1, [pc, #16]	; (1e774 <ble_hs_sched_reset+0x18>)
   1e764:	4b04      	ldr	r3, [pc, #16]	; (1e778 <ble_hs_sched_reset+0x1c>)
   1e766:	6818      	ldr	r0, [r3, #0]
   1e768:	f7ee faa7 	bl	ccba <os_eventq_put>
}
   1e76c:	bd08      	pop	{r3, pc}
   1e76e:	bf00      	nop
   1e770:	20002d6c 	.word	0x20002d6c
   1e774:	20002c78 	.word	0x20002c78
   1e778:	20002cb8 	.word	0x20002cb8

0001e77c <ble_hs_hw_error>:
{
   1e77c:	b508      	push	{r3, lr}
    ble_hs_sched_reset(BLE_HS_HW_ERR(hw_code));
   1e77e:	f500 60c0 	add.w	r0, r0, #1536	; 0x600
   1e782:	f7ff ffeb 	bl	1e75c <ble_hs_sched_reset>
}
   1e786:	bd08      	pop	{r3, pc}

0001e788 <ble_hs_start>:
{
   1e788:	b510      	push	{r4, lr}
    ble_hs_lock();
   1e78a:	f7ff fecb 	bl	1e524 <ble_hs_lock>
    switch (ble_hs_enabled_state) {
   1e78e:	4b19      	ldr	r3, [pc, #100]	; (1e7f4 <ble_hs_start+0x6c>)
   1e790:	781b      	ldrb	r3, [r3, #0]
   1e792:	2b01      	cmp	r3, #1
   1e794:	d029      	beq.n	1e7ea <ble_hs_start+0x62>
   1e796:	b133      	cbz	r3, 1e7a6 <ble_hs_start+0x1e>
   1e798:	2b02      	cmp	r3, #2
   1e79a:	d11c      	bne.n	1e7d6 <ble_hs_start+0x4e>
    ble_hs_unlock();
   1e79c:	f7ff fec6 	bl	1e52c <ble_hs_unlock>
        rc = BLE_HS_EALREADY;
   1e7a0:	2402      	movs	r4, #2
}
   1e7a2:	4620      	mov	r0, r4
   1e7a4:	bd10      	pop	{r4, pc}
        ble_hs_enabled_state = BLE_HS_ENABLED_STATE_ON;
   1e7a6:	4b13      	ldr	r3, [pc, #76]	; (1e7f4 <ble_hs_start+0x6c>)
   1e7a8:	2202      	movs	r2, #2
   1e7aa:	701a      	strb	r2, [r3, #0]
    ble_hs_unlock();
   1e7ac:	f7ff febe 	bl	1e52c <ble_hs_unlock>
    return os_sched_get_current_task();
   1e7b0:	f7ee fd7c 	bl	d2ac <os_sched_get_current_task>
    ble_hs_parent_task = ble_npl_get_current_task_id();
   1e7b4:	4b10      	ldr	r3, [pc, #64]	; (1e7f8 <ble_hs_start+0x70>)
   1e7b6:	6018      	str	r0, [r3, #0]
    os_callout_init(&co->co, &evq->evq, (os_event_fn *)ev_cb, ev_arg);
   1e7b8:	2300      	movs	r3, #0
   1e7ba:	4a10      	ldr	r2, [pc, #64]	; (1e7fc <ble_hs_start+0x74>)
   1e7bc:	4910      	ldr	r1, [pc, #64]	; (1e800 <ble_hs_start+0x78>)
   1e7be:	6809      	ldr	r1, [r1, #0]
   1e7c0:	4810      	ldr	r0, [pc, #64]	; (1e804 <ble_hs_start+0x7c>)
   1e7c2:	f7ee f8f3 	bl	c9ac <os_callout_init>
    rc = ble_gatts_start();
   1e7c6:	f7ff fb75 	bl	1deb4 <ble_gatts_start>
    if (rc != 0) {
   1e7ca:	4604      	mov	r4, r0
   1e7cc:	2800      	cmp	r0, #0
   1e7ce:	d1e8      	bne.n	1e7a2 <ble_hs_start+0x1a>
    ble_hs_sync();
   1e7d0:	f7ff ff12 	bl	1e5f8 <ble_hs_sync>
    return 0;
   1e7d4:	e7e5      	b.n	1e7a2 <ble_hs_start+0x1a>
        assert(0);
   1e7d6:	f7ed fd07 	bl	c1e8 <hal_debugger_connected>
   1e7da:	b100      	cbz	r0, 1e7de <ble_hs_start+0x56>
   1e7dc:	be01      	bkpt	0x0001
   1e7de:	2300      	movs	r3, #0
   1e7e0:	461a      	mov	r2, r3
   1e7e2:	4619      	mov	r1, r3
   1e7e4:	4618      	mov	r0, r3
   1e7e6:	f7ed ff39 	bl	c65c <__assert_func>
    ble_hs_unlock();
   1e7ea:	f7ff fe9f 	bl	1e52c <ble_hs_unlock>
        rc = BLE_HS_EBUSY;
   1e7ee:	240f      	movs	r4, #15
   1e7f0:	e7d7      	b.n	1e7a2 <ble_hs_start+0x1a>
   1e7f2:	bf00      	nop
   1e7f4:	2000464e 	.word	0x2000464e
   1e7f8:	20002d68 	.word	0x20002d68
   1e7fc:	0001e6c1 	.word	0x0001e6c1
   1e800:	20002cb8 	.word	0x20002cb8
   1e804:	20002d88 	.word	0x20002d88

0001e808 <ble_hs_event_start_stage2>:
{
   1e808:	b508      	push	{r3, lr}
    rc = ble_hs_start();
   1e80a:	f7ff ffbd 	bl	1e788 <ble_hs_start>
    assert(rc == 0);
   1e80e:	b900      	cbnz	r0, 1e812 <ble_hs_event_start_stage2+0xa>
}
   1e810:	bd08      	pop	{r3, pc}
    assert(rc == 0);
   1e812:	f7ed fce9 	bl	c1e8 <hal_debugger_connected>
   1e816:	b100      	cbz	r0, 1e81a <ble_hs_event_start_stage2+0x12>
   1e818:	be01      	bkpt	0x0001
   1e81a:	2300      	movs	r3, #0
   1e81c:	461a      	mov	r2, r3
   1e81e:	4619      	mov	r1, r3
   1e820:	4618      	mov	r0, r3
   1e822:	f7ed ff1b 	bl	c65c <__assert_func>

0001e826 <ble_hs_tx_data>:
 *
 * @return                      0 on success; nonzero on failure.
 */
int
ble_hs_tx_data(struct os_mbuf *om)
{
   1e826:	b508      	push	{r3, lr}
#if BLE_MONITOR
    ble_monitor_send_om(BLE_MONITOR_OPCODE_ACL_TX_PKT, om);
#endif

    return ble_hci_trans_hs_acl_tx(om);
   1e828:	f007 fbf6 	bl	26018 <ble_hci_trans_hs_acl_tx>
}
   1e82c:	bd08      	pop	{r3, pc}
	...

0001e830 <ble_hs_init>:

void
ble_hs_init(void)
{
   1e830:	b510      	push	{r4, lr}
   1e832:	b082      	sub	sp, #8
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1e834:	4b80      	ldr	r3, [pc, #512]	; (1ea38 <ble_hs_init+0x208>)
   1e836:	781b      	ldrb	r3, [r3, #0]
   1e838:	2b00      	cmp	r3, #0
   1e83a:	d070      	beq.n	1e91e <ble_hs_init+0xee>

    /* Create memory pool of OS events */
    rc = os_mempool_init(&ble_hs_hci_ev_pool, BLE_HS_HCI_EVT_COUNT,
   1e83c:	4b7f      	ldr	r3, [pc, #508]	; (1ea3c <ble_hs_init+0x20c>)
   1e83e:	9300      	str	r3, [sp, #0]
   1e840:	4b7f      	ldr	r3, [pc, #508]	; (1ea40 <ble_hs_init+0x210>)
   1e842:	2210      	movs	r2, #16
   1e844:	210a      	movs	r1, #10
   1e846:	487f      	ldr	r0, [pc, #508]	; (1ea44 <ble_hs_init+0x214>)
   1e848:	f7ee fb2e 	bl	cea8 <os_mempool_init>
                         sizeof (struct ble_npl_event), ble_hs_hci_os_event_buf,
                         "ble_hs_hci_ev_pool");
    SYSINIT_PANIC_ASSERT(rc == 0);
   1e84c:	2800      	cmp	r0, #0
   1e84e:	d170      	bne.n	1e932 <ble_hs_init+0x102>

    /* These get initialized here to allow unit tests to run without a zeroed
     * bss.
     */
    ble_hs_reset_reason = 0;
   1e850:	2300      	movs	r3, #0
   1e852:	4a7d      	ldr	r2, [pc, #500]	; (1ea48 <ble_hs_init+0x218>)
   1e854:	6013      	str	r3, [r2, #0]
    ble_hs_enabled_state = BLE_HS_ENABLED_STATE_OFF;
   1e856:	4a7d      	ldr	r2, [pc, #500]	; (1ea4c <ble_hs_init+0x21c>)
   1e858:	7013      	strb	r3, [r2, #0]
    memset(ev, 0, sizeof(*ev));
   1e85a:	4a7d      	ldr	r2, [pc, #500]	; (1ea50 <ble_hs_init+0x220>)
   1e85c:	6013      	str	r3, [r2, #0]
   1e85e:	6093      	str	r3, [r2, #8]
   1e860:	60d3      	str	r3, [r2, #12]
    ev->ev.ev_cb = (os_event_fn *)fn;
   1e862:	497c      	ldr	r1, [pc, #496]	; (1ea54 <ble_hs_init+0x224>)
   1e864:	6051      	str	r1, [r2, #4]
    memset(ev, 0, sizeof(*ev));
   1e866:	4a7c      	ldr	r2, [pc, #496]	; (1ea58 <ble_hs_init+0x228>)
   1e868:	6013      	str	r3, [r2, #0]
   1e86a:	6093      	str	r3, [r2, #8]
   1e86c:	60d3      	str	r3, [r2, #12]
    ev->ev.ev_cb = (os_event_fn *)fn;
   1e86e:	497b      	ldr	r1, [pc, #492]	; (1ea5c <ble_hs_init+0x22c>)
   1e870:	6051      	str	r1, [r2, #4]
    memset(ev, 0, sizeof(*ev));
   1e872:	4a7b      	ldr	r2, [pc, #492]	; (1ea60 <ble_hs_init+0x230>)
   1e874:	6013      	str	r3, [r2, #0]
   1e876:	6093      	str	r3, [r2, #8]
   1e878:	60d3      	str	r3, [r2, #12]
    ev->ev.ev_cb = (os_event_fn *)fn;
   1e87a:	497a      	ldr	r1, [pc, #488]	; (1ea64 <ble_hs_init+0x234>)
   1e87c:	6051      	str	r1, [r2, #4]
    memset(ev, 0, sizeof(*ev));
   1e87e:	4a7a      	ldr	r2, [pc, #488]	; (1ea68 <ble_hs_init+0x238>)
   1e880:	6013      	str	r3, [r2, #0]
   1e882:	6093      	str	r3, [r2, #8]
   1e884:	60d3      	str	r3, [r2, #12]
    ev->ev.ev_cb = (os_event_fn *)fn;
   1e886:	4b79      	ldr	r3, [pc, #484]	; (1ea6c <ble_hs_init+0x23c>)
   1e888:	6053      	str	r3, [r2, #4]
    ble_npl_event_init(&ble_hs_ev_start_stage1, ble_hs_event_start_stage1,
                       NULL);
    ble_npl_event_init(&ble_hs_ev_start_stage2, ble_hs_event_start_stage2,
                       NULL);

    ble_hs_hci_init();
   1e88a:	f000 ffc3 	bl	1f814 <ble_hs_hci_init>

    rc = ble_hs_conn_init();
   1e88e:	f000 fdbd 	bl	1f40c <ble_hs_conn_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1e892:	2800      	cmp	r0, #0
   1e894:	d15a      	bne.n	1e94c <ble_hs_init+0x11c>
#if MYNEWT_VAL(BLE_PERIODIC_ADV)
    rc = ble_hs_periodic_sync_init();
    SYSINIT_PANIC_ASSERT(rc == 0);
#endif

    rc = ble_l2cap_init();
   1e896:	f002 f86b 	bl	20970 <ble_l2cap_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1e89a:	2800      	cmp	r0, #0
   1e89c:	d163      	bne.n	1e966 <ble_hs_init+0x136>

    rc = ble_att_init();
   1e89e:	f005 f9d9 	bl	23c54 <ble_att_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1e8a2:	2800      	cmp	r0, #0
   1e8a4:	d16c      	bne.n	1e980 <ble_hs_init+0x150>

    rc = ble_att_svr_init();
   1e8a6:	f007 f819 	bl	258dc <ble_att_svr_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1e8aa:	2800      	cmp	r0, #0
   1e8ac:	d175      	bne.n	1e99a <ble_hs_init+0x16a>

    rc = ble_gap_init();
   1e8ae:	f7fd f8c9 	bl	1ba44 <ble_gap_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1e8b2:	2800      	cmp	r0, #0
   1e8b4:	d17e      	bne.n	1e9b4 <ble_hs_init+0x184>

    rc = ble_gattc_init();
   1e8b6:	f7fe fcf5 	bl	1d2a4 <ble_gattc_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1e8ba:	2800      	cmp	r0, #0
   1e8bc:	f040 8087 	bne.w	1e9ce <ble_hs_init+0x19e>

    rc = ble_gatts_init();
   1e8c0:	f7ff fd76 	bl	1e3b0 <ble_gatts_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1e8c4:	2800      	cmp	r0, #0
   1e8c6:	f040 808f 	bne.w	1e9e8 <ble_hs_init+0x1b8>

    ble_hs_stop_init();
   1e8ca:	f001 ff17 	bl	206fc <ble_hs_stop_init>

    ble_mqueue_init(&ble_hs_rx_q, ble_hs_event_rx_data, NULL);
   1e8ce:	2200      	movs	r2, #0
   1e8d0:	4967      	ldr	r1, [pc, #412]	; (1ea70 <ble_hs_init+0x240>)
   1e8d2:	4868      	ldr	r0, [pc, #416]	; (1ea74 <ble_hs_init+0x244>)
   1e8d4:	f001 fc6a 	bl	201ac <ble_mqueue_init>

    rc = stats_init_and_reg(
   1e8d8:	4b67      	ldr	r3, [pc, #412]	; (1ea78 <ble_hs_init+0x248>)
   1e8da:	9301      	str	r3, [sp, #4]
   1e8dc:	2300      	movs	r3, #0
   1e8de:	9300      	str	r3, [sp, #0]
   1e8e0:	220b      	movs	r2, #11
   1e8e2:	2104      	movs	r1, #4
   1e8e4:	4865      	ldr	r0, [pc, #404]	; (1ea7c <ble_hs_init+0x24c>)
   1e8e6:	f7f1 fbc3 	bl	10070 <stats_init_and_reg>
        STATS_HDR(ble_hs_stats), STATS_SIZE_INIT_PARMS(ble_hs_stats,
        STATS_SIZE_32), STATS_NAME_INIT_PARMS(ble_hs_stats), "ble_hs");
    SYSINIT_PANIC_ASSERT(rc == 0);
   1e8ea:	2800      	cmp	r0, #0
   1e8ec:	f040 8089 	bne.w	1ea02 <ble_hs_init+0x1d2>
    return (ble_npl_error_t)os_mutex_init(&mu->mu);
   1e8f0:	4863      	ldr	r0, [pc, #396]	; (1ea80 <ble_hs_init+0x250>)
   1e8f2:	f7ef fc5b 	bl	e1ac <os_mutex_init>

    rc = ble_npl_mutex_init(&ble_hs_mutex);
    SYSINIT_PANIC_ASSERT(rc == 0);
   1e8f6:	2800      	cmp	r0, #0
   1e8f8:	f040 8090 	bne.w	1ea1c <ble_hs_init+0x1ec>
#if MYNEWT_VAL(BLE_HS_DEBUG)
    ble_hs_dbg_mutex_locked = 0;
#endif

#ifdef MYNEWT
    ble_hs_evq_set((struct ble_npl_eventq *)os_eventq_dflt_get());
   1e8fc:	f7ee fa94 	bl	ce28 <os_eventq_dflt_get>
   1e900:	f7ff fde6 	bl	1e4d0 <ble_hs_evq_set>
#else
    ble_hs_evq_set(nimble_port_get_dflt_eventq());
#endif

    /* Configure the HCI transport to communicate with a host. */
    ble_hci_trans_cfg_hs(ble_hs_hci_rx_evt, NULL, ble_hs_rx_data, NULL);
   1e904:	2300      	movs	r3, #0
   1e906:	4a5f      	ldr	r2, [pc, #380]	; (1ea84 <ble_hs_init+0x254>)
   1e908:	4619      	mov	r1, r3
   1e90a:	485f      	ldr	r0, [pc, #380]	; (1ea88 <ble_hs_init+0x258>)
   1e90c:	f007 fb30 	bl	25f70 <ble_hci_trans_cfg_hs>
     * queue ensures the event won't run until the end of main().  This allows
     * the application to configure this package in the meantime.
     */
#if MYNEWT_VAL(BLE_HS_AUTO_START)
#ifdef MYNEWT
    ble_npl_eventq_put((struct ble_npl_eventq *)os_eventq_dflt_get(),
   1e910:	f7ee fa8a 	bl	ce28 <os_eventq_dflt_get>
    os_eventq_put(&evq->evq, &ev->ev);
   1e914:	4952      	ldr	r1, [pc, #328]	; (1ea60 <ble_hs_init+0x230>)
   1e916:	f7ee f9d0 	bl	ccba <os_eventq_put>
#endif

#if BLE_MONITOR
    ble_monitor_new_index(0, (uint8_t[6]){ }, "nimble0");
#endif
}
   1e91a:	b002      	add	sp, #8
   1e91c:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   1e91e:	f7ed fc63 	bl	c1e8 <hal_debugger_connected>
   1e922:	b100      	cbz	r0, 1e926 <ble_hs_init+0xf6>
   1e924:	be01      	bkpt	0x0001
   1e926:	2300      	movs	r3, #0
   1e928:	461a      	mov	r2, r3
   1e92a:	4619      	mov	r1, r3
   1e92c:	4618      	mov	r0, r3
   1e92e:	f7ed fe95 	bl	c65c <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1e932:	f7ed fc59 	bl	c1e8 <hal_debugger_connected>
   1e936:	b100      	cbz	r0, 1e93a <ble_hs_init+0x10a>
   1e938:	be01      	bkpt	0x0001
   1e93a:	2000      	movs	r0, #0
   1e93c:	9000      	str	r0, [sp, #0]
   1e93e:	4b53      	ldr	r3, [pc, #332]	; (1ea8c <ble_hs_init+0x25c>)
   1e940:	681c      	ldr	r4, [r3, #0]
   1e942:	4603      	mov	r3, r0
   1e944:	4602      	mov	r2, r0
   1e946:	4601      	mov	r1, r0
   1e948:	47a0      	blx	r4
   1e94a:	e781      	b.n	1e850 <ble_hs_init+0x20>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1e94c:	f7ed fc4c 	bl	c1e8 <hal_debugger_connected>
   1e950:	b100      	cbz	r0, 1e954 <ble_hs_init+0x124>
   1e952:	be01      	bkpt	0x0001
   1e954:	2000      	movs	r0, #0
   1e956:	9000      	str	r0, [sp, #0]
   1e958:	4b4c      	ldr	r3, [pc, #304]	; (1ea8c <ble_hs_init+0x25c>)
   1e95a:	681c      	ldr	r4, [r3, #0]
   1e95c:	4603      	mov	r3, r0
   1e95e:	4602      	mov	r2, r0
   1e960:	4601      	mov	r1, r0
   1e962:	47a0      	blx	r4
   1e964:	e797      	b.n	1e896 <ble_hs_init+0x66>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1e966:	f7ed fc3f 	bl	c1e8 <hal_debugger_connected>
   1e96a:	b100      	cbz	r0, 1e96e <ble_hs_init+0x13e>
   1e96c:	be01      	bkpt	0x0001
   1e96e:	2000      	movs	r0, #0
   1e970:	9000      	str	r0, [sp, #0]
   1e972:	4b46      	ldr	r3, [pc, #280]	; (1ea8c <ble_hs_init+0x25c>)
   1e974:	681c      	ldr	r4, [r3, #0]
   1e976:	4603      	mov	r3, r0
   1e978:	4602      	mov	r2, r0
   1e97a:	4601      	mov	r1, r0
   1e97c:	47a0      	blx	r4
   1e97e:	e78e      	b.n	1e89e <ble_hs_init+0x6e>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1e980:	f7ed fc32 	bl	c1e8 <hal_debugger_connected>
   1e984:	b100      	cbz	r0, 1e988 <ble_hs_init+0x158>
   1e986:	be01      	bkpt	0x0001
   1e988:	2000      	movs	r0, #0
   1e98a:	9000      	str	r0, [sp, #0]
   1e98c:	4b3f      	ldr	r3, [pc, #252]	; (1ea8c <ble_hs_init+0x25c>)
   1e98e:	681c      	ldr	r4, [r3, #0]
   1e990:	4603      	mov	r3, r0
   1e992:	4602      	mov	r2, r0
   1e994:	4601      	mov	r1, r0
   1e996:	47a0      	blx	r4
   1e998:	e785      	b.n	1e8a6 <ble_hs_init+0x76>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1e99a:	f7ed fc25 	bl	c1e8 <hal_debugger_connected>
   1e99e:	b100      	cbz	r0, 1e9a2 <ble_hs_init+0x172>
   1e9a0:	be01      	bkpt	0x0001
   1e9a2:	2000      	movs	r0, #0
   1e9a4:	9000      	str	r0, [sp, #0]
   1e9a6:	4b39      	ldr	r3, [pc, #228]	; (1ea8c <ble_hs_init+0x25c>)
   1e9a8:	681c      	ldr	r4, [r3, #0]
   1e9aa:	4603      	mov	r3, r0
   1e9ac:	4602      	mov	r2, r0
   1e9ae:	4601      	mov	r1, r0
   1e9b0:	47a0      	blx	r4
   1e9b2:	e77c      	b.n	1e8ae <ble_hs_init+0x7e>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1e9b4:	f7ed fc18 	bl	c1e8 <hal_debugger_connected>
   1e9b8:	b100      	cbz	r0, 1e9bc <ble_hs_init+0x18c>
   1e9ba:	be01      	bkpt	0x0001
   1e9bc:	2000      	movs	r0, #0
   1e9be:	9000      	str	r0, [sp, #0]
   1e9c0:	4b32      	ldr	r3, [pc, #200]	; (1ea8c <ble_hs_init+0x25c>)
   1e9c2:	681c      	ldr	r4, [r3, #0]
   1e9c4:	4603      	mov	r3, r0
   1e9c6:	4602      	mov	r2, r0
   1e9c8:	4601      	mov	r1, r0
   1e9ca:	47a0      	blx	r4
   1e9cc:	e773      	b.n	1e8b6 <ble_hs_init+0x86>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1e9ce:	f7ed fc0b 	bl	c1e8 <hal_debugger_connected>
   1e9d2:	b100      	cbz	r0, 1e9d6 <ble_hs_init+0x1a6>
   1e9d4:	be01      	bkpt	0x0001
   1e9d6:	2000      	movs	r0, #0
   1e9d8:	9000      	str	r0, [sp, #0]
   1e9da:	4b2c      	ldr	r3, [pc, #176]	; (1ea8c <ble_hs_init+0x25c>)
   1e9dc:	681c      	ldr	r4, [r3, #0]
   1e9de:	4603      	mov	r3, r0
   1e9e0:	4602      	mov	r2, r0
   1e9e2:	4601      	mov	r1, r0
   1e9e4:	47a0      	blx	r4
   1e9e6:	e76b      	b.n	1e8c0 <ble_hs_init+0x90>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1e9e8:	f7ed fbfe 	bl	c1e8 <hal_debugger_connected>
   1e9ec:	b100      	cbz	r0, 1e9f0 <ble_hs_init+0x1c0>
   1e9ee:	be01      	bkpt	0x0001
   1e9f0:	2000      	movs	r0, #0
   1e9f2:	9000      	str	r0, [sp, #0]
   1e9f4:	4b25      	ldr	r3, [pc, #148]	; (1ea8c <ble_hs_init+0x25c>)
   1e9f6:	681c      	ldr	r4, [r3, #0]
   1e9f8:	4603      	mov	r3, r0
   1e9fa:	4602      	mov	r2, r0
   1e9fc:	4601      	mov	r1, r0
   1e9fe:	47a0      	blx	r4
   1ea00:	e763      	b.n	1e8ca <ble_hs_init+0x9a>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1ea02:	f7ed fbf1 	bl	c1e8 <hal_debugger_connected>
   1ea06:	b100      	cbz	r0, 1ea0a <ble_hs_init+0x1da>
   1ea08:	be01      	bkpt	0x0001
   1ea0a:	2000      	movs	r0, #0
   1ea0c:	9000      	str	r0, [sp, #0]
   1ea0e:	4b1f      	ldr	r3, [pc, #124]	; (1ea8c <ble_hs_init+0x25c>)
   1ea10:	681c      	ldr	r4, [r3, #0]
   1ea12:	4603      	mov	r3, r0
   1ea14:	4602      	mov	r2, r0
   1ea16:	4601      	mov	r1, r0
   1ea18:	47a0      	blx	r4
   1ea1a:	e769      	b.n	1e8f0 <ble_hs_init+0xc0>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1ea1c:	f7ed fbe4 	bl	c1e8 <hal_debugger_connected>
   1ea20:	b100      	cbz	r0, 1ea24 <ble_hs_init+0x1f4>
   1ea22:	be01      	bkpt	0x0001
   1ea24:	2000      	movs	r0, #0
   1ea26:	9000      	str	r0, [sp, #0]
   1ea28:	4b18      	ldr	r3, [pc, #96]	; (1ea8c <ble_hs_init+0x25c>)
   1ea2a:	681c      	ldr	r4, [r3, #0]
   1ea2c:	4603      	mov	r3, r0
   1ea2e:	4602      	mov	r2, r0
   1ea30:	4601      	mov	r1, r0
   1ea32:	47a0      	blx	r4
   1ea34:	e762      	b.n	1e8fc <ble_hs_init+0xcc>
   1ea36:	bf00      	nop
   1ea38:	20003bd8 	.word	0x20003bd8
   1ea3c:	0002b4f8 	.word	0x0002b4f8
   1ea40:	20002cbc 	.word	0x20002cbc
   1ea44:	2000462c 	.word	0x2000462c
   1ea48:	20002d6c 	.word	0x20002d6c
   1ea4c:	2000464e 	.word	0x2000464e
   1ea50:	20002ca8 	.word	0x20002ca8
   1ea54:	0001e4a1 	.word	0x0001e4a1
   1ea58:	20002c78 	.word	0x20002c78
   1ea5c:	0001e6b9 	.word	0x0001e6b9
   1ea60:	20002c88 	.word	0x20002c88
   1ea64:	0001e4c9 	.word	0x0001e4c9
   1ea68:	20002c98 	.word	0x20002c98
   1ea6c:	0001e809 	.word	0x0001e809
   1ea70:	0001e551 	.word	0x0001e551
   1ea74:	20002d70 	.word	0x20002d70
   1ea78:	0002b50c 	.word	0x0002b50c
   1ea7c:	200045f4 	.word	0x200045f4
   1ea80:	20002d5c 	.word	0x20002d5c
   1ea84:	0001e471 	.word	0x0001e471
   1ea88:	0001f6f9 	.word	0x0001f6f9
   1ea8c:	20000144 	.word	0x20000144

0001ea90 <find_field_func>:
static int
find_field_func(const struct ble_hs_adv_field *field, void *user_data)
{
    struct find_field_data *ffd = user_data;

    if (field->type != ffd->type) {
   1ea90:	7842      	ldrb	r2, [r0, #1]
   1ea92:	780b      	ldrb	r3, [r1, #0]
   1ea94:	429a      	cmp	r2, r3
   1ea96:	d001      	beq.n	1ea9c <find_field_func+0xc>
        return BLE_HS_EAGAIN;
   1ea98:	2001      	movs	r0, #1
    }

    ffd->field = field;

    return 0;
}
   1ea9a:	4770      	bx	lr
    ffd->field = field;
   1ea9c:	6048      	str	r0, [r1, #4]
    return 0;
   1ea9e:	2000      	movs	r0, #0
   1eaa0:	4770      	bx	lr

0001eaa2 <ble_hs_adv_set_hdr>:
{
   1eaa2:	b530      	push	{r4, r5, lr}
   1eaa4:	b083      	sub	sp, #12
   1eaa6:	9d06      	ldr	r5, [sp, #24]
   1eaa8:	9c07      	ldr	r4, [sp, #28]
   1eaaa:	f88d 0007 	strb.w	r0, [sp, #7]
   1eaae:	f88d 1006 	strb.w	r1, [sp, #6]
    if (om ) {
   1eab2:	b1ac      	cbz	r4, 1eae0 <ble_hs_adv_set_hdr+0x3e>
        data_len++;
   1eab4:	b2cb      	uxtb	r3, r1
   1eab6:	3301      	adds	r3, #1
   1eab8:	a902      	add	r1, sp, #8
   1eaba:	f801 3d02 	strb.w	r3, [r1, #-2]!
        rc = os_mbuf_append(om, &data_len, sizeof(data_len));
   1eabe:	2201      	movs	r2, #1
   1eac0:	4620      	mov	r0, r4
   1eac2:	f7ee ffba 	bl	da3a <os_mbuf_append>
        if (rc) {
   1eac6:	4603      	mov	r3, r0
   1eac8:	b110      	cbz	r0, 1ead0 <ble_hs_adv_set_hdr+0x2e>
}
   1eaca:	4618      	mov	r0, r3
   1eacc:	b003      	add	sp, #12
   1eace:	bd30      	pop	{r4, r5, pc}
        return os_mbuf_append(om, &type, sizeof(type));
   1ead0:	2201      	movs	r2, #1
   1ead2:	f10d 0107 	add.w	r1, sp, #7
   1ead6:	4620      	mov	r0, r4
   1ead8:	f7ee ffaf 	bl	da3a <os_mbuf_append>
   1eadc:	4603      	mov	r3, r0
   1eade:	e7f4      	b.n	1eaca <ble_hs_adv_set_hdr+0x28>
    if (*dst_len + 2 + data_len > max_len) {
   1eae0:	782c      	ldrb	r4, [r5, #0]
   1eae2:	1ca0      	adds	r0, r4, #2
   1eae4:	f89d 1006 	ldrb.w	r1, [sp, #6]
   1eae8:	4408      	add	r0, r1
   1eaea:	4290      	cmp	r0, r2
   1eaec:	dc0b      	bgt.n	1eb06 <ble_hs_adv_set_hdr+0x64>
    dst[*dst_len] = data_len + 1;
   1eaee:	3101      	adds	r1, #1
   1eaf0:	5519      	strb	r1, [r3, r4]
    dst[*dst_len + 1] = type;
   1eaf2:	782a      	ldrb	r2, [r5, #0]
   1eaf4:	3201      	adds	r2, #1
   1eaf6:	f89d 1007 	ldrb.w	r1, [sp, #7]
   1eafa:	5499      	strb	r1, [r3, r2]
    *dst_len += 2;
   1eafc:	782b      	ldrb	r3, [r5, #0]
   1eafe:	3302      	adds	r3, #2
   1eb00:	702b      	strb	r3, [r5, #0]
    return 0;
   1eb02:	2300      	movs	r3, #0
   1eb04:	e7e1      	b.n	1eaca <ble_hs_adv_set_hdr+0x28>
        return BLE_HS_EMSGSIZE;
   1eb06:	2304      	movs	r3, #4
   1eb08:	e7df      	b.n	1eaca <ble_hs_adv_set_hdr+0x28>

0001eb0a <ble_hs_adv_set_flat_mbuf>:
{
   1eb0a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1eb0e:	b082      	sub	sp, #8
   1eb10:	460f      	mov	r7, r1
   1eb12:	4691      	mov	r9, r2
   1eb14:	469a      	mov	sl, r3
   1eb16:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   1eb18:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    rc = ble_hs_adv_set_hdr(type, data_len, max_len, dst, dst_len, om);
   1eb1a:	b2ce      	uxtb	r6, r1
   1eb1c:	9401      	str	r4, [sp, #4]
   1eb1e:	9500      	str	r5, [sp, #0]
   1eb20:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
   1eb24:	4631      	mov	r1, r6
   1eb26:	f7ff ffbc 	bl	1eaa2 <ble_hs_adv_set_hdr>
    if (rc != 0) {
   1eb2a:	4680      	mov	r8, r0
   1eb2c:	b930      	cbnz	r0, 1eb3c <ble_hs_adv_set_flat_mbuf+0x32>
    if (om) {
   1eb2e:	b14c      	cbz	r4, 1eb44 <ble_hs_adv_set_flat_mbuf+0x3a>
        return os_mbuf_append(om, data, data_len);
   1eb30:	b2ba      	uxth	r2, r7
   1eb32:	4649      	mov	r1, r9
   1eb34:	4620      	mov	r0, r4
   1eb36:	f7ee ff80 	bl	da3a <os_mbuf_append>
   1eb3a:	4680      	mov	r8, r0
}
   1eb3c:	4640      	mov	r0, r8
   1eb3e:	b002      	add	sp, #8
   1eb40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    memcpy(dst + *dst_len, data, data_len);
   1eb44:	7828      	ldrb	r0, [r5, #0]
   1eb46:	463a      	mov	r2, r7
   1eb48:	4649      	mov	r1, r9
   1eb4a:	4450      	add	r0, sl
   1eb4c:	f7ef fc90 	bl	e470 <memcpy>
    *dst_len += data_len;
   1eb50:	782b      	ldrb	r3, [r5, #0]
   1eb52:	441e      	add	r6, r3
   1eb54:	702e      	strb	r6, [r5, #0]
    return 0;
   1eb56:	e7f1      	b.n	1eb3c <ble_hs_adv_set_flat_mbuf+0x32>

0001eb58 <ble_hs_adv_set_array_uuid16>:
{
   1eb58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1eb5c:	b082      	sub	sp, #8
   1eb5e:	460e      	mov	r6, r1
   1eb60:	4690      	mov	r8, r2
   1eb62:	469a      	mov	sl, r3
   1eb64:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   1eb66:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    rc = ble_hs_adv_set_hdr(type, num_elems * 2, max_len, dst,
   1eb68:	0049      	lsls	r1, r1, #1
   1eb6a:	9501      	str	r5, [sp, #4]
   1eb6c:	9700      	str	r7, [sp, #0]
   1eb6e:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
   1eb72:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
   1eb76:	f7ff ff94 	bl	1eaa2 <ble_hs_adv_set_hdr>
    if (rc != 0) {
   1eb7a:	4681      	mov	r9, r0
   1eb7c:	b9b8      	cbnz	r0, 1ebae <ble_hs_adv_set_array_uuid16+0x56>
    for (i = 0; i < num_elems; i++) {
   1eb7e:	4604      	mov	r4, r0
   1eb80:	e009      	b.n	1eb96 <ble_hs_adv_set_array_uuid16+0x3e>
            ble_uuid_flat(&elems[i].u, dst + *dst_len);
   1eb82:	7839      	ldrb	r1, [r7, #0]
   1eb84:	4451      	add	r1, sl
   1eb86:	eb08 0084 	add.w	r0, r8, r4, lsl #2
   1eb8a:	f004 fd69 	bl	23660 <ble_uuid_flat>
            *dst_len += 2;
   1eb8e:	783b      	ldrb	r3, [r7, #0]
   1eb90:	3302      	adds	r3, #2
   1eb92:	703b      	strb	r3, [r7, #0]
    for (i = 0; i < num_elems; i++) {
   1eb94:	3401      	adds	r4, #1
   1eb96:	42a6      	cmp	r6, r4
   1eb98:	dd09      	ble.n	1ebae <ble_hs_adv_set_array_uuid16+0x56>
        if (om) {
   1eb9a:	2d00      	cmp	r5, #0
   1eb9c:	d0f1      	beq.n	1eb82 <ble_hs_adv_set_array_uuid16+0x2a>
            rc = ble_uuid_to_mbuf(&elems[i].u, om);
   1eb9e:	4629      	mov	r1, r5
   1eba0:	eb08 0084 	add.w	r0, r8, r4, lsl #2
   1eba4:	f004 fd8b 	bl	236be <ble_uuid_to_mbuf>
            if (rc) {
   1eba8:	2800      	cmp	r0, #0
   1ebaa:	d0f3      	beq.n	1eb94 <ble_hs_adv_set_array_uuid16+0x3c>
                return rc;
   1ebac:	4681      	mov	r9, r0
}
   1ebae:	4648      	mov	r0, r9
   1ebb0:	b002      	add	sp, #8
   1ebb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001ebb6 <ble_hs_adv_set_array_uuid128>:
{
   1ebb6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ebba:	b082      	sub	sp, #8
   1ebbc:	460e      	mov	r6, r1
   1ebbe:	4690      	mov	r8, r2
   1ebc0:	469a      	mov	sl, r3
   1ebc2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   1ebc4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    rc = ble_hs_adv_set_hdr(type, num_elems * 16, max_len, dst,
   1ebc6:	0109      	lsls	r1, r1, #4
   1ebc8:	9501      	str	r5, [sp, #4]
   1ebca:	9700      	str	r7, [sp, #0]
   1ebcc:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
   1ebd0:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
   1ebd4:	f7ff ff65 	bl	1eaa2 <ble_hs_adv_set_hdr>
    if (rc != 0) {
   1ebd8:	4681      	mov	r9, r0
   1ebda:	b9c8      	cbnz	r0, 1ec10 <ble_hs_adv_set_array_uuid128+0x5a>
    for (i = 0; i < num_elems; i++) {
   1ebdc:	4604      	mov	r4, r0
   1ebde:	e00a      	b.n	1ebf6 <ble_hs_adv_set_array_uuid128+0x40>
            ble_uuid_flat(&elems[i].u, dst + *dst_len);
   1ebe0:	eb04 1004 	add.w	r0, r4, r4, lsl #4
   1ebe4:	7839      	ldrb	r1, [r7, #0]
   1ebe6:	4451      	add	r1, sl
   1ebe8:	4440      	add	r0, r8
   1ebea:	f004 fd39 	bl	23660 <ble_uuid_flat>
            *dst_len += 16;
   1ebee:	783b      	ldrb	r3, [r7, #0]
   1ebf0:	3310      	adds	r3, #16
   1ebf2:	703b      	strb	r3, [r7, #0]
    for (i = 0; i < num_elems; i++) {
   1ebf4:	3401      	adds	r4, #1
   1ebf6:	42a6      	cmp	r6, r4
   1ebf8:	dd0a      	ble.n	1ec10 <ble_hs_adv_set_array_uuid128+0x5a>
        if (om) {
   1ebfa:	2d00      	cmp	r5, #0
   1ebfc:	d0f0      	beq.n	1ebe0 <ble_hs_adv_set_array_uuid128+0x2a>
            rc = ble_uuid_to_mbuf(&elems[i].u, om);
   1ebfe:	eb04 1004 	add.w	r0, r4, r4, lsl #4
   1ec02:	4629      	mov	r1, r5
   1ec04:	4440      	add	r0, r8
   1ec06:	f004 fd5a 	bl	236be <ble_uuid_to_mbuf>
            if (rc) {
   1ec0a:	2800      	cmp	r0, #0
   1ec0c:	d0f2      	beq.n	1ebf4 <ble_hs_adv_set_array_uuid128+0x3e>
                return rc;
   1ec0e:	4681      	mov	r9, r0
}
   1ec10:	4648      	mov	r0, r9
   1ec12:	b002      	add	sp, #8
   1ec14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001ec18 <ble_hs_adv_set_array_uuid32>:
{
   1ec18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ec1c:	b084      	sub	sp, #16
   1ec1e:	460e      	mov	r6, r1
   1ec20:	4690      	mov	r8, r2
   1ec22:	469a      	mov	sl, r3
   1ec24:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   1ec26:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    rc = ble_hs_adv_set_hdr(type, num_elems * 4, max_len, dst,
   1ec28:	0089      	lsls	r1, r1, #2
   1ec2a:	9501      	str	r5, [sp, #4]
   1ec2c:	9700      	str	r7, [sp, #0]
   1ec2e:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
   1ec32:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
   1ec36:	f7ff ff34 	bl	1eaa2 <ble_hs_adv_set_hdr>
    if (rc != 0) {
   1ec3a:	4681      	mov	r9, r0
   1ec3c:	b9e8      	cbnz	r0, 1ec7a <ble_hs_adv_set_array_uuid32+0x62>
    for (i = 0; i < num_elems; i++) {
   1ec3e:	4604      	mov	r4, r0
   1ec40:	e00a      	b.n	1ec58 <ble_hs_adv_set_array_uuid32+0x40>
            put_le32(dst + *dst_len, elems[i].value);
   1ec42:	7838      	ldrb	r0, [r7, #0]
   1ec44:	eb08 03c4 	add.w	r3, r8, r4, lsl #3
   1ec48:	6859      	ldr	r1, [r3, #4]
   1ec4a:	4450      	add	r0, sl
   1ec4c:	f00a fd82 	bl	29754 <put_le32>
            *dst_len += 4;
   1ec50:	783b      	ldrb	r3, [r7, #0]
   1ec52:	3304      	adds	r3, #4
   1ec54:	703b      	strb	r3, [r7, #0]
    for (i = 0; i < num_elems; i++) {
   1ec56:	3401      	adds	r4, #1
   1ec58:	42a6      	cmp	r6, r4
   1ec5a:	dd0e      	ble.n	1ec7a <ble_hs_adv_set_array_uuid32+0x62>
        if (om) {
   1ec5c:	2d00      	cmp	r5, #0
   1ec5e:	d0f0      	beq.n	1ec42 <ble_hs_adv_set_array_uuid32+0x2a>
            uuid_le = htole32(elems[i].value);
   1ec60:	eb08 03c4 	add.w	r3, r8, r4, lsl #3
   1ec64:	685b      	ldr	r3, [r3, #4]
   1ec66:	a904      	add	r1, sp, #16
   1ec68:	f841 3d04 	str.w	r3, [r1, #-4]!
            rc = os_mbuf_append(om, &uuid_le, sizeof(uuid_le));
   1ec6c:	2204      	movs	r2, #4
   1ec6e:	4628      	mov	r0, r5
   1ec70:	f7ee fee3 	bl	da3a <os_mbuf_append>
            if (rc) {
   1ec74:	2800      	cmp	r0, #0
   1ec76:	d0ee      	beq.n	1ec56 <ble_hs_adv_set_array_uuid32+0x3e>
                return rc;
   1ec78:	4681      	mov	r9, r0
}
   1ec7a:	4648      	mov	r0, r9
   1ec7c:	b004      	add	sp, #16
   1ec7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001ec82 <ble_hs_adv_set_array16>:
{
   1ec82:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ec86:	b084      	sub	sp, #16
   1ec88:	460e      	mov	r6, r1
   1ec8a:	4690      	mov	r8, r2
   1ec8c:	469a      	mov	sl, r3
   1ec8e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   1ec90:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    rc = ble_hs_adv_set_hdr(type, num_elems * sizeof *elems, max_len, dst,
   1ec92:	0049      	lsls	r1, r1, #1
   1ec94:	9501      	str	r5, [sp, #4]
   1ec96:	9700      	str	r7, [sp, #0]
   1ec98:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
   1ec9c:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
   1eca0:	f7ff feff 	bl	1eaa2 <ble_hs_adv_set_hdr>
    if (rc != 0) {
   1eca4:	4681      	mov	r9, r0
   1eca6:	b9d8      	cbnz	r0, 1ece0 <ble_hs_adv_set_array16+0x5e>
    for (i = 0; i < num_elems; i++) {
   1eca8:	4604      	mov	r4, r0
   1ecaa:	e009      	b.n	1ecc0 <ble_hs_adv_set_array16+0x3e>
            put_le16(dst + *dst_len, elems[i]);
   1ecac:	7838      	ldrb	r0, [r7, #0]
   1ecae:	f838 1014 	ldrh.w	r1, [r8, r4, lsl #1]
   1ecb2:	4450      	add	r0, sl
   1ecb4:	f00a fd4a 	bl	2974c <put_le16>
            *dst_len += sizeof elems[i];
   1ecb8:	783b      	ldrb	r3, [r7, #0]
   1ecba:	3302      	adds	r3, #2
   1ecbc:	703b      	strb	r3, [r7, #0]
    for (i = 0; i < num_elems; i++) {
   1ecbe:	3401      	adds	r4, #1
   1ecc0:	42a6      	cmp	r6, r4
   1ecc2:	dd0d      	ble.n	1ece0 <ble_hs_adv_set_array16+0x5e>
        if (om) {
   1ecc4:	2d00      	cmp	r5, #0
   1ecc6:	d0f1      	beq.n	1ecac <ble_hs_adv_set_array16+0x2a>
            tmp = htole16(elems[i]);
   1ecc8:	f838 3014 	ldrh.w	r3, [r8, r4, lsl #1]
   1eccc:	a904      	add	r1, sp, #16
   1ecce:	f821 3d02 	strh.w	r3, [r1, #-2]!
            rc = os_mbuf_append(om, &tmp, sizeof(tmp));
   1ecd2:	2202      	movs	r2, #2
   1ecd4:	4628      	mov	r0, r5
   1ecd6:	f7ee feb0 	bl	da3a <os_mbuf_append>
            if (rc) {
   1ecda:	2800      	cmp	r0, #0
   1ecdc:	d0ef      	beq.n	1ecbe <ble_hs_adv_set_array16+0x3c>
                return rc;
   1ecde:	4681      	mov	r9, r0
}
   1ece0:	4648      	mov	r0, r9
   1ece2:	b004      	add	sp, #16
   1ece4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001ece8 <adv_set_fields>:
{
   1ece8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ecec:	b086      	sub	sp, #24
   1ecee:	4604      	mov	r4, r0
   1ecf0:	460d      	mov	r5, r1
   1ecf2:	4690      	mov	r8, r2
   1ecf4:	461e      	mov	r6, r3
   1ecf6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    dst_len_local = 0;
   1ecf8:	2300      	movs	r3, #0
   1ecfa:	f88d 3016 	strb.w	r3, [sp, #22]
    if (adv_fields->flags != 0) {
   1ecfe:	7803      	ldrb	r3, [r0, #0]
   1ed00:	2b00      	cmp	r3, #0
   1ed02:	f040 80be 	bne.w	1ee82 <adv_set_fields+0x19a>
    if (adv_fields->uuids16 != NULL && adv_fields->num_uuids16) {
   1ed06:	6862      	ldr	r2, [r4, #4]
   1ed08:	b19a      	cbz	r2, 1ed32 <adv_set_fields+0x4a>
   1ed0a:	7a21      	ldrb	r1, [r4, #8]
   1ed0c:	b189      	cbz	r1, 1ed32 <adv_set_fields+0x4a>
        if (adv_fields->uuids16_is_complete) {
   1ed0e:	7a63      	ldrb	r3, [r4, #9]
   1ed10:	f013 0f01 	tst.w	r3, #1
   1ed14:	f000 80c8 	beq.w	1eea8 <adv_set_fields+0x1c0>
            type = BLE_HS_ADV_TYPE_COMP_UUIDS16;
   1ed18:	2003      	movs	r0, #3
        rc = ble_hs_adv_set_array_uuid16(type, adv_fields->num_uuids16,
   1ed1a:	9702      	str	r7, [sp, #8]
   1ed1c:	9601      	str	r6, [sp, #4]
   1ed1e:	f10d 0316 	add.w	r3, sp, #22
   1ed22:	9300      	str	r3, [sp, #0]
   1ed24:	462b      	mov	r3, r5
   1ed26:	f7ff ff17 	bl	1eb58 <ble_hs_adv_set_array_uuid16>
        if (rc != 0) {
   1ed2a:	4603      	mov	r3, r0
   1ed2c:	2800      	cmp	r0, #0
   1ed2e:	f040 80b7 	bne.w	1eea0 <adv_set_fields+0x1b8>
    if (adv_fields->uuids32 != NULL && adv_fields->num_uuids32) {
   1ed32:	68e2      	ldr	r2, [r4, #12]
   1ed34:	b19a      	cbz	r2, 1ed5e <adv_set_fields+0x76>
   1ed36:	7c21      	ldrb	r1, [r4, #16]
   1ed38:	b189      	cbz	r1, 1ed5e <adv_set_fields+0x76>
        if (adv_fields->uuids32_is_complete) {
   1ed3a:	7c63      	ldrb	r3, [r4, #17]
   1ed3c:	f013 0f01 	tst.w	r3, #1
   1ed40:	f000 80b4 	beq.w	1eeac <adv_set_fields+0x1c4>
            type = BLE_HS_ADV_TYPE_COMP_UUIDS32;
   1ed44:	2005      	movs	r0, #5
        rc = ble_hs_adv_set_array_uuid32(type, adv_fields->num_uuids32,
   1ed46:	9702      	str	r7, [sp, #8]
   1ed48:	9601      	str	r6, [sp, #4]
   1ed4a:	f10d 0316 	add.w	r3, sp, #22
   1ed4e:	9300      	str	r3, [sp, #0]
   1ed50:	462b      	mov	r3, r5
   1ed52:	f7ff ff61 	bl	1ec18 <ble_hs_adv_set_array_uuid32>
        if (rc != 0) {
   1ed56:	4603      	mov	r3, r0
   1ed58:	2800      	cmp	r0, #0
   1ed5a:	f040 80a1 	bne.w	1eea0 <adv_set_fields+0x1b8>
    if (adv_fields->uuids128 != NULL && adv_fields->num_uuids128 > 0) {
   1ed5e:	6962      	ldr	r2, [r4, #20]
   1ed60:	b19a      	cbz	r2, 1ed8a <adv_set_fields+0xa2>
   1ed62:	7e21      	ldrb	r1, [r4, #24]
   1ed64:	b189      	cbz	r1, 1ed8a <adv_set_fields+0xa2>
        if (adv_fields->uuids128_is_complete) {
   1ed66:	7e63      	ldrb	r3, [r4, #25]
   1ed68:	f013 0f01 	tst.w	r3, #1
   1ed6c:	f000 80a0 	beq.w	1eeb0 <adv_set_fields+0x1c8>
            type = BLE_HS_ADV_TYPE_COMP_UUIDS128;
   1ed70:	2007      	movs	r0, #7
        rc = ble_hs_adv_set_array_uuid128(type, adv_fields->num_uuids128,
   1ed72:	9702      	str	r7, [sp, #8]
   1ed74:	9601      	str	r6, [sp, #4]
   1ed76:	f10d 0316 	add.w	r3, sp, #22
   1ed7a:	9300      	str	r3, [sp, #0]
   1ed7c:	462b      	mov	r3, r5
   1ed7e:	f7ff ff1a 	bl	1ebb6 <ble_hs_adv_set_array_uuid128>
        if (rc != 0) {
   1ed82:	4603      	mov	r3, r0
   1ed84:	2800      	cmp	r0, #0
   1ed86:	f040 808b 	bne.w	1eea0 <adv_set_fields+0x1b8>
    if (adv_fields->name != NULL && adv_fields->name_len > 0) {
   1ed8a:	69e2      	ldr	r2, [r4, #28]
   1ed8c:	b1a2      	cbz	r2, 1edb8 <adv_set_fields+0xd0>
   1ed8e:	f894 1020 	ldrb.w	r1, [r4, #32]
   1ed92:	b189      	cbz	r1, 1edb8 <adv_set_fields+0xd0>
        if (adv_fields->name_is_complete) {
   1ed94:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   1ed98:	f013 0f01 	tst.w	r3, #1
   1ed9c:	f000 808a 	beq.w	1eeb4 <adv_set_fields+0x1cc>
            type = BLE_HS_ADV_TYPE_COMP_NAME;
   1eda0:	2009      	movs	r0, #9
        rc = ble_hs_adv_set_flat_mbuf(type, adv_fields->name_len,
   1eda2:	9702      	str	r7, [sp, #8]
   1eda4:	9601      	str	r6, [sp, #4]
   1eda6:	f10d 0316 	add.w	r3, sp, #22
   1edaa:	9300      	str	r3, [sp, #0]
   1edac:	462b      	mov	r3, r5
   1edae:	f7ff feac 	bl	1eb0a <ble_hs_adv_set_flat_mbuf>
        if (rc != 0) {
   1edb2:	4603      	mov	r3, r0
   1edb4:	2800      	cmp	r0, #0
   1edb6:	d173      	bne.n	1eea0 <adv_set_fields+0x1b8>
    if (adv_fields->tx_pwr_lvl_is_present) {
   1edb8:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   1edbc:	f013 0f01 	tst.w	r3, #1
   1edc0:	d015      	beq.n	1edee <adv_set_fields+0x106>
        if (adv_fields->tx_pwr_lvl == BLE_HS_ADV_TX_PWR_LVL_AUTO) {
   1edc2:	f994 3022 	ldrsb.w	r3, [r4, #34]	; 0x22
   1edc6:	f113 0f80 	cmn.w	r3, #128	; 0x80
   1edca:	d075      	beq.n	1eeb8 <adv_set_fields+0x1d0>
            tx_pwr_lvl = adv_fields->tx_pwr_lvl;
   1edcc:	f88d 3017 	strb.w	r3, [sp, #23]
        rc = ble_hs_adv_set_flat_mbuf(BLE_HS_ADV_TYPE_TX_PWR_LVL, 1,
   1edd0:	9702      	str	r7, [sp, #8]
   1edd2:	9601      	str	r6, [sp, #4]
   1edd4:	f10d 0316 	add.w	r3, sp, #22
   1edd8:	9300      	str	r3, [sp, #0]
   1edda:	462b      	mov	r3, r5
   1eddc:	f10d 0217 	add.w	r2, sp, #23
   1ede0:	2101      	movs	r1, #1
   1ede2:	200a      	movs	r0, #10
   1ede4:	f7ff fe91 	bl	1eb0a <ble_hs_adv_set_flat_mbuf>
        if (rc != 0) {
   1ede8:	4603      	mov	r3, r0
   1edea:	2800      	cmp	r0, #0
   1edec:	d158      	bne.n	1eea0 <adv_set_fields+0x1b8>
    if (adv_fields->slave_itvl_range != NULL) {
   1edee:	6a62      	ldr	r2, [r4, #36]	; 0x24
   1edf0:	b162      	cbz	r2, 1ee0c <adv_set_fields+0x124>
        rc = ble_hs_adv_set_flat_mbuf(BLE_HS_ADV_TYPE_SLAVE_ITVL_RANGE,
   1edf2:	9702      	str	r7, [sp, #8]
   1edf4:	9601      	str	r6, [sp, #4]
   1edf6:	f10d 0316 	add.w	r3, sp, #22
   1edfa:	9300      	str	r3, [sp, #0]
   1edfc:	462b      	mov	r3, r5
   1edfe:	2104      	movs	r1, #4
   1ee00:	2012      	movs	r0, #18
   1ee02:	f7ff fe82 	bl	1eb0a <ble_hs_adv_set_flat_mbuf>
        if (rc != 0) {
   1ee06:	4603      	mov	r3, r0
   1ee08:	2800      	cmp	r0, #0
   1ee0a:	d149      	bne.n	1eea0 <adv_set_fields+0x1b8>
    if (adv_fields->svc_data_uuid16 != NULL && adv_fields->svc_data_uuid16_len) {
   1ee0c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   1ee0e:	b11a      	cbz	r2, 1ee18 <adv_set_fields+0x130>
   1ee10:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
   1ee14:	2900      	cmp	r1, #0
   1ee16:	d157      	bne.n	1eec8 <adv_set_fields+0x1e0>
    if (adv_fields->public_tgt_addr != NULL &&
   1ee18:	6b22      	ldr	r2, [r4, #48]	; 0x30
   1ee1a:	b11a      	cbz	r2, 1ee24 <adv_set_fields+0x13c>
        adv_fields->num_public_tgt_addrs != 0) {
   1ee1c:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    if (adv_fields->public_tgt_addr != NULL &&
   1ee20:	2b00      	cmp	r3, #0
   1ee22:	d15e      	bne.n	1eee2 <adv_set_fields+0x1fa>
    if (adv_fields->appearance_is_present) {
   1ee24:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   1ee28:	f013 0f01 	tst.w	r3, #1
   1ee2c:	d169      	bne.n	1ef02 <adv_set_fields+0x21a>
    if (adv_fields->adv_itvl_is_present) {
   1ee2e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   1ee32:	f013 0f01 	tst.w	r3, #1
   1ee36:	d174      	bne.n	1ef22 <adv_set_fields+0x23a>
    if (adv_fields->svc_data_uuid32 != NULL && adv_fields->svc_data_uuid32_len) {
   1ee38:	6c22      	ldr	r2, [r4, #64]	; 0x40
   1ee3a:	b11a      	cbz	r2, 1ee44 <adv_set_fields+0x15c>
   1ee3c:	f894 1044 	ldrb.w	r1, [r4, #68]	; 0x44
   1ee40:	2900      	cmp	r1, #0
   1ee42:	d17f      	bne.n	1ef44 <adv_set_fields+0x25c>
    if (adv_fields->svc_data_uuid128 != NULL && adv_fields->svc_data_uuid128_len) {
   1ee44:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1ee46:	b122      	cbz	r2, 1ee52 <adv_set_fields+0x16a>
   1ee48:	f894 104c 	ldrb.w	r1, [r4, #76]	; 0x4c
   1ee4c:	2900      	cmp	r1, #0
   1ee4e:	f040 8087 	bne.w	1ef60 <adv_set_fields+0x278>
    if (adv_fields->uri != NULL && adv_fields->uri_len) {
   1ee52:	6d22      	ldr	r2, [r4, #80]	; 0x50
   1ee54:	b122      	cbz	r2, 1ee60 <adv_set_fields+0x178>
   1ee56:	f894 1054 	ldrb.w	r1, [r4, #84]	; 0x54
   1ee5a:	2900      	cmp	r1, #0
   1ee5c:	f040 808e 	bne.w	1ef7c <adv_set_fields+0x294>
    if ((adv_fields->mfg_data != NULL) && (adv_fields->mfg_data_len >= 2)) {
   1ee60:	6da2      	ldr	r2, [r4, #88]	; 0x58
   1ee62:	b122      	cbz	r2, 1ee6e <adv_set_fields+0x186>
   1ee64:	f894 105c 	ldrb.w	r1, [r4, #92]	; 0x5c
   1ee68:	2901      	cmp	r1, #1
   1ee6a:	f200 8095 	bhi.w	1ef98 <adv_set_fields+0x2b0>
    if (dst_len) {
   1ee6e:	f1b8 0f00 	cmp.w	r8, #0
   1ee72:	f000 809f 	beq.w	1efb4 <adv_set_fields+0x2cc>
        *dst_len = dst_len_local;
   1ee76:	f89d 3016 	ldrb.w	r3, [sp, #22]
   1ee7a:	f888 3000 	strb.w	r3, [r8]
    return 0;
   1ee7e:	2300      	movs	r3, #0
   1ee80:	e00e      	b.n	1eea0 <adv_set_fields+0x1b8>
        rc = ble_hs_adv_set_flat_mbuf(BLE_HS_ADV_TYPE_FLAGS, 1,
   1ee82:	9702      	str	r7, [sp, #8]
   1ee84:	9601      	str	r6, [sp, #4]
   1ee86:	f10d 0316 	add.w	r3, sp, #22
   1ee8a:	9300      	str	r3, [sp, #0]
   1ee8c:	460b      	mov	r3, r1
   1ee8e:	4602      	mov	r2, r0
   1ee90:	2101      	movs	r1, #1
   1ee92:	4608      	mov	r0, r1
   1ee94:	f7ff fe39 	bl	1eb0a <ble_hs_adv_set_flat_mbuf>
        if (rc != 0) {
   1ee98:	4603      	mov	r3, r0
   1ee9a:	2800      	cmp	r0, #0
   1ee9c:	f43f af33 	beq.w	1ed06 <adv_set_fields+0x1e>
}
   1eea0:	4618      	mov	r0, r3
   1eea2:	b006      	add	sp, #24
   1eea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            type = BLE_HS_ADV_TYPE_INCOMP_UUIDS16;
   1eea8:	2002      	movs	r0, #2
   1eeaa:	e736      	b.n	1ed1a <adv_set_fields+0x32>
            type = BLE_HS_ADV_TYPE_INCOMP_UUIDS32;
   1eeac:	2004      	movs	r0, #4
   1eeae:	e74a      	b.n	1ed46 <adv_set_fields+0x5e>
            type = BLE_HS_ADV_TYPE_INCOMP_UUIDS128;
   1eeb0:	2006      	movs	r0, #6
   1eeb2:	e75e      	b.n	1ed72 <adv_set_fields+0x8a>
            type = BLE_HS_ADV_TYPE_INCOMP_NAME;
   1eeb4:	2008      	movs	r0, #8
   1eeb6:	e774      	b.n	1eda2 <adv_set_fields+0xba>
            rc = ble_hs_hci_util_read_adv_tx_pwr(&tx_pwr_lvl);
   1eeb8:	f10d 0017 	add.w	r0, sp, #23
   1eebc:	f000 ff7e 	bl	1fdbc <ble_hs_hci_util_read_adv_tx_pwr>
            if (rc != 0) {
   1eec0:	4603      	mov	r3, r0
   1eec2:	2800      	cmp	r0, #0
   1eec4:	d084      	beq.n	1edd0 <adv_set_fields+0xe8>
   1eec6:	e7eb      	b.n	1eea0 <adv_set_fields+0x1b8>
        rc = ble_hs_adv_set_flat_mbuf(BLE_HS_ADV_TYPE_SVC_DATA_UUID16,
   1eec8:	9702      	str	r7, [sp, #8]
   1eeca:	9601      	str	r6, [sp, #4]
   1eecc:	f10d 0316 	add.w	r3, sp, #22
   1eed0:	9300      	str	r3, [sp, #0]
   1eed2:	462b      	mov	r3, r5
   1eed4:	2016      	movs	r0, #22
   1eed6:	f7ff fe18 	bl	1eb0a <ble_hs_adv_set_flat_mbuf>
        if (rc != 0) {
   1eeda:	4603      	mov	r3, r0
   1eedc:	2800      	cmp	r0, #0
   1eede:	d09b      	beq.n	1ee18 <adv_set_fields+0x130>
   1eee0:	e7de      	b.n	1eea0 <adv_set_fields+0x1b8>
        rc = ble_hs_adv_set_flat_mbuf(BLE_HS_ADV_TYPE_PUBLIC_TGT_ADDR,
   1eee2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1eee6:	0059      	lsls	r1, r3, #1
   1eee8:	9702      	str	r7, [sp, #8]
   1eeea:	9601      	str	r6, [sp, #4]
   1eeec:	f10d 0316 	add.w	r3, sp, #22
   1eef0:	9300      	str	r3, [sp, #0]
   1eef2:	462b      	mov	r3, r5
   1eef4:	2017      	movs	r0, #23
   1eef6:	f7ff fe08 	bl	1eb0a <ble_hs_adv_set_flat_mbuf>
        if (rc != 0) {
   1eefa:	4603      	mov	r3, r0
   1eefc:	2800      	cmp	r0, #0
   1eefe:	d091      	beq.n	1ee24 <adv_set_fields+0x13c>
   1ef00:	e7ce      	b.n	1eea0 <adv_set_fields+0x1b8>
        rc = ble_hs_adv_set_flat_mbuf(BLE_HS_ADV_TYPE_APPEARANCE,
   1ef02:	9702      	str	r7, [sp, #8]
   1ef04:	9601      	str	r6, [sp, #4]
   1ef06:	f10d 0316 	add.w	r3, sp, #22
   1ef0a:	9300      	str	r3, [sp, #0]
   1ef0c:	462b      	mov	r3, r5
   1ef0e:	f104 0236 	add.w	r2, r4, #54	; 0x36
   1ef12:	2102      	movs	r1, #2
   1ef14:	2019      	movs	r0, #25
   1ef16:	f7ff fdf8 	bl	1eb0a <ble_hs_adv_set_flat_mbuf>
        if (rc != 0) {
   1ef1a:	4603      	mov	r3, r0
   1ef1c:	2800      	cmp	r0, #0
   1ef1e:	d086      	beq.n	1ee2e <adv_set_fields+0x146>
   1ef20:	e7be      	b.n	1eea0 <adv_set_fields+0x1b8>
        rc = ble_hs_adv_set_array16(BLE_HS_ADV_TYPE_ADV_ITVL, 1,
   1ef22:	9702      	str	r7, [sp, #8]
   1ef24:	9601      	str	r6, [sp, #4]
   1ef26:	f10d 0316 	add.w	r3, sp, #22
   1ef2a:	9300      	str	r3, [sp, #0]
   1ef2c:	462b      	mov	r3, r5
   1ef2e:	f104 023a 	add.w	r2, r4, #58	; 0x3a
   1ef32:	2101      	movs	r1, #1
   1ef34:	201a      	movs	r0, #26
   1ef36:	f7ff fea4 	bl	1ec82 <ble_hs_adv_set_array16>
        if (rc != 0) {
   1ef3a:	4603      	mov	r3, r0
   1ef3c:	2800      	cmp	r0, #0
   1ef3e:	f43f af7b 	beq.w	1ee38 <adv_set_fields+0x150>
   1ef42:	e7ad      	b.n	1eea0 <adv_set_fields+0x1b8>
        rc = ble_hs_adv_set_flat_mbuf(BLE_HS_ADV_TYPE_SVC_DATA_UUID32,
   1ef44:	9702      	str	r7, [sp, #8]
   1ef46:	9601      	str	r6, [sp, #4]
   1ef48:	f10d 0316 	add.w	r3, sp, #22
   1ef4c:	9300      	str	r3, [sp, #0]
   1ef4e:	462b      	mov	r3, r5
   1ef50:	2020      	movs	r0, #32
   1ef52:	f7ff fdda 	bl	1eb0a <ble_hs_adv_set_flat_mbuf>
        if (rc != 0) {
   1ef56:	4603      	mov	r3, r0
   1ef58:	2800      	cmp	r0, #0
   1ef5a:	f43f af73 	beq.w	1ee44 <adv_set_fields+0x15c>
   1ef5e:	e79f      	b.n	1eea0 <adv_set_fields+0x1b8>
        rc = ble_hs_adv_set_flat_mbuf(BLE_HS_ADV_TYPE_SVC_DATA_UUID128,
   1ef60:	9702      	str	r7, [sp, #8]
   1ef62:	9601      	str	r6, [sp, #4]
   1ef64:	f10d 0316 	add.w	r3, sp, #22
   1ef68:	9300      	str	r3, [sp, #0]
   1ef6a:	462b      	mov	r3, r5
   1ef6c:	2021      	movs	r0, #33	; 0x21
   1ef6e:	f7ff fdcc 	bl	1eb0a <ble_hs_adv_set_flat_mbuf>
        if (rc != 0) {
   1ef72:	4603      	mov	r3, r0
   1ef74:	2800      	cmp	r0, #0
   1ef76:	f43f af6c 	beq.w	1ee52 <adv_set_fields+0x16a>
   1ef7a:	e791      	b.n	1eea0 <adv_set_fields+0x1b8>
        rc = ble_hs_adv_set_flat_mbuf(BLE_HS_ADV_TYPE_URI, adv_fields->uri_len,
   1ef7c:	9702      	str	r7, [sp, #8]
   1ef7e:	9601      	str	r6, [sp, #4]
   1ef80:	f10d 0316 	add.w	r3, sp, #22
   1ef84:	9300      	str	r3, [sp, #0]
   1ef86:	462b      	mov	r3, r5
   1ef88:	2024      	movs	r0, #36	; 0x24
   1ef8a:	f7ff fdbe 	bl	1eb0a <ble_hs_adv_set_flat_mbuf>
        if (rc != 0) {
   1ef8e:	4603      	mov	r3, r0
   1ef90:	2800      	cmp	r0, #0
   1ef92:	f43f af65 	beq.w	1ee60 <adv_set_fields+0x178>
   1ef96:	e783      	b.n	1eea0 <adv_set_fields+0x1b8>
        rc = ble_hs_adv_set_flat_mbuf(BLE_HS_ADV_TYPE_MFG_DATA,
   1ef98:	9702      	str	r7, [sp, #8]
   1ef9a:	9601      	str	r6, [sp, #4]
   1ef9c:	f10d 0316 	add.w	r3, sp, #22
   1efa0:	9300      	str	r3, [sp, #0]
   1efa2:	462b      	mov	r3, r5
   1efa4:	20ff      	movs	r0, #255	; 0xff
   1efa6:	f7ff fdb0 	bl	1eb0a <ble_hs_adv_set_flat_mbuf>
        if (rc != 0) {
   1efaa:	4603      	mov	r3, r0
   1efac:	2800      	cmp	r0, #0
   1efae:	f43f af5e 	beq.w	1ee6e <adv_set_fields+0x186>
   1efb2:	e775      	b.n	1eea0 <adv_set_fields+0x1b8>
    return 0;
   1efb4:	2300      	movs	r3, #0
   1efb6:	e773      	b.n	1eea0 <adv_set_fields+0x1b8>

0001efb8 <ble_hs_adv_set_fields>:
{
   1efb8:	b510      	push	{r4, lr}
   1efba:	b082      	sub	sp, #8
    return adv_set_fields(adv_fields, dst, dst_len, max_len, NULL);
   1efbc:	2400      	movs	r4, #0
   1efbe:	9400      	str	r4, [sp, #0]
   1efc0:	f7ff fe92 	bl	1ece8 <adv_set_fields>
}
   1efc4:	b002      	add	sp, #8
   1efc6:	bd10      	pop	{r4, pc}

0001efc8 <ble_hs_adv_parse>:
{
   1efc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1efca:	4605      	mov	r5, r0
   1efcc:	460c      	mov	r4, r1
   1efce:	4617      	mov	r7, r2
   1efd0:	461e      	mov	r6, r3
    while (length > 1) {
   1efd2:	2c01      	cmp	r4, #1
   1efd4:	d90f      	bls.n	1eff6 <ble_hs_adv_parse+0x2e>
        if (field->length >= length) {
   1efd6:	782b      	ldrb	r3, [r5, #0]
   1efd8:	42a3      	cmp	r3, r4
   1efda:	d20f      	bcs.n	1effc <ble_hs_adv_parse+0x34>
        if (func(field, user_data) == 0) {
   1efdc:	4631      	mov	r1, r6
   1efde:	4628      	mov	r0, r5
   1efe0:	47b8      	blx	r7
   1efe2:	4603      	mov	r3, r0
   1efe4:	b140      	cbz	r0, 1eff8 <ble_hs_adv_parse+0x30>
        length -= 1 + field->length;
   1efe6:	782b      	ldrb	r3, [r5, #0]
   1efe8:	1ae4      	subs	r4, r4, r3
   1efea:	b2e4      	uxtb	r4, r4
   1efec:	3c01      	subs	r4, #1
   1efee:	b2e4      	uxtb	r4, r4
        data += 1 + field->length;
   1eff0:	3301      	adds	r3, #1
   1eff2:	441d      	add	r5, r3
   1eff4:	e7ed      	b.n	1efd2 <ble_hs_adv_parse+0xa>
    return 0;
   1eff6:	2300      	movs	r3, #0
}
   1eff8:	4618      	mov	r0, r3
   1effa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return BLE_HS_EBADDATA;
   1effc:	230a      	movs	r3, #10
   1effe:	e7fb      	b.n	1eff8 <ble_hs_adv_parse+0x30>

0001f000 <ble_hs_adv_find_field>:

int
ble_hs_adv_find_field(uint8_t type, const uint8_t *data, uint8_t length,
                      const struct ble_hs_adv_field **out)
{
   1f000:	b530      	push	{r4, r5, lr}
   1f002:	b083      	sub	sp, #12
   1f004:	460c      	mov	r4, r1
   1f006:	4611      	mov	r1, r2
   1f008:	461d      	mov	r5, r3
    int rc;
    struct find_field_data ffd = {
   1f00a:	f88d 0000 	strb.w	r0, [sp]
   1f00e:	2300      	movs	r3, #0
   1f010:	9301      	str	r3, [sp, #4]
            .type = type,
            .field = NULL,
    };

    rc = ble_hs_adv_parse(data, length, find_field_func, &ffd);
   1f012:	466b      	mov	r3, sp
   1f014:	4a06      	ldr	r2, [pc, #24]	; (1f030 <ble_hs_adv_find_field+0x30>)
   1f016:	4620      	mov	r0, r4
   1f018:	f7ff ffd6 	bl	1efc8 <ble_hs_adv_parse>
    if (rc != 0) {
   1f01c:	4603      	mov	r3, r0
   1f01e:	b910      	cbnz	r0, 1f026 <ble_hs_adv_find_field+0x26>
        return rc;
    }

    if (!ffd.field) {
   1f020:	9a01      	ldr	r2, [sp, #4]
   1f022:	b11a      	cbz	r2, 1f02c <ble_hs_adv_find_field+0x2c>
        return BLE_HS_ENOENT;
    }

    *out = ffd.field;
   1f024:	602a      	str	r2, [r5, #0]

    return 0;
}
   1f026:	4618      	mov	r0, r3
   1f028:	b003      	add	sp, #12
   1f02a:	bd30      	pop	{r4, r5, pc}
        return BLE_HS_ENOENT;
   1f02c:	2305      	movs	r3, #5
   1f02e:	e7fa      	b.n	1f026 <ble_hs_adv_find_field+0x26>
   1f030:	0001ea91 	.word	0x0001ea91

0001f034 <ble_hs_atomic_conn_delete>:

#include "ble_hs_priv.h"

int
ble_hs_atomic_conn_delete(uint16_t conn_handle)
{
   1f034:	b510      	push	{r4, lr}
   1f036:	4604      	mov	r4, r0
    struct ble_hs_conn *conn;

    ble_hs_lock();
   1f038:	f7ff fa74 	bl	1e524 <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
   1f03c:	4620      	mov	r0, r4
   1f03e:	f000 f901 	bl	1f244 <ble_hs_conn_find>
    if (conn != NULL) {
   1f042:	4604      	mov	r4, r0
   1f044:	b120      	cbz	r0, 1f050 <ble_hs_atomic_conn_delete+0x1c>
        ble_hs_conn_remove(conn);
   1f046:	f000 f8ed 	bl	1f224 <ble_hs_conn_remove>
#if MYNEWT_VAL(BLE_PERIODIC_ADV_SYNC_TRANSFER)
        if (conn->psync) {
            ble_hs_periodic_sync_free(conn->psync);
        }
#endif
        ble_hs_conn_free(conn);
   1f04a:	4620      	mov	r0, r4
   1f04c:	f000 f880 	bl	1f150 <ble_hs_conn_free>

    }
    ble_hs_unlock();
   1f050:	f7ff fa6c 	bl	1e52c <ble_hs_unlock>

    return conn != NULL ? 0 : BLE_HS_ENOTCONN;
   1f054:	b10c      	cbz	r4, 1f05a <ble_hs_atomic_conn_delete+0x26>
   1f056:	2000      	movs	r0, #0
}
   1f058:	bd10      	pop	{r4, pc}
    return conn != NULL ? 0 : BLE_HS_ENOTCONN;
   1f05a:	2007      	movs	r0, #7
   1f05c:	e7fc      	b.n	1f058 <ble_hs_atomic_conn_delete+0x24>

0001f05e <ble_hs_atomic_conn_flags>:
    ble_hs_unlock();
}

int
ble_hs_atomic_conn_flags(uint16_t conn_handle, ble_hs_conn_flags_t *out_flags)
{
   1f05e:	b538      	push	{r3, r4, r5, lr}
   1f060:	4605      	mov	r5, r0
   1f062:	460c      	mov	r4, r1
    struct ble_hs_conn *conn;
    int rc;

    ble_hs_lock();
   1f064:	f7ff fa5e 	bl	1e524 <ble_hs_lock>

    conn = ble_hs_conn_find(conn_handle);
   1f068:	4628      	mov	r0, r5
   1f06a:	f000 f8eb 	bl	1f244 <ble_hs_conn_find>
    if (conn == NULL) {
   1f06e:	b140      	cbz	r0, 1f082 <ble_hs_atomic_conn_flags+0x24>
        rc = BLE_HS_ENOTCONN;
    } else {
        rc = 0;
        if (out_flags != NULL) {
   1f070:	b14c      	cbz	r4, 1f086 <ble_hs_atomic_conn_flags+0x28>
            *out_flags = conn->bhc_flags;
   1f072:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   1f076:	7023      	strb	r3, [r4, #0]
        rc = 0;
   1f078:	2400      	movs	r4, #0
        }
    }

    ble_hs_unlock();
   1f07a:	f7ff fa57 	bl	1e52c <ble_hs_unlock>

    return rc;
}
   1f07e:	4620      	mov	r0, r4
   1f080:	bd38      	pop	{r3, r4, r5, pc}
        rc = BLE_HS_ENOTCONN;
   1f082:	2407      	movs	r4, #7
   1f084:	e7f9      	b.n	1f07a <ble_hs_atomic_conn_flags+0x1c>
        rc = 0;
   1f086:	2400      	movs	r4, #0
   1f088:	e7f7      	b.n	1f07a <ble_hs_atomic_conn_flags+0x1c>

0001f08a <ble_hs_atomic_first_conn_handle>:
    return rc;
}

uint16_t
ble_hs_atomic_first_conn_handle(void)
{
   1f08a:	b510      	push	{r4, lr}
    const struct ble_hs_conn *conn;
    uint16_t conn_handle;

    ble_hs_lock();
   1f08c:	f7ff fa4a 	bl	1e524 <ble_hs_lock>

    conn = ble_hs_conn_first();
   1f090:	f000 f90a 	bl	1f2a8 <ble_hs_conn_first>
    if (conn != NULL) {
   1f094:	b120      	cbz	r0, 1f0a0 <ble_hs_atomic_first_conn_handle+0x16>
        conn_handle = conn->bhc_handle;
   1f096:	8884      	ldrh	r4, [r0, #4]
    } else {
        conn_handle = BLE_HS_CONN_HANDLE_NONE;
    }

    ble_hs_unlock();
   1f098:	f7ff fa48 	bl	1e52c <ble_hs_unlock>

    return conn_handle;
}
   1f09c:	4620      	mov	r0, r4
   1f09e:	bd10      	pop	{r4, pc}
        conn_handle = BLE_HS_CONN_HANDLE_NONE;
   1f0a0:	f64f 74ff 	movw	r4, #65535	; 0xffff
   1f0a4:	e7f8      	b.n	1f098 <ble_hs_atomic_first_conn_handle+0xe>
	...

0001f0a8 <ble_hs_conn_can_alloc>:

static const uint8_t ble_hs_conn_null_addr[6];

int
ble_hs_conn_can_alloc(void)
{
   1f0a8:	b508      	push	{r3, lr}
#if !NIMBLE_BLE_CONNECT
    return 0;
#endif

    return ble_hs_conn_pool.mp_num_free >= 1 &&
   1f0aa:	4b09      	ldr	r3, [pc, #36]	; (1f0d0 <ble_hs_conn_can_alloc+0x28>)
   1f0ac:	88db      	ldrh	r3, [r3, #6]
           ble_l2cap_chan_pool.mp_num_free >= BLE_HS_CONN_MIN_CHANS &&
   1f0ae:	b15b      	cbz	r3, 1f0c8 <ble_hs_conn_can_alloc+0x20>
   1f0b0:	4b08      	ldr	r3, [pc, #32]	; (1f0d4 <ble_hs_conn_can_alloc+0x2c>)
   1f0b2:	88db      	ldrh	r3, [r3, #6]
    return ble_hs_conn_pool.mp_num_free >= 1 &&
   1f0b4:	2b02      	cmp	r3, #2
   1f0b6:	d801      	bhi.n	1f0bc <ble_hs_conn_can_alloc+0x14>
           ble_l2cap_chan_pool.mp_num_free >= BLE_HS_CONN_MIN_CHANS &&
   1f0b8:	2300      	movs	r3, #0
   1f0ba:	e006      	b.n	1f0ca <ble_hs_conn_can_alloc+0x22>
           ble_gatts_conn_can_alloc();
   1f0bc:	f7fe ff9e 	bl	1dffc <ble_gatts_conn_can_alloc>
           ble_l2cap_chan_pool.mp_num_free >= BLE_HS_CONN_MIN_CHANS &&
   1f0c0:	4603      	mov	r3, r0
   1f0c2:	b110      	cbz	r0, 1f0ca <ble_hs_conn_can_alloc+0x22>
   1f0c4:	2301      	movs	r3, #1
   1f0c6:	e000      	b.n	1f0ca <ble_hs_conn_can_alloc+0x22>
   1f0c8:	2300      	movs	r3, #0
}
   1f0ca:	4618      	mov	r0, r3
   1f0cc:	bd08      	pop	{r3, pc}
   1f0ce:	bf00      	nop
   1f0d0:	20002e14 	.word	0x20002e14
   1f0d4:	2000465c 	.word	0x2000465c

0001f0d8 <ble_hs_conn_chan_find_by_scid>:
    return NULL;
#endif

    struct ble_l2cap_chan *chan;

    SLIST_FOREACH(chan, &conn->bhc_channels, next) {
   1f0d8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   1f0da:	b128      	cbz	r0, 1f0e8 <ble_hs_conn_chan_find_by_scid+0x10>
        if (chan->scid == cid) {
   1f0dc:	8903      	ldrh	r3, [r0, #8]
   1f0de:	428b      	cmp	r3, r1
   1f0e0:	d004      	beq.n	1f0ec <ble_hs_conn_chan_find_by_scid+0x14>
            return chan;
        }
        if (chan->scid > cid) {
   1f0e2:	d802      	bhi.n	1f0ea <ble_hs_conn_chan_find_by_scid+0x12>
    SLIST_FOREACH(chan, &conn->bhc_channels, next) {
   1f0e4:	6800      	ldr	r0, [r0, #0]
   1f0e6:	e7f8      	b.n	1f0da <ble_hs_conn_chan_find_by_scid+0x2>
   1f0e8:	4770      	bx	lr
            return NULL;
   1f0ea:	2000      	movs	r0, #0
        }
    }

    return NULL;
}
   1f0ec:	4770      	bx	lr

0001f0ee <ble_hs_conn_chan_insert>:
    return false;
}

int
ble_hs_conn_chan_insert(struct ble_hs_conn *conn, struct ble_l2cap_chan *chan)
{
   1f0ee:	b470      	push	{r4, r5, r6}

    struct ble_l2cap_chan *prev;
    struct ble_l2cap_chan *cur;

    prev = NULL;
    SLIST_FOREACH(cur, &conn->bhc_channels, next) {
   1f0f0:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
   1f0f2:	4633      	mov	r3, r6
    prev = NULL;
   1f0f4:	2500      	movs	r5, #0
    SLIST_FOREACH(cur, &conn->bhc_channels, next) {
   1f0f6:	b13b      	cbz	r3, 1f108 <ble_hs_conn_chan_insert+0x1a>
        if (cur->scid == chan->scid) {
   1f0f8:	891c      	ldrh	r4, [r3, #8]
   1f0fa:	890a      	ldrh	r2, [r1, #8]
   1f0fc:	4294      	cmp	r4, r2
   1f0fe:	d00e      	beq.n	1f11e <ble_hs_conn_chan_insert+0x30>
            return BLE_HS_EALREADY;
        }
        if (cur->scid > chan->scid) {
   1f100:	d802      	bhi.n	1f108 <ble_hs_conn_chan_insert+0x1a>
            break;
        }

        prev = cur;
   1f102:	461d      	mov	r5, r3
    SLIST_FOREACH(cur, &conn->bhc_channels, next) {
   1f104:	681b      	ldr	r3, [r3, #0]
   1f106:	e7f6      	b.n	1f0f6 <ble_hs_conn_chan_insert+0x8>
    }

    if (prev == NULL) {
   1f108:	b12d      	cbz	r5, 1f116 <ble_hs_conn_chan_insert+0x28>
        SLIST_INSERT_HEAD(&conn->bhc_channels, chan, next);
    } else {
        SLIST_INSERT_AFTER(prev, chan, next);
   1f10a:	682b      	ldr	r3, [r5, #0]
   1f10c:	600b      	str	r3, [r1, #0]
   1f10e:	6029      	str	r1, [r5, #0]
    }

    return 0;
   1f110:	2000      	movs	r0, #0
}
   1f112:	bc70      	pop	{r4, r5, r6}
   1f114:	4770      	bx	lr
        SLIST_INSERT_HEAD(&conn->bhc_channels, chan, next);
   1f116:	600e      	str	r6, [r1, #0]
   1f118:	62c1      	str	r1, [r0, #44]	; 0x2c
    return 0;
   1f11a:	2000      	movs	r0, #0
   1f11c:	e7f9      	b.n	1f112 <ble_hs_conn_chan_insert+0x24>
            return BLE_HS_EALREADY;
   1f11e:	2002      	movs	r0, #2
   1f120:	e7f7      	b.n	1f112 <ble_hs_conn_chan_insert+0x24>

0001f122 <ble_hs_conn_delete_chan>:
    return NULL;
}

void
ble_hs_conn_delete_chan(struct ble_hs_conn *conn, struct ble_l2cap_chan *chan)
{
   1f122:	b508      	push	{r3, lr}
    if (conn->bhc_rx_chan == chan) {
   1f124:	6b03      	ldr	r3, [r0, #48]	; 0x30
   1f126:	428b      	cmp	r3, r1
   1f128:	d005      	beq.n	1f136 <ble_hs_conn_delete_chan+0x14>
        conn->bhc_rx_chan = NULL;
    }

    SLIST_REMOVE(&conn->bhc_channels, chan, ble_l2cap_chan, next);
   1f12a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   1f12c:	428a      	cmp	r2, r1
   1f12e:	d106      	bne.n	1f13e <ble_hs_conn_delete_chan+0x1c>
   1f130:	6813      	ldr	r3, [r2, #0]
   1f132:	62c3      	str	r3, [r0, #44]	; 0x2c
   1f134:	e008      	b.n	1f148 <ble_hs_conn_delete_chan+0x26>
        conn->bhc_rx_chan = NULL;
   1f136:	2300      	movs	r3, #0
   1f138:	6303      	str	r3, [r0, #48]	; 0x30
   1f13a:	e7f6      	b.n	1f12a <ble_hs_conn_delete_chan+0x8>
    SLIST_REMOVE(&conn->bhc_channels, chan, ble_l2cap_chan, next);
   1f13c:	461a      	mov	r2, r3
   1f13e:	6813      	ldr	r3, [r2, #0]
   1f140:	428b      	cmp	r3, r1
   1f142:	d1fb      	bne.n	1f13c <ble_hs_conn_delete_chan+0x1a>
   1f144:	681b      	ldr	r3, [r3, #0]
   1f146:	6013      	str	r3, [r2, #0]
    ble_l2cap_chan_free(conn, chan);
   1f148:	f001 fb1a 	bl	20780 <ble_l2cap_chan_free>
}
   1f14c:	bd08      	pop	{r3, pc}
	...

0001f150 <ble_hs_conn_free>:

    struct ble_l2cap_chan *chan;
    struct os_mbuf_pkthdr *omp;
    int rc;

    if (conn == NULL) {
   1f150:	b310      	cbz	r0, 1f198 <ble_hs_conn_free+0x48>
{
   1f152:	b510      	push	{r4, lr}
   1f154:	4604      	mov	r4, r0
        return;
    }

    ble_att_svr_prep_clear(&conn->bhc_att_svr.basc_prep_list);
   1f156:	3044      	adds	r0, #68	; 0x44
   1f158:	f006 fa80 	bl	2565c <ble_att_svr_prep_clear>

    while ((chan = SLIST_FIRST(&conn->bhc_channels)) != NULL) {
   1f15c:	e002      	b.n	1f164 <ble_hs_conn_free+0x14>
        ble_hs_conn_delete_chan(conn, chan);
   1f15e:	4620      	mov	r0, r4
   1f160:	f7ff ffdf 	bl	1f122 <ble_hs_conn_delete_chan>
    while ((chan = SLIST_FIRST(&conn->bhc_channels)) != NULL) {
   1f164:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   1f166:	2900      	cmp	r1, #0
   1f168:	d1f9      	bne.n	1f15e <ble_hs_conn_free+0xe>
   1f16a:	e002      	b.n	1f172 <ble_hs_conn_free+0x22>
    }

    while ((omp = STAILQ_FIRST(&conn->bhc_tx_q)) != NULL) {
        STAILQ_REMOVE_HEAD(&conn->bhc_tx_q, omp_next);
        os_mbuf_free_chain(OS_MBUF_PKTHDR_TO_MBUF(omp));
   1f16c:	3810      	subs	r0, #16
   1f16e:	f7ee fc52 	bl	da16 <os_mbuf_free_chain>
    while ((omp = STAILQ_FIRST(&conn->bhc_tx_q)) != NULL) {
   1f172:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   1f174:	b138      	cbz	r0, 1f186 <ble_hs_conn_free+0x36>
        STAILQ_REMOVE_HEAD(&conn->bhc_tx_q, omp_next);
   1f176:	6843      	ldr	r3, [r0, #4]
   1f178:	63e3      	str	r3, [r4, #60]	; 0x3c
   1f17a:	2b00      	cmp	r3, #0
   1f17c:	d1f6      	bne.n	1f16c <ble_hs_conn_free+0x1c>
   1f17e:	f104 033c 	add.w	r3, r4, #60	; 0x3c
   1f182:	6423      	str	r3, [r4, #64]	; 0x40
   1f184:	e7f2      	b.n	1f16c <ble_hs_conn_free+0x1c>
    }

#if MYNEWT_VAL(BLE_HS_DEBUG)
    memset(conn, 0xff, sizeof *conn);
#endif
    rc = os_memblock_put(&ble_hs_conn_pool, conn);
   1f186:	4621      	mov	r1, r4
   1f188:	4804      	ldr	r0, [pc, #16]	; (1f19c <ble_hs_conn_free+0x4c>)
   1f18a:	f7ed fef9 	bl	cf80 <os_memblock_put>
    BLE_HS_DBG_ASSERT_EVAL(rc == 0);

    STATS_INC(ble_hs_stats, conn_delete);
   1f18e:	4a04      	ldr	r2, [pc, #16]	; (1f1a0 <ble_hs_conn_free+0x50>)
   1f190:	6913      	ldr	r3, [r2, #16]
   1f192:	3301      	adds	r3, #1
   1f194:	6113      	str	r3, [r2, #16]
}
   1f196:	bd10      	pop	{r4, pc}
   1f198:	4770      	bx	lr
   1f19a:	bf00      	nop
   1f19c:	20002e14 	.word	0x20002e14
   1f1a0:	200045f4 	.word	0x200045f4

0001f1a4 <ble_hs_conn_alloc>:
{
   1f1a4:	b538      	push	{r3, r4, r5, lr}
   1f1a6:	4605      	mov	r5, r0
    conn = os_memblock_get(&ble_hs_conn_pool);
   1f1a8:	481c      	ldr	r0, [pc, #112]	; (1f21c <ble_hs_conn_alloc+0x78>)
   1f1aa:	f7ed fec1 	bl	cf30 <os_memblock_get>
    if (conn == NULL) {
   1f1ae:	4604      	mov	r4, r0
   1f1b0:	b370      	cbz	r0, 1f210 <ble_hs_conn_alloc+0x6c>
    memset(conn, 0, sizeof *conn);
   1f1b2:	2264      	movs	r2, #100	; 0x64
   1f1b4:	2100      	movs	r1, #0
   1f1b6:	f7ef f983 	bl	e4c0 <memset>
    conn->bhc_handle = conn_handle;
   1f1ba:	80a5      	strh	r5, [r4, #4]
    chan = ble_att_create_chan(conn_handle);
   1f1bc:	4628      	mov	r0, r5
   1f1be:	f004 fd35 	bl	23c2c <ble_att_create_chan>
    if (chan == NULL) {
   1f1c2:	4601      	mov	r1, r0
   1f1c4:	b320      	cbz	r0, 1f210 <ble_hs_conn_alloc+0x6c>
    rc = ble_hs_conn_chan_insert(conn, chan);
   1f1c6:	4620      	mov	r0, r4
   1f1c8:	f7ff ff91 	bl	1f0ee <ble_hs_conn_chan_insert>
    if (rc != 0) {
   1f1cc:	bb00      	cbnz	r0, 1f210 <ble_hs_conn_alloc+0x6c>
    chan = ble_l2cap_sig_create_chan(conn_handle);
   1f1ce:	4628      	mov	r0, r5
   1f1d0:	f001 fdf6 	bl	20dc0 <ble_l2cap_sig_create_chan>
    if (chan == NULL) {
   1f1d4:	4601      	mov	r1, r0
   1f1d6:	b1d8      	cbz	r0, 1f210 <ble_hs_conn_alloc+0x6c>
    rc = ble_hs_conn_chan_insert(conn, chan);
   1f1d8:	4620      	mov	r0, r4
   1f1da:	f7ff ff88 	bl	1f0ee <ble_hs_conn_chan_insert>
    if (rc != 0) {
   1f1de:	b9b8      	cbnz	r0, 1f210 <ble_hs_conn_alloc+0x6c>
    chan = ble_sm_create_chan(conn_handle);
   1f1e0:	4628      	mov	r0, r5
   1f1e2:	f003 fb8b 	bl	228fc <ble_sm_create_chan>
    if (chan == NULL) {
   1f1e6:	4601      	mov	r1, r0
   1f1e8:	b190      	cbz	r0, 1f210 <ble_hs_conn_alloc+0x6c>
    rc = ble_hs_conn_chan_insert(conn, chan);
   1f1ea:	4620      	mov	r0, r4
   1f1ec:	f7ff ff7f 	bl	1f0ee <ble_hs_conn_chan_insert>
    if (rc != 0) {
   1f1f0:	b970      	cbnz	r0, 1f210 <ble_hs_conn_alloc+0x6c>
    rc = ble_gatts_conn_init(&conn->bhc_gatt_svr);
   1f1f2:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   1f1f6:	f7fe ff11 	bl	1e01c <ble_gatts_conn_init>
    if (rc != 0) {
   1f1fa:	b948      	cbnz	r0, 1f210 <ble_hs_conn_alloc+0x6c>
    STAILQ_INIT(&conn->bhc_tx_q);
   1f1fc:	4623      	mov	r3, r4
   1f1fe:	2200      	movs	r2, #0
   1f200:	f843 2f3c 	str.w	r2, [r3, #60]!
   1f204:	6423      	str	r3, [r4, #64]	; 0x40
    STATS_INC(ble_hs_stats, conn_create);
   1f206:	4a06      	ldr	r2, [pc, #24]	; (1f220 <ble_hs_conn_alloc+0x7c>)
   1f208:	68d3      	ldr	r3, [r2, #12]
   1f20a:	3301      	adds	r3, #1
   1f20c:	60d3      	str	r3, [r2, #12]
    return conn;
   1f20e:	e003      	b.n	1f218 <ble_hs_conn_alloc+0x74>
    ble_hs_conn_free(conn);
   1f210:	4620      	mov	r0, r4
   1f212:	f7ff ff9d 	bl	1f150 <ble_hs_conn_free>
    return NULL;
   1f216:	2400      	movs	r4, #0
}
   1f218:	4620      	mov	r0, r4
   1f21a:	bd38      	pop	{r3, r4, r5, pc}
   1f21c:	20002e14 	.word	0x20002e14
   1f220:	200045f4 	.word	0x200045f4

0001f224 <ble_hs_conn_remove>:
    return;
#endif

    BLE_HS_DBG_ASSERT(ble_hs_locked_by_cur_task());

    SLIST_REMOVE(&ble_hs_conns, conn, ble_hs_conn, bhc_next);
   1f224:	4b06      	ldr	r3, [pc, #24]	; (1f240 <ble_hs_conn_remove+0x1c>)
   1f226:	681a      	ldr	r2, [r3, #0]
   1f228:	4282      	cmp	r2, r0
   1f22a:	d103      	bne.n	1f234 <ble_hs_conn_remove+0x10>
   1f22c:	6812      	ldr	r2, [r2, #0]
   1f22e:	601a      	str	r2, [r3, #0]
   1f230:	4770      	bx	lr
   1f232:	461a      	mov	r2, r3
   1f234:	6813      	ldr	r3, [r2, #0]
   1f236:	4283      	cmp	r3, r0
   1f238:	d1fb      	bne.n	1f232 <ble_hs_conn_remove+0xe>
   1f23a:	681b      	ldr	r3, [r3, #0]
   1f23c:	6013      	str	r3, [r2, #0]
}
   1f23e:	4770      	bx	lr
   1f240:	20002e30 	.word	0x20002e30

0001f244 <ble_hs_conn_find>:

    struct ble_hs_conn *conn;

    BLE_HS_DBG_ASSERT(ble_hs_locked_by_cur_task());

    SLIST_FOREACH(conn, &ble_hs_conns, bhc_next) {
   1f244:	4b04      	ldr	r3, [pc, #16]	; (1f258 <ble_hs_conn_find+0x14>)
   1f246:	681b      	ldr	r3, [r3, #0]
   1f248:	b123      	cbz	r3, 1f254 <ble_hs_conn_find+0x10>
        if (conn->bhc_handle == conn_handle) {
   1f24a:	889a      	ldrh	r2, [r3, #4]
   1f24c:	4282      	cmp	r2, r0
   1f24e:	d001      	beq.n	1f254 <ble_hs_conn_find+0x10>
    SLIST_FOREACH(conn, &ble_hs_conns, bhc_next) {
   1f250:	681b      	ldr	r3, [r3, #0]
   1f252:	e7f9      	b.n	1f248 <ble_hs_conn_find+0x4>
            return conn;
        }
    }

    return NULL;
}
   1f254:	4618      	mov	r0, r3
   1f256:	4770      	bx	lr
   1f258:	20002e30 	.word	0x20002e30

0001f25c <ble_hs_conn_insert>:
{
   1f25c:	b510      	push	{r4, lr}
   1f25e:	4604      	mov	r4, r0
    BLE_HS_DBG_ASSERT_EVAL(ble_hs_conn_find(conn->bhc_handle) == NULL);
   1f260:	8880      	ldrh	r0, [r0, #4]
   1f262:	f7ff ffef 	bl	1f244 <ble_hs_conn_find>
    SLIST_INSERT_HEAD(&ble_hs_conns, conn, bhc_next);
   1f266:	4b02      	ldr	r3, [pc, #8]	; (1f270 <ble_hs_conn_insert+0x14>)
   1f268:	681a      	ldr	r2, [r3, #0]
   1f26a:	6022      	str	r2, [r4, #0]
   1f26c:	601c      	str	r4, [r3, #0]
}
   1f26e:	bd10      	pop	{r4, pc}
   1f270:	20002e30 	.word	0x20002e30

0001f274 <ble_hs_conn_find_assert>:

struct ble_hs_conn *
ble_hs_conn_find_assert(uint16_t conn_handle)
{
   1f274:	b508      	push	{r3, lr}
    struct ble_hs_conn *conn;

    conn = ble_hs_conn_find(conn_handle);
   1f276:	f7ff ffe5 	bl	1f244 <ble_hs_conn_find>
    BLE_HS_DBG_ASSERT(conn != NULL);

    return conn;
}
   1f27a:	bd08      	pop	{r3, pc}

0001f27c <ble_hs_conn_find_by_idx>:
    int i;

    BLE_HS_DBG_ASSERT(ble_hs_locked_by_cur_task());

    i = 0;
    SLIST_FOREACH(conn, &ble_hs_conns, bhc_next) {
   1f27c:	4b05      	ldr	r3, [pc, #20]	; (1f294 <ble_hs_conn_find_by_idx+0x18>)
   1f27e:	681b      	ldr	r3, [r3, #0]
    i = 0;
   1f280:	2200      	movs	r2, #0
    SLIST_FOREACH(conn, &ble_hs_conns, bhc_next) {
   1f282:	b123      	cbz	r3, 1f28e <ble_hs_conn_find_by_idx+0x12>
        if (i == idx) {
   1f284:	4282      	cmp	r2, r0
   1f286:	d002      	beq.n	1f28e <ble_hs_conn_find_by_idx+0x12>
            return conn;
        }

        i++;
   1f288:	3201      	adds	r2, #1
    SLIST_FOREACH(conn, &ble_hs_conns, bhc_next) {
   1f28a:	681b      	ldr	r3, [r3, #0]
   1f28c:	e7f9      	b.n	1f282 <ble_hs_conn_find_by_idx+0x6>
    }

    return NULL;
}
   1f28e:	4618      	mov	r0, r3
   1f290:	4770      	bx	lr
   1f292:	bf00      	nop
   1f294:	20002e30 	.word	0x20002e30

0001f298 <ble_hs_conn_exists>:

int
ble_hs_conn_exists(uint16_t conn_handle)
{
   1f298:	b508      	push	{r3, lr}
#if !NIMBLE_BLE_CONNECT
    return 0;
#endif
    return ble_hs_conn_find(conn_handle) != NULL;
   1f29a:	f7ff ffd3 	bl	1f244 <ble_hs_conn_find>
}
   1f29e:	3000      	adds	r0, #0
   1f2a0:	bf18      	it	ne
   1f2a2:	2001      	movne	r0, #1
   1f2a4:	bd08      	pop	{r3, pc}
	...

0001f2a8 <ble_hs_conn_first>:
    return NULL;
#endif

    BLE_HS_DBG_ASSERT(ble_hs_locked_by_cur_task());
    return SLIST_FIRST(&ble_hs_conns);
}
   1f2a8:	4b01      	ldr	r3, [pc, #4]	; (1f2b0 <ble_hs_conn_first+0x8>)
   1f2aa:	6818      	ldr	r0, [r3, #0]
   1f2ac:	4770      	bx	lr
   1f2ae:	bf00      	nop
   1f2b0:	20002e30 	.word	0x20002e30

0001f2b4 <ble_hs_conn_addrs>:

void
ble_hs_conn_addrs(const struct ble_hs_conn *conn,
                  struct ble_hs_conn_addrs *addrs)
{
   1f2b4:	b570      	push	{r4, r5, r6, lr}
   1f2b6:	b082      	sub	sp, #8
   1f2b8:	4605      	mov	r5, r0
   1f2ba:	460c      	mov	r4, r1
    const uint8_t *our_id_addr_val;
    int rc;

    /* Determine our address information. */
    addrs->our_id_addr.type =
        ble_hs_misc_own_addr_type_to_id(conn->bhc_our_addr_type);
   1f2bc:	7980      	ldrb	r0, [r0, #6]
   1f2be:	f000 ff5b 	bl	20178 <ble_hs_misc_own_addr_type_to_id>
    addrs->our_id_addr.type =
   1f2c2:	7020      	strb	r0, [r4, #0]
    } else {
        rc = ble_hs_id_addr(addrs->our_id_addr.type, &our_id_addr_val, NULL);
        assert(rc == 0);
    }
#else
    rc = ble_hs_id_addr(addrs->our_id_addr.type, &our_id_addr_val, NULL);
   1f2c4:	2200      	movs	r2, #0
   1f2c6:	a901      	add	r1, sp, #4
   1f2c8:	f000 fe4c 	bl	1ff64 <ble_hs_id_addr>
    assert(rc == 0);
   1f2cc:	bb70      	cbnz	r0, 1f32c <ble_hs_conn_addrs+0x78>
#endif

    memcpy(addrs->our_id_addr.val, our_id_addr_val, 6);
   1f2ce:	9b01      	ldr	r3, [sp, #4]
   1f2d0:	681a      	ldr	r2, [r3, #0]
   1f2d2:	f8c4 2001 	str.w	r2, [r4, #1]
   1f2d6:	889b      	ldrh	r3, [r3, #4]
   1f2d8:	f8a4 3005 	strh.w	r3, [r4, #5]

    if (memcmp(conn->bhc_our_rpa_addr.val, ble_hs_conn_null_addr, 6) == 0) {
   1f2dc:	2206      	movs	r2, #6
   1f2de:	4929      	ldr	r1, [pc, #164]	; (1f384 <ble_hs_conn_addrs+0xd0>)
   1f2e0:	f105 000f 	add.w	r0, r5, #15
   1f2e4:	f7ef f8a0 	bl	e428 <memcmp>
   1f2e8:	bb50      	cbnz	r0, 1f340 <ble_hs_conn_addrs+0x8c>
        addrs->our_ota_addr = addrs->our_id_addr;
   1f2ea:	6822      	ldr	r2, [r4, #0]
   1f2ec:	f8c4 200e 	str.w	r2, [r4, #14]
   1f2f0:	88a1      	ldrh	r1, [r4, #4]
   1f2f2:	79a2      	ldrb	r2, [r4, #6]
   1f2f4:	8261      	strh	r1, [r4, #18]
   1f2f6:	7522      	strb	r2, [r4, #20]
    } else {
        addrs->our_ota_addr = conn->bhc_our_rpa_addr;
    }

    /* Determine peer address information. */
    addrs->peer_id_addr = conn->bhc_peer_addr;
   1f2f8:	462b      	mov	r3, r5
   1f2fa:	f853 1f07 	ldr.w	r1, [r3, #7]!
   1f2fe:	f8c4 1007 	str.w	r1, [r4, #7]
   1f302:	8898      	ldrh	r0, [r3, #4]
   1f304:	7999      	ldrb	r1, [r3, #6]
   1f306:	f8a4 000b 	strh.w	r0, [r4, #11]
   1f30a:	7361      	strb	r1, [r4, #13]
    addrs->peer_ota_addr = conn->bhc_peer_addr;
   1f30c:	f104 0215 	add.w	r2, r4, #21
   1f310:	6819      	ldr	r1, [r3, #0]
   1f312:	f8c4 1015 	str.w	r1, [r4, #21]
   1f316:	8898      	ldrh	r0, [r3, #4]
   1f318:	7999      	ldrb	r1, [r3, #6]
   1f31a:	8090      	strh	r0, [r2, #4]
   1f31c:	7191      	strb	r1, [r2, #6]
    switch (conn->bhc_peer_addr.type) {
   1f31e:	79eb      	ldrb	r3, [r5, #7]
   1f320:	2b02      	cmp	r3, #2
   1f322:	d017      	beq.n	1f354 <ble_hs_conn_addrs+0xa0>
   1f324:	2b03      	cmp	r3, #3
   1f326:	d021      	beq.n	1f36c <ble_hs_conn_addrs+0xb8>

    default:
        BLE_HS_DBG_ASSERT(0);
        break;
    }
}
   1f328:	b002      	add	sp, #8
   1f32a:	bd70      	pop	{r4, r5, r6, pc}
    assert(rc == 0);
   1f32c:	f7ec ff5c 	bl	c1e8 <hal_debugger_connected>
   1f330:	b100      	cbz	r0, 1f334 <ble_hs_conn_addrs+0x80>
   1f332:	be01      	bkpt	0x0001
   1f334:	2300      	movs	r3, #0
   1f336:	461a      	mov	r2, r3
   1f338:	4619      	mov	r1, r3
   1f33a:	4618      	mov	r0, r3
   1f33c:	f7ed f98e 	bl	c65c <__assert_func>
        addrs->our_ota_addr = conn->bhc_our_rpa_addr;
   1f340:	462a      	mov	r2, r5
   1f342:	f852 1f0e 	ldr.w	r1, [r2, #14]!
   1f346:	f8c4 100e 	str.w	r1, [r4, #14]
   1f34a:	8891      	ldrh	r1, [r2, #4]
   1f34c:	7992      	ldrb	r2, [r2, #6]
   1f34e:	8261      	strh	r1, [r4, #18]
   1f350:	7522      	strb	r2, [r4, #20]
   1f352:	e7d1      	b.n	1f2f8 <ble_hs_conn_addrs+0x44>
        addrs->peer_id_addr.type = BLE_ADDR_PUBLIC;
   1f354:	2300      	movs	r3, #0
   1f356:	71e3      	strb	r3, [r4, #7]
        addrs->peer_ota_addr = conn->bhc_peer_rpa_addr;
   1f358:	f855 2f15 	ldr.w	r2, [r5, #21]!
   1f35c:	f8c4 2015 	str.w	r2, [r4, #21]
   1f360:	88a9      	ldrh	r1, [r5, #4]
   1f362:	79aa      	ldrb	r2, [r5, #6]
   1f364:	f8a4 1019 	strh.w	r1, [r4, #25]
   1f368:	76e2      	strb	r2, [r4, #27]
        break;
   1f36a:	e7dd      	b.n	1f328 <ble_hs_conn_addrs+0x74>
        addrs->peer_id_addr.type = BLE_ADDR_RANDOM;
   1f36c:	2301      	movs	r3, #1
   1f36e:	71e3      	strb	r3, [r4, #7]
        addrs->peer_ota_addr = conn->bhc_peer_rpa_addr;
   1f370:	f855 2f15 	ldr.w	r2, [r5, #21]!
   1f374:	f8c4 2015 	str.w	r2, [r4, #21]
   1f378:	88a9      	ldrh	r1, [r5, #4]
   1f37a:	79aa      	ldrb	r2, [r5, #6]
   1f37c:	f8a4 1019 	strh.w	r1, [r4, #25]
   1f380:	76e2      	strb	r2, [r4, #27]
}
   1f382:	e7d1      	b.n	1f328 <ble_hs_conn_addrs+0x74>
   1f384:	20002e0c 	.word	0x20002e0c

0001f388 <ble_hs_conn_timer>:

int32_t
ble_hs_conn_timer(void)
{
   1f388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return os_time_get();
   1f38a:	f7ee f973 	bl	d674 <os_time_get>
   1f38e:	4607      	mov	r7, r0

    conn_handle = BLE_HS_CONN_HANDLE_NONE;
    next_exp_in = BLE_HS_FOREVER;
    now = ble_npl_time_get();

    ble_hs_lock();
   1f390:	f7ff f8c8 	bl	1e524 <ble_hs_lock>
     * 1. Determine if any connections need to be terminated due to timeout.
     *    If so, break out of the loop and terminate the connection.  This
     *    function will need to be executed again.
     * 2. Otherwise, determine when the next timeout will occur.
     */
    SLIST_FOREACH(conn, &ble_hs_conns, bhc_next) {
   1f394:	4b1c      	ldr	r3, [pc, #112]	; (1f408 <ble_hs_conn_timer+0x80>)
   1f396:	681c      	ldr	r4, [r3, #0]
    next_exp_in = BLE_HS_FOREVER;
   1f398:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
    SLIST_FOREACH(conn, &ble_hs_conns, bhc_next) {
   1f39c:	e00d      	b.n	1f3ba <ble_hs_conn_timer+0x32>
                if (time_diff <= 0) {
                    /* ACL reassembly has timed out.  Remember the connection
                     * handle so it can be terminated after the mutex is
                     * unlocked.
                     */
                    conn_handle = conn->bhc_handle;
   1f39e:	88a4      	ldrh	r4, [r4, #4]
                    break;
   1f3a0:	e021      	b.n	1f3e6 <ble_hs_conn_timer+0x5e>
   1f3a2:	4635      	mov	r5, r6
#if BLE_HS_ATT_SVR_QUEUED_WRITE_TMO
            /* Check each connection's rx queued write timer.  If too much
             * time passes after a prep write is received, the queue is
             * cleared.
             */
            time_diff = ble_att_svr_ticks_until_tmo(&conn->bhc_att_svr, now);
   1f3a4:	4639      	mov	r1, r7
   1f3a6:	f104 0044 	add.w	r0, r4, #68	; 0x44
   1f3aa:	f005 fe12 	bl	24fd2 <ble_att_svr_ticks_until_tmo>
            if (time_diff <= 0) {
   1f3ae:	1e06      	subs	r6, r0, #0
   1f3b0:	dd14      	ble.n	1f3dc <ble_hs_conn_timer+0x54>
                conn_handle = conn->bhc_handle;
                break;
            }

            /* Determine if this connection is the soonest to time out. */
            if (time_diff < next_exp_in) {
   1f3b2:	42b5      	cmp	r5, r6
   1f3b4:	dc00      	bgt.n	1f3b8 <ble_hs_conn_timer+0x30>
   1f3b6:	462e      	mov	r6, r5
    SLIST_FOREACH(conn, &ble_hs_conns, bhc_next) {
   1f3b8:	6824      	ldr	r4, [r4, #0]
   1f3ba:	b194      	cbz	r4, 1f3e2 <ble_hs_conn_timer+0x5a>
        if (!(conn->bhc_flags & BLE_HS_CONN_F_TERMINATING)) {
   1f3bc:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   1f3c0:	f013 0f02 	tst.w	r3, #2
   1f3c4:	d1f8      	bne.n	1f3b8 <ble_hs_conn_timer+0x30>
            if (conn->bhc_rx_chan != NULL) {
   1f3c6:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1f3c8:	2b00      	cmp	r3, #0
   1f3ca:	d0ea      	beq.n	1f3a2 <ble_hs_conn_timer+0x1a>
                time_diff = conn->bhc_rx_timeout - now;
   1f3cc:	6b65      	ldr	r5, [r4, #52]	; 0x34
   1f3ce:	1bed      	subs	r5, r5, r7
                if (time_diff <= 0) {
   1f3d0:	2d00      	cmp	r5, #0
   1f3d2:	dde4      	ble.n	1f39e <ble_hs_conn_timer+0x16>
                if (time_diff < next_exp_in) {
   1f3d4:	42ae      	cmp	r6, r5
   1f3d6:	dce5      	bgt.n	1f3a4 <ble_hs_conn_timer+0x1c>
   1f3d8:	4635      	mov	r5, r6
   1f3da:	e7e3      	b.n	1f3a4 <ble_hs_conn_timer+0x1c>
                conn_handle = conn->bhc_handle;
   1f3dc:	88a4      	ldrh	r4, [r4, #4]
                break;
   1f3de:	462e      	mov	r6, r5
   1f3e0:	e001      	b.n	1f3e6 <ble_hs_conn_timer+0x5e>
    conn_handle = BLE_HS_CONN_HANDLE_NONE;
   1f3e2:	f64f 74ff 	movw	r4, #65535	; 0xffff
            }
#endif
        }
    }

    ble_hs_unlock();
   1f3e6:	f7ff f8a1 	bl	1e52c <ble_hs_unlock>
    /* If a connection has timed out, terminate it.  We need to recursively
     * call this function again to determine when the next timeout is.  This
     * is a tail-recursive call, so it should be optimized to execute in the
     * same stack frame.
     */
    if (conn_handle != BLE_HS_CONN_HANDLE_NONE) {
   1f3ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1f3ee:	429c      	cmp	r4, r3
   1f3f0:	d101      	bne.n	1f3f6 <ble_hs_conn_timer+0x6e>
        ble_gap_terminate(conn_handle, BLE_ERR_REM_USER_CONN_TERM);
        return ble_hs_conn_timer();
    }

    return next_exp_in;
}
   1f3f2:	4630      	mov	r0, r6
   1f3f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ble_gap_terminate(conn_handle, BLE_ERR_REM_USER_CONN_TERM);
   1f3f6:	2113      	movs	r1, #19
   1f3f8:	4620      	mov	r0, r4
   1f3fa:	f7fb ff27 	bl	1b24c <ble_gap_terminate>
        return ble_hs_conn_timer();
   1f3fe:	f7ff ffc3 	bl	1f388 <ble_hs_conn_timer>
   1f402:	4606      	mov	r6, r0
   1f404:	e7f5      	b.n	1f3f2 <ble_hs_conn_timer+0x6a>
   1f406:	bf00      	nop
   1f408:	20002e30 	.word	0x20002e30

0001f40c <ble_hs_conn_init>:

int
ble_hs_conn_init(void)
{
   1f40c:	b500      	push	{lr}
   1f40e:	b083      	sub	sp, #12
    int rc;

    rc = os_mempool_init(&ble_hs_conn_pool, MYNEWT_VAL(BLE_MAX_CONNECTIONS),
   1f410:	4b07      	ldr	r3, [pc, #28]	; (1f430 <ble_hs_conn_init+0x24>)
   1f412:	9300      	str	r3, [sp, #0]
   1f414:	4b07      	ldr	r3, [pc, #28]	; (1f434 <ble_hs_conn_init+0x28>)
   1f416:	2264      	movs	r2, #100	; 0x64
   1f418:	2101      	movs	r1, #1
   1f41a:	4807      	ldr	r0, [pc, #28]	; (1f438 <ble_hs_conn_init+0x2c>)
   1f41c:	f7ed fd44 	bl	cea8 <os_mempool_init>
                         sizeof (struct ble_hs_conn),
                         ble_hs_conn_elem_mem, "ble_hs_conn_pool");
    if (rc != 0) {
   1f420:	b920      	cbnz	r0, 1f42c <ble_hs_conn_init+0x20>
        return BLE_HS_EOS;
    }

    SLIST_INIT(&ble_hs_conns);
   1f422:	4b06      	ldr	r3, [pc, #24]	; (1f43c <ble_hs_conn_init+0x30>)
   1f424:	6018      	str	r0, [r3, #0]

    return 0;
}
   1f426:	b003      	add	sp, #12
   1f428:	f85d fb04 	ldr.w	pc, [sp], #4
        return BLE_HS_EOS;
   1f42c:	200b      	movs	r0, #11
   1f42e:	e7fa      	b.n	1f426 <ble_hs_conn_init+0x1a>
   1f430:	0002b544 	.word	0x0002b544
   1f434:	20002da8 	.word	0x20002da8
   1f438:	20002e14 	.word	0x20002e14
   1f43c:	20002e30 	.word	0x20002e30

0001f440 <ble_hs_flow_connection_broken>:
    MYNEWT_VAL(BLE_HS_FLOW_CTRL_TX_ON_DISCONNECT)
    ble_hs_lock();
    ble_hs_flow_tx_num_comp_pkts();
    ble_hs_unlock();
#endif
}
   1f440:	4770      	bx	lr

0001f442 <ble_hs_flow_fill_acl_usrhdr>:
    conn_handle = OS_MBUF_USRHDR(om);

    hdr = (void *)om->om_data;
    *conn_handle = BLE_HCI_DATA_HANDLE(hdr->hdh_handle_pb_bc);
#endif
}
   1f442:	4770      	bx	lr

0001f444 <ble_hs_flow_startup>:
    ble_npl_callout_init(&ble_hs_flow_timer, ble_hs_evq_get(),
                         ble_hs_flow_event_cb, NULL);
#endif

    return 0;
}
   1f444:	2000      	movs	r0, #0
   1f446:	4770      	bx	lr

0001f448 <ble_hs_hci_rx_cmd_complete>:
{
    const struct ble_hci_ev_command_complete *ev = data;
    const struct ble_hci_ev_command_complete_nop *nop = data;
    uint16_t opcode;

    if (len < sizeof(*ev)) {
   1f448:	2903      	cmp	r1, #3
   1f44a:	d809      	bhi.n	1f460 <ble_hs_hci_rx_cmd_complete+0x18>
        if (len < sizeof(*nop)) {
   1f44c:	2902      	cmp	r1, #2
   1f44e:	d91c      	bls.n	1f48a <ble_hs_hci_rx_cmd_complete+0x42>
            return BLE_HS_ECONTROLLER;
        }

        /* nop is special as it doesn't have status and response */

        opcode = le16toh(nop->opcode);
   1f450:	f8b0 3001 	ldrh.w	r3, [r0, #1]
        if (opcode != BLE_HCI_OPCODE_NOP) {
   1f454:	b9db      	cbnz	r3, 1f48e <ble_hs_hci_rx_cmd_complete+0x46>
            return BLE_HS_ECONTROLLER;
        }

        /* TODO Process num_pkts field. */

        out_ack->bha_status = 0;
   1f456:	2100      	movs	r1, #0
   1f458:	6011      	str	r1, [r2, #0]
        out_ack->bha_params = NULL;
   1f45a:	6051      	str	r1, [r2, #4]
        out_ack->bha_params_len = 0;
   1f45c:	6091      	str	r1, [r2, #8]
        return 0;
   1f45e:	e00c      	b.n	1f47a <ble_hs_hci_rx_cmd_complete+0x32>
    }

    opcode = le16toh(ev->opcode);
   1f460:	f8b0 3001 	ldrh.w	r3, [r0, #1]

    /* TODO Process num_pkts field. */

    out_ack->bha_opcode = opcode;
   1f464:	8193      	strh	r3, [r2, #12]

    out_ack->bha_status = BLE_HS_HCI_ERR(ev->status);
   1f466:	78c3      	ldrb	r3, [r0, #3]
   1f468:	b14b      	cbz	r3, 1f47e <ble_hs_hci_rx_cmd_complete+0x36>
   1f46a:	f503 7300 	add.w	r3, r3, #512	; 0x200
   1f46e:	6013      	str	r3, [r2, #0]
    out_ack->bha_params_len = len - sizeof(*ev);
   1f470:	3904      	subs	r1, #4
   1f472:	6091      	str	r1, [r2, #8]
    if (out_ack->bha_params_len) {
   1f474:	b929      	cbnz	r1, 1f482 <ble_hs_hci_rx_cmd_complete+0x3a>
        out_ack->bha_params = ev->return_params;
    } else {
        out_ack->bha_params = NULL;
   1f476:	2300      	movs	r3, #0
   1f478:	6053      	str	r3, [r2, #4]
    }

    return 0;
}
   1f47a:	4608      	mov	r0, r1
   1f47c:	4770      	bx	lr
    out_ack->bha_status = BLE_HS_HCI_ERR(ev->status);
   1f47e:	2300      	movs	r3, #0
   1f480:	e7f5      	b.n	1f46e <ble_hs_hci_rx_cmd_complete+0x26>
        out_ack->bha_params = ev->return_params;
   1f482:	3004      	adds	r0, #4
   1f484:	6050      	str	r0, [r2, #4]
    return 0;
   1f486:	2100      	movs	r1, #0
   1f488:	e7f7      	b.n	1f47a <ble_hs_hci_rx_cmd_complete+0x32>
            return BLE_HS_ECONTROLLER;
   1f48a:	210c      	movs	r1, #12
   1f48c:	e7f5      	b.n	1f47a <ble_hs_hci_rx_cmd_complete+0x32>
            return BLE_HS_ECONTROLLER;
   1f48e:	210c      	movs	r1, #12
   1f490:	e7f3      	b.n	1f47a <ble_hs_hci_rx_cmd_complete+0x32>

0001f492 <ble_hs_hci_rx_cmd_status>:
ble_hs_hci_rx_cmd_status(const void *data, int len,
                         struct ble_hs_hci_ack *out_ack)
{
    const struct ble_hci_ev_command_status *ev = data;

    if (len != sizeof(*ev)) {
   1f492:	2904      	cmp	r1, #4
   1f494:	d10d      	bne.n	1f4b2 <ble_hs_hci_rx_cmd_status+0x20>
        return BLE_HS_ECONTROLLER;
    }

    /* XXX: Process num_pkts field. */

    out_ack->bha_opcode = le16toh(ev->opcode);
   1f496:	8843      	ldrh	r3, [r0, #2]
   1f498:	8193      	strh	r3, [r2, #12]
    out_ack->bha_params = NULL;
   1f49a:	2300      	movs	r3, #0
   1f49c:	6053      	str	r3, [r2, #4]
    out_ack->bha_params_len = 0;
   1f49e:	6093      	str	r3, [r2, #8]
    out_ack->bha_status = BLE_HS_HCI_ERR(ev->status);
   1f4a0:	7803      	ldrb	r3, [r0, #0]
   1f4a2:	b123      	cbz	r3, 1f4ae <ble_hs_hci_rx_cmd_status+0x1c>
   1f4a4:	f503 7300 	add.w	r3, r3, #512	; 0x200
   1f4a8:	6013      	str	r3, [r2, #0]

    return 0;
   1f4aa:	2000      	movs	r0, #0
   1f4ac:	4770      	bx	lr
    out_ack->bha_status = BLE_HS_HCI_ERR(ev->status);
   1f4ae:	2300      	movs	r3, #0
   1f4b0:	e7fa      	b.n	1f4a8 <ble_hs_hci_rx_cmd_status+0x16>
        return BLE_HS_ECONTROLLER;
   1f4b2:	200c      	movs	r0, #12
}
   1f4b4:	4770      	bx	lr
	...

0001f4b8 <ble_hs_hci_max_acl_payload_sz>:
     * The LE_Read_Buffer_Size command is used to read the maximum size of the
     * data portion of HCI LE ACL Data Packets sent from the Host to the
     * Controller.
     */
    return ble_hs_hci_buf_sz;
}
   1f4b8:	4b01      	ldr	r3, [pc, #4]	; (1f4c0 <ble_hs_hci_max_acl_payload_sz+0x8>)
   1f4ba:	8818      	ldrh	r0, [r3, #0]
   1f4bc:	4770      	bx	lr
   1f4be:	bf00      	nop
   1f4c0:	20002e38 	.word	0x20002e38

0001f4c4 <ble_hs_hci_lock>:
{
   1f4c4:	b508      	push	{r3, lr}
    return (ble_npl_error_t)os_mutex_pend(&mu->mu, timeout);
   1f4c6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1f4ca:	4802      	ldr	r0, [pc, #8]	; (1f4d4 <ble_hs_hci_lock+0x10>)
   1f4cc:	f7ee fed8 	bl	e280 <os_mutex_pend>
}
   1f4d0:	bd08      	pop	{r3, pc}
   1f4d2:	bf00      	nop
   1f4d4:	20002f80 	.word	0x20002f80

0001f4d8 <ble_hs_hci_wait_for_ack>:
{
   1f4d8:	b508      	push	{r3, lr}
    return (ble_npl_error_t)os_sem_pend(&sem->sem, timeout);
   1f4da:	f44f 7180 	mov.w	r1, #256	; 0x100
   1f4de:	4808      	ldr	r0, [pc, #32]	; (1f500 <ble_hs_hci_wait_for_ack+0x28>)
   1f4e0:	f00a fa48 	bl	29974 <os_sem_pend>
    rc = ble_npl_sem_pend(&ble_hs_hci_sem,
   1f4e4:	4603      	mov	r3, r0
    switch (rc) {
   1f4e6:	b130      	cbz	r0, 1f4f6 <ble_hs_hci_wait_for_ack+0x1e>
   1f4e8:	2806      	cmp	r0, #6
   1f4ea:	d106      	bne.n	1f4fa <ble_hs_hci_wait_for_ack+0x22>
        STATS_INC(ble_hs_stats, hci_timeout);
   1f4ec:	4a05      	ldr	r2, [pc, #20]	; (1f504 <ble_hs_hci_wait_for_ack+0x2c>)
   1f4ee:	6a53      	ldr	r3, [r2, #36]	; 0x24
   1f4f0:	3301      	adds	r3, #1
   1f4f2:	6253      	str	r3, [r2, #36]	; 0x24
        rc = BLE_HS_ETIMEOUT_HCI;
   1f4f4:	2313      	movs	r3, #19
}
   1f4f6:	4618      	mov	r0, r3
   1f4f8:	bd08      	pop	{r3, pc}
        rc = BLE_HS_EOS;
   1f4fa:	230b      	movs	r3, #11
    return rc;
   1f4fc:	e7fb      	b.n	1f4f6 <ble_hs_hci_wait_for_ack+0x1e>
   1f4fe:	bf00      	nop
   1f500:	20002f8c 	.word	0x20002f8c
   1f504:	200045f4 	.word	0x200045f4

0001f508 <ble_hs_hci_process_ack>:
{
   1f508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f50c:	4607      	mov	r7, r0
   1f50e:	460e      	mov	r6, r1
   1f510:	4690      	mov	r8, r2
   1f512:	461c      	mov	r4, r3
    STATS_INC(ble_hs_stats, hci_event);
   1f514:	4a1e      	ldr	r2, [pc, #120]	; (1f590 <ble_hs_hci_process_ack+0x88>)
   1f516:	6993      	ldr	r3, [r2, #24]
   1f518:	3301      	adds	r3, #1
   1f51a:	6193      	str	r3, [r2, #24]
    memset(out_ack, 0, sizeof *out_ack);
   1f51c:	2300      	movs	r3, #0
   1f51e:	6023      	str	r3, [r4, #0]
   1f520:	6063      	str	r3, [r4, #4]
   1f522:	60a3      	str	r3, [r4, #8]
   1f524:	60e3      	str	r3, [r4, #12]
    switch (ble_hs_hci_ack->opcode) {
   1f526:	4b1b      	ldr	r3, [pc, #108]	; (1f594 <ble_hs_hci_process_ack+0x8c>)
   1f528:	6818      	ldr	r0, [r3, #0]
   1f52a:	7803      	ldrb	r3, [r0, #0]
   1f52c:	2b0e      	cmp	r3, #14
   1f52e:	d00a      	beq.n	1f546 <ble_hs_hci_process_ack+0x3e>
   1f530:	2b0f      	cmp	r3, #15
   1f532:	d01e      	beq.n	1f572 <ble_hs_hci_process_ack+0x6a>
        rc = BLE_HS_EUNKNOWN;
   1f534:	2511      	movs	r5, #17
    if (rc != 0) {
   1f536:	b11d      	cbz	r5, 1f540 <ble_hs_hci_process_ack+0x38>
        STATS_INC(ble_hs_stats, hci_invalid_ack);
   1f538:	4a15      	ldr	r2, [pc, #84]	; (1f590 <ble_hs_hci_process_ack+0x88>)
   1f53a:	69d3      	ldr	r3, [r2, #28]
   1f53c:	3301      	adds	r3, #1
   1f53e:	61d3      	str	r3, [r2, #28]
}
   1f540:	4628      	mov	r0, r5
   1f542:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = ble_hs_hci_rx_cmd_complete(ble_hs_hci_ack->data,
   1f546:	4622      	mov	r2, r4
   1f548:	7841      	ldrb	r1, [r0, #1]
   1f54a:	3002      	adds	r0, #2
   1f54c:	f7ff ff7c 	bl	1f448 <ble_hs_hci_rx_cmd_complete>
   1f550:	4605      	mov	r5, r0
    if (rc == 0) {
   1f552:	2d00      	cmp	r5, #0
   1f554:	d1ef      	bne.n	1f536 <ble_hs_hci_process_ack+0x2e>
        if (params_buf == NULL || out_ack->bha_params == NULL) {
   1f556:	b19e      	cbz	r6, 1f580 <ble_hs_hci_process_ack+0x78>
   1f558:	6861      	ldr	r1, [r4, #4]
   1f55a:	b189      	cbz	r1, 1f580 <ble_hs_hci_process_ack+0x78>
            if (out_ack->bha_params_len > params_buf_len) {
   1f55c:	68a3      	ldr	r3, [r4, #8]
   1f55e:	4543      	cmp	r3, r8
   1f560:	dd02      	ble.n	1f568 <ble_hs_hci_process_ack+0x60>
                out_ack->bha_params_len = params_buf_len;
   1f562:	f8c4 8008 	str.w	r8, [r4, #8]
                rc = BLE_HS_ECONTROLLER;
   1f566:	250c      	movs	r5, #12
            memcpy(params_buf, out_ack->bha_params, out_ack->bha_params_len);
   1f568:	68a2      	ldr	r2, [r4, #8]
   1f56a:	4630      	mov	r0, r6
   1f56c:	f7ee ff80 	bl	e470 <memcpy>
   1f570:	e008      	b.n	1f584 <ble_hs_hci_process_ack+0x7c>
        rc = ble_hs_hci_rx_cmd_status(ble_hs_hci_ack->data,
   1f572:	4622      	mov	r2, r4
   1f574:	7841      	ldrb	r1, [r0, #1]
   1f576:	3002      	adds	r0, #2
   1f578:	f7ff ff8b 	bl	1f492 <ble_hs_hci_rx_cmd_status>
   1f57c:	4605      	mov	r5, r0
        break;
   1f57e:	e7e8      	b.n	1f552 <ble_hs_hci_process_ack+0x4a>
            out_ack->bha_params_len = 0;
   1f580:	2300      	movs	r3, #0
   1f582:	60a3      	str	r3, [r4, #8]
        out_ack->bha_params = params_buf;
   1f584:	6066      	str	r6, [r4, #4]
        if (out_ack->bha_opcode != expected_opcode) {
   1f586:	89a3      	ldrh	r3, [r4, #12]
   1f588:	42bb      	cmp	r3, r7
   1f58a:	d0d4      	beq.n	1f536 <ble_hs_hci_process_ack+0x2e>
            rc = BLE_HS_ECONTROLLER;
   1f58c:	250c      	movs	r5, #12
   1f58e:	e7d3      	b.n	1f538 <ble_hs_hci_process_ack+0x30>
   1f590:	200045f4 	.word	0x200045f4
   1f594:	20002e34 	.word	0x20002e34

0001f598 <ble_hs_hci_unlock>:
{
   1f598:	b508      	push	{r3, lr}
    return (ble_npl_error_t)os_mutex_release(&mu->mu);
   1f59a:	4802      	ldr	r0, [pc, #8]	; (1f5a4 <ble_hs_hci_unlock+0xc>)
   1f59c:	f7ee fe10 	bl	e1c0 <os_mutex_release>
}
   1f5a0:	bd08      	pop	{r3, pc}
   1f5a2:	bf00      	nop
   1f5a4:	20002f80 	.word	0x20002f80

0001f5a8 <ble_hs_hci_rx_ack>:
{
   1f5a8:	b508      	push	{r3, lr}
/**
 * Get current semaphore's count
 */
static inline uint16_t os_sem_get_count(struct os_sem *sem)
{
    return sem->sem_tokens;
   1f5aa:	4b06      	ldr	r3, [pc, #24]	; (1f5c4 <ble_hs_hci_rx_ack+0x1c>)
   1f5ac:	88db      	ldrh	r3, [r3, #6]
    if (ble_npl_sem_get_count(&ble_hs_hci_sem) > 0) {
   1f5ae:	b92b      	cbnz	r3, 1f5bc <ble_hs_hci_rx_ack+0x14>
    ble_hs_hci_ack = (struct ble_hci_ev *) ack_ev;
   1f5b0:	4b05      	ldr	r3, [pc, #20]	; (1f5c8 <ble_hs_hci_rx_ack+0x20>)
   1f5b2:	6018      	str	r0, [r3, #0]
    return (ble_npl_error_t)os_sem_release(&sem->sem);
   1f5b4:	4803      	ldr	r0, [pc, #12]	; (1f5c4 <ble_hs_hci_rx_ack+0x1c>)
   1f5b6:	f00a f9ab 	bl	29910 <os_sem_release>
}
   1f5ba:	bd08      	pop	{r3, pc}
        ble_hci_trans_buf_free(ack_ev);
   1f5bc:	f006 fd86 	bl	260cc <ble_hci_trans_buf_free>
        return;
   1f5c0:	e7fb      	b.n	1f5ba <ble_hs_hci_rx_ack+0x12>
   1f5c2:	bf00      	nop
   1f5c4:	20002f8c 	.word	0x20002f8c
   1f5c8:	20002e34 	.word	0x20002e34

0001f5cc <ble_hs_hci_frag_alloc>:
/**
 * Allocates an mbuf to contain an outgoing ACL data fragment.
 */
static struct os_mbuf *
ble_hs_hci_frag_alloc(uint16_t frag_size, void *arg)
{
   1f5cc:	b508      	push	{r3, lr}
    struct os_mbuf *om;

    /* Prefer the dedicated one-element fragment pool. */
    om = os_mbuf_get_pkthdr(&ble_hs_hci_frag_mbuf_pool, 0);
   1f5ce:	2100      	movs	r1, #0
   1f5d0:	4806      	ldr	r0, [pc, #24]	; (1f5ec <ble_hs_hci_frag_alloc+0x20>)
   1f5d2:	f7ee f9fb 	bl	d9cc <os_mbuf_get_pkthdr>
    if (om != NULL) {
   1f5d6:	b128      	cbz	r0, 1f5e4 <ble_hs_hci_frag_alloc+0x18>
   1f5d8:	4603      	mov	r3, r0
        om->om_data += BLE_HCI_DATA_HDR_SZ;
   1f5da:	6802      	ldr	r2, [r0, #0]
   1f5dc:	3204      	adds	r2, #4
   1f5de:	6002      	str	r2, [r0, #0]
    if (om != NULL) {
        return om;
    }

    return NULL;
}
   1f5e0:	4618      	mov	r0, r3
   1f5e2:	bd08      	pop	{r3, pc}
    om = ble_hs_mbuf_acl_pkt();
   1f5e4:	f000 fd51 	bl	2008a <ble_hs_mbuf_acl_pkt>
   1f5e8:	4603      	mov	r3, r0
   1f5ea:	e7f9      	b.n	1f5e0 <ble_hs_hci_frag_alloc+0x14>
   1f5ec:	20002f58 	.word	0x20002f58

0001f5f0 <ble_hs_hci_acl_hdr_prepend>:
}

static struct os_mbuf *
ble_hs_hci_acl_hdr_prepend(struct os_mbuf *om, uint16_t handle,
                           uint8_t pb_flag)
{
   1f5f0:	b510      	push	{r4, lr}
   1f5f2:	b082      	sub	sp, #8
   1f5f4:	4604      	mov	r4, r0
   1f5f6:	4608      	mov	r0, r1
   1f5f8:	4611      	mov	r1, r2
    struct hci_data_hdr hci_hdr;
    struct os_mbuf *om2;

    hci_hdr.hdh_handle_pb_bc =
        ble_hs_hci_util_handle_pb_bc_join(handle, pb_flag, 0);
   1f5fa:	2200      	movs	r2, #0
   1f5fc:	f000 fbd6 	bl	1fdac <ble_hs_hci_util_handle_pb_bc_join>
    hci_hdr.hdh_handle_pb_bc =
   1f600:	f8ad 0004 	strh.w	r0, [sp, #4]
    put_le16(&hci_hdr.hdh_len, OS_MBUF_PKTHDR(om)->omp_len);
   1f604:	8a21      	ldrh	r1, [r4, #16]
   1f606:	f10d 0006 	add.w	r0, sp, #6
   1f60a:	f00a f89f 	bl	2974c <put_le16>

    om2 = os_mbuf_prepend(om, sizeof hci_hdr);
   1f60e:	2104      	movs	r1, #4
   1f610:	4620      	mov	r0, r4
   1f612:	f7ee fbbd 	bl	dd90 <os_mbuf_prepend>
    if (om2 == NULL) {
   1f616:	4604      	mov	r4, r0
   1f618:	b158      	cbz	r0, 1f632 <ble_hs_hci_acl_hdr_prepend+0x42>
        return NULL;
    }

    om = om2;
    om = os_mbuf_pullup(om, sizeof hci_hdr);
   1f61a:	2104      	movs	r1, #4
   1f61c:	f7ee fcb2 	bl	df84 <os_mbuf_pullup>
    if (om == NULL) {
   1f620:	4604      	mov	r4, r0
   1f622:	b130      	cbz	r0, 1f632 <ble_hs_hci_acl_hdr_prepend+0x42>
        return NULL;
    }

    memcpy(om->om_data, &hci_hdr, sizeof hci_hdr);
   1f624:	6803      	ldr	r3, [r0, #0]
   1f626:	9a01      	ldr	r2, [sp, #4]
   1f628:	601a      	str	r2, [r3, #0]

#if !BLE_MONITOR
    BLE_HS_LOG(DEBUG, "host tx hci data; handle=%d length=%d\n", handle,
   1f62a:	f10d 0006 	add.w	r0, sp, #6
   1f62e:	f00a f8ae 	bl	2978e <get_le16>
               get_le16(&hci_hdr.hdh_len));
#endif

    return om;
}
   1f632:	4620      	mov	r0, r4
   1f634:	b002      	add	sp, #8
   1f636:	bd10      	pop	{r4, pc}

0001f638 <ble_hs_hci_set_buf_sz>:
    if (pktlen == 0 || max_pkts == 0) {
   1f638:	b130      	cbz	r0, 1f648 <ble_hs_hci_set_buf_sz+0x10>
   1f63a:	b139      	cbz	r1, 1f64c <ble_hs_hci_set_buf_sz+0x14>
    ble_hs_hci_buf_sz = pktlen;
   1f63c:	4a04      	ldr	r2, [pc, #16]	; (1f650 <ble_hs_hci_set_buf_sz+0x18>)
   1f63e:	8010      	strh	r0, [r2, #0]
    ble_hs_hci_avail_pkts = max_pkts;
   1f640:	4b04      	ldr	r3, [pc, #16]	; (1f654 <ble_hs_hci_set_buf_sz+0x1c>)
   1f642:	8019      	strh	r1, [r3, #0]
    return 0;
   1f644:	2000      	movs	r0, #0
   1f646:	4770      	bx	lr
        return BLE_HS_EINVAL;
   1f648:	2003      	movs	r0, #3
   1f64a:	4770      	bx	lr
   1f64c:	2003      	movs	r0, #3
}
   1f64e:	4770      	bx	lr
   1f650:	20002e38 	.word	0x20002e38
   1f654:	20004652 	.word	0x20004652

0001f658 <ble_hs_hci_add_avail_pkts>:
{
   1f658:	b508      	push	{r3, lr}
    if (ble_hs_hci_avail_pkts + delta > UINT16_MAX) {
   1f65a:	4b07      	ldr	r3, [pc, #28]	; (1f678 <ble_hs_hci_add_avail_pkts+0x20>)
   1f65c:	881b      	ldrh	r3, [r3, #0]
   1f65e:	181a      	adds	r2, r3, r0
   1f660:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
   1f664:	da03      	bge.n	1f66e <ble_hs_hci_add_avail_pkts+0x16>
        ble_hs_hci_avail_pkts += delta;
   1f666:	4403      	add	r3, r0
   1f668:	4a03      	ldr	r2, [pc, #12]	; (1f678 <ble_hs_hci_add_avail_pkts+0x20>)
   1f66a:	8013      	strh	r3, [r2, #0]
}
   1f66c:	bd08      	pop	{r3, pc}
        ble_hs_sched_reset(BLE_HS_ECONTROLLER);
   1f66e:	200c      	movs	r0, #12
   1f670:	f7ff f874 	bl	1e75c <ble_hs_sched_reset>
   1f674:	e7fa      	b.n	1f66c <ble_hs_hci_add_avail_pkts+0x14>
   1f676:	bf00      	nop
   1f678:	20004652 	.word	0x20004652

0001f67c <ble_hs_hci_cmd_tx>:
{
   1f67c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f680:	b084      	sub	sp, #16
   1f682:	4605      	mov	r5, r0
   1f684:	460c      	mov	r4, r1
   1f686:	4616      	mov	r6, r2
   1f688:	4698      	mov	r8, r3
   1f68a:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
    ble_hs_hci_lock();
   1f68e:	f7ff ff19 	bl	1f4c4 <ble_hs_hci_lock>
    rc = ble_hs_hci_cmd_send_buf(opcode, cmd, cmd_len);
   1f692:	4632      	mov	r2, r6
   1f694:	4621      	mov	r1, r4
   1f696:	4628      	mov	r0, r5
   1f698:	f000 f90a 	bl	1f8b0 <ble_hs_hci_cmd_send_buf>
    if (rc != 0) {
   1f69c:	4604      	mov	r4, r0
   1f69e:	b168      	cbz	r0, 1f6bc <ble_hs_hci_cmd_tx+0x40>
    if (ble_hs_hci_ack != NULL) {
   1f6a0:	4b14      	ldr	r3, [pc, #80]	; (1f6f4 <ble_hs_hci_cmd_tx+0x78>)
   1f6a2:	6818      	ldr	r0, [r3, #0]
   1f6a4:	b120      	cbz	r0, 1f6b0 <ble_hs_hci_cmd_tx+0x34>
        ble_hci_trans_buf_free((uint8_t *) ble_hs_hci_ack);
   1f6a6:	f006 fd11 	bl	260cc <ble_hci_trans_buf_free>
        ble_hs_hci_ack = NULL;
   1f6aa:	4b12      	ldr	r3, [pc, #72]	; (1f6f4 <ble_hs_hci_cmd_tx+0x78>)
   1f6ac:	2200      	movs	r2, #0
   1f6ae:	601a      	str	r2, [r3, #0]
    ble_hs_hci_unlock();
   1f6b0:	f7ff ff72 	bl	1f598 <ble_hs_hci_unlock>
}
   1f6b4:	4620      	mov	r0, r4
   1f6b6:	b004      	add	sp, #16
   1f6b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    rc = ble_hs_hci_wait_for_ack();
   1f6bc:	f7ff ff0c 	bl	1f4d8 <ble_hs_hci_wait_for_ack>
    if (rc != 0) {
   1f6c0:	4604      	mov	r4, r0
   1f6c2:	b110      	cbz	r0, 1f6ca <ble_hs_hci_cmd_tx+0x4e>
        ble_hs_sched_reset(rc);
   1f6c4:	f7ff f84a 	bl	1e75c <ble_hs_sched_reset>
        goto done;
   1f6c8:	e7ea      	b.n	1f6a0 <ble_hs_hci_cmd_tx+0x24>
    rc = ble_hs_hci_process_ack(opcode, rsp, rsp_len, &ack);
   1f6ca:	466b      	mov	r3, sp
   1f6cc:	463a      	mov	r2, r7
   1f6ce:	4641      	mov	r1, r8
   1f6d0:	4628      	mov	r0, r5
   1f6d2:	f7ff ff19 	bl	1f508 <ble_hs_hci_process_ack>
    if (rc != 0) {
   1f6d6:	4604      	mov	r4, r0
   1f6d8:	b948      	cbnz	r0, 1f6ee <ble_hs_hci_cmd_tx+0x72>
    rc = ack.bha_status;
   1f6da:	9c00      	ldr	r4, [sp, #0]
    if (!rc && (ack.bha_params_len != rsp_len)) {
   1f6dc:	2c00      	cmp	r4, #0
   1f6de:	d1df      	bne.n	1f6a0 <ble_hs_hci_cmd_tx+0x24>
   1f6e0:	9b02      	ldr	r3, [sp, #8]
   1f6e2:	42bb      	cmp	r3, r7
   1f6e4:	d0dc      	beq.n	1f6a0 <ble_hs_hci_cmd_tx+0x24>
        ble_hs_sched_reset(rc);
   1f6e6:	4620      	mov	r0, r4
   1f6e8:	f7ff f838 	bl	1e75c <ble_hs_sched_reset>
        goto done;
   1f6ec:	e7d8      	b.n	1f6a0 <ble_hs_hci_cmd_tx+0x24>
        ble_hs_sched_reset(rc);
   1f6ee:	f7ff f835 	bl	1e75c <ble_hs_sched_reset>
        goto done;
   1f6f2:	e7d5      	b.n	1f6a0 <ble_hs_hci_cmd_tx+0x24>
   1f6f4:	20002e34 	.word	0x20002e34

0001f6f8 <ble_hs_hci_rx_evt>:
{
   1f6f8:	b508      	push	{r3, lr}
    switch (ev->opcode) {
   1f6fa:	7803      	ldrb	r3, [r0, #0]
   1f6fc:	2b0e      	cmp	r3, #14
   1f6fe:	d006      	beq.n	1f70e <ble_hs_hci_rx_evt+0x16>
   1f700:	2b0f      	cmp	r3, #15
   1f702:	d10a      	bne.n	1f71a <ble_hs_hci_rx_evt+0x22>
        enqueue = (cmd_status->opcode == BLE_HCI_OPCODE_NOP);
   1f704:	8883      	ldrh	r3, [r0, #4]
   1f706:	fab3 f383 	clz	r3, r3
   1f70a:	095b      	lsrs	r3, r3, #5
        break;
   1f70c:	e004      	b.n	1f718 <ble_hs_hci_rx_evt+0x20>
        enqueue = (cmd_complete->opcode == BLE_HCI_OPCODE_NOP);
   1f70e:	f8b0 3003 	ldrh.w	r3, [r0, #3]
   1f712:	fab3 f383 	clz	r3, r3
   1f716:	095b      	lsrs	r3, r3, #5
    if (enqueue) {
   1f718:	b11b      	cbz	r3, 1f722 <ble_hs_hci_rx_evt+0x2a>
        ble_hs_enqueue_hci_event(hci_ev);
   1f71a:	f7ff f801 	bl	1e720 <ble_hs_enqueue_hci_event>
}
   1f71e:	2000      	movs	r0, #0
   1f720:	bd08      	pop	{r3, pc}
        ble_hs_hci_rx_ack(hci_ev);
   1f722:	f7ff ff41 	bl	1f5a8 <ble_hs_hci_rx_ack>
   1f726:	e7fa      	b.n	1f71e <ble_hs_hci_rx_evt+0x26>

0001f728 <ble_hs_hci_acl_tx_now>:

int
ble_hs_hci_acl_tx_now(struct ble_hs_conn *conn, struct os_mbuf **om)
{
   1f728:	b570      	push	{r4, r5, r6, lr}
   1f72a:	b082      	sub	sp, #8
   1f72c:	4604      	mov	r4, r0
   1f72e:	460d      	mov	r5, r1
    uint8_t pb;
    int rc;

    BLE_HS_DBG_ASSERT(ble_hs_locked_by_cur_task());

    txom = *om;
   1f730:	680b      	ldr	r3, [r1, #0]
   1f732:	9301      	str	r3, [sp, #4]
    *om = NULL;
   1f734:	2300      	movs	r3, #0
   1f736:	600b      	str	r3, [r1, #0]

    if (!(conn->bhc_flags & BLE_HS_CONN_F_TX_FRAG)) {
   1f738:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   1f73c:	f013 0f04 	tst.w	r3, #4
   1f740:	d02e      	beq.n	1f7a0 <ble_hs_hci_acl_tx_now+0x78>
         * After sending the first fragment, pb gets set appropriately for all
         * subsequent fragments in this packet.
         */
        pb = BLE_HCI_PB_FIRST_NON_FLUSH;
    } else {
        pb = BLE_HCI_PB_MIDDLE;
   1f742:	2601      	movs	r6, #1
    }

    /* Send fragments until the entire packet has been sent. */
    while (txom != NULL && ble_hs_hci_avail_pkts > 0) {
   1f744:	9b01      	ldr	r3, [sp, #4]
   1f746:	b36b      	cbz	r3, 1f7a4 <ble_hs_hci_acl_tx_now+0x7c>
   1f748:	4a23      	ldr	r2, [pc, #140]	; (1f7d8 <ble_hs_hci_acl_tx_now+0xb0>)
   1f74a:	8812      	ldrh	r2, [r2, #0]
   1f74c:	b352      	cbz	r2, 1f7a4 <ble_hs_hci_acl_tx_now+0x7c>
        frag = mem_split_frag(&txom, ble_hs_hci_max_acl_payload_sz(),
   1f74e:	f7ff feb3 	bl	1f4b8 <ble_hs_hci_max_acl_payload_sz>
   1f752:	2300      	movs	r3, #0
   1f754:	4a21      	ldr	r2, [pc, #132]	; (1f7dc <ble_hs_hci_acl_tx_now+0xb4>)
   1f756:	4601      	mov	r1, r0
   1f758:	a801      	add	r0, sp, #4
   1f75a:	f7f0 fcc3 	bl	100e4 <mem_split_frag>
                              ble_hs_hci_frag_alloc, NULL);
        if (frag == NULL) {
   1f75e:	b1d8      	cbz	r0, 1f798 <ble_hs_hci_acl_tx_now+0x70>
            *om = txom;
            return BLE_HS_EAGAIN;
        }

        frag = ble_hs_hci_acl_hdr_prepend(frag, conn->bhc_handle, pb);
   1f760:	4632      	mov	r2, r6
   1f762:	88a1      	ldrh	r1, [r4, #4]
   1f764:	f7ff ff44 	bl	1f5f0 <ble_hs_hci_acl_hdr_prepend>
        if (frag == NULL) {
   1f768:	4606      	mov	r6, r0
   1f76a:	b338      	cbz	r0, 1f7bc <ble_hs_hci_acl_tx_now+0x94>
            goto err;
        }

#if !BLE_MONITOR
        BLE_HS_LOG(DEBUG, "ble_hs_hci_acl_tx(): ");
        ble_hs_log_mbuf(frag);
   1f76c:	f000 fc60 	bl	20030 <ble_hs_log_mbuf>
        BLE_HS_LOG(DEBUG, "\n");
#endif

        rc = ble_hs_tx_data(frag);
   1f770:	4630      	mov	r0, r6
   1f772:	f7ff f858 	bl	1e826 <ble_hs_tx_data>
        if (rc != 0) {
   1f776:	4606      	mov	r6, r0
   1f778:	bb08      	cbnz	r0, 1f7be <ble_hs_hci_acl_tx_now+0x96>
        }

        /* If any fragments remain, they should be marked as 'middle'
         * fragments.
         */
        conn->bhc_flags |= BLE_HS_CONN_F_TX_FRAG;
   1f77a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   1f77e:	f043 0304 	orr.w	r3, r3, #4
   1f782:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
        pb = BLE_HCI_PB_MIDDLE;

        /* Account for the controller buf that will hold the txed fragment. */
        conn->bhc_outstanding_pkts++;
   1f786:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   1f788:	3301      	adds	r3, #1
   1f78a:	8723      	strh	r3, [r4, #56]	; 0x38
        ble_hs_hci_avail_pkts--;
   1f78c:	4a12      	ldr	r2, [pc, #72]	; (1f7d8 <ble_hs_hci_acl_tx_now+0xb0>)
   1f78e:	8813      	ldrh	r3, [r2, #0]
   1f790:	3b01      	subs	r3, #1
   1f792:	8013      	strh	r3, [r2, #0]
        pb = BLE_HCI_PB_MIDDLE;
   1f794:	2601      	movs	r6, #1
   1f796:	e7d5      	b.n	1f744 <ble_hs_hci_acl_tx_now+0x1c>
            *om = txom;
   1f798:	9b01      	ldr	r3, [sp, #4]
   1f79a:	602b      	str	r3, [r5, #0]
            return BLE_HS_EAGAIN;
   1f79c:	2601      	movs	r6, #1
   1f79e:	e017      	b.n	1f7d0 <ble_hs_hci_acl_tx_now+0xa8>
        pb = BLE_HCI_PB_FIRST_NON_FLUSH;
   1f7a0:	2600      	movs	r6, #0
   1f7a2:	e7cf      	b.n	1f744 <ble_hs_hci_acl_tx_now+0x1c>
    }

    if (txom != NULL) {
   1f7a4:	b113      	cbz	r3, 1f7ac <ble_hs_hci_acl_tx_now+0x84>
        /* The controller couldn't accommodate some or all of the packet. */
        *om = txom;
   1f7a6:	602b      	str	r3, [r5, #0]
        return BLE_HS_EAGAIN;
   1f7a8:	2601      	movs	r6, #1
   1f7aa:	e011      	b.n	1f7d0 <ble_hs_hci_acl_tx_now+0xa8>
    }

    /* The entire packet was transmitted. */
    conn->bhc_flags &= ~BLE_HS_CONN_F_TX_FRAG;
   1f7ac:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   1f7b0:	f023 0304 	bic.w	r3, r3, #4
   1f7b4:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28

    return 0;
   1f7b8:	2600      	movs	r6, #0
   1f7ba:	e009      	b.n	1f7d0 <ble_hs_hci_acl_tx_now+0xa8>
            rc = BLE_HS_ENOMEM;
   1f7bc:	2606      	movs	r6, #6

err:
    BLE_HS_DBG_ASSERT(rc != 0);

    conn->bhc_flags &= ~BLE_HS_CONN_F_TX_FRAG;
   1f7be:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   1f7c2:	f023 0304 	bic.w	r3, r3, #4
   1f7c6:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    os_mbuf_free_chain(txom);
   1f7ca:	9801      	ldr	r0, [sp, #4]
   1f7cc:	f7ee f923 	bl	da16 <os_mbuf_free_chain>
    return rc;
}
   1f7d0:	4630      	mov	r0, r6
   1f7d2:	b002      	add	sp, #8
   1f7d4:	bd70      	pop	{r4, r5, r6, pc}
   1f7d6:	bf00      	nop
   1f7d8:	20004652 	.word	0x20004652
   1f7dc:	0001f5cd 	.word	0x0001f5cd

0001f7e0 <ble_hs_hci_acl_tx>:
 *                                  error.
 *
 */
int
ble_hs_hci_acl_tx(struct ble_hs_conn *conn, struct os_mbuf **om)
{
   1f7e0:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(ble_hs_locked_by_cur_task());

    /* If this conn is already backed up, don't even try to send. */
    if (STAILQ_FIRST(&conn->bhc_tx_q) != NULL) {
   1f7e2:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   1f7e4:	b10b      	cbz	r3, 1f7ea <ble_hs_hci_acl_tx+0xa>
        return BLE_HS_EAGAIN;
   1f7e6:	2001      	movs	r0, #1
    }

    return ble_hs_hci_acl_tx_now(conn, om);
}
   1f7e8:	bd08      	pop	{r3, pc}
    return ble_hs_hci_acl_tx_now(conn, om);
   1f7ea:	f7ff ff9d 	bl	1f728 <ble_hs_hci_acl_tx_now>
   1f7ee:	e7fb      	b.n	1f7e8 <ble_hs_hci_acl_tx+0x8>

0001f7f0 <ble_hs_hci_set_le_supported_feat>:

void
ble_hs_hci_set_le_supported_feat(uint32_t feat)
{
    ble_hs_hci_sup_feat = feat;
   1f7f0:	4b01      	ldr	r3, [pc, #4]	; (1f7f8 <ble_hs_hci_set_le_supported_feat+0x8>)
   1f7f2:	6018      	str	r0, [r3, #0]
}
   1f7f4:	4770      	bx	lr
   1f7f6:	bf00      	nop
   1f7f8:	20002f94 	.word	0x20002f94

0001f7fc <ble_hs_hci_set_hci_version>:
}

void
ble_hs_hci_set_hci_version(uint8_t hci_version)
{
    ble_hs_hci_version = hci_version;
   1f7fc:	4b01      	ldr	r3, [pc, #4]	; (1f804 <ble_hs_hci_set_hci_version+0x8>)
   1f7fe:	7018      	strb	r0, [r3, #0]
}
   1f800:	4770      	bx	lr
   1f802:	bf00      	nop
   1f804:	20002f98 	.word	0x20002f98

0001f808 <ble_hs_hci_get_hci_version>:

uint8_t
ble_hs_hci_get_hci_version(void)
{
    return ble_hs_hci_version;
}
   1f808:	4b01      	ldr	r3, [pc, #4]	; (1f810 <ble_hs_hci_get_hci_version+0x8>)
   1f80a:	7818      	ldrb	r0, [r3, #0]
   1f80c:	4770      	bx	lr
   1f80e:	bf00      	nop
   1f810:	20002f98 	.word	0x20002f98

0001f814 <ble_hs_hci_init>:

void
ble_hs_hci_init(void)
{
   1f814:	b500      	push	{lr}
   1f816:	b083      	sub	sp, #12
    return (ble_npl_error_t)os_sem_init(&sem->sem, tokens);
   1f818:	2100      	movs	r1, #0
   1f81a:	480a      	ldr	r0, [pc, #40]	; (1f844 <ble_hs_hci_init+0x30>)
   1f81c:	f00a f86f 	bl	298fe <os_sem_init>
    return (ble_npl_error_t)os_mutex_init(&mu->mu);
   1f820:	4809      	ldr	r0, [pc, #36]	; (1f848 <ble_hs_hci_init+0x34>)
   1f822:	f7ee fcc3 	bl	e1ac <os_mutex_init>
    BLE_HS_DBG_ASSERT_EVAL(rc == 0);

    rc = ble_npl_mutex_init(&ble_hs_hci_mutex);
    BLE_HS_DBG_ASSERT_EVAL(rc == 0);

    rc = mem_init_mbuf_pool(ble_hs_hci_frag_data,
   1f826:	4b09      	ldr	r3, [pc, #36]	; (1f84c <ble_hs_hci_init+0x38>)
   1f828:	9301      	str	r3, [sp, #4]
   1f82a:	f44f 738e 	mov.w	r3, #284	; 0x11c
   1f82e:	9300      	str	r3, [sp, #0]
   1f830:	2301      	movs	r3, #1
   1f832:	4a07      	ldr	r2, [pc, #28]	; (1f850 <ble_hs_hci_init+0x3c>)
   1f834:	4907      	ldr	r1, [pc, #28]	; (1f854 <ble_hs_hci_init+0x40>)
   1f836:	4808      	ldr	r0, [pc, #32]	; (1f858 <ble_hs_hci_init+0x44>)
   1f838:	f7f0 fc3c 	bl	100b4 <mem_init_mbuf_pool>
                            &ble_hs_hci_frag_mbuf_pool,
                            1,
                            BLE_HS_HCI_FRAG_MEMBLOCK_SIZE,
                            "ble_hs_hci_frag");
    BLE_HS_DBG_ASSERT_EVAL(rc == 0);
}
   1f83c:	b003      	add	sp, #12
   1f83e:	f85d fb04 	ldr.w	pc, [sp], #4
   1f842:	bf00      	nop
   1f844:	20002f8c 	.word	0x20002f8c
   1f848:	20002f80 	.word	0x20002f80
   1f84c:	0002b558 	.word	0x0002b558
   1f850:	20002f58 	.word	0x20002f58
   1f854:	20002f64 	.word	0x20002f64
   1f858:	20002e3c 	.word	0x20002e3c

0001f85c <ble_hs_hci_cmd_transport>:
#include "ble_hs_priv.h"
#include "ble_monitor_priv.h"

static int
ble_hs_hci_cmd_transport(struct ble_hci_cmd *cmd)
{
   1f85c:	b508      	push	{r3, lr}
#if BLE_MONITOR
    ble_monitor_send(BLE_MONITOR_OPCODE_COMMAND_PKT, cmd,
                     cmd->length + sizeof(*cmd));
#endif

    rc = ble_hci_trans_hs_cmd_tx((uint8_t *) cmd);
   1f85e:	f006 fbaf 	bl	25fc0 <ble_hci_trans_hs_cmd_tx>
    switch (rc) {
   1f862:	4603      	mov	r3, r0
   1f864:	b110      	cbz	r0, 1f86c <ble_hs_hci_cmd_transport+0x10>
   1f866:	2807      	cmp	r0, #7
   1f868:	d002      	beq.n	1f870 <ble_hs_hci_cmd_transport+0x14>

    case BLE_ERR_MEM_CAPACITY:
        return BLE_HS_ENOMEM_EVT;

    default:
        return BLE_HS_EUNKNOWN;
   1f86a:	2311      	movs	r3, #17
    }
}
   1f86c:	4618      	mov	r0, r3
   1f86e:	bd08      	pop	{r3, pc}
        return BLE_HS_ENOMEM_EVT;
   1f870:	2314      	movs	r3, #20
   1f872:	e7fb      	b.n	1f86c <ble_hs_hci_cmd_transport+0x10>

0001f874 <ble_hs_hci_cmd_send>:

static int
ble_hs_hci_cmd_send(uint16_t opcode, uint8_t len, const void *cmddata)
{
   1f874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f876:	4606      	mov	r6, r0
   1f878:	460d      	mov	r5, r1
   1f87a:	4617      	mov	r7, r2
    struct ble_hci_cmd *cmd;
    int rc;

    cmd = (void *) ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_CMD);
   1f87c:	2003      	movs	r0, #3
   1f87e:	f006 fbf7 	bl	26070 <ble_hci_trans_buf_alloc>
   1f882:	4604      	mov	r4, r0
    BLE_HS_DBG_ASSERT(cmd != NULL);

    cmd->opcode = htole16(opcode);
   1f884:	8006      	strh	r6, [r0, #0]
    cmd->length = len;
   1f886:	7085      	strb	r5, [r0, #2]
    if (len != 0) {
   1f888:	b955      	cbnz	r5, 1f8a0 <ble_hs_hci_cmd_send+0x2c>
        memcpy(cmd->data, cmddata, len);
    }

    rc = ble_hs_hci_cmd_transport(cmd);
   1f88a:	4620      	mov	r0, r4
   1f88c:	f7ff ffe6 	bl	1f85c <ble_hs_hci_cmd_transport>

    if (rc == 0) {
   1f890:	4602      	mov	r2, r0
   1f892:	b918      	cbnz	r0, 1f89c <ble_hs_hci_cmd_send+0x28>
        STATS_INC(ble_hs_stats, hci_cmd);
   1f894:	4905      	ldr	r1, [pc, #20]	; (1f8ac <ble_hs_hci_cmd_send+0x38>)
   1f896:	694b      	ldr	r3, [r1, #20]
   1f898:	3301      	adds	r3, #1
   1f89a:	614b      	str	r3, [r1, #20]
    } else {
        BLE_HS_LOG(DEBUG, "ble_hs_hci_cmd_send failure; rc=%d\n", rc);
    }

    return rc;
}
   1f89c:	4610      	mov	r0, r2
   1f89e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        memcpy(cmd->data, cmddata, len);
   1f8a0:	462a      	mov	r2, r5
   1f8a2:	4639      	mov	r1, r7
   1f8a4:	3003      	adds	r0, #3
   1f8a6:	f7ee fde3 	bl	e470 <memcpy>
   1f8aa:	e7ee      	b.n	1f88a <ble_hs_hci_cmd_send+0x16>
   1f8ac:	200045f4 	.word	0x200045f4

0001f8b0 <ble_hs_hci_cmd_send_buf>:

int
ble_hs_hci_cmd_send_buf(uint16_t opcode, const void *buf, uint8_t buf_len)
{
   1f8b0:	b570      	push	{r4, r5, r6, lr}
   1f8b2:	4604      	mov	r4, r0
   1f8b4:	460e      	mov	r6, r1
   1f8b6:	4615      	mov	r5, r2
    switch (ble_hs_sync_state) {
   1f8b8:	4b0a      	ldr	r3, [pc, #40]	; (1f8e4 <ble_hs_hci_cmd_send_buf+0x34>)
   1f8ba:	781b      	ldrb	r3, [r3, #0]
   1f8bc:	2b01      	cmp	r3, #1
   1f8be:	d006      	beq.n	1f8ce <ble_hs_hci_cmd_send_buf+0x1e>
   1f8c0:	b11b      	cbz	r3, 1f8ca <ble_hs_hci_cmd_send_buf+0x1a>
   1f8c2:	2b02      	cmp	r3, #2
   1f8c4:	d006      	beq.n	1f8d4 <ble_hs_hci_cmd_send_buf+0x24>
    case BLE_HS_SYNC_STATE_GOOD:
        break;

    default:
        BLE_HS_DBG_ASSERT(0);
        return BLE_HS_EUNKNOWN;
   1f8c6:	2011      	movs	r0, #17
   1f8c8:	e009      	b.n	1f8de <ble_hs_hci_cmd_send_buf+0x2e>
        return BLE_HS_ENOTSYNCED;
   1f8ca:	2016      	movs	r0, #22
   1f8cc:	e007      	b.n	1f8de <ble_hs_hci_cmd_send_buf+0x2e>
        if (!ble_hs_is_parent_task()) {
   1f8ce:	f7fe fe05 	bl	1e4dc <ble_hs_is_parent_task>
   1f8d2:	b128      	cbz	r0, 1f8e0 <ble_hs_hci_cmd_send_buf+0x30>
    }

    return ble_hs_hci_cmd_send(opcode, buf_len, buf);
   1f8d4:	4632      	mov	r2, r6
   1f8d6:	4629      	mov	r1, r5
   1f8d8:	4620      	mov	r0, r4
   1f8da:	f7ff ffcb 	bl	1f874 <ble_hs_hci_cmd_send>
}
   1f8de:	bd70      	pop	{r4, r5, r6, pc}
            return BLE_HS_ENOTSYNCED;
   1f8e0:	2016      	movs	r0, #22
   1f8e2:	e7fc      	b.n	1f8de <ble_hs_hci_cmd_send_buf+0x2e>
   1f8e4:	20004648 	.word	0x20004648

0001f8e8 <ble_hs_hci_evt_dispatch_find>:
ble_hs_hci_evt_dispatch_find(uint8_t event_code)
{
    const struct ble_hs_hci_evt_dispatch_entry *entry;
    int i;

    for (i = 0; i < BLE_HS_HCI_EVT_DISPATCH_SZ; i++) {
   1f8e8:	2300      	movs	r3, #0
   1f8ea:	2b05      	cmp	r3, #5
   1f8ec:	d808      	bhi.n	1f900 <ble_hs_hci_evt_dispatch_find+0x18>
        entry = ble_hs_hci_evt_dispatch + i;
   1f8ee:	4a06      	ldr	r2, [pc, #24]	; (1f908 <ble_hs_hci_evt_dispatch_find+0x20>)
   1f8f0:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
        if (entry->event_code == event_code) {
   1f8f4:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
   1f8f8:	4282      	cmp	r2, r0
   1f8fa:	d002      	beq.n	1f902 <ble_hs_hci_evt_dispatch_find+0x1a>
    for (i = 0; i < BLE_HS_HCI_EVT_DISPATCH_SZ; i++) {
   1f8fc:	3301      	adds	r3, #1
   1f8fe:	e7f4      	b.n	1f8ea <ble_hs_hci_evt_dispatch_find+0x2>
            return entry;
        }
    }

    return NULL;
   1f900:	2100      	movs	r1, #0
}
   1f902:	4608      	mov	r0, r1
   1f904:	4770      	bx	lr
   1f906:	bf00      	nop
   1f908:	0002b568 	.word	0x0002b568

0001f90c <ble_hs_hci_evt_le_dispatch_find>:

static ble_hs_hci_evt_le_fn *
ble_hs_hci_evt_le_dispatch_find(uint8_t event_code)
{
    if (event_code >= BLE_HS_HCI_EVT_LE_DISPATCH_SZ) {
   1f90c:	2818      	cmp	r0, #24
   1f90e:	d803      	bhi.n	1f918 <ble_hs_hci_evt_le_dispatch_find+0xc>
        return NULL;
    }

    return ble_hs_hci_evt_le_dispatch[event_code];
   1f910:	4b02      	ldr	r3, [pc, #8]	; (1f91c <ble_hs_hci_evt_le_dispatch_find+0x10>)
   1f912:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1f916:	4770      	bx	lr
        return NULL;
   1f918:	2000      	movs	r0, #0
}
   1f91a:	4770      	bx	lr
   1f91c:	0002b598 	.word	0x0002b598

0001f920 <ble_hs_hci_evt_le_meta>:
ble_hs_hci_evt_le_meta(uint8_t event_code, const void *data, unsigned int len)
{
    const struct ble_hci_ev_le_meta *ev = data;
    ble_hs_hci_evt_le_fn *fn;

    if (len < sizeof(*ev)) {
   1f920:	b16a      	cbz	r2, 1f93e <ble_hs_hci_evt_le_meta+0x1e>
{
   1f922:	b570      	push	{r4, r5, r6, lr}
   1f924:	4615      	mov	r5, r2
   1f926:	460c      	mov	r4, r1
        return BLE_HS_ECONTROLLER;
    }

    fn = ble_hs_hci_evt_le_dispatch_find(ev->subevent);
   1f928:	780e      	ldrb	r6, [r1, #0]
   1f92a:	4630      	mov	r0, r6
   1f92c:	f7ff ffee 	bl	1f90c <ble_hs_hci_evt_le_dispatch_find>
    if (fn) {
   1f930:	4603      	mov	r3, r0
   1f932:	b130      	cbz	r0, 1f942 <ble_hs_hci_evt_le_meta+0x22>
        return fn(ev->subevent, data, len);
   1f934:	462a      	mov	r2, r5
   1f936:	4621      	mov	r1, r4
   1f938:	4630      	mov	r0, r6
   1f93a:	4798      	blx	r3
    }

    return 0;
}
   1f93c:	bd70      	pop	{r4, r5, r6, pc}
        return BLE_HS_ECONTROLLER;
   1f93e:	200c      	movs	r0, #12
}
   1f940:	4770      	bx	lr
    return 0;
   1f942:	2000      	movs	r0, #0
   1f944:	e7fa      	b.n	1f93c <ble_hs_hci_evt_le_meta+0x1c>

0001f946 <ble_hs_hci_evt_le_adv_rpt_first_pass>:
{
    const struct ble_hci_ev_le_subev_adv_rpt *ev = data;
    const struct adv_report *rpt;
    int i;

    if (len < sizeof(*ev)) {
   1f946:	2901      	cmp	r1, #1
   1f948:	d91a      	bls.n	1f980 <ble_hs_hci_evt_le_adv_rpt_first_pass+0x3a>
{
   1f94a:	b410      	push	{r4}
        return BLE_HS_ECONTROLLER;
    }

    len -= sizeof(*ev);
   1f94c:	3902      	subs	r1, #2
    data += sizeof(*ev);
   1f94e:	1c84      	adds	r4, r0, #2

    if (ev->num_reports < BLE_HCI_LE_ADV_RPT_NUM_RPTS_MIN ||
   1f950:	7840      	ldrb	r0, [r0, #1]
   1f952:	1e43      	subs	r3, r0, #1
   1f954:	b2db      	uxtb	r3, r3
   1f956:	2b18      	cmp	r3, #24
   1f958:	d814      	bhi.n	1f984 <ble_hs_hci_evt_le_adv_rpt_first_pass+0x3e>
        ev->num_reports > BLE_HCI_LE_ADV_RPT_NUM_RPTS_MAX) {
        return BLE_HS_EBADDATA;
    }

    for (i = 0; i < ev->num_reports; i++) {
   1f95a:	2200      	movs	r2, #0
   1f95c:	4290      	cmp	r0, r2
   1f95e:	dd0a      	ble.n	1f976 <ble_hs_hci_evt_le_adv_rpt_first_pass+0x30>
        /* extra byte for RSSI after adv data */
        if (len < sizeof(*rpt) + 1) {
   1f960:	2909      	cmp	r1, #9
   1f962:	d912      	bls.n	1f98a <ble_hs_hci_evt_le_adv_rpt_first_pass+0x44>
            return BLE_HS_ECONTROLLER;
        }

        rpt = data;

        len -= sizeof(*rpt) + 1;
   1f964:	390a      	subs	r1, #10
        data += sizeof(rpt) + 1;

        if (rpt->data_len > len) {
   1f966:	7a23      	ldrb	r3, [r4, #8]
   1f968:	428b      	cmp	r3, r1
   1f96a:	d810      	bhi.n	1f98e <ble_hs_hci_evt_le_adv_rpt_first_pass+0x48>
            return BLE_HS_ECONTROLLER;
        }

        len -= rpt->data_len;
   1f96c:	1ac9      	subs	r1, r1, r3
        data += rpt->data_len;
   1f96e:	3305      	adds	r3, #5
   1f970:	441c      	add	r4, r3
    for (i = 0; i < ev->num_reports; i++) {
   1f972:	3201      	adds	r2, #1
   1f974:	e7f2      	b.n	1f95c <ble_hs_hci_evt_le_adv_rpt_first_pass+0x16>
    }

    /* Make sure length was correct */
    if (len) {
   1f976:	b909      	cbnz	r1, 1f97c <ble_hs_hci_evt_le_adv_rpt_first_pass+0x36>
        return BLE_HS_ECONTROLLER;
    }

    return 0;
   1f978:	2000      	movs	r0, #0
   1f97a:	e004      	b.n	1f986 <ble_hs_hci_evt_le_adv_rpt_first_pass+0x40>
        return BLE_HS_ECONTROLLER;
   1f97c:	200c      	movs	r0, #12
   1f97e:	e002      	b.n	1f986 <ble_hs_hci_evt_le_adv_rpt_first_pass+0x40>
        return BLE_HS_ECONTROLLER;
   1f980:	200c      	movs	r0, #12
}
   1f982:	4770      	bx	lr
        return BLE_HS_EBADDATA;
   1f984:	200a      	movs	r0, #10
}
   1f986:	bc10      	pop	{r4}
   1f988:	4770      	bx	lr
            return BLE_HS_ECONTROLLER;
   1f98a:	200c      	movs	r0, #12
   1f98c:	e7fb      	b.n	1f986 <ble_hs_hci_evt_le_adv_rpt_first_pass+0x40>
            return BLE_HS_ECONTROLLER;
   1f98e:	200c      	movs	r0, #12
   1f990:	e7f9      	b.n	1f986 <ble_hs_hci_evt_le_adv_rpt_first_pass+0x40>

0001f992 <ble_hs_hci_evt_le_ext_adv_rpt>:

        report = (const void *) &report->data[report->data_len];
    }
#endif
    return 0;
}
   1f992:	2000      	movs	r0, #0
   1f994:	4770      	bx	lr

0001f996 <ble_hs_hci_evt_le_periodic_adv_sync_estab>:

    ble_gap_rx_peroidic_adv_sync_estab(ev);
#endif

    return 0;
}
   1f996:	2000      	movs	r0, #0
   1f998:	4770      	bx	lr

0001f99a <ble_hs_hci_evt_le_periodic_adv_rpt>:

    ble_gap_rx_periodic_adv_rpt(ev);
#endif

return 0;
}
   1f99a:	2000      	movs	r0, #0
   1f99c:	4770      	bx	lr

0001f99e <ble_hs_hci_evt_le_periodic_adv_sync_lost>:

    ble_gap_rx_periodic_adv_sync_lost(ev);

#endif
    return 0;
}
   1f99e:	2000      	movs	r0, #0
   1f9a0:	4770      	bx	lr

0001f9a2 <ble_hs_hci_evt_le_periodic_adv_sync_transfer>:

    ble_gap_rx_periodic_adv_sync_transfer(ev);

#endif
    return 0;
}
   1f9a2:	2000      	movs	r0, #0
   1f9a4:	4770      	bx	lr

0001f9a6 <ble_hs_hci_evt_le_scan_timeout>:
    }

    ble_gap_rx_le_scan_timeout();
#endif
    return 0;
}
   1f9a6:	2000      	movs	r0, #0
   1f9a8:	4770      	bx	lr

0001f9aa <ble_hs_hci_evt_le_adv_set_terminated>:
    }
    ble_gap_rx_adv_set_terminated(ev);
#endif

    return 0;
}
   1f9aa:	2000      	movs	r0, #0
   1f9ac:	4770      	bx	lr

0001f9ae <ble_hs_hci_evt_le_scan_req_rcvd>:

    ble_gap_rx_scan_req_rcvd(ev);
#endif

    return 0;
}
   1f9ae:	2000      	movs	r0, #0
   1f9b0:	4770      	bx	lr

0001f9b2 <ble_hs_hci_evt_hw_error>:
    if (len != sizeof(*ev)) {
   1f9b2:	2a01      	cmp	r2, #1
   1f9b4:	d001      	beq.n	1f9ba <ble_hs_hci_evt_hw_error+0x8>
        return BLE_HS_ECONTROLLER;
   1f9b6:	200c      	movs	r0, #12
}
   1f9b8:	4770      	bx	lr
{
   1f9ba:	b508      	push	{r3, lr}
    ble_hs_hw_error(ev->hw_code);
   1f9bc:	7808      	ldrb	r0, [r1, #0]
   1f9be:	f7fe fedd 	bl	1e77c <ble_hs_hw_error>
    return 0;
   1f9c2:	2000      	movs	r0, #0
}
   1f9c4:	bd08      	pop	{r3, pc}

0001f9c6 <ble_hs_hci_evt_enc_key_refresh>:
    if (len != sizeof(*ev)) {
   1f9c6:	2a03      	cmp	r2, #3
   1f9c8:	d001      	beq.n	1f9ce <ble_hs_hci_evt_enc_key_refresh+0x8>
        return BLE_HS_ECONTROLLER;
   1f9ca:	200c      	movs	r0, #12
}
   1f9cc:	4770      	bx	lr
{
   1f9ce:	b508      	push	{r3, lr}
   1f9d0:	4608      	mov	r0, r1
    ble_sm_enc_key_refresh_rx(ev);
   1f9d2:	f002 fd21 	bl	22418 <ble_sm_enc_key_refresh_rx>
    return 0;
   1f9d6:	2000      	movs	r0, #0
}
   1f9d8:	bd08      	pop	{r3, pc}

0001f9da <ble_hs_hci_evt_encrypt_change>:
    if (len != sizeof (*ev)) {
   1f9da:	2a04      	cmp	r2, #4
   1f9dc:	d001      	beq.n	1f9e2 <ble_hs_hci_evt_encrypt_change+0x8>
        return BLE_HS_ECONTROLLER;
   1f9de:	200c      	movs	r0, #12
}
   1f9e0:	4770      	bx	lr
{
   1f9e2:	b508      	push	{r3, lr}
   1f9e4:	4608      	mov	r0, r1
    ble_sm_enc_change_rx(ev);
   1f9e6:	f002 fd0d 	bl	22404 <ble_sm_enc_change_rx>
    return 0;
   1f9ea:	2000      	movs	r0, #0
}
   1f9ec:	bd08      	pop	{r3, pc}

0001f9ee <ble_hs_hci_evt_disconn_complete>:
    if (len != sizeof(*ev)) {
   1f9ee:	2a04      	cmp	r2, #4
   1f9f0:	d001      	beq.n	1f9f6 <ble_hs_hci_evt_disconn_complete+0x8>
        return BLE_HS_ECONTROLLER;
   1f9f2:	200c      	movs	r0, #12
}
   1f9f4:	4770      	bx	lr
{
   1f9f6:	b510      	push	{r4, lr}
   1f9f8:	460c      	mov	r4, r1
    ble_hs_lock();
   1f9fa:	f7fe fd93 	bl	1e524 <ble_hs_lock>
    conn = ble_hs_conn_find(le16toh(ev->conn_handle));
   1f9fe:	f8b4 0001 	ldrh.w	r0, [r4, #1]
   1fa02:	f7ff fc1f 	bl	1f244 <ble_hs_conn_find>
    if (conn != NULL) {
   1fa06:	b110      	cbz	r0, 1fa0e <ble_hs_hci_evt_disconn_complete+0x20>
        ble_hs_hci_add_avail_pkts(conn->bhc_outstanding_pkts);
   1fa08:	8f00      	ldrh	r0, [r0, #56]	; 0x38
   1fa0a:	f7ff fe25 	bl	1f658 <ble_hs_hci_add_avail_pkts>
    ble_hs_unlock();
   1fa0e:	f7fe fd8d 	bl	1e52c <ble_hs_unlock>
    ble_gap_rx_disconn_complete(ev);
   1fa12:	4620      	mov	r0, r4
   1fa14:	f7fb fca4 	bl	1b360 <ble_gap_rx_disconn_complete>
    ble_hs_wakeup_tx();
   1fa18:	f7fe fd9e 	bl	1e558 <ble_hs_wakeup_tx>
    return 0;
   1fa1c:	2000      	movs	r0, #0
}
   1fa1e:	bd10      	pop	{r4, pc}

0001fa20 <ble_hs_hci_evt_num_completed_pkts>:
    if (len != sizeof(*ev) + (ev->count * sizeof(ev->completed[0]))) {
   1fa20:	780b      	ldrb	r3, [r1, #0]
   1fa22:	009b      	lsls	r3, r3, #2
   1fa24:	3301      	adds	r3, #1
   1fa26:	4293      	cmp	r3, r2
   1fa28:	d129      	bne.n	1fa7e <ble_hs_hci_evt_num_completed_pkts+0x5e>
{
   1fa2a:	b570      	push	{r4, r5, r6, lr}
   1fa2c:	460d      	mov	r5, r1
    for (i = 0; i < ev->count; i++) {
   1fa2e:	2400      	movs	r4, #0
   1fa30:	e007      	b.n	1fa42 <ble_hs_hci_evt_num_completed_pkts+0x22>
                    conn->bhc_outstanding_pkts -= num_pkts;
   1fa32:	1b9b      	subs	r3, r3, r6
   1fa34:	8703      	strh	r3, [r0, #56]	; 0x38
                ble_hs_hci_add_avail_pkts(num_pkts);
   1fa36:	4630      	mov	r0, r6
   1fa38:	f7ff fe0e 	bl	1f658 <ble_hs_hci_add_avail_pkts>
            ble_hs_unlock();
   1fa3c:	f7fe fd76 	bl	1e52c <ble_hs_unlock>
    for (i = 0; i < ev->count; i++) {
   1fa40:	3401      	adds	r4, #1
   1fa42:	782b      	ldrb	r3, [r5, #0]
   1fa44:	42a3      	cmp	r3, r4
   1fa46:	dd16      	ble.n	1fa76 <ble_hs_hci_evt_num_completed_pkts+0x56>
        num_pkts = le16toh(ev->completed[i].packets);
   1fa48:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   1fa4c:	f8b3 6003 	ldrh.w	r6, [r3, #3]
        if (num_pkts > 0) {
   1fa50:	2e00      	cmp	r6, #0
   1fa52:	d0f5      	beq.n	1fa40 <ble_hs_hci_evt_num_completed_pkts+0x20>
            ble_hs_lock();
   1fa54:	f7fe fd66 	bl	1e524 <ble_hs_lock>
            conn = ble_hs_conn_find(le16toh(ev->completed[i].handle));
   1fa58:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   1fa5c:	f8b3 0001 	ldrh.w	r0, [r3, #1]
   1fa60:	f7ff fbf0 	bl	1f244 <ble_hs_conn_find>
            if (conn != NULL) {
   1fa64:	2800      	cmp	r0, #0
   1fa66:	d0e9      	beq.n	1fa3c <ble_hs_hci_evt_num_completed_pkts+0x1c>
                if (conn->bhc_outstanding_pkts < num_pkts) {
   1fa68:	8f03      	ldrh	r3, [r0, #56]	; 0x38
   1fa6a:	42b3      	cmp	r3, r6
   1fa6c:	d2e1      	bcs.n	1fa32 <ble_hs_hci_evt_num_completed_pkts+0x12>
                    ble_hs_sched_reset(BLE_HS_ECONTROLLER);
   1fa6e:	200c      	movs	r0, #12
   1fa70:	f7fe fe74 	bl	1e75c <ble_hs_sched_reset>
   1fa74:	e7df      	b.n	1fa36 <ble_hs_hci_evt_num_completed_pkts+0x16>
    ble_hs_wakeup_tx();
   1fa76:	f7fe fd6f 	bl	1e558 <ble_hs_wakeup_tx>
    return 0;
   1fa7a:	2000      	movs	r0, #0
}
   1fa7c:	bd70      	pop	{r4, r5, r6, pc}
        return BLE_HS_ECONTROLLER;
   1fa7e:	200c      	movs	r0, #12
}
   1fa80:	4770      	bx	lr

0001fa82 <ble_hs_hci_evt_le_phy_update_complete>:
ble_hs_hci_evt_le_phy_update_complete(uint8_t subevent, const void *data,
                                      unsigned int len)
{
    const struct ble_hci_ev_le_subev_phy_update_complete *ev = data;

    if (len != sizeof(*ev)) {
   1fa82:	2a06      	cmp	r2, #6
   1fa84:	d001      	beq.n	1fa8a <ble_hs_hci_evt_le_phy_update_complete+0x8>
        return BLE_HS_ECONTROLLER;
   1fa86:	200c      	movs	r0, #12
    }

    ble_gap_rx_phy_update_complete(ev);

    return 0;
}
   1fa88:	4770      	bx	lr
{
   1fa8a:	b508      	push	{r3, lr}
   1fa8c:	4608      	mov	r0, r1
    ble_gap_rx_phy_update_complete(ev);
   1fa8e:	f7fb f965 	bl	1ad5c <ble_gap_rx_phy_update_complete>
    return 0;
   1fa92:	2000      	movs	r0, #0
}
   1fa94:	bd08      	pop	{r3, pc}

0001fa96 <ble_hs_hci_evt_le_dir_adv_rpt>:
{
   1fa96:	b530      	push	{r4, r5, lr}
   1fa98:	b087      	sub	sp, #28
    struct ble_gap_disc_desc desc = {0};
   1fa9a:	2300      	movs	r3, #0
   1fa9c:	9300      	str	r3, [sp, #0]
   1fa9e:	9301      	str	r3, [sp, #4]
   1faa0:	9302      	str	r3, [sp, #8]
   1faa2:	9303      	str	r3, [sp, #12]
   1faa4:	9304      	str	r3, [sp, #16]
   1faa6:	9305      	str	r3, [sp, #20]
    if (len < sizeof(*ev) || len != ev->num_reports * sizeof(ev->reports[0])) {
   1faa8:	2a01      	cmp	r2, #1
   1faaa:	d92f      	bls.n	1fb0c <ble_hs_hci_evt_le_dir_adv_rpt+0x76>
   1faac:	784b      	ldrb	r3, [r1, #1]
   1faae:	ebb2 1f03 	cmp.w	r2, r3, lsl #4
   1fab2:	d12d      	bne.n	1fb10 <ble_hs_hci_evt_le_dir_adv_rpt+0x7a>
   1fab4:	460d      	mov	r5, r1
    for (i = 0; i < ev->num_reports; i++) {
   1fab6:	2400      	movs	r4, #0
   1fab8:	e022      	b.n	1fb00 <ble_hs_hci_evt_le_dir_adv_rpt+0x6a>
        desc.event_type = ev->reports[i].type;
   1faba:	eb05 1304 	add.w	r3, r5, r4, lsl #4
   1fabe:	789a      	ldrb	r2, [r3, #2]
   1fac0:	f88d 2000 	strb.w	r2, [sp]
        desc.addr.type = ev->reports[i].addr_type;
   1fac4:	78da      	ldrb	r2, [r3, #3]
   1fac6:	f88d 2002 	strb.w	r2, [sp, #2]
        memcpy(desc.addr.val, ev->reports[i].addr, BLE_DEV_ADDR_LEN);
   1faca:	461a      	mov	r2, r3
   1facc:	f852 1f04 	ldr.w	r1, [r2, #4]!
   1fad0:	f8cd 1003 	str.w	r1, [sp, #3]
   1fad4:	8892      	ldrh	r2, [r2, #4]
   1fad6:	f8ad 2007 	strh.w	r2, [sp, #7]
        desc.direct_addr.type = ev->reports[i].dir_addr_type;
   1fada:	7a9a      	ldrb	r2, [r3, #10]
   1fadc:	f88d 2010 	strb.w	r2, [sp, #16]
        memcpy(desc.direct_addr.val, ev->reports[i].dir_addr, BLE_DEV_ADDR_LEN);
   1fae0:	461a      	mov	r2, r3
   1fae2:	f852 1f0b 	ldr.w	r1, [r2, #11]!
   1fae6:	f8cd 1011 	str.w	r1, [sp, #17]
   1faea:	8892      	ldrh	r2, [r2, #4]
   1faec:	f8ad 2015 	strh.w	r2, [sp, #21]
        desc.rssi = ev->reports[i].rssi;
   1faf0:	f993 3011 	ldrsb.w	r3, [r3, #17]
   1faf4:	f88d 3009 	strb.w	r3, [sp, #9]
        ble_gap_rx_adv_report(&desc);
   1faf8:	4668      	mov	r0, sp
   1fafa:	f7fb f8fb 	bl	1acf4 <ble_gap_rx_adv_report>
    for (i = 0; i < ev->num_reports; i++) {
   1fafe:	3401      	adds	r4, #1
   1fb00:	786b      	ldrb	r3, [r5, #1]
   1fb02:	42a3      	cmp	r3, r4
   1fb04:	dcd9      	bgt.n	1faba <ble_hs_hci_evt_le_dir_adv_rpt+0x24>
    return 0;
   1fb06:	2000      	movs	r0, #0
}
   1fb08:	b007      	add	sp, #28
   1fb0a:	bd30      	pop	{r4, r5, pc}
        return BLE_HS_ECONTROLLER;
   1fb0c:	200c      	movs	r0, #12
   1fb0e:	e7fb      	b.n	1fb08 <ble_hs_hci_evt_le_dir_adv_rpt+0x72>
   1fb10:	200c      	movs	r0, #12
   1fb12:	e7f9      	b.n	1fb08 <ble_hs_hci_evt_le_dir_adv_rpt+0x72>

0001fb14 <ble_hs_hci_evt_le_adv_rpt>:
{
   1fb14:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fb16:	b087      	sub	sp, #28
   1fb18:	460e      	mov	r6, r1
    struct ble_gap_disc_desc desc = {0};
   1fb1a:	2300      	movs	r3, #0
   1fb1c:	9300      	str	r3, [sp, #0]
   1fb1e:	9301      	str	r3, [sp, #4]
   1fb20:	9302      	str	r3, [sp, #8]
   1fb22:	9303      	str	r3, [sp, #12]
   1fb24:	9304      	str	r3, [sp, #16]
   1fb26:	9305      	str	r3, [sp, #20]
    rc = ble_hs_hci_evt_le_adv_rpt_first_pass(data, len);
   1fb28:	4611      	mov	r1, r2
   1fb2a:	4630      	mov	r0, r6
   1fb2c:	f7ff ff0b 	bl	1f946 <ble_hs_hci_evt_le_adv_rpt_first_pass>
    if (rc != 0) {
   1fb30:	4607      	mov	r7, r0
   1fb32:	bb58      	cbnz	r0, 1fb8c <ble_hs_hci_evt_le_adv_rpt+0x78>
    data += sizeof(*ev);
   1fb34:	1cb3      	adds	r3, r6, #2
    desc.direct_addr = *BLE_ADDR_ANY;
   1fb36:	2200      	movs	r2, #0
   1fb38:	9204      	str	r2, [sp, #16]
   1fb3a:	f8cd 2013 	str.w	r2, [sp, #19]
    for (i = 0; i < ev->num_reports; i++) {
   1fb3e:	4605      	mov	r5, r0
   1fb40:	e021      	b.n	1fb86 <ble_hs_hci_evt_le_adv_rpt+0x72>
        data += sizeof(rpt) + rpt->data_len + 1;
   1fb42:	7a1c      	ldrb	r4, [r3, #8]
   1fb44:	3405      	adds	r4, #5
   1fb46:	441c      	add	r4, r3
        desc.event_type = rpt->type;
   1fb48:	781a      	ldrb	r2, [r3, #0]
   1fb4a:	f88d 2000 	strb.w	r2, [sp]
        desc.addr.type = rpt->addr_type;
   1fb4e:	785a      	ldrb	r2, [r3, #1]
   1fb50:	f88d 2002 	strb.w	r2, [sp, #2]
        memcpy(desc.addr.val, rpt->addr, BLE_DEV_ADDR_LEN);
   1fb54:	461a      	mov	r2, r3
   1fb56:	f852 1f02 	ldr.w	r1, [r2, #2]!
   1fb5a:	f8cd 1003 	str.w	r1, [sp, #3]
   1fb5e:	8892      	ldrh	r2, [r2, #4]
   1fb60:	f8ad 2007 	strh.w	r2, [sp, #7]
        desc.length_data = rpt->data_len;
   1fb64:	7a1a      	ldrb	r2, [r3, #8]
   1fb66:	f88d 2001 	strb.w	r2, [sp, #1]
        desc.data = rpt->data;
   1fb6a:	f103 0209 	add.w	r2, r3, #9
   1fb6e:	9203      	str	r2, [sp, #12]
        desc.rssi = rpt->data[rpt->data_len];
   1fb70:	7a1a      	ldrb	r2, [r3, #8]
   1fb72:	4413      	add	r3, r2
   1fb74:	f993 3009 	ldrsb.w	r3, [r3, #9]
   1fb78:	f88d 3009 	strb.w	r3, [sp, #9]
        ble_gap_rx_adv_report(&desc);
   1fb7c:	4668      	mov	r0, sp
   1fb7e:	f7fb f8b9 	bl	1acf4 <ble_gap_rx_adv_report>
    for (i = 0; i < ev->num_reports; i++) {
   1fb82:	3501      	adds	r5, #1
        data += sizeof(rpt) + rpt->data_len + 1;
   1fb84:	4623      	mov	r3, r4
    for (i = 0; i < ev->num_reports; i++) {
   1fb86:	7872      	ldrb	r2, [r6, #1]
   1fb88:	42aa      	cmp	r2, r5
   1fb8a:	dcda      	bgt.n	1fb42 <ble_hs_hci_evt_le_adv_rpt+0x2e>
}
   1fb8c:	4638      	mov	r0, r7
   1fb8e:	b007      	add	sp, #28
   1fb90:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001fb92 <ble_hs_hci_evt_le_enh_conn_complete>:
    if (len != sizeof(*ev)) {
   1fb92:	2a1f      	cmp	r2, #31
   1fb94:	d001      	beq.n	1fb9a <ble_hs_hci_evt_le_enh_conn_complete+0x8>
        return BLE_HS_ECONTROLLER;
   1fb96:	200c      	movs	r0, #12
}
   1fb98:	4770      	bx	lr
{
   1fb9a:	b510      	push	{r4, lr}
   1fb9c:	b088      	sub	sp, #32
   1fb9e:	460c      	mov	r4, r1
    memset(&evt, 0, sizeof(evt));
   1fba0:	2220      	movs	r2, #32
   1fba2:	2100      	movs	r1, #0
   1fba4:	4668      	mov	r0, sp
   1fba6:	f7ee fc8b 	bl	e4c0 <memset>
    evt.status = ev->status;
   1fbaa:	7863      	ldrb	r3, [r4, #1]
   1fbac:	f88d 3000 	strb.w	r3, [sp]
    if (evt.status == BLE_ERR_SUCCESS) {
   1fbb0:	bb63      	cbnz	r3, 1fc0c <ble_hs_hci_evt_le_enh_conn_complete+0x7a>
        evt.connection_handle = le16toh(ev->conn_handle);
   1fbb2:	8863      	ldrh	r3, [r4, #2]
   1fbb4:	f8ad 3002 	strh.w	r3, [sp, #2]
        evt.role = ev->role;
   1fbb8:	7923      	ldrb	r3, [r4, #4]
   1fbba:	f88d 3004 	strb.w	r3, [sp, #4]
        evt.peer_addr_type = ev->peer_addr_type;
   1fbbe:	7963      	ldrb	r3, [r4, #5]
   1fbc0:	f88d 3005 	strb.w	r3, [sp, #5]
        memcpy(evt.peer_addr, ev->peer_addr, BLE_DEV_ADDR_LEN);
   1fbc4:	4623      	mov	r3, r4
   1fbc6:	f853 2f06 	ldr.w	r2, [r3, #6]!
   1fbca:	f8cd 2006 	str.w	r2, [sp, #6]
   1fbce:	889b      	ldrh	r3, [r3, #4]
   1fbd0:	f8ad 300a 	strh.w	r3, [sp, #10]
        memcpy(evt.local_rpa, ev->local_rpa, BLE_DEV_ADDR_LEN);
   1fbd4:	4623      	mov	r3, r4
   1fbd6:	f853 2f0c 	ldr.w	r2, [r3, #12]!
   1fbda:	f8cd 2013 	str.w	r2, [sp, #19]
   1fbde:	889b      	ldrh	r3, [r3, #4]
   1fbe0:	f8ad 3017 	strh.w	r3, [sp, #23]
        memcpy(evt.peer_rpa,ev->peer_rpa, BLE_DEV_ADDR_LEN);
   1fbe4:	4623      	mov	r3, r4
   1fbe6:	f853 2f12 	ldr.w	r2, [r3, #18]!
   1fbea:	f8cd 2019 	str.w	r2, [sp, #25]
   1fbee:	889b      	ldrh	r3, [r3, #4]
   1fbf0:	f8ad 301d 	strh.w	r3, [sp, #29]
        evt.conn_itvl = le16toh(ev->conn_itvl);
   1fbf4:	8b23      	ldrh	r3, [r4, #24]
   1fbf6:	f8ad 300c 	strh.w	r3, [sp, #12]
        evt.conn_latency = le16toh(ev->conn_latency);
   1fbfa:	8b63      	ldrh	r3, [r4, #26]
   1fbfc:	f8ad 300e 	strh.w	r3, [sp, #14]
        evt.supervision_timeout = le16toh(ev->supervision_timeout);
   1fc00:	8ba3      	ldrh	r3, [r4, #28]
   1fc02:	f8ad 3010 	strh.w	r3, [sp, #16]
        evt.master_clk_acc = ev->mca;
   1fc06:	7fa3      	ldrb	r3, [r4, #30]
   1fc08:	f88d 3012 	strb.w	r3, [sp, #18]
    return ble_gap_rx_conn_complete(&evt, 0);
   1fc0c:	2100      	movs	r1, #0
   1fc0e:	4668      	mov	r0, sp
   1fc10:	f7fb f990 	bl	1af34 <ble_gap_rx_conn_complete>
}
   1fc14:	b008      	add	sp, #32
   1fc16:	bd10      	pop	{r4, pc}

0001fc18 <ble_hs_hci_evt_le_conn_complete>:
    if (len != sizeof(*ev)) {
   1fc18:	2a13      	cmp	r2, #19
   1fc1a:	d001      	beq.n	1fc20 <ble_hs_hci_evt_le_conn_complete+0x8>
        return BLE_HS_ECONTROLLER;
   1fc1c:	200c      	movs	r0, #12
}
   1fc1e:	4770      	bx	lr
{
   1fc20:	b510      	push	{r4, lr}
   1fc22:	b088      	sub	sp, #32
   1fc24:	460c      	mov	r4, r1
    memset(&evt, 0, sizeof(evt));
   1fc26:	2220      	movs	r2, #32
   1fc28:	2100      	movs	r1, #0
   1fc2a:	4668      	mov	r0, sp
   1fc2c:	f7ee fc48 	bl	e4c0 <memset>
    evt.status = ev->status;
   1fc30:	7863      	ldrb	r3, [r4, #1]
   1fc32:	f88d 3000 	strb.w	r3, [sp]
    if (evt.status == BLE_ERR_SUCCESS) {
   1fc36:	b9e3      	cbnz	r3, 1fc72 <ble_hs_hci_evt_le_conn_complete+0x5a>
        evt.connection_handle = le16toh(ev->conn_handle);
   1fc38:	8863      	ldrh	r3, [r4, #2]
   1fc3a:	f8ad 3002 	strh.w	r3, [sp, #2]
        evt.role = ev->role;
   1fc3e:	7923      	ldrb	r3, [r4, #4]
   1fc40:	f88d 3004 	strb.w	r3, [sp, #4]
        evt.peer_addr_type = ev->peer_addr_type;
   1fc44:	7963      	ldrb	r3, [r4, #5]
   1fc46:	f88d 3005 	strb.w	r3, [sp, #5]
        memcpy(evt.peer_addr, ev->peer_addr, BLE_DEV_ADDR_LEN);
   1fc4a:	4623      	mov	r3, r4
   1fc4c:	f853 2f06 	ldr.w	r2, [r3, #6]!
   1fc50:	f8cd 2006 	str.w	r2, [sp, #6]
   1fc54:	889b      	ldrh	r3, [r3, #4]
   1fc56:	f8ad 300a 	strh.w	r3, [sp, #10]
        evt.conn_itvl = le16toh(ev->conn_itvl);
   1fc5a:	89a3      	ldrh	r3, [r4, #12]
   1fc5c:	f8ad 300c 	strh.w	r3, [sp, #12]
        evt.conn_latency = le16toh(ev->conn_latency);
   1fc60:	89e3      	ldrh	r3, [r4, #14]
   1fc62:	f8ad 300e 	strh.w	r3, [sp, #14]
        evt.supervision_timeout = le16toh(ev->supervision_timeout);
   1fc66:	8a23      	ldrh	r3, [r4, #16]
   1fc68:	f8ad 3010 	strh.w	r3, [sp, #16]
        evt.master_clk_acc = ev->mca;
   1fc6c:	7ca3      	ldrb	r3, [r4, #18]
   1fc6e:	f88d 3012 	strb.w	r3, [sp, #18]
    return ble_gap_rx_conn_complete(&evt, 0);
   1fc72:	2100      	movs	r1, #0
   1fc74:	4668      	mov	r0, sp
   1fc76:	f7fb f95d 	bl	1af34 <ble_gap_rx_conn_complete>
}
   1fc7a:	b008      	add	sp, #32
   1fc7c:	bd10      	pop	{r4, pc}

0001fc7e <ble_hs_hci_evt_le_conn_parm_req>:
    if (len != sizeof(*ev)) {
   1fc7e:	2a0b      	cmp	r2, #11
   1fc80:	d001      	beq.n	1fc86 <ble_hs_hci_evt_le_conn_parm_req+0x8>
        return BLE_HS_ECONTROLLER;
   1fc82:	200c      	movs	r0, #12
}
   1fc84:	4770      	bx	lr
{
   1fc86:	b508      	push	{r3, lr}
   1fc88:	4608      	mov	r0, r1
    ble_gap_rx_param_req(ev);
   1fc8a:	f7fb fc61 	bl	1b550 <ble_gap_rx_param_req>
    return 0;
   1fc8e:	2000      	movs	r0, #0
}
   1fc90:	bd08      	pop	{r3, pc}

0001fc92 <ble_hs_hci_evt_le_lt_key_req>:
    if (len != sizeof(*ev)) {
   1fc92:	2a0d      	cmp	r2, #13
   1fc94:	d001      	beq.n	1fc9a <ble_hs_hci_evt_le_lt_key_req+0x8>
        return BLE_HS_ECONTROLLER;
   1fc96:	200c      	movs	r0, #12
}
   1fc98:	4770      	bx	lr
{
   1fc9a:	b508      	push	{r3, lr}
   1fc9c:	4608      	mov	r0, r1
    ble_sm_ltk_req_rx(ev);
   1fc9e:	f002 fbc3 	bl	22428 <ble_sm_ltk_req_rx>
    return 0;
   1fca2:	2000      	movs	r0, #0
}
   1fca4:	bd08      	pop	{r3, pc}

0001fca6 <ble_hs_hci_evt_le_rd_rem_used_feat_complete>:
    if (len != sizeof(*ev)) {
   1fca6:	2a0c      	cmp	r2, #12
   1fca8:	d001      	beq.n	1fcae <ble_hs_hci_evt_le_rd_rem_used_feat_complete+0x8>
        return BLE_HS_ECONTROLLER;
   1fcaa:	200c      	movs	r0, #12
}
   1fcac:	4770      	bx	lr
{
   1fcae:	b508      	push	{r3, lr}
   1fcb0:	4608      	mov	r0, r1
    ble_gap_rx_rd_rem_sup_feat_complete(ev);
   1fcb2:	f7fb f82b 	bl	1ad0c <ble_gap_rx_rd_rem_sup_feat_complete>
    return 0;
   1fcb6:	2000      	movs	r0, #0
}
   1fcb8:	bd08      	pop	{r3, pc}

0001fcba <ble_hs_hci_evt_le_conn_upd_complete>:
    if (len != sizeof(*ev)) {
   1fcba:	2a0a      	cmp	r2, #10
   1fcbc:	d001      	beq.n	1fcc2 <ble_hs_hci_evt_le_conn_upd_complete+0x8>
        return BLE_HS_ECONTROLLER;
   1fcbe:	200c      	movs	r0, #12
}
   1fcc0:	4770      	bx	lr
{
   1fcc2:	b508      	push	{r3, lr}
   1fcc4:	4608      	mov	r0, r1
    ble_gap_rx_update_complete(ev);
   1fcc6:	f7fb fb7d 	bl	1b3c4 <ble_gap_rx_update_complete>
    return 0;
   1fcca:	2000      	movs	r0, #0
}
   1fccc:	bd08      	pop	{r3, pc}
	...

0001fcd0 <ble_hs_hci_evt_process>:

int
ble_hs_hci_evt_process(const struct ble_hci_ev *ev)
{
   1fcd0:	b538      	push	{r3, r4, r5, lr}
   1fcd2:	4604      	mov	r4, r0
    const struct ble_hs_hci_evt_dispatch_entry *entry;
    int rc;

    /* Count events received */
    STATS_INC(ble_hs_stats, hci_event);
   1fcd4:	4a0c      	ldr	r2, [pc, #48]	; (1fd08 <ble_hs_hci_evt_process+0x38>)
   1fcd6:	6993      	ldr	r3, [r2, #24]
   1fcd8:	3301      	adds	r3, #1
   1fcda:	6193      	str	r3, [r2, #24]


    entry = ble_hs_hci_evt_dispatch_find(ev->opcode);
   1fcdc:	7805      	ldrb	r5, [r0, #0]
   1fcde:	4628      	mov	r0, r5
   1fce0:	f7ff fe02 	bl	1f8e8 <ble_hs_hci_evt_dispatch_find>
    if (entry == NULL) {
   1fce4:	b150      	cbz	r0, 1fcfc <ble_hs_hci_evt_process+0x2c>
        STATS_INC(ble_hs_stats, hci_unknown_event);
        rc = BLE_HS_ENOTSUP;
    } else {
        rc = entry->cb(ev->opcode, ev->data, ev->length);
   1fce6:	6843      	ldr	r3, [r0, #4]
   1fce8:	7862      	ldrb	r2, [r4, #1]
   1fcea:	1ca1      	adds	r1, r4, #2
   1fcec:	4628      	mov	r0, r5
   1fcee:	4798      	blx	r3
   1fcf0:	4605      	mov	r5, r0
    }

    ble_hci_trans_buf_free((uint8_t *) ev);
   1fcf2:	4620      	mov	r0, r4
   1fcf4:	f006 f9ea 	bl	260cc <ble_hci_trans_buf_free>

    return rc;
}
   1fcf8:	4628      	mov	r0, r5
   1fcfa:	bd38      	pop	{r3, r4, r5, pc}
        STATS_INC(ble_hs_stats, hci_unknown_event);
   1fcfc:	4a02      	ldr	r2, [pc, #8]	; (1fd08 <ble_hs_hci_evt_process+0x38>)
   1fcfe:	6a13      	ldr	r3, [r2, #32]
   1fd00:	3301      	adds	r3, #1
   1fd02:	6213      	str	r3, [r2, #32]
        rc = BLE_HS_ENOTSUP;
   1fd04:	2508      	movs	r5, #8
   1fd06:	e7f4      	b.n	1fcf2 <ble_hs_hci_evt_process+0x22>
   1fd08:	200045f4 	.word	0x200045f4

0001fd0c <ble_hs_hci_evt_acl_process>:
 *
 * @return                      0 on success; nonzero on failure.
 */
int
ble_hs_hci_evt_acl_process(struct os_mbuf *om)
{
   1fd0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fd10:	b086      	sub	sp, #24
   1fd12:	4604      	mov	r4, r0
    ble_l2cap_rx_fn *rx_cb;
    uint16_t conn_handle;
    int reject_cid;
    int rc;

    rc = ble_hs_hci_util_data_hdr_strip(om, &hci_hdr);
   1fd14:	a905      	add	r1, sp, #20
   1fd16:	f000 f8a5 	bl	1fe64 <ble_hs_hci_util_data_hdr_strip>
    if (rc != 0) {
   1fd1a:	4605      	mov	r5, r0
   1fd1c:	b940      	cbnz	r0, 1fd30 <ble_hs_hci_evt_acl_process+0x24>
    BLE_HS_LOG(DEBUG, "ble_hs_hci_evt_acl_process(): conn_handle=%u pb=%x "
                      "len=%u data=",
               BLE_HCI_DATA_HANDLE(hci_hdr.hdh_handle_pb_bc),
               BLE_HCI_DATA_PB(hci_hdr.hdh_handle_pb_bc),
               hci_hdr.hdh_len);
    ble_hs_log_mbuf(om);
   1fd1e:	4620      	mov	r0, r4
   1fd20:	f000 f986 	bl	20030 <ble_hs_log_mbuf>
    BLE_HS_LOG(DEBUG, "\n");
#endif
#endif

    if (hci_hdr.hdh_len != OS_MBUF_PKTHDR(om)->omp_len) {
   1fd24:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   1fd28:	8a23      	ldrh	r3, [r4, #16]
   1fd2a:	429a      	cmp	r2, r3
   1fd2c:	d007      	beq.n	1fd3e <ble_hs_hci_evt_acl_process+0x32>
        rc = BLE_HS_EBADDATA;
   1fd2e:	250a      	movs	r5, #10
    }

    return 0;

err:
    os_mbuf_free_chain(om);
   1fd30:	4620      	mov	r0, r4
   1fd32:	f7ed fe70 	bl	da16 <os_mbuf_free_chain>
    return rc;
}
   1fd36:	4628      	mov	r0, r5
   1fd38:	b006      	add	sp, #24
   1fd3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    conn_handle = BLE_HCI_DATA_HANDLE(hci_hdr.hdh_handle_pb_bc);
   1fd3e:	f8bd 6014 	ldrh.w	r6, [sp, #20]
   1fd42:	f3c6 060b 	ubfx	r6, r6, #0, #12
    ble_hs_lock();
   1fd46:	f7fe fbed 	bl	1e524 <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
   1fd4a:	4630      	mov	r0, r6
   1fd4c:	f7ff fa7a 	bl	1f244 <ble_hs_conn_find>
    if (conn == NULL) {
   1fd50:	4680      	mov	r8, r0
   1fd52:	b198      	cbz	r0, 1fd7c <ble_hs_hci_evt_acl_process+0x70>
        rc = ble_l2cap_rx(conn, &hci_hdr, om, &rx_cb, &reject_cid);
   1fd54:	ab03      	add	r3, sp, #12
   1fd56:	9300      	str	r3, [sp, #0]
   1fd58:	ab04      	add	r3, sp, #16
   1fd5a:	4622      	mov	r2, r4
   1fd5c:	a905      	add	r1, sp, #20
   1fd5e:	f000 fd8c 	bl	2087a <ble_l2cap_rx>
   1fd62:	4607      	mov	r7, r0
        om = NULL;
   1fd64:	2400      	movs	r4, #0
    ble_hs_unlock();
   1fd66:	f7fe fbe1 	bl	1e52c <ble_hs_unlock>
    switch (rc) {
   1fd6a:	b167      	cbz	r7, 1fd86 <ble_hs_hci_evt_acl_process+0x7a>
   1fd6c:	2f01      	cmp	r7, #1
   1fd6e:	d0e2      	beq.n	1fd36 <ble_hs_hci_evt_acl_process+0x2a>
        if (reject_cid != -1) {
   1fd70:	9b03      	ldr	r3, [sp, #12]
   1fd72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1fd76:	d111      	bne.n	1fd9c <ble_hs_hci_evt_acl_process+0x90>
   1fd78:	463d      	mov	r5, r7
   1fd7a:	e7d9      	b.n	1fd30 <ble_hs_hci_evt_acl_process+0x24>
        reject_cid = -1;
   1fd7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1fd80:	9303      	str	r3, [sp, #12]
        rc = BLE_HS_ENOTCONN;
   1fd82:	2707      	movs	r7, #7
   1fd84:	e7ef      	b.n	1fd66 <ble_hs_hci_evt_acl_process+0x5a>
        rc = rx_cb(conn->bhc_rx_chan);
   1fd86:	f8d8 0030 	ldr.w	r0, [r8, #48]	; 0x30
   1fd8a:	9b04      	ldr	r3, [sp, #16]
   1fd8c:	4798      	blx	r3
        ble_l2cap_remove_rx(conn, conn->bhc_rx_chan);
   1fd8e:	f8d8 1030 	ldr.w	r1, [r8, #48]	; 0x30
   1fd92:	4640      	mov	r0, r8
   1fd94:	f000 fd41 	bl	2081a <ble_l2cap_remove_rx>
    return 0;
   1fd98:	463d      	mov	r5, r7
        break;
   1fd9a:	e7cc      	b.n	1fd36 <ble_hs_hci_evt_acl_process+0x2a>
            ble_l2cap_sig_reject_invalid_cid_tx(conn_handle, 0, 0, reject_cid);
   1fd9c:	b29b      	uxth	r3, r3
   1fd9e:	2200      	movs	r2, #0
   1fda0:	4611      	mov	r1, r2
   1fda2:	4630      	mov	r0, r6
   1fda4:	f001 f8d6 	bl	20f54 <ble_l2cap_sig_reject_invalid_cid_tx>
   1fda8:	463d      	mov	r5, r7
   1fdaa:	e7c1      	b.n	1fd30 <ble_hs_hci_evt_acl_process+0x24>

0001fdac <ble_hs_hci_util_handle_pb_bc_join>:
{
    BLE_HS_DBG_ASSERT(handle <= 0x0fff);
    BLE_HS_DBG_ASSERT(pb <= 0x03);
    BLE_HS_DBG_ASSERT(bc <= 0x03);

    return (handle  << 0)   |
   1fdac:	ea40 3001 	orr.w	r0, r0, r1, lsl #12
   1fdb0:	b200      	sxth	r0, r0
           (pb      << 12)  |
   1fdb2:	ea40 3082 	orr.w	r0, r0, r2, lsl #14
           (bc      << 14);
}
   1fdb6:	b280      	uxth	r0, r0
   1fdb8:	4770      	bx	lr
	...

0001fdbc <ble_hs_hci_util_read_adv_tx_pwr>:

int
ble_hs_hci_util_read_adv_tx_pwr(int8_t *out_tx_pwr)
{
   1fdbc:	b530      	push	{r4, r5, lr}
   1fdbe:	b085      	sub	sp, #20
   1fdc0:	4605      	mov	r5, r0
    struct ble_hci_le_rd_adv_chan_txpwr_rp rsp;
    int rc;

    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   1fdc2:	2301      	movs	r3, #1
   1fdc4:	9300      	str	r3, [sp, #0]
   1fdc6:	ab03      	add	r3, sp, #12
   1fdc8:	2200      	movs	r2, #0
   1fdca:	4611      	mov	r1, r2
   1fdcc:	f242 0007 	movw	r0, #8199	; 0x2007
   1fdd0:	f7ff fc54 	bl	1f67c <ble_hs_hci_cmd_tx>
                                      BLE_HCI_OCF_LE_RD_ADV_CHAN_TXPWR),
                           NULL, 0, &rsp, sizeof(rsp));
    if (rc != 0) {
   1fdd4:	4604      	mov	r4, r0
   1fdd6:	b930      	cbnz	r0, 1fde6 <ble_hs_hci_util_read_adv_tx_pwr+0x2a>
        return rc;
    }

    *out_tx_pwr = rsp.power_level;
   1fdd8:	f99d 300c 	ldrsb.w	r3, [sp, #12]
   1fddc:	702b      	strb	r3, [r5, #0]

    if (*out_tx_pwr < BLE_HCI_ADV_CHAN_TXPWR_MIN ||
   1fdde:	3314      	adds	r3, #20
   1fde0:	b2db      	uxtb	r3, r3
   1fde2:	2b1e      	cmp	r3, #30
   1fde4:	d802      	bhi.n	1fdec <ble_hs_hci_util_read_adv_tx_pwr+0x30>
        *out_tx_pwr > BLE_HCI_ADV_CHAN_TXPWR_MAX) {
        BLE_HS_LOG(WARN, "advertiser txpwr out of range\n");
    }

    return 0;
}
   1fde6:	4620      	mov	r0, r4
   1fde8:	b005      	add	sp, #20
   1fdea:	bd30      	pop	{r4, r5, pc}
        BLE_HS_LOG(WARN, "advertiser txpwr out of range\n");
   1fdec:	4a02      	ldr	r2, [pc, #8]	; (1fdf8 <ble_hs_hci_util_read_adv_tx_pwr+0x3c>)
   1fdee:	2102      	movs	r1, #2
   1fdf0:	2004      	movs	r0, #4
   1fdf2:	f7ef febd 	bl	fb70 <modlog_printf>
   1fdf6:	e7f6      	b.n	1fde6 <ble_hs_hci_util_read_adv_tx_pwr+0x2a>
   1fdf8:	0002b5fc 	.word	0x0002b5fc

0001fdfc <ble_hs_hci_util_rand>:

int
ble_hs_hci_util_rand(void *dst, int len)
{
   1fdfc:	b570      	push	{r4, r5, r6, lr}
   1fdfe:	b084      	sub	sp, #16
   1fe00:	4606      	mov	r6, r0
   1fe02:	460c      	mov	r4, r1
    uint8_t *u8ptr;
    int chunk_sz;
    int rc;

    u8ptr = dst;
    while (len > 0) {
   1fe04:	2c00      	cmp	r4, #0
   1fe06:	dd16      	ble.n	1fe36 <ble_hs_hci_util_rand+0x3a>
        rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE, BLE_HCI_OCF_LE_RAND),
   1fe08:	2308      	movs	r3, #8
   1fe0a:	9300      	str	r3, [sp, #0]
   1fe0c:	446b      	add	r3, sp
   1fe0e:	2200      	movs	r2, #0
   1fe10:	4611      	mov	r1, r2
   1fe12:	f242 0018 	movw	r0, #8216	; 0x2018
   1fe16:	f7ff fc31 	bl	1f67c <ble_hs_hci_cmd_tx>
                               NULL, 0, &rsp, sizeof(rsp));
        if (rc != 0) {
   1fe1a:	4603      	mov	r3, r0
   1fe1c:	b960      	cbnz	r0, 1fe38 <ble_hs_hci_util_rand+0x3c>
            return rc;
        }

        chunk_sz = min(len, sizeof(rsp));
   1fe1e:	4625      	mov	r5, r4
   1fe20:	2c08      	cmp	r4, #8
   1fe22:	bf28      	it	cs
   1fe24:	2508      	movcs	r5, #8
        memcpy(u8ptr, &rsp.random_number, chunk_sz);
   1fe26:	462a      	mov	r2, r5
   1fe28:	a902      	add	r1, sp, #8
   1fe2a:	4630      	mov	r0, r6
   1fe2c:	f7ee fb20 	bl	e470 <memcpy>

        len -= chunk_sz;
   1fe30:	1b64      	subs	r4, r4, r5
        u8ptr += chunk_sz;
   1fe32:	442e      	add	r6, r5
   1fe34:	e7e6      	b.n	1fe04 <ble_hs_hci_util_rand+0x8>
    }

    return 0;
   1fe36:	2300      	movs	r3, #0
}
   1fe38:	4618      	mov	r0, r3
   1fe3a:	b004      	add	sp, #16
   1fe3c:	bd70      	pop	{r4, r5, r6, pc}

0001fe3e <ble_hs_hci_util_set_random_addr>:
    return 0;
}

int
ble_hs_hci_util_set_random_addr(const uint8_t *addr)
{
   1fe3e:	b500      	push	{lr}
   1fe40:	b085      	sub	sp, #20
   1fe42:	4603      	mov	r3, r0
    struct ble_hci_le_set_rand_addr_cp cmd;

    memcpy(cmd.addr, addr, BLE_DEV_ADDR_LEN);
   1fe44:	6800      	ldr	r0, [r0, #0]
   1fe46:	9002      	str	r0, [sp, #8]
   1fe48:	889b      	ldrh	r3, [r3, #4]
   1fe4a:	f8ad 300c 	strh.w	r3, [sp, #12]

    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   1fe4e:	2300      	movs	r3, #0
   1fe50:	9300      	str	r3, [sp, #0]
   1fe52:	2206      	movs	r2, #6
   1fe54:	a902      	add	r1, sp, #8
   1fe56:	f242 0005 	movw	r0, #8197	; 0x2005
   1fe5a:	f7ff fc0f 	bl	1f67c <ble_hs_hci_cmd_tx>
                                        BLE_HCI_OCF_LE_SET_RAND_ADDR),
                             &cmd, sizeof(cmd), NULL, 0);
}
   1fe5e:	b005      	add	sp, #20
   1fe60:	f85d fb04 	ldr.w	pc, [sp], #4

0001fe64 <ble_hs_hci_util_data_hdr_strip>:
}

int
ble_hs_hci_util_data_hdr_strip(struct os_mbuf *om,
                               struct hci_data_hdr *out_hdr)
{
   1fe64:	b570      	push	{r4, r5, r6, lr}
   1fe66:	4606      	mov	r6, r0
   1fe68:	460c      	mov	r4, r1
    int rc;

    rc = os_mbuf_copydata(om, 0, BLE_HCI_DATA_HDR_SZ, out_hdr);
   1fe6a:	460b      	mov	r3, r1
   1fe6c:	2204      	movs	r2, #4
   1fe6e:	2100      	movs	r1, #0
   1fe70:	f7ed fe72 	bl	db58 <os_mbuf_copydata>
    if (rc != 0) {
   1fe74:	b980      	cbnz	r0, 1fe98 <ble_hs_hci_util_data_hdr_strip+0x34>
   1fe76:	4605      	mov	r5, r0
        return BLE_HS_ECONTROLLER;
    }

    /* Strip HCI ACL data header from the front of the packet. */
    os_mbuf_adj(om, BLE_HCI_DATA_HDR_SZ);
   1fe78:	2104      	movs	r1, #4
   1fe7a:	4630      	mov	r0, r6
   1fe7c:	f7ed fe99 	bl	dbb2 <os_mbuf_adj>

    out_hdr->hdh_handle_pb_bc = get_le16(&out_hdr->hdh_handle_pb_bc);
   1fe80:	4620      	mov	r0, r4
   1fe82:	f009 fc84 	bl	2978e <get_le16>
   1fe86:	4623      	mov	r3, r4
   1fe88:	f823 0b02 	strh.w	r0, [r3], #2
    out_hdr->hdh_len = get_le16(&out_hdr->hdh_len);
   1fe8c:	4618      	mov	r0, r3
   1fe8e:	f009 fc7e 	bl	2978e <get_le16>
   1fe92:	8060      	strh	r0, [r4, #2]

    return 0;
}
   1fe94:	4628      	mov	r0, r5
   1fe96:	bd70      	pop	{r4, r5, r6, pc}
        return BLE_HS_ECONTROLLER;
   1fe98:	250c      	movs	r5, #12
   1fe9a:	e7fb      	b.n	1fe94 <ble_hs_hci_util_data_hdr_strip+0x30>

0001fe9c <ble_hs_id_set_pub>:
static uint8_t ble_hs_id_pub[6];
static uint8_t ble_hs_id_rnd[6];

void
ble_hs_id_set_pub(const uint8_t *pub_addr)
{
   1fe9c:	b510      	push	{r4, lr}
   1fe9e:	4604      	mov	r4, r0
    ble_hs_lock();
   1fea0:	f7fe fb40 	bl	1e524 <ble_hs_lock>
    memcpy(ble_hs_id_pub, pub_addr, 6);
   1fea4:	4b03      	ldr	r3, [pc, #12]	; (1feb4 <ble_hs_id_set_pub+0x18>)
   1fea6:	6820      	ldr	r0, [r4, #0]
   1fea8:	6018      	str	r0, [r3, #0]
   1feaa:	88a2      	ldrh	r2, [r4, #4]
   1feac:	809a      	strh	r2, [r3, #4]
    ble_hs_unlock();
   1feae:	f7fe fb3d 	bl	1e52c <ble_hs_unlock>
}
   1feb2:	bd10      	pop	{r4, pc}
   1feb4:	20002f9c 	.word	0x20002f9c

0001feb8 <ble_hs_id_gen_rnd>:

int
ble_hs_id_gen_rnd(int nrpa, ble_addr_t *out_addr)
{
   1feb8:	b538      	push	{r3, r4, r5, lr}
   1feba:	4605      	mov	r5, r0
   1febc:	460c      	mov	r4, r1
    int rc;

    out_addr->type = BLE_ADDR_RANDOM;
   1febe:	4608      	mov	r0, r1
   1fec0:	2301      	movs	r3, #1
   1fec2:	f800 3b01 	strb.w	r3, [r0], #1

    rc = ble_hs_hci_util_rand(out_addr->val, 6);
   1fec6:	2106      	movs	r1, #6
   1fec8:	f7ff ff98 	bl	1fdfc <ble_hs_hci_util_rand>
    if (rc != 0) {
   1fecc:	4603      	mov	r3, r0
   1fece:	b928      	cbnz	r0, 1fedc <ble_hs_id_gen_rnd+0x24>
        return rc;
    }

    if (nrpa) {
   1fed0:	b935      	cbnz	r5, 1fee0 <ble_hs_id_gen_rnd+0x28>
        out_addr->val[5] &= ~0xc0;
    } else {
        out_addr->val[5] |= 0xc0;
   1fed2:	79a3      	ldrb	r3, [r4, #6]
   1fed4:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1fed8:	71a3      	strb	r3, [r4, #6]
    }

    return 0;
   1feda:	462b      	mov	r3, r5
}
   1fedc:	4618      	mov	r0, r3
   1fede:	bd38      	pop	{r3, r4, r5, pc}
        out_addr->val[5] &= ~0xc0;
   1fee0:	79a2      	ldrb	r2, [r4, #6]
   1fee2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   1fee6:	71a2      	strb	r2, [r4, #6]
   1fee8:	e7f8      	b.n	1fedc <ble_hs_id_gen_rnd+0x24>
	...

0001feec <ble_hs_id_set_rnd>:

int
ble_hs_id_set_rnd(const uint8_t *rnd_addr)
{
   1feec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1feee:	4605      	mov	r5, r0
    uint8_t addr_type_byte;
    int rc;
    int ones;

    ble_hs_lock();
   1fef0:	f7fe fb18 	bl	1e524 <ble_hs_lock>

    /* Make sure random part of rnd_addr is not all ones or zeros. Reference:
     * Core v5.0, Vol 6, Part B, section 1.3.2.1 */
    addr_type_byte = rnd_addr[5] & 0xc0;
   1fef4:	796f      	ldrb	r7, [r5, #5]
   1fef6:	f007 06c0 	and.w	r6, r7, #192	; 0xc0

    /* count bits set to 1 in random part of address */
    ones = __builtin_popcount(rnd_addr[0]);
   1fefa:	7828      	ldrb	r0, [r5, #0]
   1fefc:	f00a fd3e 	bl	2a97c <__popcountsi2>
   1ff00:	4604      	mov	r4, r0
    ones += __builtin_popcount(rnd_addr[1]);
   1ff02:	7868      	ldrb	r0, [r5, #1]
   1ff04:	f00a fd3a 	bl	2a97c <__popcountsi2>
   1ff08:	4404      	add	r4, r0
    ones += __builtin_popcount(rnd_addr[2]);
   1ff0a:	78a8      	ldrb	r0, [r5, #2]
   1ff0c:	f00a fd36 	bl	2a97c <__popcountsi2>
   1ff10:	4404      	add	r4, r0
    ones += __builtin_popcount(rnd_addr[3]);
   1ff12:	78e8      	ldrb	r0, [r5, #3]
   1ff14:	f00a fd32 	bl	2a97c <__popcountsi2>
   1ff18:	4404      	add	r4, r0
    ones += __builtin_popcount(rnd_addr[4]);
   1ff1a:	7928      	ldrb	r0, [r5, #4]
   1ff1c:	f00a fd2e 	bl	2a97c <__popcountsi2>
   1ff20:	4404      	add	r4, r0
    ones += __builtin_popcount(rnd_addr[5] & 0x3f);
   1ff22:	f007 003f 	and.w	r0, r7, #63	; 0x3f
   1ff26:	f00a fd29 	bl	2a97c <__popcountsi2>
   1ff2a:	4420      	add	r0, r4

    if ((addr_type_byte != 0x00 && addr_type_byte != 0xc0) ||
   1ff2c:	b10e      	cbz	r6, 1ff32 <ble_hs_id_set_rnd+0x46>
   1ff2e:	2ec0      	cmp	r6, #192	; 0xc0
   1ff30:	d10d      	bne.n	1ff4e <ble_hs_id_set_rnd+0x62>
   1ff32:	b170      	cbz	r0, 1ff52 <ble_hs_id_set_rnd+0x66>
            (ones == 0 || ones == 46)) {
   1ff34:	282e      	cmp	r0, #46	; 0x2e
   1ff36:	d011      	beq.n	1ff5c <ble_hs_id_set_rnd+0x70>
        rc = BLE_HS_EINVAL;
        goto done;
    }

    rc = ble_hs_hci_util_set_random_addr(rnd_addr);
   1ff38:	4628      	mov	r0, r5
   1ff3a:	f7ff ff80 	bl	1fe3e <ble_hs_hci_util_set_random_addr>
    if (rc != 0) {
   1ff3e:	4604      	mov	r4, r0
   1ff40:	b940      	cbnz	r0, 1ff54 <ble_hs_id_set_rnd+0x68>
        goto done;
    }

    memcpy(ble_hs_id_rnd, rnd_addr, 6);
   1ff42:	4b07      	ldr	r3, [pc, #28]	; (1ff60 <ble_hs_id_set_rnd+0x74>)
   1ff44:	6828      	ldr	r0, [r5, #0]
   1ff46:	6018      	str	r0, [r3, #0]
   1ff48:	88aa      	ldrh	r2, [r5, #4]
   1ff4a:	809a      	strh	r2, [r3, #4]
   1ff4c:	e002      	b.n	1ff54 <ble_hs_id_set_rnd+0x68>
        rc = BLE_HS_EINVAL;
   1ff4e:	2403      	movs	r4, #3
   1ff50:	e000      	b.n	1ff54 <ble_hs_id_set_rnd+0x68>
   1ff52:	2403      	movs	r4, #3

done:
    ble_hs_unlock();
   1ff54:	f7fe faea 	bl	1e52c <ble_hs_unlock>
    return rc;
}
   1ff58:	4620      	mov	r0, r4
   1ff5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rc = BLE_HS_EINVAL;
   1ff5c:	2403      	movs	r4, #3
   1ff5e:	e7f9      	b.n	1ff54 <ble_hs_id_set_rnd+0x68>
   1ff60:	20002fa4 	.word	0x20002fa4

0001ff64 <ble_hs_id_addr>:
 *                              Other BLE host core code on error.
 */
int
ble_hs_id_addr(uint8_t id_addr_type, const uint8_t **out_id_addr,
               int *out_is_nrpa)
{
   1ff64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    const uint8_t *id_addr;
    int nrpa;

    BLE_HS_DBG_ASSERT(ble_hs_locked_by_cur_task());

    switch (id_addr_type) {
   1ff66:	b1b0      	cbz	r0, 1ff96 <ble_hs_id_addr+0x32>
   1ff68:	2801      	cmp	r0, #1
   1ff6a:	d117      	bne.n	1ff9c <ble_hs_id_addr+0x38>
        nrpa = 0;
        break;

    case BLE_ADDR_RANDOM:
        id_addr = ble_hs_id_rnd;
        nrpa = (ble_hs_id_rnd[5] & 0xc0) == 0;
   1ff6c:	4e0e      	ldr	r6, [pc, #56]	; (1ffa8 <ble_hs_id_addr+0x44>)
   1ff6e:	7973      	ldrb	r3, [r6, #5]
   1ff70:	f013 0fc0 	tst.w	r3, #192	; 0xc0
   1ff74:	bf0c      	ite	eq
   1ff76:	2701      	moveq	r7, #1
   1ff78:	2700      	movne	r7, #0
   1ff7a:	4614      	mov	r4, r2
   1ff7c:	460d      	mov	r5, r1

    default:
        return BLE_HS_EINVAL;
    }

    if (memcmp(id_addr, ble_hs_misc_null_addr, 6) == 0) {
   1ff7e:	2206      	movs	r2, #6
   1ff80:	490a      	ldr	r1, [pc, #40]	; (1ffac <ble_hs_id_addr+0x48>)
   1ff82:	4630      	mov	r0, r6
   1ff84:	f7ee fa50 	bl	e428 <memcmp>
   1ff88:	b150      	cbz	r0, 1ffa0 <ble_hs_id_addr+0x3c>
        return BLE_HS_ENOADDR;
    }

    if (out_id_addr != NULL) {
   1ff8a:	b105      	cbz	r5, 1ff8e <ble_hs_id_addr+0x2a>
        *out_id_addr = id_addr;
   1ff8c:	602e      	str	r6, [r5, #0]
    }
    if (out_is_nrpa != NULL) {
   1ff8e:	b14c      	cbz	r4, 1ffa4 <ble_hs_id_addr+0x40>
        *out_is_nrpa = nrpa;
   1ff90:	6027      	str	r7, [r4, #0]
    }

    return 0;
   1ff92:	2000      	movs	r0, #0
}
   1ff94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        nrpa = 0;
   1ff96:	2700      	movs	r7, #0
        id_addr = ble_hs_id_pub;
   1ff98:	4e05      	ldr	r6, [pc, #20]	; (1ffb0 <ble_hs_id_addr+0x4c>)
   1ff9a:	e7ee      	b.n	1ff7a <ble_hs_id_addr+0x16>
        return BLE_HS_EINVAL;
   1ff9c:	2003      	movs	r0, #3
   1ff9e:	e7f9      	b.n	1ff94 <ble_hs_id_addr+0x30>
        return BLE_HS_ENOADDR;
   1ffa0:	2015      	movs	r0, #21
   1ffa2:	e7f7      	b.n	1ff94 <ble_hs_id_addr+0x30>
    return 0;
   1ffa4:	2000      	movs	r0, #0
   1ffa6:	e7f5      	b.n	1ff94 <ble_hs_id_addr+0x30>
   1ffa8:	20002fa4 	.word	0x20002fa4
   1ffac:	20004654 	.word	0x20004654
   1ffb0:	20002f9c 	.word	0x20002f9c

0001ffb4 <ble_hs_id_addr_type_usable>:
    return rc;
}

static int
ble_hs_id_addr_type_usable(uint8_t own_addr_type)
{
   1ffb4:	b500      	push	{lr}
   1ffb6:	b083      	sub	sp, #12
    uint8_t id_addr_type;
    int nrpa;
    int rc;

    switch (own_addr_type) {
   1ffb8:	2803      	cmp	r0, #3
   1ffba:	d81a      	bhi.n	1fff2 <ble_hs_id_addr_type_usable+0x3e>
   1ffbc:	e8df f000 	tbb	[pc, r0]
   1ffc0:	0b0b0202 	.word	0x0b0b0202
    case BLE_OWN_ADDR_PUBLIC:
    case BLE_OWN_ADDR_RANDOM:
        rc = ble_hs_id_addr(own_addr_type, NULL, NULL);
   1ffc4:	2200      	movs	r2, #0
   1ffc6:	4611      	mov	r1, r2
   1ffc8:	f7ff ffcc 	bl	1ff64 <ble_hs_id_addr>
   1ffcc:	4603      	mov	r3, r0
    default:
        return BLE_HS_EINVAL;
    }

    return 0;
}
   1ffce:	4618      	mov	r0, r3
   1ffd0:	b003      	add	sp, #12
   1ffd2:	f85d fb04 	ldr.w	pc, [sp], #4
        id_addr_type = ble_hs_misc_own_addr_type_to_id(own_addr_type);
   1ffd6:	f000 f8cf 	bl	20178 <ble_hs_misc_own_addr_type_to_id>
        rc = ble_hs_id_addr(id_addr_type, NULL, &nrpa);
   1ffda:	aa01      	add	r2, sp, #4
   1ffdc:	2100      	movs	r1, #0
   1ffde:	f7ff ffc1 	bl	1ff64 <ble_hs_id_addr>
        if (rc != 0) {
   1ffe2:	4603      	mov	r3, r0
   1ffe4:	2800      	cmp	r0, #0
   1ffe6:	d1f2      	bne.n	1ffce <ble_hs_id_addr_type_usable+0x1a>
        if (nrpa) {
   1ffe8:	9b01      	ldr	r3, [sp, #4]
   1ffea:	2b00      	cmp	r3, #0
   1ffec:	d0ef      	beq.n	1ffce <ble_hs_id_addr_type_usable+0x1a>
            return BLE_HS_ENOADDR;
   1ffee:	2315      	movs	r3, #21
   1fff0:	e7ed      	b.n	1ffce <ble_hs_id_addr_type_usable+0x1a>
        return BLE_HS_EINVAL;
   1fff2:	2303      	movs	r3, #3
   1fff4:	e7eb      	b.n	1ffce <ble_hs_id_addr_type_usable+0x1a>

0001fff6 <ble_hs_id_use_addr>:

int
ble_hs_id_use_addr(uint8_t own_addr_type)
{
   1fff6:	b510      	push	{r4, lr}
   1fff8:	4604      	mov	r4, r0
    int rc;

    rc = ble_hs_id_addr_type_usable(own_addr_type);
   1fffa:	f7ff ffdb 	bl	1ffb4 <ble_hs_id_addr_type_usable>
    if (rc != 0) {
   1fffe:	4603      	mov	r3, r0
   20000:	b918      	cbnz	r0, 2000a <ble_hs_id_use_addr+0x14>
        return rc;
    }

    /* If privacy is being used, make sure RPA rotation is in effect. */
    if (own_addr_type == BLE_OWN_ADDR_RPA_PUBLIC_DEFAULT ||
   20002:	3c02      	subs	r4, #2
   20004:	b2e4      	uxtb	r4, r4
   20006:	2c01      	cmp	r4, #1
   20008:	d901      	bls.n	2000e <ble_hs_id_use_addr+0x18>
            return rc;
        }
    }

    return 0;
}
   2000a:	4618      	mov	r0, r3
   2000c:	bd10      	pop	{r4, pc}
        rc = ble_hs_pvcy_ensure_started();
   2000e:	f000 f93d 	bl	2028c <ble_hs_pvcy_ensure_started>
   20012:	4603      	mov	r3, r0
   20014:	e7f9      	b.n	2000a <ble_hs_id_use_addr+0x14>
	...

00020018 <ble_hs_id_reset>:
 * when the controller loses its random address (e.g., on a stack reset).
 */
void
ble_hs_id_reset(void)
{
    memset(ble_hs_id_pub, 0, sizeof ble_hs_id_pub);
   20018:	4a03      	ldr	r2, [pc, #12]	; (20028 <ble_hs_id_reset+0x10>)
   2001a:	2300      	movs	r3, #0
   2001c:	6013      	str	r3, [r2, #0]
   2001e:	8093      	strh	r3, [r2, #4]
    memset(ble_hs_id_rnd, 0, sizeof ble_hs_id_pub);
   20020:	4a02      	ldr	r2, [pc, #8]	; (2002c <ble_hs_id_reset+0x14>)
   20022:	6013      	str	r3, [r2, #0]
   20024:	8093      	strh	r3, [r2, #4]
}
   20026:	4770      	bx	lr
   20028:	20002f9c 	.word	0x20002f9c
   2002c:	20002fa4 	.word	0x20002fa4

00020030 <ble_hs_log_mbuf>:

struct log ble_hs_log;

void
ble_hs_log_mbuf(const struct os_mbuf *om)
{
   20030:	b530      	push	{r4, r5, lr}
   20032:	b083      	sub	sp, #12
   20034:	4605      	mov	r5, r0
    uint8_t u8;
    int i;

    for (i = 0; i < OS_MBUF_PKTLEN(om); i++) {
   20036:	2400      	movs	r4, #0
   20038:	e007      	b.n	2004a <ble_hs_log_mbuf+0x1a>
        os_mbuf_copydata(om, i, 1, &u8);
   2003a:	f10d 0307 	add.w	r3, sp, #7
   2003e:	2201      	movs	r2, #1
   20040:	4621      	mov	r1, r4
   20042:	4628      	mov	r0, r5
   20044:	f7ed fd88 	bl	db58 <os_mbuf_copydata>
    for (i = 0; i < OS_MBUF_PKTLEN(om); i++) {
   20048:	3401      	adds	r4, #1
   2004a:	8a2b      	ldrh	r3, [r5, #16]
   2004c:	42a3      	cmp	r3, r4
   2004e:	dcf4      	bgt.n	2003a <ble_hs_log_mbuf+0xa>
        BLE_HS_LOG(DEBUG, "0x%02x ", u8);
    }
}
   20050:	b003      	add	sp, #12
   20052:	bd30      	pop	{r4, r5, pc}

00020054 <ble_hs_log_flat_buf>:
{
    const uint8_t *u8ptr;
    int i;

    u8ptr = data;
    for (i = 0; i < len; i++) {
   20054:	2300      	movs	r3, #0
   20056:	e000      	b.n	2005a <ble_hs_log_flat_buf+0x6>
   20058:	3301      	adds	r3, #1
   2005a:	428b      	cmp	r3, r1
   2005c:	dbfc      	blt.n	20058 <ble_hs_log_flat_buf+0x4>
        BLE_HS_LOG(DEBUG, "0x%02x ", u8ptr[i]);
    }
}
   2005e:	4770      	bx	lr

00020060 <ble_hs_mbuf_gen_pkt>:
/**
 * Allocates an mbuf for use by the nimble host.
 */
static struct os_mbuf *
ble_hs_mbuf_gen_pkt(uint16_t leading_space)
{
   20060:	b510      	push	{r4, lr}
   20062:	4604      	mov	r4, r0
    struct os_mbuf *om;
    int rc;

    om = os_msys_get_pkthdr(0, 0);
   20064:	2100      	movs	r1, #0
   20066:	4608      	mov	r0, r1
   20068:	f7ed f82d 	bl	d0c6 <os_msys_get_pkthdr>
    if (om == NULL) {
   2006c:	4603      	mov	r3, r0
   2006e:	b130      	cbz	r0, 2007e <ble_hs_mbuf_gen_pkt+0x1e>
        return NULL;
    }

    if (om->om_omp->omp_databuf_len < leading_space) {
   20070:	6882      	ldr	r2, [r0, #8]
   20072:	8812      	ldrh	r2, [r2, #0]
   20074:	42a2      	cmp	r2, r4
   20076:	d304      	bcc.n	20082 <ble_hs_mbuf_gen_pkt+0x22>
        rc = os_mbuf_free_chain(om);
        BLE_HS_DBG_ASSERT_EVAL(rc == 0);
        return NULL;
    }

    om->om_data += leading_space;
   20078:	6800      	ldr	r0, [r0, #0]
   2007a:	4420      	add	r0, r4
   2007c:	6018      	str	r0, [r3, #0]

    return om;
}
   2007e:	4618      	mov	r0, r3
   20080:	bd10      	pop	{r4, pc}
        rc = os_mbuf_free_chain(om);
   20082:	f7ed fcc8 	bl	da16 <os_mbuf_free_chain>
        return NULL;
   20086:	2300      	movs	r3, #0
   20088:	e7f9      	b.n	2007e <ble_hs_mbuf_gen_pkt+0x1e>

0002008a <ble_hs_mbuf_acl_pkt>:
 * @return                  An empty mbuf on success; null on memory
 *                              exhaustion.
 */
struct os_mbuf *
ble_hs_mbuf_acl_pkt(void)
{
   2008a:	b508      	push	{r3, lr}
    return ble_hs_mbuf_gen_pkt(BLE_HCI_DATA_HDR_SZ);
   2008c:	2004      	movs	r0, #4
   2008e:	f7ff ffe7 	bl	20060 <ble_hs_mbuf_gen_pkt>
}
   20092:	bd08      	pop	{r3, pc}

00020094 <ble_hs_mbuf_l2cap_pkt>:
 * @return                  An empty mbuf on success; null on memory
 *                              exhaustion.
 */
struct os_mbuf *
ble_hs_mbuf_l2cap_pkt(void)
{
   20094:	b508      	push	{r3, lr}
    return ble_hs_mbuf_gen_pkt(BLE_HCI_DATA_HDR_SZ + BLE_L2CAP_HDR_SZ);
   20096:	2008      	movs	r0, #8
   20098:	f7ff ffe2 	bl	20060 <ble_hs_mbuf_gen_pkt>
}
   2009c:	bd08      	pop	{r3, pc}

0002009e <ble_hs_mbuf_att_pkt>:

struct os_mbuf *
ble_hs_mbuf_att_pkt(void)
{
   2009e:	b508      	push	{r3, lr}
    /* Prepare write request and response are the larget ATT commands which
     * contain attribute data.
     */
     return ble_hs_mbuf_gen_pkt(BLE_HCI_DATA_HDR_SZ +
   200a0:	200d      	movs	r0, #13
   200a2:	f7ff ffdd 	bl	20060 <ble_hs_mbuf_gen_pkt>
                                BLE_L2CAP_HDR_SZ +
                                BLE_ATT_PREP_WRITE_CMD_BASE_SZ);
}
   200a6:	bd08      	pop	{r3, pc}

000200a8 <ble_hs_mbuf_from_flat>:

struct os_mbuf *
ble_hs_mbuf_from_flat(const void *buf, uint16_t len)
{
   200a8:	b570      	push	{r4, r5, r6, lr}
   200aa:	4605      	mov	r5, r0
   200ac:	460e      	mov	r6, r1
    struct os_mbuf *om;
    int rc;

    om = ble_hs_mbuf_att_pkt();
   200ae:	f7ff fff6 	bl	2009e <ble_hs_mbuf_att_pkt>
    if (om == NULL) {
   200b2:	4604      	mov	r4, r0
   200b4:	b128      	cbz	r0, 200c2 <ble_hs_mbuf_from_flat+0x1a>
        return NULL;
    }

    rc = os_mbuf_copyinto(om, 0, buf, len);
   200b6:	4633      	mov	r3, r6
   200b8:	462a      	mov	r2, r5
   200ba:	2100      	movs	r1, #0
   200bc:	f7ed fecb 	bl	de56 <os_mbuf_copyinto>
    if (rc != 0) {
   200c0:	b908      	cbnz	r0, 200c6 <ble_hs_mbuf_from_flat+0x1e>
        os_mbuf_free_chain(om);
        return NULL;
    }

    return om;
}
   200c2:	4620      	mov	r0, r4
   200c4:	bd70      	pop	{r4, r5, r6, pc}
        os_mbuf_free_chain(om);
   200c6:	4620      	mov	r0, r4
   200c8:	f7ed fca5 	bl	da16 <os_mbuf_free_chain>
        return NULL;
   200cc:	2400      	movs	r4, #0
   200ce:	e7f8      	b.n	200c2 <ble_hs_mbuf_from_flat+0x1a>

000200d0 <ble_hs_mbuf_pullup_base>:
}

int
ble_hs_mbuf_pullup_base(struct os_mbuf **om, int base_len)
{
    if (OS_MBUF_PKTLEN(*om) < base_len) {
   200d0:	6803      	ldr	r3, [r0, #0]
   200d2:	8a1a      	ldrh	r2, [r3, #16]
   200d4:	428a      	cmp	r2, r1
   200d6:	db0b      	blt.n	200f0 <ble_hs_mbuf_pullup_base+0x20>
{
   200d8:	b510      	push	{r4, lr}
   200da:	4604      	mov	r4, r0
        return BLE_HS_EBADDATA;
    }

    *om = os_mbuf_pullup(*om, base_len);
   200dc:	b289      	uxth	r1, r1
   200de:	4618      	mov	r0, r3
   200e0:	f7ed ff50 	bl	df84 <os_mbuf_pullup>
   200e4:	6020      	str	r0, [r4, #0]
    if (*om == NULL) {
   200e6:	b108      	cbz	r0, 200ec <ble_hs_mbuf_pullup_base+0x1c>
        return BLE_HS_ENOMEM;
    }

    return 0;
   200e8:	2000      	movs	r0, #0
}
   200ea:	bd10      	pop	{r4, pc}
        return BLE_HS_ENOMEM;
   200ec:	2006      	movs	r0, #6
   200ee:	e7fc      	b.n	200ea <ble_hs_mbuf_pullup_base+0x1a>
        return BLE_HS_EBADDATA;
   200f0:	200a      	movs	r0, #10
}
   200f2:	4770      	bx	lr

000200f4 <ble_hs_misc_restore_one_irk>:
}

static int
ble_hs_misc_restore_one_irk(int obj_type, union ble_store_value *val,
                            void *cookie)
{
   200f4:	b508      	push	{r3, lr}
    int rc;

    BLE_HS_DBG_ASSERT(obj_type == BLE_STORE_OBJ_TYPE_PEER_SEC);

    sec = &val->sec;
    if (sec->irk_present) {
   200f6:	f891 3039 	ldrb.w	r3, [r1, #57]	; 0x39
   200fa:	f013 0f01 	tst.w	r3, #1
   200fe:	d101      	bne.n	20104 <ble_hs_misc_restore_one_irk+0x10>
            BLE_HS_LOG(ERROR, "failed to configure restored IRK\n");
        }
    }

    return 0;
}
   20100:	2000      	movs	r0, #0
   20102:	bd08      	pop	{r3, pc}
   20104:	4608      	mov	r0, r1
        rc = ble_hs_pvcy_add_entry(sec->peer_addr.val, sec->peer_addr.type,
   20106:	460a      	mov	r2, r1
   20108:	f812 1b29 	ldrb.w	r1, [r2], #41
   2010c:	3001      	adds	r0, #1
   2010e:	f000 f93d 	bl	2038c <ble_hs_pvcy_add_entry>
        if (rc != 0) {
   20112:	2800      	cmp	r0, #0
   20114:	d0f4      	beq.n	20100 <ble_hs_misc_restore_one_irk+0xc>
            BLE_HS_LOG(ERROR, "failed to configure restored IRK\n");
   20116:	4a03      	ldr	r2, [pc, #12]	; (20124 <ble_hs_misc_restore_one_irk+0x30>)
   20118:	2103      	movs	r1, #3
   2011a:	2004      	movs	r0, #4
   2011c:	f7ef fd28 	bl	fb70 <modlog_printf>
   20120:	e7ee      	b.n	20100 <ble_hs_misc_restore_one_irk+0xc>
   20122:	bf00      	nop
   20124:	0002b61c 	.word	0x0002b61c

00020128 <ble_hs_misc_conn_chan_find>:
{
   20128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2012a:	460f      	mov	r7, r1
   2012c:	4615      	mov	r5, r2
   2012e:	461c      	mov	r4, r3
    conn = ble_hs_conn_find(conn_handle);
   20130:	f7ff f888 	bl	1f244 <ble_hs_conn_find>
    if (conn == NULL) {
   20134:	4606      	mov	r6, r0
   20136:	b160      	cbz	r0, 20152 <ble_hs_misc_conn_chan_find+0x2a>
        chan = ble_hs_conn_chan_find_by_scid(conn, cid);
   20138:	4639      	mov	r1, r7
   2013a:	f7fe ffcd 	bl	1f0d8 <ble_hs_conn_chan_find_by_scid>
        if (chan == NULL) {
   2013e:	4603      	mov	r3, r0
   20140:	b128      	cbz	r0, 2014e <ble_hs_misc_conn_chan_find+0x26>
            rc = 0;
   20142:	2000      	movs	r0, #0
    if (out_conn != NULL) {
   20144:	b105      	cbz	r5, 20148 <ble_hs_misc_conn_chan_find+0x20>
        *out_conn = conn;
   20146:	602e      	str	r6, [r5, #0]
    if (out_chan != NULL) {
   20148:	b104      	cbz	r4, 2014c <ble_hs_misc_conn_chan_find+0x24>
        *out_chan = chan;
   2014a:	6023      	str	r3, [r4, #0]
}
   2014c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            rc = BLE_HS_ENOTCONN;
   2014e:	2007      	movs	r0, #7
   20150:	e7f8      	b.n	20144 <ble_hs_misc_conn_chan_find+0x1c>
        rc = BLE_HS_ENOTCONN;
   20152:	2007      	movs	r0, #7
        chan = NULL;
   20154:	2300      	movs	r3, #0
   20156:	e7f5      	b.n	20144 <ble_hs_misc_conn_chan_find+0x1c>

00020158 <ble_hs_misc_conn_chan_find_reqd>:
{
   20158:	b530      	push	{r4, r5, lr}
   2015a:	b083      	sub	sp, #12
   2015c:	4615      	mov	r5, r2
   2015e:	461c      	mov	r4, r3
    rc = ble_hs_misc_conn_chan_find(conn_handle, cid, &conn, &chan);
   20160:	ab01      	add	r3, sp, #4
   20162:	466a      	mov	r2, sp
   20164:	f7ff ffe0 	bl	20128 <ble_hs_misc_conn_chan_find>
    if (out_conn != NULL) {
   20168:	b10d      	cbz	r5, 2016e <ble_hs_misc_conn_chan_find_reqd+0x16>
        *out_conn = conn;
   2016a:	9b00      	ldr	r3, [sp, #0]
   2016c:	602b      	str	r3, [r5, #0]
    if (out_chan != NULL) {
   2016e:	b10c      	cbz	r4, 20174 <ble_hs_misc_conn_chan_find_reqd+0x1c>
        *out_chan = chan;
   20170:	9b01      	ldr	r3, [sp, #4]
   20172:	6023      	str	r3, [r4, #0]
}
   20174:	b003      	add	sp, #12
   20176:	bd30      	pop	{r4, r5, pc}

00020178 <ble_hs_misc_own_addr_type_to_id>:
    switch (own_addr_type) {
   20178:	2801      	cmp	r0, #1
   2017a:	d003      	beq.n	20184 <ble_hs_misc_own_addr_type_to_id+0xc>
   2017c:	2803      	cmp	r0, #3
   2017e:	d001      	beq.n	20184 <ble_hs_misc_own_addr_type_to_id+0xc>
         return BLE_ADDR_PUBLIC;
   20180:	2000      	movs	r0, #0
   20182:	4770      	bx	lr
         return BLE_ADDR_RANDOM;
   20184:	2001      	movs	r0, #1
}
   20186:	4770      	bx	lr

00020188 <ble_hs_misc_peer_addr_type_to_id>:
    switch (peer_addr_type) {
   20188:	2801      	cmp	r0, #1
   2018a:	d003      	beq.n	20194 <ble_hs_misc_peer_addr_type_to_id+0xc>
   2018c:	2803      	cmp	r0, #3
   2018e:	d001      	beq.n	20194 <ble_hs_misc_peer_addr_type_to_id+0xc>
            return BLE_ADDR_PUBLIC;
   20190:	2000      	movs	r0, #0
   20192:	4770      	bx	lr
            return BLE_ADDR_RANDOM;
   20194:	2001      	movs	r0, #1
}
   20196:	4770      	bx	lr

00020198 <ble_hs_misc_restore_irks>:

int
ble_hs_misc_restore_irks(void)
{
   20198:	b508      	push	{r3, lr}
    int rc;

    rc = ble_store_iterate(BLE_STORE_OBJ_TYPE_PEER_SEC,
   2019a:	2200      	movs	r2, #0
   2019c:	4902      	ldr	r1, [pc, #8]	; (201a8 <ble_hs_misc_restore_irks+0x10>)
   2019e:	2002      	movs	r0, #2
   201a0:	f003 f990 	bl	234c4 <ble_store_iterate>
                           ble_hs_misc_restore_one_irk,
                           NULL);
    return rc;
}
   201a4:	bd08      	pop	{r3, pc}
   201a6:	bf00      	nop
   201a8:	000200f5 	.word	0x000200f5

000201ac <ble_mqueue_init>:

#include "ble_hs_priv.h"

int
ble_mqueue_init(struct ble_mqueue *mq, ble_npl_event_fn *ev_fn, void *ev_arg)
{
   201ac:	4603      	mov	r3, r0
    STAILQ_INIT(&mq->head);
   201ae:	2000      	movs	r0, #0
   201b0:	6018      	str	r0, [r3, #0]
   201b2:	605b      	str	r3, [r3, #4]
    memset(ev, 0, sizeof(*ev));
   201b4:	6098      	str	r0, [r3, #8]
   201b6:	6158      	str	r0, [r3, #20]
    ev->ev.ev_queued = 0;
   201b8:	7218      	strb	r0, [r3, #8]
    ev->ev.ev_cb = (os_event_fn *)fn;
   201ba:	60d9      	str	r1, [r3, #12]
    ev->ev.ev_arg = arg;
   201bc:	611a      	str	r2, [r3, #16]

    ble_npl_event_init(&mq->ev, ev_fn, ev_arg);

    return (0);
}
   201be:	4770      	bx	lr

000201c0 <ble_mqueue_get>:

struct os_mbuf *
ble_mqueue_get(struct ble_mqueue *mq)
{
   201c0:	b538      	push	{r3, r4, r5, lr}
   201c2:	4605      	mov	r5, r0
    struct os_mbuf_pkthdr *mp;
    struct os_mbuf *om;
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
   201c4:	f7ed fb18 	bl	d7f8 <os_arch_save_sr>
    mp = STAILQ_FIRST(&mq->head);
   201c8:	682c      	ldr	r4, [r5, #0]
    if (mp) {
   201ca:	b114      	cbz	r4, 201d2 <ble_mqueue_get+0x12>
        STAILQ_REMOVE_HEAD(&mq->head, omp_next);
   201cc:	6863      	ldr	r3, [r4, #4]
   201ce:	602b      	str	r3, [r5, #0]
   201d0:	b12b      	cbz	r3, 201de <ble_mqueue_get+0x1e>
    }
    OS_EXIT_CRITICAL(sr);
   201d2:	f7ed fb17 	bl	d804 <os_arch_restore_sr>

    if (mp) {
   201d6:	b124      	cbz	r4, 201e2 <ble_mqueue_get+0x22>
        om = OS_MBUF_PKTHDR_TO_MBUF(mp);
   201d8:	f1a4 0010 	sub.w	r0, r4, #16
    } else {
        om = NULL;
    }

    return (om);
}
   201dc:	bd38      	pop	{r3, r4, r5, pc}
        STAILQ_REMOVE_HEAD(&mq->head, omp_next);
   201de:	606d      	str	r5, [r5, #4]
   201e0:	e7f7      	b.n	201d2 <ble_mqueue_get+0x12>
        om = NULL;
   201e2:	2000      	movs	r0, #0
    return (om);
   201e4:	e7fa      	b.n	201dc <ble_mqueue_get+0x1c>

000201e6 <ble_mqueue_put>:

int
ble_mqueue_put(struct ble_mqueue *mq, struct ble_npl_eventq *evq, struct os_mbuf *om)
{
   201e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    struct os_mbuf_pkthdr *mp;
    os_sr_t sr;
    int rc;

    /* Can only place the head of a chained mbuf on the queue. */
    if (!OS_MBUF_IS_PKTHDR(om)) {
   201e8:	7953      	ldrb	r3, [r2, #5]
   201ea:	2b07      	cmp	r3, #7
   201ec:	d916      	bls.n	2021c <ble_mqueue_put+0x36>
   201ee:	4614      	mov	r4, r2
   201f0:	460e      	mov	r6, r1
   201f2:	4605      	mov	r5, r0
        rc = OS_EINVAL;
        goto err;
    }

    mp = OS_MBUF_PKTHDR(om);
   201f4:	f102 0710 	add.w	r7, r2, #16

    OS_ENTER_CRITICAL(sr);
   201f8:	f7ed fafe 	bl	d7f8 <os_arch_save_sr>
    STAILQ_INSERT_TAIL(&mq->head, mp, omp_next);
   201fc:	2300      	movs	r3, #0
   201fe:	f844 3f14 	str.w	r3, [r4, #20]!
   20202:	686b      	ldr	r3, [r5, #4]
   20204:	601f      	str	r7, [r3, #0]
   20206:	606c      	str	r4, [r5, #4]
    OS_EXIT_CRITICAL(sr);
   20208:	f7ed fafc 	bl	d804 <os_arch_restore_sr>

    /* Only post an event to the queue if its specified */
    if (evq) {
   2020c:	b146      	cbz	r6, 20220 <ble_mqueue_put+0x3a>
    os_eventq_put(&evq->evq, &ev->ev);
   2020e:	f105 0108 	add.w	r1, r5, #8
   20212:	4630      	mov	r0, r6
   20214:	f7ec fd51 	bl	ccba <os_eventq_put>
        ble_npl_eventq_put(evq, &mq->ev);
    }

    return (0);
   20218:	2000      	movs	r0, #0
   2021a:	e000      	b.n	2021e <ble_mqueue_put+0x38>
err:
    return (rc);
   2021c:	2002      	movs	r0, #2
}
   2021e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return (0);
   20220:	2000      	movs	r0, #0
   20222:	e7fc      	b.n	2021e <ble_mqueue_put+0x38>

00020224 <ble_hs_pvcy_set_addr_timeout>:
static int
ble_hs_pvcy_set_addr_timeout(uint16_t timeout)
{
    struct ble_hci_le_set_rpa_tmo_cp cmd;

    if (timeout == 0 || timeout > 0xA1B8) {
   20224:	1e43      	subs	r3, r0, #1
   20226:	b29b      	uxth	r3, r3
   20228:	f24a 12b7 	movw	r2, #41399	; 0xa1b7
   2022c:	4293      	cmp	r3, r2
   2022e:	d80e      	bhi.n	2024e <ble_hs_pvcy_set_addr_timeout+0x2a>
{
   20230:	b500      	push	{lr}
   20232:	b085      	sub	sp, #20
        return BLE_ERR_INV_HCI_CMD_PARMS;
    }

    cmd.rpa_timeout = htole16(timeout);
   20234:	a904      	add	r1, sp, #16
   20236:	f821 0d04 	strh.w	r0, [r1, #-4]!

    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   2023a:	2300      	movs	r3, #0
   2023c:	9300      	str	r3, [sp, #0]
   2023e:	2202      	movs	r2, #2
   20240:	f242 002e 	movw	r0, #8238	; 0x202e
   20244:	f7ff fa1a 	bl	1f67c <ble_hs_hci_cmd_tx>
                                        BLE_HCI_OCF_LE_SET_RPA_TMO),
                             &cmd, sizeof(cmd), NULL, 0);
}
   20248:	b005      	add	sp, #20
   2024a:	f85d fb04 	ldr.w	pc, [sp], #4
        return BLE_ERR_INV_HCI_CMD_PARMS;
   2024e:	2012      	movs	r0, #18
}
   20250:	4770      	bx	lr

00020252 <ble_hs_pvcy_clear_entries>:
                             &cmd, sizeof(cmd), NULL, 0);
}

static int
ble_hs_pvcy_clear_entries(void)
{
   20252:	b500      	push	{lr}
   20254:	b083      	sub	sp, #12
    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   20256:	2100      	movs	r1, #0
   20258:	9100      	str	r1, [sp, #0]
   2025a:	460b      	mov	r3, r1
   2025c:	460a      	mov	r2, r1
   2025e:	f242 0029 	movw	r0, #8233	; 0x2029
   20262:	f7ff fa0b 	bl	1f67c <ble_hs_hci_cmd_tx>
                                        BLE_HCI_OCF_LE_CLR_RESOLV_LIST),
                             NULL, 0, NULL, 0);
}
   20266:	b003      	add	sp, #12
   20268:	f85d fb04 	ldr.w	pc, [sp], #4

0002026c <ble_hs_pvcy_set_resolve_enabled>:
{
   2026c:	b500      	push	{lr}
   2026e:	b085      	sub	sp, #20
    cmd.enable = enable;
   20270:	a904      	add	r1, sp, #16
   20272:	f801 0d04 	strb.w	r0, [r1, #-4]!
    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   20276:	2300      	movs	r3, #0
   20278:	9300      	str	r3, [sp, #0]
   2027a:	2201      	movs	r2, #1
   2027c:	f242 002d 	movw	r0, #8237	; 0x202d
   20280:	f7ff f9fc 	bl	1f67c <ble_hs_hci_cmd_tx>
}
   20284:	b005      	add	sp, #20
   20286:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0002028c <ble_hs_pvcy_ensure_started>:
    return rc;
}

int
ble_hs_pvcy_ensure_started(void)
{
   2028c:	b508      	push	{r3, lr}
    int rc;

    if (ble_hs_pvcy_started) {
   2028e:	4b08      	ldr	r3, [pc, #32]	; (202b0 <ble_hs_pvcy_ensure_started+0x24>)
   20290:	781b      	ldrb	r3, [r3, #0]
   20292:	b113      	cbz	r3, 2029a <ble_hs_pvcy_ensure_started+0xe>
        return 0;
   20294:	2300      	movs	r3, #0
    }

    ble_hs_pvcy_started = 1;

    return 0;
}
   20296:	4618      	mov	r0, r3
   20298:	bd08      	pop	{r3, pc}
    rc = ble_hs_pvcy_set_addr_timeout(MYNEWT_VAL(BLE_RPA_TIMEOUT));
   2029a:	f44f 7096 	mov.w	r0, #300	; 0x12c
   2029e:	f7ff ffc1 	bl	20224 <ble_hs_pvcy_set_addr_timeout>
    if (rc != 0) {
   202a2:	4603      	mov	r3, r0
   202a4:	2800      	cmp	r0, #0
   202a6:	d1f6      	bne.n	20296 <ble_hs_pvcy_ensure_started+0xa>
    ble_hs_pvcy_started = 1;
   202a8:	4a01      	ldr	r2, [pc, #4]	; (202b0 <ble_hs_pvcy_ensure_started+0x24>)
   202aa:	2101      	movs	r1, #1
   202ac:	7011      	strb	r1, [r2, #0]
    return 0;
   202ae:	e7f2      	b.n	20296 <ble_hs_pvcy_ensure_started+0xa>
   202b0:	20002fbc 	.word	0x20002fbc

000202b4 <ble_hs_pvcy_our_irk>:
int
ble_hs_pvcy_our_irk(const uint8_t **out_irk)
{
    /* XXX: Return error if privacy not supported. */

    *out_irk = ble_hs_pvcy_irk;
   202b4:	4b01      	ldr	r3, [pc, #4]	; (202bc <ble_hs_pvcy_our_irk+0x8>)
   202b6:	6003      	str	r3, [r0, #0]
    return 0;
}
   202b8:	2000      	movs	r0, #0
   202ba:	4770      	bx	lr
   202bc:	20002fac 	.word	0x20002fac

000202c0 <ble_hs_pvcy_set_mode>:
int
ble_hs_pvcy_set_mode(const ble_addr_t *addr, uint8_t priv_mode)
{
    struct ble_hci_le_set_privacy_mode_cp cmd;

    if (addr->type > BLE_ADDR_RANDOM) {
   202c0:	7803      	ldrb	r3, [r0, #0]
   202c2:	2b01      	cmp	r3, #1
   202c4:	d901      	bls.n	202ca <ble_hs_pvcy_set_mode+0xa>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   202c6:	2012      	movs	r0, #18
    memcpy(cmd.peer_id_addr, addr->val, BLE_DEV_ADDR_LEN);

    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
                                        BLE_HCI_OCF_LE_SET_PRIVACY_MODE),
                             &cmd, sizeof(cmd), NULL, 0);
}
   202c8:	4770      	bx	lr
{
   202ca:	b500      	push	{lr}
   202cc:	b085      	sub	sp, #20
    cmd.mode = priv_mode;
   202ce:	f88d 100f 	strb.w	r1, [sp, #15]
    cmd.peer_id_addr_type = addr->type;
   202d2:	7803      	ldrb	r3, [r0, #0]
   202d4:	f88d 3008 	strb.w	r3, [sp, #8]
    memcpy(cmd.peer_id_addr, addr->val, BLE_DEV_ADDR_LEN);
   202d8:	f850 3f01 	ldr.w	r3, [r0, #1]!
   202dc:	f8cd 3009 	str.w	r3, [sp, #9]
   202e0:	8883      	ldrh	r3, [r0, #4]
   202e2:	f8ad 300d 	strh.w	r3, [sp, #13]
    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   202e6:	2300      	movs	r3, #0
   202e8:	9300      	str	r3, [sp, #0]
   202ea:	2208      	movs	r2, #8
   202ec:	eb0d 0102 	add.w	r1, sp, r2
   202f0:	f242 004e 	movw	r0, #8270	; 0x204e
   202f4:	f7ff f9c2 	bl	1f67c <ble_hs_hci_cmd_tx>
}
   202f8:	b005      	add	sp, #20
   202fa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00020300 <ble_hs_pvcy_add_entry_hci>:
    if (addr_type > BLE_ADDR_RANDOM) {
   20300:	2901      	cmp	r1, #1
   20302:	d902      	bls.n	2030a <ble_hs_pvcy_add_entry_hci+0xa>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   20304:	2312      	movs	r3, #18
}
   20306:	4618      	mov	r0, r3
   20308:	4770      	bx	lr
{
   2030a:	b5f0      	push	{r4, r5, r6, r7, lr}
   2030c:	b08f      	sub	sp, #60	; 0x3c
   2030e:	4614      	mov	r4, r2
   20310:	460e      	mov	r6, r1
   20312:	4607      	mov	r7, r0
    cmd.peer_addr_type = addr_type;
   20314:	f88d 1010 	strb.w	r1, [sp, #16]
    memcpy(cmd.peer_id_addr, addr, 6);
   20318:	6803      	ldr	r3, [r0, #0]
   2031a:	f8cd 3011 	str.w	r3, [sp, #17]
   2031e:	8883      	ldrh	r3, [r0, #4]
   20320:	f8ad 3015 	strh.w	r3, [sp, #21]
    memcpy(cmd.local_irk, ble_hs_pvcy_irk, 16);
   20324:	4d18      	ldr	r5, [pc, #96]	; (20388 <ble_hs_pvcy_add_entry_hci+0x88>)
   20326:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   20328:	f8cd 0027 	str.w	r0, [sp, #39]	; 0x27
   2032c:	f8cd 102b 	str.w	r1, [sp, #43]	; 0x2b
   20330:	f8cd 202f 	str.w	r2, [sp, #47]	; 0x2f
   20334:	f8cd 3033 	str.w	r3, [sp, #51]	; 0x33
    memcpy(cmd.peer_irk, irk, 16);
   20338:	6820      	ldr	r0, [r4, #0]
   2033a:	6861      	ldr	r1, [r4, #4]
   2033c:	68a2      	ldr	r2, [r4, #8]
   2033e:	68e3      	ldr	r3, [r4, #12]
   20340:	f8cd 0017 	str.w	r0, [sp, #23]
   20344:	f8cd 101b 	str.w	r1, [sp, #27]
   20348:	f8cd 201f 	str.w	r2, [sp, #31]
   2034c:	f8cd 3023 	str.w	r3, [sp, #35]	; 0x23
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   20350:	2300      	movs	r3, #0
   20352:	9300      	str	r3, [sp, #0]
   20354:	2227      	movs	r2, #39	; 0x27
   20356:	a904      	add	r1, sp, #16
   20358:	f242 0027 	movw	r0, #8231	; 0x2027
   2035c:	f7ff f98e 	bl	1f67c <ble_hs_hci_cmd_tx>
    if (rc != 0) {
   20360:	4603      	mov	r3, r0
   20362:	b110      	cbz	r0, 2036a <ble_hs_pvcy_add_entry_hci+0x6a>
}
   20364:	4618      	mov	r0, r3
   20366:	b00f      	add	sp, #60	; 0x3c
   20368:	bdf0      	pop	{r4, r5, r6, r7, pc}
    peer_addr.type = addr_type;
   2036a:	f88d 6008 	strb.w	r6, [sp, #8]
    memcpy(peer_addr.val, addr, sizeof peer_addr.val);
   2036e:	683b      	ldr	r3, [r7, #0]
   20370:	f8cd 3009 	str.w	r3, [sp, #9]
   20374:	88bb      	ldrh	r3, [r7, #4]
   20376:	f8ad 300d 	strh.w	r3, [sp, #13]
    rc = ble_hs_pvcy_set_mode(&peer_addr, BLE_GAP_PRIVATE_MODE_DEVICE);
   2037a:	2101      	movs	r1, #1
   2037c:	a802      	add	r0, sp, #8
   2037e:	f7ff ff9f 	bl	202c0 <ble_hs_pvcy_set_mode>
   20382:	4603      	mov	r3, r0
   20384:	e7ee      	b.n	20364 <ble_hs_pvcy_add_entry_hci+0x64>
   20386:	bf00      	nop
   20388:	20002fac 	.word	0x20002fac

0002038c <ble_hs_pvcy_add_entry>:
{
   2038c:	b570      	push	{r4, r5, r6, lr}
   2038e:	4604      	mov	r4, r0
   20390:	460d      	mov	r5, r1
   20392:	4616      	mov	r6, r2
    STATS_INC(ble_hs_stats, pvcy_add_entry);
   20394:	4a0a      	ldr	r2, [pc, #40]	; (203c0 <ble_hs_pvcy_add_entry+0x34>)
   20396:	6b13      	ldr	r3, [r2, #48]	; 0x30
   20398:	3301      	adds	r3, #1
   2039a:	6313      	str	r3, [r2, #48]	; 0x30
    ble_gap_preempt();
   2039c:	f7fb fac8 	bl	1b930 <ble_gap_preempt>
    rc = ble_hs_pvcy_add_entry_hci(addr, addr_type, irk);
   203a0:	4632      	mov	r2, r6
   203a2:	4629      	mov	r1, r5
   203a4:	4620      	mov	r0, r4
   203a6:	f7ff ffab 	bl	20300 <ble_hs_pvcy_add_entry_hci>
   203aa:	4604      	mov	r4, r0
    ble_gap_preempt_done();
   203ac:	f7fb facc 	bl	1b948 <ble_gap_preempt_done>
    if (rc != 0) {
   203b0:	b11c      	cbz	r4, 203ba <ble_hs_pvcy_add_entry+0x2e>
        STATS_INC(ble_hs_stats, pvcy_add_entry_fail);
   203b2:	4a03      	ldr	r2, [pc, #12]	; (203c0 <ble_hs_pvcy_add_entry+0x34>)
   203b4:	6b53      	ldr	r3, [r2, #52]	; 0x34
   203b6:	3301      	adds	r3, #1
   203b8:	6353      	str	r3, [r2, #52]	; 0x34
}
   203ba:	4620      	mov	r0, r4
   203bc:	bd70      	pop	{r4, r5, r6, pc}
   203be:	bf00      	nop
   203c0:	200045f4 	.word	0x200045f4

000203c4 <ble_hs_pvcy_set_our_irk>:
{
   203c4:	b510      	push	{r4, lr}
   203c6:	b086      	sub	sp, #24
    if (irk != NULL) {
   203c8:	b180      	cbz	r0, 203ec <ble_hs_pvcy_set_our_irk+0x28>
   203ca:	4603      	mov	r3, r0
        memcpy(new_irk, irk, 16);
   203cc:	466c      	mov	r4, sp
   203ce:	6800      	ldr	r0, [r0, #0]
   203d0:	6859      	ldr	r1, [r3, #4]
   203d2:	689a      	ldr	r2, [r3, #8]
   203d4:	68db      	ldr	r3, [r3, #12]
   203d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    if (memcmp(ble_hs_pvcy_irk, new_irk, 16) != 0) {
   203d8:	2210      	movs	r2, #16
   203da:	4669      	mov	r1, sp
   203dc:	4818      	ldr	r0, [pc, #96]	; (20440 <ble_hs_pvcy_set_our_irk+0x7c>)
   203de:	f7ee f823 	bl	e428 <memcmp>
   203e2:	4603      	mov	r3, r0
   203e4:	b940      	cbnz	r0, 203f8 <ble_hs_pvcy_set_our_irk+0x34>
}
   203e6:	4618      	mov	r0, r3
   203e8:	b006      	add	sp, #24
   203ea:	bd10      	pop	{r4, pc}
        memcpy(new_irk, ble_hs_pvcy_default_irk, 16);
   203ec:	4b15      	ldr	r3, [pc, #84]	; (20444 <ble_hs_pvcy_set_our_irk+0x80>)
   203ee:	466c      	mov	r4, sp
   203f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   203f2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   203f6:	e7ef      	b.n	203d8 <ble_hs_pvcy_set_our_irk+0x14>
        memcpy(ble_hs_pvcy_irk, new_irk, 16);
   203f8:	4c11      	ldr	r4, [pc, #68]	; (20440 <ble_hs_pvcy_set_our_irk+0x7c>)
   203fa:	466b      	mov	r3, sp
   203fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   203fe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        rc = ble_hs_pvcy_set_resolve_enabled(0);
   20402:	2000      	movs	r0, #0
   20404:	f7ff ff32 	bl	2026c <ble_hs_pvcy_set_resolve_enabled>
        if (rc != 0) {
   20408:	4603      	mov	r3, r0
   2040a:	2800      	cmp	r0, #0
   2040c:	d1eb      	bne.n	203e6 <ble_hs_pvcy_set_our_irk+0x22>
        rc = ble_hs_pvcy_clear_entries();
   2040e:	f7ff ff20 	bl	20252 <ble_hs_pvcy_clear_entries>
        if (rc != 0) {
   20412:	4603      	mov	r3, r0
   20414:	2800      	cmp	r0, #0
   20416:	d1e6      	bne.n	203e6 <ble_hs_pvcy_set_our_irk+0x22>
        rc = ble_hs_pvcy_set_resolve_enabled(1);
   20418:	2001      	movs	r0, #1
   2041a:	f7ff ff27 	bl	2026c <ble_hs_pvcy_set_resolve_enabled>
        if (rc != 0) {
   2041e:	4603      	mov	r3, r0
   20420:	2800      	cmp	r0, #0
   20422:	d1e0      	bne.n	203e6 <ble_hs_pvcy_set_our_irk+0x22>
        memset(tmp_addr, 0, 6);
   20424:	2100      	movs	r1, #0
   20426:	9104      	str	r1, [sp, #16]
   20428:	f8ad 1014 	strh.w	r1, [sp, #20]
        memset(new_irk, 0, 16);
   2042c:	9100      	str	r1, [sp, #0]
   2042e:	9101      	str	r1, [sp, #4]
   20430:	9102      	str	r1, [sp, #8]
   20432:	9103      	str	r1, [sp, #12]
        rc = ble_hs_pvcy_add_entry(tmp_addr, 0, new_irk);
   20434:	466a      	mov	r2, sp
   20436:	a804      	add	r0, sp, #16
   20438:	f7ff ffa8 	bl	2038c <ble_hs_pvcy_add_entry>
   2043c:	4603      	mov	r3, r0
   2043e:	e7d2      	b.n	203e6 <ble_hs_pvcy_set_our_irk+0x22>
   20440:	20002fac 	.word	0x20002fac
   20444:	0002b640 	.word	0x0002b640

00020448 <ble_hs_startup_reset_tx>:
    return 0;
}

static int
ble_hs_startup_reset_tx(void)
{
   20448:	b500      	push	{lr}
   2044a:	b083      	sub	sp, #12
    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_CTLR_BASEBAND,
   2044c:	2100      	movs	r1, #0
   2044e:	9100      	str	r1, [sp, #0]
   20450:	460b      	mov	r3, r1
   20452:	460a      	mov	r2, r1
   20454:	f640 4003 	movw	r0, #3075	; 0xc03
   20458:	f7ff f910 	bl	1f67c <ble_hs_hci_cmd_tx>
                                        BLE_HCI_OCF_CB_RESET),
                             NULL, 0, NULL, 0);
}
   2045c:	b003      	add	sp, #12
   2045e:	f85d fb04 	ldr.w	pc, [sp], #4

00020462 <ble_hs_startup_le_read_buf_sz_tx>:
{
   20462:	b530      	push	{r4, r5, lr}
   20464:	b085      	sub	sp, #20
   20466:	4605      	mov	r5, r0
   20468:	460c      	mov	r4, r1
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   2046a:	2303      	movs	r3, #3
   2046c:	9300      	str	r3, [sp, #0]
   2046e:	ab03      	add	r3, sp, #12
   20470:	2200      	movs	r2, #0
   20472:	4611      	mov	r1, r2
   20474:	f242 0002 	movw	r0, #8194	; 0x2002
   20478:	f7ff f900 	bl	1f67c <ble_hs_hci_cmd_tx>
    if (rc != 0) {
   2047c:	4603      	mov	r3, r0
   2047e:	b928      	cbnz	r0, 2048c <ble_hs_startup_le_read_buf_sz_tx+0x2a>
    *out_pktlen = le16toh(rsp.data_len);
   20480:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   20484:	802a      	strh	r2, [r5, #0]
    *out_max_pkts = rsp.data_packets;
   20486:	f89d 200e 	ldrb.w	r2, [sp, #14]
   2048a:	7022      	strb	r2, [r4, #0]
}
   2048c:	4618      	mov	r0, r3
   2048e:	b005      	add	sp, #20
   20490:	bd30      	pop	{r4, r5, pc}

00020492 <ble_hs_startup_read_buf_sz_tx>:
{
   20492:	b530      	push	{r4, r5, lr}
   20494:	b085      	sub	sp, #20
   20496:	4605      	mov	r5, r0
   20498:	460c      	mov	r4, r1
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_INFO_PARAMS,
   2049a:	2307      	movs	r3, #7
   2049c:	9300      	str	r3, [sp, #0]
   2049e:	ab02      	add	r3, sp, #8
   204a0:	2200      	movs	r2, #0
   204a2:	4611      	mov	r1, r2
   204a4:	f241 0005 	movw	r0, #4101	; 0x1005
   204a8:	f7ff f8e8 	bl	1f67c <ble_hs_hci_cmd_tx>
    if (rc != 0) {
   204ac:	4603      	mov	r3, r0
   204ae:	b928      	cbnz	r0, 204bc <ble_hs_startup_read_buf_sz_tx+0x2a>
    *out_pktlen = le16toh(rsp.acl_data_len);
   204b0:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   204b4:	802a      	strh	r2, [r5, #0]
    *out_max_pkts = le16toh(rsp.acl_num);
   204b6:	f8bd 200b 	ldrh.w	r2, [sp, #11]
   204ba:	8022      	strh	r2, [r4, #0]
}
   204bc:	4618      	mov	r0, r3
   204be:	b005      	add	sp, #20
   204c0:	bd30      	pop	{r4, r5, pc}

000204c2 <ble_hs_startup_read_local_ver_tx>:
{
   204c2:	b510      	push	{r4, lr}
   204c4:	b084      	sub	sp, #16
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_INFO_PARAMS,
   204c6:	2308      	movs	r3, #8
   204c8:	9300      	str	r3, [sp, #0]
   204ca:	446b      	add	r3, sp
   204cc:	2200      	movs	r2, #0
   204ce:	4611      	mov	r1, r2
   204d0:	f241 0001 	movw	r0, #4097	; 0x1001
   204d4:	f7ff f8d2 	bl	1f67c <ble_hs_hci_cmd_tx>
    if (rc != 0) {
   204d8:	4604      	mov	r4, r0
   204da:	b110      	cbz	r0, 204e2 <ble_hs_startup_read_local_ver_tx+0x20>
}
   204dc:	4620      	mov	r0, r4
   204de:	b004      	add	sp, #16
   204e0:	bd10      	pop	{r4, pc}
    ble_hs_hci_set_hci_version(rsp.hci_ver);
   204e2:	f89d 0008 	ldrb.w	r0, [sp, #8]
   204e6:	f7ff f989 	bl	1f7fc <ble_hs_hci_set_hci_version>
    return 0;
   204ea:	e7f7      	b.n	204dc <ble_hs_startup_read_local_ver_tx+0x1a>
   204ec:	0000      	movs	r0, r0
	...

000204f0 <ble_hs_startup_set_evmask_tx>:
{
   204f0:	b510      	push	{r4, lr}
   204f2:	b086      	sub	sp, #24
    version = ble_hs_hci_get_hci_version();
   204f4:	f7ff f988 	bl	1f808 <ble_hs_hci_get_hci_version>
   204f8:	4604      	mov	r4, r0
    cmd.event_mask = htole64(0x2000800002008090);
   204fa:	a906      	add	r1, sp, #24
   204fc:	a310      	add	r3, pc, #64	; (adr r3, 20540 <ble_hs_startup_set_evmask_tx+0x50>)
   204fe:	e9d3 2300 	ldrd	r2, r3, [r3]
   20502:	e961 2302 	strd	r2, r3, [r1, #-8]!
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_CTLR_BASEBAND,
   20506:	2300      	movs	r3, #0
   20508:	9300      	str	r3, [sp, #0]
   2050a:	2208      	movs	r2, #8
   2050c:	f640 4001 	movw	r0, #3073	; 0xc01
   20510:	f7ff f8b4 	bl	1f67c <ble_hs_hci_cmd_tx>
    if (rc != 0) {
   20514:	4603      	mov	r3, r0
   20516:	b908      	cbnz	r0, 2051c <ble_hs_startup_set_evmask_tx+0x2c>
    if (version >= BLE_HCI_VER_BCS_4_1) {
   20518:	2c06      	cmp	r4, #6
   2051a:	d802      	bhi.n	20522 <ble_hs_startup_set_evmask_tx+0x32>
}
   2051c:	4618      	mov	r0, r3
   2051e:	b006      	add	sp, #24
   20520:	bd10      	pop	{r4, pc}
        cmd2.event_mask2 = htole64(0x0000000000800000);
   20522:	a906      	add	r1, sp, #24
   20524:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   20528:	2300      	movs	r3, #0
   2052a:	e961 2304 	strd	r2, r3, [r1, #-16]!
        rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_CTLR_BASEBAND,
   2052e:	2300      	movs	r3, #0
   20530:	9300      	str	r3, [sp, #0]
   20532:	2208      	movs	r2, #8
   20534:	f640 4063 	movw	r0, #3171	; 0xc63
   20538:	f7ff f8a0 	bl	1f67c <ble_hs_hci_cmd_tx>
   2053c:	4603      	mov	r3, r0
   2053e:	e7ed      	b.n	2051c <ble_hs_startup_set_evmask_tx+0x2c>
   20540:	02008090 	.word	0x02008090
   20544:	20008000 	.word	0x20008000

00020548 <ble_hs_startup_le_set_evmask_tx>:
{
   20548:	b500      	push	{lr}
   2054a:	b085      	sub	sp, #20
    version = ble_hs_hci_get_hci_version();
   2054c:	f7ff f95c 	bl	1f808 <ble_hs_hci_get_hci_version>
    if (version >= BLE_HCI_VER_BCS_4_1) {
   20550:	2806      	cmp	r0, #6
   20552:	d818      	bhi.n	20586 <ble_hs_startup_le_set_evmask_tx+0x3e>
    mask = 0x000000000000001f;
   20554:	221f      	movs	r2, #31
   20556:	2300      	movs	r3, #0
    if (version >= BLE_HCI_VER_BCS_4_2) {
   20558:	2807      	cmp	r0, #7
   2055a:	d901      	bls.n	20560 <ble_hs_startup_le_set_evmask_tx+0x18>
        mask |= 0x0000000000000640;
   2055c:	f442 62c8 	orr.w	r2, r2, #1600	; 0x640
    if (version >= BLE_HCI_VER_BCS_5_0) {
   20560:	2808      	cmp	r0, #8
   20562:	d903      	bls.n	2056c <ble_hs_startup_le_set_evmask_tx+0x24>
        mask |= 0x00000000000ff800;
   20564:	4809      	ldr	r0, [pc, #36]	; (2058c <ble_hs_startup_le_set_evmask_tx+0x44>)
   20566:	2100      	movs	r1, #0
   20568:	4302      	orrs	r2, r0
   2056a:	430b      	orrs	r3, r1
    cmd.event_mask = htole64(mask);
   2056c:	a904      	add	r1, sp, #16
   2056e:	e961 2302 	strd	r2, r3, [r1, #-8]!
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   20572:	2300      	movs	r3, #0
   20574:	9300      	str	r3, [sp, #0]
   20576:	2208      	movs	r2, #8
   20578:	f242 0001 	movw	r0, #8193	; 0x2001
   2057c:	f7ff f87e 	bl	1f67c <ble_hs_hci_cmd_tx>
}
   20580:	b005      	add	sp, #20
   20582:	f85d fb04 	ldr.w	pc, [sp], #4
        mask |= 0x0000000000000020;
   20586:	223f      	movs	r2, #63	; 0x3f
   20588:	2300      	movs	r3, #0
   2058a:	e7e5      	b.n	20558 <ble_hs_startup_le_set_evmask_tx+0x10>
   2058c:	000ff800 	.word	0x000ff800

00020590 <ble_hs_startup_read_buf_sz>:
{
   20590:	b500      	push	{lr}
   20592:	b083      	sub	sp, #12
    uint16_t le_pktlen = 0;
   20594:	2300      	movs	r3, #0
   20596:	f8ad 3006 	strh.w	r3, [sp, #6]
    uint16_t max_pkts = 0;
   2059a:	f8ad 3004 	strh.w	r3, [sp, #4]
    uint16_t pktlen = 0;
   2059e:	f8ad 3002 	strh.w	r3, [sp, #2]
    uint8_t le_max_pkts = 0;
   205a2:	a902      	add	r1, sp, #8
   205a4:	f801 3d07 	strb.w	r3, [r1, #-7]!
    rc = ble_hs_startup_le_read_buf_sz_tx(&le_pktlen, &le_max_pkts);
   205a8:	f10d 0006 	add.w	r0, sp, #6
   205ac:	f7ff ff59 	bl	20462 <ble_hs_startup_le_read_buf_sz_tx>
    if (rc != 0) {
   205b0:	4603      	mov	r3, r0
   205b2:	b978      	cbnz	r0, 205d4 <ble_hs_startup_read_buf_sz+0x44>
    if (le_pktlen != 0) {
   205b4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   205b8:	b183      	cbz	r3, 205dc <ble_hs_startup_read_buf_sz+0x4c>
        pktlen = le_pktlen;
   205ba:	f8ad 3002 	strh.w	r3, [sp, #2]
        max_pkts = le_max_pkts;
   205be:	f89d 3001 	ldrb.w	r3, [sp, #1]
   205c2:	f8ad 3004 	strh.w	r3, [sp, #4]
    rc = ble_hs_hci_set_buf_sz(pktlen, max_pkts);
   205c6:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   205ca:	f8bd 0002 	ldrh.w	r0, [sp, #2]
   205ce:	f7ff f833 	bl	1f638 <ble_hs_hci_set_buf_sz>
   205d2:	4603      	mov	r3, r0
}
   205d4:	4618      	mov	r0, r3
   205d6:	b003      	add	sp, #12
   205d8:	f85d fb04 	ldr.w	pc, [sp], #4
        rc = ble_hs_startup_read_buf_sz_tx(&pktlen, &max_pkts);
   205dc:	a901      	add	r1, sp, #4
   205de:	f10d 0002 	add.w	r0, sp, #2
   205e2:	f7ff ff56 	bl	20492 <ble_hs_startup_read_buf_sz_tx>
        if (rc != 0) {
   205e6:	4603      	mov	r3, r0
   205e8:	2800      	cmp	r0, #0
   205ea:	d0ec      	beq.n	205c6 <ble_hs_startup_read_buf_sz+0x36>
   205ec:	e7f2      	b.n	205d4 <ble_hs_startup_read_buf_sz+0x44>

000205ee <ble_hs_startup_le_read_sup_f_tx>:
{
   205ee:	b510      	push	{r4, lr}
   205f0:	b084      	sub	sp, #16
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   205f2:	2308      	movs	r3, #8
   205f4:	9300      	str	r3, [sp, #0]
   205f6:	446b      	add	r3, sp
   205f8:	2200      	movs	r2, #0
   205fa:	4611      	mov	r1, r2
   205fc:	f242 0003 	movw	r0, #8195	; 0x2003
   20600:	f7ff f83c 	bl	1f67c <ble_hs_hci_cmd_tx>
    if (rc != 0) {
   20604:	4604      	mov	r4, r0
   20606:	b110      	cbz	r0, 2060e <ble_hs_startup_le_read_sup_f_tx+0x20>
}
   20608:	4620      	mov	r0, r4
   2060a:	b004      	add	sp, #16
   2060c:	bd10      	pop	{r4, pc}
    ble_hs_hci_set_le_supported_feat(le64toh(rsp.features));
   2060e:	9802      	ldr	r0, [sp, #8]
   20610:	f7ff f8ee 	bl	1f7f0 <ble_hs_hci_set_le_supported_feat>
    return 0;
   20614:	e7f8      	b.n	20608 <ble_hs_startup_le_read_sup_f_tx+0x1a>

00020616 <ble_hs_startup_read_bd_addr>:
{
   20616:	b510      	push	{r4, lr}
   20618:	b084      	sub	sp, #16
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_INFO_PARAMS,
   2061a:	2306      	movs	r3, #6
   2061c:	9300      	str	r3, [sp, #0]
   2061e:	ab02      	add	r3, sp, #8
   20620:	2200      	movs	r2, #0
   20622:	4611      	mov	r1, r2
   20624:	f241 0009 	movw	r0, #4105	; 0x1009
   20628:	f7ff f828 	bl	1f67c <ble_hs_hci_cmd_tx>
    if (rc != 0) {
   2062c:	4604      	mov	r4, r0
   2062e:	b110      	cbz	r0, 20636 <ble_hs_startup_read_bd_addr+0x20>
}
   20630:	4620      	mov	r0, r4
   20632:	b004      	add	sp, #16
   20634:	bd10      	pop	{r4, pc}
    ble_hs_id_set_pub(rsp.addr);
   20636:	a802      	add	r0, sp, #8
   20638:	f7ff fc30 	bl	1fe9c <ble_hs_id_set_pub>
    return 0;
   2063c:	e7f8      	b.n	20630 <ble_hs_startup_read_bd_addr+0x1a>

0002063e <ble_hs_startup_go>:

int
ble_hs_startup_go(void)
{
   2063e:	b510      	push	{r4, lr}
    int rc;

    rc = ble_hs_startup_reset_tx();
   20640:	f7ff ff02 	bl	20448 <ble_hs_startup_reset_tx>
    if (rc != 0) {
   20644:	4604      	mov	r4, r0
   20646:	b108      	cbz	r0, 2064c <ble_hs_startup_go+0xe>

    /* If flow control is enabled, configure the controller to use it. */
    ble_hs_flow_startup();

    return 0;
}
   20648:	4620      	mov	r0, r4
   2064a:	bd10      	pop	{r4, pc}
    rc = ble_hs_startup_read_local_ver_tx();
   2064c:	f7ff ff39 	bl	204c2 <ble_hs_startup_read_local_ver_tx>
    if (rc != 0) {
   20650:	4604      	mov	r4, r0
   20652:	2800      	cmp	r0, #0
   20654:	d1f8      	bne.n	20648 <ble_hs_startup_go+0xa>
    rc = ble_hs_startup_set_evmask_tx();
   20656:	f7ff ff4b 	bl	204f0 <ble_hs_startup_set_evmask_tx>
    if (rc != 0) {
   2065a:	4604      	mov	r4, r0
   2065c:	2800      	cmp	r0, #0
   2065e:	d1f3      	bne.n	20648 <ble_hs_startup_go+0xa>
    rc = ble_hs_startup_le_set_evmask_tx();
   20660:	f7ff ff72 	bl	20548 <ble_hs_startup_le_set_evmask_tx>
    if (rc != 0) {
   20664:	4604      	mov	r4, r0
   20666:	2800      	cmp	r0, #0
   20668:	d1ee      	bne.n	20648 <ble_hs_startup_go+0xa>
    rc = ble_hs_startup_read_buf_sz();
   2066a:	f7ff ff91 	bl	20590 <ble_hs_startup_read_buf_sz>
    if (rc != 0) {
   2066e:	4604      	mov	r4, r0
   20670:	2800      	cmp	r0, #0
   20672:	d1e9      	bne.n	20648 <ble_hs_startup_go+0xa>
    rc = ble_hs_startup_le_read_sup_f_tx();
   20674:	f7ff ffbb 	bl	205ee <ble_hs_startup_le_read_sup_f_tx>
    if (rc != 0) {
   20678:	4604      	mov	r4, r0
   2067a:	2800      	cmp	r0, #0
   2067c:	d1e4      	bne.n	20648 <ble_hs_startup_go+0xa>
    rc = ble_hs_startup_read_bd_addr();
   2067e:	f7ff ffca 	bl	20616 <ble_hs_startup_read_bd_addr>
    if (rc != 0) {
   20682:	4604      	mov	r4, r0
   20684:	2800      	cmp	r0, #0
   20686:	d1df      	bne.n	20648 <ble_hs_startup_go+0xa>
    ble_hs_pvcy_set_our_irk(NULL);
   20688:	f7ff fe9c 	bl	203c4 <ble_hs_pvcy_set_our_irk>
    ble_hs_flow_startup();
   2068c:	f7fe feda 	bl	1f444 <ble_hs_flow_startup>
    return 0;
   20690:	e7da      	b.n	20648 <ble_hs_startup_go+0xa>
	...

00020694 <ble_hs_stop_done>:
/**
 * Called when a stop procedure has completed.
 */
static void
ble_hs_stop_done(int status)
{
   20694:	b538      	push	{r3, r4, r5, lr}
   20696:	4605      	mov	r5, r0
    os_callout_stop(&co->co);
   20698:	480c      	ldr	r0, [pc, #48]	; (206cc <ble_hs_stop_done+0x38>)
   2069a:	f7ec f995 	bl	c9c8 <os_callout_stop>
    struct ble_hs_stop_listener_slist slist;
    struct ble_hs_stop_listener *listener;

    ble_npl_callout_stop(&ble_hs_stop_terminate_tmo);

    ble_hs_lock();
   2069e:	f7fd ff41 	bl	1e524 <ble_hs_lock>

    ble_gap_event_listener_unregister(&ble_hs_stop_gap_listener);
   206a2:	480b      	ldr	r0, [pc, #44]	; (206d0 <ble_hs_stop_done+0x3c>)
   206a4:	f7fb f9b2 	bl	1ba0c <ble_gap_event_listener_unregister>

    slist = ble_hs_stop_listeners;
   206a8:	4a0a      	ldr	r2, [pc, #40]	; (206d4 <ble_hs_stop_done+0x40>)
   206aa:	6814      	ldr	r4, [r2, #0]
    SLIST_INIT(&ble_hs_stop_listeners);
   206ac:	2300      	movs	r3, #0
   206ae:	6013      	str	r3, [r2, #0]

    ble_hs_enabled_state = BLE_HS_ENABLED_STATE_OFF;
   206b0:	4a09      	ldr	r2, [pc, #36]	; (206d8 <ble_hs_stop_done+0x44>)
   206b2:	7013      	strb	r3, [r2, #0]

    ble_hs_unlock();
   206b4:	f7fd ff3a 	bl	1e52c <ble_hs_unlock>

    SLIST_FOREACH(listener, &slist, link) {
   206b8:	e004      	b.n	206c4 <ble_hs_stop_done+0x30>
        listener->fn(status, listener->arg);
   206ba:	6823      	ldr	r3, [r4, #0]
   206bc:	6861      	ldr	r1, [r4, #4]
   206be:	4628      	mov	r0, r5
   206c0:	4798      	blx	r3
    SLIST_FOREACH(listener, &slist, link) {
   206c2:	68a4      	ldr	r4, [r4, #8]
   206c4:	2c00      	cmp	r4, #0
   206c6:	d1f8      	bne.n	206ba <ble_hs_stop_done+0x26>
    }
}
   206c8:	bd38      	pop	{r3, r4, r5, pc}
   206ca:	bf00      	nop
   206cc:	20002fd0 	.word	0x20002fd0
   206d0:	20002fc0 	.word	0x20002fc0
   206d4:	20002fcc 	.word	0x20002fcc
   206d8:	2000464e 	.word	0x2000464e

000206dc <ble_hs_stop_terminate_timeout_cb>:
 * This is called when host graceful disconnect timeout fires. That means some devices
 * are out of range and disconnection completed did no happen yet.
 */
static void
ble_hs_stop_terminate_timeout_cb(struct ble_npl_event *ev)
{
   206dc:	b508      	push	{r3, lr}
    BLE_HS_LOG(ERROR, "ble_hs_stop_terminate_timeout_cb,"
   206de:	4b05      	ldr	r3, [pc, #20]	; (206f4 <ble_hs_stop_terminate_timeout_cb+0x18>)
   206e0:	781b      	ldrb	r3, [r3, #0]
   206e2:	4a05      	ldr	r2, [pc, #20]	; (206f8 <ble_hs_stop_terminate_timeout_cb+0x1c>)
   206e4:	2103      	movs	r1, #3
   206e6:	2004      	movs	r0, #4
   206e8:	f7ef fa42 	bl	fb70 <modlog_printf>
                      "%d connection(s) still up \n", ble_hs_stop_conn_cnt);

    /* TODO: Shall we send error here? */
    ble_hs_stop_done(0);
   206ec:	2000      	movs	r0, #0
   206ee:	f7ff ffd1 	bl	20694 <ble_hs_stop_done>
}
   206f2:	bd08      	pop	{r3, pc}
   206f4:	20002fbd 	.word	0x20002fbd
   206f8:	0002b650 	.word	0x0002b650

000206fc <ble_hs_stop_init>:
    return 0;
}

void
ble_hs_stop_init(void)
{
   206fc:	b508      	push	{r3, lr}
    return (struct ble_npl_eventq *) os_eventq_dflt_get();
   206fe:	f7ec fb93 	bl	ce28 <os_eventq_dflt_get>
    os_callout_init(&co->co, &evq->evq, (os_event_fn *)ev_cb, ev_arg);
   20702:	2300      	movs	r3, #0
   20704:	4a02      	ldr	r2, [pc, #8]	; (20710 <ble_hs_stop_init+0x14>)
   20706:	4601      	mov	r1, r0
   20708:	4802      	ldr	r0, [pc, #8]	; (20714 <ble_hs_stop_init+0x18>)
   2070a:	f7ec f94f 	bl	c9ac <os_callout_init>
                         ble_hs_stop_terminate_timeout_cb, NULL);
#else
    ble_npl_callout_init(&ble_hs_stop_terminate_tmo, nimble_port_get_dflt_eventq(),
                         ble_hs_stop_terminate_timeout_cb, NULL);
#endif
}
   2070e:	bd08      	pop	{r3, pc}
   20710:	000206dd 	.word	0x000206dd
   20714:	20002fd0 	.word	0x20002fd0

00020718 <ble_l2cap_get_mtu>:
    return rc;
}

static uint16_t
ble_l2cap_get_mtu(struct ble_l2cap_chan *chan)
{
   20718:	b508      	push	{r3, lr}
    if (chan->scid == BLE_L2CAP_CID_ATT) {
   2071a:	8903      	ldrh	r3, [r0, #8]
   2071c:	2b04      	cmp	r3, #4
   2071e:	d001      	beq.n	20724 <ble_l2cap_get_mtu+0xc>
         * done
         */
        return ble_att_chan_mtu(chan);
    }

    return chan->my_mtu;
   20720:	8940      	ldrh	r0, [r0, #10]
}
   20722:	bd08      	pop	{r3, pc}
        return ble_att_chan_mtu(chan);
   20724:	f003 fa4f 	bl	23bc6 <ble_att_chan_mtu>
   20728:	e7fb      	b.n	20722 <ble_l2cap_get_mtu+0xa>

0002072a <ble_l2cap_append_rx>:
{
   2072a:	b508      	push	{r3, lr}
    m = os_mbuf_pack_chains(chan->rx_buf, frag);
   2072c:	6900      	ldr	r0, [r0, #16]
   2072e:	f7ed fce6 	bl	e0fe <os_mbuf_pack_chains>
    assert(m);
   20732:	b100      	cbz	r0, 20736 <ble_l2cap_append_rx+0xc>
}
   20734:	bd08      	pop	{r3, pc}
    assert(m);
   20736:	f7eb fd57 	bl	c1e8 <hal_debugger_connected>
   2073a:	b100      	cbz	r0, 2073e <ble_l2cap_append_rx+0x14>
   2073c:	be01      	bkpt	0x0001
   2073e:	2300      	movs	r3, #0
   20740:	461a      	mov	r2, r3
   20742:	4619      	mov	r1, r3
   20744:	4618      	mov	r0, r3
   20746:	f7eb ff89 	bl	c65c <__assert_func>
	...

0002074c <ble_l2cap_chan_alloc>:
{
   2074c:	b510      	push	{r4, lr}
   2074e:	4604      	mov	r4, r0
    chan = os_memblock_get(&ble_l2cap_chan_pool);
   20750:	4809      	ldr	r0, [pc, #36]	; (20778 <ble_l2cap_chan_alloc+0x2c>)
   20752:	f7ec fbed 	bl	cf30 <os_memblock_get>
    if (chan == NULL) {
   20756:	4603      	mov	r3, r0
   20758:	b160      	cbz	r0, 20774 <ble_l2cap_chan_alloc+0x28>
    memset(chan, 0, sizeof *chan);
   2075a:	2200      	movs	r2, #0
   2075c:	6002      	str	r2, [r0, #0]
   2075e:	6042      	str	r2, [r0, #4]
   20760:	6082      	str	r2, [r0, #8]
   20762:	60c2      	str	r2, [r0, #12]
   20764:	6102      	str	r2, [r0, #16]
   20766:	6142      	str	r2, [r0, #20]
   20768:	6182      	str	r2, [r0, #24]
    chan->conn_handle = conn_handle;
   2076a:	8084      	strh	r4, [r0, #4]
    STATS_INC(ble_l2cap_stats, chan_create);
   2076c:	4903      	ldr	r1, [pc, #12]	; (2077c <ble_l2cap_chan_alloc+0x30>)
   2076e:	68ca      	ldr	r2, [r1, #12]
   20770:	3201      	adds	r2, #1
   20772:	60ca      	str	r2, [r1, #12]
}
   20774:	4618      	mov	r0, r3
   20776:	bd10      	pop	{r4, pc}
   20778:	2000465c 	.word	0x2000465c
   2077c:	20004678 	.word	0x20004678

00020780 <ble_l2cap_chan_free>:
    if (chan == NULL) {
   20780:	b169      	cbz	r1, 2079e <ble_l2cap_chan_free+0x1e>
{
   20782:	b510      	push	{r4, lr}
   20784:	460c      	mov	r4, r1
    os_mbuf_free_chain(chan->rx_buf);
   20786:	6908      	ldr	r0, [r1, #16]
   20788:	f7ed f945 	bl	da16 <os_mbuf_free_chain>
    rc = os_memblock_put(&ble_l2cap_chan_pool, chan);
   2078c:	4621      	mov	r1, r4
   2078e:	4804      	ldr	r0, [pc, #16]	; (207a0 <ble_l2cap_chan_free+0x20>)
   20790:	f7ec fbf6 	bl	cf80 <os_memblock_put>
    STATS_INC(ble_l2cap_stats, chan_delete);
   20794:	4a03      	ldr	r2, [pc, #12]	; (207a4 <ble_l2cap_chan_free+0x24>)
   20796:	6913      	ldr	r3, [r2, #16]
   20798:	3301      	adds	r3, #1
   2079a:	6113      	str	r3, [r2, #16]
}
   2079c:	bd10      	pop	{r4, pc}
   2079e:	4770      	bx	lr
   207a0:	2000465c 	.word	0x2000465c
   207a4:	20004678 	.word	0x20004678

000207a8 <ble_l2cap_is_mtu_req_sent>:
    return (chan->flags & BLE_L2CAP_CHAN_F_TXED_MTU);
   207a8:	7b80      	ldrb	r0, [r0, #14]
}
   207aa:	f000 0001 	and.w	r0, r0, #1
   207ae:	4770      	bx	lr

000207b0 <ble_l2cap_parse_hdr>:
{
   207b0:	b538      	push	{r3, r4, r5, lr}
   207b2:	4614      	mov	r4, r2
    rc = os_mbuf_copydata(om, off, sizeof *l2cap_hdr, l2cap_hdr);
   207b4:	4613      	mov	r3, r2
   207b6:	2204      	movs	r2, #4
   207b8:	f7ed f9ce 	bl	db58 <os_mbuf_copydata>
    if (rc != 0) {
   207bc:	b960      	cbnz	r0, 207d8 <ble_l2cap_parse_hdr+0x28>
   207be:	4605      	mov	r5, r0
    l2cap_hdr->len = get_le16(&l2cap_hdr->len);
   207c0:	4620      	mov	r0, r4
   207c2:	f008 ffe4 	bl	2978e <get_le16>
   207c6:	4623      	mov	r3, r4
   207c8:	f823 0b02 	strh.w	r0, [r3], #2
    l2cap_hdr->cid = get_le16(&l2cap_hdr->cid);
   207cc:	4618      	mov	r0, r3
   207ce:	f008 ffde 	bl	2978e <get_le16>
   207d2:	8060      	strh	r0, [r4, #2]
}
   207d4:	4628      	mov	r0, r5
   207d6:	bd38      	pop	{r3, r4, r5, pc}
        return BLE_HS_EMSGSIZE;
   207d8:	2504      	movs	r5, #4
   207da:	e7fb      	b.n	207d4 <ble_l2cap_parse_hdr+0x24>

000207dc <ble_l2cap_prepend_hdr>:
{
   207dc:	b530      	push	{r4, r5, lr}
   207de:	b083      	sub	sp, #12
   207e0:	4604      	mov	r4, r0
   207e2:	460d      	mov	r5, r1
    put_le16(&hdr.len, len);
   207e4:	4611      	mov	r1, r2
   207e6:	a801      	add	r0, sp, #4
   207e8:	f008 ffb0 	bl	2974c <put_le16>
    put_le16(&hdr.cid, cid);
   207ec:	4629      	mov	r1, r5
   207ee:	f10d 0006 	add.w	r0, sp, #6
   207f2:	f008 ffab 	bl	2974c <put_le16>
    om = os_mbuf_prepend_pullup(om, sizeof hdr);
   207f6:	2104      	movs	r1, #4
   207f8:	4620      	mov	r0, r4
   207fa:	f7ed fc48 	bl	e08e <os_mbuf_prepend_pullup>
    if (om == NULL) {
   207fe:	4603      	mov	r3, r0
   20800:	b110      	cbz	r0, 20808 <ble_l2cap_prepend_hdr+0x2c>
    memcpy(om->om_data, &hdr, sizeof hdr);
   20802:	6802      	ldr	r2, [r0, #0]
   20804:	9901      	ldr	r1, [sp, #4]
   20806:	6011      	str	r1, [r2, #0]
}
   20808:	4618      	mov	r0, r3
   2080a:	b003      	add	sp, #12
   2080c:	bd30      	pop	{r4, r5, pc}

0002080e <ble_l2cap_get_conn_handle>:
    if (!chan) {
   2080e:	b108      	cbz	r0, 20814 <ble_l2cap_get_conn_handle+0x6>
    return chan->conn_handle;
   20810:	8880      	ldrh	r0, [r0, #4]
   20812:	4770      	bx	lr
        return BLE_HS_CONN_HANDLE_NONE;
   20814:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
   20818:	4770      	bx	lr

0002081a <ble_l2cap_remove_rx>:
{
   2081a:	b538      	push	{r3, r4, r5, lr}
   2081c:	460c      	mov	r4, r1
    conn->bhc_rx_chan = NULL;
   2081e:	2500      	movs	r5, #0
   20820:	6305      	str	r5, [r0, #48]	; 0x30
    os_mbuf_free_chain(chan->rx_buf);
   20822:	6908      	ldr	r0, [r1, #16]
   20824:	f7ed f8f7 	bl	da16 <os_mbuf_free_chain>
    chan->rx_buf = NULL;
   20828:	6125      	str	r5, [r4, #16]
    chan->rx_len = 0;
   2082a:	82a5      	strh	r5, [r4, #20]
}
   2082c:	bd38      	pop	{r3, r4, r5, pc}

0002082e <ble_l2cap_rx_payload>:
{
   2082e:	b570      	push	{r4, r5, r6, lr}
   20830:	4605      	mov	r5, r0
   20832:	460c      	mov	r4, r1
   20834:	461e      	mov	r6, r3
    if (chan->rx_buf == NULL) {
   20836:	690b      	ldr	r3, [r1, #16]
   20838:	b16b      	cbz	r3, 20856 <ble_l2cap_rx_payload+0x28>
        ble_l2cap_append_rx(chan, om);
   2083a:	4611      	mov	r1, r2
   2083c:	4620      	mov	r0, r4
   2083e:	f7ff ff74 	bl	2072a <ble_l2cap_append_rx>
    len_diff = OS_MBUF_PKTLEN(chan->rx_buf) - chan->rx_len;
   20842:	6923      	ldr	r3, [r4, #16]
   20844:	8a18      	ldrh	r0, [r3, #16]
   20846:	8aa3      	ldrh	r3, [r4, #20]
   20848:	1ac0      	subs	r0, r0, r3
    if (len_diff > 0) {
   2084a:	2800      	cmp	r0, #0
   2084c:	dc05      	bgt.n	2085a <ble_l2cap_rx_payload+0x2c>
    } else if (len_diff == 0) {
   2084e:	b950      	cbnz	r0, 20866 <ble_l2cap_rx_payload+0x38>
        *out_rx_cb = chan->rx_fn;
   20850:	69a3      	ldr	r3, [r4, #24]
   20852:	6033      	str	r3, [r6, #0]
}
   20854:	bd70      	pop	{r4, r5, r6, pc}
        chan->rx_buf = om;
   20856:	610a      	str	r2, [r1, #16]
   20858:	e7f3      	b.n	20842 <ble_l2cap_rx_payload+0x14>
        ble_l2cap_remove_rx(conn, chan);
   2085a:	4621      	mov	r1, r4
   2085c:	4628      	mov	r0, r5
   2085e:	f7ff ffdc 	bl	2081a <ble_l2cap_remove_rx>
        rc = BLE_HS_EBADDATA;
   20862:	200a      	movs	r0, #10
   20864:	e7f6      	b.n	20854 <ble_l2cap_rx_payload+0x26>
    return os_time_get();
   20866:	f7ec ff05 	bl	d674 <os_time_get>
            ble_npl_time_get() + MYNEWT_VAL(BLE_L2CAP_RX_FRAG_TIMEOUT);
   2086a:	f500 40ea 	add.w	r0, r0, #29952	; 0x7500
   2086e:	3030      	adds	r0, #48	; 0x30
        conn->bhc_rx_timeout =
   20870:	6368      	str	r0, [r5, #52]	; 0x34
        ble_hs_timer_resched();
   20872:	f7fd ff4f 	bl	1e714 <ble_hs_timer_resched>
        rc = BLE_HS_EAGAIN;
   20876:	2001      	movs	r0, #1
    return rc;
   20878:	e7ec      	b.n	20854 <ble_l2cap_rx_payload+0x26>

0002087a <ble_l2cap_rx>:
ble_l2cap_rx(struct ble_hs_conn *conn,
             struct hci_data_hdr *hci_hdr,
             struct os_mbuf *om,
             ble_l2cap_rx_fn **out_rx_cb,
             int *out_reject_cid)
{
   2087a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2087e:	b082      	sub	sp, #8
   20880:	4607      	mov	r7, r0
   20882:	4614      	mov	r4, r2
   20884:	4698      	mov	r8, r3
   20886:	9d08      	ldr	r5, [sp, #32]
    struct ble_l2cap_chan *chan;
    struct ble_l2cap_hdr l2cap_hdr;
    uint8_t pb;
    int rc;

    *out_reject_cid = -1;
   20888:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2088c:	602b      	str	r3, [r5, #0]

    pb = BLE_HCI_DATA_PB(hci_hdr->hdh_handle_pb_bc);
   2088e:	880b      	ldrh	r3, [r1, #0]
   20890:	f3c3 3301 	ubfx	r3, r3, #12, #2
    switch (pb) {
   20894:	2b01      	cmp	r3, #1
   20896:	d02e      	beq.n	208f6 <ble_l2cap_rx+0x7c>
   20898:	2b02      	cmp	r3, #2
   2089a:	d13a      	bne.n	20912 <ble_l2cap_rx+0x98>
    case BLE_HCI_PB_FIRST_FLUSH:
        /* First fragment. */
        rc = ble_l2cap_parse_hdr(om, 0, &l2cap_hdr);
   2089c:	aa01      	add	r2, sp, #4
   2089e:	2100      	movs	r1, #0
   208a0:	4620      	mov	r0, r4
   208a2:	f7ff ff85 	bl	207b0 <ble_l2cap_parse_hdr>
        if (rc != 0) {
   208a6:	4606      	mov	r6, r0
   208a8:	bba0      	cbnz	r0, 20914 <ble_l2cap_rx+0x9a>
            goto err;
        }

        /* Strip L2CAP header from the front of the mbuf. */
        os_mbuf_adj(om, BLE_L2CAP_HDR_SZ);
   208aa:	2104      	movs	r1, #4
   208ac:	4620      	mov	r0, r4
   208ae:	f7ed f980 	bl	dbb2 <os_mbuf_adj>

        chan = ble_hs_conn_chan_find_by_scid(conn, l2cap_hdr.cid);
   208b2:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   208b6:	4638      	mov	r0, r7
   208b8:	f7fe fc0e 	bl	1f0d8 <ble_hs_conn_chan_find_by_scid>
        if (chan == NULL) {
   208bc:	4606      	mov	r6, r0
   208be:	b188      	cbz	r0, 208e4 <ble_l2cap_rx+0x6a>
                *out_reject_cid = l2cap_hdr.cid;
            }
            goto err;
        }

        if (chan->rx_buf != NULL) {
   208c0:	6903      	ldr	r3, [r0, #16]
   208c2:	b11b      	cbz	r3, 208cc <ble_l2cap_rx+0x52>
            /* Previous data packet never completed.  Discard old packet. */
            ble_l2cap_remove_rx(conn, chan);
   208c4:	4601      	mov	r1, r0
   208c6:	4638      	mov	r0, r7
   208c8:	f7ff ffa7 	bl	2081a <ble_l2cap_remove_rx>
        }

        if (l2cap_hdr.len > ble_l2cap_get_mtu(chan)) {
   208cc:	f8bd 5004 	ldrh.w	r5, [sp, #4]
   208d0:	4630      	mov	r0, r6
   208d2:	f7ff ff21 	bl	20718 <ble_l2cap_get_mtu>
   208d6:	4285      	cmp	r5, r0
   208d8:	d825      	bhi.n	20926 <ble_l2cap_rx+0xac>
            rc = BLE_HS_EBADDATA;
            goto err;
        }

        /* Remember channel and length of L2CAP data for reassembly. */
        conn->bhc_rx_chan = chan;
   208da:	633e      	str	r6, [r7, #48]	; 0x30
        chan->rx_len = l2cap_hdr.len;
   208dc:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   208e0:	82b3      	strh	r3, [r6, #20]
        break;
   208e2:	e00c      	b.n	208fe <ble_l2cap_rx+0x84>
            if (l2cap_hdr.cid != BLE_L2CAP_CID_BLACK_HOLE) {
   208e4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   208e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
   208ec:	4293      	cmp	r3, r2
   208ee:	d018      	beq.n	20922 <ble_l2cap_rx+0xa8>
                *out_reject_cid = l2cap_hdr.cid;
   208f0:	602b      	str	r3, [r5, #0]
            rc = BLE_HS_ENOENT;
   208f2:	2605      	movs	r6, #5
   208f4:	e00e      	b.n	20914 <ble_l2cap_rx+0x9a>

    case BLE_HCI_PB_MIDDLE:
        chan = conn->bhc_rx_chan;
   208f6:	6b06      	ldr	r6, [r0, #48]	; 0x30
        if (chan == NULL || chan->rx_buf == NULL) {
   208f8:	b1be      	cbz	r6, 2092a <ble_l2cap_rx+0xb0>
   208fa:	6933      	ldr	r3, [r6, #16]
   208fc:	b1bb      	cbz	r3, 2092e <ble_l2cap_rx+0xb4>
    default:
        rc = BLE_HS_EBADDATA;
        goto err;
    }

    rc = ble_l2cap_rx_payload(conn, chan, om, out_rx_cb);
   208fe:	4643      	mov	r3, r8
   20900:	4622      	mov	r2, r4
   20902:	4631      	mov	r1, r6
   20904:	4638      	mov	r0, r7
   20906:	f7ff ff92 	bl	2082e <ble_l2cap_rx_payload>
    om = NULL;
    if (rc != 0) {
   2090a:	4606      	mov	r6, r0
   2090c:	b128      	cbz	r0, 2091a <ble_l2cap_rx+0xa0>
    om = NULL;
   2090e:	2400      	movs	r4, #0
        goto err;
    }

    return 0;

err:
   20910:	e000      	b.n	20914 <ble_l2cap_rx+0x9a>
        rc = BLE_HS_EBADDATA;
   20912:	260a      	movs	r6, #10
    os_mbuf_free_chain(om);
   20914:	4620      	mov	r0, r4
   20916:	f7ed f87e 	bl	da16 <os_mbuf_free_chain>
    return rc;
}
   2091a:	4630      	mov	r0, r6
   2091c:	b002      	add	sp, #8
   2091e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            rc = BLE_HS_ENOENT;
   20922:	2605      	movs	r6, #5
   20924:	e7f6      	b.n	20914 <ble_l2cap_rx+0x9a>
            rc = BLE_HS_EBADDATA;
   20926:	260a      	movs	r6, #10
   20928:	e7f4      	b.n	20914 <ble_l2cap_rx+0x9a>
            rc = BLE_HS_EBADDATA;
   2092a:	260a      	movs	r6, #10
   2092c:	e7f2      	b.n	20914 <ble_l2cap_rx+0x9a>
   2092e:	260a      	movs	r6, #10
   20930:	e7f0      	b.n	20914 <ble_l2cap_rx+0x9a>

00020932 <ble_l2cap_tx>:
 * @return                      0 on success; nonzero on error.
 */
int
ble_l2cap_tx(struct ble_hs_conn *conn, struct ble_l2cap_chan *chan,
             struct os_mbuf *txom)
{
   20932:	b510      	push	{r4, lr}
   20934:	b082      	sub	sp, #8
   20936:	4604      	mov	r4, r0
   20938:	9201      	str	r2, [sp, #4]
    int rc;

    txom = ble_l2cap_prepend_hdr(txom, chan->dcid, OS_MBUF_PKTLEN(txom));
   2093a:	4610      	mov	r0, r2
   2093c:	8a12      	ldrh	r2, [r2, #16]
   2093e:	88c9      	ldrh	r1, [r1, #6]
   20940:	f7ff ff4c 	bl	207dc <ble_l2cap_prepend_hdr>
   20944:	9001      	str	r0, [sp, #4]
    if (txom == NULL) {
   20946:	b188      	cbz	r0, 2096c <ble_l2cap_tx+0x3a>
        return BLE_HS_ENOMEM;
    }

    rc = ble_hs_hci_acl_tx(conn, &txom);
   20948:	a901      	add	r1, sp, #4
   2094a:	4620      	mov	r0, r4
   2094c:	f7fe ff48 	bl	1f7e0 <ble_hs_hci_acl_tx>
    switch (rc) {
   20950:	2801      	cmp	r0, #1
   20952:	d001      	beq.n	20958 <ble_l2cap_tx+0x26>

    default:
        /* Error. */
        return rc;
    }
}
   20954:	b002      	add	sp, #8
   20956:	bd10      	pop	{r4, pc}
        STAILQ_INSERT_TAIL(&conn->bhc_tx_q, OS_MBUF_PKTHDR(txom), omp_next);
   20958:	9b01      	ldr	r3, [sp, #4]
   2095a:	2000      	movs	r0, #0
   2095c:	6158      	str	r0, [r3, #20]
   2095e:	6c22      	ldr	r2, [r4, #64]	; 0x40
   20960:	3310      	adds	r3, #16
   20962:	6013      	str	r3, [r2, #0]
   20964:	9b01      	ldr	r3, [sp, #4]
   20966:	3314      	adds	r3, #20
   20968:	6423      	str	r3, [r4, #64]	; 0x40
        return 0;
   2096a:	e7f3      	b.n	20954 <ble_l2cap_tx+0x22>
        return BLE_HS_ENOMEM;
   2096c:	2006      	movs	r0, #6
   2096e:	e7f1      	b.n	20954 <ble_l2cap_tx+0x22>

00020970 <ble_l2cap_init>:

int
ble_l2cap_init(void)
{
   20970:	b500      	push	{lr}
   20972:	b083      	sub	sp, #12
    int rc;

    rc = os_mempool_init(&ble_l2cap_chan_pool,
   20974:	4b11      	ldr	r3, [pc, #68]	; (209bc <ble_l2cap_init+0x4c>)
   20976:	9300      	str	r3, [sp, #0]
   20978:	4b11      	ldr	r3, [pc, #68]	; (209c0 <ble_l2cap_init+0x50>)
   2097a:	221c      	movs	r2, #28
   2097c:	2103      	movs	r1, #3
   2097e:	4811      	ldr	r0, [pc, #68]	; (209c4 <ble_l2cap_init+0x54>)
   20980:	f7ec fa92 	bl	cea8 <os_mempool_init>
                         MYNEWT_VAL(BLE_L2CAP_MAX_CHANS) +
                         MYNEWT_VAL(BLE_L2CAP_COC_MAX_NUM),
                         sizeof (struct ble_l2cap_chan),
                         ble_l2cap_chan_mem, "ble_l2cap_chan_pool");
    if (rc != 0) {
   20984:	b9a0      	cbnz	r0, 209b0 <ble_l2cap_init+0x40>
        return BLE_HS_EOS;
    }

    rc = ble_l2cap_sig_init();
   20986:	f000 fa6b 	bl	20e60 <ble_l2cap_sig_init>
    if (rc != 0) {
   2098a:	4603      	mov	r3, r0
   2098c:	b988      	cbnz	r0, 209b2 <ble_l2cap_init+0x42>
    rc = ble_l2cap_coc_init();
    if (rc != 0) {
        return rc;
    }

    rc = ble_sm_init();
   2098e:	f001 ff95 	bl	228bc <ble_sm_init>
    if (rc != 0) {
   20992:	4603      	mov	r3, r0
   20994:	b968      	cbnz	r0, 209b2 <ble_l2cap_init+0x42>
        return rc;
    }

    rc = stats_init_and_reg(
   20996:	4b0c      	ldr	r3, [pc, #48]	; (209c8 <ble_l2cap_init+0x58>)
   20998:	9301      	str	r3, [sp, #4]
   2099a:	2300      	movs	r3, #0
   2099c:	9300      	str	r3, [sp, #0]
   2099e:	220a      	movs	r2, #10
   209a0:	2104      	movs	r1, #4
   209a2:	480a      	ldr	r0, [pc, #40]	; (209cc <ble_l2cap_init+0x5c>)
   209a4:	f7ef fb64 	bl	10070 <stats_init_and_reg>
        STATS_HDR(ble_l2cap_stats), STATS_SIZE_INIT_PARMS(ble_l2cap_stats,
        STATS_SIZE_32), STATS_NAME_INIT_PARMS(ble_l2cap_stats), "ble_l2cap");
    if (rc != 0) {
   209a8:	4603      	mov	r3, r0
   209aa:	b110      	cbz	r0, 209b2 <ble_l2cap_init+0x42>
        return BLE_HS_EOS;
   209ac:	230b      	movs	r3, #11
   209ae:	e000      	b.n	209b2 <ble_l2cap_init+0x42>
        return BLE_HS_EOS;
   209b0:	230b      	movs	r3, #11
    }

    return 0;
}
   209b2:	4618      	mov	r0, r3
   209b4:	b003      	add	sp, #12
   209b6:	f85d fb04 	ldr.w	pc, [sp], #4
   209ba:	bf00      	nop
   209bc:	0002b690 	.word	0x0002b690
   209c0:	20002ff0 	.word	0x20002ff0
   209c4:	2000465c 	.word	0x2000465c
   209c8:	0002b6a4 	.word	0x0002b6a4
   209cc:	20004678 	.word	0x20004678

000209d0 <ble_l2cap_sig_next_id>:
 *****************************************************************************/

static uint8_t
ble_l2cap_sig_next_id(void)
{
    ble_l2cap_sig_cur_id++;
   209d0:	4a05      	ldr	r2, [pc, #20]	; (209e8 <ble_l2cap_sig_next_id+0x18>)
   209d2:	7813      	ldrb	r3, [r2, #0]
   209d4:	3301      	adds	r3, #1
   209d6:	b2db      	uxtb	r3, r3
   209d8:	7013      	strb	r3, [r2, #0]
    if (ble_l2cap_sig_cur_id == 0) {
   209da:	b913      	cbnz	r3, 209e2 <ble_l2cap_sig_next_id+0x12>
        /* An ID of 0 is illegal. */
        ble_l2cap_sig_cur_id = 1;
   209dc:	4613      	mov	r3, r2
   209de:	2201      	movs	r2, #1
   209e0:	701a      	strb	r2, [r3, #0]
    }

    return ble_l2cap_sig_cur_id;
}
   209e2:	4b01      	ldr	r3, [pc, #4]	; (209e8 <ble_l2cap_sig_next_id+0x18>)
   209e4:	7818      	ldrb	r0, [r3, #0]
   209e6:	4770      	bx	lr
   209e8:	20003044 	.word	0x20003044

000209ec <ble_l2cap_sig_dispatch_get>:

static ble_l2cap_sig_rx_fn *
ble_l2cap_sig_dispatch_get(uint8_t op)
{
    if (op >= BLE_L2CAP_SIG_OP_MAX) {
   209ec:	281a      	cmp	r0, #26
   209ee:	d803      	bhi.n	209f8 <ble_l2cap_sig_dispatch_get+0xc>
        return NULL;
    }

    return ble_l2cap_sig_dispatch[op];
   209f0:	4b02      	ldr	r3, [pc, #8]	; (209fc <ble_l2cap_sig_dispatch_get+0x10>)
   209f2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   209f6:	4770      	bx	lr
        return NULL;
   209f8:	2000      	movs	r0, #0
}
   209fa:	4770      	bx	lr
   209fc:	0002b6b0 	.word	0x0002b6b0

00020a00 <ble_l2cap_sig_proc_matches>:
 * @return                      1 if the proc matches; 0 otherwise.
 */
static int
ble_l2cap_sig_proc_matches(struct ble_l2cap_sig_proc *proc,
                           uint16_t conn_handle, uint8_t op, uint8_t id)
{
   20a00:	b410      	push	{r4}
    if (conn_handle != proc->conn_handle) {
   20a02:	8904      	ldrh	r4, [r0, #8]
   20a04:	428c      	cmp	r4, r1
   20a06:	d002      	beq.n	20a0e <ble_l2cap_sig_proc_matches+0xe>
        return 0;
   20a08:	2000      	movs	r0, #0
    if (id != 0 && id != proc->id) {
        return 0;
    }

    return 1;
}
   20a0a:	bc10      	pop	{r4}
   20a0c:	4770      	bx	lr
    if (op != proc->op) {
   20a0e:	7a81      	ldrb	r1, [r0, #10]
   20a10:	4291      	cmp	r1, r2
   20a12:	d001      	beq.n	20a18 <ble_l2cap_sig_proc_matches+0x18>
        return 0;
   20a14:	2000      	movs	r0, #0
   20a16:	e7f8      	b.n	20a0a <ble_l2cap_sig_proc_matches+0xa>
    if (id != 0 && id != proc->id) {
   20a18:	b133      	cbz	r3, 20a28 <ble_l2cap_sig_proc_matches+0x28>
   20a1a:	7ac2      	ldrb	r2, [r0, #11]
   20a1c:	429a      	cmp	r2, r3
   20a1e:	d001      	beq.n	20a24 <ble_l2cap_sig_proc_matches+0x24>
        return 0;
   20a20:	2000      	movs	r0, #0
   20a22:	e7f2      	b.n	20a0a <ble_l2cap_sig_proc_matches+0xa>
    return 1;
   20a24:	2001      	movs	r0, #1
   20a26:	e7f0      	b.n	20a0a <ble_l2cap_sig_proc_matches+0xa>
   20a28:	2001      	movs	r0, #1
   20a2a:	e7ee      	b.n	20a0a <ble_l2cap_sig_proc_matches+0xa>

00020a2c <ble_l2cap_sig_rx_noop>:
ble_l2cap_sig_rx_noop(uint16_t conn_handle,
                      struct ble_l2cap_sig_hdr *hdr,
                      struct os_mbuf **om)
{
    return BLE_HS_ENOTSUP;
}
   20a2c:	2008      	movs	r0, #8
   20a2e:	4770      	bx	lr

00020a30 <ble_l2cap_sig_update_call_cb>:
 * $update                                                                   *
 *****************************************************************************/

static void
ble_l2cap_sig_update_call_cb(struct ble_l2cap_sig_proc *proc, int status)
{
   20a30:	b510      	push	{r4, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());

    if (status != 0) {
   20a32:	460b      	mov	r3, r1
   20a34:	b119      	cbz	r1, 20a3e <ble_l2cap_sig_update_call_cb+0xe>
        STATS_INC(ble_l2cap_stats, update_fail);
   20a36:	4905      	ldr	r1, [pc, #20]	; (20a4c <ble_l2cap_sig_update_call_cb+0x1c>)
   20a38:	69ca      	ldr	r2, [r1, #28]
   20a3a:	3201      	adds	r2, #1
   20a3c:	61ca      	str	r2, [r1, #28]
    }

    if (proc->update.cb != NULL) {
   20a3e:	68c4      	ldr	r4, [r0, #12]
   20a40:	b11c      	cbz	r4, 20a4a <ble_l2cap_sig_update_call_cb+0x1a>
   20a42:	4619      	mov	r1, r3
        proc->update.cb(proc->conn_handle, status, proc->update.cb_arg);
   20a44:	6902      	ldr	r2, [r0, #16]
   20a46:	8900      	ldrh	r0, [r0, #8]
   20a48:	47a0      	blx	r4
    }
}
   20a4a:	bd10      	pop	{r4, pc}
   20a4c:	20004678 	.word	0x20004678

00020a50 <ble_l2cap_sig_proc_insert>:
{
   20a50:	b510      	push	{r4, lr}
   20a52:	4604      	mov	r4, r0
    ble_hs_lock();
   20a54:	f7fd fd66 	bl	1e524 <ble_hs_lock>
    STAILQ_INSERT_HEAD(&ble_l2cap_sig_procs, proc, next);
   20a58:	4b05      	ldr	r3, [pc, #20]	; (20a70 <ble_l2cap_sig_proc_insert+0x20>)
   20a5a:	681b      	ldr	r3, [r3, #0]
   20a5c:	6023      	str	r3, [r4, #0]
   20a5e:	b123      	cbz	r3, 20a6a <ble_l2cap_sig_proc_insert+0x1a>
   20a60:	4b03      	ldr	r3, [pc, #12]	; (20a70 <ble_l2cap_sig_proc_insert+0x20>)
   20a62:	601c      	str	r4, [r3, #0]
    ble_hs_unlock();
   20a64:	f7fd fd62 	bl	1e52c <ble_hs_unlock>
}
   20a68:	bd10      	pop	{r4, pc}
    STAILQ_INSERT_HEAD(&ble_l2cap_sig_procs, proc, next);
   20a6a:	4b01      	ldr	r3, [pc, #4]	; (20a70 <ble_l2cap_sig_proc_insert+0x20>)
   20a6c:	605c      	str	r4, [r3, #4]
   20a6e:	e7f7      	b.n	20a60 <ble_l2cap_sig_proc_insert+0x10>
   20a70:	20003078 	.word	0x20003078

00020a74 <ble_l2cap_sig_proc_extract>:
{
   20a74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   20a78:	4680      	mov	r8, r0
   20a7a:	460f      	mov	r7, r1
   20a7c:	4616      	mov	r6, r2
    ble_hs_lock();
   20a7e:	f7fd fd51 	bl	1e524 <ble_hs_lock>
    STAILQ_FOREACH(proc, &ble_l2cap_sig_procs, next) {
   20a82:	4b13      	ldr	r3, [pc, #76]	; (20ad0 <ble_l2cap_sig_proc_extract+0x5c>)
   20a84:	f8d3 9000 	ldr.w	r9, [r3]
   20a88:	464c      	mov	r4, r9
    prev = NULL;
   20a8a:	2500      	movs	r5, #0
    STAILQ_FOREACH(proc, &ble_l2cap_sig_procs, next) {
   20a8c:	b174      	cbz	r4, 20aac <ble_l2cap_sig_proc_extract+0x38>
        if (ble_l2cap_sig_proc_matches(proc, conn_handle, op, identifier)) {
   20a8e:	4633      	mov	r3, r6
   20a90:	463a      	mov	r2, r7
   20a92:	4641      	mov	r1, r8
   20a94:	4620      	mov	r0, r4
   20a96:	f7ff ffb3 	bl	20a00 <ble_l2cap_sig_proc_matches>
   20a9a:	b910      	cbnz	r0, 20aa2 <ble_l2cap_sig_proc_extract+0x2e>
        prev = proc;
   20a9c:	4625      	mov	r5, r4
    STAILQ_FOREACH(proc, &ble_l2cap_sig_procs, next) {
   20a9e:	6824      	ldr	r4, [r4, #0]
   20aa0:	e7f4      	b.n	20a8c <ble_l2cap_sig_proc_extract+0x18>
            if (prev == NULL) {
   20aa2:	b145      	cbz	r5, 20ab6 <ble_l2cap_sig_proc_extract+0x42>
                STAILQ_REMOVE_AFTER(&ble_l2cap_sig_procs, prev, next);
   20aa4:	682b      	ldr	r3, [r5, #0]
   20aa6:	681b      	ldr	r3, [r3, #0]
   20aa8:	602b      	str	r3, [r5, #0]
   20aaa:	b16b      	cbz	r3, 20ac8 <ble_l2cap_sig_proc_extract+0x54>
    ble_hs_unlock();
   20aac:	f7fd fd3e 	bl	1e52c <ble_hs_unlock>
}
   20ab0:	4620      	mov	r0, r4
   20ab2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                STAILQ_REMOVE_HEAD(&ble_l2cap_sig_procs, next);
   20ab6:	f8d9 3000 	ldr.w	r3, [r9]
   20aba:	4a05      	ldr	r2, [pc, #20]	; (20ad0 <ble_l2cap_sig_proc_extract+0x5c>)
   20abc:	6013      	str	r3, [r2, #0]
   20abe:	2b00      	cmp	r3, #0
   20ac0:	d1f4      	bne.n	20aac <ble_l2cap_sig_proc_extract+0x38>
   20ac2:	4613      	mov	r3, r2
   20ac4:	605a      	str	r2, [r3, #4]
   20ac6:	e7f1      	b.n	20aac <ble_l2cap_sig_proc_extract+0x38>
                STAILQ_REMOVE_AFTER(&ble_l2cap_sig_procs, prev, next);
   20ac8:	4b01      	ldr	r3, [pc, #4]	; (20ad0 <ble_l2cap_sig_proc_extract+0x5c>)
   20aca:	605d      	str	r5, [r3, #4]
   20acc:	e7ee      	b.n	20aac <ble_l2cap_sig_proc_extract+0x38>
   20ace:	bf00      	nop
   20ad0:	20003078 	.word	0x20003078

00020ad4 <ble_l2cap_sig_proc_alloc>:
{
   20ad4:	b508      	push	{r3, lr}
    proc = os_memblock_get(&ble_l2cap_sig_proc_pool);
   20ad6:	4806      	ldr	r0, [pc, #24]	; (20af0 <ble_l2cap_sig_proc_alloc+0x1c>)
   20ad8:	f7ec fa2a 	bl	cf30 <os_memblock_get>
    if (proc != NULL) {
   20adc:	4603      	mov	r3, r0
   20ade:	b128      	cbz	r0, 20aec <ble_l2cap_sig_proc_alloc+0x18>
        memset(proc, 0, sizeof *proc);
   20ae0:	2200      	movs	r2, #0
   20ae2:	6002      	str	r2, [r0, #0]
   20ae4:	6042      	str	r2, [r0, #4]
   20ae6:	6082      	str	r2, [r0, #8]
   20ae8:	60c2      	str	r2, [r0, #12]
   20aea:	6102      	str	r2, [r0, #16]
}
   20aec:	4618      	mov	r0, r3
   20aee:	bd08      	pop	{r3, pc}
   20af0:	2000305c 	.word	0x2000305c

00020af4 <ble_l2cap_sig_proc_set_timer>:
{
   20af4:	b510      	push	{r4, lr}
   20af6:	4604      	mov	r4, r0
   20af8:	f7ec fdbc 	bl	d674 <os_time_get>
    proc->exp_os_ticks = ble_npl_time_get() +
   20afc:	f500 6070 	add.w	r0, r0, #3840	; 0xf00
   20b00:	6060      	str	r0, [r4, #4]
    ble_hs_timer_resched();
   20b02:	f7fd fe07 	bl	1e714 <ble_hs_timer_resched>
}
   20b06:	bd10      	pop	{r4, pc}

00020b08 <ble_l2cap_sig_extract_expired>:
 * @return                      The number of ticks until the next expiration
 *                                  occurs.
 */
static int32_t
ble_l2cap_sig_extract_expired(struct ble_l2cap_sig_proc_list *dst_list)
{
   20b08:	b570      	push	{r4, r5, r6, lr}
   20b0a:	4604      	mov	r4, r0
   20b0c:	f7ec fdb2 	bl	d674 <os_time_get>
   20b10:	4606      	mov	r6, r0
    ble_npl_time_t now;
    ble_npl_stime_t next_exp_in;
    ble_npl_stime_t time_diff;

    now = ble_npl_time_get();
    STAILQ_INIT(dst_list);
   20b12:	2300      	movs	r3, #0
   20b14:	6023      	str	r3, [r4, #0]
   20b16:	6064      	str	r4, [r4, #4]

    /* Assume each event is either expired or has infinite duration. */
    next_exp_in = BLE_HS_FOREVER;

    ble_hs_lock();
   20b18:	f7fd fd04 	bl	1e524 <ble_hs_lock>

    prev = NULL;
    proc = STAILQ_FIRST(&ble_l2cap_sig_procs);
   20b1c:	4b10      	ldr	r3, [pc, #64]	; (20b60 <ble_l2cap_sig_extract_expired+0x58>)
   20b1e:	681b      	ldr	r3, [r3, #0]
    next_exp_in = BLE_HS_FOREVER;
   20b20:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
    while (proc != NULL) {
   20b24:	e00a      	b.n	20b3c <ble_l2cap_sig_extract_expired+0x34>

        time_diff = proc->exp_os_ticks - now;
        if (time_diff <= 0) {
            /* Procedure has expired; move it to the destination list. */
            if (prev == NULL) {
                STAILQ_REMOVE_HEAD(&ble_l2cap_sig_procs, next);
   20b26:	480e      	ldr	r0, [pc, #56]	; (20b60 <ble_l2cap_sig_extract_expired+0x58>)
   20b28:	6802      	ldr	r2, [r0, #0]
   20b2a:	6812      	ldr	r2, [r2, #0]
   20b2c:	6002      	str	r2, [r0, #0]
   20b2e:	b17a      	cbz	r2, 20b50 <ble_l2cap_sig_extract_expired+0x48>
            } else {
                STAILQ_REMOVE_AFTER(&ble_l2cap_sig_procs, prev, next);
            }
            STAILQ_INSERT_TAIL(dst_list, proc, next);
   20b30:	2200      	movs	r2, #0
   20b32:	601a      	str	r2, [r3, #0]
   20b34:	6862      	ldr	r2, [r4, #4]
   20b36:	6013      	str	r3, [r2, #0]
   20b38:	6063      	str	r3, [r4, #4]
        } else {
            if (time_diff < next_exp_in) {
                next_exp_in = time_diff;
   20b3a:	460b      	mov	r3, r1
    while (proc != NULL) {
   20b3c:	b15b      	cbz	r3, 20b56 <ble_l2cap_sig_extract_expired+0x4e>
        next = STAILQ_NEXT(proc, next);
   20b3e:	6819      	ldr	r1, [r3, #0]
        time_diff = proc->exp_os_ticks - now;
   20b40:	685a      	ldr	r2, [r3, #4]
   20b42:	1b92      	subs	r2, r2, r6
        if (time_diff <= 0) {
   20b44:	2a00      	cmp	r2, #0
   20b46:	ddee      	ble.n	20b26 <ble_l2cap_sig_extract_expired+0x1e>
            if (time_diff < next_exp_in) {
   20b48:	4295      	cmp	r5, r2
   20b4a:	ddf6      	ble.n	20b3a <ble_l2cap_sig_extract_expired+0x32>
                next_exp_in = time_diff;
   20b4c:	4615      	mov	r5, r2
   20b4e:	e7f4      	b.n	20b3a <ble_l2cap_sig_extract_expired+0x32>
                STAILQ_REMOVE_HEAD(&ble_l2cap_sig_procs, next);
   20b50:	4602      	mov	r2, r0
   20b52:	6050      	str	r0, [r2, #4]
   20b54:	e7ec      	b.n	20b30 <ble_l2cap_sig_extract_expired+0x28>
        }

        proc = next;
    }

    ble_hs_unlock();
   20b56:	f7fd fce9 	bl	1e52c <ble_hs_unlock>

    return next_exp_in;
}
   20b5a:	4628      	mov	r0, r5
   20b5c:	bd70      	pop	{r4, r5, r6, pc}
   20b5e:	bf00      	nop
   20b60:	20003078 	.word	0x20003078

00020b64 <ble_l2cap_sig_proc_free>:
    if (proc != NULL) {
   20b64:	b128      	cbz	r0, 20b72 <ble_l2cap_sig_proc_free+0xe>
{
   20b66:	b508      	push	{r3, lr}
   20b68:	4601      	mov	r1, r0
        rc = os_memblock_put(&ble_l2cap_sig_proc_pool, proc);
   20b6a:	4802      	ldr	r0, [pc, #8]	; (20b74 <ble_l2cap_sig_proc_free+0x10>)
   20b6c:	f7ec fa08 	bl	cf80 <os_memblock_put>
}
   20b70:	bd08      	pop	{r3, pc}
   20b72:	4770      	bx	lr
   20b74:	2000305c 	.word	0x2000305c

00020b78 <ble_l2cap_sig_process_status>:
{
   20b78:	b510      	push	{r4, lr}
   20b7a:	4604      	mov	r4, r0
    if (status == 0) {
   20b7c:	b111      	cbz	r1, 20b84 <ble_l2cap_sig_process_status+0xc>
        ble_l2cap_sig_proc_free(proc);
   20b7e:	f7ff fff1 	bl	20b64 <ble_l2cap_sig_proc_free>
}
   20b82:	bd10      	pop	{r4, pc}
        ble_l2cap_sig_proc_set_timer(proc);
   20b84:	f7ff ffb6 	bl	20af4 <ble_l2cap_sig_proc_set_timer>
        ble_l2cap_sig_proc_insert(proc);
   20b88:	4620      	mov	r0, r4
   20b8a:	f7ff ff61 	bl	20a50 <ble_l2cap_sig_proc_insert>
   20b8e:	e7f8      	b.n	20b82 <ble_l2cap_sig_process_status+0xa>

00020b90 <ble_l2cap_sig_rx_reject>:
{
   20b90:	b508      	push	{r3, lr}
    proc = ble_l2cap_sig_proc_extract(conn_handle,
   20b92:	784a      	ldrb	r2, [r1, #1]
   20b94:	2101      	movs	r1, #1
   20b96:	f7ff ff6d 	bl	20a74 <ble_l2cap_sig_proc_extract>
   if (!proc) {
   20b9a:	b108      	cbz	r0, 20ba0 <ble_l2cap_sig_rx_reject+0x10>
   ble_l2cap_sig_proc_free(proc);
   20b9c:	f7ff ffe2 	bl	20b64 <ble_l2cap_sig_proc_free>
}
   20ba0:	2000      	movs	r0, #0
   20ba2:	bd08      	pop	{r3, pc}

00020ba4 <ble_l2cap_sig_update_rsp_rx>:
{
   20ba4:	b570      	push	{r4, r5, r6, lr}
   20ba6:	4616      	mov	r6, r2
    proc = ble_l2cap_sig_proc_extract(conn_handle,
   20ba8:	784a      	ldrb	r2, [r1, #1]
   20baa:	2100      	movs	r1, #0
   20bac:	f7ff ff62 	bl	20a74 <ble_l2cap_sig_proc_extract>
    if (proc == NULL) {
   20bb0:	b1d8      	cbz	r0, 20bea <ble_l2cap_sig_update_rsp_rx+0x46>
   20bb2:	4605      	mov	r5, r0
    rc = ble_hs_mbuf_pullup_base(om, BLE_L2CAP_SIG_UPDATE_RSP_SZ);
   20bb4:	2102      	movs	r1, #2
   20bb6:	4630      	mov	r0, r6
   20bb8:	f7ff fa8a 	bl	200d0 <ble_hs_mbuf_pullup_base>
    if (rc != 0) {
   20bbc:	4604      	mov	r4, r0
   20bbe:	b948      	cbnz	r0, 20bd4 <ble_l2cap_sig_update_rsp_rx+0x30>
    rsp = (struct ble_l2cap_sig_update_rsp *)(*om)->om_data;
   20bc0:	6833      	ldr	r3, [r6, #0]
   20bc2:	681b      	ldr	r3, [r3, #0]
    switch (le16toh(rsp->result)) {
   20bc4:	881b      	ldrh	r3, [r3, #0]
   20bc6:	b11b      	cbz	r3, 20bd0 <ble_l2cap_sig_update_rsp_rx+0x2c>
   20bc8:	2b01      	cmp	r3, #1
   20bca:	d00c      	beq.n	20be6 <ble_l2cap_sig_update_rsp_rx+0x42>
        cb_status = BLE_HS_EBADDATA;
   20bcc:	210a      	movs	r1, #10
        break;
   20bce:	e002      	b.n	20bd6 <ble_l2cap_sig_update_rsp_rx+0x32>
        cb_status = 0;
   20bd0:	4601      	mov	r1, r0
   20bd2:	e000      	b.n	20bd6 <ble_l2cap_sig_update_rsp_rx+0x32>
        cb_status = rc;
   20bd4:	4601      	mov	r1, r0
    ble_l2cap_sig_update_call_cb(proc, cb_status);
   20bd6:	4628      	mov	r0, r5
   20bd8:	f7ff ff2a 	bl	20a30 <ble_l2cap_sig_update_call_cb>
    ble_l2cap_sig_proc_free(proc);
   20bdc:	4628      	mov	r0, r5
   20bde:	f7ff ffc1 	bl	20b64 <ble_l2cap_sig_proc_free>
}
   20be2:	4620      	mov	r0, r4
   20be4:	bd70      	pop	{r4, r5, r6, pc}
        cb_status = BLE_HS_EREJECT;
   20be6:	2110      	movs	r1, #16
   20be8:	e7f5      	b.n	20bd6 <ble_l2cap_sig_update_rsp_rx+0x32>
        return 0;
   20bea:	2400      	movs	r4, #0
   20bec:	e7f9      	b.n	20be2 <ble_l2cap_sig_update_rsp_rx+0x3e>
	...

00020bf0 <ble_l2cap_sig_rx>:
{
   20bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
   20bf2:	b085      	sub	sp, #20
   20bf4:	4604      	mov	r4, r0
    conn_handle = chan->conn_handle;
   20bf6:	8887      	ldrh	r7, [r0, #4]
    om = &chan->rx_buf;
   20bf8:	f100 0610 	add.w	r6, r0, #16
    STATS_INC(ble_l2cap_stats, sig_rx);
   20bfc:	4a1c      	ldr	r2, [pc, #112]	; (20c70 <ble_l2cap_sig_rx+0x80>)
   20bfe:	6a93      	ldr	r3, [r2, #40]	; 0x28
   20c00:	3301      	adds	r3, #1
   20c02:	6293      	str	r3, [r2, #40]	; 0x28
    ble_hs_log_mbuf(*om);
   20c04:	6900      	ldr	r0, [r0, #16]
   20c06:	f7ff fa13 	bl	20030 <ble_hs_log_mbuf>
    rc = ble_hs_mbuf_pullup_base(om, BLE_L2CAP_SIG_HDR_SZ);
   20c0a:	2104      	movs	r1, #4
   20c0c:	4630      	mov	r0, r6
   20c0e:	f7ff fa5f 	bl	200d0 <ble_hs_mbuf_pullup_base>
    if (rc != 0) {
   20c12:	4605      	mov	r5, r0
   20c14:	b110      	cbz	r0, 20c1c <ble_l2cap_sig_rx+0x2c>
}
   20c16:	4628      	mov	r0, r5
   20c18:	b005      	add	sp, #20
   20c1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ble_l2cap_sig_hdr_parse((*om)->om_data, (*om)->om_len, &hdr);
   20c1c:	6923      	ldr	r3, [r4, #16]
   20c1e:	aa03      	add	r2, sp, #12
   20c20:	88d9      	ldrh	r1, [r3, #6]
   20c22:	6818      	ldr	r0, [r3, #0]
   20c24:	f000 f94d 	bl	20ec2 <ble_l2cap_sig_hdr_parse>
    os_mbuf_adj(*om, BLE_L2CAP_SIG_HDR_SZ);
   20c28:	2104      	movs	r1, #4
   20c2a:	6920      	ldr	r0, [r4, #16]
   20c2c:	f7ec ffc1 	bl	dbb2 <os_mbuf_adj>
    if (OS_MBUF_PKTLEN(*om) != hdr.length) {
   20c30:	6923      	ldr	r3, [r4, #16]
   20c32:	8a1a      	ldrh	r2, [r3, #16]
   20c34:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   20c38:	429a      	cmp	r2, r3
   20c3a:	d117      	bne.n	20c6c <ble_l2cap_sig_rx+0x7c>
    rx_cb = ble_l2cap_sig_dispatch_get(hdr.op);
   20c3c:	f89d 000c 	ldrb.w	r0, [sp, #12]
   20c40:	f7ff fed4 	bl	209ec <ble_l2cap_sig_dispatch_get>
    if (rx_cb == NULL) {
   20c44:	4603      	mov	r3, r0
   20c46:	b178      	cbz	r0, 20c68 <ble_l2cap_sig_rx+0x78>
        rc = rx_cb(conn_handle, &hdr, om);
   20c48:	4632      	mov	r2, r6
   20c4a:	a903      	add	r1, sp, #12
   20c4c:	4638      	mov	r0, r7
   20c4e:	4798      	blx	r3
    if (rc) {
   20c50:	4605      	mov	r5, r0
   20c52:	2800      	cmp	r0, #0
   20c54:	d0df      	beq.n	20c16 <ble_l2cap_sig_rx+0x26>
        ble_l2cap_sig_reject_tx(conn_handle, hdr.identifier,
   20c56:	f89d 100d 	ldrb.w	r1, [sp, #13]
   20c5a:	2200      	movs	r2, #0
   20c5c:	9200      	str	r2, [sp, #0]
   20c5e:	4613      	mov	r3, r2
   20c60:	4638      	mov	r0, r7
   20c62:	f000 f955 	bl	20f10 <ble_l2cap_sig_reject_tx>
   20c66:	e7d6      	b.n	20c16 <ble_l2cap_sig_rx+0x26>
        rc = BLE_HS_EREJECT;
   20c68:	2510      	movs	r5, #16
   20c6a:	e7f4      	b.n	20c56 <ble_l2cap_sig_rx+0x66>
        return BLE_HS_EBADDATA;
   20c6c:	250a      	movs	r5, #10
   20c6e:	e7d2      	b.n	20c16 <ble_l2cap_sig_rx+0x26>
   20c70:	20004678 	.word	0x20004678

00020c74 <ble_l2cap_sig_update_req_rx>:
{
   20c74:	b5f0      	push	{r4, r5, r6, r7, lr}
   20c76:	b087      	sub	sp, #28
   20c78:	4606      	mov	r6, r0
   20c7a:	460f      	mov	r7, r1
   20c7c:	4615      	mov	r5, r2
    rc = ble_hs_mbuf_pullup_base(om, BLE_L2CAP_SIG_UPDATE_REQ_SZ);
   20c7e:	2108      	movs	r1, #8
   20c80:	4610      	mov	r0, r2
   20c82:	f7ff fa25 	bl	200d0 <ble_hs_mbuf_pullup_base>
    if (rc != 0) {
   20c86:	4604      	mov	r4, r0
   20c88:	b110      	cbz	r0, 20c90 <ble_l2cap_sig_update_req_rx+0x1c>
}
   20c8a:	4620      	mov	r0, r4
   20c8c:	b007      	add	sp, #28
   20c8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    rc = ble_hs_atomic_conn_flags(conn_handle, &conn_flags);
   20c90:	f10d 0107 	add.w	r1, sp, #7
   20c94:	4630      	mov	r0, r6
   20c96:	f7fe f9e2 	bl	1f05e <ble_hs_atomic_conn_flags>
    if (rc != 0) {
   20c9a:	4604      	mov	r4, r0
   20c9c:	2800      	cmp	r0, #0
   20c9e:	d1f4      	bne.n	20c8a <ble_l2cap_sig_update_req_rx+0x16>
    sig_err = !(conn_flags & BLE_HS_CONN_F_MASTER);
   20ca0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    if (sig_err) {
   20ca4:	f013 0f01 	tst.w	r3, #1
   20ca8:	d032      	beq.n	20d10 <ble_l2cap_sig_update_req_rx+0x9c>
    req = (struct ble_l2cap_sig_update_req *)(*om)->om_data;
   20caa:	682b      	ldr	r3, [r5, #0]
   20cac:	681b      	ldr	r3, [r3, #0]
    params.itvl_min = le16toh(req->itvl_min);
   20cae:	881a      	ldrh	r2, [r3, #0]
   20cb0:	f8ad 2008 	strh.w	r2, [sp, #8]
    params.itvl_max = le16toh(req->itvl_max);
   20cb4:	885a      	ldrh	r2, [r3, #2]
   20cb6:	f8ad 200a 	strh.w	r2, [sp, #10]
    params.latency = le16toh(req->slave_latency);
   20cba:	889a      	ldrh	r2, [r3, #4]
   20cbc:	f8ad 200c 	strh.w	r2, [sp, #12]
    params.supervision_timeout = le16toh(req->timeout_multiplier);
   20cc0:	88db      	ldrh	r3, [r3, #6]
   20cc2:	f8ad 300e 	strh.w	r3, [sp, #14]
    params.min_ce_len = BLE_GAP_INITIAL_CONN_MIN_CE_LEN;
   20cc6:	2310      	movs	r3, #16
   20cc8:	f8ad 3010 	strh.w	r3, [sp, #16]
    params.max_ce_len = BLE_GAP_INITIAL_CONN_MAX_CE_LEN;
   20ccc:	f44f 7340 	mov.w	r3, #768	; 0x300
   20cd0:	f8ad 3012 	strh.w	r3, [sp, #18]
    rc = ble_gap_rx_l2cap_update_req(conn_handle, &params);
   20cd4:	a902      	add	r1, sp, #8
   20cd6:	4630      	mov	r0, r6
   20cd8:	f7fa f82b 	bl	1ad32 <ble_gap_rx_l2cap_update_req>
    if (rc == 0) {
   20cdc:	4603      	mov	r3, r0
   20cde:	b178      	cbz	r0, 20d00 <ble_l2cap_sig_update_req_rx+0x8c>
    if (rc == 0) {
   20ce0:	b9a3      	cbnz	r3, 20d0c <ble_l2cap_sig_update_req_rx+0x98>
        l2cap_result = BLE_L2CAP_SIG_UPDATE_RSP_RESULT_ACCEPT;
   20ce2:	2500      	movs	r5, #0
    rsp = ble_l2cap_sig_cmd_get(BLE_L2CAP_SIG_OP_UPDATE_RSP, hdr->identifier,
   20ce4:	ab05      	add	r3, sp, #20
   20ce6:	2202      	movs	r2, #2
   20ce8:	7879      	ldrb	r1, [r7, #1]
   20cea:	2013      	movs	r0, #19
   20cec:	f000 f8f0 	bl	20ed0 <ble_l2cap_sig_cmd_get>
    if (!rsp) {
   20cf0:	2800      	cmp	r0, #0
   20cf2:	d0ca      	beq.n	20c8a <ble_l2cap_sig_update_req_rx+0x16>
    rsp->result = htole16(l2cap_result);
   20cf4:	8005      	strh	r5, [r0, #0]
    ble_l2cap_sig_tx(conn_handle, txom);
   20cf6:	9905      	ldr	r1, [sp, #20]
   20cf8:	4630      	mov	r0, r6
   20cfa:	f000 f8cb 	bl	20e94 <ble_l2cap_sig_tx>
    return 0;
   20cfe:	e7c4      	b.n	20c8a <ble_l2cap_sig_update_req_rx+0x16>
        rc = ble_gap_update_params(conn_handle, &params);
   20d00:	a902      	add	r1, sp, #8
   20d02:	4630      	mov	r0, r6
   20d04:	f7fa fc70 	bl	1b5e8 <ble_gap_update_params>
   20d08:	4603      	mov	r3, r0
   20d0a:	e7e9      	b.n	20ce0 <ble_l2cap_sig_update_req_rx+0x6c>
        l2cap_result = BLE_L2CAP_SIG_UPDATE_RSP_RESULT_REJECT;
   20d0c:	2501      	movs	r5, #1
   20d0e:	e7e9      	b.n	20ce4 <ble_l2cap_sig_update_req_rx+0x70>
        return BLE_HS_EREJECT;
   20d10:	2410      	movs	r4, #16
   20d12:	e7ba      	b.n	20c8a <ble_l2cap_sig_update_req_rx+0x16>

00020d14 <ble_l2cap_sig_update>:
{
   20d14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20d18:	b084      	sub	sp, #16
   20d1a:	4605      	mov	r5, r0
   20d1c:	460e      	mov	r6, r1
   20d1e:	4690      	mov	r8, r2
   20d20:	461f      	mov	r7, r3
    STATS_INC(ble_l2cap_stats, update_init);
   20d22:	4a26      	ldr	r2, [pc, #152]	; (20dbc <ble_l2cap_sig_update+0xa8>)
   20d24:	6953      	ldr	r3, [r2, #20]
   20d26:	3301      	adds	r3, #1
   20d28:	6153      	str	r3, [r2, #20]
    ble_hs_lock();
   20d2a:	f7fd fbfb 	bl	1e524 <ble_hs_lock>
    ble_hs_misc_conn_chan_find_reqd(conn_handle, BLE_L2CAP_CID_SIG,
   20d2e:	ab02      	add	r3, sp, #8
   20d30:	aa01      	add	r2, sp, #4
   20d32:	2105      	movs	r1, #5
   20d34:	4628      	mov	r0, r5
   20d36:	f7ff fa0f 	bl	20158 <ble_hs_misc_conn_chan_find_reqd>
    master = conn->bhc_flags & BLE_HS_CONN_F_MASTER;
   20d3a:	9b01      	ldr	r3, [sp, #4]
   20d3c:	f893 4028 	ldrb.w	r4, [r3, #40]	; 0x28
    ble_hs_unlock();
   20d40:	f7fd fbf4 	bl	1e52c <ble_hs_unlock>
    if (master) {
   20d44:	f014 0f01 	tst.w	r4, #1
   20d48:	d12d      	bne.n	20da6 <ble_l2cap_sig_update+0x92>
    proc = ble_l2cap_sig_proc_alloc();
   20d4a:	f7ff fec3 	bl	20ad4 <ble_l2cap_sig_proc_alloc>
    if (proc == NULL) {
   20d4e:	4604      	mov	r4, r0
   20d50:	b1e8      	cbz	r0, 20d8e <ble_l2cap_sig_update+0x7a>
    proc->op = BLE_L2CAP_SIG_PROC_OP_UPDATE;
   20d52:	2300      	movs	r3, #0
   20d54:	7283      	strb	r3, [r0, #10]
    proc->id = ble_l2cap_sig_next_id();
   20d56:	f7ff fe3b 	bl	209d0 <ble_l2cap_sig_next_id>
   20d5a:	4601      	mov	r1, r0
   20d5c:	72e0      	strb	r0, [r4, #11]
    proc->conn_handle = conn_handle;
   20d5e:	8125      	strh	r5, [r4, #8]
    proc->update.cb = cb;
   20d60:	f8c4 800c 	str.w	r8, [r4, #12]
    proc->update.cb_arg = cb_arg;
   20d64:	6127      	str	r7, [r4, #16]
    req = ble_l2cap_sig_cmd_get(BLE_L2CAP_SIG_OP_UPDATE_REQ, proc->id,
   20d66:	ab03      	add	r3, sp, #12
   20d68:	2208      	movs	r2, #8
   20d6a:	2012      	movs	r0, #18
   20d6c:	f000 f8b0 	bl	20ed0 <ble_l2cap_sig_cmd_get>
    if (!req) {
   20d70:	b198      	cbz	r0, 20d9a <ble_l2cap_sig_update+0x86>
    req->itvl_min = htole16(params->itvl_min);
   20d72:	8832      	ldrh	r2, [r6, #0]
   20d74:	8002      	strh	r2, [r0, #0]
    req->itvl_max = htole16(params->itvl_max);
   20d76:	8872      	ldrh	r2, [r6, #2]
   20d78:	8042      	strh	r2, [r0, #2]
    req->slave_latency = htole16(params->slave_latency);
   20d7a:	88b2      	ldrh	r2, [r6, #4]
   20d7c:	8082      	strh	r2, [r0, #4]
    req->timeout_multiplier = htole16(params->timeout_multiplier);
   20d7e:	88f2      	ldrh	r2, [r6, #6]
   20d80:	80c2      	strh	r2, [r0, #6]
    rc = ble_l2cap_sig_tx(conn_handle, txom);
   20d82:	9903      	ldr	r1, [sp, #12]
   20d84:	4628      	mov	r0, r5
   20d86:	f000 f885 	bl	20e94 <ble_l2cap_sig_tx>
   20d8a:	4605      	mov	r5, r0
   20d8c:	e00d      	b.n	20daa <ble_l2cap_sig_update+0x96>
        STATS_INC(ble_l2cap_stats, update_fail);
   20d8e:	4a0b      	ldr	r2, [pc, #44]	; (20dbc <ble_l2cap_sig_update+0xa8>)
   20d90:	69d3      	ldr	r3, [r2, #28]
   20d92:	3301      	adds	r3, #1
   20d94:	61d3      	str	r3, [r2, #28]
        rc = BLE_HS_ENOMEM;
   20d96:	2506      	movs	r5, #6
        goto done;
   20d98:	e007      	b.n	20daa <ble_l2cap_sig_update+0x96>
        STATS_INC(ble_l2cap_stats, update_fail);
   20d9a:	4a08      	ldr	r2, [pc, #32]	; (20dbc <ble_l2cap_sig_update+0xa8>)
   20d9c:	69d3      	ldr	r3, [r2, #28]
   20d9e:	3301      	adds	r3, #1
   20da0:	61d3      	str	r3, [r2, #28]
        rc = BLE_HS_ENOMEM;
   20da2:	2506      	movs	r5, #6
        goto done;
   20da4:	e001      	b.n	20daa <ble_l2cap_sig_update+0x96>
        rc = BLE_HS_EINVAL;
   20da6:	2503      	movs	r5, #3
    proc = NULL;
   20da8:	2400      	movs	r4, #0
    ble_l2cap_sig_process_status(proc, rc);
   20daa:	4629      	mov	r1, r5
   20dac:	4620      	mov	r0, r4
   20dae:	f7ff fee3 	bl	20b78 <ble_l2cap_sig_process_status>
}
   20db2:	4628      	mov	r0, r5
   20db4:	b004      	add	sp, #16
   20db6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   20dba:	bf00      	nop
   20dbc:	20004678 	.word	0x20004678

00020dc0 <ble_l2cap_sig_create_chan>:
{
   20dc0:	b508      	push	{r3, lr}
    chan = ble_l2cap_chan_alloc(conn_handle);
   20dc2:	f7ff fcc3 	bl	2074c <ble_l2cap_chan_alloc>
    if (chan == NULL) {
   20dc6:	4603      	mov	r3, r0
   20dc8:	b130      	cbz	r0, 20dd8 <ble_l2cap_sig_create_chan+0x18>
    chan->scid = BLE_L2CAP_CID_SIG;
   20dca:	2205      	movs	r2, #5
   20dcc:	8102      	strh	r2, [r0, #8]
    chan->dcid = BLE_L2CAP_CID_SIG;
   20dce:	80c2      	strh	r2, [r0, #6]
    chan->my_mtu = BLE_L2CAP_SIG_MTU;
   20dd0:	2264      	movs	r2, #100	; 0x64
   20dd2:	8142      	strh	r2, [r0, #10]
    chan->rx_fn = ble_l2cap_sig_rx;
   20dd4:	4a01      	ldr	r2, [pc, #4]	; (20ddc <ble_l2cap_sig_create_chan+0x1c>)
   20dd6:	6182      	str	r2, [r0, #24]
}
   20dd8:	4618      	mov	r0, r3
   20dda:	bd08      	pop	{r3, pc}
   20ddc:	00020bf1 	.word	0x00020bf1

00020de0 <ble_l2cap_sig_conn_broken>:

void
ble_l2cap_sig_conn_broken(uint16_t conn_handle, int reason)
{
   20de0:	b538      	push	{r3, r4, r5, lr}
   20de2:	460d      	mov	r5, r1
    struct ble_l2cap_sig_proc *proc;

    /* Report a failure for each timed out procedure. */
    while ((proc = STAILQ_FIRST(&ble_l2cap_sig_procs)) != NULL) {
   20de4:	e007      	b.n	20df6 <ble_l2cap_sig_conn_broken+0x16>
            break;
#endif
#endif
            }

            STAILQ_REMOVE_HEAD(&ble_l2cap_sig_procs, next);
   20de6:	4a0b      	ldr	r2, [pc, #44]	; (20e14 <ble_l2cap_sig_conn_broken+0x34>)
   20de8:	6813      	ldr	r3, [r2, #0]
   20dea:	681b      	ldr	r3, [r3, #0]
   20dec:	6013      	str	r3, [r2, #0]
   20dee:	b16b      	cbz	r3, 20e0c <ble_l2cap_sig_conn_broken+0x2c>
            ble_l2cap_sig_proc_free(proc);
   20df0:	4620      	mov	r0, r4
   20df2:	f7ff feb7 	bl	20b64 <ble_l2cap_sig_proc_free>
    while ((proc = STAILQ_FIRST(&ble_l2cap_sig_procs)) != NULL) {
   20df6:	4b07      	ldr	r3, [pc, #28]	; (20e14 <ble_l2cap_sig_conn_broken+0x34>)
   20df8:	681c      	ldr	r4, [r3, #0]
   20dfa:	b154      	cbz	r4, 20e12 <ble_l2cap_sig_conn_broken+0x32>
        switch(proc->op) {
   20dfc:	7aa3      	ldrb	r3, [r4, #10]
   20dfe:	2b00      	cmp	r3, #0
   20e00:	d1f1      	bne.n	20de6 <ble_l2cap_sig_conn_broken+0x6>
                ble_l2cap_sig_update_call_cb(proc, reason);
   20e02:	4629      	mov	r1, r5
   20e04:	4620      	mov	r0, r4
   20e06:	f7ff fe13 	bl	20a30 <ble_l2cap_sig_update_call_cb>
                break;
   20e0a:	e7ec      	b.n	20de6 <ble_l2cap_sig_conn_broken+0x6>
            STAILQ_REMOVE_HEAD(&ble_l2cap_sig_procs, next);
   20e0c:	4613      	mov	r3, r2
   20e0e:	605a      	str	r2, [r3, #4]
   20e10:	e7ee      	b.n	20df0 <ble_l2cap_sig_conn_broken+0x10>
    }

}
   20e12:	bd38      	pop	{r3, r4, r5, pc}
   20e14:	20003078 	.word	0x20003078

00020e18 <ble_l2cap_sig_timer>:
 * @return                      The number of ticks until this function should
 *                                  be called again.
 */
int32_t
ble_l2cap_sig_timer(void)
{
   20e18:	b530      	push	{r4, r5, lr}
   20e1a:	b083      	sub	sp, #12

    /* Remove timed-out procedures from the main list and insert them into a
     * temporary list.  This function also calculates the number of ticks until
     * the next expiration will occur.
     */
    ticks_until_exp = ble_l2cap_sig_extract_expired(&temp_list);
   20e1c:	4668      	mov	r0, sp
   20e1e:	f7ff fe73 	bl	20b08 <ble_l2cap_sig_extract_expired>
   20e22:	4605      	mov	r5, r0

    /* Report a failure for each timed out procedure. */
    while ((proc = STAILQ_FIRST(&temp_list)) != NULL) {
   20e24:	e006      	b.n	20e34 <ble_l2cap_sig_timer+0x1c>
                ble_l2cap_sig_coc_disconnect_cb(proc, BLE_HS_ETIMEOUT);
            break;
#endif
        }

        STAILQ_REMOVE_HEAD(&temp_list, next);
   20e26:	9b00      	ldr	r3, [sp, #0]
   20e28:	681b      	ldr	r3, [r3, #0]
   20e2a:	9300      	str	r3, [sp, #0]
   20e2c:	b183      	cbz	r3, 20e50 <ble_l2cap_sig_timer+0x38>
        ble_l2cap_sig_proc_free(proc);
   20e2e:	4620      	mov	r0, r4
   20e30:	f7ff fe98 	bl	20b64 <ble_l2cap_sig_proc_free>
    while ((proc = STAILQ_FIRST(&temp_list)) != NULL) {
   20e34:	9c00      	ldr	r4, [sp, #0]
   20e36:	b174      	cbz	r4, 20e56 <ble_l2cap_sig_timer+0x3e>
        STATS_INC(ble_l2cap_stats, proc_timeout);
   20e38:	4a08      	ldr	r2, [pc, #32]	; (20e5c <ble_l2cap_sig_timer+0x44>)
   20e3a:	6a13      	ldr	r3, [r2, #32]
   20e3c:	3301      	adds	r3, #1
   20e3e:	6213      	str	r3, [r2, #32]
        switch(proc->op) {
   20e40:	7aa3      	ldrb	r3, [r4, #10]
   20e42:	2b00      	cmp	r3, #0
   20e44:	d1ef      	bne.n	20e26 <ble_l2cap_sig_timer+0xe>
                ble_l2cap_sig_update_call_cb(proc, BLE_HS_ETIMEOUT);
   20e46:	210d      	movs	r1, #13
   20e48:	4620      	mov	r0, r4
   20e4a:	f7ff fdf1 	bl	20a30 <ble_l2cap_sig_update_call_cb>
                break;
   20e4e:	e7ea      	b.n	20e26 <ble_l2cap_sig_timer+0xe>
        STAILQ_REMOVE_HEAD(&temp_list, next);
   20e50:	f8cd d004 	str.w	sp, [sp, #4]
   20e54:	e7eb      	b.n	20e2e <ble_l2cap_sig_timer+0x16>
    }

    return ticks_until_exp;
}
   20e56:	4628      	mov	r0, r5
   20e58:	b003      	add	sp, #12
   20e5a:	bd30      	pop	{r4, r5, pc}
   20e5c:	20004678 	.word	0x20004678

00020e60 <ble_l2cap_sig_init>:

int
ble_l2cap_sig_init(void)
{
   20e60:	b500      	push	{lr}
   20e62:	b083      	sub	sp, #12
    int rc;

    STAILQ_INIT(&ble_l2cap_sig_procs);
   20e64:	4b07      	ldr	r3, [pc, #28]	; (20e84 <ble_l2cap_sig_init+0x24>)
   20e66:	2200      	movs	r2, #0
   20e68:	601a      	str	r2, [r3, #0]
   20e6a:	605b      	str	r3, [r3, #4]

    rc = os_mempool_init(&ble_l2cap_sig_proc_pool,
   20e6c:	4b06      	ldr	r3, [pc, #24]	; (20e88 <ble_l2cap_sig_init+0x28>)
   20e6e:	9300      	str	r3, [sp, #0]
   20e70:	4b06      	ldr	r3, [pc, #24]	; (20e8c <ble_l2cap_sig_init+0x2c>)
   20e72:	2214      	movs	r2, #20
   20e74:	2101      	movs	r1, #1
   20e76:	4806      	ldr	r0, [pc, #24]	; (20e90 <ble_l2cap_sig_init+0x30>)
   20e78:	f7ec f816 	bl	cea8 <os_mempool_init>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   20e7c:	b003      	add	sp, #12
   20e7e:	f85d fb04 	ldr.w	pc, [sp], #4
   20e82:	bf00      	nop
   20e84:	20003078 	.word	0x20003078
   20e88:	0002b71c 	.word	0x0002b71c
   20e8c:	20003048 	.word	0x20003048
   20e90:	2000305c 	.word	0x2000305c

00020e94 <ble_l2cap_sig_tx>:
#include <string.h>
#include "ble_hs_priv.h"

int
ble_l2cap_sig_tx(uint16_t conn_handle, struct os_mbuf *txom)
{
   20e94:	b530      	push	{r4, r5, lr}
   20e96:	b083      	sub	sp, #12
   20e98:	4605      	mov	r5, r0
   20e9a:	460c      	mov	r4, r1
    struct ble_l2cap_chan *chan;
    struct ble_hs_conn *conn;
    int rc;

    ble_hs_lock();
   20e9c:	f7fd fb42 	bl	1e524 <ble_hs_lock>
    ble_hs_misc_conn_chan_find_reqd(conn_handle, BLE_L2CAP_CID_SIG,
   20ea0:	ab01      	add	r3, sp, #4
   20ea2:	466a      	mov	r2, sp
   20ea4:	2105      	movs	r1, #5
   20ea6:	4628      	mov	r0, r5
   20ea8:	f7ff f956 	bl	20158 <ble_hs_misc_conn_chan_find_reqd>
                                    &conn, &chan);
    rc = ble_l2cap_tx(conn, chan, txom);
   20eac:	4622      	mov	r2, r4
   20eae:	9901      	ldr	r1, [sp, #4]
   20eb0:	9800      	ldr	r0, [sp, #0]
   20eb2:	f7ff fd3e 	bl	20932 <ble_l2cap_tx>
   20eb6:	4604      	mov	r4, r0
    ble_hs_unlock();
   20eb8:	f7fd fb38 	bl	1e52c <ble_hs_unlock>

    return rc;
}
   20ebc:	4620      	mov	r0, r4
   20ebe:	b003      	add	sp, #12
   20ec0:	bd30      	pop	{r4, r5, pc}

00020ec2 <ble_l2cap_sig_hdr_parse>:
{
    struct ble_l2cap_sig_hdr *src = payload;

    BLE_HS_DBG_ASSERT(len >= BLE_L2CAP_SIG_HDR_SZ);

    dst->op = src->op;
   20ec2:	7803      	ldrb	r3, [r0, #0]
   20ec4:	7013      	strb	r3, [r2, #0]
    dst->identifier = src->identifier;
   20ec6:	7843      	ldrb	r3, [r0, #1]
   20ec8:	7053      	strb	r3, [r2, #1]
    dst->length = le16toh(src->length);
   20eca:	8843      	ldrh	r3, [r0, #2]
   20ecc:	8053      	strh	r3, [r2, #2]
}
   20ece:	4770      	bx	lr

00020ed0 <ble_l2cap_sig_cmd_get>:
}

void *
ble_l2cap_sig_cmd_get(uint8_t opcode, uint8_t id, uint16_t len,
                      struct os_mbuf **txom)
{
   20ed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20ed4:	4680      	mov	r8, r0
   20ed6:	460f      	mov	r7, r1
   20ed8:	4616      	mov	r6, r2
   20eda:	461d      	mov	r5, r3
    struct ble_l2cap_sig_hdr *hdr;

    *txom = ble_hs_mbuf_l2cap_pkt();
   20edc:	f7ff f8da 	bl	20094 <ble_hs_mbuf_l2cap_pkt>
   20ee0:	6028      	str	r0, [r5, #0]
    if (*txom == NULL) {
   20ee2:	b198      	cbz	r0, 20f0c <ble_l2cap_sig_cmd_get+0x3c>
        return NULL;
    }

    if (os_mbuf_extend(*txom, sizeof(*hdr) + len) == NULL) {
   20ee4:	1d31      	adds	r1, r6, #4
   20ee6:	b289      	uxth	r1, r1
   20ee8:	f7ed f81b 	bl	df22 <os_mbuf_extend>
   20eec:	4604      	mov	r4, r0
   20eee:	b148      	cbz	r0, 20f04 <ble_l2cap_sig_cmd_get+0x34>
        os_mbuf_free_chain(*txom);
        return NULL;
    }

    hdr = (struct ble_l2cap_sig_hdr *)(*txom)->om_data;
   20ef0:	682b      	ldr	r3, [r5, #0]
   20ef2:	681c      	ldr	r4, [r3, #0]

    hdr->op = opcode;
   20ef4:	f884 8000 	strb.w	r8, [r4]
    hdr->identifier = id;
   20ef8:	7067      	strb	r7, [r4, #1]
    hdr->length = htole16(len);
   20efa:	8066      	strh	r6, [r4, #2]

    return hdr->data;
   20efc:	3404      	adds	r4, #4
}
   20efe:	4620      	mov	r0, r4
   20f00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        os_mbuf_free_chain(*txom);
   20f04:	6828      	ldr	r0, [r5, #0]
   20f06:	f7ec fd86 	bl	da16 <os_mbuf_free_chain>
        return NULL;
   20f0a:	e7f8      	b.n	20efe <ble_l2cap_sig_cmd_get+0x2e>
        return NULL;
   20f0c:	2400      	movs	r4, #0
   20f0e:	e7f6      	b.n	20efe <ble_l2cap_sig_cmd_get+0x2e>

00020f10 <ble_l2cap_sig_reject_tx>:
{
   20f10:	b5f0      	push	{r4, r5, r6, r7, lr}
   20f12:	b083      	sub	sp, #12
   20f14:	4605      	mov	r5, r0
   20f16:	4617      	mov	r7, r2
   20f18:	461e      	mov	r6, r3
   20f1a:	9c08      	ldr	r4, [sp, #32]
    cmd = ble_l2cap_sig_cmd_get(BLE_L2CAP_SIG_OP_REJECT, id,
   20f1c:	1ca2      	adds	r2, r4, #2
   20f1e:	ab01      	add	r3, sp, #4
   20f20:	b292      	uxth	r2, r2
   20f22:	2001      	movs	r0, #1
   20f24:	f7ff ffd4 	bl	20ed0 <ble_l2cap_sig_cmd_get>
    if (!cmd) {
   20f28:	b178      	cbz	r0, 20f4a <ble_l2cap_sig_reject_tx+0x3a>
    cmd->reason = htole16(reason);
   20f2a:	f820 7b02 	strh.w	r7, [r0], #2
    memcpy(cmd->data, data, data_len);
   20f2e:	4622      	mov	r2, r4
   20f30:	4631      	mov	r1, r6
   20f32:	f7ed fa9d 	bl	e470 <memcpy>
    STATS_INC(ble_l2cap_stats, sig_rx);
   20f36:	4a06      	ldr	r2, [pc, #24]	; (20f50 <ble_l2cap_sig_reject_tx+0x40>)
   20f38:	6a93      	ldr	r3, [r2, #40]	; 0x28
   20f3a:	3301      	adds	r3, #1
   20f3c:	6293      	str	r3, [r2, #40]	; 0x28
    return ble_l2cap_sig_tx(conn_handle, txom);
   20f3e:	9901      	ldr	r1, [sp, #4]
   20f40:	4628      	mov	r0, r5
   20f42:	f7ff ffa7 	bl	20e94 <ble_l2cap_sig_tx>
}
   20f46:	b003      	add	sp, #12
   20f48:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return BLE_HS_ENOMEM;
   20f4a:	2006      	movs	r0, #6
   20f4c:	e7fb      	b.n	20f46 <ble_l2cap_sig_reject_tx+0x36>
   20f4e:	bf00      	nop
   20f50:	20004678 	.word	0x20004678

00020f54 <ble_l2cap_sig_reject_invalid_cid_tx>:
{
   20f54:	b500      	push	{lr}
   20f56:	b085      	sub	sp, #20
    } data = {
   20f58:	f8ad 300c 	strh.w	r3, [sp, #12]
   20f5c:	f8ad 200e 	strh.w	r2, [sp, #14]
    return ble_l2cap_sig_reject_tx(conn_handle, id,
   20f60:	2304      	movs	r3, #4
   20f62:	9300      	str	r3, [sp, #0]
   20f64:	ab03      	add	r3, sp, #12
   20f66:	2202      	movs	r2, #2
   20f68:	f7ff ffd2 	bl	20f10 <ble_l2cap_sig_reject_tx>
}
   20f6c:	b005      	add	sp, #20
   20f6e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00020f74 <ble_sm_dispatch_get>:
}

static ble_sm_rx_fn *
ble_sm_dispatch_get(uint8_t op)
{
    if (op >= sizeof ble_sm_dispatch / sizeof ble_sm_dispatch[0]) {
   20f74:	280e      	cmp	r0, #14
   20f76:	d803      	bhi.n	20f80 <ble_sm_dispatch_get+0xc>
        return NULL;
    }

    return ble_sm_dispatch[op];
   20f78:	4b02      	ldr	r3, [pc, #8]	; (20f84 <ble_sm_dispatch_get+0x10>)
   20f7a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   20f7e:	4770      	bx	lr
        return NULL;
   20f80:	2000      	movs	r0, #0
}
   20f82:	4770      	bx	lr
   20f84:	0002b734 	.word	0x0002b734

00020f88 <ble_sm_proc_remove>:

static void
ble_sm_proc_remove(struct ble_sm_proc *proc,
                         struct ble_sm_proc *prev)
{
    if (prev == NULL) {
   20f88:	b121      	cbz	r1, 20f94 <ble_sm_proc_remove+0xc>
        BLE_HS_DBG_ASSERT(STAILQ_FIRST(&ble_sm_procs) == proc);
        STAILQ_REMOVE_HEAD(&ble_sm_procs, next);
    } else {
        BLE_HS_DBG_ASSERT(STAILQ_NEXT(prev, next) == proc);
        STAILQ_REMOVE_AFTER(&ble_sm_procs, prev, next);
   20f8a:	680a      	ldr	r2, [r1, #0]
   20f8c:	6812      	ldr	r2, [r2, #0]
   20f8e:	600a      	str	r2, [r1, #0]
   20f90:	b14a      	cbz	r2, 20fa6 <ble_sm_proc_remove+0x1e>
    }

    ble_sm_dbg_assert_no_cycles();
}
   20f92:	4770      	bx	lr
        STAILQ_REMOVE_HEAD(&ble_sm_procs, next);
   20f94:	4a05      	ldr	r2, [pc, #20]	; (20fac <ble_sm_proc_remove+0x24>)
   20f96:	6813      	ldr	r3, [r2, #0]
   20f98:	681b      	ldr	r3, [r3, #0]
   20f9a:	6013      	str	r3, [r2, #0]
   20f9c:	2b00      	cmp	r3, #0
   20f9e:	d1f8      	bne.n	20f92 <ble_sm_proc_remove+0xa>
   20fa0:	4613      	mov	r3, r2
   20fa2:	605a      	str	r2, [r3, #4]
   20fa4:	4770      	bx	lr
        STAILQ_REMOVE_AFTER(&ble_sm_procs, prev, next);
   20fa6:	4a01      	ldr	r2, [pc, #4]	; (20fac <ble_sm_proc_remove+0x24>)
   20fa8:	6051      	str	r1, [r2, #4]
}
   20faa:	e7f2      	b.n	20f92 <ble_sm_proc_remove+0xa>
   20fac:	2000321c 	.word	0x2000321c

00020fb0 <ble_sm_proc_matches>:
}

static int
ble_sm_proc_matches(struct ble_sm_proc *proc, uint16_t conn_handle,
                    uint8_t state, int is_initiator)
{
   20fb0:	b410      	push	{r4}
    int proc_is_initiator;

    if (conn_handle != proc->conn_handle) {
   20fb2:	8944      	ldrh	r4, [r0, #10]
   20fb4:	428c      	cmp	r4, r1
   20fb6:	d002      	beq.n	20fbe <ble_sm_proc_matches+0xe>
        return 0;
   20fb8:	2000      	movs	r0, #0
    if (is_initiator != -1 && is_initiator != proc_is_initiator) {
        return 0;
    }

    return 1;
}
   20fba:	bc10      	pop	{r4}
   20fbc:	4770      	bx	lr
    if (state != BLE_SM_PROC_STATE_NONE && state != proc->state) {
   20fbe:	2aff      	cmp	r2, #255	; 0xff
   20fc0:	d004      	beq.n	20fcc <ble_sm_proc_matches+0x1c>
   20fc2:	7b41      	ldrb	r1, [r0, #13]
   20fc4:	4291      	cmp	r1, r2
   20fc6:	d001      	beq.n	20fcc <ble_sm_proc_matches+0x1c>
        return 0;
   20fc8:	2000      	movs	r0, #0
   20fca:	e7f6      	b.n	20fba <ble_sm_proc_matches+0xa>
    proc_is_initiator = !!(proc->flags & BLE_SM_PROC_F_INITIATOR);
   20fcc:	7a02      	ldrb	r2, [r0, #8]
   20fce:	f002 0201 	and.w	r2, r2, #1
    if (is_initiator != -1 && is_initiator != proc_is_initiator) {
   20fd2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   20fd6:	d005      	beq.n	20fe4 <ble_sm_proc_matches+0x34>
   20fd8:	429a      	cmp	r2, r3
   20fda:	d001      	beq.n	20fe0 <ble_sm_proc_matches+0x30>
        return 0;
   20fdc:	2000      	movs	r0, #0
   20fde:	e7ec      	b.n	20fba <ble_sm_proc_matches+0xa>
    return 1;
   20fe0:	2001      	movs	r0, #1
   20fe2:	e7ea      	b.n	20fba <ble_sm_proc_matches+0xa>
   20fe4:	2001      	movs	r0, #1
   20fe6:	e7e8      	b.n	20fba <ble_sm_proc_matches+0xa>

00020fe8 <ble_sm_insert>:
    STAILQ_FOREACH(cur, &ble_sm_procs, next) {
        BLE_HS_DBG_ASSERT(cur != proc);
    }
#endif

    STAILQ_INSERT_HEAD(&ble_sm_procs, proc, next);
   20fe8:	4b04      	ldr	r3, [pc, #16]	; (20ffc <ble_sm_insert+0x14>)
   20fea:	681b      	ldr	r3, [r3, #0]
   20fec:	6003      	str	r3, [r0, #0]
   20fee:	b113      	cbz	r3, 20ff6 <ble_sm_insert+0xe>
   20ff0:	4b02      	ldr	r3, [pc, #8]	; (20ffc <ble_sm_insert+0x14>)
   20ff2:	6018      	str	r0, [r3, #0]
}
   20ff4:	4770      	bx	lr
    STAILQ_INSERT_HEAD(&ble_sm_procs, proc, next);
   20ff6:	4b01      	ldr	r3, [pc, #4]	; (20ffc <ble_sm_insert+0x14>)
   20ff8:	6058      	str	r0, [r3, #4]
   20ffa:	e7f9      	b.n	20ff0 <ble_sm_insert+0x8>
   20ffc:	2000321c 	.word	0x2000321c

00021000 <ble_sm_rx_noop>:

static void
ble_sm_rx_noop(uint16_t conn_handle, struct os_mbuf **om,
               struct ble_sm_result *res)
{
    res->app_status = BLE_HS_SM_US_ERR(BLE_SM_ERR_CMD_NOT_SUPP);
   21000:	f240 4307 	movw	r3, #1031	; 0x407
   21004:	6013      	str	r3, [r2, #0]
    res->sm_err = BLE_SM_ERR_CMD_NOT_SUPP;
   21006:	2307      	movs	r3, #7
   21008:	7113      	strb	r3, [r2, #4]
}
   2100a:	4770      	bx	lr

0002100c <ble_sm_build_authreq>:

static uint8_t
ble_sm_build_authreq(void)
{
    return ble_hs_cfg.sm_bonding << 0  |
   2100c:	4b08      	ldr	r3, [pc, #32]	; (21030 <ble_sm_build_authreq+0x24>)
   2100e:	7a5b      	ldrb	r3, [r3, #9]
   21010:	f3c3 0040 	ubfx	r0, r3, #1, #1
           ble_hs_cfg.sm_mitm << 2     |
   21014:	f3c3 0280 	ubfx	r2, r3, #2, #1
    return ble_hs_cfg.sm_bonding << 0  |
   21018:	ea40 0082 	orr.w	r0, r0, r2, lsl #2
           ble_hs_cfg.sm_sc << 3       |
   2101c:	f3c3 02c0 	ubfx	r2, r3, #3, #1
           ble_hs_cfg.sm_mitm << 2     |
   21020:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
           ble_hs_cfg.sm_keypress << 4;
   21024:	f3c3 1300 	ubfx	r3, r3, #4, #1
}
   21028:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
   2102c:	4770      	bx	lr
   2102e:	bf00      	nop
   21030:	2000015c 	.word	0x2000015c

00021034 <ble_sm_key_dist>:
{
    struct ble_sm_pair_cmd *pair_rsp;

    pair_rsp = (struct ble_sm_pair_cmd *) &proc->pair_rsp[1];

    *out_init_key_dist = pair_rsp->init_key_dist;
   21034:	7f03      	ldrb	r3, [r0, #28]
   21036:	700b      	strb	r3, [r1, #0]
    *out_resp_key_dist = pair_rsp->resp_key_dist;
   21038:	7f43      	ldrb	r3, [r0, #29]
   2103a:	7013      	strb	r3, [r2, #0]

    /* Encryption info and master ID are only sent in legacy pairing. */
    if (proc->flags & BLE_SM_PROC_F_SC) {
   2103c:	7a03      	ldrb	r3, [r0, #8]
   2103e:	f013 0f10 	tst.w	r3, #16
   21042:	d007      	beq.n	21054 <ble_sm_key_dist+0x20>
        *out_init_key_dist &= ~BLE_SM_PAIR_KEY_DIST_ENC;
   21044:	780b      	ldrb	r3, [r1, #0]
   21046:	f023 0301 	bic.w	r3, r3, #1
   2104a:	700b      	strb	r3, [r1, #0]
        *out_resp_key_dist &= ~BLE_SM_PAIR_KEY_DIST_ENC;
   2104c:	7813      	ldrb	r3, [r2, #0]
   2104e:	f023 0301 	bic.w	r3, r3, #1
   21052:	7013      	strb	r3, [r2, #0]
    }
}
   21054:	4770      	bx	lr

00021056 <ble_sm_state_after_pair>:
 *****************************************************************************/

static uint8_t
ble_sm_state_after_pair(struct ble_sm_proc *proc)
{
    if (proc->flags & BLE_SM_PROC_F_SC) {
   21056:	7a03      	ldrb	r3, [r0, #8]
   21058:	f013 0f10 	tst.w	r3, #16
   2105c:	d101      	bne.n	21062 <ble_sm_state_after_pair+0xc>
        return BLE_SM_PROC_STATE_PUBLIC_KEY;
    } else {
        return BLE_SM_PROC_STATE_CONFIRM;
   2105e:	2001      	movs	r0, #1
    }
}
   21060:	4770      	bx	lr
        return BLE_SM_PROC_STATE_PUBLIC_KEY;
   21062:	2009      	movs	r0, #9
   21064:	4770      	bx	lr
	...

00021068 <ble_sm_pair_base_fill>:
    BLE_HS_DBG_ASSERT_EVAL(rc == 0);
}

static void
ble_sm_pair_base_fill(struct ble_sm_pair_cmd *cmd)
{
   21068:	b510      	push	{r4, lr}
   2106a:	4604      	mov	r4, r0
    cmd->io_cap = ble_hs_cfg.sm_io_cap;
   2106c:	4b06      	ldr	r3, [pc, #24]	; (21088 <ble_sm_pair_base_fill+0x20>)
   2106e:	7a1a      	ldrb	r2, [r3, #8]
   21070:	7002      	strb	r2, [r0, #0]
    cmd->oob_data_flag = ble_hs_cfg.sm_oob_data_flag;
   21072:	7a5b      	ldrb	r3, [r3, #9]
   21074:	f3c3 0300 	ubfx	r3, r3, #0, #1
   21078:	7043      	strb	r3, [r0, #1]
    cmd->authreq = ble_sm_build_authreq();
   2107a:	f7ff ffc7 	bl	2100c <ble_sm_build_authreq>
   2107e:	70a0      	strb	r0, [r4, #2]
    // MEL: modify proposed key size
    // cmd->max_enc_key_size = BLE_SM_PAIR_KEY_SZ_MAX;
    cmd->max_enc_key_size = 15;
   21080:	230f      	movs	r3, #15
   21082:	70e3      	strb	r3, [r4, #3]
}
   21084:	bd10      	pop	{r4, pc}
   21086:	bf00      	nop
   21088:	2000015c 	.word	0x2000015c

0002108c <ble_sm_pair_req_fill>:

static void
ble_sm_pair_req_fill(struct ble_sm_proc *proc)
{
   2108c:	b510      	push	{r4, lr}
   2108e:	4604      	mov	r4, r0
    struct ble_sm_pair_cmd *req;

    req = (void *)(proc->pair_req + 1);

    proc->pair_req[0] = BLE_SM_OP_PAIR_REQ;
   21090:	2301      	movs	r3, #1
   21092:	7403      	strb	r3, [r0, #16]
    ble_sm_pair_base_fill(req);
   21094:	3011      	adds	r0, #17
   21096:	f7ff ffe7 	bl	21068 <ble_sm_pair_base_fill>
    req->init_key_dist = ble_hs_cfg.sm_our_key_dist;
   2109a:	4b03      	ldr	r3, [pc, #12]	; (210a8 <ble_sm_pair_req_fill+0x1c>)
   2109c:	7a9a      	ldrb	r2, [r3, #10]
   2109e:	7562      	strb	r2, [r4, #21]
    req->resp_key_dist = ble_hs_cfg.sm_their_key_dist;
   210a0:	7adb      	ldrb	r3, [r3, #11]
   210a2:	75a3      	strb	r3, [r4, #22]
}
   210a4:	bd10      	pop	{r4, pc}
   210a6:	bf00      	nop
   210a8:	2000015c 	.word	0x2000015c

000210ac <ble_sm_pair_rsp_fill>:

static void
ble_sm_pair_rsp_fill(struct ble_sm_proc *proc)
{
   210ac:	b510      	push	{r4, lr}
   210ae:	4604      	mov	r4, r0
    struct ble_sm_pair_cmd *rsp;

    req = (void *)(proc->pair_req + 1);
    rsp = (void *)(proc->pair_rsp + 1);

    proc->pair_rsp[0] = BLE_SM_OP_PAIR_RSP;
   210b0:	2302      	movs	r3, #2
   210b2:	75c3      	strb	r3, [r0, #23]
    ble_sm_pair_base_fill(rsp);
   210b4:	3018      	adds	r0, #24
   210b6:	f7ff ffd7 	bl	21068 <ble_sm_pair_base_fill>

    /* The response's key distribution flags field is the intersection of
     * the peer's preferences and our capabilities.
     */
    rsp->init_key_dist = req->init_key_dist &
   210ba:	7d63      	ldrb	r3, [r4, #21]
                         ble_hs_cfg.sm_their_key_dist;
   210bc:	4a04      	ldr	r2, [pc, #16]	; (210d0 <ble_sm_pair_rsp_fill+0x24>)
   210be:	7ad1      	ldrb	r1, [r2, #11]
    rsp->init_key_dist = req->init_key_dist &
   210c0:	400b      	ands	r3, r1
   210c2:	7723      	strb	r3, [r4, #28]
    rsp->resp_key_dist = req->resp_key_dist &
   210c4:	7da3      	ldrb	r3, [r4, #22]
                         ble_hs_cfg.sm_our_key_dist;
   210c6:	7a92      	ldrb	r2, [r2, #10]
    rsp->resp_key_dist = req->resp_key_dist &
   210c8:	4013      	ands	r3, r2
   210ca:	7763      	strb	r3, [r4, #29]
}
   210cc:	bd10      	pop	{r4, pc}
   210ce:	bf00      	nop
   210d0:	2000015c 	.word	0x2000015c

000210d4 <ble_sm_verify_auth_requirements>:
{
    /* For now we check only SC only mode. I.e.: when remote indicates
     * to not support SC pairing, let us make sure legacy pairing is supported
     * on our side. If not, we can fail right away.
     */
    if (!(authreq & BLE_SM_PAIR_AUTHREQ_SC)) {
   210d4:	f010 0f08 	tst.w	r0, #8
   210d8:	d001      	beq.n	210de <ble_sm_verify_auth_requirements+0xa>
        if (MYNEWT_VAL(BLE_SM_LEGACY) == 0) {
            return false;
        }
    }
    return true;
   210da:	2001      	movs	r0, #1
}
   210dc:	4770      	bx	lr
            return false;
   210de:	2000      	movs	r0, #0
   210e0:	4770      	bx	lr

000210e2 <ble_sm_gen_ediv>:
{
   210e2:	b508      	push	{r3, lr}
    rc = ble_hs_hci_util_rand(&master_id->ediv, sizeof master_id->ediv);
   210e4:	2102      	movs	r1, #2
   210e6:	f7fe fe89 	bl	1fdfc <ble_hs_hci_util_rand>
}
   210ea:	bd08      	pop	{r3, pc}

000210ec <ble_sm_gen_master_id_rand>:
{
   210ec:	b508      	push	{r3, lr}
    rc = ble_hs_hci_util_rand(&master_id->rand_val, sizeof master_id->rand_val);
   210ee:	2108      	movs	r1, #8
   210f0:	3002      	adds	r0, #2
   210f2:	f7fe fe83 	bl	1fdfc <ble_hs_hci_util_rand>
}
   210f6:	bd08      	pop	{r3, pc}

000210f8 <ble_sm_gen_csrk>:
{
   210f8:	b508      	push	{r3, lr}
   210fa:	4608      	mov	r0, r1
    rc = ble_hs_hci_util_rand(csrk, 16);
   210fc:	2110      	movs	r1, #16
   210fe:	f7fe fe7d 	bl	1fdfc <ble_hs_hci_util_rand>
}
   21102:	bd08      	pop	{r3, pc}

00021104 <ble_sm_io_action>:
{
   21104:	b508      	push	{r3, lr}
    if (proc->flags & BLE_SM_PROC_F_SC) {
   21106:	7a03      	ldrb	r3, [r0, #8]
   21108:	f013 0f10 	tst.w	r3, #16
   2110c:	d002      	beq.n	21114 <ble_sm_io_action+0x10>
        return ble_sm_sc_io_action(proc, action);
   2110e:	f001 fce1 	bl	22ad4 <ble_sm_sc_io_action>
}
   21112:	bd08      	pop	{r3, pc}
        return ble_sm_lgcy_io_action(proc, action);
   21114:	2008      	movs	r0, #8
   21116:	e7fc      	b.n	21112 <ble_sm_io_action+0xe>

00021118 <ble_sm_pair_cfg>:
{
   21118:	b510      	push	{r4, lr}
   2111a:	b082      	sub	sp, #8
   2111c:	4604      	mov	r4, r0
    if (pair_req->authreq & BLE_SM_PAIR_AUTHREQ_SC &&
   2111e:	7cc3      	ldrb	r3, [r0, #19]
   21120:	f013 0f08 	tst.w	r3, #8
   21124:	d007      	beq.n	21136 <ble_sm_pair_cfg+0x1e>
        pair_rsp->authreq & BLE_SM_PAIR_AUTHREQ_SC) {
   21126:	7e83      	ldrb	r3, [r0, #26]
    if (pair_req->authreq & BLE_SM_PAIR_AUTHREQ_SC &&
   21128:	f013 0f08 	tst.w	r3, #8
   2112c:	d003      	beq.n	21136 <ble_sm_pair_cfg+0x1e>
        proc->flags |= BLE_SM_PROC_F_SC;
   2112e:	7a03      	ldrb	r3, [r0, #8]
   21130:	f043 0310 	orr.w	r3, r3, #16
   21134:	7203      	strb	r3, [r0, #8]
    ble_sm_key_dist(proc, &init_key_dist, &resp_key_dist);
   21136:	f10d 0206 	add.w	r2, sp, #6
   2113a:	f10d 0107 	add.w	r1, sp, #7
   2113e:	4620      	mov	r0, r4
   21140:	f7ff ff78 	bl	21034 <ble_sm_key_dist>
    if (proc->flags & BLE_SM_PROC_F_INITIATOR) {
   21144:	7a22      	ldrb	r2, [r4, #8]
   21146:	f012 0f01 	tst.w	r2, #1
   2114a:	d03b      	beq.n	211c4 <ble_sm_pair_cfg+0xac>
        rx_key_dist = resp_key_dist;
   2114c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    if (pair_req->authreq & BLE_SM_PAIR_AUTHREQ_BOND &&
   21150:	7ce1      	ldrb	r1, [r4, #19]
   21152:	f011 0f01 	tst.w	r1, #1
   21156:	d006      	beq.n	21166 <ble_sm_pair_cfg+0x4e>
        pair_rsp->authreq & BLE_SM_PAIR_AUTHREQ_BOND) {
   21158:	7ea1      	ldrb	r1, [r4, #26]
    if (pair_req->authreq & BLE_SM_PAIR_AUTHREQ_BOND &&
   2115a:	f011 0f01 	tst.w	r1, #1
   2115e:	d002      	beq.n	21166 <ble_sm_pair_cfg+0x4e>
        proc->flags |= BLE_SM_PROC_F_BONDING;
   21160:	f042 0220 	orr.w	r2, r2, #32
   21164:	7222      	strb	r2, [r4, #8]
    if (!(proc->flags & BLE_SM_PROC_F_SC) &&
   21166:	7a22      	ldrb	r2, [r4, #8]
   21168:	f012 0f10 	tst.w	r2, #16
   2116c:	d108      	bne.n	21180 <ble_sm_pair_cfg+0x68>
        (init_key_dist == 0 && resp_key_dist == 0)) {
   2116e:	f89d 1007 	ldrb.w	r1, [sp, #7]
    if (!(proc->flags & BLE_SM_PROC_F_SC) &&
   21172:	b929      	cbnz	r1, 21180 <ble_sm_pair_cfg+0x68>
        (init_key_dist == 0 && resp_key_dist == 0)) {
   21174:	f89d 1006 	ldrb.w	r1, [sp, #6]
   21178:	b911      	cbnz	r1, 21180 <ble_sm_pair_cfg+0x68>
        proc->flags &= ~BLE_SM_PROC_F_BONDING;
   2117a:	f022 0220 	bic.w	r2, r2, #32
   2117e:	7222      	strb	r2, [r4, #8]
    proc->rx_key_flags = 0;
   21180:	2200      	movs	r2, #0
   21182:	73a2      	strb	r2, [r4, #14]
    if (rx_key_dist & BLE_SM_PAIR_KEY_DIST_ENC) {
   21184:	f013 0f01 	tst.w	r3, #1
   21188:	d001      	beq.n	2118e <ble_sm_pair_cfg+0x76>
        proc->rx_key_flags |= BLE_SM_KE_F_ENC_INFO |
   2118a:	2203      	movs	r2, #3
   2118c:	73a2      	strb	r2, [r4, #14]
    if (rx_key_dist & BLE_SM_PAIR_KEY_DIST_ID) {
   2118e:	f013 0f02 	tst.w	r3, #2
   21192:	d003      	beq.n	2119c <ble_sm_pair_cfg+0x84>
        proc->rx_key_flags |= BLE_SM_KE_F_ID_INFO |
   21194:	7ba2      	ldrb	r2, [r4, #14]
   21196:	f042 020c 	orr.w	r2, r2, #12
   2119a:	73a2      	strb	r2, [r4, #14]
    if (rx_key_dist & BLE_SM_PAIR_KEY_DIST_SIGN) {
   2119c:	f013 0f04 	tst.w	r3, #4
   211a0:	d003      	beq.n	211aa <ble_sm_pair_cfg+0x92>
        proc->rx_key_flags |= BLE_SM_KE_F_SIGN_INFO;
   211a2:	7ba3      	ldrb	r3, [r4, #14]
   211a4:	f043 0310 	orr.w	r3, r3, #16
   211a8:	73a3      	strb	r3, [r4, #14]
    proc->key_size = min(pair_req->max_enc_key_size,
   211aa:	7ee3      	ldrb	r3, [r4, #27]
   211ac:	7d22      	ldrb	r2, [r4, #20]
   211ae:	4293      	cmp	r3, r2
   211b0:	bf28      	it	cs
   211b2:	4613      	movcs	r3, r2
   211b4:	73e3      	strb	r3, [r4, #15]
    rc = ble_sm_io_action(proc, &ioact);
   211b6:	f10d 0105 	add.w	r1, sp, #5
   211ba:	4620      	mov	r0, r4
   211bc:	f7ff ffa2 	bl	21104 <ble_sm_io_action>
}
   211c0:	b002      	add	sp, #8
   211c2:	bd10      	pop	{r4, pc}
        rx_key_dist = init_key_dist;
   211c4:	f89d 3007 	ldrb.w	r3, [sp, #7]
   211c8:	e7c2      	b.n	21150 <ble_sm_pair_cfg+0x38>

000211ca <ble_sm_gen_ltk>:
{
   211ca:	b570      	push	{r4, r5, r6, lr}
   211cc:	4605      	mov	r5, r0
   211ce:	460c      	mov	r4, r1
    rc = ble_hs_hci_util_rand(ltk, proc->key_size);
   211d0:	7bc1      	ldrb	r1, [r0, #15]
   211d2:	4620      	mov	r0, r4
   211d4:	f7fe fe12 	bl	1fdfc <ble_hs_hci_util_rand>
    if (rc != 0) {
   211d8:	4606      	mov	r6, r0
   211da:	b108      	cbz	r0, 211e0 <ble_sm_gen_ltk+0x16>
}
   211dc:	4630      	mov	r0, r6
   211de:	bd70      	pop	{r4, r5, r6, pc}
    memset(ltk + proc->key_size, 0, sizeof proc->ltk - proc->key_size);
   211e0:	7be8      	ldrb	r0, [r5, #15]
   211e2:	f1c0 0210 	rsb	r2, r0, #16
   211e6:	2100      	movs	r1, #0
   211e8:	4420      	add	r0, r4
   211ea:	f7ed f969 	bl	e4c0 <memset>
    return 0;
   211ee:	e7f5      	b.n	211dc <ble_sm_gen_ltk+0x12>

000211f0 <ble_sm_exec>:
{
   211f0:	b570      	push	{r4, r5, r6, lr}
   211f2:	4605      	mov	r5, r0
   211f4:	460c      	mov	r4, r1
   211f6:	4616      	mov	r6, r2
    memset(res, 0, sizeof *res);
   211f8:	2300      	movs	r3, #0
   211fa:	600b      	str	r3, [r1, #0]
   211fc:	604b      	str	r3, [r1, #4]
   211fe:	608b      	str	r3, [r1, #8]
   21200:	60cb      	str	r3, [r1, #12]
   21202:	610b      	str	r3, [r1, #16]
   21204:	614b      	str	r3, [r1, #20]
    if (!ble_hs_conn_exists(proc->conn_handle)) {
   21206:	8940      	ldrh	r0, [r0, #10]
   21208:	f7fe f846 	bl	1f298 <ble_hs_conn_exists>
   2120c:	b140      	cbz	r0, 21220 <ble_sm_exec+0x30>
        cb = ble_sm_state_dispatch[proc->state];
   2120e:	7b6a      	ldrb	r2, [r5, #13]
   21210:	4b05      	ldr	r3, [pc, #20]	; (21228 <ble_sm_exec+0x38>)
   21212:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
        cb(proc, res, arg);
   21216:	4632      	mov	r2, r6
   21218:	4621      	mov	r1, r4
   2121a:	4628      	mov	r0, r5
   2121c:	4798      	blx	r3
}
   2121e:	bd70      	pop	{r4, r5, r6, pc}
        res->app_status = BLE_HS_ENOTCONN;
   21220:	2307      	movs	r3, #7
   21222:	6023      	str	r3, [r4, #0]
   21224:	e7fb      	b.n	2121e <ble_sm_exec+0x2e>
   21226:	bf00      	nop
   21228:	0002b7ac 	.word	0x0002b7ac

0002122c <ble_sm_sec_req_exec>:
 *****************************************************************************/

static void
ble_sm_sec_req_exec(struct ble_sm_proc *proc, struct ble_sm_result *res,
                    void *arg)
{
   2122c:	b570      	push	{r4, r5, r6, lr}
   2122e:	b082      	sub	sp, #8
   21230:	4605      	mov	r5, r0
   21232:	460c      	mov	r4, r1
    struct ble_sm_sec_req *cmd;
    struct os_mbuf *txom;
    int rc;

    cmd = ble_sm_cmd_get(BLE_SM_OP_SEC_REQ, sizeof(*cmd), &txom);
   21234:	aa01      	add	r2, sp, #4
   21236:	2101      	movs	r1, #1
   21238:	200b      	movs	r0, #11
   2123a:	f001 fb6f 	bl	2291c <ble_sm_cmd_get>
    if (!cmd) {
   2123e:	b150      	cbz	r0, 21256 <ble_sm_sec_req_exec+0x2a>
   21240:	4606      	mov	r6, r0
        res->app_status = BLE_HS_ENOMEM;
        return;
    }

    cmd->authreq = ble_sm_build_authreq();
   21242:	f7ff fee3 	bl	2100c <ble_sm_build_authreq>
   21246:	7030      	strb	r0, [r6, #0]
    rc = ble_sm_tx(proc->conn_handle, txom);
   21248:	9901      	ldr	r1, [sp, #4]
   2124a:	8968      	ldrh	r0, [r5, #10]
   2124c:	f001 fb80 	bl	22950 <ble_sm_tx>
    if (rc != 0) {
   21250:	b118      	cbz	r0, 2125a <ble_sm_sec_req_exec+0x2e>
        res->app_status = rc;
   21252:	6020      	str	r0, [r4, #0]
        return;
   21254:	e001      	b.n	2125a <ble_sm_sec_req_exec+0x2e>
        res->app_status = BLE_HS_ENOMEM;
   21256:	2306      	movs	r3, #6
   21258:	6023      	str	r3, [r4, #0]
    }
}
   2125a:	b002      	add	sp, #8
   2125c:	bd70      	pop	{r4, r5, r6, pc}

0002125e <ble_sm_fill_store_value>:
{
   2125e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21262:	4606      	mov	r6, r0
   21264:	4688      	mov	r8, r1
   21266:	4617      	mov	r7, r2
   21268:	461d      	mov	r5, r3
   2126a:	9c06      	ldr	r4, [sp, #24]
    memset(value_sec, 0, sizeof *value_sec);
   2126c:	2250      	movs	r2, #80	; 0x50
   2126e:	2100      	movs	r1, #0
   21270:	4620      	mov	r0, r4
   21272:	f7ed f925 	bl	e4c0 <memset>
    value_sec->peer_addr = *peer_addr;
   21276:	6830      	ldr	r0, [r6, #0]
   21278:	6020      	str	r0, [r4, #0]
   2127a:	88b2      	ldrh	r2, [r6, #4]
   2127c:	79b3      	ldrb	r3, [r6, #6]
   2127e:	80a2      	strh	r2, [r4, #4]
   21280:	71a3      	strb	r3, [r4, #6]
    if (keys->ediv_rand_valid && keys->ltk_valid) {
   21282:	782b      	ldrb	r3, [r5, #0]
   21284:	f003 0303 	and.w	r3, r3, #3
   21288:	2b03      	cmp	r3, #3
   2128a:	d009      	beq.n	212a0 <ble_sm_fill_store_value+0x42>
    if (keys->irk_valid) {
   2128c:	782b      	ldrb	r3, [r5, #0]
   2128e:	f013 0f04 	tst.w	r3, #4
   21292:	d12e      	bne.n	212f2 <ble_sm_fill_store_value+0x94>
    if (keys->csrk_valid) {
   21294:	782b      	ldrb	r3, [r5, #0]
   21296:	f013 0f08 	tst.w	r3, #8
   2129a:	d13f      	bne.n	2131c <ble_sm_fill_store_value+0xbe>
}
   2129c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        value_sec->key_size = keys->key_size;
   212a0:	7c6b      	ldrb	r3, [r5, #17]
   212a2:	71e3      	strb	r3, [r4, #7]
        value_sec->ediv = keys->ediv;
   212a4:	886b      	ldrh	r3, [r5, #2]
   212a6:	8123      	strh	r3, [r4, #8]
        value_sec->rand_num = keys->rand_val;
   212a8:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
   212ac:	e9c4 2304 	strd	r2, r3, [r4, #16]
        memcpy(value_sec->ltk, keys->ltk, sizeof value_sec->ltk);
   212b0:	462b      	mov	r3, r5
   212b2:	f853 6f12 	ldr.w	r6, [r3, #18]!
   212b6:	6858      	ldr	r0, [r3, #4]
   212b8:	6899      	ldr	r1, [r3, #8]
   212ba:	68db      	ldr	r3, [r3, #12]
   212bc:	61a6      	str	r6, [r4, #24]
   212be:	61e0      	str	r0, [r4, #28]
   212c0:	6221      	str	r1, [r4, #32]
   212c2:	6263      	str	r3, [r4, #36]	; 0x24
        value_sec->ltk_present = 1;
   212c4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   212c8:	f043 0301 	orr.w	r3, r3, #1
   212cc:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
        value_sec->authenticated = !!authenticated;
   212d0:	f118 0800 	adds.w	r8, r8, #0
   212d4:	bf18      	it	ne
   212d6:	f04f 0801 	movne.w	r8, #1
   212da:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
   212de:	f368 0341 	bfi	r3, r8, #1, #1
        value_sec->sc = !!sc;
   212e2:	3700      	adds	r7, #0
   212e4:	bf18      	it	ne
   212e6:	2701      	movne	r7, #1
   212e8:	f367 0382 	bfi	r3, r7, #2, #1
   212ec:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
   212f0:	e7cc      	b.n	2128c <ble_sm_fill_store_value+0x2e>
        memcpy(value_sec->irk, keys->irk, sizeof value_sec->irk);
   212f2:	462b      	mov	r3, r5
   212f4:	f853 6f22 	ldr.w	r6, [r3, #34]!
   212f8:	6858      	ldr	r0, [r3, #4]
   212fa:	6899      	ldr	r1, [r3, #8]
   212fc:	68db      	ldr	r3, [r3, #12]
   212fe:	f8c4 6029 	str.w	r6, [r4, #41]	; 0x29
   21302:	f8c4 002d 	str.w	r0, [r4, #45]	; 0x2d
   21306:	f8c4 1031 	str.w	r1, [r4, #49]	; 0x31
   2130a:	f8c4 3035 	str.w	r3, [r4, #53]	; 0x35
        value_sec->irk_present = 1;
   2130e:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
   21312:	f043 0301 	orr.w	r3, r3, #1
   21316:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
   2131a:	e7bb      	b.n	21294 <ble_sm_fill_store_value+0x36>
        memcpy(value_sec->csrk, keys->csrk, sizeof value_sec->csrk);
   2131c:	f855 6f32 	ldr.w	r6, [r5, #50]!
   21320:	6868      	ldr	r0, [r5, #4]
   21322:	68a9      	ldr	r1, [r5, #8]
   21324:	68ea      	ldr	r2, [r5, #12]
   21326:	f8c4 603a 	str.w	r6, [r4, #58]	; 0x3a
   2132a:	f8c4 003e 	str.w	r0, [r4, #62]	; 0x3e
   2132e:	f8c4 1042 	str.w	r1, [r4, #66]	; 0x42
   21332:	f8c4 2046 	str.w	r2, [r4, #70]	; 0x46
        value_sec->csrk_present = 1;
   21336:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
   2133a:	f043 0301 	orr.w	r3, r3, #1
   2133e:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
}
   21342:	e7ab      	b.n	2129c <ble_sm_fill_store_value+0x3e>

00021344 <ble_sm_update_sec_state>:
{
   21344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21346:	460f      	mov	r7, r1
   21348:	4616      	mov	r6, r2
   2134a:	461d      	mov	r5, r3
   2134c:	9c06      	ldr	r4, [sp, #24]
    conn = ble_hs_conn_find(conn_handle);
   2134e:	f7fd ff79 	bl	1f244 <ble_hs_conn_find>
    if (conn != NULL) {
   21352:	b1d0      	cbz	r0, 2138a <ble_sm_update_sec_state+0x46>
   21354:	4603      	mov	r3, r0
        conn->bhc_sec_state.encrypted = encrypted;
   21356:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
   2135a:	f367 0200 	bfi	r2, r7, #0, #1
   2135e:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
        if (authenticated) {
   21362:	b126      	cbz	r6, 2136e <ble_sm_update_sec_state+0x2a>
            conn->bhc_sec_state.authenticated = 1;
   21364:	b2d2      	uxtb	r2, r2
   21366:	f042 0202 	orr.w	r2, r2, #2
   2136a:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
        if (bonded) {
   2136e:	b12d      	cbz	r5, 2137c <ble_sm_update_sec_state+0x38>
            conn->bhc_sec_state.bonded = 1;
   21370:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
   21374:	f042 0204 	orr.w	r2, r2, #4
   21378:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
        if (key_size) {
   2137c:	b12c      	cbz	r4, 2138a <ble_sm_update_sec_state+0x46>
            conn->bhc_sec_state.key_size = key_size;
   2137e:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
   21382:	f364 02c7 	bfi	r2, r4, #3, #5
   21386:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
}
   2138a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002138c <ble_sm_key_exch_success>:
 * $key exchange                                                             *
 *****************************************************************************/

static void
ble_sm_key_exch_success(struct ble_sm_proc *proc, struct ble_sm_result *res)
{
   2138c:	b530      	push	{r4, r5, lr}
   2138e:	b083      	sub	sp, #12
   21390:	4604      	mov	r4, r0
   21392:	460d      	mov	r5, r1
    /* The procedure is now complete.  Update connection bonded state and
     * terminate procedure.
     */
    ble_sm_update_sec_state(proc->conn_handle, 1,
                            !!(proc->flags & BLE_SM_PROC_F_AUTHENTICATED),
   21394:	7a02      	ldrb	r2, [r0, #8]
                            !!(proc->flags & BLE_SM_PROC_F_BONDING),
                            proc->key_size);
   21396:	7bc3      	ldrb	r3, [r0, #15]
    ble_sm_update_sec_state(proc->conn_handle, 1,
   21398:	8940      	ldrh	r0, [r0, #10]
   2139a:	9300      	str	r3, [sp, #0]
   2139c:	f3c2 1340 	ubfx	r3, r2, #5, #1
   213a0:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   213a4:	2101      	movs	r1, #1
   213a6:	f7ff ffcd 	bl	21344 <ble_sm_update_sec_state>
    proc->state = BLE_SM_PROC_STATE_NONE;
   213aa:	23ff      	movs	r3, #255	; 0xff
   213ac:	7363      	strb	r3, [r4, #13]

    res->app_status = 0;
   213ae:	2300      	movs	r3, #0
   213b0:	602b      	str	r3, [r5, #0]
    res->enc_cb = 1;
   213b2:	7d2b      	ldrb	r3, [r5, #20]
   213b4:	f043 0302 	orr.w	r3, r3, #2
   213b8:	752b      	strb	r3, [r5, #20]
}
   213ba:	b003      	add	sp, #12
   213bc:	bd30      	pop	{r4, r5, pc}

000213be <ble_sm_key_exch_exec>:

static void
ble_sm_key_exch_exec(struct ble_sm_proc *proc, struct ble_sm_result *res,
                     void *arg)
{
   213be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   213c2:	b08a      	sub	sp, #40	; 0x28
   213c4:	4604      	mov	r4, r0
   213c6:	460d      	mov	r5, r1
    uint8_t our_key_dist;
    struct os_mbuf *txom;
    const uint8_t *irk;
    int rc;

    ble_sm_key_dist(proc, &init_key_dist, &resp_key_dist);
   213c8:	f10d 020a 	add.w	r2, sp, #10
   213cc:	f10d 010b 	add.w	r1, sp, #11
   213d0:	f7ff fe30 	bl	21034 <ble_sm_key_dist>
    if (proc->flags & BLE_SM_PROC_F_INITIATOR) {
   213d4:	7a23      	ldrb	r3, [r4, #8]
   213d6:	f013 0f01 	tst.w	r3, #1
   213da:	d018      	beq.n	2140e <ble_sm_key_exch_exec+0x50>
        our_key_dist = init_key_dist;
   213dc:	f89d 600b 	ldrb.w	r6, [sp, #11]
    } else {
        our_key_dist = resp_key_dist;
    }

    if (our_key_dist & BLE_SM_PAIR_KEY_DIST_ENC) {
   213e0:	f016 0f01 	tst.w	r6, #1
   213e4:	d116      	bne.n	21414 <ble_sm_key_exch_exec+0x56>
        if (rc != 0) {
            goto err;
        }
    }

    if (our_key_dist & BLE_SM_PAIR_KEY_DIST_ID) {
   213e6:	f016 0f02 	tst.w	r6, #2
   213ea:	d179      	bne.n	214e0 <ble_sm_key_exch_exec+0x122>
        if (rc != 0) {
            goto err;
        }
    }

    if (our_key_dist & BLE_SM_PAIR_KEY_DIST_SIGN) {
   213ec:	f016 0f04 	tst.w	r6, #4
   213f0:	f040 80e3 	bne.w	215ba <ble_sm_key_exch_exec+0x1fc>
        if (rc != 0) {
            goto err;
        }
    }

    if (proc->flags & BLE_SM_PROC_F_INITIATOR || proc->rx_key_flags == 0) {
   213f4:	7a23      	ldrb	r3, [r4, #8]
   213f6:	f013 0f01 	tst.w	r3, #1
   213fa:	d103      	bne.n	21404 <ble_sm_key_exch_exec+0x46>
   213fc:	7ba3      	ldrb	r3, [r4, #14]
   213fe:	2b00      	cmp	r3, #0
   21400:	f040 810f 	bne.w	21622 <ble_sm_key_exch_exec+0x264>
        /* The procedure is now complete. */
        ble_sm_key_exch_success(proc, res);
   21404:	4629      	mov	r1, r5
   21406:	4620      	mov	r0, r4
   21408:	f7ff ffc0 	bl	2138c <ble_sm_key_exch_success>
   2140c:	e109      	b.n	21622 <ble_sm_key_exch_exec+0x264>
        our_key_dist = resp_key_dist;
   2140e:	f89d 600a 	ldrb.w	r6, [sp, #10]
   21412:	e7e5      	b.n	213e0 <ble_sm_key_exch_exec+0x22>
        enc_info = ble_sm_cmd_get(BLE_SM_OP_ENC_INFO, sizeof(*enc_info), &txom);
   21414:	aa01      	add	r2, sp, #4
   21416:	2110      	movs	r1, #16
   21418:	2006      	movs	r0, #6
   2141a:	f001 fa7f 	bl	2291c <ble_sm_cmd_get>
        if (!enc_info) {
   2141e:	4601      	mov	r1, r0
   21420:	2800      	cmp	r0, #0
   21422:	f000 80f6 	beq.w	21612 <ble_sm_key_exch_exec+0x254>
        rc = ble_sm_gen_ltk(proc, enc_info->ltk);
   21426:	4680      	mov	r8, r0
   21428:	4620      	mov	r0, r4
   2142a:	f7ff fece 	bl	211ca <ble_sm_gen_ltk>
        if (rc != 0) {
   2142e:	4607      	mov	r7, r0
   21430:	b118      	cbz	r0, 2143a <ble_sm_key_exch_exec+0x7c>
            os_mbuf_free_chain(txom);
   21432:	9801      	ldr	r0, [sp, #4]
   21434:	f7ec faef 	bl	da16 <os_mbuf_free_chain>
            goto err;
   21438:	e0ec      	b.n	21614 <ble_sm_key_exch_exec+0x256>
        memcpy(proc->our_keys.ltk, enc_info->ltk, 16);
   2143a:	f8d8 7000 	ldr.w	r7, [r8]
   2143e:	f8d8 0004 	ldr.w	r0, [r8, #4]
   21442:	f8d8 1008 	ldr.w	r1, [r8, #8]
   21446:	f8d8 200c 	ldr.w	r2, [r8, #12]
   2144a:	f8c4 7082 	str.w	r7, [r4, #130]	; 0x82
   2144e:	f8c4 0086 	str.w	r0, [r4, #134]	; 0x86
   21452:	f8c4 108a 	str.w	r1, [r4, #138]	; 0x8a
   21456:	f8c4 208e 	str.w	r2, [r4, #142]	; 0x8e
        proc->our_keys.key_size = proc->key_size;
   2145a:	7be3      	ldrb	r3, [r4, #15]
   2145c:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        proc->our_keys.ltk_valid = 1;
   21460:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
   21464:	f043 0301 	orr.w	r3, r3, #1
   21468:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
        rc = ble_sm_tx(proc->conn_handle, txom);
   2146c:	9901      	ldr	r1, [sp, #4]
   2146e:	8960      	ldrh	r0, [r4, #10]
   21470:	f001 fa6e 	bl	22950 <ble_sm_tx>
        if (rc != 0) {
   21474:	4607      	mov	r7, r0
   21476:	2800      	cmp	r0, #0
   21478:	f040 80cc 	bne.w	21614 <ble_sm_key_exch_exec+0x256>
        master_id = ble_sm_cmd_get(BLE_SM_OP_MASTER_ID, sizeof(*master_id),
   2147c:	aa01      	add	r2, sp, #4
   2147e:	210a      	movs	r1, #10
   21480:	2007      	movs	r0, #7
   21482:	f001 fa4b 	bl	2291c <ble_sm_cmd_get>
        if (!master_id) {
   21486:	4680      	mov	r8, r0
   21488:	2800      	cmp	r0, #0
   2148a:	f000 80cd 	beq.w	21628 <ble_sm_key_exch_exec+0x26a>
        rc = ble_sm_gen_ediv(master_id);
   2148e:	f7ff fe28 	bl	210e2 <ble_sm_gen_ediv>
        if (rc != 0) {
   21492:	4607      	mov	r7, r0
   21494:	b118      	cbz	r0, 2149e <ble_sm_key_exch_exec+0xe0>
            os_mbuf_free_chain(txom);
   21496:	9801      	ldr	r0, [sp, #4]
   21498:	f7ec fabd 	bl	da16 <os_mbuf_free_chain>
            goto err;
   2149c:	e0ba      	b.n	21614 <ble_sm_key_exch_exec+0x256>
        rc = ble_sm_gen_master_id_rand(master_id);
   2149e:	4640      	mov	r0, r8
   214a0:	f7ff fe24 	bl	210ec <ble_sm_gen_master_id_rand>
        if (rc != 0) {
   214a4:	4607      	mov	r7, r0
   214a6:	b118      	cbz	r0, 214b0 <ble_sm_key_exch_exec+0xf2>
            os_mbuf_free_chain(txom);
   214a8:	9801      	ldr	r0, [sp, #4]
   214aa:	f7ec fab4 	bl	da16 <os_mbuf_free_chain>
            goto err;
   214ae:	e0b1      	b.n	21614 <ble_sm_key_exch_exec+0x256>
        proc->our_keys.ediv_rand_valid = 1;
   214b0:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
   214b4:	f043 0302 	orr.w	r3, r3, #2
   214b8:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
        proc->our_keys.rand_val = master_id->rand_val;
   214bc:	f8d8 2002 	ldr.w	r2, [r8, #2]
   214c0:	f8d8 3006 	ldr.w	r3, [r8, #6]
   214c4:	67a2      	str	r2, [r4, #120]	; 0x78
   214c6:	67e3      	str	r3, [r4, #124]	; 0x7c
        proc->our_keys.ediv = master_id->ediv;
   214c8:	f8b8 3000 	ldrh.w	r3, [r8]
   214cc:	f8a4 3072 	strh.w	r3, [r4, #114]	; 0x72
        rc = ble_sm_tx(proc->conn_handle, txom);
   214d0:	9901      	ldr	r1, [sp, #4]
   214d2:	8960      	ldrh	r0, [r4, #10]
   214d4:	f001 fa3c 	bl	22950 <ble_sm_tx>
        if (rc != 0) {
   214d8:	4607      	mov	r7, r0
   214da:	2800      	cmp	r0, #0
   214dc:	d083      	beq.n	213e6 <ble_sm_key_exch_exec+0x28>
    }

    return;

err:
   214de:	e099      	b.n	21614 <ble_sm_key_exch_exec+0x256>
        id_info = ble_sm_cmd_get(BLE_SM_OP_IDENTITY_INFO, sizeof(*id_info),
   214e0:	aa01      	add	r2, sp, #4
   214e2:	2110      	movs	r1, #16
   214e4:	2008      	movs	r0, #8
   214e6:	f001 fa19 	bl	2291c <ble_sm_cmd_get>
        if (!id_info) {
   214ea:	4680      	mov	r8, r0
   214ec:	2800      	cmp	r0, #0
   214ee:	f000 809d 	beq.w	2162c <ble_sm_key_exch_exec+0x26e>
        rc = ble_hs_pvcy_our_irk(&irk);
   214f2:	4668      	mov	r0, sp
   214f4:	f7fe fede 	bl	202b4 <ble_hs_pvcy_our_irk>
        if (rc != 0) {
   214f8:	4607      	mov	r7, r0
   214fa:	b118      	cbz	r0, 21504 <ble_sm_key_exch_exec+0x146>
            os_mbuf_free_chain(txom);
   214fc:	9801      	ldr	r0, [sp, #4]
   214fe:	f7ec fa8a 	bl	da16 <os_mbuf_free_chain>
            goto err;
   21502:	e087      	b.n	21614 <ble_sm_key_exch_exec+0x256>
        memcpy(id_info->irk, irk, 16);
   21504:	9b00      	ldr	r3, [sp, #0]
   21506:	6818      	ldr	r0, [r3, #0]
   21508:	6859      	ldr	r1, [r3, #4]
   2150a:	689a      	ldr	r2, [r3, #8]
   2150c:	68db      	ldr	r3, [r3, #12]
   2150e:	f8c8 0000 	str.w	r0, [r8]
   21512:	f8c8 1004 	str.w	r1, [r8, #4]
   21516:	f8c8 2008 	str.w	r2, [r8, #8]
   2151a:	f8c8 300c 	str.w	r3, [r8, #12]
        proc->our_keys.irk_valid = 1;
   2151e:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
   21522:	f043 0304 	orr.w	r3, r3, #4
   21526:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
        rc = ble_sm_tx(proc->conn_handle, txom);
   2152a:	9901      	ldr	r1, [sp, #4]
   2152c:	8960      	ldrh	r0, [r4, #10]
   2152e:	f001 fa0f 	bl	22950 <ble_sm_tx>
        if (rc != 0) {
   21532:	4607      	mov	r7, r0
   21534:	2800      	cmp	r0, #0
   21536:	d16d      	bne.n	21614 <ble_sm_key_exch_exec+0x256>
        addr_info = ble_sm_cmd_get(BLE_SM_OP_IDENTITY_ADDR_INFO,
   21538:	aa01      	add	r2, sp, #4
   2153a:	2107      	movs	r1, #7
   2153c:	2009      	movs	r0, #9
   2153e:	f001 f9ed 	bl	2291c <ble_sm_cmd_get>
        if (!addr_info) {
   21542:	4607      	mov	r7, r0
   21544:	2800      	cmp	r0, #0
   21546:	d073      	beq.n	21630 <ble_sm_key_exch_exec+0x272>
        conn = ble_hs_conn_find_assert(proc->conn_handle);
   21548:	8960      	ldrh	r0, [r4, #10]
   2154a:	f7fd fe93 	bl	1f274 <ble_hs_conn_find_assert>
        ble_hs_conn_addrs(conn, &addrs);
   2154e:	a903      	add	r1, sp, #12
   21550:	f7fd feb0 	bl	1f2b4 <ble_hs_conn_addrs>
        addr_info->addr_type = addrs.our_id_addr.type;
   21554:	f89d 200c 	ldrb.w	r2, [sp, #12]
   21558:	463b      	mov	r3, r7
   2155a:	f803 2b01 	strb.w	r2, [r3], #1
        memcpy(addr_info->bd_addr, addrs.our_id_addr.val, 6);
   2155e:	aa0a      	add	r2, sp, #40	; 0x28
   21560:	f852 1d1b 	ldr.w	r1, [r2, #-27]!
   21564:	f8c7 1001 	str.w	r1, [r7, #1]
   21568:	8892      	ldrh	r2, [r2, #4]
   2156a:	809a      	strh	r2, [r3, #4]
        proc->our_keys.addr_valid = 1;
   2156c:	f894 2070 	ldrb.w	r2, [r4, #112]	; 0x70
   21570:	f042 0210 	orr.w	r2, r2, #16
   21574:	f884 2070 	strb.w	r2, [r4, #112]	; 0x70
        memcpy(proc->our_keys.irk, irk, 16);
   21578:	9900      	ldr	r1, [sp, #0]
   2157a:	f8d1 e000 	ldr.w	lr, [r1]
   2157e:	f8d1 c004 	ldr.w	ip, [r1, #4]
   21582:	6888      	ldr	r0, [r1, #8]
   21584:	68c9      	ldr	r1, [r1, #12]
   21586:	f8c4 e092 	str.w	lr, [r4, #146]	; 0x92
   2158a:	f8c4 c096 	str.w	ip, [r4, #150]	; 0x96
   2158e:	f8c4 009a 	str.w	r0, [r4, #154]	; 0x9a
   21592:	f8c4 109e 	str.w	r1, [r4, #158]	; 0x9e
        proc->our_keys.addr_type = addr_info->addr_type;
   21596:	783a      	ldrb	r2, [r7, #0]
   21598:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
        memcpy(proc->our_keys.addr, addr_info->bd_addr, 6);
   2159c:	681a      	ldr	r2, [r3, #0]
   2159e:	f8c4 20b2 	str.w	r2, [r4, #178]	; 0xb2
   215a2:	889b      	ldrh	r3, [r3, #4]
   215a4:	f8a4 30b6 	strh.w	r3, [r4, #182]	; 0xb6
        rc = ble_sm_tx(proc->conn_handle, txom);
   215a8:	9901      	ldr	r1, [sp, #4]
   215aa:	8960      	ldrh	r0, [r4, #10]
   215ac:	f001 f9d0 	bl	22950 <ble_sm_tx>
        if (rc != 0) {
   215b0:	4607      	mov	r7, r0
   215b2:	2800      	cmp	r0, #0
   215b4:	f43f af1a 	beq.w	213ec <ble_sm_key_exch_exec+0x2e>
err:
   215b8:	e02c      	b.n	21614 <ble_sm_key_exch_exec+0x256>
        sign_info = ble_sm_cmd_get(BLE_SM_OP_SIGN_INFO, sizeof(*sign_info),
   215ba:	aa01      	add	r2, sp, #4
   215bc:	2110      	movs	r1, #16
   215be:	200a      	movs	r0, #10
   215c0:	f001 f9ac 	bl	2291c <ble_sm_cmd_get>
        if (!sign_info) {
   215c4:	4601      	mov	r1, r0
   215c6:	b3a8      	cbz	r0, 21634 <ble_sm_key_exch_exec+0x276>
        rc = ble_sm_gen_csrk(proc, sign_info->sig_key);
   215c8:	4606      	mov	r6, r0
   215ca:	4620      	mov	r0, r4
   215cc:	f7ff fd94 	bl	210f8 <ble_sm_gen_csrk>
        if (rc != 0) {
   215d0:	4607      	mov	r7, r0
   215d2:	b118      	cbz	r0, 215dc <ble_sm_key_exch_exec+0x21e>
            os_mbuf_free_chain(txom);
   215d4:	9801      	ldr	r0, [sp, #4]
   215d6:	f7ec fa1e 	bl	da16 <os_mbuf_free_chain>
            goto err;
   215da:	e01b      	b.n	21614 <ble_sm_key_exch_exec+0x256>
        proc->our_keys.csrk_valid = 1;
   215dc:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
   215e0:	f043 0308 	orr.w	r3, r3, #8
   215e4:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
        memcpy(proc->our_keys.csrk, sign_info->sig_key, 16);
   215e8:	6837      	ldr	r7, [r6, #0]
   215ea:	6870      	ldr	r0, [r6, #4]
   215ec:	68b1      	ldr	r1, [r6, #8]
   215ee:	68f2      	ldr	r2, [r6, #12]
   215f0:	f8c4 70a2 	str.w	r7, [r4, #162]	; 0xa2
   215f4:	f8c4 00a6 	str.w	r0, [r4, #166]	; 0xa6
   215f8:	f8c4 10aa 	str.w	r1, [r4, #170]	; 0xaa
   215fc:	f8c4 20ae 	str.w	r2, [r4, #174]	; 0xae
        rc = ble_sm_tx(proc->conn_handle, txom);
   21600:	9901      	ldr	r1, [sp, #4]
   21602:	8960      	ldrh	r0, [r4, #10]
   21604:	f001 f9a4 	bl	22950 <ble_sm_tx>
        if (rc != 0) {
   21608:	4607      	mov	r7, r0
   2160a:	2800      	cmp	r0, #0
   2160c:	f43f aef2 	beq.w	213f4 <ble_sm_key_exch_exec+0x36>
err:
   21610:	e000      	b.n	21614 <ble_sm_key_exch_exec+0x256>
            rc = BLE_HS_ENOMEM;
   21612:	2706      	movs	r7, #6
    res->app_status = rc;
   21614:	602f      	str	r7, [r5, #0]
    res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   21616:	2308      	movs	r3, #8
   21618:	712b      	strb	r3, [r5, #4]
    res->enc_cb = 1;
   2161a:	7d2b      	ldrb	r3, [r5, #20]
   2161c:	f043 0302 	orr.w	r3, r3, #2
   21620:	752b      	strb	r3, [r5, #20]
}
   21622:	b00a      	add	sp, #40	; 0x28
   21624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            rc = BLE_HS_ENOMEM;
   21628:	2706      	movs	r7, #6
   2162a:	e7f3      	b.n	21614 <ble_sm_key_exch_exec+0x256>
            rc = BLE_HS_ENOMEM;
   2162c:	2706      	movs	r7, #6
   2162e:	e7f1      	b.n	21614 <ble_sm_key_exch_exec+0x256>
            rc = BLE_HS_ENOMEM;
   21630:	2706      	movs	r7, #6
   21632:	e7ef      	b.n	21614 <ble_sm_key_exch_exec+0x256>
            rc = BLE_HS_ENOMEM;
   21634:	2706      	movs	r7, #6
   21636:	e7ed      	b.n	21614 <ble_sm_key_exch_exec+0x256>

00021638 <ble_sm_key_rxed>:

static void
ble_sm_key_rxed(struct ble_sm_proc *proc, struct ble_sm_result *res)
{
   21638:	b508      	push	{r3, lr}
    BLE_HS_LOG(DEBUG, "rx_key_flags=0x%02x\n", proc->rx_key_flags);

    if (proc->rx_key_flags == 0) {
   2163a:	7b83      	ldrb	r3, [r0, #14]
   2163c:	b93b      	cbnz	r3, 2164e <ble_sm_key_rxed+0x16>
        /* The peer is done sending keys.  If we are the initiator, we need to
         * send ours.  If we are the responder, the procedure is complete.
         */
        if (proc->flags & BLE_SM_PROC_F_INITIATOR) {
   2163e:	7a03      	ldrb	r3, [r0, #8]
   21640:	f013 0f01 	tst.w	r3, #1
   21644:	d004      	beq.n	21650 <ble_sm_key_rxed+0x18>
            res->execute = 1;
   21646:	7d0b      	ldrb	r3, [r1, #20]
   21648:	f043 0301 	orr.w	r3, r3, #1
   2164c:	750b      	strb	r3, [r1, #20]
        } else {
            ble_sm_key_exch_success(proc, res);
        }
    }
}
   2164e:	bd08      	pop	{r3, pc}
            ble_sm_key_exch_success(proc, res);
   21650:	f7ff fe9c 	bl	2138c <ble_sm_key_exch_success>
}
   21654:	e7fb      	b.n	2164e <ble_sm_key_rxed+0x16>

00021656 <ble_sm_start_encrypt_tx>:
{
   21656:	b510      	push	{r4, lr}
   21658:	b08a      	sub	sp, #40	; 0x28
    cmd.conn_handle = htole16(params->connection_handle);
   2165a:	8803      	ldrh	r3, [r0, #0]
   2165c:	f8ad 300c 	strh.w	r3, [sp, #12]
    cmd.div = htole16(params->encrypted_diversifier);
   21660:	8843      	ldrh	r3, [r0, #2]
   21662:	f8ad 3016 	strh.w	r3, [sp, #22]
    cmd.rand = htole64(params->random_number);
   21666:	6882      	ldr	r2, [r0, #8]
   21668:	68c3      	ldr	r3, [r0, #12]
   2166a:	f8cd 200e 	str.w	r2, [sp, #14]
   2166e:	f8cd 3012 	str.w	r3, [sp, #18]
    memcpy(cmd.ltk, params->long_term_key, sizeof(cmd.ltk));
   21672:	ac06      	add	r4, sp, #24
   21674:	4603      	mov	r3, r0
   21676:	f853 0f10 	ldr.w	r0, [r3, #16]!
   2167a:	6859      	ldr	r1, [r3, #4]
   2167c:	689a      	ldr	r2, [r3, #8]
   2167e:	68db      	ldr	r3, [r3, #12]
   21680:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   21682:	2300      	movs	r3, #0
   21684:	9300      	str	r3, [sp, #0]
   21686:	221c      	movs	r2, #28
   21688:	a903      	add	r1, sp, #12
   2168a:	f242 0019 	movw	r0, #8217	; 0x2019
   2168e:	f7fd fff5 	bl	1f67c <ble_hs_hci_cmd_tx>
}
   21692:	b00a      	add	sp, #40	; 0x28
   21694:	bd10      	pop	{r4, pc}

00021696 <ble_sm_enc_restore_exec>:
{
   21696:	b510      	push	{r4, lr}
   21698:	460c      	mov	r4, r1
    res->app_status = ble_sm_start_encrypt_tx(cmd);
   2169a:	4610      	mov	r0, r2
   2169c:	f7ff ffdb 	bl	21656 <ble_sm_start_encrypt_tx>
   216a0:	6020      	str	r0, [r4, #0]
}
   216a2:	bd10      	pop	{r4, pc}

000216a4 <ble_sm_enc_start_exec>:
{
   216a4:	b530      	push	{r4, r5, lr}
   216a6:	b089      	sub	sp, #36	; 0x24
   216a8:	460d      	mov	r5, r1
    cmd.connection_handle = proc->conn_handle;
   216aa:	8943      	ldrh	r3, [r0, #10]
   216ac:	f8ad 3000 	strh.w	r3, [sp]
    cmd.encrypted_diversifier = 0;
   216b0:	2300      	movs	r3, #0
   216b2:	f8ad 3002 	strh.w	r3, [sp, #2]
    cmd.random_number = 0;
   216b6:	2200      	movs	r2, #0
   216b8:	2300      	movs	r3, #0
   216ba:	e9cd 2302 	strd	r2, r3, [sp, #8]
    memcpy(cmd.long_term_key, proc->ltk, sizeof cmd.long_term_key);
   216be:	ac04      	add	r4, sp, #16
   216c0:	4603      	mov	r3, r0
   216c2:	f853 0f5e 	ldr.w	r0, [r3, #94]!
   216c6:	6859      	ldr	r1, [r3, #4]
   216c8:	689a      	ldr	r2, [r3, #8]
   216ca:	68db      	ldr	r3, [r3, #12]
   216cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    rc = ble_sm_start_encrypt_tx(&cmd);
   216ce:	4668      	mov	r0, sp
   216d0:	f7ff ffc1 	bl	21656 <ble_sm_start_encrypt_tx>
    if (rc != 0) {
   216d4:	b130      	cbz	r0, 216e4 <ble_sm_enc_start_exec+0x40>
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   216d6:	2208      	movs	r2, #8
   216d8:	712a      	strb	r2, [r5, #4]
        res->app_status = rc;
   216da:	6028      	str	r0, [r5, #0]
        res->enc_cb = 1;
   216dc:	7d2b      	ldrb	r3, [r5, #20]
   216de:	f043 0302 	orr.w	r3, r3, #2
   216e2:	752b      	strb	r3, [r5, #20]
}
   216e4:	b009      	add	sp, #36	; 0x24
   216e6:	bd30      	pop	{r4, r5, pc}

000216e8 <ble_sm_ltk_req_reply_tx>:
{
   216e8:	b530      	push	{r4, r5, lr}
   216ea:	b089      	sub	sp, #36	; 0x24
   216ec:	4604      	mov	r4, r0
    cmd.conn_handle = htole16(conn_handle);
   216ee:	f8ad 000c 	strh.w	r0, [sp, #12]
    memcpy(cmd.ltk, ltk, 16);
   216f2:	680d      	ldr	r5, [r1, #0]
   216f4:	6848      	ldr	r0, [r1, #4]
   216f6:	688a      	ldr	r2, [r1, #8]
   216f8:	68cb      	ldr	r3, [r1, #12]
   216fa:	f8cd 500e 	str.w	r5, [sp, #14]
   216fe:	f8cd 0012 	str.w	r0, [sp, #18]
   21702:	f8cd 2016 	str.w	r2, [sp, #22]
   21706:	f8cd 301a 	str.w	r3, [sp, #26]
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   2170a:	2302      	movs	r3, #2
   2170c:	9300      	str	r3, [sp, #0]
   2170e:	ab02      	add	r3, sp, #8
   21710:	2212      	movs	r2, #18
   21712:	a903      	add	r1, sp, #12
   21714:	f242 001a 	movw	r0, #8218	; 0x201a
   21718:	f7fd ffb0 	bl	1f67c <ble_hs_hci_cmd_tx>
    if (rc != 0) {
   2171c:	4603      	mov	r3, r0
   2171e:	b918      	cbnz	r0, 21728 <ble_sm_ltk_req_reply_tx+0x40>
    if (le16toh(rsp.conn_handle) != conn_handle) {
   21720:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   21724:	42a2      	cmp	r2, r4
   21726:	d102      	bne.n	2172e <ble_sm_ltk_req_reply_tx+0x46>
}
   21728:	4618      	mov	r0, r3
   2172a:	b009      	add	sp, #36	; 0x24
   2172c:	bd30      	pop	{r4, r5, pc}
        return BLE_HS_ECONTROLLER;
   2172e:	230c      	movs	r3, #12
   21730:	e7fa      	b.n	21728 <ble_sm_ltk_req_reply_tx+0x40>

00021732 <ble_sm_ltk_start_exec>:
{
   21732:	b538      	push	{r3, r4, r5, lr}
   21734:	4604      	mov	r4, r0
   21736:	460d      	mov	r5, r1
    res->app_status = ble_sm_ltk_req_reply_tx(proc->conn_handle, proc->ltk);
   21738:	f100 015e 	add.w	r1, r0, #94	; 0x5e
   2173c:	8940      	ldrh	r0, [r0, #10]
   2173e:	f7ff ffd3 	bl	216e8 <ble_sm_ltk_req_reply_tx>
   21742:	6028      	str	r0, [r5, #0]
    if (res->app_status == 0) {
   21744:	b120      	cbz	r0, 21750 <ble_sm_ltk_start_exec+0x1e>
        res->enc_cb = 1;
   21746:	7d2b      	ldrb	r3, [r5, #20]
   21748:	f043 0302 	orr.w	r3, r3, #2
   2174c:	752b      	strb	r3, [r5, #20]
}
   2174e:	bd38      	pop	{r3, r4, r5, pc}
        proc->state = BLE_SM_PROC_STATE_ENC_START;
   21750:	2305      	movs	r3, #5
   21752:	7363      	strb	r3, [r4, #13]
   21754:	e7fb      	b.n	2174e <ble_sm_ltk_start_exec+0x1c>

00021756 <ble_sm_ltk_req_neg_reply_tx>:
{
   21756:	b510      	push	{r4, lr}
   21758:	b084      	sub	sp, #16
   2175a:	4604      	mov	r4, r0
    cmd.conn_handle = htole16(conn_handle);
   2175c:	f8ad 000c 	strh.w	r0, [sp, #12]
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   21760:	2202      	movs	r2, #2
   21762:	9200      	str	r2, [sp, #0]
   21764:	ab02      	add	r3, sp, #8
   21766:	a903      	add	r1, sp, #12
   21768:	f242 001b 	movw	r0, #8219	; 0x201b
   2176c:	f7fd ff86 	bl	1f67c <ble_hs_hci_cmd_tx>
    if (rc != 0) {
   21770:	4603      	mov	r3, r0
   21772:	b918      	cbnz	r0, 2177c <ble_sm_ltk_req_neg_reply_tx+0x26>
    if (le16toh(rsp.conn_handle) != conn_handle) {
   21774:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   21778:	42a2      	cmp	r2, r4
   2177a:	d102      	bne.n	21782 <ble_sm_ltk_req_neg_reply_tx+0x2c>
}
   2177c:	4618      	mov	r0, r3
   2177e:	b004      	add	sp, #16
   21780:	bd10      	pop	{r4, pc}
        return BLE_HS_ECONTROLLER;
   21782:	230c      	movs	r3, #12
   21784:	e7fa      	b.n	2177c <ble_sm_ltk_req_neg_reply_tx+0x26>

00021786 <ble_sm_ltk_restore_exec>:
{
   21786:	b570      	push	{r4, r5, r6, lr}
   21788:	4605      	mov	r5, r0
   2178a:	460c      	mov	r4, r1
    if (value_sec != NULL) {
   2178c:	b1e2      	cbz	r2, 217c8 <ble_sm_ltk_restore_exec+0x42>
   2178e:	4616      	mov	r6, r2
        res->app_status = ble_sm_ltk_req_reply_tx(
   21790:	f102 0118 	add.w	r1, r2, #24
   21794:	8940      	ldrh	r0, [r0, #10]
   21796:	f7ff ffa7 	bl	216e8 <ble_sm_ltk_req_reply_tx>
   2179a:	6020      	str	r0, [r4, #0]
        if (res->app_status == 0) {
   2179c:	b958      	cbnz	r0, 217b6 <ble_sm_ltk_restore_exec+0x30>
            proc->key_size = value_sec->key_size;
   2179e:	79f3      	ldrb	r3, [r6, #7]
   217a0:	73eb      	strb	r3, [r5, #15]
            if (value_sec->authenticated) {
   217a2:	f896 304a 	ldrb.w	r3, [r6, #74]	; 0x4a
   217a6:	f013 0f02 	tst.w	r3, #2
   217aa:	d008      	beq.n	217be <ble_sm_ltk_restore_exec+0x38>
                proc->flags |= BLE_SM_PROC_F_AUTHENTICATED;
   217ac:	7a2b      	ldrb	r3, [r5, #8]
   217ae:	f043 0308 	orr.w	r3, r3, #8
   217b2:	722b      	strb	r3, [r5, #8]
   217b4:	e003      	b.n	217be <ble_sm_ltk_restore_exec+0x38>
            res->enc_cb = 1;
   217b6:	7d23      	ldrb	r3, [r4, #20]
   217b8:	f043 0302 	orr.w	r3, r3, #2
   217bc:	7523      	strb	r3, [r4, #20]
    if (res->app_status == 0) {
   217be:	6823      	ldr	r3, [r4, #0]
   217c0:	b90b      	cbnz	r3, 217c6 <ble_sm_ltk_restore_exec+0x40>
        proc->state = BLE_SM_PROC_STATE_ENC_RESTORE;
   217c2:	2306      	movs	r3, #6
   217c4:	736b      	strb	r3, [r5, #13]
}
   217c6:	bd70      	pop	{r4, r5, r6, pc}
        ble_sm_ltk_req_neg_reply_tx(proc->conn_handle);
   217c8:	8940      	ldrh	r0, [r0, #10]
   217ca:	f7ff ffc4 	bl	21756 <ble_sm_ltk_req_neg_reply_tx>
        res->app_status = BLE_HS_ENOENT;
   217ce:	2305      	movs	r3, #5
   217d0:	6023      	str	r3, [r4, #0]
   217d2:	e7f4      	b.n	217be <ble_sm_ltk_restore_exec+0x38>

000217d4 <ble_sm_random_exec>:
{
   217d4:	b508      	push	{r3, lr}
    if (proc->flags & BLE_SM_PROC_F_SC) {
   217d6:	7a03      	ldrb	r3, [r0, #8]
   217d8:	f013 0f10 	tst.w	r3, #16
   217dc:	d100      	bne.n	217e0 <ble_sm_random_exec+0xc>
}
   217de:	bd08      	pop	{r3, pc}
        ble_sm_sc_random_exec(proc, res);
   217e0:	f001 fad4 	bl	22d8c <ble_sm_sc_random_exec>
}
   217e4:	e7fb      	b.n	217de <ble_sm_random_exec+0xa>

000217e6 <ble_sm_confirm_exec>:
{
   217e6:	b508      	push	{r3, lr}
    if (!(proc->flags & BLE_SM_PROC_F_SC)) {
   217e8:	7a03      	ldrb	r3, [r0, #8]
   217ea:	f013 0f10 	tst.w	r3, #16
   217ee:	d100      	bne.n	217f2 <ble_sm_confirm_exec+0xc>
}
   217f0:	bd08      	pop	{r3, pc}
        ble_sm_sc_confirm_exec(proc, res);
   217f2:	f001 fa7b 	bl	22cec <ble_sm_sc_confirm_exec>
}
   217f6:	e7fb      	b.n	217f0 <ble_sm_confirm_exec+0xa>

000217f8 <ble_sm_proc_set_timer>:
{
   217f8:	b510      	push	{r4, lr}
   217fa:	4604      	mov	r4, r0
   217fc:	f7eb ff3a 	bl	d674 <os_time_get>
    proc->exp_os_ticks = ble_npl_time_get() +
   21800:	f500 6070 	add.w	r0, r0, #3840	; 0xf00
   21804:	6060      	str	r0, [r4, #4]
    ble_hs_timer_resched();
   21806:	f7fc ff85 	bl	1e714 <ble_hs_timer_resched>
}
   2180a:	bd10      	pop	{r4, pc}

0002180c <ble_sm_extract_expired>:
{
   2180c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2180e:	4605      	mov	r5, r0
   21810:	f7eb ff30 	bl	d674 <os_time_get>
   21814:	4607      	mov	r7, r0
    STAILQ_INIT(dst_list);
   21816:	2400      	movs	r4, #0
   21818:	602c      	str	r4, [r5, #0]
   2181a:	606d      	str	r5, [r5, #4]
    ble_hs_lock();
   2181c:	f7fc fe82 	bl	1e524 <ble_hs_lock>
    proc = STAILQ_FIRST(&ble_sm_procs);
   21820:	4b15      	ldr	r3, [pc, #84]	; (21878 <ble_sm_extract_expired+0x6c>)
   21822:	681b      	ldr	r3, [r3, #0]
    next_exp_in = BLE_HS_FOREVER;
   21824:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
    while (proc != NULL) {
   21828:	e00a      	b.n	21840 <ble_sm_extract_expired+0x34>
            if (prev == NULL) {
   2182a:	b19c      	cbz	r4, 21854 <ble_sm_extract_expired+0x48>
                STAILQ_REMOVE_AFTER(&ble_sm_procs, prev, next);
   2182c:	6822      	ldr	r2, [r4, #0]
   2182e:	6812      	ldr	r2, [r2, #0]
   21830:	6022      	str	r2, [r4, #0]
   21832:	b1c2      	cbz	r2, 21866 <ble_sm_extract_expired+0x5a>
            STAILQ_INSERT_HEAD(dst_list, proc, next);
   21834:	682a      	ldr	r2, [r5, #0]
   21836:	601a      	str	r2, [r3, #0]
   21838:	b1c2      	cbz	r2, 2186c <ble_sm_extract_expired+0x60>
   2183a:	602b      	str	r3, [r5, #0]
                next_exp_in = time_diff;
   2183c:	461c      	mov	r4, r3
   2183e:	4603      	mov	r3, r0
    while (proc != NULL) {
   21840:	b1b3      	cbz	r3, 21870 <ble_sm_extract_expired+0x64>
        next = STAILQ_NEXT(proc, next);
   21842:	6818      	ldr	r0, [r3, #0]
        time_diff = proc->exp_os_ticks - now;
   21844:	685a      	ldr	r2, [r3, #4]
   21846:	1bd2      	subs	r2, r2, r7
        if (time_diff <= 0) {
   21848:	2a00      	cmp	r2, #0
   2184a:	ddee      	ble.n	2182a <ble_sm_extract_expired+0x1e>
            if (time_diff < next_exp_in) {
   2184c:	4296      	cmp	r6, r2
   2184e:	ddf5      	ble.n	2183c <ble_sm_extract_expired+0x30>
                next_exp_in = time_diff;
   21850:	4616      	mov	r6, r2
   21852:	e7f3      	b.n	2183c <ble_sm_extract_expired+0x30>
                STAILQ_REMOVE_HEAD(&ble_sm_procs, next);
   21854:	4908      	ldr	r1, [pc, #32]	; (21878 <ble_sm_extract_expired+0x6c>)
   21856:	680a      	ldr	r2, [r1, #0]
   21858:	6812      	ldr	r2, [r2, #0]
   2185a:	600a      	str	r2, [r1, #0]
   2185c:	2a00      	cmp	r2, #0
   2185e:	d1e9      	bne.n	21834 <ble_sm_extract_expired+0x28>
   21860:	460a      	mov	r2, r1
   21862:	6051      	str	r1, [r2, #4]
   21864:	e7e6      	b.n	21834 <ble_sm_extract_expired+0x28>
                STAILQ_REMOVE_AFTER(&ble_sm_procs, prev, next);
   21866:	4a04      	ldr	r2, [pc, #16]	; (21878 <ble_sm_extract_expired+0x6c>)
   21868:	6054      	str	r4, [r2, #4]
   2186a:	e7e3      	b.n	21834 <ble_sm_extract_expired+0x28>
            STAILQ_INSERT_HEAD(dst_list, proc, next);
   2186c:	606b      	str	r3, [r5, #4]
   2186e:	e7e4      	b.n	2183a <ble_sm_extract_expired+0x2e>
    ble_hs_unlock();
   21870:	f7fc fe5c 	bl	1e52c <ble_hs_unlock>
}
   21874:	4630      	mov	r0, r6
   21876:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   21878:	2000321c 	.word	0x2000321c

0002187c <ble_sm_pair_fail_tx>:
{
   2187c:	b530      	push	{r4, r5, lr}
   2187e:	b083      	sub	sp, #12
   21880:	4604      	mov	r4, r0
   21882:	460d      	mov	r5, r1
    cmd = ble_sm_cmd_get(BLE_SM_OP_PAIR_FAIL, sizeof(*cmd), &txom);
   21884:	aa01      	add	r2, sp, #4
   21886:	2101      	movs	r1, #1
   21888:	2005      	movs	r0, #5
   2188a:	f001 f847 	bl	2291c <ble_sm_cmd_get>
    if (cmd) {
   2188e:	b130      	cbz	r0, 2189e <ble_sm_pair_fail_tx+0x22>
        cmd->reason = reason;
   21890:	7005      	strb	r5, [r0, #0]
        rc = ble_sm_tx(conn_handle, txom);
   21892:	9901      	ldr	r1, [sp, #4]
   21894:	4620      	mov	r0, r4
   21896:	f001 f85b 	bl	22950 <ble_sm_tx>
        if (rc) {
   2189a:	4603      	mov	r3, r0
   2189c:	b908      	cbnz	r0, 218a2 <ble_sm_pair_fail_tx+0x26>
}
   2189e:	b003      	add	sp, #12
   218a0:	bd30      	pop	{r4, r5, pc}
            BLE_HS_LOG(ERROR, "ble_sm_pair_fail_tx failed, rc = %d\n", rc);
   218a2:	4a03      	ldr	r2, [pc, #12]	; (218b0 <ble_sm_pair_fail_tx+0x34>)
   218a4:	2103      	movs	r1, #3
   218a6:	2004      	movs	r0, #4
   218a8:	f7ee f962 	bl	fb70 <modlog_printf>
}
   218ac:	e7f7      	b.n	2189e <ble_sm_pair_fail_tx+0x22>
   218ae:	bf00      	nop
   218b0:	0002b784 	.word	0x0002b784

000218b4 <ble_sm_persist_keys>:
{
   218b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   218b6:	b09b      	sub	sp, #108	; 0x6c
   218b8:	4604      	mov	r4, r0
    ble_hs_lock();
   218ba:	f7fc fe33 	bl	1e524 <ble_hs_lock>
    conn = ble_hs_conn_find(proc->conn_handle);
   218be:	8960      	ldrh	r0, [r4, #10]
   218c0:	f7fd fcc0 	bl	1f244 <ble_hs_conn_find>
   218c4:	4605      	mov	r5, r0
    if (proc->peer_keys.addr_valid) {
   218c6:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
   218ca:	f013 0f10 	tst.w	r3, #16
   218ce:	d052      	beq.n	21976 <ble_sm_persist_keys+0xc2>
        peer_addr.type = proc->peer_keys.addr_type;
   218d0:	f894 60c8 	ldrb.w	r6, [r4, #200]	; 0xc8
   218d4:	f88d 6008 	strb.w	r6, [sp, #8]
        memcpy(peer_addr.val, proc->peer_keys.addr, sizeof peer_addr.val);
   218d8:	4623      	mov	r3, r4
   218da:	f853 2ffa 	ldr.w	r2, [r3, #250]!
   218de:	f8cd 2009 	str.w	r2, [sp, #9]
   218e2:	889b      	ldrh	r3, [r3, #4]
   218e4:	f8ad 300d 	strh.w	r3, [sp, #13]
        conn->bhc_peer_addr = peer_addr;
   218e8:	9802      	ldr	r0, [sp, #8]
   218ea:	f8c5 0007 	str.w	r0, [r5, #7]
   218ee:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   218f2:	f89d 200e 	ldrb.w	r2, [sp, #14]
   218f6:	f8a5 100b 	strh.w	r1, [r5, #11]
   218fa:	736a      	strb	r2, [r5, #13]
        if (memcmp(BLE_ADDR_ANY->val, &conn->bhc_peer_rpa_addr.val, 6) != 0) {
   218fc:	2300      	movs	r3, #0
   218fe:	9318      	str	r3, [sp, #96]	; 0x60
   21900:	f8cd 3063 	str.w	r3, [sp, #99]	; 0x63
   21904:	2206      	movs	r2, #6
   21906:	f105 0116 	add.w	r1, r5, #22
   2190a:	f10d 0061 	add.w	r0, sp, #97	; 0x61
   2190e:	f7ec fd8b 	bl	e428 <memcmp>
   21912:	b128      	cbz	r0, 21920 <ble_sm_persist_keys+0x6c>
            switch (peer_addr.type) {
   21914:	2e03      	cmp	r6, #3
   21916:	d808      	bhi.n	2192a <ble_sm_persist_keys+0x76>
   21918:	e8df f006 	tbb	[pc, r6]
   2191c:	2a052a05 	.word	0x2a052a05
    ble_hs_unlock();
   21920:	f7fc fe04 	bl	1e52c <ble_hs_unlock>
   21924:	e006      	b.n	21934 <ble_sm_persist_keys+0x80>
                conn->bhc_peer_addr.type = BLE_ADDR_PUBLIC_ID;
   21926:	2302      	movs	r3, #2
   21928:	71eb      	strb	r3, [r5, #7]
    ble_hs_unlock();
   2192a:	f7fc fdff 	bl	1e52c <ble_hs_unlock>
        ble_gap_identity_event(proc->conn_handle);
   2192e:	8960      	ldrh	r0, [r4, #10]
   21930:	f7f9 ff23 	bl	1b77a <ble_gap_identity_event>
    authenticated = proc->flags & BLE_SM_PROC_F_AUTHENTICATED;
   21934:	7a25      	ldrb	r5, [r4, #8]
   21936:	f005 0708 	and.w	r7, r5, #8
    sc = proc->flags & BLE_SM_PROC_F_SC;
   2193a:	f005 0510 	and.w	r5, r5, #16
    ble_sm_fill_store_value(&peer_addr, authenticated, sc, &proc->our_keys,
   2193e:	ae04      	add	r6, sp, #16
   21940:	9600      	str	r6, [sp, #0]
   21942:	f104 0370 	add.w	r3, r4, #112	; 0x70
   21946:	462a      	mov	r2, r5
   21948:	4639      	mov	r1, r7
   2194a:	a802      	add	r0, sp, #8
   2194c:	f7ff fc87 	bl	2125e <ble_sm_fill_store_value>
    ble_store_write_our_sec(&value_sec);
   21950:	4630      	mov	r0, r6
   21952:	f001 fd61 	bl	23418 <ble_store_write_our_sec>
    ble_sm_fill_store_value(&peer_addr, authenticated, sc, &proc->peer_keys,
   21956:	9600      	str	r6, [sp, #0]
   21958:	f104 03b8 	add.w	r3, r4, #184	; 0xb8
   2195c:	462a      	mov	r2, r5
   2195e:	4639      	mov	r1, r7
   21960:	a802      	add	r0, sp, #8
   21962:	f7ff fc7c 	bl	2125e <ble_sm_fill_store_value>
    ble_store_write_peer_sec(&value_sec);
   21966:	4630      	mov	r0, r6
   21968:	f001 fd63 	bl	23432 <ble_store_write_peer_sec>
}
   2196c:	b01b      	add	sp, #108	; 0x6c
   2196e:	bdf0      	pop	{r4, r5, r6, r7, pc}
                conn->bhc_peer_addr.type = BLE_ADDR_RANDOM_ID;
   21970:	2303      	movs	r3, #3
   21972:	71eb      	strb	r3, [r5, #7]
                break;
   21974:	e7d9      	b.n	2192a <ble_sm_persist_keys+0x76>
        peer_addr = conn->bhc_peer_addr;
   21976:	4603      	mov	r3, r0
   21978:	f853 0f07 	ldr.w	r0, [r3, #7]!
   2197c:	9002      	str	r0, [sp, #8]
   2197e:	889a      	ldrh	r2, [r3, #4]
   21980:	799b      	ldrb	r3, [r3, #6]
   21982:	f8ad 200c 	strh.w	r2, [sp, #12]
   21986:	f88d 300e 	strb.w	r3, [sp, #14]
            ble_hs_misc_peer_addr_type_to_id(conn->bhc_peer_addr.type);
   2198a:	79e8      	ldrb	r0, [r5, #7]
   2198c:	f7fe fbfc 	bl	20188 <ble_hs_misc_peer_addr_type_to_id>
        peer_addr.type =
   21990:	f88d 0008 	strb.w	r0, [sp, #8]
    ble_hs_unlock();
   21994:	f7fc fdca 	bl	1e52c <ble_hs_unlock>
   21998:	e7cc      	b.n	21934 <ble_sm_persist_keys+0x80>
	...

0002199c <ble_sm_proc_free>:
    if (proc != NULL) {
   2199c:	b128      	cbz	r0, 219aa <ble_sm_proc_free+0xe>
{
   2199e:	b508      	push	{r3, lr}
   219a0:	4601      	mov	r1, r0
        rc = os_memblock_put(&ble_sm_proc_pool, proc);
   219a2:	4802      	ldr	r0, [pc, #8]	; (219ac <ble_sm_proc_free+0x10>)
   219a4:	f7eb faec 	bl	cf80 <os_memblock_put>
}
   219a8:	bd08      	pop	{r3, pc}
   219aa:	4770      	bx	lr
   219ac:	20003200 	.word	0x20003200

000219b0 <ble_sm_proc_alloc>:
{
   219b0:	b510      	push	{r4, lr}
    proc = os_memblock_get(&ble_sm_proc_pool);
   219b2:	4806      	ldr	r0, [pc, #24]	; (219cc <ble_sm_proc_alloc+0x1c>)
   219b4:	f7eb fabc 	bl	cf30 <os_memblock_get>
    if (proc != NULL) {
   219b8:	4604      	mov	r4, r0
   219ba:	b120      	cbz	r0, 219c6 <ble_sm_proc_alloc+0x16>
        memset(proc, 0, sizeof *proc);
   219bc:	f44f 72c0 	mov.w	r2, #384	; 0x180
   219c0:	2100      	movs	r1, #0
   219c2:	f7ec fd7d 	bl	e4c0 <memset>
}
   219c6:	4620      	mov	r0, r4
   219c8:	bd10      	pop	{r4, pc}
   219ca:	bf00      	nop
   219cc:	20003200 	.word	0x20003200

000219d0 <ble_sm_retrieve_ltk>:
{
   219d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   219d2:	b089      	sub	sp, #36	; 0x24
   219d4:	4605      	mov	r5, r0
   219d6:	4616      	mov	r6, r2
   219d8:	461f      	mov	r7, r3
   219da:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    memset(&key_sec, 0, sizeof key_sec);
   219dc:	2220      	movs	r2, #32
   219de:	2100      	movs	r1, #0
   219e0:	4668      	mov	r0, sp
   219e2:	f7ec fd6d 	bl	e4c0 <memset>
    key_sec.peer_addr.type = peer_addr_type;
   219e6:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   219ea:	f88d 3000 	strb.w	r3, [sp]
    memcpy(key_sec.peer_addr.val, peer_addr, 6);
   219ee:	6823      	ldr	r3, [r4, #0]
   219f0:	f8cd 3001 	str.w	r3, [sp, #1]
   219f4:	88a3      	ldrh	r3, [r4, #4]
   219f6:	f8ad 3005 	strh.w	r3, [sp, #5]
    key_sec.ediv = ediv;
   219fa:	f8ad 5008 	strh.w	r5, [sp, #8]
    key_sec.rand_num = rand;
   219fe:	e9cd 6704 	strd	r6, r7, [sp, #16]
    key_sec.ediv_rand_present = 1;
   21a02:	2301      	movs	r3, #1
   21a04:	f88d 3018 	strb.w	r3, [sp, #24]
    rc = ble_store_read_our_sec(&key_sec, value_sec);
   21a08:	9910      	ldr	r1, [sp, #64]	; 0x40
   21a0a:	4668      	mov	r0, sp
   21a0c:	f001 fcfd 	bl	2340a <ble_store_read_our_sec>
}
   21a10:	b009      	add	sp, #36	; 0x24
   21a12:	bdf0      	pop	{r4, r5, r6, r7, pc}

00021a14 <ble_sm_fail_rx>:
 *****************************************************************************/

static void
ble_sm_fail_rx(uint16_t conn_handle, struct os_mbuf **om,
               struct ble_sm_result *res)
{
   21a14:	b538      	push	{r3, r4, r5, lr}
   21a16:	460d      	mov	r5, r1
   21a18:	4614      	mov	r4, r2
    struct ble_sm_pair_fail *cmd;

    res->enc_cb = 1;
   21a1a:	7d13      	ldrb	r3, [r2, #20]
   21a1c:	f043 0302 	orr.w	r3, r3, #2
   21a20:	7513      	strb	r3, [r2, #20]

    res->app_status = ble_hs_mbuf_pullup_base(om, sizeof(*cmd));
   21a22:	2101      	movs	r1, #1
   21a24:	4628      	mov	r0, r5
   21a26:	f7fe fb53 	bl	200d0 <ble_hs_mbuf_pullup_base>
   21a2a:	6020      	str	r0, [r4, #0]
    if (res->app_status == 0) {
   21a2c:	b930      	cbnz	r0, 21a3c <ble_sm_fail_rx+0x28>
        cmd = (struct ble_sm_pair_fail *)(*om)->om_data;
   21a2e:	682b      	ldr	r3, [r5, #0]
   21a30:	681b      	ldr	r3, [r3, #0]

        res->app_status = BLE_HS_SM_PEER_ERR(cmd->reason);
   21a32:	781b      	ldrb	r3, [r3, #0]
   21a34:	b10b      	cbz	r3, 21a3a <ble_sm_fail_rx+0x26>
   21a36:	f503 60a0 	add.w	r0, r3, #1280	; 0x500
   21a3a:	6020      	str	r0, [r4, #0]
    }
}
   21a3c:	bd38      	pop	{r3, r4, r5, pc}

00021a3e <ble_sm_read_bond>:
{
   21a3e:	b510      	push	{r4, lr}
   21a40:	b094      	sub	sp, #80	; 0x50
   21a42:	460c      	mov	r4, r1
    rc = ble_gap_conn_find(conn_handle, &desc);
   21a44:	a901      	add	r1, sp, #4
   21a46:	f7f9 f937 	bl	1acb8 <ble_gap_conn_find>
    if (rc != 0) {
   21a4a:	4603      	mov	r3, r0
   21a4c:	b110      	cbz	r0, 21a54 <ble_sm_read_bond+0x16>
}
   21a4e:	4618      	mov	r0, r3
   21a50:	b014      	add	sp, #80	; 0x50
   21a52:	bd10      	pop	{r4, pc}
    memset(&key_sec, 0, sizeof key_sec);
   21a54:	2300      	movs	r3, #0
   21a56:	f8cd 3036 	str.w	r3, [sp, #54]	; 0x36
   21a5a:	f8cd 303a 	str.w	r3, [sp, #58]	; 0x3a
   21a5e:	f8cd 303e 	str.w	r3, [sp, #62]	; 0x3e
   21a62:	f8cd 3042 	str.w	r3, [sp, #66]	; 0x42
   21a66:	f8cd 3046 	str.w	r3, [sp, #70]	; 0x46
   21a6a:	f8cd 304a 	str.w	r3, [sp, #74]	; 0x4a
   21a6e:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
    key_sec.peer_addr = desc.peer_id_addr;
   21a72:	ab14      	add	r3, sp, #80	; 0x50
   21a74:	f853 0d41 	ldr.w	r0, [r3, #-65]!
   21a78:	900c      	str	r0, [sp, #48]	; 0x30
   21a7a:	889a      	ldrh	r2, [r3, #4]
   21a7c:	799b      	ldrb	r3, [r3, #6]
   21a7e:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
   21a82:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
    rc = ble_store_read_peer_sec(&key_sec, out_bond);
   21a86:	4621      	mov	r1, r4
   21a88:	a80c      	add	r0, sp, #48	; 0x30
   21a8a:	f001 fccb 	bl	23424 <ble_store_read_peer_sec>
   21a8e:	4603      	mov	r3, r0
    return rc;
   21a90:	e7dd      	b.n	21a4e <ble_sm_read_bond+0x10>

00021a92 <ble_sm_chk_repeat_pairing>:
{
   21a92:	b570      	push	{r4, r5, r6, lr}
   21a94:	b096      	sub	sp, #88	; 0x58
   21a96:	4604      	mov	r4, r0
   21a98:	460d      	mov	r5, r1
   21a9a:	4616      	mov	r6, r2
        rc = ble_sm_read_bond(conn_handle, &bond);
   21a9c:	4669      	mov	r1, sp
   21a9e:	4620      	mov	r0, r4
   21aa0:	f7ff ffcd 	bl	21a3e <ble_sm_read_bond>
        switch (rc) {
   21aa4:	4603      	mov	r3, r0
   21aa6:	b128      	cbz	r0, 21ab4 <ble_sm_chk_repeat_pairing+0x22>
   21aa8:	2805      	cmp	r0, #5
   21aaa:	d100      	bne.n	21aae <ble_sm_chk_repeat_pairing+0x1c>
            return 0;
   21aac:	2300      	movs	r3, #0
}
   21aae:	4618      	mov	r0, r3
   21ab0:	b016      	add	sp, #88	; 0x58
   21ab2:	bd70      	pop	{r4, r5, r6, pc}
        rp.conn_handle = conn_handle;
   21ab4:	f8ad 4050 	strh.w	r4, [sp, #80]	; 0x50
        rp.cur_key_size = bond.key_size;
   21ab8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   21abc:	f88d 3052 	strb.w	r3, [sp, #82]	; 0x52
        rp.cur_authenticated = bond.authenticated;
   21ac0:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
   21ac4:	f3c2 0140 	ubfx	r1, r2, #1, #1
   21ac8:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
   21acc:	f361 0300 	bfi	r3, r1, #0, #1
        rp.cur_sc = bond.sc;
   21ad0:	f3c2 0280 	ubfx	r2, r2, #2, #1
   21ad4:	f362 0341 	bfi	r3, r2, #1, #1
   21ad8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
        rp.new_key_size = key_size;
   21adc:	f88d 6054 	strb.w	r6, [sp, #84]	; 0x54
        rp.new_authenticated = !!(proc_flags & BLE_SM_PROC_F_AUTHENTICATED);
   21ae0:	f3c5 02c0 	ubfx	r2, r5, #3, #1
   21ae4:	f89d 3055 	ldrb.w	r3, [sp, #85]	; 0x55
   21ae8:	f362 0300 	bfi	r3, r2, #0, #1
        rp.new_sc = !!(proc_flags & BLE_SM_PROC_F_SC);
   21aec:	f3c5 1200 	ubfx	r2, r5, #4, #1
   21af0:	f362 0341 	bfi	r3, r2, #1, #1
        rp.new_bonding = !!(proc_flags & BLE_SM_PROC_F_BONDING);
   21af4:	f3c5 1240 	ubfx	r2, r5, #5, #1
   21af8:	f362 0382 	bfi	r3, r2, #2, #1
   21afc:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
        rc = ble_gap_repeat_pairing_event(&rp);
   21b00:	a814      	add	r0, sp, #80	; 0x50
   21b02:	f7f9 fe4d 	bl	1b7a0 <ble_gap_repeat_pairing_event>
    } while (rc == BLE_GAP_REPEAT_PAIRING_RETRY);
   21b06:	2801      	cmp	r0, #1
   21b08:	d0c8      	beq.n	21a9c <ble_sm_chk_repeat_pairing+0xa>
    return BLE_HS_EALREADY;
   21b0a:	2302      	movs	r3, #2
   21b0c:	e7cf      	b.n	21aae <ble_sm_chk_repeat_pairing+0x1c>
	...

00021b10 <ble_sm_num_procs>:
    STAILQ_FOREACH(proc, &ble_sm_procs, next) {
   21b10:	4b04      	ldr	r3, [pc, #16]	; (21b24 <ble_sm_num_procs+0x14>)
   21b12:	681b      	ldr	r3, [r3, #0]
    cnt = 0;
   21b14:	2000      	movs	r0, #0
    STAILQ_FOREACH(proc, &ble_sm_procs, next) {
   21b16:	e001      	b.n	21b1c <ble_sm_num_procs+0xc>
        cnt++;
   21b18:	3001      	adds	r0, #1
    STAILQ_FOREACH(proc, &ble_sm_procs, next) {
   21b1a:	681b      	ldr	r3, [r3, #0]
   21b1c:	2b00      	cmp	r3, #0
   21b1e:	d1fb      	bne.n	21b18 <ble_sm_num_procs+0x8>
}
   21b20:	4770      	bx	lr
   21b22:	bf00      	nop
   21b24:	2000321c 	.word	0x2000321c

00021b28 <ble_sm_chk_store_overflow_by_type>:
{
   21b28:	b570      	push	{r4, r5, r6, lr}
   21b2a:	b082      	sub	sp, #8
   21b2c:	4605      	mov	r5, r0
   21b2e:	460e      	mov	r6, r1
    rc = ble_store_util_count(obj_type, &count);
   21b30:	a901      	add	r1, sp, #4
   21b32:	f001 fd07 	bl	23544 <ble_store_util_count>
    if (rc != 0) {
   21b36:	4604      	mov	r4, r0
   21b38:	b110      	cbz	r0, 21b40 <ble_sm_chk_store_overflow_by_type+0x18>
}
   21b3a:	4620      	mov	r0, r4
   21b3c:	b002      	add	sp, #8
   21b3e:	bd70      	pop	{r4, r5, r6, pc}
    ble_hs_lock();
   21b40:	f7fc fcf0 	bl	1e524 <ble_hs_lock>
    count += ble_sm_num_procs();
   21b44:	f7ff ffe4 	bl	21b10 <ble_sm_num_procs>
   21b48:	9b01      	ldr	r3, [sp, #4]
   21b4a:	4418      	add	r0, r3
   21b4c:	9001      	str	r0, [sp, #4]
    ble_hs_unlock();
   21b4e:	f7fc fced 	bl	1e52c <ble_hs_unlock>
    if (count < MYNEWT_VAL(BLE_STORE_MAX_BONDS)) {
   21b52:	9b01      	ldr	r3, [sp, #4]
   21b54:	2b02      	cmp	r3, #2
   21b56:	ddf0      	ble.n	21b3a <ble_sm_chk_store_overflow_by_type+0x12>
    rc = ble_store_full_event(obj_type, conn_handle);
   21b58:	4631      	mov	r1, r6
   21b5a:	4628      	mov	r0, r5
   21b5c:	f001 fc48 	bl	233f0 <ble_store_full_event>
   21b60:	4604      	mov	r4, r0
   21b62:	e7ea      	b.n	21b3a <ble_sm_chk_store_overflow_by_type+0x12>

00021b64 <ble_sm_chk_store_overflow>:
{
   21b64:	b510      	push	{r4, lr}
   21b66:	4604      	mov	r4, r0
    rc = ble_sm_chk_store_overflow_by_type(BLE_STORE_OBJ_TYPE_PEER_SEC,
   21b68:	4601      	mov	r1, r0
   21b6a:	2002      	movs	r0, #2
   21b6c:	f7ff ffdc 	bl	21b28 <ble_sm_chk_store_overflow_by_type>
    if (rc != 0) {
   21b70:	4603      	mov	r3, r0
   21b72:	b108      	cbz	r0, 21b78 <ble_sm_chk_store_overflow+0x14>
}
   21b74:	4618      	mov	r0, r3
   21b76:	bd10      	pop	{r4, pc}
    rc = ble_sm_chk_store_overflow_by_type(BLE_STORE_OBJ_TYPE_OUR_SEC,
   21b78:	4621      	mov	r1, r4
   21b7a:	2001      	movs	r0, #1
   21b7c:	f7ff ffd4 	bl	21b28 <ble_sm_chk_store_overflow_by_type>
   21b80:	4603      	mov	r3, r0
   21b82:	e7f7      	b.n	21b74 <ble_sm_chk_store_overflow+0x10>

00021b84 <ble_sm_gen_pair_rand>:
{
   21b84:	b508      	push	{r3, lr}
    rc = ble_hs_hci_util_rand(pair_rand, 16);
   21b86:	2110      	movs	r1, #16
   21b88:	f7fe f938 	bl	1fdfc <ble_hs_hci_util_rand>
}
   21b8c:	bd08      	pop	{r3, pc}

00021b8e <ble_sm_ia_ra>:
{
   21b8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21b92:	b088      	sub	sp, #32
   21b94:	4606      	mov	r6, r0
   21b96:	4688      	mov	r8, r1
   21b98:	4615      	mov	r5, r2
   21b9a:	461f      	mov	r7, r3
   21b9c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    conn = ble_hs_conn_find_assert(proc->conn_handle);
   21b9e:	8940      	ldrh	r0, [r0, #10]
   21ba0:	f7fd fb68 	bl	1f274 <ble_hs_conn_find_assert>
    ble_hs_conn_addrs(conn, &addrs);
   21ba4:	a901      	add	r1, sp, #4
   21ba6:	f7fd fb85 	bl	1f2b4 <ble_hs_conn_addrs>
    if (proc->flags & BLE_SM_PROC_F_INITIATOR) {
   21baa:	7a33      	ldrb	r3, [r6, #8]
   21bac:	f013 0f01 	tst.w	r3, #1
   21bb0:	d115      	bne.n	21bde <ble_sm_ia_ra+0x50>
        *out_iat = addrs.peer_ota_addr.type;
   21bb2:	f89d 3019 	ldrb.w	r3, [sp, #25]
   21bb6:	f888 3000 	strb.w	r3, [r8]
        memcpy(out_ia, addrs.peer_ota_addr.val, 6);
   21bba:	ab08      	add	r3, sp, #32
   21bbc:	f853 2d06 	ldr.w	r2, [r3, #-6]!
   21bc0:	602a      	str	r2, [r5, #0]
   21bc2:	889b      	ldrh	r3, [r3, #4]
   21bc4:	80ab      	strh	r3, [r5, #4]
        *out_rat = addrs.our_ota_addr.type;
   21bc6:	f89d 3012 	ldrb.w	r3, [sp, #18]
   21bca:	703b      	strb	r3, [r7, #0]
        memcpy(out_ra, addrs.our_ota_addr.val, 6);
   21bcc:	ab08      	add	r3, sp, #32
   21bce:	f853 2d0d 	ldr.w	r2, [r3, #-13]!
   21bd2:	6022      	str	r2, [r4, #0]
   21bd4:	889b      	ldrh	r3, [r3, #4]
   21bd6:	80a3      	strh	r3, [r4, #4]
}
   21bd8:	b008      	add	sp, #32
   21bda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        *out_iat = addrs.our_ota_addr.type;
   21bde:	f89d 3012 	ldrb.w	r3, [sp, #18]
   21be2:	f888 3000 	strb.w	r3, [r8]
        memcpy(out_ia, addrs.our_ota_addr.val, 6);
   21be6:	ab08      	add	r3, sp, #32
   21be8:	f853 2d0d 	ldr.w	r2, [r3, #-13]!
   21bec:	602a      	str	r2, [r5, #0]
   21bee:	889b      	ldrh	r3, [r3, #4]
   21bf0:	80ab      	strh	r3, [r5, #4]
        *out_rat = addrs.peer_ota_addr.type;
   21bf2:	f89d 3019 	ldrb.w	r3, [sp, #25]
   21bf6:	703b      	strb	r3, [r7, #0]
        memcpy(out_ra, addrs.peer_ota_addr.val, 6);
   21bf8:	ab08      	add	r3, sp, #32
   21bfa:	f853 2d06 	ldr.w	r2, [r3, #-6]!
   21bfe:	6022      	str	r2, [r4, #0]
   21c00:	889b      	ldrh	r3, [r3, #4]
   21c02:	80a3      	strh	r3, [r4, #4]
   21c04:	e7e8      	b.n	21bd8 <ble_sm_ia_ra+0x4a>
	...

00021c08 <ble_sm_proc_find>:
{
   21c08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   21c0c:	4607      	mov	r7, r0
   21c0e:	460e      	mov	r6, r1
   21c10:	4615      	mov	r5, r2
   21c12:	4699      	mov	r9, r3
    STAILQ_FOREACH(proc, &ble_sm_procs, next) {
   21c14:	4b0b      	ldr	r3, [pc, #44]	; (21c44 <ble_sm_proc_find+0x3c>)
   21c16:	681c      	ldr	r4, [r3, #0]
    prev = NULL;
   21c18:	f04f 0800 	mov.w	r8, #0
    STAILQ_FOREACH(proc, &ble_sm_procs, next) {
   21c1c:	b174      	cbz	r4, 21c3c <ble_sm_proc_find+0x34>
        if (ble_sm_proc_matches(proc, conn_handle, state, is_initiator)) {
   21c1e:	462b      	mov	r3, r5
   21c20:	4632      	mov	r2, r6
   21c22:	4639      	mov	r1, r7
   21c24:	4620      	mov	r0, r4
   21c26:	f7ff f9c3 	bl	20fb0 <ble_sm_proc_matches>
   21c2a:	b910      	cbnz	r0, 21c32 <ble_sm_proc_find+0x2a>
        prev = proc;
   21c2c:	46a0      	mov	r8, r4
    STAILQ_FOREACH(proc, &ble_sm_procs, next) {
   21c2e:	6824      	ldr	r4, [r4, #0]
   21c30:	e7f4      	b.n	21c1c <ble_sm_proc_find+0x14>
            if (out_prev != NULL) {
   21c32:	f1b9 0f00 	cmp.w	r9, #0
   21c36:	d001      	beq.n	21c3c <ble_sm_proc_find+0x34>
                *out_prev = prev;
   21c38:	f8c9 8000 	str.w	r8, [r9]
}
   21c3c:	4620      	mov	r0, r4
   21c3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   21c42:	bf00      	nop
   21c44:	2000321c 	.word	0x2000321c

00021c48 <ble_sm_sign_info_rx>:
{
   21c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21c4a:	4606      	mov	r6, r0
   21c4c:	460d      	mov	r5, r1
   21c4e:	4614      	mov	r4, r2
    res->app_status = ble_hs_mbuf_pullup_base(om, sizeof(*cmd));
   21c50:	2110      	movs	r1, #16
   21c52:	4628      	mov	r0, r5
   21c54:	f7fe fa3c 	bl	200d0 <ble_hs_mbuf_pullup_base>
   21c58:	6020      	str	r0, [r4, #0]
    if (res->app_status != 0) {
   21c5a:	b130      	cbz	r0, 21c6a <ble_sm_sign_info_rx+0x22>
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   21c5c:	2308      	movs	r3, #8
   21c5e:	7123      	strb	r3, [r4, #4]
        res->enc_cb = 1;
   21c60:	7d23      	ldrb	r3, [r4, #20]
   21c62:	f043 0302 	orr.w	r3, r3, #2
   21c66:	7523      	strb	r3, [r4, #20]
}
   21c68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cmd = (struct ble_sm_sign_info *)(*om)->om_data;
   21c6a:	682b      	ldr	r3, [r5, #0]
   21c6c:	681d      	ldr	r5, [r3, #0]
    ble_hs_lock();
   21c6e:	f7fc fc59 	bl	1e524 <ble_hs_lock>
    proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_KEY_EXCH, -1, NULL);
   21c72:	2300      	movs	r3, #0
   21c74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   21c78:	2107      	movs	r1, #7
   21c7a:	4630      	mov	r0, r6
   21c7c:	f7ff ffc4 	bl	21c08 <ble_sm_proc_find>
    if (proc == NULL) {
   21c80:	4603      	mov	r3, r0
   21c82:	b1e0      	cbz	r0, 21cbe <ble_sm_sign_info_rx+0x76>
        proc->rx_key_flags &= ~BLE_SM_KE_F_SIGN_INFO;
   21c84:	7b82      	ldrb	r2, [r0, #14]
   21c86:	f022 0210 	bic.w	r2, r2, #16
   21c8a:	7382      	strb	r2, [r0, #14]
        memcpy(proc->peer_keys.csrk, cmd->sig_key, 16);
   21c8c:	682f      	ldr	r7, [r5, #0]
   21c8e:	686e      	ldr	r6, [r5, #4]
   21c90:	68a8      	ldr	r0, [r5, #8]
   21c92:	68e9      	ldr	r1, [r5, #12]
   21c94:	f8c3 70ea 	str.w	r7, [r3, #234]	; 0xea
   21c98:	f8c3 60ee 	str.w	r6, [r3, #238]	; 0xee
   21c9c:	f8c3 00f2 	str.w	r0, [r3, #242]	; 0xf2
   21ca0:	f8c3 10f6 	str.w	r1, [r3, #246]	; 0xf6
        proc->peer_keys.csrk_valid = 1;
   21ca4:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
   21ca8:	f042 0208 	orr.w	r2, r2, #8
   21cac:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
        ble_sm_key_rxed(proc, res);
   21cb0:	4621      	mov	r1, r4
   21cb2:	4618      	mov	r0, r3
   21cb4:	f7ff fcc0 	bl	21638 <ble_sm_key_rxed>
    ble_hs_unlock();
   21cb8:	f7fc fc38 	bl	1e52c <ble_hs_unlock>
   21cbc:	e7d4      	b.n	21c68 <ble_sm_sign_info_rx+0x20>
        res->app_status = BLE_HS_ENOENT;
   21cbe:	2305      	movs	r3, #5
   21cc0:	6023      	str	r3, [r4, #0]
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   21cc2:	2308      	movs	r3, #8
   21cc4:	7123      	strb	r3, [r4, #4]
   21cc6:	e7f7      	b.n	21cb8 <ble_sm_sign_info_rx+0x70>

00021cc8 <ble_sm_id_addr_info_rx>:
{
   21cc8:	b570      	push	{r4, r5, r6, lr}
   21cca:	4606      	mov	r6, r0
   21ccc:	460d      	mov	r5, r1
   21cce:	4614      	mov	r4, r2
    res->app_status = ble_hs_mbuf_pullup_base(om, sizeof(*cmd));
   21cd0:	2107      	movs	r1, #7
   21cd2:	4628      	mov	r0, r5
   21cd4:	f7fe f9fc 	bl	200d0 <ble_hs_mbuf_pullup_base>
   21cd8:	6020      	str	r0, [r4, #0]
    if (res->app_status != 0) {
   21cda:	b130      	cbz	r0, 21cea <ble_sm_id_addr_info_rx+0x22>
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   21cdc:	2308      	movs	r3, #8
   21cde:	7123      	strb	r3, [r4, #4]
        res->enc_cb = 1;
   21ce0:	7d23      	ldrb	r3, [r4, #20]
   21ce2:	f043 0302 	orr.w	r3, r3, #2
   21ce6:	7523      	strb	r3, [r4, #20]
}
   21ce8:	bd70      	pop	{r4, r5, r6, pc}
    cmd = (struct ble_sm_id_addr_info *)(*om)->om_data;
   21cea:	682b      	ldr	r3, [r5, #0]
   21cec:	681d      	ldr	r5, [r3, #0]
    ble_hs_lock();
   21cee:	f7fc fc19 	bl	1e524 <ble_hs_lock>
    proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_KEY_EXCH, -1, NULL);
   21cf2:	2300      	movs	r3, #0
   21cf4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   21cf8:	2107      	movs	r1, #7
   21cfa:	4630      	mov	r0, r6
   21cfc:	f7ff ff84 	bl	21c08 <ble_sm_proc_find>
    if (proc == NULL) {
   21d00:	b1d0      	cbz	r0, 21d38 <ble_sm_id_addr_info_rx+0x70>
        proc->rx_key_flags &= ~BLE_SM_KE_F_ADDR_INFO;
   21d02:	7b82      	ldrb	r2, [r0, #14]
   21d04:	f022 0208 	bic.w	r2, r2, #8
   21d08:	7382      	strb	r2, [r0, #14]
        proc->peer_keys.addr_valid = 1;
   21d0a:	f890 20b8 	ldrb.w	r2, [r0, #184]	; 0xb8
   21d0e:	f042 0210 	orr.w	r2, r2, #16
   21d12:	f880 20b8 	strb.w	r2, [r0, #184]	; 0xb8
        proc->peer_keys.addr_type = cmd->addr_type;
   21d16:	782a      	ldrb	r2, [r5, #0]
   21d18:	f880 20c8 	strb.w	r2, [r0, #200]	; 0xc8
        memcpy(proc->peer_keys.addr, cmd->bd_addr, 6);
   21d1c:	462a      	mov	r2, r5
   21d1e:	f852 1f01 	ldr.w	r1, [r2, #1]!
   21d22:	f8c0 10fa 	str.w	r1, [r0, #250]	; 0xfa
   21d26:	8892      	ldrh	r2, [r2, #4]
   21d28:	f8a0 20fe 	strh.w	r2, [r0, #254]	; 0xfe
        ble_sm_key_rxed(proc, res);
   21d2c:	4621      	mov	r1, r4
   21d2e:	f7ff fc83 	bl	21638 <ble_sm_key_rxed>
    ble_hs_unlock();
   21d32:	f7fc fbfb 	bl	1e52c <ble_hs_unlock>
   21d36:	e7d7      	b.n	21ce8 <ble_sm_id_addr_info_rx+0x20>
        res->app_status = BLE_HS_ENOENT;
   21d38:	2305      	movs	r3, #5
   21d3a:	6023      	str	r3, [r4, #0]
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   21d3c:	2308      	movs	r3, #8
   21d3e:	7123      	strb	r3, [r4, #4]
   21d40:	e7f7      	b.n	21d32 <ble_sm_id_addr_info_rx+0x6a>

00021d42 <ble_sm_id_info_rx>:
{
   21d42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21d44:	4606      	mov	r6, r0
   21d46:	460d      	mov	r5, r1
   21d48:	4614      	mov	r4, r2
    res->app_status = ble_hs_mbuf_pullup_base(om, sizeof(*cmd));
   21d4a:	2110      	movs	r1, #16
   21d4c:	4628      	mov	r0, r5
   21d4e:	f7fe f9bf 	bl	200d0 <ble_hs_mbuf_pullup_base>
   21d52:	6020      	str	r0, [r4, #0]
    if (res->app_status != 0) {
   21d54:	b130      	cbz	r0, 21d64 <ble_sm_id_info_rx+0x22>
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   21d56:	2308      	movs	r3, #8
   21d58:	7123      	strb	r3, [r4, #4]
        res->enc_cb = 1;
   21d5a:	7d23      	ldrb	r3, [r4, #20]
   21d5c:	f043 0302 	orr.w	r3, r3, #2
   21d60:	7523      	strb	r3, [r4, #20]
}
   21d62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cmd = (struct ble_sm_id_info *)(*om)->om_data;
   21d64:	682b      	ldr	r3, [r5, #0]
   21d66:	681d      	ldr	r5, [r3, #0]
    ble_hs_lock();
   21d68:	f7fc fbdc 	bl	1e524 <ble_hs_lock>
    proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_KEY_EXCH, -1, NULL);
   21d6c:	2300      	movs	r3, #0
   21d6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   21d72:	2107      	movs	r1, #7
   21d74:	4630      	mov	r0, r6
   21d76:	f7ff ff47 	bl	21c08 <ble_sm_proc_find>
    if (proc == NULL) {
   21d7a:	4603      	mov	r3, r0
   21d7c:	b1e0      	cbz	r0, 21db8 <ble_sm_id_info_rx+0x76>
        proc->rx_key_flags &= ~BLE_SM_KE_F_ID_INFO;
   21d7e:	7b82      	ldrb	r2, [r0, #14]
   21d80:	f022 0204 	bic.w	r2, r2, #4
   21d84:	7382      	strb	r2, [r0, #14]
        memcpy(proc->peer_keys.irk, cmd->irk, 16);
   21d86:	682f      	ldr	r7, [r5, #0]
   21d88:	686e      	ldr	r6, [r5, #4]
   21d8a:	68a8      	ldr	r0, [r5, #8]
   21d8c:	68e9      	ldr	r1, [r5, #12]
   21d8e:	f8c3 70da 	str.w	r7, [r3, #218]	; 0xda
   21d92:	f8c3 60de 	str.w	r6, [r3, #222]	; 0xde
   21d96:	f8c3 00e2 	str.w	r0, [r3, #226]	; 0xe2
   21d9a:	f8c3 10e6 	str.w	r1, [r3, #230]	; 0xe6
        proc->peer_keys.irk_valid = 1;
   21d9e:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
   21da2:	f042 0204 	orr.w	r2, r2, #4
   21da6:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
        ble_sm_key_rxed(proc, res);
   21daa:	4621      	mov	r1, r4
   21dac:	4618      	mov	r0, r3
   21dae:	f7ff fc43 	bl	21638 <ble_sm_key_rxed>
    ble_hs_unlock();
   21db2:	f7fc fbbb 	bl	1e52c <ble_hs_unlock>
   21db6:	e7d4      	b.n	21d62 <ble_sm_id_info_rx+0x20>
        res->app_status = BLE_HS_ENOENT;
   21db8:	2305      	movs	r3, #5
   21dba:	6023      	str	r3, [r4, #0]
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   21dbc:	2308      	movs	r3, #8
   21dbe:	7123      	strb	r3, [r4, #4]
   21dc0:	e7f7      	b.n	21db2 <ble_sm_id_info_rx+0x70>

00021dc2 <ble_sm_master_id_rx>:
{
   21dc2:	b570      	push	{r4, r5, r6, lr}
   21dc4:	4606      	mov	r6, r0
   21dc6:	460d      	mov	r5, r1
   21dc8:	4614      	mov	r4, r2
    res->app_status = ble_hs_mbuf_pullup_base(om, sizeof(*cmd));
   21dca:	210a      	movs	r1, #10
   21dcc:	4628      	mov	r0, r5
   21dce:	f7fe f97f 	bl	200d0 <ble_hs_mbuf_pullup_base>
   21dd2:	6020      	str	r0, [r4, #0]
    if (res->app_status != 0) {
   21dd4:	b130      	cbz	r0, 21de4 <ble_sm_master_id_rx+0x22>
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   21dd6:	2308      	movs	r3, #8
   21dd8:	7123      	strb	r3, [r4, #4]
        res->enc_cb = 1;
   21dda:	7d23      	ldrb	r3, [r4, #20]
   21ddc:	f043 0302 	orr.w	r3, r3, #2
   21de0:	7523      	strb	r3, [r4, #20]
}
   21de2:	bd70      	pop	{r4, r5, r6, pc}
    cmd = (struct ble_sm_master_id *)(*om)->om_data;
   21de4:	682b      	ldr	r3, [r5, #0]
   21de6:	681d      	ldr	r5, [r3, #0]
    ble_hs_lock();
   21de8:	f7fc fb9c 	bl	1e524 <ble_hs_lock>
    proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_KEY_EXCH, -1, NULL);
   21dec:	2300      	movs	r3, #0
   21dee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   21df2:	2107      	movs	r1, #7
   21df4:	4630      	mov	r0, r6
   21df6:	f7ff ff07 	bl	21c08 <ble_sm_proc_find>
    if (proc == NULL) {
   21dfa:	b1d0      	cbz	r0, 21e32 <ble_sm_master_id_rx+0x70>
        proc->rx_key_flags &= ~BLE_SM_KE_F_MASTER_ID;
   21dfc:	7b82      	ldrb	r2, [r0, #14]
   21dfe:	f022 0202 	bic.w	r2, r2, #2
   21e02:	7382      	strb	r2, [r0, #14]
        proc->peer_keys.ediv_rand_valid = 1;
   21e04:	f890 20b8 	ldrb.w	r2, [r0, #184]	; 0xb8
   21e08:	f042 0202 	orr.w	r2, r2, #2
   21e0c:	f880 20b8 	strb.w	r2, [r0, #184]	; 0xb8
        proc->peer_keys.ediv = le16toh(cmd->ediv);
   21e10:	882a      	ldrh	r2, [r5, #0]
   21e12:	f8a0 20ba 	strh.w	r2, [r0, #186]	; 0xba
        proc->peer_keys.rand_val = le64toh(cmd->rand_val);
   21e16:	f8d5 1002 	ldr.w	r1, [r5, #2]
   21e1a:	f8d5 2006 	ldr.w	r2, [r5, #6]
   21e1e:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
   21e22:	f8c0 20c4 	str.w	r2, [r0, #196]	; 0xc4
        ble_sm_key_rxed(proc, res);
   21e26:	4621      	mov	r1, r4
   21e28:	f7ff fc06 	bl	21638 <ble_sm_key_rxed>
    ble_hs_unlock();
   21e2c:	f7fc fb7e 	bl	1e52c <ble_hs_unlock>
   21e30:	e7d7      	b.n	21de2 <ble_sm_master_id_rx+0x20>
        res->app_status = BLE_HS_ENOENT;
   21e32:	2305      	movs	r3, #5
   21e34:	6023      	str	r3, [r4, #0]
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   21e36:	2308      	movs	r3, #8
   21e38:	7123      	strb	r3, [r4, #4]
   21e3a:	e7f7      	b.n	21e2c <ble_sm_master_id_rx+0x6a>

00021e3c <ble_sm_enc_info_rx>:
{
   21e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21e3e:	4606      	mov	r6, r0
   21e40:	460d      	mov	r5, r1
   21e42:	4614      	mov	r4, r2
    res->app_status = ble_hs_mbuf_pullup_base(om, sizeof(*cmd));
   21e44:	2110      	movs	r1, #16
   21e46:	4628      	mov	r0, r5
   21e48:	f7fe f942 	bl	200d0 <ble_hs_mbuf_pullup_base>
   21e4c:	6020      	str	r0, [r4, #0]
    if (res->app_status != 0) {
   21e4e:	b130      	cbz	r0, 21e5e <ble_sm_enc_info_rx+0x22>
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   21e50:	2308      	movs	r3, #8
   21e52:	7123      	strb	r3, [r4, #4]
        res->enc_cb = 1;
   21e54:	7d23      	ldrb	r3, [r4, #20]
   21e56:	f043 0302 	orr.w	r3, r3, #2
   21e5a:	7523      	strb	r3, [r4, #20]
}
   21e5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cmd = (struct ble_sm_enc_info *)(*om)->om_data;
   21e5e:	682b      	ldr	r3, [r5, #0]
   21e60:	681d      	ldr	r5, [r3, #0]
    ble_hs_lock();
   21e62:	f7fc fb5f 	bl	1e524 <ble_hs_lock>
    proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_KEY_EXCH, -1, NULL);
   21e66:	2300      	movs	r3, #0
   21e68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   21e6c:	2107      	movs	r1, #7
   21e6e:	4630      	mov	r0, r6
   21e70:	f7ff feca 	bl	21c08 <ble_sm_proc_find>
    if (proc == NULL) {
   21e74:	4603      	mov	r3, r0
   21e76:	b1f8      	cbz	r0, 21eb8 <ble_sm_enc_info_rx+0x7c>
        proc->rx_key_flags &= ~BLE_SM_KE_F_ENC_INFO;
   21e78:	7b82      	ldrb	r2, [r0, #14]
   21e7a:	f022 0201 	bic.w	r2, r2, #1
   21e7e:	7382      	strb	r2, [r0, #14]
        proc->peer_keys.ltk_valid = 1;
   21e80:	f890 20b8 	ldrb.w	r2, [r0, #184]	; 0xb8
   21e84:	f042 0201 	orr.w	r2, r2, #1
   21e88:	f880 20b8 	strb.w	r2, [r0, #184]	; 0xb8
        memcpy(proc->peer_keys.ltk, cmd->ltk, 16);
   21e8c:	682f      	ldr	r7, [r5, #0]
   21e8e:	686e      	ldr	r6, [r5, #4]
   21e90:	68a8      	ldr	r0, [r5, #8]
   21e92:	68e9      	ldr	r1, [r5, #12]
   21e94:	f8c3 70ca 	str.w	r7, [r3, #202]	; 0xca
   21e98:	f8c3 60ce 	str.w	r6, [r3, #206]	; 0xce
   21e9c:	f8c3 00d2 	str.w	r0, [r3, #210]	; 0xd2
   21ea0:	f8c3 10d6 	str.w	r1, [r3, #214]	; 0xd6
        proc->peer_keys.key_size = proc->key_size;
   21ea4:	7bda      	ldrb	r2, [r3, #15]
   21ea6:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
        ble_sm_key_rxed(proc, res);
   21eaa:	4621      	mov	r1, r4
   21eac:	4618      	mov	r0, r3
   21eae:	f7ff fbc3 	bl	21638 <ble_sm_key_rxed>
    ble_hs_unlock();
   21eb2:	f7fc fb3b 	bl	1e52c <ble_hs_unlock>
   21eb6:	e7d1      	b.n	21e5c <ble_sm_enc_info_rx+0x20>
        res->app_status = BLE_HS_ENOENT;
   21eb8:	2305      	movs	r3, #5
   21eba:	6023      	str	r3, [r4, #0]
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   21ebc:	2308      	movs	r3, #8
   21ebe:	7123      	strb	r3, [r4, #4]
   21ec0:	e7f7      	b.n	21eb2 <ble_sm_enc_info_rx+0x76>

00021ec2 <ble_sm_pair_req_rx>:
{
   21ec2:	b5f0      	push	{r4, r5, r6, r7, lr}
   21ec4:	b083      	sub	sp, #12
   21ec6:	4606      	mov	r6, r0
   21ec8:	460d      	mov	r5, r1
   21eca:	4614      	mov	r4, r2
    res->app_status = ble_hs_mbuf_pullup_base(om, sizeof(*req));
   21ecc:	2106      	movs	r1, #6
   21ece:	4628      	mov	r0, r5
   21ed0:	f7fe f8fe 	bl	200d0 <ble_hs_mbuf_pullup_base>
   21ed4:	6020      	str	r0, [r4, #0]
    if (res->app_status != 0) {
   21ed6:	b108      	cbz	r0, 21edc <ble_sm_pair_req_rx+0x1a>
}
   21ed8:	b003      	add	sp, #12
   21eda:	bdf0      	pop	{r4, r5, r6, r7, pc}
    req = (struct ble_sm_pair_cmd *)(*om)->om_data;
   21edc:	682b      	ldr	r3, [r5, #0]
   21ede:	681f      	ldr	r7, [r3, #0]
    ble_hs_lock();
   21ee0:	f7fc fb20 	bl	1e524 <ble_hs_lock>
    proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_NONE, -1, &prev);
   21ee4:	ab01      	add	r3, sp, #4
   21ee6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   21eea:	21ff      	movs	r1, #255	; 0xff
   21eec:	4630      	mov	r0, r6
   21eee:	f7ff fe8b 	bl	21c08 <ble_sm_proc_find>
    if (proc != NULL) {
   21ef2:	4605      	mov	r5, r0
   21ef4:	b180      	cbz	r0, 21f18 <ble_sm_pair_req_rx+0x56>
        if (proc->state != BLE_SM_PROC_STATE_SEC_REQ) {
   21ef6:	7b43      	ldrb	r3, [r0, #13]
   21ef8:	2b08      	cmp	r3, #8
   21efa:	d007      	beq.n	21f0c <ble_sm_pair_req_rx+0x4a>
            res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   21efc:	2308      	movs	r3, #8
   21efe:	7123      	strb	r3, [r4, #4]
            res->app_status = BLE_HS_SM_US_ERR(BLE_SM_ERR_UNSPECIFIED);
   21f00:	f44f 6381 	mov.w	r3, #1032	; 0x408
   21f04:	6023      	str	r3, [r4, #0]
            ble_hs_unlock();
   21f06:	f7fc fb11 	bl	1e52c <ble_hs_unlock>
            return;
   21f0a:	e7e5      	b.n	21ed8 <ble_sm_pair_req_rx+0x16>
        ble_sm_proc_remove(proc, prev);
   21f0c:	9901      	ldr	r1, [sp, #4]
   21f0e:	f7ff f83b 	bl	20f88 <ble_sm_proc_remove>
        ble_sm_proc_free(proc);
   21f12:	4628      	mov	r0, r5
   21f14:	f7ff fd42 	bl	2199c <ble_sm_proc_free>
    ble_hs_unlock();
   21f18:	f7fc fb08 	bl	1e52c <ble_hs_unlock>
    rc = ble_sm_chk_store_overflow(conn_handle);
   21f1c:	4630      	mov	r0, r6
   21f1e:	f7ff fe21 	bl	21b64 <ble_sm_chk_store_overflow>
    if (rc != 0) {
   21f22:	b118      	cbz	r0, 21f2c <ble_sm_pair_req_rx+0x6a>
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   21f24:	2208      	movs	r2, #8
   21f26:	7122      	strb	r2, [r4, #4]
        res->app_status = rc;
   21f28:	6020      	str	r0, [r4, #0]
        return;
   21f2a:	e7d5      	b.n	21ed8 <ble_sm_pair_req_rx+0x16>
    ble_hs_lock();
   21f2c:	f7fc fafa 	bl	1e524 <ble_hs_lock>
    proc = ble_sm_proc_alloc();
   21f30:	f7ff fd3e 	bl	219b0 <ble_sm_proc_alloc>
    if (proc != NULL) {
   21f34:	4605      	mov	r5, r0
   21f36:	2800      	cmp	r0, #0
   21f38:	d04a      	beq.n	21fd0 <ble_sm_pair_req_rx+0x10e>
        proc->conn_handle = conn_handle;
   21f3a:	8146      	strh	r6, [r0, #10]
        proc->state = BLE_SM_PROC_STATE_PAIR;
   21f3c:	2300      	movs	r3, #0
   21f3e:	7343      	strb	r3, [r0, #13]
        ble_sm_insert(proc);
   21f40:	f7ff f852 	bl	20fe8 <ble_sm_insert>
        proc->pair_req[0] = BLE_SM_OP_PAIR_REQ;
   21f44:	2301      	movs	r3, #1
   21f46:	742b      	strb	r3, [r5, #16]
        memcpy(proc->pair_req + 1, req, sizeof(*req));
   21f48:	683b      	ldr	r3, [r7, #0]
   21f4a:	f8c5 3011 	str.w	r3, [r5, #17]
   21f4e:	88bb      	ldrh	r3, [r7, #4]
   21f50:	f8a5 3015 	strh.w	r3, [r5, #21]
        conn = ble_hs_conn_find_assert(proc->conn_handle);
   21f54:	8968      	ldrh	r0, [r5, #10]
   21f56:	f7fd f98d 	bl	1f274 <ble_hs_conn_find_assert>
        if (conn->bhc_flags & BLE_HS_CONN_F_MASTER) {
   21f5a:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   21f5e:	f013 0f01 	tst.w	r3, #1
   21f62:	d007      	beq.n	21f74 <ble_sm_pair_req_rx+0xb2>
            res->sm_err = BLE_SM_ERR_CMD_NOT_SUPP;
   21f64:	2307      	movs	r3, #7
   21f66:	7123      	strb	r3, [r4, #4]
            res->app_status = BLE_HS_SM_US_ERR(BLE_SM_ERR_CMD_NOT_SUPP);
   21f68:	f240 4307 	movw	r3, #1031	; 0x407
   21f6c:	6023      	str	r3, [r4, #0]
    key_size = 0;
   21f6e:	2500      	movs	r5, #0
    proc_flags = 0;
   21f70:	462f      	mov	r7, r5
   21f72:	e02f      	b.n	21fd4 <ble_sm_pair_req_rx+0x112>
        } else if (req->max_enc_key_size < BLE_SM_PAIR_KEY_SZ_MIN) {
   21f74:	78fb      	ldrb	r3, [r7, #3]
   21f76:	2b06      	cmp	r3, #6
   21f78:	d807      	bhi.n	21f8a <ble_sm_pair_req_rx+0xc8>
            res->sm_err = BLE_SM_ERR_ENC_KEY_SZ;
   21f7a:	2306      	movs	r3, #6
   21f7c:	7123      	strb	r3, [r4, #4]
            res->app_status = BLE_HS_SM_US_ERR(BLE_SM_ERR_ENC_KEY_SZ);
   21f7e:	f240 4306 	movw	r3, #1030	; 0x406
   21f82:	6023      	str	r3, [r4, #0]
    key_size = 0;
   21f84:	2500      	movs	r5, #0
    proc_flags = 0;
   21f86:	462f      	mov	r7, r5
   21f88:	e024      	b.n	21fd4 <ble_sm_pair_req_rx+0x112>
        } else if (req->max_enc_key_size > BLE_SM_PAIR_KEY_SZ_MAX) {
   21f8a:	2b10      	cmp	r3, #16
   21f8c:	d907      	bls.n	21f9e <ble_sm_pair_req_rx+0xdc>
            res->sm_err = BLE_SM_ERR_INVAL;
   21f8e:	230a      	movs	r3, #10
   21f90:	7123      	strb	r3, [r4, #4]
            res->app_status = BLE_HS_SM_US_ERR(BLE_SM_ERR_INVAL);
   21f92:	f240 430a 	movw	r3, #1034	; 0x40a
   21f96:	6023      	str	r3, [r4, #0]
    key_size = 0;
   21f98:	2500      	movs	r5, #0
    proc_flags = 0;
   21f9a:	462f      	mov	r7, r5
   21f9c:	e01a      	b.n	21fd4 <ble_sm_pair_req_rx+0x112>
        } else if (!ble_sm_verify_auth_requirements(req->authreq)) {
   21f9e:	78b8      	ldrb	r0, [r7, #2]
   21fa0:	f7ff f898 	bl	210d4 <ble_sm_verify_auth_requirements>
   21fa4:	b938      	cbnz	r0, 21fb6 <ble_sm_pair_req_rx+0xf4>
            res->sm_err = BLE_SM_ERR_AUTHREQ;
   21fa6:	2303      	movs	r3, #3
   21fa8:	7123      	strb	r3, [r4, #4]
            res->app_status = BLE_HS_SM_US_ERR(BLE_SM_ERR_AUTHREQ);
   21faa:	f240 4303 	movw	r3, #1027	; 0x403
   21fae:	6023      	str	r3, [r4, #0]
    key_size = 0;
   21fb0:	2500      	movs	r5, #0
    proc_flags = 0;
   21fb2:	462f      	mov	r7, r5
   21fb4:	e00e      	b.n	21fd4 <ble_sm_pair_req_rx+0x112>
            ble_sm_pair_rsp_fill(proc);
   21fb6:	4628      	mov	r0, r5
   21fb8:	f7ff f878 	bl	210ac <ble_sm_pair_rsp_fill>
            ble_sm_pair_cfg(proc);
   21fbc:	4628      	mov	r0, r5
   21fbe:	f7ff f8ab 	bl	21118 <ble_sm_pair_cfg>
            proc_flags = proc->flags;
   21fc2:	7a2f      	ldrb	r7, [r5, #8]
            key_size = proc->key_size;
   21fc4:	7bed      	ldrb	r5, [r5, #15]
            res->execute = 1;
   21fc6:	7d23      	ldrb	r3, [r4, #20]
   21fc8:	f043 0301 	orr.w	r3, r3, #1
   21fcc:	7523      	strb	r3, [r4, #20]
   21fce:	e001      	b.n	21fd4 <ble_sm_pair_req_rx+0x112>
    key_size = 0;
   21fd0:	2500      	movs	r5, #0
    proc_flags = 0;
   21fd2:	462f      	mov	r7, r5
    ble_hs_unlock();
   21fd4:	f7fc faaa 	bl	1e52c <ble_hs_unlock>
    if (res->app_status == 0) {
   21fd8:	6823      	ldr	r3, [r4, #0]
   21fda:	2b00      	cmp	r3, #0
   21fdc:	f47f af7c 	bne.w	21ed8 <ble_sm_pair_req_rx+0x16>
        rc = ble_sm_chk_repeat_pairing(conn_handle, proc_flags, key_size);
   21fe0:	462a      	mov	r2, r5
   21fe2:	4639      	mov	r1, r7
   21fe4:	4630      	mov	r0, r6
   21fe6:	f7ff fd54 	bl	21a92 <ble_sm_chk_repeat_pairing>
        if (rc != 0) {
   21fea:	2800      	cmp	r0, #0
   21fec:	f43f af74 	beq.w	21ed8 <ble_sm_pair_req_rx+0x16>
            res->app_status = rc;
   21ff0:	6020      	str	r0, [r4, #0]
            res->execute = 0;
   21ff2:	7d23      	ldrb	r3, [r4, #20]
   21ff4:	f36f 0300 	bfc	r3, #0, #1
   21ff8:	7523      	strb	r3, [r4, #20]
   21ffa:	e76d      	b.n	21ed8 <ble_sm_pair_req_rx+0x16>

00021ffc <ble_sm_ioact_state>:
    switch (action) {
   21ffc:	3801      	subs	r0, #1
   21ffe:	2804      	cmp	r0, #4
   22000:	d804      	bhi.n	2200c <ble_sm_ioact_state+0x10>
   22002:	e8df f000 	tbb	[pc, r0]
   22006:	0707      	.short	0x0707
   22008:	0907      	.short	0x0907
   2200a:	05          	.byte	0x05
   2200b:	00          	.byte	0x00
        return BLE_SM_PROC_STATE_NONE;
   2200c:	20ff      	movs	r0, #255	; 0xff
   2200e:	4770      	bx	lr
        return BLE_SM_PROC_STATE_RANDOM;
   22010:	2002      	movs	r0, #2
   22012:	4770      	bx	lr
        return BLE_SM_PROC_STATE_CONFIRM;
   22014:	2001      	movs	r0, #1
   22016:	4770      	bx	lr
        return BLE_SM_PROC_STATE_DHKEY_CHECK;
   22018:	200a      	movs	r0, #10
}
   2201a:	4770      	bx	lr

0002201c <ble_sm_proc_can_advance>:
{
   2201c:	b510      	push	{r4, lr}
   2201e:	b082      	sub	sp, #8
   22020:	4604      	mov	r4, r0
    rc = ble_sm_io_action(proc, &ioact);
   22022:	f10d 0107 	add.w	r1, sp, #7
   22026:	f7ff f86d 	bl	21104 <ble_sm_io_action>
    if (ble_sm_ioact_state(ioact) != proc->state) {
   2202a:	f89d 0007 	ldrb.w	r0, [sp, #7]
   2202e:	f7ff ffe5 	bl	21ffc <ble_sm_ioact_state>
   22032:	7b63      	ldrb	r3, [r4, #13]
   22034:	4298      	cmp	r0, r3
   22036:	d002      	beq.n	2203e <ble_sm_proc_can_advance+0x22>
        return 1;
   22038:	2001      	movs	r0, #1
}
   2203a:	b002      	add	sp, #8
   2203c:	bd10      	pop	{r4, pc}
    if (proc->flags & BLE_SM_PROC_F_IO_INJECTED &&
   2203e:	7a23      	ldrb	r3, [r4, #8]
   22040:	f003 0306 	and.w	r3, r3, #6
   22044:	2b06      	cmp	r3, #6
   22046:	d001      	beq.n	2204c <ble_sm_proc_can_advance+0x30>
    return 0;
   22048:	2000      	movs	r0, #0
   2204a:	e7f6      	b.n	2203a <ble_sm_proc_can_advance+0x1e>
        return 1;
   2204c:	2001      	movs	r0, #1
   2204e:	e7f4      	b.n	2203a <ble_sm_proc_can_advance+0x1e>

00022050 <ble_sm_confirm_rx>:
{
   22050:	b5f0      	push	{r4, r5, r6, r7, lr}
   22052:	b083      	sub	sp, #12
   22054:	4606      	mov	r6, r0
   22056:	460d      	mov	r5, r1
   22058:	4614      	mov	r4, r2
    res->app_status = ble_hs_mbuf_pullup_base(om, sizeof(*cmd));
   2205a:	2110      	movs	r1, #16
   2205c:	4628      	mov	r0, r5
   2205e:	f7fe f837 	bl	200d0 <ble_hs_mbuf_pullup_base>
   22062:	6020      	str	r0, [r4, #0]
    if (res->app_status != 0) {
   22064:	b138      	cbz	r0, 22076 <ble_sm_confirm_rx+0x26>
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   22066:	2308      	movs	r3, #8
   22068:	7123      	strb	r3, [r4, #4]
        res->enc_cb = 1;
   2206a:	7d23      	ldrb	r3, [r4, #20]
   2206c:	f043 0302 	orr.w	r3, r3, #2
   22070:	7523      	strb	r3, [r4, #20]
}
   22072:	b003      	add	sp, #12
   22074:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cmd = (struct ble_sm_pair_confirm *)(*om)->om_data;
   22076:	682b      	ldr	r3, [r5, #0]
   22078:	681f      	ldr	r7, [r3, #0]
    ble_hs_lock();
   2207a:	f7fc fa53 	bl	1e524 <ble_hs_lock>
    proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_CONFIRM, -1, NULL);
   2207e:	2300      	movs	r3, #0
   22080:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   22084:	2101      	movs	r1, #1
   22086:	4630      	mov	r0, r6
   22088:	f7ff fdbe 	bl	21c08 <ble_sm_proc_find>
    if (proc == NULL) {
   2208c:	4605      	mov	r5, r0
   2208e:	b1b0      	cbz	r0, 220be <ble_sm_confirm_rx+0x6e>
        memcpy(proc->confirm_peer, cmd->value, 16);
   22090:	683e      	ldr	r6, [r7, #0]
   22092:	6878      	ldr	r0, [r7, #4]
   22094:	68b9      	ldr	r1, [r7, #8]
   22096:	68fa      	ldr	r2, [r7, #12]
   22098:	f8c5 602e 	str.w	r6, [r5, #46]	; 0x2e
   2209c:	f8c5 0032 	str.w	r0, [r5, #50]	; 0x32
   220a0:	f8c5 1036 	str.w	r1, [r5, #54]	; 0x36
   220a4:	f8c5 203a 	str.w	r2, [r5, #58]	; 0x3a
        if (proc->flags & BLE_SM_PROC_F_INITIATOR) {
   220a8:	7a2b      	ldrb	r3, [r5, #8]
   220aa:	f013 0f01 	tst.w	r3, #1
   220ae:	d00b      	beq.n	220c8 <ble_sm_confirm_rx+0x78>
            proc->state = BLE_SM_PROC_STATE_RANDOM;
   220b0:	2302      	movs	r3, #2
   220b2:	736b      	strb	r3, [r5, #13]
            res->execute = 1;
   220b4:	7d23      	ldrb	r3, [r4, #20]
   220b6:	f043 0301 	orr.w	r3, r3, #1
   220ba:	7523      	strb	r3, [r4, #20]
   220bc:	e001      	b.n	220c2 <ble_sm_confirm_rx+0x72>
        res->app_status = BLE_HS_ENOENT;
   220be:	2305      	movs	r3, #5
   220c0:	6023      	str	r3, [r4, #0]
    ble_hs_unlock();
   220c2:	f7fc fa33 	bl	1e52c <ble_hs_unlock>
   220c6:	e7d4      	b.n	22072 <ble_sm_confirm_rx+0x22>
            rc = ble_sm_io_action(proc, &ioact);
   220c8:	f10d 0107 	add.w	r1, sp, #7
   220cc:	4628      	mov	r0, r5
   220ce:	f7ff f819 	bl	21104 <ble_sm_io_action>
            if (ble_sm_ioact_state(ioact) == proc->state) {
   220d2:	f89d 0007 	ldrb.w	r0, [sp, #7]
   220d6:	f7ff ff91 	bl	21ffc <ble_sm_ioact_state>
   220da:	7b6b      	ldrb	r3, [r5, #13]
   220dc:	4298      	cmp	r0, r3
   220de:	d009      	beq.n	220f4 <ble_sm_confirm_rx+0xa4>
            if (ble_sm_proc_can_advance(proc)) {
   220e0:	4628      	mov	r0, r5
   220e2:	f7ff ff9b 	bl	2201c <ble_sm_proc_can_advance>
   220e6:	2800      	cmp	r0, #0
   220e8:	d0eb      	beq.n	220c2 <ble_sm_confirm_rx+0x72>
                res->execute = 1;
   220ea:	7d23      	ldrb	r3, [r4, #20]
   220ec:	f043 0301 	orr.w	r3, r3, #1
   220f0:	7523      	strb	r3, [r4, #20]
   220f2:	e7e6      	b.n	220c2 <ble_sm_confirm_rx+0x72>
                proc->flags |= BLE_SM_PROC_F_ADVANCE_ON_IO;
   220f4:	7a2b      	ldrb	r3, [r5, #8]
   220f6:	f043 0304 	orr.w	r3, r3, #4
   220fa:	722b      	strb	r3, [r5, #8]
   220fc:	e7f0      	b.n	220e0 <ble_sm_confirm_rx+0x90>

000220fe <ble_sm_pair_rsp_rx>:
{
   220fe:	b5f0      	push	{r4, r5, r6, r7, lr}
   22100:	b083      	sub	sp, #12
   22102:	4606      	mov	r6, r0
   22104:	460d      	mov	r5, r1
   22106:	4614      	mov	r4, r2
    res->app_status = ble_hs_mbuf_pullup_base(om, sizeof(*rsp));
   22108:	2106      	movs	r1, #6
   2210a:	4628      	mov	r0, r5
   2210c:	f7fd ffe0 	bl	200d0 <ble_hs_mbuf_pullup_base>
   22110:	6020      	str	r0, [r4, #0]
    if (res->app_status != 0) {
   22112:	b128      	cbz	r0, 22120 <ble_sm_pair_rsp_rx+0x22>
        res->enc_cb = 1;
   22114:	7d23      	ldrb	r3, [r4, #20]
   22116:	f043 0302 	orr.w	r3, r3, #2
   2211a:	7523      	strb	r3, [r4, #20]
}
   2211c:	b003      	add	sp, #12
   2211e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    rsp = (struct ble_sm_pair_cmd *)(*om)->om_data;
   22120:	682b      	ldr	r3, [r5, #0]
   22122:	681f      	ldr	r7, [r3, #0]
    ble_hs_lock();
   22124:	f7fc f9fe 	bl	1e524 <ble_hs_lock>
    proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_PAIR, 1, NULL);
   22128:	2300      	movs	r3, #0
   2212a:	2201      	movs	r2, #1
   2212c:	4619      	mov	r1, r3
   2212e:	4630      	mov	r0, r6
   22130:	f7ff fd6a 	bl	21c08 <ble_sm_proc_find>
    if (proc != NULL) {
   22134:	4605      	mov	r5, r0
   22136:	b168      	cbz	r0, 22154 <ble_sm_pair_rsp_rx+0x56>
        proc->pair_rsp[0] = BLE_SM_OP_PAIR_RSP;
   22138:	2302      	movs	r3, #2
   2213a:	75c3      	strb	r3, [r0, #23]
        memcpy(proc->pair_rsp + 1, rsp, sizeof(*rsp));
   2213c:	683b      	ldr	r3, [r7, #0]
   2213e:	6183      	str	r3, [r0, #24]
   22140:	88bb      	ldrh	r3, [r7, #4]
   22142:	8383      	strh	r3, [r0, #28]
        if (rsp->max_enc_key_size < BLE_SM_PAIR_KEY_SZ_MIN) {
   22144:	78fb      	ldrb	r3, [r7, #3]
   22146:	2b06      	cmp	r3, #6
   22148:	d807      	bhi.n	2215a <ble_sm_pair_rsp_rx+0x5c>
            res->sm_err = BLE_SM_ERR_ENC_KEY_SZ;
   2214a:	2306      	movs	r3, #6
   2214c:	7123      	strb	r3, [r4, #4]
            res->app_status = BLE_HS_SM_US_ERR(BLE_SM_ERR_ENC_KEY_SZ);
   2214e:	f240 4306 	movw	r3, #1030	; 0x406
   22152:	6023      	str	r3, [r4, #0]
    ble_hs_unlock();
   22154:	f7fc f9ea 	bl	1e52c <ble_hs_unlock>
   22158:	e7e0      	b.n	2211c <ble_sm_pair_rsp_rx+0x1e>
        } else if (rsp->max_enc_key_size > BLE_SM_PAIR_KEY_SZ_MAX) {
   2215a:	2b10      	cmp	r3, #16
   2215c:	d905      	bls.n	2216a <ble_sm_pair_rsp_rx+0x6c>
            res->sm_err = BLE_SM_ERR_INVAL;
   2215e:	230a      	movs	r3, #10
   22160:	7123      	strb	r3, [r4, #4]
            res->app_status = BLE_HS_SM_US_ERR(BLE_SM_ERR_INVAL);
   22162:	f240 430a 	movw	r3, #1034	; 0x40a
   22166:	6023      	str	r3, [r4, #0]
   22168:	e7f4      	b.n	22154 <ble_sm_pair_rsp_rx+0x56>
            ble_sm_pair_cfg(proc);
   2216a:	f7fe ffd5 	bl	21118 <ble_sm_pair_cfg>
            rc = ble_sm_io_action(proc, &ioact);
   2216e:	f10d 0107 	add.w	r1, sp, #7
   22172:	4628      	mov	r0, r5
   22174:	f7fe ffc6 	bl	21104 <ble_sm_io_action>
            if (rc != 0) {
   22178:	b148      	cbz	r0, 2218e <ble_sm_pair_rsp_rx+0x90>
                res->sm_err = BLE_SM_ERR_AUTHREQ;
   2217a:	2303      	movs	r3, #3
   2217c:	7123      	strb	r3, [r4, #4]
                res->app_status = BLE_HS_SM_US_ERR(BLE_SM_ERR_AUTHREQ);
   2217e:	f240 4303 	movw	r3, #1027	; 0x403
   22182:	6023      	str	r3, [r4, #0]
                res->enc_cb = 1;
   22184:	7d23      	ldrb	r3, [r4, #20]
   22186:	f043 0302 	orr.w	r3, r3, #2
   2218a:	7523      	strb	r3, [r4, #20]
   2218c:	e7e2      	b.n	22154 <ble_sm_pair_rsp_rx+0x56>
                proc->state = ble_sm_state_after_pair(proc);
   2218e:	4628      	mov	r0, r5
   22190:	f7fe ff61 	bl	21056 <ble_sm_state_after_pair>
   22194:	4606      	mov	r6, r0
   22196:	7368      	strb	r0, [r5, #13]
                if (ble_sm_ioact_state(ioact) == proc->state) {
   22198:	f89d 7007 	ldrb.w	r7, [sp, #7]
   2219c:	4638      	mov	r0, r7
   2219e:	f7ff ff2d 	bl	21ffc <ble_sm_ioact_state>
   221a2:	42b0      	cmp	r0, r6
   221a4:	d009      	beq.n	221ba <ble_sm_pair_rsp_rx+0xbc>
                if (ble_sm_proc_can_advance(proc)) {
   221a6:	4628      	mov	r0, r5
   221a8:	f7ff ff38 	bl	2201c <ble_sm_proc_can_advance>
   221ac:	2800      	cmp	r0, #0
   221ae:	d0d1      	beq.n	22154 <ble_sm_pair_rsp_rx+0x56>
                    res->execute = 1;
   221b0:	7d23      	ldrb	r3, [r4, #20]
   221b2:	f043 0301 	orr.w	r3, r3, #1
   221b6:	7523      	strb	r3, [r4, #20]
   221b8:	e7cc      	b.n	22154 <ble_sm_pair_rsp_rx+0x56>
                    res->passkey_params.action = ioact;
   221ba:	7227      	strb	r7, [r4, #8]
   221bc:	e7f3      	b.n	221a6 <ble_sm_pair_rsp_rx+0xa8>

000221be <ble_sm_process_result>:
{
   221be:	b5f0      	push	{r4, r5, r6, r7, lr}
   221c0:	b083      	sub	sp, #12
   221c2:	4607      	mov	r7, r0
   221c4:	460c      	mov	r4, r1
    rm = 0;
   221c6:	2600      	movs	r6, #0
   221c8:	e02c      	b.n	22224 <ble_sm_process_result+0x66>
                ble_sm_exec(proc, res, res->state_arg);
   221ca:	6922      	ldr	r2, [r4, #16]
   221cc:	4621      	mov	r1, r4
   221ce:	f7ff f80f 	bl	211f0 <ble_sm_exec>
   221d2:	e036      	b.n	22242 <ble_sm_process_result+0x84>
                rm = 1;
   221d4:	2601      	movs	r6, #1
   221d6:	e03c      	b.n	22252 <ble_sm_process_result+0x94>
                ble_sm_proc_set_timer(proc);
   221d8:	4628      	mov	r0, r5
   221da:	f7ff fb0d 	bl	217f8 <ble_sm_proc_set_timer>
   221de:	e03c      	b.n	2225a <ble_sm_process_result+0x9c>
            ble_sm_pair_fail_tx(conn_handle, res->sm_err);
   221e0:	4638      	mov	r0, r7
   221e2:	f7ff fb4b 	bl	2187c <ble_sm_pair_fail_tx>
   221e6:	e03b      	b.n	22260 <ble_sm_process_result+0xa2>
            ble_gap_enc_event(conn_handle, res->app_status, res->restore);
   221e8:	f3c3 02c0 	ubfx	r2, r3, #3, #1
   221ec:	6821      	ldr	r1, [r4, #0]
   221ee:	4638      	mov	r0, r7
   221f0:	f7f9 faa1 	bl	1b736 <ble_gap_enc_event>
   221f4:	e03b      	b.n	2226e <ble_sm_process_result+0xb0>
            ble_gap_passkey_event(conn_handle, &res->passkey_params);
   221f6:	f104 0108 	add.w	r1, r4, #8
   221fa:	4638      	mov	r0, r7
   221fc:	f7f9 fa82 	bl	1b704 <ble_gap_passkey_event>
   22200:	e03a      	b.n	22278 <ble_sm_process_result+0xba>
        if (rm) {
   22202:	2e00      	cmp	r6, #0
   22204:	d145      	bne.n	22292 <ble_sm_process_result+0xd4>
        if (!res->execute) {
   22206:	7d23      	ldrb	r3, [r4, #20]
   22208:	f013 0f01 	tst.w	r3, #1
   2220c:	d044      	beq.n	22298 <ble_sm_process_result+0xda>
        memset(res, 0, sizeof *res);
   2220e:	2300      	movs	r3, #0
   22210:	6023      	str	r3, [r4, #0]
   22212:	6063      	str	r3, [r4, #4]
   22214:	60a3      	str	r3, [r4, #8]
   22216:	60e3      	str	r3, [r4, #12]
   22218:	6123      	str	r3, [r4, #16]
   2221a:	6163      	str	r3, [r4, #20]
        res->execute = 1;
   2221c:	7d23      	ldrb	r3, [r4, #20]
   2221e:	f043 0301 	orr.w	r3, r3, #1
   22222:	7523      	strb	r3, [r4, #20]
        ble_hs_lock();
   22224:	f7fc f97e 	bl	1e524 <ble_hs_lock>
        proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_NONE, -1,
   22228:	ab01      	add	r3, sp, #4
   2222a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2222e:	21ff      	movs	r1, #255	; 0xff
   22230:	4638      	mov	r0, r7
   22232:	f7ff fce9 	bl	21c08 <ble_sm_proc_find>
        if (proc != NULL) {
   22236:	4605      	mov	r5, r0
   22238:	b178      	cbz	r0, 2225a <ble_sm_process_result+0x9c>
            if (res->execute) {
   2223a:	7d23      	ldrb	r3, [r4, #20]
   2223c:	f013 0f01 	tst.w	r3, #1
   22240:	d1c3      	bne.n	221ca <ble_sm_process_result+0xc>
            if (res->app_status != 0) {
   22242:	6823      	ldr	r3, [r4, #0]
   22244:	b103      	cbz	r3, 22248 <ble_sm_process_result+0x8a>
                rm = 1;
   22246:	2601      	movs	r6, #1
            if (proc->state == BLE_SM_PROC_STATE_NONE) {
   22248:	7b6b      	ldrb	r3, [r5, #13]
   2224a:	2bff      	cmp	r3, #255	; 0xff
   2224c:	d0c2      	beq.n	221d4 <ble_sm_process_result+0x16>
            if (rm) {
   2224e:	2e00      	cmp	r6, #0
   22250:	d0c2      	beq.n	221d8 <ble_sm_process_result+0x1a>
                ble_sm_proc_remove(proc, prev);
   22252:	9901      	ldr	r1, [sp, #4]
   22254:	4628      	mov	r0, r5
   22256:	f7fe fe97 	bl	20f88 <ble_sm_proc_remove>
        if (res->sm_err != 0) {
   2225a:	7921      	ldrb	r1, [r4, #4]
   2225c:	2900      	cmp	r1, #0
   2225e:	d1bf      	bne.n	221e0 <ble_sm_process_result+0x22>
        ble_hs_unlock();
   22260:	f7fc f964 	bl	1e52c <ble_hs_unlock>
        if (proc == NULL) {
   22264:	b1c5      	cbz	r5, 22298 <ble_sm_process_result+0xda>
        if (res->enc_cb) {
   22266:	7d23      	ldrb	r3, [r4, #20]
   22268:	f013 0f02 	tst.w	r3, #2
   2226c:	d1bc      	bne.n	221e8 <ble_sm_process_result+0x2a>
        if (res->app_status == 0 &&
   2226e:	6823      	ldr	r3, [r4, #0]
   22270:	b913      	cbnz	r3, 22278 <ble_sm_process_result+0xba>
            res->passkey_params.action != BLE_SM_IOACT_NONE) {
   22272:	7a23      	ldrb	r3, [r4, #8]
        if (res->app_status == 0 &&
   22274:	2b00      	cmp	r3, #0
   22276:	d1be      	bne.n	221f6 <ble_sm_process_result+0x38>
        if (res->app_status == 0    &&
   22278:	6823      	ldr	r3, [r4, #0]
   2227a:	2b00      	cmp	r3, #0
   2227c:	d1c1      	bne.n	22202 <ble_sm_process_result+0x44>
   2227e:	2e00      	cmp	r6, #0
   22280:	d0bf      	beq.n	22202 <ble_sm_process_result+0x44>
            proc->flags & BLE_SM_PROC_F_BONDING) {
   22282:	7a2b      	ldrb	r3, [r5, #8]
            rm                      &&
   22284:	f013 0f20 	tst.w	r3, #32
   22288:	d0bb      	beq.n	22202 <ble_sm_process_result+0x44>
            ble_sm_persist_keys(proc);
   2228a:	4628      	mov	r0, r5
   2228c:	f7ff fb12 	bl	218b4 <ble_sm_persist_keys>
   22290:	e7b7      	b.n	22202 <ble_sm_process_result+0x44>
            ble_sm_proc_free(proc);
   22292:	4628      	mov	r0, r5
   22294:	f7ff fb82 	bl	2199c <ble_sm_proc_free>
}
   22298:	b003      	add	sp, #12
   2229a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002229c <ble_sm_enc_event_rx>:
{
   2229c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2229e:	b089      	sub	sp, #36	; 0x24
   222a0:	4606      	mov	r6, r0
   222a2:	460d      	mov	r5, r1
   222a4:	4617      	mov	r7, r2
    memset(&res, 0, sizeof res);
   222a6:	2400      	movs	r4, #0
   222a8:	9402      	str	r4, [sp, #8]
   222aa:	9403      	str	r4, [sp, #12]
   222ac:	9404      	str	r4, [sp, #16]
   222ae:	9405      	str	r4, [sp, #20]
   222b0:	9406      	str	r4, [sp, #24]
   222b2:	9407      	str	r4, [sp, #28]
    ble_hs_lock();
   222b4:	f7fc f936 	bl	1e524 <ble_hs_lock>
    proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_NONE, -1, NULL);
   222b8:	4623      	mov	r3, r4
   222ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   222be:	21ff      	movs	r1, #255	; 0xff
   222c0:	4630      	mov	r0, r6
   222c2:	f7ff fca1 	bl	21c08 <ble_sm_proc_find>
    if (proc != NULL) {
   222c6:	4604      	mov	r4, r0
   222c8:	2800      	cmp	r0, #0
   222ca:	d03a      	beq.n	22342 <ble_sm_enc_event_rx+0xa6>
        switch (proc->state) {
   222cc:	7b43      	ldrb	r3, [r0, #13]
   222ce:	2b05      	cmp	r3, #5
   222d0:	d00a      	beq.n	222e8 <ble_sm_enc_event_rx+0x4c>
   222d2:	2b06      	cmp	r3, #6
   222d4:	d023      	beq.n	2231e <ble_sm_enc_event_rx+0x82>
            proc->state = BLE_SM_PROC_STATE_NONE;
   222d6:	23ff      	movs	r3, #255	; 0xff
   222d8:	7343      	strb	r3, [r0, #13]
            res.sm_err = BLE_SM_ERR_UNSPECIFIED;
   222da:	2308      	movs	r3, #8
   222dc:	f88d 300c 	strb.w	r3, [sp, #12]
    key_size = 0;
   222e0:	2100      	movs	r1, #0
    bonded = 0;
   222e2:	460b      	mov	r3, r1
    authenticated = 0;
   222e4:	460a      	mov	r2, r1
            break;
   222e6:	e02f      	b.n	22348 <ble_sm_enc_event_rx+0xac>
            if (evt_status == 0) {
   222e8:	b9ad      	cbnz	r5, 22316 <ble_sm_enc_event_rx+0x7a>
                proc->state = BLE_SM_PROC_STATE_KEY_EXCH;
   222ea:	2307      	movs	r3, #7
   222ec:	7343      	strb	r3, [r0, #13]
                if (!(proc->flags & BLE_SM_PROC_F_INITIATOR) ||
   222ee:	7a03      	ldrb	r3, [r0, #8]
   222f0:	f013 0f01 	tst.w	r3, #1
   222f4:	d001      	beq.n	222fa <ble_sm_enc_event_rx+0x5e>
                    proc->rx_key_flags == 0) {
   222f6:	7b83      	ldrb	r3, [r0, #14]
                if (!(proc->flags & BLE_SM_PROC_F_INITIATOR) ||
   222f8:	b92b      	cbnz	r3, 22306 <ble_sm_enc_event_rx+0x6a>
                    res.execute = 1;
   222fa:	f89d 301c 	ldrb.w	r3, [sp, #28]
   222fe:	f043 0301 	orr.w	r3, r3, #1
   22302:	f88d 301c 	strb.w	r3, [sp, #28]
                key_size = proc->key_size;
   22306:	7be1      	ldrb	r1, [r4, #15]
            if (proc->flags & BLE_SM_PROC_F_AUTHENTICATED) {
   22308:	7a23      	ldrb	r3, [r4, #8]
   2230a:	f013 0f08 	tst.w	r3, #8
   2230e:	d132      	bne.n	22376 <ble_sm_enc_event_rx+0xda>
    bonded = 0;
   22310:	2300      	movs	r3, #0
    authenticated = 0;
   22312:	461a      	mov	r2, r3
   22314:	e018      	b.n	22348 <ble_sm_enc_event_rx+0xac>
                proc->state = BLE_SM_PROC_STATE_NONE;
   22316:	23ff      	movs	r3, #255	; 0xff
   22318:	7343      	strb	r3, [r0, #13]
    key_size = 0;
   2231a:	2100      	movs	r1, #0
   2231c:	e7f4      	b.n	22308 <ble_sm_enc_event_rx+0x6c>
            proc->state = BLE_SM_PROC_STATE_NONE;
   2231e:	23ff      	movs	r3, #255	; 0xff
   22320:	7343      	strb	r3, [r0, #13]
            if (proc->flags & BLE_SM_PROC_F_AUTHENTICATED) {
   22322:	7a03      	ldrb	r3, [r0, #8]
   22324:	f013 0f08 	tst.w	r3, #8
   22328:	d109      	bne.n	2233e <ble_sm_enc_event_rx+0xa2>
    authenticated = 0;
   2232a:	2200      	movs	r2, #0
            res.restore = 1;
   2232c:	f89d 301c 	ldrb.w	r3, [sp, #28]
   22330:	f043 0308 	orr.w	r3, r3, #8
   22334:	f88d 301c 	strb.w	r3, [sp, #28]
            key_size = proc->key_size;
   22338:	7be1      	ldrb	r1, [r4, #15]
            bonded = 1;
   2233a:	2301      	movs	r3, #1
            break;
   2233c:	e004      	b.n	22348 <ble_sm_enc_event_rx+0xac>
                authenticated = 1;
   2233e:	2201      	movs	r2, #1
   22340:	e7f4      	b.n	2232c <ble_sm_enc_event_rx+0x90>
    key_size = 0;
   22342:	2100      	movs	r1, #0
    bonded = 0;
   22344:	460b      	mov	r3, r1
    authenticated = 0;
   22346:	460a      	mov	r2, r1
    if (evt_status == 0) {
   22348:	b1c5      	cbz	r5, 2237c <ble_sm_enc_event_rx+0xe0>
    if (proc == NULL || proc->state == BLE_SM_PROC_STATE_NONE) {
   2234a:	b114      	cbz	r4, 22352 <ble_sm_enc_event_rx+0xb6>
   2234c:	7b63      	ldrb	r3, [r4, #13]
   2234e:	2bff      	cmp	r3, #255	; 0xff
   22350:	d109      	bne.n	22366 <ble_sm_enc_event_rx+0xca>
        res.enc_cb = 1;
   22352:	f89d 301c 	ldrb.w	r3, [sp, #28]
   22356:	f043 0302 	orr.w	r3, r3, #2
   2235a:	f88d 301c 	strb.w	r3, [sp, #28]
        res.app_status = BLE_HS_HCI_ERR(evt_status);
   2235e:	b19d      	cbz	r5, 22388 <ble_sm_enc_event_rx+0xec>
   22360:	f505 7500 	add.w	r5, r5, #512	; 0x200
   22364:	9502      	str	r5, [sp, #8]
    ble_hs_unlock();
   22366:	f7fc f8e1 	bl	1e52c <ble_hs_unlock>
    ble_sm_process_result(conn_handle, &res);
   2236a:	a902      	add	r1, sp, #8
   2236c:	4630      	mov	r0, r6
   2236e:	f7ff ff26 	bl	221be <ble_sm_process_result>
}
   22372:	b009      	add	sp, #36	; 0x24
   22374:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bonded = 0;
   22376:	2300      	movs	r3, #0
                authenticated = 1;
   22378:	2201      	movs	r2, #1
   2237a:	e7e5      	b.n	22348 <ble_sm_enc_event_rx+0xac>
        ble_sm_update_sec_state(conn_handle, encrypted, authenticated, bonded,
   2237c:	9100      	str	r1, [sp, #0]
   2237e:	4639      	mov	r1, r7
   22380:	4630      	mov	r0, r6
   22382:	f7fe ffdf 	bl	21344 <ble_sm_update_sec_state>
   22386:	e7e0      	b.n	2234a <ble_sm_enc_event_rx+0xae>
        res.app_status = BLE_HS_HCI_ERR(evt_status);
   22388:	2500      	movs	r5, #0
   2238a:	e7eb      	b.n	22364 <ble_sm_enc_event_rx+0xc8>

0002238c <ble_sm_rx>:
    return res.app_status;
}

static int
ble_sm_rx(struct ble_l2cap_chan *chan)
{
   2238c:	b570      	push	{r4, r5, r6, lr}
   2238e:	b088      	sub	sp, #32
   22390:	4604      	mov	r4, r0
    uint8_t op;
    uint16_t conn_handle;
    struct os_mbuf **om;
    int rc;

    STATS_INC(ble_l2cap_stats, sm_rx);
   22392:	4a1b      	ldr	r2, [pc, #108]	; (22400 <ble_sm_rx+0x74>)
   22394:	6b13      	ldr	r3, [r2, #48]	; 0x30
   22396:	3301      	adds	r3, #1
   22398:	6313      	str	r3, [r2, #48]	; 0x30

    conn_handle = ble_l2cap_get_conn_handle(chan);
   2239a:	f7fe fa38 	bl	2080e <ble_l2cap_get_conn_handle>
    if (conn_handle == BLE_HS_CONN_HANDLE_NONE) {
   2239e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   223a2:	4298      	cmp	r0, r3
   223a4:	d025      	beq.n	223f2 <ble_sm_rx+0x66>
   223a6:	4605      	mov	r5, r0
        return BLE_HS_ENOTCONN;
    }

    om = &chan->rx_buf;
   223a8:	f104 0610 	add.w	r6, r4, #16
    BLE_HS_DBG_ASSERT(*om != NULL);

    rc = os_mbuf_copydata(*om, 0, 1, &op);
   223ac:	f10d 0307 	add.w	r3, sp, #7
   223b0:	2201      	movs	r2, #1
   223b2:	2100      	movs	r1, #0
   223b4:	6920      	ldr	r0, [r4, #16]
   223b6:	f7eb fbcf 	bl	db58 <os_mbuf_copydata>
    if (rc != 0) {
   223ba:	b9e0      	cbnz	r0, 223f6 <ble_sm_rx+0x6a>
        return BLE_HS_EBADDATA;
    }

    /* Strip L2CAP SM header from the front of the mbuf. */
    os_mbuf_adj(*om, 1);
   223bc:	2101      	movs	r1, #1
   223be:	6920      	ldr	r0, [r4, #16]
   223c0:	f7eb fbf7 	bl	dbb2 <os_mbuf_adj>

    rx_cb = ble_sm_dispatch_get(op);
   223c4:	f89d 0007 	ldrb.w	r0, [sp, #7]
   223c8:	f7fe fdd4 	bl	20f74 <ble_sm_dispatch_get>
    if (rx_cb != NULL) {
   223cc:	4604      	mov	r4, r0
   223ce:	b1a8      	cbz	r0, 223fc <ble_sm_rx+0x70>
        memset(&res, 0, sizeof res);
   223d0:	2300      	movs	r3, #0
   223d2:	9302      	str	r3, [sp, #8]
   223d4:	9303      	str	r3, [sp, #12]
   223d6:	9304      	str	r3, [sp, #16]
   223d8:	9305      	str	r3, [sp, #20]
   223da:	9306      	str	r3, [sp, #24]
   223dc:	9307      	str	r3, [sp, #28]

        rx_cb(conn_handle, om, &res);
   223de:	aa02      	add	r2, sp, #8
   223e0:	4631      	mov	r1, r6
   223e2:	4628      	mov	r0, r5
   223e4:	47a0      	blx	r4
        ble_sm_process_result(conn_handle, &res);
   223e6:	a902      	add	r1, sp, #8
   223e8:	4628      	mov	r0, r5
   223ea:	f7ff fee8 	bl	221be <ble_sm_process_result>
        rc = res.app_status;
   223ee:	9802      	ldr	r0, [sp, #8]
   223f0:	e002      	b.n	223f8 <ble_sm_rx+0x6c>
        return BLE_HS_ENOTCONN;
   223f2:	2007      	movs	r0, #7
   223f4:	e000      	b.n	223f8 <ble_sm_rx+0x6c>
        return BLE_HS_EBADDATA;
   223f6:	200a      	movs	r0, #10
    } else {
        rc = BLE_HS_ENOTSUP;
    }

    return rc;
}
   223f8:	b008      	add	sp, #32
   223fa:	bd70      	pop	{r4, r5, r6, pc}
        rc = BLE_HS_ENOTSUP;
   223fc:	2008      	movs	r0, #8
   223fe:	e7fb      	b.n	223f8 <ble_sm_rx+0x6c>
   22400:	20004678 	.word	0x20004678

00022404 <ble_sm_enc_change_rx>:
{
   22404:	b508      	push	{r3, lr}
                        ev->enabled & 0x01);
   22406:	78c2      	ldrb	r2, [r0, #3]
    ble_sm_enc_event_rx(le16toh(ev->connection_handle), ev->status,
   22408:	f002 0201 	and.w	r2, r2, #1
   2240c:	7801      	ldrb	r1, [r0, #0]
   2240e:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   22412:	f7ff ff43 	bl	2229c <ble_sm_enc_event_rx>
}
   22416:	bd08      	pop	{r3, pc}

00022418 <ble_sm_enc_key_refresh_rx>:
{
   22418:	b508      	push	{r3, lr}
    ble_sm_enc_event_rx(le16toh(ev->conn_handle), ev->status, 1);
   2241a:	2201      	movs	r2, #1
   2241c:	7801      	ldrb	r1, [r0, #0]
   2241e:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   22422:	f7ff ff3b 	bl	2229c <ble_sm_enc_event_rx>
}
   22426:	bd08      	pop	{r3, pc}

00022428 <ble_sm_ltk_req_rx>:
{
   22428:	b5f0      	push	{r4, r5, r6, r7, lr}
   2242a:	b0a9      	sub	sp, #164	; 0xa4
   2242c:	4606      	mov	r6, r0
    uint16_t conn_handle = le16toh(ev->conn_handle);
   2242e:	f8b0 7001 	ldrh.w	r7, [r0, #1]
   22432:	b2bd      	uxth	r5, r7
    memset(&res, 0, sizeof res);
   22434:	2400      	movs	r4, #0
   22436:	9407      	str	r4, [sp, #28]
   22438:	9408      	str	r4, [sp, #32]
   2243a:	9409      	str	r4, [sp, #36]	; 0x24
   2243c:	940a      	str	r4, [sp, #40]	; 0x28
   2243e:	940b      	str	r4, [sp, #44]	; 0x2c
   22440:	940c      	str	r4, [sp, #48]	; 0x30
    ble_hs_lock();
   22442:	f7fc f86f 	bl	1e524 <ble_hs_lock>
    proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_NONE, 0, NULL);
   22446:	4623      	mov	r3, r4
   22448:	4622      	mov	r2, r4
   2244a:	21ff      	movs	r1, #255	; 0xff
   2244c:	4628      	mov	r0, r5
   2244e:	f7ff fbdb 	bl	21c08 <ble_sm_proc_find>
    if (proc == NULL) {
   22452:	b168      	cbz	r0, 22470 <ble_sm_ltk_req_rx+0x48>
   22454:	4604      	mov	r4, r0
    } else if (proc->state == BLE_SM_PROC_STATE_SEC_REQ) {
   22456:	7b43      	ldrb	r3, [r0, #13]
   22458:	2b08      	cmp	r3, #8
   2245a:	d01c      	beq.n	22496 <ble_sm_ltk_req_rx+0x6e>
    } else if (proc->state == BLE_SM_PROC_STATE_LTK_START) {
   2245c:	2b03      	cmp	r3, #3
   2245e:	d13c      	bne.n	224da <ble_sm_ltk_req_rx+0xb2>
        res.execute = 1;
   22460:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   22464:	f043 0301 	orr.w	r3, r3, #1
   22468:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
        restore = 0;
   2246c:	2700      	movs	r7, #0
   2246e:	e027      	b.n	224c0 <ble_sm_ltk_req_rx+0x98>
        proc = ble_sm_proc_alloc();
   22470:	f7ff fa9e 	bl	219b0 <ble_sm_proc_alloc>
        if (proc == NULL) {
   22474:	4604      	mov	r4, r0
   22476:	b158      	cbz	r0, 22490 <ble_sm_ltk_req_rx+0x68>
            proc->conn_handle = conn_handle;
   22478:	8147      	strh	r7, [r0, #10]
            proc->state = BLE_SM_PROC_STATE_LTK_RESTORE;
   2247a:	2304      	movs	r3, #4
   2247c:	7343      	strb	r3, [r0, #13]
            ble_sm_insert(proc);
   2247e:	f7fe fdb3 	bl	20fe8 <ble_sm_insert>
            res.execute = 1;
   22482:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   22486:	f043 0301 	orr.w	r3, r3, #1
   2248a:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
   2248e:	e00a      	b.n	224a6 <ble_sm_ltk_req_rx+0x7e>
            res.app_status = BLE_HS_ENOMEM;
   22490:	2306      	movs	r3, #6
   22492:	9307      	str	r3, [sp, #28]
   22494:	e007      	b.n	224a6 <ble_sm_ltk_req_rx+0x7e>
        proc->state = BLE_SM_PROC_STATE_LTK_RESTORE;
   22496:	2304      	movs	r3, #4
   22498:	7343      	strb	r3, [r0, #13]
        res.execute = 1;
   2249a:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   2249e:	f043 0301 	orr.w	r3, r3, #1
   224a2:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
        conn = ble_hs_conn_find_assert(conn_handle);
   224a6:	4628      	mov	r0, r5
   224a8:	f7fc fee4 	bl	1f274 <ble_hs_conn_find_assert>
        ble_hs_conn_addrs(conn, &addrs);
   224ac:	a90d      	add	r1, sp, #52	; 0x34
   224ae:	f7fc ff01 	bl	1f2b4 <ble_hs_conn_addrs>
        memcpy(peer_id_addr, addrs.peer_id_addr.val, 6);
   224b2:	ab0f      	add	r3, sp, #60	; 0x3c
   224b4:	e893 0003 	ldmia.w	r3, {r0, r1}
   224b8:	9005      	str	r0, [sp, #20]
   224ba:	f8ad 1018 	strh.w	r1, [sp, #24]
   224be:	2701      	movs	r7, #1
    ble_hs_unlock();
   224c0:	f7fc f834 	bl	1e52c <ble_hs_unlock>
    if (proc == NULL) {
   224c4:	b17c      	cbz	r4, 224e6 <ble_sm_ltk_req_rx+0xbe>
    if (res.app_status == 0) {
   224c6:	9b07      	ldr	r3, [sp, #28]
   224c8:	b903      	cbnz	r3, 224cc <ble_sm_ltk_req_rx+0xa4>
        if (restore) {
   224ca:	b977      	cbnz	r7, 224ea <ble_sm_ltk_req_rx+0xc2>
    ble_sm_process_result(conn_handle, &res);
   224cc:	a907      	add	r1, sp, #28
   224ce:	4628      	mov	r0, r5
   224d0:	f7ff fe75 	bl	221be <ble_sm_process_result>
    return 0;
   224d4:	2000      	movs	r0, #0
}
   224d6:	b029      	add	sp, #164	; 0xa4
   224d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ble_sm_ltk_req_neg_reply_tx(conn_handle);
   224da:	4628      	mov	r0, r5
   224dc:	f7ff f93b 	bl	21756 <ble_sm_ltk_req_neg_reply_tx>
        restore = 0;
   224e0:	2700      	movs	r7, #0
        proc = NULL;
   224e2:	463c      	mov	r4, r7
   224e4:	e7ec      	b.n	224c0 <ble_sm_ltk_req_rx+0x98>
        return res.app_status;
   224e6:	9807      	ldr	r0, [sp, #28]
   224e8:	e7f5      	b.n	224d6 <ble_sm_ltk_req_rx+0xae>
            store_rc = ble_sm_retrieve_ltk(le16toh(ev->div), le64toh(ev->rand),
   224ea:	f8b6 000b 	ldrh.w	r0, [r6, #11]
   224ee:	f8d6 2003 	ldr.w	r2, [r6, #3]
   224f2:	f8d6 3007 	ldr.w	r3, [r6, #7]
   224f6:	f89d 103b 	ldrb.w	r1, [sp, #59]	; 0x3b
   224fa:	ac14      	add	r4, sp, #80	; 0x50
   224fc:	9402      	str	r4, [sp, #8]
   224fe:	ac05      	add	r4, sp, #20
   22500:	9401      	str	r4, [sp, #4]
   22502:	9100      	str	r1, [sp, #0]
   22504:	f7ff fa64 	bl	219d0 <ble_sm_retrieve_ltk>
            if (store_rc == 0) {
   22508:	b910      	cbnz	r0, 22510 <ble_sm_ltk_req_rx+0xe8>
                res.state_arg = &value_sec;
   2250a:	ab14      	add	r3, sp, #80	; 0x50
   2250c:	930b      	str	r3, [sp, #44]	; 0x2c
   2250e:	e7dd      	b.n	224cc <ble_sm_ltk_req_rx+0xa4>
                res.state_arg = NULL;
   22510:	2300      	movs	r3, #0
   22512:	930b      	str	r3, [sp, #44]	; 0x2c
   22514:	e7da      	b.n	224cc <ble_sm_ltk_req_rx+0xa4>

00022516 <ble_sm_our_pair_rand>:
    if (proc->flags & BLE_SM_PROC_F_INITIATOR) {
   22516:	7a03      	ldrb	r3, [r0, #8]
   22518:	f013 0f01 	tst.w	r3, #1
   2251c:	d101      	bne.n	22522 <ble_sm_our_pair_rand+0xc>
        return proc->rands;
   2251e:	304e      	adds	r0, #78	; 0x4e
}
   22520:	4770      	bx	lr
        return proc->randm;
   22522:	303e      	adds	r0, #62	; 0x3e
   22524:	4770      	bx	lr

00022526 <ble_sm_pair_exec>:
{
   22526:	b5f0      	push	{r4, r5, r6, r7, lr}
   22528:	b083      	sub	sp, #12
   2252a:	4605      	mov	r5, r0
   2252c:	460e      	mov	r6, r1
    is_req = proc->flags & BLE_SM_PROC_F_INITIATOR;
   2252e:	7a03      	ldrb	r3, [r0, #8]
    cmd = ble_sm_cmd_get(is_req ? BLE_SM_OP_PAIR_REQ : BLE_SM_OP_PAIR_RSP,
   22530:	f013 0401 	ands.w	r4, r3, #1
   22534:	d01d      	beq.n	22572 <ble_sm_pair_exec+0x4c>
   22536:	2001      	movs	r0, #1
   22538:	aa01      	add	r2, sp, #4
   2253a:	2106      	movs	r1, #6
   2253c:	f000 f9ee 	bl	2291c <ble_sm_cmd_get>
    if (cmd == NULL) {
   22540:	4607      	mov	r7, r0
   22542:	2800      	cmp	r0, #0
   22544:	d03f      	beq.n	225c6 <ble_sm_pair_exec+0xa0>
    if (is_req) {
   22546:	b1b4      	cbz	r4, 22576 <ble_sm_pair_exec+0x50>
        ble_sm_pair_req_fill(proc);
   22548:	4628      	mov	r0, r5
   2254a:	f7fe fd9f 	bl	2108c <ble_sm_pair_req_fill>
        memcpy(cmd, proc->pair_req + 1, sizeof(*cmd));
   2254e:	462b      	mov	r3, r5
   22550:	f853 2f11 	ldr.w	r2, [r3, #17]!
   22554:	603a      	str	r2, [r7, #0]
   22556:	889b      	ldrh	r3, [r3, #4]
   22558:	80bb      	strh	r3, [r7, #4]
    rc = ble_sm_tx(proc->conn_handle, txom);
   2255a:	9901      	ldr	r1, [sp, #4]
   2255c:	8968      	ldrh	r0, [r5, #10]
   2255e:	f000 f9f7 	bl	22950 <ble_sm_tx>
    if (rc != 0) {
   22562:	4603      	mov	r3, r0
   22564:	b300      	cbz	r0, 225a8 <ble_sm_pair_exec+0x82>
    res->app_status = rc;
   22566:	6033      	str	r3, [r6, #0]
    if (!is_req) {
   22568:	b90c      	cbnz	r4, 2256e <ble_sm_pair_exec+0x48>
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   2256a:	2308      	movs	r3, #8
   2256c:	7133      	strb	r3, [r6, #4]
}
   2256e:	b003      	add	sp, #12
   22570:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cmd = ble_sm_cmd_get(is_req ? BLE_SM_OP_PAIR_REQ : BLE_SM_OP_PAIR_RSP,
   22572:	2002      	movs	r0, #2
   22574:	e7e0      	b.n	22538 <ble_sm_pair_exec+0x12>
        memcpy(cmd, proc->pair_rsp + 1, sizeof(*cmd));
   22576:	462b      	mov	r3, r5
   22578:	f853 2f18 	ldr.w	r2, [r3, #24]!
   2257c:	6002      	str	r2, [r0, #0]
   2257e:	889b      	ldrh	r3, [r3, #4]
   22580:	8083      	strh	r3, [r0, #4]
        proc->state = ble_sm_state_after_pair(proc);
   22582:	4628      	mov	r0, r5
   22584:	f7fe fd67 	bl	21056 <ble_sm_state_after_pair>
   22588:	7368      	strb	r0, [r5, #13]
        rc = ble_sm_io_action(proc, &ioact);
   2258a:	f10d 0103 	add.w	r1, sp, #3
   2258e:	4628      	mov	r0, r5
   22590:	f7fe fdb8 	bl	21104 <ble_sm_io_action>
        if (ble_sm_ioact_state(ioact) == proc->state) {
   22594:	f89d 7003 	ldrb.w	r7, [sp, #3]
   22598:	4638      	mov	r0, r7
   2259a:	f7ff fd2f 	bl	21ffc <ble_sm_ioact_state>
   2259e:	7b6b      	ldrb	r3, [r5, #13]
   225a0:	4298      	cmp	r0, r3
   225a2:	d1da      	bne.n	2255a <ble_sm_pair_exec+0x34>
            res->passkey_params.action = ioact;
   225a4:	7237      	strb	r7, [r6, #8]
   225a6:	e7d8      	b.n	2255a <ble_sm_pair_exec+0x34>
    res->app_status = ble_sm_gen_pair_rand(ble_sm_our_pair_rand(proc));
   225a8:	4628      	mov	r0, r5
   225aa:	f7ff ffb4 	bl	22516 <ble_sm_our_pair_rand>
   225ae:	f7ff fae9 	bl	21b84 <ble_sm_gen_pair_rand>
   225b2:	6030      	str	r0, [r6, #0]
    if (res->app_status != 0) {
   225b4:	2800      	cmp	r0, #0
   225b6:	d0da      	beq.n	2256e <ble_sm_pair_exec+0x48>
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   225b8:	2308      	movs	r3, #8
   225ba:	7133      	strb	r3, [r6, #4]
        res->enc_cb = 1;
   225bc:	7d33      	ldrb	r3, [r6, #20]
   225be:	f043 0302 	orr.w	r3, r3, #2
   225c2:	7533      	strb	r3, [r6, #20]
        return;
   225c4:	e7d3      	b.n	2256e <ble_sm_pair_exec+0x48>
        rc = BLE_HS_ENOMEM;
   225c6:	2306      	movs	r3, #6
   225c8:	e7cd      	b.n	22566 <ble_sm_pair_exec+0x40>

000225ca <ble_sm_peer_pair_rand>:
    if (proc->flags & BLE_SM_PROC_F_INITIATOR) {
   225ca:	7a03      	ldrb	r3, [r0, #8]
   225cc:	f013 0f01 	tst.w	r3, #1
   225d0:	d101      	bne.n	225d6 <ble_sm_peer_pair_rand+0xc>
        return proc->randm;
   225d2:	303e      	adds	r0, #62	; 0x3e
}
   225d4:	4770      	bx	lr
        return proc->rands;
   225d6:	304e      	adds	r0, #78	; 0x4e
   225d8:	4770      	bx	lr

000225da <ble_sm_random_rx>:
{
   225da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   225dc:	4606      	mov	r6, r0
   225de:	460d      	mov	r5, r1
   225e0:	4614      	mov	r4, r2
    res->app_status = ble_hs_mbuf_pullup_base(om, sizeof(*cmd));
   225e2:	2110      	movs	r1, #16
   225e4:	4628      	mov	r0, r5
   225e6:	f7fd fd73 	bl	200d0 <ble_hs_mbuf_pullup_base>
   225ea:	6020      	str	r0, [r4, #0]
    if (res->app_status != 0) {
   225ec:	b130      	cbz	r0, 225fc <ble_sm_random_rx+0x22>
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   225ee:	2308      	movs	r3, #8
   225f0:	7123      	strb	r3, [r4, #4]
        res->enc_cb = 1;
   225f2:	7d23      	ldrb	r3, [r4, #20]
   225f4:	f043 0302 	orr.w	r3, r3, #2
   225f8:	7523      	strb	r3, [r4, #20]
}
   225fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cmd = (struct ble_sm_pair_random *)(*om)->om_data;
   225fc:	682b      	ldr	r3, [r5, #0]
   225fe:	681d      	ldr	r5, [r3, #0]
    ble_hs_lock();
   22600:	f7fb ff90 	bl	1e524 <ble_hs_lock>
    proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_RANDOM, -1, NULL);
   22604:	2300      	movs	r3, #0
   22606:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2260a:	2102      	movs	r1, #2
   2260c:	4630      	mov	r0, r6
   2260e:	f7ff fafb 	bl	21c08 <ble_sm_proc_find>
    if (proc == NULL) {
   22612:	4606      	mov	r6, r0
   22614:	b190      	cbz	r0, 2263c <ble_sm_random_rx+0x62>
        memcpy(ble_sm_peer_pair_rand(proc), cmd->value, 16);
   22616:	f7ff ffd8 	bl	225ca <ble_sm_peer_pair_rand>
   2261a:	682f      	ldr	r7, [r5, #0]
   2261c:	6869      	ldr	r1, [r5, #4]
   2261e:	68aa      	ldr	r2, [r5, #8]
   22620:	68eb      	ldr	r3, [r5, #12]
   22622:	6007      	str	r7, [r0, #0]
   22624:	6041      	str	r1, [r0, #4]
   22626:	6082      	str	r2, [r0, #8]
   22628:	60c3      	str	r3, [r0, #12]
        if (proc->flags & BLE_SM_PROC_F_SC) {
   2262a:	7a33      	ldrb	r3, [r6, #8]
   2262c:	f013 0f10 	tst.w	r3, #16
   22630:	d006      	beq.n	22640 <ble_sm_random_rx+0x66>
            ble_sm_sc_random_rx(proc, res);
   22632:	4621      	mov	r1, r4
   22634:	4630      	mov	r0, r6
   22636:	f000 fbfd 	bl	22e34 <ble_sm_sc_random_rx>
   2263a:	e001      	b.n	22640 <ble_sm_random_rx+0x66>
        res->app_status = BLE_HS_ENOENT;
   2263c:	2305      	movs	r3, #5
   2263e:	6023      	str	r3, [r4, #0]
    ble_hs_unlock();
   22640:	f7fb ff74 	bl	1e52c <ble_hs_unlock>
   22644:	e7d9      	b.n	225fa <ble_sm_random_rx+0x20>

00022646 <ble_sm_timer>:
{
   22646:	b530      	push	{r4, r5, lr}
   22648:	b083      	sub	sp, #12
    ticks_until_exp = ble_sm_extract_expired(&exp_list);
   2264a:	4668      	mov	r0, sp
   2264c:	f7ff f8de 	bl	2180c <ble_sm_extract_expired>
   22650:	4605      	mov	r5, r0
    while ((proc = STAILQ_FIRST(&exp_list)) != NULL) {
   22652:	e002      	b.n	2265a <ble_sm_timer+0x14>
        ble_sm_proc_free(proc);
   22654:	4620      	mov	r0, r4
   22656:	f7ff f9a1 	bl	2199c <ble_sm_proc_free>
    while ((proc = STAILQ_FIRST(&exp_list)) != NULL) {
   2265a:	9c00      	ldr	r4, [sp, #0]
   2265c:	b164      	cbz	r4, 22678 <ble_sm_timer+0x32>
        ble_gap_enc_event(proc->conn_handle, BLE_HS_ETIMEOUT, 0);
   2265e:	2200      	movs	r2, #0
   22660:	210d      	movs	r1, #13
   22662:	8960      	ldrh	r0, [r4, #10]
   22664:	f7f9 f867 	bl	1b736 <ble_gap_enc_event>
        STAILQ_REMOVE_HEAD(&exp_list, next);
   22668:	9b00      	ldr	r3, [sp, #0]
   2266a:	681b      	ldr	r3, [r3, #0]
   2266c:	9300      	str	r3, [sp, #0]
   2266e:	2b00      	cmp	r3, #0
   22670:	d1f0      	bne.n	22654 <ble_sm_timer+0xe>
   22672:	f8cd d004 	str.w	sp, [sp, #4]
   22676:	e7ed      	b.n	22654 <ble_sm_timer+0xe>
}
   22678:	4628      	mov	r0, r5
   2267a:	b003      	add	sp, #12
   2267c:	bd30      	pop	{r4, r5, pc}

0002267e <ble_sm_pair_initiate>:
{
   2267e:	b530      	push	{r4, r5, lr}
   22680:	b087      	sub	sp, #28
   22682:	4605      	mov	r5, r0
    memset(&res, 0, sizeof(res));
   22684:	2400      	movs	r4, #0
   22686:	9400      	str	r4, [sp, #0]
   22688:	9401      	str	r4, [sp, #4]
   2268a:	9402      	str	r4, [sp, #8]
   2268c:	9403      	str	r4, [sp, #12]
   2268e:	9404      	str	r4, [sp, #16]
   22690:	9405      	str	r4, [sp, #20]
    ble_hs_lock();
   22692:	f7fb ff47 	bl	1e524 <ble_hs_lock>
    proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_NONE, -1, NULL);
   22696:	4623      	mov	r3, r4
   22698:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2269c:	21ff      	movs	r1, #255	; 0xff
   2269e:	4628      	mov	r0, r5
   226a0:	f7ff fab2 	bl	21c08 <ble_sm_proc_find>
   226a4:	4604      	mov	r4, r0
    ble_hs_unlock();
   226a6:	f7fb ff41 	bl	1e52c <ble_hs_unlock>
    if (proc != NULL) {
   226aa:	b11c      	cbz	r4, 226b4 <ble_sm_pair_initiate+0x36>
        return BLE_HS_EALREADY;
   226ac:	2302      	movs	r3, #2
}
   226ae:	4618      	mov	r0, r3
   226b0:	b007      	add	sp, #28
   226b2:	bd30      	pop	{r4, r5, pc}
    rc = ble_sm_chk_store_overflow(conn_handle);
   226b4:	4628      	mov	r0, r5
   226b6:	f7ff fa55 	bl	21b64 <ble_sm_chk_store_overflow>
    if (rc != 0) {
   226ba:	4603      	mov	r3, r0
   226bc:	2800      	cmp	r0, #0
   226be:	d1f6      	bne.n	226ae <ble_sm_pair_initiate+0x30>
    proc = ble_sm_proc_alloc();
   226c0:	f7ff f976 	bl	219b0 <ble_sm_proc_alloc>
    if (proc == NULL) {
   226c4:	4604      	mov	r4, r0
   226c6:	b1d0      	cbz	r0, 226fe <ble_sm_pair_initiate+0x80>
        proc->conn_handle = conn_handle;
   226c8:	8145      	strh	r5, [r0, #10]
        proc->state = BLE_SM_PROC_STATE_PAIR;
   226ca:	2300      	movs	r3, #0
   226cc:	7343      	strb	r3, [r0, #13]
        proc->flags |= BLE_SM_PROC_F_INITIATOR;
   226ce:	7a03      	ldrb	r3, [r0, #8]
   226d0:	f043 0301 	orr.w	r3, r3, #1
   226d4:	7203      	strb	r3, [r0, #8]
        ble_hs_lock();
   226d6:	f7fb ff25 	bl	1e524 <ble_hs_lock>
        ble_sm_insert(proc);
   226da:	4620      	mov	r0, r4
   226dc:	f7fe fc84 	bl	20fe8 <ble_sm_insert>
        ble_hs_unlock();
   226e0:	f7fb ff24 	bl	1e52c <ble_hs_unlock>
        res.execute = 1;
   226e4:	f89d 3014 	ldrb.w	r3, [sp, #20]
   226e8:	f043 0301 	orr.w	r3, r3, #1
   226ec:	f88d 3014 	strb.w	r3, [sp, #20]
    if (proc != NULL) {
   226f0:	b11c      	cbz	r4, 226fa <ble_sm_pair_initiate+0x7c>
        ble_sm_process_result(conn_handle, &res);
   226f2:	4669      	mov	r1, sp
   226f4:	4628      	mov	r0, r5
   226f6:	f7ff fd62 	bl	221be <ble_sm_process_result>
    return res.app_status;
   226fa:	9b00      	ldr	r3, [sp, #0]
   226fc:	e7d7      	b.n	226ae <ble_sm_pair_initiate+0x30>
        res.app_status = BLE_HS_ENOMEM;
   226fe:	2306      	movs	r3, #6
   22700:	9300      	str	r3, [sp, #0]
   22702:	e7f5      	b.n	226f0 <ble_sm_pair_initiate+0x72>

00022704 <ble_sm_enc_initiate>:
{
   22704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22708:	b08e      	sub	sp, #56	; 0x38
   2270a:	4605      	mov	r5, r0
   2270c:	4688      	mov	r8, r1
   2270e:	4616      	mov	r6, r2
   22710:	461f      	mov	r7, r3
    memset(&res, 0, sizeof res);
   22712:	2400      	movs	r4, #0
   22714:	9408      	str	r4, [sp, #32]
   22716:	9409      	str	r4, [sp, #36]	; 0x24
   22718:	940a      	str	r4, [sp, #40]	; 0x28
   2271a:	940b      	str	r4, [sp, #44]	; 0x2c
   2271c:	940c      	str	r4, [sp, #48]	; 0x30
   2271e:	940d      	str	r4, [sp, #52]	; 0x34
    ble_hs_lock();
   22720:	f7fb ff00 	bl	1e524 <ble_hs_lock>
    proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_NONE, -1, NULL);
   22724:	4623      	mov	r3, r4
   22726:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2272a:	21ff      	movs	r1, #255	; 0xff
   2272c:	4628      	mov	r0, r5
   2272e:	f7ff fa6b 	bl	21c08 <ble_sm_proc_find>
    if (proc != NULL) {
   22732:	b158      	cbz	r0, 2274c <ble_sm_enc_initiate+0x48>
        res.app_status = BLE_HS_EALREADY;
   22734:	2302      	movs	r3, #2
   22736:	9308      	str	r3, [sp, #32]
    ble_hs_unlock();
   22738:	f7fb fef8 	bl	1e52c <ble_hs_unlock>
    ble_sm_process_result(conn_handle, &res);
   2273c:	a908      	add	r1, sp, #32
   2273e:	4628      	mov	r0, r5
   22740:	f7ff fd3d 	bl	221be <ble_sm_process_result>
}
   22744:	9808      	ldr	r0, [sp, #32]
   22746:	b00e      	add	sp, #56	; 0x38
   22748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        proc = ble_sm_proc_alloc();
   2274c:	f7ff f930 	bl	219b0 <ble_sm_proc_alloc>
        if (proc == NULL) {
   22750:	4603      	mov	r3, r0
   22752:	b338      	cbz	r0, 227a4 <ble_sm_enc_initiate+0xa0>
            proc->conn_handle = conn_handle;
   22754:	8145      	strh	r5, [r0, #10]
            proc->key_size = key_size;
   22756:	f880 800f 	strb.w	r8, [r0, #15]
            proc->state = BLE_SM_PROC_STATE_ENC_RESTORE;
   2275a:	2206      	movs	r2, #6
   2275c:	7342      	strb	r2, [r0, #13]
            proc->flags |= BLE_SM_PROC_F_INITIATOR;
   2275e:	7a02      	ldrb	r2, [r0, #8]
   22760:	f042 0201 	orr.w	r2, r2, #1
   22764:	7202      	strb	r2, [r0, #8]
            if (auth) {
   22766:	9916      	ldr	r1, [sp, #88]	; 0x58
   22768:	b111      	cbz	r1, 22770 <ble_sm_enc_initiate+0x6c>
                proc->flags |= BLE_SM_PROC_F_AUTHENTICATED;
   2276a:	f042 0208 	orr.w	r2, r2, #8
   2276e:	7202      	strb	r2, [r0, #8]
            ble_sm_insert(proc);
   22770:	4618      	mov	r0, r3
   22772:	f7fe fc39 	bl	20fe8 <ble_sm_insert>
            cmd.connection_handle = conn_handle;
   22776:	f8ad 5000 	strh.w	r5, [sp]
            cmd.encrypted_diversifier = ediv;
   2277a:	f8ad 7002 	strh.w	r7, [sp, #2]
            cmd.random_number = rand_val;
   2277e:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   22782:	e9cd 2302 	strd	r2, r3, [sp, #8]
            memcpy(cmd.long_term_key, ltk, sizeof cmd.long_term_key);
   22786:	ac04      	add	r4, sp, #16
   22788:	6830      	ldr	r0, [r6, #0]
   2278a:	6871      	ldr	r1, [r6, #4]
   2278c:	68b2      	ldr	r2, [r6, #8]
   2278e:	68f3      	ldr	r3, [r6, #12]
   22790:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            res.execute = 1;
   22792:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
   22796:	f043 0301 	orr.w	r3, r3, #1
   2279a:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
            res.state_arg = &cmd;
   2279e:	f8cd d030 	str.w	sp, [sp, #48]	; 0x30
   227a2:	e7c9      	b.n	22738 <ble_sm_enc_initiate+0x34>
            res.app_status = BLE_HS_ENOMEM;
   227a4:	2306      	movs	r3, #6
   227a6:	9308      	str	r3, [sp, #32]
   227a8:	e7c6      	b.n	22738 <ble_sm_enc_initiate+0x34>

000227aa <ble_sm_sec_req_rx>:
{
   227aa:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
   227ae:	b0a8      	sub	sp, #160	; 0xa0
   227b0:	4606      	mov	r6, r0
   227b2:	460d      	mov	r5, r1
   227b4:	4614      	mov	r4, r2
    res->app_status = ble_hs_mbuf_pullup_base(om, sizeof(*cmd));
   227b6:	2101      	movs	r1, #1
   227b8:	4628      	mov	r0, r5
   227ba:	f7fd fc89 	bl	200d0 <ble_hs_mbuf_pullup_base>
   227be:	6020      	str	r0, [r4, #0]
    if (res->app_status != 0) {
   227c0:	b110      	cbz	r0, 227c8 <ble_sm_sec_req_rx+0x1e>
}
   227c2:	b028      	add	sp, #160	; 0xa0
   227c4:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
    cmd = (struct ble_sm_sec_req *)(*om)->om_data;
   227c8:	682b      	ldr	r3, [r5, #0]
   227ca:	681d      	ldr	r5, [r3, #0]
    ble_hs_lock();
   227cc:	f7fb feaa 	bl	1e524 <ble_hs_lock>
    conn = ble_hs_conn_find_assert(conn_handle);
   227d0:	4630      	mov	r0, r6
   227d2:	f7fc fd4f 	bl	1f274 <ble_hs_conn_find_assert>
    if (!(conn->bhc_flags & BLE_HS_CONN_F_MASTER)) {
   227d6:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   227da:	f013 0f01 	tst.w	r3, #1
   227de:	d132      	bne.n	22846 <ble_sm_sec_req_rx+0x9c>
        res->app_status = BLE_HS_SM_US_ERR(BLE_SM_ERR_CMD_NOT_SUPP);
   227e0:	f240 4307 	movw	r3, #1031	; 0x407
   227e4:	6023      	str	r3, [r4, #0]
        res->sm_err = BLE_SM_ERR_CMD_NOT_SUPP;
   227e6:	2307      	movs	r3, #7
   227e8:	7123      	strb	r3, [r4, #4]
    ble_hs_unlock();
   227ea:	f7fb fe9f 	bl	1e52c <ble_hs_unlock>
    if (res->app_status == 0) {
   227ee:	6823      	ldr	r3, [r4, #0]
   227f0:	2b00      	cmp	r3, #0
   227f2:	d1e6      	bne.n	227c2 <ble_sm_sec_req_rx+0x18>
        if (cmd->authreq & BLE_SM_PAIR_AUTHREQ_BOND) {
   227f4:	782b      	ldrb	r3, [r5, #0]
   227f6:	f013 0f01 	tst.w	r3, #1
   227fa:	d141      	bne.n	22880 <ble_sm_sec_req_rx+0xd6>
            res->app_status = BLE_HS_ENOENT;
   227fc:	2305      	movs	r3, #5
   227fe:	6023      	str	r3, [r4, #0]
        if (res->app_status == 0) {
   22800:	6823      	ldr	r3, [r4, #0]
   22802:	b953      	cbnz	r3, 2281a <ble_sm_sec_req_rx+0x70>
            authreq_mitm = cmd->authreq & BLE_SM_PAIR_AUTHREQ_MITM;
   22804:	782b      	ldrb	r3, [r5, #0]
            if (authreq_mitm && !value_sec.authenticated) {
   22806:	f013 0f04 	tst.w	r3, #4
   2280a:	d006      	beq.n	2281a <ble_sm_sec_req_rx+0x70>
   2280c:	f89d 309a 	ldrb.w	r3, [sp, #154]	; 0x9a
   22810:	f013 0f02 	tst.w	r3, #2
   22814:	d101      	bne.n	2281a <ble_sm_sec_req_rx+0x70>
                res->app_status = BLE_HS_EREJECT;
   22816:	2310      	movs	r3, #16
   22818:	6023      	str	r3, [r4, #0]
        if (res->app_status == 0) {
   2281a:	6823      	ldr	r3, [r4, #0]
   2281c:	2b00      	cmp	r3, #0
   2281e:	d135      	bne.n	2288c <ble_sm_sec_req_rx+0xe2>
                                                  value_sec.authenticated);
   22820:	f89d 209a 	ldrb.w	r2, [sp, #154]	; 0x9a
   22824:	f3c2 0240 	ubfx	r2, r2, #1, #1
            res->app_status = ble_sm_enc_initiate(conn_handle,
   22828:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
   2282c:	f89d 1057 	ldrb.w	r1, [sp, #87]	; 0x57
   22830:	9202      	str	r2, [sp, #8]
   22832:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
   22836:	e9cd 8900 	strd	r8, r9, [sp]
   2283a:	aa1a      	add	r2, sp, #104	; 0x68
   2283c:	4630      	mov	r0, r6
   2283e:	f7ff ff61 	bl	22704 <ble_sm_enc_initiate>
   22842:	6020      	str	r0, [r4, #0]
   22844:	e7bd      	b.n	227c2 <ble_sm_sec_req_rx+0x18>
        ble_hs_conn_addrs(conn, &addrs);
   22846:	a905      	add	r1, sp, #20
   22848:	f7fc fd34 	bl	1f2b4 <ble_hs_conn_addrs>
        memset(&key_sec, 0, sizeof key_sec);
   2284c:	2300      	movs	r3, #0
   2284e:	f8cd 3036 	str.w	r3, [sp, #54]	; 0x36
   22852:	f8cd 303a 	str.w	r3, [sp, #58]	; 0x3a
   22856:	f8cd 303e 	str.w	r3, [sp, #62]	; 0x3e
   2285a:	f8cd 3042 	str.w	r3, [sp, #66]	; 0x42
   2285e:	f8cd 3046 	str.w	r3, [sp, #70]	; 0x46
   22862:	f8cd 304a 	str.w	r3, [sp, #74]	; 0x4a
   22866:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
        key_sec.peer_addr = addrs.peer_id_addr;
   2286a:	ab28      	add	r3, sp, #160	; 0xa0
   2286c:	f853 0d85 	ldr.w	r0, [r3, #-133]!
   22870:	900c      	str	r0, [sp, #48]	; 0x30
   22872:	889a      	ldrh	r2, [r3, #4]
   22874:	799b      	ldrb	r3, [r3, #6]
   22876:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
   2287a:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
   2287e:	e7b4      	b.n	227ea <ble_sm_sec_req_rx+0x40>
            res->app_status = ble_store_read_peer_sec(&key_sec, &value_sec);
   22880:	a914      	add	r1, sp, #80	; 0x50
   22882:	a80c      	add	r0, sp, #48	; 0x30
   22884:	f000 fdce 	bl	23424 <ble_store_read_peer_sec>
   22888:	6020      	str	r0, [r4, #0]
   2288a:	e7b9      	b.n	22800 <ble_sm_sec_req_rx+0x56>
            res->app_status = ble_sm_pair_initiate(conn_handle);
   2288c:	4630      	mov	r0, r6
   2288e:	f7ff fef6 	bl	2267e <ble_sm_pair_initiate>
   22892:	6020      	str	r0, [r4, #0]
   22894:	e795      	b.n	227c2 <ble_sm_sec_req_rx+0x18>

00022896 <ble_sm_connection_broken>:
    return res.app_status;
}

void
ble_sm_connection_broken(uint16_t conn_handle)
{
   22896:	b500      	push	{lr}
   22898:	b087      	sub	sp, #28
    struct ble_sm_result res;

    memset(&res, 0, sizeof res);
   2289a:	2300      	movs	r3, #0
   2289c:	9301      	str	r3, [sp, #4]
   2289e:	9302      	str	r3, [sp, #8]
   228a0:	9303      	str	r3, [sp, #12]
   228a2:	9304      	str	r3, [sp, #16]
   228a4:	9305      	str	r3, [sp, #20]
    res.app_status = BLE_HS_ENOTCONN;
   228a6:	2307      	movs	r3, #7
   228a8:	9300      	str	r3, [sp, #0]
    res.enc_cb = 1;
   228aa:	2302      	movs	r3, #2
   228ac:	f88d 3014 	strb.w	r3, [sp, #20]

    ble_sm_process_result(conn_handle, &res);
   228b0:	4669      	mov	r1, sp
   228b2:	f7ff fc84 	bl	221be <ble_sm_process_result>
}
   228b6:	b007      	add	sp, #28
   228b8:	f85d fb04 	ldr.w	pc, [sp], #4

000228bc <ble_sm_init>:

int
ble_sm_init(void)
{
   228bc:	b510      	push	{r4, lr}
   228be:	b082      	sub	sp, #8
    int rc;

    STAILQ_INIT(&ble_sm_procs);
   228c0:	4b0a      	ldr	r3, [pc, #40]	; (228ec <ble_sm_init+0x30>)
   228c2:	2200      	movs	r2, #0
   228c4:	601a      	str	r2, [r3, #0]
   228c6:	605b      	str	r3, [r3, #4]

    rc = os_mempool_init(&ble_sm_proc_pool,
   228c8:	4b09      	ldr	r3, [pc, #36]	; (228f0 <ble_sm_init+0x34>)
   228ca:	9300      	str	r3, [sp, #0]
   228cc:	4b09      	ldr	r3, [pc, #36]	; (228f4 <ble_sm_init+0x38>)
   228ce:	f44f 72c0 	mov.w	r2, #384	; 0x180
   228d2:	2101      	movs	r1, #1
   228d4:	4808      	ldr	r0, [pc, #32]	; (228f8 <ble_sm_init+0x3c>)
   228d6:	f7ea fae7 	bl	cea8 <os_mempool_init>
                         MYNEWT_VAL(BLE_SM_MAX_PROCS),
                         sizeof (struct ble_sm_proc),
                         ble_sm_proc_mem,
                         "ble_sm_proc_pool");
    if (rc != 0) {
   228da:	4604      	mov	r4, r0
   228dc:	b110      	cbz	r0, 228e4 <ble_sm_init+0x28>
    }

    ble_sm_sc_init();

    return 0;
}
   228de:	4620      	mov	r0, r4
   228e0:	b002      	add	sp, #8
   228e2:	bd10      	pop	{r4, pc}
    ble_sm_sc_init();
   228e4:	f000 fd14 	bl	23310 <ble_sm_sc_init>
    return 0;
   228e8:	e7f9      	b.n	228de <ble_sm_init+0x22>
   228ea:	bf00      	nop
   228ec:	2000321c 	.word	0x2000321c
   228f0:	0002b770 	.word	0x0002b770
   228f4:	20003080 	.word	0x20003080
   228f8:	20003200 	.word	0x20003200

000228fc <ble_sm_create_chan>:
}
#endif

struct ble_l2cap_chan *
ble_sm_create_chan(uint16_t conn_handle)
{
   228fc:	b508      	push	{r3, lr}
    struct ble_l2cap_chan *chan;

    chan = ble_l2cap_chan_alloc(conn_handle);
   228fe:	f7fd ff25 	bl	2074c <ble_l2cap_chan_alloc>
    if (chan == NULL) {
   22902:	4603      	mov	r3, r0
   22904:	b130      	cbz	r0, 22914 <ble_sm_create_chan+0x18>
        return NULL;
    }

    chan->scid = BLE_L2CAP_CID_SM;
   22906:	2206      	movs	r2, #6
   22908:	8102      	strh	r2, [r0, #8]
    chan->dcid = BLE_L2CAP_CID_SM;
   2290a:	80c2      	strh	r2, [r0, #6]
    chan->my_mtu = BLE_SM_MTU;
   2290c:	2241      	movs	r2, #65	; 0x41
   2290e:	8142      	strh	r2, [r0, #10]
    chan->rx_fn = ble_sm_rx;
   22910:	4a01      	ldr	r2, [pc, #4]	; (22918 <ble_sm_create_chan+0x1c>)
   22912:	6182      	str	r2, [r0, #24]

    return chan;
}
   22914:	4618      	mov	r0, r3
   22916:	bd08      	pop	{r3, pc}
   22918:	0002238d 	.word	0x0002238d

0002291c <ble_sm_cmd_get>:
#include "host/ble_sm.h"
#include "ble_hs_priv.h"

void *
ble_sm_cmd_get(uint8_t opcode, size_t len, struct os_mbuf **txom)
{
   2291c:	b570      	push	{r4, r5, r6, lr}
   2291e:	4606      	mov	r6, r0
   22920:	460c      	mov	r4, r1
   22922:	4615      	mov	r5, r2
    struct ble_sm_hdr *hdr;

    *txom = ble_hs_mbuf_l2cap_pkt();
   22924:	f7fd fbb6 	bl	20094 <ble_hs_mbuf_l2cap_pkt>
   22928:	6028      	str	r0, [r5, #0]
    if (*txom == NULL) {
   2292a:	b178      	cbz	r0, 2294c <ble_sm_cmd_get+0x30>
        return NULL;
    }

    if (os_mbuf_extend(*txom, sizeof(*hdr) + len) == NULL) {
   2292c:	1c61      	adds	r1, r4, #1
   2292e:	b289      	uxth	r1, r1
   22930:	f7eb faf7 	bl	df22 <os_mbuf_extend>
   22934:	4604      	mov	r4, r0
   22936:	b128      	cbz	r0, 22944 <ble_sm_cmd_get+0x28>
        os_mbuf_free_chain(*txom);
        return NULL;
    }

    hdr = (struct ble_sm_hdr *)(*txom)->om_data;
   22938:	682b      	ldr	r3, [r5, #0]

    hdr->opcode = opcode;
   2293a:	681c      	ldr	r4, [r3, #0]
   2293c:	f804 6b01 	strb.w	r6, [r4], #1

    return hdr->data;
}
   22940:	4620      	mov	r0, r4
   22942:	bd70      	pop	{r4, r5, r6, pc}
        os_mbuf_free_chain(*txom);
   22944:	6828      	ldr	r0, [r5, #0]
   22946:	f7eb f866 	bl	da16 <os_mbuf_free_chain>
        return NULL;
   2294a:	e7f9      	b.n	22940 <ble_sm_cmd_get+0x24>
        return NULL;
   2294c:	2400      	movs	r4, #0
   2294e:	e7f7      	b.n	22940 <ble_sm_cmd_get+0x24>

00022950 <ble_sm_tx>:

/* this function consumes tx os_mbuf */
int
ble_sm_tx(uint16_t conn_handle, struct os_mbuf *txom)
{
   22950:	b510      	push	{r4, lr}
   22952:	b082      	sub	sp, #8
   22954:	460c      	mov	r4, r1
    struct ble_l2cap_chan *chan;
    struct ble_hs_conn *conn;

    BLE_HS_DBG_ASSERT(ble_hs_locked_by_cur_task());

    STATS_INC(ble_l2cap_stats, sm_tx);
   22956:	4a08      	ldr	r2, [pc, #32]	; (22978 <ble_sm_tx+0x28>)
   22958:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   2295a:	3301      	adds	r3, #1
   2295c:	62d3      	str	r3, [r2, #44]	; 0x2c

    ble_hs_misc_conn_chan_find_reqd(conn_handle, BLE_L2CAP_CID_SM,
   2295e:	ab01      	add	r3, sp, #4
   22960:	466a      	mov	r2, sp
   22962:	2106      	movs	r1, #6
   22964:	f7fd fbf8 	bl	20158 <ble_hs_misc_conn_chan_find_reqd>
                                    &conn, &chan);
    return ble_l2cap_tx(conn, chan, txom);
   22968:	4622      	mov	r2, r4
   2296a:	9901      	ldr	r1, [sp, #4]
   2296c:	9800      	ldr	r0, [sp, #0]
   2296e:	f7fd ffe0 	bl	20932 <ble_l2cap_tx>
}
   22972:	b002      	add	sp, #8
   22974:	bd10      	pop	{r4, pc}
   22976:	bf00      	nop
   22978:	20004678 	.word	0x20004678

0002297c <ble_sm_sc_initiator_txes_confirm>:
static int
ble_sm_sc_initiator_txes_confirm(struct ble_sm_proc *proc)
{
    BLE_HS_DBG_ASSERT(proc->flags & BLE_SM_PROC_F_SC);

    return proc->pair_alg != BLE_SM_PAIR_ALG_JW &&
   2297c:	7b03      	ldrb	r3, [r0, #12]
   2297e:	b12b      	cbz	r3, 2298c <ble_sm_sc_initiator_txes_confirm+0x10>
   22980:	2b03      	cmp	r3, #3
   22982:	d001      	beq.n	22988 <ble_sm_sc_initiator_txes_confirm+0xc>
   22984:	2001      	movs	r0, #1
           proc->pair_alg != BLE_SM_PAIR_ALG_NUMCMP;
}
   22986:	4770      	bx	lr
    return proc->pair_alg != BLE_SM_PAIR_ALG_JW &&
   22988:	2000      	movs	r0, #0
   2298a:	4770      	bx	lr
   2298c:	2000      	movs	r0, #0
   2298e:	4770      	bx	lr

00022990 <ble_sm_sc_responder_verifies_random>:
static int
ble_sm_sc_responder_verifies_random(struct ble_sm_proc *proc)
{
    BLE_HS_DBG_ASSERT(proc->flags & BLE_SM_PROC_F_SC);

    return proc->pair_alg != BLE_SM_PAIR_ALG_JW &&
   22990:	7b03      	ldrb	r3, [r0, #12]
   22992:	b12b      	cbz	r3, 229a0 <ble_sm_sc_responder_verifies_random+0x10>
   22994:	2b03      	cmp	r3, #3
   22996:	d001      	beq.n	2299c <ble_sm_sc_responder_verifies_random+0xc>
   22998:	2001      	movs	r0, #1
           proc->pair_alg != BLE_SM_PAIR_ALG_NUMCMP;
}
   2299a:	4770      	bx	lr
    return proc->pair_alg != BLE_SM_PAIR_ALG_JW &&
   2299c:	2000      	movs	r0, #0
   2299e:	4770      	bx	lr
   229a0:	2000      	movs	r0, #0
   229a2:	4770      	bx	lr

000229a4 <ble_sm_sc_gen_ri>:
ble_sm_sc_gen_ri(struct ble_sm_proc *proc)
{
    int byte;
    int bit;

    switch (proc->pair_alg) {
   229a4:	7b03      	ldrb	r3, [r0, #12]
   229a6:	2b03      	cmp	r3, #3
   229a8:	d81d      	bhi.n	229e6 <ble_sm_sc_gen_ri+0x42>
   229aa:	e8df f003 	tbb	[pc, r3]
   229ae:	0702      	.short	0x0702
   229b0:	0202      	.short	0x0202
    case BLE_SM_PAIR_ALG_JW:
    case BLE_SM_PAIR_ALG_NUMCMP:
    case BLE_SM_PAIR_ALG_OOB:
        proc->ri = 0;
   229b2:	2300      	movs	r3, #0
   229b4:	f880 3101 	strb.w	r3, [r0, #257]	; 0x101
        return 0;
   229b8:	4618      	mov	r0, r3
   229ba:	4770      	bx	lr

    case BLE_SM_PAIR_ALG_PASSKEY:
        BLE_HS_DBG_ASSERT(proc->passkey_bits_exchanged <
                          BLE_SM_SC_PASSKEY_BITS);

        byte = proc->passkey_bits_exchanged / 8;
   229bc:	f890 3100 	ldrb.w	r3, [r0, #256]	; 0x100
        bit = proc->passkey_bits_exchanged % 8;
   229c0:	f003 0107 	and.w	r1, r3, #7
        proc->ri = 0x80 | !!(proc->tk[byte] & (1 << bit));
   229c4:	eb00 02d3 	add.w	r2, r0, r3, lsr #3
   229c8:	7f92      	ldrb	r2, [r2, #30]
   229ca:	410a      	asrs	r2, r1
   229cc:	f012 0f01 	tst.w	r2, #1
   229d0:	d007      	beq.n	229e2 <ble_sm_sc_gen_ri+0x3e>
   229d2:	2281      	movs	r2, #129	; 0x81
   229d4:	f880 2101 	strb.w	r2, [r0, #257]	; 0x101

        proc->passkey_bits_exchanged++;
   229d8:	3301      	adds	r3, #1
   229da:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100

        return 0;
   229de:	2000      	movs	r0, #0
   229e0:	4770      	bx	lr
        proc->ri = 0x80 | !!(proc->tk[byte] & (1 << bit));
   229e2:	2280      	movs	r2, #128	; 0x80
   229e4:	e7f6      	b.n	229d4 <ble_sm_sc_gen_ri+0x30>

    default:
        BLE_HS_DBG_ASSERT(0);
        return BLE_HS_EUNKNOWN;
   229e6:	2011      	movs	r0, #17
    }
}
   229e8:	4770      	bx	lr

000229ea <ble_sm_sc_random_advance>:
 * Advances the supplied procedure object to the next state after it has
 * completed the random state.
 */
static int
ble_sm_sc_random_advance(struct ble_sm_proc *proc)
{
   229ea:	b508      	push	{r3, lr}
    int rc;

    if (proc->pair_alg != BLE_SM_PAIR_ALG_PASSKEY ||
   229ec:	7b03      	ldrb	r3, [r0, #12]
   229ee:	2b01      	cmp	r3, #1
   229f0:	d003      	beq.n	229fa <ble_sm_sc_random_advance+0x10>
        proc->passkey_bits_exchanged >= BLE_SM_SC_PASSKEY_BITS) {

        proc->state = BLE_SM_PROC_STATE_DHKEY_CHECK;
   229f2:	230a      	movs	r3, #10
   229f4:	7343      	strb	r3, [r0, #13]
        if (rc != 0) {
            return rc;
        }
    }

    return 0;
   229f6:	2000      	movs	r0, #0
}
   229f8:	bd08      	pop	{r3, pc}
        proc->passkey_bits_exchanged >= BLE_SM_SC_PASSKEY_BITS) {
   229fa:	f890 3100 	ldrb.w	r3, [r0, #256]	; 0x100
    if (proc->pair_alg != BLE_SM_PAIR_ALG_PASSKEY ||
   229fe:	2b13      	cmp	r3, #19
   22a00:	d8f7      	bhi.n	229f2 <ble_sm_sc_random_advance+0x8>
        proc->state = BLE_SM_PROC_STATE_CONFIRM;
   22a02:	2301      	movs	r3, #1
   22a04:	7343      	strb	r3, [r0, #13]
        rc = ble_sm_gen_pair_rand(ble_sm_our_pair_rand(proc));
   22a06:	f7ff fd86 	bl	22516 <ble_sm_our_pair_rand>
   22a0a:	f7ff f8bb 	bl	21b84 <ble_sm_gen_pair_rand>
   22a0e:	e7f3      	b.n	229f8 <ble_sm_sc_random_advance+0xe>

00022a10 <ble_sm_sc_gen_numcmp>:
{
   22a10:	b510      	push	{r4, lr}
   22a12:	b082      	sub	sp, #8
   22a14:	4602      	mov	r2, r0
   22a16:	460c      	mov	r4, r1
    if (proc->flags & BLE_SM_PROC_F_INITIATOR) {
   22a18:	7a03      	ldrb	r3, [r0, #8]
   22a1a:	f013 0f01 	tst.w	r3, #1
   22a1e:	d014      	beq.n	22a4a <ble_sm_sc_gen_numcmp+0x3a>
        pkb = proc->pub_key_peer.x;
   22a20:	f500 7181 	add.w	r1, r0, #258	; 0x102
        pka = ble_sm_sc_pub_key;
   22a24:	480b      	ldr	r0, [pc, #44]	; (22a54 <ble_sm_sc_gen_numcmp+0x44>)
    res->app_status = ble_sm_alg_g2(pka, pkb, proc->randm, proc->rands,
   22a26:	f104 030c 	add.w	r3, r4, #12
   22a2a:	9300      	str	r3, [sp, #0]
   22a2c:	f102 034e 	add.w	r3, r2, #78	; 0x4e
   22a30:	323e      	adds	r2, #62	; 0x3e
   22a32:	f003 f907 	bl	25c44 <ble_sm_alg_g2>
   22a36:	6020      	str	r0, [r4, #0]
    if (res->app_status != 0) {
   22a38:	b128      	cbz	r0, 22a46 <ble_sm_sc_gen_numcmp+0x36>
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   22a3a:	2308      	movs	r3, #8
   22a3c:	7123      	strb	r3, [r4, #4]
        res->enc_cb = 1;
   22a3e:	7d23      	ldrb	r3, [r4, #20]
   22a40:	f043 0302 	orr.w	r3, r3, #2
   22a44:	7523      	strb	r3, [r4, #20]
}
   22a46:	b002      	add	sp, #8
   22a48:	bd10      	pop	{r4, pc}
        pka = proc->pub_key_peer.x;
   22a4a:	f500 7081 	add.w	r0, r0, #258	; 0x102
        pkb = ble_sm_sc_pub_key;
   22a4e:	4901      	ldr	r1, [pc, #4]	; (22a54 <ble_sm_sc_gen_numcmp+0x44>)
   22a50:	e7e9      	b.n	22a26 <ble_sm_sc_gen_numcmp+0x16>
   22a52:	bf00      	nop
   22a54:	20003248 	.word	0x20003248

00022a58 <ble_sm_gen_pub_priv>:
{
   22a58:	b508      	push	{r3, lr}
    rc = ble_sm_alg_gen_key_pair(pub, priv);
   22a5a:	f003 f97d 	bl	25d58 <ble_sm_alg_gen_key_pair>
}
   22a5e:	bd08      	pop	{r3, pc}

00022a60 <ble_sm_sc_ensure_keys_generated>:
{
   22a60:	b508      	push	{r3, lr}
    if (!ble_sm_sc_keys_generated) {
   22a62:	4b0b      	ldr	r3, [pc, #44]	; (22a90 <ble_sm_sc_ensure_keys_generated+0x30>)
   22a64:	781b      	ldrb	r3, [r3, #0]
   22a66:	b943      	cbnz	r3, 22a7a <ble_sm_sc_ensure_keys_generated+0x1a>
        rc = ble_sm_gen_pub_priv(ble_sm_sc_pub_key, ble_sm_sc_priv_key);
   22a68:	490a      	ldr	r1, [pc, #40]	; (22a94 <ble_sm_sc_ensure_keys_generated+0x34>)
   22a6a:	480b      	ldr	r0, [pc, #44]	; (22a98 <ble_sm_sc_ensure_keys_generated+0x38>)
   22a6c:	f7ff fff4 	bl	22a58 <ble_sm_gen_pub_priv>
        if (rc != 0) {
   22a70:	4603      	mov	r3, r0
   22a72:	b958      	cbnz	r0, 22a8c <ble_sm_sc_ensure_keys_generated+0x2c>
        ble_sm_sc_keys_generated = 1;
   22a74:	4b06      	ldr	r3, [pc, #24]	; (22a90 <ble_sm_sc_ensure_keys_generated+0x30>)
   22a76:	2201      	movs	r2, #1
   22a78:	701a      	strb	r2, [r3, #0]
    ble_hs_log_flat_buf(&ble_sm_sc_pub_key, 64);
   22a7a:	2140      	movs	r1, #64	; 0x40
   22a7c:	4806      	ldr	r0, [pc, #24]	; (22a98 <ble_sm_sc_ensure_keys_generated+0x38>)
   22a7e:	f7fd fae9 	bl	20054 <ble_hs_log_flat_buf>
    ble_hs_log_flat_buf(&ble_sm_sc_priv_key, 32);
   22a82:	2120      	movs	r1, #32
   22a84:	4803      	ldr	r0, [pc, #12]	; (22a94 <ble_sm_sc_ensure_keys_generated+0x34>)
   22a86:	f7fd fae5 	bl	20054 <ble_hs_log_flat_buf>
    return 0;
   22a8a:	2300      	movs	r3, #0
}
   22a8c:	4618      	mov	r0, r3
   22a8e:	bd08      	pop	{r3, pc}
   22a90:	20003224 	.word	0x20003224
   22a94:	20003228 	.word	0x20003228
   22a98:	20003248 	.word	0x20003248

00022a9c <ble_sm_sc_dhkey_addrs>:
}

static void
ble_sm_sc_dhkey_addrs(struct ble_sm_proc *proc, ble_addr_t *our_addr,
                      ble_addr_t *peer_addr)
{
   22a9c:	b530      	push	{r4, r5, lr}
   22a9e:	b089      	sub	sp, #36	; 0x24
   22aa0:	460d      	mov	r5, r1
   22aa2:	4614      	mov	r4, r2
    struct ble_hs_conn_addrs addrs;
    struct ble_hs_conn *conn;

    conn = ble_hs_conn_find_assert(proc->conn_handle);
   22aa4:	8940      	ldrh	r0, [r0, #10]
   22aa6:	f7fc fbe5 	bl	1f274 <ble_hs_conn_find_assert>

    ble_hs_conn_addrs(conn, &addrs);
   22aaa:	a901      	add	r1, sp, #4
   22aac:	f7fc fc02 	bl	1f2b4 <ble_hs_conn_addrs>

    *our_addr = addrs.our_ota_addr;
   22ab0:	ab08      	add	r3, sp, #32
   22ab2:	f853 2d0e 	ldr.w	r2, [r3, #-14]!
   22ab6:	602a      	str	r2, [r5, #0]
   22ab8:	889a      	ldrh	r2, [r3, #4]
   22aba:	799b      	ldrb	r3, [r3, #6]
   22abc:	80aa      	strh	r2, [r5, #4]
   22abe:	71ab      	strb	r3, [r5, #6]
    *peer_addr = addrs.peer_ota_addr;
   22ac0:	ab08      	add	r3, sp, #32
   22ac2:	f853 2d07 	ldr.w	r2, [r3, #-7]!
   22ac6:	6022      	str	r2, [r4, #0]
   22ac8:	889a      	ldrh	r2, [r3, #4]
   22aca:	799b      	ldrb	r3, [r3, #6]
   22acc:	80a2      	strh	r2, [r4, #4]
   22ace:	71a3      	strb	r3, [r4, #6]
}
   22ad0:	b009      	add	sp, #36	; 0x24
   22ad2:	bd30      	pop	{r4, r5, pc}

00022ad4 <ble_sm_sc_io_action>:
{
   22ad4:	b410      	push	{r4}
    if (pair_req->oob_data_flag == BLE_SM_PAIR_OOB_YES ||
   22ad6:	7c83      	ldrb	r3, [r0, #18]
   22ad8:	2b01      	cmp	r3, #1
   22ada:	d00d      	beq.n	22af8 <ble_sm_sc_io_action+0x24>
        pair_rsp->oob_data_flag == BLE_SM_PAIR_OOB_YES) {
   22adc:	7e43      	ldrb	r3, [r0, #25]
    if (pair_req->oob_data_flag == BLE_SM_PAIR_OOB_YES ||
   22ade:	2b01      	cmp	r3, #1
   22ae0:	d00a      	beq.n	22af8 <ble_sm_sc_io_action+0x24>
    } else if (!(pair_req->authreq & BLE_SM_PAIR_AUTHREQ_MITM) &&
   22ae2:	7cc3      	ldrb	r3, [r0, #19]
   22ae4:	f013 0f04 	tst.w	r3, #4
   22ae8:	d110      	bne.n	22b0c <ble_sm_sc_io_action+0x38>
               !(pair_rsp->authreq & BLE_SM_PAIR_AUTHREQ_MITM)) {
   22aea:	7e83      	ldrb	r3, [r0, #26]
    } else if (!(pair_req->authreq & BLE_SM_PAIR_AUTHREQ_MITM) &&
   22aec:	f013 0f04 	tst.w	r3, #4
   22af0:	d10c      	bne.n	22b0c <ble_sm_sc_io_action+0x38>
        *action = BLE_SM_IOACT_NONE;
   22af2:	2300      	movs	r3, #0
   22af4:	700b      	strb	r3, [r1, #0]
   22af6:	e001      	b.n	22afc <ble_sm_sc_io_action+0x28>
        *action = BLE_SM_IOACT_OOB_SC;
   22af8:	2305      	movs	r3, #5
   22afa:	700b      	strb	r3, [r1, #0]
    switch (*action) {
   22afc:	780b      	ldrb	r3, [r1, #0]
   22afe:	2b05      	cmp	r3, #5
   22b00:	d83c      	bhi.n	22b7c <ble_sm_sc_io_action+0xa8>
   22b02:	e8df f003 	tbb	[pc, r3]
   22b06:	3b1e      	.short	0x3b1e
   22b08:	23332b2b 	.word	0x23332b2b
    } else if (pair_req->io_cap >= BLE_SM_IO_CAP_RESERVED ||
   22b0c:	7c43      	ldrb	r3, [r0, #17]
   22b0e:	2b04      	cmp	r3, #4
   22b10:	d802      	bhi.n	22b18 <ble_sm_sc_io_action+0x44>
               pair_rsp->io_cap >= BLE_SM_IO_CAP_RESERVED) {
   22b12:	7e02      	ldrb	r2, [r0, #24]
    } else if (pair_req->io_cap >= BLE_SM_IO_CAP_RESERVED ||
   22b14:	2a04      	cmp	r2, #4
   22b16:	d902      	bls.n	22b1e <ble_sm_sc_io_action+0x4a>
        *action = BLE_SM_IOACT_NONE;
   22b18:	2300      	movs	r3, #0
   22b1a:	700b      	strb	r3, [r1, #0]
   22b1c:	e7ee      	b.n	22afc <ble_sm_sc_io_action+0x28>
    } else if (proc->flags & BLE_SM_PROC_F_INITIATOR) {
   22b1e:	7a04      	ldrb	r4, [r0, #8]
   22b20:	f014 0f01 	tst.w	r4, #1
   22b24:	d006      	beq.n	22b34 <ble_sm_sc_io_action+0x60>
        *action = ble_sm_sc_init_ioa[pair_rsp->io_cap][pair_req->io_cap];
   22b26:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   22b2a:	4c15      	ldr	r4, [pc, #84]	; (22b80 <ble_sm_sc_io_action+0xac>)
   22b2c:	4422      	add	r2, r4
   22b2e:	5cd3      	ldrb	r3, [r2, r3]
   22b30:	700b      	strb	r3, [r1, #0]
   22b32:	e7e3      	b.n	22afc <ble_sm_sc_io_action+0x28>
        *action = ble_sm_sc_resp_ioa[pair_rsp->io_cap][pair_req->io_cap];
   22b34:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   22b38:	4c12      	ldr	r4, [pc, #72]	; (22b84 <ble_sm_sc_io_action+0xb0>)
   22b3a:	4422      	add	r2, r4
   22b3c:	5cd3      	ldrb	r3, [r2, r3]
   22b3e:	700b      	strb	r3, [r1, #0]
   22b40:	e7dc      	b.n	22afc <ble_sm_sc_io_action+0x28>
        proc->pair_alg = BLE_SM_PAIR_ALG_JW;
   22b42:	2300      	movs	r3, #0
   22b44:	7303      	strb	r3, [r0, #12]
    return 0;
   22b46:	4618      	mov	r0, r3
}
   22b48:	bc10      	pop	{r4}
   22b4a:	4770      	bx	lr
        proc->pair_alg = BLE_SM_PAIR_ALG_OOB;
   22b4c:	2302      	movs	r3, #2
   22b4e:	7303      	strb	r3, [r0, #12]
        proc->flags |= BLE_SM_PROC_F_AUTHENTICATED;
   22b50:	7a03      	ldrb	r3, [r0, #8]
   22b52:	f043 0308 	orr.w	r3, r3, #8
   22b56:	7203      	strb	r3, [r0, #8]
    return 0;
   22b58:	2000      	movs	r0, #0
        break;
   22b5a:	e7f5      	b.n	22b48 <ble_sm_sc_io_action+0x74>
        proc->pair_alg = BLE_SM_PAIR_ALG_PASSKEY;
   22b5c:	2301      	movs	r3, #1
   22b5e:	7303      	strb	r3, [r0, #12]
        proc->flags |= BLE_SM_PROC_F_AUTHENTICATED;
   22b60:	7a03      	ldrb	r3, [r0, #8]
   22b62:	f043 0308 	orr.w	r3, r3, #8
   22b66:	7203      	strb	r3, [r0, #8]
    return 0;
   22b68:	2000      	movs	r0, #0
        break;
   22b6a:	e7ed      	b.n	22b48 <ble_sm_sc_io_action+0x74>
        proc->pair_alg = BLE_SM_PAIR_ALG_NUMCMP;
   22b6c:	2303      	movs	r3, #3
   22b6e:	7303      	strb	r3, [r0, #12]
        proc->flags |= BLE_SM_PROC_F_AUTHENTICATED;
   22b70:	7a03      	ldrb	r3, [r0, #8]
   22b72:	f043 0308 	orr.w	r3, r3, #8
   22b76:	7203      	strb	r3, [r0, #8]
    return 0;
   22b78:	2000      	movs	r0, #0
        break;
   22b7a:	e7e5      	b.n	22b48 <ble_sm_sc_io_action+0x74>
        return BLE_HS_EINVAL;
   22b7c:	2003      	movs	r0, #3
   22b7e:	e7e3      	b.n	22b48 <ble_sm_sc_io_action+0x74>
   22b80:	0002b7d8 	.word	0x0002b7d8
   22b84:	0002b7f4 	.word	0x0002b7f4

00022b88 <ble_sm_dhkey_check_process>:

static void
ble_sm_dhkey_check_process(struct ble_sm_proc *proc,
                           struct ble_sm_dhkey_check *cmd,
                           struct ble_sm_result *res)
{
   22b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   22b8c:	b090      	sub	sp, #64	; 0x40
   22b8e:	4604      	mov	r4, r0
   22b90:	4689      	mov	r9, r1
   22b92:	4615      	mov	r5, r2
    ble_addr_t peer_addr;
    uint8_t *iocap;
    uint8_t ioact;
    int rc;

    if (proc->flags & BLE_SM_PROC_F_INITIATOR) {
   22b94:	7a03      	ldrb	r3, [r0, #8]
   22b96:	f013 0f01 	tst.w	r3, #1
   22b9a:	d055      	beq.n	22c48 <ble_sm_dhkey_check_process+0xc0>
        struct ble_sm_pair_cmd *pair_rsp;

        pair_rsp  = (struct ble_sm_pair_cmd *) &proc->pair_rsp[1];
        iocap = &pair_rsp->io_cap;
   22b9c:	f100 0a18 	add.w	sl, r0, #24

        if (proc->pair_alg == BLE_SM_PAIR_ALG_OOB) {
   22ba0:	7b03      	ldrb	r3, [r0, #12]
   22ba2:	2b02      	cmp	r3, #2
   22ba4:	d035      	beq.n	22c12 <ble_sm_dhkey_check_process+0x8a>
                memset(proc->tk, 0, 16);
            }
        }
    }

    ble_sm_sc_dhkey_addrs(proc, &our_addr, &peer_addr);
   22ba6:	aa08      	add	r2, sp, #32
   22ba8:	a90a      	add	r1, sp, #40	; 0x28
   22baa:	4620      	mov	r0, r4
   22bac:	f7ff ff76 	bl	22a9c <ble_sm_sc_dhkey_addrs>
    BLE_HS_LOG(DEBUG, "tk=");
    ble_hs_log_flat_buf(proc->tk, 16);
   22bb0:	f104 061e 	add.w	r6, r4, #30
   22bb4:	2110      	movs	r1, #16
   22bb6:	4630      	mov	r0, r6
   22bb8:	f7fd fa4c 	bl	20054 <ble_hs_log_flat_buf>
    BLE_HS_LOG(DEBUG, "\n");

    res->app_status = ble_sm_alg_f6(proc->mackey,
   22bbc:	f504 77a1 	add.w	r7, r4, #322	; 0x142
                                    ble_sm_peer_pair_rand(proc),
   22bc0:	4620      	mov	r0, r4
   22bc2:	f7ff fd02 	bl	225ca <ble_sm_peer_pair_rand>
   22bc6:	4680      	mov	r8, r0
                                    ble_sm_our_pair_rand(proc),
   22bc8:	4620      	mov	r0, r4
   22bca:	f7ff fca4 	bl	22516 <ble_sm_our_pair_rand>
    res->app_status = ble_sm_alg_f6(proc->mackey,
   22bce:	ab0c      	add	r3, sp, #48	; 0x30
   22bd0:	9305      	str	r3, [sp, #20]
   22bd2:	f10d 0329 	add.w	r3, sp, #41	; 0x29
   22bd6:	9304      	str	r3, [sp, #16]
   22bd8:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   22bdc:	9303      	str	r3, [sp, #12]
   22bde:	f10d 0321 	add.w	r3, sp, #33	; 0x21
   22be2:	9302      	str	r3, [sp, #8]
   22be4:	f89d 3020 	ldrb.w	r3, [sp, #32]
   22be8:	9301      	str	r3, [sp, #4]
   22bea:	f8cd a000 	str.w	sl, [sp]
   22bee:	4633      	mov	r3, r6
   22bf0:	4602      	mov	r2, r0
   22bf2:	4641      	mov	r1, r8
   22bf4:	4638      	mov	r0, r7
   22bf6:	f002 ff8d 	bl	25b14 <ble_sm_alg_f6>
   22bfa:	6028      	str	r0, [r5, #0]
                                    proc->tk, iocap,
                                    peer_addr.type, peer_addr.val,
                                    our_addr.type, our_addr.val,
                                    exp_value);
    if (res->app_status != 0) {
   22bfc:	2800      	cmp	r0, #0
   22bfe:	d043      	beq.n	22c88 <ble_sm_dhkey_check_process+0x100>
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   22c00:	2308      	movs	r3, #8
   22c02:	712b      	strb	r3, [r5, #4]
        res->enc_cb = 1;
   22c04:	7d2b      	ldrb	r3, [r5, #20]
   22c06:	f043 0302 	orr.w	r3, r3, #2
   22c0a:	752b      	strb	r3, [r5, #20]
            proc->state = BLE_SM_PROC_STATE_ENC_START;
        }

        res->execute = 1;
    }
}
   22c0c:	b010      	add	sp, #64	; 0x40
   22c0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            if (pair_rsp->oob_data_flag) {
   22c12:	7e43      	ldrb	r3, [r0, #25]
   22c14:	b173      	cbz	r3, 22c34 <ble_sm_dhkey_check_process+0xac>
                memcpy(proc->tk, proc->oob_data_local->r, 16);
   22c16:	f8d0 2174 	ldr.w	r2, [r0, #372]	; 0x174
   22c1a:	6816      	ldr	r6, [r2, #0]
   22c1c:	6850      	ldr	r0, [r2, #4]
   22c1e:	6891      	ldr	r1, [r2, #8]
   22c20:	68d2      	ldr	r2, [r2, #12]
   22c22:	f8c4 601e 	str.w	r6, [r4, #30]
   22c26:	f8c4 0022 	str.w	r0, [r4, #34]	; 0x22
   22c2a:	f8c4 1026 	str.w	r1, [r4, #38]	; 0x26
   22c2e:	f8c4 202a 	str.w	r2, [r4, #42]	; 0x2a
   22c32:	e7b8      	b.n	22ba6 <ble_sm_dhkey_check_process+0x1e>
                memset(proc->tk, 0, 16);
   22c34:	2200      	movs	r2, #0
   22c36:	f8c0 201e 	str.w	r2, [r0, #30]
   22c3a:	f8c0 2022 	str.w	r2, [r0, #34]	; 0x22
   22c3e:	f8c0 2026 	str.w	r2, [r0, #38]	; 0x26
   22c42:	f8c0 202a 	str.w	r2, [r0, #42]	; 0x2a
   22c46:	e7ae      	b.n	22ba6 <ble_sm_dhkey_check_process+0x1e>
        iocap = &pair_req->io_cap;
   22c48:	f100 0a11 	add.w	sl, r0, #17
        if (proc->pair_alg == BLE_SM_PAIR_ALG_OOB) {
   22c4c:	7b03      	ldrb	r3, [r0, #12]
   22c4e:	2b02      	cmp	r3, #2
   22c50:	d1a9      	bne.n	22ba6 <ble_sm_dhkey_check_process+0x1e>
            if (pair_req->oob_data_flag) {
   22c52:	7c83      	ldrb	r3, [r0, #18]
   22c54:	b173      	cbz	r3, 22c74 <ble_sm_dhkey_check_process+0xec>
                memcpy(proc->tk, proc->oob_data_local->r, 16);
   22c56:	f8d0 2174 	ldr.w	r2, [r0, #372]	; 0x174
   22c5a:	6816      	ldr	r6, [r2, #0]
   22c5c:	6850      	ldr	r0, [r2, #4]
   22c5e:	6891      	ldr	r1, [r2, #8]
   22c60:	68d2      	ldr	r2, [r2, #12]
   22c62:	f8c4 601e 	str.w	r6, [r4, #30]
   22c66:	f8c4 0022 	str.w	r0, [r4, #34]	; 0x22
   22c6a:	f8c4 1026 	str.w	r1, [r4, #38]	; 0x26
   22c6e:	f8c4 202a 	str.w	r2, [r4, #42]	; 0x2a
   22c72:	e798      	b.n	22ba6 <ble_sm_dhkey_check_process+0x1e>
                memset(proc->tk, 0, 16);
   22c74:	2200      	movs	r2, #0
   22c76:	f8c0 201e 	str.w	r2, [r0, #30]
   22c7a:	f8c0 2022 	str.w	r2, [r0, #34]	; 0x22
   22c7e:	f8c0 2026 	str.w	r2, [r0, #38]	; 0x26
   22c82:	f8c0 202a 	str.w	r2, [r0, #42]	; 0x2a
   22c86:	e78e      	b.n	22ba6 <ble_sm_dhkey_check_process+0x1e>
    if (memcmp(cmd->value, exp_value, 16) != 0) {
   22c88:	2210      	movs	r2, #16
   22c8a:	a90c      	add	r1, sp, #48	; 0x30
   22c8c:	4648      	mov	r0, r9
   22c8e:	f7eb fbcb 	bl	e428 <memcmp>
   22c92:	b148      	cbz	r0, 22ca8 <ble_sm_dhkey_check_process+0x120>
        res->sm_err = BLE_SM_ERR_DHKEY;
   22c94:	230b      	movs	r3, #11
   22c96:	712b      	strb	r3, [r5, #4]
        res->app_status = BLE_HS_SM_US_ERR(BLE_SM_ERR_DHKEY);
   22c98:	f240 430b 	movw	r3, #1035	; 0x40b
   22c9c:	602b      	str	r3, [r5, #0]
        res->enc_cb = 1;
   22c9e:	7d2b      	ldrb	r3, [r5, #20]
   22ca0:	f043 0302 	orr.w	r3, r3, #2
   22ca4:	752b      	strb	r3, [r5, #20]
        return;
   22ca6:	e7b1      	b.n	22c0c <ble_sm_dhkey_check_process+0x84>
    rc = ble_sm_sc_io_action(proc, &ioact);
   22ca8:	f10d 011f 	add.w	r1, sp, #31
   22cac:	4620      	mov	r0, r4
   22cae:	f7ff ff11 	bl	22ad4 <ble_sm_sc_io_action>
    if (ble_sm_ioact_state(ioact) == proc->state) {
   22cb2:	f89d 001f 	ldrb.w	r0, [sp, #31]
   22cb6:	f7ff f9a1 	bl	21ffc <ble_sm_ioact_state>
   22cba:	7b63      	ldrb	r3, [r4, #13]
   22cbc:	4298      	cmp	r0, r3
   22cbe:	d00f      	beq.n	22ce0 <ble_sm_dhkey_check_process+0x158>
    if (ble_sm_proc_can_advance(proc)) {
   22cc0:	4620      	mov	r0, r4
   22cc2:	f7ff f9ab 	bl	2201c <ble_sm_proc_can_advance>
   22cc6:	2800      	cmp	r0, #0
   22cc8:	d0a0      	beq.n	22c0c <ble_sm_dhkey_check_process+0x84>
        if (proc->flags & BLE_SM_PROC_F_INITIATOR) {
   22cca:	7a23      	ldrb	r3, [r4, #8]
   22ccc:	f013 0f01 	tst.w	r3, #1
   22cd0:	d001      	beq.n	22cd6 <ble_sm_dhkey_check_process+0x14e>
            proc->state = BLE_SM_PROC_STATE_ENC_START;
   22cd2:	2305      	movs	r3, #5
   22cd4:	7363      	strb	r3, [r4, #13]
        res->execute = 1;
   22cd6:	7d2b      	ldrb	r3, [r5, #20]
   22cd8:	f043 0301 	orr.w	r3, r3, #1
   22cdc:	752b      	strb	r3, [r5, #20]
   22cde:	e795      	b.n	22c0c <ble_sm_dhkey_check_process+0x84>
        proc->flags |= BLE_SM_PROC_F_ADVANCE_ON_IO;
   22ce0:	7a23      	ldrb	r3, [r4, #8]
   22ce2:	f043 0304 	orr.w	r3, r3, #4
   22ce6:	7223      	strb	r3, [r4, #8]
   22ce8:	e7ea      	b.n	22cc0 <ble_sm_dhkey_check_process+0x138>
	...

00022cec <ble_sm_sc_confirm_exec>:
{
   22cec:	b5f0      	push	{r4, r5, r6, r7, lr}
   22cee:	b085      	sub	sp, #20
   22cf0:	4605      	mov	r5, r0
   22cf2:	460c      	mov	r4, r1
    rc = ble_sm_sc_gen_ri(proc);
   22cf4:	f7ff fe56 	bl	229a4 <ble_sm_sc_gen_ri>
    if (rc != 0) {
   22cf8:	b140      	cbz	r0, 22d0c <ble_sm_sc_confirm_exec+0x20>
        res->app_status = rc;
   22cfa:	6020      	str	r0, [r4, #0]
        res->enc_cb = 1;
   22cfc:	7d23      	ldrb	r3, [r4, #20]
   22cfe:	f043 0302 	orr.w	r3, r3, #2
   22d02:	7523      	strb	r3, [r4, #20]
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   22d04:	2308      	movs	r3, #8
   22d06:	7123      	strb	r3, [r4, #4]
}
   22d08:	b005      	add	sp, #20
   22d0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cmd = ble_sm_cmd_get(BLE_SM_OP_PAIR_CONFIRM, sizeof(*cmd), &txom);
   22d0c:	aa03      	add	r2, sp, #12
   22d0e:	2110      	movs	r1, #16
   22d10:	2003      	movs	r0, #3
   22d12:	f7ff fe03 	bl	2291c <ble_sm_cmd_get>
    if (cmd == NULL) {
   22d16:	4607      	mov	r7, r0
   22d18:	b1c8      	cbz	r0, 22d4e <ble_sm_sc_confirm_exec+0x62>
    rc = ble_sm_alg_f4(ble_sm_sc_pub_key, proc->pub_key_peer.x,
   22d1a:	f505 7681 	add.w	r6, r5, #258	; 0x102
                       ble_sm_our_pair_rand(proc), proc->ri, cmd->value);
   22d1e:	4628      	mov	r0, r5
   22d20:	f7ff fbf9 	bl	22516 <ble_sm_our_pair_rand>
    rc = ble_sm_alg_f4(ble_sm_sc_pub_key, proc->pub_key_peer.x,
   22d24:	f895 3101 	ldrb.w	r3, [r5, #257]	; 0x101
   22d28:	9700      	str	r7, [sp, #0]
   22d2a:	4602      	mov	r2, r0
   22d2c:	4631      	mov	r1, r6
   22d2e:	4816      	ldr	r0, [pc, #88]	; (22d88 <ble_sm_sc_confirm_exec+0x9c>)
   22d30:	f002 fe25 	bl	2597e <ble_sm_alg_f4>
    if (rc != 0) {
   22d34:	4606      	mov	r6, r0
   22d36:	b198      	cbz	r0, 22d60 <ble_sm_sc_confirm_exec+0x74>
        os_mbuf_free_chain(txom);
   22d38:	9803      	ldr	r0, [sp, #12]
   22d3a:	f7ea fe6c 	bl	da16 <os_mbuf_free_chain>
        res->app_status = rc;
   22d3e:	6026      	str	r6, [r4, #0]
        res->enc_cb = 1;
   22d40:	7d23      	ldrb	r3, [r4, #20]
   22d42:	f043 0302 	orr.w	r3, r3, #2
   22d46:	7523      	strb	r3, [r4, #20]
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   22d48:	2308      	movs	r3, #8
   22d4a:	7123      	strb	r3, [r4, #4]
        return;
   22d4c:	e7dc      	b.n	22d08 <ble_sm_sc_confirm_exec+0x1c>
        res->app_status = rc;
   22d4e:	2306      	movs	r3, #6
   22d50:	6023      	str	r3, [r4, #0]
        res->enc_cb = 1;
   22d52:	7d23      	ldrb	r3, [r4, #20]
   22d54:	f043 0302 	orr.w	r3, r3, #2
   22d58:	7523      	strb	r3, [r4, #20]
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   22d5a:	2308      	movs	r3, #8
   22d5c:	7123      	strb	r3, [r4, #4]
        return;
   22d5e:	e7d3      	b.n	22d08 <ble_sm_sc_confirm_exec+0x1c>
    rc = ble_sm_tx(proc->conn_handle, txom);
   22d60:	9903      	ldr	r1, [sp, #12]
   22d62:	8968      	ldrh	r0, [r5, #10]
   22d64:	f7ff fdf4 	bl	22950 <ble_sm_tx>
    if (rc != 0) {
   22d68:	b138      	cbz	r0, 22d7a <ble_sm_sc_confirm_exec+0x8e>
        res->app_status = rc;
   22d6a:	6020      	str	r0, [r4, #0]
        res->enc_cb = 1;
   22d6c:	7d23      	ldrb	r3, [r4, #20]
   22d6e:	f043 0302 	orr.w	r3, r3, #2
   22d72:	7523      	strb	r3, [r4, #20]
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   22d74:	2308      	movs	r3, #8
   22d76:	7123      	strb	r3, [r4, #4]
        return;
   22d78:	e7c6      	b.n	22d08 <ble_sm_sc_confirm_exec+0x1c>
    if (!(proc->flags & BLE_SM_PROC_F_INITIATOR)) {
   22d7a:	7a2b      	ldrb	r3, [r5, #8]
   22d7c:	f013 0f01 	tst.w	r3, #1
   22d80:	d1c2      	bne.n	22d08 <ble_sm_sc_confirm_exec+0x1c>
        proc->state = BLE_SM_PROC_STATE_RANDOM;
   22d82:	2302      	movs	r3, #2
   22d84:	736b      	strb	r3, [r5, #13]
   22d86:	e7bf      	b.n	22d08 <ble_sm_sc_confirm_exec+0x1c>
   22d88:	20003248 	.word	0x20003248

00022d8c <ble_sm_sc_random_exec>:
{
   22d8c:	b5f0      	push	{r4, r5, r6, r7, lr}
   22d8e:	b083      	sub	sp, #12
   22d90:	4606      	mov	r6, r0
   22d92:	460c      	mov	r4, r1
    cmd = ble_sm_cmd_get(BLE_SM_OP_PAIR_RANDOM, sizeof(*cmd), &txom);
   22d94:	aa01      	add	r2, sp, #4
   22d96:	2110      	movs	r1, #16
   22d98:	2004      	movs	r0, #4
   22d9a:	f7ff fdbf 	bl	2291c <ble_sm_cmd_get>
    if (cmd == NULL) {
   22d9e:	b1c0      	cbz	r0, 22dd2 <ble_sm_sc_random_exec+0x46>
   22da0:	4605      	mov	r5, r0
    memcpy(cmd->value, ble_sm_our_pair_rand(proc), 16);
   22da2:	4630      	mov	r0, r6
   22da4:	f7ff fbb7 	bl	22516 <ble_sm_our_pair_rand>
   22da8:	6807      	ldr	r7, [r0, #0]
   22daa:	6841      	ldr	r1, [r0, #4]
   22dac:	6882      	ldr	r2, [r0, #8]
   22dae:	68c3      	ldr	r3, [r0, #12]
   22db0:	602f      	str	r7, [r5, #0]
   22db2:	6069      	str	r1, [r5, #4]
   22db4:	60aa      	str	r2, [r5, #8]
   22db6:	60eb      	str	r3, [r5, #12]
    rc = ble_sm_tx(proc->conn_handle, txom);
   22db8:	9901      	ldr	r1, [sp, #4]
   22dba:	8970      	ldrh	r0, [r6, #10]
   22dbc:	f7ff fdc8 	bl	22950 <ble_sm_tx>
    if (rc != 0) {
   22dc0:	b178      	cbz	r0, 22de2 <ble_sm_sc_random_exec+0x56>
        res->app_status = rc;
   22dc2:	6020      	str	r0, [r4, #0]
        res->enc_cb = 1;
   22dc4:	7d23      	ldrb	r3, [r4, #20]
   22dc6:	f043 0302 	orr.w	r3, r3, #2
   22dca:	7523      	strb	r3, [r4, #20]
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   22dcc:	2308      	movs	r3, #8
   22dce:	7123      	strb	r3, [r4, #4]
        return;
   22dd0:	e005      	b.n	22dde <ble_sm_sc_random_exec+0x52>
        res->enc_cb = 1;
   22dd2:	7d23      	ldrb	r3, [r4, #20]
   22dd4:	f043 0302 	orr.w	r3, r3, #2
   22dd8:	7523      	strb	r3, [r4, #20]
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   22dda:	2308      	movs	r3, #8
   22ddc:	7123      	strb	r3, [r4, #4]
}
   22dde:	b003      	add	sp, #12
   22de0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (!(proc->flags & BLE_SM_PROC_F_INITIATOR)) {
   22de2:	7a33      	ldrb	r3, [r6, #8]
   22de4:	f013 0f01 	tst.w	r3, #1
   22de8:	d1f9      	bne.n	22dde <ble_sm_sc_random_exec+0x52>
        rc = ble_sm_sc_random_advance(proc);
   22dea:	4630      	mov	r0, r6
   22dec:	f7ff fdfd 	bl	229ea <ble_sm_sc_random_advance>
        if (rc != 0) {
   22df0:	b138      	cbz	r0, 22e02 <ble_sm_sc_random_exec+0x76>
            res->app_status = rc;
   22df2:	6020      	str	r0, [r4, #0]
            res->enc_cb = 1;
   22df4:	7d23      	ldrb	r3, [r4, #20]
   22df6:	f043 0302 	orr.w	r3, r3, #2
   22dfa:	7523      	strb	r3, [r4, #20]
            res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   22dfc:	2308      	movs	r3, #8
   22dfe:	7123      	strb	r3, [r4, #4]
            return;
   22e00:	e7ed      	b.n	22dde <ble_sm_sc_random_exec+0x52>
        rc = ble_sm_sc_io_action(proc, &ioact);
   22e02:	f10d 0103 	add.w	r1, sp, #3
   22e06:	4630      	mov	r0, r6
   22e08:	f7ff fe64 	bl	22ad4 <ble_sm_sc_io_action>
        if (ble_sm_ioact_state(ioact) == proc->state &&
   22e0c:	f89d 0003 	ldrb.w	r0, [sp, #3]
   22e10:	f7ff f8f4 	bl	21ffc <ble_sm_ioact_state>
   22e14:	7b73      	ldrb	r3, [r6, #13]
   22e16:	4298      	cmp	r0, r3
   22e18:	d1e1      	bne.n	22dde <ble_sm_sc_random_exec+0x52>
            !(proc->flags & BLE_SM_PROC_F_IO_INJECTED)) {
   22e1a:	7a33      	ldrb	r3, [r6, #8]
        if (ble_sm_ioact_state(ioact) == proc->state &&
   22e1c:	f013 0f02 	tst.w	r3, #2
   22e20:	d1dd      	bne.n	22dde <ble_sm_sc_random_exec+0x52>
            res->passkey_params.action = ioact;
   22e22:	f89d 3003 	ldrb.w	r3, [sp, #3]
   22e26:	7223      	strb	r3, [r4, #8]
            ble_sm_sc_gen_numcmp(proc, res);
   22e28:	4621      	mov	r1, r4
   22e2a:	4630      	mov	r0, r6
   22e2c:	f7ff fdf0 	bl	22a10 <ble_sm_sc_gen_numcmp>
   22e30:	e7d5      	b.n	22dde <ble_sm_sc_random_exec+0x52>
	...

00022e34 <ble_sm_sc_random_rx>:
{
   22e34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22e38:	b090      	sub	sp, #64	; 0x40
   22e3a:	4604      	mov	r4, r0
   22e3c:	460d      	mov	r5, r1
    if (proc->pair_alg != BLE_SM_PAIR_ALG_OOB && (
   22e3e:	7b03      	ldrb	r3, [r0, #12]
   22e40:	2b02      	cmp	r3, #2
   22e42:	d033      	beq.n	22eac <ble_sm_sc_random_rx+0x78>
        proc->flags & BLE_SM_PROC_F_INITIATOR ||
   22e44:	7a03      	ldrb	r3, [r0, #8]
    if (proc->pair_alg != BLE_SM_PAIR_ALG_OOB && (
   22e46:	f013 0f01 	tst.w	r3, #1
   22e4a:	d102      	bne.n	22e52 <ble_sm_sc_random_rx+0x1e>
        ble_sm_sc_responder_verifies_random(proc))) {
   22e4c:	f7ff fda0 	bl	22990 <ble_sm_sc_responder_verifies_random>
        proc->flags & BLE_SM_PROC_F_INITIATOR ||
   22e50:	b360      	cbz	r0, 22eac <ble_sm_sc_random_rx+0x78>
        ble_hs_log_flat_buf(proc->tk, 16);
   22e52:	2110      	movs	r1, #16
   22e54:	f104 001e 	add.w	r0, r4, #30
   22e58:	f7fd f8fc 	bl	20054 <ble_hs_log_flat_buf>
        rc = ble_sm_alg_f4(proc->pub_key_peer.x, ble_sm_sc_pub_key,
   22e5c:	f504 7681 	add.w	r6, r4, #258	; 0x102
                           ble_sm_peer_pair_rand(proc), proc->ri,
   22e60:	4620      	mov	r0, r4
   22e62:	f7ff fbb2 	bl	225ca <ble_sm_peer_pair_rand>
        rc = ble_sm_alg_f4(proc->pub_key_peer.x, ble_sm_sc_pub_key,
   22e66:	f894 3101 	ldrb.w	r3, [r4, #257]	; 0x101
   22e6a:	aa0c      	add	r2, sp, #48	; 0x30
   22e6c:	9200      	str	r2, [sp, #0]
   22e6e:	4602      	mov	r2, r0
   22e70:	495d      	ldr	r1, [pc, #372]	; (22fe8 <ble_sm_sc_random_rx+0x1b4>)
   22e72:	4630      	mov	r0, r6
   22e74:	f002 fd83 	bl	2597e <ble_sm_alg_f4>
        if (rc != 0) {
   22e78:	b138      	cbz	r0, 22e8a <ble_sm_sc_random_rx+0x56>
            res->app_status = rc;
   22e7a:	6028      	str	r0, [r5, #0]
            res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   22e7c:	2308      	movs	r3, #8
   22e7e:	712b      	strb	r3, [r5, #4]
            res->enc_cb = 1;
   22e80:	7d2b      	ldrb	r3, [r5, #20]
   22e82:	f043 0302 	orr.w	r3, r3, #2
   22e86:	752b      	strb	r3, [r5, #20]
            return;
   22e88:	e03a      	b.n	22f00 <ble_sm_sc_random_rx+0xcc>
        if (memcmp(proc->confirm_peer, confirm_val, 16) != 0) {
   22e8a:	2210      	movs	r2, #16
   22e8c:	a90c      	add	r1, sp, #48	; 0x30
   22e8e:	f104 002e 	add.w	r0, r4, #46	; 0x2e
   22e92:	f7eb fac9 	bl	e428 <memcmp>
   22e96:	b148      	cbz	r0, 22eac <ble_sm_sc_random_rx+0x78>
            res->app_status = BLE_HS_SM_US_ERR(BLE_SM_ERR_CONFIRM_MISMATCH);
   22e98:	f240 4304 	movw	r3, #1028	; 0x404
   22e9c:	602b      	str	r3, [r5, #0]
            res->sm_err = BLE_SM_ERR_CONFIRM_MISMATCH;
   22e9e:	2304      	movs	r3, #4
   22ea0:	712b      	strb	r3, [r5, #4]
            res->enc_cb = 1;
   22ea2:	7d2b      	ldrb	r3, [r5, #20]
   22ea4:	f043 0302 	orr.w	r3, r3, #2
   22ea8:	752b      	strb	r3, [r5, #20]
            return;
   22eaa:	e029      	b.n	22f00 <ble_sm_sc_random_rx+0xcc>
    ble_sm_ia_ra(proc, &iat, ia, &rat, ra);
   22eac:	f10d 0828 	add.w	r8, sp, #40	; 0x28
   22eb0:	af08      	add	r7, sp, #32
   22eb2:	9700      	str	r7, [sp, #0]
   22eb4:	f10d 031d 	add.w	r3, sp, #29
   22eb8:	4642      	mov	r2, r8
   22eba:	f10d 011e 	add.w	r1, sp, #30
   22ebe:	4620      	mov	r0, r4
   22ec0:	f7fe fe65 	bl	21b8e <ble_sm_ia_ra>
    rc = ble_sm_alg_f5(proc->dhkey, proc->randm, proc->rands,
   22ec4:	f89d 301e 	ldrb.w	r3, [sp, #30]
   22ec8:	f89d 201d 	ldrb.w	r2, [sp, #29]
                       iat, ia, rat, ra, proc->mackey, proc->ltk);
   22ecc:	f504 71a1 	add.w	r1, r4, #322	; 0x142
   22ed0:	f104 065e 	add.w	r6, r4, #94	; 0x5e
    rc = ble_sm_alg_f5(proc->dhkey, proc->randm, proc->rands,
   22ed4:	9604      	str	r6, [sp, #16]
   22ed6:	9103      	str	r1, [sp, #12]
   22ed8:	9702      	str	r7, [sp, #8]
   22eda:	9201      	str	r2, [sp, #4]
   22edc:	f8cd 8000 	str.w	r8, [sp]
   22ee0:	f104 024e 	add.w	r2, r4, #78	; 0x4e
   22ee4:	f104 013e 	add.w	r1, r4, #62	; 0x3e
   22ee8:	f504 70a9 	add.w	r0, r4, #338	; 0x152
   22eec:	f002 fd7e 	bl	259ec <ble_sm_alg_f5>
    if (rc != 0) {
   22ef0:	b148      	cbz	r0, 22f06 <ble_sm_sc_random_rx+0xd2>
        res->app_status = rc;
   22ef2:	6028      	str	r0, [r5, #0]
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   22ef4:	2308      	movs	r3, #8
   22ef6:	712b      	strb	r3, [r5, #4]
        res->enc_cb = 1;
   22ef8:	7d2b      	ldrb	r3, [r5, #20]
   22efa:	f043 0302 	orr.w	r3, r3, #2
   22efe:	752b      	strb	r3, [r5, #20]
}
   22f00:	b010      	add	sp, #64	; 0x40
   22f02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    memset(proc->ltk + proc->key_size, 0, sizeof proc->ltk - proc->key_size);
   22f06:	7be0      	ldrb	r0, [r4, #15]
   22f08:	f1c0 0210 	rsb	r2, r0, #16
   22f0c:	2100      	movs	r1, #0
   22f0e:	4430      	add	r0, r6
   22f10:	f7eb fad6 	bl	e4c0 <memset>
    memcpy(proc->our_keys.ltk, proc->ltk, sizeof proc->our_keys.ltk);
   22f14:	6837      	ldr	r7, [r6, #0]
   22f16:	6870      	ldr	r0, [r6, #4]
   22f18:	68b1      	ldr	r1, [r6, #8]
   22f1a:	68f2      	ldr	r2, [r6, #12]
   22f1c:	f8c4 7082 	str.w	r7, [r4, #130]	; 0x82
   22f20:	f8c4 0086 	str.w	r0, [r4, #134]	; 0x86
   22f24:	f8c4 108a 	str.w	r1, [r4, #138]	; 0x8a
   22f28:	f8c4 208e 	str.w	r2, [r4, #142]	; 0x8e
    proc->our_keys.ltk_valid = 1;
   22f2c:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
    proc->our_keys.ediv = 0;
   22f30:	2700      	movs	r7, #0
   22f32:	f8a4 7072 	strh.w	r7, [r4, #114]	; 0x72
    proc->our_keys.rand_val = 0;
   22f36:	2000      	movs	r0, #0
   22f38:	2100      	movs	r1, #0
   22f3a:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
    proc->our_keys.ediv_rand_valid = 1;
   22f3e:	f043 0303 	orr.w	r3, r3, #3
   22f42:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
    proc->our_keys.key_size = proc->key_size;
   22f46:	7be2      	ldrb	r2, [r4, #15]
   22f48:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    memcpy(proc->peer_keys.ltk, proc->ltk, sizeof proc->peer_keys.ltk);
   22f4c:	f8d6 8000 	ldr.w	r8, [r6]
   22f50:	f8d6 e004 	ldr.w	lr, [r6, #4]
   22f54:	f8d6 c008 	ldr.w	ip, [r6, #8]
   22f58:	68f6      	ldr	r6, [r6, #12]
   22f5a:	f8c4 80ca 	str.w	r8, [r4, #202]	; 0xca
   22f5e:	f8c4 e0ce 	str.w	lr, [r4, #206]	; 0xce
   22f62:	f8c4 c0d2 	str.w	ip, [r4, #210]	; 0xd2
   22f66:	f8c4 60d6 	str.w	r6, [r4, #214]	; 0xd6
    proc->peer_keys.ltk_valid = 1;
   22f6a:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
    proc->peer_keys.ediv = 0;
   22f6e:	f8a4 70ba 	strh.w	r7, [r4, #186]	; 0xba
    proc->peer_keys.rand_val = 0;
   22f72:	e9c4 0130 	strd	r0, r1, [r4, #192]	; 0xc0
    proc->peer_keys.ediv_rand_valid = 1;
   22f76:	f043 0303 	orr.w	r3, r3, #3
   22f7a:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
    proc->peer_keys.key_size = proc->key_size;
   22f7e:	f884 20c9 	strb.w	r2, [r4, #201]	; 0xc9
    if (proc->flags & BLE_SM_PROC_F_INITIATOR) {
   22f82:	7a23      	ldrb	r3, [r4, #8]
   22f84:	f013 0f01 	tst.w	r3, #1
   22f88:	d107      	bne.n	22f9a <ble_sm_sc_random_rx+0x166>
        if (proc->pair_alg == BLE_SM_PAIR_ALG_OOB &&
   22f8a:	7b22      	ldrb	r2, [r4, #12]
   22f8c:	2a02      	cmp	r2, #2
   22f8e:	d024      	beq.n	22fda <ble_sm_sc_random_rx+0x1a6>
            res->execute = 1;
   22f90:	7d2b      	ldrb	r3, [r5, #20]
   22f92:	f043 0301 	orr.w	r3, r3, #1
   22f96:	752b      	strb	r3, [r5, #20]
   22f98:	e7b2      	b.n	22f00 <ble_sm_sc_random_rx+0xcc>
        ble_sm_sc_random_advance(proc);
   22f9a:	4620      	mov	r0, r4
   22f9c:	f7ff fd25 	bl	229ea <ble_sm_sc_random_advance>
        rc = ble_sm_sc_io_action(proc, &ioact);
   22fa0:	f10d 011f 	add.w	r1, sp, #31
   22fa4:	4620      	mov	r0, r4
   22fa6:	f7ff fd95 	bl	22ad4 <ble_sm_sc_io_action>
        if (ble_sm_ioact_state(ioact) == proc->state &&
   22faa:	f89d 001f 	ldrb.w	r0, [sp, #31]
   22fae:	f7ff f825 	bl	21ffc <ble_sm_ioact_state>
   22fb2:	7b63      	ldrb	r3, [r4, #13]
   22fb4:	4298      	cmp	r0, r3
   22fb6:	d004      	beq.n	22fc2 <ble_sm_sc_random_rx+0x18e>
            res->execute = 1;
   22fb8:	7d2b      	ldrb	r3, [r5, #20]
   22fba:	f043 0301 	orr.w	r3, r3, #1
   22fbe:	752b      	strb	r3, [r5, #20]
   22fc0:	e79e      	b.n	22f00 <ble_sm_sc_random_rx+0xcc>
            !(proc->flags & BLE_SM_PROC_F_IO_INJECTED)) {
   22fc2:	7a23      	ldrb	r3, [r4, #8]
        if (ble_sm_ioact_state(ioact) == proc->state &&
   22fc4:	f013 0f02 	tst.w	r3, #2
   22fc8:	d1f6      	bne.n	22fb8 <ble_sm_sc_random_rx+0x184>
            res->passkey_params.action = ioact;
   22fca:	f89d 301f 	ldrb.w	r3, [sp, #31]
   22fce:	722b      	strb	r3, [r5, #8]
            ble_sm_sc_gen_numcmp(proc, res);
   22fd0:	4629      	mov	r1, r5
   22fd2:	4620      	mov	r0, r4
   22fd4:	f7ff fd1c 	bl	22a10 <ble_sm_sc_gen_numcmp>
   22fd8:	e792      	b.n	22f00 <ble_sm_sc_random_rx+0xcc>
        if (proc->pair_alg == BLE_SM_PAIR_ALG_OOB &&
   22fda:	f013 0f02 	tst.w	r3, #2
   22fde:	d1d7      	bne.n	22f90 <ble_sm_sc_random_rx+0x15c>
            proc->flags |= BLE_SM_PROC_F_ADVANCE_ON_IO;
   22fe0:	f043 0304 	orr.w	r3, r3, #4
   22fe4:	7223      	strb	r3, [r4, #8]
   22fe6:	e78b      	b.n	22f00 <ble_sm_sc_random_rx+0xcc>
   22fe8:	20003248 	.word	0x20003248

00022fec <ble_sm_sc_public_key_exec>:
{
   22fec:	b5f0      	push	{r4, r5, r6, r7, lr}
   22fee:	b083      	sub	sp, #12
   22ff0:	4607      	mov	r7, r0
   22ff2:	460c      	mov	r4, r1
    res->app_status = ble_sm_sc_ensure_keys_generated();
   22ff4:	f7ff fd34 	bl	22a60 <ble_sm_sc_ensure_keys_generated>
   22ff8:	6020      	str	r0, [r4, #0]
    if (res->app_status != 0) {
   22ffa:	b138      	cbz	r0, 2300c <ble_sm_sc_public_key_exec+0x20>
        res->enc_cb = 1;
   22ffc:	7d23      	ldrb	r3, [r4, #20]
   22ffe:	f043 0302 	orr.w	r3, r3, #2
   23002:	7523      	strb	r3, [r4, #20]
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   23004:	2308      	movs	r3, #8
   23006:	7123      	strb	r3, [r4, #4]
}
   23008:	b003      	add	sp, #12
   2300a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cmd = ble_sm_cmd_get(BLE_SM_OP_PAIR_PUBLIC_KEY, sizeof(*cmd), &txom);
   2300c:	aa01      	add	r2, sp, #4
   2300e:	2140      	movs	r1, #64	; 0x40
   23010:	200c      	movs	r0, #12
   23012:	f7ff fc83 	bl	2291c <ble_sm_cmd_get>
    if (!cmd) {
   23016:	4606      	mov	r6, r0
   23018:	b308      	cbz	r0, 2305e <ble_sm_sc_public_key_exec+0x72>
    memcpy(cmd->x, ble_sm_sc_pub_key + 0, 32);
   2301a:	4d2a      	ldr	r5, [pc, #168]	; (230c4 <ble_sm_sc_public_key_exec+0xd8>)
   2301c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   2301e:	6030      	str	r0, [r6, #0]
   23020:	6071      	str	r1, [r6, #4]
   23022:	60b2      	str	r2, [r6, #8]
   23024:	60f3      	str	r3, [r6, #12]
   23026:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   23028:	6130      	str	r0, [r6, #16]
   2302a:	6171      	str	r1, [r6, #20]
   2302c:	61b2      	str	r2, [r6, #24]
   2302e:	61f3      	str	r3, [r6, #28]
    memcpy(cmd->y, ble_sm_sc_pub_key + 32, 32);
   23030:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   23032:	6230      	str	r0, [r6, #32]
   23034:	6271      	str	r1, [r6, #36]	; 0x24
   23036:	62b2      	str	r2, [r6, #40]	; 0x28
   23038:	62f3      	str	r3, [r6, #44]	; 0x2c
   2303a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   2303c:	6330      	str	r0, [r6, #48]	; 0x30
   2303e:	6371      	str	r1, [r6, #52]	; 0x34
   23040:	63b2      	str	r2, [r6, #56]	; 0x38
   23042:	63f3      	str	r3, [r6, #60]	; 0x3c
    res->app_status = ble_sm_tx(proc->conn_handle, txom);
   23044:	9901      	ldr	r1, [sp, #4]
   23046:	8978      	ldrh	r0, [r7, #10]
   23048:	f7ff fc82 	bl	22950 <ble_sm_tx>
   2304c:	6020      	str	r0, [r4, #0]
    if (res->app_status != 0) {
   2304e:	b178      	cbz	r0, 23070 <ble_sm_sc_public_key_exec+0x84>
        res->enc_cb = 1;
   23050:	7d23      	ldrb	r3, [r4, #20]
   23052:	f043 0302 	orr.w	r3, r3, #2
   23056:	7523      	strb	r3, [r4, #20]
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   23058:	2308      	movs	r3, #8
   2305a:	7123      	strb	r3, [r4, #4]
        return;
   2305c:	e7d4      	b.n	23008 <ble_sm_sc_public_key_exec+0x1c>
        res->app_status = BLE_HS_ENOMEM;
   2305e:	2306      	movs	r3, #6
   23060:	6023      	str	r3, [r4, #0]
        res->enc_cb = 1;
   23062:	7d23      	ldrb	r3, [r4, #20]
   23064:	f043 0302 	orr.w	r3, r3, #2
   23068:	7523      	strb	r3, [r4, #20]
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   2306a:	2308      	movs	r3, #8
   2306c:	7123      	strb	r3, [r4, #4]
        return;
   2306e:	e7cb      	b.n	23008 <ble_sm_sc_public_key_exec+0x1c>
    if (!(proc->flags & BLE_SM_PROC_F_INITIATOR)) {
   23070:	7a3b      	ldrb	r3, [r7, #8]
   23072:	f013 0f01 	tst.w	r3, #1
   23076:	d1c7      	bne.n	23008 <ble_sm_sc_public_key_exec+0x1c>
        if (proc->pair_alg == BLE_SM_PAIR_ALG_OOB) {
   23078:	7b3b      	ldrb	r3, [r7, #12]
   2307a:	2b02      	cmp	r3, #2
   2307c:	d01c      	beq.n	230b8 <ble_sm_sc_public_key_exec+0xcc>
            proc->state = BLE_SM_PROC_STATE_CONFIRM;
   2307e:	2301      	movs	r3, #1
   23080:	737b      	strb	r3, [r7, #13]
        rc = ble_sm_sc_io_action(proc, &ioact);
   23082:	f10d 0103 	add.w	r1, sp, #3
   23086:	4638      	mov	r0, r7
   23088:	f7ff fd24 	bl	22ad4 <ble_sm_sc_io_action>
        if (ble_sm_ioact_state(ioact) == proc->state) {
   2308c:	f89d 0003 	ldrb.w	r0, [sp, #3]
   23090:	f7fe ffb4 	bl	21ffc <ble_sm_ioact_state>
   23094:	7b7b      	ldrb	r3, [r7, #13]
   23096:	4298      	cmp	r0, r3
   23098:	d010      	beq.n	230bc <ble_sm_sc_public_key_exec+0xd0>
        if (ble_sm_proc_can_advance(proc) &&
   2309a:	4638      	mov	r0, r7
   2309c:	f7fe ffbe 	bl	2201c <ble_sm_proc_can_advance>
   230a0:	2800      	cmp	r0, #0
   230a2:	d0b1      	beq.n	23008 <ble_sm_sc_public_key_exec+0x1c>
            !ble_sm_sc_initiator_txes_confirm(proc)) {
   230a4:	4638      	mov	r0, r7
   230a6:	f7ff fc69 	bl	2297c <ble_sm_sc_initiator_txes_confirm>
        if (ble_sm_proc_can_advance(proc) &&
   230aa:	2800      	cmp	r0, #0
   230ac:	d1ac      	bne.n	23008 <ble_sm_sc_public_key_exec+0x1c>
            res->execute = 1;
   230ae:	7d23      	ldrb	r3, [r4, #20]
   230b0:	f043 0301 	orr.w	r3, r3, #1
   230b4:	7523      	strb	r3, [r4, #20]
   230b6:	e7a7      	b.n	23008 <ble_sm_sc_public_key_exec+0x1c>
            proc->state = BLE_SM_PROC_STATE_RANDOM;
   230b8:	737b      	strb	r3, [r7, #13]
   230ba:	e7e2      	b.n	23082 <ble_sm_sc_public_key_exec+0x96>
            res->passkey_params.action = ioact;
   230bc:	f89d 3003 	ldrb.w	r3, [sp, #3]
   230c0:	7223      	strb	r3, [r4, #8]
   230c2:	e7ea      	b.n	2309a <ble_sm_sc_public_key_exec+0xae>
   230c4:	20003248 	.word	0x20003248

000230c8 <ble_sm_sc_public_key_rx>:
{
   230c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   230ca:	b083      	sub	sp, #12
   230cc:	4606      	mov	r6, r0
   230ce:	460d      	mov	r5, r1
   230d0:	4614      	mov	r4, r2
    res->app_status = ble_hs_mbuf_pullup_base(om, sizeof(*cmd));
   230d2:	2140      	movs	r1, #64	; 0x40
   230d4:	4628      	mov	r0, r5
   230d6:	f7fc fffb 	bl	200d0 <ble_hs_mbuf_pullup_base>
   230da:	6020      	str	r0, [r4, #0]
    if (res->app_status != 0) {
   230dc:	b128      	cbz	r0, 230ea <ble_sm_sc_public_key_rx+0x22>
        res->enc_cb = 1;
   230de:	7d23      	ldrb	r3, [r4, #20]
   230e0:	f043 0302 	orr.w	r3, r3, #2
   230e4:	7523      	strb	r3, [r4, #20]
}
   230e6:	b003      	add	sp, #12
   230e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    res->app_status = ble_sm_sc_ensure_keys_generated();
   230ea:	f7ff fcb9 	bl	22a60 <ble_sm_sc_ensure_keys_generated>
   230ee:	6020      	str	r0, [r4, #0]
    if (res->app_status != 0) {
   230f0:	b130      	cbz	r0, 23100 <ble_sm_sc_public_key_rx+0x38>
        res->enc_cb = 1;
   230f2:	7d23      	ldrb	r3, [r4, #20]
   230f4:	f043 0302 	orr.w	r3, r3, #2
   230f8:	7523      	strb	r3, [r4, #20]
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   230fa:	2308      	movs	r3, #8
   230fc:	7123      	strb	r3, [r4, #4]
        return;
   230fe:	e7f2      	b.n	230e6 <ble_sm_sc_public_key_rx+0x1e>
    cmd = (struct ble_sm_public_key *)(*om)->om_data;
   23100:	682b      	ldr	r3, [r5, #0]
   23102:	681d      	ldr	r5, [r3, #0]
    ble_hs_lock();
   23104:	f7fb fa0e 	bl	1e524 <ble_hs_lock>
    proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_PUBLIC_KEY, -1,
   23108:	2300      	movs	r3, #0
   2310a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2310e:	2109      	movs	r1, #9
   23110:	4630      	mov	r0, r6
   23112:	f7fe fd79 	bl	21c08 <ble_sm_proc_find>
    if (proc == NULL) {
   23116:	4606      	mov	r6, r0
   23118:	b328      	cbz	r0, 23166 <ble_sm_sc_public_key_rx+0x9e>
        memcpy(&proc->pub_key_peer, cmd, sizeof(*cmd));
   2311a:	462b      	mov	r3, r5
   2311c:	f500 7281 	add.w	r2, r0, #258	; 0x102
   23120:	3540      	adds	r5, #64	; 0x40
   23122:	f8d3 c000 	ldr.w	ip, [r3]
   23126:	685f      	ldr	r7, [r3, #4]
   23128:	6898      	ldr	r0, [r3, #8]
   2312a:	68d9      	ldr	r1, [r3, #12]
   2312c:	f8c2 c000 	str.w	ip, [r2]
   23130:	6057      	str	r7, [r2, #4]
   23132:	6090      	str	r0, [r2, #8]
   23134:	60d1      	str	r1, [r2, #12]
   23136:	3310      	adds	r3, #16
   23138:	3210      	adds	r2, #16
   2313a:	42ab      	cmp	r3, r5
   2313c:	d1f1      	bne.n	23122 <ble_sm_sc_public_key_rx+0x5a>
        rc = ble_sm_alg_gen_dhkey(proc->pub_key_peer.x,
   2313e:	f506 73a9 	add.w	r3, r6, #338	; 0x152
   23142:	4a24      	ldr	r2, [pc, #144]	; (231d4 <ble_sm_sc_public_key_rx+0x10c>)
   23144:	f506 7191 	add.w	r1, r6, #290	; 0x122
   23148:	f506 7081 	add.w	r0, r6, #258	; 0x102
   2314c:	f002 fdd4 	bl	25cf8 <ble_sm_alg_gen_dhkey>
        if (rc != 0) {
   23150:	b180      	cbz	r0, 23174 <ble_sm_sc_public_key_rx+0xac>
            res->app_status = BLE_HS_SM_US_ERR(BLE_SM_ERR_DHKEY);
   23152:	f240 430b 	movw	r3, #1035	; 0x40b
   23156:	6023      	str	r3, [r4, #0]
            res->sm_err = BLE_SM_ERR_DHKEY;
   23158:	230b      	movs	r3, #11
   2315a:	7123      	strb	r3, [r4, #4]
            res->enc_cb = 1;
   2315c:	7d23      	ldrb	r3, [r4, #20]
   2315e:	f043 0302 	orr.w	r3, r3, #2
   23162:	7523      	strb	r3, [r4, #20]
   23164:	e003      	b.n	2316e <ble_sm_sc_public_key_rx+0xa6>
        res->app_status = BLE_HS_ENOENT;
   23166:	2305      	movs	r3, #5
   23168:	6023      	str	r3, [r4, #0]
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   2316a:	2308      	movs	r3, #8
   2316c:	7123      	strb	r3, [r4, #4]
    ble_hs_unlock();
   2316e:	f7fb f9dd 	bl	1e52c <ble_hs_unlock>
   23172:	e7b8      	b.n	230e6 <ble_sm_sc_public_key_rx+0x1e>
            if (proc->flags & BLE_SM_PROC_F_INITIATOR) {
   23174:	7a33      	ldrb	r3, [r6, #8]
   23176:	f013 0f01 	tst.w	r3, #1
   2317a:	d025      	beq.n	231c8 <ble_sm_sc_public_key_rx+0x100>
                if (proc->pair_alg == BLE_SM_PAIR_ALG_OOB) {
   2317c:	7b33      	ldrb	r3, [r6, #12]
   2317e:	2b02      	cmp	r3, #2
   23180:	d01c      	beq.n	231bc <ble_sm_sc_public_key_rx+0xf4>
                    proc->state = BLE_SM_PROC_STATE_CONFIRM;
   23182:	2301      	movs	r3, #1
   23184:	7373      	strb	r3, [r6, #13]
                rc = ble_sm_sc_io_action(proc, &ioact);
   23186:	f10d 0107 	add.w	r1, sp, #7
   2318a:	4630      	mov	r0, r6
   2318c:	f7ff fca2 	bl	22ad4 <ble_sm_sc_io_action>
                if (ble_sm_ioact_state(ioact) == proc->state) {
   23190:	f89d 0007 	ldrb.w	r0, [sp, #7]
   23194:	f7fe ff32 	bl	21ffc <ble_sm_ioact_state>
   23198:	7b73      	ldrb	r3, [r6, #13]
   2319a:	4298      	cmp	r0, r3
   2319c:	d010      	beq.n	231c0 <ble_sm_sc_public_key_rx+0xf8>
                if (ble_sm_proc_can_advance(proc) &&
   2319e:	4630      	mov	r0, r6
   231a0:	f7fe ff3c 	bl	2201c <ble_sm_proc_can_advance>
   231a4:	2800      	cmp	r0, #0
   231a6:	d0e2      	beq.n	2316e <ble_sm_sc_public_key_rx+0xa6>
                    ble_sm_sc_initiator_txes_confirm(proc)) {
   231a8:	4630      	mov	r0, r6
   231aa:	f7ff fbe7 	bl	2297c <ble_sm_sc_initiator_txes_confirm>
                if (ble_sm_proc_can_advance(proc) &&
   231ae:	2800      	cmp	r0, #0
   231b0:	d0dd      	beq.n	2316e <ble_sm_sc_public_key_rx+0xa6>
                    res->execute = 1;
   231b2:	7d23      	ldrb	r3, [r4, #20]
   231b4:	f043 0301 	orr.w	r3, r3, #1
   231b8:	7523      	strb	r3, [r4, #20]
   231ba:	e7d8      	b.n	2316e <ble_sm_sc_public_key_rx+0xa6>
                    proc->state = BLE_SM_PROC_STATE_RANDOM;
   231bc:	7373      	strb	r3, [r6, #13]
   231be:	e7e2      	b.n	23186 <ble_sm_sc_public_key_rx+0xbe>
                    res->passkey_params.action = ioact;
   231c0:	f89d 3007 	ldrb.w	r3, [sp, #7]
   231c4:	7223      	strb	r3, [r4, #8]
   231c6:	e7ea      	b.n	2319e <ble_sm_sc_public_key_rx+0xd6>
                res->execute = 1;
   231c8:	7d23      	ldrb	r3, [r4, #20]
   231ca:	f043 0301 	orr.w	r3, r3, #1
   231ce:	7523      	strb	r3, [r4, #20]
   231d0:	e7cd      	b.n	2316e <ble_sm_sc_public_key_rx+0xa6>
   231d2:	bf00      	nop
   231d4:	20003228 	.word	0x20003228

000231d8 <ble_sm_sc_dhkey_check_exec>:
{
   231d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   231dc:	b08d      	sub	sp, #52	; 0x34
   231de:	4604      	mov	r4, r0
   231e0:	460d      	mov	r5, r1
    if (proc->flags & BLE_SM_PROC_F_INITIATOR) {
   231e2:	7a03      	ldrb	r3, [r0, #8]
   231e4:	f013 0f01 	tst.w	r3, #1
   231e8:	d036      	beq.n	23258 <ble_sm_sc_dhkey_check_exec+0x80>
        iocap = &pair_req->io_cap;
   231ea:	f100 0711 	add.w	r7, r0, #17
    if (proc->pair_alg == BLE_SM_PAIR_ALG_OOB) {
   231ee:	7b23      	ldrb	r3, [r4, #12]
   231f0:	2b02      	cmp	r3, #2
   231f2:	d034      	beq.n	2325e <ble_sm_sc_dhkey_check_exec+0x86>
    ble_sm_sc_dhkey_addrs(proc, &our_addr, &peer_addr);
   231f4:	aa08      	add	r2, sp, #32
   231f6:	a90a      	add	r1, sp, #40	; 0x28
   231f8:	4620      	mov	r0, r4
   231fa:	f7ff fc4f 	bl	22a9c <ble_sm_sc_dhkey_addrs>
    cmd = ble_sm_cmd_get(BLE_SM_OP_PAIR_DHKEY_CHECK, sizeof(*cmd), &txom);
   231fe:	aa07      	add	r2, sp, #28
   23200:	2110      	movs	r1, #16
   23202:	200d      	movs	r0, #13
   23204:	f7ff fb8a 	bl	2291c <ble_sm_cmd_get>
    if (!cmd) {
   23208:	4680      	mov	r8, r0
   2320a:	2800      	cmp	r0, #0
   2320c:	d04e      	beq.n	232ac <ble_sm_sc_dhkey_check_exec+0xd4>
    rc = ble_sm_alg_f6(proc->mackey, ble_sm_our_pair_rand(proc),
   2320e:	f504 76a1 	add.w	r6, r4, #322	; 0x142
   23212:	4620      	mov	r0, r4
   23214:	f7ff f97f 	bl	22516 <ble_sm_our_pair_rand>
   23218:	4681      	mov	r9, r0
                       ble_sm_peer_pair_rand(proc), proc->tk, iocap,
   2321a:	4620      	mov	r0, r4
   2321c:	f7ff f9d5 	bl	225ca <ble_sm_peer_pair_rand>
    rc = ble_sm_alg_f6(proc->mackey, ble_sm_our_pair_rand(proc),
   23220:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   23224:	f89d 2020 	ldrb.w	r2, [sp, #32]
   23228:	f8cd 8014 	str.w	r8, [sp, #20]
   2322c:	f10d 0121 	add.w	r1, sp, #33	; 0x21
   23230:	9104      	str	r1, [sp, #16]
   23232:	9203      	str	r2, [sp, #12]
   23234:	f10d 0229 	add.w	r2, sp, #41	; 0x29
   23238:	9202      	str	r2, [sp, #8]
   2323a:	9301      	str	r3, [sp, #4]
   2323c:	9700      	str	r7, [sp, #0]
   2323e:	f104 031e 	add.w	r3, r4, #30
   23242:	4602      	mov	r2, r0
   23244:	4649      	mov	r1, r9
   23246:	4630      	mov	r0, r6
   23248:	f002 fc64 	bl	25b14 <ble_sm_alg_f6>
    if (rc != 0) {
   2324c:	4606      	mov	r6, r0
   2324e:	b300      	cbz	r0, 23292 <ble_sm_sc_dhkey_check_exec+0xba>
        os_mbuf_free_chain(txom);
   23250:	9807      	ldr	r0, [sp, #28]
   23252:	f7ea fbe0 	bl	da16 <os_mbuf_free_chain>
        goto err;
   23256:	e02a      	b.n	232ae <ble_sm_sc_dhkey_check_exec+0xd6>
        iocap = &pair_rsp->io_cap;
   23258:	f100 0718 	add.w	r7, r0, #24
   2325c:	e7c7      	b.n	231ee <ble_sm_sc_dhkey_check_exec+0x16>
        if (proc->oob_data_remote) {
   2325e:	f8d4 3178 	ldr.w	r3, [r4, #376]	; 0x178
   23262:	b163      	cbz	r3, 2327e <ble_sm_sc_dhkey_check_exec+0xa6>
            memcpy(proc->tk, proc->oob_data_remote->r, 16);
   23264:	f104 021e 	add.w	r2, r4, #30
   23268:	f8d3 c000 	ldr.w	ip, [r3]
   2326c:	685e      	ldr	r6, [r3, #4]
   2326e:	6898      	ldr	r0, [r3, #8]
   23270:	68d9      	ldr	r1, [r3, #12]
   23272:	f8c4 c01e 	str.w	ip, [r4, #30]
   23276:	6056      	str	r6, [r2, #4]
   23278:	6090      	str	r0, [r2, #8]
   2327a:	60d1      	str	r1, [r2, #12]
   2327c:	e7ba      	b.n	231f4 <ble_sm_sc_dhkey_check_exec+0x1c>
            memset(proc->tk, 0, 16);
   2327e:	2200      	movs	r2, #0
   23280:	f8c4 201e 	str.w	r2, [r4, #30]
   23284:	f8c4 2022 	str.w	r2, [r4, #34]	; 0x22
   23288:	f8c4 2026 	str.w	r2, [r4, #38]	; 0x26
   2328c:	f8c4 202a 	str.w	r2, [r4, #42]	; 0x2a
   23290:	e7b0      	b.n	231f4 <ble_sm_sc_dhkey_check_exec+0x1c>
    rc = ble_sm_tx(proc->conn_handle, txom);
   23292:	9907      	ldr	r1, [sp, #28]
   23294:	8960      	ldrh	r0, [r4, #10]
   23296:	f7ff fb5b 	bl	22950 <ble_sm_tx>
    if (rc != 0) {
   2329a:	4606      	mov	r6, r0
   2329c:	b938      	cbnz	r0, 232ae <ble_sm_sc_dhkey_check_exec+0xd6>
    if (!(proc->flags & BLE_SM_PROC_F_INITIATOR)) {
   2329e:	7a23      	ldrb	r3, [r4, #8]
   232a0:	f013 0f01 	tst.w	r3, #1
   232a4:	d10a      	bne.n	232bc <ble_sm_sc_dhkey_check_exec+0xe4>
        proc->state = BLE_SM_PROC_STATE_LTK_START;
   232a6:	2303      	movs	r3, #3
   232a8:	7363      	strb	r3, [r4, #13]
   232aa:	e007      	b.n	232bc <ble_sm_sc_dhkey_check_exec+0xe4>
        rc = BLE_HS_ENOMEM;
   232ac:	2606      	movs	r6, #6
    res->app_status = rc;
   232ae:	602e      	str	r6, [r5, #0]
    res->enc_cb = 1;
   232b0:	7d2b      	ldrb	r3, [r5, #20]
   232b2:	f043 0302 	orr.w	r3, r3, #2
   232b6:	752b      	strb	r3, [r5, #20]
    res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   232b8:	2308      	movs	r3, #8
   232ba:	712b      	strb	r3, [r5, #4]
}
   232bc:	b00d      	add	sp, #52	; 0x34
   232be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000232c2 <ble_sm_sc_dhkey_check_rx>:

void
ble_sm_sc_dhkey_check_rx(uint16_t conn_handle, struct os_mbuf **om,
                         struct ble_sm_result *res)
{
   232c2:	b570      	push	{r4, r5, r6, lr}
   232c4:	4606      	mov	r6, r0
   232c6:	460d      	mov	r5, r1
   232c8:	4614      	mov	r4, r2
    struct ble_sm_dhkey_check *cmd;
    struct ble_sm_proc *proc;

    res->app_status = ble_hs_mbuf_pullup_base(om, sizeof(*cmd));
   232ca:	2110      	movs	r1, #16
   232cc:	4628      	mov	r0, r5
   232ce:	f7fc feff 	bl	200d0 <ble_hs_mbuf_pullup_base>
   232d2:	6020      	str	r0, [r4, #0]
    if (res->app_status != 0) {
   232d4:	b130      	cbz	r0, 232e4 <ble_sm_sc_dhkey_check_rx+0x22>
        res->enc_cb = 1;
   232d6:	7d23      	ldrb	r3, [r4, #20]
   232d8:	f043 0302 	orr.w	r3, r3, #2
   232dc:	7523      	strb	r3, [r4, #20]
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   232de:	2308      	movs	r3, #8
   232e0:	7123      	strb	r3, [r4, #4]
        res->app_status = BLE_HS_ENOENT;
    } else {
        ble_sm_dhkey_check_process(proc, cmd, res);
    }
    ble_hs_unlock();
}
   232e2:	bd70      	pop	{r4, r5, r6, pc}
    cmd = (struct ble_sm_dhkey_check *)(*om)->om_data;
   232e4:	682b      	ldr	r3, [r5, #0]
   232e6:	681d      	ldr	r5, [r3, #0]
    ble_hs_lock();
   232e8:	f7fb f91c 	bl	1e524 <ble_hs_lock>
    proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_DHKEY_CHECK, -1,
   232ec:	2300      	movs	r3, #0
   232ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   232f2:	210a      	movs	r1, #10
   232f4:	4630      	mov	r0, r6
   232f6:	f7fe fc87 	bl	21c08 <ble_sm_proc_find>
    if (proc == NULL) {
   232fa:	b130      	cbz	r0, 2330a <ble_sm_sc_dhkey_check_rx+0x48>
        ble_sm_dhkey_check_process(proc, cmd, res);
   232fc:	4622      	mov	r2, r4
   232fe:	4629      	mov	r1, r5
   23300:	f7ff fc42 	bl	22b88 <ble_sm_dhkey_check_process>
    ble_hs_unlock();
   23304:	f7fb f912 	bl	1e52c <ble_hs_unlock>
   23308:	e7eb      	b.n	232e2 <ble_sm_sc_dhkey_check_rx+0x20>
        res->app_status = BLE_HS_ENOENT;
   2330a:	2305      	movs	r3, #5
   2330c:	6023      	str	r3, [r4, #0]
   2330e:	e7f9      	b.n	23304 <ble_sm_sc_dhkey_check_rx+0x42>

00023310 <ble_sm_sc_init>:
    return 0;
}

void
ble_sm_sc_init(void)
{
   23310:	b508      	push	{r3, lr}
    ble_sm_alg_ecc_init();
   23312:	f002 fd4b 	bl	25dac <ble_sm_alg_ecc_init>
    ble_sm_sc_keys_generated = 0;
   23316:	4b02      	ldr	r3, [pc, #8]	; (23320 <ble_sm_sc_init+0x10>)
   23318:	2200      	movs	r2, #0
   2331a:	701a      	strb	r2, [r3, #0]
}
   2331c:	bd08      	pop	{r3, pc}
   2331e:	bf00      	nop
   23320:	20003224 	.word	0x20003224

00023324 <ble_store_status>:
    return rc;
}

static int
ble_store_status(struct ble_store_status_event *event)
{
   23324:	b508      	push	{r3, lr}
    int rc;

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());

    if (ble_hs_cfg.store_status_cb == NULL) {
   23326:	4b04      	ldr	r3, [pc, #16]	; (23338 <ble_store_status+0x14>)
   23328:	6a1b      	ldr	r3, [r3, #32]
   2332a:	b11b      	cbz	r3, 23334 <ble_store_status+0x10>
        rc = BLE_HS_ENOTSUP;
    } else {
        rc = ble_hs_cfg.store_status_cb(event, ble_hs_cfg.store_status_arg);
   2332c:	4a02      	ldr	r2, [pc, #8]	; (23338 <ble_store_status+0x14>)
   2332e:	6a51      	ldr	r1, [r2, #36]	; 0x24
   23330:	4798      	blx	r3
    }

    return rc;
}
   23332:	bd08      	pop	{r3, pc}
        rc = BLE_HS_ENOTSUP;
   23334:	2008      	movs	r0, #8
    return rc;
   23336:	e7fc      	b.n	23332 <ble_store_status+0xe>
   23338:	2000015c 	.word	0x2000015c

0002333c <ble_store_read>:
{
   2333c:	b570      	push	{r4, r5, r6, lr}
   2333e:	4604      	mov	r4, r0
   23340:	460d      	mov	r5, r1
   23342:	4616      	mov	r6, r2
    ble_hs_lock();
   23344:	f7fb f8ee 	bl	1e524 <ble_hs_lock>
    if (ble_hs_cfg.store_read_cb == NULL) {
   23348:	4b06      	ldr	r3, [pc, #24]	; (23364 <ble_store_read+0x28>)
   2334a:	695b      	ldr	r3, [r3, #20]
   2334c:	b143      	cbz	r3, 23360 <ble_store_read+0x24>
        rc = ble_hs_cfg.store_read_cb(obj_type, key, val);
   2334e:	4632      	mov	r2, r6
   23350:	4629      	mov	r1, r5
   23352:	4620      	mov	r0, r4
   23354:	4798      	blx	r3
   23356:	4604      	mov	r4, r0
    ble_hs_unlock();
   23358:	f7fb f8e8 	bl	1e52c <ble_hs_unlock>
}
   2335c:	4620      	mov	r0, r4
   2335e:	bd70      	pop	{r4, r5, r6, pc}
        rc = BLE_HS_ENOTSUP;
   23360:	2408      	movs	r4, #8
   23362:	e7f9      	b.n	23358 <ble_store_read+0x1c>
   23364:	2000015c 	.word	0x2000015c

00023368 <ble_store_delete>:
{
   23368:	b538      	push	{r3, r4, r5, lr}
   2336a:	4604      	mov	r4, r0
   2336c:	460d      	mov	r5, r1
    ble_hs_lock();
   2336e:	f7fb f8d9 	bl	1e524 <ble_hs_lock>
    if (ble_hs_cfg.store_delete_cb == NULL) {
   23372:	4b06      	ldr	r3, [pc, #24]	; (2338c <ble_store_delete+0x24>)
   23374:	69db      	ldr	r3, [r3, #28]
   23376:	b13b      	cbz	r3, 23388 <ble_store_delete+0x20>
        rc = ble_hs_cfg.store_delete_cb(obj_type, key);
   23378:	4629      	mov	r1, r5
   2337a:	4620      	mov	r0, r4
   2337c:	4798      	blx	r3
   2337e:	4604      	mov	r4, r0
    ble_hs_unlock();
   23380:	f7fb f8d4 	bl	1e52c <ble_hs_unlock>
}
   23384:	4620      	mov	r0, r4
   23386:	bd38      	pop	{r3, r4, r5, pc}
        rc = BLE_HS_ENOTSUP;
   23388:	2408      	movs	r4, #8
   2338a:	e7f9      	b.n	23380 <ble_store_delete+0x18>
   2338c:	2000015c 	.word	0x2000015c

00023390 <ble_store_overflow_event>:

int
ble_store_overflow_event(int obj_type, const union ble_store_value *value)
{
   23390:	b500      	push	{lr}
   23392:	b085      	sub	sp, #20
    struct ble_store_status_event event;

    event.event_code = BLE_STORE_EVENT_OVERFLOW;
   23394:	2301      	movs	r3, #1
   23396:	9301      	str	r3, [sp, #4]
    event.overflow.obj_type = obj_type;
   23398:	9002      	str	r0, [sp, #8]
    event.overflow.value = value;
   2339a:	9103      	str	r1, [sp, #12]

    return ble_store_status(&event);
   2339c:	a801      	add	r0, sp, #4
   2339e:	f7ff ffc1 	bl	23324 <ble_store_status>
}
   233a2:	b005      	add	sp, #20
   233a4:	f85d fb04 	ldr.w	pc, [sp], #4

000233a8 <ble_store_write>:
{
   233a8:	b570      	push	{r4, r5, r6, lr}
   233aa:	4606      	mov	r6, r0
   233ac:	460d      	mov	r5, r1
    if (ble_hs_cfg.store_write_cb == NULL) {
   233ae:	4b0d      	ldr	r3, [pc, #52]	; (233e4 <ble_store_write+0x3c>)
   233b0:	699b      	ldr	r3, [r3, #24]
   233b2:	b1ab      	cbz	r3, 233e0 <ble_store_write+0x38>
        ble_hs_lock();
   233b4:	f7fb f8b6 	bl	1e524 <ble_hs_lock>
        rc = ble_hs_cfg.store_write_cb(obj_type, val);
   233b8:	4b0a      	ldr	r3, [pc, #40]	; (233e4 <ble_store_write+0x3c>)
   233ba:	699b      	ldr	r3, [r3, #24]
   233bc:	4629      	mov	r1, r5
   233be:	4630      	mov	r0, r6
   233c0:	4798      	blx	r3
   233c2:	4604      	mov	r4, r0
        ble_hs_unlock();
   233c4:	f7fb f8b2 	bl	1e52c <ble_hs_unlock>
        switch (rc) {
   233c8:	2c1b      	cmp	r4, #27
   233ca:	d001      	beq.n	233d0 <ble_store_write+0x28>
}
   233cc:	4620      	mov	r0, r4
   233ce:	bd70      	pop	{r4, r5, r6, pc}
            rc = ble_store_overflow_event(obj_type, val);
   233d0:	4629      	mov	r1, r5
   233d2:	4630      	mov	r0, r6
   233d4:	f7ff ffdc 	bl	23390 <ble_store_overflow_event>
            if (rc != 0) {
   233d8:	4604      	mov	r4, r0
   233da:	2800      	cmp	r0, #0
   233dc:	d0ea      	beq.n	233b4 <ble_store_write+0xc>
   233de:	e7f5      	b.n	233cc <ble_store_write+0x24>
        return BLE_HS_ENOTSUP;
   233e0:	2408      	movs	r4, #8
   233e2:	e7f3      	b.n	233cc <ble_store_write+0x24>
   233e4:	2000015c 	.word	0x2000015c

000233e8 <ble_store_persist_sec>:
}

static int
ble_store_persist_sec(int obj_type,
                      const struct ble_store_value_sec *value_sec)
{
   233e8:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(value_sec->ltk_present ||
                      value_sec->irk_present ||
                      value_sec->csrk_present);

    store_value = (void *)value_sec;
    rc = ble_store_write(obj_type, store_value);
   233ea:	f7ff ffdd 	bl	233a8 <ble_store_write>
    return rc;
}
   233ee:	bd08      	pop	{r3, pc}

000233f0 <ble_store_full_event>:
{
   233f0:	b500      	push	{lr}
   233f2:	b085      	sub	sp, #20
    event.event_code = BLE_STORE_EVENT_FULL;
   233f4:	2302      	movs	r3, #2
   233f6:	9301      	str	r3, [sp, #4]
    event.full.obj_type = obj_type;
   233f8:	9002      	str	r0, [sp, #8]
    event.full.conn_handle = conn_handle;
   233fa:	f8ad 100c 	strh.w	r1, [sp, #12]
    return ble_store_status(&event);
   233fe:	a801      	add	r0, sp, #4
   23400:	f7ff ff90 	bl	23324 <ble_store_status>
}
   23404:	b005      	add	sp, #20
   23406:	f85d fb04 	ldr.w	pc, [sp], #4

0002340a <ble_store_read_our_sec>:
{
   2340a:	b508      	push	{r3, lr}
    rc = ble_store_read(BLE_STORE_OBJ_TYPE_OUR_SEC, store_key, store_value);
   2340c:	460a      	mov	r2, r1
   2340e:	4601      	mov	r1, r0
   23410:	2001      	movs	r0, #1
   23412:	f7ff ff93 	bl	2333c <ble_store_read>
}
   23416:	bd08      	pop	{r3, pc}

00023418 <ble_store_write_our_sec>:

int
ble_store_write_our_sec(const struct ble_store_value_sec *value_sec)
{
   23418:	b508      	push	{r3, lr}
    int rc;

    rc = ble_store_persist_sec(BLE_STORE_OBJ_TYPE_OUR_SEC, value_sec);
   2341a:	4601      	mov	r1, r0
   2341c:	2001      	movs	r0, #1
   2341e:	f7ff ffe3 	bl	233e8 <ble_store_persist_sec>
    return rc;
}
   23422:	bd08      	pop	{r3, pc}

00023424 <ble_store_read_peer_sec>:
}

int
ble_store_read_peer_sec(const struct ble_store_key_sec *key_sec,
                        struct ble_store_value_sec *value_sec)
{
   23424:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(key_sec->peer_addr.type == BLE_ADDR_PUBLIC ||
                      key_sec->peer_addr.type == BLE_ADDR_RANDOM);

    store_key = (void *)key_sec;
    store_value = (void *)value_sec;
    rc = ble_store_read(BLE_STORE_OBJ_TYPE_PEER_SEC, store_key, store_value);
   23426:	460a      	mov	r2, r1
   23428:	4601      	mov	r1, r0
   2342a:	2002      	movs	r0, #2
   2342c:	f7ff ff86 	bl	2333c <ble_store_read>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   23430:	bd08      	pop	{r3, pc}

00023432 <ble_store_write_peer_sec>:

int
ble_store_write_peer_sec(const struct ble_store_value_sec *value_sec)
{
   23432:	b570      	push	{r4, r5, r6, lr}
   23434:	b082      	sub	sp, #8
   23436:	4604      	mov	r4, r0
    int rc;

    rc = ble_store_persist_sec(BLE_STORE_OBJ_TYPE_PEER_SEC, value_sec);
   23438:	4601      	mov	r1, r0
   2343a:	2002      	movs	r0, #2
   2343c:	f7ff ffd4 	bl	233e8 <ble_store_persist_sec>
    if (rc != 0) {
   23440:	4605      	mov	r5, r0
   23442:	b9d8      	cbnz	r0, 2347c <ble_store_write_peer_sec+0x4a>
        return rc;
    }

    if (ble_addr_cmp(&value_sec->peer_addr, BLE_ADDR_ANY) &&
   23444:	2300      	movs	r3, #0
   23446:	9300      	str	r3, [sp, #0]
   23448:	f8cd 3003 	str.w	r3, [sp, #3]

static inline int ble_addr_cmp(const ble_addr_t *a, const ble_addr_t *b)
{
    int type_diff;

    type_diff = a->type - b->type;
   2344c:	7826      	ldrb	r6, [r4, #0]
   2344e:	4630      	mov	r0, r6
    if (type_diff != 0) {
   23450:	b92e      	cbnz	r6, 2345e <ble_store_write_peer_sec+0x2c>
        return type_diff;
    }

    return memcmp(a->val, b->val, sizeof(a->val));
   23452:	2206      	movs	r2, #6
   23454:	f10d 0101 	add.w	r1, sp, #1
   23458:	1c60      	adds	r0, r4, #1
   2345a:	f7ea ffe5 	bl	e428 <memcmp>
   2345e:	b160      	cbz	r0, 2347a <ble_store_write_peer_sec+0x48>
   23460:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
   23464:	f013 0f01 	tst.w	r3, #1
   23468:	d008      	beq.n	2347c <ble_store_write_peer_sec+0x4a>
        value_sec->irk_present) {

        /* Write the peer IRK to the controller keycache
         * There is not much to do here if it fails */
        rc = ble_hs_pvcy_add_entry(value_sec->peer_addr.val,
   2346a:	f104 0229 	add.w	r2, r4, #41	; 0x29
   2346e:	4631      	mov	r1, r6
   23470:	1c60      	adds	r0, r4, #1
   23472:	f7fc ff8b 	bl	2038c <ble_hs_pvcy_add_entry>
   23476:	4605      	mov	r5, r0
   23478:	e000      	b.n	2347c <ble_store_write_peer_sec+0x4a>
        if (rc != 0) {
            return rc;
        }
    }

    return 0;
   2347a:	4605      	mov	r5, r0
}
   2347c:	4628      	mov	r0, r5
   2347e:	b002      	add	sp, #8
   23480:	bd70      	pop	{r4, r5, r6, pc}

00023482 <ble_store_read_cccd>:

int
ble_store_read_cccd(const struct ble_store_key_cccd *key,
                    struct ble_store_value_cccd *out_value)
{
   23482:	b508      	push	{r3, lr}
    union ble_store_key *store_key;
    int rc;

    store_key = (void *)key;
    store_value = (void *)out_value;
    rc = ble_store_read(BLE_STORE_OBJ_TYPE_CCCD, store_key, store_value);
   23484:	460a      	mov	r2, r1
   23486:	4601      	mov	r1, r0
   23488:	2003      	movs	r0, #3
   2348a:	f7ff ff57 	bl	2333c <ble_store_read>
    return rc;
}
   2348e:	bd08      	pop	{r3, pc}

00023490 <ble_store_write_cccd>:

int
ble_store_write_cccd(const struct ble_store_value_cccd *value)
{
   23490:	b508      	push	{r3, lr}
    union ble_store_value *store_value;
    int rc;

    store_value = (void *)value;
    rc = ble_store_write(BLE_STORE_OBJ_TYPE_CCCD, store_value);
   23492:	4601      	mov	r1, r0
   23494:	2003      	movs	r0, #3
   23496:	f7ff ff87 	bl	233a8 <ble_store_write>
    return rc;
}
   2349a:	bd08      	pop	{r3, pc}

0002349c <ble_store_delete_cccd>:

int
ble_store_delete_cccd(const struct ble_store_key_cccd *key)
{
   2349c:	b508      	push	{r3, lr}
    union ble_store_key *store_key;
    int rc;

    store_key = (void *)key;
    rc = ble_store_delete(BLE_STORE_OBJ_TYPE_CCCD, store_key);
   2349e:	4601      	mov	r1, r0
   234a0:	2003      	movs	r0, #3
   234a2:	f7ff ff61 	bl	23368 <ble_store_delete>
    return rc;
}
   234a6:	bd08      	pop	{r3, pc}

000234a8 <ble_store_key_from_value_cccd>:

void
ble_store_key_from_value_cccd(struct ble_store_key_cccd *out_key,
                              const struct ble_store_value_cccd *value)
{
   234a8:	b410      	push	{r4}
   234aa:	4603      	mov	r3, r0
    out_key->peer_addr = value->peer_addr;
   234ac:	6808      	ldr	r0, [r1, #0]
   234ae:	6018      	str	r0, [r3, #0]
   234b0:	8888      	ldrh	r0, [r1, #4]
   234b2:	798a      	ldrb	r2, [r1, #6]
   234b4:	8098      	strh	r0, [r3, #4]
   234b6:	719a      	strb	r2, [r3, #6]
    out_key->chr_val_handle = value->chr_val_handle;
   234b8:	890a      	ldrh	r2, [r1, #8]
   234ba:	811a      	strh	r2, [r3, #8]
    out_key->idx = 0;
   234bc:	2200      	movs	r2, #0
   234be:	729a      	strb	r2, [r3, #10]
}
   234c0:	bc10      	pop	{r4}
   234c2:	4770      	bx	lr

000234c4 <ble_store_iterate>:

int
ble_store_iterate(int obj_type,
                  ble_store_iterator_fn *callback,
                  void *cookie)
{
   234c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   234c8:	b09d      	sub	sp, #116	; 0x74
   234ca:	4604      	mov	r4, r0
   234cc:	4688      	mov	r8, r1
   234ce:	4691      	mov	r9, r2
    int idx = 0;
    uint8_t *pidx;
    int rc;

    /* a magic value to retrieve anything */
    memset(&key, 0, sizeof(key));
   234d0:	2220      	movs	r2, #32
   234d2:	2100      	movs	r1, #0
   234d4:	a814      	add	r0, sp, #80	; 0x50
   234d6:	f7ea fff3 	bl	e4c0 <memset>
    switch(obj_type) {
   234da:	2c01      	cmp	r4, #1
   234dc:	db27      	blt.n	2352e <ble_store_iterate+0x6a>
   234de:	2c02      	cmp	r4, #2
   234e0:	dd08      	ble.n	234f4 <ble_store_iterate+0x30>
   234e2:	2c03      	cmp	r4, #3
   234e4:	d123      	bne.n	2352e <ble_store_iterate+0x6a>
        case BLE_STORE_OBJ_TYPE_OUR_SEC:
            key.sec.peer_addr = *BLE_ADDR_ANY;
            pidx = &key.sec.idx;
            break;
        case BLE_STORE_OBJ_TYPE_CCCD:
            key.cccd.peer_addr = *BLE_ADDR_ANY;
   234e6:	2300      	movs	r3, #0
   234e8:	9314      	str	r3, [sp, #80]	; 0x50
   234ea:	f8cd 3053 	str.w	r3, [sp, #83]	; 0x53
            pidx = &key.cccd.idx;
   234ee:	f10d 075a 	add.w	r7, sp, #90	; 0x5a
            break;
   234f2:	e005      	b.n	23500 <ble_store_iterate+0x3c>
            key.sec.peer_addr = *BLE_ADDR_ANY;
   234f4:	2300      	movs	r3, #0
   234f6:	9314      	str	r3, [sp, #80]	; 0x50
   234f8:	f8cd 3053 	str.w	r3, [sp, #83]	; 0x53
            pidx = &key.sec.idx;
   234fc:	f10d 0769 	add.w	r7, sp, #105	; 0x69
            pidx = &key.cccd.idx;
   23500:	2600      	movs	r6, #0
            BLE_HS_DBG_ASSERT(0);
            return BLE_HS_EINVAL;
    }

    while (1) {
        *pidx = idx;
   23502:	703e      	strb	r6, [r7, #0]
        rc = ble_store_read(obj_type, &key, &value);
   23504:	466a      	mov	r2, sp
   23506:	a914      	add	r1, sp, #80	; 0x50
   23508:	4620      	mov	r0, r4
   2350a:	f7ff ff17 	bl	2333c <ble_store_read>
        switch (rc) {
   2350e:	4605      	mov	r5, r0
   23510:	b118      	cbz	r0, 2351a <ble_store_iterate+0x56>
   23512:	2805      	cmp	r0, #5
   23514:	d10c      	bne.n	23530 <ble_store_iterate+0x6c>
            }
            break;

        case BLE_HS_ENOENT:
            /* No more entries. */
            return 0;
   23516:	2500      	movs	r5, #0
   23518:	e00a      	b.n	23530 <ble_store_iterate+0x6c>
            if (callback != NULL) {
   2351a:	f1b8 0f00 	cmp.w	r8, #0
   2351e:	d004      	beq.n	2352a <ble_store_iterate+0x66>
                rc = callback(obj_type, &value, cookie);
   23520:	464a      	mov	r2, r9
   23522:	4669      	mov	r1, sp
   23524:	4620      	mov	r0, r4
   23526:	47c0      	blx	r8
                if (rc != 0) {
   23528:	b910      	cbnz	r0, 23530 <ble_store_iterate+0x6c>
        default:
            /* Read error. */
            return rc;
        }

        idx++;
   2352a:	3601      	adds	r6, #1
        *pidx = idx;
   2352c:	e7e9      	b.n	23502 <ble_store_iterate+0x3e>
            return BLE_HS_EINVAL;
   2352e:	2503      	movs	r5, #3
    }
}
   23530:	4628      	mov	r0, r5
   23532:	b01d      	add	sp, #116	; 0x74
   23534:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00023538 <ble_store_util_iter_count>:
                          void *arg)
{
    int *count;

    count = arg;
    (*count)++;
   23538:	6813      	ldr	r3, [r2, #0]
   2353a:	3301      	adds	r3, #1
   2353c:	6013      	str	r3, [r2, #0]

    return 0;
}
   2353e:	2000      	movs	r0, #0
   23540:	4770      	bx	lr
	...

00023544 <ble_store_util_count>:

int
ble_store_util_count(int type, int *out_count)
{
   23544:	b508      	push	{r3, lr}
   23546:	460a      	mov	r2, r1
    int rc;

    *out_count = 0;
   23548:	2300      	movs	r3, #0
   2354a:	600b      	str	r3, [r1, #0]
    rc = ble_store_iterate(type,
   2354c:	4901      	ldr	r1, [pc, #4]	; (23554 <ble_store_util_count+0x10>)
   2354e:	f7ff ffb9 	bl	234c4 <ble_store_iterate>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   23552:	bd08      	pop	{r3, pc}
   23554:	00023539 	.word	0x00023539

00023558 <ble_uuid_init_from_buf>:
#define VERIFY_UUID(uuid)
#endif

int
ble_uuid_init_from_buf(ble_uuid_any_t *uuid, const void *buf, size_t len)
{
   23558:	b570      	push	{r4, r5, r6, lr}
   2355a:	4604      	mov	r4, r0
    switch (len) {
   2355c:	2a04      	cmp	r2, #4
   2355e:	d00d      	beq.n	2357c <ble_uuid_init_from_buf+0x24>
   23560:	2a10      	cmp	r2, #16
   23562:	d013      	beq.n	2358c <ble_uuid_init_from_buf+0x34>
   23564:	2a02      	cmp	r2, #2
   23566:	d001      	beq.n	2356c <ble_uuid_init_from_buf+0x14>
        uuid->u.type = BLE_UUID_TYPE_128;
        memcpy(uuid->u128.value, buf, 16);
        return 0;
    }

    return BLE_HS_EINVAL;
   23568:	2003      	movs	r0, #3
   2356a:	e006      	b.n	2357a <ble_uuid_init_from_buf+0x22>
        uuid->u.type = BLE_UUID_TYPE_16;
   2356c:	2310      	movs	r3, #16
   2356e:	7003      	strb	r3, [r0, #0]
        uuid->u16.value = get_le16(buf);
   23570:	4608      	mov	r0, r1
   23572:	f006 f90c 	bl	2978e <get_le16>
   23576:	8060      	strh	r0, [r4, #2]
        return 0;
   23578:	2000      	movs	r0, #0
}
   2357a:	bd70      	pop	{r4, r5, r6, pc}
        uuid->u.type = BLE_UUID_TYPE_32;
   2357c:	2320      	movs	r3, #32
   2357e:	7003      	strb	r3, [r0, #0]
        uuid->u32.value = get_le32(buf);
   23580:	4608      	mov	r0, r1
   23582:	f006 f909 	bl	29798 <get_le32>
   23586:	6060      	str	r0, [r4, #4]
        return 0;
   23588:	2000      	movs	r0, #0
   2358a:	e7f6      	b.n	2357a <ble_uuid_init_from_buf+0x22>
        uuid->u.type = BLE_UUID_TYPE_128;
   2358c:	4603      	mov	r3, r0
   2358e:	2280      	movs	r2, #128	; 0x80
   23590:	f803 2b01 	strb.w	r2, [r3], #1
        memcpy(uuid->u128.value, buf, 16);
   23594:	680e      	ldr	r6, [r1, #0]
   23596:	684d      	ldr	r5, [r1, #4]
   23598:	6888      	ldr	r0, [r1, #8]
   2359a:	68ca      	ldr	r2, [r1, #12]
   2359c:	f8c4 6001 	str.w	r6, [r4, #1]
   235a0:	605d      	str	r5, [r3, #4]
   235a2:	6098      	str	r0, [r3, #8]
   235a4:	60da      	str	r2, [r3, #12]
        return 0;
   235a6:	2000      	movs	r0, #0
   235a8:	e7e7      	b.n	2357a <ble_uuid_init_from_buf+0x22>

000235aa <ble_uuid_cmp>:

int
ble_uuid_cmp(const ble_uuid_t *uuid1, const ble_uuid_t *uuid2)
{
   235aa:	b508      	push	{r3, lr}
    VERIFY_UUID(uuid1);
    VERIFY_UUID(uuid2);

    if (uuid1->type != uuid2->type) {
   235ac:	7803      	ldrb	r3, [r0, #0]
   235ae:	780a      	ldrb	r2, [r1, #0]
   235b0:	4293      	cmp	r3, r2
   235b2:	d001      	beq.n	235b8 <ble_uuid_cmp+0xe>
      return uuid1->type - uuid2->type;
   235b4:	1a98      	subs	r0, r3, r2
    }

    BLE_HS_DBG_ASSERT(0);

    return -1;
}
   235b6:	bd08      	pop	{r3, pc}
    switch (uuid1->type) {
   235b8:	2b20      	cmp	r3, #32
   235ba:	d00a      	beq.n	235d2 <ble_uuid_cmp+0x28>
   235bc:	2b80      	cmp	r3, #128	; 0x80
   235be:	d00c      	beq.n	235da <ble_uuid_cmp+0x30>
   235c0:	2b10      	cmp	r3, #16
   235c2:	d002      	beq.n	235ca <ble_uuid_cmp+0x20>
    return -1;
   235c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   235c8:	e7f5      	b.n	235b6 <ble_uuid_cmp+0xc>
        return (int) BLE_UUID16(uuid1)->value - (int) BLE_UUID16(uuid2)->value;
   235ca:	8840      	ldrh	r0, [r0, #2]
   235cc:	884b      	ldrh	r3, [r1, #2]
   235ce:	1ac0      	subs	r0, r0, r3
   235d0:	e7f1      	b.n	235b6 <ble_uuid_cmp+0xc>
        return (int) BLE_UUID32(uuid1)->value - (int) BLE_UUID32(uuid2)->value;
   235d2:	6840      	ldr	r0, [r0, #4]
   235d4:	684b      	ldr	r3, [r1, #4]
   235d6:	1ac0      	subs	r0, r0, r3
   235d8:	e7ed      	b.n	235b6 <ble_uuid_cmp+0xc>
        return memcmp(BLE_UUID128(uuid1)->value, BLE_UUID128(uuid2)->value, 16);
   235da:	2210      	movs	r2, #16
   235dc:	3101      	adds	r1, #1
   235de:	3001      	adds	r0, #1
   235e0:	f7ea ff22 	bl	e428 <memcmp>
   235e4:	e7e7      	b.n	235b6 <ble_uuid_cmp+0xc>

000235e6 <ble_uuid_u16>:
uint16_t
ble_uuid_u16(const ble_uuid_t *uuid)
{
    VERIFY_UUID(uuid);

    return uuid->type == BLE_UUID_TYPE_16 ? BLE_UUID16(uuid)->value : 0;
   235e6:	7803      	ldrb	r3, [r0, #0]
   235e8:	2b10      	cmp	r3, #16
   235ea:	d001      	beq.n	235f0 <ble_uuid_u16+0xa>
   235ec:	2000      	movs	r0, #0
}
   235ee:	4770      	bx	lr
    return uuid->type == BLE_UUID_TYPE_16 ? BLE_UUID16(uuid)->value : 0;
   235f0:	8840      	ldrh	r0, [r0, #2]
   235f2:	4770      	bx	lr

000235f4 <ble_uuid_init_from_att_buf>:
    return rc;
}

int
ble_uuid_init_from_att_buf(ble_uuid_any_t *uuid, const void *buf, size_t len)
{
   235f4:	b570      	push	{r4, r5, r6, lr}
    int rc = 0;

    if (len == 2) {
   235f6:	2a02      	cmp	r2, #2
   235f8:	d003      	beq.n	23602 <ble_uuid_init_from_att_buf+0xe>
        uuid->u.type = BLE_UUID_TYPE_16;
        uuid->u16.value = get_le16(buf);
    } else if (len == 16) {
   235fa:	2a10      	cmp	r2, #16
   235fc:	d00a      	beq.n	23614 <ble_uuid_init_from_att_buf+0x20>
        uuid->u.type = BLE_UUID_TYPE_128;
        memcpy(uuid->u128.value, buf, 16);
    } else {
        rc = BLE_HS_EINVAL;
   235fe:	2003      	movs	r0, #3
    }

    return rc;
}
   23600:	bd70      	pop	{r4, r5, r6, pc}
   23602:	4604      	mov	r4, r0
        uuid->u.type = BLE_UUID_TYPE_16;
   23604:	2310      	movs	r3, #16
   23606:	7003      	strb	r3, [r0, #0]
        uuid->u16.value = get_le16(buf);
   23608:	4608      	mov	r0, r1
   2360a:	f006 f8c0 	bl	2978e <get_le16>
   2360e:	8060      	strh	r0, [r4, #2]
    int rc = 0;
   23610:	2000      	movs	r0, #0
   23612:	e7f5      	b.n	23600 <ble_uuid_init_from_att_buf+0xc>
        uuid->u.type = BLE_UUID_TYPE_128;
   23614:	4603      	mov	r3, r0
   23616:	2280      	movs	r2, #128	; 0x80
   23618:	f803 2b01 	strb.w	r2, [r3], #1
        memcpy(uuid->u128.value, buf, 16);
   2361c:	680e      	ldr	r6, [r1, #0]
   2361e:	684d      	ldr	r5, [r1, #4]
   23620:	688c      	ldr	r4, [r1, #8]
   23622:	68ca      	ldr	r2, [r1, #12]
   23624:	f8c0 6001 	str.w	r6, [r0, #1]
   23628:	605d      	str	r5, [r3, #4]
   2362a:	609c      	str	r4, [r3, #8]
   2362c:	60da      	str	r2, [r3, #12]
    int rc = 0;
   2362e:	2000      	movs	r0, #0
   23630:	e7e6      	b.n	23600 <ble_uuid_init_from_att_buf+0xc>

00023632 <ble_uuid_init_from_att_mbuf>:
{
   23632:	b530      	push	{r4, r5, lr}
   23634:	b085      	sub	sp, #20
   23636:	4605      	mov	r5, r0
   23638:	4608      	mov	r0, r1
   2363a:	4611      	mov	r1, r2
   2363c:	461c      	mov	r4, r3
    rc = os_mbuf_copydata(om, off, len, val);
   2363e:	466b      	mov	r3, sp
   23640:	4622      	mov	r2, r4
   23642:	f7ea fa89 	bl	db58 <os_mbuf_copydata>
    if (rc != 0) {
   23646:	4603      	mov	r3, r0
   23648:	b110      	cbz	r0, 23650 <ble_uuid_init_from_att_mbuf+0x1e>
}
   2364a:	4618      	mov	r0, r3
   2364c:	b005      	add	sp, #20
   2364e:	bd30      	pop	{r4, r5, pc}
    rc = ble_uuid_init_from_att_buf(uuid, val, len);
   23650:	4622      	mov	r2, r4
   23652:	4669      	mov	r1, sp
   23654:	4628      	mov	r0, r5
   23656:	f7ff ffcd 	bl	235f4 <ble_uuid_init_from_att_buf>
   2365a:	4603      	mov	r3, r0
    return rc;
   2365c:	e7f5      	b.n	2364a <ble_uuid_init_from_att_mbuf+0x18>
	...

00023660 <ble_uuid_flat>:
    return 0;
}

int
ble_uuid_flat(const ble_uuid_t *uuid, void *dst)
{
   23660:	b570      	push	{r4, r5, r6, lr}
   23662:	4605      	mov	r5, r0
   23664:	460c      	mov	r4, r1
    VERIFY_UUID(uuid);

    switch (uuid->type) {
   23666:	7803      	ldrb	r3, [r0, #0]
   23668:	2b20      	cmp	r3, #32
   2366a:	d00b      	beq.n	23684 <ble_uuid_flat+0x24>
   2366c:	2b80      	cmp	r3, #128	; 0x80
   2366e:	d016      	beq.n	2369e <ble_uuid_flat+0x3e>
   23670:	2b10      	cmp	r3, #16
   23672:	d001      	beq.n	23678 <ble_uuid_flat+0x18>
        break;
    case BLE_UUID_TYPE_128:
        memcpy(dst, BLE_UUID128(uuid)->value, 16);
        break;
    default:
        return BLE_HS_EINVAL;
   23674:	2003      	movs	r0, #3
   23676:	e004      	b.n	23682 <ble_uuid_flat+0x22>
        put_le16(dst, BLE_UUID16(uuid)->value);
   23678:	8841      	ldrh	r1, [r0, #2]
   2367a:	4620      	mov	r0, r4
   2367c:	f006 f866 	bl	2974c <put_le16>
    }

    return 0;
   23680:	2000      	movs	r0, #0
}
   23682:	bd70      	pop	{r4, r5, r6, pc}
        memcpy(dst, ble_uuid_base, 16);
   23684:	4e0b      	ldr	r6, [pc, #44]	; (236b4 <ble_uuid_flat+0x54>)
   23686:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   23688:	6020      	str	r0, [r4, #0]
   2368a:	6061      	str	r1, [r4, #4]
   2368c:	60a2      	str	r2, [r4, #8]
   2368e:	4620      	mov	r0, r4
   23690:	f840 3f0c 	str.w	r3, [r0, #12]!
        put_le32(dst + 12, BLE_UUID32(uuid)->value);
   23694:	6869      	ldr	r1, [r5, #4]
   23696:	f006 f85d 	bl	29754 <put_le32>
    return 0;
   2369a:	2000      	movs	r0, #0
        break;
   2369c:	e7f1      	b.n	23682 <ble_uuid_flat+0x22>
        memcpy(dst, BLE_UUID128(uuid)->value, 16);
   2369e:	f855 0f01 	ldr.w	r0, [r5, #1]!
   236a2:	6869      	ldr	r1, [r5, #4]
   236a4:	68aa      	ldr	r2, [r5, #8]
   236a6:	68eb      	ldr	r3, [r5, #12]
   236a8:	6020      	str	r0, [r4, #0]
   236aa:	6061      	str	r1, [r4, #4]
   236ac:	60a2      	str	r2, [r4, #8]
   236ae:	60e3      	str	r3, [r4, #12]
    return 0;
   236b0:	2000      	movs	r0, #0
        break;
   236b2:	e7e6      	b.n	23682 <ble_uuid_flat+0x22>
   236b4:	0002b810 	.word	0x0002b810

000236b8 <ble_uuid_length>:
int
ble_uuid_length(const ble_uuid_t *uuid)
{
    VERIFY_UUID(uuid);

    return uuid->type >> 3;
   236b8:	7800      	ldrb	r0, [r0, #0]
}
   236ba:	08c0      	lsrs	r0, r0, #3
   236bc:	4770      	bx	lr

000236be <ble_uuid_to_mbuf>:
{
   236be:	b538      	push	{r3, r4, r5, lr}
   236c0:	4605      	mov	r5, r0
   236c2:	460c      	mov	r4, r1
    len = ble_uuid_length(uuid);
   236c4:	f7ff fff8 	bl	236b8 <ble_uuid_length>
    buf = os_mbuf_extend(om, len);
   236c8:	b281      	uxth	r1, r0
   236ca:	4620      	mov	r0, r4
   236cc:	f7ea fc29 	bl	df22 <os_mbuf_extend>
    if (buf == NULL) {
   236d0:	b128      	cbz	r0, 236de <ble_uuid_to_mbuf+0x20>
   236d2:	4601      	mov	r1, r0
    ble_uuid_flat(uuid, buf);
   236d4:	4628      	mov	r0, r5
   236d6:	f7ff ffc3 	bl	23660 <ble_uuid_flat>
    return 0;
   236da:	2000      	movs	r0, #0
}
   236dc:	bd38      	pop	{r3, r4, r5, pc}
        return BLE_HS_ENOMEM;
   236de:	2006      	movs	r0, #6
   236e0:	e7fc      	b.n	236dc <ble_uuid_to_mbuf+0x1e>
	...

000236e4 <ble_att_rx_dispatch_entry_find>:
    STATS_NAME(ble_att_stats, write_cmd_tx)
STATS_NAME_END(ble_att_stats)

static const struct ble_att_rx_dispatch_entry *
ble_att_rx_dispatch_entry_find(uint8_t op)
{
   236e4:	4601      	mov	r1, r0
    const struct ble_att_rx_dispatch_entry *entry;
    int i;

    for (i = 0; i < BLE_ATT_RX_DISPATCH_SZ; i++) {
   236e6:	2300      	movs	r3, #0
   236e8:	2b1a      	cmp	r3, #26
   236ea:	d809      	bhi.n	23700 <ble_att_rx_dispatch_entry_find+0x1c>
        entry = ble_att_rx_dispatch + i;
   236ec:	4a06      	ldr	r2, [pc, #24]	; (23708 <ble_att_rx_dispatch_entry_find+0x24>)
   236ee:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
        if (entry->bde_op == op) {
   236f2:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
   236f6:	428a      	cmp	r2, r1
   236f8:	d005      	beq.n	23706 <ble_att_rx_dispatch_entry_find+0x22>
            return entry;
        }

        if (entry->bde_op > op) {
   236fa:	d803      	bhi.n	23704 <ble_att_rx_dispatch_entry_find+0x20>
    for (i = 0; i < BLE_ATT_RX_DISPATCH_SZ; i++) {
   236fc:	3301      	adds	r3, #1
   236fe:	e7f3      	b.n	236e8 <ble_att_rx_dispatch_entry_find+0x4>
            break;
        }
    }

    return NULL;
   23700:	2000      	movs	r0, #0
   23702:	4770      	bx	lr
   23704:	2000      	movs	r0, #0
}
   23706:	4770      	bx	lr
   23708:	0002b828 	.word	0x0002b828

0002370c <ble_att_inc_rx_stat>:
}

static void
ble_att_inc_rx_stat(uint8_t att_op)
{
    switch (att_op) {
   2370c:	3801      	subs	r0, #1
   2370e:	2851      	cmp	r0, #81	; 0x51
   23710:	f200 80f2 	bhi.w	238f8 <ble_att_inc_rx_stat+0x1ec>
   23714:	e8df f010 	tbh	[pc, r0, lsl #1]
   23718:	00570052 	.word	0x00570052
   2371c:	0061005c 	.word	0x0061005c
   23720:	006b0066 	.word	0x006b0066
   23724:	00750070 	.word	0x00750070
   23728:	007f007a 	.word	0x007f007a
   2372c:	00890084 	.word	0x00890084
   23730:	0093008e 	.word	0x0093008e
   23734:	009d0098 	.word	0x009d0098
   23738:	00ab00a4 	.word	0x00ab00a4
   2373c:	00f000b2 	.word	0x00f000b2
   23740:	00b900f0 	.word	0x00b900f0
   23744:	00c700c0 	.word	0x00c700c0
   23748:	00f000ce 	.word	0x00f000ce
   2374c:	00f000d5 	.word	0x00f000d5
   23750:	00e300dc 	.word	0x00e300dc
   23754:	00f000f0 	.word	0x00f000f0
   23758:	00f000f0 	.word	0x00f000f0
   2375c:	00f000f0 	.word	0x00f000f0
   23760:	00f000f0 	.word	0x00f000f0
   23764:	00f000f0 	.word	0x00f000f0
   23768:	00f000f0 	.word	0x00f000f0
   2376c:	00f000f0 	.word	0x00f000f0
   23770:	00f000f0 	.word	0x00f000f0
   23774:	00f000f0 	.word	0x00f000f0
   23778:	00f000f0 	.word	0x00f000f0
   2377c:	00f000f0 	.word	0x00f000f0
   23780:	00f000f0 	.word	0x00f000f0
   23784:	00f000f0 	.word	0x00f000f0
   23788:	00f000f0 	.word	0x00f000f0
   2378c:	00f000f0 	.word	0x00f000f0
   23790:	00f000f0 	.word	0x00f000f0
   23794:	00f000f0 	.word	0x00f000f0
   23798:	00f000f0 	.word	0x00f000f0
   2379c:	00f000f0 	.word	0x00f000f0
   237a0:	00f000f0 	.word	0x00f000f0
   237a4:	00f000f0 	.word	0x00f000f0
   237a8:	00f000f0 	.word	0x00f000f0
   237ac:	00f000f0 	.word	0x00f000f0
   237b0:	00f000f0 	.word	0x00f000f0
   237b4:	00f000f0 	.word	0x00f000f0
   237b8:	00ea00f0 	.word	0x00ea00f0
    case BLE_ATT_OP_ERROR_RSP:
        STATS_INC(ble_att_stats, error_rsp_rx);
   237bc:	4a4f      	ldr	r2, [pc, #316]	; (238fc <ble_att_inc_rx_stat+0x1f0>)
   237be:	68d3      	ldr	r3, [r2, #12]
   237c0:	3301      	adds	r3, #1
   237c2:	60d3      	str	r3, [r2, #12]
        break;
   237c4:	4770      	bx	lr

    case BLE_ATT_OP_MTU_REQ:
        STATS_INC(ble_att_stats, mtu_req_rx);
   237c6:	4a4d      	ldr	r2, [pc, #308]	; (238fc <ble_att_inc_rx_stat+0x1f0>)
   237c8:	6953      	ldr	r3, [r2, #20]
   237ca:	3301      	adds	r3, #1
   237cc:	6153      	str	r3, [r2, #20]
        break;
   237ce:	4770      	bx	lr

    case BLE_ATT_OP_MTU_RSP:
        STATS_INC(ble_att_stats, mtu_rsp_rx);
   237d0:	4a4a      	ldr	r2, [pc, #296]	; (238fc <ble_att_inc_rx_stat+0x1f0>)
   237d2:	69d3      	ldr	r3, [r2, #28]
   237d4:	3301      	adds	r3, #1
   237d6:	61d3      	str	r3, [r2, #28]
        break;
   237d8:	4770      	bx	lr

    case BLE_ATT_OP_FIND_INFO_REQ:
        STATS_INC(ble_att_stats, find_info_req_rx);
   237da:	4a48      	ldr	r2, [pc, #288]	; (238fc <ble_att_inc_rx_stat+0x1f0>)
   237dc:	6a53      	ldr	r3, [r2, #36]	; 0x24
   237de:	3301      	adds	r3, #1
   237e0:	6253      	str	r3, [r2, #36]	; 0x24
        break;
   237e2:	4770      	bx	lr

    case BLE_ATT_OP_FIND_INFO_RSP:
        STATS_INC(ble_att_stats, find_info_rsp_rx);
   237e4:	4a45      	ldr	r2, [pc, #276]	; (238fc <ble_att_inc_rx_stat+0x1f0>)
   237e6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   237e8:	3301      	adds	r3, #1
   237ea:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
   237ec:	4770      	bx	lr

    case BLE_ATT_OP_FIND_TYPE_VALUE_REQ:
        STATS_INC(ble_att_stats, find_type_value_req_rx);
   237ee:	4a43      	ldr	r2, [pc, #268]	; (238fc <ble_att_inc_rx_stat+0x1f0>)
   237f0:	6b53      	ldr	r3, [r2, #52]	; 0x34
   237f2:	3301      	adds	r3, #1
   237f4:	6353      	str	r3, [r2, #52]	; 0x34
        break;
   237f6:	4770      	bx	lr

    case BLE_ATT_OP_FIND_TYPE_VALUE_RSP:
        STATS_INC(ble_att_stats, find_type_value_rsp_rx);
   237f8:	4a40      	ldr	r2, [pc, #256]	; (238fc <ble_att_inc_rx_stat+0x1f0>)
   237fa:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
   237fc:	3301      	adds	r3, #1
   237fe:	63d3      	str	r3, [r2, #60]	; 0x3c
        break;
   23800:	4770      	bx	lr

    case BLE_ATT_OP_READ_TYPE_REQ:
        STATS_INC(ble_att_stats, read_type_req_rx);
   23802:	4a3e      	ldr	r2, [pc, #248]	; (238fc <ble_att_inc_rx_stat+0x1f0>)
   23804:	6c53      	ldr	r3, [r2, #68]	; 0x44
   23806:	3301      	adds	r3, #1
   23808:	6453      	str	r3, [r2, #68]	; 0x44
        break;
   2380a:	4770      	bx	lr

    case BLE_ATT_OP_READ_TYPE_RSP:
        STATS_INC(ble_att_stats, read_type_rsp_rx);
   2380c:	4a3b      	ldr	r2, [pc, #236]	; (238fc <ble_att_inc_rx_stat+0x1f0>)
   2380e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   23810:	3301      	adds	r3, #1
   23812:	64d3      	str	r3, [r2, #76]	; 0x4c
        break;
   23814:	4770      	bx	lr

    case BLE_ATT_OP_READ_REQ:
        STATS_INC(ble_att_stats, read_req_rx);
   23816:	4a39      	ldr	r2, [pc, #228]	; (238fc <ble_att_inc_rx_stat+0x1f0>)
   23818:	6d53      	ldr	r3, [r2, #84]	; 0x54
   2381a:	3301      	adds	r3, #1
   2381c:	6553      	str	r3, [r2, #84]	; 0x54
        break;
   2381e:	4770      	bx	lr

    case BLE_ATT_OP_READ_RSP:
        STATS_INC(ble_att_stats, read_rsp_rx);
   23820:	4a36      	ldr	r2, [pc, #216]	; (238fc <ble_att_inc_rx_stat+0x1f0>)
   23822:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
   23824:	3301      	adds	r3, #1
   23826:	65d3      	str	r3, [r2, #92]	; 0x5c
        break;
   23828:	4770      	bx	lr

    case BLE_ATT_OP_READ_BLOB_REQ:
        STATS_INC(ble_att_stats, read_blob_req_rx);
   2382a:	4a34      	ldr	r2, [pc, #208]	; (238fc <ble_att_inc_rx_stat+0x1f0>)
   2382c:	6e53      	ldr	r3, [r2, #100]	; 0x64
   2382e:	3301      	adds	r3, #1
   23830:	6653      	str	r3, [r2, #100]	; 0x64
        break;
   23832:	4770      	bx	lr

    case BLE_ATT_OP_READ_BLOB_RSP:
        STATS_INC(ble_att_stats, read_blob_rsp_rx);
   23834:	4a31      	ldr	r2, [pc, #196]	; (238fc <ble_att_inc_rx_stat+0x1f0>)
   23836:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
   23838:	3301      	adds	r3, #1
   2383a:	66d3      	str	r3, [r2, #108]	; 0x6c
        break;
   2383c:	4770      	bx	lr

    case BLE_ATT_OP_READ_MULT_REQ:
        STATS_INC(ble_att_stats, read_mult_req_rx);
   2383e:	4a2f      	ldr	r2, [pc, #188]	; (238fc <ble_att_inc_rx_stat+0x1f0>)
   23840:	6f53      	ldr	r3, [r2, #116]	; 0x74
   23842:	3301      	adds	r3, #1
   23844:	6753      	str	r3, [r2, #116]	; 0x74
        break;
   23846:	4770      	bx	lr

    case BLE_ATT_OP_READ_MULT_RSP:
        STATS_INC(ble_att_stats, read_mult_rsp_rx);
   23848:	4a2c      	ldr	r2, [pc, #176]	; (238fc <ble_att_inc_rx_stat+0x1f0>)
   2384a:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
   2384c:	3301      	adds	r3, #1
   2384e:	67d3      	str	r3, [r2, #124]	; 0x7c
        break;
   23850:	4770      	bx	lr

    case BLE_ATT_OP_READ_GROUP_TYPE_REQ:
        STATS_INC(ble_att_stats, read_group_type_req_rx);
   23852:	4a2a      	ldr	r2, [pc, #168]	; (238fc <ble_att_inc_rx_stat+0x1f0>)
   23854:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
   23858:	3301      	adds	r3, #1
   2385a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
        break;
   2385e:	4770      	bx	lr

    case BLE_ATT_OP_READ_GROUP_TYPE_RSP:
        STATS_INC(ble_att_stats, read_group_type_rsp_rx);
   23860:	4a26      	ldr	r2, [pc, #152]	; (238fc <ble_att_inc_rx_stat+0x1f0>)
   23862:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
   23866:	3301      	adds	r3, #1
   23868:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
        break;
   2386c:	4770      	bx	lr

    case BLE_ATT_OP_WRITE_REQ:
        STATS_INC(ble_att_stats, write_req_rx);
   2386e:	4a23      	ldr	r2, [pc, #140]	; (238fc <ble_att_inc_rx_stat+0x1f0>)
   23870:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
   23874:	3301      	adds	r3, #1
   23876:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        break;
   2387a:	4770      	bx	lr

    case BLE_ATT_OP_WRITE_RSP:
        STATS_INC(ble_att_stats, write_rsp_rx);
   2387c:	4a1f      	ldr	r2, [pc, #124]	; (238fc <ble_att_inc_rx_stat+0x1f0>)
   2387e:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
   23882:	3301      	adds	r3, #1
   23884:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
        break;
   23888:	4770      	bx	lr

    case BLE_ATT_OP_PREP_WRITE_REQ:
        STATS_INC(ble_att_stats, prep_write_req_rx);
   2388a:	4a1c      	ldr	r2, [pc, #112]	; (238fc <ble_att_inc_rx_stat+0x1f0>)
   2388c:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
   23890:	3301      	adds	r3, #1
   23892:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
        break;
   23896:	4770      	bx	lr

    case BLE_ATT_OP_PREP_WRITE_RSP:
        STATS_INC(ble_att_stats, prep_write_rsp_rx);
   23898:	4a18      	ldr	r2, [pc, #96]	; (238fc <ble_att_inc_rx_stat+0x1f0>)
   2389a:	f8d2 30ac 	ldr.w	r3, [r2, #172]	; 0xac
   2389e:	3301      	adds	r3, #1
   238a0:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
        break;
   238a4:	4770      	bx	lr

    case BLE_ATT_OP_EXEC_WRITE_REQ:
        STATS_INC(ble_att_stats, exec_write_req_rx);
   238a6:	4a15      	ldr	r2, [pc, #84]	; (238fc <ble_att_inc_rx_stat+0x1f0>)
   238a8:	f8d2 30b4 	ldr.w	r3, [r2, #180]	; 0xb4
   238ac:	3301      	adds	r3, #1
   238ae:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
        break;
   238b2:	4770      	bx	lr

    case BLE_ATT_OP_EXEC_WRITE_RSP:
        STATS_INC(ble_att_stats, exec_write_rsp_rx);
   238b4:	4a11      	ldr	r2, [pc, #68]	; (238fc <ble_att_inc_rx_stat+0x1f0>)
   238b6:	f8d2 30bc 	ldr.w	r3, [r2, #188]	; 0xbc
   238ba:	3301      	adds	r3, #1
   238bc:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc
        break;
   238c0:	4770      	bx	lr

    case BLE_ATT_OP_NOTIFY_REQ:
        STATS_INC(ble_att_stats, notify_req_rx);
   238c2:	4a0e      	ldr	r2, [pc, #56]	; (238fc <ble_att_inc_rx_stat+0x1f0>)
   238c4:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
   238c8:	3301      	adds	r3, #1
   238ca:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
        break;
   238ce:	4770      	bx	lr

    case BLE_ATT_OP_INDICATE_REQ:
        STATS_INC(ble_att_stats, indicate_req_rx);
   238d0:	4a0a      	ldr	r2, [pc, #40]	; (238fc <ble_att_inc_rx_stat+0x1f0>)
   238d2:	f8d2 30cc 	ldr.w	r3, [r2, #204]	; 0xcc
   238d6:	3301      	adds	r3, #1
   238d8:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
        break;
   238dc:	4770      	bx	lr

    case BLE_ATT_OP_INDICATE_RSP:
        STATS_INC(ble_att_stats, indicate_rsp_rx);
   238de:	4a07      	ldr	r2, [pc, #28]	; (238fc <ble_att_inc_rx_stat+0x1f0>)
   238e0:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
   238e4:	3301      	adds	r3, #1
   238e6:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
        break;
   238ea:	4770      	bx	lr

    case BLE_ATT_OP_WRITE_CMD:
        STATS_INC(ble_att_stats, write_cmd_rx);
   238ec:	4a03      	ldr	r2, [pc, #12]	; (238fc <ble_att_inc_rx_stat+0x1f0>)
   238ee:	f8d2 30dc 	ldr.w	r3, [r2, #220]	; 0xdc
   238f2:	3301      	adds	r3, #1
   238f4:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
        break;

    default:
        break;
    }
}
   238f8:	4770      	bx	lr
   238fa:	bf00      	nop
   238fc:	200046ac 	.word	0x200046ac

00023900 <ble_att_rx_handle_unknown_request>:
static void
ble_att_rx_handle_unknown_request(uint8_t op, uint16_t conn_handle,
                                  struct os_mbuf **om)
{
    /* If this is command (bit6 is set to 1), do nothing */
    if (op & 0x40) {
   23900:	f010 0f40 	tst.w	r0, #64	; 0x40
   23904:	d000      	beq.n	23908 <ble_att_rx_handle_unknown_request+0x8>
   23906:	4770      	bx	lr
{
   23908:	b570      	push	{r4, r5, r6, lr}
   2390a:	b082      	sub	sp, #8
   2390c:	4615      	mov	r5, r2
   2390e:	460e      	mov	r6, r1
   23910:	4604      	mov	r4, r0
        return;
    }

    os_mbuf_adj(*om, OS_MBUF_PKTLEN(*om));
   23912:	6810      	ldr	r0, [r2, #0]
   23914:	8a01      	ldrh	r1, [r0, #16]
   23916:	f7ea f94c 	bl	dbb2 <os_mbuf_adj>
    ble_att_svr_tx_error_rsp(conn_handle, *om, op, 0,
   2391a:	2306      	movs	r3, #6
   2391c:	9300      	str	r3, [sp, #0]
   2391e:	2300      	movs	r3, #0
   23920:	4622      	mov	r2, r4
   23922:	6829      	ldr	r1, [r5, #0]
   23924:	4630      	mov	r0, r6
   23926:	f001 fbcc 	bl	250c2 <ble_att_svr_tx_error_rsp>
                             BLE_ATT_ERR_REQ_NOT_SUPPORTED);

    *om = NULL;
   2392a:	2300      	movs	r3, #0
   2392c:	602b      	str	r3, [r5, #0]
}
   2392e:	b002      	add	sp, #8
   23930:	bd70      	pop	{r4, r5, r6, pc}

00023932 <ble_att_rx>:

static int
ble_att_rx(struct ble_l2cap_chan *chan)
{
   23932:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23936:	b082      	sub	sp, #8
   23938:	4604      	mov	r4, r0
    uint8_t op;
    uint16_t conn_handle;
    struct os_mbuf **om;
    int rc;

    conn_handle = ble_l2cap_get_conn_handle(chan);
   2393a:	f7fc ff68 	bl	2080e <ble_l2cap_get_conn_handle>
    if (conn_handle == BLE_HS_CONN_HANDLE_NONE) {
   2393e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   23942:	4298      	cmp	r0, r3
   23944:	d02f      	beq.n	239a6 <ble_att_rx+0x74>
   23946:	4605      	mov	r5, r0
        return BLE_HS_ENOTCONN;
    }

    om = &chan->rx_buf;
   23948:	f104 0710 	add.w	r7, r4, #16
    BLE_HS_DBG_ASSERT(*om != NULL);

    rc = os_mbuf_copydata(*om, 0, 1, &op);
   2394c:	f10d 0307 	add.w	r3, sp, #7
   23950:	2201      	movs	r2, #1
   23952:	2100      	movs	r1, #0
   23954:	6920      	ldr	r0, [r4, #16]
   23956:	f7ea f8ff 	bl	db58 <os_mbuf_copydata>
    if (rc != 0) {
   2395a:	bb48      	cbnz	r0, 239b0 <ble_att_rx+0x7e>
        return BLE_HS_EMSGSIZE;
    }

    entry = ble_att_rx_dispatch_entry_find(op);
   2395c:	f89d 6007 	ldrb.w	r6, [sp, #7]
   23960:	4630      	mov	r0, r6
   23962:	f7ff febf 	bl	236e4 <ble_att_rx_dispatch_entry_find>
    if (entry == NULL) {
   23966:	4680      	mov	r8, r0
   23968:	b1b0      	cbz	r0, 23998 <ble_att_rx+0x66>
        ble_att_rx_handle_unknown_request(op, conn_handle, om);
        return BLE_HS_ENOTSUP;
    }

    ble_att_inc_rx_stat(op);
   2396a:	4630      	mov	r0, r6
   2396c:	f7ff fece 	bl	2370c <ble_att_inc_rx_stat>

    /* Strip L2CAP ATT header from the front of the mbuf. */
    os_mbuf_adj(*om, 1);
   23970:	2101      	movs	r1, #1
   23972:	6920      	ldr	r0, [r4, #16]
   23974:	f7ea f91d 	bl	dbb2 <os_mbuf_adj>

    rc = entry->bde_fn(conn_handle, om);
   23978:	f8d8 3004 	ldr.w	r3, [r8, #4]
   2397c:	4639      	mov	r1, r7
   2397e:	4628      	mov	r0, r5
   23980:	4798      	blx	r3
    if (rc != 0) {
   23982:	4604      	mov	r4, r0
   23984:	b180      	cbz	r0, 239a8 <ble_att_rx+0x76>
        if (rc == BLE_HS_ENOTSUP) {
   23986:	2808      	cmp	r0, #8
   23988:	d10e      	bne.n	239a8 <ble_att_rx+0x76>
            ble_att_rx_handle_unknown_request(op, conn_handle, om);
   2398a:	463a      	mov	r2, r7
   2398c:	4629      	mov	r1, r5
   2398e:	f89d 0007 	ldrb.w	r0, [sp, #7]
   23992:	f7ff ffb5 	bl	23900 <ble_att_rx_handle_unknown_request>
   23996:	e007      	b.n	239a8 <ble_att_rx+0x76>
        ble_att_rx_handle_unknown_request(op, conn_handle, om);
   23998:	463a      	mov	r2, r7
   2399a:	4629      	mov	r1, r5
   2399c:	4630      	mov	r0, r6
   2399e:	f7ff ffaf 	bl	23900 <ble_att_rx_handle_unknown_request>
        return BLE_HS_ENOTSUP;
   239a2:	2408      	movs	r4, #8
   239a4:	e000      	b.n	239a8 <ble_att_rx+0x76>
        return BLE_HS_ENOTCONN;
   239a6:	2407      	movs	r4, #7
        }
        return rc;
    }

    return 0;
}
   239a8:	4620      	mov	r0, r4
   239aa:	b002      	add	sp, #8
   239ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return BLE_HS_EMSGSIZE;
   239b0:	2404      	movs	r4, #4
   239b2:	e7f9      	b.n	239a8 <ble_att_rx+0x76>

000239b4 <ble_att_conn_chan_find>:
{
   239b4:	b508      	push	{r3, lr}
    return ble_hs_misc_conn_chan_find(conn_handle, BLE_L2CAP_CID_ATT,
   239b6:	4613      	mov	r3, r2
   239b8:	460a      	mov	r2, r1
   239ba:	2104      	movs	r1, #4
   239bc:	f7fc fbb4 	bl	20128 <ble_hs_misc_conn_chan_find>
}
   239c0:	bd08      	pop	{r3, pc}
	...

000239c4 <ble_att_inc_tx_stat>:
    switch (att_op) {
   239c4:	3801      	subs	r0, #1
   239c6:	2851      	cmp	r0, #81	; 0x51
   239c8:	f200 80f4 	bhi.w	23bb4 <ble_att_inc_tx_stat+0x1f0>
   239cc:	e8df f010 	tbh	[pc, r0, lsl #1]
   239d0:	00570052 	.word	0x00570052
   239d4:	0061005c 	.word	0x0061005c
   239d8:	006b0066 	.word	0x006b0066
   239dc:	00750070 	.word	0x00750070
   239e0:	007f007a 	.word	0x007f007a
   239e4:	00890084 	.word	0x00890084
   239e8:	0093008e 	.word	0x0093008e
   239ec:	009f0098 	.word	0x009f0098
   239f0:	00ad00a6 	.word	0x00ad00a6
   239f4:	00f200b4 	.word	0x00f200b4
   239f8:	00bb00f2 	.word	0x00bb00f2
   239fc:	00c900c2 	.word	0x00c900c2
   23a00:	00f200d0 	.word	0x00f200d0
   23a04:	00f200d7 	.word	0x00f200d7
   23a08:	00e500de 	.word	0x00e500de
   23a0c:	00f200f2 	.word	0x00f200f2
   23a10:	00f200f2 	.word	0x00f200f2
   23a14:	00f200f2 	.word	0x00f200f2
   23a18:	00f200f2 	.word	0x00f200f2
   23a1c:	00f200f2 	.word	0x00f200f2
   23a20:	00f200f2 	.word	0x00f200f2
   23a24:	00f200f2 	.word	0x00f200f2
   23a28:	00f200f2 	.word	0x00f200f2
   23a2c:	00f200f2 	.word	0x00f200f2
   23a30:	00f200f2 	.word	0x00f200f2
   23a34:	00f200f2 	.word	0x00f200f2
   23a38:	00f200f2 	.word	0x00f200f2
   23a3c:	00f200f2 	.word	0x00f200f2
   23a40:	00f200f2 	.word	0x00f200f2
   23a44:	00f200f2 	.word	0x00f200f2
   23a48:	00f200f2 	.word	0x00f200f2
   23a4c:	00f200f2 	.word	0x00f200f2
   23a50:	00f200f2 	.word	0x00f200f2
   23a54:	00f200f2 	.word	0x00f200f2
   23a58:	00f200f2 	.word	0x00f200f2
   23a5c:	00f200f2 	.word	0x00f200f2
   23a60:	00f200f2 	.word	0x00f200f2
   23a64:	00f200f2 	.word	0x00f200f2
   23a68:	00f200f2 	.word	0x00f200f2
   23a6c:	00f200f2 	.word	0x00f200f2
   23a70:	00ec00f2 	.word	0x00ec00f2
        STATS_INC(ble_att_stats, error_rsp_tx);
   23a74:	4a50      	ldr	r2, [pc, #320]	; (23bb8 <ble_att_inc_tx_stat+0x1f4>)
   23a76:	6913      	ldr	r3, [r2, #16]
   23a78:	3301      	adds	r3, #1
   23a7a:	6113      	str	r3, [r2, #16]
        break;
   23a7c:	4770      	bx	lr
        STATS_INC(ble_att_stats, mtu_req_tx);
   23a7e:	4a4e      	ldr	r2, [pc, #312]	; (23bb8 <ble_att_inc_tx_stat+0x1f4>)
   23a80:	6993      	ldr	r3, [r2, #24]
   23a82:	3301      	adds	r3, #1
   23a84:	6193      	str	r3, [r2, #24]
        break;
   23a86:	4770      	bx	lr
        STATS_INC(ble_att_stats, mtu_rsp_tx);
   23a88:	4a4b      	ldr	r2, [pc, #300]	; (23bb8 <ble_att_inc_tx_stat+0x1f4>)
   23a8a:	6a13      	ldr	r3, [r2, #32]
   23a8c:	3301      	adds	r3, #1
   23a8e:	6213      	str	r3, [r2, #32]
        break;
   23a90:	4770      	bx	lr
        STATS_INC(ble_att_stats, find_info_req_tx);
   23a92:	4a49      	ldr	r2, [pc, #292]	; (23bb8 <ble_att_inc_tx_stat+0x1f4>)
   23a94:	6a93      	ldr	r3, [r2, #40]	; 0x28
   23a96:	3301      	adds	r3, #1
   23a98:	6293      	str	r3, [r2, #40]	; 0x28
        break;
   23a9a:	4770      	bx	lr
        STATS_INC(ble_att_stats, find_info_rsp_tx);
   23a9c:	4a46      	ldr	r2, [pc, #280]	; (23bb8 <ble_att_inc_tx_stat+0x1f4>)
   23a9e:	6b13      	ldr	r3, [r2, #48]	; 0x30
   23aa0:	3301      	adds	r3, #1
   23aa2:	6313      	str	r3, [r2, #48]	; 0x30
        break;
   23aa4:	4770      	bx	lr
        STATS_INC(ble_att_stats, find_type_value_req_tx);
   23aa6:	4a44      	ldr	r2, [pc, #272]	; (23bb8 <ble_att_inc_tx_stat+0x1f4>)
   23aa8:	6b93      	ldr	r3, [r2, #56]	; 0x38
   23aaa:	3301      	adds	r3, #1
   23aac:	6393      	str	r3, [r2, #56]	; 0x38
        break;
   23aae:	4770      	bx	lr
        STATS_INC(ble_att_stats, find_type_value_rsp_tx);
   23ab0:	4a41      	ldr	r2, [pc, #260]	; (23bb8 <ble_att_inc_tx_stat+0x1f4>)
   23ab2:	6c13      	ldr	r3, [r2, #64]	; 0x40
   23ab4:	3301      	adds	r3, #1
   23ab6:	6413      	str	r3, [r2, #64]	; 0x40
        break;
   23ab8:	4770      	bx	lr
        STATS_INC(ble_att_stats, read_type_req_tx);
   23aba:	4a3f      	ldr	r2, [pc, #252]	; (23bb8 <ble_att_inc_tx_stat+0x1f4>)
   23abc:	6c93      	ldr	r3, [r2, #72]	; 0x48
   23abe:	3301      	adds	r3, #1
   23ac0:	6493      	str	r3, [r2, #72]	; 0x48
        break;
   23ac2:	4770      	bx	lr
        STATS_INC(ble_att_stats, read_type_rsp_tx);
   23ac4:	4a3c      	ldr	r2, [pc, #240]	; (23bb8 <ble_att_inc_tx_stat+0x1f4>)
   23ac6:	6d13      	ldr	r3, [r2, #80]	; 0x50
   23ac8:	3301      	adds	r3, #1
   23aca:	6513      	str	r3, [r2, #80]	; 0x50
        break;
   23acc:	4770      	bx	lr
        STATS_INC(ble_att_stats, read_req_tx);
   23ace:	4a3a      	ldr	r2, [pc, #232]	; (23bb8 <ble_att_inc_tx_stat+0x1f4>)
   23ad0:	6d93      	ldr	r3, [r2, #88]	; 0x58
   23ad2:	3301      	adds	r3, #1
   23ad4:	6593      	str	r3, [r2, #88]	; 0x58
        break;
   23ad6:	4770      	bx	lr
        STATS_INC(ble_att_stats, read_rsp_tx);
   23ad8:	4a37      	ldr	r2, [pc, #220]	; (23bb8 <ble_att_inc_tx_stat+0x1f4>)
   23ada:	6e13      	ldr	r3, [r2, #96]	; 0x60
   23adc:	3301      	adds	r3, #1
   23ade:	6613      	str	r3, [r2, #96]	; 0x60
        break;
   23ae0:	4770      	bx	lr
        STATS_INC(ble_att_stats, read_blob_req_tx);
   23ae2:	4a35      	ldr	r2, [pc, #212]	; (23bb8 <ble_att_inc_tx_stat+0x1f4>)
   23ae4:	6e93      	ldr	r3, [r2, #104]	; 0x68
   23ae6:	3301      	adds	r3, #1
   23ae8:	6693      	str	r3, [r2, #104]	; 0x68
        break;
   23aea:	4770      	bx	lr
        STATS_INC(ble_att_stats, read_blob_rsp_tx);
   23aec:	4a32      	ldr	r2, [pc, #200]	; (23bb8 <ble_att_inc_tx_stat+0x1f4>)
   23aee:	6f13      	ldr	r3, [r2, #112]	; 0x70
   23af0:	3301      	adds	r3, #1
   23af2:	6713      	str	r3, [r2, #112]	; 0x70
        break;
   23af4:	4770      	bx	lr
        STATS_INC(ble_att_stats, read_mult_req_tx);
   23af6:	4a30      	ldr	r2, [pc, #192]	; (23bb8 <ble_att_inc_tx_stat+0x1f4>)
   23af8:	6f93      	ldr	r3, [r2, #120]	; 0x78
   23afa:	3301      	adds	r3, #1
   23afc:	6793      	str	r3, [r2, #120]	; 0x78
        break;
   23afe:	4770      	bx	lr
        STATS_INC(ble_att_stats, read_mult_rsp_tx);
   23b00:	4a2d      	ldr	r2, [pc, #180]	; (23bb8 <ble_att_inc_tx_stat+0x1f4>)
   23b02:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
   23b06:	3301      	adds	r3, #1
   23b08:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
        break;
   23b0c:	4770      	bx	lr
        STATS_INC(ble_att_stats, read_group_type_req_tx);
   23b0e:	4a2a      	ldr	r2, [pc, #168]	; (23bb8 <ble_att_inc_tx_stat+0x1f4>)
   23b10:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
   23b14:	3301      	adds	r3, #1
   23b16:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
        break;
   23b1a:	4770      	bx	lr
        STATS_INC(ble_att_stats, read_group_type_rsp_tx);
   23b1c:	4a26      	ldr	r2, [pc, #152]	; (23bb8 <ble_att_inc_tx_stat+0x1f4>)
   23b1e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
   23b22:	3301      	adds	r3, #1
   23b24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        break;
   23b28:	4770      	bx	lr
        STATS_INC(ble_att_stats, write_req_tx);
   23b2a:	4a23      	ldr	r2, [pc, #140]	; (23bb8 <ble_att_inc_tx_stat+0x1f4>)
   23b2c:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
   23b30:	3301      	adds	r3, #1
   23b32:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
        break;
   23b36:	4770      	bx	lr
        STATS_INC(ble_att_stats, write_rsp_tx);
   23b38:	4a1f      	ldr	r2, [pc, #124]	; (23bb8 <ble_att_inc_tx_stat+0x1f4>)
   23b3a:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
   23b3e:	3301      	adds	r3, #1
   23b40:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
        break;
   23b44:	4770      	bx	lr
        STATS_INC(ble_att_stats, prep_write_req_tx);
   23b46:	4a1c      	ldr	r2, [pc, #112]	; (23bb8 <ble_att_inc_tx_stat+0x1f4>)
   23b48:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
   23b4c:	3301      	adds	r3, #1
   23b4e:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
        break;
   23b52:	4770      	bx	lr
        STATS_INC(ble_att_stats, prep_write_rsp_tx);
   23b54:	4a18      	ldr	r2, [pc, #96]	; (23bb8 <ble_att_inc_tx_stat+0x1f4>)
   23b56:	f8d2 30b0 	ldr.w	r3, [r2, #176]	; 0xb0
   23b5a:	3301      	adds	r3, #1
   23b5c:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
        break;
   23b60:	4770      	bx	lr
        STATS_INC(ble_att_stats, exec_write_req_tx);
   23b62:	4a15      	ldr	r2, [pc, #84]	; (23bb8 <ble_att_inc_tx_stat+0x1f4>)
   23b64:	f8d2 30b8 	ldr.w	r3, [r2, #184]	; 0xb8
   23b68:	3301      	adds	r3, #1
   23b6a:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
        break;
   23b6e:	4770      	bx	lr
        STATS_INC(ble_att_stats, exec_write_rsp_tx);
   23b70:	4a11      	ldr	r2, [pc, #68]	; (23bb8 <ble_att_inc_tx_stat+0x1f4>)
   23b72:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
   23b76:	3301      	adds	r3, #1
   23b78:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
        break;
   23b7c:	4770      	bx	lr
        STATS_INC(ble_att_stats, notify_req_tx);
   23b7e:	4a0e      	ldr	r2, [pc, #56]	; (23bb8 <ble_att_inc_tx_stat+0x1f4>)
   23b80:	f8d2 30c8 	ldr.w	r3, [r2, #200]	; 0xc8
   23b84:	3301      	adds	r3, #1
   23b86:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
        break;
   23b8a:	4770      	bx	lr
        STATS_INC(ble_att_stats, indicate_req_tx);
   23b8c:	4a0a      	ldr	r2, [pc, #40]	; (23bb8 <ble_att_inc_tx_stat+0x1f4>)
   23b8e:	f8d2 30d0 	ldr.w	r3, [r2, #208]	; 0xd0
   23b92:	3301      	adds	r3, #1
   23b94:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
        break;
   23b98:	4770      	bx	lr
        STATS_INC(ble_att_stats, indicate_rsp_tx);
   23b9a:	4a07      	ldr	r2, [pc, #28]	; (23bb8 <ble_att_inc_tx_stat+0x1f4>)
   23b9c:	f8d2 30d8 	ldr.w	r3, [r2, #216]	; 0xd8
   23ba0:	3301      	adds	r3, #1
   23ba2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
        break;
   23ba6:	4770      	bx	lr
        STATS_INC(ble_att_stats, write_cmd_tx);
   23ba8:	4a03      	ldr	r2, [pc, #12]	; (23bb8 <ble_att_inc_tx_stat+0x1f4>)
   23baa:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   23bae:	3301      	adds	r3, #1
   23bb0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
}
   23bb4:	4770      	bx	lr
   23bb6:	bf00      	nop
   23bb8:	200046ac 	.word	0x200046ac

00023bbc <ble_att_set_peer_mtu>:
    if (peer_mtu < BLE_ATT_MTU_DFLT) {
   23bbc:	2916      	cmp	r1, #22
   23bbe:	d800      	bhi.n	23bc2 <ble_att_set_peer_mtu+0x6>
        peer_mtu = BLE_ATT_MTU_DFLT;
   23bc0:	2117      	movs	r1, #23
    chan->peer_mtu = peer_mtu;
   23bc2:	8181      	strh	r1, [r0, #12]
}
   23bc4:	4770      	bx	lr

00023bc6 <ble_att_chan_mtu>:
{
   23bc6:	b510      	push	{r4, lr}
   23bc8:	4604      	mov	r4, r0
    if (!(ble_l2cap_is_mtu_req_sent(chan)) ||
   23bca:	f7fc fded 	bl	207a8 <ble_l2cap_is_mtu_req_sent>
   23bce:	b130      	cbz	r0, 23bde <ble_att_chan_mtu+0x18>
        chan->peer_mtu == 0) {
   23bd0:	89a0      	ldrh	r0, [r4, #12]
    if (!(ble_l2cap_is_mtu_req_sent(chan)) ||
   23bd2:	b130      	cbz	r0, 23be2 <ble_att_chan_mtu+0x1c>
        mtu = min(chan->my_mtu, chan->peer_mtu);
   23bd4:	8963      	ldrh	r3, [r4, #10]
   23bd6:	4298      	cmp	r0, r3
   23bd8:	bf28      	it	cs
   23bda:	4618      	movcs	r0, r3
}
   23bdc:	bd10      	pop	{r4, pc}
        mtu = BLE_ATT_MTU_DFLT;
   23bde:	2017      	movs	r0, #23
   23be0:	e7fc      	b.n	23bdc <ble_att_chan_mtu+0x16>
   23be2:	2017      	movs	r0, #23
   23be4:	e7fa      	b.n	23bdc <ble_att_chan_mtu+0x16>

00023be6 <ble_att_truncate_to_mtu>:
{
   23be6:	b510      	push	{r4, lr}
   23be8:	460c      	mov	r4, r1
    mtu = ble_att_chan_mtu(att_chan);
   23bea:	f7ff ffec 	bl	23bc6 <ble_att_chan_mtu>
    extra_len = OS_MBUF_PKTLEN(txom) - mtu;
   23bee:	8a21      	ldrh	r1, [r4, #16]
   23bf0:	1a09      	subs	r1, r1, r0
    if (extra_len > 0) {
   23bf2:	2900      	cmp	r1, #0
   23bf4:	dd03      	ble.n	23bfe <ble_att_truncate_to_mtu+0x18>
        os_mbuf_adj(txom, -extra_len);
   23bf6:	4249      	negs	r1, r1
   23bf8:	4620      	mov	r0, r4
   23bfa:	f7e9 ffda 	bl	dbb2 <os_mbuf_adj>
}
   23bfe:	bd10      	pop	{r4, pc}

00023c00 <ble_att_mtu>:
{
   23c00:	b510      	push	{r4, lr}
   23c02:	b082      	sub	sp, #8
   23c04:	4604      	mov	r4, r0
    ble_hs_lock();
   23c06:	f7fa fc8d 	bl	1e524 <ble_hs_lock>
    rc = ble_att_conn_chan_find(conn_handle, &conn, &chan);
   23c0a:	aa01      	add	r2, sp, #4
   23c0c:	4669      	mov	r1, sp
   23c0e:	4620      	mov	r0, r4
   23c10:	f7ff fed0 	bl	239b4 <ble_att_conn_chan_find>
    if (rc == 0) {
   23c14:	b128      	cbz	r0, 23c22 <ble_att_mtu+0x22>
        mtu = 0;
   23c16:	2400      	movs	r4, #0
    ble_hs_unlock();
   23c18:	f7fa fc88 	bl	1e52c <ble_hs_unlock>
}
   23c1c:	4620      	mov	r0, r4
   23c1e:	b002      	add	sp, #8
   23c20:	bd10      	pop	{r4, pc}
        mtu = ble_att_chan_mtu(chan);
   23c22:	9801      	ldr	r0, [sp, #4]
   23c24:	f7ff ffcf 	bl	23bc6 <ble_att_chan_mtu>
   23c28:	4604      	mov	r4, r0
   23c2a:	e7f5      	b.n	23c18 <ble_att_mtu+0x18>

00023c2c <ble_att_create_chan>:
    return 0;
}

struct ble_l2cap_chan *
ble_att_create_chan(uint16_t conn_handle)
{
   23c2c:	b508      	push	{r3, lr}
    struct ble_l2cap_chan *chan;

    chan = ble_l2cap_chan_alloc(conn_handle);
   23c2e:	f7fc fd8d 	bl	2074c <ble_l2cap_chan_alloc>
    if (chan == NULL) {
   23c32:	4603      	mov	r3, r0
   23c34:	b138      	cbz	r0, 23c46 <ble_att_create_chan+0x1a>
        return NULL;
    }

    chan->scid = BLE_L2CAP_CID_ATT;
   23c36:	2204      	movs	r2, #4
   23c38:	8102      	strh	r2, [r0, #8]
    chan->dcid = BLE_L2CAP_CID_ATT;
   23c3a:	80c2      	strh	r2, [r0, #6]
    chan->my_mtu = ble_att_preferred_mtu_val;
   23c3c:	4a03      	ldr	r2, [pc, #12]	; (23c4c <ble_att_create_chan+0x20>)
   23c3e:	8812      	ldrh	r2, [r2, #0]
   23c40:	8142      	strh	r2, [r0, #10]
    chan->rx_fn = ble_att_rx;
   23c42:	4a03      	ldr	r2, [pc, #12]	; (23c50 <ble_att_create_chan+0x24>)
   23c44:	6182      	str	r2, [r0, #24]

    return chan;
}
   23c46:	4618      	mov	r0, r3
   23c48:	bd08      	pop	{r3, pc}
   23c4a:	bf00      	nop
   23c4c:	20003288 	.word	0x20003288
   23c50:	00023933 	.word	0x00023933

00023c54 <ble_att_init>:

int
ble_att_init(void)
{
   23c54:	b500      	push	{lr}
   23c56:	b083      	sub	sp, #12
    int rc;

    ble_att_preferred_mtu_val = MYNEWT_VAL(BLE_ATT_PREFERRED_MTU);
   23c58:	4b0a      	ldr	r3, [pc, #40]	; (23c84 <ble_att_init+0x30>)
   23c5a:	f44f 7280 	mov.w	r2, #256	; 0x100
   23c5e:	801a      	strh	r2, [r3, #0]

    rc = stats_init_and_reg(
   23c60:	4b09      	ldr	r3, [pc, #36]	; (23c88 <ble_att_init+0x34>)
   23c62:	9301      	str	r3, [sp, #4]
   23c64:	2300      	movs	r3, #0
   23c66:	9300      	str	r3, [sp, #0]
   23c68:	2236      	movs	r2, #54	; 0x36
   23c6a:	2104      	movs	r1, #4
   23c6c:	4807      	ldr	r0, [pc, #28]	; (23c8c <ble_att_init+0x38>)
   23c6e:	f7ec f9ff 	bl	10070 <stats_init_and_reg>
        STATS_HDR(ble_att_stats), STATS_SIZE_INIT_PARMS(ble_att_stats,
        STATS_SIZE_32), STATS_NAME_INIT_PARMS(ble_att_stats), "ble_att");
    if (rc != 0) {
   23c72:	4603      	mov	r3, r0
   23c74:	b918      	cbnz	r0, 23c7e <ble_att_init+0x2a>
        return BLE_HS_EOS;
    }

    return 0;
}
   23c76:	4618      	mov	r0, r3
   23c78:	b003      	add	sp, #12
   23c7a:	f85d fb04 	ldr.w	pc, [sp], #4
        return BLE_HS_EOS;
   23c7e:	230b      	movs	r3, #11
   23c80:	e7f9      	b.n	23c76 <ble_att_init+0x22>
   23c82:	bf00      	nop
   23c84:	20003288 	.word	0x20003288
   23c88:	0002b820 	.word	0x0002b820
   23c8c:	200046ac 	.word	0x200046ac

00023c90 <ble_att_clt_parse_find_type_value_hinfo>:
}

static int
ble_att_clt_parse_find_type_value_hinfo(
    struct os_mbuf **om, struct ble_att_find_type_value_hinfo *dst)
{
   23c90:	b570      	push	{r4, r5, r6, lr}
   23c92:	4605      	mov	r5, r0
   23c94:	460e      	mov	r6, r1
    struct ble_att_handle_group *group;
    int rc;

    rc = ble_hs_mbuf_pullup_base(om, sizeof(*group));
   23c96:	2104      	movs	r1, #4
   23c98:	f7fc fa1a 	bl	200d0 <ble_hs_mbuf_pullup_base>
    if (rc != 0) {
   23c9c:	b960      	cbnz	r0, 23cb8 <ble_att_clt_parse_find_type_value_hinfo+0x28>
   23c9e:	4604      	mov	r4, r0
        return BLE_HS_EBADDATA;
    }

    group = (struct ble_att_handle_group *)(*om)->om_data;
   23ca0:	682b      	ldr	r3, [r5, #0]
   23ca2:	681b      	ldr	r3, [r3, #0]

    dst->attr_handle = le16toh(group->attr_handle);
   23ca4:	881a      	ldrh	r2, [r3, #0]
   23ca6:	8032      	strh	r2, [r6, #0]
    dst->group_end_handle = le16toh(group->group_end_handle);
   23ca8:	885b      	ldrh	r3, [r3, #2]
   23caa:	8073      	strh	r3, [r6, #2]

    os_mbuf_adj((*om), sizeof(*group));
   23cac:	2104      	movs	r1, #4
   23cae:	6828      	ldr	r0, [r5, #0]
   23cb0:	f7e9 ff7f 	bl	dbb2 <os_mbuf_adj>

    return 0;
}
   23cb4:	4620      	mov	r0, r4
   23cb6:	bd70      	pop	{r4, r5, r6, pc}
        return BLE_HS_EBADDATA;
   23cb8:	240a      	movs	r4, #10
   23cba:	e7fb      	b.n	23cb4 <ble_att_clt_parse_find_type_value_hinfo+0x24>

00023cbc <ble_att_clt_parse_read_group_type_adata>:

static int
ble_att_clt_parse_read_group_type_adata(
    struct os_mbuf **om, int data_len,
    struct ble_att_read_group_type_adata *adata)
{
   23cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int rc;

    if (data_len < BLE_ATT_READ_GROUP_TYPE_ADATA_BASE_SZ + 1) {
   23cbe:	2904      	cmp	r1, #4
   23cc0:	dd18      	ble.n	23cf4 <ble_att_clt_parse_read_group_type_adata+0x38>
   23cc2:	4617      	mov	r7, r2
   23cc4:	460c      	mov	r4, r1
   23cc6:	4605      	mov	r5, r0
        return BLE_HS_EMSGSIZE;
    }

    rc = ble_hs_mbuf_pullup_base(om, data_len);
   23cc8:	f7fc fa02 	bl	200d0 <ble_hs_mbuf_pullup_base>
    if (rc != 0) {
   23ccc:	4606      	mov	r6, r0
   23cce:	b990      	cbnz	r0, 23cf6 <ble_att_clt_parse_read_group_type_adata+0x3a>
        return rc;
    }

    adata->att_handle = get_le16((*om)->om_data + 0);
   23cd0:	682b      	ldr	r3, [r5, #0]
   23cd2:	6818      	ldr	r0, [r3, #0]
   23cd4:	f005 fd5b 	bl	2978e <get_le16>
   23cd8:	8038      	strh	r0, [r7, #0]
    adata->end_group_handle = get_le16((*om)->om_data + 2);
   23cda:	682b      	ldr	r3, [r5, #0]
   23cdc:	6818      	ldr	r0, [r3, #0]
   23cde:	3002      	adds	r0, #2
   23ce0:	f005 fd55 	bl	2978e <get_le16>
   23ce4:	8078      	strh	r0, [r7, #2]
    adata->value_len = data_len - BLE_ATT_READ_GROUP_TYPE_ADATA_BASE_SZ;
   23ce6:	3c04      	subs	r4, #4
   23ce8:	607c      	str	r4, [r7, #4]
    adata->value = (*om)->om_data + BLE_ATT_READ_GROUP_TYPE_ADATA_BASE_SZ;
   23cea:	682b      	ldr	r3, [r5, #0]
   23cec:	681b      	ldr	r3, [r3, #0]
   23cee:	3304      	adds	r3, #4
   23cf0:	60bb      	str	r3, [r7, #8]

    return 0;
   23cf2:	e000      	b.n	23cf6 <ble_att_clt_parse_read_group_type_adata+0x3a>
        return BLE_HS_EMSGSIZE;
   23cf4:	2604      	movs	r6, #4
}
   23cf6:	4630      	mov	r0, r6
   23cf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00023cfa <ble_att_clt_parse_find_info_entry>:
{
   23cfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    switch (rsp_format) {
   23cfe:	2901      	cmp	r1, #1
   23d00:	d003      	beq.n	23d0a <ble_att_clt_parse_find_info_entry+0x10>
   23d02:	2902      	cmp	r1, #2
   23d04:	d00e      	beq.n	23d24 <ble_att_clt_parse_find_info_entry+0x2a>
        return BLE_HS_EBADDATA;
   23d06:	270a      	movs	r7, #10
   23d08:	e009      	b.n	23d1e <ble_att_clt_parse_find_info_entry+0x24>
        entry_len = 2 + 2;
   23d0a:	f04f 0804 	mov.w	r8, #4
   23d0e:	4616      	mov	r6, r2
   23d10:	460c      	mov	r4, r1
   23d12:	4605      	mov	r5, r0
    rc = ble_hs_mbuf_pullup_base(rxom, entry_len);
   23d14:	4641      	mov	r1, r8
   23d16:	f7fc f9db 	bl	200d0 <ble_hs_mbuf_pullup_base>
    if (rc != 0) {
   23d1a:	4607      	mov	r7, r0
   23d1c:	b128      	cbz	r0, 23d2a <ble_att_clt_parse_find_info_entry+0x30>
}
   23d1e:	4638      	mov	r0, r7
   23d20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        entry_len = 2 + 16;
   23d24:	f04f 0812 	mov.w	r8, #18
   23d28:	e7f1      	b.n	23d0e <ble_att_clt_parse_find_info_entry+0x14>
    idata->attr_handle = get_le16((*rxom)->om_data);
   23d2a:	682b      	ldr	r3, [r5, #0]
   23d2c:	6818      	ldr	r0, [r3, #0]
   23d2e:	f005 fd2e 	bl	2978e <get_le16>
   23d32:	8030      	strh	r0, [r6, #0]
    switch (rsp_format) {
   23d34:	2c01      	cmp	r4, #1
   23d36:	d006      	beq.n	23d46 <ble_att_clt_parse_find_info_entry+0x4c>
   23d38:	2c02      	cmp	r4, #2
   23d3a:	d00e      	beq.n	23d5a <ble_att_clt_parse_find_info_entry+0x60>
    os_mbuf_adj(*rxom, entry_len);
   23d3c:	4641      	mov	r1, r8
   23d3e:	6828      	ldr	r0, [r5, #0]
   23d40:	f7e9 ff37 	bl	dbb2 <os_mbuf_adj>
    return 0;
   23d44:	e7eb      	b.n	23d1e <ble_att_clt_parse_find_info_entry+0x24>
        rc = ble_uuid_init_from_att_mbuf(&idata->uuid, *rxom, 2, 2);
   23d46:	2302      	movs	r3, #2
   23d48:	461a      	mov	r2, r3
   23d4a:	6829      	ldr	r1, [r5, #0]
   23d4c:	1d30      	adds	r0, r6, #4
   23d4e:	f7ff fc70 	bl	23632 <ble_uuid_init_from_att_mbuf>
        if (rc != 0) {
   23d52:	2800      	cmp	r0, #0
   23d54:	d0f2      	beq.n	23d3c <ble_att_clt_parse_find_info_entry+0x42>
            return BLE_HS_EBADDATA;
   23d56:	270a      	movs	r7, #10
   23d58:	e7e1      	b.n	23d1e <ble_att_clt_parse_find_info_entry+0x24>
        rc = ble_uuid_init_from_att_mbuf(&idata->uuid, *rxom, 2, 16);
   23d5a:	2310      	movs	r3, #16
   23d5c:	2202      	movs	r2, #2
   23d5e:	6829      	ldr	r1, [r5, #0]
   23d60:	1d30      	adds	r0, r6, #4
   23d62:	f7ff fc66 	bl	23632 <ble_uuid_init_from_att_mbuf>
        if (rc != 0) {
   23d66:	2800      	cmp	r0, #0
   23d68:	d0e8      	beq.n	23d3c <ble_att_clt_parse_find_info_entry+0x42>
            return BLE_HS_EBADDATA;
   23d6a:	270a      	movs	r7, #10
   23d6c:	e7d7      	b.n	23d1e <ble_att_clt_parse_find_info_entry+0x24>

00023d6e <ble_att_clt_rx_error>:
{
   23d6e:	b570      	push	{r4, r5, r6, lr}
   23d70:	4606      	mov	r6, r0
   23d72:	460c      	mov	r4, r1
    rc = ble_hs_mbuf_pullup_base(rxom, sizeof(*rsp));
   23d74:	2104      	movs	r1, #4
   23d76:	4620      	mov	r0, r4
   23d78:	f7fc f9aa 	bl	200d0 <ble_hs_mbuf_pullup_base>
    if (rc != 0) {
   23d7c:	4605      	mov	r5, r0
   23d7e:	b108      	cbz	r0, 23d84 <ble_att_clt_rx_error+0x16>
}
   23d80:	4628      	mov	r0, r5
   23d82:	bd70      	pop	{r4, r5, r6, pc}
    rsp = (struct ble_att_error_rsp *)(*rxom)->om_data;
   23d84:	6823      	ldr	r3, [r4, #0]
   23d86:	681b      	ldr	r3, [r3, #0]
    ble_gattc_rx_err(conn_handle, le16toh(rsp->baep_handle),
   23d88:	78da      	ldrb	r2, [r3, #3]
   23d8a:	f8b3 1001 	ldrh.w	r1, [r3, #1]
   23d8e:	4630      	mov	r0, r6
   23d90:	f7f9 f947 	bl	1d022 <ble_gattc_rx_err>
    return 0;
   23d94:	e7f4      	b.n	23d80 <ble_att_clt_rx_error+0x12>

00023d96 <ble_att_clt_rx_mtu>:
{
   23d96:	b570      	push	{r4, r5, r6, lr}
   23d98:	b082      	sub	sp, #8
   23d9a:	4605      	mov	r5, r0
   23d9c:	460e      	mov	r6, r1
    rc = ble_hs_mbuf_pullup_base(rxom, sizeof(*cmd));
   23d9e:	2102      	movs	r1, #2
   23da0:	4630      	mov	r0, r6
   23da2:	f7fc f995 	bl	200d0 <ble_hs_mbuf_pullup_base>
    if (rc == 0) {
   23da6:	b148      	cbz	r0, 23dbc <ble_att_clt_rx_mtu+0x26>
   23da8:	4604      	mov	r4, r0
    mtu = 0;
   23daa:	2600      	movs	r6, #0
    ble_gattc_rx_mtu(conn_handle, rc, mtu);
   23dac:	4632      	mov	r2, r6
   23dae:	4621      	mov	r1, r4
   23db0:	4628      	mov	r0, r5
   23db2:	f7f9 f94c 	bl	1d04e <ble_gattc_rx_mtu>
}
   23db6:	4620      	mov	r0, r4
   23db8:	b002      	add	sp, #8
   23dba:	bd70      	pop	{r4, r5, r6, pc}
        cmd = (struct ble_att_mtu_cmd *)(*rxom)->om_data;
   23dbc:	6833      	ldr	r3, [r6, #0]
   23dbe:	681e      	ldr	r6, [r3, #0]
        ble_hs_lock();
   23dc0:	f7fa fbb0 	bl	1e524 <ble_hs_lock>
        rc = ble_att_conn_chan_find(conn_handle, NULL, &chan);
   23dc4:	aa01      	add	r2, sp, #4
   23dc6:	2100      	movs	r1, #0
   23dc8:	4628      	mov	r0, r5
   23dca:	f7ff fdf3 	bl	239b4 <ble_att_conn_chan_find>
        if (rc == 0) {
   23dce:	4604      	mov	r4, r0
   23dd0:	b150      	cbz	r0, 23de8 <ble_att_clt_rx_mtu+0x52>
    mtu = 0;
   23dd2:	2600      	movs	r6, #0
        ble_hs_unlock();
   23dd4:	f7fa fbaa 	bl	1e52c <ble_hs_unlock>
        if (rc == 0) {
   23dd8:	2c00      	cmp	r4, #0
   23dda:	d1e7      	bne.n	23dac <ble_att_clt_rx_mtu+0x16>
            ble_gap_mtu_event(conn_handle, BLE_L2CAP_CID_ATT, mtu);
   23ddc:	4632      	mov	r2, r6
   23dde:	2104      	movs	r1, #4
   23de0:	4628      	mov	r0, r5
   23de2:	f7f7 fd71 	bl	1b8c8 <ble_gap_mtu_event>
   23de6:	e7e1      	b.n	23dac <ble_att_clt_rx_mtu+0x16>
            ble_att_set_peer_mtu(chan, le16toh(cmd->bamc_mtu));
   23de8:	8831      	ldrh	r1, [r6, #0]
   23dea:	9801      	ldr	r0, [sp, #4]
   23dec:	f7ff fee6 	bl	23bbc <ble_att_set_peer_mtu>
            mtu = ble_att_chan_mtu(chan);
   23df0:	9801      	ldr	r0, [sp, #4]
   23df2:	f7ff fee8 	bl	23bc6 <ble_att_chan_mtu>
   23df6:	4606      	mov	r6, r0
   23df8:	e7ec      	b.n	23dd4 <ble_att_clt_rx_mtu+0x3e>

00023dfa <ble_att_clt_tx_find_info>:
    if (start_handle == 0 || start_handle > end_handle) {
   23dfa:	b199      	cbz	r1, 23e24 <ble_att_clt_tx_find_info+0x2a>
{
   23dfc:	b570      	push	{r4, r5, r6, lr}
   23dfe:	b082      	sub	sp, #8
   23e00:	460d      	mov	r5, r1
    if (start_handle == 0 || start_handle > end_handle) {
   23e02:	4291      	cmp	r1, r2
   23e04:	d810      	bhi.n	23e28 <ble_att_clt_tx_find_info+0x2e>
   23e06:	4614      	mov	r4, r2
   23e08:	4606      	mov	r6, r0
    req = ble_att_cmd_get(BLE_ATT_OP_FIND_INFO_REQ, sizeof(*req), &txom);
   23e0a:	aa01      	add	r2, sp, #4
   23e0c:	2104      	movs	r1, #4
   23e0e:	4608      	mov	r0, r1
   23e10:	f000 fa2f 	bl	24272 <ble_att_cmd_get>
    if (req == NULL) {
   23e14:	b158      	cbz	r0, 23e2e <ble_att_clt_tx_find_info+0x34>
    req->bafq_start_handle = htole16(start_handle);
   23e16:	8005      	strh	r5, [r0, #0]
    req->bafq_end_handle = htole16(end_handle);
   23e18:	8044      	strh	r4, [r0, #2]
    return ble_att_tx(conn_handle, txom);
   23e1a:	9901      	ldr	r1, [sp, #4]
   23e1c:	4630      	mov	r0, r6
   23e1e:	f000 fa38 	bl	24292 <ble_att_tx>
   23e22:	e002      	b.n	23e2a <ble_att_clt_tx_find_info+0x30>
        return BLE_HS_EINVAL;
   23e24:	2003      	movs	r0, #3
}
   23e26:	4770      	bx	lr
        return BLE_HS_EINVAL;
   23e28:	2003      	movs	r0, #3
}
   23e2a:	b002      	add	sp, #8
   23e2c:	bd70      	pop	{r4, r5, r6, pc}
        return BLE_HS_ENOMEM;
   23e2e:	2006      	movs	r0, #6
   23e30:	e7fb      	b.n	23e2a <ble_att_clt_tx_find_info+0x30>

00023e32 <ble_att_clt_rx_find_info>:
{
   23e32:	b5f0      	push	{r4, r5, r6, r7, lr}
   23e34:	b087      	sub	sp, #28
   23e36:	4605      	mov	r5, r0
   23e38:	460c      	mov	r4, r1
    rc = ble_hs_mbuf_pullup_base(om, sizeof(*rsp));
   23e3a:	2101      	movs	r1, #1
   23e3c:	4620      	mov	r0, r4
   23e3e:	f7fc f947 	bl	200d0 <ble_hs_mbuf_pullup_base>
    if (rc != 0) {
   23e42:	4606      	mov	r6, r0
   23e44:	b130      	cbz	r0, 23e54 <ble_att_clt_rx_find_info+0x22>
    ble_gattc_rx_find_info_complete(conn_handle, rc);
   23e46:	4631      	mov	r1, r6
   23e48:	4628      	mov	r0, r5
   23e4a:	f7f9 f921 	bl	1d090 <ble_gattc_rx_find_info_complete>
}
   23e4e:	4630      	mov	r0, r6
   23e50:	b007      	add	sp, #28
   23e52:	bdf0      	pop	{r4, r5, r6, r7, pc}
    rsp = (struct ble_att_find_info_rsp *)(*om)->om_data;
   23e54:	6820      	ldr	r0, [r4, #0]
   23e56:	6807      	ldr	r7, [r0, #0]
    os_mbuf_adj((*om), sizeof(*rsp));
   23e58:	2101      	movs	r1, #1
   23e5a:	f7e9 feaa 	bl	dbb2 <os_mbuf_adj>
    while (OS_MBUF_PKTLEN(*om) > 0) {
   23e5e:	6823      	ldr	r3, [r4, #0]
   23e60:	8a1b      	ldrh	r3, [r3, #16]
   23e62:	2b00      	cmp	r3, #0
   23e64:	d0ef      	beq.n	23e46 <ble_att_clt_rx_find_info+0x14>
        rc = ble_att_clt_parse_find_info_entry(om, rsp->bafp_format, &idata);
   23e66:	466a      	mov	r2, sp
   23e68:	7839      	ldrb	r1, [r7, #0]
   23e6a:	4620      	mov	r0, r4
   23e6c:	f7ff ff45 	bl	23cfa <ble_att_clt_parse_find_info_entry>
        if (rc != 0) {
   23e70:	b920      	cbnz	r0, 23e7c <ble_att_clt_rx_find_info+0x4a>
        ble_gattc_rx_find_info_idata(conn_handle, &idata);
   23e72:	4669      	mov	r1, sp
   23e74:	4628      	mov	r0, r5
   23e76:	f7f9 f8fc 	bl	1d072 <ble_gattc_rx_find_info_idata>
   23e7a:	e7f0      	b.n	23e5e <ble_att_clt_rx_find_info+0x2c>
        rc = ble_att_clt_parse_find_info_entry(om, rsp->bafp_format, &idata);
   23e7c:	4606      	mov	r6, r0
   23e7e:	e7e2      	b.n	23e46 <ble_att_clt_rx_find_info+0x14>

00023e80 <ble_att_clt_tx_find_type_value>:
    if (start_handle == 0 || start_handle > end_handle) {
   23e80:	b1d9      	cbz	r1, 23eba <ble_att_clt_tx_find_type_value+0x3a>
{
   23e82:	b5f0      	push	{r4, r5, r6, r7, lr}
   23e84:	b083      	sub	sp, #12
   23e86:	460d      	mov	r5, r1
    if (start_handle == 0 || start_handle > end_handle) {
   23e88:	4291      	cmp	r1, r2
   23e8a:	d818      	bhi.n	23ebe <ble_att_clt_tx_find_type_value+0x3e>
   23e8c:	461f      	mov	r7, r3
   23e8e:	4614      	mov	r4, r2
   23e90:	4606      	mov	r6, r0
    req = ble_att_cmd_get(BLE_ATT_OP_FIND_TYPE_VALUE_REQ, sizeof(*req) + value_len,
   23e92:	aa01      	add	r2, sp, #4
   23e94:	9b09      	ldr	r3, [sp, #36]	; 0x24
   23e96:	1d99      	adds	r1, r3, #6
   23e98:	2006      	movs	r0, #6
   23e9a:	f000 f9ea 	bl	24272 <ble_att_cmd_get>
    if (req == NULL) {
   23e9e:	b188      	cbz	r0, 23ec4 <ble_att_clt_tx_find_type_value+0x44>
    req->bavq_start_handle = htole16(start_handle);
   23ea0:	8005      	strh	r5, [r0, #0]
    req->bavq_end_handle = htole16(end_handle);
   23ea2:	8044      	strh	r4, [r0, #2]
    req->bavq_attr_type = htole16(attribute_type);
   23ea4:	8087      	strh	r7, [r0, #4]
    memcpy(req->bavq_value, attribute_value, value_len);
   23ea6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   23ea8:	9908      	ldr	r1, [sp, #32]
   23eaa:	3006      	adds	r0, #6
   23eac:	f7ea fae0 	bl	e470 <memcpy>
    return ble_att_tx(conn_handle, txom);
   23eb0:	9901      	ldr	r1, [sp, #4]
   23eb2:	4630      	mov	r0, r6
   23eb4:	f000 f9ed 	bl	24292 <ble_att_tx>
   23eb8:	e002      	b.n	23ec0 <ble_att_clt_tx_find_type_value+0x40>
        return BLE_HS_EINVAL;
   23eba:	2003      	movs	r0, #3
}
   23ebc:	4770      	bx	lr
        return BLE_HS_EINVAL;
   23ebe:	2003      	movs	r0, #3
}
   23ec0:	b003      	add	sp, #12
   23ec2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return BLE_HS_ENOMEM;
   23ec4:	2006      	movs	r0, #6
   23ec6:	e7fb      	b.n	23ec0 <ble_att_clt_tx_find_type_value+0x40>

00023ec8 <ble_att_clt_rx_find_type_value>:
{
   23ec8:	b570      	push	{r4, r5, r6, lr}
   23eca:	b082      	sub	sp, #8
   23ecc:	4606      	mov	r6, r0
   23ece:	460c      	mov	r4, r1
    rc = 0;
   23ed0:	2500      	movs	r5, #0
    while (OS_MBUF_PKTLEN(*rxom) > 0) {
   23ed2:	6823      	ldr	r3, [r4, #0]
   23ed4:	8a1b      	ldrh	r3, [r3, #16]
   23ed6:	b153      	cbz	r3, 23eee <ble_att_clt_rx_find_type_value+0x26>
        rc = ble_att_clt_parse_find_type_value_hinfo(rxom, &hinfo);
   23ed8:	a901      	add	r1, sp, #4
   23eda:	4620      	mov	r0, r4
   23edc:	f7ff fed8 	bl	23c90 <ble_att_clt_parse_find_type_value_hinfo>
        if (rc != 0) {
   23ee0:	4605      	mov	r5, r0
   23ee2:	b920      	cbnz	r0, 23eee <ble_att_clt_rx_find_type_value+0x26>
        ble_gattc_rx_find_type_value_hinfo(conn_handle, &hinfo);
   23ee4:	a901      	add	r1, sp, #4
   23ee6:	4630      	mov	r0, r6
   23ee8:	f7f9 f8e1 	bl	1d0ae <ble_gattc_rx_find_type_value_hinfo>
   23eec:	e7f1      	b.n	23ed2 <ble_att_clt_rx_find_type_value+0xa>
    ble_gattc_rx_find_type_value_complete(conn_handle, rc);
   23eee:	4629      	mov	r1, r5
   23ef0:	4630      	mov	r0, r6
   23ef2:	f7f9 f8eb 	bl	1d0cc <ble_gattc_rx_find_type_value_complete>
}
   23ef6:	2000      	movs	r0, #0
   23ef8:	b002      	add	sp, #8
   23efa:	bd70      	pop	{r4, r5, r6, pc}

00023efc <ble_att_clt_tx_read_type>:
    if (start_handle == 0 || start_handle > end_handle) {
   23efc:	b1e1      	cbz	r1, 23f38 <ble_att_clt_tx_read_type+0x3c>
{
   23efe:	b5f0      	push	{r4, r5, r6, r7, lr}
   23f00:	b083      	sub	sp, #12
   23f02:	460d      	mov	r5, r1
    if (start_handle == 0 || start_handle > end_handle) {
   23f04:	4291      	cmp	r1, r2
   23f06:	d819      	bhi.n	23f3c <ble_att_clt_tx_read_type+0x40>
   23f08:	461e      	mov	r6, r3
   23f0a:	4614      	mov	r4, r2
   23f0c:	4607      	mov	r7, r0
                          sizeof(*req) + ble_uuid_length(uuid), &txom);
   23f0e:	4618      	mov	r0, r3
   23f10:	f7ff fbd2 	bl	236b8 <ble_uuid_length>
    req = ble_att_cmd_get(BLE_ATT_OP_READ_TYPE_REQ,
   23f14:	aa01      	add	r2, sp, #4
   23f16:	1d01      	adds	r1, r0, #4
   23f18:	2008      	movs	r0, #8
   23f1a:	f000 f9aa 	bl	24272 <ble_att_cmd_get>
    if (req == NULL) {
   23f1e:	4601      	mov	r1, r0
   23f20:	b178      	cbz	r0, 23f42 <ble_att_clt_tx_read_type+0x46>
    req->batq_start_handle = htole16(start_handle);
   23f22:	8005      	strh	r5, [r0, #0]
    req->batq_end_handle = htole16(end_handle);
   23f24:	8044      	strh	r4, [r0, #2]
    ble_uuid_flat(uuid, req->uuid);
   23f26:	3104      	adds	r1, #4
   23f28:	4630      	mov	r0, r6
   23f2a:	f7ff fb99 	bl	23660 <ble_uuid_flat>
    return ble_att_tx(conn_handle, txom);
   23f2e:	9901      	ldr	r1, [sp, #4]
   23f30:	4638      	mov	r0, r7
   23f32:	f000 f9ae 	bl	24292 <ble_att_tx>
   23f36:	e002      	b.n	23f3e <ble_att_clt_tx_read_type+0x42>
        return BLE_HS_EINVAL;
   23f38:	2003      	movs	r0, #3
}
   23f3a:	4770      	bx	lr
        return BLE_HS_EINVAL;
   23f3c:	2003      	movs	r0, #3
}
   23f3e:	b003      	add	sp, #12
   23f40:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return BLE_HS_ENOMEM;
   23f42:	2006      	movs	r0, #6
   23f44:	e7fb      	b.n	23f3e <ble_att_clt_tx_read_type+0x42>

00023f46 <ble_att_clt_rx_read_type>:
{
   23f46:	b5f0      	push	{r4, r5, r6, r7, lr}
   23f48:	b085      	sub	sp, #20
   23f4a:	4607      	mov	r7, r0
   23f4c:	460c      	mov	r4, r1
    rc = ble_hs_mbuf_pullup_base(rxom, sizeof(*rsp));
   23f4e:	2101      	movs	r1, #1
   23f50:	4620      	mov	r0, r4
   23f52:	f7fc f8bd 	bl	200d0 <ble_hs_mbuf_pullup_base>
    if (rc != 0) {
   23f56:	4606      	mov	r6, r0
   23f58:	b130      	cbz	r0, 23f68 <ble_att_clt_rx_read_type+0x22>
    ble_gattc_rx_read_type_complete(conn_handle, rc);
   23f5a:	4631      	mov	r1, r6
   23f5c:	4638      	mov	r0, r7
   23f5e:	f7f9 f8db 	bl	1d118 <ble_gattc_rx_read_type_complete>
}
   23f62:	4630      	mov	r0, r6
   23f64:	b005      	add	sp, #20
   23f66:	bdf0      	pop	{r4, r5, r6, r7, pc}
    rsp = (struct ble_att_read_type_rsp *)(*rxom)->om_data;
   23f68:	6820      	ldr	r0, [r4, #0]
   23f6a:	6803      	ldr	r3, [r0, #0]
    data_len = rsp->batp_length;
   23f6c:	781d      	ldrb	r5, [r3, #0]
    os_mbuf_adj(*rxom, sizeof(*rsp));
   23f6e:	2101      	movs	r1, #1
   23f70:	f7e9 fe1f 	bl	dbb2 <os_mbuf_adj>
    if (data_len < sizeof(*data)) {
   23f74:	2d01      	cmp	r5, #1
   23f76:	d91c      	bls.n	23fb2 <ble_att_clt_rx_read_type+0x6c>
    while (OS_MBUF_PKTLEN(*rxom) > 0) {
   23f78:	6823      	ldr	r3, [r4, #0]
   23f7a:	8a1b      	ldrh	r3, [r3, #16]
   23f7c:	2b00      	cmp	r3, #0
   23f7e:	d0ec      	beq.n	23f5a <ble_att_clt_rx_read_type+0x14>
        rc = ble_hs_mbuf_pullup_base(rxom, data_len);
   23f80:	4629      	mov	r1, r5
   23f82:	4620      	mov	r0, r4
   23f84:	f7fc f8a4 	bl	200d0 <ble_hs_mbuf_pullup_base>
        if (rc != 0) {
   23f88:	4606      	mov	r6, r0
   23f8a:	2800      	cmp	r0, #0
   23f8c:	d1e5      	bne.n	23f5a <ble_att_clt_rx_read_type+0x14>
        data = (struct ble_att_attr_data_list *)(*rxom)->om_data;
   23f8e:	6823      	ldr	r3, [r4, #0]
        adata.att_handle = le16toh(data->handle);
   23f90:	681b      	ldr	r3, [r3, #0]
   23f92:	f833 2b02 	ldrh.w	r2, [r3], #2
   23f96:	f8ad 2004 	strh.w	r2, [sp, #4]
        adata.value_len = data_len - sizeof(*data);
   23f9a:	1eaa      	subs	r2, r5, #2
   23f9c:	9202      	str	r2, [sp, #8]
        adata.value = data->value;
   23f9e:	9303      	str	r3, [sp, #12]
        ble_gattc_rx_read_type_adata(conn_handle, &adata);
   23fa0:	a901      	add	r1, sp, #4
   23fa2:	4638      	mov	r0, r7
   23fa4:	f7f9 f8a2 	bl	1d0ec <ble_gattc_rx_read_type_adata>
        os_mbuf_adj(*rxom, data_len);
   23fa8:	4629      	mov	r1, r5
   23faa:	6820      	ldr	r0, [r4, #0]
   23fac:	f7e9 fe01 	bl	dbb2 <os_mbuf_adj>
   23fb0:	e7e2      	b.n	23f78 <ble_att_clt_rx_read_type+0x32>
        rc = BLE_HS_EBADDATA;
   23fb2:	260a      	movs	r6, #10
   23fb4:	e7d1      	b.n	23f5a <ble_att_clt_rx_read_type+0x14>

00023fb6 <ble_att_clt_tx_read>:
    if (handle == 0) {
   23fb6:	b181      	cbz	r1, 23fda <ble_att_clt_tx_read+0x24>
{
   23fb8:	b530      	push	{r4, r5, lr}
   23fba:	b083      	sub	sp, #12
   23fbc:	460d      	mov	r5, r1
   23fbe:	4604      	mov	r4, r0
    req = ble_att_cmd_get(BLE_ATT_OP_READ_REQ, sizeof(*req), &txom);
   23fc0:	aa01      	add	r2, sp, #4
   23fc2:	2102      	movs	r1, #2
   23fc4:	200a      	movs	r0, #10
   23fc6:	f000 f954 	bl	24272 <ble_att_cmd_get>
    if (req == NULL) {
   23fca:	b140      	cbz	r0, 23fde <ble_att_clt_tx_read+0x28>
    req->barq_handle = htole16(handle);
   23fcc:	8005      	strh	r5, [r0, #0]
    rc = ble_att_tx(conn_handle, txom);
   23fce:	9901      	ldr	r1, [sp, #4]
   23fd0:	4620      	mov	r0, r4
   23fd2:	f000 f95e 	bl	24292 <ble_att_tx>
}
   23fd6:	b003      	add	sp, #12
   23fd8:	bd30      	pop	{r4, r5, pc}
        return BLE_HS_EINVAL;
   23fda:	2003      	movs	r0, #3
}
   23fdc:	4770      	bx	lr
        return BLE_HS_ENOMEM;
   23fde:	2006      	movs	r0, #6
   23fe0:	e7f9      	b.n	23fd6 <ble_att_clt_tx_read+0x20>

00023fe2 <ble_att_clt_rx_read>:
{
   23fe2:	b508      	push	{r3, lr}
    ble_gattc_rx_read_rsp(conn_handle, 0, rxom);
   23fe4:	460a      	mov	r2, r1
   23fe6:	2100      	movs	r1, #0
   23fe8:	f7f9 f8ca 	bl	1d180 <ble_gattc_rx_read_rsp>
}
   23fec:	2000      	movs	r0, #0
   23fee:	bd08      	pop	{r3, pc}

00023ff0 <ble_att_clt_tx_read_blob>:
    if (handle == 0) {
   23ff0:	b191      	cbz	r1, 24018 <ble_att_clt_tx_read_blob+0x28>
{
   23ff2:	b570      	push	{r4, r5, r6, lr}
   23ff4:	b082      	sub	sp, #8
   23ff6:	460e      	mov	r6, r1
   23ff8:	4615      	mov	r5, r2
   23ffa:	4604      	mov	r4, r0
    req = ble_att_cmd_get(BLE_ATT_OP_READ_BLOB_REQ, sizeof(*req), &txom);
   23ffc:	aa01      	add	r2, sp, #4
   23ffe:	2104      	movs	r1, #4
   24000:	200c      	movs	r0, #12
   24002:	f000 f936 	bl	24272 <ble_att_cmd_get>
    if (req == NULL) {
   24006:	b148      	cbz	r0, 2401c <ble_att_clt_tx_read_blob+0x2c>
    req->babq_handle = htole16(handle);
   24008:	8006      	strh	r6, [r0, #0]
    req->babq_offset = htole16(offset);
   2400a:	8045      	strh	r5, [r0, #2]
    rc = ble_att_tx(conn_handle, txom);
   2400c:	9901      	ldr	r1, [sp, #4]
   2400e:	4620      	mov	r0, r4
   24010:	f000 f93f 	bl	24292 <ble_att_tx>
}
   24014:	b002      	add	sp, #8
   24016:	bd70      	pop	{r4, r5, r6, pc}
        return BLE_HS_EINVAL;
   24018:	2003      	movs	r0, #3
}
   2401a:	4770      	bx	lr
        return BLE_HS_ENOMEM;
   2401c:	2006      	movs	r0, #6
   2401e:	e7f9      	b.n	24014 <ble_att_clt_tx_read_blob+0x24>

00024020 <ble_att_clt_rx_read_blob>:
{
   24020:	b508      	push	{r3, lr}
    ble_gattc_rx_read_blob_rsp(conn_handle, 0, rxom);
   24022:	460a      	mov	r2, r1
   24024:	2100      	movs	r1, #0
   24026:	f7f9 f8c3 	bl	1d1b0 <ble_gattc_rx_read_blob_rsp>
}
   2402a:	2000      	movs	r0, #0
   2402c:	bd08      	pop	{r3, pc}

0002402e <ble_att_clt_rx_read_mult>:
{
   2402e:	b508      	push	{r3, lr}
    ble_gattc_rx_read_mult_rsp(conn_handle, 0, rxom);
   24030:	460a      	mov	r2, r1
   24032:	2100      	movs	r1, #0
   24034:	f7f9 f8cd 	bl	1d1d2 <ble_gattc_rx_read_mult_rsp>
}
   24038:	2000      	movs	r0, #0
   2403a:	bd08      	pop	{r3, pc}

0002403c <ble_att_clt_tx_read_group_type>:
    if (start_handle == 0 || start_handle > end_handle) {
   2403c:	b1e1      	cbz	r1, 24078 <ble_att_clt_tx_read_group_type+0x3c>
{
   2403e:	b5f0      	push	{r4, r5, r6, r7, lr}
   24040:	b083      	sub	sp, #12
   24042:	460d      	mov	r5, r1
    if (start_handle == 0 || start_handle > end_handle) {
   24044:	4291      	cmp	r1, r2
   24046:	d819      	bhi.n	2407c <ble_att_clt_tx_read_group_type+0x40>
   24048:	461e      	mov	r6, r3
   2404a:	4614      	mov	r4, r2
   2404c:	4607      	mov	r7, r0
                          sizeof(*req) + ble_uuid_length(uuid), &txom);
   2404e:	4618      	mov	r0, r3
   24050:	f7ff fb32 	bl	236b8 <ble_uuid_length>
    req = ble_att_cmd_get(BLE_ATT_OP_READ_GROUP_TYPE_REQ,
   24054:	aa01      	add	r2, sp, #4
   24056:	1d01      	adds	r1, r0, #4
   24058:	2010      	movs	r0, #16
   2405a:	f000 f90a 	bl	24272 <ble_att_cmd_get>
    if (req == NULL) {
   2405e:	4601      	mov	r1, r0
   24060:	b178      	cbz	r0, 24082 <ble_att_clt_tx_read_group_type+0x46>
    req->bagq_start_handle = htole16(start_handle);
   24062:	8005      	strh	r5, [r0, #0]
    req->bagq_end_handle = htole16(end_handle);
   24064:	8044      	strh	r4, [r0, #2]
    ble_uuid_flat(uuid, req->uuid);
   24066:	3104      	adds	r1, #4
   24068:	4630      	mov	r0, r6
   2406a:	f7ff faf9 	bl	23660 <ble_uuid_flat>
    return ble_att_tx(conn_handle, txom);
   2406e:	9901      	ldr	r1, [sp, #4]
   24070:	4638      	mov	r0, r7
   24072:	f000 f90e 	bl	24292 <ble_att_tx>
   24076:	e002      	b.n	2407e <ble_att_clt_tx_read_group_type+0x42>
        return BLE_HS_EINVAL;
   24078:	2003      	movs	r0, #3
}
   2407a:	4770      	bx	lr
        return BLE_HS_EINVAL;
   2407c:	2003      	movs	r0, #3
}
   2407e:	b003      	add	sp, #12
   24080:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return BLE_HS_ENOMEM;
   24082:	2006      	movs	r0, #6
   24084:	e7fb      	b.n	2407e <ble_att_clt_tx_read_group_type+0x42>

00024086 <ble_att_clt_rx_read_group_type>:

int
ble_att_clt_rx_read_group_type(uint16_t conn_handle, struct os_mbuf **rxom)
{
   24086:	b5f0      	push	{r4, r5, r6, r7, lr}
   24088:	b085      	sub	sp, #20
   2408a:	4607      	mov	r7, r0
   2408c:	460c      	mov	r4, r1
    struct ble_att_read_group_type_adata adata;
    struct ble_att_read_group_type_rsp *rsp;
    uint8_t len;
    int rc;

    rc = ble_hs_mbuf_pullup_base(rxom, sizeof(*rsp));
   2408e:	2101      	movs	r1, #1
   24090:	4620      	mov	r0, r4
   24092:	f7fc f81d 	bl	200d0 <ble_hs_mbuf_pullup_base>
    if (rc != 0) {
   24096:	4605      	mov	r5, r0
   24098:	b130      	cbz	r0, 240a8 <ble_att_clt_rx_read_group_type+0x22>
        os_mbuf_adj(*rxom, len);
    }

done:
    /* Notify GATT that the response is done being parsed. */
    ble_gattc_rx_read_group_type_complete(conn_handle, rc);
   2409a:	4629      	mov	r1, r5
   2409c:	4638      	mov	r0, r7
   2409e:	f7f9 f860 	bl	1d162 <ble_gattc_rx_read_group_type_complete>
    return rc;
}
   240a2:	4628      	mov	r0, r5
   240a4:	b005      	add	sp, #20
   240a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    rsp = (struct ble_att_read_group_type_rsp *)(*rxom)->om_data;
   240a8:	6820      	ldr	r0, [r4, #0]
   240aa:	6803      	ldr	r3, [r0, #0]
    len = rsp->bagp_length;
   240ac:	781e      	ldrb	r6, [r3, #0]
    os_mbuf_adj(*rxom, sizeof(*rsp));
   240ae:	2101      	movs	r1, #1
   240b0:	f7e9 fd7f 	bl	dbb2 <os_mbuf_adj>
    while (OS_MBUF_PKTLEN(*rxom) > 0) {
   240b4:	6823      	ldr	r3, [r4, #0]
   240b6:	8a1b      	ldrh	r3, [r3, #16]
   240b8:	2b00      	cmp	r3, #0
   240ba:	d0ee      	beq.n	2409a <ble_att_clt_rx_read_group_type+0x14>
        rc = ble_att_clt_parse_read_group_type_adata(rxom, len, &adata);
   240bc:	aa01      	add	r2, sp, #4
   240be:	4631      	mov	r1, r6
   240c0:	4620      	mov	r0, r4
   240c2:	f7ff fdfb 	bl	23cbc <ble_att_clt_parse_read_group_type_adata>
        if (rc != 0) {
   240c6:	4605      	mov	r5, r0
   240c8:	2800      	cmp	r0, #0
   240ca:	d1e6      	bne.n	2409a <ble_att_clt_rx_read_group_type+0x14>
        ble_gattc_rx_read_group_type_adata(conn_handle, &adata);
   240cc:	a901      	add	r1, sp, #4
   240ce:	4638      	mov	r0, r7
   240d0:	f7f9 f838 	bl	1d144 <ble_gattc_rx_read_group_type_adata>
        os_mbuf_adj(*rxom, len);
   240d4:	4631      	mov	r1, r6
   240d6:	6820      	ldr	r0, [r4, #0]
   240d8:	f7e9 fd6b 	bl	dbb2 <os_mbuf_adj>
   240dc:	e7ea      	b.n	240b4 <ble_att_clt_rx_read_group_type+0x2e>

000240de <ble_att_clt_rx_write>:
    return ble_att_tx(conn_handle, txom2);
}

int
ble_att_clt_rx_write(uint16_t conn_handle, struct os_mbuf **rxom)
{
   240de:	b508      	push	{r3, lr}
#if !NIMBLE_BLE_ATT_CLT_WRITE
    return BLE_HS_ENOTSUP;
#endif

    /* No payload. */
    ble_gattc_rx_write_rsp(conn_handle);
   240e0:	f7f9 f889 	bl	1d1f6 <ble_gattc_rx_write_rsp>
    return 0;
}
   240e4:	2000      	movs	r0, #0
   240e6:	bd08      	pop	{r3, pc}

000240e8 <ble_att_clt_tx_prep_write>:
 *****************************************************************************/

int
ble_att_clt_tx_prep_write(uint16_t conn_handle, uint16_t handle,
                          uint16_t offset, struct os_mbuf *txom)
{
   240e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   240ec:	b082      	sub	sp, #8
   240ee:	461c      	mov	r4, r3

    struct ble_att_prep_write_cmd *req;
    struct os_mbuf *txom2;
    int rc;

    if (handle == 0) {
   240f0:	b359      	cbz	r1, 2414a <ble_att_clt_tx_prep_write+0x62>
   240f2:	4607      	mov	r7, r0
   240f4:	4615      	mov	r5, r2
   240f6:	4688      	mov	r8, r1
        rc = BLE_HS_EINVAL;
        goto err;
    }

    if (offset + OS_MBUF_PKTLEN(txom) > BLE_ATT_ATTR_MAX_LEN) {
   240f8:	8a1e      	ldrh	r6, [r3, #16]
   240fa:	1993      	adds	r3, r2, r6
   240fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   24100:	dd07      	ble.n	24112 <ble_att_clt_tx_prep_write+0x2a>
        rc = BLE_HS_EINVAL;
   24102:	2503      	movs	r5, #3
    os_mbuf_concat(txom2, txom);

    return ble_att_tx(conn_handle, txom2);

err:
    os_mbuf_free_chain(txom);
   24104:	4620      	mov	r0, r4
   24106:	f7e9 fc86 	bl	da16 <os_mbuf_free_chain>
    return rc;
}
   2410a:	4628      	mov	r0, r5
   2410c:	b002      	add	sp, #8
   2410e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ble_att_mtu(conn_handle) - BLE_ATT_PREP_WRITE_CMD_BASE_SZ) {
   24112:	f7ff fd75 	bl	23c00 <ble_att_mtu>
   24116:	3805      	subs	r0, #5
    if (OS_MBUF_PKTLEN(txom) >
   24118:	4286      	cmp	r6, r0
   2411a:	dd01      	ble.n	24120 <ble_att_clt_tx_prep_write+0x38>
        rc = BLE_HS_EINVAL;
   2411c:	2503      	movs	r5, #3
   2411e:	e7f1      	b.n	24104 <ble_att_clt_tx_prep_write+0x1c>
    req = ble_att_cmd_get(BLE_ATT_OP_PREP_WRITE_REQ, sizeof(*req), &txom2);
   24120:	aa01      	add	r2, sp, #4
   24122:	2104      	movs	r1, #4
   24124:	2016      	movs	r0, #22
   24126:	f000 f8a4 	bl	24272 <ble_att_cmd_get>
    if (req == NULL) {
   2412a:	b908      	cbnz	r0, 24130 <ble_att_clt_tx_prep_write+0x48>
        rc = BLE_HS_ENOMEM;
   2412c:	2506      	movs	r5, #6
   2412e:	e7e9      	b.n	24104 <ble_att_clt_tx_prep_write+0x1c>
    req->bapc_handle = htole16(handle);
   24130:	f8a0 8000 	strh.w	r8, [r0]
    req->bapc_offset = htole16(offset);
   24134:	8045      	strh	r5, [r0, #2]
    os_mbuf_concat(txom2, txom);
   24136:	4621      	mov	r1, r4
   24138:	9801      	ldr	r0, [sp, #4]
   2413a:	f7e9 fed0 	bl	dede <os_mbuf_concat>
    return ble_att_tx(conn_handle, txom2);
   2413e:	9901      	ldr	r1, [sp, #4]
   24140:	4638      	mov	r0, r7
   24142:	f000 f8a6 	bl	24292 <ble_att_tx>
   24146:	4605      	mov	r5, r0
   24148:	e7df      	b.n	2410a <ble_att_clt_tx_prep_write+0x22>
        rc = BLE_HS_EINVAL;
   2414a:	2503      	movs	r5, #3
   2414c:	e7da      	b.n	24104 <ble_att_clt_tx_prep_write+0x1c>

0002414e <ble_att_clt_rx_prep_write>:

int
ble_att_clt_rx_prep_write(uint16_t conn_handle, struct os_mbuf **rxom)
{
   2414e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24152:	b082      	sub	sp, #8
   24154:	4607      	mov	r7, r0
   24156:	460c      	mov	r4, r1

    /* Initialize some values in case of early error. */
    handle = 0;
    offset = 0;

    rc = ble_hs_mbuf_pullup_base(rxom, sizeof(*rsp));
   24158:	2104      	movs	r1, #4
   2415a:	4620      	mov	r0, r4
   2415c:	f7fb ffb8 	bl	200d0 <ble_hs_mbuf_pullup_base>
    if (rc != 0) {
   24160:	4605      	mov	r5, r0
   24162:	b160      	cbz	r0, 2417e <ble_att_clt_rx_prep_write+0x30>
    offset = 0;
   24164:	2600      	movs	r6, #0
    handle = 0;
   24166:	46b0      	mov	r8, r6
    /* Strip the base from the front of the response. */
    os_mbuf_adj(*rxom, sizeof(*rsp));

done:
    /* Notify GATT client that the full response has been parsed. */
    ble_gattc_rx_prep_write_rsp(conn_handle, rc, handle, offset, rxom);
   24168:	9400      	str	r4, [sp, #0]
   2416a:	4633      	mov	r3, r6
   2416c:	4642      	mov	r2, r8
   2416e:	4629      	mov	r1, r5
   24170:	4638      	mov	r0, r7
   24172:	f7f9 f84f 	bl	1d214 <ble_gattc_rx_prep_write_rsp>
    return rc;
}
   24176:	4628      	mov	r0, r5
   24178:	b002      	add	sp, #8
   2417a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    rsp = (struct ble_att_prep_write_cmd *)(*rxom)->om_data;
   2417e:	6820      	ldr	r0, [r4, #0]
   24180:	6803      	ldr	r3, [r0, #0]
    handle = le16toh(rsp->bapc_handle);
   24182:	f8b3 8000 	ldrh.w	r8, [r3]
    offset = le16toh(rsp->bapc_offset);
   24186:	885e      	ldrh	r6, [r3, #2]
    os_mbuf_adj(*rxom, sizeof(*rsp));
   24188:	2104      	movs	r1, #4
   2418a:	f7e9 fd12 	bl	dbb2 <os_mbuf_adj>
   2418e:	e7eb      	b.n	24168 <ble_att_clt_rx_prep_write+0x1a>

00024190 <ble_att_clt_tx_exec_write>:
 * $execute write request                                                    *
 *****************************************************************************/

int
ble_att_clt_tx_exec_write(uint16_t conn_handle, uint8_t flags)
{
   24190:	b530      	push	{r4, r5, lr}
   24192:	b083      	sub	sp, #12
   24194:	4604      	mov	r4, r0
   24196:	460d      	mov	r5, r1

    struct ble_att_exec_write_req *req;
    struct os_mbuf *txom;
    int rc;

    req = ble_att_cmd_get(BLE_ATT_OP_EXEC_WRITE_REQ, sizeof(*req), &txom);
   24198:	aa01      	add	r2, sp, #4
   2419a:	2101      	movs	r1, #1
   2419c:	2018      	movs	r0, #24
   2419e:	f000 f868 	bl	24272 <ble_att_cmd_get>
    if (req == NULL) {
   241a2:	b130      	cbz	r0, 241b2 <ble_att_clt_tx_exec_write+0x22>
        return BLE_HS_ENOMEM;
    }

    req->baeq_flags = flags;
   241a4:	7005      	strb	r5, [r0, #0]

    rc = ble_att_tx(conn_handle, txom);
   241a6:	9901      	ldr	r1, [sp, #4]
   241a8:	4620      	mov	r0, r4
   241aa:	f000 f872 	bl	24292 <ble_att_tx>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   241ae:	b003      	add	sp, #12
   241b0:	bd30      	pop	{r4, r5, pc}
        return BLE_HS_ENOMEM;
   241b2:	2006      	movs	r0, #6
   241b4:	e7fb      	b.n	241ae <ble_att_clt_tx_exec_write+0x1e>

000241b6 <ble_att_clt_rx_exec_write>:

int
ble_att_clt_rx_exec_write(uint16_t conn_handle, struct os_mbuf **rxom)
{
   241b6:	b508      	push	{r3, lr}
#if !NIMBLE_BLE_ATT_CLT_EXEC_WRITE
    return BLE_HS_ENOTSUP;
#endif

    ble_gattc_rx_exec_write_rsp(conn_handle, 0);
   241b8:	2100      	movs	r1, #0
   241ba:	f7f9 f849 	bl	1d250 <ble_gattc_rx_exec_write_rsp>
    return 0;
}
   241be:	2000      	movs	r0, #0
   241c0:	bd08      	pop	{r3, pc}

000241c2 <ble_att_clt_tx_notify>:
 *****************************************************************************/

int
ble_att_clt_tx_notify(uint16_t conn_handle, uint16_t handle,
                      struct os_mbuf *txom)
{
   241c2:	b570      	push	{r4, r5, r6, lr}
   241c4:	b082      	sub	sp, #8
   241c6:	4615      	mov	r5, r2

    struct ble_att_notify_req *req;
    struct os_mbuf *txom2;
    int rc;

    if (handle == 0) {
   241c8:	b1a1      	cbz	r1, 241f4 <ble_att_clt_tx_notify+0x32>
   241ca:	4604      	mov	r4, r0
   241cc:	460e      	mov	r6, r1
        rc = BLE_HS_EINVAL;
        goto err;
    }

    req = ble_att_cmd_get(BLE_ATT_OP_NOTIFY_REQ, sizeof(*req), &txom2);
   241ce:	aa01      	add	r2, sp, #4
   241d0:	2102      	movs	r1, #2
   241d2:	201b      	movs	r0, #27
   241d4:	f000 f84d 	bl	24272 <ble_att_cmd_get>
    if (req == NULL) {
   241d8:	b908      	cbnz	r0, 241de <ble_att_clt_tx_notify+0x1c>
        rc = BLE_HS_ENOMEM;
   241da:	2406      	movs	r4, #6
   241dc:	e00b      	b.n	241f6 <ble_att_clt_tx_notify+0x34>
        goto err;
    }

    req->banq_handle = htole16(handle);
   241de:	8006      	strh	r6, [r0, #0]
    os_mbuf_concat(txom2, txom);
   241e0:	4629      	mov	r1, r5
   241e2:	9801      	ldr	r0, [sp, #4]
   241e4:	f7e9 fe7b 	bl	dede <os_mbuf_concat>

    return ble_att_tx(conn_handle, txom2);
   241e8:	9901      	ldr	r1, [sp, #4]
   241ea:	4620      	mov	r0, r4
   241ec:	f000 f851 	bl	24292 <ble_att_tx>
   241f0:	4604      	mov	r4, r0
   241f2:	e003      	b.n	241fc <ble_att_clt_tx_notify+0x3a>
        rc = BLE_HS_EINVAL;
   241f4:	2403      	movs	r4, #3

err:
    os_mbuf_free_chain(txom);
   241f6:	4628      	mov	r0, r5
   241f8:	f7e9 fc0d 	bl	da16 <os_mbuf_free_chain>
    return rc;
}
   241fc:	4620      	mov	r0, r4
   241fe:	b002      	add	sp, #8
   24200:	bd70      	pop	{r4, r5, r6, pc}

00024202 <ble_att_clt_tx_indicate>:
 *****************************************************************************/

int
ble_att_clt_tx_indicate(uint16_t conn_handle, uint16_t handle,
                        struct os_mbuf *txom)
{
   24202:	b570      	push	{r4, r5, r6, lr}
   24204:	b082      	sub	sp, #8
   24206:	4615      	mov	r5, r2

    struct ble_att_indicate_req *req;
    struct os_mbuf *txom2;
    int rc;

    if (handle == 0) {
   24208:	b1a1      	cbz	r1, 24234 <ble_att_clt_tx_indicate+0x32>
   2420a:	4604      	mov	r4, r0
   2420c:	460e      	mov	r6, r1
        rc = BLE_HS_EINVAL;
        goto err;
    }

    req = ble_att_cmd_get(BLE_ATT_OP_INDICATE_REQ, sizeof(*req), &txom2);
   2420e:	aa01      	add	r2, sp, #4
   24210:	2102      	movs	r1, #2
   24212:	201d      	movs	r0, #29
   24214:	f000 f82d 	bl	24272 <ble_att_cmd_get>
    if (req == NULL) {
   24218:	b908      	cbnz	r0, 2421e <ble_att_clt_tx_indicate+0x1c>
        rc = BLE_HS_ENOMEM;
   2421a:	2406      	movs	r4, #6
   2421c:	e00b      	b.n	24236 <ble_att_clt_tx_indicate+0x34>
        goto err;
    }

    req->baiq_handle = htole16(handle);
   2421e:	8006      	strh	r6, [r0, #0]
    os_mbuf_concat(txom2, txom);
   24220:	4629      	mov	r1, r5
   24222:	9801      	ldr	r0, [sp, #4]
   24224:	f7e9 fe5b 	bl	dede <os_mbuf_concat>

    return ble_att_tx(conn_handle, txom2);
   24228:	9901      	ldr	r1, [sp, #4]
   2422a:	4620      	mov	r0, r4
   2422c:	f000 f831 	bl	24292 <ble_att_tx>
   24230:	4604      	mov	r4, r0
   24232:	e003      	b.n	2423c <ble_att_clt_tx_indicate+0x3a>
        rc = BLE_HS_EINVAL;
   24234:	2403      	movs	r4, #3

err:
    os_mbuf_free_chain(txom);
   24236:	4628      	mov	r0, r5
   24238:	f7e9 fbed 	bl	da16 <os_mbuf_free_chain>
    return rc;
}
   2423c:	4620      	mov	r0, r4
   2423e:	b002      	add	sp, #8
   24240:	bd70      	pop	{r4, r5, r6, pc}

00024242 <ble_att_clt_rx_indicate>:

int
ble_att_clt_rx_indicate(uint16_t conn_handle, struct os_mbuf **rxom)
{
   24242:	b508      	push	{r3, lr}
#if !NIMBLE_BLE_ATT_CLT_INDICATE
    return BLE_HS_ENOTSUP;
#endif

    /* No payload. */
    ble_gattc_rx_indicate_rsp(conn_handle);
   24244:	f7f9 f81a 	bl	1d27c <ble_gattc_rx_indicate_rsp>
    return 0;
}
   24248:	2000      	movs	r0, #0
   2424a:	bd08      	pop	{r3, pc}

0002424c <ble_att_cmd_prepare>:
#include "host/ble_uuid.h"
#include "ble_hs_priv.h"

void *
ble_att_cmd_prepare(uint8_t opcode, size_t len, struct os_mbuf *txom)
{
   2424c:	b570      	push	{r4, r5, r6, lr}
   2424e:	4606      	mov	r6, r0
   24250:	4615      	mov	r5, r2
    struct ble_att_hdr *hdr;

    if (os_mbuf_extend(txom, sizeof(*hdr) + len) == NULL) {
   24252:	3101      	adds	r1, #1
   24254:	b289      	uxth	r1, r1
   24256:	4610      	mov	r0, r2
   24258:	f7e9 fe63 	bl	df22 <os_mbuf_extend>
   2425c:	b120      	cbz	r0, 24268 <ble_att_cmd_prepare+0x1c>
        return NULL;
    }

    hdr = (struct ble_att_hdr *)(txom)->om_data;

    hdr->opcode = opcode;
   2425e:	682c      	ldr	r4, [r5, #0]
   24260:	f804 6b01 	strb.w	r6, [r4], #1

    return hdr->data;
}
   24264:	4620      	mov	r0, r4
   24266:	bd70      	pop	{r4, r5, r6, pc}
   24268:	4604      	mov	r4, r0
        os_mbuf_free_chain(txom);
   2426a:	4628      	mov	r0, r5
   2426c:	f7e9 fbd3 	bl	da16 <os_mbuf_free_chain>
        return NULL;
   24270:	e7f8      	b.n	24264 <ble_att_cmd_prepare+0x18>

00024272 <ble_att_cmd_get>:

void *
ble_att_cmd_get(uint8_t opcode, size_t len, struct os_mbuf **txom)
{
   24272:	b570      	push	{r4, r5, r6, lr}
   24274:	4605      	mov	r5, r0
   24276:	460e      	mov	r6, r1
   24278:	4614      	mov	r4, r2
    *txom = ble_hs_mbuf_l2cap_pkt();
   2427a:	f7fb ff0b 	bl	20094 <ble_hs_mbuf_l2cap_pkt>
   2427e:	6020      	str	r0, [r4, #0]
    if (*txom == NULL) {
   24280:	b128      	cbz	r0, 2428e <ble_att_cmd_get+0x1c>
        return NULL;
    }

    return ble_att_cmd_prepare(opcode, len, *txom);
   24282:	4602      	mov	r2, r0
   24284:	4631      	mov	r1, r6
   24286:	4628      	mov	r0, r5
   24288:	f7ff ffe0 	bl	2424c <ble_att_cmd_prepare>
}
   2428c:	bd70      	pop	{r4, r5, r6, pc}
        return NULL;
   2428e:	2000      	movs	r0, #0
   24290:	e7fc      	b.n	2428c <ble_att_cmd_get+0x1a>

00024292 <ble_att_tx>:

int
ble_att_tx(uint16_t conn_handle, struct os_mbuf *txom)
{
   24292:	b530      	push	{r4, r5, lr}
   24294:	b083      	sub	sp, #12
   24296:	4605      	mov	r5, r0
   24298:	460c      	mov	r4, r1
    struct ble_l2cap_chan *chan;
    struct ble_hs_conn *conn;
    int rc;

    BLE_HS_DBG_ASSERT_EVAL(txom->om_len >= 1);
    ble_att_inc_tx_stat(txom->om_data[0]);
   2429a:	680b      	ldr	r3, [r1, #0]
   2429c:	7818      	ldrb	r0, [r3, #0]
   2429e:	f7ff fb91 	bl	239c4 <ble_att_inc_tx_stat>

    ble_hs_lock();
   242a2:	f7fa f93f 	bl	1e524 <ble_hs_lock>

    ble_hs_misc_conn_chan_find_reqd(conn_handle, BLE_L2CAP_CID_ATT, &conn,
   242a6:	ab01      	add	r3, sp, #4
   242a8:	466a      	mov	r2, sp
   242aa:	2104      	movs	r1, #4
   242ac:	4628      	mov	r0, r5
   242ae:	f7fb ff53 	bl	20158 <ble_hs_misc_conn_chan_find_reqd>
                                    &chan);
    if (chan == NULL) {
   242b2:	9801      	ldr	r0, [sp, #4]
   242b4:	b168      	cbz	r0, 242d2 <ble_att_tx+0x40>
        os_mbuf_free_chain(txom);
        rc = BLE_HS_ENOTCONN;
    } else {
        ble_att_truncate_to_mtu(chan, txom);
   242b6:	4621      	mov	r1, r4
   242b8:	f7ff fc95 	bl	23be6 <ble_att_truncate_to_mtu>
        rc = ble_l2cap_tx(conn, chan, txom);
   242bc:	4622      	mov	r2, r4
   242be:	9901      	ldr	r1, [sp, #4]
   242c0:	9800      	ldr	r0, [sp, #0]
   242c2:	f7fc fb36 	bl	20932 <ble_l2cap_tx>
   242c6:	4604      	mov	r4, r0
    }

    ble_hs_unlock();
   242c8:	f7fa f930 	bl	1e52c <ble_hs_unlock>

    return rc;
}
   242cc:	4620      	mov	r0, r4
   242ce:	b003      	add	sp, #12
   242d0:	bd30      	pop	{r4, r5, pc}
        os_mbuf_free_chain(txom);
   242d2:	4620      	mov	r0, r4
   242d4:	f7e9 fb9f 	bl	da16 <os_mbuf_free_chain>
        rc = BLE_HS_ENOTCONN;
   242d8:	2407      	movs	r4, #7
   242da:	e7f5      	b.n	242c8 <ble_att_tx+0x36>

000242dc <ble_att_svr_next_id>:
static uint16_t
ble_att_svr_next_id(void)
{
    /* Rollover is fatal. */
    BLE_HS_DBG_ASSERT(ble_att_svr_id != UINT16_MAX);
    return ++ble_att_svr_id;
   242dc:	4b02      	ldr	r3, [pc, #8]	; (242e8 <ble_att_svr_next_id+0xc>)
   242de:	8818      	ldrh	r0, [r3, #0]
   242e0:	3001      	adds	r0, #1
   242e2:	b280      	uxth	r0, r0
   242e4:	8018      	strh	r0, [r3, #0]
}
   242e6:	4770      	bx	lr
   242e8:	200032b4 	.word	0x200032b4

000242ec <ble_att_svr_prep_find_prev>:
{
    struct ble_att_prep_entry *entry;
    struct ble_att_prep_entry *prev;

    prev = NULL;
    SLIST_FOREACH(entry, &basc->basc_prep_list, bape_next) {
   242ec:	6803      	ldr	r3, [r0, #0]
    prev = NULL;
   242ee:	2000      	movs	r0, #0
    SLIST_FOREACH(entry, &basc->basc_prep_list, bape_next) {
   242f0:	b16b      	cbz	r3, 2430e <ble_att_svr_prep_find_prev+0x22>
{
   242f2:	b410      	push	{r4}
   242f4:	e002      	b.n	242fc <ble_att_svr_prep_find_prev+0x10>

        if (entry->bape_handle == handle && entry->bape_offset > offset) {
            break;
        }

        prev = entry;
   242f6:	4618      	mov	r0, r3
    SLIST_FOREACH(entry, &basc->basc_prep_list, bape_next) {
   242f8:	681b      	ldr	r3, [r3, #0]
   242fa:	b133      	cbz	r3, 2430a <ble_att_svr_prep_find_prev+0x1e>
        if (entry->bape_handle > handle) {
   242fc:	889c      	ldrh	r4, [r3, #4]
   242fe:	428c      	cmp	r4, r1
   24300:	d803      	bhi.n	2430a <ble_att_svr_prep_find_prev+0x1e>
        if (entry->bape_handle == handle && entry->bape_offset > offset) {
   24302:	d1f8      	bne.n	242f6 <ble_att_svr_prep_find_prev+0xa>
   24304:	88dc      	ldrh	r4, [r3, #6]
   24306:	4294      	cmp	r4, r2
   24308:	d9f5      	bls.n	242f6 <ble_att_svr_prep_find_prev+0xa>
    }

    return prev;
}
   2430a:	bc10      	pop	{r4}
   2430c:	4770      	bx	lr
   2430e:	4770      	bx	lr

00024310 <ble_att_svr_prep_validate>:
    struct ble_att_prep_entry *entry;
    struct ble_att_prep_entry *prev;
    int cur_len;

    prev = NULL;
    SLIST_FOREACH(entry, prep_list, bape_next) {
   24310:	6803      	ldr	r3, [r0, #0]
    prev = NULL;
   24312:	2200      	movs	r2, #0
    SLIST_FOREACH(entry, prep_list, bape_next) {
   24314:	b343      	cbz	r3, 24368 <ble_att_svr_prep_validate+0x58>
{
   24316:	b410      	push	{r4}
   24318:	e00b      	b.n	24332 <ble_att_svr_prep_validate+0x22>
        if (prev == NULL || prev->bape_handle != entry->bape_handle) {
            /* Ensure attribute write starts at offset 0. */
            if (entry->bape_offset != 0) {
   2431a:	88da      	ldrh	r2, [r3, #6]
   2431c:	b9ca      	cbnz	r2, 24352 <ble_att_svr_prep_validate+0x42>
                *err_handle = entry->bape_handle;
                return BLE_ATT_ERR_INVALID_OFFSET;
            }
        }

        cur_len = entry->bape_offset + OS_MBUF_PKTLEN(entry->bape_value);
   2431e:	88da      	ldrh	r2, [r3, #6]
   24320:	6898      	ldr	r0, [r3, #8]
   24322:	8a00      	ldrh	r0, [r0, #16]
   24324:	4402      	add	r2, r0
        if (cur_len > BLE_ATT_ATTR_MAX_LEN) {
   24326:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   2432a:	dc16      	bgt.n	2435a <ble_att_svr_prep_validate+0x4a>
            *err_handle = entry->bape_handle;
            return BLE_ATT_ERR_INVALID_ATTR_VALUE_LEN;
        }

        prev = entry;
   2432c:	461a      	mov	r2, r3
    SLIST_FOREACH(entry, prep_list, bape_next) {
   2432e:	681b      	ldr	r3, [r3, #0]
   24330:	b1bb      	cbz	r3, 24362 <ble_att_svr_prep_validate+0x52>
        if (prev == NULL || prev->bape_handle != entry->bape_handle) {
   24332:	2a00      	cmp	r2, #0
   24334:	d0f1      	beq.n	2431a <ble_att_svr_prep_validate+0xa>
   24336:	8894      	ldrh	r4, [r2, #4]
   24338:	8898      	ldrh	r0, [r3, #4]
   2433a:	4284      	cmp	r4, r0
   2433c:	d1ed      	bne.n	2431a <ble_att_svr_prep_validate+0xa>
            if (prev->bape_offset + OS_MBUF_PKTLEN(prev->bape_value) !=
   2433e:	88d4      	ldrh	r4, [r2, #6]
   24340:	6892      	ldr	r2, [r2, #8]
   24342:	8a12      	ldrh	r2, [r2, #16]
   24344:	4422      	add	r2, r4
                entry->bape_offset) {
   24346:	88dc      	ldrh	r4, [r3, #6]
            if (prev->bape_offset + OS_MBUF_PKTLEN(prev->bape_value) !=
   24348:	42a2      	cmp	r2, r4
   2434a:	d0e8      	beq.n	2431e <ble_att_svr_prep_validate+0xe>
                *err_handle = entry->bape_handle;
   2434c:	8008      	strh	r0, [r1, #0]
                return BLE_ATT_ERR_INVALID_OFFSET;
   2434e:	2007      	movs	r0, #7
   24350:	e008      	b.n	24364 <ble_att_svr_prep_validate+0x54>
                *err_handle = entry->bape_handle;
   24352:	889b      	ldrh	r3, [r3, #4]
   24354:	800b      	strh	r3, [r1, #0]
                return BLE_ATT_ERR_INVALID_OFFSET;
   24356:	2007      	movs	r0, #7
   24358:	e004      	b.n	24364 <ble_att_svr_prep_validate+0x54>
            *err_handle = entry->bape_handle;
   2435a:	889b      	ldrh	r3, [r3, #4]
   2435c:	800b      	strh	r3, [r1, #0]
            return BLE_ATT_ERR_INVALID_ATTR_VALUE_LEN;
   2435e:	200d      	movs	r0, #13
   24360:	e000      	b.n	24364 <ble_att_svr_prep_validate+0x54>
    }

    return 0;
   24362:	2000      	movs	r0, #0
}
   24364:	bc10      	pop	{r4}
   24366:	4770      	bx	lr
    return 0;
   24368:	2000      	movs	r0, #0
}
   2436a:	4770      	bx	lr

0002436c <ble_att_svr_entry_alloc>:
{
   2436c:	b508      	push	{r3, lr}
    entry = os_memblock_get(&ble_att_svr_entry_pool);
   2436e:	4806      	ldr	r0, [pc, #24]	; (24388 <ble_att_svr_entry_alloc+0x1c>)
   24370:	f7e8 fdde 	bl	cf30 <os_memblock_get>
    if (entry != NULL) {
   24374:	4603      	mov	r3, r0
   24376:	b128      	cbz	r0, 24384 <ble_att_svr_entry_alloc+0x18>
        memset(entry, 0, sizeof *entry);
   24378:	2200      	movs	r2, #0
   2437a:	6002      	str	r2, [r0, #0]
   2437c:	6042      	str	r2, [r0, #4]
   2437e:	6082      	str	r2, [r0, #8]
   24380:	60c2      	str	r2, [r0, #12]
   24382:	6102      	str	r2, [r0, #16]
}
   24384:	4618      	mov	r0, r3
   24386:	bd08      	pop	{r3, pc}
   24388:	20003290 	.word	0x20003290

0002438c <ble_att_svr_get_sec_state>:
{
   2438c:	b538      	push	{r3, r4, r5, lr}
   2438e:	4605      	mov	r5, r0
   24390:	460c      	mov	r4, r1
    ble_hs_lock();
   24392:	f7fa f8c7 	bl	1e524 <ble_hs_lock>
    conn = ble_hs_conn_find_assert(conn_handle);
   24396:	4628      	mov	r0, r5
   24398:	f7fa ff6c 	bl	1f274 <ble_hs_conn_find_assert>
    *out_sec_state = conn->bhc_sec_state;
   2439c:	6d83      	ldr	r3, [r0, #88]	; 0x58
   2439e:	6023      	str	r3, [r4, #0]
    ble_hs_unlock();
   243a0:	f7fa f8c4 	bl	1e52c <ble_hs_unlock>
}
   243a4:	bd38      	pop	{r3, r4, r5, pc}

000243a6 <ble_att_svr_check_perms>:
{
   243a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   243aa:	b0a6      	sub	sp, #152	; 0x98
    if (is_read) {
   243ac:	b371      	cbz	r1, 2440c <ble_att_svr_check_perms+0x66>
        if (!(entry->ha_flags & BLE_ATT_F_READ)) {
   243ae:	7a11      	ldrb	r1, [r2, #8]
   243b0:	f011 0f01 	tst.w	r1, #1
   243b4:	d026      	beq.n	24404 <ble_att_svr_check_perms+0x5e>
        enc = entry->ha_flags & BLE_ATT_F_READ_ENC;
   243b6:	f001 0504 	and.w	r5, r1, #4
        authen = entry->ha_flags & BLE_ATT_F_READ_AUTHEN;
   243ba:	f001 0608 	and.w	r6, r1, #8
        author = entry->ha_flags & BLE_ATT_F_READ_AUTHOR;
   243be:	f001 0110 	and.w	r1, r1, #16
    if (!enc && !authen && !author) {
   243c2:	b90d      	cbnz	r5, 243c8 <ble_att_svr_check_perms+0x22>
   243c4:	b906      	cbnz	r6, 243c8 <ble_att_svr_check_perms+0x22>
   243c6:	b1c9      	cbz	r1, 243fc <ble_att_svr_check_perms+0x56>
   243c8:	4698      	mov	r8, r3
   243ca:	4614      	mov	r4, r2
   243cc:	4607      	mov	r7, r0
    ble_att_svr_get_sec_state(conn_handle, &sec_state);
   243ce:	a925      	add	r1, sp, #148	; 0x94
   243d0:	f7ff ffdc 	bl	2438c <ble_att_svr_get_sec_state>
    if ((enc || authen) && !sec_state.encrypted) {
   243d4:	b905      	cbnz	r5, 243d8 <ble_att_svr_check_perms+0x32>
   243d6:	b126      	cbz	r6, 243e2 <ble_att_svr_check_perms+0x3c>
   243d8:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
   243dc:	f013 0f01 	tst.w	r3, #1
   243e0:	d023      	beq.n	2442a <ble_att_svr_check_perms+0x84>
    if (authen && !sec_state.authenticated) {
   243e2:	b126      	cbz	r6, 243ee <ble_att_svr_check_perms+0x48>
   243e4:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
   243e8:	f013 0f02 	tst.w	r3, #2
   243ec:	d058      	beq.n	244a0 <ble_att_svr_check_perms+0xfa>
    if (entry->ha_min_key_size > sec_state.key_size) {
   243ee:	7a63      	ldrb	r3, [r4, #9]
   243f0:	f89d 2094 	ldrb.w	r2, [sp, #148]	; 0x94
   243f4:	ebb3 0fd2 	cmp.w	r3, r2, lsr #3
   243f8:	d858      	bhi.n	244ac <ble_att_svr_check_perms+0x106>
    return 0;
   243fa:	2100      	movs	r1, #0
}
   243fc:	4608      	mov	r0, r1
   243fe:	b026      	add	sp, #152	; 0x98
   24400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            *out_att_err = BLE_ATT_ERR_READ_NOT_PERMITTED;
   24404:	2202      	movs	r2, #2
   24406:	701a      	strb	r2, [r3, #0]
            return BLE_HS_EREJECT;
   24408:	2110      	movs	r1, #16
   2440a:	e7f7      	b.n	243fc <ble_att_svr_check_perms+0x56>
        if (!(entry->ha_flags & BLE_ATT_F_WRITE)) {
   2440c:	7a11      	ldrb	r1, [r2, #8]
   2440e:	f011 0f02 	tst.w	r1, #2
   24412:	d006      	beq.n	24422 <ble_att_svr_check_perms+0x7c>
        enc = entry->ha_flags & BLE_ATT_F_WRITE_ENC;
   24414:	f001 0520 	and.w	r5, r1, #32
        authen = entry->ha_flags & BLE_ATT_F_WRITE_AUTHEN;
   24418:	f001 0640 	and.w	r6, r1, #64	; 0x40
        author = entry->ha_flags & BLE_ATT_F_WRITE_AUTHOR;
   2441c:	f001 0180 	and.w	r1, r1, #128	; 0x80
   24420:	e7cf      	b.n	243c2 <ble_att_svr_check_perms+0x1c>
            *out_att_err = BLE_ATT_ERR_WRITE_NOT_PERMITTED;
   24422:	2203      	movs	r2, #3
   24424:	701a      	strb	r2, [r3, #0]
            return BLE_HS_EREJECT;
   24426:	2110      	movs	r1, #16
   24428:	e7e8      	b.n	243fc <ble_att_svr_check_perms+0x56>
        ble_hs_lock();
   2442a:	f7fa f87b 	bl	1e524 <ble_hs_lock>
        conn = ble_hs_conn_find(conn_handle);
   2442e:	4638      	mov	r0, r7
   24430:	f7fa ff08 	bl	1f244 <ble_hs_conn_find>
        if (conn != NULL) {
   24434:	b1d8      	cbz	r0, 2446e <ble_att_svr_check_perms+0xc8>
            ble_hs_conn_addrs(conn, &addrs);
   24436:	a901      	add	r1, sp, #4
   24438:	f7fa ff3c 	bl	1f2b4 <ble_hs_conn_addrs>
            memset(&key_sec, 0, sizeof key_sec);
   2443c:	2300      	movs	r3, #0
   2443e:	f8cd 3026 	str.w	r3, [sp, #38]	; 0x26
   24442:	f8cd 302a 	str.w	r3, [sp, #42]	; 0x2a
   24446:	f8cd 302e 	str.w	r3, [sp, #46]	; 0x2e
   2444a:	f8cd 3032 	str.w	r3, [sp, #50]	; 0x32
   2444e:	f8cd 3036 	str.w	r3, [sp, #54]	; 0x36
   24452:	f8cd 303a 	str.w	r3, [sp, #58]	; 0x3a
   24456:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
            key_sec.peer_addr = addrs.peer_id_addr;
   2445a:	ab26      	add	r3, sp, #152	; 0x98
   2445c:	f853 0d8d 	ldr.w	r0, [r3, #-141]!
   24460:	9008      	str	r0, [sp, #32]
   24462:	889a      	ldrh	r2, [r3, #4]
   24464:	799b      	ldrb	r3, [r3, #6]
   24466:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
   2446a:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
        ble_hs_unlock();
   2446e:	f7fa f85d 	bl	1e52c <ble_hs_unlock>
        rc = ble_store_read_peer_sec(&key_sec, &value_sec);
   24472:	a910      	add	r1, sp, #64	; 0x40
   24474:	a808      	add	r0, sp, #32
   24476:	f7fe ffd5 	bl	23424 <ble_store_read_peer_sec>
        if (rc == 0 && value_sec.ltk_present) {
   2447a:	b940      	cbnz	r0, 2448e <ble_att_svr_check_perms+0xe8>
   2447c:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
   24480:	f013 0f01 	tst.w	r3, #1
   24484:	d003      	beq.n	2448e <ble_att_svr_check_perms+0xe8>
            *out_att_err = BLE_ATT_ERR_INSUFFICIENT_ENC;
   24486:	230f      	movs	r3, #15
   24488:	f888 3000 	strb.w	r3, [r8]
   2448c:	e002      	b.n	24494 <ble_att_svr_check_perms+0xee>
            *out_att_err = BLE_ATT_ERR_INSUFFICIENT_AUTHEN;
   2448e:	2305      	movs	r3, #5
   24490:	f888 3000 	strb.w	r3, [r8]
        return BLE_HS_ATT_ERR(*out_att_err);
   24494:	f898 1000 	ldrb.w	r1, [r8]
   24498:	b171      	cbz	r1, 244b8 <ble_att_svr_check_perms+0x112>
   2449a:	f501 7180 	add.w	r1, r1, #256	; 0x100
   2449e:	e7ad      	b.n	243fc <ble_att_svr_check_perms+0x56>
        *out_att_err = BLE_ATT_ERR_INSUFFICIENT_AUTHEN;
   244a0:	2305      	movs	r3, #5
   244a2:	f888 3000 	strb.w	r3, [r8]
        return BLE_HS_ATT_ERR(*out_att_err);
   244a6:	f240 1105 	movw	r1, #261	; 0x105
   244aa:	e7a7      	b.n	243fc <ble_att_svr_check_perms+0x56>
        *out_att_err = BLE_ATT_ERR_INSUFFICIENT_KEY_SZ;
   244ac:	230c      	movs	r3, #12
   244ae:	f888 3000 	strb.w	r3, [r8]
        return BLE_HS_ATT_ERR(*out_att_err);
   244b2:	f44f 7186 	mov.w	r1, #268	; 0x10c
   244b6:	e7a1      	b.n	243fc <ble_att_svr_check_perms+0x56>
        return BLE_HS_ATT_ERR(*out_att_err);
   244b8:	2100      	movs	r1, #0
   244ba:	e79f      	b.n	243fc <ble_att_svr_check_perms+0x56>

000244bc <ble_att_svr_read>:
{
   244bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   244be:	b087      	sub	sp, #28
   244c0:	4605      	mov	r5, r0
   244c2:	460c      	mov	r4, r1
   244c4:	4616      	mov	r6, r2
   244c6:	9303      	str	r3, [sp, #12]
    att_err = 0;    /* Silence gcc warning. */
   244c8:	2300      	movs	r3, #0
   244ca:	f88d 3017 	strb.w	r3, [sp, #23]
    if (conn_handle != BLE_HS_CONN_HANDLE_NONE) {
   244ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
   244d2:	4298      	cmp	r0, r3
   244d4:	d117      	bne.n	24506 <ble_att_svr_read+0x4a>
    rc = entry->ha_cb(conn_handle, entry->ha_handle_id,
   244d6:	68e7      	ldr	r7, [r4, #12]
   244d8:	8961      	ldrh	r1, [r4, #10]
   244da:	6923      	ldr	r3, [r4, #16]
   244dc:	9301      	str	r3, [sp, #4]
   244de:	ab03      	add	r3, sp, #12
   244e0:	9300      	str	r3, [sp, #0]
   244e2:	4633      	mov	r3, r6
   244e4:	2201      	movs	r2, #1
   244e6:	4628      	mov	r0, r5
   244e8:	47b8      	blx	r7
    if (rc != 0) {
   244ea:	4603      	mov	r3, r0
   244ec:	b140      	cbz	r0, 24500 <ble_att_svr_read+0x44>
        att_err = rc;
   244ee:	f88d 0017 	strb.w	r0, [sp, #23]
        rc = BLE_HS_EAPP;
   244f2:	2309      	movs	r3, #9
    if (out_att_err != NULL) {
   244f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   244f6:	b11a      	cbz	r2, 24500 <ble_att_svr_read+0x44>
        *out_att_err = att_err;
   244f8:	f89d 2017 	ldrb.w	r2, [sp, #23]
   244fc:	990c      	ldr	r1, [sp, #48]	; 0x30
   244fe:	700a      	strb	r2, [r1, #0]
}
   24500:	4618      	mov	r0, r3
   24502:	b007      	add	sp, #28
   24504:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rc = ble_att_svr_check_perms(conn_handle, 1, entry, &att_err);
   24506:	f10d 0317 	add.w	r3, sp, #23
   2450a:	460a      	mov	r2, r1
   2450c:	2101      	movs	r1, #1
   2450e:	f7ff ff4a 	bl	243a6 <ble_att_svr_check_perms>
        if (rc != 0) {
   24512:	4603      	mov	r3, r0
   24514:	2800      	cmp	r0, #0
   24516:	d1ed      	bne.n	244f4 <ble_att_svr_read+0x38>
   24518:	e7dd      	b.n	244d6 <ble_att_svr_read+0x1a>

0002451a <ble_att_svr_write>:
{
   2451a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2451e:	b085      	sub	sp, #20
   24520:	4605      	mov	r5, r0
   24522:	460c      	mov	r4, r1
   24524:	4691      	mov	r9, r2
   24526:	4698      	mov	r8, r3
   24528:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    uint8_t att_err = 0;
   2452a:	2300      	movs	r3, #0
   2452c:	f88d 300f 	strb.w	r3, [sp, #15]
    if (conn_handle != BLE_HS_CONN_HANDLE_NONE) {
   24530:	f64f 73ff 	movw	r3, #65535	; 0xffff
   24534:	4298      	cmp	r0, r3
   24536:	d113      	bne.n	24560 <ble_att_svr_write+0x46>
    rc = entry->ha_cb(conn_handle, entry->ha_handle_id,
   24538:	68e7      	ldr	r7, [r4, #12]
   2453a:	8961      	ldrh	r1, [r4, #10]
   2453c:	6923      	ldr	r3, [r4, #16]
   2453e:	9301      	str	r3, [sp, #4]
   24540:	f8cd 8000 	str.w	r8, [sp]
   24544:	464b      	mov	r3, r9
   24546:	2202      	movs	r2, #2
   24548:	4628      	mov	r0, r5
   2454a:	47b8      	blx	r7
    if (rc != 0) {
   2454c:	4603      	mov	r3, r0
   2454e:	b988      	cbnz	r0, 24574 <ble_att_svr_write+0x5a>
    if (out_att_err != NULL) {
   24550:	b116      	cbz	r6, 24558 <ble_att_svr_write+0x3e>
        *out_att_err = att_err;
   24552:	f89d 200f 	ldrb.w	r2, [sp, #15]
   24556:	7032      	strb	r2, [r6, #0]
}
   24558:	4618      	mov	r0, r3
   2455a:	b005      	add	sp, #20
   2455c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        rc = ble_att_svr_check_perms(conn_handle, 0, entry, &att_err);
   24560:	f10d 030f 	add.w	r3, sp, #15
   24564:	460a      	mov	r2, r1
   24566:	2100      	movs	r1, #0
   24568:	f7ff ff1d 	bl	243a6 <ble_att_svr_check_perms>
        if (rc != 0) {
   2456c:	4603      	mov	r3, r0
   2456e:	2800      	cmp	r0, #0
   24570:	d1ee      	bne.n	24550 <ble_att_svr_write+0x36>
   24572:	e7e1      	b.n	24538 <ble_att_svr_write+0x1e>
        att_err = rc;
   24574:	f88d 000f 	strb.w	r0, [sp, #15]
        rc = BLE_HS_EAPP;
   24578:	2309      	movs	r3, #9
        goto done;
   2457a:	e7e9      	b.n	24550 <ble_att_svr_write+0x36>

0002457c <ble_att_svr_pullup_req_base>:
{
   2457c:	b510      	push	{r4, lr}
   2457e:	4614      	mov	r4, r2
    rc = ble_hs_mbuf_pullup_base(om, base_len);
   24580:	f7fb fda6 	bl	200d0 <ble_hs_mbuf_pullup_base>
    if (rc == BLE_HS_ENOMEM) {
   24584:	2806      	cmp	r0, #6
   24586:	d003      	beq.n	24590 <ble_att_svr_pullup_req_base+0x14>
        att_err = 0;
   24588:	2300      	movs	r3, #0
    if (out_att_err != NULL) {
   2458a:	b104      	cbz	r4, 2458e <ble_att_svr_pullup_req_base+0x12>
        *out_att_err = att_err;
   2458c:	7023      	strb	r3, [r4, #0]
}
   2458e:	bd10      	pop	{r4, pc}
        att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   24590:	2311      	movs	r3, #17
   24592:	e7fa      	b.n	2458a <ble_att_svr_pullup_req_base+0xe>

00024594 <ble_att_svr_build_mtu_rsp>:
{
   24594:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   24598:	b083      	sub	sp, #12
   2459a:	4605      	mov	r5, r0
   2459c:	4688      	mov	r8, r1
   2459e:	4617      	mov	r7, r2
   245a0:	461e      	mov	r6, r3
    *att_err = 0; /* Silence unnecessary warning. */
   245a2:	2400      	movs	r4, #0
   245a4:	701c      	strb	r4, [r3, #0]
    ble_hs_lock();
   245a6:	f7f9 ffbd 	bl	1e524 <ble_hs_lock>
    rc = ble_att_conn_chan_find(conn_handle, NULL, &chan);
   245aa:	aa01      	add	r2, sp, #4
   245ac:	4621      	mov	r1, r4
   245ae:	4628      	mov	r0, r5
   245b0:	f7ff fa00 	bl	239b4 <ble_att_conn_chan_find>
    if (rc == 0) {
   245b4:	4605      	mov	r5, r0
   245b6:	b910      	cbnz	r0, 245be <ble_att_svr_build_mtu_rsp+0x2a>
        mtu = chan->my_mtu;
   245b8:	9b01      	ldr	r3, [sp, #4]
   245ba:	f8b3 900a 	ldrh.w	r9, [r3, #10]
    ble_hs_unlock();
   245be:	f7f9 ffb5 	bl	1e52c <ble_hs_unlock>
    if (rc != 0) {
   245c2:	b12d      	cbz	r5, 245d0 <ble_att_svr_build_mtu_rsp+0x3c>
    txom = NULL;
   245c4:	2400      	movs	r4, #0
    *out_txom = txom;
   245c6:	603c      	str	r4, [r7, #0]
}
   245c8:	4628      	mov	r0, r5
   245ca:	b003      	add	sp, #12
   245cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    txom = *rxom;
   245d0:	f8d8 4000 	ldr.w	r4, [r8]
    *rxom = NULL;
   245d4:	2300      	movs	r3, #0
   245d6:	f8c8 3000 	str.w	r3, [r8]
    os_mbuf_adj(txom, OS_MBUF_PKTLEN(txom));
   245da:	8a21      	ldrh	r1, [r4, #16]
   245dc:	4620      	mov	r0, r4
   245de:	f7e9 fae8 	bl	dbb2 <os_mbuf_adj>
    cmd = ble_att_cmd_prepare(BLE_ATT_OP_MTU_RSP, sizeof(*cmd), txom);
   245e2:	4622      	mov	r2, r4
   245e4:	2102      	movs	r1, #2
   245e6:	2003      	movs	r0, #3
   245e8:	f7ff fe30 	bl	2424c <ble_att_cmd_prepare>
    if (cmd == NULL) {
   245ec:	b110      	cbz	r0, 245f4 <ble_att_svr_build_mtu_rsp+0x60>
    cmd->bamc_mtu = htole16(mtu);
   245ee:	f8a0 9000 	strh.w	r9, [r0]
   245f2:	e7e8      	b.n	245c6 <ble_att_svr_build_mtu_rsp+0x32>
        *att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   245f4:	2311      	movs	r3, #17
   245f6:	7033      	strb	r3, [r6, #0]
        rc = BLE_HS_ENOMEM;
   245f8:	2506      	movs	r5, #6
        goto done;
   245fa:	e7e4      	b.n	245c6 <ble_att_svr_build_mtu_rsp+0x32>

000245fc <ble_att_svr_pkt>:
{
   245fc:	b570      	push	{r4, r5, r6, lr}
   245fe:	4605      	mov	r5, r0
   24600:	460c      	mov	r4, r1
   24602:	4616      	mov	r6, r2
    *out_txom = ble_hs_mbuf_l2cap_pkt();
   24604:	f7fb fd46 	bl	20094 <ble_hs_mbuf_l2cap_pkt>
   24608:	6020      	str	r0, [r4, #0]
    if (*out_txom != NULL) {
   2460a:	b108      	cbz	r0, 24610 <ble_att_svr_pkt+0x14>
        return 0;
   2460c:	2000      	movs	r0, #0
}
   2460e:	bd70      	pop	{r4, r5, r6, pc}
    *out_txom = *rxom;
   24610:	682b      	ldr	r3, [r5, #0]
   24612:	6023      	str	r3, [r4, #0]
    *rxom = NULL;
   24614:	2300      	movs	r3, #0
   24616:	602b      	str	r3, [r5, #0]
    *out_att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   24618:	2311      	movs	r3, #17
   2461a:	7033      	strb	r3, [r6, #0]
    return BLE_HS_ENOMEM;
   2461c:	2006      	movs	r0, #6
   2461e:	e7f6      	b.n	2460e <ble_att_svr_pkt+0x12>

00024620 <ble_att_svr_build_write_rsp>:
{
   24620:	b570      	push	{r4, r5, r6, lr}
   24622:	b082      	sub	sp, #8
   24624:	460d      	mov	r5, r1
   24626:	4616      	mov	r6, r2
    rc = ble_att_svr_pkt(rxom, &txom, att_err);
   24628:	a901      	add	r1, sp, #4
   2462a:	f7ff ffe7 	bl	245fc <ble_att_svr_pkt>
    if (rc != 0) {
   2462e:	4604      	mov	r4, r0
   24630:	b120      	cbz	r0, 2463c <ble_att_svr_build_write_rsp+0x1c>
    *out_txom = txom;
   24632:	9b01      	ldr	r3, [sp, #4]
   24634:	602b      	str	r3, [r5, #0]
}
   24636:	4620      	mov	r0, r4
   24638:	b002      	add	sp, #8
   2463a:	bd70      	pop	{r4, r5, r6, pc}
    if (ble_att_cmd_prepare(BLE_ATT_OP_WRITE_RSP, 0, txom) == NULL) {
   2463c:	9a01      	ldr	r2, [sp, #4]
   2463e:	2100      	movs	r1, #0
   24640:	2013      	movs	r0, #19
   24642:	f7ff fe03 	bl	2424c <ble_att_cmd_prepare>
   24646:	2800      	cmp	r0, #0
   24648:	d1f3      	bne.n	24632 <ble_att_svr_build_write_rsp+0x12>
        *att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   2464a:	2311      	movs	r3, #17
   2464c:	7033      	strb	r3, [r6, #0]
        rc = BLE_HS_ENOMEM;
   2464e:	2406      	movs	r4, #6
        goto done;
   24650:	e7ef      	b.n	24632 <ble_att_svr_build_write_rsp+0x12>

00024652 <ble_att_svr_build_indicate_rsp>:
 * @return                      0 on success; nonzero on failure.
 */
static int
ble_att_svr_build_indicate_rsp(struct os_mbuf **rxom,
                               struct os_mbuf **out_txom, uint8_t *out_att_err)
{
   24652:	b570      	push	{r4, r5, r6, lr}
   24654:	b082      	sub	sp, #8
   24656:	460d      	mov	r5, r1
   24658:	4616      	mov	r6, r2

    /* Allocate a new buffer for the response.  An indicate response never
     * reuses the request buffer.  See the note at the top of this file for
     * details.
     */
    rc = ble_att_svr_pkt(rxom, &txom, out_att_err);
   2465a:	a901      	add	r1, sp, #4
   2465c:	f7ff ffce 	bl	245fc <ble_att_svr_pkt>
    if (rc != 0) {
   24660:	4604      	mov	r4, r0
   24662:	b120      	cbz	r0, 2466e <ble_att_svr_build_indicate_rsp+0x1c>
    }

    rc = 0;

done:
    *out_txom = txom;
   24664:	9b01      	ldr	r3, [sp, #4]
   24666:	602b      	str	r3, [r5, #0]
    return rc;
}
   24668:	4620      	mov	r0, r4
   2466a:	b002      	add	sp, #8
   2466c:	bd70      	pop	{r4, r5, r6, pc}
    if (ble_att_cmd_prepare(BLE_ATT_OP_INDICATE_RSP, 0, txom) == NULL) {
   2466e:	9a01      	ldr	r2, [sp, #4]
   24670:	2100      	movs	r1, #0
   24672:	201e      	movs	r0, #30
   24674:	f7ff fdea 	bl	2424c <ble_att_cmd_prepare>
   24678:	2800      	cmp	r0, #0
   2467a:	d1f3      	bne.n	24664 <ble_att_svr_build_indicate_rsp+0x12>
        *out_att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   2467c:	2311      	movs	r3, #17
   2467e:	7033      	strb	r3, [r6, #0]
        rc = BLE_HS_ENOMEM;
   24680:	2406      	movs	r4, #6
        goto done;
   24682:	e7ef      	b.n	24664 <ble_att_svr_build_indicate_rsp+0x12>

00024684 <ble_att_svr_fill_info>:
{
   24684:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24688:	4607      	mov	r7, r0
   2468a:	460e      	mov	r6, r1
   2468c:	4690      	mov	r8, r2
   2468e:	469a      	mov	sl, r3
   24690:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    *format = 0;
   24694:	2500      	movs	r5, #0
   24696:	f889 5000 	strb.w	r5, [r9]
    STAILQ_FOREACH(ha, &ble_att_svr_list, ha_next) {
   2469a:	4b25      	ldr	r3, [pc, #148]	; (24730 <ble_att_svr_fill_info+0xac>)
   2469c:	681c      	ldr	r4, [r3, #0]
   2469e:	e022      	b.n	246e6 <ble_att_svr_fill_info+0x62>
                if (*format == 0) {
   246a0:	f899 3000 	ldrb.w	r3, [r9]
   246a4:	b923      	cbnz	r3, 246b0 <ble_att_svr_fill_info+0x2c>
                    *format = BLE_ATT_FIND_INFO_RSP_FORMAT_16BIT;
   246a6:	2301      	movs	r3, #1
   246a8:	f889 3000 	strb.w	r3, [r9]
                entry_sz = 4;
   246ac:	2104      	movs	r1, #4
   246ae:	e006      	b.n	246be <ble_att_svr_fill_info+0x3a>
                } else if (*format != BLE_ATT_FIND_INFO_RSP_FORMAT_16BIT) {
   246b0:	2b01      	cmp	r3, #1
   246b2:	d132      	bne.n	2471a <ble_att_svr_fill_info+0x96>
                entry_sz = 4;
   246b4:	2104      	movs	r1, #4
   246b6:	e002      	b.n	246be <ble_att_svr_fill_info+0x3a>
                } else if (*format != BLE_ATT_FIND_INFO_RSP_FORMAT_128BIT) {
   246b8:	2b02      	cmp	r3, #2
   246ba:	d130      	bne.n	2471e <ble_att_svr_fill_info+0x9a>
                entry_sz = 18;
   246bc:	2112      	movs	r1, #18
            if (OS_MBUF_PKTLEN(om) + entry_sz > mtu) {
   246be:	f8b8 3010 	ldrh.w	r3, [r8, #16]
   246c2:	440b      	add	r3, r1
   246c4:	4553      	cmp	r3, sl
   246c6:	dc2c      	bgt.n	24722 <ble_att_svr_fill_info+0x9e>
            buf = os_mbuf_extend(om, entry_sz);
   246c8:	4640      	mov	r0, r8
   246ca:	f7e9 fc2a 	bl	df22 <os_mbuf_extend>
            if (buf == NULL) {
   246ce:	4683      	mov	fp, r0
   246d0:	b348      	cbz	r0, 24726 <ble_att_svr_fill_info+0xa2>
            put_le16(buf + 0, ha->ha_handle_id);
   246d2:	8961      	ldrh	r1, [r4, #10]
   246d4:	f005 f83a 	bl	2974c <put_le16>
            ble_uuid_flat(ha->ha_uuid, buf + 2);
   246d8:	f10b 0102 	add.w	r1, fp, #2
   246dc:	6860      	ldr	r0, [r4, #4]
   246de:	f7fe ffbf 	bl	23660 <ble_uuid_flat>
            num_entries++;
   246e2:	3501      	adds	r5, #1
    STAILQ_FOREACH(ha, &ble_att_svr_list, ha_next) {
   246e4:	6824      	ldr	r4, [r4, #0]
   246e6:	b18c      	cbz	r4, 2470c <ble_att_svr_fill_info+0x88>
        if (ha->ha_handle_id > end_handle) {
   246e8:	8963      	ldrh	r3, [r4, #10]
   246ea:	42b3      	cmp	r3, r6
   246ec:	d813      	bhi.n	24716 <ble_att_svr_fill_info+0x92>
        if (ha->ha_handle_id >= start_handle) {
   246ee:	42bb      	cmp	r3, r7
   246f0:	d3f8      	bcc.n	246e4 <ble_att_svr_fill_info+0x60>
            if (ha->ha_uuid->type == BLE_UUID_TYPE_16) {
   246f2:	6863      	ldr	r3, [r4, #4]
   246f4:	781b      	ldrb	r3, [r3, #0]
   246f6:	2b10      	cmp	r3, #16
   246f8:	d0d2      	beq.n	246a0 <ble_att_svr_fill_info+0x1c>
                if (*format == 0) {
   246fa:	f899 3000 	ldrb.w	r3, [r9]
   246fe:	2b00      	cmp	r3, #0
   24700:	d1da      	bne.n	246b8 <ble_att_svr_fill_info+0x34>
                    *format = BLE_ATT_FIND_INFO_RSP_FORMAT_128BIT;
   24702:	2302      	movs	r3, #2
   24704:	f889 3000 	strb.w	r3, [r9]
                entry_sz = 18;
   24708:	2112      	movs	r1, #18
   2470a:	e7d8      	b.n	246be <ble_att_svr_fill_info+0x3a>
    rc = 0;
   2470c:	2000      	movs	r0, #0
    if (rc == 0 && num_entries == 0) {
   2470e:	b900      	cbnz	r0, 24712 <ble_att_svr_fill_info+0x8e>
   24710:	b15d      	cbz	r5, 2472a <ble_att_svr_fill_info+0xa6>
}
   24712:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            rc = 0;
   24716:	2000      	movs	r0, #0
   24718:	e7f9      	b.n	2470e <ble_att_svr_fill_info+0x8a>
                    rc = 0;
   2471a:	2000      	movs	r0, #0
   2471c:	e7f7      	b.n	2470e <ble_att_svr_fill_info+0x8a>
                    rc = 0;
   2471e:	2000      	movs	r0, #0
   24720:	e7f5      	b.n	2470e <ble_att_svr_fill_info+0x8a>
                rc = 0;
   24722:	2000      	movs	r0, #0
   24724:	e7f3      	b.n	2470e <ble_att_svr_fill_info+0x8a>
                rc = BLE_HS_ENOMEM;
   24726:	2006      	movs	r0, #6
   24728:	e7f1      	b.n	2470e <ble_att_svr_fill_info+0x8a>
        return BLE_HS_ENOENT;
   2472a:	2005      	movs	r0, #5
   2472c:	e7f1      	b.n	24712 <ble_att_svr_fill_info+0x8e>
   2472e:	bf00      	nop
   24730:	200032b8 	.word	0x200032b8

00024734 <ble_att_svr_build_find_info_rsp>:
{
   24734:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24738:	b082      	sub	sp, #8
   2473a:	4680      	mov	r8, r0
   2473c:	460d      	mov	r5, r1
   2473e:	4616      	mov	r6, r2
    txom = *rxom;
   24740:	681c      	ldr	r4, [r3, #0]
    *rxom = NULL;
   24742:	2200      	movs	r2, #0
   24744:	601a      	str	r2, [r3, #0]
    os_mbuf_adj(txom, OS_MBUF_PKTLEN(txom));
   24746:	8a21      	ldrh	r1, [r4, #16]
   24748:	4620      	mov	r0, r4
   2474a:	f7e9 fa32 	bl	dbb2 <os_mbuf_adj>
    rsp = ble_att_cmd_prepare(BLE_ATT_OP_FIND_INFO_RSP, sizeof(*rsp), txom);
   2474e:	4622      	mov	r2, r4
   24750:	2101      	movs	r1, #1
   24752:	2005      	movs	r0, #5
   24754:	f7ff fd7a 	bl	2424c <ble_att_cmd_prepare>
    if (rsp == NULL) {
   24758:	b190      	cbz	r0, 24780 <ble_att_svr_build_find_info_rsp+0x4c>
   2475a:	4607      	mov	r7, r0
    mtu = ble_att_mtu(conn_handle);
   2475c:	4640      	mov	r0, r8
   2475e:	f7ff fa4f 	bl	23c00 <ble_att_mtu>
    rc = ble_att_svr_fill_info(start_handle, end_handle, txom, mtu,
   24762:	9700      	str	r7, [sp, #0]
   24764:	4603      	mov	r3, r0
   24766:	4622      	mov	r2, r4
   24768:	4631      	mov	r1, r6
   2476a:	4628      	mov	r0, r5
   2476c:	f7ff ff8a 	bl	24684 <ble_att_svr_fill_info>
    if (rc != 0) {
   24770:	4603      	mov	r3, r0
   24772:	b950      	cbnz	r0, 2478a <ble_att_svr_build_find_info_rsp+0x56>
    *out_txom = txom;
   24774:	9a08      	ldr	r2, [sp, #32]
   24776:	6014      	str	r4, [r2, #0]
}
   24778:	4618      	mov	r0, r3
   2477a:	b002      	add	sp, #8
   2477c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        *att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   24780:	2311      	movs	r3, #17
   24782:	9a09      	ldr	r2, [sp, #36]	; 0x24
   24784:	7013      	strb	r3, [r2, #0]
        rc = BLE_HS_ENOMEM;
   24786:	2306      	movs	r3, #6
        goto done;
   24788:	e7f4      	b.n	24774 <ble_att_svr_build_find_info_rsp+0x40>
        *att_err = BLE_ATT_ERR_ATTR_NOT_FOUND;
   2478a:	230a      	movs	r3, #10
   2478c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2478e:	7013      	strb	r3, [r2, #0]
        rc = BLE_HS_ENOENT;
   24790:	2305      	movs	r3, #5
        goto done;
   24792:	e7ef      	b.n	24774 <ble_att_svr_build_find_info_rsp+0x40>

00024794 <ble_att_svr_read_group_type_entry_write>:
{
   24794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24796:	9d06      	ldr	r5, [sp, #24]
    if (service_uuid->type == BLE_UUID_TYPE_16) {
   24798:	782c      	ldrb	r4, [r5, #0]
   2479a:	2c10      	cmp	r4, #16
   2479c:	d018      	beq.n	247d0 <ble_att_svr_read_group_type_entry_write+0x3c>
        len = BLE_ATT_READ_GROUP_TYPE_ADATA_SZ_128;
   2479e:	2614      	movs	r6, #20
    if (OS_MBUF_PKTLEN(om) + len > mtu) {
   247a0:	8a04      	ldrh	r4, [r0, #16]
   247a2:	4434      	add	r4, r6
   247a4:	428c      	cmp	r4, r1
   247a6:	dc15      	bgt.n	247d4 <ble_att_svr_read_group_type_entry_write+0x40>
   247a8:	461c      	mov	r4, r3
   247aa:	4617      	mov	r7, r2
    buf = os_mbuf_extend(om, len);
   247ac:	4631      	mov	r1, r6
   247ae:	f7e9 fbb8 	bl	df22 <os_mbuf_extend>
    if (buf == NULL) {
   247b2:	4606      	mov	r6, r0
   247b4:	b180      	cbz	r0, 247d8 <ble_att_svr_read_group_type_entry_write+0x44>
    put_le16(buf + 0, start_group_handle);
   247b6:	4639      	mov	r1, r7
   247b8:	f004 ffc8 	bl	2974c <put_le16>
    put_le16(buf + 2, end_group_handle);
   247bc:	4621      	mov	r1, r4
   247be:	1cb0      	adds	r0, r6, #2
   247c0:	f004 ffc4 	bl	2974c <put_le16>
    ble_uuid_flat(service_uuid, buf + 4);
   247c4:	1d31      	adds	r1, r6, #4
   247c6:	4628      	mov	r0, r5
   247c8:	f7fe ff4a 	bl	23660 <ble_uuid_flat>
    return 0;
   247cc:	2000      	movs	r0, #0
   247ce:	e002      	b.n	247d6 <ble_att_svr_read_group_type_entry_write+0x42>
        len = BLE_ATT_READ_GROUP_TYPE_ADATA_SZ_16;
   247d0:	2606      	movs	r6, #6
   247d2:	e7e5      	b.n	247a0 <ble_att_svr_read_group_type_entry_write+0xc>
        return BLE_HS_EMSGSIZE;
   247d4:	2004      	movs	r0, #4
}
   247d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return BLE_HS_ENOMEM;
   247d8:	2006      	movs	r0, #6
   247da:	e7fc      	b.n	247d6 <ble_att_svr_read_group_type_entry_write+0x42>

000247dc <ble_att_svr_is_valid_find_group_type>:
{
   247dc:	b508      	push	{r3, lr}
    uuid16 = ble_uuid_u16(uuid);
   247de:	f7fe ff02 	bl	235e6 <ble_uuid_u16>
    return uuid16 == BLE_ATT_UUID_PRIMARY_SERVICE ||
   247e2:	f5a0 5320 	sub.w	r3, r0, #10240	; 0x2800
   247e6:	b29b      	uxth	r3, r3
           uuid16 == BLE_ATT_UUID_SECONDARY_SERVICE ||
   247e8:	2b01      	cmp	r3, #1
   247ea:	d907      	bls.n	247fc <ble_att_svr_is_valid_find_group_type+0x20>
   247ec:	f642 0303 	movw	r3, #10243	; 0x2803
   247f0:	4298      	cmp	r0, r3
   247f2:	d001      	beq.n	247f8 <ble_att_svr_is_valid_find_group_type+0x1c>
   247f4:	2000      	movs	r0, #0
}
   247f6:	bd08      	pop	{r3, pc}
           uuid16 == BLE_ATT_UUID_SECONDARY_SERVICE ||
   247f8:	2001      	movs	r0, #1
   247fa:	e7fc      	b.n	247f6 <ble_att_svr_is_valid_find_group_type+0x1a>
   247fc:	2001      	movs	r0, #1
   247fe:	e7fa      	b.n	247f6 <ble_att_svr_is_valid_find_group_type+0x1a>

00024800 <ble_att_svr_is_valid_group_end>:
    if (uuid_group->type != BLE_UUID_TYPE_16) {
   24800:	7803      	ldrb	r3, [r0, #0]
   24802:	2b10      	cmp	r3, #16
   24804:	d001      	beq.n	2480a <ble_att_svr_is_valid_group_end+0xa>
        return 1;
   24806:	2001      	movs	r0, #1
   24808:	4770      	bx	lr
    if (uuid->type != BLE_UUID_TYPE_16) {
   2480a:	780b      	ldrb	r3, [r1, #0]
   2480c:	2b10      	cmp	r3, #16
   2480e:	d001      	beq.n	24814 <ble_att_svr_is_valid_group_end+0x14>
        return 0;
   24810:	2000      	movs	r0, #0
}
   24812:	4770      	bx	lr
{
   24814:	b510      	push	{r4, lr}
   24816:	460c      	mov	r4, r1
    switch (ble_uuid_u16(uuid_group)) {
   24818:	f7fe fee5 	bl	235e6 <ble_uuid_u16>
   2481c:	f5b0 5f20 	cmp.w	r0, #10240	; 0x2800
   24820:	d316      	bcc.n	24850 <ble_att_svr_is_valid_group_end+0x50>
   24822:	f642 0301 	movw	r3, #10241	; 0x2801
   24826:	4298      	cmp	r0, r3
   24828:	d907      	bls.n	2483a <ble_att_svr_is_valid_group_end+0x3a>
   2482a:	f642 0303 	movw	r3, #10243	; 0x2803
   2482e:	4298      	cmp	r0, r3
   24830:	d10e      	bne.n	24850 <ble_att_svr_is_valid_group_end+0x50>
        return ble_att_svr_is_valid_find_group_type(uuid);
   24832:	4620      	mov	r0, r4
   24834:	f7ff ffd2 	bl	247dc <ble_att_svr_is_valid_find_group_type>
   24838:	e009      	b.n	2484e <ble_att_svr_is_valid_group_end+0x4e>
        uuid16 = ble_uuid_u16(uuid);
   2483a:	4620      	mov	r0, r4
   2483c:	f7fe fed3 	bl	235e6 <ble_uuid_u16>
        return uuid16 == BLE_ATT_UUID_PRIMARY_SERVICE ||
   24840:	f5a0 5020 	sub.w	r0, r0, #10240	; 0x2800
   24844:	b280      	uxth	r0, r0
   24846:	2801      	cmp	r0, #1
   24848:	bf8c      	ite	hi
   2484a:	2000      	movhi	r0, #0
   2484c:	2001      	movls	r0, #1
}
   2484e:	bd10      	pop	{r4, pc}
        return 1;
   24850:	2001      	movs	r0, #1
   24852:	e7fc      	b.n	2484e <ble_att_svr_is_valid_group_end+0x4e>

00024854 <ble_att_svr_is_valid_read_group_type>:
{
   24854:	b508      	push	{r3, lr}
    uuid16 = ble_uuid_u16(uuid);
   24856:	f7fe fec6 	bl	235e6 <ble_uuid_u16>
    return uuid16 == BLE_ATT_UUID_PRIMARY_SERVICE ||
   2485a:	f5a0 5020 	sub.w	r0, r0, #10240	; 0x2800
   2485e:	b280      	uxth	r0, r0
}
   24860:	2801      	cmp	r0, #1
   24862:	bf8c      	ite	hi
   24864:	2000      	movhi	r0, #0
   24866:	2001      	movls	r0, #1
   24868:	bd08      	pop	{r3, pc}

0002486a <ble_att_svr_read_flat>:
{
   2486a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2486e:	b082      	sub	sp, #8
   24870:	4605      	mov	r5, r0
   24872:	460e      	mov	r6, r1
   24874:	4617      	mov	r7, r2
   24876:	4698      	mov	r8, r3
    om = ble_hs_mbuf_l2cap_pkt();
   24878:	f7fb fc0c 	bl	20094 <ble_hs_mbuf_l2cap_pkt>
    if (om == NULL) {
   2487c:	4604      	mov	r4, r0
   2487e:	b1d0      	cbz	r0, 248b6 <ble_att_svr_read_flat+0x4c>
    rc = ble_att_svr_read(conn_handle, entry, offset, om, out_att_err);
   24880:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   24882:	9300      	str	r3, [sp, #0]
   24884:	4603      	mov	r3, r0
   24886:	463a      	mov	r2, r7
   24888:	4631      	mov	r1, r6
   2488a:	4628      	mov	r0, r5
   2488c:	f7ff fe16 	bl	244bc <ble_att_svr_read>
    if (rc != 0) {
   24890:	4605      	mov	r5, r0
   24892:	b988      	cbnz	r0, 248b8 <ble_att_svr_read_flat+0x4e>
    len = OS_MBUF_PKTLEN(om);
   24894:	8a26      	ldrh	r6, [r4, #16]
    if (len > max_len) {
   24896:	4546      	cmp	r6, r8
   24898:	d808      	bhi.n	248ac <ble_att_svr_read_flat+0x42>
    rc = os_mbuf_copydata(om, 0, len, dst);
   2489a:	9b08      	ldr	r3, [sp, #32]
   2489c:	4632      	mov	r2, r6
   2489e:	2100      	movs	r1, #0
   248a0:	4620      	mov	r0, r4
   248a2:	f7e9 f959 	bl	db58 <os_mbuf_copydata>
    *out_len = len;
   248a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   248a8:	801e      	strh	r6, [r3, #0]
   248aa:	e005      	b.n	248b8 <ble_att_svr_read_flat+0x4e>
        *out_att_err = BLE_ATT_ERR_UNLIKELY;
   248ac:	230e      	movs	r3, #14
   248ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   248b0:	7013      	strb	r3, [r2, #0]
        rc = BLE_HS_EMSGSIZE;
   248b2:	2504      	movs	r5, #4
        goto done;
   248b4:	e000      	b.n	248b8 <ble_att_svr_read_flat+0x4e>
        rc = BLE_HS_ENOMEM;
   248b6:	2506      	movs	r5, #6
    os_mbuf_free_chain(om);
   248b8:	4620      	mov	r0, r4
   248ba:	f7e9 f8ac 	bl	da16 <os_mbuf_free_chain>
}
   248be:	4628      	mov	r0, r5
   248c0:	b002      	add	sp, #8
   248c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000248c6 <ble_att_svr_fill_type_value_entry>:
{
   248c6:	b530      	push	{r4, r5, lr}
   248c8:	b083      	sub	sp, #12
    rsp_sz = OS_MBUF_PKTHDR(om)->omp_len + 4;
   248ca:	8a04      	ldrh	r4, [r0, #16]
   248cc:	3404      	adds	r4, #4
    if (rsp_sz > mtu) {
   248ce:	429c      	cmp	r4, r3
   248d0:	dd02      	ble.n	248d8 <ble_att_svr_fill_type_value_entry+0x12>
        return 0;
   248d2:	2000      	movs	r0, #0
}
   248d4:	b003      	add	sp, #12
   248d6:	bd30      	pop	{r4, r5, pc}
   248d8:	4615      	mov	r5, r2
   248da:	4604      	mov	r4, r0
    put_le16(&u16, first);
   248dc:	f10d 0006 	add.w	r0, sp, #6
   248e0:	f004 ff34 	bl	2974c <put_le16>
    rc = os_mbuf_append(om, &u16, 2);
   248e4:	2202      	movs	r2, #2
   248e6:	f10d 0106 	add.w	r1, sp, #6
   248ea:	4620      	mov	r0, r4
   248ec:	f7e9 f8a5 	bl	da3a <os_mbuf_append>
    if (rc != 0) {
   248f0:	b968      	cbnz	r0, 2490e <ble_att_svr_fill_type_value_entry+0x48>
    put_le16(&u16, last);
   248f2:	4629      	mov	r1, r5
   248f4:	f10d 0006 	add.w	r0, sp, #6
   248f8:	f004 ff28 	bl	2974c <put_le16>
    rc = os_mbuf_append(om, &u16, 2);
   248fc:	2202      	movs	r2, #2
   248fe:	f10d 0106 	add.w	r1, sp, #6
   24902:	4620      	mov	r0, r4
   24904:	f7e9 f899 	bl	da3a <os_mbuf_append>
    if (rc != 0) {
   24908:	b930      	cbnz	r0, 24918 <ble_att_svr_fill_type_value_entry+0x52>
    return BLE_HS_EAGAIN;
   2490a:	2001      	movs	r0, #1
   2490c:	e7e2      	b.n	248d4 <ble_att_svr_fill_type_value_entry+0xe>
        *out_att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   2490e:	2311      	movs	r3, #17
   24910:	9a06      	ldr	r2, [sp, #24]
   24912:	7013      	strb	r3, [r2, #0]
        return BLE_HS_ENOMEM;
   24914:	2006      	movs	r0, #6
   24916:	e7dd      	b.n	248d4 <ble_att_svr_fill_type_value_entry+0xe>
        *out_att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   24918:	2311      	movs	r3, #17
   2491a:	9a06      	ldr	r2, [sp, #24]
   2491c:	7013      	strb	r3, [r2, #0]
        return BLE_HS_ENOMEM;
   2491e:	2006      	movs	r0, #6
   24920:	e7d8      	b.n	248d4 <ble_att_svr_fill_type_value_entry+0xe>
	...

00024924 <ble_att_svr_fill_type_value>:
{
   24924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24928:	b08d      	sub	sp, #52	; 0x34
   2492a:	4683      	mov	fp, r0
   2492c:	460e      	mov	r6, r1
   2492e:	4690      	mov	r8, r2
   24930:	9305      	str	r3, [sp, #20]
   24932:	f8bd a060 	ldrh.w	sl, [sp, #96]	; 0x60
   24936:	f8dd 9064 	ldr.w	r9, [sp, #100]	; 0x64
    STAILQ_FOREACH(ha, &ble_att_svr_list, ha_next) {
   2493a:	4b33      	ldr	r3, [pc, #204]	; (24a08 <ble_att_svr_fill_type_value+0xe4>)
   2493c:	681c      	ldr	r4, [r3, #0]
    prev = 0;
   2493e:	2700      	movs	r7, #0
    first = 0;
   24940:	463d      	mov	r5, r7
    STAILQ_FOREACH(ha, &ble_att_svr_list, ha_next) {
   24942:	e015      	b.n	24970 <ble_att_svr_fill_type_value+0x4c>
            rc = ble_att_svr_fill_type_value_entry(txom, first, prev, mtu,
   24944:	f8cd 9000 	str.w	r9, [sp]
   24948:	4653      	mov	r3, sl
   2494a:	463a      	mov	r2, r7
   2494c:	4629      	mov	r1, r5
   2494e:	9817      	ldr	r0, [sp, #92]	; 0x5c
   24950:	f7ff ffb9 	bl	248c6 <ble_att_svr_fill_type_value_entry>
   24954:	4603      	mov	r3, r0
            if (rc != BLE_HS_EAGAIN) {
   24956:	2801      	cmp	r0, #1
   24958:	d13a      	bne.n	249d0 <ble_att_svr_fill_type_value+0xac>
            if (ha->ha_handle_id > end_handle) {
   2495a:	8963      	ldrh	r3, [r4, #10]
   2495c:	4543      	cmp	r3, r8
   2495e:	d833      	bhi.n	249c8 <ble_att_svr_fill_type_value+0xa4>
            prev = 0;
   24960:	2700      	movs	r7, #0
            first = 0;
   24962:	463d      	mov	r5, r7
        if (ble_uuid_cmp(ha->ha_uuid, &attr_type.u) == 0) {
   24964:	a905      	add	r1, sp, #20
   24966:	6860      	ldr	r0, [r4, #4]
   24968:	f7fe fe1f 	bl	235aa <ble_uuid_cmp>
   2496c:	b188      	cbz	r0, 24992 <ble_att_svr_fill_type_value+0x6e>
    STAILQ_FOREACH(ha, &ble_att_svr_list, ha_next) {
   2496e:	6824      	ldr	r4, [r4, #0]
   24970:	b364      	cbz	r4, 249cc <ble_att_svr_fill_type_value+0xa8>
        if (ha->ha_handle_id < start_handle) {
   24972:	8963      	ldrh	r3, [r4, #10]
   24974:	42b3      	cmp	r3, r6
   24976:	d3fa      	bcc.n	2496e <ble_att_svr_fill_type_value+0x4a>
        if (!first && ha->ha_handle_id > end_handle) {
   24978:	b90d      	cbnz	r5, 2497e <ble_att_svr_fill_type_value+0x5a>
   2497a:	4543      	cmp	r3, r8
   2497c:	d826      	bhi.n	249cc <ble_att_svr_fill_type_value+0xa8>
        if (first) {
   2497e:	2d00      	cmp	r5, #0
   24980:	d0f0      	beq.n	24964 <ble_att_svr_fill_type_value+0x40>
            if (!ble_att_svr_is_valid_group_end(&attr_type.u, ha->ha_uuid)) {
   24982:	6861      	ldr	r1, [r4, #4]
   24984:	a805      	add	r0, sp, #20
   24986:	f7ff ff3b 	bl	24800 <ble_att_svr_is_valid_group_end>
   2498a:	2800      	cmp	r0, #0
   2498c:	d1da      	bne.n	24944 <ble_att_svr_fill_type_value+0x20>
                prev = ha->ha_handle_id;
   2498e:	8967      	ldrh	r7, [r4, #10]
                continue;
   24990:	e7ed      	b.n	2496e <ble_att_svr_fill_type_value+0x4a>
            rc = ble_att_svr_read_flat(conn_handle, ha, 0, sizeof buf, buf,
   24992:	f8cd 9008 	str.w	r9, [sp, #8]
   24996:	f10d 031e 	add.w	r3, sp, #30
   2499a:	9301      	str	r3, [sp, #4]
   2499c:	ab08      	add	r3, sp, #32
   2499e:	9300      	str	r3, [sp, #0]
   249a0:	2310      	movs	r3, #16
   249a2:	2200      	movs	r2, #0
   249a4:	4621      	mov	r1, r4
   249a6:	4658      	mov	r0, fp
   249a8:	f7ff ff5f 	bl	2486a <ble_att_svr_read_flat>
            if (rc != 0) {
   249ac:	4603      	mov	r3, r0
   249ae:	b978      	cbnz	r0, 249d0 <ble_att_svr_fill_type_value+0xac>
            rc = os_mbuf_cmpf(rxom, sizeof(struct ble_att_find_type_value_req),
   249b0:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   249b4:	aa08      	add	r2, sp, #32
   249b6:	2106      	movs	r1, #6
   249b8:	9816      	ldr	r0, [sp, #88]	; 0x58
   249ba:	f7e9 f94c 	bl	dc56 <os_mbuf_cmpf>
            if (rc == 0) {
   249be:	2800      	cmp	r0, #0
   249c0:	d1d5      	bne.n	2496e <ble_att_svr_fill_type_value+0x4a>
                first = ha->ha_handle_id;
   249c2:	8965      	ldrh	r5, [r4, #10]
                prev = ha->ha_handle_id;
   249c4:	462f      	mov	r7, r5
   249c6:	e7d2      	b.n	2496e <ble_att_svr_fill_type_value+0x4a>
            prev = 0;
   249c8:	2700      	movs	r7, #0
            first = 0;
   249ca:	463d      	mov	r5, r7
    if (first) {
   249cc:	b94d      	cbnz	r5, 249e2 <ble_att_svr_fill_type_value+0xbe>
        rc = 0;
   249ce:	2300      	movs	r3, #0
    any_entries = OS_MBUF_PKTHDR(txom)->omp_len >
   249d0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   249d2:	8a12      	ldrh	r2, [r2, #16]
    if (rc == 0 && !any_entries) {
   249d4:	b90b      	cbnz	r3, 249da <ble_att_svr_fill_type_value+0xb6>
   249d6:	2a01      	cmp	r2, #1
   249d8:	d910      	bls.n	249fc <ble_att_svr_fill_type_value+0xd8>
}
   249da:	4618      	mov	r0, r3
   249dc:	b00d      	add	sp, #52	; 0x34
   249de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rc = ble_att_svr_fill_type_value_entry(txom, first, prev, mtu,
   249e2:	f8cd 9000 	str.w	r9, [sp]
   249e6:	4653      	mov	r3, sl
   249e8:	463a      	mov	r2, r7
   249ea:	4629      	mov	r1, r5
   249ec:	9817      	ldr	r0, [sp, #92]	; 0x5c
   249ee:	f7ff ff6a 	bl	248c6 <ble_att_svr_fill_type_value_entry>
   249f2:	4603      	mov	r3, r0
        if (rc == BLE_HS_EAGAIN) {
   249f4:	2801      	cmp	r0, #1
   249f6:	d1eb      	bne.n	249d0 <ble_att_svr_fill_type_value+0xac>
            rc = 0;
   249f8:	2300      	movs	r3, #0
   249fa:	e7e9      	b.n	249d0 <ble_att_svr_fill_type_value+0xac>
        *out_att_err = BLE_ATT_ERR_ATTR_NOT_FOUND;
   249fc:	230a      	movs	r3, #10
   249fe:	f889 3000 	strb.w	r3, [r9]
        return BLE_HS_ENOENT;
   24a02:	2305      	movs	r3, #5
   24a04:	e7e9      	b.n	249da <ble_att_svr_fill_type_value+0xb6>
   24a06:	bf00      	nop
   24a08:	200032b8 	.word	0x200032b8

00024a0c <ble_att_svr_build_find_type_value_rsp>:
{
   24a0c:	b570      	push	{r4, r5, r6, lr}
   24a0e:	b088      	sub	sp, #32
   24a10:	4604      	mov	r4, r0
   24a12:	460d      	mov	r5, r1
   24a14:	4616      	mov	r6, r2
   24a16:	9305      	str	r3, [sp, #20]
    rc = ble_att_svr_pkt(rxom, &txom, out_att_err);
   24a18:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   24a1a:	a907      	add	r1, sp, #28
   24a1c:	980c      	ldr	r0, [sp, #48]	; 0x30
   24a1e:	f7ff fded 	bl	245fc <ble_att_svr_pkt>
    if (rc != 0) {
   24a22:	4603      	mov	r3, r0
   24a24:	b128      	cbz	r0, 24a32 <ble_att_svr_build_find_type_value_rsp+0x26>
    *out_txom = txom;
   24a26:	9907      	ldr	r1, [sp, #28]
   24a28:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   24a2a:	6011      	str	r1, [r2, #0]
}
   24a2c:	4618      	mov	r0, r3
   24a2e:	b008      	add	sp, #32
   24a30:	bd70      	pop	{r4, r5, r6, pc}
    buf = ble_att_cmd_prepare(BLE_ATT_OP_FIND_TYPE_VALUE_RSP, 0, txom);
   24a32:	9a07      	ldr	r2, [sp, #28]
   24a34:	2100      	movs	r1, #0
   24a36:	2007      	movs	r0, #7
   24a38:	f7ff fc08 	bl	2424c <ble_att_cmd_prepare>
    if (buf == NULL) {
   24a3c:	b190      	cbz	r0, 24a64 <ble_att_svr_build_find_type_value_rsp+0x58>
    mtu = ble_att_mtu(conn_handle);
   24a3e:	4620      	mov	r0, r4
   24a40:	f7ff f8de 	bl	23c00 <ble_att_mtu>
    rc = ble_att_svr_fill_type_value(conn_handle, start_handle, end_handle,
   24a44:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   24a46:	681b      	ldr	r3, [r3, #0]
   24a48:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   24a4a:	9203      	str	r2, [sp, #12]
   24a4c:	9002      	str	r0, [sp, #8]
   24a4e:	9a07      	ldr	r2, [sp, #28]
   24a50:	9201      	str	r2, [sp, #4]
   24a52:	9300      	str	r3, [sp, #0]
   24a54:	9b05      	ldr	r3, [sp, #20]
   24a56:	4632      	mov	r2, r6
   24a58:	4629      	mov	r1, r5
   24a5a:	4620      	mov	r0, r4
   24a5c:	f7ff ff62 	bl	24924 <ble_att_svr_fill_type_value>
   24a60:	4603      	mov	r3, r0
   24a62:	e7e0      	b.n	24a26 <ble_att_svr_build_find_type_value_rsp+0x1a>
        *out_att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   24a64:	2311      	movs	r3, #17
   24a66:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   24a68:	7013      	strb	r3, [r2, #0]
        rc = BLE_HS_ENOMEM;
   24a6a:	2306      	movs	r3, #6
        goto done;
   24a6c:	e7db      	b.n	24a26 <ble_att_svr_build_find_type_value_rsp+0x1a>

00024a6e <ble_att_svr_service_uuid>:
{
   24a6e:	b510      	push	{r4, lr}
   24a70:	b08a      	sub	sp, #40	; 0x28
   24a72:	460c      	mov	r4, r1
    rc = ble_att_svr_read_flat(BLE_HS_CONN_HANDLE_NONE, entry, 0, sizeof(val), val,
   24a74:	9202      	str	r2, [sp, #8]
   24a76:	f10d 0316 	add.w	r3, sp, #22
   24a7a:	9301      	str	r3, [sp, #4]
   24a7c:	ab06      	add	r3, sp, #24
   24a7e:	9300      	str	r3, [sp, #0]
   24a80:	2310      	movs	r3, #16
   24a82:	2200      	movs	r2, #0
   24a84:	4601      	mov	r1, r0
   24a86:	f64f 70ff 	movw	r0, #65535	; 0xffff
   24a8a:	f7ff feee 	bl	2486a <ble_att_svr_read_flat>
    if (rc != 0) {
   24a8e:	4603      	mov	r3, r0
   24a90:	b110      	cbz	r0, 24a98 <ble_att_svr_service_uuid+0x2a>
}
   24a92:	4618      	mov	r0, r3
   24a94:	b00a      	add	sp, #40	; 0x28
   24a96:	bd10      	pop	{r4, pc}
    rc = ble_uuid_init_from_buf(uuid, val, attr_len);
   24a98:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   24a9c:	a906      	add	r1, sp, #24
   24a9e:	4620      	mov	r0, r4
   24aa0:	f7fe fd5a 	bl	23558 <ble_uuid_init_from_buf>
   24aa4:	4603      	mov	r3, r0
    return rc;
   24aa6:	e7f4      	b.n	24a92 <ble_att_svr_service_uuid+0x24>

00024aa8 <ble_att_svr_build_read_group_type_rsp>:
{
   24aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24aac:	b08b      	sub	sp, #44	; 0x2c
   24aae:	460e      	mov	r6, r1
   24ab0:	4617      	mov	r7, r2
   24ab2:	9302      	str	r3, [sp, #8]
   24ab4:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
   24ab8:	f8dd a058 	ldr.w	sl, [sp, #88]	; 0x58
    *att_err = 0;
   24abc:	f04f 0b00 	mov.w	fp, #0
   24ac0:	f88a b000 	strb.w	fp, [sl]
    *err_handle = start_handle;
   24ac4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   24ac6:	8019      	strh	r1, [r3, #0]
    mtu = ble_att_mtu(conn_handle);
   24ac8:	f7ff f89a 	bl	23c00 <ble_att_mtu>
   24acc:	9003      	str	r0, [sp, #12]
    txom = *rxom;
   24ace:	f8d9 8000 	ldr.w	r8, [r9]
    *rxom = NULL;
   24ad2:	f8c9 b000 	str.w	fp, [r9]
    os_mbuf_adj(txom, OS_MBUF_PKTLEN(txom));
   24ad6:	f8b8 1010 	ldrh.w	r1, [r8, #16]
   24ada:	4640      	mov	r0, r8
   24adc:	f7e9 f869 	bl	dbb2 <os_mbuf_adj>
    rsp = ble_att_cmd_prepare(BLE_ATT_OP_READ_GROUP_TYPE_RSP, sizeof(*rsp),
   24ae0:	4642      	mov	r2, r8
   24ae2:	2101      	movs	r1, #1
   24ae4:	2011      	movs	r0, #17
   24ae6:	f7ff fbb1 	bl	2424c <ble_att_cmd_prepare>
    if (rsp == NULL) {
   24aea:	b130      	cbz	r0, 24afa <ble_att_svr_build_read_group_type_rsp+0x52>
   24aec:	4683      	mov	fp, r0
    rsp->bagp_length = 0;
   24aee:	2500      	movs	r5, #0
   24af0:	7005      	strb	r5, [r0, #0]
    STAILQ_FOREACH(entry, &ble_att_svr_list, ha_next) {
   24af2:	4b4d      	ldr	r3, [pc, #308]	; (24c28 <ble_att_svr_build_read_group_type_rsp+0x180>)
   24af4:	681c      	ldr	r4, [r3, #0]
    end_group_handle = 0;
   24af6:	46a9      	mov	r9, r5
    STAILQ_FOREACH(entry, &ble_att_svr_list, ha_next) {
   24af8:	e042      	b.n	24b80 <ble_att_svr_build_read_group_type_rsp+0xd8>
        *att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   24afa:	2311      	movs	r3, #17
   24afc:	f88a 3000 	strb.w	r3, [sl]
        rc = BLE_HS_ENOMEM;
   24b00:	2306      	movs	r3, #6
    end_group_handle = 0;
   24b02:	f04f 0900 	mov.w	r9, #0
        goto done;
   24b06:	e05c      	b.n	24bc2 <ble_att_svr_build_read_group_type_rsp+0x11a>
            if (!ble_att_svr_is_valid_read_group_type(entry->ha_uuid)) {
   24b08:	6860      	ldr	r0, [r4, #4]
   24b0a:	f7ff fea3 	bl	24854 <ble_att_svr_is_valid_read_group_type>
   24b0e:	b910      	cbnz	r0, 24b16 <ble_att_svr_build_read_group_type_rsp+0x6e>
                end_group_handle = entry->ha_handle_id;
   24b10:	f8b4 900a 	ldrh.w	r9, [r4, #10]
   24b14:	e03d      	b.n	24b92 <ble_att_svr_build_read_group_type_rsp+0xea>
                rc = ble_att_svr_read_group_type_entry_write(
   24b16:	ab05      	add	r3, sp, #20
   24b18:	9300      	str	r3, [sp, #0]
   24b1a:	464b      	mov	r3, r9
   24b1c:	462a      	mov	r2, r5
   24b1e:	9903      	ldr	r1, [sp, #12]
   24b20:	4640      	mov	r0, r8
   24b22:	f7ff fe37 	bl	24794 <ble_att_svr_read_group_type_entry_write>
                if (rc != 0) {
   24b26:	4603      	mov	r3, r0
   24b28:	b918      	cbnz	r0, 24b32 <ble_att_svr_build_read_group_type_rsp+0x8a>
                end_group_handle = 0;
   24b2a:	f04f 0900 	mov.w	r9, #0
                start_group_handle = 0;
   24b2e:	464d      	mov	r5, r9
   24b30:	e031      	b.n	24b96 <ble_att_svr_build_read_group_type_rsp+0xee>
                    *err_handle = entry->ha_handle_id;
   24b32:	8962      	ldrh	r2, [r4, #10]
   24b34:	9917      	ldr	r1, [sp, #92]	; 0x5c
   24b36:	800a      	strh	r2, [r1, #0]
                    if (rc == BLE_HS_ENOMEM) {
   24b38:	2806      	cmp	r0, #6
   24b3a:	d003      	beq.n	24b44 <ble_att_svr_build_read_group_type_rsp+0x9c>
                end_group_handle = 0;
   24b3c:	f04f 0900 	mov.w	r9, #0
                start_group_handle = 0;
   24b40:	464d      	mov	r5, r9
   24b42:	e03e      	b.n	24bc2 <ble_att_svr_build_read_group_type_rsp+0x11a>
                        *att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   24b44:	2211      	movs	r2, #17
   24b46:	f88a 2000 	strb.w	r2, [sl]
                end_group_handle = 0;
   24b4a:	f04f 0900 	mov.w	r9, #0
                start_group_handle = 0;
   24b4e:	464d      	mov	r5, r9
   24b50:	e037      	b.n	24bc2 <ble_att_svr_build_read_group_type_rsp+0x11a>
                    *err_handle = entry->ha_handle_id;
   24b52:	8962      	ldrh	r2, [r4, #10]
   24b54:	9917      	ldr	r1, [sp, #92]	; 0x5c
   24b56:	800a      	strh	r2, [r1, #0]
                    goto done;
   24b58:	e033      	b.n	24bc2 <ble_att_svr_build_read_group_type_rsp+0x11a>
                    if (service_uuid.u.type == BLE_UUID_TYPE_16) {
   24b5a:	f89d 3014 	ldrb.w	r3, [sp, #20]
   24b5e:	2b10      	cmp	r3, #16
   24b60:	d003      	beq.n	24b6a <ble_att_svr_build_read_group_type_rsp+0xc2>
                        rsp->bagp_length = BLE_ATT_READ_GROUP_TYPE_ADATA_SZ_128;
   24b62:	2314      	movs	r3, #20
   24b64:	f88b 3000 	strb.w	r3, [fp]
   24b68:	e007      	b.n	24b7a <ble_att_svr_build_read_group_type_rsp+0xd2>
                        rsp->bagp_length = BLE_ATT_READ_GROUP_TYPE_ADATA_SZ_16;
   24b6a:	2306      	movs	r3, #6
   24b6c:	f88b 3000 	strb.w	r3, [fp]
   24b70:	e003      	b.n	24b7a <ble_att_svr_build_read_group_type_rsp+0xd2>
                    if (service_uuid.u.type != BLE_UUID_TYPE_16) {
   24b72:	f89d 2014 	ldrb.w	r2, [sp, #20]
   24b76:	2a10      	cmp	r2, #16
   24b78:	d123      	bne.n	24bc2 <ble_att_svr_build_read_group_type_rsp+0x11a>
                start_group_handle = entry->ha_handle_id;
   24b7a:	8965      	ldrh	r5, [r4, #10]
                end_group_handle = entry->ha_handle_id;
   24b7c:	46a9      	mov	r9, r5
    STAILQ_FOREACH(entry, &ble_att_svr_list, ha_next) {
   24b7e:	6824      	ldr	r4, [r4, #0]
   24b80:	2c00      	cmp	r4, #0
   24b82:	d03a      	beq.n	24bfa <ble_att_svr_build_read_group_type_rsp+0x152>
        if (entry->ha_handle_id < start_handle) {
   24b84:	8963      	ldrh	r3, [r4, #10]
   24b86:	42b3      	cmp	r3, r6
   24b88:	d3f9      	bcc.n	24b7e <ble_att_svr_build_read_group_type_rsp+0xd6>
        if (entry->ha_handle_id > end_handle) {
   24b8a:	42bb      	cmp	r3, r7
   24b8c:	d837      	bhi.n	24bfe <ble_att_svr_build_read_group_type_rsp+0x156>
        if (start_group_handle != 0) {
   24b8e:	2d00      	cmp	r5, #0
   24b90:	d1ba      	bne.n	24b08 <ble_att_svr_build_read_group_type_rsp+0x60>
        if (start_group_handle == 0) {
   24b92:	2d00      	cmp	r5, #0
   24b94:	d1f3      	bne.n	24b7e <ble_att_svr_build_read_group_type_rsp+0xd6>
            if (ble_uuid_cmp(entry->ha_uuid, group_uuid) == 0) {
   24b96:	9902      	ldr	r1, [sp, #8]
   24b98:	6860      	ldr	r0, [r4, #4]
   24b9a:	f7fe fd06 	bl	235aa <ble_uuid_cmp>
   24b9e:	2800      	cmp	r0, #0
   24ba0:	d1ed      	bne.n	24b7e <ble_att_svr_build_read_group_type_rsp+0xd6>
                rc = ble_att_svr_service_uuid(entry, &service_uuid, att_err);
   24ba2:	4652      	mov	r2, sl
   24ba4:	a905      	add	r1, sp, #20
   24ba6:	4620      	mov	r0, r4
   24ba8:	f7ff ff61 	bl	24a6e <ble_att_svr_service_uuid>
                if (rc != 0) {
   24bac:	4603      	mov	r3, r0
   24bae:	2800      	cmp	r0, #0
   24bb0:	d1cf      	bne.n	24b52 <ble_att_svr_build_read_group_type_rsp+0xaa>
                switch (rsp->bagp_length) {
   24bb2:	f89b 2000 	ldrb.w	r2, [fp]
   24bb6:	2a06      	cmp	r2, #6
   24bb8:	d0db      	beq.n	24b72 <ble_att_svr_build_read_group_type_rsp+0xca>
   24bba:	2a14      	cmp	r2, #20
   24bbc:	d018      	beq.n	24bf0 <ble_att_svr_build_read_group_type_rsp+0x148>
   24bbe:	2a00      	cmp	r2, #0
   24bc0:	d0cb      	beq.n	24b5a <ble_att_svr_build_read_group_type_rsp+0xb2>
    if (rc == 0) {
   24bc2:	bb2b      	cbnz	r3, 24c10 <ble_att_svr_build_read_group_type_rsp+0x168>
        if (start_group_handle != 0) {
   24bc4:	b15d      	cbz	r5, 24bde <ble_att_svr_build_read_group_type_rsp+0x136>
            if (entry == NULL) {
   24bc6:	b1e4      	cbz	r4, 24c02 <ble_att_svr_build_read_group_type_rsp+0x15a>
            rc = ble_att_svr_read_group_type_entry_write(txom, mtu,
   24bc8:	ab05      	add	r3, sp, #20
   24bca:	9300      	str	r3, [sp, #0]
   24bcc:	464b      	mov	r3, r9
   24bce:	462a      	mov	r2, r5
   24bd0:	9903      	ldr	r1, [sp, #12]
   24bd2:	4640      	mov	r0, r8
   24bd4:	f7ff fdde 	bl	24794 <ble_att_svr_read_group_type_entry_write>
   24bd8:	4603      	mov	r3, r0
            if (rc == BLE_HS_ENOMEM) {
   24bda:	2806      	cmp	r0, #6
   24bdc:	d014      	beq.n	24c08 <ble_att_svr_build_read_group_type_rsp+0x160>
        if (OS_MBUF_PKTLEN(txom) <= BLE_ATT_READ_GROUP_TYPE_RSP_BASE_SZ) {
   24bde:	f8b8 2010 	ldrh.w	r2, [r8, #16]
   24be2:	2a02      	cmp	r2, #2
   24be4:	d814      	bhi.n	24c10 <ble_att_svr_build_read_group_type_rsp+0x168>
            *att_err = BLE_ATT_ERR_ATTR_NOT_FOUND;
   24be6:	230a      	movs	r3, #10
   24be8:	f88a 3000 	strb.w	r3, [sl]
            rc = BLE_HS_ENOENT;
   24bec:	2305      	movs	r3, #5
   24bee:	e010      	b.n	24c12 <ble_att_svr_build_read_group_type_rsp+0x16a>
                    if (service_uuid.u.type == BLE_UUID_TYPE_16) {
   24bf0:	f89d 2014 	ldrb.w	r2, [sp, #20]
   24bf4:	2a10      	cmp	r2, #16
   24bf6:	d1c0      	bne.n	24b7a <ble_att_svr_build_read_group_type_rsp+0xd2>
   24bf8:	e7e3      	b.n	24bc2 <ble_att_svr_build_read_group_type_rsp+0x11a>
    rc = 0;
   24bfa:	2300      	movs	r3, #0
   24bfc:	e7e1      	b.n	24bc2 <ble_att_svr_build_read_group_type_rsp+0x11a>
            rc = 0;
   24bfe:	2300      	movs	r3, #0
   24c00:	e7df      	b.n	24bc2 <ble_att_svr_build_read_group_type_rsp+0x11a>
                end_group_handle = 0xffff;
   24c02:	f64f 79ff 	movw	r9, #65535	; 0xffff
   24c06:	e7df      	b.n	24bc8 <ble_att_svr_build_read_group_type_rsp+0x120>
                *att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   24c08:	2211      	movs	r2, #17
   24c0a:	f88a 2000 	strb.w	r2, [sl]
   24c0e:	e7e6      	b.n	24bde <ble_att_svr_build_read_group_type_rsp+0x136>
    if (rc == 0 || rc == BLE_HS_EMSGSIZE) {
   24c10:	b10b      	cbz	r3, 24c16 <ble_att_svr_build_read_group_type_rsp+0x16e>
   24c12:	2b04      	cmp	r3, #4
   24c14:	d006      	beq.n	24c24 <ble_att_svr_build_read_group_type_rsp+0x17c>
    *out_txom = txom;
   24c16:	9a15      	ldr	r2, [sp, #84]	; 0x54
   24c18:	f8c2 8000 	str.w	r8, [r2]
}
   24c1c:	4618      	mov	r0, r3
   24c1e:	b00b      	add	sp, #44	; 0x2c
   24c20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rc = 0;
   24c24:	2300      	movs	r3, #0
   24c26:	e7f6      	b.n	24c16 <ble_att_svr_build_read_group_type_rsp+0x16e>
   24c28:	200032b8 	.word	0x200032b8

00024c2c <ble_att_svr_prep_free>:
    if (entry != NULL) {
   24c2c:	b148      	cbz	r0, 24c42 <ble_att_svr_prep_free+0x16>
{
   24c2e:	b510      	push	{r4, lr}
   24c30:	4604      	mov	r4, r0
        os_mbuf_free_chain(entry->bape_value);
   24c32:	6880      	ldr	r0, [r0, #8]
   24c34:	f7e8 feef 	bl	da16 <os_mbuf_free_chain>
        os_memblock_put(&ble_att_svr_prep_entry_pool, entry);
   24c38:	4621      	mov	r1, r4
   24c3a:	4802      	ldr	r0, [pc, #8]	; (24c44 <ble_att_svr_prep_free+0x18>)
   24c3c:	f7e8 f9a0 	bl	cf80 <os_memblock_put>
}
   24c40:	bd10      	pop	{r4, pc}
   24c42:	4770      	bx	lr
   24c44:	200035c0 	.word	0x200035c0

00024c48 <ble_att_svr_prep_alloc>:
{
   24c48:	b538      	push	{r3, r4, r5, lr}
   24c4a:	4605      	mov	r5, r0
    entry = os_memblock_get(&ble_att_svr_prep_entry_pool);
   24c4c:	480c      	ldr	r0, [pc, #48]	; (24c80 <ble_att_svr_prep_alloc+0x38>)
   24c4e:	f7e8 f96f 	bl	cf30 <os_memblock_get>
    if (entry == NULL) {
   24c52:	4604      	mov	r4, r0
   24c54:	b148      	cbz	r0, 24c6a <ble_att_svr_prep_alloc+0x22>
    memset(entry, 0, sizeof *entry);
   24c56:	2300      	movs	r3, #0
   24c58:	6003      	str	r3, [r0, #0]
   24c5a:	6043      	str	r3, [r0, #4]
   24c5c:	6083      	str	r3, [r0, #8]
    entry->bape_value = ble_hs_mbuf_l2cap_pkt();
   24c5e:	f7fb fa19 	bl	20094 <ble_hs_mbuf_l2cap_pkt>
   24c62:	60a0      	str	r0, [r4, #8]
    if (entry->bape_value == NULL) {
   24c64:	b120      	cbz	r0, 24c70 <ble_att_svr_prep_alloc+0x28>
}
   24c66:	4620      	mov	r0, r4
   24c68:	bd38      	pop	{r3, r4, r5, pc}
        *att_err = BLE_ATT_ERR_PREPARE_QUEUE_FULL;
   24c6a:	2309      	movs	r3, #9
   24c6c:	702b      	strb	r3, [r5, #0]
        return NULL;
   24c6e:	e7fa      	b.n	24c66 <ble_att_svr_prep_alloc+0x1e>
        ble_att_svr_prep_free(entry);
   24c70:	4620      	mov	r0, r4
   24c72:	f7ff ffdb 	bl	24c2c <ble_att_svr_prep_free>
        *att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   24c76:	2311      	movs	r3, #17
   24c78:	702b      	strb	r3, [r5, #0]
        return NULL;
   24c7a:	2400      	movs	r4, #0
   24c7c:	e7f3      	b.n	24c66 <ble_att_svr_prep_alloc+0x1e>
   24c7e:	bf00      	nop
   24c80:	200035c0 	.word	0x200035c0

00024c84 <ble_att_svr_insert_prep_entry>:
{
   24c84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24c88:	460e      	mov	r6, r1
   24c8a:	4617      	mov	r7, r2
   24c8c:	461d      	mov	r5, r3
    conn = ble_hs_conn_find_assert(conn_handle);
   24c8e:	f7fa faf1 	bl	1f274 <ble_hs_conn_find_assert>
   24c92:	4680      	mov	r8, r0
    prep_entry = ble_att_svr_prep_alloc(out_att_err);
   24c94:	9806      	ldr	r0, [sp, #24]
   24c96:	f7ff ffd7 	bl	24c48 <ble_att_svr_prep_alloc>
    if (prep_entry == NULL) {
   24c9a:	b378      	cbz	r0, 24cfc <ble_att_svr_insert_prep_entry+0x78>
   24c9c:	4604      	mov	r4, r0
    prep_entry->bape_handle = handle;
   24c9e:	8086      	strh	r6, [r0, #4]
    prep_entry->bape_offset = offset;
   24ca0:	80c7      	strh	r7, [r0, #6]
        OS_MBUF_PKTLEN(rxom) - sizeof(struct ble_att_prep_write_cmd));
   24ca2:	8a2b      	ldrh	r3, [r5, #16]
    rc = os_mbuf_appendfrom(
   24ca4:	3b04      	subs	r3, #4
   24ca6:	b29b      	uxth	r3, r3
   24ca8:	2204      	movs	r2, #4
   24caa:	4629      	mov	r1, r5
   24cac:	6880      	ldr	r0, [r0, #8]
   24cae:	f7e8 ff29 	bl	db04 <os_mbuf_appendfrom>
    if (rc != 0) {
   24cb2:	4605      	mov	r5, r0
   24cb4:	b9a8      	cbnz	r0, 24ce2 <ble_att_svr_insert_prep_entry+0x5e>
    prep_prev = ble_att_svr_prep_find_prev(&conn->bhc_att_svr,
   24cb6:	463a      	mov	r2, r7
   24cb8:	4631      	mov	r1, r6
   24cba:	f108 0044 	add.w	r0, r8, #68	; 0x44
   24cbe:	f7ff fb15 	bl	242ec <ble_att_svr_prep_find_prev>
    if (prep_prev == NULL) {
   24cc2:	b1a8      	cbz	r0, 24cf0 <ble_att_svr_insert_prep_entry+0x6c>
        SLIST_INSERT_AFTER(prep_prev, prep_entry, bape_next);
   24cc4:	6802      	ldr	r2, [r0, #0]
   24cc6:	6022      	str	r2, [r4, #0]
   24cc8:	6004      	str	r4, [r0, #0]
   24cca:	f7e8 fcd3 	bl	d674 <os_time_get>
        ble_npl_time_get() + BLE_HS_ATT_SVR_QUEUED_WRITE_TMO;
   24cce:	f500 40ea 	add.w	r0, r0, #29952	; 0x7500
   24cd2:	3030      	adds	r0, #48	; 0x30
    conn->bhc_att_svr.basc_prep_timeout_at =
   24cd4:	f8c8 0048 	str.w	r0, [r8, #72]	; 0x48
    ble_hs_timer_resched();
   24cd8:	f7f9 fd1c 	bl	1e714 <ble_hs_timer_resched>
}
   24cdc:	4628      	mov	r0, r5
   24cde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ble_att_svr_prep_free(prep_entry);
   24ce2:	4620      	mov	r0, r4
   24ce4:	f7ff ffa2 	bl	24c2c <ble_att_svr_prep_free>
        *out_att_err = BLE_ATT_ERR_PREPARE_QUEUE_FULL;
   24ce8:	2309      	movs	r3, #9
   24cea:	9a06      	ldr	r2, [sp, #24]
   24cec:	7013      	strb	r3, [r2, #0]
        return rc;
   24cee:	e7f5      	b.n	24cdc <ble_att_svr_insert_prep_entry+0x58>
        SLIST_INSERT_HEAD(&conn->bhc_att_svr.basc_prep_list, prep_entry,
   24cf0:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
   24cf4:	6023      	str	r3, [r4, #0]
   24cf6:	f8c8 4044 	str.w	r4, [r8, #68]	; 0x44
   24cfa:	e7e6      	b.n	24cca <ble_att_svr_insert_prep_entry+0x46>
        return BLE_HS_ENOMEM;
   24cfc:	2506      	movs	r5, #6
   24cfe:	e7ed      	b.n	24cdc <ble_att_svr_insert_prep_entry+0x58>

00024d00 <ble_att_svr_prep_extract>:
{
   24d00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   24d04:	4605      	mov	r5, r0
   24d06:	4689      	mov	r9, r1
   24d08:	4690      	mov	r8, r2
    first = SLIST_FIRST(prep_list);
   24d0a:	6803      	ldr	r3, [r0, #0]
    attr_handle = first->bape_handle;
   24d0c:	889f      	ldrh	r7, [r3, #4]
    om = NULL;
   24d0e:	2600      	movs	r6, #0
    while ((entry = SLIST_FIRST(prep_list)) != NULL) {
   24d10:	e008      	b.n	24d24 <ble_att_svr_prep_extract+0x24>
            om = entry->bape_value;
   24d12:	68a6      	ldr	r6, [r4, #8]
        entry->bape_value = NULL;
   24d14:	2300      	movs	r3, #0
   24d16:	60a3      	str	r3, [r4, #8]
        SLIST_REMOVE_HEAD(prep_list, bape_next);
   24d18:	682b      	ldr	r3, [r5, #0]
   24d1a:	681b      	ldr	r3, [r3, #0]
   24d1c:	602b      	str	r3, [r5, #0]
        ble_att_svr_prep_free(entry);
   24d1e:	4620      	mov	r0, r4
   24d20:	f7ff ff84 	bl	24c2c <ble_att_svr_prep_free>
    while ((entry = SLIST_FIRST(prep_list)) != NULL) {
   24d24:	682c      	ldr	r4, [r5, #0]
   24d26:	b14c      	cbz	r4, 24d3c <ble_att_svr_prep_extract+0x3c>
        if (entry->bape_handle != attr_handle) {
   24d28:	88a3      	ldrh	r3, [r4, #4]
   24d2a:	42bb      	cmp	r3, r7
   24d2c:	d106      	bne.n	24d3c <ble_att_svr_prep_extract+0x3c>
        if (om == NULL) {
   24d2e:	2e00      	cmp	r6, #0
   24d30:	d0ef      	beq.n	24d12 <ble_att_svr_prep_extract+0x12>
            os_mbuf_concat(om, entry->bape_value);
   24d32:	68a1      	ldr	r1, [r4, #8]
   24d34:	4630      	mov	r0, r6
   24d36:	f7e9 f8d2 	bl	dede <os_mbuf_concat>
   24d3a:	e7eb      	b.n	24d14 <ble_att_svr_prep_extract+0x14>
    *out_attr_handle = attr_handle;
   24d3c:	f8a9 7000 	strh.w	r7, [r9]
    *out_om = om;
   24d40:	f8c8 6000 	str.w	r6, [r8]
}
   24d44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00024d48 <ble_att_svr_free_start_mem>:
     */
}

static void
ble_att_svr_free_start_mem(void)
{
   24d48:	b510      	push	{r4, lr}
    free(ble_att_svr_entry_mem);
   24d4a:	4c03      	ldr	r4, [pc, #12]	; (24d58 <ble_att_svr_free_start_mem+0x10>)
   24d4c:	6820      	ldr	r0, [r4, #0]
   24d4e:	f004 ff2d 	bl	29bac <free>
    ble_att_svr_entry_mem = NULL;
   24d52:	2300      	movs	r3, #0
   24d54:	6023      	str	r3, [r4, #0]
}
   24d56:	bd10      	pop	{r4, pc}
   24d58:	2000328c 	.word	0x2000328c

00024d5c <ble_att_svr_register>:
{
   24d5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24d60:	4680      	mov	r8, r0
   24d62:	460f      	mov	r7, r1
   24d64:	4616      	mov	r6, r2
   24d66:	461d      	mov	r5, r3
    entry = ble_att_svr_entry_alloc();
   24d68:	f7ff fb00 	bl	2436c <ble_att_svr_entry_alloc>
    if (entry == NULL) {
   24d6c:	b1b8      	cbz	r0, 24d9e <ble_att_svr_register+0x42>
   24d6e:	4604      	mov	r4, r0
    entry->ha_uuid = uuid;
   24d70:	f8c0 8004 	str.w	r8, [r0, #4]
    entry->ha_flags = flags;
   24d74:	7207      	strb	r7, [r0, #8]
    entry->ha_min_key_size = min_key_size;
   24d76:	7246      	strb	r6, [r0, #9]
    entry->ha_handle_id = ble_att_svr_next_id();
   24d78:	f7ff fab0 	bl	242dc <ble_att_svr_next_id>
   24d7c:	8160      	strh	r0, [r4, #10]
    entry->ha_cb = cb;
   24d7e:	9b06      	ldr	r3, [sp, #24]
   24d80:	60e3      	str	r3, [r4, #12]
    entry->ha_cb_arg = cb_arg;
   24d82:	9b07      	ldr	r3, [sp, #28]
   24d84:	6123      	str	r3, [r4, #16]
    STAILQ_INSERT_TAIL(&ble_att_svr_list, entry, ha_next);
   24d86:	2300      	movs	r3, #0
   24d88:	6023      	str	r3, [r4, #0]
   24d8a:	4b07      	ldr	r3, [pc, #28]	; (24da8 <ble_att_svr_register+0x4c>)
   24d8c:	685a      	ldr	r2, [r3, #4]
   24d8e:	6014      	str	r4, [r2, #0]
   24d90:	605c      	str	r4, [r3, #4]
    if (handle_id != NULL) {
   24d92:	b135      	cbz	r5, 24da2 <ble_att_svr_register+0x46>
        *handle_id = entry->ha_handle_id;
   24d94:	8963      	ldrh	r3, [r4, #10]
   24d96:	802b      	strh	r3, [r5, #0]
    return 0;
   24d98:	2000      	movs	r0, #0
}
   24d9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return BLE_HS_ENOMEM;
   24d9e:	2006      	movs	r0, #6
   24da0:	e7fb      	b.n	24d9a <ble_att_svr_register+0x3e>
    return 0;
   24da2:	2000      	movs	r0, #0
   24da4:	e7f9      	b.n	24d9a <ble_att_svr_register+0x3e>
   24da6:	bf00      	nop
   24da8:	200032b8 	.word	0x200032b8

00024dac <ble_att_svr_prev_handle>:
}
   24dac:	4b01      	ldr	r3, [pc, #4]	; (24db4 <ble_att_svr_prev_handle+0x8>)
   24dae:	8818      	ldrh	r0, [r3, #0]
   24db0:	4770      	bx	lr
   24db2:	bf00      	nop
   24db4:	200032b4 	.word	0x200032b4

00024db8 <ble_att_svr_find_by_handle>:
    for (entry = STAILQ_FIRST(&ble_att_svr_list);
   24db8:	4b04      	ldr	r3, [pc, #16]	; (24dcc <ble_att_svr_find_by_handle+0x14>)
   24dba:	681b      	ldr	r3, [r3, #0]
   24dbc:	b123      	cbz	r3, 24dc8 <ble_att_svr_find_by_handle+0x10>
        if (entry->ha_handle_id == handle_id) {
   24dbe:	895a      	ldrh	r2, [r3, #10]
   24dc0:	4282      	cmp	r2, r0
   24dc2:	d001      	beq.n	24dc8 <ble_att_svr_find_by_handle+0x10>
         entry = STAILQ_NEXT(entry, ha_next)) {
   24dc4:	681b      	ldr	r3, [r3, #0]
   24dc6:	e7f9      	b.n	24dbc <ble_att_svr_find_by_handle+0x4>
}
   24dc8:	4618      	mov	r0, r3
   24dca:	4770      	bx	lr
   24dcc:	200032b8 	.word	0x200032b8

00024dd0 <ble_att_svr_write_handle>:
{
   24dd0:	b5f0      	push	{r4, r5, r6, r7, lr}
   24dd2:	b083      	sub	sp, #12
   24dd4:	4605      	mov	r5, r0
   24dd6:	4616      	mov	r6, r2
   24dd8:	461f      	mov	r7, r3
   24dda:	9c08      	ldr	r4, [sp, #32]
    entry = ble_att_svr_find_by_handle(attr_handle);
   24ddc:	4608      	mov	r0, r1
   24dde:	f7ff ffeb 	bl	24db8 <ble_att_svr_find_by_handle>
    if (entry == NULL) {
   24de2:	b140      	cbz	r0, 24df6 <ble_att_svr_write_handle+0x26>
   24de4:	4601      	mov	r1, r0
    rc = ble_att_svr_write(conn_handle, entry, offset, om, out_att_err);
   24de6:	9400      	str	r4, [sp, #0]
   24de8:	463b      	mov	r3, r7
   24dea:	4632      	mov	r2, r6
   24dec:	4628      	mov	r0, r5
   24dee:	f7ff fb94 	bl	2451a <ble_att_svr_write>
}
   24df2:	b003      	add	sp, #12
   24df4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (out_att_err != NULL) {
   24df6:	b11c      	cbz	r4, 24e00 <ble_att_svr_write_handle+0x30>
            *out_att_err = BLE_ATT_ERR_INVALID_HANDLE;
   24df8:	2301      	movs	r3, #1
   24dfa:	7023      	strb	r3, [r4, #0]
        return BLE_HS_ENOENT;
   24dfc:	2005      	movs	r0, #5
   24dfe:	e7f8      	b.n	24df2 <ble_att_svr_write_handle+0x22>
   24e00:	2005      	movs	r0, #5
   24e02:	e7f6      	b.n	24df2 <ble_att_svr_write_handle+0x22>

00024e04 <ble_att_svr_prep_write>:
{
   24e04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24e08:	b084      	sub	sp, #16
   24e0a:	4606      	mov	r6, r0
   24e0c:	460c      	mov	r4, r1
   24e0e:	4617      	mov	r7, r2
    *err_handle = 0; /* Silence unnecessary warning. */
   24e10:	2300      	movs	r3, #0
   24e12:	8013      	strh	r3, [r2, #0]
    rc = ble_att_svr_prep_validate(prep_list, err_handle);
   24e14:	4611      	mov	r1, r2
   24e16:	4620      	mov	r0, r4
   24e18:	f7ff fa7a 	bl	24310 <ble_att_svr_prep_validate>
    if (rc != 0) {
   24e1c:	4680      	mov	r8, r0
   24e1e:	b9f8      	cbnz	r0, 24e60 <ble_att_svr_prep_write+0x5c>
    while (!SLIST_EMPTY(prep_list)) {
   24e20:	6823      	ldr	r3, [r4, #0]
   24e22:	b1eb      	cbz	r3, 24e60 <ble_att_svr_prep_write+0x5c>
        ble_att_svr_prep_extract(prep_list, &attr_handle, &om);
   24e24:	aa03      	add	r2, sp, #12
   24e26:	f10d 010a 	add.w	r1, sp, #10
   24e2a:	4620      	mov	r0, r4
   24e2c:	f7ff ff68 	bl	24d00 <ble_att_svr_prep_extract>
        attr = ble_att_svr_find_by_handle(attr_handle);
   24e30:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   24e34:	f7ff ffc0 	bl	24db8 <ble_att_svr_find_by_handle>
        rc = ble_att_svr_write(conn_handle, attr, 0, &om, &att_err);
   24e38:	f10d 0309 	add.w	r3, sp, #9
   24e3c:	9300      	str	r3, [sp, #0]
   24e3e:	ab03      	add	r3, sp, #12
   24e40:	2200      	movs	r2, #0
   24e42:	4601      	mov	r1, r0
   24e44:	4630      	mov	r0, r6
   24e46:	f7ff fb68 	bl	2451a <ble_att_svr_write>
   24e4a:	4605      	mov	r5, r0
        os_mbuf_free_chain(om);
   24e4c:	9803      	ldr	r0, [sp, #12]
   24e4e:	f7e8 fde2 	bl	da16 <os_mbuf_free_chain>
        if (rc != 0) {
   24e52:	2d00      	cmp	r5, #0
   24e54:	d0e4      	beq.n	24e20 <ble_att_svr_prep_write+0x1c>
            *err_handle = attr_handle;
   24e56:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   24e5a:	803b      	strh	r3, [r7, #0]
            return att_err;
   24e5c:	f89d 8009 	ldrb.w	r8, [sp, #9]
}
   24e60:	4640      	mov	r0, r8
   24e62:	b004      	add	sp, #16
   24e64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00024e68 <ble_att_svr_find_by_uuid>:
{
   24e68:	b570      	push	{r4, r5, r6, lr}
   24e6a:	460d      	mov	r5, r1
   24e6c:	4616      	mov	r6, r2
    if (prev == NULL) {
   24e6e:	b160      	cbz	r0, 24e8a <ble_att_svr_find_by_uuid+0x22>
        entry = STAILQ_NEXT(prev, ha_next);
   24e70:	6804      	ldr	r4, [r0, #0]
    for (;
   24e72:	b174      	cbz	r4, 24e92 <ble_att_svr_find_by_uuid+0x2a>
         entry != NULL && entry->ha_handle_id <= end_handle;
   24e74:	8963      	ldrh	r3, [r4, #10]
   24e76:	42b3      	cmp	r3, r6
   24e78:	d80a      	bhi.n	24e90 <ble_att_svr_find_by_uuid+0x28>
        if (uuid == NULL || ble_uuid_cmp(entry->ha_uuid, uuid) == 0) {
   24e7a:	b155      	cbz	r5, 24e92 <ble_att_svr_find_by_uuid+0x2a>
   24e7c:	4629      	mov	r1, r5
   24e7e:	6860      	ldr	r0, [r4, #4]
   24e80:	f7fe fb93 	bl	235aa <ble_uuid_cmp>
   24e84:	b128      	cbz	r0, 24e92 <ble_att_svr_find_by_uuid+0x2a>
         entry = STAILQ_NEXT(entry, ha_next)) {
   24e86:	6824      	ldr	r4, [r4, #0]
   24e88:	e7f3      	b.n	24e72 <ble_att_svr_find_by_uuid+0xa>
        entry = STAILQ_FIRST(&ble_att_svr_list);
   24e8a:	4b03      	ldr	r3, [pc, #12]	; (24e98 <ble_att_svr_find_by_uuid+0x30>)
   24e8c:	681c      	ldr	r4, [r3, #0]
   24e8e:	e7f0      	b.n	24e72 <ble_att_svr_find_by_uuid+0xa>
    return NULL;
   24e90:	2400      	movs	r4, #0
}
   24e92:	4620      	mov	r0, r4
   24e94:	bd70      	pop	{r4, r5, r6, pc}
   24e96:	bf00      	nop
   24e98:	200032b8 	.word	0x200032b8

00024e9c <ble_att_svr_build_read_type_rsp>:
{
   24e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24ea0:	b08f      	sub	sp, #60	; 0x3c
   24ea2:	9006      	str	r0, [sp, #24]
   24ea4:	460d      	mov	r5, r1
   24ea6:	4617      	mov	r7, r2
   24ea8:	9305      	str	r3, [sp, #20]
   24eaa:	9b18      	ldr	r3, [sp, #96]	; 0x60
   24eac:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
    *att_err = 0;    /* Silence unnecessary warning. */
   24eb0:	2200      	movs	r2, #0
   24eb2:	f88a 2000 	strb.w	r2, [sl]
    *err_handle = start_handle;
   24eb6:	991b      	ldr	r1, [sp, #108]	; 0x6c
   24eb8:	800d      	strh	r5, [r1, #0]
    txom = *rxom;
   24eba:	681e      	ldr	r6, [r3, #0]
    *rxom = NULL;
   24ebc:	601a      	str	r2, [r3, #0]
    os_mbuf_adj(txom, OS_MBUF_PKTLEN(txom));
   24ebe:	8a31      	ldrh	r1, [r6, #16]
   24ec0:	4630      	mov	r0, r6
   24ec2:	f7e8 fe76 	bl	dbb2 <os_mbuf_adj>
    rsp = ble_att_cmd_prepare(BLE_ATT_OP_READ_TYPE_RSP, sizeof(*rsp), txom);
   24ec6:	4632      	mov	r2, r6
   24ec8:	2101      	movs	r1, #1
   24eca:	2009      	movs	r0, #9
   24ecc:	f7ff f9be 	bl	2424c <ble_att_cmd_prepare>
    if (rsp == NULL) {
   24ed0:	9007      	str	r0, [sp, #28]
   24ed2:	b140      	cbz	r0, 24ee6 <ble_att_svr_build_read_type_rsp+0x4a>
    mtu = ble_att_mtu(conn_handle);
   24ed4:	9806      	ldr	r0, [sp, #24]
   24ed6:	f7fe fe93 	bl	23c00 <ble_att_mtu>
   24eda:	4681      	mov	r9, r0
    prev_attr_len = 0;
   24edc:	f04f 0800 	mov.w	r8, #0
    entry_written = 0;
   24ee0:	46c3      	mov	fp, r8
    entry = NULL;
   24ee2:	4644      	mov	r4, r8
   24ee4:	e035      	b.n	24f52 <ble_att_svr_build_read_type_rsp+0xb6>
        *att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   24ee6:	2311      	movs	r3, #17
   24ee8:	f88a 3000 	strb.w	r3, [sl]
        *err_handle = 0;
   24eec:	f04f 0b00 	mov.w	fp, #0
   24ef0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   24ef2:	f8a3 b000 	strh.w	fp, [r3]
        rc = BLE_HS_ENOMEM;
   24ef6:	2206      	movs	r2, #6
    prev_attr_len = 0;
   24ef8:	46d8      	mov	r8, fp
    if (!entry_written) {
   24efa:	f1bb 0f00 	cmp.w	fp, #0
   24efe:	d15a      	bne.n	24fb6 <ble_att_svr_build_read_type_rsp+0x11a>
        if (*att_err == 0) {
   24f00:	f89a 3000 	ldrb.w	r3, [sl]
   24f04:	b913      	cbnz	r3, 24f0c <ble_att_svr_build_read_type_rsp+0x70>
            *att_err = BLE_ATT_ERR_ATTR_NOT_FOUND;
   24f06:	230a      	movs	r3, #10
   24f08:	f88a 3000 	strb.w	r3, [sl]
        if (rc == 0) {
   24f0c:	2a00      	cmp	r2, #0
   24f0e:	d15a      	bne.n	24fc6 <ble_att_svr_build_read_type_rsp+0x12a>
            rc = BLE_HS_ENOENT;
   24f10:	2205      	movs	r2, #5
   24f12:	e058      	b.n	24fc6 <ble_att_svr_build_read_type_rsp+0x12a>
                *err_handle = entry->ha_handle_id;
   24f14:	8963      	ldrh	r3, [r4, #10]
   24f16:	991b      	ldr	r1, [sp, #108]	; 0x6c
   24f18:	800b      	strh	r3, [r1, #0]
                goto done;
   24f1a:	e7ee      	b.n	24efa <ble_att_svr_build_read_type_rsp+0x5e>
            } else if (prev_attr_len != attr_len) {
   24f1c:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
   24f20:	4543      	cmp	r3, r8
   24f22:	d1ea      	bne.n	24efa <ble_att_svr_build_read_type_rsp+0x5e>
            txomlen = OS_MBUF_PKTHDR(txom)->omp_len + 2 + attr_len;
   24f24:	8a33      	ldrh	r3, [r6, #16]
   24f26:	3302      	adds	r3, #2
   24f28:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
   24f2c:	440b      	add	r3, r1
            if (txomlen > mtu) {
   24f2e:	4599      	cmp	r9, r3
   24f30:	dbe3      	blt.n	24efa <ble_att_svr_build_read_type_rsp+0x5e>
            data = os_mbuf_extend(txom, 2 + attr_len);
   24f32:	3102      	adds	r1, #2
   24f34:	b289      	uxth	r1, r1
   24f36:	4630      	mov	r0, r6
   24f38:	f7e8 fff3 	bl	df22 <os_mbuf_extend>
            if (data == NULL) {
   24f3c:	b388      	cbz	r0, 24fa2 <ble_att_svr_build_read_type_rsp+0x106>
            data->handle = htole16(entry->ha_handle_id);
   24f3e:	8962      	ldrh	r2, [r4, #10]
   24f40:	f820 2b02 	strh.w	r2, [r0], #2
            memcpy(data->value, buf, attr_len);
   24f44:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
   24f48:	a908      	add	r1, sp, #32
   24f4a:	f7e9 fa91 	bl	e470 <memcpy>
            entry_written = 1;
   24f4e:	f04f 0b01 	mov.w	fp, #1
        entry = ble_att_svr_find_by_uuid(entry, uuid, end_handle);
   24f52:	463a      	mov	r2, r7
   24f54:	9905      	ldr	r1, [sp, #20]
   24f56:	4620      	mov	r0, r4
   24f58:	f7ff ff86 	bl	24e68 <ble_att_svr_find_by_uuid>
        if (entry == NULL) {
   24f5c:	4604      	mov	r4, r0
   24f5e:	b340      	cbz	r0, 24fb2 <ble_att_svr_build_read_type_rsp+0x116>
        if (entry->ha_handle_id >= start_handle) {
   24f60:	8943      	ldrh	r3, [r0, #10]
   24f62:	42ab      	cmp	r3, r5
   24f64:	d3f5      	bcc.n	24f52 <ble_att_svr_build_read_type_rsp+0xb6>
            rc = ble_att_svr_read_flat(conn_handle, entry, 0, sizeof buf, buf,
   24f66:	f8cd a008 	str.w	sl, [sp, #8]
   24f6a:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   24f6e:	9301      	str	r3, [sp, #4]
   24f70:	ab08      	add	r3, sp, #32
   24f72:	9300      	str	r3, [sp, #0]
   24f74:	2313      	movs	r3, #19
   24f76:	2200      	movs	r2, #0
   24f78:	4601      	mov	r1, r0
   24f7a:	9806      	ldr	r0, [sp, #24]
   24f7c:	f7ff fc75 	bl	2486a <ble_att_svr_read_flat>
            if (rc != 0) {
   24f80:	4602      	mov	r2, r0
   24f82:	2800      	cmp	r0, #0
   24f84:	d1c6      	bne.n	24f14 <ble_att_svr_build_read_type_rsp+0x78>
            if (attr_len > mtu - 4) {
   24f86:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
   24f8a:	f1a9 0304 	sub.w	r3, r9, #4
   24f8e:	4299      	cmp	r1, r3
   24f90:	dd01      	ble.n	24f96 <ble_att_svr_build_read_type_rsp+0xfa>
                attr_len = mtu - 4;
   24f92:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
            if (prev_attr_len == 0) {
   24f96:	f1b8 0f00 	cmp.w	r8, #0
   24f9a:	d1bf      	bne.n	24f1c <ble_att_svr_build_read_type_rsp+0x80>
                prev_attr_len = attr_len;
   24f9c:	f8bd 8036 	ldrh.w	r8, [sp, #54]	; 0x36
   24fa0:	e7c0      	b.n	24f24 <ble_att_svr_build_read_type_rsp+0x88>
                *att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   24fa2:	2311      	movs	r3, #17
   24fa4:	f88a 3000 	strb.w	r3, [sl]
                *err_handle = entry->ha_handle_id;
   24fa8:	8963      	ldrh	r3, [r4, #10]
   24faa:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   24fac:	8013      	strh	r3, [r2, #0]
                rc = BLE_HS_ENOMEM;
   24fae:	2206      	movs	r2, #6
                goto done;
   24fb0:	e7a3      	b.n	24efa <ble_att_svr_build_read_type_rsp+0x5e>
            rc = BLE_HS_ENOENT;
   24fb2:	2205      	movs	r2, #5
   24fb4:	e7a1      	b.n	24efa <ble_att_svr_build_read_type_rsp+0x5e>
        *att_err = 0;
   24fb6:	2200      	movs	r2, #0
   24fb8:	f88a 2000 	strb.w	r2, [sl]
        rsp->batp_length = htole16(sizeof(*data) + prev_attr_len);
   24fbc:	f108 0802 	add.w	r8, r8, #2
   24fc0:	9b07      	ldr	r3, [sp, #28]
   24fc2:	f883 8000 	strb.w	r8, [r3]
    *out_txom = txom;
   24fc6:	9b19      	ldr	r3, [sp, #100]	; 0x64
   24fc8:	601e      	str	r6, [r3, #0]
}
   24fca:	4610      	mov	r0, r2
   24fcc:	b00f      	add	sp, #60	; 0x3c
   24fce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00024fd2 <ble_att_svr_ticks_until_tmo>:
    if (SLIST_EMPTY(&svr->basc_prep_list)) {
   24fd2:	6803      	ldr	r3, [r0, #0]
   24fd4:	b12b      	cbz	r3, 24fe2 <ble_att_svr_ticks_until_tmo+0x10>
    time_diff = svr->basc_prep_timeout_at - now;
   24fd6:	6840      	ldr	r0, [r0, #4]
    if (time_diff < 0) {
   24fd8:	1a40      	subs	r0, r0, r1
   24fda:	d400      	bmi.n	24fde <ble_att_svr_ticks_until_tmo+0xc>
}
   24fdc:	4770      	bx	lr
        return 0;
   24fde:	2000      	movs	r0, #0
   24fe0:	4770      	bx	lr
        return BLE_HS_FOREVER;
   24fe2:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   24fe6:	e7f9      	b.n	24fdc <ble_att_svr_ticks_until_tmo+0xa>

00024fe8 <ble_att_svr_read_handle>:
{
   24fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
   24fea:	b083      	sub	sp, #12
   24fec:	4605      	mov	r5, r0
   24fee:	4616      	mov	r6, r2
   24ff0:	461f      	mov	r7, r3
   24ff2:	9c08      	ldr	r4, [sp, #32]
    entry = ble_att_svr_find_by_handle(attr_handle);
   24ff4:	4608      	mov	r0, r1
   24ff6:	f7ff fedf 	bl	24db8 <ble_att_svr_find_by_handle>
    if (entry == NULL) {
   24ffa:	b140      	cbz	r0, 2500e <ble_att_svr_read_handle+0x26>
   24ffc:	4601      	mov	r1, r0
    rc = ble_att_svr_read(conn_handle, entry, offset, om, out_att_err);
   24ffe:	9400      	str	r4, [sp, #0]
   25000:	463b      	mov	r3, r7
   25002:	4632      	mov	r2, r6
   25004:	4628      	mov	r0, r5
   25006:	f7ff fa59 	bl	244bc <ble_att_svr_read>
}
   2500a:	b003      	add	sp, #12
   2500c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (out_att_err != NULL) {
   2500e:	b11c      	cbz	r4, 25018 <ble_att_svr_read_handle+0x30>
            *out_att_err = BLE_ATT_ERR_INVALID_HANDLE;
   25010:	2301      	movs	r3, #1
   25012:	7023      	strb	r3, [r4, #0]
        return BLE_HS_ENOENT;
   25014:	2005      	movs	r0, #5
   25016:	e7f8      	b.n	2500a <ble_att_svr_read_handle+0x22>
   25018:	2005      	movs	r0, #5
   2501a:	e7f6      	b.n	2500a <ble_att_svr_read_handle+0x22>

0002501c <ble_att_svr_build_read_mult_rsp>:
{
   2501c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   25020:	b084      	sub	sp, #16
   25022:	4607      	mov	r7, r0
   25024:	460c      	mov	r4, r1
   25026:	4691      	mov	r9, r2
   25028:	461d      	mov	r5, r3
    mtu = ble_att_mtu(conn_handle);
   2502a:	f7fe fde9 	bl	23c00 <ble_att_mtu>
   2502e:	4606      	mov	r6, r0
    rc = ble_att_svr_pkt(rxom, &txom, att_err);
   25030:	462a      	mov	r2, r5
   25032:	a903      	add	r1, sp, #12
   25034:	4620      	mov	r0, r4
   25036:	f7ff fae1 	bl	245fc <ble_att_svr_pkt>
    if (rc != 0) {
   2503a:	4680      	mov	r8, r0
   2503c:	b148      	cbz	r0, 25052 <ble_att_svr_build_read_mult_rsp+0x36>
        *err_handle = 0;
   2503e:	2300      	movs	r3, #0
   25040:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   25042:	8013      	strh	r3, [r2, #0]
    *out_txom = txom;
   25044:	9b03      	ldr	r3, [sp, #12]
   25046:	f8c9 3000 	str.w	r3, [r9]
}
   2504a:	4640      	mov	r0, r8
   2504c:	b004      	add	sp, #16
   2504e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (ble_att_cmd_prepare(BLE_ATT_OP_READ_MULT_RSP, 0, txom) == NULL) {
   25052:	9a03      	ldr	r2, [sp, #12]
   25054:	2100      	movs	r1, #0
   25056:	200f      	movs	r0, #15
   25058:	f7ff f8f8 	bl	2424c <ble_att_cmd_prepare>
   2505c:	b320      	cbz	r0, 250a8 <ble_att_svr_build_read_mult_rsp+0x8c>
    while (OS_MBUF_PKTLEN(*rxom) >= 2 && OS_MBUF_PKTLEN(txom) < mtu) {
   2505e:	6823      	ldr	r3, [r4, #0]
   25060:	8a1b      	ldrh	r3, [r3, #16]
   25062:	2b01      	cmp	r3, #1
   25064:	d9ee      	bls.n	25044 <ble_att_svr_build_read_mult_rsp+0x28>
   25066:	9b03      	ldr	r3, [sp, #12]
   25068:	8a1b      	ldrh	r3, [r3, #16]
   2506a:	42b3      	cmp	r3, r6
   2506c:	d2ea      	bcs.n	25044 <ble_att_svr_build_read_mult_rsp+0x28>
        rc = ble_att_svr_pullup_req_base(rxom, 2, att_err);
   2506e:	462a      	mov	r2, r5
   25070:	2102      	movs	r1, #2
   25072:	4620      	mov	r0, r4
   25074:	f7ff fa82 	bl	2457c <ble_att_svr_pullup_req_base>
        if (rc != 0) {
   25078:	b9f0      	cbnz	r0, 250b8 <ble_att_svr_build_read_mult_rsp+0x9c>
        handle = get_le16((*rxom)->om_data);
   2507a:	6823      	ldr	r3, [r4, #0]
   2507c:	6818      	ldr	r0, [r3, #0]
   2507e:	f004 fb86 	bl	2978e <get_le16>
   25082:	4682      	mov	sl, r0
        os_mbuf_adj(*rxom, 2);
   25084:	2102      	movs	r1, #2
   25086:	6820      	ldr	r0, [r4, #0]
   25088:	f7e8 fd93 	bl	dbb2 <os_mbuf_adj>
        rc = ble_att_svr_read_handle(conn_handle, handle, 0, txom, att_err);
   2508c:	9500      	str	r5, [sp, #0]
   2508e:	9b03      	ldr	r3, [sp, #12]
   25090:	2200      	movs	r2, #0
   25092:	4651      	mov	r1, sl
   25094:	4638      	mov	r0, r7
   25096:	f7ff ffa7 	bl	24fe8 <ble_att_svr_read_handle>
        if (rc != 0) {
   2509a:	2800      	cmp	r0, #0
   2509c:	d0df      	beq.n	2505e <ble_att_svr_build_read_mult_rsp+0x42>
            *err_handle = handle;
   2509e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   250a0:	f8a2 a000 	strh.w	sl, [r2]
        rc = ble_att_svr_read_handle(conn_handle, handle, 0, txom, att_err);
   250a4:	4680      	mov	r8, r0
            goto done;
   250a6:	e7cd      	b.n	25044 <ble_att_svr_build_read_mult_rsp+0x28>
        *att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   250a8:	2311      	movs	r3, #17
   250aa:	702b      	strb	r3, [r5, #0]
        *err_handle = 0;
   250ac:	2300      	movs	r3, #0
   250ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   250b0:	8013      	strh	r3, [r2, #0]
        rc = BLE_HS_ENOMEM;
   250b2:	f04f 0806 	mov.w	r8, #6
        goto done;
   250b6:	e7c5      	b.n	25044 <ble_att_svr_build_read_mult_rsp+0x28>
            *err_handle = 0;
   250b8:	2200      	movs	r2, #0
   250ba:	990c      	ldr	r1, [sp, #48]	; 0x30
   250bc:	800a      	strh	r2, [r1, #0]
        rc = ble_att_svr_pullup_req_base(rxom, 2, att_err);
   250be:	4680      	mov	r8, r0
            goto done;
   250c0:	e7c0      	b.n	25044 <ble_att_svr_build_read_mult_rsp+0x28>

000250c2 <ble_att_svr_tx_error_rsp>:
{
   250c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   250c4:	4605      	mov	r5, r0
   250c6:	460c      	mov	r4, r1
   250c8:	4617      	mov	r7, r2
   250ca:	461e      	mov	r6, r3
    rsp = ble_att_cmd_prepare(BLE_ATT_OP_ERROR_RSP, sizeof(*rsp), txom);
   250cc:	460a      	mov	r2, r1
   250ce:	2104      	movs	r1, #4
   250d0:	2001      	movs	r0, #1
   250d2:	f7ff f8bb 	bl	2424c <ble_att_cmd_prepare>
    if (rsp == NULL) {
   250d6:	b150      	cbz	r0, 250ee <ble_att_svr_tx_error_rsp+0x2c>
    rsp->baep_req_op = req_op;
   250d8:	7007      	strb	r7, [r0, #0]
    rsp->baep_handle = htole16(handle);
   250da:	f8a0 6001 	strh.w	r6, [r0, #1]
    rsp->baep_error_code = error_code;
   250de:	f89d 2018 	ldrb.w	r2, [sp, #24]
   250e2:	70c2      	strb	r2, [r0, #3]
    return ble_att_tx(conn_handle, txom);
   250e4:	4621      	mov	r1, r4
   250e6:	4628      	mov	r0, r5
   250e8:	f7ff f8d3 	bl	24292 <ble_att_tx>
}
   250ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return BLE_HS_ENOMEM;
   250ee:	2006      	movs	r0, #6
   250f0:	e7fc      	b.n	250ec <ble_att_svr_tx_error_rsp+0x2a>
	...

000250f4 <ble_att_svr_tx_rsp>:
{
   250f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   250f8:	b085      	sub	sp, #20
   250fa:	4607      	mov	r7, r0
   250fc:	4614      	mov	r4, r2
   250fe:	4699      	mov	r9, r3
   25100:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
    if (hs_status != 0 && err_status == 0) {
   25104:	4688      	mov	r8, r1
   25106:	b109      	cbz	r1, 2510c <ble_att_svr_tx_rsp+0x18>
   25108:	2e00      	cmp	r6, #0
   2510a:	d03b      	beq.n	25184 <ble_att_svr_tx_rsp+0x90>
        ble_hs_lock();
   2510c:	f7f9 fa0a 	bl	1e524 <ble_hs_lock>
        rc = ble_att_conn_chan_find(conn_handle, &conn, &chan);
   25110:	aa03      	add	r2, sp, #12
   25112:	a902      	add	r1, sp, #8
   25114:	4638      	mov	r0, r7
   25116:	f7fe fc4d 	bl	239b4 <ble_att_conn_chan_find>
        if (rc != 0) {
   2511a:	4605      	mov	r5, r0
   2511c:	b918      	cbnz	r0, 25126 <ble_att_svr_tx_rsp+0x32>
            if (hs_status == 0) {
   2511e:	f1b8 0f00 	cmp.w	r8, #0
   25122:	d017      	beq.n	25154 <ble_att_svr_tx_rsp+0x60>
   25124:	4645      	mov	r5, r8
        ble_hs_unlock();
   25126:	f7f9 fa01 	bl	1e52c <ble_hs_unlock>
        if (hs_status != 0) {
   2512a:	b365      	cbz	r5, 25186 <ble_att_svr_tx_rsp+0x92>
            STATS_INC(ble_att_stats, error_rsp_tx);
   2512c:	4a19      	ldr	r2, [pc, #100]	; (25194 <ble_att_svr_tx_rsp+0xa0>)
   2512e:	6913      	ldr	r3, [r2, #16]
   25130:	3301      	adds	r3, #1
   25132:	6113      	str	r3, [r2, #16]
            if (om == NULL) {
   25134:	b314      	cbz	r4, 2517c <ble_att_svr_tx_rsp+0x88>
                os_mbuf_adj(om, OS_MBUF_PKTLEN(om));
   25136:	8a21      	ldrh	r1, [r4, #16]
   25138:	4620      	mov	r0, r4
   2513a:	f7e8 fd3a 	bl	dbb2 <os_mbuf_adj>
            if (om != NULL) {
   2513e:	b314      	cbz	r4, 25186 <ble_att_svr_tx_rsp+0x92>
                ble_att_svr_tx_error_rsp(conn_handle, om, att_op,
   25140:	9600      	str	r6, [sp, #0]
   25142:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
   25146:	464a      	mov	r2, r9
   25148:	4621      	mov	r1, r4
   2514a:	4638      	mov	r0, r7
   2514c:	f7ff ffb9 	bl	250c2 <ble_att_svr_tx_error_rsp>
                om = NULL;
   25150:	2400      	movs	r4, #0
   25152:	e018      	b.n	25186 <ble_att_svr_tx_rsp+0x92>
                ble_att_inc_tx_stat(om->om_data[0]);
   25154:	6823      	ldr	r3, [r4, #0]
   25156:	7818      	ldrb	r0, [r3, #0]
   25158:	f7fe fc34 	bl	239c4 <ble_att_inc_tx_stat>
                ble_att_truncate_to_mtu(chan, om);
   2515c:	4621      	mov	r1, r4
   2515e:	9803      	ldr	r0, [sp, #12]
   25160:	f7fe fd41 	bl	23be6 <ble_att_truncate_to_mtu>
                hs_status = ble_l2cap_tx(conn, chan, om);
   25164:	4622      	mov	r2, r4
   25166:	9903      	ldr	r1, [sp, #12]
   25168:	9802      	ldr	r0, [sp, #8]
   2516a:	f7fb fbe2 	bl	20932 <ble_l2cap_tx>
                if (hs_status != 0) {
   2516e:	4605      	mov	r5, r0
   25170:	b908      	cbnz	r0, 25176 <ble_att_svr_tx_rsp+0x82>
                om = NULL;
   25172:	2400      	movs	r4, #0
   25174:	e7d7      	b.n	25126 <ble_att_svr_tx_rsp+0x32>
                    err_status = BLE_ATT_ERR_UNLIKELY;
   25176:	260e      	movs	r6, #14
                om = NULL;
   25178:	2400      	movs	r4, #0
   2517a:	e7d4      	b.n	25126 <ble_att_svr_tx_rsp+0x32>
                om = ble_hs_mbuf_l2cap_pkt();
   2517c:	f7fa ff8a 	bl	20094 <ble_hs_mbuf_l2cap_pkt>
   25180:	4604      	mov	r4, r0
   25182:	e7dc      	b.n	2513e <ble_att_svr_tx_rsp+0x4a>
   25184:	460d      	mov	r5, r1
    os_mbuf_free_chain(om);
   25186:	4620      	mov	r0, r4
   25188:	f7e8 fc45 	bl	da16 <os_mbuf_free_chain>
}
   2518c:	4628      	mov	r0, r5
   2518e:	b005      	add	sp, #20
   25190:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   25194:	200046ac 	.word	0x200046ac

00025198 <ble_att_svr_rx_mtu>:
{
   25198:	b570      	push	{r4, r5, r6, lr}
   2519a:	b086      	sub	sp, #24
   2519c:	4604      	mov	r4, r0
   2519e:	460d      	mov	r5, r1
    txom = NULL;
   251a0:	2300      	movs	r3, #0
   251a2:	9303      	str	r3, [sp, #12]
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*cmd), &att_err);
   251a4:	f10d 020b 	add.w	r2, sp, #11
   251a8:	2102      	movs	r1, #2
   251aa:	4628      	mov	r0, r5
   251ac:	f7ff f9e6 	bl	2457c <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   251b0:	b180      	cbz	r0, 251d4 <ble_att_svr_rx_mtu+0x3c>
   251b2:	4601      	mov	r1, r0
    mtu = 0;
   251b4:	2600      	movs	r6, #0
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom, BLE_ATT_OP_MTU_REQ,
   251b6:	f89d 300b 	ldrb.w	r3, [sp, #11]
   251ba:	2200      	movs	r2, #0
   251bc:	9201      	str	r2, [sp, #4]
   251be:	9300      	str	r3, [sp, #0]
   251c0:	2302      	movs	r3, #2
   251c2:	9a03      	ldr	r2, [sp, #12]
   251c4:	4620      	mov	r0, r4
   251c6:	f7ff ff95 	bl	250f4 <ble_att_svr_tx_rsp>
    if (rc == 0) {
   251ca:	4605      	mov	r5, r0
   251cc:	b170      	cbz	r0, 251ec <ble_att_svr_rx_mtu+0x54>
}
   251ce:	4628      	mov	r0, r5
   251d0:	b006      	add	sp, #24
   251d2:	bd70      	pop	{r4, r5, r6, pc}
    cmd = (struct ble_att_mtu_cmd *)(*rxom)->om_data;
   251d4:	682b      	ldr	r3, [r5, #0]
   251d6:	681b      	ldr	r3, [r3, #0]
    mtu = le16toh(cmd->bamc_mtu);
   251d8:	881e      	ldrh	r6, [r3, #0]
    rc = ble_att_svr_build_mtu_rsp(conn_handle, rxom, &txom, &att_err);
   251da:	f10d 030b 	add.w	r3, sp, #11
   251de:	aa03      	add	r2, sp, #12
   251e0:	4629      	mov	r1, r5
   251e2:	4620      	mov	r0, r4
   251e4:	f7ff f9d6 	bl	24594 <ble_att_svr_build_mtu_rsp>
   251e8:	4601      	mov	r1, r0
   251ea:	e7e4      	b.n	251b6 <ble_att_svr_rx_mtu+0x1e>
        ble_hs_lock();
   251ec:	f7f9 f99a 	bl	1e524 <ble_hs_lock>
        rc = ble_att_conn_chan_find(conn_handle, &conn, &chan);
   251f0:	aa05      	add	r2, sp, #20
   251f2:	a904      	add	r1, sp, #16
   251f4:	4620      	mov	r0, r4
   251f6:	f7fe fbdd 	bl	239b4 <ble_att_conn_chan_find>
        if (rc == 0) {
   251fa:	4605      	mov	r5, r0
   251fc:	b148      	cbz	r0, 25212 <ble_att_svr_rx_mtu+0x7a>
        ble_hs_unlock();
   251fe:	f7f9 f995 	bl	1e52c <ble_hs_unlock>
        if (rc == 0) {
   25202:	2d00      	cmp	r5, #0
   25204:	d1e3      	bne.n	251ce <ble_att_svr_rx_mtu+0x36>
            ble_gap_mtu_event(conn_handle, BLE_L2CAP_CID_ATT, mtu);
   25206:	4632      	mov	r2, r6
   25208:	2104      	movs	r1, #4
   2520a:	4620      	mov	r0, r4
   2520c:	f7f6 fb5c 	bl	1b8c8 <ble_gap_mtu_event>
    return rc;
   25210:	e7dd      	b.n	251ce <ble_att_svr_rx_mtu+0x36>
            ble_att_set_peer_mtu(chan, mtu);
   25212:	4631      	mov	r1, r6
   25214:	9805      	ldr	r0, [sp, #20]
   25216:	f7fe fcd1 	bl	23bbc <ble_att_set_peer_mtu>
            chan->flags |= BLE_L2CAP_CHAN_F_TXED_MTU;
   2521a:	9805      	ldr	r0, [sp, #20]
   2521c:	7b83      	ldrb	r3, [r0, #14]
   2521e:	f043 0301 	orr.w	r3, r3, #1
   25222:	7383      	strb	r3, [r0, #14]
            mtu = ble_att_chan_mtu(chan);
   25224:	f7fe fccf 	bl	23bc6 <ble_att_chan_mtu>
   25228:	4606      	mov	r6, r0
   2522a:	e7e8      	b.n	251fe <ble_att_svr_rx_mtu+0x66>

0002522c <ble_att_svr_rx_find_info>:
{
   2522c:	b570      	push	{r4, r5, r6, lr}
   2522e:	b084      	sub	sp, #16
   25230:	4606      	mov	r6, r0
   25232:	460d      	mov	r5, r1
    txom = NULL;
   25234:	2300      	movs	r3, #0
   25236:	9303      	str	r3, [sp, #12]
    att_err = 0;
   25238:	aa04      	add	r2, sp, #16
   2523a:	f802 3d05 	strb.w	r3, [r2, #-5]!
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*req), &att_err);
   2523e:	2104      	movs	r1, #4
   25240:	4628      	mov	r0, r5
   25242:	f7ff f99b 	bl	2457c <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   25246:	b9c8      	cbnz	r0, 2527c <ble_att_svr_rx_find_info+0x50>
    req = (struct ble_att_find_info_req *)(*rxom)->om_data;
   25248:	682b      	ldr	r3, [r5, #0]
   2524a:	681b      	ldr	r3, [r3, #0]
    start_handle = le16toh(req->bafq_start_handle);
   2524c:	881c      	ldrh	r4, [r3, #0]
    end_handle = le16toh(req->bafq_end_handle);
   2524e:	885a      	ldrh	r2, [r3, #2]
    if (start_handle > end_handle || start_handle == 0) {
   25250:	4294      	cmp	r4, r2
   25252:	d800      	bhi.n	25256 <ble_att_svr_rx_find_info+0x2a>
   25254:	b924      	cbnz	r4, 25260 <ble_att_svr_rx_find_info+0x34>
        att_err = BLE_ATT_ERR_INVALID_HANDLE;
   25256:	2301      	movs	r3, #1
   25258:	f88d 300b 	strb.w	r3, [sp, #11]
        rc = BLE_HS_EBADDATA;
   2525c:	210a      	movs	r1, #10
        goto done;
   2525e:	e00f      	b.n	25280 <ble_att_svr_rx_find_info+0x54>
    rc = ble_att_svr_build_find_info_rsp(conn_handle,
   25260:	f10d 030b 	add.w	r3, sp, #11
   25264:	9301      	str	r3, [sp, #4]
   25266:	ab03      	add	r3, sp, #12
   25268:	9300      	str	r3, [sp, #0]
   2526a:	462b      	mov	r3, r5
   2526c:	4621      	mov	r1, r4
   2526e:	4630      	mov	r0, r6
   25270:	f7ff fa60 	bl	24734 <ble_att_svr_build_find_info_rsp>
    if (rc != 0) {
   25274:	4601      	mov	r1, r0
   25276:	b918      	cbnz	r0, 25280 <ble_att_svr_rx_find_info+0x54>
    err_handle = 0;
   25278:	2400      	movs	r4, #0
   2527a:	e001      	b.n	25280 <ble_att_svr_rx_find_info+0x54>
   2527c:	4601      	mov	r1, r0
        err_handle = 0;
   2527e:	2400      	movs	r4, #0
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom, BLE_ATT_OP_FIND_INFO_REQ,
   25280:	f89d 300b 	ldrb.w	r3, [sp, #11]
   25284:	9401      	str	r4, [sp, #4]
   25286:	9300      	str	r3, [sp, #0]
   25288:	2304      	movs	r3, #4
   2528a:	9a03      	ldr	r2, [sp, #12]
   2528c:	4630      	mov	r0, r6
   2528e:	f7ff ff31 	bl	250f4 <ble_att_svr_tx_rsp>
}
   25292:	b004      	add	sp, #16
   25294:	bd70      	pop	{r4, r5, r6, pc}

00025296 <ble_att_svr_rx_find_type_value>:
{
   25296:	b570      	push	{r4, r5, r6, lr}
   25298:	b088      	sub	sp, #32
   2529a:	4606      	mov	r6, r0
   2529c:	460d      	mov	r5, r1
    txom = NULL;
   2529e:	2300      	movs	r3, #0
   252a0:	9306      	str	r3, [sp, #24]
    att_err = 0;
   252a2:	aa08      	add	r2, sp, #32
   252a4:	f802 3d09 	strb.w	r3, [r2, #-9]!
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*req), &att_err);
   252a8:	2106      	movs	r1, #6
   252aa:	4628      	mov	r0, r5
   252ac:	f7ff f966 	bl	2457c <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   252b0:	bb00      	cbnz	r0, 252f4 <ble_att_svr_rx_find_type_value+0x5e>
    req = (struct ble_att_find_type_value_req *)(*rxom)->om_data;
   252b2:	682b      	ldr	r3, [r5, #0]
   252b4:	681b      	ldr	r3, [r3, #0]
    start_handle = le16toh(req->bavq_start_handle);
   252b6:	881c      	ldrh	r4, [r3, #0]
    end_handle = le16toh(req->bavq_end_handle);
   252b8:	885a      	ldrh	r2, [r3, #2]
    attr_type = (ble_uuid16_t) BLE_UUID16_INIT(le16toh(req->bavq_attr_type));
   252ba:	889b      	ldrh	r3, [r3, #4]
   252bc:	2110      	movs	r1, #16
   252be:	f88d 101c 	strb.w	r1, [sp, #28]
   252c2:	f8ad 301e 	strh.w	r3, [sp, #30]
    if (start_handle > end_handle || start_handle == 0) {
   252c6:	4294      	cmp	r4, r2
   252c8:	d800      	bhi.n	252cc <ble_att_svr_rx_find_type_value+0x36>
   252ca:	b924      	cbnz	r4, 252d6 <ble_att_svr_rx_find_type_value+0x40>
        att_err = BLE_ATT_ERR_INVALID_HANDLE;
   252cc:	2301      	movs	r3, #1
   252ce:	f88d 3017 	strb.w	r3, [sp, #23]
        rc = BLE_HS_EBADDATA;
   252d2:	210a      	movs	r1, #10
        goto done;
   252d4:	e010      	b.n	252f8 <ble_att_svr_rx_find_type_value+0x62>
    rc = ble_att_svr_build_find_type_value_rsp(conn_handle, start_handle,
   252d6:	f10d 0317 	add.w	r3, sp, #23
   252da:	9302      	str	r3, [sp, #8]
   252dc:	ab06      	add	r3, sp, #24
   252de:	9301      	str	r3, [sp, #4]
   252e0:	9500      	str	r5, [sp, #0]
   252e2:	9b07      	ldr	r3, [sp, #28]
   252e4:	4621      	mov	r1, r4
   252e6:	4630      	mov	r0, r6
   252e8:	f7ff fb90 	bl	24a0c <ble_att_svr_build_find_type_value_rsp>
    if (rc != 0) {
   252ec:	4601      	mov	r1, r0
   252ee:	b918      	cbnz	r0, 252f8 <ble_att_svr_rx_find_type_value+0x62>
    err_handle = 0;
   252f0:	2400      	movs	r4, #0
   252f2:	e001      	b.n	252f8 <ble_att_svr_rx_find_type_value+0x62>
   252f4:	4601      	mov	r1, r0
   252f6:	2400      	movs	r4, #0
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom,
   252f8:	f89d 3017 	ldrb.w	r3, [sp, #23]
   252fc:	9401      	str	r4, [sp, #4]
   252fe:	9300      	str	r3, [sp, #0]
   25300:	2306      	movs	r3, #6
   25302:	9a06      	ldr	r2, [sp, #24]
   25304:	4630      	mov	r0, r6
   25306:	f7ff fef5 	bl	250f4 <ble_att_svr_tx_rsp>
}
   2530a:	b008      	add	sp, #32
   2530c:	bd70      	pop	{r4, r5, r6, pc}

0002530e <ble_att_svr_rx_read_type>:
{
   2530e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25312:	b08c      	sub	sp, #48	; 0x30
   25314:	4606      	mov	r6, r0
   25316:	460d      	mov	r5, r1
    txom = NULL;
   25318:	2300      	movs	r3, #0
   2531a:	930b      	str	r3, [sp, #44]	; 0x2c
    err_handle = 0;
   2531c:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
    att_err = 0;
   25320:	f88d 3013 	strb.w	r3, [sp, #19]
    pktlen = OS_MBUF_PKTLEN(*rxom);
   25324:	680b      	ldr	r3, [r1, #0]
   25326:	8a1c      	ldrh	r4, [r3, #16]
    if (pktlen != sizeof(*req) + 2 && pktlen != sizeof(*req) + 16) {
   25328:	2c06      	cmp	r4, #6
   2532a:	d010      	beq.n	2534e <ble_att_svr_rx_read_type+0x40>
   2532c:	2c14      	cmp	r4, #20
   2532e:	d00e      	beq.n	2534e <ble_att_svr_rx_read_type+0x40>
        rc = BLE_HS_EBADDATA;
   25330:	210a      	movs	r1, #10
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom, BLE_ATT_OP_READ_TYPE_REQ,
   25332:	f89d 3013 	ldrb.w	r3, [sp, #19]
   25336:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
   2533a:	9201      	str	r2, [sp, #4]
   2533c:	9300      	str	r3, [sp, #0]
   2533e:	2308      	movs	r3, #8
   25340:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   25342:	4630      	mov	r0, r6
   25344:	f7ff fed6 	bl	250f4 <ble_att_svr_tx_rsp>
}
   25348:	b00c      	add	sp, #48	; 0x30
   2534a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    rc = ble_att_svr_pullup_req_base(rxom, pktlen, &att_err);
   2534e:	f10d 0213 	add.w	r2, sp, #19
   25352:	4621      	mov	r1, r4
   25354:	4628      	mov	r0, r5
   25356:	f7ff f911 	bl	2457c <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   2535a:	4601      	mov	r1, r0
   2535c:	2800      	cmp	r0, #0
   2535e:	d1e8      	bne.n	25332 <ble_att_svr_rx_read_type+0x24>
    req = (struct ble_att_read_type_req *)(*rxom)->om_data;
   25360:	6829      	ldr	r1, [r5, #0]
   25362:	680b      	ldr	r3, [r1, #0]
    start_handle = le16toh(req->batq_start_handle);
   25364:	881a      	ldrh	r2, [r3, #0]
   25366:	b297      	uxth	r7, r2
    end_handle = le16toh(req->batq_end_handle);
   25368:	f8b3 8002 	ldrh.w	r8, [r3, #2]
    if (start_handle > end_handle || start_handle == 0) {
   2536c:	4547      	cmp	r7, r8
   2536e:	d800      	bhi.n	25372 <ble_att_svr_rx_read_type+0x64>
   25370:	b937      	cbnz	r7, 25380 <ble_att_svr_rx_read_type+0x72>
        att_err = BLE_ATT_ERR_INVALID_HANDLE;
   25372:	2301      	movs	r3, #1
   25374:	f88d 3013 	strb.w	r3, [sp, #19]
        err_handle = start_handle;
   25378:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
        rc = BLE_HS_EBADDATA;
   2537c:	210a      	movs	r1, #10
        goto done;
   2537e:	e7d8      	b.n	25332 <ble_att_svr_rx_read_type+0x24>
    rc = ble_uuid_init_from_att_mbuf(&uuid, *rxom, sizeof(*req),
   25380:	1f23      	subs	r3, r4, #4
   25382:	2204      	movs	r2, #4
   25384:	a805      	add	r0, sp, #20
   25386:	f7fe f954 	bl	23632 <ble_uuid_init_from_att_mbuf>
    if (rc != 0) {
   2538a:	b118      	cbz	r0, 25394 <ble_att_svr_rx_read_type+0x86>
        att_err = BLE_ATT_ERR_INVALID_PDU;
   2538c:	2104      	movs	r1, #4
   2538e:	f88d 1013 	strb.w	r1, [sp, #19]
        goto done;
   25392:	e7ce      	b.n	25332 <ble_att_svr_rx_read_type+0x24>
    rc = ble_att_svr_build_read_type_rsp(conn_handle, start_handle, end_handle,
   25394:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
   25398:	9303      	str	r3, [sp, #12]
   2539a:	f10d 0313 	add.w	r3, sp, #19
   2539e:	9302      	str	r3, [sp, #8]
   253a0:	ab0b      	add	r3, sp, #44	; 0x2c
   253a2:	9301      	str	r3, [sp, #4]
   253a4:	9500      	str	r5, [sp, #0]
   253a6:	ab05      	add	r3, sp, #20
   253a8:	4642      	mov	r2, r8
   253aa:	4639      	mov	r1, r7
   253ac:	4630      	mov	r0, r6
   253ae:	f7ff fd75 	bl	24e9c <ble_att_svr_build_read_type_rsp>
   253b2:	4601      	mov	r1, r0
   253b4:	e7bd      	b.n	25332 <ble_att_svr_rx_read_type+0x24>

000253b6 <ble_att_svr_rx_read>:
{
   253b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   253ba:	b084      	sub	sp, #16
   253bc:	4607      	mov	r7, r0
   253be:	460e      	mov	r6, r1
    att_err = 0;
   253c0:	aa04      	add	r2, sp, #16
   253c2:	2300      	movs	r3, #0
   253c4:	f802 3d01 	strb.w	r3, [r2, #-1]!
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*req), &att_err);
   253c8:	2102      	movs	r1, #2
   253ca:	4630      	mov	r0, r6
   253cc:	f7ff f8d6 	bl	2457c <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   253d0:	b170      	cbz	r0, 253f0 <ble_att_svr_rx_read+0x3a>
   253d2:	4601      	mov	r1, r0
    err_handle = 0;
   253d4:	2500      	movs	r5, #0
    txom = NULL;
   253d6:	462c      	mov	r4, r5
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom, BLE_ATT_OP_READ_REQ,
   253d8:	f89d 300f 	ldrb.w	r3, [sp, #15]
   253dc:	9501      	str	r5, [sp, #4]
   253de:	9300      	str	r3, [sp, #0]
   253e0:	230a      	movs	r3, #10
   253e2:	4622      	mov	r2, r4
   253e4:	4638      	mov	r0, r7
   253e6:	f7ff fe85 	bl	250f4 <ble_att_svr_tx_rsp>
}
   253ea:	b004      	add	sp, #16
   253ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    req = (struct ble_att_read_req *)(*rxom)->om_data;
   253f0:	6834      	ldr	r4, [r6, #0]
   253f2:	6823      	ldr	r3, [r4, #0]
    err_handle = le16toh(req->barq_handle);
   253f4:	881d      	ldrh	r5, [r3, #0]
    *rxom = NULL;
   253f6:	f04f 0800 	mov.w	r8, #0
   253fa:	f8c6 8000 	str.w	r8, [r6]
    os_mbuf_adj(txom, OS_MBUF_PKTLEN(txom));
   253fe:	8a21      	ldrh	r1, [r4, #16]
   25400:	4620      	mov	r0, r4
   25402:	f7e8 fbd6 	bl	dbb2 <os_mbuf_adj>
    if (ble_att_cmd_prepare(BLE_ATT_OP_READ_RSP, 0, txom) == NULL) {
   25406:	4622      	mov	r2, r4
   25408:	4641      	mov	r1, r8
   2540a:	200b      	movs	r0, #11
   2540c:	f7fe ff1e 	bl	2424c <ble_att_cmd_prepare>
   25410:	b150      	cbz	r0, 25428 <ble_att_svr_rx_read+0x72>
    rc = ble_att_svr_read_handle(conn_handle, err_handle, 0, txom, &att_err);
   25412:	f10d 030f 	add.w	r3, sp, #15
   25416:	9300      	str	r3, [sp, #0]
   25418:	4623      	mov	r3, r4
   2541a:	2200      	movs	r2, #0
   2541c:	4629      	mov	r1, r5
   2541e:	4638      	mov	r0, r7
   25420:	f7ff fde2 	bl	24fe8 <ble_att_svr_read_handle>
   25424:	4601      	mov	r1, r0
done:
   25426:	e7d7      	b.n	253d8 <ble_att_svr_rx_read+0x22>
        att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   25428:	2311      	movs	r3, #17
   2542a:	f88d 300f 	strb.w	r3, [sp, #15]
        rc = BLE_HS_ENOMEM;
   2542e:	2106      	movs	r1, #6
        goto done;
   25430:	e7d2      	b.n	253d8 <ble_att_svr_rx_read+0x22>

00025432 <ble_att_svr_rx_read_blob>:
{
   25432:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   25436:	b085      	sub	sp, #20
   25438:	4607      	mov	r7, r0
   2543a:	460e      	mov	r6, r1
    att_err = 0;
   2543c:	aa04      	add	r2, sp, #16
   2543e:	2300      	movs	r3, #0
   25440:	f802 3d01 	strb.w	r3, [r2, #-1]!
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*req), &att_err);
   25444:	2104      	movs	r1, #4
   25446:	4630      	mov	r0, r6
   25448:	f7ff f898 	bl	2457c <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   2544c:	b170      	cbz	r0, 2546c <ble_att_svr_rx_read_blob+0x3a>
   2544e:	4601      	mov	r1, r0
    err_handle = 0;
   25450:	2500      	movs	r5, #0
    txom = NULL;
   25452:	462c      	mov	r4, r5
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom, BLE_ATT_OP_READ_BLOB_REQ,
   25454:	f89d 300f 	ldrb.w	r3, [sp, #15]
   25458:	9501      	str	r5, [sp, #4]
   2545a:	9300      	str	r3, [sp, #0]
   2545c:	230c      	movs	r3, #12
   2545e:	4622      	mov	r2, r4
   25460:	4638      	mov	r0, r7
   25462:	f7ff fe47 	bl	250f4 <ble_att_svr_tx_rsp>
}
   25466:	b005      	add	sp, #20
   25468:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    req = (struct ble_att_read_blob_req *)(*rxom)->om_data;
   2546c:	6834      	ldr	r4, [r6, #0]
   2546e:	6823      	ldr	r3, [r4, #0]
    err_handle = le16toh(req->babq_handle);
   25470:	881d      	ldrh	r5, [r3, #0]
    offset = le16toh(req->babq_offset);
   25472:	f8b3 9002 	ldrh.w	r9, [r3, #2]
    *rxom = NULL;
   25476:	f04f 0800 	mov.w	r8, #0
   2547a:	f8c6 8000 	str.w	r8, [r6]
    os_mbuf_adj(txom, OS_MBUF_PKTLEN(txom));
   2547e:	8a21      	ldrh	r1, [r4, #16]
   25480:	4620      	mov	r0, r4
   25482:	f7e8 fb96 	bl	dbb2 <os_mbuf_adj>
    if (ble_att_cmd_prepare(BLE_ATT_OP_READ_BLOB_RSP, 0, txom) == NULL) {
   25486:	4622      	mov	r2, r4
   25488:	4641      	mov	r1, r8
   2548a:	200d      	movs	r0, #13
   2548c:	f7fe fede 	bl	2424c <ble_att_cmd_prepare>
   25490:	b150      	cbz	r0, 254a8 <ble_att_svr_rx_read_blob+0x76>
    rc = ble_att_svr_read_handle(conn_handle, err_handle, offset,
   25492:	f10d 030f 	add.w	r3, sp, #15
   25496:	9300      	str	r3, [sp, #0]
   25498:	4623      	mov	r3, r4
   2549a:	464a      	mov	r2, r9
   2549c:	4629      	mov	r1, r5
   2549e:	4638      	mov	r0, r7
   254a0:	f7ff fda2 	bl	24fe8 <ble_att_svr_read_handle>
   254a4:	4601      	mov	r1, r0
   254a6:	e7d5      	b.n	25454 <ble_att_svr_rx_read_blob+0x22>
        att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   254a8:	2311      	movs	r3, #17
   254aa:	f88d 300f 	strb.w	r3, [sp, #15]
        rc = BLE_HS_ENOMEM;
   254ae:	2106      	movs	r1, #6
        goto done;
   254b0:	e7d0      	b.n	25454 <ble_att_svr_rx_read_blob+0x22>

000254b2 <ble_att_svr_rx_read_mult>:
{
   254b2:	b510      	push	{r4, lr}
   254b4:	b084      	sub	sp, #16
   254b6:	4604      	mov	r4, r0
    txom = NULL;
   254b8:	2200      	movs	r2, #0
   254ba:	9203      	str	r2, [sp, #12]
    err_handle = 0;
   254bc:	f8ad 200a 	strh.w	r2, [sp, #10]
    att_err = 0;
   254c0:	ab04      	add	r3, sp, #16
   254c2:	f803 2d07 	strb.w	r2, [r3, #-7]!
    rc = ble_att_svr_build_read_mult_rsp(conn_handle, rxom, &txom, &att_err,
   254c6:	f10d 020a 	add.w	r2, sp, #10
   254ca:	9200      	str	r2, [sp, #0]
   254cc:	aa03      	add	r2, sp, #12
   254ce:	f7ff fda5 	bl	2501c <ble_att_svr_build_read_mult_rsp>
    return ble_att_svr_tx_rsp(conn_handle, rc, txom, BLE_ATT_OP_READ_MULT_REQ,
   254d2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   254d6:	9301      	str	r3, [sp, #4]
   254d8:	f89d 3009 	ldrb.w	r3, [sp, #9]
   254dc:	9300      	str	r3, [sp, #0]
   254de:	230e      	movs	r3, #14
   254e0:	9a03      	ldr	r2, [sp, #12]
   254e2:	4601      	mov	r1, r0
   254e4:	4620      	mov	r0, r4
   254e6:	f7ff fe05 	bl	250f4 <ble_att_svr_tx_rsp>
}
   254ea:	b004      	add	sp, #16
   254ec:	bd10      	pop	{r4, pc}

000254ee <ble_att_svr_rx_read_group_type>:
{
   254ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   254f2:	b08c      	sub	sp, #48	; 0x30
   254f4:	4605      	mov	r5, r0
   254f6:	460c      	mov	r4, r1
    txom = NULL;
   254f8:	2300      	movs	r3, #0
   254fa:	930b      	str	r3, [sp, #44]	; 0x2c
    err_handle = 0;
   254fc:	f8ad 3016 	strh.w	r3, [sp, #22]
    att_err = 0;
   25500:	f88d 3015 	strb.w	r3, [sp, #21]
    pktlen = OS_MBUF_PKTLEN(*rxom);
   25504:	680b      	ldr	r3, [r1, #0]
   25506:	8a19      	ldrh	r1, [r3, #16]
    if (pktlen != sizeof(*req) + 2 && pktlen != sizeof(*req) + 16) {
   25508:	2906      	cmp	r1, #6
   2550a:	d010      	beq.n	2552e <ble_att_svr_rx_read_group_type+0x40>
   2550c:	2914      	cmp	r1, #20
   2550e:	d00e      	beq.n	2552e <ble_att_svr_rx_read_group_type+0x40>
        rc = BLE_HS_EBADDATA;
   25510:	210a      	movs	r1, #10
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom,
   25512:	f89d 3015 	ldrb.w	r3, [sp, #21]
   25516:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   2551a:	9201      	str	r2, [sp, #4]
   2551c:	9300      	str	r3, [sp, #0]
   2551e:	2310      	movs	r3, #16
   25520:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   25522:	4628      	mov	r0, r5
   25524:	f7ff fde6 	bl	250f4 <ble_att_svr_tx_rsp>
}
   25528:	b00c      	add	sp, #48	; 0x30
   2552a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    rc = ble_att_svr_pullup_req_base(rxom, pktlen, &att_err);
   2552e:	f10d 0215 	add.w	r2, sp, #21
   25532:	4620      	mov	r0, r4
   25534:	f7ff f822 	bl	2457c <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   25538:	4601      	mov	r1, r0
   2553a:	2800      	cmp	r0, #0
   2553c:	d1e9      	bne.n	25512 <ble_att_svr_rx_read_group_type+0x24>
    req = (struct ble_att_read_group_type_req *)(*rxom)->om_data;
   2553e:	6821      	ldr	r1, [r4, #0]
   25540:	680b      	ldr	r3, [r1, #0]
    start_handle = le16toh(req->bagq_start_handle);
   25542:	881e      	ldrh	r6, [r3, #0]
   25544:	b2b7      	uxth	r7, r6
    end_handle = le16toh(req->bagq_end_handle);
   25546:	f8b3 8002 	ldrh.w	r8, [r3, #2]
    if (start_handle > end_handle || start_handle == 0) {
   2554a:	4547      	cmp	r7, r8
   2554c:	d800      	bhi.n	25550 <ble_att_svr_rx_read_group_type+0x62>
   2554e:	b937      	cbnz	r7, 2555e <ble_att_svr_rx_read_group_type+0x70>
        att_err = BLE_ATT_ERR_INVALID_HANDLE;
   25550:	2301      	movs	r3, #1
   25552:	f88d 3015 	strb.w	r3, [sp, #21]
        err_handle = start_handle;
   25556:	f8ad 6016 	strh.w	r6, [sp, #22]
        rc = BLE_HS_EBADDATA;
   2555a:	210a      	movs	r1, #10
        goto done;
   2555c:	e7d9      	b.n	25512 <ble_att_svr_rx_read_group_type+0x24>
    om_uuid_len = OS_MBUF_PKTHDR(*rxom)->omp_len - sizeof(*req);
   2555e:	8a0b      	ldrh	r3, [r1, #16]
    rc = ble_uuid_init_from_att_mbuf(&uuid, *rxom, sizeof(*req), om_uuid_len);
   25560:	3b04      	subs	r3, #4
   25562:	2204      	movs	r2, #4
   25564:	a806      	add	r0, sp, #24
   25566:	f7fe f864 	bl	23632 <ble_uuid_init_from_att_mbuf>
    if (rc != 0) {
   2556a:	b130      	cbz	r0, 2557a <ble_att_svr_rx_read_group_type+0x8c>
        att_err = BLE_ATT_ERR_INVALID_PDU;
   2556c:	2304      	movs	r3, #4
   2556e:	f88d 3015 	strb.w	r3, [sp, #21]
        err_handle = start_handle;
   25572:	f8ad 6016 	strh.w	r6, [sp, #22]
        rc = BLE_HS_EBADDATA;
   25576:	210a      	movs	r1, #10
        goto done;
   25578:	e7cb      	b.n	25512 <ble_att_svr_rx_read_group_type+0x24>
    if (!ble_att_svr_is_valid_read_group_type(&uuid.u)) {
   2557a:	a806      	add	r0, sp, #24
   2557c:	f7ff f96a 	bl	24854 <ble_att_svr_is_valid_read_group_type>
   25580:	b928      	cbnz	r0, 2558e <ble_att_svr_rx_read_group_type+0xa0>
        att_err = BLE_ATT_ERR_UNSUPPORTED_GROUP;
   25582:	2110      	movs	r1, #16
   25584:	f88d 1015 	strb.w	r1, [sp, #21]
        err_handle = start_handle;
   25588:	f8ad 6016 	strh.w	r6, [sp, #22]
        goto done;
   2558c:	e7c1      	b.n	25512 <ble_att_svr_rx_read_group_type+0x24>
    rc = ble_att_svr_build_read_group_type_rsp(conn_handle, start_handle,
   2558e:	f10d 0316 	add.w	r3, sp, #22
   25592:	9303      	str	r3, [sp, #12]
   25594:	f10d 0315 	add.w	r3, sp, #21
   25598:	9302      	str	r3, [sp, #8]
   2559a:	ab0b      	add	r3, sp, #44	; 0x2c
   2559c:	9301      	str	r3, [sp, #4]
   2559e:	9400      	str	r4, [sp, #0]
   255a0:	ab06      	add	r3, sp, #24
   255a2:	4642      	mov	r2, r8
   255a4:	4639      	mov	r1, r7
   255a6:	4628      	mov	r0, r5
   255a8:	f7ff fa7e 	bl	24aa8 <ble_att_svr_build_read_group_type_rsp>
   255ac:	4601      	mov	r1, r0
   255ae:	e7b0      	b.n	25512 <ble_att_svr_rx_read_group_type+0x24>

000255b0 <ble_att_svr_rx_write>:
{
   255b0:	b570      	push	{r4, r5, r6, lr}
   255b2:	b084      	sub	sp, #16
   255b4:	4605      	mov	r5, r0
   255b6:	460c      	mov	r4, r1
    txom = NULL;
   255b8:	2300      	movs	r3, #0
   255ba:	9303      	str	r3, [sp, #12]
    att_err = 0;
   255bc:	aa04      	add	r2, sp, #16
   255be:	f802 3d05 	strb.w	r3, [r2, #-5]!
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*req), &att_err);
   255c2:	2102      	movs	r1, #2
   255c4:	4620      	mov	r0, r4
   255c6:	f7fe ffd9 	bl	2457c <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   255ca:	b160      	cbz	r0, 255e6 <ble_att_svr_rx_write+0x36>
   255cc:	4601      	mov	r1, r0
    handle = 0;
   255ce:	2600      	movs	r6, #0
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom, BLE_ATT_OP_WRITE_REQ,
   255d0:	f89d 300b 	ldrb.w	r3, [sp, #11]
   255d4:	9601      	str	r6, [sp, #4]
   255d6:	9300      	str	r3, [sp, #0]
   255d8:	2312      	movs	r3, #18
   255da:	9a03      	ldr	r2, [sp, #12]
   255dc:	4628      	mov	r0, r5
   255de:	f7ff fd89 	bl	250f4 <ble_att_svr_tx_rsp>
}
   255e2:	b004      	add	sp, #16
   255e4:	bd70      	pop	{r4, r5, r6, pc}
    req = (struct ble_att_write_req *)(*rxom)->om_data;
   255e6:	6823      	ldr	r3, [r4, #0]
   255e8:	681b      	ldr	r3, [r3, #0]
    handle = le16toh(req->bawq_handle);
   255ea:	881e      	ldrh	r6, [r3, #0]
    rc = ble_att_svr_build_write_rsp(rxom, &txom, &att_err);
   255ec:	f10d 020b 	add.w	r2, sp, #11
   255f0:	a903      	add	r1, sp, #12
   255f2:	4620      	mov	r0, r4
   255f4:	f7ff f814 	bl	24620 <ble_att_svr_build_write_rsp>
    if (rc != 0) {
   255f8:	4601      	mov	r1, r0
   255fa:	2800      	cmp	r0, #0
   255fc:	d1e8      	bne.n	255d0 <ble_att_svr_rx_write+0x20>
    os_mbuf_adj(*rxom, sizeof(*req));
   255fe:	2102      	movs	r1, #2
   25600:	6820      	ldr	r0, [r4, #0]
   25602:	f7e8 fad6 	bl	dbb2 <os_mbuf_adj>
    rc = ble_att_svr_write_handle(conn_handle, handle, 0, rxom, &att_err);
   25606:	f10d 030b 	add.w	r3, sp, #11
   2560a:	9300      	str	r3, [sp, #0]
   2560c:	4623      	mov	r3, r4
   2560e:	2200      	movs	r2, #0
   25610:	4631      	mov	r1, r6
   25612:	4628      	mov	r0, r5
   25614:	f7ff fbdc 	bl	24dd0 <ble_att_svr_write_handle>
   25618:	4601      	mov	r1, r0
   2561a:	e7d9      	b.n	255d0 <ble_att_svr_rx_write+0x20>

0002561c <ble_att_svr_rx_write_no_rsp>:
{
   2561c:	b570      	push	{r4, r5, r6, lr}
   2561e:	b084      	sub	sp, #16
   25620:	4605      	mov	r5, r0
   25622:	460c      	mov	r4, r1
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*req), &att_err);
   25624:	f10d 020f 	add.w	r2, sp, #15
   25628:	2102      	movs	r1, #2
   2562a:	4620      	mov	r0, r4
   2562c:	f7fe ffa6 	bl	2457c <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   25630:	4603      	mov	r3, r0
   25632:	b110      	cbz	r0, 2563a <ble_att_svr_rx_write_no_rsp+0x1e>
}
   25634:	4618      	mov	r0, r3
   25636:	b004      	add	sp, #16
   25638:	bd70      	pop	{r4, r5, r6, pc}
    req = (struct ble_att_write_req *)(*rxom)->om_data;
   2563a:	6820      	ldr	r0, [r4, #0]
   2563c:	6803      	ldr	r3, [r0, #0]
    handle = le16toh(req->bawq_handle);
   2563e:	881e      	ldrh	r6, [r3, #0]
    os_mbuf_adj(*rxom, sizeof(*req));
   25640:	2102      	movs	r1, #2
   25642:	f7e8 fab6 	bl	dbb2 <os_mbuf_adj>
    return ble_att_svr_write_handle(conn_handle, handle, 0, rxom, &att_err);
   25646:	f10d 030f 	add.w	r3, sp, #15
   2564a:	9300      	str	r3, [sp, #0]
   2564c:	4623      	mov	r3, r4
   2564e:	2200      	movs	r2, #0
   25650:	4631      	mov	r1, r6
   25652:	4628      	mov	r0, r5
   25654:	f7ff fbbc 	bl	24dd0 <ble_att_svr_write_handle>
   25658:	4603      	mov	r3, r0
   2565a:	e7eb      	b.n	25634 <ble_att_svr_rx_write_no_rsp+0x18>

0002565c <ble_att_svr_prep_clear>:
{
   2565c:	b510      	push	{r4, lr}
   2565e:	4604      	mov	r4, r0
    while ((entry = SLIST_FIRST(prep_list)) != NULL) {
   25660:	e003      	b.n	2566a <ble_att_svr_prep_clear+0xe>
        SLIST_REMOVE_HEAD(prep_list, bape_next);
   25662:	6803      	ldr	r3, [r0, #0]
   25664:	6023      	str	r3, [r4, #0]
        ble_att_svr_prep_free(entry);
   25666:	f7ff fae1 	bl	24c2c <ble_att_svr_prep_free>
    while ((entry = SLIST_FIRST(prep_list)) != NULL) {
   2566a:	6820      	ldr	r0, [r4, #0]
   2566c:	2800      	cmp	r0, #0
   2566e:	d1f8      	bne.n	25662 <ble_att_svr_prep_clear+0x6>
}
   25670:	bd10      	pop	{r4, pc}

00025672 <ble_att_svr_rx_prep_write>:
{
   25672:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25676:	b084      	sub	sp, #16
   25678:	4607      	mov	r7, r0
   2567a:	460d      	mov	r5, r1
    att_err = 0;
   2567c:	aa04      	add	r2, sp, #16
   2567e:	2300      	movs	r3, #0
   25680:	f802 3d01 	strb.w	r3, [r2, #-1]!
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*req), &att_err);
   25684:	2104      	movs	r1, #4
   25686:	4628      	mov	r0, r5
   25688:	f7fe ff78 	bl	2457c <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   2568c:	b178      	cbz	r0, 256ae <ble_att_svr_rx_prep_write+0x3c>
   2568e:	4606      	mov	r6, r0
    err_handle = 0;
   25690:	2400      	movs	r4, #0
    txom = NULL;
   25692:	46a0      	mov	r8, r4
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom, BLE_ATT_OP_PREP_WRITE_REQ,
   25694:	f89d 300f 	ldrb.w	r3, [sp, #15]
   25698:	9401      	str	r4, [sp, #4]
   2569a:	9300      	str	r3, [sp, #0]
   2569c:	2316      	movs	r3, #22
   2569e:	4642      	mov	r2, r8
   256a0:	4631      	mov	r1, r6
   256a2:	4638      	mov	r0, r7
   256a4:	f7ff fd26 	bl	250f4 <ble_att_svr_tx_rsp>
}
   256a8:	b004      	add	sp, #16
   256aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    req = (struct ble_att_prep_write_cmd *)(*rxom)->om_data;
   256ae:	682b      	ldr	r3, [r5, #0]
   256b0:	f8d3 8000 	ldr.w	r8, [r3]
    err_handle = le16toh(req->bapc_handle);
   256b4:	f8b8 4000 	ldrh.w	r4, [r8]
    attr_entry = ble_att_svr_find_by_handle(le16toh(req->bapc_handle));
   256b8:	4620      	mov	r0, r4
   256ba:	f7ff fb7d 	bl	24db8 <ble_att_svr_find_by_handle>
    if (attr_entry == NULL) {
   256be:	4602      	mov	r2, r0
   256c0:	b150      	cbz	r0, 256d8 <ble_att_svr_rx_prep_write+0x66>
    rc = ble_att_svr_check_perms(conn_handle, 0, attr_entry, &att_err);
   256c2:	f10d 030f 	add.w	r3, sp, #15
   256c6:	2100      	movs	r1, #0
   256c8:	4638      	mov	r0, r7
   256ca:	f7fe fe6c 	bl	243a6 <ble_att_svr_check_perms>
    if (rc != 0) {
   256ce:	4606      	mov	r6, r0
   256d0:	b148      	cbz	r0, 256e6 <ble_att_svr_rx_prep_write+0x74>
    txom = NULL;
   256d2:	f04f 0800 	mov.w	r8, #0
   256d6:	e7dd      	b.n	25694 <ble_att_svr_rx_prep_write+0x22>
        att_err = BLE_ATT_ERR_INVALID_HANDLE;
   256d8:	2301      	movs	r3, #1
   256da:	f88d 300f 	strb.w	r3, [sp, #15]
        rc = BLE_HS_ENOENT;
   256de:	2605      	movs	r6, #5
    txom = NULL;
   256e0:	f04f 0800 	mov.w	r8, #0
        goto done;
   256e4:	e7d6      	b.n	25694 <ble_att_svr_rx_prep_write+0x22>
    ble_hs_lock();
   256e6:	f7f8 ff1d 	bl	1e524 <ble_hs_lock>
    rc = ble_att_svr_insert_prep_entry(conn_handle, le16toh(req->bapc_handle),
   256ea:	f8b8 1000 	ldrh.w	r1, [r8]
                                       le16toh(req->bapc_offset), *rxom,
   256ee:	f8b8 2002 	ldrh.w	r2, [r8, #2]
    rc = ble_att_svr_insert_prep_entry(conn_handle, le16toh(req->bapc_handle),
   256f2:	f10d 030f 	add.w	r3, sp, #15
   256f6:	9300      	str	r3, [sp, #0]
   256f8:	682b      	ldr	r3, [r5, #0]
   256fa:	4638      	mov	r0, r7
   256fc:	f7ff fac2 	bl	24c84 <ble_att_svr_insert_prep_entry>
   25700:	4606      	mov	r6, r0
    ble_hs_unlock();
   25702:	f7f8 ff13 	bl	1e52c <ble_hs_unlock>
    txom = *rxom;
   25706:	f8d5 8000 	ldr.w	r8, [r5]
    *rxom = NULL;
   2570a:	2300      	movs	r3, #0
   2570c:	602b      	str	r3, [r5, #0]
    if (rc != 0) {
   2570e:	2e00      	cmp	r6, #0
   25710:	d1c0      	bne.n	25694 <ble_att_svr_rx_prep_write+0x22>
    os_mbuf_prepend(txom, 1);
   25712:	2101      	movs	r1, #1
   25714:	4640      	mov	r0, r8
   25716:	f7e8 fb3b 	bl	dd90 <os_mbuf_prepend>
    txom->om_data[0] = BLE_ATT_OP_PREP_WRITE_RSP;
   2571a:	f8d8 3000 	ldr.w	r3, [r8]
   2571e:	2217      	movs	r2, #23
   25720:	701a      	strb	r2, [r3, #0]
   25722:	e7b7      	b.n	25694 <ble_att_svr_rx_prep_write+0x22>

00025724 <ble_att_svr_rx_exec_write>:
{
   25724:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   25728:	b085      	sub	sp, #20
   2572a:	4607      	mov	r7, r0
   2572c:	460e      	mov	r6, r1
    err_handle = 0;
   2572e:	2300      	movs	r3, #0
   25730:	f8ad 300a 	strh.w	r3, [sp, #10]
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*req), &att_err);
   25734:	f10d 0209 	add.w	r2, sp, #9
   25738:	2101      	movs	r1, #1
   2573a:	4630      	mov	r0, r6
   2573c:	f7fe ff1e 	bl	2457c <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   25740:	4605      	mov	r5, r0
   25742:	b190      	cbz	r0, 2576a <ble_att_svr_rx_exec_write+0x46>
        flags = 0;
   25744:	f04f 0800 	mov.w	r8, #0
    txom = NULL;
   25748:	4644      	mov	r4, r8
    if (rc == 0) {
   2574a:	b335      	cbz	r5, 2579a <ble_att_svr_rx_exec_write+0x76>
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom, BLE_ATT_OP_EXEC_WRITE_REQ,
   2574c:	f89d 3009 	ldrb.w	r3, [sp, #9]
   25750:	f8bd 200a 	ldrh.w	r2, [sp, #10]
   25754:	9201      	str	r2, [sp, #4]
   25756:	9300      	str	r3, [sp, #0]
   25758:	2318      	movs	r3, #24
   2575a:	4622      	mov	r2, r4
   2575c:	4629      	mov	r1, r5
   2575e:	4638      	mov	r0, r7
   25760:	f7ff fcc8 	bl	250f4 <ble_att_svr_tx_rsp>
}
   25764:	b005      	add	sp, #20
   25766:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    req = (struct ble_att_exec_write_req *)(*rxom)->om_data;
   2576a:	6834      	ldr	r4, [r6, #0]
   2576c:	6823      	ldr	r3, [r4, #0]
    flags = req->baeq_flags;
   2576e:	f893 8000 	ldrb.w	r8, [r3]
    *rxom = NULL;
   25772:	f04f 0900 	mov.w	r9, #0
   25776:	f8c6 9000 	str.w	r9, [r6]
    os_mbuf_adj(txom, OS_MBUF_PKTLEN(txom));
   2577a:	8a21      	ldrh	r1, [r4, #16]
   2577c:	4620      	mov	r0, r4
   2577e:	f7e8 fa18 	bl	dbb2 <os_mbuf_adj>
    if (ble_att_cmd_prepare(BLE_ATT_OP_EXEC_WRITE_RSP, 0, txom) == NULL) {
   25782:	4622      	mov	r2, r4
   25784:	4649      	mov	r1, r9
   25786:	2019      	movs	r0, #25
   25788:	f7fe fd60 	bl	2424c <ble_att_cmd_prepare>
   2578c:	2800      	cmp	r0, #0
   2578e:	d1dc      	bne.n	2574a <ble_att_svr_rx_exec_write+0x26>
        att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   25790:	2311      	movs	r3, #17
   25792:	f88d 3009 	strb.w	r3, [sp, #9]
        rc = BLE_HS_ENOMEM;
   25796:	2506      	movs	r5, #6
        goto done;
   25798:	e7d7      	b.n	2574a <ble_att_svr_rx_exec_write+0x26>
        ble_hs_lock();
   2579a:	f7f8 fec3 	bl	1e524 <ble_hs_lock>
        conn = ble_hs_conn_find_assert(conn_handle);
   2579e:	4638      	mov	r0, r7
   257a0:	f7f9 fd68 	bl	1f274 <ble_hs_conn_find_assert>
        prep_list = conn->bhc_att_svr.basc_prep_list;
   257a4:	6c43      	ldr	r3, [r0, #68]	; 0x44
   257a6:	9303      	str	r3, [sp, #12]
        SLIST_INIT(&conn->bhc_att_svr.basc_prep_list);
   257a8:	2300      	movs	r3, #0
   257aa:	6443      	str	r3, [r0, #68]	; 0x44
        ble_hs_unlock();
   257ac:	f7f8 febe 	bl	1e52c <ble_hs_unlock>
        if (flags) {
   257b0:	f1b8 0f00 	cmp.w	r8, #0
   257b4:	d103      	bne.n	257be <ble_att_svr_rx_exec_write+0x9a>
        ble_att_svr_prep_clear(&prep_list);
   257b6:	a803      	add	r0, sp, #12
   257b8:	f7ff ff50 	bl	2565c <ble_att_svr_prep_clear>
   257bc:	e7c6      	b.n	2574c <ble_att_svr_rx_exec_write+0x28>
            att_err = ble_att_svr_prep_write(conn_handle, &prep_list,
   257be:	f10d 020a 	add.w	r2, sp, #10
   257c2:	a903      	add	r1, sp, #12
   257c4:	4638      	mov	r0, r7
   257c6:	f7ff fb1d 	bl	24e04 <ble_att_svr_prep_write>
   257ca:	b2c0      	uxtb	r0, r0
   257cc:	f88d 0009 	strb.w	r0, [sp, #9]
            if (att_err != 0) {
   257d0:	2800      	cmp	r0, #0
   257d2:	d0f0      	beq.n	257b6 <ble_att_svr_rx_exec_write+0x92>
                rc = BLE_HS_EAPP;
   257d4:	2509      	movs	r5, #9
   257d6:	e7ee      	b.n	257b6 <ble_att_svr_rx_exec_write+0x92>

000257d8 <ble_att_svr_rx_notify>:
{
   257d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   257da:	4607      	mov	r7, r0
   257dc:	460c      	mov	r4, r1
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*req), NULL);
   257de:	2200      	movs	r2, #0
   257e0:	2102      	movs	r1, #2
   257e2:	4620      	mov	r0, r4
   257e4:	f7fe feca 	bl	2457c <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   257e8:	b988      	cbnz	r0, 2580e <ble_att_svr_rx_notify+0x36>
   257ea:	4605      	mov	r5, r0
    req = (struct ble_att_notify_req *)(*rxom)->om_data;
   257ec:	6820      	ldr	r0, [r4, #0]
   257ee:	6803      	ldr	r3, [r0, #0]
    handle = le16toh(req->banq_handle);
   257f0:	881e      	ldrh	r6, [r3, #0]
    if (handle == 0) {
   257f2:	b176      	cbz	r6, 25812 <ble_att_svr_rx_notify+0x3a>
    os_mbuf_adj(*rxom, sizeof(*req));
   257f4:	2102      	movs	r1, #2
   257f6:	f7e8 f9dc 	bl	dbb2 <os_mbuf_adj>
    ble_gap_notify_rx_event(conn_handle, handle, *rxom, 0);
   257fa:	2300      	movs	r3, #0
   257fc:	6822      	ldr	r2, [r4, #0]
   257fe:	4631      	mov	r1, r6
   25800:	4638      	mov	r0, r7
   25802:	f7f5 ffe3 	bl	1b7cc <ble_gap_notify_rx_event>
    *rxom = NULL;
   25806:	2300      	movs	r3, #0
   25808:	6023      	str	r3, [r4, #0]
}
   2580a:	4628      	mov	r0, r5
   2580c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return BLE_HS_ENOMEM;
   2580e:	2506      	movs	r5, #6
   25810:	e7fb      	b.n	2580a <ble_att_svr_rx_notify+0x32>
        return BLE_HS_EBADDATA;
   25812:	250a      	movs	r5, #10
   25814:	e7f9      	b.n	2580a <ble_att_svr_rx_notify+0x32>

00025816 <ble_att_svr_rx_indicate>:
{
   25816:	b5f0      	push	{r4, r5, r6, r7, lr}
   25818:	b085      	sub	sp, #20
   2581a:	4607      	mov	r7, r0
   2581c:	460c      	mov	r4, r1
    txom = NULL;
   2581e:	2200      	movs	r2, #0
   25820:	9203      	str	r2, [sp, #12]
    att_err = 0;
   25822:	f88d 200b 	strb.w	r2, [sp, #11]
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*req), NULL);
   25826:	2102      	movs	r1, #2
   25828:	4620      	mov	r0, r4
   2582a:	f7fe fea7 	bl	2457c <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   2582e:	b9d0      	cbnz	r0, 25866 <ble_att_svr_rx_indicate+0x50>
    req = (struct ble_att_indicate_req *)(*rxom)->om_data;
   25830:	6823      	ldr	r3, [r4, #0]
   25832:	681b      	ldr	r3, [r3, #0]
    handle = le16toh(req->baiq_handle);
   25834:	881d      	ldrh	r5, [r3, #0]
    if (handle == 0) {
   25836:	b90d      	cbnz	r5, 2583c <ble_att_svr_rx_indicate+0x26>
        rc = BLE_HS_EBADDATA;
   25838:	260a      	movs	r6, #10
   2583a:	e016      	b.n	2586a <ble_att_svr_rx_indicate+0x54>
    rc = ble_att_svr_build_indicate_rsp(rxom, &txom, &att_err);
   2583c:	f10d 020b 	add.w	r2, sp, #11
   25840:	a903      	add	r1, sp, #12
   25842:	4620      	mov	r0, r4
   25844:	f7fe ff05 	bl	24652 <ble_att_svr_build_indicate_rsp>
    if (rc != 0) {
   25848:	4606      	mov	r6, r0
   2584a:	b970      	cbnz	r0, 2586a <ble_att_svr_rx_indicate+0x54>
    os_mbuf_adj(*rxom, sizeof(*req));
   2584c:	2102      	movs	r1, #2
   2584e:	6820      	ldr	r0, [r4, #0]
   25850:	f7e8 f9af 	bl	dbb2 <os_mbuf_adj>
    ble_gap_notify_rx_event(conn_handle, handle, *rxom, 1);
   25854:	2301      	movs	r3, #1
   25856:	6822      	ldr	r2, [r4, #0]
   25858:	4629      	mov	r1, r5
   2585a:	4638      	mov	r0, r7
   2585c:	f7f5 ffb6 	bl	1b7cc <ble_gap_notify_rx_event>
    *rxom = NULL;
   25860:	2300      	movs	r3, #0
   25862:	6023      	str	r3, [r4, #0]
   25864:	e001      	b.n	2586a <ble_att_svr_rx_indicate+0x54>
   25866:	4606      	mov	r6, r0
    handle = 0;
   25868:	2500      	movs	r5, #0
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom, BLE_ATT_OP_INDICATE_REQ,
   2586a:	f89d 300b 	ldrb.w	r3, [sp, #11]
   2586e:	9501      	str	r5, [sp, #4]
   25870:	9300      	str	r3, [sp, #0]
   25872:	231d      	movs	r3, #29
   25874:	9a03      	ldr	r2, [sp, #12]
   25876:	4631      	mov	r1, r6
   25878:	4638      	mov	r0, r7
   2587a:	f7ff fc3b 	bl	250f4 <ble_att_svr_tx_rsp>
}
   2587e:	b005      	add	sp, #20
   25880:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

00025884 <ble_att_svr_start>:

int
ble_att_svr_start(void)
{
   25884:	b510      	push	{r4, lr}
   25886:	b082      	sub	sp, #8
    int rc;

    ble_att_svr_free_start_mem();
   25888:	f7ff fa5e 	bl	24d48 <ble_att_svr_free_start_mem>

    if (ble_hs_max_attrs > 0) {
   2588c:	4b0f      	ldr	r3, [pc, #60]	; (258cc <ble_att_svr_start+0x48>)
   2588e:	881c      	ldrh	r4, [r3, #0]
   25890:	b91c      	cbnz	r4, 2589a <ble_att_svr_start+0x16>
            rc = BLE_HS_EOS;
            goto err;
        }
    }

    return 0;
   25892:	2400      	movs	r4, #0

err:
    ble_att_svr_free_start_mem();
    return rc;
}
   25894:	4620      	mov	r0, r4
   25896:	b002      	add	sp, #8
   25898:	bd10      	pop	{r4, pc}
        ble_att_svr_entry_mem = malloc(
   2589a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   2589e:	0098      	lsls	r0, r3, #2
   258a0:	f004 f94e 	bl	29b40 <malloc>
   258a4:	4b0a      	ldr	r3, [pc, #40]	; (258d0 <ble_att_svr_start+0x4c>)
   258a6:	6018      	str	r0, [r3, #0]
        if (ble_att_svr_entry_mem == NULL) {
   258a8:	b160      	cbz	r0, 258c4 <ble_att_svr_start+0x40>
        rc = os_mempool_init(&ble_att_svr_entry_pool, ble_hs_max_attrs,
   258aa:	4b0a      	ldr	r3, [pc, #40]	; (258d4 <ble_att_svr_start+0x50>)
   258ac:	9300      	str	r3, [sp, #0]
   258ae:	4603      	mov	r3, r0
   258b0:	2214      	movs	r2, #20
   258b2:	4621      	mov	r1, r4
   258b4:	4808      	ldr	r0, [pc, #32]	; (258d8 <ble_att_svr_start+0x54>)
   258b6:	f7e7 faf7 	bl	cea8 <os_mempool_init>
        if (rc != 0) {
   258ba:	b128      	cbz	r0, 258c8 <ble_att_svr_start+0x44>
            rc = BLE_HS_EOS;
   258bc:	240b      	movs	r4, #11
    ble_att_svr_free_start_mem();
   258be:	f7ff fa43 	bl	24d48 <ble_att_svr_free_start_mem>
    return rc;
   258c2:	e7e7      	b.n	25894 <ble_att_svr_start+0x10>
            rc = BLE_HS_ENOMEM;
   258c4:	2406      	movs	r4, #6
   258c6:	e7fa      	b.n	258be <ble_att_svr_start+0x3a>
    return 0;
   258c8:	2400      	movs	r4, #0
   258ca:	e7e3      	b.n	25894 <ble_att_svr_start+0x10>
   258cc:	2000464c 	.word	0x2000464c
   258d0:	2000328c 	.word	0x2000328c
   258d4:	0002b91c 	.word	0x0002b91c
   258d8:	20003290 	.word	0x20003290

000258dc <ble_att_svr_init>:

int
ble_att_svr_init(void)
{
   258dc:	b500      	push	{lr}
   258de:	b083      	sub	sp, #12
    int rc;

    if (MYNEWT_VAL(BLE_ATT_SVR_MAX_PREP_ENTRIES) > 0) {
        rc = os_mempool_init(&ble_att_svr_prep_entry_pool,
   258e0:	4b0a      	ldr	r3, [pc, #40]	; (2590c <ble_att_svr_init+0x30>)
   258e2:	9300      	str	r3, [sp, #0]
   258e4:	4b0a      	ldr	r3, [pc, #40]	; (25910 <ble_att_svr_init+0x34>)
   258e6:	220c      	movs	r2, #12
   258e8:	2140      	movs	r1, #64	; 0x40
   258ea:	480a      	ldr	r0, [pc, #40]	; (25914 <ble_att_svr_init+0x38>)
   258ec:	f7e7 fadc 	bl	cea8 <os_mempool_init>
                             MYNEWT_VAL(BLE_ATT_SVR_MAX_PREP_ENTRIES),
                             sizeof (struct ble_att_prep_entry),
                             ble_att_svr_prep_entry_mem,
                             "ble_att_svr_prep_entry_pool");
        if (rc != 0) {
   258f0:	b950      	cbnz	r0, 25908 <ble_att_svr_init+0x2c>
            return BLE_HS_EOS;
        }
    }

    STAILQ_INIT(&ble_att_svr_list);
   258f2:	4b09      	ldr	r3, [pc, #36]	; (25918 <ble_att_svr_init+0x3c>)
   258f4:	6018      	str	r0, [r3, #0]
   258f6:	605b      	str	r3, [r3, #4]
    STAILQ_INIT(&ble_att_svr_hidden_list);
   258f8:	4b08      	ldr	r3, [pc, #32]	; (2591c <ble_att_svr_init+0x40>)
   258fa:	6018      	str	r0, [r3, #0]
   258fc:	605b      	str	r3, [r3, #4]

    ble_att_svr_id = 0;
   258fe:	4b08      	ldr	r3, [pc, #32]	; (25920 <ble_att_svr_init+0x44>)
   25900:	8018      	strh	r0, [r3, #0]

    return 0;
}
   25902:	b003      	add	sp, #12
   25904:	f85d fb04 	ldr.w	pc, [sp], #4
            return BLE_HS_EOS;
   25908:	200b      	movs	r0, #11
   2590a:	e7fa      	b.n	25902 <ble_att_svr_init+0x26>
   2590c:	0002b900 	.word	0x0002b900
   25910:	200032c0 	.word	0x200032c0
   25914:	200035c0 	.word	0x200035c0
   25918:	200032b8 	.word	0x200032b8
   2591c:	200032ac 	.word	0x200032ac
   25920:	200032b4 	.word	0x200032b4

00025924 <ble_sm_alg_log_buf>:

#if MYNEWT_VAL(BLE_SM_SC)

static void
ble_sm_alg_log_buf(const char *name, const uint8_t *buf, int len)
{
   25924:	b508      	push	{r3, lr}
   25926:	4608      	mov	r0, r1
    BLE_HS_LOG(DEBUG, "    %s=", name);
    ble_hs_log_flat_buf(buf, len);
   25928:	4611      	mov	r1, r2
   2592a:	f7fa fb93 	bl	20054 <ble_hs_log_flat_buf>
    BLE_HS_LOG(DEBUG, "\n");
}
   2592e:	bd08      	pop	{r3, pc}

00025930 <ble_sm_alg_aes_cmac>:
 * @param out                   Output; message authentication code.
 */
static int
ble_sm_alg_aes_cmac(const uint8_t *key, const uint8_t *in, size_t len,
                    uint8_t *out)
{
   25930:	b570      	push	{r4, r5, r6, lr}
   25932:	b0c2      	sub	sp, #264	; 0x108
   25934:	460c      	mov	r4, r1
   25936:	4615      	mov	r5, r2
   25938:	461e      	mov	r6, r3
    struct tc_aes_key_sched_struct sched;
    struct tc_cmac_struct state;

    if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   2593a:	aa16      	add	r2, sp, #88	; 0x58
   2593c:	4601      	mov	r1, r0
   2593e:	4668      	mov	r0, sp
   25940:	f001 f88d 	bl	26a5e <tc_cmac_setup>
   25944:	b170      	cbz	r0, 25964 <ble_sm_alg_aes_cmac+0x34>
        return BLE_HS_EUNKNOWN;
    }

    if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
   25946:	462a      	mov	r2, r5
   25948:	4621      	mov	r1, r4
   2594a:	4668      	mov	r0, sp
   2594c:	f001 f8b4 	bl	26ab8 <tc_cmac_update>
   25950:	b158      	cbz	r0, 2596a <ble_sm_alg_aes_cmac+0x3a>
        return BLE_HS_EUNKNOWN;
    }

    if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
   25952:	4669      	mov	r1, sp
   25954:	4630      	mov	r0, r6
   25956:	f001 f919 	bl	26b8c <tc_cmac_final>
   2595a:	b108      	cbz	r0, 25960 <ble_sm_alg_aes_cmac+0x30>
        return BLE_HS_EUNKNOWN;
    }

    return 0;
   2595c:	2000      	movs	r0, #0
   2595e:	e002      	b.n	25966 <ble_sm_alg_aes_cmac+0x36>
        return BLE_HS_EUNKNOWN;
   25960:	2011      	movs	r0, #17
   25962:	e000      	b.n	25966 <ble_sm_alg_aes_cmac+0x36>
        return BLE_HS_EUNKNOWN;
   25964:	2011      	movs	r0, #17
}
   25966:	b042      	add	sp, #264	; 0x108
   25968:	bd70      	pop	{r4, r5, r6, pc}
        return BLE_HS_EUNKNOWN;
   2596a:	2011      	movs	r0, #17
   2596c:	e7fb      	b.n	25966 <ble_sm_alg_aes_cmac+0x36>

0002596e <ble_sm_alg_rand>:
}

/* used by uECC to get random data */
static int
ble_sm_alg_rand(uint8_t *dst, unsigned int size)
{
   2596e:	b508      	push	{r3, lr}
        num = trng_read(g_trng, dst, size);
        dst += num;
        size -= num;
    }
#else
    if (ble_hs_hci_util_rand(dst, size)) {
   25970:	f7fa fa44 	bl	1fdfc <ble_hs_hci_util_rand>
   25974:	b908      	cbnz	r0, 2597a <ble_sm_alg_rand+0xc>
        return 0;
    }
#endif

    return 1;
   25976:	2001      	movs	r0, #1
}
   25978:	bd08      	pop	{r3, pc}
        return 0;
   2597a:	2000      	movs	r0, #0
   2597c:	e7fc      	b.n	25978 <ble_sm_alg_rand+0xa>

0002597e <ble_sm_alg_f4>:
{
   2597e:	b5f0      	push	{r4, r5, r6, r7, lr}
   25980:	b097      	sub	sp, #92	; 0x5c
   25982:	4607      	mov	r7, r0
   25984:	460d      	mov	r5, r1
   25986:	4614      	mov	r4, r2
   25988:	461e      	mov	r6, r3
    ble_hs_log_flat_buf(u, 32);
   2598a:	2120      	movs	r1, #32
   2598c:	f7fa fb62 	bl	20054 <ble_hs_log_flat_buf>
    ble_hs_log_flat_buf(v, 32);
   25990:	2120      	movs	r1, #32
   25992:	4628      	mov	r0, r5
   25994:	f7fa fb5e 	bl	20054 <ble_hs_log_flat_buf>
    ble_hs_log_flat_buf(x, 16);
   25998:	2110      	movs	r1, #16
   2599a:	4620      	mov	r0, r4
   2599c:	f7fa fb5a 	bl	20054 <ble_hs_log_flat_buf>
    swap_buf(m, u, 32);
   259a0:	2220      	movs	r2, #32
   259a2:	4639      	mov	r1, r7
   259a4:	a801      	add	r0, sp, #4
   259a6:	f003 ff58 	bl	2985a <swap_buf>
    swap_buf(m + 32, v, 32);
   259aa:	2220      	movs	r2, #32
   259ac:	4629      	mov	r1, r5
   259ae:	a809      	add	r0, sp, #36	; 0x24
   259b0:	f003 ff53 	bl	2985a <swap_buf>
    m[64] = z;
   259b4:	f88d 6044 	strb.w	r6, [sp, #68]	; 0x44
    swap_buf(xs, x, 16);
   259b8:	2210      	movs	r2, #16
   259ba:	4621      	mov	r1, r4
   259bc:	a812      	add	r0, sp, #72	; 0x48
   259be:	f003 ff4c 	bl	2985a <swap_buf>
    rc = ble_sm_alg_aes_cmac(xs, m, sizeof(m), out_enc_data);
   259c2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   259c4:	2241      	movs	r2, #65	; 0x41
   259c6:	a901      	add	r1, sp, #4
   259c8:	a812      	add	r0, sp, #72	; 0x48
   259ca:	f7ff ffb1 	bl	25930 <ble_sm_alg_aes_cmac>
    if (rc != 0) {
   259ce:	b958      	cbnz	r0, 259e8 <ble_sm_alg_f4+0x6a>
   259d0:	4604      	mov	r4, r0
    swap_in_place(out_enc_data, 16);
   259d2:	2110      	movs	r1, #16
   259d4:	981c      	ldr	r0, [sp, #112]	; 0x70
   259d6:	f003 ff30 	bl	2983a <swap_in_place>
    ble_hs_log_flat_buf(out_enc_data, 16);
   259da:	2110      	movs	r1, #16
   259dc:	981c      	ldr	r0, [sp, #112]	; 0x70
   259de:	f7fa fb39 	bl	20054 <ble_hs_log_flat_buf>
}
   259e2:	4620      	mov	r0, r4
   259e4:	b017      	add	sp, #92	; 0x5c
   259e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return BLE_HS_EUNKNOWN;
   259e8:	2411      	movs	r4, #17
   259ea:	e7fa      	b.n	259e2 <ble_sm_alg_f4+0x64>

000259ec <ble_sm_alg_f5>:
{
   259ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   259ee:	b09b      	sub	sp, #108	; 0x6c
   259f0:	4604      	mov	r4, r0
   259f2:	460e      	mov	r6, r1
   259f4:	4615      	mov	r5, r2
   259f6:	461f      	mov	r7, r3
    uint8_t m[53] = {
   259f8:	2235      	movs	r2, #53	; 0x35
   259fa:	2100      	movs	r1, #0
   259fc:	a80c      	add	r0, sp, #48	; 0x30
   259fe:	f7e8 fd5f 	bl	e4c0 <memset>
   25a02:	2362      	movs	r3, #98	; 0x62
   25a04:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
   25a08:	2374      	movs	r3, #116	; 0x74
   25a0a:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
   25a0e:	236c      	movs	r3, #108	; 0x6c
   25a10:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   25a14:	2365      	movs	r3, #101	; 0x65
   25a16:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
   25a1a:	2301      	movs	r3, #1
   25a1c:	f88d 3063 	strb.w	r3, [sp, #99]	; 0x63
    ble_sm_alg_log_buf("w", w, 32);
   25a20:	2220      	movs	r2, #32
   25a22:	4621      	mov	r1, r4
   25a24:	4834      	ldr	r0, [pc, #208]	; (25af8 <ble_sm_alg_f5+0x10c>)
   25a26:	f7ff ff7d 	bl	25924 <ble_sm_alg_log_buf>
    ble_sm_alg_log_buf("n1", n1, 16);
   25a2a:	2210      	movs	r2, #16
   25a2c:	4631      	mov	r1, r6
   25a2e:	4833      	ldr	r0, [pc, #204]	; (25afc <ble_sm_alg_f5+0x110>)
   25a30:	f7ff ff78 	bl	25924 <ble_sm_alg_log_buf>
    ble_sm_alg_log_buf("n2", n2, 16);
   25a34:	2210      	movs	r2, #16
   25a36:	4629      	mov	r1, r5
   25a38:	4831      	ldr	r0, [pc, #196]	; (25b00 <ble_sm_alg_f5+0x114>)
   25a3a:	f7ff ff73 	bl	25924 <ble_sm_alg_log_buf>
    swap_buf(ws, w, 32);
   25a3e:	2220      	movs	r2, #32
   25a40:	4621      	mov	r1, r4
   25a42:	a804      	add	r0, sp, #16
   25a44:	f003 ff09 	bl	2985a <swap_buf>
    rc = ble_sm_alg_aes_cmac(salt, ws, 32, t);
   25a48:	466b      	mov	r3, sp
   25a4a:	2220      	movs	r2, #32
   25a4c:	a904      	add	r1, sp, #16
   25a4e:	482d      	ldr	r0, [pc, #180]	; (25b04 <ble_sm_alg_f5+0x118>)
   25a50:	f7ff ff6e 	bl	25930 <ble_sm_alg_aes_cmac>
    if (rc != 0) {
   25a54:	2800      	cmp	r0, #0
   25a56:	d147      	bne.n	25ae8 <ble_sm_alg_f5+0xfc>
    ble_sm_alg_log_buf("t", t, 16);
   25a58:	2210      	movs	r2, #16
   25a5a:	4669      	mov	r1, sp
   25a5c:	482a      	ldr	r0, [pc, #168]	; (25b08 <ble_sm_alg_f5+0x11c>)
   25a5e:	f7ff ff61 	bl	25924 <ble_sm_alg_log_buf>
    swap_buf(m + 5, n1, 16);
   25a62:	2210      	movs	r2, #16
   25a64:	4631      	mov	r1, r6
   25a66:	f10d 0035 	add.w	r0, sp, #53	; 0x35
   25a6a:	f003 fef6 	bl	2985a <swap_buf>
    swap_buf(m + 21, n2, 16);
   25a6e:	2210      	movs	r2, #16
   25a70:	4629      	mov	r1, r5
   25a72:	f10d 0045 	add.w	r0, sp, #69	; 0x45
   25a76:	f003 fef0 	bl	2985a <swap_buf>
    m[37] = a1t;
   25a7a:	f88d 7055 	strb.w	r7, [sp, #85]	; 0x55
    swap_buf(m + 38, a1, 6);
   25a7e:	2206      	movs	r2, #6
   25a80:	9920      	ldr	r1, [sp, #128]	; 0x80
   25a82:	f10d 0056 	add.w	r0, sp, #86	; 0x56
   25a86:	f003 fee8 	bl	2985a <swap_buf>
    m[44] = a2t;
   25a8a:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
   25a8e:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
    swap_buf(m + 45, a2, 6);
   25a92:	2206      	movs	r2, #6
   25a94:	9922      	ldr	r1, [sp, #136]	; 0x88
   25a96:	f10d 005d 	add.w	r0, sp, #93	; 0x5d
   25a9a:	f003 fede 	bl	2985a <swap_buf>
    rc = ble_sm_alg_aes_cmac(t, m, sizeof(m), mackey);
   25a9e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   25aa0:	2235      	movs	r2, #53	; 0x35
   25aa2:	a90c      	add	r1, sp, #48	; 0x30
   25aa4:	4668      	mov	r0, sp
   25aa6:	f7ff ff43 	bl	25930 <ble_sm_alg_aes_cmac>
    if (rc != 0) {
   25aaa:	bb08      	cbnz	r0, 25af0 <ble_sm_alg_f5+0x104>
    ble_sm_alg_log_buf("mackey", mackey, 16);
   25aac:	2210      	movs	r2, #16
   25aae:	9923      	ldr	r1, [sp, #140]	; 0x8c
   25ab0:	4816      	ldr	r0, [pc, #88]	; (25b0c <ble_sm_alg_f5+0x120>)
   25ab2:	f7ff ff37 	bl	25924 <ble_sm_alg_log_buf>
    swap_in_place(mackey, 16);
   25ab6:	2110      	movs	r1, #16
   25ab8:	9823      	ldr	r0, [sp, #140]	; 0x8c
   25aba:	f003 febe 	bl	2983a <swap_in_place>
    m[0] = 0x01;
   25abe:	a91a      	add	r1, sp, #104	; 0x68
   25ac0:	2301      	movs	r3, #1
   25ac2:	f801 3d38 	strb.w	r3, [r1, #-56]!
    rc = ble_sm_alg_aes_cmac(t, m, sizeof(m), ltk);
   25ac6:	9b24      	ldr	r3, [sp, #144]	; 0x90
   25ac8:	2235      	movs	r2, #53	; 0x35
   25aca:	4668      	mov	r0, sp
   25acc:	f7ff ff30 	bl	25930 <ble_sm_alg_aes_cmac>
    if (rc != 0) {
   25ad0:	4604      	mov	r4, r0
   25ad2:	b978      	cbnz	r0, 25af4 <ble_sm_alg_f5+0x108>
    ble_sm_alg_log_buf("ltk", ltk, 16);
   25ad4:	2210      	movs	r2, #16
   25ad6:	9924      	ldr	r1, [sp, #144]	; 0x90
   25ad8:	480d      	ldr	r0, [pc, #52]	; (25b10 <ble_sm_alg_f5+0x124>)
   25ada:	f7ff ff23 	bl	25924 <ble_sm_alg_log_buf>
    swap_in_place(ltk, 16);
   25ade:	2110      	movs	r1, #16
   25ae0:	9824      	ldr	r0, [sp, #144]	; 0x90
   25ae2:	f003 feaa 	bl	2983a <swap_in_place>
    return 0;
   25ae6:	e000      	b.n	25aea <ble_sm_alg_f5+0xfe>
        return BLE_HS_EUNKNOWN;
   25ae8:	2411      	movs	r4, #17
}
   25aea:	4620      	mov	r0, r4
   25aec:	b01b      	add	sp, #108	; 0x6c
   25aee:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return BLE_HS_EUNKNOWN;
   25af0:	2411      	movs	r4, #17
   25af2:	e7fa      	b.n	25aea <ble_sm_alg_f5+0xfe>
        return BLE_HS_EUNKNOWN;
   25af4:	2411      	movs	r4, #17
   25af6:	e7f8      	b.n	25aea <ble_sm_alg_f5+0xfe>
   25af8:	0002b954 	.word	0x0002b954
   25afc:	0002b958 	.word	0x0002b958
   25b00:	0002b95c 	.word	0x0002b95c
   25b04:	0002ba44 	.word	0x0002ba44
   25b08:	0002acd0 	.word	0x0002acd0
   25b0c:	0002b960 	.word	0x0002b960
   25b10:	0002b968 	.word	0x0002b968

00025b14 <ble_sm_alg_f6>:
{
   25b14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   25b18:	b097      	sub	sp, #92	; 0x5c
   25b1a:	4606      	mov	r6, r0
   25b1c:	4689      	mov	r9, r1
   25b1e:	4690      	mov	r8, r2
   25b20:	461f      	mov	r7, r3
   25b22:	9d20      	ldr	r5, [sp, #128]	; 0x80
   25b24:	9c22      	ldr	r4, [sp, #136]	; 0x88
    ble_sm_alg_log_buf("w", w, 16);
   25b26:	2210      	movs	r2, #16
   25b28:	4601      	mov	r1, r0
   25b2a:	483c      	ldr	r0, [pc, #240]	; (25c1c <ble_sm_alg_f6+0x108>)
   25b2c:	f7ff fefa 	bl	25924 <ble_sm_alg_log_buf>
    ble_sm_alg_log_buf("n1", n1, 16);
   25b30:	2210      	movs	r2, #16
   25b32:	4649      	mov	r1, r9
   25b34:	483a      	ldr	r0, [pc, #232]	; (25c20 <ble_sm_alg_f6+0x10c>)
   25b36:	f7ff fef5 	bl	25924 <ble_sm_alg_log_buf>
    ble_sm_alg_log_buf("n2", n2, 16);
   25b3a:	2210      	movs	r2, #16
   25b3c:	4641      	mov	r1, r8
   25b3e:	4839      	ldr	r0, [pc, #228]	; (25c24 <ble_sm_alg_f6+0x110>)
   25b40:	f7ff fef0 	bl	25924 <ble_sm_alg_log_buf>
    ble_sm_alg_log_buf("r", r, 16);
   25b44:	2210      	movs	r2, #16
   25b46:	4639      	mov	r1, r7
   25b48:	4837      	ldr	r0, [pc, #220]	; (25c28 <ble_sm_alg_f6+0x114>)
   25b4a:	f7ff feeb 	bl	25924 <ble_sm_alg_log_buf>
    ble_sm_alg_log_buf("iocap", iocap, 3);
   25b4e:	2203      	movs	r2, #3
   25b50:	991e      	ldr	r1, [sp, #120]	; 0x78
   25b52:	4836      	ldr	r0, [pc, #216]	; (25c2c <ble_sm_alg_f6+0x118>)
   25b54:	f7ff fee6 	bl	25924 <ble_sm_alg_log_buf>
    ble_sm_alg_log_buf("a1t", &a1t, 1);
   25b58:	2201      	movs	r2, #1
   25b5a:	a91f      	add	r1, sp, #124	; 0x7c
   25b5c:	4834      	ldr	r0, [pc, #208]	; (25c30 <ble_sm_alg_f6+0x11c>)
   25b5e:	f7ff fee1 	bl	25924 <ble_sm_alg_log_buf>
    ble_sm_alg_log_buf("a1", a1, 6);
   25b62:	2206      	movs	r2, #6
   25b64:	4629      	mov	r1, r5
   25b66:	4833      	ldr	r0, [pc, #204]	; (25c34 <ble_sm_alg_f6+0x120>)
   25b68:	f7ff fedc 	bl	25924 <ble_sm_alg_log_buf>
    ble_sm_alg_log_buf("a2t", &a2t, 1);
   25b6c:	2201      	movs	r2, #1
   25b6e:	a921      	add	r1, sp, #132	; 0x84
   25b70:	4831      	ldr	r0, [pc, #196]	; (25c38 <ble_sm_alg_f6+0x124>)
   25b72:	f7ff fed7 	bl	25924 <ble_sm_alg_log_buf>
    ble_sm_alg_log_buf("a2", a2, 6);
   25b76:	2206      	movs	r2, #6
   25b78:	4621      	mov	r1, r4
   25b7a:	4830      	ldr	r0, [pc, #192]	; (25c3c <ble_sm_alg_f6+0x128>)
   25b7c:	f7ff fed2 	bl	25924 <ble_sm_alg_log_buf>
    swap_buf(m, n1, 16);
   25b80:	2210      	movs	r2, #16
   25b82:	4649      	mov	r1, r9
   25b84:	a801      	add	r0, sp, #4
   25b86:	f003 fe68 	bl	2985a <swap_buf>
    swap_buf(m + 16, n2, 16);
   25b8a:	2210      	movs	r2, #16
   25b8c:	4641      	mov	r1, r8
   25b8e:	a805      	add	r0, sp, #20
   25b90:	f003 fe63 	bl	2985a <swap_buf>
    swap_buf(m + 32, r, 16);
   25b94:	2210      	movs	r2, #16
   25b96:	4639      	mov	r1, r7
   25b98:	a809      	add	r0, sp, #36	; 0x24
   25b9a:	f003 fe5e 	bl	2985a <swap_buf>
    swap_buf(m + 48, iocap, 3);
   25b9e:	2203      	movs	r2, #3
   25ba0:	991e      	ldr	r1, [sp, #120]	; 0x78
   25ba2:	a80d      	add	r0, sp, #52	; 0x34
   25ba4:	f003 fe59 	bl	2985a <swap_buf>
    m[51] = a1t;
   25ba8:	f89d 307c 	ldrb.w	r3, [sp, #124]	; 0x7c
   25bac:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    memcpy(m + 52, a1, 6);
   25bb0:	6828      	ldr	r0, [r5, #0]
   25bb2:	900e      	str	r0, [sp, #56]	; 0x38
   25bb4:	88ab      	ldrh	r3, [r5, #4]
   25bb6:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
    swap_buf(m + 52, a1, 6);
   25bba:	2206      	movs	r2, #6
   25bbc:	4629      	mov	r1, r5
   25bbe:	a80e      	add	r0, sp, #56	; 0x38
   25bc0:	f003 fe4b 	bl	2985a <swap_buf>
    m[58] = a2t;
   25bc4:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
   25bc8:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
    memcpy(m + 59, a2, 6);
   25bcc:	6823      	ldr	r3, [r4, #0]
   25bce:	f8cd 303f 	str.w	r3, [sp, #63]	; 0x3f
   25bd2:	88a3      	ldrh	r3, [r4, #4]
   25bd4:	f8ad 3043 	strh.w	r3, [sp, #67]	; 0x43
    swap_buf(m + 59, a2, 6);
   25bd8:	2206      	movs	r2, #6
   25bda:	4621      	mov	r1, r4
   25bdc:	f10d 003f 	add.w	r0, sp, #63	; 0x3f
   25be0:	f003 fe3b 	bl	2985a <swap_buf>
    swap_buf(ws, w, 16);
   25be4:	2210      	movs	r2, #16
   25be6:	4631      	mov	r1, r6
   25be8:	a812      	add	r0, sp, #72	; 0x48
   25bea:	f003 fe36 	bl	2985a <swap_buf>
    rc = ble_sm_alg_aes_cmac(ws, m, sizeof(m), check);
   25bee:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   25bf0:	2241      	movs	r2, #65	; 0x41
   25bf2:	a901      	add	r1, sp, #4
   25bf4:	a812      	add	r0, sp, #72	; 0x48
   25bf6:	f7ff fe9b 	bl	25930 <ble_sm_alg_aes_cmac>
    if (rc != 0) {
   25bfa:	b968      	cbnz	r0, 25c18 <ble_sm_alg_f6+0x104>
   25bfc:	4604      	mov	r4, r0
    ble_sm_alg_log_buf("res", check, 16);
   25bfe:	2210      	movs	r2, #16
   25c00:	9923      	ldr	r1, [sp, #140]	; 0x8c
   25c02:	480f      	ldr	r0, [pc, #60]	; (25c40 <ble_sm_alg_f6+0x12c>)
   25c04:	f7ff fe8e 	bl	25924 <ble_sm_alg_log_buf>
    swap_in_place(check, 16);
   25c08:	2110      	movs	r1, #16
   25c0a:	9823      	ldr	r0, [sp, #140]	; 0x8c
   25c0c:	f003 fe15 	bl	2983a <swap_in_place>
}
   25c10:	4620      	mov	r0, r4
   25c12:	b017      	add	sp, #92	; 0x5c
   25c14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return BLE_HS_EUNKNOWN;
   25c18:	2411      	movs	r4, #17
   25c1a:	e7f9      	b.n	25c10 <ble_sm_alg_f6+0xfc>
   25c1c:	0002b954 	.word	0x0002b954
   25c20:	0002b958 	.word	0x0002b958
   25c24:	0002b95c 	.word	0x0002b95c
   25c28:	0002b96c 	.word	0x0002b96c
   25c2c:	0002b970 	.word	0x0002b970
   25c30:	0002b978 	.word	0x0002b978
   25c34:	0002b97c 	.word	0x0002b97c
   25c38:	0002b980 	.word	0x0002b980
   25c3c:	0002b984 	.word	0x0002b984
   25c40:	0002b988 	.word	0x0002b988

00025c44 <ble_sm_alg_g2>:
{
   25c44:	b5f0      	push	{r4, r5, r6, r7, lr}
   25c46:	b099      	sub	sp, #100	; 0x64
   25c48:	4607      	mov	r7, r0
   25c4a:	460e      	mov	r6, r1
   25c4c:	4614      	mov	r4, r2
   25c4e:	461d      	mov	r5, r3
    ble_sm_alg_log_buf("u", u, 32);
   25c50:	2220      	movs	r2, #32
   25c52:	4601      	mov	r1, r0
   25c54:	4821      	ldr	r0, [pc, #132]	; (25cdc <ble_sm_alg_g2+0x98>)
   25c56:	f7ff fe65 	bl	25924 <ble_sm_alg_log_buf>
    ble_sm_alg_log_buf("v", v, 32);
   25c5a:	2220      	movs	r2, #32
   25c5c:	4631      	mov	r1, r6
   25c5e:	4820      	ldr	r0, [pc, #128]	; (25ce0 <ble_sm_alg_g2+0x9c>)
   25c60:	f7ff fe60 	bl	25924 <ble_sm_alg_log_buf>
    ble_sm_alg_log_buf("x", x, 16);
   25c64:	2210      	movs	r2, #16
   25c66:	4621      	mov	r1, r4
   25c68:	481e      	ldr	r0, [pc, #120]	; (25ce4 <ble_sm_alg_g2+0xa0>)
   25c6a:	f7ff fe5b 	bl	25924 <ble_sm_alg_log_buf>
    ble_sm_alg_log_buf("y", y, 16);
   25c6e:	2210      	movs	r2, #16
   25c70:	4629      	mov	r1, r5
   25c72:	481d      	ldr	r0, [pc, #116]	; (25ce8 <ble_sm_alg_g2+0xa4>)
   25c74:	f7ff fe56 	bl	25924 <ble_sm_alg_log_buf>
    swap_buf(m, u, 32);
   25c78:	2220      	movs	r2, #32
   25c7a:	4639      	mov	r1, r7
   25c7c:	a804      	add	r0, sp, #16
   25c7e:	f003 fdec 	bl	2985a <swap_buf>
    swap_buf(m + 32, v, 32);
   25c82:	2220      	movs	r2, #32
   25c84:	4631      	mov	r1, r6
   25c86:	a80c      	add	r0, sp, #48	; 0x30
   25c88:	f003 fde7 	bl	2985a <swap_buf>
    swap_buf(m + 64, y, 16);
   25c8c:	2210      	movs	r2, #16
   25c8e:	4629      	mov	r1, r5
   25c90:	a814      	add	r0, sp, #80	; 0x50
   25c92:	f003 fde2 	bl	2985a <swap_buf>
    swap_buf(xs, x, 16);
   25c96:	2210      	movs	r2, #16
   25c98:	4621      	mov	r1, r4
   25c9a:	4668      	mov	r0, sp
   25c9c:	f003 fddd 	bl	2985a <swap_buf>
    rc = ble_sm_alg_aes_cmac(xs, m, sizeof(m), xs);
   25ca0:	466b      	mov	r3, sp
   25ca2:	2250      	movs	r2, #80	; 0x50
   25ca4:	a904      	add	r1, sp, #16
   25ca6:	4668      	mov	r0, sp
   25ca8:	f7ff fe42 	bl	25930 <ble_sm_alg_aes_cmac>
    if (rc != 0) {
   25cac:	b9a0      	cbnz	r0, 25cd8 <ble_sm_alg_g2+0x94>
   25cae:	4604      	mov	r4, r0
    ble_sm_alg_log_buf("res", xs, 16);
   25cb0:	2210      	movs	r2, #16
   25cb2:	4669      	mov	r1, sp
   25cb4:	480d      	ldr	r0, [pc, #52]	; (25cec <ble_sm_alg_g2+0xa8>)
   25cb6:	f7ff fe35 	bl	25924 <ble_sm_alg_log_buf>
    *passkey = get_be32(xs + 12) % 1000000;
   25cba:	a803      	add	r0, sp, #12
   25cbc:	f003 fdb2 	bl	29824 <get_be32>
   25cc0:	4b0b      	ldr	r3, [pc, #44]	; (25cf0 <ble_sm_alg_g2+0xac>)
   25cc2:	fba3 2300 	umull	r2, r3, r3, r0
   25cc6:	0c9b      	lsrs	r3, r3, #18
   25cc8:	4a0a      	ldr	r2, [pc, #40]	; (25cf4 <ble_sm_alg_g2+0xb0>)
   25cca:	fb02 0313 	mls	r3, r2, r3, r0
   25cce:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   25cd0:	6013      	str	r3, [r2, #0]
}
   25cd2:	4620      	mov	r0, r4
   25cd4:	b019      	add	sp, #100	; 0x64
   25cd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return BLE_HS_EUNKNOWN;
   25cd8:	2411      	movs	r4, #17
   25cda:	e7fa      	b.n	25cd2 <ble_sm_alg_g2+0x8e>
   25cdc:	0002af68 	.word	0x0002af68
   25ce0:	0002b98c 	.word	0x0002b98c
   25ce4:	0002af04 	.word	0x0002af04
   25ce8:	0002b990 	.word	0x0002b990
   25cec:	0002b988 	.word	0x0002b988
   25cf0:	431bde83 	.word	0x431bde83
   25cf4:	000f4240 	.word	0x000f4240

00025cf8 <ble_sm_alg_gen_dhkey>:
{
   25cf8:	b570      	push	{r4, r5, r6, lr}
   25cfa:	b0a0      	sub	sp, #128	; 0x80
   25cfc:	460d      	mov	r5, r1
   25cfe:	4614      	mov	r4, r2
   25d00:	461e      	mov	r6, r3
    swap_buf(pk, peer_pub_key_x, 32);
   25d02:	2220      	movs	r2, #32
   25d04:	4601      	mov	r1, r0
   25d06:	eb0d 0002 	add.w	r0, sp, r2
   25d0a:	f003 fda6 	bl	2985a <swap_buf>
    swap_buf(&pk[32], peer_pub_key_y, 32);
   25d0e:	2220      	movs	r2, #32
   25d10:	4629      	mov	r1, r5
   25d12:	a810      	add	r0, sp, #64	; 0x40
   25d14:	f003 fda1 	bl	2985a <swap_buf>
    swap_buf(priv, our_priv_key, 32);
   25d18:	2220      	movs	r2, #32
   25d1a:	4621      	mov	r1, r4
   25d1c:	4668      	mov	r0, sp
   25d1e:	f003 fd9c 	bl	2985a <swap_buf>
    if (uECC_valid_public_key(pk, &curve_secp256r1) < 0) {
   25d22:	490c      	ldr	r1, [pc, #48]	; (25d54 <ble_sm_alg_gen_dhkey+0x5c>)
   25d24:	a808      	add	r0, sp, #32
   25d26:	f001 fee9 	bl	27afc <uECC_valid_public_key>
   25d2a:	2800      	cmp	r0, #0
   25d2c:	db0e      	blt.n	25d4c <ble_sm_alg_gen_dhkey+0x54>
    rc = uECC_shared_secret(pk, priv, dh, &curve_secp256r1);
   25d2e:	4b09      	ldr	r3, [pc, #36]	; (25d54 <ble_sm_alg_gen_dhkey+0x5c>)
   25d30:	aa18      	add	r2, sp, #96	; 0x60
   25d32:	4669      	mov	r1, sp
   25d34:	a808      	add	r0, sp, #32
   25d36:	f001 ff51 	bl	27bdc <uECC_shared_secret>
    if (rc == TC_CRYPTO_FAIL) {
   25d3a:	b148      	cbz	r0, 25d50 <ble_sm_alg_gen_dhkey+0x58>
    swap_buf(out_dhkey, dh, 32);
   25d3c:	2220      	movs	r2, #32
   25d3e:	a918      	add	r1, sp, #96	; 0x60
   25d40:	4630      	mov	r0, r6
   25d42:	f003 fd8a 	bl	2985a <swap_buf>
    return 0;
   25d46:	2000      	movs	r0, #0
}
   25d48:	b020      	add	sp, #128	; 0x80
   25d4a:	bd70      	pop	{r4, r5, r6, pc}
        return BLE_HS_EUNKNOWN;
   25d4c:	2011      	movs	r0, #17
   25d4e:	e7fb      	b.n	25d48 <ble_sm_alg_gen_dhkey+0x50>
        return BLE_HS_EUNKNOWN;
   25d50:	2011      	movs	r0, #17
   25d52:	e7f9      	b.n	25d48 <ble_sm_alg_gen_dhkey+0x50>
   25d54:	0002b994 	.word	0x0002b994

00025d58 <ble_sm_alg_gen_key_pair>:
{
   25d58:	b530      	push	{r4, r5, lr}
   25d5a:	b091      	sub	sp, #68	; 0x44
   25d5c:	4605      	mov	r5, r0
   25d5e:	460c      	mov	r4, r1
        if (uECC_make_key(pk, priv, &curve_secp256r1) != TC_CRYPTO_SUCCESS) {
   25d60:	4a10      	ldr	r2, [pc, #64]	; (25da4 <ble_sm_alg_gen_key_pair+0x4c>)
   25d62:	4621      	mov	r1, r4
   25d64:	4668      	mov	r0, sp
   25d66:	f001 feed 	bl	27b44 <uECC_make_key>
   25d6a:	2801      	cmp	r0, #1
   25d6c:	d117      	bne.n	25d9e <ble_sm_alg_gen_key_pair+0x46>
    } while (memcmp(priv, ble_sm_alg_dbg_priv_key, 32) == 0);
   25d6e:	2220      	movs	r2, #32
   25d70:	490d      	ldr	r1, [pc, #52]	; (25da8 <ble_sm_alg_gen_key_pair+0x50>)
   25d72:	4620      	mov	r0, r4
   25d74:	f7e8 fb58 	bl	e428 <memcmp>
   25d78:	2800      	cmp	r0, #0
   25d7a:	d0f1      	beq.n	25d60 <ble_sm_alg_gen_key_pair+0x8>
    swap_buf(pub, pk, 32);
   25d7c:	2220      	movs	r2, #32
   25d7e:	4669      	mov	r1, sp
   25d80:	4628      	mov	r0, r5
   25d82:	f003 fd6a 	bl	2985a <swap_buf>
    swap_buf(&pub[32], &pk[32], 32);
   25d86:	2220      	movs	r2, #32
   25d88:	eb0d 0102 	add.w	r1, sp, r2
   25d8c:	18a8      	adds	r0, r5, r2
   25d8e:	f003 fd64 	bl	2985a <swap_buf>
    swap_in_place(priv, 32);
   25d92:	2120      	movs	r1, #32
   25d94:	4620      	mov	r0, r4
   25d96:	f003 fd50 	bl	2983a <swap_in_place>
    return 0;
   25d9a:	2000      	movs	r0, #0
   25d9c:	e000      	b.n	25da0 <ble_sm_alg_gen_key_pair+0x48>
            return BLE_HS_EUNKNOWN;
   25d9e:	2011      	movs	r0, #17
}
   25da0:	b011      	add	sp, #68	; 0x44
   25da2:	bd30      	pop	{r4, r5, pc}
   25da4:	0002b994 	.word	0x0002b994
   25da8:	0002b934 	.word	0x0002b934

00025dac <ble_sm_alg_ecc_init>:

void
ble_sm_alg_ecc_init(void)
{
   25dac:	b508      	push	{r3, lr}
    uECC_set_rng(ble_sm_alg_rand);
   25dae:	4802      	ldr	r0, [pc, #8]	; (25db8 <ble_sm_alg_ecc_init+0xc>)
   25db0:	f000 ffc2 	bl	26d38 <uECC_set_rng>
}
   25db4:	bd08      	pop	{r3, pc}
   25db6:	bf00      	nop
   25db8:	0002596f 	.word	0x0002596f

00025dbc <ble_svc_gap_device_name_write_access>:
    return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
}

static int
ble_svc_gap_device_name_write_access(struct ble_gatt_access_ctxt *ctxt)
{
   25dbc:	b508      	push	{r3, lr}
#if MYNEWT_VAL(BLE_SVC_GAP_DEVICE_NAME_WRITE_PERM) < 0
    assert(0);
   25dbe:	f7e6 fa13 	bl	c1e8 <hal_debugger_connected>
   25dc2:	b100      	cbz	r0, 25dc6 <ble_svc_gap_device_name_write_access+0xa>
   25dc4:	be01      	bkpt	0x0001
   25dc6:	2300      	movs	r3, #0
   25dc8:	461a      	mov	r2, r3
   25dca:	4619      	mov	r1, r3
   25dcc:	4618      	mov	r0, r3
   25dce:	f7e6 fc45 	bl	c65c <__assert_func>

00025dd2 <ble_svc_gap_appearance_write_access>:
    return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
}

static int
ble_svc_gap_appearance_write_access(struct ble_gatt_access_ctxt *ctxt)
{
   25dd2:	b508      	push	{r3, lr}
#if MYNEWT_VAL(BLE_SVC_GAP_APPEARANCE_WRITE_PERM) < 0
    assert(0);
   25dd4:	f7e6 fa08 	bl	c1e8 <hal_debugger_connected>
   25dd8:	b100      	cbz	r0, 25ddc <ble_svc_gap_appearance_write_access+0xa>
   25dda:	be01      	bkpt	0x0001
   25ddc:	2300      	movs	r3, #0
   25dde:	461a      	mov	r2, r3
   25de0:	4619      	mov	r1, r3
   25de2:	4618      	mov	r0, r3
   25de4:	f7e6 fc3a 	bl	c65c <__assert_func>

00025de8 <ble_svc_gap_device_name_read_access>:
{
   25de8:	b538      	push	{r3, r4, r5, lr}
    rc = os_mbuf_append(ctxt->om, ble_svc_gap_name, strlen(ble_svc_gap_name));
   25dea:	6845      	ldr	r5, [r0, #4]
   25dec:	4c07      	ldr	r4, [pc, #28]	; (25e0c <ble_svc_gap_device_name_read_access+0x24>)
   25dee:	4620      	mov	r0, r4
   25df0:	f7e8 fb90 	bl	e514 <strlen>
   25df4:	b282      	uxth	r2, r0
   25df6:	4621      	mov	r1, r4
   25df8:	4628      	mov	r0, r5
   25dfa:	f7e7 fe1e 	bl	da3a <os_mbuf_append>
    return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   25dfe:	4603      	mov	r3, r0
   25e00:	b908      	cbnz	r0, 25e06 <ble_svc_gap_device_name_read_access+0x1e>
}
   25e02:	4618      	mov	r0, r3
   25e04:	bd38      	pop	{r3, r4, r5, pc}
    return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   25e06:	2311      	movs	r3, #17
   25e08:	e7fb      	b.n	25e02 <ble_svc_gap_device_name_read_access+0x1a>
   25e0a:	bf00      	nop
   25e0c:	200001d8 	.word	0x200001d8

00025e10 <ble_svc_gap_appearance_read_access>:
{
   25e10:	b500      	push	{lr}
   25e12:	b083      	sub	sp, #12
    uint16_t appearance = htole16(ble_svc_gap_appearance);
   25e14:	4b08      	ldr	r3, [pc, #32]	; (25e38 <ble_svc_gap_appearance_read_access+0x28>)
   25e16:	881b      	ldrh	r3, [r3, #0]
   25e18:	a902      	add	r1, sp, #8
   25e1a:	f821 3d02 	strh.w	r3, [r1, #-2]!
    rc = os_mbuf_append(ctxt->om, &appearance, sizeof(appearance));
   25e1e:	2202      	movs	r2, #2
   25e20:	6840      	ldr	r0, [r0, #4]
   25e22:	f7e7 fe0a 	bl	da3a <os_mbuf_append>
    return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   25e26:	4603      	mov	r3, r0
   25e28:	b918      	cbnz	r0, 25e32 <ble_svc_gap_appearance_read_access+0x22>
}
   25e2a:	4618      	mov	r0, r3
   25e2c:	b003      	add	sp, #12
   25e2e:	f85d fb04 	ldr.w	pc, [sp], #4
    return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   25e32:	2311      	movs	r3, #17
   25e34:	e7f9      	b.n	25e2a <ble_svc_gap_appearance_read_access+0x1a>
   25e36:	bf00      	nop
   25e38:	200035dc 	.word	0x200035dc

00025e3c <ble_svc_gap_access>:
}

static int
ble_svc_gap_access(uint16_t conn_handle, uint16_t attr_handle,
                   struct ble_gatt_access_ctxt *ctxt, void *arg)
{
   25e3c:	b510      	push	{r4, lr}
   25e3e:	4614      	mov	r4, r2
        htole16(MYNEWT_VAL(BLE_SVC_GAP_PPCP_SUPERVISION_TMO))
    };
#endif
    int rc;

    uuid16 = ble_uuid_u16(ctxt->chr->uuid);
   25e40:	6893      	ldr	r3, [r2, #8]
   25e42:	6818      	ldr	r0, [r3, #0]
   25e44:	f7fd fbcf 	bl	235e6 <ble_uuid_u16>
    assert(uuid16 != 0);
   25e48:	b1a0      	cbz	r0, 25e74 <ble_svc_gap_access+0x38>

    switch (uuid16) {
   25e4a:	f5b0 5f28 	cmp.w	r0, #10752	; 0x2a00
   25e4e:	d01b      	beq.n	25e88 <ble_svc_gap_access+0x4c>
   25e50:	f642 2201 	movw	r2, #10753	; 0x2a01
   25e54:	4290      	cmp	r0, r2
   25e56:	d133      	bne.n	25ec0 <ble_svc_gap_access+0x84>
            rc = BLE_ATT_ERR_UNLIKELY;
        }
        return rc;

    case BLE_SVC_GAP_CHR_UUID16_APPEARANCE:
        if (ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR) {
   25e58:	7823      	ldrb	r3, [r4, #0]
   25e5a:	b353      	cbz	r3, 25eb2 <ble_svc_gap_access+0x76>
            rc = ble_svc_gap_appearance_read_access(ctxt);
        } else if (ctxt->op == BLE_GATT_ACCESS_OP_WRITE_CHR) {
   25e5c:	2b01      	cmp	r3, #1
   25e5e:	d02c      	beq.n	25eba <ble_svc_gap_access+0x7e>
            rc = ble_svc_gap_appearance_write_access(ctxt);
        } else {
            assert(0);
   25e60:	f7e6 f9c2 	bl	c1e8 <hal_debugger_connected>
   25e64:	b100      	cbz	r0, 25e68 <ble_svc_gap_access+0x2c>
   25e66:	be01      	bkpt	0x0001
   25e68:	2300      	movs	r3, #0
   25e6a:	461a      	mov	r2, r3
   25e6c:	4619      	mov	r1, r3
   25e6e:	4618      	mov	r0, r3
   25e70:	f7e6 fbf4 	bl	c65c <__assert_func>
    assert(uuid16 != 0);
   25e74:	f7e6 f9b8 	bl	c1e8 <hal_debugger_connected>
   25e78:	b100      	cbz	r0, 25e7c <ble_svc_gap_access+0x40>
   25e7a:	be01      	bkpt	0x0001
   25e7c:	2300      	movs	r3, #0
   25e7e:	461a      	mov	r2, r3
   25e80:	4619      	mov	r1, r3
   25e82:	4618      	mov	r0, r3
   25e84:	f7e6 fbea 	bl	c65c <__assert_func>
        if (ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR) {
   25e88:	7823      	ldrb	r3, [r4, #0]
   25e8a:	b15b      	cbz	r3, 25ea4 <ble_svc_gap_access+0x68>
        } else if (ctxt->op == BLE_GATT_ACCESS_OP_WRITE_CHR) {
   25e8c:	2b01      	cmp	r3, #1
   25e8e:	d00d      	beq.n	25eac <ble_svc_gap_access+0x70>
            assert(0);
   25e90:	f7e6 f9aa 	bl	c1e8 <hal_debugger_connected>
   25e94:	b100      	cbz	r0, 25e98 <ble_svc_gap_access+0x5c>
   25e96:	be01      	bkpt	0x0001
   25e98:	2300      	movs	r3, #0
   25e9a:	461a      	mov	r2, r3
   25e9c:	4619      	mov	r1, r3
   25e9e:	4618      	mov	r0, r3
   25ea0:	f7e6 fbdc 	bl	c65c <__assert_func>
            rc = ble_svc_gap_device_name_read_access(ctxt);
   25ea4:	4620      	mov	r0, r4
   25ea6:	f7ff ff9f 	bl	25de8 <ble_svc_gap_device_name_read_access>

    default:
        assert(0);
        return BLE_ATT_ERR_UNLIKELY;
    }
}
   25eaa:	bd10      	pop	{r4, pc}
            rc = ble_svc_gap_device_name_write_access(ctxt);
   25eac:	4620      	mov	r0, r4
   25eae:	f7ff ff85 	bl	25dbc <ble_svc_gap_device_name_write_access>
            rc = ble_svc_gap_appearance_read_access(ctxt);
   25eb2:	4620      	mov	r0, r4
   25eb4:	f7ff ffac 	bl	25e10 <ble_svc_gap_appearance_read_access>
        return rc;
   25eb8:	e7f7      	b.n	25eaa <ble_svc_gap_access+0x6e>
            rc = ble_svc_gap_appearance_write_access(ctxt);
   25eba:	4620      	mov	r0, r4
   25ebc:	f7ff ff89 	bl	25dd2 <ble_svc_gap_appearance_write_access>
        assert(0);
   25ec0:	f7e6 f992 	bl	c1e8 <hal_debugger_connected>
   25ec4:	b100      	cbz	r0, 25ec8 <ble_svc_gap_access+0x8c>
   25ec6:	be01      	bkpt	0x0001
   25ec8:	2300      	movs	r3, #0
   25eca:	461a      	mov	r2, r3
   25ecc:	4619      	mov	r1, r3
   25ece:	4618      	mov	r0, r3
   25ed0:	f7e6 fbc4 	bl	c65c <__assert_func>

00025ed4 <ble_svc_gap_device_name_set>:
    return ble_svc_gap_name;
}

int
ble_svc_gap_device_name_set(const char *name)
{
   25ed4:	b570      	push	{r4, r5, r6, lr}
   25ed6:	4606      	mov	r6, r0
    int len;

    len = strlen(name);
   25ed8:	f7e8 fb1c 	bl	e514 <strlen>
    if (len > BLE_SVC_GAP_NAME_MAX_LEN) {
   25edc:	281f      	cmp	r0, #31
   25ede:	dc09      	bgt.n	25ef4 <ble_svc_gap_device_name_set+0x20>
   25ee0:	4604      	mov	r4, r0
        return BLE_HS_EINVAL;
    }

    memcpy(ble_svc_gap_name, name, len);
   25ee2:	4d05      	ldr	r5, [pc, #20]	; (25ef8 <ble_svc_gap_device_name_set+0x24>)
   25ee4:	4602      	mov	r2, r0
   25ee6:	4631      	mov	r1, r6
   25ee8:	4628      	mov	r0, r5
   25eea:	f7e8 fac1 	bl	e470 <memcpy>
    ble_svc_gap_name[len] = '\0';
   25eee:	2000      	movs	r0, #0
   25ef0:	5528      	strb	r0, [r5, r4]

    return 0;
}
   25ef2:	bd70      	pop	{r4, r5, r6, pc}
        return BLE_HS_EINVAL;
   25ef4:	2003      	movs	r0, #3
   25ef6:	e7fc      	b.n	25ef2 <ble_svc_gap_device_name_set+0x1e>
   25ef8:	200001d8 	.word	0x200001d8

00025efc <ble_svc_gap_init>:
    ble_svc_gap_chr_changed_cb_fn = cb;
}

void
ble_svc_gap_init(void)
{
   25efc:	b510      	push	{r4, lr}
   25efe:	b082      	sub	sp, #8
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   25f00:	4b18      	ldr	r3, [pc, #96]	; (25f64 <ble_svc_gap_init+0x68>)
   25f02:	781b      	ldrb	r3, [r3, #0]
   25f04:	b14b      	cbz	r3, 25f1a <ble_svc_gap_init+0x1e>

    rc = ble_gatts_count_cfg(ble_svc_gap_defs);
   25f06:	4818      	ldr	r0, [pc, #96]	; (25f68 <ble_svc_gap_init+0x6c>)
   25f08:	f7f8 fa2a 	bl	1e360 <ble_gatts_count_cfg>
    SYSINIT_PANIC_ASSERT(rc == 0);
   25f0c:	b978      	cbnz	r0, 25f2e <ble_svc_gap_init+0x32>

    rc = ble_gatts_add_svcs(ble_svc_gap_defs);
   25f0e:	4816      	ldr	r0, [pc, #88]	; (25f68 <ble_svc_gap_init+0x6c>)
   25f10:	f7f8 fa02 	bl	1e318 <ble_gatts_add_svcs>
    SYSINIT_PANIC_ASSERT(rc == 0);
   25f14:	b9c0      	cbnz	r0, 25f48 <ble_svc_gap_init+0x4c>
}
   25f16:	b002      	add	sp, #8
   25f18:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   25f1a:	f7e6 f965 	bl	c1e8 <hal_debugger_connected>
   25f1e:	b100      	cbz	r0, 25f22 <ble_svc_gap_init+0x26>
   25f20:	be01      	bkpt	0x0001
   25f22:	2300      	movs	r3, #0
   25f24:	461a      	mov	r2, r3
   25f26:	4619      	mov	r1, r3
   25f28:	4618      	mov	r0, r3
   25f2a:	f7e6 fb97 	bl	c65c <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
   25f2e:	f7e6 f95b 	bl	c1e8 <hal_debugger_connected>
   25f32:	b100      	cbz	r0, 25f36 <ble_svc_gap_init+0x3a>
   25f34:	be01      	bkpt	0x0001
   25f36:	2000      	movs	r0, #0
   25f38:	9000      	str	r0, [sp, #0]
   25f3a:	4b0c      	ldr	r3, [pc, #48]	; (25f6c <ble_svc_gap_init+0x70>)
   25f3c:	681c      	ldr	r4, [r3, #0]
   25f3e:	4603      	mov	r3, r0
   25f40:	4602      	mov	r2, r0
   25f42:	4601      	mov	r1, r0
   25f44:	47a0      	blx	r4
   25f46:	e7e2      	b.n	25f0e <ble_svc_gap_init+0x12>
    SYSINIT_PANIC_ASSERT(rc == 0);
   25f48:	f7e6 f94e 	bl	c1e8 <hal_debugger_connected>
   25f4c:	b100      	cbz	r0, 25f50 <ble_svc_gap_init+0x54>
   25f4e:	be01      	bkpt	0x0001
   25f50:	2000      	movs	r0, #0
   25f52:	9000      	str	r0, [sp, #0]
   25f54:	4b05      	ldr	r3, [pc, #20]	; (25f6c <ble_svc_gap_init+0x70>)
   25f56:	681c      	ldr	r4, [r3, #0]
   25f58:	4603      	mov	r3, r0
   25f5a:	4602      	mov	r2, r0
   25f5c:	4601      	mov	r1, r0
   25f5e:	47a0      	blx	r4
}
   25f60:	e7d9      	b.n	25f16 <ble_svc_gap_init+0x1a>
   25f62:	bf00      	nop
   25f64:	20003bd8 	.word	0x20003bd8
   25f68:	0002ba54 	.word	0x0002ba54
   25f6c:	20000144 	.word	0x20000144

00025f70 <ble_hci_trans_cfg_hs>:
void
ble_hci_trans_cfg_hs(ble_hci_trans_rx_cmd_fn *cmd_cb,
                     void *cmd_arg,
                     ble_hci_trans_rx_acl_fn *acl_cb,
                     void *acl_arg)
{
   25f70:	b410      	push	{r4}
    ble_hci_ram_rx_cmd_hs_cb = cmd_cb;
   25f72:	4c05      	ldr	r4, [pc, #20]	; (25f88 <ble_hci_trans_cfg_hs+0x18>)
   25f74:	6020      	str	r0, [r4, #0]
    ble_hci_ram_rx_cmd_hs_arg = cmd_arg;
   25f76:	4805      	ldr	r0, [pc, #20]	; (25f8c <ble_hci_trans_cfg_hs+0x1c>)
   25f78:	6001      	str	r1, [r0, #0]
    ble_hci_ram_rx_acl_hs_cb = acl_cb;
   25f7a:	4905      	ldr	r1, [pc, #20]	; (25f90 <ble_hci_trans_cfg_hs+0x20>)
   25f7c:	600a      	str	r2, [r1, #0]
    ble_hci_ram_rx_acl_hs_arg = acl_arg;
   25f7e:	4a05      	ldr	r2, [pc, #20]	; (25f94 <ble_hci_trans_cfg_hs+0x24>)
   25f80:	6013      	str	r3, [r2, #0]
}
   25f82:	bc10      	pop	{r4}
   25f84:	4770      	bx	lr
   25f86:	bf00      	nop
   25f88:	20003a1c 	.word	0x20003a1c
   25f8c:	20003a18 	.word	0x20003a18
   25f90:	20003a0c 	.word	0x20003a0c
   25f94:	20003a08 	.word	0x20003a08

00025f98 <ble_hci_trans_cfg_ll>:
void
ble_hci_trans_cfg_ll(ble_hci_trans_rx_cmd_fn *cmd_cb,
                     void *cmd_arg,
                     ble_hci_trans_rx_acl_fn *acl_cb,
                     void *acl_arg)
{
   25f98:	b410      	push	{r4}
    ble_hci_ram_rx_cmd_ll_cb = cmd_cb;
   25f9a:	4c05      	ldr	r4, [pc, #20]	; (25fb0 <ble_hci_trans_cfg_ll+0x18>)
   25f9c:	6020      	str	r0, [r4, #0]
    ble_hci_ram_rx_cmd_ll_arg = cmd_arg;
   25f9e:	4805      	ldr	r0, [pc, #20]	; (25fb4 <ble_hci_trans_cfg_ll+0x1c>)
   25fa0:	6001      	str	r1, [r0, #0]
    ble_hci_ram_rx_acl_ll_cb = acl_cb;
   25fa2:	4905      	ldr	r1, [pc, #20]	; (25fb8 <ble_hci_trans_cfg_ll+0x20>)
   25fa4:	600a      	str	r2, [r1, #0]
    ble_hci_ram_rx_acl_ll_arg = acl_arg;
   25fa6:	4a05      	ldr	r2, [pc, #20]	; (25fbc <ble_hci_trans_cfg_ll+0x24>)
   25fa8:	6013      	str	r3, [r2, #0]
}
   25faa:	bc10      	pop	{r4}
   25fac:	4770      	bx	lr
   25fae:	bf00      	nop
   25fb0:	20003a24 	.word	0x20003a24
   25fb4:	20003a20 	.word	0x20003a20
   25fb8:	20003a14 	.word	0x20003a14
   25fbc:	20003a10 	.word	0x20003a10

00025fc0 <ble_hci_trans_hs_cmd_tx>:

int
ble_hci_trans_hs_cmd_tx(uint8_t *cmd)
{
   25fc0:	b508      	push	{r3, lr}
    int rc;

    assert(ble_hci_ram_rx_cmd_ll_cb != NULL);
   25fc2:	4b08      	ldr	r3, [pc, #32]	; (25fe4 <ble_hci_trans_hs_cmd_tx+0x24>)
   25fc4:	681b      	ldr	r3, [r3, #0]
   25fc6:	b11b      	cbz	r3, 25fd0 <ble_hci_trans_hs_cmd_tx+0x10>

    rc = ble_hci_ram_rx_cmd_ll_cb(cmd, ble_hci_ram_rx_cmd_ll_arg);
   25fc8:	4a07      	ldr	r2, [pc, #28]	; (25fe8 <ble_hci_trans_hs_cmd_tx+0x28>)
   25fca:	6811      	ldr	r1, [r2, #0]
   25fcc:	4798      	blx	r3
    return rc;
}
   25fce:	bd08      	pop	{r3, pc}
    assert(ble_hci_ram_rx_cmd_ll_cb != NULL);
   25fd0:	f7e6 f90a 	bl	c1e8 <hal_debugger_connected>
   25fd4:	b100      	cbz	r0, 25fd8 <ble_hci_trans_hs_cmd_tx+0x18>
   25fd6:	be01      	bkpt	0x0001
   25fd8:	2300      	movs	r3, #0
   25fda:	461a      	mov	r2, r3
   25fdc:	4619      	mov	r1, r3
   25fde:	4618      	mov	r0, r3
   25fe0:	f7e6 fb3c 	bl	c65c <__assert_func>
   25fe4:	20003a24 	.word	0x20003a24
   25fe8:	20003a20 	.word	0x20003a20

00025fec <ble_hci_trans_ll_evt_tx>:

int
ble_hci_trans_ll_evt_tx(uint8_t *hci_ev)
{
   25fec:	b508      	push	{r3, lr}
    int rc;

    assert(ble_hci_ram_rx_cmd_hs_cb != NULL);
   25fee:	4b08      	ldr	r3, [pc, #32]	; (26010 <ble_hci_trans_ll_evt_tx+0x24>)
   25ff0:	681b      	ldr	r3, [r3, #0]
   25ff2:	b11b      	cbz	r3, 25ffc <ble_hci_trans_ll_evt_tx+0x10>

    rc = ble_hci_ram_rx_cmd_hs_cb(hci_ev, ble_hci_ram_rx_cmd_hs_arg);
   25ff4:	4a07      	ldr	r2, [pc, #28]	; (26014 <ble_hci_trans_ll_evt_tx+0x28>)
   25ff6:	6811      	ldr	r1, [r2, #0]
   25ff8:	4798      	blx	r3
    return rc;
}
   25ffa:	bd08      	pop	{r3, pc}
    assert(ble_hci_ram_rx_cmd_hs_cb != NULL);
   25ffc:	f7e6 f8f4 	bl	c1e8 <hal_debugger_connected>
   26000:	b100      	cbz	r0, 26004 <ble_hci_trans_ll_evt_tx+0x18>
   26002:	be01      	bkpt	0x0001
   26004:	2300      	movs	r3, #0
   26006:	461a      	mov	r2, r3
   26008:	4619      	mov	r1, r3
   2600a:	4618      	mov	r0, r3
   2600c:	f7e6 fb26 	bl	c65c <__assert_func>
   26010:	20003a1c 	.word	0x20003a1c
   26014:	20003a18 	.word	0x20003a18

00026018 <ble_hci_trans_hs_acl_tx>:

int
ble_hci_trans_hs_acl_tx(struct os_mbuf *om)
{
   26018:	b508      	push	{r3, lr}
    int rc;

    assert(ble_hci_ram_rx_acl_ll_cb != NULL);
   2601a:	4b08      	ldr	r3, [pc, #32]	; (2603c <ble_hci_trans_hs_acl_tx+0x24>)
   2601c:	681b      	ldr	r3, [r3, #0]
   2601e:	b11b      	cbz	r3, 26028 <ble_hci_trans_hs_acl_tx+0x10>

    rc = ble_hci_ram_rx_acl_ll_cb(om, ble_hci_ram_rx_acl_ll_arg);
   26020:	4a07      	ldr	r2, [pc, #28]	; (26040 <ble_hci_trans_hs_acl_tx+0x28>)
   26022:	6811      	ldr	r1, [r2, #0]
   26024:	4798      	blx	r3
    return rc;
}
   26026:	bd08      	pop	{r3, pc}
    assert(ble_hci_ram_rx_acl_ll_cb != NULL);
   26028:	f7e6 f8de 	bl	c1e8 <hal_debugger_connected>
   2602c:	b100      	cbz	r0, 26030 <ble_hci_trans_hs_acl_tx+0x18>
   2602e:	be01      	bkpt	0x0001
   26030:	2300      	movs	r3, #0
   26032:	461a      	mov	r2, r3
   26034:	4619      	mov	r1, r3
   26036:	4618      	mov	r0, r3
   26038:	f7e6 fb10 	bl	c65c <__assert_func>
   2603c:	20003a14 	.word	0x20003a14
   26040:	20003a10 	.word	0x20003a10

00026044 <ble_hci_trans_ll_acl_tx>:

int
ble_hci_trans_ll_acl_tx(struct os_mbuf *om)
{
   26044:	b508      	push	{r3, lr}
    int rc;

    assert(ble_hci_ram_rx_acl_hs_cb != NULL);
   26046:	4b08      	ldr	r3, [pc, #32]	; (26068 <ble_hci_trans_ll_acl_tx+0x24>)
   26048:	681b      	ldr	r3, [r3, #0]
   2604a:	b11b      	cbz	r3, 26054 <ble_hci_trans_ll_acl_tx+0x10>

    rc = ble_hci_ram_rx_acl_hs_cb(om, ble_hci_ram_rx_acl_hs_arg);
   2604c:	4a07      	ldr	r2, [pc, #28]	; (2606c <ble_hci_trans_ll_acl_tx+0x28>)
   2604e:	6811      	ldr	r1, [r2, #0]
   26050:	4798      	blx	r3
    return rc;
}
   26052:	bd08      	pop	{r3, pc}
    assert(ble_hci_ram_rx_acl_hs_cb != NULL);
   26054:	f7e6 f8c8 	bl	c1e8 <hal_debugger_connected>
   26058:	b100      	cbz	r0, 2605c <ble_hci_trans_ll_acl_tx+0x18>
   2605a:	be01      	bkpt	0x0001
   2605c:	2300      	movs	r3, #0
   2605e:	461a      	mov	r2, r3
   26060:	4619      	mov	r1, r3
   26062:	4618      	mov	r0, r3
   26064:	f7e6 fafa 	bl	c65c <__assert_func>
   26068:	20003a0c 	.word	0x20003a0c
   2606c:	20003a08 	.word	0x20003a08

00026070 <ble_hci_trans_buf_alloc>:

uint8_t *
ble_hci_trans_buf_alloc(int type)
{
   26070:	b508      	push	{r3, lr}
    uint8_t *buf;

    switch (type) {
   26072:	2802      	cmp	r0, #2
   26074:	d013      	beq.n	2609e <ble_hci_trans_buf_alloc+0x2e>
   26076:	2803      	cmp	r0, #3
   26078:	d00b      	beq.n	26092 <ble_hci_trans_buf_alloc+0x22>
   2607a:	2801      	cmp	r0, #1
   2607c:	d01a      	beq.n	260b4 <ble_hci_trans_buf_alloc+0x44>
    case BLE_HCI_TRANS_BUF_EVT_LO:
        buf = os_memblock_get(&ble_hci_ram_evt_lo_pool);
        break;

    default:
        assert(0);
   2607e:	f7e6 f8b3 	bl	c1e8 <hal_debugger_connected>
   26082:	b100      	cbz	r0, 26086 <ble_hci_trans_buf_alloc+0x16>
   26084:	be01      	bkpt	0x0001
   26086:	2300      	movs	r3, #0
   26088:	461a      	mov	r2, r3
   2608a:	4619      	mov	r1, r3
   2608c:	4618      	mov	r0, r3
   2608e:	f7e6 fae5 	bl	c65c <__assert_func>
        buf = os_memblock_get(&ble_hci_ram_cmd_pool);
   26092:	480b      	ldr	r0, [pc, #44]	; (260c0 <ble_hci_trans_buf_alloc+0x50>)
   26094:	f7e6 ff4c 	bl	cf30 <os_memblock_get>
   26098:	4603      	mov	r3, r0
        buf = NULL;
    }

    return buf;
}
   2609a:	4618      	mov	r0, r3
   2609c:	bd08      	pop	{r3, pc}
        buf = os_memblock_get(&ble_hci_ram_evt_hi_pool);
   2609e:	4809      	ldr	r0, [pc, #36]	; (260c4 <ble_hci_trans_buf_alloc+0x54>)
   260a0:	f7e6 ff46 	bl	cf30 <os_memblock_get>
        if (buf == NULL) {
   260a4:	4603      	mov	r3, r0
   260a6:	2800      	cmp	r0, #0
   260a8:	d1f7      	bne.n	2609a <ble_hci_trans_buf_alloc+0x2a>
            buf = ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_LO);
   260aa:	2001      	movs	r0, #1
   260ac:	f7ff ffe0 	bl	26070 <ble_hci_trans_buf_alloc>
   260b0:	4603      	mov	r3, r0
   260b2:	e7f2      	b.n	2609a <ble_hci_trans_buf_alloc+0x2a>
        buf = os_memblock_get(&ble_hci_ram_evt_lo_pool);
   260b4:	4804      	ldr	r0, [pc, #16]	; (260c8 <ble_hci_trans_buf_alloc+0x58>)
   260b6:	f7e6 ff3b 	bl	cf30 <os_memblock_get>
   260ba:	4603      	mov	r3, r0
        break;
   260bc:	e7ed      	b.n	2609a <ble_hci_trans_buf_alloc+0x2a>
   260be:	bf00      	nop
   260c0:	200036e4 	.word	0x200036e4
   260c4:	20003790 	.word	0x20003790
   260c8:	200039ec 	.word	0x200039ec

000260cc <ble_hci_trans_buf_free>:

void
ble_hci_trans_buf_free(uint8_t *buf)
{
   260cc:	b510      	push	{r4, lr}
   260ce:	4604      	mov	r4, r0
    * response to the command. This was done to insure that the controller
    * could always send back one of these events when a command was received.
    * Thus, we check to see which pool the buffer came from so we can free
    * it to the appropriate pool
    */
    if (os_memblock_from(&ble_hci_ram_evt_hi_pool, buf)) {
   260d0:	4601      	mov	r1, r0
   260d2:	4824      	ldr	r0, [pc, #144]	; (26164 <ble_hci_trans_buf_free+0x98>)
   260d4:	f7e6 ff0d 	bl	cef2 <os_memblock_from>
   260d8:	b178      	cbz	r0, 260fa <ble_hci_trans_buf_free+0x2e>
        rc = os_memblock_put(&ble_hci_ram_evt_hi_pool, buf);
   260da:	4621      	mov	r1, r4
   260dc:	4821      	ldr	r0, [pc, #132]	; (26164 <ble_hci_trans_buf_free+0x98>)
   260de:	f7e6 ff4f 	bl	cf80 <os_memblock_put>
        assert(rc == 0);
   260e2:	b900      	cbnz	r0, 260e6 <ble_hci_trans_buf_free+0x1a>
    } else {
        assert(os_memblock_from(&ble_hci_ram_cmd_pool, buf));
        rc = os_memblock_put(&ble_hci_ram_cmd_pool, buf);
        assert(rc == 0);
    }
}
   260e4:	bd10      	pop	{r4, pc}
        assert(rc == 0);
   260e6:	f7e6 f87f 	bl	c1e8 <hal_debugger_connected>
   260ea:	b100      	cbz	r0, 260ee <ble_hci_trans_buf_free+0x22>
   260ec:	be01      	bkpt	0x0001
   260ee:	2300      	movs	r3, #0
   260f0:	461a      	mov	r2, r3
   260f2:	4619      	mov	r1, r3
   260f4:	4618      	mov	r0, r3
   260f6:	f7e6 fab1 	bl	c65c <__assert_func>
    } else if (os_memblock_from(&ble_hci_ram_evt_lo_pool, buf)) {
   260fa:	4621      	mov	r1, r4
   260fc:	481a      	ldr	r0, [pc, #104]	; (26168 <ble_hci_trans_buf_free+0x9c>)
   260fe:	f7e6 fef8 	bl	cef2 <os_memblock_from>
   26102:	b178      	cbz	r0, 26124 <ble_hci_trans_buf_free+0x58>
        rc = os_memblock_put(&ble_hci_ram_evt_lo_pool, buf);
   26104:	4621      	mov	r1, r4
   26106:	4818      	ldr	r0, [pc, #96]	; (26168 <ble_hci_trans_buf_free+0x9c>)
   26108:	f7e6 ff3a 	bl	cf80 <os_memblock_put>
        assert(rc == 0);
   2610c:	2800      	cmp	r0, #0
   2610e:	d0e9      	beq.n	260e4 <ble_hci_trans_buf_free+0x18>
   26110:	f7e6 f86a 	bl	c1e8 <hal_debugger_connected>
   26114:	b100      	cbz	r0, 26118 <ble_hci_trans_buf_free+0x4c>
   26116:	be01      	bkpt	0x0001
   26118:	2300      	movs	r3, #0
   2611a:	461a      	mov	r2, r3
   2611c:	4619      	mov	r1, r3
   2611e:	4618      	mov	r0, r3
   26120:	f7e6 fa9c 	bl	c65c <__assert_func>
        assert(os_memblock_from(&ble_hci_ram_cmd_pool, buf));
   26124:	4621      	mov	r1, r4
   26126:	4811      	ldr	r0, [pc, #68]	; (2616c <ble_hci_trans_buf_free+0xa0>)
   26128:	f7e6 fee3 	bl	cef2 <os_memblock_from>
   2612c:	b178      	cbz	r0, 2614e <ble_hci_trans_buf_free+0x82>
        rc = os_memblock_put(&ble_hci_ram_cmd_pool, buf);
   2612e:	4621      	mov	r1, r4
   26130:	480e      	ldr	r0, [pc, #56]	; (2616c <ble_hci_trans_buf_free+0xa0>)
   26132:	f7e6 ff25 	bl	cf80 <os_memblock_put>
        assert(rc == 0);
   26136:	2800      	cmp	r0, #0
   26138:	d0d4      	beq.n	260e4 <ble_hci_trans_buf_free+0x18>
   2613a:	f7e6 f855 	bl	c1e8 <hal_debugger_connected>
   2613e:	b100      	cbz	r0, 26142 <ble_hci_trans_buf_free+0x76>
   26140:	be01      	bkpt	0x0001
   26142:	2300      	movs	r3, #0
   26144:	461a      	mov	r2, r3
   26146:	4619      	mov	r1, r3
   26148:	4618      	mov	r0, r3
   2614a:	f7e6 fa87 	bl	c65c <__assert_func>
        assert(os_memblock_from(&ble_hci_ram_cmd_pool, buf));
   2614e:	f7e6 f84b 	bl	c1e8 <hal_debugger_connected>
   26152:	b100      	cbz	r0, 26156 <ble_hci_trans_buf_free+0x8a>
   26154:	be01      	bkpt	0x0001
   26156:	2300      	movs	r3, #0
   26158:	461a      	mov	r2, r3
   2615a:	4619      	mov	r1, r3
   2615c:	4618      	mov	r0, r3
   2615e:	f7e6 fa7d 	bl	c65c <__assert_func>
   26162:	bf00      	nop
   26164:	20003790 	.word	0x20003790
   26168:	200039ec 	.word	0x200039ec
   2616c:	200036e4 	.word	0x200036e4

00026170 <ble_hci_trans_reset>:
{
    /* No work to do.  All allocated buffers are owned by the host or
     * controller, and they will get freed by their owners.
     */
    return 0;
}
   26170:	2000      	movs	r0, #0
   26172:	4770      	bx	lr

00026174 <ble_hci_ram_init>:

void
ble_hci_ram_init(void)
{
   26174:	b510      	push	{r4, lr}
   26176:	b082      	sub	sp, #8
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   26178:	4b28      	ldr	r3, [pc, #160]	; (2621c <ble_hci_ram_init+0xa8>)
   2617a:	781b      	ldrb	r3, [r3, #0]
   2617c:	b1eb      	cbz	r3, 261ba <ble_hci_ram_init+0x46>
     * Create memory pool of HCI command buffers. NOTE: we currently dont
     * allow this to be configured. The controller will only allow one
     * outstanding command. We decided to keep this a pool in case we allow
     * allow the controller to handle more than one outstanding command.
     */
    rc = os_mempool_init(&ble_hci_ram_cmd_pool,
   2617e:	4b28      	ldr	r3, [pc, #160]	; (26220 <ble_hci_ram_init+0xac>)
   26180:	9300      	str	r3, [sp, #0]
   26182:	4b28      	ldr	r3, [pc, #160]	; (26224 <ble_hci_ram_init+0xb0>)
   26184:	f44f 7282 	mov.w	r2, #260	; 0x104
   26188:	2101      	movs	r1, #1
   2618a:	4827      	ldr	r0, [pc, #156]	; (26228 <ble_hci_ram_init+0xb4>)
   2618c:	f7e6 fe8c 	bl	cea8 <os_mempool_init>
                         1,
                         BLE_HCI_TRANS_CMD_SZ,
                         ble_hci_ram_cmd_buf,
                         "ble_hci_ram_cmd_pool");
    SYSINIT_PANIC_ASSERT(rc == 0);
   26190:	b9e8      	cbnz	r0, 261ce <ble_hci_ram_init+0x5a>

    rc = os_mempool_init(&ble_hci_ram_evt_hi_pool,
   26192:	4b26      	ldr	r3, [pc, #152]	; (2622c <ble_hci_ram_init+0xb8>)
   26194:	9300      	str	r3, [sp, #0]
   26196:	4b26      	ldr	r3, [pc, #152]	; (26230 <ble_hci_ram_init+0xbc>)
   26198:	2246      	movs	r2, #70	; 0x46
   2619a:	2102      	movs	r1, #2
   2619c:	4825      	ldr	r0, [pc, #148]	; (26234 <ble_hci_ram_init+0xc0>)
   2619e:	f7e6 fe83 	bl	cea8 <os_mempool_init>
                         MYNEWT_VAL(BLE_HCI_EVT_HI_BUF_COUNT),
                         MYNEWT_VAL(BLE_HCI_EVT_BUF_SIZE),
                         ble_hci_ram_evt_hi_buf,
                         "ble_hci_ram_evt_hi_pool");
    SYSINIT_PANIC_ASSERT(rc == 0);
   261a2:	bb08      	cbnz	r0, 261e8 <ble_hci_ram_init+0x74>

    rc = os_mempool_init(&ble_hci_ram_evt_lo_pool,
   261a4:	4b24      	ldr	r3, [pc, #144]	; (26238 <ble_hci_ram_init+0xc4>)
   261a6:	9300      	str	r3, [sp, #0]
   261a8:	4b24      	ldr	r3, [pc, #144]	; (2623c <ble_hci_ram_init+0xc8>)
   261aa:	2246      	movs	r2, #70	; 0x46
   261ac:	2108      	movs	r1, #8
   261ae:	4824      	ldr	r0, [pc, #144]	; (26240 <ble_hci_ram_init+0xcc>)
   261b0:	f7e6 fe7a 	bl	cea8 <os_mempool_init>
                         MYNEWT_VAL(BLE_HCI_EVT_LO_BUF_COUNT),
                         MYNEWT_VAL(BLE_HCI_EVT_BUF_SIZE),
                         ble_hci_ram_evt_lo_buf,
                         "ble_hci_ram_evt_lo_pool");
    SYSINIT_PANIC_ASSERT(rc == 0);
   261b4:	bb28      	cbnz	r0, 26202 <ble_hci_ram_init+0x8e>
}
   261b6:	b002      	add	sp, #8
   261b8:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   261ba:	f7e6 f815 	bl	c1e8 <hal_debugger_connected>
   261be:	b100      	cbz	r0, 261c2 <ble_hci_ram_init+0x4e>
   261c0:	be01      	bkpt	0x0001
   261c2:	2300      	movs	r3, #0
   261c4:	461a      	mov	r2, r3
   261c6:	4619      	mov	r1, r3
   261c8:	4618      	mov	r0, r3
   261ca:	f7e6 fa47 	bl	c65c <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
   261ce:	f7e6 f80b 	bl	c1e8 <hal_debugger_connected>
   261d2:	b100      	cbz	r0, 261d6 <ble_hci_ram_init+0x62>
   261d4:	be01      	bkpt	0x0001
   261d6:	2000      	movs	r0, #0
   261d8:	9000      	str	r0, [sp, #0]
   261da:	4b1a      	ldr	r3, [pc, #104]	; (26244 <ble_hci_ram_init+0xd0>)
   261dc:	681c      	ldr	r4, [r3, #0]
   261de:	4603      	mov	r3, r0
   261e0:	4602      	mov	r2, r0
   261e2:	4601      	mov	r1, r0
   261e4:	47a0      	blx	r4
   261e6:	e7d4      	b.n	26192 <ble_hci_ram_init+0x1e>
    SYSINIT_PANIC_ASSERT(rc == 0);
   261e8:	f7e5 fffe 	bl	c1e8 <hal_debugger_connected>
   261ec:	b100      	cbz	r0, 261f0 <ble_hci_ram_init+0x7c>
   261ee:	be01      	bkpt	0x0001
   261f0:	2000      	movs	r0, #0
   261f2:	9000      	str	r0, [sp, #0]
   261f4:	4b13      	ldr	r3, [pc, #76]	; (26244 <ble_hci_ram_init+0xd0>)
   261f6:	681c      	ldr	r4, [r3, #0]
   261f8:	4603      	mov	r3, r0
   261fa:	4602      	mov	r2, r0
   261fc:	4601      	mov	r1, r0
   261fe:	47a0      	blx	r4
   26200:	e7d0      	b.n	261a4 <ble_hci_ram_init+0x30>
    SYSINIT_PANIC_ASSERT(rc == 0);
   26202:	f7e5 fff1 	bl	c1e8 <hal_debugger_connected>
   26206:	b100      	cbz	r0, 2620a <ble_hci_ram_init+0x96>
   26208:	be01      	bkpt	0x0001
   2620a:	2000      	movs	r0, #0
   2620c:	9000      	str	r0, [sp, #0]
   2620e:	4b0d      	ldr	r3, [pc, #52]	; (26244 <ble_hci_ram_init+0xd0>)
   26210:	681c      	ldr	r4, [r3, #0]
   26212:	4603      	mov	r3, r0
   26214:	4602      	mov	r2, r0
   26216:	4601      	mov	r1, r0
   26218:	47a0      	blx	r4
}
   2621a:	e7cc      	b.n	261b6 <ble_hci_ram_init+0x42>
   2621c:	20003bd8 	.word	0x20003bd8
   26220:	0002ba74 	.word	0x0002ba74
   26224:	200035e0 	.word	0x200035e0
   26228:	200036e4 	.word	0x200036e4
   2622c:	0002ba8c 	.word	0x0002ba8c
   26230:	20003700 	.word	0x20003700
   26234:	20003790 	.word	0x20003790
   26238:	0002baa4 	.word	0x0002baa4
   2623c:	200037ac 	.word	0x200037ac
   26240:	200039ec 	.word	0x200039ec
   26244:	20000144 	.word	0x20000144

00026248 <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
   26248:	b4f0      	push	{r4, r5, r6, r7}
   2624a:	b08c      	sub	sp, #48	; 0x30
   2624c:	4604      	mov	r4, r0
   2624e:	460f      	mov	r7, r1
	const unsigned int rconst[11] = {
   26250:	ad01      	add	r5, sp, #4
   26252:	4e2a      	ldr	r6, [pc, #168]	; (262fc <tc_aes128_set_encrypt_key+0xb4>)
   26254:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   26256:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   26258:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   2625a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   2625c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   26260:	e885 0007 	stmia.w	r5, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
   26264:	2c00      	cmp	r4, #0
   26266:	d044      	beq.n	262f2 <tc_aes128_set_encrypt_key+0xaa>
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
   26268:	2f00      	cmp	r7, #0
   2626a:	d044      	beq.n	262f6 <tc_aes128_set_encrypt_key+0xae>
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
   2626c:	2300      	movs	r3, #0
   2626e:	e00f      	b.n	26290 <tc_aes128_set_encrypt_key+0x48>
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   26270:	f817 0023 	ldrb.w	r0, [r7, r3, lsl #2]
   26274:	eb07 0183 	add.w	r1, r7, r3, lsl #2
   26278:	784a      	ldrb	r2, [r1, #1]
   2627a:	0412      	lsls	r2, r2, #16
   2627c:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   26280:	7888      	ldrb	r0, [r1, #2]
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   26282:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   26286:	78c9      	ldrb	r1, [r1, #3]
   26288:	430a      	orrs	r2, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   2628a:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
	for (i = 0; i < Nk; ++i) {
   2628e:	3301      	adds	r3, #1
   26290:	2b03      	cmp	r3, #3
   26292:	d9ed      	bls.n	26270 <tc_aes128_set_encrypt_key+0x28>
   26294:	e006      	b.n	262a4 <tc_aes128_set_encrypt_key+0x5c>
	for (; i < (Nb * (Nr + 1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
		}
		s->words[i] = s->words[i-Nk] ^ t;
   26296:	1f19      	subs	r1, r3, #4
   26298:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
   2629c:	404a      	eors	r2, r1
   2629e:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
	for (; i < (Nb * (Nr + 1)); ++i) {
   262a2:	3301      	adds	r3, #1
   262a4:	2b2b      	cmp	r3, #43	; 0x2b
   262a6:	d820      	bhi.n	262ea <tc_aes128_set_encrypt_key+0xa2>
		t = s->words[i-1];
   262a8:	1e5a      	subs	r2, r3, #1
   262aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
		if ((i % Nk) == 0) {
   262ae:	f013 0f03 	tst.w	r3, #3
   262b2:	d1f0      	bne.n	26296 <tc_aes128_set_encrypt_key+0x4e>
	return (((a) >> 24)|((a) << 8));
   262b4:	ea4f 6232 	mov.w	r2, r2, ror #24
			t = subword(rotword(t)) ^ rconst[i/Nk];
   262b8:	0e11      	lsrs	r1, r2, #24
   262ba:	4811      	ldr	r0, [pc, #68]	; (26300 <tc_aes128_set_encrypt_key+0xb8>)
   262bc:	5c45      	ldrb	r5, [r0, r1]
   262be:	f3c2 4107 	ubfx	r1, r2, #16, #8
   262c2:	5c41      	ldrb	r1, [r0, r1]
   262c4:	0409      	lsls	r1, r1, #16
   262c6:	ea41 6105 	orr.w	r1, r1, r5, lsl #24
   262ca:	f3c2 2507 	ubfx	r5, r2, #8, #8
   262ce:	5d45      	ldrb	r5, [r0, r5]
   262d0:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
   262d4:	b2d2      	uxtb	r2, r2
   262d6:	5c82      	ldrb	r2, [r0, r2]
   262d8:	4311      	orrs	r1, r2
   262da:	f023 0203 	bic.w	r2, r3, #3
   262de:	a80c      	add	r0, sp, #48	; 0x30
   262e0:	4402      	add	r2, r0
   262e2:	f852 2c2c 	ldr.w	r2, [r2, #-44]
   262e6:	404a      	eors	r2, r1
   262e8:	e7d5      	b.n	26296 <tc_aes128_set_encrypt_key+0x4e>
	}

	return TC_CRYPTO_SUCCESS;
   262ea:	2001      	movs	r0, #1
}
   262ec:	b00c      	add	sp, #48	; 0x30
   262ee:	bcf0      	pop	{r4, r5, r6, r7}
   262f0:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   262f2:	2000      	movs	r0, #0
   262f4:	e7fa      	b.n	262ec <tc_aes128_set_encrypt_key+0xa4>
		return TC_CRYPTO_FAIL;
   262f6:	2000      	movs	r0, #0
   262f8:	e7f8      	b.n	262ec <tc_aes128_set_encrypt_key+0xa4>
   262fa:	bf00      	nop
   262fc:	0002bb04 	.word	0x0002bb04
   26300:	0002bb30 	.word	0x0002bb30

00026304 <tc_aes_encrypt>:
int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   26304:	2800      	cmp	r0, #0
   26306:	f000 8367 	beq.w	269d8 <tc_aes_encrypt+0x6d4>
{
   2630a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2630e:	b088      	sub	sp, #32
   26310:	4680      	mov	r8, r0
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   26312:	2900      	cmp	r1, #0
   26314:	f000 8362 	beq.w	269dc <tc_aes_encrypt+0x6d8>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   26318:	2a00      	cmp	r2, #0
   2631a:	f000 8361 	beq.w	269e0 <tc_aes_encrypt+0x6dc>
   2631e:	4617      	mov	r7, r2
   26320:	460a      	mov	r2, r1
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   26322:	2310      	movs	r3, #16
   26324:	4619      	mov	r1, r3
   26326:	eb0d 0003 	add.w	r0, sp, r3
   2632a:	f001 fcb5 	bl	27c98 <_copy>
	add_round_key(state, s->words);
   2632e:	463e      	mov	r6, r7
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   26330:	683b      	ldr	r3, [r7, #0]
   26332:	f89d 2010 	ldrb.w	r2, [sp, #16]
   26336:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   2633a:	f88d 2010 	strb.w	r2, [sp, #16]
   2633e:	f3c3 4207 	ubfx	r2, r3, #16, #8
   26342:	f89d 1011 	ldrb.w	r1, [sp, #17]
   26346:	404a      	eors	r2, r1
   26348:	f88d 2011 	strb.w	r2, [sp, #17]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   2634c:	f3c3 2207 	ubfx	r2, r3, #8, #8
   26350:	f89d 1012 	ldrb.w	r1, [sp, #18]
   26354:	404a      	eors	r2, r1
   26356:	f88d 2012 	strb.w	r2, [sp, #18]
   2635a:	b2db      	uxtb	r3, r3
   2635c:	f89d 2013 	ldrb.w	r2, [sp, #19]
   26360:	4053      	eors	r3, r2
   26362:	f88d 3013 	strb.w	r3, [sp, #19]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   26366:	687b      	ldr	r3, [r7, #4]
   26368:	f89d 2014 	ldrb.w	r2, [sp, #20]
   2636c:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   26370:	f88d 2014 	strb.w	r2, [sp, #20]
   26374:	f3c3 4207 	ubfx	r2, r3, #16, #8
   26378:	f89d 1015 	ldrb.w	r1, [sp, #21]
   2637c:	404a      	eors	r2, r1
   2637e:	f88d 2015 	strb.w	r2, [sp, #21]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   26382:	f3c3 2207 	ubfx	r2, r3, #8, #8
   26386:	f89d 1016 	ldrb.w	r1, [sp, #22]
   2638a:	404a      	eors	r2, r1
   2638c:	f88d 2016 	strb.w	r2, [sp, #22]
   26390:	b2db      	uxtb	r3, r3
   26392:	f89d 2017 	ldrb.w	r2, [sp, #23]
   26396:	4053      	eors	r3, r2
   26398:	f88d 3017 	strb.w	r3, [sp, #23]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   2639c:	68bb      	ldr	r3, [r7, #8]
   2639e:	f89d 2018 	ldrb.w	r2, [sp, #24]
   263a2:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   263a6:	f88d 2018 	strb.w	r2, [sp, #24]
   263aa:	f3c3 4207 	ubfx	r2, r3, #16, #8
   263ae:	f89d 1019 	ldrb.w	r1, [sp, #25]
   263b2:	404a      	eors	r2, r1
   263b4:	f88d 2019 	strb.w	r2, [sp, #25]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   263b8:	f3c3 2207 	ubfx	r2, r3, #8, #8
   263bc:	f89d 101a 	ldrb.w	r1, [sp, #26]
   263c0:	404a      	eors	r2, r1
   263c2:	f88d 201a 	strb.w	r2, [sp, #26]
   263c6:	b2db      	uxtb	r3, r3
   263c8:	f89d 201b 	ldrb.w	r2, [sp, #27]
   263cc:	4053      	eors	r3, r2
   263ce:	f88d 301b 	strb.w	r3, [sp, #27]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   263d2:	68fb      	ldr	r3, [r7, #12]
   263d4:	f89d 201c 	ldrb.w	r2, [sp, #28]
   263d8:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   263dc:	f88d 201c 	strb.w	r2, [sp, #28]
   263e0:	f3c3 4207 	ubfx	r2, r3, #16, #8
   263e4:	f89d 101d 	ldrb.w	r1, [sp, #29]
   263e8:	404a      	eors	r2, r1
   263ea:	f88d 201d 	strb.w	r2, [sp, #29]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   263ee:	f3c3 2207 	ubfx	r2, r3, #8, #8
   263f2:	f89d 101e 	ldrb.w	r1, [sp, #30]
   263f6:	404a      	eors	r2, r1
   263f8:	f88d 201e 	strb.w	r2, [sp, #30]
   263fc:	b2db      	uxtb	r3, r3
   263fe:	f89d 201f 	ldrb.w	r2, [sp, #31]
   26402:	4053      	eors	r3, r2
   26404:	f88d 301f 	strb.w	r3, [sp, #31]

	for (i = 0; i < (Nr - 1); ++i) {
   26408:	2500      	movs	r5, #0
   2640a:	e210      	b.n	2682e <tc_aes_encrypt+0x52a>
		s[i] = sbox[s[i]];
   2640c:	a904      	add	r1, sp, #16
   2640e:	5ccc      	ldrb	r4, [r1, r3]
   26410:	4a02      	ldr	r2, [pc, #8]	; (2641c <tc_aes_encrypt+0x118>)
   26412:	5d14      	ldrb	r4, [r2, r4]
   26414:	54cc      	strb	r4, [r1, r3]
	for (i = 0; i < (Nb * Nk); ++i) {
   26416:	3301      	adds	r3, #1
   26418:	e002      	b.n	26420 <tc_aes_encrypt+0x11c>
   2641a:	bf00      	nop
   2641c:	0002bb30 	.word	0x0002bb30
   26420:	2b0f      	cmp	r3, #15
   26422:	d9f3      	bls.n	2640c <tc_aes_encrypt+0x108>
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   26424:	f89d 3010 	ldrb.w	r3, [sp, #16]
   26428:	f88d 3000 	strb.w	r3, [sp]
   2642c:	f89d 3015 	ldrb.w	r3, [sp, #21]
   26430:	f88d 3001 	strb.w	r3, [sp, #1]
   26434:	f89d 301a 	ldrb.w	r3, [sp, #26]
   26438:	f88d 3002 	strb.w	r3, [sp, #2]
   2643c:	f89d 301f 	ldrb.w	r3, [sp, #31]
   26440:	f88d 3003 	strb.w	r3, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   26444:	f89d 3014 	ldrb.w	r3, [sp, #20]
   26448:	f88d 3004 	strb.w	r3, [sp, #4]
   2644c:	f89d 3019 	ldrb.w	r3, [sp, #25]
   26450:	f88d 3005 	strb.w	r3, [sp, #5]
   26454:	f89d 301e 	ldrb.w	r3, [sp, #30]
   26458:	f88d 3006 	strb.w	r3, [sp, #6]
   2645c:	f89d 3013 	ldrb.w	r3, [sp, #19]
   26460:	f88d 3007 	strb.w	r3, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   26464:	f89d 3018 	ldrb.w	r3, [sp, #24]
   26468:	f88d 3008 	strb.w	r3, [sp, #8]
   2646c:	f89d 301d 	ldrb.w	r3, [sp, #29]
   26470:	f88d 3009 	strb.w	r3, [sp, #9]
   26474:	f89d 3012 	ldrb.w	r3, [sp, #18]
   26478:	f88d 300a 	strb.w	r3, [sp, #10]
   2647c:	f89d 3017 	ldrb.w	r3, [sp, #23]
   26480:	f88d 300b 	strb.w	r3, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   26484:	f89d 301c 	ldrb.w	r3, [sp, #28]
   26488:	f88d 300c 	strb.w	r3, [sp, #12]
   2648c:	f89d 3011 	ldrb.w	r3, [sp, #17]
   26490:	f88d 300d 	strb.w	r3, [sp, #13]
   26494:	f89d 3016 	ldrb.w	r3, [sp, #22]
   26498:	f88d 300e 	strb.w	r3, [sp, #14]
   2649c:	f89d 301b 	ldrb.w	r3, [sp, #27]
   264a0:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   264a4:	2310      	movs	r3, #16
   264a6:	466a      	mov	r2, sp
   264a8:	4619      	mov	r1, r3
   264aa:	eb0d 0003 	add.w	r0, sp, r3
   264ae:	f001 fbf3 	bl	27c98 <_copy>
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   264b2:	f89d 0010 	ldrb.w	r0, [sp, #16]
   264b6:	f001 fbff 	bl	27cb8 <_double_byte>
   264ba:	4604      	mov	r4, r0
   264bc:	f89d 0011 	ldrb.w	r0, [sp, #17]
   264c0:	f001 fbfa 	bl	27cb8 <_double_byte>
   264c4:	f89d 1011 	ldrb.w	r1, [sp, #17]
   264c8:	f89d 2012 	ldrb.w	r2, [sp, #18]
   264cc:	f89d 3013 	ldrb.w	r3, [sp, #19]
   264d0:	4048      	eors	r0, r1
   264d2:	4044      	eors	r4, r0
   264d4:	4062      	eors	r2, r4
   264d6:	4053      	eors	r3, r2
   264d8:	f88d 3000 	strb.w	r3, [sp]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   264dc:	f89d 4010 	ldrb.w	r4, [sp, #16]
   264e0:	4608      	mov	r0, r1
   264e2:	f001 fbe9 	bl	27cb8 <_double_byte>
   264e6:	4044      	eors	r4, r0
   264e8:	b2e4      	uxtb	r4, r4
   264ea:	f89d 0012 	ldrb.w	r0, [sp, #18]
   264ee:	f001 fbe3 	bl	27cb8 <_double_byte>
   264f2:	f89d 2012 	ldrb.w	r2, [sp, #18]
   264f6:	f89d 3013 	ldrb.w	r3, [sp, #19]
   264fa:	4050      	eors	r0, r2
   264fc:	4044      	eors	r4, r0
   264fe:	405c      	eors	r4, r3
   26500:	f88d 4001 	strb.w	r4, [sp, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   26504:	f89d 4010 	ldrb.w	r4, [sp, #16]
   26508:	f89d 0011 	ldrb.w	r0, [sp, #17]
   2650c:	4044      	eors	r4, r0
   2650e:	4610      	mov	r0, r2
   26510:	f001 fbd2 	bl	27cb8 <_double_byte>
   26514:	4044      	eors	r4, r0
   26516:	b2e4      	uxtb	r4, r4
   26518:	f89d 0013 	ldrb.w	r0, [sp, #19]
   2651c:	f001 fbcc 	bl	27cb8 <_double_byte>
   26520:	f89d 3013 	ldrb.w	r3, [sp, #19]
   26524:	4058      	eors	r0, r3
   26526:	4044      	eors	r4, r0
   26528:	f88d 4002 	strb.w	r4, [sp, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   2652c:	f89d 0010 	ldrb.w	r0, [sp, #16]
   26530:	f001 fbc2 	bl	27cb8 <_double_byte>
   26534:	f89d 2010 	ldrb.w	r2, [sp, #16]
   26538:	f89d 3011 	ldrb.w	r3, [sp, #17]
   2653c:	f89d 4012 	ldrb.w	r4, [sp, #18]
   26540:	4050      	eors	r0, r2
   26542:	4043      	eors	r3, r0
   26544:	405c      	eors	r4, r3
   26546:	b2e4      	uxtb	r4, r4
   26548:	f89d 0013 	ldrb.w	r0, [sp, #19]
   2654c:	f001 fbb4 	bl	27cb8 <_double_byte>
   26550:	4060      	eors	r0, r4
   26552:	f88d 0003 	strb.w	r0, [sp, #3]
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   26556:	f89d 0014 	ldrb.w	r0, [sp, #20]
   2655a:	f001 fbad 	bl	27cb8 <_double_byte>
   2655e:	4604      	mov	r4, r0
   26560:	f89d 0015 	ldrb.w	r0, [sp, #21]
   26564:	f001 fba8 	bl	27cb8 <_double_byte>
   26568:	f89d 1015 	ldrb.w	r1, [sp, #21]
   2656c:	f89d 2016 	ldrb.w	r2, [sp, #22]
   26570:	f89d 3017 	ldrb.w	r3, [sp, #23]
   26574:	4048      	eors	r0, r1
   26576:	4044      	eors	r4, r0
   26578:	4062      	eors	r2, r4
   2657a:	4053      	eors	r3, r2
   2657c:	f88d 3004 	strb.w	r3, [sp, #4]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   26580:	f89d 4014 	ldrb.w	r4, [sp, #20]
   26584:	4608      	mov	r0, r1
   26586:	f001 fb97 	bl	27cb8 <_double_byte>
   2658a:	4044      	eors	r4, r0
   2658c:	b2e4      	uxtb	r4, r4
   2658e:	f89d 0016 	ldrb.w	r0, [sp, #22]
   26592:	f001 fb91 	bl	27cb8 <_double_byte>
   26596:	f89d 2016 	ldrb.w	r2, [sp, #22]
   2659a:	f89d 3017 	ldrb.w	r3, [sp, #23]
   2659e:	4050      	eors	r0, r2
   265a0:	4044      	eors	r4, r0
   265a2:	405c      	eors	r4, r3
   265a4:	f88d 4005 	strb.w	r4, [sp, #5]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   265a8:	f89d 4014 	ldrb.w	r4, [sp, #20]
   265ac:	f89d 0015 	ldrb.w	r0, [sp, #21]
   265b0:	4044      	eors	r4, r0
   265b2:	4610      	mov	r0, r2
   265b4:	f001 fb80 	bl	27cb8 <_double_byte>
   265b8:	4044      	eors	r4, r0
   265ba:	b2e4      	uxtb	r4, r4
   265bc:	f89d 0017 	ldrb.w	r0, [sp, #23]
   265c0:	f001 fb7a 	bl	27cb8 <_double_byte>
   265c4:	f89d 3017 	ldrb.w	r3, [sp, #23]
   265c8:	4058      	eors	r0, r3
   265ca:	4044      	eors	r4, r0
   265cc:	f88d 4006 	strb.w	r4, [sp, #6]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   265d0:	f89d 0014 	ldrb.w	r0, [sp, #20]
   265d4:	f001 fb70 	bl	27cb8 <_double_byte>
   265d8:	f89d 2014 	ldrb.w	r2, [sp, #20]
   265dc:	f89d 3015 	ldrb.w	r3, [sp, #21]
   265e0:	f89d 4016 	ldrb.w	r4, [sp, #22]
   265e4:	4050      	eors	r0, r2
   265e6:	4043      	eors	r3, r0
   265e8:	405c      	eors	r4, r3
   265ea:	b2e4      	uxtb	r4, r4
   265ec:	f89d 0017 	ldrb.w	r0, [sp, #23]
   265f0:	f001 fb62 	bl	27cb8 <_double_byte>
   265f4:	4060      	eors	r0, r4
   265f6:	f88d 0007 	strb.w	r0, [sp, #7]
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   265fa:	f89d 0018 	ldrb.w	r0, [sp, #24]
   265fe:	f001 fb5b 	bl	27cb8 <_double_byte>
   26602:	4604      	mov	r4, r0
   26604:	f89d 0019 	ldrb.w	r0, [sp, #25]
   26608:	f001 fb56 	bl	27cb8 <_double_byte>
   2660c:	f89d 1019 	ldrb.w	r1, [sp, #25]
   26610:	f89d 201a 	ldrb.w	r2, [sp, #26]
   26614:	f89d 301b 	ldrb.w	r3, [sp, #27]
   26618:	4048      	eors	r0, r1
   2661a:	4044      	eors	r4, r0
   2661c:	4062      	eors	r2, r4
   2661e:	4053      	eors	r3, r2
   26620:	f88d 3008 	strb.w	r3, [sp, #8]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   26624:	f89d 4018 	ldrb.w	r4, [sp, #24]
   26628:	4608      	mov	r0, r1
   2662a:	f001 fb45 	bl	27cb8 <_double_byte>
   2662e:	4044      	eors	r4, r0
   26630:	b2e4      	uxtb	r4, r4
   26632:	f89d 001a 	ldrb.w	r0, [sp, #26]
   26636:	f001 fb3f 	bl	27cb8 <_double_byte>
   2663a:	f89d 201a 	ldrb.w	r2, [sp, #26]
   2663e:	f89d 301b 	ldrb.w	r3, [sp, #27]
   26642:	4050      	eors	r0, r2
   26644:	4044      	eors	r4, r0
   26646:	405c      	eors	r4, r3
   26648:	f88d 4009 	strb.w	r4, [sp, #9]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   2664c:	f89d 4018 	ldrb.w	r4, [sp, #24]
   26650:	f89d 0019 	ldrb.w	r0, [sp, #25]
   26654:	4044      	eors	r4, r0
   26656:	4610      	mov	r0, r2
   26658:	f001 fb2e 	bl	27cb8 <_double_byte>
   2665c:	4044      	eors	r4, r0
   2665e:	b2e4      	uxtb	r4, r4
   26660:	f89d 001b 	ldrb.w	r0, [sp, #27]
   26664:	f001 fb28 	bl	27cb8 <_double_byte>
   26668:	f89d 301b 	ldrb.w	r3, [sp, #27]
   2666c:	4058      	eors	r0, r3
   2666e:	4044      	eors	r4, r0
   26670:	f88d 400a 	strb.w	r4, [sp, #10]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   26674:	f89d 0018 	ldrb.w	r0, [sp, #24]
   26678:	f001 fb1e 	bl	27cb8 <_double_byte>
   2667c:	f89d 2018 	ldrb.w	r2, [sp, #24]
   26680:	f89d 3019 	ldrb.w	r3, [sp, #25]
   26684:	f89d 401a 	ldrb.w	r4, [sp, #26]
   26688:	4050      	eors	r0, r2
   2668a:	4043      	eors	r3, r0
   2668c:	405c      	eors	r4, r3
   2668e:	b2e4      	uxtb	r4, r4
   26690:	f89d 001b 	ldrb.w	r0, [sp, #27]
   26694:	f001 fb10 	bl	27cb8 <_double_byte>
   26698:	4060      	eors	r0, r4
   2669a:	f88d 000b 	strb.w	r0, [sp, #11]
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   2669e:	f89d 001c 	ldrb.w	r0, [sp, #28]
   266a2:	f001 fb09 	bl	27cb8 <_double_byte>
   266a6:	4604      	mov	r4, r0
   266a8:	f89d 001d 	ldrb.w	r0, [sp, #29]
   266ac:	f001 fb04 	bl	27cb8 <_double_byte>
   266b0:	f89d 101d 	ldrb.w	r1, [sp, #29]
   266b4:	f89d 201e 	ldrb.w	r2, [sp, #30]
   266b8:	f89d 301f 	ldrb.w	r3, [sp, #31]
   266bc:	4048      	eors	r0, r1
   266be:	4044      	eors	r4, r0
   266c0:	4062      	eors	r2, r4
   266c2:	4053      	eors	r3, r2
   266c4:	f88d 300c 	strb.w	r3, [sp, #12]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   266c8:	f89d 401c 	ldrb.w	r4, [sp, #28]
   266cc:	4608      	mov	r0, r1
   266ce:	f001 faf3 	bl	27cb8 <_double_byte>
   266d2:	4044      	eors	r4, r0
   266d4:	b2e4      	uxtb	r4, r4
   266d6:	f89d 001e 	ldrb.w	r0, [sp, #30]
   266da:	f001 faed 	bl	27cb8 <_double_byte>
   266de:	f89d 201e 	ldrb.w	r2, [sp, #30]
   266e2:	f89d 301f 	ldrb.w	r3, [sp, #31]
   266e6:	4050      	eors	r0, r2
   266e8:	4044      	eors	r4, r0
   266ea:	405c      	eors	r4, r3
   266ec:	f88d 400d 	strb.w	r4, [sp, #13]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   266f0:	f89d 401c 	ldrb.w	r4, [sp, #28]
   266f4:	f89d 001d 	ldrb.w	r0, [sp, #29]
   266f8:	4044      	eors	r4, r0
   266fa:	4610      	mov	r0, r2
   266fc:	f001 fadc 	bl	27cb8 <_double_byte>
   26700:	4044      	eors	r4, r0
   26702:	b2e4      	uxtb	r4, r4
   26704:	f89d 001f 	ldrb.w	r0, [sp, #31]
   26708:	f001 fad6 	bl	27cb8 <_double_byte>
   2670c:	f89d 301f 	ldrb.w	r3, [sp, #31]
   26710:	4058      	eors	r0, r3
   26712:	4044      	eors	r4, r0
   26714:	f88d 400e 	strb.w	r4, [sp, #14]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   26718:	f89d 001c 	ldrb.w	r0, [sp, #28]
   2671c:	f001 facc 	bl	27cb8 <_double_byte>
   26720:	f89d 201c 	ldrb.w	r2, [sp, #28]
   26724:	f89d 301d 	ldrb.w	r3, [sp, #29]
   26728:	f89d 401e 	ldrb.w	r4, [sp, #30]
   2672c:	4050      	eors	r0, r2
   2672e:	4043      	eors	r3, r0
   26730:	405c      	eors	r4, r3
   26732:	b2e4      	uxtb	r4, r4
   26734:	f89d 001f 	ldrb.w	r0, [sp, #31]
   26738:	f001 fabe 	bl	27cb8 <_double_byte>
   2673c:	4060      	eors	r0, r4
   2673e:	f88d 000f 	strb.w	r0, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   26742:	2310      	movs	r3, #16
   26744:	466a      	mov	r2, sp
   26746:	4619      	mov	r1, r3
   26748:	eb0d 0003 	add.w	r0, sp, r3
   2674c:	f001 faa4 	bl	27c98 <_copy>
		sub_bytes(state);
		shift_rows(state);
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   26750:	3501      	adds	r5, #1
   26752:	012b      	lsls	r3, r5, #4
   26754:	18f2      	adds	r2, r6, r3
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   26756:	58f3      	ldr	r3, [r6, r3]
   26758:	f89d 1010 	ldrb.w	r1, [sp, #16]
   2675c:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
   26760:	f88d 1010 	strb.w	r1, [sp, #16]
   26764:	f3c3 4107 	ubfx	r1, r3, #16, #8
   26768:	f89d 0011 	ldrb.w	r0, [sp, #17]
   2676c:	4041      	eors	r1, r0
   2676e:	f88d 1011 	strb.w	r1, [sp, #17]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   26772:	f3c3 2107 	ubfx	r1, r3, #8, #8
   26776:	f89d 0012 	ldrb.w	r0, [sp, #18]
   2677a:	4041      	eors	r1, r0
   2677c:	f88d 1012 	strb.w	r1, [sp, #18]
   26780:	b2db      	uxtb	r3, r3
   26782:	f89d 1013 	ldrb.w	r1, [sp, #19]
   26786:	404b      	eors	r3, r1
   26788:	f88d 3013 	strb.w	r3, [sp, #19]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   2678c:	6853      	ldr	r3, [r2, #4]
   2678e:	f89d 1014 	ldrb.w	r1, [sp, #20]
   26792:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
   26796:	f88d 1014 	strb.w	r1, [sp, #20]
   2679a:	f3c3 4107 	ubfx	r1, r3, #16, #8
   2679e:	f89d 0015 	ldrb.w	r0, [sp, #21]
   267a2:	4041      	eors	r1, r0
   267a4:	f88d 1015 	strb.w	r1, [sp, #21]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   267a8:	f3c3 2107 	ubfx	r1, r3, #8, #8
   267ac:	f89d 0016 	ldrb.w	r0, [sp, #22]
   267b0:	4041      	eors	r1, r0
   267b2:	f88d 1016 	strb.w	r1, [sp, #22]
   267b6:	b2db      	uxtb	r3, r3
   267b8:	f89d 1017 	ldrb.w	r1, [sp, #23]
   267bc:	404b      	eors	r3, r1
   267be:	f88d 3017 	strb.w	r3, [sp, #23]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   267c2:	6893      	ldr	r3, [r2, #8]
   267c4:	f89d 1018 	ldrb.w	r1, [sp, #24]
   267c8:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
   267cc:	f88d 1018 	strb.w	r1, [sp, #24]
   267d0:	f3c3 4107 	ubfx	r1, r3, #16, #8
   267d4:	f89d 0019 	ldrb.w	r0, [sp, #25]
   267d8:	4041      	eors	r1, r0
   267da:	f88d 1019 	strb.w	r1, [sp, #25]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   267de:	f3c3 2107 	ubfx	r1, r3, #8, #8
   267e2:	f89d 001a 	ldrb.w	r0, [sp, #26]
   267e6:	4041      	eors	r1, r0
   267e8:	f88d 101a 	strb.w	r1, [sp, #26]
   267ec:	b2db      	uxtb	r3, r3
   267ee:	f89d 101b 	ldrb.w	r1, [sp, #27]
   267f2:	404b      	eors	r3, r1
   267f4:	f88d 301b 	strb.w	r3, [sp, #27]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   267f8:	68d3      	ldr	r3, [r2, #12]
   267fa:	f89d 201c 	ldrb.w	r2, [sp, #28]
   267fe:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   26802:	f88d 201c 	strb.w	r2, [sp, #28]
   26806:	f3c3 4207 	ubfx	r2, r3, #16, #8
   2680a:	f89d 101d 	ldrb.w	r1, [sp, #29]
   2680e:	404a      	eors	r2, r1
   26810:	f88d 201d 	strb.w	r2, [sp, #29]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   26814:	f3c3 2207 	ubfx	r2, r3, #8, #8
   26818:	f89d 101e 	ldrb.w	r1, [sp, #30]
   2681c:	404a      	eors	r2, r1
   2681e:	f88d 201e 	strb.w	r2, [sp, #30]
   26822:	b2db      	uxtb	r3, r3
   26824:	f89d 201f 	ldrb.w	r2, [sp, #31]
   26828:	4053      	eors	r3, r2
   2682a:	f88d 301f 	strb.w	r3, [sp, #31]
	for (i = 0; i < (Nr - 1); ++i) {
   2682e:	2d08      	cmp	r5, #8
   26830:	d801      	bhi.n	26836 <tc_aes_encrypt+0x532>
	for (i = 0; i < (Nb * Nk); ++i) {
   26832:	2300      	movs	r3, #0
   26834:	e5f4      	b.n	26420 <tc_aes_encrypt+0x11c>
   26836:	2300      	movs	r3, #0
   26838:	e005      	b.n	26846 <tc_aes_encrypt+0x542>
		s[i] = sbox[s[i]];
   2683a:	aa04      	add	r2, sp, #16
   2683c:	5cd1      	ldrb	r1, [r2, r3]
   2683e:	4869      	ldr	r0, [pc, #420]	; (269e4 <tc_aes_encrypt+0x6e0>)
   26840:	5c41      	ldrb	r1, [r0, r1]
   26842:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < (Nb * Nk); ++i) {
   26844:	3301      	adds	r3, #1
   26846:	2b0f      	cmp	r3, #15
   26848:	d9f7      	bls.n	2683a <tc_aes_encrypt+0x536>
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   2684a:	f89d 3010 	ldrb.w	r3, [sp, #16]
   2684e:	f88d 3000 	strb.w	r3, [sp]
   26852:	f89d 3015 	ldrb.w	r3, [sp, #21]
   26856:	f88d 3001 	strb.w	r3, [sp, #1]
   2685a:	f89d 301a 	ldrb.w	r3, [sp, #26]
   2685e:	f88d 3002 	strb.w	r3, [sp, #2]
   26862:	f89d 301f 	ldrb.w	r3, [sp, #31]
   26866:	f88d 3003 	strb.w	r3, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   2686a:	f89d 3014 	ldrb.w	r3, [sp, #20]
   2686e:	f88d 3004 	strb.w	r3, [sp, #4]
   26872:	f89d 3019 	ldrb.w	r3, [sp, #25]
   26876:	f88d 3005 	strb.w	r3, [sp, #5]
   2687a:	f89d 301e 	ldrb.w	r3, [sp, #30]
   2687e:	f88d 3006 	strb.w	r3, [sp, #6]
   26882:	f89d 3013 	ldrb.w	r3, [sp, #19]
   26886:	f88d 3007 	strb.w	r3, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   2688a:	f89d 3018 	ldrb.w	r3, [sp, #24]
   2688e:	f88d 3008 	strb.w	r3, [sp, #8]
   26892:	f89d 301d 	ldrb.w	r3, [sp, #29]
   26896:	f88d 3009 	strb.w	r3, [sp, #9]
   2689a:	f89d 3012 	ldrb.w	r3, [sp, #18]
   2689e:	f88d 300a 	strb.w	r3, [sp, #10]
   268a2:	f89d 3017 	ldrb.w	r3, [sp, #23]
   268a6:	f88d 300b 	strb.w	r3, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   268aa:	f89d 301c 	ldrb.w	r3, [sp, #28]
   268ae:	f88d 300c 	strb.w	r3, [sp, #12]
   268b2:	f89d 3011 	ldrb.w	r3, [sp, #17]
   268b6:	f88d 300d 	strb.w	r3, [sp, #13]
   268ba:	f89d 3016 	ldrb.w	r3, [sp, #22]
   268be:	f88d 300e 	strb.w	r3, [sp, #14]
   268c2:	f89d 301b 	ldrb.w	r3, [sp, #27]
   268c6:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   268ca:	2310      	movs	r3, #16
   268cc:	466a      	mov	r2, sp
   268ce:	4619      	mov	r1, r3
   268d0:	eb0d 0003 	add.w	r0, sp, r3
   268d4:	f001 f9e0 	bl	27c98 <_copy>
	}

	sub_bytes(state);
	shift_rows(state);
	add_round_key(state, s->words + Nb*(i+1));
   268d8:	1c6b      	adds	r3, r5, #1
   268da:	011b      	lsls	r3, r3, #4
   268dc:	18fa      	adds	r2, r7, r3
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   268de:	58fb      	ldr	r3, [r7, r3]
   268e0:	f89d 1010 	ldrb.w	r1, [sp, #16]
   268e4:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
   268e8:	f88d 1010 	strb.w	r1, [sp, #16]
   268ec:	f3c3 4107 	ubfx	r1, r3, #16, #8
   268f0:	f89d 0011 	ldrb.w	r0, [sp, #17]
   268f4:	4041      	eors	r1, r0
   268f6:	f88d 1011 	strb.w	r1, [sp, #17]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   268fa:	f3c3 2107 	ubfx	r1, r3, #8, #8
   268fe:	f89d 0012 	ldrb.w	r0, [sp, #18]
   26902:	4041      	eors	r1, r0
   26904:	f88d 1012 	strb.w	r1, [sp, #18]
   26908:	b2db      	uxtb	r3, r3
   2690a:	f89d 1013 	ldrb.w	r1, [sp, #19]
   2690e:	404b      	eors	r3, r1
   26910:	f88d 3013 	strb.w	r3, [sp, #19]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   26914:	6853      	ldr	r3, [r2, #4]
   26916:	f89d 1014 	ldrb.w	r1, [sp, #20]
   2691a:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
   2691e:	f88d 1014 	strb.w	r1, [sp, #20]
   26922:	f3c3 4107 	ubfx	r1, r3, #16, #8
   26926:	f89d 0015 	ldrb.w	r0, [sp, #21]
   2692a:	4041      	eors	r1, r0
   2692c:	f88d 1015 	strb.w	r1, [sp, #21]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   26930:	f3c3 2107 	ubfx	r1, r3, #8, #8
   26934:	f89d 0016 	ldrb.w	r0, [sp, #22]
   26938:	4041      	eors	r1, r0
   2693a:	f88d 1016 	strb.w	r1, [sp, #22]
   2693e:	b2db      	uxtb	r3, r3
   26940:	f89d 1017 	ldrb.w	r1, [sp, #23]
   26944:	404b      	eors	r3, r1
   26946:	f88d 3017 	strb.w	r3, [sp, #23]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   2694a:	6893      	ldr	r3, [r2, #8]
   2694c:	f89d 1018 	ldrb.w	r1, [sp, #24]
   26950:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
   26954:	f88d 1018 	strb.w	r1, [sp, #24]
   26958:	f3c3 4107 	ubfx	r1, r3, #16, #8
   2695c:	f89d 0019 	ldrb.w	r0, [sp, #25]
   26960:	4041      	eors	r1, r0
   26962:	f88d 1019 	strb.w	r1, [sp, #25]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   26966:	f3c3 2107 	ubfx	r1, r3, #8, #8
   2696a:	f89d 001a 	ldrb.w	r0, [sp, #26]
   2696e:	4041      	eors	r1, r0
   26970:	f88d 101a 	strb.w	r1, [sp, #26]
   26974:	b2db      	uxtb	r3, r3
   26976:	f89d 101b 	ldrb.w	r1, [sp, #27]
   2697a:	404b      	eors	r3, r1
   2697c:	f88d 301b 	strb.w	r3, [sp, #27]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   26980:	68d3      	ldr	r3, [r2, #12]
   26982:	f89d 201c 	ldrb.w	r2, [sp, #28]
   26986:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   2698a:	f88d 201c 	strb.w	r2, [sp, #28]
   2698e:	f3c3 4207 	ubfx	r2, r3, #16, #8
   26992:	f89d 101d 	ldrb.w	r1, [sp, #29]
   26996:	404a      	eors	r2, r1
   26998:	f88d 201d 	strb.w	r2, [sp, #29]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   2699c:	f3c3 2207 	ubfx	r2, r3, #8, #8
   269a0:	f89d 101e 	ldrb.w	r1, [sp, #30]
   269a4:	404a      	eors	r2, r1
   269a6:	f88d 201e 	strb.w	r2, [sp, #30]
   269aa:	b2db      	uxtb	r3, r3
   269ac:	f89d 201f 	ldrb.w	r2, [sp, #31]
   269b0:	4053      	eors	r3, r2
   269b2:	f88d 301f 	strb.w	r3, [sp, #31]

	(void)_copy(out, sizeof(state), state, sizeof(state));
   269b6:	2310      	movs	r3, #16
   269b8:	eb0d 0203 	add.w	r2, sp, r3
   269bc:	4619      	mov	r1, r3
   269be:	4640      	mov	r0, r8
   269c0:	f001 f96a 	bl	27c98 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   269c4:	2210      	movs	r2, #16
   269c6:	2100      	movs	r1, #0
   269c8:	eb0d 0002 	add.w	r0, sp, r2
   269cc:	f001 f970 	bl	27cb0 <_set>

	return TC_CRYPTO_SUCCESS;
   269d0:	2001      	movs	r0, #1
}
   269d2:	b008      	add	sp, #32
   269d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TC_CRYPTO_FAIL;
   269d8:	2000      	movs	r0, #0
}
   269da:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   269dc:	2000      	movs	r0, #0
   269de:	e7f8      	b.n	269d2 <tc_aes_encrypt+0x6ce>
		return TC_CRYPTO_FAIL;
   269e0:	2000      	movs	r0, #0
   269e2:	e7f6      	b.n	269d2 <tc_aes_encrypt+0x6ce>
   269e4:	0002bb30 	.word	0x0002bb30

000269e8 <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   269e8:	b430      	push	{r4, r5}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);
   269ea:	f101 020f 	add.w	r2, r1, #15

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   269ee:	f991 3000 	ldrsb.w	r3, [r1]
   269f2:	2b00      	cmp	r3, #0
   269f4:	db0d      	blt.n	26a12 <gf_double+0x2a>
   269f6:	2300      	movs	r3, #0

	out += (TC_AES_BLOCK_SIZE - 1);
   269f8:	300f      	adds	r0, #15
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   269fa:	7814      	ldrb	r4, [r2, #0]
   269fc:	1e45      	subs	r5, r0, #1
   269fe:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
   26a02:	7003      	strb	r3, [r0, #0]
		if (x == in) {
   26a04:	428a      	cmp	r2, r1
   26a06:	d006      	beq.n	26a16 <gf_double+0x2e>
			break;
		}
		carry = *x-- >> 7;
   26a08:	7813      	ldrb	r3, [r2, #0]
   26a0a:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   26a0c:	4628      	mov	r0, r5
		carry = *x-- >> 7;
   26a0e:	3a01      	subs	r2, #1
		*out-- = (*x << 1) ^ carry;
   26a10:	e7f3      	b.n	269fa <gf_double+0x12>
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   26a12:	2387      	movs	r3, #135	; 0x87
   26a14:	e7f0      	b.n	269f8 <gf_double+0x10>
	}
}
   26a16:	bc30      	pop	{r4, r5}
   26a18:	4770      	bx	lr

00026a1a <tc_cmac_erase>:
	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
	if (s == (TCCmacState_t) 0) {
   26a1a:	b130      	cbz	r0, 26a2a <tc_cmac_erase+0x10>
{
   26a1c:	b508      	push	{r3, lr}
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   26a1e:	2258      	movs	r2, #88	; 0x58
   26a20:	2100      	movs	r1, #0
   26a22:	f001 f945 	bl	27cb0 <_set>

	return TC_CRYPTO_SUCCESS;
   26a26:	2001      	movs	r0, #1
}
   26a28:	bd08      	pop	{r3, pc}
		return TC_CRYPTO_FAIL;
   26a2a:	2000      	movs	r0, #0
}
   26a2c:	4770      	bx	lr

00026a2e <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   26a2e:	b1a0      	cbz	r0, 26a5a <tc_cmac_init+0x2c>
{
   26a30:	b510      	push	{r4, lr}
   26a32:	4604      	mov	r4, r0
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   26a34:	2210      	movs	r2, #16
   26a36:	2100      	movs	r1, #0
   26a38:	f001 f93a 	bl	27cb0 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   26a3c:	2210      	movs	r2, #16
   26a3e:	2100      	movs	r1, #0
   26a40:	f104 0030 	add.w	r0, r4, #48	; 0x30
   26a44:	f001 f934 	bl	27cb0 <_set>
	s->leftover_offset = 0;
   26a48:	2300      	movs	r3, #0
   26a4a:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   26a4c:	2200      	movs	r2, #0
   26a4e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   26a52:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50

	return TC_CRYPTO_SUCCESS;
   26a56:	2001      	movs	r0, #1
}
   26a58:	bd10      	pop	{r4, pc}
		return TC_CRYPTO_FAIL;
   26a5a:	2000      	movs	r0, #0
}
   26a5c:	4770      	bx	lr

00026a5e <tc_cmac_setup>:
	if (s == (TCCmacState_t) 0 ||
   26a5e:	b338      	cbz	r0, 26ab0 <tc_cmac_setup+0x52>
{
   26a60:	b570      	push	{r4, r5, r6, lr}
   26a62:	4604      	mov	r4, r0
	if (s == (TCCmacState_t) 0 ||
   26a64:	b331      	cbz	r1, 26ab4 <tc_cmac_setup+0x56>
   26a66:	4616      	mov	r6, r2
   26a68:	460d      	mov	r5, r1
	_set(s, 0, sizeof(*s));
   26a6a:	2258      	movs	r2, #88	; 0x58
   26a6c:	2100      	movs	r1, #0
   26a6e:	f001 f91f 	bl	27cb0 <_set>
	s->sched = sched;
   26a72:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   26a74:	4629      	mov	r1, r5
   26a76:	4630      	mov	r0, r6
   26a78:	f7ff fbe6 	bl	26248 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   26a7c:	2210      	movs	r2, #16
   26a7e:	2100      	movs	r1, #0
   26a80:	4620      	mov	r0, r4
   26a82:	f001 f915 	bl	27cb0 <_set>
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   26a86:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   26a88:	4621      	mov	r1, r4
   26a8a:	4620      	mov	r0, r4
   26a8c:	f7ff fc3a 	bl	26304 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   26a90:	f104 0510 	add.w	r5, r4, #16
   26a94:	4621      	mov	r1, r4
   26a96:	4628      	mov	r0, r5
   26a98:	f7ff ffa6 	bl	269e8 <gf_double>
	gf_double (s->K2, s->K1);
   26a9c:	4629      	mov	r1, r5
   26a9e:	f104 0020 	add.w	r0, r4, #32
   26aa2:	f7ff ffa1 	bl	269e8 <gf_double>
	tc_cmac_init(s);
   26aa6:	4620      	mov	r0, r4
   26aa8:	f7ff ffc1 	bl	26a2e <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   26aac:	2001      	movs	r0, #1
}
   26aae:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   26ab0:	2000      	movs	r0, #0
}
   26ab2:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   26ab4:	2000      	movs	r0, #0
   26ab6:	e7fa      	b.n	26aae <tc_cmac_setup+0x50>

00026ab8 <tc_cmac_update>:
int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   26ab8:	2800      	cmp	r0, #0
   26aba:	d05f      	beq.n	26b7c <tc_cmac_update+0xc4>
{
   26abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26abe:	460d      	mov	r5, r1
   26ac0:	4616      	mov	r6, r2
   26ac2:	4604      	mov	r4, r0
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   26ac4:	2a00      	cmp	r2, #0
   26ac6:	d05b      	beq.n	26b80 <tc_cmac_update+0xc8>
		return  TC_CRYPTO_SUCCESS;
	}
	if (data == (const uint8_t *) 0) {
   26ac8:	2900      	cmp	r1, #0
   26aca:	d05b      	beq.n	26b84 <tc_cmac_update+0xcc>
		return TC_CRYPTO_FAIL;
	}

	if (s->countdown == 0) {
   26acc:	e9d0 0114 	ldrd	r0, r1, [r0, #80]	; 0x50
   26ad0:	ea50 0301 	orrs.w	r3, r0, r1
   26ad4:	d058      	beq.n	26b88 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	s->countdown--;
   26ad6:	f110 32ff 	adds.w	r2, r0, #4294967295	; 0xffffffff
   26ada:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
   26ade:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50

	if (s->leftover_offset > 0) {
   26ae2:	6c60      	ldr	r0, [r4, #68]	; 0x44
   26ae4:	2800      	cmp	r0, #0
   26ae6:	d038      	beq.n	26b5a <tc_cmac_update+0xa2>
		/* last data added to s didn't end on a TC_AES_BLOCK_SIZE byte boundary */
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   26ae8:	f1c0 0710 	rsb	r7, r0, #16

		if (data_length < remaining_space) {
   26aec:	42be      	cmp	r6, r7
   26aee:	d314      	bcc.n	26b1a <tc_cmac_update+0x62>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
			s->leftover_offset += data_length;
			return TC_CRYPTO_SUCCESS;
		}
		/* leftover block is now full; encrypt it first */
		_copy(&s->leftover[s->leftover_offset],
   26af0:	3030      	adds	r0, #48	; 0x30
   26af2:	463b      	mov	r3, r7
   26af4:	462a      	mov	r2, r5
   26af6:	4639      	mov	r1, r7
   26af8:	4420      	add	r0, r4
   26afa:	f001 f8cd 	bl	27c98 <_copy>
		      remaining_space,
		      data,
		      remaining_space);
		data_length -= remaining_space;
   26afe:	1bf6      	subs	r6, r6, r7
		data += remaining_space;
   26b00:	443d      	add	r5, r7
		s->leftover_offset = 0;
   26b02:	2300      	movs	r3, #0
   26b04:	6463      	str	r3, [r4, #68]	; 0x44

		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   26b06:	2b0f      	cmp	r3, #15
   26b08:	d813      	bhi.n	26b32 <tc_cmac_update+0x7a>
			s->iv[i] ^= s->leftover[i];
   26b0a:	18e2      	adds	r2, r4, r3
   26b0c:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
   26b10:	5ce1      	ldrb	r1, [r4, r3]
   26b12:	404a      	eors	r2, r1
   26b14:	54e2      	strb	r2, [r4, r3]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   26b16:	3301      	adds	r3, #1
   26b18:	e7f5      	b.n	26b06 <tc_cmac_update+0x4e>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   26b1a:	3030      	adds	r0, #48	; 0x30
   26b1c:	4633      	mov	r3, r6
   26b1e:	462a      	mov	r2, r5
   26b20:	4631      	mov	r1, r6
   26b22:	4420      	add	r0, r4
   26b24:	f001 f8b8 	bl	27c98 <_copy>
			s->leftover_offset += data_length;
   26b28:	6c63      	ldr	r3, [r4, #68]	; 0x44
   26b2a:	4433      	add	r3, r6
   26b2c:	6463      	str	r3, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   26b2e:	2001      	movs	r0, #1
   26b30:	e027      	b.n	26b82 <tc_cmac_update+0xca>
		}
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   26b32:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   26b34:	4621      	mov	r1, r4
   26b36:	4620      	mov	r0, r4
   26b38:	f7ff fbe4 	bl	26304 <tc_aes_encrypt>
   26b3c:	e00d      	b.n	26b5a <tc_cmac_update+0xa2>
	}

	/* CBC encrypt each (except the last) of the data blocks */
	while (data_length > TC_AES_BLOCK_SIZE) {
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
			s->iv[i] ^= data[i];
   26b3e:	5cea      	ldrb	r2, [r5, r3]
   26b40:	5ce1      	ldrb	r1, [r4, r3]
   26b42:	404a      	eors	r2, r1
   26b44:	54e2      	strb	r2, [r4, r3]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   26b46:	3301      	adds	r3, #1
   26b48:	2b0f      	cmp	r3, #15
   26b4a:	d9f8      	bls.n	26b3e <tc_cmac_update+0x86>
		}
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   26b4c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   26b4e:	4621      	mov	r1, r4
   26b50:	4620      	mov	r0, r4
   26b52:	f7ff fbd7 	bl	26304 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   26b56:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   26b58:	3e10      	subs	r6, #16
	while (data_length > TC_AES_BLOCK_SIZE) {
   26b5a:	2e10      	cmp	r6, #16
   26b5c:	d901      	bls.n	26b62 <tc_cmac_update+0xaa>
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   26b5e:	2300      	movs	r3, #0
   26b60:	e7f2      	b.n	26b48 <tc_cmac_update+0x90>
	}

	if (data_length > 0) {
   26b62:	b90e      	cbnz	r6, 26b68 <tc_cmac_update+0xb0>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   26b64:	2001      	movs	r0, #1
   26b66:	e00c      	b.n	26b82 <tc_cmac_update+0xca>
		_copy(s->leftover, data_length, data, data_length);
   26b68:	4633      	mov	r3, r6
   26b6a:	462a      	mov	r2, r5
   26b6c:	4631      	mov	r1, r6
   26b6e:	f104 0030 	add.w	r0, r4, #48	; 0x30
   26b72:	f001 f891 	bl	27c98 <_copy>
		s->leftover_offset = data_length;
   26b76:	6466      	str	r6, [r4, #68]	; 0x44
	return TC_CRYPTO_SUCCESS;
   26b78:	2001      	movs	r0, #1
   26b7a:	e002      	b.n	26b82 <tc_cmac_update+0xca>
		return TC_CRYPTO_FAIL;
   26b7c:	2000      	movs	r0, #0
}
   26b7e:	4770      	bx	lr
		return  TC_CRYPTO_SUCCESS;
   26b80:	2001      	movs	r0, #1
}
   26b82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   26b84:	2000      	movs	r0, #0
   26b86:	e7fc      	b.n	26b82 <tc_cmac_update+0xca>
		return TC_CRYPTO_FAIL;
   26b88:	2000      	movs	r0, #0
   26b8a:	e7fa      	b.n	26b82 <tc_cmac_update+0xca>

00026b8c <tc_cmac_final>:
{
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   26b8c:	b370      	cbz	r0, 26bec <tc_cmac_final+0x60>
{
   26b8e:	b570      	push	{r4, r5, r6, lr}
   26b90:	4606      	mov	r6, r0
	if (tag == (uint8_t *) 0 ||
   26b92:	b369      	cbz	r1, 26bf0 <tc_cmac_final+0x64>
   26b94:	460d      	mov	r5, r1
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   26b96:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   26b98:	2a10      	cmp	r2, #16
   26b9a:	d102      	bne.n	26ba2 <tc_cmac_final+0x16>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   26b9c:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   26b9e:	2300      	movs	r3, #0
   26ba0:	e018      	b.n	26bd4 <tc_cmac_final+0x48>
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   26ba2:	f102 0030 	add.w	r0, r2, #48	; 0x30
   26ba6:	f1c2 0210 	rsb	r2, r2, #16
   26baa:	2100      	movs	r1, #0
   26bac:	4428      	add	r0, r5
   26bae:	f001 f87f 	bl	27cb0 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   26bb2:	6c6b      	ldr	r3, [r5, #68]	; 0x44
   26bb4:	442b      	add	r3, r5
   26bb6:	2280      	movs	r2, #128	; 0x80
   26bb8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   26bbc:	f105 0120 	add.w	r1, r5, #32
   26bc0:	e7ed      	b.n	26b9e <tc_cmac_final+0x12>
		s->iv[i] ^= s->leftover[i] ^ k[i];
   26bc2:	18ea      	adds	r2, r5, r3
   26bc4:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
   26bc8:	5ccc      	ldrb	r4, [r1, r3]
   26bca:	4054      	eors	r4, r2
   26bcc:	5cea      	ldrb	r2, [r5, r3]
   26bce:	4062      	eors	r2, r4
   26bd0:	54ea      	strb	r2, [r5, r3]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   26bd2:	3301      	adds	r3, #1
   26bd4:	2b0f      	cmp	r3, #15
   26bd6:	d9f4      	bls.n	26bc2 <tc_cmac_final+0x36>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   26bd8:	6caa      	ldr	r2, [r5, #72]	; 0x48
   26bda:	4629      	mov	r1, r5
   26bdc:	4630      	mov	r0, r6
   26bde:	f7ff fb91 	bl	26304 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   26be2:	4628      	mov	r0, r5
   26be4:	f7ff ff19 	bl	26a1a <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   26be8:	2001      	movs	r0, #1
}
   26bea:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   26bec:	2000      	movs	r0, #0
}
   26bee:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   26bf0:	2000      	movs	r0, #0
   26bf2:	e7fa      	b.n	26bea <tc_cmac_final+0x5e>

00026bf4 <vli_numDigits>:
{

	wordcount_t i;
	/* Search from the end until we find a non-zero digit. We do it in reverse
	 * because we expect that most digits will be nonzero. */
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   26bf4:	3901      	subs	r1, #1
   26bf6:	b249      	sxtb	r1, r1
   26bf8:	e001      	b.n	26bfe <vli_numDigits+0xa>
   26bfa:	3901      	subs	r1, #1
   26bfc:	b249      	sxtb	r1, r1
   26bfe:	2900      	cmp	r1, #0
   26c00:	db03      	blt.n	26c0a <vli_numDigits+0x16>
   26c02:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
   26c06:	2b00      	cmp	r3, #0
   26c08:	d0f7      	beq.n	26bfa <vli_numDigits+0x6>
	}

	return (i + 1);
   26c0a:	3101      	adds	r1, #1
}
   26c0c:	b248      	sxtb	r0, r1
   26c0e:	4770      	bx	lr

00026c10 <uECC_vli_rshift1>:
	return (!equal - 2 * neg);
}

/* Computes vli = vli >> 1. */
static void uECC_vli_rshift1(uECC_word_t *vli, wordcount_t num_words)
{
   26c10:	b410      	push	{r4}
	uECC_word_t *end = vli;
	uECC_word_t carry = 0;

	vli += num_words;
   26c12:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	uECC_word_t carry = 0;
   26c16:	2300      	movs	r3, #0
	while (vli-- > end) {
   26c18:	e007      	b.n	26c2a <uECC_vli_rshift1+0x1a>
		uECC_word_t temp = *vli;
   26c1a:	f851 2c04 	ldr.w	r2, [r1, #-4]
		*vli = (temp >> 1) | carry;
   26c1e:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
   26c22:	f841 3c04 	str.w	r3, [r1, #-4]
		carry = temp << (uECC_WORD_BITS - 1);
   26c26:	07d3      	lsls	r3, r2, #31
	while (vli-- > end) {
   26c28:	4621      	mov	r1, r4
   26c2a:	1f0c      	subs	r4, r1, #4
   26c2c:	4281      	cmp	r1, r0
   26c2e:	d8f4      	bhi.n	26c1a <uECC_vli_rshift1+0xa>
	}
}
   26c30:	bc10      	pop	{r4}
   26c32:	4770      	bx	lr

00026c34 <muladd>:

static void muladd(uECC_word_t a, uECC_word_t b, uECC_word_t *r0,
		   uECC_word_t *r1, uECC_word_t *r2)
{
   26c34:	e92d 08f0 	stmdb	sp!, {r4, r5, r6, r7, fp}
   26c38:	9f05      	ldr	r7, [sp, #20]

	uECC_dword_t p = (uECC_dword_t)a * b;
   26c3a:	fba0 0101 	umull	r0, r1, r0, r1
	uECC_dword_t r01 = ((uECC_dword_t)(*r1) << uECC_WORD_BITS) | *r0;
   26c3e:	f04f 0b00 	mov.w	fp, #0
   26c42:	f8d3 c000 	ldr.w	ip, [r3]
   26c46:	6816      	ldr	r6, [r2, #0]
   26c48:	ea4b 0406 	orr.w	r4, fp, r6
	r01 += p;
   26c4c:	eb14 0b00 	adds.w	fp, r4, r0
   26c50:	eb4c 0c01 	adc.w	ip, ip, r1
	*r2 += (r01 < p);
   26c54:	458c      	cmp	ip, r1
   26c56:	bf08      	it	eq
   26c58:	4583      	cmpeq	fp, r0
   26c5a:	bf34      	ite	cc
   26c5c:	2001      	movcc	r0, #1
   26c5e:	2000      	movcs	r0, #0
   26c60:	6839      	ldr	r1, [r7, #0]
   26c62:	4401      	add	r1, r0
   26c64:	6039      	str	r1, [r7, #0]
	*r1 = r01 >> uECC_WORD_BITS;
   26c66:	f8c3 c000 	str.w	ip, [r3]
	*r0 = (uECC_word_t)r01;
   26c6a:	f8c2 b000 	str.w	fp, [r2]

}
   26c6e:	e8bd 08f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp}
   26c72:	4770      	bx	lr

00026c74 <uECC_vli_mult>:

/* Computes result = left * right. Result must be 2 * num_words long. */
static void uECC_vli_mult(uECC_word_t *result, const uECC_word_t *left,
			  const uECC_word_t *right, wordcount_t num_words)
{
   26c74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26c78:	b087      	sub	sp, #28
   26c7a:	4682      	mov	sl, r0
   26c7c:	460e      	mov	r6, r1
   26c7e:	4617      	mov	r7, r2
   26c80:	461d      	mov	r5, r3

	uECC_word_t r0 = 0;
   26c82:	2300      	movs	r3, #0
   26c84:	9305      	str	r3, [sp, #20]
	uECC_word_t r1 = 0;
   26c86:	9304      	str	r3, [sp, #16]
	uECC_word_t r2 = 0;
   26c88:	9303      	str	r3, [sp, #12]
	wordcount_t i, k;

	/* Compute each digit of result in sequence, maintaining the carries. */
	for (k = 0; k < num_words; ++k) {
   26c8a:	4698      	mov	r8, r3
   26c8c:	e01c      	b.n	26cc8 <uECC_vli_mult+0x54>

		for (i = 0; i <= k; ++i) {
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   26c8e:	eba8 0304 	sub.w	r3, r8, r4
   26c92:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
   26c96:	ab03      	add	r3, sp, #12
   26c98:	9300      	str	r3, [sp, #0]
   26c9a:	ab04      	add	r3, sp, #16
   26c9c:	aa05      	add	r2, sp, #20
   26c9e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
   26ca2:	f7ff ffc7 	bl	26c34 <muladd>
		for (i = 0; i <= k; ++i) {
   26ca6:	3401      	adds	r4, #1
   26ca8:	b264      	sxtb	r4, r4
   26caa:	4544      	cmp	r4, r8
   26cac:	ddef      	ble.n	26c8e <uECC_vli_mult+0x1a>
		}

		result[k] = r0;
   26cae:	9b05      	ldr	r3, [sp, #20]
   26cb0:	f84a 3028 	str.w	r3, [sl, r8, lsl #2]
		r0 = r1;
   26cb4:	9b04      	ldr	r3, [sp, #16]
   26cb6:	9305      	str	r3, [sp, #20]
		r1 = r2;
   26cb8:	9b03      	ldr	r3, [sp, #12]
   26cba:	9304      	str	r3, [sp, #16]
		r2 = 0;
   26cbc:	2300      	movs	r3, #0
   26cbe:	9303      	str	r3, [sp, #12]
	for (k = 0; k < num_words; ++k) {
   26cc0:	f108 0801 	add.w	r8, r8, #1
   26cc4:	fa4f f888 	sxtb.w	r8, r8
   26cc8:	45a8      	cmp	r8, r5
   26cca:	da01      	bge.n	26cd0 <uECC_vli_mult+0x5c>
		for (i = 0; i <= k; ++i) {
   26ccc:	2400      	movs	r4, #0
   26cce:	e7ec      	b.n	26caa <uECC_vli_mult+0x36>
	}

	for (k = num_words; k < num_words * 2 - 1; ++k) {
   26cd0:	46a9      	mov	r9, r5
   26cd2:	e01c      	b.n	26d0e <uECC_vli_mult+0x9a>

		for (i = (k + 1) - num_words; i < num_words; ++i) {
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   26cd4:	eba8 0304 	sub.w	r3, r8, r4
   26cd8:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
   26cdc:	ab03      	add	r3, sp, #12
   26cde:	9300      	str	r3, [sp, #0]
   26ce0:	ab04      	add	r3, sp, #16
   26ce2:	aa05      	add	r2, sp, #20
   26ce4:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
   26ce8:	f7ff ffa4 	bl	26c34 <muladd>
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   26cec:	3401      	adds	r4, #1
   26cee:	b264      	sxtb	r4, r4
   26cf0:	42ac      	cmp	r4, r5
   26cf2:	dbef      	blt.n	26cd4 <uECC_vli_mult+0x60>
		}
		result[k] = r0;
   26cf4:	9b05      	ldr	r3, [sp, #20]
   26cf6:	f84a 3029 	str.w	r3, [sl, r9, lsl #2]
		r0 = r1;
   26cfa:	9b04      	ldr	r3, [sp, #16]
   26cfc:	9305      	str	r3, [sp, #20]
		r1 = r2;
   26cfe:	9b03      	ldr	r3, [sp, #12]
   26d00:	9304      	str	r3, [sp, #16]
		r2 = 0;
   26d02:	2300      	movs	r3, #0
   26d04:	9303      	str	r3, [sp, #12]
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   26d06:	f10b 0901 	add.w	r9, fp, #1
   26d0a:	fa4f f989 	sxtb.w	r9, r9
   26d0e:	46c8      	mov	r8, r9
   26d10:	006b      	lsls	r3, r5, #1
   26d12:	3b01      	subs	r3, #1
   26d14:	4599      	cmp	r9, r3
   26d16:	da06      	bge.n	26d26 <uECC_vli_mult+0xb2>
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   26d18:	fa5f fb89 	uxtb.w	fp, r9
   26d1c:	ebab 0405 	sub.w	r4, fp, r5
   26d20:	3401      	adds	r4, #1
   26d22:	b264      	sxtb	r4, r4
   26d24:	e7e4      	b.n	26cf0 <uECC_vli_mult+0x7c>
	}
	result[num_words * 2 - 1] = r0;
   26d26:	00ea      	lsls	r2, r5, #3
   26d28:	3a04      	subs	r2, #4
   26d2a:	9b05      	ldr	r3, [sp, #20]
   26d2c:	f84a 3002 	str.w	r3, [sl, r2]
}
   26d30:	b007      	add	sp, #28
   26d32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

00026d38 <uECC_set_rng>:
	g_rng_function = rng_function;
   26d38:	4b01      	ldr	r3, [pc, #4]	; (26d40 <uECC_set_rng+0x8>)
   26d3a:	6018      	str	r0, [r3, #0]
}
   26d3c:	4770      	bx	lr
   26d3e:	bf00      	nop
   26d40:	20003a28 	.word	0x20003a28

00026d44 <uECC_get_rng>:
}
   26d44:	4b01      	ldr	r3, [pc, #4]	; (26d4c <uECC_get_rng+0x8>)
   26d46:	6818      	ldr	r0, [r3, #0]
   26d48:	4770      	bx	lr
   26d4a:	bf00      	nop
   26d4c:	20003a28 	.word	0x20003a28

00026d50 <uECC_vli_clear>:
	for (i = 0; i < num_words; ++i) {
   26d50:	2300      	movs	r3, #0
   26d52:	e004      	b.n	26d5e <uECC_vli_clear+0xe>
		 vli[i] = 0;
   26d54:	2200      	movs	r2, #0
   26d56:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   26d5a:	3301      	adds	r3, #1
   26d5c:	b25b      	sxtb	r3, r3
   26d5e:	428b      	cmp	r3, r1
   26d60:	dbf8      	blt.n	26d54 <uECC_vli_clear+0x4>
}
   26d62:	4770      	bx	lr

00026d64 <uECC_vli_isZero>:
	for (i = 0; i < num_words; ++i) {
   26d64:	2300      	movs	r3, #0
	uECC_word_t bits = 0;
   26d66:	461a      	mov	r2, r3
	for (i = 0; i < num_words; ++i) {
   26d68:	428b      	cmp	r3, r1
   26d6a:	da0c      	bge.n	26d86 <uECC_vli_isZero+0x22>
{
   26d6c:	b410      	push	{r4}
		bits |= vli[i];
   26d6e:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   26d72:	4322      	orrs	r2, r4
	for (i = 0; i < num_words; ++i) {
   26d74:	3301      	adds	r3, #1
   26d76:	b25b      	sxtb	r3, r3
   26d78:	428b      	cmp	r3, r1
   26d7a:	dbf8      	blt.n	26d6e <uECC_vli_isZero+0xa>
}
   26d7c:	fab2 f082 	clz	r0, r2
   26d80:	0940      	lsrs	r0, r0, #5
   26d82:	bc10      	pop	{r4}
   26d84:	4770      	bx	lr
   26d86:	fab3 f083 	clz	r0, r3
   26d8a:	0940      	lsrs	r0, r0, #5
   26d8c:	4770      	bx	lr

00026d8e <uECC_vli_testBit>:
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   26d8e:	114b      	asrs	r3, r1, #5
   26d90:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   26d94:	f001 011f 	and.w	r1, r1, #31
   26d98:	2301      	movs	r3, #1
   26d9a:	fa03 f101 	lsl.w	r1, r3, r1
}
   26d9e:	4008      	ands	r0, r1
   26da0:	4770      	bx	lr

00026da2 <uECC_vli_numBits>:
{
   26da2:	b510      	push	{r4, lr}
   26da4:	4604      	mov	r4, r0
	wordcount_t num_digits = vli_numDigits(vli, max_words);
   26da6:	f7ff ff25 	bl	26bf4 <vli_numDigits>
	if (num_digits == 0) {
   26daa:	b190      	cbz	r0, 26dd2 <uECC_vli_numBits+0x30>
   26dac:	4602      	mov	r2, r0
	digit = vli[num_digits - 1];
   26dae:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   26db2:	3b01      	subs	r3, #1
   26db4:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
	for (i = 0; digit; ++i) {
   26db8:	2100      	movs	r1, #0
   26dba:	e001      	b.n	26dc0 <uECC_vli_numBits+0x1e>
		digit >>= 1;
   26dbc:	085b      	lsrs	r3, r3, #1
	for (i = 0; digit; ++i) {
   26dbe:	3101      	adds	r1, #1
   26dc0:	2b00      	cmp	r3, #0
   26dc2:	d1fb      	bne.n	26dbc <uECC_vli_numBits+0x1a>
	return (((bitcount_t)(num_digits - 1) << uECC_WORD_BITS_SHIFT) + i);
   26dc4:	1e50      	subs	r0, r2, #1
   26dc6:	b280      	uxth	r0, r0
   26dc8:	0140      	lsls	r0, r0, #5
   26dca:	b280      	uxth	r0, r0
   26dcc:	4408      	add	r0, r1
   26dce:	b200      	sxth	r0, r0
}
   26dd0:	bd10      	pop	{r4, pc}
		return 0;
   26dd2:	2000      	movs	r0, #0
   26dd4:	e7fc      	b.n	26dd0 <uECC_vli_numBits+0x2e>

00026dd6 <uECC_vli_set>:
	for (i = 0; i < num_words; ++i) {
   26dd6:	2300      	movs	r3, #0
   26dd8:	4293      	cmp	r3, r2
   26dda:	da0a      	bge.n	26df2 <uECC_vli_set+0x1c>
{
   26ddc:	b410      	push	{r4}
		dest[i] = src[i];
   26dde:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
   26de2:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   26de6:	3301      	adds	r3, #1
   26de8:	b25b      	sxtb	r3, r3
   26dea:	4293      	cmp	r3, r2
   26dec:	dbf7      	blt.n	26dde <uECC_vli_set+0x8>
}
   26dee:	bc10      	pop	{r4}
   26df0:	4770      	bx	lr
   26df2:	4770      	bx	lr

00026df4 <uECC_vli_cmp_unsafe>:
	for (i = num_words - 1; i >= 0; --i) {
   26df4:	3a01      	subs	r2, #1
   26df6:	b252      	sxtb	r2, r2
   26df8:	2a00      	cmp	r2, #0
   26dfa:	db13      	blt.n	26e24 <uECC_vli_cmp_unsafe+0x30>
{
   26dfc:	b410      	push	{r4}
		if (left[i] > right[i]) {
   26dfe:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
   26e02:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
   26e06:	429c      	cmp	r4, r3
   26e08:	d807      	bhi.n	26e1a <uECC_vli_cmp_unsafe+0x26>
		} else if (left[i] < right[i]) {
   26e0a:	d308      	bcc.n	26e1e <uECC_vli_cmp_unsafe+0x2a>
	for (i = num_words - 1; i >= 0; --i) {
   26e0c:	3a01      	subs	r2, #1
   26e0e:	b252      	sxtb	r2, r2
   26e10:	2a00      	cmp	r2, #0
   26e12:	daf4      	bge.n	26dfe <uECC_vli_cmp_unsafe+0xa>
	return 0;
   26e14:	2000      	movs	r0, #0
}
   26e16:	bc10      	pop	{r4}
   26e18:	4770      	bx	lr
			return 1;
   26e1a:	2001      	movs	r0, #1
   26e1c:	e7fb      	b.n	26e16 <uECC_vli_cmp_unsafe+0x22>
			return -1;
   26e1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   26e22:	e7f8      	b.n	26e16 <uECC_vli_cmp_unsafe+0x22>
	return 0;
   26e24:	2000      	movs	r0, #0
}
   26e26:	4770      	bx	lr

00026e28 <uECC_vli_equal>:
{
   26e28:	b430      	push	{r4, r5}
	for (i = num_words - 1; i >= 0; --i) {
   26e2a:	3a01      	subs	r2, #1
   26e2c:	b252      	sxtb	r2, r2
	uECC_word_t diff = 0;
   26e2e:	2400      	movs	r4, #0
	for (i = num_words - 1; i >= 0; --i) {
   26e30:	e007      	b.n	26e42 <uECC_vli_equal+0x1a>
		diff |= (left[i] ^ right[i]);
   26e32:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
   26e36:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
   26e3a:	406b      	eors	r3, r5
   26e3c:	431c      	orrs	r4, r3
	for (i = num_words - 1; i >= 0; --i) {
   26e3e:	3a01      	subs	r2, #1
   26e40:	b252      	sxtb	r2, r2
   26e42:	2a00      	cmp	r2, #0
   26e44:	daf5      	bge.n	26e32 <uECC_vli_equal+0xa>
}
   26e46:	1c20      	adds	r0, r4, #0
   26e48:	bf18      	it	ne
   26e4a:	2001      	movne	r0, #1
   26e4c:	bc30      	pop	{r4, r5}
   26e4e:	4770      	bx	lr

00026e50 <cond_set>:
	return (p_true*(cond)) | (p_false*(!cond));
   26e50:	fb02 f000 	mul.w	r0, r2, r0
   26e54:	2a00      	cmp	r2, #0
   26e56:	bf0c      	ite	eq
   26e58:	460a      	moveq	r2, r1
   26e5a:	2200      	movne	r2, #0
}
   26e5c:	4310      	orrs	r0, r2
   26e5e:	4770      	bx	lr

00026e60 <uECC_vli_add>:
{
   26e60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   26e64:	4681      	mov	r9, r0
   26e66:	4688      	mov	r8, r1
   26e68:	4617      	mov	r7, r2
   26e6a:	461e      	mov	r6, r3
	for (i = 0; i < num_words; ++i) {
   26e6c:	2400      	movs	r4, #0
	uECC_word_t carry = 0;
   26e6e:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   26e70:	e013      	b.n	26e9a <uECC_vli_add+0x3a>
		uECC_word_t sum = left[i] + right[i] + carry;
   26e72:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
   26e76:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
   26e7a:	441d      	add	r5, r3
   26e7c:	4405      	add	r5, r0
		uECC_word_t val = (sum < left[i]);
   26e7e:	42ab      	cmp	r3, r5
		carry = cond_set(val, carry, (sum != left[i]));
   26e80:	bf14      	ite	ne
   26e82:	2201      	movne	r2, #1
   26e84:	2200      	moveq	r2, #0
   26e86:	4601      	mov	r1, r0
   26e88:	bf8c      	ite	hi
   26e8a:	2001      	movhi	r0, #1
   26e8c:	2000      	movls	r0, #0
   26e8e:	f7ff ffdf 	bl	26e50 <cond_set>
		result[i] = sum;
   26e92:	f849 5024 	str.w	r5, [r9, r4, lsl #2]
	for (i = 0; i < num_words; ++i) {
   26e96:	3401      	adds	r4, #1
   26e98:	b264      	sxtb	r4, r4
   26e9a:	42b4      	cmp	r4, r6
   26e9c:	dbe9      	blt.n	26e72 <uECC_vli_add+0x12>
}
   26e9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00026ea2 <vli_modInv_update>:
#define EVEN(vli) (!(vli[0] & 1))

static void vli_modInv_update(uECC_word_t *uv,
			      const uECC_word_t *mod,
			      wordcount_t num_words)
{
   26ea2:	b570      	push	{r4, r5, r6, lr}
   26ea4:	4606      	mov	r6, r0
   26ea6:	4614      	mov	r4, r2

	uECC_word_t carry = 0;

	if (!EVEN(uv)) {
   26ea8:	6800      	ldr	r0, [r0, #0]
   26eaa:	f010 0501 	ands.w	r5, r0, #1
   26eae:	d10e      	bne.n	26ece <vli_modInv_update+0x2c>
		carry = uECC_vli_add(uv, uv, mod, num_words);
	}
	uECC_vli_rshift1(uv, num_words);
   26eb0:	4621      	mov	r1, r4
   26eb2:	4630      	mov	r0, r6
   26eb4:	f7ff feac 	bl	26c10 <uECC_vli_rshift1>
	if (carry) {
   26eb8:	b145      	cbz	r5, 26ecc <vli_modInv_update+0x2a>
		uv[num_words - 1] |= HIGH_BIT_SET;
   26eba:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   26ebe:	3c01      	subs	r4, #1
   26ec0:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
   26ec4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   26ec8:	f846 3024 	str.w	r3, [r6, r4, lsl #2]
	}
}
   26ecc:	bd70      	pop	{r4, r5, r6, pc}
		carry = uECC_vli_add(uv, uv, mod, num_words);
   26ece:	4613      	mov	r3, r2
   26ed0:	460a      	mov	r2, r1
   26ed2:	4631      	mov	r1, r6
   26ed4:	4630      	mov	r0, r6
   26ed6:	f7ff ffc3 	bl	26e60 <uECC_vli_add>
   26eda:	4605      	mov	r5, r0
   26edc:	e7e8      	b.n	26eb0 <vli_modInv_update+0xe>

00026ede <uECC_vli_sub>:
{
   26ede:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   26ee2:	4681      	mov	r9, r0
   26ee4:	4688      	mov	r8, r1
   26ee6:	4617      	mov	r7, r2
   26ee8:	461e      	mov	r6, r3
	for (i = 0; i < num_words; ++i) {
   26eea:	2400      	movs	r4, #0
	uECC_word_t borrow = 0;
   26eec:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   26eee:	e013      	b.n	26f18 <uECC_vli_sub+0x3a>
		uECC_word_t diff = left[i] - right[i] - borrow;
   26ef0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
   26ef4:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
   26ef8:	1b5d      	subs	r5, r3, r5
   26efa:	1a2d      	subs	r5, r5, r0
		uECC_word_t val = (diff > left[i]);
   26efc:	42ab      	cmp	r3, r5
		borrow = cond_set(val, borrow, (diff != left[i]));
   26efe:	bf14      	ite	ne
   26f00:	2201      	movne	r2, #1
   26f02:	2200      	moveq	r2, #0
   26f04:	4601      	mov	r1, r0
   26f06:	bf34      	ite	cc
   26f08:	2001      	movcc	r0, #1
   26f0a:	2000      	movcs	r0, #0
   26f0c:	f7ff ffa0 	bl	26e50 <cond_set>
		result[i] = diff;
   26f10:	f849 5024 	str.w	r5, [r9, r4, lsl #2]
	for (i = 0; i < num_words; ++i) {
   26f14:	3401      	adds	r4, #1
   26f16:	b264      	sxtb	r4, r4
   26f18:	42b4      	cmp	r4, r6
   26f1a:	dbe9      	blt.n	26ef0 <uECC_vli_sub+0x12>
}
   26f1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00026f20 <vli_mmod_fast_secp256r1>:
{
	return &curve_secp256r1;
}

void vli_mmod_fast_secp256r1(unsigned int *result, unsigned int*product)
{
   26f20:	b5f0      	push	{r4, r5, r6, r7, lr}
   26f22:	b089      	sub	sp, #36	; 0x24
   26f24:	4606      	mov	r6, r0
   26f26:	460c      	mov	r4, r1
	unsigned int tmp[NUM_ECC_WORDS];
	int carry;

	/* t */
	uECC_vli_set(result, product, NUM_ECC_WORDS);
   26f28:	2208      	movs	r2, #8
   26f2a:	f7ff ff54 	bl	26dd6 <uECC_vli_set>

	/* s1 */
	tmp[0] = tmp[1] = tmp[2] = 0;
   26f2e:	2700      	movs	r7, #0
   26f30:	9702      	str	r7, [sp, #8]
   26f32:	9701      	str	r7, [sp, #4]
   26f34:	9700      	str	r7, [sp, #0]
	tmp[3] = product[11];
   26f36:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   26f38:	9303      	str	r3, [sp, #12]
	tmp[4] = product[12];
   26f3a:	6b23      	ldr	r3, [r4, #48]	; 0x30
   26f3c:	9304      	str	r3, [sp, #16]
	tmp[5] = product[13];
   26f3e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   26f40:	9305      	str	r3, [sp, #20]
	tmp[6] = product[14];
   26f42:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   26f44:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
   26f46:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   26f48:	9307      	str	r3, [sp, #28]
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   26f4a:	2308      	movs	r3, #8
   26f4c:	466a      	mov	r2, sp
   26f4e:	4669      	mov	r1, sp
   26f50:	4668      	mov	r0, sp
   26f52:	f7ff ff85 	bl	26e60 <uECC_vli_add>
   26f56:	4605      	mov	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   26f58:	2308      	movs	r3, #8
   26f5a:	466a      	mov	r2, sp
   26f5c:	4631      	mov	r1, r6
   26f5e:	4630      	mov	r0, r6
   26f60:	f7ff ff7e 	bl	26e60 <uECC_vli_add>
   26f64:	4405      	add	r5, r0

	/* s2 */
	tmp[3] = product[12];
   26f66:	6b23      	ldr	r3, [r4, #48]	; 0x30
   26f68:	9303      	str	r3, [sp, #12]
	tmp[4] = product[13];
   26f6a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   26f6c:	9304      	str	r3, [sp, #16]
	tmp[5] = product[14];
   26f6e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   26f70:	9305      	str	r3, [sp, #20]
	tmp[6] = product[15];
   26f72:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   26f74:	9306      	str	r3, [sp, #24]
	tmp[7] = 0;
   26f76:	9707      	str	r7, [sp, #28]
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
   26f78:	2308      	movs	r3, #8
   26f7a:	466a      	mov	r2, sp
   26f7c:	4669      	mov	r1, sp
   26f7e:	4668      	mov	r0, sp
   26f80:	f7ff ff6e 	bl	26e60 <uECC_vli_add>
   26f84:	4405      	add	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   26f86:	2308      	movs	r3, #8
   26f88:	466a      	mov	r2, sp
   26f8a:	4631      	mov	r1, r6
   26f8c:	4630      	mov	r0, r6
   26f8e:	f7ff ff67 	bl	26e60 <uECC_vli_add>
   26f92:	4405      	add	r5, r0

	/* s3 */
	tmp[0] = product[8];
   26f94:	6a23      	ldr	r3, [r4, #32]
   26f96:	9300      	str	r3, [sp, #0]
	tmp[1] = product[9];
   26f98:	6a63      	ldr	r3, [r4, #36]	; 0x24
   26f9a:	9301      	str	r3, [sp, #4]
	tmp[2] = product[10];
   26f9c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   26f9e:	9302      	str	r3, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
   26fa0:	9705      	str	r7, [sp, #20]
   26fa2:	9704      	str	r7, [sp, #16]
   26fa4:	9703      	str	r7, [sp, #12]
	tmp[6] = product[14];
   26fa6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   26fa8:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
   26faa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   26fac:	9307      	str	r3, [sp, #28]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   26fae:	2308      	movs	r3, #8
   26fb0:	466a      	mov	r2, sp
   26fb2:	4631      	mov	r1, r6
   26fb4:	4630      	mov	r0, r6
   26fb6:	f7ff ff53 	bl	26e60 <uECC_vli_add>
   26fba:	4405      	add	r5, r0

	/* s4 */
	tmp[0] = product[9];
   26fbc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   26fbe:	9300      	str	r3, [sp, #0]
	tmp[1] = product[10];
   26fc0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   26fc2:	9301      	str	r3, [sp, #4]
	tmp[2] = product[11];
   26fc4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   26fc6:	9302      	str	r3, [sp, #8]
	tmp[3] = product[13];
   26fc8:	6b63      	ldr	r3, [r4, #52]	; 0x34
   26fca:	9303      	str	r3, [sp, #12]
	tmp[4] = product[14];
   26fcc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   26fce:	9204      	str	r2, [sp, #16]
	tmp[5] = product[15];
   26fd0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   26fd2:	9205      	str	r2, [sp, #20]
	tmp[6] = product[13];
   26fd4:	9306      	str	r3, [sp, #24]
	tmp[7] = product[8];
   26fd6:	6a23      	ldr	r3, [r4, #32]
   26fd8:	9307      	str	r3, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
   26fda:	2308      	movs	r3, #8
   26fdc:	466a      	mov	r2, sp
   26fde:	4631      	mov	r1, r6
   26fe0:	4630      	mov	r0, r6
   26fe2:	f7ff ff3d 	bl	26e60 <uECC_vli_add>
   26fe6:	4405      	add	r5, r0

	/* d1 */
	tmp[0] = product[11];
   26fe8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   26fea:	9300      	str	r3, [sp, #0]
	tmp[1] = product[12];
   26fec:	6b23      	ldr	r3, [r4, #48]	; 0x30
   26fee:	9301      	str	r3, [sp, #4]
	tmp[2] = product[13];
   26ff0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   26ff2:	9302      	str	r3, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
   26ff4:	9705      	str	r7, [sp, #20]
   26ff6:	9704      	str	r7, [sp, #16]
   26ff8:	9703      	str	r7, [sp, #12]
	tmp[6] = product[8];
   26ffa:	6a23      	ldr	r3, [r4, #32]
   26ffc:	9306      	str	r3, [sp, #24]
	tmp[7] = product[10];
   26ffe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   27000:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   27002:	2308      	movs	r3, #8
   27004:	466a      	mov	r2, sp
   27006:	4631      	mov	r1, r6
   27008:	4630      	mov	r0, r6
   2700a:	f7ff ff68 	bl	26ede <uECC_vli_sub>
   2700e:	1a2d      	subs	r5, r5, r0

	/* d2 */
	tmp[0] = product[12];
   27010:	6b23      	ldr	r3, [r4, #48]	; 0x30
   27012:	9300      	str	r3, [sp, #0]
	tmp[1] = product[13];
   27014:	6b63      	ldr	r3, [r4, #52]	; 0x34
   27016:	9301      	str	r3, [sp, #4]
	tmp[2] = product[14];
   27018:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   2701a:	9302      	str	r3, [sp, #8]
	tmp[3] = product[15];
   2701c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   2701e:	9303      	str	r3, [sp, #12]
	tmp[4] = tmp[5] = 0;
   27020:	9705      	str	r7, [sp, #20]
   27022:	9704      	str	r7, [sp, #16]
	tmp[6] = product[9];
   27024:	6a63      	ldr	r3, [r4, #36]	; 0x24
   27026:	9306      	str	r3, [sp, #24]
	tmp[7] = product[11];
   27028:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2702a:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   2702c:	2308      	movs	r3, #8
   2702e:	466a      	mov	r2, sp
   27030:	4631      	mov	r1, r6
   27032:	4630      	mov	r0, r6
   27034:	f7ff ff53 	bl	26ede <uECC_vli_sub>
   27038:	1a2d      	subs	r5, r5, r0

	/* d3 */
	tmp[0] = product[13];
   2703a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2703c:	9300      	str	r3, [sp, #0]
	tmp[1] = product[14];
   2703e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   27040:	9301      	str	r3, [sp, #4]
	tmp[2] = product[15];
   27042:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   27044:	9302      	str	r3, [sp, #8]
	tmp[3] = product[8];
   27046:	6a23      	ldr	r3, [r4, #32]
   27048:	9303      	str	r3, [sp, #12]
	tmp[4] = product[9];
   2704a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2704c:	9304      	str	r3, [sp, #16]
	tmp[5] = product[10];
   2704e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   27050:	9305      	str	r3, [sp, #20]
	tmp[6] = 0;
   27052:	9706      	str	r7, [sp, #24]
	tmp[7] = product[12];
   27054:	6b23      	ldr	r3, [r4, #48]	; 0x30
   27056:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   27058:	2308      	movs	r3, #8
   2705a:	466a      	mov	r2, sp
   2705c:	4631      	mov	r1, r6
   2705e:	4630      	mov	r0, r6
   27060:	f7ff ff3d 	bl	26ede <uECC_vli_sub>
   27064:	1a2d      	subs	r5, r5, r0

	/* d4 */
	tmp[0] = product[14];
   27066:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   27068:	9300      	str	r3, [sp, #0]
	tmp[1] = product[15];
   2706a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   2706c:	9301      	str	r3, [sp, #4]
	tmp[2] = 0;
   2706e:	9702      	str	r7, [sp, #8]
	tmp[3] = product[9];
   27070:	6a63      	ldr	r3, [r4, #36]	; 0x24
   27072:	9303      	str	r3, [sp, #12]
	tmp[4] = product[10];
   27074:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   27076:	9304      	str	r3, [sp, #16]
	tmp[5] = product[11];
   27078:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2707a:	9305      	str	r3, [sp, #20]
	tmp[6] = 0;
   2707c:	9706      	str	r7, [sp, #24]
	tmp[7] = product[13];
   2707e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   27080:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
   27082:	2308      	movs	r3, #8
   27084:	466a      	mov	r2, sp
   27086:	4631      	mov	r1, r6
   27088:	4630      	mov	r0, r6
   2708a:	f7ff ff28 	bl	26ede <uECC_vli_sub>

	if (carry < 0) {
   2708e:	1a2d      	subs	r5, r5, r0
   27090:	d50f      	bpl.n	270b2 <vli_mmod_fast_secp256r1+0x192>
		do {
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
   27092:	2308      	movs	r3, #8
   27094:	4a0c      	ldr	r2, [pc, #48]	; (270c8 <vli_mmod_fast_secp256r1+0x1a8>)
   27096:	4631      	mov	r1, r6
   27098:	4630      	mov	r0, r6
   2709a:	f7ff fee1 	bl	26e60 <uECC_vli_add>
		}
		while (carry < 0);
   2709e:	182d      	adds	r5, r5, r0
   270a0:	d4f7      	bmi.n	27092 <vli_mmod_fast_secp256r1+0x172>
   270a2:	e00f      	b.n	270c4 <vli_mmod_fast_secp256r1+0x1a4>
	} else  {
		while (carry || 
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
			carry -= uECC_vli_sub(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
   270a4:	2308      	movs	r3, #8
   270a6:	4a08      	ldr	r2, [pc, #32]	; (270c8 <vli_mmod_fast_secp256r1+0x1a8>)
   270a8:	4631      	mov	r1, r6
   270aa:	4630      	mov	r0, r6
   270ac:	f7ff ff17 	bl	26ede <uECC_vli_sub>
   270b0:	1a2d      	subs	r5, r5, r0
		while (carry || 
   270b2:	2d00      	cmp	r5, #0
   270b4:	d1f6      	bne.n	270a4 <vli_mmod_fast_secp256r1+0x184>
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
   270b6:	2208      	movs	r2, #8
   270b8:	4631      	mov	r1, r6
   270ba:	4803      	ldr	r0, [pc, #12]	; (270c8 <vli_mmod_fast_secp256r1+0x1a8>)
   270bc:	f7ff fe9a 	bl	26df4 <uECC_vli_cmp_unsafe>
		while (carry || 
   270c0:	2801      	cmp	r0, #1
   270c2:	d1ef      	bne.n	270a4 <vli_mmod_fast_secp256r1+0x184>
		}
	}
}
   270c4:	b009      	add	sp, #36	; 0x24
   270c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   270c8:	0002bc34 	.word	0x0002bc34

000270cc <uECC_vli_modAdd>:
{
   270cc:	b570      	push	{r4, r5, r6, lr}
   270ce:	4605      	mov	r5, r0
   270d0:	461e      	mov	r6, r3
   270d2:	f99d 4010 	ldrsb.w	r4, [sp, #16]
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   270d6:	4623      	mov	r3, r4
   270d8:	f7ff fec2 	bl	26e60 <uECC_vli_add>
	if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
   270dc:	b930      	cbnz	r0, 270ec <uECC_vli_modAdd+0x20>
   270de:	4622      	mov	r2, r4
   270e0:	4629      	mov	r1, r5
   270e2:	4630      	mov	r0, r6
   270e4:	f7ff fe86 	bl	26df4 <uECC_vli_cmp_unsafe>
   270e8:	2801      	cmp	r0, #1
   270ea:	d005      	beq.n	270f8 <uECC_vli_modAdd+0x2c>
		uECC_vli_sub(result, result, mod, num_words);
   270ec:	4623      	mov	r3, r4
   270ee:	4632      	mov	r2, r6
   270f0:	4629      	mov	r1, r5
   270f2:	4628      	mov	r0, r5
   270f4:	f7ff fef3 	bl	26ede <uECC_vli_sub>
}
   270f8:	bd70      	pop	{r4, r5, r6, pc}

000270fa <uECC_vli_modSub>:
{
   270fa:	b570      	push	{r4, r5, r6, lr}
   270fc:	4605      	mov	r5, r0
   270fe:	461e      	mov	r6, r3
   27100:	f99d 4010 	ldrsb.w	r4, [sp, #16]
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   27104:	4623      	mov	r3, r4
   27106:	f7ff feea 	bl	26ede <uECC_vli_sub>
	if (l_borrow) {
   2710a:	b900      	cbnz	r0, 2710e <uECC_vli_modSub+0x14>
}
   2710c:	bd70      	pop	{r4, r5, r6, pc}
		uECC_vli_add(result, result, mod, num_words);
   2710e:	4623      	mov	r3, r4
   27110:	4632      	mov	r2, r6
   27112:	4629      	mov	r1, r5
   27114:	4628      	mov	r0, r5
   27116:	f7ff fea3 	bl	26e60 <uECC_vli_add>
}
   2711a:	e7f7      	b.n	2710c <uECC_vli_modSub+0x12>

0002711c <uECC_vli_mmod>:
{
   2711c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   27120:	b0a2      	sub	sp, #136	; 0x88
   27122:	4682      	mov	sl, r0
   27124:	4691      	mov	r9, r2
   27126:	461c      	mov	r4, r3
	uECC_word_t *v[2] = {tmp, product};
   27128:	ab02      	add	r3, sp, #8
   2712a:	9300      	str	r3, [sp, #0]
   2712c:	9101      	str	r1, [sp, #4]
	bitcount_t shift = (num_words * 2 * uECC_WORD_BITS) -
   2712e:	01a6      	lsls	r6, r4, #6
   27130:	b2b6      	uxth	r6, r6
			   uECC_vli_numBits(mod, num_words);
   27132:	4621      	mov	r1, r4
   27134:	4610      	mov	r0, r2
   27136:	f7ff fe34 	bl	26da2 <uECC_vli_numBits>
   2713a:	b280      	uxth	r0, r0
	bitcount_t shift = (num_words * 2 * uECC_WORD_BITS) -
   2713c:	1a36      	subs	r6, r6, r0
   2713e:	b236      	sxth	r6, r6
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   27140:	46b0      	mov	r8, r6
   27142:	2e00      	cmp	r6, #0
   27144:	db11      	blt.n	2716a <uECC_vli_mmod+0x4e>
   27146:	f348 1847 	sbfx	r8, r8, #5, #8
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   2714a:	4273      	negs	r3, r6
   2714c:	f006 051f 	and.w	r5, r6, #31
   27150:	f003 031f 	and.w	r3, r3, #31
   27154:	bf58      	it	pl
   27156:	425d      	negpl	r5, r3
	uECC_vli_clear(mod_multiple, word_shift);
   27158:	4641      	mov	r1, r8
   2715a:	a812      	add	r0, sp, #72	; 0x48
   2715c:	f7ff fdf8 	bl	26d50 <uECC_vli_clear>
	if (bit_shift > 0) {
   27160:	2d00      	cmp	r5, #0
   27162:	dd1a      	ble.n	2719a <uECC_vli_mmod+0x7e>
	uECC_word_t carry = 0;
   27164:	2200      	movs	r2, #0
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   27166:	4613      	mov	r3, r2
   27168:	e013      	b.n	27192 <uECC_vli_mmod+0x76>
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   2716a:	f106 081f 	add.w	r8, r6, #31
   2716e:	e7ea      	b.n	27146 <uECC_vli_mmod+0x2a>
			mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
   27170:	f859 7023 	ldr.w	r7, [r9, r3, lsl #2]
   27174:	fa07 f005 	lsl.w	r0, r7, r5
   27178:	eb08 0103 	add.w	r1, r8, r3
   2717c:	4302      	orrs	r2, r0
   2717e:	a822      	add	r0, sp, #136	; 0x88
   27180:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   27184:	f841 2c40 	str.w	r2, [r1, #-64]
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   27188:	f1c5 0220 	rsb	r2, r5, #32
   2718c:	fa27 f202 	lsr.w	r2, r7, r2
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   27190:	3301      	adds	r3, #1
   27192:	429c      	cmp	r4, r3
   27194:	d8ec      	bhi.n	27170 <uECC_vli_mmod+0x54>
		uECC_word_t borrow = 0;
   27196:	2501      	movs	r5, #1
   27198:	e04a      	b.n	27230 <uECC_vli_mmod+0x114>
		uECC_vli_set(mod_multiple + word_shift, mod, num_words);
   2719a:	4622      	mov	r2, r4
   2719c:	4649      	mov	r1, r9
   2719e:	ab12      	add	r3, sp, #72	; 0x48
   271a0:	eb03 0088 	add.w	r0, r3, r8, lsl #2
   271a4:	f7ff fe17 	bl	26dd6 <uECC_vli_set>
   271a8:	e7f5      	b.n	27196 <uECC_vli_mmod+0x7a>
			v[1 - index][i] = diff;
   271aa:	f1c5 0101 	rsb	r1, r5, #1
   271ae:	af22      	add	r7, sp, #136	; 0x88
   271b0:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   271b4:	f851 1c88 	ldr.w	r1, [r1, #-136]
   271b8:	f841 200c 	str.w	r2, [r1, ip]
		for (i = 0; i < num_words * 2; ++i) {
   271bc:	3301      	adds	r3, #1
   271be:	b25b      	sxtb	r3, r3
   271c0:	ebb3 0f44 	cmp.w	r3, r4, lsl #1
   271c4:	da16      	bge.n	271f4 <uECC_vli_mmod+0xd8>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   271c6:	aa22      	add	r2, sp, #136	; 0x88
   271c8:	eb02 0285 	add.w	r2, r2, r5, lsl #2
   271cc:	f852 2c88 	ldr.w	r2, [r2, #-136]
   271d0:	ea4f 0c83 	mov.w	ip, r3, lsl #2
   271d4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   271d8:	aa22      	add	r2, sp, #136	; 0x88
   271da:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   271de:	f852 2c40 	ldr.w	r2, [r2, #-64]
   271e2:	1a8a      	subs	r2, r1, r2
   271e4:	1a12      	subs	r2, r2, r0
			if (diff != v[index][i]) {
   271e6:	4291      	cmp	r1, r2
   271e8:	d0df      	beq.n	271aa <uECC_vli_mmod+0x8e>
				borrow = (diff > v[index][i]);
   271ea:	4291      	cmp	r1, r2
   271ec:	bf2c      	ite	cs
   271ee:	2000      	movcs	r0, #0
   271f0:	2001      	movcc	r0, #1
   271f2:	e7da      	b.n	271aa <uECC_vli_mmod+0x8e>
		index = !(index ^ borrow);
   271f4:	4285      	cmp	r5, r0
   271f6:	bf14      	ite	ne
   271f8:	2500      	movne	r5, #0
   271fa:	2501      	moveq	r5, #1
		uECC_vli_rshift1(mod_multiple, num_words);
   271fc:	4621      	mov	r1, r4
   271fe:	a812      	add	r0, sp, #72	; 0x48
   27200:	f7ff fd06 	bl	26c10 <uECC_vli_rshift1>
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   27204:	1e63      	subs	r3, r4, #1
   27206:	aa22      	add	r2, sp, #136	; 0x88
   27208:	eb02 0884 	add.w	r8, r2, r4, lsl #2
   2720c:	f858 1c40 	ldr.w	r1, [r8, #-64]
   27210:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   27214:	f853 2c40 	ldr.w	r2, [r3, #-64]
   27218:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
   2721c:	f843 2c40 	str.w	r2, [r3, #-64]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   27220:	4621      	mov	r1, r4
   27222:	ab12      	add	r3, sp, #72	; 0x48
   27224:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   27228:	f7ff fcf2 	bl	26c10 <uECC_vli_rshift1>
	for (index = 1; shift >= 0; --shift) {
   2722c:	3e01      	subs	r6, #1
   2722e:	b236      	sxth	r6, r6
   27230:	2e00      	cmp	r6, #0
   27232:	db02      	blt.n	2723a <uECC_vli_mmod+0x11e>
		for (i = 0; i < num_words * 2; ++i) {
   27234:	2300      	movs	r3, #0
		uECC_word_t borrow = 0;
   27236:	4618      	mov	r0, r3
   27238:	e7c2      	b.n	271c0 <uECC_vli_mmod+0xa4>
	uECC_vli_set(result, v[index], num_words);
   2723a:	ab22      	add	r3, sp, #136	; 0x88
   2723c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
   27240:	4622      	mov	r2, r4
   27242:	f855 1c88 	ldr.w	r1, [r5, #-136]
   27246:	4650      	mov	r0, sl
   27248:	f7ff fdc5 	bl	26dd6 <uECC_vli_set>
}
   2724c:	b022      	add	sp, #136	; 0x88
   2724e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00027252 <uECC_vli_modMult_fast>:
{
   27252:	b530      	push	{r4, r5, lr}
   27254:	b091      	sub	sp, #68	; 0x44
   27256:	4605      	mov	r5, r0
   27258:	461c      	mov	r4, r3
	uECC_vli_mult(product, left, right, curve->num_words);
   2725a:	f993 3000 	ldrsb.w	r3, [r3]
   2725e:	4668      	mov	r0, sp
   27260:	f7ff fd08 	bl	26c74 <uECC_vli_mult>
	curve->mmod_fast(result, product);
   27264:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   27268:	4669      	mov	r1, sp
   2726a:	4628      	mov	r0, r5
   2726c:	4798      	blx	r3
}
   2726e:	b011      	add	sp, #68	; 0x44
   27270:	bd30      	pop	{r4, r5, pc}

00027272 <uECC_vli_modSquare_fast>:
{
   27272:	b508      	push	{r3, lr}
	uECC_vli_modMult_fast(result, left, left, curve);
   27274:	4613      	mov	r3, r2
   27276:	460a      	mov	r2, r1
   27278:	f7ff ffeb 	bl	27252 <uECC_vli_modMult_fast>
}
   2727c:	bd08      	pop	{r3, pc}

0002727e <double_jacobian_default>:
{
   2727e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   27282:	b092      	sub	sp, #72	; 0x48
   27284:	4605      	mov	r5, r0
   27286:	4689      	mov	r9, r1
   27288:	4614      	mov	r4, r2
   2728a:	461f      	mov	r7, r3
	wordcount_t num_words = curve->num_words;
   2728c:	f993 6000 	ldrsb.w	r6, [r3]
	if (uECC_vli_isZero(Z1, num_words)) {
   27290:	4631      	mov	r1, r6
   27292:	4610      	mov	r0, r2
   27294:	f7ff fd66 	bl	26d64 <uECC_vli_isZero>
   27298:	b110      	cbz	r0, 272a0 <double_jacobian_default+0x22>
}
   2729a:	b012      	add	sp, #72	; 0x48
   2729c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uECC_vli_modSquare_fast(t4, Y1, curve);   /* t4 = y1^2 */
   272a0:	463a      	mov	r2, r7
   272a2:	4649      	mov	r1, r9
   272a4:	a80a      	add	r0, sp, #40	; 0x28
   272a6:	f7ff ffe4 	bl	27272 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(t5, X1, t4, curve); /* t5 = x1*y1^2 = A */
   272aa:	463b      	mov	r3, r7
   272ac:	aa0a      	add	r2, sp, #40	; 0x28
   272ae:	4629      	mov	r1, r5
   272b0:	a802      	add	r0, sp, #8
   272b2:	f7ff ffce 	bl	27252 <uECC_vli_modMult_fast>
	uECC_vli_modSquare_fast(t4, t4, curve);   /* t4 = y1^4 */
   272b6:	463a      	mov	r2, r7
   272b8:	a90a      	add	r1, sp, #40	; 0x28
   272ba:	4608      	mov	r0, r1
   272bc:	f7ff ffd9 	bl	27272 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(Y1, Y1, Z1, curve); /* t2 = y1*z1 = z3 */
   272c0:	463b      	mov	r3, r7
   272c2:	4622      	mov	r2, r4
   272c4:	4649      	mov	r1, r9
   272c6:	4648      	mov	r0, r9
   272c8:	f7ff ffc3 	bl	27252 <uECC_vli_modMult_fast>
	uECC_vli_modSquare_fast(Z1, Z1, curve);   /* t3 = z1^2 */
   272cc:	463a      	mov	r2, r7
   272ce:	4621      	mov	r1, r4
   272d0:	4620      	mov	r0, r4
   272d2:	f7ff ffce 	bl	27272 <uECC_vli_modSquare_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   272d6:	f107 0804 	add.w	r8, r7, #4
   272da:	9600      	str	r6, [sp, #0]
   272dc:	4643      	mov	r3, r8
   272de:	4622      	mov	r2, r4
   272e0:	4629      	mov	r1, r5
   272e2:	4628      	mov	r0, r5
   272e4:	f7ff fef2 	bl	270cc <uECC_vli_modAdd>
	uECC_vli_modAdd(Z1, Z1, Z1, curve->p, num_words); /* t3 = 2*z1^2 */
   272e8:	9600      	str	r6, [sp, #0]
   272ea:	4643      	mov	r3, r8
   272ec:	4622      	mov	r2, r4
   272ee:	4621      	mov	r1, r4
   272f0:	4620      	mov	r0, r4
   272f2:	f7ff feeb 	bl	270cc <uECC_vli_modAdd>
	uECC_vli_modSub(Z1, X1, Z1, curve->p, num_words); /* t3 = x1 - z1^2 */
   272f6:	9600      	str	r6, [sp, #0]
   272f8:	4643      	mov	r3, r8
   272fa:	4622      	mov	r2, r4
   272fc:	4629      	mov	r1, r5
   272fe:	4620      	mov	r0, r4
   27300:	f7ff fefb 	bl	270fa <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, Z1, curve); /* t1 = x1^2 - z1^4 */
   27304:	463b      	mov	r3, r7
   27306:	4622      	mov	r2, r4
   27308:	4629      	mov	r1, r5
   2730a:	4628      	mov	r0, r5
   2730c:	f7ff ffa1 	bl	27252 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(Z1, X1, X1, curve->p, num_words); /* t3 = 2*(x1^2 - z1^4) */
   27310:	9600      	str	r6, [sp, #0]
   27312:	4643      	mov	r3, r8
   27314:	462a      	mov	r2, r5
   27316:	4629      	mov	r1, r5
   27318:	4620      	mov	r0, r4
   2731a:	f7ff fed7 	bl	270cc <uECC_vli_modAdd>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = 3*(x1^2 - z1^4) */
   2731e:	9600      	str	r6, [sp, #0]
   27320:	4643      	mov	r3, r8
   27322:	4622      	mov	r2, r4
   27324:	4629      	mov	r1, r5
   27326:	4628      	mov	r0, r5
   27328:	f7ff fed0 	bl	270cc <uECC_vli_modAdd>
	if (uECC_vli_testBit(X1, 0)) {
   2732c:	2100      	movs	r1, #0
   2732e:	4628      	mov	r0, r5
   27330:	f7ff fd2d 	bl	26d8e <uECC_vli_testBit>
   27334:	2800      	cmp	r0, #0
   27336:	d04a      	beq.n	273ce <double_jacobian_default+0x150>
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   27338:	4633      	mov	r3, r6
   2733a:	4642      	mov	r2, r8
   2733c:	4629      	mov	r1, r5
   2733e:	4628      	mov	r0, r5
   27340:	f7ff fd8e 	bl	26e60 <uECC_vli_add>
   27344:	4682      	mov	sl, r0
		uECC_vli_rshift1(X1, num_words);
   27346:	4631      	mov	r1, r6
   27348:	4628      	mov	r0, r5
   2734a:	f7ff fc61 	bl	26c10 <uECC_vli_rshift1>
		X1[num_words - 1] |= l_carry << (uECC_WORD_BITS - 1);
   2734e:	f106 4380 	add.w	r3, r6, #1073741824	; 0x40000000
   27352:	3b01      	subs	r3, #1
   27354:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
   27358:	ea42 72ca 	orr.w	r2, r2, sl, lsl #31
   2735c:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
	uECC_vli_modSquare_fast(Z1, X1, curve); /* t3 = B^2 */
   27360:	463a      	mov	r2, r7
   27362:	4629      	mov	r1, r5
   27364:	4620      	mov	r0, r4
   27366:	f7ff ff84 	bl	27272 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - A */
   2736a:	9600      	str	r6, [sp, #0]
   2736c:	4643      	mov	r3, r8
   2736e:	aa02      	add	r2, sp, #8
   27370:	4621      	mov	r1, r4
   27372:	4620      	mov	r0, r4
   27374:	f7ff fec1 	bl	270fa <uECC_vli_modSub>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - 2A = x3 */
   27378:	9600      	str	r6, [sp, #0]
   2737a:	4643      	mov	r3, r8
   2737c:	aa02      	add	r2, sp, #8
   2737e:	4621      	mov	r1, r4
   27380:	4620      	mov	r0, r4
   27382:	f7ff feba 	bl	270fa <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, Z1, curve->p, num_words); /* t5 = A - x3 */
   27386:	9600      	str	r6, [sp, #0]
   27388:	4643      	mov	r3, r8
   2738a:	4622      	mov	r2, r4
   2738c:	a902      	add	r1, sp, #8
   2738e:	4608      	mov	r0, r1
   27390:	f7ff feb3 	bl	270fa <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = B * (A - x3) */
   27394:	463b      	mov	r3, r7
   27396:	aa02      	add	r2, sp, #8
   27398:	4629      	mov	r1, r5
   2739a:	4628      	mov	r0, r5
   2739c:	f7ff ff59 	bl	27252 <uECC_vli_modMult_fast>
	uECC_vli_modSub(t4, X1, t4, curve->p, num_words);
   273a0:	9600      	str	r6, [sp, #0]
   273a2:	4643      	mov	r3, r8
   273a4:	aa0a      	add	r2, sp, #40	; 0x28
   273a6:	4629      	mov	r1, r5
   273a8:	4610      	mov	r0, r2
   273aa:	f7ff fea6 	bl	270fa <uECC_vli_modSub>
	uECC_vli_set(X1, Z1, num_words);
   273ae:	4632      	mov	r2, r6
   273b0:	4621      	mov	r1, r4
   273b2:	4628      	mov	r0, r5
   273b4:	f7ff fd0f 	bl	26dd6 <uECC_vli_set>
	uECC_vli_set(Z1, Y1, num_words);
   273b8:	4632      	mov	r2, r6
   273ba:	4649      	mov	r1, r9
   273bc:	4620      	mov	r0, r4
   273be:	f7ff fd0a 	bl	26dd6 <uECC_vli_set>
	uECC_vli_set(Y1, t4, num_words);
   273c2:	4632      	mov	r2, r6
   273c4:	a90a      	add	r1, sp, #40	; 0x28
   273c6:	4648      	mov	r0, r9
   273c8:	f7ff fd05 	bl	26dd6 <uECC_vli_set>
   273cc:	e765      	b.n	2729a <double_jacobian_default+0x1c>
		uECC_vli_rshift1(X1, num_words);
   273ce:	4631      	mov	r1, r6
   273d0:	4628      	mov	r0, r5
   273d2:	f7ff fc1d 	bl	26c10 <uECC_vli_rshift1>
   273d6:	e7c3      	b.n	27360 <double_jacobian_default+0xe2>

000273d8 <x_side_default>:
{
   273d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   273dc:	b08b      	sub	sp, #44	; 0x2c
   273de:	4604      	mov	r4, r0
   273e0:	4689      	mov	r9, r1
   273e2:	4616      	mov	r6, r2
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   273e4:	2300      	movs	r3, #0
   273e6:	9303      	str	r3, [sp, #12]
   273e8:	9304      	str	r3, [sp, #16]
   273ea:	9305      	str	r3, [sp, #20]
   273ec:	9306      	str	r3, [sp, #24]
   273ee:	9307      	str	r3, [sp, #28]
   273f0:	9308      	str	r3, [sp, #32]
   273f2:	9309      	str	r3, [sp, #36]	; 0x24
   273f4:	af0a      	add	r7, sp, #40	; 0x28
   273f6:	2303      	movs	r3, #3
   273f8:	f847 3d20 	str.w	r3, [r7, #-32]!
	wordcount_t num_words = curve->num_words;
   273fc:	4615      	mov	r5, r2
   273fe:	f915 8b04 	ldrsb.w	r8, [r5], #4
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   27402:	f7ff ff36 	bl	27272 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   27406:	f8cd 8000 	str.w	r8, [sp]
   2740a:	462b      	mov	r3, r5
   2740c:	463a      	mov	r2, r7
   2740e:	4621      	mov	r1, r4
   27410:	4620      	mov	r0, r4
   27412:	f7ff fe72 	bl	270fa <uECC_vli_modSub>
	uECC_vli_modMult_fast(result, result, x, curve); /* r = x^3 - 3x */
   27416:	4633      	mov	r3, r6
   27418:	464a      	mov	r2, r9
   2741a:	4621      	mov	r1, r4
   2741c:	4620      	mov	r0, r4
   2741e:	f7ff ff18 	bl	27252 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(result, result, curve->b, curve->p, num_words);
   27422:	f8cd 8000 	str.w	r8, [sp]
   27426:	462b      	mov	r3, r5
   27428:	f106 0284 	add.w	r2, r6, #132	; 0x84
   2742c:	4621      	mov	r1, r4
   2742e:	4620      	mov	r0, r4
   27430:	f7ff fe4c 	bl	270cc <uECC_vli_modAdd>
}
   27434:	b00b      	add	sp, #44	; 0x2c
   27436:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0002743a <XYcZ_addC>:
   or P => P - Q, Q => P + Q
 */
static void XYcZ_addC(uECC_word_t * X1, uECC_word_t * Y1,
		      uECC_word_t * X2, uECC_word_t * Y2,
		      uECC_Curve curve)
{
   2743a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2743e:	b09b      	sub	sp, #108	; 0x6c
   27440:	4607      	mov	r7, r0
   27442:	4689      	mov	r9, r1
   27444:	4616      	mov	r6, r2
   27446:	4698      	mov	r8, r3
	/* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
	uECC_word_t t5[NUM_ECC_WORDS];
	uECC_word_t t6[NUM_ECC_WORDS];
	uECC_word_t t7[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   27448:	9c22      	ldr	r4, [sp, #136]	; 0x88
   2744a:	f914 5b04 	ldrsb.w	r5, [r4], #4

	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   2744e:	9500      	str	r5, [sp, #0]
   27450:	4623      	mov	r3, r4
   27452:	4602      	mov	r2, r0
   27454:	4631      	mov	r1, r6
   27456:	a812      	add	r0, sp, #72	; 0x48
   27458:	f7ff fe4f 	bl	270fa <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   2745c:	9a22      	ldr	r2, [sp, #136]	; 0x88
   2745e:	a912      	add	r1, sp, #72	; 0x48
   27460:	4608      	mov	r0, r1
   27462:	f7ff ff06 	bl	27272 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   27466:	9b22      	ldr	r3, [sp, #136]	; 0x88
   27468:	aa12      	add	r2, sp, #72	; 0x48
   2746a:	4639      	mov	r1, r7
   2746c:	4638      	mov	r0, r7
   2746e:	f7ff fef0 	bl	27252 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   27472:	9b22      	ldr	r3, [sp, #136]	; 0x88
   27474:	aa12      	add	r2, sp, #72	; 0x48
   27476:	4631      	mov	r1, r6
   27478:	4630      	mov	r0, r6
   2747a:	f7ff feea 	bl	27252 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t5, Y2, Y1, curve->p, num_words); /* t5 = y2 + y1 */
   2747e:	9500      	str	r5, [sp, #0]
   27480:	4623      	mov	r3, r4
   27482:	464a      	mov	r2, r9
   27484:	4641      	mov	r1, r8
   27486:	a812      	add	r0, sp, #72	; 0x48
   27488:	f7ff fe20 	bl	270cc <uECC_vli_modAdd>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   2748c:	9500      	str	r5, [sp, #0]
   2748e:	4623      	mov	r3, r4
   27490:	464a      	mov	r2, r9
   27492:	4641      	mov	r1, r8
   27494:	4640      	mov	r0, r8
   27496:	f7ff fe30 	bl	270fa <uECC_vli_modSub>

	uECC_vli_modSub(t6, X2, X1, curve->p, num_words); /* t6 = C - B */
   2749a:	9500      	str	r5, [sp, #0]
   2749c:	4623      	mov	r3, r4
   2749e:	463a      	mov	r2, r7
   274a0:	4631      	mov	r1, r6
   274a2:	a80a      	add	r0, sp, #40	; 0x28
   274a4:	f7ff fe29 	bl	270fa <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, t6, curve); /* t2 = y1 * (C - B) = E */
   274a8:	9b22      	ldr	r3, [sp, #136]	; 0x88
   274aa:	aa0a      	add	r2, sp, #40	; 0x28
   274ac:	4649      	mov	r1, r9
   274ae:	4648      	mov	r0, r9
   274b0:	f7ff fecf 	bl	27252 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t6, X1, X2, curve->p, num_words); /* t6 = B + C */
   274b4:	9500      	str	r5, [sp, #0]
   274b6:	4623      	mov	r3, r4
   274b8:	4632      	mov	r2, r6
   274ba:	4639      	mov	r1, r7
   274bc:	a80a      	add	r0, sp, #40	; 0x28
   274be:	f7ff fe05 	bl	270cc <uECC_vli_modAdd>
	uECC_vli_modSquare_fast(X2, Y2, curve); /* t3 = (y2 - y1)^2 = D */
   274c2:	9a22      	ldr	r2, [sp, #136]	; 0x88
   274c4:	4641      	mov	r1, r8
   274c6:	4630      	mov	r0, r6
   274c8:	f7ff fed3 	bl	27272 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(X2, X2, t6, curve->p, num_words); /* t3 = D - (B + C) = x3 */
   274cc:	9500      	str	r5, [sp, #0]
   274ce:	4623      	mov	r3, r4
   274d0:	aa0a      	add	r2, sp, #40	; 0x28
   274d2:	4631      	mov	r1, r6
   274d4:	4630      	mov	r0, r6
   274d6:	f7ff fe10 	bl	270fa <uECC_vli_modSub>

	uECC_vli_modSub(t7, X1, X2, curve->p, num_words); /* t7 = B - x3 */
   274da:	9500      	str	r5, [sp, #0]
   274dc:	4623      	mov	r3, r4
   274de:	4632      	mov	r2, r6
   274e0:	4639      	mov	r1, r7
   274e2:	a802      	add	r0, sp, #8
   274e4:	f7ff fe09 	bl	270fa <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, t7, curve); /* t4 = (y2 - y1)*(B - x3) */
   274e8:	9b22      	ldr	r3, [sp, #136]	; 0x88
   274ea:	aa02      	add	r2, sp, #8
   274ec:	4641      	mov	r1, r8
   274ee:	4640      	mov	r0, r8
   274f0:	f7ff feaf 	bl	27252 <uECC_vli_modMult_fast>
	/* t4 = (y2 - y1)*(B - x3) - E = y3: */
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words);
   274f4:	9500      	str	r5, [sp, #0]
   274f6:	4623      	mov	r3, r4
   274f8:	464a      	mov	r2, r9
   274fa:	4641      	mov	r1, r8
   274fc:	4640      	mov	r0, r8
   274fe:	f7ff fdfc 	bl	270fa <uECC_vli_modSub>

	uECC_vli_modSquare_fast(t7, t5, curve); /* t7 = (y2 + y1)^2 = F */
   27502:	9a22      	ldr	r2, [sp, #136]	; 0x88
   27504:	a912      	add	r1, sp, #72	; 0x48
   27506:	a802      	add	r0, sp, #8
   27508:	f7ff feb3 	bl	27272 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t7, t7, t6, curve->p, num_words); /* t7 = F - (B + C) = x3' */
   2750c:	9500      	str	r5, [sp, #0]
   2750e:	4623      	mov	r3, r4
   27510:	aa0a      	add	r2, sp, #40	; 0x28
   27512:	a902      	add	r1, sp, #8
   27514:	4608      	mov	r0, r1
   27516:	f7ff fdf0 	bl	270fa <uECC_vli_modSub>
	uECC_vli_modSub(t6, t7, X1, curve->p, num_words); /* t6 = x3' - B */
   2751a:	9500      	str	r5, [sp, #0]
   2751c:	4623      	mov	r3, r4
   2751e:	463a      	mov	r2, r7
   27520:	a902      	add	r1, sp, #8
   27522:	a80a      	add	r0, sp, #40	; 0x28
   27524:	f7ff fde9 	bl	270fa <uECC_vli_modSub>
	uECC_vli_modMult_fast(t6, t6, t5, curve); /* t6 = (y2+y1)*(x3' - B) */
   27528:	9b22      	ldr	r3, [sp, #136]	; 0x88
   2752a:	aa12      	add	r2, sp, #72	; 0x48
   2752c:	a90a      	add	r1, sp, #40	; 0x28
   2752e:	4608      	mov	r0, r1
   27530:	f7ff fe8f 	bl	27252 <uECC_vli_modMult_fast>
	/* t2 = (y2+y1)*(x3' - B) - E = y3': */
	uECC_vli_modSub(Y1, t6, Y1, curve->p, num_words);
   27534:	9500      	str	r5, [sp, #0]
   27536:	4623      	mov	r3, r4
   27538:	464a      	mov	r2, r9
   2753a:	a90a      	add	r1, sp, #40	; 0x28
   2753c:	4648      	mov	r0, r9
   2753e:	f7ff fddc 	bl	270fa <uECC_vli_modSub>

	uECC_vli_set(X1, t7, num_words);
   27542:	462a      	mov	r2, r5
   27544:	a902      	add	r1, sp, #8
   27546:	4638      	mov	r0, r7
   27548:	f7ff fc45 	bl	26dd6 <uECC_vli_set>
}
   2754c:	b01b      	add	sp, #108	; 0x6c
   2754e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00027552 <uECC_vli_modInv>:
{
   27552:	b5f0      	push	{r4, r5, r6, r7, lr}
   27554:	b0a1      	sub	sp, #132	; 0x84
   27556:	4607      	mov	r7, r0
   27558:	460e      	mov	r6, r1
   2755a:	4615      	mov	r5, r2
   2755c:	461c      	mov	r4, r3
	if (uECC_vli_isZero(input, num_words)) {
   2755e:	4619      	mov	r1, r3
   27560:	4630      	mov	r0, r6
   27562:	f7ff fbff 	bl	26d64 <uECC_vli_isZero>
   27566:	b9a0      	cbnz	r0, 27592 <uECC_vli_modInv+0x40>
	uECC_vli_set(a, input, num_words);
   27568:	4622      	mov	r2, r4
   2756a:	4631      	mov	r1, r6
   2756c:	a818      	add	r0, sp, #96	; 0x60
   2756e:	f7ff fc32 	bl	26dd6 <uECC_vli_set>
	uECC_vli_set(b, mod, num_words);
   27572:	4622      	mov	r2, r4
   27574:	4629      	mov	r1, r5
   27576:	a810      	add	r0, sp, #64	; 0x40
   27578:	f7ff fc2d 	bl	26dd6 <uECC_vli_set>
	uECC_vli_clear(u, num_words);
   2757c:	4621      	mov	r1, r4
   2757e:	a808      	add	r0, sp, #32
   27580:	f7ff fbe6 	bl	26d50 <uECC_vli_clear>
	u[0] = 1;
   27584:	2301      	movs	r3, #1
   27586:	9308      	str	r3, [sp, #32]
	uECC_vli_clear(v, num_words);
   27588:	4621      	mov	r1, r4
   2758a:	4668      	mov	r0, sp
   2758c:	f7ff fbe0 	bl	26d50 <uECC_vli_clear>
	while ((cmpResult = uECC_vli_cmp_unsafe(a, b, num_words)) != 0) {
   27590:	e00d      	b.n	275ae <uECC_vli_modInv+0x5c>
		uECC_vli_clear(result, num_words);
   27592:	4621      	mov	r1, r4
   27594:	4638      	mov	r0, r7
   27596:	f7ff fbdb 	bl	26d50 <uECC_vli_clear>
   2759a:	e071      	b.n	27680 <uECC_vli_modInv+0x12e>
			uECC_vli_rshift1(a, num_words);
   2759c:	4621      	mov	r1, r4
   2759e:	a818      	add	r0, sp, #96	; 0x60
   275a0:	f7ff fb36 	bl	26c10 <uECC_vli_rshift1>
      			vli_modInv_update(u, mod, num_words);
   275a4:	4622      	mov	r2, r4
   275a6:	4629      	mov	r1, r5
   275a8:	a808      	add	r0, sp, #32
   275aa:	f7ff fc7a 	bl	26ea2 <vli_modInv_update>
	while ((cmpResult = uECC_vli_cmp_unsafe(a, b, num_words)) != 0) {
   275ae:	4622      	mov	r2, r4
   275b0:	a910      	add	r1, sp, #64	; 0x40
   275b2:	a818      	add	r0, sp, #96	; 0x60
   275b4:	f7ff fc1e 	bl	26df4 <uECC_vli_cmp_unsafe>
   275b8:	4602      	mov	r2, r0
   275ba:	2800      	cmp	r0, #0
   275bc:	d05b      	beq.n	27676 <uECC_vli_modInv+0x124>
		if (EVEN(a)) {
   275be:	9b18      	ldr	r3, [sp, #96]	; 0x60
   275c0:	f013 0f01 	tst.w	r3, #1
   275c4:	d0ea      	beq.n	2759c <uECC_vli_modInv+0x4a>
    		} else if (EVEN(b)) {
   275c6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   275c8:	f013 0f01 	tst.w	r3, #1
   275cc:	d01e      	beq.n	2760c <uECC_vli_modInv+0xba>
		} else if (cmpResult > 0) {
   275ce:	2a00      	cmp	r2, #0
   275d0:	dd2d      	ble.n	2762e <uECC_vli_modInv+0xdc>
			uECC_vli_sub(a, a, b, num_words);
   275d2:	4623      	mov	r3, r4
   275d4:	aa10      	add	r2, sp, #64	; 0x40
   275d6:	a918      	add	r1, sp, #96	; 0x60
   275d8:	4608      	mov	r0, r1
   275da:	f7ff fc80 	bl	26ede <uECC_vli_sub>
			uECC_vli_rshift1(a, num_words);
   275de:	4621      	mov	r1, r4
   275e0:	a818      	add	r0, sp, #96	; 0x60
   275e2:	f7ff fb15 	bl	26c10 <uECC_vli_rshift1>
			if (uECC_vli_cmp_unsafe(u, v, num_words) < 0) {
   275e6:	4622      	mov	r2, r4
   275e8:	4669      	mov	r1, sp
   275ea:	a808      	add	r0, sp, #32
   275ec:	f7ff fc02 	bl	26df4 <uECC_vli_cmp_unsafe>
   275f0:	2800      	cmp	r0, #0
   275f2:	db15      	blt.n	27620 <uECC_vli_modInv+0xce>
      			uECC_vli_sub(u, u, v, num_words);
   275f4:	4623      	mov	r3, r4
   275f6:	466a      	mov	r2, sp
   275f8:	a908      	add	r1, sp, #32
   275fa:	4608      	mov	r0, r1
   275fc:	f7ff fc6f 	bl	26ede <uECC_vli_sub>
      			vli_modInv_update(u, mod, num_words);
   27600:	4622      	mov	r2, r4
   27602:	4629      	mov	r1, r5
   27604:	a808      	add	r0, sp, #32
   27606:	f7ff fc4c 	bl	26ea2 <vli_modInv_update>
   2760a:	e7d0      	b.n	275ae <uECC_vli_modInv+0x5c>
			uECC_vli_rshift1(b, num_words);
   2760c:	4621      	mov	r1, r4
   2760e:	a810      	add	r0, sp, #64	; 0x40
   27610:	f7ff fafe 	bl	26c10 <uECC_vli_rshift1>
			vli_modInv_update(v, mod, num_words);
   27614:	4622      	mov	r2, r4
   27616:	4629      	mov	r1, r5
   27618:	4668      	mov	r0, sp
   2761a:	f7ff fc42 	bl	26ea2 <vli_modInv_update>
   2761e:	e7c6      	b.n	275ae <uECC_vli_modInv+0x5c>
        			uECC_vli_add(u, u, mod, num_words);
   27620:	4623      	mov	r3, r4
   27622:	462a      	mov	r2, r5
   27624:	a908      	add	r1, sp, #32
   27626:	4608      	mov	r0, r1
   27628:	f7ff fc1a 	bl	26e60 <uECC_vli_add>
   2762c:	e7e2      	b.n	275f4 <uECC_vli_modInv+0xa2>
      			uECC_vli_sub(b, b, a, num_words);
   2762e:	4623      	mov	r3, r4
   27630:	aa18      	add	r2, sp, #96	; 0x60
   27632:	a910      	add	r1, sp, #64	; 0x40
   27634:	4608      	mov	r0, r1
   27636:	f7ff fc52 	bl	26ede <uECC_vli_sub>
      			uECC_vli_rshift1(b, num_words);
   2763a:	4621      	mov	r1, r4
   2763c:	a810      	add	r0, sp, #64	; 0x40
   2763e:	f7ff fae7 	bl	26c10 <uECC_vli_rshift1>
      			if (uECC_vli_cmp_unsafe(v, u, num_words) < 0) {
   27642:	4622      	mov	r2, r4
   27644:	a908      	add	r1, sp, #32
   27646:	4668      	mov	r0, sp
   27648:	f7ff fbd4 	bl	26df4 <uECC_vli_cmp_unsafe>
   2764c:	2800      	cmp	r0, #0
   2764e:	db0b      	blt.n	27668 <uECC_vli_modInv+0x116>
      			uECC_vli_sub(v, v, u, num_words);
   27650:	4623      	mov	r3, r4
   27652:	aa08      	add	r2, sp, #32
   27654:	4669      	mov	r1, sp
   27656:	4668      	mov	r0, sp
   27658:	f7ff fc41 	bl	26ede <uECC_vli_sub>
      			vli_modInv_update(v, mod, num_words);
   2765c:	4622      	mov	r2, r4
   2765e:	4629      	mov	r1, r5
   27660:	4668      	mov	r0, sp
   27662:	f7ff fc1e 	bl	26ea2 <vli_modInv_update>
   27666:	e7a2      	b.n	275ae <uECC_vli_modInv+0x5c>
        			uECC_vli_add(v, v, mod, num_words);
   27668:	4623      	mov	r3, r4
   2766a:	462a      	mov	r2, r5
   2766c:	4669      	mov	r1, sp
   2766e:	4668      	mov	r0, sp
   27670:	f7ff fbf6 	bl	26e60 <uECC_vli_add>
   27674:	e7ec      	b.n	27650 <uECC_vli_modInv+0xfe>
  	uECC_vli_set(result, u, num_words);
   27676:	4622      	mov	r2, r4
   27678:	a908      	add	r1, sp, #32
   2767a:	4638      	mov	r0, r7
   2767c:	f7ff fbab 	bl	26dd6 <uECC_vli_set>
}
   27680:	b021      	add	sp, #132	; 0x84
   27682:	bdf0      	pop	{r4, r5, r6, r7, pc}

00027684 <EccPoint_isZero>:
{
   27684:	b508      	push	{r3, lr}
	return uECC_vli_isZero(point, curve->num_words * 2);
   27686:	7809      	ldrb	r1, [r1, #0]
   27688:	0049      	lsls	r1, r1, #1
   2768a:	b249      	sxtb	r1, r1
   2768c:	f7ff fb6a 	bl	26d64 <uECC_vli_isZero>
}
   27690:	bd08      	pop	{r3, pc}

00027692 <apply_z>:
{
   27692:	b5f0      	push	{r4, r5, r6, r7, lr}
   27694:	b089      	sub	sp, #36	; 0x24
   27696:	4607      	mov	r7, r0
   27698:	460d      	mov	r5, r1
   2769a:	4616      	mov	r6, r2
   2769c:	461c      	mov	r4, r3
	uECC_vli_modSquare_fast(t1, Z, curve);    /* z^2 */
   2769e:	461a      	mov	r2, r3
   276a0:	4631      	mov	r1, r6
   276a2:	4668      	mov	r0, sp
   276a4:	f7ff fde5 	bl	27272 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t1, curve); /* x1 * z^2 */
   276a8:	4623      	mov	r3, r4
   276aa:	466a      	mov	r2, sp
   276ac:	4639      	mov	r1, r7
   276ae:	4638      	mov	r0, r7
   276b0:	f7ff fdcf 	bl	27252 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(t1, t1, Z, curve);  /* z^3 */
   276b4:	4623      	mov	r3, r4
   276b6:	4632      	mov	r2, r6
   276b8:	4669      	mov	r1, sp
   276ba:	4668      	mov	r0, sp
   276bc:	f7ff fdc9 	bl	27252 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(Y1, Y1, t1, curve); /* y1 * z^3 */
   276c0:	4623      	mov	r3, r4
   276c2:	466a      	mov	r2, sp
   276c4:	4629      	mov	r1, r5
   276c6:	4628      	mov	r0, r5
   276c8:	f7ff fdc3 	bl	27252 <uECC_vli_modMult_fast>
}
   276cc:	b009      	add	sp, #36	; 0x24
   276ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

000276d0 <XYcZ_initial_double>:
{
   276d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   276d4:	b089      	sub	sp, #36	; 0x24
   276d6:	4605      	mov	r5, r0
   276d8:	460e      	mov	r6, r1
   276da:	4690      	mov	r8, r2
   276dc:	4699      	mov	r9, r3
   276de:	9910      	ldr	r1, [sp, #64]	; 0x40
   276e0:	9c11      	ldr	r4, [sp, #68]	; 0x44
	wordcount_t num_words = curve->num_words;
   276e2:	f994 7000 	ldrsb.w	r7, [r4]
	if (initial_Z) {
   276e6:	b319      	cbz	r1, 27730 <XYcZ_initial_double+0x60>
		uECC_vli_set(z, initial_Z, num_words);
   276e8:	463a      	mov	r2, r7
   276ea:	4668      	mov	r0, sp
   276ec:	f7ff fb73 	bl	26dd6 <uECC_vli_set>
	uECC_vli_set(X2, X1, num_words);
   276f0:	463a      	mov	r2, r7
   276f2:	4629      	mov	r1, r5
   276f4:	4640      	mov	r0, r8
   276f6:	f7ff fb6e 	bl	26dd6 <uECC_vli_set>
	uECC_vli_set(Y2, Y1, num_words);
   276fa:	463a      	mov	r2, r7
   276fc:	4631      	mov	r1, r6
   276fe:	4648      	mov	r0, r9
   27700:	f7ff fb69 	bl	26dd6 <uECC_vli_set>
	apply_z(X1, Y1, z, curve);
   27704:	4623      	mov	r3, r4
   27706:	466a      	mov	r2, sp
   27708:	4631      	mov	r1, r6
   2770a:	4628      	mov	r0, r5
   2770c:	f7ff ffc1 	bl	27692 <apply_z>
	curve->double_jacobian(X1, Y1, z, curve);
   27710:	f8d4 70a4 	ldr.w	r7, [r4, #164]	; 0xa4
   27714:	4623      	mov	r3, r4
   27716:	466a      	mov	r2, sp
   27718:	4631      	mov	r1, r6
   2771a:	4628      	mov	r0, r5
   2771c:	47b8      	blx	r7
	apply_z(X2, Y2, z, curve);
   2771e:	4623      	mov	r3, r4
   27720:	466a      	mov	r2, sp
   27722:	4649      	mov	r1, r9
   27724:	4640      	mov	r0, r8
   27726:	f7ff ffb4 	bl	27692 <apply_z>
}
   2772a:	b009      	add	sp, #36	; 0x24
   2772c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		uECC_vli_clear(z, num_words);
   27730:	4639      	mov	r1, r7
   27732:	4668      	mov	r0, sp
   27734:	f7ff fb0c 	bl	26d50 <uECC_vli_clear>
		z[0] = 1;
   27738:	2301      	movs	r3, #1
   2773a:	9300      	str	r3, [sp, #0]
   2773c:	e7d8      	b.n	276f0 <XYcZ_initial_double+0x20>

0002773e <XYcZ_add>:
{
   2773e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   27742:	b08b      	sub	sp, #44	; 0x2c
   27744:	4680      	mov	r8, r0
   27746:	4689      	mov	r9, r1
   27748:	4614      	mov	r4, r2
   2774a:	461f      	mov	r7, r3
	wordcount_t num_words = curve->num_words;
   2774c:	9d12      	ldr	r5, [sp, #72]	; 0x48
   2774e:	f915 6b04 	ldrsb.w	r6, [r5], #4
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   27752:	9600      	str	r6, [sp, #0]
   27754:	462b      	mov	r3, r5
   27756:	4602      	mov	r2, r0
   27758:	4621      	mov	r1, r4
   2775a:	a802      	add	r0, sp, #8
   2775c:	f7ff fccd 	bl	270fa <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   27760:	9a12      	ldr	r2, [sp, #72]	; 0x48
   27762:	a902      	add	r1, sp, #8
   27764:	4608      	mov	r0, r1
   27766:	f7ff fd84 	bl	27272 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   2776a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2776c:	aa02      	add	r2, sp, #8
   2776e:	4641      	mov	r1, r8
   27770:	4640      	mov	r0, r8
   27772:	f7ff fd6e 	bl	27252 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   27776:	9b12      	ldr	r3, [sp, #72]	; 0x48
   27778:	aa02      	add	r2, sp, #8
   2777a:	4621      	mov	r1, r4
   2777c:	4620      	mov	r0, r4
   2777e:	f7ff fd68 	bl	27252 <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   27782:	9600      	str	r6, [sp, #0]
   27784:	462b      	mov	r3, r5
   27786:	464a      	mov	r2, r9
   27788:	4639      	mov	r1, r7
   2778a:	4638      	mov	r0, r7
   2778c:	f7ff fcb5 	bl	270fa <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, Y2, curve); /* t5 = (y2 - y1)^2 = D */
   27790:	9a12      	ldr	r2, [sp, #72]	; 0x48
   27792:	4639      	mov	r1, r7
   27794:	a802      	add	r0, sp, #8
   27796:	f7ff fd6c 	bl	27272 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t5, t5, X1, curve->p, num_words); /* t5 = D - B */
   2779a:	9600      	str	r6, [sp, #0]
   2779c:	462b      	mov	r3, r5
   2779e:	4642      	mov	r2, r8
   277a0:	a902      	add	r1, sp, #8
   277a2:	4608      	mov	r0, r1
   277a4:	f7ff fca9 	bl	270fa <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, X2, curve->p, num_words); /* t5 = D - B - C = x3 */
   277a8:	9600      	str	r6, [sp, #0]
   277aa:	462b      	mov	r3, r5
   277ac:	4622      	mov	r2, r4
   277ae:	a902      	add	r1, sp, #8
   277b0:	4608      	mov	r0, r1
   277b2:	f7ff fca2 	bl	270fa <uECC_vli_modSub>
	uECC_vli_modSub(X2, X2, X1, curve->p, num_words); /* t3 = C - B */
   277b6:	9600      	str	r6, [sp, #0]
   277b8:	462b      	mov	r3, r5
   277ba:	4642      	mov	r2, r8
   277bc:	4621      	mov	r1, r4
   277be:	4620      	mov	r0, r4
   277c0:	f7ff fc9b 	bl	270fa <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, X2, curve); /* t2 = y1*(C - B) */
   277c4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   277c6:	4622      	mov	r2, r4
   277c8:	4649      	mov	r1, r9
   277ca:	4648      	mov	r0, r9
   277cc:	f7ff fd41 	bl	27252 <uECC_vli_modMult_fast>
	uECC_vli_modSub(X2, X1, t5, curve->p, num_words); /* t3 = B - x3 */
   277d0:	9600      	str	r6, [sp, #0]
   277d2:	462b      	mov	r3, r5
   277d4:	aa02      	add	r2, sp, #8
   277d6:	4641      	mov	r1, r8
   277d8:	4620      	mov	r0, r4
   277da:	f7ff fc8e 	bl	270fa <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, X2, curve); /* t4 = (y2 - y1)*(B - x3) */
   277de:	9b12      	ldr	r3, [sp, #72]	; 0x48
   277e0:	4622      	mov	r2, r4
   277e2:	4639      	mov	r1, r7
   277e4:	4638      	mov	r0, r7
   277e6:	f7ff fd34 	bl	27252 <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y3 */
   277ea:	9600      	str	r6, [sp, #0]
   277ec:	462b      	mov	r3, r5
   277ee:	464a      	mov	r2, r9
   277f0:	4639      	mov	r1, r7
   277f2:	4638      	mov	r0, r7
   277f4:	f7ff fc81 	bl	270fa <uECC_vli_modSub>
	uECC_vli_set(X2, t5, num_words);
   277f8:	4632      	mov	r2, r6
   277fa:	a902      	add	r1, sp, #8
   277fc:	4620      	mov	r0, r4
   277fe:	f7ff faea 	bl	26dd6 <uECC_vli_set>
}
   27802:	b00b      	add	sp, #44	; 0x2c
   27804:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00027808 <EccPoint_mult>:

void EccPoint_mult(uECC_word_t * result, const uECC_word_t * point,
		   const uECC_word_t * scalar,
		   const uECC_word_t * initial_Z,
		   bitcount_t num_bits, uECC_Curve curve) 
{
   27808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2780c:	b0af      	sub	sp, #188	; 0xbc
   2780e:	9004      	str	r0, [sp, #16]
   27810:	460d      	mov	r5, r1
   27812:	9105      	str	r1, [sp, #20]
   27814:	9202      	str	r2, [sp, #8]
   27816:	461c      	mov	r4, r3
   27818:	f8dd 80e4 	ldr.w	r8, [sp, #228]	; 0xe4
	uECC_word_t Rx[2][NUM_ECC_WORDS];
	uECC_word_t Ry[2][NUM_ECC_WORDS];
	uECC_word_t z[NUM_ECC_WORDS];
	bitcount_t i;
	uECC_word_t nb;
	wordcount_t num_words = curve->num_words;
   2781c:	f998 a000 	ldrsb.w	sl, [r8]

	uECC_vli_set(Rx[1], point, num_words);
   27820:	4652      	mov	r2, sl
   27822:	a826      	add	r0, sp, #152	; 0x98
   27824:	f7ff fad7 	bl	26dd6 <uECC_vli_set>
  	uECC_vli_set(Ry[1], point + num_words, num_words);
   27828:	ea4f 0b8a 	mov.w	fp, sl, lsl #2
   2782c:	462b      	mov	r3, r5
   2782e:	445b      	add	r3, fp
   27830:	9303      	str	r3, [sp, #12]
   27832:	4652      	mov	r2, sl
   27834:	4619      	mov	r1, r3
   27836:	a816      	add	r0, sp, #88	; 0x58
   27838:	f7ff facd 	bl	26dd6 <uECC_vli_set>

	XYcZ_initial_double(Rx[1], Ry[1], Rx[0], Ry[0], initial_Z, curve);
   2783c:	f8cd 8004 	str.w	r8, [sp, #4]
   27840:	9400      	str	r4, [sp, #0]
   27842:	ab0e      	add	r3, sp, #56	; 0x38
   27844:	aa1e      	add	r2, sp, #120	; 0x78
   27846:	a916      	add	r1, sp, #88	; 0x58
   27848:	a826      	add	r0, sp, #152	; 0x98
   2784a:	f7ff ff41 	bl	276d0 <XYcZ_initial_double>

	for (i = num_bits - 2; i > 0; --i) {
   2784e:	f9bd 60e0 	ldrsh.w	r6, [sp, #224]	; 0xe0
   27852:	3e02      	subs	r6, #2
   27854:	b236      	sxth	r6, r6
   27856:	4647      	mov	r7, r8
   27858:	e024      	b.n	278a4 <EccPoint_mult+0x9c>
		nb = !uECC_vli_testBit(scalar, i);
   2785a:	4631      	mov	r1, r6
   2785c:	9802      	ldr	r0, [sp, #8]
   2785e:	f7ff fa96 	bl	26d8e <uECC_vli_testBit>
   27862:	fab0 f080 	clz	r0, r0
   27866:	0940      	lsrs	r0, r0, #5
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   27868:	f1c0 0401 	rsb	r4, r0, #1
   2786c:	0164      	lsls	r4, r4, #5
   2786e:	ab1e      	add	r3, sp, #120	; 0x78
   27870:	191d      	adds	r5, r3, r4
   27872:	ab0e      	add	r3, sp, #56	; 0x38
   27874:	441c      	add	r4, r3
   27876:	0140      	lsls	r0, r0, #5
   27878:	ab1e      	add	r3, sp, #120	; 0x78
   2787a:	eb03 0800 	add.w	r8, r3, r0
   2787e:	ab0e      	add	r3, sp, #56	; 0x38
   27880:	eb03 0900 	add.w	r9, r3, r0
   27884:	9700      	str	r7, [sp, #0]
   27886:	464b      	mov	r3, r9
   27888:	4642      	mov	r2, r8
   2788a:	4621      	mov	r1, r4
   2788c:	4628      	mov	r0, r5
   2788e:	f7ff fdd4 	bl	2743a <XYcZ_addC>
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   27892:	9700      	str	r7, [sp, #0]
   27894:	4623      	mov	r3, r4
   27896:	462a      	mov	r2, r5
   27898:	4649      	mov	r1, r9
   2789a:	4640      	mov	r0, r8
   2789c:	f7ff ff4f 	bl	2773e <XYcZ_add>
	for (i = num_bits - 2; i > 0; --i) {
   278a0:	3e01      	subs	r6, #1
   278a2:	b236      	sxth	r6, r6
   278a4:	2e00      	cmp	r6, #0
   278a6:	dcd8      	bgt.n	2785a <EccPoint_mult+0x52>
   278a8:	46b8      	mov	r8, r7
	}

	nb = !uECC_vli_testBit(scalar, 0);
   278aa:	2100      	movs	r1, #0
   278ac:	9802      	ldr	r0, [sp, #8]
   278ae:	f7ff fa6e 	bl	26d8e <uECC_vli_testBit>
   278b2:	fab0 f080 	clz	r0, r0
   278b6:	0940      	lsrs	r0, r0, #5
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   278b8:	f1c0 0501 	rsb	r5, r0, #1
   278bc:	016d      	lsls	r5, r5, #5
   278be:	ab1e      	add	r3, sp, #120	; 0x78
   278c0:	195e      	adds	r6, r3, r5
   278c2:	ab0e      	add	r3, sp, #56	; 0x38
   278c4:	441d      	add	r5, r3
   278c6:	0140      	lsls	r0, r0, #5
   278c8:	ab1e      	add	r3, sp, #120	; 0x78
   278ca:	181f      	adds	r7, r3, r0
   278cc:	ab0e      	add	r3, sp, #56	; 0x38
   278ce:	181c      	adds	r4, r3, r0
   278d0:	f8cd 8000 	str.w	r8, [sp]
   278d4:	4623      	mov	r3, r4
   278d6:	463a      	mov	r2, r7
   278d8:	4629      	mov	r1, r5
   278da:	4630      	mov	r0, r6
   278dc:	f7ff fdad 	bl	2743a <XYcZ_addC>

	/* Find final 1/Z value. */
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   278e0:	f108 0904 	add.w	r9, r8, #4
   278e4:	f8cd a000 	str.w	sl, [sp]
   278e8:	464b      	mov	r3, r9
   278ea:	aa1e      	add	r2, sp, #120	; 0x78
   278ec:	a926      	add	r1, sp, #152	; 0x98
   278ee:	a806      	add	r0, sp, #24
   278f0:	f7ff fc03 	bl	270fa <uECC_vli_modSub>
	uECC_vli_modMult_fast(z, z, Ry[1 - nb], curve); /* Yb * (X1 - X0) */
   278f4:	4643      	mov	r3, r8
   278f6:	462a      	mov	r2, r5
   278f8:	a906      	add	r1, sp, #24
   278fa:	4608      	mov	r0, r1
   278fc:	f7ff fca9 	bl	27252 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(z, z, point, curve); /* xP * Yb * (X1 - X0) */
   27900:	4643      	mov	r3, r8
   27902:	9a05      	ldr	r2, [sp, #20]
   27904:	a906      	add	r1, sp, #24
   27906:	4608      	mov	r0, r1
   27908:	f7ff fca3 	bl	27252 <uECC_vli_modMult_fast>
	uECC_vli_modInv(z, z, curve->p, num_words); /* 1 / (xP * Yb * (X1 - X0))*/
   2790c:	4653      	mov	r3, sl
   2790e:	464a      	mov	r2, r9
   27910:	a906      	add	r1, sp, #24
   27912:	4608      	mov	r0, r1
   27914:	f7ff fe1d 	bl	27552 <uECC_vli_modInv>
	/* yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, point + num_words, curve);
   27918:	4643      	mov	r3, r8
   2791a:	9a03      	ldr	r2, [sp, #12]
   2791c:	a906      	add	r1, sp, #24
   2791e:	4608      	mov	r0, r1
   27920:	f7ff fc97 	bl	27252 <uECC_vli_modMult_fast>
	/* Xb * yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, Rx[1 - nb], curve);
   27924:	4643      	mov	r3, r8
   27926:	4632      	mov	r2, r6
   27928:	a906      	add	r1, sp, #24
   2792a:	4608      	mov	r0, r1
   2792c:	f7ff fc91 	bl	27252 <uECC_vli_modMult_fast>
	/* End 1/Z calculation */

	XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   27930:	f8cd 8000 	str.w	r8, [sp]
   27934:	462b      	mov	r3, r5
   27936:	4632      	mov	r2, r6
   27938:	4621      	mov	r1, r4
   2793a:	4638      	mov	r0, r7
   2793c:	f7ff feff 	bl	2773e <XYcZ_add>
	apply_z(Rx[0], Ry[0], z, curve);
   27940:	4643      	mov	r3, r8
   27942:	aa06      	add	r2, sp, #24
   27944:	a90e      	add	r1, sp, #56	; 0x38
   27946:	a81e      	add	r0, sp, #120	; 0x78
   27948:	f7ff fea3 	bl	27692 <apply_z>

	uECC_vli_set(result, Rx[0], num_words);
   2794c:	4652      	mov	r2, sl
   2794e:	a91e      	add	r1, sp, #120	; 0x78
   27950:	9c04      	ldr	r4, [sp, #16]
   27952:	4620      	mov	r0, r4
   27954:	f7ff fa3f 	bl	26dd6 <uECC_vli_set>
	uECC_vli_set(result + num_words, Ry[0], num_words);
   27958:	4652      	mov	r2, sl
   2795a:	a90e      	add	r1, sp, #56	; 0x38
   2795c:	4623      	mov	r3, r4
   2795e:	445b      	add	r3, fp
   27960:	4618      	mov	r0, r3
   27962:	f7ff fa38 	bl	26dd6 <uECC_vli_set>
}
   27966:	b02f      	add	sp, #188	; 0xbc
   27968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002796c <regularize_k>:

uECC_word_t regularize_k(const uECC_word_t * const k, uECC_word_t *k0,
			 uECC_word_t *k1, uECC_Curve curve)
{
   2796c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27970:	460f      	mov	r7, r1
   27972:	4690      	mov	r8, r2

	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   27974:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
   27978:	f116 041f 	adds.w	r4, r6, #31
   2797c:	d414      	bmi.n	279a8 <regularize_k+0x3c>
   2797e:	f344 1447 	sbfx	r4, r4, #5, #8

	bitcount_t num_n_bits = curve->num_n_bits;

	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   27982:	f103 0524 	add.w	r5, r3, #36	; 0x24
   27986:	4623      	mov	r3, r4
   27988:	462a      	mov	r2, r5
   2798a:	4601      	mov	r1, r0
   2798c:	4638      	mov	r0, r7
   2798e:	f7ff fa67 	bl	26e60 <uECC_vli_add>
   27992:	b968      	cbnz	r0, 279b0 <regularize_k+0x44>
   27994:	ebb6 1f44 	cmp.w	r6, r4, lsl #5
   27998:	da14      	bge.n	279c4 <regularize_k+0x58>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
			     uECC_vli_testBit(k0, num_n_bits));
   2799a:	4631      	mov	r1, r6
   2799c:	4638      	mov	r0, r7
   2799e:	f7ff f9f6 	bl	26d8e <uECC_vli_testBit>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
   279a2:	b118      	cbz	r0, 279ac <regularize_k+0x40>
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   279a4:	2601      	movs	r6, #1
   279a6:	e004      	b.n	279b2 <regularize_k+0x46>
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   279a8:	341f      	adds	r4, #31
   279aa:	e7e8      	b.n	2797e <regularize_k+0x12>
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   279ac:	2600      	movs	r6, #0
   279ae:	e000      	b.n	279b2 <regularize_k+0x46>
   279b0:	2601      	movs	r6, #1

	uECC_vli_add(k1, k0, curve->n, num_n_words);
   279b2:	4623      	mov	r3, r4
   279b4:	462a      	mov	r2, r5
   279b6:	4639      	mov	r1, r7
   279b8:	4640      	mov	r0, r8
   279ba:	f7ff fa51 	bl	26e60 <uECC_vli_add>

	return carry;
}
   279be:	4630      	mov	r0, r6
   279c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   279c4:	2600      	movs	r6, #0
   279c6:	e7f4      	b.n	279b2 <regularize_k+0x46>

000279c8 <EccPoint_compute_public_key>:

uECC_word_t EccPoint_compute_public_key(uECC_word_t *result,
					uECC_word_t *private_key,
					uECC_Curve curve)
{
   279c8:	b530      	push	{r4, r5, lr}
   279ca:	b095      	sub	sp, #84	; 0x54
   279cc:	4605      	mov	r5, r0
   279ce:	4608      	mov	r0, r1
   279d0:	4614      	mov	r4, r2

	uECC_word_t tmp1[NUM_ECC_WORDS];
 	uECC_word_t tmp2[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {tmp1, tmp2};
   279d2:	a90c      	add	r1, sp, #48	; 0x30
   279d4:	9102      	str	r1, [sp, #8]
   279d6:	aa04      	add	r2, sp, #16
   279d8:	9203      	str	r2, [sp, #12]
	uECC_word_t carry;

	/* Regularize the bitcount for the private key so that attackers cannot
	 * use a side channel attack to learn the number of leading zeros. */
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   279da:	4623      	mov	r3, r4
   279dc:	f7ff ffc6 	bl	2796c <regularize_k>

	EccPoint_mult(result, curve->G, p2[!carry], 0, curve->num_n_bits + 1, curve);
   279e0:	fab0 f080 	clz	r0, r0
   279e4:	0940      	lsrs	r0, r0, #5
   279e6:	ab14      	add	r3, sp, #80	; 0x50
   279e8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   279ec:	f850 2c48 	ldr.w	r2, [r0, #-72]
   279f0:	8863      	ldrh	r3, [r4, #2]
   279f2:	3301      	adds	r3, #1
   279f4:	9401      	str	r4, [sp, #4]
   279f6:	b21b      	sxth	r3, r3
   279f8:	9300      	str	r3, [sp, #0]
   279fa:	2300      	movs	r3, #0
   279fc:	f104 0144 	add.w	r1, r4, #68	; 0x44
   27a00:	4628      	mov	r0, r5
   27a02:	f7ff ff01 	bl	27808 <EccPoint_mult>

	if (EccPoint_isZero(result, curve)) {
   27a06:	4621      	mov	r1, r4
   27a08:	4628      	mov	r0, r5
   27a0a:	f7ff fe3b 	bl	27684 <EccPoint_isZero>
   27a0e:	b910      	cbnz	r0, 27a16 <EccPoint_compute_public_key+0x4e>
		return 0;
	}
	return 1;
   27a10:	2001      	movs	r0, #1
}
   27a12:	b015      	add	sp, #84	; 0x54
   27a14:	bd30      	pop	{r4, r5, pc}
		return 0;
   27a16:	2000      	movs	r0, #0
   27a18:	e7fb      	b.n	27a12 <EccPoint_compute_public_key+0x4a>

00027a1a <uECC_vli_nativeToBytes>:

/* Converts an integer in uECC native format to big-endian bytes. */
void uECC_vli_nativeToBytes(uint8_t *bytes, int num_bytes,
			    const unsigned int *native)
{
   27a1a:	b430      	push	{r4, r5}
	wordcount_t i;
	for (i = 0; i < num_bytes; ++i) {
   27a1c:	2400      	movs	r4, #0
   27a1e:	e00c      	b.n	27a3a <uECC_vli_nativeToBytes+0x20>
		unsigned b = num_bytes - 1 - i;
   27a20:	1e4b      	subs	r3, r1, #1
   27a22:	1b1b      	subs	r3, r3, r4
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
   27a24:	f023 0503 	bic.w	r5, r3, #3
   27a28:	5955      	ldr	r5, [r2, r5]
   27a2a:	f003 0303 	and.w	r3, r3, #3
   27a2e:	00db      	lsls	r3, r3, #3
   27a30:	fa25 f303 	lsr.w	r3, r5, r3
   27a34:	5503      	strb	r3, [r0, r4]
	for (i = 0; i < num_bytes; ++i) {
   27a36:	3401      	adds	r4, #1
   27a38:	b264      	sxtb	r4, r4
   27a3a:	428c      	cmp	r4, r1
   27a3c:	dbf0      	blt.n	27a20 <uECC_vli_nativeToBytes+0x6>
	}
}
   27a3e:	bc30      	pop	{r4, r5}
   27a40:	4770      	bx	lr

00027a42 <uECC_vli_bytesToNative>:

/* Converts big-endian bytes to an integer in uECC native format. */
void uECC_vli_bytesToNative(unsigned int *native, const uint8_t *bytes,
			    int num_bytes)
{
   27a42:	b570      	push	{r4, r5, r6, lr}
   27a44:	4605      	mov	r5, r0
   27a46:	460e      	mov	r6, r1
   27a48:	4614      	mov	r4, r2
	wordcount_t i;
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   27a4a:	1cd1      	adds	r1, r2, #3
   27a4c:	d406      	bmi.n	27a5c <uECC_vli_bytesToNative+0x1a>
   27a4e:	f341 0187 	sbfx	r1, r1, #2, #8
   27a52:	4628      	mov	r0, r5
   27a54:	f7ff f97c 	bl	26d50 <uECC_vli_clear>
	for (i = 0; i < num_bytes; ++i) {
   27a58:	2200      	movs	r2, #0
   27a5a:	e010      	b.n	27a7e <uECC_vli_bytesToNative+0x3c>
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   27a5c:	3103      	adds	r1, #3
   27a5e:	e7f6      	b.n	27a4e <uECC_vli_bytesToNative+0xc>
		unsigned b = num_bytes - 1 - i;
   27a60:	1e63      	subs	r3, r4, #1
   27a62:	1a9b      	subs	r3, r3, r2
		native[b / uECC_WORD_SIZE] |=
   27a64:	f023 0003 	bic.w	r0, r3, #3
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
   27a68:	5cb1      	ldrb	r1, [r6, r2]
   27a6a:	f003 0303 	and.w	r3, r3, #3
   27a6e:	00db      	lsls	r3, r3, #3
   27a70:	fa01 f303 	lsl.w	r3, r1, r3
		native[b / uECC_WORD_SIZE] |=
   27a74:	5829      	ldr	r1, [r5, r0]
   27a76:	4319      	orrs	r1, r3
   27a78:	5029      	str	r1, [r5, r0]
	for (i = 0; i < num_bytes; ++i) {
   27a7a:	3201      	adds	r2, #1
   27a7c:	b252      	sxtb	r2, r2
   27a7e:	42a2      	cmp	r2, r4
   27a80:	dbee      	blt.n	27a60 <uECC_vli_bytesToNative+0x1e>
  	}
}
   27a82:	bd70      	pop	{r4, r5, r6, pc}

00027a84 <uECC_valid_point>:
	return 0;
}


int uECC_valid_point(const uECC_word_t *point, uECC_Curve curve)
{
   27a84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27a88:	b090      	sub	sp, #64	; 0x40
   27a8a:	4606      	mov	r6, r0
   27a8c:	460c      	mov	r4, r1
	uECC_word_t tmp1[NUM_ECC_WORDS];
	uECC_word_t tmp2[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   27a8e:	f991 5000 	ldrsb.w	r5, [r1]

	/* The point at infinity is invalid. */
	if (EccPoint_isZero(point, curve)) {
   27a92:	f7ff fdf7 	bl	27684 <EccPoint_isZero>
   27a96:	bb40      	cbnz	r0, 27aea <uECC_valid_point+0x66>
		return -1;
	}

	/* x and y must be smaller than p. */
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   27a98:	1d27      	adds	r7, r4, #4
   27a9a:	462a      	mov	r2, r5
   27a9c:	4631      	mov	r1, r6
   27a9e:	4638      	mov	r0, r7
   27aa0:	f7ff f9a8 	bl	26df4 <uECC_vli_cmp_unsafe>
   27aa4:	2801      	cmp	r0, #1
   27aa6:	d123      	bne.n	27af0 <uECC_valid_point+0x6c>
		uECC_vli_cmp_unsafe(curve->p, point + num_words, num_words) != 1) {
   27aa8:	eb06 0885 	add.w	r8, r6, r5, lsl #2
   27aac:	462a      	mov	r2, r5
   27aae:	4641      	mov	r1, r8
   27ab0:	4638      	mov	r0, r7
   27ab2:	f7ff f99f 	bl	26df4 <uECC_vli_cmp_unsafe>
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   27ab6:	2801      	cmp	r0, #1
   27ab8:	d11d      	bne.n	27af6 <uECC_valid_point+0x72>
		return -2;
	}

	uECC_vli_modSquare_fast(tmp1, point + num_words, curve);
   27aba:	4622      	mov	r2, r4
   27abc:	4641      	mov	r1, r8
   27abe:	a808      	add	r0, sp, #32
   27ac0:	f7ff fbd7 	bl	27272 <uECC_vli_modSquare_fast>
	curve->x_side(tmp2, point, curve); /* tmp2 = x^3 + ax + b */
   27ac4:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   27ac8:	4622      	mov	r2, r4
   27aca:	4631      	mov	r1, r6
   27acc:	4668      	mov	r0, sp
   27ace:	4798      	blx	r3

	/* Make sure that y^2 == x^3 + ax + b */
	if (uECC_vli_equal(tmp1, tmp2, num_words) != 0)
   27ad0:	462a      	mov	r2, r5
   27ad2:	4669      	mov	r1, sp
   27ad4:	a808      	add	r0, sp, #32
   27ad6:	f7ff f9a7 	bl	26e28 <uECC_vli_equal>
   27ada:	b918      	cbnz	r0, 27ae4 <uECC_valid_point+0x60>
		return -3;

	return 0;
   27adc:	2000      	movs	r0, #0
}
   27ade:	b010      	add	sp, #64	; 0x40
   27ae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -3;
   27ae4:	f06f 0002 	mvn.w	r0, #2
   27ae8:	e7f9      	b.n	27ade <uECC_valid_point+0x5a>
		return -1;
   27aea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   27aee:	e7f6      	b.n	27ade <uECC_valid_point+0x5a>
		return -2;
   27af0:	f06f 0001 	mvn.w	r0, #1
   27af4:	e7f3      	b.n	27ade <uECC_valid_point+0x5a>
   27af6:	f06f 0001 	mvn.w	r0, #1
   27afa:	e7f0      	b.n	27ade <uECC_valid_point+0x5a>

00027afc <uECC_valid_public_key>:

int uECC_valid_public_key(const uint8_t *public_key, uECC_Curve curve)
{
   27afc:	b530      	push	{r4, r5, lr}
   27afe:	b091      	sub	sp, #68	; 0x44
   27b00:	4605      	mov	r5, r0
   27b02:	460c      	mov	r4, r1

	uECC_word_t _public[NUM_ECC_WORDS * 2];

	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   27b04:	f991 2001 	ldrsb.w	r2, [r1, #1]
   27b08:	4601      	mov	r1, r0
   27b0a:	4668      	mov	r0, sp
   27b0c:	f7ff ff99 	bl	27a42 <uECC_vli_bytesToNative>
	uECC_vli_bytesToNative(
	_public + curve->num_words,
   27b10:	f994 0000 	ldrsb.w	r0, [r4]
	public_key + curve->num_bytes,
   27b14:	f994 1001 	ldrsb.w	r1, [r4, #1]
	uECC_vli_bytesToNative(
   27b18:	460a      	mov	r2, r1
   27b1a:	4429      	add	r1, r5
   27b1c:	eb0d 0080 	add.w	r0, sp, r0, lsl #2
   27b20:	f7ff ff8f 	bl	27a42 <uECC_vli_bytesToNative>
	curve->num_bytes);

	if (uECC_vli_cmp_unsafe(_public, curve->G, NUM_ECC_WORDS * 2) == 0) {
   27b24:	2210      	movs	r2, #16
   27b26:	f104 0144 	add.w	r1, r4, #68	; 0x44
   27b2a:	4668      	mov	r0, sp
   27b2c:	f7ff f962 	bl	26df4 <uECC_vli_cmp_unsafe>
   27b30:	b128      	cbz	r0, 27b3e <uECC_valid_public_key+0x42>
		return -4;
	}

	return uECC_valid_point(_public, curve);
   27b32:	4621      	mov	r1, r4
   27b34:	4668      	mov	r0, sp
   27b36:	f7ff ffa5 	bl	27a84 <uECC_valid_point>
}
   27b3a:	b011      	add	sp, #68	; 0x44
   27b3c:	bd30      	pop	{r4, r5, pc}
		return -4;
   27b3e:	f06f 0003 	mvn.w	r0, #3
   27b42:	e7fa      	b.n	27b3a <uECC_valid_public_key+0x3e>

00027b44 <uECC_make_key>:
	}
	return 0;
}

int uECC_make_key(uint8_t *public_key, uint8_t *private_key, uECC_Curve curve)
{
   27b44:	b5f0      	push	{r4, r5, r6, r7, lr}
   27b46:	b0a9      	sub	sp, #164	; 0xa4
   27b48:	4606      	mov	r6, r0
   27b4a:	460f      	mov	r7, r1
   27b4c:	4614      	mov	r4, r2
	uECC_word_t _random[NUM_ECC_WORDS * 2];
	uECC_word_t _private[NUM_ECC_WORDS];
	uECC_word_t _public[NUM_ECC_WORDS * 2];
	uECC_word_t tries;

	for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
   27b4e:	2500      	movs	r5, #0
   27b50:	e00c      	b.n	27b6c <uECC_make_key+0x28>
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
        		return 0;
		}

		/* computing modular reduction of _random (see FIPS 186.4 B.4.1): */
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   27b52:	f343 1347 	sbfx	r3, r3, #5, #8
   27b56:	a918      	add	r1, sp, #96	; 0x60
   27b58:	a810      	add	r0, sp, #64	; 0x40
   27b5a:	f7ff fadf 	bl	2711c <uECC_vli_mmod>

		/* Computing public-key from private: */
		if (EccPoint_compute_public_key(_public, _private, curve)) {
   27b5e:	4622      	mov	r2, r4
   27b60:	a910      	add	r1, sp, #64	; 0x40
   27b62:	4668      	mov	r0, sp
   27b64:	f7ff ff30 	bl	279c8 <EccPoint_compute_public_key>
   27b68:	b998      	cbnz	r0, 27b92 <uECC_make_key+0x4e>
	for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
   27b6a:	3501      	adds	r5, #1
   27b6c:	2d3f      	cmp	r5, #63	; 0x3f
   27b6e:	d82f      	bhi.n	27bd0 <uECC_make_key+0x8c>
		uECC_RNG_Function rng_function = uECC_get_rng();
   27b70:	f7ff f8e8 	bl	26d44 <uECC_get_rng>
		if (!rng_function ||
   27b74:	4603      	mov	r3, r0
   27b76:	b368      	cbz	r0, 27bd4 <uECC_make_key+0x90>
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
   27b78:	2140      	movs	r1, #64	; 0x40
   27b7a:	a818      	add	r0, sp, #96	; 0x60
   27b7c:	4798      	blx	r3
		if (!rng_function ||
   27b7e:	4603      	mov	r3, r0
   27b80:	b348      	cbz	r0, 27bd6 <uECC_make_key+0x92>
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   27b82:	f104 0224 	add.w	r2, r4, #36	; 0x24
   27b86:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
   27b8a:	331f      	adds	r3, #31
   27b8c:	d5e1      	bpl.n	27b52 <uECC_make_key+0xe>
   27b8e:	331f      	adds	r3, #31
   27b90:	e7df      	b.n	27b52 <uECC_make_key+0xe>

			/* Converting buffers to correct bit order: */
			uECC_vli_nativeToBytes(private_key,
					       BITS_TO_BYTES(curve->num_n_bits),
   27b92:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
   27b96:	3307      	adds	r3, #7
			uECC_vli_nativeToBytes(private_key,
   27b98:	4619      	mov	r1, r3
   27b9a:	2b00      	cmp	r3, #0
   27b9c:	db16      	blt.n	27bcc <uECC_make_key+0x88>
   27b9e:	aa10      	add	r2, sp, #64	; 0x40
   27ba0:	10c9      	asrs	r1, r1, #3
   27ba2:	4638      	mov	r0, r7
   27ba4:	f7ff ff39 	bl	27a1a <uECC_vli_nativeToBytes>
					       _private);
			uECC_vli_nativeToBytes(public_key,
   27ba8:	466a      	mov	r2, sp
   27baa:	f994 1001 	ldrsb.w	r1, [r4, #1]
   27bae:	4630      	mov	r0, r6
   27bb0:	f7ff ff33 	bl	27a1a <uECC_vli_nativeToBytes>
					       curve->num_bytes,
					       _public);
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   27bb4:	f994 0001 	ldrsb.w	r0, [r4, #1]
 					       curve->num_bytes,
					       _public + curve->num_words);
   27bb8:	f994 2000 	ldrsb.w	r2, [r4]
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   27bbc:	eb0d 0282 	add.w	r2, sp, r2, lsl #2
   27bc0:	4601      	mov	r1, r0
   27bc2:	4430      	add	r0, r6
   27bc4:	f7ff ff29 	bl	27a1a <uECC_vli_nativeToBytes>

			/* erasing temporary buffer that stored secret: */
			memset(_private, 0, NUM_ECC_BYTES);

      			return 1;
   27bc8:	2301      	movs	r3, #1
   27bca:	e004      	b.n	27bd6 <uECC_make_key+0x92>
			uECC_vli_nativeToBytes(private_key,
   27bcc:	1dd9      	adds	r1, r3, #7
   27bce:	e7e6      	b.n	27b9e <uECC_make_key+0x5a>
    		}
  	}
	return 0;
   27bd0:	2300      	movs	r3, #0
   27bd2:	e000      	b.n	27bd6 <uECC_make_key+0x92>
        		return 0;
   27bd4:	2300      	movs	r3, #0
}
   27bd6:	4618      	mov	r0, r3
   27bd8:	b029      	add	sp, #164	; 0xa4
   27bda:	bdf0      	pop	{r4, r5, r6, r7, pc}

00027bdc <uECC_shared_secret>:

int uECC_shared_secret(const uint8_t *public_key, const uint8_t *private_key,
		       uint8_t *secret, uECC_Curve curve)
{
   27bdc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   27be0:	b0a5      	sub	sp, #148	; 0x94
   27be2:	4607      	mov	r7, r0
   27be4:	4690      	mov	r8, r2
   27be6:	461c      	mov	r4, r3

	uECC_word_t _public[NUM_ECC_WORDS * 2];
	uECC_word_t _private[NUM_ECC_WORDS];

	uECC_word_t tmp[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {_private, tmp};
   27be8:	ab0c      	add	r3, sp, #48	; 0x30
   27bea:	9302      	str	r3, [sp, #8]
   27bec:	ab04      	add	r3, sp, #16
   27bee:	9303      	str	r3, [sp, #12]
	uECC_word_t *initial_Z = 0;
	uECC_word_t carry;
	wordcount_t num_words = curve->num_words;
   27bf0:	f994 9000 	ldrsb.w	r9, [r4]
	wordcount_t num_bytes = curve->num_bytes;
   27bf4:	f994 6001 	ldrsb.w	r6, [r4, #1]
	int r;

	/* Converting buffers to correct bit order: */
	uECC_vli_bytesToNative(_private,
      			       private_key,
			       BITS_TO_BYTES(curve->num_n_bits));
   27bf8:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
	uECC_vli_bytesToNative(_private,
   27bfc:	3207      	adds	r2, #7
   27bfe:	d449      	bmi.n	27c94 <uECC_shared_secret+0xb8>
   27c00:	ad0c      	add	r5, sp, #48	; 0x30
   27c02:	10d2      	asrs	r2, r2, #3
   27c04:	4628      	mov	r0, r5
   27c06:	f7ff ff1c 	bl	27a42 <uECC_vli_bytesToNative>
	uECC_vli_bytesToNative(_public,
   27c0a:	4632      	mov	r2, r6
   27c0c:	4639      	mov	r1, r7
   27c0e:	a814      	add	r0, sp, #80	; 0x50
   27c10:	f7ff ff17 	bl	27a42 <uECC_vli_bytesToNative>
      			       public_key,
			       num_bytes);
	uECC_vli_bytesToNative(_public + num_words,
   27c14:	4632      	mov	r2, r6
   27c16:	19b9      	adds	r1, r7, r6
   27c18:	ab14      	add	r3, sp, #80	; 0x50
   27c1a:	eb03 0089 	add.w	r0, r3, r9, lsl #2
   27c1e:	f7ff ff10 	bl	27a42 <uECC_vli_bytesToNative>
			       public_key + num_bytes,
			       num_bytes);

	/* Regularize the bitcount for the private key so that attackers cannot use a
	 * side channel attack to learn the number of leading zeros. */
	carry = regularize_k(_private, _private, tmp, curve);
   27c22:	af04      	add	r7, sp, #16
   27c24:	4623      	mov	r3, r4
   27c26:	463a      	mov	r2, r7
   27c28:	4629      	mov	r1, r5
   27c2a:	4628      	mov	r0, r5
   27c2c:	f7ff fe9e 	bl	2796c <regularize_k>
			goto clear_and_out;
    		}
    		initial_Z = p2[carry];
  	}

	EccPoint_mult(_public, _public, p2[!carry], initial_Z, curve->num_n_bits + 1,
   27c30:	fab0 f080 	clz	r0, r0
   27c34:	0940      	lsrs	r0, r0, #5
   27c36:	ab24      	add	r3, sp, #144	; 0x90
   27c38:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   27c3c:	f850 2c88 	ldr.w	r2, [r0, #-136]
   27c40:	8863      	ldrh	r3, [r4, #2]
   27c42:	3301      	adds	r3, #1
   27c44:	9401      	str	r4, [sp, #4]
   27c46:	b21b      	sxth	r3, r3
   27c48:	9300      	str	r3, [sp, #0]
   27c4a:	2300      	movs	r3, #0
   27c4c:	a914      	add	r1, sp, #80	; 0x50
   27c4e:	4608      	mov	r0, r1
   27c50:	f7ff fdda 	bl	27808 <EccPoint_mult>
		      curve);

	uECC_vli_nativeToBytes(secret, num_bytes, _public);
   27c54:	aa14      	add	r2, sp, #80	; 0x50
   27c56:	4631      	mov	r1, r6
   27c58:	4640      	mov	r0, r8
   27c5a:	f7ff fede 	bl	27a1a <uECC_vli_nativeToBytes>
	r = !EccPoint_isZero(_public, curve);
   27c5e:	4621      	mov	r1, r4
   27c60:	a814      	add	r0, sp, #80	; 0x50
   27c62:	f7ff fd0f 	bl	27684 <EccPoint_isZero>
   27c66:	fab0 f680 	clz	r6, r0
   27c6a:	0976      	lsrs	r6, r6, #5

clear_and_out:
	/* erasing temporary buffer used to store secret: */
	memset(p2, 0, sizeof(p2));
   27c6c:	ab02      	add	r3, sp, #8
   27c6e:	2400      	movs	r4, #0
   27c70:	9402      	str	r4, [sp, #8]
   27c72:	9403      	str	r4, [sp, #12]
	__asm__ __volatile__("" :: "g"(p2) : "memory");
	memset(tmp, 0, sizeof(tmp));
   27c74:	f04f 0820 	mov.w	r8, #32
   27c78:	4642      	mov	r2, r8
   27c7a:	4621      	mov	r1, r4
   27c7c:	4638      	mov	r0, r7
   27c7e:	f7e6 fc1f 	bl	e4c0 <memset>
	__asm__ __volatile__("" :: "g"(tmp) : "memory");
	memset(_private, 0, sizeof(_private));
   27c82:	4642      	mov	r2, r8
   27c84:	4621      	mov	r1, r4
   27c86:	4628      	mov	r0, r5
   27c88:	f7e6 fc1a 	bl	e4c0 <memset>
	__asm__ __volatile__("" :: "g"(_private) : "memory");

	return r;
}
   27c8c:	4630      	mov	r0, r6
   27c8e:	b025      	add	sp, #148	; 0x94
   27c90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uECC_vli_bytesToNative(_private,
   27c94:	3207      	adds	r2, #7
   27c96:	e7b3      	b.n	27c00 <uECC_shared_secret+0x24>

00027c98 <_copy>:
#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
	if (from_len <= to_len) {
   27c98:	428b      	cmp	r3, r1
   27c9a:	d901      	bls.n	27ca0 <_copy+0x8>
		(void)memcpy(to, from, from_len);
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
   27c9c:	2000      	movs	r0, #0
	}
}
   27c9e:	4770      	bx	lr
{
   27ca0:	b510      	push	{r4, lr}
   27ca2:	461c      	mov	r4, r3
   27ca4:	4611      	mov	r1, r2
		(void)memcpy(to, from, from_len);
   27ca6:	461a      	mov	r2, r3
   27ca8:	f7e6 fbe2 	bl	e470 <memcpy>
		return from_len;
   27cac:	4620      	mov	r0, r4
}
   27cae:	bd10      	pop	{r4, pc}

00027cb0 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
   27cb0:	b508      	push	{r3, lr}
	(void)memset(to, val, len);
   27cb2:	f7e6 fc05 	bl	e4c0 <memset>
}
   27cb6:	bd08      	pop	{r3, pc}

00027cb8 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   27cb8:	09c3      	lsrs	r3, r0, #7
   27cba:	005a      	lsls	r2, r3, #1
   27cbc:	4413      	add	r3, r2
   27cbe:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   27cc2:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   27cc6:	b2c0      	uxtb	r0, r0
   27cc8:	4770      	bx	lr

00027cca <cbuf_buf_reader_get8>:

static uint8_t
cbuf_buf_reader_get8(struct cbor_decoder_reader *d, int offset)
{
    struct cbor_buf_reader *cb = (struct cbor_buf_reader *) d;
    return cb->buffer[offset];
   27cca:	69c3      	ldr	r3, [r0, #28]
}
   27ccc:	5c58      	ldrb	r0, [r3, r1]
   27cce:	4770      	bx	lr

00027cd0 <cbor_buf_reader_cpy>:
}

static uintptr_t
cbor_buf_reader_cpy(struct cbor_decoder_reader *d, char *dst, int src_offset,
                    size_t len)
{
   27cd0:	b510      	push	{r4, lr}
   27cd2:	460c      	mov	r4, r1
    struct cbor_buf_reader *cb = (struct cbor_buf_reader *) d;
    return (uintptr_t) memcpy(dst, cb->buffer + src_offset, len);
   27cd4:	69c1      	ldr	r1, [r0, #28]
   27cd6:	4411      	add	r1, r2
   27cd8:	461a      	mov	r2, r3
   27cda:	4620      	mov	r0, r4
   27cdc:	f7e6 fbc8 	bl	e470 <memcpy>
}
   27ce0:	bd10      	pop	{r4, pc}

00027ce2 <cbor_buf_reader_cmp>:
{
   27ce2:	b510      	push	{r4, lr}
   27ce4:	460c      	mov	r4, r1
    return memcmp(dst, cb->buffer + src_offset, len) == 0;
   27ce6:	69c1      	ldr	r1, [r0, #28]
   27ce8:	4411      	add	r1, r2
   27cea:	461a      	mov	r2, r3
   27cec:	4620      	mov	r0, r4
   27cee:	f7e6 fb9b 	bl	e428 <memcmp>
}
   27cf2:	fab0 f080 	clz	r0, r0
   27cf6:	0940      	lsrs	r0, r0, #5
   27cf8:	bd10      	pop	{r4, pc}

00027cfa <cbuf_buf_reader_get64>:
{
   27cfa:	b082      	sub	sp, #8
    return get64(cb->buffer + offset);
   27cfc:	69c3      	ldr	r3, [r0, #28]
   27cfe:	4419      	add	r1, r3
}

static inline uint64_t get64(const uint8_t *ptr)
{
    uint64_t result;
    memcpy(&result, ptr, sizeof(result));
   27d00:	466b      	mov	r3, sp
   27d02:	6808      	ldr	r0, [r1, #0]
   27d04:	6849      	ldr	r1, [r1, #4]
   27d06:	c303      	stmia	r3!, {r0, r1}
}
   27d08:	ba08      	rev	r0, r1
   27d0a:	9900      	ldr	r1, [sp, #0]
   27d0c:	ba09      	rev	r1, r1
   27d0e:	b002      	add	sp, #8
   27d10:	4770      	bx	lr

00027d12 <cbuf_buf_reader_get32>:
    val = get32(cb->buffer + offset);
   27d12:	69c3      	ldr	r3, [r0, #28]
    memcpy(&result, ptr, sizeof(result));
   27d14:	5858      	ldr	r0, [r3, r1]
}
   27d16:	ba00      	rev	r0, r0
   27d18:	4770      	bx	lr

00027d1a <cbuf_buf_reader_get16>:
    return get16(cb->buffer + offset);
   27d1a:	69c3      	ldr	r3, [r0, #28]
    memcpy(&result, ptr, sizeof(result));
   27d1c:	5a58      	ldrh	r0, [r3, r1]
    return cbor_ntohs(result);
   27d1e:	ba40      	rev16	r0, r0
}
   27d20:	b280      	uxth	r0, r0
   27d22:	4770      	bx	lr

00027d24 <cbor_buf_reader_init>:

void
cbor_buf_reader_init(struct cbor_buf_reader *cb, const uint8_t *buffer,
                     size_t data)
{
    cb->buffer = buffer;
   27d24:	61c1      	str	r1, [r0, #28]
    cb->r.get8 = &cbuf_buf_reader_get8;
   27d26:	4b07      	ldr	r3, [pc, #28]	; (27d44 <cbor_buf_reader_init+0x20>)
   27d28:	6003      	str	r3, [r0, #0]
    cb->r.get16 = &cbuf_buf_reader_get16;
   27d2a:	4b07      	ldr	r3, [pc, #28]	; (27d48 <cbor_buf_reader_init+0x24>)
   27d2c:	6043      	str	r3, [r0, #4]
    cb->r.get32 = &cbuf_buf_reader_get32;
   27d2e:	4b07      	ldr	r3, [pc, #28]	; (27d4c <cbor_buf_reader_init+0x28>)
   27d30:	6083      	str	r3, [r0, #8]
    cb->r.get64 = &cbuf_buf_reader_get64;
   27d32:	4b07      	ldr	r3, [pc, #28]	; (27d50 <cbor_buf_reader_init+0x2c>)
   27d34:	60c3      	str	r3, [r0, #12]
    cb->r.cmp = &cbor_buf_reader_cmp;
   27d36:	4b07      	ldr	r3, [pc, #28]	; (27d54 <cbor_buf_reader_init+0x30>)
   27d38:	6103      	str	r3, [r0, #16]
    cb->r.cpy = &cbor_buf_reader_cpy;
   27d3a:	4b07      	ldr	r3, [pc, #28]	; (27d58 <cbor_buf_reader_init+0x34>)
   27d3c:	6143      	str	r3, [r0, #20]
    cb->r.message_size = data;
   27d3e:	6182      	str	r2, [r0, #24]
}
   27d40:	4770      	bx	lr
   27d42:	bf00      	nop
   27d44:	00027ccb 	.word	0x00027ccb
   27d48:	00027d1b 	.word	0x00027d1b
   27d4c:	00027d13 	.word	0x00027d13
   27d50:	00027cfb 	.word	0x00027cfb
   27d54:	00027ce3 	.word	0x00027ce3
   27d58:	00027cd1 	.word	0x00027cd1

00027d5c <is_fixed_type>:
    return CborNoError;
}

static bool is_fixed_type(uint8_t type)
{
    return type != CborTextStringType && type != CborByteStringType && type != CborArrayType &&
   27d5c:	2860      	cmp	r0, #96	; 0x60
   27d5e:	d009      	beq.n	27d74 <is_fixed_type+0x18>
   27d60:	2840      	cmp	r0, #64	; 0x40
   27d62:	d009      	beq.n	27d78 <is_fixed_type+0x1c>
   27d64:	2880      	cmp	r0, #128	; 0x80
   27d66:	d009      	beq.n	27d7c <is_fixed_type+0x20>
   27d68:	28a0      	cmp	r0, #160	; 0xa0
   27d6a:	d001      	beq.n	27d70 <is_fixed_type+0x14>
   27d6c:	2001      	movs	r0, #1
           type != CborMapType;
}
   27d6e:	4770      	bx	lr
    return type != CborTextStringType && type != CborByteStringType && type != CborArrayType &&
   27d70:	2000      	movs	r0, #0
   27d72:	4770      	bx	lr
   27d74:	2000      	movs	r0, #0
   27d76:	4770      	bx	lr
   27d78:	2000      	movs	r0, #0
   27d7a:	4770      	bx	lr
   27d7c:	2000      	movs	r0, #0
   27d7e:	4770      	bx	lr

00027d80 <iterate_noop>:
    (void)d;
    (void)dst;
    (void)src_offset;
    (void)len;
    return true;
}
   27d80:	2001      	movs	r0, #1
   27d82:	4770      	bx	lr

00027d84 <preparse_value>:
{
   27d84:	b570      	push	{r4, r5, r6, lr}
    const CborParser *parser = it->parser;
   27d86:	6806      	ldr	r6, [r0, #0]
    it->type = CborInvalidType;
   27d88:	23ff      	movs	r3, #255	; 0xff
   27d8a:	7383      	strb	r3, [r0, #14]
    if (it->offset == parser->end)
   27d8c:	6841      	ldr	r1, [r0, #4]
   27d8e:	6873      	ldr	r3, [r6, #4]
   27d90:	4299      	cmp	r1, r3
   27d92:	f000 808f 	beq.w	27eb4 <preparse_value+0x130>
   27d96:	4604      	mov	r4, r0
    uint8_t descriptor = parser->d->get8(parser->d, it->offset);
   27d98:	6830      	ldr	r0, [r6, #0]
   27d9a:	6803      	ldr	r3, [r0, #0]
   27d9c:	4798      	blx	r3
    uint8_t type = descriptor & MajorTypeMask;
   27d9e:	f000 05e0 	and.w	r5, r0, #224	; 0xe0
    it->type = type;
   27da2:	73a5      	strb	r5, [r4, #14]
    it->flags = 0;
   27da4:	2300      	movs	r3, #0
   27da6:	73e3      	strb	r3, [r4, #15]
    it->extra = (descriptor &= SmallValueMask);
   27da8:	f000 001f 	and.w	r0, r0, #31
   27dac:	81a0      	strh	r0, [r4, #12]
    if (descriptor > Value64Bit) {
   27dae:	281b      	cmp	r0, #27
   27db0:	d91d      	bls.n	27dee <preparse_value+0x6a>
        if (unlikely(descriptor != IndefiniteLength))
   27db2:	281f      	cmp	r0, #31
   27db4:	d10b      	bne.n	27dce <preparse_value+0x4a>
        if (likely(!is_fixed_type(type))) {
   27db6:	4628      	mov	r0, r5
   27db8:	f7ff ffd0 	bl	27d5c <is_fixed_type>
   27dbc:	f080 0001 	eor.w	r0, r0, #1
   27dc0:	f010 0fff 	tst.w	r0, #255	; 0xff
   27dc4:	d00b      	beq.n	27dde <preparse_value+0x5a>
            it->flags |= CborIteratorFlag_UnknownLength;
   27dc6:	2304      	movs	r3, #4
   27dc8:	73e3      	strb	r3, [r4, #15]
            return CborNoError;
   27dca:	2000      	movs	r0, #0
}
   27dcc:	bd70      	pop	{r4, r5, r6, pc}
            return type == CborSimpleType ? CborErrorUnknownType : CborErrorIllegalNumber;
   27dce:	2de0      	cmp	r5, #224	; 0xe0
   27dd0:	d002      	beq.n	27dd8 <preparse_value+0x54>
   27dd2:	f240 1005 	movw	r0, #261	; 0x105
   27dd6:	e7f9      	b.n	27dcc <preparse_value+0x48>
   27dd8:	f240 1003 	movw	r0, #259	; 0x103
   27ddc:	e7f6      	b.n	27dcc <preparse_value+0x48>
        return type == CborSimpleType ? CborErrorUnexpectedBreak : CborErrorIllegalNumber;
   27dde:	2de0      	cmp	r5, #224	; 0xe0
   27de0:	d002      	beq.n	27de8 <preparse_value+0x64>
   27de2:	f240 1005 	movw	r0, #261	; 0x105
   27de6:	e7f1      	b.n	27dcc <preparse_value+0x48>
   27de8:	f44f 7081 	mov.w	r0, #258	; 0x102
   27dec:	e7ee      	b.n	27dcc <preparse_value+0x48>
    size_t bytesNeeded = descriptor < Value8Bit ? 0 : (1 << (descriptor - Value8Bit));
   27dee:	2817      	cmp	r0, #23
   27df0:	d919      	bls.n	27e26 <preparse_value+0xa2>
   27df2:	f1a0 0218 	sub.w	r2, r0, #24
   27df6:	2301      	movs	r3, #1
   27df8:	4093      	lsls	r3, r2
    if (bytesNeeded + 1 > (size_t)(parser->end - it->offset))
   27dfa:	3301      	adds	r3, #1
   27dfc:	6872      	ldr	r2, [r6, #4]
   27dfe:	6861      	ldr	r1, [r4, #4]
   27e00:	1a52      	subs	r2, r2, r1
   27e02:	4293      	cmp	r3, r2
   27e04:	d859      	bhi.n	27eba <preparse_value+0x136>
    uint8_t majortype = type >> MajorTypeShift;
   27e06:	096d      	lsrs	r5, r5, #5
    if (majortype == NegativeIntegerType) {
   27e08:	2d01      	cmp	r5, #1
   27e0a:	d00e      	beq.n	27e2a <preparse_value+0xa6>
    } else if (majortype == SimpleTypesType) {
   27e0c:	2d07      	cmp	r5, #7
   27e0e:	d011      	beq.n	27e34 <preparse_value+0xb0>
    if (descriptor < Value8Bit)
   27e10:	2817      	cmp	r0, #23
   27e12:	d957      	bls.n	27ec4 <preparse_value+0x140>
    if (descriptor == Value8Bit)
   27e14:	2818      	cmp	r0, #24
   27e16:	d13e      	bne.n	27e96 <preparse_value+0x112>
        it->extra = parser->d->get8(parser->d, it->offset + 1);
   27e18:	6830      	ldr	r0, [r6, #0]
   27e1a:	6803      	ldr	r3, [r0, #0]
   27e1c:	3101      	adds	r1, #1
   27e1e:	4798      	blx	r3
   27e20:	81a0      	strh	r0, [r4, #12]
    return CborNoError;
   27e22:	2000      	movs	r0, #0
   27e24:	e7d2      	b.n	27dcc <preparse_value+0x48>
    size_t bytesNeeded = descriptor < Value8Bit ? 0 : (1 << (descriptor - Value8Bit));
   27e26:	2300      	movs	r3, #0
   27e28:	e7e7      	b.n	27dfa <preparse_value+0x76>
        it->flags |= CborIteratorFlag_NegativeInteger;
   27e2a:	2302      	movs	r3, #2
   27e2c:	73e3      	strb	r3, [r4, #15]
        it->type = CborIntegerType;
   27e2e:	2300      	movs	r3, #0
   27e30:	73a3      	strb	r3, [r4, #14]
   27e32:	e7ed      	b.n	27e10 <preparse_value+0x8c>
        switch (descriptor) {
   27e34:	3814      	subs	r0, #20
   27e36:	280b      	cmp	r0, #11
   27e38:	d842      	bhi.n	27ec0 <preparse_value+0x13c>
   27e3a:	e8df f000 	tbb	[pc, r0]
   27e3e:	0d06      	.short	0x0d06
   27e40:	0d130d0d 	.word	0x0d130d0d
   27e44:	22220b0b 	.word	0x22220b0b
   27e48:	2222      	.short	0x2222
            it->extra = false;
   27e4a:	2000      	movs	r0, #0
   27e4c:	81a0      	strh	r0, [r4, #12]
            it->type = CborBooleanType;
   27e4e:	23f5      	movs	r3, #245	; 0xf5
   27e50:	73a3      	strb	r3, [r4, #14]
            break;
   27e52:	e7bb      	b.n	27dcc <preparse_value+0x48>
            it->flags |= CborIteratorFlag_IntegerValueTooLarge;
   27e54:	2301      	movs	r3, #1
   27e56:	73e3      	strb	r3, [r4, #15]
            it->type = parser->d->get8(parser->d, it->offset);
   27e58:	6830      	ldr	r0, [r6, #0]
   27e5a:	6803      	ldr	r3, [r0, #0]
   27e5c:	4798      	blx	r3
   27e5e:	73a0      	strb	r0, [r4, #14]
        return CborNoError;
   27e60:	2000      	movs	r0, #0
            break;
   27e62:	e7b3      	b.n	27dcc <preparse_value+0x48>
            it->extra = parser->d->get8(parser->d, it->offset + 1);
   27e64:	6830      	ldr	r0, [r6, #0]
   27e66:	6803      	ldr	r3, [r0, #0]
   27e68:	3101      	adds	r1, #1
   27e6a:	4798      	blx	r3
   27e6c:	b280      	uxth	r0, r0
   27e6e:	81a0      	strh	r0, [r4, #12]
            if (unlikely(it->extra < 32)) {
   27e70:	281f      	cmp	r0, #31
   27e72:	d901      	bls.n	27e78 <preparse_value+0xf4>
        return CborNoError;
   27e74:	2000      	movs	r0, #0
   27e76:	e7a9      	b.n	27dcc <preparse_value+0x48>
                it->type = CborInvalidType;
   27e78:	23ff      	movs	r3, #255	; 0xff
   27e7a:	73a3      	strb	r3, [r4, #14]
                return CborErrorIllegalSimpleType;
   27e7c:	f44f 7083 	mov.w	r0, #262	; 0x106
   27e80:	e7a4      	b.n	27dcc <preparse_value+0x48>
            assert(false);  /* these conditions can't be reached */
   27e82:	f7e4 f9b1 	bl	c1e8 <hal_debugger_connected>
   27e86:	b100      	cbz	r0, 27e8a <preparse_value+0x106>
   27e88:	be01      	bkpt	0x0001
   27e8a:	2300      	movs	r3, #0
   27e8c:	461a      	mov	r2, r3
   27e8e:	4619      	mov	r1, r3
   27e90:	4618      	mov	r0, r3
   27e92:	f7e4 fbe3 	bl	c65c <__assert_func>
    else if (descriptor == Value16Bit)
   27e96:	2819      	cmp	r0, #25
   27e98:	d106      	bne.n	27ea8 <preparse_value+0x124>
        it->extra = parser->d->get16(parser->d, it->offset + 1);
   27e9a:	6830      	ldr	r0, [r6, #0]
   27e9c:	6843      	ldr	r3, [r0, #4]
   27e9e:	3101      	adds	r1, #1
   27ea0:	4798      	blx	r3
   27ea2:	81a0      	strh	r0, [r4, #12]
    return CborNoError;
   27ea4:	2000      	movs	r0, #0
   27ea6:	e791      	b.n	27dcc <preparse_value+0x48>
        it->flags |= CborIteratorFlag_IntegerValueTooLarge;     /* Value32Bit or Value64Bit */
   27ea8:	7be3      	ldrb	r3, [r4, #15]
   27eaa:	f043 0301 	orr.w	r3, r3, #1
   27eae:	73e3      	strb	r3, [r4, #15]
    return CborNoError;
   27eb0:	2000      	movs	r0, #0
   27eb2:	e78b      	b.n	27dcc <preparse_value+0x48>
        return CborErrorUnexpectedEOF;
   27eb4:	f240 1001 	movw	r0, #257	; 0x101
   27eb8:	e788      	b.n	27dcc <preparse_value+0x48>
        return CborErrorUnexpectedEOF;
   27eba:	f240 1001 	movw	r0, #257	; 0x101
   27ebe:	e785      	b.n	27dcc <preparse_value+0x48>
        return CborNoError;
   27ec0:	2000      	movs	r0, #0
   27ec2:	e783      	b.n	27dcc <preparse_value+0x48>
        return CborNoError;
   27ec4:	2000      	movs	r0, #0
   27ec6:	e781      	b.n	27dcc <preparse_value+0x48>

00027ec8 <preparse_next_value>:
{
   27ec8:	b510      	push	{r4, lr}
   27eca:	4604      	mov	r4, r0
    if (it->remaining != UINT32_MAX) {
   27ecc:	6883      	ldr	r3, [r0, #8]
   27ece:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   27ed2:	d00d      	beq.n	27ef0 <preparse_next_value+0x28>
        if (it->type != CborTagType && !--it->remaining) {
   27ed4:	7b82      	ldrb	r2, [r0, #14]
   27ed6:	2ac0      	cmp	r2, #192	; 0xc0
   27ed8:	d002      	beq.n	27ee0 <preparse_next_value+0x18>
   27eda:	3b01      	subs	r3, #1
   27edc:	6083      	str	r3, [r0, #8]
   27ede:	b11b      	cbz	r3, 27ee8 <preparse_next_value+0x20>
    return preparse_value(it);
   27ee0:	4620      	mov	r0, r4
   27ee2:	f7ff ff4f 	bl	27d84 <preparse_value>
}
   27ee6:	bd10      	pop	{r4, pc}
            it->type = CborInvalidType;
   27ee8:	23ff      	movs	r3, #255	; 0xff
   27eea:	7383      	strb	r3, [r0, #14]
            return CborNoError;
   27eec:	2000      	movs	r0, #0
   27eee:	e7fa      	b.n	27ee6 <preparse_next_value+0x1e>
    } else if (it->remaining == UINT32_MAX && it->offset != it->parser->end &&
   27ef0:	6841      	ldr	r1, [r0, #4]
   27ef2:	6803      	ldr	r3, [r0, #0]
   27ef4:	685a      	ldr	r2, [r3, #4]
   27ef6:	4291      	cmp	r1, r2
   27ef8:	d0f2      	beq.n	27ee0 <preparse_next_value+0x18>
        it->parser->d->get8(it->parser->d, it->offset) == (uint8_t)BreakByte) {
   27efa:	6818      	ldr	r0, [r3, #0]
   27efc:	6803      	ldr	r3, [r0, #0]
   27efe:	4798      	blx	r3
    } else if (it->remaining == UINT32_MAX && it->offset != it->parser->end &&
   27f00:	28ff      	cmp	r0, #255	; 0xff
   27f02:	d1ed      	bne.n	27ee0 <preparse_next_value+0x18>
        ++it->offset;
   27f04:	6863      	ldr	r3, [r4, #4]
   27f06:	3301      	adds	r3, #1
   27f08:	6063      	str	r3, [r4, #4]
        it->type = CborInvalidType;
   27f0a:	23ff      	movs	r3, #255	; 0xff
   27f0c:	73a3      	strb	r3, [r4, #14]
        it->remaining = 0;
   27f0e:	2000      	movs	r0, #0
   27f10:	60a0      	str	r0, [r4, #8]
        return CborNoError;
   27f12:	e7e8      	b.n	27ee6 <preparse_next_value+0x1e>

00027f14 <extract_length>:
{
   27f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27f16:	4606      	mov	r6, r0
   27f18:	460c      	mov	r4, r1
   27f1a:	4615      	mov	r5, r2
    return cbor_ntohll(result);
}

static inline CborError extract_number(const CborParser *p, int *offset, uint64_t *len)
{
    uint8_t additional_information = p->d->get8(p->d, *offset) & SmallValueMask;
   27f1c:	6800      	ldr	r0, [r0, #0]
   27f1e:	6803      	ldr	r3, [r0, #0]
   27f20:	6809      	ldr	r1, [r1, #0]
   27f22:	4798      	blx	r3
   27f24:	f000 001f 	and.w	r0, r0, #31
    ++*offset;
   27f28:	6823      	ldr	r3, [r4, #0]
   27f2a:	3301      	adds	r3, #1
   27f2c:	6023      	str	r3, [r4, #0]
    *len = 1;
    if (additional_information < Value8Bit) {
   27f2e:	2817      	cmp	r0, #23
   27f30:	d915      	bls.n	27f5e <extract_length+0x4a>
        *len = additional_information;
        return CborNoError;
    }
    if (unlikely(additional_information > Value64Bit))
   27f32:	281b      	cmp	r0, #27
   27f34:	d836      	bhi.n	27fa4 <extract_length+0x90>
        return CborErrorIllegalNumber;

    size_t bytesNeeded = (size_t)(1 << (additional_information - Value8Bit));
   27f36:	3818      	subs	r0, #24
   27f38:	2701      	movs	r7, #1
   27f3a:	4087      	lsls	r7, r0
    if (unlikely(bytesNeeded > (size_t)(p->end - *offset))) {
   27f3c:	6873      	ldr	r3, [r6, #4]
   27f3e:	6821      	ldr	r1, [r4, #0]
   27f40:	1a5b      	subs	r3, r3, r1
   27f42:	429f      	cmp	r7, r3
   27f44:	d833      	bhi.n	27fae <extract_length+0x9a>
        return CborErrorUnexpectedEOF;
    } else if (bytesNeeded == 1) {
   27f46:	2f01      	cmp	r7, #1
   27f48:	d116      	bne.n	27f78 <extract_length+0x64>
        *len = p->d->get8(p->d, *offset);
   27f4a:	6830      	ldr	r0, [r6, #0]
   27f4c:	6803      	ldr	r3, [r0, #0]
   27f4e:	4798      	blx	r3
   27f50:	b2c2      	uxtb	r2, r0
   27f52:	2300      	movs	r3, #0
    } else if (bytesNeeded == 4) {
        *len =  p->d->get32(p->d, *offset);
    } else {
        *len =  p->d->get64(p->d, *offset);
    }
    *offset += bytesNeeded;
   27f54:	6820      	ldr	r0, [r4, #0]
   27f56:	4438      	add	r0, r7
   27f58:	6020      	str	r0, [r4, #0]
    return CborNoError;
   27f5a:	2000      	movs	r0, #0
   27f5c:	e002      	b.n	27f64 <extract_length+0x50>
        *len = additional_information;
   27f5e:	b2c2      	uxtb	r2, r0
   27f60:	2300      	movs	r3, #0
        return CborNoError;
   27f62:	2000      	movs	r0, #0
    if (err) {
   27f64:	bb40      	cbnz	r0, 27fb8 <extract_length+0xa4>
    *len = v;
   27f66:	602a      	str	r2, [r5, #0]
    if (v != *len)
   27f68:	2500      	movs	r5, #0
   27f6a:	429d      	cmp	r5, r3
   27f6c:	bf08      	it	eq
   27f6e:	4292      	cmpeq	r2, r2
   27f70:	d024      	beq.n	27fbc <extract_length+0xa8>
        return CborErrorDataTooLarge;
   27f72:	f44f 6080 	mov.w	r0, #1024	; 0x400
   27f76:	e021      	b.n	27fbc <extract_length+0xa8>
    } else if (bytesNeeded == 2) {
   27f78:	2f02      	cmp	r7, #2
   27f7a:	d105      	bne.n	27f88 <extract_length+0x74>
        *len =  p->d->get16(p->d, *offset);
   27f7c:	6830      	ldr	r0, [r6, #0]
   27f7e:	6843      	ldr	r3, [r0, #4]
   27f80:	4798      	blx	r3
   27f82:	b282      	uxth	r2, r0
   27f84:	2300      	movs	r3, #0
   27f86:	e7e5      	b.n	27f54 <extract_length+0x40>
    } else if (bytesNeeded == 4) {
   27f88:	2f04      	cmp	r7, #4
   27f8a:	d005      	beq.n	27f98 <extract_length+0x84>
        *len =  p->d->get64(p->d, *offset);
   27f8c:	6830      	ldr	r0, [r6, #0]
   27f8e:	68c3      	ldr	r3, [r0, #12]
   27f90:	4798      	blx	r3
   27f92:	4602      	mov	r2, r0
   27f94:	460b      	mov	r3, r1
   27f96:	e7dd      	b.n	27f54 <extract_length+0x40>
        *len =  p->d->get32(p->d, *offset);
   27f98:	6830      	ldr	r0, [r6, #0]
   27f9a:	6883      	ldr	r3, [r0, #8]
   27f9c:	4798      	blx	r3
   27f9e:	4602      	mov	r2, r0
   27fa0:	2300      	movs	r3, #0
   27fa2:	e7d7      	b.n	27f54 <extract_length+0x40>
    *len = 1;
   27fa4:	2201      	movs	r2, #1
   27fa6:	2300      	movs	r3, #0
        return CborErrorIllegalNumber;
   27fa8:	f240 1005 	movw	r0, #261	; 0x105
   27fac:	e7da      	b.n	27f64 <extract_length+0x50>
    *len = 1;
   27fae:	2201      	movs	r2, #1
   27fb0:	2300      	movs	r3, #0
        return CborErrorUnexpectedEOF;
   27fb2:	f240 1001 	movw	r0, #257	; 0x101
   27fb6:	e7d5      	b.n	27f64 <extract_length+0x50>
        *len = 0;
   27fb8:	2300      	movs	r3, #0
   27fba:	602b      	str	r3, [r5, #0]
}
   27fbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00027fbe <iterate_string_chunks>:

static CborError iterate_string_chunks(const CborValue *value, char *buffer, size_t *buflen,
                                       bool *result, CborValue *next, IterateFunction func)
{
   27fbe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   27fc2:	b085      	sub	sp, #20
   27fc4:	4604      	mov	r4, r0
   27fc6:	4688      	mov	r8, r1
   27fc8:	4691      	mov	r9, r2
   27fca:	461e      	mov	r6, r3
{ return value->type == CborByteStringType; }
   27fcc:	7b83      	ldrb	r3, [r0, #14]
    assert(cbor_value_is_byte_string(value) || cbor_value_is_text_string(value));
   27fce:	2b40      	cmp	r3, #64	; 0x40
   27fd0:	d001      	beq.n	27fd6 <iterate_string_chunks+0x18>
   27fd2:	2b60      	cmp	r3, #96	; 0x60
   27fd4:	d10c      	bne.n	27ff0 <iterate_string_chunks+0x32>

    size_t total;
    CborError err;
    int offset = value->offset;
   27fd6:	6863      	ldr	r3, [r4, #4]
   27fd8:	9302      	str	r3, [sp, #8]
{ return (value->flags & CborIteratorFlag_UnknownLength) == 0; }
   27fda:	7be2      	ldrb	r2, [r4, #15]
    if (cbor_value_is_length_known(value)) {
   27fdc:	f012 0f04 	tst.w	r2, #4
   27fe0:	d010      	beq.n	28004 <iterate_string_chunks+0x46>
        else
            *result = false;
        offset += total;
    } else {
        /* chunked */
        ++offset;
   27fe2:	3301      	adds	r3, #1
   27fe4:	9302      	str	r3, [sp, #8]
        total = 0;
   27fe6:	2300      	movs	r3, #0
   27fe8:	9303      	str	r3, [sp, #12]
        *result = true;
   27fea:	2301      	movs	r3, #1
   27fec:	7033      	strb	r3, [r6, #0]
   27fee:	e059      	b.n	280a4 <iterate_string_chunks+0xe6>
    assert(cbor_value_is_byte_string(value) || cbor_value_is_text_string(value));
   27ff0:	f7e4 f8fa 	bl	c1e8 <hal_debugger_connected>
   27ff4:	b100      	cbz	r0, 27ff8 <iterate_string_chunks+0x3a>
   27ff6:	be01      	bkpt	0x0001
   27ff8:	2300      	movs	r3, #0
   27ffa:	461a      	mov	r2, r3
   27ffc:	4619      	mov	r1, r3
   27ffe:	4618      	mov	r0, r3
   28000:	f7e4 fb2c 	bl	c65c <__assert_func>
        err = extract_length(value->parser, &offset, &total);
   28004:	aa03      	add	r2, sp, #12
   28006:	a902      	add	r1, sp, #8
   28008:	6820      	ldr	r0, [r4, #0]
   2800a:	f7ff ff83 	bl	27f14 <extract_length>
        if (err)
   2800e:	4603      	mov	r3, r0
   28010:	2800      	cmp	r0, #0
   28012:	f040 8084 	bne.w	2811e <iterate_string_chunks+0x160>
        if (total > (size_t)(value->parser->end - offset))
   28016:	6820      	ldr	r0, [r4, #0]
   28018:	6843      	ldr	r3, [r0, #4]
   2801a:	9a02      	ldr	r2, [sp, #8]
   2801c:	1a99      	subs	r1, r3, r2
   2801e:	9b03      	ldr	r3, [sp, #12]
   28020:	4299      	cmp	r1, r3
   28022:	f0c0 8083 	bcc.w	2812c <iterate_string_chunks+0x16e>
        if (total <= *buflen)
   28026:	f8d9 1000 	ldr.w	r1, [r9]
   2802a:	428b      	cmp	r3, r1
   2802c:	d82a      	bhi.n	28084 <iterate_string_chunks+0xc6>
            *result = !!func(value->parser->d, buffer, offset, total);
   2802e:	4641      	mov	r1, r8
   28030:	6800      	ldr	r0, [r0, #0]
   28032:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   28034:	47a8      	blx	r5
   28036:	3000      	adds	r0, #0
   28038:	bf18      	it	ne
   2803a:	2001      	movne	r0, #1
   2803c:	7030      	strb	r0, [r6, #0]
        offset += total;
   2803e:	9b02      	ldr	r3, [sp, #8]
   28040:	9a03      	ldr	r2, [sp, #12]
   28042:	4413      	add	r3, r2
   28044:	9302      	str	r3, [sp, #8]
            total = newTotal;
        }
    }

    /* is there enough room for the ending NUL byte? */
    if (*result && *buflen > total) {
   28046:	7833      	ldrb	r3, [r6, #0]
   28048:	b153      	cbz	r3, 28060 <iterate_string_chunks+0xa2>
   2804a:	f8d9 2000 	ldr.w	r2, [r9]
   2804e:	9b03      	ldr	r3, [sp, #12]
   28050:	429a      	cmp	r2, r3
   28052:	d905      	bls.n	28060 <iterate_string_chunks+0xa2>
        /* we are just trying to write a NULL byte here,, but this is hard
         * because this is called by function pointer with an abstract
         * reader.  Since this is the output buffer, we can assume that if
         * we have a valid buffer its ok to write a NULL here  */
        if(buffer) {
   28054:	f1b8 0f00 	cmp.w	r8, #0
   28058:	d002      	beq.n	28060 <iterate_string_chunks+0xa2>
            *(buffer + total) = '\0';
   2805a:	2200      	movs	r2, #0
   2805c:	f808 2003 	strb.w	r2, [r8, r3]
        }
    }
    *buflen = total;
   28060:	9b03      	ldr	r3, [sp, #12]
   28062:	f8c9 3000 	str.w	r3, [r9]

    if (next) {
   28066:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   28068:	2b00      	cmp	r3, #0
   2806a:	d062      	beq.n	28132 <iterate_string_chunks+0x174>
        *next = *value;
   2806c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   28070:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   28072:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        next->offset = offset;
   28076:	9b02      	ldr	r3, [sp, #8]
   28078:	6063      	str	r3, [r4, #4]
        return preparse_next_value(next);
   2807a:	4620      	mov	r0, r4
   2807c:	f7ff ff24 	bl	27ec8 <preparse_next_value>
   28080:	4603      	mov	r3, r0
   28082:	e04c      	b.n	2811e <iterate_string_chunks+0x160>
            *result = false;
   28084:	2300      	movs	r3, #0
   28086:	7033      	strb	r3, [r6, #0]
   28088:	e7d9      	b.n	2803e <iterate_string_chunks+0x80>
                ++offset;
   2808a:	9b02      	ldr	r3, [sp, #8]
   2808c:	3301      	adds	r3, #1
   2808e:	9302      	str	r3, [sp, #8]
   28090:	e7d9      	b.n	28046 <iterate_string_chunks+0x88>
#endif

static inline bool add_check_overflow(size_t v1, size_t v2, size_t *r)
{
#if ((defined(__GNUC__) && (__GNUC__ >= 5)) && !defined(__INTEL_COMPILER)) || __has_builtin(__builtin_add_overflow)
    return __builtin_add_overflow(v1, v2, r);
   28092:	2201      	movs	r2, #1
   28094:	e021      	b.n	280da <iterate_string_chunks+0x11c>
                *result = false;
   28096:	2300      	movs	r3, #0
   28098:	7033      	strb	r3, [r6, #0]
            offset += chunkLen;
   2809a:	9b02      	ldr	r3, [sp, #8]
   2809c:	9a01      	ldr	r2, [sp, #4]
   2809e:	4413      	add	r3, r2
   280a0:	9302      	str	r3, [sp, #8]
            total = newTotal;
   280a2:	9503      	str	r5, [sp, #12]
            if (offset == value->parser->end)
   280a4:	6823      	ldr	r3, [r4, #0]
   280a6:	685a      	ldr	r2, [r3, #4]
   280a8:	9902      	ldr	r1, [sp, #8]
   280aa:	428a      	cmp	r2, r1
   280ac:	d02f      	beq.n	2810e <iterate_string_chunks+0x150>
            val = value->parser->d->get8(value->parser->d, offset);
   280ae:	6818      	ldr	r0, [r3, #0]
   280b0:	6803      	ldr	r3, [r0, #0]
   280b2:	4798      	blx	r3
            if (val == (uint8_t)BreakByte) {
   280b4:	28ff      	cmp	r0, #255	; 0xff
   280b6:	d0e8      	beq.n	2808a <iterate_string_chunks+0xcc>
            if ((val & MajorTypeMask) != value->type)
   280b8:	f020 001f 	bic.w	r0, r0, #31
   280bc:	7ba3      	ldrb	r3, [r4, #14]
   280be:	4298      	cmp	r0, r3
   280c0:	d128      	bne.n	28114 <iterate_string_chunks+0x156>
            err = extract_length(value->parser, &offset, &chunkLen);
   280c2:	aa01      	add	r2, sp, #4
   280c4:	a902      	add	r1, sp, #8
   280c6:	6820      	ldr	r0, [r4, #0]
   280c8:	f7ff ff24 	bl	27f14 <extract_length>
            if (err)
   280cc:	4603      	mov	r3, r0
   280ce:	bb30      	cbnz	r0, 2811e <iterate_string_chunks+0x160>
            if (unlikely(add_check_overflow(total, chunkLen, &newTotal)))
   280d0:	9903      	ldr	r1, [sp, #12]
   280d2:	9b01      	ldr	r3, [sp, #4]
   280d4:	2200      	movs	r2, #0
   280d6:	18cd      	adds	r5, r1, r3
   280d8:	d2db      	bcs.n	28092 <iterate_string_chunks+0xd4>
   280da:	b9f2      	cbnz	r2, 2811a <iterate_string_chunks+0x15c>
            if (chunkLen > (size_t)(value->parser->end - offset))
   280dc:	f8d4 c000 	ldr.w	ip, [r4]
   280e0:	f8dc 0004 	ldr.w	r0, [ip, #4]
   280e4:	9a02      	ldr	r2, [sp, #8]
   280e6:	1a80      	subs	r0, r0, r2
   280e8:	4283      	cmp	r3, r0
   280ea:	d81c      	bhi.n	28126 <iterate_string_chunks+0x168>
            if (*result && *buflen >= newTotal)
   280ec:	7830      	ldrb	r0, [r6, #0]
   280ee:	2800      	cmp	r0, #0
   280f0:	d0d1      	beq.n	28096 <iterate_string_chunks+0xd8>
   280f2:	f8d9 0000 	ldr.w	r0, [r9]
   280f6:	42a8      	cmp	r0, r5
   280f8:	d3cd      	bcc.n	28096 <iterate_string_chunks+0xd8>
                *result = !!func(value->parser->d, buffer + total, offset, chunkLen);
   280fa:	4441      	add	r1, r8
   280fc:	f8dc 0000 	ldr.w	r0, [ip]
   28100:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   28102:	47b8      	blx	r7
   28104:	3000      	adds	r0, #0
   28106:	bf18      	it	ne
   28108:	2001      	movne	r0, #1
   2810a:	7030      	strb	r0, [r6, #0]
   2810c:	e7c5      	b.n	2809a <iterate_string_chunks+0xdc>
                return CborErrorUnexpectedEOF;
   2810e:	f240 1301 	movw	r3, #257	; 0x101
   28112:	e004      	b.n	2811e <iterate_string_chunks+0x160>
                return CborErrorIllegalType;
   28114:	f44f 7382 	mov.w	r3, #260	; 0x104
   28118:	e001      	b.n	2811e <iterate_string_chunks+0x160>
                return CborErrorDataTooLarge;
   2811a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    }
    return CborNoError;
}
   2811e:	4618      	mov	r0, r3
   28120:	b005      	add	sp, #20
   28122:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                return CborErrorUnexpectedEOF;
   28126:	f240 1301 	movw	r3, #257	; 0x101
   2812a:	e7f8      	b.n	2811e <iterate_string_chunks+0x160>
            return CborErrorUnexpectedEOF;
   2812c:	f240 1301 	movw	r3, #257	; 0x101
   28130:	e7f5      	b.n	2811e <iterate_string_chunks+0x160>
    return CborNoError;
   28132:	2300      	movs	r3, #0
   28134:	e7f3      	b.n	2811e <iterate_string_chunks+0x160>

00028136 <advance_internal>:
{
   28136:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28138:	4604      	mov	r4, r0
    CborError err = extract_number(it->parser, &it->offset,  &length);
   2813a:	6806      	ldr	r6, [r0, #0]
    uint8_t additional_information = p->d->get8(p->d, *offset) & SmallValueMask;
   2813c:	6830      	ldr	r0, [r6, #0]
   2813e:	6803      	ldr	r3, [r0, #0]
   28140:	6861      	ldr	r1, [r4, #4]
   28142:	4798      	blx	r3
   28144:	f000 001f 	and.w	r0, r0, #31
    ++*offset;
   28148:	6863      	ldr	r3, [r4, #4]
   2814a:	3301      	adds	r3, #1
   2814c:	6063      	str	r3, [r4, #4]
    if (additional_information < Value8Bit) {
   2814e:	2817      	cmp	r0, #23
   28150:	d915      	bls.n	2817e <advance_internal+0x48>
    if (unlikely(additional_information > Value64Bit))
   28152:	281b      	cmp	r0, #27
   28154:	d83f      	bhi.n	281d6 <advance_internal+0xa0>
    size_t bytesNeeded = (size_t)(1 << (additional_information - Value8Bit));
   28156:	3818      	subs	r0, #24
   28158:	2501      	movs	r5, #1
   2815a:	4085      	lsls	r5, r0
    if (unlikely(bytesNeeded > (size_t)(p->end - *offset))) {
   2815c:	6873      	ldr	r3, [r6, #4]
   2815e:	6861      	ldr	r1, [r4, #4]
   28160:	1a5b      	subs	r3, r3, r1
   28162:	429d      	cmp	r5, r3
   28164:	d83c      	bhi.n	281e0 <advance_internal+0xaa>
    } else if (bytesNeeded == 1) {
   28166:	2d01      	cmp	r5, #1
   28168:	d122      	bne.n	281b0 <advance_internal+0x7a>
        *len = p->d->get8(p->d, *offset);
   2816a:	6830      	ldr	r0, [r6, #0]
   2816c:	6803      	ldr	r3, [r0, #0]
   2816e:	4798      	blx	r3
   28170:	b2c0      	uxtb	r0, r0
   28172:	2100      	movs	r1, #0
    *offset += bytesNeeded;
   28174:	6863      	ldr	r3, [r4, #4]
   28176:	441d      	add	r5, r3
   28178:	6065      	str	r5, [r4, #4]
    return CborNoError;
   2817a:	2300      	movs	r3, #0
   2817c:	e002      	b.n	28184 <advance_internal+0x4e>
        *len = additional_information;
   2817e:	b2c0      	uxtb	r0, r0
   28180:	2100      	movs	r1, #0
        return CborNoError;
   28182:	2300      	movs	r3, #0
    assert(err == CborNoError);
   28184:	bb8b      	cbnz	r3, 281ea <advance_internal+0xb4>
    if (it->type == CborByteStringType || it->type == CborTextStringType) {
   28186:	7ba3      	ldrb	r3, [r4, #14]
   28188:	2b40      	cmp	r3, #64	; 0x40
   2818a:	d001      	beq.n	28190 <advance_internal+0x5a>
   2818c:	2b60      	cmp	r3, #96	; 0x60
   2818e:	d10b      	bne.n	281a8 <advance_internal+0x72>
        assert(length == (size_t)length);
   28190:	2700      	movs	r7, #0
   28192:	428f      	cmp	r7, r1
   28194:	bf08      	it	eq
   28196:	4280      	cmpeq	r0, r0
   28198:	d131      	bne.n	281fe <advance_internal+0xc8>
        assert((it->flags & CborIteratorFlag_UnknownLength) == 0);
   2819a:	7be3      	ldrb	r3, [r4, #15]
   2819c:	f013 0f04 	tst.w	r3, #4
   281a0:	d137      	bne.n	28212 <advance_internal+0xdc>
        it->offset += length;
   281a2:	6863      	ldr	r3, [r4, #4]
   281a4:	4403      	add	r3, r0
   281a6:	6063      	str	r3, [r4, #4]
    return preparse_next_value(it);
   281a8:	4620      	mov	r0, r4
   281aa:	f7ff fe8d 	bl	27ec8 <preparse_next_value>
}
   281ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if (bytesNeeded == 2) {
   281b0:	2d02      	cmp	r5, #2
   281b2:	d105      	bne.n	281c0 <advance_internal+0x8a>
        *len =  p->d->get16(p->d, *offset);
   281b4:	6830      	ldr	r0, [r6, #0]
   281b6:	6843      	ldr	r3, [r0, #4]
   281b8:	4798      	blx	r3
   281ba:	b280      	uxth	r0, r0
   281bc:	2100      	movs	r1, #0
   281be:	e7d9      	b.n	28174 <advance_internal+0x3e>
    } else if (bytesNeeded == 4) {
   281c0:	2d04      	cmp	r5, #4
   281c2:	d003      	beq.n	281cc <advance_internal+0x96>
        *len =  p->d->get64(p->d, *offset);
   281c4:	6830      	ldr	r0, [r6, #0]
   281c6:	68c3      	ldr	r3, [r0, #12]
   281c8:	4798      	blx	r3
   281ca:	e7d3      	b.n	28174 <advance_internal+0x3e>
        *len =  p->d->get32(p->d, *offset);
   281cc:	6830      	ldr	r0, [r6, #0]
   281ce:	6883      	ldr	r3, [r0, #8]
   281d0:	4798      	blx	r3
   281d2:	2100      	movs	r1, #0
   281d4:	e7ce      	b.n	28174 <advance_internal+0x3e>
    *len = 1;
   281d6:	2001      	movs	r0, #1
   281d8:	2100      	movs	r1, #0
        return CborErrorIllegalNumber;
   281da:	f240 1305 	movw	r3, #261	; 0x105
   281de:	e7d1      	b.n	28184 <advance_internal+0x4e>
    *len = 1;
   281e0:	2001      	movs	r0, #1
   281e2:	2100      	movs	r1, #0
        return CborErrorUnexpectedEOF;
   281e4:	f240 1301 	movw	r3, #257	; 0x101
   281e8:	e7cc      	b.n	28184 <advance_internal+0x4e>
    assert(err == CborNoError);
   281ea:	f7e3 fffd 	bl	c1e8 <hal_debugger_connected>
   281ee:	b100      	cbz	r0, 281f2 <advance_internal+0xbc>
   281f0:	be01      	bkpt	0x0001
   281f2:	2300      	movs	r3, #0
   281f4:	461a      	mov	r2, r3
   281f6:	4619      	mov	r1, r3
   281f8:	4618      	mov	r0, r3
   281fa:	f7e4 fa2f 	bl	c65c <__assert_func>
        assert(length == (size_t)length);
   281fe:	f7e3 fff3 	bl	c1e8 <hal_debugger_connected>
   28202:	b100      	cbz	r0, 28206 <advance_internal+0xd0>
   28204:	be01      	bkpt	0x0001
   28206:	2300      	movs	r3, #0
   28208:	461a      	mov	r2, r3
   2820a:	4619      	mov	r1, r3
   2820c:	4618      	mov	r0, r3
   2820e:	f7e4 fa25 	bl	c65c <__assert_func>
        assert((it->flags & CborIteratorFlag_UnknownLength) == 0);
   28212:	f7e3 ffe9 	bl	c1e8 <hal_debugger_connected>
   28216:	b100      	cbz	r0, 2821a <advance_internal+0xe4>
   28218:	be01      	bkpt	0x0001
   2821a:	2300      	movs	r3, #0
   2821c:	461a      	mov	r2, r3
   2821e:	4619      	mov	r1, r3
   28220:	4618      	mov	r0, r3
   28222:	f7e4 fa1b 	bl	c65c <__assert_func>

00028226 <_cbor_value_decode_int64_internal>:
{
   28226:	b510      	push	{r4, lr}
   28228:	4604      	mov	r4, r0
    uint8_t val = value->parser->d->get8(value->parser->d, value->offset);
   2822a:	6803      	ldr	r3, [r0, #0]
   2822c:	6818      	ldr	r0, [r3, #0]
   2822e:	6803      	ldr	r3, [r0, #0]
   28230:	6861      	ldr	r1, [r4, #4]
   28232:	4798      	blx	r3
    assert(value->flags & CborIteratorFlag_IntegerValueTooLarge ||
   28234:	7be3      	ldrb	r3, [r4, #15]
   28236:	f013 0f01 	tst.w	r3, #1
   2823a:	d104      	bne.n	28246 <_cbor_value_decode_int64_internal+0x20>
   2823c:	7ba3      	ldrb	r3, [r4, #14]
   2823e:	2bfa      	cmp	r3, #250	; 0xfa
   28240:	d001      	beq.n	28246 <_cbor_value_decode_int64_internal+0x20>
   28242:	2bfb      	cmp	r3, #251	; 0xfb
   28244:	d110      	bne.n	28268 <_cbor_value_decode_int64_internal+0x42>
   28246:	f000 031f 	and.w	r3, r0, #31
    assert((val & SmallValueMask) == Value32Bit || (val & SmallValueMask) == Value64Bit);
   2824a:	f1a3 021a 	sub.w	r2, r3, #26
   2824e:	2a01      	cmp	r2, #1
   28250:	d814      	bhi.n	2827c <_cbor_value_decode_int64_internal+0x56>
    if ((val & 1) == (Value32Bit & 1))
   28252:	f010 0f01 	tst.w	r0, #1
   28256:	d11b      	bne.n	28290 <_cbor_value_decode_int64_internal+0x6a>
        return value->parser->d->get32(value->parser->d, value->offset + 1);
   28258:	6823      	ldr	r3, [r4, #0]
   2825a:	6818      	ldr	r0, [r3, #0]
   2825c:	6883      	ldr	r3, [r0, #8]
   2825e:	6861      	ldr	r1, [r4, #4]
   28260:	3101      	adds	r1, #1
   28262:	4798      	blx	r3
   28264:	2100      	movs	r1, #0
}
   28266:	bd10      	pop	{r4, pc}
    assert(value->flags & CborIteratorFlag_IntegerValueTooLarge ||
   28268:	f7e3 ffbe 	bl	c1e8 <hal_debugger_connected>
   2826c:	b100      	cbz	r0, 28270 <_cbor_value_decode_int64_internal+0x4a>
   2826e:	be01      	bkpt	0x0001
   28270:	2300      	movs	r3, #0
   28272:	461a      	mov	r2, r3
   28274:	4619      	mov	r1, r3
   28276:	4618      	mov	r0, r3
   28278:	f7e4 f9f0 	bl	c65c <__assert_func>
    assert((val & SmallValueMask) == Value32Bit || (val & SmallValueMask) == Value64Bit);
   2827c:	f7e3 ffb4 	bl	c1e8 <hal_debugger_connected>
   28280:	b100      	cbz	r0, 28284 <_cbor_value_decode_int64_internal+0x5e>
   28282:	be01      	bkpt	0x0001
   28284:	2300      	movs	r3, #0
   28286:	461a      	mov	r2, r3
   28288:	4619      	mov	r1, r3
   2828a:	4618      	mov	r0, r3
   2828c:	f7e4 f9e6 	bl	c65c <__assert_func>
    assert((val & SmallValueMask) == Value64Bit);
   28290:	2b1b      	cmp	r3, #27
   28292:	d106      	bne.n	282a2 <_cbor_value_decode_int64_internal+0x7c>
        return value->parser->d->get64(value->parser->d, value->offset + 1);
   28294:	6823      	ldr	r3, [r4, #0]
   28296:	6818      	ldr	r0, [r3, #0]
   28298:	68c3      	ldr	r3, [r0, #12]
   2829a:	6861      	ldr	r1, [r4, #4]
   2829c:	3101      	adds	r1, #1
   2829e:	4798      	blx	r3
   282a0:	e7e1      	b.n	28266 <_cbor_value_decode_int64_internal+0x40>
    assert((val & SmallValueMask) == Value64Bit);
   282a2:	f7e3 ffa1 	bl	c1e8 <hal_debugger_connected>
   282a6:	b100      	cbz	r0, 282aa <_cbor_value_decode_int64_internal+0x84>
   282a8:	be01      	bkpt	0x0001
   282aa:	2300      	movs	r3, #0
   282ac:	461a      	mov	r2, r3
   282ae:	4619      	mov	r1, r3
   282b0:	4618      	mov	r0, r3
   282b2:	f7e4 f9d3 	bl	c65c <__assert_func>

000282b6 <cbor_parser_init>:
{
   282b6:	b510      	push	{r4, lr}
    memset(parser, 0, sizeof(*parser));
   282b8:	2400      	movs	r4, #0
   282ba:	6054      	str	r4, [r2, #4]
   282bc:	6094      	str	r4, [r2, #8]
    parser->d = d;
   282be:	6010      	str	r0, [r2, #0]
    parser->end = d->message_size;
   282c0:	6980      	ldr	r0, [r0, #24]
   282c2:	6050      	str	r0, [r2, #4]
    parser->flags = flags;
   282c4:	6091      	str	r1, [r2, #8]
    it->parser = parser;
   282c6:	601a      	str	r2, [r3, #0]
    it->offset = 0;
   282c8:	605c      	str	r4, [r3, #4]
    it->remaining = 1;/* there's one type altogether, usually an array or map */
   282ca:	2201      	movs	r2, #1
   282cc:	609a      	str	r2, [r3, #8]
    return preparse_value(it);
   282ce:	4618      	mov	r0, r3
   282d0:	f7ff fd58 	bl	27d84 <preparse_value>
}
   282d4:	bd10      	pop	{r4, pc}

000282d6 <cbor_value_advance_fixed>:
{
   282d6:	b510      	push	{r4, lr}
   282d8:	4604      	mov	r4, r0
    assert(it->type != CborInvalidType);
   282da:	7b80      	ldrb	r0, [r0, #14]
   282dc:	28ff      	cmp	r0, #255	; 0xff
   282de:	d008      	beq.n	282f2 <cbor_value_advance_fixed+0x1c>
    assert(is_fixed_type(it->type));
   282e0:	f7ff fd3c 	bl	27d5c <is_fixed_type>
   282e4:	b178      	cbz	r0, 28306 <cbor_value_advance_fixed+0x30>
    if (!it->remaining)
   282e6:	68a3      	ldr	r3, [r4, #8]
   282e8:	b1bb      	cbz	r3, 2831a <cbor_value_advance_fixed+0x44>
    return advance_internal(it);
   282ea:	4620      	mov	r0, r4
   282ec:	f7ff ff23 	bl	28136 <advance_internal>
}
   282f0:	bd10      	pop	{r4, pc}
    assert(it->type != CborInvalidType);
   282f2:	f7e3 ff79 	bl	c1e8 <hal_debugger_connected>
   282f6:	b100      	cbz	r0, 282fa <cbor_value_advance_fixed+0x24>
   282f8:	be01      	bkpt	0x0001
   282fa:	2300      	movs	r3, #0
   282fc:	461a      	mov	r2, r3
   282fe:	4619      	mov	r1, r3
   28300:	4618      	mov	r0, r3
   28302:	f7e4 f9ab 	bl	c65c <__assert_func>
    assert(is_fixed_type(it->type));
   28306:	f7e3 ff6f 	bl	c1e8 <hal_debugger_connected>
   2830a:	b100      	cbz	r0, 2830e <cbor_value_advance_fixed+0x38>
   2830c:	be01      	bkpt	0x0001
   2830e:	2300      	movs	r3, #0
   28310:	461a      	mov	r2, r3
   28312:	4619      	mov	r1, r3
   28314:	4618      	mov	r0, r3
   28316:	f7e4 f9a1 	bl	c65c <__assert_func>
        return CborErrorAdvancePastEOF;
   2831a:	2003      	movs	r0, #3
   2831c:	e7e8      	b.n	282f0 <cbor_value_advance_fixed+0x1a>

0002831e <cbor_value_enter_container>:
{
   2831e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28320:	4605      	mov	r5, r0
   28322:	460c      	mov	r4, r1
{ return it->type == CborArrayType || it->type == CborMapType; }
   28324:	7b83      	ldrb	r3, [r0, #14]
   28326:	2b80      	cmp	r3, #128	; 0x80
   28328:	d021      	beq.n	2836e <cbor_value_enter_container+0x50>
   2832a:	2ba0      	cmp	r3, #160	; 0xa0
   2832c:	d01d      	beq.n	2836a <cbor_value_enter_container+0x4c>
   2832e:	2300      	movs	r3, #0
    assert(cbor_value_is_container(it));
   28330:	b1fb      	cbz	r3, 28372 <cbor_value_enter_container+0x54>
    *recursed = *it;
   28332:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   28336:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (it->flags & CborIteratorFlag_UnknownLength) {
   2833a:	7beb      	ldrb	r3, [r5, #15]
   2833c:	f013 0f04 	tst.w	r3, #4
   28340:	d021      	beq.n	28386 <cbor_value_enter_container+0x68>
        recursed->remaining = UINT32_MAX;
   28342:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   28346:	60a3      	str	r3, [r4, #8]
        ++recursed->offset;
   28348:	460b      	mov	r3, r1
   2834a:	3301      	adds	r3, #1
   2834c:	6063      	str	r3, [r4, #4]
        err = preparse_value(recursed);
   2834e:	4620      	mov	r0, r4
   28350:	f7ff fd18 	bl	27d84 <preparse_value>
        if (err != CborErrorUnexpectedBreak)
   28354:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   28358:	d145      	bne.n	283e6 <cbor_value_enter_container+0xc8>
        ++recursed->offset;
   2835a:	6863      	ldr	r3, [r4, #4]
   2835c:	3301      	adds	r3, #1
   2835e:	6063      	str	r3, [r4, #4]
    recursed->type = CborInvalidType;
   28360:	23ff      	movs	r3, #255	; 0xff
   28362:	73a3      	strb	r3, [r4, #14]
    recursed->remaining = 0;
   28364:	2000      	movs	r0, #0
   28366:	60a0      	str	r0, [r4, #8]
    return CborNoError;
   28368:	e03d      	b.n	283e6 <cbor_value_enter_container+0xc8>
   2836a:	2301      	movs	r3, #1
   2836c:	e7e0      	b.n	28330 <cbor_value_enter_container+0x12>
   2836e:	2301      	movs	r3, #1
   28370:	e7de      	b.n	28330 <cbor_value_enter_container+0x12>
    assert(cbor_value_is_container(it));
   28372:	f7e3 ff39 	bl	c1e8 <hal_debugger_connected>
   28376:	b100      	cbz	r0, 2837a <cbor_value_enter_container+0x5c>
   28378:	be01      	bkpt	0x0001
   2837a:	2300      	movs	r3, #0
   2837c:	461a      	mov	r2, r3
   2837e:	4619      	mov	r1, r3
   28380:	4618      	mov	r0, r3
   28382:	f7e4 f96b 	bl	c65c <__assert_func>
        err = extract_number(recursed->parser, &recursed->offset, &len);
   28386:	6826      	ldr	r6, [r4, #0]
    uint8_t additional_information = p->d->get8(p->d, *offset) & SmallValueMask;
   28388:	6830      	ldr	r0, [r6, #0]
   2838a:	6803      	ldr	r3, [r0, #0]
   2838c:	6861      	ldr	r1, [r4, #4]
   2838e:	4798      	blx	r3
   28390:	f000 001f 	and.w	r0, r0, #31
    ++*offset;
   28394:	6863      	ldr	r3, [r4, #4]
   28396:	3301      	adds	r3, #1
   28398:	6063      	str	r3, [r4, #4]
    if (additional_information < Value8Bit) {
   2839a:	2817      	cmp	r0, #23
   2839c:	d915      	bls.n	283ca <cbor_value_enter_container+0xac>
    if (unlikely(additional_information > Value64Bit))
   2839e:	281b      	cmp	r0, #27
   283a0:	d835      	bhi.n	2840e <cbor_value_enter_container+0xf0>
    size_t bytesNeeded = (size_t)(1 << (additional_information - Value8Bit));
   283a2:	3818      	subs	r0, #24
   283a4:	2701      	movs	r7, #1
   283a6:	4087      	lsls	r7, r0
    if (unlikely(bytesNeeded > (size_t)(p->end - *offset))) {
   283a8:	6873      	ldr	r3, [r6, #4]
   283aa:	6861      	ldr	r1, [r4, #4]
   283ac:	1a5b      	subs	r3, r3, r1
   283ae:	429f      	cmp	r7, r3
   283b0:	d832      	bhi.n	28418 <cbor_value_enter_container+0xfa>
    } else if (bytesNeeded == 1) {
   283b2:	2f01      	cmp	r7, #1
   283b4:	d118      	bne.n	283e8 <cbor_value_enter_container+0xca>
        *len = p->d->get8(p->d, *offset);
   283b6:	6830      	ldr	r0, [r6, #0]
   283b8:	6803      	ldr	r3, [r0, #0]
   283ba:	4798      	blx	r3
   283bc:	b2c0      	uxtb	r0, r0
   283be:	2100      	movs	r1, #0
    *offset += bytesNeeded;
   283c0:	6863      	ldr	r3, [r4, #4]
   283c2:	441f      	add	r7, r3
   283c4:	6067      	str	r7, [r4, #4]
    return CborNoError;
   283c6:	2300      	movs	r3, #0
   283c8:	e002      	b.n	283d0 <cbor_value_enter_container+0xb2>
        *len = additional_information;
   283ca:	b2c0      	uxtb	r0, r0
   283cc:	2100      	movs	r1, #0
        return CborNoError;
   283ce:	2300      	movs	r3, #0
        assert(err == CborNoError);
   283d0:	bb3b      	cbnz	r3, 28422 <cbor_value_enter_container+0x104>
        recursed->remaining = (uint32_t)len;
   283d2:	60a0      	str	r0, [r4, #8]
        if (recursed->remaining != len || len == UINT32_MAX) {
   283d4:	2300      	movs	r3, #0
   283d6:	428b      	cmp	r3, r1
   283d8:	bf08      	it	eq
   283da:	4280      	cmpeq	r0, r0
   283dc:	d02b      	beq.n	28436 <cbor_value_enter_container+0x118>
            recursed->offset = it->offset;
   283de:	686b      	ldr	r3, [r5, #4]
   283e0:	6063      	str	r3, [r4, #4]
            return CborErrorDataTooLarge;
   283e2:	f44f 6080 	mov.w	r0, #1024	; 0x400
}
   283e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if (bytesNeeded == 2) {
   283e8:	2f02      	cmp	r7, #2
   283ea:	d105      	bne.n	283f8 <cbor_value_enter_container+0xda>
        *len =  p->d->get16(p->d, *offset);
   283ec:	6830      	ldr	r0, [r6, #0]
   283ee:	6843      	ldr	r3, [r0, #4]
   283f0:	4798      	blx	r3
   283f2:	b280      	uxth	r0, r0
   283f4:	2100      	movs	r1, #0
   283f6:	e7e3      	b.n	283c0 <cbor_value_enter_container+0xa2>
    } else if (bytesNeeded == 4) {
   283f8:	2f04      	cmp	r7, #4
   283fa:	d003      	beq.n	28404 <cbor_value_enter_container+0xe6>
        *len =  p->d->get64(p->d, *offset);
   283fc:	6830      	ldr	r0, [r6, #0]
   283fe:	68c3      	ldr	r3, [r0, #12]
   28400:	4798      	blx	r3
   28402:	e7dd      	b.n	283c0 <cbor_value_enter_container+0xa2>
        *len =  p->d->get32(p->d, *offset);
   28404:	6830      	ldr	r0, [r6, #0]
   28406:	6883      	ldr	r3, [r0, #8]
   28408:	4798      	blx	r3
   2840a:	2100      	movs	r1, #0
   2840c:	e7d8      	b.n	283c0 <cbor_value_enter_container+0xa2>
    *len = 1;
   2840e:	2001      	movs	r0, #1
   28410:	2100      	movs	r1, #0
        return CborErrorIllegalNumber;
   28412:	f240 1305 	movw	r3, #261	; 0x105
   28416:	e7db      	b.n	283d0 <cbor_value_enter_container+0xb2>
    *len = 1;
   28418:	2001      	movs	r0, #1
   2841a:	2100      	movs	r1, #0
        return CborErrorUnexpectedEOF;
   2841c:	f240 1301 	movw	r3, #257	; 0x101
   28420:	e7d6      	b.n	283d0 <cbor_value_enter_container+0xb2>
        assert(err == CborNoError);
   28422:	f7e3 fee1 	bl	c1e8 <hal_debugger_connected>
   28426:	b100      	cbz	r0, 2842a <cbor_value_enter_container+0x10c>
   28428:	be01      	bkpt	0x0001
   2842a:	2300      	movs	r3, #0
   2842c:	461a      	mov	r2, r3
   2842e:	4619      	mov	r1, r3
   28430:	4618      	mov	r0, r3
   28432:	f7e4 f913 	bl	c65c <__assert_func>
        if (recursed->remaining != len || len == UINT32_MAX) {
   28436:	2900      	cmp	r1, #0
   28438:	bf08      	it	eq
   2843a:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
   2843e:	d0ce      	beq.n	283de <cbor_value_enter_container+0xc0>
        if (recursed->type == CborMapType) {
   28440:	7ba3      	ldrb	r3, [r4, #14]
   28442:	2ba0      	cmp	r3, #160	; 0xa0
   28444:	d006      	beq.n	28454 <cbor_value_enter_container+0x136>
        if (len != 0)
   28446:	ea50 0301 	orrs.w	r3, r0, r1
   2844a:	d089      	beq.n	28360 <cbor_value_enter_container+0x42>
            return preparse_value(recursed);
   2844c:	4620      	mov	r0, r4
   2844e:	f7ff fc99 	bl	27d84 <preparse_value>
   28452:	e7c8      	b.n	283e6 <cbor_value_enter_container+0xc8>
            if (recursed->remaining > UINT32_MAX / 2) {
   28454:	2800      	cmp	r0, #0
   28456:	db02      	blt.n	2845e <cbor_value_enter_container+0x140>
            recursed->remaining *= 2;
   28458:	0046      	lsls	r6, r0, #1
   2845a:	60a6      	str	r6, [r4, #8]
   2845c:	e7f3      	b.n	28446 <cbor_value_enter_container+0x128>
                recursed->offset = it->offset;
   2845e:	686b      	ldr	r3, [r5, #4]
   28460:	6063      	str	r3, [r4, #4]
                return CborErrorDataTooLarge;
   28462:	f44f 6080 	mov.w	r0, #1024	; 0x400
   28466:	e7be      	b.n	283e6 <cbor_value_enter_container+0xc8>

00028468 <cbor_value_leave_container>:
{
   28468:	b508      	push	{r3, lr}
   2846a:	7b83      	ldrb	r3, [r0, #14]
   2846c:	2b80      	cmp	r3, #128	; 0x80
   2846e:	d00d      	beq.n	2848c <cbor_value_leave_container+0x24>
   28470:	2ba0      	cmp	r3, #160	; 0xa0
   28472:	d009      	beq.n	28488 <cbor_value_leave_container+0x20>
   28474:	2300      	movs	r3, #0
    assert(cbor_value_is_container(it));
   28476:	b15b      	cbz	r3, 28490 <cbor_value_leave_container+0x28>
    assert(recursed->type == CborInvalidType);
   28478:	7b8b      	ldrb	r3, [r1, #14]
   2847a:	2bff      	cmp	r3, #255	; 0xff
   2847c:	d112      	bne.n	284a4 <cbor_value_leave_container+0x3c>
    it->offset = recursed->offset;
   2847e:	684b      	ldr	r3, [r1, #4]
   28480:	6043      	str	r3, [r0, #4]
    return preparse_next_value(it);
   28482:	f7ff fd21 	bl	27ec8 <preparse_next_value>
}
   28486:	bd08      	pop	{r3, pc}
   28488:	2301      	movs	r3, #1
   2848a:	e7f4      	b.n	28476 <cbor_value_leave_container+0xe>
   2848c:	2301      	movs	r3, #1
   2848e:	e7f2      	b.n	28476 <cbor_value_leave_container+0xe>
    assert(cbor_value_is_container(it));
   28490:	f7e3 feaa 	bl	c1e8 <hal_debugger_connected>
   28494:	b100      	cbz	r0, 28498 <cbor_value_leave_container+0x30>
   28496:	be01      	bkpt	0x0001
   28498:	2300      	movs	r3, #0
   2849a:	461a      	mov	r2, r3
   2849c:	4619      	mov	r1, r3
   2849e:	4618      	mov	r0, r3
   284a0:	f7e4 f8dc 	bl	c65c <__assert_func>
    assert(recursed->type == CborInvalidType);
   284a4:	f7e3 fea0 	bl	c1e8 <hal_debugger_connected>
   284a8:	b100      	cbz	r0, 284ac <cbor_value_leave_container+0x44>
   284aa:	be01      	bkpt	0x0001
   284ac:	2300      	movs	r3, #0
   284ae:	461a      	mov	r2, r3
   284b0:	4619      	mov	r1, r3
   284b2:	4618      	mov	r0, r3
   284b4:	f7e4 f8d2 	bl	c65c <__assert_func>

000284b8 <_cbor_value_copy_string>:
 * \sa cbor_value_dup_text_string(), cbor_value_copy_text_string(), cbor_value_get_string_length(), cbor_value_calculate_string_length()
 */

CborError _cbor_value_copy_string(const CborValue *value, void *buffer,
                                 size_t *buflen, CborValue *next)
{
   284b8:	b510      	push	{r4, lr}
   284ba:	b084      	sub	sp, #16
    bool copied_all;
    CborError err = iterate_string_chunks(value, (char*)buffer, buflen, &copied_all, next,
   284bc:	460c      	mov	r4, r1
   284be:	b189      	cbz	r1, 284e4 <_cbor_value_copy_string+0x2c>
                                          buffer ? (IterateFunction) value->parser->d->cpy : iterate_noop);
   284c0:	6801      	ldr	r1, [r0, #0]
   284c2:	6809      	ldr	r1, [r1, #0]
    CborError err = iterate_string_chunks(value, (char*)buffer, buflen, &copied_all, next,
   284c4:	6949      	ldr	r1, [r1, #20]
   284c6:	9101      	str	r1, [sp, #4]
   284c8:	9300      	str	r3, [sp, #0]
   284ca:	f10d 030f 	add.w	r3, sp, #15
   284ce:	4621      	mov	r1, r4
   284d0:	f7ff fd75 	bl	27fbe <iterate_string_chunks>
    return err ? err :
   284d4:	4603      	mov	r3, r0
   284d6:	b910      	cbnz	r0, 284de <_cbor_value_copy_string+0x26>
                 copied_all ? CborNoError : CborErrorOutOfMemory;
   284d8:	f89d 200f 	ldrb.w	r2, [sp, #15]
    return err ? err :
   284dc:	b122      	cbz	r2, 284e8 <_cbor_value_copy_string+0x30>
}
   284de:	4618      	mov	r0, r3
   284e0:	b004      	add	sp, #16
   284e2:	bd10      	pop	{r4, pc}
    CborError err = iterate_string_chunks(value, (char*)buffer, buflen, &copied_all, next,
   284e4:	4902      	ldr	r1, [pc, #8]	; (284f0 <_cbor_value_copy_string+0x38>)
   284e6:	e7ee      	b.n	284c6 <_cbor_value_copy_string+0xe>
    return err ? err :
   284e8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
   284ec:	e7f7      	b.n	284de <_cbor_value_copy_string+0x26>
   284ee:	bf00      	nop
   284f0:	00027d81 	.word	0x00027d81

000284f4 <hexDump>:
 *      by a colon (":"), enclosed in curly braces ("{" and "}").
 *      If the map length is indeterminate, an underscore ("_") appears immediately after the opening brace.
 */

static int hexDump(FILE *out, const uint8_t *buffer, size_t n)
{
   284f4:	b570      	push	{r4, r5, r6, lr}
   284f6:	4606      	mov	r6, r0
    while (n--) {
   284f8:	1e54      	subs	r4, r2, #1
   284fa:	b152      	cbz	r2, 28512 <hexDump+0x1e>
        int r = fprintf(out, "%02" PRIx8, *buffer++);
   284fc:	1c4d      	adds	r5, r1, #1
   284fe:	780a      	ldrb	r2, [r1, #0]
   28500:	4905      	ldr	r1, [pc, #20]	; (28518 <hexDump+0x24>)
   28502:	4630      	mov	r0, r6
   28504:	f001 fe56 	bl	2a1b4 <fprintf>
    while (n--) {
   28508:	4622      	mov	r2, r4
        if (r < 0)
   2850a:	2800      	cmp	r0, #0
   2850c:	db02      	blt.n	28514 <hexDump+0x20>
        int r = fprintf(out, "%02" PRIx8, *buffer++);
   2850e:	4629      	mov	r1, r5
   28510:	e7f2      	b.n	284f8 <hexDump+0x4>
            return r;
    }
    return 0;   /* should be n * 2, but we don't have the original n anymore */
   28512:	2000      	movs	r0, #0
}
   28514:	bd70      	pop	{r4, r5, r6, pc}
   28516:	bf00      	nop
   28518:	0002af74 	.word	0x0002af74

0002851c <utf8EscapedDump>:

/* This function decodes buffer as UTF-8 and prints as escaped UTF-16.
 * On UTF-8 decoding error, it returns CborErrorInvalidUtf8TextString */
static int utf8EscapedDump(FILE *out, const char *buffer, size_t n)
{
   2851c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2851e:	4606      	mov	r6, r0
   28520:	460c      	mov	r4, r1
    uint32_t uc;
    while (n--) {
   28522:	e07b      	b.n	2861c <utf8EscapedDump+0x100>
        uc = (uint8_t)*buffer++;
        if (uc < 0x80) {
            /* single-byte UTF-8 */
            if (uc < 0x7f && uc >= 0x20 && uc != '\\' && uc != '"') {
                if (fprintf(out, "%c", (char)uc) < 0)
   28524:	4966      	ldr	r1, [pc, #408]	; (286c0 <utf8EscapedDump+0x1a4>)
   28526:	4630      	mov	r0, r6
   28528:	f001 fe44 	bl	2a1b4 <fprintf>
   2852c:	2800      	cmp	r0, #0
   2852e:	f2c0 80a5 	blt.w	2867c <utf8EscapedDump+0x160>
        uc = (uint8_t)*buffer++;
   28532:	463c      	mov	r4, r7
   28534:	e071      	b.n	2861a <utf8EscapedDump+0xfe>
                continue;
            }

            /* print as an escape sequence */
            char escaped = (char)uc;
            switch (uc) {
   28536:	2a22      	cmp	r2, #34	; 0x22
   28538:	d007      	beq.n	2854a <utf8EscapedDump+0x2e>
   2853a:	2a5c      	cmp	r2, #92	; 0x5c
   2853c:	d005      	beq.n	2854a <utf8EscapedDump+0x2e>
   2853e:	2a0d      	cmp	r2, #13
   28540:	f040 8086 	bne.w	28650 <utf8EscapedDump+0x134>
                break;
            case '\n':
                escaped = 'n';
                break;
            case '\r':
                escaped = 'r';
   28544:	2272      	movs	r2, #114	; 0x72
                break;
   28546:	e000      	b.n	2854a <utf8EscapedDump+0x2e>
                escaped = 'f';
   28548:	2266      	movs	r2, #102	; 0x66
                escaped = 't';
                break;
            default:
                goto print_utf16;
            }
            if (fprintf(out, "\\%c", escaped) < 0)
   2854a:	495e      	ldr	r1, [pc, #376]	; (286c4 <utf8EscapedDump+0x1a8>)
   2854c:	4630      	mov	r0, r6
   2854e:	f001 fe31 	bl	2a1b4 <fprintf>
   28552:	2800      	cmp	r0, #0
   28554:	f2c0 8094 	blt.w	28680 <utf8EscapedDump+0x164>
        uc = (uint8_t)*buffer++;
   28558:	463c      	mov	r4, r7
   2855a:	e05e      	b.n	2861a <utf8EscapedDump+0xfe>
                escaped = 'n';
   2855c:	226e      	movs	r2, #110	; 0x6e
                break;
   2855e:	e7f4      	b.n	2854a <utf8EscapedDump+0x2e>
                escaped = 't';
   28560:	2274      	movs	r2, #116	; 0x74
                break;
   28562:	e7f2      	b.n	2854a <utf8EscapedDump+0x2e>
                escaped = 'b';
   28564:	2262      	movs	r2, #98	; 0x62
   28566:	e7f0      	b.n	2854a <utf8EscapedDump+0x2e>
        }

        /* multi-byte UTF-8, decode it */
        unsigned charsNeeded;
        uint32_t min_uc;
        if (unlikely(uc <= 0xC1))
   28568:	2ac1      	cmp	r2, #193	; 0xc1
   2856a:	f240 808b 	bls.w	28684 <utf8EscapedDump+0x168>
            return CborErrorInvalidUtf8TextString;
        if (uc < 0xE0) {
   2856e:	2adf      	cmp	r2, #223	; 0xdf
   28570:	d82f      	bhi.n	285d2 <utf8EscapedDump+0xb6>
            /* two-byte UTF-8 */
            charsNeeded = 2;
            min_uc = 0x80;
            uc &= 0x1f;
   28572:	f002 021f 	and.w	r2, r2, #31
            min_uc = 0x80;
   28576:	2780      	movs	r7, #128	; 0x80
            charsNeeded = 2;
   28578:	2302      	movs	r3, #2
            uc &= 0x07;
        } else {
            return CborErrorInvalidUtf8TextString;
        }

        if (n < charsNeeded - 1)
   2857a:	1e59      	subs	r1, r3, #1
   2857c:	42a9      	cmp	r1, r5
   2857e:	f200 8087 	bhi.w	28690 <utf8EscapedDump+0x174>
            return CborErrorInvalidUtf8TextString;

        /* first continuation character */
        uint8_t b = (uint8_t)*buffer++;
   28582:	f104 0c02 	add.w	ip, r4, #2
   28586:	7861      	ldrb	r1, [r4, #1]
        if ((b & 0xc0) != 0x80)
   28588:	f001 00c0 	and.w	r0, r1, #192	; 0xc0
   2858c:	2880      	cmp	r0, #128	; 0x80
   2858e:	f040 8082 	bne.w	28696 <utf8EscapedDump+0x17a>
            return CborErrorInvalidUtf8TextString;
        uc <<= 6;
        uc |= b & 0x3f;
   28592:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   28596:	ea41 1182 	orr.w	r1, r1, r2, lsl #6

        if (charsNeeded > 2) {
   2859a:	2b02      	cmp	r3, #2
   2859c:	d929      	bls.n	285f2 <utf8EscapedDump+0xd6>
            /* second continuation character */
            b = (uint8_t)*buffer++;
   2859e:	f104 0c03 	add.w	ip, r4, #3
   285a2:	78a2      	ldrb	r2, [r4, #2]
            if ((b & 0xc0) != 0x80)
   285a4:	f002 00c0 	and.w	r0, r2, #192	; 0xc0
   285a8:	2880      	cmp	r0, #128	; 0x80
   285aa:	d177      	bne.n	2869c <utf8EscapedDump+0x180>
                return CborErrorInvalidUtf8TextString;
            uc <<= 6;
            uc |= b & 0x3f;
   285ac:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   285b0:	ea42 1181 	orr.w	r1, r2, r1, lsl #6

            if (charsNeeded > 3) {
   285b4:	2b03      	cmp	r3, #3
   285b6:	d94d      	bls.n	28654 <utf8EscapedDump+0x138>
                /* third continuation character */
                b = (uint8_t)*buffer++;
   285b8:	f104 0c04 	add.w	ip, r4, #4
   285bc:	78e2      	ldrb	r2, [r4, #3]
                if ((b & 0xc0) != 0x80)
   285be:	f002 00c0 	and.w	r0, r2, #192	; 0xc0
   285c2:	2880      	cmp	r0, #128	; 0x80
   285c4:	d16d      	bne.n	286a2 <utf8EscapedDump+0x186>
                    return CborErrorInvalidUtf8TextString;
                uc <<= 6;
                uc |= b & 0x3f;
   285c6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   285ca:	ea42 1181 	orr.w	r1, r2, r1, lsl #6
                b = (uint8_t)*buffer++;
   285ce:	4664      	mov	r4, ip
   285d0:	e010      	b.n	285f4 <utf8EscapedDump+0xd8>
        } else if (uc < 0xF0) {
   285d2:	2aef      	cmp	r2, #239	; 0xef
   285d4:	d805      	bhi.n	285e2 <utf8EscapedDump+0xc6>
            uc &= 0x0f;
   285d6:	f002 020f 	and.w	r2, r2, #15
            min_uc = 0x800;
   285da:	f44f 6700 	mov.w	r7, #2048	; 0x800
            charsNeeded = 3;
   285de:	2303      	movs	r3, #3
   285e0:	e7cb      	b.n	2857a <utf8EscapedDump+0x5e>
        } else if (uc < 0xF5) {
   285e2:	2af4      	cmp	r2, #244	; 0xf4
   285e4:	d851      	bhi.n	2868a <utf8EscapedDump+0x16e>
            uc &= 0x07;
   285e6:	f002 0207 	and.w	r2, r2, #7
            min_uc = 0x10000;
   285ea:	f44f 3780 	mov.w	r7, #65536	; 0x10000
            charsNeeded = 4;
   285ee:	2304      	movs	r3, #4
   285f0:	e7c3      	b.n	2857a <utf8EscapedDump+0x5e>
        uint8_t b = (uint8_t)*buffer++;
   285f2:	4664      	mov	r4, ip
            }
        }

        /* overlong sequence? surrogate pair? out or range? */
        if (uc < min_uc || uc - 0xd800U < 2048U || uc > 0x10ffff)
   285f4:	42b9      	cmp	r1, r7
   285f6:	d357      	bcc.n	286a8 <utf8EscapedDump+0x18c>
   285f8:	f5a1 4258 	sub.w	r2, r1, #55296	; 0xd800
   285fc:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
   28600:	d355      	bcc.n	286ae <utf8EscapedDump+0x192>
   28602:	f5b1 1f88 	cmp.w	r1, #1114112	; 0x110000
   28606:	d255      	bcs.n	286b4 <utf8EscapedDump+0x198>
            return CborErrorInvalidUtf8TextString;

        /* now print the sequence */
        if (charsNeeded > 3) {
   28608:	2b03      	cmp	r3, #3
   2860a:	d825      	bhi.n	28658 <utf8EscapedDump+0x13c>
                        (uc % 0x0400) + 0xdc00) < 0)
                return CborErrorIO;
        } else {
print_utf16:
            /* no surrogate pair needed */
            if (fprintf(out, "\\u%04" PRIX32, uc) < 0)
   2860c:	460a      	mov	r2, r1
   2860e:	492e      	ldr	r1, [pc, #184]	; (286c8 <utf8EscapedDump+0x1ac>)
   28610:	4630      	mov	r0, r6
   28612:	f001 fdcf 	bl	2a1b4 <fprintf>
   28616:	2800      	cmp	r0, #0
   28618:	db4f      	blt.n	286ba <utf8EscapedDump+0x19e>
        uc = (uint8_t)*buffer++;
   2861a:	462a      	mov	r2, r5
    while (n--) {
   2861c:	1e55      	subs	r5, r2, #1
   2861e:	b35a      	cbz	r2, 28678 <utf8EscapedDump+0x15c>
        uc = (uint8_t)*buffer++;
   28620:	1c67      	adds	r7, r4, #1
   28622:	7822      	ldrb	r2, [r4, #0]
   28624:	4611      	mov	r1, r2
        if (uc < 0x80) {
   28626:	2a7f      	cmp	r2, #127	; 0x7f
   28628:	d89e      	bhi.n	28568 <utf8EscapedDump+0x4c>
            if (uc < 0x7f && uc >= 0x20 && uc != '\\' && uc != '"') {
   2862a:	f1a2 0320 	sub.w	r3, r2, #32
   2862e:	2b5e      	cmp	r3, #94	; 0x5e
   28630:	d804      	bhi.n	2863c <utf8EscapedDump+0x120>
   28632:	2a5c      	cmp	r2, #92	; 0x5c
   28634:	d002      	beq.n	2863c <utf8EscapedDump+0x120>
   28636:	2a22      	cmp	r2, #34	; 0x22
   28638:	f47f af74 	bne.w	28524 <utf8EscapedDump+0x8>
            switch (uc) {
   2863c:	2a0c      	cmp	r2, #12
   2863e:	d083      	beq.n	28548 <utf8EscapedDump+0x2c>
   28640:	f63f af79 	bhi.w	28536 <utf8EscapedDump+0x1a>
   28644:	2a09      	cmp	r2, #9
   28646:	d08b      	beq.n	28560 <utf8EscapedDump+0x44>
   28648:	2a0a      	cmp	r2, #10
   2864a:	d087      	beq.n	2855c <utf8EscapedDump+0x40>
   2864c:	2a08      	cmp	r2, #8
   2864e:	d089      	beq.n	28564 <utf8EscapedDump+0x48>
        uc = (uint8_t)*buffer++;
   28650:	463c      	mov	r4, r7
   28652:	e7db      	b.n	2860c <utf8EscapedDump+0xf0>
            b = (uint8_t)*buffer++;
   28654:	4664      	mov	r4, ip
   28656:	e7cd      	b.n	285f4 <utf8EscapedDump+0xd8>
                        (uc % 0x0400) + 0xdc00) < 0)
   28658:	f3c1 0309 	ubfx	r3, r1, #0, #10
            if (fprintf(out, "\\u%04" PRIX32 "\\u%04" PRIX32,
   2865c:	f503 435c 	add.w	r3, r3, #56320	; 0xdc00
   28660:	f24d 72c0 	movw	r2, #55232	; 0xd7c0
   28664:	eb02 2291 	add.w	r2, r2, r1, lsr #10
   28668:	4918      	ldr	r1, [pc, #96]	; (286cc <utf8EscapedDump+0x1b0>)
   2866a:	4630      	mov	r0, r6
   2866c:	f001 fda2 	bl	2a1b4 <fprintf>
   28670:	2800      	cmp	r0, #0
   28672:	dad2      	bge.n	2861a <utf8EscapedDump+0xfe>
                return CborErrorIO;
   28674:	2004      	movs	r0, #4
   28676:	e004      	b.n	28682 <utf8EscapedDump+0x166>
                return CborErrorIO;
        }
    }
    return CborNoError;
   28678:	2000      	movs	r0, #0
   2867a:	e002      	b.n	28682 <utf8EscapedDump+0x166>
                    return CborErrorIO;
   2867c:	2004      	movs	r0, #4
   2867e:	e000      	b.n	28682 <utf8EscapedDump+0x166>
                return CborErrorIO;
   28680:	2004      	movs	r0, #4
}
   28682:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return CborErrorInvalidUtf8TextString;
   28684:	f44f 7001 	mov.w	r0, #516	; 0x204
   28688:	e7fb      	b.n	28682 <utf8EscapedDump+0x166>
            return CborErrorInvalidUtf8TextString;
   2868a:	f44f 7001 	mov.w	r0, #516	; 0x204
   2868e:	e7f8      	b.n	28682 <utf8EscapedDump+0x166>
            return CborErrorInvalidUtf8TextString;
   28690:	f44f 7001 	mov.w	r0, #516	; 0x204
   28694:	e7f5      	b.n	28682 <utf8EscapedDump+0x166>
            return CborErrorInvalidUtf8TextString;
   28696:	f44f 7001 	mov.w	r0, #516	; 0x204
   2869a:	e7f2      	b.n	28682 <utf8EscapedDump+0x166>
                return CborErrorInvalidUtf8TextString;
   2869c:	f44f 7001 	mov.w	r0, #516	; 0x204
   286a0:	e7ef      	b.n	28682 <utf8EscapedDump+0x166>
                    return CborErrorInvalidUtf8TextString;
   286a2:	f44f 7001 	mov.w	r0, #516	; 0x204
   286a6:	e7ec      	b.n	28682 <utf8EscapedDump+0x166>
            return CborErrorInvalidUtf8TextString;
   286a8:	f44f 7001 	mov.w	r0, #516	; 0x204
   286ac:	e7e9      	b.n	28682 <utf8EscapedDump+0x166>
   286ae:	f44f 7001 	mov.w	r0, #516	; 0x204
   286b2:	e7e6      	b.n	28682 <utf8EscapedDump+0x166>
   286b4:	f44f 7001 	mov.w	r0, #516	; 0x204
   286b8:	e7e3      	b.n	28682 <utf8EscapedDump+0x166>
                return CborErrorIO;
   286ba:	2004      	movs	r0, #4
   286bc:	e7e1      	b.n	28682 <utf8EscapedDump+0x166>
   286be:	bf00      	nop
   286c0:	0002bcec 	.word	0x0002bcec
   286c4:	0002bcf0 	.word	0x0002bcf0
   286c8:	0002bd04 	.word	0x0002bd04
   286cc:	0002bcf4 	.word	0x0002bcf4

000286d0 <value_to_pretty>:
    }
    return CborNoError;
}

static CborError value_to_pretty(FILE *out, CborValue *it)
{
   286d0:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
   286d4:	b086      	sub	sp, #24
   286d6:	4607      	mov	r7, r0
   286d8:	460d      	mov	r5, r1
{ return (CborType)value->type; }
   286da:	7b8c      	ldrb	r4, [r1, #14]
    CborError err;
    CborType type = cbor_value_get_type(it);
    switch (type) {
   286dc:	2ca0      	cmp	r4, #160	; 0xa0
   286de:	d05e      	beq.n	2879e <value_to_pretty+0xce>
   286e0:	d91c      	bls.n	2871c <value_to_pretty+0x4c>
   286e2:	2cf5      	cmp	r4, #245	; 0xf5
   286e4:	f000 81a0 	beq.w	28a28 <value_to_pretty+0x358>
   286e8:	d874      	bhi.n	287d4 <value_to_pretty+0x104>
   286ea:	2cc0      	cmp	r4, #192	; 0xc0
   286ec:	f000 8132 	beq.w	28954 <value_to_pretty+0x284>
   286f0:	2ce0      	cmp	r4, #224	; 0xe0
   286f2:	f040 81b3 	bne.w	28a5c <value_to_pretty+0x38c>
{ return value->type == CborSimpleType; }
   286f6:	7b8b      	ldrb	r3, [r1, #14]
    assert(cbor_value_is_simple_type(value));
   286f8:	2be0      	cmp	r3, #224	; 0xe0
   286fa:	f040 8164 	bne.w	289c6 <value_to_pretty+0x2f6>
    }

    case CborSimpleType: {
        uint8_t simple_type;
        cbor_value_get_simple_type(it, &simple_type);  /* can't fail */
        if (fprintf(out, "simple(%" PRIu8 ")", simple_type) < 0)
   286fe:	7b0a      	ldrb	r2, [r1, #12]
   28700:	49b6      	ldr	r1, [pc, #728]	; (289dc <value_to_pretty+0x30c>)
   28702:	f001 fd57 	bl	2a1b4 <fprintf>
   28706:	2800      	cmp	r0, #0
   28708:	f2c0 81b3 	blt.w	28a72 <value_to_pretty+0x3a2>
        if (fprintf(out, "invalid") < 0)
            return CborErrorIO;
        return CborErrorUnknownType;
    }

    err = cbor_value_advance_fixed(it);
   2870c:	4628      	mov	r0, r5
   2870e:	f7ff fde2 	bl	282d6 <cbor_value_advance_fixed>
   28712:	4606      	mov	r6, r0
    return err;
}
   28714:	4630      	mov	r0, r6
   28716:	b006      	add	sp, #24
   28718:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
    switch (type) {
   2871c:	2c40      	cmp	r4, #64	; 0x40
   2871e:	f000 80c1 	beq.w	288a4 <value_to_pretty+0x1d4>
   28722:	d922      	bls.n	2876a <value_to_pretty+0x9a>
   28724:	2c60      	cmp	r4, #96	; 0x60
   28726:	d137      	bne.n	28798 <value_to_pretty+0xc8>
        size_t n = 0;
   28728:	2300      	movs	r3, #0
   2872a:	9301      	str	r3, [sp, #4]
{ return value->type == CborTextStringType; }
   2872c:	7b8b      	ldrb	r3, [r1, #14]
    assert(cbor_value_is_text_string(value));
   2872e:	2b60      	cmp	r3, #96	; 0x60
   28730:	f040 80f3 	bne.w	2891a <value_to_pretty+0x24a>
    return _cbor_value_dup_string(value, (void **)buffer, buflen, next);
   28734:	460b      	mov	r3, r1
   28736:	aa01      	add	r2, sp, #4
   28738:	a902      	add	r1, sp, #8
   2873a:	4628      	mov	r0, r5
   2873c:	f000 f9da 	bl	28af4 <_cbor_value_dup_string>
        if (err)
   28740:	4606      	mov	r6, r0
   28742:	2800      	cmp	r0, #0
   28744:	d1e6      	bne.n	28714 <value_to_pretty+0x44>
        bool failed = fprintf(out, "\"") < 0
   28746:	49a6      	ldr	r1, [pc, #664]	; (289e0 <value_to_pretty+0x310>)
   28748:	4638      	mov	r0, r7
   2874a:	f001 fd33 	bl	2a1b4 <fprintf>
                      || fprintf(out, "\"") < 0;
   2874e:	2800      	cmp	r0, #0
   28750:	f280 80ed 	bge.w	2892e <value_to_pretty+0x25e>
   28754:	2301      	movs	r3, #1
        bool failed = fprintf(out, "\"") < 0
   28756:	461c      	mov	r4, r3
        free(buffer);
   28758:	9802      	ldr	r0, [sp, #8]
   2875a:	f001 fa27 	bl	29bac <free>
        return err != CborNoError ? err :
   2875e:	2e00      	cmp	r6, #0
   28760:	d1d8      	bne.n	28714 <value_to_pretty+0x44>
   28762:	2c00      	cmp	r4, #0
   28764:	d0d6      	beq.n	28714 <value_to_pretty+0x44>
   28766:	2604      	movs	r6, #4
   28768:	e7d4      	b.n	28714 <value_to_pretty+0x44>
    switch (type) {
   2876a:	2c00      	cmp	r4, #0
   2876c:	f040 8176 	bne.w	28a5c <value_to_pretty+0x38c>
{ return value->type == CborIntegerType; }
   28770:	7b8b      	ldrb	r3, [r1, #14]
    assert(cbor_value_is_integer(value));
   28772:	2b00      	cmp	r3, #0
   28774:	d160      	bne.n	28838 <value_to_pretty+0x168>
    return value->flags & CborIteratorFlag_IntegerValueTooLarge ?
   28776:	7bcb      	ldrb	r3, [r1, #15]
                _cbor_value_decode_int64_internal(value) : value->extra;
   28778:	f013 0f01 	tst.w	r3, #1
   2877c:	d166      	bne.n	2884c <value_to_pretty+0x17c>
   2877e:	f8b1 b00c 	ldrh.w	fp, [r1, #12]
   28782:	f04f 0c00 	mov.w	ip, #0
{ return value->type == CborIntegerType; }
   28786:	7ba9      	ldrb	r1, [r5, #14]
{ return cbor_value_is_integer(value) && (value->flags & CborIteratorFlag_NegativeInteger) == 0; }
   28788:	2900      	cmp	r1, #0
   2878a:	d165      	bne.n	28858 <value_to_pretty+0x188>
   2878c:	7be9      	ldrb	r1, [r5, #15]
   2878e:	f011 0f02 	tst.w	r1, #2
   28792:	d073      	beq.n	2887c <value_to_pretty+0x1ac>
   28794:	2100      	movs	r1, #0
   28796:	e060      	b.n	2885a <value_to_pretty+0x18a>
   28798:	2c80      	cmp	r4, #128	; 0x80
   2879a:	f040 815f 	bne.w	28a5c <value_to_pretty+0x38c>
        if (fprintf(out, type == CborArrayType ? "[" : "{") < 0)
   2879e:	2c80      	cmp	r4, #128	; 0x80
   287a0:	d025      	beq.n	287ee <value_to_pretty+0x11e>
   287a2:	4990      	ldr	r1, [pc, #576]	; (289e4 <value_to_pretty+0x314>)
   287a4:	4638      	mov	r0, r7
   287a6:	f001 fd05 	bl	2a1b4 <fprintf>
   287aa:	2800      	cmp	r0, #0
   287ac:	db40      	blt.n	28830 <value_to_pretty+0x160>
{ return (value->flags & CborIteratorFlag_UnknownLength) == 0; }
   287ae:	7beb      	ldrb	r3, [r5, #15]
        if (!cbor_value_is_length_known(it)) {
   287b0:	f013 0f04 	tst.w	r3, #4
   287b4:	d005      	beq.n	287c2 <value_to_pretty+0xf2>
            if (fprintf(out, "_ ") < 0)
   287b6:	498c      	ldr	r1, [pc, #560]	; (289e8 <value_to_pretty+0x318>)
   287b8:	4638      	mov	r0, r7
   287ba:	f001 fcfb 	bl	2a1b4 <fprintf>
   287be:	2800      	cmp	r0, #0
   287c0:	db38      	blt.n	28834 <value_to_pretty+0x164>
        err = cbor_value_enter_container(it, &recursed);
   287c2:	a902      	add	r1, sp, #8
   287c4:	4628      	mov	r0, r5
   287c6:	f7ff fdaa 	bl	2831e <cbor_value_enter_container>
        if (err) {
   287ca:	4606      	mov	r6, r0
   287cc:	b188      	cbz	r0, 287f2 <value_to_pretty+0x122>
            it->offset = recursed.offset;
   287ce:	9b03      	ldr	r3, [sp, #12]
   287d0:	606b      	str	r3, [r5, #4]
            return err;       /* parse error */
   287d2:	e79f      	b.n	28714 <value_to_pretty+0x44>
    switch (type) {
   287d4:	2cf6      	cmp	r4, #246	; 0xf6
   287d6:	f000 811f 	beq.w	28a18 <value_to_pretty+0x348>
   287da:	2cf7      	cmp	r4, #247	; 0xf7
   287dc:	f040 813e 	bne.w	28a5c <value_to_pretty+0x38c>
        if (fprintf(out, "undefined") < 0)
   287e0:	4982      	ldr	r1, [pc, #520]	; (289ec <value_to_pretty+0x31c>)
   287e2:	f001 fce7 	bl	2a1b4 <fprintf>
   287e6:	2800      	cmp	r0, #0
   287e8:	da90      	bge.n	2870c <value_to_pretty+0x3c>
            return CborErrorIO;
   287ea:	2604      	movs	r6, #4
   287ec:	e792      	b.n	28714 <value_to_pretty+0x44>
        if (fprintf(out, type == CborArrayType ? "[" : "{") < 0)
   287ee:	4980      	ldr	r1, [pc, #512]	; (289f0 <value_to_pretty+0x320>)
   287f0:	e7d8      	b.n	287a4 <value_to_pretty+0xd4>
        err = container_to_pretty(out, &recursed, type);
   287f2:	4622      	mov	r2, r4
   287f4:	a902      	add	r1, sp, #8
   287f6:	4638      	mov	r0, r7
   287f8:	f000 f946 	bl	28a88 <container_to_pretty>
        if (err) {
   287fc:	4606      	mov	r6, r0
   287fe:	b110      	cbz	r0, 28806 <value_to_pretty+0x136>
            it->offset = recursed.offset;
   28800:	9b03      	ldr	r3, [sp, #12]
   28802:	606b      	str	r3, [r5, #4]
            return err;       /* parse error */
   28804:	e786      	b.n	28714 <value_to_pretty+0x44>
        err = cbor_value_leave_container(it, &recursed);
   28806:	a902      	add	r1, sp, #8
   28808:	4628      	mov	r0, r5
   2880a:	f7ff fe2d 	bl	28468 <cbor_value_leave_container>
        if (err)
   2880e:	4606      	mov	r6, r0
   28810:	2800      	cmp	r0, #0
   28812:	f47f af7f 	bne.w	28714 <value_to_pretty+0x44>
        if (fprintf(out, type == CborArrayType ? "]" : "}") < 0)
   28816:	2c80      	cmp	r4, #128	; 0x80
   28818:	d008      	beq.n	2882c <value_to_pretty+0x15c>
   2881a:	4976      	ldr	r1, [pc, #472]	; (289f4 <value_to_pretty+0x324>)
   2881c:	4638      	mov	r0, r7
   2881e:	f001 fcc9 	bl	2a1b4 <fprintf>
   28822:	2800      	cmp	r0, #0
   28824:	f6bf af76 	bge.w	28714 <value_to_pretty+0x44>
            return CborErrorIO;
   28828:	2604      	movs	r6, #4
   2882a:	e773      	b.n	28714 <value_to_pretty+0x44>
        if (fprintf(out, type == CborArrayType ? "]" : "}") < 0)
   2882c:	4972      	ldr	r1, [pc, #456]	; (289f8 <value_to_pretty+0x328>)
   2882e:	e7f5      	b.n	2881c <value_to_pretty+0x14c>
            return CborErrorIO;
   28830:	2604      	movs	r6, #4
   28832:	e76f      	b.n	28714 <value_to_pretty+0x44>
                return CborErrorIO;
   28834:	2604      	movs	r6, #4
   28836:	e76d      	b.n	28714 <value_to_pretty+0x44>
    assert(cbor_value_is_integer(value));
   28838:	f7e3 fcd6 	bl	c1e8 <hal_debugger_connected>
   2883c:	b100      	cbz	r0, 28840 <value_to_pretty+0x170>
   2883e:	be01      	bkpt	0x0001
   28840:	2300      	movs	r3, #0
   28842:	461a      	mov	r2, r3
   28844:	4619      	mov	r1, r3
   28846:	4618      	mov	r0, r3
   28848:	f7e3 ff08 	bl	c65c <__assert_func>
                _cbor_value_decode_int64_internal(value) : value->extra;
   2884c:	4608      	mov	r0, r1
   2884e:	f7ff fcea 	bl	28226 <_cbor_value_decode_int64_internal>
   28852:	4683      	mov	fp, r0
   28854:	468c      	mov	ip, r1
   28856:	e796      	b.n	28786 <value_to_pretty+0xb6>
{ return cbor_value_is_integer(value) && (value->flags & CborIteratorFlag_NegativeInteger) == 0; }
   28858:	2100      	movs	r1, #0
        if (cbor_value_is_unsigned_integer(it)) {
   2885a:	b989      	cbnz	r1, 28880 <value_to_pretty+0x1b0>
            if (++val) {                /* unsigned overflow may happen */
   2885c:	f11b 0201 	adds.w	r2, fp, #1
   28860:	f14c 0300 	adc.w	r3, ip, #0
   28864:	ea52 0103 	orrs.w	r1, r2, r3
   28868:	d014      	beq.n	28894 <value_to_pretty+0x1c4>
                if (fprintf(out, "-%" PRIu64, val) < 0)
   2886a:	4964      	ldr	r1, [pc, #400]	; (289fc <value_to_pretty+0x32c>)
   2886c:	4638      	mov	r0, r7
   2886e:	f001 fca1 	bl	2a1b4 <fprintf>
   28872:	2800      	cmp	r0, #0
   28874:	f6bf af4a 	bge.w	2870c <value_to_pretty+0x3c>
        if (fprintf(out, val ? "true" : "false") < 0)
   28878:	2604      	movs	r6, #4
   2887a:	e74b      	b.n	28714 <value_to_pretty+0x44>
   2887c:	2101      	movs	r1, #1
   2887e:	e7ec      	b.n	2885a <value_to_pretty+0x18a>
            if (fprintf(out, "%" PRIu64, val) < 0)
   28880:	465a      	mov	r2, fp
   28882:	4663      	mov	r3, ip
   28884:	495e      	ldr	r1, [pc, #376]	; (28a00 <value_to_pretty+0x330>)
   28886:	4638      	mov	r0, r7
   28888:	f001 fc94 	bl	2a1b4 <fprintf>
   2888c:	2800      	cmp	r0, #0
   2888e:	f6bf af3d 	bge.w	2870c <value_to_pretty+0x3c>
   28892:	e7f1      	b.n	28878 <value_to_pretty+0x1a8>
                if (fprintf(out, "-18446744073709551616") < 0)
   28894:	495b      	ldr	r1, [pc, #364]	; (28a04 <value_to_pretty+0x334>)
   28896:	4638      	mov	r0, r7
   28898:	f001 fc8c 	bl	2a1b4 <fprintf>
   2889c:	2800      	cmp	r0, #0
   2889e:	f6bf af35 	bge.w	2870c <value_to_pretty+0x3c>
   288a2:	e7e9      	b.n	28878 <value_to_pretty+0x1a8>
        size_t n = 0;
   288a4:	2300      	movs	r3, #0
   288a6:	9301      	str	r3, [sp, #4]
{ return value->type == CborByteStringType; }
   288a8:	7b8b      	ldrb	r3, [r1, #14]
    assert(cbor_value_is_byte_string(value));
   288aa:	2b40      	cmp	r3, #64	; 0x40
   288ac:	d118      	bne.n	288e0 <value_to_pretty+0x210>
    return _cbor_value_dup_string(value, (void **)buffer, buflen, next);
   288ae:	460b      	mov	r3, r1
   288b0:	aa01      	add	r2, sp, #4
   288b2:	a902      	add	r1, sp, #8
   288b4:	4628      	mov	r0, r5
   288b6:	f000 f91d 	bl	28af4 <_cbor_value_dup_string>
        if (err)
   288ba:	4606      	mov	r6, r0
   288bc:	2800      	cmp	r0, #0
   288be:	f47f af29 	bne.w	28714 <value_to_pretty+0x44>
        bool failed = fprintf(out, "h'") < 0 || hexDump(out, buffer, n) < 0 || fprintf(out, "'") < 0;
   288c2:	4951      	ldr	r1, [pc, #324]	; (28a08 <value_to_pretty+0x338>)
   288c4:	4638      	mov	r0, r7
   288c6:	f001 fc75 	bl	2a1b4 <fprintf>
   288ca:	2800      	cmp	r0, #0
   288cc:	da12      	bge.n	288f4 <value_to_pretty+0x224>
   288ce:	2401      	movs	r4, #1
        free(buffer);
   288d0:	9802      	ldr	r0, [sp, #8]
   288d2:	f001 f96b 	bl	29bac <free>
        return failed ? CborErrorIO : CborNoError;
   288d6:	2c00      	cmp	r4, #0
   288d8:	f43f af1c 	beq.w	28714 <value_to_pretty+0x44>
   288dc:	2604      	movs	r6, #4
   288de:	e719      	b.n	28714 <value_to_pretty+0x44>
    assert(cbor_value_is_byte_string(value));
   288e0:	f7e3 fc82 	bl	c1e8 <hal_debugger_connected>
   288e4:	b100      	cbz	r0, 288e8 <value_to_pretty+0x218>
   288e6:	be01      	bkpt	0x0001
   288e8:	2300      	movs	r3, #0
   288ea:	461a      	mov	r2, r3
   288ec:	4619      	mov	r1, r3
   288ee:	4618      	mov	r0, r3
   288f0:	f7e3 feb4 	bl	c65c <__assert_func>
        bool failed = fprintf(out, "h'") < 0 || hexDump(out, buffer, n) < 0 || fprintf(out, "'") < 0;
   288f4:	9a01      	ldr	r2, [sp, #4]
   288f6:	9902      	ldr	r1, [sp, #8]
   288f8:	4638      	mov	r0, r7
   288fa:	f7ff fdfb 	bl	284f4 <hexDump>
   288fe:	2800      	cmp	r0, #0
   28900:	da01      	bge.n	28906 <value_to_pretty+0x236>
   28902:	2401      	movs	r4, #1
   28904:	e7e4      	b.n	288d0 <value_to_pretty+0x200>
   28906:	4941      	ldr	r1, [pc, #260]	; (28a0c <value_to_pretty+0x33c>)
   28908:	4638      	mov	r0, r7
   2890a:	f001 fc53 	bl	2a1b4 <fprintf>
   2890e:	2800      	cmp	r0, #0
   28910:	db01      	blt.n	28916 <value_to_pretty+0x246>
   28912:	2400      	movs	r4, #0
   28914:	e7dc      	b.n	288d0 <value_to_pretty+0x200>
   28916:	2401      	movs	r4, #1
   28918:	e7da      	b.n	288d0 <value_to_pretty+0x200>
    assert(cbor_value_is_text_string(value));
   2891a:	f7e3 fc65 	bl	c1e8 <hal_debugger_connected>
   2891e:	b100      	cbz	r0, 28922 <value_to_pretty+0x252>
   28920:	be01      	bkpt	0x0001
   28922:	2300      	movs	r3, #0
   28924:	461a      	mov	r2, r3
   28926:	4619      	mov	r1, r3
   28928:	4618      	mov	r0, r3
   2892a:	f7e3 fe97 	bl	c65c <__assert_func>
                      || (err = utf8EscapedDump(out, buffer, n)) != CborNoError
   2892e:	9a01      	ldr	r2, [sp, #4]
   28930:	9902      	ldr	r1, [sp, #8]
   28932:	4638      	mov	r0, r7
   28934:	f7ff fdf2 	bl	2851c <utf8EscapedDump>
   28938:	4606      	mov	r6, r0
   2893a:	b108      	cbz	r0, 28940 <value_to_pretty+0x270>
                      || fprintf(out, "\"") < 0;
   2893c:	2301      	movs	r3, #1
   2893e:	e70a      	b.n	28756 <value_to_pretty+0x86>
   28940:	4927      	ldr	r1, [pc, #156]	; (289e0 <value_to_pretty+0x310>)
   28942:	4638      	mov	r0, r7
   28944:	f001 fc36 	bl	2a1b4 <fprintf>
   28948:	2800      	cmp	r0, #0
   2894a:	db01      	blt.n	28950 <value_to_pretty+0x280>
   2894c:	2300      	movs	r3, #0
   2894e:	e702      	b.n	28756 <value_to_pretty+0x86>
   28950:	2301      	movs	r3, #1
   28952:	e700      	b.n	28756 <value_to_pretty+0x86>
{ return value->type == CborTagType; }
   28954:	7b8b      	ldrb	r3, [r1, #14]
    assert(cbor_value_is_tag(value));
   28956:	2bc0      	cmp	r3, #192	; 0xc0
   28958:	d123      	bne.n	289a2 <value_to_pretty+0x2d2>
    return value->flags & CborIteratorFlag_IntegerValueTooLarge ?
   2895a:	7bcb      	ldrb	r3, [r1, #15]
                _cbor_value_decode_int64_internal(value) : value->extra;
   2895c:	f013 0f01 	tst.w	r3, #1
   28960:	d129      	bne.n	289b6 <value_to_pretty+0x2e6>
   28962:	898a      	ldrh	r2, [r1, #12]
   28964:	2300      	movs	r3, #0
        if (fprintf(out, "%" PRIu64 "(", tag) < 0)
   28966:	492a      	ldr	r1, [pc, #168]	; (28a10 <value_to_pretty+0x340>)
   28968:	4638      	mov	r0, r7
   2896a:	f001 fc23 	bl	2a1b4 <fprintf>
   2896e:	2800      	cmp	r0, #0
   28970:	db27      	blt.n	289c2 <value_to_pretty+0x2f2>
        err = cbor_value_advance_fixed(it);
   28972:	4628      	mov	r0, r5
   28974:	f7ff fcaf 	bl	282d6 <cbor_value_advance_fixed>
        if (err)
   28978:	4606      	mov	r6, r0
   2897a:	2800      	cmp	r0, #0
   2897c:	f47f aeca 	bne.w	28714 <value_to_pretty+0x44>
        err = value_to_pretty(out, it);
   28980:	4629      	mov	r1, r5
   28982:	4638      	mov	r0, r7
   28984:	f7ff fea4 	bl	286d0 <value_to_pretty>
        if (err)
   28988:	4606      	mov	r6, r0
   2898a:	2800      	cmp	r0, #0
   2898c:	f47f aec2 	bne.w	28714 <value_to_pretty+0x44>
        if (fprintf(out, ")") < 0)
   28990:	4920      	ldr	r1, [pc, #128]	; (28a14 <value_to_pretty+0x344>)
   28992:	4638      	mov	r0, r7
   28994:	f001 fc0e 	bl	2a1b4 <fprintf>
   28998:	2800      	cmp	r0, #0
   2899a:	f6bf aebb 	bge.w	28714 <value_to_pretty+0x44>
            return CborErrorIO;
   2899e:	2604      	movs	r6, #4
   289a0:	e6b8      	b.n	28714 <value_to_pretty+0x44>
    assert(cbor_value_is_tag(value));
   289a2:	f7e3 fc21 	bl	c1e8 <hal_debugger_connected>
   289a6:	b100      	cbz	r0, 289aa <value_to_pretty+0x2da>
   289a8:	be01      	bkpt	0x0001
   289aa:	2300      	movs	r3, #0
   289ac:	461a      	mov	r2, r3
   289ae:	4619      	mov	r1, r3
   289b0:	4618      	mov	r0, r3
   289b2:	f7e3 fe53 	bl	c65c <__assert_func>
                _cbor_value_decode_int64_internal(value) : value->extra;
   289b6:	4608      	mov	r0, r1
   289b8:	f7ff fc35 	bl	28226 <_cbor_value_decode_int64_internal>
   289bc:	4602      	mov	r2, r0
   289be:	460b      	mov	r3, r1
   289c0:	e7d1      	b.n	28966 <value_to_pretty+0x296>
            return CborErrorIO;
   289c2:	2604      	movs	r6, #4
   289c4:	e6a6      	b.n	28714 <value_to_pretty+0x44>
    assert(cbor_value_is_simple_type(value));
   289c6:	f7e3 fc0f 	bl	c1e8 <hal_debugger_connected>
   289ca:	b100      	cbz	r0, 289ce <value_to_pretty+0x2fe>
   289cc:	be01      	bkpt	0x0001
   289ce:	2300      	movs	r3, #0
   289d0:	461a      	mov	r2, r3
   289d2:	4619      	mov	r1, r3
   289d4:	4618      	mov	r0, r3
   289d6:	f7e3 fe41 	bl	c65c <__assert_func>
   289da:	bf00      	nop
   289dc:	0002bd6c 	.word	0x0002bd6c
   289e0:	0002bd5c 	.word	0x0002bd5c
   289e4:	0002bd10 	.word	0x0002bd10
   289e8:	0002bd28 	.word	0x0002bd28
   289ec:	0002bd80 	.word	0x0002bd80
   289f0:	0002bd0c 	.word	0x0002bd0c
   289f4:	0002bd14 	.word	0x0002bd14
   289f8:	0002af08 	.word	0x0002af08
   289fc:	0002bd34 	.word	0x0002bd34
   28a00:	0002bd2c 	.word	0x0002bd2c
   28a04:	0002bd3c 	.word	0x0002bd3c
   28a08:	0002bd54 	.word	0x0002bd54
   28a0c:	0002bd58 	.word	0x0002bd58
   28a10:	0002bd60 	.word	0x0002bd60
   28a14:	0002bd68 	.word	0x0002bd68
        if (fprintf(out, "null") < 0)
   28a18:	4917      	ldr	r1, [pc, #92]	; (28a78 <value_to_pretty+0x3a8>)
   28a1a:	f001 fbcb 	bl	2a1b4 <fprintf>
   28a1e:	2800      	cmp	r0, #0
   28a20:	f6bf ae74 	bge.w	2870c <value_to_pretty+0x3c>
            return CborErrorIO;
   28a24:	2604      	movs	r6, #4
   28a26:	e675      	b.n	28714 <value_to_pretty+0x44>
{ return value->type == CborBooleanType; }
   28a28:	7b8b      	ldrb	r3, [r1, #14]
    assert(cbor_value_is_boolean(value));
   28a2a:	2bf5      	cmp	r3, #245	; 0xf5
   28a2c:	d10a      	bne.n	28a44 <value_to_pretty+0x374>
    *result = !!value->extra;
   28a2e:	898b      	ldrh	r3, [r1, #12]
        if (fprintf(out, val ? "true" : "false") < 0)
   28a30:	b193      	cbz	r3, 28a58 <value_to_pretty+0x388>
   28a32:	4912      	ldr	r1, [pc, #72]	; (28a7c <value_to_pretty+0x3ac>)
   28a34:	4638      	mov	r0, r7
   28a36:	f001 fbbd 	bl	2a1b4 <fprintf>
   28a3a:	2800      	cmp	r0, #0
   28a3c:	f6bf ae66 	bge.w	2870c <value_to_pretty+0x3c>
            return CborErrorIO;
   28a40:	2604      	movs	r6, #4
   28a42:	e667      	b.n	28714 <value_to_pretty+0x44>
    assert(cbor_value_is_boolean(value));
   28a44:	f7e3 fbd0 	bl	c1e8 <hal_debugger_connected>
   28a48:	b100      	cbz	r0, 28a4c <value_to_pretty+0x37c>
   28a4a:	be01      	bkpt	0x0001
   28a4c:	2300      	movs	r3, #0
   28a4e:	461a      	mov	r2, r3
   28a50:	4619      	mov	r1, r3
   28a52:	4618      	mov	r0, r3
   28a54:	f7e3 fe02 	bl	c65c <__assert_func>
        if (fprintf(out, val ? "true" : "false") < 0)
   28a58:	4909      	ldr	r1, [pc, #36]	; (28a80 <value_to_pretty+0x3b0>)
   28a5a:	e7eb      	b.n	28a34 <value_to_pretty+0x364>
        if (fprintf(out, "invalid") < 0)
   28a5c:	4909      	ldr	r1, [pc, #36]	; (28a84 <value_to_pretty+0x3b4>)
   28a5e:	4638      	mov	r0, r7
   28a60:	f001 fba8 	bl	2a1b4 <fprintf>
   28a64:	2800      	cmp	r0, #0
   28a66:	db02      	blt.n	28a6e <value_to_pretty+0x39e>
        return CborErrorUnknownType;
   28a68:	f240 1603 	movw	r6, #259	; 0x103
   28a6c:	e652      	b.n	28714 <value_to_pretty+0x44>
            return CborErrorIO;
   28a6e:	2604      	movs	r6, #4
   28a70:	e650      	b.n	28714 <value_to_pretty+0x44>
            return CborErrorIO;
   28a72:	2604      	movs	r6, #4
   28a74:	e64e      	b.n	28714 <value_to_pretty+0x44>
   28a76:	bf00      	nop
   28a78:	0002bd78 	.word	0x0002bd78
   28a7c:	0002bd18 	.word	0x0002bd18
   28a80:	0002bd20 	.word	0x0002bd20
   28a84:	0002bd8c 	.word	0x0002bd8c

00028a88 <container_to_pretty>:
{
   28a88:	b570      	push	{r4, r5, r6, lr}
   28a8a:	4604      	mov	r4, r0
   28a8c:	460d      	mov	r5, r1
   28a8e:	4616      	mov	r6, r2
    const char *comma = "";
   28a90:	4a12      	ldr	r2, [pc, #72]	; (28adc <container_to_pretty+0x54>)
    while (!cbor_value_at_end(it)) {
   28a92:	e000      	b.n	28a96 <container_to_pretty+0xe>
   28a94:	4a12      	ldr	r2, [pc, #72]	; (28ae0 <container_to_pretty+0x58>)
{ return it->remaining == 0; }
   28a96:	68ab      	ldr	r3, [r5, #8]
   28a98:	b1e3      	cbz	r3, 28ad4 <container_to_pretty+0x4c>
        if (fprintf(out, "%s", comma) < 0)
   28a9a:	4912      	ldr	r1, [pc, #72]	; (28ae4 <container_to_pretty+0x5c>)
   28a9c:	4620      	mov	r0, r4
   28a9e:	f001 fb89 	bl	2a1b4 <fprintf>
   28aa2:	2800      	cmp	r0, #0
   28aa4:	db15      	blt.n	28ad2 <container_to_pretty+0x4a>
        CborError err = value_to_pretty(out, it);
   28aa6:	4629      	mov	r1, r5
   28aa8:	4620      	mov	r0, r4
   28aaa:	f7ff fe11 	bl	286d0 <value_to_pretty>
        if (err)
   28aae:	4603      	mov	r3, r0
   28ab0:	b980      	cbnz	r0, 28ad4 <container_to_pretty+0x4c>
        if (containerType == CborArrayType)
   28ab2:	2e80      	cmp	r6, #128	; 0x80
   28ab4:	d0ee      	beq.n	28a94 <container_to_pretty+0xc>
        if (fprintf(out, ": ") < 0)
   28ab6:	490c      	ldr	r1, [pc, #48]	; (28ae8 <container_to_pretty+0x60>)
   28ab8:	4620      	mov	r0, r4
   28aba:	f001 fb7b 	bl	2a1b4 <fprintf>
   28abe:	2800      	cmp	r0, #0
   28ac0:	db0a      	blt.n	28ad8 <container_to_pretty+0x50>
        err = value_to_pretty(out, it);
   28ac2:	4629      	mov	r1, r5
   28ac4:	4620      	mov	r0, r4
   28ac6:	f7ff fe03 	bl	286d0 <value_to_pretty>
        if (err)
   28aca:	4603      	mov	r3, r0
   28acc:	2800      	cmp	r0, #0
   28ace:	d0e1      	beq.n	28a94 <container_to_pretty+0xc>
   28ad0:	e000      	b.n	28ad4 <container_to_pretty+0x4c>
            return CborErrorIO;
   28ad2:	2304      	movs	r3, #4
}
   28ad4:	4618      	mov	r0, r3
   28ad6:	bd70      	pop	{r4, r5, r6, pc}
            return CborErrorIO;
   28ad8:	2304      	movs	r3, #4
   28ada:	e7fb      	b.n	28ad4 <container_to_pretty+0x4c>
   28adc:	0002b68c 	.word	0x0002b68c
   28ae0:	0002bce8 	.word	0x0002bce8
   28ae4:	0002bce0 	.word	0x0002bce0
   28ae8:	0002bce4 	.word	0x0002bce4

00028aec <cbor_value_to_pretty_advance>:
 * done by appending a comma to the output stream.
 *
 * \sa cbor_value_to_pretty(), cbor_value_to_json_advance()
 */
CborError cbor_value_to_pretty_advance(FILE *out, CborValue *value)
{
   28aec:	b508      	push	{r3, lr}
    return value_to_pretty(out, value);
   28aee:	f7ff fdef 	bl	286d0 <value_to_pretty>
}
   28af2:	bd08      	pop	{r3, pc}

00028af4 <_cbor_value_dup_string>:
 * malloc'ed block.
 *
 * \sa cbor_value_copy_byte_string(), cbor_value_dup_text_string()
 */
CborError _cbor_value_dup_string(const CborValue *value, void **buffer, size_t *buflen, CborValue *next)
{
   28af4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    assert(buffer);
   28af8:	b181      	cbz	r1, 28b1c <_cbor_value_dup_string+0x28>
   28afa:	4606      	mov	r6, r0
   28afc:	4614      	mov	r4, r2
   28afe:	4698      	mov	r8, r3
   28b00:	460f      	mov	r7, r1
    assert(buflen);
   28b02:	b1aa      	cbz	r2, 28b30 <_cbor_value_dup_string+0x3c>
    *buflen = SIZE_MAX;
   28b04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   28b08:	6013      	str	r3, [r2, #0]
    CborError err = _cbor_value_copy_string(value, NULL, buflen, NULL);
   28b0a:	2300      	movs	r3, #0
   28b0c:	4619      	mov	r1, r3
   28b0e:	f7ff fcd3 	bl	284b8 <_cbor_value_copy_string>
    if (err)
   28b12:	4605      	mov	r5, r0
   28b14:	b1b0      	cbz	r0, 28b44 <_cbor_value_dup_string+0x50>
    if (err) {
        free(*buffer);
        return err;
    }
    return CborNoError;
}
   28b16:	4628      	mov	r0, r5
   28b18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert(buffer);
   28b1c:	f7e3 fb64 	bl	c1e8 <hal_debugger_connected>
   28b20:	b100      	cbz	r0, 28b24 <_cbor_value_dup_string+0x30>
   28b22:	be01      	bkpt	0x0001
   28b24:	2300      	movs	r3, #0
   28b26:	461a      	mov	r2, r3
   28b28:	4619      	mov	r1, r3
   28b2a:	4618      	mov	r0, r3
   28b2c:	f7e3 fd96 	bl	c65c <__assert_func>
    assert(buflen);
   28b30:	f7e3 fb5a 	bl	c1e8 <hal_debugger_connected>
   28b34:	b100      	cbz	r0, 28b38 <_cbor_value_dup_string+0x44>
   28b36:	be01      	bkpt	0x0001
   28b38:	2300      	movs	r3, #0
   28b3a:	461a      	mov	r2, r3
   28b3c:	4619      	mov	r1, r3
   28b3e:	4618      	mov	r0, r3
   28b40:	f7e3 fd8c 	bl	c65c <__assert_func>
    ++*buflen;
   28b44:	6820      	ldr	r0, [r4, #0]
   28b46:	3001      	adds	r0, #1
   28b48:	6020      	str	r0, [r4, #0]
    *buffer = malloc(*buflen);
   28b4a:	f000 fff9 	bl	29b40 <malloc>
   28b4e:	6038      	str	r0, [r7, #0]
    if (!*buffer) {
   28b50:	b160      	cbz	r0, 28b6c <_cbor_value_dup_string+0x78>
    err = _cbor_value_copy_string(value, *buffer, buflen, next);
   28b52:	4643      	mov	r3, r8
   28b54:	4622      	mov	r2, r4
   28b56:	4601      	mov	r1, r0
   28b58:	4630      	mov	r0, r6
   28b5a:	f7ff fcad 	bl	284b8 <_cbor_value_copy_string>
    if (err) {
   28b5e:	4605      	mov	r5, r0
   28b60:	2800      	cmp	r0, #0
   28b62:	d0d8      	beq.n	28b16 <_cbor_value_dup_string+0x22>
        free(*buffer);
   28b64:	6838      	ldr	r0, [r7, #0]
   28b66:	f001 f821 	bl	29bac <free>
        return err;
   28b6a:	e7d4      	b.n	28b16 <_cbor_value_dup_string+0x22>
        return CborErrorOutOfMemory;
   28b6c:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
   28b70:	e7d1      	b.n	28b16 <_cbor_value_dup_string+0x22>
	...

00028b74 <hal_bsp_flash_dev>:
hal_bsp_flash_dev(uint8_t id)
{
    /*
     * Internal flash mapped to id 0.
     */
    if (id == 0) {
   28b74:	b908      	cbnz	r0, 28b7a <hal_bsp_flash_dev+0x6>
        return &nrf52k_flash_dev;
   28b76:	4802      	ldr	r0, [pc, #8]	; (28b80 <hal_bsp_flash_dev+0xc>)
   28b78:	4770      	bx	lr
#if MYNEWT_VAL(QSPI_ENABLE)
    if (id == 1) {
        return &nrf52k_qspi_dev;
    }
#endif
    return NULL;
   28b7a:	2000      	movs	r0, #0
}
   28b7c:	4770      	bx	lr
   28b7e:	bf00      	nop
   28b80:	0002bd94 	.word	0x0002bd94

00028b84 <hal_bsp_init>:
    return cfg_pri;
}

void
hal_bsp_init(void)
{
   28b84:	b508      	push	{r3, lr}
    /* Make sure system clocks have started */
    hal_system_clock_start();
   28b86:	f7e3 fb4d 	bl	c224 <hal_system_clock_start>

    /* Create all available nRF52840 peripherals */
    nrf52_periph_create();
   28b8a:	f000 fb2d 	bl	291e8 <nrf52_periph_create>
}
   28b8e:	bd08      	pop	{r3, pc}

00028b90 <hal_flash_check_addr>:
}

static int
hal_flash_check_addr(const struct hal_flash *hf, uint32_t addr)
{
    if (addr < hf->hf_base_addr || addr > hf->hf_base_addr + hf->hf_size) {
   28b90:	6843      	ldr	r3, [r0, #4]
   28b92:	428b      	cmp	r3, r1
   28b94:	d808      	bhi.n	28ba8 <hal_flash_check_addr+0x18>
   28b96:	6882      	ldr	r2, [r0, #8]
   28b98:	4413      	add	r3, r2
   28b9a:	428b      	cmp	r3, r1
   28b9c:	d301      	bcc.n	28ba2 <hal_flash_check_addr+0x12>
        return SYS_EINVAL;
    }
    return 0;
   28b9e:	2000      	movs	r0, #0
}
   28ba0:	4770      	bx	lr
        return SYS_EINVAL;
   28ba2:	f06f 0001 	mvn.w	r0, #1
   28ba6:	4770      	bx	lr
   28ba8:	f06f 0001 	mvn.w	r0, #1
   28bac:	4770      	bx	lr

00028bae <hal_flash_init>:
{
   28bae:	b538      	push	{r3, r4, r5, lr}
    int rc = 0;
   28bb0:	2500      	movs	r5, #0
    for (i = 0; ; i++) {
   28bb2:	462c      	mov	r4, r5
   28bb4:	e001      	b.n	28bba <hal_flash_init+0xc>
   28bb6:	3401      	adds	r4, #1
   28bb8:	b2e4      	uxtb	r4, r4
        hf = hal_bsp_flash_dev(i);
   28bba:	4620      	mov	r0, r4
   28bbc:	f7ff ffda 	bl	28b74 <hal_bsp_flash_dev>
        if (!hf) {
   28bc0:	b138      	cbz	r0, 28bd2 <hal_flash_init+0x24>
        if (hf->hf_itf->hff_init(hf)) {
   28bc2:	6802      	ldr	r2, [r0, #0]
   28bc4:	6952      	ldr	r2, [r2, #20]
   28bc6:	4790      	blx	r2
   28bc8:	2800      	cmp	r0, #0
   28bca:	d0f4      	beq.n	28bb6 <hal_flash_init+0x8>
            rc = SYS_EIO;
   28bcc:	f06f 0504 	mvn.w	r5, #4
   28bd0:	e7f1      	b.n	28bb6 <hal_flash_init+0x8>
}
   28bd2:	4628      	mov	r0, r5
   28bd4:	bd38      	pop	{r3, r4, r5, pc}

00028bd6 <hal_flash_read>:

int
hal_flash_read(uint8_t id, uint32_t address, void *dst, uint32_t num_bytes)
{
   28bd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28bda:	460d      	mov	r5, r1
   28bdc:	4690      	mov	r8, r2
   28bde:	461e      	mov	r6, r3
    const struct hal_flash *hf;
    int rc;

    hf = hal_bsp_flash_dev(id);
   28be0:	f7ff ffc8 	bl	28b74 <hal_bsp_flash_dev>
    if (!hf) {
   28be4:	b1c0      	cbz	r0, 28c18 <hal_flash_read+0x42>
   28be6:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
   28be8:	4629      	mov	r1, r5
   28bea:	f7ff ffd1 	bl	28b90 <hal_flash_check_addr>
   28bee:	b9b0      	cbnz	r0, 28c1e <hal_flash_read+0x48>
      hal_flash_check_addr(hf, address + num_bytes)) {
   28bf0:	19a9      	adds	r1, r5, r6
   28bf2:	4620      	mov	r0, r4
   28bf4:	f7ff ffcc 	bl	28b90 <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
   28bf8:	b9a0      	cbnz	r0, 28c24 <hal_flash_read+0x4e>
        return SYS_EINVAL;
    }

    rc = hf->hf_itf->hff_read(hf, address, dst, num_bytes);
   28bfa:	6823      	ldr	r3, [r4, #0]
   28bfc:	681f      	ldr	r7, [r3, #0]
   28bfe:	4633      	mov	r3, r6
   28c00:	4642      	mov	r2, r8
   28c02:	4629      	mov	r1, r5
   28c04:	4620      	mov	r0, r4
   28c06:	47b8      	blx	r7
    if (rc != 0) {
   28c08:	4603      	mov	r3, r0
   28c0a:	b910      	cbnz	r0, 28c12 <hal_flash_read+0x3c>
        return SYS_EIO;
    }

    return 0;
}
   28c0c:	4618      	mov	r0, r3
   28c0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SYS_EIO;
   28c12:	f06f 0304 	mvn.w	r3, #4
   28c16:	e7f9      	b.n	28c0c <hal_flash_read+0x36>
        return SYS_EINVAL;
   28c18:	f06f 0301 	mvn.w	r3, #1
   28c1c:	e7f6      	b.n	28c0c <hal_flash_read+0x36>
        return SYS_EINVAL;
   28c1e:	f06f 0301 	mvn.w	r3, #1
   28c22:	e7f3      	b.n	28c0c <hal_flash_read+0x36>
   28c24:	f06f 0301 	mvn.w	r3, #1
   28c28:	e7f0      	b.n	28c0c <hal_flash_read+0x36>
	...

00028c2c <nrf52k_flash_wait_ready>:
static int
nrf52k_flash_wait_ready(void)
{
    int i;

    for (i = 0; i < 100000; i++) {
   28c2c:	2300      	movs	r3, #0
   28c2e:	4a07      	ldr	r2, [pc, #28]	; (28c4c <nrf52k_flash_wait_ready+0x20>)
   28c30:	4293      	cmp	r3, r2
   28c32:	dc06      	bgt.n	28c42 <nrf52k_flash_wait_ready+0x16>
        if (NRF_NVMC->READY == NVMC_READY_READY_Ready) {
   28c34:	4a06      	ldr	r2, [pc, #24]	; (28c50 <nrf52k_flash_wait_ready+0x24>)
   28c36:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
   28c3a:	2a01      	cmp	r2, #1
   28c3c:	d004      	beq.n	28c48 <nrf52k_flash_wait_ready+0x1c>
    for (i = 0; i < 100000; i++) {
   28c3e:	3301      	adds	r3, #1
   28c40:	e7f5      	b.n	28c2e <nrf52k_flash_wait_ready+0x2>
            return 0;
        }
    }
    return -1;
   28c42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   28c46:	4770      	bx	lr
            return 0;
   28c48:	2000      	movs	r0, #0
}
   28c4a:	4770      	bx	lr
   28c4c:	0001869f 	.word	0x0001869f
   28c50:	4001e000 	.word	0x4001e000

00028c54 <nrf52k_flash_erase_sector>:
    return rc;
}

static int
nrf52k_flash_erase_sector(const struct hal_flash *dev, uint32_t sector_address)
{
   28c54:	b538      	push	{r3, r4, r5, lr}
   28c56:	460d      	mov	r5, r1
    int sr;
    int rc = -1;

    if (nrf52k_flash_wait_ready()) {
   28c58:	f7ff ffe8 	bl	28c2c <nrf52k_flash_wait_ready>
   28c5c:	b9f0      	cbnz	r0, 28c9c <nrf52k_flash_erase_sector+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   28c5e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   28c62:	b672      	cpsid	i
        return -1;
    }
    __HAL_DISABLE_INTERRUPTS(sr);
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Een; /* Enable erase OP */
   28c64:	4b0f      	ldr	r3, [pc, #60]	; (28ca4 <nrf52k_flash_erase_sector+0x50>)
   28c66:	2202      	movs	r2, #2
   28c68:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    if (nrf52k_flash_wait_ready()) {
   28c6c:	f7ff ffde 	bl	28c2c <nrf52k_flash_wait_ready>
   28c70:	b148      	cbz	r0, 28c86 <nrf52k_flash_erase_sector+0x32>
    int rc = -1;
   28c72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    if (nrf52k_flash_wait_ready()) {
        goto out;
    }
    rc = 0;
out:
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren; /* Disable erase OP */
   28c76:	4a0b      	ldr	r2, [pc, #44]	; (28ca4 <nrf52k_flash_erase_sector+0x50>)
   28c78:	2100      	movs	r1, #0
   28c7a:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
    __HAL_ENABLE_INTERRUPTS(sr);
   28c7e:	b904      	cbnz	r4, 28c82 <nrf52k_flash_erase_sector+0x2e>
  __ASM volatile ("cpsie i" : : : "memory");
   28c80:	b662      	cpsie	i
    return rc;
}
   28c82:	4618      	mov	r0, r3
   28c84:	bd38      	pop	{r3, r4, r5, pc}
    NRF_NVMC->ERASEPAGE = sector_address;
   28c86:	4b07      	ldr	r3, [pc, #28]	; (28ca4 <nrf52k_flash_erase_sector+0x50>)
   28c88:	f8c3 5508 	str.w	r5, [r3, #1288]	; 0x508
    if (nrf52k_flash_wait_ready()) {
   28c8c:	f7ff ffce 	bl	28c2c <nrf52k_flash_wait_ready>
   28c90:	4603      	mov	r3, r0
   28c92:	2800      	cmp	r0, #0
   28c94:	d0ef      	beq.n	28c76 <nrf52k_flash_erase_sector+0x22>
    int rc = -1;
   28c96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   28c9a:	e7ec      	b.n	28c76 <nrf52k_flash_erase_sector+0x22>
        return -1;
   28c9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   28ca0:	e7ef      	b.n	28c82 <nrf52k_flash_erase_sector+0x2e>
   28ca2:	bf00      	nop
   28ca4:	4001e000 	.word	0x4001e000

00028ca8 <nrf52k_flash_init>:

static int
nrf52k_flash_init(const struct hal_flash *dev)
{
    return 0;
}
   28ca8:	2000      	movs	r0, #0
   28caa:	4770      	bx	lr

00028cac <nrf52k_flash_sector_info>:
    assert(idx < nrf52k_flash_dev.hf_sector_cnt);
   28cac:	29ff      	cmp	r1, #255	; 0xff
   28cae:	dc06      	bgt.n	28cbe <nrf52k_flash_sector_info+0x12>
    *address = idx * NRF52K_FLASH_SECTOR_SZ;
   28cb0:	0309      	lsls	r1, r1, #12
   28cb2:	6011      	str	r1, [r2, #0]
    *sz = NRF52K_FLASH_SECTOR_SZ;
   28cb4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   28cb8:	601a      	str	r2, [r3, #0]
}
   28cba:	2000      	movs	r0, #0
   28cbc:	4770      	bx	lr
{
   28cbe:	b508      	push	{r3, lr}
    assert(idx < nrf52k_flash_dev.hf_sector_cnt);
   28cc0:	f7e3 fa92 	bl	c1e8 <hal_debugger_connected>
   28cc4:	b100      	cbz	r0, 28cc8 <nrf52k_flash_sector_info+0x1c>
   28cc6:	be01      	bkpt	0x0001
   28cc8:	2300      	movs	r3, #0
   28cca:	461a      	mov	r2, r3
   28ccc:	4619      	mov	r1, r3
   28cce:	4618      	mov	r0, r3
   28cd0:	f7e3 fcc4 	bl	c65c <__assert_func>

00028cd4 <nrf52k_flash_write>:
{
   28cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   28cd8:	b082      	sub	sp, #8
   28cda:	460d      	mov	r5, r1
   28cdc:	4616      	mov	r6, r2
   28cde:	461c      	mov	r4, r3
    if (nrf52k_flash_wait_ready()) {
   28ce0:	f7ff ffa4 	bl	28c2c <nrf52k_flash_wait_ready>
   28ce4:	2800      	cmp	r0, #0
   28ce6:	d158      	bne.n	28d9a <nrf52k_flash_write+0xc6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   28ce8:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   28cec:	b672      	cpsid	i
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen; /* Enable erase OP */
   28cee:	4b2c      	ldr	r3, [pc, #176]	; (28da0 <nrf52k_flash_write+0xcc>)
   28cf0:	2201      	movs	r2, #1
   28cf2:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    if (tmp) {
   28cf6:	f015 0803 	ands.w	r8, r5, #3
   28cfa:	d10b      	bne.n	28d14 <nrf52k_flash_write+0x40>
    while (num_bytes >= sizeof(uint32_t)) {
   28cfc:	2c03      	cmp	r4, #3
   28cfe:	d925      	bls.n	28d4c <nrf52k_flash_write+0x78>
        if (nrf52k_flash_wait_ready()) {
   28d00:	f7ff ff94 	bl	28c2c <nrf52k_flash_wait_ready>
   28d04:	2800      	cmp	r0, #0
   28d06:	d139      	bne.n	28d7c <nrf52k_flash_write+0xa8>
        *(uint32_t *)address = *(uint32_t *)src;
   28d08:	f856 3b04 	ldr.w	r3, [r6], #4
   28d0c:	f845 3b04 	str.w	r3, [r5], #4
        num_bytes -= sizeof(uint32_t);
   28d10:	3c04      	subs	r4, #4
   28d12:	e7f3      	b.n	28cfc <nrf52k_flash_write+0x28>
        if (nrf52k_flash_wait_ready()) {
   28d14:	f7ff ff8a 	bl	28c2c <nrf52k_flash_wait_ready>
   28d18:	bb68      	cbnz	r0, 28d76 <nrf52k_flash_write+0xa2>
        val = *(uint32_t *)(address & ~0x3);
   28d1a:	f025 0a03 	bic.w	sl, r5, #3
   28d1e:	f8da 3000 	ldr.w	r3, [sl]
   28d22:	9301      	str	r3, [sp, #4]
        cnt = 4 - tmp;
   28d24:	f1c8 0904 	rsb	r9, r8, #4
        if (cnt > num_bytes) {
   28d28:	45a1      	cmp	r9, r4
   28d2a:	d900      	bls.n	28d2e <nrf52k_flash_write+0x5a>
            cnt = num_bytes;
   28d2c:	46a1      	mov	r9, r4
        memcpy((uint8_t *)&val + tmp, src, cnt);
   28d2e:	464a      	mov	r2, r9
   28d30:	4631      	mov	r1, r6
   28d32:	ab01      	add	r3, sp, #4
   28d34:	eb03 0008 	add.w	r0, r3, r8
   28d38:	f7e5 fb9a 	bl	e470 <memcpy>
        *(uint32_t *)(address & ~0x3) = val;
   28d3c:	9b01      	ldr	r3, [sp, #4]
   28d3e:	f8ca 3000 	str.w	r3, [sl]
        address += cnt;
   28d42:	444d      	add	r5, r9
        num_bytes -= cnt;
   28d44:	eba4 0409 	sub.w	r4, r4, r9
        src += cnt;
   28d48:	444e      	add	r6, r9
   28d4a:	e7d7      	b.n	28cfc <nrf52k_flash_write+0x28>
    if (num_bytes) {
   28d4c:	b164      	cbz	r4, 28d68 <nrf52k_flash_write+0x94>
        val = *(uint32_t *)address;
   28d4e:	682b      	ldr	r3, [r5, #0]
   28d50:	a802      	add	r0, sp, #8
   28d52:	f840 3d04 	str.w	r3, [r0, #-4]!
        memcpy(&val, src, num_bytes);
   28d56:	4622      	mov	r2, r4
   28d58:	4631      	mov	r1, r6
   28d5a:	f7e5 fb89 	bl	e470 <memcpy>
        if (nrf52k_flash_wait_ready()) {
   28d5e:	f7ff ff65 	bl	28c2c <nrf52k_flash_wait_ready>
   28d62:	b9b8      	cbnz	r0, 28d94 <nrf52k_flash_write+0xc0>
        *(uint32_t *)address = val;
   28d64:	9b01      	ldr	r3, [sp, #4]
   28d66:	602b      	str	r3, [r5, #0]
    if (nrf52k_flash_wait_ready()) {
   28d68:	f7ff ff60 	bl	28c2c <nrf52k_flash_wait_ready>
   28d6c:	4603      	mov	r3, r0
   28d6e:	b138      	cbz	r0, 28d80 <nrf52k_flash_write+0xac>
        rc = -1;
   28d70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   28d74:	e004      	b.n	28d80 <nrf52k_flash_write+0xac>
    int rc = -1;
   28d76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   28d7a:	e001      	b.n	28d80 <nrf52k_flash_write+0xac>
   28d7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren;
   28d80:	4a07      	ldr	r2, [pc, #28]	; (28da0 <nrf52k_flash_write+0xcc>)
   28d82:	2100      	movs	r1, #0
   28d84:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
    __HAL_ENABLE_INTERRUPTS(sr);
   28d88:	b907      	cbnz	r7, 28d8c <nrf52k_flash_write+0xb8>
  __ASM volatile ("cpsie i" : : : "memory");
   28d8a:	b662      	cpsie	i
}
   28d8c:	4618      	mov	r0, r3
   28d8e:	b002      	add	sp, #8
   28d90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    int rc = -1;
   28d94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   28d98:	e7f2      	b.n	28d80 <nrf52k_flash_write+0xac>
        return -1;
   28d9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   28d9e:	e7f5      	b.n	28d8c <nrf52k_flash_write+0xb8>
   28da0:	4001e000 	.word	0x4001e000

00028da4 <nrf52k_flash_read>:
{
   28da4:	b508      	push	{r3, lr}
   28da6:	4610      	mov	r0, r2
    memcpy(dst, (void *)address, num_bytes);
   28da8:	461a      	mov	r2, r3
   28daa:	f7e5 fb61 	bl	e470 <memcpy>
}
   28dae:	2000      	movs	r0, #0
   28db0:	bd08      	pop	{r3, pc}
	...

00028db4 <nrf52_timer_handler>:
    }
}

static void
nrf52_timer_handler(void)
{
   28db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int ticks;
    os_sr_t sr;
    uint32_t counter;

    os_trace_isr_enter();
    OS_ENTER_CRITICAL(sr);
   28db6:	f7e4 fd1f 	bl	d7f8 <os_arch_save_sr>
    return OS_TICK_TIMER->COUNTER;
   28dba:	4b39      	ldr	r3, [pc, #228]	; (28ea0 <nrf52_timer_handler+0xec>)
   28dbc:	f8d3 5504 	ldr.w	r5, [r3, #1284]	; 0x504

    /* Calculate elapsed ticks and advance OS time. */

    counter = nrf52_os_tick_counter();
    delta = sub24(counter, g_hal_os_tick.lastocmp);
   28dc0:	4b38      	ldr	r3, [pc, #224]	; (28ea4 <nrf52_timer_handler+0xf0>)
   28dc2:	689b      	ldr	r3, [r3, #8]
    assert(x <= 0xffffff);
   28dc4:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
   28dc8:	d229      	bcs.n	28e1e <nrf52_timer_handler+0x6a>
   28dca:	4606      	mov	r6, r0
    assert(y <= 0xffffff);
   28dcc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   28dd0:	d22f      	bcs.n	28e32 <nrf52_timer_handler+0x7e>
    result = x - y;
   28dd2:	1aed      	subs	r5, r5, r3
    if (result & 0x800000) {
   28dd4:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
   28dd8:	d135      	bne.n	28e46 <nrf52_timer_handler+0x92>
        return (result & 0x007fffff);
   28dda:	f3c5 0516 	ubfx	r5, r5, #0, #23
    ticks = delta / g_hal_os_tick.ticks_per_ostick;
   28dde:	4f31      	ldr	r7, [pc, #196]	; (28ea4 <nrf52_timer_handler+0xf0>)
   28de0:	683c      	ldr	r4, [r7, #0]
   28de2:	fb95 f5f4 	sdiv	r5, r5, r4
    os_time_advance(ticks);
   28de6:	4628      	mov	r0, r5
   28de8:	f7e4 fc4a 	bl	d680 <os_time_advance>

    /* Clear timer interrupt */
    OS_TICK_TIMER->EVENTS_COMPARE[OS_TICK_CMPREG] = 0;
   28dec:	4b2c      	ldr	r3, [pc, #176]	; (28ea0 <nrf52_timer_handler+0xec>)
   28dee:	2200      	movs	r2, #0
   28df0:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

    /* Update the time associated with the most recent tick */
    g_hal_os_tick.lastocmp = (g_hal_os_tick.lastocmp +
   28df4:	68bb      	ldr	r3, [r7, #8]
        (ticks * g_hal_os_tick.ticks_per_ostick)) & 0xffffff;
   28df6:	683c      	ldr	r4, [r7, #0]
    g_hal_os_tick.lastocmp = (g_hal_os_tick.lastocmp +
   28df8:	fb05 3304 	mla	r3, r5, r4, r3
        (ticks * g_hal_os_tick.ticks_per_ostick)) & 0xffffff;
   28dfc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    g_hal_os_tick.lastocmp = (g_hal_os_tick.lastocmp +
   28e00:	60bb      	str	r3, [r7, #8]

    /* Update the output compare to interrupt at the next tick */
    nrf52_os_tick_set_ocmp(g_hal_os_tick.lastocmp + g_hal_os_tick.ticks_per_ostick);
   28e02:	441c      	add	r4, r3
    OS_ASSERT_CRITICAL();
   28e04:	f7e4 fd01 	bl	d80a <os_arch_in_critical>
   28e08:	bba8      	cbnz	r0, 28e76 <nrf52_timer_handler+0xc2>
   28e0a:	f7e3 f9ed 	bl	c1e8 <hal_debugger_connected>
   28e0e:	b100      	cbz	r0, 28e12 <nrf52_timer_handler+0x5e>
   28e10:	be01      	bkpt	0x0001
   28e12:	2300      	movs	r3, #0
   28e14:	461a      	mov	r2, r3
   28e16:	4619      	mov	r1, r3
   28e18:	4618      	mov	r0, r3
   28e1a:	f7e3 fc1f 	bl	c65c <__assert_func>
    assert(x <= 0xffffff);
   28e1e:	f7e3 f9e3 	bl	c1e8 <hal_debugger_connected>
   28e22:	b100      	cbz	r0, 28e26 <nrf52_timer_handler+0x72>
   28e24:	be01      	bkpt	0x0001
   28e26:	2300      	movs	r3, #0
   28e28:	461a      	mov	r2, r3
   28e2a:	4619      	mov	r1, r3
   28e2c:	4618      	mov	r0, r3
   28e2e:	f7e3 fc15 	bl	c65c <__assert_func>
    assert(y <= 0xffffff);
   28e32:	f7e3 f9d9 	bl	c1e8 <hal_debugger_connected>
   28e36:	b100      	cbz	r0, 28e3a <nrf52_timer_handler+0x86>
   28e38:	be01      	bkpt	0x0001
   28e3a:	2300      	movs	r3, #0
   28e3c:	461a      	mov	r2, r3
   28e3e:	4619      	mov	r1, r3
   28e40:	4618      	mov	r0, r3
   28e42:	f7e3 fc0b 	bl	c65c <__assert_func>
        return (result | 0xff800000);
   28e46:	ea6f 2545 	mvn.w	r5, r5, lsl #9
   28e4a:	ea6f 2555 	mvn.w	r5, r5, lsr #9
   28e4e:	e7c6      	b.n	28dde <nrf52_timer_handler+0x2a>
    assert(y <= 0xffffff);
   28e50:	f7e3 f9ca 	bl	c1e8 <hal_debugger_connected>
   28e54:	b100      	cbz	r0, 28e58 <nrf52_timer_handler+0xa4>
   28e56:	be01      	bkpt	0x0001
   28e58:	2300      	movs	r3, #0
   28e5a:	461a      	mov	r2, r3
   28e5c:	4619      	mov	r1, r3
   28e5e:	4618      	mov	r0, r3
   28e60:	f7e3 fbfc 	bl	c65c <__assert_func>
        return (result | 0xff800000);
   28e64:	ea6f 2242 	mvn.w	r2, r2, lsl #9
   28e68:	ea6f 2252 	mvn.w	r2, r2, lsr #9
        if (delta > 2) {
   28e6c:	2a02      	cmp	r2, #2
   28e6e:	dc13      	bgt.n	28e98 <nrf52_timer_handler+0xe4>
        ocmp += g_hal_os_tick.ticks_per_ostick;
   28e70:	4a0c      	ldr	r2, [pc, #48]	; (28ea4 <nrf52_timer_handler+0xf0>)
   28e72:	6814      	ldr	r4, [r2, #0]
   28e74:	441c      	add	r4, r3
        ocmp &= 0xffffff;
   28e76:	f024 437f 	bic.w	r3, r4, #4278190080	; 0xff000000
        OS_TICK_TIMER->CC[OS_TICK_CMPREG] = ocmp;
   28e7a:	4a09      	ldr	r2, [pc, #36]	; (28ea0 <nrf52_timer_handler+0xec>)
   28e7c:	f8c2 354c 	str.w	r3, [r2, #1356]	; 0x54c
    return OS_TICK_TIMER->COUNTER;
   28e80:	f8d2 2504 	ldr.w	r2, [r2, #1284]	; 0x504
    assert(y <= 0xffffff);
   28e84:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
   28e88:	d2e2      	bcs.n	28e50 <nrf52_timer_handler+0x9c>
    result = x - y;
   28e8a:	1a9a      	subs	r2, r3, r2
    if (result & 0x800000) {
   28e8c:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
   28e90:	d1e8      	bne.n	28e64 <nrf52_timer_handler+0xb0>
        return (result & 0x007fffff);
   28e92:	f3c2 0216 	ubfx	r2, r2, #0, #23
   28e96:	e7e9      	b.n	28e6c <nrf52_timer_handler+0xb8>

    OS_EXIT_CRITICAL(sr);
   28e98:	4630      	mov	r0, r6
   28e9a:	f7e4 fcb3 	bl	d804 <os_arch_restore_sr>
    os_trace_isr_exit();
}
   28e9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   28ea0:	40011000 	.word	0x40011000
   28ea4:	20004790 	.word	0x20004790

00028ea8 <os_tick_idle>:

void
os_tick_idle(os_time_t ticks)
{
   28ea8:	b538      	push	{r3, r4, r5, lr}
   28eaa:	4605      	mov	r5, r0
    uint32_t ocmp;

    OS_ASSERT_CRITICAL();
   28eac:	f7e4 fcad 	bl	d80a <os_arch_in_critical>
   28eb0:	b1c0      	cbz	r0, 28ee4 <os_tick_idle+0x3c>

    if (ticks > 0) {
   28eb2:	2d00      	cmp	r5, #0
   28eb4:	d044      	beq.n	28f40 <os_tick_idle+0x98>
        /*
         * Enter tickless regime during long idle durations.
         */
        if (ticks > g_hal_os_tick.max_idle_ticks) {
   28eb6:	4b26      	ldr	r3, [pc, #152]	; (28f50 <os_tick_idle+0xa8>)
   28eb8:	685b      	ldr	r3, [r3, #4]
   28eba:	42ab      	cmp	r3, r5
   28ebc:	d200      	bcs.n	28ec0 <os_tick_idle+0x18>
            ticks = g_hal_os_tick.max_idle_ticks;
   28ebe:	461d      	mov	r5, r3
        }
        ocmp = g_hal_os_tick.lastocmp + (ticks*g_hal_os_tick.ticks_per_ostick);
   28ec0:	4b23      	ldr	r3, [pc, #140]	; (28f50 <os_tick_idle+0xa8>)
   28ec2:	689c      	ldr	r4, [r3, #8]
   28ec4:	681a      	ldr	r2, [r3, #0]
   28ec6:	fb05 4402 	mla	r4, r5, r2, r4
    OS_ASSERT_CRITICAL();
   28eca:	f7e4 fc9e 	bl	d80a <os_arch_in_critical>
   28ece:	bb30      	cbnz	r0, 28f1e <os_tick_idle+0x76>
   28ed0:	f7e3 f98a 	bl	c1e8 <hal_debugger_connected>
   28ed4:	b100      	cbz	r0, 28ed8 <os_tick_idle+0x30>
   28ed6:	be01      	bkpt	0x0001
   28ed8:	2300      	movs	r3, #0
   28eda:	461a      	mov	r2, r3
   28edc:	4619      	mov	r1, r3
   28ede:	4618      	mov	r0, r3
   28ee0:	f7e3 fbbc 	bl	c65c <__assert_func>
    OS_ASSERT_CRITICAL();
   28ee4:	f7e3 f980 	bl	c1e8 <hal_debugger_connected>
   28ee8:	b100      	cbz	r0, 28eec <os_tick_idle+0x44>
   28eea:	be01      	bkpt	0x0001
   28eec:	2300      	movs	r3, #0
   28eee:	461a      	mov	r2, r3
   28ef0:	4619      	mov	r1, r3
   28ef2:	4618      	mov	r0, r3
   28ef4:	f7e3 fbb2 	bl	c65c <__assert_func>
    assert(y <= 0xffffff);
   28ef8:	f7e3 f976 	bl	c1e8 <hal_debugger_connected>
   28efc:	b100      	cbz	r0, 28f00 <os_tick_idle+0x58>
   28efe:	be01      	bkpt	0x0001
   28f00:	2300      	movs	r3, #0
   28f02:	461a      	mov	r2, r3
   28f04:	4619      	mov	r1, r3
   28f06:	4618      	mov	r0, r3
   28f08:	f7e3 fba8 	bl	c65c <__assert_func>
        return (result | 0xff800000);
   28f0c:	ea6f 2343 	mvn.w	r3, r3, lsl #9
   28f10:	ea6f 2353 	mvn.w	r3, r3, lsr #9
        if (delta > 2) {
   28f14:	2b02      	cmp	r3, #2
   28f16:	dc13      	bgt.n	28f40 <os_tick_idle+0x98>
        ocmp += g_hal_os_tick.ticks_per_ostick;
   28f18:	4b0d      	ldr	r3, [pc, #52]	; (28f50 <os_tick_idle+0xa8>)
   28f1a:	681c      	ldr	r4, [r3, #0]
   28f1c:	4414      	add	r4, r2
        ocmp &= 0xffffff;
   28f1e:	f024 427f 	bic.w	r2, r4, #4278190080	; 0xff000000
        OS_TICK_TIMER->CC[OS_TICK_CMPREG] = ocmp;
   28f22:	4b0c      	ldr	r3, [pc, #48]	; (28f54 <os_tick_idle+0xac>)
   28f24:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
    return OS_TICK_TIMER->COUNTER;
   28f28:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
    assert(y <= 0xffffff);
   28f2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   28f30:	d2e2      	bcs.n	28ef8 <os_tick_idle+0x50>
    result = x - y;
   28f32:	1ad3      	subs	r3, r2, r3
    if (result & 0x800000) {
   28f34:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   28f38:	d1e8      	bne.n	28f0c <os_tick_idle+0x64>
        return (result & 0x007fffff);
   28f3a:	f3c3 0316 	ubfx	r3, r3, #0, #23
   28f3e:	e7e9      	b.n	28f14 <os_tick_idle+0x6c>
  __ASM volatile ("dsb 0xF":::"memory");
   28f40:	f3bf 8f4f 	dsb	sy
        nrf52_os_tick_set_ocmp(ocmp);
    }

    __DSB();
    __WFI();
   28f44:	bf30      	wfi

    if (ticks > 0) {
   28f46:	b905      	cbnz	r5, 28f4a <os_tick_idle+0xa2>
         * Update OS time before anything else when coming out of
         * the tickless regime.
         */
        nrf52_timer_handler();
    }
}
   28f48:	bd38      	pop	{r3, r4, r5, pc}
        nrf52_timer_handler();
   28f4a:	f7ff ff33 	bl	28db4 <nrf52_timer_handler>
}
   28f4e:	e7fb      	b.n	28f48 <os_tick_idle+0xa0>
   28f50:	20004790 	.word	0x20004790
   28f54:	40011000 	.word	0x40011000

00028f58 <os_tick_init>:

void
os_tick_init(uint32_t os_ticks_per_sec, int prio)
{
   28f58:	b570      	push	{r4, r5, r6, lr}
    uint32_t sr;

    assert(RTC_FREQ % os_ticks_per_sec == 0);
   28f5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   28f5e:	fbb3 f3f0 	udiv	r3, r3, r0
   28f62:	fb00 f303 	mul.w	r3, r0, r3
   28f66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   28f6a:	d136      	bne.n	28fda <os_tick_init+0x82>
   28f6c:	460c      	mov	r4, r1

    g_hal_os_tick.lastocmp = 0;
   28f6e:	4d20      	ldr	r5, [pc, #128]	; (28ff0 <os_tick_init+0x98>)
   28f70:	2600      	movs	r6, #0
   28f72:	60ae      	str	r6, [r5, #8]
    g_hal_os_tick.ticks_per_ostick = RTC_FREQ / os_ticks_per_sec;
   28f74:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   28f78:	fbb3 f0f0 	udiv	r0, r3, r0
   28f7c:	6028      	str	r0, [r5, #0]
    /*
     * The maximum number of OS ticks allowed to elapse during idle is
     * limited to 1/4th the number of timer ticks before the 24-bit counter
     * rolls over.
     */
    g_hal_os_tick.max_idle_ticks = (1UL << 22) / g_hal_os_tick.ticks_per_ostick;
   28f7e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   28f82:	fbb3 f0f0 	udiv	r0, r3, r0
   28f86:	6068      	str	r0, [r5, #4]

    /* disable interrupts */
    OS_ENTER_CRITICAL(sr);
   28f88:	f7e4 fc36 	bl	d7f8 <os_arch_save_sr>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   28f8c:	0164      	lsls	r4, r4, #5
   28f8e:	b2e4      	uxtb	r4, r4
   28f90:	4b18      	ldr	r3, [pc, #96]	; (28ff4 <os_tick_init+0x9c>)
   28f92:	f883 4311 	strb.w	r4, [r3, #785]	; 0x311
  uint32_t vectors = (uint32_t )SCB->VTOR;
   28f96:	4a18      	ldr	r2, [pc, #96]	; (28ff8 <os_tick_init+0xa0>)
   28f98:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   28f9a:	4918      	ldr	r1, [pc, #96]	; (28ffc <os_tick_init+0xa4>)
   28f9c:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   28fa0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   28fa4:	601a      	str	r2, [r3, #0]

    /*
     * Program the OS_TICK_TIMER to operate at 32KHz and trigger an output
     * compare interrupt at a rate of 'os_ticks_per_sec'.
     */
    OS_TICK_TIMER->TASKS_STOP = 1;
   28fa6:	f103 43c0 	add.w	r3, r3, #1610612736	; 0x60000000
   28faa:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
   28fae:	2201      	movs	r2, #1
   28fb0:	605a      	str	r2, [r3, #4]
    OS_TICK_TIMER->TASKS_CLEAR = 1;
   28fb2:	609a      	str	r2, [r3, #8]

    OS_TICK_TIMER->EVTENCLR = 0xffffffff;
   28fb4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   28fb8:	f8c3 1348 	str.w	r1, [r3, #840]	; 0x348
    OS_TICK_TIMER->INTENCLR = 0xffffffff;
   28fbc:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    OS_TICK_TIMER->INTENSET = RTC_COMPARE_INT_MASK(OS_TICK_CMPREG);
   28fc0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   28fc4:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

    OS_TICK_TIMER->EVENTS_COMPARE[OS_TICK_CMPREG] = 0;
   28fc8:	f8c3 614c 	str.w	r6, [r3, #332]	; 0x14c
    OS_TICK_TIMER->CC[OS_TICK_CMPREG] = g_hal_os_tick.ticks_per_ostick;
   28fcc:	6829      	ldr	r1, [r5, #0]
   28fce:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c

    OS_TICK_TIMER->TASKS_START = 1;
   28fd2:	601a      	str	r2, [r3, #0]

    OS_EXIT_CRITICAL(sr);
   28fd4:	f7e4 fc16 	bl	d804 <os_arch_restore_sr>
}
   28fd8:	bd70      	pop	{r4, r5, r6, pc}
    assert(RTC_FREQ % os_ticks_per_sec == 0);
   28fda:	f7e3 f905 	bl	c1e8 <hal_debugger_connected>
   28fde:	b100      	cbz	r0, 28fe2 <os_tick_init+0x8a>
   28fe0:	be01      	bkpt	0x0001
   28fe2:	2300      	movs	r3, #0
   28fe4:	461a      	mov	r2, r3
   28fe6:	4619      	mov	r1, r3
   28fe8:	4618      	mov	r0, r3
   28fea:	f7e3 fb37 	bl	c65c <__assert_func>
   28fee:	bf00      	nop
   28ff0:	20004790 	.word	0x20004790
   28ff4:	e000e100 	.word	0xe000e100
   28ff8:	e000ed00 	.word	0xe000ed00
   28ffc:	00028db5 	.word	0x00028db5

00029000 <nrf52_hal_wdt_default_handler>:
#include "mcu/cmsis_nvic.h"
#include "nrf.h"

static void
nrf52_hal_wdt_default_handler(void)
{
   29000:	b508      	push	{r3, lr}
    assert(0);
   29002:	f7e3 f8f1 	bl	c1e8 <hal_debugger_connected>
   29006:	b100      	cbz	r0, 2900a <nrf52_hal_wdt_default_handler+0xa>
   29008:	be01      	bkpt	0x0001
   2900a:	2300      	movs	r3, #0
   2900c:	461a      	mov	r2, r3
   2900e:	4619      	mov	r1, r3
   29010:	4618      	mov	r0, r3
   29012:	f7e3 fb23 	bl	c65c <__assert_func>
	...

00029018 <nrf52_wdt_irq_handler>:
}

/**@brief WDT interrupt handler. */
static void
nrf52_wdt_irq_handler(void)
{
   29018:	b508      	push	{r3, lr}
    os_trace_isr_enter();
    if (NRF_WDT->INTENSET & WDT_INTENSET_TIMEOUT_Msk) {
   2901a:	4b06      	ldr	r3, [pc, #24]	; (29034 <nrf52_wdt_irq_handler+0x1c>)
   2901c:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
   29020:	f013 0f01 	tst.w	r3, #1
   29024:	d100      	bne.n	29028 <nrf52_wdt_irq_handler+0x10>
        NRF_WDT->EVENTS_TIMEOUT = 0;
        nrf52_hal_wdt_default_handler();
    }
    os_trace_isr_exit();
}
   29026:	bd08      	pop	{r3, pc}
        NRF_WDT->EVENTS_TIMEOUT = 0;
   29028:	4b02      	ldr	r3, [pc, #8]	; (29034 <nrf52_wdt_irq_handler+0x1c>)
   2902a:	2200      	movs	r2, #0
   2902c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        nrf52_hal_wdt_default_handler();
   29030:	f7ff ffe6 	bl	29000 <nrf52_hal_wdt_default_handler>
   29034:	40010000 	.word	0x40010000

00029038 <hal_watchdog_init>:

int
hal_watchdog_init(uint32_t expire_msecs)
{
   29038:	b508      	push	{r3, lr}
    NRF_WDT->CONFIG = WDT_CONFIG_SLEEP_Msk;
   2903a:	4b19      	ldr	r3, [pc, #100]	; (290a0 <hal_watchdog_init+0x68>)
   2903c:	2201      	movs	r2, #1
   2903e:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c

    if (expire_msecs >= 44739243) {
   29042:	4b18      	ldr	r3, [pc, #96]	; (290a4 <hal_watchdog_init+0x6c>)
   29044:	4298      	cmp	r0, r3
   29046:	d821      	bhi.n	2908c <hal_watchdog_init+0x54>
        /* maximum allowed time is near 12.5 hours! */
        assert(0);
    } else {
        NRF_WDT->CRV = (expire_msecs * 32) + ((expire_msecs * 96) / 125);
   29048:	eb00 0240 	add.w	r2, r0, r0, lsl #1
   2904c:	0153      	lsls	r3, r2, #5
   2904e:	4a16      	ldr	r2, [pc, #88]	; (290a8 <hal_watchdog_init+0x70>)
   29050:	fba2 2303 	umull	r2, r3, r2, r3
   29054:	08db      	lsrs	r3, r3, #3
   29056:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   2905a:	4b11      	ldr	r3, [pc, #68]	; (290a0 <hal_watchdog_init+0x68>)
   2905c:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
  uint32_t vectors = (uint32_t )SCB->VTOR;
   29060:	4a12      	ldr	r2, [pc, #72]	; (290ac <hal_watchdog_init+0x74>)
   29062:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   29064:	4912      	ldr	r1, [pc, #72]	; (290b0 <hal_watchdog_init+0x78>)
   29066:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2906a:	4a12      	ldr	r2, [pc, #72]	; (290b4 <hal_watchdog_init+0x7c>)
   2906c:	21e0      	movs	r1, #224	; 0xe0
   2906e:	f882 1310 	strb.w	r1, [r2, #784]	; 0x310
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   29072:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   29076:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2907a:	6011      	str	r1, [r2, #0]

    NVIC_SetVector(WDT_IRQn, (uint32_t) nrf52_wdt_irq_handler);
    NVIC_SetPriority(WDT_IRQn, (1 << __NVIC_PRIO_BITS) - 1);
    NVIC_ClearPendingIRQ(WDT_IRQn);
    NVIC_EnableIRQ(WDT_IRQn);
    NRF_WDT->RREN |= 0x1;
   2907c:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
   29080:	f042 0201 	orr.w	r2, r2, #1
   29084:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508

    return (0);
}
   29088:	2000      	movs	r0, #0
   2908a:	bd08      	pop	{r3, pc}
        assert(0);
   2908c:	f7e3 f8ac 	bl	c1e8 <hal_debugger_connected>
   29090:	b100      	cbz	r0, 29094 <hal_watchdog_init+0x5c>
   29092:	be01      	bkpt	0x0001
   29094:	2300      	movs	r3, #0
   29096:	461a      	mov	r2, r3
   29098:	4619      	mov	r1, r3
   2909a:	4618      	mov	r0, r3
   2909c:	f7e3 fade 	bl	c65c <__assert_func>
   290a0:	40010000 	.word	0x40010000
   290a4:	02aaaaaa 	.word	0x02aaaaaa
   290a8:	10624dd3 	.word	0x10624dd3
   290ac:	e000ed00 	.word	0xe000ed00
   290b0:	00029019 	.word	0x00029019
   290b4:	e000e100 	.word	0xe000e100

000290b8 <hal_watchdog_enable>:

void
hal_watchdog_enable(void)
{
    NRF_WDT->INTENSET = WDT_INTENSET_TIMEOUT_Msk;
   290b8:	4b02      	ldr	r3, [pc, #8]	; (290c4 <hal_watchdog_enable+0xc>)
   290ba:	2201      	movs	r2, #1
   290bc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    NRF_WDT->TASKS_START = 1;
   290c0:	601a      	str	r2, [r3, #0]
}
   290c2:	4770      	bx	lr
   290c4:	40010000 	.word	0x40010000

000290c8 <hal_watchdog_tickle>:

void
hal_watchdog_tickle(void)
{
    NRF_WDT->RR[0] = WDT_RR_RR_Reload;
   290c8:	4b02      	ldr	r3, [pc, #8]	; (290d4 <hal_watchdog_tickle+0xc>)
   290ca:	4a03      	ldr	r2, [pc, #12]	; (290d8 <hal_watchdog_tickle+0x10>)
   290cc:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
}
   290d0:	4770      	bx	lr
   290d2:	bf00      	nop
   290d4:	40010000 	.word	0x40010000
   290d8:	6e524635 	.word	0x6e524635

000290dc <nrf52_clock_hfxo_request>:
 *
 * @return int 0: hfxo was already on. 1: hfxo was turned on.
 */
int
nrf52_clock_hfxo_request(void)
{
   290dc:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   290de:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   290e2:	b672      	cpsid	i
    int started;
    uint32_t ctx;

    started = 0;
    __HAL_DISABLE_INTERRUPTS(ctx);
    assert(nrf52_clock_hfxo_refcnt < 0xff);
   290e4:	4b0d      	ldr	r3, [pc, #52]	; (2911c <nrf52_clock_hfxo_request+0x40>)
   290e6:	781b      	ldrb	r3, [r3, #0]
   290e8:	2bff      	cmp	r3, #255	; 0xff
   290ea:	d00b      	beq.n	29104 <nrf52_clock_hfxo_request+0x28>
    if (nrf52_clock_hfxo_refcnt == 0) {
   290ec:	b9a3      	cbnz	r3, 29118 <nrf52_clock_hfxo_request+0x3c>
        NRF_CLOCK->TASKS_HFCLKSTART = 1;
   290ee:	2001      	movs	r0, #1
   290f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   290f4:	6018      	str	r0, [r3, #0]
        started = 1;
    }
    ++nrf52_clock_hfxo_refcnt;
   290f6:	4a09      	ldr	r2, [pc, #36]	; (2911c <nrf52_clock_hfxo_request+0x40>)
   290f8:	7813      	ldrb	r3, [r2, #0]
   290fa:	3301      	adds	r3, #1
   290fc:	7013      	strb	r3, [r2, #0]
    __HAL_ENABLE_INTERRUPTS(ctx);
   290fe:	b901      	cbnz	r1, 29102 <nrf52_clock_hfxo_request+0x26>
  __ASM volatile ("cpsie i" : : : "memory");
   29100:	b662      	cpsie	i

    return started;
}
   29102:	bd08      	pop	{r3, pc}
    assert(nrf52_clock_hfxo_refcnt < 0xff);
   29104:	f7e3 f870 	bl	c1e8 <hal_debugger_connected>
   29108:	b100      	cbz	r0, 2910c <nrf52_clock_hfxo_request+0x30>
   2910a:	be01      	bkpt	0x0001
   2910c:	2300      	movs	r3, #0
   2910e:	461a      	mov	r2, r3
   29110:	4619      	mov	r1, r3
   29112:	4618      	mov	r0, r3
   29114:	f7e3 faa2 	bl	c65c <__assert_func>
    started = 0;
   29118:	2000      	movs	r0, #0
   2911a:	e7ec      	b.n	290f6 <nrf52_clock_hfxo_request+0x1a>
   2911c:	20003a2c 	.word	0x20003a2c

00029120 <nrf52_clock_hfxo_release>:
 * @return int 0: HFXO not stopped by this call (others using it) 1: HFXO
 *         stopped.
 */
int
nrf52_clock_hfxo_release(void)
{
   29120:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   29122:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   29126:	b672      	cpsid	i
    int stopped;
    uint32_t ctx;

    stopped = 0;
    __HAL_DISABLE_INTERRUPTS(ctx);
    assert(nrf52_clock_hfxo_refcnt != 0);
   29128:	4b0d      	ldr	r3, [pc, #52]	; (29160 <nrf52_clock_hfxo_release+0x40>)
   2912a:	781b      	ldrb	r3, [r3, #0]
   2912c:	b15b      	cbz	r3, 29146 <nrf52_clock_hfxo_release+0x26>
    --nrf52_clock_hfxo_refcnt;
   2912e:	3b01      	subs	r3, #1
   29130:	b2db      	uxtb	r3, r3
   29132:	490b      	ldr	r1, [pc, #44]	; (29160 <nrf52_clock_hfxo_release+0x40>)
   29134:	700b      	strb	r3, [r1, #0]
    if (nrf52_clock_hfxo_refcnt == 0) {
   29136:	b983      	cbnz	r3, 2915a <nrf52_clock_hfxo_release+0x3a>
        NRF_CLOCK->TASKS_HFCLKSTOP = 1;
   29138:	2001      	movs	r0, #1
   2913a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2913e:	6058      	str	r0, [r3, #4]
        stopped = 1;
    }
    __HAL_ENABLE_INTERRUPTS(ctx);
   29140:	b902      	cbnz	r2, 29144 <nrf52_clock_hfxo_release+0x24>
  __ASM volatile ("cpsie i" : : : "memory");
   29142:	b662      	cpsie	i

    return stopped;
}
   29144:	bd08      	pop	{r3, pc}
    assert(nrf52_clock_hfxo_refcnt != 0);
   29146:	f7e3 f84f 	bl	c1e8 <hal_debugger_connected>
   2914a:	b100      	cbz	r0, 2914e <nrf52_clock_hfxo_release+0x2e>
   2914c:	be01      	bkpt	0x0001
   2914e:	2300      	movs	r3, #0
   29150:	461a      	mov	r2, r3
   29152:	4619      	mov	r1, r3
   29154:	4618      	mov	r0, r3
   29156:	f7e3 fa81 	bl	c65c <__assert_func>
    stopped = 0;
   2915a:	2000      	movs	r0, #0
   2915c:	e7f0      	b.n	29140 <nrf52_clock_hfxo_release+0x20>
   2915e:	bf00      	nop
   29160:	20003a2c 	.word	0x20003a2c

00029164 <nrf52_periph_create_timers>:
#endif
#endif

static void
nrf52_periph_create_timers(void)
{
   29164:	b508      	push	{r3, lr}
#if MYNEWT_VAL(TIMER_4)
    rc = hal_timer_init(4, NULL);
    assert(rc == 0);
#endif
#if MYNEWT_VAL(TIMER_5)
    rc = hal_timer_init(5, NULL);
   29166:	2100      	movs	r1, #0
   29168:	2005      	movs	r0, #5
   2916a:	f000 f95b 	bl	29424 <hal_timer_init>
    assert(rc == 0);
   2916e:	b928      	cbnz	r0, 2917c <nrf52_periph_create_timers+0x18>
#endif

#if MYNEWT_VAL(OS_CPUTIME_TIMER_NUM) >= 0
    rc = os_cputime_init(MYNEWT_VAL(OS_CPUTIME_FREQ));
   29170:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   29174:	f000 fb7f 	bl	29876 <os_cputime_init>
    assert(rc == 0);
   29178:	b950      	cbnz	r0, 29190 <nrf52_periph_create_timers+0x2c>
#endif
}
   2917a:	bd08      	pop	{r3, pc}
    assert(rc == 0);
   2917c:	f7e3 f834 	bl	c1e8 <hal_debugger_connected>
   29180:	b100      	cbz	r0, 29184 <nrf52_periph_create_timers+0x20>
   29182:	be01      	bkpt	0x0001
   29184:	2300      	movs	r3, #0
   29186:	461a      	mov	r2, r3
   29188:	4619      	mov	r1, r3
   2918a:	4618      	mov	r0, r3
   2918c:	f7e3 fa66 	bl	c65c <__assert_func>
    assert(rc == 0);
   29190:	f7e3 f82a 	bl	c1e8 <hal_debugger_connected>
   29194:	b100      	cbz	r0, 29198 <nrf52_periph_create_timers+0x34>
   29196:	be01      	bkpt	0x0001
   29198:	2300      	movs	r3, #0
   2919a:	461a      	mov	r2, r3
   2919c:	4619      	mov	r1, r3
   2919e:	4618      	mov	r0, r3
   291a0:	f7e3 fa5c 	bl	c65c <__assert_func>

000291a4 <nrf52_periph_create_uart>:
#endif
}

static void
nrf52_periph_create_uart(void)
{
   291a4:	b500      	push	{lr}
   291a6:	b083      	sub	sp, #12
    int rc;

    (void)rc;

#if MYNEWT_VAL(UART_0)
    rc = os_dev_create(&os_bsp_uart0.ud_dev, "uart0",
   291a8:	4b0b      	ldr	r3, [pc, #44]	; (291d8 <nrf52_periph_create_uart+0x34>)
   291aa:	9301      	str	r3, [sp, #4]
   291ac:	4b0b      	ldr	r3, [pc, #44]	; (291dc <nrf52_periph_create_uart+0x38>)
   291ae:	9300      	str	r3, [sp, #0]
   291b0:	2300      	movs	r3, #0
   291b2:	2201      	movs	r2, #1
   291b4:	490a      	ldr	r1, [pc, #40]	; (291e0 <nrf52_periph_create_uart+0x3c>)
   291b6:	480b      	ldr	r0, [pc, #44]	; (291e4 <nrf52_periph_create_uart+0x40>)
   291b8:	f7e3 fd02 	bl	cbc0 <os_dev_create>
                       OS_DEV_INIT_PRIMARY, 0, uart_hal_init,
                       (void *)&os_bsp_uart0_cfg);
    assert(rc == 0);
   291bc:	b910      	cbnz	r0, 291c4 <nrf52_periph_create_uart+0x20>
    rc = os_dev_create(&os_bsp_uart1.ud_dev, "uart1",
                       OS_DEV_INIT_PRIMARY, 1, uart_hal_init,
                       (void *)&os_bsp_uart1_cfg);
    assert(rc == 0);
#endif
}
   291be:	b003      	add	sp, #12
   291c0:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
   291c4:	f7e3 f810 	bl	c1e8 <hal_debugger_connected>
   291c8:	b100      	cbz	r0, 291cc <nrf52_periph_create_uart+0x28>
   291ca:	be01      	bkpt	0x0001
   291cc:	2300      	movs	r3, #0
   291ce:	461a      	mov	r2, r3
   291d0:	4619      	mov	r1, r3
   291d2:	4618      	mov	r0, r3
   291d4:	f7e3 fa42 	bl	c65c <__assert_func>
   291d8:	0002bdc8 	.word	0x0002bdc8
   291dc:	0002a449 	.word	0x0002a449
   291e0:	0002ae9c 	.word	0x0002ae9c
   291e4:	20003a30 	.word	0x20003a30

000291e8 <nrf52_periph_create>:
#endif
}

void
nrf52_periph_create(void)
{
   291e8:	b508      	push	{r3, lr}
    nrf52_periph_create_timers();
   291ea:	f7ff ffbb 	bl	29164 <nrf52_periph_create_timers>
    nrf52_periph_create_adc();
    nrf52_periph_create_pwm();
    nrf52_periph_create_trng();
    nrf52_periph_create_crypto();
    nrf52_periph_create_uart();
   291ee:	f7ff ffd9 	bl	291a4 <nrf52_periph_create_uart>
    nrf52_periph_create_i2c();
    nrf52_periph_create_spi();
}
   291f2:	bd08      	pop	{r3, pc}

000291f4 <nrf_read_timer_cntr>:
nrf_read_timer_cntr(NRF_TIMER_Type *hwtimer)
{
    uint32_t tcntr;

    /* Force a capture of the timer into 'cntr' capture channel; read it */
    hwtimer->TASKS_CAPTURE[NRF_TIMER_CC_READ] = 1;
   291f4:	2301      	movs	r3, #1
   291f6:	6483      	str	r3, [r0, #72]	; 0x48
    tcntr = hwtimer->CC[NRF_TIMER_CC_READ];
   291f8:	f8d0 0548 	ldr.w	r0, [r0, #1352]	; 0x548

    return tcntr;
}
   291fc:	4770      	bx	lr
	...

00029200 <nrf_timer_set_ocmp>:
 *
 * @param timer Pointer to timer.
 */
static void
nrf_timer_set_ocmp(struct nrf52_hal_timer *bsptimer, uint32_t expiry)
{
   29200:	b538      	push	{r3, r4, r5, lr}
    uint32_t temp;
    uint32_t cntr;
    NRF_TIMER_Type *hwtimer;
    NRF_RTC_Type *rtctimer;

    if (bsptimer->tmr_rtc) {
   29202:	7883      	ldrb	r3, [r0, #2]
   29204:	2b00      	cmp	r3, #0
   29206:	d050      	beq.n	292aa <nrf_timer_set_ocmp+0xaa>
        rtctimer = (NRF_RTC_Type *)bsptimer->tmr_reg;
   29208:	6902      	ldr	r2, [r0, #16]
        rtctimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
   2920a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   2920e:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
        temp = bsptimer->tmr_cntr;
   29212:	6843      	ldr	r3, [r0, #4]
        cntr = rtctimer->COUNTER;
   29214:	f8d2 4504 	ldr.w	r4, [r2, #1284]	; 0x504
        if (rtctimer->EVENTS_OVRFLW) {
   29218:	f8d2 5104 	ldr.w	r5, [r2, #260]	; 0x104
   2921c:	b11d      	cbz	r5, 29226 <nrf_timer_set_ocmp+0x26>
            temp += (1UL << 24);
   2921e:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
            cntr = rtctimer->COUNTER;
   29222:	f8d2 4504 	ldr.w	r4, [r2, #1284]	; 0x504
        }
        temp |= cntr;
   29226:	4323      	orrs	r3, r4
        delta_t = (int32_t)(expiry - temp);
   29228:	1acb      	subs	r3, r1, r3
         * to be handled differently. TICK event is used to have interrupt on
         * each subsequent tick so we won't miss any and in case we detected
         * mentioned extra tick during calculations, interrupt is triggered
         * immediately. Delta 0 or less means we should always fire immediately.
         */
        if (delta_t < 1) {
   2922a:	2b00      	cmp	r3, #0
   2922c:	dd17      	ble.n	2925e <nrf_timer_set_ocmp+0x5e>
            rtctimer->INTENCLR = RTC_INTENCLR_TICK_Msk;
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
        } else if (delta_t < 3) {
   2922e:	2b02      	cmp	r3, #2
   29230:	dc27      	bgt.n	29282 <nrf_timer_set_ocmp+0x82>
            rtctimer->INTENSET = RTC_INTENSET_TICK_Msk;
   29232:	2301      	movs	r3, #1
   29234:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
            if (rtctimer->COUNTER != cntr) {
   29238:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
   2923c:	42a3      	cmp	r3, r4
   2923e:	d02e      	beq.n	2929e <nrf_timer_set_ocmp+0x9e>
                NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
   29240:	7842      	ldrb	r2, [r0, #1]
   29242:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   29244:	2b00      	cmp	r3, #0
   29246:	db2a      	blt.n	2929e <nrf_timer_set_ocmp+0x9e>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   29248:	f002 021f 	and.w	r2, r2, #31
   2924c:	095b      	lsrs	r3, r3, #5
   2924e:	2101      	movs	r1, #1
   29250:	fa01 f202 	lsl.w	r2, r1, r2
   29254:	3340      	adds	r3, #64	; 0x40
   29256:	4926      	ldr	r1, [pc, #152]	; (292f0 <nrf_timer_set_ocmp+0xf0>)
   29258:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   2925c:	e01f      	b.n	2929e <nrf_timer_set_ocmp+0x9e>
            rtctimer->INTENCLR = RTC_INTENCLR_TICK_Msk;
   2925e:	2301      	movs	r3, #1
   29260:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
   29264:	7842      	ldrb	r2, [r0, #1]
   29266:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   29268:	2b00      	cmp	r3, #0
   2926a:	db18      	blt.n	2929e <nrf_timer_set_ocmp+0x9e>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2926c:	f002 021f 	and.w	r2, r2, #31
   29270:	095b      	lsrs	r3, r3, #5
   29272:	2101      	movs	r1, #1
   29274:	fa01 f202 	lsl.w	r2, r1, r2
   29278:	3340      	adds	r3, #64	; 0x40
   2927a:	491d      	ldr	r1, [pc, #116]	; (292f0 <nrf_timer_set_ocmp+0xf0>)
   2927c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   29280:	e00d      	b.n	2929e <nrf_timer_set_ocmp+0x9e>
            }
        } else {
            rtctimer->INTENCLR = RTC_INTENCLR_TICK_Msk;
   29282:	2001      	movs	r0, #1
   29284:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308

            if (delta_t < (1UL << 24)) {
   29288:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   2928c:	d208      	bcs.n	292a0 <nrf_timer_set_ocmp+0xa0>
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = expiry & 0x00ffffff;
   2928e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   29292:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
            } else {
                /* CC too far ahead. Just make sure we set compare far ahead */
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = cntr + (1UL << 23);
            }
            rtctimer->INTENSET = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
   29296:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   2929a:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
        /* Force interrupt to occur as we may have missed it */
        if ((int32_t)(nrf_read_timer_cntr(hwtimer) - expiry) >= 0) {
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
        }
    }
}
   2929e:	bd38      	pop	{r3, r4, r5, pc}
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = cntr + (1UL << 23);
   292a0:	f504 0400 	add.w	r4, r4, #8388608	; 0x800000
   292a4:	f8c2 4548 	str.w	r4, [r2, #1352]	; 0x548
   292a8:	e7f5      	b.n	29296 <nrf_timer_set_ocmp+0x96>
   292aa:	460d      	mov	r5, r1
   292ac:	4604      	mov	r4, r0
        hwtimer = bsptimer->tmr_reg;
   292ae:	6900      	ldr	r0, [r0, #16]
        hwtimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
   292b0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   292b4:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
        hwtimer->CC[NRF_TIMER_CC_INT] = expiry;
   292b8:	f8c0 154c 	str.w	r1, [r0, #1356]	; 0x54c
        hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT] = 0;
   292bc:	2200      	movs	r2, #0
   292be:	f8c0 214c 	str.w	r2, [r0, #332]	; 0x14c
        hwtimer->INTENSET = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
   292c2:	f8c0 3304 	str.w	r3, [r0, #772]	; 0x304
        if ((int32_t)(nrf_read_timer_cntr(hwtimer) - expiry) >= 0) {
   292c6:	f7ff ff95 	bl	291f4 <nrf_read_timer_cntr>
   292ca:	1b40      	subs	r0, r0, r5
   292cc:	2800      	cmp	r0, #0
   292ce:	dbe6      	blt.n	2929e <nrf_timer_set_ocmp+0x9e>
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
   292d0:	7862      	ldrb	r2, [r4, #1]
   292d2:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   292d4:	2b00      	cmp	r3, #0
   292d6:	dbe2      	blt.n	2929e <nrf_timer_set_ocmp+0x9e>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   292d8:	f002 021f 	and.w	r2, r2, #31
   292dc:	095b      	lsrs	r3, r3, #5
   292de:	2101      	movs	r1, #1
   292e0:	fa01 f202 	lsl.w	r2, r1, r2
   292e4:	3340      	adds	r3, #64	; 0x40
   292e6:	4902      	ldr	r1, [pc, #8]	; (292f0 <nrf_timer_set_ocmp+0xf0>)
   292e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   292ec:	e7d7      	b.n	2929e <nrf_timer_set_ocmp+0x9e>
   292ee:	bf00      	nop
   292f0:	e000e100 	.word	0xe000e100

000292f4 <nrf_timer_disable_ocmp>:

/* Disable output compare used for timer */
static void
nrf_timer_disable_ocmp(NRF_TIMER_Type *hwtimer)
{
    hwtimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
   292f4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   292f8:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
}
   292fc:	4770      	bx	lr

000292fe <nrf_rtc_disable_ocmp>:

static void
nrf_rtc_disable_ocmp(NRF_RTC_Type *rtctimer)
{
    rtctimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
   292fe:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   29302:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
    rtctimer->INTENCLR = RTC_INTENCLR_TICK_Msk;
   29306:	2301      	movs	r3, #1
   29308:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
}
   2930c:	4770      	bx	lr
	...

00029310 <hal_timer_read_bsptimer>:

static uint32_t
hal_timer_read_bsptimer(struct nrf52_hal_timer *bsptimer)
{
   29310:	b430      	push	{r4, r5}
    uint32_t low32;
    uint32_t ctx;
    uint32_t tcntr;
    NRF_RTC_Type *rtctimer;

    rtctimer = (NRF_RTC_Type *)bsptimer->tmr_reg;
   29312:	6902      	ldr	r2, [r0, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   29314:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   29318:	b672      	cpsid	i
    __HAL_DISABLE_INTERRUPTS(ctx);
    tcntr = bsptimer->tmr_cntr;
   2931a:	6841      	ldr	r1, [r0, #4]
    low32 = rtctimer->COUNTER;
   2931c:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
    if (rtctimer->EVENTS_OVRFLW) {
   29320:	f8d2 5104 	ldr.w	r5, [r2, #260]	; 0x104
   29324:	b1ad      	cbz	r5, 29352 <hal_timer_read_bsptimer+0x42>
        tcntr += (1UL << 24);
   29326:	f101 7180 	add.w	r1, r1, #16777216	; 0x1000000
        bsptimer->tmr_cntr = tcntr;
   2932a:	6041      	str	r1, [r0, #4]
        low32 = rtctimer->COUNTER;
   2932c:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
        rtctimer->EVENTS_OVRFLW = 0;
   29330:	2500      	movs	r5, #0
   29332:	f8c2 5104 	str.w	r5, [r2, #260]	; 0x104
        NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
   29336:	7840      	ldrb	r0, [r0, #1]
   29338:	b242      	sxtb	r2, r0
  if ((int32_t)(IRQn) >= 0)
   2933a:	42aa      	cmp	r2, r5
   2933c:	db09      	blt.n	29352 <hal_timer_read_bsptimer+0x42>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2933e:	f000 001f 	and.w	r0, r0, #31
   29342:	0952      	lsrs	r2, r2, #5
   29344:	2501      	movs	r5, #1
   29346:	fa05 f000 	lsl.w	r0, r5, r0
   2934a:	3240      	adds	r2, #64	; 0x40
   2934c:	4d04      	ldr	r5, [pc, #16]	; (29360 <hal_timer_read_bsptimer+0x50>)
   2934e:	f845 0022 	str.w	r0, [r5, r2, lsl #2]
    }
    tcntr |= low32;
   29352:	ea43 0001 	orr.w	r0, r3, r1
    __HAL_ENABLE_INTERRUPTS(ctx);
   29356:	b904      	cbnz	r4, 2935a <hal_timer_read_bsptimer+0x4a>
  __ASM volatile ("cpsie i" : : : "memory");
   29358:	b662      	cpsie	i

    return tcntr;
}
   2935a:	bc30      	pop	{r4, r5}
   2935c:	4770      	bx	lr
   2935e:	bf00      	nop
   29360:	e000e100 	.word	0xe000e100

00029364 <hal_timer_chk_queue>:
 *
 * @param bsptimer
 */
static void
hal_timer_chk_queue(struct nrf52_hal_timer *bsptimer)
{
   29364:	b570      	push	{r4, r5, r6, lr}
   29366:	4605      	mov	r5, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   29368:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   2936c:	b672      	cpsid	i
   2936e:	e012      	b.n	29396 <hal_timer_chk_queue+0x32>
    __HAL_DISABLE_INTERRUPTS(ctx);
    while ((timer = TAILQ_FIRST(&bsptimer->hal_timer_q)) != NULL) {
        if (bsptimer->tmr_rtc) {
            tcntr = hal_timer_read_bsptimer(bsptimer);
        } else {
            tcntr = nrf_read_timer_cntr(bsptimer->tmr_reg);
   29370:	6928      	ldr	r0, [r5, #16]
   29372:	f7ff ff3f 	bl	291f4 <nrf_read_timer_cntr>
        }
        if ((int32_t)(tcntr - timer->expiry) >= 0) {
   29376:	68e3      	ldr	r3, [r4, #12]
   29378:	1ac0      	subs	r0, r0, r3
   2937a:	2800      	cmp	r0, #0
   2937c:	db17      	blt.n	293ae <hal_timer_chk_queue+0x4a>
            TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
   2937e:	6923      	ldr	r3, [r4, #16]
   29380:	b193      	cbz	r3, 293a8 <hal_timer_chk_queue+0x44>
   29382:	6962      	ldr	r2, [r4, #20]
   29384:	615a      	str	r2, [r3, #20]
   29386:	6963      	ldr	r3, [r4, #20]
   29388:	6922      	ldr	r2, [r4, #16]
   2938a:	601a      	str	r2, [r3, #0]
            timer->link.tqe_prev = NULL;
   2938c:	2300      	movs	r3, #0
   2938e:	6163      	str	r3, [r4, #20]
            timer->cb_func(timer->cb_arg);
   29390:	6863      	ldr	r3, [r4, #4]
   29392:	68a0      	ldr	r0, [r4, #8]
   29394:	4798      	blx	r3
    while ((timer = TAILQ_FIRST(&bsptimer->hal_timer_q)) != NULL) {
   29396:	696c      	ldr	r4, [r5, #20]
   29398:	b14c      	cbz	r4, 293ae <hal_timer_chk_queue+0x4a>
        if (bsptimer->tmr_rtc) {
   2939a:	78ab      	ldrb	r3, [r5, #2]
   2939c:	2b00      	cmp	r3, #0
   2939e:	d0e7      	beq.n	29370 <hal_timer_chk_queue+0xc>
            tcntr = hal_timer_read_bsptimer(bsptimer);
   293a0:	4628      	mov	r0, r5
   293a2:	f7ff ffb5 	bl	29310 <hal_timer_read_bsptimer>
   293a6:	e7e6      	b.n	29376 <hal_timer_chk_queue+0x12>
            TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
   293a8:	6963      	ldr	r3, [r4, #20]
   293aa:	61ab      	str	r3, [r5, #24]
   293ac:	e7eb      	b.n	29386 <hal_timer_chk_queue+0x22>
            break;
        }
    }

    /* Any timers left on queue? If so, we need to set OCMP */
    timer = TAILQ_FIRST(&bsptimer->hal_timer_q);
   293ae:	696b      	ldr	r3, [r5, #20]
    if (timer) {
   293b0:	b133      	cbz	r3, 293c0 <hal_timer_chk_queue+0x5c>
        nrf_timer_set_ocmp(bsptimer, timer->expiry);
   293b2:	68d9      	ldr	r1, [r3, #12]
   293b4:	4628      	mov	r0, r5
   293b6:	f7ff ff23 	bl	29200 <nrf_timer_set_ocmp>
            nrf_rtc_disable_ocmp((NRF_RTC_Type *)bsptimer->tmr_reg);
        } else {
            nrf_timer_disable_ocmp(bsptimer->tmr_reg);
        }
    }
    __HAL_ENABLE_INTERRUPTS(ctx);
   293ba:	b906      	cbnz	r6, 293be <hal_timer_chk_queue+0x5a>
  __ASM volatile ("cpsie i" : : : "memory");
   293bc:	b662      	cpsie	i
}
   293be:	bd70      	pop	{r4, r5, r6, pc}
        if (bsptimer->tmr_rtc) {
   293c0:	78ab      	ldrb	r3, [r5, #2]
   293c2:	b11b      	cbz	r3, 293cc <hal_timer_chk_queue+0x68>
            nrf_rtc_disable_ocmp((NRF_RTC_Type *)bsptimer->tmr_reg);
   293c4:	6928      	ldr	r0, [r5, #16]
   293c6:	f7ff ff9a 	bl	292fe <nrf_rtc_disable_ocmp>
   293ca:	e7f6      	b.n	293ba <hal_timer_chk_queue+0x56>
            nrf_timer_disable_ocmp(bsptimer->tmr_reg);
   293cc:	6928      	ldr	r0, [r5, #16]
   293ce:	f7ff ff91 	bl	292f4 <nrf_timer_disable_ocmp>
   293d2:	e7f2      	b.n	293ba <hal_timer_chk_queue+0x56>

000293d4 <hal_rtc_timer_irq_handler>:
#endif

#if MYNEWT_VAL(TIMER_5)
static void
hal_rtc_timer_irq_handler(struct nrf52_hal_timer *bsptimer)
{
   293d4:	b510      	push	{r4, lr}
    NRF_RTC_Type *rtctimer;

    os_trace_isr_enter();

    /* Check interrupt source. If set, clear them */
    rtctimer = (NRF_RTC_Type *)bsptimer->tmr_reg;
   293d6:	6904      	ldr	r4, [r0, #16]
    compare = rtctimer->EVENTS_COMPARE[NRF_RTC_TIMER_CC_INT];
   293d8:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    if (compare) {
   293dc:	b113      	cbz	r3, 293e4 <hal_rtc_timer_irq_handler+0x10>
       rtctimer->EVENTS_COMPARE[NRF_RTC_TIMER_CC_INT] = 0;
   293de:	2300      	movs	r3, #0
   293e0:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    }

    tick = rtctimer->EVENTS_TICK;
   293e4:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    if (tick) {
   293e8:	b113      	cbz	r3, 293f0 <hal_rtc_timer_irq_handler+0x1c>
        rtctimer->EVENTS_TICK = 0;
   293ea:	2300      	movs	r3, #0
   293ec:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    }

    overflow = rtctimer->EVENTS_OVRFLW;
   293f0:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    if (overflow) {
   293f4:	b133      	cbz	r3, 29404 <hal_rtc_timer_irq_handler+0x30>
        rtctimer->EVENTS_OVRFLW = 0;
   293f6:	2300      	movs	r3, #0
   293f8:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
        bsptimer->tmr_cntr += (1UL << 24);
   293fc:	6843      	ldr	r3, [r0, #4]
   293fe:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
   29402:	6043      	str	r3, [r0, #4]
    }

    /* Count # of timer isrs */
    ++bsptimer->timer_isrs;
   29404:	6883      	ldr	r3, [r0, #8]
   29406:	3301      	adds	r3, #1
   29408:	6083      	str	r3, [r0, #8]
     * counter is already passed the output compare value), we use the NVIC
     * to set a pending interrupt. This means that there will be no compare
     * flag set, so all we do is check to see if the compare interrupt is
     * enabled.
     */
    hal_timer_chk_queue(bsptimer);
   2940a:	f7ff ffab 	bl	29364 <hal_timer_chk_queue>

    /* Recommended by nordic to make sure interrupts are cleared */
    compare = rtctimer->EVENTS_COMPARE[NRF_RTC_TIMER_CC_INT];
   2940e:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148

    os_trace_isr_exit();
}
   29412:	bd10      	pop	{r4, pc}

00029414 <nrf52_timer5_irq_handler>:
#endif

#if MYNEWT_VAL(TIMER_5)
void
nrf52_timer5_irq_handler(void)
{
   29414:	b508      	push	{r3, lr}
    hal_rtc_timer_irq_handler(&nrf52_hal_timer5);
   29416:	4802      	ldr	r0, [pc, #8]	; (29420 <nrf52_timer5_irq_handler+0xc>)
   29418:	f7ff ffdc 	bl	293d4 <hal_rtc_timer_irq_handler>
}
   2941c:	bd08      	pop	{r3, pc}
   2941e:	bf00      	nop
   29420:	2000479c 	.word	0x2000479c

00029424 <hal_timer_init>:
    uint8_t irq_num;
    struct nrf52_hal_timer *bsptimer;
    void *hwtimer;
    hal_timer_irq_handler_t irq_isr;

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   29424:	2805      	cmp	r0, #5
   29426:	dc20      	bgt.n	2946a <hal_timer_init+0x46>
   29428:	4b14      	ldr	r3, [pc, #80]	; (2947c <hal_timer_init+0x58>)
   2942a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   2942e:	b1f3      	cbz	r3, 2946e <hal_timer_init+0x4a>

    /* If timer is enabled do not allow init */
    if (bsptimer->tmr_enabled) {
   29430:	781a      	ldrb	r2, [r3, #0]
   29432:	b9f2      	cbnz	r2, 29472 <hal_timer_init+0x4e>
        rc = EINVAL;
        goto err;
    }

    switch (timer_num) {
   29434:	2805      	cmp	r0, #5
   29436:	d11e      	bne.n	29476 <hal_timer_init+0x52>
#if MYNEWT_VAL(TIMER_5)
    case 5:
        irq_num = RTC0_IRQn;
        hwtimer = NRF_RTC0;
        irq_isr = nrf52_timer5_irq_handler;
        bsptimer->tmr_rtc = 1;
   29438:	2201      	movs	r2, #1
   2943a:	709a      	strb	r2, [r3, #2]
    if (hwtimer == NULL) {
        rc = EINVAL;
        goto err;
    }

    bsptimer->tmr_reg = hwtimer;
   2943c:	4a10      	ldr	r2, [pc, #64]	; (29480 <hal_timer_init+0x5c>)
   2943e:	611a      	str	r2, [r3, #16]
    bsptimer->tmr_irq_num = irq_num;
   29440:	220b      	movs	r2, #11
   29442:	705a      	strb	r2, [r3, #1]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   29444:	4b0f      	ldr	r3, [pc, #60]	; (29484 <hal_timer_init+0x60>)
   29446:	f44f 6200 	mov.w	r2, #2048	; 0x800
   2944a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
   2944e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   29452:	f3bf 8f6f 	isb	sy
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   29456:	22e0      	movs	r2, #224	; 0xe0
   29458:	f883 230b 	strb.w	r2, [r3, #779]	; 0x30b
  uint32_t vectors = (uint32_t )SCB->VTOR;
   2945c:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
   29460:	689b      	ldr	r3, [r3, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   29462:	4a09      	ldr	r2, [pc, #36]	; (29488 <hal_timer_init+0x64>)
   29464:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Disable IRQ, set priority and set vector in table */
    NVIC_DisableIRQ(irq_num);
    NVIC_SetPriority(irq_num, (1 << __NVIC_PRIO_BITS) - 1);
    NVIC_SetVector(irq_num, (uint32_t)irq_isr);

    return 0;
   29466:	2000      	movs	r0, #0
   29468:	4770      	bx	lr

err:
    return rc;
   2946a:	2016      	movs	r0, #22
   2946c:	4770      	bx	lr
   2946e:	2016      	movs	r0, #22
   29470:	4770      	bx	lr
   29472:	2016      	movs	r0, #22
   29474:	4770      	bx	lr
   29476:	2016      	movs	r0, #22
}
   29478:	4770      	bx	lr
   2947a:	bf00      	nop
   2947c:	0002bdcc 	.word	0x0002bdcc
   29480:	4000b000 	.word	0x4000b000
   29484:	e000e100 	.word	0xe000e100
   29488:	00029415 	.word	0x00029415

0002948c <hal_timer_config>:
    NRF_TIMER_Type *hwtimer;
#if MYNEWT_VAL(TIMER_5)
    NRF_RTC_Type *rtctimer;
#endif

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   2948c:	2805      	cmp	r0, #5
   2948e:	f300 8097 	bgt.w	295c0 <hal_timer_config+0x134>
{
   29492:	b430      	push	{r4, r5}
    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   29494:	4b56      	ldr	r3, [pc, #344]	; (295f0 <hal_timer_config+0x164>)
   29496:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   2949a:	2c00      	cmp	r4, #0
   2949c:	f000 8092 	beq.w	295c4 <hal_timer_config+0x138>

#if MYNEWT_VAL(TIMER_5)
    if (timer_num == 5) {
   294a0:	2805      	cmp	r0, #5
   294a2:	d01d      	beq.n	294e0 <hal_timer_config+0x54>
        return 0;
    }
#endif

    /* Set timer to desired frequency */
    div = NRF52_MAX_TIMER_FREQ / freq_hz;
   294a4:	4b53      	ldr	r3, [pc, #332]	; (295f4 <hal_timer_config+0x168>)
   294a6:	fbb3 f1f1 	udiv	r1, r3, r1
    /*
     * Largest prescaler is 2^9 and must make sure frequency not too high.
     * If hwtimer is NULL it means that the timer was not initialized prior
     * to call.
     */
    if (bsptimer->tmr_enabled || (div == 0) || (div > 512) ||
   294aa:	7823      	ldrb	r3, [r4, #0]
   294ac:	2b00      	cmp	r3, #0
   294ae:	f040 8093 	bne.w	295d8 <hal_timer_config+0x14c>
   294b2:	2900      	cmp	r1, #0
   294b4:	f000 8093 	beq.w	295de <hal_timer_config+0x152>
   294b8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   294bc:	f200 8091 	bhi.w	295e2 <hal_timer_config+0x156>
        (bsptimer->tmr_reg == NULL)) {
   294c0:	6922      	ldr	r2, [r4, #16]
    if (bsptimer->tmr_enabled || (div == 0) || (div > 512) ||
   294c2:	2a00      	cmp	r2, #0
   294c4:	f000 808f 	beq.w	295e6 <hal_timer_config+0x15a>
        rc = EINVAL;
        goto err;
    }

    if (div == 1) {
   294c8:	2901      	cmp	r1, #1
   294ca:	d03f      	beq.n	2954c <hal_timer_config+0xc0>
        prescaler = 0;
    } else {
        /* Find closest prescaler */
        for (prescaler = 1; prescaler < 10; ++prescaler) {
   294cc:	2301      	movs	r3, #1
   294ce:	2b09      	cmp	r3, #9
   294d0:	d83c      	bhi.n	2954c <hal_timer_config+0xc0>
            if (div <= (1 << prescaler)) {
   294d2:	2201      	movs	r2, #1
   294d4:	409a      	lsls	r2, r3
   294d6:	428a      	cmp	r2, r1
   294d8:	d22e      	bcs.n	29538 <hal_timer_config+0xac>
        for (prescaler = 1; prescaler < 10; ++prescaler) {
   294da:	3301      	adds	r3, #1
   294dc:	b2db      	uxtb	r3, r3
   294de:	e7f6      	b.n	294ce <hal_timer_config+0x42>
        if (bsptimer->tmr_enabled || (freq_hz != 32768) ||
   294e0:	7823      	ldrb	r3, [r4, #0]
   294e2:	2b00      	cmp	r3, #0
   294e4:	d170      	bne.n	295c8 <hal_timer_config+0x13c>
   294e6:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
   294ea:	d16f      	bne.n	295cc <hal_timer_config+0x140>
            (bsptimer->tmr_reg == NULL)) {
   294ec:	6923      	ldr	r3, [r4, #16]
        if (bsptimer->tmr_enabled || (freq_hz != 32768) ||
   294ee:	2b00      	cmp	r3, #0
   294f0:	d06e      	beq.n	295d0 <hal_timer_config+0x144>
        bsptimer->tmr_freq = freq_hz;
   294f2:	60e1      	str	r1, [r4, #12]
        bsptimer->tmr_enabled = 1;
   294f4:	2201      	movs	r2, #1
   294f6:	7022      	strb	r2, [r4, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   294f8:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   294fc:	b672      	cpsid	i
        rtctimer = (NRF_RTC_Type *)bsptimer->tmr_reg;
   294fe:	6923      	ldr	r3, [r4, #16]
        rtctimer->TASKS_STOP = 1;
   29500:	605a      	str	r2, [r3, #4]
        rtctimer->TASKS_CLEAR = 1;
   29502:	609a      	str	r2, [r3, #8]
        rtctimer->PRESCALER = 0;
   29504:	2100      	movs	r1, #0
   29506:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
        rtctimer->EVENTS_OVRFLW = 0;
   2950a:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
        rtctimer->INTENSET = RTC_INTENSET_OVRFLW_Msk;
   2950e:	2102      	movs	r1, #2
   29510:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
        rtctimer->TASKS_START = 1;
   29514:	601a      	str	r2, [r3, #0]
        NVIC_EnableIRQ(bsptimer->tmr_irq_num);
   29516:	7862      	ldrb	r2, [r4, #1]
   29518:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   2951a:	2b00      	cmp	r3, #0
   2951c:	db08      	blt.n	29530 <hal_timer_config+0xa4>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2951e:	f002 021f 	and.w	r2, r2, #31
   29522:	095b      	lsrs	r3, r3, #5
   29524:	2101      	movs	r1, #1
   29526:	fa01 f202 	lsl.w	r2, r1, r2
   2952a:	4933      	ldr	r1, [pc, #204]	; (295f8 <hal_timer_config+0x16c>)
   2952c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        __HAL_ENABLE_INTERRUPTS(ctx);
   29530:	2800      	cmp	r0, #0
   29532:	d14f      	bne.n	295d4 <hal_timer_config+0x148>
  __ASM volatile ("cpsie i" : : : "memory");
   29534:	b662      	cpsie	i
   29536:	e050      	b.n	295da <hal_timer_config+0x14e>
                min_delta = div - (1 << (prescaler - 1));
   29538:	1e58      	subs	r0, r3, #1
   2953a:	2501      	movs	r5, #1
   2953c:	fa05 f000 	lsl.w	r0, r5, r0
   29540:	1a08      	subs	r0, r1, r0
                max_delta = (1 << prescaler) - div;
   29542:	1a51      	subs	r1, r2, r1
                if (min_delta < max_delta) {
   29544:	4288      	cmp	r0, r1
   29546:	d201      	bcs.n	2954c <hal_timer_config+0xc0>
                    prescaler -= 1;
   29548:	3b01      	subs	r3, #1
   2954a:	b2db      	uxtb	r3, r3
            }
        }
    }

    /* Now set the actual frequency */
    bsptimer->tmr_freq = NRF52_MAX_TIMER_FREQ / (1 << prescaler);
   2954c:	4a29      	ldr	r2, [pc, #164]	; (295f4 <hal_timer_config+0x168>)
   2954e:	411a      	asrs	r2, r3
   29550:	60e2      	str	r2, [r4, #12]
    bsptimer->tmr_enabled = 1;
   29552:	2201      	movs	r2, #1
   29554:	7022      	strb	r2, [r4, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   29556:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   2955a:	b672      	cpsid	i

    /* disable interrupts */
    __HAL_DISABLE_INTERRUPTS(ctx);

    /* Make sure HFXO is started */
    if ((NRF_CLOCK->HFCLKSTAT &
   2955c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   29560:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
   29564:	f002 1201 	and.w	r2, r2, #65537	; 0x10001
   29568:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
   2956c:	d00c      	beq.n	29588 <hal_timer_config+0xfc>
         (CLOCK_HFCLKSTAT_SRC_Msk | CLOCK_HFCLKSTAT_STATE_Msk)) !=
        (CLOCK_HFCLKSTAT_SRC_Msk | CLOCK_HFCLKSTAT_STATE_Msk)) {
        NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
   2956e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   29572:	2100      	movs	r1, #0
   29574:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
        NRF_CLOCK->TASKS_HFCLKSTART = 1;
   29578:	2101      	movs	r1, #1
   2957a:	6011      	str	r1, [r2, #0]
        while (1) {
            if ((NRF_CLOCK->EVENTS_HFCLKSTARTED) != 0) {
   2957c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   29580:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
   29584:	2a00      	cmp	r2, #0
   29586:	d0f9      	beq.n	2957c <hal_timer_config+0xf0>
                break;
            }
        }
    }
    hwtimer = bsptimer->tmr_reg;
   29588:	6922      	ldr	r2, [r4, #16]

    /* Stop the timer first */
    hwtimer->TASKS_STOP = 1;
   2958a:	2101      	movs	r1, #1
   2958c:	6051      	str	r1, [r2, #4]
    hwtimer->TASKS_CLEAR = 1;
   2958e:	60d1      	str	r1, [r2, #12]

    /* Put the timer in timer mode using 32 bits. */
    hwtimer->MODE = TIMER_MODE_MODE_Timer;
   29590:	2500      	movs	r5, #0
   29592:	f8c2 5504 	str.w	r5, [r2, #1284]	; 0x504
    hwtimer->BITMODE = TIMER_BITMODE_BITMODE_32Bit;
   29596:	2503      	movs	r5, #3
   29598:	f8c2 5508 	str.w	r5, [r2, #1288]	; 0x508

    /* Set the pre-scalar */
    hwtimer->PRESCALER = prescaler;
   2959c:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510

    /* Start the timer */
    hwtimer->TASKS_START = 1;
   295a0:	6011      	str	r1, [r2, #0]

    NVIC_EnableIRQ(bsptimer->tmr_irq_num);
   295a2:	7862      	ldrb	r2, [r4, #1]
   295a4:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   295a6:	2b00      	cmp	r3, #0
   295a8:	db07      	blt.n	295ba <hal_timer_config+0x12e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   295aa:	f002 021f 	and.w	r2, r2, #31
   295ae:	095b      	lsrs	r3, r3, #5
   295b0:	fa01 f202 	lsl.w	r2, r1, r2
   295b4:	4910      	ldr	r1, [pc, #64]	; (295f8 <hal_timer_config+0x16c>)
   295b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    __HAL_ENABLE_INTERRUPTS(ctx);
   295ba:	b9b0      	cbnz	r0, 295ea <hal_timer_config+0x15e>
  __ASM volatile ("cpsie i" : : : "memory");
   295bc:	b662      	cpsie	i
   295be:	e00c      	b.n	295da <hal_timer_config+0x14e>

    return 0;

err:
    return rc;
   295c0:	2016      	movs	r0, #22
}
   295c2:	4770      	bx	lr
    return rc;
   295c4:	2016      	movs	r0, #22
   295c6:	e008      	b.n	295da <hal_timer_config+0x14e>
   295c8:	2016      	movs	r0, #22
   295ca:	e006      	b.n	295da <hal_timer_config+0x14e>
   295cc:	2016      	movs	r0, #22
   295ce:	e004      	b.n	295da <hal_timer_config+0x14e>
   295d0:	2016      	movs	r0, #22
   295d2:	e002      	b.n	295da <hal_timer_config+0x14e>
        return 0;
   295d4:	2000      	movs	r0, #0
   295d6:	e000      	b.n	295da <hal_timer_config+0x14e>
    return rc;
   295d8:	2016      	movs	r0, #22
}
   295da:	bc30      	pop	{r4, r5}
   295dc:	4770      	bx	lr
    return rc;
   295de:	2016      	movs	r0, #22
   295e0:	e7fb      	b.n	295da <hal_timer_config+0x14e>
   295e2:	2016      	movs	r0, #22
   295e4:	e7f9      	b.n	295da <hal_timer_config+0x14e>
   295e6:	2016      	movs	r0, #22
   295e8:	e7f7      	b.n	295da <hal_timer_config+0x14e>
    return 0;
   295ea:	2000      	movs	r0, #0
   295ec:	e7f5      	b.n	295da <hal_timer_config+0x14e>
   295ee:	bf00      	nop
   295f0:	0002bdcc 	.word	0x0002bdcc
   295f4:	00f42400 	.word	0x00f42400
   295f8:	e000e100 	.word	0xe000e100

000295fc <hal_timer_read>:
 *
 * @return uint32_t The timer counter register.
 */
uint32_t
hal_timer_read(int timer_num)
{
   295fc:	b508      	push	{r3, lr}
    int rc;
    uint32_t tcntr;
    struct nrf52_hal_timer *bsptimer;

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   295fe:	2805      	cmp	r0, #5
   29600:	dc0c      	bgt.n	2961c <hal_timer_read+0x20>
   29602:	4b0b      	ldr	r3, [pc, #44]	; (29630 <hal_timer_read+0x34>)
   29604:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   29608:	b140      	cbz	r0, 2961c <hal_timer_read+0x20>
    if (bsptimer->tmr_rtc) {
   2960a:	7883      	ldrb	r3, [r0, #2]
   2960c:	b91b      	cbnz	r3, 29616 <hal_timer_read+0x1a>
        tcntr = hal_timer_read_bsptimer(bsptimer);
    } else {
        tcntr = nrf_read_timer_cntr(bsptimer->tmr_reg);
   2960e:	6900      	ldr	r0, [r0, #16]
   29610:	f7ff fdf0 	bl	291f4 <nrf_read_timer_cntr>
    /* Assert here since there is no invalid return code */
err:
    assert(0);
    rc = 0;
    return rc;
}
   29614:	bd08      	pop	{r3, pc}
        tcntr = hal_timer_read_bsptimer(bsptimer);
   29616:	f7ff fe7b 	bl	29310 <hal_timer_read_bsptimer>
   2961a:	e7fb      	b.n	29614 <hal_timer_read+0x18>
    assert(0);
   2961c:	f7e2 fde4 	bl	c1e8 <hal_debugger_connected>
   29620:	b100      	cbz	r0, 29624 <hal_timer_read+0x28>
   29622:	be01      	bkpt	0x0001
   29624:	2300      	movs	r3, #0
   29626:	461a      	mov	r2, r3
   29628:	4619      	mov	r1, r3
   2962a:	4618      	mov	r0, r3
   2962c:	f7e3 f816 	bl	c65c <__assert_func>
   29630:	0002bdcc 	.word	0x0002bdcc

00029634 <hal_timer_set_cb>:
                 void *arg)
{
    int rc;
    struct nrf52_hal_timer *bsptimer;

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   29634:	2805      	cmp	r0, #5
   29636:	dc0b      	bgt.n	29650 <hal_timer_set_cb+0x1c>
{
   29638:	b410      	push	{r4}
    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   2963a:	4c07      	ldr	r4, [pc, #28]	; (29658 <hal_timer_set_cb+0x24>)
   2963c:	f854 4020 	ldr.w	r4, [r4, r0, lsl #2]
   29640:	b144      	cbz	r4, 29654 <hal_timer_set_cb+0x20>

    timer->cb_func = cb_func;
   29642:	604a      	str	r2, [r1, #4]
    timer->cb_arg = arg;
   29644:	608b      	str	r3, [r1, #8]
    timer->link.tqe_prev = NULL;
   29646:	2000      	movs	r0, #0
   29648:	6148      	str	r0, [r1, #20]
    timer->bsp_timer = bsptimer;
   2964a:	600c      	str	r4, [r1, #0]

    rc = 0;

err:
    return rc;
}
   2964c:	bc10      	pop	{r4}
   2964e:	4770      	bx	lr
    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   29650:	2016      	movs	r0, #22
}
   29652:	4770      	bx	lr
    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   29654:	2016      	movs	r0, #22
    return rc;
   29656:	e7f9      	b.n	2964c <hal_timer_set_cb+0x18>
   29658:	0002bdcc 	.word	0x0002bdcc

0002965c <hal_timer_start_at>:
{
    uint32_t ctx;
    struct hal_timer *entry;
    struct nrf52_hal_timer *bsptimer;

    if ((timer == NULL) || (timer->link.tqe_prev != NULL) ||
   2965c:	2800      	cmp	r0, #0
   2965e:	d03d      	beq.n	296dc <hal_timer_start_at+0x80>
{
   29660:	b538      	push	{r3, r4, r5, lr}
   29662:	4604      	mov	r4, r0
    if ((timer == NULL) || (timer->link.tqe_prev != NULL) ||
   29664:	6943      	ldr	r3, [r0, #20]
   29666:	b10b      	cbz	r3, 2966c <hal_timer_start_at+0x10>
        (timer->cb_func == NULL)) {
        return EINVAL;
   29668:	2016      	movs	r0, #22
    }

    __HAL_ENABLE_INTERRUPTS(ctx);

    return 0;
}
   2966a:	bd38      	pop	{r3, r4, r5, pc}
        (timer->cb_func == NULL)) {
   2966c:	6843      	ldr	r3, [r0, #4]
    if ((timer == NULL) || (timer->link.tqe_prev != NULL) ||
   2966e:	2b00      	cmp	r3, #0
   29670:	d036      	beq.n	296e0 <hal_timer_start_at+0x84>
    bsptimer = (struct nrf52_hal_timer *)timer->bsp_timer;
   29672:	6800      	ldr	r0, [r0, #0]
    timer->expiry = tick;
   29674:	60e1      	str	r1, [r4, #12]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   29676:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   2967a:	b672      	cpsid	i
    if (TAILQ_EMPTY(&bsptimer->hal_timer_q)) {
   2967c:	6943      	ldr	r3, [r0, #20]
   2967e:	b13b      	cbz	r3, 29690 <hal_timer_start_at+0x34>
        TAILQ_FOREACH(entry, &bsptimer->hal_timer_q, link) {
   29680:	b1bb      	cbz	r3, 296b2 <hal_timer_start_at+0x56>
            if ((int32_t)(timer->expiry - entry->expiry) < 0) {
   29682:	68e2      	ldr	r2, [r4, #12]
   29684:	68d9      	ldr	r1, [r3, #12]
   29686:	1a52      	subs	r2, r2, r1
   29688:	2a00      	cmp	r2, #0
   2968a:	db0a      	blt.n	296a2 <hal_timer_start_at+0x46>
        TAILQ_FOREACH(entry, &bsptimer->hal_timer_q, link) {
   2968c:	691b      	ldr	r3, [r3, #16]
   2968e:	e7f7      	b.n	29680 <hal_timer_start_at+0x24>
        TAILQ_INSERT_HEAD(&bsptimer->hal_timer_q, timer, link);
   29690:	4622      	mov	r2, r4
   29692:	f842 3f10 	str.w	r3, [r2, #16]!
   29696:	6182      	str	r2, [r0, #24]
   29698:	4603      	mov	r3, r0
   2969a:	f843 4f14 	str.w	r4, [r3, #20]!
   2969e:	6163      	str	r3, [r4, #20]
   296a0:	e008      	b.n	296b4 <hal_timer_start_at+0x58>
                TAILQ_INSERT_BEFORE(entry, timer, link);
   296a2:	695a      	ldr	r2, [r3, #20]
   296a4:	6162      	str	r2, [r4, #20]
   296a6:	6123      	str	r3, [r4, #16]
   296a8:	695a      	ldr	r2, [r3, #20]
   296aa:	6014      	str	r4, [r2, #0]
   296ac:	f104 0210 	add.w	r2, r4, #16
   296b0:	615a      	str	r2, [r3, #20]
        if (!entry) {
   296b2:	b133      	cbz	r3, 296c2 <hal_timer_start_at+0x66>
    if (timer == TAILQ_FIRST(&bsptimer->hal_timer_q)) {
   296b4:	6943      	ldr	r3, [r0, #20]
   296b6:	42a3      	cmp	r3, r4
   296b8:	d00c      	beq.n	296d4 <hal_timer_start_at+0x78>
    __HAL_ENABLE_INTERRUPTS(ctx);
   296ba:	b99d      	cbnz	r5, 296e4 <hal_timer_start_at+0x88>
  __ASM volatile ("cpsie i" : : : "memory");
   296bc:	b662      	cpsie	i
    return 0;
   296be:	2000      	movs	r0, #0
   296c0:	e7d3      	b.n	2966a <hal_timer_start_at+0xe>
            TAILQ_INSERT_TAIL(&bsptimer->hal_timer_q, timer, link);
   296c2:	6123      	str	r3, [r4, #16]
   296c4:	6983      	ldr	r3, [r0, #24]
   296c6:	6163      	str	r3, [r4, #20]
   296c8:	6983      	ldr	r3, [r0, #24]
   296ca:	601c      	str	r4, [r3, #0]
   296cc:	f104 0310 	add.w	r3, r4, #16
   296d0:	6183      	str	r3, [r0, #24]
   296d2:	e7ef      	b.n	296b4 <hal_timer_start_at+0x58>
        nrf_timer_set_ocmp(bsptimer, timer->expiry);
   296d4:	68e1      	ldr	r1, [r4, #12]
   296d6:	f7ff fd93 	bl	29200 <nrf_timer_set_ocmp>
   296da:	e7ee      	b.n	296ba <hal_timer_start_at+0x5e>
        return EINVAL;
   296dc:	2016      	movs	r0, #22
}
   296de:	4770      	bx	lr
        return EINVAL;
   296e0:	2016      	movs	r0, #22
   296e2:	e7c2      	b.n	2966a <hal_timer_start_at+0xe>
    return 0;
   296e4:	2000      	movs	r0, #0
   296e6:	e7c0      	b.n	2966a <hal_timer_start_at+0xe>

000296e8 <hal_timer_stop>:
    uint32_t ctx;
    int reset_ocmp;
    struct hal_timer *entry;
    struct nrf52_hal_timer *bsptimer;

    if (timer == NULL) {
   296e8:	b360      	cbz	r0, 29744 <hal_timer_stop+0x5c>
{
   296ea:	b570      	push	{r4, r5, r6, lr}
   296ec:	4603      	mov	r3, r0
        return EINVAL;
    }

   bsptimer = (struct nrf52_hal_timer *)timer->bsp_timer;
   296ee:	6801      	ldr	r1, [r0, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   296f0:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   296f4:	b672      	cpsid	i

    __HAL_DISABLE_INTERRUPTS(ctx);

    if (timer->link.tqe_prev != NULL) {
   296f6:	6942      	ldr	r2, [r0, #20]
   296f8:	b18a      	cbz	r2, 2971e <hal_timer_stop+0x36>
        reset_ocmp = 0;
        if (timer == TAILQ_FIRST(&bsptimer->hal_timer_q)) {
   296fa:	6948      	ldr	r0, [r1, #20]
   296fc:	4298      	cmp	r0, r3
   296fe:	d012      	beq.n	29726 <hal_timer_stop+0x3e>
        reset_ocmp = 0;
   29700:	2500      	movs	r5, #0
            /* If first on queue, we will need to reset OCMP */
            entry = TAILQ_NEXT(timer, link);
            reset_ocmp = 1;
        }
        TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
   29702:	6918      	ldr	r0, [r3, #16]
   29704:	b190      	cbz	r0, 2972c <hal_timer_stop+0x44>
   29706:	6142      	str	r2, [r0, #20]
   29708:	695a      	ldr	r2, [r3, #20]
   2970a:	6918      	ldr	r0, [r3, #16]
   2970c:	6010      	str	r0, [r2, #0]
        timer->link.tqe_prev = NULL;
   2970e:	2200      	movs	r2, #0
   29710:	615a      	str	r2, [r3, #20]
        if (reset_ocmp) {
   29712:	b125      	cbz	r5, 2971e <hal_timer_stop+0x36>
            if (entry) {
   29714:	b166      	cbz	r6, 29730 <hal_timer_stop+0x48>
                nrf_timer_set_ocmp((struct nrf52_hal_timer *)entry->bsp_timer,
   29716:	68f1      	ldr	r1, [r6, #12]
   29718:	6830      	ldr	r0, [r6, #0]
   2971a:	f7ff fd71 	bl	29200 <nrf_timer_set_ocmp>
                }
            }
        }
    }

    __HAL_ENABLE_INTERRUPTS(ctx);
   2971e:	b99c      	cbnz	r4, 29748 <hal_timer_stop+0x60>
  __ASM volatile ("cpsie i" : : : "memory");
   29720:	b662      	cpsie	i

    return 0;
   29722:	2000      	movs	r0, #0
}
   29724:	bd70      	pop	{r4, r5, r6, pc}
            entry = TAILQ_NEXT(timer, link);
   29726:	691e      	ldr	r6, [r3, #16]
            reset_ocmp = 1;
   29728:	2501      	movs	r5, #1
   2972a:	e7ea      	b.n	29702 <hal_timer_stop+0x1a>
        TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
   2972c:	618a      	str	r2, [r1, #24]
   2972e:	e7eb      	b.n	29708 <hal_timer_stop+0x20>
                if (bsptimer->tmr_rtc) {
   29730:	788b      	ldrb	r3, [r1, #2]
   29732:	b11b      	cbz	r3, 2973c <hal_timer_stop+0x54>
                    nrf_rtc_disable_ocmp((NRF_RTC_Type *)bsptimer->tmr_reg);
   29734:	6908      	ldr	r0, [r1, #16]
   29736:	f7ff fde2 	bl	292fe <nrf_rtc_disable_ocmp>
   2973a:	e7f0      	b.n	2971e <hal_timer_stop+0x36>
                    nrf_timer_disable_ocmp(bsptimer->tmr_reg);
   2973c:	6908      	ldr	r0, [r1, #16]
   2973e:	f7ff fdd9 	bl	292f4 <nrf_timer_disable_ocmp>
   29742:	e7ec      	b.n	2971e <hal_timer_stop+0x36>
        return EINVAL;
   29744:	2016      	movs	r0, #22
}
   29746:	4770      	bx	lr
    return 0;
   29748:	2000      	movs	r0, #0
   2974a:	e7eb      	b.n	29724 <hal_timer_stop+0x3c>

0002974c <put_le16>:
put_le16(void *buf, uint16_t x)
{
    uint8_t *u8ptr;

    u8ptr = buf;
    u8ptr[0] = (uint8_t)x;
   2974c:	7001      	strb	r1, [r0, #0]
    u8ptr[1] = (uint8_t)(x >> 8);
   2974e:	0a09      	lsrs	r1, r1, #8
   29750:	7041      	strb	r1, [r0, #1]
}
   29752:	4770      	bx	lr

00029754 <put_le32>:
put_le32(void *buf, uint32_t x)
{
    uint8_t *u8ptr;

    u8ptr = buf;
    u8ptr[0] = (uint8_t)x;
   29754:	7001      	strb	r1, [r0, #0]
    u8ptr[1] = (uint8_t)(x >> 8);
   29756:	f3c1 2307 	ubfx	r3, r1, #8, #8
   2975a:	7043      	strb	r3, [r0, #1]
    u8ptr[2] = (uint8_t)(x >> 16);
   2975c:	f3c1 4307 	ubfx	r3, r1, #16, #8
   29760:	7083      	strb	r3, [r0, #2]
    u8ptr[3] = (uint8_t)(x >> 24);
   29762:	0e09      	lsrs	r1, r1, #24
   29764:	70c1      	strb	r1, [r0, #3]
}
   29766:	4770      	bx	lr

00029768 <put_le64>:
put_le64(void *buf, uint64_t x)
{
    uint8_t *u8ptr;

    u8ptr = buf;
    u8ptr[0] = (uint8_t)x;
   29768:	7002      	strb	r2, [r0, #0]
    u8ptr[1] = (uint8_t)(x >> 8);
   2976a:	f3c2 2107 	ubfx	r1, r2, #8, #8
   2976e:	7041      	strb	r1, [r0, #1]
    u8ptr[2] = (uint8_t)(x >> 16);
   29770:	f3c2 4107 	ubfx	r1, r2, #16, #8
   29774:	7081      	strb	r1, [r0, #2]
    u8ptr[3] = (uint8_t)(x >> 24);
   29776:	0e12      	lsrs	r2, r2, #24
   29778:	70c2      	strb	r2, [r0, #3]
    u8ptr[4] = (uint8_t)(x >> 32);
   2977a:	7103      	strb	r3, [r0, #4]
    u8ptr[5] = (uint8_t)(x >> 40);
   2977c:	f3c3 2207 	ubfx	r2, r3, #8, #8
   29780:	7142      	strb	r2, [r0, #5]
    u8ptr[6] = (uint8_t)(x >> 48);
   29782:	f3c3 4207 	ubfx	r2, r3, #16, #8
   29786:	7182      	strb	r2, [r0, #6]
    u8ptr[7] = (uint8_t)(x >> 56);
   29788:	0e1b      	lsrs	r3, r3, #24
   2978a:	71c3      	strb	r3, [r0, #7]
}
   2978c:	4770      	bx	lr

0002978e <get_le16>:
{
    const uint8_t *u8ptr;
    uint16_t x;

    u8ptr = buf;
    x = u8ptr[0];
   2978e:	7803      	ldrb	r3, [r0, #0]
    x |= (uint16_t)u8ptr[1] << 8;
   29790:	7840      	ldrb	r0, [r0, #1]

    return x;
}
   29792:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   29796:	4770      	bx	lr

00029798 <get_le32>:
{
    const uint8_t *u8ptr;
    uint32_t x;

    u8ptr = buf;
    x = u8ptr[0];
   29798:	7803      	ldrb	r3, [r0, #0]
    x |= (uint32_t)u8ptr[1] << 8;
   2979a:	7842      	ldrb	r2, [r0, #1]
   2979c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    x |= (uint32_t)u8ptr[2] << 16;
   297a0:	7882      	ldrb	r2, [r0, #2]
   297a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    x |= (uint32_t)u8ptr[3] << 24;
   297a6:	78c0      	ldrb	r0, [r0, #3]

    return x;
}
   297a8:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
   297ac:	4770      	bx	lr

000297ae <get_le64>:

uint64_t
get_le64(const void *buf)
{
   297ae:	e92d 0bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp}
    const uint8_t *u8ptr;
    uint64_t x;

    u8ptr = buf;
    x = u8ptr[0];
   297b2:	7804      	ldrb	r4, [r0, #0]
   297b4:	2500      	movs	r5, #0
    x |= (uint64_t)u8ptr[1] << 8;
   297b6:	7846      	ldrb	r6, [r0, #1]
   297b8:	2300      	movs	r3, #0
   297ba:	0232      	lsls	r2, r6, #8
   297bc:	ea44 0802 	orr.w	r8, r4, r2
   297c0:	ea45 0903 	orr.w	r9, r5, r3
    x |= (uint64_t)u8ptr[2] << 16;
   297c4:	7886      	ldrb	r6, [r0, #2]
   297c6:	2300      	movs	r3, #0
   297c8:	0432      	lsls	r2, r6, #16
   297ca:	ea48 0402 	orr.w	r4, r8, r2
   297ce:	ea49 0503 	orr.w	r5, r9, r3
    x |= (uint64_t)u8ptr[3] << 24;
   297d2:	78c6      	ldrb	r6, [r0, #3]
   297d4:	ea4f 2916 	mov.w	r9, r6, lsr #8
   297d8:	ea4f 6806 	mov.w	r8, r6, lsl #24
   297dc:	ea48 0204 	orr.w	r2, r8, r4
   297e0:	ea49 0305 	orr.w	r3, r9, r5
    x |= (uint64_t)u8ptr[4] << 32;
   297e4:	2400      	movs	r4, #0
   297e6:	7905      	ldrb	r5, [r0, #4]
   297e8:	ea42 0b04 	orr.w	fp, r2, r4
   297ec:	ea43 0c05 	orr.w	ip, r3, r5
    x |= (uint64_t)u8ptr[5] << 40;
   297f0:	f890 8005 	ldrb.w	r8, [r0, #5]
   297f4:	ea4f 2708 	mov.w	r7, r8, lsl #8
   297f8:	ea4b 0204 	orr.w	r2, fp, r4
   297fc:	ea4c 0307 	orr.w	r3, ip, r7
    x |= (uint64_t)u8ptr[6] << 48;
   29800:	f890 8006 	ldrb.w	r8, [r0, #6]
   29804:	ea4f 4c08 	mov.w	ip, r8, lsl #16
   29808:	ea44 0602 	orr.w	r6, r4, r2
   2980c:	ea4c 0703 	orr.w	r7, ip, r3
    x |= (uint64_t)u8ptr[7] << 56;
   29810:	79c2      	ldrb	r2, [r0, #7]
   29812:	ea4f 6902 	mov.w	r9, r2, lsl #24

    return x;
}
   29816:	ea44 0006 	orr.w	r0, r4, r6
   2981a:	ea49 0107 	orr.w	r1, r9, r7
   2981e:	e8bd 0bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp}
   29822:	4770      	bx	lr

00029824 <get_be32>:
{
    const uint8_t *u8ptr;
    uint32_t x;

    u8ptr = buf;
    x = (uint32_t)u8ptr[0] << 24;
   29824:	7802      	ldrb	r2, [r0, #0]
    x |= (uint32_t)u8ptr[1] << 16;
   29826:	7843      	ldrb	r3, [r0, #1]
   29828:	041b      	lsls	r3, r3, #16
   2982a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    x |= (uint32_t)u8ptr[2] << 8;
   2982e:	7882      	ldrb	r2, [r0, #2]
   29830:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    x |= u8ptr[3];
   29834:	78c0      	ldrb	r0, [r0, #3]

    return x;
}
   29836:	4318      	orrs	r0, r3
   29838:	4770      	bx	lr

0002983a <swap_in_place>:
    int i;
    int j;

    u8ptr = buf;

    for (i = 0, j = len - 1; i < j; i++, j--) {
   2983a:	3901      	subs	r1, #1
   2983c:	2300      	movs	r3, #0
   2983e:	428b      	cmp	r3, r1
   29840:	da0a      	bge.n	29858 <swap_in_place+0x1e>
{
   29842:	b410      	push	{r4}
        tmp = u8ptr[i];
   29844:	5cc2      	ldrb	r2, [r0, r3]

        u8ptr[i] = u8ptr[j];
   29846:	5c44      	ldrb	r4, [r0, r1]
   29848:	54c4      	strb	r4, [r0, r3]
        u8ptr[j] = tmp;
   2984a:	5442      	strb	r2, [r0, r1]
    for (i = 0, j = len - 1; i < j; i++, j--) {
   2984c:	3301      	adds	r3, #1
   2984e:	3901      	subs	r1, #1
   29850:	428b      	cmp	r3, r1
   29852:	dbf7      	blt.n	29844 <swap_in_place+0xa>
    }
}
   29854:	bc10      	pop	{r4}
   29856:	4770      	bx	lr
   29858:	4770      	bx	lr

0002985a <swap_buf>:
void
swap_buf(uint8_t *dst, const uint8_t *src, int len)
{
    int i;

    for (i = 0; i < len; i++) {
   2985a:	2300      	movs	r3, #0
   2985c:	4293      	cmp	r3, r2
   2985e:	da09      	bge.n	29874 <swap_buf+0x1a>
{
   29860:	b430      	push	{r4, r5}
        dst[len - 1 - i] = src[i];
   29862:	1e54      	subs	r4, r2, #1
   29864:	1ae4      	subs	r4, r4, r3
   29866:	5ccd      	ldrb	r5, [r1, r3]
   29868:	5505      	strb	r5, [r0, r4]
    for (i = 0; i < len; i++) {
   2986a:	3301      	adds	r3, #1
   2986c:	4293      	cmp	r3, r2
   2986e:	dbf8      	blt.n	29862 <swap_buf+0x8>
    }
}
   29870:	bc30      	pop	{r4, r5}
   29872:	4770      	bx	lr
   29874:	4770      	bx	lr

00029876 <os_cputime_init>:
struct os_cputime_data g_os_cputime;
#endif

int
os_cputime_init(uint32_t clock_freq)
{
   29876:	b508      	push	{r3, lr}

    /* Set the ticks per microsecond. */
#if defined(OS_CPUTIME_FREQ_HIGH)
    g_os_cputime.ticks_per_usec = clock_freq / 1000000U;
#endif
    rc = hal_timer_config(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM), clock_freq);
   29878:	4601      	mov	r1, r0
   2987a:	2005      	movs	r0, #5
   2987c:	f7ff fe06 	bl	2948c <hal_timer_config>
    return rc;
}
   29880:	bd08      	pop	{r3, pc}

00029882 <os_cputime_timer_init>:
    os_cputime_delay_ticks(ticks);
}

void
os_cputime_timer_init(struct hal_timer *timer, hal_timer_cb fp, void *arg)
{
   29882:	b510      	push	{r4, lr}
    assert(timer != NULL);
   29884:	b138      	cbz	r0, 29896 <os_cputime_timer_init+0x14>
    assert(fp != NULL);
   29886:	b181      	cbz	r1, 298aa <os_cputime_timer_init+0x28>

    hal_timer_set_cb(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM), timer, fp, arg);
   29888:	4613      	mov	r3, r2
   2988a:	460a      	mov	r2, r1
   2988c:	4601      	mov	r1, r0
   2988e:	2005      	movs	r0, #5
   29890:	f7ff fed0 	bl	29634 <hal_timer_set_cb>
}
   29894:	bd10      	pop	{r4, pc}
    assert(timer != NULL);
   29896:	f7e2 fca7 	bl	c1e8 <hal_debugger_connected>
   2989a:	b100      	cbz	r0, 2989e <os_cputime_timer_init+0x1c>
   2989c:	be01      	bkpt	0x0001
   2989e:	2300      	movs	r3, #0
   298a0:	461a      	mov	r2, r3
   298a2:	4619      	mov	r1, r3
   298a4:	4618      	mov	r0, r3
   298a6:	f7e2 fed9 	bl	c65c <__assert_func>
    assert(fp != NULL);
   298aa:	f7e2 fc9d 	bl	c1e8 <hal_debugger_connected>
   298ae:	b100      	cbz	r0, 298b2 <os_cputime_timer_init+0x30>
   298b0:	be01      	bkpt	0x0001
   298b2:	2300      	movs	r3, #0
   298b4:	461a      	mov	r2, r3
   298b6:	4619      	mov	r1, r3
   298b8:	4618      	mov	r0, r3
   298ba:	f7e2 fecf 	bl	c65c <__assert_func>

000298be <os_cputime_timer_start>:

int
os_cputime_timer_start(struct hal_timer *timer, uint32_t cputime)
{
   298be:	b508      	push	{r3, lr}
    int rc;

    rc = hal_timer_start_at(timer, cputime);
   298c0:	f7ff fecc 	bl	2965c <hal_timer_start_at>
    return rc;
}
   298c4:	bd08      	pop	{r3, pc}

000298c6 <os_cputime_timer_stop>:
    return rc;
}

void
os_cputime_timer_stop(struct hal_timer *timer)
{
   298c6:	b508      	push	{r3, lr}
    hal_timer_stop(timer);
   298c8:	f7ff ff0e 	bl	296e8 <hal_timer_stop>
}
   298cc:	bd08      	pop	{r3, pc}

000298ce <os_cputime_get32>:

uint32_t
os_cputime_get32(void)
{
   298ce:	b508      	push	{r3, lr}
    uint32_t cpu_time;

    cpu_time = hal_timer_read(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM));
   298d0:	2005      	movs	r0, #5
   298d2:	f7ff fe93 	bl	295fc <hal_timer_read>
    return cpu_time;
}
   298d6:	bd08      	pop	{r3, pc}

000298d8 <os_cputime_usecs_to_ticks>:
    /*
     * Faster calculation but could be off 1 full tick since we do not
     * add residual back. Adding back the residual is commented out below, but
     * shown.
     */
    ticks = (1ULL << 32) * MYNEWT_VAL(OS_CPUTIME_FREQ) / 1000000 * usecs;
   298d8:	4b02      	ldr	r3, [pc, #8]	; (298e4 <os_cputime_usecs_to_ticks+0xc>)
   298da:	fba0 0103 	umull	r0, r1, r0, r3

    /* Residual for 32768 Hz. */
    //ticks += ((uint64_t)usecs * (1526122139+1)) >> 32;

    return ticks >> 32;
}
   298de:	4608      	mov	r0, r1
   298e0:	4770      	bx	lr
   298e2:	bf00      	nop
   298e4:	08637bd0 	.word	0x08637bd0

000298e8 <os_cputime_ticks_to_usecs>:
    uint32_t usecs;
    uint32_t shift;

    shift = __builtin_popcount(MYNEWT_VAL(OS_CPUTIME_FREQ) - 1) - 6;

    usecs = ((ticks >> shift) * 15625) +
   298e8:	0a41      	lsrs	r1, r0, #9
   298ea:	f643 5209 	movw	r2, #15625	; 0x3d09
            (((ticks & ~(~0U << shift)) * 15625) >> shift);
   298ee:	f3c0 0308 	ubfx	r3, r0, #0, #9
   298f2:	fb02 f303 	mul.w	r3, r2, r3
   298f6:	0a5b      	lsrs	r3, r3, #9
    return usecs;
}
   298f8:	fb02 3001 	mla	r0, r2, r1, r3
   298fc:	4770      	bx	lr

000298fe <os_sem_init>:
{
    os_error_t ret;

    os_trace_api_u32x2(OS_TRACE_ID_SEM_INIT, (uint32_t)sem, (uint32_t)tokens);

    if (!sem) {
   298fe:	4603      	mov	r3, r0
   29900:	b118      	cbz	r0, 2990a <os_sem_init+0xc>
        ret = OS_INVALID_PARM;
        goto done;
    }

    sem->sem_tokens = tokens;
   29902:	80c1      	strh	r1, [r0, #6]
    SLIST_FIRST(&sem->sem_head) = NULL;
   29904:	2000      	movs	r0, #0
   29906:	6018      	str	r0, [r3, #0]
   29908:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   2990a:	2003      	movs	r0, #3
    ret = OS_OK;

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_INIT, (uint32_t)ret);
    return ret;
}
   2990c:	4770      	bx	lr
	...

00029910 <os_sem_release>:

os_error_t
os_sem_release(struct os_sem *sem)
{
   29910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32(OS_TRACE_ID_SEM_RELEASE, (uint32_t)sem);

    /* OS must be started to release semaphores */
    if (!g_os_started) {
   29912:	4b17      	ldr	r3, [pc, #92]	; (29970 <os_sem_release+0x60>)
   29914:	681b      	ldr	r3, [r3, #0]
   29916:	b33b      	cbz	r3, 29968 <os_sem_release+0x58>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid semaphore */
    if (!sem) {
   29918:	b340      	cbz	r0, 2996c <os_sem_release+0x5c>
   2991a:	4604      	mov	r4, r0
        goto done;
    }

    /* Get current task */
    resched = 0;
    current = os_sched_get_current_task();
   2991c:	f7e3 fcc6 	bl	d2ac <os_sched_get_current_task>
   29920:	4607      	mov	r7, r0

    OS_ENTER_CRITICAL(sr);
   29922:	f7e3 ff69 	bl	d7f8 <os_arch_save_sr>
   29926:	4606      	mov	r6, r0

    /* Check if tasks are waiting for the semaphore */
    rdy = SLIST_FIRST(&sem->sem_head);
   29928:	6825      	ldr	r5, [r4, #0]
    if (rdy) {
   2992a:	b165      	cbz	r5, 29946 <os_sem_release+0x36>
        /* Clear flag that we are waiting on the semaphore; wake up task */
        rdy->t_flags &= ~OS_TASK_FLAG_SEM_WAIT;
   2992c:	7b6b      	ldrb	r3, [r5, #13]
   2992e:	f023 0302 	bic.w	r3, r3, #2
   29932:	736b      	strb	r3, [r5, #13]
        os_sched_wakeup(rdy);
   29934:	4628      	mov	r0, r5
   29936:	f7e3 fd0d 	bl	d354 <os_sched_wakeup>

        /* Schedule if waiting task higher priority */
        if (current->t_prio > rdy->t_prio) {
   2993a:	7afa      	ldrb	r2, [r7, #11]
   2993c:	7aeb      	ldrb	r3, [r5, #11]
   2993e:	429a      	cmp	r2, r3
   29940:	d80b      	bhi.n	2995a <os_sem_release+0x4a>
    resched = 0;
   29942:	2400      	movs	r4, #0
   29944:	e003      	b.n	2994e <os_sem_release+0x3e>
            resched = 1;
        }
    } else {
        /* Add to the number of tokens */
        sem->sem_tokens++;
   29946:	88e3      	ldrh	r3, [r4, #6]
   29948:	3301      	adds	r3, #1
   2994a:	80e3      	strh	r3, [r4, #6]
    resched = 0;
   2994c:	2400      	movs	r4, #0
    }

    OS_EXIT_CRITICAL(sr);
   2994e:	4630      	mov	r0, r6
   29950:	f7e3 ff58 	bl	d804 <os_arch_restore_sr>

    /* Re-schedule if needed */
    if (resched) {
   29954:	b91c      	cbnz	r4, 2995e <os_sem_release+0x4e>
        os_sched(rdy);
    }

    ret = OS_OK;
   29956:	2000      	movs	r0, #0

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_RELEASE, (uint32_t)ret);
    return ret;
}
   29958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            resched = 1;
   2995a:	2401      	movs	r4, #1
   2995c:	e7f7      	b.n	2994e <os_sem_release+0x3e>
        os_sched(rdy);
   2995e:	4628      	mov	r0, r5
   29960:	f7e3 fd84 	bl	d46c <os_sched>
    ret = OS_OK;
   29964:	2000      	movs	r0, #0
   29966:	e7f7      	b.n	29958 <os_sem_release+0x48>
        ret = OS_NOT_STARTED;
   29968:	2009      	movs	r0, #9
   2996a:	e7f5      	b.n	29958 <os_sem_release+0x48>
        ret = OS_INVALID_PARM;
   2996c:	2003      	movs	r0, #3
   2996e:	e7f3      	b.n	29958 <os_sem_release+0x48>
   29970:	20003af8 	.word	0x20003af8

00029974 <os_sem_pend>:

os_error_t
os_sem_pend(struct os_sem *sem, os_time_t timeout)
{
   29974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32x2(OS_TRACE_ID_SEM_PEND, (uint32_t)sem, (uint32_t)timeout);

    /* Check if OS is started */
    if (!g_os_started) {
   29976:	4b2c      	ldr	r3, [pc, #176]	; (29a28 <os_sem_pend+0xb4>)
   29978:	681b      	ldr	r3, [r3, #0]
   2997a:	2b00      	cmp	r3, #0
   2997c:	d04f      	beq.n	29a1e <os_sem_pend+0xaa>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid semaphore */
    if (!sem) {
   2997e:	2800      	cmp	r0, #0
   29980:	d04f      	beq.n	29a22 <os_sem_pend+0xae>
   29982:	460d      	mov	r5, r1
   29984:	4604      	mov	r4, r0
        goto done;
    }

    /* Assume we dont have to put task to sleep; get current task */
    sched = 0;
    current = os_sched_get_current_task();
   29986:	f7e3 fc91 	bl	d2ac <os_sched_get_current_task>
   2998a:	4606      	mov	r6, r0

    OS_ENTER_CRITICAL(sr);
   2998c:	f7e3 ff34 	bl	d7f8 <os_arch_save_sr>
   29990:	4607      	mov	r7, r0

    /*
     * If there is a token available, take it. If no token, either return
     * with error if timeout was 0 or put this task to sleep.
     */
    if (sem->sem_tokens != 0) {
   29992:	88e3      	ldrh	r3, [r4, #6]
   29994:	b14b      	cbz	r3, 299aa <os_sem_pend+0x36>
        sem->sem_tokens--;
   29996:	3b01      	subs	r3, #1
   29998:	80e3      	strh	r3, [r4, #6]
        ret = OS_OK;
   2999a:	2400      	movs	r4, #0
    sched = 0;
   2999c:	4625      	mov	r5, r4
        /* We will put this task to sleep */
        sched = 1;
        os_sched_sleep(current, timeout);
    }

    OS_EXIT_CRITICAL(sr);
   2999e:	4638      	mov	r0, r7
   299a0:	f7e3 ff30 	bl	d804 <os_arch_restore_sr>

    if (sched) {
   299a4:	bb45      	cbnz	r5, 299f8 <os_sem_pend+0x84>
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_PEND, (uint32_t)ret);
    return ret;
}
   299a6:	4620      	mov	r0, r4
   299a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if (timeout == 0) {
   299aa:	b315      	cbz	r5, 299f2 <os_sem_pend+0x7e>
        current->t_obj = sem;
   299ac:	61f4      	str	r4, [r6, #28]
        current->t_flags |= OS_TASK_FLAG_SEM_WAIT;
   299ae:	7b73      	ldrb	r3, [r6, #13]
   299b0:	f043 0302 	orr.w	r3, r3, #2
   299b4:	7373      	strb	r3, [r6, #13]
        if (!SLIST_EMPTY(&sem->sem_head)) {
   299b6:	f8d4 c000 	ldr.w	ip, [r4]
   299ba:	f1bc 0f00 	cmp.w	ip, #0
   299be:	d00e      	beq.n	299de <os_sem_pend+0x6a>
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
   299c0:	4663      	mov	r3, ip
        last = NULL;
   299c2:	2000      	movs	r0, #0
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
   299c4:	b133      	cbz	r3, 299d4 <os_sem_pend+0x60>
                if (current->t_prio < entry->t_prio) {
   299c6:	7af1      	ldrb	r1, [r6, #11]
   299c8:	7ada      	ldrb	r2, [r3, #11]
   299ca:	4291      	cmp	r1, r2
   299cc:	d302      	bcc.n	299d4 <os_sem_pend+0x60>
                last = entry;
   299ce:	4618      	mov	r0, r3
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
   299d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   299d2:	e7f7      	b.n	299c4 <os_sem_pend+0x50>
        if (last) {
   299d4:	b118      	cbz	r0, 299de <os_sem_pend+0x6a>
            SLIST_INSERT_AFTER(last, current, t_obj_list);
   299d6:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   299d8:	64f3      	str	r3, [r6, #76]	; 0x4c
   299da:	64c6      	str	r6, [r0, #76]	; 0x4c
   299dc:	e002      	b.n	299e4 <os_sem_pend+0x70>
            SLIST_INSERT_HEAD(&sem->sem_head, current, t_obj_list);
   299de:	f8c6 c04c 	str.w	ip, [r6, #76]	; 0x4c
   299e2:	6026      	str	r6, [r4, #0]
        os_sched_sleep(current, timeout);
   299e4:	4629      	mov	r1, r5
   299e6:	4630      	mov	r0, r6
   299e8:	f7e3 fc6c 	bl	d2c4 <os_sched_sleep>
        ret = OS_OK;
   299ec:	2400      	movs	r4, #0
        sched = 1;
   299ee:	2501      	movs	r5, #1
   299f0:	e7d5      	b.n	2999e <os_sem_pend+0x2a>
        ret = OS_TIMEOUT;
   299f2:	2406      	movs	r4, #6
    sched = 0;
   299f4:	2500      	movs	r5, #0
   299f6:	e7d2      	b.n	2999e <os_sem_pend+0x2a>
        os_sched(NULL);
   299f8:	2000      	movs	r0, #0
   299fa:	f7e3 fd37 	bl	d46c <os_sched>
        if (current->t_flags & OS_TASK_FLAG_SEM_WAIT) {
   299fe:	7b73      	ldrb	r3, [r6, #13]
   29a00:	f013 0f02 	tst.w	r3, #2
   29a04:	d101      	bne.n	29a0a <os_sem_pend+0x96>
            ret = OS_OK;
   29a06:	2400      	movs	r4, #0
   29a08:	e7cd      	b.n	299a6 <os_sem_pend+0x32>
            OS_ENTER_CRITICAL(sr);
   29a0a:	f7e3 fef5 	bl	d7f8 <os_arch_save_sr>
            current->t_flags &= ~OS_TASK_FLAG_SEM_WAIT;
   29a0e:	7b73      	ldrb	r3, [r6, #13]
   29a10:	f023 0302 	bic.w	r3, r3, #2
   29a14:	7373      	strb	r3, [r6, #13]
            OS_EXIT_CRITICAL(sr);
   29a16:	f7e3 fef5 	bl	d804 <os_arch_restore_sr>
            ret = OS_TIMEOUT;
   29a1a:	2406      	movs	r4, #6
   29a1c:	e7c3      	b.n	299a6 <os_sem_pend+0x32>
        ret = OS_NOT_STARTED;
   29a1e:	2409      	movs	r4, #9
   29a20:	e7c1      	b.n	299a6 <os_sem_pend+0x32>
        ret = OS_INVALID_PARM;
   29a22:	2403      	movs	r4, #3
   29a24:	e7bf      	b.n	299a6 <os_sem_pend+0x32>
   29a26:	bf00      	nop
   29a28:	20003af8 	.word	0x20003af8

00029a2c <lrand48>:
#include <stdint.h>

extern unsigned short __rand48_seed[3];	/* Common with mrand48.c, srand48.c */

long lrand48(void)
{
   29a2c:	b508      	push	{r3, lr}
	return (uint32_t) jrand48(__rand48_seed) >> 1;
   29a2e:	4802      	ldr	r0, [pc, #8]	; (29a38 <lrand48+0xc>)
   29a30:	f000 fc08 	bl	2a244 <jrand48>
}
   29a34:	0840      	lsrs	r0, r0, #1
   29a36:	bd08      	pop	{r3, pc}
   29a38:	200047b8 	.word	0x200047b8

00029a3c <malloc_lock_nop>:
    },
    &__malloc_head,
    &__malloc_head
};

static bool malloc_lock_nop() {return true;}
   29a3c:	2001      	movs	r0, #1
   29a3e:	4770      	bx	lr

00029a40 <malloc_unlock_nop>:
static void malloc_unlock_nop() {}
   29a40:	4770      	bx	lr

00029a42 <__malloc_from_block>:
static void *__malloc_from_block(struct free_arena_header *fp, size_t size)
{
    size_t fsize;
    struct free_arena_header *nfp, *na, *fpn, *fpp;

    fsize = fp->a.size;
   29a42:	6842      	ldr	r2, [r0, #4]

    /* We need the 2* to account for the larger requirements of a
       free block */
    if (fsize >= size + 2 * sizeof(struct arena_header)) {
   29a44:	f101 0320 	add.w	r3, r1, #32
   29a48:	4293      	cmp	r3, r2
   29a4a:	d907      	bls.n	29a5c <__malloc_from_block+0x1a>
        nfp->next_free = fpn = fp->next_free;
        nfp->prev_free = fpp = fp->prev_free;
        fpn->prev_free = nfp;
        fpp->next_free = nfp;
    } else {
        fp->a.type = ARENA_TYPE_USED; /* Allocate the whole block */
   29a4c:	2300      	movs	r3, #0
   29a4e:	6003      	str	r3, [r0, #0]
    ap = ah->prev_free;
   29a50:	6942      	ldr	r2, [r0, #20]
    an = ah->next_free;
   29a52:	6903      	ldr	r3, [r0, #16]
    ap->next_free = an;
   29a54:	6113      	str	r3, [r2, #16]
    an->prev_free = ap;
   29a56:	615a      	str	r2, [r3, #20]
        remove_from_free_chain(fp);
    }

    return (void *)(&fp->a + 1);
}
   29a58:	3010      	adds	r0, #16
   29a5a:	4770      	bx	lr
{
   29a5c:	b430      	push	{r4, r5}
        nfp = (struct free_arena_header *)((char *)fp + size);
   29a5e:	1843      	adds	r3, r0, r1
        na = fp->a.next;
   29a60:	6884      	ldr	r4, [r0, #8]
        nfp->a.type = ARENA_TYPE_FREE;
   29a62:	2501      	movs	r5, #1
   29a64:	5045      	str	r5, [r0, r1]
        nfp->a.size = fsize - size;
   29a66:	1a52      	subs	r2, r2, r1
   29a68:	605a      	str	r2, [r3, #4]
        fp->a.type = ARENA_TYPE_USED;
   29a6a:	2200      	movs	r2, #0
   29a6c:	6002      	str	r2, [r0, #0]
        fp->a.size = size;
   29a6e:	6041      	str	r1, [r0, #4]
        nfp->a.prev = fp;
   29a70:	60d8      	str	r0, [r3, #12]
        nfp->a.next = na;
   29a72:	609c      	str	r4, [r3, #8]
        na->a.prev = nfp;
   29a74:	60e3      	str	r3, [r4, #12]
        fp->a.next = nfp;
   29a76:	6083      	str	r3, [r0, #8]
        nfp->next_free = fpn = fp->next_free;
   29a78:	6901      	ldr	r1, [r0, #16]
   29a7a:	6119      	str	r1, [r3, #16]
        nfp->prev_free = fpp = fp->prev_free;
   29a7c:	6942      	ldr	r2, [r0, #20]
   29a7e:	615a      	str	r2, [r3, #20]
        fpn->prev_free = nfp;
   29a80:	614b      	str	r3, [r1, #20]
        fpp->next_free = nfp;
   29a82:	6113      	str	r3, [r2, #16]
}
   29a84:	3010      	adds	r0, #16
   29a86:	bc30      	pop	{r4, r5}
   29a88:	4770      	bx	lr
	...

00029a8c <__free_block>:

static struct free_arena_header *__free_block(struct free_arena_header *ah)
{
   29a8c:	b410      	push	{r4}
   29a8e:	4603      	mov	r3, r0
    struct free_arena_header *pah, *nah;

    pah = ah->a.prev;
   29a90:	68c0      	ldr	r0, [r0, #12]
    nah = ah->a.next;
   29a92:	6899      	ldr	r1, [r3, #8]
    if (pah->a.type == ARENA_TYPE_FREE &&
   29a94:	6802      	ldr	r2, [r0, #0]
   29a96:	2a01      	cmp	r2, #1
   29a98:	d00e      	beq.n	29ab8 <__free_block+0x2c>

        ah = pah;
        pah = ah->a.prev;
    } else {
        /* Need to add this block to the free chain */
        ah->a.type = ARENA_TYPE_FREE;
   29a9a:	2201      	movs	r2, #1
   29a9c:	601a      	str	r2, [r3, #0]

        ah->next_free = __malloc_head.next_free;
   29a9e:	4a13      	ldr	r2, [pc, #76]	; (29aec <__free_block+0x60>)
   29aa0:	6910      	ldr	r0, [r2, #16]
   29aa2:	6118      	str	r0, [r3, #16]
        ah->prev_free = &__malloc_head;
   29aa4:	615a      	str	r2, [r3, #20]
        __malloc_head.next_free = ah;
   29aa6:	6113      	str	r3, [r2, #16]
        ah->next_free->prev_free = ah;
   29aa8:	691a      	ldr	r2, [r3, #16]
   29aaa:	6153      	str	r3, [r2, #20]
   29aac:	4618      	mov	r0, r3
    }

    /* In either of the previous cases, we might be able to merge
       with the subsequent block... */
    if (nah->a.type == ARENA_TYPE_FREE &&
   29aae:	680b      	ldr	r3, [r1, #0]
   29ab0:	2b01      	cmp	r3, #1
   29ab2:	d00b      	beq.n	29acc <__free_block+0x40>
        remove_from_chains(nah);
    }

    /* Return the block that contains the called block */
    return ah;
}
   29ab4:	bc10      	pop	{r4}
   29ab6:	4770      	bx	lr
        (char *)pah + pah->a.size == (char *)ah) {
   29ab8:	6842      	ldr	r2, [r0, #4]
   29aba:	1884      	adds	r4, r0, r2
    if (pah->a.type == ARENA_TYPE_FREE &&
   29abc:	429c      	cmp	r4, r3
   29abe:	d1ec      	bne.n	29a9a <__free_block+0xe>
        pah->a.size += ah->a.size;
   29ac0:	685b      	ldr	r3, [r3, #4]
   29ac2:	441a      	add	r2, r3
   29ac4:	6042      	str	r2, [r0, #4]
        pah->a.next = nah;
   29ac6:	6081      	str	r1, [r0, #8]
        nah->a.prev = pah;
   29ac8:	60c8      	str	r0, [r1, #12]
        pah = ah->a.prev;
   29aca:	e7f0      	b.n	29aae <__free_block+0x22>
        (char *)ah + ah->a.size == (char *)nah) {
   29acc:	6843      	ldr	r3, [r0, #4]
   29ace:	18c2      	adds	r2, r0, r3
    if (nah->a.type == ARENA_TYPE_FREE &&
   29ad0:	428a      	cmp	r2, r1
   29ad2:	d1ef      	bne.n	29ab4 <__free_block+0x28>
        ah->a.size += nah->a.size;
   29ad4:	684a      	ldr	r2, [r1, #4]
   29ad6:	4413      	add	r3, r2
   29ad8:	6043      	str	r3, [r0, #4]
    ap = ah->prev_free;
   29ada:	694a      	ldr	r2, [r1, #20]
    an = ah->next_free;
   29adc:	690b      	ldr	r3, [r1, #16]
    ap->next_free = an;
   29ade:	6113      	str	r3, [r2, #16]
    an->prev_free = ap;
   29ae0:	615a      	str	r2, [r3, #20]
    ap = ah->a.prev;
   29ae2:	68ca      	ldr	r2, [r1, #12]
    an = ah->a.next;
   29ae4:	688b      	ldr	r3, [r1, #8]
    ap->a.next = an;
   29ae6:	6093      	str	r3, [r2, #8]
    an->a.prev = ap;
   29ae8:	60da      	str	r2, [r3, #12]
    return ah;
   29aea:	e7e3      	b.n	29ab4 <__free_block+0x28>
   29aec:	200001f8 	.word	0x200001f8

00029af0 <add_malloc_block>:
void add_malloc_block(void *buf, size_t size)
{
    struct free_arena_header *fp = buf;
    struct free_arena_header *pah;

    if (size < sizeof(struct free_arena_header))
   29af0:	2917      	cmp	r1, #23
   29af2:	d91e      	bls.n	29b32 <add_malloc_block+0x42>
{
   29af4:	b510      	push	{r4, lr}
   29af6:	4604      	mov	r4, r0
        return; // Too small.

    /* Insert the block into the management chains.  We need to set
       up the size and the main block list pointer, the rest of
       the work is logically identical to free(). */
    fp->a.type = ARENA_TYPE_FREE;
   29af8:	2301      	movs	r3, #1
   29afa:	6003      	str	r3, [r0, #0]
    fp->a.size = size;
   29afc:	6041      	str	r1, [r0, #4]

    if (!malloc_lock())
   29afe:	4b0d      	ldr	r3, [pc, #52]	; (29b34 <add_malloc_block+0x44>)
   29b00:	681b      	ldr	r3, [r3, #0]
   29b02:	4798      	blx	r3
   29b04:	b1a0      	cbz	r0, 29b30 <add_malloc_block+0x40>

    /* We need to insert this into the main block list in the proper
       place -- this list is required to be sorted.  Since we most likely
       get memory assignments in ascending order, search backwards for
       the proper place. */
    for (pah = __malloc_head.a.prev; pah->a.type != ARENA_TYPE_HEAD;
   29b06:	4b0c      	ldr	r3, [pc, #48]	; (29b38 <add_malloc_block+0x48>)
   29b08:	68db      	ldr	r3, [r3, #12]
   29b0a:	681a      	ldr	r2, [r3, #0]
   29b0c:	2a02      	cmp	r2, #2
   29b0e:	d003      	beq.n	29b18 <add_malloc_block+0x28>
         pah = pah->a.prev) {
        if (pah < fp)
   29b10:	42a3      	cmp	r3, r4
   29b12:	d301      	bcc.n	29b18 <add_malloc_block+0x28>
         pah = pah->a.prev) {
   29b14:	68db      	ldr	r3, [r3, #12]
   29b16:	e7f8      	b.n	29b0a <add_malloc_block+0x1a>
            break;
    }

    /* Now pah points to the node that should be the predecessor of
       the new node */
    fp->a.next = pah->a.next;
   29b18:	689a      	ldr	r2, [r3, #8]
   29b1a:	60a2      	str	r2, [r4, #8]
    fp->a.prev = pah;
   29b1c:	60e3      	str	r3, [r4, #12]
    pah->a.next = fp;
   29b1e:	609c      	str	r4, [r3, #8]
    fp->a.next->a.prev = fp;
   29b20:	68a3      	ldr	r3, [r4, #8]
   29b22:	60dc      	str	r4, [r3, #12]

    /* Insert into the free chain and coalesce with adjacent blocks */
    fp = __free_block(fp);
   29b24:	4620      	mov	r0, r4
   29b26:	f7ff ffb1 	bl	29a8c <__free_block>

    malloc_unlock();
   29b2a:	4b04      	ldr	r3, [pc, #16]	; (29b3c <add_malloc_block+0x4c>)
   29b2c:	681b      	ldr	r3, [r3, #0]
   29b2e:	4798      	blx	r3
}
   29b30:	bd10      	pop	{r4, pc}
   29b32:	4770      	bx	lr
   29b34:	20000210 	.word	0x20000210
   29b38:	200001f8 	.word	0x200001f8
   29b3c:	20000214 	.word	0x20000214

00029b40 <malloc>:
{
   29b40:	b538      	push	{r3, r4, r5, lr}
    if (size == 0 || size > (SIZE_MAX - sizeof(struct arena_header))) {
   29b42:	1e43      	subs	r3, r0, #1
   29b44:	f113 0f12 	cmn.w	r3, #18
   29b48:	d826      	bhi.n	29b98 <malloc+0x58>
    size = (size + 2 * sizeof(struct arena_header) - 1) & ARENA_SIZE_MASK;
   29b4a:	f100 041f 	add.w	r4, r0, #31
   29b4e:	f024 040f 	bic.w	r4, r4, #15
    if (!malloc_lock())
   29b52:	4b13      	ldr	r3, [pc, #76]	; (29ba0 <malloc+0x60>)
   29b54:	681b      	ldr	r3, [r3, #0]
   29b56:	4798      	blx	r3
   29b58:	b300      	cbz	r0, 29b9c <malloc+0x5c>
    void *result = NULL;
   29b5a:	2500      	movs	r5, #0
   29b5c:	e00d      	b.n	29b7a <malloc+0x3a>
            result = __malloc_from_block(fp, size);
   29b5e:	4621      	mov	r1, r4
   29b60:	f7ff ff6f 	bl	29a42 <__malloc_from_block>
   29b64:	4605      	mov	r5, r0
    if (result == NULL) {
   29b66:	b995      	cbnz	r5, 29b8e <malloc+0x4e>
        more_mem = _sbrk(size);
   29b68:	4620      	mov	r0, r4
   29b6a:	f7e2 fb19 	bl	c1a0 <_sbrk>
        if (more_mem != (void *)-1) {
   29b6e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   29b72:	d00c      	beq.n	29b8e <malloc+0x4e>
            add_malloc_block(more_mem, size);
   29b74:	4621      	mov	r1, r4
   29b76:	f7ff ffbb 	bl	29af0 <add_malloc_block>
    for (fp = __malloc_head.next_free; fp->a.type != ARENA_TYPE_HEAD;
   29b7a:	4b0a      	ldr	r3, [pc, #40]	; (29ba4 <malloc+0x64>)
   29b7c:	6918      	ldr	r0, [r3, #16]
   29b7e:	6803      	ldr	r3, [r0, #0]
   29b80:	2b02      	cmp	r3, #2
   29b82:	d0f0      	beq.n	29b66 <malloc+0x26>
        if (fp->a.size >= size) {
   29b84:	6843      	ldr	r3, [r0, #4]
   29b86:	42a3      	cmp	r3, r4
   29b88:	d2e9      	bcs.n	29b5e <malloc+0x1e>
         fp = fp->next_free) {
   29b8a:	6900      	ldr	r0, [r0, #16]
   29b8c:	e7f7      	b.n	29b7e <malloc+0x3e>
    malloc_unlock();
   29b8e:	4b06      	ldr	r3, [pc, #24]	; (29ba8 <malloc+0x68>)
   29b90:	681b      	ldr	r3, [r3, #0]
   29b92:	4798      	blx	r3
}
   29b94:	4628      	mov	r0, r5
   29b96:	bd38      	pop	{r3, r4, r5, pc}
        return NULL;
   29b98:	2500      	movs	r5, #0
   29b9a:	e7fb      	b.n	29b94 <malloc+0x54>
        return NULL;
   29b9c:	2500      	movs	r5, #0
   29b9e:	e7f9      	b.n	29b94 <malloc+0x54>
   29ba0:	20000210 	.word	0x20000210
   29ba4:	200001f8 	.word	0x200001f8
   29ba8:	20000214 	.word	0x20000214

00029bac <free>:

void free(void *ptr)
{
    struct free_arena_header *ah;

    if (!ptr)
   29bac:	b170      	cbz	r0, 29bcc <free+0x20>
{
   29bae:	b510      	push	{r4, lr}
        return;

    ah = (struct free_arena_header *)
   29bb0:	f1a0 0410 	sub.w	r4, r0, #16

#ifdef DEBUG_MALLOC
    assert(ah->a.type == ARENA_TYPE_USED);
#endif

    if (!malloc_lock())
   29bb4:	4b06      	ldr	r3, [pc, #24]	; (29bd0 <free+0x24>)
   29bb6:	681b      	ldr	r3, [r3, #0]
   29bb8:	4798      	blx	r3
   29bba:	b900      	cbnz	r0, 29bbe <free+0x12>
        return;

    /* Merge into adjacent free blocks */
    ah = __free_block(ah);
    malloc_unlock();
}
   29bbc:	bd10      	pop	{r4, pc}
    ah = __free_block(ah);
   29bbe:	4620      	mov	r0, r4
   29bc0:	f7ff ff64 	bl	29a8c <__free_block>
    malloc_unlock();
   29bc4:	4b03      	ldr	r3, [pc, #12]	; (29bd4 <free+0x28>)
   29bc6:	681b      	ldr	r3, [r3, #0]
   29bc8:	4798      	blx	r3
   29bca:	e7f7      	b.n	29bbc <free+0x10>
   29bcc:	4770      	bx	lr
   29bce:	bf00      	nop
   29bd0:	20000210 	.word	0x20000210
   29bd4:	20000214 	.word	0x20000214

00029bd8 <stdin_read>:

static size_t
stdin_read(FILE *fp, char *bp, size_t n)
{
    return 0;
}
   29bd8:	2000      	movs	r0, #0
   29bda:	4770      	bx	lr

00029bdc <stdout_write>:

static size_t
stdout_write(FILE *fp, const char *bp, size_t n)
{
   29bdc:	b510      	push	{r4, lr}
   29bde:	4608      	mov	r0, r1
   29be0:	4614      	mov	r4, r2
    console_write(bp, n);
   29be2:	4611      	mov	r1, r2
   29be4:	f7e5 f814 	bl	ec10 <console_write>
    return n;
}
   29be8:	4620      	mov	r0, r4
   29bea:	bd10      	pop	{r4, pc}

00029bec <realloc>:
#include "malloc.h"

/* FIXME: This is cheesy, it should be fixed later */

void *realloc(void *ptr, size_t size)
{
   29bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct free_arena_header *ah;
	void *newptr;
	size_t oldsize;

	if (!ptr)
   29bee:	b300      	cbz	r0, 29c32 <realloc+0x46>
   29bf0:	4606      	mov	r6, r0
		return malloc(size);

	if (size == 0 || size > (SIZE_MAX - sizeof(struct arena_header))) {
   29bf2:	1e4b      	subs	r3, r1, #1
   29bf4:	f113 0f12 	cmn.w	r3, #18
   29bf8:	d820      	bhi.n	29c3c <realloc+0x50>
		free(ptr);
		return NULL;
	}

	/* Add the obligatory arena header, and round up */
	size = (size + 2 * sizeof(struct arena_header) - 1) & ARENA_SIZE_MASK;
   29bfa:	311f      	adds	r1, #31
   29bfc:	f021 040f 	bic.w	r4, r1, #15

	ah = (struct free_arena_header *)
	    ((struct arena_header *)ptr - 1);

	if (ah->a.size >= size && size >= (ah->a.size >> 2)) {
   29c00:	f850 5c0c 	ldr.w	r5, [r0, #-12]
   29c04:	42a5      	cmp	r5, r4
   29c06:	d302      	bcc.n	29c0e <realloc+0x22>
   29c08:	ebb4 0f95 	cmp.w	r4, r5, lsr #2
   29c0c:	d21a      	bcs.n	29c44 <realloc+0x58>
	} else {
		/* Make me a new block.  This is kind of bogus; we should
		   be checking the following block to see if we can do an
		   in-place adjustment... fix that later. */

		oldsize = ah->a.size - sizeof(struct arena_header);
   29c0e:	3d10      	subs	r5, #16

		newptr = malloc(size);
   29c10:	4620      	mov	r0, r4
   29c12:	f7ff ff95 	bl	29b40 <malloc>
                if (newptr) {
   29c16:	4607      	mov	r7, r0
   29c18:	b1b0      	cbz	r0, 29c48 <realloc+0x5c>
                    memcpy(newptr, ptr, (size < oldsize) ? size : oldsize);
   29c1a:	4622      	mov	r2, r4
   29c1c:	42ac      	cmp	r4, r5
   29c1e:	bf28      	it	cs
   29c20:	462a      	movcs	r2, r5
   29c22:	4631      	mov	r1, r6
   29c24:	f7e4 fc24 	bl	e470 <memcpy>
                    free(ptr);
   29c28:	4630      	mov	r0, r6
   29c2a:	f7ff ffbf 	bl	29bac <free>
                } else {
                    newptr = ptr;
                }
		return newptr;
	}
}
   29c2e:	4638      	mov	r0, r7
   29c30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return malloc(size);
   29c32:	4608      	mov	r0, r1
   29c34:	f7ff ff84 	bl	29b40 <malloc>
   29c38:	4607      	mov	r7, r0
   29c3a:	e7f8      	b.n	29c2e <realloc+0x42>
		free(ptr);
   29c3c:	f7ff ffb6 	bl	29bac <free>
		return NULL;
   29c40:	2700      	movs	r7, #0
   29c42:	e7f4      	b.n	29c2e <realloc+0x42>
		return ptr;
   29c44:	4607      	mov	r7, r0
   29c46:	e7f2      	b.n	29c2e <realloc+0x42>
                    newptr = ptr;
   29c48:	4637      	mov	r7, r6
   29c4a:	e7f0      	b.n	29c2e <realloc+0x42>

00029c4c <srand48>:

unsigned short __rand48_seed[3];	/* Common with mrand48.c, lrand48.c */

void srand48(long seedval)
{
	__rand48_seed[0] = 0x330e;
   29c4c:	4b03      	ldr	r3, [pc, #12]	; (29c5c <srand48+0x10>)
   29c4e:	f243 320e 	movw	r2, #13070	; 0x330e
   29c52:	801a      	strh	r2, [r3, #0]
	__rand48_seed[1] = (unsigned short)seedval;
   29c54:	8058      	strh	r0, [r3, #2]
	__rand48_seed[2] = (unsigned short)((uint32_t) seedval >> 16);
   29c56:	0c00      	lsrs	r0, r0, #16
   29c58:	8098      	strh	r0, [r3, #4]
}
   29c5a:	4770      	bx	lr
   29c5c:	200047b8 	.word	0x200047b8

00029c60 <ui2a>:
    char base;  /**<  number base (e.g.: 8, 10, 16) */
    char *bf;           /**<  Buffer to output */
};

static void ui2a(unsigned long long int num, struct param *p)
{
   29c60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   29c64:	b082      	sub	sp, #8
   29c66:	e9cd 0100 	strd	r0, r1, [sp]
   29c6a:	4691      	mov	r9, r2
    int n = 0;
    unsigned long long int d = 1;
    char *bf = p->bf;
   29c6c:	f8d2 8004 	ldr.w	r8, [r2, #4]
    unsigned long long int d = 1;
   29c70:	2401      	movs	r4, #1
   29c72:	2500      	movs	r5, #0
    while (num / d >= p->base)
   29c74:	e004      	b.n	29c80 <ui2a+0x20>
        d *= p->base;
   29c76:	fb06 f305 	mul.w	r3, r6, r5
   29c7a:	fba4 4506 	umull	r4, r5, r4, r6
   29c7e:	441d      	add	r5, r3
    while (num / d >= p->base)
   29c80:	4622      	mov	r2, r4
   29c82:	462b      	mov	r3, r5
   29c84:	e9dd 0100 	ldrd	r0, r1, [sp]
   29c88:	f000 fe60 	bl	2a94c <__aeabi_uldivmod>
   29c8c:	f899 6003 	ldrb.w	r6, [r9, #3]
   29c90:	2700      	movs	r7, #0
   29c92:	42b9      	cmp	r1, r7
   29c94:	bf08      	it	eq
   29c96:	42b0      	cmpeq	r0, r6
   29c98:	d2ed      	bcs.n	29c76 <ui2a+0x16>
    int n = 0;
   29c9a:	f04f 0a00 	mov.w	sl, #0
   29c9e:	e007      	b.n	29cb0 <ui2a+0x50>
    while (d != 0) {
        unsigned long long  dgt = num / d;
        num %= d;
        d /= p->base;
        if (n || dgt > 0 || d == 0) {
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
   29ca0:	2330      	movs	r3, #48	; 0x30
   29ca2:	441e      	add	r6, r3
   29ca4:	f888 6000 	strb.w	r6, [r8]
            ++n;
   29ca8:	f10a 0a01 	add.w	sl, sl, #1
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
   29cac:	f108 0801 	add.w	r8, r8, #1
    while (d != 0) {
   29cb0:	ea54 0305 	orrs.w	r3, r4, r5
   29cb4:	d02e      	beq.n	29d14 <ui2a+0xb4>
        unsigned long long  dgt = num / d;
   29cb6:	4622      	mov	r2, r4
   29cb8:	462b      	mov	r3, r5
   29cba:	e9dd 0100 	ldrd	r0, r1, [sp]
   29cbe:	f000 fe45 	bl	2a94c <__aeabi_uldivmod>
   29cc2:	4606      	mov	r6, r0
   29cc4:	460f      	mov	r7, r1
        num %= d;
   29cc6:	4622      	mov	r2, r4
   29cc8:	462b      	mov	r3, r5
   29cca:	e9dd 0100 	ldrd	r0, r1, [sp]
   29cce:	f000 fe3d 	bl	2a94c <__aeabi_uldivmod>
   29cd2:	e9cd 2300 	strd	r2, r3, [sp]
        d /= p->base;
   29cd6:	f899 2003 	ldrb.w	r2, [r9, #3]
   29cda:	2300      	movs	r3, #0
   29cdc:	4620      	mov	r0, r4
   29cde:	4629      	mov	r1, r5
   29ce0:	f000 fe34 	bl	2a94c <__aeabi_uldivmod>
   29ce4:	4604      	mov	r4, r0
   29ce6:	460d      	mov	r5, r1
        if (n || dgt > 0 || d == 0) {
   29ce8:	f1ba 0f00 	cmp.w	sl, #0
   29cec:	d105      	bne.n	29cfa <ui2a+0x9a>
   29cee:	ea56 0307 	orrs.w	r3, r6, r7
   29cf2:	d102      	bne.n	29cfa <ui2a+0x9a>
   29cf4:	ea54 0305 	orrs.w	r3, r4, r5
   29cf8:	d1da      	bne.n	29cb0 <ui2a+0x50>
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
   29cfa:	2f00      	cmp	r7, #0
   29cfc:	bf08      	it	eq
   29cfe:	2e0a      	cmpeq	r6, #10
   29d00:	d3ce      	bcc.n	29ca0 <ui2a+0x40>
   29d02:	f899 3002 	ldrb.w	r3, [r9, #2]
   29d06:	f013 0f04 	tst.w	r3, #4
   29d0a:	d001      	beq.n	29d10 <ui2a+0xb0>
   29d0c:	2337      	movs	r3, #55	; 0x37
   29d0e:	e7c8      	b.n	29ca2 <ui2a+0x42>
   29d10:	2357      	movs	r3, #87	; 0x57
   29d12:	e7c6      	b.n	29ca2 <ui2a+0x42>
        }
    }
    *bf = 0;
   29d14:	2300      	movs	r3, #0
   29d16:	f888 3000 	strb.w	r3, [r8]
}
   29d1a:	b002      	add	sp, #8
   29d1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00029d20 <i2a>:

static void i2a(long long int num, struct param *p)
{
   29d20:	b508      	push	{r3, lr}
    if (num < 0) {
   29d22:	2800      	cmp	r0, #0
   29d24:	f171 0300 	sbcs.w	r3, r1, #0
   29d28:	db02      	blt.n	29d30 <i2a+0x10>
        num = -num;
        p->sign = 1;
    }
    ui2a(num, p);
   29d2a:	f7ff ff99 	bl	29c60 <ui2a>
}
   29d2e:	bd08      	pop	{r3, pc}
        num = -num;
   29d30:	4240      	negs	r0, r0
   29d32:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
        p->sign = 1;
   29d36:	7893      	ldrb	r3, [r2, #2]
   29d38:	f043 0301 	orr.w	r3, r3, #1
   29d3c:	7093      	strb	r3, [r2, #2]
   29d3e:	e7f4      	b.n	29d2a <i2a+0xa>

00029d40 <a2d>:

static int a2d(char ch)
{
    if (ch >= '0' && ch <= '9')
   29d40:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   29d44:	b2db      	uxtb	r3, r3
   29d46:	2b09      	cmp	r3, #9
   29d48:	d90b      	bls.n	29d62 <a2d+0x22>
        return ch - '0';
    else if (ch >= 'a' && ch <= 'f')
   29d4a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   29d4e:	b2db      	uxtb	r3, r3
   29d50:	2b05      	cmp	r3, #5
   29d52:	d908      	bls.n	29d66 <a2d+0x26>
        return ch - 'a' + 10;
    else if (ch >= 'A' && ch <= 'F')
   29d54:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   29d58:	b2db      	uxtb	r3, r3
   29d5a:	2b05      	cmp	r3, #5
   29d5c:	d805      	bhi.n	29d6a <a2d+0x2a>
        return ch - 'A' + 10;
   29d5e:	3837      	subs	r0, #55	; 0x37
   29d60:	4770      	bx	lr
        return ch - '0';
   29d62:	3830      	subs	r0, #48	; 0x30
   29d64:	4770      	bx	lr
        return ch - 'a' + 10;
   29d66:	3857      	subs	r0, #87	; 0x57
   29d68:	4770      	bx	lr
    else
        return -1;
   29d6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   29d6e:	4770      	bx	lr

00029d70 <a2i>:

static char a2i(char ch, const char **src, int base, unsigned char *nump)
{
   29d70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   29d74:	4605      	mov	r5, r0
   29d76:	4688      	mov	r8, r1
   29d78:	4617      	mov	r7, r2
   29d7a:	4699      	mov	r9, r3
    const char *p = *src;
   29d7c:	680c      	ldr	r4, [r1, #0]
    int num = 0;
   29d7e:	2600      	movs	r6, #0
    int digit;
    while ((digit = a2d(ch)) >= 0) {
   29d80:	4628      	mov	r0, r5
   29d82:	f7ff ffdd 	bl	29d40 <a2d>
   29d86:	2800      	cmp	r0, #0
   29d88:	db06      	blt.n	29d98 <a2i+0x28>
        if (digit > base)
   29d8a:	42b8      	cmp	r0, r7
   29d8c:	dc04      	bgt.n	29d98 <a2i+0x28>
            break;
        num = num * base + digit;
   29d8e:	fb07 0606 	mla	r6, r7, r6, r0
        ch = *p++;
   29d92:	7825      	ldrb	r5, [r4, #0]
   29d94:	3401      	adds	r4, #1
   29d96:	e7f3      	b.n	29d80 <a2i+0x10>
    }
    *src = p;
   29d98:	f8c8 4000 	str.w	r4, [r8]
    *nump = num;
   29d9c:	f889 6000 	strb.w	r6, [r9]
    return ch;
}
   29da0:	4628      	mov	r0, r5
   29da2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00029da6 <putf>:

static int putf(FILE *putp, char c)
{
   29da6:	b500      	push	{lr}
   29da8:	b083      	sub	sp, #12
	return fwrite(s, 1, strlen(s), stdout) + fwrite("\n", 1, 1, stdout);
}

__extern_inline int fputc(int c, FILE *f)
{
	unsigned char ch = c;
   29daa:	f88d 1007 	strb.w	r1, [sp, #7]
    if (stream->vmt->write == NULL) return 0;
   29dae:	6803      	ldr	r3, [r0, #0]
   29db0:	681b      	ldr	r3, [r3, #0]
   29db2:	b14b      	cbz	r3, 29dc8 <putf+0x22>
    return stream->vmt->write(stream, (char*)buf, size*nmemb) / size;
   29db4:	2201      	movs	r2, #1
   29db6:	f10d 0107 	add.w	r1, sp, #7
   29dba:	4798      	blx	r3
	return fwrite(&ch, 1, 1, f) == 1 ? ch : EOF;
   29dbc:	2801      	cmp	r0, #1
   29dbe:	d005      	beq.n	29dcc <putf+0x26>
    if (fputc(c, putp) == EOF)
        return 0;
   29dc0:	2000      	movs	r0, #0
    else
        return 1;
}
   29dc2:	b003      	add	sp, #12
   29dc4:	f85d fb04 	ldr.w	pc, [sp], #4
        return 0;
   29dc8:	2000      	movs	r0, #0
   29dca:	e7fa      	b.n	29dc2 <putf+0x1c>
        return 1;
   29dcc:	2001      	movs	r0, #1
   29dce:	e7f8      	b.n	29dc2 <putf+0x1c>

00029dd0 <putchw>:

static unsigned putchw(FILE *putp, struct param *p)
{
   29dd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29dd4:	4606      	mov	r6, r0
   29dd6:	460f      	mov	r7, r1
    unsigned written = 0;
    char ch;
    int n = p->width;
   29dd8:	780c      	ldrb	r4, [r1, #0]
    char *bf = p->bf;
   29dda:	684b      	ldr	r3, [r1, #4]

    /* Number of filling characters */
    while (*bf++ && n > 0)
   29ddc:	e001      	b.n	29de2 <putchw+0x12>
        n--;
   29dde:	3c01      	subs	r4, #1
    while (*bf++ && n > 0)
   29de0:	4613      	mov	r3, r2
   29de2:	1c5a      	adds	r2, r3, #1
   29de4:	781b      	ldrb	r3, [r3, #0]
   29de6:	b10b      	cbz	r3, 29dec <putchw+0x1c>
   29de8:	2c00      	cmp	r4, #0
   29dea:	dcf8      	bgt.n	29dde <putchw+0xe>
    if (p->sign)
   29dec:	78bb      	ldrb	r3, [r7, #2]
   29dee:	f013 0f01 	tst.w	r3, #1
   29df2:	d000      	beq.n	29df6 <putchw+0x26>
        n--;
   29df4:	3c01      	subs	r4, #1
    if (p->alt && p->base == 16)
   29df6:	887b      	ldrh	r3, [r7, #2]
   29df8:	f023 03fd 	bic.w	r3, r3, #253	; 0xfd
   29dfc:	b29b      	uxth	r3, r3
   29dfe:	f241 0202 	movw	r2, #4098	; 0x1002
   29e02:	4293      	cmp	r3, r2
   29e04:	d01c      	beq.n	29e40 <putchw+0x70>
        n -= 2;
    else if (p->alt && p->base == 8)
   29e06:	f640 0202 	movw	r2, #2050	; 0x802
   29e0a:	4293      	cmp	r3, r2
   29e0c:	d01a      	beq.n	29e44 <putchw+0x74>
        n--;

    /* Unless left-aligned, fill with space, before alternate or sign */
    if (!p->lz && !p->left) {
   29e0e:	683b      	ldr	r3, [r7, #0]
   29e10:	4d35      	ldr	r5, [pc, #212]	; (29ee8 <putchw+0x118>)
   29e12:	401d      	ands	r5, r3
   29e14:	b1f5      	cbz	r5, 29e54 <putchw+0x84>
    unsigned written = 0;
   29e16:	2500      	movs	r5, #0
        while (n-- > 0)
            written += putf(putp, ' ');
    }

    /* print sign */
    if (p->sign)
   29e18:	78bb      	ldrb	r3, [r7, #2]
   29e1a:	f013 0f01 	tst.w	r3, #1
   29e1e:	d11f      	bne.n	29e60 <putchw+0x90>
        written += putf(putp, '-');

    /* Alternate */
    if (p->alt && p->base == 16) {
   29e20:	887b      	ldrh	r3, [r7, #2]
   29e22:	f023 03fd 	bic.w	r3, r3, #253	; 0xfd
   29e26:	b29b      	uxth	r3, r3
   29e28:	f241 0202 	movw	r2, #4098	; 0x1002
   29e2c:	4293      	cmp	r3, r2
   29e2e:	d01d      	beq.n	29e6c <putchw+0x9c>
        written += putf(putp, '0');
        written += putf(putp, (p->uc ? 'X' : 'x'));
    } else if (p->alt && p->base == 8) {
   29e30:	f640 0202 	movw	r2, #2050	; 0x802
   29e34:	4293      	cmp	r3, r2
   29e36:	d02a      	beq.n	29e8e <putchw+0xbe>
        written += putf(putp, '0');
    }

    /* Fill with zeros, after alternate or sign */
    if (p->lz) {
   29e38:	787b      	ldrb	r3, [r7, #1]
   29e3a:	bba3      	cbnz	r3, 29ea6 <putchw+0xd6>
        while (n-- > 0)
            written += putf(putp, '0');
    }

    /* Put actual buffer */
    bf = p->bf;
   29e3c:	687b      	ldr	r3, [r7, #4]
    while ((ch = *bf++))
   29e3e:	e03d      	b.n	29ebc <putchw+0xec>
        n -= 2;
   29e40:	3c02      	subs	r4, #2
   29e42:	e7e4      	b.n	29e0e <putchw+0x3e>
        n--;
   29e44:	3c01      	subs	r4, #1
   29e46:	e7e2      	b.n	29e0e <putchw+0x3e>
            written += putf(putp, ' ');
   29e48:	2120      	movs	r1, #32
   29e4a:	4630      	mov	r0, r6
   29e4c:	f7ff ffab 	bl	29da6 <putf>
   29e50:	4405      	add	r5, r0
        while (n-- > 0)
   29e52:	4644      	mov	r4, r8
   29e54:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
   29e58:	2c00      	cmp	r4, #0
   29e5a:	dcf5      	bgt.n	29e48 <putchw+0x78>
   29e5c:	4644      	mov	r4, r8
   29e5e:	e7db      	b.n	29e18 <putchw+0x48>
        written += putf(putp, '-');
   29e60:	212d      	movs	r1, #45	; 0x2d
   29e62:	4630      	mov	r0, r6
   29e64:	f7ff ff9f 	bl	29da6 <putf>
   29e68:	4405      	add	r5, r0
   29e6a:	e7d9      	b.n	29e20 <putchw+0x50>
        written += putf(putp, '0');
   29e6c:	2130      	movs	r1, #48	; 0x30
   29e6e:	4630      	mov	r0, r6
   29e70:	f7ff ff99 	bl	29da6 <putf>
   29e74:	4405      	add	r5, r0
        written += putf(putp, (p->uc ? 'X' : 'x'));
   29e76:	78bb      	ldrb	r3, [r7, #2]
   29e78:	f013 0f04 	tst.w	r3, #4
   29e7c:	d005      	beq.n	29e8a <putchw+0xba>
   29e7e:	2158      	movs	r1, #88	; 0x58
   29e80:	4630      	mov	r0, r6
   29e82:	f7ff ff90 	bl	29da6 <putf>
   29e86:	4405      	add	r5, r0
   29e88:	e7d6      	b.n	29e38 <putchw+0x68>
   29e8a:	2178      	movs	r1, #120	; 0x78
   29e8c:	e7f8      	b.n	29e80 <putchw+0xb0>
        written += putf(putp, '0');
   29e8e:	2130      	movs	r1, #48	; 0x30
   29e90:	4630      	mov	r0, r6
   29e92:	f7ff ff88 	bl	29da6 <putf>
   29e96:	4405      	add	r5, r0
   29e98:	e7ce      	b.n	29e38 <putchw+0x68>
            written += putf(putp, '0');
   29e9a:	2130      	movs	r1, #48	; 0x30
   29e9c:	4630      	mov	r0, r6
   29e9e:	f7ff ff82 	bl	29da6 <putf>
   29ea2:	4405      	add	r5, r0
        while (n-- > 0)
   29ea4:	4644      	mov	r4, r8
   29ea6:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
   29eaa:	2c00      	cmp	r4, #0
   29eac:	dcf5      	bgt.n	29e9a <putchw+0xca>
   29eae:	4644      	mov	r4, r8
   29eb0:	e7c4      	b.n	29e3c <putchw+0x6c>
        written += putf(putp, ch);
   29eb2:	4630      	mov	r0, r6
   29eb4:	f7ff ff77 	bl	29da6 <putf>
   29eb8:	4405      	add	r5, r0
    while ((ch = *bf++))
   29eba:	4643      	mov	r3, r8
   29ebc:	f103 0801 	add.w	r8, r3, #1
   29ec0:	7819      	ldrb	r1, [r3, #0]
   29ec2:	2900      	cmp	r1, #0
   29ec4:	d1f5      	bne.n	29eb2 <putchw+0xe2>

    /* If left-aligned, pad the end with spaces. */
    if (p->left) {
   29ec6:	78bb      	ldrb	r3, [r7, #2]
   29ec8:	f013 0f08 	tst.w	r3, #8
   29ecc:	d106      	bne.n	29edc <putchw+0x10c>
   29ece:	e008      	b.n	29ee2 <putchw+0x112>
        while (n-- > 0)
            written += putf(putp, ' ');
   29ed0:	2120      	movs	r1, #32
   29ed2:	4630      	mov	r0, r6
   29ed4:	f7ff ff67 	bl	29da6 <putf>
   29ed8:	4405      	add	r5, r0
        while (n-- > 0)
   29eda:	463c      	mov	r4, r7
   29edc:	1e67      	subs	r7, r4, #1
   29ede:	2c00      	cmp	r4, #0
   29ee0:	dcf6      	bgt.n	29ed0 <putchw+0x100>
    }
    
    return written;
}
   29ee2:	4628      	mov	r0, r5
   29ee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   29ee8:	0008ff00 	.word	0x0008ff00

00029eec <intarg>:
static unsigned long long
intarg(int lng, int sign, va_list *va)
{
    unsigned long long val;

    switch (lng) {
   29eec:	b160      	cbz	r0, 29f08 <intarg+0x1c>
   29eee:	2801      	cmp	r0, #1
   29ef0:	d017      	beq.n	29f22 <intarg+0x36>
        }
        break;

    case 2:
    default:
        if (sign) {
   29ef2:	bb19      	cbnz	r1, 29f3c <intarg+0x50>
            val = va_arg(*va, long long);
        } else {
            val = va_arg(*va, unsigned long long);
   29ef4:	6813      	ldr	r3, [r2, #0]
   29ef6:	3307      	adds	r3, #7
   29ef8:	f023 0307 	bic.w	r3, r3, #7
   29efc:	f103 0108 	add.w	r1, r3, #8
   29f00:	6011      	str	r1, [r2, #0]
   29f02:	e9d3 0100 	ldrd	r0, r1, [r3]
        }
        break;
    }

    return val;
}
   29f06:	4770      	bx	lr
        if (sign) {
   29f08:	b129      	cbz	r1, 29f16 <intarg+0x2a>
            val = va_arg(*va, int);
   29f0a:	6813      	ldr	r3, [r2, #0]
   29f0c:	1d19      	adds	r1, r3, #4
   29f0e:	6011      	str	r1, [r2, #0]
   29f10:	6818      	ldr	r0, [r3, #0]
   29f12:	17c1      	asrs	r1, r0, #31
   29f14:	4770      	bx	lr
            val = va_arg(*va, unsigned int);
   29f16:	6813      	ldr	r3, [r2, #0]
   29f18:	1d19      	adds	r1, r3, #4
   29f1a:	6011      	str	r1, [r2, #0]
   29f1c:	6818      	ldr	r0, [r3, #0]
   29f1e:	2100      	movs	r1, #0
   29f20:	4770      	bx	lr
        if (sign) {
   29f22:	b129      	cbz	r1, 29f30 <intarg+0x44>
            val = va_arg(*va, long);
   29f24:	6813      	ldr	r3, [r2, #0]
   29f26:	1d19      	adds	r1, r3, #4
   29f28:	6011      	str	r1, [r2, #0]
   29f2a:	6818      	ldr	r0, [r3, #0]
   29f2c:	17c1      	asrs	r1, r0, #31
   29f2e:	4770      	bx	lr
            val = va_arg(*va, unsigned long);
   29f30:	6813      	ldr	r3, [r2, #0]
   29f32:	1d19      	adds	r1, r3, #4
   29f34:	6011      	str	r1, [r2, #0]
   29f36:	6818      	ldr	r0, [r3, #0]
   29f38:	2100      	movs	r1, #0
   29f3a:	4770      	bx	lr
            val = va_arg(*va, long long);
   29f3c:	6813      	ldr	r3, [r2, #0]
   29f3e:	3307      	adds	r3, #7
   29f40:	f023 0307 	bic.w	r3, r3, #7
   29f44:	f103 0108 	add.w	r1, r3, #8
   29f48:	6011      	str	r1, [r2, #0]
   29f4a:	e9d3 0100 	ldrd	r0, r1, [r3]
   29f4e:	4770      	bx	lr

00029f50 <tfp_format>:

size_t tfp_format(FILE *putp, const char *fmt, va_list va)
{
   29f50:	b570      	push	{r4, r5, r6, lr}
   29f52:	b08a      	sub	sp, #40	; 0x28
   29f54:	4605      	mov	r5, r0
   29f56:	9101      	str	r1, [sp, #4]
   29f58:	9200      	str	r2, [sp, #0]
    double d;
    int n;
#endif
    int i;

    p.bf = bf;
   29f5a:	ab02      	add	r3, sp, #8
   29f5c:	9309      	str	r3, [sp, #36]	; 0x24
    size_t written = 0;
   29f5e:	2400      	movs	r4, #0

    while ((ch = *(fmt++))) {
   29f60:	9b01      	ldr	r3, [sp, #4]
   29f62:	1c5a      	adds	r2, r3, #1
   29f64:	9201      	str	r2, [sp, #4]
   29f66:	7819      	ldrb	r1, [r3, #0]
   29f68:	2900      	cmp	r1, #0
   29f6a:	f000 811c 	beq.w	2a1a6 <tfp_format+0x256>
        if (ch != '%') {
   29f6e:	2925      	cmp	r1, #37	; 0x25
   29f70:	d004      	beq.n	29f7c <tfp_format+0x2c>
            written += putf(putp, ch);
   29f72:	4628      	mov	r0, r5
   29f74:	f7ff ff17 	bl	29da6 <putf>
   29f78:	4404      	add	r4, r0
   29f7a:	e7f1      	b.n	29f60 <tfp_format+0x10>
        } else {
            /* Init parameter struct */
            p.lz = 0;
   29f7c:	2200      	movs	r2, #0
   29f7e:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
            p.alt = 0;
   29f82:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
            p.width = 0;
   29f86:	f88d 2020 	strb.w	r2, [sp, #32]
            p.sign = 0;
            p.left = 0;
            p.uc = 0;
   29f8a:	f003 03f4 	and.w	r3, r3, #244	; 0xf4
   29f8e:	f362 0382 	bfi	r3, r2, #2, #1
   29f92:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
            lng = 0;

            /* Flags */
            while ((ch = *(fmt++))) {
   29f96:	9b01      	ldr	r3, [sp, #4]
   29f98:	1c5a      	adds	r2, r3, #1
   29f9a:	9201      	str	r2, [sp, #4]
   29f9c:	7818      	ldrb	r0, [r3, #0]
   29f9e:	b128      	cbz	r0, 29fac <tfp_format+0x5c>
                switch (ch) {
   29fa0:	282d      	cmp	r0, #45	; 0x2d
   29fa2:	d04e      	beq.n	2a042 <tfp_format+0xf2>
   29fa4:	2830      	cmp	r0, #48	; 0x30
   29fa6:	d03c      	beq.n	2a022 <tfp_format+0xd2>
   29fa8:	2823      	cmp	r0, #35	; 0x23
   29faa:	d043      	beq.n	2a034 <tfp_format+0xe4>
                }
                break;
            }

            /* Width */
            if (ch == '*') {
   29fac:	282a      	cmp	r0, #42	; 0x2a
   29fae:	d052      	beq.n	2a056 <tfp_format+0x106>
                    p.width = UCHAR_MAX;
                } else if (i > 0) {
                    p.width = i;
                }
                ch = *(fmt++);
            } else if (ch >= '0' && ch <= '9') {
   29fb0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   29fb4:	b2db      	uxtb	r3, r3
   29fb6:	2b09      	cmp	r3, #9
   29fb8:	d961      	bls.n	2a07e <tfp_format+0x12e>
                ch = a2i(ch, &fmt, 10, &(p.width));
            }
            if (ch == 'l') {
   29fba:	286c      	cmp	r0, #108	; 0x6c
   29fbc:	d065      	beq.n	2a08a <tfp_format+0x13a>
            lng = 0;
   29fbe:	2600      	movs	r6, #0
                    ch = *(fmt++);
                    lng = 2;
                }
            }

            if (ch == 'z') {
   29fc0:	287a      	cmp	r0, #122	; 0x7a
   29fc2:	d06f      	beq.n	2a0a4 <tfp_format+0x154>
                ch = *(fmt++);
            }

            switch (ch) {
   29fc4:	2869      	cmp	r0, #105	; 0x69
   29fc6:	f000 808e 	beq.w	2a0e6 <tfp_format+0x196>
   29fca:	d970      	bls.n	2a0ae <tfp_format+0x15e>
   29fcc:	2873      	cmp	r0, #115	; 0x73
   29fce:	f000 80dd 	beq.w	2a18c <tfp_format+0x23c>
   29fd2:	f200 8099 	bhi.w	2a108 <tfp_format+0x1b8>
   29fd6:	286f      	cmp	r0, #111	; 0x6f
   29fd8:	f000 80c7 	beq.w	2a16a <tfp_format+0x21a>
   29fdc:	2870      	cmp	r0, #112	; 0x70
   29fde:	d1bf      	bne.n	29f60 <tfp_format+0x10>
                p.base = 8;
                ui2a(intarg(lng, 0, &va), &p);
                written += putchw(putp, &p);
                break;
            case 'p':
                v = va_arg(va, void *);
   29fe0:	9b00      	ldr	r3, [sp, #0]
   29fe2:	1d1a      	adds	r2, r3, #4
   29fe4:	9200      	str	r2, [sp, #0]
   29fe6:	6818      	ldr	r0, [r3, #0]
                p.base = 16;
   29fe8:	2310      	movs	r3, #16
   29fea:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a((uintptr_t)v, &p);
   29fee:	aa08      	add	r2, sp, #32
   29ff0:	2100      	movs	r1, #0
   29ff2:	f7ff fe35 	bl	29c60 <ui2a>
                p.width = 2 * sizeof(void*);
   29ff6:	2308      	movs	r3, #8
   29ff8:	f88d 3020 	strb.w	r3, [sp, #32]
                p.lz = 1;
   29ffc:	2301      	movs	r3, #1
   29ffe:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                written += putf(putp, '0');
   2a002:	2130      	movs	r1, #48	; 0x30
   2a004:	4628      	mov	r0, r5
   2a006:	f7ff fece 	bl	29da6 <putf>
   2a00a:	4404      	add	r4, r0
                written += putf(putp, 'x');
   2a00c:	2178      	movs	r1, #120	; 0x78
   2a00e:	4628      	mov	r0, r5
   2a010:	f7ff fec9 	bl	29da6 <putf>
   2a014:	4404      	add	r4, r0
                written += putchw(putp, &p);
   2a016:	a908      	add	r1, sp, #32
   2a018:	4628      	mov	r0, r5
   2a01a:	f7ff fed9 	bl	29dd0 <putchw>
   2a01e:	4404      	add	r4, r0
                break;
   2a020:	e79e      	b.n	29f60 <tfp_format+0x10>
                    if (!p.left) {
   2a022:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   2a026:	f013 0f08 	tst.w	r3, #8
   2a02a:	d1b4      	bne.n	29f96 <tfp_format+0x46>
                        p.lz = 1;
   2a02c:	2301      	movs	r3, #1
   2a02e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                    continue;
   2a032:	e7b0      	b.n	29f96 <tfp_format+0x46>
                    p.alt = 1;
   2a034:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   2a038:	f043 0302 	orr.w	r3, r3, #2
   2a03c:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                    continue;
   2a040:	e7a9      	b.n	29f96 <tfp_format+0x46>
                    p.left = 1;
   2a042:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   2a046:	f043 0308 	orr.w	r3, r3, #8
   2a04a:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                    p.lz = 0;
   2a04e:	2300      	movs	r3, #0
   2a050:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                    continue;
   2a054:	e79f      	b.n	29f96 <tfp_format+0x46>
                i = intarg(0, 1, &va);
   2a056:	466a      	mov	r2, sp
   2a058:	2101      	movs	r1, #1
   2a05a:	2000      	movs	r0, #0
   2a05c:	f7ff ff46 	bl	29eec <intarg>
                if (i > UCHAR_MAX) {
   2a060:	28ff      	cmp	r0, #255	; 0xff
   2a062:	dd07      	ble.n	2a074 <tfp_format+0x124>
                    p.width = UCHAR_MAX;
   2a064:	23ff      	movs	r3, #255	; 0xff
   2a066:	f88d 3020 	strb.w	r3, [sp, #32]
                ch = *(fmt++);
   2a06a:	9b01      	ldr	r3, [sp, #4]
   2a06c:	1c5a      	adds	r2, r3, #1
   2a06e:	9201      	str	r2, [sp, #4]
   2a070:	7818      	ldrb	r0, [r3, #0]
   2a072:	e7a2      	b.n	29fba <tfp_format+0x6a>
                } else if (i > 0) {
   2a074:	2800      	cmp	r0, #0
   2a076:	ddf8      	ble.n	2a06a <tfp_format+0x11a>
                    p.width = i;
   2a078:	f88d 0020 	strb.w	r0, [sp, #32]
   2a07c:	e7f5      	b.n	2a06a <tfp_format+0x11a>
                ch = a2i(ch, &fmt, 10, &(p.width));
   2a07e:	ab08      	add	r3, sp, #32
   2a080:	220a      	movs	r2, #10
   2a082:	a901      	add	r1, sp, #4
   2a084:	f7ff fe74 	bl	29d70 <a2i>
   2a088:	e797      	b.n	29fba <tfp_format+0x6a>
                ch = *(fmt++);
   2a08a:	9b01      	ldr	r3, [sp, #4]
   2a08c:	1c5a      	adds	r2, r3, #1
   2a08e:	9201      	str	r2, [sp, #4]
   2a090:	7818      	ldrb	r0, [r3, #0]
                if (ch == 'l') {
   2a092:	286c      	cmp	r0, #108	; 0x6c
   2a094:	d001      	beq.n	2a09a <tfp_format+0x14a>
                lng = 1;
   2a096:	2601      	movs	r6, #1
   2a098:	e792      	b.n	29fc0 <tfp_format+0x70>
                    ch = *(fmt++);
   2a09a:	1c9a      	adds	r2, r3, #2
   2a09c:	9201      	str	r2, [sp, #4]
   2a09e:	7858      	ldrb	r0, [r3, #1]
                    lng = 2;
   2a0a0:	2602      	movs	r6, #2
   2a0a2:	e78d      	b.n	29fc0 <tfp_format+0x70>
                ch = *(fmt++);
   2a0a4:	9b01      	ldr	r3, [sp, #4]
   2a0a6:	1c5a      	adds	r2, r3, #1
   2a0a8:	9201      	str	r2, [sp, #4]
   2a0aa:	7818      	ldrb	r0, [r3, #0]
   2a0ac:	e78a      	b.n	29fc4 <tfp_format+0x74>
            switch (ch) {
   2a0ae:	2858      	cmp	r0, #88	; 0x58
   2a0b0:	d040      	beq.n	2a134 <tfp_format+0x1e4>
   2a0b2:	d80a      	bhi.n	2a0ca <tfp_format+0x17a>
   2a0b4:	2800      	cmp	r0, #0
   2a0b6:	d076      	beq.n	2a1a6 <tfp_format+0x256>
   2a0b8:	2825      	cmp	r0, #37	; 0x25
   2a0ba:	f47f af51 	bne.w	29f60 <tfp_format+0x10>
                /* Output the decimal part. */
                written += putchw(putp, &p);
                break;
#endif
            case '%':
                written += putf(putp, ch);
   2a0be:	4601      	mov	r1, r0
   2a0c0:	4628      	mov	r0, r5
   2a0c2:	f7ff fe70 	bl	29da6 <putf>
   2a0c6:	4404      	add	r4, r0
                break;
   2a0c8:	e74a      	b.n	29f60 <tfp_format+0x10>
            switch (ch) {
   2a0ca:	2863      	cmp	r0, #99	; 0x63
   2a0cc:	d108      	bne.n	2a0e0 <tfp_format+0x190>
                written += putf(putp, (char)(va_arg(va, int)));
   2a0ce:	9b00      	ldr	r3, [sp, #0]
   2a0d0:	1d1a      	adds	r2, r3, #4
   2a0d2:	9200      	str	r2, [sp, #0]
   2a0d4:	7819      	ldrb	r1, [r3, #0]
   2a0d6:	4628      	mov	r0, r5
   2a0d8:	f7ff fe65 	bl	29da6 <putf>
   2a0dc:	4404      	add	r4, r0
                break;
   2a0de:	e73f      	b.n	29f60 <tfp_format+0x10>
            switch (ch) {
   2a0e0:	2864      	cmp	r0, #100	; 0x64
   2a0e2:	f47f af3d 	bne.w	29f60 <tfp_format+0x10>
                p.base = 10;
   2a0e6:	230a      	movs	r3, #10
   2a0e8:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                i2a(intarg(lng, 1, &va), &p);
   2a0ec:	466a      	mov	r2, sp
   2a0ee:	2101      	movs	r1, #1
   2a0f0:	4630      	mov	r0, r6
   2a0f2:	f7ff fefb 	bl	29eec <intarg>
   2a0f6:	aa08      	add	r2, sp, #32
   2a0f8:	f7ff fe12 	bl	29d20 <i2a>
                written += putchw(putp, &p);
   2a0fc:	a908      	add	r1, sp, #32
   2a0fe:	4628      	mov	r0, r5
   2a100:	f7ff fe66 	bl	29dd0 <putchw>
   2a104:	4404      	add	r4, r0
                break;
   2a106:	e72b      	b.n	29f60 <tfp_format+0x10>
            switch (ch) {
   2a108:	2875      	cmp	r0, #117	; 0x75
   2a10a:	d110      	bne.n	2a12e <tfp_format+0x1de>
                p.base = 10;
   2a10c:	230a      	movs	r3, #10
   2a10e:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a(intarg(lng, 0, &va), &p);
   2a112:	466a      	mov	r2, sp
   2a114:	2100      	movs	r1, #0
   2a116:	4630      	mov	r0, r6
   2a118:	f7ff fee8 	bl	29eec <intarg>
   2a11c:	aa08      	add	r2, sp, #32
   2a11e:	f7ff fd9f 	bl	29c60 <ui2a>
                written += putchw(putp, &p);
   2a122:	a908      	add	r1, sp, #32
   2a124:	4628      	mov	r0, r5
   2a126:	f7ff fe53 	bl	29dd0 <putchw>
   2a12a:	4404      	add	r4, r0
                break;
   2a12c:	e718      	b.n	29f60 <tfp_format+0x10>
            switch (ch) {
   2a12e:	2878      	cmp	r0, #120	; 0x78
   2a130:	f47f af16 	bne.w	29f60 <tfp_format+0x10>
                p.base = 16;
   2a134:	2310      	movs	r3, #16
   2a136:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                p.uc = (ch == 'X');
   2a13a:	2858      	cmp	r0, #88	; 0x58
   2a13c:	bf14      	ite	ne
   2a13e:	2300      	movne	r3, #0
   2a140:	2301      	moveq	r3, #1
   2a142:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
   2a146:	f363 0282 	bfi	r2, r3, #2, #1
   2a14a:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
                ui2a(intarg(lng, 0, &va), &p);
   2a14e:	466a      	mov	r2, sp
   2a150:	2100      	movs	r1, #0
   2a152:	4630      	mov	r0, r6
   2a154:	f7ff feca 	bl	29eec <intarg>
   2a158:	aa08      	add	r2, sp, #32
   2a15a:	f7ff fd81 	bl	29c60 <ui2a>
                written += putchw(putp, &p);
   2a15e:	a908      	add	r1, sp, #32
   2a160:	4628      	mov	r0, r5
   2a162:	f7ff fe35 	bl	29dd0 <putchw>
   2a166:	4404      	add	r4, r0
                break;
   2a168:	e6fa      	b.n	29f60 <tfp_format+0x10>
                p.base = 8;
   2a16a:	2308      	movs	r3, #8
   2a16c:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a(intarg(lng, 0, &va), &p);
   2a170:	466a      	mov	r2, sp
   2a172:	2100      	movs	r1, #0
   2a174:	4630      	mov	r0, r6
   2a176:	f7ff feb9 	bl	29eec <intarg>
   2a17a:	aa08      	add	r2, sp, #32
   2a17c:	f7ff fd70 	bl	29c60 <ui2a>
                written += putchw(putp, &p);
   2a180:	a908      	add	r1, sp, #32
   2a182:	4628      	mov	r0, r5
   2a184:	f7ff fe24 	bl	29dd0 <putchw>
   2a188:	4404      	add	r4, r0
                break;
   2a18a:	e6e9      	b.n	29f60 <tfp_format+0x10>
                p.bf = va_arg(va, char *);
   2a18c:	9b00      	ldr	r3, [sp, #0]
   2a18e:	1d1a      	adds	r2, r3, #4
   2a190:	9200      	str	r2, [sp, #0]
   2a192:	681b      	ldr	r3, [r3, #0]
   2a194:	9309      	str	r3, [sp, #36]	; 0x24
                written += putchw(putp, &p);
   2a196:	a908      	add	r1, sp, #32
   2a198:	4628      	mov	r0, r5
   2a19a:	f7ff fe19 	bl	29dd0 <putchw>
   2a19e:	4404      	add	r4, r0
                p.bf = bf;
   2a1a0:	ab02      	add	r3, sp, #8
   2a1a2:	9309      	str	r3, [sp, #36]	; 0x24
                break;
   2a1a4:	e6dc      	b.n	29f60 <tfp_format+0x10>
        }
    }
 abort:;
 
 return written;
}
   2a1a6:	4620      	mov	r0, r4
   2a1a8:	b00a      	add	sp, #40	; 0x28
   2a1aa:	bd70      	pop	{r4, r5, r6, pc}

0002a1ac <vfprintf>:

int vfprintf(FILE *f, const char *fmt, va_list va)
{
   2a1ac:	b508      	push	{r3, lr}
    return tfp_format(f, fmt, va);
   2a1ae:	f7ff fecf 	bl	29f50 <tfp_format>
}
   2a1b2:	bd08      	pop	{r3, pc}

0002a1b4 <fprintf>:

int fprintf(FILE *f, const char *fmt, ...)
{
   2a1b4:	b40e      	push	{r1, r2, r3}
   2a1b6:	b500      	push	{lr}
   2a1b8:	b082      	sub	sp, #8
   2a1ba:	aa03      	add	r2, sp, #12
   2a1bc:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list va;
    va_start(va, fmt);
   2a1c0:	9201      	str	r2, [sp, #4]
    int rv = vfprintf(f, fmt, va);
   2a1c2:	f7ff fff3 	bl	2a1ac <vfprintf>
    va_end(va);
    return rv;
}
   2a1c6:	b002      	add	sp, #8
   2a1c8:	f85d eb04 	ldr.w	lr, [sp], #4
   2a1cc:	b003      	add	sp, #12
   2a1ce:	4770      	bx	lr

0002a1d0 <printf>:

int printf(const char *fmt, ...)
{
   2a1d0:	b40f      	push	{r0, r1, r2, r3}
   2a1d2:	b500      	push	{lr}
   2a1d4:	b083      	sub	sp, #12
   2a1d6:	aa04      	add	r2, sp, #16
   2a1d8:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list va;
    va_start(va, fmt);
   2a1dc:	9201      	str	r2, [sp, #4]
    int rv = vfprintf(stdout, fmt, va);
   2a1de:	4b04      	ldr	r3, [pc, #16]	; (2a1f0 <printf+0x20>)
   2a1e0:	6818      	ldr	r0, [r3, #0]
   2a1e2:	f7ff ffe3 	bl	2a1ac <vfprintf>
    va_end(va);
    return rv;
}
   2a1e6:	b003      	add	sp, #12
   2a1e8:	f85d eb04 	ldr.w	lr, [sp], #4
   2a1ec:	b004      	add	sp, #16
   2a1ee:	4770      	bx	lr
   2a1f0:	0002bde4 	.word	0x0002bde4

0002a1f4 <vsnprintf>:

int vsnprintf(char *str, size_t size, const char *fmt, va_list va)
{
   2a1f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   2a1f6:	b085      	sub	sp, #20
   2a1f8:	4605      	mov	r5, r0
   2a1fa:	460c      	mov	r4, r1
   2a1fc:	4616      	mov	r6, r2
   2a1fe:	461f      	mov	r7, r3
    struct MemFile state;
    FILE *f = fmemopen_w(&state, str, size);
   2a200:	460a      	mov	r2, r1
   2a202:	4601      	mov	r1, r0
   2a204:	4668      	mov	r0, sp
   2a206:	f000 f861 	bl	2a2cc <fmemopen_w>
    tfp_format(f, fmt, va);
   2a20a:	463a      	mov	r2, r7
   2a20c:	4631      	mov	r1, r6
   2a20e:	f7ff fe9f 	bl	29f50 <tfp_format>
    if (size > 0) {
   2a212:	b12c      	cbz	r4, 2a220 <vsnprintf+0x2c>
        if (state.bytes_written < size) {
   2a214:	9b02      	ldr	r3, [sp, #8]
   2a216:	42a3      	cmp	r3, r4
   2a218:	d305      	bcc.n	2a226 <vsnprintf+0x32>
            *(state.buffer) = '\0';
        } else {
            str[size - 1] = '\0';
   2a21a:	3c01      	subs	r4, #1
   2a21c:	2300      	movs	r3, #0
   2a21e:	552b      	strb	r3, [r5, r4]
        }
    }
    return state.bytes_written;
}
   2a220:	9802      	ldr	r0, [sp, #8]
   2a222:	b005      	add	sp, #20
   2a224:	bdf0      	pop	{r4, r5, r6, r7, pc}
            *(state.buffer) = '\0';
   2a226:	9b01      	ldr	r3, [sp, #4]
   2a228:	2200      	movs	r2, #0
   2a22a:	701a      	strb	r2, [r3, #0]
   2a22c:	e7f8      	b.n	2a220 <vsnprintf+0x2c>
	...

0002a230 <vprintf>:

#include <stdio.h>
#include <stdarg.h>

int vprintf(const char *format, va_list ap)
{
   2a230:	b508      	push	{r3, lr}
	return vfprintf(stdout, format, ap);
   2a232:	460a      	mov	r2, r1
   2a234:	4601      	mov	r1, r0
   2a236:	4b02      	ldr	r3, [pc, #8]	; (2a240 <vprintf+0x10>)
   2a238:	6818      	ldr	r0, [r3, #0]
   2a23a:	f7ff ffb7 	bl	2a1ac <vfprintf>
}
   2a23e:	bd08      	pop	{r3, pc}
   2a240:	0002bde4 	.word	0x0002bde4

0002a244 <jrand48>:

#include <stdlib.h>
#include <stdint.h>

long jrand48(unsigned short xsubi[3])
{
   2a244:	e92d 08f0 	stmdb	sp!, {r4, r5, r6, r7, fp}
   2a248:	4601      	mov	r1, r0
	uint64_t x;

	/* The xsubi[] array is littleendian by spec */
	x = (uint64_t) (uint16_t) xsubi[0] +
   2a24a:	f8b0 b000 	ldrh.w	fp, [r0]
   2a24e:	f04f 0c00 	mov.w	ip, #0
	    ((uint64_t) (uint16_t) xsubi[1] << 16) +
   2a252:	8846      	ldrh	r6, [r0, #2]
   2a254:	0c35      	lsrs	r5, r6, #16
   2a256:	0434      	lsls	r4, r6, #16
	x = (uint64_t) (uint16_t) xsubi[0] +
   2a258:	eb1b 0204 	adds.w	r2, fp, r4
   2a25c:	eb4c 0305 	adc.w	r3, ip, r5
	    ((uint64_t) (uint16_t) xsubi[2] << 32);
   2a260:	2400      	movs	r4, #0
   2a262:	8885      	ldrh	r5, [r0, #4]
	x = (uint64_t) (uint16_t) xsubi[0] +
   2a264:	1916      	adds	r6, r2, r4
   2a266:	eb43 0705 	adc.w	r7, r3, r5

	x = (0x5deece66dULL * x) + 0xb;
   2a26a:	4c0b      	ldr	r4, [pc, #44]	; (2a298 <jrand48+0x54>)
   2a26c:	2005      	movs	r0, #5
   2a26e:	fb00 f006 	mul.w	r0, r0, r6
   2a272:	fb04 0007 	mla	r0, r4, r7, r0
   2a276:	fba6 2304 	umull	r2, r3, r6, r4
   2a27a:	4403      	add	r3, r0
   2a27c:	f112 040b 	adds.w	r4, r2, #11
   2a280:	f143 0500 	adc.w	r5, r3, #0

	xsubi[0] = (unsigned short)(uint16_t) x;
   2a284:	800c      	strh	r4, [r1, #0]
	xsubi[1] = (unsigned short)(uint16_t) (x >> 16);
   2a286:	0c20      	lsrs	r0, r4, #16
   2a288:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
   2a28c:	8048      	strh	r0, [r1, #2]
	xsubi[2] = (unsigned short)(uint16_t) (x >> 32);
   2a28e:	808d      	strh	r5, [r1, #4]

	return (long)(int32_t) (x >> 16);
}
   2a290:	e8bd 08f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp}
   2a294:	4770      	bx	lr
   2a296:	bf00      	nop
   2a298:	deece66d 	.word	0xdeece66d

0002a29c <memfile_write>:
#include <stdio.h>

size_t memfile_write(FILE *instance, const char *bp, size_t n)
{
   2a29c:	b430      	push	{r4, r5}
    struct MemFile *f = (struct MemFile*)instance;
    size_t i = 0;
   2a29e:	2500      	movs	r5, #0
    
    while (n--)
   2a2a0:	e000      	b.n	2a2a4 <memfile_write+0x8>
    {
        f->bytes_written++;
        if (f->bytes_written <= f->size)
        {
            *f->buffer++ = *bp++;
   2a2a2:	4622      	mov	r2, r4
    while (n--)
   2a2a4:	1e54      	subs	r4, r2, #1
   2a2a6:	b16a      	cbz	r2, 2a2c4 <memfile_write+0x28>
        f->bytes_written++;
   2a2a8:	6883      	ldr	r3, [r0, #8]
   2a2aa:	3301      	adds	r3, #1
   2a2ac:	6083      	str	r3, [r0, #8]
        if (f->bytes_written <= f->size)
   2a2ae:	68c2      	ldr	r2, [r0, #12]
   2a2b0:	4293      	cmp	r3, r2
   2a2b2:	d8f6      	bhi.n	2a2a2 <memfile_write+0x6>
            *f->buffer++ = *bp++;
   2a2b4:	6843      	ldr	r3, [r0, #4]
   2a2b6:	1c5a      	adds	r2, r3, #1
   2a2b8:	6042      	str	r2, [r0, #4]
   2a2ba:	780a      	ldrb	r2, [r1, #0]
   2a2bc:	701a      	strb	r2, [r3, #0]
            i++;
   2a2be:	3501      	adds	r5, #1
            *f->buffer++ = *bp++;
   2a2c0:	3101      	adds	r1, #1
   2a2c2:	e7ee      	b.n	2a2a2 <memfile_write+0x6>
        }
    }
    
    return i;
}
   2a2c4:	4628      	mov	r0, r5
   2a2c6:	bc30      	pop	{r4, r5}
   2a2c8:	4770      	bx	lr
	...

0002a2cc <fmemopen_w>:
    &memfile_write,
    NULL
};

FILE *fmemopen_w(struct MemFile* storage, char *buffer, size_t size)
{
   2a2cc:	b410      	push	{r4}
    storage->file.vmt = &MemFile_methods;
   2a2ce:	4c04      	ldr	r4, [pc, #16]	; (2a2e0 <fmemopen_w+0x14>)
   2a2d0:	6004      	str	r4, [r0, #0]
    storage->buffer = buffer;
   2a2d2:	6041      	str	r1, [r0, #4]
    storage->bytes_written = 0;
   2a2d4:	2100      	movs	r1, #0
   2a2d6:	6081      	str	r1, [r0, #8]
    storage->size = size;
   2a2d8:	60c2      	str	r2, [r0, #12]
    return (FILE*)storage;
}
   2a2da:	bc10      	pop	{r4}
   2a2dc:	4770      	bx	lr
   2a2de:	bf00      	nop
   2a2e0:	0002bde8 	.word	0x0002bde8

0002a2e4 <uart_hal_blocking_tx>:
    hal_uart_start_rx(uart_hal_dev_get_id(dev));
}

static void
uart_hal_blocking_tx(struct uart_dev *dev, uint8_t byte)
{
   2a2e4:	b508      	push	{r3, lr}
    assert(dev->ud_priv);
   2a2e6:	6b80      	ldr	r0, [r0, #56]	; 0x38
   2a2e8:	b118      	cbz	r0, 2a2f2 <uart_hal_blocking_tx+0xe>

    hal_uart_blocking_tx(uart_hal_dev_get_id(dev), byte);
   2a2ea:	3801      	subs	r0, #1
   2a2ec:	f000 fa2a 	bl	2a744 <hal_uart_blocking_tx>
}
   2a2f0:	bd08      	pop	{r3, pc}
    assert(dev->ud_priv);
   2a2f2:	f7e1 ff79 	bl	c1e8 <hal_debugger_connected>
   2a2f6:	b100      	cbz	r0, 2a2fa <uart_hal_blocking_tx+0x16>
   2a2f8:	be01      	bkpt	0x0001
   2a2fa:	2300      	movs	r3, #0
   2a2fc:	461a      	mov	r2, r3
   2a2fe:	4619      	mov	r1, r3
   2a300:	4618      	mov	r0, r3
   2a302:	f7e2 f9ab 	bl	c65c <__assert_func>

0002a306 <uart_hal_start_rx>:
{
   2a306:	b508      	push	{r3, lr}
    assert(dev->ud_priv);
   2a308:	6b80      	ldr	r0, [r0, #56]	; 0x38
   2a30a:	b118      	cbz	r0, 2a314 <uart_hal_start_rx+0xe>
    hal_uart_start_rx(uart_hal_dev_get_id(dev));
   2a30c:	3801      	subs	r0, #1
   2a30e:	f000 f9f3 	bl	2a6f8 <hal_uart_start_rx>
}
   2a312:	bd08      	pop	{r3, pc}
    assert(dev->ud_priv);
   2a314:	f7e1 ff68 	bl	c1e8 <hal_debugger_connected>
   2a318:	b100      	cbz	r0, 2a31c <uart_hal_start_rx+0x16>
   2a31a:	be01      	bkpt	0x0001
   2a31c:	2300      	movs	r3, #0
   2a31e:	461a      	mov	r2, r3
   2a320:	4619      	mov	r1, r3
   2a322:	4618      	mov	r0, r3
   2a324:	f7e2 f99a 	bl	c65c <__assert_func>

0002a328 <uart_hal_start_tx>:
{
   2a328:	b508      	push	{r3, lr}
    assert(dev->ud_priv);
   2a32a:	6b80      	ldr	r0, [r0, #56]	; 0x38
   2a32c:	b118      	cbz	r0, 2a336 <uart_hal_start_tx+0xe>
    hal_uart_start_tx(uart_hal_dev_get_id(dev));
   2a32e:	3801      	subs	r0, #1
   2a330:	f000 f9b2 	bl	2a698 <hal_uart_start_tx>
}
   2a334:	bd08      	pop	{r3, pc}
    assert(dev->ud_priv);
   2a336:	f7e1 ff57 	bl	c1e8 <hal_debugger_connected>
   2a33a:	b100      	cbz	r0, 2a33e <uart_hal_start_tx+0x16>
   2a33c:	be01      	bkpt	0x0001
   2a33e:	2300      	movs	r3, #0
   2a340:	461a      	mov	r2, r3
   2a342:	4619      	mov	r1, r3
   2a344:	4618      	mov	r0, r3
   2a346:	f7e2 f989 	bl	c65c <__assert_func>

0002a34a <uart_hal_resume>:
    return OS_OK;
}

static int
uart_hal_resume(struct os_dev *odev)
{
   2a34a:	b530      	push	{r4, r5, lr}
   2a34c:	b083      	sub	sp, #12
    return (intptr_t)(dev->ud_priv) - 1;
   2a34e:	6b84      	ldr	r4, [r0, #56]	; 0x38
    struct uart_dev *dev = (struct uart_dev *)odev;
    struct uart_conf_port *ucp = &dev->ud_conf_port;
    int rc;

    rc = hal_uart_config(uart_hal_dev_get_id(dev), ucp->uc_speed,
   2a350:	6b01      	ldr	r1, [r0, #48]	; 0x30
   2a352:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
   2a356:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
                         ucp->uc_databits, ucp->uc_stopbits,
                         (enum hal_uart_parity)ucp->uc_parity,
   2a35a:	f890 5036 	ldrb.w	r5, [r0, #54]	; 0x36
                         (enum hal_uart_flow_ctl)ucp->uc_flow_ctl);
   2a35e:	f890 0037 	ldrb.w	r0, [r0, #55]	; 0x37
    rc = hal_uart_config(uart_hal_dev_get_id(dev), ucp->uc_speed,
   2a362:	9001      	str	r0, [sp, #4]
   2a364:	9500      	str	r5, [sp, #0]
   2a366:	1e60      	subs	r0, r4, #1
   2a368:	f000 fa4c 	bl	2a804 <hal_uart_config>
    if (rc) {
   2a36c:	4603      	mov	r3, r0
   2a36e:	b910      	cbnz	r0, 2a376 <uart_hal_resume+0x2c>
        return OS_EINVAL;
    }

    return OS_OK;
}
   2a370:	4618      	mov	r0, r3
   2a372:	b003      	add	sp, #12
   2a374:	bd30      	pop	{r4, r5, pc}
        return OS_EINVAL;
   2a376:	2302      	movs	r3, #2
   2a378:	e7fa      	b.n	2a370 <uart_hal_resume+0x26>

0002a37a <uart_hal_suspend>:
{
   2a37a:	b570      	push	{r4, r5, r6, lr}
   2a37c:	4606      	mov	r6, r0
   2a37e:	460c      	mov	r4, r1
   2a380:	4615      	mov	r5, r2
    if (OS_TIME_TICK_GT(suspend_at, os_time_get()) || !force) {
   2a382:	f7e3 f977 	bl	d674 <os_time_get>
   2a386:	1a20      	subs	r0, r4, r0
   2a388:	2800      	cmp	r0, #0
   2a38a:	dc08      	bgt.n	2a39e <uart_hal_suspend+0x24>
   2a38c:	b155      	cbz	r5, 2a3a4 <uart_hal_suspend+0x2a>
    return (intptr_t)(dev->ud_priv) - 1;
   2a38e:	6bb0      	ldr	r0, [r6, #56]	; 0x38
    rc = hal_uart_close(uart_hal_dev_get_id(dev));
   2a390:	3801      	subs	r0, #1
   2a392:	f000 fab7 	bl	2a904 <hal_uart_close>
    if (rc) {
   2a396:	4603      	mov	r3, r0
   2a398:	b110      	cbz	r0, 2a3a0 <uart_hal_suspend+0x26>
        return OS_EINVAL;
   2a39a:	2302      	movs	r3, #2
   2a39c:	e000      	b.n	2a3a0 <uart_hal_suspend+0x26>
        return OS_EINVAL;
   2a39e:	2302      	movs	r3, #2
}
   2a3a0:	4618      	mov	r0, r3
   2a3a2:	bd70      	pop	{r4, r5, r6, pc}
        return OS_EINVAL;
   2a3a4:	2302      	movs	r3, #2
   2a3a6:	e7fb      	b.n	2a3a0 <uart_hal_suspend+0x26>

0002a3a8 <uart_hal_close>:
{
   2a3a8:	b508      	push	{r3, lr}
    return (intptr_t)(dev->ud_priv) - 1;
   2a3aa:	6b80      	ldr	r0, [r0, #56]	; 0x38
    rc = hal_uart_close(uart_hal_dev_get_id(dev));
   2a3ac:	3801      	subs	r0, #1
   2a3ae:	f000 faa9 	bl	2a904 <hal_uart_close>
    if (rc) {
   2a3b2:	4603      	mov	r3, r0
   2a3b4:	b908      	cbnz	r0, 2a3ba <uart_hal_close+0x12>
}
   2a3b6:	4618      	mov	r0, r3
   2a3b8:	bd08      	pop	{r3, pc}
        return OS_EINVAL;
   2a3ba:	2302      	movs	r3, #2
   2a3bc:	e7fb      	b.n	2a3b6 <uart_hal_close+0xe>

0002a3be <uart_hal_open>:
{
   2a3be:	b530      	push	{r4, r5, lr}
   2a3c0:	b083      	sub	sp, #12
   2a3c2:	4605      	mov	r5, r0
    assert(dev->ud_priv);
   2a3c4:	6b80      	ldr	r0, [r0, #56]	; 0x38
   2a3c6:	2800      	cmp	r0, #0
   2a3c8:	d02c      	beq.n	2a424 <uart_hal_open+0x66>
   2a3ca:	4614      	mov	r4, r2
    if (!uc) {
   2a3cc:	2a00      	cmp	r2, #0
   2a3ce:	d033      	beq.n	2a438 <uart_hal_open+0x7a>
    if (odev->od_flags & OS_DEV_F_STATUS_OPEN) {
   2a3d0:	7eeb      	ldrb	r3, [r5, #27]
   2a3d2:	f013 0f02 	tst.w	r3, #2
   2a3d6:	d131      	bne.n	2a43c <uart_hal_open+0x7e>
    dev->ud_conf_port.uc_databits = uc->uc_databits;
   2a3d8:	7913      	ldrb	r3, [r2, #4]
   2a3da:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
    dev->ud_conf_port.uc_flow_ctl = uc->uc_flow_ctl;
   2a3de:	79d3      	ldrb	r3, [r2, #7]
   2a3e0:	f885 3037 	strb.w	r3, [r5, #55]	; 0x37
    dev->ud_conf_port.uc_parity = uc->uc_parity;
   2a3e4:	7993      	ldrb	r3, [r2, #6]
   2a3e6:	f885 3036 	strb.w	r3, [r5, #54]	; 0x36
    dev->ud_conf_port.uc_speed = uc->uc_speed;
   2a3ea:	6813      	ldr	r3, [r2, #0]
   2a3ec:	632b      	str	r3, [r5, #48]	; 0x30
    dev->ud_conf_port.uc_stopbits = uc->uc_stopbits;
   2a3ee:	7953      	ldrb	r3, [r2, #5]
   2a3f0:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
    rc = hal_uart_init_cbs(uart_hal_dev_get_id(dev), uc->uc_tx_char, uc->uc_tx_done,
   2a3f4:	6953      	ldr	r3, [r2, #20]
   2a3f6:	9300      	str	r3, [sp, #0]
   2a3f8:	68d3      	ldr	r3, [r2, #12]
   2a3fa:	6912      	ldr	r2, [r2, #16]
   2a3fc:	68a1      	ldr	r1, [r4, #8]
   2a3fe:	3801      	subs	r0, #1
   2a400:	f000 f92c 	bl	2a65c <hal_uart_init_cbs>
    if (rc) {
   2a404:	b9f0      	cbnz	r0, 2a444 <uart_hal_open+0x86>
    return (intptr_t)(dev->ud_priv) - 1;
   2a406:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    rc = hal_uart_config(uart_hal_dev_get_id(dev), uc->uc_speed, uc->uc_databits,
   2a408:	6821      	ldr	r1, [r4, #0]
   2a40a:	7922      	ldrb	r2, [r4, #4]
   2a40c:	7963      	ldrb	r3, [r4, #5]
      uc->uc_stopbits, (enum hal_uart_parity)uc->uc_parity, (enum hal_uart_flow_ctl)uc->uc_flow_ctl);
   2a40e:	79a5      	ldrb	r5, [r4, #6]
   2a410:	79e4      	ldrb	r4, [r4, #7]
    rc = hal_uart_config(uart_hal_dev_get_id(dev), uc->uc_speed, uc->uc_databits,
   2a412:	9401      	str	r4, [sp, #4]
   2a414:	9500      	str	r5, [sp, #0]
   2a416:	3801      	subs	r0, #1
   2a418:	f000 f9f4 	bl	2a804 <hal_uart_config>
    if (rc) {
   2a41c:	4603      	mov	r3, r0
   2a41e:	b170      	cbz	r0, 2a43e <uart_hal_open+0x80>
        return OS_EINVAL;
   2a420:	2302      	movs	r3, #2
   2a422:	e00c      	b.n	2a43e <uart_hal_open+0x80>
    assert(dev->ud_priv);
   2a424:	f7e1 fee0 	bl	c1e8 <hal_debugger_connected>
   2a428:	b100      	cbz	r0, 2a42c <uart_hal_open+0x6e>
   2a42a:	be01      	bkpt	0x0001
   2a42c:	2300      	movs	r3, #0
   2a42e:	461a      	mov	r2, r3
   2a430:	4619      	mov	r1, r3
   2a432:	4618      	mov	r0, r3
   2a434:	f7e2 f912 	bl	c65c <__assert_func>
        return OS_EINVAL;
   2a438:	2302      	movs	r3, #2
   2a43a:	e000      	b.n	2a43e <uart_hal_open+0x80>
        return OS_EBUSY;
   2a43c:	230b      	movs	r3, #11
}
   2a43e:	4618      	mov	r0, r3
   2a440:	b003      	add	sp, #12
   2a442:	bd30      	pop	{r4, r5, pc}
        return OS_EINVAL;
   2a444:	2302      	movs	r3, #2
   2a446:	e7fa      	b.n	2a43e <uart_hal_open+0x80>

0002a448 <uart_hal_init>:
/*
 * Arg points to BSP specific UART configuration.
 */
int
uart_hal_init(struct os_dev *odev, void *arg)
{
   2a448:	b570      	push	{r4, r5, r6, lr}
   2a44a:	4604      	mov	r4, r0
   2a44c:	460e      	mov	r6, r1
    struct uart_dev *dev;
    char ch;

    dev = (struct uart_dev *)odev;

    ch = odev->od_name[strlen(odev->od_name) - 1];
   2a44e:	69c5      	ldr	r5, [r0, #28]
   2a450:	4628      	mov	r0, r5
   2a452:	f7e4 f85f 	bl	e514 <strlen>
   2a456:	3801      	subs	r0, #1
   2a458:	5c28      	ldrb	r0, [r5, r0]
    if (!isdigit((int) ch)) {
   2a45a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   2a45e:	2b09      	cmp	r3, #9
   2a460:	d816      	bhi.n	2a490 <uart_hal_init+0x48>
    dev->ud_priv = (void *)((intptr_t)(id + 1));
   2a462:	f1a0 032f 	sub.w	r3, r0, #47	; 0x2f
   2a466:	63a3      	str	r3, [r4, #56]	; 0x38
        return OS_EINVAL;
    }
    uart_hal_dev_set_id(dev, ch - '0');

    OS_DEV_SETHANDLERS(odev, uart_hal_open, uart_hal_close);
   2a468:	4b0a      	ldr	r3, [pc, #40]	; (2a494 <uart_hal_init+0x4c>)
   2a46a:	6023      	str	r3, [r4, #0]
   2a46c:	4b0a      	ldr	r3, [pc, #40]	; (2a498 <uart_hal_init+0x50>)
   2a46e:	60e3      	str	r3, [r4, #12]
    odev->od_handlers.od_suspend = uart_hal_suspend;
   2a470:	4b0a      	ldr	r3, [pc, #40]	; (2a49c <uart_hal_init+0x54>)
   2a472:	6063      	str	r3, [r4, #4]
    odev->od_handlers.od_resume = uart_hal_resume;
   2a474:	4b0a      	ldr	r3, [pc, #40]	; (2a4a0 <uart_hal_init+0x58>)
   2a476:	60a3      	str	r3, [r4, #8]

    dev->ud_funcs.uf_start_tx = uart_hal_start_tx;
   2a478:	4b0a      	ldr	r3, [pc, #40]	; (2a4a4 <uart_hal_init+0x5c>)
   2a47a:	6263      	str	r3, [r4, #36]	; 0x24
    dev->ud_funcs.uf_start_rx = uart_hal_start_rx;
   2a47c:	4b0a      	ldr	r3, [pc, #40]	; (2a4a8 <uart_hal_init+0x60>)
   2a47e:	62a3      	str	r3, [r4, #40]	; 0x28
    dev->ud_funcs.uf_blocking_tx = uart_hal_blocking_tx;
   2a480:	4b0a      	ldr	r3, [pc, #40]	; (2a4ac <uart_hal_init+0x64>)
   2a482:	62e3      	str	r3, [r4, #44]	; 0x2c

    hal_uart_init(uart_hal_dev_get_id(dev), arg);
   2a484:	4631      	mov	r1, r6
   2a486:	3830      	subs	r0, #48	; 0x30
   2a488:	f000 f98e 	bl	2a7a8 <hal_uart_init>

    return OS_OK;
   2a48c:	2000      	movs	r0, #0
}
   2a48e:	bd70      	pop	{r4, r5, r6, pc}
        return OS_EINVAL;
   2a490:	2002      	movs	r0, #2
   2a492:	e7fc      	b.n	2a48e <uart_hal_init+0x46>
   2a494:	0002a3bf 	.word	0x0002a3bf
   2a498:	0002a3a9 	.word	0x0002a3a9
   2a49c:	0002a37b 	.word	0x0002a37b
   2a4a0:	0002a34b 	.word	0x0002a34b
   2a4a4:	0002a329 	.word	0x0002a329
   2a4a8:	0002a307 	.word	0x0002a307
   2a4ac:	0002a2e5 	.word	0x0002a2e5

0002a4b0 <hal_uart_tx_fill_buf>:
    return 0;
}

static int
hal_uart_tx_fill_buf(struct hal_uart *u)
{
   2a4b0:	b538      	push	{r3, r4, r5, lr}
   2a4b2:	4605      	mov	r5, r0
    int data;
    int i;

    for (i = 0; i < sizeof(u->u_tx_buf); i++) {
   2a4b4:	2400      	movs	r4, #0
   2a4b6:	2c07      	cmp	r4, #7
   2a4b8:	d808      	bhi.n	2a4cc <hal_uart_tx_fill_buf+0x1c>
        data = u->u_tx_func(u->u_func_arg);
   2a4ba:	692b      	ldr	r3, [r5, #16]
   2a4bc:	69a8      	ldr	r0, [r5, #24]
   2a4be:	4798      	blx	r3
        if (data < 0) {
   2a4c0:	2800      	cmp	r0, #0
   2a4c2:	db03      	blt.n	2a4cc <hal_uart_tx_fill_buf+0x1c>
            break;
        }
        u->u_tx_buf[i] = data;
   2a4c4:	192b      	adds	r3, r5, r4
   2a4c6:	7098      	strb	r0, [r3, #2]
    for (i = 0; i < sizeof(u->u_tx_buf); i++) {
   2a4c8:	3401      	adds	r4, #1
   2a4ca:	e7f4      	b.n	2a4b6 <hal_uart_tx_fill_buf+0x6>
    }
    return i;
}
   2a4cc:	4620      	mov	r0, r4
   2a4ce:	bd38      	pop	{r3, r4, r5, pc}

0002a4d0 <uart_irq_handler>:
    nrf_uart->TASKS_STOPTX = 1;
}

static void
uart_irq_handler(NRF_UARTE_Type *nrf_uart, struct hal_uart *u)
{
   2a4d0:	b538      	push	{r3, r4, r5, lr}
   2a4d2:	4604      	mov	r4, r0
   2a4d4:	460d      	mov	r5, r1
    int rc;

    os_trace_isr_enter();

    if (nrf_uart->EVENTS_ENDTX) {
   2a4d6:	f8d0 3120 	ldr.w	r3, [r0, #288]	; 0x120
   2a4da:	b973      	cbnz	r3, 2a4fa <uart_irq_handler+0x2a>
            nrf_uart->INTENCLR = UARTE_INT_ENDTX;
            nrf_uart->TASKS_STOPTX = 1;
            u->u_tx_started = 0;
        }
    }
    if (nrf_uart->EVENTS_ENDRX) {
   2a4dc:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   2a4e0:	b153      	cbz	r3, 2a4f8 <uart_irq_handler+0x28>
        nrf_uart->EVENTS_ENDRX = 0;
   2a4e2:	2300      	movs	r3, #0
   2a4e4:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
        rc = u->u_rx_func(u->u_func_arg, u->u_rx_buf);
   2a4e8:	68eb      	ldr	r3, [r5, #12]
   2a4ea:	7869      	ldrb	r1, [r5, #1]
   2a4ec:	69a8      	ldr	r0, [r5, #24]
   2a4ee:	4798      	blx	r3
        if (rc < 0) {
   2a4f0:	2800      	cmp	r0, #0
   2a4f2:	db21      	blt.n	2a538 <uart_irq_handler+0x68>
            u->u_rx_stall = 1;
        } else {
            nrf_uart->TASKS_STARTRX = 1;
   2a4f4:	2301      	movs	r3, #1
   2a4f6:	6023      	str	r3, [r4, #0]
        }
    }
    os_trace_isr_exit();
}
   2a4f8:	bd38      	pop	{r3, r4, r5, pc}
        nrf_uart->EVENTS_ENDTX = 0;
   2a4fa:	2300      	movs	r3, #0
   2a4fc:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
        rc = hal_uart_tx_fill_buf(u);
   2a500:	4608      	mov	r0, r1
   2a502:	f7ff ffd5 	bl	2a4b0 <hal_uart_tx_fill_buf>
        if (rc > 0) {
   2a506:	2800      	cmp	r0, #0
   2a508:	dd07      	ble.n	2a51a <uart_irq_handler+0x4a>
            nrf_uart->TXD.PTR = (uint32_t)&u->u_tx_buf;
   2a50a:	1cab      	adds	r3, r5, #2
   2a50c:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
            nrf_uart->TXD.MAXCNT = rc;
   2a510:	f8c4 0548 	str.w	r0, [r4, #1352]	; 0x548
            nrf_uart->TASKS_STARTTX = 1;
   2a514:	2301      	movs	r3, #1
   2a516:	60a3      	str	r3, [r4, #8]
   2a518:	e7e0      	b.n	2a4dc <uart_irq_handler+0xc>
            if (u->u_tx_done) {
   2a51a:	696b      	ldr	r3, [r5, #20]
   2a51c:	b10b      	cbz	r3, 2a522 <uart_irq_handler+0x52>
                u->u_tx_done(u->u_func_arg);
   2a51e:	69a8      	ldr	r0, [r5, #24]
   2a520:	4798      	blx	r3
            nrf_uart->INTENCLR = UARTE_INT_ENDTX;
   2a522:	f44f 7380 	mov.w	r3, #256	; 0x100
   2a526:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
            nrf_uart->TASKS_STOPTX = 1;
   2a52a:	2301      	movs	r3, #1
   2a52c:	60e3      	str	r3, [r4, #12]
            u->u_tx_started = 0;
   2a52e:	782b      	ldrb	r3, [r5, #0]
   2a530:	f36f 0382 	bfc	r3, #2, #1
   2a534:	702b      	strb	r3, [r5, #0]
   2a536:	e7d1      	b.n	2a4dc <uart_irq_handler+0xc>
            u->u_rx_stall = 1;
   2a538:	782b      	ldrb	r3, [r5, #0]
   2a53a:	f043 0302 	orr.w	r3, r3, #2
   2a53e:	702b      	strb	r3, [r5, #0]
   2a540:	e7da      	b.n	2a4f8 <uart_irq_handler+0x28>
	...

0002a544 <uart0_irq_handler>:

static void
uart0_irq_handler(void)
{
   2a544:	b508      	push	{r3, lr}
    uart_irq_handler(NRF_UARTE0, &uart0);
   2a546:	4902      	ldr	r1, [pc, #8]	; (2a550 <uart0_irq_handler+0xc>)
   2a548:	4802      	ldr	r0, [pc, #8]	; (2a554 <uart0_irq_handler+0x10>)
   2a54a:	f7ff ffc1 	bl	2a4d0 <uart_irq_handler>
}
   2a54e:	bd08      	pop	{r3, pc}
   2a550:	20003a6c 	.word	0x20003a6c
   2a554:	40002000 	.word	0x40002000

0002a558 <uart1_irq_handler>:

#if defined(NRF52840_XXAA)
static void
uart1_irq_handler(void)
{
   2a558:	b508      	push	{r3, lr}
    uart_irq_handler(NRF_UARTE1, &uart1);
   2a55a:	4902      	ldr	r1, [pc, #8]	; (2a564 <uart1_irq_handler+0xc>)
   2a55c:	4802      	ldr	r0, [pc, #8]	; (2a568 <uart1_irq_handler+0x10>)
   2a55e:	f7ff ffb7 	bl	2a4d0 <uart_irq_handler>
}
   2a562:	bd08      	pop	{r3, pc}
   2a564:	20003a88 	.word	0x20003a88
   2a568:	40028000 	.word	0x40028000

0002a56c <hal_uart_baudrate>:
#endif

static uint32_t
hal_uart_baudrate(int baudrate)
{
    switch (baudrate) {
   2a56c:	f64d 23c0 	movw	r3, #56000	; 0xdac0
   2a570:	4298      	cmp	r0, r3
   2a572:	d04f      	beq.n	2a614 <hal_uart_baudrate+0xa8>
   2a574:	dc20      	bgt.n	2a5b8 <hal_uart_baudrate+0x4c>
   2a576:	f5b0 5f16 	cmp.w	r0, #9600	; 0x2580
   2a57a:	d045      	beq.n	2a608 <hal_uart_baudrate+0x9c>
   2a57c:	dd0c      	ble.n	2a598 <hal_uart_baudrate+0x2c>
   2a57e:	f5b0 4f96 	cmp.w	r0, #19200	; 0x4b00
   2a582:	d043      	beq.n	2a60c <hal_uart_baudrate+0xa0>
   2a584:	dd13      	ble.n	2a5ae <hal_uart_baudrate+0x42>
   2a586:	f5b0 4fe1 	cmp.w	r0, #28800	; 0x7080
   2a58a:	d041      	beq.n	2a610 <hal_uart_baudrate+0xa4>
   2a58c:	f5b0 4f16 	cmp.w	r0, #38400	; 0x9600
   2a590:	d10b      	bne.n	2a5aa <hal_uart_baudrate+0x3e>
    case 19200:
        return UARTE_BAUDRATE_BAUDRATE_Baud19200;
    case 28800:
        return UARTE_BAUDRATE_BAUDRATE_Baud28800;
    case 38400:
        return UARTE_BAUDRATE_BAUDRATE_Baud38400;
   2a592:	f44f 001d 	mov.w	r0, #10289152	; 0x9d0000
   2a596:	4770      	bx	lr
    switch (baudrate) {
   2a598:	f5b0 6f16 	cmp.w	r0, #2400	; 0x960
   2a59c:	d04b      	beq.n	2a636 <hal_uart_baudrate+0xca>
   2a59e:	f5b0 5f96 	cmp.w	r0, #4800	; 0x12c0
   2a5a2:	d02f      	beq.n	2a604 <hal_uart_baudrate+0x98>
   2a5a4:	f5b0 6f96 	cmp.w	r0, #1200	; 0x4b0
   2a5a8:	d029      	beq.n	2a5fe <hal_uart_baudrate+0x92>
    case 921600:
        return UARTE_BAUDRATE_BAUDRATE_Baud921600;
    case 1000000:
        return UARTE_BAUDRATE_BAUDRATE_Baud1M;
    default:
        return 0;
   2a5aa:	2000      	movs	r0, #0
   2a5ac:	4770      	bx	lr
    switch (baudrate) {
   2a5ae:	f5b0 5f61 	cmp.w	r0, #14400	; 0x3840
   2a5b2:	d1fa      	bne.n	2a5aa <hal_uart_baudrate+0x3e>
        return UARTE_BAUDRATE_BAUDRATE_Baud14400;
   2a5b4:	4821      	ldr	r0, [pc, #132]	; (2a63c <hal_uart_baudrate+0xd0>)
   2a5b6:	4770      	bx	lr
    switch (baudrate) {
   2a5b8:	f5b0 3f61 	cmp.w	r0, #230400	; 0x38400
   2a5bc:	d032      	beq.n	2a624 <hal_uart_baudrate+0xb8>
   2a5be:	dd0c      	ble.n	2a5da <hal_uart_baudrate+0x6e>
   2a5c0:	f5b0 2fe1 	cmp.w	r0, #460800	; 0x70800
   2a5c4:	d031      	beq.n	2a62a <hal_uart_baudrate+0xbe>
   2a5c6:	dd14      	ble.n	2a5f2 <hal_uart_baudrate+0x86>
   2a5c8:	f5b0 2f61 	cmp.w	r0, #921600	; 0xe1000
   2a5cc:	d030      	beq.n	2a630 <hal_uart_baudrate+0xc4>
   2a5ce:	4b1c      	ldr	r3, [pc, #112]	; (2a640 <hal_uart_baudrate+0xd4>)
   2a5d0:	4298      	cmp	r0, r3
   2a5d2:	d1ea      	bne.n	2a5aa <hal_uart_baudrate+0x3e>
        return UARTE_BAUDRATE_BAUDRATE_Baud1M;
   2a5d4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   2a5d8:	4770      	bx	lr
    switch (baudrate) {
   2a5da:	f5b0 3f96 	cmp.w	r0, #76800	; 0x12c00
   2a5de:	d01c      	beq.n	2a61a <hal_uart_baudrate+0xae>
   2a5e0:	f5b0 3fe1 	cmp.w	r0, #115200	; 0x1c200
   2a5e4:	d01b      	beq.n	2a61e <hal_uart_baudrate+0xb2>
   2a5e6:	f5b0 4f61 	cmp.w	r0, #57600	; 0xe100
   2a5ea:	d1de      	bne.n	2a5aa <hal_uart_baudrate+0x3e>
        return UARTE_BAUDRATE_BAUDRATE_Baud57600;
   2a5ec:	f44f 006b 	mov.w	r0, #15400960	; 0xeb0000
   2a5f0:	4770      	bx	lr
    switch (baudrate) {
   2a5f2:	4b14      	ldr	r3, [pc, #80]	; (2a644 <hal_uart_baudrate+0xd8>)
   2a5f4:	4298      	cmp	r0, r3
   2a5f6:	d1d8      	bne.n	2a5aa <hal_uart_baudrate+0x3e>
        return UARTE_BAUDRATE_BAUDRATE_Baud250000;
   2a5f8:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
   2a5fc:	4770      	bx	lr
        return UARTE_BAUDRATE_BAUDRATE_Baud1200;
   2a5fe:	f44f 209e 	mov.w	r0, #323584	; 0x4f000
   2a602:	4770      	bx	lr
        return UARTE_BAUDRATE_BAUDRATE_Baud4800;
   2a604:	4810      	ldr	r0, [pc, #64]	; (2a648 <hal_uart_baudrate+0xdc>)
   2a606:	4770      	bx	lr
        return UARTE_BAUDRATE_BAUDRATE_Baud9600;
   2a608:	4810      	ldr	r0, [pc, #64]	; (2a64c <hal_uart_baudrate+0xe0>)
   2a60a:	4770      	bx	lr
        return UARTE_BAUDRATE_BAUDRATE_Baud19200;
   2a60c:	4810      	ldr	r0, [pc, #64]	; (2a650 <hal_uart_baudrate+0xe4>)
   2a60e:	4770      	bx	lr
        return UARTE_BAUDRATE_BAUDRATE_Baud28800;
   2a610:	4810      	ldr	r0, [pc, #64]	; (2a654 <hal_uart_baudrate+0xe8>)
   2a612:	4770      	bx	lr
        return UARTE_BAUDRATE_BAUDRATE_Baud56000;
   2a614:	f44f 0065 	mov.w	r0, #15007744	; 0xe50000
   2a618:	4770      	bx	lr
        return UARTE_BAUDRATE_BAUDRATE_Baud76800;
   2a61a:	480f      	ldr	r0, [pc, #60]	; (2a658 <hal_uart_baudrate+0xec>)
   2a61c:	4770      	bx	lr
        return UARTE_BAUDRATE_BAUDRATE_Baud115200;
   2a61e:	f04f 70eb 	mov.w	r0, #30801920	; 0x1d60000
   2a622:	4770      	bx	lr
        return UARTE_BAUDRATE_BAUDRATE_Baud230400;
   2a624:	f04f 706c 	mov.w	r0, #61865984	; 0x3b00000
   2a628:	4770      	bx	lr
        return UARTE_BAUDRATE_BAUDRATE_Baud460800;
   2a62a:	f04f 60e8 	mov.w	r0, #121634816	; 0x7400000
   2a62e:	4770      	bx	lr
        return UARTE_BAUDRATE_BAUDRATE_Baud921600;
   2a630:	f04f 6070 	mov.w	r0, #251658240	; 0xf000000
   2a634:	4770      	bx	lr
        return UARTE_BAUDRATE_BAUDRATE_Baud2400;
   2a636:	f44f 201d 	mov.w	r0, #643072	; 0x9d000
    }
}
   2a63a:	4770      	bx	lr
   2a63c:	003af000 	.word	0x003af000
   2a640:	000f4240 	.word	0x000f4240
   2a644:	0003d090 	.word	0x0003d090
   2a648:	0013b000 	.word	0x0013b000
   2a64c:	00275000 	.word	0x00275000
   2a650:	004ea000 	.word	0x004ea000
   2a654:	0075c000 	.word	0x0075c000
   2a658:	013a9000 	.word	0x013a9000

0002a65c <hal_uart_init_cbs>:
{
   2a65c:	b410      	push	{r4}
    if (port == 0) {
   2a65e:	b118      	cbz	r0, 2a668 <hal_uart_init_cbs+0xc>
    } else if (port == 1) {
   2a660:	2801      	cmp	r0, #1
   2a662:	d10e      	bne.n	2a682 <hal_uart_init_cbs+0x26>
        u = &uart1;
   2a664:	480a      	ldr	r0, [pc, #40]	; (2a690 <hal_uart_init_cbs+0x34>)
   2a666:	e000      	b.n	2a66a <hal_uart_init_cbs+0xe>
        u = &uart0;
   2a668:	480a      	ldr	r0, [pc, #40]	; (2a694 <hal_uart_init_cbs+0x38>)
    if (u->u_open) {
   2a66a:	7804      	ldrb	r4, [r0, #0]
   2a66c:	f014 0f01 	tst.w	r4, #1
   2a670:	d10a      	bne.n	2a688 <hal_uart_init_cbs+0x2c>
    u->u_rx_func = rx_func;
   2a672:	60c3      	str	r3, [r0, #12]
    u->u_tx_func = tx_func;
   2a674:	6101      	str	r1, [r0, #16]
    u->u_tx_done = tx_done;
   2a676:	6142      	str	r2, [r0, #20]
    u->u_func_arg = arg;
   2a678:	9b01      	ldr	r3, [sp, #4]
   2a67a:	6183      	str	r3, [r0, #24]
    return 0;
   2a67c:	2000      	movs	r0, #0
}
   2a67e:	bc10      	pop	{r4}
   2a680:	4770      	bx	lr
        return -1;
   2a682:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2a686:	e7fa      	b.n	2a67e <hal_uart_init_cbs+0x22>
        return -1;
   2a688:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2a68c:	e7f7      	b.n	2a67e <hal_uart_init_cbs+0x22>
   2a68e:	bf00      	nop
   2a690:	20003a88 	.word	0x20003a88
   2a694:	20003a6c 	.word	0x20003a6c

0002a698 <hal_uart_start_tx>:
{
   2a698:	b570      	push	{r4, r5, r6, lr}
    if (port == 0) {
   2a69a:	b120      	cbz	r0, 2a6a6 <hal_uart_start_tx+0xe>
    } else if (port == 1) {
   2a69c:	2801      	cmp	r0, #1
   2a69e:	d10d      	bne.n	2a6bc <hal_uart_start_tx+0x24>
        u = &uart1;
   2a6a0:	4c11      	ldr	r4, [pc, #68]	; (2a6e8 <hal_uart_start_tx+0x50>)
        nrf_uart = NRF_UARTE1;
   2a6a2:	4e12      	ldr	r6, [pc, #72]	; (2a6ec <hal_uart_start_tx+0x54>)
   2a6a4:	e001      	b.n	2a6aa <hal_uart_start_tx+0x12>
        u = &uart0;
   2a6a6:	4c12      	ldr	r4, [pc, #72]	; (2a6f0 <hal_uart_start_tx+0x58>)
        nrf_uart = NRF_UARTE0;
   2a6a8:	4e12      	ldr	r6, [pc, #72]	; (2a6f4 <hal_uart_start_tx+0x5c>)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   2a6aa:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   2a6ae:	b672      	cpsid	i
    if (u->u_tx_started == 0) {
   2a6b0:	7823      	ldrb	r3, [r4, #0]
   2a6b2:	f013 0f04 	tst.w	r3, #4
   2a6b6:	d002      	beq.n	2a6be <hal_uart_start_tx+0x26>
    __HAL_ENABLE_INTERRUPTS(sr);
   2a6b8:	b905      	cbnz	r5, 2a6bc <hal_uart_start_tx+0x24>
  __ASM volatile ("cpsie i" : : : "memory");
   2a6ba:	b662      	cpsie	i
}
   2a6bc:	bd70      	pop	{r4, r5, r6, pc}
        rc = hal_uart_tx_fill_buf(u);
   2a6be:	4620      	mov	r0, r4
   2a6c0:	f7ff fef6 	bl	2a4b0 <hal_uart_tx_fill_buf>
        if (rc > 0) {
   2a6c4:	2800      	cmp	r0, #0
   2a6c6:	ddf7      	ble.n	2a6b8 <hal_uart_start_tx+0x20>
            nrf_uart->INTENSET = UARTE_INT_ENDTX;
   2a6c8:	f44f 7380 	mov.w	r3, #256	; 0x100
   2a6cc:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304
            nrf_uart->TXD.PTR = (uint32_t)&u->u_tx_buf;
   2a6d0:	1ca3      	adds	r3, r4, #2
   2a6d2:	f8c6 3544 	str.w	r3, [r6, #1348]	; 0x544
            nrf_uart->TXD.MAXCNT = rc;
   2a6d6:	f8c6 0548 	str.w	r0, [r6, #1352]	; 0x548
            nrf_uart->TASKS_STARTTX = 1;
   2a6da:	2301      	movs	r3, #1
   2a6dc:	60b3      	str	r3, [r6, #8]
            u->u_tx_started = 1;
   2a6de:	7823      	ldrb	r3, [r4, #0]
   2a6e0:	f043 0304 	orr.w	r3, r3, #4
   2a6e4:	7023      	strb	r3, [r4, #0]
   2a6e6:	e7e7      	b.n	2a6b8 <hal_uart_start_tx+0x20>
   2a6e8:	20003a88 	.word	0x20003a88
   2a6ec:	40028000 	.word	0x40028000
   2a6f0:	20003a6c 	.word	0x20003a6c
   2a6f4:	40002000 	.word	0x40002000

0002a6f8 <hal_uart_start_rx>:
{
   2a6f8:	b570      	push	{r4, r5, r6, lr}
    if (port == 0) {
   2a6fa:	b120      	cbz	r0, 2a706 <hal_uart_start_rx+0xe>
    } else if (port == 1) {
   2a6fc:	2801      	cmp	r0, #1
   2a6fe:	d118      	bne.n	2a732 <hal_uart_start_rx+0x3a>
        u = &uart1;
   2a700:	4c0c      	ldr	r4, [pc, #48]	; (2a734 <hal_uart_start_rx+0x3c>)
        nrf_uart = NRF_UARTE1;
   2a702:	4e0d      	ldr	r6, [pc, #52]	; (2a738 <hal_uart_start_rx+0x40>)
   2a704:	e001      	b.n	2a70a <hal_uart_start_rx+0x12>
        u = &uart0;
   2a706:	4c0d      	ldr	r4, [pc, #52]	; (2a73c <hal_uart_start_rx+0x44>)
        nrf_uart = NRF_UARTE0;
   2a708:	4e0d      	ldr	r6, [pc, #52]	; (2a740 <hal_uart_start_rx+0x48>)
    if (u->u_rx_stall) {
   2a70a:	7823      	ldrb	r3, [r4, #0]
   2a70c:	f013 0f02 	tst.w	r3, #2
   2a710:	d00f      	beq.n	2a732 <hal_uart_start_rx+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   2a712:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   2a716:	b672      	cpsid	i
        rc = u->u_rx_func(u->u_func_arg, u->u_rx_buf);
   2a718:	68e3      	ldr	r3, [r4, #12]
   2a71a:	7861      	ldrb	r1, [r4, #1]
   2a71c:	69a0      	ldr	r0, [r4, #24]
   2a71e:	4798      	blx	r3
        if (rc == 0) {
   2a720:	b928      	cbnz	r0, 2a72e <hal_uart_start_rx+0x36>
            u->u_rx_stall = 0;
   2a722:	7823      	ldrb	r3, [r4, #0]
   2a724:	f36f 0341 	bfc	r3, #1, #1
   2a728:	7023      	strb	r3, [r4, #0]
            nrf_uart->TASKS_STARTRX = 1;
   2a72a:	2301      	movs	r3, #1
   2a72c:	6033      	str	r3, [r6, #0]
        __HAL_ENABLE_INTERRUPTS(sr);
   2a72e:	b905      	cbnz	r5, 2a732 <hal_uart_start_rx+0x3a>
  __ASM volatile ("cpsie i" : : : "memory");
   2a730:	b662      	cpsie	i
}
   2a732:	bd70      	pop	{r4, r5, r6, pc}
   2a734:	20003a88 	.word	0x20003a88
   2a738:	40028000 	.word	0x40028000
   2a73c:	20003a6c 	.word	0x20003a6c
   2a740:	40002000 	.word	0x40002000

0002a744 <hal_uart_blocking_tx>:
{
   2a744:	b082      	sub	sp, #8
   2a746:	f88d 1007 	strb.w	r1, [sp, #7]
    if (port == 0) {
   2a74a:	b120      	cbz	r0, 2a756 <hal_uart_blocking_tx+0x12>
    } else if (port == 1) {
   2a74c:	2801      	cmp	r0, #1
   2a74e:	d120      	bne.n	2a792 <hal_uart_blocking_tx+0x4e>
        nrf_uart = NRF_UARTE1;
   2a750:	4b11      	ldr	r3, [pc, #68]	; (2a798 <hal_uart_blocking_tx+0x54>)
        u = &uart1;
   2a752:	4a12      	ldr	r2, [pc, #72]	; (2a79c <hal_uart_blocking_tx+0x58>)
   2a754:	e001      	b.n	2a75a <hal_uart_blocking_tx+0x16>
        nrf_uart = NRF_UARTE0;
   2a756:	4b12      	ldr	r3, [pc, #72]	; (2a7a0 <hal_uart_blocking_tx+0x5c>)
        u = &uart0;
   2a758:	4a12      	ldr	r2, [pc, #72]	; (2a7a4 <hal_uart_blocking_tx+0x60>)
    if (!u->u_open) {
   2a75a:	7812      	ldrb	r2, [r2, #0]
   2a75c:	f012 0f01 	tst.w	r2, #1
   2a760:	d017      	beq.n	2a792 <hal_uart_blocking_tx+0x4e>
    if (u->u_tx_started) {
   2a762:	f012 0f04 	tst.w	r2, #4
   2a766:	d003      	beq.n	2a770 <hal_uart_blocking_tx+0x2c>
        while (nrf_uart->EVENTS_ENDTX == 0) {
   2a768:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
   2a76c:	2a00      	cmp	r2, #0
   2a76e:	d0fb      	beq.n	2a768 <hal_uart_blocking_tx+0x24>
    nrf_uart->EVENTS_ENDTX = 0;
   2a770:	2200      	movs	r2, #0
   2a772:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    nrf_uart->TXD.PTR = (uint32_t)&data;
   2a776:	f10d 0207 	add.w	r2, sp, #7
   2a77a:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
    nrf_uart->TXD.MAXCNT = 1;
   2a77e:	2201      	movs	r2, #1
   2a780:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    nrf_uart->TASKS_STARTTX = 1;
   2a784:	609a      	str	r2, [r3, #8]
    while (nrf_uart->EVENTS_ENDTX == 0) {
   2a786:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
   2a78a:	2a00      	cmp	r2, #0
   2a78c:	d0fb      	beq.n	2a786 <hal_uart_blocking_tx+0x42>
    nrf_uart->TASKS_STOPTX = 1;
   2a78e:	2201      	movs	r2, #1
   2a790:	60da      	str	r2, [r3, #12]
}
   2a792:	b002      	add	sp, #8
   2a794:	4770      	bx	lr
   2a796:	bf00      	nop
   2a798:	40028000 	.word	0x40028000
   2a79c:	20003a88 	.word	0x20003a88
   2a7a0:	40002000 	.word	0x40002000
   2a7a4:	20003a6c 	.word	0x20003a6c

0002a7a8 <hal_uart_init>:
{
    struct nrf52_uart_cfg *cfg;
    NRF_UARTE_Type *nrf_uart;

#if defined(NRF52840_XXAA)
    if (port == 0) {
   2a7a8:	b9b0      	cbnz	r0, 2a7d8 <hal_uart_init+0x30>
  uint32_t vectors = (uint32_t )SCB->VTOR;
   2a7aa:	4b11      	ldr	r3, [pc, #68]	; (2a7f0 <hal_uart_init+0x48>)
   2a7ac:	689b      	ldr	r3, [r3, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   2a7ae:	4a11      	ldr	r2, [pc, #68]	; (2a7f4 <hal_uart_init+0x4c>)
   2a7b0:	649a      	str	r2, [r3, #72]	; 0x48
        nrf_uart = NRF_UARTE0;
   2a7b2:	4b11      	ldr	r3, [pc, #68]	; (2a7f8 <hal_uart_init+0x50>)
    NVIC_SetVector(UARTE0_UART0_IRQn, (uint32_t)uart0_irq_handler);
#endif

    cfg = (struct nrf52_uart_cfg *)arg;

    nrf_uart->PSEL.TXD = cfg->suc_pin_tx;
   2a7b4:	f991 2000 	ldrsb.w	r2, [r1]
   2a7b8:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
    nrf_uart->PSEL.RXD = cfg->suc_pin_rx;
   2a7bc:	f991 2001 	ldrsb.w	r2, [r1, #1]
   2a7c0:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    nrf_uart->PSEL.RTS = cfg->suc_pin_rts;
   2a7c4:	f991 2002 	ldrsb.w	r2, [r1, #2]
   2a7c8:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    nrf_uart->PSEL.CTS = cfg->suc_pin_cts;
   2a7cc:	f991 2003 	ldrsb.w	r2, [r1, #3]
   2a7d0:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510

    return 0;
   2a7d4:	2000      	movs	r0, #0
   2a7d6:	4770      	bx	lr
    } else if (port == 1) {
   2a7d8:	2801      	cmp	r0, #1
   2a7da:	d106      	bne.n	2a7ea <hal_uart_init+0x42>
  uint32_t vectors = (uint32_t )SCB->VTOR;
   2a7dc:	4b04      	ldr	r3, [pc, #16]	; (2a7f0 <hal_uart_init+0x48>)
   2a7de:	689b      	ldr	r3, [r3, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   2a7e0:	4a06      	ldr	r2, [pc, #24]	; (2a7fc <hal_uart_init+0x54>)
   2a7e2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
        nrf_uart = NRF_UARTE1;
   2a7e6:	4b06      	ldr	r3, [pc, #24]	; (2a800 <hal_uart_init+0x58>)
   2a7e8:	e7e4      	b.n	2a7b4 <hal_uart_init+0xc>
        return -1;
   2a7ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   2a7ee:	4770      	bx	lr
   2a7f0:	e000ed00 	.word	0xe000ed00
   2a7f4:	0002a545 	.word	0x0002a545
   2a7f8:	40002000 	.word	0x40002000
   2a7fc:	0002a559 	.word	0x0002a559
   2a800:	40028000 	.word	0x40028000

0002a804 <hal_uart_config>:

int
hal_uart_config(int port, int32_t baudrate, uint8_t databits, uint8_t stopbits,
  enum hal_uart_parity parity, enum hal_uart_flow_ctl flow_ctl)
{
   2a804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a806:	f89d 7018 	ldrb.w	r7, [sp, #24]
    uint32_t baud_reg;
    NRF_UARTE_Type *nrf_uart;
    IRQn_Type irqnum;

#if defined(NRF52840_XXAA)
    if (port == 0) {
   2a80a:	b128      	cbz	r0, 2a818 <hal_uart_config+0x14>
        nrf_uart = NRF_UARTE0;
        irqnum = UARTE0_UART0_IRQn;
        u = &uart0;
    } else if (port == 1) {
   2a80c:	2801      	cmp	r0, #1
   2a80e:	d15c      	bne.n	2a8ca <hal_uart_config+0xc6>
        nrf_uart = NRF_UARTE1;
        irqnum = UARTE1_IRQn;
   2a810:	2628      	movs	r6, #40	; 0x28
        nrf_uart = NRF_UARTE1;
   2a812:	4c37      	ldr	r4, [pc, #220]	; (2a8f0 <hal_uart_config+0xec>)
        u = &uart1;
   2a814:	4d37      	ldr	r5, [pc, #220]	; (2a8f4 <hal_uart_config+0xf0>)
   2a816:	e002      	b.n	2a81e <hal_uart_config+0x1a>
        irqnum = UARTE0_UART0_IRQn;
   2a818:	2602      	movs	r6, #2
        nrf_uart = NRF_UARTE0;
   2a81a:	4c37      	ldr	r4, [pc, #220]	; (2a8f8 <hal_uart_config+0xf4>)
        u = &uart0;
   2a81c:	4d37      	ldr	r5, [pc, #220]	; (2a8fc <hal_uart_config+0xf8>)
    nrf_uart = NRF_UARTE0;
    irqnum = UARTE0_UART0_IRQn;
    u = &uart0;
#endif

    if (u->u_open) {
   2a81e:	7828      	ldrb	r0, [r5, #0]
   2a820:	f010 0f01 	tst.w	r0, #1
   2a824:	d154      	bne.n	2a8d0 <hal_uart_config+0xcc>
     * pin config
     * UART config
     * nvic config
     * enable uart
     */
    if (databits != 8) {
   2a826:	2a08      	cmp	r2, #8
   2a828:	d155      	bne.n	2a8d6 <hal_uart_config+0xd2>
        return -1;
    }
    if (stopbits != 1) {
   2a82a:	2b01      	cmp	r3, #1
   2a82c:	d156      	bne.n	2a8dc <hal_uart_config+0xd8>
        return -1;
    }

    switch (parity) {
   2a82e:	2f01      	cmp	r7, #1
   2a830:	d057      	beq.n	2a8e2 <hal_uart_config+0xde>
   2a832:	2f02      	cmp	r7, #2
   2a834:	d03d      	beq.n	2a8b2 <hal_uart_config+0xae>
    uint32_t cfg_reg = 0;
   2a836:	2700      	movs	r7, #0
   2a838:	4608      	mov	r0, r1
    case HAL_UART_PARITY_EVEN:
        cfg_reg |= UARTE_CONFIG_PARITY;
        break;
    }

    switch (flow_ctl) {
   2a83a:	f89d 301c 	ldrb.w	r3, [sp, #28]
   2a83e:	2b01      	cmp	r3, #1
   2a840:	d10b      	bne.n	2a85a <hal_uart_config+0x56>
    case HAL_UART_FLOW_CTL_NONE:
        break;
    case HAL_UART_FLOW_CTL_RTS_CTS:
        cfg_reg |= UARTE_CONFIG_HWFC;
   2a842:	f047 0701 	orr.w	r7, r7, #1
        if (nrf_uart->PSEL.RTS == 0xffffffff ||
   2a846:	f8d4 3508 	ldr.w	r3, [r4, #1288]	; 0x508
   2a84a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   2a84e:	d032      	beq.n	2a8b6 <hal_uart_config+0xb2>
          nrf_uart->PSEL.CTS == 0xffffffff) {
   2a850:	f8d4 3510 	ldr.w	r3, [r4, #1296]	; 0x510
        if (nrf_uart->PSEL.RTS == 0xffffffff ||
   2a854:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   2a858:	d02d      	beq.n	2a8b6 <hal_uart_config+0xb2>
            assert(0);
            return -1;
        }
        break;
    }
    baud_reg = hal_uart_baudrate(baudrate);
   2a85a:	f7ff fe87 	bl	2a56c <hal_uart_baudrate>
    if (baud_reg == 0) {
   2a85e:	4603      	mov	r3, r0
   2a860:	2800      	cmp	r0, #0
   2a862:	d041      	beq.n	2a8e8 <hal_uart_config+0xe4>
        return -1;
    }
    nrf_uart->ENABLE = 0;
   2a864:	2000      	movs	r0, #0
   2a866:	f8c4 0500 	str.w	r0, [r4, #1280]	; 0x500
    nrf_uart->INTENCLR = 0xffffffff;
   2a86a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2a86e:	f8c4 2308 	str.w	r2, [r4, #776]	; 0x308
    nrf_uart->BAUDRATE = baud_reg;
   2a872:	f8c4 3524 	str.w	r3, [r4, #1316]	; 0x524
    nrf_uart->CONFIG = cfg_reg;
   2a876:	f8c4 756c 	str.w	r7, [r4, #1388]	; 0x56c
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2a87a:	f006 020a 	and.w	r2, r6, #10
   2a87e:	0976      	lsrs	r6, r6, #5
   2a880:	2301      	movs	r3, #1
   2a882:	fa03 f202 	lsl.w	r2, r3, r2
   2a886:	491e      	ldr	r1, [pc, #120]	; (2a900 <hal_uart_config+0xfc>)
   2a888:	f841 2026 	str.w	r2, [r1, r6, lsl #2]

    NVIC_EnableIRQ(irqnum);

    nrf_uart->ENABLE = UARTE_ENABLE;
   2a88c:	2208      	movs	r2, #8
   2a88e:	f8c4 2500 	str.w	r2, [r4, #1280]	; 0x500

    nrf_uart->INTENSET = UARTE_INT_ENDRX;
   2a892:	2210      	movs	r2, #16
   2a894:	f8c4 2304 	str.w	r2, [r4, #772]	; 0x304
    nrf_uart->RXD.PTR = (uint32_t)&u->u_rx_buf;
   2a898:	18ea      	adds	r2, r5, r3
   2a89a:	f8c4 2534 	str.w	r2, [r4, #1332]	; 0x534
    nrf_uart->RXD.MAXCNT = sizeof(u->u_rx_buf);
   2a89e:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    nrf_uart->TASKS_STARTRX = 1;
   2a8a2:	6023      	str	r3, [r4, #0]

    u->u_rx_stall = 0;
   2a8a4:	782b      	ldrb	r3, [r5, #0]
    u->u_tx_started = 0;
    u->u_open = 1;
   2a8a6:	f003 03f9 	and.w	r3, r3, #249	; 0xf9
   2a8aa:	f043 0301 	orr.w	r3, r3, #1
   2a8ae:	702b      	strb	r3, [r5, #0]

    return 0;
}
   2a8b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        cfg_reg |= UARTE_CONFIG_PARITY;
   2a8b2:	270e      	movs	r7, #14
   2a8b4:	e7c0      	b.n	2a838 <hal_uart_config+0x34>
            assert(0);
   2a8b6:	f7e1 fc97 	bl	c1e8 <hal_debugger_connected>
   2a8ba:	b100      	cbz	r0, 2a8be <hal_uart_config+0xba>
   2a8bc:	be01      	bkpt	0x0001
   2a8be:	2300      	movs	r3, #0
   2a8c0:	461a      	mov	r2, r3
   2a8c2:	4619      	mov	r1, r3
   2a8c4:	4618      	mov	r0, r3
   2a8c6:	f7e1 fec9 	bl	c65c <__assert_func>
        return -1;
   2a8ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2a8ce:	e7ef      	b.n	2a8b0 <hal_uart_config+0xac>
        return -1;
   2a8d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2a8d4:	e7ec      	b.n	2a8b0 <hal_uart_config+0xac>
        return -1;
   2a8d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2a8da:	e7e9      	b.n	2a8b0 <hal_uart_config+0xac>
        return -1;
   2a8dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2a8e0:	e7e6      	b.n	2a8b0 <hal_uart_config+0xac>
        return -1;
   2a8e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2a8e6:	e7e3      	b.n	2a8b0 <hal_uart_config+0xac>
        return -1;
   2a8e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2a8ec:	e7e0      	b.n	2a8b0 <hal_uart_config+0xac>
   2a8ee:	bf00      	nop
   2a8f0:	40028000 	.word	0x40028000
   2a8f4:	20003a88 	.word	0x20003a88
   2a8f8:	40002000 	.word	0x40002000
   2a8fc:	20003a6c 	.word	0x20003a6c
   2a900:	e000e100 	.word	0xe000e100

0002a904 <hal_uart_close>:
{
    volatile struct hal_uart *u;
    NRF_UARTE_Type *nrf_uart;

#if defined(NRF52840_XXAA)
    if (port == 0) {
   2a904:	b120      	cbz	r0, 2a910 <hal_uart_close+0xc>
        nrf_uart = NRF_UARTE0;
        u = &uart0;
    } else if (port == 1) {
   2a906:	2801      	cmp	r0, #1
   2a908:	d114      	bne.n	2a934 <hal_uart_close+0x30>
        nrf_uart = NRF_UARTE1;
   2a90a:	490c      	ldr	r1, [pc, #48]	; (2a93c <hal_uart_close+0x38>)
        u = &uart1;
   2a90c:	4a0c      	ldr	r2, [pc, #48]	; (2a940 <hal_uart_close+0x3c>)
   2a90e:	e001      	b.n	2a914 <hal_uart_close+0x10>
        nrf_uart = NRF_UARTE0;
   2a910:	490c      	ldr	r1, [pc, #48]	; (2a944 <hal_uart_close+0x40>)
        u = &uart0;
   2a912:	4a0d      	ldr	r2, [pc, #52]	; (2a948 <hal_uart_close+0x44>)
    }
    nrf_uart = NRF_UARTE0;
    u = &uart0;
#endif

    u->u_open = 0;
   2a914:	7813      	ldrb	r3, [r2, #0]
   2a916:	f36f 0300 	bfc	r3, #0, #1
   2a91a:	7013      	strb	r3, [r2, #0]
    while (u->u_tx_started) {
   2a91c:	7813      	ldrb	r3, [r2, #0]
   2a91e:	f013 0f04 	tst.w	r3, #4
   2a922:	d1fb      	bne.n	2a91c <hal_uart_close+0x18>
        /* Wait here until the dma is finished */
    }
    nrf_uart->ENABLE = 0;
   2a924:	2000      	movs	r0, #0
   2a926:	f8c1 0500 	str.w	r0, [r1, #1280]	; 0x500
    nrf_uart->INTENCLR = 0xffffffff;
   2a92a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2a92e:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    return 0;
   2a932:	4770      	bx	lr
        return -1;
   2a934:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   2a938:	4770      	bx	lr
   2a93a:	bf00      	nop
   2a93c:	40028000 	.word	0x40028000
   2a940:	20003a88 	.word	0x20003a88
   2a944:	40002000 	.word	0x40002000
   2a948:	20003a6c 	.word	0x20003a6c

0002a94c <__aeabi_uldivmod>:
   2a94c:	b953      	cbnz	r3, 2a964 <__aeabi_uldivmod+0x18>
   2a94e:	b94a      	cbnz	r2, 2a964 <__aeabi_uldivmod+0x18>
   2a950:	2900      	cmp	r1, #0
   2a952:	bf08      	it	eq
   2a954:	2800      	cmpeq	r0, #0
   2a956:	bf1c      	itt	ne
   2a958:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   2a95c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   2a960:	f000 b986 	b.w	2ac70 <__aeabi_idiv0>
   2a964:	f1ad 0c08 	sub.w	ip, sp, #8
   2a968:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   2a96c:	f000 f81a 	bl	2a9a4 <__udivmoddi4>
   2a970:	f8dd e004 	ldr.w	lr, [sp, #4]
   2a974:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   2a978:	b004      	add	sp, #16
   2a97a:	4770      	bx	lr

0002a97c <__popcountsi2>:
   2a97c:	0843      	lsrs	r3, r0, #1
   2a97e:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
   2a982:	1ac0      	subs	r0, r0, r3
   2a984:	0883      	lsrs	r3, r0, #2
   2a986:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
   2a98a:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
   2a98e:	4418      	add	r0, r3
   2a990:	eb00 1010 	add.w	r0, r0, r0, lsr #4
   2a994:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
   2a998:	eb00 2000 	add.w	r0, r0, r0, lsl #8
   2a99c:	eb00 4000 	add.w	r0, r0, r0, lsl #16
   2a9a0:	0e00      	lsrs	r0, r0, #24
   2a9a2:	4770      	bx	lr

0002a9a4 <__udivmoddi4>:
   2a9a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2a9a8:	9e08      	ldr	r6, [sp, #32]
   2a9aa:	4604      	mov	r4, r0
   2a9ac:	4688      	mov	r8, r1
   2a9ae:	2b00      	cmp	r3, #0
   2a9b0:	d14b      	bne.n	2aa4a <__udivmoddi4+0xa6>
   2a9b2:	428a      	cmp	r2, r1
   2a9b4:	4615      	mov	r5, r2
   2a9b6:	d967      	bls.n	2aa88 <__udivmoddi4+0xe4>
   2a9b8:	fab2 f282 	clz	r2, r2
   2a9bc:	b14a      	cbz	r2, 2a9d2 <__udivmoddi4+0x2e>
   2a9be:	f1c2 0720 	rsb	r7, r2, #32
   2a9c2:	fa01 f302 	lsl.w	r3, r1, r2
   2a9c6:	fa20 f707 	lsr.w	r7, r0, r7
   2a9ca:	4095      	lsls	r5, r2
   2a9cc:	ea47 0803 	orr.w	r8, r7, r3
   2a9d0:	4094      	lsls	r4, r2
   2a9d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   2a9d6:	0c23      	lsrs	r3, r4, #16
   2a9d8:	fbb8 f7fe 	udiv	r7, r8, lr
   2a9dc:	fa1f fc85 	uxth.w	ip, r5
   2a9e0:	fb0e 8817 	mls	r8, lr, r7, r8
   2a9e4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   2a9e8:	fb07 f10c 	mul.w	r1, r7, ip
   2a9ec:	4299      	cmp	r1, r3
   2a9ee:	d909      	bls.n	2aa04 <__udivmoddi4+0x60>
   2a9f0:	18eb      	adds	r3, r5, r3
   2a9f2:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
   2a9f6:	f080 811b 	bcs.w	2ac30 <__udivmoddi4+0x28c>
   2a9fa:	4299      	cmp	r1, r3
   2a9fc:	f240 8118 	bls.w	2ac30 <__udivmoddi4+0x28c>
   2aa00:	3f02      	subs	r7, #2
   2aa02:	442b      	add	r3, r5
   2aa04:	1a5b      	subs	r3, r3, r1
   2aa06:	b2a4      	uxth	r4, r4
   2aa08:	fbb3 f0fe 	udiv	r0, r3, lr
   2aa0c:	fb0e 3310 	mls	r3, lr, r0, r3
   2aa10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   2aa14:	fb00 fc0c 	mul.w	ip, r0, ip
   2aa18:	45a4      	cmp	ip, r4
   2aa1a:	d909      	bls.n	2aa30 <__udivmoddi4+0x8c>
   2aa1c:	192c      	adds	r4, r5, r4
   2aa1e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   2aa22:	f080 8107 	bcs.w	2ac34 <__udivmoddi4+0x290>
   2aa26:	45a4      	cmp	ip, r4
   2aa28:	f240 8104 	bls.w	2ac34 <__udivmoddi4+0x290>
   2aa2c:	3802      	subs	r0, #2
   2aa2e:	442c      	add	r4, r5
   2aa30:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
   2aa34:	eba4 040c 	sub.w	r4, r4, ip
   2aa38:	2700      	movs	r7, #0
   2aa3a:	b11e      	cbz	r6, 2aa44 <__udivmoddi4+0xa0>
   2aa3c:	40d4      	lsrs	r4, r2
   2aa3e:	2300      	movs	r3, #0
   2aa40:	e9c6 4300 	strd	r4, r3, [r6]
   2aa44:	4639      	mov	r1, r7
   2aa46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2aa4a:	428b      	cmp	r3, r1
   2aa4c:	d909      	bls.n	2aa62 <__udivmoddi4+0xbe>
   2aa4e:	2e00      	cmp	r6, #0
   2aa50:	f000 80eb 	beq.w	2ac2a <__udivmoddi4+0x286>
   2aa54:	2700      	movs	r7, #0
   2aa56:	e9c6 0100 	strd	r0, r1, [r6]
   2aa5a:	4638      	mov	r0, r7
   2aa5c:	4639      	mov	r1, r7
   2aa5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2aa62:	fab3 f783 	clz	r7, r3
   2aa66:	2f00      	cmp	r7, #0
   2aa68:	d147      	bne.n	2aafa <__udivmoddi4+0x156>
   2aa6a:	428b      	cmp	r3, r1
   2aa6c:	d302      	bcc.n	2aa74 <__udivmoddi4+0xd0>
   2aa6e:	4282      	cmp	r2, r0
   2aa70:	f200 80fa 	bhi.w	2ac68 <__udivmoddi4+0x2c4>
   2aa74:	1a84      	subs	r4, r0, r2
   2aa76:	eb61 0303 	sbc.w	r3, r1, r3
   2aa7a:	2001      	movs	r0, #1
   2aa7c:	4698      	mov	r8, r3
   2aa7e:	2e00      	cmp	r6, #0
   2aa80:	d0e0      	beq.n	2aa44 <__udivmoddi4+0xa0>
   2aa82:	e9c6 4800 	strd	r4, r8, [r6]
   2aa86:	e7dd      	b.n	2aa44 <__udivmoddi4+0xa0>
   2aa88:	b902      	cbnz	r2, 2aa8c <__udivmoddi4+0xe8>
   2aa8a:	deff      	udf	#255	; 0xff
   2aa8c:	fab2 f282 	clz	r2, r2
   2aa90:	2a00      	cmp	r2, #0
   2aa92:	f040 808f 	bne.w	2abb4 <__udivmoddi4+0x210>
   2aa96:	1b49      	subs	r1, r1, r5
   2aa98:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   2aa9c:	fa1f f885 	uxth.w	r8, r5
   2aaa0:	2701      	movs	r7, #1
   2aaa2:	fbb1 fcfe 	udiv	ip, r1, lr
   2aaa6:	0c23      	lsrs	r3, r4, #16
   2aaa8:	fb0e 111c 	mls	r1, lr, ip, r1
   2aaac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   2aab0:	fb08 f10c 	mul.w	r1, r8, ip
   2aab4:	4299      	cmp	r1, r3
   2aab6:	d907      	bls.n	2aac8 <__udivmoddi4+0x124>
   2aab8:	18eb      	adds	r3, r5, r3
   2aaba:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
   2aabe:	d202      	bcs.n	2aac6 <__udivmoddi4+0x122>
   2aac0:	4299      	cmp	r1, r3
   2aac2:	f200 80cd 	bhi.w	2ac60 <__udivmoddi4+0x2bc>
   2aac6:	4684      	mov	ip, r0
   2aac8:	1a59      	subs	r1, r3, r1
   2aaca:	b2a3      	uxth	r3, r4
   2aacc:	fbb1 f0fe 	udiv	r0, r1, lr
   2aad0:	fb0e 1410 	mls	r4, lr, r0, r1
   2aad4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
   2aad8:	fb08 f800 	mul.w	r8, r8, r0
   2aadc:	45a0      	cmp	r8, r4
   2aade:	d907      	bls.n	2aaf0 <__udivmoddi4+0x14c>
   2aae0:	192c      	adds	r4, r5, r4
   2aae2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   2aae6:	d202      	bcs.n	2aaee <__udivmoddi4+0x14a>
   2aae8:	45a0      	cmp	r8, r4
   2aaea:	f200 80b6 	bhi.w	2ac5a <__udivmoddi4+0x2b6>
   2aaee:	4618      	mov	r0, r3
   2aaf0:	eba4 0408 	sub.w	r4, r4, r8
   2aaf4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   2aaf8:	e79f      	b.n	2aa3a <__udivmoddi4+0x96>
   2aafa:	f1c7 0c20 	rsb	ip, r7, #32
   2aafe:	40bb      	lsls	r3, r7
   2ab00:	fa22 fe0c 	lsr.w	lr, r2, ip
   2ab04:	ea4e 0e03 	orr.w	lr, lr, r3
   2ab08:	fa01 f407 	lsl.w	r4, r1, r7
   2ab0c:	fa20 f50c 	lsr.w	r5, r0, ip
   2ab10:	fa21 f30c 	lsr.w	r3, r1, ip
   2ab14:	ea4f 481e 	mov.w	r8, lr, lsr #16
   2ab18:	4325      	orrs	r5, r4
   2ab1a:	fbb3 f9f8 	udiv	r9, r3, r8
   2ab1e:	0c2c      	lsrs	r4, r5, #16
   2ab20:	fb08 3319 	mls	r3, r8, r9, r3
   2ab24:	fa1f fa8e 	uxth.w	sl, lr
   2ab28:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
   2ab2c:	fb09 f40a 	mul.w	r4, r9, sl
   2ab30:	429c      	cmp	r4, r3
   2ab32:	fa02 f207 	lsl.w	r2, r2, r7
   2ab36:	fa00 f107 	lsl.w	r1, r0, r7
   2ab3a:	d90b      	bls.n	2ab54 <__udivmoddi4+0x1b0>
   2ab3c:	eb1e 0303 	adds.w	r3, lr, r3
   2ab40:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
   2ab44:	f080 8087 	bcs.w	2ac56 <__udivmoddi4+0x2b2>
   2ab48:	429c      	cmp	r4, r3
   2ab4a:	f240 8084 	bls.w	2ac56 <__udivmoddi4+0x2b2>
   2ab4e:	f1a9 0902 	sub.w	r9, r9, #2
   2ab52:	4473      	add	r3, lr
   2ab54:	1b1b      	subs	r3, r3, r4
   2ab56:	b2ad      	uxth	r5, r5
   2ab58:	fbb3 f0f8 	udiv	r0, r3, r8
   2ab5c:	fb08 3310 	mls	r3, r8, r0, r3
   2ab60:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
   2ab64:	fb00 fa0a 	mul.w	sl, r0, sl
   2ab68:	45a2      	cmp	sl, r4
   2ab6a:	d908      	bls.n	2ab7e <__udivmoddi4+0x1da>
   2ab6c:	eb1e 0404 	adds.w	r4, lr, r4
   2ab70:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   2ab74:	d26b      	bcs.n	2ac4e <__udivmoddi4+0x2aa>
   2ab76:	45a2      	cmp	sl, r4
   2ab78:	d969      	bls.n	2ac4e <__udivmoddi4+0x2aa>
   2ab7a:	3802      	subs	r0, #2
   2ab7c:	4474      	add	r4, lr
   2ab7e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   2ab82:	fba0 8902 	umull	r8, r9, r0, r2
   2ab86:	eba4 040a 	sub.w	r4, r4, sl
   2ab8a:	454c      	cmp	r4, r9
   2ab8c:	46c2      	mov	sl, r8
   2ab8e:	464b      	mov	r3, r9
   2ab90:	d354      	bcc.n	2ac3c <__udivmoddi4+0x298>
   2ab92:	d051      	beq.n	2ac38 <__udivmoddi4+0x294>
   2ab94:	2e00      	cmp	r6, #0
   2ab96:	d069      	beq.n	2ac6c <__udivmoddi4+0x2c8>
   2ab98:	ebb1 050a 	subs.w	r5, r1, sl
   2ab9c:	eb64 0403 	sbc.w	r4, r4, r3
   2aba0:	fa04 fc0c 	lsl.w	ip, r4, ip
   2aba4:	40fd      	lsrs	r5, r7
   2aba6:	40fc      	lsrs	r4, r7
   2aba8:	ea4c 0505 	orr.w	r5, ip, r5
   2abac:	e9c6 5400 	strd	r5, r4, [r6]
   2abb0:	2700      	movs	r7, #0
   2abb2:	e747      	b.n	2aa44 <__udivmoddi4+0xa0>
   2abb4:	f1c2 0320 	rsb	r3, r2, #32
   2abb8:	fa20 f703 	lsr.w	r7, r0, r3
   2abbc:	4095      	lsls	r5, r2
   2abbe:	fa01 f002 	lsl.w	r0, r1, r2
   2abc2:	fa21 f303 	lsr.w	r3, r1, r3
   2abc6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   2abca:	4338      	orrs	r0, r7
   2abcc:	0c01      	lsrs	r1, r0, #16
   2abce:	fbb3 f7fe 	udiv	r7, r3, lr
   2abd2:	fa1f f885 	uxth.w	r8, r5
   2abd6:	fb0e 3317 	mls	r3, lr, r7, r3
   2abda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   2abde:	fb07 f308 	mul.w	r3, r7, r8
   2abe2:	428b      	cmp	r3, r1
   2abe4:	fa04 f402 	lsl.w	r4, r4, r2
   2abe8:	d907      	bls.n	2abfa <__udivmoddi4+0x256>
   2abea:	1869      	adds	r1, r5, r1
   2abec:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
   2abf0:	d22f      	bcs.n	2ac52 <__udivmoddi4+0x2ae>
   2abf2:	428b      	cmp	r3, r1
   2abf4:	d92d      	bls.n	2ac52 <__udivmoddi4+0x2ae>
   2abf6:	3f02      	subs	r7, #2
   2abf8:	4429      	add	r1, r5
   2abfa:	1acb      	subs	r3, r1, r3
   2abfc:	b281      	uxth	r1, r0
   2abfe:	fbb3 f0fe 	udiv	r0, r3, lr
   2ac02:	fb0e 3310 	mls	r3, lr, r0, r3
   2ac06:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   2ac0a:	fb00 f308 	mul.w	r3, r0, r8
   2ac0e:	428b      	cmp	r3, r1
   2ac10:	d907      	bls.n	2ac22 <__udivmoddi4+0x27e>
   2ac12:	1869      	adds	r1, r5, r1
   2ac14:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
   2ac18:	d217      	bcs.n	2ac4a <__udivmoddi4+0x2a6>
   2ac1a:	428b      	cmp	r3, r1
   2ac1c:	d915      	bls.n	2ac4a <__udivmoddi4+0x2a6>
   2ac1e:	3802      	subs	r0, #2
   2ac20:	4429      	add	r1, r5
   2ac22:	1ac9      	subs	r1, r1, r3
   2ac24:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
   2ac28:	e73b      	b.n	2aaa2 <__udivmoddi4+0xfe>
   2ac2a:	4637      	mov	r7, r6
   2ac2c:	4630      	mov	r0, r6
   2ac2e:	e709      	b.n	2aa44 <__udivmoddi4+0xa0>
   2ac30:	4607      	mov	r7, r0
   2ac32:	e6e7      	b.n	2aa04 <__udivmoddi4+0x60>
   2ac34:	4618      	mov	r0, r3
   2ac36:	e6fb      	b.n	2aa30 <__udivmoddi4+0x8c>
   2ac38:	4541      	cmp	r1, r8
   2ac3a:	d2ab      	bcs.n	2ab94 <__udivmoddi4+0x1f0>
   2ac3c:	ebb8 0a02 	subs.w	sl, r8, r2
   2ac40:	eb69 020e 	sbc.w	r2, r9, lr
   2ac44:	3801      	subs	r0, #1
   2ac46:	4613      	mov	r3, r2
   2ac48:	e7a4      	b.n	2ab94 <__udivmoddi4+0x1f0>
   2ac4a:	4660      	mov	r0, ip
   2ac4c:	e7e9      	b.n	2ac22 <__udivmoddi4+0x27e>
   2ac4e:	4618      	mov	r0, r3
   2ac50:	e795      	b.n	2ab7e <__udivmoddi4+0x1da>
   2ac52:	4667      	mov	r7, ip
   2ac54:	e7d1      	b.n	2abfa <__udivmoddi4+0x256>
   2ac56:	4681      	mov	r9, r0
   2ac58:	e77c      	b.n	2ab54 <__udivmoddi4+0x1b0>
   2ac5a:	3802      	subs	r0, #2
   2ac5c:	442c      	add	r4, r5
   2ac5e:	e747      	b.n	2aaf0 <__udivmoddi4+0x14c>
   2ac60:	f1ac 0c02 	sub.w	ip, ip, #2
   2ac64:	442b      	add	r3, r5
   2ac66:	e72f      	b.n	2aac8 <__udivmoddi4+0x124>
   2ac68:	4638      	mov	r0, r7
   2ac6a:	e708      	b.n	2aa7e <__udivmoddi4+0xda>
   2ac6c:	4637      	mov	r7, r6
   2ac6e:	e6e9      	b.n	2aa44 <__udivmoddi4+0xa0>

0002ac70 <__aeabi_idiv0>:
   2ac70:	4770      	bx	lr
   2ac72:	bf00      	nop
   2ac74:	65766441 	.word	0x65766441
   2ac78:	73697472 	.word	0x73697472
   2ac7c:	20676e69 	.word	0x20676e69
   2ac80:	706d6f63 	.word	0x706d6f63
   2ac84:	6574656c 	.word	0x6574656c
   2ac88:	74202c64 	.word	0x74202c64
   2ac8c:	696d7265 	.word	0x696d7265
   2ac90:	6974616e 	.word	0x6974616e
   2ac94:	63206e6f 	.word	0x63206e6f
   2ac98:	3a65646f 	.word	0x3a65646f
   2ac9c:	0a642520 	.word	0x0a642520
   2aca0:	00000000 	.word	0x00000000
   2aca4:	65766441 	.word	0x65766441
   2aca8:	73697472 	.word	0x73697472
   2acac:	20676e69 	.word	0x20676e69
   2acb0:	6e657665 	.word	0x6e657665
   2acb4:	6f6e2074 	.word	0x6f6e2074
   2acb8:	61682074 	.word	0x61682074
   2acbc:	656c646e 	.word	0x656c646e
   2acc0:	00000a64 	.word	0x00000a64
   2acc4:	63617041 	.word	0x63617041
   2acc8:	4d206568 	.word	0x4d206568
   2accc:	77656e79 	.word	0x77656e79
   2acd0:	00000074 	.word	0x00000074
   2acd4:	72617453 	.word	0x72617453
   2acd8:	676e6974 	.word	0x676e6974
   2acdc:	76646120 	.word	0x76646120
   2ace0:	69747265 	.word	0x69747265
   2ace4:	676e6973 	.word	0x676e6973
   2ace8:	0a2e2e2e 	.word	0x0a2e2e2e
   2acec:	00000000 	.word	0x00000000
   2acf0:	65736552 	.word	0x65736552
   2acf4:	6e697474 	.word	0x6e697474
   2acf8:	74732067 	.word	0x74732067
   2acfc:	3b657461 	.word	0x3b657461
   2ad00:	61657220 	.word	0x61657220
   2ad04:	3d6e6f73 	.word	0x3d6e6f73
   2ad08:	000a6425 	.word	0x000a6425
   2ad0c:	65737341 	.word	0x65737341
   2ad10:	40207472 	.word	0x40207472
   2ad14:	25783020 	.word	0x25783020
   2ad18:	00000a78 	.word	0x00000a78
   2ad1c:	65737341 	.word	0x65737341
   2ad20:	40207472 	.word	0x40207472
   2ad24:	25783020 	.word	0x25783020
   2ad28:	202d2078 	.word	0x202d2078
   2ad2c:	253a7325 	.word	0x253a7325
   2ad30:	00000a64 	.word	0x00000a64
   2ad34:	61686e55 	.word	0x61686e55
   2ad38:	656c646e 	.word	0x656c646e
   2ad3c:	6e692064 	.word	0x6e692064
   2ad40:	72726574 	.word	0x72726574
   2ad44:	20747075 	.word	0x20747075
   2ad48:	646c2528 	.word	0x646c2528
   2ad4c:	65202c29 	.word	0x65202c29
   2ad50:	70656378 	.word	0x70656378
   2ad54:	6e6f6974 	.word	0x6e6f6974
   2ad58:	20707320 	.word	0x20707320
   2ad5c:	30257830 	.word	0x30257830
   2ad60:	0a786c38 	.word	0x0a786c38
   2ad64:	00000000 	.word	0x00000000
   2ad68:	3a307220 	.word	0x3a307220
   2ad6c:	30257830 	.word	0x30257830
   2ad70:	20786c38 	.word	0x20786c38
   2ad74:	3a317220 	.word	0x3a317220
   2ad78:	30257830 	.word	0x30257830
   2ad7c:	20786c38 	.word	0x20786c38
   2ad80:	3a327220 	.word	0x3a327220
   2ad84:	30257830 	.word	0x30257830
   2ad88:	20786c38 	.word	0x20786c38
   2ad8c:	3a337220 	.word	0x3a337220
   2ad90:	30257830 	.word	0x30257830
   2ad94:	0a786c38 	.word	0x0a786c38
   2ad98:	00000000 	.word	0x00000000
   2ad9c:	3a347220 	.word	0x3a347220
   2ada0:	30257830 	.word	0x30257830
   2ada4:	20786c38 	.word	0x20786c38
   2ada8:	3a357220 	.word	0x3a357220
   2adac:	30257830 	.word	0x30257830
   2adb0:	20786c38 	.word	0x20786c38
   2adb4:	3a367220 	.word	0x3a367220
   2adb8:	30257830 	.word	0x30257830
   2adbc:	20786c38 	.word	0x20786c38
   2adc0:	3a377220 	.word	0x3a377220
   2adc4:	30257830 	.word	0x30257830
   2adc8:	0a786c38 	.word	0x0a786c38
   2adcc:	00000000 	.word	0x00000000
   2add0:	3a387220 	.word	0x3a387220
   2add4:	30257830 	.word	0x30257830
   2add8:	20786c38 	.word	0x20786c38
   2addc:	3a397220 	.word	0x3a397220
   2ade0:	30257830 	.word	0x30257830
   2ade4:	20786c38 	.word	0x20786c38
   2ade8:	3a303172 	.word	0x3a303172
   2adec:	30257830 	.word	0x30257830
   2adf0:	20786c38 	.word	0x20786c38
   2adf4:	3a313172 	.word	0x3a313172
   2adf8:	30257830 	.word	0x30257830
   2adfc:	0a786c38 	.word	0x0a786c38
   2ae00:	00000000 	.word	0x00000000
   2ae04:	3a323172 	.word	0x3a323172
   2ae08:	30257830 	.word	0x30257830
   2ae0c:	20786c38 	.word	0x20786c38
   2ae10:	3a726c20 	.word	0x3a726c20
   2ae14:	30257830 	.word	0x30257830
   2ae18:	20786c38 	.word	0x20786c38
   2ae1c:	3a637020 	.word	0x3a637020
   2ae20:	30257830 	.word	0x30257830
   2ae24:	20786c38 	.word	0x20786c38
   2ae28:	3a727370 	.word	0x3a727370
   2ae2c:	30257830 	.word	0x30257830
   2ae30:	0a786c38 	.word	0x0a786c38
   2ae34:	00000000 	.word	0x00000000
   2ae38:	52534349 	.word	0x52534349
   2ae3c:	2578303a 	.word	0x2578303a
   2ae40:	786c3830 	.word	0x786c3830
   2ae44:	53464820 	.word	0x53464820
   2ae48:	78303a52 	.word	0x78303a52
   2ae4c:	6c383025 	.word	0x6c383025
   2ae50:	46432078 	.word	0x46432078
   2ae54:	303a5253 	.word	0x303a5253
   2ae58:	38302578 	.word	0x38302578
   2ae5c:	000a786c 	.word	0x000a786c
   2ae60:	52414642 	.word	0x52414642
   2ae64:	2578303a 	.word	0x2578303a
   2ae68:	786c3830 	.word	0x786c3830
   2ae6c:	464d4d20 	.word	0x464d4d20
   2ae70:	303a5241 	.word	0x303a5241
   2ae74:	38302578 	.word	0x38302578
   2ae78:	000a786c 	.word	0x000a786c
   2ae7c:	6e69616d 	.word	0x6e69616d
   2ae80:	00000000 	.word	0x00000000
   2ae84:	656c6469 	.word	0x656c6469
   2ae88:	00000000 	.word	0x00000000
   2ae8c:	7379736d 	.word	0x7379736d
   2ae90:	0000315f 	.word	0x0000315f
   2ae94:	6c363025 	.word	0x6c363025
   2ae98:	00002075 	.word	0x00002075
   2ae9c:	74726175 	.word	0x74726175
   2aea0:	00000030 	.word	0x00000030

0002aea4 <log_console_handler>:
   2aea4:	00000000 0000f7b9 00000000 0000f895     ................
   2aeb4:	0000f855 00000000 00000000 0000f7bd     U...............
   2aec4:	00000000 0000f7c1 00000000 736e6f63     ............cons
   2aed4:	00656c6f 3d73745b 756c6c25 202c7375     ole.[ts=%lluus, 
   2aee4:	3d646f6d 6c207525 6c657665 2075253d     mod=%u level=%u 
   2aef4:	00000000 303d6869 25782578 25782578     ....ih=0x%x%x%x%
   2af04:	00000078 0000005d 6c646f6d 6d5f676f     x...]...modlog_m
   2af14:	69707061 705f676e 006c6f6f 74617473     apping_pool.stat
   2af24:	00000000 5f656c62 00006c6c              ....ble_ll..

0002af30 <g_ble_ll_pdu_header_tx_time>:
   2af30:	005001ce 02d0002c 5f656c62 635f6c6c     ..P.,...ble_ll_c
   2af40:	006e6e6f 636c6143 74616c75 20676e69     onn.Calculating 
   2af50:	73736553 206e6f69 2079654b 20726f66     Session Key for 
   2af60:	646e6168 253d656c 00000075 4b544c0a     handle=%u....LTK
   2af70:	0000003a 78323025 00000000 444b530a     :...%02x.....SKD
   2af80:	0000003a 7365530a 6e6f6973 79654b20     :....Session Key
   2af90:	0000003a 3a56490a 00000000              :....IV:....

0002af9c <g_ble_ll_ctrl_pkt_lengths>:
   2af9c:	1601070b 0100000c 00000808 17080105     ................
   2afac:	00000217 02020808 00010204 00010122     ............"...
   2afbc:	5f656c62 735f6c6c 5f6e6163 5f707564     ble_ll_scan_dup_
   2afcc:	6c6f6f70 00000000                       pool....

0002afd4 <g_ble_ll_supp_cmds>:
   2afd4:	00000020 00004000 00000000 22280000      ....@........("
	...
   2afec:	fffff700 0000000f 0ff9f000 07800000     ................
   2affc:	00000000                                ....

0002b000 <g_ble_sca_ppm_tbl>:
   2b000:	00fa01f4 00640096 0032004b 0014001e     ......d.K.2.....
   2b010:	5f656c62 00796870                       ble_phy.

0002b018 <g_ble_phy_chan_freq>:
   2b018:	0a080604 12100e0c 1c181614 2422201e     ............. "$
   2b028:	2c2a2826 3432302e 3c3a3836 4442403e     &(*,.02468:<>@BD
   2b038:	4c4a4846 501a024e                       FHJLN..P

0002b040 <g_ble_phy_t_rxaddrdelay>:
   2b040:	11020611                                ....

0002b044 <g_ble_phy_t_rxenddelay>:
   2b044:	1b020616                                ....

0002b048 <g_ble_phy_t_txdelay>:
   2b048:	05030405                                ....

0002b04c <g_ble_phy_t_txenddelay>:
   2b04c:	09030403 20504147 636f7270 72756465     ....GAP procedur
   2b05c:	6e692065 61697469 3a646574 76646120     e initiated: adv
   2b06c:	69747265 203b6573 00000000 20504147     ertise; ....GAP 
   2b07c:	636f7270 72756465 6e692065 61697469     procedure initia
   2b08c:	3a646574 6f747320 64612070 74726576     ted: stop advert
   2b09c:	6e697369 000a2e67 20504147 636f7270     ising...GAP proc
   2b0ac:	72756465 6e692065 61697469 3a646574     edure initiated:
   2b0bc:	6e616320 206c6563 6e6e6f63 69746365      cancel connecti
   2b0cc:	000a6e6f 5f656c62 5f706167 61647075     on..ble_gap_upda
   2b0dc:	00006574 5f656c62 00706167 63736964     te..ble_gap.disc
   2b0ec:	646f6d5f 64253d65 00000000 72696420     _mode=%d.... dir
   2b0fc:	5f746365 72646461 7079745f 64253d65     ect_addr_type=%d
   2b10c:	72696420 5f746365 72646461 0000003d      direct_addr=...
   2b11c:	76646120 6168635f 6c656e6e 70616d5f      adv_channel_map
   2b12c:	2064253d 5f6e776f 72646461 7079745f     =%d own_addr_typ
   2b13c:	64253d65 76646120 6c69665f 5f726574     e=%d adv_filter_
   2b14c:	696c6f70 253d7963 64612064 74695f76     policy=%d adv_it
   2b15c:	6d5f6c76 253d6e69 64612064 74695f76     vl_min=%d adv_it
   2b16c:	6d5f6c76 253d7861 00000064 6e6e6f63     vl_max=%d...conn
   2b17c:	69746365 70206e6f 6d617261 72657465     ection parameter
   2b18c:	64707520 3b657461 6e6f6320 61685f6e      update; conn_ha
   2b19c:	656c646e 2064253d 6c767469 6e696d5f     ndle=%d itvl_min
   2b1ac:	2064253d 6c767469 78616d5f 2064253d     =%d itvl_max=%d 
   2b1bc:	6574616c 3d79636e 73206425 72657075     latency=%d super
   2b1cc:	69736976 745f6e6f 6f656d69 253d7475     vision_timeout=%
   2b1dc:	696d2064 65635f6e 6e656c5f 2064253d     d min_ce_len=%d 
   2b1ec:	5f78616d 6c5f6563 253d6e65 00000064     max_ce_len=%d...
   2b1fc:	6e756f63 64253d74 00000020 72746e65     count=%d ...entr
   2b20c:	64252d79 64617b3d 745f7264 3d657079     y-%d={addr_type=
   2b21c:	61206425 3d726464 00000000 78323025     %d addr=....%02x
   2b22c:	3230253a 30253a78 253a7832 3a783230     :%02x:%02x:%02x:
   2b23c:	78323025 3230253a 00000078 0000207d     %02x:%02x...} ..
   2b24c:	746e6f63 6c6c6f72 72207265 726f7065     controller repor
   2b25c:	20646574 61766e69 2064696c 6f727265     ted invalid erro
   2b26c:	6f632072 69206564 6f63206e 6f636e6e     r code in connco
   2b27c:	656c706d 65206574 746e6576 7525203a     mplete event: %u
   2b28c:	00000000 20504147 636f7270 72756465     ....GAP procedur
   2b29c:	6e692065 61697469 3a646574 72657420     e initiated: ter
   2b2ac:	616e696d 63206574 656e6e6f 6f697463     minate connectio
   2b2bc:	63203b6e 5f6e6e6f 646e6168 253d656c     n; conn_handle=%
   2b2cc:	63682064 65725f69 6e6f7361 0a64253d     d hci_reason=%d.
   2b2dc:	00000000 20504147 636f7270 72756465     ....GAP procedur
   2b2ec:	6e692065 61697469 3a646574 00000020     e initiated: ...
   2b2fc:	20504147 636f7270 72756465 6e692065     GAP procedure in
   2b30c:	61697469 3a646574 74657320 69687720     itiated: set whi
   2b31c:	696c6574 203b7473 00000000 28030010     telist; .......(
   2b32c:	28020010 28000010                       ...(...(

0002b334 <ble_gattc_err_dispatch>:
   2b334:	0001bbff 0001bc57 0001bcbb 0001bd6b     ....W.......k...
   2b344:	0001bdd3 0001be37 0001bea3 0001bf4b     ....7.......K...
   2b354:	0001bfcb 0001c03f 0001c0ab 0001c399     ....?...........
   2b364:	0001c443 0001c423 0001ca99 5f656c62     C...#.......ble_
   2b374:	74746167 72705f63 705f636f 006c6f6f     gattc_proc_pool.
   2b384:	5f656c62 74746167 00000063 69646e69     ble_gattc...indi
   2b394:	65746163 0000203b 69746f6e 203b7966     cate; ..notify; 
   2b3a4:	00000000 54544147 6f727020 75646563     ....GATT procedu
   2b3b4:	69206572 6974696e 64657461 7325203a     re initiated: %s
   2b3c4:	00000000 64616572 0000203b 5f747461     ....read; ..att_
   2b3d4:	646e6168 253d656c 00000a64              handle=%d...

0002b3e0 <ble_gattc_resume_dispatch>:
   2b3e0:	00000000 0001c91d 0001c895 0001c7fd     ................
   2b3f0:	0001c771 0001c6ed 0001c667 00000000     q.......g.......
   2b400:	00000000 0001c5c1 00000000 00000000     ................
   2b410:	0001c583 0001c4f1 00000000              ............

0002b41c <ble_gattc_rx_exec_entries>:
   2b41c:	0000000c 0001c0f9 0000000d 0001c169     ............i...

0002b42c <ble_gattc_rx_prep_entries>:
   2b42c:	0000000c 0001cde7 0000000d 0001cd57     ............W...

0002b43c <ble_gattc_rx_read_rsp_entries>:
   2b43c:	00000007 0001bf55 00000009 0001c5e7     ....U...........
   2b44c:	00000003 0001cce5                       ........

0002b454 <ble_gattc_rx_read_type_complete_entries>:
   2b454:	00000003 0001c823 00000004 0001c797     ....#...........
   2b464:	00000005 0001c713 00000008 0001bfd5     ................

0002b474 <ble_gattc_rx_read_type_elem_entries>:
   2b474:	00000003 0001cbbd 00000004 0001cb41     ............A...
   2b484:	00000005 0001cc4b 00000008 0001ca55     ....K.......U...

0002b494 <ble_gattc_tmo_dispatch>:
   2b494:	0001bbf1 0001bc49 0001bcad 0001bd5d     ....I.......]...
   2b4a4:	0001bdc5 0001be29 0001be95 0001bf3d     ....).......=...
   2b4b4:	0001bfbd 0001c031 0001c09d 0001c38d     ....1...........
   2b4c4:	0001c0ed 0001c15d 0001c331 28030010     ....]...1......(
   2b4d4:	5f656c62 74746167 00000073 5f656c62     ble_gatts...ble_
   2b4e4:	74746167 6c635f73 66635f74 6f705f67     gatts_clt_cfg_po
   2b4f4:	00006c6f 5f656c62 685f7368 655f6963     ol..ble_hs_hci_e
   2b504:	6f705f76 00006c6f 5f656c62 00007368     v_pool..ble_hs..
   2b514:	6c696146 74206465 6572206f 726f7473     Failed to restor
   2b524:	52492065 6620734b 206d6f72 726f7473     e IRKs from stor
   2b534:	73203b65 75746174 64253d73 0000000a     e; status=%d....
   2b544:	5f656c62 635f7368 5f6e6e6f 6c6f6f70     ble_hs_conn_pool
   2b554:	00000000 5f656c62 685f7368 665f6963     ....ble_hs_hci_f
   2b564:	00676172                                rag.

0002b568 <ble_hs_hci_evt_dispatch>:
   2b568:	0000003e 0001f921 00000013 0001fa21     >...!.......!...
   2b578:	00000005 0001f9ef 00000008 0001f9db     ................
   2b588:	00000030 0001f9c7 00000010 0001f9b3     0...............

0002b598 <ble_hs_hci_evt_le_dispatch>:
   2b598:	00000000 0001fc19 0001fb15 0001fcbb     ................
   2b5a8:	0001fca7 0001fc93 0001fc7f 00000000     ................
	...
   2b5c0:	0001fb93 0001fa97 0001fa83 0001f993     ................
   2b5d0:	0001f997 0001f99b 0001f99f 0001f9a7     ................
   2b5e0:	0001f9ab 0001f9af 00000000 00000000     ................
	...
   2b5f8:	0001f9a3 65766461 73697472 74207265     ....advertiser t
   2b608:	72777078 74756f20 20666f20 676e6172     xpwr out of rang
   2b618:	00000a65 6c696166 74206465 6f63206f     e...failed to co
   2b628:	6769666e 20657275 74736572 6465726f     nfigure restored
   2b638:	4b524920 0000000a                        IRK....

0002b640 <ble_hs_pvcy_default_irk>:
   2b640:	16e28def 0d43ec4f 34dd5bbf b81e53c0     ....O.C..[.4.S..
   2b650:	5f656c62 735f7368 5f706f74 6d726574     ble_hs_stop_term
   2b660:	74616e69 69745f65 756f656d 62635f74     inate_timeout_cb
   2b670:	2064252c 6e6e6f63 69746365 73286e6f     ,%d connection(s
   2b680:	74732029 206c6c69 0a207075 00000000     ) still up .....
   2b690:	5f656c62 6163326c 68635f70 705f6e61     ble_l2cap_chan_p
   2b6a0:	006c6f6f 5f656c62 6163326c 00000070     ool.ble_l2cap...

0002b6b0 <ble_l2cap_sig_dispatch>:
   2b6b0:	00000000 00020b91 00000000 00020a2d     ............-...
   2b6c0:	00000000 00020a2d 00020a2d 00020a2d     ....-...-...-...
   2b6d0:	00000000 00020a2d 00000000 00020a2d     ....-.......-...
   2b6e0:	00000000 00020a2d 00000000 00020a2d     ....-.......-...
   2b6f0:	00000000 00020a2d 00020c75 00020ba5     ....-...u.......
   2b700:	00020a2d 00020a2d 00020a2d 00020a2d     -...-...-...-...
   2b710:	00020a2d 00020a2d 00020a2d 5f656c62     -...-...-...ble_
   2b720:	6163326c 69735f70 72705f67 705f636f     l2cap_sig_proc_p
   2b730:	006c6f6f                                ool.

0002b734 <ble_sm_dispatch>:
   2b734:	00000000 00021ec3 000220ff 00022051     ......... ..Q ..
   2b744:	000225db 00021a15 00021e3d 00021dc3     .%......=.......
   2b754:	00021d43 00021cc9 00021c49 000227ab     C.......I....'..
   2b764:	000230c9 000232c3 00021001 5f656c62     .0...2......ble_
   2b774:	705f6d73 5f636f72 6c6f6f70 00000000     sm_proc_pool....
   2b784:	5f656c62 705f6d73 5f726961 6c696166     ble_sm_pair_fail
   2b794:	2078745f 6c696166 202c6465 3d206372     _tx failed, rc =
   2b7a4:	0a642520 00000000                        %d.....

0002b7ac <ble_sm_state_dispatch>:
   2b7ac:	00022527 000217e7 000217d5 00021733     '%..........3...
   2b7bc:	00021787 000216a5 00021697 000213bf     ................
   2b7cc:	0002122d 00022fed 000231d9              -..../...1..

0002b7d8 <ble_sm_sc_init_ioa>:
   2b7d8:	00020000 02040002 03030400 00030002     ................
   2b7e8:	00000000 00020403 00000004              ............

0002b7f4 <ble_sm_sc_resp_ioa>:
   2b7f4:	00030000 03040003 02020400 00020002     ................
   2b804:	00000000 00030402 00000004              ............

0002b810 <ble_uuid_base>:
   2b810:	5f9b34fb 80000080 00001000 00000000     .4._............
   2b820:	5f656c62 00747461                       ble_att.

0002b828 <ble_att_rx_dispatch>:
   2b828:	00000001 00023d6f 00000002 00025199     ....o=.......Q..
   2b838:	00000003 00023d97 00000004 0002522d     .....=......-R..
   2b848:	00000005 00023e33 00000006 00025297     ....3>.......R..
   2b858:	00000007 00023ec9 00000008 0002530f     .....>.......S..
   2b868:	00000009 00023f47 0000000a 000253b7     ....G?.......S..
   2b878:	0000000b 00023fe3 0000000c 00025433     .....?......3T..
   2b888:	0000000d 00024021 0000000e 000254b3     ....!@.......T..
   2b898:	0000000f 0002402f 00000010 000254ef     ..../@.......T..
   2b8a8:	00000011 00024087 00000012 000255b1     .....@.......U..
   2b8b8:	00000013 000240df 00000016 00025673     .....@......sV..
   2b8c8:	00000017 0002414f 00000018 00025725     ....OA......%W..
   2b8d8:	00000019 000241b7 0000001b 000257d9     .....A.......W..
   2b8e8:	0000001d 00025817 0000001e 00024243     .....X......CB..
   2b8f8:	00000052 0002561d 5f656c62 5f747461     R....V..ble_att_
   2b908:	5f727673 70657270 746e655f 705f7972     svr_prep_entry_p
   2b918:	006c6f6f 5f656c62 5f747461 5f727673     ool.ble_att_svr_
   2b928:	72746e65 6f705f79 00006c6f              entry_pool..

0002b934 <ble_sm_alg_dbg_priv_key>:
   2b934:	d4f6493f 385fc5a3 e3b3c974 503f10d2     ?I...._8t.....?P
   2b944:	7b60ff4a 99b740eb a6b89958 bd1a3ccd     J.`{.@..X....<..
   2b954:	00000077 0000316e 0000326e 6b63616d     w...n1..n2..mack
   2b964:	00007965 006b746c 00000072 61636f69     ey..ltk.r...ioca
   2b974:	00000070 00743161 00003161 00743261     p...a1t.a1..a2t.
   2b984:	00003261 00736572 00000076 00000079     a2..res.v...y...

0002b994 <curve_secp256r1>:
   2b994:	01002008 ffffffff ffffffff ffffffff     . ..............
	...
   2b9b0:	00000001 ffffffff fc632551 f3b9cac2     ........Q%c.....
   2b9c0:	a7179e84 bce6faad ffffffff ffffffff     ................
   2b9d0:	00000000 ffffffff d898c296 f4a13945     ............E9..
   2b9e0:	2deb33a0 77037d81 63a440f2 f8bce6e5     .3.-.}.w.@.c....
   2b9f0:	e12c4247 6b17d1f2 37bf51f5 cbb64068     GB,....k.Q.7h@..
   2ba00:	6b315ece 2bce3357 7c0f9e16 8ee7eb4a     .^1kW3.+...|J...
   2ba10:	fe1a7f9b 4fe342e2 27d2604b 3bce3c3e     .....B.OK`.'><.;
   2ba20:	cc53b0f6 651d06b0 769886bc b3ebbd55     ..S....e...vU...
   2ba30:	aa3a93e7 5ac635d8 0002727f 000273d9     ..:..5.Z.r...s..
   2ba40:	00026f21                                !o..

0002ba44 <salt.12214>:
   2ba44:	9183886c 38a5f5aa db0b3760 be83605a     l......8`7..Z`..

0002ba54 <ble_svc_gap_defs>:
   2ba54:	00000001 20000184 00000000 20000190     ....... ....... 
	...
   2ba74:	5f656c62 5f696368 5f6d6172 5f646d63     ble_hci_ram_cmd_
   2ba84:	6c6f6f70 00000000 5f656c62 5f696368     pool....ble_hci_
   2ba94:	5f6d6172 5f747665 705f6968 006c6f6f     ram_evt_hi_pool.
   2baa4:	5f656c62 5f696368 5f6d6172 5f747665     ble_hci_ram_evt_
   2bab4:	705f6f6c 006c6f6f                       lo_pool.

0002babc <sysflash_map_dflt>:
	...
   2bac4:	00008000 00000001 0000c000 00076000     .............`..
   2bad4:	00000002 00082000 00076000 00000003     ..... ...`......
   2bae4:	000f8000 00004000 00000010 00008000     .....@..........
   2baf4:	00004000 00000011 000fc000 00004000     .@...........@..
   2bb04:	00000000 01000000 02000000 04000000     ................
   2bb14:	08000000 10000000 20000000 40000000     ........... ...@
   2bb24:	80000000 1b000000 36000000              ...........6

0002bb30 <sbox>:
   2bb30:	7b777c63 c56f6bf2 2b670130 76abd7fe     c|w{.ko.0.g+...v
   2bb40:	7dc982ca f04759fa afa2d4ad c072a49c     ...}.YG.......r.
   2bb50:	2693fdb7 ccf73f36 f1e5a534 1531d871     ...&6?..4...q.1.
   2bb60:	c323c704 9a059618 e2801207 75b227eb     ..#..........'.u
   2bb70:	1a2c8309 a05a6e1b b3d63b52 842fe329     ..,..nZ.R;..)./.
   2bb80:	ed00d153 5bb1fc20 39becb6a cf584c4a     S... ..[j..9JLX.
   2bb90:	fbaaefd0 85334d43 7f02f945 a89f3c50     ....CM3.E...P<..
   2bba0:	8f40a351 f5389d92 21dab6bc d2f3ff10     Q.@...8....!....
   2bbb0:	ec130ccd 1744975f 3d7ea7c4 73195d64     ...._.D...~=d].s
   2bbc0:	dc4f8160 88902a22 14b8ee46 db0b5ede     `.O."*..F....^..
   2bbd0:	0a3a32e0 5c240649 62acd3c2 79e49591     .2:.I.$\...b...y
   2bbe0:	6d37c8e7 a94ed58d eaf4566c 08ae7a65     ..7m..N.lV..ez..
   2bbf0:	2e2578ba c6b4a61c 1f74dde8 8a8bbd4b     .x%.......t.K...
   2bc00:	66b53e70 0ef60348 b9573561 9e1dc186     p>.fH...a5W.....
   2bc10:	1198f8e1 948ed969 e9871e9b df2855ce     ....i........U(.
   2bc20:	0d89a18c 6842e6bf 0f2d9941 16bb54b0     ......BhA.-..T..

0002bc30 <curve_secp256r1>:
   2bc30:	01002008 ffffffff ffffffff ffffffff     . ..............
	...
   2bc4c:	00000001 ffffffff fc632551 f3b9cac2     ........Q%c.....
   2bc5c:	a7179e84 bce6faad ffffffff ffffffff     ................
   2bc6c:	00000000 ffffffff d898c296 f4a13945     ............E9..
   2bc7c:	2deb33a0 77037d81 63a440f2 f8bce6e5     .3.-.}.w.@.c....
   2bc8c:	e12c4247 6b17d1f2 37bf51f5 cbb64068     GB,....k.Q.7h@..
   2bc9c:	6b315ece 2bce3357 7c0f9e16 8ee7eb4a     .^1kW3.+...|J...
   2bcac:	fe1a7f9b 4fe342e2 27d2604b 3bce3c3e     .....B.OK`.'><.;
   2bcbc:	cc53b0f6 651d06b0 769886bc b3ebbd55     ..S....e...vU...
   2bccc:	aa3a93e7 5ac635d8 0002727f 000273d9     ..:..5.Z.r...s..
   2bcdc:	00026f21 00007325 0000203a 0000202c     !o..%s..: .., ..
   2bcec:	00006325 0063255c 3025755c 5c586c34     %c..\%c.\u%04lX\
   2bcfc:	34302575 0000586c 3025755c 00586c34     u%04lX..\u%04lX.
   2bd0c:	0000005b 0000007b 0000007d 65757274     [...{...}...true
   2bd1c:	00000000 736c6166 00000065 0000205f     ....false..._ ..
   2bd2c:	756c6c25 00000000 6c6c252d 00000075     %llu....-%llu...
   2bd3c:	3438312d 34373634 33373034 35393037     -184467440737095
   2bd4c:	31363135 00000036 00002768 00000027     51616...h'..'...
   2bd5c:	00000022 756c6c25 00000028 00000029     "...%llu(...)...
   2bd6c:	706d6973 2528656c 00002975 6c6c756e     simple(%u)..null
   2bd7c:	00000000 65646e75 656e6966 00000064     ....undefined...
   2bd8c:	61766e69 0064696c                       invalid.

0002bd94 <nrf52k_flash_dev>:
   2bd94:	0002bdac 00000000 00100000 00000100     ................
   2bda4:	00000001 000000ff                       ........

0002bdac <nrf52k_flash_funcs>:
   2bdac:	00028da5 00028cd5 00028c55 00028cad     ........U.......
   2bdbc:	00000000 00028ca9 00000000              ............

0002bdc8 <os_bsp_uart0_cfg>:
   2bdc8:	07050806                                ....

0002bdcc <nrf52_hal_timers>:
	...
   2bde0:	2000479c                                .G. 

0002bde4 <stdout>:
   2bde4:	20000218                                ... 

0002bde8 <MemFile_methods>:
   2bde8:	0002a29d 00000000                       ........

/home/crepel/Documents/EPFL/bluetooth_stuff/Link_layer_security/firmware_project/bin/targets/nordic_adv/app/apps/advertiser/advertiser.elf:     file format elf32-littlearm

arm-none-eabi-objdump: section '.rodata' mentioned in a -j option, but not found in any input file
   text	   data	    bss	    dec	    hex	filename
 130536	    292	  18108	 148936	  245c8	/home/crepel/Documents/EPFL/bluetooth_stuff/Link_layer_security/firmware_project/bin/targets/nordic_adv/app/apps/advertiser/advertiser.elf
