
/home/crepel/Documents/EPFL/bluetooth_stuff/Link_layer_security/firmware_project/bin/targets/my_blinky_nordic/app/apps/blinky/blinky.elf:     file format elf32-littlearm
/home/crepel/Documents/EPFL/bluetooth_stuff/Link_layer_security/firmware_project/bin/targets/my_blinky_nordic/app/apps/blinky/blinky.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0000c121

Program Header:
0x70000001 off    0x0000eca4 vaddr 0x0000eca4 paddr 0x0000eca4 align 2**2
         filesz 0x00000018 memsz 0x00000018 flags r--
    LOAD off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**16
         filesz 0x0000ecbc memsz 0x0000ecbc flags rwx
    LOAD off    0x00010100 vaddr 0x20000100 paddr 0x0000ecbc align 2**16
         filesz 0x0000002c memsz 0x0000002c flags rw-
    LOAD off    0x00010130 vaddr 0x20000130 paddr 0x0000ece8 align 2**16
         filesz 0x00000000 memsz 0x00002154 flags rw-
    LOAD off    0x00020000 vaddr 0x20000000 paddr 0x20000000 align 2**16
         filesz 0x00000000 memsz 0x00000100 flags rw-
private flags = 5000200: [Version5 EABI] [soft-float ABI]

Sections:
Idx Name               Size      VMA       LMA       File off  Algn  Flags
  0 .imghdr            00000020  0000c000  0000c000  0000c000  2**0  ALLOC
  1 .text              00002c84  0000c020  0000c020  0000c020  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.extab         00000000  0000eca4  0000eca4  0001012c  2**0  CONTENTS
  3 .ARM.exidx         00000018  0000eca4  0000eca4  0000eca4  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .vector_relocation 00000100  20000000  20000000  00020000  2**0  ALLOC
  5 .rtt               00000000  20000100  20000100  0001012c  2**0  CONTENTS
  6 .data              0000002c  20000100  0000ecbc  00010100  2**2  CONTENTS, ALLOC, LOAD, DATA
  7 .bssnz             00000000  2000012c  2000012c  0001012c  2**0  CONTENTS
  8 .bss               00002154  20000130  0000ece8  00010130  2**3  ALLOC
  9 .stack_dummy       000001b0  20002288  20002288  00010130  2**3  CONTENTS, READONLY
 10 .ARM.attributes    0000002a  00000000  00000000  000102e0  2**0  CONTENTS, READONLY
 11 .comment           0000007f  00000000  00000000  0001030a  2**0  CONTENTS, READONLY
 12 .svc_table         00000004  00000000  00000000  00010389  2**0  CONTENTS, READONLY
 13 .debug_line        0000d492  00000000  00000000  0001038d  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_info        0001eeac  00000000  00000000  0001d81f  2**0  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev      00005c44  00000000  00000000  0003c6cb  2**0  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges     00000dd0  00000000  00000000  00042310  2**3  CONTENTS, READONLY, DEBUGGING
 17 .debug_str         00004b23  00000000  00000000  000430e0  2**0  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc         00009c4d  00000000  00000000  00047c03  2**0  CONTENTS, READONLY, DEBUGGING
 19 .debug_ranges      00000c30  00000000  00000000  00051850  2**0  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame       000021b4  00000000  00000000  00052480  2**2  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
0000c000 l    d  .imghdr	00000000 .imghdr
0000c020 l    d  .text	00000000 .text
0000eca4 l    d  .ARM.extab	00000000 .ARM.extab
0000eca4 l    d  .ARM.exidx	00000000 .ARM.exidx
20000000 l    d  .vector_relocation	00000000 .vector_relocation
20000100 l    d  .rtt	00000000 .rtt
20000100 l    d  .data	00000000 .data
2000012c l    d  .bssnz	00000000 .bssnz
20000130 l    d  .bss	00000000 .bss
20002288 l    d  .stack_dummy	00000000 .stack_dummy
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .svc_table	00000000 .svc_table
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 gcc_startup_nrf52840.o
000001b0 l       *ABS*	00000000 Stack_Size
00000000 l       *ABS*	00000000 Heap_Size
0000c128 l       .text	00000000 .bss_zero_loop
00000000 l    df *ABS*	00000000 sbrk.c
20000100 l     O .data	00000004 sbrkBase
20000104 l     O .data	00000004 sbrkLimit
20000108 l     O .data	00000004 brk
00000000 l    df *ABS*	00000000 hal_system.c
00000000 l    df *ABS*	00000000 system_nrf52.c
0000c234 l     F .text	00000024 errata_36
0000c258 l     F .text	00000024 errata_98
0000c27c l     F .text	00000024 errata_103
0000c2a0 l     F .text	00000024 errata_115
0000c2c4 l     F .text	00000024 errata_120
0000c2e8 l     F .text	00000024 errata_121
00000000 l    df *ABS*	00000000 start.c
00000000 l    df *ABS*	00000000 main.c
20000130 l     O .bss	00000004 g_task1_loops
00000000 l    df *ABS*	00000000 my_blinky_nordic-sysinit-app.c
00000000 l    df *ABS*	00000000 cmsis_nvic.c
00000000 l    df *ABS*	00000000 hal_gpio.c
00000000 l    df *ABS*	00000000 os.c
0000c628 l     F .text	0000001e os_main
20000238 l     O .bss	00001000 g_os_main_stack
20000138 l     O .bss	00000100 g_idle_task_stack
00000000 l    df *ABS*	00000000 os_callout.c
00000000 l    df *ABS*	00000000 os_dev.c
0000c8b0 l     F .text	0000005c os_dev_add
0000c90c l     F .text	00000026 os_dev_initialize
0000c932 l     F .text	00000020 os_dev_init
20001238 l     O .bss	00000008 g_os_dev_list
00000000 l    df *ABS*	00000000 os_eventq.c
20001240 l     O .bss	00000010 os_eventq_main
00000000 l    df *ABS*	00000000 os_mempool.c
0000ca64 l     F .text	00000078 os_mempool_init_internal
00000000 l    df *ABS*	00000000 os_msys.c
0000cb4c l     F .text	00000058 os_msys_init_once
20001250 l     O .bss	00000db0 os_msys_1_data
20002000 l     O .bss	0000000c os_msys_1_mbuf_pool
2000200c l     O .bss	0000001c os_msys_1_mempool
20000110 l     O .data	00000008 g_msys_pool_list
00000000 l    df *ABS*	00000000 os_sanity.c
0000cbe8 l     F .text	00000020 os_sanity_check_list_lock
0000cc08 l     F .text	0000001c os_sanity_check_list_unlock
00000000 l    df *ABS*	00000000 os_sched.c
00000000 l    df *ABS*	00000000 os_task.c
0000cf80 l     F .text	00000018 _clear_stack
00000000 l    df *ABS*	00000000 os_time.c
0000d088 l     F .text	0000004c os_deltatime
0000d0d4 l     F .text	00000064 os_time_tick
20002030 l     O .bss	00000030 basetod
00000000 l    df *ABS*	00000000 os_arch_arm.c
0000d1b2 l     F .text	00000002 os_arch_task_return_handler
00000000 l    df *ABS*	00000000 os_fault.c
00000000 l    df *ABS*	00000000 os_mbuf.c
00000000 l    df *ABS*	00000000 os_mutex.c
00000000 l    df *ABS*	00000000 HAL_CM4.o
0000d59c l       .text	00000000 SVC_User
0000d5ba l       .text	00000000 SVC_Done
00000000 l    df *ABS*	00000000 memcpy.c
0000d62e l       .text	00000000 test1
0000d62a l       .text	00000000 loop1
0000d63c l       .text	00000000 test2
0000d638 l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 flash_map.c
0000d68c l     F .text	0000003c flash_area_find_idx
0000d6c8 l     F .text	00000058 flash_map_area_overlaps
0000d720 l     F .text	0000007c flash_map_add_new_dflt_areas
0000d79c l     F .text	00000078 flash_map_read_mfg
20002064 l     O .bss	00000078 mfg_areas.8234
00000000 l    df *ABS*	00000000 modlog.c
00000000 l    df *ABS*	00000000 mfg.c
0000d8fc l     F .text	00000094 mfg_seek_next_aux
0000d990 l     F .text	00000070 mfg_read_mmr
0000da00 l     F .text	00000054 mfg_read_next_mmr
0000da54 l     F .text	00000044 mfg_open_flash_area
0000da98 l     F .text	00000044 mfg_read_tlv_body
0000db6c l     F .text	0000004e mfg_read_mmr_refs
200020dc l     O .bss	00000001 mfg_initialized
200020e0 l     O .bss	00000018 mfg_mmrs
200020f8 l     O .bss	00000004 mfg_num_mmrs
00000000 l    df *ABS*	00000000 sysinit.c
0000dbba l     F .text	00000006 sysinit_dflt_panic_cb
00000000 l    df *ABS*	00000000 mem.c
00000000 l    df *ABS*	00000000 hal_bsp.c
00000000 l    df *ABS*	00000000 hal_flash.c
0000dc24 l     F .text	0000001e hal_flash_check_addr
00000000 l    df *ABS*	00000000 hal_flash.c
0000dcc0 l     F .text	00000028 nrf52k_flash_wait_ready
0000dce8 l     F .text	00000054 nrf52k_flash_erase_sector
0000dd3c l     F .text	00000004 nrf52k_flash_init
0000dd40 l     F .text	00000028 nrf52k_flash_sector_info
0000dd68 l     F .text	000000d0 nrf52k_flash_write
0000de38 l     F .text	0000000e nrf52k_flash_read
0000ec64 l     O .text	0000001c nrf52k_flash_funcs
00000000 l    df *ABS*	00000000 hal_os_tick.c
0000de48 l     F .text	000000f4 nrf52_timer_handler
00000000 l    df *ABS*	00000000 hal_watchdog.c
0000e094 l     F .text	00000016 nrf52_hal_wdt_default_handler
0000e0ac l     F .text	00000020 nrf52_wdt_irq_handler
00000000 l    df *ABS*	00000000 nrf52_periph.c
0000e170 l     F .text	00000044 nrf52_periph_create_timers
0000e1b4 l     F .text	00000044 nrf52_periph_create_uart
200020fc l     O .bss	0000003c os_bsp_uart0
0000ec88 l     O .text	00000004 os_bsp_uart0_cfg
00000000 l    df *ABS*	00000000 hal_timer.c
0000e204 l     F .text	0000000a nrf_read_timer_cntr
0000e210 l     F .text	000000f4 nrf_timer_set_ocmp
0000e304 l     F .text	0000000a nrf_timer_disable_ocmp
0000e30e l     F .text	00000010 nrf_rtc_disable_ocmp
0000e320 l     F .text	00000054 hal_timer_read_bsptimer
0000e374 l     F .text	00000070 hal_timer_chk_queue
0000e3e4 l     F .text	0000002c hal_timer_irq_handler
0000ec8c l     O .text	00000018 nrf52_hal_timers
00000000 l    df *ABS*	00000000 os_cputime.c
00000000 l    df *ABS*	00000000 uart_hal.c
0000e584 l     F .text	00000022 uart_hal_blocking_tx
0000e5a6 l     F .text	00000022 uart_hal_start_rx
0000e5c8 l     F .text	00000022 uart_hal_start_tx
0000e5ea l     F .text	00000030 uart_hal_resume
0000e61a l     F .text	0000002e uart_hal_suspend
0000e648 l     F .text	00000016 uart_hal_close
0000e65e l     F .text	0000008a uart_hal_open
00000000 l    df *ABS*	00000000 hal_uart.c
0000e750 l     F .text	00000020 hal_uart_tx_fill_buf
0000e770 l     F .text	00000072 uart_irq_handler
0000e7e4 l     F .text	00000014 uart0_irq_handler
0000e7f8 l     F .text	00000014 uart1_irq_handler
0000e80c l     F .text	000000f0 hal_uart_baudrate
20002138 l     O .bss	0000001c uart0
20002154 l     O .bss	0000001c uart1
00000000 l    df *ABS*	00000000 my_blinky_nordic-sysflash.c
00000000 l    df *ABS*	00000000 SVC_Table.S
00000000 l       .svc_table	00000000 SVC_End
0000d2dc g     F .text	00000030 os_arch_start
20002288 g       .bss	00000000 __HeapBase
20002240 g     O .bss	00000008 g_os_task_list
0000c5a4 g     F .text	00000084 os_idle_task
00000000 g       .svc_table	00000000 SVC_Count
0000c18e  w    F .text	00000002 TIMER2_IRQHandler
0000c188  w    F .text	00000002 DebugMon_Handler
20002224 g     O .bss	00000008 g_os_mempool_list
0000c18e  w    F .text	00000002 RTC0_IRQHandler
0000c9ea g     F .text	00000070 os_eventq_put
20000100 g       .data	00000000 __data_start__
0000ec4c g     O .text	00000018 nrf52k_flash_dev
0000c18e  w    F .text	00000002 SWI0_EGU0_IRQHandler
0000c518 g     F .text	00000034 hal_gpio_write
0000d24c g     F .text	0000008c os_arch_os_init
0000c17e  w    F .text	00000002 HardFault_Handler
0000e420 g     F .text	00000060 hal_timer_init
0000daee g     F .text	0000001a mfg_seek_next_with_type
0000d30c g     F .text	0000005c os_arch_os_start
0000c18e  w    F .text	00000002 SWI2_EGU2_IRQHandler
0000d5ea g     F .text	0000000c SysTick_Handler
0000c18e  w    F .text	00000002 GPIOTE_IRQHandler
0000e410 g     F .text	00000010 nrf52_timer0_irq_handler
0000c18e  w    F .text	00000002 PWM1_IRQHandler
20002250 g     O .bss	00000004 flash_map
0000d5c0 g     F .text	0000002a PendSV_Handler
0000c17c  w    F .text	00000002 NMI_Handler
0000ecbc g       .ARM.exidx	00000000 __exidx_end
0000c020 g       .text	00000000 __isr_vector_start
0000d1c0 g     F .text	00000014 os_arch_ctx_sw
0000e6e8 g     F .text	00000068 uart_hal_init
0000c1bc g     F .text	0000002c hal_system_reset
0000c654 g     F .text	00000088 os_init_idle_task
20000128 g       .data	00000000 __aeabi_unwind_cpp_pr0
0000cd7c g     F .text	0000000c os_sched_set_current_task
0000c18e  w    F .text	00000002 POWER_CLOCK_IRQHandler
0000ecbc g       .ARM.exidx	00000000 __etext
0000c18e  w    F .text	00000002 RADIO_IRQHandler
0000d3c0 g     F .text	000000c0 os_mutex_release
0000cc34 g     F .text	00000024 os_sanity_check_register
2000012c g       .bssnz	00000000 __bssnz_start__
0000d18c g     F .text	00000026 os_time_delay
0000c18e  w    F .text	00000002 PDM_IRQHandler
0000db08 g     F .text	0000000a mfg_read_tlv_flash_area
0000caf0 g     F .text	00000010 os_mempool_module_init
0000c18e  w    F .text	00000002 TEMP_IRQHandler
0000d1e6 g     F .text	0000000a os_arch_in_critical
0000c18e  w    F .text	00000002 QDEC_IRQHandler
0000c18e  w    F .text	00000002 TIMER3_IRQHandler
0000d1b4 g     F .text	0000000a timer_handler
0000cd88 g     F .text	00000090 os_sched_sleep
0000d628 g     F .text	0000001a memcpy
0000c18e  w    F .text	00000002 PWM3_IRQHandler
0000e0cc g     F .text	00000080 hal_watchdog_init
0000e578 g     F .text	0000000c os_cputime_init
00000020 g       *ABS*	00000000 _imghdr_size
0000cd40 g     F .text	00000030 os_sched_ctx_sw_hook
0000c18e  w    F .text	00000002 FPU_IRQHandler
0000c18e  w    F .text	00000002 USBD_IRQHandler
2000010c g     O .data	00000004 SystemCoreClock
0000c1a0 g     F .text	0000000c hal_system_init
0000c18e  w    F .text	00000002 SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler
0000d1f0 g     F .text	00000044 os_arch_task_stack_init
0000d848 g     F .text	00000026 flash_area_read
0000d36c g     F .text	0000001c __assert_func
0000cedc g     F .text	00000048 os_sched_wakeup_ticks
0000c184  w    F .text	00000002 UsageFault_Handler
2000221c g     O .bss	00000008 g_callout_list
0000c18e  w    F .text	00000002 UARTE0_UART0_IRQHandler
2003fe50 g       *ABS*	00000000 __HeapLimit
20000130 g       .bss	00000000 __bss_start__
0000c1ac g     F .text	00000010 hal_debugger_connected
0000c18e  w    F .text	00000002 TIMER4_IRQHandler
20002238 g     O .bss	00000004 g_current_task
0000cc58 g     F .text	00000084 os_sanity_run
0000d1d4 g     F .text	0000000c os_arch_save_sr
0000eba4 g     F .text	00000048 hal_uart_close
0000cadc g     F .text	00000014 os_mempool_init
20002170 g     O .bss	00000004 g_led_pin
20002248 g     O .bss	00000001 g_task_id
0000e9e4 g     F .text	00000064 hal_uart_blocking_tx
0000eca4 g       .text	00000000 __exidx_start
0000ccdc g     F .text	00000010 os_sanity_init
0000db12 g     F .text	0000000a mfg_read_tlv_mmr_ref
0000d560 g     F .text	00000014 os_set_env
0000dc08 g     F .text	00000010 hal_bsp_flash_dev
0000e1f8 g     F .text	0000000c nrf52_periph_create
2000222c g     O .bss	0000000c g_os_sanity_check_mu
0000c18e  w    F .text	00000002 CRYPTOCELL_IRQHandler
0000df3c g     F .text	000000b0 os_tick_idle
0000c18e  w    F .text	00000002 I2S_IRQHandler
0000c434 g     F .text	00000002 _init
0000c18e  w    F .text	00000002 SWI4_EGU4_IRQHandler
0000dfec g     F .text	000000a8 os_tick_init
0000c18e  w    F .text	00000002 TIMER0_IRQHandler
0000c6dc g     F .text	000000d0 os_init
0000c120 g     F .text	0000005c Reset_Handler
0000c18e  w    F .text	00000002 UARTE1_IRQHandler
20002258 g     O .bss	00000001 sysinit_active
0000d3a0 g     F .text	0000000a os_mbuf_pool_init
0000c588 g     F .text	0000001a hal_gpio_toggle
0000d5f6 g     F .text	0000001e os_default_irq_asm
0000cf24 g     F .text	0000000c os_sched_next_task
0000ccec g     F .text	00000054 os_sched_insert
0000db1c g     F .text	00000040 mfg_init
0000c9c0 g     F .text	00000010 os_dev_reset
0000d3aa g     F .text	00000014 os_mutex_init
0000c190 g     F .text	00000010 _sbrkInit
2000012c g       .bssnz	00000000 __bssnz_end__
0000d870 g     F .text	00000088 flash_map_init
0000c648 g     F .text	0000000c os_started
0000c18e  w    F .text	00000002 TIMER1_IRQHandler
20000000 g       .bss	00000000 _ram_start
0000cea0 g     F .text	0000003c os_sched_os_timer_exp
20000000 g       .vector_relocation	00000000 __vector_tbl_reloc__
0000c18e  w    F .text	00000002 SPIM3_IRQHandler
0000c18e  w    F .text	00000002 PWM2_IRQHandler
2000012c g       .data	00000000 __data_end__
0000c18e  w    F .text	00000002 ECB_IRQHandler
2000224c g     O .bss	00000004 g_os_time
0000e8fc g     F .text	0000003c hal_uart_init_cbs
0000e15c g     F .text	00000014 hal_watchdog_tickle
20002284 g       .bss	00000000 __bss_end__
0000c18e  w    F .text	00000002 SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler
0000cba4 g     F .text	00000010 os_msys_reset
0000c18e g     F .text	00000002 Default_Handler
0000c420 g     F .text	00000014 _start
0000d574 g     F .text	00000006 os_arch_init_task_stack
20002174 g     O .bss	00000050 g_idle_task
0000c4d4 g     F .text	00000044 hal_gpio_init_out
0000c54c g     F .text	0000003c hal_gpio_read
20000128 g     O .data	00000004 sysinit_panic_cb
20002028 g     O .bss	00000004 g_os_sanity_check_list
0000e938 g     F .text	00000060 hal_uart_start_tx
0000ce18 g     F .text	00000088 os_sched_wakeup
0000dbd8 g     F .text	00000030 mem_init_mbuf_pool
0000d388 g     F .text	00000018 os_default_irq
2000223c g     O .bss	00000004 g_os_last_ctx_sw_time
0000d234 g     F .text	00000018 os_arch_init
0000dbc0 g     F .text	0000000c sysinit_start
0000e480 g     F .text	000000f8 hal_timer_config
0000e14c g     F .text	00000010 hal_watchdog_enable
0000cb00 g     F .text	0000004c os_msys_register
200021c4 g     O .bss	00000004 g_os_idle_ctr
0000d814 g     F .text	00000034 flash_area_open
0000c18e  w    F .text	00000002 SAADC_IRQHandler
0000d642 g     F .text	00000038 memset
0000c020 g       .text	00000100 __isr_vector
0000c438 g     F .text	00000054 main
0000c18e  w    F .text	00000002 CCM_AAR_IRQHandler
0000c18e  w    F .text	00000002 WDT_IRQHandler
0000dbcc g     F .text	0000000c sysinit_end
0000d8f8 g     F .text	00000002 modlog_init
0000d57a g     F .text	00000046 SVC_Handler
0000c9e0 g     F .text	0000000a os_eventq_inited
0000dc6a g     F .text	00000054 hal_flash_read
0000ca5c g     F .text	00000008 os_eventq_dflt_get
0000c874 g     F .text	0000003c os_callout_wakeup_ticks
0000c18e  w    F .text	00000002 SWI5_EGU5_IRQHandler
20002254 g     O .bss	00000004 flash_map_entries
0000c020 g       .imghdr	00000000 __text
0000dadc g     F .text	00000012 mfg_seek_next
0000cd70 g     F .text	0000000c os_sched_get_current_task
0000c31c g     F .text	00000104 SystemInit
0000c18e  w    F .text	00000002 RNG_IRQHandler
0000cf30 g     F .text	00000022 os_sched
0000e998 g     F .text	0000004c hal_uart_start_rx
0000d480 g     F .text	000000e0 os_mutex_pend
00000000 g       .svc_table	00000000 SVC_Table
0000c18e  w    F .text	00000002 RTC2_IRQHandler
20040000 g       .bss	00000000 __StackTop
0000c18e  w    F .text	00000002 PWM0_IRQHandler
0000c18e  w    F .text	00000002 SWI3_EGU3_IRQHandler
0000c818 g     F .text	0000005c os_callout_tick
0000ec04 g     O .text	00000048 sysflash_map_dflt
20002268 g     O .bss	0000001c nrf52_hal_timer0
0000c120 g       .text	00000000 __isr_vector_end
0000c7ac g     F .text	00000022 os_start
0000c18e  w    F .text	00000002 RTC1_IRQHandler
0000cf98 g     F .text	0000000a os_task_stacktop_get
0000eaa4 g     F .text	00000100 hal_uart_config
0000c18e  w    F .text	00000002 SWI1_EGU1_IRQHandler
0000db5c g     F .text	00000010 mfg_open
20000118 g     O .data	00000008 g_os_run_list
0000c4a0 g     F .text	00000034 NVIC_Relocate
0000c48c g     F .text	00000014 sysinit_app
20002060 g     O .bss	00000004 os_flags
0000d1e0 g     F .text	00000006 os_arch_restore_sr
2000225c g     O .bss	0000000c g_hal_os_tick
2003fe50 g       *ABS*	000001b0 __StackLimit
200021c8 g     O .bss	00000004 g_os_started
0000c18e  w    F .text	00000002 SPIM2_SPIS2_SPI2_IRQHandler
0000c18e  w    F .text	00000002 NFCT_IRQHandler
0000c30c g     F .text	00000010 SystemCoreClockUpdate
0000cbb4 g     F .text	00000034 os_msys_init
0000d138 g     F .text	0000000c os_time_get
0000cfa4 g     F .text	000000e4 os_task_init
0000c1e8 g     F .text	0000004c hal_system_clock_start
0000c182  w    F .text	00000002 BusFault_Handler
0000d67a g     F .text	00000010 strlen
0000c954 g     F .text	00000040 os_dev_create
0000c9d0 g     F .text	00000010 os_eventq_init
0000d144 g     F .text	00000048 os_time_advance
0000cf54 g     F .text	0000002c os_sched_resort
0000dc42 g     F .text	00000028 hal_flash_init
0000c18e  w    F .text	00000002 MWU_IRQHandler
0000c180  w    F .text	00000002 MemoryManagement_Handler
0000c18e  w    F .text	00000002 QSPI_IRQHandler
0000c18e  w    F .text	00000002 COMP_LPCOMP_IRQHandler
0000c994 g     F .text	0000002c os_dev_initialize_all
20000120 g     O .data	00000008 g_os_sleep_list
0000dc18 g     F .text	0000000c hal_bsp_init
0000c7d0 g     F .text	00000048 os_pkg_init
0000cc24 g     F .text	00000010 os_sanity_check_init
0000ea48 g     F .text	0000005c hal_uart_init
200021cc g     O .bss	00000050 g_os_main_task



Disassembly of section .text:

0000c020 <__isr_vector>:
    c020:	20040000 	.word	0x20040000
    c024:	0000c121 	.word	0x0000c121
    c028:	0000c17d 	.word	0x0000c17d
    c02c:	0000c17f 	.word	0x0000c17f
    c030:	0000c181 	.word	0x0000c181
    c034:	0000c183 	.word	0x0000c183
    c038:	0000c185 	.word	0x0000c185
	...
    c04c:	0000d57b 	.word	0x0000d57b
    c050:	0000c189 	.word	0x0000c189
    c054:	00000000 	.word	0x00000000
    c058:	0000d5c1 	.word	0x0000d5c1
    c05c:	0000d5eb 	.word	0x0000d5eb
    c060:	0000c18f 	.word	0x0000c18f
    c064:	0000c18f 	.word	0x0000c18f
    c068:	0000c18f 	.word	0x0000c18f
    c06c:	0000c18f 	.word	0x0000c18f
    c070:	0000c18f 	.word	0x0000c18f
    c074:	0000c18f 	.word	0x0000c18f
    c078:	0000c18f 	.word	0x0000c18f
    c07c:	0000c18f 	.word	0x0000c18f
    c080:	0000c18f 	.word	0x0000c18f
    c084:	0000c18f 	.word	0x0000c18f
    c088:	0000c18f 	.word	0x0000c18f
    c08c:	0000c18f 	.word	0x0000c18f
    c090:	0000c18f 	.word	0x0000c18f
    c094:	0000c18f 	.word	0x0000c18f
    c098:	0000c18f 	.word	0x0000c18f
    c09c:	0000c18f 	.word	0x0000c18f
    c0a0:	0000c18f 	.word	0x0000c18f
    c0a4:	0000c18f 	.word	0x0000c18f
    c0a8:	0000c18f 	.word	0x0000c18f
    c0ac:	0000c18f 	.word	0x0000c18f
    c0b0:	0000c18f 	.word	0x0000c18f
    c0b4:	0000c18f 	.word	0x0000c18f
    c0b8:	0000c18f 	.word	0x0000c18f
    c0bc:	0000c18f 	.word	0x0000c18f
    c0c0:	0000c18f 	.word	0x0000c18f
    c0c4:	0000c18f 	.word	0x0000c18f
    c0c8:	0000c18f 	.word	0x0000c18f
    c0cc:	0000c18f 	.word	0x0000c18f
    c0d0:	0000c18f 	.word	0x0000c18f
    c0d4:	0000c18f 	.word	0x0000c18f
	...
    c0e0:	0000c18f 	.word	0x0000c18f
    c0e4:	0000c18f 	.word	0x0000c18f
    c0e8:	0000c18f 	.word	0x0000c18f
    c0ec:	0000c18f 	.word	0x0000c18f
    c0f0:	0000c18f 	.word	0x0000c18f
    c0f4:	0000c18f 	.word	0x0000c18f
    c0f8:	0000c18f 	.word	0x0000c18f
    c0fc:	0000c18f 	.word	0x0000c18f
    c100:	0000c18f 	.word	0x0000c18f
    c104:	0000c18f 	.word	0x0000c18f
    c108:	0000c18f 	.word	0x0000c18f
    c10c:	00000000 	.word	0x00000000
    c110:	0000c18f 	.word	0x0000c18f
	...
    c11c:	0000c18f 	.word	0x0000c18f

0000c120 <Reset_Handler>:
    .type    Reset_Handler, %function
Reset_Handler:
    .fnstart

    /* Clear BSS */
    mov     r0, #0
    c120:	f04f 0000 	mov.w	r0, #0
    ldr     r2, =__bss_start__
    c124:	4a0c      	ldr	r2, [pc, #48]	; (c158 <.bss_zero_loop+0x30>)
    ldr     r3, =__bss_end__
    c126:	4b0d      	ldr	r3, [pc, #52]	; (c15c <.bss_zero_loop+0x34>)

0000c128 <.bss_zero_loop>:
.bss_zero_loop:
    cmp     r2, r3
    c128:	429a      	cmp	r2, r3
    itt     lt
    c12a:	bfbc      	itt	lt
    strlt   r0, [r2], #4
    c12c:	f842 0b04 	strlt.w	r0, [r2], #4
    blt    .bss_zero_loop
    c130:	e7fa      	blt.n	c128 <.bss_zero_loop>
 *      linker script.
 *      __etext: End of code section, i.e., begin of data sections to copy from.
 *      __data_start__/__data_end__: RAM address range that data should be
 *      copied to. Both must be aligned to 4 bytes boundary.  */

    ldr    r1, =__etext
    c132:	490b      	ldr	r1, [pc, #44]	; (c160 <.bss_zero_loop+0x38>)
    ldr    r2, =__data_start__
    c134:	4a0b      	ldr	r2, [pc, #44]	; (c164 <.bss_zero_loop+0x3c>)
    ldr    r3, =__data_end__
    c136:	4b0c      	ldr	r3, [pc, #48]	; (c168 <.bss_zero_loop+0x40>)

    subs    r3, r2
    c138:	1a9b      	subs	r3, r3, r2
    ble     .LC0
    c13a:	dd03      	ble.n	c144 <.bss_zero_loop+0x1c>

.LC1:
    subs    r3, 4
    c13c:	3b04      	subs	r3, #4
    ldr    r0, [r1,r3]
    c13e:	58c8      	ldr	r0, [r1, r3]
    str    r0, [r2,r3]
    c140:	50d0      	str	r0, [r2, r3]
    bgt    .LC1
    c142:	dcfb      	bgt.n	c13c <.bss_zero_loop+0x14>

.LC0:

    LDR     R0, =__HeapBase
    c144:	4809      	ldr	r0, [pc, #36]	; (c16c <.bss_zero_loop+0x44>)
    LDR     R1, =__HeapLimit
    c146:	490a      	ldr	r1, [pc, #40]	; (c170 <.bss_zero_loop+0x48>)
    BL      _sbrkInit
    c148:	f000 f822 	bl	c190 <_sbrkInit>

    LDR     R0, =SystemInit
    c14c:	4809      	ldr	r0, [pc, #36]	; (c174 <.bss_zero_loop+0x4c>)
    BLX     R0
    c14e:	4780      	blx	r0

    BL      hal_system_init
    c150:	f000 f826 	bl	c1a0 <hal_system_init>

    LDR     R0, =_start
    c154:	4808      	ldr	r0, [pc, #32]	; (c178 <.bss_zero_loop+0x50>)
    BX      R0
    c156:	4700      	bx	r0
    ldr     r2, =__bss_start__
    c158:	20000130 	.word	0x20000130
    ldr     r3, =__bss_end__
    c15c:	20002284 	.word	0x20002284
    ldr    r1, =__etext
    c160:	0000ecbc 	.word	0x0000ecbc
    ldr    r2, =__data_start__
    c164:	20000100 	.word	0x20000100
    ldr    r3, =__data_end__
    c168:	2000012c 	.word	0x2000012c
    LDR     R0, =__HeapBase
    c16c:	20002288 	.word	0x20002288
    LDR     R1, =__HeapLimit
    c170:	2003fe50 	.word	0x2003fe50
    LDR     R0, =SystemInit
    c174:	0000c31d 	.word	0x0000c31d
    LDR     R0, =_start
    c178:	0000c421 	.word	0x0000c421

0000c17c <NMI_Handler>:
/* Dummy Exception Handlers (infinite loops which can be modified) */

    .weak   NMI_Handler
    .type   NMI_Handler, %function
NMI_Handler:
    B       .
    c17c:	e7fe      	b.n	c17c <NMI_Handler>

0000c17e <HardFault_Handler>:


    .weak   HardFault_Handler
    .type   HardFault_Handler, %function
HardFault_Handler:
    B       .
    c17e:	e7fe      	b.n	c17e <HardFault_Handler>

0000c180 <MemoryManagement_Handler>:


    .weak   MemoryManagement_Handler
    .type   MemoryManagement_Handler, %function
MemoryManagement_Handler:
    B       .
    c180:	e7fe      	b.n	c180 <MemoryManagement_Handler>

0000c182 <BusFault_Handler>:


    .weak   BusFault_Handler
    .type   BusFault_Handler, %function
BusFault_Handler:
    B       .
    c182:	e7fe      	b.n	c182 <BusFault_Handler>

0000c184 <UsageFault_Handler>:


    .weak   UsageFault_Handler
    .type   UsageFault_Handler, %function
UsageFault_Handler:
    B       .
    c184:	e7fe      	b.n	c184 <UsageFault_Handler>


    .weak   SVC_Handler
    .type   SVC_Handler, %function
SVC_Handler:
    B       .
    c186:	e7fe      	b.n	c186 <UsageFault_Handler+0x2>

0000c188 <DebugMon_Handler>:


    .weak   DebugMon_Handler
    .type   DebugMon_Handler, %function
DebugMon_Handler:
    b       .
    c188:	e7fe      	b.n	c188 <DebugMon_Handler>


    .weak   PendSV_Handler
    .type   PendSV_Handler, %function
PendSV_Handler:
    B       .
    c18a:	e7fe      	b.n	c18a <DebugMon_Handler+0x2>


    .weak   SysTick_Handler
    .type   SysTick_Handler, %function
SysTick_Handler:
    B       .
    c18c:	e7fe      	b.n	c18c <DebugMon_Handler+0x4>

0000c18e <Default_Handler>:
/* IRQ Handlers */

    .globl  Default_Handler
    .type   Default_Handler, %function
Default_Handler:
    B       .
    c18e:	e7fe      	b.n	c18e <Default_Handler>

0000c190 <_sbrkInit>:
static char *sbrkLimit __attribute__ ((section (".data")));
static char *brk __attribute__ ((section (".data")));

void
_sbrkInit(char *base, char *limit) {
    sbrkBase = base;
    c190:	4b02      	ldr	r3, [pc, #8]	; (c19c <_sbrkInit+0xc>)
    c192:	6018      	str	r0, [r3, #0]
    sbrkLimit = limit;
    c194:	6059      	str	r1, [r3, #4]
    brk = base;
    c196:	6098      	str	r0, [r3, #8]
}
    c198:	4770      	bx	lr
    c19a:	bf00      	nop
    c19c:	20000100 	.word	0x20000100

0000c1a0 <hal_system_init>:
 */
void
hal_system_init(void)
{
#if MYNEWT_VAL(MCU_DCDC_ENABLED)
    NRF_POWER->DCDCEN = 1;
    c1a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    c1a4:	2201      	movs	r2, #1
    c1a6:	f8c3 2578 	str.w	r2, [r3, #1400]	; 0x578
#endif
}
    c1aa:	4770      	bx	lr

0000c1ac <hal_debugger_connected>:
}

int
hal_debugger_connected(void)
{
    return CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk;
    c1ac:	4b02      	ldr	r3, [pc, #8]	; (c1b8 <hal_debugger_connected+0xc>)
    c1ae:	6818      	ldr	r0, [r3, #0]
}
    c1b0:	f000 0001 	and.w	r0, r0, #1
    c1b4:	4770      	bx	lr
    c1b6:	bf00      	nop
    c1b8:	e000edf0 	.word	0xe000edf0

0000c1bc <hal_system_reset>:
{
    c1bc:	b508      	push	{r3, lr}
        HAL_DEBUG_BREAK();
    c1be:	f7ff fff5 	bl	c1ac <hal_debugger_connected>
    c1c2:	b100      	cbz	r0, c1c6 <hal_system_reset+0xa>

static inline void
hal_debug_break(void)
{
#if !MYNEWT_VAL(MCU_DEBUG_IGNORE_BKPT)
    __BKPT(1);
    c1c4:	be01      	bkpt	0x0001
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    c1c6:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    c1ca:	4905      	ldr	r1, [pc, #20]	; (c1e0 <hal_system_reset+0x24>)
    c1cc:	68ca      	ldr	r2, [r1, #12]
    c1ce:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    c1d2:	4b04      	ldr	r3, [pc, #16]	; (c1e4 <hal_system_reset+0x28>)
    c1d4:	4313      	orrs	r3, r2
    c1d6:	60cb      	str	r3, [r1, #12]
    c1d8:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    c1dc:	bf00      	nop
    c1de:	e7fd      	b.n	c1dc <hal_system_reset+0x20>
    c1e0:	e000ed00 	.word	0xe000ed00
    c1e4:	05fa0004 	.word	0x05fa0004

0000c1e8 <hal_system_clock_start>:
        }
    }
#endif

    /* Check if this clock source is already running */
    if ((NRF_CLOCK->LFCLKSTAT & regmsk) != regval) {
    c1e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    c1ec:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
    c1f0:	4b0f      	ldr	r3, [pc, #60]	; (c230 <hal_system_clock_start+0x48>)
    c1f2:	4013      	ands	r3, r2
    c1f4:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
    c1f8:	d018      	beq.n	c22c <hal_system_clock_start+0x44>
        NRF_CLOCK->TASKS_LFCLKSTOP = 1;
    c1fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    c1fe:	2201      	movs	r2, #1
    c200:	60da      	str	r2, [r3, #12]
        NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    c202:	2100      	movs	r1, #0
    c204:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
        NRF_CLOCK->LFCLKSRC = clksrc;
    c208:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
        NRF_CLOCK->TASKS_LFCLKSTART = 1;
    c20c:	609a      	str	r2, [r3, #8]

        /* Wait here till started! */
        while (1) {
            if (NRF_CLOCK->EVENTS_LFCLKSTARTED) {
    c20e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    c212:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    c216:	2b00      	cmp	r3, #0
    c218:	d0f9      	beq.n	c20e <hal_system_clock_start+0x26>
                if ((NRF_CLOCK->LFCLKSTAT & regmsk) == regval) {
    c21a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    c21e:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
    c222:	4b03      	ldr	r3, [pc, #12]	; (c230 <hal_system_clock_start+0x48>)
    c224:	4013      	ands	r3, r2
    c226:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
    c22a:	d1f0      	bne.n	c20e <hal_system_clock_start+0x26>
                }
            }
        }
    }
#endif
}
    c22c:	4770      	bx	lr
    c22e:	bf00      	nop
    c230:	00010003 	.word	0x00010003

0000c234 <errata_36>:
#endif

#ifdef NRF52840_XXAA
static bool errata_36(void)
{
	if ((*(uint32_t *)0x10000130ul == 0x8ul) &&
    c234:	4b06      	ldr	r3, [pc, #24]	; (c250 <errata_36+0x1c>)
    c236:	681b      	ldr	r3, [r3, #0]
    c238:	2b08      	cmp	r3, #8
    c23a:	d001      	beq.n	c240 <errata_36+0xc>
			(*(uint32_t *)0x10000134ul == 0x0ul)) {
		return true;
	}

	return false;
    c23c:	2000      	movs	r0, #0
    c23e:	4770      	bx	lr
			(*(uint32_t *)0x10000134ul == 0x0ul)) {
    c240:	4b04      	ldr	r3, [pc, #16]	; (c254 <errata_36+0x20>)
    c242:	681b      	ldr	r3, [r3, #0]
	if ((*(uint32_t *)0x10000130ul == 0x8ul) &&
    c244:	b10b      	cbz	r3, c24a <errata_36+0x16>
	return false;
    c246:	2000      	movs	r0, #0
    c248:	4770      	bx	lr
		return true;
    c24a:	2001      	movs	r0, #1
}
    c24c:	4770      	bx	lr
    c24e:	bf00      	nop
    c250:	10000130 	.word	0x10000130
    c254:	10000134 	.word	0x10000134

0000c258 <errata_98>:


static bool errata_98(void)
{
	if ((*(uint32_t *)0x10000130ul == 0x8ul) &&
    c258:	4b06      	ldr	r3, [pc, #24]	; (c274 <errata_98+0x1c>)
    c25a:	681b      	ldr	r3, [r3, #0]
    c25c:	2b08      	cmp	r3, #8
    c25e:	d001      	beq.n	c264 <errata_98+0xc>
			(*(uint32_t *)0x10000134ul == 0x0ul)) {
		return true;
	}

	return false;
    c260:	2000      	movs	r0, #0
    c262:	4770      	bx	lr
			(*(uint32_t *)0x10000134ul == 0x0ul)) {
    c264:	4b04      	ldr	r3, [pc, #16]	; (c278 <errata_98+0x20>)
    c266:	681b      	ldr	r3, [r3, #0]
	if ((*(uint32_t *)0x10000130ul == 0x8ul) &&
    c268:	b10b      	cbz	r3, c26e <errata_98+0x16>
	return false;
    c26a:	2000      	movs	r0, #0
    c26c:	4770      	bx	lr
		return true;
    c26e:	2001      	movs	r0, #1
}
    c270:	4770      	bx	lr
    c272:	bf00      	nop
    c274:	10000130 	.word	0x10000130
    c278:	10000134 	.word	0x10000134

0000c27c <errata_103>:


static bool errata_103(void)
{
	if ((*(uint32_t *)0x10000130ul == 0x8ul) &&
    c27c:	4b06      	ldr	r3, [pc, #24]	; (c298 <errata_103+0x1c>)
    c27e:	681b      	ldr	r3, [r3, #0]
    c280:	2b08      	cmp	r3, #8
    c282:	d001      	beq.n	c288 <errata_103+0xc>
			(*(uint32_t *)0x10000134ul == 0x0ul)) {
		return true;
	}

	return false;
    c284:	2000      	movs	r0, #0
    c286:	4770      	bx	lr
			(*(uint32_t *)0x10000134ul == 0x0ul)) {
    c288:	4b04      	ldr	r3, [pc, #16]	; (c29c <errata_103+0x20>)
    c28a:	681b      	ldr	r3, [r3, #0]
	if ((*(uint32_t *)0x10000130ul == 0x8ul) &&
    c28c:	b10b      	cbz	r3, c292 <errata_103+0x16>
	return false;
    c28e:	2000      	movs	r0, #0
    c290:	4770      	bx	lr
		return true;
    c292:	2001      	movs	r0, #1
}
    c294:	4770      	bx	lr
    c296:	bf00      	nop
    c298:	10000130 	.word	0x10000130
    c29c:	10000134 	.word	0x10000134

0000c2a0 <errata_115>:


static bool errata_115(void)
{
	if ((*(uint32_t *)0x10000130ul == 0x8ul) &&
    c2a0:	4b06      	ldr	r3, [pc, #24]	; (c2bc <errata_115+0x1c>)
    c2a2:	681b      	ldr	r3, [r3, #0]
    c2a4:	2b08      	cmp	r3, #8
    c2a6:	d001      	beq.n	c2ac <errata_115+0xc>
			(*(uint32_t *)0x10000134ul == 0x0ul)) {
		return true;
	}

	return false;
    c2a8:	2000      	movs	r0, #0
    c2aa:	4770      	bx	lr
			(*(uint32_t *)0x10000134ul == 0x0ul)) {
    c2ac:	4b04      	ldr	r3, [pc, #16]	; (c2c0 <errata_115+0x20>)
    c2ae:	681b      	ldr	r3, [r3, #0]
	if ((*(uint32_t *)0x10000130ul == 0x8ul) &&
    c2b0:	b10b      	cbz	r3, c2b6 <errata_115+0x16>
	return false;
    c2b2:	2000      	movs	r0, #0
    c2b4:	4770      	bx	lr
		return true;
    c2b6:	2001      	movs	r0, #1
}
    c2b8:	4770      	bx	lr
    c2ba:	bf00      	nop
    c2bc:	10000130 	.word	0x10000130
    c2c0:	10000134 	.word	0x10000134

0000c2c4 <errata_120>:


static bool errata_120(void)
{
	if ((*(uint32_t *)0x10000130ul == 0x8ul) &&
    c2c4:	4b06      	ldr	r3, [pc, #24]	; (c2e0 <errata_120+0x1c>)
    c2c6:	681b      	ldr	r3, [r3, #0]
    c2c8:	2b08      	cmp	r3, #8
    c2ca:	d001      	beq.n	c2d0 <errata_120+0xc>
			(*(uint32_t *)0x10000134ul == 0x0ul)) {
		return true;
	}

	return false;
    c2cc:	2000      	movs	r0, #0
    c2ce:	4770      	bx	lr
			(*(uint32_t *)0x10000134ul == 0x0ul)) {
    c2d0:	4b04      	ldr	r3, [pc, #16]	; (c2e4 <errata_120+0x20>)
    c2d2:	681b      	ldr	r3, [r3, #0]
	if ((*(uint32_t *)0x10000130ul == 0x8ul) &&
    c2d4:	b10b      	cbz	r3, c2da <errata_120+0x16>
	return false;
    c2d6:	2000      	movs	r0, #0
    c2d8:	4770      	bx	lr
		return true;
    c2da:	2001      	movs	r0, #1
}
    c2dc:	4770      	bx	lr
    c2de:	bf00      	nop
    c2e0:	10000130 	.word	0x10000130
    c2e4:	10000134 	.word	0x10000134

0000c2e8 <errata_121>:

static bool errata_121(void)
{
	if ((*(uint32_t *)0x10000130ul == 0x8ul) &&
    c2e8:	4b06      	ldr	r3, [pc, #24]	; (c304 <errata_121+0x1c>)
    c2ea:	681b      	ldr	r3, [r3, #0]
    c2ec:	2b08      	cmp	r3, #8
    c2ee:	d001      	beq.n	c2f4 <errata_121+0xc>
			(*(uint32_t *)0x10000134ul == 0x0ul)) {
		return true;
	}

	return false;
    c2f0:	2000      	movs	r0, #0
    c2f2:	4770      	bx	lr
			(*(uint32_t *)0x10000134ul == 0x0ul)) {
    c2f4:	4b04      	ldr	r3, [pc, #16]	; (c308 <errata_121+0x20>)
    c2f6:	681b      	ldr	r3, [r3, #0]
	if ((*(uint32_t *)0x10000130ul == 0x8ul) &&
    c2f8:	b10b      	cbz	r3, c2fe <errata_121+0x16>
	return false;
    c2fa:	2000      	movs	r0, #0
    c2fc:	4770      	bx	lr
		return true;
    c2fe:	2001      	movs	r0, #1
}
    c300:	4770      	bx	lr
    c302:	bf00      	nop
    c304:	10000130 	.word	0x10000130
    c308:	10000134 	.word	0x10000134

0000c30c <SystemCoreClockUpdate>:
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    c30c:	4b01      	ldr	r3, [pc, #4]	; (c314 <SystemCoreClockUpdate+0x8>)
    c30e:	4a02      	ldr	r2, [pc, #8]	; (c318 <SystemCoreClockUpdate+0xc>)
    c310:	601a      	str	r2, [r3, #0]
}
    c312:	4770      	bx	lr
    c314:	2000010c 	.word	0x2000010c
    c318:	03d09000 	.word	0x03d09000

0000c31c <SystemInit>:
{
    c31c:	b508      	push	{r3, lr}
        if (errata_36()){
    c31e:	f7ff ff89 	bl	c234 <errata_36>
    c322:	b140      	cbz	r0, c336 <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    c324:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    c328:	2200      	movs	r2, #0
    c32a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    c32e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    c332:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
        if (errata_98()){
    c336:	f7ff ff8f 	bl	c258 <errata_98>
    c33a:	b110      	cbz	r0, c342 <SystemInit+0x26>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    c33c:	4b2d      	ldr	r3, [pc, #180]	; (c3f4 <SystemInit+0xd8>)
    c33e:	4a2e      	ldr	r2, [pc, #184]	; (c3f8 <SystemInit+0xdc>)
    c340:	601a      	str	r2, [r3, #0]
        if (errata_103()){
    c342:	f7ff ff9b 	bl	c27c <errata_103>
    c346:	b118      	cbz	r0, c350 <SystemInit+0x34>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    c348:	4b2c      	ldr	r3, [pc, #176]	; (c3fc <SystemInit+0xe0>)
    c34a:	22fb      	movs	r2, #251	; 0xfb
    c34c:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
        if (errata_115()){
    c350:	f7ff ffa6 	bl	c2a0 <errata_115>
    c354:	b148      	cbz	r0, c36a <SystemInit+0x4e>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    c356:	492a      	ldr	r1, [pc, #168]	; (c400 <SystemInit+0xe4>)
    c358:	680b      	ldr	r3, [r1, #0]
    c35a:	f023 030f 	bic.w	r3, r3, #15
    c35e:	4a29      	ldr	r2, [pc, #164]	; (c404 <SystemInit+0xe8>)
    c360:	6812      	ldr	r2, [r2, #0]
    c362:	f002 020f 	and.w	r2, r2, #15
    c366:	4313      	orrs	r3, r2
    c368:	600b      	str	r3, [r1, #0]
        if (errata_120()){
    c36a:	f7ff ffab 	bl	c2c4 <errata_120>
    c36e:	b118      	cbz	r0, c378 <SystemInit+0x5c>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    c370:	4b25      	ldr	r3, [pc, #148]	; (c408 <SystemInit+0xec>)
    c372:	f44f 7200 	mov.w	r2, #512	; 0x200
    c376:	601a      	str	r2, [r3, #0]
        if (errata_121()){
    c378:	f7ff ffb6 	bl	c2e8 <errata_121>
    c37c:	b110      	cbz	r0, c384 <SystemInit+0x68>
            *(volatile uint32_t *)0x40029600ul = 0x00040400ul;
    c37e:	4b23      	ldr	r3, [pc, #140]	; (c40c <SystemInit+0xf0>)
    c380:	4a23      	ldr	r2, [pc, #140]	; (c410 <SystemInit+0xf4>)
    c382:	601a      	str	r2, [r3, #0]
            if ((NRF_UICR->NFCPINS & UICR_NFCPINS_PROTECT_Msk) == (UICR_NFCPINS_PROTECT_NFC << UICR_NFCPINS_PROTECT_Pos)){
    c384:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    c388:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
    c38c:	f013 0f01 	tst.w	r3, #1
    c390:	d104      	bne.n	c39c <SystemInit+0x80>
    SystemCoreClockUpdate();
    c392:	f7ff ffbb 	bl	c30c <SystemCoreClockUpdate>
    NVIC_Relocate();
    c396:	f000 f883 	bl	c4a0 <NVIC_Relocate>
}
    c39a:	bd08      	pop	{r3, pc}
                NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
    c39c:	4b1d      	ldr	r3, [pc, #116]	; (c414 <SystemInit+0xf8>)
    c39e:	2201      	movs	r2, #1
    c3a0:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
                while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    c3a4:	4b1b      	ldr	r3, [pc, #108]	; (c414 <SystemInit+0xf8>)
    c3a6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    c3aa:	2b00      	cmp	r3, #0
    c3ac:	d0fa      	beq.n	c3a4 <SystemInit+0x88>
                NRF_UICR->NFCPINS &= ~UICR_NFCPINS_PROTECT_Msk;
    c3ae:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
    c3b2:	f8d2 320c 	ldr.w	r3, [r2, #524]	; 0x20c
    c3b6:	f023 0301 	bic.w	r3, r3, #1
    c3ba:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
                while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    c3be:	4b15      	ldr	r3, [pc, #84]	; (c414 <SystemInit+0xf8>)
    c3c0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    c3c4:	2b00      	cmp	r3, #0
    c3c6:	d0fa      	beq.n	c3be <SystemInit+0xa2>
                NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
    c3c8:	4b12      	ldr	r3, [pc, #72]	; (c414 <SystemInit+0xf8>)
    c3ca:	2200      	movs	r2, #0
    c3cc:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
                while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    c3d0:	4b10      	ldr	r3, [pc, #64]	; (c414 <SystemInit+0xf8>)
    c3d2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    c3d6:	2b00      	cmp	r3, #0
    c3d8:	d0fa      	beq.n	c3d0 <SystemInit+0xb4>
    c3da:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    c3de:	490e      	ldr	r1, [pc, #56]	; (c418 <SystemInit+0xfc>)
    c3e0:	68ca      	ldr	r2, [r1, #12]
    c3e2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    c3e6:	4b0d      	ldr	r3, [pc, #52]	; (c41c <SystemInit+0x100>)
    c3e8:	4313      	orrs	r3, r2
    c3ea:	60cb      	str	r3, [r1, #12]
    c3ec:	f3bf 8f4f 	dsb	sy
    __NOP();
    c3f0:	bf00      	nop
    c3f2:	e7fd      	b.n	c3f0 <SystemInit+0xd4>
    c3f4:	4000568c 	.word	0x4000568c
    c3f8:	00038148 	.word	0x00038148
    c3fc:	4000f000 	.word	0x4000f000
    c400:	40000ee4 	.word	0x40000ee4
    c404:	10000258 	.word	0x10000258
    c408:	40029640 	.word	0x40029640
    c40c:	40029600 	.word	0x40029600
    c410:	00040400 	.word	0x00040400
    c414:	4001e000 	.word	0x4001e000
    c418:	e000ed00 	.word	0xe000ed00
    c41c:	05fa0004 	.word	0x05fa0004

0000c420 <_start>:

/*
 * Rudimentary startup function.
 */
void _start(void)
{
    c420:	b508      	push	{r3, lr}
    int rc;

    rc = main(0, NULL);
    exit(rc);
#else
    os_init(main);
    c422:	4803      	ldr	r0, [pc, #12]	; (c430 <_start+0x10>)
    c424:	f000 f95a 	bl	c6dc <os_init>
    os_start();
    c428:	f000 f9c0 	bl	c7ac <os_start>
#endif
}
    c42c:	bd08      	pop	{r3, pc}
    c42e:	bf00      	nop
    c430:	0000c439 	.word	0x0000c439

0000c434 <_init>:

void
_init(void)
{
}
    c434:	4770      	bx	lr
	...

0000c438 <main>:
 *
 * @return int NOTE: this function should never return!
 */
int
main(int argc, char **argv)
{
    c438:	b508      	push	{r3, lr}

#ifdef ARCH_sim
    mcu_sim_parse_args(argc, argv);
#endif

    sysinit();
    c43a:	f001 fbc1 	bl	dbc0 <sysinit_start>
    c43e:	f000 f825 	bl	c48c <sysinit_app>
    c442:	f001 fbc3 	bl	dbcc <sysinit_end>

    g_led_pin = LED_BLINK_PIN;
    c446:	200d      	movs	r0, #13
    c448:	4b0e      	ldr	r3, [pc, #56]	; (c484 <main+0x4c>)
    c44a:	6018      	str	r0, [r3, #0]
    hal_gpio_init_out(g_led_pin, 1);
    c44c:	2101      	movs	r1, #1
    c44e:	f000 f841 	bl	c4d4 <hal_gpio_init_out>

    while (1) {
        ++g_task1_loops;
    c452:	4a0d      	ldr	r2, [pc, #52]	; (c488 <main+0x50>)
    c454:	6813      	ldr	r3, [r2, #0]
    c456:	3301      	adds	r3, #1
    c458:	6013      	str	r3, [r2, #0]

        /* Wait one second */
        os_time_delay(OS_TICKS_PER_SEC);
    c45a:	2080      	movs	r0, #128	; 0x80
    c45c:	f000 fe96 	bl	d18c <os_time_delay>
        os_time_delay(OS_TICKS_PER_SEC);
    c460:	2080      	movs	r0, #128	; 0x80
    c462:	f000 fe93 	bl	d18c <os_time_delay>
        os_time_delay(OS_TICKS_PER_SEC);
    c466:	2080      	movs	r0, #128	; 0x80
    c468:	f000 fe90 	bl	d18c <os_time_delay>
        os_time_delay(OS_TICKS_PER_SEC);
    c46c:	2080      	movs	r0, #128	; 0x80
    c46e:	f000 fe8d 	bl	d18c <os_time_delay>
        os_time_delay(OS_TICKS_PER_SEC);
    c472:	2080      	movs	r0, #128	; 0x80
    c474:	f000 fe8a 	bl	d18c <os_time_delay>

        /* Toggle the LED */
        hal_gpio_toggle(g_led_pin);
    c478:	4b02      	ldr	r3, [pc, #8]	; (c484 <main+0x4c>)
    c47a:	6818      	ldr	r0, [r3, #0]
    c47c:	f000 f884 	bl	c588 <hal_gpio_toggle>
    c480:	e7e7      	b.n	c452 <main+0x1a>
    c482:	bf00      	nop
    c484:	20002170 	.word	0x20002170
    c488:	20000130 	.word	0x20000130

0000c48c <sysinit_app>:
void mfg_init(void);
void modlog_init(void);

void
sysinit_app(void)
{
    c48c:	b508      	push	{r3, lr}
    /*** Stage 0 */
    /* 0.0: os_pkg_init (kernel/os) */
    os_pkg_init();
    c48e:	f000 f99f 	bl	c7d0 <os_pkg_init>

    /*** Stage 2 */
    /* 2.0: flash_map_init (sys/flash_map) */
    flash_map_init();
    c492:	f001 f9ed 	bl	d870 <flash_map_init>

    /*** Stage 100 */
    /* 100.0: mfg_init (sys/mfg) */
    mfg_init();
    c496:	f001 fb41 	bl	db1c <mfg_init>
    /* 100.1: modlog_init (sys/log/modlog) */
    modlog_init();
    c49a:	f001 fa2d 	bl	d8f8 <modlog_init>
}
    c49e:	bd08      	pop	{r3, pc}

0000c4a0 <NVIC_Relocate>:
     * designated in the linker script.
     */
    current_location = (uint32_t *)&__isr_vector;
    new_location = (uint32_t *)&__vector_tbl_reloc__;

    if (new_location != current_location) {
    c4a0:	4a09      	ldr	r2, [pc, #36]	; (c4c8 <NVIC_Relocate+0x28>)
    c4a2:	4b0a      	ldr	r3, [pc, #40]	; (c4cc <NVIC_Relocate+0x2c>)
    c4a4:	429a      	cmp	r2, r3
    c4a6:	d00a      	beq.n	c4be <NVIC_Relocate+0x1e>
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
    c4a8:	2300      	movs	r3, #0
    c4aa:	e006      	b.n	c4ba <NVIC_Relocate+0x1a>
            new_location[i] = current_location[i];
    c4ac:	4a07      	ldr	r2, [pc, #28]	; (c4cc <NVIC_Relocate+0x2c>)
    c4ae:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    c4b2:	4a05      	ldr	r2, [pc, #20]	; (c4c8 <NVIC_Relocate+0x28>)
    c4b4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
    c4b8:	3301      	adds	r3, #1
    c4ba:	2b35      	cmp	r3, #53	; 0x35
    c4bc:	ddf6      	ble.n	c4ac <NVIC_Relocate+0xc>
    }

    /* Set VTOR except for M0 */
#if ((__CORTEX_M == 0) && (__VTOR_PRESENT == 0))
#else
    SCB->VTOR = (uint32_t)&__vector_tbl_reloc__;
    c4be:	4a02      	ldr	r2, [pc, #8]	; (c4c8 <NVIC_Relocate+0x28>)
    c4c0:	4b03      	ldr	r3, [pc, #12]	; (c4d0 <NVIC_Relocate+0x30>)
    c4c2:	609a      	str	r2, [r3, #8]
#endif
}
    c4c4:	4770      	bx	lr
    c4c6:	bf00      	nop
    c4c8:	20000000 	.word	0x20000000
    c4cc:	0000c020 	.word	0x0000c020
    c4d0:	e000ed00 	.word	0xe000ed00

0000c4d4 <hal_gpio_init_out>:
 *
 * @return int  0: no error; -1 otherwise.
 */
int
hal_gpio_init_out(int pin, int val)
{
    c4d4:	b410      	push	{r4}
    NRF_GPIO_Type *port;
    int pin_index = HAL_GPIO_INDEX(pin);
    c4d6:	f000 041f 	and.w	r4, r0, #31

    port = HAL_GPIO_PORT(pin);
    c4da:	281f      	cmp	r0, #31
    c4dc:	dd11      	ble.n	c502 <hal_gpio_init_out+0x2e>
    c4de:	4b0d      	ldr	r3, [pc, #52]	; (c514 <hal_gpio_init_out+0x40>)
    if (val) {
    c4e0:	b991      	cbnz	r1, c508 <hal_gpio_init_out+0x34>
        port->OUTSET = HAL_GPIO_MASK(pin);
    } else {
        port->OUTCLR = HAL_GPIO_MASK(pin);
    c4e2:	2201      	movs	r2, #1
    c4e4:	40a2      	lsls	r2, r4
    c4e6:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
    }
    port->PIN_CNF[pin_index] = GPIO_PIN_CNF_DIR_Output |
    c4ea:	f504 72e0 	add.w	r2, r4, #448	; 0x1c0
    c4ee:	2103      	movs	r1, #3
    c4f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        (GPIO_PIN_CNF_INPUT_Disconnect << GPIO_PIN_CNF_INPUT_Pos);
    port->DIRSET = HAL_GPIO_MASK(pin);
    c4f4:	2201      	movs	r2, #1
    c4f6:	40a2      	lsls	r2, r4
    c4f8:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518

    return 0;
}
    c4fc:	2000      	movs	r0, #0
    c4fe:	bc10      	pop	{r4}
    c500:	4770      	bx	lr
    port = HAL_GPIO_PORT(pin);
    c502:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    c506:	e7eb      	b.n	c4e0 <hal_gpio_init_out+0xc>
        port->OUTSET = HAL_GPIO_MASK(pin);
    c508:	2201      	movs	r2, #1
    c50a:	40a2      	lsls	r2, r4
    c50c:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    c510:	e7eb      	b.n	c4ea <hal_gpio_init_out+0x16>
    c512:	bf00      	nop
    c514:	50000300 	.word	0x50000300

0000c518 <hal_gpio_write>:
void
hal_gpio_write(int pin, int val)
{
    NRF_GPIO_Type *port;

    port = HAL_GPIO_PORT(pin);
    c518:	281f      	cmp	r0, #31
    c51a:	dd09      	ble.n	c530 <hal_gpio_write+0x18>
    c51c:	4a0a      	ldr	r2, [pc, #40]	; (c548 <hal_gpio_write+0x30>)
    if (val) {
    c51e:	b951      	cbnz	r1, c536 <hal_gpio_write+0x1e>
        port->OUTSET = HAL_GPIO_MASK(pin);
    } else {
        port->OUTCLR = HAL_GPIO_MASK(pin);
    c520:	f000 001f 	and.w	r0, r0, #31
    c524:	2301      	movs	r3, #1
    c526:	fa03 f000 	lsl.w	r0, r3, r0
    c52a:	f8c2 050c 	str.w	r0, [r2, #1292]	; 0x50c
    }
}
    c52e:	4770      	bx	lr
    port = HAL_GPIO_PORT(pin);
    c530:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    c534:	e7f3      	b.n	c51e <hal_gpio_write+0x6>
        port->OUTSET = HAL_GPIO_MASK(pin);
    c536:	f000 001f 	and.w	r0, r0, #31
    c53a:	2301      	movs	r3, #1
    c53c:	fa03 f000 	lsl.w	r0, r3, r0
    c540:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    c544:	4770      	bx	lr
    c546:	bf00      	nop
    c548:	50000300 	.word	0x50000300

0000c54c <hal_gpio_read>:
 *
 * @return int 0: low, 1: high
 */
int
hal_gpio_read(int pin)
{
    c54c:	b410      	push	{r4}
    NRF_GPIO_Type *port;
    port = HAL_GPIO_PORT(pin);
    c54e:	281f      	cmp	r0, #31
    c550:	dd0f      	ble.n	c572 <hal_gpio_read+0x26>
    c552:	490c      	ldr	r1, [pc, #48]	; (c584 <hal_gpio_read+0x38>)

    return (port->DIR & HAL_GPIO_MASK(pin)) ?
    c554:	f8d1 4514 	ldr.w	r4, [r1, #1300]	; 0x514
    c558:	f000 031f 	and.w	r3, r0, #31
    c55c:	2201      	movs	r2, #1
    c55e:	409a      	lsls	r2, r3
        (port->OUT >> HAL_GPIO_INDEX(pin)) & 1UL :
    c560:	4214      	tst	r4, r2
    c562:	d109      	bne.n	c578 <hal_gpio_read+0x2c>
        (port->IN >> HAL_GPIO_INDEX(pin)) & 1UL;
    c564:	f8d1 0510 	ldr.w	r0, [r1, #1296]	; 0x510
    c568:	40d8      	lsrs	r0, r3
        (port->OUT >> HAL_GPIO_INDEX(pin)) & 1UL :
    c56a:	f000 0001 	and.w	r0, r0, #1
}
    c56e:	bc10      	pop	{r4}
    c570:	4770      	bx	lr
    port = HAL_GPIO_PORT(pin);
    c572:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    c576:	e7ed      	b.n	c554 <hal_gpio_read+0x8>
        (port->OUT >> HAL_GPIO_INDEX(pin)) & 1UL :
    c578:	f8d1 0504 	ldr.w	r0, [r1, #1284]	; 0x504
    c57c:	40d8      	lsrs	r0, r3
    c57e:	f000 0001 	and.w	r0, r0, #1
    c582:	e7f4      	b.n	c56e <hal_gpio_read+0x22>
    c584:	50000300 	.word	0x50000300

0000c588 <hal_gpio_toggle>:
 *
 * @return current pin state int 0: low, 1: high
 */
int
hal_gpio_toggle(int pin)
{
    c588:	b538      	push	{r3, r4, r5, lr}
    c58a:	4605      	mov	r5, r0
    int pin_state = (hal_gpio_read(pin) == 0);
    c58c:	f7ff ffde 	bl	c54c <hal_gpio_read>
    c590:	fab0 f480 	clz	r4, r0
    c594:	0964      	lsrs	r4, r4, #5
    hal_gpio_write(pin, pin_state);
    c596:	4621      	mov	r1, r4
    c598:	4628      	mov	r0, r5
    c59a:	f7ff ffbd 	bl	c518 <hal_gpio_write>
    return pin_state;
}
    c59e:	4620      	mov	r0, r4
    c5a0:	bd38      	pop	{r3, r4, r5, pc}
	...

0000c5a4 <os_idle_task>:
 *
 * @param arg unused
 */
void
os_idle_task(void *arg)
{
    c5a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

    sanity_itvl_ticks = (MYNEWT_VAL(SANITY_INTERVAL) * OS_TICKS_PER_SEC) / 1000;
    sanity_last = 0;

#if MYNEWT_VAL(WATCHDOG_INTERVAL) > 0
    hal_watchdog_tickle();
    c5a6:	f001 fdd9 	bl	e15c <hal_watchdog_tickle>
    sanity_last = 0;
    c5aa:	2500      	movs	r5, #0
    c5ac:	e00e      	b.n	c5cc <os_idle_task+0x28>
    while (1) {
        ++g_os_idle_ctr;

        now = os_time_get();
        if (OS_TIME_TICK_GEQ(now, sanity_last + sanity_itvl_ticks)) {
            os_sanity_run();
    c5ae:	f000 fb53 	bl	cc58 <os_sanity_run>
#if MYNEWT_VAL(WATCHDOG_INTERVAL) > 0
            /* Tickle the watchdog after successfully running sanity */
            hal_watchdog_tickle();
    c5b2:	f001 fdd3 	bl	e15c <hal_watchdog_tickle>
#if MYNEWT_VAL(OS_WATCHDOG_MONITOR)
            os_cputime_timer_stop(&os_wdog_monitor);
            os_cputime_timer_relative(&os_wdog_monitor, OS_WDOG_MONITOR_TMO);
#endif
#endif
            sanity_last = now;
    c5b6:	4625      	mov	r5, r4
    c5b8:	e014      	b.n	c5e4 <os_idle_task+0x40>
         * happens on next interval in case it was already performed on current
         * tick.
         */
        sanity_to_next = sanity_last + sanity_itvl_ticks - now;
        if ((int)sanity_to_next <= 0) {
            sanity_to_next += sanity_itvl_ticks;
    c5ba:	f503 63f0 	add.w	r3, r3, #1920	; 0x780
    c5be:	e025      	b.n	c60c <os_idle_task+0x68>
        }
        iticks = min(iticks, sanity_to_next);

        if (iticks < MIN_IDLE_TICKS) {
            iticks = 0;
    c5c0:	2000      	movs	r0, #0
        /* Tell the architecture specific support to put the processor to sleep
         * for 'n' ticks.
         */

        os_trace_idle();
        os_tick_idle(iticks);
    c5c2:	f001 fcbb 	bl	df3c <os_tick_idle>
        OS_EXIT_CRITICAL(sr);
    c5c6:	4638      	mov	r0, r7
    c5c8:	f000 fe0a 	bl	d1e0 <os_arch_restore_sr>
        ++g_os_idle_ctr;
    c5cc:	4a15      	ldr	r2, [pc, #84]	; (c624 <os_idle_task+0x80>)
    c5ce:	6813      	ldr	r3, [r2, #0]
    c5d0:	3301      	adds	r3, #1
    c5d2:	6013      	str	r3, [r2, #0]
        now = os_time_get();
    c5d4:	f000 fdb0 	bl	d138 <os_time_get>
    c5d8:	4604      	mov	r4, r0
        if (OS_TIME_TICK_GEQ(now, sanity_last + sanity_itvl_ticks)) {
    c5da:	f505 63f0 	add.w	r3, r5, #1920	; 0x780
    c5de:	1ac3      	subs	r3, r0, r3
    c5e0:	2b00      	cmp	r3, #0
    c5e2:	dae4      	bge.n	c5ae <os_idle_task+0xa>
        OS_ENTER_CRITICAL(sr);
    c5e4:	f000 fdf6 	bl	d1d4 <os_arch_save_sr>
    c5e8:	4607      	mov	r7, r0
        now = os_time_get();
    c5ea:	f000 fda5 	bl	d138 <os_time_get>
    c5ee:	4606      	mov	r6, r0
        sticks = os_sched_wakeup_ticks(now);
    c5f0:	f000 fc74 	bl	cedc <os_sched_wakeup_ticks>
    c5f4:	4604      	mov	r4, r0
        cticks = os_callout_wakeup_ticks(now);
    c5f6:	4630      	mov	r0, r6
    c5f8:	f000 f93c 	bl	c874 <os_callout_wakeup_ticks>
        iticks = min(sticks, cticks);
    c5fc:	42a0      	cmp	r0, r4
    c5fe:	bf28      	it	cs
    c600:	4620      	movcs	r0, r4
        sanity_to_next = sanity_last + sanity_itvl_ticks - now;
    c602:	f505 63f0 	add.w	r3, r5, #1920	; 0x780
    c606:	1b9b      	subs	r3, r3, r6
        if ((int)sanity_to_next <= 0) {
    c608:	2b00      	cmp	r3, #0
    c60a:	ddd6      	ble.n	c5ba <os_idle_task+0x16>
        iticks = min(iticks, sanity_to_next);
    c60c:	4298      	cmp	r0, r3
    c60e:	bf28      	it	cs
    c610:	4618      	movcs	r0, r3
        if (iticks < MIN_IDLE_TICKS) {
    c612:	280b      	cmp	r0, #11
    c614:	d9d4      	bls.n	c5c0 <os_idle_task+0x1c>
        } else if (iticks > MAX_IDLE_TICKS) {
    c616:	f5b0 3f96 	cmp.w	r0, #76800	; 0x12c00
    c61a:	d9d2      	bls.n	c5c2 <os_idle_task+0x1e>
            iticks = MAX_IDLE_TICKS;
    c61c:	f44f 3096 	mov.w	r0, #76800	; 0x12c00
    c620:	e7cf      	b.n	c5c2 <os_idle_task+0x1e>
    c622:	bf00      	nop
    c624:	200021c4 	.word	0x200021c4

0000c628 <os_main>:
    return (g_os_started);
}

static void
os_main(void *arg)
{
    c628:	b508      	push	{r3, lr}
    c62a:	4603      	mov	r3, r0
    int (*fn)(int argc, char **argv) = arg;

#if !MYNEWT_VAL(SELFTEST)
    fn(0, NULL);
    c62c:	2100      	movs	r1, #0
    c62e:	4608      	mov	r0, r1
    c630:	4798      	blx	r3
    (void)fn;
    while (1) {
        os_eventq_run(os_eventq_dflt_get());
    }
#endif
    assert(0);
    c632:	f7ff fdbb 	bl	c1ac <hal_debugger_connected>
    c636:	b100      	cbz	r0, c63a <os_main+0x12>
    c638:	be01      	bkpt	0x0001
    c63a:	2300      	movs	r3, #0
    c63c:	461a      	mov	r2, r3
    c63e:	4619      	mov	r1, r3
    c640:	4618      	mov	r0, r3
    c642:	f000 fe93 	bl	d36c <__assert_func>
	...

0000c648 <os_started>:
}
    c648:	4b01      	ldr	r3, [pc, #4]	; (c650 <os_started+0x8>)
    c64a:	6818      	ldr	r0, [r3, #0]
    c64c:	4770      	bx	lr
    c64e:	bf00      	nop
    c650:	200021c8 	.word	0x200021c8

0000c654 <os_init_idle_task>:
}
#endif

void
os_init_idle_task(void)
{
    c654:	b500      	push	{lr}
    c656:	b085      	sub	sp, #20
    int rc;

    rc = os_task_init(&g_idle_task, "idle", os_idle_task, NULL,
    c658:	2340      	movs	r3, #64	; 0x40
    c65a:	9303      	str	r3, [sp, #12]
    c65c:	4b1b      	ldr	r3, [pc, #108]	; (c6cc <os_init_idle_task+0x78>)
    c65e:	9302      	str	r3, [sp, #8]
    c660:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    c664:	9301      	str	r3, [sp, #4]
    c666:	23ff      	movs	r3, #255	; 0xff
    c668:	9300      	str	r3, [sp, #0]
    c66a:	2300      	movs	r3, #0
    c66c:	4a18      	ldr	r2, [pc, #96]	; (c6d0 <os_init_idle_task+0x7c>)
    c66e:	4919      	ldr	r1, [pc, #100]	; (c6d4 <os_init_idle_task+0x80>)
    c670:	4819      	ldr	r0, [pc, #100]	; (c6d8 <os_init_idle_task+0x84>)
    c672:	f000 fc97 	bl	cfa4 <os_task_init>
            OS_IDLE_PRIO, OS_WAIT_FOREVER, g_idle_task_stack,
            OS_STACK_ALIGN(OS_IDLE_STACK_SIZE));
    assert(rc == 0);
    c676:	b950      	cbnz	r0, c68e <os_init_idle_task+0x3a>

    /* Initialize sanity */
    rc = os_sanity_init();
    c678:	f000 fb30 	bl	ccdc <os_sanity_init>
    assert(rc == 0);
    c67c:	b988      	cbnz	r0, c6a2 <os_init_idle_task+0x4e>

#if MYNEWT_VAL(WATCHDOG_INTERVAL) > 0
    rc = hal_watchdog_init(MYNEWT_VAL(WATCHDOG_INTERVAL));
    c67e:	f247 5030 	movw	r0, #30000	; 0x7530
    c682:	f001 fd23 	bl	e0cc <hal_watchdog_init>
    assert(rc == 0);
    c686:	b9b0      	cbnz	r0, c6b6 <os_init_idle_task+0x62>
#if MYNEWT_VAL(OS_WATCHDOG_MONITOR)
    os_cputime_timer_init(&os_wdog_monitor, os_wdog_monitor_tmo, NULL);
    os_cputime_timer_relative(&os_wdog_monitor, OS_WDOG_MONITOR_TMO);
#endif
#endif
}
    c688:	b005      	add	sp, #20
    c68a:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
    c68e:	f7ff fd8d 	bl	c1ac <hal_debugger_connected>
    c692:	b100      	cbz	r0, c696 <os_init_idle_task+0x42>
    c694:	be01      	bkpt	0x0001
    c696:	2300      	movs	r3, #0
    c698:	461a      	mov	r2, r3
    c69a:	4619      	mov	r1, r3
    c69c:	4618      	mov	r0, r3
    c69e:	f000 fe65 	bl	d36c <__assert_func>
    assert(rc == 0);
    c6a2:	f7ff fd83 	bl	c1ac <hal_debugger_connected>
    c6a6:	b100      	cbz	r0, c6aa <os_init_idle_task+0x56>
    c6a8:	be01      	bkpt	0x0001
    c6aa:	2300      	movs	r3, #0
    c6ac:	461a      	mov	r2, r3
    c6ae:	4619      	mov	r1, r3
    c6b0:	4618      	mov	r0, r3
    c6b2:	f000 fe5b 	bl	d36c <__assert_func>
    assert(rc == 0);
    c6b6:	f7ff fd79 	bl	c1ac <hal_debugger_connected>
    c6ba:	b100      	cbz	r0, c6be <os_init_idle_task+0x6a>
    c6bc:	be01      	bkpt	0x0001
    c6be:	2300      	movs	r3, #0
    c6c0:	461a      	mov	r2, r3
    c6c2:	4619      	mov	r1, r3
    c6c4:	4618      	mov	r0, r3
    c6c6:	f000 fe51 	bl	d36c <__assert_func>
    c6ca:	bf00      	nop
    c6cc:	20000138 	.word	0x20000138
    c6d0:	0000c5a5 	.word	0x0000c5a5
    c6d4:	0000ebf4 	.word	0x0000ebf4
    c6d8:	20002174 	.word	0x20002174

0000c6dc <os_init>:

void
os_init(int (*main_fn)(int argc, char **arg))
{
    c6dc:	b510      	push	{r4, lr}
    c6de:	b084      	sub	sp, #16
    c6e0:	4604      	mov	r4, r0
#if MYNEWT_VAL(RTT)
    memset(&_SEGGER_RTT, 0, sizeof(_SEGGER_RTT));
    SEGGER_RTT_Init();
#endif

    TAILQ_INIT(&g_callout_list);
    c6e2:	4b2c      	ldr	r3, [pc, #176]	; (c794 <os_init+0xb8>)
    c6e4:	2200      	movs	r2, #0
    c6e6:	601a      	str	r2, [r3, #0]
    c6e8:	605b      	str	r3, [r3, #4]
    STAILQ_INIT(&g_os_task_list);
    c6ea:	4b2b      	ldr	r3, [pc, #172]	; (c798 <os_init+0xbc>)
    c6ec:	601a      	str	r2, [r3, #0]
    c6ee:	605b      	str	r3, [r3, #4]
    os_eventq_init(os_eventq_dflt_get());
    c6f0:	f000 f9b4 	bl	ca5c <os_eventq_dflt_get>
    c6f4:	f000 f96c 	bl	c9d0 <os_eventq_init>

    /* Initialize device list. */
    os_dev_reset();
    c6f8:	f000 f962 	bl	c9c0 <os_dev_reset>

    err = os_arch_os_init();
    c6fc:	f000 fda6 	bl	d24c <os_arch_os_init>
    assert(err == OS_OK);
    c700:	bb00      	cbnz	r0, c744 <os_init+0x68>

    if (main_fn) {
    c702:	b18c      	cbz	r4, c728 <os_init+0x4c>
        err = os_task_init(&g_os_main_task, "main", os_main, main_fn,
    c704:	f44f 6380 	mov.w	r3, #1024	; 0x400
    c708:	9303      	str	r3, [sp, #12]
    c70a:	4b24      	ldr	r3, [pc, #144]	; (c79c <os_init+0xc0>)
    c70c:	9302      	str	r3, [sp, #8]
    c70e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    c712:	9301      	str	r3, [sp, #4]
    c714:	237f      	movs	r3, #127	; 0x7f
    c716:	9300      	str	r3, [sp, #0]
    c718:	4623      	mov	r3, r4
    c71a:	4a21      	ldr	r2, [pc, #132]	; (c7a0 <os_init+0xc4>)
    c71c:	4921      	ldr	r1, [pc, #132]	; (c7a4 <os_init+0xc8>)
    c71e:	4822      	ldr	r0, [pc, #136]	; (c7a8 <os_init+0xcc>)
    c720:	f000 fc40 	bl	cfa4 <os_task_init>
    c724:	b2c0      	uxtb	r0, r0
                   OS_MAIN_TASK_PRIO,
                   (OS_MAIN_TASK_TIMER_TICKS == 0) ? OS_WAIT_FOREVER : OS_MAIN_TASK_TIMER_TICKS,
                   g_os_main_stack, OS_STACK_ALIGN(OS_MAIN_STACK_SIZE));
        assert(err == 0);
    c726:	b9b8      	cbnz	r0, c758 <os_init+0x7c>
    }

    /* Call bsp related OS initializations */
    hal_bsp_init();
    c728:	f001 fa76 	bl	dc18 <hal_bsp_init>

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_PRIMARY);
    c72c:	2001      	movs	r0, #1
    c72e:	f000 f931 	bl	c994 <os_dev_initialize_all>
    c732:	b2c0      	uxtb	r0, r0
    assert(err == OS_OK);
    c734:	b9d0      	cbnz	r0, c76c <os_init+0x90>

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_SECONDARY);
    c736:	2002      	movs	r0, #2
    c738:	f000 f92c 	bl	c994 <os_dev_initialize_all>
    c73c:	b2c0      	uxtb	r0, r0
    assert(err == OS_OK);
    c73e:	b9f8      	cbnz	r0, c780 <os_init+0xa4>
}
    c740:	b004      	add	sp, #16
    c742:	bd10      	pop	{r4, pc}
    assert(err == OS_OK);
    c744:	f7ff fd32 	bl	c1ac <hal_debugger_connected>
    c748:	b100      	cbz	r0, c74c <os_init+0x70>
    c74a:	be01      	bkpt	0x0001
    c74c:	2300      	movs	r3, #0
    c74e:	461a      	mov	r2, r3
    c750:	4619      	mov	r1, r3
    c752:	4618      	mov	r0, r3
    c754:	f000 fe0a 	bl	d36c <__assert_func>
        assert(err == 0);
    c758:	f7ff fd28 	bl	c1ac <hal_debugger_connected>
    c75c:	b100      	cbz	r0, c760 <os_init+0x84>
    c75e:	be01      	bkpt	0x0001
    c760:	2300      	movs	r3, #0
    c762:	461a      	mov	r2, r3
    c764:	4619      	mov	r1, r3
    c766:	4618      	mov	r0, r3
    c768:	f000 fe00 	bl	d36c <__assert_func>
    assert(err == OS_OK);
    c76c:	f7ff fd1e 	bl	c1ac <hal_debugger_connected>
    c770:	b100      	cbz	r0, c774 <os_init+0x98>
    c772:	be01      	bkpt	0x0001
    c774:	2300      	movs	r3, #0
    c776:	461a      	mov	r2, r3
    c778:	4619      	mov	r1, r3
    c77a:	4618      	mov	r0, r3
    c77c:	f000 fdf6 	bl	d36c <__assert_func>
    assert(err == OS_OK);
    c780:	f7ff fd14 	bl	c1ac <hal_debugger_connected>
    c784:	b100      	cbz	r0, c788 <os_init+0xac>
    c786:	be01      	bkpt	0x0001
    c788:	2300      	movs	r3, #0
    c78a:	461a      	mov	r2, r3
    c78c:	4619      	mov	r1, r3
    c78e:	4618      	mov	r0, r3
    c790:	f000 fdec 	bl	d36c <__assert_func>
    c794:	2000221c 	.word	0x2000221c
    c798:	20002240 	.word	0x20002240
    c79c:	20000238 	.word	0x20000238
    c7a0:	0000c629 	.word	0x0000c629
    c7a4:	0000ebec 	.word	0x0000ebec
    c7a8:	200021cc 	.word	0x200021cc

0000c7ac <os_start>:

void
os_start(void)
{
    c7ac:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_SCHEDULING)
    os_error_t err;

#if MYNEWT_VAL(WATCHDOG_INTERVAL) > 0
    /* Enable the watchdog prior to starting the OS */
    hal_watchdog_enable();
    c7ae:	f001 fccd 	bl	e14c <hal_watchdog_enable>
#endif

    err = os_arch_os_start();
    c7b2:	f000 fdab 	bl	d30c <os_arch_os_start>
    assert(err == OS_OK);
    c7b6:	b900      	cbnz	r0, c7ba <os_start+0xe>
#else
    assert(0);
#endif
}
    c7b8:	bd08      	pop	{r3, pc}
    assert(err == OS_OK);
    c7ba:	f7ff fcf7 	bl	c1ac <hal_debugger_connected>
    c7be:	b100      	cbz	r0, c7c2 <os_start+0x16>
    c7c0:	be01      	bkpt	0x0001
    c7c2:	2300      	movs	r3, #0
    c7c4:	461a      	mov	r2, r3
    c7c6:	4619      	mov	r1, r3
    c7c8:	4618      	mov	r0, r3
    c7ca:	f000 fdcf 	bl	d36c <__assert_func>
	...

0000c7d0 <os_pkg_init>:
    hal_system_reset();
}

void
os_pkg_init(void)
{
    c7d0:	b508      	push	{r3, lr}
    os_error_t err;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
    c7d2:	4b10      	ldr	r3, [pc, #64]	; (c814 <os_pkg_init+0x44>)
    c7d4:	781b      	ldrb	r3, [r3, #0]
    c7d6:	b14b      	cbz	r3, c7ec <os_pkg_init+0x1c>

    err = os_dev_initialize_all(OS_DEV_INIT_KERNEL);
    c7d8:	2003      	movs	r0, #3
    c7da:	f000 f8db 	bl	c994 <os_dev_initialize_all>
    c7de:	b2c0      	uxtb	r0, r0
    assert(err == OS_OK);
    c7e0:	b970      	cbnz	r0, c800 <os_pkg_init+0x30>

    os_mempool_module_init();
    c7e2:	f000 f985 	bl	caf0 <os_mempool_module_init>
    os_msys_init();
    c7e6:	f000 f9e5 	bl	cbb4 <os_msys_init>
}
    c7ea:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
    c7ec:	f7ff fcde 	bl	c1ac <hal_debugger_connected>
    c7f0:	b100      	cbz	r0, c7f4 <os_pkg_init+0x24>
    c7f2:	be01      	bkpt	0x0001
    c7f4:	2300      	movs	r3, #0
    c7f6:	461a      	mov	r2, r3
    c7f8:	4619      	mov	r1, r3
    c7fa:	4618      	mov	r0, r3
    c7fc:	f000 fdb6 	bl	d36c <__assert_func>
    assert(err == OS_OK);
    c800:	f7ff fcd4 	bl	c1ac <hal_debugger_connected>
    c804:	b100      	cbz	r0, c808 <os_pkg_init+0x38>
    c806:	be01      	bkpt	0x0001
    c808:	2300      	movs	r3, #0
    c80a:	461a      	mov	r2, r3
    c80c:	4619      	mov	r1, r3
    c80e:	4618      	mov	r0, r3
    c810:	f000 fdac 	bl	d36c <__assert_func>
    c814:	20002258 	.word	0x20002258

0000c818 <os_callout_tick>:
 * to run, it posts an event for each callout that's ready to run,
 * to the event queue provided to os_callout_init().
 */
void
os_callout_tick(void)
{
    c818:	b538      	push	{r3, r4, r5, lr}
    struct os_callout *c;
    uint32_t now;

    os_trace_api_void(OS_TRACE_ID_CALLOUT_TICK);

    now = os_time_get();
    c81a:	f000 fc8d 	bl	d138 <os_time_get>
    c81e:	4605      	mov	r5, r0
    c820:	e00f      	b.n	c842 <os_callout_tick+0x2a>
    while (1) {
        OS_ENTER_CRITICAL(sr);
        c = TAILQ_FIRST(&g_callout_list);
        if (c) {
            if (OS_TIME_TICK_GEQ(now, c->c_ticks)) {
                TAILQ_REMOVE(&g_callout_list, c, c_next);
    c822:	69e2      	ldr	r2, [r4, #28]
    c824:	4b12      	ldr	r3, [pc, #72]	; (c870 <os_callout_tick+0x58>)
    c826:	605a      	str	r2, [r3, #4]
    c828:	69e3      	ldr	r3, [r4, #28]
    c82a:	69a2      	ldr	r2, [r4, #24]
    c82c:	601a      	str	r2, [r3, #0]
                c->c_next.tqe_prev = NULL;
    c82e:	2300      	movs	r3, #0
    c830:	61e3      	str	r3, [r4, #28]
            } else {
                c = NULL;
            }
        }
        OS_EXIT_CRITICAL(sr);
    c832:	f000 fcd5 	bl	d1e0 <os_arch_restore_sr>

        if (c) {
    c836:	b1d4      	cbz	r4, c86e <os_callout_tick+0x56>
            if (c->c_evq) {
    c838:	6920      	ldr	r0, [r4, #16]
    c83a:	b9a0      	cbnz	r0, c866 <os_callout_tick+0x4e>
                os_eventq_put(c->c_evq, &c->c_ev);
            } else {
                c->c_ev.ev_cb(&c->c_ev);
    c83c:	6863      	ldr	r3, [r4, #4]
    c83e:	4620      	mov	r0, r4
    c840:	4798      	blx	r3
        OS_ENTER_CRITICAL(sr);
    c842:	f000 fcc7 	bl	d1d4 <os_arch_save_sr>
        c = TAILQ_FIRST(&g_callout_list);
    c846:	4b0a      	ldr	r3, [pc, #40]	; (c870 <os_callout_tick+0x58>)
    c848:	681c      	ldr	r4, [r3, #0]
        if (c) {
    c84a:	2c00      	cmp	r4, #0
    c84c:	d0f1      	beq.n	c832 <os_callout_tick+0x1a>
            if (OS_TIME_TICK_GEQ(now, c->c_ticks)) {
    c84e:	6963      	ldr	r3, [r4, #20]
    c850:	1aeb      	subs	r3, r5, r3
    c852:	2b00      	cmp	r3, #0
    c854:	db05      	blt.n	c862 <os_callout_tick+0x4a>
                TAILQ_REMOVE(&g_callout_list, c, c_next);
    c856:	69a3      	ldr	r3, [r4, #24]
    c858:	2b00      	cmp	r3, #0
    c85a:	d0e2      	beq.n	c822 <os_callout_tick+0xa>
    c85c:	69e2      	ldr	r2, [r4, #28]
    c85e:	61da      	str	r2, [r3, #28]
    c860:	e7e2      	b.n	c828 <os_callout_tick+0x10>
                c = NULL;
    c862:	2400      	movs	r4, #0
    c864:	e7e5      	b.n	c832 <os_callout_tick+0x1a>
                os_eventq_put(c->c_evq, &c->c_ev);
    c866:	4621      	mov	r1, r4
    c868:	f000 f8bf 	bl	c9ea <os_eventq_put>
    c86c:	e7e9      	b.n	c842 <os_callout_tick+0x2a>
            break;
        }
    }

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_TICK);
}
    c86e:	bd38      	pop	{r3, r4, r5, pc}
    c870:	2000221c 	.word	0x2000221c

0000c874 <os_callout_wakeup_ticks>:
 *
 * @return Number of ticks to first pending callout
 */
os_time_t
os_callout_wakeup_ticks(os_time_t now)
{
    c874:	b510      	push	{r4, lr}
    c876:	4604      	mov	r4, r0
    os_time_t rt;
    struct os_callout *c;

    OS_ASSERT_CRITICAL();
    c878:	f000 fcb5 	bl	d1e6 <os_arch_in_critical>
    c87c:	b130      	cbz	r0, c88c <os_callout_wakeup_ticks+0x18>

    c = TAILQ_FIRST(&g_callout_list);
    c87e:	4b0b      	ldr	r3, [pc, #44]	; (c8ac <os_callout_wakeup_ticks+0x38>)
    c880:	681b      	ldr	r3, [r3, #0]
    if (c != NULL) {
    c882:	b17b      	cbz	r3, c8a4 <os_callout_wakeup_ticks+0x30>
        if (OS_TIME_TICK_GEQ(c->c_ticks, now)) {
    c884:	6958      	ldr	r0, [r3, #20]
    c886:	1b00      	subs	r0, r0, r4
    c888:	d40a      	bmi.n	c8a0 <os_callout_wakeup_ticks+0x2c>
    } else {
        rt = OS_TIMEOUT_NEVER;
    }

    return (rt);
}
    c88a:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
    c88c:	f7ff fc8e 	bl	c1ac <hal_debugger_connected>
    c890:	b100      	cbz	r0, c894 <os_callout_wakeup_ticks+0x20>
    c892:	be01      	bkpt	0x0001
    c894:	2300      	movs	r3, #0
    c896:	461a      	mov	r2, r3
    c898:	4619      	mov	r1, r3
    c89a:	4618      	mov	r0, r3
    c89c:	f000 fd66 	bl	d36c <__assert_func>
            rt = 0;     /* callout time is in the past */
    c8a0:	2000      	movs	r0, #0
    c8a2:	e7f2      	b.n	c88a <os_callout_wakeup_ticks+0x16>
        rt = OS_TIMEOUT_NEVER;
    c8a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return (rt);
    c8a8:	e7ef      	b.n	c88a <os_callout_wakeup_ticks+0x16>
    c8aa:	bf00      	nop
    c8ac:	2000221c 	.word	0x2000221c

0000c8b0 <os_dev_add>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_add(struct os_dev *dev)
{
    c8b0:	b430      	push	{r4, r5}
    struct os_dev *cur_dev;
    struct os_dev *prev_dev;

    /* If no devices present, insert into head */
    if (STAILQ_FIRST(&g_os_dev_list) == NULL) {
    c8b2:	4b15      	ldr	r3, [pc, #84]	; (c908 <os_dev_add+0x58>)
    c8b4:	681d      	ldr	r5, [r3, #0]
    c8b6:	b115      	cbz	r5, c8be <os_dev_add+0xe>
    /* Add devices to the list, sorted first by stage, then by
     * priority.  Keep sorted in this order for initialization
     * stage.
     */
    prev_dev = NULL;
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
    c8b8:	462b      	mov	r3, r5
    prev_dev = NULL;
    c8ba:	2400      	movs	r4, #0
    c8bc:	e008      	b.n	c8d0 <os_dev_add+0x20>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
    c8be:	4603      	mov	r3, r0
    c8c0:	f843 5f20 	str.w	r5, [r3, #32]!
    c8c4:	4a10      	ldr	r2, [pc, #64]	; (c908 <os_dev_add+0x58>)
    c8c6:	6053      	str	r3, [r2, #4]
    c8c8:	6010      	str	r0, [r2, #0]
        return (0);
    c8ca:	e010      	b.n	c8ee <os_dev_add+0x3e>
        if (dev->od_stage < cur_dev->od_stage ||
            ((dev->od_stage == cur_dev->od_stage) &&
             (dev->od_priority < cur_dev->od_priority))) {
            break;
        }
        prev_dev = cur_dev;
    c8cc:	461c      	mov	r4, r3
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
    c8ce:	6a1b      	ldr	r3, [r3, #32]
    c8d0:	b143      	cbz	r3, c8e4 <os_dev_add+0x34>
        if (dev->od_stage < cur_dev->od_stage ||
    c8d2:	7e01      	ldrb	r1, [r0, #24]
    c8d4:	7e1a      	ldrb	r2, [r3, #24]
    c8d6:	4291      	cmp	r1, r2
    c8d8:	d304      	bcc.n	c8e4 <os_dev_add+0x34>
    c8da:	d1f7      	bne.n	c8cc <os_dev_add+0x1c>
             (dev->od_priority < cur_dev->od_priority))) {
    c8dc:	7e41      	ldrb	r1, [r0, #25]
    c8de:	7e5a      	ldrb	r2, [r3, #25]
            ((dev->od_stage == cur_dev->od_stage) &&
    c8e0:	4291      	cmp	r1, r2
    c8e2:	d2f3      	bcs.n	c8cc <os_dev_add+0x1c>
    }

    if (prev_dev) {
    c8e4:	b15c      	cbz	r4, c8fe <os_dev_add+0x4e>
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
    c8e6:	6a23      	ldr	r3, [r4, #32]
    c8e8:	6203      	str	r3, [r0, #32]
    c8ea:	b11b      	cbz	r3, c8f4 <os_dev_add+0x44>
    c8ec:	6220      	str	r0, [r4, #32]
    } else {
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
    }

    return (0);
}
    c8ee:	2000      	movs	r0, #0
    c8f0:	bc30      	pop	{r4, r5}
    c8f2:	4770      	bx	lr
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
    c8f4:	f100 0320 	add.w	r3, r0, #32
    c8f8:	4a03      	ldr	r2, [pc, #12]	; (c908 <os_dev_add+0x58>)
    c8fa:	6053      	str	r3, [r2, #4]
    c8fc:	e7f6      	b.n	c8ec <os_dev_add+0x3c>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
    c8fe:	6205      	str	r5, [r0, #32]
    c900:	4b01      	ldr	r3, [pc, #4]	; (c908 <os_dev_add+0x58>)
    c902:	6018      	str	r0, [r3, #0]
    c904:	e7f3      	b.n	c8ee <os_dev_add+0x3e>
    c906:	bf00      	nop
    c908:	20001238 	.word	0x20001238

0000c90c <os_dev_initialize>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_initialize(struct os_dev *dev)
{
    c90c:	b510      	push	{r4, lr}
    c90e:	4604      	mov	r4, r0
    int rc;

    rc = dev->od_init(dev, dev->od_init_arg);
    c910:	6903      	ldr	r3, [r0, #16]
    c912:	6941      	ldr	r1, [r0, #20]
    c914:	4798      	blx	r3
    if (rc != 0) {
    c916:	4603      	mov	r3, r0
    c918:	b128      	cbz	r0, c926 <os_dev_initialize+0x1a>
        if (dev->od_flags & OS_DEV_F_INIT_CRITICAL) {
    c91a:	7ee2      	ldrb	r2, [r4, #27]
    c91c:	f012 0f08 	tst.w	r2, #8
    c920:	d105      	bne.n	c92e <os_dev_initialize+0x22>
            goto err;
        }
    } else {
        dev->od_flags |= OS_DEV_F_STATUS_READY;
    }
    return 0;
    c922:	2300      	movs	r3, #0
    c924:	e003      	b.n	c92e <os_dev_initialize+0x22>
        dev->od_flags |= OS_DEV_F_STATUS_READY;
    c926:	7ee2      	ldrb	r2, [r4, #27]
    c928:	f042 0201 	orr.w	r2, r2, #1
    c92c:	76e2      	strb	r2, [r4, #27]
err:
    return rc;
}
    c92e:	4618      	mov	r0, r3
    c930:	bd10      	pop	{r4, pc}

0000c932 <os_dev_init>:
    dev->od_name = name;
    c932:	61c1      	str	r1, [r0, #28]
    dev->od_stage = stage;
    c934:	7602      	strb	r2, [r0, #24]
    dev->od_priority = priority;
    c936:	7643      	strb	r3, [r0, #25]
    dev->od_flags = 0;
    c938:	2300      	movs	r3, #0
    c93a:	76c3      	strb	r3, [r0, #27]
    dev->od_open_ref = 0;
    c93c:	7683      	strb	r3, [r0, #26]
    dev->od_init = od_init;
    c93e:	9a00      	ldr	r2, [sp, #0]
    c940:	6102      	str	r2, [r0, #16]
    dev->od_init_arg = arg;
    c942:	9a01      	ldr	r2, [sp, #4]
    c944:	6142      	str	r2, [r0, #20]
    memset(&dev->od_handlers, 0, sizeof(dev->od_handlers));
    c946:	6003      	str	r3, [r0, #0]
    c948:	6043      	str	r3, [r0, #4]
    c94a:	6083      	str	r3, [r0, #8]
    c94c:	60c3      	str	r3, [r0, #12]
}
    c94e:	4618      	mov	r0, r3
    c950:	4770      	bx	lr
	...

0000c954 <os_dev_create>:

int
os_dev_create(struct os_dev *dev, const char *name, uint8_t stage,
        uint8_t priority, os_dev_init_func_t od_init, void *arg)
{
    c954:	b530      	push	{r4, r5, lr}
    c956:	b083      	sub	sp, #12
    c958:	4605      	mov	r5, r0
    int rc;

    rc = os_dev_init(dev, name, stage, priority, od_init, arg);
    c95a:	9c07      	ldr	r4, [sp, #28]
    c95c:	9401      	str	r4, [sp, #4]
    c95e:	9c06      	ldr	r4, [sp, #24]
    c960:	9400      	str	r4, [sp, #0]
    c962:	f7ff ffe6 	bl	c932 <os_dev_init>
    if (rc != 0) {
    c966:	4603      	mov	r3, r0
    c968:	b110      	cbz	r0, c970 <os_dev_create+0x1c>
    if (g_os_started) {
        rc = os_dev_initialize(dev);
    }
err:
    return (rc);
}
    c96a:	4618      	mov	r0, r3
    c96c:	b003      	add	sp, #12
    c96e:	bd30      	pop	{r4, r5, pc}
    rc = os_dev_add(dev);
    c970:	4628      	mov	r0, r5
    c972:	f7ff ff9d 	bl	c8b0 <os_dev_add>
    if (rc != 0) {
    c976:	4603      	mov	r3, r0
    c978:	2800      	cmp	r0, #0
    c97a:	d1f6      	bne.n	c96a <os_dev_create+0x16>
    if (g_os_started) {
    c97c:	4a04      	ldr	r2, [pc, #16]	; (c990 <os_dev_create+0x3c>)
    c97e:	6812      	ldr	r2, [r2, #0]
    c980:	2a00      	cmp	r2, #0
    c982:	d0f2      	beq.n	c96a <os_dev_create+0x16>
        rc = os_dev_initialize(dev);
    c984:	4628      	mov	r0, r5
    c986:	f7ff ffc1 	bl	c90c <os_dev_initialize>
    c98a:	4603      	mov	r3, r0
    return (rc);
    c98c:	e7ed      	b.n	c96a <os_dev_create+0x16>
    c98e:	bf00      	nop
    c990:	200021c8 	.word	0x200021c8

0000c994 <os_dev_initialize_all>:

int
os_dev_initialize_all(uint8_t stage)
{
    c994:	b538      	push	{r3, r4, r5, lr}
    c996:	4605      	mov	r5, r0
    struct os_dev *dev;
    int rc = 0;

    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
    c998:	4b08      	ldr	r3, [pc, #32]	; (c9bc <os_dev_initialize_all+0x28>)
    c99a:	681c      	ldr	r4, [r3, #0]
    int rc = 0;
    c99c:	2200      	movs	r2, #0
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
    c99e:	e000      	b.n	c9a2 <os_dev_initialize_all+0xe>
    c9a0:	6a24      	ldr	r4, [r4, #32]
    c9a2:	b144      	cbz	r4, c9b6 <os_dev_initialize_all+0x22>
        if (dev->od_stage == stage) {
    c9a4:	7e23      	ldrb	r3, [r4, #24]
    c9a6:	42ab      	cmp	r3, r5
    c9a8:	d1fa      	bne.n	c9a0 <os_dev_initialize_all+0xc>
            rc = os_dev_initialize(dev);
    c9aa:	4620      	mov	r0, r4
    c9ac:	f7ff ffae 	bl	c90c <os_dev_initialize>
            if (rc) {
    c9b0:	4602      	mov	r2, r0
    c9b2:	2800      	cmp	r0, #0
    c9b4:	d0f4      	beq.n	c9a0 <os_dev_initialize_all+0xc>
            }
        }
    }

    return (rc);
}
    c9b6:	4610      	mov	r0, r2
    c9b8:	bd38      	pop	{r3, r4, r5, pc}
    c9ba:	bf00      	nop
    c9bc:	20001238 	.word	0x20001238

0000c9c0 <os_dev_reset>:
}

void
os_dev_reset(void)
{
    STAILQ_INIT(&g_os_dev_list);
    c9c0:	4b02      	ldr	r3, [pc, #8]	; (c9cc <os_dev_reset+0xc>)
    c9c2:	2200      	movs	r2, #0
    c9c4:	601a      	str	r2, [r3, #0]
    c9c6:	605b      	str	r3, [r3, #4]
}
    c9c8:	4770      	bx	lr
    c9ca:	bf00      	nop
    c9cc:	20001238 	.word	0x20001238

0000c9d0 <os_eventq_init>:
static struct os_eventq os_eventq_main;

void
os_eventq_init(struct os_eventq *evq)
{
    memset(evq, 0, sizeof(*evq));
    c9d0:	2200      	movs	r2, #0
    c9d2:	6002      	str	r2, [r0, #0]
    c9d4:	6042      	str	r2, [r0, #4]
    STAILQ_INIT(&evq->evq_list);
    c9d6:	4603      	mov	r3, r0
    c9d8:	f843 2f08 	str.w	r2, [r3, #8]!
    c9dc:	60c3      	str	r3, [r0, #12]
}
    c9de:	4770      	bx	lr

0000c9e0 <os_eventq_inited>:

int
os_eventq_inited(const struct os_eventq *evq)
{
    return evq->evq_list.stqh_last != NULL;
    c9e0:	68c0      	ldr	r0, [r0, #12]
}
    c9e2:	3000      	adds	r0, #0
    c9e4:	bf18      	it	ne
    c9e6:	2001      	movne	r0, #1
    c9e8:	4770      	bx	lr

0000c9ea <os_eventq_put>:

void
os_eventq_put(struct os_eventq *evq, struct os_event *ev)
{
    c9ea:	b570      	push	{r4, r5, r6, lr}
    int resched;
    os_sr_t sr;

    assert(evq != NULL && os_eventq_inited(evq));
    c9ec:	b1f0      	cbz	r0, ca2c <os_eventq_put+0x42>
    c9ee:	460c      	mov	r4, r1
    c9f0:	4605      	mov	r5, r0
    c9f2:	f7ff fff5 	bl	c9e0 <os_eventq_inited>
    c9f6:	b1c8      	cbz	r0, ca2c <os_eventq_put+0x42>

    os_trace_api_u32x2(OS_TRACE_ID_EVENTQ_PUT, (uint32_t)evq, (uint32_t)ev);

    OS_ENTER_CRITICAL(sr);
    c9f8:	f000 fbec 	bl	d1d4 <os_arch_save_sr>
    c9fc:	4606      	mov	r6, r0

    /* Do not queue if already queued */
    if (OS_EVENT_QUEUED(ev)) {
    c9fe:	7823      	ldrb	r3, [r4, #0]
    ca00:	b9f3      	cbnz	r3, ca40 <os_eventq_put+0x56>
        os_trace_api_ret(OS_TRACE_ID_EVENTQ_PUT);
        return;
    }

    /* Queue the event */
    ev->ev_queued = 1;
    ca02:	2301      	movs	r3, #1
    ca04:	7023      	strb	r3, [r4, #0]
    STAILQ_INSERT_TAIL(&evq->evq_list, ev, ev_next);
    ca06:	2300      	movs	r3, #0
    ca08:	60e3      	str	r3, [r4, #12]
    ca0a:	68eb      	ldr	r3, [r5, #12]
    ca0c:	601c      	str	r4, [r3, #0]
    ca0e:	340c      	adds	r4, #12
    ca10:	60ec      	str	r4, [r5, #12]

    resched = 0;
    if (evq->evq_task) {
    ca12:	6868      	ldr	r0, [r5, #4]
    ca14:	b1d8      	cbz	r0, ca4e <os_eventq_put+0x64>
        /* If task waiting on event, wake it up.
         * Check if task is sleeping, because another event
         * queue may have woken this task up beforehand.
         */
        if (evq->evq_task->t_state == OS_TASK_SLEEP) {
    ca16:	7b03      	ldrb	r3, [r0, #12]
    ca18:	2b02      	cmp	r3, #2
    ca1a:	d014      	beq.n	ca46 <os_eventq_put+0x5c>
    resched = 0;
    ca1c:	2400      	movs	r4, #0
            resched = 1;
        }
        /* Either way, NULL out the task, because the task will
         * be awake upon exit of this function.
         */
        evq->evq_task = NULL;
    ca1e:	2300      	movs	r3, #0
    ca20:	606b      	str	r3, [r5, #4]
    }

    OS_EXIT_CRITICAL(sr);
    ca22:	4630      	mov	r0, r6
    ca24:	f000 fbdc 	bl	d1e0 <os_arch_restore_sr>

    if (resched) {
    ca28:	b99c      	cbnz	r4, ca52 <os_eventq_put+0x68>
        os_sched(NULL);
    }

    os_trace_api_ret(OS_TRACE_ID_EVENTQ_PUT);
}
    ca2a:	bd70      	pop	{r4, r5, r6, pc}
    assert(evq != NULL && os_eventq_inited(evq));
    ca2c:	f7ff fbbe 	bl	c1ac <hal_debugger_connected>
    ca30:	b100      	cbz	r0, ca34 <os_eventq_put+0x4a>
    ca32:	be01      	bkpt	0x0001
    ca34:	2300      	movs	r3, #0
    ca36:	461a      	mov	r2, r3
    ca38:	4619      	mov	r1, r3
    ca3a:	4618      	mov	r0, r3
    ca3c:	f000 fc96 	bl	d36c <__assert_func>
        OS_EXIT_CRITICAL(sr);
    ca40:	f000 fbce 	bl	d1e0 <os_arch_restore_sr>
    ca44:	e7f1      	b.n	ca2a <os_eventq_put+0x40>
            os_sched_wakeup(evq->evq_task);
    ca46:	f000 f9e7 	bl	ce18 <os_sched_wakeup>
            resched = 1;
    ca4a:	2401      	movs	r4, #1
    ca4c:	e7e7      	b.n	ca1e <os_eventq_put+0x34>
    resched = 0;
    ca4e:	2400      	movs	r4, #0
    ca50:	e7e7      	b.n	ca22 <os_eventq_put+0x38>
        os_sched(NULL);
    ca52:	2000      	movs	r0, #0
    ca54:	f000 fa6c 	bl	cf30 <os_sched>
    ca58:	e7e7      	b.n	ca2a <os_eventq_put+0x40>
	...

0000ca5c <os_eventq_dflt_get>:

struct os_eventq *
os_eventq_dflt_get(void)
{
    return &os_eventq_main;
}
    ca5c:	4800      	ldr	r0, [pc, #0]	; (ca60 <os_eventq_dflt_get+0x4>)
    ca5e:	4770      	bx	lr
    ca60:	20001240 	.word	0x20001240

0000ca64 <os_mempool_init_internal>:
    int i;
    uint8_t *block_addr;
    struct os_memblock *block_ptr;

    /* Check for valid parameters */
    if (!mp || (block_size == 0)) {
    ca64:	2800      	cmp	r0, #0
    ca66:	d031      	beq.n	cacc <os_mempool_init_internal+0x68>
{
    ca68:	b430      	push	{r4, r5}
    ca6a:	4604      	mov	r4, r0
    if (!mp || (block_size == 0)) {
    ca6c:	2a00      	cmp	r2, #0
    ca6e:	d02f      	beq.n	cad0 <os_mempool_init_internal+0x6c>
        return OS_INVALID_PARM;
    }

    if ((!membuf) && (blocks != 0)) {
    ca70:	b1bb      	cbz	r3, caa2 <os_mempool_init_internal+0x3e>
        return OS_INVALID_PARM;
    }

    if (membuf != NULL) {
    ca72:	b113      	cbz	r3, ca7a <os_mempool_init_internal+0x16>
        /* Blocks need to be sized properly and memory buffer should be
         * aligned
         */
        if (((uint32_t)membuf & (OS_ALIGNMENT - 1)) != 0) {
    ca74:	f013 0f03 	tst.w	r3, #3
    ca78:	d12c      	bne.n	cad4 <os_mempool_init_internal+0x70>
            return OS_MEM_NOT_ALIGNED;
        }
    }

    /* Initialize the memory pool structure */
    mp->mp_block_size = block_size;
    ca7a:	6022      	str	r2, [r4, #0]
    mp->mp_num_free = blocks;
    ca7c:	80e1      	strh	r1, [r4, #6]
    mp->mp_min_free = blocks;
    ca7e:	8121      	strh	r1, [r4, #8]
    mp->mp_flags = flags;
    ca80:	f89d 000c 	ldrb.w	r0, [sp, #12]
    ca84:	72a0      	strb	r0, [r4, #10]
    mp->mp_num_blocks = blocks;
    ca86:	80a1      	strh	r1, [r4, #4]
    mp->mp_membuf_addr = (uint32_t)membuf;
    ca88:	60e3      	str	r3, [r4, #12]
    mp->name = name;
    ca8a:	9802      	ldr	r0, [sp, #8]
    ca8c:	61a0      	str	r0, [r4, #24]
    SLIST_FIRST(mp) = membuf;
    ca8e:	6163      	str	r3, [r4, #20]

    if (blocks > 0) {
    ca90:	b199      	cbz	r1, caba <os_mempool_init_internal+0x56>
        os_mempool_poison(mp, membuf);
        os_mempool_guard(mp, membuf);
        true_block_size = OS_MEMPOOL_TRUE_BLOCK_SIZE(mp);
    ca92:	f012 0f03 	tst.w	r2, #3
    ca96:	d002      	beq.n	ca9e <os_mempool_init_internal+0x3a>
    ca98:	f022 0203 	bic.w	r2, r2, #3
    ca9c:	3204      	adds	r2, #4

        /* Chain the memory blocks to the free list */
        block_addr = (uint8_t *)membuf;
        block_ptr = (struct os_memblock *)block_addr;
        for (i = 1; i < blocks; i++) {
    ca9e:	2001      	movs	r0, #1
    caa0:	e007      	b.n	cab2 <os_mempool_init_internal+0x4e>
    if ((!membuf) && (blocks != 0)) {
    caa2:	2900      	cmp	r1, #0
    caa4:	d0e5      	beq.n	ca72 <os_mempool_init_internal+0xe>
        return OS_INVALID_PARM;
    caa6:	2003      	movs	r0, #3
    caa8:	e00e      	b.n	cac8 <os_mempool_init_internal+0x64>
            block_addr += true_block_size;
    caaa:	189d      	adds	r5, r3, r2
            os_mempool_poison(mp, block_addr);
            os_mempool_guard(mp, block_addr);
            SLIST_NEXT(block_ptr, mb_next) = (struct os_memblock *)block_addr;
    caac:	601d      	str	r5, [r3, #0]
        for (i = 1; i < blocks; i++) {
    caae:	3001      	adds	r0, #1
            block_addr += true_block_size;
    cab0:	462b      	mov	r3, r5
        for (i = 1; i < blocks; i++) {
    cab2:	4281      	cmp	r1, r0
    cab4:	dcf9      	bgt.n	caaa <os_mempool_init_internal+0x46>
            block_ptr = (struct os_memblock *)block_addr;
        }

        /* Last one in the list should be NULL */
        SLIST_NEXT(block_ptr, mb_next) = NULL;
    cab6:	2200      	movs	r2, #0
    cab8:	601a      	str	r2, [r3, #0]
    }

    STAILQ_INSERT_TAIL(&g_os_mempool_list, mp, mp_list);
    caba:	2000      	movs	r0, #0
    cabc:	6120      	str	r0, [r4, #16]
    cabe:	4b06      	ldr	r3, [pc, #24]	; (cad8 <os_mempool_init_internal+0x74>)
    cac0:	685a      	ldr	r2, [r3, #4]
    cac2:	6014      	str	r4, [r2, #0]
    cac4:	3410      	adds	r4, #16
    cac6:	605c      	str	r4, [r3, #4]

    return OS_OK;
}
    cac8:	bc30      	pop	{r4, r5}
    caca:	4770      	bx	lr
        return OS_INVALID_PARM;
    cacc:	2003      	movs	r0, #3
}
    cace:	4770      	bx	lr
        return OS_INVALID_PARM;
    cad0:	2003      	movs	r0, #3
    cad2:	e7f9      	b.n	cac8 <os_mempool_init_internal+0x64>
            return OS_MEM_NOT_ALIGNED;
    cad4:	2004      	movs	r0, #4
    cad6:	e7f7      	b.n	cac8 <os_mempool_init_internal+0x64>
    cad8:	20002224 	.word	0x20002224

0000cadc <os_mempool_init>:

os_error_t
os_mempool_init(struct os_mempool *mp, uint16_t blocks, uint32_t block_size,
                void *membuf, char *name)
{
    cadc:	b510      	push	{r4, lr}
    cade:	b082      	sub	sp, #8
    return os_mempool_init_internal(mp, blocks, block_size, membuf, name, 0);
    cae0:	2400      	movs	r4, #0
    cae2:	9401      	str	r4, [sp, #4]
    cae4:	9c04      	ldr	r4, [sp, #16]
    cae6:	9400      	str	r4, [sp, #0]
    cae8:	f7ff ffbc 	bl	ca64 <os_mempool_init_internal>
}
    caec:	b002      	add	sp, #8
    caee:	bd10      	pop	{r4, pc}

0000caf0 <os_mempool_module_init>:
}

void
os_mempool_module_init(void)
{
    STAILQ_INIT(&g_os_mempool_list);
    caf0:	4b02      	ldr	r3, [pc, #8]	; (cafc <os_mempool_module_init+0xc>)
    caf2:	2200      	movs	r2, #0
    caf4:	601a      	str	r2, [r3, #0]
    caf6:	605b      	str	r3, [r3, #4]
}
    caf8:	4770      	bx	lr
    cafa:	bf00      	nop
    cafc:	20002224 	.word	0x20002224

0000cb00 <os_msys_register>:
static struct os_sanity_check os_msys_sc;
#endif

int
os_msys_register(struct os_mbuf_pool *new_pool)
{
    cb00:	b430      	push	{r4, r5}
    struct os_mbuf_pool *prev;

    /* We want to have order from smallest to biggest mempool. */
    prev = NULL;
    pool = NULL;
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
    cb02:	4b11      	ldr	r3, [pc, #68]	; (cb48 <os_msys_register+0x48>)
    cb04:	681d      	ldr	r5, [r3, #0]
    cb06:	462b      	mov	r3, r5
    prev = NULL;
    cb08:	2400      	movs	r4, #0
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
    cb0a:	b133      	cbz	r3, cb1a <os_msys_register+0x1a>
        if (new_pool->omp_databuf_len < pool->omp_databuf_len) {
    cb0c:	8801      	ldrh	r1, [r0, #0]
    cb0e:	881a      	ldrh	r2, [r3, #0]
    cb10:	4291      	cmp	r1, r2
    cb12:	d302      	bcc.n	cb1a <os_msys_register+0x1a>
            break;
        }
        prev = pool;
    cb14:	461c      	mov	r4, r3
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
    cb16:	689b      	ldr	r3, [r3, #8]
    cb18:	e7f7      	b.n	cb0a <os_msys_register+0xa>
    }

    if (prev) {
    cb1a:	b15c      	cbz	r4, cb34 <os_msys_register+0x34>
        STAILQ_INSERT_AFTER(&g_msys_pool_list, prev, new_pool, omp_next);
    cb1c:	68a3      	ldr	r3, [r4, #8]
    cb1e:	6083      	str	r3, [r0, #8]
    cb20:	b11b      	cbz	r3, cb2a <os_msys_register+0x2a>
    cb22:	60a0      	str	r0, [r4, #8]
    } else {
        STAILQ_INSERT_HEAD(&g_msys_pool_list, new_pool, omp_next);
    }

    return (0);
}
    cb24:	2000      	movs	r0, #0
    cb26:	bc30      	pop	{r4, r5}
    cb28:	4770      	bx	lr
        STAILQ_INSERT_AFTER(&g_msys_pool_list, prev, new_pool, omp_next);
    cb2a:	f100 0308 	add.w	r3, r0, #8
    cb2e:	4a06      	ldr	r2, [pc, #24]	; (cb48 <os_msys_register+0x48>)
    cb30:	6053      	str	r3, [r2, #4]
    cb32:	e7f6      	b.n	cb22 <os_msys_register+0x22>
        STAILQ_INSERT_HEAD(&g_msys_pool_list, new_pool, omp_next);
    cb34:	6085      	str	r5, [r0, #8]
    cb36:	b115      	cbz	r5, cb3e <os_msys_register+0x3e>
    cb38:	4b03      	ldr	r3, [pc, #12]	; (cb48 <os_msys_register+0x48>)
    cb3a:	6018      	str	r0, [r3, #0]
    cb3c:	e7f2      	b.n	cb24 <os_msys_register+0x24>
    cb3e:	f100 0308 	add.w	r3, r0, #8
    cb42:	4a01      	ldr	r2, [pc, #4]	; (cb48 <os_msys_register+0x48>)
    cb44:	6053      	str	r3, [r2, #4]
    cb46:	e7f7      	b.n	cb38 <os_msys_register+0x38>
    cb48:	20000110 	.word	0x20000110

0000cb4c <os_msys_init_once>:

static void
os_msys_init_once(void *data, struct os_mempool *mempool,
                  struct os_mbuf_pool *mbuf_pool,
                  int block_count, int block_size, char *name)
{
    cb4c:	b530      	push	{r4, r5, lr}
    cb4e:	b083      	sub	sp, #12
    cb50:	4614      	mov	r4, r2
    int rc;

    rc = mem_init_mbuf_pool(data, mempool, mbuf_pool, block_count, block_size,
    cb52:	9d07      	ldr	r5, [sp, #28]
    cb54:	9501      	str	r5, [sp, #4]
    cb56:	9d06      	ldr	r5, [sp, #24]
    cb58:	9500      	str	r5, [sp, #0]
    cb5a:	f001 f83d 	bl	dbd8 <mem_init_mbuf_pool>
                            name);
    SYSINIT_PANIC_ASSERT(rc == 0);
    cb5e:	b928      	cbnz	r0, cb6c <os_msys_init_once+0x20>

    rc = os_msys_register(mbuf_pool);
    cb60:	4620      	mov	r0, r4
    cb62:	f7ff ffcd 	bl	cb00 <os_msys_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
    cb66:	b970      	cbnz	r0, cb86 <os_msys_init_once+0x3a>
}
    cb68:	b003      	add	sp, #12
    cb6a:	bd30      	pop	{r4, r5, pc}
    SYSINIT_PANIC_ASSERT(rc == 0);
    cb6c:	f7ff fb1e 	bl	c1ac <hal_debugger_connected>
    cb70:	b100      	cbz	r0, cb74 <os_msys_init_once+0x28>
    cb72:	be01      	bkpt	0x0001
    cb74:	2000      	movs	r0, #0
    cb76:	9000      	str	r0, [sp, #0]
    cb78:	4b09      	ldr	r3, [pc, #36]	; (cba0 <os_msys_init_once+0x54>)
    cb7a:	681d      	ldr	r5, [r3, #0]
    cb7c:	4603      	mov	r3, r0
    cb7e:	4602      	mov	r2, r0
    cb80:	4601      	mov	r1, r0
    cb82:	47a8      	blx	r5
    cb84:	e7ec      	b.n	cb60 <os_msys_init_once+0x14>
    SYSINIT_PANIC_ASSERT(rc == 0);
    cb86:	f7ff fb11 	bl	c1ac <hal_debugger_connected>
    cb8a:	b100      	cbz	r0, cb8e <os_msys_init_once+0x42>
    cb8c:	be01      	bkpt	0x0001
    cb8e:	2000      	movs	r0, #0
    cb90:	9000      	str	r0, [sp, #0]
    cb92:	4b03      	ldr	r3, [pc, #12]	; (cba0 <os_msys_init_once+0x54>)
    cb94:	681c      	ldr	r4, [r3, #0]
    cb96:	4603      	mov	r3, r0
    cb98:	4602      	mov	r2, r0
    cb9a:	4601      	mov	r1, r0
    cb9c:	47a0      	blx	r4
}
    cb9e:	e7e3      	b.n	cb68 <os_msys_init_once+0x1c>
    cba0:	20000128 	.word	0x20000128

0000cba4 <os_msys_reset>:
    STAILQ_INIT(&g_msys_pool_list);
    cba4:	4b02      	ldr	r3, [pc, #8]	; (cbb0 <os_msys_reset+0xc>)
    cba6:	2200      	movs	r2, #0
    cba8:	601a      	str	r2, [r3, #0]
    cbaa:	605b      	str	r3, [r3, #4]
}
    cbac:	4770      	bx	lr
    cbae:	bf00      	nop
    cbb0:	20000110 	.word	0x20000110

0000cbb4 <os_msys_init>:

void
os_msys_init(void)
{
    cbb4:	b500      	push	{lr}
    cbb6:	b083      	sub	sp, #12
    int rc;

    os_msys_reset();
    cbb8:	f7ff fff4 	bl	cba4 <os_msys_reset>

    (void)os_msys_init_once;
    (void)rc;

#if MYNEWT_VAL(MSYS_1_BLOCK_COUNT) > 0
    os_msys_init_once(os_msys_1_data,
    cbbc:	4b06      	ldr	r3, [pc, #24]	; (cbd8 <os_msys_init+0x24>)
    cbbe:	9301      	str	r3, [sp, #4]
    cbc0:	f44f 7392 	mov.w	r3, #292	; 0x124
    cbc4:	9300      	str	r3, [sp, #0]
    cbc6:	230c      	movs	r3, #12
    cbc8:	4a04      	ldr	r2, [pc, #16]	; (cbdc <os_msys_init+0x28>)
    cbca:	4905      	ldr	r1, [pc, #20]	; (cbe0 <os_msys_init+0x2c>)
    cbcc:	4805      	ldr	r0, [pc, #20]	; (cbe4 <os_msys_init+0x30>)
    cbce:	f7ff ffbd 	bl	cb4c <os_msys_init_once>
    os_msys_sc.sc_checkin_itvl =
        OS_TICKS_PER_SEC * MYNEWT_VAL(MSYS_SANITY_TIMEOUT) / 1000;
    rc = os_sanity_check_register(&os_msys_sc);
    SYSINIT_PANIC_ASSERT(rc == 0);
#endif
}
    cbd2:	b003      	add	sp, #12
    cbd4:	f85d fb04 	ldr.w	pc, [sp], #4
    cbd8:	0000ebfc 	.word	0x0000ebfc
    cbdc:	20002000 	.word	0x20002000
    cbe0:	2000200c 	.word	0x2000200c
    cbe4:	20001250 	.word	0x20001250

0000cbe8 <os_sanity_check_list_lock>:
 *
 * @return 0 on success, error code on failure.
 */
static int
os_sanity_check_list_lock(void)
{
    cbe8:	b508      	push	{r3, lr}
    int rc;

    if (!g_os_started) {
    cbea:	4b05      	ldr	r3, [pc, #20]	; (cc00 <os_sanity_check_list_lock+0x18>)
    cbec:	6818      	ldr	r0, [r3, #0]
    cbee:	b900      	cbnz	r0, cbf2 <os_sanity_check_list_lock+0xa>
    }

    return (0);
err:
    return (rc);
}
    cbf0:	bd08      	pop	{r3, pc}
    rc = os_mutex_pend(&g_os_sanity_check_mu, OS_WAIT_FOREVER);
    cbf2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    cbf6:	4803      	ldr	r0, [pc, #12]	; (cc04 <os_sanity_check_list_lock+0x1c>)
    cbf8:	f000 fc42 	bl	d480 <os_mutex_pend>
err:
    cbfc:	e7f8      	b.n	cbf0 <os_sanity_check_list_lock+0x8>
    cbfe:	bf00      	nop
    cc00:	200021c8 	.word	0x200021c8
    cc04:	2000222c 	.word	0x2000222c

0000cc08 <os_sanity_check_list_unlock>:
 *
 * @return 0 on success, error code on failure
 */
static int
os_sanity_check_list_unlock(void)
{
    cc08:	b508      	push	{r3, lr}
    int rc;

    if (!g_os_started) {
    cc0a:	4b04      	ldr	r3, [pc, #16]	; (cc1c <os_sanity_check_list_unlock+0x14>)
    cc0c:	6818      	ldr	r0, [r3, #0]
    cc0e:	b900      	cbnz	r0, cc12 <os_sanity_check_list_unlock+0xa>
    }

    return (0);
err:
    return (rc);
}
    cc10:	bd08      	pop	{r3, pc}
    rc = os_mutex_release(&g_os_sanity_check_mu);
    cc12:	4803      	ldr	r0, [pc, #12]	; (cc20 <os_sanity_check_list_unlock+0x18>)
    cc14:	f000 fbd4 	bl	d3c0 <os_mutex_release>
err:
    cc18:	e7fa      	b.n	cc10 <os_sanity_check_list_unlock+0x8>
    cc1a:	bf00      	nop
    cc1c:	200021c8 	.word	0x200021c8
    cc20:	2000222c 	.word	0x2000222c

0000cc24 <os_sanity_check_init>:
    memset(sc, 0, sizeof(*sc));
    cc24:	2300      	movs	r3, #0
    cc26:	6003      	str	r3, [r0, #0]
    cc28:	6043      	str	r3, [r0, #4]
    cc2a:	6083      	str	r3, [r0, #8]
    cc2c:	60c3      	str	r3, [r0, #12]
    cc2e:	6103      	str	r3, [r0, #16]
}
    cc30:	4618      	mov	r0, r3
    cc32:	4770      	bx	lr

0000cc34 <os_sanity_check_register>:
}


int
os_sanity_check_register(struct os_sanity_check *sc)
{
    cc34:	b510      	push	{r4, lr}
    cc36:	4604      	mov	r4, r0
    int rc;

    rc = os_sanity_check_list_lock();
    cc38:	f7ff ffd6 	bl	cbe8 <os_sanity_check_list_lock>
    if (rc != OS_OK) {
    cc3c:	4603      	mov	r3, r0
    cc3e:	b108      	cbz	r0, cc44 <os_sanity_check_register+0x10>
    }

    return (0);
err:
    return (rc);
}
    cc40:	4618      	mov	r0, r3
    cc42:	bd10      	pop	{r4, pc}
    SLIST_INSERT_HEAD(&g_os_sanity_check_list, sc, sc_next);
    cc44:	4b03      	ldr	r3, [pc, #12]	; (cc54 <os_sanity_check_register+0x20>)
    cc46:	681a      	ldr	r2, [r3, #0]
    cc48:	6122      	str	r2, [r4, #16]
    cc4a:	601c      	str	r4, [r3, #0]
    rc = os_sanity_check_list_unlock();
    cc4c:	f7ff ffdc 	bl	cc08 <os_sanity_check_list_unlock>
    cc50:	4603      	mov	r3, r0
err:
    cc52:	e7f5      	b.n	cc40 <os_sanity_check_register+0xc>
    cc54:	20002028 	.word	0x20002028

0000cc58 <os_sanity_run>:
 * Goes through the sanity check list, and performs sanity checks.  If any of
 * these checks failed, or tasks have not checked in, it resets the processor.
 */
void
os_sanity_run(void)
{
    cc58:	b510      	push	{r4, lr}
    struct os_sanity_check *sc;
    int rc;

    rc = os_sanity_check_list_lock();
    cc5a:	f7ff ffc5 	bl	cbe8 <os_sanity_check_list_lock>
    if (rc != 0) {
    cc5e:	b910      	cbnz	r0, cc66 <os_sanity_run+0xe>
        assert(0);
    }

    SLIST_FOREACH(sc, &g_os_sanity_check_list, sc_next) {
    cc60:	4b1d      	ldr	r3, [pc, #116]	; (ccd8 <os_sanity_run+0x80>)
    cc62:	681c      	ldr	r4, [r3, #0]
    cc64:	e012      	b.n	cc8c <os_sanity_run+0x34>
        assert(0);
    cc66:	f7ff faa1 	bl	c1ac <hal_debugger_connected>
    cc6a:	b100      	cbz	r0, cc6e <os_sanity_run+0x16>
    cc6c:	be01      	bkpt	0x0001
    cc6e:	2300      	movs	r3, #0
    cc70:	461a      	mov	r2, r3
    cc72:	4619      	mov	r1, r3
    cc74:	4618      	mov	r0, r3
    cc76:	f000 fb79 	bl	d36c <__assert_func>
                sc->sc_checkin_last = os_time_get();
                continue;
            }
        }

        if (OS_TIME_TICK_GT(os_time_get(),
    cc7a:	f000 fa5d 	bl	d138 <os_time_get>
    cc7e:	6823      	ldr	r3, [r4, #0]
    cc80:	6862      	ldr	r2, [r4, #4]
    cc82:	4413      	add	r3, r2
    cc84:	1ac3      	subs	r3, r0, r3
    cc86:	2b00      	cmp	r3, #0
    cc88:	dc0d      	bgt.n	cca6 <os_sanity_run+0x4e>
    SLIST_FOREACH(sc, &g_os_sanity_check_list, sc_next) {
    cc8a:	6924      	ldr	r4, [r4, #16]
    cc8c:	b1ac      	cbz	r4, ccba <os_sanity_run+0x62>
        if (sc->sc_func) {
    cc8e:	68a3      	ldr	r3, [r4, #8]
    cc90:	2b00      	cmp	r3, #0
    cc92:	d0f2      	beq.n	cc7a <os_sanity_run+0x22>
            rc = sc->sc_func(sc, sc->sc_arg);
    cc94:	68e1      	ldr	r1, [r4, #12]
    cc96:	4620      	mov	r0, r4
    cc98:	4798      	blx	r3
            if (rc == OS_OK) {
    cc9a:	2800      	cmp	r0, #0
    cc9c:	d1ed      	bne.n	cc7a <os_sanity_run+0x22>
                sc->sc_checkin_last = os_time_get();
    cc9e:	f000 fa4b 	bl	d138 <os_time_get>
    cca2:	6020      	str	r0, [r4, #0]
                continue;
    cca4:	e7f1      	b.n	cc8a <os_sanity_run+0x32>
                    sc->sc_checkin_last + sc->sc_checkin_itvl)) {
            assert(0);
    cca6:	f7ff fa81 	bl	c1ac <hal_debugger_connected>
    ccaa:	b100      	cbz	r0, ccae <os_sanity_run+0x56>
    ccac:	be01      	bkpt	0x0001
    ccae:	2300      	movs	r3, #0
    ccb0:	461a      	mov	r2, r3
    ccb2:	4619      	mov	r1, r3
    ccb4:	4618      	mov	r0, r3
    ccb6:	f000 fb59 	bl	d36c <__assert_func>
        }
    }

    rc = os_sanity_check_list_unlock();
    ccba:	f7ff ffa5 	bl	cc08 <os_sanity_check_list_unlock>
    if (rc != 0) {
    ccbe:	b900      	cbnz	r0, ccc2 <os_sanity_run+0x6a>
        assert(0);
    }
}
    ccc0:	bd10      	pop	{r4, pc}
        assert(0);
    ccc2:	f7ff fa73 	bl	c1ac <hal_debugger_connected>
    ccc6:	b100      	cbz	r0, ccca <os_sanity_run+0x72>
    ccc8:	be01      	bkpt	0x0001
    ccca:	2300      	movs	r3, #0
    cccc:	461a      	mov	r2, r3
    ccce:	4619      	mov	r1, r3
    ccd0:	4618      	mov	r0, r3
    ccd2:	f000 fb4b 	bl	d36c <__assert_func>
    ccd6:	bf00      	nop
    ccd8:	20002028 	.word	0x20002028

0000ccdc <os_sanity_init>:

int
os_sanity_init(void)
{
    ccdc:	b508      	push	{r3, lr}
    int rc;

    rc = os_mutex_init(&g_os_sanity_check_mu);
    ccde:	4802      	ldr	r0, [pc, #8]	; (cce8 <os_sanity_init+0xc>)
    cce0:	f000 fb63 	bl	d3aa <os_mutex_init>
    }

    return (0);
err:
    return (rc);
}
    cce4:	bd08      	pop	{r3, pc}
    cce6:	bf00      	nop
    cce8:	2000222c 	.word	0x2000222c

0000ccec <os_sched_insert>:
{
    struct os_task *entry;
    os_sr_t sr;
    os_error_t rc;

    if (t->t_state != OS_TASK_READY) {
    ccec:	7b03      	ldrb	r3, [r0, #12]
    ccee:	2b01      	cmp	r3, #1
    ccf0:	d001      	beq.n	ccf6 <os_sched_insert+0xa>
    }
    OS_EXIT_CRITICAL(sr);

    return (0);
err:
    return (rc);
    ccf2:	2002      	movs	r0, #2
}
    ccf4:	4770      	bx	lr
{
    ccf6:	b510      	push	{r4, lr}
    ccf8:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
    ccfa:	f000 fa6b 	bl	d1d4 <os_arch_save_sr>
    TAILQ_FOREACH(entry, &g_os_run_list, t_os_list) {
    ccfe:	4b0f      	ldr	r3, [pc, #60]	; (cd3c <os_sched_insert+0x50>)
    cd00:	681b      	ldr	r3, [r3, #0]
    cd02:	b12b      	cbz	r3, cd10 <os_sched_insert+0x24>
        if (t->t_prio < entry->t_prio) {
    cd04:	7ae1      	ldrb	r1, [r4, #11]
    cd06:	7ada      	ldrb	r2, [r3, #11]
    cd08:	4291      	cmp	r1, r2
    cd0a:	d301      	bcc.n	cd10 <os_sched_insert+0x24>
    TAILQ_FOREACH(entry, &g_os_run_list, t_os_list) {
    cd0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    cd0e:	e7f8      	b.n	cd02 <os_sched_insert+0x16>
    if (entry) {
    cd10:	b153      	cbz	r3, cd28 <os_sched_insert+0x3c>
        TAILQ_INSERT_BEFORE(entry, (struct os_task *) t, t_os_list);
    cd12:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    cd14:	64a2      	str	r2, [r4, #72]	; 0x48
    cd16:	6463      	str	r3, [r4, #68]	; 0x44
    cd18:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    cd1a:	6014      	str	r4, [r2, #0]
    cd1c:	3444      	adds	r4, #68	; 0x44
    cd1e:	649c      	str	r4, [r3, #72]	; 0x48
    OS_EXIT_CRITICAL(sr);
    cd20:	f000 fa5e 	bl	d1e0 <os_arch_restore_sr>
    return (0);
    cd24:	2000      	movs	r0, #0
}
    cd26:	bd10      	pop	{r4, pc}
        TAILQ_INSERT_TAIL(&g_os_run_list, (struct os_task *) t, t_os_list);
    cd28:	2300      	movs	r3, #0
    cd2a:	6463      	str	r3, [r4, #68]	; 0x44
    cd2c:	4b03      	ldr	r3, [pc, #12]	; (cd3c <os_sched_insert+0x50>)
    cd2e:	685a      	ldr	r2, [r3, #4]
    cd30:	64a2      	str	r2, [r4, #72]	; 0x48
    cd32:	6014      	str	r4, [r2, #0]
    cd34:	3444      	adds	r4, #68	; 0x44
    cd36:	605c      	str	r4, [r3, #4]
    cd38:	e7f2      	b.n	cd20 <os_sched_insert+0x34>
    cd3a:	bf00      	nop
    cd3c:	20000118 	.word	0x20000118

0000cd40 <os_sched_ctx_sw_hook>:

void
os_sched_ctx_sw_hook(struct os_task *next_t)
{
    cd40:	b410      	push	{r4}
    stack = g_current_task->t_stackbottom;
    for (i = 0; i < MYNEWT_VAL(OS_CTX_SW_STACK_GUARD); i++) {
        assert(stack[i] == OS_STACK_PATTERN);
    }
#endif
    next_t->t_ctx_sw_cnt++;
    cd42:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    cd44:	3301      	adds	r3, #1
    cd46:	63c3      	str	r3, [r0, #60]	; 0x3c
#if MYNEWT_VAL(OS_TASK_RUN_TIME_CPUTIME)
    ticks = os_cputime_get32();
#else
    ticks = g_os_time;
    cd48:	4b06      	ldr	r3, [pc, #24]	; (cd64 <os_sched_ctx_sw_hook+0x24>)
    cd4a:	6818      	ldr	r0, [r3, #0]
#endif
    g_current_task->t_run_time += ticks - g_os_last_ctx_sw_time;
    cd4c:	4b06      	ldr	r3, [pc, #24]	; (cd68 <os_sched_ctx_sw_hook+0x28>)
    cd4e:	681c      	ldr	r4, [r3, #0]
    cd50:	4906      	ldr	r1, [pc, #24]	; (cd6c <os_sched_ctx_sw_hook+0x2c>)
    cd52:	680b      	ldr	r3, [r1, #0]
    cd54:	1ac2      	subs	r2, r0, r3
    cd56:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    cd58:	4413      	add	r3, r2
    cd5a:	63a3      	str	r3, [r4, #56]	; 0x38
    g_os_last_ctx_sw_time = ticks;
    cd5c:	6008      	str	r0, [r1, #0]
}
    cd5e:	bc10      	pop	{r4}
    cd60:	4770      	bx	lr
    cd62:	bf00      	nop
    cd64:	2000224c 	.word	0x2000224c
    cd68:	20002238 	.word	0x20002238
    cd6c:	2000223c 	.word	0x2000223c

0000cd70 <os_sched_get_current_task>:

struct os_task *
os_sched_get_current_task(void)
{
    return (g_current_task);
}
    cd70:	4b01      	ldr	r3, [pc, #4]	; (cd78 <os_sched_get_current_task+0x8>)
    cd72:	6818      	ldr	r0, [r3, #0]
    cd74:	4770      	bx	lr
    cd76:	bf00      	nop
    cd78:	20002238 	.word	0x20002238

0000cd7c <os_sched_set_current_task>:
 * @param t Pointer to currently running task.
 */
void
os_sched_set_current_task(struct os_task *t)
{
    g_current_task = t;
    cd7c:	4b01      	ldr	r3, [pc, #4]	; (cd84 <os_sched_set_current_task+0x8>)
    cd7e:	6018      	str	r0, [r3, #0]
}
    cd80:	4770      	bx	lr
    cd82:	bf00      	nop
    cd84:	20002238 	.word	0x20002238

0000cd88 <os_sched_sleep>:
 * NOTE: must be called with interrupts disabled! This function does not call
 * the scheduler
 */
int
os_sched_sleep(struct os_task *t, os_time_t nticks)
{
    cd88:	b538      	push	{r3, r4, r5, lr}
    cd8a:	4604      	mov	r4, r0
    cd8c:	460d      	mov	r5, r1
    struct os_task *entry;

    entry = NULL;

    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
    cd8e:	6c43      	ldr	r3, [r0, #68]	; 0x44
    cd90:	b1d3      	cbz	r3, cdc8 <os_sched_sleep+0x40>
    cd92:	6c82      	ldr	r2, [r0, #72]	; 0x48
    cd94:	649a      	str	r2, [r3, #72]	; 0x48
    cd96:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    cd98:	6c62      	ldr	r2, [r4, #68]	; 0x44
    cd9a:	601a      	str	r2, [r3, #0]
    t->t_state = OS_TASK_SLEEP;
    cd9c:	2302      	movs	r3, #2
    cd9e:	7323      	strb	r3, [r4, #12]
    t->t_next_wakeup = os_time_get() + nticks;
    cda0:	f000 f9ca 	bl	d138 <os_time_get>
    cda4:	4428      	add	r0, r5
    cda6:	6360      	str	r0, [r4, #52]	; 0x34
    if (nticks == OS_TIMEOUT_NEVER) {
    cda8:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    cdac:	d010      	beq.n	cdd0 <os_sched_sleep+0x48>
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
    } else {
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
    cdae:	4b18      	ldr	r3, [pc, #96]	; (ce10 <os_sched_sleep+0x88>)
    cdb0:	681b      	ldr	r3, [r3, #0]
    cdb2:	b1d3      	cbz	r3, cdea <os_sched_sleep+0x62>
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
    cdb4:	7b5a      	ldrb	r2, [r3, #13]
    cdb6:	f012 0f01 	tst.w	r2, #1
    cdba:	d116      	bne.n	cdea <os_sched_sleep+0x62>
                    OS_TIME_TICK_GT(entry->t_next_wakeup, t->t_next_wakeup)) {
    cdbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    cdbe:	1a12      	subs	r2, r2, r0
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
    cdc0:	2a00      	cmp	r2, #0
    cdc2:	dc12      	bgt.n	cdea <os_sched_sleep+0x62>
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
    cdc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    cdc6:	e7f4      	b.n	cdb2 <os_sched_sleep+0x2a>
    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
    cdc8:	6c82      	ldr	r2, [r0, #72]	; 0x48
    cdca:	4b12      	ldr	r3, [pc, #72]	; (ce14 <os_sched_sleep+0x8c>)
    cdcc:	605a      	str	r2, [r3, #4]
    cdce:	e7e2      	b.n	cd96 <os_sched_sleep+0xe>
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
    cdd0:	7b63      	ldrb	r3, [r4, #13]
    cdd2:	f043 0301 	orr.w	r3, r3, #1
    cdd6:	7363      	strb	r3, [r4, #13]
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
    cdd8:	2300      	movs	r3, #0
    cdda:	6463      	str	r3, [r4, #68]	; 0x44
    cddc:	4b0c      	ldr	r3, [pc, #48]	; (ce10 <os_sched_sleep+0x88>)
    cdde:	685a      	ldr	r2, [r3, #4]
    cde0:	64a2      	str	r2, [r4, #72]	; 0x48
    cde2:	6014      	str	r4, [r2, #0]
    cde4:	3444      	adds	r4, #68	; 0x44
    cde6:	605c      	str	r4, [r3, #4]
    cde8:	e007      	b.n	cdfa <os_sched_sleep+0x72>
                break;
            }
        }
        if (entry) {
    cdea:	b143      	cbz	r3, cdfe <os_sched_sleep+0x76>
            TAILQ_INSERT_BEFORE(entry, t, t_os_list);
    cdec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    cdee:	64a2      	str	r2, [r4, #72]	; 0x48
    cdf0:	6463      	str	r3, [r4, #68]	; 0x44
    cdf2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    cdf4:	6014      	str	r4, [r2, #0]
    cdf6:	3444      	adds	r4, #68	; 0x44
    cdf8:	649c      	str	r4, [r3, #72]	; 0x48
        }
    }

    os_trace_task_stop_ready(t, OS_TASK_SLEEP);
    return (0);
}
    cdfa:	2000      	movs	r0, #0
    cdfc:	bd38      	pop	{r3, r4, r5, pc}
            TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
    cdfe:	2300      	movs	r3, #0
    ce00:	6463      	str	r3, [r4, #68]	; 0x44
    ce02:	4b03      	ldr	r3, [pc, #12]	; (ce10 <os_sched_sleep+0x88>)
    ce04:	685a      	ldr	r2, [r3, #4]
    ce06:	64a2      	str	r2, [r4, #72]	; 0x48
    ce08:	6014      	str	r4, [r2, #0]
    ce0a:	3444      	adds	r4, #68	; 0x44
    ce0c:	605c      	str	r4, [r3, #4]
    ce0e:	e7f4      	b.n	cdfa <os_sched_sleep+0x72>
    ce10:	20000120 	.word	0x20000120
    ce14:	20000118 	.word	0x20000118

0000ce18 <os_sched_wakeup>:
 *
 * NOTE: This function must be called with interrupts disabled.
 */
int
os_sched_wakeup(struct os_task *t)
{
    ce18:	b508      	push	{r3, lr}
    struct os_task_obj *os_obj;

    assert(t->t_state == OS_TASK_SLEEP);
    ce1a:	7b03      	ldrb	r3, [r0, #12]
    ce1c:	2b02      	cmp	r3, #2
    ce1e:	d108      	bne.n	ce32 <os_sched_wakeup+0x1a>

    /* Remove self from object list if waiting on one */
    if (t->t_obj) {
    ce20:	69c3      	ldr	r3, [r0, #28]
    ce22:	b31b      	cbz	r3, ce6c <os_sched_wakeup+0x54>
        os_obj = (struct os_task_obj *)t->t_obj;
        assert(!SLIST_EMPTY(&os_obj->obj_head));
    ce24:	681a      	ldr	r2, [r3, #0]
    ce26:	b172      	cbz	r2, ce46 <os_sched_wakeup+0x2e>
        SLIST_REMOVE(&os_obj->obj_head, t, os_task, t_obj_list);
    ce28:	4282      	cmp	r2, r0
    ce2a:	d117      	bne.n	ce5c <os_sched_wakeup+0x44>
    ce2c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
    ce2e:	601a      	str	r2, [r3, #0]
    ce30:	e019      	b.n	ce66 <os_sched_wakeup+0x4e>
    assert(t->t_state == OS_TASK_SLEEP);
    ce32:	f7ff f9bb 	bl	c1ac <hal_debugger_connected>
    ce36:	b100      	cbz	r0, ce3a <os_sched_wakeup+0x22>
    ce38:	be01      	bkpt	0x0001
    ce3a:	2300      	movs	r3, #0
    ce3c:	461a      	mov	r2, r3
    ce3e:	4619      	mov	r1, r3
    ce40:	4618      	mov	r0, r3
    ce42:	f000 fa93 	bl	d36c <__assert_func>
        assert(!SLIST_EMPTY(&os_obj->obj_head));
    ce46:	f7ff f9b1 	bl	c1ac <hal_debugger_connected>
    ce4a:	b100      	cbz	r0, ce4e <os_sched_wakeup+0x36>
    ce4c:	be01      	bkpt	0x0001
    ce4e:	2300      	movs	r3, #0
    ce50:	461a      	mov	r2, r3
    ce52:	4619      	mov	r1, r3
    ce54:	4618      	mov	r0, r3
    ce56:	f000 fa89 	bl	d36c <__assert_func>
        SLIST_REMOVE(&os_obj->obj_head, t, os_task, t_obj_list);
    ce5a:	461a      	mov	r2, r3
    ce5c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
    ce5e:	4283      	cmp	r3, r0
    ce60:	d1fb      	bne.n	ce5a <os_sched_wakeup+0x42>
    ce62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    ce64:	64d3      	str	r3, [r2, #76]	; 0x4c
        SLIST_NEXT(t, t_obj_list) = NULL;
    ce66:	2300      	movs	r3, #0
    ce68:	64c3      	str	r3, [r0, #76]	; 0x4c
        t->t_obj = NULL;
    ce6a:	61c3      	str	r3, [r0, #28]
    }

    /* Remove task from sleep list */
    t->t_state = OS_TASK_READY;
    ce6c:	2301      	movs	r3, #1
    ce6e:	7303      	strb	r3, [r0, #12]
    t->t_next_wakeup = 0;
    ce70:	2300      	movs	r3, #0
    ce72:	6343      	str	r3, [r0, #52]	; 0x34
    t->t_flags &= ~OS_TASK_FLAG_NO_TIMEOUT;
    ce74:	7b43      	ldrb	r3, [r0, #13]
    ce76:	f023 0301 	bic.w	r3, r3, #1
    ce7a:	7343      	strb	r3, [r0, #13]
    TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
    ce7c:	6c43      	ldr	r3, [r0, #68]	; 0x44
    ce7e:	b143      	cbz	r3, ce92 <os_sched_wakeup+0x7a>
    ce80:	6c82      	ldr	r2, [r0, #72]	; 0x48
    ce82:	649a      	str	r2, [r3, #72]	; 0x48
    ce84:	6c83      	ldr	r3, [r0, #72]	; 0x48
    ce86:	6c42      	ldr	r2, [r0, #68]	; 0x44
    ce88:	601a      	str	r2, [r3, #0]
    os_sched_insert(t);
    ce8a:	f7ff ff2f 	bl	ccec <os_sched_insert>

    os_trace_task_start_ready(t);

    return (0);
}
    ce8e:	2000      	movs	r0, #0
    ce90:	bd08      	pop	{r3, pc}
    TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
    ce92:	6c82      	ldr	r2, [r0, #72]	; 0x48
    ce94:	4b01      	ldr	r3, [pc, #4]	; (ce9c <os_sched_wakeup+0x84>)
    ce96:	605a      	str	r2, [r3, #4]
    ce98:	e7f4      	b.n	ce84 <os_sched_wakeup+0x6c>
    ce9a:	bf00      	nop
    ce9c:	20000120 	.word	0x20000120

0000cea0 <os_sched_os_timer_exp>:
 * removed from the sleep list and added to the run list.
 *
 */
void
os_sched_os_timer_exp(void)
{
    cea0:	b570      	push	{r4, r5, r6, lr}
    struct os_task *t;
    struct os_task *next;
    os_time_t now;
    os_sr_t sr;

    now = os_time_get();
    cea2:	f000 f949 	bl	d138 <os_time_get>
    cea6:	4605      	mov	r5, r0

    OS_ENTER_CRITICAL(sr);
    cea8:	f000 f994 	bl	d1d4 <os_arch_save_sr>
    ceac:	4606      	mov	r6, r0

    /*
     * Wakeup any tasks that have their sleep timer expired
     */
    t = TAILQ_FIRST(&g_os_sleep_list);
    ceae:	4b0a      	ldr	r3, [pc, #40]	; (ced8 <os_sched_os_timer_exp+0x38>)
    ceb0:	6818      	ldr	r0, [r3, #0]
    while (t) {
    ceb2:	b160      	cbz	r0, cece <os_sched_os_timer_exp+0x2e>
        /* If task waiting forever, do not check next wakeup time */
        if (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT) {
    ceb4:	7b43      	ldrb	r3, [r0, #13]
    ceb6:	f013 0f01 	tst.w	r3, #1
    ceba:	d108      	bne.n	cece <os_sched_os_timer_exp+0x2e>
            break;
        }
        next = TAILQ_NEXT(t, t_os_list);
    cebc:	6c44      	ldr	r4, [r0, #68]	; 0x44
        if (OS_TIME_TICK_GEQ(now, t->t_next_wakeup)) {
    cebe:	6b43      	ldr	r3, [r0, #52]	; 0x34
    cec0:	1aeb      	subs	r3, r5, r3
    cec2:	2b00      	cmp	r3, #0
    cec4:	db03      	blt.n	cece <os_sched_os_timer_exp+0x2e>
            os_sched_wakeup(t);
    cec6:	f7ff ffa7 	bl	ce18 <os_sched_wakeup>
        } else {
            break;
        }
        t = next;
    ceca:	4620      	mov	r0, r4
    cecc:	e7f1      	b.n	ceb2 <os_sched_os_timer_exp+0x12>
    }

    OS_EXIT_CRITICAL(sr);
    cece:	4630      	mov	r0, r6
    ced0:	f000 f986 	bl	d1e0 <os_arch_restore_sr>
}
    ced4:	bd70      	pop	{r4, r5, r6, pc}
    ced6:	bf00      	nop
    ced8:	20000120 	.word	0x20000120

0000cedc <os_sched_wakeup_ticks>:
 * Return the number of ticks until the first sleep timer expires.If there are
 * no such tasks then return OS_TIMEOUT_NEVER instead.
 */
os_time_t
os_sched_wakeup_ticks(os_time_t now)
{
    cedc:	b510      	push	{r4, lr}
    cede:	4604      	mov	r4, r0
    os_time_t rt;
    struct os_task *t;

    OS_ASSERT_CRITICAL();
    cee0:	f000 f981 	bl	d1e6 <os_arch_in_critical>
    cee4:	b150      	cbz	r0, cefc <os_sched_wakeup_ticks+0x20>

    t = TAILQ_FIRST(&g_os_sleep_list);
    cee6:	4b0e      	ldr	r3, [pc, #56]	; (cf20 <os_sched_wakeup_ticks+0x44>)
    cee8:	681b      	ldr	r3, [r3, #0]
    if (t == NULL || (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT)) {
    ceea:	b19b      	cbz	r3, cf14 <os_sched_wakeup_ticks+0x38>
    ceec:	7b5a      	ldrb	r2, [r3, #13]
    ceee:	f012 0f01 	tst.w	r2, #1
    cef2:	d112      	bne.n	cf1a <os_sched_wakeup_ticks+0x3e>
        rt = OS_TIMEOUT_NEVER;
    } else if (OS_TIME_TICK_GEQ(t->t_next_wakeup, now)) {
    cef4:	6b58      	ldr	r0, [r3, #52]	; 0x34
    cef6:	1b00      	subs	r0, r0, r4
    cef8:	d40a      	bmi.n	cf10 <os_sched_wakeup_ticks+0x34>
        rt = t->t_next_wakeup - now;
    } else {
        rt = 0;     /* wakeup time was in the past */
    }
    return (rt);
}
    cefa:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
    cefc:	f7ff f956 	bl	c1ac <hal_debugger_connected>
    cf00:	b100      	cbz	r0, cf04 <os_sched_wakeup_ticks+0x28>
    cf02:	be01      	bkpt	0x0001
    cf04:	2300      	movs	r3, #0
    cf06:	461a      	mov	r2, r3
    cf08:	4619      	mov	r1, r3
    cf0a:	4618      	mov	r0, r3
    cf0c:	f000 fa2e 	bl	d36c <__assert_func>
        rt = 0;     /* wakeup time was in the past */
    cf10:	2000      	movs	r0, #0
    cf12:	e7f2      	b.n	cefa <os_sched_wakeup_ticks+0x1e>
        rt = OS_TIMEOUT_NEVER;
    cf14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    cf18:	e7ef      	b.n	cefa <os_sched_wakeup_ticks+0x1e>
    cf1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return (rt);
    cf1e:	e7ec      	b.n	cefa <os_sched_wakeup_ticks+0x1e>
    cf20:	20000120 	.word	0x20000120

0000cf24 <os_sched_next_task>:
 */
struct os_task *
os_sched_next_task(void)
{
    return (TAILQ_FIRST(&g_os_run_list));
}
    cf24:	4b01      	ldr	r3, [pc, #4]	; (cf2c <os_sched_next_task+0x8>)
    cf26:	6818      	ldr	r0, [r3, #0]
    cf28:	4770      	bx	lr
    cf2a:	bf00      	nop
    cf2c:	20000118 	.word	0x20000118

0000cf30 <os_sched>:
{
    cf30:	b538      	push	{r3, r4, r5, lr}
    cf32:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
    cf34:	f000 f94e 	bl	d1d4 <os_arch_save_sr>
    cf38:	4605      	mov	r5, r0
    if (!next_t) {
    cf3a:	b134      	cbz	r4, cf4a <os_sched+0x1a>
    os_arch_ctx_sw(next_t);
    cf3c:	4620      	mov	r0, r4
    cf3e:	f000 f93f 	bl	d1c0 <os_arch_ctx_sw>
    OS_EXIT_CRITICAL(sr);
    cf42:	4628      	mov	r0, r5
    cf44:	f000 f94c 	bl	d1e0 <os_arch_restore_sr>
}
    cf48:	bd38      	pop	{r3, r4, r5, pc}
        next_t = os_sched_next_task();
    cf4a:	f7ff ffeb 	bl	cf24 <os_sched_next_task>
    cf4e:	4604      	mov	r4, r0
    cf50:	e7f4      	b.n	cf3c <os_sched+0xc>
	...

0000cf54 <os_sched_resort>:
 * NOTE: this function expects interrupts to be disabled so they
 * are not disabled here.
 */
void
os_sched_resort(struct os_task *t)
{
    cf54:	b508      	push	{r3, lr}
    if (t->t_state == OS_TASK_READY) {
    cf56:	7b03      	ldrb	r3, [r0, #12]
    cf58:	2b01      	cmp	r3, #1
    cf5a:	d000      	beq.n	cf5e <os_sched_resort+0xa>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
        os_sched_insert(t);
    }
}
    cf5c:	bd08      	pop	{r3, pc}
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
    cf5e:	6c43      	ldr	r3, [r0, #68]	; 0x44
    cf60:	b13b      	cbz	r3, cf72 <os_sched_resort+0x1e>
    cf62:	6c82      	ldr	r2, [r0, #72]	; 0x48
    cf64:	649a      	str	r2, [r3, #72]	; 0x48
    cf66:	6c83      	ldr	r3, [r0, #72]	; 0x48
    cf68:	6c42      	ldr	r2, [r0, #68]	; 0x44
    cf6a:	601a      	str	r2, [r3, #0]
        os_sched_insert(t);
    cf6c:	f7ff febe 	bl	ccec <os_sched_insert>
}
    cf70:	e7f4      	b.n	cf5c <os_sched_resort+0x8>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
    cf72:	6c82      	ldr	r2, [r0, #72]	; 0x48
    cf74:	4b01      	ldr	r3, [pc, #4]	; (cf7c <os_sched_resort+0x28>)
    cf76:	605a      	str	r2, [r3, #4]
    cf78:	e7f5      	b.n	cf66 <os_sched_resort+0x12>
    cf7a:	bf00      	nop
    cf7c:	20000118 	.word	0x20000118

0000cf80 <_clear_stack>:
static void
_clear_stack(os_stack_t *stack_bottom, int size)
{
    int i;

    for (i = 0; i < size; i++) {
    cf80:	2300      	movs	r3, #0
    cf82:	e003      	b.n	cf8c <_clear_stack+0xc>
        stack_bottom[i] = OS_STACK_PATTERN;
    cf84:	4a03      	ldr	r2, [pc, #12]	; (cf94 <_clear_stack+0x14>)
    cf86:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    for (i = 0; i < size; i++) {
    cf8a:	3301      	adds	r3, #1
    cf8c:	428b      	cmp	r3, r1
    cf8e:	dbf9      	blt.n	cf84 <_clear_stack+0x4>
    }
}
    cf90:	4770      	bx	lr
    cf92:	bf00      	nop
    cf94:	deadbeef 	.word	0xdeadbeef

0000cf98 <os_task_stacktop_get>:
}

os_stack_t *
os_task_stacktop_get(struct os_task *t)
{
    return &t->t_stackbottom[t->t_stacksize];
    cf98:	6843      	ldr	r3, [r0, #4]
    cf9a:	8900      	ldrh	r0, [r0, #8]
}
    cf9c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    cfa0:	4770      	bx	lr
	...

0000cfa4 <os_task_init>:
{
    cfa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cfa8:	4604      	mov	r4, r0
    cfaa:	460e      	mov	r6, r1
    cfac:	4690      	mov	r8, r2
    cfae:	461d      	mov	r5, r3
    cfb0:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
    memset(t, 0, sizeof(*t));
    cfb4:	2250      	movs	r2, #80	; 0x50
    cfb6:	2100      	movs	r1, #0
    cfb8:	f000 fb43 	bl	d642 <memset>
    t->t_func = func;
    cfbc:	f8c4 8014 	str.w	r8, [r4, #20]
    t->t_arg = arg;
    cfc0:	61a5      	str	r5, [r4, #24]
    OS_ENTER_CRITICAL(sr);
    cfc2:	f000 f907 	bl	d1d4 <os_arch_save_sr>
    rc = g_task_id;
    cfc6:	4b2e      	ldr	r3, [pc, #184]	; (d080 <os_task_init+0xdc>)
    cfc8:	781d      	ldrb	r5, [r3, #0]
    g_task_id++;
    cfca:	1c6a      	adds	r2, r5, #1
    cfcc:	701a      	strb	r2, [r3, #0]
    OS_EXIT_CRITICAL(sr);
    cfce:	f000 f907 	bl	d1e0 <os_arch_restore_sr>
    t->t_taskid = os_task_next_id();
    cfd2:	72a5      	strb	r5, [r4, #10]
    t->t_prio = prio;
    cfd4:	f89d 3018 	ldrb.w	r3, [sp, #24]
    cfd8:	72e3      	strb	r3, [r4, #11]
    t->t_state = OS_TASK_READY;
    cfda:	2301      	movs	r3, #1
    cfdc:	7323      	strb	r3, [r4, #12]
    t->t_name = name;
    cfde:	6126      	str	r6, [r4, #16]
    t->t_next_wakeup = 0;
    cfe0:	2300      	movs	r3, #0
    cfe2:	6363      	str	r3, [r4, #52]	; 0x34
    rc = os_sanity_check_init(&t->t_sanity_check);
    cfe4:	f104 0620 	add.w	r6, r4, #32
    cfe8:	4630      	mov	r0, r6
    cfea:	f7ff fe1b 	bl	cc24 <os_sanity_check_init>
    if (rc != OS_OK) {
    cfee:	4605      	mov	r5, r0
    cff0:	2800      	cmp	r0, #0
    cff2:	d138      	bne.n	d066 <os_task_init+0xc2>
    if (sanity_itvl != OS_WAIT_FOREVER) {
    cff4:	9b07      	ldr	r3, [sp, #28]
    cff6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    cffa:	d005      	beq.n	d008 <os_task_init+0x64>
        sc->sc_checkin_itvl = sanity_itvl;
    cffc:	6263      	str	r3, [r4, #36]	; 0x24
        rc = os_sanity_check_register(sc);
    cffe:	4630      	mov	r0, r6
    d000:	f7ff fe18 	bl	cc34 <os_sanity_check_register>
        if (rc != OS_OK) {
    d004:	4605      	mov	r5, r0
    d006:	bb70      	cbnz	r0, d066 <os_task_init+0xc2>
    _clear_stack(stack_bottom, stack_size);
    d008:	4639      	mov	r1, r7
    d00a:	9808      	ldr	r0, [sp, #32]
    d00c:	f7ff ffb8 	bl	cf80 <_clear_stack>
    t->t_stackbottom = stack_bottom;
    d010:	9b08      	ldr	r3, [sp, #32]
    d012:	6063      	str	r3, [r4, #4]
    t->t_stacksize = stack_size;
    d014:	8127      	strh	r7, [r4, #8]
    t->t_stackptr = os_arch_task_stack_init(t, os_task_stacktop_get(t),
    d016:	4620      	mov	r0, r4
    d018:	f7ff ffbe 	bl	cf98 <os_task_stacktop_get>
    d01c:	463a      	mov	r2, r7
    d01e:	4601      	mov	r1, r0
    d020:	4620      	mov	r0, r4
    d022:	f000 f8e5 	bl	d1f0 <os_arch_task_stack_init>
    d026:	6020      	str	r0, [r4, #0]
    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
    d028:	4b16      	ldr	r3, [pc, #88]	; (d084 <os_task_init+0xe0>)
    d02a:	681b      	ldr	r3, [r3, #0]
    d02c:	b17b      	cbz	r3, d04e <os_task_init+0xaa>
        assert(t->t_prio != task->t_prio);
    d02e:	7ae1      	ldrb	r1, [r4, #11]
    d030:	7ada      	ldrb	r2, [r3, #11]
    d032:	4291      	cmp	r1, r2
    d034:	d001      	beq.n	d03a <os_task_init+0x96>
    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
    d036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    d038:	e7f8      	b.n	d02c <os_task_init+0x88>
        assert(t->t_prio != task->t_prio);
    d03a:	f7ff f8b7 	bl	c1ac <hal_debugger_connected>
    d03e:	b100      	cbz	r0, d042 <os_task_init+0x9e>
    d040:	be01      	bkpt	0x0001
    d042:	2300      	movs	r3, #0
    d044:	461a      	mov	r2, r3
    d046:	4619      	mov	r1, r3
    d048:	4618      	mov	r0, r3
    d04a:	f000 f98f 	bl	d36c <__assert_func>
    STAILQ_INSERT_TAIL(&g_os_task_list, t, t_os_task_list);
    d04e:	6423      	str	r3, [r4, #64]	; 0x40
    d050:	4b0c      	ldr	r3, [pc, #48]	; (d084 <os_task_init+0xe0>)
    d052:	685a      	ldr	r2, [r3, #4]
    d054:	6014      	str	r4, [r2, #0]
    d056:	f104 0240 	add.w	r2, r4, #64	; 0x40
    d05a:	605a      	str	r2, [r3, #4]
    rc = os_sched_insert(t);
    d05c:	4620      	mov	r0, r4
    d05e:	f7ff fe45 	bl	ccec <os_sched_insert>
    d062:	4605      	mov	r5, r0
    if (rc != OS_OK) {
    d064:	b110      	cbz	r0, d06c <os_task_init+0xc8>
}
    d066:	4628      	mov	r0, r5
    d068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (os_started()) {
    d06c:	f7ff faec 	bl	c648 <os_started>
    d070:	b908      	cbnz	r0, d076 <os_task_init+0xd2>
    return (0);
    d072:	4605      	mov	r5, r0
    d074:	e7f7      	b.n	d066 <os_task_init+0xc2>
        os_sched(NULL);
    d076:	2000      	movs	r0, #0
    d078:	f7ff ff5a 	bl	cf30 <os_sched>
    d07c:	e7f3      	b.n	d066 <os_task_init+0xc2>
    d07e:	bf00      	nop
    d080:	20002248 	.word	0x20002248
    d084:	20002240 	.word	0x20002240

0000d088 <os_deltatime>:
} basetod;

static void
os_deltatime(os_time_t delta, const struct os_timeval *base,
    struct os_timeval *result)
{
    d088:	e92d 0830 	stmdb	sp!, {r4, r5, fp}
    struct os_timeval tvdelta;

    tvdelta.tv_sec = delta / OS_TICKS_PER_SEC;
    d08c:	09c3      	lsrs	r3, r0, #7
    tvdelta.tv_usec = (delta % OS_TICKS_PER_SEC) * OS_USEC_PER_TICK;
    d08e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    os_timeradd(base, &tvdelta, result);
    d092:	e9d1 4500 	ldrd	r4, r5, [r1]
    d096:	eb14 0b03 	adds.w	fp, r4, r3
    d09a:	f145 0c00 	adc.w	ip, r5, #0
    d09e:	e9c2 bc00 	strd	fp, ip, [r2]
    d0a2:	688b      	ldr	r3, [r1, #8]
    d0a4:	f641 6184 	movw	r1, #7812	; 0x1e84
    d0a8:	fb01 3000 	mla	r0, r1, r0, r3
    d0ac:	6090      	str	r0, [r2, #8]
    d0ae:	4b08      	ldr	r3, [pc, #32]	; (d0d0 <os_deltatime+0x48>)
    d0b0:	4298      	cmp	r0, r3
    d0b2:	dd0a      	ble.n	d0ca <os_deltatime+0x42>
    d0b4:	f11b 0401 	adds.w	r4, fp, #1
    d0b8:	f14c 0500 	adc.w	r5, ip, #0
    d0bc:	e9c2 4500 	strd	r4, r5, [r2]
    d0c0:	f5a0 2074 	sub.w	r0, r0, #999424	; 0xf4000
    d0c4:	f5a0 7010 	sub.w	r0, r0, #576	; 0x240
    d0c8:	6090      	str	r0, [r2, #8]
}
    d0ca:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
    d0ce:	4770      	bx	lr
    d0d0:	000f423f 	.word	0x000f423f

0000d0d4 <os_time_tick>:
}

#if MYNEWT_VAL(OS_SCHEDULING)
static void
os_time_tick(int ticks)
{
    d0d4:	b570      	push	{r4, r5, r6, lr}
    os_sr_t sr;
    os_time_t delta, prev_os_time;

    assert(ticks >= 0);
    d0d6:	1e04      	subs	r4, r0, #0
    d0d8:	db0d      	blt.n	d0f6 <os_time_tick+0x22>

    OS_ENTER_CRITICAL(sr);
    d0da:	f000 f87b 	bl	d1d4 <os_arch_save_sr>
    d0de:	4605      	mov	r5, r0
    prev_os_time = g_os_time;
    d0e0:	4a13      	ldr	r2, [pc, #76]	; (d130 <os_time_tick+0x5c>)
    d0e2:	6813      	ldr	r3, [r2, #0]
    g_os_time += ticks;
    d0e4:	18e0      	adds	r0, r4, r3
    d0e6:	6010      	str	r0, [r2, #0]

    /*
     * Update 'basetod' when 'g_os_time' crosses the 0x00000000 and
     * 0x80000000 thresholds.
     */
    if ((prev_os_time ^ g_os_time) >> 31) {
    d0e8:	ea90 0f03 	teq	r0, r3
    d0ec:	d40d      	bmi.n	d10a <os_time_tick+0x36>
        delta = g_os_time - basetod.ostime;
        os_deltatime(delta, &basetod.uptime, &basetod.uptime);
        os_deltatime(delta, &basetod.utctime, &basetod.utctime);
        basetod.ostime = g_os_time;
    }
    OS_EXIT_CRITICAL(sr);
    d0ee:	4628      	mov	r0, r5
    d0f0:	f000 f876 	bl	d1e0 <os_arch_restore_sr>
}
    d0f4:	bd70      	pop	{r4, r5, r6, pc}
    assert(ticks >= 0);
    d0f6:	f7ff f859 	bl	c1ac <hal_debugger_connected>
    d0fa:	b100      	cbz	r0, d0fe <os_time_tick+0x2a>
    d0fc:	be01      	bkpt	0x0001
    d0fe:	2300      	movs	r3, #0
    d100:	461a      	mov	r2, r3
    d102:	4619      	mov	r1, r3
    d104:	4618      	mov	r0, r3
    d106:	f000 f931 	bl	d36c <__assert_func>
        delta = g_os_time - basetod.ostime;
    d10a:	4e0a      	ldr	r6, [pc, #40]	; (d134 <os_time_tick+0x60>)
    d10c:	4631      	mov	r1, r6
    d10e:	f851 4b08 	ldr.w	r4, [r1], #8
    d112:	1b04      	subs	r4, r0, r4
        os_deltatime(delta, &basetod.uptime, &basetod.uptime);
    d114:	460a      	mov	r2, r1
    d116:	4620      	mov	r0, r4
    d118:	f7ff ffb6 	bl	d088 <os_deltatime>
        os_deltatime(delta, &basetod.utctime, &basetod.utctime);
    d11c:	f106 0118 	add.w	r1, r6, #24
    d120:	460a      	mov	r2, r1
    d122:	4620      	mov	r0, r4
    d124:	f7ff ffb0 	bl	d088 <os_deltatime>
        basetod.ostime = g_os_time;
    d128:	4b01      	ldr	r3, [pc, #4]	; (d130 <os_time_tick+0x5c>)
    d12a:	681b      	ldr	r3, [r3, #0]
    d12c:	6033      	str	r3, [r6, #0]
    d12e:	e7de      	b.n	d0ee <os_time_tick+0x1a>
    d130:	2000224c 	.word	0x2000224c
    d134:	20002030 	.word	0x20002030

0000d138 <os_time_get>:
}
    d138:	4b01      	ldr	r3, [pc, #4]	; (d140 <os_time_get+0x8>)
    d13a:	6818      	ldr	r0, [r3, #0]
    d13c:	4770      	bx	lr
    d13e:	bf00      	nop
    d140:	2000224c 	.word	0x2000224c

0000d144 <os_time_advance>:

void
os_time_advance(int ticks)
{
    d144:	b510      	push	{r4, lr}
    assert(ticks >= 0);
    d146:	1e04      	subs	r4, r0, #0
    d148:	db09      	blt.n	d15e <os_time_advance+0x1a>

    if (ticks > 0) {
    d14a:	2c00      	cmp	r4, #0
    d14c:	dd06      	ble.n	d15c <os_time_advance+0x18>
        if (!os_started()) {
    d14e:	f7ff fa7b 	bl	c648 <os_started>
    d152:	b970      	cbnz	r0, d172 <os_time_advance+0x2e>
            g_os_time += ticks;
    d154:	4a0c      	ldr	r2, [pc, #48]	; (d188 <os_time_advance+0x44>)
    d156:	6813      	ldr	r3, [r2, #0]
    d158:	441c      	add	r4, r3
    d15a:	6014      	str	r4, [r2, #0]
            os_callout_tick();
            os_sched_os_timer_exp();
            os_sched(NULL);
        }
    }
}
    d15c:	bd10      	pop	{r4, pc}
    assert(ticks >= 0);
    d15e:	f7ff f825 	bl	c1ac <hal_debugger_connected>
    d162:	b100      	cbz	r0, d166 <os_time_advance+0x22>
    d164:	be01      	bkpt	0x0001
    d166:	2300      	movs	r3, #0
    d168:	461a      	mov	r2, r3
    d16a:	4619      	mov	r1, r3
    d16c:	4618      	mov	r0, r3
    d16e:	f000 f8fd 	bl	d36c <__assert_func>
            os_time_tick(ticks);
    d172:	4620      	mov	r0, r4
    d174:	f7ff ffae 	bl	d0d4 <os_time_tick>
            os_callout_tick();
    d178:	f7ff fb4e 	bl	c818 <os_callout_tick>
            os_sched_os_timer_exp();
    d17c:	f7ff fe90 	bl	cea0 <os_sched_os_timer_exp>
            os_sched(NULL);
    d180:	2000      	movs	r0, #0
    d182:	f7ff fed5 	bl	cf30 <os_sched>
}
    d186:	e7e9      	b.n	d15c <os_time_advance+0x18>
    d188:	2000224c 	.word	0x2000224c

0000d18c <os_time_delay>:
void
os_time_delay(os_time_t osticks)
{
    os_sr_t sr;

    if (osticks > 0) {
    d18c:	b900      	cbnz	r0, d190 <os_time_delay+0x4>
    d18e:	4770      	bx	lr
{
    d190:	b538      	push	{r3, r4, r5, lr}
    d192:	4604      	mov	r4, r0
        OS_ENTER_CRITICAL(sr);
    d194:	f000 f81e 	bl	d1d4 <os_arch_save_sr>
    d198:	4605      	mov	r5, r0
        os_sched_sleep(os_sched_get_current_task(), (os_time_t)osticks);
    d19a:	f7ff fde9 	bl	cd70 <os_sched_get_current_task>
    d19e:	4621      	mov	r1, r4
    d1a0:	f7ff fdf2 	bl	cd88 <os_sched_sleep>
        OS_EXIT_CRITICAL(sr);
    d1a4:	4628      	mov	r0, r5
    d1a6:	f000 f81b 	bl	d1e0 <os_arch_restore_sr>
        os_sched(NULL);
    d1aa:	2000      	movs	r0, #0
    d1ac:	f7ff fec0 	bl	cf30 <os_sched>
    }
}
    d1b0:	bd38      	pop	{r3, r4, r5, pc}

0000d1b2 <os_arch_task_return_handler>:
    return ret;
}

static void
os_arch_task_return_handler(void)
{
    d1b2:	e7fe      	b.n	d1b2 <os_arch_task_return_handler>

0000d1b4 <timer_handler>:
{
    d1b4:	b508      	push	{r3, lr}
    os_time_advance(1);
    d1b6:	2001      	movs	r0, #1
    d1b8:	f7ff ffc4 	bl	d144 <os_time_advance>
}
    d1bc:	bd08      	pop	{r3, pc}
	...

0000d1c0 <os_arch_ctx_sw>:
{
    d1c0:	b508      	push	{r3, lr}
    os_sched_ctx_sw_hook(t);
    d1c2:	f7ff fdbd 	bl	cd40 <os_sched_ctx_sw_hook>
    SCB->ICSR = SCB_ICSR_PENDSVSET_Msk;
    d1c6:	4b02      	ldr	r3, [pc, #8]	; (d1d0 <os_arch_ctx_sw+0x10>)
    d1c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    d1cc:	605a      	str	r2, [r3, #4]
}
    d1ce:	bd08      	pop	{r3, pc}
    d1d0:	e000ed00 	.word	0xe000ed00

0000d1d4 <os_arch_save_sr>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    d1d4:	f3ef 8010 	mrs	r0, PRIMASK
    isr_ctx = __get_PRIMASK() & 1;
    d1d8:	f000 0001 	and.w	r0, r0, #1
  __ASM volatile ("cpsid i" : : : "memory");
    d1dc:	b672      	cpsid	i
}
    d1de:	4770      	bx	lr

0000d1e0 <os_arch_restore_sr>:
    if (!isr_ctx) {
    d1e0:	b900      	cbnz	r0, d1e4 <os_arch_restore_sr+0x4>
  __ASM volatile ("cpsie i" : : : "memory");
    d1e2:	b662      	cpsie	i
}
    d1e4:	4770      	bx	lr

0000d1e6 <os_arch_in_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    d1e6:	f3ef 8010 	mrs	r0, PRIMASK
}
    d1ea:	f000 0001 	and.w	r0, r0, #1
    d1ee:	4770      	bx	lr

0000d1f0 <os_arch_task_stack_init>:
    while (1);
}

os_stack_t *
os_arch_task_stack_init(struct os_task *t, os_stack_t *stack_top, int size)
{
    d1f0:	b570      	push	{r4, r5, r6, lr}
    d1f2:	4606      	mov	r6, r0
    d1f4:	460d      	mov	r5, r1
    int i;
    os_stack_t *s;
    struct stack_frame *sf;

    /* Get stack frame pointer */
    s = (os_stack_t *) ((uint8_t *) stack_top - sizeof(*sf));
    d1f6:	f1a1 0440 	sub.w	r4, r1, #64	; 0x40

    /* Zero out R1-R3, R12 */
    for (i = 9; i < 13; ++i) {
    d1fa:	2309      	movs	r3, #9
    d1fc:	e003      	b.n	d206 <os_arch_task_stack_init+0x16>
        s[i] = 0;
    d1fe:	2200      	movs	r2, #0
    d200:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    for (i = 9; i < 13; ++i) {
    d204:	3301      	adds	r3, #1
    d206:	2b0c      	cmp	r3, #12
    d208:	ddf9      	ble.n	d1fe <os_arch_task_stack_init+0xe>
    }

    /* Set registers R4 - R11 on stack. */
    os_arch_init_task_stack(s);
    d20a:	4620      	mov	r0, r4
    d20c:	f000 f9b2 	bl	d574 <os_arch_init_task_stack>

    /* Set remaining portions of stack frame */
    sf = (struct stack_frame *) s;
    sf->xpsr = INITIAL_xPSR;
    d210:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    d214:	f845 3c04 	str.w	r3, [r5, #-4]
    sf->pc = (uint32_t)t->t_func;
    d218:	6973      	ldr	r3, [r6, #20]
    d21a:	f845 3c08 	str.w	r3, [r5, #-8]
    sf->r0 = (uint32_t)t->t_arg;
    d21e:	69b3      	ldr	r3, [r6, #24]
    d220:	f845 3c20 	str.w	r3, [r5, #-32]
    /* Set function to cache returns from tasks. */
    sf->lr = (uint32_t)os_arch_task_return_handler;
    d224:	4b02      	ldr	r3, [pc, #8]	; (d230 <os_arch_task_stack_init+0x40>)
    d226:	f845 3c0c 	str.w	r3, [r5, #-12]
#if MYNEWT_VAL(HARDFLOAT)
    sf->exc_lr = INITIAL_LR;
#endif

    return (s);
}
    d22a:	4620      	mov	r0, r4
    d22c:	bd70      	pop	{r4, r5, r6, pc}
    d22e:	bf00      	nop
    d230:	0000d1b3 	.word	0x0000d1b3

0000d234 <os_arch_init>:

void
os_arch_init(void)
{
    d234:	b508      	push	{r3, lr}
    /*
     * Trap on divide-by-zero.
     */
    SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    d236:	4a04      	ldr	r2, [pc, #16]	; (d248 <os_arch_init+0x14>)
    d238:	6953      	ldr	r3, [r2, #20]
    d23a:	f043 0310 	orr.w	r3, r3, #16
    d23e:	6153      	str	r3, [r2, #20]
    os_init_idle_task();
    d240:	f7ff fa08 	bl	c654 <os_init_idle_task>
}
    d244:	bd08      	pop	{r3, pc}
    d246:	bf00      	nop
    d248:	e000ed00 	.word	0xe000ed00

0000d24c <os_arch_os_init>:
    SVC_Call(os_arch_init);
}

os_error_t
os_arch_os_init(void)
{
    d24c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    d24e:	f3ef 8405 	mrs	r4, IPSR
    os_error_t err;
    int i;

    /* Cannot be called within an ISR */
    err = OS_ERR_IN_ISR;
    if (__get_IPSR() == 0) {
    d252:	b90c      	cbnz	r4, d258 <os_arch_os_init+0xc>
        err = OS_OK;

        /* Drop priority for all interrupts */
        for (i = 0; i < sizeof(NVIC->IP); i++) {
    d254:	2400      	movs	r4, #0
    d256:	e009      	b.n	d26c <os_arch_os_init+0x20>
    err = OS_ERR_IN_ISR;
    d258:	2007      	movs	r0, #7
    d25a:	e02e      	b.n	d2ba <os_arch_os_init+0x6e>
            NVIC->IP[i] = -1;
    d25c:	f104 4560 	add.w	r5, r4, #3758096384	; 0xe0000000
    d260:	f505 4561 	add.w	r5, r5, #57600	; 0xe100
    d264:	26ff      	movs	r6, #255	; 0xff
    d266:	f885 6300 	strb.w	r6, [r5, #768]	; 0x300
        for (i = 0; i < sizeof(NVIC->IP); i++) {
    d26a:	3401      	adds	r4, #1
    d26c:	2cef      	cmp	r4, #239	; 0xef
    d26e:	d9f5      	bls.n	d25c <os_arch_os_init+0x10>
         * Install default interrupt handler for all interrupts except Reset,
         * which'll print out system state at the time of the interrupt, and
         * few other regs which should help in trying to figure out what went
         * wrong.
         */
        for (i = -NVIC_USER_IRQ_OFFSET + 2;
    d270:	f06f 040d 	mvn.w	r4, #13
    d274:	e007      	b.n	d286 <os_arch_os_init+0x3a>
             i < NVIC_NUM_VECTORS - NVIC_USER_IRQ_OFFSET; i++) {
            NVIC_SetVector(i, (uint32_t)os_default_irq_asm);
    d276:	b265      	sxtb	r5, r4
  uint32_t vectors = (uint32_t )SCB->VTOR;
    d278:	4e12      	ldr	r6, [pc, #72]	; (d2c4 <os_arch_os_init+0x78>)
    d27a:	68b6      	ldr	r6, [r6, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
    d27c:	3510      	adds	r5, #16
    d27e:	4f12      	ldr	r7, [pc, #72]	; (d2c8 <os_arch_os_init+0x7c>)
    d280:	f846 7025 	str.w	r7, [r6, r5, lsl #2]
             i < NVIC_NUM_VECTORS - NVIC_USER_IRQ_OFFSET; i++) {
    d284:	3401      	adds	r4, #1
        for (i = -NVIC_USER_IRQ_OFFSET + 2;
    d286:	2c25      	cmp	r4, #37	; 0x25
    d288:	ddf5      	ble.n	d276 <os_arch_os_init+0x2a>
  uint32_t vectors = (uint32_t )SCB->VTOR;
    d28a:	4c0e      	ldr	r4, [pc, #56]	; (d2c4 <os_arch_os_init+0x78>)
    d28c:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
    d28e:	4e0f      	ldr	r6, [pc, #60]	; (d2cc <os_arch_os_init+0x80>)
    d290:	62ee      	str	r6, [r5, #44]	; 0x2c
  uint32_t vectors = (uint32_t )SCB->VTOR;
    d292:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
    d294:	4e0e      	ldr	r6, [pc, #56]	; (d2d0 <os_arch_os_init+0x84>)
    d296:	63ae      	str	r6, [r5, #56]	; 0x38
  uint32_t vectors = (uint32_t )SCB->VTOR;
    d298:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
    d29a:	4e0e      	ldr	r6, [pc, #56]	; (d2d4 <os_arch_os_init+0x88>)
    d29c:	63ee      	str	r6, [r5, #60]	; 0x3c
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    d29e:	25e0      	movs	r5, #224	; 0xe0
    d2a0:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
    d2a4:	2520      	movs	r5, #32
    d2a6:	77e5      	strb	r5, [r4, #31]
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    d2a8:	f3ef 8414 	mrs	r4, CONTROL

        /* Set the SVC interrupt to priority 0 (highest configurable) */
        NVIC_SetPriority(SVCall_IRQn, SVC_PRIO);

        /* Check if privileged or not */
        if ((__get_CONTROL() & 1) == 0) {
    d2ac:	f014 0f01 	tst.w	r4, #1
    d2b0:	d004      	beq.n	d2bc <os_arch_os_init+0x70>
    SVC_Call(os_arch_init);
    d2b2:	f8df c024 	ldr.w	ip, [pc, #36]	; d2d8 <os_arch_os_init+0x8c>
    d2b6:	df00      	svc	0
        err = OS_OK;
    d2b8:	2000      	movs	r0, #0
            svc_os_arch_init();
        }
    }

    return err;
}
    d2ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            os_arch_init();
    d2bc:	f7ff ffba 	bl	d234 <os_arch_init>
        err = OS_OK;
    d2c0:	2000      	movs	r0, #0
    d2c2:	e7fa      	b.n	d2ba <os_arch_os_init+0x6e>
    d2c4:	e000ed00 	.word	0xe000ed00
    d2c8:	0000d5f7 	.word	0x0000d5f7
    d2cc:	0000d57b 	.word	0x0000d57b
    d2d0:	0000d5c1 	.word	0x0000d5c1
    d2d4:	0000d5eb 	.word	0x0000d5eb
    d2d8:	0000d235 	.word	0x0000d235

0000d2dc <os_arch_start>:

uint32_t
os_arch_start(void)
{
    d2dc:	b510      	push	{r4, lr}
    struct os_task *t;

    /* Get the highest priority ready to run to set the current task */
    t = os_sched_next_task();
    d2de:	f7ff fe21 	bl	cf24 <os_sched_next_task>
    d2e2:	4604      	mov	r4, r0
    os_sched_set_current_task(t);
    d2e4:	f7ff fd4a 	bl	cd7c <os_sched_set_current_task>

    /* Adjust PSP so it looks like this task just took an exception */
    __set_PSP((uint32_t)t->t_stackptr + offsetof(struct stack_frame, r0));
    d2e8:	6823      	ldr	r3, [r4, #0]
    d2ea:	3320      	adds	r3, #32
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    d2ec:	f383 8809 	msr	PSP, r3

    /* Intitialize and start system clock timer */
    os_tick_init(OS_TICKS_PER_SEC, OS_TICK_PRIO);
    d2f0:	2106      	movs	r1, #6
    d2f2:	2080      	movs	r0, #128	; 0x80
    d2f4:	f000 fe7a 	bl	dfec <os_tick_init>

    /* Mark the OS as started, right before we run our first task */
    g_os_started = 1;
    d2f8:	4b03      	ldr	r3, [pc, #12]	; (d308 <os_arch_start+0x2c>)
    d2fa:	2201      	movs	r2, #1
    d2fc:	601a      	str	r2, [r3, #0]

    /* Perform context switch */
    os_arch_ctx_sw(t);
    d2fe:	4620      	mov	r0, r4
    d300:	f7ff ff5e 	bl	d1c0 <os_arch_ctx_sw>

    return (uint32_t)(t->t_arg);
}
    d304:	69a0      	ldr	r0, [r4, #24]
    d306:	bd10      	pop	{r4, pc}
    d308:	200021c8 	.word	0x200021c8

0000d30c <os_arch_os_start>:
 *
 * @return os_error_t
 */
os_error_t
os_arch_os_start(void)
{
    d30c:	b510      	push	{r4, lr}
     * privileged or un-privileged mode.
     *
     * We switch to using "empty" part of idle task's stack until
     * the svc_os_arch_start() executes SVC, and we will never return.
     */
    os_set_env(g_idle_task.t_stackptr - 1);
    d30e:	4814      	ldr	r0, [pc, #80]	; (d360 <os_arch_os_start+0x54>)
    d310:	6800      	ldr	r0, [r0, #0]
    d312:	3804      	subs	r0, #4
    d314:	f000 f924 	bl	d560 <os_set_env>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    d318:	f3ef 8405 	mrs	r4, IPSR

    err = OS_ERR_IN_ISR;
    if (__get_IPSR() == 0) {
    d31c:	b9d4      	cbnz	r4, d354 <os_arch_os_start+0x48>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    d31e:	f3ef 8414 	mrs	r4, CONTROL
         * The following switch statement is really just a sanity check to
         * insure that the os initialization routine was called prior to the
         * os start routine.
         */
        err = OS_OK;
        switch (__get_CONTROL() & 0x03) {
    d322:	f004 0403 	and.w	r4, r4, #3
    d326:	2c03      	cmp	r4, #3
    d328:	d808      	bhi.n	d33c <os_arch_os_start+0x30>
    d32a:	e8df f004 	tbb	[pc, r4]
    d32e:	1515      	.short	0x1515
    d330:	0c02      	.short	0x0c02
        case 0x02:
            /*
             * We are running in Privileged Thread mode w/SP = PSP but we
             * are supposed to be un-privileged.
             */
            if ((os_flags & 1) == OS_RUN_UNPRIV) {
    d332:	4c0c      	ldr	r4, [pc, #48]	; (d364 <os_arch_os_start+0x58>)
    d334:	6824      	ldr	r4, [r4, #0]
    d336:	f014 0f01 	tst.w	r4, #1
    d33a:	d10f      	bne.n	d35c <os_arch_os_start+0x50>
    SVC_Call(os_arch_start);
    d33c:	f8df c028 	ldr.w	ip, [pc, #40]	; d368 <os_arch_os_start+0x5c>
    d340:	df00      	svc	0
    d342:	2000      	movs	r0, #0
            svc_os_arch_start();
        }
    }

    return err;
}
    d344:	bd10      	pop	{r4, pc}
            if  ((os_flags & 1) == OS_RUN_PRIV) {
    d346:	4c07      	ldr	r4, [pc, #28]	; (d364 <os_arch_os_start+0x58>)
    d348:	6824      	ldr	r4, [r4, #0]
    d34a:	f014 0f01 	tst.w	r4, #1
    d34e:	d1f5      	bne.n	d33c <os_arch_os_start+0x30>
                err = OS_ERR_PRIV;
    d350:	2008      	movs	r0, #8
    d352:	e7f7      	b.n	d344 <os_arch_os_start+0x38>
    err = OS_ERR_IN_ISR;
    d354:	2007      	movs	r0, #7
    d356:	e7f5      	b.n	d344 <os_arch_os_start+0x38>
            err = OS_ERR_PRIV;
    d358:	2008      	movs	r0, #8
    d35a:	e7f3      	b.n	d344 <os_arch_os_start+0x38>
                err = OS_ERR_PRIV;
    d35c:	2008      	movs	r0, #8
    d35e:	e7f1      	b.n	d344 <os_arch_os_start+0x38>
    d360:	20002174 	.word	0x20002174
    d364:	20002060 	.word	0x20002060
    d368:	0000d2dd 	.word	0x0000d2dd

0000d36c <__assert_func>:
}
#endif

void
__assert_func(const char *file, int line, const char *func, const char *e)
{
    d36c:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_CRASH_LOG)
    struct log_reboot_info lri;
#endif
    int sr;

    OS_ENTER_CRITICAL(sr);
    d36e:	f7ff ff31 	bl	d1d4 <os_arch_save_sr>

#if MYNEWT_VAL(OS_ASSERT_CB)
    os_assert_cb();
#endif

    SCB->ICSR = SCB_ICSR_NMIPENDSET_Msk;
    d372:	4b04      	ldr	r3, [pc, #16]	; (d384 <__assert_func+0x18>)
    d374:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    d378:	605a      	str	r2, [r3, #4]
    asm("isb");
    d37a:	f3bf 8f6f 	isb	sy
    hal_system_reset();
    d37e:	f7fe ff1d 	bl	c1bc <hal_system_reset>
    d382:	bf00      	nop
    d384:	e000ed00 	.word	0xe000ed00

0000d388 <os_default_irq>:
}

void
os_default_irq(struct trap_frame *tf)
{
    d388:	b508      	push	{r3, lr}
    uint32_t orig_sp;
#endif

    console_blocking_mode();
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
      SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk, (uint32_t)tf->ef);
    d38a:	4b04      	ldr	r3, [pc, #16]	; (d39c <os_default_irq+0x14>)
    d38c:	685a      	ldr	r2, [r3, #4]
      tf->r4, tf->r5, tf->r6, tf->r7);
    console_printf(" r8:0x%08lx  r9:0x%08lx r10:0x%08lx r11:0x%08lx\n",
      tf->r8, tf->r9, tf->r10, tf->r11);
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
      tf->ef->r12, tf->ef->lr, tf->ef->pc, tf->ef->psr);
    console_printf("ICSR:0x%08lx HFSR:0x%08lx CFSR:0x%08lx\n",
    d38e:	685a      	ldr	r2, [r3, #4]
    d390:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    d392:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      SCB->ICSR, SCB->HFSR, SCB->CFSR);
    console_printf("BFAR:0x%08lx MMFAR:0x%08lx\n", SCB->BFAR, SCB->MMFAR);
    d394:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    d396:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            : "r0"
        );
    }
#endif

    hal_system_reset();
    d398:	f7fe ff10 	bl	c1bc <hal_system_reset>
    d39c:	e000ed00 	.word	0xe000ed00

0000d3a0 <os_mbuf_pool_init>:

int
os_mbuf_pool_init(struct os_mbuf_pool *omp, struct os_mempool *mp,
                  uint16_t buf_len, uint16_t nbufs)
{
    omp->omp_databuf_len = buf_len - sizeof(struct os_mbuf);
    d3a0:	3a10      	subs	r2, #16
    d3a2:	8002      	strh	r2, [r0, #0]
    omp->omp_pool = mp;
    d3a4:	6041      	str	r1, [r0, #4]

    return (0);
}
    d3a6:	2000      	movs	r0, #0
    d3a8:	4770      	bx	lr

0000d3aa <os_mutex_init>:
os_error_t
os_mutex_init(struct os_mutex *mu)
{
    os_error_t ret;

    if (!mu) {
    d3aa:	4603      	mov	r3, r0
    d3ac:	b128      	cbz	r0, d3ba <os_mutex_init+0x10>
    }

    os_trace_api_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)mu);

    /* Initialize to 0 */
    mu->mu_prio = 0;
    d3ae:	2000      	movs	r0, #0
    d3b0:	7158      	strb	r0, [r3, #5]
    mu->mu_level = 0;
    d3b2:	80d8      	strh	r0, [r3, #6]
    mu->mu_owner = NULL;
    d3b4:	6098      	str	r0, [r3, #8]
    SLIST_FIRST(&mu->mu_head) = NULL;
    d3b6:	6018      	str	r0, [r3, #0]
    d3b8:	4770      	bx	lr
        ret = OS_INVALID_PARM;
    d3ba:	2003      	movs	r0, #3
    ret = OS_OK;

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)ret);
    return ret;
}
    d3bc:	4770      	bx	lr
	...

0000d3c0 <os_mutex_release>:

os_error_t
os_mutex_release(struct os_mutex *mu)
{
    d3c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32(OS_TRACE_ID_MUTEX_RELEASE, (uint32_t)mu);

    /* Check if OS is started */
    if (!g_os_started) {
    d3c2:	4b2e      	ldr	r3, [pc, #184]	; (d47c <os_mutex_release+0xbc>)
    d3c4:	681b      	ldr	r3, [r3, #0]
    d3c6:	2b00      	cmp	r3, #0
    d3c8:	d052      	beq.n	d470 <os_mutex_release+0xb0>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid mutex */
    if (!mu) {
    d3ca:	2800      	cmp	r0, #0
    d3cc:	d052      	beq.n	d474 <os_mutex_release+0xb4>
    d3ce:	4604      	mov	r4, r0
        ret = OS_INVALID_PARM;
        goto done;
    }

    /* We better own this mutex! */
    current = os_sched_get_current_task();
    d3d0:	f7ff fcce 	bl	cd70 <os_sched_get_current_task>
    d3d4:	4605      	mov	r5, r0
    if ((mu->mu_level == 0) || (mu->mu_owner != current)) {
    d3d6:	88e3      	ldrh	r3, [r4, #6]
    d3d8:	2b00      	cmp	r3, #0
    d3da:	d04d      	beq.n	d478 <os_mutex_release+0xb8>
    d3dc:	68a2      	ldr	r2, [r4, #8]
    d3de:	4282      	cmp	r2, r0
    d3e0:	d001      	beq.n	d3e6 <os_mutex_release+0x26>
        ret = OS_BAD_MUTEX;
    d3e2:	2005      	movs	r0, #5
    d3e4:	e045      	b.n	d472 <os_mutex_release+0xb2>
        goto done;
    }

    /* Don't release if nested, just decrement nesting level */
    if (mu->mu_level != 1) {
    d3e6:	2b01      	cmp	r3, #1
    d3e8:	d003      	beq.n	d3f2 <os_mutex_release+0x32>
        --mu->mu_level;
    d3ea:	3b01      	subs	r3, #1
    d3ec:	80e3      	strh	r3, [r4, #6]
        ret = OS_OK;
    d3ee:	2000      	movs	r0, #0
        goto done;
    d3f0:	e03f      	b.n	d472 <os_mutex_release+0xb2>
    }

    OS_ENTER_CRITICAL(sr);
    d3f2:	f7ff feef 	bl	d1d4 <os_arch_save_sr>
    d3f6:	4607      	mov	r7, r0

    /* Decrement nesting level (this effectively sets nesting level to 0) */
    --mu->mu_level;
    d3f8:	88e3      	ldrh	r3, [r4, #6]
    d3fa:	3b01      	subs	r3, #1
    d3fc:	80e3      	strh	r3, [r4, #6]

    /* Restore owner task's priority; resort list if different  */
    if (current->t_prio != mu->mu_prio) {
    d3fe:	7aea      	ldrb	r2, [r5, #11]
    d400:	7963      	ldrb	r3, [r4, #5]
    d402:	429a      	cmp	r2, r3
    d404:	d11e      	bne.n	d444 <os_mutex_release+0x84>
        current->t_prio = mu->mu_prio;
        os_sched_resort(current);
    }

    /* Check if tasks are waiting for the mutex */
    rdy = SLIST_FIRST(&mu->mu_head);
    d406:	6826      	ldr	r6, [r4, #0]
    if (rdy) {
    d408:	b146      	cbz	r6, d41c <os_mutex_release+0x5c>
        /* There is one waiting. Wake it up */
        assert(rdy->t_obj);
    d40a:	69f3      	ldr	r3, [r6, #28]
    d40c:	b1fb      	cbz	r3, d44e <os_mutex_release+0x8e>
        os_sched_wakeup(rdy);
    d40e:	4630      	mov	r0, r6
    d410:	f7ff fd02 	bl	ce18 <os_sched_wakeup>

        /* Set mutex internals */
        mu->mu_level = 1;
    d414:	2301      	movs	r3, #1
    d416:	80e3      	strh	r3, [r4, #6]
        mu->mu_prio = rdy->t_prio;
    d418:	7af3      	ldrb	r3, [r6, #11]
    d41a:	7163      	strb	r3, [r4, #5]
    }

    /* Set new owner of mutex (or NULL if not owned) */
    mu->mu_owner = rdy;
    d41c:	60a6      	str	r6, [r4, #8]
    if (rdy) {
    d41e:	b116      	cbz	r6, d426 <os_mutex_release+0x66>
        rdy->t_lockcnt++;
    d420:	7bb3      	ldrb	r3, [r6, #14]
    d422:	3301      	adds	r3, #1
    d424:	73b3      	strb	r3, [r6, #14]
    }
    --current->t_lockcnt;
    d426:	7bab      	ldrb	r3, [r5, #14]
    d428:	3b01      	subs	r3, #1
    d42a:	73ab      	strb	r3, [r5, #14]

    /* Do we need to re-schedule? */
    resched = 0;
    rdy = os_sched_next_task();
    d42c:	f7ff fd7a 	bl	cf24 <os_sched_next_task>
    d430:	4604      	mov	r4, r0
    if (rdy != current) {
    d432:	4285      	cmp	r5, r0
    d434:	d015      	beq.n	d462 <os_mutex_release+0xa2>
        resched = 1;
    d436:	2501      	movs	r5, #1
    }
    OS_EXIT_CRITICAL(sr);
    d438:	4638      	mov	r0, r7
    d43a:	f7ff fed1 	bl	d1e0 <os_arch_restore_sr>

    /* Re-schedule if needed */
    if (resched) {
    d43e:	b995      	cbnz	r5, d466 <os_mutex_release+0xa6>
        os_sched(rdy);
    }

    ret = OS_OK;
    d440:	2000      	movs	r0, #0
    d442:	e016      	b.n	d472 <os_mutex_release+0xb2>
        current->t_prio = mu->mu_prio;
    d444:	72eb      	strb	r3, [r5, #11]
        os_sched_resort(current);
    d446:	4628      	mov	r0, r5
    d448:	f7ff fd84 	bl	cf54 <os_sched_resort>
    d44c:	e7db      	b.n	d406 <os_mutex_release+0x46>
        assert(rdy->t_obj);
    d44e:	f7fe fead 	bl	c1ac <hal_debugger_connected>
    d452:	b100      	cbz	r0, d456 <os_mutex_release+0x96>
    d454:	be01      	bkpt	0x0001
    d456:	2300      	movs	r3, #0
    d458:	461a      	mov	r2, r3
    d45a:	4619      	mov	r1, r3
    d45c:	4618      	mov	r0, r3
    d45e:	f7ff ff85 	bl	d36c <__assert_func>
    resched = 0;
    d462:	2500      	movs	r5, #0
    d464:	e7e8      	b.n	d438 <os_mutex_release+0x78>
        os_sched(rdy);
    d466:	4620      	mov	r0, r4
    d468:	f7ff fd62 	bl	cf30 <os_sched>
    ret = OS_OK;
    d46c:	2000      	movs	r0, #0
    d46e:	e000      	b.n	d472 <os_mutex_release+0xb2>
        ret = OS_NOT_STARTED;
    d470:	2009      	movs	r0, #9

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_RELEASE, (uint32_t)ret);
    return ret;
}
    d472:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ret = OS_INVALID_PARM;
    d474:	2003      	movs	r0, #3
    d476:	e7fc      	b.n	d472 <os_mutex_release+0xb2>
        ret = OS_BAD_MUTEX;
    d478:	2005      	movs	r0, #5
    d47a:	e7fa      	b.n	d472 <os_mutex_release+0xb2>
    d47c:	200021c8 	.word	0x200021c8

0000d480 <os_mutex_pend>:
    struct os_task *last;

    os_trace_api_u32x2(OS_TRACE_ID_MUTEX_PEND, (uint32_t)mu, (uint32_t)timeout);

    /* OS must be started when calling this function */
    if (!g_os_started) {
    d480:	4b36      	ldr	r3, [pc, #216]	; (d55c <os_mutex_pend+0xdc>)
    d482:	681b      	ldr	r3, [r3, #0]
    d484:	2b00      	cmp	r3, #0
    d486:	d065      	beq.n	d554 <os_mutex_pend+0xd4>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid mutex */
    if (!mu) {
    d488:	2800      	cmp	r0, #0
    d48a:	d065      	beq.n	d558 <os_mutex_pend+0xd8>
{
    d48c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d490:	460f      	mov	r7, r1
    d492:	4604      	mov	r4, r0
        ret = OS_INVALID_PARM;
        goto done;
    }

    OS_ENTER_CRITICAL(sr);
    d494:	f7ff fe9e 	bl	d1d4 <os_arch_save_sr>
    d498:	4680      	mov	r8, r0

    /* Is this owned? */
    current = os_sched_get_current_task();
    d49a:	f7ff fc69 	bl	cd70 <os_sched_get_current_task>
    d49e:	4605      	mov	r5, r0
    if (mu->mu_level == 0) {
    d4a0:	88e3      	ldrh	r3, [r4, #6]
    d4a2:	b19b      	cbz	r3, d4cc <os_mutex_pend+0x4c>
        ret = OS_OK;
        goto done;
    }

    /* Are we owner? */
    if (mu->mu_owner == current) {
    d4a4:	68a2      	ldr	r2, [r4, #8]
    d4a6:	4282      	cmp	r2, r0
    d4a8:	d01e      	beq.n	d4e8 <os_mutex_pend+0x68>
        ret = OS_OK;
        goto done;
    }

    /* Mutex is not owned by us. If timeout is 0, return immediately */
    if (timeout == 0) {
    d4aa:	b327      	cbz	r7, d4f6 <os_mutex_pend+0x76>
        ret = OS_TIMEOUT;
        goto done;
    }

    /* Change priority of owner if needed */
    if (mu->mu_owner->t_prio > current->t_prio) {
    d4ac:	7ad1      	ldrb	r1, [r2, #11]
    d4ae:	7ac3      	ldrb	r3, [r0, #11]
    d4b0:	4299      	cmp	r1, r3
    d4b2:	d825      	bhi.n	d500 <os_mutex_pend+0x80>
        os_sched_resort(mu->mu_owner);
    }

    /* Link current task to tasks waiting for mutex */
    last = NULL;
    if (!SLIST_EMPTY(&mu->mu_head)) {
    d4b4:	6821      	ldr	r1, [r4, #0]
    d4b6:	b369      	cbz	r1, d514 <os_mutex_pend+0x94>
        /* Insert in priority order */
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
    d4b8:	460b      	mov	r3, r1
    last = NULL;
    d4ba:	2600      	movs	r6, #0
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
    d4bc:	b32b      	cbz	r3, d50a <os_mutex_pend+0x8a>
            if (current->t_prio < entry->t_prio) {
    d4be:	7ae8      	ldrb	r0, [r5, #11]
    d4c0:	7ada      	ldrb	r2, [r3, #11]
    d4c2:	4290      	cmp	r0, r2
    d4c4:	d321      	bcc.n	d50a <os_mutex_pend+0x8a>
                break;
            }
            last = entry;
    d4c6:	461e      	mov	r6, r3
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
    d4c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    d4ca:	e7f7      	b.n	d4bc <os_mutex_pend+0x3c>
        mu->mu_owner = current;
    d4cc:	60a0      	str	r0, [r4, #8]
        mu->mu_prio  = current->t_prio;
    d4ce:	7ac3      	ldrb	r3, [r0, #11]
    d4d0:	7163      	strb	r3, [r4, #5]
        current->t_lockcnt++;
    d4d2:	7b83      	ldrb	r3, [r0, #14]
    d4d4:	3301      	adds	r3, #1
    d4d6:	7383      	strb	r3, [r0, #14]
        mu->mu_level = 1;
    d4d8:	2301      	movs	r3, #1
    d4da:	80e3      	strh	r3, [r4, #6]
        OS_EXIT_CRITICAL(sr);
    d4dc:	4640      	mov	r0, r8
    d4de:	f7ff fe7f 	bl	d1e0 <os_arch_restore_sr>
        ret = OS_OK;
    d4e2:	2000      	movs	r0, #0
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_PEND, (uint32_t)ret);
    return ret;
}
    d4e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ++mu->mu_level;
    d4e8:	3301      	adds	r3, #1
    d4ea:	80e3      	strh	r3, [r4, #6]
        OS_EXIT_CRITICAL(sr);
    d4ec:	4640      	mov	r0, r8
    d4ee:	f7ff fe77 	bl	d1e0 <os_arch_restore_sr>
        ret = OS_OK;
    d4f2:	2000      	movs	r0, #0
        goto done;
    d4f4:	e7f6      	b.n	d4e4 <os_mutex_pend+0x64>
        OS_EXIT_CRITICAL(sr);
    d4f6:	4640      	mov	r0, r8
    d4f8:	f7ff fe72 	bl	d1e0 <os_arch_restore_sr>
        ret = OS_TIMEOUT;
    d4fc:	2006      	movs	r0, #6
        goto done;
    d4fe:	e7f1      	b.n	d4e4 <os_mutex_pend+0x64>
        mu->mu_owner->t_prio = current->t_prio;
    d500:	72d3      	strb	r3, [r2, #11]
        os_sched_resort(mu->mu_owner);
    d502:	68a0      	ldr	r0, [r4, #8]
    d504:	f7ff fd26 	bl	cf54 <os_sched_resort>
    d508:	e7d4      	b.n	d4b4 <os_mutex_pend+0x34>
    if (last) {
    d50a:	b11e      	cbz	r6, d514 <os_mutex_pend+0x94>
        SLIST_INSERT_AFTER(last, current, t_obj_list);
    d50c:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
    d50e:	64eb      	str	r3, [r5, #76]	; 0x4c
    d510:	64f5      	str	r5, [r6, #76]	; 0x4c
    d512:	e001      	b.n	d518 <os_mutex_pend+0x98>
        SLIST_INSERT_HEAD(&mu->mu_head, current, t_obj_list);
    d514:	64e9      	str	r1, [r5, #76]	; 0x4c
    d516:	6025      	str	r5, [r4, #0]
    current->t_obj = mu;
    d518:	61ec      	str	r4, [r5, #28]
    current->t_flags |= OS_TASK_FLAG_MUTEX_WAIT;
    d51a:	7b6b      	ldrb	r3, [r5, #13]
    d51c:	f043 0304 	orr.w	r3, r3, #4
    d520:	736b      	strb	r3, [r5, #13]
    os_sched_sleep(current, timeout);
    d522:	4639      	mov	r1, r7
    d524:	4628      	mov	r0, r5
    d526:	f7ff fc2f 	bl	cd88 <os_sched_sleep>
    OS_EXIT_CRITICAL(sr);
    d52a:	4640      	mov	r0, r8
    d52c:	f7ff fe58 	bl	d1e0 <os_arch_restore_sr>
    os_sched(NULL);
    d530:	2000      	movs	r0, #0
    d532:	f7ff fcfd 	bl	cf30 <os_sched>
    OS_ENTER_CRITICAL(sr);
    d536:	f7ff fe4d 	bl	d1d4 <os_arch_save_sr>
    current->t_flags &= ~OS_TASK_FLAG_MUTEX_WAIT;
    d53a:	7b6b      	ldrb	r3, [r5, #13]
    d53c:	f023 0304 	bic.w	r3, r3, #4
    d540:	736b      	strb	r3, [r5, #13]
    OS_EXIT_CRITICAL(sr);
    d542:	f7ff fe4d 	bl	d1e0 <os_arch_restore_sr>
    if (mu->mu_owner == current) {
    d546:	68a3      	ldr	r3, [r4, #8]
    d548:	42ab      	cmp	r3, r5
    d54a:	d001      	beq.n	d550 <os_mutex_pend+0xd0>
        ret = OS_TIMEOUT;
    d54c:	2006      	movs	r0, #6
    d54e:	e7c9      	b.n	d4e4 <os_mutex_pend+0x64>
        ret = OS_OK;
    d550:	2000      	movs	r0, #0
    d552:	e7c7      	b.n	d4e4 <os_mutex_pend+0x64>
        ret = OS_NOT_STARTED;
    d554:	2009      	movs	r0, #9
    d556:	4770      	bx	lr
        ret = OS_INVALID_PARM;
    d558:	2003      	movs	r0, #3
}
    d55a:	4770      	bx	lr
    d55c:	200021c8 	.word	0x200021c8

0000d560 <os_set_env>:
        .global os_set_env
os_set_env:
        .fnstart
        .cantunwind

        MSR     PSP,R0
    d560:	f380 8809 	msr	PSP, r0
        LDR     R0,=os_flags
    d564:	482b      	ldr	r0, [pc, #172]	; (d614 <os_default_irq_asm+0x1e>)
        LDRB    R0,[R0]
    d566:	7800      	ldrb	r0, [r0, #0]
        ADDS    R0, R0, #2
    d568:	3002      	adds	r0, #2
        MSR     CONTROL,R0
    d56a:	f380 8814 	msr	CONTROL, r0
        ISB
    d56e:	f3bf 8f6f 	isb	sy
        BX      LR
    d572:	4770      	bx	lr

0000d574 <os_arch_init_task_stack>:
        .type   os_arch_init_task_stack, %function
        .global os_arch_init_task_stack
os_arch_init_task_stack:
        .fnstart

        STMIA   R0,{R4-R11}
    d574:	e880 0ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp}
        BX      LR
    d578:	4770      	bx	lr

0000d57a <SVC_Handler>:
        PUSH    {R4,LR}
        BL      os_trace_isr_enter
        POP     {R4,LR}
#endif

        MRS     R0,PSP                  /* Read PSP */
    d57a:	f3ef 8009 	mrs	r0, PSP
        LDR     R1,[R0,#24]             /* Read Saved PC from Stack */
    d57e:	6981      	ldr	r1, [r0, #24]
        LDRB    R1,[R1,#-2]             /* Load SVC Number */
    d580:	f811 1c02 	ldrb.w	r1, [r1, #-2]
        CBNZ    R1,SVC_User
    d584:	b951      	cbnz	r1, d59c <SVC_User>

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
    d586:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
    d58a:	b510      	push	{r4, lr}
        BLX     R12                     /* Call SVC Function */
    d58c:	47e0      	blx	ip
        POP     {R4,LR}                 /* Restore EXC_RETURN */
    d58e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

        MRS     R12,PSP                 /* Read PSP */
    d592:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R2}             /* Store return values */
    d596:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR                      /* Return from interrupt */
    d59a:	4770      	bx	lr

0000d59c <SVC_User>:

        /*------------------- User SVC ------------------------------*/
SVC_User:
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
    d59c:	b510      	push	{r4, lr}
        LDR     R2,=SVC_Count
    d59e:	4a1e      	ldr	r2, [pc, #120]	; (d618 <os_default_irq_asm+0x22>)
        LDR     R2,[R2]
    d5a0:	6812      	ldr	r2, [r2, #0]
        CMP     R1,R2
    d5a2:	4291      	cmp	r1, r2
        BHI     SVC_Done                /* Overflow */
    d5a4:	d809      	bhi.n	d5ba <SVC_Done>

        LDR     R4,=SVC_Table-4
    d5a6:	4c1d      	ldr	r4, [pc, #116]	; (d61c <os_default_irq_asm+0x26>)
        LDR     R4,[R4,R1,LSL #2]       /* Load SVC Function Address */
    d5a8:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
    d5ac:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        BLX     R4                      /* Call SVC Function */
    d5b0:	47a0      	blx	r4

        MRS     R12,PSP
    d5b2:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R3}             /* Function return values */
    d5b6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

0000d5ba <SVC_Done>:
SVC_Done:
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
    d5ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR                      /* Return from interrupt */
    d5be:	4770      	bx	lr

0000d5c0 <PendSV_Handler>:
        .global PendSV_Handler
PendSV_Handler:
        .fnstart
        .cantunwind

        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
    d5c0:	4b17      	ldr	r3, [pc, #92]	; (d620 <os_default_irq_asm+0x2a>)
        LDR     R2,[R3]                 /* Store in R2 */
    d5c2:	681a      	ldr	r2, [r3, #0]
        LDR     R3,=g_current_task      /* Get current task */
    d5c4:	4b17      	ldr	r3, [pc, #92]	; (d624 <os_default_irq_asm+0x2e>)
        LDR     R1,[R3]                 /* Current task in R1 */
    d5c6:	6819      	ldr	r1, [r3, #0]
        CMP     R1,R2
    d5c8:	4291      	cmp	r1, r2
        IT      EQ
    d5ca:	bf08      	it	eq
        BXEQ    LR                      /* RETI, no task switch */
    d5cc:	4770      	bxeq	lr

        MRS     R12,PSP                 /* Read PSP */
    d5ce:	f3ef 8c09 	mrs	ip, PSP
        TST     LR,#0x10                /* is it extended frame? */
        IT      EQ
        VSTMDBEQ R12!,{S16-S31}         /* yes; push the regs */
        STMDB   R12!,{R4-R11,LR}        /* Save Old context */
#else
        STMDB   R12!,{R4-R11}           /* Save Old context */
    d5d2:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#endif
        STR     R12,[R1,#0]             /* Update stack pointer in current task */
    d5d6:	f8c1 c000 	str.w	ip, [r1]
        STR     R2,[R3]                 /* g_current_task = highest ready */
    d5da:	601a      	str	r2, [r3, #0]

        LDR     R12,[R2,#0]             /* get stack pointer of task we will start */
    d5dc:	f8d2 c000 	ldr.w	ip, [r2]
        ITTE    EQ
        VLDMIAEQ R12!,{S16-S31}         /* yes; pull the regs */
        MVNEQ   LR,#~0xFFFFFFED         /* BX treats it as extended */
        MVNNE   LR,#~0xFFFFFFFD         /* BX treats is as basic frame */
#else
        LDMIA   R12!,{R4-R11}           /* Restore New Context */
    d5e0:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#endif
        MSR     PSP,R12                 /* Write PSP */
    d5e4:	f38c 8809 	msr	PSP, ip
        MOV     R0, R2
        BL      os_trace_task_start_exec
        POP     {R4,LR}
#endif

        BX      LR                      /* Return to Thread Mode */
    d5e8:	4770      	bx	lr

0000d5ea <SysTick_Handler>:
        .global SysTick_Handler
SysTick_Handler:
        .fnstart
        .cantunwind

        PUSH    {R4,LR}                 /* Save EXC_RETURN */
    d5ea:	b510      	push	{r4, lr}
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_enter
#endif
        BL      timer_handler
    d5ec:	f7ff fde2 	bl	d1b4 <timer_handler>
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
    d5f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR
    d5f4:	4770      	bx	lr

0000d5f6 <os_default_irq_asm>:

        /*
         * LR = 0xfffffff9 if we were using MSP as SP
         * LR = 0xfffffffd if we were using PSP as SP
         */
        TST     LR,#4
    d5f6:	f01e 0f04 	tst.w	lr, #4
        ITE     EQ
    d5fa:	bf0c      	ite	eq
        MRSEQ   R3,MSP
    d5fc:	f3ef 8308 	mrseq	r3, MSP
        MRSNE   R3,PSP
    d600:	f3ef 8309 	mrsne	r3, PSP
        PUSH    {R3-R11,LR}
    d604:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        MOV     R0, SP
    d608:	4668      	mov	r0, sp
        BL      os_default_irq
    d60a:	f7ff febd 	bl	d388 <os_default_irq>
        POP     {R3-R11,LR}                 /* Restore EXC_RETURN */
    d60e:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR
    d612:	4770      	bx	lr
        LDR     R0,=os_flags
    d614:	20002060 	.word	0x20002060
        LDR     R2,=SVC_Count
    d618:	00000000 	.word	0x00000000
        LDR     R4,=SVC_Table-4
    d61c:	fffffffc 	.word	0xfffffffc
        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
    d620:	20000118 	.word	0x20000118
        LDR     R3,=g_current_task      /* Get current task */
    d624:	20002238 	.word	0x20002238

0000d628 <memcpy>:
#if defined(__ARM_FEATURE_UNALIGNED)
        /*
         * We can speed up a bit by moving 32-bit words if unaligned access is
         * supported (e.g. Cortex-M3/4/7/33).
         */
        asm (".syntax unified           \n"
    d628:	e001      	b.n	d62e <test1>

0000d62a <loop1>:
    d62a:	588b      	ldr	r3, [r1, r2]
    d62c:	5083      	str	r3, [r0, r2]

0000d62e <test1>:
    d62e:	3a04      	subs	r2, #4
    d630:	d5fb      	bpl.n	d62a <loop1>
    d632:	f102 0204 	add.w	r2, r2, #4
             "       bpl  loop1         \n"
             "       add  r2, #4        \n"
            );
#endif

        asm (".syntax unified           \n"
    d636:	e001      	b.n	d63c <test2>

0000d638 <loop2>:
    d638:	5c8b      	ldrb	r3, [r1, r2]
    d63a:	5483      	strb	r3, [r0, r2]

0000d63c <test2>:
    d63c:	3a01      	subs	r2, #1
    d63e:	d5fb      	bpl.n	d638 <loop2>
		*q++ = *p++;
	}
#endif

	return dst;
}
    d640:	4770      	bx	lr

0000d642 <memset>:
#if defined(__arm__)
#include <mcu/cmsis_nvic.h>
#endif

void *memset(void *dst, int c, size_t n)
{
    d642:	b430      	push	{r4, r5}
	asm volatile ("cld ; rep ; stosq ; movl %3,%%ecx ; rep ; stosb"
		      :"+c" (nq), "+D" (q)
		      : "a" ((unsigned char)c * 0x0101010101010101U),
			"r" ((uint32_t) n & 7));
#elif defined(__arm__)
    asm volatile (".syntax unified                          \n"
    d644:	4605      	mov	r5, r0
    d646:	b2c9      	uxtb	r1, r1
    d648:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    d64c:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    d650:	18ab      	adds	r3, r5, r2
    d652:	2403      	movs	r4, #3
    d654:	4023      	ands	r3, r4
    d656:	1ad3      	subs	r3, r2, r3
    d658:	d40b      	bmi.n	d672 <memset+0x30>
    d65a:	e001      	b.n	d660 <memset+0x1e>
    d65c:	3a01      	subs	r2, #1
    d65e:	54a9      	strb	r1, [r5, r2]
    d660:	429a      	cmp	r2, r3
    d662:	d1fb      	bne.n	d65c <memset+0x1a>
    d664:	e000      	b.n	d668 <memset+0x26>
    d666:	50a9      	str	r1, [r5, r2]
    d668:	3a04      	subs	r2, #4
    d66a:	d5fc      	bpl.n	d666 <memset+0x24>
    d66c:	3204      	adds	r2, #4
    d66e:	e000      	b.n	d672 <memset+0x30>
    d670:	54a9      	strb	r1, [r5, r2]
    d672:	3a01      	subs	r2, #1
    d674:	d5fc      	bpl.n	d670 <memset+0x2e>
		*q++ = c;
	}
#endif

	return dst;
}
    d676:	bc30      	pop	{r4, r5}
    d678:	4770      	bx	lr

0000d67a <strlen>:

#include <string.h>

size_t strlen(const char *s)
{
	const char *ss = s;
    d67a:	4603      	mov	r3, r0
	while (*ss)
    d67c:	e000      	b.n	d680 <strlen+0x6>
		ss++;
    d67e:	3301      	adds	r3, #1
	while (*ss)
    d680:	781a      	ldrb	r2, [r3, #0]
    d682:	2a00      	cmp	r2, #0
    d684:	d1fb      	bne.n	d67e <strlen+0x4>
	return ss - s;
}
    d686:	1a18      	subs	r0, r3, r0
    d688:	4770      	bx	lr
	...

0000d68c <flash_area_find_idx>:
const struct flash_area *flash_map;
int flash_map_entries;

static int
flash_area_find_idx(uint8_t id)
{
    d68c:	b410      	push	{r4}
    int i;

    if (flash_map == NULL) {
    d68e:	4b0c      	ldr	r3, [pc, #48]	; (d6c0 <flash_area_find_idx+0x34>)
    d690:	681c      	ldr	r4, [r3, #0]
    d692:	b18c      	cbz	r4, d6b8 <flash_area_find_idx+0x2c>
        return -1;
    }

    for (i = 0; i < flash_map_entries; i++) {
    d694:	2300      	movs	r3, #0
    d696:	4a0b      	ldr	r2, [pc, #44]	; (d6c4 <flash_area_find_idx+0x38>)
    d698:	6812      	ldr	r2, [r2, #0]
    d69a:	429a      	cmp	r2, r3
    d69c:	dd07      	ble.n	d6ae <flash_area_find_idx+0x22>
        if (flash_map[i].fa_id == id) {
    d69e:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    d6a2:	008a      	lsls	r2, r1, #2
    d6a4:	5ca2      	ldrb	r2, [r4, r2]
    d6a6:	4282      	cmp	r2, r0
    d6a8:	d003      	beq.n	d6b2 <flash_area_find_idx+0x26>
    for (i = 0; i < flash_map_entries; i++) {
    d6aa:	3301      	adds	r3, #1
    d6ac:	e7f3      	b.n	d696 <flash_area_find_idx+0xa>
            return i;
        }
    }

    return -1;
    d6ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
    d6b2:	4618      	mov	r0, r3
    d6b4:	bc10      	pop	{r4}
    d6b6:	4770      	bx	lr
        return -1;
    d6b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d6bc:	e7f9      	b.n	d6b2 <flash_area_find_idx+0x26>
    d6be:	bf00      	nop
    d6c0:	20002250 	.word	0x20002250
    d6c4:	20002254 	.word	0x20002254

0000d6c8 <flash_map_area_overlaps>:
    const struct flash_area *area2;
    uint32_t end1;
    uint32_t end2;
    int i;

    for (i = 0; i < flash_map_entries; i++) {
    d6c8:	2300      	movs	r3, #0
    d6ca:	4a13      	ldr	r2, [pc, #76]	; (d718 <flash_map_area_overlaps+0x50>)
    d6cc:	6812      	ldr	r2, [r2, #0]
    d6ce:	429a      	cmp	r2, r3
    d6d0:	dd1f      	ble.n	d712 <flash_map_area_overlaps+0x4a>
{
    d6d2:	b430      	push	{r4, r5}
    d6d4:	e004      	b.n	d6e0 <flash_map_area_overlaps+0x18>
    for (i = 0; i < flash_map_entries; i++) {
    d6d6:	3301      	adds	r3, #1
    d6d8:	4a0f      	ldr	r2, [pc, #60]	; (d718 <flash_map_area_overlaps+0x50>)
    d6da:	6812      	ldr	r2, [r2, #0]
    d6dc:	429a      	cmp	r2, r3
    d6de:	dd15      	ble.n	d70c <flash_map_area_overlaps+0x44>
        area2 = &flash_map[i];
    d6e0:	4a0e      	ldr	r2, [pc, #56]	; (d71c <flash_map_area_overlaps+0x54>)
    d6e2:	6812      	ldr	r2, [r2, #0]
    d6e4:	eb03 0443 	add.w	r4, r3, r3, lsl #1
    d6e8:	00a1      	lsls	r1, r4, #2
    d6ea:	440a      	add	r2, r1

        if (area1->fa_device_id == area2->fa_device_id) {
    d6ec:	7844      	ldrb	r4, [r0, #1]
    d6ee:	7851      	ldrb	r1, [r2, #1]
    d6f0:	428c      	cmp	r4, r1
    d6f2:	d1f0      	bne.n	d6d6 <flash_map_area_overlaps+0xe>
            end1 = area1->fa_off + area1->fa_size;
    d6f4:	6845      	ldr	r5, [r0, #4]
    d6f6:	6881      	ldr	r1, [r0, #8]
    d6f8:	4429      	add	r1, r5
            end2 = area2->fa_off + area2->fa_size;
    d6fa:	6854      	ldr	r4, [r2, #4]
    d6fc:	6892      	ldr	r2, [r2, #8]
    d6fe:	4422      	add	r2, r4

            if (end1 > area2->fa_off && area1->fa_off < end2) {
    d700:	428c      	cmp	r4, r1
    d702:	d2e8      	bcs.n	d6d6 <flash_map_area_overlaps+0xe>
    d704:	4295      	cmp	r5, r2
    d706:	d2e6      	bcs.n	d6d6 <flash_map_area_overlaps+0xe>
                return true;
    d708:	2001      	movs	r0, #1
    d70a:	e000      	b.n	d70e <flash_map_area_overlaps+0x46>
            }
        }
    }

    return false;
    d70c:	2000      	movs	r0, #0
}
    d70e:	bc30      	pop	{r4, r5}
    d710:	4770      	bx	lr
    return false;
    d712:	2000      	movs	r0, #0
}
    d714:	4770      	bx	lr
    d716:	bf00      	nop
    d718:	20002254 	.word	0x20002254
    d71c:	20002250 	.word	0x20002250

0000d720 <flash_map_add_new_dflt_areas>:
 * Adds areas from the hardcoded flash map that aren't present in, and don't
 * overlap with, the manufacturing flash map.
 */
static void
flash_map_add_new_dflt_areas(void)
{
    d720:	b570      	push	{r4, r5, r6, lr}

    const struct flash_area *dflt_area;
    struct flash_area *dst_area;
    int i;
    
    for (i = 0; i < num_dflt_entries; i++) {
    d722:	2400      	movs	r4, #0
    d724:	e00a      	b.n	d73c <flash_map_add_new_dflt_areas+0x1c>
            /* Default flash map contains a new entry. */
            if (flash_map_entries >= MYNEWT_VAL(FLASH_MAP_MAX_AREAS)) {
                DFLT_LOG_DEBUG("failed to add default flash area: "
                               "no room: id=%d",
                               dflt_area->fa_id);
                DEBUG_PANIC();
    d726:	f7fe fd41 	bl	c1ac <hal_debugger_connected>
    d72a:	b100      	cbz	r0, d72e <flash_map_add_new_dflt_areas+0xe>
    d72c:	be01      	bkpt	0x0001
    d72e:	2300      	movs	r3, #0
    d730:	461a      	mov	r2, r3
    d732:	4619      	mov	r1, r3
    d734:	4618      	mov	r0, r3
    d736:	f7ff fe19 	bl	d36c <__assert_func>
    for (i = 0; i < num_dflt_entries; i++) {
    d73a:	3401      	adds	r4, #1
    d73c:	2c05      	cmp	r4, #5
    d73e:	dc26      	bgt.n	d78e <flash_map_add_new_dflt_areas+0x6e>
        dflt_area = &sysflash_map_dflt[i];
    d740:	0063      	lsls	r3, r4, #1
    d742:	4423      	add	r3, r4
    d744:	009a      	lsls	r2, r3, #2
    d746:	4b12      	ldr	r3, [pc, #72]	; (d790 <flash_map_add_new_dflt_areas+0x70>)
    d748:	18d6      	adds	r6, r2, r3
        if (flash_area_find_idx(dflt_area->fa_id) == -1) {
    d74a:	5c98      	ldrb	r0, [r3, r2]
    d74c:	f7ff ff9e 	bl	d68c <flash_area_find_idx>
    d750:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    d754:	d1f1      	bne.n	d73a <flash_map_add_new_dflt_areas+0x1a>
            if (flash_map_entries >= MYNEWT_VAL(FLASH_MAP_MAX_AREAS)) {
    d756:	4b0f      	ldr	r3, [pc, #60]	; (d794 <flash_map_add_new_dflt_areas+0x74>)
    d758:	681d      	ldr	r5, [r3, #0]
    d75a:	2d09      	cmp	r5, #9
    d75c:	dce3      	bgt.n	d726 <flash_map_add_new_dflt_areas+0x6>
                return;
            } 

            /* Add the default entry if it doesn't cause any overlaps. */
            if (flash_map_area_overlaps(dflt_area)) {
    d75e:	4630      	mov	r0, r6
    d760:	f7ff ffb2 	bl	d6c8 <flash_map_area_overlaps>
    d764:	2800      	cmp	r0, #0
    d766:	d1e8      	bne.n	d73a <flash_map_add_new_dflt_areas+0x1a>
                DFLT_LOG_DEBUG("failed to add default flash area: "
                               "overlap: id=%d",
                               dflt_area->fa_id);
            } else {
                /* Cast away const. */
                dst_area = (struct flash_area *) &flash_map[flash_map_entries];
    d768:	4b0b      	ldr	r3, [pc, #44]	; (d798 <flash_map_add_new_dflt_areas+0x78>)
    d76a:	681b      	ldr	r3, [r3, #0]
    d76c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    d770:	00aa      	lsls	r2, r5, #2
    d772:	4413      	add	r3, r2

                *dst_area = *dflt_area;
    d774:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    d778:	0091      	lsls	r1, r2, #2
    d77a:	4a05      	ldr	r2, [pc, #20]	; (d790 <flash_map_add_new_dflt_areas+0x70>)
    d77c:	440a      	add	r2, r1
    d77e:	ca07      	ldmia	r2, {r0, r1, r2}
    d780:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                flash_map_entries++;
    d784:	4a03      	ldr	r2, [pc, #12]	; (d794 <flash_map_add_new_dflt_areas+0x74>)
    d786:	6813      	ldr	r3, [r2, #0]
    d788:	3301      	adds	r3, #1
    d78a:	6013      	str	r3, [r2, #0]
    d78c:	e7d5      	b.n	d73a <flash_map_add_new_dflt_areas+0x1a>
            }
        }
    }
}
    d78e:	bd70      	pop	{r4, r5, r6, pc}
    d790:	0000ec04 	.word	0x0000ec04
    d794:	20002254 	.word	0x20002254
    d798:	20002250 	.word	0x20002250

0000d79c <flash_map_read_mfg>:
{
    d79c:	b570      	push	{r4, r5, r6, lr}
    d79e:	b086      	sub	sp, #24
    d7a0:	4605      	mov	r5, r0
    d7a2:	460e      	mov	r6, r1
    d7a4:	4614      	mov	r4, r2
    *out_num_areas = 0;
    d7a6:	2300      	movs	r3, #0
    d7a8:	6013      	str	r3, [r2, #0]
    mfg_init();
    d7aa:	f000 f9b7 	bl	db1c <mfg_init>
    mfg_open(&reader);
    d7ae:	a801      	add	r0, sp, #4
    d7b0:	f000 f9d4 	bl	db5c <mfg_open>
        if (*out_num_areas >= max_areas) {
    d7b4:	6823      	ldr	r3, [r4, #0]
    d7b6:	42ab      	cmp	r3, r5
    d7b8:	da29      	bge.n	d80e <flash_map_read_mfg+0x72>
        rc = mfg_seek_next_with_type(&reader, MFG_META_TLV_TYPE_FLASH_AREA);
    d7ba:	2102      	movs	r1, #2
    d7bc:	a801      	add	r0, sp, #4
    d7be:	f000 f996 	bl	daee <mfg_seek_next_with_type>
    d7c2:	4603      	mov	r3, r0
        switch (rc) {
    d7c4:	f110 0f0f 	cmn.w	r0, #15
    d7c8:	d003      	beq.n	d7d2 <flash_map_read_mfg+0x36>
    d7ca:	b120      	cbz	r0, d7d6 <flash_map_read_mfg+0x3a>
}
    d7cc:	4618      	mov	r0, r3
    d7ce:	b006      	add	sp, #24
    d7d0:	bd70      	pop	{r4, r5, r6, pc}
            return 0;
    d7d2:	2300      	movs	r3, #0
    d7d4:	e7fa      	b.n	d7cc <flash_map_read_mfg+0x30>
        rc = mfg_read_tlv_flash_area(&reader, &meta_flash_area);
    d7d6:	a903      	add	r1, sp, #12
    d7d8:	a801      	add	r0, sp, #4
    d7da:	f000 f995 	bl	db08 <mfg_read_tlv_flash_area>
        if (rc != 0) {
    d7de:	4603      	mov	r3, r0
    d7e0:	2800      	cmp	r0, #0
    d7e2:	d1f3      	bne.n	d7cc <flash_map_read_mfg+0x30>
        fap = out_areas + *out_num_areas;
    d7e4:	6823      	ldr	r3, [r4, #0]
    d7e6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    d7ea:	009a      	lsls	r2, r3, #2
    d7ec:	18b3      	adds	r3, r6, r2
        fap->fa_id = meta_flash_area.area_id;
    d7ee:	f89d 100c 	ldrb.w	r1, [sp, #12]
    d7f2:	54b1      	strb	r1, [r6, r2]
        fap->fa_device_id = meta_flash_area.device_id;
    d7f4:	f89d 200d 	ldrb.w	r2, [sp, #13]
    d7f8:	705a      	strb	r2, [r3, #1]
        fap->fa_off = meta_flash_area.offset;
    d7fa:	f8dd 200e 	ldr.w	r2, [sp, #14]
    d7fe:	605a      	str	r2, [r3, #4]
        fap->fa_size = meta_flash_area.size;
    d800:	f8dd 2012 	ldr.w	r2, [sp, #18]
    d804:	609a      	str	r2, [r3, #8]
        (*out_num_areas)++;
    d806:	6823      	ldr	r3, [r4, #0]
    d808:	3301      	adds	r3, #1
    d80a:	6023      	str	r3, [r4, #0]
        if (*out_num_areas >= max_areas) {
    d80c:	e7d2      	b.n	d7b4 <flash_map_read_mfg+0x18>
            return -1;
    d80e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d812:	e7db      	b.n	d7cc <flash_map_read_mfg+0x30>

0000d814 <flash_area_open>:
{
    d814:	b538      	push	{r3, r4, r5, lr}
    if (flash_map == NULL) {
    d816:	4b0b      	ldr	r3, [pc, #44]	; (d844 <flash_area_open+0x30>)
    d818:	681c      	ldr	r4, [r3, #0]
    d81a:	b164      	cbz	r4, d836 <flash_area_open+0x22>
    d81c:	460d      	mov	r5, r1
    idx = flash_area_find_idx(id);
    d81e:	f7ff ff35 	bl	d68c <flash_area_find_idx>
    if (idx == -1) {
    d822:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    d826:	d009      	beq.n	d83c <flash_area_open+0x28>
    *fap = &flash_map[idx];
    d828:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    d82c:	0083      	lsls	r3, r0, #2
    d82e:	441c      	add	r4, r3
    d830:	602c      	str	r4, [r5, #0]
    return 0;
    d832:	2000      	movs	r0, #0
}
    d834:	bd38      	pop	{r3, r4, r5, pc}
        return SYS_EACCES;
    d836:	f06f 0006 	mvn.w	r0, #6
    d83a:	e7fb      	b.n	d834 <flash_area_open+0x20>
        return SYS_ENOENT;
    d83c:	f06f 0003 	mvn.w	r0, #3
    d840:	e7f8      	b.n	d834 <flash_area_open+0x20>
    d842:	bf00      	nop
    d844:	20002250 	.word	0x20002250

0000d848 <flash_area_read>:
{
    d848:	b538      	push	{r3, r4, r5, lr}
    if (off > fa->fa_size || off + len > fa->fa_size) {
    d84a:	6884      	ldr	r4, [r0, #8]
    d84c:	428c      	cmp	r4, r1
    d84e:	d308      	bcc.n	d862 <flash_area_read+0x1a>
    d850:	18cd      	adds	r5, r1, r3
    d852:	42ac      	cmp	r4, r5
    d854:	d308      	bcc.n	d868 <flash_area_read+0x20>
    return hal_flash_read(fa->fa_device_id, fa->fa_off + off, dst, len);
    d856:	6844      	ldr	r4, [r0, #4]
    d858:	4421      	add	r1, r4
    d85a:	7840      	ldrb	r0, [r0, #1]
    d85c:	f000 fa05 	bl	dc6a <hal_flash_read>
}
    d860:	bd38      	pop	{r3, r4, r5, pc}
        return -1;
    d862:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    d866:	e7fb      	b.n	d860 <flash_area_read+0x18>
    d868:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    d86c:	e7f8      	b.n	d860 <flash_area_read+0x18>
	...

0000d870 <flash_map_init>:

void
flash_map_init(void)
{
    d870:	b510      	push	{r4, lr}
    d872:	b084      	sub	sp, #16

    int num_areas;
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
    d874:	4b1a      	ldr	r3, [pc, #104]	; (d8e0 <flash_map_init+0x70>)
    d876:	781b      	ldrb	r3, [r3, #0]
    d878:	b193      	cbz	r3, d8a0 <flash_map_init+0x30>

    rc = hal_flash_init();
    d87a:	f000 f9e2 	bl	dc42 <hal_flash_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
    d87e:	b9c8      	cbnz	r0, d8b4 <flash_map_init+0x44>
     *    In particular, a FLASH_AREA_BOOTLOADER entry is required for the boot
     *    MMR, as well as an entry for each extended MMR.
     * 2. If we fail to read the flash map from the MMRs, the system continues
     *    to use the default flash map.
     */
    flash_map = sysflash_map_dflt;
    d880:	4b18      	ldr	r3, [pc, #96]	; (d8e4 <flash_map_init+0x74>)
    d882:	4a19      	ldr	r2, [pc, #100]	; (d8e8 <flash_map_init+0x78>)
    d884:	601a      	str	r2, [r3, #0]
    flash_map_entries = sizeof sysflash_map_dflt / sizeof sysflash_map_dflt[0];
    d886:	4b19      	ldr	r3, [pc, #100]	; (d8ec <flash_map_init+0x7c>)
    d888:	2206      	movs	r2, #6
    d88a:	601a      	str	r2, [r3, #0]

    /* Attempt to read the flash map from the manufacturing meta regions.  On
     * success, use the new flash map instead of the default hardcoded one.
     */
    rc = flash_map_read_mfg(sizeof mfg_areas / sizeof mfg_areas[0],
    d88c:	aa03      	add	r2, sp, #12
    d88e:	4918      	ldr	r1, [pc, #96]	; (d8f0 <flash_map_init+0x80>)
    d890:	200a      	movs	r0, #10
    d892:	f7ff ff83 	bl	d79c <flash_map_read_mfg>
                            mfg_areas, &num_areas);
    if (rc != 0 || num_areas == 0) {
    d896:	b908      	cbnz	r0, d89c <flash_map_init+0x2c>
    d898:	9b03      	ldr	r3, [sp, #12]
    d89a:	b9c3      	cbnz	r3, d8ce <flash_map_init+0x5e>
    /* The hardcoded flash map may contain new areas that aren't present in the
     * manufacturing flash map.  Try including them if they don't overlap with
     * any mfg areas.
     */
    flash_map_add_new_dflt_areas();
}
    d89c:	b004      	add	sp, #16
    d89e:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
    d8a0:	f7fe fc84 	bl	c1ac <hal_debugger_connected>
    d8a4:	b100      	cbz	r0, d8a8 <flash_map_init+0x38>
    d8a6:	be01      	bkpt	0x0001
    d8a8:	2300      	movs	r3, #0
    d8aa:	461a      	mov	r2, r3
    d8ac:	4619      	mov	r1, r3
    d8ae:	4618      	mov	r0, r3
    d8b0:	f7ff fd5c 	bl	d36c <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
    d8b4:	f7fe fc7a 	bl	c1ac <hal_debugger_connected>
    d8b8:	b100      	cbz	r0, d8bc <flash_map_init+0x4c>
    d8ba:	be01      	bkpt	0x0001
    d8bc:	2000      	movs	r0, #0
    d8be:	9000      	str	r0, [sp, #0]
    d8c0:	4b0c      	ldr	r3, [pc, #48]	; (d8f4 <flash_map_init+0x84>)
    d8c2:	681c      	ldr	r4, [r3, #0]
    d8c4:	4603      	mov	r3, r0
    d8c6:	4602      	mov	r2, r0
    d8c8:	4601      	mov	r1, r0
    d8ca:	47a0      	blx	r4
    d8cc:	e7d8      	b.n	d880 <flash_map_init+0x10>
    flash_map = mfg_areas;
    d8ce:	4a05      	ldr	r2, [pc, #20]	; (d8e4 <flash_map_init+0x74>)
    d8d0:	4907      	ldr	r1, [pc, #28]	; (d8f0 <flash_map_init+0x80>)
    d8d2:	6011      	str	r1, [r2, #0]
    flash_map_entries = num_areas;
    d8d4:	4a05      	ldr	r2, [pc, #20]	; (d8ec <flash_map_init+0x7c>)
    d8d6:	6013      	str	r3, [r2, #0]
    flash_map_add_new_dflt_areas();
    d8d8:	f7ff ff22 	bl	d720 <flash_map_add_new_dflt_areas>
    d8dc:	e7de      	b.n	d89c <flash_map_init+0x2c>
    d8de:	bf00      	nop
    d8e0:	20002258 	.word	0x20002258
    d8e4:	20002250 	.word	0x20002250
    d8e8:	0000ec04 	.word	0x0000ec04
    d8ec:	20002254 	.word	0x20002254
    d8f0:	20002064 	.word	0x20002064
    d8f4:	20000128 	.word	0x20000128

0000d8f8 <modlog_init>:

#else /* LOG_FULL */

void
modlog_init(void)
{ }
    d8f8:	4770      	bx	lr
	...

0000d8fc <mfg_seek_next_aux>:
 *                                  for reading.
 *                              Other MFG error code on failure.
 */
static int
mfg_seek_next_aux(struct mfg_reader *reader)
{
    d8fc:	b530      	push	{r4, r5, lr}
    d8fe:	b083      	sub	sp, #12
    const struct flash_area *fap;
    const struct mfg_mmr *mmr;
    int rc;

    if (reader->mmr_idx >= mfg_num_mmrs) {
    d900:	7885      	ldrb	r5, [r0, #2]
    d902:	4b21      	ldr	r3, [pc, #132]	; (d988 <mfg_seek_next_aux+0x8c>)
    d904:	681b      	ldr	r3, [r3, #0]
    d906:	429d      	cmp	r5, r3
    d908:	da32      	bge.n	d970 <mfg_seek_next_aux+0x74>
    d90a:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }

    mmr = &mfg_mmrs[reader->mmr_idx];

    rc = flash_area_open(mmr->area_id, &fap);
    d90c:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    d910:	0093      	lsls	r3, r2, #2
    d912:	a901      	add	r1, sp, #4
    d914:	4a1d      	ldr	r2, [pc, #116]	; (d98c <mfg_seek_next_aux+0x90>)
    d916:	5cd0      	ldrb	r0, [r2, r3]
    d918:	f7ff ff7c 	bl	d814 <flash_area_open>
    if (rc != 0) {
    d91c:	bb58      	cbnz	r0, d976 <mfg_seek_next_aux+0x7a>
        return SYS_EIO;
    }

    if (reader->offset == 0) {
    d91e:	6862      	ldr	r2, [r4, #4]
    d920:	b9c2      	cbnz	r2, d954 <mfg_seek_next_aux+0x58>
        /* First seek; advance to the start of the MMR. */
        reader->offset = mmr->offset;
    d922:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    d926:	00aa      	lsls	r2, r5, #2
    d928:	4b18      	ldr	r3, [pc, #96]	; (d98c <mfg_seek_next_aux+0x90>)
    d92a:	4413      	add	r3, r2
    d92c:	685b      	ldr	r3, [r3, #4]
    d92e:	6063      	str	r3, [r4, #4]
    } else {
        /* Follow-up seek; skip the current TLV. */
        reader->offset += MFG_META_TLV_SZ + reader->cur_tlv.size;
    }

    if (reader->offset >= fap->fa_size - MFG_META_FOOTER_SZ) {
    d930:	6861      	ldr	r1, [r4, #4]
    d932:	9801      	ldr	r0, [sp, #4]
    d934:	6883      	ldr	r3, [r0, #8]
    d936:	3b08      	subs	r3, #8
    d938:	4299      	cmp	r1, r3
    d93a:	d310      	bcc.n	d95e <mfg_seek_next_aux+0x62>
        /* Reached end of the MMR; advance to the next MMR if one exists. */
        if (reader->mmr_idx + 1 >= mfg_num_mmrs) {
    d93c:	78a3      	ldrb	r3, [r4, #2]
    d93e:	1c59      	adds	r1, r3, #1
    d940:	4a11      	ldr	r2, [pc, #68]	; (d988 <mfg_seek_next_aux+0x8c>)
    d942:	6812      	ldr	r2, [r2, #0]
    d944:	4291      	cmp	r1, r2
    d946:	da19      	bge.n	d97c <mfg_seek_next_aux+0x80>
            rc = SYS_EDONE;
        } else {
            reader->offset = 0;
    d948:	2200      	movs	r2, #0
    d94a:	6062      	str	r2, [r4, #4]
            reader->mmr_idx++;
    d94c:	70a1      	strb	r1, [r4, #2]
            rc = SYS_EAGAIN;
    d94e:	f06f 0305 	mvn.w	r3, #5
    d952:	e015      	b.n	d980 <mfg_seek_next_aux+0x84>
        reader->offset += MFG_META_TLV_SZ + reader->cur_tlv.size;
    d954:	7863      	ldrb	r3, [r4, #1]
    d956:	4413      	add	r3, r2
    d958:	3302      	adds	r3, #2
    d95a:	6063      	str	r3, [r4, #4]
    d95c:	e7e8      	b.n	d930 <mfg_seek_next_aux+0x34>
        }
        goto done;
    }

    /* Read current TLV header. */
    rc = flash_area_read(fap, reader->offset, &reader->cur_tlv,
    d95e:	2302      	movs	r3, #2
    d960:	4622      	mov	r2, r4
    d962:	f7ff ff71 	bl	d848 <flash_area_read>
                         MFG_META_TLV_SZ);
    if (rc != 0) {
    d966:	4603      	mov	r3, r0
    d968:	b150      	cbz	r0, d980 <mfg_seek_next_aux+0x84>
        rc = SYS_EIO;
    d96a:	f06f 0304 	mvn.w	r3, #4
    d96e:	e007      	b.n	d980 <mfg_seek_next_aux+0x84>
        return SYS_EINVAL;
    d970:	f06f 0301 	mvn.w	r3, #1
    d974:	e004      	b.n	d980 <mfg_seek_next_aux+0x84>
        return SYS_EIO;
    d976:	f06f 0304 	mvn.w	r3, #4
    d97a:	e001      	b.n	d980 <mfg_seek_next_aux+0x84>
            rc = SYS_EDONE;
    d97c:	f06f 030e 	mvn.w	r3, #14
    }

done:
    flash_area_close(fap);
    return rc;
}
    d980:	4618      	mov	r0, r3
    d982:	b003      	add	sp, #12
    d984:	bd30      	pop	{r4, r5, pc}
    d986:	bf00      	nop
    d988:	200020f8 	.word	0x200020f8
    d98c:	200020e0 	.word	0x200020e0

0000d990 <mfg_read_mmr>:
/**
 * Reads an MMR from the end of the specified flash area.
 */
static int
mfg_read_mmr(uint8_t area_id, struct mfg_mmr *out_mmr)
{
    d990:	b530      	push	{r4, r5, lr}
    d992:	b085      	sub	sp, #20
    d994:	4605      	mov	r5, r0
    d996:	460c      	mov	r4, r1
    const struct flash_area *fap;
    struct mfg_meta_footer ftr;
    int rc;

    rc = flash_area_open(area_id, &fap);
    d998:	a903      	add	r1, sp, #12
    d99a:	f7ff ff3b 	bl	d814 <flash_area_open>
    if (rc != 0) {
    d99e:	b9e8      	cbnz	r0, d9dc <mfg_read_mmr+0x4c>
        return SYS_EIO;
    }

    /* Read the MMR footer. */
    rc = flash_area_read(fap, fap->fa_size - sizeof ftr, &ftr, sizeof ftr);
    d9a0:	9803      	ldr	r0, [sp, #12]
    d9a2:	6881      	ldr	r1, [r0, #8]
    d9a4:	2308      	movs	r3, #8
    d9a6:	aa01      	add	r2, sp, #4
    d9a8:	3908      	subs	r1, #8
    d9aa:	f7ff ff4d 	bl	d848 <flash_area_read>
    flash_area_close(fap);

    if (rc != 0) {
    d9ae:	4601      	mov	r1, r0
    d9b0:	b9b8      	cbnz	r0, d9e2 <mfg_read_mmr+0x52>
        return SYS_EIO;
    }

    if (ftr.magic != MFG_META_MAGIC) {
    d9b2:	9a02      	ldr	r2, [sp, #8]
    d9b4:	4b11      	ldr	r3, [pc, #68]	; (d9fc <mfg_read_mmr+0x6c>)
    d9b6:	429a      	cmp	r2, r3
    d9b8:	d116      	bne.n	d9e8 <mfg_read_mmr+0x58>
        return SYS_ENODEV;
    }

    if (ftr.version != MFG_META_VERSION) {
    d9ba:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d9be:	2b02      	cmp	r3, #2
    d9c0:	d115      	bne.n	d9ee <mfg_read_mmr+0x5e>
        return SYS_ENOTSUP;
    }

    if (ftr.size > fap->fa_size) {
    d9c2:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    d9c6:	9b03      	ldr	r3, [sp, #12]
    d9c8:	689b      	ldr	r3, [r3, #8]
    d9ca:	429a      	cmp	r2, r3
    d9cc:	d812      	bhi.n	d9f4 <mfg_read_mmr+0x64>
        return SYS_ENODEV;
    }

    *out_mmr = (struct mfg_mmr) {
        .area_id = area_id,
        .offset = fap->fa_size - ftr.size,
    d9ce:	1a9b      	subs	r3, r3, r2
    *out_mmr = (struct mfg_mmr) {
    d9d0:	7025      	strb	r5, [r4, #0]
    d9d2:	6063      	str	r3, [r4, #4]
    d9d4:	60a2      	str	r2, [r4, #8]
        .size = ftr.size,
    };

    return 0;
}
    d9d6:	4608      	mov	r0, r1
    d9d8:	b005      	add	sp, #20
    d9da:	bd30      	pop	{r4, r5, pc}
        return SYS_EIO;
    d9dc:	f06f 0104 	mvn.w	r1, #4
    d9e0:	e7f9      	b.n	d9d6 <mfg_read_mmr+0x46>
        return SYS_EIO;
    d9e2:	f06f 0104 	mvn.w	r1, #4
    d9e6:	e7f6      	b.n	d9d6 <mfg_read_mmr+0x46>
        return SYS_ENODEV;
    d9e8:	f06f 0108 	mvn.w	r1, #8
    d9ec:	e7f3      	b.n	d9d6 <mfg_read_mmr+0x46>
        return SYS_ENOTSUP;
    d9ee:	f06f 010b 	mvn.w	r1, #11
    d9f2:	e7f0      	b.n	d9d6 <mfg_read_mmr+0x46>
        return SYS_ENODEV;
    d9f4:	f06f 0108 	mvn.w	r1, #8
    d9f8:	e7ed      	b.n	d9d6 <mfg_read_mmr+0x46>
    d9fa:	bf00      	nop
    d9fc:	3bb2a269 	.word	0x3bb2a269

0000da00 <mfg_read_next_mmr>:
 * Reads an MMR from the end of the specified flash area.  On success, the
 * global MMR list is populated with the result for subsequent reading.
 */
static int
mfg_read_next_mmr(uint8_t area_id)
{
    da00:	b508      	push	{r3, lr}
    int rc;
    int i;

    /* Detect if this MMR has already been read. */
    for (i = 0; i < mfg_num_mmrs; i++) {
    da02:	2300      	movs	r3, #0
    da04:	4a11      	ldr	r2, [pc, #68]	; (da4c <mfg_read_next_mmr+0x4c>)
    da06:	6812      	ldr	r2, [r2, #0]
    da08:	429a      	cmp	r2, r3
    da0a:	dd08      	ble.n	da1e <mfg_read_next_mmr+0x1e>
        if (mfg_mmrs[i].area_id == area_id) {
    da0c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    da10:	008a      	lsls	r2, r1, #2
    da12:	490f      	ldr	r1, [pc, #60]	; (da50 <mfg_read_next_mmr+0x50>)
    da14:	5c8a      	ldrb	r2, [r1, r2]
    da16:	4282      	cmp	r2, r0
    da18:	d011      	beq.n	da3e <mfg_read_next_mmr+0x3e>
    for (i = 0; i < mfg_num_mmrs; i++) {
    da1a:	3301      	adds	r3, #1
    da1c:	e7f2      	b.n	da04 <mfg_read_next_mmr+0x4>
            return SYS_EALREADY;
        }
    }

    if (mfg_num_mmrs >= MYNEWT_VAL(MFG_MAX_MMRS)) {
    da1e:	2a01      	cmp	r2, #1
    da20:	dc11      	bgt.n	da46 <mfg_read_next_mmr+0x46>
        return SYS_ENOMEM;
    }

    rc = mfg_read_mmr(area_id, &mfg_mmrs[mfg_num_mmrs]);
    da22:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    da26:	0093      	lsls	r3, r2, #2
    da28:	4909      	ldr	r1, [pc, #36]	; (da50 <mfg_read_next_mmr+0x50>)
    da2a:	4419      	add	r1, r3
    da2c:	f7ff ffb0 	bl	d990 <mfg_read_mmr>
    if (rc != 0) {
    da30:	4603      	mov	r3, r0
    da32:	b930      	cbnz	r0, da42 <mfg_read_next_mmr+0x42>
        return rc;
    }

    mfg_num_mmrs++;
    da34:	4905      	ldr	r1, [pc, #20]	; (da4c <mfg_read_next_mmr+0x4c>)
    da36:	680a      	ldr	r2, [r1, #0]
    da38:	3201      	adds	r2, #1
    da3a:	600a      	str	r2, [r1, #0]
    return 0;
    da3c:	e001      	b.n	da42 <mfg_read_next_mmr+0x42>
            return SYS_EALREADY;
    da3e:	f06f 030a 	mvn.w	r3, #10
}
    da42:	4618      	mov	r0, r3
    da44:	bd08      	pop	{r3, pc}
        return SYS_ENOMEM;
    da46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    da4a:	e7fa      	b.n	da42 <mfg_read_next_mmr+0x42>
    da4c:	200020f8 	.word	0x200020f8
    da50:	200020e0 	.word	0x200020e0

0000da54 <mfg_open_flash_area>:
{
    da54:	b508      	push	{r3, lr}
    assert(reader->mmr_idx < mfg_num_mmrs);
    da56:	7883      	ldrb	r3, [r0, #2]
    da58:	4a0d      	ldr	r2, [pc, #52]	; (da90 <mfg_open_flash_area+0x3c>)
    da5a:	6812      	ldr	r2, [r2, #0]
    da5c:	4293      	cmp	r3, r2
    da5e:	da0a      	bge.n	da76 <mfg_open_flash_area+0x22>
    rc = flash_area_open(mmr->area_id, fap);
    da60:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    da64:	009a      	lsls	r2, r3, #2
    da66:	4b0b      	ldr	r3, [pc, #44]	; (da94 <mfg_open_flash_area+0x40>)
    da68:	5c98      	ldrb	r0, [r3, r2]
    da6a:	f7ff fed3 	bl	d814 <flash_area_open>
    if (rc != 0) {
    da6e:	4603      	mov	r3, r0
    da70:	b958      	cbnz	r0, da8a <mfg_open_flash_area+0x36>
}
    da72:	4618      	mov	r0, r3
    da74:	bd08      	pop	{r3, pc}
    assert(reader->mmr_idx < mfg_num_mmrs);
    da76:	f7fe fb99 	bl	c1ac <hal_debugger_connected>
    da7a:	b100      	cbz	r0, da7e <mfg_open_flash_area+0x2a>
    da7c:	be01      	bkpt	0x0001
    da7e:	2300      	movs	r3, #0
    da80:	461a      	mov	r2, r3
    da82:	4619      	mov	r1, r3
    da84:	4618      	mov	r0, r3
    da86:	f7ff fc71 	bl	d36c <__assert_func>
        return SYS_EIO;
    da8a:	f06f 0304 	mvn.w	r3, #4
    da8e:	e7f0      	b.n	da72 <mfg_open_flash_area+0x1e>
    da90:	200020f8 	.word	0x200020f8
    da94:	200020e0 	.word	0x200020e0

0000da98 <mfg_read_tlv_body>:
{
    da98:	b570      	push	{r4, r5, r6, lr}
    da9a:	b082      	sub	sp, #8
    da9c:	4606      	mov	r6, r0
    da9e:	460c      	mov	r4, r1
    daa0:	4615      	mov	r5, r2
    rc = mfg_open_flash_area(reader, &fap);
    daa2:	a901      	add	r1, sp, #4
    daa4:	f7ff ffd6 	bl	da54 <mfg_open_flash_area>
    if (rc != 0) {
    daa8:	4603      	mov	r3, r0
    daaa:	b110      	cbz	r0, dab2 <mfg_read_tlv_body+0x1a>
}
    daac:	4618      	mov	r0, r3
    daae:	b002      	add	sp, #8
    dab0:	bd70      	pop	{r4, r5, r6, pc}
    memset(dst, 0, max_size);
    dab2:	462a      	mov	r2, r5
    dab4:	2100      	movs	r1, #0
    dab6:	4620      	mov	r0, r4
    dab8:	f7ff fdc3 	bl	d642 <memset>
    read_sz = min(max_size, reader->cur_tlv.size);
    dabc:	7873      	ldrb	r3, [r6, #1]
    rc = flash_area_read(fap, reader->offset + MFG_META_TLV_SZ, dst, read_sz);
    dabe:	6871      	ldr	r1, [r6, #4]
    dac0:	42ab      	cmp	r3, r5
    dac2:	bfa8      	it	ge
    dac4:	462b      	movge	r3, r5
    dac6:	4622      	mov	r2, r4
    dac8:	3102      	adds	r1, #2
    daca:	9801      	ldr	r0, [sp, #4]
    dacc:	f7ff febc 	bl	d848 <flash_area_read>
    if (rc != 0) {
    dad0:	4603      	mov	r3, r0
    dad2:	2800      	cmp	r0, #0
    dad4:	d0ea      	beq.n	daac <mfg_read_tlv_body+0x14>
        return SYS_EIO;
    dad6:	f06f 0304 	mvn.w	r3, #4
    dada:	e7e7      	b.n	daac <mfg_read_tlv_body+0x14>

0000dadc <mfg_seek_next>:
{
    dadc:	b510      	push	{r4, lr}
    dade:	4604      	mov	r4, r0
        rc = mfg_seek_next_aux(reader);
    dae0:	4620      	mov	r0, r4
    dae2:	f7ff ff0b 	bl	d8fc <mfg_seek_next_aux>
    } while (rc == SYS_EAGAIN);
    dae6:	f110 0f06 	cmn.w	r0, #6
    daea:	d0f9      	beq.n	dae0 <mfg_seek_next+0x4>
}
    daec:	bd10      	pop	{r4, pc}

0000daee <mfg_seek_next_with_type>:
{
    daee:	b538      	push	{r3, r4, r5, lr}
    daf0:	4604      	mov	r4, r0
    daf2:	460d      	mov	r5, r1
        rc = mfg_seek_next(reader);
    daf4:	4620      	mov	r0, r4
    daf6:	f7ff fff1 	bl	dadc <mfg_seek_next>
        if (rc != 0) {
    dafa:	4602      	mov	r2, r0
    dafc:	b910      	cbnz	r0, db04 <mfg_seek_next_with_type+0x16>
        if (reader->cur_tlv.type == type) {
    dafe:	7823      	ldrb	r3, [r4, #0]
    db00:	42ab      	cmp	r3, r5
    db02:	d1f7      	bne.n	daf4 <mfg_seek_next_with_type+0x6>
}
    db04:	4610      	mov	r0, r2
    db06:	bd38      	pop	{r3, r4, r5, pc}

0000db08 <mfg_read_tlv_flash_area>:
{
    db08:	b508      	push	{r3, lr}
    return mfg_read_tlv_body(reader, out_mfa, sizeof *out_mfa);
    db0a:	220a      	movs	r2, #10
    db0c:	f7ff ffc4 	bl	da98 <mfg_read_tlv_body>
}
    db10:	bd08      	pop	{r3, pc}

0000db12 <mfg_read_tlv_mmr_ref>:
{
    db12:	b508      	push	{r3, lr}
    return mfg_read_tlv_body(reader, out_mr, sizeof *out_mr);
    db14:	2201      	movs	r2, #1
    db16:	f7ff ffbf 	bl	da98 <mfg_read_tlv_body>
}
    db1a:	bd08      	pop	{r3, pc}

0000db1c <mfg_init>:
 * called before any TLVs can be read.  No-op if this function has already
 * executed successfully.
 */
void
mfg_init(void)
{
    db1c:	b508      	push	{r3, lr}
    int rc;

    if (mfg_initialized) {
    db1e:	4b0d      	ldr	r3, [pc, #52]	; (db54 <mfg_init+0x38>)
    db20:	781b      	ldrb	r3, [r3, #0]
    db22:	b94b      	cbnz	r3, db38 <mfg_init+0x1c>
        return;
    }
    mfg_initialized = true;
    db24:	4b0b      	ldr	r3, [pc, #44]	; (db54 <mfg_init+0x38>)
    db26:	2201      	movs	r2, #1
    db28:	701a      	strb	r2, [r3, #0]

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
    db2a:	4b0b      	ldr	r3, [pc, #44]	; (db58 <mfg_init+0x3c>)
    db2c:	781b      	ldrb	r3, [r3, #0]
    db2e:	b123      	cbz	r3, db3a <mfg_init+0x1e>

    /* Read the first MMR from the boot loader area. */
    rc = mfg_read_next_mmr(FLASH_AREA_BOOTLOADER);
    db30:	2000      	movs	r0, #0
    db32:	f7ff ff65 	bl	da00 <mfg_read_next_mmr>
    if (rc != 0) {
    db36:	b150      	cbz	r0, db4e <mfg_init+0x32>

    return;

err:
    MFG_LOG_ERROR("failed to read MMRs: rc=%d", rc);
}
    db38:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
    db3a:	f7fe fb37 	bl	c1ac <hal_debugger_connected>
    db3e:	b100      	cbz	r0, db42 <mfg_init+0x26>
    db40:	be01      	bkpt	0x0001
    db42:	2300      	movs	r3, #0
    db44:	461a      	mov	r2, r3
    db46:	4619      	mov	r1, r3
    db48:	4618      	mov	r0, r3
    db4a:	f7ff fc0f 	bl	d36c <__assert_func>
    rc = mfg_read_mmr_refs();
    db4e:	f000 f80d 	bl	db6c <mfg_read_mmr_refs>
err:
    db52:	e7f1      	b.n	db38 <mfg_init+0x1c>
    db54:	200020dc 	.word	0x200020dc
    db58:	20002258 	.word	0x20002258

0000db5c <mfg_open>:
{
    db5c:	b510      	push	{r4, lr}
    db5e:	4604      	mov	r4, r0
    mfg_init();
    db60:	f7ff ffdc 	bl	db1c <mfg_init>
    *out_reader = (struct mfg_reader) { 0 };
    db64:	2300      	movs	r3, #0
    db66:	6023      	str	r3, [r4, #0]
    db68:	6063      	str	r3, [r4, #4]
}
    db6a:	bd10      	pop	{r4, pc}

0000db6c <mfg_read_mmr_refs>:
{
    db6c:	b500      	push	{lr}
    db6e:	b085      	sub	sp, #20
    mfg_open(&reader);
    db70:	a801      	add	r0, sp, #4
    db72:	f7ff fff3 	bl	db5c <mfg_open>
        rc = mfg_seek_next_with_type(&reader, MFG_META_TLV_TYPE_MMR_REF);
    db76:	2104      	movs	r1, #4
    db78:	eb0d 0001 	add.w	r0, sp, r1
    db7c:	f7ff ffb7 	bl	daee <mfg_seek_next_with_type>
    db80:	4603      	mov	r3, r0
        switch (rc) {
    db82:	f110 0f0f 	cmn.w	r0, #15
    db86:	d004      	beq.n	db92 <mfg_read_mmr_refs+0x26>
    db88:	b128      	cbz	r0, db96 <mfg_read_mmr_refs+0x2a>
}
    db8a:	4618      	mov	r0, r3
    db8c:	b005      	add	sp, #20
    db8e:	f85d fb04 	ldr.w	pc, [sp], #4
            return 0;
    db92:	2300      	movs	r3, #0
    db94:	e7f9      	b.n	db8a <mfg_read_mmr_refs+0x1e>
        rc = mfg_read_tlv_mmr_ref(&reader, &mmr_ref);
    db96:	a903      	add	r1, sp, #12
    db98:	a801      	add	r0, sp, #4
    db9a:	f7ff ffba 	bl	db12 <mfg_read_tlv_mmr_ref>
        if (rc != 0) {
    db9e:	4603      	mov	r3, r0
    dba0:	2800      	cmp	r0, #0
    dba2:	d1f2      	bne.n	db8a <mfg_read_mmr_refs+0x1e>
        rc = mfg_read_next_mmr(mmr_ref.area_id);
    dba4:	f89d 000c 	ldrb.w	r0, [sp, #12]
    dba8:	f7ff ff2a 	bl	da00 <mfg_read_next_mmr>
        if (rc != 0 && rc != SYS_EALREADY) {
    dbac:	4603      	mov	r3, r0
    dbae:	2800      	cmp	r0, #0
    dbb0:	d0e1      	beq.n	db76 <mfg_read_mmr_refs+0xa>
    dbb2:	f110 0f0b 	cmn.w	r0, #11
    dbb6:	d0de      	beq.n	db76 <mfg_read_mmr_refs+0xa>
    dbb8:	e7e7      	b.n	db8a <mfg_read_mmr_refs+0x1e>

0000dbba <sysinit_dflt_panic_cb>:
#include "os/mynewt.h"

static void
sysinit_dflt_panic_cb(const char *file, int line, const char *func,
                      const char *expr, const char *msg)
{
    dbba:	b508      	push	{r3, lr}
    if (msg != NULL) {
        fprintf(stderr, "sysinit failure: %s\n", msg);
    }
#endif

    __assert_func(file, line, func, expr);
    dbbc:	f7ff fbd6 	bl	d36c <__assert_func>

0000dbc0 <sysinit_start>:
}

void
sysinit_start(void)
{
    sysinit_active = 1;
    dbc0:	4b01      	ldr	r3, [pc, #4]	; (dbc8 <sysinit_start+0x8>)
    dbc2:	2201      	movs	r2, #1
    dbc4:	701a      	strb	r2, [r3, #0]
}
    dbc6:	4770      	bx	lr
    dbc8:	20002258 	.word	0x20002258

0000dbcc <sysinit_end>:

void
sysinit_end(void)
{
    sysinit_active = 0;
    dbcc:	4b01      	ldr	r3, [pc, #4]	; (dbd4 <sysinit_end+0x8>)
    dbce:	2200      	movs	r2, #0
    dbd0:	701a      	strb	r2, [r3, #0]
}
    dbd2:	4770      	bx	lr
    dbd4:	20002258 	.word	0x20002258

0000dbd8 <mem_init_mbuf_pool>:

int
mem_init_mbuf_pool(void *mem, struct os_mempool *mempool,
                   struct os_mbuf_pool *mbuf_pool, int num_blocks,
                   int block_size, char *name)
{
    dbd8:	b570      	push	{r4, r5, r6, lr}
    dbda:	b082      	sub	sp, #8
    dbdc:	460c      	mov	r4, r1
    dbde:	4616      	mov	r6, r2
    int rc;

    rc = os_mempool_init(mempool, num_blocks, block_size, mem, name);
    dbe0:	b29d      	uxth	r5, r3
    dbe2:	9b07      	ldr	r3, [sp, #28]
    dbe4:	9300      	str	r3, [sp, #0]
    dbe6:	4603      	mov	r3, r0
    dbe8:	9a06      	ldr	r2, [sp, #24]
    dbea:	4629      	mov	r1, r5
    dbec:	4620      	mov	r0, r4
    dbee:	f7fe ff75 	bl	cadc <os_mempool_init>
    if (rc != 0) {
    dbf2:	b108      	cbz	r0, dbf8 <mem_init_mbuf_pool+0x20>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
    dbf4:	b002      	add	sp, #8
    dbf6:	bd70      	pop	{r4, r5, r6, pc}
    rc = os_mbuf_pool_init(mbuf_pool, mempool, block_size, num_blocks);
    dbf8:	462b      	mov	r3, r5
    dbfa:	9a06      	ldr	r2, [sp, #24]
    dbfc:	b292      	uxth	r2, r2
    dbfe:	4621      	mov	r1, r4
    dc00:	4630      	mov	r0, r6
    dc02:	f7ff fbcd 	bl	d3a0 <os_mbuf_pool_init>
    dc06:	e7f5      	b.n	dbf4 <mem_init_mbuf_pool+0x1c>

0000dc08 <hal_bsp_flash_dev>:
hal_bsp_flash_dev(uint8_t id)
{
    /*
     * Internal flash mapped to id 0.
     */
    if (id == 0) {
    dc08:	b908      	cbnz	r0, dc0e <hal_bsp_flash_dev+0x6>
        return &nrf52k_flash_dev;
    dc0a:	4802      	ldr	r0, [pc, #8]	; (dc14 <hal_bsp_flash_dev+0xc>)
    dc0c:	4770      	bx	lr
#if MYNEWT_VAL(QSPI_ENABLE)
    if (id == 1) {
        return &nrf52k_qspi_dev;
    }
#endif
    return NULL;
    dc0e:	2000      	movs	r0, #0
}
    dc10:	4770      	bx	lr
    dc12:	bf00      	nop
    dc14:	0000ec4c 	.word	0x0000ec4c

0000dc18 <hal_bsp_init>:
    return cfg_pri;
}

void
hal_bsp_init(void)
{
    dc18:	b508      	push	{r3, lr}
    /* Make sure system clocks have started */
    hal_system_clock_start();
    dc1a:	f7fe fae5 	bl	c1e8 <hal_system_clock_start>

    /* Create all available nRF52840 peripherals */
    nrf52_periph_create();
    dc1e:	f000 faeb 	bl	e1f8 <nrf52_periph_create>
}
    dc22:	bd08      	pop	{r3, pc}

0000dc24 <hal_flash_check_addr>:
}

static int
hal_flash_check_addr(const struct hal_flash *hf, uint32_t addr)
{
    if (addr < hf->hf_base_addr || addr > hf->hf_base_addr + hf->hf_size) {
    dc24:	6843      	ldr	r3, [r0, #4]
    dc26:	428b      	cmp	r3, r1
    dc28:	d808      	bhi.n	dc3c <hal_flash_check_addr+0x18>
    dc2a:	6882      	ldr	r2, [r0, #8]
    dc2c:	4413      	add	r3, r2
    dc2e:	428b      	cmp	r3, r1
    dc30:	d301      	bcc.n	dc36 <hal_flash_check_addr+0x12>
        return SYS_EINVAL;
    }
    return 0;
    dc32:	2000      	movs	r0, #0
}
    dc34:	4770      	bx	lr
        return SYS_EINVAL;
    dc36:	f06f 0001 	mvn.w	r0, #1
    dc3a:	4770      	bx	lr
    dc3c:	f06f 0001 	mvn.w	r0, #1
    dc40:	4770      	bx	lr

0000dc42 <hal_flash_init>:
{
    dc42:	b538      	push	{r3, r4, r5, lr}
    int rc = 0;
    dc44:	2500      	movs	r5, #0
    for (i = 0; ; i++) {
    dc46:	462c      	mov	r4, r5
    dc48:	e001      	b.n	dc4e <hal_flash_init+0xc>
    dc4a:	3401      	adds	r4, #1
    dc4c:	b2e4      	uxtb	r4, r4
        hf = hal_bsp_flash_dev(i);
    dc4e:	4620      	mov	r0, r4
    dc50:	f7ff ffda 	bl	dc08 <hal_bsp_flash_dev>
        if (!hf) {
    dc54:	b138      	cbz	r0, dc66 <hal_flash_init+0x24>
        if (hf->hf_itf->hff_init(hf)) {
    dc56:	6802      	ldr	r2, [r0, #0]
    dc58:	6952      	ldr	r2, [r2, #20]
    dc5a:	4790      	blx	r2
    dc5c:	2800      	cmp	r0, #0
    dc5e:	d0f4      	beq.n	dc4a <hal_flash_init+0x8>
            rc = SYS_EIO;
    dc60:	f06f 0504 	mvn.w	r5, #4
    dc64:	e7f1      	b.n	dc4a <hal_flash_init+0x8>
}
    dc66:	4628      	mov	r0, r5
    dc68:	bd38      	pop	{r3, r4, r5, pc}

0000dc6a <hal_flash_read>:

int
hal_flash_read(uint8_t id, uint32_t address, void *dst, uint32_t num_bytes)
{
    dc6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dc6e:	460d      	mov	r5, r1
    dc70:	4690      	mov	r8, r2
    dc72:	461e      	mov	r6, r3
    const struct hal_flash *hf;
    int rc;

    hf = hal_bsp_flash_dev(id);
    dc74:	f7ff ffc8 	bl	dc08 <hal_bsp_flash_dev>
    if (!hf) {
    dc78:	b1c0      	cbz	r0, dcac <hal_flash_read+0x42>
    dc7a:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
    dc7c:	4629      	mov	r1, r5
    dc7e:	f7ff ffd1 	bl	dc24 <hal_flash_check_addr>
    dc82:	b9b0      	cbnz	r0, dcb2 <hal_flash_read+0x48>
      hal_flash_check_addr(hf, address + num_bytes)) {
    dc84:	19a9      	adds	r1, r5, r6
    dc86:	4620      	mov	r0, r4
    dc88:	f7ff ffcc 	bl	dc24 <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
    dc8c:	b9a0      	cbnz	r0, dcb8 <hal_flash_read+0x4e>
        return SYS_EINVAL;
    }

    rc = hf->hf_itf->hff_read(hf, address, dst, num_bytes);
    dc8e:	6823      	ldr	r3, [r4, #0]
    dc90:	681f      	ldr	r7, [r3, #0]
    dc92:	4633      	mov	r3, r6
    dc94:	4642      	mov	r2, r8
    dc96:	4629      	mov	r1, r5
    dc98:	4620      	mov	r0, r4
    dc9a:	47b8      	blx	r7
    if (rc != 0) {
    dc9c:	4603      	mov	r3, r0
    dc9e:	b910      	cbnz	r0, dca6 <hal_flash_read+0x3c>
        return SYS_EIO;
    }

    return 0;
}
    dca0:	4618      	mov	r0, r3
    dca2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SYS_EIO;
    dca6:	f06f 0304 	mvn.w	r3, #4
    dcaa:	e7f9      	b.n	dca0 <hal_flash_read+0x36>
        return SYS_EINVAL;
    dcac:	f06f 0301 	mvn.w	r3, #1
    dcb0:	e7f6      	b.n	dca0 <hal_flash_read+0x36>
        return SYS_EINVAL;
    dcb2:	f06f 0301 	mvn.w	r3, #1
    dcb6:	e7f3      	b.n	dca0 <hal_flash_read+0x36>
    dcb8:	f06f 0301 	mvn.w	r3, #1
    dcbc:	e7f0      	b.n	dca0 <hal_flash_read+0x36>
	...

0000dcc0 <nrf52k_flash_wait_ready>:
static int
nrf52k_flash_wait_ready(void)
{
    int i;

    for (i = 0; i < 100000; i++) {
    dcc0:	2300      	movs	r3, #0
    dcc2:	4a07      	ldr	r2, [pc, #28]	; (dce0 <nrf52k_flash_wait_ready+0x20>)
    dcc4:	4293      	cmp	r3, r2
    dcc6:	dc06      	bgt.n	dcd6 <nrf52k_flash_wait_ready+0x16>
        if (NRF_NVMC->READY == NVMC_READY_READY_Ready) {
    dcc8:	4a06      	ldr	r2, [pc, #24]	; (dce4 <nrf52k_flash_wait_ready+0x24>)
    dcca:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
    dcce:	2a01      	cmp	r2, #1
    dcd0:	d004      	beq.n	dcdc <nrf52k_flash_wait_ready+0x1c>
    for (i = 0; i < 100000; i++) {
    dcd2:	3301      	adds	r3, #1
    dcd4:	e7f5      	b.n	dcc2 <nrf52k_flash_wait_ready+0x2>
            return 0;
        }
    }
    return -1;
    dcd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    dcda:	4770      	bx	lr
            return 0;
    dcdc:	2000      	movs	r0, #0
}
    dcde:	4770      	bx	lr
    dce0:	0001869f 	.word	0x0001869f
    dce4:	4001e000 	.word	0x4001e000

0000dce8 <nrf52k_flash_erase_sector>:
    return rc;
}

static int
nrf52k_flash_erase_sector(const struct hal_flash *dev, uint32_t sector_address)
{
    dce8:	b538      	push	{r3, r4, r5, lr}
    dcea:	460d      	mov	r5, r1
    int sr;
    int rc = -1;

    if (nrf52k_flash_wait_ready()) {
    dcec:	f7ff ffe8 	bl	dcc0 <nrf52k_flash_wait_ready>
    dcf0:	b9f0      	cbnz	r0, dd30 <nrf52k_flash_erase_sector+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    dcf2:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    dcf6:	b672      	cpsid	i
        return -1;
    }
    __HAL_DISABLE_INTERRUPTS(sr);
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Een; /* Enable erase OP */
    dcf8:	4b0f      	ldr	r3, [pc, #60]	; (dd38 <nrf52k_flash_erase_sector+0x50>)
    dcfa:	2202      	movs	r2, #2
    dcfc:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    if (nrf52k_flash_wait_ready()) {
    dd00:	f7ff ffde 	bl	dcc0 <nrf52k_flash_wait_ready>
    dd04:	b148      	cbz	r0, dd1a <nrf52k_flash_erase_sector+0x32>
    int rc = -1;
    dd06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    if (nrf52k_flash_wait_ready()) {
        goto out;
    }
    rc = 0;
out:
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren; /* Disable erase OP */
    dd0a:	4a0b      	ldr	r2, [pc, #44]	; (dd38 <nrf52k_flash_erase_sector+0x50>)
    dd0c:	2100      	movs	r1, #0
    dd0e:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
    __HAL_ENABLE_INTERRUPTS(sr);
    dd12:	b904      	cbnz	r4, dd16 <nrf52k_flash_erase_sector+0x2e>
  __ASM volatile ("cpsie i" : : : "memory");
    dd14:	b662      	cpsie	i
    return rc;
}
    dd16:	4618      	mov	r0, r3
    dd18:	bd38      	pop	{r3, r4, r5, pc}
    NRF_NVMC->ERASEPAGE = sector_address;
    dd1a:	4b07      	ldr	r3, [pc, #28]	; (dd38 <nrf52k_flash_erase_sector+0x50>)
    dd1c:	f8c3 5508 	str.w	r5, [r3, #1288]	; 0x508
    if (nrf52k_flash_wait_ready()) {
    dd20:	f7ff ffce 	bl	dcc0 <nrf52k_flash_wait_ready>
    dd24:	4603      	mov	r3, r0
    dd26:	2800      	cmp	r0, #0
    dd28:	d0ef      	beq.n	dd0a <nrf52k_flash_erase_sector+0x22>
    int rc = -1;
    dd2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    dd2e:	e7ec      	b.n	dd0a <nrf52k_flash_erase_sector+0x22>
        return -1;
    dd30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    dd34:	e7ef      	b.n	dd16 <nrf52k_flash_erase_sector+0x2e>
    dd36:	bf00      	nop
    dd38:	4001e000 	.word	0x4001e000

0000dd3c <nrf52k_flash_init>:

static int
nrf52k_flash_init(const struct hal_flash *dev)
{
    return 0;
}
    dd3c:	2000      	movs	r0, #0
    dd3e:	4770      	bx	lr

0000dd40 <nrf52k_flash_sector_info>:
    assert(idx < nrf52k_flash_dev.hf_sector_cnt);
    dd40:	29ff      	cmp	r1, #255	; 0xff
    dd42:	dc06      	bgt.n	dd52 <nrf52k_flash_sector_info+0x12>
    *address = idx * NRF52K_FLASH_SECTOR_SZ;
    dd44:	0309      	lsls	r1, r1, #12
    dd46:	6011      	str	r1, [r2, #0]
    *sz = NRF52K_FLASH_SECTOR_SZ;
    dd48:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    dd4c:	601a      	str	r2, [r3, #0]
}
    dd4e:	2000      	movs	r0, #0
    dd50:	4770      	bx	lr
{
    dd52:	b508      	push	{r3, lr}
    assert(idx < nrf52k_flash_dev.hf_sector_cnt);
    dd54:	f7fe fa2a 	bl	c1ac <hal_debugger_connected>
    dd58:	b100      	cbz	r0, dd5c <nrf52k_flash_sector_info+0x1c>
    dd5a:	be01      	bkpt	0x0001
    dd5c:	2300      	movs	r3, #0
    dd5e:	461a      	mov	r2, r3
    dd60:	4619      	mov	r1, r3
    dd62:	4618      	mov	r0, r3
    dd64:	f7ff fb02 	bl	d36c <__assert_func>

0000dd68 <nrf52k_flash_write>:
{
    dd68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    dd6c:	b082      	sub	sp, #8
    dd6e:	460d      	mov	r5, r1
    dd70:	4616      	mov	r6, r2
    dd72:	461c      	mov	r4, r3
    if (nrf52k_flash_wait_ready()) {
    dd74:	f7ff ffa4 	bl	dcc0 <nrf52k_flash_wait_ready>
    dd78:	2800      	cmp	r0, #0
    dd7a:	d158      	bne.n	de2e <nrf52k_flash_write+0xc6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    dd7c:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    dd80:	b672      	cpsid	i
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen; /* Enable erase OP */
    dd82:	4b2c      	ldr	r3, [pc, #176]	; (de34 <nrf52k_flash_write+0xcc>)
    dd84:	2201      	movs	r2, #1
    dd86:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    if (tmp) {
    dd8a:	f015 0803 	ands.w	r8, r5, #3
    dd8e:	d10b      	bne.n	dda8 <nrf52k_flash_write+0x40>
    while (num_bytes >= sizeof(uint32_t)) {
    dd90:	2c03      	cmp	r4, #3
    dd92:	d925      	bls.n	dde0 <nrf52k_flash_write+0x78>
        if (nrf52k_flash_wait_ready()) {
    dd94:	f7ff ff94 	bl	dcc0 <nrf52k_flash_wait_ready>
    dd98:	2800      	cmp	r0, #0
    dd9a:	d139      	bne.n	de10 <nrf52k_flash_write+0xa8>
        *(uint32_t *)address = *(uint32_t *)src;
    dd9c:	f856 3b04 	ldr.w	r3, [r6], #4
    dda0:	f845 3b04 	str.w	r3, [r5], #4
        num_bytes -= sizeof(uint32_t);
    dda4:	3c04      	subs	r4, #4
    dda6:	e7f3      	b.n	dd90 <nrf52k_flash_write+0x28>
        if (nrf52k_flash_wait_ready()) {
    dda8:	f7ff ff8a 	bl	dcc0 <nrf52k_flash_wait_ready>
    ddac:	bb68      	cbnz	r0, de0a <nrf52k_flash_write+0xa2>
        val = *(uint32_t *)(address & ~0x3);
    ddae:	f025 0a03 	bic.w	sl, r5, #3
    ddb2:	f8da 3000 	ldr.w	r3, [sl]
    ddb6:	9301      	str	r3, [sp, #4]
        cnt = 4 - tmp;
    ddb8:	f1c8 0904 	rsb	r9, r8, #4
        if (cnt > num_bytes) {
    ddbc:	45a1      	cmp	r9, r4
    ddbe:	d900      	bls.n	ddc2 <nrf52k_flash_write+0x5a>
            cnt = num_bytes;
    ddc0:	46a1      	mov	r9, r4
        memcpy((uint8_t *)&val + tmp, src, cnt);
    ddc2:	464a      	mov	r2, r9
    ddc4:	4631      	mov	r1, r6
    ddc6:	ab01      	add	r3, sp, #4
    ddc8:	eb03 0008 	add.w	r0, r3, r8
    ddcc:	f7ff fc2c 	bl	d628 <memcpy>
        *(uint32_t *)(address & ~0x3) = val;
    ddd0:	9b01      	ldr	r3, [sp, #4]
    ddd2:	f8ca 3000 	str.w	r3, [sl]
        address += cnt;
    ddd6:	444d      	add	r5, r9
        num_bytes -= cnt;
    ddd8:	eba4 0409 	sub.w	r4, r4, r9
        src += cnt;
    dddc:	444e      	add	r6, r9
    ddde:	e7d7      	b.n	dd90 <nrf52k_flash_write+0x28>
    if (num_bytes) {
    dde0:	b164      	cbz	r4, ddfc <nrf52k_flash_write+0x94>
        val = *(uint32_t *)address;
    dde2:	682b      	ldr	r3, [r5, #0]
    dde4:	a802      	add	r0, sp, #8
    dde6:	f840 3d04 	str.w	r3, [r0, #-4]!
        memcpy(&val, src, num_bytes);
    ddea:	4622      	mov	r2, r4
    ddec:	4631      	mov	r1, r6
    ddee:	f7ff fc1b 	bl	d628 <memcpy>
        if (nrf52k_flash_wait_ready()) {
    ddf2:	f7ff ff65 	bl	dcc0 <nrf52k_flash_wait_ready>
    ddf6:	b9b8      	cbnz	r0, de28 <nrf52k_flash_write+0xc0>
        *(uint32_t *)address = val;
    ddf8:	9b01      	ldr	r3, [sp, #4]
    ddfa:	602b      	str	r3, [r5, #0]
    if (nrf52k_flash_wait_ready()) {
    ddfc:	f7ff ff60 	bl	dcc0 <nrf52k_flash_wait_ready>
    de00:	4603      	mov	r3, r0
    de02:	b138      	cbz	r0, de14 <nrf52k_flash_write+0xac>
        rc = -1;
    de04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    de08:	e004      	b.n	de14 <nrf52k_flash_write+0xac>
    int rc = -1;
    de0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    de0e:	e001      	b.n	de14 <nrf52k_flash_write+0xac>
    de10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren;
    de14:	4a07      	ldr	r2, [pc, #28]	; (de34 <nrf52k_flash_write+0xcc>)
    de16:	2100      	movs	r1, #0
    de18:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
    __HAL_ENABLE_INTERRUPTS(sr);
    de1c:	b907      	cbnz	r7, de20 <nrf52k_flash_write+0xb8>
  __ASM volatile ("cpsie i" : : : "memory");
    de1e:	b662      	cpsie	i
}
    de20:	4618      	mov	r0, r3
    de22:	b002      	add	sp, #8
    de24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    int rc = -1;
    de28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    de2c:	e7f2      	b.n	de14 <nrf52k_flash_write+0xac>
        return -1;
    de2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    de32:	e7f5      	b.n	de20 <nrf52k_flash_write+0xb8>
    de34:	4001e000 	.word	0x4001e000

0000de38 <nrf52k_flash_read>:
{
    de38:	b508      	push	{r3, lr}
    de3a:	4610      	mov	r0, r2
    memcpy(dst, (void *)address, num_bytes);
    de3c:	461a      	mov	r2, r3
    de3e:	f7ff fbf3 	bl	d628 <memcpy>
}
    de42:	2000      	movs	r0, #0
    de44:	bd08      	pop	{r3, pc}
	...

0000de48 <nrf52_timer_handler>:
    }
}

static void
nrf52_timer_handler(void)
{
    de48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int ticks;
    os_sr_t sr;
    uint32_t counter;

    os_trace_isr_enter();
    OS_ENTER_CRITICAL(sr);
    de4a:	f7ff f9c3 	bl	d1d4 <os_arch_save_sr>
    return OS_TICK_TIMER->COUNTER;
    de4e:	4b39      	ldr	r3, [pc, #228]	; (df34 <nrf52_timer_handler+0xec>)
    de50:	f8d3 5504 	ldr.w	r5, [r3, #1284]	; 0x504

    /* Calculate elapsed ticks and advance OS time. */

    counter = nrf52_os_tick_counter();
    delta = sub24(counter, g_hal_os_tick.lastocmp);
    de54:	4b38      	ldr	r3, [pc, #224]	; (df38 <nrf52_timer_handler+0xf0>)
    de56:	689b      	ldr	r3, [r3, #8]
    assert(x <= 0xffffff);
    de58:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
    de5c:	d229      	bcs.n	deb2 <nrf52_timer_handler+0x6a>
    de5e:	4606      	mov	r6, r0
    assert(y <= 0xffffff);
    de60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    de64:	d22f      	bcs.n	dec6 <nrf52_timer_handler+0x7e>
    result = x - y;
    de66:	1aed      	subs	r5, r5, r3
    if (result & 0x800000) {
    de68:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
    de6c:	d135      	bne.n	deda <nrf52_timer_handler+0x92>
        return (result & 0x007fffff);
    de6e:	f3c5 0516 	ubfx	r5, r5, #0, #23
    ticks = delta / g_hal_os_tick.ticks_per_ostick;
    de72:	4f31      	ldr	r7, [pc, #196]	; (df38 <nrf52_timer_handler+0xf0>)
    de74:	683c      	ldr	r4, [r7, #0]
    de76:	fb95 f5f4 	sdiv	r5, r5, r4
    os_time_advance(ticks);
    de7a:	4628      	mov	r0, r5
    de7c:	f7ff f962 	bl	d144 <os_time_advance>

    /* Clear timer interrupt */
    OS_TICK_TIMER->EVENTS_COMPARE[OS_TICK_CMPREG] = 0;
    de80:	4b2c      	ldr	r3, [pc, #176]	; (df34 <nrf52_timer_handler+0xec>)
    de82:	2200      	movs	r2, #0
    de84:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

    /* Update the time associated with the most recent tick */
    g_hal_os_tick.lastocmp = (g_hal_os_tick.lastocmp +
    de88:	68bb      	ldr	r3, [r7, #8]
        (ticks * g_hal_os_tick.ticks_per_ostick)) & 0xffffff;
    de8a:	683c      	ldr	r4, [r7, #0]
    g_hal_os_tick.lastocmp = (g_hal_os_tick.lastocmp +
    de8c:	fb05 3304 	mla	r3, r5, r4, r3
        (ticks * g_hal_os_tick.ticks_per_ostick)) & 0xffffff;
    de90:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    g_hal_os_tick.lastocmp = (g_hal_os_tick.lastocmp +
    de94:	60bb      	str	r3, [r7, #8]

    /* Update the output compare to interrupt at the next tick */
    nrf52_os_tick_set_ocmp(g_hal_os_tick.lastocmp + g_hal_os_tick.ticks_per_ostick);
    de96:	441c      	add	r4, r3
    OS_ASSERT_CRITICAL();
    de98:	f7ff f9a5 	bl	d1e6 <os_arch_in_critical>
    de9c:	bba8      	cbnz	r0, df0a <nrf52_timer_handler+0xc2>
    de9e:	f7fe f985 	bl	c1ac <hal_debugger_connected>
    dea2:	b100      	cbz	r0, dea6 <nrf52_timer_handler+0x5e>
    dea4:	be01      	bkpt	0x0001
    dea6:	2300      	movs	r3, #0
    dea8:	461a      	mov	r2, r3
    deaa:	4619      	mov	r1, r3
    deac:	4618      	mov	r0, r3
    deae:	f7ff fa5d 	bl	d36c <__assert_func>
    assert(x <= 0xffffff);
    deb2:	f7fe f97b 	bl	c1ac <hal_debugger_connected>
    deb6:	b100      	cbz	r0, deba <nrf52_timer_handler+0x72>
    deb8:	be01      	bkpt	0x0001
    deba:	2300      	movs	r3, #0
    debc:	461a      	mov	r2, r3
    debe:	4619      	mov	r1, r3
    dec0:	4618      	mov	r0, r3
    dec2:	f7ff fa53 	bl	d36c <__assert_func>
    assert(y <= 0xffffff);
    dec6:	f7fe f971 	bl	c1ac <hal_debugger_connected>
    deca:	b100      	cbz	r0, dece <nrf52_timer_handler+0x86>
    decc:	be01      	bkpt	0x0001
    dece:	2300      	movs	r3, #0
    ded0:	461a      	mov	r2, r3
    ded2:	4619      	mov	r1, r3
    ded4:	4618      	mov	r0, r3
    ded6:	f7ff fa49 	bl	d36c <__assert_func>
        return (result | 0xff800000);
    deda:	ea6f 2545 	mvn.w	r5, r5, lsl #9
    dede:	ea6f 2555 	mvn.w	r5, r5, lsr #9
    dee2:	e7c6      	b.n	de72 <nrf52_timer_handler+0x2a>
    assert(y <= 0xffffff);
    dee4:	f7fe f962 	bl	c1ac <hal_debugger_connected>
    dee8:	b100      	cbz	r0, deec <nrf52_timer_handler+0xa4>
    deea:	be01      	bkpt	0x0001
    deec:	2300      	movs	r3, #0
    deee:	461a      	mov	r2, r3
    def0:	4619      	mov	r1, r3
    def2:	4618      	mov	r0, r3
    def4:	f7ff fa3a 	bl	d36c <__assert_func>
        return (result | 0xff800000);
    def8:	ea6f 2242 	mvn.w	r2, r2, lsl #9
    defc:	ea6f 2252 	mvn.w	r2, r2, lsr #9
        if (delta > 2) {
    df00:	2a02      	cmp	r2, #2
    df02:	dc13      	bgt.n	df2c <nrf52_timer_handler+0xe4>
        ocmp += g_hal_os_tick.ticks_per_ostick;
    df04:	4a0c      	ldr	r2, [pc, #48]	; (df38 <nrf52_timer_handler+0xf0>)
    df06:	6814      	ldr	r4, [r2, #0]
    df08:	441c      	add	r4, r3
        ocmp &= 0xffffff;
    df0a:	f024 437f 	bic.w	r3, r4, #4278190080	; 0xff000000
        OS_TICK_TIMER->CC[OS_TICK_CMPREG] = ocmp;
    df0e:	4a09      	ldr	r2, [pc, #36]	; (df34 <nrf52_timer_handler+0xec>)
    df10:	f8c2 354c 	str.w	r3, [r2, #1356]	; 0x54c
    return OS_TICK_TIMER->COUNTER;
    df14:	f8d2 2504 	ldr.w	r2, [r2, #1284]	; 0x504
    assert(y <= 0xffffff);
    df18:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
    df1c:	d2e2      	bcs.n	dee4 <nrf52_timer_handler+0x9c>
    result = x - y;
    df1e:	1a9a      	subs	r2, r3, r2
    if (result & 0x800000) {
    df20:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
    df24:	d1e8      	bne.n	def8 <nrf52_timer_handler+0xb0>
        return (result & 0x007fffff);
    df26:	f3c2 0216 	ubfx	r2, r2, #0, #23
    df2a:	e7e9      	b.n	df00 <nrf52_timer_handler+0xb8>

    OS_EXIT_CRITICAL(sr);
    df2c:	4630      	mov	r0, r6
    df2e:	f7ff f957 	bl	d1e0 <os_arch_restore_sr>
    os_trace_isr_exit();
}
    df32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    df34:	40011000 	.word	0x40011000
    df38:	2000225c 	.word	0x2000225c

0000df3c <os_tick_idle>:

void
os_tick_idle(os_time_t ticks)
{
    df3c:	b538      	push	{r3, r4, r5, lr}
    df3e:	4605      	mov	r5, r0
    uint32_t ocmp;

    OS_ASSERT_CRITICAL();
    df40:	f7ff f951 	bl	d1e6 <os_arch_in_critical>
    df44:	b1c0      	cbz	r0, df78 <os_tick_idle+0x3c>

    if (ticks > 0) {
    df46:	2d00      	cmp	r5, #0
    df48:	d044      	beq.n	dfd4 <os_tick_idle+0x98>
        /*
         * Enter tickless regime during long idle durations.
         */
        if (ticks > g_hal_os_tick.max_idle_ticks) {
    df4a:	4b26      	ldr	r3, [pc, #152]	; (dfe4 <os_tick_idle+0xa8>)
    df4c:	685b      	ldr	r3, [r3, #4]
    df4e:	42ab      	cmp	r3, r5
    df50:	d200      	bcs.n	df54 <os_tick_idle+0x18>
            ticks = g_hal_os_tick.max_idle_ticks;
    df52:	461d      	mov	r5, r3
        }
        ocmp = g_hal_os_tick.lastocmp + (ticks*g_hal_os_tick.ticks_per_ostick);
    df54:	4b23      	ldr	r3, [pc, #140]	; (dfe4 <os_tick_idle+0xa8>)
    df56:	689c      	ldr	r4, [r3, #8]
    df58:	681a      	ldr	r2, [r3, #0]
    df5a:	fb05 4402 	mla	r4, r5, r2, r4
    OS_ASSERT_CRITICAL();
    df5e:	f7ff f942 	bl	d1e6 <os_arch_in_critical>
    df62:	bb30      	cbnz	r0, dfb2 <os_tick_idle+0x76>
    df64:	f7fe f922 	bl	c1ac <hal_debugger_connected>
    df68:	b100      	cbz	r0, df6c <os_tick_idle+0x30>
    df6a:	be01      	bkpt	0x0001
    df6c:	2300      	movs	r3, #0
    df6e:	461a      	mov	r2, r3
    df70:	4619      	mov	r1, r3
    df72:	4618      	mov	r0, r3
    df74:	f7ff f9fa 	bl	d36c <__assert_func>
    OS_ASSERT_CRITICAL();
    df78:	f7fe f918 	bl	c1ac <hal_debugger_connected>
    df7c:	b100      	cbz	r0, df80 <os_tick_idle+0x44>
    df7e:	be01      	bkpt	0x0001
    df80:	2300      	movs	r3, #0
    df82:	461a      	mov	r2, r3
    df84:	4619      	mov	r1, r3
    df86:	4618      	mov	r0, r3
    df88:	f7ff f9f0 	bl	d36c <__assert_func>
    assert(y <= 0xffffff);
    df8c:	f7fe f90e 	bl	c1ac <hal_debugger_connected>
    df90:	b100      	cbz	r0, df94 <os_tick_idle+0x58>
    df92:	be01      	bkpt	0x0001
    df94:	2300      	movs	r3, #0
    df96:	461a      	mov	r2, r3
    df98:	4619      	mov	r1, r3
    df9a:	4618      	mov	r0, r3
    df9c:	f7ff f9e6 	bl	d36c <__assert_func>
        return (result | 0xff800000);
    dfa0:	ea6f 2343 	mvn.w	r3, r3, lsl #9
    dfa4:	ea6f 2353 	mvn.w	r3, r3, lsr #9
        if (delta > 2) {
    dfa8:	2b02      	cmp	r3, #2
    dfaa:	dc13      	bgt.n	dfd4 <os_tick_idle+0x98>
        ocmp += g_hal_os_tick.ticks_per_ostick;
    dfac:	4b0d      	ldr	r3, [pc, #52]	; (dfe4 <os_tick_idle+0xa8>)
    dfae:	681c      	ldr	r4, [r3, #0]
    dfb0:	4414      	add	r4, r2
        ocmp &= 0xffffff;
    dfb2:	f024 427f 	bic.w	r2, r4, #4278190080	; 0xff000000
        OS_TICK_TIMER->CC[OS_TICK_CMPREG] = ocmp;
    dfb6:	4b0c      	ldr	r3, [pc, #48]	; (dfe8 <os_tick_idle+0xac>)
    dfb8:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
    return OS_TICK_TIMER->COUNTER;
    dfbc:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
    assert(y <= 0xffffff);
    dfc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    dfc4:	d2e2      	bcs.n	df8c <os_tick_idle+0x50>
    result = x - y;
    dfc6:	1ad3      	subs	r3, r2, r3
    if (result & 0x800000) {
    dfc8:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
    dfcc:	d1e8      	bne.n	dfa0 <os_tick_idle+0x64>
        return (result & 0x007fffff);
    dfce:	f3c3 0316 	ubfx	r3, r3, #0, #23
    dfd2:	e7e9      	b.n	dfa8 <os_tick_idle+0x6c>
  __ASM volatile ("dsb 0xF":::"memory");
    dfd4:	f3bf 8f4f 	dsb	sy
        nrf52_os_tick_set_ocmp(ocmp);
    }

    __DSB();
    __WFI();
    dfd8:	bf30      	wfi

    if (ticks > 0) {
    dfda:	b905      	cbnz	r5, dfde <os_tick_idle+0xa2>
         * Update OS time before anything else when coming out of
         * the tickless regime.
         */
        nrf52_timer_handler();
    }
}
    dfdc:	bd38      	pop	{r3, r4, r5, pc}
        nrf52_timer_handler();
    dfde:	f7ff ff33 	bl	de48 <nrf52_timer_handler>
}
    dfe2:	e7fb      	b.n	dfdc <os_tick_idle+0xa0>
    dfe4:	2000225c 	.word	0x2000225c
    dfe8:	40011000 	.word	0x40011000

0000dfec <os_tick_init>:

void
os_tick_init(uint32_t os_ticks_per_sec, int prio)
{
    dfec:	b570      	push	{r4, r5, r6, lr}
    uint32_t sr;

    assert(RTC_FREQ % os_ticks_per_sec == 0);
    dfee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    dff2:	fbb3 f3f0 	udiv	r3, r3, r0
    dff6:	fb00 f303 	mul.w	r3, r0, r3
    dffa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    dffe:	d136      	bne.n	e06e <os_tick_init+0x82>
    e000:	460c      	mov	r4, r1

    g_hal_os_tick.lastocmp = 0;
    e002:	4d20      	ldr	r5, [pc, #128]	; (e084 <os_tick_init+0x98>)
    e004:	2600      	movs	r6, #0
    e006:	60ae      	str	r6, [r5, #8]
    g_hal_os_tick.ticks_per_ostick = RTC_FREQ / os_ticks_per_sec;
    e008:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    e00c:	fbb3 f0f0 	udiv	r0, r3, r0
    e010:	6028      	str	r0, [r5, #0]
    /*
     * The maximum number of OS ticks allowed to elapse during idle is
     * limited to 1/4th the number of timer ticks before the 24-bit counter
     * rolls over.
     */
    g_hal_os_tick.max_idle_ticks = (1UL << 22) / g_hal_os_tick.ticks_per_ostick;
    e012:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    e016:	fbb3 f0f0 	udiv	r0, r3, r0
    e01a:	6068      	str	r0, [r5, #4]

    /* disable interrupts */
    OS_ENTER_CRITICAL(sr);
    e01c:	f7ff f8da 	bl	d1d4 <os_arch_save_sr>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    e020:	0164      	lsls	r4, r4, #5
    e022:	b2e4      	uxtb	r4, r4
    e024:	4b18      	ldr	r3, [pc, #96]	; (e088 <os_tick_init+0x9c>)
    e026:	f883 4311 	strb.w	r4, [r3, #785]	; 0x311
  uint32_t vectors = (uint32_t )SCB->VTOR;
    e02a:	4a18      	ldr	r2, [pc, #96]	; (e08c <os_tick_init+0xa0>)
    e02c:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
    e02e:	4918      	ldr	r1, [pc, #96]	; (e090 <os_tick_init+0xa4>)
    e030:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    e034:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    e038:	601a      	str	r2, [r3, #0]

    /*
     * Program the OS_TICK_TIMER to operate at 32KHz and trigger an output
     * compare interrupt at a rate of 'os_ticks_per_sec'.
     */
    OS_TICK_TIMER->TASKS_STOP = 1;
    e03a:	f103 43c0 	add.w	r3, r3, #1610612736	; 0x60000000
    e03e:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
    e042:	2201      	movs	r2, #1
    e044:	605a      	str	r2, [r3, #4]
    OS_TICK_TIMER->TASKS_CLEAR = 1;
    e046:	609a      	str	r2, [r3, #8]

    OS_TICK_TIMER->EVTENCLR = 0xffffffff;
    e048:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    e04c:	f8c3 1348 	str.w	r1, [r3, #840]	; 0x348
    OS_TICK_TIMER->INTENCLR = 0xffffffff;
    e050:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    OS_TICK_TIMER->INTENSET = RTC_COMPARE_INT_MASK(OS_TICK_CMPREG);
    e054:	f44f 2100 	mov.w	r1, #524288	; 0x80000
    e058:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

    OS_TICK_TIMER->EVENTS_COMPARE[OS_TICK_CMPREG] = 0;
    e05c:	f8c3 614c 	str.w	r6, [r3, #332]	; 0x14c
    OS_TICK_TIMER->CC[OS_TICK_CMPREG] = g_hal_os_tick.ticks_per_ostick;
    e060:	6829      	ldr	r1, [r5, #0]
    e062:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c

    OS_TICK_TIMER->TASKS_START = 1;
    e066:	601a      	str	r2, [r3, #0]

    OS_EXIT_CRITICAL(sr);
    e068:	f7ff f8ba 	bl	d1e0 <os_arch_restore_sr>
}
    e06c:	bd70      	pop	{r4, r5, r6, pc}
    assert(RTC_FREQ % os_ticks_per_sec == 0);
    e06e:	f7fe f89d 	bl	c1ac <hal_debugger_connected>
    e072:	b100      	cbz	r0, e076 <os_tick_init+0x8a>
    e074:	be01      	bkpt	0x0001
    e076:	2300      	movs	r3, #0
    e078:	461a      	mov	r2, r3
    e07a:	4619      	mov	r1, r3
    e07c:	4618      	mov	r0, r3
    e07e:	f7ff f975 	bl	d36c <__assert_func>
    e082:	bf00      	nop
    e084:	2000225c 	.word	0x2000225c
    e088:	e000e100 	.word	0xe000e100
    e08c:	e000ed00 	.word	0xe000ed00
    e090:	0000de49 	.word	0x0000de49

0000e094 <nrf52_hal_wdt_default_handler>:
#include "mcu/cmsis_nvic.h"
#include "nrf.h"

static void
nrf52_hal_wdt_default_handler(void)
{
    e094:	b508      	push	{r3, lr}
    assert(0);
    e096:	f7fe f889 	bl	c1ac <hal_debugger_connected>
    e09a:	b100      	cbz	r0, e09e <nrf52_hal_wdt_default_handler+0xa>
    e09c:	be01      	bkpt	0x0001
    e09e:	2300      	movs	r3, #0
    e0a0:	461a      	mov	r2, r3
    e0a2:	4619      	mov	r1, r3
    e0a4:	4618      	mov	r0, r3
    e0a6:	f7ff f961 	bl	d36c <__assert_func>
	...

0000e0ac <nrf52_wdt_irq_handler>:
}

/**@brief WDT interrupt handler. */
static void
nrf52_wdt_irq_handler(void)
{
    e0ac:	b508      	push	{r3, lr}
    os_trace_isr_enter();
    if (NRF_WDT->INTENSET & WDT_INTENSET_TIMEOUT_Msk) {
    e0ae:	4b06      	ldr	r3, [pc, #24]	; (e0c8 <nrf52_wdt_irq_handler+0x1c>)
    e0b0:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
    e0b4:	f013 0f01 	tst.w	r3, #1
    e0b8:	d100      	bne.n	e0bc <nrf52_wdt_irq_handler+0x10>
        NRF_WDT->EVENTS_TIMEOUT = 0;
        nrf52_hal_wdt_default_handler();
    }
    os_trace_isr_exit();
}
    e0ba:	bd08      	pop	{r3, pc}
        NRF_WDT->EVENTS_TIMEOUT = 0;
    e0bc:	4b02      	ldr	r3, [pc, #8]	; (e0c8 <nrf52_wdt_irq_handler+0x1c>)
    e0be:	2200      	movs	r2, #0
    e0c0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        nrf52_hal_wdt_default_handler();
    e0c4:	f7ff ffe6 	bl	e094 <nrf52_hal_wdt_default_handler>
    e0c8:	40010000 	.word	0x40010000

0000e0cc <hal_watchdog_init>:

int
hal_watchdog_init(uint32_t expire_msecs)
{
    e0cc:	b508      	push	{r3, lr}
    NRF_WDT->CONFIG = WDT_CONFIG_SLEEP_Msk;
    e0ce:	4b19      	ldr	r3, [pc, #100]	; (e134 <hal_watchdog_init+0x68>)
    e0d0:	2201      	movs	r2, #1
    e0d2:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c

    if (expire_msecs >= 44739243) {
    e0d6:	4b18      	ldr	r3, [pc, #96]	; (e138 <hal_watchdog_init+0x6c>)
    e0d8:	4298      	cmp	r0, r3
    e0da:	d821      	bhi.n	e120 <hal_watchdog_init+0x54>
        /* maximum allowed time is near 12.5 hours! */
        assert(0);
    } else {
        NRF_WDT->CRV = (expire_msecs * 32) + ((expire_msecs * 96) / 125);
    e0dc:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    e0e0:	0153      	lsls	r3, r2, #5
    e0e2:	4a16      	ldr	r2, [pc, #88]	; (e13c <hal_watchdog_init+0x70>)
    e0e4:	fba2 2303 	umull	r2, r3, r2, r3
    e0e8:	08db      	lsrs	r3, r3, #3
    e0ea:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    e0ee:	4b11      	ldr	r3, [pc, #68]	; (e134 <hal_watchdog_init+0x68>)
    e0f0:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
  uint32_t vectors = (uint32_t )SCB->VTOR;
    e0f4:	4a12      	ldr	r2, [pc, #72]	; (e140 <hal_watchdog_init+0x74>)
    e0f6:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
    e0f8:	4912      	ldr	r1, [pc, #72]	; (e144 <hal_watchdog_init+0x78>)
    e0fa:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    e0fe:	4a12      	ldr	r2, [pc, #72]	; (e148 <hal_watchdog_init+0x7c>)
    e100:	21e0      	movs	r1, #224	; 0xe0
    e102:	f882 1310 	strb.w	r1, [r2, #784]	; 0x310
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    e106:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    e10a:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    e10e:	6011      	str	r1, [r2, #0]

    NVIC_SetVector(WDT_IRQn, (uint32_t) nrf52_wdt_irq_handler);
    NVIC_SetPriority(WDT_IRQn, (1 << __NVIC_PRIO_BITS) - 1);
    NVIC_ClearPendingIRQ(WDT_IRQn);
    NVIC_EnableIRQ(WDT_IRQn);
    NRF_WDT->RREN |= 0x1;
    e110:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
    e114:	f042 0201 	orr.w	r2, r2, #1
    e118:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508

    return (0);
}
    e11c:	2000      	movs	r0, #0
    e11e:	bd08      	pop	{r3, pc}
        assert(0);
    e120:	f7fe f844 	bl	c1ac <hal_debugger_connected>
    e124:	b100      	cbz	r0, e128 <hal_watchdog_init+0x5c>
    e126:	be01      	bkpt	0x0001
    e128:	2300      	movs	r3, #0
    e12a:	461a      	mov	r2, r3
    e12c:	4619      	mov	r1, r3
    e12e:	4618      	mov	r0, r3
    e130:	f7ff f91c 	bl	d36c <__assert_func>
    e134:	40010000 	.word	0x40010000
    e138:	02aaaaaa 	.word	0x02aaaaaa
    e13c:	10624dd3 	.word	0x10624dd3
    e140:	e000ed00 	.word	0xe000ed00
    e144:	0000e0ad 	.word	0x0000e0ad
    e148:	e000e100 	.word	0xe000e100

0000e14c <hal_watchdog_enable>:

void
hal_watchdog_enable(void)
{
    NRF_WDT->INTENSET = WDT_INTENSET_TIMEOUT_Msk;
    e14c:	4b02      	ldr	r3, [pc, #8]	; (e158 <hal_watchdog_enable+0xc>)
    e14e:	2201      	movs	r2, #1
    e150:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    NRF_WDT->TASKS_START = 1;
    e154:	601a      	str	r2, [r3, #0]
}
    e156:	4770      	bx	lr
    e158:	40010000 	.word	0x40010000

0000e15c <hal_watchdog_tickle>:

void
hal_watchdog_tickle(void)
{
    NRF_WDT->RR[0] = WDT_RR_RR_Reload;
    e15c:	4b02      	ldr	r3, [pc, #8]	; (e168 <hal_watchdog_tickle+0xc>)
    e15e:	4a03      	ldr	r2, [pc, #12]	; (e16c <hal_watchdog_tickle+0x10>)
    e160:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
}
    e164:	4770      	bx	lr
    e166:	bf00      	nop
    e168:	40010000 	.word	0x40010000
    e16c:	6e524635 	.word	0x6e524635

0000e170 <nrf52_periph_create_timers>:
#endif
#endif

static void
nrf52_periph_create_timers(void)
{
    e170:	b508      	push	{r3, lr}
    int rc;

    (void)rc;

#if MYNEWT_VAL(TIMER_0)
    rc = hal_timer_init(0, NULL);
    e172:	2100      	movs	r1, #0
    e174:	4608      	mov	r0, r1
    e176:	f000 f953 	bl	e420 <hal_timer_init>
    assert(rc == 0);
    e17a:	b920      	cbnz	r0, e186 <nrf52_periph_create_timers+0x16>
    rc = hal_timer_init(5, NULL);
    assert(rc == 0);
#endif

#if MYNEWT_VAL(OS_CPUTIME_TIMER_NUM) >= 0
    rc = os_cputime_init(MYNEWT_VAL(OS_CPUTIME_FREQ));
    e17c:	480c      	ldr	r0, [pc, #48]	; (e1b0 <nrf52_periph_create_timers+0x40>)
    e17e:	f000 f9fb 	bl	e578 <os_cputime_init>
    assert(rc == 0);
    e182:	b950      	cbnz	r0, e19a <nrf52_periph_create_timers+0x2a>
#endif
}
    e184:	bd08      	pop	{r3, pc}
    assert(rc == 0);
    e186:	f7fe f811 	bl	c1ac <hal_debugger_connected>
    e18a:	b100      	cbz	r0, e18e <nrf52_periph_create_timers+0x1e>
    e18c:	be01      	bkpt	0x0001
    e18e:	2300      	movs	r3, #0
    e190:	461a      	mov	r2, r3
    e192:	4619      	mov	r1, r3
    e194:	4618      	mov	r0, r3
    e196:	f7ff f8e9 	bl	d36c <__assert_func>
    assert(rc == 0);
    e19a:	f7fe f807 	bl	c1ac <hal_debugger_connected>
    e19e:	b100      	cbz	r0, e1a2 <nrf52_periph_create_timers+0x32>
    e1a0:	be01      	bkpt	0x0001
    e1a2:	2300      	movs	r3, #0
    e1a4:	461a      	mov	r2, r3
    e1a6:	4619      	mov	r1, r3
    e1a8:	4618      	mov	r0, r3
    e1aa:	f7ff f8df 	bl	d36c <__assert_func>
    e1ae:	bf00      	nop
    e1b0:	000f4240 	.word	0x000f4240

0000e1b4 <nrf52_periph_create_uart>:
#endif
}

static void
nrf52_periph_create_uart(void)
{
    e1b4:	b500      	push	{lr}
    e1b6:	b083      	sub	sp, #12
    int rc;

    (void)rc;

#if MYNEWT_VAL(UART_0)
    rc = os_dev_create(&os_bsp_uart0.ud_dev, "uart0",
    e1b8:	4b0b      	ldr	r3, [pc, #44]	; (e1e8 <nrf52_periph_create_uart+0x34>)
    e1ba:	9301      	str	r3, [sp, #4]
    e1bc:	4b0b      	ldr	r3, [pc, #44]	; (e1ec <nrf52_periph_create_uart+0x38>)
    e1be:	9300      	str	r3, [sp, #0]
    e1c0:	2300      	movs	r3, #0
    e1c2:	2201      	movs	r2, #1
    e1c4:	490a      	ldr	r1, [pc, #40]	; (e1f0 <nrf52_periph_create_uart+0x3c>)
    e1c6:	480b      	ldr	r0, [pc, #44]	; (e1f4 <nrf52_periph_create_uart+0x40>)
    e1c8:	f7fe fbc4 	bl	c954 <os_dev_create>
                       OS_DEV_INIT_PRIMARY, 0, uart_hal_init,
                       (void *)&os_bsp_uart0_cfg);
    assert(rc == 0);
    e1cc:	b910      	cbnz	r0, e1d4 <nrf52_periph_create_uart+0x20>
    rc = os_dev_create(&os_bsp_uart1.ud_dev, "uart1",
                       OS_DEV_INIT_PRIMARY, 1, uart_hal_init,
                       (void *)&os_bsp_uart1_cfg);
    assert(rc == 0);
#endif
}
    e1ce:	b003      	add	sp, #12
    e1d0:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
    e1d4:	f7fd ffea 	bl	c1ac <hal_debugger_connected>
    e1d8:	b100      	cbz	r0, e1dc <nrf52_periph_create_uart+0x28>
    e1da:	be01      	bkpt	0x0001
    e1dc:	2300      	movs	r3, #0
    e1de:	461a      	mov	r2, r3
    e1e0:	4619      	mov	r1, r3
    e1e2:	4618      	mov	r0, r3
    e1e4:	f7ff f8c2 	bl	d36c <__assert_func>
    e1e8:	0000ec88 	.word	0x0000ec88
    e1ec:	0000e6e9 	.word	0x0000e6e9
    e1f0:	0000ec80 	.word	0x0000ec80
    e1f4:	200020fc 	.word	0x200020fc

0000e1f8 <nrf52_periph_create>:
#endif
}

void
nrf52_periph_create(void)
{
    e1f8:	b508      	push	{r3, lr}
    nrf52_periph_create_timers();
    e1fa:	f7ff ffb9 	bl	e170 <nrf52_periph_create_timers>
    nrf52_periph_create_adc();
    nrf52_periph_create_pwm();
    nrf52_periph_create_trng();
    nrf52_periph_create_crypto();
    nrf52_periph_create_uart();
    e1fe:	f7ff ffd9 	bl	e1b4 <nrf52_periph_create_uart>
    nrf52_periph_create_i2c();
    nrf52_periph_create_spi();
}
    e202:	bd08      	pop	{r3, pc}

0000e204 <nrf_read_timer_cntr>:
nrf_read_timer_cntr(NRF_TIMER_Type *hwtimer)
{
    uint32_t tcntr;

    /* Force a capture of the timer into 'cntr' capture channel; read it */
    hwtimer->TASKS_CAPTURE[NRF_TIMER_CC_READ] = 1;
    e204:	2301      	movs	r3, #1
    e206:	6483      	str	r3, [r0, #72]	; 0x48
    tcntr = hwtimer->CC[NRF_TIMER_CC_READ];
    e208:	f8d0 0548 	ldr.w	r0, [r0, #1352]	; 0x548

    return tcntr;
}
    e20c:	4770      	bx	lr
	...

0000e210 <nrf_timer_set_ocmp>:
 *
 * @param timer Pointer to timer.
 */
static void
nrf_timer_set_ocmp(struct nrf52_hal_timer *bsptimer, uint32_t expiry)
{
    e210:	b538      	push	{r3, r4, r5, lr}
    uint32_t temp;
    uint32_t cntr;
    NRF_TIMER_Type *hwtimer;
    NRF_RTC_Type *rtctimer;

    if (bsptimer->tmr_rtc) {
    e212:	7883      	ldrb	r3, [r0, #2]
    e214:	2b00      	cmp	r3, #0
    e216:	d050      	beq.n	e2ba <nrf_timer_set_ocmp+0xaa>
        rtctimer = (NRF_RTC_Type *)bsptimer->tmr_reg;
    e218:	6902      	ldr	r2, [r0, #16]
        rtctimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
    e21a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    e21e:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
        temp = bsptimer->tmr_cntr;
    e222:	6843      	ldr	r3, [r0, #4]
        cntr = rtctimer->COUNTER;
    e224:	f8d2 4504 	ldr.w	r4, [r2, #1284]	; 0x504
        if (rtctimer->EVENTS_OVRFLW) {
    e228:	f8d2 5104 	ldr.w	r5, [r2, #260]	; 0x104
    e22c:	b11d      	cbz	r5, e236 <nrf_timer_set_ocmp+0x26>
            temp += (1UL << 24);
    e22e:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
            cntr = rtctimer->COUNTER;
    e232:	f8d2 4504 	ldr.w	r4, [r2, #1284]	; 0x504
        }
        temp |= cntr;
    e236:	4323      	orrs	r3, r4
        delta_t = (int32_t)(expiry - temp);
    e238:	1acb      	subs	r3, r1, r3
         * to be handled differently. TICK event is used to have interrupt on
         * each subsequent tick so we won't miss any and in case we detected
         * mentioned extra tick during calculations, interrupt is triggered
         * immediately. Delta 0 or less means we should always fire immediately.
         */
        if (delta_t < 1) {
    e23a:	2b00      	cmp	r3, #0
    e23c:	dd17      	ble.n	e26e <nrf_timer_set_ocmp+0x5e>
            rtctimer->INTENCLR = RTC_INTENCLR_TICK_Msk;
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
        } else if (delta_t < 3) {
    e23e:	2b02      	cmp	r3, #2
    e240:	dc27      	bgt.n	e292 <nrf_timer_set_ocmp+0x82>
            rtctimer->INTENSET = RTC_INTENSET_TICK_Msk;
    e242:	2301      	movs	r3, #1
    e244:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
            if (rtctimer->COUNTER != cntr) {
    e248:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
    e24c:	42a3      	cmp	r3, r4
    e24e:	d02e      	beq.n	e2ae <nrf_timer_set_ocmp+0x9e>
                NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
    e250:	7842      	ldrb	r2, [r0, #1]
    e252:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
    e254:	2b00      	cmp	r3, #0
    e256:	db2a      	blt.n	e2ae <nrf_timer_set_ocmp+0x9e>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    e258:	f002 021f 	and.w	r2, r2, #31
    e25c:	095b      	lsrs	r3, r3, #5
    e25e:	2101      	movs	r1, #1
    e260:	fa01 f202 	lsl.w	r2, r1, r2
    e264:	3340      	adds	r3, #64	; 0x40
    e266:	4926      	ldr	r1, [pc, #152]	; (e300 <nrf_timer_set_ocmp+0xf0>)
    e268:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    e26c:	e01f      	b.n	e2ae <nrf_timer_set_ocmp+0x9e>
            rtctimer->INTENCLR = RTC_INTENCLR_TICK_Msk;
    e26e:	2301      	movs	r3, #1
    e270:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
    e274:	7842      	ldrb	r2, [r0, #1]
    e276:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
    e278:	2b00      	cmp	r3, #0
    e27a:	db18      	blt.n	e2ae <nrf_timer_set_ocmp+0x9e>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    e27c:	f002 021f 	and.w	r2, r2, #31
    e280:	095b      	lsrs	r3, r3, #5
    e282:	2101      	movs	r1, #1
    e284:	fa01 f202 	lsl.w	r2, r1, r2
    e288:	3340      	adds	r3, #64	; 0x40
    e28a:	491d      	ldr	r1, [pc, #116]	; (e300 <nrf_timer_set_ocmp+0xf0>)
    e28c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    e290:	e00d      	b.n	e2ae <nrf_timer_set_ocmp+0x9e>
            }
        } else {
            rtctimer->INTENCLR = RTC_INTENCLR_TICK_Msk;
    e292:	2001      	movs	r0, #1
    e294:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308

            if (delta_t < (1UL << 24)) {
    e298:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    e29c:	d208      	bcs.n	e2b0 <nrf_timer_set_ocmp+0xa0>
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = expiry & 0x00ffffff;
    e29e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    e2a2:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
            } else {
                /* CC too far ahead. Just make sure we set compare far ahead */
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = cntr + (1UL << 23);
            }
            rtctimer->INTENSET = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
    e2a6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    e2aa:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
        /* Force interrupt to occur as we may have missed it */
        if ((int32_t)(nrf_read_timer_cntr(hwtimer) - expiry) >= 0) {
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
        }
    }
}
    e2ae:	bd38      	pop	{r3, r4, r5, pc}
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = cntr + (1UL << 23);
    e2b0:	f504 0400 	add.w	r4, r4, #8388608	; 0x800000
    e2b4:	f8c2 4548 	str.w	r4, [r2, #1352]	; 0x548
    e2b8:	e7f5      	b.n	e2a6 <nrf_timer_set_ocmp+0x96>
    e2ba:	460d      	mov	r5, r1
    e2bc:	4604      	mov	r4, r0
        hwtimer = bsptimer->tmr_reg;
    e2be:	6900      	ldr	r0, [r0, #16]
        hwtimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
    e2c0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
    e2c4:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
        hwtimer->CC[NRF_TIMER_CC_INT] = expiry;
    e2c8:	f8c0 154c 	str.w	r1, [r0, #1356]	; 0x54c
        hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT] = 0;
    e2cc:	2200      	movs	r2, #0
    e2ce:	f8c0 214c 	str.w	r2, [r0, #332]	; 0x14c
        hwtimer->INTENSET = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
    e2d2:	f8c0 3304 	str.w	r3, [r0, #772]	; 0x304
        if ((int32_t)(nrf_read_timer_cntr(hwtimer) - expiry) >= 0) {
    e2d6:	f7ff ff95 	bl	e204 <nrf_read_timer_cntr>
    e2da:	1b40      	subs	r0, r0, r5
    e2dc:	2800      	cmp	r0, #0
    e2de:	dbe6      	blt.n	e2ae <nrf_timer_set_ocmp+0x9e>
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
    e2e0:	7862      	ldrb	r2, [r4, #1]
    e2e2:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
    e2e4:	2b00      	cmp	r3, #0
    e2e6:	dbe2      	blt.n	e2ae <nrf_timer_set_ocmp+0x9e>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    e2e8:	f002 021f 	and.w	r2, r2, #31
    e2ec:	095b      	lsrs	r3, r3, #5
    e2ee:	2101      	movs	r1, #1
    e2f0:	fa01 f202 	lsl.w	r2, r1, r2
    e2f4:	3340      	adds	r3, #64	; 0x40
    e2f6:	4902      	ldr	r1, [pc, #8]	; (e300 <nrf_timer_set_ocmp+0xf0>)
    e2f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    e2fc:	e7d7      	b.n	e2ae <nrf_timer_set_ocmp+0x9e>
    e2fe:	bf00      	nop
    e300:	e000e100 	.word	0xe000e100

0000e304 <nrf_timer_disable_ocmp>:

/* Disable output compare used for timer */
static void
nrf_timer_disable_ocmp(NRF_TIMER_Type *hwtimer)
{
    hwtimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
    e304:	f44f 2300 	mov.w	r3, #524288	; 0x80000
    e308:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
}
    e30c:	4770      	bx	lr

0000e30e <nrf_rtc_disable_ocmp>:

static void
nrf_rtc_disable_ocmp(NRF_RTC_Type *rtctimer)
{
    rtctimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
    e30e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    e312:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
    rtctimer->INTENCLR = RTC_INTENCLR_TICK_Msk;
    e316:	2301      	movs	r3, #1
    e318:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
}
    e31c:	4770      	bx	lr
	...

0000e320 <hal_timer_read_bsptimer>:

static uint32_t
hal_timer_read_bsptimer(struct nrf52_hal_timer *bsptimer)
{
    e320:	b430      	push	{r4, r5}
    uint32_t low32;
    uint32_t ctx;
    uint32_t tcntr;
    NRF_RTC_Type *rtctimer;

    rtctimer = (NRF_RTC_Type *)bsptimer->tmr_reg;
    e322:	6902      	ldr	r2, [r0, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    e324:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    e328:	b672      	cpsid	i
    __HAL_DISABLE_INTERRUPTS(ctx);
    tcntr = bsptimer->tmr_cntr;
    e32a:	6841      	ldr	r1, [r0, #4]
    low32 = rtctimer->COUNTER;
    e32c:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
    if (rtctimer->EVENTS_OVRFLW) {
    e330:	f8d2 5104 	ldr.w	r5, [r2, #260]	; 0x104
    e334:	b1ad      	cbz	r5, e362 <hal_timer_read_bsptimer+0x42>
        tcntr += (1UL << 24);
    e336:	f101 7180 	add.w	r1, r1, #16777216	; 0x1000000
        bsptimer->tmr_cntr = tcntr;
    e33a:	6041      	str	r1, [r0, #4]
        low32 = rtctimer->COUNTER;
    e33c:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
        rtctimer->EVENTS_OVRFLW = 0;
    e340:	2500      	movs	r5, #0
    e342:	f8c2 5104 	str.w	r5, [r2, #260]	; 0x104
        NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
    e346:	7840      	ldrb	r0, [r0, #1]
    e348:	b242      	sxtb	r2, r0
  if ((int32_t)(IRQn) >= 0)
    e34a:	42aa      	cmp	r2, r5
    e34c:	db09      	blt.n	e362 <hal_timer_read_bsptimer+0x42>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    e34e:	f000 001f 	and.w	r0, r0, #31
    e352:	0952      	lsrs	r2, r2, #5
    e354:	2501      	movs	r5, #1
    e356:	fa05 f000 	lsl.w	r0, r5, r0
    e35a:	3240      	adds	r2, #64	; 0x40
    e35c:	4d04      	ldr	r5, [pc, #16]	; (e370 <hal_timer_read_bsptimer+0x50>)
    e35e:	f845 0022 	str.w	r0, [r5, r2, lsl #2]
    }
    tcntr |= low32;
    e362:	ea43 0001 	orr.w	r0, r3, r1
    __HAL_ENABLE_INTERRUPTS(ctx);
    e366:	b904      	cbnz	r4, e36a <hal_timer_read_bsptimer+0x4a>
  __ASM volatile ("cpsie i" : : : "memory");
    e368:	b662      	cpsie	i

    return tcntr;
}
    e36a:	bc30      	pop	{r4, r5}
    e36c:	4770      	bx	lr
    e36e:	bf00      	nop
    e370:	e000e100 	.word	0xe000e100

0000e374 <hal_timer_chk_queue>:
 *
 * @param bsptimer
 */
static void
hal_timer_chk_queue(struct nrf52_hal_timer *bsptimer)
{
    e374:	b570      	push	{r4, r5, r6, lr}
    e376:	4605      	mov	r5, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    e378:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    e37c:	b672      	cpsid	i
    e37e:	e012      	b.n	e3a6 <hal_timer_chk_queue+0x32>
    __HAL_DISABLE_INTERRUPTS(ctx);
    while ((timer = TAILQ_FIRST(&bsptimer->hal_timer_q)) != NULL) {
        if (bsptimer->tmr_rtc) {
            tcntr = hal_timer_read_bsptimer(bsptimer);
        } else {
            tcntr = nrf_read_timer_cntr(bsptimer->tmr_reg);
    e380:	6928      	ldr	r0, [r5, #16]
    e382:	f7ff ff3f 	bl	e204 <nrf_read_timer_cntr>
        }
        if ((int32_t)(tcntr - timer->expiry) >= 0) {
    e386:	68e3      	ldr	r3, [r4, #12]
    e388:	1ac0      	subs	r0, r0, r3
    e38a:	2800      	cmp	r0, #0
    e38c:	db17      	blt.n	e3be <hal_timer_chk_queue+0x4a>
            TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
    e38e:	6923      	ldr	r3, [r4, #16]
    e390:	b193      	cbz	r3, e3b8 <hal_timer_chk_queue+0x44>
    e392:	6962      	ldr	r2, [r4, #20]
    e394:	615a      	str	r2, [r3, #20]
    e396:	6963      	ldr	r3, [r4, #20]
    e398:	6922      	ldr	r2, [r4, #16]
    e39a:	601a      	str	r2, [r3, #0]
            timer->link.tqe_prev = NULL;
    e39c:	2300      	movs	r3, #0
    e39e:	6163      	str	r3, [r4, #20]
            timer->cb_func(timer->cb_arg);
    e3a0:	6863      	ldr	r3, [r4, #4]
    e3a2:	68a0      	ldr	r0, [r4, #8]
    e3a4:	4798      	blx	r3
    while ((timer = TAILQ_FIRST(&bsptimer->hal_timer_q)) != NULL) {
    e3a6:	696c      	ldr	r4, [r5, #20]
    e3a8:	b14c      	cbz	r4, e3be <hal_timer_chk_queue+0x4a>
        if (bsptimer->tmr_rtc) {
    e3aa:	78ab      	ldrb	r3, [r5, #2]
    e3ac:	2b00      	cmp	r3, #0
    e3ae:	d0e7      	beq.n	e380 <hal_timer_chk_queue+0xc>
            tcntr = hal_timer_read_bsptimer(bsptimer);
    e3b0:	4628      	mov	r0, r5
    e3b2:	f7ff ffb5 	bl	e320 <hal_timer_read_bsptimer>
    e3b6:	e7e6      	b.n	e386 <hal_timer_chk_queue+0x12>
            TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
    e3b8:	6963      	ldr	r3, [r4, #20]
    e3ba:	61ab      	str	r3, [r5, #24]
    e3bc:	e7eb      	b.n	e396 <hal_timer_chk_queue+0x22>
            break;
        }
    }

    /* Any timers left on queue? If so, we need to set OCMP */
    timer = TAILQ_FIRST(&bsptimer->hal_timer_q);
    e3be:	696b      	ldr	r3, [r5, #20]
    if (timer) {
    e3c0:	b133      	cbz	r3, e3d0 <hal_timer_chk_queue+0x5c>
        nrf_timer_set_ocmp(bsptimer, timer->expiry);
    e3c2:	68d9      	ldr	r1, [r3, #12]
    e3c4:	4628      	mov	r0, r5
    e3c6:	f7ff ff23 	bl	e210 <nrf_timer_set_ocmp>
            nrf_rtc_disable_ocmp((NRF_RTC_Type *)bsptimer->tmr_reg);
        } else {
            nrf_timer_disable_ocmp(bsptimer->tmr_reg);
        }
    }
    __HAL_ENABLE_INTERRUPTS(ctx);
    e3ca:	b906      	cbnz	r6, e3ce <hal_timer_chk_queue+0x5a>
  __ASM volatile ("cpsie i" : : : "memory");
    e3cc:	b662      	cpsie	i
}
    e3ce:	bd70      	pop	{r4, r5, r6, pc}
        if (bsptimer->tmr_rtc) {
    e3d0:	78ab      	ldrb	r3, [r5, #2]
    e3d2:	b11b      	cbz	r3, e3dc <hal_timer_chk_queue+0x68>
            nrf_rtc_disable_ocmp((NRF_RTC_Type *)bsptimer->tmr_reg);
    e3d4:	6928      	ldr	r0, [r5, #16]
    e3d6:	f7ff ff9a 	bl	e30e <nrf_rtc_disable_ocmp>
    e3da:	e7f6      	b.n	e3ca <hal_timer_chk_queue+0x56>
            nrf_timer_disable_ocmp(bsptimer->tmr_reg);
    e3dc:	6928      	ldr	r0, [r5, #16]
    e3de:	f7ff ff91 	bl	e304 <nrf_timer_disable_ocmp>
    e3e2:	e7f2      	b.n	e3ca <hal_timer_chk_queue+0x56>

0000e3e4 <hal_timer_irq_handler>:
#if (MYNEWT_VAL(TIMER_0) || MYNEWT_VAL(TIMER_1) || MYNEWT_VAL(TIMER_2) || \
     MYNEWT_VAL(TIMER_3) || MYNEWT_VAL(TIMER_4))

static void
hal_timer_irq_handler(struct nrf52_hal_timer *bsptimer)
{
    e3e4:	b510      	push	{r4, lr}
    NRF_TIMER_Type *hwtimer;

    os_trace_isr_enter();

    /* Check interrupt source. If set, clear them */
    hwtimer = bsptimer->tmr_reg;
    e3e6:	6904      	ldr	r4, [r0, #16]
    compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
    e3e8:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
    if (compare) {
    e3ec:	b113      	cbz	r3, e3f4 <hal_timer_irq_handler+0x10>
        hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT] = 0;
    e3ee:	2300      	movs	r3, #0
    e3f0:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
    }

    /* XXX: make these stats? */
    /* Count # of timer isrs */
    ++bsptimer->timer_isrs;
    e3f4:	6883      	ldr	r3, [r0, #8]
    e3f6:	3301      	adds	r3, #1
    e3f8:	6083      	str	r3, [r0, #8]
     * counter is already passed the output compare value), we use the NVIC
     * to set a pending interrupt. This means that there will be no compare
     * flag set, so all we do is check to see if the compare interrupt is
     * enabled.
     */
    if (hwtimer->INTENCLR & NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT)) {
    e3fa:	f8d4 3308 	ldr.w	r3, [r4, #776]	; 0x308
    e3fe:	f413 2f00 	tst.w	r3, #524288	; 0x80000
    e402:	d100      	bne.n	e406 <hal_timer_irq_handler+0x22>
        /* XXX: Recommended by nordic to make sure interrupts are cleared */
        compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
    }

    os_trace_isr_exit();
}
    e404:	bd10      	pop	{r4, pc}
        hal_timer_chk_queue(bsptimer);
    e406:	f7ff ffb5 	bl	e374 <hal_timer_chk_queue>
        compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
    e40a:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
}
    e40e:	e7f9      	b.n	e404 <hal_timer_irq_handler+0x20>

0000e410 <nrf52_timer0_irq_handler>:
#endif

#if MYNEWT_VAL(TIMER_0)
void
nrf52_timer0_irq_handler(void)
{
    e410:	b508      	push	{r3, lr}
    hal_timer_irq_handler(&nrf52_hal_timer0);
    e412:	4802      	ldr	r0, [pc, #8]	; (e41c <nrf52_timer0_irq_handler+0xc>)
    e414:	f7ff ffe6 	bl	e3e4 <hal_timer_irq_handler>
}
    e418:	bd08      	pop	{r3, pc}
    e41a:	bf00      	nop
    e41c:	20002268 	.word	0x20002268

0000e420 <hal_timer_init>:
    uint8_t irq_num;
    struct nrf52_hal_timer *bsptimer;
    void *hwtimer;
    hal_timer_irq_handler_t irq_isr;

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
    e420:	2805      	cmp	r0, #5
    e422:	dc1c      	bgt.n	e45e <hal_timer_init+0x3e>
    e424:	4b12      	ldr	r3, [pc, #72]	; (e470 <hal_timer_init+0x50>)
    e426:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    e42a:	b1d3      	cbz	r3, e462 <hal_timer_init+0x42>

    /* If timer is enabled do not allow init */
    if (bsptimer->tmr_enabled) {
    e42c:	781a      	ldrb	r2, [r3, #0]
    e42e:	b9d2      	cbnz	r2, e466 <hal_timer_init+0x46>
        rc = EINVAL;
        goto err;
    }

    switch (timer_num) {
    e430:	b9d8      	cbnz	r0, e46a <hal_timer_init+0x4a>
    if (hwtimer == NULL) {
        rc = EINVAL;
        goto err;
    }

    bsptimer->tmr_reg = hwtimer;
    e432:	4a10      	ldr	r2, [pc, #64]	; (e474 <hal_timer_init+0x54>)
    e434:	611a      	str	r2, [r3, #16]
    bsptimer->tmr_irq_num = irq_num;
    e436:	2208      	movs	r2, #8
    e438:	705a      	strb	r2, [r3, #1]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    e43a:	4b0f      	ldr	r3, [pc, #60]	; (e478 <hal_timer_init+0x58>)
    e43c:	f44f 7280 	mov.w	r2, #256	; 0x100
    e440:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    e444:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    e448:	f3bf 8f6f 	isb	sy
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    e44c:	22e0      	movs	r2, #224	; 0xe0
    e44e:	f883 2308 	strb.w	r2, [r3, #776]	; 0x308
  uint32_t vectors = (uint32_t )SCB->VTOR;
    e452:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
    e456:	689b      	ldr	r3, [r3, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
    e458:	4a08      	ldr	r2, [pc, #32]	; (e47c <hal_timer_init+0x5c>)
    e45a:	661a      	str	r2, [r3, #96]	; 0x60
    /* Disable IRQ, set priority and set vector in table */
    NVIC_DisableIRQ(irq_num);
    NVIC_SetPriority(irq_num, (1 << __NVIC_PRIO_BITS) - 1);
    NVIC_SetVector(irq_num, (uint32_t)irq_isr);

    return 0;
    e45c:	4770      	bx	lr

err:
    return rc;
    e45e:	2016      	movs	r0, #22
    e460:	4770      	bx	lr
    e462:	2016      	movs	r0, #22
    e464:	4770      	bx	lr
    e466:	2016      	movs	r0, #22
    e468:	4770      	bx	lr
    e46a:	2016      	movs	r0, #22
}
    e46c:	4770      	bx	lr
    e46e:	bf00      	nop
    e470:	0000ec8c 	.word	0x0000ec8c
    e474:	40008000 	.word	0x40008000
    e478:	e000e100 	.word	0xe000e100
    e47c:	0000e411 	.word	0x0000e411

0000e480 <hal_timer_config>:
    NRF_TIMER_Type *hwtimer;
#if MYNEWT_VAL(TIMER_5)
    NRF_RTC_Type *rtctimer;
#endif

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
    e480:	2805      	cmp	r0, #5
    e482:	dc65      	bgt.n	e550 <hal_timer_config+0xd0>
    e484:	4b39      	ldr	r3, [pc, #228]	; (e56c <hal_timer_config+0xec>)
    e486:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    e48a:	2800      	cmp	r0, #0
    e48c:	d062      	beq.n	e554 <hal_timer_config+0xd4>
        return 0;
    }
#endif

    /* Set timer to desired frequency */
    div = NRF52_MAX_TIMER_FREQ / freq_hz;
    e48e:	4b38      	ldr	r3, [pc, #224]	; (e570 <hal_timer_config+0xf0>)
    e490:	fbb3 f1f1 	udiv	r1, r3, r1
    /*
     * Largest prescaler is 2^9 and must make sure frequency not too high.
     * If hwtimer is NULL it means that the timer was not initialized prior
     * to call.
     */
    if (bsptimer->tmr_enabled || (div == 0) || (div > 512) ||
    e494:	7803      	ldrb	r3, [r0, #0]
    e496:	2b00      	cmp	r3, #0
    e498:	d15e      	bne.n	e558 <hal_timer_config+0xd8>
    e49a:	2900      	cmp	r1, #0
    e49c:	d05e      	beq.n	e55c <hal_timer_config+0xdc>
    e49e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    e4a2:	d85d      	bhi.n	e560 <hal_timer_config+0xe0>
        (bsptimer->tmr_reg == NULL)) {
    e4a4:	6902      	ldr	r2, [r0, #16]
    if (bsptimer->tmr_enabled || (div == 0) || (div > 512) ||
    e4a6:	2a00      	cmp	r2, #0
    e4a8:	d05c      	beq.n	e564 <hal_timer_config+0xe4>
{
    e4aa:	b430      	push	{r4, r5}
        rc = EINVAL;
        goto err;
    }

    if (div == 1) {
    e4ac:	2901      	cmp	r1, #1
    e4ae:	d013      	beq.n	e4d8 <hal_timer_config+0x58>
        prescaler = 0;
    } else {
        /* Find closest prescaler */
        for (prescaler = 1; prescaler < 10; ++prescaler) {
    e4b0:	2301      	movs	r3, #1
    e4b2:	2b09      	cmp	r3, #9
    e4b4:	d810      	bhi.n	e4d8 <hal_timer_config+0x58>
            if (div <= (1 << prescaler)) {
    e4b6:	2201      	movs	r2, #1
    e4b8:	409a      	lsls	r2, r3
    e4ba:	428a      	cmp	r2, r1
    e4bc:	d202      	bcs.n	e4c4 <hal_timer_config+0x44>
        for (prescaler = 1; prescaler < 10; ++prescaler) {
    e4be:	3301      	adds	r3, #1
    e4c0:	b2db      	uxtb	r3, r3
    e4c2:	e7f6      	b.n	e4b2 <hal_timer_config+0x32>
                min_delta = div - (1 << (prescaler - 1));
    e4c4:	1e5c      	subs	r4, r3, #1
    e4c6:	2501      	movs	r5, #1
    e4c8:	fa05 f404 	lsl.w	r4, r5, r4
    e4cc:	1b0c      	subs	r4, r1, r4
                max_delta = (1 << prescaler) - div;
    e4ce:	1a51      	subs	r1, r2, r1
                if (min_delta < max_delta) {
    e4d0:	428c      	cmp	r4, r1
    e4d2:	d201      	bcs.n	e4d8 <hal_timer_config+0x58>
                    prescaler -= 1;
    e4d4:	3b01      	subs	r3, #1
    e4d6:	b2db      	uxtb	r3, r3
            }
        }
    }

    /* Now set the actual frequency */
    bsptimer->tmr_freq = NRF52_MAX_TIMER_FREQ / (1 << prescaler);
    e4d8:	4a25      	ldr	r2, [pc, #148]	; (e570 <hal_timer_config+0xf0>)
    e4da:	411a      	asrs	r2, r3
    e4dc:	60c2      	str	r2, [r0, #12]
    bsptimer->tmr_enabled = 1;
    e4de:	2201      	movs	r2, #1
    e4e0:	7002      	strb	r2, [r0, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    e4e2:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    e4e6:	b672      	cpsid	i

    /* disable interrupts */
    __HAL_DISABLE_INTERRUPTS(ctx);

    /* Make sure HFXO is started */
    if ((NRF_CLOCK->HFCLKSTAT &
    e4e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    e4ec:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
    e4f0:	f002 1201 	and.w	r2, r2, #65537	; 0x10001
    e4f4:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
    e4f8:	d00c      	beq.n	e514 <hal_timer_config+0x94>
         (CLOCK_HFCLKSTAT_SRC_Msk | CLOCK_HFCLKSTAT_STATE_Msk)) !=
        (CLOCK_HFCLKSTAT_SRC_Msk | CLOCK_HFCLKSTAT_STATE_Msk)) {
        NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    e4fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    e4fe:	2100      	movs	r1, #0
    e500:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
        NRF_CLOCK->TASKS_HFCLKSTART = 1;
    e504:	2101      	movs	r1, #1
    e506:	6011      	str	r1, [r2, #0]
        while (1) {
            if ((NRF_CLOCK->EVENTS_HFCLKSTARTED) != 0) {
    e508:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    e50c:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
    e510:	2a00      	cmp	r2, #0
    e512:	d0f9      	beq.n	e508 <hal_timer_config+0x88>
                break;
            }
        }
    }
    hwtimer = bsptimer->tmr_reg;
    e514:	6902      	ldr	r2, [r0, #16]

    /* Stop the timer first */
    hwtimer->TASKS_STOP = 1;
    e516:	2101      	movs	r1, #1
    e518:	6051      	str	r1, [r2, #4]
    hwtimer->TASKS_CLEAR = 1;
    e51a:	60d1      	str	r1, [r2, #12]

    /* Put the timer in timer mode using 32 bits. */
    hwtimer->MODE = TIMER_MODE_MODE_Timer;
    e51c:	2500      	movs	r5, #0
    e51e:	f8c2 5504 	str.w	r5, [r2, #1284]	; 0x504
    hwtimer->BITMODE = TIMER_BITMODE_BITMODE_32Bit;
    e522:	2503      	movs	r5, #3
    e524:	f8c2 5508 	str.w	r5, [r2, #1288]	; 0x508

    /* Set the pre-scalar */
    hwtimer->PRESCALER = prescaler;
    e528:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510

    /* Start the timer */
    hwtimer->TASKS_START = 1;
    e52c:	6011      	str	r1, [r2, #0]

    NVIC_EnableIRQ(bsptimer->tmr_irq_num);
    e52e:	7842      	ldrb	r2, [r0, #1]
    e530:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
    e532:	2b00      	cmp	r3, #0
    e534:	db07      	blt.n	e546 <hal_timer_config+0xc6>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    e536:	f002 021f 	and.w	r2, r2, #31
    e53a:	095b      	lsrs	r3, r3, #5
    e53c:	fa01 f202 	lsl.w	r2, r1, r2
    e540:	490c      	ldr	r1, [pc, #48]	; (e574 <hal_timer_config+0xf4>)
    e542:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    __HAL_ENABLE_INTERRUPTS(ctx);
    e546:	b97c      	cbnz	r4, e568 <hal_timer_config+0xe8>
  __ASM volatile ("cpsie i" : : : "memory");
    e548:	b662      	cpsie	i

    return 0;
    e54a:	2000      	movs	r0, #0

err:
    return rc;
}
    e54c:	bc30      	pop	{r4, r5}
    e54e:	4770      	bx	lr
    return rc;
    e550:	2016      	movs	r0, #22
    e552:	4770      	bx	lr
    e554:	2016      	movs	r0, #22
    e556:	4770      	bx	lr
    e558:	2016      	movs	r0, #22
    e55a:	4770      	bx	lr
    e55c:	2016      	movs	r0, #22
    e55e:	4770      	bx	lr
    e560:	2016      	movs	r0, #22
    e562:	4770      	bx	lr
    e564:	2016      	movs	r0, #22
}
    e566:	4770      	bx	lr
    return 0;
    e568:	2000      	movs	r0, #0
    e56a:	e7ef      	b.n	e54c <hal_timer_config+0xcc>
    e56c:	0000ec8c 	.word	0x0000ec8c
    e570:	00f42400 	.word	0x00f42400
    e574:	e000e100 	.word	0xe000e100

0000e578 <os_cputime_init>:
struct os_cputime_data g_os_cputime;
#endif

int
os_cputime_init(uint32_t clock_freq)
{
    e578:	b508      	push	{r3, lr}

    /* Set the ticks per microsecond. */
#if defined(OS_CPUTIME_FREQ_HIGH)
    g_os_cputime.ticks_per_usec = clock_freq / 1000000U;
#endif
    rc = hal_timer_config(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM), clock_freq);
    e57a:	4601      	mov	r1, r0
    e57c:	2000      	movs	r0, #0
    e57e:	f7ff ff7f 	bl	e480 <hal_timer_config>
    return rc;
}
    e582:	bd08      	pop	{r3, pc}

0000e584 <uart_hal_blocking_tx>:
    hal_uart_start_rx(uart_hal_dev_get_id(dev));
}

static void
uart_hal_blocking_tx(struct uart_dev *dev, uint8_t byte)
{
    e584:	b508      	push	{r3, lr}
    assert(dev->ud_priv);
    e586:	6b80      	ldr	r0, [r0, #56]	; 0x38
    e588:	b118      	cbz	r0, e592 <uart_hal_blocking_tx+0xe>

    hal_uart_blocking_tx(uart_hal_dev_get_id(dev), byte);
    e58a:	3801      	subs	r0, #1
    e58c:	f000 fa2a 	bl	e9e4 <hal_uart_blocking_tx>
}
    e590:	bd08      	pop	{r3, pc}
    assert(dev->ud_priv);
    e592:	f7fd fe0b 	bl	c1ac <hal_debugger_connected>
    e596:	b100      	cbz	r0, e59a <uart_hal_blocking_tx+0x16>
    e598:	be01      	bkpt	0x0001
    e59a:	2300      	movs	r3, #0
    e59c:	461a      	mov	r2, r3
    e59e:	4619      	mov	r1, r3
    e5a0:	4618      	mov	r0, r3
    e5a2:	f7fe fee3 	bl	d36c <__assert_func>

0000e5a6 <uart_hal_start_rx>:
{
    e5a6:	b508      	push	{r3, lr}
    assert(dev->ud_priv);
    e5a8:	6b80      	ldr	r0, [r0, #56]	; 0x38
    e5aa:	b118      	cbz	r0, e5b4 <uart_hal_start_rx+0xe>
    hal_uart_start_rx(uart_hal_dev_get_id(dev));
    e5ac:	3801      	subs	r0, #1
    e5ae:	f000 f9f3 	bl	e998 <hal_uart_start_rx>
}
    e5b2:	bd08      	pop	{r3, pc}
    assert(dev->ud_priv);
    e5b4:	f7fd fdfa 	bl	c1ac <hal_debugger_connected>
    e5b8:	b100      	cbz	r0, e5bc <uart_hal_start_rx+0x16>
    e5ba:	be01      	bkpt	0x0001
    e5bc:	2300      	movs	r3, #0
    e5be:	461a      	mov	r2, r3
    e5c0:	4619      	mov	r1, r3
    e5c2:	4618      	mov	r0, r3
    e5c4:	f7fe fed2 	bl	d36c <__assert_func>

0000e5c8 <uart_hal_start_tx>:
{
    e5c8:	b508      	push	{r3, lr}
    assert(dev->ud_priv);
    e5ca:	6b80      	ldr	r0, [r0, #56]	; 0x38
    e5cc:	b118      	cbz	r0, e5d6 <uart_hal_start_tx+0xe>
    hal_uart_start_tx(uart_hal_dev_get_id(dev));
    e5ce:	3801      	subs	r0, #1
    e5d0:	f000 f9b2 	bl	e938 <hal_uart_start_tx>
}
    e5d4:	bd08      	pop	{r3, pc}
    assert(dev->ud_priv);
    e5d6:	f7fd fde9 	bl	c1ac <hal_debugger_connected>
    e5da:	b100      	cbz	r0, e5de <uart_hal_start_tx+0x16>
    e5dc:	be01      	bkpt	0x0001
    e5de:	2300      	movs	r3, #0
    e5e0:	461a      	mov	r2, r3
    e5e2:	4619      	mov	r1, r3
    e5e4:	4618      	mov	r0, r3
    e5e6:	f7fe fec1 	bl	d36c <__assert_func>

0000e5ea <uart_hal_resume>:
    return OS_OK;
}

static int
uart_hal_resume(struct os_dev *odev)
{
    e5ea:	b530      	push	{r4, r5, lr}
    e5ec:	b083      	sub	sp, #12
    return (intptr_t)(dev->ud_priv) - 1;
    e5ee:	6b84      	ldr	r4, [r0, #56]	; 0x38
    struct uart_dev *dev = (struct uart_dev *)odev;
    struct uart_conf_port *ucp = &dev->ud_conf_port;
    int rc;

    rc = hal_uart_config(uart_hal_dev_get_id(dev), ucp->uc_speed,
    e5f0:	6b01      	ldr	r1, [r0, #48]	; 0x30
    e5f2:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
    e5f6:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
                         ucp->uc_databits, ucp->uc_stopbits,
                         (enum hal_uart_parity)ucp->uc_parity,
    e5fa:	f890 5036 	ldrb.w	r5, [r0, #54]	; 0x36
                         (enum hal_uart_flow_ctl)ucp->uc_flow_ctl);
    e5fe:	f890 0037 	ldrb.w	r0, [r0, #55]	; 0x37
    rc = hal_uart_config(uart_hal_dev_get_id(dev), ucp->uc_speed,
    e602:	9001      	str	r0, [sp, #4]
    e604:	9500      	str	r5, [sp, #0]
    e606:	1e60      	subs	r0, r4, #1
    e608:	f000 fa4c 	bl	eaa4 <hal_uart_config>
    if (rc) {
    e60c:	4603      	mov	r3, r0
    e60e:	b910      	cbnz	r0, e616 <uart_hal_resume+0x2c>
        return OS_EINVAL;
    }

    return OS_OK;
}
    e610:	4618      	mov	r0, r3
    e612:	b003      	add	sp, #12
    e614:	bd30      	pop	{r4, r5, pc}
        return OS_EINVAL;
    e616:	2302      	movs	r3, #2
    e618:	e7fa      	b.n	e610 <uart_hal_resume+0x26>

0000e61a <uart_hal_suspend>:
{
    e61a:	b570      	push	{r4, r5, r6, lr}
    e61c:	4606      	mov	r6, r0
    e61e:	460c      	mov	r4, r1
    e620:	4615      	mov	r5, r2
    if (OS_TIME_TICK_GT(suspend_at, os_time_get()) || !force) {
    e622:	f7fe fd89 	bl	d138 <os_time_get>
    e626:	1a20      	subs	r0, r4, r0
    e628:	2800      	cmp	r0, #0
    e62a:	dc08      	bgt.n	e63e <uart_hal_suspend+0x24>
    e62c:	b155      	cbz	r5, e644 <uart_hal_suspend+0x2a>
    return (intptr_t)(dev->ud_priv) - 1;
    e62e:	6bb0      	ldr	r0, [r6, #56]	; 0x38
    rc = hal_uart_close(uart_hal_dev_get_id(dev));
    e630:	3801      	subs	r0, #1
    e632:	f000 fab7 	bl	eba4 <hal_uart_close>
    if (rc) {
    e636:	4603      	mov	r3, r0
    e638:	b110      	cbz	r0, e640 <uart_hal_suspend+0x26>
        return OS_EINVAL;
    e63a:	2302      	movs	r3, #2
    e63c:	e000      	b.n	e640 <uart_hal_suspend+0x26>
        return OS_EINVAL;
    e63e:	2302      	movs	r3, #2
}
    e640:	4618      	mov	r0, r3
    e642:	bd70      	pop	{r4, r5, r6, pc}
        return OS_EINVAL;
    e644:	2302      	movs	r3, #2
    e646:	e7fb      	b.n	e640 <uart_hal_suspend+0x26>

0000e648 <uart_hal_close>:
{
    e648:	b508      	push	{r3, lr}
    return (intptr_t)(dev->ud_priv) - 1;
    e64a:	6b80      	ldr	r0, [r0, #56]	; 0x38
    rc = hal_uart_close(uart_hal_dev_get_id(dev));
    e64c:	3801      	subs	r0, #1
    e64e:	f000 faa9 	bl	eba4 <hal_uart_close>
    if (rc) {
    e652:	4603      	mov	r3, r0
    e654:	b908      	cbnz	r0, e65a <uart_hal_close+0x12>
}
    e656:	4618      	mov	r0, r3
    e658:	bd08      	pop	{r3, pc}
        return OS_EINVAL;
    e65a:	2302      	movs	r3, #2
    e65c:	e7fb      	b.n	e656 <uart_hal_close+0xe>

0000e65e <uart_hal_open>:
{
    e65e:	b530      	push	{r4, r5, lr}
    e660:	b083      	sub	sp, #12
    e662:	4605      	mov	r5, r0
    assert(dev->ud_priv);
    e664:	6b80      	ldr	r0, [r0, #56]	; 0x38
    e666:	2800      	cmp	r0, #0
    e668:	d02c      	beq.n	e6c4 <uart_hal_open+0x66>
    e66a:	4614      	mov	r4, r2
    if (!uc) {
    e66c:	2a00      	cmp	r2, #0
    e66e:	d033      	beq.n	e6d8 <uart_hal_open+0x7a>
    if (odev->od_flags & OS_DEV_F_STATUS_OPEN) {
    e670:	7eeb      	ldrb	r3, [r5, #27]
    e672:	f013 0f02 	tst.w	r3, #2
    e676:	d131      	bne.n	e6dc <uart_hal_open+0x7e>
    dev->ud_conf_port.uc_databits = uc->uc_databits;
    e678:	7913      	ldrb	r3, [r2, #4]
    e67a:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
    dev->ud_conf_port.uc_flow_ctl = uc->uc_flow_ctl;
    e67e:	79d3      	ldrb	r3, [r2, #7]
    e680:	f885 3037 	strb.w	r3, [r5, #55]	; 0x37
    dev->ud_conf_port.uc_parity = uc->uc_parity;
    e684:	7993      	ldrb	r3, [r2, #6]
    e686:	f885 3036 	strb.w	r3, [r5, #54]	; 0x36
    dev->ud_conf_port.uc_speed = uc->uc_speed;
    e68a:	6813      	ldr	r3, [r2, #0]
    e68c:	632b      	str	r3, [r5, #48]	; 0x30
    dev->ud_conf_port.uc_stopbits = uc->uc_stopbits;
    e68e:	7953      	ldrb	r3, [r2, #5]
    e690:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
    rc = hal_uart_init_cbs(uart_hal_dev_get_id(dev), uc->uc_tx_char, uc->uc_tx_done,
    e694:	6953      	ldr	r3, [r2, #20]
    e696:	9300      	str	r3, [sp, #0]
    e698:	68d3      	ldr	r3, [r2, #12]
    e69a:	6912      	ldr	r2, [r2, #16]
    e69c:	68a1      	ldr	r1, [r4, #8]
    e69e:	3801      	subs	r0, #1
    e6a0:	f000 f92c 	bl	e8fc <hal_uart_init_cbs>
    if (rc) {
    e6a4:	b9f0      	cbnz	r0, e6e4 <uart_hal_open+0x86>
    return (intptr_t)(dev->ud_priv) - 1;
    e6a6:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    rc = hal_uart_config(uart_hal_dev_get_id(dev), uc->uc_speed, uc->uc_databits,
    e6a8:	6821      	ldr	r1, [r4, #0]
    e6aa:	7922      	ldrb	r2, [r4, #4]
    e6ac:	7963      	ldrb	r3, [r4, #5]
      uc->uc_stopbits, (enum hal_uart_parity)uc->uc_parity, (enum hal_uart_flow_ctl)uc->uc_flow_ctl);
    e6ae:	79a5      	ldrb	r5, [r4, #6]
    e6b0:	79e4      	ldrb	r4, [r4, #7]
    rc = hal_uart_config(uart_hal_dev_get_id(dev), uc->uc_speed, uc->uc_databits,
    e6b2:	9401      	str	r4, [sp, #4]
    e6b4:	9500      	str	r5, [sp, #0]
    e6b6:	3801      	subs	r0, #1
    e6b8:	f000 f9f4 	bl	eaa4 <hal_uart_config>
    if (rc) {
    e6bc:	4603      	mov	r3, r0
    e6be:	b170      	cbz	r0, e6de <uart_hal_open+0x80>
        return OS_EINVAL;
    e6c0:	2302      	movs	r3, #2
    e6c2:	e00c      	b.n	e6de <uart_hal_open+0x80>
    assert(dev->ud_priv);
    e6c4:	f7fd fd72 	bl	c1ac <hal_debugger_connected>
    e6c8:	b100      	cbz	r0, e6cc <uart_hal_open+0x6e>
    e6ca:	be01      	bkpt	0x0001
    e6cc:	2300      	movs	r3, #0
    e6ce:	461a      	mov	r2, r3
    e6d0:	4619      	mov	r1, r3
    e6d2:	4618      	mov	r0, r3
    e6d4:	f7fe fe4a 	bl	d36c <__assert_func>
        return OS_EINVAL;
    e6d8:	2302      	movs	r3, #2
    e6da:	e000      	b.n	e6de <uart_hal_open+0x80>
        return OS_EBUSY;
    e6dc:	230b      	movs	r3, #11
}
    e6de:	4618      	mov	r0, r3
    e6e0:	b003      	add	sp, #12
    e6e2:	bd30      	pop	{r4, r5, pc}
        return OS_EINVAL;
    e6e4:	2302      	movs	r3, #2
    e6e6:	e7fa      	b.n	e6de <uart_hal_open+0x80>

0000e6e8 <uart_hal_init>:
/*
 * Arg points to BSP specific UART configuration.
 */
int
uart_hal_init(struct os_dev *odev, void *arg)
{
    e6e8:	b570      	push	{r4, r5, r6, lr}
    e6ea:	4604      	mov	r4, r0
    e6ec:	460e      	mov	r6, r1
    struct uart_dev *dev;
    char ch;

    dev = (struct uart_dev *)odev;

    ch = odev->od_name[strlen(odev->od_name) - 1];
    e6ee:	69c5      	ldr	r5, [r0, #28]
    e6f0:	4628      	mov	r0, r5
    e6f2:	f7fe ffc2 	bl	d67a <strlen>
    e6f6:	3801      	subs	r0, #1
    e6f8:	5c28      	ldrb	r0, [r5, r0]
    if (!isdigit((int) ch)) {
    e6fa:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    e6fe:	2b09      	cmp	r3, #9
    e700:	d816      	bhi.n	e730 <uart_hal_init+0x48>
    dev->ud_priv = (void *)((intptr_t)(id + 1));
    e702:	f1a0 032f 	sub.w	r3, r0, #47	; 0x2f
    e706:	63a3      	str	r3, [r4, #56]	; 0x38
        return OS_EINVAL;
    }
    uart_hal_dev_set_id(dev, ch - '0');

    OS_DEV_SETHANDLERS(odev, uart_hal_open, uart_hal_close);
    e708:	4b0a      	ldr	r3, [pc, #40]	; (e734 <uart_hal_init+0x4c>)
    e70a:	6023      	str	r3, [r4, #0]
    e70c:	4b0a      	ldr	r3, [pc, #40]	; (e738 <uart_hal_init+0x50>)
    e70e:	60e3      	str	r3, [r4, #12]
    odev->od_handlers.od_suspend = uart_hal_suspend;
    e710:	4b0a      	ldr	r3, [pc, #40]	; (e73c <uart_hal_init+0x54>)
    e712:	6063      	str	r3, [r4, #4]
    odev->od_handlers.od_resume = uart_hal_resume;
    e714:	4b0a      	ldr	r3, [pc, #40]	; (e740 <uart_hal_init+0x58>)
    e716:	60a3      	str	r3, [r4, #8]

    dev->ud_funcs.uf_start_tx = uart_hal_start_tx;
    e718:	4b0a      	ldr	r3, [pc, #40]	; (e744 <uart_hal_init+0x5c>)
    e71a:	6263      	str	r3, [r4, #36]	; 0x24
    dev->ud_funcs.uf_start_rx = uart_hal_start_rx;
    e71c:	4b0a      	ldr	r3, [pc, #40]	; (e748 <uart_hal_init+0x60>)
    e71e:	62a3      	str	r3, [r4, #40]	; 0x28
    dev->ud_funcs.uf_blocking_tx = uart_hal_blocking_tx;
    e720:	4b0a      	ldr	r3, [pc, #40]	; (e74c <uart_hal_init+0x64>)
    e722:	62e3      	str	r3, [r4, #44]	; 0x2c

    hal_uart_init(uart_hal_dev_get_id(dev), arg);
    e724:	4631      	mov	r1, r6
    e726:	3830      	subs	r0, #48	; 0x30
    e728:	f000 f98e 	bl	ea48 <hal_uart_init>

    return OS_OK;
    e72c:	2000      	movs	r0, #0
}
    e72e:	bd70      	pop	{r4, r5, r6, pc}
        return OS_EINVAL;
    e730:	2002      	movs	r0, #2
    e732:	e7fc      	b.n	e72e <uart_hal_init+0x46>
    e734:	0000e65f 	.word	0x0000e65f
    e738:	0000e649 	.word	0x0000e649
    e73c:	0000e61b 	.word	0x0000e61b
    e740:	0000e5eb 	.word	0x0000e5eb
    e744:	0000e5c9 	.word	0x0000e5c9
    e748:	0000e5a7 	.word	0x0000e5a7
    e74c:	0000e585 	.word	0x0000e585

0000e750 <hal_uart_tx_fill_buf>:
    return 0;
}

static int
hal_uart_tx_fill_buf(struct hal_uart *u)
{
    e750:	b538      	push	{r3, r4, r5, lr}
    e752:	4605      	mov	r5, r0
    int data;
    int i;

    for (i = 0; i < sizeof(u->u_tx_buf); i++) {
    e754:	2400      	movs	r4, #0
    e756:	2c07      	cmp	r4, #7
    e758:	d808      	bhi.n	e76c <hal_uart_tx_fill_buf+0x1c>
        data = u->u_tx_func(u->u_func_arg);
    e75a:	692b      	ldr	r3, [r5, #16]
    e75c:	69a8      	ldr	r0, [r5, #24]
    e75e:	4798      	blx	r3
        if (data < 0) {
    e760:	2800      	cmp	r0, #0
    e762:	db03      	blt.n	e76c <hal_uart_tx_fill_buf+0x1c>
            break;
        }
        u->u_tx_buf[i] = data;
    e764:	192b      	adds	r3, r5, r4
    e766:	7098      	strb	r0, [r3, #2]
    for (i = 0; i < sizeof(u->u_tx_buf); i++) {
    e768:	3401      	adds	r4, #1
    e76a:	e7f4      	b.n	e756 <hal_uart_tx_fill_buf+0x6>
    }
    return i;
}
    e76c:	4620      	mov	r0, r4
    e76e:	bd38      	pop	{r3, r4, r5, pc}

0000e770 <uart_irq_handler>:
    nrf_uart->TASKS_STOPTX = 1;
}

static void
uart_irq_handler(NRF_UARTE_Type *nrf_uart, struct hal_uart *u)
{
    e770:	b538      	push	{r3, r4, r5, lr}
    e772:	4604      	mov	r4, r0
    e774:	460d      	mov	r5, r1
    int rc;

    os_trace_isr_enter();

    if (nrf_uart->EVENTS_ENDTX) {
    e776:	f8d0 3120 	ldr.w	r3, [r0, #288]	; 0x120
    e77a:	b973      	cbnz	r3, e79a <uart_irq_handler+0x2a>
            nrf_uart->INTENCLR = UARTE_INT_ENDTX;
            nrf_uart->TASKS_STOPTX = 1;
            u->u_tx_started = 0;
        }
    }
    if (nrf_uart->EVENTS_ENDRX) {
    e77c:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
    e780:	b153      	cbz	r3, e798 <uart_irq_handler+0x28>
        nrf_uart->EVENTS_ENDRX = 0;
    e782:	2300      	movs	r3, #0
    e784:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
        rc = u->u_rx_func(u->u_func_arg, u->u_rx_buf);
    e788:	68eb      	ldr	r3, [r5, #12]
    e78a:	7869      	ldrb	r1, [r5, #1]
    e78c:	69a8      	ldr	r0, [r5, #24]
    e78e:	4798      	blx	r3
        if (rc < 0) {
    e790:	2800      	cmp	r0, #0
    e792:	db21      	blt.n	e7d8 <uart_irq_handler+0x68>
            u->u_rx_stall = 1;
        } else {
            nrf_uart->TASKS_STARTRX = 1;
    e794:	2301      	movs	r3, #1
    e796:	6023      	str	r3, [r4, #0]
        }
    }
    os_trace_isr_exit();
}
    e798:	bd38      	pop	{r3, r4, r5, pc}
        nrf_uart->EVENTS_ENDTX = 0;
    e79a:	2300      	movs	r3, #0
    e79c:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
        rc = hal_uart_tx_fill_buf(u);
    e7a0:	4608      	mov	r0, r1
    e7a2:	f7ff ffd5 	bl	e750 <hal_uart_tx_fill_buf>
        if (rc > 0) {
    e7a6:	2800      	cmp	r0, #0
    e7a8:	dd07      	ble.n	e7ba <uart_irq_handler+0x4a>
            nrf_uart->TXD.PTR = (uint32_t)&u->u_tx_buf;
    e7aa:	1cab      	adds	r3, r5, #2
    e7ac:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
            nrf_uart->TXD.MAXCNT = rc;
    e7b0:	f8c4 0548 	str.w	r0, [r4, #1352]	; 0x548
            nrf_uart->TASKS_STARTTX = 1;
    e7b4:	2301      	movs	r3, #1
    e7b6:	60a3      	str	r3, [r4, #8]
    e7b8:	e7e0      	b.n	e77c <uart_irq_handler+0xc>
            if (u->u_tx_done) {
    e7ba:	696b      	ldr	r3, [r5, #20]
    e7bc:	b10b      	cbz	r3, e7c2 <uart_irq_handler+0x52>
                u->u_tx_done(u->u_func_arg);
    e7be:	69a8      	ldr	r0, [r5, #24]
    e7c0:	4798      	blx	r3
            nrf_uart->INTENCLR = UARTE_INT_ENDTX;
    e7c2:	f44f 7380 	mov.w	r3, #256	; 0x100
    e7c6:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
            nrf_uart->TASKS_STOPTX = 1;
    e7ca:	2301      	movs	r3, #1
    e7cc:	60e3      	str	r3, [r4, #12]
            u->u_tx_started = 0;
    e7ce:	782b      	ldrb	r3, [r5, #0]
    e7d0:	f36f 0382 	bfc	r3, #2, #1
    e7d4:	702b      	strb	r3, [r5, #0]
    e7d6:	e7d1      	b.n	e77c <uart_irq_handler+0xc>
            u->u_rx_stall = 1;
    e7d8:	782b      	ldrb	r3, [r5, #0]
    e7da:	f043 0302 	orr.w	r3, r3, #2
    e7de:	702b      	strb	r3, [r5, #0]
    e7e0:	e7da      	b.n	e798 <uart_irq_handler+0x28>
	...

0000e7e4 <uart0_irq_handler>:

static void
uart0_irq_handler(void)
{
    e7e4:	b508      	push	{r3, lr}
    uart_irq_handler(NRF_UARTE0, &uart0);
    e7e6:	4902      	ldr	r1, [pc, #8]	; (e7f0 <uart0_irq_handler+0xc>)
    e7e8:	4802      	ldr	r0, [pc, #8]	; (e7f4 <uart0_irq_handler+0x10>)
    e7ea:	f7ff ffc1 	bl	e770 <uart_irq_handler>
}
    e7ee:	bd08      	pop	{r3, pc}
    e7f0:	20002138 	.word	0x20002138
    e7f4:	40002000 	.word	0x40002000

0000e7f8 <uart1_irq_handler>:

#if defined(NRF52840_XXAA)
static void
uart1_irq_handler(void)
{
    e7f8:	b508      	push	{r3, lr}
    uart_irq_handler(NRF_UARTE1, &uart1);
    e7fa:	4902      	ldr	r1, [pc, #8]	; (e804 <uart1_irq_handler+0xc>)
    e7fc:	4802      	ldr	r0, [pc, #8]	; (e808 <uart1_irq_handler+0x10>)
    e7fe:	f7ff ffb7 	bl	e770 <uart_irq_handler>
}
    e802:	bd08      	pop	{r3, pc}
    e804:	20002154 	.word	0x20002154
    e808:	40028000 	.word	0x40028000

0000e80c <hal_uart_baudrate>:
#endif

static uint32_t
hal_uart_baudrate(int baudrate)
{
    switch (baudrate) {
    e80c:	f64d 23c0 	movw	r3, #56000	; 0xdac0
    e810:	4298      	cmp	r0, r3
    e812:	d04f      	beq.n	e8b4 <hal_uart_baudrate+0xa8>
    e814:	dc20      	bgt.n	e858 <hal_uart_baudrate+0x4c>
    e816:	f5b0 5f16 	cmp.w	r0, #9600	; 0x2580
    e81a:	d045      	beq.n	e8a8 <hal_uart_baudrate+0x9c>
    e81c:	dd0c      	ble.n	e838 <hal_uart_baudrate+0x2c>
    e81e:	f5b0 4f96 	cmp.w	r0, #19200	; 0x4b00
    e822:	d043      	beq.n	e8ac <hal_uart_baudrate+0xa0>
    e824:	dd13      	ble.n	e84e <hal_uart_baudrate+0x42>
    e826:	f5b0 4fe1 	cmp.w	r0, #28800	; 0x7080
    e82a:	d041      	beq.n	e8b0 <hal_uart_baudrate+0xa4>
    e82c:	f5b0 4f16 	cmp.w	r0, #38400	; 0x9600
    e830:	d10b      	bne.n	e84a <hal_uart_baudrate+0x3e>
    case 19200:
        return UARTE_BAUDRATE_BAUDRATE_Baud19200;
    case 28800:
        return UARTE_BAUDRATE_BAUDRATE_Baud28800;
    case 38400:
        return UARTE_BAUDRATE_BAUDRATE_Baud38400;
    e832:	f44f 001d 	mov.w	r0, #10289152	; 0x9d0000
    e836:	4770      	bx	lr
    switch (baudrate) {
    e838:	f5b0 6f16 	cmp.w	r0, #2400	; 0x960
    e83c:	d04b      	beq.n	e8d6 <hal_uart_baudrate+0xca>
    e83e:	f5b0 5f96 	cmp.w	r0, #4800	; 0x12c0
    e842:	d02f      	beq.n	e8a4 <hal_uart_baudrate+0x98>
    e844:	f5b0 6f96 	cmp.w	r0, #1200	; 0x4b0
    e848:	d029      	beq.n	e89e <hal_uart_baudrate+0x92>
    case 921600:
        return UARTE_BAUDRATE_BAUDRATE_Baud921600;
    case 1000000:
        return UARTE_BAUDRATE_BAUDRATE_Baud1M;
    default:
        return 0;
    e84a:	2000      	movs	r0, #0
    e84c:	4770      	bx	lr
    switch (baudrate) {
    e84e:	f5b0 5f61 	cmp.w	r0, #14400	; 0x3840
    e852:	d1fa      	bne.n	e84a <hal_uart_baudrate+0x3e>
        return UARTE_BAUDRATE_BAUDRATE_Baud14400;
    e854:	4821      	ldr	r0, [pc, #132]	; (e8dc <hal_uart_baudrate+0xd0>)
    e856:	4770      	bx	lr
    switch (baudrate) {
    e858:	f5b0 3f61 	cmp.w	r0, #230400	; 0x38400
    e85c:	d032      	beq.n	e8c4 <hal_uart_baudrate+0xb8>
    e85e:	dd0c      	ble.n	e87a <hal_uart_baudrate+0x6e>
    e860:	f5b0 2fe1 	cmp.w	r0, #460800	; 0x70800
    e864:	d031      	beq.n	e8ca <hal_uart_baudrate+0xbe>
    e866:	dd14      	ble.n	e892 <hal_uart_baudrate+0x86>
    e868:	f5b0 2f61 	cmp.w	r0, #921600	; 0xe1000
    e86c:	d030      	beq.n	e8d0 <hal_uart_baudrate+0xc4>
    e86e:	4b1c      	ldr	r3, [pc, #112]	; (e8e0 <hal_uart_baudrate+0xd4>)
    e870:	4298      	cmp	r0, r3
    e872:	d1ea      	bne.n	e84a <hal_uart_baudrate+0x3e>
        return UARTE_BAUDRATE_BAUDRATE_Baud1M;
    e874:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    e878:	4770      	bx	lr
    switch (baudrate) {
    e87a:	f5b0 3f96 	cmp.w	r0, #76800	; 0x12c00
    e87e:	d01c      	beq.n	e8ba <hal_uart_baudrate+0xae>
    e880:	f5b0 3fe1 	cmp.w	r0, #115200	; 0x1c200
    e884:	d01b      	beq.n	e8be <hal_uart_baudrate+0xb2>
    e886:	f5b0 4f61 	cmp.w	r0, #57600	; 0xe100
    e88a:	d1de      	bne.n	e84a <hal_uart_baudrate+0x3e>
        return UARTE_BAUDRATE_BAUDRATE_Baud57600;
    e88c:	f44f 006b 	mov.w	r0, #15400960	; 0xeb0000
    e890:	4770      	bx	lr
    switch (baudrate) {
    e892:	4b14      	ldr	r3, [pc, #80]	; (e8e4 <hal_uart_baudrate+0xd8>)
    e894:	4298      	cmp	r0, r3
    e896:	d1d8      	bne.n	e84a <hal_uart_baudrate+0x3e>
        return UARTE_BAUDRATE_BAUDRATE_Baud250000;
    e898:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
    e89c:	4770      	bx	lr
        return UARTE_BAUDRATE_BAUDRATE_Baud1200;
    e89e:	f44f 209e 	mov.w	r0, #323584	; 0x4f000
    e8a2:	4770      	bx	lr
        return UARTE_BAUDRATE_BAUDRATE_Baud4800;
    e8a4:	4810      	ldr	r0, [pc, #64]	; (e8e8 <hal_uart_baudrate+0xdc>)
    e8a6:	4770      	bx	lr
        return UARTE_BAUDRATE_BAUDRATE_Baud9600;
    e8a8:	4810      	ldr	r0, [pc, #64]	; (e8ec <hal_uart_baudrate+0xe0>)
    e8aa:	4770      	bx	lr
        return UARTE_BAUDRATE_BAUDRATE_Baud19200;
    e8ac:	4810      	ldr	r0, [pc, #64]	; (e8f0 <hal_uart_baudrate+0xe4>)
    e8ae:	4770      	bx	lr
        return UARTE_BAUDRATE_BAUDRATE_Baud28800;
    e8b0:	4810      	ldr	r0, [pc, #64]	; (e8f4 <hal_uart_baudrate+0xe8>)
    e8b2:	4770      	bx	lr
        return UARTE_BAUDRATE_BAUDRATE_Baud56000;
    e8b4:	f44f 0065 	mov.w	r0, #15007744	; 0xe50000
    e8b8:	4770      	bx	lr
        return UARTE_BAUDRATE_BAUDRATE_Baud76800;
    e8ba:	480f      	ldr	r0, [pc, #60]	; (e8f8 <hal_uart_baudrate+0xec>)
    e8bc:	4770      	bx	lr
        return UARTE_BAUDRATE_BAUDRATE_Baud115200;
    e8be:	f04f 70eb 	mov.w	r0, #30801920	; 0x1d60000
    e8c2:	4770      	bx	lr
        return UARTE_BAUDRATE_BAUDRATE_Baud230400;
    e8c4:	f04f 706c 	mov.w	r0, #61865984	; 0x3b00000
    e8c8:	4770      	bx	lr
        return UARTE_BAUDRATE_BAUDRATE_Baud460800;
    e8ca:	f04f 60e8 	mov.w	r0, #121634816	; 0x7400000
    e8ce:	4770      	bx	lr
        return UARTE_BAUDRATE_BAUDRATE_Baud921600;
    e8d0:	f04f 6070 	mov.w	r0, #251658240	; 0xf000000
    e8d4:	4770      	bx	lr
        return UARTE_BAUDRATE_BAUDRATE_Baud2400;
    e8d6:	f44f 201d 	mov.w	r0, #643072	; 0x9d000
    }
}
    e8da:	4770      	bx	lr
    e8dc:	003af000 	.word	0x003af000
    e8e0:	000f4240 	.word	0x000f4240
    e8e4:	0003d090 	.word	0x0003d090
    e8e8:	0013b000 	.word	0x0013b000
    e8ec:	00275000 	.word	0x00275000
    e8f0:	004ea000 	.word	0x004ea000
    e8f4:	0075c000 	.word	0x0075c000
    e8f8:	013a9000 	.word	0x013a9000

0000e8fc <hal_uart_init_cbs>:
{
    e8fc:	b410      	push	{r4}
    if (port == 0) {
    e8fe:	b118      	cbz	r0, e908 <hal_uart_init_cbs+0xc>
    } else if (port == 1) {
    e900:	2801      	cmp	r0, #1
    e902:	d10e      	bne.n	e922 <hal_uart_init_cbs+0x26>
        u = &uart1;
    e904:	480a      	ldr	r0, [pc, #40]	; (e930 <hal_uart_init_cbs+0x34>)
    e906:	e000      	b.n	e90a <hal_uart_init_cbs+0xe>
        u = &uart0;
    e908:	480a      	ldr	r0, [pc, #40]	; (e934 <hal_uart_init_cbs+0x38>)
    if (u->u_open) {
    e90a:	7804      	ldrb	r4, [r0, #0]
    e90c:	f014 0f01 	tst.w	r4, #1
    e910:	d10a      	bne.n	e928 <hal_uart_init_cbs+0x2c>
    u->u_rx_func = rx_func;
    e912:	60c3      	str	r3, [r0, #12]
    u->u_tx_func = tx_func;
    e914:	6101      	str	r1, [r0, #16]
    u->u_tx_done = tx_done;
    e916:	6142      	str	r2, [r0, #20]
    u->u_func_arg = arg;
    e918:	9b01      	ldr	r3, [sp, #4]
    e91a:	6183      	str	r3, [r0, #24]
    return 0;
    e91c:	2000      	movs	r0, #0
}
    e91e:	bc10      	pop	{r4}
    e920:	4770      	bx	lr
        return -1;
    e922:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    e926:	e7fa      	b.n	e91e <hal_uart_init_cbs+0x22>
        return -1;
    e928:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    e92c:	e7f7      	b.n	e91e <hal_uart_init_cbs+0x22>
    e92e:	bf00      	nop
    e930:	20002154 	.word	0x20002154
    e934:	20002138 	.word	0x20002138

0000e938 <hal_uart_start_tx>:
{
    e938:	b570      	push	{r4, r5, r6, lr}
    if (port == 0) {
    e93a:	b120      	cbz	r0, e946 <hal_uart_start_tx+0xe>
    } else if (port == 1) {
    e93c:	2801      	cmp	r0, #1
    e93e:	d10d      	bne.n	e95c <hal_uart_start_tx+0x24>
        u = &uart1;
    e940:	4c11      	ldr	r4, [pc, #68]	; (e988 <hal_uart_start_tx+0x50>)
        nrf_uart = NRF_UARTE1;
    e942:	4e12      	ldr	r6, [pc, #72]	; (e98c <hal_uart_start_tx+0x54>)
    e944:	e001      	b.n	e94a <hal_uart_start_tx+0x12>
        u = &uart0;
    e946:	4c12      	ldr	r4, [pc, #72]	; (e990 <hal_uart_start_tx+0x58>)
        nrf_uart = NRF_UARTE0;
    e948:	4e12      	ldr	r6, [pc, #72]	; (e994 <hal_uart_start_tx+0x5c>)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    e94a:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    e94e:	b672      	cpsid	i
    if (u->u_tx_started == 0) {
    e950:	7823      	ldrb	r3, [r4, #0]
    e952:	f013 0f04 	tst.w	r3, #4
    e956:	d002      	beq.n	e95e <hal_uart_start_tx+0x26>
    __HAL_ENABLE_INTERRUPTS(sr);
    e958:	b905      	cbnz	r5, e95c <hal_uart_start_tx+0x24>
  __ASM volatile ("cpsie i" : : : "memory");
    e95a:	b662      	cpsie	i
}
    e95c:	bd70      	pop	{r4, r5, r6, pc}
        rc = hal_uart_tx_fill_buf(u);
    e95e:	4620      	mov	r0, r4
    e960:	f7ff fef6 	bl	e750 <hal_uart_tx_fill_buf>
        if (rc > 0) {
    e964:	2800      	cmp	r0, #0
    e966:	ddf7      	ble.n	e958 <hal_uart_start_tx+0x20>
            nrf_uart->INTENSET = UARTE_INT_ENDTX;
    e968:	f44f 7380 	mov.w	r3, #256	; 0x100
    e96c:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304
            nrf_uart->TXD.PTR = (uint32_t)&u->u_tx_buf;
    e970:	1ca3      	adds	r3, r4, #2
    e972:	f8c6 3544 	str.w	r3, [r6, #1348]	; 0x544
            nrf_uart->TXD.MAXCNT = rc;
    e976:	f8c6 0548 	str.w	r0, [r6, #1352]	; 0x548
            nrf_uart->TASKS_STARTTX = 1;
    e97a:	2301      	movs	r3, #1
    e97c:	60b3      	str	r3, [r6, #8]
            u->u_tx_started = 1;
    e97e:	7823      	ldrb	r3, [r4, #0]
    e980:	f043 0304 	orr.w	r3, r3, #4
    e984:	7023      	strb	r3, [r4, #0]
    e986:	e7e7      	b.n	e958 <hal_uart_start_tx+0x20>
    e988:	20002154 	.word	0x20002154
    e98c:	40028000 	.word	0x40028000
    e990:	20002138 	.word	0x20002138
    e994:	40002000 	.word	0x40002000

0000e998 <hal_uart_start_rx>:
{
    e998:	b570      	push	{r4, r5, r6, lr}
    if (port == 0) {
    e99a:	b120      	cbz	r0, e9a6 <hal_uart_start_rx+0xe>
    } else if (port == 1) {
    e99c:	2801      	cmp	r0, #1
    e99e:	d118      	bne.n	e9d2 <hal_uart_start_rx+0x3a>
        u = &uart1;
    e9a0:	4c0c      	ldr	r4, [pc, #48]	; (e9d4 <hal_uart_start_rx+0x3c>)
        nrf_uart = NRF_UARTE1;
    e9a2:	4e0d      	ldr	r6, [pc, #52]	; (e9d8 <hal_uart_start_rx+0x40>)
    e9a4:	e001      	b.n	e9aa <hal_uart_start_rx+0x12>
        u = &uart0;
    e9a6:	4c0d      	ldr	r4, [pc, #52]	; (e9dc <hal_uart_start_rx+0x44>)
        nrf_uart = NRF_UARTE0;
    e9a8:	4e0d      	ldr	r6, [pc, #52]	; (e9e0 <hal_uart_start_rx+0x48>)
    if (u->u_rx_stall) {
    e9aa:	7823      	ldrb	r3, [r4, #0]
    e9ac:	f013 0f02 	tst.w	r3, #2
    e9b0:	d00f      	beq.n	e9d2 <hal_uart_start_rx+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    e9b2:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    e9b6:	b672      	cpsid	i
        rc = u->u_rx_func(u->u_func_arg, u->u_rx_buf);
    e9b8:	68e3      	ldr	r3, [r4, #12]
    e9ba:	7861      	ldrb	r1, [r4, #1]
    e9bc:	69a0      	ldr	r0, [r4, #24]
    e9be:	4798      	blx	r3
        if (rc == 0) {
    e9c0:	b928      	cbnz	r0, e9ce <hal_uart_start_rx+0x36>
            u->u_rx_stall = 0;
    e9c2:	7823      	ldrb	r3, [r4, #0]
    e9c4:	f36f 0341 	bfc	r3, #1, #1
    e9c8:	7023      	strb	r3, [r4, #0]
            nrf_uart->TASKS_STARTRX = 1;
    e9ca:	2301      	movs	r3, #1
    e9cc:	6033      	str	r3, [r6, #0]
        __HAL_ENABLE_INTERRUPTS(sr);
    e9ce:	b905      	cbnz	r5, e9d2 <hal_uart_start_rx+0x3a>
  __ASM volatile ("cpsie i" : : : "memory");
    e9d0:	b662      	cpsie	i
}
    e9d2:	bd70      	pop	{r4, r5, r6, pc}
    e9d4:	20002154 	.word	0x20002154
    e9d8:	40028000 	.word	0x40028000
    e9dc:	20002138 	.word	0x20002138
    e9e0:	40002000 	.word	0x40002000

0000e9e4 <hal_uart_blocking_tx>:
{
    e9e4:	b082      	sub	sp, #8
    e9e6:	f88d 1007 	strb.w	r1, [sp, #7]
    if (port == 0) {
    e9ea:	b120      	cbz	r0, e9f6 <hal_uart_blocking_tx+0x12>
    } else if (port == 1) {
    e9ec:	2801      	cmp	r0, #1
    e9ee:	d120      	bne.n	ea32 <hal_uart_blocking_tx+0x4e>
        nrf_uart = NRF_UARTE1;
    e9f0:	4b11      	ldr	r3, [pc, #68]	; (ea38 <hal_uart_blocking_tx+0x54>)
        u = &uart1;
    e9f2:	4a12      	ldr	r2, [pc, #72]	; (ea3c <hal_uart_blocking_tx+0x58>)
    e9f4:	e001      	b.n	e9fa <hal_uart_blocking_tx+0x16>
        nrf_uart = NRF_UARTE0;
    e9f6:	4b12      	ldr	r3, [pc, #72]	; (ea40 <hal_uart_blocking_tx+0x5c>)
        u = &uart0;
    e9f8:	4a12      	ldr	r2, [pc, #72]	; (ea44 <hal_uart_blocking_tx+0x60>)
    if (!u->u_open) {
    e9fa:	7812      	ldrb	r2, [r2, #0]
    e9fc:	f012 0f01 	tst.w	r2, #1
    ea00:	d017      	beq.n	ea32 <hal_uart_blocking_tx+0x4e>
    if (u->u_tx_started) {
    ea02:	f012 0f04 	tst.w	r2, #4
    ea06:	d003      	beq.n	ea10 <hal_uart_blocking_tx+0x2c>
        while (nrf_uart->EVENTS_ENDTX == 0) {
    ea08:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    ea0c:	2a00      	cmp	r2, #0
    ea0e:	d0fb      	beq.n	ea08 <hal_uart_blocking_tx+0x24>
    nrf_uart->EVENTS_ENDTX = 0;
    ea10:	2200      	movs	r2, #0
    ea12:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    nrf_uart->TXD.PTR = (uint32_t)&data;
    ea16:	f10d 0207 	add.w	r2, sp, #7
    ea1a:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
    nrf_uart->TXD.MAXCNT = 1;
    ea1e:	2201      	movs	r2, #1
    ea20:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    nrf_uart->TASKS_STARTTX = 1;
    ea24:	609a      	str	r2, [r3, #8]
    while (nrf_uart->EVENTS_ENDTX == 0) {
    ea26:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    ea2a:	2a00      	cmp	r2, #0
    ea2c:	d0fb      	beq.n	ea26 <hal_uart_blocking_tx+0x42>
    nrf_uart->TASKS_STOPTX = 1;
    ea2e:	2201      	movs	r2, #1
    ea30:	60da      	str	r2, [r3, #12]
}
    ea32:	b002      	add	sp, #8
    ea34:	4770      	bx	lr
    ea36:	bf00      	nop
    ea38:	40028000 	.word	0x40028000
    ea3c:	20002154 	.word	0x20002154
    ea40:	40002000 	.word	0x40002000
    ea44:	20002138 	.word	0x20002138

0000ea48 <hal_uart_init>:
{
    struct nrf52_uart_cfg *cfg;
    NRF_UARTE_Type *nrf_uart;

#if defined(NRF52840_XXAA)
    if (port == 0) {
    ea48:	b9b0      	cbnz	r0, ea78 <hal_uart_init+0x30>
  uint32_t vectors = (uint32_t )SCB->VTOR;
    ea4a:	4b11      	ldr	r3, [pc, #68]	; (ea90 <hal_uart_init+0x48>)
    ea4c:	689b      	ldr	r3, [r3, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
    ea4e:	4a11      	ldr	r2, [pc, #68]	; (ea94 <hal_uart_init+0x4c>)
    ea50:	649a      	str	r2, [r3, #72]	; 0x48
        nrf_uart = NRF_UARTE0;
    ea52:	4b11      	ldr	r3, [pc, #68]	; (ea98 <hal_uart_init+0x50>)
    NVIC_SetVector(UARTE0_UART0_IRQn, (uint32_t)uart0_irq_handler);
#endif

    cfg = (struct nrf52_uart_cfg *)arg;

    nrf_uart->PSEL.TXD = cfg->suc_pin_tx;
    ea54:	f991 2000 	ldrsb.w	r2, [r1]
    ea58:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
    nrf_uart->PSEL.RXD = cfg->suc_pin_rx;
    ea5c:	f991 2001 	ldrsb.w	r2, [r1, #1]
    ea60:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    nrf_uart->PSEL.RTS = cfg->suc_pin_rts;
    ea64:	f991 2002 	ldrsb.w	r2, [r1, #2]
    ea68:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    nrf_uart->PSEL.CTS = cfg->suc_pin_cts;
    ea6c:	f991 2003 	ldrsb.w	r2, [r1, #3]
    ea70:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510

    return 0;
    ea74:	2000      	movs	r0, #0
    ea76:	4770      	bx	lr
    } else if (port == 1) {
    ea78:	2801      	cmp	r0, #1
    ea7a:	d106      	bne.n	ea8a <hal_uart_init+0x42>
  uint32_t vectors = (uint32_t )SCB->VTOR;
    ea7c:	4b04      	ldr	r3, [pc, #16]	; (ea90 <hal_uart_init+0x48>)
    ea7e:	689b      	ldr	r3, [r3, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
    ea80:	4a06      	ldr	r2, [pc, #24]	; (ea9c <hal_uart_init+0x54>)
    ea82:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
        nrf_uart = NRF_UARTE1;
    ea86:	4b06      	ldr	r3, [pc, #24]	; (eaa0 <hal_uart_init+0x58>)
    ea88:	e7e4      	b.n	ea54 <hal_uart_init+0xc>
        return -1;
    ea8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    ea8e:	4770      	bx	lr
    ea90:	e000ed00 	.word	0xe000ed00
    ea94:	0000e7e5 	.word	0x0000e7e5
    ea98:	40002000 	.word	0x40002000
    ea9c:	0000e7f9 	.word	0x0000e7f9
    eaa0:	40028000 	.word	0x40028000

0000eaa4 <hal_uart_config>:

int
hal_uart_config(int port, int32_t baudrate, uint8_t databits, uint8_t stopbits,
  enum hal_uart_parity parity, enum hal_uart_flow_ctl flow_ctl)
{
    eaa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    eaa6:	f89d 7018 	ldrb.w	r7, [sp, #24]
    uint32_t baud_reg;
    NRF_UARTE_Type *nrf_uart;
    IRQn_Type irqnum;

#if defined(NRF52840_XXAA)
    if (port == 0) {
    eaaa:	b128      	cbz	r0, eab8 <hal_uart_config+0x14>
        nrf_uart = NRF_UARTE0;
        irqnum = UARTE0_UART0_IRQn;
        u = &uart0;
    } else if (port == 1) {
    eaac:	2801      	cmp	r0, #1
    eaae:	d15c      	bne.n	eb6a <hal_uart_config+0xc6>
        nrf_uart = NRF_UARTE1;
        irqnum = UARTE1_IRQn;
    eab0:	2628      	movs	r6, #40	; 0x28
        nrf_uart = NRF_UARTE1;
    eab2:	4c37      	ldr	r4, [pc, #220]	; (eb90 <hal_uart_config+0xec>)
        u = &uart1;
    eab4:	4d37      	ldr	r5, [pc, #220]	; (eb94 <hal_uart_config+0xf0>)
    eab6:	e002      	b.n	eabe <hal_uart_config+0x1a>
        irqnum = UARTE0_UART0_IRQn;
    eab8:	2602      	movs	r6, #2
        nrf_uart = NRF_UARTE0;
    eaba:	4c37      	ldr	r4, [pc, #220]	; (eb98 <hal_uart_config+0xf4>)
        u = &uart0;
    eabc:	4d37      	ldr	r5, [pc, #220]	; (eb9c <hal_uart_config+0xf8>)
    nrf_uart = NRF_UARTE0;
    irqnum = UARTE0_UART0_IRQn;
    u = &uart0;
#endif

    if (u->u_open) {
    eabe:	7828      	ldrb	r0, [r5, #0]
    eac0:	f010 0f01 	tst.w	r0, #1
    eac4:	d154      	bne.n	eb70 <hal_uart_config+0xcc>
     * pin config
     * UART config
     * nvic config
     * enable uart
     */
    if (databits != 8) {
    eac6:	2a08      	cmp	r2, #8
    eac8:	d155      	bne.n	eb76 <hal_uart_config+0xd2>
        return -1;
    }
    if (stopbits != 1) {
    eaca:	2b01      	cmp	r3, #1
    eacc:	d156      	bne.n	eb7c <hal_uart_config+0xd8>
        return -1;
    }

    switch (parity) {
    eace:	2f01      	cmp	r7, #1
    ead0:	d057      	beq.n	eb82 <hal_uart_config+0xde>
    ead2:	2f02      	cmp	r7, #2
    ead4:	d03d      	beq.n	eb52 <hal_uart_config+0xae>
    uint32_t cfg_reg = 0;
    ead6:	2700      	movs	r7, #0
    ead8:	4608      	mov	r0, r1
    case HAL_UART_PARITY_EVEN:
        cfg_reg |= UARTE_CONFIG_PARITY;
        break;
    }

    switch (flow_ctl) {
    eada:	f89d 301c 	ldrb.w	r3, [sp, #28]
    eade:	2b01      	cmp	r3, #1
    eae0:	d10b      	bne.n	eafa <hal_uart_config+0x56>
    case HAL_UART_FLOW_CTL_NONE:
        break;
    case HAL_UART_FLOW_CTL_RTS_CTS:
        cfg_reg |= UARTE_CONFIG_HWFC;
    eae2:	f047 0701 	orr.w	r7, r7, #1
        if (nrf_uart->PSEL.RTS == 0xffffffff ||
    eae6:	f8d4 3508 	ldr.w	r3, [r4, #1288]	; 0x508
    eaea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    eaee:	d032      	beq.n	eb56 <hal_uart_config+0xb2>
          nrf_uart->PSEL.CTS == 0xffffffff) {
    eaf0:	f8d4 3510 	ldr.w	r3, [r4, #1296]	; 0x510
        if (nrf_uart->PSEL.RTS == 0xffffffff ||
    eaf4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    eaf8:	d02d      	beq.n	eb56 <hal_uart_config+0xb2>
            assert(0);
            return -1;
        }
        break;
    }
    baud_reg = hal_uart_baudrate(baudrate);
    eafa:	f7ff fe87 	bl	e80c <hal_uart_baudrate>
    if (baud_reg == 0) {
    eafe:	4603      	mov	r3, r0
    eb00:	2800      	cmp	r0, #0
    eb02:	d041      	beq.n	eb88 <hal_uart_config+0xe4>
        return -1;
    }
    nrf_uart->ENABLE = 0;
    eb04:	2000      	movs	r0, #0
    eb06:	f8c4 0500 	str.w	r0, [r4, #1280]	; 0x500
    nrf_uart->INTENCLR = 0xffffffff;
    eb0a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    eb0e:	f8c4 2308 	str.w	r2, [r4, #776]	; 0x308
    nrf_uart->BAUDRATE = baud_reg;
    eb12:	f8c4 3524 	str.w	r3, [r4, #1316]	; 0x524
    nrf_uart->CONFIG = cfg_reg;
    eb16:	f8c4 756c 	str.w	r7, [r4, #1388]	; 0x56c
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    eb1a:	f006 020a 	and.w	r2, r6, #10
    eb1e:	0976      	lsrs	r6, r6, #5
    eb20:	2301      	movs	r3, #1
    eb22:	fa03 f202 	lsl.w	r2, r3, r2
    eb26:	491e      	ldr	r1, [pc, #120]	; (eba0 <hal_uart_config+0xfc>)
    eb28:	f841 2026 	str.w	r2, [r1, r6, lsl #2]

    NVIC_EnableIRQ(irqnum);

    nrf_uart->ENABLE = UARTE_ENABLE;
    eb2c:	2208      	movs	r2, #8
    eb2e:	f8c4 2500 	str.w	r2, [r4, #1280]	; 0x500

    nrf_uart->INTENSET = UARTE_INT_ENDRX;
    eb32:	2210      	movs	r2, #16
    eb34:	f8c4 2304 	str.w	r2, [r4, #772]	; 0x304
    nrf_uart->RXD.PTR = (uint32_t)&u->u_rx_buf;
    eb38:	18ea      	adds	r2, r5, r3
    eb3a:	f8c4 2534 	str.w	r2, [r4, #1332]	; 0x534
    nrf_uart->RXD.MAXCNT = sizeof(u->u_rx_buf);
    eb3e:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    nrf_uart->TASKS_STARTRX = 1;
    eb42:	6023      	str	r3, [r4, #0]

    u->u_rx_stall = 0;
    eb44:	782b      	ldrb	r3, [r5, #0]
    u->u_tx_started = 0;
    u->u_open = 1;
    eb46:	f003 03f9 	and.w	r3, r3, #249	; 0xf9
    eb4a:	f043 0301 	orr.w	r3, r3, #1
    eb4e:	702b      	strb	r3, [r5, #0]

    return 0;
}
    eb50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        cfg_reg |= UARTE_CONFIG_PARITY;
    eb52:	270e      	movs	r7, #14
    eb54:	e7c0      	b.n	ead8 <hal_uart_config+0x34>
            assert(0);
    eb56:	f7fd fb29 	bl	c1ac <hal_debugger_connected>
    eb5a:	b100      	cbz	r0, eb5e <hal_uart_config+0xba>
    eb5c:	be01      	bkpt	0x0001
    eb5e:	2300      	movs	r3, #0
    eb60:	461a      	mov	r2, r3
    eb62:	4619      	mov	r1, r3
    eb64:	4618      	mov	r0, r3
    eb66:	f7fe fc01 	bl	d36c <__assert_func>
        return -1;
    eb6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    eb6e:	e7ef      	b.n	eb50 <hal_uart_config+0xac>
        return -1;
    eb70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    eb74:	e7ec      	b.n	eb50 <hal_uart_config+0xac>
        return -1;
    eb76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    eb7a:	e7e9      	b.n	eb50 <hal_uart_config+0xac>
        return -1;
    eb7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    eb80:	e7e6      	b.n	eb50 <hal_uart_config+0xac>
        return -1;
    eb82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    eb86:	e7e3      	b.n	eb50 <hal_uart_config+0xac>
        return -1;
    eb88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    eb8c:	e7e0      	b.n	eb50 <hal_uart_config+0xac>
    eb8e:	bf00      	nop
    eb90:	40028000 	.word	0x40028000
    eb94:	20002154 	.word	0x20002154
    eb98:	40002000 	.word	0x40002000
    eb9c:	20002138 	.word	0x20002138
    eba0:	e000e100 	.word	0xe000e100

0000eba4 <hal_uart_close>:
{
    volatile struct hal_uart *u;
    NRF_UARTE_Type *nrf_uart;

#if defined(NRF52840_XXAA)
    if (port == 0) {
    eba4:	b120      	cbz	r0, ebb0 <hal_uart_close+0xc>
        nrf_uart = NRF_UARTE0;
        u = &uart0;
    } else if (port == 1) {
    eba6:	2801      	cmp	r0, #1
    eba8:	d114      	bne.n	ebd4 <hal_uart_close+0x30>
        nrf_uart = NRF_UARTE1;
    ebaa:	490c      	ldr	r1, [pc, #48]	; (ebdc <hal_uart_close+0x38>)
        u = &uart1;
    ebac:	4a0c      	ldr	r2, [pc, #48]	; (ebe0 <hal_uart_close+0x3c>)
    ebae:	e001      	b.n	ebb4 <hal_uart_close+0x10>
        nrf_uart = NRF_UARTE0;
    ebb0:	490c      	ldr	r1, [pc, #48]	; (ebe4 <hal_uart_close+0x40>)
        u = &uart0;
    ebb2:	4a0d      	ldr	r2, [pc, #52]	; (ebe8 <hal_uart_close+0x44>)
    }
    nrf_uart = NRF_UARTE0;
    u = &uart0;
#endif

    u->u_open = 0;
    ebb4:	7813      	ldrb	r3, [r2, #0]
    ebb6:	f36f 0300 	bfc	r3, #0, #1
    ebba:	7013      	strb	r3, [r2, #0]
    while (u->u_tx_started) {
    ebbc:	7813      	ldrb	r3, [r2, #0]
    ebbe:	f013 0f04 	tst.w	r3, #4
    ebc2:	d1fb      	bne.n	ebbc <hal_uart_close+0x18>
        /* Wait here until the dma is finished */
    }
    nrf_uart->ENABLE = 0;
    ebc4:	2000      	movs	r0, #0
    ebc6:	f8c1 0500 	str.w	r0, [r1, #1280]	; 0x500
    nrf_uart->INTENCLR = 0xffffffff;
    ebca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    ebce:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    return 0;
    ebd2:	4770      	bx	lr
        return -1;
    ebd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    ebd8:	4770      	bx	lr
    ebda:	bf00      	nop
    ebdc:	40028000 	.word	0x40028000
    ebe0:	20002154 	.word	0x20002154
    ebe4:	40002000 	.word	0x40002000
    ebe8:	20002138 	.word	0x20002138
    ebec:	6e69616d 	.word	0x6e69616d
    ebf0:	00000000 	.word	0x00000000
    ebf4:	656c6469 	.word	0x656c6469
    ebf8:	00000000 	.word	0x00000000
    ebfc:	7379736d 	.word	0x7379736d
    ec00:	0000315f 	.word	0x0000315f

0000ec04 <sysflash_map_dflt>:
	...
    ec0c:	00008000 00000001 0000c000 00076000     .............`..
    ec1c:	00000002 00082000 00076000 00000003     ..... ...`......
    ec2c:	000f8000 00004000 00000010 00008000     .....@..........
    ec3c:	00004000 00000011 000fc000 00004000     .@...........@..

0000ec4c <nrf52k_flash_dev>:
    ec4c:	0000ec64 00000000 00100000 00000100     d...............
    ec5c:	00000001 000000ff                       ........

0000ec64 <nrf52k_flash_funcs>:
    ec64:	0000de39 0000dd69 0000dce9 0000dd41     9...i.......A...
    ec74:	00000000 0000dd3d 00000000 74726175     ....=.......uart
    ec84:	00000030                                0...

0000ec88 <os_bsp_uart0_cfg>:
    ec88:	07050806                                ....

0000ec8c <nrf52_hal_timers>:
    ec8c:	20002268 00000000 00000000 00000000     h". ............
	...

/home/crepel/Documents/EPFL/bluetooth_stuff/Link_layer_security/firmware_project/bin/targets/my_blinky_nordic/app/apps/blinky/blinky.elf:     file format elf32-littlearm

arm-none-eabi-objdump: section '.rodata' mentioned in a -j option, but not found in any input file
   text	   data	    bss	    dec	    hex	filename
  11420	     44	   8820	  20284	   4f3c	/home/crepel/Documents/EPFL/bluetooth_stuff/Link_layer_security/firmware_project/bin/targets/my_blinky_nordic/app/apps/blinky/blinky.elf
